1
00:00:01,420 --> 00:00:05,630
[Music]

2
00:00:05,839 --> 00:00:08,880
appreciate it again spoiler container

3
00:00:08,880 --> 00:00:11,440
security it's all about the supply chain

4
00:00:11,440 --> 00:00:13,759
and it's a cooking theme of course it

5
00:00:13,759 --> 00:00:18,240
seems like everybody uses that so

6
00:00:18,240 --> 00:00:20,720
let me talk a little bit about myself

7
00:00:20,720 --> 00:00:23,840
again to expand on what john said i'm a

8
00:00:23,840 --> 00:00:25,680
currently a security architect a chief

9
00:00:25,680 --> 00:00:27,840
security architect and i like to think

10
00:00:27,840 --> 00:00:30,640
of myself as a professional contrarian i

11
00:00:30,640 --> 00:00:33,600
have had a podcast in the past uh some

12
00:00:33,600 --> 00:00:35,120
people actually have found it it's been

13
00:00:35,120 --> 00:00:38,079
about 10 years um i'm a blogger a b2b

14
00:00:38,079 --> 00:00:39,520
writer and

15
00:00:39,520 --> 00:00:40,879
just your

16
00:00:40,879 --> 00:00:44,559
regular infosec benny jesuit witch

17
00:00:44,559 --> 00:00:47,520
i tend to focus on best practices and i

18
00:00:47,520 --> 00:00:49,680
have been a former unix engineer and

19
00:00:49,680 --> 00:00:51,920
network engineer so i can get pretty

20
00:00:51,920 --> 00:00:54,320
nerdy when necessary and this is how you

21
00:00:54,320 --> 00:00:57,280
reach me and i i will have slides online

22
00:00:57,280 --> 00:01:00,960
at some point somewhere somehow

23
00:01:00,960 --> 00:01:02,879
we want to start out with us with a

24
00:01:02,879 --> 00:01:04,159
short poll

25
00:01:04,159 --> 00:01:06,159
i wanted to find out where everybody's

26
00:01:06,159 --> 00:01:08,240
organization was in terms of using

27
00:01:08,240 --> 00:01:11,520
containers uh one two and three one just

28
00:01:11,520 --> 00:01:13,200
getting started mostly using in

29
00:01:13,200 --> 00:01:15,840
development as we refactor applications

30
00:01:15,840 --> 00:01:18,960
for cloud native uh two evenly split

31
00:01:18,960 --> 00:01:21,680
between containers and full vms uh and

32
00:01:21,680 --> 00:01:23,439
or bare metal with an os and an

33
00:01:23,439 --> 00:01:26,320
application stack or three what's a

34
00:01:26,320 --> 00:01:28,240
container

35
00:01:28,240 --> 00:01:30,640
and that will be going on and then i'll

36
00:01:30,640 --> 00:01:33,360
i'll let uh john step in with uh that

37
00:01:33,360 --> 00:01:35,119
the results of that poll in a couple of

38
00:01:35,119 --> 00:01:37,759
minutes but i'm gonna just move on

39
00:01:37,759 --> 00:01:39,920
because uh we're a little compressed

40
00:01:39,920 --> 00:01:41,759
probably for time

41
00:01:41,759 --> 00:01:42,640
so

42
00:01:42,640 --> 00:01:44,720
the supply chain

43
00:01:44,720 --> 00:01:46,960
the software supply chain what

44
00:01:46,960 --> 00:01:49,040
containers are software

45
00:01:49,040 --> 00:01:51,439
sorry they are

46
00:01:51,439 --> 00:01:53,759
um so in case you're not very familiar

47
00:01:53,759 --> 00:01:55,840
with what a typical software supply

48
00:01:55,840 --> 00:01:57,920
chain is i of course have

49
00:01:57,920 --> 00:02:00,079
arranged to have that represented for

50
00:02:00,079 --> 00:02:02,640
you with commonly used tools basically a

51
00:02:02,640 --> 00:02:05,280
software supply chain is a set of

52
00:02:05,280 --> 00:02:09,758
processes that build a product um

53
00:02:09,758 --> 00:02:12,000
your typical ci cd pipeline as you'd

54
00:02:12,000 --> 00:02:13,520
like to think about it you know where

55
00:02:13,520 --> 00:02:15,920
you have delivered deploy

56
00:02:15,920 --> 00:02:19,040
um where you and typically people split

57
00:02:19,040 --> 00:02:22,239
up um in in get very they get very upset

58
00:02:22,239 --> 00:02:25,280
about the d in ci cd right is it deliver

59
00:02:25,280 --> 00:02:27,440
is it deploy most people separate those

60
00:02:27,440 --> 00:02:29,760
through release management criteria but

61
00:02:29,760 --> 00:02:32,000
again you'll see your typical tools your

62
00:02:32,000 --> 00:02:36,800
jira for plan confluence um you'll see

63
00:02:36,800 --> 00:02:39,840
you know your ides for code

64
00:02:39,840 --> 00:02:42,959
your source control systems like github

65
00:02:42,959 --> 00:02:44,959
you know jenkins for

66
00:02:44,959 --> 00:02:46,879
building for ci

67
00:02:46,879 --> 00:02:48,480
possibly cd

68
00:02:48,480 --> 00:02:51,200
travis ci which is a big favorite just

69
00:02:51,200 --> 00:02:52,000
so

70
00:02:52,000 --> 00:02:54,239
that's what you need to think of as your

71
00:02:54,239 --> 00:02:56,160
software supply chain if you're if some

72
00:02:56,160 --> 00:02:57,840
of the people here aren't as familiar

73
00:02:57,840 --> 00:03:02,000
with the software development process

74
00:03:03,040 --> 00:03:05,200
um now

75
00:03:05,200 --> 00:03:07,760
that we've looked at the software supply

76
00:03:07,760 --> 00:03:10,319
chain let's break it down a little bit

77
00:03:10,319 --> 00:03:12,800
into a container supply chain i like to

78
00:03:12,800 --> 00:03:15,200
think of the entire software release

79
00:03:15,200 --> 00:03:17,200
process what everybody thinks of as a

80
00:03:17,200 --> 00:03:19,519
software development pipeline as a

81
00:03:19,519 --> 00:03:21,760
pipeline of pipelines

82
00:03:21,760 --> 00:03:23,360
because you have you know you have

83
00:03:23,360 --> 00:03:25,200
infrastructure as code and one of the

84
00:03:25,200 --> 00:03:27,280
sub pipelines that you're going to have

85
00:03:27,280 --> 00:03:29,280
is your container pipe supply chain your

86
00:03:29,280 --> 00:03:31,760
container pipeline and so you'll see

87
00:03:31,760 --> 00:03:33,680
i've broken it up into a software

88
00:03:33,680 --> 00:03:36,720
pipeline section where you make say your

89
00:03:36,720 --> 00:03:39,519
war file as an example and then you

90
00:03:39,519 --> 00:03:41,920
build your container and you with your

91
00:03:41,920 --> 00:03:44,879
war file you get an image you test your

92
00:03:44,879 --> 00:03:47,680
image and then you publish it to

93
00:03:47,680 --> 00:03:50,879
an image repository

94
00:03:50,879 --> 00:03:51,599
so

95
00:03:51,599 --> 00:03:54,319
let's talk about some standard supply

96
00:03:54,319 --> 00:03:57,120
chain threats that you typically see

97
00:03:57,120 --> 00:03:59,519
i've pulled this from the salsa security

98
00:03:59,519 --> 00:04:02,560
framework which is a supply chain

99
00:04:02,560 --> 00:04:04,319
security model

100
00:04:04,319 --> 00:04:06,319
i highly recommend it i think it started

101
00:04:06,319 --> 00:04:08,480
out at google but now it has multiple

102
00:04:08,480 --> 00:04:11,280
contributors from private industry

103
00:04:11,280 --> 00:04:12,239
so

104
00:04:12,239 --> 00:04:13,599
a

105
00:04:13,599 --> 00:04:16,320
you bypass the code review that's a

106
00:04:16,320 --> 00:04:18,238
really important element maybe you do

107
00:04:18,238 --> 00:04:20,720
manual code review for certain elements

108
00:04:20,720 --> 00:04:23,759
um but there is an area where you

109
00:04:23,759 --> 00:04:25,199
somebody could take advantage of that

110
00:04:25,199 --> 00:04:27,680
especially uh with the new uh bd

111
00:04:27,680 --> 00:04:30,560
algorithm uh vulnerability that people

112
00:04:30,560 --> 00:04:32,400
have seen out there

113
00:04:32,400 --> 00:04:33,600
you without

114
00:04:33,600 --> 00:04:35,759
someone really digging into the code you

115
00:04:35,759 --> 00:04:38,160
you're likely to completely miss it and

116
00:04:38,160 --> 00:04:40,000
you may miss it even with a manual code

117
00:04:40,000 --> 00:04:41,600
review um

118
00:04:41,600 --> 00:04:45,280
be a compromise source control system uh

119
00:04:45,280 --> 00:04:46,639
somebody's

120
00:04:46,639 --> 00:04:49,120
compromised your github repository maybe

121
00:04:49,120 --> 00:04:50,000
there's

122
00:04:50,000 --> 00:04:52,560
a typo squatting attack

123
00:04:52,560 --> 00:04:56,320
um c you've somebody's modified the code

124
00:04:56,320 --> 00:04:58,880
after the source control ideally when

125
00:04:58,880 --> 00:05:01,360
you your source code should be uh

126
00:05:01,360 --> 00:05:03,440
certified or attested

127
00:05:03,440 --> 00:05:04,320
and

128
00:05:04,320 --> 00:05:06,479
in a situation

129
00:05:06,479 --> 00:05:08,720
where you're not really doing that you

130
00:05:08,720 --> 00:05:10,320
could

131
00:05:10,320 --> 00:05:13,600
have code that becomes dirty or drifts

132
00:05:13,600 --> 00:05:15,840
after uh source control um you could

133
00:05:15,840 --> 00:05:17,680
have a compromise build platform there

134
00:05:17,680 --> 00:05:20,160
are plenty of vulnerabilities out there

135
00:05:20,160 --> 00:05:22,560
regarding jenkins

136
00:05:22,560 --> 00:05:25,759
and travis ci uh e you could have a bad

137
00:05:25,759 --> 00:05:28,160
dependency i think everybody today is

138
00:05:28,160 --> 00:05:31,360
pretty aware of the the threat against

139
00:05:31,360 --> 00:05:34,080
open source software dependencies

140
00:05:34,080 --> 00:05:35,280
um

141
00:05:35,280 --> 00:05:38,080
just the other day uh npm had an

142
00:05:38,080 --> 00:05:42,240
announcement of a problem with um

143
00:05:42,240 --> 00:05:44,400
with some malware embedded in some

144
00:05:44,400 --> 00:05:47,759
commonly used uh npm modules

145
00:05:47,759 --> 00:05:51,039
you could bypass ci cd completely it

146
00:05:51,039 --> 00:05:52,800
should be pretty difficult to do that

147
00:05:52,800 --> 00:05:54,479
but it is still possible depending on

148
00:05:54,479 --> 00:05:56,479
the maturity of the environment um you

149
00:05:56,479 --> 00:05:59,039
could have compromised package repo

150
00:05:59,039 --> 00:06:00,960
where you store your containers or you

151
00:06:00,960 --> 00:06:03,120
could be if you're pulling down a public

152
00:06:03,120 --> 00:06:06,160
image that could be compromised as well

153
00:06:06,160 --> 00:06:08,880
you could just have a bad package but

154
00:06:08,880 --> 00:06:12,479
that's just a few of the elements of of

155
00:06:12,479 --> 00:06:14,880
where you could have typical threats

156
00:06:14,880 --> 00:06:17,680
against your supply chain

157
00:06:17,680 --> 00:06:20,160
you also this is a great document from

158
00:06:20,160 --> 00:06:21,280
nist

159
00:06:21,280 --> 00:06:23,360
i recommend it highly defending against

160
00:06:23,360 --> 00:06:25,680
software supply chain attacks

161
00:06:25,680 --> 00:06:27,840
i think everybody is very focused on

162
00:06:27,840 --> 00:06:30,240
supply chain attacks given some of what

163
00:06:30,240 --> 00:06:31,600
has happened

164
00:06:31,600 --> 00:06:32,800
in the

165
00:06:32,800 --> 00:06:34,720
in the marketplace recently

166
00:06:34,720 --> 00:06:35,680
um

167
00:06:35,680 --> 00:06:40,080
this covers uh not just um

168
00:06:40,080 --> 00:06:41,840
written code i mean

169
00:06:41,840 --> 00:06:44,000
it also talks about design elements it

170
00:06:44,000 --> 00:06:46,479
talks about hardware devices of course

171
00:06:46,479 --> 00:06:49,120
solarwinds is on here talks about and

172
00:06:49,120 --> 00:06:51,599
divide and use your device malware for

173
00:06:51,599 --> 00:06:53,360
example if um

174
00:06:53,360 --> 00:06:55,440
you have a developer who has um an

175
00:06:55,440 --> 00:06:58,479
infected desktop or laptop um

176
00:06:58,479 --> 00:06:59,759
there's

177
00:06:59,759 --> 00:07:01,520
you know uh

178
00:07:01,520 --> 00:07:02,800
a prop there

179
00:07:02,800 --> 00:07:06,080
they call out the kaspersky antivirus uh

180
00:07:06,080 --> 00:07:07,919
problem where it was banned actually in

181
00:07:07,919 --> 00:07:11,120
the u.s for uh various reasons

182
00:07:11,120 --> 00:07:13,599
but you get an idea that

183
00:07:13,599 --> 00:07:15,520
when you consider the supply chain

184
00:07:15,520 --> 00:07:17,599
you're thinking about every

185
00:07:17,599 --> 00:07:19,599
process element in the delivery of

186
00:07:19,599 --> 00:07:22,159
software

187
00:07:24,160 --> 00:07:28,000
so again um example of some

188
00:07:28,000 --> 00:07:29,120
trojan

189
00:07:29,120 --> 00:07:30,880
of trojan source

190
00:07:30,880 --> 00:07:33,120
uh the bi-directional algorithm in the

191
00:07:33,120 --> 00:07:35,120
unicode specification which allows

192
00:07:35,120 --> 00:07:37,520
reordering of characters through control

193
00:07:37,520 --> 00:07:40,080
sequences and you can use this to create

194
00:07:40,080 --> 00:07:42,160
source code that renders different logic

195
00:07:42,160 --> 00:07:43,919
than the logical ordering of tokens

196
00:07:43,919 --> 00:07:47,199
ingested by compilers and interpreters

197
00:07:47,199 --> 00:07:48,800
this is a frightening attack right

198
00:07:48,800 --> 00:07:50,400
because uh

199
00:07:50,400 --> 00:07:52,080
because of the heavy dependency that

200
00:07:52,080 --> 00:07:55,039
most software projects have on open

201
00:07:55,039 --> 00:07:58,319
source software and it's very difficult

202
00:07:58,319 --> 00:08:01,280
to detect um right now i think the only

203
00:08:01,280 --> 00:08:03,919
uh compiler or interpreter that's sorry

204
00:08:03,919 --> 00:08:06,560
that's been uh adjusted i think it was

205
00:08:06,560 --> 00:08:07,360
um

206
00:08:07,360 --> 00:08:10,319
rust i think has this detection now but

207
00:08:10,319 --> 00:08:11,919
it's still everybody's pretty much

208
00:08:11,919 --> 00:08:13,919
scrambling with regards to this uh

209
00:08:13,919 --> 00:08:16,319
vulnerability

210
00:08:16,319 --> 00:08:17,039
so

211
00:08:17,039 --> 00:08:19,360
what does supply chain security mean

212
00:08:19,360 --> 00:08:22,960
we've talked about um essentially the uh

213
00:08:22,960 --> 00:08:25,120
what a software supply chain is but

214
00:08:25,120 --> 00:08:27,199
let's talk about the secure elements of

215
00:08:27,199 --> 00:08:29,440
a supply chain it means adding assurance

216
00:08:29,440 --> 00:08:31,520
to the software development process

217
00:08:31,520 --> 00:08:34,000
creating uh confidence and trust in the

218
00:08:34,000 --> 00:08:36,799
source material and the practices used

219
00:08:36,799 --> 00:08:37,839
it's

220
00:08:37,839 --> 00:08:40,320
you're trying to get a holistic

221
00:08:40,320 --> 00:08:42,479
high-level view for protecting each

222
00:08:42,479 --> 00:08:44,560
phase in the software development life

223
00:08:44,560 --> 00:08:47,519
cycle and you're approaching the sdlc as

224
00:08:47,519 --> 00:08:50,160
a set of business processes i think this

225
00:08:50,160 --> 00:08:52,080
is really important i think as

226
00:08:52,080 --> 00:08:53,760
technologists we get very caught up in

227
00:08:53,760 --> 00:08:56,880
the technology and i really think of

228
00:08:56,880 --> 00:08:58,959
devops as

229
00:08:58,959 --> 00:09:01,760
a set of automations of business

230
00:09:01,760 --> 00:09:03,760
processes right

231
00:09:03,760 --> 00:09:05,279
that's really what we're looking at and

232
00:09:05,279 --> 00:09:06,800
when you look at it that way then you

233
00:09:06,800 --> 00:09:09,120
can think about the securing of those

234
00:09:09,120 --> 00:09:10,399
processes

235
00:09:10,399 --> 00:09:12,880
and it's validating the final product

236
00:09:12,880 --> 00:09:15,120
meets a reasonable set of security

237
00:09:15,120 --> 00:09:17,040
criteria to ensure that it's not

238
00:09:17,040 --> 00:09:20,080
vulnerable and this is not a new thing

239
00:09:20,080 --> 00:09:21,680
we've been talking about supply chain

240
00:09:21,680 --> 00:09:25,279
security for a very long time um as long

241
00:09:25,279 --> 00:09:28,240
ago as uh i i've been sitting in on

242
00:09:28,240 --> 00:09:30,080
these talks with regards to network

243
00:09:30,080 --> 00:09:32,320
equipment for example and how code is

244
00:09:32,320 --> 00:09:33,920
delivered to network equipment and even

245
00:09:33,920 --> 00:09:36,560
how network equipment is built i i think

246
00:09:36,560 --> 00:09:38,959
um it's just become very high profile

247
00:09:38,959 --> 00:09:41,680
since solar winds

248
00:09:41,680 --> 00:09:42,560
so

249
00:09:42,560 --> 00:09:45,440
now we're in for the fun stuff what is a

250
00:09:45,440 --> 00:09:46,560
container

251
00:09:46,560 --> 00:09:48,480
i like to think of it as just a bunch of

252
00:09:48,480 --> 00:09:50,399
software ingredients

253
00:09:50,399 --> 00:09:52,640
i think docker has a really good uh

254
00:09:52,640 --> 00:09:54,800
definition everybody knows what docker

255
00:09:54,800 --> 00:09:57,360
is i i think uh

256
00:09:57,360 --> 00:09:59,360
it's it's fortunate or unfortunate

257
00:09:59,360 --> 00:10:03,279
they've really popularized and um

258
00:10:03,279 --> 00:10:04,959
really uh

259
00:10:04,959 --> 00:10:06,560
opened up

260
00:10:06,560 --> 00:10:09,600
the world of containerization um through

261
00:10:09,600 --> 00:10:11,600
ease of use right uh they have a high

262
00:10:11,600 --> 00:10:13,600
level container management system that

263
00:10:13,600 --> 00:10:15,600
everybody has probably used at one point

264
00:10:15,600 --> 00:10:18,640
or another and um now we sort of think

265
00:10:18,640 --> 00:10:21,760
of a dot we don't we think of a

266
00:10:21,760 --> 00:10:24,240
container in the same way you think of

267
00:10:24,240 --> 00:10:26,880
kleenex to tissue right docker is to

268
00:10:26,880 --> 00:10:28,720
container and

269
00:10:28,720 --> 00:10:31,200
docker refers to it as a standard unit

270
00:10:31,200 --> 00:10:34,480
of software that packages up code uh

271
00:10:34,480 --> 00:10:36,720
it's a container image is a lightweight

272
00:10:36,720 --> 00:10:39,279
standalone executable package of

273
00:10:39,279 --> 00:10:41,839
software right it's portable

274
00:10:41,839 --> 00:10:45,440
it's modular and it sort of encapsulates

275
00:10:45,440 --> 00:10:48,880
that idea of working fast and working at

276
00:10:48,880 --> 00:10:53,600
velocity and and ease in devops

277
00:10:53,600 --> 00:10:56,640
so let's talk a little bit about

278
00:10:56,640 --> 00:10:59,440
virtual machines versus containerization

279
00:10:59,440 --> 00:11:01,519
i think a lot of people are very very

280
00:11:01,519 --> 00:11:03,279
familiar with virtual machine

281
00:11:03,279 --> 00:11:06,160
technologies um and depending on what

282
00:11:06,160 --> 00:11:08,160
your role is uh

283
00:11:08,160 --> 00:11:09,040
in

284
00:11:09,040 --> 00:11:10,880
as an audience member here what your

285
00:11:10,880 --> 00:11:13,440
role is in your in your

286
00:11:13,440 --> 00:11:14,720
organization

287
00:11:14,720 --> 00:11:16,480
you may be less familiar with the

288
00:11:16,480 --> 00:11:18,800
differences between virtual machines and

289
00:11:18,800 --> 00:11:22,240
containers essentially uh the most

290
00:11:22,240 --> 00:11:24,399
important thing to take away

291
00:11:24,399 --> 00:11:26,560
is that

292
00:11:26,560 --> 00:11:29,680
virtual machines or guests

293
00:11:29,680 --> 00:11:32,560
have their own uh cur their own kernel

294
00:11:32,560 --> 00:11:34,640
their own host operating system they do

295
00:11:34,640 --> 00:11:37,839
not share the operating system of the of

296
00:11:37,839 --> 00:11:41,360
the hypervisor um of the the bare metal

297
00:11:41,360 --> 00:11:44,480
system right they have dedicated uh

298
00:11:44,480 --> 00:11:46,399
memory space they have

299
00:11:46,399 --> 00:11:49,519
so they there's nothing shared there

300
00:11:49,519 --> 00:11:51,440
while containers

301
00:11:51,440 --> 00:11:54,639
um share a host operating system

302
00:11:54,639 --> 00:11:58,079
a container a container runtime then is

303
00:11:58,079 --> 00:12:02,000
responsible for helping to create uh

304
00:12:02,000 --> 00:12:05,680
those dedicated spaces but you are

305
00:12:05,680 --> 00:12:08,000
sharing memory space you are sharing a

306
00:12:08,000 --> 00:12:11,600
kernel um this will be become

307
00:12:11,600 --> 00:12:13,600
very important later as you think about

308
00:12:13,600 --> 00:12:16,720
the attack surface

309
00:12:17,360 --> 00:12:19,040
and just to

310
00:12:19,040 --> 00:12:20,880
point out we have multiple container

311
00:12:20,880 --> 00:12:22,560
runtimes that we'll be discussing here

312
00:12:22,560 --> 00:12:24,720
there's container d there's cryo which

313
00:12:24,720 --> 00:12:25,920
is a

314
00:12:25,920 --> 00:12:28,720
red hat open shift runtime that's become

315
00:12:28,720 --> 00:12:30,399
popularized

316
00:12:30,399 --> 00:12:32,639
then you have low levels like run c you

317
00:12:32,639 --> 00:12:36,560
have g visor you have kata as well

318
00:12:36,560 --> 00:12:39,519
so user space versus kernel space as i

319
00:12:39,519 --> 00:12:41,360
mentioned um

320
00:12:41,360 --> 00:12:42,880
you're sharing

321
00:12:42,880 --> 00:12:44,320
kernel space

322
00:12:44,320 --> 00:12:45,839
with containers

323
00:12:45,839 --> 00:12:47,680
so virtual machines run their own

324
00:12:47,680 --> 00:12:49,600
isolated kernels there's no shared

325
00:12:49,600 --> 00:12:51,839
memory or execution space as i mentioned

326
00:12:51,839 --> 00:12:53,519
before

327
00:12:53,519 --> 00:12:55,839
without the addition of virtual machine

328
00:12:55,839 --> 00:12:58,320
technologies for example you'll see

329
00:12:58,320 --> 00:13:00,399
something like kata containers or

330
00:13:00,399 --> 00:13:03,120
firecracker or g-visor

331
00:13:03,120 --> 00:13:05,760
so without the the addition of that of

332
00:13:05,760 --> 00:13:06,399
that

333
00:13:06,399 --> 00:13:08,560
virtual machine of like um they call it

334
00:13:08,560 --> 00:13:10,800
a um a micro vm

335
00:13:10,800 --> 00:13:15,040
um containers will share the same kernel

336
00:13:15,040 --> 00:13:18,399
uh linux name spaces capabilities sec

337
00:13:18,399 --> 00:13:22,240
comp se linux app armor c groups

338
00:13:22,240 --> 00:13:24,560
they can be used to enhance segregation

339
00:13:24,560 --> 00:13:26,560
between running container instances on

340
00:13:26,560 --> 00:13:29,600
the host but you're still you've still

341
00:13:29,600 --> 00:13:31,200
got that

342
00:13:31,200 --> 00:13:33,200
that sticking point of sharing the same

343
00:13:33,200 --> 00:13:35,120
host kernel

344
00:13:35,120 --> 00:13:36,240
um

345
00:13:36,240 --> 00:13:41,199
so what does a container look like

346
00:13:41,199 --> 00:13:42,560
well

347
00:13:42,560 --> 00:13:44,880
i like to think of it as a cake

348
00:13:44,880 --> 00:13:46,959
you kind of start at the top and work

349
00:13:46,959 --> 00:13:49,360
your way down and that's

350
00:13:49,360 --> 00:13:51,199
pretty much what happens with a

351
00:13:51,199 --> 00:13:54,480
container it's a layered file system

352
00:13:54,480 --> 00:13:56,480
and they correspond each layer

353
00:13:56,480 --> 00:13:59,440
corresponds to instructions and scripts

354
00:13:59,440 --> 00:14:01,920
or a docker file

355
00:14:01,920 --> 00:14:04,639
oci compliant runtimes you they use

356
00:14:04,639 --> 00:14:06,959
something called a union file system

357
00:14:06,959 --> 00:14:08,880
which has some of some of the properties

358
00:14:08,880 --> 00:14:10,560
such as

359
00:14:10,560 --> 00:14:12,959
it's a logical merge of multiple layers

360
00:14:12,959 --> 00:14:15,680
into an overlay file system

361
00:14:15,680 --> 00:14:17,760
read only lower layers and writeable

362
00:14:17,760 --> 00:14:19,199
upper layers

363
00:14:19,199 --> 00:14:21,440
you begin reading again like you start

364
00:14:21,440 --> 00:14:23,199
eating from the top and you work your

365
00:14:23,199 --> 00:14:24,399
way down

366
00:14:24,399 --> 00:14:28,279
and it's copy on right

367
00:14:31,120 --> 00:14:33,760
uh i'm not gonna go too much into detail

368
00:14:33,760 --> 00:14:36,000
here but i did want to introduce

369
00:14:36,000 --> 00:14:38,800
something called lazy pulling uh i'm not

370
00:14:38,800 --> 00:14:41,440
i haven't done a lot of research yet

371
00:14:41,440 --> 00:14:42,399
into

372
00:14:42,399 --> 00:14:46,399
uh the uh attack surface of lazy pulling

373
00:14:46,399 --> 00:14:48,639
but basically uh as opposed to the

374
00:14:48,639 --> 00:14:50,639
traditional way that you

375
00:14:50,639 --> 00:14:53,680
uh you you upload a whole container

376
00:14:53,680 --> 00:14:55,519
you know when you run it uh and you

377
00:14:55,519 --> 00:14:59,040
start it with lazy pulling um you

378
00:14:59,040 --> 00:15:03,120
do not do that you uh pull as needed so

379
00:15:03,120 --> 00:15:06,240
it's breaking it up into multiple um

380
00:15:06,240 --> 00:15:07,760
little uh

381
00:15:07,760 --> 00:15:08,880
bundles

382
00:15:08,880 --> 00:15:11,920
that are grouped together logically so

383
00:15:11,920 --> 00:15:14,560
it it encourages faster start time i'm

384
00:15:14,560 --> 00:15:16,800
not going to go into too much detail

385
00:15:16,800 --> 00:15:19,360
i encourage you to research lazy pulling

386
00:15:19,360 --> 00:15:22,079
because it is starting to become a

387
00:15:22,079 --> 00:15:25,040
reality it's not baked into the oci

388
00:15:25,040 --> 00:15:27,600
standards yet but i anticipate it it

389
00:15:27,600 --> 00:15:29,759
will be

390
00:15:29,759 --> 00:15:30,880
um

391
00:15:30,880 --> 00:15:34,000
let's talk about high level

392
00:15:34,000 --> 00:15:35,680
versus low level

393
00:15:35,680 --> 00:15:37,839
run times and management systems i think

394
00:15:37,839 --> 00:15:40,639
this is important to understand because

395
00:15:40,639 --> 00:15:42,959
when you hear about new vulnerabilities

396
00:15:42,959 --> 00:15:46,560
for example with container d or run c

397
00:15:46,560 --> 00:15:48,880
you need to understand

398
00:15:48,880 --> 00:15:51,600
where the d mark where the demarcation

399
00:15:51,600 --> 00:15:54,480
point uh begins and ends right um for

400
00:15:54,480 --> 00:15:57,199
example with some high-level container

401
00:15:57,199 --> 00:16:00,079
management examples

402
00:16:00,079 --> 00:16:03,279
uh you have uh the these are referred to

403
00:16:03,279 --> 00:16:05,920
by kubernetes as container well it can

404
00:16:05,920 --> 00:16:07,600
be referred to as the container runtime

405
00:16:07,600 --> 00:16:08,800
interface

406
00:16:08,800 --> 00:16:11,360
um you have docker which is a very high

407
00:16:11,360 --> 00:16:14,000
level container management system um you

408
00:16:14,000 --> 00:16:16,320
have podman which is on linux and you

409
00:16:16,320 --> 00:16:18,320
can interact with containers you can

410
00:16:18,320 --> 00:16:21,199
build using pod man or start them

411
00:16:21,199 --> 00:16:24,160
you have high level container run times

412
00:16:24,160 --> 00:16:28,320
again cryo uh container d docker i know

413
00:16:28,320 --> 00:16:30,160
it's confusing but there's the docker

414
00:16:30,160 --> 00:16:32,320
management system and then there's um

415
00:16:32,320 --> 00:16:35,120
there was a docker runtime which was

416
00:16:35,120 --> 00:16:37,519
container d but has since been donated

417
00:16:37,519 --> 00:16:40,320
to uh the cncf i believe

418
00:16:40,320 --> 00:16:42,480
or maybe the linux foundation pretty

419
00:16:42,480 --> 00:16:45,600
much the same thing um and then and

420
00:16:45,600 --> 00:16:48,079
these are all part of the oci and then

421
00:16:48,079 --> 00:16:50,720
uh you have the low level uh container

422
00:16:50,720 --> 00:16:53,920
run times such as uh run c which we all

423
00:16:53,920 --> 00:16:56,800
know in kata and g visor um kata and g

424
00:16:56,800 --> 00:16:59,920
visor as you'll see have uh sandboxing

425
00:16:59,920 --> 00:17:00,639
or

426
00:17:00,639 --> 00:17:03,040
virtual machine technologies integrated

427
00:17:03,040 --> 00:17:05,839
into that i think this is important as i

428
00:17:05,839 --> 00:17:07,839
said when you're looking at container

429
00:17:07,839 --> 00:17:09,439
vulnerabilities because sometimes you'll

430
00:17:09,439 --> 00:17:11,760
have a run c vulnerability or you'll

431
00:17:11,760 --> 00:17:14,079
have a container d vulnerability and

432
00:17:14,079 --> 00:17:17,119
container d is really a wrapper around

433
00:17:17,119 --> 00:17:19,839
run c you need to understand where the

434
00:17:19,839 --> 00:17:21,839
differentiation is when you're

435
00:17:21,839 --> 00:17:23,599
understand when you're looking at that

436
00:17:23,599 --> 00:17:26,319
attack surface

437
00:17:26,319 --> 00:17:29,200
i recognize this is uh sounds like a lot

438
00:17:29,200 --> 00:17:32,960
of nonsense and uh it's a lot of detail

439
00:17:32,960 --> 00:17:34,000
um

440
00:17:34,000 --> 00:17:35,200
and i

441
00:17:35,200 --> 00:17:37,280
put in a lot of links in my references

442
00:17:37,280 --> 00:17:39,280
which will be my in my slide deck which

443
00:17:39,280 --> 00:17:41,520
will be uploaded and also as i'm going

444
00:17:41,520 --> 00:17:43,919
through this it can be very overwhelming

445
00:17:43,919 --> 00:17:47,520
i i recognize that so let's try and um

446
00:17:47,520 --> 00:17:50,559
break this down a little bit

447
00:17:50,880 --> 00:17:52,559
so

448
00:17:52,559 --> 00:17:55,918
where do you get your container

449
00:17:56,000 --> 00:17:58,320
let's talk about um and yes you'll

450
00:17:58,320 --> 00:18:01,120
notice i had a dirty kitchen um

451
00:18:01,120 --> 00:18:02,960
let's talk about your recipes for

452
00:18:02,960 --> 00:18:05,280
container images

453
00:18:05,280 --> 00:18:06,480
so

454
00:18:06,480 --> 00:18:09,280
you can pull a base image down from

455
00:18:09,280 --> 00:18:10,799
docker hub

456
00:18:10,799 --> 00:18:11,679
from a

457
00:18:11,679 --> 00:18:14,000
from or from another public or pro or

458
00:18:14,000 --> 00:18:15,919
registry or maybe a private one maybe

459
00:18:15,919 --> 00:18:18,000
your your vendor that you know you have

460
00:18:18,000 --> 00:18:20,080
a vendor that you work with um they've

461
00:18:20,080 --> 00:18:21,840
containerized their software and they

462
00:18:21,840 --> 00:18:23,360
have a private registry that's only

463
00:18:23,360 --> 00:18:25,440
available to customers

464
00:18:25,440 --> 00:18:27,440
um and then you could

465
00:18:27,440 --> 00:18:28,799
you could either add code and

466
00:18:28,799 --> 00:18:30,720
configuration or you can just run it as

467
00:18:30,720 --> 00:18:32,640
is

468
00:18:32,640 --> 00:18:35,840
you can use a multi-stage build which is

469
00:18:35,840 --> 00:18:38,000
something i recommend selectively

470
00:18:38,000 --> 00:18:40,880
copying what you need in the image um

471
00:18:40,880 --> 00:18:43,200
without using a base or a parent image

472
00:18:43,200 --> 00:18:45,919
you can build an entire oci compliant

473
00:18:45,919 --> 00:18:48,320
image yourself with a tool like builda

474
00:18:48,320 --> 00:18:50,640
that's for the super paranoid or

475
00:18:50,640 --> 00:18:53,679
um the super nerdy who uh are not as

476
00:18:53,679 --> 00:18:56,320
lazy as say i am i don't want to build

477
00:18:56,320 --> 00:18:58,080
ever and want to build everything from

478
00:18:58,080 --> 00:18:59,039
scratch

479
00:18:59,039 --> 00:19:01,280
you can create a single layer from

480
00:19:01,280 --> 00:19:03,679
scratch this is actually a thing it's a

481
00:19:03,679 --> 00:19:08,000
no op it's you're basically just uh

482
00:19:08,000 --> 00:19:09,280
telling

483
00:19:09,280 --> 00:19:11,919
the system to get a statically compiled

484
00:19:11,919 --> 00:19:13,760
binary

485
00:19:13,760 --> 00:19:15,760
it oddly enough

486
00:19:15,760 --> 00:19:18,720
that will actually send your

487
00:19:18,720 --> 00:19:20,400
most security

488
00:19:20,400 --> 00:19:23,039
container security tools into a tizzy

489
00:19:23,039 --> 00:19:25,440
they don't understand from scratch no op

490
00:19:25,440 --> 00:19:26,480
images

491
00:19:26,480 --> 00:19:28,400
you can also make a distro-less image

492
00:19:28,400 --> 00:19:30,559
that only includes the application

493
00:19:30,559 --> 00:19:33,840
runtime dependencies

494
00:19:35,280 --> 00:19:37,360
so i recommend using the best

495
00:19:37,360 --> 00:19:40,480
ingredients of course uh you you want to

496
00:19:40,480 --> 00:19:42,720
use a trusted source for base images

497
00:19:42,720 --> 00:19:46,640
especially as i'm sure people follow uh

498
00:19:46,640 --> 00:19:50,320
reports and uh the news about how

499
00:19:50,320 --> 00:19:52,720
you'll hear about some docker hub image

500
00:19:52,720 --> 00:19:55,840
that's been compromised and has uh

501
00:19:55,840 --> 00:19:58,160
you know bitcoin mining elements in it

502
00:19:58,160 --> 00:20:00,720
nobody knew they just trusted docker hub

503
00:20:00,720 --> 00:20:03,039
and they downloaded it and used it um

504
00:20:03,039 --> 00:20:05,120
you want to validate the image

505
00:20:05,120 --> 00:20:07,840
with a container security tool even i

506
00:20:07,840 --> 00:20:10,400
would recommend let's say you get an

507
00:20:10,400 --> 00:20:13,360
image from uh one of your vendors and

508
00:20:13,360 --> 00:20:15,360
you're going to assume that it's okay

509
00:20:15,360 --> 00:20:17,200
because you got it from your vendor

510
00:20:17,200 --> 00:20:20,320
validate it i have found tons of

511
00:20:20,320 --> 00:20:22,640
problems with uh vendor

512
00:20:22,640 --> 00:20:25,120
vendor images even vendor security

513
00:20:25,120 --> 00:20:26,720
container images

514
00:20:26,720 --> 00:20:28,559
um i recommend using a software

515
00:20:28,559 --> 00:20:31,039
composition analysis tool and or a

516
00:20:31,039 --> 00:20:32,960
container security tool there are plenty

517
00:20:32,960 --> 00:20:34,559
out there

518
00:20:34,559 --> 00:20:36,880
you want to economize you don't want to

519
00:20:36,880 --> 00:20:39,520
add elements that aren't necessary for

520
00:20:39,520 --> 00:20:41,600
your microservice right you don't want

521
00:20:41,600 --> 00:20:43,919
to have unnecessary ports open you don't

522
00:20:43,919 --> 00:20:45,360
want to have shells you don't want to

523
00:20:45,360 --> 00:20:46,799
have

524
00:20:46,799 --> 00:20:49,679
i've seen package managers in containers

525
00:20:49,679 --> 00:20:51,600
there's no reason to have that on your

526
00:20:51,600 --> 00:20:53,120
container image

527
00:20:53,120 --> 00:20:55,679
uh you want to limit cis calls if you

528
00:20:55,679 --> 00:20:59,280
can i know it's challenging uh to do

529
00:20:59,280 --> 00:21:02,559
that but you it really helps reduce your

530
00:21:02,559 --> 00:21:04,640
attack surface if you can manage to do

531
00:21:04,640 --> 00:21:05,520
that

532
00:21:05,520 --> 00:21:09,039
uh parameterize don't hard code configs

533
00:21:09,039 --> 00:21:11,840
or embed credentials and secrets in your

534
00:21:11,840 --> 00:21:14,240
image the same thing that you would hear

535
00:21:14,240 --> 00:21:16,760
from a wasp regarding you know

536
00:21:16,760 --> 00:21:19,600
recommendations in the asvs

537
00:21:19,600 --> 00:21:20,799
um

538
00:21:20,799 --> 00:21:22,480
okay they they apply here because

539
00:21:22,480 --> 00:21:24,960
remember what i said right that a

540
00:21:24,960 --> 00:21:26,720
container is a software package

541
00:21:26,720 --> 00:21:28,159
essentially

542
00:21:28,159 --> 00:21:28,840
um

543
00:21:28,840 --> 00:21:31,919
reduced follow the principles of least

544
00:21:31,919 --> 00:21:34,799
uh privilege don't run root processes

545
00:21:34,799 --> 00:21:37,280
don't run your container as privileged

546
00:21:37,280 --> 00:21:40,720
um you wanna um you don't want to

547
00:21:40,720 --> 00:21:41,919
um

548
00:21:41,919 --> 00:21:43,760
as i said immutable you don't want to

549
00:21:43,760 --> 00:21:45,919
add a shell you don't want to log into a

550
00:21:45,919 --> 00:21:47,520
running instance

551
00:21:47,520 --> 00:21:50,240
i've been at places that had something

552
00:21:50,240 --> 00:21:52,080
where we

553
00:21:52,080 --> 00:21:53,280
called it

554
00:21:53,280 --> 00:21:56,000
a dirty container that meant that we

555
00:21:56,000 --> 00:21:57,840
detected when somebody logged into a

556
00:21:57,840 --> 00:22:01,039
container or made a change and then we

557
00:22:01,039 --> 00:22:03,600
immediately would expire

558
00:22:03,600 --> 00:22:07,760
that running container image

559
00:22:07,760 --> 00:22:08,799
you

560
00:22:08,799 --> 00:22:13,200
don't want to um

561
00:22:13,200 --> 00:22:14,640
you don't want to run a shell for that

562
00:22:14,640 --> 00:22:17,120
very reason right it's just a temptation

563
00:22:17,120 --> 00:22:18,559
right um

564
00:22:18,559 --> 00:22:19,600
there are

565
00:22:19,600 --> 00:22:21,760
techniques of course with kubernetes

566
00:22:21,760 --> 00:22:24,240
where you can run a container exact i

567
00:22:24,240 --> 00:22:26,080
don't recommend that either there are

568
00:22:26,080 --> 00:22:29,679
alternative debug um

569
00:22:29,679 --> 00:22:31,600
things that you can do techniques that

570
00:22:31,600 --> 00:22:33,760
you can use that will replicate the

571
00:22:33,760 --> 00:22:36,159
environment in um

572
00:22:36,159 --> 00:22:39,120
another namespace or another cluster so

573
00:22:39,120 --> 00:22:41,200
that you can actually troubleshoot in a

574
00:22:41,200 --> 00:22:42,400
better way

575
00:22:42,400 --> 00:22:44,559
uh minimize you want to use techniques

576
00:22:44,559 --> 00:22:46,480
like distro-less and from scratch to

577
00:22:46,480 --> 00:22:48,240
eliminate unnecessary

578
00:22:48,240 --> 00:22:51,760
unnecessary elements and layers um you

579
00:22:51,760 --> 00:22:53,120
want to

580
00:22:53,120 --> 00:22:56,240
automate i think automation is probably

581
00:22:56,240 --> 00:22:58,799
one of the best elements that will help

582
00:22:58,799 --> 00:22:59,520
you

583
00:22:59,520 --> 00:23:02,400
attain uh separation of duties and it

584
00:23:02,400 --> 00:23:04,400
will eliminate errors and it will

585
00:23:04,400 --> 00:23:07,360
minimize uh your attack surface if done

586
00:23:07,360 --> 00:23:08,799
well

587
00:23:08,799 --> 00:23:10,640
i then you can also

588
00:23:10,640 --> 00:23:12,480
integrate security validation at

589
00:23:12,480 --> 00:23:16,960
multiple phases of your pipeline as well

590
00:23:17,280 --> 00:23:19,360
so

591
00:23:19,360 --> 00:23:22,799
fry bake and buy if you're familiar with

592
00:23:22,799 --> 00:23:24,880
infrastructure's code where you have

593
00:23:24,880 --> 00:23:26,559
this idea of

594
00:23:26,559 --> 00:23:29,120
baking versus bootstrapping and image

595
00:23:29,120 --> 00:23:31,600
there's something similar in the concept

596
00:23:31,600 --> 00:23:34,480
of containers

597
00:23:34,480 --> 00:23:37,039
you have fried images which are custom

598
00:23:37,039 --> 00:23:40,400
built or extended third-party images um

599
00:23:40,400 --> 00:23:42,080
deployed but changed during

600
00:23:42,080 --> 00:23:45,200
bootstrapping activity um so for example

601
00:23:45,200 --> 00:23:47,200
if you were to

602
00:23:47,200 --> 00:23:49,360
instantiate an image

603
00:23:49,360 --> 00:23:54,640
and uh you do an app apt-get or a curl

604
00:23:54,640 --> 00:23:55,760
um

605
00:23:55,760 --> 00:24:01,360
that is not an image that you can attest

606
00:24:01,360 --> 00:24:02,559
um

607
00:24:02,559 --> 00:24:03,520
bake

608
00:24:03,520 --> 00:24:06,320
uh that's a custom-built or extended

609
00:24:06,320 --> 00:24:08,000
third-party image

610
00:24:08,000 --> 00:24:09,600
fully created

611
00:24:09,600 --> 00:24:11,760
with all the dependencies

612
00:24:11,760 --> 00:24:13,919
as part of a supply chain

613
00:24:13,919 --> 00:24:17,039
it's a tested and immutable you can also

614
00:24:17,039 --> 00:24:19,919
buy as i mentioned before um

615
00:24:19,919 --> 00:24:23,279
third party or vendor images deployed

616
00:24:23,279 --> 00:24:26,159
without changes attested and immutable

617
00:24:26,159 --> 00:24:28,000
okay i think you know where i'm going

618
00:24:28,000 --> 00:24:29,520
here

619
00:24:29,520 --> 00:24:31,520
bake or buy

620
00:24:31,520 --> 00:24:34,240
but never fry

621
00:24:34,240 --> 00:24:36,880
and i i think i just want to

622
00:24:36,880 --> 00:24:39,340
go back a couple um

623
00:24:39,340 --> 00:24:42,470
[Music]

624
00:24:42,799 --> 00:24:44,320
so

625
00:24:44,320 --> 00:24:46,720
container mistakes

626
00:24:46,720 --> 00:24:48,640
i want to emphasize this

627
00:24:48,640 --> 00:24:53,520
uh heavily um i i think

628
00:24:53,679 --> 00:24:56,159
what i see a lot is

629
00:24:56,159 --> 00:24:58,559
people haven't sufficiently refactored

630
00:24:58,559 --> 00:25:02,320
uh their applications for microservices

631
00:25:02,320 --> 00:25:05,919
so they do a full dump of their virtual

632
00:25:05,919 --> 00:25:09,279
machine or ami into a container

633
00:25:09,279 --> 00:25:11,440
this is a really bad idea not just in

634
00:25:11,440 --> 00:25:14,159
terms of bloat but also as i as you saw

635
00:25:14,159 --> 00:25:15,600
that i mentioned about the best

636
00:25:15,600 --> 00:25:17,360
practices

637
00:25:17,360 --> 00:25:19,520
you get a really large attack surface

638
00:25:19,520 --> 00:25:21,360
every time you add something into that

639
00:25:21,360 --> 00:25:23,840
image everything that's not necessary

640
00:25:23,840 --> 00:25:26,240
and is present on your container image

641
00:25:26,240 --> 00:25:27,200
it

642
00:25:27,200 --> 00:25:29,840
causes uh it increases your attack

643
00:25:29,840 --> 00:25:32,720
surface not just the bloat element

644
00:25:32,720 --> 00:25:33,600
um

645
00:25:33,600 --> 00:25:35,360
you just don't want to put your entire

646
00:25:35,360 --> 00:25:37,440
monolithic application stack in a

647
00:25:37,440 --> 00:25:39,360
container uh

648
00:25:39,360 --> 00:25:40,960
and um

649
00:25:40,960 --> 00:25:44,320
your i have this pet peeve

650
00:25:44,320 --> 00:25:45,120
um

651
00:25:45,120 --> 00:25:47,840
people will refer to container as the

652
00:25:47,840 --> 00:25:50,640
image or the running instance um they're

653
00:25:50,640 --> 00:25:54,559
very different phases of the runtime so

654
00:25:54,559 --> 00:25:57,520
let's be sure that like i'm very uh

655
00:25:57,520 --> 00:25:59,440
particular i will call it a container

656
00:25:59,440 --> 00:26:01,840
image and then a runtime container or a

657
00:26:01,840 --> 00:26:04,080
running instance um

658
00:26:04,080 --> 00:26:07,200
i think that's important to remember

659
00:26:07,200 --> 00:26:09,360
when you're talking about containers

660
00:26:09,360 --> 00:26:11,760
because it's a very precise part of the

661
00:26:11,760 --> 00:26:13,919
life cycle

662
00:26:13,919 --> 00:26:15,120
so

663
00:26:15,120 --> 00:26:16,080
um

664
00:26:16,080 --> 00:26:18,159
we've talked about the recipes we've

665
00:26:18,159 --> 00:26:20,240
talked about using the best ingredients

666
00:26:20,240 --> 00:26:23,120
we've talked about fry bacon by

667
00:26:23,120 --> 00:26:26,000
i wanted to share with you a

668
00:26:26,000 --> 00:26:28,720
sample container security validation at

669
00:26:28,720 --> 00:26:30,400
a high level so you understand what i'm

670
00:26:30,400 --> 00:26:32,960
talking about when i talk about uh the

671
00:26:32,960 --> 00:26:36,840
container security supply chain

672
00:26:36,840 --> 00:26:40,159
um so i've broken it up into one a and

673
00:26:40,159 --> 00:26:41,120
one b

674
00:26:41,120 --> 00:26:43,520
one a is third party images and one b is

675
00:26:43,520 --> 00:26:45,919
a full custom built image

676
00:26:45,919 --> 00:26:49,039
um you'll see that i've of course you

677
00:26:49,039 --> 00:26:52,640
know you can use docker you can use um

678
00:26:52,640 --> 00:26:54,960
builder you can use podman you can

679
00:26:54,960 --> 00:26:57,520
download the image from docker you may

680
00:26:57,520 --> 00:26:59,440
upload it to a tool like jfrog

681
00:26:59,440 --> 00:27:01,200
artifactory i mean there are all kinds

682
00:27:01,200 --> 00:27:03,279
of different way like

683
00:27:03,279 --> 00:27:04,799
some things that you you're familiar

684
00:27:04,799 --> 00:27:07,440
with there are lots of ways that you can

685
00:27:07,440 --> 00:27:09,600
create the image and then you can get it

686
00:27:09,600 --> 00:27:13,200
uploaded to a container repository

687
00:27:13,200 --> 00:27:14,720
so

688
00:27:14,720 --> 00:27:16,640
what do i mean when i say container

689
00:27:16,640 --> 00:27:18,640
security validation

690
00:27:18,640 --> 00:27:21,120
what that means is the container has to

691
00:27:21,120 --> 00:27:22,159
meet

692
00:27:22,159 --> 00:27:24,480
certain set of security criteria to

693
00:27:24,480 --> 00:27:27,440
receive a passing score

694
00:27:27,440 --> 00:27:28,480
right

695
00:27:28,480 --> 00:27:29,760
and

696
00:27:29,760 --> 00:27:32,159
that includes certain elements in my

697
00:27:32,159 --> 00:27:34,960
experience what i've used is an overall

698
00:27:34,960 --> 00:27:38,799
cdss score and i might for example say

699
00:27:38,799 --> 00:27:41,120
that the score has to be

700
00:27:41,120 --> 00:27:42,159
less

701
00:27:42,159 --> 00:27:44,159
it can't be

702
00:27:44,159 --> 00:27:46,960
equal to or greater than seven

703
00:27:46,960 --> 00:27:50,000
that's an example i may check to see if

704
00:27:50,000 --> 00:27:52,080
there are any root owned processes in

705
00:27:52,080 --> 00:27:54,080
the container image

706
00:27:54,080 --> 00:27:56,320
i might also check to see

707
00:27:56,320 --> 00:27:58,640
that the container doesn't run as

708
00:27:58,640 --> 00:28:00,080
privileged

709
00:28:00,080 --> 00:28:03,200
and i may look through uh the container

710
00:28:03,200 --> 00:28:04,720
image to see that it doesn't have a

711
00:28:04,720 --> 00:28:07,520
shell installed you most tools out there

712
00:28:07,520 --> 00:28:10,159
will look for all kinds of other things

713
00:28:10,159 --> 00:28:12,960
you can check on whether or not

714
00:28:12,960 --> 00:28:13,760
uh

715
00:28:13,760 --> 00:28:16,159
some of the open source elements violate

716
00:28:16,159 --> 00:28:17,760
uh your license

717
00:28:17,760 --> 00:28:20,720
your agreed licenses like you've decided

718
00:28:20,720 --> 00:28:21,760
um

719
00:28:21,760 --> 00:28:23,760
certain licenses aren't okay to use in

720
00:28:23,760 --> 00:28:25,919
your organization maybe because you make

721
00:28:25,919 --> 00:28:27,679
software so

722
00:28:27,679 --> 00:28:29,520
uh you can check for all of that and

723
00:28:29,520 --> 00:28:30,399
then

724
00:28:30,399 --> 00:28:33,679
uh that's becomes part of my policy for

725
00:28:33,679 --> 00:28:36,399
passing or failing a container image

726
00:28:36,399 --> 00:28:38,559
and then once i've done that in the

727
00:28:38,559 --> 00:28:40,480
actual build phase

728
00:28:40,480 --> 00:28:41,360
um

729
00:28:41,360 --> 00:28:43,440
it's okay to upload

730
00:28:43,440 --> 00:28:46,080
to a repository and then i do an ongoing

731
00:28:46,080 --> 00:28:49,279
scan of the images in the repository and

732
00:28:49,279 --> 00:28:51,360
then when the container is deployed to

733
00:28:51,360 --> 00:28:52,960
runtime

734
00:28:52,960 --> 00:28:54,799
through a pipeline

735
00:28:54,799 --> 00:28:57,279
then a runtime control control component

736
00:28:57,279 --> 00:29:00,399
ensures that only security validated and

737
00:29:00,399 --> 00:29:02,720
even signed images are deployed and can

738
00:29:02,720 --> 00:29:04,000
run

739
00:29:04,000 --> 00:29:06,640
signing is can be challenging sometimes

740
00:29:06,640 --> 00:29:08,799
depending on what your pipeline tools

741
00:29:08,799 --> 00:29:11,679
are but uh it's valuable

742
00:29:11,679 --> 00:29:12,480
because

743
00:29:12,480 --> 00:29:14,480
you it gives you an extra level of

744
00:29:14,480 --> 00:29:16,559
assurance that your image has not been

745
00:29:16,559 --> 00:29:19,039
changed

746
00:29:23,120 --> 00:29:25,039
so

747
00:29:25,039 --> 00:29:27,360
let's talk for a minute about container

748
00:29:27,360 --> 00:29:29,039
orchestrators

749
00:29:29,039 --> 00:29:30,640
i'm sure everyone has heard of

750
00:29:30,640 --> 00:29:32,640
kubernetes

751
00:29:32,640 --> 00:29:35,039
that is a container orchestrator it's

752
00:29:35,039 --> 00:29:37,360
not a container runtime it will have

753
00:29:37,360 --> 00:29:40,159
container runtimes with it it also has a

754
00:29:40,159 --> 00:29:42,880
container runtime interface to use other

755
00:29:42,880 --> 00:29:44,880
alternative runtimes

756
00:29:44,880 --> 00:29:46,080
but i think it's important to

757
00:29:46,080 --> 00:29:48,559
differentiate between the orchestrator

758
00:29:48,559 --> 00:29:50,799
the container runtime and the container

759
00:29:50,799 --> 00:29:52,320
itself

760
00:29:52,320 --> 00:29:54,399
so the orchestrator typically handles

761
00:29:54,399 --> 00:29:56,960
deployment and runtime lifecycle of

762
00:29:56,960 --> 00:29:59,279
running instances now don't get me wrong

763
00:29:59,279 --> 00:30:01,600
you could just run a container with

764
00:30:01,600 --> 00:30:04,080
straight up lxc with you know you could

765
00:30:04,080 --> 00:30:06,240
use container d you could use docker

766
00:30:06,240 --> 00:30:07,600
itself

767
00:30:07,600 --> 00:30:09,760
the benefit of a container orchestrator

768
00:30:09,760 --> 00:30:11,679
is that it will scale up

769
00:30:11,679 --> 00:30:13,600
your instances and scale them down to

770
00:30:13,600 --> 00:30:14,960
meet demand

771
00:30:14,960 --> 00:30:16,720
they come with ingress and egress

772
00:30:16,720 --> 00:30:18,480
controllers

773
00:30:18,480 --> 00:30:20,799
it will have

774
00:30:20,799 --> 00:30:23,679
container networking you can have either

775
00:30:23,679 --> 00:30:26,799
overlay networks you can have routing i

776
00:30:26,799 --> 00:30:29,279
mean far more than you would uh have

777
00:30:29,279 --> 00:30:32,480
normally uh you have clustering um it

778
00:30:32,480 --> 00:30:35,039
has redundancy and availability options

779
00:30:35,039 --> 00:30:37,600
for your for your hit instances and also

780
00:30:37,600 --> 00:30:40,159
your nodes or hosts

781
00:30:40,159 --> 00:30:43,120
where the orchestrator and the um and

782
00:30:43,120 --> 00:30:45,440
the running containers are

783
00:30:45,440 --> 00:30:47,360
you have load balancing service

784
00:30:47,360 --> 00:30:49,600
discovery health monitoring

785
00:30:49,600 --> 00:30:51,360
i think you're getting the picture right

786
00:30:51,360 --> 00:30:54,799
that this is a complicated beast but um

787
00:30:54,799 --> 00:30:58,000
if you want containers uh to be very

788
00:30:58,000 --> 00:31:00,080
resilient uh

789
00:31:00,080 --> 00:31:02,000
in most organizations you will then

790
00:31:02,000 --> 00:31:04,000
you'll usually use a container

791
00:31:04,000 --> 00:31:06,240
orchestrator

792
00:31:06,240 --> 00:31:09,279
it you also have the benefit of

793
00:31:09,279 --> 00:31:11,360
a multi-tenant segregation option

794
00:31:11,360 --> 00:31:12,240
through

795
00:31:12,240 --> 00:31:14,000
you can use network segment date

796
00:31:14,000 --> 00:31:15,760
segmentation you can use resource

797
00:31:15,760 --> 00:31:17,120
restrictions

798
00:31:17,120 --> 00:31:20,159
you can use tools like name spaces

799
00:31:20,159 --> 00:31:22,000
some examples that you're probably

800
00:31:22,000 --> 00:31:24,640
familiar with include kubernetes

801
00:31:24,640 --> 00:31:26,080
openshift

802
00:31:26,080 --> 00:31:29,519
and prior to that mesos and nomad for

803
00:31:29,519 --> 00:31:31,519
example

804
00:31:31,519 --> 00:31:34,320
cloud providers also have managed

805
00:31:34,320 --> 00:31:37,120
orchestration options such as

806
00:31:37,120 --> 00:31:40,720
eks from amazon you have uh gke you have

807
00:31:40,720 --> 00:31:42,399
aks

808
00:31:42,399 --> 00:31:43,120
and

809
00:31:43,120 --> 00:31:46,559
the real benefit uh one of the benefits

810
00:31:46,559 --> 00:31:48,880
to these orchestrators is the ability to

811
00:31:48,880 --> 00:31:52,240
use policies you can really

812
00:31:52,240 --> 00:31:54,320
get a lot of bang for your buck

813
00:31:54,320 --> 00:31:56,960
at run time on kubernetes for example

814
00:31:56,960 --> 00:31:58,799
with admission control

815
00:31:58,799 --> 00:32:01,760
it can decide it can go talk to a

816
00:32:01,760 --> 00:32:04,399
container security tool or a policy

817
00:32:04,399 --> 00:32:07,279
agent uh like open policy agent and it

818
00:32:07,279 --> 00:32:10,080
can make decisions about whether or not

819
00:32:10,080 --> 00:32:13,440
you these containers should run

820
00:32:13,440 --> 00:32:16,720
i am a big fan of admission controllers

821
00:32:16,720 --> 00:32:20,240
for example on kubernetes uh they

822
00:32:20,240 --> 00:32:22,240
they provide that admission controller

823
00:32:22,240 --> 00:32:25,039
is exactly what it says right admission

824
00:32:25,039 --> 00:32:27,600
control it's a last gate for a container

825
00:32:27,600 --> 00:32:29,200
prior to runtime

826
00:32:29,200 --> 00:32:30,559
and i

827
00:32:30,559 --> 00:32:32,480
recommend strongly that if you're

828
00:32:32,480 --> 00:32:35,600
unfamiliar with admission control

829
00:32:35,600 --> 00:32:37,519
kubernetes did have something called pod

830
00:32:37,519 --> 00:32:39,360
security policies which has since been

831
00:32:39,360 --> 00:32:42,399
deprecated but now they have um

832
00:32:42,399 --> 00:32:44,640
they have something called uh you have

833
00:32:44,640 --> 00:32:46,320
well you have security contacts which

834
00:32:46,320 --> 00:32:49,360
were always there but you also have um

835
00:32:49,360 --> 00:32:52,559
security policies now that interact with

836
00:32:52,559 --> 00:32:54,399
uh admission control

837
00:32:54,399 --> 00:32:57,679
this is a complicated topic

838
00:32:57,679 --> 00:33:00,640
you will spend lots of time there

839
00:33:00,640 --> 00:33:02,880
um so

840
00:33:02,880 --> 00:33:04,960
we've i've been talking a lot

841
00:33:04,960 --> 00:33:07,600
and here's another moment for a poll

842
00:33:07,600 --> 00:33:09,760
that we can either talk about now or we

843
00:33:09,760 --> 00:33:12,000
can talk about at the end

844
00:33:12,000 --> 00:33:14,320
um what container orchestrator are you

845
00:33:14,320 --> 00:33:15,360
using

846
00:33:15,360 --> 00:33:18,159
um there's self-managed kubernetes for

847
00:33:18,159 --> 00:33:20,559
the win sure if you're

848
00:33:20,559 --> 00:33:22,159
if you're willing to take on that level

849
00:33:22,159 --> 00:33:24,960
of level of complexity uh

850
00:33:24,960 --> 00:33:27,760
go for it uh there are cloud provider

851
00:33:27,760 --> 00:33:30,880
managed kubernetes instances uh if

852
00:33:30,880 --> 00:33:33,360
you're worried about cloud lock-in or

853
00:33:33,360 --> 00:33:35,519
your multi-cloud that may not be the

854
00:33:35,519 --> 00:33:38,480
best um option for you but there are

855
00:33:38,480 --> 00:33:40,320
tools that can help with that there's

856
00:33:40,320 --> 00:33:41,600
openshift

857
00:33:41,600 --> 00:33:43,360
which is especially useful if you're on

858
00:33:43,360 --> 00:33:46,000
bare metal uh there's nomad or mesos if

859
00:33:46,000 --> 00:33:47,600
you're still using that

860
00:33:47,600 --> 00:33:50,399
and uh there's something called docker

861
00:33:50,399 --> 00:33:53,760
swarm which uh did not win really the

862
00:33:53,760 --> 00:33:56,399
the orchestration wars you can still use

863
00:33:56,399 --> 00:33:58,880
it i researched this the other day

864
00:33:58,880 --> 00:34:01,600
um i i don't uh

865
00:34:01,600 --> 00:34:03,440
i don't think that's the recommendation

866
00:34:03,440 --> 00:34:05,519
anymore um

867
00:34:05,519 --> 00:34:06,880
so

868
00:34:06,880 --> 00:34:08,399
maybe we'll we'll look at the poll

869
00:34:08,399 --> 00:34:10,079
results at the end and i'll keep going

870
00:34:10,079 --> 00:34:12,079
because we had a late start

871
00:34:12,079 --> 00:34:13,199
so

872
00:34:13,199 --> 00:34:14,960
the cncf

873
00:34:14,960 --> 00:34:16,879
i think if you're not familiar with that

874
00:34:16,879 --> 00:34:18,159
i i

875
00:34:18,159 --> 00:34:21,359
highly recommend you participate uh the

876
00:34:21,359 --> 00:34:23,839
cloud native computing foundation

877
00:34:23,839 --> 00:34:26,480
they're sort of uh the evangelists of

878
00:34:26,480 --> 00:34:29,520
the 12 factor app and uh cloud native

879
00:34:29,520 --> 00:34:30,560
right

880
00:34:30,560 --> 00:34:32,879
um and they have some principles of

881
00:34:32,879 --> 00:34:35,440
supply chain security so this is

882
00:34:35,440 --> 00:34:37,679
basically just taken from them i'm just

883
00:34:37,679 --> 00:34:40,000
gonna you know go over the concepts very

884
00:34:40,000 --> 00:34:41,040
quickly

885
00:34:41,040 --> 00:34:44,079
um it's this concept of of creating

886
00:34:44,079 --> 00:34:45,119
trust

887
00:34:45,119 --> 00:34:47,280
establishing trust at every step in the

888
00:34:47,280 --> 00:34:50,239
process through a combination of signing

889
00:34:50,239 --> 00:34:54,000
metadata and cryptographic validation

890
00:34:54,000 --> 00:34:56,159
the focus that everything that can be

891
00:34:56,159 --> 00:34:57,760
automated should be automated and

892
00:34:57,760 --> 00:35:00,480
documented as i mentioned before

893
00:35:00,480 --> 00:35:03,119
devops is automation of business rules

894
00:35:03,119 --> 00:35:05,920
hence the documentation and automation

895
00:35:05,920 --> 00:35:07,440
helps get you to

896
00:35:07,440 --> 00:35:09,440
separation of duties it eliminates

897
00:35:09,440 --> 00:35:10,480
errors

898
00:35:10,480 --> 00:35:14,400
um and it it ensures that your attack

899
00:35:14,400 --> 00:35:16,880
surface is reduced because now you have

900
00:35:16,880 --> 00:35:18,560
something doing things that don't

901
00:35:18,560 --> 00:35:21,200
involve people touching it

902
00:35:21,200 --> 00:35:23,520
every step in the software build and

903
00:35:23,520 --> 00:35:25,680
supply chain process

904
00:35:25,680 --> 00:35:28,640
needs to be defined with limited scopes

905
00:35:28,640 --> 00:35:30,400
every actor whether it's human or

906
00:35:30,400 --> 00:35:32,880
machine needs to have clearly defined

907
00:35:32,880 --> 00:35:35,200
roles it's all about that separation of

908
00:35:35,200 --> 00:35:37,520
duties which then is enforced by

909
00:35:37,520 --> 00:35:38,880
automation

910
00:35:38,880 --> 00:35:41,920
um and every entity in the system has to

911
00:35:41,920 --> 00:35:43,599
engage in mutual

912
00:35:43,599 --> 00:35:45,680
authentication and

913
00:35:45,680 --> 00:35:48,640
that it's that trust but verify right uh

914
00:35:48,640 --> 00:35:52,160
so that no nothing or uh a human or a

915
00:35:52,160 --> 00:35:54,240
machine

916
00:35:54,240 --> 00:35:56,560
shouldn't be trusted unless you can

917
00:35:56,560 --> 00:35:59,839
verify it

918
00:36:01,040 --> 00:36:03,119
um

919
00:36:03,119 --> 00:36:05,440
the cncf has something called the cloud

920
00:36:05,440 --> 00:36:08,079
native security landscape i i noticed uh

921
00:36:08,079 --> 00:36:10,960
some questions about uh tooling i don't

922
00:36:10,960 --> 00:36:13,200
really recommend tooling that's not why

923
00:36:13,200 --> 00:36:14,320
i'm here

924
00:36:14,320 --> 00:36:16,240
what i can do is point you to the cloud

925
00:36:16,240 --> 00:36:18,800
native security landscape there are open

926
00:36:18,800 --> 00:36:22,000
source and also uh commercial tools here

927
00:36:22,000 --> 00:36:23,040
they all

928
00:36:23,040 --> 00:36:24,880
have gone through the cncf and

929
00:36:24,880 --> 00:36:28,000
contribute uh very they're reputable so

930
00:36:28,000 --> 00:36:30,240
i encourage you to investigate it it's

931
00:36:30,240 --> 00:36:34,000
interactive so you can interact with uh

932
00:36:34,000 --> 00:36:37,520
the uh online tool um from the cncf so

933
00:36:37,520 --> 00:36:41,359
that you can find what you need

934
00:36:41,359 --> 00:36:42,400
the

935
00:36:42,400 --> 00:36:44,079
uh

936
00:36:44,079 --> 00:36:46,400
i know everybody's talking a lot about

937
00:36:46,400 --> 00:36:46,830
um

938
00:36:46,830 --> 00:36:48,320
[Music]

939
00:36:48,320 --> 00:36:50,160
about components right now right

940
00:36:50,160 --> 00:36:51,920
everybody's nervous because of the

941
00:36:51,920 --> 00:36:54,320
supply chain attacks and some of the

942
00:36:54,320 --> 00:36:56,320
elements that i've i've

943
00:36:56,320 --> 00:36:57,680
talked about

944
00:36:57,680 --> 00:36:59,680
owasp has a software component

945
00:36:59,680 --> 00:37:02,560
verification standard it's a community

946
00:37:02,560 --> 00:37:05,280
effort like all other owasp efforts

947
00:37:05,280 --> 00:37:06,160
and

948
00:37:06,160 --> 00:37:08,320
it can help in it helps you in

949
00:37:08,320 --> 00:37:10,000
identifying and reducing risk in a

950
00:37:10,000 --> 00:37:12,320
software supply chain

951
00:37:12,320 --> 00:37:15,119
i highly recommend that you uh

952
00:37:15,119 --> 00:37:18,079
take advantage of this and uh it it

953
00:37:18,079 --> 00:37:20,160
gives you a lot of ideas of best

954
00:37:20,160 --> 00:37:21,680
practices

955
00:37:21,680 --> 00:37:22,400
it

956
00:37:22,400 --> 00:37:24,480
points out good patterns versus

957
00:37:24,480 --> 00:37:26,320
anti-patterns

958
00:37:26,320 --> 00:37:28,160
and some of the elements some of the

959
00:37:28,160 --> 00:37:31,119
control objectives include

960
00:37:31,119 --> 00:37:33,280
having centralized repositories you

961
00:37:33,280 --> 00:37:34,320
really do

962
00:37:34,320 --> 00:37:36,720
that's like probably one of the easiest

963
00:37:36,720 --> 00:37:38,880
ways because it gives you visibility

964
00:37:38,880 --> 00:37:41,520
over um where everything is right

965
00:37:41,520 --> 00:37:44,560
um you want your repositories to use

966
00:37:44,560 --> 00:37:47,359
strong authentication and tls you want

967
00:37:47,359 --> 00:37:48,640
to um

968
00:37:48,640 --> 00:37:51,680
you want to have auditability and really

969
00:37:51,680 --> 00:37:53,920
you want it really emphasizes code

970
00:37:53,920 --> 00:37:56,079
signing and verification and i just want

971
00:37:56,079 --> 00:37:57,200
to point out

972
00:37:57,200 --> 00:37:58,160
again

973
00:37:58,160 --> 00:38:02,079
uh this idea of signing and verification

974
00:38:02,079 --> 00:38:03,359
and sh

975
00:38:03,359 --> 00:38:06,640
assurance and attestation that seems to

976
00:38:06,640 --> 00:38:08,560
be the theme when you're talking about

977
00:38:08,560 --> 00:38:10,480
supply chains

978
00:38:10,480 --> 00:38:11,599
um

979
00:38:11,599 --> 00:38:14,000
this is from the uh

980
00:38:14,000 --> 00:38:17,359
nist sp 800-190

981
00:38:17,359 --> 00:38:19,920
application container security guide i'm

982
00:38:19,920 --> 00:38:22,079
not going to read through this too much

983
00:38:22,079 --> 00:38:24,720
it's a high-level sort of life cycle of

984
00:38:24,720 --> 00:38:25,520
how

985
00:38:25,520 --> 00:38:27,680
containers are created and deployed

986
00:38:27,680 --> 00:38:30,640
you'll see it's very high level right it

987
00:38:30,640 --> 00:38:32,960
just says developer

988
00:38:32,960 --> 00:38:35,359
over on the left it doesn't really break

989
00:38:35,359 --> 00:38:39,040
it down into what happens so much um but

990
00:38:39,040 --> 00:38:41,920
uh it gives you an idea if you i

991
00:38:41,920 --> 00:38:43,599
recommend you steal it when talking to

992
00:38:43,599 --> 00:38:46,480
executives for example it's it's helpful

993
00:38:46,480 --> 00:38:48,320
in that sense

994
00:38:48,320 --> 00:38:50,160
um

995
00:38:50,160 --> 00:38:53,599
bombs s-bombs and d-bombs um

996
00:38:53,599 --> 00:38:55,920
i was at kubecon and that recently and

997
00:38:55,920 --> 00:38:58,000
that was a big topic again because of

998
00:38:58,000 --> 00:39:00,640
the supply chain and because of certain

999
00:39:00,640 --> 00:39:02,240
executive orders

1000
00:39:02,240 --> 00:39:04,560
from the white house uh given the solar

1001
00:39:04,560 --> 00:39:08,160
winds uh issue that that occurred

1002
00:39:08,160 --> 00:39:09,040
um

1003
00:39:09,040 --> 00:39:12,160
there are techniques i i'm sure

1004
00:39:12,160 --> 00:39:13,920
if you if your organization is pretty

1005
00:39:13,920 --> 00:39:15,520
mature they were already creating

1006
00:39:15,520 --> 00:39:17,200
s-bombs if you were a commercial

1007
00:39:17,200 --> 00:39:18,960
software company you were probably

1008
00:39:18,960 --> 00:39:22,560
already using s-bombs or you should be

1009
00:39:22,560 --> 00:39:25,520
um but there are tools now that you can

1010
00:39:25,520 --> 00:39:26,640
create

1011
00:39:26,640 --> 00:39:27,760
uh

1012
00:39:27,760 --> 00:39:30,800
s bombs for the container itself which

1013
00:39:30,800 --> 00:39:34,400
is likely recommended as uh because what

1014
00:39:34,400 --> 00:39:37,119
i said was right it's it's a it's a

1015
00:39:37,119 --> 00:39:39,680
software package and sometimes people

1016
00:39:39,680 --> 00:39:42,400
put too much stuff in there and now it's

1017
00:39:42,400 --> 00:39:45,760
a requirement in certain sectors um

1018
00:39:45,760 --> 00:39:47,680
to have an s-bomb if you're in the

1019
00:39:47,680 --> 00:39:50,079
federal sector uh and you do business

1020
00:39:50,079 --> 00:39:51,839
with or you do business with the federal

1021
00:39:51,839 --> 00:39:54,320
sector you are required to provide an

1022
00:39:54,320 --> 00:39:56,720
s-bomb with with

1023
00:39:56,720 --> 00:39:58,640
each product or you have to have it

1024
00:39:58,640 --> 00:40:00,720
available on a website

1025
00:40:00,720 --> 00:40:03,599
and i mentioned two open source tools uh

1026
00:40:03,599 --> 00:40:07,040
sift or turn that can assist with that

1027
00:40:07,040 --> 00:40:08,800
um

1028
00:40:08,800 --> 00:40:10,640
i'm not going to go into too much detail

1029
00:40:10,640 --> 00:40:13,040
on this uh because of time

1030
00:40:13,040 --> 00:40:14,240
but um

1031
00:40:14,240 --> 00:40:18,000
uh i have a set of devsecops decisioning

1032
00:40:18,000 --> 00:40:20,160
principles that i use

1033
00:40:20,160 --> 00:40:22,880
uh i i think the problem that you get

1034
00:40:22,880 --> 00:40:25,760
into with devsecops is that

1035
00:40:25,760 --> 00:40:28,240
people think that they can they confuse

1036
00:40:28,240 --> 00:40:29,599
information

1037
00:40:29,599 --> 00:40:32,640
with a decision and the decision the

1038
00:40:32,640 --> 00:40:35,040
information isn't all that useful unless

1039
00:40:35,040 --> 00:40:38,160
you're making a decision um i.e sort of

1040
00:40:38,160 --> 00:40:40,079
breaking a build or

1041
00:40:40,079 --> 00:40:41,200
uh

1042
00:40:41,200 --> 00:40:45,119
sending like diverting a build right

1043
00:40:45,119 --> 00:40:48,640
and uh i think that

1044
00:40:48,640 --> 00:40:51,359
when deploying things to as part of a

1045
00:40:51,359 --> 00:40:52,560
pipeline

1046
00:40:52,560 --> 00:40:54,800
that you need to have decisioning

1047
00:40:54,800 --> 00:40:56,400
criteria

1048
00:40:56,400 --> 00:40:59,280
that is very clear it's based on uh

1049
00:40:59,280 --> 00:41:02,880
defect principles or slas so that people

1050
00:41:02,880 --> 00:41:05,520
understand when is slow path happening

1051
00:41:05,520 --> 00:41:08,079
when his fast path when will my build

1052
00:41:08,079 --> 00:41:11,280
get broken when will it get past

1053
00:41:11,280 --> 00:41:12,640
um

1054
00:41:12,640 --> 00:41:13,680
i think

1055
00:41:13,680 --> 00:41:15,119
what

1056
00:41:15,119 --> 00:41:18,240
people mistake

1057
00:41:18,839 --> 00:41:20,480
devsecops

1058
00:41:20,480 --> 00:41:22,400
they think you know because it's on that

1059
00:41:22,400 --> 00:41:24,000
um

1060
00:41:24,000 --> 00:41:26,720
you know the gartner um

1061
00:41:26,720 --> 00:41:27,599
uh

1062
00:41:27,599 --> 00:41:31,200
over hyped scale right of yeah

1063
00:41:31,200 --> 00:41:32,800
so the thing that everybody talks about

1064
00:41:32,800 --> 00:41:34,480
but then isn't does it isn't very

1065
00:41:34,480 --> 00:41:35,520
effective

1066
00:41:35,520 --> 00:41:37,920
i think the problem is that

1067
00:41:37,920 --> 00:41:40,160
people just think that they push a lot

1068
00:41:40,160 --> 00:41:42,880
of information out without doing things

1069
00:41:42,880 --> 00:41:45,119
and so it's less effective

1070
00:41:45,119 --> 00:41:46,240
and

1071
00:41:46,240 --> 00:41:49,119
if you want to be effective

1072
00:41:49,119 --> 00:41:51,680
because the opportunity with devsecops

1073
00:41:51,680 --> 00:41:54,640
is to optimize coverage then you have to

1074
00:41:54,640 --> 00:41:56,400
create decision points

1075
00:41:56,400 --> 00:41:58,640
and the reason why i'm talking about

1076
00:41:58,640 --> 00:42:01,200
this is because

1077
00:42:01,200 --> 00:42:03,359
a real world use case

1078
00:42:03,359 --> 00:42:04,240
and

1079
00:42:04,240 --> 00:42:06,560
you'll notice that i have decision

1080
00:42:06,560 --> 00:42:08,079
points right

1081
00:42:08,079 --> 00:42:10,720
and that's what i mean by

1082
00:42:10,720 --> 00:42:13,760
uh decisioning principles right so for

1083
00:42:13,760 --> 00:42:16,640
example um this is from a place that i

1084
00:42:16,640 --> 00:42:18,960
recently worked at i'm not going to say

1085
00:42:18,960 --> 00:42:22,079
where but um you have the developer who

1086
00:42:22,079 --> 00:42:24,960
uh pushes the code triggers the build

1087
00:42:24,960 --> 00:42:28,000
and you're creating the container right

1088
00:42:28,000 --> 00:42:31,440
you'll see the ci system after item two

1089
00:42:31,440 --> 00:42:34,960
it can it goes it uses an image security

1090
00:42:34,960 --> 00:42:37,680
validation service to scan the image

1091
00:42:37,680 --> 00:42:40,480
and it uses a policy validation service

1092
00:42:40,480 --> 00:42:42,640
maybe the policy validation checks for

1093
00:42:42,640 --> 00:42:44,319
things that aren't checked by the

1094
00:42:44,319 --> 00:42:47,040
security system maybe you use uh

1095
00:42:47,040 --> 00:42:49,920
something an an uh open source software

1096
00:42:49,920 --> 00:42:52,480
sca tool that only checks packages and

1097
00:42:52,480 --> 00:42:54,160
then you have policy validation that

1098
00:42:54,160 --> 00:42:57,440
checks certain container specific rules

1099
00:42:57,440 --> 00:42:59,680
maybe such as trying to run as

1100
00:42:59,680 --> 00:43:00,960
privileged

1101
00:43:00,960 --> 00:43:03,200
that's why we have it separated that's

1102
00:43:03,200 --> 00:43:05,520
why we did separate it

1103
00:43:05,520 --> 00:43:08,480
then you have the publishing phase

1104
00:43:08,480 --> 00:43:10,720
where you publish to an internal

1105
00:43:10,720 --> 00:43:13,040
container image registry

1106
00:43:13,040 --> 00:43:16,079
then as part of

1107
00:43:16,079 --> 00:43:18,079
your you need to think in terms of

1108
00:43:18,079 --> 00:43:20,800
non-prod versus prod your development

1109
00:43:20,800 --> 00:43:22,640
and test environment maybe your qa

1110
00:43:22,640 --> 00:43:24,400
environment

1111
00:43:24,400 --> 00:43:28,480
and the goal is distribution right

1112
00:43:28,480 --> 00:43:31,839
um so you start with non-prod you push

1113
00:43:31,839 --> 00:43:34,400
it to a read-only registry node

1114
00:43:34,400 --> 00:43:37,200
you go through your securi your testing

1115
00:43:37,200 --> 00:43:40,960
your functional testing you uh

1116
00:43:40,960 --> 00:43:44,560
after it passes your release criteria

1117
00:43:44,560 --> 00:43:46,480
i'm hoping that everyone understands

1118
00:43:46,480 --> 00:43:48,560
release management where you have

1119
00:43:48,560 --> 00:43:51,200
criteria that checks did it go through

1120
00:43:51,200 --> 00:43:53,920
unit testing did it go through

1121
00:43:53,920 --> 00:43:55,920
functional testing

1122
00:43:55,920 --> 00:43:58,160
did it pass everything

1123
00:43:58,160 --> 00:43:59,200
um

1124
00:43:59,200 --> 00:44:00,720
hopefully you're not doing too many

1125
00:44:00,720 --> 00:44:02,480
tests you don't have too many test

1126
00:44:02,480 --> 00:44:03,520
escapes

1127
00:44:03,520 --> 00:44:06,880
um and then it if it passes the release

1128
00:44:06,880 --> 00:44:09,119
decision then it's distributed or

1129
00:44:09,119 --> 00:44:12,480
promoted to production but you'll notice

1130
00:44:12,480 --> 00:44:16,079
that i i have read only registry nodes

1131
00:44:16,079 --> 00:44:17,359
that your

1132
00:44:17,359 --> 00:44:20,400
production and non-prod

1133
00:44:20,400 --> 00:44:23,280
kubernetes clusters are interacting with

1134
00:44:23,280 --> 00:44:24,240
that

1135
00:44:24,240 --> 00:44:27,119
nothing is touching the actual core

1136
00:44:27,119 --> 00:44:29,119
container image registry and that's a

1137
00:44:29,119 --> 00:44:29,920
way

1138
00:44:29,920 --> 00:44:30,800
to

1139
00:44:30,800 --> 00:44:32,000
ensure

1140
00:44:32,000 --> 00:44:35,280
that you're not um

1141
00:44:35,280 --> 00:44:37,200
that this is an assured image that it's

1142
00:44:37,200 --> 00:44:40,160
a read-only image and that it's not uh

1143
00:44:40,160 --> 00:44:44,240
something that has had any drift occur

1144
00:44:46,720 --> 00:44:50,960
so that was a lot i know i know okay now

1145
00:44:50,960 --> 00:44:52,480
we're getting close we're

1146
00:44:52,480 --> 00:44:54,640
uh getting close to the end here i know

1147
00:44:54,640 --> 00:44:56,319
that was uh it might have been

1148
00:44:56,319 --> 00:44:58,240
overwhelming to people so i just want to

1149
00:44:58,240 --> 00:45:00,720
go over i'm gonna i have some reminders

1150
00:45:00,720 --> 00:45:01,599
here

1151
00:45:01,599 --> 00:45:02,400
uh

1152
00:45:02,400 --> 00:45:05,760
small small small images it's beautiful

1153
00:45:05,760 --> 00:45:07,920
make your images compact

1154
00:45:07,920 --> 00:45:09,920
you leave out unnecessary libraries or

1155
00:45:09,920 --> 00:45:11,520
binaries that you don't need for your

1156
00:45:11,520 --> 00:45:13,599
microservice

1157
00:45:13,599 --> 00:45:16,319
trusted registries who do you trust

1158
00:45:16,319 --> 00:45:18,079
that's really important in case you

1159
00:45:18,079 --> 00:45:19,920
didn't know uh you can actually

1160
00:45:19,920 --> 00:45:22,240
establish trusted registries

1161
00:45:22,240 --> 00:45:25,359
um in your kubernetes configuration so

1162
00:45:25,359 --> 00:45:27,440
you can actually decline

1163
00:45:27,440 --> 00:45:29,760
to use if somebody tries to use a

1164
00:45:29,760 --> 00:45:33,760
registry that isn't trusted then it

1165
00:45:33,760 --> 00:45:36,880
won't use an image from that registry

1166
00:45:36,880 --> 00:45:38,400
uh you can

1167
00:45:38,400 --> 00:45:40,480
you should validate your images they

1168
00:45:40,480 --> 00:45:42,560
should be free of vulnerable libraries

1169
00:45:42,560 --> 00:45:43,920
and components

1170
00:45:43,920 --> 00:45:46,960
uh your and i believe that you should

1171
00:45:46,960 --> 00:45:49,359
validate anytime there's a state change

1172
00:45:49,359 --> 00:45:52,000
anytime somebody touches it anytime you

1173
00:45:52,000 --> 00:45:55,440
know something is uh it's forked as i

1174
00:45:55,440 --> 00:45:56,960
like to say

1175
00:45:56,960 --> 00:45:57,839
um

1176
00:45:57,839 --> 00:45:59,599
container images shouldn't need to run

1177
00:45:59,599 --> 00:46:01,680
as privileged or have processes that run

1178
00:46:01,680 --> 00:46:03,200
as root you don't want to put

1179
00:46:03,200 --> 00:46:05,680
credentials keys or tokens into your

1180
00:46:05,680 --> 00:46:06,880
image

1181
00:46:06,880 --> 00:46:09,040
you want to do just in time with

1182
00:46:09,040 --> 00:46:10,400
credentials

1183
00:46:10,400 --> 00:46:12,079
reduce the listening ports needed in

1184
00:46:12,079 --> 00:46:13,680
your container image you're just

1185
00:46:13,680 --> 00:46:15,760
increasing the attack surface

1186
00:46:15,760 --> 00:46:17,520
you want to use the standard run time i

1187
00:46:17,520 --> 00:46:19,440
know this maybe this seems obvious to

1188
00:46:19,440 --> 00:46:20,720
some people

1189
00:46:20,720 --> 00:46:24,079
but not all container security tools uh

1190
00:46:24,079 --> 00:46:26,960
the esp the runtime ones they don't they

1191
00:46:26,960 --> 00:46:29,440
basically a lot of them hook into a run

1192
00:46:29,440 --> 00:46:31,520
time and if you're using some weird

1193
00:46:31,520 --> 00:46:33,920
runtime that's maybe new then the

1194
00:46:33,920 --> 00:46:36,000
container security tool might not work

1195
00:46:36,000 --> 00:46:36,800
right

1196
00:46:36,800 --> 00:46:39,040
um a container isn't a host it's an

1197
00:46:39,040 --> 00:46:40,960
ephemeral drop of rain shouldn't be

1198
00:46:40,960 --> 00:46:43,280
logging into it trying to change it

1199
00:46:43,280 --> 00:46:45,680
it's it's supposed to evaporate uh

1200
00:46:45,680 --> 00:46:47,760
something interesting you can do and

1201
00:46:47,760 --> 00:46:50,079
that you should try uh is you should

1202
00:46:50,079 --> 00:46:51,599
regularly

1203
00:46:51,599 --> 00:46:54,240
expire your containers they should run

1204
00:46:54,240 --> 00:46:56,160
probably they should be changed out

1205
00:46:56,160 --> 00:46:58,400
every two weeks every four weeks if you

1206
00:46:58,400 --> 00:46:59,359
can

1207
00:46:59,359 --> 00:47:02,880
think this is about drift prevention

1208
00:47:02,880 --> 00:47:05,280
only in a tested immutable container

1209
00:47:05,280 --> 00:47:07,200
images should run in your environment

1210
00:47:07,200 --> 00:47:08,800
you want to automate your container

1211
00:47:08,800 --> 00:47:11,359
builds and deploys and you want to

1212
00:47:11,359 --> 00:47:13,520
constantly reevaluate your supply chain

1213
00:47:13,520 --> 00:47:15,839
you want to threat model that supply

1214
00:47:15,839 --> 00:47:16,880
chain

1215
00:47:16,880 --> 00:47:19,680
because that is a process that needs to

1216
00:47:19,680 --> 00:47:20,960
be

1217
00:47:20,960 --> 00:47:23,680
reviewed as much as your own software

1218
00:47:23,680 --> 00:47:27,040
architecture or software itself

1219
00:47:27,040 --> 00:47:30,400
so that was a lot

1220
00:47:30,400 --> 00:47:34,000
um i appreciate everybody's time and now

1221
00:47:34,000 --> 00:47:36,960
i'm going to we

