1
00:00:01,420 --> 00:00:05,630
[Music]

2
00:00:06,640 --> 00:00:09,519
so yeah i'm chuck willis and uh as i

3
00:00:09,519 --> 00:00:10,719
mentioned you know this is we're gonna

4
00:00:10,719 --> 00:00:12,000
be talking here about data at rest

5
00:00:12,000 --> 00:00:13,920
encryption it's gonna actually you know

6
00:00:13,920 --> 00:00:15,440
kind of follow on from the keynote that

7
00:00:15,440 --> 00:00:17,440
we just had so i'm excited to get into

8
00:00:17,440 --> 00:00:20,000
this topic

9
00:00:21,680 --> 00:00:23,920
so just quick note about me i think he

10
00:00:23,920 --> 00:00:25,519
already did a bit of the introduction

11
00:00:25,519 --> 00:00:28,320
just uh i am in the dc area so i'm part

12
00:00:28,320 --> 00:00:30,880
of the oauth northern virginia chapter

13
00:00:30,880 --> 00:00:32,640
when there has been a marylander dc

14
00:00:32,640 --> 00:00:34,239
chapter i usually participate in those

15
00:00:34,239 --> 00:00:35,440
as well

16
00:00:35,440 --> 00:00:38,480
i also um a while ago created the oauth

17
00:00:38,480 --> 00:00:40,719
broken web applications project it's a

18
00:00:40,719 --> 00:00:43,200
virtual machine full of web applications

19
00:00:43,200 --> 00:00:44,719
with various types of vulnerabilities

20
00:00:44,719 --> 00:00:46,000
you can use it for training or for

21
00:00:46,000 --> 00:00:48,399
testing tools that sort of thing

22
00:00:48,399 --> 00:00:49,440
if uh

23
00:00:49,440 --> 00:00:50,719
you have any

24
00:00:50,719 --> 00:00:52,719
uh i haven't updated that in a while so

25
00:00:52,719 --> 00:00:54,800
but the the current version still works

26
00:00:54,800 --> 00:00:56,879
it's a virtual machine so it actually

27
00:00:56,879 --> 00:00:58,000
you know it gets more and more

28
00:00:58,000 --> 00:00:59,680
vulnerability as time goes on it's the

29
00:00:59,680 --> 00:01:00,879
the libraries and components that it

30
00:01:00,879 --> 00:01:02,879
uses get older and older so

31
00:01:02,879 --> 00:01:05,600
definitely check that out and uh my just

32
00:01:05,600 --> 00:01:07,840
a random fact my favorite movie

33
00:01:07,840 --> 00:01:09,600
the blues brothers i'm originally from

34
00:01:09,600 --> 00:01:11,280
the chicago area so i think you're kind

35
00:01:11,280 --> 00:01:12,799
of required to like that movie if you're

36
00:01:12,799 --> 00:01:14,560
from that area

37
00:01:14,560 --> 00:01:16,000
so i'm going to let weiss introduce

38
00:01:16,000 --> 00:01:17,280
himself

39
00:01:17,280 --> 00:01:19,759
hey everyone my name is weiss

40
00:01:19,759 --> 00:01:21,439
i spent 20 years in the infosec

41
00:01:21,439 --> 00:01:22,400
community

42
00:01:22,400 --> 00:01:23,360
and

43
00:01:23,360 --> 00:01:25,840
focused mostly on incident response and

44
00:01:25,840 --> 00:01:27,280
threat countermeasures

45
00:01:27,280 --> 00:01:29,280
as well as encryption and cryptography

46
00:01:29,280 --> 00:01:30,960
i'm based in san diego so part of the

47
00:01:30,960 --> 00:01:33,280
oauth san diego community

48
00:01:33,280 --> 00:01:35,280
and i've lived in germany the us

49
00:01:35,280 --> 00:01:37,520
singapore and japan and randomly my

50
00:01:37,520 --> 00:01:40,159
favorite pizza topping is boringly

51
00:01:40,159 --> 00:01:42,479
cheese

52
00:01:43,439 --> 00:01:45,360
i'm glad you said it i wasn't gonna i

53
00:01:45,360 --> 00:01:47,119
wasn't gonna call out the boringness of

54
00:01:47,119 --> 00:01:49,439
the cheap topic

55
00:01:49,439 --> 00:01:51,360
so here's a quick uh note of what we're

56
00:01:51,360 --> 00:01:53,759
going to talk about so just really a

57
00:01:53,759 --> 00:01:55,920
quick primer on cryptography

58
00:01:55,920 --> 00:01:57,520
and encryption and key management just

59
00:01:57,520 --> 00:01:58,799
to kind of make sure everyone's on the

60
00:01:58,799 --> 00:02:00,079
same page

61
00:02:00,079 --> 00:02:01,520
and then

62
00:02:01,520 --> 00:02:02,799
uh weiss is really going to go into

63
00:02:02,799 --> 00:02:04,159
detail on kind of you know the issues

64
00:02:04,159 --> 00:02:05,520
with the current you know data at rest

65
00:02:05,520 --> 00:02:07,759
encryption approaches that are used and

66
00:02:07,759 --> 00:02:10,000
you know why that's a problem and then

67
00:02:10,000 --> 00:02:11,440
i'll come back at the end to talk more

68
00:02:11,440 --> 00:02:12,640
about you know some alternative

69
00:02:12,640 --> 00:02:14,480
approaches that can help in kind of

70
00:02:14,480 --> 00:02:16,480
closing the gap that's there

71
00:02:16,480 --> 00:02:18,640
um we'll also have you know up till the

72
00:02:18,640 --> 00:02:20,640
end of the end of the hour as far as for

73
00:02:20,640 --> 00:02:22,720
q a so if you've got questions yeah

74
00:02:22,720 --> 00:02:24,560
please submit those through the hoover

75
00:02:24,560 --> 00:02:25,680
platform

76
00:02:25,680 --> 00:02:27,599
and uh also you know keep an eye on that

77
00:02:27,599 --> 00:02:29,520
as far as if you see questions that

78
00:02:29,520 --> 00:02:30,879
you're interested in hearing us answer

79
00:02:30,879 --> 00:02:32,480
you know upload those so that way

80
00:02:32,480 --> 00:02:33,599
they'll kind of work their way to the

81
00:02:33,599 --> 00:02:35,519
top and uh glenn will provide those at

82
00:02:35,519 --> 00:02:37,840
the end

83
00:02:39,040 --> 00:02:40,959
so yeah so cryptographic failures you

84
00:02:40,959 --> 00:02:44,160
may know that from the new 2021 um oauth

85
00:02:44,160 --> 00:02:45,680
top 10. so

86
00:02:45,680 --> 00:02:48,319
um you can see that it used to be kind

87
00:02:48,319 --> 00:02:50,400
of rolled into a bunch of other things

88
00:02:50,400 --> 00:02:53,040
as part of sensitive data exposure uh in

89
00:02:53,040 --> 00:02:54,560
2017

90
00:02:54,560 --> 00:02:56,560
but uh now it's been broken out into

91
00:02:56,560 --> 00:02:59,599
kind of its own its own um separate line

92
00:02:59,599 --> 00:03:01,760
item on the os top 10 uh as

93
00:03:01,760 --> 00:03:03,200
cryptographic failures and it's also

94
00:03:03,200 --> 00:03:05,440
moved up in popularity it's it's gone

95
00:03:05,440 --> 00:03:06,319
above

96
00:03:06,319 --> 00:03:07,120
um

97
00:03:07,120 --> 00:03:09,440
injection and you know really above

98
00:03:09,440 --> 00:03:10,879
everything else other than broken access

99
00:03:10,879 --> 00:03:12,720
control so it's a very common problem

100
00:03:12,720 --> 00:03:15,040
nowadays that people are recognizing i

101
00:03:15,040 --> 00:03:16,560
think it's been around for a while it's

102
00:03:16,560 --> 00:03:18,560
just that it's uh become more to the

103
00:03:18,560 --> 00:03:20,640
forefront maybe uh partially because

104
00:03:20,640 --> 00:03:22,480
we're trying to deal with things like

105
00:03:22,480 --> 00:03:24,319
sql injection and cross-site scripting a

106
00:03:24,319 --> 00:03:25,599
lot better as far as kind of the

107
00:03:25,599 --> 00:03:26,959
framework layer

108
00:03:26,959 --> 00:03:29,280
um so as those are less common that we

109
00:03:29,280 --> 00:03:30,560
see you know access control and

110
00:03:30,560 --> 00:03:32,640
cryptographic failures become kind of

111
00:03:32,640 --> 00:03:35,760
relatively more common

112
00:03:36,080 --> 00:03:38,239
um and if you look at the

113
00:03:38,239 --> 00:03:40,159
uh the kind of the documentation for the

114
00:03:40,159 --> 00:03:42,560
oauth top 10 that's on the website the

115
00:03:42,560 --> 00:03:45,280
exact the first scenario here uh that's

116
00:03:45,280 --> 00:03:46,879
shown is exactly kind of what we want to

117
00:03:46,879 --> 00:03:48,319
talk about today so

118
00:03:48,319 --> 00:03:50,000
in this case it's a it's at the example

119
00:03:50,000 --> 00:03:51,680
it's an application that has credit card

120
00:03:51,680 --> 00:03:53,920
numbers that it wants to protect

121
00:03:53,920 --> 00:03:55,920
but the way it's protecting them is it's

122
00:03:55,920 --> 00:03:57,280
got you know automatic database

123
00:03:57,280 --> 00:03:59,360
encryption happening so there's you know

124
00:03:59,360 --> 00:04:00,959
transparent encryption at either the

125
00:04:00,959 --> 00:04:03,200
database or the the files

126
00:04:03,200 --> 00:04:05,040
kind of block storage level

127
00:04:05,040 --> 00:04:05,920
and

128
00:04:05,920 --> 00:04:07,280
therefore

129
00:04:07,280 --> 00:04:08,799
because it's automatically getting

130
00:04:08,799 --> 00:04:10,640
encrypted and decrypted when you have a

131
00:04:10,640 --> 00:04:12,799
sql injection flaw in the application

132
00:04:12,799 --> 00:04:13,920
it's just going to pull out all the

133
00:04:13,920 --> 00:04:16,639
decrypted data so there's no it's the

134
00:04:16,639 --> 00:04:18,238
even though it's encrypted it's not you

135
00:04:18,238 --> 00:04:19,839
know providing protection against this

136
00:04:19,839 --> 00:04:21,440
type of attack

137
00:04:21,440 --> 00:04:22,479
so

138
00:04:22,479 --> 00:04:23,840
like i said uh

139
00:04:23,840 --> 00:04:25,280
uh cryptographic dealers have been

140
00:04:25,280 --> 00:04:26,800
around a while so you might think

141
00:04:26,800 --> 00:04:28,160
they're the new kid on the block but in

142
00:04:28,160 --> 00:04:29,600
reality they're more like the upper

143
00:04:29,600 --> 00:04:32,240
right corner here it's the the current

144
00:04:32,240 --> 00:04:33,680
version of the new kids on the block as

145
00:04:33,680 --> 00:04:36,080
far as from their 2021 tour

146
00:04:36,080 --> 00:04:37,360
promos so

147
00:04:37,360 --> 00:04:40,800
it's uh it's been around for a long

148
00:04:40,840 --> 00:04:43,120
time so let's go a little bit more in

149
00:04:43,120 --> 00:04:45,440
detail into the situation so

150
00:04:45,440 --> 00:04:47,280
you know you talk about cryptography i

151
00:04:47,280 --> 00:04:49,120
mean cryptography you know existed long

152
00:04:49,120 --> 00:04:51,040
before computers so they had you know

153
00:04:51,040 --> 00:04:52,479
this type of instrument in the upper

154
00:04:52,479 --> 00:04:54,720
right is you know a thing for a caesar

155
00:04:54,720 --> 00:04:57,759
type cipher simple substitution cipher

156
00:04:57,759 --> 00:04:59,759
um you have the enigma machines and

157
00:04:59,759 --> 00:05:01,759
other sorts of kind of mechanical and

158
00:05:01,759 --> 00:05:04,080
various sorts of cryptographic

159
00:05:04,080 --> 00:05:06,240
systems that were around and so when

160
00:05:06,240 --> 00:05:08,479
computer security came around both

161
00:05:08,479 --> 00:05:10,560
computers came around the you know an

162
00:05:10,560 --> 00:05:12,080
obvious application for them was

163
00:05:12,080 --> 00:05:14,560
cryptography but also an obvious um kind

164
00:05:14,560 --> 00:05:16,160
of mechanism that could be used as part

165
00:05:16,160 --> 00:05:17,840
of securing computers was was

166
00:05:17,840 --> 00:05:19,199
cryptography

167
00:05:19,199 --> 00:05:21,520
and you know for you know some number of

168
00:05:21,520 --> 00:05:23,520
years computer security really did focus

169
00:05:23,520 --> 00:05:24,960
on cryptography they were really

170
00:05:24,960 --> 00:05:26,720
concerned about this type of thing of

171
00:05:26,720 --> 00:05:28,160
you know hey we want to you know encrypt

172
00:05:28,160 --> 00:05:30,000
some data that's going to be sent over

173
00:05:30,000 --> 00:05:32,320
you know an untrusted media medium like

174
00:05:32,320 --> 00:05:34,240
you know radio waves therefore we need

175
00:05:34,240 --> 00:05:35,680
to you know have

176
00:05:35,680 --> 00:05:38,960
the ability to encrypt it and decrypt it

177
00:05:38,960 --> 00:05:40,320
and there was quite a bit of work has

178
00:05:40,320 --> 00:05:42,320
been done over the years into you know

179
00:05:42,320 --> 00:05:44,800
algorithms and modes that are very

180
00:05:44,800 --> 00:05:46,639
resistant to you know various types of

181
00:05:46,639 --> 00:05:47,759
attacks so

182
00:05:47,759 --> 00:05:50,320
uh you know on the left here lower left

183
00:05:50,320 --> 00:05:53,199
we've got a kind of a diagram of the aes

184
00:05:53,199 --> 00:05:54,800
algorithm and kind of the rounds that it

185
00:05:54,800 --> 00:05:57,120
uses for you know encryption on the left

186
00:05:57,120 --> 00:05:59,520
and decryption on the right going up

187
00:05:59,520 --> 00:06:01,440
um on the bottom here we have the cipher

188
00:06:01,440 --> 00:06:02,960
block chaining kind of mode of

189
00:06:02,960 --> 00:06:05,840
encryption that allows you to

190
00:06:05,840 --> 00:06:08,080
you know be more resistant to changes to

191
00:06:08,080 --> 00:06:10,080
data or mixing of packets and things

192
00:06:10,080 --> 00:06:12,400
like that so there's a there's been a

193
00:06:12,400 --> 00:06:14,319
lot of work into that and it's it's paid

194
00:06:14,319 --> 00:06:15,759
off pretty well

195
00:06:15,759 --> 00:06:17,600
so you know if you're looking at kind of

196
00:06:17,600 --> 00:06:19,199
directly attacking you know kind of

197
00:06:19,199 --> 00:06:21,520
modern cryptography it's it's very

198
00:06:21,520 --> 00:06:22,479
strong

199
00:06:22,479 --> 00:06:23,840
you know not to say it's perfect you

200
00:06:23,840 --> 00:06:25,520
know maybe nation states uh have the

201
00:06:25,520 --> 00:06:27,919
ability to do certain things but i think

202
00:06:27,919 --> 00:06:29,680
even in those cases you've got you know

203
00:06:29,680 --> 00:06:31,600
additional mechanisms you can use if

204
00:06:31,600 --> 00:06:33,280
you're really that concerned about you

205
00:06:33,280 --> 00:06:35,440
know the cryptography itself

206
00:06:35,440 --> 00:06:37,280
so one example is you could layer

207
00:06:37,280 --> 00:06:39,680
encryption so you could have multiple

208
00:06:39,680 --> 00:06:42,080
algorithms that are you know used at

209
00:06:42,080 --> 00:06:43,360
different layers

210
00:06:43,360 --> 00:06:45,039
uh example that might be you know you

211
00:06:45,039 --> 00:06:46,960
might have a layer two encryption device

212
00:06:46,960 --> 00:06:49,120
that does kind of point-to-point vpn

213
00:06:49,120 --> 00:06:51,840
type connections and then have a layer 3

214
00:06:51,840 --> 00:06:54,639
or a session layer https type encryption

215
00:06:54,639 --> 00:06:56,080
on top of that

216
00:06:56,080 --> 00:06:57,120
and uh

217
00:06:57,120 --> 00:06:58,960
so so that's one option i know the

218
00:06:58,960 --> 00:07:00,800
government sometimes will use multiple

219
00:07:00,800 --> 00:07:03,840
types of commercial

220
00:07:03,840 --> 00:07:05,840
you know vpn devices kind of layered on

221
00:07:05,840 --> 00:07:07,280
top of one another in order to provide

222
00:07:07,280 --> 00:07:09,280
additional security so even if there's a

223
00:07:09,280 --> 00:07:11,520
vulnerability in you know

224
00:07:11,520 --> 00:07:13,759
acme product uh then hopefully it's not

225
00:07:13,759 --> 00:07:15,039
going to affect you know the other

226
00:07:15,039 --> 00:07:17,199
product as well so by having kind of

227
00:07:17,199 --> 00:07:18,800
these completely separate things layered

228
00:07:18,800 --> 00:07:19,919
on top of one another you're giving

229
00:07:19,919 --> 00:07:21,759
yourself a lot better

230
00:07:21,759 --> 00:07:25,199
uh protection against attacks

231
00:07:25,360 --> 00:07:27,039
um and then for some algorithms like

232
00:07:27,039 --> 00:07:31,520
hashing algorithms or um in like rsa uh

233
00:07:31,520 --> 00:07:32,960
asymmetric algorithms you know you can

234
00:07:32,960 --> 00:07:35,120
basically have keys as long as you want

235
00:07:35,120 --> 00:07:36,479
um so if you're really concerned about

236
00:07:36,479 --> 00:07:38,000
brute force then you know you can make

237
00:07:38,000 --> 00:07:40,960
that basically impractical um if you're

238
00:07:40,960 --> 00:07:42,960
hashing passwords you can you know make

239
00:07:42,960 --> 00:07:46,080
the um process to hash the password down

240
00:07:46,080 --> 00:07:47,360
to the um

241
00:07:47,360 --> 00:07:49,440
you know hash value take you know as

242
00:07:49,440 --> 00:07:50,800
long as you want

243
00:07:50,800 --> 00:07:53,280
so to make uh you know password stopping

244
00:07:53,280 --> 00:07:55,280
type attacks take longer

245
00:07:55,280 --> 00:07:57,599
and uh so there's uh quite a bit of

246
00:07:57,599 --> 00:07:59,199
flexibility there

247
00:07:59,199 --> 00:08:00,639
they've even got you know crypto

248
00:08:00,639 --> 00:08:02,319
algorithms that have been designed to to

249
00:08:02,319 --> 00:08:04,720
be resistant to quantum computing so

250
00:08:04,720 --> 00:08:06,319
even if constant computers become you

251
00:08:06,319 --> 00:08:07,680
know practical

252
00:08:07,680 --> 00:08:10,240
then you could potentially uh

253
00:08:10,240 --> 00:08:11,919
you know not have to worry about that as

254
00:08:11,919 --> 00:08:14,080
far as in your system it might be worth

255
00:08:14,080 --> 00:08:15,440
looking at if you're if you're building

256
00:08:15,440 --> 00:08:16,879
kind of a

257
00:08:16,879 --> 00:08:18,319
truss anchor that's going to be used for

258
00:08:18,319 --> 00:08:20,720
for quite some time

259
00:08:20,720 --> 00:08:22,160
and then there's also you know hardware

260
00:08:22,160 --> 00:08:24,240
cryptographic devices so there's devices

261
00:08:24,240 --> 00:08:25,919
that'll give you you know secure random

262
00:08:25,919 --> 00:08:28,160
numbers that'll and devices that will

263
00:08:28,160 --> 00:08:31,039
kind of come with pre-baked and keys

264
00:08:31,039 --> 00:08:32,799
that you know can't be extracted so the

265
00:08:32,799 --> 00:08:34,958
only way to encrypt or decrypt data is

266
00:08:34,958 --> 00:08:36,799
to pass it to this cryptographic device

267
00:08:36,799 --> 00:08:38,559
and it will

268
00:08:38,559 --> 00:08:40,640
give you back the corresponding

269
00:08:40,640 --> 00:08:42,799
ciphertext or plain text

270
00:08:42,799 --> 00:08:44,000
but it basically prevents you from

271
00:08:44,000 --> 00:08:45,760
losing the keys because they can never

272
00:08:45,760 --> 00:08:47,760
leave the device

273
00:08:47,760 --> 00:08:49,920
and you'll you can see microsoft i

274
00:08:49,920 --> 00:08:51,680
believe is making use of the trusted

275
00:08:51,680 --> 00:08:54,800
platform module on windows 11 to do some

276
00:08:54,800 --> 00:08:56,080
of this kind of stuff to have kind of

277
00:08:56,080 --> 00:09:00,080
that pressing root of the overall system

278
00:09:00,399 --> 00:09:01,839
and then you know so the only real

279
00:09:01,839 --> 00:09:03,440
limitation when it comes to kind of

280
00:09:03,440 --> 00:09:05,440
layering these things or other things

281
00:09:05,440 --> 00:09:07,040
that i just mentioned is performance so

282
00:09:07,040 --> 00:09:08,480
if you're concerned about you know how

283
00:09:08,480 --> 00:09:09,760
much your latency is going to be

284
00:09:09,760 --> 00:09:11,279
affected or what your bandwidth is going

285
00:09:11,279 --> 00:09:12,160
to be

286
00:09:12,160 --> 00:09:13,920
then that's you know the only thing

287
00:09:13,920 --> 00:09:15,200
really that you need to worry about but

288
00:09:15,200 --> 00:09:16,240
the good thing is that you know

289
00:09:16,240 --> 00:09:17,839
computers keeping faster and networks

290
00:09:17,839 --> 00:09:20,320
keep getting bigger so i think that you

291
00:09:20,320 --> 00:09:21,760
know you can pretty much wait a little

292
00:09:21,760 --> 00:09:23,360
bit and uh

293
00:09:23,360 --> 00:09:26,000
make up for that

294
00:09:26,080 --> 00:09:28,880
so the the problem really as a as the

295
00:09:28,880 --> 00:09:30,320
previous you know keynote speaker talked

296
00:09:30,320 --> 00:09:32,720
about is really cheese so you need to

297
00:09:32,720 --> 00:09:35,360
have severe cryptographic keys um if you

298
00:09:35,360 --> 00:09:37,040
look in the bottom left there we've got

299
00:09:37,040 --> 00:09:38,480
the the guy from the matrix the key

300
00:09:38,480 --> 00:09:40,000
maker so you've got to make sure that

301
00:09:40,000 --> 00:09:42,399
you're creating keys that are um

302
00:09:42,399 --> 00:09:44,320
that are secure and you've got you know

303
00:09:44,320 --> 00:09:45,920
secure source of randomness or whatever

304
00:09:45,920 --> 00:09:47,839
to generate those keys

305
00:09:47,839 --> 00:09:49,680
but it's more than just making the keys

306
00:09:49,680 --> 00:09:51,120
there's a whole life cycle that goes

307
00:09:51,120 --> 00:09:53,600
around keys so not just the generation

308
00:09:53,600 --> 00:09:55,440
that's shown here but also where you're

309
00:09:55,440 --> 00:09:57,360
storing them how do you distribute them

310
00:09:57,360 --> 00:09:59,200
rotating and expiration all the stuff

311
00:09:59,200 --> 00:09:59,920
that

312
00:09:59,920 --> 00:10:01,760
goes into it so you don't just need a

313
00:10:01,760 --> 00:10:05,839
key maker you really need the key master

314
00:10:07,519 --> 00:10:09,360
so

315
00:10:09,360 --> 00:10:11,120
this is just a bunch of quotes that from

316
00:10:11,120 --> 00:10:13,200
various people that have uh said what uh

317
00:10:13,200 --> 00:10:14,399
i think it's already been said today as

318
00:10:14,399 --> 00:10:16,480
well it's you know really key management

319
00:10:16,480 --> 00:10:17,920
is the hard part and

320
00:10:17,920 --> 00:10:19,120
my favorite one is the one in the middle

321
00:10:19,120 --> 00:10:20,800
here that you know cryptography turns

322
00:10:20,800 --> 00:10:22,399
hard security problems into hard key

323
00:10:22,399 --> 00:10:24,000
management problems

324
00:10:24,000 --> 00:10:26,079
so it so that's not to say that you know

325
00:10:26,079 --> 00:10:28,240
cryptography is is is worthless i mean

326
00:10:28,240 --> 00:10:29,680
it's certainly helping you it's giving

327
00:10:29,680 --> 00:10:32,800
you a a way of making the problem more

328
00:10:32,800 --> 00:10:35,200
manageable but it does you know not

329
00:10:35,200 --> 00:10:36,800
remove it entirely you've got to worry

330
00:10:36,800 --> 00:10:38,160
about you know how are you going to

331
00:10:38,160 --> 00:10:39,600
manage the keys that are associated with

332
00:10:39,600 --> 00:10:41,600
this encrypted data and protect them

333
00:10:41,600 --> 00:10:42,880
appropriately because that's where the

334
00:10:42,880 --> 00:10:46,839
attackers are going to go after

335
00:10:48,000 --> 00:10:51,120
and then just again as a primer just so

336
00:10:51,120 --> 00:10:53,120
uh you know there's two types of uh used

337
00:10:53,120 --> 00:10:55,200
use cases really for encryption so

338
00:10:55,200 --> 00:10:57,440
you've got the ability to have uh

339
00:10:57,440 --> 00:10:59,519
protection of data in transit so while

340
00:10:59,519 --> 00:11:02,720
it's traversing the network um this is a

341
00:11:02,720 --> 00:11:03,519
a

342
00:11:03,519 --> 00:11:04,880
simpler problem i suppose then what

343
00:11:04,880 --> 00:11:06,160
we'll talk about in a second because you

344
00:11:06,160 --> 00:11:07,600
know there's a short period of time

345
00:11:07,600 --> 00:11:09,279
between at least when the data is

346
00:11:09,279 --> 00:11:11,200
encrypted and decrypted or signed and

347
00:11:11,200 --> 00:11:12,320
verified

348
00:11:12,320 --> 00:11:15,200
at least that's the intention um so you

349
00:11:15,200 --> 00:11:17,920
can have um you know ephemeral keys

350
00:11:17,920 --> 00:11:19,680
maybe that you you use some sort of

351
00:11:19,680 --> 00:11:22,160
secure key exchange to come up with uh

352
00:11:22,160 --> 00:11:23,440
as long as you have you know some sort

353
00:11:23,440 --> 00:11:25,279
of trust anchor to make sure you're

354
00:11:25,279 --> 00:11:27,440
creating the keys with the right people

355
00:11:27,440 --> 00:11:28,480
um

356
00:11:28,480 --> 00:11:29,920
you know you do need to worry about you

357
00:11:29,920 --> 00:11:31,600
know what if somebody's gonna you know

358
00:11:31,600 --> 00:11:33,040
capture all your network traffic and

359
00:11:33,040 --> 00:11:35,200
then try to analyze it later so you want

360
00:11:35,200 --> 00:11:36,959
it to be resistant against attacks in

361
00:11:36,959 --> 00:11:38,959
the long term but as far as being able

362
00:11:38,959 --> 00:11:40,000
to decrypt the data you don't

363
00:11:40,000 --> 00:11:41,440
necessarily have to store the keys you

364
00:11:41,440 --> 00:11:43,600
can as long as you have them for the

365
00:11:43,600 --> 00:11:45,040
period of time the short period of time

366
00:11:45,040 --> 00:11:47,600
that you need to decrypt them

367
00:11:47,600 --> 00:11:49,920
and then the opposite is data so while

368
00:11:49,920 --> 00:11:52,160
data is stored you need to worry about

369
00:11:52,160 --> 00:11:54,880
you know not just encrypting the keys

370
00:11:54,880 --> 00:11:56,959
but because there's a long time between

371
00:11:56,959 --> 00:11:58,880
when the data is encrypted and then when

372
00:11:58,880 --> 00:12:00,639
it's going to be decrypted or signed and

373
00:12:00,639 --> 00:12:02,560
then verified uh

374
00:12:02,560 --> 00:12:04,800
really the decryption keys the storage

375
00:12:04,800 --> 00:12:06,399
and protection of those is very

376
00:12:06,399 --> 00:12:08,880
important so you've kind of shifted the

377
00:12:08,880 --> 00:12:10,959
problem from you know once the data is

378
00:12:10,959 --> 00:12:12,480
encrypted and signed and everything

379
00:12:12,480 --> 00:12:13,519
properly if you're using write

380
00:12:13,519 --> 00:12:15,440
algorithms all that you know you don't

381
00:12:15,440 --> 00:12:17,600
necessarily need to worry as much about

382
00:12:17,600 --> 00:12:20,880
uh confidentiality or integrity of the

383
00:12:20,880 --> 00:12:22,560
encrypted data but you do need to worry

384
00:12:22,560 --> 00:12:25,200
about that for the keys

385
00:12:25,200 --> 00:12:26,639
the thing is at least keys is a much

386
00:12:26,639 --> 00:12:28,079
smaller piece of data that you need to

387
00:12:28,079 --> 00:12:29,519
worry about than you know kind of

388
00:12:29,519 --> 00:12:31,360
arbitrarily long

389
00:12:31,360 --> 00:12:34,480
documents and other things

390
00:12:34,560 --> 00:12:37,519
so the the good news is that uh you know

391
00:12:37,519 --> 00:12:39,680
data in transit is really basically a

392
00:12:39,680 --> 00:12:40,959
solved problem

393
00:12:40,959 --> 00:12:43,200
um you know for

394
00:12:43,200 --> 00:12:44,959
uh the fact is that you know if you're

395
00:12:44,959 --> 00:12:46,399
communicating with some other system on

396
00:12:46,399 --> 00:12:48,800
the network um you generally are going

397
00:12:48,800 --> 00:12:50,959
to use you know tls or maybe one of its

398
00:12:50,959 --> 00:12:52,320
predecessors and there's a

399
00:12:52,320 --> 00:12:54,639
well-established mechanism for not only

400
00:12:54,639 --> 00:12:56,800
kind of establishing keys and using the

401
00:12:56,800 --> 00:12:58,720
right algorithms but also

402
00:12:58,720 --> 00:13:00,959
for a certificate authority system and

403
00:13:00,959 --> 00:13:03,360
how you can do that and you know web

404
00:13:03,360 --> 00:13:04,880
browsers have their built-in certificate

405
00:13:04,880 --> 00:13:06,720
authorities but if you don't care

406
00:13:06,720 --> 00:13:08,720
if you don't necessarily trust all of

407
00:13:08,720 --> 00:13:10,079
those certificate authorities then you

408
00:13:10,079 --> 00:13:12,399
can have your own kind of more minimal

409
00:13:12,399 --> 00:13:14,160
set of certificate authorities that

410
00:13:14,160 --> 00:13:16,000
you're going to trust and you know use

411
00:13:16,000 --> 00:13:17,600
as part of your system

412
00:13:17,600 --> 00:13:20,320
so so that's really the the good news

413
00:13:20,320 --> 00:13:22,079
and so now i'm going to kick it over to

414
00:13:22,079 --> 00:13:24,160
weiss to really talk about

415
00:13:24,160 --> 00:13:26,079
the rest of the problem

416
00:13:26,079 --> 00:13:27,200
thanks chuck

417
00:13:27,200 --> 00:13:29,200
so so on to the bad news um and i hate

418
00:13:29,200 --> 00:13:30,720
to be the bearer of bad news but i think

419
00:13:30,720 --> 00:13:32,480
most of the community has known sort of

420
00:13:32,480 --> 00:13:34,639
this core problem for a while and it's

421
00:13:34,639 --> 00:13:36,800
sort of now becoming more prominent

422
00:13:36,800 --> 00:13:38,240
as we have sort of more modern

423
00:13:38,240 --> 00:13:39,440
approaches

424
00:13:39,440 --> 00:13:41,440
but the key takeaway here is is most

425
00:13:41,440 --> 00:13:43,040
data arrest encryption solutions are

426
00:13:43,040 --> 00:13:45,440
ineffective against modern threats

427
00:13:45,440 --> 00:13:47,199
and that's primarily because they're

428
00:13:47,199 --> 00:13:49,920
built on what's referred to as a

429
00:13:49,920 --> 00:13:52,079
central implicit trust model

430
00:13:52,079 --> 00:13:54,560
the idea being that the server and the

431
00:13:54,560 --> 00:13:56,320
people who administer a server whether

432
00:13:56,320 --> 00:13:58,959
it's a database server or a file server

433
00:13:58,959 --> 00:14:01,360
have the ability to access data in the

434
00:14:01,360 --> 00:14:03,279
clear and plain text

435
00:14:03,279 --> 00:14:04,880
in order to perform their core job

436
00:14:04,880 --> 00:14:07,279
functions

437
00:14:09,920 --> 00:14:11,680
so as you as you can imagine this is

438
00:14:11,680 --> 00:14:12,800
something that we definitely want to

439
00:14:12,800 --> 00:14:15,279
tackle so moving on

440
00:14:15,279 --> 00:14:16,399
i'll cover a little bit about the

441
00:14:16,399 --> 00:14:18,959
central press and trust model

442
00:14:18,959 --> 00:14:20,720
again the central implicit trust model

443
00:14:20,720 --> 00:14:22,320
essentially suggests that key system

444
00:14:22,320 --> 00:14:24,000
processes and users have access to plain

445
00:14:24,000 --> 00:14:25,680
text data in order to perform a number

446
00:14:25,680 --> 00:14:27,120
of job functions it could be to

447
00:14:27,120 --> 00:14:28,959
administer a database server it could be

448
00:14:28,959 --> 00:14:30,639
for the database server to

449
00:14:30,639 --> 00:14:32,720
to operate so that you could perform it

450
00:14:32,720 --> 00:14:34,240
tour functions

451
00:14:34,240 --> 00:14:36,000
so this means that folks like database

452
00:14:36,000 --> 00:14:38,160
admins system admins

453
00:14:38,160 --> 00:14:40,560
database server itself the hypervisor

454
00:14:40,560 --> 00:14:41,920
host if you're running in a virtualized

455
00:14:41,920 --> 00:14:44,399
environment

456
00:14:44,480 --> 00:14:45,440
they're

457
00:14:45,440 --> 00:14:47,120
you're working with uh you know very

458
00:14:47,120 --> 00:14:48,639
prominent

459
00:14:48,639 --> 00:14:49,519
um

460
00:14:49,519 --> 00:14:51,440
and they're sort of helping you manage

461
00:14:51,440 --> 00:14:52,720
your infrastructure

462
00:14:52,720 --> 00:14:54,480
uh or you have cloud administrators on

463
00:14:54,480 --> 00:14:57,519
site with cloud uh

464
00:14:58,639 --> 00:15:00,160
or the cloud provider

465
00:15:00,160 --> 00:15:01,920
all these individuals have the ability

466
00:15:01,920 --> 00:15:04,639
to view data in the plain text

467
00:15:04,639 --> 00:15:06,399
that's a number of reasons which will

468
00:15:06,399 --> 00:15:10,160
unpack uh in the next few slides

469
00:15:10,399 --> 00:15:12,000
another thing i'll i'll mention uh

470
00:15:12,000 --> 00:15:14,560
before we move on to sort of that and

471
00:15:14,560 --> 00:15:17,680
some key examples of of how

472
00:15:17,680 --> 00:15:19,040
those are

473
00:15:19,040 --> 00:15:22,480
this this sort of flawed implicit model

474
00:15:22,480 --> 00:15:23,440
is that

475
00:15:23,440 --> 00:15:26,959
it happens to be the antithesis trouble

476
00:15:26,959 --> 00:15:29,040
for trust model the whole idea is

477
00:15:29,040 --> 00:15:31,199
that trust no one

478
00:15:31,199 --> 00:15:32,800
should be no implied trump system

479
00:15:32,800 --> 00:15:34,560
process or an individual

480
00:15:34,560 --> 00:15:36,399
um except the central and pursuit plus

481
00:15:36,399 --> 00:15:38,480
models built upon the exact opposite

482
00:15:38,480 --> 00:15:41,040
which is we trust everyone uh and allow

483
00:15:41,040 --> 00:15:42,959
them to be able to access data again in

484
00:15:42,959 --> 00:15:45,199
the plain text

485
00:15:45,199 --> 00:15:46,880
so you might be asking the obvious man

486
00:15:46,880 --> 00:15:48,320
well what's the problem with the central

487
00:15:48,320 --> 00:15:50,240
implicit trust model well consider two

488
00:15:50,240 --> 00:15:51,680
scenarios i'm gonna walk you through

489
00:15:51,680 --> 00:15:54,480
first is sort of logical vulnerabilities

490
00:15:54,480 --> 00:15:55,839
and then i'll walk you through a number

491
00:15:55,839 --> 00:15:57,920
of application specific vulnerabilities

492
00:15:57,920 --> 00:15:58,959
so starting with the logical

493
00:15:58,959 --> 00:16:00,560
vulnerabilities first

494
00:16:00,560 --> 00:16:01,920
if you have a security incident

495
00:16:01,920 --> 00:16:04,320
involving say as glenn mentioned earlier

496
00:16:04,320 --> 00:16:05,759
an insider threat

497
00:16:05,759 --> 00:16:07,920
say you have an employee with admin

498
00:16:07,920 --> 00:16:09,440
access

499
00:16:09,440 --> 00:16:11,440
the intention may not be nefarious but

500
00:16:11,440 --> 00:16:13,440
they have admin access to to a database

501
00:16:13,440 --> 00:16:15,360
or a data warehouse and they

502
00:16:15,360 --> 00:16:17,600
accidentally you know export the data

503
00:16:17,600 --> 00:16:19,759
into into a file share

504
00:16:19,759 --> 00:16:22,240
or maybe it's a nefarious intended

505
00:16:22,240 --> 00:16:24,320
individual they have access to the plain

506
00:16:24,320 --> 00:16:26,160
text by the sheer virtue of the job that

507
00:16:26,160 --> 00:16:28,079
they're performing as a database admirer

508
00:16:28,079 --> 00:16:30,560
data warehouse admin or a cloud admin

509
00:16:30,560 --> 00:16:32,320
consider the next scenario of a supply

510
00:16:32,320 --> 00:16:34,160
chain attack let's say a provider that

511
00:16:34,160 --> 00:16:35,519
you're working with whether it's a sas

512
00:16:35,519 --> 00:16:37,120
provider or a cloud provider where

513
00:16:37,120 --> 00:16:38,800
you're literally just hosting your data

514
00:16:38,800 --> 00:16:40,800
imagine that they suffer a breach and

515
00:16:40,800 --> 00:16:43,040
they're compromised for a period of time

516
00:16:43,040 --> 00:16:44,000
and

517
00:16:44,000 --> 00:16:46,240
that compromised environment is now

518
00:16:46,240 --> 00:16:48,240
exposing your data

519
00:16:48,240 --> 00:16:50,399
and the attackers who have compromised

520
00:16:50,399 --> 00:16:53,120
the cloud provider then retrieve cloud

521
00:16:53,120 --> 00:16:55,199
administrative credentials they have the

522
00:16:55,199 --> 00:16:57,600
ability to view the data in plain text

523
00:16:57,600 --> 00:16:59,199
and then lastly advanced attackers your

524
00:16:59,199 --> 00:17:01,360
data theft um generally you're talking

525
00:17:01,360 --> 00:17:03,360
about sort of nation-state attackers or

526
00:17:03,360 --> 00:17:05,039
fairly more sophisticated attackers that

527
00:17:05,039 --> 00:17:07,359
have the time resources to be able to to

528
00:17:07,359 --> 00:17:08,720
compromise the network and ultimately

529
00:17:08,720 --> 00:17:09,679
systems

530
00:17:09,679 --> 00:17:11,280
one of the first things that they do is

531
00:17:11,280 --> 00:17:12,480
they seek out credentials through

532
00:17:12,480 --> 00:17:14,480
credential harvesting and once they have

533
00:17:14,480 --> 00:17:16,160
those credentials for the databases or

534
00:17:16,160 --> 00:17:18,079
the data warehouses or wherever the data

535
00:17:18,079 --> 00:17:20,160
of value may be stored they then use

536
00:17:20,160 --> 00:17:21,679
those authorized credentials to be able

537
00:17:21,679 --> 00:17:23,359
to access data

538
00:17:23,359 --> 00:17:25,280
they usually encrypt the data with a key

539
00:17:25,280 --> 00:17:27,039
that you can't access and then they

540
00:17:27,039 --> 00:17:28,720
exfiltrate it and we sort of know how

541
00:17:28,720 --> 00:17:30,880
that story ends the key theme here is

542
00:17:30,880 --> 00:17:33,200
that you know all these uh sort of

543
00:17:33,200 --> 00:17:35,679
attacks are enabled by the fact that the

544
00:17:35,679 --> 00:17:37,360
underlying systems that we rely on

545
00:17:37,360 --> 00:17:40,240
heavily to ensure that data is encrypted

546
00:17:40,240 --> 00:17:42,240
don't actually work and are not

547
00:17:42,240 --> 00:17:43,679
effective against these types of more

548
00:17:43,679 --> 00:17:45,200
modern attacks

549
00:17:45,200 --> 00:17:46,880
now i'll spend a few minutes

550
00:17:46,880 --> 00:17:48,640
covering application vulnerabilities and

551
00:17:48,640 --> 00:17:50,720
i'll tie them to the various oauths top

552
00:17:50,720 --> 00:17:51,679
10

553
00:17:51,679 --> 00:17:52,799
list items

554
00:17:52,799 --> 00:17:54,559
the first one is access control right an

555
00:17:54,559 --> 00:17:56,400
attacker can modify an access control

556
00:17:56,400 --> 00:17:58,480
check or metadata to get access to

557
00:17:58,480 --> 00:17:59,840
privileged accounts and that's actually

558
00:17:59,840 --> 00:18:01,600
the number one thing on the list

559
00:18:01,600 --> 00:18:03,039
and i'll actually give you a real world

560
00:18:03,039 --> 00:18:04,880
example of where this occurred in a

561
00:18:04,880 --> 00:18:06,720
couple minutes but that's that's a very

562
00:18:06,720 --> 00:18:08,400
very prominent one

563
00:18:08,400 --> 00:18:10,799
the second area is around authentication

564
00:18:10,799 --> 00:18:12,240
an attacker can perform a credential

565
00:18:12,240 --> 00:18:13,840
stuffing attack chuck mentioned that a

566
00:18:13,840 --> 00:18:15,280
few minutes ago as well

567
00:18:15,280 --> 00:18:16,880
taking access to privileged accounts and

568
00:18:16,880 --> 00:18:19,440
data very similar to some of the logical

569
00:18:19,440 --> 00:18:20,559
vulnerabilities that i mentioned in my

570
00:18:20,559 --> 00:18:22,480
previous slide um they're using some

571
00:18:22,480 --> 00:18:23,760
sort of vulnerability whether it's

572
00:18:23,760 --> 00:18:25,760
literally theft or credentials or

573
00:18:25,760 --> 00:18:27,280
exploiting a vulnerability in the

574
00:18:27,280 --> 00:18:29,039
application software itself or in the

575
00:18:29,039 --> 00:18:30,559
structure

576
00:18:30,559 --> 00:18:32,799
and that obviously ties to the

577
00:18:32,799 --> 00:18:34,960
listener number seven of the offset 10

578
00:18:34,960 --> 00:18:36,720
list identification and authentication

579
00:18:36,720 --> 00:18:38,000
failures

580
00:18:38,000 --> 00:18:39,919
and then lastly the other one that i

581
00:18:39,919 --> 00:18:42,480
want to highlight is injection um and

582
00:18:42,480 --> 00:18:44,400
sql injection is

583
00:18:44,400 --> 00:18:46,559
i think like for the last 15 or 20 years

584
00:18:46,559 --> 00:18:48,559
like the problem that as obvious as it

585
00:18:48,559 --> 00:18:49,679
is to solve

586
00:18:49,679 --> 00:18:51,280
um as much as we as a community have

587
00:18:51,280 --> 00:18:52,960
been telling people like they just keep

588
00:18:52,960 --> 00:18:55,200
happening um but this is the use of a

589
00:18:55,200 --> 00:18:57,200
blind trust application framework as an

590
00:18:57,200 --> 00:18:58,160
example

591
00:18:58,160 --> 00:19:00,480
uh that an attacker can exploit to take

592
00:19:00,480 --> 00:19:02,799
a a vulnerable query right someone that

593
00:19:02,799 --> 00:19:04,240
all their attentions when they develop

594
00:19:04,240 --> 00:19:05,280
the query

595
00:19:05,280 --> 00:19:08,160
but unknowingly there's a vulnerability

596
00:19:08,160 --> 00:19:09,919
to be able to form a sql ejection attack

597
00:19:09,919 --> 00:19:11,120
and as chuck mentioned if you missed

598
00:19:11,120 --> 00:19:13,760
both extract data from a database even

599
00:19:13,760 --> 00:19:15,840
though that database has encryption in

600
00:19:15,840 --> 00:19:16,640
it

601
00:19:16,640 --> 00:19:18,240
and that's obviously item number three

602
00:19:18,240 --> 00:19:19,360
on the list

603
00:19:19,360 --> 00:19:20,799
so moving on from

604
00:19:20,799 --> 00:19:23,039
really side i want to give you two real

605
00:19:23,039 --> 00:19:25,520
world examples um and as you can imagine

606
00:19:25,520 --> 00:19:26,799
we could probably come up with hundreds

607
00:19:26,799 --> 00:19:29,039
of examples um

608
00:19:29,039 --> 00:19:30,559
where you know

609
00:19:30,559 --> 00:19:33,360
either vulnerable applications

610
00:19:33,360 --> 00:19:35,440
or there's logical vulnerability

611
00:19:35,440 --> 00:19:38,320
the first is i'll be talking about is

612
00:19:38,320 --> 00:19:40,640
marriott um and this is the breach at

613
00:19:40,640 --> 00:19:41,520
the

614
00:19:41,520 --> 00:19:43,679
18 um if you recall there was also

615
00:19:43,679 --> 00:19:45,679
another breach in 2020 but

616
00:19:45,679 --> 00:19:47,520
a team breach first

617
00:19:47,520 --> 00:19:50,720
they acquired a another hotel

618
00:19:50,720 --> 00:19:52,320
which apparently hadn't been compromised

619
00:19:52,320 --> 00:19:55,520
back in 2016 so it took them almost two

620
00:19:55,520 --> 00:19:56,880
full years

621
00:19:56,880 --> 00:19:59,120
to identify that

622
00:19:59,120 --> 00:20:01,280
might start off as a spearfishing

623
00:20:01,280 --> 00:20:03,039
uh attack um

624
00:20:03,039 --> 00:20:04,720
enabled them compromising a number of

625
00:20:04,720 --> 00:20:07,679
internal systems

626
00:20:07,679 --> 00:20:08,960
they performed a bunch of credential

627
00:20:08,960 --> 00:20:11,200
harvesting identified

628
00:20:11,200 --> 00:20:14,400
access admin level access

629
00:20:14,400 --> 00:20:16,720
to the that's poorly sensitive

630
00:20:16,720 --> 00:20:19,520
information about folks yes sorry to uh

631
00:20:19,520 --> 00:20:21,760
interrupt we have a tiny bit of lagging

632
00:20:21,760 --> 00:20:24,159
could you maybe disable the video so we

633
00:20:24,159 --> 00:20:27,280
hopefully have a better audio quality

634
00:20:27,280 --> 00:20:30,320
sure sure all right thanks

635
00:20:30,320 --> 00:20:32,240
yeah sure apologies for that san diego

636
00:20:32,240 --> 00:20:33,760
internet uh usually really good but

637
00:20:33,760 --> 00:20:35,120
today doesn't seem like it wants to

638
00:20:35,120 --> 00:20:37,440
cooperate anyhow um moving back i'll

639
00:20:37,440 --> 00:20:40,880
quickly run you the marriott use case

640
00:20:40,880 --> 00:20:42,799
um again

641
00:20:42,799 --> 00:20:46,159
so marriott again 2018 uh compromised

642
00:20:46,159 --> 00:20:48,480
via a spearfishing attack which then led

643
00:20:48,480 --> 00:20:49,919
to a lateral movement within the

644
00:20:49,919 --> 00:20:51,440
environment ultimately credential

645
00:20:51,440 --> 00:20:53,039
harvesting

646
00:20:53,039 --> 00:20:54,400
and then they got access to database

647
00:20:54,400 --> 00:20:56,080
admin credentials which allowed them to

648
00:20:56,080 --> 00:20:57,919
actually trade they're saying up to 500

649
00:20:57,919 --> 00:20:59,600
million guest records which includes

650
00:20:59,600 --> 00:21:01,840
credit cards personal name

651
00:21:01,840 --> 00:21:04,159
information

652
00:21:04,159 --> 00:21:06,480
addresses and even some cases even

653
00:21:06,480 --> 00:21:08,480
passport information and images of

654
00:21:08,480 --> 00:21:10,320
password data which as you can imagine i

655
00:21:10,320 --> 00:21:12,400
wouldn't want anyone else's hands

656
00:21:12,400 --> 00:21:14,159
and then again in 2020 they had a much

657
00:21:14,159 --> 00:21:16,159
smaller scale breach about five million

658
00:21:16,159 --> 00:21:18,159
a record stolen but the same sort of

659
00:21:18,159 --> 00:21:19,919
process so you know when you think about

660
00:21:19,919 --> 00:21:22,720
of a company the sheer size of marriott

661
00:21:22,720 --> 00:21:24,480
with the amount of capital they have to

662
00:21:24,480 --> 00:21:26,400
invest in security these types of

663
00:21:26,400 --> 00:21:27,600
attacks can happen even for

664
00:21:27,600 --> 00:21:29,760
organizations that are that well funded

665
00:21:29,760 --> 00:21:31,360
and then the application vulnerabilities

666
00:21:31,360 --> 00:21:32,240
side

667
00:21:32,240 --> 00:21:34,400
i wanted to highlight a sql ejection

668
00:21:34,400 --> 00:21:36,960
attack that occurred several years ago

669
00:21:36,960 --> 00:21:38,640
impacting 711

670
00:21:38,640 --> 00:21:40,559
where attackers

671
00:21:40,559 --> 00:21:42,400
performed a sql injection attack against

672
00:21:42,400 --> 00:21:45,200
a publicly facing web server

673
00:21:45,200 --> 00:21:46,720
ultimately that enabled them to get

674
00:21:46,720 --> 00:21:49,520
access to a sensitive database

675
00:21:49,520 --> 00:21:51,679
that housed over 130 million credit card

676
00:21:51,679 --> 00:21:53,440
numbers which are stolen

677
00:21:53,440 --> 00:21:55,200
the good news in this situation is that

678
00:21:55,200 --> 00:21:56,720
the the attacker was ultimately

679
00:21:56,720 --> 00:21:59,280
identified and then ended up i think

680
00:21:59,280 --> 00:22:00,640
they're still in jail i think a 20-year

681
00:22:00,640 --> 00:22:03,760
sentence but that occurred back in 2010

682
00:22:03,760 --> 00:22:05,600
uh and then more recently

683
00:22:05,600 --> 00:22:08,559
not mentioned on this slide but in 2019

684
00:22:08,559 --> 00:22:11,440
7-eleven in japan actually

685
00:22:11,440 --> 00:22:14,320
took to market a pay app

686
00:22:14,320 --> 00:22:16,640
and they had a pretty critical flaw in

687
00:22:16,640 --> 00:22:19,520
the design of the application where

688
00:22:19,520 --> 00:22:21,919
passer resets didn't require any sort of

689
00:22:21,919 --> 00:22:23,280
authentication

690
00:22:23,280 --> 00:22:24,960
so you could literally open up the

691
00:22:24,960 --> 00:22:29,360
application put in an email address and

692
00:22:29,360 --> 00:22:31,520
asked for your password to be reset and

693
00:22:31,520 --> 00:22:33,600
be able to right there and in the menu

694
00:22:33,600 --> 00:22:35,520
window be able to reset the password

695
00:22:35,520 --> 00:22:37,440
which was a massive flaw

696
00:22:37,440 --> 00:22:38,960
for obvious reasons

697
00:22:38,960 --> 00:22:41,679
over over six hundred thousand dollars

698
00:22:41,679 --> 00:22:44,400
of consumer uh cash was stolen in that

699
00:22:44,400 --> 00:22:46,240
event and they ended up shutting down

700
00:22:46,240 --> 00:22:47,520
the application and never uh

701
00:22:47,520 --> 00:22:49,120
reintroducing it to the market it's a

702
00:22:49,120 --> 00:22:51,360
pretty catastrophic impact both to you

703
00:22:51,360 --> 00:22:52,640
know the business model that they want

704
00:22:52,640 --> 00:22:54,480
to approach and also all the poor

705
00:22:54,480 --> 00:22:57,360
consumers are affected

706
00:22:57,360 --> 00:22:59,039
so sort of in summary when you think

707
00:22:59,039 --> 00:23:01,120
about the traditional encryption

708
00:23:01,120 --> 00:23:04,480
controls you know we've been sort of

709
00:23:04,480 --> 00:23:06,480
asked to use over the last 10 or 15

710
00:23:06,480 --> 00:23:08,559
years like full disk encryption

711
00:23:08,559 --> 00:23:10,480
transparency encryption

712
00:23:10,480 --> 00:23:12,159
database encryption cloud storage

713
00:23:12,159 --> 00:23:13,679
encryption you know popular things like

714
00:23:13,679 --> 00:23:15,440
s3 encryption or blob encryption which

715
00:23:15,440 --> 00:23:17,120
nowadays have been simplified to

716
00:23:17,120 --> 00:23:18,880
literally checking a box off in an admin

717
00:23:18,880 --> 00:23:21,440
panel or file sharing encryption

718
00:23:21,440 --> 00:23:22,480
they're not going to help you in these

719
00:23:22,480 --> 00:23:24,960
situations because they're designed for

720
00:23:24,960 --> 00:23:27,120
very different types of threats and

721
00:23:27,120 --> 00:23:29,280
frankly threats that are that are dated

722
00:23:29,280 --> 00:23:30,080
um

723
00:23:30,080 --> 00:23:32,080
so in most cases we're sort of on our

724
00:23:32,080 --> 00:23:33,120
own

725
00:23:33,120 --> 00:23:34,000
but

726
00:23:34,000 --> 00:23:36,799
that being said they can protect you if

727
00:23:36,799 --> 00:23:39,760
someone wants to steal your your laptop

728
00:23:39,760 --> 00:23:41,120
or if you're running an old commodore

729
00:23:41,120 --> 00:23:42,240
and they want to walk into your house

730
00:23:42,240 --> 00:23:43,840
and steal that they can definitely

731
00:23:43,840 --> 00:23:45,360
protect against that

732
00:23:45,360 --> 00:23:48,080
um or you know literally walking into a

733
00:23:48,080 --> 00:23:50,400
data center um whether it's one that you

734
00:23:50,400 --> 00:23:51,840
operate or that a cloud provider

735
00:23:51,840 --> 00:23:53,279
operates for you and stealing you know

736
00:23:53,279 --> 00:23:55,279
servers out of racks which is a highly

737
00:23:55,279 --> 00:23:56,880
unlikely scenario

738
00:23:56,880 --> 00:23:58,240
the other thing is and this was

739
00:23:58,240 --> 00:24:00,000
mentioned earlier i think anastasia

740
00:24:00,000 --> 00:24:01,039
covered it maybe glenn you may have

741
00:24:01,039 --> 00:24:02,320
touched on it

742
00:24:02,320 --> 00:24:03,600
you know a lot of these encryption

743
00:24:03,600 --> 00:24:05,600
controls do help you provide literally

744
00:24:05,600 --> 00:24:06,960
the checkbox

745
00:24:06,960 --> 00:24:08,400
so i think as an industry from an

746
00:24:08,400 --> 00:24:09,919
abstract point of view there's

747
00:24:09,919 --> 00:24:11,279
definitely approaches we can take to

748
00:24:11,279 --> 00:24:13,520
sort of mitigate the risk um and have

749
00:24:13,520 --> 00:24:15,840
more robust solutions in place

750
00:24:15,840 --> 00:24:17,039
but one of the areas that i'd like to

751
00:24:17,039 --> 00:24:18,320
see sort of more improvement is on the

752
00:24:18,320 --> 00:24:19,679
compliance side

753
00:24:19,679 --> 00:24:22,960
whether things like gdpr or hipaa or pci

754
00:24:22,960 --> 00:24:25,039
that those sort of bodies and frameworks

755
00:24:25,039 --> 00:24:27,679
start to take encryption and drill down

756
00:24:27,679 --> 00:24:29,360
into controls that are more effective

757
00:24:29,360 --> 00:24:31,120
versus what i refer to as checkbox

758
00:24:31,120 --> 00:24:32,880
solutions like the ones i mentioned on

759
00:24:32,880 --> 00:24:35,120
the slide here

760
00:24:35,120 --> 00:24:36,720
so now i want to head over back to chuck

761
00:24:36,720 --> 00:24:39,360
so he can talk about the better approach

762
00:24:39,360 --> 00:24:42,760
over to you chuck

763
00:24:47,840 --> 00:24:50,559
sorry about that yeah thank you weiss um

764
00:24:50,559 --> 00:24:51,679
yeah and i definitely agree with what

765
00:24:51,679 --> 00:24:53,039
you said which is that you know i would

766
00:24:53,039 --> 00:24:54,720
love to see the audit and compliance

767
00:24:54,720 --> 00:24:57,279
folks get more granular and kind of when

768
00:24:57,279 --> 00:24:59,120
they look at encryption because it

769
00:24:59,120 --> 00:25:01,520
really is currently it's basically do

770
00:25:01,520 --> 00:25:03,120
you encrypt your data or not that's

771
00:25:03,120 --> 00:25:04,559
really seems to be the level of

772
00:25:04,559 --> 00:25:06,080
questioning that they have

773
00:25:06,080 --> 00:25:07,760
but the reality as i mentioned earlier

774
00:25:07,760 --> 00:25:08,880
is you know once you've encrypted the

775
00:25:08,880 --> 00:25:10,480
data then all you've done is shift the

776
00:25:10,480 --> 00:25:13,039
problem so now it's okay the data is

777
00:25:13,039 --> 00:25:14,640
encrypted but how are you protecting the

778
00:25:14,640 --> 00:25:15,600
keys

779
00:25:15,600 --> 00:25:17,679
and so that's uh really what we would

780
00:25:17,679 --> 00:25:19,120
like to see you know kind of as an

781
00:25:19,120 --> 00:25:22,879
industry to move towards

782
00:25:23,840 --> 00:25:26,080
or or sometimes you also get uh people

783
00:25:26,080 --> 00:25:27,039
that maybe don't understand the

784
00:25:27,039 --> 00:25:29,120
difference between um

785
00:25:29,120 --> 00:25:31,520
at rest and in transit

786
00:25:31,520 --> 00:25:33,440
encryption so they would say oh our data

787
00:25:33,440 --> 00:25:35,679
is encrypted because we use tls and well

788
00:25:35,679 --> 00:25:37,200
that you know protect against some types

789
00:25:37,200 --> 00:25:38,880
of attacks but certainly not all of them

790
00:25:38,880 --> 00:25:42,760
as we talked about earlier

791
00:25:43,039 --> 00:25:44,080
so

792
00:25:44,080 --> 00:25:46,159
really what what we should be doing is

793
00:25:46,159 --> 00:25:48,080
is encrypting data you know higher in

794
00:25:48,080 --> 00:25:49,679
the stack so

795
00:25:49,679 --> 00:25:50,559
um

796
00:25:50,559 --> 00:25:52,080
i'm hoping you guys can see my my

797
00:25:52,080 --> 00:25:53,440
pointer but if not i'll just talk

798
00:25:53,440 --> 00:25:55,360
through this uh thing on the right where

799
00:25:55,360 --> 00:25:56,720
it's like you know this is kind of the

800
00:25:56,720 --> 00:25:57,760
you think about kind of like an

801
00:25:57,760 --> 00:25:59,279
application stack so you've got you know

802
00:25:59,279 --> 00:26:01,760
bulk storage at the bottom

803
00:26:01,760 --> 00:26:03,440
that's where the database stores its

804
00:26:03,440 --> 00:26:05,840
files and then you've got a web server

805
00:26:05,840 --> 00:26:07,120
up here that talks to the database

806
00:26:07,120 --> 00:26:09,279
server and then you've got you know some

807
00:26:09,279 --> 00:26:10,720
sort of a client application whether

808
00:26:10,720 --> 00:26:12,240
it's a mobile app or it could be a

809
00:26:12,240 --> 00:26:14,960
javascript you know type client

810
00:26:14,960 --> 00:26:17,039
on a web page and then there's a user

811
00:26:17,039 --> 00:26:19,520
that's you know using all this stuff so

812
00:26:19,520 --> 00:26:21,520
if what you want to be doing if possible

813
00:26:21,520 --> 00:26:22,960
is you want to have you know encryption

814
00:26:22,960 --> 00:26:24,480
happening as high in the stack as

815
00:26:24,480 --> 00:26:26,240
possible because what that's going to

816
00:26:26,240 --> 00:26:27,360
give you

817
00:26:27,360 --> 00:26:29,600
is that you know fewer devices and that

818
00:26:29,600 --> 00:26:31,679
are going to see the data so i mean you

819
00:26:31,679 --> 00:26:33,919
think in the extreme case if you know

820
00:26:33,919 --> 00:26:36,240
if the if the human you know says okay

821
00:26:36,240 --> 00:26:37,679
well i'm going to use some sort of code

822
00:26:37,679 --> 00:26:39,279
word instead of my

823
00:26:39,279 --> 00:26:41,039
you know

824
00:26:41,039 --> 00:26:42,240
social security number that i'm going to

825
00:26:42,240 --> 00:26:43,919
put in i'm going to put in a fake number

826
00:26:43,919 --> 00:26:45,279
then obviously then you know the

827
00:26:45,279 --> 00:26:46,559
encryption is happening all the way in

828
00:26:46,559 --> 00:26:48,880
his head or her head and therefore none

829
00:26:48,880 --> 00:26:50,000
of these systems are going to see the

830
00:26:50,000 --> 00:26:51,120
real data

831
00:26:51,120 --> 00:26:52,799
but you know that's not practical unless

832
00:26:52,799 --> 00:26:54,640
you're you know one of the navajo code

833
00:26:54,640 --> 00:26:57,039
talkers maybe from world war ii

834
00:26:57,039 --> 00:26:58,240
you know most of the time you're going

835
00:26:58,240 --> 00:26:59,760
to say okay we need you know an

836
00:26:59,760 --> 00:27:01,919
automated system to do the encryption

837
00:27:01,919 --> 00:27:03,200
but we want to be happening you know

838
00:27:03,200 --> 00:27:05,679
here at the javascript or client with a

839
00:27:05,679 --> 00:27:06,799
mobile app

840
00:27:06,799 --> 00:27:09,279
and the reality you know is that the

841
00:27:09,279 --> 00:27:11,200
more transparent the encryption is and

842
00:27:11,200 --> 00:27:13,039
the decryption is then really the the

843
00:27:13,039 --> 00:27:15,200
more exposure you have so you know down

844
00:27:15,200 --> 00:27:17,039
here at the bottom if you know stuff is

845
00:27:17,039 --> 00:27:19,520
encrypted at the you know bulk storage

846
00:27:19,520 --> 00:27:20,799
type layer

847
00:27:20,799 --> 00:27:22,559
then you know it's only going to be kind

848
00:27:22,559 --> 00:27:24,640
of controlled by the keys that are used

849
00:27:24,640 --> 00:27:26,320
to uh

850
00:27:26,320 --> 00:27:28,080
you know as far as who can access that

851
00:27:28,080 --> 00:27:29,840
so that you know the anything that's on

852
00:27:29,840 --> 00:27:31,039
the database server is going to be able

853
00:27:31,039 --> 00:27:32,399
to access that bulk encryption because

854
00:27:32,399 --> 00:27:34,080
it needs to be able to access its files

855
00:27:34,080 --> 00:27:35,600
but then there'd be other administrators

856
00:27:35,600 --> 00:27:37,200
and stuff that can directly access the

857
00:27:37,200 --> 00:27:40,159
bulk storage uh for things like backups

858
00:27:40,159 --> 00:27:41,600
um you have to wonder if you have your

859
00:27:41,600 --> 00:27:43,200
store if you're encrypting at that layer

860
00:27:43,200 --> 00:27:45,120
uh and so the files themselves are not

861
00:27:45,120 --> 00:27:46,480
encrypted then probably your backups are

862
00:27:46,480 --> 00:27:48,159
not encrypted or at least not encrypted

863
00:27:48,159 --> 00:27:49,520
in the same way you might be separately

864
00:27:49,520 --> 00:27:51,440
encrypting your backups so there's you

865
00:27:51,440 --> 00:27:53,440
know kind of more headaches there

866
00:27:53,440 --> 00:27:55,840
um you know so the next layer up is at

867
00:27:55,840 --> 00:27:57,600
the database server layer where it's

868
00:27:57,600 --> 00:27:59,039
like okay that's where you have you know

869
00:27:59,039 --> 00:28:00,640
what's called sometimes transparent data

870
00:28:00,640 --> 00:28:03,200
encryption but for some databases or any

871
00:28:03,200 --> 00:28:04,640
other sort of kind of database server

872
00:28:04,640 --> 00:28:06,320
type encryption

873
00:28:06,320 --> 00:28:08,080
and that's a little bit better because

874
00:28:08,080 --> 00:28:09,679
there's you know fewer people that have

875
00:28:09,679 --> 00:28:11,279
access to the database server that have

876
00:28:11,279 --> 00:28:12,720
access to both the database server and

877
00:28:12,720 --> 00:28:14,720
the volkswagen system and backups and

878
00:28:14,720 --> 00:28:16,480
stuff but there's still quite a few

879
00:28:16,480 --> 00:28:18,640
people that have access to this and and

880
00:28:18,640 --> 00:28:20,000
in particular you know the web

881
00:28:20,000 --> 00:28:21,919
application server has access to all of

882
00:28:21,919 --> 00:28:24,240
the data on the database server and

883
00:28:24,240 --> 00:28:26,159
there's no way that you know whatever is

884
00:28:26,159 --> 00:28:27,760
controlling this stuff it's going to be

885
00:28:27,760 --> 00:28:31,120
able to know you know who is the um

886
00:28:31,120 --> 00:28:32,720
ultimately the user that's trying to

887
00:28:32,720 --> 00:28:34,720
access this data and you know what data

888
00:28:34,720 --> 00:28:36,799
they should have access to so if you're

889
00:28:36,799 --> 00:28:38,559
you know our goal is to try to segregate

890
00:28:38,559 --> 00:28:40,559
this data more at the database server

891
00:28:40,559 --> 00:28:43,679
layer so that um

892
00:28:43,679 --> 00:28:44,960
so that things that you know are

893
00:28:44,960 --> 00:28:46,320
connecting to the database directly

894
00:28:46,320 --> 00:28:47,520
you're not going to have the keys they

895
00:28:47,520 --> 00:28:48,880
need to be able to decrypt all of the

896
00:28:48,880 --> 00:28:51,200
data

897
00:28:51,919 --> 00:28:54,559
so this is kind of a picture of that so

898
00:28:54,559 --> 00:28:55,919
what what you end up with here is that

899
00:28:55,919 --> 00:28:57,600
you'll have some sort of a key server

900
00:28:57,600 --> 00:28:58,720
you know so this could be something you

901
00:28:58,720 --> 00:29:00,559
build yourself or you know some of the

902
00:29:00,559 --> 00:29:02,480
cloud service providers have those sorts

903
00:29:02,480 --> 00:29:03,440
of things

904
00:29:03,440 --> 00:29:04,880
other commercial vendors have them as

905
00:29:04,880 --> 00:29:05,679
well

906
00:29:05,679 --> 00:29:08,240
that is going to you know interface with

907
00:29:08,240 --> 00:29:09,919
the user so whether directly or

908
00:29:09,919 --> 00:29:11,840
indirectly maybe through the client or

909
00:29:11,840 --> 00:29:13,200
something there will be you know some

910
00:29:13,200 --> 00:29:14,799
authorization and authentication that

911
00:29:14,799 --> 00:29:16,880
happens so that they'll be able to the

912
00:29:16,880 --> 00:29:18,640
key server will know okay this is the

913
00:29:18,640 --> 00:29:20,720
user that's trying to access the data

914
00:29:20,720 --> 00:29:22,240
and these are the therefore these are

915
00:29:22,240 --> 00:29:24,159
the keys that i'm going to give

916
00:29:24,159 --> 00:29:25,919
um you know that are appropriate for

917
00:29:25,919 --> 00:29:27,760
that user that can be used and so

918
00:29:27,760 --> 00:29:29,200
ideally that would be happening here on

919
00:29:29,200 --> 00:29:30,399
the client

920
00:29:30,399 --> 00:29:32,080
but it could potentially happen at the

921
00:29:32,080 --> 00:29:34,240
web application server or

922
00:29:34,240 --> 00:29:35,600
in some limited cases it could even

923
00:29:35,600 --> 00:29:37,679
happen as a database server if you've

924
00:29:37,679 --> 00:29:41,039
got um kind of client-side encryption

925
00:29:41,039 --> 00:29:42,559
client-aware encryption i guess that's

926
00:29:42,559 --> 00:29:44,399
happening there uh where it passes the

927
00:29:44,399 --> 00:29:48,479
keys through uh that some databases use

928
00:29:49,279 --> 00:29:50,960
yeah so the idea is that you know we're

929
00:29:50,960 --> 00:29:52,559
separating the data through the control

930
00:29:52,559 --> 00:29:54,000
of encryption keys and so you could

931
00:29:54,000 --> 00:29:55,440
almost think of it kind of like a

932
00:29:55,440 --> 00:29:57,200
two-system control

933
00:29:57,200 --> 00:29:59,600
where you know the the application

934
00:29:59,600 --> 00:30:01,840
server itself is got you know some

935
00:30:01,840 --> 00:30:03,520
access controls that's going to say okay

936
00:30:03,520 --> 00:30:05,120
this user is supposed to be able to

937
00:30:05,120 --> 00:30:06,840
access you know this type of data on the

938
00:30:06,840 --> 00:30:09,440
system but then you know that's not

939
00:30:09,440 --> 00:30:10,960
sufficient they also need to have the

940
00:30:10,960 --> 00:30:13,200
right keys that go with it so

941
00:30:13,200 --> 00:30:14,080
um

942
00:30:14,080 --> 00:30:15,760
now you know what you do end up doing

943
00:30:15,760 --> 00:30:17,360
potentially is you know implementing you

944
00:30:17,360 --> 00:30:19,039
know authentication and authorization

945
00:30:19,039 --> 00:30:20,159
logic

946
00:30:20,159 --> 00:30:21,919
on both on both sides but that's kind of

947
00:30:21,919 --> 00:30:23,520
the point here is that we want to be

948
00:30:23,520 --> 00:30:25,919
more granular and get more specific so

949
00:30:25,919 --> 00:30:28,320
the idea is that even if there's a sql

950
00:30:28,320 --> 00:30:30,240
injection for example in the application

951
00:30:30,240 --> 00:30:32,399
that's going to basically bypass this

952
00:30:32,399 --> 00:30:34,480
level of authentication check all you're

953
00:30:34,480 --> 00:30:36,880
going to get access to is a bunch of

954
00:30:36,880 --> 00:30:39,360
encrypted data and the only keys you're

955
00:30:39,360 --> 00:30:40,559
going to have to decrypt any of that

956
00:30:40,559 --> 00:30:42,159
data is going to be the keys that are

957
00:30:42,159 --> 00:30:43,760
associated with that user already so

958
00:30:43,760 --> 00:30:45,039
it's the data that they can already

959
00:30:45,039 --> 00:30:47,440
access

960
00:30:48,480 --> 00:30:50,320
so you know as i mentioned this you know

961
00:30:50,320 --> 00:30:52,159
protect you against you know not just

962
00:30:52,159 --> 00:30:53,840
sql injection but also maybe

963
00:30:53,840 --> 00:30:55,760
authentication or authorization bypass

964
00:30:55,760 --> 00:30:57,760
types of attacks what we used to call

965
00:30:57,760 --> 00:30:59,840
into trigger object references you know

966
00:30:59,840 --> 00:31:01,519
various types of application layer

967
00:31:01,519 --> 00:31:03,840
attacks and logical attacks as well as

968
00:31:03,840 --> 00:31:06,799
his wife talked about earlier

969
00:31:06,799 --> 00:31:08,559
and then it also gave you some defense

970
00:31:08,559 --> 00:31:10,399
and depth so you've got a

971
00:31:10,399 --> 00:31:12,480
then uh you've got again fewer people

972
00:31:12,480 --> 00:31:14,480
that have access to the keys and

973
00:31:14,480 --> 00:31:16,320
hopefully you know basically nobody has

974
00:31:16,320 --> 00:31:18,799
access to all of the keys so your your

975
00:31:18,799 --> 00:31:21,120
database server admins your web

976
00:31:21,120 --> 00:31:23,120
application server admins all the people

977
00:31:23,120 --> 00:31:25,679
that work at your cloud provider or you

978
00:31:25,679 --> 00:31:27,279
know other you know customers of that

979
00:31:27,279 --> 00:31:28,640
cloud provider you know none of them are

980
00:31:28,640 --> 00:31:30,320
going to be able to you know even if

981
00:31:30,320 --> 00:31:32,720
things are misfigured or that cloud per

982
00:31:32,720 --> 00:31:34,960
service provider is breached or tokens

983
00:31:34,960 --> 00:31:36,799
or whatever that are used to essentially

984
00:31:36,799 --> 00:31:38,720
access some of these systems uh you know

985
00:31:38,720 --> 00:31:40,799
get checked into github or something you

986
00:31:40,799 --> 00:31:42,080
know you're still not going to have the

987
00:31:42,080 --> 00:31:43,519
keys that you need in order to be able

988
00:31:43,519 --> 00:31:45,679
to decrypt the data or

989
00:31:45,679 --> 00:31:48,880
to encrypt data that's going to be

990
00:31:48,880 --> 00:31:51,840
you know used basically for the uh

991
00:31:51,840 --> 00:31:56,000
to add the database or update data

992
00:31:56,559 --> 00:31:59,279
so uh just a simple example here is you

993
00:31:59,279 --> 00:32:00,559
know let's say we've got a medical

994
00:32:00,559 --> 00:32:02,399
record system and so

995
00:32:02,399 --> 00:32:04,159
um the idea here is that we want to

996
00:32:04,159 --> 00:32:05,760
encrypt you know some pretty

997
00:32:05,760 --> 00:32:07,360
uh sensitive data that's there so we're

998
00:32:07,360 --> 00:32:08,640
not encrypting everything you know we're

999
00:32:08,640 --> 00:32:09,840
probably not going to be encrypting like

1000
00:32:09,840 --> 00:32:11,760
patient names and addresses and some of

1001
00:32:11,760 --> 00:32:12,960
that other stuff

1002
00:32:12,960 --> 00:32:14,399
um

1003
00:32:14,399 --> 00:32:16,399
as anastasia mentioned earlier you know

1004
00:32:16,399 --> 00:32:18,799
uh one of the limitations you'll have is

1005
00:32:18,799 --> 00:32:20,000
that you know if you're encrypting data

1006
00:32:20,000 --> 00:32:21,919
then it becomes more difficult to sort

1007
00:32:21,919 --> 00:32:25,360
and filter and and select down those um

1008
00:32:25,360 --> 00:32:26,480
that's the thing that can't be done

1009
00:32:26,480 --> 00:32:27,919
there are ways to be done but there's

1010
00:32:27,919 --> 00:32:30,000
definitely performance impacts so

1011
00:32:30,000 --> 00:32:31,200
uh we're going to say you know really

1012
00:32:31,200 --> 00:32:32,480
what we care about is things like you

1013
00:32:32,480 --> 00:32:35,279
know test results or diagnoses or other

1014
00:32:35,279 --> 00:32:37,039
you know sort of data values like that

1015
00:32:37,039 --> 00:32:39,120
that are pretty uh

1016
00:32:39,120 --> 00:32:40,960
sensitive for this person and need to be

1017
00:32:40,960 --> 00:32:43,120
protected by hipaa or maybe other sort

1018
00:32:43,120 --> 00:32:46,240
of regulatory requirements

1019
00:32:46,240 --> 00:32:47,679
and so what we're going to do is we're

1020
00:32:47,679 --> 00:32:49,120
going to have the system's going to

1021
00:32:49,120 --> 00:32:50,960
create an asymmetric key pair for each

1022
00:32:50,960 --> 00:32:51,919
patient

1023
00:32:51,919 --> 00:32:54,000
so you know myself as a patient i would

1024
00:32:54,000 --> 00:32:56,000
have you know a a key pair that's

1025
00:32:56,000 --> 00:32:58,640
created within the system that uh is

1026
00:32:58,640 --> 00:33:00,720
gonna you know have that relationship

1027
00:33:00,720 --> 00:33:02,159
like you would normally see in what we

1028
00:33:02,159 --> 00:33:04,159
call public and private keys in this

1029
00:33:04,159 --> 00:33:05,279
case we're gonna call them something a

1030
00:33:05,279 --> 00:33:06,880
little different because it's uh i think

1031
00:33:06,880 --> 00:33:08,080
it makes it more clear that we're gonna

1032
00:33:08,080 --> 00:33:09,679
have basically a read key and a write

1033
00:33:09,679 --> 00:33:10,480
key

1034
00:33:10,480 --> 00:33:12,559
so we're going to have one key that is

1035
00:33:12,559 --> 00:33:14,880
used to read data out of this system any

1036
00:33:14,880 --> 00:33:17,440
of these protected fields or attachments

1037
00:33:17,440 --> 00:33:18,880
and then a separate one that's used to

1038
00:33:18,880 --> 00:33:20,320
write the data

1039
00:33:20,320 --> 00:33:23,279
and so the idea here is that you know a

1040
00:33:23,279 --> 00:33:25,440
patient application for example would it

1041
00:33:25,440 --> 00:33:27,600
would only get the re-key so that that

1042
00:33:27,600 --> 00:33:29,519
way the patient can can only read their

1043
00:33:29,519 --> 00:33:31,440
data they can't create any new lab

1044
00:33:31,440 --> 00:33:33,840
results or sensitive data in the system

1045
00:33:33,840 --> 00:33:35,360
can't write themselves prescriptions for

1046
00:33:35,360 --> 00:33:37,120
example you know they're only going to

1047
00:33:37,120 --> 00:33:39,360
be able to read you know their data but

1048
00:33:39,360 --> 00:33:40,559
they get to read pretty much all of

1049
00:33:40,559 --> 00:33:42,399
their data because it's you know it's

1050
00:33:42,399 --> 00:33:43,919
their health

1051
00:33:43,919 --> 00:33:46,880
and uh uh conversely a lab for example

1052
00:33:46,880 --> 00:33:48,720
might might basically be the opposite

1053
00:33:48,720 --> 00:33:50,880
where they can only write data so

1054
00:33:50,880 --> 00:33:52,320
they're not going to be able to read any

1055
00:33:52,320 --> 00:33:54,159
of the existing data in that patient's

1056
00:33:54,159 --> 00:33:55,120
file

1057
00:33:55,120 --> 00:33:57,360
uh you know decrypted specifically i

1058
00:33:57,360 --> 00:33:59,519
guess uh but what they can do is they

1059
00:33:59,519 --> 00:34:01,760
can write data so they can create new

1060
00:34:01,760 --> 00:34:03,120
documents or attachments that are kind

1061
00:34:03,120 --> 00:34:05,279
of like lab reports or you know values

1062
00:34:05,279 --> 00:34:07,840
and things that associated with lab work

1063
00:34:07,840 --> 00:34:09,440
and the idea is that you know they're

1064
00:34:09,440 --> 00:34:10,800
putting that data in they're basically

1065
00:34:10,800 --> 00:34:13,119
kind of like a write only fashion so

1066
00:34:13,119 --> 00:34:14,719
they can't even read their own data

1067
00:34:14,719 --> 00:34:16,000
after they've uh put it in there

1068
00:34:16,000 --> 00:34:17,679
although certainly they would probably

1069
00:34:17,679 --> 00:34:19,280
have copies of it on their own systems

1070
00:34:19,280 --> 00:34:21,760
as well

1071
00:34:21,760 --> 00:34:23,839
and then a doctor is going to have you

1072
00:34:23,839 --> 00:34:25,280
know both keys so they're going to need

1073
00:34:25,280 --> 00:34:27,440
to both read the data that the lab put

1074
00:34:27,440 --> 00:34:29,520
in but also write you know other data

1075
00:34:29,520 --> 00:34:31,679
and diagnoses and stuff that the patient

1076
00:34:31,679 --> 00:34:34,719
is going to see so they would get both

1077
00:34:34,719 --> 00:34:36,560
so the idea here is that you know

1078
00:34:36,560 --> 00:34:38,239
depending on how this is all implemented

1079
00:34:38,239 --> 00:34:40,320
you can have you know kind of the you're

1080
00:34:40,320 --> 00:34:41,520
going to have the

1081
00:34:41,520 --> 00:34:43,520
you know very granular access control

1082
00:34:43,520 --> 00:34:45,599
around you know these keys specifically

1083
00:34:45,599 --> 00:34:47,040
for this patient

1084
00:34:47,040 --> 00:34:48,800
but then there's even just more general

1085
00:34:48,800 --> 00:34:50,239
things that are you can enforce that

1086
00:34:50,239 --> 00:34:52,399
it's like hey the patient application

1087
00:34:52,399 --> 00:34:54,399
itself regardless of which patient is

1088
00:34:54,399 --> 00:34:55,760
logged in it's only ever going to get

1089
00:34:55,760 --> 00:34:58,480
read keys so if you know you're kind of

1090
00:34:58,480 --> 00:35:00,160
able to do some kind of additional

1091
00:35:00,160 --> 00:35:02,400
layers of access control by saying you

1092
00:35:02,400 --> 00:35:04,240
know that the patient application is

1093
00:35:04,240 --> 00:35:05,359
never going to get a right key

1094
00:35:05,359 --> 00:35:07,359
regardless of what happens

1095
00:35:07,359 --> 00:35:09,680
and and vice versa for the lab so that

1096
00:35:09,680 --> 00:35:11,119
you're going to you'll be able to ensure

1097
00:35:11,119 --> 00:35:12,079
that

1098
00:35:12,079 --> 00:35:13,440
you know you've got like i said those

1099
00:35:13,440 --> 00:35:15,599
multiple layers to ensure that you've

1100
00:35:15,599 --> 00:35:17,920
got as much trust as possible that only

1101
00:35:17,920 --> 00:35:19,280
the right people are able to do the

1102
00:35:19,280 --> 00:35:23,440
right you know operations into your data

1103
00:35:23,760 --> 00:35:25,760
and so if you want to read more about a

1104
00:35:25,760 --> 00:35:28,079
a similar example there's one in the

1105
00:35:28,079 --> 00:35:30,000
mongodb documentation where they talk

1106
00:35:30,000 --> 00:35:31,760
about what they call field level

1107
00:35:31,760 --> 00:35:32,800
encryption that we'll talk about a

1108
00:35:32,800 --> 00:35:34,240
little bit but kind of walk through

1109
00:35:34,240 --> 00:35:35,760
exactly like yeah this is how we would

1110
00:35:35,760 --> 00:35:36,960
set it up and this is how you can

1111
00:35:36,960 --> 00:35:38,560
implement it in order to ensure that you

1112
00:35:38,560 --> 00:35:39,520
get the

1113
00:35:39,520 --> 00:35:41,040
security controls that you want to have

1114
00:35:41,040 --> 00:35:44,200
in place

1115
00:35:44,960 --> 00:35:47,520
so now so now we've got the general idea

1116
00:35:47,520 --> 00:35:48,880
of what we want to do then let's talk

1117
00:35:48,880 --> 00:35:50,960
about how we could do it so there's a

1118
00:35:50,960 --> 00:35:53,680
basically three options that

1119
00:35:53,680 --> 00:35:56,079
you've got available to you and

1120
00:35:56,079 --> 00:35:57,680
you know to implement this type of

1121
00:35:57,680 --> 00:35:59,920
encryption into a system

1122
00:35:59,920 --> 00:36:02,320
so the first is is what's called column

1123
00:36:02,320 --> 00:36:04,320
level encryption so the idea here is

1124
00:36:04,320 --> 00:36:06,160
that we're going to encrypt only you

1125
00:36:06,160 --> 00:36:08,000
know specific sensitive columns you know

1126
00:36:08,000 --> 00:36:09,839
maybe credit card numbers socials

1127
00:36:09,839 --> 00:36:13,200
passport numbers whatever and

1128
00:36:13,200 --> 00:36:15,520
that that way you know each of those

1129
00:36:15,520 --> 00:36:16,880
columns will actually be encrypted

1130
00:36:16,880 --> 00:36:18,880
separately so you know you might have

1131
00:36:18,880 --> 00:36:20,800
some people that can access credit card

1132
00:36:20,800 --> 00:36:22,640
numbers but can't access passport

1133
00:36:22,640 --> 00:36:25,119
numbers and vice versa so it gives you

1134
00:36:25,119 --> 00:36:27,040
again an overall access control not just

1135
00:36:27,040 --> 00:36:28,160
for

1136
00:36:28,160 --> 00:36:30,560
users as far as like database admins and

1137
00:36:30,560 --> 00:36:31,920
stuff but also potentially different

1138
00:36:31,920 --> 00:36:34,560
systems so your payment system you know

1139
00:36:34,560 --> 00:36:36,400
would have keys to be able to access the

1140
00:36:36,400 --> 00:36:38,320
credit card numbers but you know not

1141
00:36:38,320 --> 00:36:39,920
access some of those other sensitive

1142
00:36:39,920 --> 00:36:42,560
fields perhaps

1143
00:36:42,560 --> 00:36:43,680
and so

1144
00:36:43,680 --> 00:36:46,000
that's uh that's the idea here so it's

1145
00:36:46,000 --> 00:36:48,560
kind of more at the um

1146
00:36:48,560 --> 00:36:50,000
at the client level or it could be at

1147
00:36:50,000 --> 00:36:52,480
the specific user level as well

1148
00:36:52,480 --> 00:36:54,160
and you know again we're getting that

1149
00:36:54,160 --> 00:36:56,400
separation even uh against the database

1150
00:36:56,400 --> 00:36:57,520
encryption

1151
00:36:57,520 --> 00:36:59,839
uh database administrators and the key

1152
00:36:59,839 --> 00:37:01,440
here is that the decryption and

1153
00:37:01,440 --> 00:37:02,880
encryption is not happening on the

1154
00:37:02,880 --> 00:37:05,200
database server at least uh

1155
00:37:05,200 --> 00:37:06,160
in the

1156
00:37:06,160 --> 00:37:08,560
best implementation of this so what you

1157
00:37:08,560 --> 00:37:10,800
want is stuff that's really what uh

1158
00:37:10,800 --> 00:37:12,560
generally these are implemented in the

1159
00:37:12,560 --> 00:37:14,560
kind of client library that you use to

1160
00:37:14,560 --> 00:37:16,480
access the database server

1161
00:37:16,480 --> 00:37:18,400
so in something like you know mysql or

1162
00:37:18,400 --> 00:37:20,560
postgrad sql there'll be a you know

1163
00:37:20,560 --> 00:37:22,240
library that you use on the web

1164
00:37:22,240 --> 00:37:24,560
application server kind of side to

1165
00:37:24,560 --> 00:37:26,800
access the database and the encryption

1166
00:37:26,800 --> 00:37:28,240
is built into that

1167
00:37:28,240 --> 00:37:30,320
um so you would you know at this level

1168
00:37:30,320 --> 00:37:31,839
of the application server provide the

1169
00:37:31,839 --> 00:37:33,440
keys to that that would then get passed

1170
00:37:33,440 --> 00:37:37,040
through to the database server

1171
00:37:37,040 --> 00:37:38,480
so there's a few different

1172
00:37:38,480 --> 00:37:40,160
implementations of this it's a pretty

1173
00:37:40,160 --> 00:37:42,560
common technique um so i mean it's

1174
00:37:42,560 --> 00:37:44,720
pretty much all uh databases support it

1175
00:37:44,720 --> 00:37:46,720
you know sql microsoft has a couple

1176
00:37:46,720 --> 00:37:48,560
different kind of variants of it uh

1177
00:37:48,560 --> 00:37:49,680
where they call it you know either

1178
00:37:49,680 --> 00:37:52,079
always encrypted data or you know column

1179
00:37:52,079 --> 00:37:53,119
encryption

1180
00:37:53,119 --> 00:37:55,520
on google cloud um specifically has kind

1181
00:37:55,520 --> 00:37:57,680
of implementations for both mysql and

1182
00:37:57,680 --> 00:37:59,599
postpress sql

1183
00:37:59,599 --> 00:38:00,880
and the reason they have that is because

1184
00:38:00,880 --> 00:38:02,320
it's basically interfacing with their

1185
00:38:02,320 --> 00:38:04,400
key management system so it gives them

1186
00:38:04,400 --> 00:38:06,960
the ability to kind of have that um

1187
00:38:06,960 --> 00:38:08,560
you know a more centralized place where

1188
00:38:08,560 --> 00:38:10,560
you're storing the keys

1189
00:38:10,560 --> 00:38:12,560
but again in both cases you can see like

1190
00:38:12,560 --> 00:38:14,000
based on this url this is all

1191
00:38:14,000 --> 00:38:16,320
client-side and my client side here you

1192
00:38:16,320 --> 00:38:18,079
know that could be up here on the actual

1193
00:38:18,079 --> 00:38:19,839
client a mobile client or javascript

1194
00:38:19,839 --> 00:38:21,440
client or it could be on kind of the

1195
00:38:21,440 --> 00:38:24,000
database client library that's accessing

1196
00:38:24,000 --> 00:38:26,640
the database server

1197
00:38:26,640 --> 00:38:28,400
and then you can also do database client

1198
00:38:28,400 --> 00:38:30,480
encryption on aws so here's an example

1199
00:38:30,480 --> 00:38:33,280
of that um you know probably lots of

1200
00:38:33,280 --> 00:38:34,400
other

1201
00:38:34,400 --> 00:38:36,960
potential implementations uh one thing

1202
00:38:36,960 --> 00:38:39,119
to be aware of though is that i believe

1203
00:38:39,119 --> 00:38:40,800
oracle uses the term column level

1204
00:38:40,800 --> 00:38:43,280
encryption for some of their stuff

1205
00:38:43,280 --> 00:38:44,960
but in reality it's more like

1206
00:38:44,960 --> 00:38:46,880
transparent data encryption where it's

1207
00:38:46,880 --> 00:38:48,400
happening kind of all in the database

1208
00:38:48,400 --> 00:38:51,119
server and it's uh you know it doesn't

1209
00:38:51,119 --> 00:38:52,640
have the kind of security properties we

1210
00:38:52,640 --> 00:38:54,160
want here where you can get more

1211
00:38:54,160 --> 00:38:56,720
granular kind of control of the keys

1212
00:38:56,720 --> 00:38:58,160
so you do have to be a little bit

1213
00:38:58,160 --> 00:38:59,680
careful with some of this stuff that

1214
00:38:59,680 --> 00:39:00,800
different

1215
00:39:00,800 --> 00:39:02,720
systems or database implementations are

1216
00:39:02,720 --> 00:39:04,240
going to call things a little bit

1217
00:39:04,240 --> 00:39:05,680
different or call or use the same term

1218
00:39:05,680 --> 00:39:08,000
for something a little bit different

1219
00:39:08,000 --> 00:39:09,599
so definitely worth

1220
00:39:09,599 --> 00:39:10,880
doing a little bit of research on that

1221
00:39:10,880 --> 00:39:13,440
when you need to

1222
00:39:13,440 --> 00:39:15,200
and so the the next option is it was

1223
00:39:15,200 --> 00:39:17,040
called field level encryption and so

1224
00:39:17,040 --> 00:39:18,640
this is basically

1225
00:39:18,640 --> 00:39:20,320
sometimes people will say field level

1226
00:39:20,320 --> 00:39:21,839
encryption when they really need column

1227
00:39:21,839 --> 00:39:23,119
level encryption

1228
00:39:23,119 --> 00:39:24,720
because what field level encryption at

1229
00:39:24,720 --> 00:39:27,359
the the strictest sense is is is your

1230
00:39:27,359 --> 00:39:29,599
it's it's basically more specific than

1231
00:39:29,599 --> 00:39:31,839
column level encryption you're going to

1232
00:39:31,839 --> 00:39:32,640
have

1233
00:39:32,640 --> 00:39:35,119
the ability to encrypt a

1234
00:39:35,119 --> 00:39:36,800
uh specific

1235
00:39:36,800 --> 00:39:39,280
uh data fields that are in a column but

1236
00:39:39,280 --> 00:39:40,960
you're not necessarily encrypting all of

1237
00:39:40,960 --> 00:39:43,680
the rows of that so we're going to have

1238
00:39:43,680 --> 00:39:45,599
a

1239
00:39:45,599 --> 00:39:49,200
specific fields that uh you know that

1240
00:39:49,200 --> 00:39:50,800
the data in that field or maybe even

1241
00:39:50,800 --> 00:39:52,400
data in other fields are going to drive

1242
00:39:52,400 --> 00:39:54,160
the encryption that's used

1243
00:39:54,160 --> 00:39:55,920
so for whatever reason you know maybe we

1244
00:39:55,920 --> 00:39:57,599
want to encrypt you know encrypt just

1245
00:39:57,599 --> 00:40:00,240
the american express credit card numbers

1246
00:40:00,240 --> 00:40:01,920
and so we could do that with good level

1247
00:40:01,920 --> 00:40:04,079
encryption maybe we want to you know

1248
00:40:04,079 --> 00:40:05,839
encrypt only the credit card numbers

1249
00:40:05,839 --> 00:40:07,680
that are associated with customers that

1250
00:40:07,680 --> 00:40:10,800
are in europe for gdpr type reasons you

1251
00:40:10,800 --> 00:40:12,400
could even do something with field level

1252
00:40:12,400 --> 00:40:14,640
encryption where you could use different

1253
00:40:14,640 --> 00:40:16,079
encryption

1254
00:40:16,079 --> 00:40:18,400
um algorithms based on you know where

1255
00:40:18,400 --> 00:40:21,280
the user is so um you could think of a

1256
00:40:21,280 --> 00:40:24,000
world maybe that you know in america

1257
00:40:24,000 --> 00:40:25,920
they mandate that you must use aes to

1258
00:40:25,920 --> 00:40:27,839
encrypt data but then in you know some

1259
00:40:27,839 --> 00:40:29,280
other country they mandate that you must

1260
00:40:29,280 --> 00:40:31,359
use some other algorithm to encrypt the

1261
00:40:31,359 --> 00:40:33,119
data and so you would need to you know

1262
00:40:33,119 --> 00:40:35,040
have more granularity there in what

1263
00:40:35,040 --> 00:40:36,079
you're doing

1264
00:40:36,079 --> 00:40:37,920
so that's uh know gives you the ability

1265
00:40:37,920 --> 00:40:41,520
to meet those kind of use cases

1266
00:40:42,079 --> 00:40:44,000
and so again that it's not happening on

1267
00:40:44,000 --> 00:40:46,079
the database server generally for field

1268
00:40:46,079 --> 00:40:47,119
level encryption it's going to be all

1269
00:40:47,119 --> 00:40:48,480
the way up here on the client although

1270
00:40:48,480 --> 00:40:50,079
it could be down here

1271
00:40:50,079 --> 00:40:52,240
on the web application server but the

1272
00:40:52,240 --> 00:40:54,000
key is that it's you know again not on

1273
00:40:54,000 --> 00:40:57,359
the database server itself

1274
00:40:58,000 --> 00:40:59,599
and so there's really two main

1275
00:40:59,599 --> 00:41:01,680
implementations of this that uh

1276
00:41:01,680 --> 00:41:03,599
that i've identified you know so one is

1277
00:41:03,599 --> 00:41:05,599
you know mongodb was really the pioneer

1278
00:41:05,599 --> 00:41:07,839
for this that they created a whole

1279
00:41:07,839 --> 00:41:09,760
kind of mechanism around this uh that

1280
00:41:09,760 --> 00:41:11,119
you can read about in their

1281
00:41:11,119 --> 00:41:13,520
documentation of this link here

1282
00:41:13,520 --> 00:41:15,359
and um

1283
00:41:15,359 --> 00:41:17,040
so they they go into you know kind of

1284
00:41:17,040 --> 00:41:19,599
how they you can set up this on the the

1285
00:41:19,599 --> 00:41:20,960
client side

1286
00:41:20,960 --> 00:41:22,640
and they have you know full support for

1287
00:41:22,640 --> 00:41:24,240
it as part of their client libraries

1288
00:41:24,240 --> 00:41:25,920
that are used to connect to a

1289
00:41:25,920 --> 00:41:27,440
database

1290
00:41:27,440 --> 00:41:29,599
and then um amazon does this as well

1291
00:41:29,599 --> 00:41:31,200
although strangely it's part of their

1292
00:41:31,200 --> 00:41:33,119
cloud front um because they're basically

1293
00:41:33,119 --> 00:41:34,640
doing field level encryption that kind

1294
00:41:34,640 --> 00:41:36,000
of starts i think all the way at like

1295
00:41:36,000 --> 00:41:39,359
the http field level and uh again kind

1296
00:41:39,359 --> 00:41:40,800
of with that idea that you're encrypting

1297
00:41:40,800 --> 00:41:43,440
data as soon as possible uh in the in

1298
00:41:43,440 --> 00:41:45,920
the overall kind of stack so that's an

1299
00:41:45,920 --> 00:41:47,680
interesting implementation that you can

1300
00:41:47,680 --> 00:41:48,800
get into

1301
00:41:48,800 --> 00:41:52,160
looking at their documentation

1302
00:41:52,800 --> 00:41:55,359
so so those two field level encryption

1303
00:41:55,359 --> 00:41:57,119
and column level encryptions are the the

1304
00:41:57,119 --> 00:42:00,640
two kind of um

1305
00:42:01,040 --> 00:42:02,400
automated mechanisms i guess you could

1306
00:42:02,400 --> 00:42:04,640
say implementations that exist that

1307
00:42:04,640 --> 00:42:05,680
to do this

1308
00:42:05,680 --> 00:42:07,520
and so the last the last option is

1309
00:42:07,520 --> 00:42:09,119
really you know you just gotta do it

1310
00:42:09,119 --> 00:42:11,680
yourself so you know we can do uh

1311
00:42:11,680 --> 00:42:13,599
application level encryption so the idea

1312
00:42:13,599 --> 00:42:15,680
here is that you know you've got

1313
00:42:15,680 --> 00:42:17,599
logic built into the client whether it's

1314
00:42:17,599 --> 00:42:19,839
javascript or a mobile app or whatever

1315
00:42:19,839 --> 00:42:21,920
and it's going to do all of the you know

1316
00:42:21,920 --> 00:42:23,680
encryption and decryption

1317
00:42:23,680 --> 00:42:25,599
so this is you know obviously the most

1318
00:42:25,599 --> 00:42:27,839
flexible because you're you know

1319
00:42:27,839 --> 00:42:29,119
building it yourself you can do whatever

1320
00:42:29,119 --> 00:42:30,720
you want it's it's also kind of

1321
00:42:30,720 --> 00:42:32,560
technology agnostic you're not tying

1322
00:42:32,560 --> 00:42:34,319
yourself to a particular database back

1323
00:42:34,319 --> 00:42:36,560
end or cloud technology like we were

1324
00:42:36,560 --> 00:42:37,760
just talking about with field level

1325
00:42:37,760 --> 00:42:39,040
encryption

1326
00:42:39,040 --> 00:42:40,800
um you know for if you've got

1327
00:42:40,800 --> 00:42:43,040
multi-platform tech systems where maybe

1328
00:42:43,040 --> 00:42:44,640
you've got multiple types of

1329
00:42:44,640 --> 00:42:46,160
applications that are built on different

1330
00:42:46,160 --> 00:42:49,119
platforms that need to access the same

1331
00:42:49,119 --> 00:42:52,560
databases then you know uh doing it as

1332
00:42:52,560 --> 00:42:54,079
kind of at the application layer is

1333
00:42:54,079 --> 00:42:56,000
helpful because it allows you to be

1334
00:42:56,000 --> 00:42:58,079
agnostic to kind of what's underneath

1335
00:42:58,079 --> 00:43:01,440
and uh what's above as well so

1336
00:43:01,440 --> 00:43:03,520
it gives you a lot of flexibility

1337
00:43:03,520 --> 00:43:05,440
with the you know the cost of just being

1338
00:43:05,440 --> 00:43:06,800
you know a little bit more work and

1339
00:43:06,800 --> 00:43:09,760
complexity for you to deal with

1340
00:43:09,760 --> 00:43:11,680
so again you know you're not encrypting

1341
00:43:11,680 --> 00:43:13,359
the data on the database server you're

1342
00:43:13,359 --> 00:43:15,440
doing it in your own

1343
00:43:15,440 --> 00:43:17,680
custom application logic

1344
00:43:17,680 --> 00:43:18,720
and

1345
00:43:18,720 --> 00:43:20,319
you know the

1346
00:43:20,319 --> 00:43:22,000
what you can do is uh like i said this

1347
00:43:22,000 --> 00:43:23,680
is kind of technology agnostic but there

1348
00:43:23,680 --> 00:43:25,680
are different you know vendors that can

1349
00:43:25,680 --> 00:43:27,200
help you in implementation so again

1350
00:43:27,200 --> 00:43:28,640
you're kind of tying yourself to that

1351
00:43:28,640 --> 00:43:31,280
vendor but you know you can find vendors

1352
00:43:31,280 --> 00:43:34,000
that will basically be cloud agnostic so

1353
00:43:34,000 --> 00:43:36,079
you could you know use the same

1354
00:43:36,079 --> 00:43:37,760
data encryption scheme whether you're

1355
00:43:37,760 --> 00:43:39,200
putting data on

1356
00:43:39,200 --> 00:43:41,440
premise or in the cloud at amazon or in

1357
00:43:41,440 --> 00:43:43,599
the cloud and azure you know and you

1358
00:43:43,599 --> 00:43:45,359
know allow you to move data around

1359
00:43:45,359 --> 00:43:47,440
without being kind of tied to that

1360
00:43:47,440 --> 00:43:50,480
underlying technology

1361
00:43:51,200 --> 00:43:53,040
so if you if you want to learn more

1362
00:43:53,040 --> 00:43:56,160
about ale ale uh you could grab yourself

1363
00:43:56,160 --> 00:43:58,720
a glass of ale and read up on a couple

1364
00:43:58,720 --> 00:44:01,520
of these documents so we've got um you

1365
00:44:01,520 --> 00:44:02,800
know a

1366
00:44:02,800 --> 00:44:04,640
pretty good article here from infoq that

1367
00:44:04,640 --> 00:44:06,400
talks about you know software architects

1368
00:44:06,400 --> 00:44:08,240
and how you can use app application

1369
00:44:08,240 --> 00:44:09,920
layer encryption

1370
00:44:09,920 --> 00:44:12,079
and then a recent forbes article as well

1371
00:44:12,079 --> 00:44:14,560
that talks really about the specifics of

1372
00:44:14,560 --> 00:44:16,160
what they call they call it entity level

1373
00:44:16,160 --> 00:44:17,599
encryption but the idea is that you

1374
00:44:17,599 --> 00:44:20,240
string is granular it's possible in you

1375
00:44:20,240 --> 00:44:22,240
know the data that you're encrypting and

1376
00:44:22,240 --> 00:44:25,280
decrypting and that allows you to be a

1377
00:44:25,280 --> 00:44:27,599
defense against ransomware as well so

1378
00:44:27,599 --> 00:44:29,760
generally you know ransomware if it you

1379
00:44:29,760 --> 00:44:31,680
know kind of gets into your system is

1380
00:44:31,680 --> 00:44:33,520
going to be operating you know down here

1381
00:44:33,520 --> 00:44:36,400
at either like the bulk storage layer or

1382
00:44:36,400 --> 00:44:38,079
maybe some ransomware is kind of

1383
00:44:38,079 --> 00:44:39,920
database aware where if it you know was

1384
00:44:39,920 --> 00:44:42,319
able to get uh database credentials you

1385
00:44:42,319 --> 00:44:43,839
could go and start you know encrypting a

1386
00:44:43,839 --> 00:44:45,839
bunch of data in your database

1387
00:44:45,839 --> 00:44:47,200
um

1388
00:44:47,200 --> 00:44:50,079
then uh but if you're if you're

1389
00:44:50,079 --> 00:44:52,640
uh if your data is you know encrypted at

1390
00:44:52,640 --> 00:44:54,319
a higher layer then that's not gonna

1391
00:44:54,319 --> 00:44:56,560
necessarily help them so now

1392
00:44:56,560 --> 00:44:58,319
it gets to be clear so i mean ransomware

1393
00:44:58,319 --> 00:45:00,319
that just goes in and tries to ransom

1394
00:45:00,319 --> 00:45:01,920
your data you know they could they could

1395
00:45:01,920 --> 00:45:03,920
encrypt the data down at the lower layer

1396
00:45:03,920 --> 00:45:05,040
and you're still going to have to deal

1397
00:45:05,040 --> 00:45:07,359
with that as far as getting uh you know

1398
00:45:07,359 --> 00:45:09,760
through that hurdle hopefully you've got

1399
00:45:09,760 --> 00:45:11,440
good backups that are you know kind of

1400
00:45:11,440 --> 00:45:13,359
protecting against that sort of attack

1401
00:45:13,359 --> 00:45:15,680
so the really more concerning is kind of

1402
00:45:15,680 --> 00:45:17,599
what we've seen this year where

1403
00:45:17,599 --> 00:45:20,079
ransomware has moved from just

1404
00:45:20,079 --> 00:45:21,599
kind of preventing you from accessing

1405
00:45:21,599 --> 00:45:23,200
your data until you pay

1406
00:45:23,200 --> 00:45:25,280
to also being able to steal your data

1407
00:45:25,280 --> 00:45:27,040
and potentially posting it online and

1408
00:45:27,040 --> 00:45:29,200
doing other things with it so the data

1409
00:45:29,200 --> 00:45:32,400
theft portion of ransomware is what's uh

1410
00:45:32,400 --> 00:45:34,160
you know this entity level encryption

1411
00:45:34,160 --> 00:45:35,520
that they call it would really help you

1412
00:45:35,520 --> 00:45:37,680
with

1413
00:45:39,040 --> 00:45:41,599
so uh just a few kind of parting words

1414
00:45:41,599 --> 00:45:43,680
of crypto advice uh you know so if you

1415
00:45:43,680 --> 00:45:45,599
are uh involved in a cryptographic

1416
00:45:45,599 --> 00:45:47,520
project where you've got to you know

1417
00:45:47,520 --> 00:45:49,040
encrypt some data and take care of it

1418
00:45:49,040 --> 00:45:51,599
properly and uh you know here's our list

1419
00:45:51,599 --> 00:45:53,359
of do's and don'ts i'm not going to read

1420
00:45:53,359 --> 00:45:55,200
through them all hopefully they uh look

1421
00:45:55,200 --> 00:45:57,200
familiar and there's lots of good

1422
00:45:57,200 --> 00:45:59,599
documentation on the oauth side in other

1423
00:45:59,599 --> 00:46:01,200
places as well that kind of goes into

1424
00:46:01,200 --> 00:46:02,880
the details but

1425
00:46:02,880 --> 00:46:04,240
really what it comes down to is that

1426
00:46:04,240 --> 00:46:05,760
there are a lot of details you've got to

1427
00:46:05,760 --> 00:46:07,599
get right you know i mentioned earlier

1428
00:46:07,599 --> 00:46:09,520
that you know the the algorithms that we

1429
00:46:09,520 --> 00:46:12,400
have today things like aes and the gcm

1430
00:46:12,400 --> 00:46:14,640
encryption mode are very strong

1431
00:46:14,640 --> 00:46:16,480
but there is there is opportunity for

1432
00:46:16,480 --> 00:46:17,920
potentially um

1433
00:46:17,920 --> 00:46:19,440
some implementation flaws that could

1434
00:46:19,440 --> 00:46:22,400
cause you to have issues

1435
00:46:23,760 --> 00:46:26,079
and this is my last slide so i know

1436
00:46:26,079 --> 00:46:27,440
we're basically at time as far as we're

1437
00:46:27,440 --> 00:46:30,240
getting into the q a portion so i uh

1438
00:46:30,240 --> 00:46:31,440
definitely

1439
00:46:31,440 --> 00:46:34,000
appreciate you guys all coming and i i

1440
00:46:34,000 --> 00:46:35,359
hope that you've put some questions if

1441
00:46:35,359 --> 00:46:36,960
you haven't already put some into the uh

1442
00:46:36,960 --> 00:46:39,119
hoover chat and we'll be happy to answer

1443
00:46:39,119 --> 00:46:41,440
them uh as many as we can during this

1444
00:46:41,440 --> 00:46:43,839
period of time uh you can also feel free

1445
00:46:43,839 --> 00:46:45,920
to reach out to us via email you know

1446
00:46:45,920 --> 00:46:48,400
weiss and i are happy to to help as far

1447
00:46:48,400 --> 00:46:50,079
as responding to any any questions that

1448
00:46:50,079 --> 00:46:54,319
you have after after the talk as well

