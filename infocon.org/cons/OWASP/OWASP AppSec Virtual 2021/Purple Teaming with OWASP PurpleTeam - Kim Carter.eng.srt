1
00:00:01,420 --> 00:00:05,630
[Music]

2
00:00:06,160 --> 00:00:07,279
so

3
00:00:07,279 --> 00:00:08,880
a purple team is a security regression

4
00:00:08,880 --> 00:00:11,920
testing cli in software as a service

5
00:00:11,920 --> 00:00:14,920
targeting web applications and

6
00:00:14,920 --> 00:00:18,480
apis the cli is specifically targeted at

7
00:00:18,480 --> 00:00:20,880
sitting within your build pipelines

8
00:00:20,880 --> 00:00:23,439
but can also be run manually

9
00:00:23,439 --> 00:00:25,519
the sas that does the security testing

10
00:00:25,519 --> 00:00:28,400
of your applications and or apis can be

11
00:00:28,400 --> 00:00:31,840
deployed anywhere

12
00:00:32,800 --> 00:00:35,120
so it's been about a 3.8 year journey so

13
00:00:35,120 --> 00:00:35,920
far

14
00:00:35,920 --> 00:00:38,160
that's brought people team from

15
00:00:38,160 --> 00:00:39,920
the proof of concept to

16
00:00:39,920 --> 00:00:41,520
where it is now

17
00:00:41,520 --> 00:00:44,079
i finished writing a book series to help

18
00:00:44,079 --> 00:00:46,480
developers upskill their security

19
00:00:46,480 --> 00:00:48,160
that would have been

20
00:00:48,160 --> 00:00:50,160
probably around four years ago which had

21
00:00:50,160 --> 00:00:53,199
the proof of concept inside that

22
00:00:53,199 --> 00:00:54,079
which

23
00:00:54,079 --> 00:00:55,920
which purple team was

24
00:00:55,920 --> 00:00:59,359
grown out of so i ran lots of workshops

25
00:00:59,359 --> 00:01:01,840
with the proof of concept to elicit

26
00:01:01,840 --> 00:01:03,680
developer feedback and confirm that what

27
00:01:03,680 --> 00:01:06,799
i wrote about was true

28
00:01:06,799 --> 00:01:08,560
and valid

29
00:01:08,560 --> 00:01:10,240
most of that time has been like seven

30
00:01:10,240 --> 00:01:14,080
days a week and two full-time jobs

31
00:01:14,080 --> 00:01:16,400
pretty much until recently until

32
00:01:16,400 --> 00:01:18,960
we've had some um customers

33
00:01:18,960 --> 00:01:20,799
basically come on board and yeah

34
00:01:20,799 --> 00:01:23,600
actually start to pay

35
00:01:23,680 --> 00:01:25,280
so building a tool that helps developers

36
00:01:25,280 --> 00:01:26,880
write secure code

37
00:01:26,880 --> 00:01:27,600
is

38
00:01:27,600 --> 00:01:30,159
a great way to learn about security

39
00:01:30,159 --> 00:01:31,680
if you want to learn more about

40
00:01:31,680 --> 00:01:33,759
information security we can assign a

41
00:01:33,759 --> 00:01:36,880
mentor to you to help you

42
00:01:36,880 --> 00:01:39,040
to help yourself and the community by

43
00:01:39,040 --> 00:01:42,159
building purple team out

44
00:01:44,720 --> 00:01:46,560
okay so this is a high level

45
00:01:46,560 --> 00:01:49,119
architectural overview of

46
00:01:49,119 --> 00:01:51,360
our purple team

47
00:01:51,360 --> 00:01:54,880
so this is oh wasp

48
00:01:57,040 --> 00:02:00,560
it runs in the local environment

49
00:02:00,560 --> 00:02:02,719
so what you can see up

50
00:02:02,719 --> 00:02:05,840
here is your um system under test so

51
00:02:05,840 --> 00:02:08,399
that could be a web application

52
00:02:08,399 --> 00:02:10,318
or api that you have decided that you

53
00:02:10,318 --> 00:02:11,280
want

54
00:02:11,280 --> 00:02:12,640
testing

55
00:02:12,640 --> 00:02:14,800
now we've got the cli here and we've got

56
00:02:14,800 --> 00:02:16,640
the back end

57
00:02:16,640 --> 00:02:17,840
which has all

58
00:02:17,840 --> 00:02:19,760
the components that does

59
00:02:19,760 --> 00:02:21,760
most of the work

60
00:02:21,760 --> 00:02:23,920
so the cli will make a initial request

61
00:02:23,920 --> 00:02:25,599
to the orchestrator the orchestrator is

62
00:02:25,599 --> 00:02:27,680
responsible for the

63
00:02:27,680 --> 00:02:29,200
other testers

64
00:02:29,200 --> 00:02:30,640
currently there's three

65
00:02:30,640 --> 00:02:32,959
testers although the server scanner is

66
00:02:32,959 --> 00:02:34,879
currently stubbed out it's not yet

67
00:02:34,879 --> 00:02:36,800
implemented we've recently implemented

68
00:02:36,800 --> 00:02:39,440
the tls scanner

69
00:02:39,440 --> 00:02:40,400
um so

70
00:02:40,400 --> 00:02:42,400
the testers themselves are responsible

71
00:02:42,400 --> 00:02:43,920
for emma series

72
00:02:43,920 --> 00:02:46,080
now the emissaries are the actual

73
00:02:46,080 --> 00:02:47,599
parts that do the

74
00:02:47,599 --> 00:02:50,400
scanning and that sort of thing so for

75
00:02:50,400 --> 00:02:52,879
the app tester we're using uh zap and we

76
00:02:52,879 --> 00:02:55,360
use selenium to proxy uh the initial

77
00:02:55,360 --> 00:02:56,879
requests

78
00:02:56,879 --> 00:02:58,560
uh through zap

79
00:02:58,560 --> 00:03:00,959
so the stage two containers

80
00:03:00,959 --> 00:03:02,480
um

81
00:03:02,480 --> 00:03:04,239
basically they are zap and selenium

82
00:03:04,239 --> 00:03:05,599
currently

83
00:03:05,599 --> 00:03:09,040
they are hosted on docker compose ui

84
00:03:09,040 --> 00:03:10,239
locally

85
00:03:10,239 --> 00:03:13,680
and the test ssl dot sh emissary

86
00:03:13,680 --> 00:03:16,319
for the tls scanner tester

87
00:03:16,319 --> 00:03:19,040
sits within the tls scanner

88
00:03:19,040 --> 00:03:19,760
uh

89
00:03:19,760 --> 00:03:21,840
a container because there's no need for

90
00:03:21,840 --> 00:03:24,319
it to be out external

91
00:03:24,319 --> 00:03:28,000
um so what happens is the emi series

92
00:03:28,000 --> 00:03:29,519
actually

93
00:03:29,519 --> 00:03:31,200
when a job file gets sent through from

94
00:03:31,200 --> 00:03:33,840
the cli to the orchestrator

95
00:03:33,840 --> 00:03:35,760
the orchestrator it does a whole lot of

96
00:03:35,760 --> 00:03:37,360
validation and stuff like that then

97
00:03:37,360 --> 00:03:39,360
passes it on to the testers

98
00:03:39,360 --> 00:03:41,120
then the testers decide how many test

99
00:03:41,120 --> 00:03:43,680
sessions there are for the tls scanner

100
00:03:43,680 --> 00:03:46,319
there's only ever one but for the

101
00:03:46,319 --> 00:03:49,200
application scanner there could be

102
00:03:49,200 --> 00:03:50,879
i've got a

103
00:03:50,879 --> 00:03:53,360
i've got a soft limit of 12 but usually

104
00:03:53,360 --> 00:03:56,080
it's it's way less than that so for

105
00:03:56,080 --> 00:03:58,159
example you've got two test sessions

106
00:03:58,159 --> 00:03:59,120
then

107
00:03:59,120 --> 00:04:01,519
the application scanner will spin up two

108
00:04:01,519 --> 00:04:02,799
sets of

109
00:04:02,799 --> 00:04:03,760
uh

110
00:04:03,760 --> 00:04:05,599
of m series so there'll be two zap

111
00:04:05,599 --> 00:04:08,480
containers and two selenium containers

112
00:04:08,480 --> 00:04:10,560
those zap and selenium always work hand

113
00:04:10,560 --> 00:04:12,959
in hand

114
00:04:13,439 --> 00:04:15,040
um so

115
00:04:15,040 --> 00:04:16,798
yeah in order to spin these containers

116
00:04:16,798 --> 00:04:18,959
up uh that

117
00:04:18,959 --> 00:04:21,040
the testers make or

118
00:04:21,040 --> 00:04:23,360
the application scanner makes a request

119
00:04:23,360 --> 00:04:24,400
to

120
00:04:24,400 --> 00:04:26,560
uh some lambda functions or a lambda

121
00:04:26,560 --> 00:04:29,040
function which is sitting on sam cli

122
00:04:29,040 --> 00:04:30,320
locally

123
00:04:30,320 --> 00:04:33,120
and then that spins up these containers

124
00:04:33,120 --> 00:04:35,520
and then brings them down again after

125
00:04:35,520 --> 00:04:38,400
the testing is complete

126
00:04:38,400 --> 00:04:39,680
um so

127
00:04:39,680 --> 00:04:41,440
all the

128
00:04:41,440 --> 00:04:43,040
events

129
00:04:43,040 --> 00:04:44,639
basically that are happening in real

130
00:04:44,639 --> 00:04:46,720
time are pushed on to

131
00:04:46,720 --> 00:04:48,320
redis channels

132
00:04:48,320 --> 00:04:50,320
and then

133
00:04:50,320 --> 00:04:52,560
um the orchestrator ends up with those

134
00:04:52,560 --> 00:04:54,560
messages because it's subscribed to each

135
00:04:54,560 --> 00:04:56,960
of those channels

136
00:04:56,960 --> 00:04:58,320
if you're using

137
00:04:58,320 --> 00:05:00,160
server center vents

138
00:05:00,160 --> 00:05:02,080
which generally you will be if you're

139
00:05:02,080 --> 00:05:04,960
running the whole shebang locally

140
00:05:04,960 --> 00:05:06,000
then as

141
00:05:06,000 --> 00:05:07,199
the

142
00:05:07,199 --> 00:05:09,280
subscribed messages come

143
00:05:09,280 --> 00:05:11,280
in from a redis they're just pushed

144
00:05:11,280 --> 00:05:13,039
straight to the cli

145
00:05:13,039 --> 00:05:16,160
if you decide to use long poland then

146
00:05:16,160 --> 00:05:17,280
uh

147
00:05:17,280 --> 00:05:19,120
the orchestrator pushes those messages

148
00:05:19,120 --> 00:05:20,960
back into

149
00:05:20,960 --> 00:05:24,000
redis lists and then pops them off the

150
00:05:24,000 --> 00:05:28,720
lists as requests come in from the cli

151
00:05:29,520 --> 00:05:32,800
so that's sort of a rundown of all the

152
00:05:32,800 --> 00:05:37,400
backing and front-end components there

153
00:05:38,720 --> 00:05:40,080
how does purple team help us as

154
00:05:40,080 --> 00:05:41,840
developers

155
00:05:41,840 --> 00:05:43,520
how does people team help us as a

156
00:05:43,520 --> 00:05:46,240
business that creates software and

157
00:05:46,240 --> 00:05:47,840
and why would i want purple team in my

158
00:05:47,840 --> 00:05:50,400
build pipelines at all

159
00:05:50,400 --> 00:05:51,840
to answer these questions i'm going to

160
00:05:51,840 --> 00:05:53,680
take you back to a section that's in a

161
00:05:53,680 --> 00:05:57,039
number of my previous talks

162
00:05:57,520 --> 00:05:59,039
traditionally how have we found security

163
00:05:59,039 --> 00:06:02,000
bugs in the software we write

164
00:06:02,000 --> 00:06:04,160
basically we haven't really well we've

165
00:06:04,160 --> 00:06:06,560
done it really late

166
00:06:06,560 --> 00:06:08,240
sort of like ambulance at the bottom of

167
00:06:08,240 --> 00:06:09,840
the cliff

168
00:06:09,840 --> 00:06:11,199
so

169
00:06:11,199 --> 00:06:12,960
every team has a week or two to find all

170
00:06:12,960 --> 00:06:14,639
the defects we've been conscientiously

171
00:06:14,639 --> 00:06:17,360
adding for months

172
00:06:19,280 --> 00:06:21,039
generally a red team will cost you about

173
00:06:21,039 --> 00:06:22,880
20k per week

174
00:06:22,880 --> 00:06:24,960
and the engagement will be like two

175
00:06:24,960 --> 00:06:26,880
weeks for a small to medium sized web

176
00:06:26,880 --> 00:06:28,800
application

177
00:06:28,800 --> 00:06:29,919
um

178
00:06:29,919 --> 00:06:32,479
software projects uh before release for

179
00:06:32,479 --> 00:06:34,639
small to medium size sort of thing is

180
00:06:34,639 --> 00:06:36,479
going to be six months

181
00:06:36,479 --> 00:06:39,360
so that'll be about 40 grand for a six

182
00:06:39,360 --> 00:06:40,720
month project

183
00:06:40,720 --> 00:06:43,680
so that's just for the red teaming

184
00:06:43,680 --> 00:06:45,680
generally five criticals 10 highs 10

185
00:06:45,680 --> 00:06:47,840
mediums 10 low severity bugs this is

186
00:06:47,840 --> 00:06:49,759
just an average i will be found and

187
00:06:49,759 --> 00:06:51,840
that's if you're lucky

188
00:06:51,840 --> 00:06:53,759
many bugs are left unfound waiting to be

189
00:06:53,759 --> 00:06:56,319
exploited

190
00:06:56,800 --> 00:06:59,520
the business often only only fixes the

191
00:06:59,520 --> 00:07:01,759
five criticals because it's now so

192
00:07:01,759 --> 00:07:04,080
expensive at this point in time to fix

193
00:07:04,080 --> 00:07:05,120
them

194
00:07:05,120 --> 00:07:07,199
so each bug has an average cost of 15

195
00:07:07,199 --> 00:07:10,000
plus times what it would have cost to

196
00:07:10,000 --> 00:07:12,000
find and fix them if they were found and

197
00:07:12,000 --> 00:07:15,720
fixed when they were introduced

198
00:07:18,560 --> 00:07:21,039
okay so

199
00:07:21,440 --> 00:07:23,360
so how do we actually set up people team

200
00:07:23,360 --> 00:07:24,479
so

201
00:07:24,479 --> 00:07:29,000
i'm head to the setup page now

202
00:07:33,680 --> 00:07:36,240
okay so

203
00:07:36,560 --> 00:07:38,880
first of all you have to

204
00:07:38,880 --> 00:07:41,599
set up the adopter network

205
00:07:41,599 --> 00:07:44,160
basically this list here is just the um

206
00:07:44,160 --> 00:07:46,080
there's a list of the comments up

207
00:07:46,080 --> 00:07:47,599
components we're going to scroll through

208
00:07:47,599 --> 00:07:50,319
on the setup page

209
00:07:50,319 --> 00:07:51,680
so you've got to set up a docker network

210
00:07:51,680 --> 00:07:54,240
you can do that manually or you or it

211
00:07:54,240 --> 00:07:57,840
will be done automatically when you run

212
00:07:57,840 --> 00:07:59,039
the

213
00:07:59,039 --> 00:08:01,440
stage one a compose file for the first

214
00:08:01,440 --> 00:08:02,400
time

215
00:08:02,400 --> 00:08:04,319
so either or

216
00:08:04,319 --> 00:08:06,319
you obviously need a system under test

217
00:08:06,319 --> 00:08:09,360
we often use node for our application

218
00:08:09,360 --> 00:08:11,759
um if we're testing a web apps as

219
00:08:11,759 --> 00:08:14,000
opposed to apis

220
00:08:14,000 --> 00:08:15,120
if you

221
00:08:15,120 --> 00:08:17,039
decided you wanted to take it for a test

222
00:08:17,039 --> 00:08:19,599
run you can use likes of this override

223
00:08:19,599 --> 00:08:22,160
file just to apply to the

224
00:08:22,160 --> 00:08:23,840
nodegoats

225
00:08:23,840 --> 00:08:26,240
existing docker compose file which will

226
00:08:26,240 --> 00:08:29,840
edit i'm editing to the

227
00:08:30,319 --> 00:08:32,479
purple team docker network

228
00:08:32,479 --> 00:08:35,919
so that it can reach it locally

229
00:08:38,719 --> 00:08:40,880
we use um our purple infrastructure as

230
00:08:40,880 --> 00:08:43,839
code system under test this is a um

231
00:08:43,839 --> 00:08:46,320
a terraform project which allows us to

232
00:08:46,320 --> 00:08:48,800
uh quickly to deploy any system under

233
00:08:48,800 --> 00:08:50,800
test that we want

234
00:08:50,800 --> 00:08:52,880
uh i'm providing you've got the source

235
00:08:52,880 --> 00:08:55,279
code for it

236
00:08:55,279 --> 00:08:56,560
so

237
00:08:56,560 --> 00:08:57,920
yeah

238
00:08:57,920 --> 00:08:59,519
feel free to take this project for a

239
00:08:59,519 --> 00:09:01,920
spin as well if you want it's it's it's

240
00:09:01,920 --> 00:09:04,240
great for getting um systems under test

241
00:09:04,240 --> 00:09:07,120
up and running quickly

242
00:09:07,120 --> 00:09:09,040
uh so then we've got uh the lambda

243
00:09:09,040 --> 00:09:10,480
functions

244
00:09:10,480 --> 00:09:13,120
uh the details are on the readme linked

245
00:09:13,120 --> 00:09:15,040
to here the stage two containers

246
00:09:15,040 --> 00:09:17,200
similarly details on the readme there's

247
00:09:17,200 --> 00:09:18,399
not a lot

248
00:09:18,399 --> 00:09:20,880
um to set up with those

249
00:09:20,880 --> 00:09:23,360
the orchestrator um you'll need to set

250
00:09:23,360 --> 00:09:25,200
up an environment vehicle

251
00:09:25,200 --> 00:09:26,399
and

252
00:09:26,399 --> 00:09:27,920
if you've got a firewall running you'll

253
00:09:27,920 --> 00:09:29,040
need to

254
00:09:29,040 --> 00:09:32,080
upgrade some firewall walls

255
00:09:32,080 --> 00:09:36,880
you need host ip forwarding turned on

256
00:09:36,880 --> 00:09:39,519
and any additional setup details are on

257
00:09:39,519 --> 00:09:42,480
the readme link to there

258
00:09:42,480 --> 00:09:44,720
now for the actual testers themselves as

259
00:09:44,720 --> 00:09:46,800
i said the server scanner is still not

260
00:09:46,800 --> 00:09:48,800
implemented the application scanner and

261
00:09:48,800 --> 00:09:50,880
tls scanner are the details for those

262
00:09:50,880 --> 00:09:52,959
setups on the readme

263
00:09:52,959 --> 00:09:54,880
uh there's there's very little to do

264
00:09:54,880 --> 00:09:56,640
there because it's mostly taken care of

265
00:09:56,640 --> 00:09:58,000
with the docker

266
00:09:58,000 --> 00:10:01,120
docker compose file

267
00:10:01,200 --> 00:10:02,959
and the purple cli which is a bit of

268
00:10:02,959 --> 00:10:04,800
configuration

269
00:10:04,800 --> 00:10:06,560
after the install

270
00:10:06,560 --> 00:10:10,560
um let's just have a look at that

271
00:10:15,519 --> 00:10:19,480
so that's the contents there

272
00:10:34,079 --> 00:10:35,680
yeah okay so

273
00:10:35,680 --> 00:10:38,160
so um to actually install there's

274
00:10:38,160 --> 00:10:39,760
at least a couple i'm at least three

275
00:10:39,760 --> 00:10:41,600
options the three main options that we

276
00:10:41,600 --> 00:10:42,800
use

277
00:10:42,800 --> 00:10:44,480
uh so cloning the git repository is a

278
00:10:44,480 --> 00:10:45,440
good option if you're planning on

279
00:10:45,440 --> 00:10:47,120
running or debugging purple team

280
00:10:47,120 --> 00:10:49,680
standalone with a ui

281
00:10:49,680 --> 00:10:51,440
npm install locally is a good option if

282
00:10:51,440 --> 00:10:52,880
you're planning on running or debugging

283
00:10:52,880 --> 00:10:55,200
pertinent as a spawned node.js

284
00:10:55,200 --> 00:10:57,680
subprocess for example if your build

285
00:10:57,680 --> 00:11:01,040
pipelines predominantly unknown js

286
00:11:01,040 --> 00:11:03,360
and the mpm installed globally options

287
00:11:03,360 --> 00:11:05,920
good option for

288
00:11:05,920 --> 00:11:07,760
running if

289
00:11:07,760 --> 00:11:09,760
your build pipeline is

290
00:11:09,760 --> 00:11:13,319
in a different language

291
00:11:14,320 --> 00:11:16,640
um also another option is the likes of

292
00:11:16,640 --> 00:11:17,839
npm link

293
00:11:17,839 --> 00:11:19,200
which

294
00:11:19,200 --> 00:11:20,959
which allows you to have your source

295
00:11:20,959 --> 00:11:22,959
code all

296
00:11:22,959 --> 00:11:24,560
cloned or forked

297
00:11:24,560 --> 00:11:26,320
locally and

298
00:11:26,320 --> 00:11:27,360
you can

299
00:11:27,360 --> 00:11:28,959
by running npm link you have a

300
00:11:28,959 --> 00:11:31,440
system-wide command

301
00:11:31,440 --> 00:11:34,240
so that allows you to um

302
00:11:34,240 --> 00:11:34,959
you

303
00:11:34,959 --> 00:11:36,079
basically

304
00:11:36,079 --> 00:11:38,399
allows you to run the purple team cli

305
00:11:38,399 --> 00:11:40,640
from the source code just by linking

306
00:11:40,640 --> 00:11:43,839
that up

307
00:11:45,680 --> 00:11:47,839
um so the workflows

308
00:11:47,839 --> 00:11:50,959
for the cli again

309
00:11:51,440 --> 00:11:54,320
are just listed here so we are

310
00:11:54,320 --> 00:11:57,279
we take the same three options

311
00:11:57,279 --> 00:11:58,079
uh

312
00:11:58,079 --> 00:12:01,040
one two and three and then we've just

313
00:12:01,040 --> 00:12:03,200
got a little bit of uh

314
00:12:03,200 --> 00:12:05,040
details under those now if we're

315
00:12:05,040 --> 00:12:06,560
actually running

316
00:12:06,560 --> 00:12:07,839
the cli

317
00:12:07,839 --> 00:12:09,600
there's not a lot to it

318
00:12:09,600 --> 00:12:13,040
it's it's fairly straightforward

319
00:12:14,000 --> 00:12:16,480
um of course there is

320
00:12:16,480 --> 00:12:18,160
there's the configuration

321
00:12:18,160 --> 00:12:20,000
to be done as well

322
00:12:20,000 --> 00:12:21,200
so once you've actually got this

323
00:12:21,200 --> 00:12:25,320
installed you'll need

324
00:12:25,839 --> 00:12:28,560
so you need a job file uh which i'll

325
00:12:28,560 --> 00:12:31,518
show you shortly

326
00:12:33,200 --> 00:12:34,000
and

327
00:12:34,000 --> 00:12:36,480
you'll need to

328
00:12:36,480 --> 00:12:40,079
configure the actual um just up

329
00:12:40,079 --> 00:12:43,839
values that are in the config file

330
00:12:45,200 --> 00:12:47,600
and some details here around uh

331
00:12:47,600 --> 00:12:50,240
a ui whether you're using other ui or

332
00:12:50,240 --> 00:12:51,760
whether you're using no ui which is

333
00:12:51,760 --> 00:12:54,880
basically just headless mode

334
00:12:58,000 --> 00:13:02,600
so emulating the adverse lambda service

335
00:13:07,680 --> 00:13:10,750
[Music]

336
00:13:13,120 --> 00:13:15,760
so these are the commands that

337
00:13:15,760 --> 00:13:17,200
you'll need if you're actually doing

338
00:13:17,200 --> 00:13:18,880
this manually

339
00:13:18,880 --> 00:13:20,480
um

340
00:13:20,480 --> 00:13:22,079
generally you won't

341
00:13:22,079 --> 00:13:24,399
use these if you're just

342
00:13:24,399 --> 00:13:26,480
just running it as like a full system

343
00:13:26,480 --> 00:13:28,959
test run which i'll show you shortly

344
00:13:28,959 --> 00:13:31,120
but um but the commands are there if you

345
00:13:31,120 --> 00:13:32,800
need them everything's here if you

346
00:13:32,800 --> 00:13:35,839
actually need it

347
00:13:36,079 --> 00:13:38,880
no debugging

348
00:13:41,360 --> 00:13:43,519
so i've got details here for debugging

349
00:13:43,519 --> 00:13:46,680
your lambdas

350
00:13:48,959 --> 00:13:51,199
and the application scanner and any sub

351
00:13:51,199 --> 00:13:54,320
processors which is uh cucumber

352
00:13:54,320 --> 00:13:56,240
at the moment so you can debug into the

353
00:13:56,240 --> 00:13:58,480
app scanner and then you can do a debug

354
00:13:58,480 --> 00:14:00,320
into the sub processors

355
00:14:00,320 --> 00:14:03,199
reasonably easy so those are the steps

356
00:14:03,199 --> 00:14:05,600
for that the other testers are a lot

357
00:14:05,600 --> 00:14:07,519
simpler

358
00:14:07,519 --> 00:14:10,399
uh because they don't

359
00:14:10,639 --> 00:14:13,040
uh because there's just one decision for

360
00:14:13,040 --> 00:14:14,959
the likes of the um tls

361
00:14:14,959 --> 00:14:16,560
scanner

362
00:14:16,560 --> 00:14:17,600
and

363
00:14:17,600 --> 00:14:19,360
the orchestrator doesn't have any sub

364
00:14:19,360 --> 00:14:21,920
processors

365
00:14:22,240 --> 00:14:25,440
and the front end yeah some

366
00:14:25,440 --> 00:14:27,760
debugging details there as well

367
00:14:27,760 --> 00:14:30,560
and the full system test run which i

368
00:14:30,560 --> 00:14:34,719
which is actually the next slide

369
00:14:34,800 --> 00:14:37,920
steps there for that so the doc compose

370
00:14:37,920 --> 00:14:40,240
ui which brings up the stage one

371
00:14:40,240 --> 00:14:42,240
containers host your lambda function so

372
00:14:42,240 --> 00:14:44,320
i show you all this soon i'm actually in

373
00:14:44,320 --> 00:14:45,120
a

374
00:14:45,120 --> 00:14:48,800
running uh demo uh by way of video

375
00:14:48,800 --> 00:14:50,880
so you host lambda functions

376
00:14:50,880 --> 00:14:52,880
make sure your system under test running

377
00:14:52,880 --> 00:14:56,000
and accessible

378
00:14:56,839 --> 00:14:58,560
uh

379
00:14:58,560 --> 00:15:00,000
yeah so you run the docker compose to

380
00:15:00,000 --> 00:15:02,160
bring up stage one containers so stage

381
00:15:02,160 --> 00:15:05,360
one is the orchestrator and your testers

382
00:15:05,360 --> 00:15:07,279
and then start the cli

383
00:15:07,279 --> 00:15:08,320
and then

384
00:15:08,320 --> 00:15:10,959
that actually talks to your back end and

385
00:15:10,959 --> 00:15:14,719
that's pretty much it for that

386
00:15:19,440 --> 00:15:21,920
okay so i'm just going to change my uh

387
00:15:21,920 --> 00:15:23,600
screen sharing setup so you can actually

388
00:15:23,600 --> 00:15:27,399
hear the audio of this

389
00:15:57,200 --> 00:16:00,329
[Music]

390
00:16:00,399 --> 00:16:02,560
all right today i'm going to show you

391
00:16:02,560 --> 00:16:03,759
a test run

392
00:16:03,759 --> 00:16:06,880
with the back end components as well

393
00:16:06,880 --> 00:16:08,480
i'm starting docker stats to show you

394
00:16:08,480 --> 00:16:11,360
which containers are coming and going

395
00:16:11,360 --> 00:16:13,120
we start docker compose ui which is

396
00:16:13,120 --> 00:16:14,800
responsible for taking orders from our

397
00:16:14,800 --> 00:16:16,720
lambda functions to start and stop the

398
00:16:16,720 --> 00:16:19,440
stage 2 containers

399
00:16:19,440 --> 00:16:21,680
we start sam local which is responsible

400
00:16:21,680 --> 00:16:25,599
for hosting our lambda functions locally

401
00:16:26,240 --> 00:16:27,680
and we already have our system under

402
00:16:27,680 --> 00:16:29,279
test running

403
00:16:29,279 --> 00:16:31,360
now once we've built our stage one

404
00:16:31,360 --> 00:16:34,399
images with npm run dc-build

405
00:16:34,399 --> 00:16:38,639
we can bring them up with npm run dc up

406
00:16:38,639 --> 00:16:40,880
and then we start the cli in the bottom

407
00:16:40,880 --> 00:16:43,120
left terminal you can see the validated

408
00:16:43,120 --> 00:16:46,000
fielded and sanitized job file contents

409
00:16:46,000 --> 00:16:47,920
in the top right terminal docker stats

410
00:16:47,920 --> 00:16:50,079
is showing us the stage 2 containers

411
00:16:50,079 --> 00:16:51,440
being brought up

412
00:16:51,440 --> 00:16:52,880
in the bottom left terminal we're

413
00:16:52,880 --> 00:16:54,720
checking and retrying that the stage 2

414
00:16:54,720 --> 00:16:56,240
containers have come up and are

415
00:16:56,240 --> 00:16:59,199
responsive all testers are now running

416
00:16:59,199 --> 00:17:01,680
as the test run progresses in the cli

417
00:17:01,680 --> 00:17:03,680
tester complete panel that's the donut

418
00:17:03,680 --> 00:17:04,640
meters

419
00:17:04,640 --> 00:17:07,520
you'll see the percentages progress

420
00:17:07,520 --> 00:17:10,559
these are total percentages per tester

421
00:17:10,559 --> 00:17:12,959
in the running statistics panel just to

422
00:17:12,959 --> 00:17:15,359
the right of the donut meters each row

423
00:17:15,359 --> 00:17:17,679
represents a test session as defined in

424
00:17:17,679 --> 00:17:20,720
the job file here i'm tailing the cli

425
00:17:20,720 --> 00:17:23,119
tls tester log just to save right

426
00:17:23,119 --> 00:17:25,599
arrowing on the cli terminal to the tls

427
00:17:25,599 --> 00:17:27,760
tester screen and not being able to also

428
00:17:27,760 --> 00:17:29,760
see the app test to progress

429
00:17:29,760 --> 00:17:31,760
back to the running statistics panel the

430
00:17:31,760 --> 00:17:34,000
thresholds you see are also defined in

431
00:17:34,000 --> 00:17:36,640
the job file as alert thresholds a given

432
00:17:36,640 --> 00:17:38,640
test session will be considered a fail

433
00:17:38,640 --> 00:17:40,960
if the bug count exceeds the alert

434
00:17:40,960 --> 00:17:43,200
threshold the thresholds are useful for

435
00:17:43,200 --> 00:17:45,200
brownfields projects or you have

436
00:17:45,200 --> 00:17:47,679
existing defects but still want a test

437
00:17:47,679 --> 00:17:48,880
to pass

438
00:17:48,880 --> 00:17:50,960
these are the definitions you may find

439
00:17:50,960 --> 00:17:53,280
yourself referring to these quite often

440
00:17:53,280 --> 00:17:55,120
back to the running statistics panel

441
00:17:55,120 --> 00:17:57,039
you'll notice a complete column these

442
00:17:57,039 --> 00:17:59,200
cells represent percentage complete of

443
00:17:59,200 --> 00:18:01,600
the test session where you may have more

444
00:18:01,600 --> 00:18:05,360
than one of these for a given tester

445
00:18:05,360 --> 00:18:07,520
in order to initiate a test run the

446
00:18:07,520 --> 00:18:10,080
build user needs to define and supply a

447
00:18:10,080 --> 00:18:11,679
job file

448
00:18:11,679 --> 00:18:13,520
this is a documentation that will help

449
00:18:13,520 --> 00:18:15,440
explain the schema and help you

450
00:18:15,440 --> 00:18:19,799
construct your job file

451
00:18:29,520 --> 00:18:31,760
next i'll show you some example job

452
00:18:31,760 --> 00:18:34,160
files

453
00:18:36,559 --> 00:18:38,480
this job file is very similar to the one

454
00:18:38,480 --> 00:18:40,640
we're using for this test run

455
00:18:40,640 --> 00:18:41,760
except we're targeting

456
00:18:41,760 --> 00:18:44,760
nodegoat.sut.purpleteamhyphenlabs.com

457
00:18:46,080 --> 00:18:47,919
which is deployed using the purple team

458
00:18:47,919 --> 00:18:50,080
infrastructure as code system under test

459
00:18:50,080 --> 00:18:52,559
project

460
00:18:53,679 --> 00:18:56,799
the new bugs panel of the cli shows bugs

461
00:18:56,799 --> 00:18:58,960
over and above any specified alert

462
00:18:58,960 --> 00:19:00,559
thresholds

463
00:19:00,559 --> 00:19:02,480
if this count is above zero then you are

464
00:19:02,480 --> 00:19:04,559
going to have at least one failed test

465
00:19:04,559 --> 00:19:05,840
session

466
00:19:05,840 --> 00:19:08,080
the total test to progress meter to the

467
00:19:08,080 --> 00:19:11,120
right of new bugs shows the combined

468
00:19:11,120 --> 00:19:14,879
progress of all testers

469
00:19:21,760 --> 00:19:24,000
these logs i'm showing you are the raw

470
00:19:24,000 --> 00:19:26,559
cli logs taken from the current finished

471
00:19:26,559 --> 00:19:29,120
test run this particular log is from the

472
00:19:29,120 --> 00:19:31,679
low prove user test session of the

473
00:19:31,679 --> 00:19:33,840
current test run currently being written

474
00:19:33,840 --> 00:19:36,240
to the top of the two cli window panes

475
00:19:36,240 --> 00:19:37,760
as we speak

476
00:19:37,760 --> 00:19:39,520
you'll notice that this particular test

477
00:19:39,520 --> 00:19:41,520
session is only testing a single route

478
00:19:41,520 --> 00:19:43,600
the profile route of our system under

479
00:19:43,600 --> 00:19:45,280
test

480
00:19:45,280 --> 00:19:47,120
this particular log is from the admin

481
00:19:47,120 --> 00:19:49,200
user test session of the current test

482
00:19:49,200 --> 00:19:50,960
run currently being written to the

483
00:19:50,960 --> 00:19:53,280
bottom of the two cli window panes as we

484
00:19:53,280 --> 00:19:54,320
speak

485
00:19:54,320 --> 00:19:56,480
this test session is testing two of our

486
00:19:56,480 --> 00:19:58,480
system under test routes the profile

487
00:19:58,480 --> 00:20:01,440
route followed by the memos route

488
00:20:01,440 --> 00:20:03,440
as you can see the server tester is

489
00:20:03,440 --> 00:20:06,840
currently inactive

490
00:20:06,960 --> 00:20:09,520
now we're looking at tls tester log

491
00:20:09,520 --> 00:20:11,760
there's only ever one of these per test

492
00:20:11,760 --> 00:20:14,000
run

493
00:20:15,360 --> 00:20:16,880
you'll notice the color codes and

494
00:20:16,880 --> 00:20:18,640
amongst the text

495
00:20:18,640 --> 00:20:20,799
these are used to display the log text

496
00:20:20,799 --> 00:20:21,919
and color

497
00:20:21,919 --> 00:20:26,039
we'll see how this works soon

498
00:20:38,559 --> 00:20:40,400
we're looking at the same cli logs as

499
00:20:40,400 --> 00:20:41,520
before

500
00:20:41,520 --> 00:20:44,080
tools such as cat less and tail if

501
00:20:44,080 --> 00:20:45,840
configured correctly will render the

502
00:20:45,840 --> 00:20:47,360
color codes

503
00:20:47,360 --> 00:20:49,840
just reiterating that these cli logs are

504
00:20:49,840 --> 00:20:51,360
currently being written

505
00:20:51,360 --> 00:20:53,039
i've just taken them from the finished

506
00:20:53,039 --> 00:20:54,559
test run

507
00:20:54,559 --> 00:20:56,640
this is the low priv user test session

508
00:20:56,640 --> 00:20:59,679
cli log from the application tester

509
00:20:59,679 --> 00:21:01,679
as you can see this is a failed t

510
00:21:01,679 --> 00:21:03,520
session

511
00:21:03,520 --> 00:21:05,520
this is the one and only tls scanner

512
00:21:05,520 --> 00:21:07,679
test session cli log that i showed you

513
00:21:07,679 --> 00:21:08,799
before

514
00:21:08,799 --> 00:21:11,280
but with the color codes rendered

515
00:21:11,280 --> 00:21:13,520
these cli logs are what is printed to

516
00:21:13,520 --> 00:21:15,520
the cli terminal if you are running it

517
00:21:15,520 --> 00:21:18,720
in kiwi mode versus no ui mode right

518
00:21:18,720 --> 00:21:21,120
arrowing and left arrowing in the cli

519
00:21:21,120 --> 00:21:22,720
terminal will switch between the

520
00:21:22,720 --> 00:21:25,200
different tester windows as you can see

521
00:21:25,200 --> 00:21:27,039
this is a failed test session when you

522
00:21:27,039 --> 00:21:29,440
see the outcomes have been downloaded to

523
00:21:29,440 --> 00:21:31,600
message that means the test run is

524
00:21:31,600 --> 00:21:33,760
complete and you can now inspect the

525
00:21:33,760 --> 00:21:36,799
report files generated by the emissaries

526
00:21:36,799 --> 00:21:38,799
and the result files generated by

527
00:21:38,799 --> 00:21:41,440
cucumber

528
00:21:41,440 --> 00:21:43,280
this is what the outcomes archive looks

529
00:21:43,280 --> 00:21:44,799
like once it's been packed by the

530
00:21:44,799 --> 00:21:47,360
orchestrator and sent to the cli

531
00:21:47,360 --> 00:21:49,280
you'll notice the report and result

532
00:21:49,280 --> 00:21:50,640
files

533
00:21:50,640 --> 00:21:53,039
this is the html report file generated

534
00:21:53,039 --> 00:21:55,200
by the application emissary

535
00:21:55,200 --> 00:21:56,880
zap proxy

536
00:21:56,880 --> 00:21:59,600
for the low priv user app scanner test

537
00:21:59,600 --> 00:22:00,880
session

538
00:22:00,880 --> 00:22:03,280
it lists the alerts or defects along

539
00:22:03,280 --> 00:22:04,960
with how they were found

540
00:22:04,960 --> 00:22:07,280
how you can reproduce them as well as

541
00:22:07,280 --> 00:22:11,399
directions for fixing them

542
00:22:59,120 --> 00:23:01,520
this is the html report file generated

543
00:23:01,520 --> 00:23:03,440
by the application emissary for the

544
00:23:03,440 --> 00:23:08,600
admin user app scanner test session

545
00:23:19,600 --> 00:23:22,080
this is the html portfole generated by

546
00:23:22,080 --> 00:23:24,679
the tls emissary

547
00:23:24,679 --> 00:23:26,480
testdesell.esh

548
00:23:26,480 --> 00:23:28,720
for the one and only tls scanner test

549
00:23:28,720 --> 00:23:31,720
session

550
00:23:53,360 --> 00:23:55,279
this is the markdown report file

551
00:23:55,279 --> 00:23:57,600
generated by the application emissary

552
00:23:57,600 --> 00:24:00,320
for the low pro user app scanner test

553
00:24:00,320 --> 00:24:03,320
session

554
00:24:26,080 --> 00:24:29,080
foreign

555
00:24:32,400 --> 00:24:34,240
this is the markdown report file

556
00:24:34,240 --> 00:24:36,720
generated by the application emissary

557
00:24:36,720 --> 00:24:39,039
for the admin user appscanner test

558
00:24:39,039 --> 00:24:42,039
session

559
00:25:13,600 --> 00:25:16,799
this is a csv report file generated by

560
00:25:16,799 --> 00:25:19,200
the tls emissary for the one and only

561
00:25:19,200 --> 00:25:23,720
tls scanner test session

562
00:25:28,240 --> 00:25:30,240
here i'm highlighting the severity

563
00:25:30,240 --> 00:25:31,360
levels

564
00:25:31,360 --> 00:25:35,120
these can be one of low medium high or

565
00:25:35,120 --> 00:25:37,360
critical

566
00:25:37,360 --> 00:25:39,520
refer to the job file documentation for

567
00:25:39,520 --> 00:25:43,480
further details on these

568
00:25:50,320 --> 00:25:53,120
this is the json report file generated

569
00:25:53,120 --> 00:25:56,240
by the tls emissary for the one and only

570
00:25:56,240 --> 00:26:00,360
tilley scanner test session

571
00:26:10,640 --> 00:26:12,799
these are the three indie json result

572
00:26:12,799 --> 00:26:15,120
files generated by cucumber for the

573
00:26:15,120 --> 00:26:17,200
three test sessions

574
00:26:17,200 --> 00:26:19,840
like web user app scanner tech session

575
00:26:19,840 --> 00:26:22,720
admin user app scanner test session

576
00:26:22,720 --> 00:26:24,640
and the one and only tls scanner

577
00:26:24,640 --> 00:26:27,200
decision

578
00:26:29,919 --> 00:26:32,240
the app scanner admin user decision for

579
00:26:32,240 --> 00:26:34,720
the profile route has completed

580
00:26:34,720 --> 00:26:37,200
it's now starting on the memos route

581
00:26:37,200 --> 00:26:39,120
the appscanner low priv user test

582
00:26:39,120 --> 00:26:42,000
session for the single profile route has

583
00:26:42,000 --> 00:26:43,120
finished

584
00:26:43,120 --> 00:26:44,799
the log which is just scrolled off the

585
00:26:44,799 --> 00:26:47,200
screen provides defect counts and

586
00:26:47,200 --> 00:26:50,960
details of where to look in the reports

587
00:26:50,960 --> 00:26:52,960
this is the log and outcomes files

588
00:26:52,960 --> 00:26:55,760
documentation

589
00:27:04,640 --> 00:27:07,279
the app scanner admin user test session

590
00:27:07,279 --> 00:27:09,919
for the memos route has completed

591
00:27:09,919 --> 00:27:11,520
which means the test session its

592
00:27:11,520 --> 00:27:13,039
earnings finished

593
00:27:13,039 --> 00:27:15,440
in this case both low pro user and admin

594
00:27:15,440 --> 00:27:17,919
user test sessions have failed

595
00:27:17,919 --> 00:27:20,159
the cli log file that i showed earlier

596
00:27:20,159 --> 00:27:22,000
contains details of how to use the

597
00:27:22,000 --> 00:27:24,960
report files to locate and remediate the

598
00:27:24,960 --> 00:27:26,880
defects

599
00:27:26,880 --> 00:27:28,720
stage 2 containers have been brought

600
00:27:28,720 --> 00:27:29,600
down

601
00:27:29,600 --> 00:27:32,159
and we've just right arrowed to the tls

602
00:27:32,159 --> 00:27:35,840
tester to watch it finished

603
00:28:20,320 --> 00:28:22,559
the test session for the tls scanner has

604
00:28:22,559 --> 00:28:23,840
now finished

605
00:28:23,840 --> 00:28:26,080
this also failed because the defect

606
00:28:26,080 --> 00:28:26,960
count

607
00:28:26,960 --> 00:28:28,799
exceeded the alert threshold that the

608
00:28:28,799 --> 00:28:31,840
build user defined in the job file

609
00:28:31,840 --> 00:28:33,840
you may also notice that the total

610
00:28:33,840 --> 00:28:37,039
tester progress meter hasn't reached 100

611
00:28:37,039 --> 00:28:39,039
this is because the server scanner isn't

612
00:28:39,039 --> 00:28:40,799
currently enabled

613
00:28:40,799 --> 00:28:42,799
as you can see the outcomes files have

614
00:28:42,799 --> 00:28:47,480
been downloaded for you to inspect

615
00:28:48,280 --> 00:28:51,410
[Music]

616
00:29:12,480 --> 00:29:14,000
cool so that was a

617
00:29:14,000 --> 00:29:17,039
full uh run to of uh purple team but a

618
00:29:17,039 --> 00:29:18,720
full test run

619
00:29:18,720 --> 00:29:20,399
with a couple of um

620
00:29:20,399 --> 00:29:23,120
test sessions there

621
00:29:23,120 --> 00:29:24,640
so remember um

622
00:29:24,640 --> 00:29:26,480
we're looking for contributors to help

623
00:29:26,480 --> 00:29:29,679
um i work on people team as well um

624
00:29:29,679 --> 00:29:32,000
i'm on the owasp slack as well currently

625
00:29:32,000 --> 00:29:35,600
if you have any questions later on

626
00:29:35,600 --> 00:29:38,080
um then jump on there and

627
00:29:38,080 --> 00:29:39,440
uh

628
00:29:39,440 --> 00:29:41,039
ping me and

629
00:29:41,039 --> 00:29:42,880
and i'll answer that

630
00:29:42,880 --> 00:29:46,000
uh so that's pretty much it from my talk

631
00:29:46,000 --> 00:29:48,080
um i guess it's if anyone's got any

632
00:29:48,080 --> 00:29:51,199
questions now

