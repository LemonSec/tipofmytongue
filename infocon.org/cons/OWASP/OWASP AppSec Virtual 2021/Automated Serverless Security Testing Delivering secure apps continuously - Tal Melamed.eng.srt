1
00:00:01,420 --> 00:00:05,630
[Music]

2
00:00:06,480 --> 00:00:09,599
hi everyone thanks for joining um so

3
00:00:09,599 --> 00:00:11,519
i'll be talking today about serverless

4
00:00:11,519 --> 00:00:13,759
security testing or automated security

5
00:00:13,759 --> 00:00:15,599
server security testing

6
00:00:15,599 --> 00:00:19,439
and how to uh make sure your serverless

7
00:00:19,439 --> 00:00:22,080
development is uh

8
00:00:22,080 --> 00:00:24,720
going uh or

9
00:00:24,720 --> 00:00:27,279
moving into production secured

10
00:00:27,279 --> 00:00:30,320
without uh delay and without friction so

11
00:00:30,320 --> 00:00:32,159
my name is tal

12
00:00:32,159 --> 00:00:33,600
um

13
00:00:33,600 --> 00:00:34,960
i'm uh

14
00:00:34,960 --> 00:00:36,960
right now i'm a senior senior director

15
00:00:36,960 --> 00:00:39,280
at contra security leading the

16
00:00:39,280 --> 00:00:41,360
serverless and cloud native development

17
00:00:41,360 --> 00:00:44,239
in the israeli innovation center uh

18
00:00:44,239 --> 00:00:45,920
previous to that i was ceo and

19
00:00:45,920 --> 00:00:48,480
co-founder at cloud essence got acquired

20
00:00:48,480 --> 00:00:49,200
by

21
00:00:49,200 --> 00:00:50,320
contrast

22
00:00:50,320 --> 00:00:53,600
about a year ago and before that i had

23
00:00:53,600 --> 00:00:56,239
the security research at protego labs

24
00:00:56,239 --> 00:00:58,399
got acquired by checkpoint so this is

25
00:00:58,399 --> 00:01:01,440
why i'm coming from a serverless

26
00:01:01,440 --> 00:01:04,879
background those two startups uh were

27
00:01:04,879 --> 00:01:07,520
doing serverless security so before it

28
00:01:07,520 --> 00:01:10,000
was serverless runtime protection and

29
00:01:10,000 --> 00:01:13,520
then i decided to take it shift left and

30
00:01:13,520 --> 00:01:17,360
bring it into the development life cycle

31
00:01:17,360 --> 00:01:20,479
that's it you can reach me at any of

32
00:01:20,479 --> 00:01:21,840
these

33
00:01:21,840 --> 00:01:24,000
social media

34
00:01:24,000 --> 00:01:25,200
channels so

35
00:01:25,200 --> 00:01:27,600
forrester says that by the end of the

36
00:01:27,600 --> 00:01:28,479
year

37
00:01:28,479 --> 00:01:29,759
25

38
00:01:29,759 --> 00:01:32,079
of all developers will use serverless

39
00:01:32,079 --> 00:01:33,280
regularly

40
00:01:33,280 --> 00:01:36,640
that means that one of four i hope that

41
00:01:36,640 --> 00:01:39,280
uh for you the audience you're already

42
00:01:39,280 --> 00:01:40,799
starting uh

43
00:01:40,799 --> 00:01:43,360
or using serverless i think it's it's

44
00:01:43,360 --> 00:01:46,640
amazing it really uh lets you

45
00:01:46,640 --> 00:01:47,680
uh

46
00:01:47,680 --> 00:01:50,479
focus on what matters

47
00:01:50,479 --> 00:01:52,720
okay so uh the cloud native

48
00:01:52,720 --> 00:01:54,479
transformation in general is something

49
00:01:54,479 --> 00:01:56,640
that already started we've been hearing

50
00:01:56,640 --> 00:02:00,079
about cloud native containers serverless

51
00:02:00,079 --> 00:02:02,079
in the past couple of years a few

52
00:02:02,079 --> 00:02:04,799
companies are leading or pioneering this

53
00:02:04,799 --> 00:02:07,040
like irobot and skyscanner

54
00:02:07,040 --> 00:02:09,280
but even if we're moving back to the

55
00:02:09,280 --> 00:02:12,800
bigger or heavier companies like att

56
00:02:12,800 --> 00:02:14,160
mastercard

57
00:02:14,160 --> 00:02:16,640
coca-cola etc they already

58
00:02:16,640 --> 00:02:18,879
decided to move and started the

59
00:02:18,879 --> 00:02:20,959
transformation into cloud native even

60
00:02:20,959 --> 00:02:24,640
though that right now they're probably

61
00:02:25,280 --> 00:02:27,760
working in a hybrid solution while

62
00:02:27,760 --> 00:02:30,239
having uh the legacy application as a

63
00:02:30,239 --> 00:02:32,400
monolith they're start developing new

64
00:02:32,400 --> 00:02:34,000
applications or new versions of the

65
00:02:34,000 --> 00:02:36,080
application in cloud native so we're

66
00:02:36,080 --> 00:02:38,560
going to see everyone or most of the

67
00:02:38,560 --> 00:02:41,760
companies moving towards the full fully

68
00:02:41,760 --> 00:02:44,879
cloud native environment this is uh

69
00:02:44,879 --> 00:02:47,599
according to almost every prediction but

70
00:02:47,599 --> 00:02:50,319
what is cloud native uh development or

71
00:02:50,319 --> 00:02:52,720
serverless development to that matter so

72
00:02:52,720 --> 00:02:56,560
it's different in uh in several ways the

73
00:02:56,560 --> 00:02:58,080
first one is the architecture the

74
00:02:58,080 --> 00:03:00,480
architecture is different it's more it's

75
00:03:00,480 --> 00:03:02,640
less of a synchronous monolith

76
00:03:02,640 --> 00:03:05,360
application with one big flow

77
00:03:05,360 --> 00:03:08,239
most uh it's an event driven

78
00:03:08,239 --> 00:03:11,760
architecture who takes uh multiple

79
00:03:11,760 --> 00:03:14,480
dozens and thousands even ten thousand

80
00:03:14,480 --> 00:03:16,560
of different resources and just connects

81
00:03:16,560 --> 00:03:18,879
them with some configuration and some

82
00:03:18,879 --> 00:03:21,360
flows that creates this big logic of

83
00:03:21,360 --> 00:03:24,400
application but we'll talk later about

84
00:03:24,400 --> 00:03:25,920
what are the challenges when you're

85
00:03:25,920 --> 00:03:27,120
doing it

86
00:03:27,120 --> 00:03:30,159
the cycles are different less model less

87
00:03:30,159 --> 00:03:31,440
waterfall

88
00:03:31,440 --> 00:03:34,720
more agile super agile hyper hydra

89
00:03:34,720 --> 00:03:36,720
whatever you want to call it devops

90
00:03:36,720 --> 00:03:38,560
operation devsecops you've probably

91
00:03:38,560 --> 00:03:39,920
heard of it

92
00:03:39,920 --> 00:03:41,280
short cycles

93
00:03:41,280 --> 00:03:44,159
short experiments you can push

94
00:03:44,159 --> 00:03:46,959
value into production on a daily basis

95
00:03:46,959 --> 00:03:48,080
basically

96
00:03:48,080 --> 00:03:50,720
the process the processes are as well

97
00:03:50,720 --> 00:03:52,799
different they're most uh around

98
00:03:52,799 --> 00:03:55,040
automation if you don't have automation

99
00:03:55,040 --> 00:03:57,439
it's really hard to control your cloud

100
00:03:57,439 --> 00:04:01,519
development uh so uh if you're uh

101
00:04:01,519 --> 00:04:03,519
traditionally you were looking at a

102
00:04:03,519 --> 00:04:06,400
server update where everyone is crossing

103
00:04:06,400 --> 00:04:08,720
finger for the new version coming up and

104
00:04:08,720 --> 00:04:11,280
their maintenance time no it's not like

105
00:04:11,280 --> 00:04:14,000
this anymore uh production code

106
00:04:14,000 --> 00:04:16,478
production is shipped uh sorry code is

107
00:04:16,478 --> 00:04:19,279
shipped to production uh every day every

108
00:04:19,279 --> 00:04:22,320
minute without stopping um

109
00:04:22,320 --> 00:04:24,560
and it can coexist

110
00:04:24,560 --> 00:04:27,759
with uh the current versions

111
00:04:27,759 --> 00:04:29,759
at the same time so you don't have to

112
00:04:29,759 --> 00:04:32,720
stop test maintenance

113
00:04:32,720 --> 00:04:34,720
you're really just pushing more and more

114
00:04:34,720 --> 00:04:36,320
value into production

115
00:04:36,320 --> 00:04:40,000
the decision makers are also

116
00:04:40,000 --> 00:04:42,639
changing a little bit it's less about

117
00:04:42,639 --> 00:04:44,080
top down

118
00:04:44,080 --> 00:04:46,560
not the engineering manager takes the

119
00:04:46,560 --> 00:04:48,240
decision to

120
00:04:48,240 --> 00:04:50,720
push something but more

121
00:04:50,720 --> 00:04:53,919
responsibility is given to the developer

122
00:04:53,919 --> 00:04:55,759
developers themselves to push into

123
00:04:55,759 --> 00:04:57,600
production to take decisions to make

124
00:04:57,600 --> 00:05:00,720
take responsibility uh even security in

125
00:05:00,720 --> 00:05:03,919
uh in some cases is uh

126
00:05:03,919 --> 00:05:05,120
in the

127
00:05:05,120 --> 00:05:07,199
uh in the responsibility of the

128
00:05:07,199 --> 00:05:11,440
developer when uh pushing new code

129
00:05:11,440 --> 00:05:13,440
serverless architecture this is a

130
00:05:13,440 --> 00:05:15,919
picture of a relatively small

131
00:05:15,919 --> 00:05:18,720
application i would say

132
00:05:18,720 --> 00:05:20,320
some kind of a graph

133
00:05:20,320 --> 00:05:23,840
flows and connections that we created

134
00:05:23,840 --> 00:05:26,800
so if you if you look at it like this

135
00:05:26,800 --> 00:05:28,479
you have to understand that each of

136
00:05:28,479 --> 00:05:30,560
those resources that you see on the

137
00:05:30,560 --> 00:05:31,520
screen

138
00:05:31,520 --> 00:05:32,560
is a

139
00:05:32,560 --> 00:05:35,360
single standalone component completely

140
00:05:35,360 --> 00:05:36,479
standalone

141
00:05:36,479 --> 00:05:38,400
and you have to take care of it uh by

142
00:05:38,400 --> 00:05:40,560
itself so you have to take care of the

143
00:05:40,560 --> 00:05:42,639
access control zero trust or whatever

144
00:05:42,639 --> 00:05:44,400
the authentication the the input

145
00:05:44,400 --> 00:05:47,360
validation and all the security aspects

146
00:05:47,360 --> 00:05:49,440
on each of those components yes

147
00:05:49,440 --> 00:05:51,759
sometimes you can say okay whatever

148
00:05:51,759 --> 00:05:53,360
comes from um

149
00:05:53,360 --> 00:05:56,479
a trusted si a trusted zone maybe or a

150
00:05:56,479 --> 00:05:57,840
trusted

151
00:05:57,840 --> 00:05:59,280
uh resource

152
00:05:59,280 --> 00:06:02,080
i will not uh i will take the risk

153
00:06:02,080 --> 00:06:04,240
but you still have to understand where

154
00:06:04,240 --> 00:06:06,960
are your uh entry points what are your

155
00:06:06,960 --> 00:06:08,160
perimeters

156
00:06:08,160 --> 00:06:10,639
and as we will see uh during this talk

157
00:06:10,639 --> 00:06:11,840
you'll see that it's a little bit

158
00:06:11,840 --> 00:06:14,240
different than what we were used to

159
00:06:14,240 --> 00:06:16,080
so think about it

160
00:06:16,080 --> 00:06:19,039
when we're approaching security teams

161
00:06:19,039 --> 00:06:21,360
that uh their organization organization

162
00:06:21,360 --> 00:06:25,039
talks about uh develops on serverless

163
00:06:25,039 --> 00:06:27,840
develop service applications they don't

164
00:06:27,840 --> 00:06:30,000
really yeah they can tell you yeah we

165
00:06:30,000 --> 00:06:32,000
have 300 lambda functions or around that

166
00:06:32,000 --> 00:06:34,400
numbers a couple of apis three databases

167
00:06:34,400 --> 00:06:37,280
etc but they don't really understand

168
00:06:37,280 --> 00:06:39,520
what is connected to what and this is

169
00:06:39,520 --> 00:06:42,160
not something that you can really see uh

170
00:06:42,160 --> 00:06:44,319
unless you're you have the entire

171
00:06:44,319 --> 00:06:46,880
context of the cloud and you're able to

172
00:06:46,880 --> 00:06:49,440
make the connections

173
00:06:49,440 --> 00:06:51,039
so this is a good

174
00:06:51,039 --> 00:06:52,319
uh

175
00:06:52,319 --> 00:06:54,000
visibility of

176
00:06:54,000 --> 00:06:56,240
what servos application looks like and

177
00:06:56,240 --> 00:06:59,520
what are the challenges are

178
00:06:59,840 --> 00:07:03,599
uh okay so serverless is most mostly an

179
00:07:03,599 --> 00:07:06,479
event-driven architecture again less of

180
00:07:06,479 --> 00:07:09,520
a synchronous request response type of

181
00:07:09,520 --> 00:07:12,240
application yeah there might be

182
00:07:12,240 --> 00:07:16,400
an api that expects uh request and

183
00:07:16,400 --> 00:07:18,960
response synchronously but it's not what

184
00:07:18,960 --> 00:07:22,160
it's about and what happens is that an

185
00:07:22,160 --> 00:07:24,800
event happens in the cloud and the event

186
00:07:24,800 --> 00:07:27,039
can be a log

187
00:07:27,039 --> 00:07:31,039
an iot rule a dynamo or a database

188
00:07:31,039 --> 00:07:33,440
entry change a file

189
00:07:33,440 --> 00:07:36,000
upload to a bucket or file download or

190
00:07:36,000 --> 00:07:38,880
delete or an api call

191
00:07:38,880 --> 00:07:42,000
uh it could be a code commit or any

192
00:07:42,000 --> 00:07:42,800
other

193
00:07:42,800 --> 00:07:45,120
event that you can think about

194
00:07:45,120 --> 00:07:47,680
that is configured to run a function

195
00:07:47,680 --> 00:07:49,520
this function in this case

196
00:07:49,520 --> 00:07:52,080
we will mostly talk about aws

197
00:07:52,080 --> 00:07:54,479
uh around aws because it's the most

198
00:07:54,479 --> 00:07:55,840
common one

199
00:07:55,840 --> 00:07:57,280
so in this case

200
00:07:57,280 --> 00:07:59,360
your code your application

201
00:07:59,360 --> 00:08:03,919
uh is running this uh this code right so

202
00:08:03,919 --> 00:08:05,520
everything else

203
00:08:05,520 --> 00:08:07,840
is taken care or is uh

204
00:08:07,840 --> 00:08:10,479
given as a service by the cloud provider

205
00:08:10,479 --> 00:08:12,720
all you have to do is write your code

206
00:08:12,720 --> 00:08:14,000
and make those

207
00:08:14,000 --> 00:08:16,800
arrows and by arrows i mean set the

208
00:08:16,800 --> 00:08:20,240
configuration what is my event to start

209
00:08:20,240 --> 00:08:23,280
running my code and when the code

210
00:08:23,280 --> 00:08:26,560
executes or runs what other services am

211
00:08:26,560 --> 00:08:28,080
i connecting to

212
00:08:28,080 --> 00:08:29,840
so what happens is that the event

213
00:08:29,840 --> 00:08:30,800
happens

214
00:08:30,800 --> 00:08:33,760
uh the cloud provider spins up uh

215
00:08:33,760 --> 00:08:36,479
at um an environment for you it's

216
00:08:36,479 --> 00:08:38,320
some kind of a closed container so you

217
00:08:38,320 --> 00:08:40,080
cannot really ssh to it it's a given

218
00:08:40,080 --> 00:08:41,200
environment

219
00:08:41,200 --> 00:08:44,720
uh with your code inside uh the code

220
00:08:44,720 --> 00:08:47,760
runs and when it's uh finished to run

221
00:08:47,760 --> 00:08:49,920
then the environment is shut down so you

222
00:08:49,920 --> 00:08:53,120
don't have any access other than the uh

223
00:08:53,120 --> 00:08:54,560
the code itself

224
00:08:54,560 --> 00:08:56,800
that runs

225
00:08:56,800 --> 00:08:58,640
but beware because

226
00:08:58,640 --> 00:09:00,160
when we're talking about code we're

227
00:09:00,160 --> 00:09:02,800
still talking about application security

228
00:09:02,800 --> 00:09:04,480
so your code

229
00:09:04,480 --> 00:09:07,120
could lead to your mistakes and some big

230
00:09:07,120 --> 00:09:09,120
cloud disasters and we'll talk about

231
00:09:09,120 --> 00:09:10,320
that

232
00:09:10,320 --> 00:09:12,399
all right so if we're taking the aws

233
00:09:12,399 --> 00:09:14,720
lambda environment and we'll try to

234
00:09:14,720 --> 00:09:17,200
understand some of the security aspects

235
00:09:17,200 --> 00:09:18,399
of it

236
00:09:18,399 --> 00:09:21,040
um we can think about a few things first

237
00:09:21,040 --> 00:09:24,080
of all the environment is a read-only

238
00:09:24,080 --> 00:09:25,200
environment

239
00:09:25,200 --> 00:09:28,080
so all the things inside except from the

240
00:09:28,080 --> 00:09:30,240
slash temp directory

241
00:09:30,240 --> 00:09:32,560
is given you to you by the environment

242
00:09:32,560 --> 00:09:35,040
and it's a read-only so

243
00:09:35,040 --> 00:09:38,399
for example uh information like the code

244
00:09:38,399 --> 00:09:40,160
resides inside

245
00:09:40,160 --> 00:09:43,200
uh information about the keys of the the

246
00:09:43,200 --> 00:09:46,240
key that gives the the lambda the

247
00:09:46,240 --> 00:09:48,080
function the environment access to other

248
00:09:48,080 --> 00:09:49,040
to to

249
00:09:49,040 --> 00:09:51,680
talk with other services in the cloud

250
00:09:51,680 --> 00:09:54,880
also reside inside but other things uh

251
00:09:54,880 --> 00:09:57,519
usually last matter so if we're used to

252
00:09:57,519 --> 00:09:58,720
the

253
00:09:58,720 --> 00:10:01,680
uh poc that we're running on servers to

254
00:10:01,680 --> 00:10:03,360
see if we can

255
00:10:03,360 --> 00:10:05,680
steal sensitive file then the first file

256
00:10:05,680 --> 00:10:08,480
we'll try to reach is edc password right

257
00:10:08,480 --> 00:10:10,399
that file doesn't have any meaning in

258
00:10:10,399 --> 00:10:12,240
your environment because

259
00:10:12,240 --> 00:10:13,600
it's a

260
00:10:13,600 --> 00:10:15,200
it's a closed environment so you don't

261
00:10:15,200 --> 00:10:17,279
have ssh to it you don't have any other

262
00:10:17,279 --> 00:10:19,600
services running in it uh the

263
00:10:19,600 --> 00:10:21,680
environment as i said is not wired to

264
00:10:21,680 --> 00:10:23,440
the internet so you can

265
00:10:23,440 --> 00:10:25,920
as a secretary yes you can make http

266
00:10:25,920 --> 00:10:29,120
calls from within outside but you cannot

267
00:10:29,120 --> 00:10:31,040
really

268
00:10:31,040 --> 00:10:34,079
access the the runtime itself other than

269
00:10:34,079 --> 00:10:36,000
running the code and the data is

270
00:10:36,000 --> 00:10:38,079
temporary so when the environment or the

271
00:10:38,079 --> 00:10:40,560
code finished to run

272
00:10:40,560 --> 00:10:42,560
the environment shuts down and the data

273
00:10:42,560 --> 00:10:45,120
that was under slash 10

274
00:10:45,120 --> 00:10:46,399
is gone

275
00:10:46,399 --> 00:10:48,720
and i've put those stars next to it

276
00:10:48,720 --> 00:10:51,519
because it's not really gone

277
00:10:51,519 --> 00:10:54,480
the environment for performance reasons

278
00:10:54,480 --> 00:10:56,480
uh the cloud provider will keep your

279
00:10:56,480 --> 00:10:59,120
environment alive for next events so in

280
00:10:59,120 --> 00:11:00,800
order to avoid

281
00:11:00,800 --> 00:11:03,360
what is called uh cold start where the

282
00:11:03,360 --> 00:11:05,200
environment runs for the first time and

283
00:11:05,200 --> 00:11:07,839
it takes a few seconds to spin to make

284
00:11:07,839 --> 00:11:09,920
it ready uh

285
00:11:09,920 --> 00:11:13,040
so there is a reuse of environment and

286
00:11:13,040 --> 00:11:14,640
that means

287
00:11:14,640 --> 00:11:17,040
that for the security aspect of it that

288
00:11:17,040 --> 00:11:18,959
means that if your environment runs once

289
00:11:18,959 --> 00:11:20,640
and writes data into the slash stem

290
00:11:20,640 --> 00:11:23,200
directory and then another request

291
00:11:23,200 --> 00:11:26,079
coming in to execute the code again you

292
00:11:26,079 --> 00:11:27,200
might

293
00:11:27,200 --> 00:11:30,240
end up running on the same environment

294
00:11:30,240 --> 00:11:32,640
with the previous executions data or one

295
00:11:32,640 --> 00:11:36,160
of the previous execution data inside

296
00:11:36,160 --> 00:11:37,680
why the important

297
00:11:37,680 --> 00:11:40,079
well first you cannot rely on this so

298
00:11:40,079 --> 00:11:42,959
you cannot really say hey i want to

299
00:11:42,959 --> 00:11:46,000
continue to process the file the data on

300
00:11:46,000 --> 00:11:47,040
the next

301
00:11:47,040 --> 00:11:49,600
execution because you don't know which

302
00:11:49,600 --> 00:11:51,600
environment you'll be lending in

303
00:11:51,600 --> 00:11:53,600
so you cannot assume that but for

304
00:11:53,600 --> 00:11:55,360
security reasons

305
00:11:55,360 --> 00:11:57,360
if the data is there and someone has

306
00:11:57,360 --> 00:11:59,360
access to the environment

307
00:11:59,360 --> 00:12:00,800
because of

308
00:12:00,800 --> 00:12:02,560
some of the problems that we'll discuss

309
00:12:02,560 --> 00:12:07,040
today then you might end up with a

310
00:12:07,360 --> 00:12:09,760
leakage of sensitive data

311
00:12:09,760 --> 00:12:11,600
so you probably want to take care of

312
00:12:11,600 --> 00:12:13,200
that

313
00:12:13,200 --> 00:12:14,079
okay

314
00:12:14,079 --> 00:12:16,480
so we talked about a little bit about

315
00:12:16,480 --> 00:12:18,800
serverless but serverless security is

316
00:12:18,800 --> 00:12:20,959
that a thing

317
00:12:20,959 --> 00:12:22,480
so we can see a

318
00:12:22,480 --> 00:12:24,639
continuous increase yeah this is kind of

319
00:12:24,639 --> 00:12:27,120
quite old but you can see a continuous

320
00:12:27,120 --> 00:12:29,440
increase of serverless computing uh

321
00:12:29,440 --> 00:12:32,800
trends on google this is google trends

322
00:12:32,800 --> 00:12:34,079
and in the past

323
00:12:34,079 --> 00:12:34,880
uh

324
00:12:34,880 --> 00:12:37,040
five years there is more and more

325
00:12:37,040 --> 00:12:38,800
discussion around service it becomes

326
00:12:38,800 --> 00:12:41,440
more and more mainstream as i said a

327
00:12:41,440 --> 00:12:42,880
quarter of the developers should be

328
00:12:42,880 --> 00:12:45,200
using serverless by the end of the year

329
00:12:45,200 --> 00:12:47,360
uh but where you search about serverless

330
00:12:47,360 --> 00:12:48,639
security

331
00:12:48,639 --> 00:12:51,360
it seems like no one uh really

332
00:12:51,360 --> 00:12:54,240
think about it i i assume this is an

333
00:12:54,240 --> 00:12:57,600
extreme but it says until july

334
00:12:57,600 --> 00:13:01,680
uh not 2019 there was no more than maybe

335
00:13:01,680 --> 00:13:05,600
a one or two at the maximum

336
00:13:05,600 --> 00:13:07,760
searching serverless security so i need

337
00:13:07,760 --> 00:13:10,079
to develop serverless applications right

338
00:13:10,079 --> 00:13:12,880
now if i'm the developer the first thing

339
00:13:12,880 --> 00:13:14,800
i would want to see well not maybe not

340
00:13:14,800 --> 00:13:16,240
the first thing but the first three one

341
00:13:16,240 --> 00:13:18,320
of the first top three things i would

342
00:13:18,320 --> 00:13:21,519
search for in google is well one with

343
00:13:21,519 --> 00:13:24,079
how to do that second

344
00:13:24,079 --> 00:13:26,000
security but we know that it's not the

345
00:13:26,000 --> 00:13:28,720
case with everyone

346
00:13:28,720 --> 00:13:31,279
and and as you can see not enough people

347
00:13:31,279 --> 00:13:34,880
talk about it or at least look uh

348
00:13:34,880 --> 00:13:38,160
to look for information about it

349
00:13:38,160 --> 00:13:40,320
and i'm pretty sure this one is me

350
00:13:40,320 --> 00:13:41,839
throughout the entire time when i

351
00:13:41,839 --> 00:13:44,959
started working on that

352
00:13:45,440 --> 00:13:47,040
okay maybe it's not a thing maybe

353
00:13:47,040 --> 00:13:48,959
serverless security is not a thing and

354
00:13:48,959 --> 00:13:50,639
we can just apply traditional

355
00:13:50,639 --> 00:13:53,040
application or traditional appsec to

356
00:13:53,040 --> 00:13:56,000
serverless would that work

357
00:13:56,000 --> 00:13:58,399
well from experience

358
00:13:58,399 --> 00:14:01,199
it would slightly work not really i mean

359
00:14:01,199 --> 00:14:03,839
not something that you can scale not

360
00:14:03,839 --> 00:14:06,000
something that you can rely on when you

361
00:14:06,000 --> 00:14:07,920
uh developing service within your

362
00:14:07,920 --> 00:14:10,000
organization yeah if you have some

363
00:14:10,000 --> 00:14:12,000
experience in application security you

364
00:14:12,000 --> 00:14:14,079
might take some and apply some changes

365
00:14:14,079 --> 00:14:15,360
to your own

366
00:14:15,360 --> 00:14:17,360
but it's not something that you can just

367
00:14:17,360 --> 00:14:19,760
plug and play and let's see let's talk

368
00:14:19,760 --> 00:14:21,440
about it

369
00:14:21,440 --> 00:14:23,519
so first let's try to understand some of

370
00:14:23,519 --> 00:14:24,880
the changes

371
00:14:24,880 --> 00:14:27,040
in the landscape the security landscape

372
00:14:27,040 --> 00:14:27,920
of the

373
00:14:27,920 --> 00:14:30,000
application or the service application

374
00:14:30,000 --> 00:14:32,720
so here what i have is a

375
00:14:32,720 --> 00:14:35,279
screenshot of a very simple lambda

376
00:14:35,279 --> 00:14:36,160
function

377
00:14:36,160 --> 00:14:40,000
with just a few maybe less 30 lines of

378
00:14:40,000 --> 00:14:43,040
code or some minimize collapsed here but

379
00:14:43,040 --> 00:14:44,560
basically

380
00:14:44,560 --> 00:14:46,720
this is a very simple lambda function

381
00:14:46,720 --> 00:14:49,360
that receives an event the event is

382
00:14:49,360 --> 00:14:52,000
based on

383
00:14:53,839 --> 00:14:56,720
the event is based on a dynamo or the

384
00:14:56,720 --> 00:14:59,760
database changes and what it does is

385
00:14:59,760 --> 00:15:01,760
that it connects to a dynamodb which is

386
00:15:01,760 --> 00:15:05,680
a nosql database given service servers

387
00:15:05,680 --> 00:15:08,399
service given by aws

388
00:15:08,399 --> 00:15:10,480
access the orders table

389
00:15:10,480 --> 00:15:13,440
and then puts one item inside the table

390
00:15:13,440 --> 00:15:15,600
so it's like writing an entry into the

391
00:15:15,600 --> 00:15:16,880
table

392
00:15:16,880 --> 00:15:20,000
then response so maybe it's just an http

393
00:15:20,000 --> 00:15:20,800
uh

394
00:15:20,800 --> 00:15:21,760
anyway

395
00:15:21,760 --> 00:15:23,040
what

396
00:15:23,040 --> 00:15:26,240
is important here is that in order for

397
00:15:26,240 --> 00:15:29,199
this code to execute to work not for

398
00:15:29,199 --> 00:15:31,199
security for to work

399
00:15:31,199 --> 00:15:33,120
that means the developer

400
00:15:33,120 --> 00:15:34,800
needs to configure

401
00:15:34,800 --> 00:15:35,680
the

402
00:15:35,680 --> 00:15:36,639
uh

403
00:15:36,639 --> 00:15:40,560
access control or im right in identity

404
00:15:40,560 --> 00:15:42,240
and access management

405
00:15:42,240 --> 00:15:44,240
two for the function

406
00:15:44,240 --> 00:15:46,800
inside the cloud the environment inside

407
00:15:46,800 --> 00:15:48,399
the environment inside the cloud

408
00:15:48,399 --> 00:15:49,839
ecosystem

409
00:15:49,839 --> 00:15:51,600
that's by itself

410
00:15:51,600 --> 00:15:53,839
is a problem

411
00:15:53,839 --> 00:15:55,759
not in this specific case this would be

412
00:15:55,759 --> 00:15:59,360
easy just one api call so probably api

413
00:15:59,360 --> 00:16:01,279
sdk or api call whatever you want to

414
00:16:01,279 --> 00:16:03,440
call it but

415
00:16:03,440 --> 00:16:05,360
the problem is that

416
00:16:05,360 --> 00:16:06,959
in aws

417
00:16:06,959 --> 00:16:09,360
there are more than 7 000 different

418
00:16:09,360 --> 00:16:10,800
actions

419
00:16:10,800 --> 00:16:13,680
that you can choose from i think that by

420
00:16:13,680 --> 00:16:17,279
now it's probably even closer to to 10k

421
00:16:17,279 --> 00:16:19,040
that means that the developer at the

422
00:16:19,040 --> 00:16:20,560
time of writing the code needs to

423
00:16:20,560 --> 00:16:23,040
understand what is the permission that

424
00:16:23,040 --> 00:16:25,120
it needs to give to each of the

425
00:16:25,120 --> 00:16:26,079
functions

426
00:16:26,079 --> 00:16:29,440
yes uh so what happens usually and this

427
00:16:29,440 --> 00:16:32,880
is from experience is one of uh

428
00:16:32,880 --> 00:16:35,120
two things

429
00:16:35,120 --> 00:16:37,519
uh three things one is the developer is

430
00:16:37,519 --> 00:16:40,639
security oriented he's not developing

431
00:16:40,639 --> 00:16:43,519
mass serverless application he has time

432
00:16:43,519 --> 00:16:45,839
and he's aware of security then he

433
00:16:45,839 --> 00:16:48,480
review does security reviews or makes uh

434
00:16:48,480 --> 00:16:51,279
sure he understands understands what the

435
00:16:51,279 --> 00:16:53,040
function actually needs

436
00:16:53,040 --> 00:16:56,560
and then tries to create maybe a

437
00:16:56,560 --> 00:16:59,040
trial and error until it works the next

438
00:16:59,040 --> 00:17:01,279
thing that happens is that the developer

439
00:17:01,279 --> 00:17:04,160
goes to the documentation of this

440
00:17:04,160 --> 00:17:05,599
service

441
00:17:05,599 --> 00:17:07,839
and the third thing is very common is

442
00:17:07,839 --> 00:17:09,760
that the organizations say we're

443
00:17:09,760 --> 00:17:12,880
developing a lot of aws lambda functions

444
00:17:12,880 --> 00:17:15,280
uh we cannot really wait for each

445
00:17:15,280 --> 00:17:17,199
developer to investigate so what we're

446
00:17:17,199 --> 00:17:19,760
going to do and we cannot trust them for

447
00:17:19,760 --> 00:17:21,359
security so what we're going to do is

448
00:17:21,359 --> 00:17:23,439
that we're going to create

449
00:17:23,439 --> 00:17:26,240
certain roles inside the the cloud

450
00:17:26,240 --> 00:17:27,919
environment

451
00:17:27,919 --> 00:17:29,440
each has

452
00:17:29,440 --> 00:17:31,039
a certain purpose

453
00:17:31,039 --> 00:17:33,760
access level and the developer will

454
00:17:33,760 --> 00:17:36,480
choose one of those the best one maybe

455
00:17:36,480 --> 00:17:38,640
or the best the one that works would

456
00:17:38,640 --> 00:17:41,120
probably end up being

457
00:17:41,120 --> 00:17:43,200
that fits the function so what happens

458
00:17:43,200 --> 00:17:45,440
or what ends up being is that the

459
00:17:45,440 --> 00:17:47,360
developer will probably use some kind of

460
00:17:47,360 --> 00:17:50,080
a stars and wild cards which basically

461
00:17:50,080 --> 00:17:52,240
mean admin access that means in this

462
00:17:52,240 --> 00:17:54,799
case as you can see the function has the

463
00:17:54,799 --> 00:17:57,200
dynamodb star

464
00:17:57,200 --> 00:17:59,120
action permission that means that the

465
00:17:59,120 --> 00:18:02,160
function itself can perform any action

466
00:18:02,160 --> 00:18:04,480
inside this service that means creating

467
00:18:04,480 --> 00:18:07,039
databases deleting databases not talking

468
00:18:07,039 --> 00:18:10,000
about entries reading writing modifying

469
00:18:10,000 --> 00:18:11,280
access

470
00:18:11,280 --> 00:18:13,760
entries from the database and much more

471
00:18:13,760 --> 00:18:17,440
changing permissions changing

472
00:18:17,440 --> 00:18:19,600
backups anything that you can think

473
00:18:19,600 --> 00:18:20,480
about

474
00:18:20,480 --> 00:18:22,080
not only that

475
00:18:22,080 --> 00:18:25,520
it can also do that with a star here on

476
00:18:25,520 --> 00:18:28,240
any table that is configured inside the

477
00:18:28,240 --> 00:18:30,080
cloud configure not configured because

478
00:18:30,080 --> 00:18:32,559
they can actually create tables

479
00:18:32,559 --> 00:18:34,720
so basically this function

480
00:18:34,720 --> 00:18:38,640
is an admin of the dynamodb service

481
00:18:38,640 --> 00:18:40,799
what should have been done

482
00:18:40,799 --> 00:18:42,480
is that the developer should understand

483
00:18:42,480 --> 00:18:46,640
that put item is translate translates

484
00:18:46,640 --> 00:18:47,840
to

485
00:18:47,840 --> 00:18:49,039
oh sorry

486
00:18:49,039 --> 00:18:51,919
put item which is the action this is a

487
00:18:51,919 --> 00:18:56,480
part of code this is the aws

488
00:18:57,039 --> 00:18:58,480
transform

489
00:18:58,480 --> 00:18:59,200
or

490
00:18:59,200 --> 00:19:01,120
syntax for the permission for this

491
00:19:01,120 --> 00:19:02,240
action

492
00:19:02,240 --> 00:19:05,200
and the table itself should be specific

493
00:19:05,200 --> 00:19:07,360
to the table to the orders table which

494
00:19:07,360 --> 00:19:08,799
in this case can be found in the

495
00:19:08,799 --> 00:19:10,400
environment variable

496
00:19:10,400 --> 00:19:13,440
when doing those two things

497
00:19:13,440 --> 00:19:15,760
given those two permissions setting

498
00:19:15,760 --> 00:19:17,200
those two permissions inside the

499
00:19:17,200 --> 00:19:19,280
function we're really limiting the

500
00:19:19,280 --> 00:19:21,919
ability of the function inside the cloud

501
00:19:21,919 --> 00:19:24,480
the impact or the blast radius

502
00:19:24,480 --> 00:19:26,799
that means that even if the function is

503
00:19:26,799 --> 00:19:29,520
hacked in a broad sense of it someone

504
00:19:29,520 --> 00:19:31,520
has access to the runtimes and someone

505
00:19:31,520 --> 00:19:33,440
can even change the code

506
00:19:33,440 --> 00:19:36,640
uh itself in runtime or execute

507
00:19:36,640 --> 00:19:39,840
arbitrary code it can only

508
00:19:39,840 --> 00:19:41,760
create one entry time

509
00:19:41,760 --> 00:19:44,080
one entry at a time on this specific

510
00:19:44,080 --> 00:19:46,880
database not that it's not bad

511
00:19:46,880 --> 00:19:49,280
but it's much better than having the

512
00:19:49,280 --> 00:19:53,120
entire service given to you as an admin

513
00:19:53,120 --> 00:19:55,280
and this is easy when you're looking at

514
00:19:55,280 --> 00:19:58,559
20 lines of code on one functions but

515
00:19:58,559 --> 00:20:00,880
what happened when you have thousands

516
00:20:00,880 --> 00:20:04,400
uh or having ten times tens or dozens a

517
00:20:04,400 --> 00:20:06,880
day and i have a customer who claims to

518
00:20:06,880 --> 00:20:09,360
have three million functions this cannot

519
00:20:09,360 --> 00:20:12,080
scale of course

520
00:20:12,080 --> 00:20:15,360
all right so let's see a demo uh about

521
00:20:15,360 --> 00:20:18,320
why is it a problem

522
00:20:19,679 --> 00:20:21,120
so i have a

523
00:20:21,120 --> 00:20:22,080
slack

524
00:20:22,080 --> 00:20:23,600
channel here

525
00:20:23,600 --> 00:20:24,799
and the

526
00:20:24,799 --> 00:20:27,360
uh there is a chat bot in the background

527
00:20:27,360 --> 00:20:29,679
that works with a lambda function behind

528
00:20:29,679 --> 00:20:32,400
it and the lambda function is vulnerable

529
00:20:32,400 --> 00:20:35,840
it doesn't really matter i just uses uh

530
00:20:35,840 --> 00:20:37,679
some kind of a cve

531
00:20:37,679 --> 00:20:39,840
uh that is vulnerable to

532
00:20:39,840 --> 00:20:43,039
um code execution so

533
00:20:43,039 --> 00:20:45,760
this is the the this is a function

534
00:20:45,760 --> 00:20:47,679
and it has

535
00:20:47,679 --> 00:20:49,200
the star

536
00:20:49,200 --> 00:20:52,000
access to the database and the function

537
00:20:52,000 --> 00:20:53,600
has a cve

538
00:20:53,600 --> 00:20:56,640
that it allows me or allows the attacker

539
00:20:56,640 --> 00:20:57,600
to

540
00:20:57,600 --> 00:20:59,120
uh

541
00:20:59,120 --> 00:21:02,960
to run um to run arbitrary code

542
00:21:02,960 --> 00:21:05,919
with those serialization uh

543
00:21:05,919 --> 00:21:06,880
json

544
00:21:06,880 --> 00:21:10,720
serialization so after investigating i

545
00:21:10,720 --> 00:21:12,080
crafted

546
00:21:12,080 --> 00:21:13,120
uh

547
00:21:13,120 --> 00:21:15,039
command who creates

548
00:21:15,039 --> 00:21:16,799
so i can write

549
00:21:16,799 --> 00:21:19,360
write arbitrary record to the function

550
00:21:19,360 --> 00:21:22,159
so i can just create a new client and do

551
00:21:22,159 --> 00:21:24,080
a scan scan is the translation for

552
00:21:24,080 --> 00:21:26,159
reading the entire database and i can

553
00:21:26,159 --> 00:21:28,960
give the permissions uh the parameters

554
00:21:28,960 --> 00:21:31,280
of the dynamodb table

555
00:21:31,280 --> 00:21:33,120
from the environment variable i don't

556
00:21:33,120 --> 00:21:35,280
even need to know it

557
00:21:35,280 --> 00:21:37,200
it's not really it doesn't really matter

558
00:21:37,200 --> 00:21:39,440
here but as you can see i was able to

559
00:21:39,440 --> 00:21:41,360
extract the entire database into my

560
00:21:41,360 --> 00:21:44,000
slack channel

561
00:21:44,000 --> 00:21:45,919
there is a vulnerable in the code what

562
00:21:45,919 --> 00:21:47,679
i'm going to do now is i'm going to

563
00:21:47,679 --> 00:21:52,159
change the permission of this function

564
00:21:53,200 --> 00:21:54,720
so i'm going to change it from a

565
00:21:54,720 --> 00:21:58,559
dynamodb star to a dynamodb put item

566
00:21:58,559 --> 00:22:01,840
like we've seen in the code

567
00:22:02,240 --> 00:22:05,280
in the code samples just a slight ago

568
00:22:05,280 --> 00:22:06,080
one

569
00:22:06,080 --> 00:22:08,640
now i've saved the the change the

570
00:22:08,640 --> 00:22:11,039
configuration as you can see now it's

571
00:22:11,039 --> 00:22:13,280
just limited to put item and now i'm

572
00:22:13,280 --> 00:22:16,000
going to run the same

573
00:22:16,000 --> 00:22:19,120
uh execute the same

574
00:22:19,120 --> 00:22:21,200
attack as before the same payload as

575
00:22:21,200 --> 00:22:23,039
before

576
00:22:23,039 --> 00:22:24,880
and you'll see that nothing happens

577
00:22:24,880 --> 00:22:27,280
because the function is blocked by the

578
00:22:27,280 --> 00:22:29,679
cloud provider itself

579
00:22:29,679 --> 00:22:31,760
the function will try to write

580
00:22:31,760 --> 00:22:34,559
to do a scan to read the data and will

581
00:22:34,559 --> 00:22:38,678
be blocked by aws

582
00:22:45,679 --> 00:22:48,559
okay um

583
00:22:48,559 --> 00:22:51,200
another issue that we have in security

584
00:22:51,200 --> 00:22:54,159
is lost the loss of perimeter on a

585
00:22:54,159 --> 00:22:56,080
monolith application

586
00:22:56,080 --> 00:22:57,440
we're used to

587
00:22:57,440 --> 00:22:59,120
uh synchronous

588
00:22:59,120 --> 00:23:01,679
type of events coming in

589
00:23:01,679 --> 00:23:03,760
through the load balancer or through the

590
00:23:03,760 --> 00:23:06,320
api gateway

591
00:23:06,320 --> 00:23:08,400
or an api it doesn't really matter but

592
00:23:08,400 --> 00:23:11,039
there is a request coming in uh and wait

593
00:23:11,039 --> 00:23:13,200
that waits for a response back and you

594
00:23:13,200 --> 00:23:15,919
can put all your security arsenal tools

595
00:23:15,919 --> 00:23:18,240
uh on that spot right on the on the

596
00:23:18,240 --> 00:23:20,960
perimeter it can be uh

597
00:23:20,960 --> 00:23:24,559
data leak so dlp is outside firewalls

598
00:23:24,559 --> 00:23:27,360
inside whatever you wanted to in between

599
00:23:27,360 --> 00:23:29,120
monitoring

600
00:23:29,120 --> 00:23:30,559
etc

601
00:23:30,559 --> 00:23:32,240
but where we're looking at serverless

602
00:23:32,240 --> 00:23:33,440
applications

603
00:23:33,440 --> 00:23:35,840
uh it's a little bit different because

604
00:23:35,840 --> 00:23:38,159
the perimeter can be anything inside the

605
00:23:38,159 --> 00:23:40,320
cloud and the

606
00:23:40,320 --> 00:23:42,640
cause to trigger your code can be

607
00:23:42,640 --> 00:23:44,559
analytic processing and we discussed

608
00:23:44,559 --> 00:23:47,440
this file uploads apis of course

609
00:23:47,440 --> 00:23:50,400
database changes um

610
00:23:50,400 --> 00:23:55,440
logs changing etc can be really anything

611
00:23:55,440 --> 00:23:57,039
that you can do you can think about in

612
00:23:57,039 --> 00:23:58,240
the cloud

613
00:23:58,240 --> 00:24:00,000
and that means that you cannot really

614
00:24:00,000 --> 00:24:02,400
control the entry point it's actually

615
00:24:02,400 --> 00:24:05,279
not given to you until it reaches the

616
00:24:05,279 --> 00:24:06,159
code

617
00:24:06,159 --> 00:24:09,520
so you cannot say if someone sends

618
00:24:09,520 --> 00:24:12,320
uh if someone change the database i want

619
00:24:12,320 --> 00:24:15,360
the data to come to go through some kind

620
00:24:15,360 --> 00:24:18,240
of a tooling some kind of a processing

621
00:24:18,240 --> 00:24:20,799
before it reaches my code no someone

622
00:24:20,799 --> 00:24:23,760
change the database your code will start

623
00:24:23,760 --> 00:24:24,960
running

624
00:24:24,960 --> 00:24:28,080
and you'll have to take care of it

625
00:24:28,080 --> 00:24:30,640
actually i want to postpone the demo to

626
00:24:30,640 --> 00:24:32,720
later stage

627
00:24:32,720 --> 00:24:34,159
all right so

628
00:24:34,159 --> 00:24:37,039
we've talked about a few security risks

629
00:24:37,039 --> 00:24:39,840
there are some uh other security risks

630
00:24:39,840 --> 00:24:43,440
event injection uh i'm just going to

631
00:24:43,440 --> 00:24:46,000
enumerate some of them uh we'll discuss

632
00:24:46,000 --> 00:24:47,520
this a little bit more

633
00:24:47,520 --> 00:24:48,799
in the in the

634
00:24:48,799 --> 00:24:52,640
in the 20 more next minutes that we have

635
00:24:52,640 --> 00:24:55,120
so event event injection is the

636
00:24:55,120 --> 00:24:57,600
equivalent for injection attacks

637
00:24:57,600 --> 00:24:59,919
we call event injection because an event

638
00:24:59,919 --> 00:25:03,600
is what triggers your code so it can be

639
00:25:03,600 --> 00:25:04,480
uh

640
00:25:04,480 --> 00:25:06,480
or event data injection or whatever you

641
00:25:06,480 --> 00:25:08,480
want to call it someone sent uploads a

642
00:25:08,480 --> 00:25:09,360
file

643
00:25:09,360 --> 00:25:12,559
but in this case there is some

644
00:25:12,559 --> 00:25:13,840
malicious

645
00:25:13,840 --> 00:25:16,080
input that will reach into your function

646
00:25:16,080 --> 00:25:17,919
so you have to take care of that

647
00:25:17,919 --> 00:25:21,039
broken authentication

648
00:25:21,279 --> 00:25:24,000
i'd say this is uh two types of things

649
00:25:24,000 --> 00:25:25,440
together one

650
00:25:25,440 --> 00:25:27,520
is authentication of your function

651
00:25:27,520 --> 00:25:30,080
functions are ephemeral

652
00:25:30,080 --> 00:25:32,240
and stateless that means that there is

653
00:25:32,240 --> 00:25:32,960
no

654
00:25:32,960 --> 00:25:35,200
flow authentication that you can create

655
00:25:35,200 --> 00:25:37,440
there is no session or

656
00:25:37,440 --> 00:25:39,440
anything if you want to keep a session

657
00:25:39,440 --> 00:25:41,279
or an authentication you have to do it

658
00:25:41,279 --> 00:25:43,120
out of bounds so

659
00:25:43,120 --> 00:25:44,640
you can save a state

660
00:25:44,640 --> 00:25:46,960
inside a database of course but it will

661
00:25:46,960 --> 00:25:48,559
probably not serve your service

662
00:25:48,559 --> 00:25:49,679
application

663
00:25:49,679 --> 00:25:52,080
uh well so you have to take care

664
00:25:52,080 --> 00:25:54,159
of your

665
00:25:54,159 --> 00:25:57,440
of everything that reaches the function

666
00:25:57,440 --> 00:25:59,279
or you have to understand that there is

667
00:25:59,279 --> 00:26:01,279
zero trust in your code

668
00:26:01,279 --> 00:26:03,279
but it can also be an authentication in

669
00:26:03,279 --> 00:26:06,000
other services like api gateway or f3

670
00:26:06,000 --> 00:26:06,880
bucket

671
00:26:06,880 --> 00:26:08,159
which can be

672
00:26:08,159 --> 00:26:08,880
uh

673
00:26:08,880 --> 00:26:11,039
accessible without any authentication

674
00:26:11,039 --> 00:26:13,200
which could really be an issue

675
00:26:13,200 --> 00:26:16,080
sensitive data exposure is generic uh

676
00:26:16,080 --> 00:26:17,919
but in your cloud

677
00:26:17,919 --> 00:26:19,760
of course there is uh there are many

678
00:26:19,760 --> 00:26:21,760
sensitive information if we're talking

679
00:26:21,760 --> 00:26:23,520
specifically about the function so we

680
00:26:23,520 --> 00:26:25,279
talked about the keys

681
00:26:25,279 --> 00:26:27,120
that we can steal from the environment

682
00:26:27,120 --> 00:26:28,880
and the code that we can steal from the

683
00:26:28,880 --> 00:26:30,880
environment and there are some other

684
00:26:30,880 --> 00:26:33,679
sensitive information which you want to

685
00:26:33,679 --> 00:26:34,799
protect

686
00:26:34,799 --> 00:26:36,720
overprivileged function we've discussed

687
00:26:36,720 --> 00:26:39,760
this a lot this is maybe one of the most

688
00:26:39,760 --> 00:26:42,159
challenging things when dealing with

689
00:26:42,159 --> 00:26:45,120
serverless functions

690
00:26:45,520 --> 00:26:48,159
vulnerable dependencies uh this is not

691
00:26:48,159 --> 00:26:50,400
new right

692
00:26:50,400 --> 00:26:53,919
actually very common today i i say even

693
00:26:53,919 --> 00:26:55,600
too common in

694
00:26:55,600 --> 00:26:58,000
most cases

695
00:26:58,000 --> 00:27:00,960
so functions are usually smaller

696
00:27:00,960 --> 00:27:03,600
in terms of how much code they will

697
00:27:03,600 --> 00:27:07,039
will contain could be something from

698
00:27:07,039 --> 00:27:09,919
30 lines of code to 500 lines of code

699
00:27:09,919 --> 00:27:12,799
maybe more but usually not too much but

700
00:27:12,799 --> 00:27:14,320
in order for that

701
00:27:14,320 --> 00:27:17,120
short maybe 50 lines of code to work

702
00:27:17,120 --> 00:27:20,080
they have to bring a lot of dependencies

703
00:27:20,080 --> 00:27:22,960
and that means that of course cves will

704
00:27:22,960 --> 00:27:26,240
end into your lambda functions

705
00:27:26,240 --> 00:27:28,159
insufficient logging and monitoring if

706
00:27:28,159 --> 00:27:30,640
we're taking the traditional

707
00:27:30,640 --> 00:27:32,640
uh

708
00:27:32,640 --> 00:27:34,559
web application let's say so you have to

709
00:27:34,559 --> 00:27:36,000
implement your own logging and

710
00:27:36,000 --> 00:27:38,480
monitoring mechanisms here is a little

711
00:27:38,480 --> 00:27:40,480
bit different because the cloud gives

712
00:27:40,480 --> 00:27:43,120
you this information raw

713
00:27:43,120 --> 00:27:45,600
you have to know how to deal with it how

714
00:27:45,600 --> 00:27:47,679
to process it and how to collect it so

715
00:27:47,679 --> 00:27:49,039
for example

716
00:27:49,039 --> 00:27:52,080
you don't have an access file so your

717
00:27:52,080 --> 00:27:53,279
network

718
00:27:53,279 --> 00:27:54,399
entry

719
00:27:54,399 --> 00:27:56,640
access file but you can collect this

720
00:27:56,640 --> 00:27:58,720
from different type of services in your

721
00:27:58,720 --> 00:27:59,840
cloud

722
00:27:59,840 --> 00:28:02,399
your cloud tray cloud trail or if you

723
00:28:02,399 --> 00:28:04,880
want the functions output

724
00:28:04,880 --> 00:28:06,559
you will have to connect to your cloud

725
00:28:06,559 --> 00:28:07,440
watch

726
00:28:07,440 --> 00:28:10,480
logs and collect pull out those

727
00:28:10,480 --> 00:28:12,880
this information but it's very hard to

728
00:28:12,880 --> 00:28:16,000
understand what you need uh in terms of

729
00:28:16,000 --> 00:28:17,760
security

730
00:28:17,760 --> 00:28:20,480
open resources this is maybe another

731
00:28:20,480 --> 00:28:22,640
type of a broken authentication but

732
00:28:22,640 --> 00:28:24,720
externally to love the functions so

733
00:28:24,720 --> 00:28:26,960
resources like x-ray bucket which are

734
00:28:26,960 --> 00:28:29,279
accessible i'm not sure if you're aware

735
00:28:29,279 --> 00:28:31,360
of but there are if you know showdown

736
00:28:31,360 --> 00:28:32,080
for

737
00:28:32,080 --> 00:28:34,320
iot devices where you can just log in

738
00:28:34,320 --> 00:28:36,000
search for a camera and look at

739
00:28:36,000 --> 00:28:39,039
someone's uh garage or

740
00:28:39,039 --> 00:28:40,480
maybe even worse

741
00:28:40,480 --> 00:28:43,679
uh then there are websites that monitor

742
00:28:43,679 --> 00:28:47,919
cloud storage that are publicly open

743
00:28:47,919 --> 00:28:50,080
uh i think it's called

744
00:28:50,080 --> 00:28:52,640
uh gray hat warfare or something like

745
00:28:52,640 --> 00:28:54,880
this where you can just log in and find

746
00:28:54,880 --> 00:28:58,960
passports because someone uh forgot his

747
00:28:58,960 --> 00:29:01,279
bucket open

748
00:29:01,279 --> 00:29:02,159
so

749
00:29:02,159 --> 00:29:07,279
could be also apis api gateways sns

750
00:29:08,640 --> 00:29:11,120
notification service that are open and

751
00:29:11,120 --> 00:29:14,159
some other services which is a very big

752
00:29:14,159 --> 00:29:15,360
issue

753
00:29:15,360 --> 00:29:17,120
denial of wallet versus denial of

754
00:29:17,120 --> 00:29:18,559
service

755
00:29:18,559 --> 00:29:19,360
so

756
00:29:19,360 --> 00:29:22,720
does as a service lambda has 1 000

757
00:29:22,720 --> 00:29:24,159
concurrent

758
00:29:24,159 --> 00:29:25,360
execution

759
00:29:25,360 --> 00:29:26,480
which you can

760
00:29:26,480 --> 00:29:27,760
uh

761
00:29:27,760 --> 00:29:30,799
allocate for specific functions or for

762
00:29:30,799 --> 00:29:33,279
the entire service so let's say you have

763
00:29:33,279 --> 00:29:37,600
1 000 requests at the same millisecond

764
00:29:37,600 --> 00:29:39,600
that means that your next request if

765
00:29:39,600 --> 00:29:43,440
there is 1001 will execute the or will

766
00:29:43,440 --> 00:29:45,760
exceed the limit and will not receive

767
00:29:45,760 --> 00:29:47,440
the response that you're you're getting

768
00:29:47,440 --> 00:29:49,039
so that could be a denial of service if

769
00:29:49,039 --> 00:29:52,240
someone really kind of a dedusing you on

770
00:29:52,240 --> 00:29:55,200
the other hand if you're saying

771
00:29:55,200 --> 00:29:56,240
uh

772
00:29:56,240 --> 00:29:57,039
yeah

773
00:29:57,039 --> 00:29:59,919
let me uh not instead of limiting the

774
00:29:59,919 --> 00:30:02,000
resources let me have

775
00:30:02,000 --> 00:30:03,679
whatever uh

776
00:30:03,679 --> 00:30:05,520
as many as possible

777
00:30:05,520 --> 00:30:07,760
then you're actually paying for it so

778
00:30:07,760 --> 00:30:10,080
you cannot if someone actually just

779
00:30:10,080 --> 00:30:12,640
continuously triggering your functions

780
00:30:12,640 --> 00:30:14,880
if it reaches your functions somehow

781
00:30:14,880 --> 00:30:17,279
there is an api but the api is

782
00:30:17,279 --> 00:30:19,919
unauthenticated or is publicly

783
00:30:19,919 --> 00:30:22,320
authenticated so it's like e-comm or

784
00:30:22,320 --> 00:30:24,640
something where everyone can log in

785
00:30:24,640 --> 00:30:26,559
someone can just

786
00:30:26,559 --> 00:30:28,640
shoot continuously shoot

787
00:30:28,640 --> 00:30:32,240
api calls 24 7 and you will pay for it

788
00:30:32,240 --> 00:30:35,120
yeah you pay you will pay a couple of

789
00:30:35,120 --> 00:30:38,320
cents for the millions but if it's a

790
00:30:38,320 --> 00:30:40,720
distributed attack then maybe you'll

791
00:30:40,720 --> 00:30:43,200
have some additional payments

792
00:30:43,200 --> 00:30:44,159
and

793
00:30:44,159 --> 00:30:45,840
the last thing that i'm touching here in

794
00:30:45,840 --> 00:30:48,640
this list is insecure shared space which

795
00:30:48,640 --> 00:30:50,880
we talked about this the slash tam

796
00:30:50,880 --> 00:30:53,039
directory which is actually shared

797
00:30:53,039 --> 00:30:55,679
between different type of different

798
00:30:55,679 --> 00:30:57,760
executions

799
00:30:57,760 --> 00:30:59,919
oh right and secret management which you

800
00:30:59,919 --> 00:31:02,000
have to take care of because if you want

801
00:31:02,000 --> 00:31:03,840
to put sensitive information in your

802
00:31:03,840 --> 00:31:05,919
function or in your code

803
00:31:05,919 --> 00:31:07,919
then you're probably going to do it in

804
00:31:07,919 --> 00:31:11,679
by default or hard coded i hope not or

805
00:31:11,679 --> 00:31:13,200
in the environment variables and you

806
00:31:13,200 --> 00:31:14,240
need to

807
00:31:14,240 --> 00:31:15,760
understand that there are risks and you

808
00:31:15,760 --> 00:31:18,720
might want to encrypt those

809
00:31:18,720 --> 00:31:20,399
so

810
00:31:20,399 --> 00:31:22,480
can security scale

811
00:31:22,480 --> 00:31:25,840
in serverless or traditional securities

812
00:31:25,840 --> 00:31:28,399
there are uh let's try to understand so

813
00:31:28,399 --> 00:31:30,640
there are a lot of services uh we're

814
00:31:30,640 --> 00:31:33,600
just touched a few i think aws has

815
00:31:33,600 --> 00:31:35,039
around 200

816
00:31:35,039 --> 00:31:36,559
types of services

817
00:31:36,559 --> 00:31:37,440
uh

818
00:31:37,440 --> 00:31:40,000
there are frequent developments uh it's

819
00:31:40,000 --> 00:31:41,919
hard to understand what is connected to

820
00:31:41,919 --> 00:31:43,600
what unless you're the developer that

821
00:31:43,600 --> 00:31:45,760
wrote that specific connection you're

822
00:31:45,760 --> 00:31:47,919
asking the security team

823
00:31:47,919 --> 00:31:49,519
i don't think so

824
00:31:49,519 --> 00:31:51,679
there are many developers with glass

825
00:31:51,679 --> 00:31:54,559
apsec it was true before

826
00:31:54,559 --> 00:31:56,960
but now there are more

827
00:31:56,960 --> 00:31:58,640
uh

828
00:31:58,640 --> 00:32:00,640
more uh frequent

829
00:32:00,640 --> 00:32:03,760
um production uh pushing into production

830
00:32:03,760 --> 00:32:05,200
so the the

831
00:32:05,200 --> 00:32:07,600
development cycles are faster which

832
00:32:07,600 --> 00:32:09,840
makes it even harder for the security

833
00:32:09,840 --> 00:32:11,760
team to scale

834
00:32:11,760 --> 00:32:13,279
and it's hard to understand what is

835
00:32:13,279 --> 00:32:14,880
important not every function is

836
00:32:14,880 --> 00:32:17,919
important if you have 5000 functions

837
00:32:17,919 --> 00:32:20,480
you have to understand what which ones

838
00:32:20,480 --> 00:32:22,640
are at risk which ones are connected to

839
00:32:22,640 --> 00:32:25,519
an api which is not private and maybe

840
00:32:25,519 --> 00:32:28,480
it's not in a vpc and maybe it has

841
00:32:28,480 --> 00:32:30,000
lower authentication or is public

842
00:32:30,000 --> 00:32:31,519
spacing

843
00:32:31,519 --> 00:32:33,440
so it's really hard to understand those

844
00:32:33,440 --> 00:32:36,159
things it's not one server that you can

845
00:32:36,159 --> 00:32:38,159
say this server

846
00:32:38,159 --> 00:32:40,480
receives some apis

847
00:32:40,480 --> 00:32:42,480
and talks to this database so you know

848
00:32:42,480 --> 00:32:45,679
this server is or is not at risk

849
00:32:45,679 --> 00:32:48,159
or at least has sensitive information in

850
00:32:48,159 --> 00:32:51,840
this case each function is different

851
00:32:51,919 --> 00:32:54,159
uh so we're not sure if the security is

852
00:32:54,159 --> 00:32:55,600
really the same and this is what we'll

853
00:32:55,600 --> 00:32:58,240
try to cover in the next 10 minutes and

854
00:32:58,240 --> 00:32:59,200
uh

855
00:32:59,200 --> 00:33:00,960
when we talk about serverless it's not

856
00:33:00,960 --> 00:33:02,799
just about code it's also about

857
00:33:02,799 --> 00:33:05,600
configuration so it's kind of a

858
00:33:05,600 --> 00:33:07,760
challenge to know who's

859
00:33:07,760 --> 00:33:09,360
taking care of the security in some

860
00:33:09,360 --> 00:33:12,000
cases is it the devops is it the

861
00:33:12,000 --> 00:33:14,320
engineering or is it the security teams

862
00:33:14,320 --> 00:33:16,559
and we've seen different organizations

863
00:33:16,559 --> 00:33:19,279
and each has their own uh

864
00:33:19,279 --> 00:33:20,320
type of

865
00:33:20,320 --> 00:33:22,960
arrangements

866
00:33:23,440 --> 00:33:26,159
so traditional testing in modern cicd

867
00:33:26,159 --> 00:33:27,919
pipelines will probably look like this

868
00:33:27,919 --> 00:33:29,919
we have mario the developer on the other

869
00:33:29,919 --> 00:33:31,679
hand wants to test

870
00:33:31,679 --> 00:33:36,080
throughout the pipeline so we'll use uh

871
00:33:36,080 --> 00:33:39,440
sas probably or an sca on his code but

872
00:33:39,440 --> 00:33:41,600
that means a lot of filtering and a lot

873
00:33:41,600 --> 00:33:44,000
of working through false positives yeah

874
00:33:44,000 --> 00:33:45,200
we've got

875
00:33:45,200 --> 00:33:48,960
100 or 1000 cves but we're not really

876
00:33:48,960 --> 00:33:51,760
using those so they're moving to an ies

877
00:33:51,760 --> 00:33:54,000
solution but that means that they need

878
00:33:54,000 --> 00:33:56,080
to have coverage to understand what

879
00:33:56,080 --> 00:33:58,080
they're testing and it's not not sure

880
00:33:58,080 --> 00:34:00,080
it's going to work i will talk about it

881
00:34:00,080 --> 00:34:03,039
in a second and also probably needs a

882
00:34:03,039 --> 00:34:05,120
lot of help from the security team and

883
00:34:05,120 --> 00:34:07,600
if they want the task that really really

884
00:34:07,600 --> 00:34:10,159
hard to do in the pipeline it involves a

885
00:34:10,159 --> 00:34:13,359
lot of configuration and a lot of uh

886
00:34:13,359 --> 00:34:15,839
prioritization and understanding hey

887
00:34:15,839 --> 00:34:18,079
there is a new api what i'm going to

888
00:34:18,079 --> 00:34:20,800
test but there are some other problems

889
00:34:20,800 --> 00:34:22,639
and the problems is that

890
00:34:22,639 --> 00:34:24,480
these tools don't really understand the

891
00:34:24,480 --> 00:34:26,079
cloud and they don't understand the

892
00:34:26,079 --> 00:34:28,399
cloud because there is a lot of context

893
00:34:28,399 --> 00:34:30,879
in the cloud that they cannot configure

894
00:34:30,879 --> 00:34:32,320
or they cannot understand because they

895
00:34:32,320 --> 00:34:34,399
are coming with a different mindset

896
00:34:34,399 --> 00:34:37,040
for example they cannot see if you're

897
00:34:37,040 --> 00:34:39,599
looking at past for example or or

898
00:34:39,599 --> 00:34:41,760
scanners or fathers they cannot see

899
00:34:41,760 --> 00:34:44,239
anything that doesn't have a url

900
00:34:44,239 --> 00:34:46,639
and they don't have a sync and a source

901
00:34:46,639 --> 00:34:48,480
if if it's assassin

902
00:34:48,480 --> 00:34:50,719
in many cases all of these is really

903
00:34:50,719 --> 00:34:53,440
hard to scale it makes it really uh it

904
00:34:53,440 --> 00:34:56,320
actually blocks the the developers so

905
00:34:56,320 --> 00:34:58,240
what happened ends up happening is that

906
00:34:58,240 --> 00:34:59,520
developers

907
00:34:59,520 --> 00:35:02,960
usually not going to take or use those

908
00:35:02,960 --> 00:35:05,040
traditional tools into serverless and if

909
00:35:05,040 --> 00:35:06,480
they do they're going to do a lot of

910
00:35:06,480 --> 00:35:08,800
work to make it work a little

911
00:35:08,800 --> 00:35:11,040
so let's see how security testing works

912
00:35:11,040 --> 00:35:13,280
on server authentication this is a

913
00:35:13,280 --> 00:35:15,440
sample i robot

914
00:35:15,440 --> 00:35:18,160
really just one service over their

915
00:35:18,160 --> 00:35:21,040
configuration with their system the

916
00:35:21,040 --> 00:35:23,040
irobot roomba this is taken from the

917
00:35:23,040 --> 00:35:26,079
amazon web website there is an irobot

918
00:35:26,079 --> 00:35:29,200
roomba who transmit an api call runs in

919
00:35:29,200 --> 00:35:32,880
a function that then runs to a queue and

920
00:35:32,880 --> 00:35:35,040
does something with iot

921
00:35:35,040 --> 00:35:38,160
and then the queue calls another

922
00:35:38,160 --> 00:35:40,960
function and another function and those

923
00:35:40,960 --> 00:35:42,720
writing into a log and there are some

924
00:35:42,720 --> 00:35:44,960
iot rules and policies and registries

925
00:35:44,960 --> 00:35:47,119
behind the scenes

926
00:35:47,119 --> 00:35:48,000
okay

927
00:35:48,000 --> 00:35:50,000
let's see how that so how i'm going to

928
00:35:50,000 --> 00:35:51,839
test this so the first thing that comes

929
00:35:51,839 --> 00:35:53,920
to mind is the maybe the easiest one

930
00:35:53,920 --> 00:35:56,880
let's say just let's do the check right

931
00:35:56,880 --> 00:35:59,920
we can run an sca or email scanning

932
00:35:59,920 --> 00:36:03,359
if that applies uh that covers maybe 10

933
00:36:03,359 --> 00:36:06,720
of your application uh yeah it might fix

934
00:36:06,720 --> 00:36:08,960
or identify problems that you imported

935
00:36:08,960 --> 00:36:11,520
from different libraries but it's not

936
00:36:11,520 --> 00:36:12,640
your code

937
00:36:12,640 --> 00:36:15,040
in many cases it's not related to your

938
00:36:15,040 --> 00:36:17,119
services and your cloud configuration

939
00:36:17,119 --> 00:36:19,200
and all of these are the most important

940
00:36:19,200 --> 00:36:21,040
parts in your application so you're

941
00:36:21,040 --> 00:36:22,800
actually not really skinning you're just

942
00:36:22,800 --> 00:36:24,400
doing some checks

943
00:36:24,400 --> 00:36:26,960
uh most of those of the cloud providers

944
00:36:26,960 --> 00:36:29,359
themselves gives those solution as a

945
00:36:29,359 --> 00:36:31,040
default

946
00:36:31,040 --> 00:36:33,520
because it's really easy to do so so the

947
00:36:33,520 --> 00:36:35,839
next thing that we're going to do we're

948
00:36:35,839 --> 00:36:38,640
shift left organization uh

949
00:36:38,640 --> 00:36:40,880
so let's do uh infrastructure as code

950
00:36:40,880 --> 00:36:42,480
security

951
00:36:42,480 --> 00:36:43,760
which is great

952
00:36:43,760 --> 00:36:45,920
uh the problem is that

953
00:36:45,920 --> 00:36:47,760
again you have zero code coverage

954
00:36:47,760 --> 00:36:49,280
because infrastructure as code just

955
00:36:49,280 --> 00:36:51,280
looks at your configuration it has

956
00:36:51,280 --> 00:36:54,640
limited visibility it depends on the

957
00:36:54,640 --> 00:36:56,640
infrastructure that you're working on if

958
00:36:56,640 --> 00:36:58,800
it's terraform serverless framework

959
00:36:58,800 --> 00:37:00,560
uh poloomi or any other

960
00:37:00,560 --> 00:37:03,119
it has zero logic or prioritization it

961
00:37:03,119 --> 00:37:04,400
just knows

962
00:37:04,400 --> 00:37:07,839
lines uh hard coded lines

963
00:37:07,839 --> 00:37:10,240
which are configured so if he can find a

964
00:37:10,240 --> 00:37:12,400
bucket that was not configured it will

965
00:37:12,400 --> 00:37:14,400
let you know which is great by the way

966
00:37:14,400 --> 00:37:18,480
but it's again zero code coverage

967
00:37:18,480 --> 00:37:21,280
so let's run an iest right i asked is

968
00:37:21,280 --> 00:37:25,280
maybe uh today modern appsec is maybe

969
00:37:25,280 --> 00:37:27,680
the most accurate and reliable

970
00:37:27,680 --> 00:37:30,320
security tool

971
00:37:30,320 --> 00:37:33,359
but it has its own limitations

972
00:37:33,359 --> 00:37:36,000
even though it really allows devops and

973
00:37:36,000 --> 00:37:37,839
devsecops operation

974
00:37:37,839 --> 00:37:39,599
serverless doesn't have servers to

975
00:37:39,599 --> 00:37:41,359
instrument right so you cannot take an

976
00:37:41,359 --> 00:37:43,280
agent and put it

977
00:37:43,280 --> 00:37:45,119
and just instrument it into your

978
00:37:45,119 --> 00:37:46,960
function

979
00:37:46,960 --> 00:37:49,440
that means that you cannot really test

980
00:37:49,440 --> 00:37:53,200
or run ios on your functions

981
00:37:53,200 --> 00:37:55,520
so let's do sas and i bet most of you

982
00:37:55,520 --> 00:37:56,960
does do

983
00:37:56,960 --> 00:37:58,640
the problem with sas

984
00:37:58,640 --> 00:38:01,520
on security or serverless is that it

985
00:38:01,520 --> 00:38:04,560
sees each resource as a separate entity

986
00:38:04,560 --> 00:38:06,800
and in many cases that's not the case

987
00:38:06,800 --> 00:38:09,280
your code doesn't start and end in those

988
00:38:09,280 --> 00:38:11,839
30 lines 50 lines of code you just

989
00:38:11,839 --> 00:38:13,920
started a

990
00:38:13,920 --> 00:38:16,240
chain reaction inside your cloud there

991
00:38:16,240 --> 00:38:19,359
is a http request

992
00:38:19,359 --> 00:38:21,680
and this this rumor doesn't even

993
00:38:21,680 --> 00:38:23,359
probably doesn't even want a response

994
00:38:23,359 --> 00:38:26,880
maybe yeah 200 okay don't try again uh

995
00:38:26,880 --> 00:38:28,960
but there is no nothing that you you can

996
00:38:28,960 --> 00:38:33,839
really understand here oh sorry

997
00:38:34,400 --> 00:38:37,040
from that so uh

998
00:38:37,040 --> 00:38:39,200
you're so you're looking at this and

999
00:38:39,200 --> 00:38:41,200
then you're looking at those functions

1000
00:38:41,200 --> 00:38:42,800
but you don't really understand what

1001
00:38:42,800 --> 00:38:44,640
you're in what your source and what

1002
00:38:44,640 --> 00:38:45,839
yours think

1003
00:38:45,839 --> 00:38:48,480
because this is one application

1004
00:38:48,480 --> 00:38:50,480
and you cannot scan it as one

1005
00:38:50,480 --> 00:38:52,160
application because there is some

1006
00:38:52,160 --> 00:38:54,400
services in the middle

1007
00:38:54,400 --> 00:38:55,599
that

1008
00:38:55,599 --> 00:38:57,119
connects those

1009
00:38:57,119 --> 00:38:58,720
uh flows

1010
00:38:58,720 --> 00:39:01,119
not by code so the tools cannot

1011
00:39:01,119 --> 00:39:03,920
understand those

1012
00:39:03,920 --> 00:39:06,000
so let's run a dust

1013
00:39:06,000 --> 00:39:08,960
last resort the problem is that is that

1014
00:39:08,960 --> 00:39:10,880
if you don't have a url

1015
00:39:10,880 --> 00:39:13,200
sorry if you don't you have a url there

1016
00:39:13,200 --> 00:39:14,800
is nothing to test

1017
00:39:14,800 --> 00:39:17,440
right you can give it an endpoint

1018
00:39:17,440 --> 00:39:21,040
endpoint or a url to this api and you

1019
00:39:21,040 --> 00:39:22,800
will send request and you will either

1020
00:39:22,800 --> 00:39:24,960
get 200 okay

1021
00:39:24,960 --> 00:39:26,839
a 403

1022
00:39:26,839 --> 00:39:29,440
or 500

1023
00:39:29,440 --> 00:39:30,800
but you don't know what's going on

1024
00:39:30,800 --> 00:39:32,960
inside your application if this goes

1025
00:39:32,960 --> 00:39:35,599
into the queue to database process

1026
00:39:35,599 --> 00:39:37,920
another service those are not coming

1027
00:39:37,920 --> 00:39:40,079
back to the api

1028
00:39:40,079 --> 00:39:41,359
so really

1029
00:39:41,359 --> 00:39:44,320
all you can test is one api in this case

1030
00:39:44,320 --> 00:39:46,240
and i've seen it happening with

1031
00:39:46,240 --> 00:39:50,240
of course more complex applications

1032
00:39:50,640 --> 00:39:52,800
but there is a solution uh because we're

1033
00:39:52,800 --> 00:39:54,480
dealing with the cloud we can actually

1034
00:39:54,480 --> 00:39:57,440
do things differently so what we suggest

1035
00:39:57,440 --> 00:39:59,040
is something a little bit different but

1036
00:39:59,040 --> 00:40:00,320
you have to think about it in a

1037
00:40:00,320 --> 00:40:01,760
different way

1038
00:40:01,760 --> 00:40:04,079
you can connect to the

1039
00:40:04,079 --> 00:40:06,640
the monitored cloud just by a few clicks

1040
00:40:06,640 --> 00:40:08,560
this is given to you by the search by

1041
00:40:08,560 --> 00:40:09,839
the application of course you have to

1042
00:40:09,839 --> 00:40:10,640
write

1043
00:40:10,640 --> 00:40:13,839
to to bring up your your uh

1044
00:40:13,839 --> 00:40:16,720
your cloud code into it but

1045
00:40:16,720 --> 00:40:18,960
it can be configurable with just a few

1046
00:40:18,960 --> 00:40:21,119
clicks and then you can or what you need

1047
00:40:21,119 --> 00:40:22,800
to do is understand the context so

1048
00:40:22,800 --> 00:40:24,960
discover all the resources all the

1049
00:40:24,960 --> 00:40:26,240
functions all the policies the

1050
00:40:26,240 --> 00:40:28,000
configuration the services

1051
00:40:28,000 --> 00:40:30,640
that with in those disk cloud and try to

1052
00:40:30,640 --> 00:40:32,960
connect all connect all the dots find

1053
00:40:32,960 --> 00:40:36,000
the attack surfaces the flows and then

1054
00:40:36,000 --> 00:40:39,280
try to scan those specific issues

1055
00:40:39,280 --> 00:40:40,880
but the best thing is

1056
00:40:40,880 --> 00:40:41,760
that

1057
00:40:41,760 --> 00:40:44,240
you're inside the cloud whether it's an

1058
00:40:44,240 --> 00:40:46,400
api call or you're actually inside a

1059
00:40:46,400 --> 00:40:47,280
cloud

1060
00:40:47,280 --> 00:40:49,040
so you can really understand what's

1061
00:40:49,040 --> 00:40:51,040
going on in there you're not just

1062
00:40:51,040 --> 00:40:53,520
looking from the outside you're inside

1063
00:40:53,520 --> 00:40:55,760
so you can know if something happened

1064
00:40:55,760 --> 00:40:57,359
and you can monitor

1065
00:40:57,359 --> 00:40:59,839
uh continuously so you don't really have

1066
00:40:59,839 --> 00:41:02,160
to wait for the security teams to wake

1067
00:41:02,160 --> 00:41:05,760
up and run their q uh q test

1068
00:41:05,760 --> 00:41:07,920
or the new version test you can just

1069
00:41:07,920 --> 00:41:10,720
monitor the environment uh continuously

1070
00:41:10,720 --> 00:41:14,079
and run scans automatically on every

1071
00:41:14,079 --> 00:41:18,240
time that something changing your code

1072
00:41:18,240 --> 00:41:21,359
this is an example uh

1073
00:41:21,359 --> 00:41:23,839
so mario again the developer decided to

1074
00:41:23,839 --> 00:41:26,560
create a new api that runs a code inside

1075
00:41:26,560 --> 00:41:28,880
a function that writes to a storage that

1076
00:41:28,880 --> 00:41:30,640
triggers another function that sends an

1077
00:41:30,640 --> 00:41:32,480
email to the user

1078
00:41:32,480 --> 00:41:35,440
uh the idea is that when this api

1079
00:41:35,440 --> 00:41:37,520
is created

1080
00:41:37,520 --> 00:41:40,319
there is an alert and this alert

1081
00:41:40,319 --> 00:41:42,240
is getting into the system and the

1082
00:41:42,240 --> 00:41:45,280
system can and try to understand connect

1083
00:41:45,280 --> 00:41:47,200
all those dots in your cloud and

1084
00:41:47,200 --> 00:41:49,280
understand those flows

1085
00:41:49,280 --> 00:41:50,880
and then you can test

1086
00:41:50,880 --> 00:41:53,280
or do some security testing whether it's

1087
00:41:53,280 --> 00:41:56,400
static dynamic or both in our case

1088
00:41:56,400 --> 00:41:59,680
to understand to fi find problems

1089
00:41:59,680 --> 00:42:01,680
inside those flows and then you can

1090
00:42:01,680 --> 00:42:02,960
actually

1091
00:42:02,960 --> 00:42:05,040
interact with those services to

1092
00:42:05,040 --> 00:42:06,960
understand if there was an issue with

1093
00:42:06,960 --> 00:42:09,680
any of them and if there was

1094
00:42:09,680 --> 00:42:11,680
not only under you found the issue but

1095
00:42:11,680 --> 00:42:13,599
you also know the impact

1096
00:42:13,599 --> 00:42:16,079
because this resource will give you the

1097
00:42:16,079 --> 00:42:18,240
information of what you can do inside

1098
00:42:18,240 --> 00:42:20,720
your cloud so you can say hey if this

1099
00:42:20,720 --> 00:42:23,040
function is vulnerable to a command

1100
00:42:23,040 --> 00:42:24,720
injection

1101
00:42:24,720 --> 00:42:27,359
then this table is at risk and it risks

1102
00:42:27,359 --> 00:42:29,359
because this function allows anyone

1103
00:42:29,359 --> 00:42:32,319
inside to write data into it or to read

1104
00:42:32,319 --> 00:42:34,640
data

1105
00:42:35,040 --> 00:42:37,119
and you can do that even things without

1106
00:42:37,119 --> 00:42:38,960
apis i showed

1107
00:42:38,960 --> 00:42:40,800
two years ago in

1108
00:42:40,800 --> 00:42:42,560
black hat europe

1109
00:42:42,560 --> 00:42:45,359
how i uh managed to steal data from the

1110
00:42:45,359 --> 00:42:46,560
database

1111
00:42:46,560 --> 00:42:48,960
with my voice through an alexa device i

1112
00:42:48,960 --> 00:42:52,000
was just saying things to an elec alexa

1113
00:42:52,000 --> 00:42:52,880
echo

1114
00:42:52,880 --> 00:42:54,000
that was

1115
00:42:54,000 --> 00:42:56,560
running vulnerable code behind and with

1116
00:42:56,560 --> 00:42:58,800
my own voice i was able to steal

1117
00:42:58,800 --> 00:43:00,480
information so you don't have you're not

1118
00:43:00,480 --> 00:43:03,280
able to scan this with other tools uh

1119
00:43:03,280 --> 00:43:05,760
but you can understand that with a

1120
00:43:05,760 --> 00:43:08,880
purpose-built solution

1121
00:43:08,880 --> 00:43:10,640
so in our case what we're doing is we're

1122
00:43:10,640 --> 00:43:12,960
scanning the code we're scanning the

1123
00:43:12,960 --> 00:43:15,040
context the configuration the cloud and

1124
00:43:15,040 --> 00:43:17,280
then we can actually generate

1125
00:43:17,280 --> 00:43:19,520
if that was the original policy of the

1126
00:43:19,520 --> 00:43:21,920
function a specific policy for the

1127
00:43:21,920 --> 00:43:24,240
function was just this action and of

1128
00:43:24,240 --> 00:43:26,079
course it's nice when it's one function

1129
00:43:26,079 --> 00:43:27,839
but when you have thousands or

1130
00:43:27,839 --> 00:43:31,040
then tens of thousands or millions this

1131
00:43:31,040 --> 00:43:32,160
is not something that you can do

1132
00:43:32,160 --> 00:43:33,920
manually and you have to scale

1133
00:43:33,920 --> 00:43:36,000
and again we discussed about we talked

1134
00:43:36,000 --> 00:43:39,680
about the vulnerable applications uh

1135
00:43:39,680 --> 00:43:42,079
for apsec for vulnerable vulnerable

1136
00:43:42,079 --> 00:43:44,160
custom code so we can identify those as

1137
00:43:44,160 --> 00:43:44,880
well

1138
00:43:44,880 --> 00:43:47,359
uh before i show you the last demo

1139
00:43:47,359 --> 00:43:48,480
uh

1140
00:43:48,480 --> 00:43:50,880
i want to uh

1141
00:43:50,880 --> 00:43:52,640
to share with you there are two project

1142
00:43:52,640 --> 00:43:54,000
interesting projects in service if

1143
00:43:54,000 --> 00:43:55,920
you're interested one is the ola service

1144
00:43:55,920 --> 00:43:57,359
top 10 project

1145
00:43:57,359 --> 00:43:59,440
again open source os of course there is

1146
00:43:59,440 --> 00:44:02,560
an open call to collect information

1147
00:44:02,560 --> 00:44:05,040
right now it's just an uh translation of

1148
00:44:05,040 --> 00:44:07,200
the original top 10 even the last

1149
00:44:07,200 --> 00:44:09,839
version but we're working to create a

1150
00:44:09,839 --> 00:44:12,319
serverless tailored top 10 that will

1151
00:44:12,319 --> 00:44:13,680
hopefully will guide everyone in

1152
00:44:13,680 --> 00:44:15,520
serverless into a more secure

1153
00:44:15,520 --> 00:44:17,920
environment the next thing is the next

1154
00:44:17,920 --> 00:44:20,800
project is the dvsa is a damn vulnerable

1155
00:44:20,800 --> 00:44:22,720
service application again

1156
00:44:22,720 --> 00:44:24,960
under os applications that i created

1157
00:44:24,960 --> 00:44:26,960
there are some other contributors as

1158
00:44:26,960 --> 00:44:28,720
well this is a fully serverless

1159
00:44:28,720 --> 00:44:30,400
application which you can install you

1160
00:44:30,400 --> 00:44:31,599
don't have to do anything you have to

1161
00:44:31,599 --> 00:44:34,800
have an aws account with permissions

1162
00:44:34,800 --> 00:44:37,760
and then you just click and it installs

1163
00:44:37,760 --> 00:44:39,599
everything and you can go into the

1164
00:44:39,599 --> 00:44:41,680
github project to understand all the

1165
00:44:41,680 --> 00:44:44,160
problems and some documentation

1166
00:44:44,160 --> 00:44:46,000
uh just be aware please do not install

1167
00:44:46,000 --> 00:44:48,079
this on any aws account or any

1168
00:44:48,079 --> 00:44:49,760
production account that have sensitive

1169
00:44:49,760 --> 00:44:51,040
information

1170
00:44:51,040 --> 00:44:52,880
because you'll be deploying services

1171
00:44:52,880 --> 00:44:54,800
with uh

1172
00:44:54,800 --> 00:44:56,720
are vulnerable and have multiple

1173
00:44:56,720 --> 00:44:59,040
excessive permissions so some other

1174
00:44:59,040 --> 00:45:02,000
uh people can maybe find those and get

1175
00:45:02,000 --> 00:45:03,119
those

1176
00:45:03,119 --> 00:45:05,520
in sensitive information out of your

1177
00:45:05,520 --> 00:45:07,680
application so let me just end up with

1178
00:45:07,680 --> 00:45:10,720
the last demo and then we're into the q

1179
00:45:10,720 --> 00:45:13,720
a

1180
00:45:20,960 --> 00:45:22,720
oh sorry

1181
00:45:22,720 --> 00:45:24,160
so there is a

1182
00:45:24,160 --> 00:45:26,400
email service so what i'm trying to show

1183
00:45:26,400 --> 00:45:28,000
you here is that you can

1184
00:45:28,000 --> 00:45:31,359
run vulnerable code or execute code with

1185
00:45:31,359 --> 00:45:33,359
lambda functions behind

1186
00:45:33,359 --> 00:45:35,200
email service so you don't really have

1187
00:45:35,200 --> 00:45:37,280
to have an api

1188
00:45:37,280 --> 00:45:41,359
per se here so i've sent an email to a

1189
00:45:41,359 --> 00:45:43,599
call for papers and i got

1190
00:45:43,599 --> 00:45:45,440
an email back saying that where they

1191
00:45:45,440 --> 00:45:48,160
received our

1192
00:45:48,160 --> 00:45:50,000
submission and we'll get back

1193
00:45:50,000 --> 00:45:53,760
information now i'm going to attach

1194
00:45:55,760 --> 00:45:58,960
a malware so basically a pdf with some

1195
00:45:58,960 --> 00:46:00,720
uh power instead

1196
00:46:00,720 --> 00:46:03,200
so what what i'm going to see now is

1197
00:46:03,200 --> 00:46:04,400
that

1198
00:46:04,400 --> 00:46:07,359
i got a response the response said that

1199
00:46:07,359 --> 00:46:09,119
the file was

1200
00:46:09,119 --> 00:46:12,880
uh found malicious and if i click on the

1201
00:46:12,880 --> 00:46:15,440
review i'll see the response from the

1202
00:46:15,440 --> 00:46:18,240
aristotle about my submission

1203
00:46:18,240 --> 00:46:20,640
all right so it failed but i can

1204
00:46:20,640 --> 00:46:22,720
understand that there is some code

1205
00:46:22,720 --> 00:46:24,640
running behind the scene

1206
00:46:24,640 --> 00:46:26,640
on my upload

1207
00:46:26,640 --> 00:46:31,680
so now i created a specific exploit

1208
00:46:32,079 --> 00:46:35,359
this exploit is basically an ht um an

1209
00:46:35,359 --> 00:46:39,119
aws code right a python a lambda code

1210
00:46:39,119 --> 00:46:41,200
that sends an email

1211
00:46:41,200 --> 00:46:45,440
or creates an scs service sends an email

1212
00:46:45,440 --> 00:46:47,680
to

1213
00:46:48,400 --> 00:46:51,839
some participants that i'm i'm trying to

1214
00:46:51,839 --> 00:46:53,680
target and then

1215
00:46:53,680 --> 00:46:55,599
this

1216
00:46:55,599 --> 00:46:57,200
this is the first part is some kind of a

1217
00:46:57,200 --> 00:46:58,800
phishing attack and the last part the

1218
00:46:58,800 --> 00:47:00,640
second part here is what i'm going to do

1219
00:47:00,640 --> 00:47:03,920
is i'm going to change the permission of

1220
00:47:03,920 --> 00:47:05,920
the bucket that holds all the submission

1221
00:47:05,920 --> 00:47:08,640
to public so it was

1222
00:47:08,640 --> 00:47:11,440
secured before and i'll show you

1223
00:47:11,440 --> 00:47:15,680
it is secured now at this point

1224
00:47:16,560 --> 00:47:19,359
and but when i'll exploit the function

1225
00:47:19,359 --> 00:47:22,960
i'll make everything public

1226
00:47:23,680 --> 00:47:28,000
so i'm just uploading it to uh

1227
00:47:28,000 --> 00:47:31,760
okay so i'm wrapping it into a rxz file

1228
00:47:31,760 --> 00:47:34,240
and then i'm going to upload it to

1229
00:47:34,240 --> 00:47:37,040
uh vulnera sorry an s3 bucket owned by

1230
00:47:37,040 --> 00:47:40,319
me by the attacker

1231
00:47:43,520 --> 00:47:44,720
so then

1232
00:47:44,720 --> 00:47:46,720
from the function i can pull it up pull

1233
00:47:46,720 --> 00:47:47,520
it

1234
00:47:47,520 --> 00:47:50,720
the code inside the function and execute

1235
00:47:50,720 --> 00:47:52,480
so now i'm going to show you

1236
00:47:52,480 --> 00:47:54,319
uh

1237
00:47:54,319 --> 00:47:56,720
i have an angry service here with an

1238
00:47:56,720 --> 00:47:58,960
http tunnel so i can get response

1239
00:47:58,960 --> 00:48:00,880
requests or information back to my

1240
00:48:00,880 --> 00:48:02,000
computer

1241
00:48:02,000 --> 00:48:05,119
i created this payload inside the file

1242
00:48:05,119 --> 00:48:09,119
name the curl to my own host to download

1243
00:48:09,119 --> 00:48:10,160
this

1244
00:48:10,160 --> 00:48:13,040
uh tar file and then uh

1245
00:48:13,040 --> 00:48:14,640
unarchive it

1246
00:48:14,640 --> 00:48:16,960
and then execute so this is the bucket

1247
00:48:16,960 --> 00:48:19,520
sorry this is a submission bucket

1248
00:48:19,520 --> 00:48:21,680
where all the submissions are hosted and

1249
00:48:21,680 --> 00:48:23,280
you can see it's

1250
00:48:23,280 --> 00:48:25,760
access denied now i'm going to do the

1251
00:48:25,760 --> 00:48:27,200
same attack as

1252
00:48:27,200 --> 00:48:28,960
send the same submission only this time

1253
00:48:28,960 --> 00:48:32,400
with a malicious file here

1254
00:48:33,119 --> 00:48:35,119
the malicious file that i find name that

1255
00:48:35,119 --> 00:48:36,319
i created

1256
00:48:36,319 --> 00:48:38,079
and then when i send it there is a

1257
00:48:38,079 --> 00:48:40,079
vulnerable lambda behind that will send

1258
00:48:40,079 --> 00:48:43,119
me some information here to see that

1259
00:48:43,119 --> 00:48:45,119
things are happening in the background

1260
00:48:45,119 --> 00:48:47,920
so phishing email send and bucket hijack

1261
00:48:47,920 --> 00:48:50,319
this is a fishing email that i created

1262
00:48:50,319 --> 00:48:52,960
from the domain of the

1263
00:48:52,960 --> 00:48:55,520
host from because it's coming from their

1264
00:48:55,520 --> 00:48:58,240
service or aws account

1265
00:48:58,240 --> 00:49:00,720
congratulations you've been selected

1266
00:49:00,720 --> 00:49:03,200
accepted click here phishing site to

1267
00:49:03,200 --> 00:49:04,559
collect your

1268
00:49:04,559 --> 00:49:06,960
reward

1269
00:49:06,960 --> 00:49:08,720
okay that was cute but the most

1270
00:49:08,720 --> 00:49:11,359
important thing is that

1271
00:49:11,359 --> 00:49:14,000
okay thank you also but the nicest thing

1272
00:49:14,000 --> 00:49:16,800
is that now i change this bucket

1273
00:49:16,800 --> 00:49:19,040
to a public bucket and all the

1274
00:49:19,040 --> 00:49:21,760
information inside is now open to the

1275
00:49:21,760 --> 00:49:22,880
crowd

1276
00:49:22,880 --> 00:49:23,599
so

1277
00:49:23,599 --> 00:49:26,960
this is an attack that

1278
00:49:27,599 --> 00:49:29,280
takes advantage of a lambda function

1279
00:49:29,280 --> 00:49:32,640
that has that is running behind an sc

1280
00:49:32,640 --> 00:49:35,599
ses service the email service

1281
00:49:35,599 --> 00:49:36,640
that's it

1282
00:49:36,640 --> 00:49:39,520
uh thank you for attending this talk if

1283
00:49:39,520 --> 00:49:41,200
there are questions i'll be happy to

1284
00:49:41,200 --> 00:49:43,839
answer

