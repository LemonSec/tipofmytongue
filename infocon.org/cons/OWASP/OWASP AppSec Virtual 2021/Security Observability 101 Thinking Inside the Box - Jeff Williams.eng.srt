1
00:00:01,420 --> 00:00:05,040
[Music]

2
00:00:05,040 --> 00:00:07,520
thank you jason appreciate that so uh

3
00:00:07,520 --> 00:00:10,160
again my name is jeff williams uh

4
00:00:10,160 --> 00:00:12,639
and i've been doing application security

5
00:00:12,639 --> 00:00:13,599
for

6
00:00:13,599 --> 00:00:15,440
a little over 20 years

7
00:00:15,440 --> 00:00:18,400
i got started really early in it and

8
00:00:18,400 --> 00:00:20,240
i've gotten i've been fortunate to work

9
00:00:20,240 --> 00:00:22,640
with hundreds of really large companies

10
00:00:22,640 --> 00:00:24,720
on their application security programs i

11
00:00:24,720 --> 00:00:26,720
did tons of penetration testing and code

12
00:00:26,720 --> 00:00:27,680
review

13
00:00:27,680 --> 00:00:28,720
i

14
00:00:28,720 --> 00:00:30,800
got really involved with owasp in the

15
00:00:30,800 --> 00:00:33,040
early days uh wrote the os top 10 and

16
00:00:33,040 --> 00:00:34,640
web goat and led a bunch of other

17
00:00:34,640 --> 00:00:36,800
projects that some of you may have seen

18
00:00:36,800 --> 00:00:39,280
i am so excited to talk to you about

19
00:00:39,280 --> 00:00:40,800
security observability and

20
00:00:40,800 --> 00:00:42,079
instrumentation

21
00:00:42,079 --> 00:00:43,520
uh

22
00:00:43,520 --> 00:00:46,160
i want you to forget a little bit about

23
00:00:46,160 --> 00:00:47,440
what you know

24
00:00:47,440 --> 00:00:50,160
about application security testing

25
00:00:50,160 --> 00:00:50,879
and

26
00:00:50,879 --> 00:00:53,680
protection of applications at runtime

27
00:00:53,680 --> 00:00:56,239
even software composition analysis we're

28
00:00:56,239 --> 00:00:58,160
gonna talk about a technique for

29
00:00:58,160 --> 00:01:01,039
analyzing applications that deserves way

30
00:01:01,039 --> 00:01:02,960
more attention than it's getting

31
00:01:02,960 --> 00:01:04,640
we're going to dive into instrumentation

32
00:01:04,640 --> 00:01:05,840
i'm going to show you how to do it with

33
00:01:05,840 --> 00:01:07,760
an open source tool called jot that i

34
00:01:07,760 --> 00:01:11,680
created and enable you to make things

35
00:01:11,680 --> 00:01:12,880
that have been traditionally really

36
00:01:12,880 --> 00:01:14,640
complicated in apsec

37
00:01:14,640 --> 00:01:16,320
really easy

38
00:01:16,320 --> 00:01:18,159
so before we jump in i want to thank you

39
00:01:18,159 --> 00:01:20,240
for being part of owasp

40
00:01:20,240 --> 00:01:23,680
you really can make a difference

41
00:01:23,680 --> 00:01:26,000
application security is in its very

42
00:01:26,000 --> 00:01:28,000
early days still and i know i've been

43
00:01:28,000 --> 00:01:29,600
doing it for a long time but

44
00:01:29,600 --> 00:01:32,079
uh we haven't made a ton of progress in

45
00:01:32,079 --> 00:01:34,240
the first 20 years of apsec we've got a

46
00:01:34,240 --> 00:01:37,439
long way to go and so it's a great time

47
00:01:37,439 --> 00:01:39,520
to be an appsec there are massive

48
00:01:39,520 --> 00:01:40,400
advances

49
00:01:40,400 --> 00:01:42,479
in the way that we do apsec out there

50
00:01:42,479 --> 00:01:44,240
ready to discover ready to commercialize

51
00:01:44,240 --> 00:01:46,000
ready to bring the market and ready to

52
00:01:46,000 --> 00:01:49,840
change the world so that your kids

53
00:01:49,840 --> 00:01:51,200
won't have to worry about the security

54
00:01:51,200 --> 00:01:52,399
of their applications when they're doing

55
00:01:52,399 --> 00:01:54,079
their online banking and going to health

56
00:01:54,079 --> 00:01:55,280
care and

57
00:01:55,280 --> 00:01:57,040
thinking about using their government

58
00:01:57,040 --> 00:01:58,479
and

59
00:01:58,479 --> 00:02:01,759
uh elections and power grid and all that

60
00:02:01,759 --> 00:02:04,240
the future of the world is really riding

61
00:02:04,240 --> 00:02:05,439
on us

62
00:02:05,439 --> 00:02:06,960
so we've got to figure it out so thank

63
00:02:06,960 --> 00:02:09,440
you for being part of oas

64
00:02:09,440 --> 00:02:11,520
so let's jump into this talk so i always

65
00:02:11,520 --> 00:02:12,800
like to start

66
00:02:12,800 --> 00:02:15,280
uh talk with a few facts

67
00:02:15,280 --> 00:02:16,160
these

68
00:02:16,160 --> 00:02:18,959
are facts that come from directly

69
00:02:18,959 --> 00:02:20,959
measuring 10 000

70
00:02:20,959 --> 00:02:22,879
tens of thousands of applications

71
00:02:22,879 --> 00:02:25,280
at runtime in monitoring their behavior

72
00:02:25,280 --> 00:02:27,840
for vulnerabilities for attacks

73
00:02:27,840 --> 00:02:30,160
for library problems and it's just

74
00:02:30,160 --> 00:02:32,560
always interesting to me to notice that

75
00:02:32,560 --> 00:02:35,120
you know what this hasn't really changed

76
00:02:35,120 --> 00:02:36,879
these numbers were roughly the same when

77
00:02:36,879 --> 00:02:38,800
i started in appsec back in the early

78
00:02:38,800 --> 00:02:40,160
2000s

79
00:02:40,160 --> 00:02:41,680
almost all applications have at least

80
00:02:41,680 --> 00:02:43,760
one vulnerability the average software

81
00:02:43,760 --> 00:02:46,080
project is introducing three four

82
00:02:46,080 --> 00:02:47,760
vulnerabilities a month

83
00:02:47,760 --> 00:02:51,360
the average app has 30 vulnerabilities

84
00:02:51,360 --> 00:02:52,080
and

85
00:02:52,080 --> 00:02:53,519
a number of problems in their open

86
00:02:53,519 --> 00:02:55,360
source code and this is an interesting

87
00:02:55,360 --> 00:02:57,280
fact i'll just throw this out there we

88
00:02:57,280 --> 00:02:59,920
directly measure library usage at

89
00:02:59,920 --> 00:03:01,040
runtime

90
00:03:01,040 --> 00:03:02,239
and

91
00:03:02,239 --> 00:03:03,760
if you look at the way an application

92
00:03:03,760 --> 00:03:07,120
actually runs 20 of it is custom code we

93
00:03:07,120 --> 00:03:08,959
can assume that runs

94
00:03:08,959 --> 00:03:10,560
six percent of it

95
00:03:10,560 --> 00:03:11,280
is

96
00:03:11,280 --> 00:03:13,680
open source code that actually runs and

97
00:03:13,680 --> 00:03:16,159
the other 74

98
00:03:16,159 --> 00:03:18,319
is open source code that never gets

99
00:03:18,319 --> 00:03:19,519
invoked

100
00:03:19,519 --> 00:03:21,920
and doesn't really present much risk so

101
00:03:21,920 --> 00:03:23,200
i just want you to understand that when

102
00:03:23,200 --> 00:03:25,440
you think about you know s-bombs and

103
00:03:25,440 --> 00:03:27,440
library security and all that like put

104
00:03:27,440 --> 00:03:29,599
it in perspective like most of the code

105
00:03:29,599 --> 00:03:33,159
is actually custom

106
00:03:33,360 --> 00:03:34,959
so that's kind of the vulnerability side

107
00:03:34,959 --> 00:03:36,640
it's also pretty scary on the attack

108
00:03:36,640 --> 00:03:38,720
side the average applications attacked

109
00:03:38,720 --> 00:03:41,360
over 13 000 times a month there were no

110
00:03:41,360 --> 00:03:43,599
applications that didn't get attacked

111
00:03:43,599 --> 00:03:44,840
every single

112
00:03:44,840 --> 00:03:48,319
month and interestingly 99 of those

113
00:03:48,319 --> 00:03:50,239
attacks don't connect with their

114
00:03:50,239 --> 00:03:51,840
intended vulnerability now you can't

115
00:03:51,840 --> 00:03:53,599
measure that with a waff a laugh only

116
00:03:53,599 --> 00:03:55,280
knows hey that looks like an attack at

117
00:03:55,280 --> 00:03:56,560
the front door

118
00:03:56,560 --> 00:03:58,799
but we track these attacks all the way

119
00:03:58,799 --> 00:04:00,480
through the application

120
00:04:00,480 --> 00:04:02,400
so we know if it connects if it's a sql

121
00:04:02,400 --> 00:04:04,400
injection attack did it actually connect

122
00:04:04,400 --> 00:04:06,480
with a sql query and modify the meaning

123
00:04:06,480 --> 00:04:08,000
of that query

124
00:04:08,000 --> 00:04:10,480
that rarely happens one percent of the

125
00:04:10,480 --> 00:04:12,640
time that happens so it's important to

126
00:04:12,640 --> 00:04:14,480
understand you know what people are

127
00:04:14,480 --> 00:04:16,160
attacking and which vulnerabilities

128
00:04:16,160 --> 00:04:18,000
they're actually connecting to in a way

129
00:04:18,000 --> 00:04:20,560
that they can exploit

130
00:04:20,560 --> 00:04:24,160
so uh look if you're real vulnerable and

131
00:04:24,160 --> 00:04:26,160
you've got a lot of attacks going on

132
00:04:26,160 --> 00:04:27,759
that creates a dangerous situation and

133
00:04:27,759 --> 00:04:29,600
the world is messed up right now

134
00:04:29,600 --> 00:04:32,240
i'd be willing to bet a lot of you bank

135
00:04:32,240 --> 00:04:33,680
online

136
00:04:33,680 --> 00:04:34,960
i want you to ask yourself what do you

137
00:04:34,960 --> 00:04:37,280
really know about the security of the

138
00:04:37,280 --> 00:04:38,880
app that you use when you either use

139
00:04:38,880 --> 00:04:40,880
your mobile phone or you log on to the

140
00:04:40,880 --> 00:04:44,000
website like connecting to back-end apis

141
00:04:44,000 --> 00:04:45,680
what do you know about the security of

142
00:04:45,680 --> 00:04:47,280
that do you know

143
00:04:47,280 --> 00:04:49,199
how it was built what components are in

144
00:04:49,199 --> 00:04:51,600
it who tested it uh

145
00:04:51,600 --> 00:04:53,280
does it have vulnerabilities do they

146
00:04:53,280 --> 00:04:55,120
keep their libraries up to date do other

147
00:04:55,120 --> 00:04:56,800
developers trained you probably don't

148
00:04:56,800 --> 00:04:58,479
know anything about it and that's

149
00:04:58,479 --> 00:05:00,320
terrifying and that's uh

150
00:05:00,320 --> 00:05:01,840
gotta change

151
00:05:01,840 --> 00:05:04,320
uh it's not exactly this talk but uh i

152
00:05:04,320 --> 00:05:06,160
do think there's we're making progress

153
00:05:06,160 --> 00:05:07,440
in this space

154
00:05:07,440 --> 00:05:09,360
uh the executive order that just came

155
00:05:09,360 --> 00:05:11,520
out and the implementing regulations

156
00:05:11,520 --> 00:05:14,240
from nist are doing a good job of

157
00:05:14,240 --> 00:05:16,320
pushing industry along to disclose a lot

158
00:05:16,320 --> 00:05:17,520
of the information about these things

159
00:05:17,520 --> 00:05:18,720
and i believe it's going to change the

160
00:05:18,720 --> 00:05:21,039
market

161
00:05:21,039 --> 00:05:22,840
okay so a little

162
00:05:22,840 --> 00:05:25,280
background what do we do about it well i

163
00:05:25,280 --> 00:05:26,080
want to talk to you about

164
00:05:26,080 --> 00:05:27,600
instrumentation and i'm going to start

165
00:05:27,600 --> 00:05:29,360
by showing this basketball this is the

166
00:05:29,360 --> 00:05:31,520
wilson 9450

167
00:05:31,520 --> 00:05:33,840
it's an instrumented basketball it's got

168
00:05:33,840 --> 00:05:36,400
sensors inside it and it detects the

169
00:05:36,400 --> 00:05:38,080
speed of your dribble and the rotation

170
00:05:38,080 --> 00:05:39,759
of the ball the arc of your shot and a

171
00:05:39,759 --> 00:05:41,280
whole bunch of other things it comes

172
00:05:41,280 --> 00:05:42,400
with an app that gives you a bunch of

173
00:05:42,400 --> 00:05:45,520
drills and actually it's pretty amazing

174
00:05:45,520 --> 00:05:47,440
it uh i used it for a little while i've

175
00:05:47,440 --> 00:05:50,960
been playing basketball for 30 years uh

176
00:05:50,960 --> 00:05:54,000
it actually helps it uh told me that my

177
00:05:54,000 --> 00:05:56,319
the arc of my shot was too flat and i

178
00:05:56,319 --> 00:05:59,120
made a change and it improved my game

179
00:05:59,120 --> 00:06:00,960
it's uh it's really amazing and the

180
00:06:00,960 --> 00:06:02,400
reason i spend time on this is because i

181
00:06:02,400 --> 00:06:04,400
want you to understand

182
00:06:04,400 --> 00:06:06,720
the way that instrumentation can change

183
00:06:06,720 --> 00:06:08,160
an entire

184
00:06:08,160 --> 00:06:10,479
industry

185
00:06:10,479 --> 00:06:13,039
look at something like uh

186
00:06:13,039 --> 00:06:14,880
you know just this basketball we can

187
00:06:14,880 --> 00:06:16,639
change the relationship between coaches

188
00:06:16,639 --> 00:06:18,639
and players if we have a basketball and

189
00:06:18,639 --> 00:06:20,720
drills that we can give the players and

190
00:06:20,720 --> 00:06:22,319
let them coach themselves and train

191
00:06:22,319 --> 00:06:24,080
themselves the coaches can take a more

192
00:06:24,080 --> 00:06:28,000
strategic role overseeing helping

193
00:06:28,000 --> 00:06:29,520
players out with areas where they need

194
00:06:29,520 --> 00:06:30,960
help instead of having to do the

195
00:06:30,960 --> 00:06:32,560
day-to-day work

196
00:06:32,560 --> 00:06:34,400
same thing in healthcare many of you may

197
00:06:34,400 --> 00:06:36,400
be wearing uh fitbits or one of those

198
00:06:36,400 --> 00:06:38,080
rings that senses your blood pressure

199
00:06:38,080 --> 00:06:41,280
and so on uh very soon your devices are

200
00:06:41,280 --> 00:06:42,880
gonna know you're sick before you do

201
00:06:42,880 --> 00:06:45,520
they're gonna monitor you 24 7

202
00:06:45,520 --> 00:06:47,840
instead of going to a doctor once every

203
00:06:47,840 --> 00:06:49,919
three to five years and getting a

204
00:06:49,919 --> 00:06:50,960
checkup

205
00:06:50,960 --> 00:06:52,720
that's you're probably never going to be

206
00:06:52,720 --> 00:06:54,560
sick at the exact time you go to the

207
00:06:54,560 --> 00:06:55,440
doctor

208
00:06:55,440 --> 00:06:56,800
so uh

209
00:06:56,800 --> 00:06:59,599
you know really a big change here

210
00:06:59,599 --> 00:07:02,080
and all it takes is some instrumentation

211
00:07:02,080 --> 00:07:05,520
some sensors and some big data analysis

212
00:07:05,520 --> 00:07:07,199
to pull it all together

213
00:07:07,199 --> 00:07:09,440
we can change the economics of

214
00:07:09,440 --> 00:07:11,199
application security with

215
00:07:11,199 --> 00:07:13,520
instrumentation so let's talk about how

216
00:07:13,520 --> 00:07:16,720
it really works

217
00:07:16,720 --> 00:07:18,319
the good news is

218
00:07:18,319 --> 00:07:20,639
software instrumentation is easy we've

219
00:07:20,639 --> 00:07:24,479
been doing this for 20 years

220
00:07:24,960 --> 00:07:27,440
typically people instrument applications

221
00:07:27,440 --> 00:07:29,599
for you know a little extra logging

222
00:07:29,599 --> 00:07:30,960
maybe they do some performance

223
00:07:30,960 --> 00:07:33,039
monitoring this is exactly the way that

224
00:07:33,039 --> 00:07:35,360
tools like new relic and app dynamics

225
00:07:35,360 --> 00:07:36,560
work to

226
00:07:36,560 --> 00:07:38,240
measure performance from within an

227
00:07:38,240 --> 00:07:40,639
application

228
00:07:40,639 --> 00:07:42,720
what we're going to talk about today

229
00:07:42,720 --> 00:07:44,960
is instrumenting an application so that

230
00:07:44,960 --> 00:07:47,599
we can measure security from within the

231
00:07:47,599 --> 00:07:50,479
application itself

232
00:07:50,479 --> 00:07:52,800
so here's how it works uh

233
00:07:52,800 --> 00:07:55,840
every application starts on disk it's a

234
00:07:55,840 --> 00:07:57,599
file like a jar file or we're going to

235
00:07:57,599 --> 00:07:58,960
be talking about java a lot today but

236
00:07:58,960 --> 00:08:00,960
we'll if this applies to any language

237
00:08:00,960 --> 00:08:02,960
the executable exists on disk and

238
00:08:02,960 --> 00:08:05,120
typically what happens is that

239
00:08:05,120 --> 00:08:07,599
that executable gets loaded into memory

240
00:08:07,599 --> 00:08:08,560
and then

241
00:08:08,560 --> 00:08:10,720
starts executing it's an exact copy of

242
00:08:10,720 --> 00:08:12,720
what was on disk

243
00:08:12,720 --> 00:08:15,840
but modern software platforms provide

244
00:08:15,840 --> 00:08:18,000
the ability to instrument that code as

245
00:08:18,000 --> 00:08:19,440
it loads

246
00:08:19,440 --> 00:08:21,520
so in order to get this instrumentation

247
00:08:21,520 --> 00:08:23,360
we don't have to change anything about

248
00:08:23,360 --> 00:08:26,400
how we build test or deploy the code we

249
00:08:26,400 --> 00:08:28,319
can add the instrumentation at runtime

250
00:08:28,319 --> 00:08:30,639
as the application starts up and you can

251
00:08:30,639 --> 00:08:31,759
do this

252
00:08:31,759 --> 00:08:33,839
in a dev environment when you're testing

253
00:08:33,839 --> 00:08:36,080
locally you can do it in a qa

254
00:08:36,080 --> 00:08:37,679
environment you can do it in a cicd

255
00:08:37,679 --> 00:08:40,399
environment anywhere the code runs

256
00:08:40,399 --> 00:08:42,880
you can add this instrumentation to give

257
00:08:42,880 --> 00:08:44,880
yourself unprecedented visibility to

258
00:08:44,880 --> 00:08:47,600
what's going on inside the application

259
00:08:47,600 --> 00:08:48,399
so

260
00:08:48,399 --> 00:08:50,720
as this code loads

261
00:08:50,720 --> 00:08:53,600
the loader has the ability to delegate

262
00:08:53,600 --> 00:08:56,560
to uh a transformer an agent that will

263
00:08:56,560 --> 00:08:58,959
watch that code and add the sensors into

264
00:08:58,959 --> 00:09:00,320
it just as though they were written in

265
00:09:00,320 --> 00:09:02,080
the source code they're not we're

266
00:09:02,080 --> 00:09:04,720
weaving it into the binary but as far as

267
00:09:04,720 --> 00:09:06,640
this you know the ending purple code up

268
00:09:06,640 --> 00:09:09,360
here it looks exactly like the developer

269
00:09:09,360 --> 00:09:11,360
wrote this instrumentation into their

270
00:09:11,360 --> 00:09:13,279
source code it just it's sort of a

271
00:09:13,279 --> 00:09:15,519
different way of assembling an app

272
00:09:15,519 --> 00:09:17,120
so this is really cool then we're going

273
00:09:17,120 --> 00:09:18,080
to

274
00:09:18,080 --> 00:09:19,440
instrument we're going to run this

275
00:09:19,440 --> 00:09:20,880
instrumented app

276
00:09:20,880 --> 00:09:22,880
and we're going to collect any kind of

277
00:09:22,880 --> 00:09:24,640
telemetry that we want to know about

278
00:09:24,640 --> 00:09:26,320
what's going on inside that application

279
00:09:26,320 --> 00:09:28,080
and as you'll see there's a ton of

280
00:09:28,080 --> 00:09:30,399
really cool security stuff that you can

281
00:09:30,399 --> 00:09:33,360
analyze this is a super surgical

282
00:09:33,360 --> 00:09:35,600
technique it allows you to put sensors

283
00:09:35,600 --> 00:09:37,440
exactly where you want inside the

284
00:09:37,440 --> 00:09:38,640
application

285
00:09:38,640 --> 00:09:41,120
the performance of these sensors is

286
00:09:41,120 --> 00:09:44,080
insanely fast it's almost impossible to

287
00:09:44,080 --> 00:09:45,519
measure and i've tried i've started you

288
00:09:45,519 --> 00:09:48,080
know run the same program with the with

289
00:09:48,080 --> 00:09:49,839
the agent without the agent done you

290
00:09:49,839 --> 00:09:51,920
know millions of requests and it's

291
00:09:51,920 --> 00:09:53,680
almost impossible to measure so we're

292
00:09:53,680 --> 00:09:56,480
talking about you know

293
00:09:56,480 --> 00:10:01,440
microseconds of uh latency here

294
00:10:01,440 --> 00:10:02,959
so

295
00:10:02,959 --> 00:10:06,240
uh here's how i think about this is you

296
00:10:06,240 --> 00:10:07,680
know i spent a lot of years doing pen

297
00:10:07,680 --> 00:10:09,519
tests and

298
00:10:09,519 --> 00:10:11,360
someone once told me pen testing is a

299
00:10:11,360 --> 00:10:12,880
little bit like trying to find a problem

300
00:10:12,880 --> 00:10:14,880
in the water heater by staring up the

301
00:10:14,880 --> 00:10:16,240
shower

302
00:10:16,240 --> 00:10:17,760
because you're just kind of throwing

303
00:10:17,760 --> 00:10:19,839
requests in and seeing what comes back

304
00:10:19,839 --> 00:10:22,240
and trying to diagnose that uh to figure

305
00:10:22,240 --> 00:10:25,279
out what's going on inside the app

306
00:10:25,279 --> 00:10:27,440
really difficult i mean it's you know

307
00:10:27,440 --> 00:10:29,279
being a great pen tester is super hard

308
00:10:29,279 --> 00:10:31,440
but what if you had a friend

309
00:10:31,440 --> 00:10:34,000
living inside the application

310
00:10:34,000 --> 00:10:35,360
that could tell you whether you hit

311
00:10:35,360 --> 00:10:38,320
something or not so you send in a test

312
00:10:38,320 --> 00:10:39,360
case

313
00:10:39,360 --> 00:10:41,519
http request and

314
00:10:41,519 --> 00:10:43,680
the friend could say oh yeah that that

315
00:10:43,680 --> 00:10:45,839
third parameter that you sent the name

316
00:10:45,839 --> 00:10:47,040
parameter that flowed through the

317
00:10:47,040 --> 00:10:49,680
application and ended up in a sql query

318
00:10:49,680 --> 00:10:51,680
well that helps a lot right now you can

319
00:10:51,680 --> 00:10:53,360
know okay maybe that's a target for sql

320
00:10:53,360 --> 00:10:54,640
injection you can

321
00:10:54,640 --> 00:10:56,240
focus your test

322
00:10:56,240 --> 00:10:57,760
you don't even have to attack the

323
00:10:57,760 --> 00:10:59,680
application if you know

324
00:10:59,680 --> 00:11:01,440
what's going on inside the application

325
00:11:01,440 --> 00:11:02,800
as we'll see

326
00:11:02,800 --> 00:11:04,000
so

327
00:11:04,000 --> 00:11:06,160
the other huge advantage of using

328
00:11:06,160 --> 00:11:08,000
instrumentation is that you're measuring

329
00:11:08,000 --> 00:11:10,399
what i call runtime reality

330
00:11:10,399 --> 00:11:12,240
the whole app

331
00:11:12,240 --> 00:11:14,800
as it's all assembled and put together

332
00:11:14,800 --> 00:11:16,320
and if you think about how some of the

333
00:11:16,320 --> 00:11:18,959
other tools in our space work

334
00:11:18,959 --> 00:11:21,120
they don't work they don't work that way

335
00:11:21,120 --> 00:11:22,399
uh you know if you're using a static

336
00:11:22,399 --> 00:11:23,680
analysis tool it's probably just

337
00:11:23,680 --> 00:11:26,320
analyzing the source code

338
00:11:26,320 --> 00:11:28,880
as it appears in a repo

339
00:11:28,880 --> 00:11:30,800
now is that the whole app no

340
00:11:30,800 --> 00:11:32,320
it doesn't include a bunch of critical

341
00:11:32,320 --> 00:11:34,240
pieces it doesn't include

342
00:11:34,240 --> 00:11:35,440
uh

343
00:11:35,440 --> 00:11:37,360
the open source libraries although you

344
00:11:37,360 --> 00:11:39,519
might be able to get that from the you

345
00:11:39,519 --> 00:11:41,279
know the manifest or something but it

346
00:11:41,279 --> 00:11:42,800
certainly doesn't include the app server

347
00:11:42,800 --> 00:11:44,720
it doesn't include the platform

348
00:11:44,720 --> 00:11:48,000
many libraries are resolved at runtime

349
00:11:48,000 --> 00:11:49,600
so if you want to understand how the

350
00:11:49,600 --> 00:11:51,120
application behaves you have to look at

351
00:11:51,120 --> 00:11:54,399
it all the way assembled

352
00:11:54,639 --> 00:11:56,880
the repo might also have

353
00:11:56,880 --> 00:11:57,839
uh

354
00:11:57,839 --> 00:12:01,200
libraries and code in it that

355
00:12:01,200 --> 00:12:02,480
aren't part of the production

356
00:12:02,480 --> 00:12:04,800
environment things like test code and

357
00:12:04,800 --> 00:12:07,040
frameworks and things like that

358
00:12:07,040 --> 00:12:08,639
that don't end up in the running

359
00:12:08,639 --> 00:12:11,040
application so you can end up both over

360
00:12:11,040 --> 00:12:13,279
measuring stuff and under measuring

361
00:12:13,279 --> 00:12:15,519
stuff because you don't have the runtime

362
00:12:15,519 --> 00:12:16,560
reality

363
00:12:16,560 --> 00:12:18,720
so when you use instrumentation you're

364
00:12:18,720 --> 00:12:20,959
measuring exactly how the actual

365
00:12:20,959 --> 00:12:22,720
application behaves at run time and

366
00:12:22,720 --> 00:12:24,800
that's why it's so much more accurate

367
00:12:24,800 --> 00:12:25,839
than

368
00:12:25,839 --> 00:12:28,160
traditional forms of analysis

369
00:12:28,160 --> 00:12:28,880
so

370
00:12:28,880 --> 00:12:31,519
look we're going to dive into this and

371
00:12:31,519 --> 00:12:33,200
talk about how you can do your own

372
00:12:33,200 --> 00:12:35,839
instrumentation

373
00:12:35,839 --> 00:12:37,839
and i want to make really clear i'm not

374
00:12:37,839 --> 00:12:40,240
talking about contrast here

375
00:12:40,240 --> 00:12:42,079
contrast is an application security

376
00:12:42,079 --> 00:12:43,360
platform it's got a bunch of different

377
00:12:43,360 --> 00:12:44,880
products in it we're not talking about

378
00:12:44,880 --> 00:12:47,279
it today we do use instrumentation for a

379
00:12:47,279 --> 00:12:48,560
lot of things

380
00:12:48,560 --> 00:12:49,600
but i want to talk to you about the

381
00:12:49,600 --> 00:12:52,160
technique of instrumentation here and

382
00:12:52,160 --> 00:12:53,680
i'm going to use an open source tool

383
00:12:53,680 --> 00:12:55,519
that i created called jot

384
00:12:55,519 --> 00:12:58,399
this is the java observability toolkit

385
00:12:58,399 --> 00:13:00,800
and it will allow you to instrument your

386
00:13:00,800 --> 00:13:03,440
own applications for security and for

387
00:13:03,440 --> 00:13:05,120
anything else that you want to know

388
00:13:05,120 --> 00:13:06,720
about what's going on inside the

389
00:13:06,720 --> 00:13:08,480
application

390
00:13:08,480 --> 00:13:10,320
the big

391
00:13:10,320 --> 00:13:11,839
i think the big hurdle to using

392
00:13:11,839 --> 00:13:13,360
instrumentation is it's a little bit

393
00:13:13,360 --> 00:13:14,399
difficult

394
00:13:14,399 --> 00:13:17,839
to write the actual instrumentation

395
00:13:17,839 --> 00:13:18,800
piece

396
00:13:18,800 --> 00:13:20,399
uh it's kind of a

397
00:13:20,399 --> 00:13:22,240
you know writing a program that modifies

398
00:13:22,240 --> 00:13:24,720
another program is a little bit

399
00:13:24,720 --> 00:13:26,399
meta for a lot of people

400
00:13:26,399 --> 00:13:28,160
so i created this

401
00:13:28,160 --> 00:13:31,600
this jot tool which will allow you to

402
00:13:31,600 --> 00:13:33,920
create sensors deploy them as part of

403
00:13:33,920 --> 00:13:36,160
your application without any coding if

404
00:13:36,160 --> 00:13:38,800
you can make a yaml file you can use jot

405
00:13:38,800 --> 00:13:41,360
to instrument applications and discover

406
00:13:41,360 --> 00:13:42,880
some amazing things that we're going to

407
00:13:42,880 --> 00:13:44,959
go through together

408
00:13:44,959 --> 00:13:47,199
you can find jot here on github it's

409
00:13:47,199 --> 00:13:49,600
totally free and open source and uh only

410
00:13:49,600 --> 00:13:52,800
takes a few seconds to get started with

411
00:13:52,800 --> 00:13:53,760
so

412
00:13:53,760 --> 00:13:56,000
let's jump into it so i want to start

413
00:13:56,000 --> 00:13:58,000
with some ridiculously simple examples

414
00:13:58,000 --> 00:13:58,959
and then we're going to get a little

415
00:13:58,959 --> 00:14:01,120
more complicated

416
00:14:01,120 --> 00:14:03,519
so instead of i've got this all to demo

417
00:14:03,519 --> 00:14:05,839
for you so you can have the slides i'll

418
00:14:05,839 --> 00:14:09,279
upload them after this so anybody can

419
00:14:09,279 --> 00:14:10,959
see what i've done here but i'm going to

420
00:14:10,959 --> 00:14:12,320
show you how to use instrumentation on

421
00:14:12,320 --> 00:14:14,880
this app called ticketbook it's a really

422
00:14:14,880 --> 00:14:16,399
simple

423
00:14:16,399 --> 00:14:18,880
java ee application that's got a bunch

424
00:14:18,880 --> 00:14:21,360
of interesting vulnerabilities in it and

425
00:14:21,360 --> 00:14:22,959
some some other capabilities but it's a

426
00:14:22,959 --> 00:14:25,760
fairly typical java ee application

427
00:14:25,760 --> 00:14:27,120
and we're gonna use instrumentation to

428
00:14:27,120 --> 00:14:30,720
discover some stuff about it

429
00:14:30,720 --> 00:14:33,440
so the first step is to grab a copy of

430
00:14:33,440 --> 00:14:35,920
jot and you can download it

431
00:14:35,920 --> 00:14:37,680
directly from github actually let me

432
00:14:37,680 --> 00:14:39,600
show you the project homepage

433
00:14:39,600 --> 00:14:41,440
this is the the project homepage it's

434
00:14:41,440 --> 00:14:44,160
just planet level slash jot

435
00:14:44,160 --> 00:14:45,760
and there's a bunch of documentation

436
00:14:45,760 --> 00:14:48,160
here about how you can create your first

437
00:14:48,160 --> 00:14:50,720
jot a jot is a sensor that you're going

438
00:14:50,720 --> 00:14:52,399
to add to your application and it's just

439
00:14:52,399 --> 00:14:54,959
a yaml file

440
00:14:54,959 --> 00:14:56,800
and you can download it from here you

441
00:14:56,800 --> 00:14:58,560
can just click into the release and just

442
00:14:58,560 --> 00:15:00,880
grab the latest jar file

443
00:15:00,880 --> 00:15:02,160
um

444
00:15:02,160 --> 00:15:04,480
here i actually like to just get it with

445
00:15:04,480 --> 00:15:06,320
curl in whatever environment i'm in so

446
00:15:06,320 --> 00:15:08,399
i've already i've already got it here so

447
00:15:08,399 --> 00:15:09,760
uh

448
00:15:09,760 --> 00:15:10,839
remove

449
00:15:10,839 --> 00:15:12,639
that

450
00:15:12,639 --> 00:15:14,399
and just download it with curls so now

451
00:15:14,399 --> 00:15:16,079
we've got our

452
00:15:16,079 --> 00:15:18,480
jar file

453
00:15:18,480 --> 00:15:21,120
so to use jot

454
00:15:21,120 --> 00:15:22,720
what we're going to do is we're going to

455
00:15:22,720 --> 00:15:25,360
start this application

456
00:15:25,360 --> 00:15:26,800
uh

457
00:15:26,800 --> 00:15:28,959
and tell java to use this

458
00:15:28,959 --> 00:15:31,199
instrumentation agent so

459
00:15:31,199 --> 00:15:32,160
uh

460
00:15:32,160 --> 00:15:33,600
i'm gonna use an environment variable to

461
00:15:33,600 --> 00:15:35,519
do that let me just like that one up

462
00:15:35,519 --> 00:15:37,519
here that's

463
00:15:37,519 --> 00:15:38,959
already set up

464
00:15:38,959 --> 00:15:41,519
so i'm going to use this java tool

465
00:15:41,519 --> 00:15:42,720
options

466
00:15:42,720 --> 00:15:45,199
environment variable that tells java use

467
00:15:45,199 --> 00:15:47,519
this java agent flag which is a standard

468
00:15:47,519 --> 00:15:49,120
built-in piece it's called the java

469
00:15:49,120 --> 00:15:50,800
instrumentation api

470
00:15:50,800 --> 00:15:53,279
in net you could use the profiler api

471
00:15:53,279 --> 00:15:54,959
and every language kind of has one of

472
00:15:54,959 --> 00:15:56,000
these

473
00:15:56,000 --> 00:15:58,240
we're going to use the jar file that i

474
00:15:58,240 --> 00:15:59,519
just downloaded

475
00:15:59,519 --> 00:16:01,279
and we're going to add this uh

476
00:16:01,279 --> 00:16:03,920
especially well i'm going to add a jot

477
00:16:03,920 --> 00:16:05,199
file to this and we're just going to use

478
00:16:05,199 --> 00:16:08,160
this untrusted sql one

479
00:16:08,160 --> 00:16:09,519
let me show you what that file looks

480
00:16:09,519 --> 00:16:11,759
like

481
00:16:14,079 --> 00:16:16,480
so this is agile

482
00:16:16,480 --> 00:16:18,639
and you can see here

483
00:16:18,639 --> 00:16:20,480
every sensor has a name

484
00:16:20,480 --> 00:16:22,959
this is called get unsafe queries it's

485
00:16:22,959 --> 00:16:24,240
got a little description so you know

486
00:16:24,240 --> 00:16:26,800
what it's doing it lists some methods

487
00:16:26,800 --> 00:16:27,839
these are the methods that we're going

488
00:16:27,839 --> 00:16:29,839
to instrument and in this case these are

489
00:16:29,839 --> 00:16:32,320
unparameterized database queries that

490
00:16:32,320 --> 00:16:35,040
might be susceptible to sql injection

491
00:16:35,040 --> 00:16:37,199
they're not necessarily susceptible but

492
00:16:37,199 --> 00:16:38,800
if you have a policy internally that

493
00:16:38,800 --> 00:16:40,000
says hey we should use prepared

494
00:16:40,000 --> 00:16:41,360
statements everywhere which is a pretty

495
00:16:41,360 --> 00:16:42,399
good idea

496
00:16:42,399 --> 00:16:44,480
then this is a very fast way to discover

497
00:16:44,480 --> 00:16:46,639
any place in your app that you're using

498
00:16:46,639 --> 00:16:49,839
unsafe queries

499
00:16:49,839 --> 00:16:52,399
this applies not only to the custom code

500
00:16:52,399 --> 00:16:54,320
but to all the libraries and frameworks

501
00:16:54,320 --> 00:16:55,839
and everything else that you're using

502
00:16:55,839 --> 00:16:57,440
you'll be able to see exactly where

503
00:16:57,440 --> 00:17:00,399
these unsafe methods are being invoked

504
00:17:00,399 --> 00:17:01,519
and

505
00:17:01,519 --> 00:17:03,839
it's really easy so as i mentioned

506
00:17:03,839 --> 00:17:07,839
before i set the the java tool options

507
00:17:07,839 --> 00:17:09,039
and then all i'm going to do is run this

508
00:17:09,039 --> 00:17:10,720
application

509
00:17:10,720 --> 00:17:14,559
uh oops this is a tomcat

510
00:17:15,839 --> 00:17:16,799
so we're just going to run this the

511
00:17:16,799 --> 00:17:18,799
normal way and what you'll see here is

512
00:17:18,799 --> 00:17:22,000
as this as tomcat started up

513
00:17:22,000 --> 00:17:24,079
started loading uh classes and you can

514
00:17:24,079 --> 00:17:26,400
see it picked up our agent

515
00:17:26,400 --> 00:17:28,640
it loaded the sensors you could put

516
00:17:28,640 --> 00:17:30,320
multiple sensors in a single file

517
00:17:30,320 --> 00:17:31,520
because you might want to measure more

518
00:17:31,520 --> 00:17:33,760
than one thing and then here

519
00:17:33,760 --> 00:17:35,360
you can see it instrumented a few

520
00:17:35,360 --> 00:17:36,799
classes

521
00:17:36,799 --> 00:17:38,320
and then it just continues to start up

522
00:17:38,320 --> 00:17:41,280
normally so it adds you know a fraction

523
00:17:41,280 --> 00:17:43,679
of a second to start up and then you

524
00:17:43,679 --> 00:17:46,400
just use the application the normal way

525
00:17:46,400 --> 00:17:48,799
so i can just browse around i'll put

526
00:17:48,799 --> 00:17:51,360
oas you don't have to put any particular

527
00:17:51,360 --> 00:17:53,120
data in here this is kind of the cool

528
00:17:53,120 --> 00:17:55,280
thing is i can test this application

529
00:17:55,280 --> 00:17:58,799
without having to hack it

530
00:17:59,679 --> 00:18:01,520
i can just click around and i'll put

531
00:18:01,520 --> 00:18:02,720
elast

532
00:18:02,720 --> 00:18:05,039
i'll put o-wops

533
00:18:05,039 --> 00:18:07,760
all right and you'll see as i do this

534
00:18:07,760 --> 00:18:09,440
we're getting traces from the

535
00:18:09,440 --> 00:18:11,919
application showing me the exact line of

536
00:18:11,919 --> 00:18:15,280
code the method and the full sql query

537
00:18:15,280 --> 00:18:18,000
that went to the database unsafely and

538
00:18:18,000 --> 00:18:19,440
if you look the method name is actually

539
00:18:19,440 --> 00:18:21,039
query unsafe which is a little bit

540
00:18:21,039 --> 00:18:22,880
suspect but it doesn't matter like

541
00:18:22,880 --> 00:18:24,400
however this gets called you can

542
00:18:24,400 --> 00:18:26,240
actually get the full stack trace here

543
00:18:26,240 --> 00:18:27,360
if you want

544
00:18:27,360 --> 00:18:29,919
um so this is a really powerful way of

545
00:18:29,919 --> 00:18:31,600
quickly finding stuff

546
00:18:31,600 --> 00:18:34,080
imagine you put in a new policy in your

547
00:18:34,080 --> 00:18:36,559
organization that says hey as a as a

548
00:18:36,559 --> 00:18:38,720
company we're not using unparameterized

549
00:18:38,720 --> 00:18:40,160
queries anymore

550
00:18:40,160 --> 00:18:42,960
well that would be uh take years to go

551
00:18:42,960 --> 00:18:44,720
you know find all that in all your code

552
00:18:44,720 --> 00:18:47,600
and root it out if you said up chat to

553
00:18:47,600 --> 00:18:49,039
just measure this

554
00:18:49,039 --> 00:18:50,960
in your in various test environments you

555
00:18:50,960 --> 00:18:53,039
could find all the ones that matter

556
00:18:53,039 --> 00:18:55,360
gather a central log of everywhere in

557
00:18:55,360 --> 00:18:56,640
the in the world that you're using

558
00:18:56,640 --> 00:18:57,760
unsafe queries and then you could

559
00:18:57,760 --> 00:18:59,440
actually just go replace them with

560
00:18:59,440 --> 00:19:01,039
parameterized queries

561
00:19:01,039 --> 00:19:03,360
so again this is the the simplest

562
00:19:03,360 --> 00:19:05,679
possible thing you could do with jot but

563
00:19:05,679 --> 00:19:06,799
i just wanted to give you a sense of

564
00:19:06,799 --> 00:19:08,400
just how easy it is for you to get

565
00:19:08,400 --> 00:19:10,720
started with instrumentation and some of

566
00:19:10,720 --> 00:19:13,600
the advantages over tools like static

567
00:19:13,600 --> 00:19:16,799
and dynamic testing which are you know

568
00:19:16,799 --> 00:19:20,160
really complex to use

569
00:19:20,160 --> 00:19:22,400
okay

570
00:19:23,440 --> 00:19:25,919
so that's uh the untrusted sequel one

571
00:19:25,919 --> 00:19:27,360
we're gonna go on to something a little

572
00:19:27,360 --> 00:19:30,160
more uh advanced here how about we wanna

573
00:19:30,160 --> 00:19:32,320
know everywhere where encryption's

574
00:19:32,320 --> 00:19:34,400
happening in our application

575
00:19:34,400 --> 00:19:37,520
well let's take a look so i've got a

576
00:19:37,520 --> 00:19:40,640
a jot for that i'm going to cat john's

577
00:19:40,640 --> 00:19:43,679
slash cyphers

578
00:19:44,000 --> 00:19:45,120
dot dot

579
00:19:45,120 --> 00:19:46,880
and you can see here i'll move this up

580
00:19:46,880 --> 00:19:47,919
sorry it's the middle of the screen a

581
00:19:47,919 --> 00:19:50,080
little more so you can see here

582
00:19:50,080 --> 00:19:51,520
we've got

583
00:19:51,520 --> 00:19:52,480
a

584
00:19:52,480 --> 00:19:54,880
sensor that all it does is put a sensor

585
00:19:54,880 --> 00:19:57,039
into cypher.get instance

586
00:19:57,039 --> 00:19:58,080
and

587
00:19:58,080 --> 00:19:58,960
uh

588
00:19:58,960 --> 00:20:00,080
here's a couple of interesting things

589
00:20:00,080 --> 00:20:01,440
that we're going to explore in the jot

590
00:20:01,440 --> 00:20:03,760
language you can define multiple

591
00:20:03,760 --> 00:20:04,880
captures

592
00:20:04,880 --> 00:20:07,039
and this is a way to capture information

593
00:20:07,039 --> 00:20:09,360
out of the running application and when

594
00:20:09,360 --> 00:20:10,960
i think about this i'm kind of thinking

595
00:20:10,960 --> 00:20:12,640
about like an electronics project where

596
00:20:12,640 --> 00:20:14,320
you're putting probes

597
00:20:14,320 --> 00:20:16,400
into uh you know a chip and into a

598
00:20:16,400 --> 00:20:18,960
circuit and you're measuring

599
00:20:18,960 --> 00:20:20,240
data directly from the running

600
00:20:20,240 --> 00:20:21,679
application that's a little bit what

601
00:20:21,679 --> 00:20:23,600
we're doing here we just put one of our

602
00:20:23,600 --> 00:20:26,480
sensors inside the get instance

603
00:20:26,480 --> 00:20:29,280
and then this p0 is the first parameter

604
00:20:29,280 --> 00:20:30,799
to the method

605
00:20:30,799 --> 00:20:33,280
now this capture syntax is actually a

606
00:20:33,280 --> 00:20:34,960
spring expression and it's really

607
00:20:34,960 --> 00:20:37,280
powerful

608
00:20:37,280 --> 00:20:38,880
this

609
00:20:38,880 --> 00:20:41,520
method the first parameter is a string

610
00:20:41,520 --> 00:20:43,120
so this is going to return a string and

611
00:20:43,120 --> 00:20:44,880
if i wanted to make this

612
00:20:44,880 --> 00:20:46,960
you know more complicated i could chain

613
00:20:46,960 --> 00:20:49,520
methods off of this i could say you know

614
00:20:49,520 --> 00:20:52,240
uh p0.2 uppercase and then we'd always

615
00:20:52,240 --> 00:20:53,679
get an uppercase query and you can

616
00:20:53,679 --> 00:20:56,159
actually chain methods to

617
00:20:56,159 --> 00:20:57,760
branch out from where your sensor

618
00:20:57,760 --> 00:21:00,000
actually hit your probe actually hit in

619
00:21:00,000 --> 00:21:00,960
the code

620
00:21:00,960 --> 00:21:03,200
then the other piece of a jot is reports

621
00:21:03,200 --> 00:21:05,280
so we've got sensors and reports in this

622
00:21:05,280 --> 00:21:06,320
case we're just going to make a real

623
00:21:06,320 --> 00:21:09,200
simple list to just show me the ciphers

624
00:21:09,200 --> 00:21:10,880
i'll show you what that looks like so

625
00:21:10,880 --> 00:21:12,480
here we're just going to change the jot

626
00:21:12,480 --> 00:21:13,840
to

627
00:21:13,840 --> 00:21:15,360
ciphers

628
00:21:15,360 --> 00:21:18,159
run the application the normal way

629
00:21:18,159 --> 00:21:19,919
just like we always do

630
00:21:19,919 --> 00:21:21,919
there's really no downside to running

631
00:21:21,919 --> 00:21:23,600
these sensors in the background like i

632
00:21:23,600 --> 00:21:26,080
said they're super high performance

633
00:21:26,080 --> 00:21:28,240
hey jeff jason i'm sorry to break in

634
00:21:28,240 --> 00:21:29,679
real quick we're having a couple folks

635
00:21:29,679 --> 00:21:31,120
that are having an issue with the screen

636
00:21:31,120 --> 00:21:32,720
share it might be good to stop and

637
00:21:32,720 --> 00:21:34,480
restart the screen share

638
00:21:34,480 --> 00:21:36,400
okay i'd be happy to

639
00:21:36,400 --> 00:21:39,840
uh sir let me give that a try

640
00:21:39,840 --> 00:21:41,440
so did they did they mention what the

641
00:21:41,440 --> 00:21:43,120
issue was

642
00:21:43,120 --> 00:21:44,720
uh they weren't a couple folks weren't

643
00:21:44,720 --> 00:21:46,240
seeing it

644
00:21:46,240 --> 00:21:47,520
huh

645
00:21:47,520 --> 00:21:48,720
okay

646
00:21:48,720 --> 00:21:50,159
uh

647
00:21:50,159 --> 00:21:52,640
well let me find my zoom and uh here

648
00:21:52,640 --> 00:21:56,080
we're gonna stop that share

649
00:21:56,159 --> 00:21:59,400
so uh

650
00:22:02,400 --> 00:22:05,280
how about now

651
00:22:06,960 --> 00:22:09,280
yep seems to have unfroze and uh if

652
00:22:09,280 --> 00:22:11,440
anybody has any any freezing issues i

653
00:22:11,440 --> 00:22:13,280
just let me know in the comments but it

654
00:22:13,280 --> 00:22:14,400
looks like it's good to go this time

655
00:22:14,400 --> 00:22:16,480
it's unfrozen so i think we're good

656
00:22:16,480 --> 00:22:17,760
thank you sir

657
00:22:17,760 --> 00:22:20,640
okay well uh sorry about that and uh

658
00:22:20,640 --> 00:22:24,000
hopefully we're back on track

659
00:22:24,000 --> 00:22:25,440
um

660
00:22:25,440 --> 00:22:26,640
okay so

661
00:22:26,640 --> 00:22:28,480
uh we were just about to go look for

662
00:22:28,480 --> 00:22:30,720
ciphers so i started the application up

663
00:22:30,720 --> 00:22:33,120
with the ciphers jot

664
00:22:33,120 --> 00:22:34,240
and

665
00:22:34,240 --> 00:22:36,799
again all i have to do is just uh you

666
00:22:36,799 --> 00:22:38,400
know browse through this application i'm

667
00:22:38,400 --> 00:22:40,400
really just clicking on links here

668
00:22:40,400 --> 00:22:42,240
i know there's some encryption in these

669
00:22:42,240 --> 00:22:44,000
access pages down here so i'm just

670
00:22:44,000 --> 00:22:46,720
clicking through those pages

671
00:22:46,720 --> 00:22:49,280
and you can see over here

672
00:22:49,280 --> 00:22:52,080
jot has assembled a really nice list of

673
00:22:52,080 --> 00:22:53,520
all the ciphers that are used in this

674
00:22:53,520 --> 00:22:55,919
application the exact line of code where

675
00:22:55,919 --> 00:22:57,280
they're used

676
00:22:57,280 --> 00:23:00,000
uh and the specific algorithm that's

677
00:23:00,000 --> 00:23:01,440
used so we've got some password-based

678
00:23:01,440 --> 00:23:04,640
encryption some single des aes

679
00:23:04,640 --> 00:23:06,640
we got triple des

680
00:23:06,640 --> 00:23:09,280
some different uh

681
00:23:09,280 --> 00:23:12,400
cipher chaining here so

682
00:23:12,400 --> 00:23:14,880
yeah this is a really powerful thing uh

683
00:23:14,880 --> 00:23:16,400
to get this visibility into your

684
00:23:16,400 --> 00:23:19,039
application and all the libraries that

685
00:23:19,039 --> 00:23:21,679
you're using you would be amazed at all

686
00:23:21,679 --> 00:23:23,360
the places where

687
00:23:23,360 --> 00:23:25,679
applications are using weak encryption

688
00:23:25,679 --> 00:23:29,360
using weak uh hash algorithms uh

689
00:23:29,360 --> 00:23:30,400
it's

690
00:23:30,400 --> 00:23:31,600
you know we're going to be stuck with

691
00:23:31,600 --> 00:23:33,200
md5 forever

692
00:23:33,200 --> 00:23:35,440
because it's essentially invisible in

693
00:23:35,440 --> 00:23:37,520
most applications

694
00:23:37,520 --> 00:23:39,520
um

695
00:23:39,520 --> 00:23:41,760
so

696
00:23:42,720 --> 00:23:45,200
oh sorry there are slides i apologize i

697
00:23:45,200 --> 00:23:46,799
was going through some slides earlier

698
00:23:46,799 --> 00:23:49,760
i'll uh i will post them after the talk

699
00:23:49,760 --> 00:23:51,600
so everyone can can see what i was

700
00:23:51,600 --> 00:23:52,559
talking about a little earlier

701
00:23:52,559 --> 00:23:54,159
fortunately the good news is the

702
00:23:54,159 --> 00:23:56,960
interesting stuff is in the demo

703
00:23:56,960 --> 00:23:58,960
anyway so this is encryption this is how

704
00:23:58,960 --> 00:24:01,279
you can make it observable and i

705
00:24:01,279 --> 00:24:02,400
encourage you to learn a little bit

706
00:24:02,400 --> 00:24:05,600
about observability it's uh you know the

707
00:24:05,600 --> 00:24:07,279
science of making

708
00:24:07,279 --> 00:24:08,960
systems that

709
00:24:08,960 --> 00:24:10,240
expose

710
00:24:10,240 --> 00:24:14,240
their internal behavior externally

711
00:24:14,240 --> 00:24:16,480
it's really important for security to be

712
00:24:16,480 --> 00:24:19,039
observable otherwise you have no way of

713
00:24:19,039 --> 00:24:21,120
understanding what's going on and right

714
00:24:21,120 --> 00:24:23,440
now security is really not observable

715
00:24:23,440 --> 00:24:25,679
applications are a black box it's really

716
00:24:25,679 --> 00:24:28,080
tough to see security in an application

717
00:24:28,080 --> 00:24:29,120
so that's what we're trying to change

718
00:24:29,120 --> 00:24:31,200
here we're trying to move from a world

719
00:24:31,200 --> 00:24:33,360
where security is not visible to one

720
00:24:33,360 --> 00:24:35,279
where it is visible and i think it's

721
00:24:35,279 --> 00:24:38,799
going to have massive repercussions

722
00:24:39,039 --> 00:24:40,960
okay

723
00:24:40,960 --> 00:24:43,600
so that's the encryption piece

724
00:24:43,600 --> 00:24:45,039
uh you can see here there's a little

725
00:24:45,039 --> 00:24:47,679
note on the syntax for creating those

726
00:24:47,679 --> 00:24:51,360
captures you can access the parameters

727
00:24:51,360 --> 00:24:53,200
the object itself

728
00:24:53,200 --> 00:24:55,279
and the return for the method that

729
00:24:55,279 --> 00:25:00,240
you're inserting your sensors into

730
00:25:00,240 --> 00:25:01,760
so that actually is a really powerful

731
00:25:01,760 --> 00:25:04,240
way as we'll see of accessing data from

732
00:25:04,240 --> 00:25:05,520
within the running application kind of

733
00:25:05,520 --> 00:25:08,799
whatever you want to go look at

734
00:25:08,799 --> 00:25:10,559
so let's take a look at access control

735
00:25:10,559 --> 00:25:12,720
so access control is really it's one of

736
00:25:12,720 --> 00:25:14,880
my favorite areas of application

737
00:25:14,880 --> 00:25:17,440
security because it's so hard

738
00:25:17,440 --> 00:25:19,200
um

739
00:25:19,200 --> 00:25:22,320
uh i used to do a lot of testing for

740
00:25:22,320 --> 00:25:24,960
access control problems and

741
00:25:24,960 --> 00:25:26,559
they're just tricky because every

742
00:25:26,559 --> 00:25:28,880
application does it differently uh and

743
00:25:28,880 --> 00:25:30,799
it you know you want to verify that the

744
00:25:30,799 --> 00:25:32,320
application has the right access checks

745
00:25:32,320 --> 00:25:34,640
in it but they're hard to find and

746
00:25:34,640 --> 00:25:36,480
difficult to understand so let's see

747
00:25:36,480 --> 00:25:38,320
what we can do with instrumentation

748
00:25:38,320 --> 00:25:39,520
so this sensor is a little more

749
00:25:39,520 --> 00:25:41,679
complicated you can see we're adding

750
00:25:41,679 --> 00:25:44,880
three different sensors here first one

751
00:25:44,880 --> 00:25:46,720
tells us what route is currently being

752
00:25:46,720 --> 00:25:48,159
executed so this is kind of like the

753
00:25:48,159 --> 00:25:49,600
request uri

754
00:25:49,600 --> 00:25:51,760
and notice we're fetching it from the

755
00:25:51,760 --> 00:25:53,360
service method

756
00:25:53,360 --> 00:25:55,760
the first parameter of which is the http

757
00:25:55,760 --> 00:25:57,760
request the second parameter is http

758
00:25:57,760 --> 00:25:59,200
response so we're going to get the

759
00:25:59,200 --> 00:26:00,640
request and then we're going to get the

760
00:26:00,640 --> 00:26:03,120
uri from the request

761
00:26:03,120 --> 00:26:05,360
so now we know what route is happening

762
00:26:05,360 --> 00:26:06,400
here

763
00:26:06,400 --> 00:26:08,000
the next thing we're going to do is

764
00:26:08,000 --> 00:26:09,760
we're going to get the currently logged

765
00:26:09,760 --> 00:26:11,760
in user and we do the same trick we're

766
00:26:11,760 --> 00:26:13,600
going to get the request and then get

767
00:26:13,600 --> 00:26:15,279
the remote username if it's null we're

768
00:26:15,279 --> 00:26:17,120
just going to say guest

769
00:26:17,120 --> 00:26:18,799
and then

770
00:26:18,799 --> 00:26:21,039
that's the elvis operator by the way for

771
00:26:21,039 --> 00:26:22,559
uh the nerds in the crowd i would like

772
00:26:22,559 --> 00:26:23,600
that

773
00:26:23,600 --> 00:26:25,440
um

774
00:26:25,440 --> 00:26:27,039
the last

775
00:26:27,039 --> 00:26:29,679
sensor here is going to find access

776
00:26:29,679 --> 00:26:31,200
control checks

777
00:26:31,200 --> 00:26:32,960
and here what we're going to do is every

778
00:26:32,960 --> 00:26:35,600
time anybody calls is user enroll which

779
00:26:35,600 --> 00:26:37,760
is a standard java ee access control

780
00:26:37,760 --> 00:26:39,360
mechanism we're going to capture the

781
00:26:39,360 --> 00:26:41,039
first parameter which is the name of the

782
00:26:41,039 --> 00:26:42,960
role that's being tested for

783
00:26:42,960 --> 00:26:44,159
then we're just going to arrange that

784
00:26:44,159 --> 00:26:45,840
into a couple of reports we're going to

785
00:26:45,840 --> 00:26:48,000
show a test coverage matrix

786
00:26:48,000 --> 00:26:49,039
and we're going to show an access

787
00:26:49,039 --> 00:26:51,440
control matrix and boy if you've ever

788
00:26:51,440 --> 00:26:54,480
done any testing on a web application

789
00:26:54,480 --> 00:26:55,919
understanding what the web what the

790
00:26:55,919 --> 00:26:58,080
access control matrix is

791
00:26:58,080 --> 00:27:00,640
and what it's supposed to be are really

792
00:27:00,640 --> 00:27:03,120
difficult i've spent weeks testing a

793
00:27:03,120 --> 00:27:04,799
single application to try to figure out

794
00:27:04,799 --> 00:27:06,480
how it all works we're going to do it in

795
00:27:06,480 --> 00:27:08,640
about two minutes

796
00:27:08,640 --> 00:27:10,960
so i set the uh i'm going to set the

797
00:27:10,960 --> 00:27:12,960
variable here the environment variable

798
00:27:12,960 --> 00:27:14,480
to access

799
00:27:14,480 --> 00:27:16,080
dot jot and we're going to run the

800
00:27:16,080 --> 00:27:19,279
application the normal way

801
00:27:19,520 --> 00:27:21,360
and

802
00:27:21,360 --> 00:27:22,559
then we're just going to start clicking

803
00:27:22,559 --> 00:27:23,980
on some links so

804
00:27:23,980 --> 00:27:25,279
[Music]

805
00:27:25,279 --> 00:27:26,960
uh let's take a look at what's going on

806
00:27:26,960 --> 00:27:29,039
here so i'm just clicking through a few

807
00:27:29,039 --> 00:27:30,880
pages

808
00:27:30,880 --> 00:27:33,120
and you can see here

809
00:27:33,120 --> 00:27:35,840
jot is capturing each thing i click on

810
00:27:35,840 --> 00:27:37,279
and i haven't logged in or anything so

811
00:27:37,279 --> 00:27:39,360
i'm just a guest and it's telling me hey

812
00:27:39,360 --> 00:27:43,039
i tested that page as guest

813
00:27:43,039 --> 00:27:44,559
we can keep going we can just click on a

814
00:27:44,559 --> 00:27:46,480
bunch of pages here and you can see

815
00:27:46,480 --> 00:27:49,039
pretty quickly uh you know it's it's a

816
00:27:49,039 --> 00:27:51,360
nice way to keep track of like what i've

817
00:27:51,360 --> 00:27:54,480
tested as each roll and

818
00:27:54,480 --> 00:27:56,799
uh these last few pages here will allow

819
00:27:56,799 --> 00:27:59,120
me to switch roles relatively easily

820
00:27:59,120 --> 00:28:00,880
like without logging out and logging

821
00:28:00,880 --> 00:28:02,960
back in so it's a nice kind of demo so

822
00:28:02,960 --> 00:28:04,399
i'm just clicking through them once as

823
00:28:04,399 --> 00:28:05,520
guest

824
00:28:05,520 --> 00:28:06,720
and

825
00:28:06,720 --> 00:28:08,159
you can see so now we've accessed all

826
00:28:08,159 --> 00:28:10,159
these pages

827
00:28:10,159 --> 00:28:10,960
and

828
00:28:10,960 --> 00:28:12,799
we discovered some access control checks

829
00:28:12,799 --> 00:28:14,880
inside these access pages that's kind of

830
00:28:14,880 --> 00:28:18,159
cool we said hey in page a

831
00:28:18,159 --> 00:28:19,760
there's a check to see if you're logged

832
00:28:19,760 --> 00:28:20,960
in as role a

833
00:28:20,960 --> 00:28:22,720
in page b there's a check to see if

834
00:28:22,720 --> 00:28:25,760
you're in role b page c roll c

835
00:28:25,760 --> 00:28:26,960
page d

836
00:28:26,960 --> 00:28:28,480
uh oh

837
00:28:28,480 --> 00:28:31,120
let's see did we test it yes

838
00:28:31,120 --> 00:28:32,799
we know we hit it

839
00:28:32,799 --> 00:28:34,640
but there's no access control check on

840
00:28:34,640 --> 00:28:35,840
page d

841
00:28:35,840 --> 00:28:37,919
should it test to see if you're enrolled

842
00:28:37,919 --> 00:28:39,120
probably

843
00:28:39,120 --> 00:28:41,039
uh we don't know until we go talk to the

844
00:28:41,039 --> 00:28:43,600
team but look we've just made the access

845
00:28:43,600 --> 00:28:45,039
control matrix

846
00:28:45,039 --> 00:28:48,000
for this application observable

847
00:28:48,000 --> 00:28:49,679
anybody can look at this on this project

848
00:28:49,679 --> 00:28:52,159
and go like well that's crazy uh you

849
00:28:52,159 --> 00:28:54,320
know

850
00:28:54,399 --> 00:28:57,120
no role a people should be accessing

851
00:28:57,120 --> 00:28:58,799
page e

852
00:28:58,799 --> 00:29:00,480
and so very quickly you can find

853
00:29:00,480 --> 00:29:02,000
problems this way in the access control

854
00:29:02,000 --> 00:29:03,360
matrix

855
00:29:03,360 --> 00:29:04,399
this is

856
00:29:04,399 --> 00:29:06,320
starting hopefully to reveal some of the

857
00:29:06,320 --> 00:29:10,000
power of instrumentation

858
00:29:10,000 --> 00:29:11,440
let's do a couple things here let's uh

859
00:29:11,440 --> 00:29:13,279
switch users i'm going to switch to user

860
00:29:13,279 --> 00:29:14,159
a

861
00:29:14,159 --> 00:29:17,840
and click on a few of these pages

862
00:29:18,000 --> 00:29:20,000
and you can see oh look now we've got

863
00:29:20,000 --> 00:29:21,679
more test coverage we now tested these

864
00:29:21,679 --> 00:29:24,000
pages as both guest and a

865
00:29:24,000 --> 00:29:25,440
and you can imagine you know going

866
00:29:25,440 --> 00:29:26,960
through a test

867
00:29:26,960 --> 00:29:29,440
and saying uh

868
00:29:29,440 --> 00:29:31,440
i tested certain pages with certain

869
00:29:31,440 --> 00:29:32,559
users

870
00:29:32,559 --> 00:29:34,880
but i haven't tested every page with

871
00:29:34,880 --> 00:29:37,039
every user and here you can see

872
00:29:37,039 --> 00:29:38,960
you know i may have a test coverage

873
00:29:38,960 --> 00:29:41,120
matrix that looks kind of like this

874
00:29:41,120 --> 00:29:43,120
and you can see some gaps right

875
00:29:43,120 --> 00:29:45,360
i know that page c

876
00:29:45,360 --> 00:29:49,279
tests to see if i'm in role c right here

877
00:29:49,279 --> 00:29:51,120
but i haven't even tested

878
00:29:51,120 --> 00:29:54,240
page c as user c yet so i know i've got

879
00:29:54,240 --> 00:29:56,480
a gap in my test coverage and again this

880
00:29:56,480 --> 00:29:58,880
is really about making your testing

881
00:29:58,880 --> 00:30:00,080
observable

882
00:30:00,080 --> 00:30:02,480
because you know you do this with a real

883
00:30:02,480 --> 00:30:04,399
pen tester and actually measure what

884
00:30:04,399 --> 00:30:05,600
they coverage

885
00:30:05,600 --> 00:30:07,120
measure what they cover and you're going

886
00:30:07,120 --> 00:30:09,440
to see some dramatic gaps same thing

887
00:30:09,440 --> 00:30:11,279
with a das tool you're going to see

888
00:30:11,279 --> 00:30:13,120
massive gaps in what gets actually

889
00:30:13,120 --> 00:30:14,240
tested

890
00:30:14,240 --> 00:30:16,159
and that's important because you want to

891
00:30:16,159 --> 00:30:18,559
make sure that you've tested everything

892
00:30:18,559 --> 00:30:20,320
so this is i think this is really

893
00:30:20,320 --> 00:30:22,159
powerful everyone should run this on

894
00:30:22,159 --> 00:30:24,080
their application you could quickly make

895
00:30:24,080 --> 00:30:25,360
your own

896
00:30:25,360 --> 00:30:26,960
um

897
00:30:26,960 --> 00:30:27,840
uh

898
00:30:27,840 --> 00:30:30,080
jot here and add in your own custom

899
00:30:30,080 --> 00:30:32,080
access control method like if you've got

900
00:30:32,080 --> 00:30:34,880
an is authorized method or something uh

901
00:30:34,880 --> 00:30:36,799
you could add that here instrument it

902
00:30:36,799 --> 00:30:38,559
find out exactly where it's used and

903
00:30:38,559 --> 00:30:40,240
build your own access control matrix

904
00:30:40,240 --> 00:30:43,360
it's super easy

905
00:30:43,360 --> 00:30:46,559
okay uh and by the way access control

906
00:30:46,559 --> 00:30:48,240
just

907
00:30:48,240 --> 00:30:50,240
moved up to be the number one thing in

908
00:30:50,240 --> 00:30:51,679
the os top 10

909
00:30:51,679 --> 00:30:53,679
it's really prevalent

910
00:30:53,679 --> 00:30:55,360
and it's not very well tested so you

911
00:30:55,360 --> 00:30:57,760
want to make your name as a hacker this

912
00:30:57,760 --> 00:31:00,799
would be a great way to do it

913
00:31:01,440 --> 00:31:04,000
okay uh let's do some other stuff with

914
00:31:04,000 --> 00:31:07,519
instrumentation uh

915
00:31:07,600 --> 00:31:09,600
let's look at

916
00:31:09,600 --> 00:31:11,279
generating diagrams

917
00:31:11,279 --> 00:31:12,240
so

918
00:31:12,240 --> 00:31:13,919
jot can do this for you

919
00:31:13,919 --> 00:31:16,559
jot can take a set of sensors and here i

920
00:31:16,559 --> 00:31:19,360
put one on route get any calls to get

921
00:31:19,360 --> 00:31:20,640
parameter

922
00:31:20,640 --> 00:31:22,960
unsafe queries encryption and expression

923
00:31:22,960 --> 00:31:24,720
language execution

924
00:31:24,720 --> 00:31:26,720
and then i just run my application

925
00:31:26,720 --> 00:31:29,039
normally and jot will automatically

926
00:31:29,039 --> 00:31:30,880
create these flowcharts of everything

927
00:31:30,880 --> 00:31:32,559
that's interesting

928
00:31:32,559 --> 00:31:35,519
for security from within this

929
00:31:35,519 --> 00:31:37,679
this application so it's just a kind of

930
00:31:37,679 --> 00:31:39,039
a very quick way to cut through the

931
00:31:39,039 --> 00:31:40,880
noise and see what you're really

932
00:31:40,880 --> 00:31:43,120
interested in inside an application and

933
00:31:43,120 --> 00:31:45,200
you can add whatever sensors you want

934
00:31:45,200 --> 00:31:47,360
you want to see uh you know

935
00:31:47,360 --> 00:31:48,960
calls to the back end

936
00:31:48,960 --> 00:31:50,880
i think just before this there was a

937
00:31:50,880 --> 00:31:53,600
talk about ssrf

938
00:31:53,600 --> 00:31:55,840
ssrf's pretty hard to test for

939
00:31:55,840 --> 00:31:57,279
but what if you had a way of quickly

940
00:31:57,279 --> 00:31:59,200
finding every place your application

941
00:31:59,200 --> 00:32:01,039
makes a back-end connection

942
00:32:01,039 --> 00:32:03,440
every time your app issues an outbound

943
00:32:03,440 --> 00:32:04,480
url

944
00:32:04,480 --> 00:32:06,960
you want to know about it well

945
00:32:06,960 --> 00:32:08,000
uh

946
00:32:08,000 --> 00:32:10,080
jack can do that really quickly in this

947
00:32:10,080 --> 00:32:12,640
case you can see hey here's a parameter

948
00:32:12,640 --> 00:32:14,320
that was just read called a get

949
00:32:14,320 --> 00:32:16,720
parameter and the value was uh you know

950
00:32:16,720 --> 00:32:18,399
the ticket was the name and the value

951
00:32:18,399 --> 00:32:21,519
was uh 1001 and then you can see right

952
00:32:21,519 --> 00:32:23,039
in like the next thing you can see hey

953
00:32:23,039 --> 00:32:24,720
there's there's an unsafe query and oh

954
00:32:24,720 --> 00:32:26,960
look at that the name the ticket has

955
00:32:26,960 --> 00:32:29,039
value 1001. so you should probably be

956
00:32:29,039 --> 00:32:31,200
thinking about sql injection this is not

957
00:32:31,200 --> 00:32:32,559
a lock by the way

958
00:32:32,559 --> 00:32:34,960
but uh it's

959
00:32:34,960 --> 00:32:36,640
really pretty good evidence that there's

960
00:32:36,640 --> 00:32:39,200
you know there's not proper uh well

961
00:32:39,200 --> 00:32:40,559
there's not proper parameterization

962
00:32:40,559 --> 00:32:42,000
going on there may be some kind of

963
00:32:42,000 --> 00:32:43,519
validation or something or escaping

964
00:32:43,519 --> 00:32:45,120
that's going on here but you could put

965
00:32:45,120 --> 00:32:47,440
sensors on those things too

966
00:32:47,440 --> 00:32:49,120
and if there's ever a path from a get

967
00:32:49,120 --> 00:32:51,360
parameter through to an unsafe query

968
00:32:51,360 --> 00:32:53,120
that doesn't go through some kind of

969
00:32:53,120 --> 00:32:55,840
escaper well guess what you probably got

970
00:32:55,840 --> 00:32:57,600
a problem

971
00:32:57,600 --> 00:32:59,200
uh here's another example this is

972
00:32:59,200 --> 00:33:01,840
expression language injection uh this is

973
00:33:01,840 --> 00:33:03,679
kind of everywhere i dare you to run

974
00:33:03,679 --> 00:33:05,600
this on an application written with

975
00:33:05,600 --> 00:33:06,559
spring

976
00:33:06,559 --> 00:33:08,720
or stress uh you're gonna see

977
00:33:08,720 --> 00:33:11,039
expressions get evaluated all over the

978
00:33:11,039 --> 00:33:12,960
place it's pretty hard to test for them

979
00:33:12,960 --> 00:33:14,399
because you've got to test every single

980
00:33:14,399 --> 00:33:15,840
field and every single header on every

981
00:33:15,840 --> 00:33:17,279
form on every page and every url

982
00:33:17,279 --> 00:33:18,720
parameter

983
00:33:18,720 --> 00:33:20,320
by using instrumentation you can make

984
00:33:20,320 --> 00:33:23,360
these things show up incredibly quickly

985
00:33:23,360 --> 00:33:25,120
and then here's uh an example of a

986
00:33:25,120 --> 00:33:26,559
command injection and this is just kind

987
00:33:26,559 --> 00:33:28,720
of interesting you can see the route get

988
00:33:28,720 --> 00:33:29,840
parameter

989
00:33:29,840 --> 00:33:32,080
uh you can see here's runtime.exec and

990
00:33:32,080 --> 00:33:33,519
then here's everything that happens

991
00:33:33,519 --> 00:33:36,159
inside runtime.exec you can see it

992
00:33:36,159 --> 00:33:38,559
actually creates a whole bunch of

993
00:33:38,559 --> 00:33:41,279
ciphers for a

994
00:33:41,279 --> 00:33:43,519
ssl connection all under the hood inside

995
00:33:43,519 --> 00:33:45,919
your application

996
00:33:45,919 --> 00:33:47,519
so again this is like turning the lights

997
00:33:47,519 --> 00:33:49,440
on seeing what your application actually

998
00:33:49,440 --> 00:33:51,279
does as opposed to just kind of guessing

999
00:33:51,279 --> 00:33:54,880
by looking at the source code

1000
00:33:55,440 --> 00:33:56,880
now here's an idea

1001
00:33:56,880 --> 00:33:58,399
that i think

1002
00:33:58,399 --> 00:34:00,240
this time has come

1003
00:34:00,240 --> 00:34:02,159
many of you maybe

1004
00:34:02,159 --> 00:34:04,000
have experience with

1005
00:34:04,000 --> 00:34:05,919
running some tool and getting a big pdf

1006
00:34:05,919 --> 00:34:08,079
report it's got hundreds of pages

1007
00:34:08,079 --> 00:34:10,159
uh tons of vulnerabilities lots of false

1008
00:34:10,159 --> 00:34:12,480
positives in there and that's how we're

1009
00:34:12,480 --> 00:34:14,480
communicating to developers

1010
00:34:14,480 --> 00:34:15,839
well that's not how they want to be

1011
00:34:15,839 --> 00:34:17,760
communicated with

1012
00:34:17,760 --> 00:34:19,040
we need to do a better job of

1013
00:34:19,040 --> 00:34:21,199
communicating with developers the way

1014
00:34:21,199 --> 00:34:23,040
that they expect to be communicated to

1015
00:34:23,040 --> 00:34:24,000
you so

1016
00:34:24,000 --> 00:34:26,320
uh using instrumentation you can turn

1017
00:34:26,320 --> 00:34:28,000
those kind of findings that you you know

1018
00:34:28,000 --> 00:34:29,918
you used to create a

1019
00:34:29,918 --> 00:34:32,320
report or you know maybe a jira ticket

1020
00:34:32,320 --> 00:34:34,399
or

1021
00:34:34,399 --> 00:34:36,320
you know even uh some kind of

1022
00:34:36,320 --> 00:34:38,159
notification we can do even better than

1023
00:34:38,159 --> 00:34:39,839
that why don't we communicate with

1024
00:34:39,839 --> 00:34:41,760
developers right

1025
00:34:41,760 --> 00:34:43,760
through test failures

1026
00:34:43,760 --> 00:34:45,918
that's really what they'd love to see so

1027
00:34:45,918 --> 00:34:49,040
here i've got an example of a

1028
00:34:49,040 --> 00:34:50,560
of a jot

1029
00:34:50,560 --> 00:34:53,760
that flags any use of

1030
00:34:53,760 --> 00:34:55,359
process builder here which is what's

1031
00:34:55,359 --> 00:34:58,160
underneath runtime.exec in in java so

1032
00:34:58,160 --> 00:34:59,440
anytime you create a native process

1033
00:34:59,440 --> 00:35:00,400
you're going to

1034
00:35:00,400 --> 00:35:04,160
start a process builder and uh

1035
00:35:04,160 --> 00:35:06,079
we're going to just

1036
00:35:06,079 --> 00:35:07,839
tag this here so it only fires when

1037
00:35:07,839 --> 00:35:10,400
you're inside

1038
00:35:10,400 --> 00:35:12,079
a test case

1039
00:35:12,079 --> 00:35:14,079
that's what the scope is all about and

1040
00:35:14,079 --> 00:35:15,680
then anytime we see that we're going to

1041
00:35:15,680 --> 00:35:17,359
give a nice note to the developer to say

1042
00:35:17,359 --> 00:35:19,599
hey to prevent command injection it's

1043
00:35:19,599 --> 00:35:21,040
our policy

1044
00:35:21,040 --> 00:35:23,119
that we don't allow use of operating

1045
00:35:23,119 --> 00:35:25,680
system commands from within web apps uh

1046
00:35:25,680 --> 00:35:27,680
contact security for help

1047
00:35:27,680 --> 00:35:29,280
now all you have to do is run your test

1048
00:35:29,280 --> 00:35:31,119
case and this test case has nothing to

1049
00:35:31,119 --> 00:35:32,000
do

1050
00:35:32,000 --> 00:35:33,119
with

1051
00:35:33,119 --> 00:35:35,440
security there's uh you know it's just a

1052
00:35:35,440 --> 00:35:36,800
normal test case that they would have

1053
00:35:36,800 --> 00:35:39,599
written to test their code but it does

1054
00:35:39,599 --> 00:35:41,839
call runtime.exec under the hood and so

1055
00:35:41,839 --> 00:35:43,359
they'll automatically fail that test

1056
00:35:43,359 --> 00:35:45,599
case and get a notification telling them

1057
00:35:45,599 --> 00:35:46,880
how to fix it

1058
00:35:46,880 --> 00:35:48,480
then i wrote a whole article about this

1059
00:35:48,480 --> 00:35:50,000
sort of developer friendly security

1060
00:35:50,000 --> 00:35:52,079
reporting but we can do a lot better at

1061
00:35:52,079 --> 00:35:54,079
enabling developers to make the right

1062
00:35:54,079 --> 00:35:55,760
decisions

1063
00:35:55,760 --> 00:35:57,520
you can imagine using instrumentation to

1064
00:35:57,520 --> 00:35:59,440
take most of your secure coding

1065
00:35:59,440 --> 00:36:00,800
guideline

1066
00:36:00,800 --> 00:36:02,720
and turning it into code turning it into

1067
00:36:02,720 --> 00:36:05,359
jots that then do this kind of thing to

1068
00:36:05,359 --> 00:36:07,599
communicate with developers this is the

1069
00:36:07,599 --> 00:36:12,200
path towards a really solid pipeline

1070
00:36:12,240 --> 00:36:14,000
oh i love this one okay so let's do this

1071
00:36:14,000 --> 00:36:16,960
uh expression language injection uh

1072
00:36:16,960 --> 00:36:18,960
example so

1073
00:36:18,960 --> 00:36:20,800
uh

1074
00:36:20,800 --> 00:36:22,000
in this application there's an

1075
00:36:22,000 --> 00:36:24,800
expression oh i stopped it let's start

1076
00:36:24,800 --> 00:36:26,560
this application i'm still using the old

1077
00:36:26,560 --> 00:36:28,240
access chat because we're gonna we're

1078
00:36:28,240 --> 00:36:29,440
gonna use the expression language shot

1079
00:36:29,440 --> 00:36:30,880
in just a second

1080
00:36:30,880 --> 00:36:32,560
but uh

1081
00:36:32,560 --> 00:36:34,240
for now let's just take a look at uh

1082
00:36:34,240 --> 00:36:35,599
this in its

1083
00:36:35,599 --> 00:36:38,240
uninstrumented exploitable state

1084
00:36:38,240 --> 00:36:40,960
so this application has an expression

1085
00:36:40,960 --> 00:36:43,440
language problem this field

1086
00:36:43,440 --> 00:36:45,040
whatever you type in

1087
00:36:45,040 --> 00:36:47,119
you see it come back as part of the web

1088
00:36:47,119 --> 00:36:49,440
page now that in itself looks more like

1089
00:36:49,440 --> 00:36:53,040
xss than it does like yell injection

1090
00:36:53,040 --> 00:36:54,880
but

1091
00:36:54,880 --> 00:36:56,240
if you enter

1092
00:36:56,240 --> 00:36:57,920
an expression in this field something

1093
00:36:57,920 --> 00:37:02,400
like i don't know five plus five or six

1094
00:37:02,400 --> 00:37:04,640
uh

1095
00:37:04,800 --> 00:37:06,640
you'll see that this expression got

1096
00:37:06,640 --> 00:37:09,200
evaluated and returned the result into

1097
00:37:09,200 --> 00:37:11,599
the web page

1098
00:37:11,599 --> 00:37:13,440
now any header

1099
00:37:13,440 --> 00:37:15,280
it was a header for struts this is the

1100
00:37:15,280 --> 00:37:17,440
underlying problem that caused struts

1101
00:37:17,440 --> 00:37:18,720
there have been a number of recent

1102
00:37:18,720 --> 00:37:21,359
attacks atlassian just had a major flaw

1103
00:37:21,359 --> 00:37:22,800
that was with this

1104
00:37:22,800 --> 00:37:24,880
um and i'm gonna show you how to to uh

1105
00:37:24,880 --> 00:37:27,920
detect this and fix it really easily

1106
00:37:27,920 --> 00:37:29,839
so the you know when when hackers see

1107
00:37:29,839 --> 00:37:31,119
this and there's there's a bunch of

1108
00:37:31,119 --> 00:37:32,800
different syntaxes for this expression

1109
00:37:32,800 --> 00:37:34,240
like you can put in

1110
00:37:34,240 --> 00:37:36,640
uh you know hash hash sign here and get

1111
00:37:36,640 --> 00:37:37,760
this evaluated there's a bunch of

1112
00:37:37,760 --> 00:37:39,520
different ways but when a hacker sees

1113
00:37:39,520 --> 00:37:42,079
this they start thinking like oh wait a

1114
00:37:42,079 --> 00:37:43,599
minute i'm running a little bit of code

1115
00:37:43,599 --> 00:37:46,480
here what if i put in like math dot

1116
00:37:46,480 --> 00:37:47,599
max

1117
00:37:47,599 --> 00:37:52,079
uh two comma five and sent that in

1118
00:37:52,079 --> 00:37:54,000
ah interesting look at that i can call

1119
00:37:54,000 --> 00:37:55,359
methods

1120
00:37:55,359 --> 00:37:56,880
awesome

1121
00:37:56,880 --> 00:37:58,480
so now you're you're telling the server

1122
00:37:58,480 --> 00:38:00,480
to run a method for you that's like

1123
00:38:00,480 --> 00:38:02,960
three quarters of the way to a takeover

1124
00:38:02,960 --> 00:38:05,760
and if you choose your methods wisely

1125
00:38:05,760 --> 00:38:06,960
you could do something like this you

1126
00:38:06,960 --> 00:38:09,200
could do one time

1127
00:38:09,200 --> 00:38:11,760
dot get runtime

1128
00:38:11,760 --> 00:38:14,760
back

1129
00:38:18,480 --> 00:38:20,560
something like that right i'm gonna copy

1130
00:38:20,560 --> 00:38:21,920
this and we have to type it again later

1131
00:38:21,920 --> 00:38:23,599
so when i do this

1132
00:38:23,599 --> 00:38:25,920
uh and this is that's almost exactly

1133
00:38:25,920 --> 00:38:28,240
what attackers did to

1134
00:38:28,240 --> 00:38:31,520
equifax and atlassian and others uh they

1135
00:38:31,520 --> 00:38:33,599
send in our operating system come in

1136
00:38:33,599 --> 00:38:35,119
they don't start a calculator they

1137
00:38:35,119 --> 00:38:37,280
actually start up a reverse shell and

1138
00:38:37,280 --> 00:38:38,880
you know they take over your server and

1139
00:38:38,880 --> 00:38:40,720
they can do anything

1140
00:38:40,720 --> 00:38:42,640
uh that that server could do they can

1141
00:38:42,640 --> 00:38:44,640
steal your code they can access your

1142
00:38:44,640 --> 00:38:47,760
database they can do just about anything

1143
00:38:47,760 --> 00:38:49,200
so

1144
00:38:49,200 --> 00:38:50,000
how do we deal with this with

1145
00:38:50,000 --> 00:38:51,839
instrumentation well

1146
00:38:51,839 --> 00:38:54,310
guess what let's look at a uh

1147
00:38:54,310 --> 00:38:56,240
[Music]

1148
00:38:56,240 --> 00:38:57,760
a jot

1149
00:38:57,760 --> 00:39:01,760
so here's a jot for

1150
00:39:01,760 --> 00:39:03,599
expression language we're doing the same

1151
00:39:03,599 --> 00:39:05,359
thing with the routes that's just to

1152
00:39:05,359 --> 00:39:08,320
tell us what route we're on

1153
00:39:08,320 --> 00:39:10,560
this is the key piece

1154
00:39:10,560 --> 00:39:12,320
we're going to sandbox the expression

1155
00:39:12,320 --> 00:39:14,560
language engine so here

1156
00:39:14,560 --> 00:39:16,640
we're going to prevent harmful methods

1157
00:39:16,640 --> 00:39:18,240
from being called during expression

1158
00:39:18,240 --> 00:39:20,240
evaluation so

1159
00:39:20,240 --> 00:39:21,520
the first thing is we're going to set a

1160
00:39:21,520 --> 00:39:24,079
scope on this sensor so it only fires

1161
00:39:24,079 --> 00:39:26,079
when you're inside

1162
00:39:26,079 --> 00:39:27,520
a

1163
00:39:27,520 --> 00:39:30,480
expression evaluation this is the el

1164
00:39:30,480 --> 00:39:32,640
api and this is the the you know when

1165
00:39:32,640 --> 00:39:34,000
you actually call to evaluate an

1166
00:39:34,000 --> 00:39:35,680
expression

1167
00:39:35,680 --> 00:39:37,680
and if you're in that scope we're going

1168
00:39:37,680 --> 00:39:40,079
to look for methods like process builder

1169
00:39:40,079 --> 00:39:41,680
and creating sockets you could add to

1170
00:39:41,680 --> 00:39:42,960
this list you can say hey don't create

1171
00:39:42,960 --> 00:39:44,400
any files

1172
00:39:44,400 --> 00:39:46,880
you know don't

1173
00:39:46,880 --> 00:39:48,560
start server sockets there's a bunch of

1174
00:39:48,560 --> 00:39:50,560
different things that you could

1175
00:39:50,560 --> 00:39:52,240
prevent here but we've created a very

1176
00:39:52,240 --> 00:39:54,640
simple sandbox around the expression

1177
00:39:54,640 --> 00:39:56,720
language engine so that it can't be

1178
00:39:56,720 --> 00:39:59,040
exploded

1179
00:39:59,040 --> 00:40:00,560
and

1180
00:40:00,560 --> 00:40:02,640
this is the line that does all the work

1181
00:40:02,640 --> 00:40:04,319
when we see something that matches the

1182
00:40:04,319 --> 00:40:05,520
sensor

1183
00:40:05,520 --> 00:40:07,119
we are going to

1184
00:40:07,119 --> 00:40:09,200
throw an exception so we're not going to

1185
00:40:09,200 --> 00:40:10,480
allow

1186
00:40:10,480 --> 00:40:12,119
this method this value

1187
00:40:12,119 --> 00:40:13,599
expression.getvalue we're not going to

1188
00:40:13,599 --> 00:40:14,720
allow it to execute because we're going

1189
00:40:14,720 --> 00:40:15,760
to throw an

1190
00:40:15,760 --> 00:40:16,880
exception

1191
00:40:16,880 --> 00:40:20,160
that uh prevents the attack

1192
00:40:20,160 --> 00:40:22,400
so let's run our application with this

1193
00:40:22,400 --> 00:40:25,359
so we're going to set this to

1194
00:40:25,359 --> 00:40:27,520
the li

1195
00:40:27,520 --> 00:40:31,040
and run the application normally

1196
00:40:31,200 --> 00:40:31,600
and

1197
00:40:31,600 --> 00:40:33,200
[Music]

1198
00:40:33,200 --> 00:40:35,280
for that to start up

1199
00:40:35,280 --> 00:40:37,760
and let's go back to the

1200
00:40:37,760 --> 00:40:39,440
expression language

1201
00:40:39,440 --> 00:40:41,839
lesson

1202
00:40:42,000 --> 00:40:44,079
and let's uh you know we can see that

1203
00:40:44,079 --> 00:40:46,000
this works the same way we haven't

1204
00:40:46,000 --> 00:40:47,760
disrupted its ability to evaluate

1205
00:40:47,760 --> 00:40:50,400
expressions so we can still evaluate

1206
00:40:50,400 --> 00:40:52,319
expressions what we stopped was the

1207
00:40:52,319 --> 00:40:54,480
ability to do harmful stuff

1208
00:40:54,480 --> 00:40:56,000
so when i put in this attack that we

1209
00:40:56,000 --> 00:40:57,520
looked at

1210
00:40:57,520 --> 00:40:59,839
this is when john is going to intervene

1211
00:40:59,839 --> 00:41:02,480
and prevent this request

1212
00:41:02,480 --> 00:41:03,359
from

1213
00:41:03,359 --> 00:41:06,800
successfully evaluating expression so

1214
00:41:06,800 --> 00:41:08,160
actually if you look down in the stack

1215
00:41:08,160 --> 00:41:10,400
tracer you can see really what goes on

1216
00:41:10,400 --> 00:41:12,440
here's the value

1217
00:41:12,440 --> 00:41:14,640
expression.getvalue call

1218
00:41:14,640 --> 00:41:16,640
that we put this sensor on that's the

1219
00:41:16,640 --> 00:41:17,760
scope

1220
00:41:17,760 --> 00:41:20,480
and then inside there we called

1221
00:41:20,480 --> 00:41:22,560
runtime.exec that's the expression being

1222
00:41:22,560 --> 00:41:24,640
evaluated and that called process

1223
00:41:24,640 --> 00:41:27,359
builder and when we hit process builder

1224
00:41:27,359 --> 00:41:29,280
the sensor fired and says whoa we're not

1225
00:41:29,280 --> 00:41:32,720
allowed to do process builder inside

1226
00:41:32,720 --> 00:41:34,800
the expression language evaluation

1227
00:41:34,800 --> 00:41:35,920
because why would you ever want to

1228
00:41:35,920 --> 00:41:38,079
evaluate why would you ever want to

1229
00:41:38,079 --> 00:41:39,920
start a native process inside an

1230
00:41:39,920 --> 00:41:42,000
expression like it's just not a

1231
00:41:42,000 --> 00:41:43,599
it really only means that you're under

1232
00:41:43,599 --> 00:41:45,040
attack

1233
00:41:45,040 --> 00:41:46,880
so this is powerful if you know this

1234
00:41:46,880 --> 00:41:51,040
little jot if uh equifax had had that

1235
00:41:51,040 --> 00:41:52,960
then they would have been safe

1236
00:41:52,960 --> 00:41:54,160
all they would have had to do is add

1237
00:41:54,160 --> 00:41:56,079
that job to their applications there's

1238
00:41:56,079 --> 00:41:58,000
no performance penalty here it's

1239
00:41:58,000 --> 00:42:00,240
incredibly fast and they would have been

1240
00:42:00,240 --> 00:42:01,520
safe against expression language

1241
00:42:01,520 --> 00:42:04,400
injections forever

1242
00:42:04,400 --> 00:42:06,160
okay so let's big picture this a little

1243
00:42:06,160 --> 00:42:08,240
bit

1244
00:42:08,240 --> 00:42:09,760
the first thing

1245
00:42:09,760 --> 00:42:12,400
that we did was we used instrumentation

1246
00:42:12,400 --> 00:42:14,400
to detect vulnerabilities right we found

1247
00:42:14,400 --> 00:42:17,599
some sql vulnerabilities we found some

1248
00:42:17,599 --> 00:42:19,040
uh

1249
00:42:19,040 --> 00:42:21,680
encryption vulnerabilities uh

1250
00:42:21,680 --> 00:42:24,240
that is i asked you may have heard the

1251
00:42:24,240 --> 00:42:25,760
acronym i asked it stands for

1252
00:42:25,760 --> 00:42:28,400
interactive application security testing

1253
00:42:28,400 --> 00:42:30,000
and all it means is using

1254
00:42:30,000 --> 00:42:31,200
instrumentation to detect

1255
00:42:31,200 --> 00:42:32,640
vulnerabilities

1256
00:42:32,640 --> 00:42:34,800
and as you see it's really pretty easy

1257
00:42:34,800 --> 00:42:37,200
we just made our own i asked using jot

1258
00:42:37,200 --> 00:42:39,280
and you can make your own rules and four

1259
00:42:39,280 --> 00:42:40,640
stuff chat comes with a whole bunch of

1260
00:42:40,640 --> 00:42:44,640
different rules already kind of built in

1261
00:42:44,720 --> 00:42:46,880
and this is powerful this is something

1262
00:42:46,880 --> 00:42:48,319
that you can use today there are

1263
00:42:48,319 --> 00:42:50,319
commercial is products of course but jot

1264
00:42:50,319 --> 00:42:52,160
is completely free anybody can build

1265
00:42:52,160 --> 00:42:53,839
their own iest and

1266
00:42:53,839 --> 00:42:55,440
find interesting vulnerabilities that

1267
00:42:55,440 --> 00:42:57,520
would be hard to find in other ways i

1268
00:42:57,520 --> 00:42:59,359
strongly recommend that you use it

1269
00:42:59,359 --> 00:43:01,839
during a pen test to give the pen

1270
00:43:01,839 --> 00:43:04,160
testers feedback on what they're testing

1271
00:43:04,160 --> 00:43:07,040
i asked can reveal hidden parameters

1272
00:43:07,040 --> 00:43:08,720
headers that you didn't know about a

1273
00:43:08,720 --> 00:43:10,640
million different things that would be

1274
00:43:10,640 --> 00:43:12,720
super useful to the pen tester and

1275
00:43:12,720 --> 00:43:14,480
there's rules for a lot of that already

1276
00:43:14,480 --> 00:43:16,640
in job

1277
00:43:16,640 --> 00:43:18,160
the other thing i want you to think

1278
00:43:18,160 --> 00:43:19,920
about is rasp

1279
00:43:19,920 --> 00:43:21,599
that stands for runtime application

1280
00:43:21,599 --> 00:43:23,200
self-protection

1281
00:43:23,200 --> 00:43:24,640
and all that means is using

1282
00:43:24,640 --> 00:43:26,800
instrumentation to detect attacks and

1283
00:43:26,800 --> 00:43:30,000
prevent exploits we just did that we did

1284
00:43:30,000 --> 00:43:32,240
that to identify expression language

1285
00:43:32,240 --> 00:43:34,480
injection and block it from exploiting

1286
00:43:34,480 --> 00:43:36,000
the application

1287
00:43:36,000 --> 00:43:37,920
so using rasp

1288
00:43:37,920 --> 00:43:39,760
we can prevent whole classes of

1289
00:43:39,760 --> 00:43:41,520
vulnerabilities from being exploited we

1290
00:43:41,520 --> 00:43:44,319
can do it in a really surgical way

1291
00:43:44,319 --> 00:43:46,800
not like a waff at the perimeter that's

1292
00:43:46,800 --> 00:43:48,640
super noisy because it doesn't know what

1293
00:43:48,640 --> 00:43:51,280
it's protecting it kind of has to block

1294
00:43:51,280 --> 00:43:52,560
anything that

1295
00:43:52,560 --> 00:43:54,319
has well for expression language

1296
00:43:54,319 --> 00:43:56,079
injection anything that has a

1297
00:43:56,079 --> 00:43:58,240
dollar sign and a brace in it

1298
00:43:58,240 --> 00:43:59,760
the wife has to block it and say hey

1299
00:43:59,760 --> 00:44:01,440
that's especially language injection but

1300
00:44:01,440 --> 00:44:02,640
it's probably not

1301
00:44:02,640 --> 00:44:05,520
99 of those attacks never connect with

1302
00:44:05,520 --> 00:44:06,800
their target

1303
00:44:06,800 --> 00:44:09,440
so using rasp we can be really laser

1304
00:44:09,440 --> 00:44:11,599
focused on what matters

1305
00:44:11,599 --> 00:44:13,760
so that's i asked and rasp

1306
00:44:13,760 --> 00:44:15,440
they often come together in the same

1307
00:44:15,440 --> 00:44:17,119
agent just like jot

1308
00:44:17,119 --> 00:44:18,640
but they in theory i suppose they could

1309
00:44:18,640 --> 00:44:19,599
be

1310
00:44:19,599 --> 00:44:22,240
separate but i asked is using it in

1311
00:44:22,240 --> 00:44:25,040
development you can put this shift it

1312
00:44:25,040 --> 00:44:27,520
way left put it on developer

1313
00:44:27,520 --> 00:44:28,960
machines and allow them to test their

1314
00:44:28,960 --> 00:44:31,760
own code with is you can put it in qa

1315
00:44:31,760 --> 00:44:33,839
it's super fast so you can make it part

1316
00:44:33,839 --> 00:44:36,079
of the pipeline without having to wait

1317
00:44:36,079 --> 00:44:38,640
like three to eight hours for a scan to

1318
00:44:38,640 --> 00:44:40,640
complete and you know slow down your

1319
00:44:40,640 --> 00:44:43,680
pipelines is really ideally suited for

1320
00:44:43,680 --> 00:44:45,119
devsecops

1321
00:44:45,119 --> 00:44:47,359
and rasp is really simple development

1322
00:44:47,359 --> 00:44:48,880
teams can adopt it make it part of their

1323
00:44:48,880 --> 00:44:50,640
application and when it pushes into

1324
00:44:50,640 --> 00:44:53,440
production they're safe against numerous

1325
00:44:53,440 --> 00:44:55,280
classes of attacks

1326
00:44:55,280 --> 00:44:56,720
this is why i think this is such a

1327
00:44:56,720 --> 00:44:59,119
transformational

1328
00:44:59,119 --> 00:45:01,680
technology

1329
00:45:01,760 --> 00:45:03,440
let's uh

1330
00:45:03,440 --> 00:45:04,720
talk about what we're you know the big

1331
00:45:04,720 --> 00:45:06,560
picture about what we're doing here so

1332
00:45:06,560 --> 00:45:08,960
the legacy approach to apsec

1333
00:45:08,960 --> 00:45:11,839
is kind of what i call outside in

1334
00:45:11,839 --> 00:45:14,240
it uh you're looking at a source code

1335
00:45:14,240 --> 00:45:15,839
repo or you're scanning from the outside

1336
00:45:15,839 --> 00:45:17,200
or you've got a firewall around the

1337
00:45:17,200 --> 00:45:19,359
outside of an application you never

1338
00:45:19,359 --> 00:45:21,440
really know what's going on inside the

1339
00:45:21,440 --> 00:45:23,440
running app

1340
00:45:23,440 --> 00:45:25,040
and that has a bunch of problems when

1341
00:45:25,040 --> 00:45:26,960
when you're not inside they're directly

1342
00:45:26,960 --> 00:45:30,400
measuring the app or the api

1343
00:45:30,400 --> 00:45:32,480
uh you make a lot of mistakes and if you

1344
00:45:32,480 --> 00:45:34,560
have mistakes you need experts

1345
00:45:34,560 --> 00:45:36,240
and if you have to have experts you're

1346
00:45:36,240 --> 00:45:38,079
gonna slow things down because it's an

1347
00:45:38,079 --> 00:45:40,240
instant bottleneck inside your software

1348
00:45:40,240 --> 00:45:41,760
factory

1349
00:45:41,760 --> 00:45:43,040
you can run

1350
00:45:43,040 --> 00:45:46,079
is in parallel across all of your

1351
00:45:46,079 --> 00:45:47,440
applications you can run rasp in

1352
00:45:47,440 --> 00:45:49,599
parallel across all your applications

1353
00:45:49,599 --> 00:45:52,560
and continuously monitor apps for

1354
00:45:52,560 --> 00:45:55,440
vulnerabilities uh all at the same time

1355
00:45:55,440 --> 00:45:56,800
so imagine that imagine if you could be

1356
00:45:56,800 --> 00:45:58,880
continuously testing every application

1357
00:45:58,880 --> 00:46:01,599
all the time finding vulnerabilities

1358
00:46:01,599 --> 00:46:02,720
instantly

1359
00:46:02,720 --> 00:46:06,160
it's a much more powerful way

1360
00:46:06,960 --> 00:46:08,880
so that's kind of the advantage of this

1361
00:46:08,880 --> 00:46:11,440
inside out model

1362
00:46:11,440 --> 00:46:14,240
it directly measures applications

1363
00:46:14,240 --> 00:46:16,800
using instrumentation

1364
00:46:16,800 --> 00:46:19,200
gives instant feedback and very accurate

1365
00:46:19,200 --> 00:46:20,240
because it's

1366
00:46:20,240 --> 00:46:21,680
directly measured like it really can't

1367
00:46:21,680 --> 00:46:23,599
report things that don't happen and it's

1368
00:46:23,599 --> 00:46:25,839
just there in the background you know

1369
00:46:25,839 --> 00:46:27,920
testing away in the background it's

1370
00:46:27,920 --> 00:46:29,760
passive it doesn't require

1371
00:46:29,760 --> 00:46:31,200
you to know much about application

1372
00:46:31,200 --> 00:46:32,560
security it'll just warn you when you

1373
00:46:32,560 --> 00:46:35,040
kind of step over that line

1374
00:46:35,040 --> 00:46:37,119
so really a force multiplier for modern

1375
00:46:37,119 --> 00:46:38,560
security which is what's got me so

1376
00:46:38,560 --> 00:46:40,800
interested in it

1377
00:46:40,800 --> 00:46:44,480
ultimately you can imagine

1378
00:46:44,480 --> 00:46:46,400
this approach to application security

1379
00:46:46,400 --> 00:46:48,640
really accelerating

1380
00:46:48,640 --> 00:46:49,920
devops

1381
00:46:49,920 --> 00:46:51,440
uh you know normally you'd have a

1382
00:46:51,440 --> 00:46:52,880
pipeline that would have to go through

1383
00:46:52,880 --> 00:46:55,359
scans at various steps and blocks and

1384
00:46:55,359 --> 00:46:56,640
guards and gates

1385
00:46:56,640 --> 00:46:58,720
that really slows down the delivery of

1386
00:46:58,720 --> 00:47:00,640
value to production

1387
00:47:00,640 --> 00:47:02,960
which is an anathema to development

1388
00:47:02,960 --> 00:47:05,119
teams they want to push code really fast

1389
00:47:05,119 --> 00:47:07,920
so with i asked and sca and by the way

1390
00:47:07,920 --> 00:47:10,079
you can use i asked to do software

1391
00:47:10,079 --> 00:47:11,680
composition analysis

1392
00:47:11,680 --> 00:47:12,640
you can

1393
00:47:12,640 --> 00:47:15,440
analyze the libraries in an application

1394
00:47:15,440 --> 00:47:17,359
from within the application itself and

1395
00:47:17,359 --> 00:47:19,440
again you get this super accurate

1396
00:47:19,440 --> 00:47:22,079
measurements when you do that

1397
00:47:22,079 --> 00:47:24,160
then the feedback loops are really fast

1398
00:47:24,160 --> 00:47:25,760
developers get instant feedback on their

1399
00:47:25,760 --> 00:47:27,280
code they can fix it they can check in

1400
00:47:27,280 --> 00:47:29,760
clean code and we can automate

1401
00:47:29,760 --> 00:47:32,400
the security checks during the pipeline

1402
00:47:32,400 --> 00:47:34,800
and make the flow of code into

1403
00:47:34,800 --> 00:47:36,800
production much faster

1404
00:47:36,800 --> 00:47:39,760
to me that's the essence of devsecops is

1405
00:47:39,760 --> 00:47:42,559
getting that code flowing by

1406
00:47:42,559 --> 00:47:44,160
using automation to

1407
00:47:44,160 --> 00:47:46,319
to really get

1408
00:47:46,319 --> 00:47:49,520
security work happening

1409
00:47:49,520 --> 00:47:51,440
okay

1410
00:47:51,440 --> 00:47:52,800
what we've seen

1411
00:47:52,800 --> 00:47:55,280
is nothing short of spectacular uh this

1412
00:47:55,280 --> 00:47:57,280
is across tens of thousands of

1413
00:47:57,280 --> 00:48:00,079
organizations uh we report these in our

1414
00:48:00,079 --> 00:48:03,040
uh our bi-monthly reports but you can

1415
00:48:03,040 --> 00:48:04,079
see here

1416
00:48:04,079 --> 00:48:07,040
uh some stats on mean time to remediate

1417
00:48:07,040 --> 00:48:09,920
this red line is for static analysis and

1418
00:48:09,920 --> 00:48:11,760
this is published by you know one of the

1419
00:48:11,760 --> 00:48:14,720
major vendors in the sas space

1420
00:48:14,720 --> 00:48:16,079
uh

1421
00:48:16,079 --> 00:48:17,839
they say hey we're gonna get to

1422
00:48:17,839 --> 00:48:20,319
a median amount of vulnerability closure

1423
00:48:20,319 --> 00:48:22,800
in a little over four months

1424
00:48:22,800 --> 00:48:25,520
that's way too long it's a 71 percent

1425
00:48:25,520 --> 00:48:26,160
and

1426
00:48:26,160 --> 00:48:28,240
actually this is for you know smaller

1427
00:48:28,240 --> 00:48:29,760
simpler organizations for bigger

1428
00:48:29,760 --> 00:48:30,960
organizations

1429
00:48:30,960 --> 00:48:32,640
median is

1430
00:48:32,640 --> 00:48:34,720
315 days

1431
00:48:34,720 --> 00:48:38,640
uh way too long to fix vulnerabilities

1432
00:48:38,640 --> 00:48:41,359
what we've seen with i asked is we get

1433
00:48:41,359 --> 00:48:43,839
to median in seven days

1434
00:48:43,839 --> 00:48:45,280
uh

1435
00:48:45,280 --> 00:48:48,400
and 61 closed in 30 days 90 by the end

1436
00:48:48,400 --> 00:48:51,040
of the year the area under this curve is

1437
00:48:51,040 --> 00:48:53,760
a massive improvement in security

1438
00:48:53,760 --> 00:48:56,000
uh we've really strongly this is like

1439
00:48:56,000 --> 00:48:58,559
really if you shifted security left this

1440
00:48:58,559 --> 00:49:00,720
is what the picture would look like

1441
00:49:00,720 --> 00:49:02,400
because most vulnerabilities are fixed

1442
00:49:02,400 --> 00:49:05,200
in seven games now can we do better yeah

1443
00:49:05,200 --> 00:49:06,319
what we've seen is that with

1444
00:49:06,319 --> 00:49:08,079
organizations that have been using is

1445
00:49:08,079 --> 00:49:10,000
for over a year

1446
00:49:10,000 --> 00:49:11,920
they've tackled their

1447
00:49:11,920 --> 00:49:14,240
uh security backlog so generally they

1448
00:49:14,240 --> 00:49:15,440
don't have a

1449
00:49:15,440 --> 00:49:17,040
vulnerability database full of

1450
00:49:17,040 --> 00:49:18,880
vulnerabilities you know tens of

1451
00:49:18,880 --> 00:49:19,920
thousands of vulnerabilities they've

1452
00:49:19,920 --> 00:49:21,920
worked most of that off and they're to

1453
00:49:21,920 --> 00:49:23,599
the point where they're closing 75

1454
00:49:23,599 --> 00:49:26,319
percent in eight days i'm super proud of

1455
00:49:26,319 --> 00:49:28,800
that that's how appsec should work

1456
00:49:28,800 --> 00:49:30,720
and i want you to look at i asked as an

1457
00:49:30,720 --> 00:49:33,040
enabler to achieve these kinds of

1458
00:49:33,040 --> 00:49:34,720
results and change the direction of your

1459
00:49:34,720 --> 00:49:37,200
abstract program

1460
00:49:37,200 --> 00:49:39,439
um

1461
00:49:39,599 --> 00:49:41,359
we'll throw it over for questions in

1462
00:49:41,359 --> 00:49:42,640
just a second because i'm at the end of

1463
00:49:42,640 --> 00:49:44,000
my time but i wanted to point you to a

1464
00:49:44,000 --> 00:49:45,920
couple articles that i think

1465
00:49:45,920 --> 00:49:47,280
will really be useful to folks that

1466
00:49:47,280 --> 00:49:49,760
getting started in apsec the first one

1467
00:49:49,760 --> 00:49:51,920
is called how to vulnerability

1468
00:49:51,920 --> 00:49:55,440
and it describes how to describe how to

1469
00:49:55,440 --> 00:49:57,760
talk about a security finding with

1470
00:49:57,760 --> 00:50:00,000
development teams and executives and how

1471
00:50:00,000 --> 00:50:01,599
to be compelling

1472
00:50:01,599 --> 00:50:03,119
uh people always talk about the

1473
00:50:03,119 --> 00:50:04,640
difficulty communicating with the

1474
00:50:04,640 --> 00:50:05,599
business

1475
00:50:05,599 --> 00:50:07,440
this is the recipe for how to do this

1476
00:50:07,440 --> 00:50:10,000
these lessons were hard won i spent 20

1477
00:50:10,000 --> 00:50:11,599
years doing this

1478
00:50:11,599 --> 00:50:13,359
and started a consulting practice where

1479
00:50:13,359 --> 00:50:15,200
i trained hundreds of consultants over

1480
00:50:15,200 --> 00:50:17,760
the years in how to do this and so you

1481
00:50:17,760 --> 00:50:19,839
know i've made almost every mistake in

1482
00:50:19,839 --> 00:50:21,839
the book and so this is my tutorial on

1483
00:50:21,839 --> 00:50:23,839
how to do it

1484
00:50:23,839 --> 00:50:25,680
the next article is what i call making

1485
00:50:25,680 --> 00:50:27,839
security in a software factory and if

1486
00:50:27,839 --> 00:50:29,119
you're interested in kind of the big

1487
00:50:29,119 --> 00:50:31,440
picture of how does security and

1488
00:50:31,440 --> 00:50:33,200
software development really work

1489
00:50:33,200 --> 00:50:34,960
together as as opposed to being like

1490
00:50:34,960 --> 00:50:37,200
separate silo to things

1491
00:50:37,200 --> 00:50:39,680
take a look at this it's controversial i

1492
00:50:39,680 --> 00:50:42,000
make some uh broad criticisms of the way

1493
00:50:42,000 --> 00:50:44,160
that security is typically done

1494
00:50:44,160 --> 00:50:46,400
uh in sort of the you know the

1495
00:50:46,400 --> 00:50:48,480
traditional model

1496
00:50:48,480 --> 00:50:50,079
but i love your feedback on this because

1497
00:50:50,079 --> 00:50:51,760
i do think this is really important

1498
00:50:51,760 --> 00:50:53,359
topic

1499
00:50:53,359 --> 00:50:56,480
with that i will stop and throw it open

1500
00:50:56,480 --> 00:50:57,839
to any questions

1501
00:50:57,839 --> 00:51:00,960
anybody has

