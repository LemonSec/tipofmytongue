1
00:00:01,420 --> 00:00:05,630
[Music]

2
00:00:05,680 --> 00:00:07,520
let's talk about

3
00:00:07,520 --> 00:00:11,280
this today and um just a few words about

4
00:00:11,280 --> 00:00:13,599
myself if i can switch the slides here

5
00:00:13,599 --> 00:00:15,360
it is

6
00:00:15,360 --> 00:00:16,480
yeah

7
00:00:16,480 --> 00:00:18,880
you already know this i i'm a software

8
00:00:18,880 --> 00:00:21,039
developer in the dark old days but now

9
00:00:21,039 --> 00:00:23,119
i'm in application security i do have

10
00:00:23,119 --> 00:00:24,560
some certs but

11
00:00:24,560 --> 00:00:26,800
for what it's worth i am not a hardware

12
00:00:26,800 --> 00:00:29,760
hacker and i've never been one but so

13
00:00:29,760 --> 00:00:32,320
how did i get into this jungle

14
00:00:32,320 --> 00:00:34,559
well let's talk first about the common

15
00:00:34,559 --> 00:00:35,920
perception

16
00:00:35,920 --> 00:00:37,600
a lot of people think that application

17
00:00:37,600 --> 00:00:40,079
security and iot are two separate

18
00:00:40,079 --> 00:00:42,399
domains with

19
00:00:42,399 --> 00:00:44,879
nothing in common but is that really the

20
00:00:44,879 --> 00:00:46,239
case

21
00:00:46,239 --> 00:00:48,399
let's consider this screenshot this is a

22
00:00:48,399 --> 00:00:51,280
web application in my browser and many

23
00:00:51,280 --> 00:00:52,879
of you might know this application is

24
00:00:52,879 --> 00:00:55,440
juice shop which is pretty awesome

25
00:00:55,440 --> 00:00:58,000
i highly recommend you playing with it

26
00:00:58,000 --> 00:00:59,440
and

27
00:00:59,440 --> 00:01:01,440
it's it's web app it runs somewhere on

28
00:01:01,440 --> 00:01:03,120
some kind of machine maybe in a docker

29
00:01:03,120 --> 00:01:06,320
container maybe on a laptop or on a

30
00:01:06,320 --> 00:01:09,199
server in the cloud

31
00:01:09,439 --> 00:01:11,280
and on this screenshot there is also a

32
00:01:11,280 --> 00:01:13,360
web application in the browser but in

33
00:01:13,360 --> 00:01:16,080
this case it's coming from a tiny device

34
00:01:16,080 --> 00:01:18,400
which happens to be my home router

35
00:01:18,400 --> 00:01:22,000
but for the end user like me is there

36
00:01:22,000 --> 00:01:23,520
really really a difference between the

37
00:01:23,520 --> 00:01:26,159
two both are showing up in the browser

38
00:01:26,159 --> 00:01:29,119
both serve serve me some html in

39
00:01:29,119 --> 00:01:30,479
javascript

40
00:01:30,479 --> 00:01:33,439
and that's how i interact with these two

41
00:01:33,439 --> 00:01:34,560
systems

42
00:01:34,560 --> 00:01:35,680
so

43
00:01:35,680 --> 00:01:37,119
not really a difference in terms of

44
00:01:37,119 --> 00:01:38,720
requirements

45
00:01:38,720 --> 00:01:40,479
both the application in its classic

46
00:01:40,479 --> 00:01:43,439
sense and the device probably need cpu

47
00:01:43,439 --> 00:01:46,960
and some memory so they can function

48
00:01:46,960 --> 00:01:48,640
they should probably be connected to a

49
00:01:48,640 --> 00:01:50,880
network otherwise they might be quite

50
00:01:50,880 --> 00:01:52,240
useless

51
00:01:52,240 --> 00:01:54,640
and they should have operating system

52
00:01:54,640 --> 00:01:55,520
right

53
00:01:55,520 --> 00:01:58,159
and maybe some services

54
00:01:58,159 --> 00:01:59,520
and libraries

55
00:01:59,520 --> 00:02:01,840
and programming language and software

56
00:02:01,840 --> 00:02:04,159
developers who use these programming

57
00:02:04,159 --> 00:02:06,240
language or languages and libraries to

58
00:02:06,240 --> 00:02:10,318
build awesome things that we all use

59
00:02:10,959 --> 00:02:14,160
in terms of security we are all familiar

60
00:02:14,160 --> 00:02:16,319
with a wasp top 10

61
00:02:16,319 --> 00:02:18,000
right are we not going to go through

62
00:02:18,000 --> 00:02:19,599
this let's don't worry

63
00:02:19,599 --> 00:02:22,560
and there's also this more recent thing

64
00:02:22,560 --> 00:02:26,160
called iot top 10 and although these two

65
00:02:26,160 --> 00:02:28,560
lists are not necessarily

66
00:02:28,560 --> 00:02:31,040
the same there is quite a bit of

67
00:02:31,040 --> 00:02:32,560
correlation

68
00:02:32,560 --> 00:02:35,280
and intersection between the two

69
00:02:35,280 --> 00:02:37,920
but for the sake of this presentation

70
00:02:37,920 --> 00:02:41,200
i'd like to focus on just the two items

71
00:02:41,200 --> 00:02:43,280
on the right side

72
00:02:43,280 --> 00:02:44,400
so

73
00:02:44,400 --> 00:02:47,120
the insecure network services in iot top

74
00:02:47,120 --> 00:02:48,160
10

75
00:02:48,160 --> 00:02:49,680
cover the

76
00:02:49,680 --> 00:02:52,560
software that runs on the device

77
00:02:52,560 --> 00:02:55,519
and insecure ecosystem interfaces

78
00:02:55,519 --> 00:02:58,480
covers the software that runs elsewhere

79
00:02:58,480 --> 00:03:00,480
outside of the device but it's part of

80
00:03:00,480 --> 00:03:02,720
the greater iot ecosystem

81
00:03:02,720 --> 00:03:05,599
so these two things are basically our

82
00:03:05,599 --> 00:03:06,959
classic

83
00:03:06,959 --> 00:03:09,040
well applications in in their classic

84
00:03:09,040 --> 00:03:11,920
sense and as applications

85
00:03:11,920 --> 00:03:14,720
they can have all of these of us top 10

86
00:03:14,720 --> 00:03:15,680
issues

87
00:03:15,680 --> 00:03:19,200
and maybe even more so

88
00:03:19,200 --> 00:03:21,200
the proper venn diagram should look like

89
00:03:21,200 --> 00:03:22,720
this

90
00:03:22,720 --> 00:03:25,760
at least from the attacker's perspective

91
00:03:25,760 --> 00:03:27,440
think about it if you're an attacker and

92
00:03:27,440 --> 00:03:29,680
you want to

93
00:03:29,680 --> 00:03:32,080
attack a device you can do it through

94
00:03:32,080 --> 00:03:33,680
many different vectors

95
00:03:33,680 --> 00:03:35,840
one of them happens to be software that

96
00:03:35,840 --> 00:03:38,640
runs on the device

97
00:03:39,120 --> 00:03:40,159
all right

98
00:03:40,159 --> 00:03:42,480
let me tell you a story who remembers

99
00:03:42,480 --> 00:03:45,120
march 2020 first of all of course we all

100
00:03:45,120 --> 00:03:47,760
do that's when we got into the pandemic

101
00:03:47,760 --> 00:03:49,360
mode and

102
00:03:49,360 --> 00:03:51,200
we got into lockdowns and many

103
00:03:51,200 --> 00:03:52,959
organizations

104
00:03:52,959 --> 00:03:54,400
and companies started closing their

105
00:03:54,400 --> 00:03:57,439
doors and some of them started looking

106
00:03:57,439 --> 00:03:59,599
into alternative ways

107
00:03:59,599 --> 00:04:00,720
of

108
00:04:00,720 --> 00:04:02,799
staying connected with their customers

109
00:04:02,799 --> 00:04:04,560
and their friends

110
00:04:04,560 --> 00:04:06,799
and some of these organizations

111
00:04:06,799 --> 00:04:10,239
looked into what we call live streaming

112
00:04:10,239 --> 00:04:12,239
meaning broadcasting video and audio

113
00:04:12,239 --> 00:04:13,599
over the internet

114
00:04:13,599 --> 00:04:16,160
so i happened to volunteer one of the

115
00:04:16,160 --> 00:04:19,358
non-profits to help them with their live

116
00:04:19,358 --> 00:04:22,240
streaming setup they had none and i said

117
00:04:22,240 --> 00:04:24,240
okay i'll i'll help you guys i have no

118
00:04:24,240 --> 00:04:26,080
idea what i'm doing but

119
00:04:26,080 --> 00:04:28,800
we'll figure it out

120
00:04:28,800 --> 00:04:31,280
um well live streaming actually is

121
00:04:31,280 --> 00:04:33,520
pretty simple you have your video signal

122
00:04:33,520 --> 00:04:35,440
or signals and you have your audio

123
00:04:35,440 --> 00:04:36,479
signals

124
00:04:36,479 --> 00:04:38,320
um and they could be they could come

125
00:04:38,320 --> 00:04:39,919
from the same device like camera with

126
00:04:39,919 --> 00:04:42,560
microphone or they could be separate

127
00:04:42,560 --> 00:04:45,440
and what many people do is they run a

128
00:04:45,440 --> 00:04:48,080
computer with some special broadcasting

129
00:04:48,080 --> 00:04:50,639
software like obs and the software

130
00:04:50,639 --> 00:04:52,479
processes the signals you can apply

131
00:04:52,479 --> 00:04:54,400
different effects

132
00:04:54,400 --> 00:04:55,680
and

133
00:04:55,680 --> 00:04:56,960
and what not

134
00:04:56,960 --> 00:04:59,199
and it generates

135
00:04:59,199 --> 00:05:00,080
um

136
00:05:00,080 --> 00:05:01,280
properly

137
00:05:01,280 --> 00:05:04,479
a stream in in in certain format like

138
00:05:04,479 --> 00:05:06,960
h.264 is a popular one

139
00:05:06,960 --> 00:05:09,520
and that's that digital stream gets

140
00:05:09,520 --> 00:05:10,800
pushed to

141
00:05:10,800 --> 00:05:13,600
one or several of these cloud streaming

142
00:05:13,600 --> 00:05:16,160
services and the end users connect to

143
00:05:16,160 --> 00:05:18,080
the services and watch whatever you have

144
00:05:18,080 --> 00:05:19,600
to present

145
00:05:19,600 --> 00:05:22,880
that's pretty cool uh and simple but

146
00:05:22,880 --> 00:05:25,039
the people at that non-profit that i was

147
00:05:25,039 --> 00:05:27,280
helping are not were not necessarily

148
00:05:27,280 --> 00:05:29,120
technically savvy and

149
00:05:29,120 --> 00:05:31,520
this computer with this heavy software

150
00:05:31,520 --> 00:05:34,800
in the middle was um a single point of

151
00:05:34,800 --> 00:05:37,039
failure for them really like they would

152
00:05:37,039 --> 00:05:39,520
have to maintain this computer make sure

153
00:05:39,520 --> 00:05:40,880
it's updated

154
00:05:40,880 --> 00:05:42,960
know how to run obs

155
00:05:42,960 --> 00:05:44,960
uh try not to

156
00:05:44,960 --> 00:05:46,080
delete

157
00:05:46,080 --> 00:05:48,800
necessary files by mistake

158
00:05:48,800 --> 00:05:51,039
so i thought is there something that i

159
00:05:51,039 --> 00:05:54,320
can replace this computer with that's

160
00:05:54,320 --> 00:05:56,400
easy to use and

161
00:05:56,400 --> 00:05:58,080
maintenance free

162
00:05:58,080 --> 00:06:00,240
and the answer is yes so i did some

163
00:06:00,240 --> 00:06:02,080
research and i found this hardware

164
00:06:02,080 --> 00:06:03,440
encoders

165
00:06:03,440 --> 00:06:06,639
and they were not super expensive so i

166
00:06:06,639 --> 00:06:09,600
just went ahead and bought one

167
00:06:09,600 --> 00:06:11,120
so this device

168
00:06:11,120 --> 00:06:15,520
has audio input and hdmi input and it

169
00:06:15,520 --> 00:06:17,199
has ethernet port

170
00:06:17,199 --> 00:06:19,600
so it's of course it's connected to the

171
00:06:19,600 --> 00:06:21,840
internet

172
00:06:21,840 --> 00:06:24,720
and it has a web ui

173
00:06:24,720 --> 00:06:26,960
where i could set different

174
00:06:26,960 --> 00:06:30,080
parameters like the video size

175
00:06:30,080 --> 00:06:33,120
bitrate and i could also specify which

176
00:06:33,120 --> 00:06:35,680
service to stream to in this case it was

177
00:06:35,680 --> 00:06:37,039
youtube

178
00:06:37,039 --> 00:06:37,759
so

179
00:06:37,759 --> 00:06:40,319
i set it up i connected everything and

180
00:06:40,319 --> 00:06:42,720
it worked like a charm it was it was

181
00:06:42,720 --> 00:06:44,160
doing exactly

182
00:06:44,160 --> 00:06:46,720
uh what it was supposed to do and

183
00:06:46,720 --> 00:06:48,479
i don't i didn't need that computer with

184
00:06:48,479 --> 00:06:50,080
obs anymore

185
00:06:50,080 --> 00:06:52,400
uh by the way this is the final setup so

186
00:06:52,400 --> 00:06:55,360
i had a simple mixer board with four

187
00:06:55,360 --> 00:06:58,240
microphone inputs i had to split hdmi

188
00:06:58,240 --> 00:07:01,440
hdmi signal because i had a um an extra

189
00:07:01,440 --> 00:07:02,400
monitor

190
00:07:02,400 --> 00:07:04,639
and this box right here with these two

191
00:07:04,639 --> 00:07:07,599
lights is the actual encoder

192
00:07:07,599 --> 00:07:10,160
the beauty of this setup is it's

193
00:07:10,160 --> 00:07:11,680
all these devices are connected to a

194
00:07:11,680 --> 00:07:13,199
single power strip

195
00:07:13,199 --> 00:07:15,919
and you turn it on or off with the flip

196
00:07:15,919 --> 00:07:17,520
of a switch

197
00:07:17,520 --> 00:07:20,319
super easy anybody can do it

198
00:07:20,319 --> 00:07:22,000
so everybody's happy that's the end of

199
00:07:22,000 --> 00:07:22,960
story

200
00:07:22,960 --> 00:07:24,720
no of course not um

201
00:07:24,720 --> 00:07:25,759
we have

202
00:07:25,759 --> 00:07:27,680
50 more minutes

203
00:07:27,680 --> 00:07:30,560
so i was not like i was pretty happy

204
00:07:30,560 --> 00:07:32,240
with the

205
00:07:32,240 --> 00:07:34,240
with this setup but i was not super

206
00:07:34,240 --> 00:07:36,400
happy with color balance that that was

207
00:07:36,400 --> 00:07:38,880
coming from the camera that i was using

208
00:07:38,880 --> 00:07:39,919
um

209
00:07:39,919 --> 00:07:42,080
the lighting conditions were changing

210
00:07:42,080 --> 00:07:43,360
all the time it could be light from the

211
00:07:43,360 --> 00:07:45,440
window it could be overcast sunny it

212
00:07:45,440 --> 00:07:47,840
could be artificial light so the camera

213
00:07:47,840 --> 00:07:50,080
handled some of the auto color color

214
00:07:50,080 --> 00:07:51,520
balance but

215
00:07:51,520 --> 00:07:52,639
not

216
00:07:52,639 --> 00:07:56,000
uh perfectly so i thought is there a way

217
00:07:56,000 --> 00:07:56,800
to

218
00:07:56,800 --> 00:07:58,800
adjust color balance

219
00:07:58,800 --> 00:08:02,080
in the device in in the encoder

220
00:08:02,080 --> 00:08:04,479
so i opened the advanced settings in

221
00:08:04,479 --> 00:08:06,080
that web ui

222
00:08:06,080 --> 00:08:08,000
and i look through all these settings i

223
00:08:08,000 --> 00:08:10,240
have no idea what they do and there's no

224
00:08:10,240 --> 00:08:12,479
documentation but i didn't see one that

225
00:08:12,479 --> 00:08:14,879
would say like auto color balance or

226
00:08:14,879 --> 00:08:17,520
even like having presets

227
00:08:17,520 --> 00:08:20,479
so then i thought well okay maybe the

228
00:08:20,479 --> 00:08:24,000
software that runs on this encoder has

229
00:08:24,000 --> 00:08:26,080
some functionality that is not exposed

230
00:08:26,080 --> 00:08:28,160
through the web ui

231
00:08:28,160 --> 00:08:30,400
and i decided to

232
00:08:30,400 --> 00:08:31,599
take a look

233
00:08:31,599 --> 00:08:34,320
inside the device and literally i opened

234
00:08:34,320 --> 00:08:38,320
the cover and i looked at the board and

235
00:08:38,320 --> 00:08:40,640
remember i'm not a hardware hacker so i

236
00:08:40,640 --> 00:08:42,159
don't really know what to do with this

237
00:08:42,159 --> 00:08:43,599
and there was no

238
00:08:43,599 --> 00:08:46,080
port here that would say a label that

239
00:08:46,080 --> 00:08:48,720
would say connect here for a free shell

240
00:08:48,720 --> 00:08:51,360
so i decided to close the box and

241
00:08:51,360 --> 00:08:55,839
approach it as a software appliance

242
00:08:56,720 --> 00:08:58,080
and software appliance is a computer

243
00:08:58,080 --> 00:08:59,600
that runs some software

244
00:08:59,600 --> 00:09:01,440
so i did an

245
00:09:01,440 --> 00:09:03,519
port scan with nmap

246
00:09:03,519 --> 00:09:05,120
and i found

247
00:09:05,120 --> 00:09:08,800
http of course our tsp rtmp 18p these

248
00:09:08,800 --> 00:09:09,680
are all

249
00:09:09,680 --> 00:09:12,000
video streaming protocols

250
00:09:12,000 --> 00:09:14,000
and i also

251
00:09:14,000 --> 00:09:16,080
saw that telnet was open

252
00:09:16,080 --> 00:09:18,160
so of course immediately i tried to log

253
00:09:18,160 --> 00:09:19,760
in

254
00:09:19,760 --> 00:09:22,000
and i failed because i didn't know the

255
00:09:22,000 --> 00:09:23,839
password and i tried a few obvious ones

256
00:09:23,839 --> 00:09:27,519
like root admin and none of them worked

257
00:09:27,519 --> 00:09:29,680
so this was a dead end

258
00:09:29,680 --> 00:09:32,640
but i also noticed in the web ui

259
00:09:32,640 --> 00:09:35,040
in the firmware update

260
00:09:35,040 --> 00:09:36,800
section there was also

261
00:09:36,800 --> 00:09:38,720
firmware backup

262
00:09:38,720 --> 00:09:41,680
and of course i pushed this button and i

263
00:09:41,680 --> 00:09:43,200
got

264
00:09:43,200 --> 00:09:45,279
the file pushed to me

265
00:09:45,279 --> 00:09:48,160
which is rar and rar is

266
00:09:48,160 --> 00:09:50,640
is basically archive format it's like a

267
00:09:50,640 --> 00:09:51,760
zip

268
00:09:51,760 --> 00:09:54,800
and this rar file was unencrypted and i

269
00:09:54,800 --> 00:09:55,920
was

270
00:09:55,920 --> 00:09:58,320
totally able to unpack it

271
00:09:58,320 --> 00:09:59,279
and

272
00:09:59,279 --> 00:10:01,680
see the contents of the firmware on this

273
00:10:01,680 --> 00:10:02,640
device

274
00:10:02,640 --> 00:10:05,920
so this was super easy uh pretty cool

275
00:10:05,920 --> 00:10:08,480
and uh first of all of course i looked

276
00:10:08,480 --> 00:10:10,640
at configuration files like this one and

277
00:10:10,640 --> 00:10:12,720
this one and i looked through

278
00:10:12,720 --> 00:10:14,800
directories looking for the setting that

279
00:10:14,800 --> 00:10:17,680
i wanted but i didn't find one so i just

280
00:10:17,680 --> 00:10:20,160
started analyzing like what exactly is

281
00:10:20,160 --> 00:10:22,480
happening here how it works

282
00:10:22,480 --> 00:10:25,360
and this file right here box dot viewer

283
00:10:25,360 --> 00:10:28,640
400 underscore hdmi is the largest file

284
00:10:28,640 --> 00:10:29,920
on

285
00:10:29,920 --> 00:10:32,959
in this set it's and a half megabytes

286
00:10:32,959 --> 00:10:35,120
and it reports as

287
00:10:35,120 --> 00:10:37,920
a binary executable

288
00:10:37,920 --> 00:10:39,760
um

289
00:10:39,760 --> 00:10:42,240
and it doesn't look like any standard

290
00:10:42,240 --> 00:10:46,160
utility like png to bmp ram seria serial

291
00:10:46,160 --> 00:10:48,160
or anything like that so i thought this

292
00:10:48,160 --> 00:10:49,920
is probably

293
00:10:49,920 --> 00:10:52,959
my guess it's probably the this custom

294
00:10:52,959 --> 00:10:56,079
software that runs on the device

295
00:10:56,079 --> 00:10:58,240
all right cool that's progress but i

296
00:10:58,240 --> 00:11:00,800
still want a shell on the device

297
00:11:00,800 --> 00:11:02,959
and i noticed that the firmware also had

298
00:11:02,959 --> 00:11:04,720
the password file

299
00:11:04,720 --> 00:11:06,560
what okay let's take a look at the

300
00:11:06,560 --> 00:11:07,839
password file

301
00:11:07,839 --> 00:11:10,320
um this is a standard linux password

302
00:11:10,320 --> 00:11:12,320
format and

303
00:11:12,320 --> 00:11:15,440
have the password hash and i tried to

304
00:11:15,440 --> 00:11:18,480
crack it i gave it a few

305
00:11:18,480 --> 00:11:22,240
word lists but i couldn't find a match

306
00:11:22,240 --> 00:11:24,000
so this was more complicated than i

307
00:11:24,000 --> 00:11:26,079
thought it's not one of those obvious

308
00:11:26,079 --> 00:11:27,920
password one two three

309
00:11:27,920 --> 00:11:29,440
things

310
00:11:29,440 --> 00:11:33,920
so i then i had a brilliant idea like

311
00:11:33,920 --> 00:11:36,000
i don't have to crack this password what

312
00:11:36,000 --> 00:11:38,480
i can do instead i can replace

313
00:11:38,480 --> 00:11:41,200
this password file with my own

314
00:11:41,200 --> 00:11:44,160
push this firmware back to the device

315
00:11:44,160 --> 00:11:45,120
and

316
00:11:45,120 --> 00:11:48,800
see if i can get into telnet or into a

317
00:11:48,800 --> 00:11:51,360
shell using telnet so i used openssl

318
00:11:51,360 --> 00:11:53,360
password command to generate a password

319
00:11:53,360 --> 00:11:55,200
hash

320
00:11:55,200 --> 00:12:00,399
i repackaged the rar archive

321
00:12:00,399 --> 00:12:03,040
pushed it to the device rebooted it

322
00:12:03,040 --> 00:12:05,120
and i was in with my own password

323
00:12:05,120 --> 00:12:07,839
awesome now i'm root on the device i'm

324
00:12:07,839 --> 00:12:09,040
in the shell

325
00:12:09,040 --> 00:12:11,519
and it runs some kind of linux

326
00:12:11,519 --> 00:12:12,639
so

327
00:12:12,639 --> 00:12:15,839
it runs linux which is custom version

328
00:12:15,839 --> 00:12:17,680
from high silicon

329
00:12:17,680 --> 00:12:19,760
what is high silicon so high silicon

330
00:12:19,760 --> 00:12:22,480
happens to be chinese manufacturer

331
00:12:22,480 --> 00:12:24,560
who specialize in video surveillance

332
00:12:24,560 --> 00:12:25,839
devices

333
00:12:25,839 --> 00:12:29,040
and it's a subsidiary of huawei

334
00:12:29,040 --> 00:12:30,959
okay cool

335
00:12:30,959 --> 00:12:33,200
what else i looked at

336
00:12:33,200 --> 00:12:35,600
the open ports on the device with

337
00:12:35,600 --> 00:12:36,880
netstat

338
00:12:36,880 --> 00:12:39,680
and my suspicion was correct this box

339
00:12:39,680 --> 00:12:42,079
executable was actually the workhorse

340
00:12:42,079 --> 00:12:43,680
that handled everything pretty much

341
00:12:43,680 --> 00:12:45,920
everything video streaming

342
00:12:45,920 --> 00:12:47,839
uh http

343
00:12:47,839 --> 00:12:49,279
and

344
00:12:49,279 --> 00:12:51,200
a bunch of other things

345
00:12:51,200 --> 00:12:54,639
cool i looked at the password

346
00:12:54,639 --> 00:12:57,920
at the process list and i was able to

347
00:12:57,920 --> 00:12:59,440
quickly

348
00:12:59,440 --> 00:13:01,680
reverse engineer their boot sequence so

349
00:13:01,680 --> 00:13:03,440
they had a couple of custom scripts like

350
00:13:03,440 --> 00:13:04,959
load and run

351
00:13:04,959 --> 00:13:06,800
which would do some preparatory work and

352
00:13:06,800 --> 00:13:08,800
then they would start this executable

353
00:13:08,800 --> 00:13:11,120
which would stay running as long as the

354
00:13:11,120 --> 00:13:13,440
device is powered on

355
00:13:13,440 --> 00:13:16,639
so i went ahead and modified this script

356
00:13:16,639 --> 00:13:19,120
so when i reboot the device i don't have

357
00:13:19,120 --> 00:13:20,800
the application running

358
00:13:20,800 --> 00:13:21,839
and

359
00:13:21,839 --> 00:13:24,000
i did this because i wanted to play with

360
00:13:24,000 --> 00:13:24,720
it

361
00:13:24,720 --> 00:13:26,639
now i have to tell you that at this

362
00:13:26,639 --> 00:13:27,760
point

363
00:13:27,760 --> 00:13:29,839
when i got this deep into the device i

364
00:13:29,839 --> 00:13:32,880
was no longer interested in looking for

365
00:13:32,880 --> 00:13:35,680
that color balance setting to be honest

366
00:13:35,680 --> 00:13:36,720
um

367
00:13:36,720 --> 00:13:37,600
i

368
00:13:37,600 --> 00:13:40,079
being a um i guess being a security

369
00:13:40,079 --> 00:13:42,160
professional i thought well maybe

370
00:13:42,160 --> 00:13:44,480
instead i should try to hack and look

371
00:13:44,480 --> 00:13:47,120
for vulnerabilities in this device

372
00:13:47,120 --> 00:13:51,120
and that's exactly what i started doing

373
00:13:51,120 --> 00:13:54,480
so let me show you how

374
00:13:54,480 --> 00:13:58,560
this device looks here's one of them

375
00:13:59,839 --> 00:14:02,399
yeah this is it's pretty small and neat

376
00:14:02,399 --> 00:14:05,600
and i can show you the inside

377
00:14:05,600 --> 00:14:08,240
um nothing exciting and again we're not

378
00:14:08,240 --> 00:14:10,320
hacking hardware today so i'm just gonna

379
00:14:10,320 --> 00:14:12,399
close it and we're going to play with

380
00:14:12,399 --> 00:14:15,600
this as a black box it's box and it's

381
00:14:15,600 --> 00:14:17,839
black

382
00:14:18,480 --> 00:14:21,839
i need to connect it to the network

383
00:14:21,839 --> 00:14:23,680
plug in the internet cord and give it

384
00:14:23,680 --> 00:14:25,839
some power

385
00:14:25,839 --> 00:14:29,120
and it shines it shines a blue light

386
00:14:29,120 --> 00:14:31,040
which means it's powered on and i'm

387
00:14:31,040 --> 00:14:33,279
going to set it aside and not touch it

388
00:14:33,279 --> 00:14:34,720
again because

389
00:14:34,720 --> 00:14:38,800
we are not doing physical hacking

390
00:14:42,320 --> 00:14:45,120
okay it responds responds to ping

391
00:14:45,120 --> 00:14:48,560
so i can connect to it now

392
00:14:50,320 --> 00:14:53,839
and i'm in when i go to tmp directory

393
00:14:53,839 --> 00:14:56,160
i can see all the contents that we have

394
00:14:56,160 --> 00:14:58,320
seen on the screenshot before with all

395
00:14:58,320 --> 00:14:59,199
these

396
00:14:59,199 --> 00:15:01,360
all the software configuration files

397
00:15:01,360 --> 00:15:05,839
and now i can run the program itself

398
00:15:05,839 --> 00:15:08,880
so i started this box executable and as

399
00:15:08,880 --> 00:15:11,360
you can see it prints a lot of

400
00:15:11,360 --> 00:15:13,279
useful information on the console which

401
00:15:13,279 --> 00:15:15,360
would be pretty helpful when we try to

402
00:15:15,360 --> 00:15:16,560
debug it

403
00:15:16,560 --> 00:15:19,680
okay what else do i need of course i

404
00:15:19,680 --> 00:15:22,880
need a browser so here is my browser

405
00:15:22,880 --> 00:15:24,480
that i'm going to use

406
00:15:24,480 --> 00:15:27,839
to work with this encoder

407
00:15:28,079 --> 00:15:30,639
of course it prompts me for user id and

408
00:15:30,639 --> 00:15:31,920
password

409
00:15:31,920 --> 00:15:35,120
my user id is admin and password is

410
00:15:35,120 --> 00:15:37,600
secret

411
00:15:38,399 --> 00:15:41,120
as the page loads you can see that the

412
00:15:41,120 --> 00:15:44,480
console shows a lot of debug information

413
00:15:44,480 --> 00:15:45,360
um

414
00:15:45,360 --> 00:15:47,120
again it's very helpful it's basically

415
00:15:47,120 --> 00:15:48,639
showing me all the files that it's

416
00:15:48,639 --> 00:15:51,199
serving to my browser

417
00:15:51,199 --> 00:15:52,000
okay

418
00:15:52,000 --> 00:15:54,800
um i'm i'm in now what else do i need

419
00:15:54,800 --> 00:15:56,800
since this is a web application i want

420
00:15:56,800 --> 00:15:57,519
to

421
00:15:57,519 --> 00:16:00,320
intercept http requests and responses

422
00:16:00,320 --> 00:16:02,079
and analyze them

423
00:16:02,079 --> 00:16:05,600
i like burp suite so that's what i have

424
00:16:05,600 --> 00:16:07,519
set up here

425
00:16:07,519 --> 00:16:10,720
here are all the requests that were sent

426
00:16:10,720 --> 00:16:12,079
by my browser

427
00:16:12,079 --> 00:16:13,199
and

428
00:16:13,199 --> 00:16:16,800
let me turn off images and hide

429
00:16:16,800 --> 00:16:19,040
the unimportant stuff okay

430
00:16:19,040 --> 00:16:21,680
here is the front page the first try was

431
00:16:21,680 --> 00:16:23,680
unsuccessful unauthorized of course

432
00:16:23,680 --> 00:16:24,639
because

433
00:16:24,639 --> 00:16:26,959
it was before i entered my credentials

434
00:16:26,959 --> 00:16:29,040
the second was

435
00:16:29,040 --> 00:16:30,320
ok

436
00:16:30,320 --> 00:16:32,880
and it had the authorization header

437
00:16:32,880 --> 00:16:35,920
with username admin and it's digest

438
00:16:35,920 --> 00:16:38,079
authentication

439
00:16:38,079 --> 00:16:40,480
in this case the password is not sent in

440
00:16:40,480 --> 00:16:42,320
the plain text

441
00:16:42,320 --> 00:16:44,560
um

442
00:16:45,440 --> 00:16:47,360
and there are some there are some calls

443
00:16:47,360 --> 00:16:49,360
that are

444
00:16:49,360 --> 00:16:52,240
done by the ui and this one is

445
00:16:52,240 --> 00:16:54,959
interesting it returns some

446
00:16:54,959 --> 00:16:57,519
settings including

447
00:16:57,519 --> 00:17:00,079
the administrative password in plain

448
00:17:00,079 --> 00:17:01,040
text

449
00:17:01,040 --> 00:17:02,800
okay well um

450
00:17:02,800 --> 00:17:04,799
maybe it's not a big deal because it's

451
00:17:04,799 --> 00:17:07,439
all authenticated so nobody can get this

452
00:17:07,439 --> 00:17:10,640
but we'll see how we can use it later

453
00:17:10,640 --> 00:17:12,959
um cool

454
00:17:12,959 --> 00:17:14,959
now what else do i need since this is a

455
00:17:14,959 --> 00:17:16,160
binary

456
00:17:16,160 --> 00:17:19,359
it would be helpful to somehow decompile

457
00:17:19,359 --> 00:17:21,280
it so we can look at the code and not

458
00:17:21,280 --> 00:17:22,480
add the

459
00:17:22,480 --> 00:17:24,799
um a bunch of uh

460
00:17:24,799 --> 00:17:28,960
binary code right so um i

461
00:17:28,960 --> 00:17:31,039
tried this tool called gidra it was

462
00:17:31,039 --> 00:17:34,880
released by nsa a couple years ago and i

463
00:17:34,880 --> 00:17:36,400
always wanted to

464
00:17:36,400 --> 00:17:38,799
give it a try but never had a chance to

465
00:17:38,799 --> 00:17:40,559
i thought this was perfect opportunity

466
00:17:40,559 --> 00:17:42,160
for me to learn this tool

467
00:17:42,160 --> 00:17:45,200
so i downloaded it i gave it i pointed

468
00:17:45,200 --> 00:17:47,039
it to this

469
00:17:47,039 --> 00:17:48,960
binary executable

470
00:17:48,960 --> 00:17:51,360
and it processed it for a few minutes

471
00:17:51,360 --> 00:17:52,240
and

472
00:17:52,240 --> 00:17:55,200
gave me this complete disassembly on the

473
00:17:55,200 --> 00:17:56,640
left hand side

474
00:17:56,640 --> 00:17:58,960
and on the right hand side

475
00:17:58,960 --> 00:18:02,960
it also gives me a decompiled code

476
00:18:02,960 --> 00:18:04,960
corresponding to this assembly so

477
00:18:04,960 --> 00:18:08,720
decompile looks like c code and

478
00:18:08,720 --> 00:18:10,480
i i've done a lot of c programming in

479
00:18:10,480 --> 00:18:12,559
the past so this this is great i can

480
00:18:12,559 --> 00:18:14,559
totally read it except that

481
00:18:14,559 --> 00:18:17,039
function names and variable names make

482
00:18:17,039 --> 00:18:20,080
no sense so that's something that

483
00:18:20,080 --> 00:18:23,120
uh we'll need to figure out right

484
00:18:23,120 --> 00:18:24,559
um

485
00:18:24,559 --> 00:18:25,840
okay so

486
00:18:25,840 --> 00:18:26,720
what

487
00:18:26,720 --> 00:18:29,200
are we doing now

488
00:18:29,200 --> 00:18:31,440
now we're basically doing

489
00:18:31,440 --> 00:18:34,960
application security assessment

490
00:18:35,600 --> 00:18:37,840
and

491
00:18:37,840 --> 00:18:39,600
for the next 20 minutes i'm going to be

492
00:18:39,600 --> 00:18:41,280
switching back and forth between

493
00:18:41,280 --> 00:18:42,799
different windows

494
00:18:42,799 --> 00:18:44,960
and i apologize if if it gives you

495
00:18:44,960 --> 00:18:47,039
motion sickness don't blame me for that

496
00:18:47,039 --> 00:18:48,000
please

497
00:18:48,000 --> 00:18:51,120
and also if demos don't work

498
00:18:51,120 --> 00:18:54,240
blame demo gods not me again

499
00:18:54,240 --> 00:18:57,120
but what we're gonna do together is

500
00:18:57,120 --> 00:18:58,480
we're gonna find

501
00:18:58,480 --> 00:19:00,480
backdoor password

502
00:19:00,480 --> 00:19:02,559
uh path traversal leading to under

503
00:19:02,559 --> 00:19:04,640
unauthenticated file disclosure

504
00:19:04,640 --> 00:19:06,240
we're gonna find two remote code

505
00:19:06,240 --> 00:19:08,080
executions we have three different

506
00:19:08,080 --> 00:19:09,120
vectors

507
00:19:09,120 --> 00:19:11,120
and we're also going to find denial of

508
00:19:11,120 --> 00:19:12,080
service

509
00:19:12,080 --> 00:19:15,039
through buffer overflow

510
00:19:15,039 --> 00:19:18,480
i hope it sounds exciting and

511
00:19:18,480 --> 00:19:20,480
let's do it so when we are doing

512
00:19:20,480 --> 00:19:23,200
application security assessment

513
00:19:23,200 --> 00:19:25,679
we have to ask ourselves a question what

514
00:19:25,679 --> 00:19:27,679
are the critical functions in this

515
00:19:27,679 --> 00:19:30,080
application and the first one that

516
00:19:30,080 --> 00:19:31,520
normally comes to mind is the

517
00:19:31,520 --> 00:19:33,200
authentication right because it's like

518
00:19:33,200 --> 00:19:36,799
your front door that has to be

519
00:19:36,799 --> 00:19:39,600
pretty strong and

520
00:19:39,600 --> 00:19:42,400
unbreakable so this application supports

521
00:19:42,400 --> 00:19:45,679
authentication and i know that

522
00:19:45,679 --> 00:19:47,919
the username is always admin i could not

523
00:19:47,919 --> 00:19:49,280
change it and i didn't see it in

524
00:19:49,280 --> 00:19:51,600
configuration files so it must be hard

525
00:19:51,600 --> 00:19:53,600
coded somewhere

526
00:19:53,600 --> 00:19:57,039
gidra lets you search for strings

527
00:19:57,039 --> 00:19:59,039
and that's what i did i just search for

528
00:19:59,039 --> 00:20:00,160
admin

529
00:20:00,160 --> 00:20:02,000
and i found exactly one occurrence of

530
00:20:02,000 --> 00:20:04,960
the string admin in this binary

531
00:20:04,960 --> 00:20:06,720
and this string was

532
00:20:06,720 --> 00:20:09,919
referenced from a couple of functions

533
00:20:09,919 --> 00:20:11,760
and here is one of them this function

534
00:20:11,760 --> 00:20:14,000
accept two parameters

535
00:20:14,000 --> 00:20:16,960
and the first parameter is first compare

536
00:20:16,960 --> 00:20:19,679
it to admin okay so this does look like

537
00:20:19,679 --> 00:20:21,520
authentication and then the second

538
00:20:21,520 --> 00:20:23,520
parameter is compared

539
00:20:23,520 --> 00:20:25,520
to

540
00:20:25,520 --> 00:20:26,799
what

541
00:20:26,799 --> 00:20:28,640
so when i first saw that i was like

542
00:20:28,640 --> 00:20:29,919
where is this coming from is this

543
00:20:29,919 --> 00:20:32,400
something that i entered by accident no

544
00:20:32,400 --> 00:20:33,919
it's actually something that's hardcoded

545
00:20:33,919 --> 00:20:36,640
in this binary and if there is a match

546
00:20:36,640 --> 00:20:39,440
the function returns one which is

547
00:20:39,440 --> 00:20:42,720
which means authentication is successful

548
00:20:42,720 --> 00:20:45,360
if not it proceeds with

549
00:20:45,360 --> 00:20:48,720
a checking actual password right here

550
00:20:48,720 --> 00:20:49,760
so

551
00:20:49,760 --> 00:20:51,520
when i saw this i immediately thought

552
00:20:51,520 --> 00:20:55,280
this looks like a backdoor and i

553
00:20:55,280 --> 00:20:56,880
just decided to give it a try so i'm

554
00:20:56,880 --> 00:20:59,039
going to use the curl command

555
00:20:59,039 --> 00:21:00,559
to issue

556
00:21:00,559 --> 00:21:04,399
a request to the application

557
00:21:04,559 --> 00:21:06,400
and of course if i don't specify any

558
00:21:06,400 --> 00:21:09,679
credentials i get error 401

559
00:21:09,679 --> 00:21:12,960
but if i specify

560
00:21:12,960 --> 00:21:14,559
username

561
00:21:14,559 --> 00:21:16,559
and

562
00:21:16,559 --> 00:21:20,559
this string as the password

563
00:21:22,400 --> 00:21:24,000
it succeeds

564
00:21:24,000 --> 00:21:27,280
so now i'm served this html

565
00:21:27,280 --> 00:21:31,799
but remember that getsis function

566
00:21:32,080 --> 00:21:34,799
that works too and this one actually

567
00:21:34,799 --> 00:21:37,039
returns the the actual administrative

568
00:21:37,039 --> 00:21:38,640
password so

569
00:21:38,640 --> 00:21:40,400
again

570
00:21:40,400 --> 00:21:41,360
this

571
00:21:41,360 --> 00:21:43,200
is something that an attacker could send

572
00:21:43,200 --> 00:21:46,159
to my device and get all all the data

573
00:21:46,159 --> 00:21:48,159
including the actual password and log in

574
00:21:48,159 --> 00:21:49,840
through the web interface

575
00:21:49,840 --> 00:21:52,080
and do whatever they want so that's an

576
00:21:52,080 --> 00:21:55,280
issue number one backdoor

577
00:21:57,600 --> 00:21:59,520
also it appears that

578
00:21:59,520 --> 00:22:01,600
some of the vendors used the same

579
00:22:01,600 --> 00:22:03,679
password for telnet

580
00:22:03,679 --> 00:22:05,679
as i later figured out

581
00:22:05,679 --> 00:22:08,320
um that's another issue another kind of

582
00:22:08,320 --> 00:22:10,240
like a backdoor okay

583
00:22:10,240 --> 00:22:14,320
let's rename uh this function

584
00:22:14,320 --> 00:22:16,320
so we can

585
00:22:16,320 --> 00:22:18,400
because we know that it

586
00:22:18,400 --> 00:22:20,799
takes care of authentication at least

587
00:22:20,799 --> 00:22:23,200
some of the authentication

588
00:22:23,200 --> 00:22:24,400
and see

589
00:22:24,400 --> 00:22:27,120
where it's called from

590
00:22:27,120 --> 00:22:28,559
so here you can see that it's called

591
00:22:28,559 --> 00:22:30,400
from this function and it's called twice

592
00:22:30,400 --> 00:22:33,200
from this one so let's double click here

593
00:22:33,200 --> 00:22:35,440
and

594
00:22:35,600 --> 00:22:38,080
this function is actually processing

595
00:22:38,080 --> 00:22:40,320
http request

596
00:22:40,320 --> 00:22:42,720
so i'm going to rename this to

597
00:22:42,720 --> 00:22:44,799
box process

598
00:22:44,799 --> 00:22:47,360
request

599
00:22:47,840 --> 00:22:50,880
this is not a very

600
00:22:50,880 --> 00:22:54,480
big function it's about 300 lines in

601
00:22:54,480 --> 00:22:57,679
this c code so but it's kind of critical

602
00:22:57,679 --> 00:22:59,520
right it's like

603
00:22:59,520 --> 00:23:02,640
whatever is dealing with http request

604
00:23:02,640 --> 00:23:04,880
and it's calling authentication when

605
00:23:04,880 --> 00:23:07,360
needed and that's other thing so i

606
00:23:07,360 --> 00:23:09,200
decided to just

607
00:23:09,200 --> 00:23:11,919
do a the complete code review

608
00:23:11,919 --> 00:23:14,720
for um for this code

609
00:23:14,720 --> 00:23:15,679
and i

610
00:23:15,679 --> 00:23:17,120
i as i was looking through the code

611
00:23:17,120 --> 00:23:18,960
trying to understand what exactly is

612
00:23:18,960 --> 00:23:23,039
happening i saw this big if statement

613
00:23:23,039 --> 00:23:25,679
which was comparing a variable against

614
00:23:25,679 --> 00:23:28,720
some of these strings

615
00:23:28,720 --> 00:23:30,640
and

616
00:23:30,640 --> 00:23:32,559
i followed the logic and i realized that

617
00:23:32,559 --> 00:23:34,000
if there is a match with one of the

618
00:23:34,000 --> 00:23:36,880
strings then the file

619
00:23:36,880 --> 00:23:39,679
that matches this pattern

620
00:23:39,679 --> 00:23:43,039
is can be served without authentication

621
00:23:43,039 --> 00:23:44,720
well

622
00:23:44,720 --> 00:23:46,320
that's okay it's not a big deal because

623
00:23:46,320 --> 00:23:48,400
all of these are static files and they

624
00:23:48,400 --> 00:23:50,559
don't have any sensitive information so

625
00:23:50,559 --> 00:23:52,320
it's okay to serve them

626
00:23:52,320 --> 00:23:54,320
uh to the requester without

627
00:23:54,320 --> 00:23:55,600
authentication

628
00:23:55,600 --> 00:23:57,279
so let's play around with this a little

629
00:23:57,279 --> 00:23:58,159
bit

630
00:23:58,159 --> 00:24:02,880
i'm gonna go to burp and send this

631
00:24:03,200 --> 00:24:06,159
not this one sorry but the other one

632
00:24:06,159 --> 00:24:08,880
the one with authentication

633
00:24:08,880 --> 00:24:10,799
to repeater

634
00:24:10,799 --> 00:24:13,120
i'm gonna remove all the unnecessary

635
00:24:13,120 --> 00:24:15,678
headers

636
00:24:17,520 --> 00:24:19,520
uh it works because it has authorization

637
00:24:19,520 --> 00:24:21,200
header now let me remove authorization

638
00:24:21,200 --> 00:24:22,960
header

639
00:24:22,960 --> 00:24:25,279
and now it fails but let me

640
00:24:25,279 --> 00:24:26,960
in the url

641
00:24:26,960 --> 00:24:28,320
specify

642
00:24:28,320 --> 00:24:29,120
uh

643
00:24:29,120 --> 00:24:32,400
type one of the html files that is on

644
00:24:32,400 --> 00:24:35,039
the device and now it returns that file

645
00:24:35,039 --> 00:24:37,279
to me because it matches

646
00:24:37,279 --> 00:24:38,799
one of those patterns

647
00:24:38,799 --> 00:24:40,720
again this is fine

648
00:24:40,720 --> 00:24:43,600
but when i look at the console here

649
00:24:43,600 --> 00:24:46,720
i i noticed that it had this double

650
00:24:46,720 --> 00:24:48,320
slashes which

651
00:24:48,320 --> 00:24:50,159
kind of suggests that the developer was

652
00:24:50,159 --> 00:24:52,559
just doing some string concatenation

653
00:24:52,559 --> 00:24:53,679
without

654
00:24:53,679 --> 00:24:54,799
any

655
00:24:54,799 --> 00:24:57,120
filtering or or checking or invalidation

656
00:24:57,120 --> 00:24:59,760
so i remove this slash and resend the

657
00:24:59,760 --> 00:25:00,720
request

658
00:25:00,720 --> 00:25:02,720
and now you see the slash is gone

659
00:25:02,720 --> 00:25:04,640
so now it's no longer double slash it's

660
00:25:04,640 --> 00:25:06,320
single slash

661
00:25:06,320 --> 00:25:09,200
okay if this is a string concatenation

662
00:25:09,200 --> 00:25:11,440
can we do something like this can we go

663
00:25:11,440 --> 00:25:14,320
one level up and then go down to the web

664
00:25:14,320 --> 00:25:16,080
sub directory

665
00:25:16,080 --> 00:25:18,400
yes we can and we can actually go

666
00:25:18,400 --> 00:25:22,000
all the way to the root directory

667
00:25:22,000 --> 00:25:24,400
and

668
00:25:24,799 --> 00:25:26,400
it still works so now we have the

669
00:25:26,400 --> 00:25:27,760
relative path

670
00:25:27,760 --> 00:25:30,320
with dot dot slash dot dot slash and we

671
00:25:30,320 --> 00:25:32,960
can retrieve any file from the system

672
00:25:32,960 --> 00:25:34,799
that matches

673
00:25:34,799 --> 00:25:36,240
one of those

674
00:25:36,240 --> 00:25:38,640
that has one of those extensions right

675
00:25:38,640 --> 00:25:40,960
we still cannot

676
00:25:40,960 --> 00:25:42,799
retrieve

677
00:25:42,799 --> 00:25:46,000
something like password file

678
00:25:46,559 --> 00:25:48,960
because it doesn't match

679
00:25:48,960 --> 00:25:50,080
okay

680
00:25:50,080 --> 00:25:53,199
but let's take a look

681
00:25:54,000 --> 00:25:55,360
what

682
00:25:55,360 --> 00:25:57,120
here one more time

683
00:25:57,120 --> 00:25:59,840
the developer designed it decided to use

684
00:25:59,840 --> 00:26:03,200
the method find of c plus plus string

685
00:26:03,200 --> 00:26:06,080
the method find looks for the substring

686
00:26:06,080 --> 00:26:08,480
anywhere in the string not just at the

687
00:26:08,480 --> 00:26:11,679
end of the string which means if one of

688
00:26:11,679 --> 00:26:14,240
these patterns appears anywhere in the

689
00:26:14,240 --> 00:26:15,279
path

690
00:26:15,279 --> 00:26:17,600
then the match

691
00:26:17,600 --> 00:26:19,919
would be then then we will have the

692
00:26:19,919 --> 00:26:22,240
match

693
00:26:22,640 --> 00:26:23,520
so

694
00:26:23,520 --> 00:26:24,480
for example

695
00:26:24,480 --> 00:26:27,919
if i put xml here

696
00:26:29,279 --> 00:26:31,279
it's it still doesn't work but i don't

697
00:26:31,279 --> 00:26:35,200
no longer get 401 unauthorized i get 404

698
00:26:35,200 --> 00:26:36,559
not found

699
00:26:36,559 --> 00:26:38,559
because this file does not exist of

700
00:26:38,559 --> 00:26:39,679
course

701
00:26:39,679 --> 00:26:41,919
but what if the

702
00:26:41,919 --> 00:26:44,799
this device had a path with one of these

703
00:26:44,799 --> 00:26:46,240
patterns

704
00:26:46,240 --> 00:26:49,279
um a directory with one of these uh

705
00:26:49,279 --> 00:26:52,640
extensions maybe in its name and

706
00:26:52,640 --> 00:26:55,360
apparently

707
00:26:56,400 --> 00:26:59,520
one of the vendors

708
00:27:00,240 --> 00:27:03,760
had it so i'm going to

709
00:27:04,320 --> 00:27:07,200
search for

710
00:27:07,200 --> 00:27:09,919
directory

711
00:27:10,000 --> 00:27:14,880
with the name that contains dot jpg

712
00:27:15,440 --> 00:27:18,640
and there is such directory

713
00:27:19,679 --> 00:27:23,039
you see it's a directory and now

714
00:27:23,039 --> 00:27:24,880
i can take this

715
00:27:24,880 --> 00:27:28,480
and i can build a relative path

716
00:27:28,480 --> 00:27:30,559
with dot dot slash

717
00:27:30,559 --> 00:27:34,600
to any file on the system

718
00:27:35,120 --> 00:27:38,240
right okay now you see where am i going

719
00:27:38,240 --> 00:27:42,399
if i copy this and put it in my http

720
00:27:42,399 --> 00:27:44,959
request

721
00:27:46,880 --> 00:27:48,559
drumroll

722
00:27:48,559 --> 00:27:50,960
boom i get the content of adc password

723
00:27:50,960 --> 00:27:52,320
file

724
00:27:52,320 --> 00:27:53,360
awesome

725
00:27:53,360 --> 00:27:55,440
now i can read any file on the system

726
00:27:55,440 --> 00:27:58,480
without any authentication through this

727
00:27:58,480 --> 00:28:00,080
http request

728
00:28:00,080 --> 00:28:02,080
and a more interesting file is called

729
00:28:02,080 --> 00:28:05,039
box.ini

730
00:28:05,120 --> 00:28:08,240
it has some settings including

731
00:28:08,240 --> 00:28:10,880
the administrative password

732
00:28:10,880 --> 00:28:13,120
all right

733
00:28:13,120 --> 00:28:16,720
that's a pretty big issue

734
00:28:16,720 --> 00:28:20,399
okay what else is going on here

735
00:28:20,399 --> 00:28:23,120
um upon further review i noticed that

736
00:28:23,120 --> 00:28:25,279
this function has special handling for

737
00:28:25,279 --> 00:28:27,039
multi-part form data

738
00:28:27,039 --> 00:28:28,399
and where is

739
00:28:28,399 --> 00:28:31,600
and and again um as i was analyzing

740
00:28:31,600 --> 00:28:33,760
logic it took me quite quite a bit of

741
00:28:33,760 --> 00:28:35,360
time um

742
00:28:35,360 --> 00:28:38,240
not just a couple of minutes but i

743
00:28:38,240 --> 00:28:41,120
i realized that uh if

744
00:28:41,120 --> 00:28:42,640
the request has

745
00:28:42,640 --> 00:28:44,880
a content type of multi multi-part form

746
00:28:44,880 --> 00:28:46,000
data

747
00:28:46,000 --> 00:28:47,120
it is

748
00:28:47,120 --> 00:28:49,600
served without authentication again

749
00:28:49,600 --> 00:28:52,880
interesting so where is this multi-part

750
00:28:52,880 --> 00:28:55,039
from data is used

751
00:28:55,039 --> 00:28:57,440
there are two functions on the device

752
00:28:57,440 --> 00:29:00,159
that use that

753
00:29:00,799 --> 00:29:04,000
the first one is logo upload

754
00:29:04,000 --> 00:29:07,600
i can upload an image

755
00:29:10,799 --> 00:29:13,440
that will be overlaid on top of my video

756
00:29:13,440 --> 00:29:14,799
stream

757
00:29:14,799 --> 00:29:16,960
and if i look at the corresponding

758
00:29:16,960 --> 00:29:19,440
request

759
00:29:21,919 --> 00:29:24,399
let me again remove all the unnecessary

760
00:29:24,399 --> 00:29:26,720
headers

761
00:29:26,720 --> 00:29:30,559
and remove the authorization header too

762
00:29:33,120 --> 00:29:34,720
when i send it

763
00:29:34,720 --> 00:29:37,279
it's still it still succeeds okay so

764
00:29:37,279 --> 00:29:39,440
that's that's that's an issue too right

765
00:29:39,440 --> 00:29:41,840
so anybody can upload logo that will be

766
00:29:41,840 --> 00:29:44,000
overlaid on top of the video stream

767
00:29:44,000 --> 00:29:47,520
um well it's an issue but not a huge one

768
00:29:47,520 --> 00:29:49,039
so i mentioned there are two functions

769
00:29:49,039 --> 00:29:50,799
the second function that's using the

770
00:29:50,799 --> 00:29:52,799
format load

771
00:29:52,799 --> 00:29:54,559
and you won't believe it

772
00:29:54,559 --> 00:29:55,840
but it's

773
00:29:55,840 --> 00:29:59,120
the firmware update

774
00:29:59,120 --> 00:30:00,240
um

775
00:30:00,240 --> 00:30:02,720
basically

776
00:30:02,720 --> 00:30:05,039
you can upload firmware without

777
00:30:05,039 --> 00:30:06,799
authentication too

778
00:30:06,799 --> 00:30:09,120
so i'm i just gave it a very small file

779
00:30:09,120 --> 00:30:11,200
so i don't damage the device

780
00:30:11,200 --> 00:30:12,880
it's not going to work but the post

781
00:30:12,880 --> 00:30:15,120
request was successful

782
00:30:15,120 --> 00:30:16,720
and i'm going to send it to repeater

783
00:30:16,720 --> 00:30:20,080
again i'm going i'm going to

784
00:30:20,080 --> 00:30:22,960
delete all the unnecessary headers

785
00:30:22,960 --> 00:30:26,640
including the authorization header

786
00:30:26,640 --> 00:30:29,039
and send it again

787
00:30:29,039 --> 00:30:30,960
of course this is not a valid firmware

788
00:30:30,960 --> 00:30:31,679
but

789
00:30:31,679 --> 00:30:33,279
the

790
00:30:33,279 --> 00:30:35,039
uh this operation

791
00:30:35,039 --> 00:30:36,960
was successful

792
00:30:36,960 --> 00:30:39,039
now this is a huge issue

793
00:30:39,039 --> 00:30:42,080
that means an attacker can push

794
00:30:42,080 --> 00:30:43,840
can build their own firmware push it to

795
00:30:43,840 --> 00:30:45,039
your device

796
00:30:45,039 --> 00:30:47,279
and completely own you

797
00:30:47,279 --> 00:30:49,360
the only problem is

798
00:30:49,360 --> 00:30:51,919
this operation requires administrator to

799
00:30:51,919 --> 00:30:54,480
reboot the system

800
00:30:54,480 --> 00:30:56,720
and

801
00:30:56,720 --> 00:30:59,760
so the attacker cannot

802
00:30:59,760 --> 00:31:01,600
execute code at will they'll have to

803
00:31:01,600 --> 00:31:04,240
wait until the device is rebooted now

804
00:31:04,240 --> 00:31:06,240
the question is is there some other

805
00:31:06,240 --> 00:31:07,519
upload

806
00:31:07,519 --> 00:31:10,080
that will have the code executed right

807
00:31:10,080 --> 00:31:12,240
away without waiting

808
00:31:12,240 --> 00:31:14,960
and the answer is yes

809
00:31:14,960 --> 00:31:18,679
so um

810
00:31:18,720 --> 00:31:21,360
i am going to look for i'm going to use

811
00:31:21,360 --> 00:31:22,480
my

812
00:31:22,480 --> 00:31:24,960
favorite

813
00:31:25,120 --> 00:31:27,120
gedra string search and look for this

814
00:31:27,120 --> 00:31:28,240
string

815
00:31:28,240 --> 00:31:31,360
i want to see where the file upload is

816
00:31:31,360 --> 00:31:33,840
handled

817
00:31:33,919 --> 00:31:36,399
here it is

818
00:31:37,600 --> 00:31:40,879
it's in this one function

819
00:31:41,760 --> 00:31:45,600
and i'm going to rename this function to

820
00:31:45,600 --> 00:31:48,480
box upload

821
00:31:49,440 --> 00:31:51,919
all right

822
00:31:54,080 --> 00:31:57,120
you can see that

823
00:31:58,080 --> 00:32:00,080
here is our familiar firmware update

824
00:32:00,080 --> 00:32:00,960
file

825
00:32:00,960 --> 00:32:02,960
but when i scroll down i can also see

826
00:32:02,960 --> 00:32:05,279
some some other familiar names like load

827
00:32:05,279 --> 00:32:08,240
and logo and box.n a

828
00:32:08,240 --> 00:32:09,919
and

829
00:32:09,919 --> 00:32:11,840
the other thing i saw was this uk the

830
00:32:11,840 --> 00:32:14,399
car and i have no idea what this is it

831
00:32:14,399 --> 00:32:16,640
started the documentation but i

832
00:32:16,640 --> 00:32:19,120
i guess it's maybe maybe it's a kernel

833
00:32:19,120 --> 00:32:23,200
update so um i searched for this one in

834
00:32:23,200 --> 00:32:27,360
the binary like where else do we use it

835
00:32:27,360 --> 00:32:30,559
and i found it being used

836
00:32:30,559 --> 00:32:33,120
right here

837
00:32:33,279 --> 00:32:36,000
and now if you read this code

838
00:32:36,000 --> 00:32:39,039
you'll be surprised so we basically

839
00:32:39,039 --> 00:32:41,360
unpack this rar file

840
00:32:41,360 --> 00:32:43,760
we change all files to the executables

841
00:32:43,760 --> 00:32:46,720
and then we execute uk.txt

842
00:32:46,720 --> 00:32:48,559
as a shell script

843
00:32:48,559 --> 00:32:52,240
so if this uk crowd has uk.txt

844
00:32:52,240 --> 00:32:53,919
it will be executed right away right

845
00:32:53,919 --> 00:32:55,600
after the upload

846
00:32:55,600 --> 00:32:57,840
and that's exactly what i did

847
00:32:57,840 --> 00:33:01,279
so i have the uk.txt with one command

848
00:33:01,279 --> 00:33:02,480
this command

849
00:33:02,480 --> 00:33:04,720
starts netcat by the way netcat is

850
00:33:04,720 --> 00:33:06,720
present on the device which is very

851
00:33:06,720 --> 00:33:08,559
convenient

852
00:33:08,559 --> 00:33:11,919
and um i can get a reverse shell

853
00:33:11,919 --> 00:33:16,480
now i need to package it to uk.rar

854
00:33:16,480 --> 00:33:18,880
and now i'm going to do

855
00:33:18,880 --> 00:33:21,279
let's be cool and not use the browser or

856
00:33:21,279 --> 00:33:24,240
burp but use a cur command so this curl

857
00:33:24,240 --> 00:33:25,440
command

858
00:33:25,440 --> 00:33:26,240
is

859
00:33:26,240 --> 00:33:28,799
um send in a post request

860
00:33:28,799 --> 00:33:29,919
with

861
00:33:29,919 --> 00:33:31,600
with um

862
00:33:31,600 --> 00:33:32,640
form

863
00:33:32,640 --> 00:33:35,120
uh multi-part from the form data with a

864
00:33:35,120 --> 00:33:37,760
single parameter with the content of

865
00:33:37,760 --> 00:33:40,320
this file

866
00:33:40,799 --> 00:33:42,799
and now if i look at the processes on

867
00:33:42,799 --> 00:33:45,360
the device the netcat is there waiting

868
00:33:45,360 --> 00:33:48,719
for me to connect it

869
00:33:50,840 --> 00:33:52,640
and

870
00:33:52,640 --> 00:33:55,039
completely own

871
00:33:55,039 --> 00:33:56,320
the device

872
00:33:56,320 --> 00:33:58,639
great

873
00:33:58,720 --> 00:34:00,960
so we have

874
00:34:00,960 --> 00:34:03,200
remote core execution

875
00:34:03,200 --> 00:34:06,600
of high severity

876
00:34:06,799 --> 00:34:08,719
but this is not all

877
00:34:08,719 --> 00:34:10,480
we also

878
00:34:10,480 --> 00:34:14,399
can see that this file upload function

879
00:34:14,399 --> 00:34:17,760
has special handling for png files

880
00:34:17,760 --> 00:34:20,960
if you upload that logo it is converted

881
00:34:20,960 --> 00:34:23,520
to bitmap using an external utility

882
00:34:23,520 --> 00:34:25,918
called png to bmp

883
00:34:25,918 --> 00:34:28,159
which has two parameters i guess input

884
00:34:28,159 --> 00:34:29,839
file and output file and one of these

885
00:34:29,839 --> 00:34:32,159
parameters is completely controlled by

886
00:34:32,159 --> 00:34:33,280
the user

887
00:34:33,280 --> 00:34:35,918
so when you do your logo upload you

888
00:34:35,918 --> 00:34:38,079
specify the file name here

889
00:34:38,079 --> 00:34:40,800
and i figured that

890
00:34:40,800 --> 00:34:43,040
by trial and error that it has to begin

891
00:34:43,040 --> 00:34:44,399
with logo

892
00:34:44,399 --> 00:34:47,119
and it has to end with png but it can

893
00:34:47,119 --> 00:34:48,719
have anything

894
00:34:48,719 --> 00:34:50,800
in between

895
00:34:50,800 --> 00:34:55,918
so uh my device rebooted because i

896
00:34:55,918 --> 00:34:57,920
did that netcat thing

897
00:34:57,920 --> 00:34:59,760
so i need to

898
00:34:59,760 --> 00:35:03,400
telnet here again

899
00:35:04,079 --> 00:35:07,599
and restart the program

900
00:35:07,920 --> 00:35:09,359
so

901
00:35:09,359 --> 00:35:11,839
like i said i can have anything between

902
00:35:11,839 --> 00:35:15,520
logo and png including semicolon

903
00:35:15,520 --> 00:35:18,240
and the command

904
00:35:18,480 --> 00:35:20,880
if i send this

905
00:35:20,880 --> 00:35:23,359
the console reports few issues to me of

906
00:35:23,359 --> 00:35:24,160
course

907
00:35:24,160 --> 00:35:25,760
full is not found it's not a valid

908
00:35:25,760 --> 00:35:26,720
command

909
00:35:26,720 --> 00:35:28,560
but what we know

910
00:35:28,560 --> 00:35:31,599
is found on the device is netcat

911
00:35:31,599 --> 00:35:36,240
so i can put my netcat command here

912
00:35:36,240 --> 00:35:39,279
send it to the device

913
00:35:39,839 --> 00:35:40,960
and

914
00:35:40,960 --> 00:35:44,480
get my reverse shell

915
00:35:44,480 --> 00:35:47,280
as you can see

916
00:35:48,079 --> 00:35:50,800
this is what it was trying to execute

917
00:35:50,800 --> 00:35:53,839
with my injection

918
00:35:54,000 --> 00:35:56,480
all right

919
00:35:56,800 --> 00:35:58,720
so

920
00:35:58,720 --> 00:36:02,480
uh a bunch of high severity issues

921
00:36:02,480 --> 00:36:04,400
but there was one particular class that

922
00:36:04,400 --> 00:36:06,320
i have not hit and i wanted to hunt for

923
00:36:06,320 --> 00:36:08,800
that specific issue because

924
00:36:08,800 --> 00:36:12,079
this program is written in c plus plus

925
00:36:12,079 --> 00:36:14,240
and unfortunately the code quality is

926
00:36:14,240 --> 00:36:16,560
not that great so i thought it should at

927
00:36:16,560 --> 00:36:19,920
least have at least one buffer overflow

928
00:36:19,920 --> 00:36:22,400
so i started looking for calls like s

929
00:36:22,400 --> 00:36:24,000
print f that

930
00:36:24,000 --> 00:36:25,520
take

931
00:36:25,520 --> 00:36:27,440
input of format string and some

932
00:36:27,440 --> 00:36:30,000
parameters and try to put the uh put the

933
00:36:30,000 --> 00:36:35,040
result into a buffer and i found several

934
00:36:35,040 --> 00:36:38,640
places where it is not used properly

935
00:36:38,640 --> 00:36:40,800
the long story short here is the

936
00:36:40,800 --> 00:36:42,079
function

937
00:36:42,079 --> 00:36:44,160
one of those functions that doesn't do

938
00:36:44,160 --> 00:36:47,280
it correctly so it has the format string

939
00:36:47,280 --> 00:36:48,240
and

940
00:36:48,240 --> 00:36:50,320
this this variable uh this is actually a

941
00:36:50,320 --> 00:36:53,119
buffer on the stack of two kilobytes

942
00:36:53,119 --> 00:36:55,359
that receives the

943
00:36:55,359 --> 00:36:57,920
result of s printf

944
00:36:57,920 --> 00:37:00,720
apparently this parameter right here

945
00:37:00,720 --> 00:37:03,839
is fully controlled by the user rtsp is

946
00:37:03,839 --> 00:37:06,079
a streaming protocol that this device

947
00:37:06,079 --> 00:37:07,280
supports

948
00:37:07,280 --> 00:37:09,280
and it

949
00:37:09,280 --> 00:37:11,760
it's um

950
00:37:11,760 --> 00:37:14,079
anybody can just connect to this device

951
00:37:14,079 --> 00:37:16,880
and and watch the streaming from it

952
00:37:16,880 --> 00:37:18,960
so

953
00:37:18,960 --> 00:37:22,359
here is my

954
00:37:22,480 --> 00:37:23,440
um

955
00:37:23,440 --> 00:37:25,359
payload

956
00:37:25,359 --> 00:37:28,480
i send it rtsd command and i

957
00:37:28,480 --> 00:37:31,200
put this csec value which is then

958
00:37:31,200 --> 00:37:33,760
reflected which is then processed

959
00:37:33,760 --> 00:37:34,880
and

960
00:37:34,880 --> 00:37:37,359
this logic puts it back into this buffer

961
00:37:37,359 --> 00:37:39,680
and tries to send it back to me

962
00:37:39,680 --> 00:37:42,240
so if i send it

963
00:37:42,240 --> 00:37:45,599
to this port on

964
00:37:45,599 --> 00:37:46,800
the device

965
00:37:46,800 --> 00:37:49,760
port 554

966
00:37:49,760 --> 00:37:52,000
it the program crashes right away

967
00:37:52,000 --> 00:37:53,599
because it's a buffer overflow now the

968
00:37:53,599 --> 00:37:55,760
big question is can we get code

969
00:37:55,760 --> 00:37:58,240
execution so i spent a couple of nights

970
00:37:58,240 --> 00:38:00,560
trying to figure that out and i came to

971
00:38:00,560 --> 00:38:02,640
the conclusion that it was not possible

972
00:38:02,640 --> 00:38:05,680
because of aslr

973
00:38:05,680 --> 00:38:07,520
but you know

974
00:38:07,520 --> 00:38:11,119
this is a denial of service and the

975
00:38:11,119 --> 00:38:13,680
the whole purpose of this device is to

976
00:38:13,680 --> 00:38:17,359
serve video reliably if an attacker can

977
00:38:17,359 --> 00:38:18,640
send

978
00:38:18,640 --> 00:38:20,880
a very simple command to the device and

979
00:38:20,880 --> 00:38:21,920
crash

980
00:38:21,920 --> 00:38:25,839
crash it then it's a big issue so

981
00:38:25,839 --> 00:38:26,720
even

982
00:38:26,720 --> 00:38:29,200
if it's not remote code execution

983
00:38:29,200 --> 00:38:31,520
the denial of service in this case is a

984
00:38:31,520 --> 00:38:33,839
big issue

985
00:38:33,839 --> 00:38:36,320
all right

986
00:38:36,480 --> 00:38:37,760
i hope you

987
00:38:37,760 --> 00:38:39,599
were all able to

988
00:38:39,599 --> 00:38:41,440
follow this

989
00:38:41,440 --> 00:38:42,880
now i want to put all these

990
00:38:42,880 --> 00:38:44,400
vulnerabilities in three different

991
00:38:44,400 --> 00:38:46,880
buckets the red bucket contains the

992
00:38:46,880 --> 00:38:50,240
intentional issues so somebody decided

993
00:38:50,240 --> 00:38:51,839
to leave a back door and somebody

994
00:38:51,839 --> 00:38:54,880
decided to leave telnet open this is red

995
00:38:54,880 --> 00:38:56,640
this is unacceptable

996
00:38:56,640 --> 00:38:58,320
now the green

997
00:38:58,320 --> 00:39:01,280
bucket is um i believe are coding

998
00:39:01,280 --> 00:39:02,400
mistakes

999
00:39:02,400 --> 00:39:04,560
you know we all make mistakes and we

1000
00:39:04,560 --> 00:39:07,599
need to learn and move on

1001
00:39:07,599 --> 00:39:10,640
but the unauthenticated firmware upgrade

1002
00:39:10,640 --> 00:39:13,200
i am not sure about this one i like to

1003
00:39:13,200 --> 00:39:15,280
think that it's a coding mistake but

1004
00:39:15,280 --> 00:39:17,760
something tells me that this one was

1005
00:39:17,760 --> 00:39:20,320
intentional as well maybe so vendors

1006
00:39:20,320 --> 00:39:22,560
could push the firmware to the devices

1007
00:39:22,560 --> 00:39:24,560
without credentials

1008
00:39:24,560 --> 00:39:26,720
so i have no idea

1009
00:39:26,720 --> 00:39:28,560
but these devices are behind net and

1010
00:39:28,560 --> 00:39:30,480
firewall correct

1011
00:39:30,480 --> 00:39:33,760
well in my case it was but showdown

1012
00:39:33,760 --> 00:39:35,920
finds over a thousand of these devices

1013
00:39:35,920 --> 00:39:38,079
on the open internet

1014
00:39:38,079 --> 00:39:40,079
well this is not a huge number but i

1015
00:39:40,079 --> 00:39:41,839
think it's significant and many of these

1016
00:39:41,839 --> 00:39:44,480
devices can still be vulnerable

1017
00:39:44,480 --> 00:39:46,960
so i decided to responsibly disclose my

1018
00:39:46,960 --> 00:39:48,960
findings to the vendors

1019
00:39:48,960 --> 00:39:51,200
and i contacted tried to contact some of

1020
00:39:51,200 --> 00:39:54,000
them and i got no response from some of

1021
00:39:54,000 --> 00:39:55,839
them i got automated response from

1022
00:39:55,839 --> 00:39:56,960
others

1023
00:39:56,960 --> 00:39:59,920
i got some human responses not

1024
00:39:59,920 --> 00:40:01,920
understanding what i'm saying and i also

1025
00:40:01,920 --> 00:40:03,680
got some threats

1026
00:40:03,680 --> 00:40:05,520
somebody was thinking that i was trying

1027
00:40:05,520 --> 00:40:08,319
to damage their reputation by doing this

1028
00:40:08,319 --> 00:40:09,839
and

1029
00:40:09,839 --> 00:40:10,640
they

1030
00:40:10,640 --> 00:40:12,720
mentioned legal action against me and

1031
00:40:12,720 --> 00:40:14,079
that was not something that i was

1032
00:40:14,079 --> 00:40:15,599
interested in

1033
00:40:15,599 --> 00:40:17,839
so um i talked to one of my

1034
00:40:17,839 --> 00:40:20,480
ex-co-workers who had experience with

1035
00:40:20,480 --> 00:40:22,880
responsible disclosure and he suggested

1036
00:40:22,880 --> 00:40:26,319
i reach out to cert coordination center

1037
00:40:26,319 --> 00:40:29,440
at carnegie mellon so these guys help

1038
00:40:29,440 --> 00:40:31,760
security researchers like me

1039
00:40:31,760 --> 00:40:34,240
contact the vendors do

1040
00:40:34,240 --> 00:40:36,560
a lot of leg work

1041
00:40:36,560 --> 00:40:40,319
and help with um

1042
00:40:40,480 --> 00:40:41,920
that with the responsible disclosure

1043
00:40:41,920 --> 00:40:44,319
process so i i'm super happy i work with

1044
00:40:44,319 --> 00:40:47,040
them highly recommend them in total i

1045
00:40:47,040 --> 00:40:49,200
identified 11 vendors

1046
00:40:49,200 --> 00:40:51,119
three of them i knew had issues because

1047
00:40:51,119 --> 00:40:52,960
i had those devices

1048
00:40:52,960 --> 00:40:56,079
um and eight others were most likely had

1049
00:40:56,079 --> 00:40:58,400
the issue based on what i saw on the

1050
00:40:58,400 --> 00:41:00,560
internet uh like their firmware updates

1051
00:41:00,560 --> 00:41:02,000
and everything

1052
00:41:02,000 --> 00:41:05,839
only two vendors responded to

1053
00:41:05,839 --> 00:41:09,680
and myself that's really sad

1054
00:41:09,680 --> 00:41:11,200
meanwhile i

1055
00:41:11,200 --> 00:41:12,720
submitted

1056
00:41:12,720 --> 00:41:13,680
a

1057
00:41:13,680 --> 00:41:19,200
cve request and got six new cds assigned

1058
00:41:19,599 --> 00:41:22,560
so one day this got published two days

1059
00:41:22,560 --> 00:41:24,880
later huawei came up with this public

1060
00:41:24,880 --> 00:41:26,800
statement saying

1061
00:41:26,800 --> 00:41:29,440
yes uh we we saw the reports of these

1062
00:41:29,440 --> 00:41:30,640
issues

1063
00:41:30,640 --> 00:41:32,960
we make the ships and sdks but the

1064
00:41:32,960 --> 00:41:36,079
software that had the vulnerabilities is

1065
00:41:36,079 --> 00:41:38,560
built by downstream vendor

1066
00:41:38,560 --> 00:41:41,680
which huawei has no affiliation with

1067
00:41:41,680 --> 00:41:44,079
meanwhile the register picked up this

1068
00:41:44,079 --> 00:41:45,359
story

1069
00:41:45,359 --> 00:41:47,440
and several days later one of the

1070
00:41:47,440 --> 00:41:48,680
vendors called

1071
00:41:48,680 --> 00:41:50,640
opry

1072
00:41:50,640 --> 00:41:52,960
issued the security advisory

1073
00:41:52,960 --> 00:41:55,680
and i'd like you to

1074
00:41:55,680 --> 00:41:59,839
note the developer name the developer is

1075
00:41:59,839 --> 00:42:02,400
called new orange and now that backdoor

1076
00:42:02,400 --> 00:42:05,440
password makes sense

1077
00:42:05,599 --> 00:42:07,800
and i also

1078
00:42:07,800 --> 00:42:09,280
[Music]

1079
00:42:09,280 --> 00:42:11,040
wanted to highlight this

1080
00:42:11,040 --> 00:42:12,960
they call the back door maintenance

1081
00:42:12,960 --> 00:42:14,480
password

1082
00:42:14,480 --> 00:42:16,240
first of all they didn't even spell it

1083
00:42:16,240 --> 00:42:18,319
correctly but

1084
00:42:18,319 --> 00:42:19,920
i i disagree with this it's not

1085
00:42:19,920 --> 00:42:21,440
maintenance it's backdoor

1086
00:42:21,440 --> 00:42:24,079
anyway fast forward 10 months

1087
00:42:24,079 --> 00:42:26,319
and i decided to try

1088
00:42:26,319 --> 00:42:28,319
some of these devices again i saw i went

1089
00:42:28,319 --> 00:42:30,400
ahead and borrowed few of them

1090
00:42:30,400 --> 00:42:33,440
and to see whether

1091
00:42:33,440 --> 00:42:34,640
there was any

1092
00:42:34,640 --> 00:42:36,000
fixes

1093
00:42:36,000 --> 00:42:37,920
or improvements

1094
00:42:37,920 --> 00:42:39,839
so one of the vendors

1095
00:42:39,839 --> 00:42:42,160
had telnet off great

1096
00:42:42,160 --> 00:42:44,319
but the application was not fixed so all

1097
00:42:44,319 --> 00:42:47,200
of these path reversal and remote code

1098
00:42:47,200 --> 00:42:49,280
executions were still there

1099
00:42:49,280 --> 00:42:51,680
a couple other vendors

1100
00:42:51,680 --> 00:42:54,079
had application completely taken care of

1101
00:42:54,079 --> 00:42:56,319
so i could no longer reproduce my

1102
00:42:56,319 --> 00:42:58,480
the vulnerabilities that i found but the

1103
00:42:58,480 --> 00:43:00,640
telnet was still there with some trivial

1104
00:43:00,640 --> 00:43:02,240
passwords

1105
00:43:02,240 --> 00:43:03,599
okay

1106
00:43:03,599 --> 00:43:05,920
others i am not sure i looked like at

1107
00:43:05,920 --> 00:43:08,720
firmware upgrades and some of them i saw

1108
00:43:08,720 --> 00:43:10,720
recent updates and i like to believe

1109
00:43:10,720 --> 00:43:13,119
that they were addressed

1110
00:43:13,119 --> 00:43:14,000
um

1111
00:43:14,000 --> 00:43:16,560
but in general this is a very difficult

1112
00:43:16,560 --> 00:43:18,720
issue you know it's a supply chain which

1113
00:43:18,720 --> 00:43:20,800
is complicated and lots of different

1114
00:43:20,800 --> 00:43:22,960
vendors lots of different names and

1115
00:43:22,960 --> 00:43:24,079
there's probably not a very good

1116
00:43:24,079 --> 00:43:26,880
communication between them so and there

1117
00:43:26,880 --> 00:43:28,640
is no way for them to notify their

1118
00:43:28,640 --> 00:43:30,400
customers like me

1119
00:43:30,400 --> 00:43:32,720
like if i just buy this device install

1120
00:43:32,720 --> 00:43:34,160
it

1121
00:43:34,160 --> 00:43:36,480
they they have no way of telling me hey

1122
00:43:36,480 --> 00:43:38,079
we have a firmware update you need to do

1123
00:43:38,079 --> 00:43:39,680
it

1124
00:43:39,680 --> 00:43:42,400
so it's a difficult issue

1125
00:43:42,400 --> 00:43:43,680
okay

1126
00:43:43,680 --> 00:43:45,680
just a few things i want you to take

1127
00:43:45,680 --> 00:43:48,000
away from this presentation

1128
00:43:48,000 --> 00:43:50,480
iot devices are computers and these

1129
00:43:50,480 --> 00:43:53,839
computers get more powerful every day

1130
00:43:53,839 --> 00:43:56,640
and all computers these days run

1131
00:43:56,640 --> 00:43:58,560
some kind of software

1132
00:43:58,560 --> 00:44:01,280
that we may call applications

1133
00:44:01,280 --> 00:44:03,520
and we as application security

1134
00:44:03,520 --> 00:44:06,160
professionals know how to find

1135
00:44:06,160 --> 00:44:09,200
problems and secure applications

1136
00:44:09,200 --> 00:44:10,319
so let's

1137
00:44:10,319 --> 00:44:11,440
do it

1138
00:44:11,440 --> 00:44:14,480
because remember this is the reality

1139
00:44:14,480 --> 00:44:16,400
right

1140
00:44:16,400 --> 00:44:19,440
okay you if you want to read more i

1141
00:44:19,440 --> 00:44:22,960
published a detailed write-up on my blog

1142
00:44:22,960 --> 00:44:25,200
and i also published some exploit

1143
00:44:25,200 --> 00:44:27,920
scripts so if you doing pen test or come

1144
00:44:27,920 --> 00:44:29,359
across one of these devices you want to

1145
00:44:29,359 --> 00:44:31,359
quickly check whether they vulnerable

1146
00:44:31,359 --> 00:44:32,319
you can

1147
00:44:32,319 --> 00:44:35,280
try those scripts and please contact me

1148
00:44:35,280 --> 00:44:38,160
i i'd love to hear from you and

1149
00:44:38,160 --> 00:44:40,720
i wish you good luck and uh

1150
00:44:40,720 --> 00:44:42,800
thank you for attending this talk

1151
00:44:42,800 --> 00:44:45,200
and i guess we have time for questions

1152
00:44:45,200 --> 00:44:47,839
and answers

