1
00:00:01,420 --> 00:00:05,630
[Music]

2
00:00:05,680 --> 00:00:07,279
let's get to work now

3
00:00:07,279 --> 00:00:09,920
traditionally keynote speeches are about

4
00:00:09,920 --> 00:00:11,599
trends in the industry and i have

5
00:00:11,599 --> 00:00:13,679
nothing to say about that i don't know

6
00:00:13,679 --> 00:00:15,519
but what i talk about is technical

7
00:00:15,519 --> 00:00:17,760
things to try to add value to you as a

8
00:00:17,760 --> 00:00:19,920
professional to help you understand

9
00:00:19,920 --> 00:00:22,720
these nitty gritty security issues in a

10
00:00:22,720 --> 00:00:25,039
more in a more in-depth way and my

11
00:00:25,039 --> 00:00:26,880
personal mission is to make sure that

12
00:00:26,880 --> 00:00:29,840
all of us can communicate these issues

13
00:00:29,840 --> 00:00:32,640
well to software developers because

14
00:00:32,640 --> 00:00:34,320
we're not going to solve security

15
00:00:34,320 --> 00:00:36,480
problems by testing we're not going to

16
00:00:36,480 --> 00:00:38,480
solve security threat problems by threat

17
00:00:38,480 --> 00:00:40,480
modeling we're going to solve problems

18
00:00:40,480 --> 00:00:43,440
by enabling developers is my opinion we

19
00:00:43,440 --> 00:00:45,680
want to teach developers to threat model

20
00:00:45,680 --> 00:00:48,000
and teach developers to understand how

21
00:00:48,000 --> 00:00:50,640
to write secure code now cross-site

22
00:00:50,640 --> 00:00:53,680
request forgery is no longer a part of

23
00:00:53,680 --> 00:00:55,520
the oauth top 10 and it's kind of

24
00:00:55,520 --> 00:00:58,320
mislabeled in asvs as an access control

25
00:00:58,320 --> 00:01:01,039
problem and with the advent of new

26
00:01:01,039 --> 00:01:03,520
standards to address request forgery

27
00:01:03,520 --> 00:01:05,680
it's something i see we're talking about

28
00:01:05,680 --> 00:01:07,680
less so i want to talk about it because

29
00:01:07,680 --> 00:01:09,680
i still think it's a really important

30
00:01:09,680 --> 00:01:11,920
problem and i've watched a couple of my

31
00:01:11,920 --> 00:01:13,920
customers get hit by cross-site request

32
00:01:13,920 --> 00:01:15,840
forgery in a way that was really

33
00:01:15,840 --> 00:01:17,600
damaging so in my world it's still

34
00:01:17,600 --> 00:01:19,840
important that we get this right i think

35
00:01:19,840 --> 00:01:22,400
it's really fun to talk about let's do

36
00:01:22,400 --> 00:01:25,040
it my name is jim manico i'm a

37
00:01:25,040 --> 00:01:27,280
application security instructor and the

38
00:01:27,280 --> 00:01:30,000
founder of manaco.com we teach

39
00:01:30,000 --> 00:01:31,920
developers to write secure code as our

40
00:01:31,920 --> 00:01:33,759
main mission i've been a former board

41
00:01:33,759 --> 00:01:36,000
member at owasp i manage

42
00:01:36,000 --> 00:01:39,200
i co-manage the asvs and the cheat sheet

43
00:01:39,200 --> 00:01:42,640
series asvs is with elar lang myself

44
00:01:42,640 --> 00:01:45,280
daniel cuthbert and josh grossman but i

45
00:01:45,280 --> 00:01:48,000
manage the cheat sheet series with jacob

46
00:01:48,000 --> 00:01:50,079
markowski and

47
00:01:50,079 --> 00:01:52,880
it is a joy to work on these projects it

48
00:01:52,880 --> 00:01:54,720
really is i learn a lot myself and i

49
00:01:54,720 --> 00:01:57,360
work with outstanding people who are

50
00:01:57,360 --> 00:01:59,520
passionate about application security

51
00:01:59,520 --> 00:02:01,439
and that's my joy i've been developing

52
00:02:01,439 --> 00:02:04,240
software for about 25 years now and i

53
00:02:04,240 --> 00:02:05,759
authored an older book on web security

54
00:02:05,759 --> 00:02:07,520
who cares let's get to work don't hack

55
00:02:07,520 --> 00:02:08,720
without legal permission yeah that's

56
00:02:08,720 --> 00:02:10,878
right so what is request forgery the

57
00:02:10,878 --> 00:02:12,720
origin there's two requests forgeries

58
00:02:12,720 --> 00:02:14,080
we're going to talk about

59
00:02:14,080 --> 00:02:16,400
cross site request forgery

60
00:02:16,400 --> 00:02:17,280
and

61
00:02:17,280 --> 00:02:20,480
server side request forgery

62
00:02:20,480 --> 00:02:22,400
are are the two forgery types we care

63
00:02:22,400 --> 00:02:23,920
about today let's look at crosstalk

64
00:02:23,920 --> 00:02:26,480
request forgery first imagine i'm logged

65
00:02:26,480 --> 00:02:28,800
into the bank and i go i visit some

66
00:02:28,800 --> 00:02:32,239
attacker website they can drop html and

67
00:02:32,239 --> 00:02:35,120
javascript into my browser that forces

68
00:02:35,120 --> 00:02:36,879
me to make a request to the bank

69
00:02:36,879 --> 00:02:39,040
including my session cookie if i'm

70
00:02:39,040 --> 00:02:40,080
logged in

71
00:02:40,080 --> 00:02:41,040
now

72
00:02:41,040 --> 00:02:44,480
traditionally on the web older browsers

73
00:02:44,480 --> 00:02:47,599
they don't care what page you're on

74
00:02:47,599 --> 00:02:49,840
when you initiate the request they'll

75
00:02:49,840 --> 00:02:52,319
just let the request go and include the

76
00:02:52,319 --> 00:02:54,560
cookie automatically if there is one for

77
00:02:54,560 --> 00:02:57,599
that domain so so basically i can host a

78
00:02:57,599 --> 00:03:00,720
request on an evil website so on someone

79
00:03:00,720 --> 00:03:03,440
who's logged into the bank visits my

80
00:03:03,440 --> 00:03:07,120
evil website i give them a web page that

81
00:03:07,120 --> 00:03:09,840
forces them to make an authenticated

82
00:03:09,840 --> 00:03:12,000
request to the bank to transfer money or

83
00:03:12,000 --> 00:03:14,319
similar this is a big problem this

84
00:03:14,319 --> 00:03:17,440
literally undermines the security of the

85
00:03:17,440 --> 00:03:19,760
web as we know it and here's a couple

86
00:03:19,760 --> 00:03:22,640
examples of what this is all about so

87
00:03:22,640 --> 00:03:24,000
i'm gonna get my pen out here there we

88
00:03:24,000 --> 00:03:27,360
go we're looking at evil.com right and

89
00:03:27,360 --> 00:03:30,239
here we have an image tag which is not

90
00:03:30,239 --> 00:03:33,840
governed by any policy by default i can

91
00:03:33,840 --> 00:03:36,159
load an image anywhere on the web it's

92
00:03:36,159 --> 00:03:37,840
that it's the old school artifact that

93
00:03:37,840 --> 00:03:39,599
still behaves that way so i'm going to

94
00:03:39,599 --> 00:03:42,480
make a request to mail.google.com

95
00:03:42,480 --> 00:03:45,280
delete all the messages and auto confirm

96
00:03:45,280 --> 00:03:48,560
it the height and width are one pixel so

97
00:03:48,560 --> 00:03:51,200
you don't even see the broken image icon

98
00:03:51,200 --> 00:03:53,920
it's one pixel not visible to a user

99
00:03:53,920 --> 00:03:55,519
look at this look how interesting this

100
00:03:55,519 --> 00:03:58,560
is it's not visible to the user they

101
00:03:58,560 --> 00:04:00,560
visit an evil website

102
00:04:00,560 --> 00:04:02,640
and it forces the user to make a

103
00:04:02,640 --> 00:04:04,000
transaction

104
00:04:04,000 --> 00:04:07,120
without any action on the user's part

105
00:04:07,120 --> 00:04:09,280
this is a big deal think about all the

106
00:04:09,280 --> 00:04:12,000
sites and administrative activity you

107
00:04:12,000 --> 00:04:14,799
provide and imagine an attacker forcing

108
00:04:14,799 --> 00:04:17,358
an admin to do whatever the attacker

109
00:04:17,358 --> 00:04:20,079
wants this is pretty destructive and so

110
00:04:20,079 --> 00:04:22,800
here i have some server here where i

111
00:04:22,800 --> 00:04:25,120
have i'm transferring money for a bank

112
00:04:25,120 --> 00:04:27,120
account again i'm hiding my track so you

113
00:04:27,120 --> 00:04:29,919
can't see it i'm hiding

114
00:04:29,919 --> 00:04:31,919
the artifact that's doing the request

115
00:04:31,919 --> 00:04:34,560
forgery so the victim can't see it and

116
00:04:34,560 --> 00:04:38,080
down here i got this webmail program i'm

117
00:04:38,080 --> 00:04:40,560
sending an automatic email automatically

118
00:04:40,560 --> 00:04:42,880
saying nasty stuff to my boss

119
00:04:42,880 --> 00:04:46,080
and i'm using r e l is no refer this

120
00:04:46,080 --> 00:04:49,199
this is a standard attribute for a link

121
00:04:49,199 --> 00:04:52,320
that says don't send the refer header

122
00:04:52,320 --> 00:04:54,400
hey by the way

123
00:04:54,400 --> 00:04:56,400
what would the refer header be of this

124
00:04:56,400 --> 00:04:58,960
request oh yeah be evil.com letting you

125
00:04:58,960 --> 00:05:00,639
know where the attack was hosted so i'm

126
00:05:00,639 --> 00:05:03,120
gonna i'm gonna hide my tracks here

127
00:05:03,120 --> 00:05:04,000
and so

128
00:05:04,000 --> 00:05:06,639
this is why request forgery is not in

129
00:05:06,639 --> 00:05:09,280
the data by the way this is it limits

130
00:05:09,280 --> 00:05:11,440
data has limits by the way request

131
00:05:11,440 --> 00:05:14,000
forgery is not a part of our data set

132
00:05:14,000 --> 00:05:16,400
because it's so easy for me to hide my

133
00:05:16,400 --> 00:05:18,880
tracks as an attacker if you're hit by

134
00:05:18,880 --> 00:05:22,320
request forgery it is non-trivial to do

135
00:05:22,320 --> 00:05:24,639
forensics to see just how big of a

136
00:05:24,639 --> 00:05:27,199
problem this is so i suspect it's more

137
00:05:27,199 --> 00:05:29,680
of a problem than the data shows us but

138
00:05:29,680 --> 00:05:30,800
luckily

139
00:05:30,800 --> 00:05:32,320
technology is

140
00:05:32,320 --> 00:05:34,720
picking up in web security standards

141
00:05:34,720 --> 00:05:37,199
where we need less developer awareness

142
00:05:37,199 --> 00:05:39,280
of this less but we still need some but

143
00:05:39,280 --> 00:05:41,360
we're getting better by default which

144
00:05:41,360 --> 00:05:43,120
we'll look at in just a bit

145
00:05:43,120 --> 00:05:46,080
and so what's the result of all of this

146
00:05:46,080 --> 00:05:49,039
the result is that the image loads the

147
00:05:49,039 --> 00:05:51,919
request is made cookie goes with it the

148
00:05:51,919 --> 00:05:55,039
attacker doesn't see the response

149
00:05:55,039 --> 00:05:56,880
but they get the money right they get

150
00:05:56,880 --> 00:05:59,120
the money they get the a result of the

151
00:05:59,120 --> 00:06:01,680
attack occurring in some way

152
00:06:01,680 --> 00:06:04,800
here's a real famous attack

153
00:06:04,800 --> 00:06:06,240
there's not a famous attack that's just

154
00:06:06,240 --> 00:06:08,160
a point i'm trying to make the other

155
00:06:08,160 --> 00:06:10,880
point with crossout request forgery is i

156
00:06:10,880 --> 00:06:13,280
can use it to attack intranet sites and

157
00:06:13,280 --> 00:06:16,160
i've seen this happen among fired

158
00:06:16,160 --> 00:06:18,240
workers and disgruntled workers before

159
00:06:18,240 --> 00:06:20,160
in the tech world so here i have an

160
00:06:20,160 --> 00:06:22,720
iframe on my evil website where the

161
00:06:22,720 --> 00:06:25,280
style makes it non-visible right there's

162
00:06:25,280 --> 00:06:27,759
a width border zero and it's not it's

163
00:06:27,759 --> 00:06:29,280
not going to be something that we see

164
00:06:29,280 --> 00:06:31,360
even though it's active on the dom

165
00:06:31,360 --> 00:06:33,440
so then i have this form which is

166
00:06:33,440 --> 00:06:36,000
submitting to an internal website now on

167
00:06:36,000 --> 00:06:38,319
the internet i can't hit your intranet

168
00:06:38,319 --> 00:06:40,800
but if i can get you to visit my website

169
00:06:40,800 --> 00:06:43,039
that's evil and this is downloaded in

170
00:06:43,039 --> 00:06:45,520
your browser where you're logged into

171
00:06:45,520 --> 00:06:48,240
your intranet by single sign-on then i

172
00:06:48,240 --> 00:06:51,520
can hit this vendor money transfer form

173
00:06:51,520 --> 00:06:53,199
and have money sent to me as the

174
00:06:53,199 --> 00:06:54,240
attacker

175
00:06:54,240 --> 00:06:57,280
by forcing an internal employee to hit

176
00:06:57,280 --> 00:06:59,360
an intranet app through cross-site

177
00:06:59,360 --> 00:07:01,280
request forgery now this is what scares

178
00:07:01,280 --> 00:07:03,440
me the most because it's not just about

179
00:07:03,440 --> 00:07:05,919
attacking other websites on the internet

180
00:07:05,919 --> 00:07:08,560
it lets me go after intranet sites which

181
00:07:08,560 --> 00:07:11,599
are traditionally way less secure than

182
00:07:11,599 --> 00:07:13,840
our internet sites as a whole so there

183
00:07:13,840 --> 00:07:16,160
you go cross set request forgery

184
00:07:16,160 --> 00:07:18,639
attacking intranet sites

185
00:07:18,639 --> 00:07:21,680
this is one of the most famous incidents

186
00:07:21,680 --> 00:07:25,280
or famous known attack types against a

187
00:07:25,280 --> 00:07:27,919
certain service this is back a long time

188
00:07:27,919 --> 00:07:29,840
ago in 2006

189
00:07:29,840 --> 00:07:33,199
where for the dvd ordering service this

190
00:07:33,199 --> 00:07:35,840
request forgery adds a movie to the

191
00:07:35,840 --> 00:07:36,880
queue

192
00:07:36,880 --> 00:07:38,800
waits two seconds

193
00:07:38,800 --> 00:07:42,080
calls load image 2 which then adds this

194
00:07:42,080 --> 00:07:45,360
dvd movie to the top of your queue and

195
00:07:45,360 --> 00:07:47,120
when this attack was when this was

196
00:07:47,120 --> 00:07:49,199
released by an attacker it was an

197
00:07:49,199 --> 00:07:51,520
inappropriate movie for kids but this is

198
00:07:51,520 --> 00:07:53,919
a way to show that even a site like

199
00:07:53,919 --> 00:07:55,120
netflix

200
00:07:55,120 --> 00:07:56,080
back

201
00:07:56,080 --> 00:07:58,400
many years ago to their credit

202
00:07:58,400 --> 00:08:01,039
would allow me to put this attack up and

203
00:08:01,039 --> 00:08:03,360
force users to have movies shipped to

204
00:08:03,360 --> 00:08:05,120
their house physically that they never

205
00:08:05,120 --> 00:08:07,039
ordered interesting

206
00:08:07,039 --> 00:08:09,360
last what do we got here this is a great

207
00:08:09,360 --> 00:08:11,840
incident back in 2012. this is an

208
00:08:11,840 --> 00:08:13,919
incident against the entire nation of

209
00:08:13,919 --> 00:08:14,960
brazil

210
00:08:14,960 --> 00:08:18,000
brazil has three major telecoms five

211
00:08:18,000 --> 00:08:20,000
million people were hit by this

212
00:08:20,000 --> 00:08:22,720
vulnerability in the comtrend adsl

213
00:08:22,720 --> 00:08:24,960
router that was given to people across

214
00:08:24,960 --> 00:08:27,280
brazil as just for signing up for

215
00:08:27,280 --> 00:08:30,080
internet access and this this attack

216
00:08:30,080 --> 00:08:32,399
would hit the intranet of your router

217
00:08:32,399 --> 00:08:36,200
and go after the admin console so

218
00:08:36,200 --> 00:08:38,080
192.168.1.1 that's nothing on the

219
00:08:38,080 --> 00:08:40,559
internet but on your personal intranet

220
00:08:40,559 --> 00:08:42,799
that's your router so this attack when

221
00:08:42,799 --> 00:08:45,040
you're behind your router at home and

222
00:08:45,040 --> 00:08:48,080
you visit this attack it will force you

223
00:08:48,080 --> 00:08:50,560
to hit your vulnerable router change

224
00:08:50,560 --> 00:08:53,120
your password to a known password and

225
00:08:53,120 --> 00:08:54,480
the attacker

226
00:08:54,480 --> 00:08:57,120
then modified let's clean this out the

227
00:08:57,120 --> 00:08:59,760
attacker then modified your dns

228
00:08:59,760 --> 00:09:02,560
to become an attacker dns hey what if i

229
00:09:02,560 --> 00:09:04,720
can set your dns server to what if i

230
00:09:04,720 --> 00:09:07,839
control your dns as an attacker for five

231
00:09:07,839 --> 00:09:09,680
million people across brazil what can i

232
00:09:09,680 --> 00:09:12,880
do botnet go go fishing this is

233
00:09:12,880 --> 00:09:15,279
basically a bank robber who used this

234
00:09:15,279 --> 00:09:17,680
mass attack against brazil

235
00:09:17,680 --> 00:09:20,640
to fish through dns to get banking

236
00:09:20,640 --> 00:09:23,680
credentials brilliant it's another sea

237
00:09:23,680 --> 00:09:27,279
surf cross site request forgery attack

238
00:09:27,279 --> 00:09:30,560
against an intranet fascinating to me

239
00:09:30,560 --> 00:09:32,480
so again i can punch through your

240
00:09:32,480 --> 00:09:35,279
internal network your single sign-on

241
00:09:35,279 --> 00:09:37,519
makes it easier a lot of people

242
00:09:37,519 --> 00:09:39,279
implement single sign-on where i'm an

243
00:09:39,279 --> 00:09:42,080
employee i show up i log in single

244
00:09:42,080 --> 00:09:44,399
sign-on you give me a cookie and that's

245
00:09:44,399 --> 00:09:46,720
an ever cookie all day long i go to

246
00:09:46,720 --> 00:09:48,880
lunch come back it's still active this

247
00:09:48,880 --> 00:09:50,959
is nonsense this violates session

248
00:09:50,959 --> 00:09:54,080
management for single sign-on i like to

249
00:09:54,080 --> 00:09:56,160
break up my apps into different wrist

250
00:09:56,160 --> 00:09:58,560
tiers if it's a low risk app single

251
00:09:58,560 --> 00:10:00,560
sign-on you're in if it's any kind of

252
00:10:00,560 --> 00:10:03,040
high risk i do another multi-factor

253
00:10:03,040 --> 00:10:05,600
challenge so you're not giving staff

254
00:10:05,600 --> 00:10:08,079
seamless access to all your admin apps

255
00:10:08,079 --> 00:10:10,800
it's nuts that's how most folks roll and

256
00:10:10,800 --> 00:10:13,040
it's dangerous here's an example of how

257
00:10:13,040 --> 00:10:14,880
to weaponize it as well now how do you

258
00:10:14,880 --> 00:10:17,680
stop this problem sea surf defense there

259
00:10:17,680 --> 00:10:20,800
are two main defenses and three extra

260
00:10:20,800 --> 00:10:23,120
defenses i want you to consider

261
00:10:23,120 --> 00:10:25,440
number one your app should have you know

262
00:10:25,440 --> 00:10:26,720
now if

263
00:10:26,720 --> 00:10:29,440
if you're using cookies

264
00:10:29,440 --> 00:10:32,000
for session management the cookies may

265
00:10:32,000 --> 00:10:34,560
have a session id the cookies may have a

266
00:10:34,560 --> 00:10:37,440
json web token but the reason sea surf

267
00:10:37,440 --> 00:10:39,920
cross site request forgery exists is

268
00:10:39,920 --> 00:10:41,519
because of the automatic nature of

269
00:10:41,519 --> 00:10:45,279
cookies so if you're not using cookies

270
00:10:45,279 --> 00:10:47,200
if you're like putting a jot

271
00:10:47,200 --> 00:10:49,279
into session storage and you're not

272
00:10:49,279 --> 00:10:51,680
using cookies this is not a problem so

273
00:10:51,680 --> 00:10:54,079
step one don't use cookies and sea surf

274
00:10:54,079 --> 00:10:56,880
goes away hey but if you're storing your

275
00:10:56,880 --> 00:10:59,920
token in inside of local recession

276
00:10:59,920 --> 00:11:02,240
storage one cross-site scripting and

277
00:11:02,240 --> 00:11:04,320
i've stolen your cookie

278
00:11:04,320 --> 00:11:07,279
if you put the token in an http only

279
00:11:07,279 --> 00:11:09,680
cookie i can't steal the cookie i can

280
00:11:09,680 --> 00:11:12,959
still abuse it and do request forgery so

281
00:11:12,959 --> 00:11:14,560
at some level it doesn't matter but i

282
00:11:14,560 --> 00:11:17,760
digress so if you're using cookies you

283
00:11:17,760 --> 00:11:20,240
want to use synchronizer token pattern

284
00:11:20,240 --> 00:11:23,040
for a stateful traditional session based

285
00:11:23,040 --> 00:11:26,160
web app and if you're using a stateless

286
00:11:26,160 --> 00:11:29,120
api that uses cookies as a session

287
00:11:29,120 --> 00:11:31,440
transport you want to use the famous

288
00:11:31,440 --> 00:11:33,839
double submit cookie pattern from john

289
00:11:33,839 --> 00:11:35,600
wylander when he was working for a

290
00:11:35,600 --> 00:11:37,440
swedish bank back in the day he invented

291
00:11:37,440 --> 00:11:38,959
this back in the day double submit

292
00:11:38,959 --> 00:11:41,680
cookies we still see that in angular and

293
00:11:41,680 --> 00:11:44,320
similar to this day a few other defenses

294
00:11:44,320 --> 00:11:46,480
re-authentication

295
00:11:46,480 --> 00:11:49,279
in critical boundaries great idea same

296
00:11:49,279 --> 00:11:51,760
site cookies become they're a standard

297
00:11:51,760 --> 00:11:54,639
around by default that's really powerful

298
00:11:54,639 --> 00:11:56,720
with same site cookies you can even do

299
00:11:56,720 --> 00:11:59,120
header verification to check the origin

300
00:11:59,120 --> 00:12:01,519
of an incoming request so i tend to

301
00:12:01,519 --> 00:12:04,639
recommend synchronizer and same site and

302
00:12:04,639 --> 00:12:06,800
re-authentication i don't do header

303
00:12:06,800 --> 00:12:09,200
verification much anymore but i see some

304
00:12:09,200 --> 00:12:10,800
people still doing it we'll talk about

305
00:12:10,800 --> 00:12:13,360
it we also got double submit cookies

306
00:12:13,360 --> 00:12:15,519
for our stateless app so let's go

307
00:12:15,519 --> 00:12:17,839
traditional traditional web apps right

308
00:12:17,839 --> 00:12:19,920
which still exist in the world today you

309
00:12:19,920 --> 00:12:23,120
jot jot freaks json web token we still

310
00:12:23,120 --> 00:12:25,680
got regular sessions for some of us

311
00:12:25,680 --> 00:12:28,079
for some of us out there so when you log

312
00:12:28,079 --> 00:12:28,880
in

313
00:12:28,880 --> 00:12:31,680
generate a large c-surf token and when

314
00:12:31,680 --> 00:12:34,000
you're rendering a form extract that

315
00:12:34,000 --> 00:12:36,240
token from the session and put it in a

316
00:12:36,240 --> 00:12:37,920
form as a hidden variable for any

317
00:12:37,920 --> 00:12:39,920
sensitive transaction when that's

318
00:12:39,920 --> 00:12:42,720
submitted compare the token in the form

319
00:12:42,720 --> 00:12:44,800
to what's in your sh what in your

320
00:12:44,800 --> 00:12:47,440
session and if you get a match

321
00:12:47,440 --> 00:12:49,519
you've passed the c surf test and if it

322
00:12:49,519 --> 00:12:52,880
doesn't match reject now this is built

323
00:12:52,880 --> 00:12:55,440
into your framework for all modern web

324
00:12:55,440 --> 00:12:58,480
frameworks so it's it's something that

325
00:12:58,480 --> 00:13:00,639
you really want to consider using what

326
00:13:00,639 --> 00:13:02,880
your framework offers you as your first

327
00:13:02,880 --> 00:13:05,440
approach to this and if it doesn't i'll

328
00:13:05,440 --> 00:13:06,880
give you this this is what you want to

329
00:13:06,880 --> 00:13:09,440
build pretty straightforward to do so

330
00:13:09,440 --> 00:13:10,720
the other thing is

331
00:13:10,720 --> 00:13:13,120
your get requests should not run a

332
00:13:13,120 --> 00:13:15,760
transaction this is not just me saying

333
00:13:15,760 --> 00:13:19,040
this this is the original http standard

334
00:13:19,040 --> 00:13:22,880
in we're talking rfc 216

335
00:13:22,880 --> 00:13:27,880
rfc alexa quiet rfc 2616

336
00:13:27,880 --> 00:13:31,279
9.1.1 the get and head methods should

337
00:13:31,279 --> 00:13:33,680
not have a significance of taking an

338
00:13:33,680 --> 00:13:36,480
action other than retrieval null and

339
00:13:36,480 --> 00:13:39,440
potent means no power item potent means

340
00:13:39,440 --> 00:13:41,120
all requests have the same effect so

341
00:13:41,120 --> 00:13:43,279
your get request should look up a

342
00:13:43,279 --> 00:13:46,000
resource or render a read-only web page

343
00:13:46,000 --> 00:13:47,600
and that's it it shouldn't run

344
00:13:47,600 --> 00:13:50,480
transactions that can harm you therefore

345
00:13:50,480 --> 00:13:52,320
you should not need to protect your get

346
00:13:52,320 --> 00:13:54,880
request from c surf a get request should

347
00:13:54,880 --> 00:13:56,880
never log a user in delete run a

348
00:13:56,880 --> 00:13:59,680
transaction just look up data so that's

349
00:13:59,680 --> 00:14:02,639
basics we know that that's basic session

350
00:14:02,639 --> 00:14:04,880
now when it comes to

351
00:14:04,880 --> 00:14:07,839
uh when it comes to stateless services

352
00:14:07,839 --> 00:14:11,279
that use cookies there's no server side

353
00:14:11,279 --> 00:14:14,079
state to save the token in so what do we

354
00:14:14,079 --> 00:14:17,600
do we do double submit as a pattern and

355
00:14:17,600 --> 00:14:20,560
i still think you should build these in

356
00:14:20,560 --> 00:14:21,760
if you're not if they're not in your

357
00:14:21,760 --> 00:14:24,560
framework so way double submit works is

358
00:14:24,560 --> 00:14:26,480
it's not depending on server state at

359
00:14:26,480 --> 00:14:28,560
all what it does is in javascript when

360
00:14:28,560 --> 00:14:30,480
you hit submit it's going to

361
00:14:30,480 --> 00:14:32,720
automatically create a cross site

362
00:14:32,720 --> 00:14:35,120
request forgery cookie with the large

363
00:14:35,120 --> 00:14:37,199
with the with the value in it a

364
00:14:37,199 --> 00:14:40,160
significant size value and then this

365
00:14:40,160 --> 00:14:43,519
javascript will set the same value in a

366
00:14:43,519 --> 00:14:46,320
request as a request parameter or a

367
00:14:46,320 --> 00:14:48,800
custom header and all that the server

368
00:14:48,800 --> 00:14:51,519
does for sensitive transactions it looks

369
00:14:51,519 --> 00:14:53,920
at the cookie make sure it's non-null

370
00:14:53,920 --> 00:14:57,839
non-zero looks at the request value and

371
00:14:57,839 --> 00:15:00,399
make sure they match if they match where

372
00:15:00,399 --> 00:15:03,120
we passed the c surf test if they don't

373
00:15:03,120 --> 00:15:05,040
match we're going to reject it this is

374
00:15:05,040 --> 00:15:09,279
necessary for cookie based apis only

375
00:15:09,279 --> 00:15:10,079
right

376
00:15:10,079 --> 00:15:12,880
also the reason this works is because an

377
00:15:12,880 --> 00:15:16,560
evil domain cannot read the cookie to

378
00:15:16,560 --> 00:15:19,519
include it as a parameter on the fly and

379
00:15:19,519 --> 00:15:21,360
all the servers have to do whether it's

380
00:15:21,360 --> 00:15:24,320
a serverless function web micro services

381
00:15:24,320 --> 00:15:26,800
or what it's got to reject the request

382
00:15:26,800 --> 00:15:29,839
if the cookie and parameter do not match

383
00:15:29,839 --> 00:15:33,040
necessary for cookie based services so

384
00:15:33,040 --> 00:15:35,279
what else we also have uh this challenge

385
00:15:35,279 --> 00:15:37,120
response like if i'm going to transfer

386
00:15:37,120 --> 00:15:38,000
money

387
00:15:38,000 --> 00:15:40,079
force the user to authenticate this

388
00:15:40,079 --> 00:15:42,240
alone does a really good job at stopping

389
00:15:42,240 --> 00:15:45,120
request forgery but it's another defense

390
00:15:45,120 --> 00:15:47,480
we can add in um just

391
00:15:47,480 --> 00:15:49,360
re-authentication for sensitive

392
00:15:49,360 --> 00:15:52,160
transactions now what makes this

393
00:15:52,160 --> 00:15:53,680
exciting though

394
00:15:53,680 --> 00:15:56,800
is is how browser standards have risen

395
00:15:56,800 --> 00:15:59,680
in the last few days the advent of the

396
00:15:59,680 --> 00:16:02,800
same site cookie is amazing in its

397
00:16:02,800 --> 00:16:05,600
capacity to stop request forgery we have

398
00:16:05,600 --> 00:16:07,920
all these new cookie standards over the

399
00:16:07,920 --> 00:16:11,120
years the and and the same site ones as

400
00:16:11,120 --> 00:16:12,399
a recent one

401
00:16:12,399 --> 00:16:14,160
and what same site does is and there's

402
00:16:14,160 --> 00:16:16,560
two modes they're strict and there's

403
00:16:16,560 --> 00:16:19,120
lacks let's start with strict first

404
00:16:19,120 --> 00:16:20,800
strict says

405
00:16:20,800 --> 00:16:23,920
cookies will not leave the browser

406
00:16:23,920 --> 00:16:27,360
unless the user made a request in the

407
00:16:27,360 --> 00:16:29,839
page where the page

408
00:16:29,839 --> 00:16:33,440
the domain of the page and the domain of

409
00:16:33,440 --> 00:16:36,000
the server are the same registrable

410
00:16:36,000 --> 00:16:39,600
domain because what's request forgery go

411
00:16:39,600 --> 00:16:41,920
go go back a second to the beginning of

412
00:16:41,920 --> 00:16:44,720
this talk request forgery hosts the

413
00:16:44,720 --> 00:16:47,680
attack on evil.com and submits it

414
00:16:47,680 --> 00:16:49,680
elsewhere so the page

415
00:16:49,680 --> 00:16:52,160
and the server target are different

416
00:16:52,160 --> 00:16:53,440
domains

417
00:16:53,440 --> 00:16:55,920
and what same site cookies do they say

418
00:16:55,920 --> 00:16:56,720
hey

419
00:16:56,720 --> 00:16:58,880
if your browser and server are not the

420
00:16:58,880 --> 00:17:00,959
same domain and the request was not

421
00:17:00,959 --> 00:17:03,360
initiated in the page itself we're not

422
00:17:03,360 --> 00:17:05,520
going to send the cookie this is one of

423
00:17:05,520 --> 00:17:07,520
the greatest standards to help us

424
00:17:07,520 --> 00:17:11,119
eliminate request forgery what lack says

425
00:17:11,119 --> 00:17:13,919
lacks is lacks is to support affiliate

426
00:17:13,919 --> 00:17:16,559
links and similar lack if you say lacks

427
00:17:16,559 --> 00:17:18,640
what you're saying even if the request

428
00:17:18,640 --> 00:17:22,000
was originated from like text you text

429
00:17:22,000 --> 00:17:25,280
me a link and i press on it in email i

430
00:17:25,280 --> 00:17:27,359
press on it in messaging or through

431
00:17:27,359 --> 00:17:30,400
social media that opens the browser that

432
00:17:30,400 --> 00:17:32,720
sends a request to the server if you're

433
00:17:32,720 --> 00:17:36,880
in lax mode an external request to the

434
00:17:36,880 --> 00:17:39,200
page will still send the cookie in

435
00:17:39,200 --> 00:17:42,080
strict mode a request outside of the

436
00:17:42,080 --> 00:17:45,039
page will not send the cookie so i tend

437
00:17:45,039 --> 00:17:47,280
to want to do la like i tend to want to

438
00:17:47,280 --> 00:17:49,440
do strict when i can

439
00:17:49,440 --> 00:17:52,000
lax only when i have to and the good

440
00:17:52,000 --> 00:17:54,799
thing about the standard is every major

441
00:17:54,799 --> 00:17:57,919
browser except for the filth that's ie

442
00:17:57,919 --> 00:18:00,720
11 is filth stop supporting it everybody

443
00:18:00,720 --> 00:18:03,360
it does not support modern web standards

444
00:18:03,360 --> 00:18:05,440
it's a horrible problem they do support

445
00:18:05,440 --> 00:18:06,880
some of this standard but anyways i'm

446
00:18:06,880 --> 00:18:09,440
stopping my ie11 rant that's what i do

447
00:18:09,440 --> 00:18:11,760
when i on the occasion i drink i drink a

448
00:18:11,760 --> 00:18:13,919
little bit once in a while and i rant

449
00:18:13,919 --> 00:18:17,520
about how badly ie11 and safari support

450
00:18:17,520 --> 00:18:19,679
modern standards it's a personal problem

451
00:18:19,679 --> 00:18:22,080
but it's a well-supported standard here

452
00:18:22,080 --> 00:18:25,120
right this is this is a good job and so

453
00:18:25,120 --> 00:18:28,080
the interesting note is the same site

454
00:18:28,080 --> 00:18:31,600
lacks is now default since about chrome

455
00:18:31,600 --> 00:18:34,640
80. so they enabled it and disabled it

456
00:18:34,640 --> 00:18:36,720
but it's now it's now in there where if

457
00:18:36,720 --> 00:18:39,600
you don't if you set a cookie and don't

458
00:18:39,600 --> 00:18:42,240
declare the same site value it's going

459
00:18:42,240 --> 00:18:44,080
to automatically make your cookie same

460
00:18:44,080 --> 00:18:45,360
site lacks

461
00:18:45,360 --> 00:18:48,080
giving automatic sea surf protection

462
00:18:48,080 --> 00:18:50,240
across the web even when people don't

463
00:18:50,240 --> 00:18:52,960
implement it this is really impressive

464
00:18:52,960 --> 00:18:55,520
and this is mike west from google who's

465
00:18:55,520 --> 00:18:57,919
the head of the w3c security working

466
00:18:57,919 --> 00:18:59,760
group he's amazing that they pulled this

467
00:18:59,760 --> 00:19:02,080
off and so we see up and down this is

468
00:19:02,080 --> 00:19:03,280
the history

469
00:19:03,280 --> 00:19:06,559
same site enforcement is now resumed by

470
00:19:06,559 --> 00:19:08,559
automatically for good

471
00:19:08,559 --> 00:19:10,799
just a few years ago and so there's some

472
00:19:10,799 --> 00:19:12,640
limits here everyone limits of the same

473
00:19:12,640 --> 00:19:14,559
site cookie defense

474
00:19:14,559 --> 00:19:16,799
if your session management is not cookie

475
00:19:16,799 --> 00:19:19,679
based like it's like http digest or

476
00:19:19,679 --> 00:19:22,000
network based session management please

477
00:19:22,000 --> 00:19:24,880
don't do that but if these these types

478
00:19:24,880 --> 00:19:27,440
even though they don't have cookies

479
00:19:27,440 --> 00:19:30,000
they can still be request forgery base i

480
00:19:30,000 --> 00:19:32,160
know i mentioned earlier that you got to

481
00:19:32,160 --> 00:19:34,080
have cookies for this for this to be a

482
00:19:34,080 --> 00:19:35,600
problem but just to be a bit more

483
00:19:35,600 --> 00:19:38,960
complete any automatic um session

484
00:19:38,960 --> 00:19:40,720
management can be attacked and the ones

485
00:19:40,720 --> 00:19:42,240
i can think of is

486
00:19:42,240 --> 00:19:46,080
http digest or network based uh security

487
00:19:46,080 --> 00:19:48,640
for authentication which i never use

488
00:19:48,640 --> 00:19:51,200
but some legacy systems do they're

489
00:19:51,200 --> 00:19:54,400
vulnerable to sea surf also

490
00:19:54,400 --> 00:19:56,960
it's my belief you should not be giving

491
00:19:56,960 --> 00:19:59,679
up your sub domains right if you let an

492
00:19:59,679 --> 00:20:02,000
adversary control your sub domain like

493
00:20:02,000 --> 00:20:03,919
some of the software services will have

494
00:20:03,919 --> 00:20:07,520
like you know mana manaco.salesforce.com

495
00:20:07,520 --> 00:20:10,159
you've given your your sub domain away

496
00:20:10,159 --> 00:20:13,360
in that case as a sub domain owner i can

497
00:20:13,360 --> 00:20:15,760
set a cookie that overrides sea surf

498
00:20:15,760 --> 00:20:18,480
cookies at the top level domain that's a

499
00:20:18,480 --> 00:20:20,799
problem for some software as a services

500
00:20:20,799 --> 00:20:23,200
some that's a problem for some software

501
00:20:23,200 --> 00:20:26,240
as a service services thank you not all

502
00:20:26,240 --> 00:20:28,640
browsers support same site that's less

503
00:20:28,640 --> 00:20:30,960
of a problem every day

504
00:20:30,960 --> 00:20:32,559
another defense is i can check the

505
00:20:32,559 --> 00:20:35,039
origin header i do this in addition to

506
00:20:35,039 --> 00:20:37,440
other defenses i don't do it as much i

507
00:20:37,440 --> 00:20:39,520
don't see it as much but i can make sure

508
00:20:39,520 --> 00:20:42,480
the origin matches if the origin header

509
00:20:42,480 --> 00:20:45,039
is not being sent i can check the refer

510
00:20:45,039 --> 00:20:47,520
header and if and if both are missing we

511
00:20:47,520 --> 00:20:49,760
can just fail gracefully this is an

512
00:20:49,760 --> 00:20:51,760
option for legacy

513
00:20:51,760 --> 00:20:54,640
and so the reason why i think this is

514
00:20:54,640 --> 00:20:57,039
again we want the refer header often for

515
00:20:57,039 --> 00:20:59,919
analysis and i can now control the refer

516
00:20:59,919 --> 00:21:03,760
header to a refer policy by default it's

517
00:21:03,760 --> 00:21:06,559
no longer sending the full url so i

518
00:21:06,559 --> 00:21:09,760
would override referrer policy strict

519
00:21:09,760 --> 00:21:12,159
origin when cross origin so that way

520
00:21:12,159 --> 00:21:14,400
cross origin requests won't send the

521
00:21:14,400 --> 00:21:17,520
full url just the origin which i can

522
00:21:17,520 --> 00:21:19,440
verify as part of request forward to

523
00:21:19,440 --> 00:21:21,200
defense as an option a little more of a

524
00:21:21,200 --> 00:21:23,840
legacy option but still an option by the

525
00:21:23,840 --> 00:21:26,080
way you got to get request cross-site

526
00:21:26,080 --> 00:21:28,240
scripting correct content security

527
00:21:28,240 --> 00:21:30,159
policy and trusted types is critical

528
00:21:30,159 --> 00:21:32,000
here because if i got cross-site

529
00:21:32,000 --> 00:21:34,799
scripting in your site i can defeat any

530
00:21:34,799 --> 00:21:37,679
request forgery defense like this

531
00:21:37,679 --> 00:21:40,960
twitter got hit where this url was

532
00:21:40,960 --> 00:21:43,039
vulnerable to cross-site scripting it

533
00:21:43,039 --> 00:21:45,120
allowed this raw script to run on

534
00:21:45,120 --> 00:21:47,919
twitter's homepage the attack then was

535
00:21:47,919 --> 00:21:50,480
all of this here the actual value of

536
00:21:50,480 --> 00:21:52,400
that that script was everything you see

537
00:21:52,400 --> 00:21:55,919
here it grabbed twitter's main html

538
00:21:55,919 --> 00:21:58,320
ripped out the sea surf token said

539
00:21:58,320 --> 00:22:01,360
something offensive about goats tweeted

540
00:22:01,360 --> 00:22:03,919
your your inappropriate affection with

541
00:22:03,919 --> 00:22:06,880
goats and retweeted the same attack to

542
00:22:06,880 --> 00:22:09,679
spread it within three min within three

543
00:22:09,679 --> 00:22:12,559
or four days millions of twitter users

544
00:22:12,559 --> 00:22:15,120
back in this era were tweeting about a

545
00:22:15,120 --> 00:22:17,200
love of goats whose name we should not

546
00:22:17,200 --> 00:22:18,640
speak bad

547
00:22:18,640 --> 00:22:19,919
attack that's what i'm saying all right

548
00:22:19,919 --> 00:22:22,000
moving on moving on so what else do we

549
00:22:22,000 --> 00:22:24,799
got here here's the cross site request

550
00:22:24,799 --> 00:22:26,960
forgery cheat sheet i helped rewrite

551
00:22:26,960 --> 00:22:28,320
this

552
00:22:28,320 --> 00:22:30,960
recently so use your built-in c-surf

553
00:22:30,960 --> 00:22:33,280
protection use synchronize your token

554
00:22:33,280 --> 00:22:35,760
for stateful double submit cookies for

555
00:22:35,760 --> 00:22:38,480
stateless consider same-site cookies and

556
00:22:38,480 --> 00:22:40,799
their automatic behavior is default as

557
00:22:40,799 --> 00:22:42,960
lack so be ready for it consider

558
00:22:42,960 --> 00:22:44,320
implementing um you know

559
00:22:44,320 --> 00:22:46,480
re-authentication consider custom

560
00:22:46,480 --> 00:22:48,080
headers if you wish to and you can check

561
00:22:48,080 --> 00:22:50,000
the origin and refer if you wish to as

562
00:22:50,000 --> 00:22:53,280
well and please one xss

563
00:22:53,280 --> 00:22:55,679
and sea surf is all defeated so please

564
00:22:55,679 --> 00:22:58,559
be sure to have great xss prevention

565
00:22:58,559 --> 00:23:01,360
strategies for your app and last don't

566
00:23:01,360 --> 00:23:04,480
use gets for state changing operation

567
00:23:04,480 --> 00:23:06,480
and you shouldn't need to defend against

568
00:23:06,480 --> 00:23:09,360
them yeah that's cross site request

569
00:23:09,360 --> 00:23:12,480
forgery in a nutshell please give this

570
00:23:12,480 --> 00:23:14,880
cheat sheet a read and provide me with

571
00:23:14,880 --> 00:23:16,159
any comments we're always looking to

572
00:23:16,159 --> 00:23:18,240
make stuff better here at the oas

573
00:23:18,240 --> 00:23:19,440
foundation

574
00:23:19,440 --> 00:23:22,080
let's talk about server side requests

575
00:23:22,080 --> 00:23:24,799
forgery next server side now the big

576
00:23:24,799 --> 00:23:27,280
event i remember this vividly

577
00:23:27,280 --> 00:23:29,360
i was i was having a glass of milk

578
00:23:29,360 --> 00:23:31,919
really ice cold and oatmeal raisin

579
00:23:31,919 --> 00:23:32,960
cookies

580
00:23:32,960 --> 00:23:33,679
the

581
00:23:33,679 --> 00:23:35,919
the platonic form of cookies the best

582
00:23:35,919 --> 00:23:39,440
cookie that plato himself would say is

583
00:23:39,440 --> 00:23:42,559
you know the the highest uh platonic

584
00:23:42,559 --> 00:23:44,400
form the ideal form of cookies is

585
00:23:44,400 --> 00:23:46,400
oatmeal raisin i'm sorry it's just true

586
00:23:46,400 --> 00:23:48,080
so i'm having an oatmeal raisin cookie

587
00:23:48,080 --> 00:23:50,400
and a glass of milk and cnn news in the

588
00:23:50,400 --> 00:23:53,520
u.s said coming up next see

589
00:23:53,520 --> 00:23:56,240
a server side request forgery at capital

590
00:23:56,240 --> 00:23:59,120
one and milk went out my nose i thought

591
00:23:59,120 --> 00:24:01,360
someone hacked my tv there's no way

592
00:24:01,360 --> 00:24:03,520
cnn's talking about service i'd request

593
00:24:03,520 --> 00:24:06,320
forgery but august of 2019 that's

594
00:24:06,320 --> 00:24:08,480
exactly what happened because capital

595
00:24:08,480 --> 00:24:11,919
one had a hundred million applications

596
00:24:11,919 --> 00:24:15,200
stolen from their aws setup through

597
00:24:15,200 --> 00:24:17,679
server side request forgery what the

598
00:24:17,679 --> 00:24:19,120
heck is this

599
00:24:19,120 --> 00:24:21,279
now i read a lot of articles about this

600
00:24:21,279 --> 00:24:22,679
and i'm really impressed with

601
00:24:22,679 --> 00:24:24,640
appsetco.com they're the ones that

602
00:24:24,640 --> 00:24:26,640
really got this right

603
00:24:26,640 --> 00:24:28,559
many other articles kind of flirted with

604
00:24:28,559 --> 00:24:30,720
the technical details they got it right

605
00:24:30,720 --> 00:24:34,720
high five appsetco.com so what is this

606
00:24:34,720 --> 00:24:36,480
this is the vulnerability here we have

607
00:24:36,480 --> 00:24:38,320
capitalone.com

608
00:24:38,320 --> 00:24:41,600
and they had a parameter that the server

609
00:24:41,600 --> 00:24:43,200
acted upon

610
00:24:43,200 --> 00:24:46,159
let me say this again capital one had a

611
00:24:46,159 --> 00:24:49,279
parameter in the url that itself was a

612
00:24:49,279 --> 00:24:52,400
complete url that the server would act

613
00:24:52,400 --> 00:24:55,440
upon and that url used to be like a news

614
00:24:55,440 --> 00:24:58,400
article whoever the attacker was she

615
00:24:58,400 --> 00:24:59,279
knew

616
00:24:59,279 --> 00:25:02,880
that this was an aws application she was

617
00:25:02,880 --> 00:25:06,400
an ex-aws employee is my understanding

618
00:25:06,400 --> 00:25:09,360
and she saw that capital one was doing

619
00:25:09,360 --> 00:25:11,679
this and she couldn't help herself she

620
00:25:11,679 --> 00:25:13,039
modified it

621
00:25:13,039 --> 00:25:15,600
she sorry she modified it

622
00:25:15,600 --> 00:25:19,840
where it was a standard aws artifact

623
00:25:19,840 --> 00:25:23,919
169 54 1694 if you're an aws developer

624
00:25:23,919 --> 00:25:26,559
that's a standard intranet for your aws

625
00:25:26,559 --> 00:25:30,240
setup and this url with this server is

626
00:25:30,240 --> 00:25:32,799
in the aws so they're making an intranet

627
00:25:32,799 --> 00:25:33,679
hit

628
00:25:33,679 --> 00:25:35,600
to grab security cadentials out of the

629
00:25:35,600 --> 00:25:36,559
waff

630
00:25:36,559 --> 00:25:38,799
ever see the movie

631
00:25:38,799 --> 00:25:40,799
the matrix what did morpheus say

632
00:25:40,799 --> 00:25:42,559
morpheus says

633
00:25:42,559 --> 00:25:45,440
life it seems is not without his sense

634
00:25:45,440 --> 00:25:48,159
of irony i'm probably misquoting him but

635
00:25:48,159 --> 00:25:51,200
bear with me but this is so ironic they

636
00:25:51,200 --> 00:25:53,120
lit the attacker

637
00:25:53,120 --> 00:25:55,520
i'm a little bit of a web application

638
00:25:55,520 --> 00:25:57,679
firewall naysayer it's it's for

639
00:25:57,679 --> 00:25:59,120
marketing don't worry about it but the

640
00:25:59,120 --> 00:26:01,600
reason here's this is great because here

641
00:26:01,600 --> 00:26:04,480
we have an attack that punches through a

642
00:26:04,480 --> 00:26:07,120
web application firewall

643
00:26:07,120 --> 00:26:10,480
to steal the credential file of the waff

644
00:26:10,480 --> 00:26:13,200
which was extracted through the waf

645
00:26:13,200 --> 00:26:16,480
allow the attacker to log into the aws

646
00:26:16,480 --> 00:26:18,000
for capital one

647
00:26:18,000 --> 00:26:20,720
navigate to the s3 bucket you know those

648
00:26:20,720 --> 00:26:23,440
s3 buckets a hundred million

649
00:26:23,440 --> 00:26:25,520
applications the biggest banking private

650
00:26:25,520 --> 00:26:27,760
data heist one of the biggest banking

651
00:26:27,760 --> 00:26:29,600
heists in history equifax is a little

652
00:26:29,600 --> 00:26:31,360
bit bigger there you go

653
00:26:31,360 --> 00:26:35,200
server side request forgery and again

654
00:26:35,200 --> 00:26:37,760
why is this a problem because that

655
00:26:37,760 --> 00:26:40,320
parameter is acted on by a user it used

656
00:26:40,320 --> 00:26:42,120
to be like a news like

657
00:26:42,120 --> 00:26:44,960
capitalone.com question mark url equals

658
00:26:44,960 --> 00:26:48,240
cap1 slash news it's really poorly

659
00:26:48,240 --> 00:26:50,559
written called the server side include

660
00:26:50,559 --> 00:26:53,919
and it's the url that the server acts on

661
00:26:53,919 --> 00:26:56,320
as a parameter you could have fixed this

662
00:26:56,320 --> 00:26:58,480
with validation if

663
00:26:58,480 --> 00:27:01,480
the url starts with

664
00:27:01,480 --> 00:27:05,480
https capitalone.com

665
00:27:05,520 --> 00:27:07,120
it would have stopped the problem in one

666
00:27:07,120 --> 00:27:11,039
line of code instead we got like aws

667
00:27:11,039 --> 00:27:13,279
keys getting stolen is this really a

668
00:27:13,279 --> 00:27:15,039
problem besides capital one better

669
00:27:15,039 --> 00:27:16,960
believe it we have git lab with the

670
00:27:16,960 --> 00:27:20,080
major c cert with the major um ssrf

671
00:27:20,080 --> 00:27:23,039
vulnerability earlier this year

672
00:27:23,039 --> 00:27:24,240
we see

673
00:27:24,240 --> 00:27:27,520
microsoft exchange leading to 30 000

674
00:27:27,520 --> 00:27:30,240
organizations getting getting

675
00:27:30,240 --> 00:27:33,360
getting compromised because of ssrf

676
00:27:33,360 --> 00:27:36,159
through microsoft exchange that's pretty

677
00:27:36,159 --> 00:27:38,480
horrific let's look at it from another

678
00:27:38,480 --> 00:27:40,960
angle this is something i often do where

679
00:27:40,960 --> 00:27:43,360
i'm sending data into the public

680
00:27:43,360 --> 00:27:45,360
rest service and then add with the

681
00:27:45,360 --> 00:27:48,960
parameter that i add to a url

682
00:27:48,960 --> 00:27:52,159
that i use to retrieve intranet services

683
00:27:52,159 --> 00:27:54,159
so this is hard coded in my code

684
00:27:54,159 --> 00:27:57,360
internal data and i'm adding a parameter

685
00:27:57,360 --> 00:27:59,840
to it it came from the user hey

686
00:27:59,840 --> 00:28:02,640
what kind of parameter can i use here to

687
00:28:02,640 --> 00:28:04,399
mess with that path

688
00:28:04,399 --> 00:28:05,440
dot

689
00:28:05,440 --> 00:28:08,880
dot slash path traversal so my attack

690
00:28:08,880 --> 00:28:12,399
would be this here's the url

691
00:28:12,399 --> 00:28:15,120
that that parameter data goes right

692
00:28:15,120 --> 00:28:18,399
there there's my path traversal ssrf

693
00:28:18,399 --> 00:28:21,760
attack so internal slash data slash dot

694
00:28:21,760 --> 00:28:25,440
slash dot dot slash the final url is

695
00:28:25,440 --> 00:28:29,120
internal admin global report so what's

696
00:28:29,120 --> 00:28:32,080
the point here i've gotten the server to

697
00:28:32,080 --> 00:28:33,919
change where it's loading a resource

698
00:28:33,919 --> 00:28:36,720
from hey does that back end internal

699
00:28:36,720 --> 00:28:39,600
server do good access control

700
00:28:39,600 --> 00:28:41,840
mostly it doesn't from what i've seen

701
00:28:41,840 --> 00:28:43,120
and it should

702
00:28:43,120 --> 00:28:45,520
all of your back end services should

703
00:28:45,520 --> 00:28:48,480
require an active session or jot and do

704
00:28:48,480 --> 00:28:50,960
good access control we always thought

705
00:28:50,960 --> 00:28:53,279
that access control was most important

706
00:28:53,279 --> 00:28:55,600
at the public endpoint that's not true

707
00:28:55,600 --> 00:28:57,600
the most important place to do access

708
00:28:57,600 --> 00:28:58,640
control

709
00:28:58,640 --> 00:29:01,440
is in the back end services and it's we

710
00:29:01,440 --> 00:29:04,559
have to rewrite a generation of services

711
00:29:04,559 --> 00:29:06,799
to accomplish that goal and it's a big

712
00:29:06,799 --> 00:29:09,120
problem so how do you fix this problem

713
00:29:09,120 --> 00:29:11,760
you are all in code and be great be

714
00:29:11,760 --> 00:29:14,320
specific about url encoding if i'm

715
00:29:14,320 --> 00:29:16,240
adding data to the end of a path of a

716
00:29:16,240 --> 00:29:19,520
url that i encode for the path url path

717
00:29:19,520 --> 00:29:21,520
encoding if i'm adding data to a

718
00:29:21,520 --> 00:29:25,120
parameter i do url parameter so what do

719
00:29:25,120 --> 00:29:27,360
we got what's this the problem is now

720
00:29:27,360 --> 00:29:30,799
you url encode parameters you add to a

721
00:29:30,799 --> 00:29:33,919
url so you have a well-formed url immune

722
00:29:33,919 --> 00:29:36,640
to path traversal that the server then

723
00:29:36,640 --> 00:29:38,240
acts upon

724
00:29:38,240 --> 00:29:40,240
you know i learned about ssrf mostly

725
00:29:40,240 --> 00:29:43,440
from orange to psy his talks here are

726
00:29:43,440 --> 00:29:45,120
world class

727
00:29:45,120 --> 00:29:49,279
explaining all different types of ssrf

728
00:29:49,279 --> 00:29:51,039
and when i'm teaching developers to

729
00:29:51,039 --> 00:29:52,799
write secure code i give them this

730
00:29:52,799 --> 00:29:56,000
summary you want great authentication

731
00:29:56,000 --> 00:29:58,720
and great access control on your back

732
00:29:58,720 --> 00:30:00,320
end apis

733
00:30:00,320 --> 00:30:02,320
this pattern the pattern where we like

734
00:30:02,320 --> 00:30:04,640
do security at the front end and have

735
00:30:04,640 --> 00:30:07,279
all these open back end apis we got to

736
00:30:07,279 --> 00:30:08,799
stop doing that it's nonsense from a

737
00:30:08,799 --> 00:30:10,559
security point of view and if you're

738
00:30:10,559 --> 00:30:15,279
using a url as a parameter do strong url

739
00:30:15,279 --> 00:30:19,120
validation and overall stop taking urls

740
00:30:19,120 --> 00:30:21,840
as a full parameter that the server then

741
00:30:21,840 --> 00:30:23,919
acts upon that's the that's one of the

742
00:30:23,919 --> 00:30:27,279
anti-patterns also if you're building a

743
00:30:27,279 --> 00:30:30,000
url that's partially user data and

744
00:30:30,000 --> 00:30:32,159
partially static content and the

745
00:30:32,159 --> 00:30:33,840
server's gonna act on that to do

746
00:30:33,840 --> 00:30:36,159
internet hits please make sure you're

747
00:30:36,159 --> 00:30:39,520
building url safely when it includes a

748
00:30:39,520 --> 00:30:42,000
portion of untrusted data mostly with

749
00:30:42,000 --> 00:30:44,559
url encoding to build a legal url and

750
00:30:44,559 --> 00:30:45,520
also

751
00:30:45,520 --> 00:30:47,600
i kind of got this from netflix's work

752
00:30:47,600 --> 00:30:49,120
netflix i give them a hard time but they

753
00:30:49,120 --> 00:30:51,120
also put a lot of great security

754
00:30:51,120 --> 00:30:54,240
resources out there netflix security one

755
00:30:54,240 --> 00:30:55,919
of the best in the world in terms of

756
00:30:55,919 --> 00:30:58,000
what they've given to the world

757
00:30:58,000 --> 00:31:00,240
to demonstrate to share what they've

758
00:31:00,240 --> 00:31:02,880
learned in their own security work

759
00:31:02,880 --> 00:31:04,880
and so this is like like leaf and hey

760
00:31:04,880 --> 00:31:06,880
leaf he taught me like put network

761
00:31:06,880 --> 00:31:08,880
controls around individual services it's

762
00:31:08,880 --> 00:31:11,120
really easy to set up and now if you

763
00:31:11,120 --> 00:31:14,159
know that this service may only receive

764
00:31:14,159 --> 00:31:16,480
from that and send to that

765
00:31:16,480 --> 00:31:19,200
simple network controls will help limit

766
00:31:19,200 --> 00:31:22,480
ssrf damage that's worth considering

767
00:31:22,480 --> 00:31:25,360
and guess what that's my take on request

768
00:31:25,360 --> 00:31:27,840
forgery on the web how to educate

769
00:31:27,840 --> 00:31:30,559
developers about this i hope it helped

770
00:31:30,559 --> 00:31:33,200
you in some way write more secure code

771
00:31:33,200 --> 00:31:35,360
or do your job as an analyst

772
00:31:35,360 --> 00:31:38,240
i if you have any i'd love to take any

773
00:31:38,240 --> 00:31:40,960
questions from you and i'm done for now

774
00:31:40,960 --> 00:31:44,279
thanks everyone

775
00:31:46,000 --> 00:31:47,200
hi jim

776
00:31:47,200 --> 00:31:49,760
so uh wow

777
00:31:49,760 --> 00:31:52,000
give me a second to uh recuperate from

778
00:31:52,000 --> 00:31:54,559
your talk okay the problem is uh

779
00:31:54,559 --> 00:31:56,559
overwhelming how much information you

780
00:31:56,559 --> 00:31:57,679
share

781
00:31:57,679 --> 00:31:58,880
so

782
00:31:58,880 --> 00:32:00,960
actually i got one major question is

783
00:32:00,960 --> 00:32:02,960
actually uh

784
00:32:02,960 --> 00:32:05,360
the synchronizer token pattern i put

785
00:32:05,360 --> 00:32:07,440
them also in the chat trust me

786
00:32:07,440 --> 00:32:10,240
it's the same thing as the built-in csf

787
00:32:10,240 --> 00:32:12,080
token technique and water metaps

788
00:32:12,080 --> 00:32:14,399
frameworks

789
00:32:14,399 --> 00:32:16,720
so you're asking me is the synchronizer

790
00:32:16,720 --> 00:32:19,360
token the same thing that we see in

791
00:32:19,360 --> 00:32:20,880
framework synchronizer token we're

792
00:32:20,880 --> 00:32:22,640
looking at this right here right yeah

793
00:32:22,640 --> 00:32:25,039
this is what's built into most standard

794
00:32:25,039 --> 00:32:27,760
web frameworks but please confirm it you

795
00:32:27,760 --> 00:32:29,039
don't just get it automatically you

796
00:32:29,039 --> 00:32:31,519
often have to enable it or turn it on or

797
00:32:31,519 --> 00:32:34,320
specify it for certain features it's

798
00:32:34,320 --> 00:32:37,360
usually available in your framework but

799
00:32:37,360 --> 00:32:38,799
make sure you're enabling and

800
00:32:38,799 --> 00:32:41,039
configuring it properly in almost every

801
00:32:41,039 --> 00:32:43,360
framework there's a guide that shows you

802
00:32:43,360 --> 00:32:45,200
how to do it it's pretty straightforward

803
00:32:45,200 --> 00:32:46,720
so yes it's there

804
00:32:46,720 --> 00:32:49,360
it's not always default be sure to

805
00:32:49,360 --> 00:32:52,320
enable it and verify it carefully

806
00:32:52,320 --> 00:32:54,000
there you go

807
00:32:54,000 --> 00:32:56,159
okay here we have plenty of time left

808
00:32:56,159 --> 00:32:57,840
because we should go to the whole uh

809
00:32:57,840 --> 00:33:00,720
full hour so uh the next question is do

810
00:33:00,720 --> 00:33:02,320
you really believe these are texts and i

811
00:33:02,320 --> 00:33:04,080
put it all in the chat for you do you

812
00:33:04,080 --> 00:33:05,760
really believe that these attacks can be

813
00:33:05,760 --> 00:33:08,000
automatically tested with dust tools

814
00:33:08,000 --> 00:33:11,279
like sap webspec etc i feel true

815
00:33:11,279 --> 00:33:14,080
detection happens only using the tools

816
00:33:14,080 --> 00:33:15,600
manually like

817
00:33:15,600 --> 00:33:18,080
do you agree to this not at all no

818
00:33:18,080 --> 00:33:20,480
that's that that's that's nonsense

819
00:33:20,480 --> 00:33:23,679
because the reality is there's an older

820
00:33:23,679 --> 00:33:25,840
project owas called the sea surf tester

821
00:33:25,840 --> 00:33:28,000
it's not maintained anymore but testing

822
00:33:28,000 --> 00:33:30,480
for sea surf is trivial you go you make

823
00:33:30,480 --> 00:33:33,039
a make a transaction request that does

824
00:33:33,039 --> 00:33:35,360
something sensitive record that

825
00:33:35,360 --> 00:33:38,799
transaction log out log back in and

826
00:33:38,799 --> 00:33:41,120
replay that transaction if it works you

827
00:33:41,120 --> 00:33:44,000
got c surf if it doesn't maybe you don't

828
00:33:44,000 --> 00:33:47,600
so to test the to test if c surf is

829
00:33:47,600 --> 00:33:50,240
valid is pretty simple in das

830
00:33:50,240 --> 00:33:52,159
technologies you don't need manual

831
00:33:52,159 --> 00:33:54,799
reviewers to find it das does a good job

832
00:33:54,799 --> 00:33:56,720
especially dashed right control

833
00:33:56,720 --> 00:33:59,039
authentication again i log in

834
00:33:59,039 --> 00:34:02,000
submit a transaction record it log out

835
00:34:02,000 --> 00:34:04,640
log back in resubmit the transaction if

836
00:34:04,640 --> 00:34:08,000
it works boom you got c surf done so i

837
00:34:08,000 --> 00:34:10,079
can do this via dashed automation pretty

838
00:34:10,079 --> 00:34:12,879
easily burp does it i know different

839
00:34:12,879 --> 00:34:16,000
services do it so

840
00:34:16,000 --> 00:34:18,879
i i respectfully don't agree that i got

841
00:34:18,879 --> 00:34:21,119
to do it manually i don't agree

842
00:34:21,119 --> 00:34:23,119
automation's critical in the era of

843
00:34:23,119 --> 00:34:25,440
devops testing and definitely we can

844
00:34:25,440 --> 00:34:29,280
test for c surf statically dynamically

845
00:34:29,280 --> 00:34:30,560
absolutely

846
00:34:30,560 --> 00:34:33,960
another questions

847
00:34:34,079 --> 00:34:35,918
and by the way if you have a follow-up

848
00:34:35,918 --> 00:34:37,440
if you have a follow-up comment and

849
00:34:37,440 --> 00:34:39,199
disagree with me i encourage this

850
00:34:39,199 --> 00:34:41,280
discussion this is helpful so you're

851
00:34:41,280 --> 00:34:42,879
welcome to give me a follow-up if you

852
00:34:42,879 --> 00:34:45,119
wish to go ahead

853
00:34:45,119 --> 00:34:49,159
there's another question about

854
00:34:50,130 --> 00:34:51,679
[Music]

855
00:34:51,679 --> 00:34:52,879
sorry

856
00:34:52,879 --> 00:34:54,719
there was a poll coming up in the

857
00:34:54,719 --> 00:34:56,800
interface between so the other one

858
00:34:56,800 --> 00:34:58,960
expression would be would hmac signing

859
00:34:58,960 --> 00:35:01,359
be a valid mechanism to validate data on

860
00:35:01,359 --> 00:35:04,400
the ul assuming url data does not show

861
00:35:04,400 --> 00:35:05,280
off

862
00:35:05,280 --> 00:35:07,599
your network no i don't like to because

863
00:35:07,599 --> 00:35:10,079
this is a client-side control

864
00:35:10,079 --> 00:35:12,160
now maybe you may you may h-mac your

865
00:35:12,160 --> 00:35:13,920
token but there's no need you can just

866
00:35:13,920 --> 00:35:16,480
use a cryptographically random token

867
00:35:16,480 --> 00:35:19,119
so i don't want the client to hmac stuff

868
00:35:19,119 --> 00:35:21,520
so i don't see hmax as part of c-surf

869
00:35:21,520 --> 00:35:24,400
defense as viable in fact i surgically

870
00:35:24,400 --> 00:35:26,720
remove that from the cheat sheet after

871
00:35:26,720 --> 00:35:28,160
getting other

872
00:35:28,160 --> 00:35:30,400
experts to vet that that's not a really

873
00:35:30,400 --> 00:35:32,079
solid defense there's no need to use

874
00:35:32,079 --> 00:35:34,800
hmax and sea surf protection for my own

875
00:35:34,800 --> 00:35:36,960
work that's my opinion on that i'm

876
00:35:36,960 --> 00:35:39,280
hoping to change my mind if you give me

877
00:35:39,280 --> 00:35:41,040
a good example of how to do it but all

878
00:35:41,040 --> 00:35:44,000
the previous cheat sheet talks on hmac

879
00:35:44,000 --> 00:35:46,480
when vetted by other experts this is not

880
00:35:46,480 --> 00:35:48,640
a sensible defense from what i know but

881
00:35:48,640 --> 00:35:50,720
i'm open to changing my mind if you give

882
00:35:50,720 --> 00:35:52,400
me better evidence

883
00:35:52,400 --> 00:35:54,560
i think i really like that because as

884
00:35:54,560 --> 00:35:56,480
you say you think there's a lot of

885
00:35:56,480 --> 00:35:58,320
people who know the same issue as much

886
00:35:58,320 --> 00:36:00,320
as you but still you say sometimes you

887
00:36:00,320 --> 00:36:02,000
change your mind and you you have to

888
00:36:02,000 --> 00:36:04,480
learn from what has changed in the uh

889
00:36:04,480 --> 00:36:06,320
things that we had something cheat sheet

890
00:36:06,320 --> 00:36:08,400
we recommended it and then we have to

891
00:36:08,400 --> 00:36:10,000
change it because we find out it's not

892
00:36:10,000 --> 00:36:12,320
true i think that's a very valid that

893
00:36:12,320 --> 00:36:13,839
nobody has all the knowledge but we

894
00:36:13,839 --> 00:36:16,400
learn continuously yeah i'm a teacher

895
00:36:16,400 --> 00:36:18,400
but i'm really a student i'm constantly

896
00:36:18,400 --> 00:36:20,880
learning new things on a daily basis and

897
00:36:20,880 --> 00:36:23,040
i'm a scientist i'm happy to change my

898
00:36:23,040 --> 00:36:23,920
mind

899
00:36:23,920 --> 00:36:26,160
if you give me good evidence but the

900
00:36:26,160 --> 00:36:28,800
evidence i've seen on doing signing and

901
00:36:28,800 --> 00:36:31,440
hmac for sea surf defense it's a huge

902
00:36:31,440 --> 00:36:33,280
complexity and key management for no

903
00:36:33,280 --> 00:36:35,760
real benefit there's other ways to solve

904
00:36:35,760 --> 00:36:37,680
sea surf in a much more straightforward

905
00:36:37,680 --> 00:36:40,480
manner that's what i recommend

906
00:36:40,480 --> 00:36:41,440
yeah

907
00:36:41,440 --> 00:36:43,280
here goes another one

908
00:36:43,280 --> 00:36:46,720
so my server side code has web client

909
00:36:46,720 --> 00:36:48,880
has a web client that access a third

910
00:36:48,880 --> 00:36:51,520
party ul based on the user's input the

911
00:36:51,520 --> 00:36:53,280
danger according to you is the user can

912
00:36:53,280 --> 00:36:55,359
provide an internal api

913
00:36:55,359 --> 00:36:57,920
and access sensitive info right

914
00:36:57,920 --> 00:36:59,839
absolutely let me go back to that slide

915
00:36:59,839 --> 00:37:03,200
again so the the issue here is again

916
00:37:03,200 --> 00:37:06,400
you're taking you're taking data from a

917
00:37:06,400 --> 00:37:07,440
user

918
00:37:07,440 --> 00:37:09,760
that you add to another fragment of a

919
00:37:09,760 --> 00:37:12,240
third-party url and one of two things is

920
00:37:12,240 --> 00:37:13,280
gonna happen

921
00:37:13,280 --> 00:37:16,320
either i'm able to like subvert the

922
00:37:16,320 --> 00:37:19,760
entire url and change what resource the

923
00:37:19,760 --> 00:37:23,280
server loads or more my code i see this

924
00:37:23,280 --> 00:37:24,560
stuff where

925
00:37:24,560 --> 00:37:28,560
i'm able to subvert a portion of the url

926
00:37:28,560 --> 00:37:30,880
and using path traversal i can still

927
00:37:30,880 --> 00:37:34,000
reroute that that that url in various

928
00:37:34,000 --> 00:37:37,280
ways again i'm trying to send data to

929
00:37:37,280 --> 00:37:40,640
the server to trick the server into

930
00:37:40,640 --> 00:37:43,200
loading content that it didn't intend to

931
00:37:43,200 --> 00:37:44,960
load for that request that's what

932
00:37:44,960 --> 00:37:47,359
service on request forgery is i send

933
00:37:47,359 --> 00:37:50,160
data to the server and now the server is

934
00:37:50,160 --> 00:37:52,960
going to visit that internal link

935
00:37:52,960 --> 00:37:55,280
in a in a path different than what they

936
00:37:55,280 --> 00:37:58,000
expected by doing dot dot slash and

937
00:37:58,000 --> 00:37:59,119
something else

938
00:37:59,119 --> 00:38:02,160
there you go there's your answer

939
00:38:02,160 --> 00:38:05,119
thank you so another one it's uh how

940
00:38:05,119 --> 00:38:06,720
many scanners

941
00:38:06,720 --> 00:38:09,520
improving on the false positive ratios

942
00:38:09,520 --> 00:38:12,480
for cosine us 43 i mean

943
00:38:12,480 --> 00:38:15,119
i mean a lot of us focus on scanners i

944
00:38:15,119 --> 00:38:17,200
don't i don't think security testing is

945
00:38:17,200 --> 00:38:18,880
that big of a deal in my world it's not

946
00:38:18,880 --> 00:38:20,560
there's so many scanners they're getting

947
00:38:20,560 --> 00:38:23,280
good they're decent we augment scanning

948
00:38:23,280 --> 00:38:25,920
by using a a variety of scanning the

949
00:38:25,920 --> 00:38:28,880
biggest anti-pattern i think is when you

950
00:38:28,880 --> 00:38:31,440
go buy a really expensive scanner from

951
00:38:31,440 --> 00:38:33,760
one vendor and that's your whole program

952
00:38:33,760 --> 00:38:36,079
that's foolishness you want to use a

953
00:38:36,079 --> 00:38:38,320
combination of dast

954
00:38:38,320 --> 00:38:41,119
sas and i usually use two sas products i

955
00:38:41,119 --> 00:38:43,680
usually use some graph for my

956
00:38:43,680 --> 00:38:45,839
immediate check-in defense and then like

957
00:38:45,839 --> 00:38:48,000
something like check marks for my daily

958
00:38:48,000 --> 00:38:51,119
long scan so i love sas and i use

959
00:38:51,119 --> 00:38:53,839
multiple tools usually for das i love

960
00:38:53,839 --> 00:38:56,400
zap i love burp there's white have many

961
00:38:56,400 --> 00:38:58,720
others out there that are really solid

962
00:38:58,720 --> 00:39:02,000
and for for sca there's oaus appendage

963
00:39:02,000 --> 00:39:03,839
check there's vendors like sneak and

964
00:39:03,839 --> 00:39:05,520
others who do a great job in that area

965
00:39:05,520 --> 00:39:07,119
so i want to use a combination of those

966
00:39:07,119 --> 00:39:09,760
three tools and i think is kind of

967
00:39:09,760 --> 00:39:11,680
expensive but it's

968
00:39:11,680 --> 00:39:13,680
gives me some great results in dev

969
00:39:13,680 --> 00:39:16,000
testing some of my customers use some of

970
00:39:16,000 --> 00:39:18,720
these famous is tools they're expensive

971
00:39:18,720 --> 00:39:20,640
but they find some good stuff

972
00:39:20,640 --> 00:39:23,680
so don't depend on any one tool have a

973
00:39:23,680 --> 00:39:27,119
combination of tools mostly that are

974
00:39:27,119 --> 00:39:29,680
automated through devops lifecycle then

975
00:39:29,680 --> 00:39:32,320
you run your other longer scan tools in

976
00:39:32,320 --> 00:39:34,640
the evening as like a more long-form

977
00:39:34,640 --> 00:39:36,800
scan and that's how i like to do

978
00:39:36,800 --> 00:39:39,280
assurance and i can do this turnkey

979
00:39:39,280 --> 00:39:41,359
these days just so i can do it in github

980
00:39:41,359 --> 00:39:43,760
in like five minutes i can ramp up you

981
00:39:43,760 --> 00:39:45,119
know different servers and get this

982
00:39:45,119 --> 00:39:48,160
running a lot more easy today so my

983
00:39:48,160 --> 00:39:50,160
world getting up a rigorous testing

984
00:39:50,160 --> 00:39:52,960
program it's easy they find c surf no

985
00:39:52,960 --> 00:39:53,920
problem

986
00:39:53,920 --> 00:39:56,160
false positives of course you review as

987
00:39:56,160 --> 00:39:58,720
part of triage is part of application

988
00:39:58,720 --> 00:40:01,280
security and try to tune your tools to

989
00:40:01,280 --> 00:40:04,240
do less triage and in most teams we got

990
00:40:04,240 --> 00:40:07,280
mature capacity in this area these days

991
00:40:07,280 --> 00:40:09,119
so what's the hard part getting

992
00:40:09,119 --> 00:40:11,359
developers to write secure code this is

993
00:40:11,359 --> 00:40:14,480
my job in my world but i'm i care more

994
00:40:14,480 --> 00:40:17,200
about how do i get developers to do this

995
00:40:17,200 --> 00:40:20,160
right and testing is no big deal ted we

996
00:40:20,160 --> 00:40:22,240
have very mature testing now to find

997
00:40:22,240 --> 00:40:24,480
these problems you got to go fix the

998
00:40:24,480 --> 00:40:27,599
bugs that's the real issue today in my

999
00:40:27,599 --> 00:40:29,520
opinion done

1000
00:40:29,520 --> 00:40:31,040
yeah

1001
00:40:31,040 --> 00:40:34,079
i think using one tool for security it's

1002
00:40:34,079 --> 00:40:36,079
like using all top 10 for a security

1003
00:40:36,079 --> 00:40:39,280
program right i'm gonna i'm gonna steal

1004
00:40:39,280 --> 00:40:42,000
that quote from you martin using one

1005
00:40:42,000 --> 00:40:44,640
tool for your appsec program is liking

1006
00:40:44,640 --> 00:40:46,400
base is like basing your whole apsec

1007
00:40:46,400 --> 00:40:49,119
program off a top ten list i agree high

1008
00:40:49,119 --> 00:40:50,720
five

1009
00:40:50,720 --> 00:40:52,960
look i even said something nice about i

1010
00:40:52,960 --> 00:40:55,839
asked i almost never do that but i did

1011
00:40:55,839 --> 00:40:57,440
so i'm not trying to

1012
00:40:57,440 --> 00:41:00,560
use a collection of tools including i

1013
00:41:00,560 --> 00:41:02,319
asked you can quote me on that

1014
00:41:02,319 --> 00:41:05,119
my i asked friends

1015
00:41:05,119 --> 00:41:07,119
okay so

1016
00:41:07,119 --> 00:41:09,280
we have still plenty of time left but i

1017
00:41:09,280 --> 00:41:11,040
see the questions getting slow so

1018
00:41:11,040 --> 00:41:13,599
there's one question more personal note

1019
00:41:13,599 --> 00:41:15,119
what's your favorite flavor on

1020
00:41:15,119 --> 00:41:17,440
strawberry

1021
00:41:17,440 --> 00:41:18,480
oh

1022
00:41:18,480 --> 00:41:21,760
maple stropwaffle is someone brought me

1023
00:41:21,760 --> 00:41:24,160
maple stropwaffle it when i was in

1024
00:41:24,160 --> 00:41:26,000
netherlands when i was in amsterdam last

1025
00:41:26,000 --> 00:41:28,000
giving a talk and they were like sir

1026
00:41:28,000 --> 00:41:29,119
this is going to be the best throw

1027
00:41:29,119 --> 00:41:31,760
waffle you've ever had made made fresh

1028
00:41:31,760 --> 00:41:34,319
from my town and i'm like and like

1029
00:41:34,319 --> 00:41:36,079
everyone's handing me strobe waffles i

1030
00:41:36,079 --> 00:41:38,400
got i too much sugar stacks of like

1031
00:41:38,400 --> 00:41:41,119
dozens of them and i tried a little bit

1032
00:41:41,119 --> 00:41:43,599
of all the stroke waffles given to me in

1033
00:41:43,599 --> 00:41:46,560
amsterdam and that guy who claimed his

1034
00:41:46,560 --> 00:41:48,560
maple homemade throat waffle from his

1035
00:41:48,560 --> 00:41:51,040
town was the best his was not just the

1036
00:41:51,040 --> 00:41:52,800
best it was in a whole different

1037
00:41:52,800 --> 00:41:55,520
category of excellence i will always

1038
00:41:55,520 --> 00:41:57,760
remember the moment that i bit into that

1039
00:41:57,760 --> 00:41:59,520
maple throat waffle

1040
00:41:59,520 --> 00:42:01,359
and it was the best ever i won't forget

1041
00:42:01,359 --> 00:42:02,560
it

1042
00:42:02,560 --> 00:42:04,880
that's very funny to see go metro golf

1043
00:42:04,880 --> 00:42:06,800
is coming up i haven't been out there

1044
00:42:06,800 --> 00:42:08,079
for the last few years so i don't know

1045
00:42:08,079 --> 00:42:09,599
if this elixirs but

1046
00:42:09,599 --> 00:42:11,040
it's very interesting

1047
00:42:11,040 --> 00:42:13,440
and martin i'm back on a no sugar kick

1048
00:42:13,440 --> 00:42:15,680
i'm just doing ketosis i eat meat and

1049
00:42:15,680 --> 00:42:16,960
vegetables

1050
00:42:16,960 --> 00:42:18,480
so i can keep my weight down and it's

1051
00:42:18,480 --> 00:42:20,079
very effective i don't do sugar anymore

1052
00:42:20,079 --> 00:42:22,000
boo boo sugar

1053
00:42:22,000 --> 00:42:24,160
yeah and that's a nice comment i think

1054
00:42:24,160 --> 00:42:26,560
we know both it's kevin wall says he

1055
00:42:26,560 --> 00:42:28,960
feel cheated because she didn't cover

1056
00:42:28,960 --> 00:42:30,880
click checking

1057
00:42:30,880 --> 00:42:32,240
all right let's do it let's do it real

1058
00:42:32,240 --> 00:42:34,000
quick kevin he's right hang on for a

1059
00:42:34,000 --> 00:42:35,119
second

1060
00:42:35,119 --> 00:42:37,440
we have we got time

1061
00:42:37,440 --> 00:42:40,720
so kevin you are right even though i

1062
00:42:40,720 --> 00:42:43,520
really enjoy cheating you in general i

1063
00:42:43,520 --> 00:42:45,119
will talk about

1064
00:42:45,119 --> 00:42:47,040
click jacking right now let's do it let

1065
00:42:47,040 --> 00:42:48,880
me see if i can find it

1066
00:42:48,880 --> 00:42:51,200
um

1067
00:42:51,520 --> 00:42:54,400
do i even have that presentation anymore

1068
00:42:54,400 --> 00:42:56,319
you're right i forgot to edit in i said

1069
00:42:56,319 --> 00:42:59,040
i would in the topic uh

1070
00:42:59,040 --> 00:43:01,200
where is it it's one of my oldest slide

1071
00:43:01,200 --> 00:43:04,079
decks ever

1072
00:43:04,079 --> 00:43:05,920
hang on hang on kevin i'm with you hang

1073
00:43:05,920 --> 00:43:07,040
on

1074
00:43:07,040 --> 00:43:07,920
click

1075
00:43:07,920 --> 00:43:09,359
see if i can find it in pro

1076
00:43:09,359 --> 00:43:12,359
presentations

1077
00:43:12,800 --> 00:43:14,720
kevin's right

1078
00:43:14,720 --> 00:43:16,480
kevin's always right

1079
00:43:16,480 --> 00:43:18,079
he's especially right today here you go

1080
00:43:18,079 --> 00:43:19,200
kevin

1081
00:43:19,200 --> 00:43:21,359
click jacking in a couple minutes click

1082
00:43:21,359 --> 00:43:22,480
jacking

1083
00:43:22,480 --> 00:43:24,800
was originally called the ui redress

1084
00:43:24,800 --> 00:43:26,319
attack by one of the original mozilla

1085
00:43:26,319 --> 00:43:28,560
developers is to trick a user into

1086
00:43:28,560 --> 00:43:30,160
clicking on something they never had to

1087
00:43:30,160 --> 00:43:32,880
click on it's abusing framing and css

1088
00:43:32,880 --> 00:43:36,160
transparency so here's my site and the

1089
00:43:36,160 --> 00:43:38,720
reality is it's evil.com and this is an

1090
00:43:38,720 --> 00:43:40,880
overlay because what's going on here is

1091
00:43:40,880 --> 00:43:42,560
there's an iframe

1092
00:43:42,560 --> 00:43:45,119
with a certain width height and position

1093
00:43:45,119 --> 00:43:47,760
with an opacity to make it invisible and

1094
00:43:47,760 --> 00:43:50,400
i'm framing gmail here now this is an

1095
00:43:50,400 --> 00:43:52,720
it's an active iframe on the top of the

1096
00:43:52,720 --> 00:43:54,800
z order stack it's up front it's the

1097
00:43:54,800 --> 00:43:56,640
front thing i'm gonna i'm gonna face as

1098
00:43:56,640 --> 00:44:00,319
a user but it's set to opacity zero

1099
00:44:00,319 --> 00:44:03,200
so it looks transparent

1100
00:44:03,200 --> 00:44:04,560
excuse me kevin

1101
00:44:04,560 --> 00:44:06,720
even though it's there it's transparent

1102
00:44:06,720 --> 00:44:08,400
on the top of the z order stack so go

1103
00:44:08,400 --> 00:44:09,359
back

1104
00:44:09,359 --> 00:44:11,440
when i click start game when i click on

1105
00:44:11,440 --> 00:44:13,599
it i can like i click one player first

1106
00:44:13,599 --> 00:44:15,680
when i click one player i'm really

1107
00:44:15,680 --> 00:44:18,560
clicking select all on the above um

1108
00:44:18,560 --> 00:44:20,720
obscure iframe that has an opacity of

1109
00:44:20,720 --> 00:44:23,520
zero when i hit start game i'm really

1110
00:44:23,520 --> 00:44:25,520
hitting the delete button that's click

1111
00:44:25,520 --> 00:44:28,240
jacking when you trick a user

1112
00:44:28,240 --> 00:44:30,240
basically into clicking or typing into

1113
00:44:30,240 --> 00:44:32,480
something that they don't realize what

1114
00:44:32,480 --> 00:44:35,359
they're really typing into so the way we

1115
00:44:35,359 --> 00:44:37,520
traditionally solve this

1116
00:44:37,520 --> 00:44:40,800
is with uh x frame options you could say

1117
00:44:40,800 --> 00:44:44,640
x frame option deny and that will stop

1118
00:44:44,640 --> 00:44:47,520
other sites from framing your your page

1119
00:44:47,520 --> 00:44:50,720
so you have a page that's very sensitive

1120
00:44:50,720 --> 00:44:54,560
and you add x frame option deny nobody

1121
00:44:54,560 --> 00:44:57,520
else can load your page in an iframe if

1122
00:44:57,520 --> 00:45:00,880
you say same origin then the same origin

1123
00:45:00,880 --> 00:45:03,760
and kevin the origin is the port

1124
00:45:03,760 --> 00:45:06,960
the host plus the protocol no it's not a

1125
00:45:06,960 --> 00:45:09,280
sub domain it's host

1126
00:45:09,280 --> 00:45:12,319
plus the protocol plus the port kevin

1127
00:45:12,319 --> 00:45:13,760
and so if you got if you if you're

1128
00:45:13,760 --> 00:45:16,560
loading a x frame option same origin

1129
00:45:16,560 --> 00:45:19,040
page from the same origin you may frame

1130
00:45:19,040 --> 00:45:21,680
them but no one else may we know we can

1131
00:45:21,680 --> 00:45:25,359
also say x frame options allow from but

1132
00:45:25,359 --> 00:45:28,079
many of the browsers don't support this

1133
00:45:28,079 --> 00:45:31,359
so it's not going to be effective now

1134
00:45:31,359 --> 00:45:33,680
now let's break out of this for a second

1135
00:45:33,680 --> 00:45:36,720
kevin so that that's traditionally how

1136
00:45:36,720 --> 00:45:40,000
you solve this and browser supported the

1137
00:45:40,000 --> 00:45:42,800
x-frame option response center forever

1138
00:45:42,800 --> 00:45:44,800
now wait a second kevin i'm not done for

1139
00:45:44,800 --> 00:45:47,119
i'm not done yet kevin kevin other thing

1140
00:45:47,119 --> 00:45:49,520
you can do is you can say csp

1141
00:45:49,520 --> 00:45:52,480
frame ancestors right let's go take a

1142
00:45:52,480 --> 00:45:54,319
look at this real quick if you're using

1143
00:45:54,319 --> 00:45:57,520
content security policy you can now do

1144
00:45:57,520 --> 00:46:00,079
allow from and have a list of valid

1145
00:46:00,079 --> 00:46:01,200
origins

1146
00:46:01,200 --> 00:46:03,839
where the the other x frame option

1147
00:46:03,839 --> 00:46:06,400
didn't support that so i can say content

1148
00:46:06,400 --> 00:46:09,920
security policy frame ancestors and have

1149
00:46:09,920 --> 00:46:13,440
a list of parents who are allowed to

1150
00:46:13,440 --> 00:46:14,480
frame me

1151
00:46:14,480 --> 00:46:16,800
and so there's there we go like

1152
00:46:16,800 --> 00:46:19,760
frame ancestor self that's my origin can

1153
00:46:19,760 --> 00:46:22,720
can frame my own page and this other

1154
00:46:22,720 --> 00:46:25,359
site can frame my pages this is really

1155
00:46:25,359 --> 00:46:28,800
simple to deploy this kevin csp frame

1156
00:46:28,800 --> 00:46:31,920
ancestors if you're a csp shop or x

1157
00:46:31,920 --> 00:46:35,599
frame options probably same origin if

1158
00:46:35,599 --> 00:46:37,520
you want to support older browsers as

1159
00:46:37,520 --> 00:46:39,200
well kevin

1160
00:46:39,200 --> 00:46:41,599
there's your answer sir i hope you feel

1161
00:46:41,599 --> 00:46:43,839
less cheated

1162
00:46:43,839 --> 00:46:45,280
in this talk

1163
00:46:45,280 --> 00:46:46,880
and that is the third kind of request

1164
00:46:46,880 --> 00:46:48,800
forgery solved in a pretty

1165
00:46:48,800 --> 00:46:50,240
straightforward way

1166
00:46:50,240 --> 00:46:53,240
boom

