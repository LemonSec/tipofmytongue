1
00:00:01,420 --> 00:00:05,630
[Music]

2
00:00:06,080 --> 00:00:08,880
yeah thanks for the the intro really uh

3
00:00:08,880 --> 00:00:10,719
again my name is randy jane goleski

4
00:00:10,719 --> 00:00:12,880
let's talk the how to work malicious

5
00:00:12,880 --> 00:00:15,519
automation and kickbot butt

6
00:00:15,519 --> 00:00:18,240
zero dollars

7
00:00:18,400 --> 00:00:20,320
uh together we're going to discuss

8
00:00:20,320 --> 00:00:23,600
antibot security and countering abusive

9
00:00:23,600 --> 00:00:26,080
scripts that target our web apps

10
00:00:26,080 --> 00:00:28,640
will go over where architecturally might

11
00:00:28,640 --> 00:00:31,840
detect and react to such activity and if

12
00:00:31,840 --> 00:00:33,520
you're missing any of those components

13
00:00:33,520 --> 00:00:35,840
now the good news is we'll talk about a

14
00:00:35,840 --> 00:00:37,440
lot of open source

15
00:00:37,440 --> 00:00:40,480
software and vendor agnostic tactics

16
00:00:40,480 --> 00:00:43,120
we'll cover three or more or more or

17
00:00:43,120 --> 00:00:45,680
less distinct ways to detect thoughts uh

18
00:00:45,680 --> 00:00:47,920
we'll do a brief threat profile to

19
00:00:47,920 --> 00:00:50,640
understand who we're engaging with

20
00:00:50,640 --> 00:00:52,079
there'll be plenty of practical

21
00:00:52,079 --> 00:00:53,840
maneuvers and strategies to utilize

22
00:00:53,840 --> 00:00:57,520
versus threat actors i'll also overview

23
00:00:57,520 --> 00:00:59,680
how you might mature in overall

24
00:00:59,680 --> 00:01:00,800
environment

25
00:01:00,800 --> 00:01:02,559
and where you might place your

26
00:01:02,559 --> 00:01:04,479
protections and other security

27
00:01:04,479 --> 00:01:07,119
appliances to more effectively counter

28
00:01:07,119 --> 00:01:08,159
bots

29
00:01:08,159 --> 00:01:10,159
doing less manual work and trying to

30
00:01:10,159 --> 00:01:13,520
achieve a more hardened attack surface

31
00:01:13,520 --> 00:01:16,479
there will be a demo walkthrough of pure

32
00:01:16,479 --> 00:01:17,840
open source

33
00:01:17,840 --> 00:01:18,960
trying to

34
00:01:18,960 --> 00:01:20,799
highlight the different components of an

35
00:01:20,799 --> 00:01:23,680
anti-bob program on a vagrant box that

36
00:01:23,680 --> 00:01:27,200
you can grab yourself uh if you'd like

37
00:01:27,200 --> 00:01:29,680
and that just shows i guess

38
00:01:29,680 --> 00:01:30,880
everything to

39
00:01:30,880 --> 00:01:32,720
working together in the talk

40
00:01:32,720 --> 00:01:34,640
uh open and effective

41
00:01:34,640 --> 00:01:36,880
and we'll also end on a realistic note

42
00:01:36,880 --> 00:01:41,600
and try not to uh break any hearts

43
00:01:41,600 --> 00:01:44,159
uh briefly who am i and what do i know

44
00:01:44,159 --> 00:01:46,799
about this stuff i'm doing security

45
00:01:46,799 --> 00:01:48,720
engineering right now for cryptocurrency

46
00:01:48,720 --> 00:01:52,320
exchange called bullish it's bullish.com

47
00:01:52,320 --> 00:01:55,920
um arguably dealing in digital cash can

48
00:01:55,920 --> 00:01:58,240
make you a popular attack target

49
00:01:58,240 --> 00:01:59,600
uh so we've been a lot of thought to

50
00:01:59,600 --> 00:02:02,240
anti-bot and before this i did pretty

51
00:02:02,240 --> 00:02:04,799
much the same uh while maturing product

52
00:02:04,799 --> 00:02:07,680
security program for hbo max

53
00:02:07,680 --> 00:02:10,560
the now infamous streaming service

54
00:02:10,560 --> 00:02:13,040
i joined there in 2020 before its public

55
00:02:13,040 --> 00:02:15,680
launch sort of laid the groundwork once

56
00:02:15,680 --> 00:02:18,480
projected to be 70 million plus

57
00:02:18,480 --> 00:02:21,520
subscribers by the end of this year

58
00:02:21,520 --> 00:02:23,280
and then earlier than that i've been a

59
00:02:23,280 --> 00:02:25,760
traveling hacker pen test consultant

60
00:02:25,760 --> 00:02:29,360
person including with aspect security a

61
00:02:29,360 --> 00:02:32,480
fallen entity strong coal advertised

62
00:02:32,480 --> 00:02:34,959
before that developer

63
00:02:34,959 --> 00:02:36,879
so overall a lot of exposure to the

64
00:02:36,879 --> 00:02:38,879
internet and spending a lot of time on

65
00:02:38,879 --> 00:02:40,400
the internet

66
00:02:40,400 --> 00:02:42,720
away from the computer i'm a student

67
00:02:42,720 --> 00:02:45,440
pilot playing planes around i also

68
00:02:45,440 --> 00:02:47,599
enjoyed shooting sports

69
00:02:47,599 --> 00:02:49,760
i currently live in south florida but

70
00:02:49,760 --> 00:02:51,680
spend a lot of time in new york city as

71
00:02:51,680 --> 00:02:52,640
well

72
00:02:52,640 --> 00:02:54,400
uh so feel free to reach out to my owasp

73
00:02:54,400 --> 00:02:57,680
email which is later in the deck about

74
00:02:57,680 --> 00:02:59,599
anything or meeting up

75
00:02:59,599 --> 00:03:02,400
happy to chat

76
00:03:02,400 --> 00:03:05,200
a quick couple of disclaimers the

77
00:03:05,200 --> 00:03:07,120
newer original part of our discussion is

78
00:03:07,120 --> 00:03:09,599
really how to set up and operationalize

79
00:03:09,599 --> 00:03:11,599
an anti-bot program

80
00:03:11,599 --> 00:03:13,840
uh for example if you're in a pinch

81
00:03:13,840 --> 00:03:16,000
without any protective measures already

82
00:03:16,000 --> 00:03:18,480
in place like age captcha

83
00:03:18,480 --> 00:03:20,800
my fingerprint your attackers

84
00:03:20,800 --> 00:03:22,879
the order of their incoming request

85
00:03:22,879 --> 00:03:25,440
headers and then block that using

86
00:03:25,440 --> 00:03:26,720
security

87
00:03:26,720 --> 00:03:28,720
and then have varnish in front of that

88
00:03:28,720 --> 00:03:31,280
making mod security's blocked responses

89
00:03:31,280 --> 00:03:33,599
look like normal negative responses from

90
00:03:33,599 --> 00:03:35,040
your service

91
00:03:35,040 --> 00:03:35,760
uh

92
00:03:35,760 --> 00:03:38,000
pretty decent at just stringing things

93
00:03:38,000 --> 00:03:39,280
together and doing

94
00:03:39,280 --> 00:03:40,159
that

95
00:03:40,159 --> 00:03:42,640
but the actual bot detection methodology

96
00:03:42,640 --> 00:03:44,959
and fingerprinting techniques uh the

97
00:03:44,959 --> 00:03:47,599
science behind much of this i have to

98
00:03:47,599 --> 00:03:49,360
give credit elsewhere

99
00:03:49,360 --> 00:03:51,200
there are a lot of open source authors

100
00:03:51,200 --> 00:03:53,120
that are just very generously published

101
00:03:53,120 --> 00:03:54,080
works

102
00:03:54,080 --> 00:03:55,680
and i've linked a lot of them in this

103
00:03:55,680 --> 00:03:56,640
deck

104
00:03:56,640 --> 00:03:58,640
they move the status field forward a lot

105
00:03:58,640 --> 00:03:59,680
more than

106
00:03:59,680 --> 00:04:01,360
i do

107
00:04:01,360 --> 00:04:02,799
and then also

108
00:04:02,799 --> 00:04:04,239
this content doesn't necessarily

109
00:04:04,239 --> 00:04:07,120
represent the user programs of my

110
00:04:07,120 --> 00:04:10,080
clients employers past or present any of

111
00:04:10,080 --> 00:04:12,319
that

112
00:04:12,720 --> 00:04:15,280
robots are coming

113
00:04:15,280 --> 00:04:16,320
if you

114
00:04:16,320 --> 00:04:18,238
put any new web app on the public

115
00:04:18,238 --> 00:04:20,560
internet and it has what even looks like

116
00:04:20,560 --> 00:04:22,320
a login page uh it's not really a

117
00:04:22,320 --> 00:04:24,880
question of if bots will show up but uh

118
00:04:24,880 --> 00:04:26,479
more of when

119
00:04:26,479 --> 00:04:28,800
you can test this pretty easily yourself

120
00:04:28,800 --> 00:04:30,960
and i've linked an open source project i

121
00:04:30,960 --> 00:04:32,560
like called help

122
00:04:32,560 --> 00:04:35,199
which its author describes as a portal

123
00:04:35,199 --> 00:04:37,280
to endless suffering not to punish

124
00:04:37,280 --> 00:04:39,919
unruly http bots

125
00:04:39,919 --> 00:04:42,560
you can stand it up on a tiny vps

126
00:04:42,560 --> 00:04:45,120
pick your favorite cloud provider and

127
00:04:45,120 --> 00:04:47,759
without even configuring dns around it

128
00:04:47,759 --> 00:04:50,240
you'll start seeing probes in let's

129
00:04:50,240 --> 00:04:52,479
under a couple hours

130
00:04:52,479 --> 00:04:55,120
so of course bigger more publicized apps

131
00:04:55,120 --> 00:04:57,280
with bigger user bases will draw more

132
00:04:57,280 --> 00:04:59,600
fire but the point remains that on

133
00:04:59,600 --> 00:05:02,000
today's internet basic bot defense

134
00:05:02,000 --> 00:05:06,080
skills are for every web defender

135
00:05:06,880 --> 00:05:07,680
we'll

136
00:05:07,680 --> 00:05:09,759
contextualize where and how we're going

137
00:05:09,759 --> 00:05:11,440
to protect ourselves by just considering

138
00:05:11,440 --> 00:05:15,440
how contemporary web apps are laid out

139
00:05:15,440 --> 00:05:18,080
this very simple way of standing up a

140
00:05:18,080 --> 00:05:20,800
web app still totally valid just a

141
00:05:20,800 --> 00:05:22,840
single box or

142
00:05:22,840 --> 00:05:25,280
vps these internal components are better

143
00:05:25,280 --> 00:05:27,600
defined on the next slide which is going

144
00:05:27,600 --> 00:05:29,919
to represent a fancy application worth

145
00:05:29,919 --> 00:05:31,919
maybe six to ten figures in fiat

146
00:05:31,919 --> 00:05:33,280
currency

147
00:05:33,280 --> 00:05:36,000
that would look like this

148
00:05:36,000 --> 00:05:38,160
just good deal more complicated and

149
00:05:38,160 --> 00:05:39,360
spread out

150
00:05:39,360 --> 00:05:40,400
uh

151
00:05:40,400 --> 00:05:42,960
ttp requests coming in might travel

152
00:05:42,960 --> 00:05:46,000
through initially a cdn edge just

153
00:05:46,000 --> 00:05:48,320
possibly computing right there

154
00:05:48,320 --> 00:05:50,960
then an api gateway

155
00:05:50,960 --> 00:05:53,280
web application firewall and i've seen

156
00:05:53,280 --> 00:05:55,120
setups too

157
00:05:55,120 --> 00:05:57,199
and then eventually you'll get to logic

158
00:05:57,199 --> 00:05:58,880
that might fire for in-client

159
00:05:58,880 --> 00:06:00,720
fingerprinting or in-client bot

160
00:06:00,720 --> 00:06:01,919
detection

161
00:06:01,919 --> 00:06:04,160
and then finally hit origin

162
00:06:04,160 --> 00:06:05,919
so there's a lot of bouncing around of

163
00:06:05,919 --> 00:06:07,520
where this request is going before it

164
00:06:07,520 --> 00:06:09,680
actually gets to your service based

165
00:06:09,680 --> 00:06:11,520
logic um

166
00:06:11,520 --> 00:06:13,680
my presumption being something developed

167
00:06:13,680 --> 00:06:17,600
in-house or at least pretty customizable

168
00:06:17,600 --> 00:06:19,919
hopefully as traffic is flowing through

169
00:06:19,919 --> 00:06:21,680
all these pieces too there are logs that

170
00:06:21,680 --> 00:06:24,400
are being written out because logging is

171
00:06:24,400 --> 00:06:27,280
huge i think under appreciated

172
00:06:27,280 --> 00:06:28,560
and just very important to understand

173
00:06:28,560 --> 00:06:30,400
what's going on within your own

174
00:06:30,400 --> 00:06:31,919
application

175
00:06:31,919 --> 00:06:34,400
it's ideal also for you to be piping all

176
00:06:34,400 --> 00:06:38,240
the log data into a log aggregator

177
00:06:38,240 --> 00:06:40,160
by which i just mean something like

178
00:06:40,160 --> 00:06:43,759
splunk index data or else staff to be

179
00:06:43,759 --> 00:06:46,400
open source elasticsearch logstash and

180
00:06:46,400 --> 00:06:48,720
cabana because if you have a ton of logs

181
00:06:48,720 --> 00:06:50,960
but you can't analyze them and glean

182
00:06:50,960 --> 00:06:53,120
actionable insights then that's not

183
00:06:53,120 --> 00:06:55,280
really worthwhile either

184
00:06:55,280 --> 00:06:58,479
if we work backwards on these components

185
00:06:58,479 --> 00:07:01,280
from origin and elaborating a bit more

186
00:07:01,280 --> 00:07:04,318
on what each can do

187
00:07:04,560 --> 00:07:05,919
origin

188
00:07:05,919 --> 00:07:07,919
allows you the opportunity to do i guess

189
00:07:07,919 --> 00:07:09,680
any of the security stuff you could do

190
00:07:09,680 --> 00:07:11,440
earlier in this stack

191
00:07:11,440 --> 00:07:12,800
since it's probably software you've

192
00:07:12,800 --> 00:07:14,960
written yourself and hypothetically you

193
00:07:14,960 --> 00:07:17,840
can implement whatever logic you want

194
00:07:17,840 --> 00:07:19,919
but what we have to consider is at least

195
00:07:19,919 --> 00:07:22,560
whether it makes operational sense

196
00:07:22,560 --> 00:07:24,240
because in an enterprise you've got to

197
00:07:24,240 --> 00:07:26,319
go through probably a normal release

198
00:07:26,319 --> 00:07:28,400
cycle for code which means a slower

199
00:07:28,400 --> 00:07:31,039
reaction time to attackers

200
00:07:31,039 --> 00:07:33,360
and if you're using a simple example i

201
00:07:33,360 --> 00:07:35,440
guess if you want to block a single ip

202
00:07:35,440 --> 00:07:36,400
address

203
00:07:36,400 --> 00:07:38,720
writing logic for that static block into

204
00:07:38,720 --> 00:07:40,560
your normal source code is going to be

205
00:07:40,560 --> 00:07:43,440
slow and messy compared to just doing it

206
00:07:43,440 --> 00:07:46,960
at waff like most people do

207
00:07:46,960 --> 00:07:48,319
that's kind of the reason we have all

208
00:07:48,319 --> 00:07:50,400
these earlier components is to respond

209
00:07:50,400 --> 00:07:52,560
more quickly and be performant and take

210
00:07:52,560 --> 00:07:55,120
load off of origin

211
00:07:55,120 --> 00:07:56,800
so the same goes not just for blocking

212
00:07:56,800 --> 00:07:59,280
ip addresses but also subnets request

213
00:07:59,280 --> 00:08:01,759
header orders and doing high level rate

214
00:08:01,759 --> 00:08:02,879
limiting

215
00:08:02,879 --> 00:08:06,800
because if your app is under siege then

216
00:08:06,800 --> 00:08:08,639
you want to do things quickly

217
00:08:08,639 --> 00:08:11,039
with a lot of traffic you might consider

218
00:08:11,039 --> 00:08:12,960
computing load and cloud bill as a

219
00:08:12,960 --> 00:08:15,039
result but generally just want to block

220
00:08:15,039 --> 00:08:16,479
things earlier

221
00:08:16,479 --> 00:08:19,039
when you can

222
00:08:19,120 --> 00:08:21,520
for logic that should live in origin i

223
00:08:21,520 --> 00:08:23,280
would say that should be anything that

224
00:08:23,280 --> 00:08:26,160
can't feasibly be earlier in this chain

225
00:08:26,160 --> 00:08:28,000
like the logging of precise user

226
00:08:28,000 --> 00:08:30,000
behavior within the app

227
00:08:30,000 --> 00:08:32,159
rate limits that are based on unique

228
00:08:32,159 --> 00:08:34,399
tokens and things that the waff can't

229
00:08:34,399 --> 00:08:36,958
see so things that aren't headers

230
00:08:36,958 --> 00:08:38,479
or just

231
00:08:38,479 --> 00:08:41,679
i guess a little more advanced logic

232
00:08:41,679 --> 00:08:43,919
if we go one step back from origin and

233
00:08:43,919 --> 00:08:45,920
look at in client fingerprinting and

234
00:08:45,920 --> 00:08:47,680
client bot detection

235
00:08:47,680 --> 00:08:50,399
uh what i mean by that is client-side

236
00:08:50,399 --> 00:08:52,800
code that's executing and generating

237
00:08:52,800 --> 00:08:54,880
telemetry data which you're going to

238
00:08:54,880 --> 00:08:57,519
evaluate server side with some closed

239
00:08:57,519 --> 00:09:00,720
box model and then react accordingly

240
00:09:00,720 --> 00:09:02,320
captchas are

241
00:09:02,320 --> 00:09:05,600
increasingly an example of this because

242
00:09:05,600 --> 00:09:07,920
most current ones operate invisibly or

243
00:09:07,920 --> 00:09:10,160
near invisibly they don't really hinge

244
00:09:10,160 --> 00:09:12,240
anymore on clicking pictures of fire

245
00:09:12,240 --> 00:09:14,560
hydrants but rather what they can clean

246
00:09:14,560 --> 00:09:17,120
about your environment by just looking

247
00:09:17,120 --> 00:09:18,640
around

248
00:09:18,640 --> 00:09:21,360
and if we move back further

249
00:09:21,360 --> 00:09:23,680
looking at the waff your web application

250
00:09:23,680 --> 00:09:26,560
firewall together with a cdn edge that

251
00:09:26,560 --> 00:09:29,279
might be something like based on varnish

252
00:09:29,279 --> 00:09:31,519
you can do a whole lot with just those

253
00:09:31,519 --> 00:09:34,000
two things uh most of the reactive

254
00:09:34,000 --> 00:09:37,760
maneuvers we'll discuss to be honest

255
00:09:37,760 --> 00:09:38,640
if you're

256
00:09:38,640 --> 00:09:40,560
like i used to be you might

257
00:09:40,560 --> 00:09:42,080
hate wafts

258
00:09:42,080 --> 00:09:44,880
your experience might be tainted by

259
00:09:44,880 --> 00:09:46,720
watching them just do dumb pattern

260
00:09:46,720 --> 00:09:49,279
matching while you pen test

261
00:09:49,279 --> 00:09:51,680
but if your waffle choice takes dynamic

262
00:09:51,680 --> 00:09:53,360
updates it can be

263
00:09:53,360 --> 00:09:55,440
really valuable and versatile tool and

264
00:09:55,440 --> 00:09:57,680
connecting quickly to assorted web

265
00:09:57,680 --> 00:09:58,959
attacks

266
00:09:58,959 --> 00:10:01,120
not just things like an incoming script

267
00:10:01,120 --> 00:10:03,680
tag in a query

268
00:10:03,680 --> 00:10:05,120
it can really help you do stop-gap

269
00:10:05,120 --> 00:10:07,519
measures before hopefully your security

270
00:10:07,519 --> 00:10:09,760
posture matures later

271
00:10:09,760 --> 00:10:12,079
and in my demo we have mod security is

272
00:10:12,079 --> 00:10:14,640
zero off

273
00:10:14,640 --> 00:10:15,360
and

274
00:10:15,360 --> 00:10:17,519
i guess worth pointing out now is that

275
00:10:17,519 --> 00:10:19,279
when a waff blocks on its own this is

276
00:10:19,279 --> 00:10:21,920
usually obvious um and that's where edge

277
00:10:21,920 --> 00:10:23,279
logic can help make things more

278
00:10:23,279 --> 00:10:24,720
effective

279
00:10:24,720 --> 00:10:25,760
a lot of

280
00:10:25,760 --> 00:10:27,920
just out of the box swap configurations

281
00:10:27,920 --> 00:10:30,800
will send back an empty body response

282
00:10:30,800 --> 00:10:32,959
with some headers you never see from the

283
00:10:32,959 --> 00:10:34,320
actual app

284
00:10:34,320 --> 00:10:36,079
maybe they use a response code like a

285
00:10:36,079 --> 00:10:38,959
406 that you never use anywhere else and

286
00:10:38,959 --> 00:10:41,680
overall it's just really obvious that uh

287
00:10:41,680 --> 00:10:43,200
the attacker is gonna know they're

288
00:10:43,200 --> 00:10:44,560
blocked when they get one of these

289
00:10:44,560 --> 00:10:47,600
strange responses from the waff itself

290
00:10:47,600 --> 00:10:52,959
so what you can do if you have a uh well

291
00:10:52,959 --> 00:10:54,720
whether you have a cdn and edge

292
00:10:54,720 --> 00:10:56,320
computing available or you're just

293
00:10:56,320 --> 00:10:58,320
running on a single box you can use

294
00:10:58,320 --> 00:11:01,600
something like varnish or a similar very

295
00:11:01,600 --> 00:11:04,000
configurable attachment service to

296
00:11:04,000 --> 00:11:06,720
disguise blocks from your waffle or

297
00:11:06,720 --> 00:11:08,800
really from wherever

298
00:11:08,800 --> 00:11:10,880
you can execute logic that's looking at

299
00:11:10,880 --> 00:11:14,079
every 406 response or some other unique

300
00:11:14,079 --> 00:11:16,320
things that only come back from your web

301
00:11:16,320 --> 00:11:18,079
application firewall

302
00:11:18,079 --> 00:11:20,320
and then dynamically change to some

303
00:11:20,320 --> 00:11:23,600
other 400s tree status code

304
00:11:23,600 --> 00:11:24,800
you can

305
00:11:24,800 --> 00:11:27,120
really dive into varnish control

306
00:11:27,120 --> 00:11:28,720
language and look at the path that

307
00:11:28,720 --> 00:11:30,959
something was coming from you can set

308
00:11:30,959 --> 00:11:32,640
the body of the response to make it look

309
00:11:32,640 --> 00:11:34,640
like an actual negative response from

310
00:11:34,640 --> 00:11:35,360
your

311
00:11:35,360 --> 00:11:38,640
login or payment service or whatever

312
00:11:38,640 --> 00:11:41,600
and lastly before the next slide

313
00:11:41,600 --> 00:11:43,200
if you don't have any of the things

314
00:11:43,200 --> 00:11:44,320
shown here

315
00:11:44,320 --> 00:11:46,800
please just start with blog pain

316
00:11:46,800 --> 00:11:49,680
ideally high level details of every http

317
00:11:49,680 --> 00:11:50,720
request

318
00:11:50,720 --> 00:11:53,920
including ip address target path

319
00:11:53,920 --> 00:11:55,519
all the headers except maybe

320
00:11:55,519 --> 00:11:57,200
authorization tokens or something

321
00:11:57,200 --> 00:11:58,560
sensitive

322
00:11:58,560 --> 00:12:00,720
and then your responses status code as

323
00:12:00,720 --> 00:12:01,839
well

324
00:12:01,839 --> 00:12:04,160
and after you have

325
00:12:04,160 --> 00:12:06,560
yes after or if you have logging

326
00:12:06,560 --> 00:12:08,160
and nothing else my advice would be

327
00:12:08,160 --> 00:12:10,639
progressing to log aggregation something

328
00:12:10,639 --> 00:12:13,360
like elk stack so you can start gleaning

329
00:12:13,360 --> 00:12:15,519
value from those

330
00:12:15,519 --> 00:12:17,680
when you've got both things and you can

331
00:12:17,680 --> 00:12:19,279
really get a high level picture of

332
00:12:19,279 --> 00:12:21,360
what's happening within your app you'll

333
00:12:21,360 --> 00:12:23,200
probably understand whether they're

334
00:12:23,200 --> 00:12:25,600
already bots present that maybe you

335
00:12:25,600 --> 00:12:27,680
weren't aware of before

336
00:12:27,680 --> 00:12:29,920
or that i guess you build an app that

337
00:12:29,920 --> 00:12:33,360
nobody wants to attack

338
00:12:35,120 --> 00:12:36,720
for bot detection thus far we've

339
00:12:36,720 --> 00:12:39,120
mentioned in-client fingerprinting but

340
00:12:39,120 --> 00:12:41,200
arguably there are two other approaches

341
00:12:41,200 --> 00:12:43,200
even though they'll kind of blend in

342
00:12:43,200 --> 00:12:44,800
with each other

343
00:12:44,800 --> 00:12:46,480
these other approaches

344
00:12:46,480 --> 00:12:48,240
show up in different parts of the

345
00:12:48,240 --> 00:12:50,959
architecture we just showed

346
00:12:50,959 --> 00:12:53,360
generally detection is going to work by

347
00:12:53,360 --> 00:12:57,440
assessing regularities and abnormalities

348
00:12:57,440 --> 00:12:59,839
programmers especially myself have a

349
00:12:59,839 --> 00:13:02,639
tendency towards laziness and

350
00:13:02,639 --> 00:13:03,920
if you're programming any sort of

351
00:13:03,920 --> 00:13:06,480
automation this can be an especially

352
00:13:06,480 --> 00:13:09,839
effortful field to do things right

353
00:13:09,839 --> 00:13:12,240
now it's really hard to make software

354
00:13:12,240 --> 00:13:15,120
convincingly look human and harder than

355
00:13:15,120 --> 00:13:17,760
you might think offhand

356
00:13:17,760 --> 00:13:19,760
that's kind of an ongoing cat and mouse

357
00:13:19,760 --> 00:13:22,560
type of effort because it worked one day

358
00:13:22,560 --> 00:13:24,240
you'd be toward it the next

359
00:13:24,240 --> 00:13:26,480
and there are new research papers blog

360
00:13:26,480 --> 00:13:29,040
posts and open source code coming out

361
00:13:29,040 --> 00:13:32,320
constantly just moving the field forward

362
00:13:32,320 --> 00:13:33,680
including

363
00:13:33,680 --> 00:13:36,720
botting and detection offensive defense

364
00:13:36,720 --> 00:13:38,079
so in that way i guess it's not too much

365
00:13:38,079 --> 00:13:39,600
from like the rest of application

366
00:13:39,600 --> 00:13:40,800
security

367
00:13:40,800 --> 00:13:42,880
uh but if we break down all of the

368
00:13:42,880 --> 00:13:44,399
ongoing developments into three

369
00:13:44,399 --> 00:13:45,760
categories

370
00:13:45,760 --> 00:13:47,760
you might have in-client fingerprinting

371
00:13:47,760 --> 00:13:49,440
network-based fingerprinting and

372
00:13:49,440 --> 00:13:51,519
behavioral analysis

373
00:13:51,519 --> 00:13:54,000
those are ordered subjectively from

374
00:13:54,000 --> 00:13:58,240
easiest to adulterate to the hardest

375
00:14:00,079 --> 00:14:02,959
for inclined

376
00:14:02,959 --> 00:14:04,880
maybe part of your application attack

377
00:14:04,880 --> 00:14:07,360
surface includes apis that you expect

378
00:14:07,360 --> 00:14:09,279
users to be hitting with code paper

379
00:14:09,279 --> 00:14:10,560
themselves

380
00:14:10,560 --> 00:14:12,800
like if you sell premium api access or

381
00:14:12,800 --> 00:14:15,519
something in which case this approach

382
00:14:15,519 --> 00:14:17,519
won't apply to you because what it's

383
00:14:17,519 --> 00:14:19,199
really looking for

384
00:14:19,199 --> 00:14:21,279
are instances where your legitimate

385
00:14:21,279 --> 00:14:23,279
client code is approaching but

386
00:14:23,279 --> 00:14:25,600
something's off because you kind of are

387
00:14:25,600 --> 00:14:29,440
looking for things that are irregular

388
00:14:29,440 --> 00:14:31,040
uh so whichever parts of your

389
00:14:31,040 --> 00:14:32,880
application where you expect only your

390
00:14:32,880 --> 00:14:34,959
official browser-based client

391
00:14:34,959 --> 00:14:37,440
android or ios app or some similar

392
00:14:37,440 --> 00:14:39,199
client code that you've put out and that

393
00:14:39,199 --> 00:14:42,000
you want legit customers using uh those

394
00:14:42,000 --> 00:14:44,399
are generally well-suited domains for

395
00:14:44,399 --> 00:14:45,680
this approach

396
00:14:45,680 --> 00:14:47,440
you're going to execute some code within

397
00:14:47,440 --> 00:14:49,760
the expected clients and collect data

398
00:14:49,760 --> 00:14:52,160
points about the browser operating

399
00:14:52,160 --> 00:14:53,279
system

400
00:14:53,279 --> 00:14:55,199
device capabilities

401
00:14:55,199 --> 00:14:56,880
really whatever else can be discerned

402
00:14:56,880 --> 00:14:59,199
from the client side

403
00:14:59,199 --> 00:15:01,519
and as you probably understand as a

404
00:15:01,519 --> 00:15:03,519
security professional something's coming

405
00:15:03,519 --> 00:15:05,199
from the client it's really prone to

406
00:15:05,199 --> 00:15:06,800
being tampered

407
00:15:06,800 --> 00:15:08,160
so

408
00:15:08,160 --> 00:15:09,440
like mentioned before this is the

409
00:15:09,440 --> 00:15:11,519
easiest category to adulterate but you

410
00:15:11,519 --> 00:15:13,839
can make things less obvious by

411
00:15:13,839 --> 00:15:16,639
obfuscating your client-side code

412
00:15:16,639 --> 00:15:18,320
you want to keep a secret what you're

413
00:15:18,320 --> 00:15:21,760
looking at to deter tampering and then

414
00:15:21,760 --> 00:15:23,920
the output of this confiscated code

415
00:15:23,920 --> 00:15:26,560
should yield obfuscated data

416
00:15:26,560 --> 00:15:28,560
that's a payload that you're going to

417
00:15:28,560 --> 00:15:30,639
include on traffic to the back end your

418
00:15:30,639 --> 00:15:32,240
request header

419
00:15:32,240 --> 00:15:34,399
of course if someone has enough

420
00:15:34,399 --> 00:15:36,480
time and effort they can completely

421
00:15:36,480 --> 00:15:39,120
reverse engineer this that's going to be

422
00:15:39,120 --> 00:15:41,360
really effortful and uh frustrates

423
00:15:41,360 --> 00:15:42,320
somebody

424
00:15:42,320 --> 00:15:43,040
so

425
00:15:43,040 --> 00:15:46,000
you kind of have to approach it that way

426
00:15:46,000 --> 00:15:47,920
commercial examples of in-client

427
00:15:47,920 --> 00:15:50,560
fingerprinting include google recaptcha

428
00:15:50,560 --> 00:15:54,000
h captcha g-test which is sliding puzzle

429
00:15:54,000 --> 00:15:55,040
piece

430
00:15:55,040 --> 00:15:57,920
fingerprint js and a slew of open source

431
00:15:57,920 --> 00:15:59,040
projects

432
00:15:59,040 --> 00:16:00,639
these are some of my favorites listed on

433
00:16:00,639 --> 00:16:02,480
the slide

434
00:16:02,480 --> 00:16:04,240
the current state of this field again

435
00:16:04,240 --> 00:16:06,399
requires zero or very minimal user

436
00:16:06,399 --> 00:16:08,079
interaction

437
00:16:08,079 --> 00:16:09,920
because probably i'll collect pictures

438
00:16:09,920 --> 00:16:12,399
of buses or bicycles for

439
00:16:12,399 --> 00:16:14,800
old style google recaptcha

440
00:16:14,800 --> 00:16:16,399
but

441
00:16:16,399 --> 00:16:19,040
a recapture enterprise docs now state

442
00:16:19,040 --> 00:16:21,040
that using their checkbox mode instead

443
00:16:21,040 --> 00:16:23,440
of being fully invisible doesn't really

444
00:16:23,440 --> 00:16:24,800
get you much

445
00:16:24,800 --> 00:16:26,800
i tested and implemented invisible

446
00:16:26,800 --> 00:16:30,480
recaptcha across hbo max given

447
00:16:30,480 --> 00:16:33,360
presentations through conference and

448
00:16:33,360 --> 00:16:37,839
that all aligns with my views too

449
00:16:38,320 --> 00:16:40,959
page capture also states on its checkbox

450
00:16:40,959 --> 00:16:43,040
field that barely any users need to be

451
00:16:43,040 --> 00:16:44,160
challenged

452
00:16:44,160 --> 00:16:46,399
that's its enterprise tier

453
00:16:46,399 --> 00:16:48,480
they do have a very free

454
00:16:48,480 --> 00:16:51,279
like generous free tier um i would argue

455
00:16:51,279 --> 00:16:52,880
that it's even though it's not open

456
00:16:52,880 --> 00:16:55,920
source it is free and ethical um if

457
00:16:55,920 --> 00:16:58,000
you're in need of in client bot

458
00:16:58,000 --> 00:17:00,000
detection is sort of

459
00:17:00,000 --> 00:17:02,160
a last resort or to spend yourself some

460
00:17:02,160 --> 00:17:04,400
time i definitely look at h capture's

461
00:17:04,400 --> 00:17:06,959
free tier

462
00:17:07,679 --> 00:17:09,919
in place of that though

463
00:17:09,919 --> 00:17:12,480
some very impressive open source is this

464
00:17:12,480 --> 00:17:14,480
creep.js library

465
00:17:14,480 --> 00:17:17,439
this is a screenshot of creep.js's demo

466
00:17:17,439 --> 00:17:20,640
which is linked here on the slide

467
00:17:20,640 --> 00:17:22,319
this looks at an impressive number of

468
00:17:22,319 --> 00:17:24,079
things from your browser

469
00:17:24,079 --> 00:17:26,240
it computes a fingerprint and it can

470
00:17:26,240 --> 00:17:27,679
track changes

471
00:17:27,679 --> 00:17:30,160
as maybe you update your browser

472
00:17:30,160 --> 00:17:32,960
visiting the demo

473
00:17:32,960 --> 00:17:34,880
browser might change the installed fonts

474
00:17:34,880 --> 00:17:37,280
might change uh you can go through the

475
00:17:37,280 --> 00:17:39,120
demo yourself and just see the minutiae

476
00:17:39,120 --> 00:17:41,280
of what this is looking at

477
00:17:41,280 --> 00:17:43,679
um as somebody defending an application

478
00:17:43,679 --> 00:17:46,240
you can if you'd like blog fingerprints

479
00:17:46,240 --> 00:17:48,000
for every user

480
00:17:48,000 --> 00:17:49,840
you can even go so far as to log not

481
00:17:49,840 --> 00:17:52,160
only generated fingerprints but just all

482
00:17:52,160 --> 00:17:54,080
of these data points

483
00:17:54,080 --> 00:17:57,039
um i can be a crazed data hungry analyst

484
00:17:57,039 --> 00:18:00,240
person so i like to do that maybe you

485
00:18:00,240 --> 00:18:02,160
want to start a little simpler

486
00:18:02,160 --> 00:18:03,120
um

487
00:18:03,120 --> 00:18:05,200
you might focus on just a subset of the

488
00:18:05,200 --> 00:18:07,200
checks this can do there are some if you

489
00:18:07,200 --> 00:18:08,880
go through the demo that specifically

490
00:18:08,880 --> 00:18:11,120
look for headless browsers which is

491
00:18:11,120 --> 00:18:12,720
obviously a big indicator of bot

492
00:18:12,720 --> 00:18:14,480
activity

493
00:18:14,480 --> 00:18:18,640
and just other means of tampering

494
00:18:19,360 --> 00:18:21,440
obviously though before moving on this

495
00:18:21,440 --> 00:18:23,679
does take a lot more setup

496
00:18:23,679 --> 00:18:25,440
and initial decision making than

497
00:18:25,440 --> 00:18:27,120
something like recaptcha and aged

498
00:18:27,120 --> 00:18:28,880
captcha because those give you a

499
00:18:28,880 --> 00:18:31,120
confidence score you can act right away

500
00:18:31,120 --> 00:18:33,520
whereas this requires more manual setup

501
00:18:33,520 --> 00:18:37,840
to determine how you'd like to proceed

502
00:18:38,240 --> 00:18:40,799
network fingerprinting or network-based

503
00:18:40,799 --> 00:18:43,280
bot detection works off characteristics

504
00:18:43,280 --> 00:18:45,760
that can be observed from the edge of

505
00:18:45,760 --> 00:18:48,799
your architecture and possibly from your

506
00:18:48,799 --> 00:18:50,080
waff

507
00:18:50,080 --> 00:18:54,480
you might consider ip address subnet asm

508
00:18:54,480 --> 00:18:56,240
which is autonomous system number and

509
00:18:56,240 --> 00:18:58,960
just a bucket of registered subnets

510
00:18:58,960 --> 00:19:01,200
uh your wife can also see

511
00:19:01,200 --> 00:19:03,840
some http request data like everything

512
00:19:03,840 --> 00:19:05,840
above the request body

513
00:19:05,840 --> 00:19:08,080
uh you can go as far as to do packet

514
00:19:08,080 --> 00:19:09,120
analysis

515
00:19:09,120 --> 00:19:12,160
and maybe look at finer tcpip or tls

516
00:19:12,160 --> 00:19:14,480
characteristics

517
00:19:14,480 --> 00:19:16,480
you'll have to note that network-based

518
00:19:16,480 --> 00:19:18,559
fingerprinting isn't really feasible if

519
00:19:18,559 --> 00:19:19,360
you're

520
00:19:19,360 --> 00:19:22,799
okay with users coming to you over a vpn

521
00:19:22,799 --> 00:19:26,000
proxy or other traffic anonymizer

522
00:19:26,000 --> 00:19:28,400
depends on your personal situation and

523
00:19:28,400 --> 00:19:30,480
your business logic

524
00:19:30,480 --> 00:19:33,200
but if you're trying to thwart anybody

525
00:19:33,200 --> 00:19:35,440
using a vpn or proxy

526
00:19:35,440 --> 00:19:36,720
because certain

527
00:19:36,720 --> 00:19:38,400
certainly proxy lists can go hand in

528
00:19:38,400 --> 00:19:40,640
hand with bot usage just given the ease

529
00:19:40,640 --> 00:19:42,880
of rotating through them while sending

530
00:19:42,880 --> 00:19:44,480
requests

531
00:19:44,480 --> 00:19:47,120
one example i've given on the slide is

532
00:19:47,120 --> 00:19:48,559
an example

533
00:19:48,559 --> 00:19:50,000
of looking up

534
00:19:50,000 --> 00:19:52,720
or trying to discern proxy vpn usage

535
00:19:52,720 --> 00:19:54,720
without having to look up an ip address

536
00:19:54,720 --> 00:19:56,720
in some database

537
00:19:56,720 --> 00:19:59,280
that's become increasingly error-prone

538
00:19:59,280 --> 00:20:01,679
you can take an active approach and look

539
00:20:01,679 --> 00:20:04,960
do packet analysis for ratio between

540
00:20:04,960 --> 00:20:07,039
maximum transmission unit and maximum

541
00:20:07,039 --> 00:20:09,120
segment size

542
00:20:09,120 --> 00:20:10,559
and you won't be able to do anything at

543
00:20:10,559 --> 00:20:12,320
first but if you were to log that across

544
00:20:12,320 --> 00:20:14,720
your whole user base

545
00:20:14,720 --> 00:20:17,039
alongside i guess user agent or some

546
00:20:17,039 --> 00:20:19,679
other planar device identifiers

547
00:20:19,679 --> 00:20:21,520
you can pick up

548
00:20:21,520 --> 00:20:24,400
abnormalities

549
00:20:24,799 --> 00:20:26,960
but if that sounds complicated these

550
00:20:26,960 --> 00:20:28,720
open source libraries sort of do the

551
00:20:28,720 --> 00:20:30,320
hard stuff for you

552
00:20:30,320 --> 00:20:32,000
and if you have a single server

553
00:20:32,000 --> 00:20:33,679
application and that's your whole

554
00:20:33,679 --> 00:20:36,480
architecture then this is actually a

555
00:20:36,480 --> 00:20:38,640
circumstance where looking at network

556
00:20:38,640 --> 00:20:40,880
data is pretty easy for you

557
00:20:40,880 --> 00:20:42,559
because in a bigger contemporary

558
00:20:42,559 --> 00:20:44,480
architecture you'll have to do this way

559
00:20:44,480 --> 00:20:46,480
before origin

560
00:20:46,480 --> 00:20:49,039
again as requested as bouncing around

561
00:20:49,039 --> 00:20:51,679
between internal places before reaching

562
00:20:51,679 --> 00:20:53,520
origin you don't have an accurate

563
00:20:53,520 --> 00:20:55,919
picture there anymore of fighter network

564
00:20:55,919 --> 00:20:58,240
characteristics uh because the data is

565
00:20:58,240 --> 00:20:59,919
tainted

566
00:20:59,919 --> 00:21:02,400
a commercial example of

567
00:21:02,400 --> 00:21:04,799
this networking fingerprinting is

568
00:21:04,799 --> 00:21:07,280
cloudflare's bot management which seems

569
00:21:07,280 --> 00:21:10,320
to just mostly be network fingerprints

570
00:21:10,320 --> 00:21:12,559
but this open source list

571
00:21:12,559 --> 00:21:13,600
is

572
00:21:13,600 --> 00:21:16,799
a combination of actual analyzers like

573
00:21:16,799 --> 00:21:18,960
this zardex tool is really good

574
00:21:18,960 --> 00:21:21,600
it's author nikolai sacher i respect a

575
00:21:21,600 --> 00:21:23,520
lot and you should check out his blog

576
00:21:23,520 --> 00:21:26,400
for anti-bot content in general

577
00:21:26,400 --> 00:21:29,280
zardex library 60 is an older library

578
00:21:29,280 --> 00:21:32,480
called p0f to do passive tcp

579
00:21:32,480 --> 00:21:34,000
fingerprinting

580
00:21:34,000 --> 00:21:36,559
then salesforce has this jaw3 library

581
00:21:36,559 --> 00:21:39,919
which focuses on tls fingerprints

582
00:21:39,919 --> 00:21:42,400
and like with client drive data earlier

583
00:21:42,400 --> 00:21:44,000
you can log and watch all these things

584
00:21:44,000 --> 00:21:45,679
across your user base to figure out

585
00:21:45,679 --> 00:21:49,200
what's normal and then react from there

586
00:21:49,200 --> 00:21:51,760
these other resources really just take

587
00:21:51,760 --> 00:21:54,480
an ip address as input and compare it

588
00:21:54,480 --> 00:21:57,760
versus some known list of offenders

589
00:21:57,760 --> 00:21:59,679
like whether it's a suspected proxy or

590
00:21:59,679 --> 00:22:02,400
vpn or bot activity has been seen by

591
00:22:02,400 --> 00:22:04,720
prominent honeypots

592
00:22:04,720 --> 00:22:05,840
i'll break

593
00:22:05,840 --> 00:22:07,840
those out with more examples

594
00:22:07,840 --> 00:22:10,080
on a further slide

595
00:22:10,080 --> 00:22:12,159
again just looking up ip addresses can

596
00:22:12,159 --> 00:22:14,240
be error-prone um

597
00:22:14,240 --> 00:22:15,360
we've seen

598
00:22:15,360 --> 00:22:17,440
it become increasingly error-prone i

599
00:22:17,440 --> 00:22:19,120
think there's press coverage of the last

600
00:22:19,120 --> 00:22:21,679
six months where netflix and other

601
00:22:21,679 --> 00:22:24,240
entities that rely on max mines that

602
00:22:24,240 --> 00:22:25,039
just

603
00:22:25,039 --> 00:22:27,679
had increases in false positives

604
00:22:27,679 --> 00:22:30,080
so your mileage may vary with that

605
00:22:30,080 --> 00:22:32,000
approach

606
00:22:32,000 --> 00:22:34,320
what can be more reliable uh sort of a

607
00:22:34,320 --> 00:22:35,440
middle ground

608
00:22:35,440 --> 00:22:37,200
is that if you don't expect data center

609
00:22:37,200 --> 00:22:39,360
bpm or proxy traffic

610
00:22:39,360 --> 00:22:41,440
you can block whole asms they're

611
00:22:41,440 --> 00:22:42,960
registered to cloud and hosting

612
00:22:42,960 --> 00:22:44,240
providers

613
00:22:44,240 --> 00:22:46,559
you can either find a public list or do

614
00:22:46,559 --> 00:22:48,640
lookups yourself because the names are

615
00:22:48,640 --> 00:22:50,480
pretty obvious for things like digital

616
00:22:50,480 --> 00:22:52,559
motion

617
00:22:52,559 --> 00:22:55,039
if you don't outright block those users

618
00:22:55,039 --> 00:22:57,520
uh you can just treat them differently

619
00:22:57,520 --> 00:22:58,720
and maybe

620
00:22:58,720 --> 00:23:00,880
enforce different levels of friction or

621
00:23:00,880 --> 00:23:04,400
rate limits etc

622
00:23:04,720 --> 00:23:06,880
for behavioral analysis this is the

623
00:23:06,880 --> 00:23:08,480
approach that's the least prone to false

624
00:23:08,480 --> 00:23:10,400
positives and negatives but tends to

625
00:23:10,400 --> 00:23:12,400
require a bunch of training for manual

626
00:23:12,400 --> 00:23:14,000
setup

627
00:23:14,000 --> 00:23:15,919
you're going to consider log behavior

628
00:23:15,919 --> 00:23:18,320
and events and maintain again some idea

629
00:23:18,320 --> 00:23:20,840
of what looks normal and act on what's

630
00:23:20,840 --> 00:23:23,760
abnormal there are some vendors that try

631
00:23:23,760 --> 00:23:25,360
to help with this

632
00:23:25,360 --> 00:23:27,600
i don't have experience with them but uh

633
00:23:27,600 --> 00:23:29,360
one unique one

634
00:23:29,360 --> 00:23:32,400
maybe worth pointing out is typing dna

635
00:23:32,400 --> 00:23:34,640
that considers only a snapshot of user

636
00:23:34,640 --> 00:23:36,559
activity as they're typing in their

637
00:23:36,559 --> 00:23:38,480
credentials

638
00:23:38,480 --> 00:23:40,320
supposedly that can be used to

639
00:23:40,320 --> 00:23:42,960
fingerprint with some reliability but i

640
00:23:42,960 --> 00:23:44,559
have my doubts

641
00:23:44,559 --> 00:23:46,720
there is another vendor call sign that

642
00:23:46,720 --> 00:23:49,120
does not only that but considers the

643
00:23:49,120 --> 00:23:51,039
wider scope of data

644
00:23:51,039 --> 00:23:52,400
but we can sort of

645
00:23:52,400 --> 00:23:54,240
discern that

646
00:23:54,240 --> 00:23:56,799
when dealing with behavioral analysis

647
00:23:56,799 --> 00:23:58,159
you're dealing with a whole lot of user

648
00:23:58,159 --> 00:24:00,559
data it requires a lot of trust to share

649
00:24:00,559 --> 00:24:02,960
with the vendor

650
00:24:02,960 --> 00:24:04,799
ideally you could evolve to have your

651
00:24:04,799 --> 00:24:07,200
own program which computes risk scores

652
00:24:07,200 --> 00:24:10,400
on a per user basis over time

653
00:24:10,400 --> 00:24:12,720
that kind of makes for a better case of

654
00:24:12,720 --> 00:24:15,279
doing this yourself

655
00:24:15,279 --> 00:24:18,080
again sharing tons of customer data and

656
00:24:18,080 --> 00:24:19,679
everything users are doing across your

657
00:24:19,679 --> 00:24:23,120
app requires a lot of mentor trust

658
00:24:23,120 --> 00:24:25,279
for examples of open source works to

659
00:24:25,279 --> 00:24:27,600
help on this page

660
00:24:27,600 --> 00:24:29,200
this is a mix of

661
00:24:29,200 --> 00:24:32,480
research papers that look at generally

662
00:24:32,480 --> 00:24:34,640
fraud detection tactics keeping in mind

663
00:24:34,640 --> 00:24:37,120
that bots are usually trying to perform

664
00:24:37,120 --> 00:24:38,960
fraud and we'll get into that with our

665
00:24:38,960 --> 00:24:40,720
threat profile

666
00:24:40,720 --> 00:24:43,200
and then libraries that help facilitate

667
00:24:43,200 --> 00:24:44,799
machine learning

668
00:24:44,799 --> 00:24:46,400
so again

669
00:24:46,400 --> 00:24:48,559
call back to before this is the hardest

670
00:24:48,559 --> 00:24:50,799
approach to adulterate uh but also

671
00:24:50,799 --> 00:24:52,640
probably the hardest to keep going with

672
00:24:52,640 --> 00:24:54,880
and uh something that you kind of have

673
00:24:54,880 --> 00:24:57,600
to do yourself

674
00:24:58,880 --> 00:25:01,679
threat profile and consider what bots

675
00:25:01,679 --> 00:25:03,679
are trying to accomplish on the internet

676
00:25:03,679 --> 00:25:05,679
uh we'll see that they're by and large

677
00:25:05,679 --> 00:25:07,279
fraudsters

678
00:25:07,279 --> 00:25:09,039
login attacks are really big and

679
00:25:09,039 --> 00:25:10,559
figuring out what valid accounts to

680
00:25:10,559 --> 00:25:14,480
access and take over and maybe resell

681
00:25:14,480 --> 00:25:16,640
by and large login attacks equal

682
00:25:16,640 --> 00:25:18,159
credential stuffing

683
00:25:18,159 --> 00:25:19,520
and trying credits from previous

684
00:25:19,520 --> 00:25:20,559
breaches

685
00:25:20,559 --> 00:25:22,400
given that users are very prone to

686
00:25:22,400 --> 00:25:24,880
reducing threats

687
00:25:24,880 --> 00:25:26,880
in the past i understand that brute

688
00:25:26,880 --> 00:25:28,880
force logan attacks were more common but

689
00:25:28,880 --> 00:25:31,360
they seem pretty rare to me now

690
00:25:31,360 --> 00:25:33,440
they're very loud with relatively little

691
00:25:33,440 --> 00:25:34,880
payoff

692
00:25:34,880 --> 00:25:36,880
and under login attacks you might also

693
00:25:36,880 --> 00:25:39,360
consider mass registration attempts

694
00:25:39,360 --> 00:25:40,960
think of that as a precursor to

695
00:25:40,960 --> 00:25:42,640
credential stuffing

696
00:25:42,640 --> 00:25:44,720
like trying to enumerate valid users

697
00:25:44,720 --> 00:25:45,919
before

698
00:25:45,919 --> 00:25:48,559
attempting login

699
00:25:48,559 --> 00:25:50,720
if you run something like a game maybe

700
00:25:50,720 --> 00:25:53,440
there is some direct benefit to having a

701
00:25:53,440 --> 00:25:55,600
whole lot of user accounts but usually

702
00:25:55,600 --> 00:25:58,320
that's not the case

703
00:25:58,320 --> 00:26:00,480
for payment attacks this includes

704
00:26:00,480 --> 00:26:02,720
validating stolen credit card data and

705
00:26:02,720 --> 00:26:06,080
or setting up accounts to resell

706
00:26:06,080 --> 00:26:08,080
also brute forcing gift card strings for

707
00:26:08,080 --> 00:26:11,120
promo codes and even if you have an

708
00:26:11,120 --> 00:26:13,919
obscure site a threat actor might find

709
00:26:13,919 --> 00:26:18,080
value in using your app to validate

710
00:26:18,080 --> 00:26:20,480
stolen credit card data that can get you

711
00:26:20,480 --> 00:26:23,039
in trouble with your payment processor

712
00:26:23,039 --> 00:26:25,440
so it's worth considering

713
00:26:25,440 --> 00:26:27,679
your payment flow just as

714
00:26:27,679 --> 00:26:30,720
fraud prone as your login

715
00:26:30,720 --> 00:26:33,039
next what i've lumped is destructive or

716
00:26:33,039 --> 00:26:35,360
for ransom attacks which would include

717
00:26:35,360 --> 00:26:37,600
automated injection force browsing

718
00:26:37,600 --> 00:26:39,520
denial service

719
00:26:39,520 --> 00:26:42,640
and be coupled with port scanning

720
00:26:42,640 --> 00:26:45,360
content scraping includes

721
00:26:45,360 --> 00:26:47,440
piracy most prominently

722
00:26:47,440 --> 00:26:50,159
but you might have worthwhile data in

723
00:26:50,159 --> 00:26:51,200
your app

724
00:26:51,200 --> 00:26:53,600
like embedded tables of some sort

725
00:26:53,600 --> 00:26:55,840
uh maybe you sell programmatic access to

726
00:26:55,840 --> 00:26:58,159
that and threat agents are trying to

727
00:26:58,159 --> 00:27:00,880
sidestep it or rip it off

728
00:27:00,880 --> 00:27:02,000
um

729
00:27:02,000 --> 00:27:04,159
altogether considering these things the

730
00:27:04,159 --> 00:27:05,600
most probable reason you're being

731
00:27:05,600 --> 00:27:08,640
attacked is just economics and trying to

732
00:27:08,640 --> 00:27:11,039
unethically eat a living

733
00:27:11,039 --> 00:27:13,200
the second most probable reason is that

734
00:27:13,200 --> 00:27:14,720
to piss someone off

735
00:27:14,720 --> 00:27:17,039
and someone might be a team or a

736
00:27:17,039 --> 00:27:19,520
nation-state or other non-singular

737
00:27:19,520 --> 00:27:20,880
person entity

738
00:27:20,880 --> 00:27:22,799
now they're coming after you even if it

739
00:27:22,799 --> 00:27:25,360
doesn't make economic sense

740
00:27:25,360 --> 00:27:28,080
that's a far second place

741
00:27:28,080 --> 00:27:29,679
because of course there's a cost to

742
00:27:29,679 --> 00:27:31,360
attack

743
00:27:31,360 --> 00:27:34,559
not just money but also time and effort

744
00:27:34,559 --> 00:27:35,760
you won't

745
00:27:35,760 --> 00:27:37,440
commonly come across someone that just

746
00:27:37,440 --> 00:27:40,159
wants to watch the world burn

747
00:27:40,159 --> 00:27:42,880
and beyond the threats motivation

748
00:27:42,880 --> 00:27:45,520
will enumerate with the biggest baddest

749
00:27:45,520 --> 00:27:47,360
attacker looks like

750
00:27:47,360 --> 00:27:49,039
all these characteristics really boil

751
00:27:49,039 --> 00:27:52,159
down to have lots of time and or money

752
00:27:52,159 --> 00:27:55,760
because that enables these other things

753
00:27:55,760 --> 00:27:57,279
the advanced threat might have

754
00:27:57,279 --> 00:28:01,520
significant network or device resources

755
00:28:01,520 --> 00:28:03,679
an unsophisticated attacker

756
00:28:03,679 --> 00:28:05,520
might come at you from a single ip at

757
00:28:05,520 --> 00:28:06,640
their house

758
00:28:06,640 --> 00:28:09,200
if they forget to turn on vpn

759
00:28:09,200 --> 00:28:12,399
but as you look down a more mature scope

760
00:28:12,399 --> 00:28:14,320
you might see lots of ip addresses that

761
00:28:14,320 --> 00:28:16,799
are sending traffic from a single data

762
00:28:16,799 --> 00:28:18,880
center and then maybe multiple data

763
00:28:18,880 --> 00:28:19,919
centers

764
00:28:19,919 --> 00:28:21,520
uh becoming more

765
00:28:21,520 --> 00:28:23,440
sophisticated yet

766
00:28:23,440 --> 00:28:26,080
you'll see attacks through proxy lists

767
00:28:26,080 --> 00:28:28,640
and those can vary in quality but if you

768
00:28:28,640 --> 00:28:31,679
see like 47 000 unique ip addresses

769
00:28:31,679 --> 00:28:32,559
across

770
00:28:32,559 --> 00:28:34,720
hundreds of asms

771
00:28:34,720 --> 00:28:39,039
that's not really a casual attacker

772
00:28:40,080 --> 00:28:43,120
that's usually i guess a sign of

773
00:28:43,120 --> 00:28:45,279
trying to outrun ip address based rate

774
00:28:45,279 --> 00:28:46,880
limits

775
00:28:46,880 --> 00:28:48,080
maybe

776
00:28:48,080 --> 00:28:50,880
blocks on a traffic type if you see

777
00:28:50,880 --> 00:28:51,840
a lot of

778
00:28:51,840 --> 00:28:54,399
this proxies ips coming from residential

779
00:28:54,399 --> 00:28:56,320
network space

780
00:28:56,320 --> 00:28:58,480
as touched on before you can actively

781
00:28:58,480 --> 00:29:00,399
detect a mismatch between the device

782
00:29:00,399 --> 00:29:02,480
running your client and traffic received

783
00:29:02,480 --> 00:29:05,120
on the back end uh so a more cunning

784
00:29:05,120 --> 00:29:08,159
yeah attacker has lots of actual devices

785
00:29:08,159 --> 00:29:10,240
that are running legit or very close to

786
00:29:10,240 --> 00:29:12,240
legit software

787
00:29:12,240 --> 00:29:15,840
headless browsers have towels so ideally

788
00:29:15,840 --> 00:29:17,520
they'd be avoided

789
00:29:17,520 --> 00:29:19,520
each malicious device might be hooked up

790
00:29:19,520 --> 00:29:22,559
to a legitimate data connection

791
00:29:22,559 --> 00:29:24,399
and together we might think of this as a

792
00:29:24,399 --> 00:29:26,720
device farm which would be very

793
00:29:26,720 --> 00:29:29,520
expensive but not impossible

794
00:29:29,520 --> 00:29:31,200
and you might also see malware that's

795
00:29:31,200 --> 00:29:33,600
spread across many devices that are

796
00:29:33,600 --> 00:29:37,840
running a bot code coming at you

797
00:29:37,840 --> 00:29:39,919
if you look in the right places setups

798
00:29:39,919 --> 00:29:41,919
like this are available for rent so it's

799
00:29:41,919 --> 00:29:44,240
not too unrealistic but again it is

800
00:29:44,240 --> 00:29:46,159
expensive

801
00:29:46,159 --> 00:29:48,240
the advanced threat also has lots of

802
00:29:48,240 --> 00:29:50,320
attack fodder which is just whichever

803
00:29:50,320 --> 00:29:52,399
input is needed for attack

804
00:29:52,399 --> 00:29:54,480
like for example credential stuffing

805
00:29:54,480 --> 00:29:56,080
relies on a steady stream of fresh

806
00:29:56,080 --> 00:29:58,480
credentials ideally ones that haven't

807
00:29:58,480 --> 00:29:59,760
made their way into have i've been

808
00:29:59,760 --> 00:30:03,279
phoned or other leaked password checkers

809
00:30:03,279 --> 00:30:05,279
uh also ideally ones that other

810
00:30:05,279 --> 00:30:08,799
attackers haven't been spraying yet and

811
00:30:08,799 --> 00:30:09,840
if

812
00:30:09,840 --> 00:30:12,159
an attacker's target has capture set up

813
00:30:12,159 --> 00:30:14,159
you might sometimes see

814
00:30:14,159 --> 00:30:16,480
manual labors traversing the application

815
00:30:16,480 --> 00:30:17,760
flow

816
00:30:17,760 --> 00:30:19,120
or just

817
00:30:19,120 --> 00:30:21,520
sometimes you'll get an error code or

818
00:30:21,520 --> 00:30:23,360
if you're doing fingerprinting yourself

819
00:30:23,360 --> 00:30:26,399
in-house to see a mismatching data which

820
00:30:26,399 --> 00:30:29,039
might suggest a manual laborer somewhere

821
00:30:29,039 --> 00:30:32,320
is solving the captcha another token is

822
00:30:32,320 --> 00:30:34,399
transmitted to the attacker to use on

823
00:30:34,399 --> 00:30:37,919
their automation as just a

824
00:30:37,919 --> 00:30:42,080
known capture bypasses manual vapor

825
00:30:42,080 --> 00:30:43,520
the advanced threat also knows your

826
00:30:43,520 --> 00:30:46,000
application intimately and has taken the

827
00:30:46,000 --> 00:30:48,640
time to learn it

828
00:30:48,640 --> 00:30:50,399
beyond or in addition to that they might

829
00:30:50,399 --> 00:30:52,159
just be really familiar with apps like

830
00:30:52,159 --> 00:30:54,480
yours um like if you'd taken the time to

831
00:30:54,480 --> 00:30:56,640
learn netflix then a lot of that

832
00:30:56,640 --> 00:30:58,640
knowledge would apply to hulu pretty

833
00:30:58,640 --> 00:30:59,840
directly

834
00:30:59,840 --> 00:31:02,080
like drm and content protection stuff

835
00:31:02,080 --> 00:31:04,799
and what times the day cp traffic to

836
00:31:04,799 --> 00:31:08,080
disguise that attack activities with

837
00:31:08,080 --> 00:31:08,960
uh

838
00:31:08,960 --> 00:31:10,480
finally the

839
00:31:10,480 --> 00:31:12,159
most advanced threat probably has a

840
00:31:12,159 --> 00:31:14,159
decent grasp on computer science and

841
00:31:14,159 --> 00:31:16,240
programming themselves

842
00:31:16,240 --> 00:31:18,799
uh you see a lot of unsophisticated

843
00:31:18,799 --> 00:31:21,519
attackers use a tool called open bullet

844
00:31:21,519 --> 00:31:22,320
where

845
00:31:22,320 --> 00:31:24,640
you buy a config file somewhere uh there

846
00:31:24,640 --> 00:31:27,039
are some credentials and a proxy list

847
00:31:27,039 --> 00:31:29,200
and that'll just spray tracks for you

848
00:31:29,200 --> 00:31:30,559
you don't really need to know anything

849
00:31:30,559 --> 00:31:33,279
about the app that you're targeting

850
00:31:33,279 --> 00:31:35,440
but the logic there can't really get

851
00:31:35,440 --> 00:31:37,679
that sophisticated and when you're

852
00:31:37,679 --> 00:31:39,760
sharing a config like that with a whole

853
00:31:39,760 --> 00:31:41,919
lot of people you can be fingerprinted

854
00:31:41,919 --> 00:31:42,960
on things

855
00:31:42,960 --> 00:31:44,399
like this mentioned earlier request

856
00:31:44,399 --> 00:31:46,960
header order that would be stable across

857
00:31:46,960 --> 00:31:48,720
all of these configs

858
00:31:48,720 --> 00:31:51,840
and be blocked that way

859
00:31:54,480 --> 00:31:56,480
getting into what i've called tactical

860
00:31:56,480 --> 00:31:58,320
maneuvers but these are really just

861
00:31:58,320 --> 00:32:00,880
product and vendor agnostic actions to

862
00:32:00,880 --> 00:32:02,399
counter bot attacks

863
00:32:02,399 --> 00:32:04,480
and we'll discuss from simple to

864
00:32:04,480 --> 00:32:05,760
advanced

865
00:32:05,760 --> 00:32:07,760
for lessons sure teams to more of the

866
00:32:07,760 --> 00:32:11,600
early stuff and vice versa

867
00:32:11,760 --> 00:32:14,399
by going from top left

868
00:32:14,399 --> 00:32:17,200
to right

869
00:32:17,200 --> 00:32:19,440
start with ad hoc blocks and that's the

870
00:32:19,440 --> 00:32:21,760
simplest example again is when you see a

871
00:32:21,760 --> 00:32:23,360
single ip address sending in terms of

872
00:32:23,360 --> 00:32:25,519
traffic and you block it

873
00:32:25,519 --> 00:32:26,960
there might be a collection of ip

874
00:32:26,960 --> 00:32:29,840
addresses sending tons of requests

875
00:32:29,840 --> 00:32:32,000
and you find that they're grouped by

876
00:32:32,000 --> 00:32:34,559
subnet or by asms you can block those

877
00:32:34,559 --> 00:32:36,240
things

878
00:32:36,240 --> 00:32:38,159
one maneuver i've had to rely maybe way

879
00:32:38,159 --> 00:32:40,880
too much on less mature faces of my

880
00:32:40,880 --> 00:32:42,559
security programs

881
00:32:42,559 --> 00:32:44,799
has been blocking on request header

882
00:32:44,799 --> 00:32:46,080
order

883
00:32:46,080 --> 00:32:47,760
that's literally the order in which

884
00:32:47,760 --> 00:32:50,080
request headers appear

885
00:32:50,080 --> 00:32:52,159
and

886
00:32:52,159 --> 00:32:53,919
one caveat there is you probably only

887
00:32:53,919 --> 00:32:55,440
have an accurate picture of that right

888
00:32:55,440 --> 00:32:57,279
at the edge of your environment

889
00:32:57,279 --> 00:32:58,640
so what you might do

890
00:32:58,640 --> 00:33:00,320
is

891
00:33:00,320 --> 00:33:02,720
run something like varnish or set up

892
00:33:02,720 --> 00:33:04,399
another edge worker

893
00:33:04,399 --> 00:33:06,000
there to

894
00:33:06,000 --> 00:33:08,399
take incoming traffic and set your own

895
00:33:08,399 --> 00:33:11,200
header as the traffic passes internally

896
00:33:11,200 --> 00:33:14,720
you might use like x hyphen ho and have

897
00:33:14,720 --> 00:33:16,960
a string of colon delimited header names

898
00:33:16,960 --> 00:33:18,240
in there

899
00:33:18,240 --> 00:33:20,480
as you pass that down through stream

900
00:33:20,480 --> 00:33:22,880
it's visible to something like your boss

901
00:33:22,880 --> 00:33:24,799
and then you can just use a normal waft

902
00:33:24,799 --> 00:33:27,519
rule to block a certain request header

903
00:33:27,519 --> 00:33:28,880
order

904
00:33:28,880 --> 00:33:29,919
so

905
00:33:29,919 --> 00:33:32,240
it doesn't really involve writing

906
00:33:32,240 --> 00:33:34,159
regex to

907
00:33:34,159 --> 00:33:36,559
block header orders a certain way you

908
00:33:36,559 --> 00:33:38,320
set your own header and then just block

909
00:33:38,320 --> 00:33:41,519
out the hypervalue downstream

910
00:33:41,519 --> 00:33:43,200
again that probably sounds like a stupid

911
00:33:43,200 --> 00:33:45,039
fingerprint and i never would have

912
00:33:45,039 --> 00:33:46,880
thought it to be that effective but

913
00:33:46,880 --> 00:33:49,120
there's an old aol type warner patent

914
00:33:49,120 --> 00:33:50,159
for it

915
00:33:50,159 --> 00:33:51,679
it's a valuable tool when you've got

916
00:33:51,679 --> 00:33:53,190
nothing else to block on

917
00:33:53,190 --> 00:33:54,480
[Music]

918
00:33:54,480 --> 00:33:56,640
in a similar vein

919
00:33:56,640 --> 00:33:58,399
you might look for other fingerprints of

920
00:33:58,399 --> 00:34:01,120
an attacker that seemed pretty stable

921
00:34:01,120 --> 00:34:03,200
like request header order again is low

922
00:34:03,200 --> 00:34:05,279
tech relatively

923
00:34:05,279 --> 00:34:07,360
easy to change around

924
00:34:07,360 --> 00:34:08,800
but it's also something that you can

925
00:34:08,800 --> 00:34:10,800
start looking at without much effort

926
00:34:10,800 --> 00:34:14,560
today if you haven't ever done so before

927
00:34:14,560 --> 00:34:18,159
again you can do it in a varnish config

928
00:34:18,159 --> 00:34:20,560
if you're running the zardaxter job3

929
00:34:20,560 --> 00:34:23,199
libraries from earlier as well

930
00:34:23,199 --> 00:34:25,520
you can follow a similar pattern of

931
00:34:25,520 --> 00:34:27,520
computing fingerprint at the edge

932
00:34:27,520 --> 00:34:30,079
passing that downstream and acting on it

933
00:34:30,079 --> 00:34:33,199
with your waffle if you need to

934
00:34:33,199 --> 00:34:35,119
this also sort of relies on being able

935
00:34:35,119 --> 00:34:36,000
to

936
00:34:36,000 --> 00:34:37,599
look at these fingerprints and mass

937
00:34:37,599 --> 00:34:39,839
which is a highlight to the importance

938
00:34:39,839 --> 00:34:42,480
of logging and log aggregation

939
00:34:42,480 --> 00:34:44,079
um so

940
00:34:44,079 --> 00:34:47,520
all these things sort of work together

941
00:34:47,760 --> 00:34:49,918
another ad hoc block pattern to call out

942
00:34:49,918 --> 00:34:50,879
is

943
00:34:50,879 --> 00:34:52,399
looking at username

944
00:34:52,399 --> 00:34:54,159
or more specifically email address for

945
00:34:54,159 --> 00:34:55,679
registration

946
00:34:55,679 --> 00:34:58,079
because maybe you have a list of known

947
00:34:58,079 --> 00:35:01,119
temporary email provider domains and

948
00:35:01,119 --> 00:35:03,280
block registration anytime a match is

949
00:35:03,280 --> 00:35:04,480
observed

950
00:35:04,480 --> 00:35:06,960
those could be things like melanator.com

951
00:35:06,960 --> 00:35:09,599
or gorillamail.com

952
00:35:09,599 --> 00:35:11,440
but when you're using a list and

953
00:35:11,440 --> 00:35:14,000
especially one with regular updates that

954
00:35:14,000 --> 00:35:17,119
starts to get into adaptive blocks

955
00:35:17,119 --> 00:35:19,839
which again you have a list or some data

956
00:35:19,839 --> 00:35:21,680
maybe from a vendor

957
00:35:21,680 --> 00:35:24,880
it suggests what traffic is good or bad

958
00:35:24,880 --> 00:35:26,800
and

959
00:35:26,800 --> 00:35:28,720
like i know they're dedicated vendors

960
00:35:28,720 --> 00:35:31,520
that track temp email domains

961
00:35:31,520 --> 00:35:33,359
you could go find free lists that aren't

962
00:35:33,359 --> 00:35:35,520
that big but certain vendors will claim

963
00:35:35,520 --> 00:35:37,839
that they have tens of thousands

964
00:35:37,839 --> 00:35:39,920
so there's a trade-off in vendor

965
00:35:39,920 --> 00:35:42,000
alliance versus what you can find to

966
00:35:42,000 --> 00:35:44,560
open source

967
00:35:44,560 --> 00:35:46,880
often adaptive blocks are looking at ip

968
00:35:46,880 --> 00:35:50,480
addresses like maybe to do geo lookup

969
00:35:50,480 --> 00:35:51,920
or

970
00:35:51,920 --> 00:35:54,800
label traffic type the keypad or proxy

971
00:35:54,800 --> 00:35:59,000
we kind of touched on that earlier

972
00:35:59,119 --> 00:36:01,520
what differentiates adaptive blocks from

973
00:36:01,520 --> 00:36:03,359
ad hoc is that you're pulling in updates

974
00:36:03,359 --> 00:36:04,960
regularly yourself

975
00:36:04,960 --> 00:36:06,560
so you're not manually adding things

976
00:36:06,560 --> 00:36:09,119
like request header orders and the idea

977
00:36:09,119 --> 00:36:13,040
is to become more proactive

978
00:36:13,040 --> 00:36:15,040
similarly i guess in a level of

979
00:36:15,040 --> 00:36:17,200
productivity or rate limits

980
00:36:17,200 --> 00:36:19,200
which

981
00:36:19,200 --> 00:36:21,359
aren't totally effective if you look at

982
00:36:21,359 --> 00:36:23,040
ip address alone

983
00:36:23,040 --> 00:36:24,480
you might consider some other unique

984
00:36:24,480 --> 00:36:27,040
identifiers but it becomes harder to do

985
00:36:27,040 --> 00:36:27,839
that

986
00:36:27,839 --> 00:36:29,440
with olaf

987
00:36:29,440 --> 00:36:31,200
or in places that are earlier than

988
00:36:31,200 --> 00:36:33,599
origin

989
00:36:33,599 --> 00:36:35,839
ip address based rate limiting still

990
00:36:35,839 --> 00:36:38,480
does have some value and it can catch a

991
00:36:38,480 --> 00:36:40,480
fair amount of traffic

992
00:36:40,480 --> 00:36:42,880
those are things like if i see 10 failed

993
00:36:42,880 --> 00:36:44,880
login attempts within any

994
00:36:44,880 --> 00:36:46,720
one minute span i'm going to block that

995
00:36:46,720 --> 00:36:49,680
ip for an hour or you can play with all

996
00:36:49,680 --> 00:36:52,880
those values certainly

997
00:36:52,880 --> 00:36:55,760
you will still run into some attackers

998
00:36:55,760 --> 00:36:58,960
that send traffic low and slow uh they

999
00:36:58,960 --> 00:37:01,280
have a huge list but they have a lot of

1000
00:37:01,280 --> 00:37:03,920
time to wait to run that traffic through

1001
00:37:03,920 --> 00:37:06,839
you so we're just stable the rate limits

1002
00:37:06,839 --> 00:37:10,560
um using other unique identifiers again

1003
00:37:10,560 --> 00:37:12,240
can be more effective

1004
00:37:12,240 --> 00:37:15,040
but it requires some more custom logic

1005
00:37:15,040 --> 00:37:18,079
downstream and often in origin where you

1006
00:37:18,079 --> 00:37:19,760
understand things like

1007
00:37:19,760 --> 00:37:22,240
maybe values within your authorization

1008
00:37:22,240 --> 00:37:23,200
token

1009
00:37:23,200 --> 00:37:25,599
um or you can look at things like

1010
00:37:25,599 --> 00:37:28,640
payment credentials or username

1011
00:37:28,640 --> 00:37:31,119
considering them uniquely and maybe

1012
00:37:31,119 --> 00:37:33,280
tying attempts together across a lot of

1013
00:37:33,280 --> 00:37:35,599
fraudsters

1014
00:37:35,599 --> 00:37:38,320
implant bot detection we've gone over

1015
00:37:38,320 --> 00:37:40,400
the bot traps

1016
00:37:40,400 --> 00:37:42,160
some people might consider these

1017
00:37:42,160 --> 00:37:44,720
particular client bot detection but i

1018
00:37:44,720 --> 00:37:46,560
would consider it any logic

1019
00:37:46,560 --> 00:37:47,680
that only

1020
00:37:47,680 --> 00:37:50,000
anti-automation should fail to exercise

1021
00:37:50,000 --> 00:37:51,440
correctly

1022
00:37:51,440 --> 00:37:53,599
like if we think about our happy path

1023
00:37:53,599 --> 00:37:54,800
through the app

1024
00:37:54,800 --> 00:37:57,599
a normal user coming to us

1025
00:37:57,599 --> 00:37:59,200
will exercise an invisible capture

1026
00:37:59,200 --> 00:38:01,839
payload that's not a big deal

1027
00:38:01,839 --> 00:38:04,079
that data will be included on the

1028
00:38:04,079 --> 00:38:06,800
request header to the back end

1029
00:38:06,800 --> 00:38:08,800
but we know it's suspect when that's

1030
00:38:08,800 --> 00:38:11,440
missing and we can block just on the

1031
00:38:11,440 --> 00:38:13,359
absence of that header

1032
00:38:13,359 --> 00:38:14,880
but a normal user

1033
00:38:14,880 --> 00:38:16,160
going through our client won't ever

1034
00:38:16,160 --> 00:38:17,440
encounter that

1035
00:38:17,440 --> 00:38:19,680
so that's one super simple example of a

1036
00:38:19,680 --> 00:38:21,280
bot trap

1037
00:38:21,280 --> 00:38:23,280
whereas others might include hidden

1038
00:38:23,280 --> 00:38:25,680
forms or pathways that only bots

1039
00:38:25,680 --> 00:38:28,320
spidering your app should hit on

1040
00:38:28,320 --> 00:38:30,160
or host names that you've set up and

1041
00:38:30,160 --> 00:38:33,440
somehow broadcast to attract attackers

1042
00:38:33,440 --> 00:38:36,640
there was a time when testing a host

1043
00:38:36,640 --> 00:38:38,800
name for one of my apps

1044
00:38:38,800 --> 00:38:40,640
i left open up the world

1045
00:38:40,640 --> 00:38:42,320
and if you were to hit the login path

1046
00:38:42,320 --> 00:38:44,640
through that host name instead of the

1047
00:38:44,640 --> 00:38:47,680
official one you never encountered basic

1048
00:38:47,680 --> 00:38:49,839
waff rate limiting

1049
00:38:49,839 --> 00:38:52,880
um so some open bullet config files

1050
00:38:52,880 --> 00:38:55,839
started circulating the shady platforms

1051
00:38:55,839 --> 00:38:58,160
where such things happen

1052
00:38:58,160 --> 00:38:59,680
and when we realized this host name was

1053
00:38:59,680 --> 00:39:01,839
still online and what it was

1054
00:39:01,839 --> 00:39:04,160
instead of taking it down right away we

1055
00:39:04,160 --> 00:39:06,480
actually swapped the logic to point

1056
00:39:06,480 --> 00:39:07,200
so

1057
00:39:07,200 --> 00:39:09,440
that successful logins would trigger

1058
00:39:09,440 --> 00:39:11,920
post compromise cleanup actions on those

1059
00:39:11,920 --> 00:39:13,680
user accounts

1060
00:39:13,680 --> 00:39:15,760
so that was sort of unintentional but i

1061
00:39:15,760 --> 00:39:18,160
think you could achieve the same thing

1062
00:39:18,160 --> 00:39:20,000
proactively yourself

1063
00:39:20,000 --> 00:39:22,480
and then a final example is client

1064
00:39:22,480 --> 00:39:24,079
puzzle protocol

1065
00:39:24,079 --> 00:39:26,720
and that's sort of a proof of work

1066
00:39:26,720 --> 00:39:27,920
that would happen in the background of

1067
00:39:27,920 --> 00:39:31,359
your client as a means of revealing any

1068
00:39:31,359 --> 00:39:34,320
sessions run by unofficial scripts

1069
00:39:34,320 --> 00:39:35,520
uh that's going to

1070
00:39:35,520 --> 00:39:38,000
require obfuscated client-side code

1071
00:39:38,000 --> 00:39:40,800
again like fingerprinting did earlier

1072
00:39:40,800 --> 00:39:42,320
but at least it'll weed out people who

1073
00:39:42,320 --> 00:39:45,040
haven't de-obfuscated that code which

1074
00:39:45,040 --> 00:39:47,760
can be effortful

1075
00:39:47,760 --> 00:39:49,599
that's also a little beyond what open

1076
00:39:49,599 --> 00:39:52,000
bullet is capable of easily replicating

1077
00:39:52,000 --> 00:39:53,440
so it helps curb some of the

1078
00:39:53,440 --> 00:39:54,839
distribution

1079
00:39:54,839 --> 00:39:56,640
of

1080
00:39:56,640 --> 00:39:58,880
versus your app

1081
00:39:58,880 --> 00:39:59,839
and then

1082
00:39:59,839 --> 00:40:04,079
um instead of talking about how to

1083
00:40:04,079 --> 00:40:06,160
how to find a block uh if we were

1084
00:40:06,160 --> 00:40:09,280
discussing how to block in itself

1085
00:40:09,280 --> 00:40:12,240
you might already be using edge logic

1086
00:40:12,240 --> 00:40:15,359
to send other fingerprints downstream

1087
00:40:15,359 --> 00:40:16,800
and block on them

1088
00:40:16,800 --> 00:40:19,119
log them or take some other action

1089
00:40:19,119 --> 00:40:20,319
but another thing that you're well

1090
00:40:20,319 --> 00:40:22,560
suited to do there at the edge is take

1091
00:40:22,560 --> 00:40:24,800
any obvious responses from security

1092
00:40:24,800 --> 00:40:27,200
appliances and make them look like real

1093
00:40:27,200 --> 00:40:30,000
negative responses from your app

1094
00:40:30,000 --> 00:40:32,960
um and as sort of alluded to earlier uh

1095
00:40:32,960 --> 00:40:35,119
you could use for example varnish

1096
00:40:35,119 --> 00:40:37,520
control language and if the response is

1097
00:40:37,520 --> 00:40:38,800
a 406

1098
00:40:38,800 --> 00:40:40,880
and that's something your waff sends

1099
00:40:40,880 --> 00:40:42,640
back and only that

1100
00:40:42,640 --> 00:40:44,720
then you can change all of those to 403

1101
00:40:44,720 --> 00:40:47,119
status codes and set a bunch of response

1102
00:40:47,119 --> 00:40:50,319
headers that look legit from your app

1103
00:40:50,319 --> 00:40:52,640
you can also add additional logic based

1104
00:40:52,640 --> 00:40:54,800
on path or host name if you have

1105
00:40:54,800 --> 00:40:58,160
multiple and fill in the request body

1106
00:40:58,160 --> 00:41:00,960
i call that spoof blocking

1107
00:41:00,960 --> 00:41:02,720
and another thing you can do if your

1108
00:41:02,720 --> 00:41:04,880
waffle edge supports it

1109
00:41:04,880 --> 00:41:06,480
it's called tarp hitting

1110
00:41:06,480 --> 00:41:08,560
and that involves keeping the connection

1111
00:41:08,560 --> 00:41:11,040
open and definitely to tie up

1112
00:41:11,040 --> 00:41:13,280
incoming malicious bots instead of just

1113
00:41:13,280 --> 00:41:17,200
sending them a response of any type

1114
00:41:17,200 --> 00:41:19,359
a middle ground between spoof blocks and

1115
00:41:19,359 --> 00:41:22,000
carpet would be just delaying response

1116
00:41:22,000 --> 00:41:24,800
and slowing down your attackers

1117
00:41:24,800 --> 00:41:27,440
and if you're really sadistic you can

1118
00:41:27,440 --> 00:41:29,119
write some logic at the edge which just

1119
00:41:29,119 --> 00:41:31,760
randomly does any one of those things

1120
00:41:31,760 --> 00:41:34,240
or sends back some random response

1121
00:41:34,240 --> 00:41:36,720
status code and body and have fun with

1122
00:41:36,720 --> 00:41:38,640
your attackers

1123
00:41:38,640 --> 00:41:40,880
but we should uh touch on that you don't

1124
00:41:40,880 --> 00:41:43,599
need to block when you realize that

1125
00:41:43,599 --> 00:41:45,520
some things arrive with a certain user

1126
00:41:45,520 --> 00:41:46,560
session

1127
00:41:46,560 --> 00:41:48,000
there are lots of counter measures you

1128
00:41:48,000 --> 00:41:50,720
can take against bots and suspect users

1129
00:41:50,720 --> 00:41:53,680
or high risk users that are more subtle

1130
00:41:53,680 --> 00:41:55,520
and these include your

1131
00:41:55,520 --> 00:41:58,560
challenges your locks enhanced logging

1132
00:41:58,560 --> 00:42:00,160
flags limits

1133
00:42:00,160 --> 00:42:02,400
waiting rooms and other delays

1134
00:42:02,400 --> 00:42:05,520
blocking some things but not others

1135
00:42:05,520 --> 00:42:07,200
sending email or

1136
00:42:07,200 --> 00:42:09,200
push notifications with

1137
00:42:09,200 --> 00:42:12,640
reset or post compromise link

1138
00:42:12,640 --> 00:42:13,520
that

1139
00:42:13,520 --> 00:42:15,359
ladder point only works if the attacker

1140
00:42:15,359 --> 00:42:18,319
doesn't control a user's email phone

1141
00:42:18,319 --> 00:42:21,040
which obviously is less common but

1142
00:42:21,040 --> 00:42:23,839
sometimes happens

1143
00:42:23,839 --> 00:42:27,040
but by and far the best maneuver beyond

1144
00:42:27,040 --> 00:42:29,040
outright blocking is just actual product

1145
00:42:29,040 --> 00:42:30,480
security

1146
00:42:30,480 --> 00:42:32,319
there's no magic build to get away from

1147
00:42:32,319 --> 00:42:34,960
real product security features

1148
00:42:34,960 --> 00:42:38,079
because you can scan for login attackers

1149
00:42:38,079 --> 00:42:40,160
request headers and block different ones

1150
00:42:40,160 --> 00:42:41,599
all day long

1151
00:42:41,599 --> 00:42:44,000
but if you're using web then or

1152
00:42:44,000 --> 00:42:46,800
requiring a fido key or a different

1153
00:42:46,800 --> 00:42:49,280
second factor on every login

1154
00:42:49,280 --> 00:42:50,880
or you switch to magic link

1155
00:42:50,880 --> 00:42:53,680
authentication which kind of is

1156
00:42:53,680 --> 00:42:56,640
passwordless altogether as well

1157
00:42:56,640 --> 00:42:59,040
any of those setups could stop login

1158
00:42:59,040 --> 00:43:00,720
attackers completely

1159
00:43:00,720 --> 00:43:03,200
um and just make the need for request

1160
00:43:03,200 --> 00:43:05,440
header order blocks on that pathway

1161
00:43:05,440 --> 00:43:07,359
obsolete

1162
00:43:07,359 --> 00:43:10,000
so not every security program can get

1163
00:43:10,000 --> 00:43:12,000
away with any of those things but

1164
00:43:12,000 --> 00:43:14,960
they're all pretty open technologies

1165
00:43:14,960 --> 00:43:16,720
that you could adopt

1166
00:43:16,720 --> 00:43:18,640
and along the same lines

1167
00:43:18,640 --> 00:43:21,359
there are certain vendors that can slap

1168
00:43:21,359 --> 00:43:24,240
multi-factor off or password checking on

1169
00:43:24,240 --> 00:43:26,800
your product for you but i argue it

1170
00:43:26,800 --> 00:43:28,319
would be better to

1171
00:43:28,319 --> 00:43:30,079
engineer those natively

1172
00:43:30,079 --> 00:43:31,280
yourself

1173
00:43:31,280 --> 00:43:33,680
and reduce vendor reliance provide a

1174
00:43:33,680 --> 00:43:36,240
more cohesive user experience hold onto

1175
00:43:36,240 --> 00:43:37,680
more data yourself

1176
00:43:37,680 --> 00:43:39,839
and just try to best understand what's

1177
00:43:39,839 --> 00:43:42,480
going on in your own app

1178
00:43:42,480 --> 00:43:44,400
owasp has a credential stuffing cheat

1179
00:43:44,400 --> 00:43:46,160
sheet there are subsections on

1180
00:43:46,160 --> 00:43:48,560
multi-factor authentication and defense

1181
00:43:48,560 --> 00:43:50,720
and depth that get into this

1182
00:43:50,720 --> 00:43:52,319
and you can also

1183
00:43:52,319 --> 00:43:54,880
i guess i implore you to just really

1184
00:43:54,880 --> 00:43:57,359
learn your own vlog pro and application

1185
00:43:57,359 --> 00:43:58,319
flows

1186
00:43:58,319 --> 00:44:00,240
uh traverse those yourself while

1187
00:44:00,240 --> 00:44:02,160
proxying the traffic

1188
00:44:02,160 --> 00:44:04,240
really understand also what's happening

1189
00:44:04,240 --> 00:44:06,800
on the back end for those requests

1190
00:44:06,800 --> 00:44:08,480
and what different components are being

1191
00:44:08,480 --> 00:44:11,040
hit which might dictate where you could

1192
00:44:11,040 --> 00:44:12,319
respond

1193
00:44:12,319 --> 00:44:13,920
you know again sometimes

1194
00:44:13,920 --> 00:44:16,319
getting creative with protections

1195
00:44:16,319 --> 00:44:18,160
and just generally put on your security

1196
00:44:18,160 --> 00:44:20,480
hat

1197
00:44:20,720 --> 00:44:22,960
quickly touching on overall patterns for

1198
00:44:22,960 --> 00:44:25,280
implementing protections

1199
00:44:25,280 --> 00:44:26,880
these refer to

1200
00:44:26,880 --> 00:44:28,400
where you enact most of your counter

1201
00:44:28,400 --> 00:44:29,680
measures

1202
00:44:29,680 --> 00:44:31,359
and it doesn't really apply to a single

1203
00:44:31,359 --> 00:44:34,000
server setup but definitely does for

1204
00:44:34,000 --> 00:44:37,359
enterprise teams with big complex apps

1205
00:44:37,359 --> 00:44:39,440
these first two patterns are for less

1206
00:44:39,440 --> 00:44:41,280
mature programs

1207
00:44:41,280 --> 00:44:45,440
i think you should strive for the last

1208
00:44:46,960 --> 00:44:49,359
i've seen situations i would call this

1209
00:44:49,359 --> 00:44:52,480
pattern one heavy lifter near origin

1210
00:44:52,480 --> 00:44:54,560
there are situations where a secops team

1211
00:44:54,560 --> 00:44:56,960
really only controls the waff

1212
00:44:56,960 --> 00:44:58,480
that's their one thing that they're

1213
00:44:58,480 --> 00:44:59,920
trusted with

1214
00:44:59,920 --> 00:45:02,960
it sits relatively close to origin and

1215
00:45:02,960 --> 00:45:04,640
you're able to still do a lot with just

1216
00:45:04,640 --> 00:45:05,440
that

1217
00:45:05,440 --> 00:45:07,200
especially as mentioned before if you

1218
00:45:07,200 --> 00:45:09,839
can set certain data points the edge and

1219
00:45:09,839 --> 00:45:12,880
then act on them at the loft

1220
00:45:12,880 --> 00:45:14,720
this is also a place where you tend to

1221
00:45:14,720 --> 00:45:18,160
have pretty good visibility overall um

1222
00:45:18,160 --> 00:45:20,240
time and again i see that wafflogs are

1223
00:45:20,240 --> 00:45:22,240
usually present and or more

1224
00:45:22,240 --> 00:45:24,640
comprehensive than anything from the cdn

1225
00:45:24,640 --> 00:45:26,880
or edge just because that stuff is a lot

1226
00:45:26,880 --> 00:45:28,240
higher volume

1227
00:45:28,240 --> 00:45:30,240
um you have a better understanding of

1228
00:45:30,240 --> 00:45:32,800
the waffles what's going on but it isn't

1229
00:45:32,800 --> 00:45:35,359
as performant as this next pattern and

1230
00:45:35,359 --> 00:45:39,200
it yields a high cloud build

1231
00:45:39,440 --> 00:45:41,520
edge it and forget it this is where

1232
00:45:41,520 --> 00:45:43,280
you're just doing as much as possible

1233
00:45:43,280 --> 00:45:44,880
right at the edge and you don't really

1234
00:45:44,880 --> 00:45:46,960
care if there's decreased visibility

1235
00:45:46,960 --> 00:45:48,319
because

1236
00:45:48,319 --> 00:45:50,319
it's pretty cheap to do this it's pretty

1237
00:45:50,319 --> 00:45:52,400
performant

1238
00:45:52,400 --> 00:45:54,079
again if you haven't figured it out with

1239
00:45:54,079 --> 00:45:56,240
my recurring theme you can accomplish a

1240
00:45:56,240 --> 00:45:58,880
lot with varnish control language

1241
00:45:58,880 --> 00:46:01,839
that's just open source caching tech

1242
00:46:01,839 --> 00:46:03,200
but you can get creative with it as a

1243
00:46:03,200 --> 00:46:04,880
security team

1244
00:46:04,880 --> 00:46:07,119
um that might mean like overloading

1245
00:46:07,119 --> 00:46:10,160
error handling vcl to block at the edge

1246
00:46:10,160 --> 00:46:12,720
if it wasn't intended to do so

1247
00:46:12,720 --> 00:46:15,760
but again you can also spoof blocks from

1248
00:46:15,760 --> 00:46:18,319
farther within your environment

1249
00:46:18,319 --> 00:46:20,720
this is fast it's performance it's

1250
00:46:20,720 --> 00:46:23,040
relatively cheap but it comes at a cost

1251
00:46:23,040 --> 00:46:24,880
of visibility

1252
00:46:24,880 --> 00:46:27,280
more often than not

1253
00:46:27,280 --> 00:46:28,960
sorry to interrupt randy we have two

1254
00:46:28,960 --> 00:46:29,920
minutes

1255
00:46:29,920 --> 00:46:32,400
oh okay

1256
00:46:32,400 --> 00:46:34,960
i'll jump to my demo

1257
00:46:34,960 --> 00:46:35,760
uh

1258
00:46:35,760 --> 00:46:37,920
my demo uh i won't go into the live

1259
00:46:37,920 --> 00:46:40,319
portion but the code and slide and

1260
00:46:40,319 --> 00:46:42,960
resources are all available at this link

1261
00:46:42,960 --> 00:46:45,680
on my infosec blog

1262
00:46:45,680 --> 00:46:47,599
this puts together a lot of the open

1263
00:46:47,599 --> 00:46:50,319
source components that we've touched on

1264
00:46:50,319 --> 00:46:54,000
from varnish to apache mod security

1265
00:46:54,000 --> 00:46:56,400
there's a demo flask web app

1266
00:46:56,400 --> 00:46:58,560
everything's being logged

1267
00:46:58,560 --> 00:47:00,880
but varnish is used to

1268
00:47:00,880 --> 00:47:03,760
morph any blocks from mod security uh

1269
00:47:03,760 --> 00:47:05,760
just generally anything that has a 406

1270
00:47:05,760 --> 00:47:08,160
response code to look like a normal

1271
00:47:08,160 --> 00:47:11,119
negative response um so again that's

1272
00:47:11,119 --> 00:47:13,440
all available um that link goes to

1273
00:47:13,440 --> 00:47:15,839
slides it goes to github um and it has

1274
00:47:15,839 --> 00:47:17,359
all the resources that have been made

1275
00:47:17,359 --> 00:47:20,799
from earlier in the day

1276
00:47:22,240 --> 00:47:22,960
so

1277
00:47:22,960 --> 00:47:25,280
quick wrap up um

1278
00:47:25,280 --> 00:47:27,359
you can be vendor agnostic you can be

1279
00:47:27,359 --> 00:47:29,359
really effective in countering bots if

1280
00:47:29,359 --> 00:47:31,200
you just embrace normal traditional

1281
00:47:31,200 --> 00:47:32,960
product security

1282
00:47:32,960 --> 00:47:35,760
this is an ever-evolving field but if

1283
00:47:35,760 --> 00:47:36,559
you

1284
00:47:36,559 --> 00:47:39,119
position yourself with more protections

1285
00:47:39,119 --> 00:47:41,599
than your competitors you'll probably be

1286
00:47:41,599 --> 00:47:42,960
left alone

1287
00:47:42,960 --> 00:47:45,040
not have to spend all your time reading

1288
00:47:45,040 --> 00:47:48,319
anti-bot research

1289
00:47:49,599 --> 00:47:51,760
again there's some links uh feel free to

1290
00:47:51,760 --> 00:47:53,680
reach out to my own email i'm happy to

1291
00:47:53,680 --> 00:47:55,599
chat about any of this further uh or

1292
00:47:55,599 --> 00:47:58,640
answer any questions uh also check out

1293
00:47:58,640 --> 00:48:00,960
bullish careers because we're hiring a

1294
00:48:00,960 --> 00:48:03,280
few to take to work together um thanks

1295
00:48:03,280 --> 00:48:07,200
for attending my talk

