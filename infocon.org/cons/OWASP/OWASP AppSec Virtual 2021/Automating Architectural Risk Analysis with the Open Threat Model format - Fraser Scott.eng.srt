1
00:00:01,420 --> 00:00:05,630
[Music]

2
00:00:07,839 --> 00:00:10,639
so i am going to be talking to you about

3
00:00:10,639 --> 00:00:12,960
automating architectural risk analysis

4
00:00:12,960 --> 00:00:15,440
with the open threat model format

5
00:00:15,440 --> 00:00:18,080
before i do that i'd just like to spend

6
00:00:18,080 --> 00:00:19,840
a couple of months just um talking about

7
00:00:19,840 --> 00:00:22,880
myself uh i'm the vp of product at iris

8
00:00:22,880 --> 00:00:25,039
risk and as glenn said sort of i've got

9
00:00:25,039 --> 00:00:27,439
a bit of a background in um open source

10
00:00:27,439 --> 00:00:29,359
type modeling for the last six years

11
00:00:29,359 --> 00:00:31,760
cloud security all that kind of

12
00:00:31,760 --> 00:00:34,559
all that kind of jazz

13
00:00:34,559 --> 00:00:38,079
um so the title of the talk contains the

14
00:00:38,079 --> 00:00:42,000
word uh architecture and risk analysis

15
00:00:42,000 --> 00:00:42,879
um

16
00:00:42,879 --> 00:00:45,920
so i'm going to start off this talk just

17
00:00:45,920 --> 00:00:47,520
laying some foundations about what we

18
00:00:47,520 --> 00:00:49,440
mean with architecture

19
00:00:49,440 --> 00:00:52,239
on the screen you can see three example

20
00:00:52,239 --> 00:00:54,399
definitions there are others uh the

21
00:00:54,399 --> 00:00:55,920
first one i'm not going to read through

22
00:00:55,920 --> 00:00:57,920
all of these slides of course the first

23
00:00:57,920 --> 00:01:00,640
one provided by gartner is quite simple

24
00:01:00,640 --> 00:01:02,079
and intuitive and probably quite

25
00:01:02,079 --> 00:01:03,840
familiar it's the it's the obvious kind

26
00:01:03,840 --> 00:01:05,119
of the first thing you tend to think of

27
00:01:05,119 --> 00:01:06,560
when you think of architecture in this

28
00:01:06,560 --> 00:01:07,920
context

29
00:01:07,920 --> 00:01:09,200
the the second one i think is a little

30
00:01:09,200 --> 00:01:10,960
bit more interesting though

31
00:01:10,960 --> 00:01:11,840
um

32
00:01:11,840 --> 00:01:15,439
that's really talking about the

33
00:01:15,439 --> 00:01:18,159
there are there's no one single view of

34
00:01:18,159 --> 00:01:20,479
architecture and depending on what

35
00:01:20,479 --> 00:01:22,240
you're looking at our understanding of

36
00:01:22,240 --> 00:01:24,000
architecture can vary so

37
00:01:24,000 --> 00:01:25,759
there's architecture when we think of in

38
00:01:25,759 --> 00:01:27,439
terms of infrastructure but there's also

39
00:01:27,439 --> 00:01:29,840
the application design architecture you

40
00:01:29,840 --> 00:01:32,320
know maybe the choice of threading or or

41
00:01:32,320 --> 00:01:34,240
some other core aspect to how you built

42
00:01:34,240 --> 00:01:35,680
an application

43
00:01:35,680 --> 00:01:36,479
and

44
00:01:36,479 --> 00:01:38,479
the boundary between those types of

45
00:01:38,479 --> 00:01:42,560
architecture is blurred um and quite uh

46
00:01:42,560 --> 00:01:44,880
sort of fuzzy at times

47
00:01:44,880 --> 00:01:46,799
the third definition however is probably

48
00:01:46,799 --> 00:01:48,560
my favorite which is from martin fowler

49
00:01:48,560 --> 00:01:49,680
which is

50
00:01:49,680 --> 00:01:51,439
you know fundamentally architecture of

51
00:01:51,439 --> 00:01:53,119
the decisions that you wish you could

52
00:01:53,119 --> 00:01:54,960
get right early on in a project they are

53
00:01:54,960 --> 00:01:55,680
the

54
00:01:55,680 --> 00:01:57,759
typically the hard to undo stuff uh

55
00:01:57,759 --> 00:01:59,119
there's some sort of foreshadowing going

56
00:01:59,119 --> 00:02:00,159
on here

57
00:02:00,159 --> 00:02:01,040
um

58
00:02:01,040 --> 00:02:02,799
and then sort of unfortunately they're

59
00:02:02,799 --> 00:02:04,560
often these kind of decisions that

60
00:02:04,560 --> 00:02:06,159
aren't you you aren't necessarily any

61
00:02:06,159 --> 00:02:08,800
better at making early on so you know

62
00:02:08,800 --> 00:02:11,038
architectural is inherently a a hard

63
00:02:11,038 --> 00:02:13,440
problem

64
00:02:13,520 --> 00:02:16,319
um so that's a bit of an understanding

65
00:02:16,319 --> 00:02:18,720
of what we mean when we talk about

66
00:02:18,720 --> 00:02:20,160
architecture so what's architectural

67
00:02:20,160 --> 00:02:21,840
risk analysis well probably the more

68
00:02:21,840 --> 00:02:23,520
familiar term for that is threat

69
00:02:23,520 --> 00:02:25,840
modeling or you know in general secure

70
00:02:25,840 --> 00:02:26,959
design

71
00:02:26,959 --> 00:02:29,280
um there's obviously a ton of security

72
00:02:29,280 --> 00:02:31,120
tools out there there's and processes of

73
00:02:31,120 --> 00:02:33,120
course there's sas and das and pen

74
00:02:33,120 --> 00:02:34,879
testing and seams

75
00:02:34,879 --> 00:02:37,200
etc

76
00:02:37,200 --> 00:02:38,480
one of the challenges with cyber

77
00:02:38,480 --> 00:02:40,319
security is that it often focuses on the

78
00:02:40,319 --> 00:02:41,680
particulars so you know there's a

79
00:02:41,680 --> 00:02:43,360
particular vulnerability in a particular

80
00:02:43,360 --> 00:02:45,200
line of code or a networks connecting

81
00:02:45,200 --> 00:02:47,280
from a to b on port c

82
00:02:47,280 --> 00:02:49,360
or there's a particular exploit against

83
00:02:49,360 --> 00:02:51,840
some version of a product and that's all

84
00:02:51,840 --> 00:02:54,080
good that's all um completely necessary

85
00:02:54,080 --> 00:02:55,280
but it's not

86
00:02:55,280 --> 00:02:57,040
sufficient so

87
00:02:57,040 --> 00:02:59,040
it misses the bigger picture of things

88
00:02:59,040 --> 00:03:00,879
it misses the relationship between

89
00:03:00,879 --> 00:03:02,720
things typically so threat modelling you

90
00:03:02,720 --> 00:03:04,000
know it's not the only process out there

91
00:03:04,000 --> 00:03:05,360
of course but throughout modeling as a

92
00:03:05,360 --> 00:03:06,400
practice

93
00:03:06,400 --> 00:03:08,560
allows you to take a step back look at

94
00:03:08,560 --> 00:03:10,720
look at the bigger picture um and as it

95
00:03:10,720 --> 00:03:11,840
says it

96
00:03:11,840 --> 00:03:14,720
looks at focus on the forest rather than

97
00:03:14,720 --> 00:03:17,440
on the trees

98
00:03:17,440 --> 00:03:20,239
um i'm sure everyone on this call is

99
00:03:20,239 --> 00:03:22,239
probably aware that uh insecure design

100
00:03:22,239 --> 00:03:24,799
has now been included in the os top 10

101
00:03:24,799 --> 00:03:27,200
which is absolutely amazing um it's

102
00:03:27,200 --> 00:03:29,120
important because you know we

103
00:03:29,120 --> 00:03:32,319
differentiate between design flaws and

104
00:03:32,319 --> 00:03:34,319
implementation defects and we do that

105
00:03:34,319 --> 00:03:35,840
for a reason because they have different

106
00:03:35,840 --> 00:03:39,280
root causes and different remediations

107
00:03:39,280 --> 00:03:41,599
so a secure design can still have

108
00:03:41,599 --> 00:03:43,440
implementation defects that lead to

109
00:03:43,440 --> 00:03:45,599
vulnerabilities that can be exploited

110
00:03:45,599 --> 00:03:47,200
which is fair enough so you still need

111
00:03:47,200 --> 00:03:48,640
your sass in your desk and all that kind

112
00:03:48,640 --> 00:03:51,120
of stuff but an insecure design cannot

113
00:03:51,120 --> 00:03:53,920
be fixed by a perfect implementation so

114
00:03:53,920 --> 00:03:55,360
because you the controls and things like

115
00:03:55,360 --> 00:03:57,519
that that you need are even considered

116
00:03:57,519 --> 00:04:00,000
at that point so you can't it's sort of

117
00:04:00,000 --> 00:04:01,920
a bit of an asymmetrical problem in that

118
00:04:01,920 --> 00:04:04,079
way

119
00:04:05,920 --> 00:04:08,640
um i'm not going to spend too long

120
00:04:08,640 --> 00:04:10,080
talking about the ins and outs of

121
00:04:10,080 --> 00:04:12,400
different threat modeling practices um

122
00:04:12,400 --> 00:04:14,159
there are many different interpretations

123
00:04:14,159 --> 00:04:15,680
of what threat modeling is or how to do

124
00:04:15,680 --> 00:04:16,478
it

125
00:04:16,478 --> 00:04:17,440
um

126
00:04:17,440 --> 00:04:18,720
if someone's not particularly familiar

127
00:04:18,720 --> 00:04:20,160
with what threat modelling is i'll just

128
00:04:20,160 --> 00:04:21,759
spend a couple of seconds talking about

129
00:04:21,759 --> 00:04:23,520
it uh using adam schroeder stacks four

130
00:04:23,520 --> 00:04:24,400
questions because i think this is

131
00:04:24,400 --> 00:04:25,919
probably one of the most useful general

132
00:04:25,919 --> 00:04:27,759
frameworks for describing threat

133
00:04:27,759 --> 00:04:31,040
modelling so in short four questions

134
00:04:31,040 --> 00:04:32,160
what are you working on what are you

135
00:04:32,160 --> 00:04:34,560
building what can go wrong uh what are

136
00:04:34,560 --> 00:04:36,240
you going to do about it and did you do

137
00:04:36,240 --> 00:04:38,000
a good job so the first one is really

138
00:04:38,000 --> 00:04:40,080
looking at the scope

139
00:04:40,080 --> 00:04:41,440
typically in a manual process that

140
00:04:41,440 --> 00:04:43,040
involves looking through documents or

141
00:04:43,040 --> 00:04:44,880
looking at whiteboards and designs and

142
00:04:44,880 --> 00:04:46,080
pictures and things like that and

143
00:04:46,080 --> 00:04:47,600
understanding what is this thing that

144
00:04:47,600 --> 00:04:50,000
we're um threat modelling

145
00:04:50,000 --> 00:04:51,360
the second question what can go wrong

146
00:04:51,360 --> 00:04:52,720
that's the process of identifying

147
00:04:52,720 --> 00:04:54,240
potential threats

148
00:04:54,240 --> 00:04:55,600
as long as they're plausible they're

149
00:04:55,600 --> 00:04:57,120
probably in scope of threat modding we

150
00:04:57,120 --> 00:04:58,400
don't want to do that sort of movie

151
00:04:58,400 --> 00:05:00,560
hacking stuff necessarily um but that's

152
00:05:00,560 --> 00:05:03,039
the sort of thing like an attacker um

153
00:05:03,039 --> 00:05:04,160
space

154
00:05:04,160 --> 00:05:05,840
now it's all good fun finding threats is

155
00:05:05,840 --> 00:05:07,280
great fun but if you're not doing

156
00:05:07,280 --> 00:05:08,560
anything with those threats you found

157
00:05:08,560 --> 00:05:09,919
there's probably not much point of sort

158
00:05:09,919 --> 00:05:11,360
of cyber security neighborgating at that

159
00:05:11,360 --> 00:05:14,080
point um so you the next question then

160
00:05:14,080 --> 00:05:15,840
is what are we going to do about it well

161
00:05:15,840 --> 00:05:18,000
we want to find mitigating controls and

162
00:05:18,000 --> 00:05:20,720
implement them so you know i can do x in

163
00:05:20,720 --> 00:05:22,320
order to eliminate that threat or i can

164
00:05:22,320 --> 00:05:24,240
do y to mitigate it or i can transfer

165
00:05:24,240 --> 00:05:25,680
this to another

166
00:05:25,680 --> 00:05:27,759
a legal entity or in some way

167
00:05:27,759 --> 00:05:29,120
um

168
00:05:29,120 --> 00:05:30,639
and and typically the output of this

169
00:05:30,639 --> 00:05:32,880
process is non-functional requirements

170
00:05:32,880 --> 00:05:35,280
or jira stories and things like that

171
00:05:35,280 --> 00:05:36,800
and then the fourth question is is

172
00:05:36,800 --> 00:05:38,479
sometimes neglected but equally

173
00:05:38,479 --> 00:05:40,000
important which is are you doing a good

174
00:05:40,000 --> 00:05:41,759
job or did we do a good job and that

175
00:05:41,759 --> 00:05:43,680
applies to the all of the first three

176
00:05:43,680 --> 00:05:45,199
questions are you looking at the right

177
00:05:45,199 --> 00:05:46,639
stuff are you threat modelling the right

178
00:05:46,639 --> 00:05:48,240
stuff at the right scope are you finding

179
00:05:48,240 --> 00:05:49,680
the right types of threats or do you

180
00:05:49,680 --> 00:05:52,160
sort of have a bias towards one to tick

181
00:05:52,160 --> 00:05:53,520
you know type of threat based on your

182
00:05:53,520 --> 00:05:54,720
experience

183
00:05:54,720 --> 00:05:57,520
um are you finding enough possible

184
00:05:57,520 --> 00:05:59,199
controls for those threats and are you

185
00:05:59,199 --> 00:06:00,639
actually in those controls or if you

186
00:06:00,639 --> 00:06:03,919
just got a backlog of uh un sort of an

187
00:06:03,919 --> 00:06:06,639
unactioned neglected jira stories so

188
00:06:06,639 --> 00:06:08,160
that sort of sums up threat modding

189
00:06:08,160 --> 00:06:10,880
process in the general sense and often

190
00:06:10,880 --> 00:06:13,280
it's quite a manual process

191
00:06:13,280 --> 00:06:15,199
um

192
00:06:15,199 --> 00:06:18,400
probably don't need to spend too long um

193
00:06:18,400 --> 00:06:20,240
rambling on about the arguments for

194
00:06:20,240 --> 00:06:21,759
shifting the security left i think it's

195
00:06:21,759 --> 00:06:24,160
a fairly well established idea now that

196
00:06:24,160 --> 00:06:26,880
we need to do better at moving security

197
00:06:26,880 --> 00:06:29,919
left so i'll start from the right hand

198
00:06:29,919 --> 00:06:31,360
side from inside to sort of that

199
00:06:31,360 --> 00:06:33,600
production and maintenance phase we all

200
00:06:33,600 --> 00:06:35,280
know that it's very hard to make changes

201
00:06:35,280 --> 00:06:37,919
there and it's very costly uh once

202
00:06:37,919 --> 00:06:40,240
something's in production it can be

203
00:06:40,240 --> 00:06:42,160
massive pain to have to rework it or

204
00:06:42,160 --> 00:06:44,400
refactor it and typically involves you

205
00:06:44,400 --> 00:06:45,919
know throwing developers at a problem

206
00:06:45,919 --> 00:06:47,520
for a long period of time

207
00:06:47,520 --> 00:06:49,599
so shifting left slightly you get into

208
00:06:49,599 --> 00:06:51,360
where you see a lot of stuff happening

209
00:06:51,360 --> 00:06:53,440
around uh security at the moment which

210
00:06:53,440 --> 00:06:55,360
is putting stuff into pipelines into the

211
00:06:55,360 --> 00:06:58,160
ci cd uh automation side of things and

212
00:06:58,160 --> 00:07:00,240
that's great um it's definitely a step

213
00:07:00,240 --> 00:07:02,720
in the right direction just doing a pen

214
00:07:02,720 --> 00:07:03,759
test on something that's already in

215
00:07:03,759 --> 00:07:05,919
production is is fine but not as good as

216
00:07:05,919 --> 00:07:08,000
being able to do the stuff automatically

217
00:07:08,000 --> 00:07:09,759
through the citd pipelines but it's

218
00:07:09,759 --> 00:07:11,360
still relatively expensive to fix it at

219
00:07:11,360 --> 00:07:12,960
that point because you've already built

220
00:07:12,960 --> 00:07:14,160
most of this stuff

221
00:07:14,160 --> 00:07:15,599
typically you know it's maybe go through

222
00:07:15,599 --> 00:07:16,720
pre-production or going through some

223
00:07:16,720 --> 00:07:17,599
sort of

224
00:07:17,599 --> 00:07:20,240
integration testing at this stage um so

225
00:07:20,240 --> 00:07:22,240
you're really quite far down the process

226
00:07:22,240 --> 00:07:24,000
to find that there's an issue so this is

227
00:07:24,000 --> 00:07:26,160
where you typically see um projects

228
00:07:26,160 --> 00:07:27,759
being delayed because they're finding

229
00:07:27,759 --> 00:07:29,199
issues just before release and is

230
00:07:29,199 --> 00:07:31,120
pushing things back

231
00:07:31,120 --> 00:07:34,080
um so in that sense the further left we

232
00:07:34,080 --> 00:07:35,759
shift the better and that takes us into

233
00:07:35,759 --> 00:07:37,120
that kind of design and development

234
00:07:37,120 --> 00:07:39,599
phase so very cheap to fix issues if

235
00:07:39,599 --> 00:07:41,039
your design is nothing more than a

236
00:07:41,039 --> 00:07:43,120
whiteboard diagram at the moment then a

237
00:07:43,120 --> 00:07:44,879
fix there from a from a from an

238
00:07:44,879 --> 00:07:46,720
architectural point of view for example

239
00:07:46,720 --> 00:07:48,800
is to just redraw the diagram slightly

240
00:07:48,800 --> 00:07:50,639
cost you virtually nothing

241
00:07:50,639 --> 00:07:52,319
and it's also a good time to identify

242
00:07:52,319 --> 00:07:54,319
requirements and proactively drive those

243
00:07:54,319 --> 00:07:56,479
into the development stages so if you're

244
00:07:56,479 --> 00:07:59,520
thinking about um what could go wrong

245
00:07:59,520 --> 00:08:01,599
and and your controls are then you know

246
00:08:01,599 --> 00:08:03,039
not going to fix this particular issue

247
00:08:03,039 --> 00:08:05,120
but go and add to this non-functional

248
00:08:05,120 --> 00:08:06,879
requirement to make sure this thing is

249
00:08:06,879 --> 00:08:09,120
uh is well designed from the start but

250
00:08:09,120 --> 00:08:11,039
the downside or one of the downsides to

251
00:08:11,039 --> 00:08:13,360
this is that it can still be a quite an

252
00:08:13,360 --> 00:08:15,759
expensive manual process so threat

253
00:08:15,759 --> 00:08:17,440
modelling in that design phase is often

254
00:08:17,440 --> 00:08:20,240
involves workshops and uh getting lots

255
00:08:20,240 --> 00:08:22,160
of very smart and very expensive people

256
00:08:22,160 --> 00:08:24,080
into a room for lots of time and

257
00:08:24,080 --> 00:08:26,319
identifying uh different sort of threats

258
00:08:26,319 --> 00:08:27,680
and altimeters and things like that so

259
00:08:27,680 --> 00:08:29,360
you kind of want to be able to speed

260
00:08:29,360 --> 00:08:31,520
that up a little bit

261
00:08:31,520 --> 00:08:34,719
um but that's not the focus for for too

262
00:08:34,719 --> 00:08:37,200
much of that

263
00:08:37,919 --> 00:08:39,120
there are some other interesting

264
00:08:39,120 --> 00:08:40,719
challenges

265
00:08:40,719 --> 00:08:43,839
that uh the architecture in the design

266
00:08:43,839 --> 00:08:45,680
phase also has to face

267
00:08:45,680 --> 00:08:47,680
um

268
00:08:47,680 --> 00:08:50,160
very traditional ones so architecture

269
00:08:50,160 --> 00:08:52,880
lives outside of the code it's a visio

270
00:08:52,880 --> 00:08:55,360
diagram or something like that or it's a

271
00:08:55,360 --> 00:08:56,959
confidence page

272
00:08:56,959 --> 00:08:58,240
there are other

273
00:08:58,240 --> 00:09:00,959
collaboration tools out there um

274
00:09:00,959 --> 00:09:02,720
it's typically always out of date almost

275
00:09:02,720 --> 00:09:04,240
the minute someone starts implementing

276
00:09:04,240 --> 00:09:05,680
something the original design the

277
00:09:05,680 --> 00:09:07,519
original architecture is pretty much out

278
00:09:07,519 --> 00:09:09,680
of date and so the implementation drifts

279
00:09:09,680 --> 00:09:11,600
over time but there's there's some other

280
00:09:11,600 --> 00:09:13,440
newer emerging challenges with this

281
00:09:13,440 --> 00:09:15,279
whole architecture thing

282
00:09:15,279 --> 00:09:17,440
what happens when you the architecture

283
00:09:17,440 --> 00:09:18,560
disappears you have things like

284
00:09:18,560 --> 00:09:19,839
serverless where you're just deploying

285
00:09:19,839 --> 00:09:21,839
chunks of code all of the infrastructure

286
00:09:21,839 --> 00:09:24,800
that runs that has sort of evaporated um

287
00:09:24,800 --> 00:09:26,000
and the same kind of thing with

288
00:09:26,000 --> 00:09:28,000
microservices and things like loco to no

289
00:09:28,000 --> 00:09:30,959
code you know one else going on there

290
00:09:30,959 --> 00:09:32,560
so what happens is the architecture

291
00:09:32,560 --> 00:09:34,000
starts emerging more from the code

292
00:09:34,000 --> 00:09:35,920
rather than from the cables we don't

293
00:09:35,920 --> 00:09:38,480
have to worry about the um

294
00:09:38,480 --> 00:09:40,160
the underlying infrastructure anymore

295
00:09:40,160 --> 00:09:42,000
because we sort of built on top of that

296
00:09:42,000 --> 00:09:43,839
but we do have to worry about how things

297
00:09:43,839 --> 00:09:46,000
are connecting in a different level what

298
00:09:46,000 --> 00:09:47,600
you see typically happen at this point

299
00:09:47,600 --> 00:09:50,320
is things like serverless exposes the

300
00:09:50,320 --> 00:09:52,720
application side of the architecture

301
00:09:52,720 --> 00:09:54,000
because the infrastructure side of

302
00:09:54,000 --> 00:09:56,399
things has been hidden so how lambda

303
00:09:56,399 --> 00:09:59,040
calls um to each other in other aws

304
00:09:59,040 --> 00:10:01,839
services for example um is exposing some

305
00:10:01,839 --> 00:10:03,279
of the internal workings of that

306
00:10:03,279 --> 00:10:04,480
application so your functions are

307
00:10:04,480 --> 00:10:06,959
relatively straightforward so

308
00:10:06,959 --> 00:10:08,560
again blurring that boundary of the type

309
00:10:08,560 --> 00:10:10,959
of architecture we have to deal with

310
00:10:10,959 --> 00:10:12,880
um and we have increasingly complex

311
00:10:12,880 --> 00:10:14,640
environments fuzzy requirements and

312
00:10:14,640 --> 00:10:16,959
faster iteration you know increasingly

313
00:10:16,959 --> 00:10:20,320
um demanding customers etc etc and that

314
00:10:20,320 --> 00:10:22,480
drives agile practices and devops and

315
00:10:22,480 --> 00:10:24,399
all that jazz that's making this whole

316
00:10:24,399 --> 00:10:26,480
thing a lot faster so the traditional

317
00:10:26,480 --> 00:10:28,079
approach of architecting something and

318
00:10:28,079 --> 00:10:30,000
then it being developed for two years is

319
00:10:30,000 --> 00:10:32,560
long gone as we all know

320
00:10:32,560 --> 00:10:33,360
um

321
00:10:33,360 --> 00:10:35,040
yet when we talk about software

322
00:10:35,040 --> 00:10:36,480
development we often think of it as

323
00:10:36,480 --> 00:10:38,240
being like manufacturing we use the same

324
00:10:38,240 --> 00:10:40,480
kind of terminology like pipelines and

325
00:10:40,480 --> 00:10:42,079
batch and work in progress and

326
00:10:42,079 --> 00:10:43,839
deliverables and all that kind of stuff

327
00:10:43,839 --> 00:10:46,399
you know you have this developer

328
00:10:46,399 --> 00:10:48,160
this this this conveyor belt of jira

329
00:10:48,160 --> 00:10:49,600
stories that people work on and then

330
00:10:49,600 --> 00:10:51,120
some sort of sprint planning happens

331
00:10:51,120 --> 00:10:53,600
over there

332
00:10:53,600 --> 00:10:54,560
uh

333
00:10:54,560 --> 00:10:55,760
but actually

334
00:10:55,760 --> 00:10:59,360
so you know analogies uh gone wild here

335
00:10:59,360 --> 00:11:00,959
software development is a lot more like

336
00:11:00,959 --> 00:11:03,360
art than it is manufacturing and this is

337
00:11:03,360 --> 00:11:05,839
because manufacturing of a piece of

338
00:11:05,839 --> 00:11:07,839
software actually happens in the cpu at

339
00:11:07,839 --> 00:11:09,920
the point of execution everything up

340
00:11:09,920 --> 00:11:12,880
until that point is basically design

341
00:11:12,880 --> 00:11:14,720
there's a fantastic paper by uh jack

342
00:11:14,720 --> 00:11:17,519
reeves in 1992 so bear in mind this is

343
00:11:17,519 --> 00:11:19,120
nearly 10 years before the agile

344
00:11:19,120 --> 00:11:21,760
manifesto was released um goes into a

345
00:11:21,760 --> 00:11:24,640
lot of the detail but coding debugging

346
00:11:24,640 --> 00:11:26,720
testing that is all fundamentally a

347
00:11:26,720 --> 00:11:28,800
process of design not a process of

348
00:11:28,800 --> 00:11:30,240
manufacturing

349
00:11:30,240 --> 00:11:31,120
um

350
00:11:31,120 --> 00:11:33,440
the commit strip on the right here is

351
00:11:33,440 --> 00:11:34,880
also

352
00:11:34,880 --> 00:11:36,480
you know really putting driving this

353
00:11:36,480 --> 00:11:37,920
point home

354
00:11:37,920 --> 00:11:41,040
a a piece of software even a binary is a

355
00:11:41,040 --> 00:11:42,800
specification for how to achieve a

356
00:11:42,800 --> 00:11:44,240
particular problem in a particular

357
00:11:44,240 --> 00:11:46,880
domain so it is it is not a product in

358
00:11:46,880 --> 00:11:48,720
the same way that a car is a product it

359
00:11:48,720 --> 00:11:50,800
is a specification offer how to solve a

360
00:11:50,800 --> 00:11:52,079
problem in a particular set of

361
00:11:52,079 --> 00:11:56,320
circumstances in the cpu

362
00:11:56,320 --> 00:11:57,600
and what that means is software

363
00:11:57,600 --> 00:11:59,200
development as a practice is essentially

364
00:11:59,200 --> 00:12:01,360
continuous iterative and revisionist

365
00:12:01,360 --> 00:12:02,480
design

366
00:12:02,480 --> 00:12:04,079
when you're writing software you're

367
00:12:04,079 --> 00:12:06,320
describing and sharing ideas in a way

368
00:12:06,320 --> 00:12:08,399
that lets you collaborate with people

369
00:12:08,399 --> 00:12:10,399
you're learning how to solve a problem

370
00:12:10,399 --> 00:12:12,160
your reasoning with yourself and with

371
00:12:12,160 --> 00:12:14,240
other people um and so when you're

372
00:12:14,240 --> 00:12:15,519
writing code you're not writing it

373
00:12:15,519 --> 00:12:17,519
really for the cpu otherwise we'd all be

374
00:12:17,519 --> 00:12:19,920
using sort of machine um

375
00:12:19,920 --> 00:12:22,800
code assembly or even deeper

376
00:12:22,800 --> 00:12:24,880
we write in high-level languages we use

377
00:12:24,880 --> 00:12:26,560
abstractions as objects because it helps

378
00:12:26,560 --> 00:12:28,160
us think about and talk about and reason

379
00:12:28,160 --> 00:12:29,360
about and share

380
00:12:29,360 --> 00:12:31,360
design

381
00:12:31,360 --> 00:12:36,480
now not absolutely everything is a

382
00:12:36,480 --> 00:12:38,959
pure part not not all of software

383
00:12:38,959 --> 00:12:40,959
development is purely designed

384
00:12:40,959 --> 00:12:42,639
um and

385
00:12:42,639 --> 00:12:43,920
we can use tools like the cleveland

386
00:12:43,920 --> 00:12:45,839
framework to look at why we'll come back

387
00:12:45,839 --> 00:12:47,440
to why this matters in a little bit but

388
00:12:47,440 --> 00:12:48,959
i just need to just set a little bit

389
00:12:48,959 --> 00:12:50,880
more sort of groundwork in terms of

390
00:12:50,880 --> 00:12:52,720
where all of this stuff is coming from

391
00:12:52,720 --> 00:12:54,240
and what this means in terms of

392
00:12:54,240 --> 00:12:57,839
automation and the evolution of um of um

393
00:12:57,839 --> 00:13:00,079
sort of building on top of existing

394
00:13:00,079 --> 00:13:02,160
concepts

395
00:13:02,160 --> 00:13:04,160
um so very there's a lot going on this

396
00:13:04,160 --> 00:13:06,000
slide i won't spend too much time here

397
00:13:06,000 --> 00:13:07,839
the canvas framework basically helps us

398
00:13:07,839 --> 00:13:09,600
think about different types of systems

399
00:13:09,600 --> 00:13:11,200
in different ways and in this case we're

400
00:13:11,200 --> 00:13:12,639
looking at it from the perspective of

401
00:13:12,639 --> 00:13:14,880
software development um

402
00:13:14,880 --> 00:13:17,200
it splits the world up into two clear

403
00:13:17,200 --> 00:13:19,760
which is um things are very simple if

404
00:13:19,760 --> 00:13:21,600
things are very linear if a then b it's

405
00:13:21,600 --> 00:13:24,000
either d so that's the place of best

406
00:13:24,000 --> 00:13:27,279
practices and checklists um complicated

407
00:13:27,279 --> 00:13:29,760
um here there are still things are still

408
00:13:29,760 --> 00:13:31,600
linear things are still predictable but

409
00:13:31,600 --> 00:13:34,320
you it's not straightforward you may

410
00:13:34,320 --> 00:13:36,480
need an expert you may need to do static

411
00:13:36,480 --> 00:13:38,079
statistical analysis or something to

412
00:13:38,079 --> 00:13:40,880
understand and you know 70 chance that a

413
00:13:40,880 --> 00:13:43,199
is better than b etc on the left hand

414
00:13:43,199 --> 00:13:44,880
side we have the complex domain and the

415
00:13:44,880 --> 00:13:48,160
chaotic domain complex is where things

416
00:13:48,160 --> 00:13:49,920
are no longer linear things are coupled

417
00:13:49,920 --> 00:13:53,360
they're dispositional they tend to a and

418
00:13:53,360 --> 00:13:54,000
b

419
00:13:54,000 --> 00:13:55,839
but you can't know that in advance it's

420
00:13:55,839 --> 00:13:57,279
only with hindsight that these things

421
00:13:57,279 --> 00:13:58,560
start to make sense

422
00:13:58,560 --> 00:14:00,800
um

423
00:14:01,680 --> 00:14:03,519
and from an from a software point of

424
00:14:03,519 --> 00:14:05,519
view this is where a lot of um as we'll

425
00:14:05,519 --> 00:14:08,079
see in second and a lot of stuff happens

426
00:14:08,079 --> 00:14:10,000
and then chaos is where you know it's

427
00:14:10,000 --> 00:14:11,839
not statistically random in that sense

428
00:14:11,839 --> 00:14:13,600
but this is where things are completely

429
00:14:13,600 --> 00:14:15,680
linear as well as non-constrained so

430
00:14:15,680 --> 00:14:17,279
things are just a mess and that middle

431
00:14:17,279 --> 00:14:19,279
one confused is where you don't know

432
00:14:19,279 --> 00:14:20,639
which domain you're dealing with which

433
00:14:20,639 --> 00:14:22,320
is you know a state a lot of us are in a

434
00:14:22,320 --> 00:14:24,480
lot of the time and the general point

435
00:14:24,480 --> 00:14:26,399
here is how you solve a problem depends

436
00:14:26,399 --> 00:14:28,000
on the type of

437
00:14:28,000 --> 00:14:30,959
system you're in so if you're uh there's

438
00:14:30,959 --> 00:14:33,279
no point doing linting in a complex

439
00:14:33,279 --> 00:14:35,120
space because it's completely uh

440
00:14:35,120 --> 00:14:37,279
misaligned to the nature of that system

441
00:14:37,279 --> 00:14:39,519
and likewise you wouldn't sit there sort

442
00:14:39,519 --> 00:14:41,680
of prototyping brand new approaches to

443
00:14:41,680 --> 00:14:44,160
um just a simple checklist problem

444
00:14:44,160 --> 00:14:45,600
because that would be a complete waste

445
00:14:45,600 --> 00:14:46,880
of effort

446
00:14:46,880 --> 00:14:48,800
um so how you think about different

447
00:14:48,800 --> 00:14:50,480
problems depends on the nature of the

448
00:14:50,480 --> 00:14:52,560
system you're in

449
00:14:52,560 --> 00:14:55,360
um this is a wardy map hopefully people

450
00:14:55,360 --> 00:14:56,800
are familiar with this

451
00:14:56,800 --> 00:14:57,760
but it's

452
00:14:57,760 --> 00:15:00,320
gaining momentum still it's has some

453
00:15:00,320 --> 00:15:02,480
familiarity with the notion of canadian

454
00:15:02,480 --> 00:15:04,320
you can sort of potentially map genesis

455
00:15:04,320 --> 00:15:06,000
to complexity and commodity to that

456
00:15:06,000 --> 00:15:08,320
clear domain but what the warding map

457
00:15:08,320 --> 00:15:10,720
does is it shows you a value chain of

458
00:15:10,720 --> 00:15:12,399
you know how you're delivering value to

459
00:15:12,399 --> 00:15:15,040
a user a customer in this case and where

460
00:15:15,040 --> 00:15:17,519
those different points are in that value

461
00:15:17,519 --> 00:15:20,160
stream and how they map to

462
00:15:20,160 --> 00:15:22,800
different stages of evolution so when

463
00:15:22,800 --> 00:15:24,959
something is brand new it's very little

464
00:15:24,959 --> 00:15:26,639
is known about it you have to prepare

465
00:15:26,639 --> 00:15:28,480
faster iterations a lot of learning so

466
00:15:28,480 --> 00:15:30,399
that's sort of the genesis space and

467
00:15:30,399 --> 00:15:32,880
then things evolve over time you know

468
00:15:32,880 --> 00:15:35,600
sometimes in the many decades to what

469
00:15:35,600 --> 00:15:37,680
becomes commodities so these are things

470
00:15:37,680 --> 00:15:39,279
we take for granted very well

471
00:15:39,279 --> 00:15:41,519
established very slow to change a lot of

472
00:15:41,519 --> 00:15:43,519
automation and things we take yeah like

473
00:15:43,519 --> 00:15:45,120
i said two things we take for granted so

474
00:15:45,120 --> 00:15:47,440
electricity used to be genesis it used

475
00:15:47,440 --> 00:15:49,839
to be brand new as a as a concept but

476
00:15:49,839 --> 00:15:51,199
over the last few hundred years you know

477
00:15:51,199 --> 00:15:52,639
it has become a commodity and you feel

478
00:15:52,639 --> 00:15:54,480
the pain when suddenly your power goes

479
00:15:54,480 --> 00:15:56,639
out and you have no electricity you

480
00:15:56,639 --> 00:15:57,920
suddenly realize how much you've taken

481
00:15:57,920 --> 00:15:59,519
it for granted but it doesn't change

482
00:15:59,519 --> 00:16:00,959
either we don't i don't wake up one

483
00:16:00,959 --> 00:16:02,399
morning to find the voltage has changed

484
00:16:02,399 --> 00:16:05,759
from 240 volts to 173 for example

485
00:16:05,759 --> 00:16:07,839
um so water mapping exposes these

486
00:16:07,839 --> 00:16:11,120
dynamics and to bring it back to um the

487
00:16:11,120 --> 00:16:13,839
security of the software domain

488
00:16:13,839 --> 00:16:16,000
um

489
00:16:16,000 --> 00:16:17,440
you're using cloud compute because you

490
00:16:17,440 --> 00:16:18,880
don't have to worry about the details of

491
00:16:18,880 --> 00:16:21,199
physical hardware or even in you you're

492
00:16:21,199 --> 00:16:23,120
using lambda and things like serverless

493
00:16:23,120 --> 00:16:24,320
because you don't have to worry about

494
00:16:24,320 --> 00:16:27,839
the details of um the infrastructure it

495
00:16:27,839 --> 00:16:29,839
has cloud has basically commoditized the

496
00:16:29,839 --> 00:16:31,600
ability to do compute and that's

497
00:16:31,600 --> 00:16:33,120
fundamental because it allows you to

498
00:16:33,120 --> 00:16:35,600
focus on the stuff that matters and

499
00:16:35,600 --> 00:16:37,440
here's the fun part of course

500
00:16:37,440 --> 00:16:39,440
things evolve over time and you wouldn't

501
00:16:39,440 --> 00:16:41,120
spend hundreds of development hours

502
00:16:41,120 --> 00:16:43,440
trying to write a yaml file parser for

503
00:16:43,440 --> 00:16:46,000
example from scratch um you go and use a

504
00:16:46,000 --> 00:16:48,480
library because it's a solved and known

505
00:16:48,480 --> 00:16:50,399
problem uh when things are well

506
00:16:50,399 --> 00:16:52,800
understood they're available as products

507
00:16:52,800 --> 00:16:54,880
or you know or even commodities

508
00:16:54,880 --> 00:16:56,720
so what you as a software development

509
00:16:56,720 --> 00:16:57,839
team

510
00:16:57,839 --> 00:17:00,000
is all the novel and domain specific

511
00:17:00,000 --> 00:17:02,160
stuff you can't just outsource to a

512
00:17:02,160 --> 00:17:04,959
product um or to a library or to a

513
00:17:04,959 --> 00:17:07,599
commodity so you are left with all the

514
00:17:07,599 --> 00:17:08,880
stuff you have to deal with in that

515
00:17:08,880 --> 00:17:10,880
genesis space and that custom space so

516
00:17:10,880 --> 00:17:12,480
you're you're dealing with the unknown

517
00:17:12,480 --> 00:17:13,599
you're dealing with having to solve

518
00:17:13,599 --> 00:17:15,599
problems for the first time

519
00:17:15,599 --> 00:17:17,280
even if it's just gluing different

520
00:17:17,280 --> 00:17:18,959
products and commodities together in a

521
00:17:18,959 --> 00:17:20,400
different way to solve a specific

522
00:17:20,400 --> 00:17:21,679
problem

523
00:17:21,679 --> 00:17:23,760
and the process of navigating through

524
00:17:23,760 --> 00:17:26,480
novelty is design hence why you know

525
00:17:26,480 --> 00:17:28,640
software development as a practice is

526
00:17:28,640 --> 00:17:31,039
predominantly design unless you're just

527
00:17:31,039 --> 00:17:34,000
re-implementing a well-known algorithm

528
00:17:34,000 --> 00:17:35,440
anything that involves trying to solve a

529
00:17:35,440 --> 00:17:37,679
new problem that is on not understood

530
00:17:37,679 --> 00:17:39,919
yet um and that's why we have product

531
00:17:39,919 --> 00:17:42,240
development practices etc this is all

532
00:17:42,240 --> 00:17:43,840
what drives software as a design

533
00:17:43,840 --> 00:17:46,840
practice

534
00:17:47,520 --> 00:17:50,320
and of course if your design if software

535
00:17:50,320 --> 00:17:52,960
uh development is continuous

536
00:17:52,960 --> 00:17:55,440
iterative and revisionist design then

537
00:17:55,440 --> 00:17:57,440
that means threat modelling needs to be

538
00:17:57,440 --> 00:17:58,799
continuous

539
00:17:58,799 --> 00:18:00,960
iterative and revisionist so

540
00:18:00,960 --> 00:18:03,280
hopefully it is but you know generally

541
00:18:03,280 --> 00:18:05,200
speaking it tends to still be that sort

542
00:18:05,200 --> 00:18:07,440
of waterfall approach

543
00:18:07,440 --> 00:18:08,320
um

544
00:18:08,320 --> 00:18:09,840
and this is a problem for architecture

545
00:18:09,840 --> 00:18:12,000
because architecture as a discipline

546
00:18:12,000 --> 00:18:13,440
comes from that very you know it's very

547
00:18:13,440 --> 00:18:15,120
well suited for waterfall very well

548
00:18:15,120 --> 00:18:18,959
suited for doing that upfront analysis

549
00:18:19,200 --> 00:18:20,480
but this is why we see that

550
00:18:20,480 --> 00:18:22,320
implementation drift because

551
00:18:22,320 --> 00:18:25,280
um it's hard to continue to manually

552
00:18:25,280 --> 00:18:27,840
maintain architecture in the same way

553
00:18:27,840 --> 00:18:30,080
in a way that is

554
00:18:30,080 --> 00:18:32,720
aligned to the design nature of software

555
00:18:32,720 --> 00:18:35,120
and therefore threat modelling sort of

556
00:18:35,120 --> 00:18:37,760
suffers as a result from that

557
00:18:37,760 --> 00:18:41,520
but all is not lost

558
00:18:41,520 --> 00:18:44,400
we have cloud so one of the side effects

559
00:18:44,400 --> 00:18:46,320
of cloud is that we have infrastructure

560
00:18:46,320 --> 00:18:48,400
as code and that's awesome

561
00:18:48,400 --> 00:18:50,559
because at this point

562
00:18:50,559 --> 00:18:51,360
the

563
00:18:51,360 --> 00:18:53,679
code becomes the design and becomes the

564
00:18:53,679 --> 00:18:55,280
stuff that's deployed so all of the

565
00:18:55,280 --> 00:18:57,280
architectural stuff that used to be

566
00:18:57,280 --> 00:18:59,200
a diagram somewhere that was never up to

567
00:18:59,200 --> 00:19:01,200
date is now actually represented in

568
00:19:01,200 --> 00:19:03,600
something that is both the design and

569
00:19:03,600 --> 00:19:05,360
the actual manufacturing the actual

570
00:19:05,360 --> 00:19:06,559
execution

571
00:19:06,559 --> 00:19:08,720
um and as i said sort of microservices

572
00:19:08,720 --> 00:19:10,000
if you're doing infrastructure's code

573
00:19:10,000 --> 00:19:11,600
for microservices

574
00:19:11,600 --> 00:19:13,760
what was once a monolith running inside

575
00:19:13,760 --> 00:19:16,240
a a single web server for example like

576
00:19:16,240 --> 00:19:17,760
gigantic java app running in a web

577
00:19:17,760 --> 00:19:19,760
server if you're using microservices

578
00:19:19,760 --> 00:19:22,400
deployed in uh the cloud then suddenly

579
00:19:22,400 --> 00:19:25,280
that architecture is explicitly defined

580
00:19:25,280 --> 00:19:27,679
in these infrastructure of code

581
00:19:27,679 --> 00:19:29,679
files or templates and each of these

582
00:19:29,679 --> 00:19:30,480
things have their own different

583
00:19:30,480 --> 00:19:32,320
requirements for data transport

584
00:19:32,320 --> 00:19:34,720
authentication etc and so

585
00:19:34,720 --> 00:19:37,760
infrastructure as code allows us to

586
00:19:37,760 --> 00:19:39,760
string together these different pieces

587
00:19:39,760 --> 00:19:43,520
and view this architecture in that

588
00:19:43,520 --> 00:19:45,360
sort of real-time way in line with the

589
00:19:45,360 --> 00:19:47,039
actual pace of development through

590
00:19:47,039 --> 00:19:50,000
infrastructure as code

591
00:19:50,840 --> 00:19:54,640
so why an open threat model format then

592
00:19:54,640 --> 00:19:57,200
well as we said architecture is often

593
00:19:57,200 --> 00:19:59,919
defined in many different formats um

594
00:19:59,919 --> 00:20:01,760
it's it's some people have visio

595
00:20:01,760 --> 00:20:03,120
diagrams some people have whiteboard

596
00:20:03,120 --> 00:20:05,679
diagrams um so we need something from a

597
00:20:05,679 --> 00:20:06,960
threat modding point of view that's

598
00:20:06,960 --> 00:20:09,039
agnostic to those sources

599
00:20:09,039 --> 00:20:11,679
um threat modelling as a practice itself

600
00:20:11,679 --> 00:20:14,559
also needs to evolve and one way to do

601
00:20:14,559 --> 00:20:17,039
that is to build open standards that

602
00:20:17,039 --> 00:20:18,960
people can build on and use and relate

603
00:20:18,960 --> 00:20:20,880
to and um

604
00:20:20,880 --> 00:20:22,799
that can accelerate the the the

605
00:20:22,799 --> 00:20:25,520
standardization of something that um

606
00:20:25,520 --> 00:20:27,120
builds on top of infrastructure's code

607
00:20:27,120 --> 00:20:28,880
from a threat modern point of view

608
00:20:28,880 --> 00:20:29,919
um

609
00:20:29,919 --> 00:20:31,440
one of the other challenges we have with

610
00:20:31,440 --> 00:20:33,840
rap modeling

611
00:20:33,840 --> 00:20:35,679
and to some extent this is necessary and

612
00:20:35,679 --> 00:20:37,360
is always going to be the case there are

613
00:20:37,360 --> 00:20:38,640
different interpretations of threat

614
00:20:38,640 --> 00:20:40,400
modeling and that makes sense because

615
00:20:40,400 --> 00:20:42,559
different circumstances require that but

616
00:20:42,559 --> 00:20:44,159
we also need some

617
00:20:44,159 --> 00:20:46,159
some really good common ground and if we

618
00:20:46,159 --> 00:20:48,320
can do that in a data format then that

619
00:20:48,320 --> 00:20:50,640
allows us to create interoperability and

620
00:20:50,640 --> 00:20:52,480
the ability to exchange information much

621
00:20:52,480 --> 00:20:55,039
easier um so organizations you know need

622
00:20:55,039 --> 00:20:56,559
to be able to exchange this kind of

623
00:20:56,559 --> 00:20:58,320
information either within themselves or

624
00:20:58,320 --> 00:20:59,520
ideally with other and we'll look at

625
00:20:59,520 --> 00:21:01,039
that in a second

626
00:21:01,039 --> 00:21:03,360
um and so in our open threat mode format

627
00:21:03,360 --> 00:21:05,440
put it in the open space uh make it

628
00:21:05,440 --> 00:21:07,840
widely adopted that could provide this

629
00:21:07,840 --> 00:21:10,480
common ground

630
00:21:10,960 --> 00:21:13,600
um so some potential use cases um if i'm

631
00:21:13,600 --> 00:21:15,120
thinking about trying to threat model

632
00:21:15,120 --> 00:21:17,919
something i may have different sources

633
00:21:17,919 --> 00:21:19,520
of um

634
00:21:19,520 --> 00:21:21,600
that design so

635
00:21:21,600 --> 00:21:23,520
that design may come from an actual

636
00:21:23,520 --> 00:21:26,159
diagram of some sort maybe very early on

637
00:21:26,159 --> 00:21:27,679
someone's using

638
00:21:27,679 --> 00:21:31,200
physio or um

639
00:21:31,200 --> 00:21:33,760
some other things like figma or miro

640
00:21:33,760 --> 00:21:34,880
boards

641
00:21:34,880 --> 00:21:36,000
um

642
00:21:36,000 --> 00:21:37,440
maybe we want to be able to just take

643
00:21:37,440 --> 00:21:39,760
that yes maybe it's out of date quite

644
00:21:39,760 --> 00:21:41,120
quickly but at least if we can get into

645
00:21:41,120 --> 00:21:42,720
a threat model very quickly we can

646
00:21:42,720 --> 00:21:44,400
evolve and um

647
00:21:44,400 --> 00:21:45,919
and build on top of it once it's

648
00:21:45,919 --> 00:21:47,679
captured

649
00:21:47,679 --> 00:21:49,120
cloud information terraform obviously

650
00:21:49,120 --> 00:21:50,720
that stuff is sitting in code that stuff

651
00:21:50,720 --> 00:21:52,240
we need to be able to keep up to date

652
00:21:52,240 --> 00:21:54,159
with so if we can pass those sources of

653
00:21:54,159 --> 00:21:55,679
architectural information we can threat

654
00:21:55,679 --> 00:21:58,000
model um continuously and iteratively as

655
00:21:58,000 --> 00:21:59,600
well and there's a whole bunch of other

656
00:21:59,600 --> 00:22:01,039
stuff out there like docker components

657
00:22:01,039 --> 00:22:02,480
kubernetes jira stories and the

658
00:22:02,480 --> 00:22:04,400
application code itself these different

659
00:22:04,400 --> 00:22:06,159
types of sources you wouldn't want to

660
00:22:06,159 --> 00:22:08,240
have to have 10 different ways of threat

661
00:22:08,240 --> 00:22:10,000
modeling 10 different sources want to be

662
00:22:10,000 --> 00:22:11,600
able to bring this stuff on under the

663
00:22:11,600 --> 00:22:13,200
same roof so to speak

664
00:22:13,200 --> 00:22:14,080
um

665
00:22:14,080 --> 00:22:16,080
and then once you've got to that process

666
00:22:16,080 --> 00:22:18,080
to that point you may need to be able to

667
00:22:18,080 --> 00:22:19,679
exchange this threat modding data with

668
00:22:19,679 --> 00:22:22,320
other parts of the cyber ecosystem so

669
00:22:22,320 --> 00:22:23,440
you know if you could provide some

670
00:22:23,440 --> 00:22:26,159
context around the relationships between

671
00:22:26,159 --> 00:22:28,159
components within the threat model

672
00:22:28,159 --> 00:22:30,320
you could provide that context to sas

673
00:22:30,320 --> 00:22:32,320
and dast and vulnerability management so

674
00:22:32,320 --> 00:22:33,919
why does this vulnerability really

675
00:22:33,919 --> 00:22:35,280
matter well

676
00:22:35,280 --> 00:22:37,200
because of this threat model and this

677
00:22:37,200 --> 00:22:39,200
context if i can pass that from a

678
00:22:39,200 --> 00:22:40,720
machine point of view because of an open

679
00:22:40,720 --> 00:22:42,720
standard then that uh and it's not sort

680
00:22:42,720 --> 00:22:45,200
of buried in a 20-page uh word document

681
00:22:45,200 --> 00:22:47,440
or something like that then um that

682
00:22:47,440 --> 00:22:49,440
really opens up a space for further

683
00:22:49,440 --> 00:22:51,280
automation across the cyber security

684
00:22:51,280 --> 00:22:52,640
ecosystem

685
00:22:52,640 --> 00:22:54,320
and then finally this one might be a bit

686
00:22:54,320 --> 00:22:55,840
of a pipe dream but we're certainly

687
00:22:55,840 --> 00:22:59,280
seeing it within our organization

688
00:22:59,520 --> 00:23:02,159
um the the need for

689
00:23:02,159 --> 00:23:03,679
organizations to be able to share this

690
00:23:03,679 --> 00:23:05,600
stuff with each other so if i'm a

691
00:23:05,600 --> 00:23:07,280
software vendor and people are using my

692
00:23:07,280 --> 00:23:09,200
components i may want to be able to

693
00:23:09,200 --> 00:23:12,320
publish um mini threat models or aspects

694
00:23:12,320 --> 00:23:14,240
or components that they can then

695
00:23:14,240 --> 00:23:16,000
leverage in their threat models and you

696
00:23:16,000 --> 00:23:17,360
know i can tell them here are the

697
00:23:17,360 --> 00:23:18,960
threats when you use this component and

698
00:23:18,960 --> 00:23:20,480
these are the mitigations you need to

699
00:23:20,480 --> 00:23:22,880
implement and we can you know you i can

700
00:23:22,880 --> 00:23:25,039
i can learn that as a result of using

701
00:23:25,039 --> 00:23:26,400
some of this um

702
00:23:26,400 --> 00:23:29,520
content from a third party um or maybe i

703
00:23:29,520 --> 00:23:32,080
want to be able to share and easily um

704
00:23:32,080 --> 00:23:33,919
publish uh threats and mitigations in

705
00:23:33,919 --> 00:23:35,440
some way so maybe i've done some

706
00:23:35,440 --> 00:23:36,720
research and i want to be able to put it

707
00:23:36,720 --> 00:23:38,159
out there in a way that's easy to

708
00:23:38,159 --> 00:23:39,919
consume by other organizations and other

709
00:23:39,919 --> 00:23:41,440
tools and stuff

710
00:23:41,440 --> 00:23:43,600
and then and another third one may be to

711
00:23:43,600 --> 00:23:45,200
increase transparency so maybe if you're

712
00:23:45,200 --> 00:23:46,320
doing some sort of third party

713
00:23:46,320 --> 00:23:48,640
assessment they could provide a

714
00:23:48,640 --> 00:23:50,480
you know passable threat model that you

715
00:23:50,480 --> 00:23:52,320
can then put into your threat model tool

716
00:23:52,320 --> 00:23:54,240
that looks at it and says okay right

717
00:23:54,240 --> 00:23:55,440
here are the things you need to care

718
00:23:55,440 --> 00:23:57,360
about again rather than just reading

719
00:23:57,360 --> 00:24:00,480
through 200 page pdfs

720
00:24:00,480 --> 00:24:01,840
so there's a lot of interesting use

721
00:24:01,840 --> 00:24:04,559
cases that come up you know could

722
00:24:04,559 --> 00:24:06,000
potentially come out of a

723
00:24:06,000 --> 00:24:08,080
of a structure like this

724
00:24:08,080 --> 00:24:08,799
so

725
00:24:08,799 --> 00:24:10,000
i'm

726
00:24:10,000 --> 00:24:11,440
going to

727
00:24:11,440 --> 00:24:13,679
now dig into the details of what exactly

728
00:24:13,679 --> 00:24:16,799
this looks like um

729
00:24:16,840 --> 00:24:19,440
we um

730
00:24:19,440 --> 00:24:21,279
identified the need for an open

731
00:24:21,279 --> 00:24:22,880
specification because of working with

732
00:24:22,880 --> 00:24:25,919
different customers and so

733
00:24:25,919 --> 00:24:28,640
what this represents is a

734
00:24:28,640 --> 00:24:31,600
set of expectations and a set of

735
00:24:31,600 --> 00:24:33,600
requirements and a set of use cases that

736
00:24:33,600 --> 00:24:35,120
we've seen out there either in terms of

737
00:24:35,120 --> 00:24:36,880
what we see from our customers or from

738
00:24:36,880 --> 00:24:39,279
existing tools so you we'll go into a

739
00:24:39,279 --> 00:24:41,679
little bit more of that in a minute

740
00:24:41,679 --> 00:24:43,760
but at a high level

741
00:24:43,760 --> 00:24:45,760
we wanted something that can

742
00:24:45,760 --> 00:24:48,320
be malleable and flexible

743
00:24:48,320 --> 00:24:51,120
but also provide enough of that

744
00:24:51,120 --> 00:24:54,080
standardization to make it um

745
00:24:54,080 --> 00:24:55,440
something that can evolve so we're

746
00:24:55,440 --> 00:24:56,960
trying to pull from that body mapping

747
00:24:56,960 --> 00:24:59,360
side of things we're trying to pull 20

748
00:24:59,360 --> 00:25:00,960
different threat modeling formats

749
00:25:00,960 --> 00:25:03,360
further to write into that let's say

750
00:25:03,360 --> 00:25:05,200
product space

751
00:25:05,200 --> 00:25:07,120
even though it's an open source thing uh

752
00:25:07,120 --> 00:25:08,559
into that product space so that others

753
00:25:08,559 --> 00:25:10,480
can build on top of so that innovation

754
00:25:10,480 --> 00:25:12,400
can happen on top of it maybe one day

755
00:25:12,400 --> 00:25:13,440
we'll get to threat modeling as

756
00:25:13,440 --> 00:25:15,919
commodity but probably not quite yet

757
00:25:15,919 --> 00:25:19,279
um so in terms of the specification

758
00:25:19,279 --> 00:25:22,640
it's uh yaml so or jason so you know

759
00:25:22,640 --> 00:25:24,799
building on the x's code momentum we

760
00:25:24,799 --> 00:25:26,000
wanted something that could be committed

761
00:25:26,000 --> 00:25:28,480
into git that could be differed and you

762
00:25:28,480 --> 00:25:30,080
know you have a change log associated

763
00:25:30,080 --> 00:25:32,000
with it it can be generated or written

764
00:25:32,000 --> 00:25:33,520
by hand of course

765
00:25:33,520 --> 00:25:35,679
um so you know fairly standard arguments

766
00:25:35,679 --> 00:25:37,679
for using yaml and json for these kind

767
00:25:37,679 --> 00:25:39,679
of things so you know

768
00:25:39,679 --> 00:25:40,960
the other thing is you want this kind of

769
00:25:40,960 --> 00:25:43,520
stuff to be able to live with where the

770
00:25:43,520 --> 00:25:45,440
stuff matters so if i've got a

771
00:25:45,440 --> 00:25:47,760
infrastructure as code a bunch of

772
00:25:47,760 --> 00:25:49,600
confirmation files for example i don't

773
00:25:49,600 --> 00:25:51,520
want my threat model necessarily being

774
00:25:51,520 --> 00:25:53,120
somewhere over there i want to be able

775
00:25:53,120 --> 00:25:55,200
to keep it close to my code so having it

776
00:25:55,200 --> 00:25:57,440
as a yaml alongside the code

777
00:25:57,440 --> 00:25:59,120
is a way of doing that

778
00:25:59,120 --> 00:26:00,880
um

779
00:26:00,880 --> 00:26:03,760
inspired by open api so it should look

780
00:26:03,760 --> 00:26:06,320
relatively familiar in the style um it

781
00:26:06,320 --> 00:26:07,760
doesn't use the sort of the pythonic

782
00:26:07,760 --> 00:26:10,080
conventions it uses more of the

783
00:26:10,080 --> 00:26:13,039
sort of snake cases of open api

784
00:26:13,039 --> 00:26:15,039
um and i'll just very talk briefly talk

785
00:26:15,039 --> 00:26:17,120
through some of the different um

786
00:26:17,120 --> 00:26:19,679
bits that make up the specification and

787
00:26:19,679 --> 00:26:20,799
you know pretty much the rest of the

788
00:26:20,799 --> 00:26:22,080
talk we'll be going into the more of the

789
00:26:22,080 --> 00:26:24,320
details on those so at a very high level

790
00:26:24,320 --> 00:26:26,080
we have we need to know some stuff about

791
00:26:26,080 --> 00:26:27,840
the stuff that we're threat modelling so

792
00:26:27,840 --> 00:26:29,760
the project metadata what what is this

793
00:26:29,760 --> 00:26:31,039
thing that we're threat modeling what

794
00:26:31,039 --> 00:26:32,640
does this threat model represent so

795
00:26:32,640 --> 00:26:34,559
that's the the name and the description

796
00:26:34,559 --> 00:26:36,400
of the application or the product or the

797
00:26:36,400 --> 00:26:38,679
service or whatever

798
00:26:38,679 --> 00:26:41,679
representations are an interesting one

799
00:26:41,679 --> 00:26:44,799
a big complex system can potentially be

800
00:26:44,799 --> 00:26:46,240
represented in a number of different

801
00:26:46,240 --> 00:26:47,600
ways you may have an architecture

802
00:26:47,600 --> 00:26:50,000
diagram you may have a user interface

803
00:26:50,000 --> 00:26:52,000
diagram you could have infrastructure as

804
00:26:52,000 --> 00:26:55,200
code or application code or jira stories

805
00:26:55,200 --> 00:26:56,640
these are all different representations

806
00:26:56,640 --> 00:26:58,480
of fundamentally the same thing and

807
00:26:58,480 --> 00:27:00,480
different representations being threat

808
00:27:00,480 --> 00:27:02,000
modeled in different ways gives you

809
00:27:02,000 --> 00:27:03,919
different outcomes so a threat modeling

810
00:27:03,919 --> 00:27:05,760
specification needs to be able to handle

811
00:27:05,760 --> 00:27:07,679
multiple representations

812
00:27:07,679 --> 00:27:09,760
um assets these are the things that you

813
00:27:09,760 --> 00:27:11,440
care about sensitive information like

814
00:27:11,440 --> 00:27:14,799
pii or pci data or some other thing of

815
00:27:14,799 --> 00:27:15,919
value

816
00:27:15,919 --> 00:27:17,360
components these are the sort of

817
00:27:17,360 --> 00:27:18,960
building blocks of any sort of

818
00:27:18,960 --> 00:27:21,279
representation these are the things like

819
00:27:21,279 --> 00:27:23,600
you know ec2 instances or api endpoints

820
00:27:23,600 --> 00:27:26,720
or chunks of code that uh make up

821
00:27:26,720 --> 00:27:29,120
together a sort of a representation for

822
00:27:29,120 --> 00:27:30,720
a particular system

823
00:27:30,720 --> 00:27:32,799
um trust zones

824
00:27:32,799 --> 00:27:34,559
familiar terminology and threat modeling

825
00:27:34,559 --> 00:27:36,080
but i don't think it's a universally

826
00:27:36,080 --> 00:27:38,960
used term typically these are the uh

827
00:27:38,960 --> 00:27:40,960
differing levels of security within a

828
00:27:40,960 --> 00:27:43,120
system uh you don't put your database

829
00:27:43,120 --> 00:27:44,640
out on the public internet because it's

830
00:27:44,640 --> 00:27:46,640
got sensitive data so you go through

831
00:27:46,640 --> 00:27:48,480
various tiers with each introducing

832
00:27:48,480 --> 00:27:51,120
layers of controls um and and there's

833
00:27:51,120 --> 00:27:53,520
relative diff differences in trust

834
00:27:53,520 --> 00:27:55,520
between those different tiers

835
00:27:55,520 --> 00:27:57,520
uh data flows obviously kind of speak to

836
00:27:57,520 --> 00:27:59,679
itself how information and assets move

837
00:27:59,679 --> 00:28:02,080
around a particular system and between

838
00:28:02,080 --> 00:28:03,520
those components

839
00:28:03,520 --> 00:28:04,880
um and then of course we've got the

840
00:28:04,880 --> 00:28:06,080
threats and the mitigations it wouldn't

841
00:28:06,080 --> 00:28:07,360
be a threat model without threats and

842
00:28:07,360 --> 00:28:09,039
mitigation so what are those things that

843
00:28:09,039 --> 00:28:10,720
can go wrong and uh what are we going to

844
00:28:10,720 --> 00:28:13,279
do about them

845
00:28:13,919 --> 00:28:15,760
a couple of other cool things about the

846
00:28:15,760 --> 00:28:17,600
schema at a high level all of the

847
00:28:17,600 --> 00:28:19,200
objects can have these arbitrary

848
00:28:19,200 --> 00:28:21,039
attributes which you can use for

849
00:28:21,039 --> 00:28:23,840
whatever you want so um you could have

850
00:28:23,840 --> 00:28:27,360
custom ids or urls for documentation or

851
00:28:27,360 --> 00:28:28,720
anything like that or maybe some

852
00:28:28,720 --> 00:28:30,399
specific measurable quantitative

853
00:28:30,399 --> 00:28:32,640
attributes that make sense for your

854
00:28:32,640 --> 00:28:34,240
implementation

855
00:28:34,240 --> 00:28:35,360
um

856
00:28:35,360 --> 00:28:37,200
the specification does however provide

857
00:28:37,200 --> 00:28:40,159
some basic risk related uh properties

858
00:28:40,159 --> 00:28:42,640
like the cia triad confidentiality

859
00:28:42,640 --> 00:28:44,960
integrity and availability uh some trust

860
00:28:44,960 --> 00:28:47,039
zone ratings and things like cwes and

861
00:28:47,039 --> 00:28:48,640
likelihood and impact

862
00:28:48,640 --> 00:28:51,520
um tagging allows you to group and or

863
00:28:51,520 --> 00:28:54,240
categorize things in some form so

864
00:28:54,240 --> 00:28:57,200
you you you may have a you may want to

865
00:28:57,200 --> 00:28:59,520
tag all of your aws components with aws

866
00:28:59,520 --> 00:29:01,440
you may want to take all those of your

867
00:29:01,440 --> 00:29:03,520
azure components with azure or maybe do

868
00:29:03,520 --> 00:29:05,600
it by representation instead

869
00:29:05,600 --> 00:29:07,520
um

870
00:29:07,520 --> 00:29:08,480
different things different

871
00:29:08,480 --> 00:29:09,679
representations have different

872
00:29:09,679 --> 00:29:11,679
requirements so for example if i'm

873
00:29:11,679 --> 00:29:13,279
passing confirmation

874
00:29:13,279 --> 00:29:15,440
i don't typically if it's written by

875
00:29:15,440 --> 00:29:17,760
hand or generated from code i don't have

876
00:29:17,760 --> 00:29:19,600
things like x and y coordinates so i if

877
00:29:19,600 --> 00:29:21,520
i was to sort of draw a class formation

878
00:29:21,520 --> 00:29:23,200
template as a threat model i would have

879
00:29:23,200 --> 00:29:25,440
to interpret the layout of that

880
00:29:25,440 --> 00:29:26,720
of that stuff and that's kind of what

881
00:29:26,720 --> 00:29:28,240
we're going to look at in a little bit

882
00:29:28,240 --> 00:29:29,840
but if i've got something like a visio

883
00:29:29,840 --> 00:29:32,240
diagram that represents a threat model

884
00:29:32,240 --> 00:29:33,919
then i probably want to preserve the x

885
00:29:33,919 --> 00:29:36,080
and y coordinates so the diagram

886
00:29:36,080 --> 00:29:38,000
representations allow you to specify

887
00:29:38,000 --> 00:29:39,120
size and

888
00:29:39,120 --> 00:29:40,799
height and therefore we can have x y

889
00:29:40,799 --> 00:29:42,960
components for um for some of those

890
00:29:42,960 --> 00:29:44,159
components

891
00:29:44,159 --> 00:29:46,320
um and another interesting thing is that

892
00:29:46,320 --> 00:29:48,000
truss lens components can be arbitrarily

893
00:29:48,000 --> 00:29:49,760
nested so i may have a component with

894
00:29:49,760 --> 00:29:51,440
any component within the truss zone

895
00:29:51,440 --> 00:29:52,960
within a component within a truss zone

896
00:29:52,960 --> 00:29:54,330
for example um

897
00:29:54,330 --> 00:29:55,520
[Music]

898
00:29:55,520 --> 00:29:57,919
and the general practice within the

899
00:29:57,919 --> 00:29:59,760
specification is to try to keep the

900
00:29:59,760 --> 00:30:01,760
number of required fields to a minimum

901
00:30:01,760 --> 00:30:02,880
so

902
00:30:02,880 --> 00:30:04,320
what you'll see now

903
00:30:04,320 --> 00:30:06,960
is sort of a set of examples of the

904
00:30:06,960 --> 00:30:09,520
specification um

905
00:30:09,520 --> 00:30:11,200
not all of those fields are required

906
00:30:11,200 --> 00:30:12,240
that means that if you're writing

907
00:30:12,240 --> 00:30:13,919
something by hand you can only you only

908
00:30:13,919 --> 00:30:16,480
have to provide the bare essentials and

909
00:30:16,480 --> 00:30:18,720
um if you were generating stuff then you

910
00:30:18,720 --> 00:30:20,720
would generate whatever you know you had

911
00:30:20,720 --> 00:30:22,720
available to to generate that uh

912
00:30:22,720 --> 00:30:25,440
particular outcome

913
00:30:25,760 --> 00:30:28,240
um now while there isn't currently a

914
00:30:28,240 --> 00:30:32,000
single accepted open threat model format

915
00:30:32,000 --> 00:30:33,200
out there in the world there are a

916
00:30:33,200 --> 00:30:34,720
number of existing

917
00:30:34,720 --> 00:30:36,880
formats for things that describe threat

918
00:30:36,880 --> 00:30:38,559
models some of these are inside

919
00:30:38,559 --> 00:30:40,720
proprietary um tools and some of them

920
00:30:40,720 --> 00:30:42,159
are in sort of open source throughout

921
00:30:42,159 --> 00:30:43,520
spec being one of them probably have to

922
00:30:43,520 --> 00:30:44,960
update it to use otm at some point in

923
00:30:44,960 --> 00:30:46,080
the future

924
00:30:46,080 --> 00:30:48,159
um so what we did is we obviously looked

925
00:30:48,159 --> 00:30:50,240
at our customer requirements and what

926
00:30:50,240 --> 00:30:51,520
else was going on in the threat morning

927
00:30:51,520 --> 00:30:53,039
space and looked at the other tools to

928
00:30:53,039 --> 00:30:55,200
make sure that a open specification was

929
00:30:55,200 --> 00:30:56,399
able to work in these different

930
00:30:56,399 --> 00:30:58,240
circumstances

931
00:30:58,240 --> 00:30:59,039
um

932
00:30:59,039 --> 00:31:01,120
again not going to read through every

933
00:31:01,120 --> 00:31:03,360
single thing here um there's i'm just

934
00:31:03,360 --> 00:31:04,480
going to call out a couple of key

935
00:31:04,480 --> 00:31:07,279
differences we're trying to on the whole

936
00:31:07,279 --> 00:31:09,360
find some of the best bits of all these

937
00:31:09,360 --> 00:31:11,360
different tools in terms of representing

938
00:31:11,360 --> 00:31:13,279
threat models and some of the common

939
00:31:13,279 --> 00:31:15,440
bits and pull that into a single place

940
00:31:15,440 --> 00:31:18,640
that you know can be used elsewhere um

941
00:31:18,640 --> 00:31:20,960
so for example microsoft modeling tool

942
00:31:20,960 --> 00:31:23,679
very popular still um doesn't handle

943
00:31:23,679 --> 00:31:25,279
different representations and neither

944
00:31:25,279 --> 00:31:27,600
does threat dragon threat dragon does

945
00:31:27,600 --> 00:31:29,200
support multiple diagrams which is

946
00:31:29,200 --> 00:31:31,440
awesome um

947
00:31:31,440 --> 00:31:33,919
but for example the mitigations aren't

948
00:31:33,919 --> 00:31:36,159
first-class citizens so mitigations are

949
00:31:36,159 --> 00:31:38,640
a box um

950
00:31:38,640 --> 00:31:41,039
inside a threat whereas in the this

951
00:31:41,039 --> 00:31:42,640
specification a

952
00:31:42,640 --> 00:31:44,720
mitigation is its own object in itself

953
00:31:44,720 --> 00:31:46,159
so it can be very powerful and

954
00:31:46,159 --> 00:31:48,240
descriptive if you don't want to use any

955
00:31:48,240 --> 00:31:50,159
of that fine you can sort of reduce it

956
00:31:50,159 --> 00:31:52,159
to just a simple description and that

957
00:31:52,159 --> 00:31:53,440
makes it sort of compatible with things

958
00:31:53,440 --> 00:31:56,320
like oh snapdragon

959
00:31:56,320 --> 00:31:58,559
similar to threat playbook it's very

960
00:31:58,559 --> 00:32:02,559
heavily reliant on yaml um

961
00:32:02,799 --> 00:32:04,559
but it's a more generalized structure

962
00:32:04,559 --> 00:32:08,000
and compared to pytm pytm is awesome

963
00:32:08,000 --> 00:32:10,000
uh very very flexible because it's

964
00:32:10,000 --> 00:32:11,600
python you can do whatever you want

965
00:32:11,600 --> 00:32:14,320
essentially but it's also then scoped

966
00:32:14,320 --> 00:32:16,880
and limited to python whereas this we

967
00:32:16,880 --> 00:32:18,640
lose some of that power and flexibility

968
00:32:18,640 --> 00:32:21,360
that pytm has but at least it's a sort

969
00:32:21,360 --> 00:32:23,039
of more universal

970
00:32:23,039 --> 00:32:25,120
format

971
00:32:25,120 --> 00:32:27,919
so i will just go through reasonably

972
00:32:27,919 --> 00:32:30,480
fast-paced still some of these different

973
00:32:30,480 --> 00:32:32,559
um components and this you can see here

974
00:32:32,559 --> 00:32:34,000
is an example

975
00:32:34,000 --> 00:32:36,720
of a project um so

976
00:32:36,720 --> 00:32:38,640
in this particular example we have name

977
00:32:38,640 --> 00:32:40,960
and id of the only required field so

978
00:32:40,960 --> 00:32:42,960
we've got some other stuff to look at as

979
00:32:42,960 --> 00:32:44,240
well

980
00:32:44,240 --> 00:32:45,840
you'd want to be able to

981
00:32:45,840 --> 00:32:49,279
identify a project

982
00:32:49,279 --> 00:32:51,360
in a unique way so each project would

983
00:32:51,360 --> 00:32:52,880
need some sort of a unique identifier

984
00:32:52,880 --> 00:32:54,240
that distinguishes it from other

985
00:32:54,240 --> 00:32:55,519
projects

986
00:32:55,519 --> 00:32:57,440
so that's going to be pretty obvious and

987
00:32:57,440 --> 00:32:59,360
unique ids are going to be a reoccurring

988
00:32:59,360 --> 00:33:00,799
theme throughout this whole sort of

989
00:33:00,799 --> 00:33:03,600
specification

990
00:33:04,240 --> 00:33:05,760
and you can see here the use of some

991
00:33:05,760 --> 00:33:07,200
attributes

992
00:33:07,200 --> 00:33:09,200
such as documentation or

993
00:33:09,200 --> 00:33:11,039
probably a very useful one would be to

994
00:33:11,039 --> 00:33:13,519
be able to relate a project to something

995
00:33:13,519 --> 00:33:15,440
like an identifier in a configuration

996
00:33:15,440 --> 00:33:18,240
management database so yeah this is my

997
00:33:18,240 --> 00:33:20,000
identifier in a threat model and this is

998
00:33:20,000 --> 00:33:21,840
where it lives in wherever i manage all

999
00:33:21,840 --> 00:33:23,440
my applications

1000
00:33:23,440 --> 00:33:24,720
and be able to create those links back

1001
00:33:24,720 --> 00:33:26,880
and forth between them

1002
00:33:26,880 --> 00:33:27,840
um

1003
00:33:27,840 --> 00:33:29,679
representations here

1004
00:33:29,679 --> 00:33:31,039
we can see here an example of an

1005
00:33:31,039 --> 00:33:33,919
architecture diagram the type field

1006
00:33:33,919 --> 00:33:36,000
allows you to interpret the

1007
00:33:36,000 --> 00:33:38,000
representation in the right way so as we

1008
00:33:38,000 --> 00:33:41,440
said before a a diagram can have um

1009
00:33:41,440 --> 00:33:43,440
spatial context

1010
00:33:43,440 --> 00:33:45,600
width height x and y

1011
00:33:45,600 --> 00:33:48,640
um that doesn't make sense for code um

1012
00:33:48,640 --> 00:33:50,159
so we want to be able to say right this

1013
00:33:50,159 --> 00:33:52,720
representation is of a type diagram and

1014
00:33:52,720 --> 00:33:54,159
therefore here are some properties

1015
00:33:54,159 --> 00:33:57,279
associated with that

1016
00:33:58,080 --> 00:33:59,360
if you don't want to provide them you

1017
00:33:59,360 --> 00:34:02,080
don't have to of course

1018
00:34:02,080 --> 00:34:03,440
likewise a different representation

1019
00:34:03,440 --> 00:34:05,039
might be application code which is of

1020
00:34:05,039 --> 00:34:07,360
type code and that would have other

1021
00:34:07,360 --> 00:34:09,199
attributes that are relevant to that

1022
00:34:09,199 --> 00:34:10,719
type of representation such as a

1023
00:34:10,719 --> 00:34:13,199
repository so if i've got application

1024
00:34:13,199 --> 00:34:14,639
code i need to know where that lives and

1025
00:34:14,639 --> 00:34:17,760
i can sort of provide that as url

1026
00:34:17,760 --> 00:34:18,879
attributes

1027
00:34:18,879 --> 00:34:20,320
using these custom attributes can also

1028
00:34:20,320 --> 00:34:22,000
provide additional context tools and

1029
00:34:22,000 --> 00:34:24,079
processes so one cool thing about being

1030
00:34:24,079 --> 00:34:25,599
able to provide context like the

1031
00:34:25,599 --> 00:34:28,239
language or maybe some um framework

1032
00:34:28,239 --> 00:34:29,918
information inside the specification

1033
00:34:29,918 --> 00:34:32,079
means that maybe that can

1034
00:34:32,079 --> 00:34:35,599
trigger certain sassed or dashed rules

1035
00:34:35,599 --> 00:34:38,480
or maybe some sort of policy as code

1036
00:34:38,480 --> 00:34:40,320
implementation could could sort of be

1037
00:34:40,320 --> 00:34:42,239
scoped around some of these these

1038
00:34:42,239 --> 00:34:44,799
attributes

1039
00:34:46,719 --> 00:34:48,879
example of an asset then credit card

1040
00:34:48,879 --> 00:34:51,520
data obviously a fairly classic um as i

1041
00:34:51,520 --> 00:34:52,800
said before these are the things that

1042
00:34:52,800 --> 00:34:55,599
matter to uh your organization or to

1043
00:34:55,599 --> 00:34:59,280
your to your users or your customers

1044
00:34:59,280 --> 00:35:00,480
and

1045
00:35:00,480 --> 00:35:02,320
in order to be able to describe what how

1046
00:35:02,320 --> 00:35:05,200
important is this asset to us we can use

1047
00:35:05,200 --> 00:35:08,720
the cia triad and provide a very

1048
00:35:08,720 --> 00:35:12,800
very simple but reasonably flexible um

1049
00:35:12,800 --> 00:35:15,520
quantitative approach to to specifying

1050
00:35:15,520 --> 00:35:18,000
risk for an asset so we can say

1051
00:35:18,000 --> 00:35:20,000
confidentiality on a scale of zero to

1052
00:35:20,000 --> 00:35:21,680
100 and same for integrity and

1053
00:35:21,680 --> 00:35:24,320
availability so where you have an asset

1054
00:35:24,320 --> 00:35:26,000
that is absolutely fundamentally

1055
00:35:26,000 --> 00:35:27,760
critical to you across all three of

1056
00:35:27,760 --> 00:35:30,480
those um

1057
00:35:30,560 --> 00:35:33,920
properties confidentiality 100 integrity

1058
00:35:33,920 --> 00:35:38,000
100 and availability 100 if if and

1059
00:35:38,000 --> 00:35:40,079
if it was something that was you know

1060
00:35:40,079 --> 00:35:44,079
sensitive but uh didn't require you know

1061
00:35:44,079 --> 00:35:46,480
that up time to be very high you could

1062
00:35:46,480 --> 00:35:48,160
obviously tweak the availability down

1063
00:35:48,160 --> 00:35:50,800
lower it down to 50 and say okay while

1064
00:35:50,800 --> 00:35:52,320
we must ensure that nobody else sees

1065
00:35:52,320 --> 00:35:54,160
this if we lose that data it's not going

1066
00:35:54,160 --> 00:35:56,160
to be that that critical

1067
00:35:56,160 --> 00:35:57,839
um so maybe you've just collected

1068
00:35:57,839 --> 00:36:00,880
marketing data in a survey um it's got

1069
00:36:00,880 --> 00:36:02,640
piice therefore it's very sensitive in

1070
00:36:02,640 --> 00:36:05,119
terms of confidentiality but if you lost

1071
00:36:05,119 --> 00:36:06,160
it you know wouldn't be the end of the

1072
00:36:06,160 --> 00:36:08,160
world um and then we can provide the

1073
00:36:08,160 --> 00:36:10,560
additional context through a comment um

1074
00:36:10,560 --> 00:36:12,960
that allows you to you know describe why

1075
00:36:12,960 --> 00:36:14,880
these particular decisions would have

1076
00:36:14,880 --> 00:36:16,560
been made for why these values are what

1077
00:36:16,560 --> 00:36:18,400
they are

1078
00:36:18,400 --> 00:36:20,240
um trust zones

1079
00:36:20,240 --> 00:36:23,359
um again as i said uh sort of separates

1080
00:36:23,359 --> 00:36:24,800
out the components by the relative

1081
00:36:24,800 --> 00:36:26,800
security of trust between them

1082
00:36:26,800 --> 00:36:29,839
um so you again trying to find a

1083
00:36:29,839 --> 00:36:32,000
quantitative way of

1084
00:36:32,000 --> 00:36:34,079
describing that difference

1085
00:36:34,079 --> 00:36:36,800
normalized scale trust zone rating lets

1086
00:36:36,800 --> 00:36:39,040
you see okay how does this trust zone

1087
00:36:39,040 --> 00:36:41,119
compared to this trust zone if i've got

1088
00:36:41,119 --> 00:36:42,560
a trust zone of

1089
00:36:42,560 --> 00:36:45,200
20 which is very untrusted talking to a

1090
00:36:45,200 --> 00:36:47,760
trust zone of 100 you know

1091
00:36:47,760 --> 00:36:49,680
that's potentially a bit of an issue if

1092
00:36:49,680 --> 00:36:50,800
i've got that sort of relative

1093
00:36:50,800 --> 00:36:52,400
difference so you may need to look at

1094
00:36:52,400 --> 00:36:53,839
some sort of three-tier type

1095
00:36:53,839 --> 00:36:56,000
architecture application or or you're in

1096
00:36:56,000 --> 00:36:58,240
that sort of zero trust space

1097
00:36:58,240 --> 00:37:00,480
um

1098
00:37:00,480 --> 00:37:03,520
and trust zones can be associated with a

1099
00:37:03,520 --> 00:37:06,560
particular representation so

1100
00:37:06,560 --> 00:37:08,320
depending on how you're looking at a

1101
00:37:08,320 --> 00:37:10,720
particular system you may need to invoke

1102
00:37:10,720 --> 00:37:14,800
or ignore different types of trust links

1103
00:37:14,800 --> 00:37:16,800
now components this is sort of a

1104
00:37:16,800 --> 00:37:20,880
multi-slide section uh components can be

1105
00:37:20,880 --> 00:37:22,640
quite complex so you need to

1106
00:37:22,640 --> 00:37:25,359
look at it from a from a number of uh

1107
00:37:25,359 --> 00:37:27,839
sort of different angles so

1108
00:37:27,839 --> 00:37:28,880
usual

1109
00:37:28,880 --> 00:37:31,760
basic and stuff like name identifier

1110
00:37:31,760 --> 00:37:33,839
this time we have a parent so where does

1111
00:37:33,839 --> 00:37:35,520
this component live and that parent can

1112
00:37:35,520 --> 00:37:36,400
be

1113
00:37:36,400 --> 00:37:37,520
a trust owner it could be another

1114
00:37:37,520 --> 00:37:39,440
component hence why we have the nested

1115
00:37:39,440 --> 00:37:41,839
and again there's our friend the type so

1116
00:37:41,839 --> 00:37:43,760
we can interpret the type of this

1117
00:37:43,760 --> 00:37:45,920
component i may have multiple web

1118
00:37:45,920 --> 00:37:47,839
services called web service one two and

1119
00:37:47,839 --> 00:37:50,000
three all of the type web service so

1120
00:37:50,000 --> 00:37:51,440
that when i see that component i can

1121
00:37:51,440 --> 00:37:53,359
interpret them in a similar way because

1122
00:37:53,359 --> 00:37:54,800
they're all functionally the same sort

1123
00:37:54,800 --> 00:37:57,280
of thing so think of it like a class

1124
00:37:57,280 --> 00:37:59,440
and then we can use tags to group um and

1125
00:37:59,440 --> 00:38:01,119
relate these things as well in a

1126
00:38:01,119 --> 00:38:05,040
completely flexible and arbitrary way

1127
00:38:05,040 --> 00:38:06,560
now components can also have

1128
00:38:06,560 --> 00:38:08,560
representations to say this component is

1129
00:38:08,560 --> 00:38:10,480
associated with this representation of

1130
00:38:10,480 --> 00:38:12,560
the system so there's the identifier of

1131
00:38:12,560 --> 00:38:14,000
that particular representation like the

1132
00:38:14,000 --> 00:38:15,359
one we saw earlier the architecture

1133
00:38:15,359 --> 00:38:16,640
diagram

1134
00:38:16,640 --> 00:38:18,000
and then we provide that additional

1135
00:38:18,000 --> 00:38:20,480
context so in a diagram representation

1136
00:38:20,480 --> 00:38:22,320
this component should have x and y

1137
00:38:22,320 --> 00:38:23,440
positions

1138
00:38:23,440 --> 00:38:27,440
um or width and heights for example

1139
00:38:27,920 --> 00:38:28,880
um

1140
00:38:28,880 --> 00:38:30,400
and

1141
00:38:30,400 --> 00:38:31,760
assets

1142
00:38:31,760 --> 00:38:35,520
live on or move through components so we

1143
00:38:35,520 --> 00:38:37,920
can talk about which assets are either

1144
00:38:37,920 --> 00:38:39,920
processed or stored in this component

1145
00:38:39,920 --> 00:38:42,640
again just a simple list of referring to

1146
00:38:42,640 --> 00:38:44,720
those identifiers that we saw earlier

1147
00:38:44,720 --> 00:38:46,400
allows you to start building connections

1148
00:38:46,400 --> 00:38:48,640
between these things these concepts

1149
00:38:48,640 --> 00:38:50,800
from components to assets from component

1150
00:38:50,800 --> 00:38:52,720
components

1151
00:38:52,720 --> 00:38:54,640
and of course data flows how data flow

1152
00:38:54,640 --> 00:38:56,000
moves between

1153
00:38:56,000 --> 00:38:56,960
different

1154
00:38:56,960 --> 00:38:58,880
components

1155
00:38:58,880 --> 00:39:00,000
they have a source they have a

1156
00:39:00,000 --> 00:39:02,560
destination those are the identifiers of

1157
00:39:02,560 --> 00:39:05,119
the components and you know relatively

1158
00:39:05,119 --> 00:39:07,359
straightforward

1159
00:39:07,359 --> 00:39:09,280
now threats

1160
00:39:09,280 --> 00:39:11,359
are in this case

1161
00:39:11,359 --> 00:39:14,160
first-class citizens so they are threats

1162
00:39:14,160 --> 00:39:15,839
in and of themselves and we'll see in a

1163
00:39:15,839 --> 00:39:18,079
minute how they relate to the components

1164
00:39:18,079 --> 00:39:20,000
um so a threat you'd have some sort of a

1165
00:39:20,000 --> 00:39:20,800
name

1166
00:39:20,800 --> 00:39:23,520
and a description an identifier

1167
00:39:23,520 --> 00:39:25,760
categories allows you to

1168
00:39:25,760 --> 00:39:28,000
categorize and structure

1169
00:39:28,000 --> 00:39:30,480
how these threats are

1170
00:39:30,480 --> 00:39:31,760
sort of used

1171
00:39:31,760 --> 00:39:33,119
in this case we can see a couple of the

1172
00:39:33,119 --> 00:39:35,040
elements of stride

1173
00:39:35,040 --> 00:39:36,720
there's a cwe's

1174
00:39:36,720 --> 00:39:39,359
field that lets you tie this to the cwe

1175
00:39:39,359 --> 00:39:41,040
database the common weakest enumeration

1176
00:39:41,040 --> 00:39:42,720
database so that we can see

1177
00:39:42,720 --> 00:39:45,839
how this threat relates to

1178
00:39:45,839 --> 00:39:49,520
the the miter cwe framework

1179
00:39:49,920 --> 00:39:51,520
this is still within the same threat

1180
00:39:51,520 --> 00:39:53,760
example we also need to know what does

1181
00:39:53,760 --> 00:39:55,520
this threat mean in terms of impact and

1182
00:39:55,520 --> 00:39:57,200
likelihood what are the risk attributes

1183
00:39:57,200 --> 00:39:59,680
for this threat so you know maybe this

1184
00:39:59,680 --> 00:40:01,440
is not a particularly scary threat so

1185
00:40:01,440 --> 00:40:04,079
the likelihood uh is only

1186
00:40:04,079 --> 00:40:06,079
50 because it's fairly complex or

1187
00:40:06,079 --> 00:40:07,920
something like that but maybe the impact

1188
00:40:07,920 --> 00:40:12,079
is a hundred um depending on the context

1189
00:40:12,079 --> 00:40:14,400
so and again we can provide the

1190
00:40:14,400 --> 00:40:16,079
additional context around why that

1191
00:40:16,079 --> 00:40:17,920
number has been chosen with the comment

1192
00:40:17,920 --> 00:40:20,240
field

1193
00:40:21,119 --> 00:40:23,200
uh and of course as i said

1194
00:40:23,200 --> 00:40:24,480
there's no point threat modelling and

1195
00:40:24,480 --> 00:40:25,920
coming up with a bunch of threats if

1196
00:40:25,920 --> 00:40:27,119
you're not going to do anything about it

1197
00:40:27,119 --> 00:40:28,640
so we need to be able to capture these

1198
00:40:28,640 --> 00:40:30,319
mitigations and these mitigations are

1199
00:40:30,319 --> 00:40:32,800
also first-class citizens so they have a

1200
00:40:32,800 --> 00:40:34,800
description they have

1201
00:40:34,800 --> 00:40:36,880
a unique identifier and they have

1202
00:40:36,880 --> 00:40:38,480
properties that can be shared and reused

1203
00:40:38,480 --> 00:40:40,640
across the thing so how much the risk

1204
00:40:40,640 --> 00:40:43,280
reduction one here is or how much impact

1205
00:40:43,280 --> 00:40:45,760
does this mitigation have on reducing

1206
00:40:45,760 --> 00:40:47,040
risk

1207
00:40:47,040 --> 00:40:50,319
normalized value zero to 100 again

1208
00:40:50,319 --> 00:40:52,400
how you interpret that as a medium high

1209
00:40:52,400 --> 00:40:54,319
low whatever is up to you but we just

1210
00:40:54,319 --> 00:40:56,480
provided sort of a very basic um way of

1211
00:40:56,480 --> 00:40:58,960
being able to describe how impactful a

1212
00:40:58,960 --> 00:41:01,119
particular mitigation can be

1213
00:41:01,119 --> 00:41:03,680
um and and using those attributes to tie

1214
00:41:03,680 --> 00:41:05,119
these mitigations to things like

1215
00:41:05,119 --> 00:41:07,440
standards or other components or other

1216
00:41:07,440 --> 00:41:10,560
data sources or maybe even sort of

1217
00:41:10,560 --> 00:41:12,079
you could even link it to training

1218
00:41:12,079 --> 00:41:13,520
material for example through those

1219
00:41:13,520 --> 00:41:16,480
attributes if needed

1220
00:41:16,720 --> 00:41:17,520
now

1221
00:41:17,520 --> 00:41:18,880
going back to the components we

1222
00:41:18,880 --> 00:41:20,000
obviously need to be able to relate

1223
00:41:20,000 --> 00:41:21,359
threats and mitigations to those

1224
00:41:21,359 --> 00:41:22,800
components because we were just looking

1225
00:41:22,800 --> 00:41:25,920
at them by themselves so we can

1226
00:41:25,920 --> 00:41:27,680
under a component we can say these are

1227
00:41:27,680 --> 00:41:28,960
the threats that matter to this

1228
00:41:28,960 --> 00:41:31,520
component here's the state it's exposed

1229
00:41:31,520 --> 00:41:33,599
it's mitigated or whatever that looks

1230
00:41:33,599 --> 00:41:35,680
like and here are the mitigations for

1231
00:41:35,680 --> 00:41:37,920
that particular threat so this is one

1232
00:41:37,920 --> 00:41:39,359
that's been implemented and this one

1233
00:41:39,359 --> 00:41:40,880
hasn't

1234
00:41:40,880 --> 00:41:42,560
um and the same thing of biased data

1235
00:41:42,560 --> 00:41:44,160
closed is

1236
00:41:44,160 --> 00:41:45,280
maybe slightly unusual i think the

1237
00:41:45,280 --> 00:41:46,800
microsoft site modeling tool allows you

1238
00:41:46,800 --> 00:41:48,160
to associate throughout some mitigations

1239
00:41:48,160 --> 00:41:50,800
with data flows um

1240
00:41:50,800 --> 00:41:52,960
but again it gives you that capability

1241
00:41:52,960 --> 00:41:54,720
and that flexibility to say

1242
00:41:54,720 --> 00:41:57,599
if my data flow is from a type of and

1243
00:41:57,599 --> 00:41:59,839
this would be in your own interpretation

1244
00:41:59,839 --> 00:42:03,119
implementation tool if my type is of web

1245
00:42:03,119 --> 00:42:06,400
server on the source and database on the

1246
00:42:06,400 --> 00:42:09,520
destination then the sql thread may

1247
00:42:09,520 --> 00:42:11,200
apply to this particular data phone the

1248
00:42:11,200 --> 00:42:13,359
sql injection threat sorry

1249
00:42:13,359 --> 00:42:14,880
and therefore the mitigations are you

1250
00:42:14,880 --> 00:42:17,119
know use an orm or uh

1251
00:42:17,119 --> 00:42:20,079
yeah don't concatenate your strings

1252
00:42:20,079 --> 00:42:22,319
um

1253
00:42:22,480 --> 00:42:23,280
so

1254
00:42:23,280 --> 00:42:25,520
i've got just over five minutes to go i

1255
00:42:25,520 --> 00:42:27,760
don't know just under five minutes um

1256
00:42:27,760 --> 00:42:29,359
i'm just going to do a very quick demo

1257
00:42:29,359 --> 00:42:31,440
of what this looks like in practice

1258
00:42:31,440 --> 00:42:33,440
we've got an implementation that we're

1259
00:42:33,440 --> 00:42:36,000
building and i'll just show a couple of

1260
00:42:36,000 --> 00:42:37,920
screenshots and also show you what that

1261
00:42:37,920 --> 00:42:40,319
looks like in terms of the ide

1262
00:42:40,319 --> 00:42:41,200
um

1263
00:42:41,200 --> 00:42:44,319
so i will just have to change my screen

1264
00:42:44,319 --> 00:42:45,119
share

1265
00:42:45,119 --> 00:42:46,880
to

1266
00:42:46,880 --> 00:42:49,839
default desktop i think

1267
00:42:53,119 --> 00:42:54,160
right

1268
00:42:54,160 --> 00:42:55,040
so

1269
00:42:55,040 --> 00:42:57,920
over here i have a very simple again

1270
00:42:57,920 --> 00:42:59,920
hopefully everyone can see this

1271
00:42:59,920 --> 00:43:02,720
i have a very simple um

1272
00:43:02,720 --> 00:43:05,920
otm file open threat model file um got

1273
00:43:05,920 --> 00:43:07,680
the version number in there

1274
00:43:07,680 --> 00:43:10,480
we just have two trust zones uh you can

1275
00:43:10,480 --> 00:43:12,480
see here the relative rating and the

1276
00:43:12,480 --> 00:43:14,880
number of components in here stripped

1277
00:43:14,880 --> 00:43:16,400
out all the other stuff that doesn't

1278
00:43:16,400 --> 00:43:17,760
really matter

1279
00:43:17,760 --> 00:43:20,000
um if you if you to then pass it you

1280
00:43:20,000 --> 00:43:22,319
could you could visualize this in

1281
00:43:22,319 --> 00:43:25,040
graphiz or any other tool and in this

1282
00:43:25,040 --> 00:43:27,119
case it would look a little bit like

1283
00:43:27,119 --> 00:43:31,359
this so you can see our two components

1284
00:43:31,920 --> 00:43:34,400
inside the um

1285
00:43:34,400 --> 00:43:36,319
inside their respective truss zones at

1286
00:43:36,319 --> 00:43:39,119
the moment in our uh although it's in

1287
00:43:39,119 --> 00:43:41,280
specification in our implementation we

1288
00:43:41,280 --> 00:43:43,599
don't have uh what the expose i think

1289
00:43:43,599 --> 00:43:45,119
actually we do but i didn't have them

1290
00:43:45,119 --> 00:43:48,640
when i was doing these screenshots so um

1291
00:43:48,640 --> 00:43:50,160
if i added in a date flow you'd expect

1292
00:43:50,160 --> 00:43:51,839
to see a line from the from the client

1293
00:43:51,839 --> 00:43:55,040
to the rest api in this case um

1294
00:43:55,040 --> 00:43:57,200
now what we have here is a cloud

1295
00:43:57,200 --> 00:43:59,200
information file i've stripped it back

1296
00:43:59,200 --> 00:44:00,800
to just the stuff that matters so it's

1297
00:44:00,800 --> 00:44:02,720
not actually a valid optimization cloud

1298
00:44:02,720 --> 00:44:04,240
information file anymore all of the

1299
00:44:04,240 --> 00:44:05,359
stuff you'd actually need to build

1300
00:44:05,359 --> 00:44:07,599
something is is taken out but you can

1301
00:44:07,599 --> 00:44:09,040
see here we have

1302
00:44:09,040 --> 00:44:12,240
uh vpcs we have subnets and we have

1303
00:44:12,240 --> 00:44:15,119
bbc gateway vpc gateways and endpoints

1304
00:44:15,119 --> 00:44:17,920
and all that kind of stuff

1305
00:44:17,920 --> 00:44:20,480
this represents a

1306
00:44:20,480 --> 00:44:22,160
you know fairly typical applications

1307
00:44:22,160 --> 00:44:24,640
using ecs in this case

1308
00:44:24,640 --> 00:44:27,839
there's a on our public github we have a

1309
00:44:27,839 --> 00:44:29,920
open source uh python sort of

1310
00:44:29,920 --> 00:44:31,520
experimental python tool that's on the

1311
00:44:31,520 --> 00:44:33,760
public github that will pass cloud

1312
00:44:33,760 --> 00:44:35,920
formation and generate an otm file so

1313
00:44:35,920 --> 00:44:36,800
you know

1314
00:44:36,800 --> 00:44:38,400
an example of how this could be

1315
00:44:38,400 --> 00:44:40,079
implemented and the way this works

1316
00:44:40,079 --> 00:44:41,599
briefly is by

1317
00:44:41,599 --> 00:44:43,119
um

1318
00:44:43,119 --> 00:44:45,599
allowing you to specify jmes pass

1319
00:44:45,599 --> 00:44:47,839
queries and saying this is how i expect

1320
00:44:47,839 --> 00:44:50,079
to find a this type of component in a

1321
00:44:50,079 --> 00:44:52,000
confirmation template and this is what

1322
00:44:52,000 --> 00:44:54,079
it means in terms of a threat model so i

1323
00:44:54,079 --> 00:44:56,319
can go and look for aws cloudwatch

1324
00:44:56,319 --> 00:44:59,920
alarms and the type of that thing that i

1325
00:44:59,920 --> 00:45:02,000
find in a jet cloud formation file if

1326
00:45:02,000 --> 00:45:04,560
there is one is type cloudwatch and i

1327
00:45:04,560 --> 00:45:06,800
can say who the parent is or i can go

1328
00:45:06,800 --> 00:45:09,040
and do some clever stuff with um looking

1329
00:45:09,040 --> 00:45:10,720
up the relationship between this

1330
00:45:10,720 --> 00:45:13,040
component and others for example

1331
00:45:13,040 --> 00:45:15,359
so this is a mapping file it's just yaml

1332
00:45:15,359 --> 00:45:17,599
but it's it's what generates the

1333
00:45:17,599 --> 00:45:20,880
um the otm from the cloud formation so

1334
00:45:20,880 --> 00:45:24,079
if i quickly run this command with that

1335
00:45:24,079 --> 00:45:27,119
opens that uh open source python

1336
00:45:27,119 --> 00:45:28,000
script

1337
00:45:28,000 --> 00:45:29,119
um

1338
00:45:29,119 --> 00:45:30,880
i'm telling its confirmation so it knows

1339
00:45:30,880 --> 00:45:32,240
how to pass it i'm giving it the mapping

1340
00:45:32,240 --> 00:45:34,560
file so it knows um

1341
00:45:34,560 --> 00:45:36,560
how to interpret this particular this

1342
00:45:36,560 --> 00:45:38,400
particular confirmation template well

1343
00:45:38,400 --> 00:45:39,839
that mapping file applies to any

1344
00:45:39,839 --> 00:45:41,680
confirmation templates but you may want

1345
00:45:41,680 --> 00:45:43,359
to have your own versions or customize

1346
00:45:43,359 --> 00:45:45,200
it or tweak it however you need i'm

1347
00:45:45,200 --> 00:45:47,520
providing a name and identifier and the

1348
00:45:47,520 --> 00:45:49,520
the yaml file itself now i'm going to

1349
00:45:49,520 --> 00:45:52,560
save this as an otm file

1350
00:45:52,560 --> 00:45:54,240
um and that's it that was relatively

1351
00:45:54,240 --> 00:45:57,680
straightforward generated an mtm file

1352
00:45:57,680 --> 00:46:00,560
which if i look in here now we can see

1353
00:46:00,560 --> 00:46:03,280
if i just change this to json

1354
00:46:03,280 --> 00:46:05,119
uh we can see now this is generated an

1355
00:46:05,119 --> 00:46:06,800
itm file we've got our representation

1356
00:46:06,800 --> 00:46:08,640
which is cloud information we've got a

1357
00:46:08,640 --> 00:46:10,160
trust zone and we have a whole bunch of

1358
00:46:10,160 --> 00:46:11,359
components

1359
00:46:11,359 --> 00:46:14,640
um including the relationships with

1360
00:46:14,640 --> 00:46:16,480
their parents but as i said not with any

1361
00:46:16,480 --> 00:46:18,640
data flows at the moment and what this

1362
00:46:18,640 --> 00:46:21,040
looks like when you visualize it is this

1363
00:46:21,040 --> 00:46:22,800
so we've got our nested components we've

1364
00:46:22,800 --> 00:46:25,680
got our our objects and this looks much

1365
00:46:25,680 --> 00:46:27,119
more like a

1366
00:46:27,119 --> 00:46:29,680
architectural diagram then when you

1367
00:46:29,680 --> 00:46:31,200
typically visualize cloud formation you

1368
00:46:31,200 --> 00:46:33,200
just see all of the objects connected to

1369
00:46:33,200 --> 00:46:36,000
each other this is a architecture

1370
00:46:36,000 --> 00:46:37,920
diagram that is generated from a cloud

1371
00:46:37,920 --> 00:46:40,079
formation template

1372
00:46:40,079 --> 00:46:41,200
so

1373
00:46:41,200 --> 00:46:42,400
i think i've got less than a minute to

1374
00:46:42,400 --> 00:46:45,359
do this bit uh where we are literally

1375
00:46:45,359 --> 00:46:49,280
only just talking to uh talking to

1376
00:46:49,280 --> 00:46:50,960
the world about this trying to get

1377
00:46:50,960 --> 00:46:53,280
people's ideas and opinions

1378
00:46:53,280 --> 00:46:54,880
is this a sensible approach how would

1379
00:46:54,880 --> 00:46:57,359
you do it would you do it differently um

1380
00:46:57,359 --> 00:46:59,280
we'll get some feedback we'll open it up

1381
00:46:59,280 --> 00:47:01,200
and release it to the world and then you

1382
00:47:01,200 --> 00:47:03,119
know work with people and organizations

1383
00:47:03,119 --> 00:47:05,280
et cetera to do more cool stuff with it

1384
00:47:05,280 --> 00:47:08,240
uh going back to those kind of use cases

1385
00:47:08,240 --> 00:47:10,240
um if you're if you're interested in

1386
00:47:10,240 --> 00:47:12,240
this if it's something you'd be uh

1387
00:47:12,240 --> 00:47:13,839
interested in sort of helping out with

1388
00:47:13,839 --> 00:47:15,760
or contributing or sharing ideas about

1389
00:47:15,760 --> 00:47:18,079
uh feel free to reach out at otm

1390
00:47:18,079 --> 00:47:20,640
areasrisk.com and otherwise i think

1391
00:47:20,640 --> 00:47:24,118
thank you very much

