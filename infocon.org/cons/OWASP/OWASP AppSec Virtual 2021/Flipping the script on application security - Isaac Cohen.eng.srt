1
00:00:01,420 --> 00:00:05,120
[Music]

2
00:00:05,120 --> 00:00:06,720
thank you so much so excited to be

3
00:00:06,720 --> 00:00:09,440
presenting today um so so just from an

4
00:00:09,440 --> 00:00:10,800
agenda perspective we're going to start

5
00:00:10,800 --> 00:00:12,639
with the state of application security

6
00:00:12,639 --> 00:00:14,240
today we'll go through some of the

7
00:00:14,240 --> 00:00:16,880
challenges that we see in github

8
00:00:16,880 --> 00:00:18,560
to improving the state of application

9
00:00:18,560 --> 00:00:20,800
security day and then we'll start to

10
00:00:20,800 --> 00:00:22,800
talk about what it actually means to be

11
00:00:22,800 --> 00:00:23,439
a

12
00:00:23,439 --> 00:00:26,000
developer for first or to take a

13
00:00:26,000 --> 00:00:28,160
developer first approach

14
00:00:28,160 --> 00:00:29,519
i look forward to all of your questions

15
00:00:29,519 --> 00:00:31,599
at the end so feel free to definitely

16
00:00:31,599 --> 00:00:33,440
submit them now

17
00:00:33,440 --> 00:00:35,520
so the state of application security

18
00:00:35,520 --> 00:00:37,360
today

19
00:00:37,360 --> 00:00:39,440
well we all want to shift security lab

20
00:00:39,440 --> 00:00:40,640
right like we've been talking about

21
00:00:40,640 --> 00:00:42,399
shifting security left for a while it

22
00:00:42,399 --> 00:00:45,600
actually it makes a lot of sense right

23
00:00:45,600 --> 00:00:48,000
um nobody wants to find vulnerabilities

24
00:00:48,000 --> 00:00:51,120
late in the cycle it costs a lot it's a

25
00:00:51,120 --> 00:00:53,520
very painful for developers

26
00:00:53,520 --> 00:00:55,840
you then have to context switch back to

27
00:00:55,840 --> 00:00:57,680
this problem that you may have looked at

28
00:00:57,680 --> 00:00:59,520
this code that you may have looked at

29
00:00:59,520 --> 00:01:01,600
six months ago of course we never want

30
00:01:01,600 --> 00:01:02,960
to get into a breach we know how

31
00:01:02,960 --> 00:01:04,239
expensive that is

32
00:01:04,239 --> 00:01:06,000
the average one being 3.9 million

33
00:01:06,000 --> 00:01:07,200
dollars

34
00:01:07,200 --> 00:01:08,560
so it makes sense right like we want to

35
00:01:08,560 --> 00:01:10,720
move things earlier we want to catch

36
00:01:10,720 --> 00:01:12,720
vulnerabilities earlier in the life

37
00:01:12,720 --> 00:01:15,119
cycle um ideally in development right

38
00:01:15,119 --> 00:01:16,560
that's the cheapest it's at least

39
00:01:16,560 --> 00:01:18,640
painful

40
00:01:18,640 --> 00:01:20,479
but the reality is we've actually been

41
00:01:20,479 --> 00:01:22,560
trying to shift left for at least a

42
00:01:22,560 --> 00:01:23,680
decade

43
00:01:23,680 --> 00:01:24,799
we look at this picture this is a

44
00:01:24,799 --> 00:01:26,880
picture from the ibm security systems

45
00:01:26,880 --> 00:01:29,119
report this is back in 2012

46
00:01:29,119 --> 00:01:31,119
and what you notice is that the numbers

47
00:01:31,119 --> 00:01:33,680
the the the visualization it's really

48
00:01:33,680 --> 00:01:35,840
the same thing that we're talking about

49
00:01:35,840 --> 00:01:37,600
in that updated

50
00:01:37,600 --> 00:01:39,840
visualization that i just showed you so

51
00:01:39,840 --> 00:01:42,240
we've been talking about shifting left

52
00:01:42,240 --> 00:01:44,640
for at least the last decade

53
00:01:44,640 --> 00:01:46,960
at least the last decade

54
00:01:46,960 --> 00:01:49,520
we're also introducing vulnerabilities

55
00:01:49,520 --> 00:01:51,360
at the same rate so this is this is

56
00:01:51,360 --> 00:01:53,680
super enlightening for me

57
00:01:53,680 --> 00:01:56,560
so the github data science team analyzed

58
00:01:56,560 --> 00:01:59,439
70 million lines of open source code

59
00:01:59,439 --> 00:02:01,280
you could think about this like linux

60
00:02:01,280 --> 00:02:04,240
kernel or kubernetes or ruby on rails

61
00:02:04,240 --> 00:02:06,799
and what we noticed was that as the

62
00:02:06,799 --> 00:02:09,280
lines of code increases

63
00:02:09,280 --> 00:02:11,200
the amount of security threats also

64
00:02:11,200 --> 00:02:14,400
increase but at a linear rate

65
00:02:14,400 --> 00:02:16,319
what's interesting about this is that

66
00:02:16,319 --> 00:02:19,200
that rate has not changed over the past

67
00:02:19,200 --> 00:02:21,440
six years but we've been talking about

68
00:02:21,440 --> 00:02:23,599
devsecops i actually looked it up the

69
00:02:23,599 --> 00:02:25,040
first time we used that word within

70
00:02:25,040 --> 00:02:27,360
google news was 2015 right so we've been

71
00:02:27,360 --> 00:02:28,879
talking about dev sac house we've been

72
00:02:28,879 --> 00:02:31,040
talking about shift left but we're still

73
00:02:31,040 --> 00:02:32,959
in the same problem

74
00:02:32,959 --> 00:02:35,120
now you may say hey like this is only

75
00:02:35,120 --> 00:02:36,560
for open source

76
00:02:36,560 --> 00:02:39,040
but actually microsoft is the top open

77
00:02:39,040 --> 00:02:41,440
source corporate contributor out there

78
00:02:41,440 --> 00:02:42,959
so the same developers who are

79
00:02:42,959 --> 00:02:44,959
contributing to open source

80
00:02:44,959 --> 00:02:47,280
are also working within our companies

81
00:02:47,280 --> 00:02:48,959
right so we are still introducing

82
00:02:48,959 --> 00:02:51,360
vulnerabilities at the same rate both in

83
00:02:51,360 --> 00:02:53,760
open source as well as with an

84
00:02:53,760 --> 00:02:56,640
enterprise i would argue

85
00:02:56,640 --> 00:02:58,400
so what's the actual challenge right

86
00:02:58,400 --> 00:03:00,879
like what are the challenges to

87
00:03:00,879 --> 00:03:04,400
improving application security today

88
00:03:04,400 --> 00:03:06,640
well we know that security teams are

89
00:03:06,640 --> 00:03:08,560
vastly outnumbered

90
00:03:08,560 --> 00:03:10,319
um right there's about 40 million

91
00:03:10,319 --> 00:03:12,400
professional developers out there

92
00:03:12,400 --> 00:03:14,720
there's only about 70 000 security

93
00:03:14,720 --> 00:03:18,959
researchers well that's 570 to 1.

94
00:03:18,959 --> 00:03:20,879
if we look in an enterprise usually the

95
00:03:20,879 --> 00:03:23,040
number comes out to about 100 developers

96
00:03:23,040 --> 00:03:25,440
to every one security researcher

97
00:03:25,440 --> 00:03:28,400
security teams are vastly outnumbered um

98
00:03:28,400 --> 00:03:30,879
82 percent of security id professionals

99
00:03:30,879 --> 00:03:33,360
say teams are understaffed

100
00:03:33,360 --> 00:03:35,599
um 70 right

101
00:03:35,599 --> 00:03:38,799
there's a cyber security skills shortage

102
00:03:38,799 --> 00:03:40,640
what we see in security today is it's a

103
00:03:40,640 --> 00:03:43,040
zero-sum game but there's just not

104
00:03:43,040 --> 00:03:45,519
enough security researchers

105
00:03:45,519 --> 00:03:47,200
so we need to figure out a way to scale

106
00:03:47,200 --> 00:03:49,200
this right that's obvious rather we need

107
00:03:49,200 --> 00:03:51,040
to we need to figure out some automation

108
00:03:51,040 --> 00:03:53,120
over here because if we don't like they

109
00:03:53,120 --> 00:03:55,200
are just vastly outnumbered for the

110
00:03:55,200 --> 00:03:57,200
amount of developers that there are out

111
00:03:57,200 --> 00:03:59,280
there

112
00:03:59,280 --> 00:04:00,959
the other big problem that we have the

113
00:04:00,959 --> 00:04:03,519
other big challenge that we have is that

114
00:04:03,519 --> 00:04:06,159
securing first part first party software

115
00:04:06,159 --> 00:04:08,319
is really just the beginning

116
00:04:08,319 --> 00:04:10,159
right like this to me this is actually

117
00:04:10,159 --> 00:04:12,879
even conservative right 30 of your first

118
00:04:12,879 --> 00:04:14,959
party of your application is first party

119
00:04:14,959 --> 00:04:15,760
code

120
00:04:15,760 --> 00:04:17,279
about 70

121
00:04:17,279 --> 00:04:19,680
is open source code right so so

122
00:04:19,680 --> 00:04:21,120
essentially what you're doing is you're

123
00:04:21,120 --> 00:04:23,360
giving production access

124
00:04:23,360 --> 00:04:25,440
to anybody to any of the open source

125
00:04:25,440 --> 00:04:27,199
developers that may not even know what

126
00:04:27,199 --> 00:04:29,280
your application is

127
00:04:29,280 --> 00:04:31,199
but this traditionally has not been

128
00:04:31,199 --> 00:04:35,919
covered by any dedicated security team

129
00:04:36,639 --> 00:04:38,320
the the last big challenge that i want

130
00:04:38,320 --> 00:04:40,840
to hit on is that

131
00:04:40,840 --> 00:04:43,360
security for for the most part just

132
00:04:43,360 --> 00:04:46,160
isn't part of the developer workflow you

133
00:04:46,160 --> 00:04:48,560
can see this study over here of sas

134
00:04:48,560 --> 00:04:50,560
scans per year

135
00:04:50,560 --> 00:04:52,400
we actually see how

136
00:04:52,400 --> 00:04:55,360
the vast majority of companies are still

137
00:04:55,360 --> 00:04:56,800
only running sas

138
00:04:56,800 --> 00:05:00,880
between one and six times per year

139
00:05:00,880 --> 00:05:04,880
it's it's actually under 10 of companies

140
00:05:04,880 --> 00:05:07,199
are actually running this

141
00:05:07,199 --> 00:05:10,400
more than once a week or running static

142
00:05:10,400 --> 00:05:12,400
analysis more than once a week

143
00:05:12,400 --> 00:05:14,720
right so security just isn't part of the

144
00:05:14,720 --> 00:05:17,360
developer workflow we know this already

145
00:05:17,360 --> 00:05:19,039
um it's just not part of the developer

146
00:05:19,039 --> 00:05:20,560
workflow so we need to start to think

147
00:05:20,560 --> 00:05:22,080
about how

148
00:05:22,080 --> 00:05:24,400
how we change that even with this shift

149
00:05:24,400 --> 00:05:25,600
left that we've been talking about for

150
00:05:25,600 --> 00:05:28,160
so long

151
00:05:28,560 --> 00:05:30,560
you know what's interesting i i ran a

152
00:05:30,560 --> 00:05:33,120
poll about six months ago this was with

153
00:05:33,120 --> 00:05:35,759
it was it was in an informal poll it was

154
00:05:35,759 --> 00:05:37,600
with 100 enterprise class the reason i

155
00:05:37,600 --> 00:05:38,720
asked them

156
00:05:38,720 --> 00:05:41,759
how integrated are your sas practices

157
00:05:41,759 --> 00:05:42,880
and so there was a couple of different

158
00:05:42,880 --> 00:05:44,880
levels level one no sas by the way

159
00:05:44,880 --> 00:05:46,720
shocking how many people were not

160
00:05:46,720 --> 00:05:50,160
running sas uh period the level two was

161
00:05:50,160 --> 00:05:52,000
running stats periodically level three

162
00:05:52,000 --> 00:05:54,080
integrated sas that's part of your ci

163
00:05:54,080 --> 00:05:55,840
now you would think

164
00:05:55,840 --> 00:05:57,840
that integrated sas this part of ci

165
00:05:57,840 --> 00:06:00,080
great right like we've shifted left

166
00:06:00,080 --> 00:06:02,880
but i had a fourth choice over here

167
00:06:02,880 --> 00:06:04,800
and that was developers actually trust

168
00:06:04,800 --> 00:06:06,960
the automated sas results

169
00:06:06,960 --> 00:06:09,039
and a mere five percent said that their

170
00:06:09,039 --> 00:06:10,800
developers actually trust the automated

171
00:06:10,800 --> 00:06:12,720
sas results

172
00:06:12,720 --> 00:06:16,000
what that means is to me is that we

173
00:06:16,000 --> 00:06:17,759
can't just take the same traditional

174
00:06:17,759 --> 00:06:19,199
tools that we've been using that have

175
00:06:19,199 --> 00:06:21,199
not been designed for developers that

176
00:06:21,199 --> 00:06:22,160
have been

177
00:06:22,160 --> 00:06:24,720
designed for security professionals

178
00:06:24,720 --> 00:06:26,960
we can't take those same tools and just

179
00:06:26,960 --> 00:06:28,880
expect that to plug them in in the

180
00:06:28,880 --> 00:06:31,520
developer life cycle earlier on

181
00:06:31,520 --> 00:06:34,240
lifecycle and just expect them to work

182
00:06:34,240 --> 00:06:36,560
right we need to start designing for

183
00:06:36,560 --> 00:06:38,400
developers this is why we have such a

184
00:06:38,400 --> 00:06:40,000
low

185
00:06:40,000 --> 00:06:41,840
percentage where developers actually

186
00:06:41,840 --> 00:06:44,400
trust these results

187
00:06:44,400 --> 00:06:46,080
before i go on

188
00:06:46,080 --> 00:06:47,840
i would like to talk about this painting

189
00:06:47,840 --> 00:06:49,440
for a second

190
00:06:49,440 --> 00:06:52,240
um and i'll make a comparison from it

191
00:06:52,240 --> 00:06:53,520
so in the middle

192
00:06:53,520 --> 00:06:56,000
uh this is actually a painting of of

193
00:06:56,000 --> 00:06:59,360
surgery happening in the late 1800s in

194
00:06:59,360 --> 00:07:02,160
the middle is joseph lister joseph

195
00:07:02,160 --> 00:07:03,840
lister is considered

196
00:07:03,840 --> 00:07:06,240
by many the the father of modern day

197
00:07:06,240 --> 00:07:07,520
surgery

198
00:07:07,520 --> 00:07:09,039
and there are two technological

199
00:07:09,039 --> 00:07:11,759
innovations in the 1800s that occur

200
00:07:11,759 --> 00:07:13,520
on the left-hand side is an

201
00:07:13,520 --> 00:07:15,360
anesthesiologist

202
00:07:15,360 --> 00:07:17,280
that anesthesiologist is putting the

203
00:07:17,280 --> 00:07:20,880
patient uh under is making that patient

204
00:07:20,880 --> 00:07:23,360
unconscious you have to remember back in

205
00:07:23,360 --> 00:07:25,759
those days surgery was an agonizing

206
00:07:25,759 --> 00:07:28,400
experience the surgeon had to make cuts

207
00:07:28,400 --> 00:07:31,360
and tears while the patient was normally

208
00:07:31,360 --> 00:07:33,599
up and awakened and this made the entire

209
00:07:33,599 --> 00:07:35,759
surgery very very complicated

210
00:07:35,759 --> 00:07:38,720
so that's an innovation the anesthesia

211
00:07:38,720 --> 00:07:42,080
and on the right hand side

212
00:07:42,080 --> 00:07:45,199
is a gentleman spraying an antiseptic

213
00:07:45,199 --> 00:07:48,000
spray actually known as carbolic acid

214
00:07:48,000 --> 00:07:49,360
and what that does is that prevents

215
00:07:49,360 --> 00:07:53,120
germs from entering into the body um pre

216
00:07:53,120 --> 00:07:56,080
that previous carbolic acid actually

217
00:07:56,080 --> 00:07:58,639
50 of people going to surgery died from

218
00:07:58,639 --> 00:08:01,120
sepsis so these are two

219
00:08:01,120 --> 00:08:02,879
major innovations

220
00:08:02,879 --> 00:08:05,919
in surgery but they took actually very

221
00:08:05,919 --> 00:08:07,039
different

222
00:08:07,039 --> 00:08:09,840
divergent paths towards adoption let's

223
00:08:09,840 --> 00:08:12,000
actually explore that so anesthetics

224
00:08:12,000 --> 00:08:14,080
anesthetics was first discovered in in

225
00:08:14,080 --> 00:08:15,759
1846

226
00:08:15,759 --> 00:08:17,919
um this gentleman named william warren

227
00:08:17,919 --> 00:08:20,879
brought to henry j bigelow

228
00:08:20,879 --> 00:08:23,199
said i can change surgery

229
00:08:23,199 --> 00:08:24,840
i can operate on people that are

230
00:08:24,840 --> 00:08:27,360
unconscious so they took this too they

231
00:08:27,360 --> 00:08:29,039
tried it out at work they took this to a

232
00:08:29,039 --> 00:08:31,360
couple of other folks within one year

233
00:08:31,360 --> 00:08:33,200
this is this is used right this is used

234
00:08:33,200 --> 00:08:34,799
worldwide within a year it's absolutely

235
00:08:34,799 --> 00:08:37,360
ubiquitous within seven years

236
00:08:37,360 --> 00:08:39,360
right anesthesia just takes off like

237
00:08:39,360 --> 00:08:40,799
that and you think about it from a

238
00:08:40,799 --> 00:08:43,360
surgeon's perspective why wouldn't it

239
00:08:43,360 --> 00:08:45,200
right like this is amazing we can

240
00:08:45,200 --> 00:08:47,920
actually make tears and cuts without the

241
00:08:47,920 --> 00:08:49,360
person in

242
00:08:49,360 --> 00:08:50,880
writhing agony

243
00:08:50,880 --> 00:08:53,519
um and and we can get better results as

244
00:08:53,519 --> 00:08:55,120
well

245
00:08:55,120 --> 00:08:57,519
well antiseptics took so takes a

246
00:08:57,519 --> 00:08:59,040
completely different adoption path so

247
00:08:59,040 --> 00:09:01,600
this is first discovered in 1865 by

248
00:09:01,600 --> 00:09:03,200
joseph lister

249
00:09:03,200 --> 00:09:04,640
um

250
00:09:04,640 --> 00:09:06,640
he's operating on a seven-year-old child

251
00:09:06,640 --> 00:09:08,640
with a fractured leg

252
00:09:08,640 --> 00:09:10,160
realizes that there's this thing called

253
00:09:10,160 --> 00:09:11,760
carbolic acid

254
00:09:11,760 --> 00:09:13,760
that reduces the smell of sewage so

255
00:09:13,760 --> 00:09:15,600
wanted to try this out like what if we

256
00:09:15,600 --> 00:09:18,320
try carbolic acid to prevent the sewage

257
00:09:18,320 --> 00:09:20,720
from entering my body to ferment that

258
00:09:20,720 --> 00:09:22,399
patient's body

259
00:09:22,399 --> 00:09:25,040
so tries it out works and then starts to

260
00:09:25,040 --> 00:09:27,440
do studies study after study confirms

261
00:09:27,440 --> 00:09:30,240
that the rate of surgery is highly much

262
00:09:30,240 --> 00:09:34,880
more successful when using carbolic acid

263
00:09:34,880 --> 00:09:36,320
this evening gets published into the

264
00:09:36,320 --> 00:09:38,080
landsat the lancet is one of the most

265
00:09:38,080 --> 00:09:39,200
premier

266
00:09:39,200 --> 00:09:41,920
uh medical journals even to this day

267
00:09:41,920 --> 00:09:43,440
but what's interesting is that it ends

268
00:09:43,440 --> 00:09:45,680
up being highly divisive people do not

269
00:09:45,680 --> 00:09:47,760
want to use anti-semitism they don't

270
00:09:47,760 --> 00:09:49,120
want to use

271
00:09:49,120 --> 00:09:51,839
carbolic acid and the main reason why is

272
00:09:51,839 --> 00:09:53,920
it actually hurts the surgeon's eyes it

273
00:09:53,920 --> 00:09:55,920
burns their fingers

274
00:09:55,920 --> 00:09:58,160
it's painful for the surgeon even though

275
00:09:58,160 --> 00:10:00,000
it comes out with even though there are

276
00:10:00,000 --> 00:10:02,160
better rates of success

277
00:10:02,160 --> 00:10:04,720
it's very painful for the surgeon

278
00:10:04,720 --> 00:10:06,240
the surgeon doesn't want to deal with it

279
00:10:06,240 --> 00:10:08,560
so of course half-heartedly this gets

280
00:10:08,560 --> 00:10:11,360
adopted by the mid-1880s right this ends

281
00:10:11,360 --> 00:10:14,160
up becoming ubiquitous in the 1900s but

282
00:10:14,160 --> 00:10:16,320
it takes a good 40 50 years in order for

283
00:10:16,320 --> 00:10:17,680
that to go through

284
00:10:17,680 --> 00:10:20,079
why did these two technologies take such

285
00:10:20,079 --> 00:10:22,640
different paths

286
00:10:22,640 --> 00:10:23,760
this is of course considered the

287
00:10:23,760 --> 00:10:25,680
foundation of modern surgery i want to

288
00:10:25,680 --> 00:10:28,000
make a comparison over here

289
00:10:28,000 --> 00:10:30,160
anesthetics is like devops

290
00:10:30,160 --> 00:10:32,560
it just made sense right it made the

291
00:10:32,560 --> 00:10:34,399
lives of the developers easier who

292
00:10:34,399 --> 00:10:36,720
doesn't want to ship security fast who

293
00:10:36,720 --> 00:10:38,399
doesn't want to ship software faster

294
00:10:38,399 --> 00:10:40,640
with less bugs so devops was actually

295
00:10:40,640 --> 00:10:42,880
adopted by choice

296
00:10:42,880 --> 00:10:45,040
but security on the other hand it still

297
00:10:45,040 --> 00:10:46,800
feels like we are

298
00:10:46,800 --> 00:10:48,880
like we are spraying carbonic acid on

299
00:10:48,880 --> 00:10:51,279
our developers it hurts it's painful it

300
00:10:51,279 --> 00:10:52,399
works

301
00:10:52,399 --> 00:10:54,480
but it's still painful

302
00:10:54,480 --> 00:10:56,399
so what if we shifted the mindset like

303
00:10:56,399 --> 00:10:58,320
what if we started to do things in a

304
00:10:58,320 --> 00:11:00,399
developer first manner

305
00:11:00,399 --> 00:11:02,800
so we at github started to do this

306
00:11:02,800 --> 00:11:04,079
um we actually

307
00:11:04,079 --> 00:11:06,480
our investment into security feedback

308
00:11:06,480 --> 00:11:08,800
probably four years ago at this point

309
00:11:08,800 --> 00:11:10,399
where we started to

310
00:11:10,399 --> 00:11:11,360
um

311
00:11:11,360 --> 00:11:12,800
we started to

312
00:11:12,800 --> 00:11:15,200
send out vulnerability alerts

313
00:11:15,200 --> 00:11:16,800
for any open source dependencies that

314
00:11:16,800 --> 00:11:18,560
you may have that you may be using to

315
00:11:18,560 --> 00:11:20,959
have a vulnerability associated with

316
00:11:20,959 --> 00:11:22,000
them

317
00:11:22,000 --> 00:11:23,519
i mean we thought this was amazing this

318
00:11:23,519 --> 00:11:24,800
was we thought this was a game changer

319
00:11:24,800 --> 00:11:25,760
right you don't have to run any

320
00:11:25,760 --> 00:11:27,920
additional tools you just check into

321
00:11:27,920 --> 00:11:29,839
your github repo and we will

322
00:11:29,839 --> 00:11:31,920
automatically alert you

323
00:11:31,920 --> 00:11:33,680
what we found though was that developers

324
00:11:33,680 --> 00:11:35,680
did not like this solution they got too

325
00:11:35,680 --> 00:11:37,600
many notifications they were bombarded

326
00:11:37,600 --> 00:11:40,079
by information we were focusing on

327
00:11:40,079 --> 00:11:42,800
problems not solutions and so we we

328
00:11:42,800 --> 00:11:44,480
changed a little bit we started to get a

329
00:11:44,480 --> 00:11:46,720
little more developer focused over here

330
00:11:46,720 --> 00:11:48,000
and we shipped what's known as the

331
00:11:48,000 --> 00:11:49,120
pandabot

332
00:11:49,120 --> 00:11:51,920
which opens up a pull request for the

333
00:11:51,920 --> 00:11:53,120
developer

334
00:11:53,120 --> 00:11:55,200
right this actually changes actually

335
00:11:55,200 --> 00:11:57,920
bumps up a dependency version to a

336
00:11:57,920 --> 00:12:00,000
non-vulnerable version

337
00:12:00,000 --> 00:12:02,480
it automatically it all it already

338
00:12:02,480 --> 00:12:04,240
solves the issue all the developer now

339
00:12:04,240 --> 00:12:06,720
has to do is click the merge button

340
00:12:06,720 --> 00:12:08,959
and what we saw was truly amazing

341
00:12:08,959 --> 00:12:11,839
developers were fixing

342
00:12:11,839 --> 00:12:14,800
uh open source dependency issues twice

343
00:12:14,800 --> 00:12:17,519
as fast when using dependable as opposed

344
00:12:17,519 --> 00:12:19,440
to not using the python

345
00:12:19,440 --> 00:12:21,440
and so this is what we start to say

346
00:12:21,440 --> 00:12:23,920
we're shifting the way we are

347
00:12:23,920 --> 00:12:26,160
being a developer requires that mindset

348
00:12:26,160 --> 00:12:28,800
shift right beforehand we were outside

349
00:12:28,800 --> 00:12:31,120
of the developer workflow we're now at

350
00:12:31,120 --> 00:12:32,720
the heart of the developer workflow

351
00:12:32,720 --> 00:12:35,279
we're focusing on a solution or actually

352
00:12:35,279 --> 00:12:37,360
automating the entire journey in order

353
00:12:37,360 --> 00:12:38,480
to

354
00:12:38,480 --> 00:12:40,480
fix that result in order to fix that

355
00:12:40,480 --> 00:12:42,480
vulnerability that's what developer

356
00:12:42,480 --> 00:12:43,920
first means

357
00:12:43,920 --> 00:12:45,519
so let's think about this like what does

358
00:12:45,519 --> 00:12:47,839
this mean actually in other domains as

359
00:12:47,839 --> 00:12:50,240
well like credential scanning

360
00:12:50,240 --> 00:12:52,079
so the interesting thing at

361
00:12:52,079 --> 00:12:54,079
github we've actually been doing secret

362
00:12:54,079 --> 00:12:56,639
scanning for a good amount of time um if

363
00:12:56,639 --> 00:12:59,600
you submit a if you put a github

364
00:12:59,600 --> 00:13:02,000
personal access token into a github

365
00:13:02,000 --> 00:13:03,360
public repository we'll actually

366
00:13:03,360 --> 00:13:04,880
invalidate that immediately there's

367
00:13:04,880 --> 00:13:07,760
really not much risk in doing so um the

368
00:13:07,760 --> 00:13:10,000
thing with credentials is it's extremely

369
00:13:10,000 --> 00:13:11,040
common

370
00:13:11,040 --> 00:13:11,839
to

371
00:13:11,839 --> 00:13:14,639
to to put a a secret or a token into a

372
00:13:14,639 --> 00:13:16,959
repo i've done it personally myself as a

373
00:13:16,959 --> 00:13:19,920
developer um it just happens right so

374
00:13:19,920 --> 00:13:22,000
this is extremely common it's extremely

375
00:13:22,000 --> 00:13:23,279
damaging

376
00:13:23,279 --> 00:13:25,839
because once that is out there everybody

377
00:13:25,839 --> 00:13:28,560
who views that repository now has

378
00:13:28,560 --> 00:13:30,720
elevated permissions to whatever that

379
00:13:30,720 --> 00:13:32,959
token is associated with

380
00:13:32,959 --> 00:13:34,800
um and it's actually really easy to

381
00:13:34,800 --> 00:13:37,519
detect right like like it's just a

382
00:13:37,519 --> 00:13:39,360
couple of reg x's with a little

383
00:13:39,360 --> 00:13:41,680
post-processing

384
00:13:41,680 --> 00:13:44,240
so the big question is like

385
00:13:44,240 --> 00:13:46,240
we sort of go through these remediation

386
00:13:46,240 --> 00:13:48,480
workflows what if we start to prevent

387
00:13:48,480 --> 00:13:50,079
secrets from ever making it into your

388
00:13:50,079 --> 00:13:52,079
repository from ever making it into

389
00:13:52,079 --> 00:13:54,000
github this is actually the perfect

390
00:13:54,000 --> 00:13:55,920
candidate to shift left to put it into a

391
00:13:55,920 --> 00:13:57,839
pre receive hub

392
00:13:57,839 --> 00:13:59,360
but what's the problem with that the

393
00:13:59,360 --> 00:14:00,560
problem

394
00:14:00,560 --> 00:14:03,040
is false positives developers are now

395
00:14:03,040 --> 00:14:05,120
responsible for triaging those findings

396
00:14:05,120 --> 00:14:07,120
this is why developers hate it

397
00:14:07,120 --> 00:14:09,760
um there tends to be a lot of noisy

398
00:14:09,760 --> 00:14:12,880
patterns um actually microsoft rolled

399
00:14:12,880 --> 00:14:15,360
their own secret scanning and what they

400
00:14:15,360 --> 00:14:17,440
found was there was a 50

401
00:14:17,440 --> 00:14:19,519
false positive rate that's a huge false

402
00:14:19,519 --> 00:14:21,760
positive rate imagine as a developer you

403
00:14:21,760 --> 00:14:23,360
just want to check in your code at 5 pm

404
00:14:23,360 --> 00:14:24,320
and go

405
00:14:24,320 --> 00:14:26,720
you know and get out of the office but

406
00:14:26,720 --> 00:14:29,279
but you're now being blocked by a false

407
00:14:29,279 --> 00:14:30,720
positive and now you have to figure out

408
00:14:30,720 --> 00:14:33,360
how to how to navigate around this

409
00:14:33,360 --> 00:14:36,079
so false positive is is is is really

410
00:14:36,079 --> 00:14:38,639
tough to deal with and so what we found

411
00:14:38,639 --> 00:14:41,040
was that this these solutions end up

412
00:14:41,040 --> 00:14:43,760
being rejected by developers

413
00:14:43,760 --> 00:14:45,680
well what if we start to design for

414
00:14:45,680 --> 00:14:47,279
developers right like what if we start

415
00:14:47,279 --> 00:14:48,959
to design around the developer

416
00:14:48,959 --> 00:14:50,240
experience

417
00:14:50,240 --> 00:14:51,600
well firstly we're going to need a

418
00:14:51,600 --> 00:14:53,440
better triage experience we need to make

419
00:14:53,440 --> 00:14:55,839
it as easy as possible for the for a

420
00:14:55,839 --> 00:14:58,000
developer to override when there is a

421
00:14:58,000 --> 00:14:59,360
false positive

422
00:14:59,360 --> 00:15:01,440
um maybe we don't prevent all those

423
00:15:01,440 --> 00:15:04,079
secrets from entering for um maybe we

424
00:15:04,079 --> 00:15:06,240
don't prevent all of the secrets in a

425
00:15:06,240 --> 00:15:08,000
pre-received hook maybe the ones with a

426
00:15:08,000 --> 00:15:09,920
false positive right we actually just go

427
00:15:09,920 --> 00:15:11,360
through the remediation workflow and

428
00:15:11,360 --> 00:15:13,519
allow that to pass that way developers

429
00:15:13,519 --> 00:15:15,199
don't get frustrated

430
00:15:15,199 --> 00:15:16,880
um you know the other thing that we're

431
00:15:16,880 --> 00:15:19,040
thinking about is

432
00:15:19,040 --> 00:15:21,839
why not just just scan that while you're

433
00:15:21,839 --> 00:15:23,120
coding as well

434
00:15:23,120 --> 00:15:24,839
the thing that github right now is doing

435
00:15:24,839 --> 00:15:28,320
also is we're looking at the industry to

436
00:15:28,320 --> 00:15:30,560
push our partners to actually reduce the

437
00:15:30,560 --> 00:15:32,480
amount of false positives that they are

438
00:15:32,480 --> 00:15:35,279
out there if the tokens are are more

439
00:15:35,279 --> 00:15:36,320
visible

440
00:15:36,320 --> 00:15:38,320
to us right like they have a check digit

441
00:15:38,320 --> 00:15:39,440
so we can

442
00:15:39,440 --> 00:15:41,040
mathematically figure out if this is a

443
00:15:41,040 --> 00:15:42,720
valid token that will then reduce the

444
00:15:42,720 --> 00:15:45,279
false positive rate as well and so this

445
00:15:45,279 --> 00:15:46,720
is what what i'm talking about like

446
00:15:46,720 --> 00:15:48,240
designing around the developer

447
00:15:48,240 --> 00:15:49,600
experience

448
00:15:49,600 --> 00:15:51,120
i'm going to go through one more worked

449
00:15:51,120 --> 00:15:53,680
example which is developer first static

450
00:15:53,680 --> 00:15:56,160
analysis right we saw what we saw that

451
00:15:56,160 --> 00:15:58,480
static analysis is not integrated as

452
00:15:58,480 --> 00:16:01,199
part of the developer ecosystem

453
00:16:01,199 --> 00:16:02,800
well the state of static analysis

454
00:16:02,800 --> 00:16:05,360
firstly there's thousands of results

455
00:16:05,360 --> 00:16:08,000
this is great for a security engineer

456
00:16:08,000 --> 00:16:10,160
this is terrible for a developer for a

457
00:16:10,160 --> 00:16:12,000
security engineer you just triage

458
00:16:12,000 --> 00:16:13,680
everything and you figure what what's

459
00:16:13,680 --> 00:16:16,399
valid what's not for developer there's

460
00:16:16,399 --> 00:16:18,480
too much noise they end up rejecting the

461
00:16:18,480 --> 00:16:20,079
entire solution

462
00:16:20,079 --> 00:16:20,839
um

463
00:16:20,839 --> 00:16:24,320
we this is actually why

464
00:16:24,320 --> 00:16:25,759
also right like

465
00:16:25,759 --> 00:16:27,440
static analysis in general is part of a

466
00:16:27,440 --> 00:16:28,720
separate portal not part of the

467
00:16:28,720 --> 00:16:31,199
developer workflow this is why so few

468
00:16:31,199 --> 00:16:33,519
teams actually are adopting static

469
00:16:33,519 --> 00:16:36,560
analysis within the developer workflow

470
00:16:36,560 --> 00:16:38,800
so what if we started to

471
00:16:38,800 --> 00:16:41,040
to design for the developer

472
00:16:41,040 --> 00:16:42,480
well firstly we believe that it should

473
00:16:42,480 --> 00:16:44,560
happen at code review time

474
00:16:44,560 --> 00:16:46,800
we believe that it should feel like a

475
00:16:46,800 --> 00:16:49,680
security expert is reviewing your code

476
00:16:49,680 --> 00:16:51,680
and giving you meaningful and real

477
00:16:51,680 --> 00:16:53,360
results

478
00:16:53,360 --> 00:16:55,120
we also believe that it should produce

479
00:16:55,120 --> 00:16:57,839
accurate and relevant results our goal

480
00:16:57,839 --> 00:16:59,839
we're not there yet but our goal is to

481
00:16:59,839 --> 00:17:01,920
get a 90 fixed work that's what that's

482
00:17:01,920 --> 00:17:04,000
what we believe is is the bar that's

483
00:17:04,000 --> 00:17:06,319
what makes sense to us 90 percent

484
00:17:06,319 --> 00:17:07,439
victory

485
00:17:07,439 --> 00:17:09,359
also a great experience

486
00:17:09,359 --> 00:17:11,439
it should include suggestions hey maybe

487
00:17:11,439 --> 00:17:13,359
do this and that and that will actually

488
00:17:13,359 --> 00:17:15,679
fix your issue right again like part and

489
00:17:15,679 --> 00:17:16,880
parcel

490
00:17:16,880 --> 00:17:19,599
integrated in as part of

491
00:17:19,599 --> 00:17:22,559
of github as part of the developer tools

492
00:17:22,559 --> 00:17:25,280
and also this one's a little bit subtle

493
00:17:25,280 --> 00:17:27,760
it should aggregate the world's security

494
00:17:27,760 --> 00:17:30,000
efforts right there shouldn't just be

495
00:17:30,000 --> 00:17:31,039
one

496
00:17:31,039 --> 00:17:33,919
one one team or

497
00:17:33,919 --> 00:17:36,080
or one company

498
00:17:36,080 --> 00:17:38,480
doing security we should start to get

499
00:17:38,480 --> 00:17:40,880
the the expertise of those 70 000

500
00:17:40,880 --> 00:17:43,120
security researchers all around the

501
00:17:43,120 --> 00:17:44,000
world

502
00:17:44,000 --> 00:17:45,520
well this is what we're building right

503
00:17:45,520 --> 00:17:47,520
like we are building this

504
00:17:47,520 --> 00:17:49,600
um we started off with with code

505
00:17:49,600 --> 00:17:50,720
scanning

506
00:17:50,720 --> 00:17:52,559
where we're taking a technology of sas

507
00:17:52,559 --> 00:17:54,160
technology known as koko we're

508
00:17:54,160 --> 00:17:56,559
integrating it deep into the developer

509
00:17:56,559 --> 00:17:58,480
workflow on the right hand side you can

510
00:17:58,480 --> 00:18:00,000
see a picture of github now there's just

511
00:18:00,000 --> 00:18:02,640
another security tab this is part and

512
00:18:02,640 --> 00:18:05,520
parcel as part of the developer workflow

513
00:18:05,520 --> 00:18:07,120
we're not giving you thousands of

514
00:18:07,120 --> 00:18:08,799
results but we're going to give you real

515
00:18:08,799 --> 00:18:11,520
results on that you can actually fix

516
00:18:11,520 --> 00:18:13,919
there's secret scanning as well which

517
00:18:13,919 --> 00:18:16,160
looks for private which looks for any

518
00:18:16,160 --> 00:18:17,600
secrets within those private

519
00:18:17,600 --> 00:18:20,960
repositories um again like we're getting

520
00:18:20,960 --> 00:18:22,559
we're marching our way up to

521
00:18:22,559 --> 00:18:25,120
preventative workflows but this is where

522
00:18:25,120 --> 00:18:27,039
we started it's truly amazing you just

523
00:18:27,039 --> 00:18:28,720
click the button and you're done and

524
00:18:28,720 --> 00:18:30,160
then finally that was depend about

525
00:18:30,160 --> 00:18:31,600
security updates where we're actually

526
00:18:31,600 --> 00:18:33,840
updating the repo we're actually opening

527
00:18:33,840 --> 00:18:36,640
up um pull requests for you whenever an

528
00:18:36,640 --> 00:18:39,520
open source dependency is found

529
00:18:39,520 --> 00:18:41,120
um you can check this out right

530
00:18:41,120 --> 00:18:43,120
ghetto.com features

531
00:18:43,120 --> 00:18:45,120
security that will give you full details

532
00:18:45,120 --> 00:18:45,919
of

533
00:18:45,919 --> 00:18:47,520
what we've been working on and where

534
00:18:47,520 --> 00:18:50,640
we're going we're very excited about it

535
00:18:50,640 --> 00:18:53,120
one closing thought before we open it up

536
00:18:53,120 --> 00:18:55,200
to questions

537
00:18:55,200 --> 00:18:57,520
if we build for developers we can shift

538
00:18:57,520 --> 00:18:59,840
left right this has been the issue in

539
00:18:59,840 --> 00:19:01,919
the industry is that we haven't designed

540
00:19:01,919 --> 00:19:04,559
for developers and so i truly believe if

541
00:19:04,559 --> 00:19:06,160
we start to actually build for the

542
00:19:06,160 --> 00:19:07,919
developers we can get into the mindset

543
00:19:07,919 --> 00:19:09,360
of developers

544
00:19:09,360 --> 00:19:11,039
we will actually increase that fixed

545
00:19:11,039 --> 00:19:13,200
rate we've been obsessed a lot about

546
00:19:13,200 --> 00:19:14,720
finding vulnerabilities but not about

547
00:19:14,720 --> 00:19:16,880
actually fixing vulnerabilities and

548
00:19:16,880 --> 00:19:18,080
that's something that we've been

549
00:19:18,080 --> 00:19:20,480
focusing on this is trying is really

550
00:19:20,480 --> 00:19:22,080
focusing on how we can actually start to

551
00:19:22,080 --> 00:19:24,080
fix vulnerabilities not just find them

552
00:19:24,080 --> 00:19:25,840
so if we build for developers we can

553
00:19:25,840 --> 00:19:27,039
ship them

554
00:19:27,039 --> 00:19:30,280
thank you

