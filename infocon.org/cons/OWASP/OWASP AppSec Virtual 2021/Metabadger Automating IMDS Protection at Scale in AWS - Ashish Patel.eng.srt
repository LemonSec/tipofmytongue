1
00:00:01,420 --> 00:00:05,630
[Music]

2
00:00:05,759 --> 00:00:08,080
all right

3
00:00:08,960 --> 00:00:10,719
uh thanks everyone for attending my talk

4
00:00:10,719 --> 00:00:13,120
today i'll be talking through

5
00:00:13,120 --> 00:00:14,960
essentially a tool that we built at

6
00:00:14,960 --> 00:00:18,480
salesforce called metabadger and um

7
00:00:18,480 --> 00:00:20,720
essentially helping to automate imds

8
00:00:20,720 --> 00:00:22,720
protection at scale across various

9
00:00:22,720 --> 00:00:24,000
infrastructure

10
00:00:24,000 --> 00:00:27,119
and across your aws accounts

11
00:00:27,119 --> 00:00:29,279
so a little bit about me

12
00:00:29,279 --> 00:00:31,279
currently i'm a security engineer

13
00:00:31,279 --> 00:00:33,200
at salesforce supporting various clouds

14
00:00:33,200 --> 00:00:36,160
as kimberly mentioned um i work on a lot

15
00:00:36,160 --> 00:00:37,680
of different business units and so we

16
00:00:37,680 --> 00:00:40,079
deal with a various amount of problems

17
00:00:40,079 --> 00:00:41,680
amongst these different cloud spaces

18
00:00:41,680 --> 00:00:43,600
right different challenges across them

19
00:00:43,600 --> 00:00:44,399
as well

20
00:00:44,399 --> 00:00:46,000
so it's something that

21
00:00:46,000 --> 00:00:48,079
we kind of constantly have to evolve to

22
00:00:48,079 --> 00:00:49,680
and adapt to right so things are

23
00:00:49,680 --> 00:00:51,520
shifting a lot and changing across the

24
00:00:51,520 --> 00:00:54,239
board i really like automation and

25
00:00:54,239 --> 00:00:56,000
putting in cloud automation where

26
00:00:56,000 --> 00:00:57,440
possible right and leveraging public

27
00:00:57,440 --> 00:00:59,680
cloud service providers to be able to

28
00:00:59,680 --> 00:01:01,359
kind of let a lot of the robots do the

29
00:01:01,359 --> 00:01:03,280
work for you rather than doing manual

30
00:01:03,280 --> 00:01:06,000
work and also kind of reducing that

31
00:01:06,000 --> 00:01:07,840
extra toil or friction that exists out

32
00:01:07,840 --> 00:01:09,600
there i think that's super important in

33
00:01:09,600 --> 00:01:11,360
every security program

34
00:01:11,360 --> 00:01:12,720
it's just something that should

35
00:01:12,720 --> 00:01:14,799
definitely be kind of top priority for

36
00:01:14,799 --> 00:01:16,240
folks

37
00:01:16,240 --> 00:01:19,360
um in general right shifting left and is

38
00:01:19,360 --> 00:01:21,280
one thing in particular that i think is

39
00:01:21,280 --> 00:01:22,880
super kind of

40
00:01:22,880 --> 00:01:25,360
important to me and i think being able

41
00:01:25,360 --> 00:01:27,200
to see where the industry is going and

42
00:01:27,200 --> 00:01:29,520
then put controls in place that actually

43
00:01:29,520 --> 00:01:30,720
prevent things from happening in the

44
00:01:30,720 --> 00:01:32,400
first place is also an area where i'm

45
00:01:32,400 --> 00:01:33,840
super interested in

46
00:01:33,840 --> 00:01:35,119
how do we put more preventative

47
00:01:35,119 --> 00:01:36,799
mechanisms in place

48
00:01:36,799 --> 00:01:39,040
rather than going through and kind of

49
00:01:39,040 --> 00:01:41,520
figuring out um more manual ways of

50
00:01:41,520 --> 00:01:43,200
doing things right and so that's kind of

51
00:01:43,200 --> 00:01:44,720
where a lot of my interest lies

52
00:01:44,720 --> 00:01:46,720
currently and i think that's a super

53
00:01:46,720 --> 00:01:48,640
cool space to be working in

54
00:01:48,640 --> 00:01:49,520
um

55
00:01:49,520 --> 00:01:51,040
and recently i've been

56
00:01:51,040 --> 00:01:52,799
more so involved in building a lot of

57
00:01:52,799 --> 00:01:53,840
tooling

58
00:01:53,840 --> 00:01:56,079
for making different

59
00:01:56,079 --> 00:01:57,840
security infrastructure changes or even

60
00:01:57,840 --> 00:01:59,200
automating things within these

61
00:01:59,200 --> 00:02:00,320
environments

62
00:02:00,320 --> 00:02:02,159
i also think it's super helpful for

63
00:02:02,159 --> 00:02:05,119
enabling engineers to help them and be

64
00:02:05,119 --> 00:02:06,399
able to automate a lot of the work that

65
00:02:06,399 --> 00:02:08,160
they do to you know whether it's for

66
00:02:08,160 --> 00:02:10,318
meeting remediating vulnerabilities or

67
00:02:10,318 --> 00:02:12,160
solving different application security

68
00:02:12,160 --> 00:02:14,239
problems um and to be able to apply that

69
00:02:14,239 --> 00:02:17,120
across the board there

70
00:02:17,599 --> 00:02:19,680
so today you know kind of we're boiling

71
00:02:19,680 --> 00:02:20,959
it down why are we talking about

72
00:02:20,959 --> 00:02:22,959
metadata and what is it about metadata

73
00:02:22,959 --> 00:02:25,599
that essentially gives you you know a

74
00:02:25,599 --> 00:02:26,879
lot of different you know things to

75
00:02:26,879 --> 00:02:28,720
consider as far as what you need to look

76
00:02:28,720 --> 00:02:31,599
at um the service itself uh can give you

77
00:02:31,599 --> 00:02:33,840
access to the user data which an

78
00:02:33,840 --> 00:02:35,519
instance may use and also iem

79
00:02:35,519 --> 00:02:37,200
credentials right so a lot of things

80
00:02:37,200 --> 00:02:39,680
that you do from a fundamental um kind

81
00:02:39,680 --> 00:02:41,440
of standpoint of spinning up an ec2

82
00:02:41,440 --> 00:02:43,280
instance it will usually involve some

83
00:02:43,280 --> 00:02:44,959
kind of iem role to talk to other

84
00:02:44,959 --> 00:02:46,800
resources in your account

85
00:02:46,800 --> 00:02:48,400
and from this point right and the

86
00:02:48,400 --> 00:02:50,160
service that is used for that is the

87
00:02:50,160 --> 00:02:51,840
actual embedded instance metadata

88
00:02:51,840 --> 00:02:55,200
service which is abbreviated as imds um

89
00:02:55,200 --> 00:02:57,760
and the instance role and credentials

90
00:02:57,760 --> 00:02:59,519
and tokens as well will be used

91
00:02:59,519 --> 00:03:01,599
throughout that to be able to kind of

92
00:03:01,599 --> 00:03:03,680
pull data that the instance needs to be

93
00:03:03,680 --> 00:03:05,440
able to talk to the resources as well as

94
00:03:05,440 --> 00:03:08,000
kind of understand what its context is

95
00:03:08,000 --> 00:03:10,000
and some other kind of pieces as part of

96
00:03:10,000 --> 00:03:12,640
this metadata service um

97
00:03:12,640 --> 00:03:14,480
and kind of breaking that down even more

98
00:03:14,480 --> 00:03:16,560
right so why why would an attacker want

99
00:03:16,560 --> 00:03:18,560
to leverage this right simply said right

100
00:03:18,560 --> 00:03:19,840
if you can pull the credentials from the

101
00:03:19,840 --> 00:03:21,840
metadata service then we know that hey

102
00:03:21,840 --> 00:03:24,080
we can now pivot in the environment um

103
00:03:24,080 --> 00:03:27,519
and uh ssrf attacks that are known um

104
00:03:27,519 --> 00:03:29,680
and kind of have been used in the past

105
00:03:29,680 --> 00:03:30,480
right

106
00:03:30,480 --> 00:03:32,959
to exploit this particular vector which

107
00:03:32,959 --> 00:03:34,959
uh definitely you know can do

108
00:03:34,959 --> 00:03:36,480
essentially anything that instance can

109
00:03:36,480 --> 00:03:38,239
do right so if somebody's to leverage

110
00:03:38,239 --> 00:03:40,239
this they can go through take a look at

111
00:03:40,239 --> 00:03:42,080
your environment take a look at what you

112
00:03:42,080 --> 00:03:44,000
this instance can do and potentially

113
00:03:44,000 --> 00:03:46,799
exfol data as well as send it elsewhere

114
00:03:46,799 --> 00:03:49,360
um and so we've seen this on news a lot

115
00:03:49,360 --> 00:03:50,560
of the texts that you've seen in the

116
00:03:50,560 --> 00:03:53,280
news and elsewhere kind of have been

117
00:03:53,280 --> 00:03:55,439
essentially this same vector right that

118
00:03:55,439 --> 00:03:58,080
was used hey you know exfol that

119
00:03:58,080 --> 00:04:01,040
metadata service credential or user data

120
00:04:01,040 --> 00:04:02,640
or whatever it is that's accessible from

121
00:04:02,640 --> 00:04:04,799
that and now exploit that give it to me

122
00:04:04,799 --> 00:04:06,959
and i'm going to go and dump a lot of

123
00:04:06,959 --> 00:04:09,120
stuff out of your aws account which can

124
00:04:09,120 --> 00:04:10,720
be really scary when you think about it

125
00:04:10,720 --> 00:04:11,760
because there's a lot of sensitive

126
00:04:11,760 --> 00:04:13,040
things that live there

127
00:04:13,040 --> 00:04:15,439
um the characters uh right can just

128
00:04:15,439 --> 00:04:17,199
clearly dump the credentials and use

129
00:04:17,199 --> 00:04:19,120
them and so that's one area we're like

130
00:04:19,120 --> 00:04:21,120
hey how do we really mitigate against

131
00:04:21,120 --> 00:04:23,919
this and why what can we do to solve

132
00:04:23,919 --> 00:04:26,479
this particular problem

133
00:04:26,479 --> 00:04:29,919
so just a high level a breakdown of sort

134
00:04:29,919 --> 00:04:32,080
of what this attack chain and flow looks

135
00:04:32,080 --> 00:04:34,960
like is we have a user that's exploiting

136
00:04:34,960 --> 00:04:37,680
an ssrf web app vulnerability uh that

137
00:04:37,680 --> 00:04:40,080
may exist on a web app or some kind of

138
00:04:40,080 --> 00:04:42,720
customer facing or user facing form

139
00:04:42,720 --> 00:04:44,720
right or input field where they're able

140
00:04:44,720 --> 00:04:47,680
to kind of now leverage this and say hey

141
00:04:47,680 --> 00:04:49,360
i'm going to get access to

142
00:04:49,360 --> 00:04:50,960
talk to the instance and talk to what

143
00:04:50,960 --> 00:04:52,320
the instance can do from the metadata

144
00:04:52,320 --> 00:04:53,840
perspective

145
00:04:53,840 --> 00:04:55,919
looking into this right we can see hey

146
00:04:55,919 --> 00:04:57,680
we're able to run something now from the

147
00:04:57,680 --> 00:05:00,080
web app the attacker has now kind of

148
00:05:00,080 --> 00:05:02,720
understood this and they'll try usually

149
00:05:02,720 --> 00:05:05,440
to see you know can we curl the metadata

150
00:05:05,440 --> 00:05:07,039
service can i go ahead and talk to this

151
00:05:07,039 --> 00:05:09,680
particular sensitive service that exists

152
00:05:09,680 --> 00:05:10,960
out there which could help me pull down

153
00:05:10,960 --> 00:05:13,120
the credentials the user data other

154
00:05:13,120 --> 00:05:14,479
sensitive pieces of information that

155
00:05:14,479 --> 00:05:16,080
could give away more information about

156
00:05:16,080 --> 00:05:17,759
your environment from a reconnaissance

157
00:05:17,759 --> 00:05:19,600
perspective perspective

158
00:05:19,600 --> 00:05:21,520
and then get that back and bring that to

159
00:05:21,520 --> 00:05:23,120
the actor as well

160
00:05:23,120 --> 00:05:25,039
but so if they're actually successful in

161
00:05:25,039 --> 00:05:26,960
getting to the point of of curling the

162
00:05:26,960 --> 00:05:28,479
metadata service and getting those

163
00:05:28,479 --> 00:05:31,600
credentials they're simply able to make

164
00:05:31,600 --> 00:05:33,360
that request where

165
00:05:33,360 --> 00:05:35,120
you know to the instance itself it may

166
00:05:35,120 --> 00:05:37,280
seem like the instance is just making

167
00:05:37,280 --> 00:05:38,800
that request on its own right because

168
00:05:38,800 --> 00:05:40,479
it's coming straight from that

169
00:05:40,479 --> 00:05:42,800
particular uh web app that's running on

170
00:05:42,800 --> 00:05:44,720
it right and so this is looping back

171
00:05:44,720 --> 00:05:46,639
talking to the metadata service the

172
00:05:46,639 --> 00:05:48,639
instance simply returns that through to

173
00:05:48,639 --> 00:05:49,840
the web app

174
00:05:49,840 --> 00:05:52,800
kind of grabs it sends it to the bad

175
00:05:52,800 --> 00:05:55,440
actor again and this is where you know

176
00:05:55,440 --> 00:05:57,680
at that point the attacker will now use

177
00:05:57,680 --> 00:06:00,319
a secret key and identification here the

178
00:06:00,319 --> 00:06:02,160
kia key right and then as well as a

179
00:06:02,160 --> 00:06:04,479
session token to say now can i use these

180
00:06:04,479 --> 00:06:07,120
credentials and particularly assume the

181
00:06:07,120 --> 00:06:09,199
role or even use those threads in

182
00:06:09,199 --> 00:06:11,199
particular to access anything that that

183
00:06:11,199 --> 00:06:13,199
instance had access to

184
00:06:13,199 --> 00:06:15,039
and then this is where the the pivot

185
00:06:15,039 --> 00:06:16,880
vector itself comes from right so now

186
00:06:16,880 --> 00:06:18,400
they're able to pivot and traverse your

187
00:06:18,400 --> 00:06:19,759
environment

188
00:06:19,759 --> 00:06:22,000
take a look at various areas a lot of

189
00:06:22,000 --> 00:06:23,759
discovery work happens at this point at

190
00:06:23,759 --> 00:06:25,360
this point in time right so if you're

191
00:06:25,360 --> 00:06:27,120
looking through and seeing

192
00:06:27,120 --> 00:06:29,280
you know access to s3 or access to some

193
00:06:29,280 --> 00:06:31,120
other resource they're able to dump

194
00:06:31,120 --> 00:06:33,759
those or potentially even modify things

195
00:06:33,759 --> 00:06:37,360
depending on what the instance can do

196
00:06:38,639 --> 00:06:41,759
now if we look at v2 we can kind of see

197
00:06:41,759 --> 00:06:44,240
how this changes a bit right so the same

198
00:06:44,240 --> 00:06:46,880
exact flow would work in the sense that

199
00:06:46,880 --> 00:06:48,720
you would still have the same web app

200
00:06:48,720 --> 00:06:50,639
vulnerability that exists i would go

201
00:06:50,639 --> 00:06:53,680
through and take a look at the instance

202
00:06:53,680 --> 00:06:56,000
metadata service we've talked to it we

203
00:06:56,000 --> 00:06:58,160
can go ahead and check hey are we able

204
00:06:58,160 --> 00:07:00,319
to return this to like this request from

205
00:07:00,319 --> 00:07:02,479
a crawl or can i even see anything

206
00:07:02,479 --> 00:07:04,639
beyond this and that comes back

207
00:07:04,639 --> 00:07:06,479
essentially to the web app

208
00:07:06,479 --> 00:07:08,800
the attacker sees that finds that

209
00:07:08,800 --> 00:07:10,960
and now it's returned they're able to

210
00:07:10,960 --> 00:07:12,800
say hey can i use these credentials and

211
00:07:12,800 --> 00:07:14,400
actually talk to different things and

212
00:07:14,400 --> 00:07:16,000
this is the part where really we're

213
00:07:16,000 --> 00:07:18,000
creating some extra friction and we're

214
00:07:18,000 --> 00:07:19,759
making it harder for attackers to

215
00:07:19,759 --> 00:07:22,160
actually look and get these credentials

216
00:07:22,160 --> 00:07:23,599
and use them as easily as they could

217
00:07:23,599 --> 00:07:24,560
before

218
00:07:24,560 --> 00:07:27,039
so aws implemented v2 to essentially

219
00:07:27,039 --> 00:07:29,599
prevent that particular attack factor

220
00:07:29,599 --> 00:07:32,000
and harden that environment as far as

221
00:07:32,000 --> 00:07:33,680
you know being able to exfil those

222
00:07:33,680 --> 00:07:36,000
credentials from a vpc or from wherever

223
00:07:36,000 --> 00:07:37,280
the instance is running and then use

224
00:07:37,280 --> 00:07:38,639
them elsewhere

225
00:07:38,639 --> 00:07:40,720
so we can see that access will be denied

226
00:07:40,720 --> 00:07:42,400
right if they are getting that because

227
00:07:42,400 --> 00:07:44,479
we're moving from a simple put request

228
00:07:44,479 --> 00:07:46,879
model to a session based model and

229
00:07:46,879 --> 00:07:48,479
what's important to note here is like

230
00:07:48,479 --> 00:07:50,800
hey now we're going to need a token

231
00:07:50,800 --> 00:07:52,240
and on top of that there's a couple

232
00:07:52,240 --> 00:07:55,360
other pieces around ttl cracked headers

233
00:07:55,360 --> 00:07:56,479
and so forth that we're going to be

234
00:07:56,479 --> 00:07:58,400
looking at to really make sure that this

235
00:07:58,400 --> 00:08:00,160
request is coming where it's coming

236
00:08:00,160 --> 00:08:01,599
where it's from supposed to come from

237
00:08:01,599 --> 00:08:02,400
right

238
00:08:02,400 --> 00:08:04,400
and i think that's a super key indicator

239
00:08:04,400 --> 00:08:06,000
to help you determine

240
00:08:06,000 --> 00:08:07,759
hey you know now that we're validating

241
00:08:07,759 --> 00:08:10,400
this request you can no longer you know

242
00:08:10,400 --> 00:08:12,240
take those credentials and use them from

243
00:08:12,240 --> 00:08:14,560
anywhere um and i you know on a high

244
00:08:14,560 --> 00:08:16,400
level i think it's super fundamental to

245
00:08:16,400 --> 00:08:18,960
understand that uh you know with these

246
00:08:18,960 --> 00:08:20,479
requests are kind of being made from

247
00:08:20,479 --> 00:08:21,520
somewhere that they're not supposed to

248
00:08:21,520 --> 00:08:22,960
be they should never be ever kind of

249
00:08:22,960 --> 00:08:24,479
like allowed to be made and you can

250
00:08:24,479 --> 00:08:26,240
probably pair that with im policies et

251
00:08:26,240 --> 00:08:29,360
cetera as well but just this simple flow

252
00:08:29,360 --> 00:08:31,599
right and changing this one thing on the

253
00:08:31,599 --> 00:08:33,519
instance because actually prevents you

254
00:08:33,519 --> 00:08:34,799
from dealing with that particular

255
00:08:34,799 --> 00:08:37,120
problem

256
00:08:37,360 --> 00:08:39,360
so what are the larger differences in v1

257
00:08:39,360 --> 00:08:40,719
and v2 and i kind of went through some

258
00:08:40,719 --> 00:08:41,679
of these

259
00:08:41,679 --> 00:08:43,360
we're really moving away from a simple

260
00:08:43,360 --> 00:08:45,920
put request model to the session based

261
00:08:45,920 --> 00:08:46,720
one

262
00:08:46,720 --> 00:08:48,720
and we're asking for that token right so

263
00:08:48,720 --> 00:08:50,800
anytime you request make a request of

264
00:08:50,800 --> 00:08:52,160
metadata service you're going to have to

265
00:08:52,160 --> 00:08:54,399
pass to the token and so you originally

266
00:08:54,399 --> 00:08:55,760
originally have to essentially get a

267
00:08:55,760 --> 00:08:58,160
token first put that into your request

268
00:08:58,160 --> 00:09:00,320
and say hey i have a token now i'm going

269
00:09:00,320 --> 00:09:02,240
to pass it to you um i'm coming from a

270
00:09:02,240 --> 00:09:04,160
legitimate place and

271
00:09:04,160 --> 00:09:06,240
we this request should go through and

272
00:09:06,240 --> 00:09:07,360
you can give me back whatever

273
00:09:07,360 --> 00:09:10,080
information i'm asking for um that the

274
00:09:10,080 --> 00:09:12,560
actual token was not a requirement in v1

275
00:09:12,560 --> 00:09:14,640
right so that was one area where i think

276
00:09:14,640 --> 00:09:17,279
uh has improved over time and and it's

277
00:09:17,279 --> 00:09:19,519
kind of why we need to do it this way um

278
00:09:19,519 --> 00:09:21,279
as well as kind of changing the

279
00:09:21,279 --> 00:09:23,279
different methods rate so that put

280
00:09:23,279 --> 00:09:24,800
request model is changing now and we

281
00:09:24,800 --> 00:09:26,800
have uh the get and head methods so

282
00:09:26,800 --> 00:09:28,560
anytime you're making a request to the

283
00:09:28,560 --> 00:09:30,880
metadata service we have to you know

284
00:09:30,880 --> 00:09:32,720
essentially add that to the get method

285
00:09:32,720 --> 00:09:35,040
itself and say hey we're inserting a

286
00:09:35,040 --> 00:09:36,640
token here and if that token's not there

287
00:09:36,640 --> 00:09:37,839
you're definitely going to get an

288
00:09:37,839 --> 00:09:40,399
unauthorized you know access denied

289
00:09:40,399 --> 00:09:41,760
you're you're not passing me the right

290
00:09:41,760 --> 00:09:44,000
things i need now because we're adding a

291
00:09:44,000 --> 00:09:46,160
layer of complexity um and also

292
00:09:46,160 --> 00:09:48,480
preventing this larger pivot vector for

293
00:09:48,480 --> 00:09:52,800
attackers to use um across the board

294
00:09:54,240 --> 00:09:56,800
so why should we use it right and we

295
00:09:56,800 --> 00:09:58,080
chatted through that you know we

296
00:09:58,080 --> 00:09:59,839
emphasize that hey it's a session

297
00:09:59,839 --> 00:10:01,360
requirement

298
00:10:01,360 --> 00:10:02,959
and really it boils down to the fact

299
00:10:02,959 --> 00:10:04,240
that this is really a hardening

300
00:10:04,240 --> 00:10:06,320
configuration right um and you're

301
00:10:06,320 --> 00:10:08,079
mitigating a good bit of risk in the

302
00:10:08,079 --> 00:10:10,079
sense that a lot of those same attacks

303
00:10:10,079 --> 00:10:12,399
that we were talking about are now a lot

304
00:10:12,399 --> 00:10:14,560
harder and um actually can't even be

305
00:10:14,560 --> 00:10:16,160
performed most of the time

306
00:10:16,160 --> 00:10:18,160
and this pairing this paired together

307
00:10:18,160 --> 00:10:19,920
with ssrf vulnerabilities i think

308
00:10:19,920 --> 00:10:22,320
tackles a larger problem around how all

309
00:10:22,320 --> 00:10:24,560
the metadata service um itself is being

310
00:10:24,560 --> 00:10:26,160
used and how we're actually

311
00:10:26,160 --> 00:10:28,000
communicating with it right and and how

312
00:10:28,000 --> 00:10:30,240
attackers will leverage that and play

313
00:10:30,240 --> 00:10:32,880
into the whole concept of hey i can now

314
00:10:32,880 --> 00:10:34,959
steal your credentials because there is

315
00:10:34,959 --> 00:10:36,720
no other mitigations in place to prevent

316
00:10:36,720 --> 00:10:38,160
me from using them outside of your

317
00:10:38,160 --> 00:10:40,079
account so we really want to make sure

318
00:10:40,079 --> 00:10:42,399
that the the actual configurations on

319
00:10:42,399 --> 00:10:44,480
these hosts are locked down and that can

320
00:10:44,480 --> 00:10:47,040
be done via the api right uh we can make

321
00:10:47,040 --> 00:10:48,720
it a requirement every time an instance

322
00:10:48,720 --> 00:10:50,560
is spun up we can also do that via an

323
00:10:50,560 --> 00:10:53,120
iem policy and say any requests going to

324
00:10:53,120 --> 00:10:55,760
the metadata service itself should be

325
00:10:55,760 --> 00:10:57,760
and um should always you know make sure

326
00:10:57,760 --> 00:11:00,399
to be coming from a particular version

327
00:11:00,399 --> 00:11:02,399
of that service right so if it's hey are

328
00:11:02,399 --> 00:11:04,560
we talking about v1 or v2 it'll come

329
00:11:04,560 --> 00:11:07,040
from v2 and a request from v1 on that

330
00:11:07,040 --> 00:11:09,120
particular instance will actually fail

331
00:11:09,120 --> 00:11:10,880
so you won't even be able to use v1 on

332
00:11:10,880 --> 00:11:11,680
there

333
00:11:11,680 --> 00:11:13,040
and those will fail so you're always

334
00:11:13,040 --> 00:11:14,720
enforcing it

335
00:11:14,720 --> 00:11:16,720
session tokens as well right so when

336
00:11:16,720 --> 00:11:19,360
we're talking about having those enabled

337
00:11:19,360 --> 00:11:22,240
and always mandatory we're restricting

338
00:11:22,240 --> 00:11:24,079
it to simply say

339
00:11:24,079 --> 00:11:25,680
every single request being made to that

340
00:11:25,680 --> 00:11:27,760
service has to have that mandatory token

341
00:11:27,760 --> 00:11:29,360
right so this is also where it gets

342
00:11:29,360 --> 00:11:30,720
complicated because a lot of the

343
00:11:30,720 --> 00:11:32,160
existing infrastructure you might be

344
00:11:32,160 --> 00:11:35,360
running may not consider this and

345
00:11:35,360 --> 00:11:37,360
we'll get into that a little later but

346
00:11:37,360 --> 00:11:39,680
it's just another kind of step in the

347
00:11:39,680 --> 00:11:41,519
process of talking to the service and

348
00:11:41,519 --> 00:11:43,360
getting those credentials down

349
00:11:43,360 --> 00:11:45,760
um the other larger call out is also the

350
00:11:45,760 --> 00:11:47,680
the forwarded for header so a lot a lot

351
00:11:47,680 --> 00:11:50,880
of the times attackers may actually use

352
00:11:50,880 --> 00:11:52,720
some kind of proxy right to route

353
00:11:52,720 --> 00:11:54,000
traffic through

354
00:11:54,000 --> 00:11:56,480
and and actually pass things by in a

355
00:11:56,480 --> 00:11:58,320
sense that when they're going through

356
00:11:58,320 --> 00:11:59,680
the web app they'll try to get to the

357
00:11:59,680 --> 00:12:02,399
instance that they're talking to and

358
00:12:02,399 --> 00:12:04,480
um this information will get routed back

359
00:12:04,480 --> 00:12:06,720
right and so what this particular uh

360
00:12:06,720 --> 00:12:08,399
what the v2 of the service does is

361
00:12:08,399 --> 00:12:10,560
actually limits that ability because

362
00:12:10,560 --> 00:12:12,880
it'll validate the origination and

363
00:12:12,880 --> 00:12:15,519
destination of that particular um that

364
00:12:15,519 --> 00:12:17,360
header there to say are you coming from

365
00:12:17,360 --> 00:12:18,800
a place where you're allowed to come

366
00:12:18,800 --> 00:12:21,200
from um and if you're using this

367
00:12:21,200 --> 00:12:22,880
particular header we're not even going

368
00:12:22,880 --> 00:12:25,120
to allow this request to happen because

369
00:12:25,120 --> 00:12:26,399
you're forwarding this particular

370
00:12:26,399 --> 00:12:28,880
request to the to the metadata service

371
00:12:28,880 --> 00:12:30,800
we don't really want this kind of

372
00:12:30,800 --> 00:12:32,480
traffic happening in the first place

373
00:12:32,480 --> 00:12:34,240
right because essentially the instance

374
00:12:34,240 --> 00:12:36,000
should only be talking to the metadata

375
00:12:36,000 --> 00:12:37,279
service

376
00:12:37,279 --> 00:12:39,680
at the hypervisor level at the ec2 point

377
00:12:39,680 --> 00:12:41,600
of view right so there should never be

378
00:12:41,600 --> 00:12:43,360
something forwarding a request to the

379
00:12:43,360 --> 00:12:45,279
metadata service

380
00:12:45,279 --> 00:12:47,440
and if there was a use case like that i

381
00:12:47,440 --> 00:12:49,440
don't know you know outside of some

382
00:12:49,440 --> 00:12:50,959
attack scenario what that would be used

383
00:12:50,959 --> 00:12:52,959
for but there could be

384
00:12:52,959 --> 00:12:54,639
but in this particular scenario we are

385
00:12:54,639 --> 00:12:56,720
we're kind of vending out a lot of those

386
00:12:56,720 --> 00:13:00,320
particular proxy based attacks

387
00:13:01,200 --> 00:13:03,760
uh tooling wise right so when i looked

388
00:13:03,760 --> 00:13:04,639
at

389
00:13:04,639 --> 00:13:06,480
solving this problem originally

390
00:13:06,480 --> 00:13:07,839
you know the first thing you usually do

391
00:13:07,839 --> 00:13:09,200
is kind of check hey is there like a

392
00:13:09,200 --> 00:13:10,880
tool that does this already is there

393
00:13:10,880 --> 00:13:13,120
something out there that can help us and

394
00:13:13,120 --> 00:13:14,880
mitigate this problem and solve this

395
00:13:14,880 --> 00:13:17,040
particular risk for us in an easy and

396
00:13:17,040 --> 00:13:18,560
simple way

397
00:13:18,560 --> 00:13:20,959
and kind of breaking that down i didn't

398
00:13:20,959 --> 00:13:22,639
find anything that could really at the

399
00:13:22,639 --> 00:13:24,880
time at least uh that was super granular

400
00:13:24,880 --> 00:13:26,800
and preventing um this type of attack

401
00:13:26,800 --> 00:13:28,000
and being able to

402
00:13:28,000 --> 00:13:29,839
sort of hand pick what you wanted to fix

403
00:13:29,839 --> 00:13:31,360
and what you wanted to upgrade um

404
00:13:31,360 --> 00:13:32,720
there's a number of different things

405
00:13:32,720 --> 00:13:34,480
that exist today

406
00:13:34,480 --> 00:13:36,880
inside the cloud provider itself in aws

407
00:13:36,880 --> 00:13:38,000
where you can use some cloud watch

408
00:13:38,000 --> 00:13:40,079
metrics to kind of determine hey are we

409
00:13:40,079 --> 00:13:42,959
using um v1 versus v2

410
00:13:42,959 --> 00:13:44,880
can we actually track this and then can

411
00:13:44,880 --> 00:13:47,519
we actually look at even the ec2 api

412
00:13:47,519 --> 00:13:49,920
right to be able to look at hey is this

413
00:13:49,920 --> 00:13:51,839
instance running which version right and

414
00:13:51,839 --> 00:13:53,920
so there's a lot of different options

415
00:13:53,920 --> 00:13:56,000
that you have um that exist today in

416
00:13:56,000 --> 00:13:58,160
order to look at this uh but you can but

417
00:13:58,160 --> 00:14:00,079
at the time i really wanted to gather

418
00:14:00,079 --> 00:14:02,720
some kind of tool that would be able to

419
00:14:02,720 --> 00:14:05,040
sort of scale as well right so a lot of

420
00:14:05,040 --> 00:14:06,800
the times i'm looking at a different

421
00:14:06,800 --> 00:14:08,639
infrastructure that could have anywhere

422
00:14:08,639 --> 00:14:11,120
from like 80 000 plus instances right

423
00:14:11,120 --> 00:14:13,440
which and in this span this could span

424
00:14:13,440 --> 00:14:15,120
across multiple regions right so we're

425
00:14:15,120 --> 00:14:16,240
really looking at a lot of

426
00:14:16,240 --> 00:14:17,920
infrastructure a lot of different

427
00:14:17,920 --> 00:14:20,000
running nodes and this can span across

428
00:14:20,000 --> 00:14:21,600
your container infrastructure as well

429
00:14:21,600 --> 00:14:23,920
which is could be running on ec2 right

430
00:14:23,920 --> 00:14:25,839
and they also have a metadata service on

431
00:14:25,839 --> 00:14:28,079
those every single ec2 will just it's

432
00:14:28,079 --> 00:14:29,920
just the nature of how the instances

433
00:14:29,920 --> 00:14:31,920
communicate up with the rest of the

434
00:14:31,920 --> 00:14:34,160
resources in that particular account

435
00:14:34,160 --> 00:14:36,320
but uh we really wanted to proactively

436
00:14:36,320 --> 00:14:38,079
sort of see hey

437
00:14:38,079 --> 00:14:39,839
are we able to check

438
00:14:39,839 --> 00:14:42,079
on what and every single instance is

439
00:14:42,079 --> 00:14:44,880
using and then are we able to kind of

440
00:14:44,880 --> 00:14:46,720
validate that right so

441
00:14:46,720 --> 00:14:48,399
in in our in our kind of like

442
00:14:48,399 --> 00:14:50,639
brainstorming of the tool we wanted to

443
00:14:50,639 --> 00:14:52,160
be able to

444
00:14:52,160 --> 00:14:54,079
add the configuration options in there

445
00:14:54,079 --> 00:14:56,079
to be able to harden the infrastructure

446
00:14:56,079 --> 00:14:58,399
um and then you know take a look at what

447
00:14:58,399 --> 00:15:00,000
we're dealing with from from the

448
00:15:00,000 --> 00:15:01,199
infrastructure point of view on the

449
00:15:01,199 --> 00:15:02,320
instances

450
00:15:02,320 --> 00:15:05,120
um the scps that exist today as well are

451
00:15:05,120 --> 00:15:06,800
is another aspect to point out so you

452
00:15:06,800 --> 00:15:08,959
can actually have preventative policies

453
00:15:08,959 --> 00:15:10,079
that will

454
00:15:10,079 --> 00:15:11,680
be put in place where it says you can't

455
00:15:11,680 --> 00:15:13,440
even spin up an instance that is using

456
00:15:13,440 --> 00:15:16,160
v2 because our overarching service

457
00:15:16,160 --> 00:15:17,760
control policy says that we can't do

458
00:15:17,760 --> 00:15:19,440
that um this is a very kind of

459
00:15:19,440 --> 00:15:21,920
shift-left way of of doing it i know in

460
00:15:21,920 --> 00:15:24,639
gcp there there's also kind of policies

461
00:15:24,639 --> 00:15:26,880
like that as well and this is aws's

462
00:15:26,880 --> 00:15:29,120
version um i think they're great once

463
00:15:29,120 --> 00:15:31,279
you kind of sort of know that everything

464
00:15:31,279 --> 00:15:33,519
in your environment can run v2 but

465
00:15:33,519 --> 00:15:35,279
there's a lot of discovery in the

466
00:15:35,279 --> 00:15:37,519
process of making sure that you're

467
00:15:37,519 --> 00:15:39,600
actually in a place to go ahead and put

468
00:15:39,600 --> 00:15:42,079
a policy like that um down because once

469
00:15:42,079 --> 00:15:44,000
you do there could be issues with

470
00:15:44,000 --> 00:15:46,160
existing infrastructure um and i know

471
00:15:46,160 --> 00:15:47,839
i've mentioned i you know throughout the

472
00:15:47,839 --> 00:15:49,600
slides here that hey there's there's

473
00:15:49,600 --> 00:15:52,320
definitely a lot of caution to be had

474
00:15:52,320 --> 00:15:54,880
with deploying any of the v2 versus v1

475
00:15:54,880 --> 00:15:57,120
because certain services and certain

476
00:15:57,120 --> 00:15:58,959
infrastructure can only run with a

477
00:15:58,959 --> 00:16:00,959
particular version just depending on

478
00:16:00,959 --> 00:16:03,120
what it is uh because of like i

479
00:16:03,120 --> 00:16:04,880
mentioned earlier right we do have to

480
00:16:04,880 --> 00:16:07,440
kind of curl to get that token

481
00:16:07,440 --> 00:16:09,120
a lot of things out of the box may not

482
00:16:09,120 --> 00:16:10,639
know how to do that

483
00:16:10,639 --> 00:16:13,120
sometimes we run into cases where

484
00:16:13,120 --> 00:16:15,440
things might not know hey did you switch

485
00:16:15,440 --> 00:16:17,440
versions like is this a session request

486
00:16:17,440 --> 00:16:19,040
even with the methods of how is it being

487
00:16:19,040 --> 00:16:20,480
communicated to

488
00:16:20,480 --> 00:16:22,240
that's another piece of it that gets to

489
00:16:22,240 --> 00:16:26,160
kind of come into consideration as well

490
00:16:27,279 --> 00:16:29,920
so uh mentioning the discovery process

491
00:16:29,920 --> 00:16:32,240
earlier right we had to go through and

492
00:16:32,240 --> 00:16:33,519
take a look at how do we actually

493
00:16:33,519 --> 00:16:35,759
determine what is using our metadata

494
00:16:35,759 --> 00:16:38,000
service um and by looking at the

495
00:16:38,000 --> 00:16:40,240
cloudtrail logs that's one really good

496
00:16:40,240 --> 00:16:42,480
way i think to actually find out hey are

497
00:16:42,480 --> 00:16:44,320
we using them out of that service and if

498
00:16:44,320 --> 00:16:47,199
so like where is that coming from

499
00:16:47,199 --> 00:16:49,759
and from our perspective the the real

500
00:16:49,759 --> 00:16:52,000
lens of it right um that we wanted to

501
00:16:52,000 --> 00:16:52,880
see is

502
00:16:52,880 --> 00:16:54,639
the biggest kind of differentiator there

503
00:16:54,639 --> 00:16:56,160
between the two is if we're going

504
00:16:56,160 --> 00:16:57,600
through the sdk

505
00:16:57,600 --> 00:16:59,759
we probably know that upgrading to v2

506
00:16:59,759 --> 00:17:01,519
won't be as complicated of a problem

507
00:17:01,519 --> 00:17:03,199
essentially because

508
00:17:03,199 --> 00:17:06,400
they're um it's a lot easier to

509
00:17:06,400 --> 00:17:08,400
have v2 going through the sdk and a lot

510
00:17:08,400 --> 00:17:10,799
of the sdk versions actually support v2

511
00:17:10,799 --> 00:17:13,359
out of the box so you're saying i i

512
00:17:13,359 --> 00:17:14,959
don't actually have to go and curl the

513
00:17:14,959 --> 00:17:16,319
metadata service and i'm just going

514
00:17:16,319 --> 00:17:18,240
straight through the sdk it will

515
00:17:18,240 --> 00:17:20,799
automatically just um use v2 because

516
00:17:20,799 --> 00:17:22,160
that's the way it works right and if

517
00:17:22,160 --> 00:17:23,760
it's on deleted the version that

518
00:17:23,760 --> 00:17:25,280
supports that as well

519
00:17:25,280 --> 00:17:27,280
you won't have to run into that issue

520
00:17:27,280 --> 00:17:28,640
the other thing with the user data and

521
00:17:28,640 --> 00:17:30,640
the user agent itself well the user

522
00:17:30,640 --> 00:17:32,160
agent we could tell if it was coming

523
00:17:32,160 --> 00:17:34,799
from a particular cli command because um

524
00:17:34,799 --> 00:17:36,960
amazon actually will tell you hey you're

525
00:17:36,960 --> 00:17:39,679
either going from you know a ck or

526
00:17:39,679 --> 00:17:41,520
somebody's running a command versus with

527
00:17:41,520 --> 00:17:43,360
the aws cli which could mean something

528
00:17:43,360 --> 00:17:45,120
completely different which we'd have to

529
00:17:45,120 --> 00:17:46,720
put some other scrutiny into right to

530
00:17:46,720 --> 00:17:48,640
understand how does this work um what

531
00:17:48,640 --> 00:17:50,960
does this look like and so forth uh the

532
00:17:50,960 --> 00:17:53,120
user data itself is another area that i

533
00:17:53,120 --> 00:17:55,280
think is important to look at so are you

534
00:17:55,280 --> 00:17:56,480
calling the user data when you're

535
00:17:56,480 --> 00:17:58,799
spinning up your instances this is also

536
00:17:58,799 --> 00:18:00,400
another piece of it right because like

537
00:18:00,400 --> 00:18:02,000
you're this is coming from the metadata

538
00:18:02,000 --> 00:18:04,000
service so at any point during the

539
00:18:04,000 --> 00:18:06,000
runtime or even while the instance is

540
00:18:06,000 --> 00:18:08,160
running are you looking at pieces of the

541
00:18:08,160 --> 00:18:10,080
user data that you're passing to the

542
00:18:10,080 --> 00:18:12,880
instance for any kind of purposes

543
00:18:12,880 --> 00:18:14,240
this will also be something that's

544
00:18:14,240 --> 00:18:15,679
helpful if you look at the code base

545
00:18:15,679 --> 00:18:18,080
itself and you know of something that's

546
00:18:18,080 --> 00:18:19,760
running and you notice that you're

547
00:18:19,760 --> 00:18:22,240
saying different user data being stored

548
00:18:22,240 --> 00:18:24,320
and variables and you're saying

549
00:18:24,320 --> 00:18:26,400
i need to figure out like where should i

550
00:18:26,400 --> 00:18:28,640
be processing this and where where are

551
00:18:28,640 --> 00:18:30,080
kind of like areas where we need to take

552
00:18:30,080 --> 00:18:32,240
a little bit more concern and caution

553
00:18:32,240 --> 00:18:34,720
because there could be situations where

554
00:18:34,720 --> 00:18:39,120
v2 will cause problems with that

555
00:18:39,120 --> 00:18:41,360
and i've also kind of

556
00:18:41,360 --> 00:18:43,200
evaluate a different software right so

557
00:18:43,200 --> 00:18:45,760
some reagents and software that runs on

558
00:18:45,760 --> 00:18:48,559
host depending on what it is and

559
00:18:48,559 --> 00:18:50,320
depending on if it's a vendor that

560
00:18:50,320 --> 00:18:51,840
you're using or if it's some other open

561
00:18:51,840 --> 00:18:54,160
source tool right sometimes they only

562
00:18:54,160 --> 00:18:56,000
support one version of imps which is

563
00:18:56,000 --> 00:18:58,320
super interesting um and this goes back

564
00:18:58,320 --> 00:19:00,640
to the whole concept of hey you know is

565
00:19:00,640 --> 00:19:03,039
there a token being used if not then

566
00:19:03,039 --> 00:19:05,600
that may be the whole issue there around

567
00:19:05,600 --> 00:19:07,520
what this particular service is doing

568
00:19:07,520 --> 00:19:09,360
and what the agent is doing to be able

569
00:19:09,360 --> 00:19:12,080
to kind of work with imds correctly and

570
00:19:12,080 --> 00:19:14,160
that will definitely break at some point

571
00:19:14,160 --> 00:19:15,919
which is why you know testing is super

572
00:19:15,919 --> 00:19:17,520
super important here like depending on

573
00:19:17,520 --> 00:19:18,640
the environment that you're in if you're

574
00:19:18,640 --> 00:19:21,280
endeavor stage uh just testing this out

575
00:19:21,280 --> 00:19:23,360
and making sure that you know once

576
00:19:23,360 --> 00:19:26,000
you've updated the imds uh kind of

577
00:19:26,000 --> 00:19:27,600
version you're testing and you're

578
00:19:27,600 --> 00:19:28,720
thoroughly kind of going through and

579
00:19:28,720 --> 00:19:30,559
making sure that all your unit tests and

580
00:19:30,559 --> 00:19:32,320
everything else that your you know qa

581
00:19:32,320 --> 00:19:34,720
process would hold in place is actually

582
00:19:34,720 --> 00:19:36,799
complaining as as it should be

583
00:19:36,799 --> 00:19:38,559
just because you know there you never

584
00:19:38,559 --> 00:19:40,160
know when there's one service or

585
00:19:40,160 --> 00:19:42,080
something that's leveraging the imds uh

586
00:19:42,080 --> 00:19:43,120
kind of

587
00:19:43,120 --> 00:19:45,120
larger service that may have a problem

588
00:19:45,120 --> 00:19:46,799
or break at some point

589
00:19:46,799 --> 00:19:48,960
um and then vlogs right so logs are

590
00:19:48,960 --> 00:19:50,799
really really important as well to look

591
00:19:50,799 --> 00:19:53,360
at um on actually workloads or instances

592
00:19:53,360 --> 00:19:55,280
that you're running as well to see hey

593
00:19:55,280 --> 00:19:56,320
is there something in here that would

594
00:19:56,320 --> 00:19:57,760
tell us that we're actually talking to

595
00:19:57,760 --> 00:20:00,000
this particular ip so we saw earlier

596
00:20:00,000 --> 00:20:02,240
right we know that it's like 169 254

597
00:20:02,240 --> 00:20:04,400
right and repeat it again

598
00:20:04,400 --> 00:20:06,559
to be able to talk to that if we're able

599
00:20:06,559 --> 00:20:09,280
to see hey alma instance itself or are

600
00:20:09,280 --> 00:20:11,360
we actually doing anything or are there

601
00:20:11,360 --> 00:20:12,960
the logs point to us talking to the

602
00:20:12,960 --> 00:20:14,640
metadata service at all because this

603
00:20:14,640 --> 00:20:16,640
will really tell you what exactly is

604
00:20:16,640 --> 00:20:18,559
happening so any kind of like host based

605
00:20:18,559 --> 00:20:20,559
logs that you're forwarding over if you

606
00:20:20,559 --> 00:20:22,159
can take a look at those and actually

607
00:20:22,159 --> 00:20:23,520
get a better understanding of where

608
00:20:23,520 --> 00:20:25,760
those live i think that's super helpful

609
00:20:25,760 --> 00:20:27,520
to just know and do more of like an

610
00:20:27,520 --> 00:20:30,559
inventory to speak and then understand

611
00:20:30,559 --> 00:20:32,440
where exactly that service

612
00:20:32,440 --> 00:20:35,440
lives um and the tool we made was meta

613
00:20:35,440 --> 00:20:37,760
badger um and kind of solves for some of

614
00:20:37,760 --> 00:20:39,600
those larger pieces that we just

615
00:20:39,600 --> 00:20:42,159
discussed um around checking to see

616
00:20:42,159 --> 00:20:43,919
which version you're using and we want

617
00:20:43,919 --> 00:20:46,080
to be able to do this a lot large amount

618
00:20:46,080 --> 00:20:48,640
of scale i give insights into different

619
00:20:48,640 --> 00:20:50,240
things like role attachments are we

620
00:20:50,240 --> 00:20:52,320
using iem services

621
00:20:52,320 --> 00:20:54,480
and are we you know kind of looking at

622
00:20:54,480 --> 00:20:55,840
all the different precautions we want to

623
00:20:55,840 --> 00:20:57,600
take around that right so being able to

624
00:20:57,600 --> 00:20:59,360
iterate through every instance say oh

625
00:20:59,360 --> 00:21:01,440
we're using iam here is there something

626
00:21:01,440 --> 00:21:03,360
in particular we should be looking at

627
00:21:03,360 --> 00:21:05,440
call out the role be able to understand

628
00:21:05,440 --> 00:21:07,360
that and then also give us a lot of

629
00:21:07,360 --> 00:21:08,960
different options as far as what we're

630
00:21:08,960 --> 00:21:10,480
able to do so we want to have the

631
00:21:10,480 --> 00:21:13,520
ability to not only just upgrade to v2

632
00:21:13,520 --> 00:21:15,440
but we want to enable we want the

633
00:21:15,440 --> 00:21:16,880
ability to enable it let's say it's

634
00:21:16,880 --> 00:21:18,640
turned off somewhere where we need it

635
00:21:18,640 --> 00:21:20,720
let's say we want to disable the actual

636
00:21:20,720 --> 00:21:22,480
service itself or it's not needed and i

637
00:21:22,480 --> 00:21:23,679
think that's actually a really good

638
00:21:23,679 --> 00:21:25,840
approach because you know if you have an

639
00:21:25,840 --> 00:21:27,440
aws account or something we're using a

640
00:21:27,440 --> 00:21:29,440
bunch of instances and they really have

641
00:21:29,440 --> 00:21:31,440
no need for the service then you know

642
00:21:31,440 --> 00:21:33,679
you can simply disable it um and that

643
00:21:33,679 --> 00:21:35,360
way you're kind of reducing any

644
00:21:35,360 --> 00:21:37,120
potential there for

645
00:21:37,120 --> 00:21:39,520
um if if something were to change on

646
00:21:39,520 --> 00:21:42,080
that host or whatnot and so that's kind

647
00:21:42,080 --> 00:21:43,679
of those are the two main main

648
00:21:43,679 --> 00:21:45,200
functionalities as well as kind of

649
00:21:45,200 --> 00:21:46,799
upgrading which is the base one right

650
00:21:46,799 --> 00:21:49,840
from v1 to v2 uh we do a simple api

651
00:21:49,840 --> 00:21:52,400
check we want to go through check to see

652
00:21:52,400 --> 00:21:54,640
if in that returned object where you

653
00:21:54,640 --> 00:21:56,320
know we're seeing v1 on that particular

654
00:21:56,320 --> 00:21:58,720
host if so we would easily be able to

655
00:21:58,720 --> 00:22:01,120
upgrade a v2 right and this is super

656
00:22:01,120 --> 00:22:03,760
simple from the ec2 api to be able to go

657
00:22:03,760 --> 00:22:05,280
through and do that

658
00:22:05,280 --> 00:22:07,360
um and then you know as we're thinking

659
00:22:07,360 --> 00:22:09,039
through this we're also considering hey

660
00:22:09,039 --> 00:22:11,200
should there be a fallback option and as

661
00:22:11,200 --> 00:22:13,600
always and in the world of technology

662
00:22:13,600 --> 00:22:15,039
right you always want to be able to roll

663
00:22:15,039 --> 00:22:17,440
back so we created some functionality

664
00:22:17,440 --> 00:22:19,360
there about rolling back and being able

665
00:22:19,360 --> 00:22:21,840
to go to v1 as well as kind of logging

666
00:22:21,840 --> 00:22:24,000
every change there um

667
00:22:24,000 --> 00:22:26,159
and being able to understand hey what is

668
00:22:26,159 --> 00:22:27,760
actually what's being done right so we

669
00:22:27,760 --> 00:22:29,760
include some things such as like a dry

670
00:22:29,760 --> 00:22:32,000
run functionality and so forth to be

671
00:22:32,000 --> 00:22:34,080
able to validate what you're doing and

672
00:22:34,080 --> 00:22:36,080
making sure that all those all those

673
00:22:36,080 --> 00:22:38,000
potential kind of config changes that

674
00:22:38,000 --> 00:22:39,360
you're about to make are documented

675
00:22:39,360 --> 00:22:40,480
somewhere and you're able to kind of

676
00:22:40,480 --> 00:22:43,679
evaluate that on your own

677
00:22:43,679 --> 00:22:45,679
the other piece that we wanted to kind

678
00:22:45,679 --> 00:22:49,280
of also add was around the ability to be

679
00:22:49,280 --> 00:22:52,000
super granular so like when it comes to

680
00:22:52,000 --> 00:22:54,400
tagging and other instance ids

681
00:22:54,400 --> 00:22:56,080
there's always going to be the question

682
00:22:56,080 --> 00:22:57,919
of do we want to apply this across the

683
00:22:57,919 --> 00:22:59,919
board or do we want to single out

684
00:22:59,919 --> 00:23:01,919
certain instances or certain workloads

685
00:23:01,919 --> 00:23:03,520
where you might not actually want to

686
00:23:03,520 --> 00:23:04,880
update the service right like we

687
00:23:04,880 --> 00:23:06,880
mentioned earlier if there was a issue

688
00:23:06,880 --> 00:23:08,880
with the software or something else was

689
00:23:08,880 --> 00:23:10,400
kind of problematic for you and you

690
00:23:10,400 --> 00:23:12,720
wanted to hold off on upgrading certain

691
00:23:12,720 --> 00:23:14,559
pieces of your environment you could do

692
00:23:14,559 --> 00:23:16,640
that and so we added in the component of

693
00:23:16,640 --> 00:23:18,320
looking through and having that a badger

694
00:23:18,320 --> 00:23:20,640
go through and evaluate the tags as well

695
00:23:20,640 --> 00:23:23,039
as kind of update instance ids based off

696
00:23:23,039 --> 00:23:25,840
of passing in a file essentially to go

697
00:23:25,840 --> 00:23:27,520
through and validate and say okay these

698
00:23:27,520 --> 00:23:28,640
are part of

699
00:23:28,640 --> 00:23:30,480
the list of things that i need to go and

700
00:23:30,480 --> 00:23:33,840
update i'll go ahead and do that

701
00:23:35,120 --> 00:23:37,120
so larger higher picture kind of problem

702
00:23:37,120 --> 00:23:39,760
statement right that we mentioned um is

703
00:23:39,760 --> 00:23:42,640
sort of putting in together the piece of

704
00:23:42,640 --> 00:23:44,080
of kind of hey what are we solving for

705
00:23:44,080 --> 00:23:46,960
here right uh and how are we kind of

706
00:23:46,960 --> 00:23:48,799
approaching this problem right

707
00:23:48,799 --> 00:23:51,600
and it kind of boils down to the you

708
00:23:51,600 --> 00:23:52,960
have a bunch of web apps or load

709
00:23:52,960 --> 00:23:54,799
balancers or whatever you're serving on

710
00:23:54,799 --> 00:23:56,880
these ec2 instances right with sensitive

711
00:23:56,880 --> 00:23:59,760
data and other things and all sorts of

712
00:23:59,760 --> 00:24:01,919
right containers whatever it may be

713
00:24:01,919 --> 00:24:04,559
that's running on these ec2s and if they

714
00:24:04,559 --> 00:24:07,200
do have the ability to be susceptible to

715
00:24:07,200 --> 00:24:09,200
ssrf attacks where

716
00:24:09,200 --> 00:24:11,039
you know they could potentially get a

717
00:24:11,039 --> 00:24:13,120
foothold on that on the ability to

718
00:24:13,120 --> 00:24:15,679
inject something and then curl back a

719
00:24:15,679 --> 00:24:17,039
you know response from the metadata

720
00:24:17,039 --> 00:24:19,039
service then we're dealing with a larger

721
00:24:19,039 --> 00:24:21,279
problem um and so these these

722
00:24:21,279 --> 00:24:23,039
vulnerabilities could definitely exist

723
00:24:23,039 --> 00:24:25,200
across the board the thing is we don't

724
00:24:25,200 --> 00:24:27,840
really know right and our our kind of

725
00:24:27,840 --> 00:24:29,760
main goal is to reduce that overall tax

726
00:24:29,760 --> 00:24:32,799
surface to make sure that that doesn't

727
00:24:32,799 --> 00:24:34,080
even the problem that isn't even a

728
00:24:34,080 --> 00:24:35,360
problem in the future right when we're

729
00:24:35,360 --> 00:24:37,440
looking into it and we shouldn't even

730
00:24:37,440 --> 00:24:39,279
have to worry about the fact that a

731
00:24:39,279 --> 00:24:41,279
particular ssrf vulnerability is going

732
00:24:41,279 --> 00:24:43,039
to cause this issue if we're really

733
00:24:43,039 --> 00:24:44,640
looking at a defense in-depth sort of

734
00:24:44,640 --> 00:24:46,880
approach to it and layering on

735
00:24:46,880 --> 00:24:48,400
additional kind of friction for an

736
00:24:48,400 --> 00:24:50,720
attacker to have um to protect the

737
00:24:50,720 --> 00:24:53,120
particular instance that we have

738
00:24:53,120 --> 00:24:55,039
uh and then you know as far as the

739
00:24:55,039 --> 00:24:56,960
attack surface goes we're really kind of

740
00:24:56,960 --> 00:24:59,120
limiting the blast radius there as far

741
00:24:59,120 --> 00:25:00,559
as what they can do from from the

742
00:25:00,559 --> 00:25:02,159
credentials as well as as well as their

743
00:25:02,159 --> 00:25:03,760
ability to even get those credentials

744
00:25:03,760 --> 00:25:06,159
and move out there

745
00:25:06,159 --> 00:25:08,880
um and then we you know back with with

746
00:25:08,880 --> 00:25:10,960
with evaluating and doing the discovery

747
00:25:10,960 --> 00:25:12,480
we want to make sure that everything

748
00:25:12,480 --> 00:25:14,159
that we're doing and looking at as far

749
00:25:14,159 --> 00:25:16,559
as instances go we can understand hey

750
00:25:16,559 --> 00:25:19,120
are these actual um kind of like i am

751
00:25:19,120 --> 00:25:20,320
roles that are being attached to these

752
00:25:20,320 --> 00:25:22,480
instances should we like be looking at

753
00:25:22,480 --> 00:25:24,080
these and then also we want to make sure

754
00:25:24,080 --> 00:25:26,559
that we're pairing that data with our

755
00:25:26,559 --> 00:25:28,400
meta data hardening right with the

756
00:25:28,400 --> 00:25:31,200
actual tool itself can we now evaluate

757
00:25:31,200 --> 00:25:32,320
everything and give us a better

758
00:25:32,320 --> 00:25:36,320
understanding from the discovery process

759
00:25:36,320 --> 00:25:38,080
so today you know we have a few things

760
00:25:38,080 --> 00:25:39,520
baked into the tool

761
00:25:39,520 --> 00:25:41,360
it is an open source project is

762
00:25:41,360 --> 00:25:43,200
available today as well

763
00:25:43,200 --> 00:25:44,720
but currently

764
00:25:44,720 --> 00:25:45,679
these are some of the base

765
00:25:45,679 --> 00:25:47,600
functionalities that that are built into

766
00:25:47,600 --> 00:25:50,000
it so you know you can easily kind of

767
00:25:50,000 --> 00:25:51,760
run meta badger and go through and

768
00:25:51,760 --> 00:25:53,440
discover all the different metadata

769
00:25:53,440 --> 00:25:55,120
usage depending on what version you're

770
00:25:55,120 --> 00:25:57,360
on and then you can do this um really at

771
00:25:57,360 --> 00:25:59,440
scale which i think is awesome in the

772
00:25:59,440 --> 00:26:00,559
sense that

773
00:26:00,559 --> 00:26:02,559
you know you will if if folks have ever

774
00:26:02,559 --> 00:26:04,000
worked with both three before there's

775
00:26:04,000 --> 00:26:06,799
definitely some cases where um you'll do

776
00:26:06,799 --> 00:26:08,240
pagination if you're dealing with really

777
00:26:08,240 --> 00:26:10,320
large data sets et cetera

778
00:26:10,320 --> 00:26:12,480
and at scale right you really have to

779
00:26:12,480 --> 00:26:13,600
build out

780
00:26:13,600 --> 00:26:15,120
your code in a way where it's going to

781
00:26:15,120 --> 00:26:17,120
be able to understand oh i'm looking at

782
00:26:17,120 --> 00:26:19,360
tons and tons and tons of data

783
00:26:19,360 --> 00:26:21,120
tons and tons of instance data as well

784
00:26:21,120 --> 00:26:22,880
because there's so many of them and

785
00:26:22,880 --> 00:26:24,720
being able to parse that out and

786
00:26:24,720 --> 00:26:26,960
correctly kind of modify things in a way

787
00:26:26,960 --> 00:26:28,960
where that makes sense and in a way

788
00:26:28,960 --> 00:26:31,120
where you know you're not kind of

789
00:26:31,120 --> 00:26:33,360
getting to the api and it's in a way

790
00:26:33,360 --> 00:26:35,120
where it's going to kind of throttle you

791
00:26:35,120 --> 00:26:36,960
or run into issues of that sort of

792
00:26:36,960 --> 00:26:38,640
nature so that was a huge kind of

793
00:26:38,640 --> 00:26:40,640
functionality that the main real

794
00:26:40,640 --> 00:26:42,400
functionality we wanted to build out is

795
00:26:42,400 --> 00:26:43,520
hey can we actually go through and

796
00:26:43,520 --> 00:26:45,440
discover all this and actually go

797
00:26:45,440 --> 00:26:46,880
through the hardening process the same

798
00:26:46,880 --> 00:26:47,919
way

799
00:26:47,919 --> 00:26:50,080
at scale and being able to build code

800
00:26:50,080 --> 00:26:52,960
that functions in that aspect

801
00:26:52,960 --> 00:26:54,799
and you know on top of that like i

802
00:26:54,799 --> 00:26:56,480
mentioned the the discovery aspect of it

803
00:26:56,480 --> 00:26:57,919
is also important so we wanted to see

804
00:26:57,919 --> 00:26:59,520
where the roles were so we also go

805
00:26:59,520 --> 00:27:01,520
through and kind of parse out the roles

806
00:27:01,520 --> 00:27:03,679
that are being used per instance as well

807
00:27:03,679 --> 00:27:05,279
as kind of all the functionality around

808
00:27:05,279 --> 00:27:07,919
disabling updating it um if they're not

809
00:27:07,919 --> 00:27:09,200
being used

810
00:27:09,200 --> 00:27:10,880
we can actually go through and just

811
00:27:10,880 --> 00:27:13,039
disable it and then we can also just

812
00:27:13,039 --> 00:27:15,440
update and harden it across the board um

813
00:27:15,440 --> 00:27:17,120
and recently we even added the

814
00:27:17,120 --> 00:27:18,480
functionality to do that to do that

815
00:27:18,480 --> 00:27:20,399
across like an entire account if you

816
00:27:20,399 --> 00:27:22,399
wanted to pass in whatever regions you

817
00:27:22,399 --> 00:27:23,840
want or if you wanted to just run the

818
00:27:23,840 --> 00:27:25,440
all region flag on there you could

819
00:27:25,440 --> 00:27:27,279
actually go through and just update

820
00:27:27,279 --> 00:27:30,000
everything um all across the board and

821
00:27:30,000 --> 00:27:31,760
then you know once you've done all this

822
00:27:31,760 --> 00:27:33,440
work you should be able to kind of

823
00:27:33,440 --> 00:27:35,520
produce a summary of hey

824
00:27:35,520 --> 00:27:37,360
metrics wise right we love security

825
00:27:37,360 --> 00:27:39,760
metrics we love to see how is my attack

826
00:27:39,760 --> 00:27:41,840
surface changed how how many you know

827
00:27:41,840 --> 00:27:43,760
instances are using one version

828
00:27:43,760 --> 00:27:45,440
versus the other and we're able to break

829
00:27:45,440 --> 00:27:47,840
down a percentage essentially of

830
00:27:47,840 --> 00:27:49,600
where you know our problem areas might

831
00:27:49,600 --> 00:27:51,840
lie and what percentage of coverage we

832
00:27:51,840 --> 00:27:55,120
have for v2 as well

833
00:27:55,520 --> 00:27:57,600
so some future architecture and design

834
00:27:57,600 --> 00:28:00,320
kind of goals that we have on here in a

835
00:28:00,320 --> 00:28:02,240
wish list as well it's just kind of

836
00:28:02,240 --> 00:28:03,919
including functionality for some

837
00:28:03,919 --> 00:28:05,760
automation right so we really wanted to

838
00:28:05,760 --> 00:28:07,679
build in and potentially even build in

839
00:28:07,679 --> 00:28:09,440
some lambdas that could do some auto

840
00:28:09,440 --> 00:28:11,360
enforcement i know part of this already

841
00:28:11,360 --> 00:28:13,440
exists with some config rules but we

842
00:28:13,440 --> 00:28:15,360
were thinking of hey if we wanted to

843
00:28:15,360 --> 00:28:18,000
kind of increase the automation behind

844
00:28:18,000 --> 00:28:19,520
meta badger and have this running as a

845
00:28:19,520 --> 00:28:21,840
continuous enforcement thing with those

846
00:28:21,840 --> 00:28:23,919
same kind of mechanisms that you wanted

847
00:28:23,919 --> 00:28:26,000
to pass through the tool uh we find that

848
00:28:26,000 --> 00:28:27,760
that might be helpful for folks right so

849
00:28:27,760 --> 00:28:30,240
being able to update things like tags or

850
00:28:30,240 --> 00:28:32,320
instance ids or other kind of pieces and

851
00:28:32,320 --> 00:28:34,720
components of it would be super helpful

852
00:28:34,720 --> 00:28:36,159
to have that running in a continuous

853
00:28:36,159 --> 00:28:38,000
enforcement environment because then you

854
00:28:38,000 --> 00:28:39,760
can get granular and you can have your

855
00:28:39,760 --> 00:28:41,360
automation kind of work for you in that

856
00:28:41,360 --> 00:28:42,640
sense

857
00:28:42,640 --> 00:28:44,640
and then you know moving back to the

858
00:28:44,640 --> 00:28:46,720
shift left concept as well we you know

859
00:28:46,720 --> 00:28:48,399
wanted the tool in the future

860
00:28:48,399 --> 00:28:50,240
potentially to look at the different

861
00:28:50,240 --> 00:28:51,840
kind of configurations that may already

862
00:28:51,840 --> 00:28:53,760
exist out there so if you have a code

863
00:28:53,760 --> 00:28:55,520
base where you're you know checking in

864
00:28:55,520 --> 00:28:57,039
infrastructure as code such as cloud

865
00:28:57,039 --> 00:28:58,720
formation or

866
00:28:58,720 --> 00:29:01,039
even terraform and others and so forth

867
00:29:01,039 --> 00:29:02,720
right how do we actually look at that

868
00:29:02,720 --> 00:29:04,399
how do we look at the code that's used

869
00:29:04,399 --> 00:29:06,320
to actually spin up the infrastructure

870
00:29:06,320 --> 00:29:08,240
and even go through and call that out in

871
00:29:08,240 --> 00:29:10,399
the code base so maybe we go through and

872
00:29:10,399 --> 00:29:11,600
check all the different terraform

873
00:29:11,600 --> 00:29:14,240
modules or validate anything that that

874
00:29:14,240 --> 00:29:16,320
might be spinning up in ec2 right to see

875
00:29:16,320 --> 00:29:19,039
hey are we actually using v1 or v2 here

876
00:29:19,039 --> 00:29:20,320
are there any provisions that we're

877
00:29:20,320 --> 00:29:22,080
putting into place there around like

878
00:29:22,080 --> 00:29:24,080
validating that folks can't just use the

879
00:29:24,080 --> 00:29:26,880
default version etc and then building

880
00:29:26,880 --> 00:29:28,240
that into the tool to be able to

881
00:29:28,240 --> 00:29:30,720
validate that um or even update it right

882
00:29:30,720 --> 00:29:33,360
so going in there and like maybe even

883
00:29:33,360 --> 00:29:36,159
adding in a config change to update your

884
00:29:36,159 --> 00:29:38,399
your kind of metadata service to v2 is

885
00:29:38,399 --> 00:29:40,559
something that we've thought about

886
00:29:40,559 --> 00:29:43,279
um and then in aws i know that there's

887
00:29:43,279 --> 00:29:45,120
option there's an option for v1 and v2

888
00:29:45,120 --> 00:29:46,559
and some other cloud providers that were

889
00:29:46,559 --> 00:29:48,960
that may or may not work differently

890
00:29:48,960 --> 00:29:51,279
right so some of them enforce them being

891
00:29:51,279 --> 00:29:53,440
on the latest by default others don't

892
00:29:53,440 --> 00:29:54,799
it's just kind of variant depending on

893
00:29:54,799 --> 00:29:56,720
the cloud but we find that there may be

894
00:29:56,720 --> 00:29:59,600
some usage here around how this is being

895
00:29:59,600 --> 00:30:01,279
how the service in particular across the

896
00:30:01,279 --> 00:30:02,960
board across cloud providers is being

897
00:30:02,960 --> 00:30:05,279
used so you know if there's if this tool

898
00:30:05,279 --> 00:30:06,799
would be beneficial in that aspect we

899
00:30:06,799 --> 00:30:08,880
may kind of span it out to at least do

900
00:30:08,880 --> 00:30:10,880
some of like the discovery work or even

901
00:30:10,880 --> 00:30:14,559
hardening work across the board there

902
00:30:14,640 --> 00:30:16,240
so this is a quick demo i can kind of

903
00:30:16,240 --> 00:30:18,640
show you how the tool itself

904
00:30:18,640 --> 00:30:20,720
functions

905
00:30:20,720 --> 00:30:23,440
we walk through and do just a simple

906
00:30:23,440 --> 00:30:25,440
kind of meta badger discover metadata

907
00:30:25,440 --> 00:30:27,039
right so this goes through and pulls

908
00:30:27,039 --> 00:30:28,880
down all the different

909
00:30:28,880 --> 00:30:31,360
um instances where you have that are

910
00:30:31,360 --> 00:30:34,159
enabled or optional essentially optional

911
00:30:34,159 --> 00:30:37,760
just means hey you can use v2 i mean

912
00:30:37,760 --> 00:30:39,840
sorry you can use v1 because

913
00:30:39,840 --> 00:30:43,200
v2 is totally optional and this is

914
00:30:43,200 --> 00:30:45,200
coming straight from the api so that's

915
00:30:45,200 --> 00:30:46,720
kind of like the language that's used

916
00:30:46,720 --> 00:30:48,799
there and then we also get a breakdown

917
00:30:48,799 --> 00:30:50,559
of which ones are enabled and then a

918
00:30:50,559 --> 00:30:52,159
total instant count

919
00:30:52,159 --> 00:30:52,960
so

920
00:30:52,960 --> 00:30:54,399
we can see how we know what our

921
00:30:54,399 --> 00:30:56,720
percentage of enforcement is um that

922
00:30:56,720 --> 00:30:58,399
second command there is a discover role

923
00:30:58,399 --> 00:31:00,159
usage one where like i mentioned right

924
00:31:00,159 --> 00:31:01,600
being able to identify hey which

925
00:31:01,600 --> 00:31:03,039
instances have a role attached can we

926
00:31:03,039 --> 00:31:04,960
parse that down can we actually take a

927
00:31:04,960 --> 00:31:07,039
look there this is just good for

928
00:31:07,039 --> 00:31:08,559
you know doing a little bit of initial

929
00:31:08,559 --> 00:31:10,559
reconnaissance to see

930
00:31:10,559 --> 00:31:13,039
is i am being used is it kind of in play

931
00:31:13,039 --> 00:31:15,200
here do we need to take extra caution

932
00:31:15,200 --> 00:31:18,159
and finally harden metadata kind of goes

933
00:31:18,159 --> 00:31:19,600
through it and we'll just do it default

934
00:31:19,600 --> 00:31:21,279
on us west too to iterate through every

935
00:31:21,279 --> 00:31:23,279
single instance and update that and so

936
00:31:23,279 --> 00:31:24,399
this is just the super bass

937
00:31:24,399 --> 00:31:25,919
functionality obviously there's a lot of

938
00:31:25,919 --> 00:31:28,320
flags and things you can pass in like i

939
00:31:28,320 --> 00:31:30,399
mentioned that's kind of honor actual

940
00:31:30,399 --> 00:31:33,120
repos well if you want to read into it

941
00:31:33,120 --> 00:31:36,320
but that is sort of a gist of what we

942
00:31:36,320 --> 00:31:38,159
kind of built out in a quick little demo

943
00:31:38,159 --> 00:31:39,919
of how that all works

944
00:31:39,919 --> 00:31:43,120
let me go ahead and present back

945
00:31:43,120 --> 00:31:44,559
um so yeah

946
00:31:44,559 --> 00:31:46,399
onto the next slide here i just wanted

947
00:31:46,399 --> 00:31:48,399
to give a quick kind of moment to uh

948
00:31:48,399 --> 00:31:49,840
call out that we are hiring here at

949
00:31:49,840 --> 00:31:52,000
salesforce um a couple few different

950
00:31:52,000 --> 00:31:54,240
roles and type role types i guess you

951
00:31:54,240 --> 00:31:56,000
could say as well that we're hiring for

952
00:31:56,000 --> 00:31:57,760
so as far as the security architecture

953
00:31:57,760 --> 00:32:00,320
goes um devsecops a lot of the work that

954
00:32:00,320 --> 00:32:02,480
things like meta badger et cetera and

955
00:32:02,480 --> 00:32:04,080
then kind of working on that within the

956
00:32:04,080 --> 00:32:06,399
environment as well um threat

957
00:32:06,399 --> 00:32:08,320
vulnerability management pen testing and

958
00:32:08,320 --> 00:32:10,640
then recently just enterprise security

959
00:32:10,640 --> 00:32:12,320
just came up as well so if you have any

960
00:32:12,320 --> 00:32:13,600
interest at all if you want to chat

961
00:32:13,600 --> 00:32:15,120
through it uh or if you want me to

962
00:32:15,120 --> 00:32:16,640
connect you with the right folks feel

963
00:32:16,640 --> 00:32:18,480
free to dm me at twitter on twitter and

964
00:32:18,480 --> 00:32:20,640
then um i'm also in this really really

965
00:32:20,640 --> 00:32:22,799
cool slack channel as well called cloud

966
00:32:22,799 --> 00:32:25,360
security forum so folks join that

967
00:32:25,360 --> 00:32:26,960
some folks that i know as well as some

968
00:32:26,960 --> 00:32:29,440
other interesting folks in this space

969
00:32:29,440 --> 00:32:31,760
who are always kind of solving the next

970
00:32:31,760 --> 00:32:32,640
kind of

971
00:32:32,640 --> 00:32:34,320
larger problems that exist which is

972
00:32:34,320 --> 00:32:36,480
always involving right in cloud security

973
00:32:36,480 --> 00:32:39,600
so feel free to connect on there

974
00:32:39,600 --> 00:32:41,840
and yeah so this is a reference to the

975
00:32:41,840 --> 00:32:44,640
actual repo itself and we really love uh

976
00:32:44,640 --> 00:32:46,159
contributing with folks in the community

977
00:32:46,159 --> 00:32:48,480
so if you have any ideas or feel like

978
00:32:48,480 --> 00:32:50,080
there's some contributions that could be

979
00:32:50,080 --> 00:32:51,919
made as well or even just questions you

980
00:32:51,919 --> 00:32:53,679
know feel free to reach out super happy

981
00:32:53,679 --> 00:32:55,760
to help and super happy to hear also

982
00:32:55,760 --> 00:32:57,760
like experiences with using the tool and

983
00:32:57,760 --> 00:32:59,279
how it looks in them and other people's

984
00:32:59,279 --> 00:33:01,440
environments as well as if there's any

985
00:33:01,440 --> 00:33:03,440
issues with it at all um

986
00:33:03,440 --> 00:33:08,240
yeah i guess we're good to go to q a

