1
00:00:01,420 --> 00:00:05,630
[Music]

2
00:00:06,640 --> 00:00:09,440
uh welcome to to the talk about roblox

3
00:00:09,440 --> 00:00:11,679
for csp and where to find them

4
00:00:11,679 --> 00:00:16,799
uh today we want to talk with you about

5
00:00:18,000 --> 00:00:19,199
now

6
00:00:19,199 --> 00:00:21,920
about our most recent research that we

7
00:00:21,920 --> 00:00:24,560
conducted at

8
00:00:24,560 --> 00:00:26,240
cisber

9
00:00:26,240 --> 00:00:27,519
so that i

10
00:00:27,519 --> 00:00:28,960
and my

11
00:00:28,960 --> 00:00:30,480
colleague leah

12
00:00:30,480 --> 00:00:32,320
has conducted together with our

13
00:00:32,320 --> 00:00:35,280
colleagues katarina michael and ben

14
00:00:35,280 --> 00:00:37,680
and

15
00:00:39,680 --> 00:00:41,840
actually it was planned that me and my

16
00:00:41,840 --> 00:00:44,640
colleague leah will show you well the

17
00:00:44,640 --> 00:00:47,360
results of this research

18
00:00:47,360 --> 00:00:49,600
where we conducted a qualitative study

19
00:00:49,600 --> 00:00:52,239
with 12 reaver developers to uncover the

20
00:00:52,239 --> 00:00:54,960
root cause behind misconfigurations of

21
00:00:54,960 --> 00:00:57,199
csp however

22
00:00:57,199 --> 00:00:58,480
due to her

23
00:00:58,480 --> 00:01:00,960
being very sick at the moment luckily

24
00:01:00,960 --> 00:01:02,879
it's not coveted

25
00:01:02,879 --> 00:01:05,600
i'll try to take over her part so

26
00:01:05,600 --> 00:01:08,240
sorry in advance if i'm struggling on on

27
00:01:08,240 --> 00:01:11,439
some slides of this talk

28
00:01:11,439 --> 00:01:13,760
so uh in this talk

29
00:01:13,760 --> 00:01:15,040
we will

30
00:01:15,040 --> 00:01:17,840
or i will not only present you

31
00:01:17,840 --> 00:01:20,400
uh the results of our most recent work

32
00:01:20,400 --> 00:01:22,080
but we

33
00:01:22,080 --> 00:01:25,040
uh also present you some numbers and

34
00:01:25,040 --> 00:01:27,520
graphs from other reach research that we

35
00:01:27,520 --> 00:01:30,000
conducted at cisber in order to give

36
00:01:30,000 --> 00:01:32,400
better examples and supporting numbers

37
00:01:32,400 --> 00:01:35,439
for the finding of our most recent work

38
00:01:35,439 --> 00:01:36,880
so

39
00:01:36,880 --> 00:01:38,799
let's get started with what the hell is

40
00:01:38,799 --> 00:01:41,280
csp actually is

41
00:01:41,280 --> 00:01:42,320
well

42
00:01:42,320 --> 00:01:44,560
one of the most prevalent security

43
00:01:44,560 --> 00:01:46,880
vulnerabilities in websites is cross-set

44
00:01:46,880 --> 00:01:49,119
scripting and to perform such an attack

45
00:01:49,119 --> 00:01:50,560
an attacker

46
00:01:50,560 --> 00:01:52,880
allows a victim's browser to

47
00:01:52,880 --> 00:01:55,360
execute malicious javascript

48
00:01:55,360 --> 00:01:58,560
in the example here you can see that the

49
00:01:58,560 --> 00:02:00,880
victim's browser is lured into issuing a

50
00:02:00,880 --> 00:02:03,600
get request to a vulnerable service

51
00:02:03,600 --> 00:02:05,920
containing and this

52
00:02:05,920 --> 00:02:08,560
request contains a script tag

53
00:02:08,560 --> 00:02:10,878
that loads a malicious script this

54
00:02:10,878 --> 00:02:13,200
script tag is due to the nature of this

55
00:02:13,200 --> 00:02:16,319
vulnerability embedded in the response

56
00:02:16,319 --> 00:02:19,760
from the vulnerable server

57
00:02:19,760 --> 00:02:21,200
therefore the browser will load the

58
00:02:21,200 --> 00:02:23,040
malicious script and execute the

59
00:02:23,040 --> 00:02:25,520
javascript code in the context of the

60
00:02:25,520 --> 00:02:28,879
vulnerable site in the victims browser

61
00:02:28,879 --> 00:02:31,760
so this malicious code is is able to do

62
00:02:31,760 --> 00:02:33,040
everything

63
00:02:33,040 --> 00:02:34,879
legitimate code

64
00:02:34,879 --> 00:02:37,280
is able to do so it has access to the

65
00:02:37,280 --> 00:02:39,280
session ids

66
00:02:39,280 --> 00:02:43,120
uh to all forms so it is easy to steal

67
00:02:43,120 --> 00:02:46,000
credentials hijack sessions

68
00:02:46,000 --> 00:02:47,920
and the code is also able to perform

69
00:02:47,920 --> 00:02:50,160
state changing actions in behalf of the

70
00:02:50,160 --> 00:02:51,040
user

71
00:02:51,040 --> 00:02:54,879
and do many more harm

72
00:02:55,200 --> 00:02:56,879
that's where

73
00:02:56,879 --> 00:02:58,560
csp oh

74
00:02:58,560 --> 00:03:01,360
that's where csp kicks in and to

75
00:03:01,360 --> 00:03:03,519
mitigate the effect of those markup

76
00:03:03,519 --> 00:03:05,599
injections

77
00:03:05,599 --> 00:03:07,440
and it basically

78
00:03:07,440 --> 00:03:11,840
acts as a last line of defense against

79
00:03:11,840 --> 00:03:14,560
those attacks it is basically a list of

80
00:03:14,560 --> 00:03:16,560
trusted javascript sources that are

81
00:03:16,560 --> 00:03:18,879
allowed to be loaded and executed by the

82
00:03:18,879 --> 00:03:20,159
browser

83
00:03:20,159 --> 00:03:20,959
so

84
00:03:20,959 --> 00:03:23,360
as soon as the server has a correct csp

85
00:03:23,360 --> 00:03:25,599
header in the response the evil script

86
00:03:25,599 --> 00:03:27,760
is not even requested by the victim's

87
00:03:27,760 --> 00:03:30,239
browser

88
00:03:30,959 --> 00:03:35,200
csp was already developed in 2012 and in

89
00:03:35,200 --> 00:03:38,400
a snippet here you can see that

90
00:03:38,400 --> 00:03:41,040
there is a script from add.com that

91
00:03:41,040 --> 00:03:43,360
programmatically adds a script from

92
00:03:43,360 --> 00:03:45,120
company.com

93
00:03:45,120 --> 00:03:47,519
and there is also an inline javascript

94
00:03:47,519 --> 00:03:49,200
present in the atom

95
00:03:49,200 --> 00:03:51,040
html

96
00:03:51,040 --> 00:03:54,400
back in 2012 the only possibility in csp

97
00:03:54,400 --> 00:03:56,799
to allow those scripts was to add the

98
00:03:56,799 --> 00:03:58,400
domains

99
00:03:58,400 --> 00:04:00,560
to the allow list

100
00:04:00,560 --> 00:04:03,200
and also allow the execution of inline

101
00:04:03,200 --> 00:04:04,879
scripts using the unsafe inline

102
00:04:04,879 --> 00:04:06,319
expression

103
00:04:06,319 --> 00:04:07,760
however

104
00:04:07,760 --> 00:04:11,040
this would also allow an attacker to

105
00:04:11,040 --> 00:04:12,480
inject

106
00:04:12,480 --> 00:04:16,399
inline javascript therefore in 2014

107
00:04:16,399 --> 00:04:18,880
they added support for nonsense to the

108
00:04:18,880 --> 00:04:22,479
csp standard and by embedding

109
00:04:22,479 --> 00:04:25,440
such a nonce as an attribute to a script

110
00:04:25,440 --> 00:04:27,360
tag as you can see it in the code

111
00:04:27,360 --> 00:04:28,639
snippet here

112
00:04:28,639 --> 00:04:31,360
we can now allow trusted

113
00:04:31,360 --> 00:04:34,240
script tags to be executed so we can

114
00:04:34,240 --> 00:04:36,800
also whitelist allow

115
00:04:36,800 --> 00:04:40,479
uh inline scripts to be executed

116
00:04:40,479 --> 00:04:44,320
however ed.com still adds company.com

117
00:04:44,320 --> 00:04:46,080
programmatically

118
00:04:46,080 --> 00:04:47,680
thus it's

119
00:04:47,680 --> 00:04:50,880
we still need to allow this domain in

120
00:04:50,880 --> 00:04:53,280
addition to the nonce in our csp load

121
00:04:53,280 --> 00:04:55,600
list

122
00:04:55,600 --> 00:04:59,440
in 2016 they then added support for the

123
00:04:59,440 --> 00:05:02,720
strict dynamic source expression

124
00:05:02,720 --> 00:05:04,720
uh this expression basically

125
00:05:04,720 --> 00:05:06,320
automatically

126
00:05:06,320 --> 00:05:08,880
uh propagates the trust to

127
00:05:08,880 --> 00:05:12,000
scripts that are added programmatically

128
00:05:12,000 --> 00:05:14,639
if they were added from already trusted

129
00:05:14,639 --> 00:05:16,240
sources

130
00:05:16,240 --> 00:05:18,479
and therefore we don't need to

131
00:05:18,479 --> 00:05:20,479
put the

132
00:05:20,479 --> 00:05:24,240
company.com domain in our allow list

133
00:05:24,240 --> 00:05:26,320
as you can see the csp standard has

134
00:05:26,320 --> 00:05:28,880
evolved over the course of time but in

135
00:05:28,880 --> 00:05:32,160
addition to its original use case the

136
00:05:32,160 --> 00:05:35,039
restriction of script content

137
00:05:35,039 --> 00:05:37,919
csp has evolved into a multi-tool for

138
00:05:37,919 --> 00:05:41,360
web security purposes nowadays it can

139
00:05:41,360 --> 00:05:43,759
also restrict a plethora of other

140
00:05:43,759 --> 00:05:46,639
different content types such as images

141
00:05:46,639 --> 00:05:48,160
styles

142
00:05:48,160 --> 00:05:50,560
it can restrict the capability of an

143
00:05:50,560 --> 00:05:53,440
attacker to exfiltrate the stolen data

144
00:05:53,440 --> 00:05:55,840
for example via restricting

145
00:05:55,840 --> 00:05:59,600
the targets of the xhr or fetch api

146
00:05:59,600 --> 00:06:02,240
and csp is also capable of controlling

147
00:06:02,240 --> 00:06:04,800
framing behavior and enforcing secure

148
00:06:04,800 --> 00:06:07,280
network connections

149
00:06:07,280 --> 00:06:08,800
so

150
00:06:08,800 --> 00:06:11,440
let's take a look on how the adoption of

151
00:06:11,440 --> 00:06:15,280
csp has increased since its release

152
00:06:15,280 --> 00:06:17,759
in a previous work we took a look at the

153
00:06:17,759 --> 00:06:21,440
csp adoption of the historical top 10

154
00:06:21,440 --> 00:06:23,360
000 websites

155
00:06:23,360 --> 00:06:25,199
and as you can see

156
00:06:25,199 --> 00:06:27,680
in the red line of this graph the

157
00:06:27,680 --> 00:06:31,840
overall adoption of csp is increasing

158
00:06:31,840 --> 00:06:34,240
and more than 10

159
00:06:34,240 --> 00:06:36,880
of the top sides are currently deploying

160
00:06:36,880 --> 00:06:38,720
csp

161
00:06:38,720 --> 00:06:42,240
also the usage of new features of csp in

162
00:06:42,240 --> 00:06:45,759
csp level 2 and 3 is increasing

163
00:06:45,759 --> 00:06:50,240
so everything looks ok right

164
00:06:50,240 --> 00:06:52,720
well if we take a closer look at the

165
00:06:52,720 --> 00:06:54,800
deployed policies

166
00:06:54,800 --> 00:06:57,599
only less than half of them actually

167
00:06:57,599 --> 00:07:00,639
deploy a csp that tries to mitigate the

168
00:07:00,639 --> 00:07:03,199
effect of cross-site scripting

169
00:07:03,199 --> 00:07:06,080
and even worse the vast majority of

170
00:07:06,080 --> 00:07:08,960
those sites use expressions that make

171
00:07:08,960 --> 00:07:11,360
their policy trivially bypassable by an

172
00:07:11,360 --> 00:07:13,759
attacker

173
00:07:14,400 --> 00:07:16,800
at the end of the aforementioned

174
00:07:16,800 --> 00:07:21,039
longitudinal csp study we also notified

175
00:07:21,039 --> 00:07:24,080
the users about inconsistencies

176
00:07:24,080 --> 00:07:26,160
inconsistent deployment of their framing

177
00:07:26,160 --> 00:07:27,840
control

178
00:07:27,840 --> 00:07:30,700
because many of them did not use

179
00:07:30,700 --> 00:07:32,080
[Music]

180
00:07:32,080 --> 00:07:34,639
csp to control framing but rather the

181
00:07:34,639 --> 00:07:38,240
old and deprecated extreme options

182
00:07:38,240 --> 00:07:40,560
we also asked them to complete a small

183
00:07:40,560 --> 00:07:42,560
survey and here the participants

184
00:07:42,560 --> 00:07:44,800
believed that csp

185
00:07:44,800 --> 00:07:46,960
is a viable option

186
00:07:46,960 --> 00:07:48,960
for them to mitigate the effect of

187
00:07:48,960 --> 00:07:50,560
cross-set scripting

188
00:07:50,560 --> 00:07:52,319
however

189
00:07:52,319 --> 00:07:55,440
most of them also confessed that their

190
00:07:55,440 --> 00:07:58,080
website would currently not work with a

191
00:07:58,080 --> 00:08:00,080
strict csp

192
00:08:00,080 --> 00:08:03,120
which actually motivated us to do our

193
00:08:03,120 --> 00:08:05,280
most recent work

194
00:08:05,280 --> 00:08:06,560
because

195
00:08:06,560 --> 00:08:09,599
until now previous research only tried

196
00:08:09,599 --> 00:08:12,479
to make an educated guess on why

197
00:08:12,479 --> 00:08:14,639
developers face certain problems with

198
00:08:14,639 --> 00:08:16,400
csp

199
00:08:16,400 --> 00:08:19,039
and this guest was based on

200
00:08:19,039 --> 00:08:22,160
data that was was gathered from

201
00:08:22,160 --> 00:08:24,080
the website's behavior and its source

202
00:08:24,080 --> 00:08:26,080
code

203
00:08:26,080 --> 00:08:28,800
in our recent work however we want to go

204
00:08:28,800 --> 00:08:31,199
beyond this educated guess based on

205
00:08:31,199 --> 00:08:33,279
technical observations

206
00:08:33,279 --> 00:08:35,919
we want to understand the human as core

207
00:08:35,919 --> 00:08:38,479
part of that technical system

208
00:08:38,479 --> 00:08:42,000
such that we can promote changes on apis

209
00:08:42,000 --> 00:08:44,480
or mechanisms based on evidence and not

210
00:08:44,480 --> 00:08:47,519
based on assumptions

211
00:08:47,519 --> 00:08:50,160
therefore we want to find out what are

212
00:08:50,160 --> 00:08:52,399
the root causes of insecure practices

213
00:08:52,399 --> 00:08:55,360
when deploying a csp what strategies do

214
00:08:55,360 --> 00:08:59,440
developers adopt when creating a csp

215
00:08:59,440 --> 00:09:01,519
how well do developers understand the

216
00:09:01,519 --> 00:09:03,760
associated threat model

217
00:09:03,760 --> 00:09:04,640
and

218
00:09:04,640 --> 00:09:07,279
what perceptions and motivations do

219
00:09:07,279 --> 00:09:11,839
developer have when dealing with csp

220
00:09:12,399 --> 00:09:15,360
to get this evidence based on the human

221
00:09:15,360 --> 00:09:18,000
mindset and behavior we conducted a

222
00:09:18,000 --> 00:09:20,800
semi-structured interview with 12 real

223
00:09:20,800 --> 00:09:23,279
world web developers and during this

224
00:09:23,279 --> 00:09:25,839
interview our participants

225
00:09:25,839 --> 00:09:29,519
reported on their real world problems

226
00:09:29,519 --> 00:09:32,800
with the content security policy

227
00:09:32,800 --> 00:09:35,680
and to get more fine-grained technical

228
00:09:35,680 --> 00:09:38,880
insights we also incorporated a drawing

229
00:09:38,880 --> 00:09:41,040
task about cross-set scripting attacks

230
00:09:41,040 --> 00:09:43,440
and the coding task where the

231
00:09:43,440 --> 00:09:46,640
participants were asked to create a csp

232
00:09:46,640 --> 00:09:48,839
for small web

233
00:09:48,839 --> 00:09:51,760
application afterwards we transcribed

234
00:09:51,760 --> 00:09:54,320
the interviews and analyzed them in an

235
00:09:54,320 --> 00:09:56,640
open coding process and with the

236
00:09:56,640 --> 00:09:59,120
resulting code book we were then able to

237
00:09:59,120 --> 00:10:02,640
find motivations strategies and also

238
00:10:02,640 --> 00:10:04,880
uncover problems that the participants

239
00:10:04,880 --> 00:10:06,640
had when dealing with the content

240
00:10:06,640 --> 00:10:09,680
security policy

241
00:10:09,839 --> 00:10:11,920
but let's first focus on our drawing

242
00:10:11,920 --> 00:10:13,760
task

243
00:10:13,760 --> 00:10:16,000
in this drawing task the participants

244
00:10:16,000 --> 00:10:19,279
gather a planck shield sheet

245
00:10:19,279 --> 00:10:22,560
as it is displayed on the right side

246
00:10:22,560 --> 00:10:25,120
this sheet contained four stakeholders

247
00:10:25,120 --> 00:10:27,360
that might interact with one another

248
00:10:27,360 --> 00:10:30,480
during a process scripting attack

249
00:10:30,480 --> 00:10:33,040
and we then asked the participants to

250
00:10:33,040 --> 00:10:37,360
draw and explain the process of

251
00:10:37,360 --> 00:10:39,360
cross-set scripting attack of their

252
00:10:39,360 --> 00:10:40,880
choice

253
00:10:40,880 --> 00:10:42,320
and ask

254
00:10:42,320 --> 00:10:43,120
then

255
00:10:43,120 --> 00:10:44,320
afterwards

256
00:10:44,320 --> 00:10:46,800
where csp would block this attack from

257
00:10:46,800 --> 00:10:49,200
happening

258
00:10:49,200 --> 00:10:51,120
uh the result of this drawing task

259
00:10:51,120 --> 00:10:53,440
allowed us to have to get a better

260
00:10:53,440 --> 00:10:55,920
understanding of the participants

261
00:10:55,920 --> 00:10:58,560
mindset about cross-site scripting and

262
00:10:58,560 --> 00:11:01,120
csp

263
00:11:01,120 --> 00:11:04,079
notably all participants freely chose to

264
00:11:04,079 --> 00:11:06,720
draw server side as a server-side

265
00:11:06,720 --> 00:11:08,640
cross-site scripting attack

266
00:11:08,640 --> 00:11:12,079
while only one participant

267
00:11:12,079 --> 00:11:13,200
mentioned

268
00:11:13,200 --> 00:11:15,440
that cross-set scripting can also be a

269
00:11:15,440 --> 00:11:17,920
client-side problem

270
00:11:17,920 --> 00:11:19,839
so it seems that the server-side

271
00:11:19,839 --> 00:11:22,160
presence of the vulnerability seems to

272
00:11:22,160 --> 00:11:25,680
be far more prominent in the heads of

273
00:11:25,680 --> 00:11:27,680
our participants than the client-side

274
00:11:27,680 --> 00:11:29,839
version

275
00:11:30,240 --> 00:11:33,279
two participants actively mentioned

276
00:11:33,279 --> 00:11:35,279
cross-site scripting as a server-side

277
00:11:35,279 --> 00:11:37,680
problem and concluded that csp is

278
00:11:37,680 --> 00:11:40,880
therefore enforced on the server-side

279
00:11:40,880 --> 00:11:42,720
which not only shows

280
00:11:42,720 --> 00:11:45,360
misunderstanding of the mechanism itself

281
00:11:45,360 --> 00:11:47,279
but also misunderstanding of the

282
00:11:47,279 --> 00:11:50,720
underlying security issue

283
00:11:52,000 --> 00:11:54,560
one motivation of our participants to

284
00:11:54,560 --> 00:11:56,639
deploy a csp was

285
00:11:56,639 --> 00:11:59,680
csp's actual use case so the mitigation

286
00:11:59,680 --> 00:12:02,000
of web-based attacks

287
00:12:02,000 --> 00:12:04,560
those attacks are not only covering the

288
00:12:04,560 --> 00:12:07,040
original use case of csp so cross-site

289
00:12:07,040 --> 00:12:08,880
scripting mitigation

290
00:12:08,880 --> 00:12:10,399
but also

291
00:12:10,399 --> 00:12:14,560
other use cases like tls and enforcement

292
00:12:14,560 --> 00:12:17,519
or getting thank crane control

293
00:12:17,519 --> 00:12:18,480
over

294
00:12:18,480 --> 00:12:19,519
framing

295
00:12:19,519 --> 00:12:22,000
resources or data connections of the web

296
00:12:22,000 --> 00:12:24,720
application

297
00:12:24,720 --> 00:12:26,720
on the other hand there are also

298
00:12:26,720 --> 00:12:29,600
external motivations like penetration

299
00:12:29,600 --> 00:12:32,079
tests a security training of the

300
00:12:32,079 --> 00:12:33,360
developers

301
00:12:33,360 --> 00:12:35,440
or an incident that motivated the

302
00:12:35,440 --> 00:12:37,440
developers to have a look on the content

303
00:12:37,440 --> 00:12:40,079
security policy

304
00:12:40,079 --> 00:12:42,720
one participant even reported

305
00:12:42,720 --> 00:12:45,600
that they also deployed csp to act as a

306
00:12:45,600 --> 00:12:48,480
role model for other web companies such

307
00:12:48,480 --> 00:12:51,279
that more websites are deploying a

308
00:12:51,279 --> 00:12:54,639
content security policy

309
00:12:55,440 --> 00:12:57,920
with the help of our participants we are

310
00:12:57,920 --> 00:13:01,440
able to identify a broad variety of

311
00:13:01,440 --> 00:13:02,639
roadblocks

312
00:13:02,639 --> 00:13:05,120
i'd like to give you a brief overview of

313
00:13:05,120 --> 00:13:07,279
our findings starting from the

314
00:13:07,279 --> 00:13:11,600
perspective of an average web developer

315
00:13:11,600 --> 00:13:15,120
so csp is a rather complex mechanism and

316
00:13:15,120 --> 00:13:18,000
nobody knows everything therefore the

317
00:13:18,000 --> 00:13:21,120
developer might have knowledge gaps or

318
00:13:21,120 --> 00:13:24,639
misconceptions regarding csp

319
00:13:24,639 --> 00:13:28,639
but let's take a look on how complex csp

320
00:13:28,639 --> 00:13:31,600
can be in practice

321
00:13:31,600 --> 00:13:32,399
in

322
00:13:32,399 --> 00:13:34,720
a study published last year we were able

323
00:13:34,720 --> 00:13:37,519
to take a look on how csp has evolved

324
00:13:37,519 --> 00:13:40,399
over the course of time and

325
00:13:40,399 --> 00:13:43,040
this longitudinal lens allowed us to

326
00:13:43,040 --> 00:13:45,519
take a closer look on the development

327
00:13:45,519 --> 00:13:47,519
cycle of csp

328
00:13:47,519 --> 00:13:49,839
in real world web applications in this

329
00:13:49,839 --> 00:13:50,800
case

330
00:13:50,800 --> 00:13:56,399
it's airbnb's journey to a secure csp

331
00:13:56,399 --> 00:13:59,920
they started with a policy in report

332
00:13:59,920 --> 00:14:01,040
only mode

333
00:14:01,040 --> 00:14:03,600
and

334
00:14:03,600 --> 00:14:05,440
that's that's already good because

335
00:14:05,440 --> 00:14:06,959
that's the way to go

336
00:14:06,959 --> 00:14:09,839
and they started in november 2014 with

337
00:14:09,839 --> 00:14:14,480
17 entries in their script source

338
00:14:14,880 --> 00:14:18,160
in march 2015

339
00:14:18,160 --> 00:14:19,839
they then added

340
00:14:19,839 --> 00:14:23,199
the whole https schemata

341
00:14:23,199 --> 00:14:24,480
to

342
00:14:24,480 --> 00:14:26,639
their default and script source while

343
00:14:26,639 --> 00:14:29,279
their policy is still in the report only

344
00:14:29,279 --> 00:14:31,680
mode probably they have done this

345
00:14:31,680 --> 00:14:36,480
because of too many violation reports

346
00:14:36,480 --> 00:14:38,399
that they gathered using the report

347
00:14:38,399 --> 00:14:40,240
feature

348
00:14:40,240 --> 00:14:44,000
in may 2015 they then switched from the

349
00:14:44,000 --> 00:14:47,519
report only mode to enforcement mode

350
00:14:47,519 --> 00:14:50,800
however the whole https schema was still

351
00:14:50,800 --> 00:14:54,000
present in the allowed list

352
00:14:54,000 --> 00:14:56,160
nearly two years

353
00:14:56,160 --> 00:14:59,360
more than two years and 222 changes

354
00:14:59,360 --> 00:15:00,320
later

355
00:15:00,320 --> 00:15:04,560
in december 2017 the white their allow

356
00:15:04,560 --> 00:15:06,720
list has grown to

357
00:15:06,720 --> 00:15:11,440
32 entries while the https schemata is

358
00:15:11,440 --> 00:15:14,560
still one of those entries at that point

359
00:15:14,560 --> 00:15:17,360
they started to experimenting with a

360
00:15:17,360 --> 00:15:20,079
secure report only policy

361
00:15:20,079 --> 00:15:21,680
on single days

362
00:15:21,680 --> 00:15:23,680
and

363
00:15:23,680 --> 00:15:25,440
every time they has

364
00:15:25,440 --> 00:15:26,800
they have done

365
00:15:26,800 --> 00:15:28,800
those experiments they added more

366
00:15:28,800 --> 00:15:31,440
domains to the policy

367
00:15:31,440 --> 00:15:35,600
and in january 2018 they first tried to

368
00:15:35,600 --> 00:15:38,160
enforce their new policy

369
00:15:38,160 --> 00:15:42,000
however they edit the https schema again

370
00:15:42,000 --> 00:15:44,160
after less than one day

371
00:15:44,160 --> 00:15:47,199
probably due to some fatal errors that

372
00:15:47,199 --> 00:15:50,880
occur and they're occurred in the app

373
00:15:50,880 --> 00:15:54,720
and then finally in march 2018

374
00:15:54,720 --> 00:15:56,880
they had a second try to enforce a

375
00:15:56,880 --> 00:15:59,839
secure csp and they finally succeeded

376
00:15:59,839 --> 00:16:01,440
with that

377
00:16:01,440 --> 00:16:02,160
so

378
00:16:02,160 --> 00:16:04,880
as most of you know airbnb's main

379
00:16:04,880 --> 00:16:07,920
business is their web presence and it is

380
00:16:07,920 --> 00:16:09,920
a big company

381
00:16:09,920 --> 00:16:12,399
but still they needed three and a half

382
00:16:12,399 --> 00:16:16,880
years to secure a csp so csp deployment

383
00:16:16,880 --> 00:16:19,920
is arguably very complex even

384
00:16:19,920 --> 00:16:22,320
for big companies

385
00:16:22,320 --> 00:16:24,639
probably because big companies have big

386
00:16:24,639 --> 00:16:27,360
applications

387
00:16:27,519 --> 00:16:29,040
but yeah

388
00:16:29,040 --> 00:16:32,959
let's get back to our average developer

389
00:16:32,959 --> 00:16:34,720
and this developer

390
00:16:34,720 --> 00:16:37,440
due to the knowledge gaps

391
00:16:37,440 --> 00:16:39,360
might start an online search to get more

392
00:16:39,360 --> 00:16:41,440
information about cross-site scripting

393
00:16:41,440 --> 00:16:44,880
attacks and how to build a proper csp

394
00:16:44,880 --> 00:16:47,600
or as we all do during the development

395
00:16:47,600 --> 00:16:49,920
process we search for a certain error

396
00:16:49,920 --> 00:16:52,639
message that is displayed in for example

397
00:16:52,639 --> 00:16:55,920
the development console

398
00:16:55,920 --> 00:16:58,720
however the resources that are available

399
00:16:58,720 --> 00:17:01,759
online often lack a bigger picture of

400
00:17:01,759 --> 00:17:04,959
the unladder underlying issue and

401
00:17:04,959 --> 00:17:08,079
in worst case the developer even finds

402
00:17:08,079 --> 00:17:10,400
misleading claims or receives wrong

403
00:17:10,400 --> 00:17:13,119
suggestions how a certain problem can be

404
00:17:13,119 --> 00:17:14,880
fixed as you can see

405
00:17:14,880 --> 00:17:19,400
in this stack overflow screenshot

406
00:17:19,760 --> 00:17:21,599
another problem

407
00:17:21,599 --> 00:17:25,039
in the mindset of some developers is

408
00:17:25,039 --> 00:17:27,760
that security is built in into their

409
00:17:27,760 --> 00:17:28,960
framework

410
00:17:28,960 --> 00:17:30,880
and also

411
00:17:30,880 --> 00:17:33,679
some developers think that security is

412
00:17:33,679 --> 00:17:36,640
only something that is optional so

413
00:17:36,640 --> 00:17:38,960
security is only a nice to have feature

414
00:17:38,960 --> 00:17:41,520
in their mind

415
00:17:41,760 --> 00:17:43,840
then at some point the developers start

416
00:17:43,840 --> 00:17:45,200
working on

417
00:17:45,200 --> 00:17:47,760
an application which is in worst case an

418
00:17:47,760 --> 00:17:49,919
existing application with a lot of

419
00:17:49,919 --> 00:17:51,360
legacy code

420
00:17:51,360 --> 00:17:53,440
which will then result in a massive

421
00:17:53,440 --> 00:17:55,120
engineering effort

422
00:17:55,120 --> 00:17:57,039
because all this code

423
00:17:57,039 --> 00:17:59,679
need to be reconstructed to be csp

424
00:17:59,679 --> 00:18:02,240
compliant

425
00:18:02,400 --> 00:18:05,440
even in that small example code that you

426
00:18:05,440 --> 00:18:07,120
can see here

427
00:18:07,120 --> 00:18:10,080
we can have multiple issues like inline

428
00:18:10,080 --> 00:18:11,520
scripts

429
00:18:11,520 --> 00:18:14,400
inline events or dynamically edit

430
00:18:14,400 --> 00:18:17,440
javascript such that we need to

431
00:18:17,440 --> 00:18:19,919
rewrite the code and

432
00:18:19,919 --> 00:18:21,520
propagate nonsense to the

433
00:18:21,520 --> 00:18:24,080
programmatically added scripts

434
00:18:24,080 --> 00:18:25,360
such that

435
00:18:25,360 --> 00:18:29,840
proper csp can do its job

436
00:18:30,720 --> 00:18:34,000
also our developer is not working alone

437
00:18:34,000 --> 00:18:37,280
but as it is common they work in a team

438
00:18:37,280 --> 00:18:39,520
at a company

439
00:18:39,520 --> 00:18:40,559
however

440
00:18:40,559 --> 00:18:42,799
in this company they might have

441
00:18:42,799 --> 00:18:44,640
different teams working on the web

442
00:18:44,640 --> 00:18:46,720
presence

443
00:18:46,720 --> 00:18:50,160
and those teams might not all be aware

444
00:18:50,160 --> 00:18:52,480
of csp compliance

445
00:18:52,480 --> 00:18:53,440
so

446
00:18:53,440 --> 00:18:58,480
one team might cause issues with the csp

447
00:18:58,480 --> 00:19:01,360
because they are not aware of the csp

448
00:19:01,360 --> 00:19:04,240
and not aware of well csp compliant

449
00:19:04,240 --> 00:19:06,960
coding standards as it was reported by

450
00:19:06,960 --> 00:19:09,200
one of our participants

451
00:19:09,200 --> 00:19:09,970
that

452
00:19:09,970 --> 00:19:11,200
[Music]

453
00:19:11,200 --> 00:19:13,360
where the marketing team

454
00:19:13,360 --> 00:19:14,480
will

455
00:19:14,480 --> 00:19:17,600
basically cause a lot of errors in

456
00:19:17,600 --> 00:19:20,320
the csp

457
00:19:20,320 --> 00:19:21,200
also

458
00:19:21,200 --> 00:19:24,720
the company might have contracts with

459
00:19:24,720 --> 00:19:26,320
for example certain advertisement

460
00:19:26,320 --> 00:19:29,919
vendors so the developer can not freely

461
00:19:29,919 --> 00:19:33,200
choose which third parties

462
00:19:33,200 --> 00:19:36,559
can be used in the application

463
00:19:36,559 --> 00:19:39,360
but are third party is really such a

464
00:19:39,360 --> 00:19:42,240
problem to csp

465
00:19:42,240 --> 00:19:44,400
well in another study

466
00:19:44,400 --> 00:19:46,400
conducted by

467
00:19:46,400 --> 00:19:48,000
mario stefans

468
00:19:48,000 --> 00:19:50,080
they have shown that many problems

469
00:19:50,080 --> 00:19:52,320
regarding the usage of insecure

470
00:19:52,320 --> 00:19:56,240
practices in csp like unsafe inline

471
00:19:56,240 --> 00:19:58,240
we're not doing first

472
00:19:58,240 --> 00:20:01,280
we're not caused by a first party code

473
00:20:01,280 --> 00:20:04,400
but rather a problem of third parties

474
00:20:04,400 --> 00:20:07,200
that mandate the usage of

475
00:20:07,200 --> 00:20:10,720
unsafe inline in this case

476
00:20:11,440 --> 00:20:13,760
they mandate it either because they are

477
00:20:13,760 --> 00:20:14,799
using

478
00:20:14,799 --> 00:20:17,440
inline scripts which

479
00:20:17,440 --> 00:20:19,840
could in theory be allowed via

480
00:20:19,840 --> 00:20:22,880
propagating nonsense to those scripts

481
00:20:22,880 --> 00:20:26,799
but more severe many third parties are

482
00:20:26,799 --> 00:20:30,000
using inline event antlers which cannot

483
00:20:30,000 --> 00:20:32,480
be announced and therefore require

484
00:20:32,480 --> 00:20:35,919
unsafe inline to be executed

485
00:20:35,919 --> 00:20:38,720
also stefan's data has shown that this

486
00:20:38,720 --> 00:20:42,080
problem is not only co caused by

487
00:20:42,080 --> 00:20:43,600
one

488
00:20:43,600 --> 00:20:46,559
third party of a website

489
00:20:46,559 --> 00:20:49,679
but in many cases

490
00:20:49,679 --> 00:20:52,480
it's caused by multiple third parties in

491
00:20:52,480 --> 00:20:55,120
some cases even 10 or more parties are

492
00:20:55,120 --> 00:20:57,919
hindering the usage of a sane

493
00:20:57,919 --> 00:21:01,200
content security policy

494
00:21:01,360 --> 00:21:04,080
and to make the problem of third party

495
00:21:04,080 --> 00:21:07,440
code even worse those parties are not a

496
00:21:07,440 --> 00:21:08,960
fixed set

497
00:21:08,960 --> 00:21:11,840
but the exact domains of the third

498
00:21:11,840 --> 00:21:15,120
parties that a site includes is heavily

499
00:21:15,120 --> 00:21:17,600
fluctuating

500
00:21:17,600 --> 00:21:20,880
in a 12 week long experiment conducted

501
00:21:20,880 --> 00:21:22,320
on the tranco

502
00:21:22,320 --> 00:21:24,960
top 10 000 websites

503
00:21:24,960 --> 00:21:26,880
stefan said i

504
00:21:26,880 --> 00:21:30,799
issued a crawl of those websites every

505
00:21:30,799 --> 00:21:33,760
week to collect the included parties for

506
00:21:33,760 --> 00:21:35,600
each site

507
00:21:35,600 --> 00:21:40,240
of those 10 000 websites about 8 000

508
00:21:40,240 --> 00:21:41,520
actually

509
00:21:41,520 --> 00:21:44,880
where dynamic pages so pages that

510
00:21:44,880 --> 00:21:48,400
actually contain javascript

511
00:21:48,559 --> 00:21:50,159
after the first week

512
00:21:50,159 --> 00:21:53,840
the researchers noticed that nearly

513
00:21:53,840 --> 00:21:56,400
3 000 new hosts

514
00:21:56,400 --> 00:21:57,280
were

515
00:21:57,280 --> 00:21:58,400
were added

516
00:21:58,400 --> 00:22:01,280
approximately half of them originating

517
00:22:01,280 --> 00:22:04,240
from third-party inclusions

518
00:22:04,240 --> 00:22:06,000
and even

519
00:22:06,000 --> 00:22:09,280
and even at the end of this 12-week long

520
00:22:09,280 --> 00:22:13,120
experiment more than 15 new hosts were

521
00:22:13,120 --> 00:22:14,960
added

522
00:22:14,960 --> 00:22:16,880
which makes a

523
00:22:16,880 --> 00:22:18,480
csp

524
00:22:18,480 --> 00:22:23,520
a host-based csp very hard to maintain

525
00:22:23,679 --> 00:22:25,120
but even

526
00:22:25,120 --> 00:22:28,480
if all stars align and the developer can

527
00:22:28,480 --> 00:22:30,799
build a proper csp

528
00:22:30,799 --> 00:22:32,000
the different

529
00:22:32,000 --> 00:22:33,760
browser implementation

530
00:22:33,760 --> 00:22:35,520
and insufficient

531
00:22:35,520 --> 00:22:37,919
console messages and false positive

532
00:22:37,919 --> 00:22:40,000
violation reports

533
00:22:40,000 --> 00:22:42,400
caused by browser features or extensions

534
00:22:42,400 --> 00:22:44,799
can make the deployment harder as it

535
00:22:44,799 --> 00:22:46,720
needs to be

536
00:22:46,720 --> 00:22:48,240
for example

537
00:22:48,240 --> 00:22:49,919
at the time where we conducted this

538
00:22:49,919 --> 00:22:52,159
study participants complained that

539
00:22:52,159 --> 00:22:54,880
safari is not supporting the strict

540
00:22:54,880 --> 00:22:57,200
dynamic source expression

541
00:22:57,200 --> 00:23:01,440
probably due to security considerations

542
00:23:01,440 --> 00:23:04,240
however in the meanwhile they have added

543
00:23:04,240 --> 00:23:07,679
the support for the expression

544
00:23:07,679 --> 00:23:08,400
also

545
00:23:08,400 --> 00:23:11,120
the level of detail provided via

546
00:23:11,120 --> 00:23:13,120
messages in the developer console is

547
00:23:13,120 --> 00:23:16,159
inconsistent chrome is providing far

548
00:23:16,159 --> 00:23:18,640
more information about violations than

549
00:23:18,640 --> 00:23:22,080
for example firefox does

550
00:23:22,080 --> 00:23:24,480
but there are even more inconsistencies

551
00:23:24,480 --> 00:23:28,480
for example websockets are sometimes

552
00:23:28,480 --> 00:23:31,039
in some browsers counting into the safe

553
00:23:31,039 --> 00:23:32,400
itself

554
00:23:32,400 --> 00:23:35,200
source expression and in other browsers

555
00:23:35,200 --> 00:23:36,880
there it does

556
00:23:36,880 --> 00:23:39,440
the protocol does not count

557
00:23:39,440 --> 00:23:40,640
uh

558
00:23:40,640 --> 00:23:44,880
some browsers support the unsafe hashes

559
00:23:44,880 --> 00:23:46,640
source expressions

560
00:23:46,640 --> 00:23:50,320
and some browsers do not support them

561
00:23:50,320 --> 00:23:51,120
but

562
00:23:51,120 --> 00:23:52,960
use this

563
00:23:52,960 --> 00:23:55,840
behavior as default behavior

564
00:23:55,840 --> 00:23:59,279
and there is inconsistent hashing of for

565
00:23:59,279 --> 00:24:01,360
example javascript where else because

566
00:24:01,360 --> 00:24:02,320
some are

567
00:24:02,320 --> 00:24:04,720
some hash with and some without protocol

568
00:24:04,720 --> 00:24:05,760
and

569
00:24:05,760 --> 00:24:08,320
plenty of more inconsistencies

570
00:24:08,320 --> 00:24:11,600
between browsers

571
00:24:12,000 --> 00:24:14,880
also the reporting feature of csp can

572
00:24:14,880 --> 00:24:16,400
cause problems

573
00:24:16,400 --> 00:24:18,640
if you for example gather the violation

574
00:24:18,640 --> 00:24:21,520
reports on a popular website with a lot

575
00:24:21,520 --> 00:24:22,880
of users

576
00:24:22,880 --> 00:24:25,520
those users might use all kinds of

577
00:24:25,520 --> 00:24:27,279
browser

578
00:24:27,279 --> 00:24:29,919
in some browsers built-in features can

579
00:24:29,919 --> 00:24:32,400
cause csp violations

580
00:24:32,400 --> 00:24:34,400
and therefore trigger false positive

581
00:24:34,400 --> 00:24:37,279
violation reports

582
00:24:37,279 --> 00:24:39,520
but not only the browser itself can

583
00:24:39,520 --> 00:24:42,240
cause violations

584
00:24:42,240 --> 00:24:44,799
also the users might have

585
00:24:44,799 --> 00:24:47,120
installed all kinds of extensions and

586
00:24:47,120 --> 00:24:49,120
plugins that interfere with the

587
00:24:49,120 --> 00:24:52,159
application and cause false negative

588
00:24:52,159 --> 00:24:53,279
reports

589
00:24:53,279 --> 00:24:55,679
and false positive reports

590
00:24:55,679 --> 00:24:59,120
depending on the amount of visitors that

591
00:24:59,120 --> 00:25:00,799
the website has

592
00:25:00,799 --> 00:25:02,240
it

593
00:25:02,240 --> 00:25:05,520
may not only lead to many false positive

594
00:25:05,520 --> 00:25:10,240
reports that are hindering the

595
00:25:10,240 --> 00:25:12,400
detection of actual problems with the

596
00:25:12,400 --> 00:25:14,960
csp configuration

597
00:25:14,960 --> 00:25:17,200
but one of our participants even

598
00:25:17,200 --> 00:25:19,919
reported a case where the amount of

599
00:25:19,919 --> 00:25:21,360
report

600
00:25:21,360 --> 00:25:24,000
reports actually caused the denial of

601
00:25:24,000 --> 00:25:27,520
service against the own server

602
00:25:27,520 --> 00:25:29,840
so one lesson that you can learn from

603
00:25:29,840 --> 00:25:32,000
that don't host your reporting

604
00:25:32,000 --> 00:25:34,000
infrastructure on the same machine as

605
00:25:34,000 --> 00:25:38,000
your web presence is running

606
00:25:39,120 --> 00:25:41,520
during the interview but especially

607
00:25:41,520 --> 00:25:44,880
during the coding task we have seen many

608
00:25:44,880 --> 00:25:47,520
different strategies how certain

609
00:25:47,520 --> 00:25:50,000
problems with csp

610
00:25:50,000 --> 00:25:51,840
can be

611
00:25:51,840 --> 00:25:53,200
mitigated

612
00:25:53,200 --> 00:25:56,320
for example in the initial deployment of

613
00:25:56,320 --> 00:25:59,600
csp some of the participants

614
00:25:59,600 --> 00:26:03,039
start with a policy and report only mode

615
00:26:03,039 --> 00:26:04,880
in this mode the policy is not enforced

616
00:26:04,880 --> 00:26:07,279
but violations are reported to the

617
00:26:07,279 --> 00:26:08,880
developer

618
00:26:08,880 --> 00:26:10,960
others however tend to start with an

619
00:26:10,960 --> 00:26:12,720
enforced csp

620
00:26:12,720 --> 00:26:15,360
which then results in a loss of

621
00:26:15,360 --> 00:26:16,960
functionality in some parts of the

622
00:26:16,960 --> 00:26:18,799
application

623
00:26:18,799 --> 00:26:21,840
also uh tools for the initial deployment

624
00:26:21,840 --> 00:26:24,880
for example to start with a generated

625
00:26:24,880 --> 00:26:27,679
allow list for the csp were often

626
00:26:27,679 --> 00:26:31,919
mentioned or used during our study

627
00:26:32,000 --> 00:26:34,559
principles for csp deployment were also

628
00:26:34,559 --> 00:26:37,039
presented by our participants

629
00:26:37,039 --> 00:26:40,159
some tend to use one general csp for the

630
00:26:40,159 --> 00:26:42,559
whole website

631
00:26:42,559 --> 00:26:46,000
others used separate csps for individual

632
00:26:46,000 --> 00:26:49,279
pages sometimes also deployed as html

633
00:26:49,279 --> 00:26:50,559
meter tags

634
00:26:50,559 --> 00:26:52,960
because they have done this because the

635
00:26:52,960 --> 00:26:56,799
requested resources for each page are

636
00:26:56,799 --> 00:26:59,200
different

637
00:26:59,520 --> 00:27:03,279
also the usage of the report only

638
00:27:03,279 --> 00:27:06,480
mode of csp to get reports from the live

639
00:27:06,480 --> 00:27:09,360
users of the application was mentioned

640
00:27:09,360 --> 00:27:11,039
as a common way

641
00:27:11,039 --> 00:27:15,039
to find issues with the csp

642
00:27:15,039 --> 00:27:18,080
even after the initial deployment tools

643
00:27:18,080 --> 00:27:20,159
were used to maintain the csp for

644
00:27:20,159 --> 00:27:23,840
example to analyze the amount of

645
00:27:23,840 --> 00:27:26,320
violation reports for example filtering

646
00:27:26,320 --> 00:27:29,520
out false positive reports

647
00:27:29,520 --> 00:27:30,559
and

648
00:27:30,559 --> 00:27:33,360
as a third category of strategies we

649
00:27:33,360 --> 00:27:35,760
have those for solving problems that

650
00:27:35,760 --> 00:27:39,520
occur during the deployment of csp

651
00:27:39,520 --> 00:27:41,440
which are as we have seen in the

652
00:27:41,440 --> 00:27:43,600
presentation of the roadblocks

653
00:27:43,600 --> 00:27:46,399
quite a lot

654
00:27:47,039 --> 00:27:49,120
one big problem of

655
00:27:49,120 --> 00:27:50,799
the participants

656
00:27:50,799 --> 00:27:53,600
was the presence of inline javascript

657
00:27:53,600 --> 00:27:56,480
tags although some of the participants

658
00:27:56,480 --> 00:27:59,039
used nonsense or hashes to allow the

659
00:27:59,039 --> 00:28:02,320
execution of the trusted inline scripts

660
00:28:02,320 --> 00:28:05,840
the majority externalized the script to

661
00:28:05,840 --> 00:28:06,960
and and

662
00:28:06,960 --> 00:28:09,760
then allow itself as trusted script

663
00:28:09,760 --> 00:28:10,960
source

664
00:28:10,960 --> 00:28:13,279
but how does this look like in practice

665
00:28:13,279 --> 00:28:15,760
if we have an inline javascript tech we

666
00:28:15,760 --> 00:28:16,880
can

667
00:28:16,880 --> 00:28:18,399
either

668
00:28:18,399 --> 00:28:20,240
move its source code to an external

669
00:28:20,240 --> 00:28:24,000
script and allow self in our csp

670
00:28:24,000 --> 00:28:27,600
or we can add a nonce to our csp and use

671
00:28:27,600 --> 00:28:30,240
the nons to allow the execution of the

672
00:28:30,240 --> 00:28:31,200
script

673
00:28:31,200 --> 00:28:32,720
however

674
00:28:32,720 --> 00:28:35,919
the optimal solution would be to do both

675
00:28:35,919 --> 00:28:37,840
and enforce this

676
00:28:37,840 --> 00:28:39,679
and enforce both

677
00:28:39,679 --> 00:28:41,840
using policy composition

678
00:28:41,840 --> 00:28:43,120
which will

679
00:28:43,120 --> 00:28:46,399
we will talk about later

680
00:28:46,399 --> 00:28:50,240
a similar problem is the presence of

681
00:28:50,240 --> 00:28:52,080
inline events

682
00:28:52,080 --> 00:28:55,279
however here nonces are not an option

683
00:28:55,279 --> 00:28:57,679
which is why most of the participants

684
00:28:57,679 --> 00:29:00,799
externalized the events and added them

685
00:29:00,799 --> 00:29:02,880
programmatically

686
00:29:02,880 --> 00:29:05,840
still some of our participants used

687
00:29:05,840 --> 00:29:08,720
rather new features like unsafe hashes

688
00:29:08,720 --> 00:29:11,679
or script source attribute or the script

689
00:29:11,679 --> 00:29:13,840
source attribute directive to allow

690
00:29:13,840 --> 00:29:15,600
inline events

691
00:29:15,600 --> 00:29:18,320
but let's take a look on the

692
00:29:18,320 --> 00:29:21,360
most common solutions here

693
00:29:21,360 --> 00:29:25,120
as set we have to add the event

694
00:29:25,120 --> 00:29:26,640
to the

695
00:29:26,640 --> 00:29:28,960
element programmatically

696
00:29:28,960 --> 00:29:32,960
and thus we have to create a script that

697
00:29:32,960 --> 00:29:35,039
gets a handle to the targeted element

698
00:29:35,039 --> 00:29:38,080
for example via the get element by id

699
00:29:38,080 --> 00:29:40,640
function and then programmatically add

700
00:29:40,640 --> 00:29:41,919
the event

701
00:29:41,919 --> 00:29:45,919
using the event listener api

702
00:29:46,159 --> 00:29:48,480
this code snippet does then need to be

703
00:29:48,480 --> 00:29:51,520
allowed in the csp for example via a

704
00:29:51,520 --> 00:29:52,880
nonce

705
00:29:52,880 --> 00:29:57,039
again the better option is to

706
00:29:57,039 --> 00:30:00,000
do this programmatic edition not in an

707
00:30:00,000 --> 00:30:02,279
inline script but rather in a

708
00:30:02,279 --> 00:30:05,760
non-external script

709
00:30:06,559 --> 00:30:09,279
another big problem was the present of

710
00:30:09,279 --> 00:30:11,760
third party code here the participants

711
00:30:11,760 --> 00:30:14,399
either allowed the third party as a

712
00:30:14,399 --> 00:30:17,039
trusted source

713
00:30:17,039 --> 00:30:20,000
they self-hosted the loaded libraries

714
00:30:20,000 --> 00:30:22,640
or they nonce the loaded

715
00:30:22,640 --> 00:30:25,360
scripts or some even removed the

716
00:30:25,360 --> 00:30:28,159
dependency for the library

717
00:30:28,159 --> 00:30:29,360
however

718
00:30:29,360 --> 00:30:30,880
this was

719
00:30:30,880 --> 00:30:33,520
only possible because our small web

720
00:30:33,520 --> 00:30:35,279
application is

721
00:30:35,279 --> 00:30:38,640
well only a small web application and as

722
00:30:38,640 --> 00:30:41,200
we have seen earlier

723
00:30:41,200 --> 00:30:43,760
it is sometimes not possible to solve

724
00:30:43,760 --> 00:30:47,120
issues introduced by third parties

725
00:30:47,120 --> 00:30:49,279
therefore in worst case

726
00:30:49,279 --> 00:30:51,760
you need to give up a certain level of

727
00:30:51,760 --> 00:30:54,399
control or even allow the execution of

728
00:30:54,399 --> 00:30:58,640
inline resources if your third party

729
00:30:58,640 --> 00:31:02,240
is not csp compliant

730
00:31:02,840 --> 00:31:06,399
so in general if you want to deploy a

731
00:31:06,399 --> 00:31:09,279
csp for a web application um

732
00:31:09,279 --> 00:31:12,159
the best way how you should start

733
00:31:12,159 --> 00:31:15,200
is deploying a csp in the report only

734
00:31:15,200 --> 00:31:17,440
mode such that you

735
00:31:17,440 --> 00:31:18,799
well don't

736
00:31:18,799 --> 00:31:22,000
cause fatal errors in your application

737
00:31:22,000 --> 00:31:26,640
also you should use a non-spaced policy

738
00:31:26,640 --> 00:31:30,799
if need to be with strict dynamic

739
00:31:31,600 --> 00:31:33,679
those should be preferred over host

740
00:31:33,679 --> 00:31:37,360
based lists because a non-spaced csp is

741
00:31:37,360 --> 00:31:41,918
easier to deploy and easier to maintain

742
00:31:42,159 --> 00:31:44,880
if you start a new project the whole

743
00:31:44,880 --> 00:31:47,760
application should be built with csp in

744
00:31:47,760 --> 00:31:50,159
mind from the beginning such that stuff

745
00:31:50,159 --> 00:31:52,799
like inline scripts and inline events

746
00:31:52,799 --> 00:31:54,240
are not happening

747
00:31:54,240 --> 00:31:58,159
so you should thread csp as an integral

748
00:31:58,159 --> 00:32:00,960
integral part of your development life

749
00:32:00,960 --> 00:32:02,720
cycle

750
00:32:02,720 --> 00:32:05,360
also for new applications you should

751
00:32:05,360 --> 00:32:08,559
choose your third part

752
00:32:08,559 --> 00:32:10,320
you should choose your third parties

753
00:32:10,320 --> 00:32:12,480
with care so

754
00:32:12,480 --> 00:32:15,120
if possible only chose third parties

755
00:32:15,120 --> 00:32:17,039
that are csp compliant

756
00:32:17,039 --> 00:32:19,200
but if you want to add a csp to an

757
00:32:19,200 --> 00:32:21,200
existing application you should take

758
00:32:21,200 --> 00:32:24,720
care of the issues one after another

759
00:32:24,720 --> 00:32:25,679
so

760
00:32:25,679 --> 00:32:29,279
if your setup or framework supports the

761
00:32:29,279 --> 00:32:32,000
use of nonsense you should use nonsense

762
00:32:32,000 --> 00:32:34,240
for all assets um

763
00:32:34,240 --> 00:32:36,159
even if it is not supporting nonsense

764
00:32:36,159 --> 00:32:40,640
directly if you can for example in your

765
00:32:40,640 --> 00:32:43,600
backend generate random numbers and pass

766
00:32:43,600 --> 00:32:45,600
them to your

767
00:32:45,600 --> 00:32:47,600
html renderer

768
00:32:47,600 --> 00:32:49,840
it

769
00:32:49,840 --> 00:32:51,440
you you can basically create the

770
00:32:51,440 --> 00:32:53,840
non-support yourself and you should use

771
00:32:53,840 --> 00:32:55,279
nonsense for all

772
00:32:55,279 --> 00:32:58,640
your javascript assets

773
00:32:58,640 --> 00:33:00,240
but if

774
00:33:00,240 --> 00:33:03,039
for some reason for example a wordpress

775
00:33:03,039 --> 00:33:05,760
plugin is not not compliant with nonsys

776
00:33:05,760 --> 00:33:07,440
and therefore

777
00:33:07,440 --> 00:33:12,320
you cannot use a non-based csp

778
00:33:12,799 --> 00:33:15,760
in such a case you should

779
00:33:15,760 --> 00:33:16,799
allow

780
00:33:16,799 --> 00:33:20,480
the third parties with a full url

781
00:33:20,480 --> 00:33:21,919
and

782
00:33:21,919 --> 00:33:24,640
as we have seen earlier you should move

783
00:33:24,640 --> 00:33:29,120
all your inline scripts and and inline

784
00:33:29,120 --> 00:33:30,240
events

785
00:33:30,240 --> 00:33:33,200
to external scripts such that you can

786
00:33:33,200 --> 00:33:35,760
arrive at a same

787
00:33:35,760 --> 00:33:38,760
csp

788
00:33:39,279 --> 00:33:40,640
but for those

789
00:33:40,640 --> 00:33:42,799
of you that already deployed the same

790
00:33:42,799 --> 00:33:45,919
csp we want to encourage you to take the

791
00:33:45,919 --> 00:33:49,279
next step hardening your policy

792
00:33:49,279 --> 00:33:52,559
but why is this actually necessary many

793
00:33:52,559 --> 00:33:56,000
of you know from other csp talks or blog

794
00:33:56,000 --> 00:33:57,519
posts

795
00:33:57,519 --> 00:34:00,240
that there is there

796
00:34:00,240 --> 00:34:03,440
is a plethora of ways how you can bypass

797
00:34:03,440 --> 00:34:04,880
a host based

798
00:34:04,880 --> 00:34:07,600
list because

799
00:34:07,600 --> 00:34:08,800
one of the

800
00:34:08,800 --> 00:34:12,719
hosts you allowed has jsonp endpoints

801
00:34:12,719 --> 00:34:15,280
they might host libraries that contain

802
00:34:15,280 --> 00:34:18,000
script gadgets they might be susceptible

803
00:34:18,000 --> 00:34:22,480
to open redirects and so on

804
00:34:22,480 --> 00:34:23,599
however

805
00:34:23,599 --> 00:34:27,520
also non-space policies can be bypassed

806
00:34:27,520 --> 00:34:30,719
can be stolen sorry

807
00:34:30,800 --> 00:34:33,119
imagine this code sample that you see

808
00:34:33,119 --> 00:34:35,440
here is hosted

809
00:34:35,440 --> 00:34:37,440
on

810
00:34:37,440 --> 00:34:39,040
on a web application

811
00:34:39,040 --> 00:34:41,199
if you now have an injection point right

812
00:34:41,199 --> 00:34:44,560
before that script tag an attacker might

813
00:34:44,560 --> 00:34:48,000
inject the following character sequence

814
00:34:48,000 --> 00:34:49,199
and then

815
00:34:49,199 --> 00:34:50,480
the

816
00:34:50,480 --> 00:34:53,119
double takes at the foo attribute are

817
00:34:53,119 --> 00:34:56,079
consuming the opening the actually

818
00:34:56,079 --> 00:34:58,160
opening script tag from the benign

819
00:34:58,160 --> 00:35:00,000
script and

820
00:35:00,000 --> 00:35:02,960
because html parsers are very error

821
00:35:02,960 --> 00:35:06,320
tolerant this benign js

822
00:35:06,320 --> 00:35:08,640
double ticks is just seen as garbage

823
00:35:08,640 --> 00:35:11,040
that you can throw away and

824
00:35:11,040 --> 00:35:12,640
the resulting

825
00:35:12,640 --> 00:35:14,320
code is then

826
00:35:14,320 --> 00:35:18,079
a script with a weird foo attribute that

827
00:35:18,079 --> 00:35:22,000
loads a script from attacker.com

828
00:35:22,000 --> 00:35:22,720
but

829
00:35:22,720 --> 00:35:25,359
this script tag does also carry a valid

830
00:35:25,359 --> 00:35:27,200
nonce

831
00:35:27,200 --> 00:35:28,880
so

832
00:35:28,880 --> 00:35:31,520
as you can see also nonsense can be

833
00:35:31,520 --> 00:35:34,079
stolen so assuming

834
00:35:34,079 --> 00:35:37,280
uh you already deployed one same csp

835
00:35:37,280 --> 00:35:40,400
either host or non-space the best way to

836
00:35:40,400 --> 00:35:42,240
harden this csp against the

837
00:35:42,240 --> 00:35:45,119
aforementioned attacks is to deploy an

838
00:35:45,119 --> 00:35:47,920
additional csp

839
00:35:47,920 --> 00:35:50,320
the reason why this

840
00:35:50,320 --> 00:35:54,640
actually works is that all deployed csps

841
00:35:54,640 --> 00:35:56,160
are enforced by the browser

842
00:35:56,160 --> 00:35:59,160
simultaneously

843
00:36:00,079 --> 00:36:01,599
so

844
00:36:01,599 --> 00:36:04,480
if you haven't one csp

845
00:36:04,480 --> 00:36:06,800
that

846
00:36:07,520 --> 00:36:10,960
enforces the non nonsense to be present

847
00:36:10,960 --> 00:36:13,839
on scripts and another csp that only

848
00:36:13,839 --> 00:36:18,079
allows self and advertisement.com

849
00:36:18,079 --> 00:36:20,800
as valid sources

850
00:36:20,800 --> 00:36:23,839
a script in your application must

851
00:36:23,839 --> 00:36:26,240
originate from one of the trusted

852
00:36:26,240 --> 00:36:29,280
sources and at the same time also carry

853
00:36:29,280 --> 00:36:32,000
the specified nones

854
00:36:32,000 --> 00:36:35,200
and well as in case of the initial

855
00:36:35,200 --> 00:36:37,040
deployment

856
00:36:37,040 --> 00:36:39,680
you should always first start with the

857
00:36:39,680 --> 00:36:40,960
policy

858
00:36:40,960 --> 00:36:43,280
in this case the additional policy

859
00:36:43,280 --> 00:36:45,760
in report only mode and then

860
00:36:45,760 --> 00:36:48,079
if everything is working you should

861
00:36:48,079 --> 00:36:51,200
start to enforce it

862
00:36:52,000 --> 00:36:52,880
so

863
00:36:52,880 --> 00:36:56,480
what have we seen in the last 40 minutes

864
00:36:56,480 --> 00:36:57,680
uh

865
00:36:57,680 --> 00:37:00,160
many csps deployed in the wild are

866
00:37:00,160 --> 00:37:03,200
trivially by possible so it seems that

867
00:37:03,200 --> 00:37:07,359
csp and developers are natural enemies

868
00:37:07,359 --> 00:37:08,400
however

869
00:37:08,400 --> 00:37:10,160
one big roadblocks

870
00:37:10,160 --> 00:37:12,720
block for same csp deployment

871
00:37:12,720 --> 00:37:16,560
are non-compliant third parties

872
00:37:16,560 --> 00:37:20,400
also inline codes and events especially

873
00:37:20,400 --> 00:37:23,520
in big legacy applications

874
00:37:23,520 --> 00:37:26,160
cause can cause massive engineering

875
00:37:26,160 --> 00:37:29,280
effort for developers

876
00:37:29,280 --> 00:37:31,839
in addition to that the inconsistent

877
00:37:31,839 --> 00:37:34,560
implementation and the debug messages

878
00:37:34,560 --> 00:37:36,960
from the browser when those are making

879
00:37:36,960 --> 00:37:39,119
the developer's life harder than it need

880
00:37:39,119 --> 00:37:41,200
to be

881
00:37:41,200 --> 00:37:44,800
so as you can see there is still a lot

882
00:37:44,800 --> 00:37:47,599
of work to be done to make csp the great

883
00:37:47,599 --> 00:37:50,720
mechanism that it ought to be

884
00:37:50,720 --> 00:37:52,560
and

885
00:37:52,560 --> 00:37:54,800
we have not only learned something about

886
00:37:54,800 --> 00:37:56,720
csp in this study

887
00:37:56,720 --> 00:37:58,960
we also experienced that getting

888
00:37:58,960 --> 00:38:02,079
participants for usable web security

889
00:38:02,079 --> 00:38:06,640
research is a very challenging task

890
00:38:06,640 --> 00:38:07,359
we

891
00:38:07,359 --> 00:38:08,640
had

892
00:38:08,640 --> 00:38:11,200
we tried to find participants

893
00:38:11,200 --> 00:38:13,520
at via

894
00:38:13,520 --> 00:38:16,240
advertisements on linkedin we had

895
00:38:16,240 --> 00:38:19,440
twitter campaigns uh

896
00:38:19,440 --> 00:38:21,680
we even con

897
00:38:21,680 --> 00:38:25,280
we we even um talked with people from

898
00:38:25,280 --> 00:38:28,640
the over germany to

899
00:38:28,640 --> 00:38:29,680
share

900
00:38:29,680 --> 00:38:30,800
our

901
00:38:30,800 --> 00:38:34,400
call for participants in the

902
00:38:34,880 --> 00:38:37,280
in in some slack i don't know whether it

903
00:38:37,280 --> 00:38:38,560
was the

904
00:38:38,560 --> 00:38:40,880
slack of the whole ovus or if they have

905
00:38:40,880 --> 00:38:44,880
an internal german over slack but

906
00:38:44,880 --> 00:38:47,920
so we have tried many ways of of getting

907
00:38:47,920 --> 00:38:50,400
participants and we have

908
00:38:50,400 --> 00:38:52,720
more topics in our research area that

909
00:38:52,720 --> 00:38:54,960
need to be explored so

910
00:38:54,960 --> 00:38:57,040
if you are interested in helping us

911
00:38:57,040 --> 00:38:59,040
improving the state of the web

912
00:38:59,040 --> 00:39:01,520
please scan this app or

913
00:39:01,520 --> 00:39:05,160
visit survey.swag.cisba.zarland

914
00:39:06,480 --> 00:39:09,440
and will help us improve mechanisms like

915
00:39:09,440 --> 00:39:11,280
csp

916
00:39:11,280 --> 00:39:14,000
and with that i am happy to take your

917
00:39:14,000 --> 00:39:17,839
questions now in the q a session or

918
00:39:17,839 --> 00:39:22,160
later via email or twitter

