1
00:00:01,420 --> 00:00:05,630
[Music]

2
00:00:05,920 --> 00:00:06,960
okay

3
00:00:06,960 --> 00:00:10,320
so hi everyone i'm barack oli and i'm

4
00:00:10,320 --> 00:00:12,000
going to talk about exploiting web

5
00:00:12,000 --> 00:00:14,240
messaging implementations

6
00:00:14,240 --> 00:00:17,680
um so first of all who am i um by day

7
00:00:17,680 --> 00:00:19,920
i'm the co-founder and ceo of anza

8
00:00:19,920 --> 00:00:22,960
security uh we are developing an aspm

9
00:00:22,960 --> 00:00:24,880
application security posture management

10
00:00:24,880 --> 00:00:28,720
platform uh in order to help

11
00:00:28,720 --> 00:00:31,359
appsec teams to manage and automate

12
00:00:31,359 --> 00:00:33,280
their scalable application security

13
00:00:33,280 --> 00:00:34,320
program

14
00:00:34,320 --> 00:00:36,800
um by night i'm

15
00:00:36,800 --> 00:00:38,879
application security researcher back

16
00:00:38,879 --> 00:00:40,800
bounty hunter blogger

17
00:00:40,800 --> 00:00:42,559
um you can check my blog for the

18
00:00:42,559 --> 00:00:44,719
interesting researchers and the findings

19
00:00:44,719 --> 00:00:46,960
that i've done

20
00:00:46,960 --> 00:00:49,760
and i'm the author of authorize which is

21
00:00:49,760 --> 00:00:51,920
the burp extension

22
00:00:51,920 --> 00:00:54,320
the most popular burp extension for

23
00:00:54,320 --> 00:00:56,239
automatic detection of authentication

24
00:00:56,239 --> 00:00:58,719
and authorization flaws this is a

25
00:00:58,719 --> 00:01:01,600
project that i am contributor for years

26
00:01:01,600 --> 00:01:03,520
and if you are not familiar with it i am

27
00:01:03,520 --> 00:01:05,119
highly recommended

28
00:01:05,119 --> 00:01:07,439
using it

29
00:01:07,439 --> 00:01:08,479
so

30
00:01:08,479 --> 00:01:11,360
what exactly are we going to talk about

31
00:01:11,360 --> 00:01:13,439
we're going to talk about what is cross

32
00:01:13,439 --> 00:01:15,600
document messaging

33
00:01:15,600 --> 00:01:18,560
cross document messaging security model

34
00:01:18,560 --> 00:01:20,960
and weaknesses

35
00:01:20,960 --> 00:01:22,799
we're going to see my hacking

36
00:01:22,799 --> 00:01:24,880
methodology

37
00:01:24,880 --> 00:01:27,840
and some real world use cases

38
00:01:27,840 --> 00:01:28,720
um

39
00:01:28,720 --> 00:01:31,040
we'll see pasta which is an open source

40
00:01:31,040 --> 00:01:33,360
tool that we are developed in order to

41
00:01:33,360 --> 00:01:34,880
find such flaws

42
00:01:34,880 --> 00:01:37,680
and we'll go through the best practices

43
00:01:37,680 --> 00:01:40,159
in the end

44
00:01:40,159 --> 00:01:43,200
so what is cross document messaging

45
00:01:43,200 --> 00:01:45,439
cross document messaging is the actual

46
00:01:45,439 --> 00:01:46,960
ability

47
00:01:46,960 --> 00:01:49,759
to send and receive messages from one

48
00:01:49,759 --> 00:01:52,079
window to another

49
00:01:52,079 --> 00:01:53,439
now

50
00:01:53,439 --> 00:01:55,280
as you can see in here

51
00:01:55,280 --> 00:01:58,399
we can see that we have alice.com

52
00:01:58,399 --> 00:02:01,040
which holds a window and we have another

53
00:02:01,040 --> 00:02:04,399
window that's hosted on bob.com

54
00:02:04,399 --> 00:02:06,000
we can see that

55
00:02:06,000 --> 00:02:09,119
alice.com send message to bob.com saying

56
00:02:09,119 --> 00:02:10,479
hi bob

57
00:02:10,479 --> 00:02:13,040
bob uh received the message processed it

58
00:02:13,040 --> 00:02:16,000
and sent back message to alice saying

59
00:02:16,000 --> 00:02:17,360
hey alice

60
00:02:17,360 --> 00:02:19,520
and basically so

61
00:02:19,520 --> 00:02:21,680
this is it this is just the ability of

62
00:02:21,680 --> 00:02:24,160
two windows to communicate with each

63
00:02:24,160 --> 00:02:24,959
other

64
00:02:24,959 --> 00:02:26,480
um there is

65
00:02:26,480 --> 00:02:30,560
no uh network involvement it is all uh

66
00:02:30,560 --> 00:02:33,599
happening inside the browser it's in

67
00:02:33,599 --> 00:02:35,680
memory communication then there is no

68
00:02:35,680 --> 00:02:39,280
involvement of any networking at all

69
00:02:39,280 --> 00:02:41,760
so we're not going to talk about http at

70
00:02:41,760 --> 00:02:43,360
all

71
00:02:43,360 --> 00:02:45,680
now let's understand how

72
00:02:45,680 --> 00:02:47,200
we are going to

73
00:02:47,200 --> 00:02:48,879
receive a message

74
00:02:48,879 --> 00:02:52,239
so first of all let's understand uh what

75
00:02:52,239 --> 00:02:53,519
is uh

76
00:02:53,519 --> 00:02:55,760
what happened inside the browser so we

77
00:02:55,760 --> 00:02:59,280
have the browser it has um

78
00:02:59,280 --> 00:03:02,800
there are its own tabs each tab have a

79
00:03:02,800 --> 00:03:07,040
region each region contains

80
00:03:07,599 --> 00:03:11,599
windows these windows renders a document

81
00:03:11,599 --> 00:03:12,800
and in this

82
00:03:12,800 --> 00:03:15,360
this document we have scripts

83
00:03:15,360 --> 00:03:16,159
now

84
00:03:16,159 --> 00:03:19,280
these scripts can actually

85
00:03:19,280 --> 00:03:22,159
um have the ability uh to receive

86
00:03:22,159 --> 00:03:23,920
message so

87
00:03:23,920 --> 00:03:26,239
basically in order to receive message

88
00:03:26,239 --> 00:03:28,239
we'll need to

89
00:03:28,239 --> 00:03:30,080
use um

90
00:03:30,080 --> 00:03:32,640
to add an event listener into the window

91
00:03:32,640 --> 00:03:33,840
object

92
00:03:33,840 --> 00:03:37,360
so we are need to use the window dot add

93
00:03:37,360 --> 00:03:38,879
event listener

94
00:03:38,879 --> 00:03:41,519
with event type message so we will be

95
00:03:41,519 --> 00:03:44,720
able to receive the message and and

96
00:03:44,720 --> 00:03:47,920
and handle it or we can use the window

97
00:03:47,920 --> 00:03:50,239
data message it's just a synthetic sugar

98
00:03:50,239 --> 00:03:51,599
for that

99
00:03:51,599 --> 00:03:53,120
um

100
00:03:53,120 --> 00:03:56,720
now as you can see in here um

101
00:03:56,720 --> 00:04:00,640
so when we are implementing a listener

102
00:04:00,640 --> 00:04:02,959
we are actually getting a message event

103
00:04:02,959 --> 00:04:05,920
the message events contains um some

104
00:04:05,920 --> 00:04:07,599
properties the most interesting

105
00:04:07,599 --> 00:04:10,799
properties are the data which is

106
00:04:10,799 --> 00:04:13,680
contains the actual data that's sent

107
00:04:13,680 --> 00:04:16,238
from the sender into our

108
00:04:16,238 --> 00:04:19,199
window and the origin the actual

109
00:04:19,199 --> 00:04:22,320
origin that sends this message

110
00:04:22,320 --> 00:04:24,240
and we will elaborate it

111
00:04:24,240 --> 00:04:26,080
later on so

112
00:04:26,080 --> 00:04:30,080
this way we can easily receive messages

113
00:04:30,080 --> 00:04:33,280
now in order to send messages we'll need

114
00:04:33,280 --> 00:04:34,080
to

115
00:04:34,080 --> 00:04:35,440
first of all

116
00:04:35,440 --> 00:04:38,160
get a window reference

117
00:04:38,160 --> 00:04:39,360
now

118
00:04:39,360 --> 00:04:41,280
in order to get a window reference we

119
00:04:41,280 --> 00:04:43,680
can use two different ways

120
00:04:43,680 --> 00:04:46,479
we can embed an iframe and as you can

121
00:04:46,479 --> 00:04:47,759
see in here

122
00:04:47,759 --> 00:04:51,919
we have a code example that is actually

123
00:04:51,919 --> 00:04:54,080
creating an iframe

124
00:04:54,080 --> 00:04:57,680
setting the the source attribute as the

125
00:04:57,680 --> 00:05:00,160
uh the website that

126
00:05:00,160 --> 00:05:02,080
the page that we would like to

127
00:05:02,080 --> 00:05:03,680
communicate with

128
00:05:03,680 --> 00:05:06,639
um we see that we are pending this

129
00:05:06,639 --> 00:05:09,600
this iframe into our body then we can

130
00:05:09,600 --> 00:05:12,800
use the iframe.content window in order

131
00:05:12,800 --> 00:05:15,360
to get the window reference

132
00:05:15,360 --> 00:05:17,759
so this will be used later on

133
00:05:17,759 --> 00:05:21,600
so we'll be able to communicate with

134
00:05:22,320 --> 00:05:25,280
now another way to do that is to

135
00:05:25,280 --> 00:05:26,639
actually

136
00:05:26,639 --> 00:05:29,440
pop up a new window or tab

137
00:05:29,440 --> 00:05:32,160
using window.open

138
00:05:32,160 --> 00:05:34,720
in order to get the same window

139
00:05:34,720 --> 00:05:35,840
reference

140
00:05:35,840 --> 00:05:38,400
so once we are getting

141
00:05:38,400 --> 00:05:41,039
this window reference we can actually

142
00:05:41,039 --> 00:05:44,880
use the window.postmessage

143
00:05:44,880 --> 00:05:48,800
method in order to send message to this

144
00:05:48,800 --> 00:05:49,840
window

145
00:05:49,840 --> 00:05:52,080
now the past message when the past

146
00:05:52,080 --> 00:05:53,600
message

147
00:05:53,600 --> 00:05:56,240
method receives two arguments first is

148
00:05:56,240 --> 00:05:59,280
the message it can be string or or just

149
00:05:59,280 --> 00:06:01,919
an object and the second is the target

150
00:06:01,919 --> 00:06:04,000
origin now they target the region allows

151
00:06:04,000 --> 00:06:05,680
us to

152
00:06:05,680 --> 00:06:08,639
explicitly declare of who is the target

153
00:06:08,639 --> 00:06:11,280
or region and who should receive this

154
00:06:11,280 --> 00:06:12,240
who

155
00:06:12,240 --> 00:06:16,479
which origin should get this message

156
00:06:16,479 --> 00:06:19,039
then we can tell the browser okay

157
00:06:19,039 --> 00:06:22,080
this message needs to be sent to

158
00:06:22,080 --> 00:06:23,840
bob.com

159
00:06:23,840 --> 00:06:26,960
and the browser will ensure that

160
00:06:26,960 --> 00:06:30,080
bob.com receives this

161
00:06:30,080 --> 00:06:31,440
now so

162
00:06:31,440 --> 00:06:34,080
if we're trying to simplify

163
00:06:34,080 --> 00:06:36,960
cross-document messaging is

164
00:06:36,960 --> 00:06:38,639
the ability of two windows to

165
00:06:38,639 --> 00:06:41,600
communicate so let's see

166
00:06:41,600 --> 00:06:44,400
the most simple example in here

167
00:06:44,400 --> 00:06:47,120
of two windows to communicate with each

168
00:06:47,120 --> 00:06:48,800
other so

169
00:06:48,800 --> 00:06:51,759
on the left we have a window that hosted

170
00:06:51,759 --> 00:06:52,560
on

171
00:06:52,560 --> 00:06:55,120
on alice.com

172
00:06:55,120 --> 00:06:56,720
we can see that

173
00:06:56,720 --> 00:07:00,720
it used window.open in order to

174
00:07:00,720 --> 00:07:03,039
get the window reference to

175
00:07:03,039 --> 00:07:04,479
bob.com

176
00:07:04,479 --> 00:07:07,360
and it will the browser will pop up

177
00:07:07,360 --> 00:07:09,440
another tab with uh

178
00:07:09,440 --> 00:07:11,919
with the bob.com

179
00:07:11,919 --> 00:07:13,039
page

180
00:07:13,039 --> 00:07:15,960
and we can use the the window

181
00:07:15,960 --> 00:07:17,680
windowreference.postmessage in order to

182
00:07:17,680 --> 00:07:21,199
send the message hey bob to

183
00:07:21,199 --> 00:07:23,120
bob.com origin

184
00:07:23,120 --> 00:07:25,919
now we can see on the right side that

185
00:07:25,919 --> 00:07:28,479
bob.com code

186
00:07:28,479 --> 00:07:30,720
is actually implementing an event

187
00:07:30,720 --> 00:07:33,280
listener to handle messages

188
00:07:33,280 --> 00:07:36,680
and what it does it uses the

189
00:07:36,680 --> 00:07:39,520
window.opener in order to get a window

190
00:07:39,520 --> 00:07:42,800
reference to the origin that opened it

191
00:07:42,800 --> 00:07:45,840
in this case it's alice.com

192
00:07:45,840 --> 00:07:50,720
then he used he send a hey alice message

193
00:07:50,720 --> 00:07:53,520
and pass the target origin

194
00:07:53,520 --> 00:07:54,960
alice.com

195
00:07:54,960 --> 00:07:57,919
this actually sends the message back to

196
00:07:57,919 --> 00:08:00,479
alice

197
00:08:00,560 --> 00:08:03,199
so this is the most simplified way to

198
00:08:03,199 --> 00:08:04,400
describe

199
00:08:04,400 --> 00:08:06,479
cross document messaging

200
00:08:06,479 --> 00:08:07,360
now

201
00:08:07,360 --> 00:08:09,280
let's understand the cross document

202
00:08:09,280 --> 00:08:12,799
messaging security model

203
00:08:12,960 --> 00:08:15,680
and its weaknesses so

204
00:08:15,680 --> 00:08:16,800
basically

205
00:08:16,800 --> 00:08:19,360
we have three components when

206
00:08:19,360 --> 00:08:21,680
security feature can be implemented we

207
00:08:21,680 --> 00:08:24,240
have the sender code

208
00:08:24,240 --> 00:08:25,599
that can

209
00:08:25,599 --> 00:08:26,400
apply

210
00:08:26,400 --> 00:08:29,280
security inside the sender code the

211
00:08:29,280 --> 00:08:31,599
receiver code and the browser feature

212
00:08:31,599 --> 00:08:34,240
that allows us to set some headers in

213
00:08:34,240 --> 00:08:36,320
order to avoid risky

214
00:08:36,320 --> 00:08:38,399
situations

215
00:08:38,399 --> 00:08:41,120
so let's understand the sender code

216
00:08:41,120 --> 00:08:42,640
security model

217
00:08:42,640 --> 00:08:46,320
so the sender code must specify uh the

218
00:08:46,320 --> 00:08:47,839
target origin

219
00:08:47,839 --> 00:08:50,640
now the targeted region

220
00:08:50,640 --> 00:08:51,760
can be

221
00:08:51,760 --> 00:08:53,519
used

222
00:08:53,519 --> 00:08:56,800
via the value wildcard saying that there

223
00:08:56,800 --> 00:08:59,440
is no preferences of who should get

224
00:08:59,440 --> 00:09:01,920
their who should be the recipients and

225
00:09:01,920 --> 00:09:03,839
then basically

226
00:09:03,839 --> 00:09:06,240
any uh any

227
00:09:06,240 --> 00:09:08,560
receiver i'll listen to

228
00:09:08,560 --> 00:09:11,680
to uh messages will be able to read this

229
00:09:11,680 --> 00:09:12,720
message

230
00:09:12,720 --> 00:09:15,680
now in here in the mdn documentation you

231
00:09:15,680 --> 00:09:17,360
can see that they are all they are

232
00:09:17,360 --> 00:09:19,839
saying always provide a specific target

233
00:09:19,839 --> 00:09:22,399
origin and not a wild card

234
00:09:22,399 --> 00:09:24,240
now

235
00:09:24,240 --> 00:09:27,040
we see many times when developers are

236
00:09:27,040 --> 00:09:29,519
using wildcard

237
00:09:29,519 --> 00:09:31,680
it is happening

238
00:09:31,680 --> 00:09:33,279
but usually

239
00:09:33,279 --> 00:09:34,320
because

240
00:09:34,320 --> 00:09:37,760
there is many many cases when it is

241
00:09:37,760 --> 00:09:40,000
might be hard

242
00:09:40,000 --> 00:09:42,399
for the developer to understand

243
00:09:42,399 --> 00:09:45,920
explicitly the targeted region um we see

244
00:09:45,920 --> 00:09:48,320
some implementations that

245
00:09:48,320 --> 00:09:51,600
target our regions passed via parameters

246
00:09:51,600 --> 00:09:53,519
we see that

247
00:09:53,519 --> 00:09:56,320
many cases when wildcard are using

248
00:09:56,320 --> 00:09:58,800
and i think the main reason for that is

249
00:09:58,800 --> 00:09:59,680
that

250
00:09:59,680 --> 00:10:02,839
developers needs to support

251
00:10:02,839 --> 00:10:05,920
multiple use cases and multiple uh

252
00:10:05,920 --> 00:10:08,160
origins um

253
00:10:08,160 --> 00:10:12,000
like uh like uh subdomains uh maybe they

254
00:10:12,000 --> 00:10:14,320
have some whitelisting and and they have

255
00:10:14,320 --> 00:10:16,240
to communicate with

256
00:10:16,240 --> 00:10:19,279
multiple uh targeted regions

257
00:10:19,279 --> 00:10:23,600
then um developers might use wildcards

258
00:10:23,600 --> 00:10:26,240
or any other

259
00:10:26,240 --> 00:10:28,640
insecure implementations

260
00:10:28,640 --> 00:10:32,160
um and and we will see it later on on

261
00:10:32,160 --> 00:10:34,720
the use cases

262
00:10:34,720 --> 00:10:37,120
slide

263
00:10:38,959 --> 00:10:41,519
now let's understand

264
00:10:41,519 --> 00:10:44,399
the browser features that allows us to

265
00:10:44,399 --> 00:10:46,720
avoid some risky scenarios

266
00:10:46,720 --> 00:10:49,440
um so we have three headers the

267
00:10:49,440 --> 00:10:51,360
cross-origin opener policy the

268
00:10:51,360 --> 00:10:53,839
cross-origin embedder policy and the

269
00:10:53,839 --> 00:10:55,360
x-ray motions

270
00:10:55,360 --> 00:10:57,279
now the cross

271
00:10:57,279 --> 00:10:58,800
they are all

272
00:10:58,800 --> 00:11:01,360
can be used in order to avoid

273
00:11:01,360 --> 00:11:03,279
some uh

274
00:11:03,279 --> 00:11:05,760
some scenarios and not and it's not

275
00:11:05,760 --> 00:11:08,320
really a holistic one

276
00:11:08,320 --> 00:11:10,160
let's say okay so the

277
00:11:10,160 --> 00:11:12,480
the crossover region opener policy

278
00:11:12,480 --> 00:11:16,320
allows to a specific origin not being

279
00:11:16,320 --> 00:11:19,120
able to use window.opener

280
00:11:19,120 --> 00:11:23,200
inside the in your on your domain

281
00:11:23,200 --> 00:11:26,320
the inviter policy

282
00:11:26,320 --> 00:11:28,000
and the extreme option is actually

283
00:11:28,000 --> 00:11:30,079
allowing you to

284
00:11:30,079 --> 00:11:32,880
avoid being

285
00:11:32,880 --> 00:11:35,200
being

286
00:11:35,279 --> 00:11:37,040
embedded inside

287
00:11:37,040 --> 00:11:39,519
another scenarios but

288
00:11:39,519 --> 00:11:41,920
each one of them can be bypassed we have

289
00:11:41,920 --> 00:11:45,120
window open and we have iframe so it's

290
00:11:45,120 --> 00:11:47,760
not really holistic enough and i think

291
00:11:47,760 --> 00:11:50,240
in specifically on cross document

292
00:11:50,240 --> 00:11:51,440
messaging

293
00:11:51,440 --> 00:11:54,320
implementations they have some

294
00:11:54,320 --> 00:11:57,519
but usually it's a front-end developers

295
00:11:57,519 --> 00:12:01,440
um they might not be able to uh to uh

296
00:12:01,440 --> 00:12:04,000
um write a back-end code so they won't

297
00:12:04,000 --> 00:12:06,639
be able to add this others and there are

298
00:12:06,639 --> 00:12:09,360
many uh many cases when

299
00:12:09,360 --> 00:12:11,920
when it might be tricky to

300
00:12:11,920 --> 00:12:13,200
to use this

301
00:12:13,200 --> 00:12:15,839
um and i think that this is why i think

302
00:12:15,839 --> 00:12:19,839
we can we see that there is no many many

303
00:12:19,839 --> 00:12:22,639
um scenarios when we see these others in

304
00:12:22,639 --> 00:12:26,079
fact except for x-frame options that is

305
00:12:26,079 --> 00:12:28,560
usually

306
00:12:28,560 --> 00:12:30,720
being used in order to avoid the

307
00:12:30,720 --> 00:12:33,839
click-checking attacks

308
00:12:33,839 --> 00:12:36,399
the receiver code

309
00:12:36,399 --> 00:12:38,880
security model is actually that the

310
00:12:38,880 --> 00:12:42,079
developer is receiving the the actual

311
00:12:42,079 --> 00:12:43,600
um event

312
00:12:43,600 --> 00:12:46,079
origin and it needs to

313
00:12:46,079 --> 00:12:47,680
authorize the

314
00:12:47,680 --> 00:12:50,079
each origin and each message that he

315
00:12:50,079 --> 00:12:51,200
gets

316
00:12:51,200 --> 00:12:54,079
um we can see in here that we have this

317
00:12:54,079 --> 00:12:57,279
code that is implementing the listener

318
00:12:57,279 --> 00:12:59,360
and we can see that the developer

319
00:12:59,360 --> 00:13:03,040
checking if the origin of the event

320
00:13:03,040 --> 00:13:06,160
equals to example.org and in case it's

321
00:13:06,160 --> 00:13:06,959
not

322
00:13:06,959 --> 00:13:09,040
it's won't process the message in case

323
00:13:09,040 --> 00:13:12,000
it is it will continue to

324
00:13:12,000 --> 00:13:14,000
to process the code

325
00:13:14,000 --> 00:13:17,600
now the issue in here is that in many

326
00:13:17,600 --> 00:13:18,959
cases

327
00:13:18,959 --> 00:13:21,040
you would like to

328
00:13:21,040 --> 00:13:23,279
you are running on different different

329
00:13:23,279 --> 00:13:25,680
environments um

330
00:13:25,680 --> 00:13:28,240
you are your needs to you have some

331
00:13:28,240 --> 00:13:30,079
multiple use cases that you need to

332
00:13:30,079 --> 00:13:34,399
support maybe multiple domains or

333
00:13:34,399 --> 00:13:35,279
or

334
00:13:35,279 --> 00:13:37,120
maybe

335
00:13:37,120 --> 00:13:40,480
sub-domains so you will see a lot of

336
00:13:40,480 --> 00:13:42,880
weird implementations around this the

337
00:13:42,880 --> 00:13:43,839
main

338
00:13:43,839 --> 00:13:45,760
origin verification

339
00:13:45,760 --> 00:13:48,160
and we can see many developers making a

340
00:13:48,160 --> 00:13:49,760
lot of mistakes

341
00:13:49,760 --> 00:13:51,210
um they are making uh

342
00:13:51,210 --> 00:13:53,120
[Music]

343
00:13:53,120 --> 00:13:57,199
regixes checks and some weird includes

344
00:13:57,199 --> 00:14:00,959
and like many many implementations that

345
00:14:00,959 --> 00:14:02,720
can be bypassed or

346
00:14:02,720 --> 00:14:04,959
the developers are just skip the

347
00:14:04,959 --> 00:14:06,720
authorization and they are not

348
00:14:06,720 --> 00:14:07,920
implementing

349
00:14:07,920 --> 00:14:11,839
uh these checks at all

350
00:14:12,160 --> 00:14:13,519
so it might

351
00:14:13,519 --> 00:14:16,240
be really really tricky for developers

352
00:14:16,240 --> 00:14:19,440
you know to actually

353
00:14:19,440 --> 00:14:21,040
write this

354
00:14:21,040 --> 00:14:23,279
and implement this

355
00:14:23,279 --> 00:14:24,880
authorization

356
00:14:24,880 --> 00:14:26,959
flow

357
00:14:26,959 --> 00:14:28,240
so

358
00:14:28,240 --> 00:14:31,120
let's talk about the um potential

359
00:14:31,120 --> 00:14:35,360
weaknesses so we have um the sender code

360
00:14:35,360 --> 00:14:38,560
in the sender code we have uh spoffin um

361
00:14:38,560 --> 00:14:40,240
it's vulnerable first it might be

362
00:14:40,240 --> 00:14:43,040
vulnerable for spoofing because he might

363
00:14:43,040 --> 00:14:47,920
uh not being aware of who exactly is

364
00:14:47,920 --> 00:14:49,600
it is going to

365
00:14:49,600 --> 00:14:50,480
uh

366
00:14:50,480 --> 00:14:52,959
send their messages

367
00:14:52,959 --> 00:14:54,480
to

368
00:14:54,480 --> 00:14:57,440
so this undercoat might use wildcard or

369
00:14:57,440 --> 00:15:00,160
might implement it insecurely the the

370
00:15:00,160 --> 00:15:02,480
target or region then

371
00:15:02,480 --> 00:15:05,760
it will be able he might send the

372
00:15:05,760 --> 00:15:08,880
messages into recipients that

373
00:15:08,880 --> 00:15:13,040
didn't meant to get this message and it

374
00:15:13,040 --> 00:15:15,760
could be potentially malicious then he

375
00:15:15,760 --> 00:15:18,720
will be able to he will uh

376
00:15:18,720 --> 00:15:20,959
he might cause uh

377
00:15:20,959 --> 00:15:24,399
sensitive information leakage

378
00:15:24,399 --> 00:15:26,639
on the other hand we have the receiver

379
00:15:26,639 --> 00:15:27,519
code

380
00:15:27,519 --> 00:15:29,120
that is actually

381
00:15:29,120 --> 00:15:31,680
vulnerable for spoofing as well because

382
00:15:31,680 --> 00:15:33,120
he might

383
00:15:33,120 --> 00:15:35,360
receive some messages

384
00:15:35,360 --> 00:15:37,519
from senders that

385
00:15:37,519 --> 00:15:40,399
he didn't mean to receive this message

386
00:15:40,399 --> 00:15:44,959
from um they might not implement the the

387
00:15:44,959 --> 00:15:46,959
origin verification

388
00:15:46,959 --> 00:15:49,360
properly or might just

389
00:15:49,360 --> 00:15:51,759
skip and then just not

390
00:15:51,759 --> 00:15:54,399
implement it

391
00:15:56,000 --> 00:15:58,959
attackers will be able to uh spoof and

392
00:15:58,959 --> 00:16:01,920
and actually send messages into these uh

393
00:16:01,920 --> 00:16:03,040
receivers

394
00:16:03,040 --> 00:16:06,320
and then we have uh

395
00:16:06,320 --> 00:16:10,079
we have the tampering which uh so the

396
00:16:10,079 --> 00:16:13,839
actual payload that's sent from senders

397
00:16:13,839 --> 00:16:16,880
might manipulate the decode in the

398
00:16:16,880 --> 00:16:20,079
receiver and abuse its functionality and

399
00:16:20,079 --> 00:16:21,360
cause

400
00:16:21,360 --> 00:16:24,880
max says csrf open redirections logical

401
00:16:24,880 --> 00:16:25,920
flaws

402
00:16:25,920 --> 00:16:28,000
denial of service and many many more it

403
00:16:28,000 --> 00:16:30,320
depends on the

404
00:16:30,320 --> 00:16:33,680
actual implementations

405
00:16:34,160 --> 00:16:34,959
so

406
00:16:34,959 --> 00:16:38,959
let's see some uh attack examples uh we

407
00:16:38,959 --> 00:16:41,839
can see that we have uh attack we can

408
00:16:41,839 --> 00:16:44,959
attack senders uh to if drop sensitive

409
00:16:44,959 --> 00:16:48,240
data and we can attack uh receivers in

410
00:16:48,240 --> 00:16:52,079
order to abuse the remote functionality

411
00:16:52,079 --> 00:16:53,759
to do

412
00:16:53,759 --> 00:16:57,519
malicious operations

413
00:16:57,519 --> 00:16:58,639
so

414
00:16:58,639 --> 00:17:02,399
let's see some example of vulnerable

415
00:17:02,399 --> 00:17:04,720
sender code

416
00:17:04,720 --> 00:17:08,199
so we can see on the left we have the

417
00:17:08,199 --> 00:17:10,640
targeted.com region

418
00:17:10,640 --> 00:17:13,439
and it has implemented this script this

419
00:17:13,439 --> 00:17:15,199
script is actually

420
00:17:15,199 --> 00:17:19,839
calling an ssl authenticate call

421
00:17:21,199 --> 00:17:23,599
this sso authenticate function is

422
00:17:23,599 --> 00:17:24,799
actually

423
00:17:24,799 --> 00:17:26,959
used in order to

424
00:17:26,959 --> 00:17:28,720
generate an access token to

425
00:17:28,720 --> 00:17:30,960
authenticated user

426
00:17:30,960 --> 00:17:33,440
then what it does it uses

427
00:17:33,440 --> 00:17:36,320
window.opener to get a window reference

428
00:17:36,320 --> 00:17:38,799
for whoever opened it

429
00:17:38,799 --> 00:17:42,160
um and send a message with the access

430
00:17:42,160 --> 00:17:46,559
token and the target origin specified

431
00:17:46,559 --> 00:17:48,960
as a wildcard which means that any

432
00:17:48,960 --> 00:17:51,360
recipient can

433
00:17:51,360 --> 00:17:53,360
receive this message

434
00:17:53,360 --> 00:17:57,918
and it sends obviously the access token

435
00:17:58,480 --> 00:18:02,559
so how exactly uh a malicious uh

436
00:18:02,559 --> 00:18:04,160
code will look like

437
00:18:04,160 --> 00:18:06,960
so as we can see in here

438
00:18:06,960 --> 00:18:08,640
the malicious code

439
00:18:08,640 --> 00:18:11,120
is actually first of all implemented a

440
00:18:11,120 --> 00:18:12,960
listener

441
00:18:12,960 --> 00:18:16,640
to get to receive messages um once uh

442
00:18:16,640 --> 00:18:20,240
handy used um save event message to db

443
00:18:20,240 --> 00:18:24,080
function that is actually um saving

444
00:18:24,080 --> 00:18:27,039
any message that uh that will

445
00:18:27,039 --> 00:18:29,600
will be received interest into this

446
00:18:29,600 --> 00:18:32,080
listener um they will save it in the

447
00:18:32,080 --> 00:18:34,400
attacker's db

448
00:18:34,400 --> 00:18:37,280
then he used the window.open in order to

449
00:18:37,280 --> 00:18:38,320
actually

450
00:18:38,320 --> 00:18:40,559
um

451
00:18:40,799 --> 00:18:44,480
open up a new tab into the

452
00:18:44,480 --> 00:18:46,080
2d targeted

453
00:18:46,080 --> 00:18:47,520
website

454
00:18:47,520 --> 00:18:51,600
page now the targeted website page will

455
00:18:51,600 --> 00:18:53,679
execute the ssl authenticate will

456
00:18:53,679 --> 00:18:56,360
generate the access token and we'll use

457
00:18:56,360 --> 00:18:58,240
window.opener

458
00:18:58,240 --> 00:19:00,960
dot post message in order to send the

459
00:19:00,960 --> 00:19:04,320
access token into whoever opened it

460
00:19:04,320 --> 00:19:05,200
and

461
00:19:05,200 --> 00:19:08,080
the attacker will be able to

462
00:19:08,080 --> 00:19:11,440
receive this access token and take over

463
00:19:11,440 --> 00:19:14,480
the victim's account

464
00:19:14,480 --> 00:19:16,559
now

465
00:19:16,559 --> 00:19:18,080
let's see

466
00:19:18,080 --> 00:19:22,080
a weakness receiver code weakness

467
00:19:22,080 --> 00:19:25,600
so in here we can see we have bob.com

468
00:19:25,600 --> 00:19:28,160
um bob.com

469
00:19:28,160 --> 00:19:29,600
implemented

470
00:19:29,600 --> 00:19:33,200
a listener this listener is basically

471
00:19:33,200 --> 00:19:34,080
uh

472
00:19:34,080 --> 00:19:35,520
might

473
00:19:35,520 --> 00:19:37,280
might

474
00:19:37,280 --> 00:19:39,840
implement an authentication maybe not in

475
00:19:39,840 --> 00:19:41,039
this case

476
00:19:41,039 --> 00:19:44,160
um the implementation is that as you can

477
00:19:44,160 --> 00:19:44,960
see

478
00:19:44,960 --> 00:19:45,760
that

479
00:19:45,760 --> 00:19:49,280
the developer checks if the event region

480
00:19:49,280 --> 00:19:50,840
includes

481
00:19:50,840 --> 00:19:53,300
dstring.com in case it is

482
00:19:53,300 --> 00:19:54,480
[Music]

483
00:19:54,480 --> 00:19:57,840
it's it's he will pass in case it's not

484
00:19:57,840 --> 00:19:59,200
he will

485
00:19:59,200 --> 00:20:01,919
not process the message so basically in

486
00:20:01,919 --> 00:20:03,760
here we can see

487
00:20:03,760 --> 00:20:06,559
some implementation that is vulnerable

488
00:20:06,559 --> 00:20:08,240
that is trying to

489
00:20:08,240 --> 00:20:11,200
say okay i will allow only

490
00:20:11,200 --> 00:20:15,280
subdomains of bob.com to

491
00:20:15,679 --> 00:20:18,320
get into to get processed

492
00:20:18,320 --> 00:20:19,520
at all

493
00:20:19,520 --> 00:20:21,760
that in case it is so

494
00:20:21,760 --> 00:20:24,480
we are using the document the developer

495
00:20:24,480 --> 00:20:26,039
used the

496
00:20:26,039 --> 00:20:29,440
document.location in order to redirect

497
00:20:29,440 --> 00:20:31,840
the user into the

498
00:20:31,840 --> 00:20:35,679
return to parameter that received inside

499
00:20:35,679 --> 00:20:38,720
this event message

500
00:20:38,720 --> 00:20:40,240
now

501
00:20:40,240 --> 00:20:43,919
how the attacker can actually

502
00:20:43,919 --> 00:20:47,600
bypass it so we can see in here

503
00:20:47,600 --> 00:20:51,199
the attacker used

504
00:20:52,760 --> 00:20:55,919
task.bob.com as a subdomain

505
00:20:55,919 --> 00:20:59,840
of the militia of his own malicious.com

506
00:20:59,840 --> 00:21:04,559
domain in order to pass the previous

507
00:21:04,559 --> 00:21:06,880
insecure implementations that just check

508
00:21:06,880 --> 00:21:10,559
in if the origin includes dotbob.com so

509
00:21:10,559 --> 00:21:13,600
it is and it will pass this

510
00:21:13,600 --> 00:21:15,440
authorization check

511
00:21:15,440 --> 00:21:16,880
then

512
00:21:16,880 --> 00:21:19,039
what he will do it will just

513
00:21:19,039 --> 00:21:21,760
use a window to open

514
00:21:21,760 --> 00:21:24,559
in order to get with the reference he

515
00:21:24,559 --> 00:21:25,360
will

516
00:21:25,360 --> 00:21:29,440
create a payload with the return to

517
00:21:29,440 --> 00:21:30,720
parameter

518
00:21:30,720 --> 00:21:35,120
that the user will be redirected to it

519
00:21:35,120 --> 00:21:36,320
then

520
00:21:36,320 --> 00:21:39,360
we actually here see that the attacker

521
00:21:39,360 --> 00:21:42,720
used javascript in order to

522
00:21:42,720 --> 00:21:45,600
redirect the user again so basically the

523
00:21:45,600 --> 00:21:48,559
attacker can execute javascript on the

524
00:21:48,559 --> 00:21:51,840
behalf of the vulnerable website

525
00:21:51,840 --> 00:21:55,280
and he used to in order he used it in

526
00:21:55,280 --> 00:22:01,200
order to redirect the user uh again into

527
00:22:01,200 --> 00:22:04,640
these his malicious page

528
00:22:04,640 --> 00:22:08,000
and it appear it appended the document

529
00:22:08,000 --> 00:22:11,360
cookies of the victim in order to steal

530
00:22:11,360 --> 00:22:13,840
the victim's cookies

531
00:22:13,840 --> 00:22:15,520
and save it later on

532
00:22:15,520 --> 00:22:18,559
and take over the victim's account later

533
00:22:18,559 --> 00:22:22,400
on um then he just used the window ref

534
00:22:22,400 --> 00:22:23,760
post messages

535
00:22:23,760 --> 00:22:25,440
post message in order to send the

536
00:22:25,440 --> 00:22:29,919
payload um to the the relevant origin

537
00:22:29,919 --> 00:22:32,400
so basically we can see in here that

538
00:22:32,400 --> 00:22:34,960
we we have the ability so we pass the

539
00:22:34,960 --> 00:22:37,679
the authorization check and

540
00:22:37,679 --> 00:22:40,240
due to insecure implementation on the

541
00:22:40,240 --> 00:22:42,880
receiver code we saw

542
00:22:42,880 --> 00:22:44,960
that we can abuse it in order to run

543
00:22:44,960 --> 00:22:46,880
javascript and

544
00:22:46,880 --> 00:22:49,440
take and and steal

545
00:22:49,440 --> 00:22:52,000
the victims cookies let's talk about the

546
00:22:52,000 --> 00:22:53,440
key weaknesses

547
00:22:53,440 --> 00:22:56,159
so cars document messaging

548
00:22:56,159 --> 00:22:59,200
weaknesses are that by default windows

549
00:22:59,200 --> 00:23:01,760
can gather with the reference and and

550
00:23:01,760 --> 00:23:04,880
send post messages to whatever

551
00:23:04,880 --> 00:23:06,799
they want

552
00:23:06,799 --> 00:23:10,320
and and in between to each other

553
00:23:10,320 --> 00:23:11,440
um

554
00:23:11,440 --> 00:23:14,320
developers have many responsibilities

555
00:23:14,320 --> 00:23:17,200
and with many responsibilities comes

556
00:23:17,200 --> 00:23:19,200
many mistakes

557
00:23:19,200 --> 00:23:20,799
that might occur

558
00:23:20,799 --> 00:23:24,480
um and on the receiver script they there

559
00:23:24,480 --> 00:23:25,960
is no

560
00:23:25,960 --> 00:23:29,440
authorization so developers needs to

561
00:23:29,440 --> 00:23:32,240
uh implement their own authorization

562
00:23:32,240 --> 00:23:33,200
checks

563
00:23:33,200 --> 00:23:38,080
um in sender scripts we have the ability

564
00:23:38,080 --> 00:23:39,440
to

565
00:23:39,440 --> 00:23:42,880
use wildcard and not explicitly declare

566
00:23:42,880 --> 00:23:45,200
on a specific

567
00:23:45,200 --> 00:23:46,880
target or region

568
00:23:46,880 --> 00:23:50,400
and we can see in many cases when we are

569
00:23:50,400 --> 00:23:52,400
running on a different environments and

570
00:23:52,400 --> 00:23:55,360
when we needs to

571
00:23:55,360 --> 00:23:58,159
to support many use cases whitelisting

572
00:23:58,159 --> 00:24:01,039
subdomain whitelisting and many other

573
00:24:01,039 --> 00:24:02,960
cases it is

574
00:24:02,960 --> 00:24:05,440
it is being really really tricky

575
00:24:05,440 --> 00:24:09,200
um to actually explicitly determine um

576
00:24:09,200 --> 00:24:10,799
who should be the

577
00:24:10,799 --> 00:24:14,480
sender or the receiver

578
00:24:16,080 --> 00:24:19,919
now let's um talk about uh the hacking

579
00:24:19,919 --> 00:24:21,520
methodology

580
00:24:21,520 --> 00:24:22,320
so

581
00:24:22,320 --> 00:24:24,960
first first of all uh we'll need to

582
00:24:24,960 --> 00:24:27,440
identify the potential targets now the

583
00:24:27,440 --> 00:24:30,960
potential targets are quite simple um

584
00:24:30,960 --> 00:24:32,559
they are

585
00:24:32,559 --> 00:24:33,600
any

586
00:24:33,600 --> 00:24:37,279
uh window that uh listens to messages

587
00:24:37,279 --> 00:24:40,799
and any window that can send message

588
00:24:40,799 --> 00:24:41,679
now

589
00:24:41,679 --> 00:24:43,840
let's go and drill down to the attack

590
00:24:43,840 --> 00:24:46,559
flow of each one of them

591
00:24:46,559 --> 00:24:48,159
to understand

592
00:24:48,159 --> 00:24:51,360
how the how how the flow is looking like

593
00:24:51,360 --> 00:24:52,559
and

594
00:24:52,559 --> 00:24:55,760
what you need to identify and in order

595
00:24:55,760 --> 00:24:59,799
to find such vulnerabilities

596
00:25:02,720 --> 00:25:05,679
so let's talk about the listener

597
00:25:05,679 --> 00:25:07,360
attack flow so

598
00:25:07,360 --> 00:25:09,279
first of all you need to do is to

599
00:25:09,279 --> 00:25:11,919
actually look for coded implementing

600
00:25:11,919 --> 00:25:15,440
listeners now you can do that via

601
00:25:15,440 --> 00:25:19,039
developers tools or any proxy tool or

602
00:25:19,039 --> 00:25:22,159
any other tool that is allowing you to

603
00:25:22,159 --> 00:25:24,559
look for

604
00:25:24,559 --> 00:25:26,720
strings inside the

605
00:25:26,720 --> 00:25:30,000
targeted website uh code

606
00:25:30,000 --> 00:25:31,120
so

607
00:25:31,120 --> 00:25:34,240
you can do that via like look for uh

608
00:25:34,240 --> 00:25:36,320
window.onmessagestring

609
00:25:36,320 --> 00:25:37,200
or

610
00:25:37,200 --> 00:25:39,600
checking if they have a window.add an

611
00:25:39,600 --> 00:25:42,080
eventlistener with different type

612
00:25:42,080 --> 00:25:43,120
message

613
00:25:43,120 --> 00:25:46,159
now once we're having this you will see

614
00:25:46,159 --> 00:25:47,679
a huge

615
00:25:47,679 --> 00:25:50,000
sorry amount of

616
00:25:50,000 --> 00:25:53,039
of listeners um and

617
00:25:53,039 --> 00:25:55,200
after that you will need to check if

618
00:25:55,200 --> 00:25:57,039
they're implemented a proper

619
00:25:57,039 --> 00:25:58,559
authorization

620
00:25:58,559 --> 00:26:00,880
now you're going to see a lot of use

621
00:26:00,880 --> 00:26:02,480
cases

622
00:26:02,480 --> 00:26:03,360
when

623
00:26:03,360 --> 00:26:05,039
maybe the authentication the

624
00:26:05,039 --> 00:26:09,200
authorization at all is not implemented

625
00:26:09,200 --> 00:26:12,159
and you or you will see a lot of cases

626
00:26:12,159 --> 00:26:13,039
when

627
00:26:13,039 --> 00:26:17,200
um you will see regixes and some weird

628
00:26:17,200 --> 00:26:20,960
statements and maybe sometimes uh um you

629
00:26:20,960 --> 00:26:22,799
will see that you are getting some

630
00:26:22,799 --> 00:26:25,120
parameters and you'll see a lot of weird

631
00:26:25,120 --> 00:26:27,679
implementations around the authorization

632
00:26:27,679 --> 00:26:29,840
and you'll need to investigate to

633
00:26:29,840 --> 00:26:31,840
understand exactly

634
00:26:31,840 --> 00:26:35,200
if the authorization is properly defined

635
00:26:35,200 --> 00:26:38,320
and if it might be bypassed we will see

636
00:26:38,320 --> 00:26:40,000
in the next slides

637
00:26:40,000 --> 00:26:41,279
um

638
00:26:41,279 --> 00:26:43,440
um real use cases

639
00:26:43,440 --> 00:26:46,559
of of these authorization flows

640
00:26:46,559 --> 00:26:48,879
um

641
00:26:49,039 --> 00:26:50,080
then

642
00:26:50,080 --> 00:26:52,240
you'll need to check if the code can be

643
00:26:52,240 --> 00:26:55,600
abused um so after even if there is no

644
00:26:55,600 --> 00:26:57,440
authorization check

645
00:26:57,440 --> 00:27:01,520
maybe this listener do nothing

646
00:27:01,520 --> 00:27:03,760
and you'll you will need to understand

647
00:27:03,760 --> 00:27:07,039
exactly if it uses

648
00:27:07,039 --> 00:27:09,600
some risky functions like i don't know

649
00:27:09,600 --> 00:27:12,400
like creating some elements and doing

650
00:27:12,400 --> 00:27:14,400
some dull manipulation

651
00:27:14,400 --> 00:27:17,760
maybe some redirects or there are many

652
00:27:17,760 --> 00:27:20,720
many use cases

653
00:27:20,720 --> 00:27:23,279
that might be manipulated

654
00:27:23,279 --> 00:27:25,679
it depends on the on the actual

655
00:27:25,679 --> 00:27:29,440
implementation of each specific listener

656
00:27:29,440 --> 00:27:31,200
um

657
00:27:31,200 --> 00:27:32,960
then you'll need to get a window

658
00:27:32,960 --> 00:27:34,640
reference

659
00:27:34,640 --> 00:27:37,039
so you will need to understand if you

660
00:27:37,039 --> 00:27:38,480
have the ability to get a win the

661
00:27:38,480 --> 00:27:41,279
reference um in most of the cases yes

662
00:27:41,279 --> 00:27:44,000
maybe you have some restrictions

663
00:27:44,000 --> 00:27:45,760
then you will need to

664
00:27:45,760 --> 00:27:48,880
write the actual exploit now writing an

665
00:27:48,880 --> 00:27:52,080
exploit can be

666
00:27:52,080 --> 00:27:53,919
quite problematic

667
00:27:53,919 --> 00:27:55,840
because

668
00:27:55,840 --> 00:27:58,720
you will need to understand exactly how

669
00:27:58,720 --> 00:27:59,520
the

670
00:27:59,520 --> 00:28:03,039
custom protocol

671
00:28:03,039 --> 00:28:06,320
of the receivers are happening or are

672
00:28:06,320 --> 00:28:09,679
implementing and how exactly the

673
00:28:09,679 --> 00:28:13,279
payloads needs to be sent and you will

674
00:28:13,279 --> 00:28:16,480
see a lot of weird

675
00:28:17,279 --> 00:28:19,840
protocols that have been used

676
00:28:19,840 --> 00:28:23,039
so it might require a drilling down

677
00:28:23,039 --> 00:28:26,799
into the actual messaging protocol

678
00:28:26,799 --> 00:28:29,919
because it's sometimes is just simple

679
00:28:29,919 --> 00:28:31,440
string sometimes

680
00:28:31,440 --> 00:28:33,279
you'll see a lot of weird

681
00:28:33,279 --> 00:28:35,919
implementations around it

682
00:28:35,919 --> 00:28:36,799
so

683
00:28:36,799 --> 00:28:38,960
it might require a further investigation

684
00:28:38,960 --> 00:28:40,880
and drilling down to

685
00:28:40,880 --> 00:28:44,120
the code

686
00:28:44,799 --> 00:28:45,679
now

687
00:28:45,679 --> 00:28:47,919
let's talk about the sender's attack

688
00:28:47,919 --> 00:28:52,000
flow um so same as as the previous slide

689
00:28:52,000 --> 00:28:52,880
will

690
00:28:52,880 --> 00:28:56,480
now will need to look for a post message

691
00:28:56,480 --> 00:28:59,840
method usage um same we can use a

692
00:28:59,840 --> 00:29:02,080
developer's tool or any other tool to do

693
00:29:02,080 --> 00:29:02,960
that

694
00:29:02,960 --> 00:29:03,840
um

695
00:29:03,840 --> 00:29:06,559
and then you will be able to see all the

696
00:29:06,559 --> 00:29:08,880
past message calling

697
00:29:08,880 --> 00:29:09,919
now

698
00:29:09,919 --> 00:29:11,279
sorry

699
00:29:11,279 --> 00:29:13,120
now um

700
00:29:13,120 --> 00:29:16,000
then we'll need to look for uh sensitive

701
00:29:16,000 --> 00:29:19,120
messages because if we are like this is

702
00:29:19,120 --> 00:29:20,799
what we are when when we're talking

703
00:29:20,799 --> 00:29:23,520
about the sender would like to receive

704
00:29:23,520 --> 00:29:26,000
the the sensitive

705
00:29:26,000 --> 00:29:28,640
messages from the senders and we will be

706
00:29:28,640 --> 00:29:30,240
the we will be

707
00:29:30,240 --> 00:29:31,760
the receivers so

708
00:29:31,760 --> 00:29:34,640
we'll need to go to understand the

709
00:29:34,640 --> 00:29:38,000
the application flow in order to

710
00:29:38,000 --> 00:29:39,520
to understand if

711
00:29:39,520 --> 00:29:41,600
messages are sensitive maybe there are

712
00:29:41,600 --> 00:29:44,000
some token passed maybe there are some

713
00:29:44,000 --> 00:29:46,880
parameters or any any other sensitive

714
00:29:46,880 --> 00:29:47,919
data

715
00:29:47,919 --> 00:29:51,520
um so after we understand that we have

716
00:29:51,520 --> 00:29:56,159
the post message we realized that it is

717
00:29:56,159 --> 00:29:59,520
used sensitive data then we'll need to

718
00:29:59,520 --> 00:30:01,039
analyze the target or region

719
00:30:01,039 --> 00:30:02,480
implementation

720
00:30:02,480 --> 00:30:03,200
so

721
00:30:03,200 --> 00:30:06,559
the easiest way is like if if we have a

722
00:30:06,559 --> 00:30:08,960
wild card but you will be surprised to

723
00:30:08,960 --> 00:30:10,880
see how many weird implementations we

724
00:30:10,880 --> 00:30:13,039
have around that as well

725
00:30:13,039 --> 00:30:15,360
sometimes in many cases there are some

726
00:30:15,360 --> 00:30:18,559
parameters that passed in order to

727
00:30:18,559 --> 00:30:21,120
be able to support multiple domains and

728
00:30:21,120 --> 00:30:24,159
you will need to understand exactly

729
00:30:24,159 --> 00:30:27,919
um the the actual protocol and and if

730
00:30:27,919 --> 00:30:30,399
the targeted region implementation

731
00:30:30,399 --> 00:30:32,000
can be

732
00:30:32,000 --> 00:30:35,039
abused or bypassed

733
00:30:35,039 --> 00:30:36,880
in order that you will be able to

734
00:30:36,880 --> 00:30:38,640
receive the message

735
00:30:38,640 --> 00:30:40,960
um then

736
00:30:40,960 --> 00:30:43,279
we'll need to write an exploit the

737
00:30:43,279 --> 00:30:44,960
exploit again

738
00:30:44,960 --> 00:30:48,640
can be in this case can be really uh

739
00:30:48,640 --> 00:30:50,799
really easy because we are just

740
00:30:50,799 --> 00:30:54,000
implementing a receiver and needs to

741
00:30:54,000 --> 00:30:55,679
maybe uh

742
00:30:55,679 --> 00:30:58,000
use some manipulation around the target

743
00:30:58,000 --> 00:31:01,360
origin implementations um but sometimes

744
00:31:01,360 --> 00:31:05,679
and sometimes you will need to sort

745
00:31:05,679 --> 00:31:09,039
to get a window reference because

746
00:31:09,039 --> 00:31:12,240
sometimes when you when you want to

747
00:31:12,240 --> 00:31:15,039
reach the sender code you will realize

748
00:31:15,039 --> 00:31:16,480
that you might

749
00:31:16,480 --> 00:31:19,120
need to send a message in order to reach

750
00:31:19,120 --> 00:31:22,000
the exact code in order to trigger the

751
00:31:22,000 --> 00:31:23,760
other post message

752
00:31:23,760 --> 00:31:25,440
so basically

753
00:31:25,440 --> 00:31:26,480
um

754
00:31:26,480 --> 00:31:31,519
it might uh it optionally you might need

755
00:31:31,519 --> 00:31:33,519
to get a window reference in order to

756
00:31:33,519 --> 00:31:34,960
send the message

757
00:31:34,960 --> 00:31:37,919
so to trigger the other

758
00:31:37,919 --> 00:31:40,640
the other side to send

759
00:31:40,640 --> 00:31:44,720
the sensitive message back to you

760
00:31:45,760 --> 00:31:48,880
now let's see some uh real world use

761
00:31:48,880 --> 00:31:51,360
cases

762
00:31:53,679 --> 00:31:56,559
so um

763
00:31:56,559 --> 00:31:57,679
we have

764
00:31:57,679 --> 00:31:58,399
an

765
00:31:58,399 --> 00:32:00,640
institute region verification and a

766
00:32:00,640 --> 00:32:03,279
really big at a company that i cannot

767
00:32:03,279 --> 00:32:04,799
expose now

768
00:32:04,799 --> 00:32:05,760
um

769
00:32:05,760 --> 00:32:07,679
that

770
00:32:07,679 --> 00:32:12,320
used that this is used uh in order to

771
00:32:12,320 --> 00:32:15,679
perform some this allows us to perform

772
00:32:15,679 --> 00:32:18,640
some read write local storage

773
00:32:18,640 --> 00:32:22,640
um csrf access and read uh

774
00:32:22,640 --> 00:32:24,880
the uh vulnerable uh

775
00:32:24,880 --> 00:32:29,120
uh the victims uh cookies uh we have

776
00:32:29,120 --> 00:32:32,240
another big payment provider that was

777
00:32:32,240 --> 00:32:35,279
exposed to information test um that we

778
00:32:35,279 --> 00:32:37,279
had the ability to read and write

779
00:32:37,279 --> 00:32:41,200
session storage and perform csrf

780
00:32:41,200 --> 00:32:44,480
and we'll see aliexpress sidebar

781
00:32:44,480 --> 00:32:47,039
takeover that

782
00:32:47,039 --> 00:32:50,720
that end up as as an xss

783
00:32:50,720 --> 00:32:52,799
and let's go and drill down for each one

784
00:32:52,799 --> 00:32:55,960
of them

785
00:32:56,080 --> 00:32:57,120
so

786
00:32:57,120 --> 00:33:00,239
in here we can see

787
00:33:00,399 --> 00:33:01,840
the insecure

788
00:33:01,840 --> 00:33:03,679
origin verification

789
00:33:03,679 --> 00:33:05,600
um so basically

790
00:33:05,600 --> 00:33:07,919
we can see the actual implementation of

791
00:33:07,919 --> 00:33:11,120
the code of the listener so

792
00:33:11,120 --> 00:33:13,519
we can see that they are implemented

793
00:33:13,519 --> 00:33:14,720
listener

794
00:33:14,720 --> 00:33:18,159
uh we have the pass data parameter

795
00:33:18,159 --> 00:33:19,200
that uh

796
00:33:19,200 --> 00:33:22,799
that use the handle json which is

797
00:33:22,799 --> 00:33:26,760
passing the event.data

798
00:33:27,679 --> 00:33:29,039
into this

799
00:33:29,039 --> 00:33:32,320
handle json param with the handler parse

800
00:33:32,320 --> 00:33:34,480
um and let's understand

801
00:33:34,480 --> 00:33:36,399
what what happening in the andal json

802
00:33:36,399 --> 00:33:37,679
param

803
00:33:37,679 --> 00:33:38,799
function

804
00:33:38,799 --> 00:33:41,760
so we can see it's have some

805
00:33:41,760 --> 00:33:43,840
input validation

806
00:33:43,840 --> 00:33:46,320
checks and it checks in case the handler

807
00:33:46,320 --> 00:33:48,080
is parse

808
00:33:48,080 --> 00:33:50,600
it's just validating if the

809
00:33:50,600 --> 00:33:53,120
rx.data which is controlled by us which

810
00:33:53,120 --> 00:33:55,919
is the actual event data

811
00:33:55,919 --> 00:33:58,399
is a valid json in case it is it will

812
00:33:58,399 --> 00:34:00,960
parse it and return it back to

813
00:34:00,960 --> 00:34:05,120
uh to the pass data parameter

814
00:34:05,120 --> 00:34:06,799
now

815
00:34:06,799 --> 00:34:08,320
in here we can see that we have some

816
00:34:08,320 --> 00:34:13,040
verification let's understand what is it

817
00:34:13,440 --> 00:34:15,839
so we can see that

818
00:34:15,839 --> 00:34:18,800
the developer checking if the

819
00:34:18,800 --> 00:34:22,239
document referrer is starting with the

820
00:34:22,239 --> 00:34:24,399
event.origin

821
00:34:24,399 --> 00:34:26,879
this is the first statement uh if you

822
00:34:26,879 --> 00:34:29,918
ask me i don't know why uh the developer

823
00:34:29,918 --> 00:34:31,119
actually

824
00:34:31,119 --> 00:34:32,879
chose to implement it

825
00:34:32,879 --> 00:34:34,399
that way

826
00:34:34,399 --> 00:34:36,960
but basically this statement will always

827
00:34:36,960 --> 00:34:40,239
be true uh due to the fact that if i'm

828
00:34:40,239 --> 00:34:41,679
embedding

829
00:34:41,679 --> 00:34:43,679
some window or

830
00:34:43,679 --> 00:34:45,520
using window open

831
00:34:45,520 --> 00:34:46,560
so

832
00:34:46,560 --> 00:34:49,359
my malicious origin that will send a

833
00:34:49,359 --> 00:34:51,280
message to this uh

834
00:34:51,280 --> 00:34:54,239
listener later on will always so this

835
00:34:54,239 --> 00:34:56,399
statement will always be true because i

836
00:34:56,399 --> 00:34:57,839
will be

837
00:34:57,839 --> 00:35:00,880
always the referrer of this document

838
00:35:00,880 --> 00:35:04,160
because i am the one who opened it

839
00:35:04,160 --> 00:35:06,560
but let's let's ignore it and let's

840
00:35:06,560 --> 00:35:08,560
go and see the other

841
00:35:08,560 --> 00:35:11,359
uh implement the other uh statement

842
00:35:11,359 --> 00:35:12,240
that's

843
00:35:12,240 --> 00:35:14,320
so there is the developer checks if the

844
00:35:14,320 --> 00:35:16,960
document referrer is empty string and if

845
00:35:16,960 --> 00:35:19,680
the origin is null

846
00:35:19,680 --> 00:35:21,119
now

847
00:35:21,119 --> 00:35:24,160
this can be bypassed as well

848
00:35:24,160 --> 00:35:27,119
if you would like to to

849
00:35:27,119 --> 00:35:29,119
elaborate and get more detail around the

850
00:35:29,119 --> 00:35:32,079
original attacks you can check my blog

851
00:35:32,079 --> 00:35:34,720
and i have uh some vulnerable forms some

852
00:35:34,720 --> 00:35:37,200
article uh

853
00:35:37,200 --> 00:35:39,920
describing this attack uh but basically

854
00:35:39,920 --> 00:35:42,160
we can use iframe source docs in order

855
00:35:42,160 --> 00:35:43,520
to

856
00:35:43,520 --> 00:35:46,240
fake this original

857
00:35:46,240 --> 00:35:48,720
domains and we will be able to pass this

858
00:35:48,720 --> 00:35:51,200
check as well

859
00:35:51,200 --> 00:35:53,119
and um and

860
00:35:53,119 --> 00:35:56,240
so this is by puzzle by possible

861
00:35:56,240 --> 00:35:58,880
as well and we have the last state

862
00:35:58,880 --> 00:36:01,200
statement that checking if uh

863
00:36:01,200 --> 00:36:03,720
test data is exist and if

864
00:36:03,720 --> 00:36:07,760
pestdata.mall sent from bdsdk

865
00:36:07,760 --> 00:36:10,560
is true and in case it is um

866
00:36:10,560 --> 00:36:14,960
it is uh it will go and pass this check

867
00:36:14,960 --> 00:36:17,760
and obviously we are uh controlling the

868
00:36:17,760 --> 00:36:21,119
pest data so we have the ability to uh

869
00:36:21,119 --> 00:36:24,000
bypass this uh check as well so

870
00:36:24,000 --> 00:36:26,480
basically these three checks are

871
00:36:26,480 --> 00:36:27,920
bypassable

872
00:36:27,920 --> 00:36:30,720
um and let's see what what the what the

873
00:36:30,720 --> 00:36:32,320
rest of the club

874
00:36:32,320 --> 00:36:36,960
allows us to do and how can we abuse it

875
00:36:38,400 --> 00:36:42,400
so in here uh we can see that

876
00:36:42,400 --> 00:36:45,280
we have uh some

877
00:36:45,280 --> 00:36:47,920
checks regarding if storage type exists

878
00:36:47,920 --> 00:36:49,119
and in case

879
00:36:49,119 --> 00:36:50,000
uh

880
00:36:50,000 --> 00:36:50,880
it

881
00:36:50,880 --> 00:36:53,760
equals to local uh will pass and go

882
00:36:53,760 --> 00:36:55,200
through this code

883
00:36:55,200 --> 00:36:57,200
we see we have

884
00:36:57,200 --> 00:36:59,119
some switch case regarding the event

885
00:36:59,119 --> 00:37:02,000
type and in case it equals to get

886
00:37:02,000 --> 00:37:05,200
we check that the developer checks if

887
00:37:05,200 --> 00:37:09,599
the local storage is exist and in case

888
00:37:09,599 --> 00:37:11,599
and check another

889
00:37:11,599 --> 00:37:12,720
weird

890
00:37:12,720 --> 00:37:14,240
origin check

891
00:37:14,240 --> 00:37:15,920
for its own

892
00:37:15,920 --> 00:37:19,440
page with which will always be true

893
00:37:19,440 --> 00:37:21,520
then we can see in here

894
00:37:21,520 --> 00:37:23,599
the data is equals to local

895
00:37:23,599 --> 00:37:25,839
storage.getitem

896
00:37:25,839 --> 00:37:27,040
and

897
00:37:27,040 --> 00:37:30,720
with the paste data.key which controlled

898
00:37:30,720 --> 00:37:34,560
by us so we have the ability to retrieve

899
00:37:34,560 --> 00:37:38,480
any key from the local storage of the

900
00:37:38,480 --> 00:37:41,359
of the targeted website and we have and

901
00:37:41,359 --> 00:37:43,359
we we see that

902
00:37:43,359 --> 00:37:45,760
they use plus message in order to send

903
00:37:45,760 --> 00:37:51,839
the value back to the actual sender um

904
00:37:51,839 --> 00:37:55,200
you can see we have the the this in case

905
00:37:55,200 --> 00:37:57,359
the event type is set we have the

906
00:37:57,359 --> 00:38:01,200
ability to actually

907
00:38:01,280 --> 00:38:04,079
set an item into the local storage and

908
00:38:04,079 --> 00:38:07,280
we are controlling the key and the data

909
00:38:07,280 --> 00:38:08,640
that will be

910
00:38:08,640 --> 00:38:11,440
inserted into the local storage and we

911
00:38:11,440 --> 00:38:14,160
can delete uh and remove item from the

912
00:38:14,160 --> 00:38:16,160
local storage based on a key so

913
00:38:16,160 --> 00:38:17,280
basically

914
00:38:17,280 --> 00:38:19,520
um we have the ability

915
00:38:19,520 --> 00:38:22,560
um to full control the

916
00:38:22,560 --> 00:38:24,880
the local storage rather than if it will

917
00:38:24,880 --> 00:38:27,920
be a read or and write

918
00:38:27,920 --> 00:38:31,839
of the local storage of this targeted

919
00:38:31,839 --> 00:38:34,160
page

920
00:38:34,320 --> 00:38:35,599
in here

921
00:38:35,599 --> 00:38:37,680
we can see that

922
00:38:37,680 --> 00:38:41,119
same checks for storage type and they

923
00:38:41,119 --> 00:38:43,200
check in if it equals to

924
00:38:43,200 --> 00:38:44,640
cookie

925
00:38:44,640 --> 00:38:47,839
here we can see that in case it is uh

926
00:38:47,839 --> 00:38:50,240
the event type is get with the storage

927
00:38:50,240 --> 00:38:51,520
type cookie

928
00:38:51,520 --> 00:38:52,960
um

929
00:38:52,960 --> 00:38:54,480
so

930
00:38:54,480 --> 00:38:58,400
in case the past key will be equals to

931
00:38:58,400 --> 00:39:02,160
uh cookie all we will be able to

932
00:39:02,160 --> 00:39:04,160
fetch the cookies

933
00:39:04,160 --> 00:39:07,119
of the victims and they will send it

934
00:39:07,119 --> 00:39:10,640
back to us as the attackers we have a

935
00:39:10,640 --> 00:39:15,440
full control on the uh muffle controller

936
00:39:15,440 --> 00:39:17,680
we have the ability to read all the

937
00:39:17,680 --> 00:39:19,440
cookies of the

938
00:39:19,440 --> 00:39:21,839
victim

939
00:39:23,599 --> 00:39:25,359
now in here

940
00:39:25,359 --> 00:39:28,079
we can see um

941
00:39:28,079 --> 00:39:30,160
another uh code

942
00:39:30,160 --> 00:39:33,359
which is the same code there that all

943
00:39:33,359 --> 00:39:35,599
is the same the same part of the same

944
00:39:35,599 --> 00:39:36,800
code

945
00:39:36,800 --> 00:39:39,680
and we can see that we have some checks

946
00:39:39,680 --> 00:39:40,880
if we have

947
00:39:40,880 --> 00:39:43,680
pass date dot data and its data have a

948
00:39:43,680 --> 00:39:47,359
url in case it is we can see that we

949
00:39:47,359 --> 00:39:50,000
have some additional event types for

950
00:39:50,000 --> 00:39:53,839
muskref and muskref retry and basically

951
00:39:53,839 --> 00:39:56,880
we are controlling the data. url and we

952
00:39:56,880 --> 00:39:58,960
are able to

953
00:39:58,960 --> 00:40:02,240
perform csrf attacks on the victim

954
00:40:02,240 --> 00:40:03,760
because you can see that they are

955
00:40:03,760 --> 00:40:06,240
calling send requests and fire to url

956
00:40:06,240 --> 00:40:08,560
which allows us to actually send

957
00:40:08,560 --> 00:40:12,079
requests on behalf of the user

958
00:40:12,079 --> 00:40:14,839
now the most interesting one is the

959
00:40:14,839 --> 00:40:16,690
recusing frame the

960
00:40:16,690 --> 00:40:18,560
[Music]

961
00:40:18,560 --> 00:40:19,599
case

962
00:40:19,599 --> 00:40:20,480
and

963
00:40:20,480 --> 00:40:23,280
we will see that

964
00:40:23,280 --> 00:40:26,000
they are calling this uh sandrick using

965
00:40:26,000 --> 00:40:27,280
a

966
00:40:27,280 --> 00:40:29,760
frame function and let's go drill down

967
00:40:29,760 --> 00:40:31,839
to that

968
00:40:31,839 --> 00:40:32,640
um

969
00:40:32,640 --> 00:40:35,359
so in here we can see that

970
00:40:35,359 --> 00:40:38,319
what the developer do is to receive the

971
00:40:38,319 --> 00:40:41,440
url which is controlled by us

972
00:40:41,440 --> 00:40:44,160
it creates an element an iframe element

973
00:40:44,160 --> 00:40:47,839
and it sets the url as the iframe source

974
00:40:47,839 --> 00:40:50,960
we can see that it's invisible one with

975
00:40:50,960 --> 00:40:53,359
no height and width

976
00:40:53,359 --> 00:40:55,920
and they are appending the iframe to the

977
00:40:55,920 --> 00:40:56,880
body

978
00:40:56,880 --> 00:41:01,520
now this allows us to be able to

979
00:41:01,520 --> 00:41:02,400
use

980
00:41:02,400 --> 00:41:05,359
javascript as the url in order to

981
00:41:05,359 --> 00:41:07,119
actually

982
00:41:07,119 --> 00:41:08,000
um

983
00:41:08,000 --> 00:41:09,839
perform actions

984
00:41:09,839 --> 00:41:12,960
with within the same context of the

985
00:41:12,960 --> 00:41:15,760
vulnerable the target uh origin

986
00:41:15,760 --> 00:41:18,160
because when when you're using diaphragm

987
00:41:18,160 --> 00:41:20,400
with a source of javascript it just

988
00:41:20,400 --> 00:41:22,000
receives the same

989
00:41:22,000 --> 00:41:23,119
same

990
00:41:23,119 --> 00:41:26,880
origin context then we are able to

991
00:41:26,880 --> 00:41:29,839
to do whatever we want

992
00:41:29,839 --> 00:41:32,880
on behalf this domain and run any any

993
00:41:32,880 --> 00:41:34,640
any javascript so

994
00:41:34,640 --> 00:41:36,960
we can set some cookies we can steal

995
00:41:36,960 --> 00:41:40,400
cookies we can do whatever we want um

996
00:41:40,400 --> 00:41:43,520
and as you can see in here uh we have a

997
00:41:43,520 --> 00:41:45,520
window reference plus message this is

998
00:41:45,520 --> 00:41:48,560
just an example of the actual exploit

999
00:41:48,560 --> 00:41:51,359
so we see that we passed no sent from

1000
00:41:51,359 --> 00:41:53,680
bsdk

1001
00:41:53,680 --> 00:41:55,920
true in order to pass the

1002
00:41:55,920 --> 00:41:57,520
the um

1003
00:41:57,520 --> 00:42:00,240
the restrictions then we use the event

1004
00:42:00,240 --> 00:42:03,680
type refusing frame as we saw earlier

1005
00:42:03,680 --> 00:42:07,520
and we passed this data as json object

1006
00:42:07,520 --> 00:42:10,800
that contains a url and this url is

1007
00:42:10,800 --> 00:42:14,560
actually a javascript that can run so we

1008
00:42:14,560 --> 00:42:17,680
we are able to run any javascript on

1009
00:42:17,680 --> 00:42:19,920
behalf

1010
00:42:19,920 --> 00:42:21,839
of this targeted

1011
00:42:21,839 --> 00:42:24,400
website

1012
00:42:26,480 --> 00:42:30,000
in here you can see another example of

1013
00:42:30,000 --> 00:42:32,319
the ability to read and write

1014
00:42:32,319 --> 00:42:34,640
session storage um

1015
00:42:34,640 --> 00:42:36,560
this prints this print screen is

1016
00:42:36,560 --> 00:42:39,200
actually a half a version version of the

1017
00:42:39,200 --> 00:42:41,119
pasta the research tool that we

1018
00:42:41,119 --> 00:42:42,240
developed

1019
00:42:42,240 --> 00:42:44,960
that we will see in in few slides

1020
00:42:44,960 --> 00:42:47,200
um but what we can see in here so we can

1021
00:42:47,200 --> 00:42:49,280
see that we have local storage

1022
00:42:49,280 --> 00:42:51,359
uh which is one origin this is the

1023
00:42:51,359 --> 00:42:53,599
malicious website and we can see we have

1024
00:42:53,599 --> 00:42:56,160
the targeted region on the other end and

1025
00:42:56,160 --> 00:42:59,119
we can see a message sent from the

1026
00:42:59,119 --> 00:43:01,760
from the malicious site into the

1027
00:43:01,760 --> 00:43:03,920
targeted uh

1028
00:43:03,920 --> 00:43:05,119
website

1029
00:43:05,119 --> 00:43:08,560
um we can see that he passed a string

1030
00:43:08,560 --> 00:43:12,240
with type storage action get and some

1031
00:43:12,240 --> 00:43:14,960
key in order to

1032
00:43:14,960 --> 00:43:16,319
so we

1033
00:43:16,319 --> 00:43:18,800
we investigate the actual implementation

1034
00:43:18,800 --> 00:43:20,560
we see that they have this protocol

1035
00:43:20,560 --> 00:43:23,440
they're passing these jsons and they are

1036
00:43:23,440 --> 00:43:26,000
they needs to receive a type of storage

1037
00:43:26,000 --> 00:43:29,440
action and the key and then we can see

1038
00:43:29,440 --> 00:43:30,960
the next message

1039
00:43:30,960 --> 00:43:34,560
uh that we are that the the vulnerable

1040
00:43:34,560 --> 00:43:36,640
website sent

1041
00:43:36,640 --> 00:43:39,520
to us back a message after we send him a

1042
00:43:39,520 --> 00:43:42,480
message to please give me this

1043
00:43:42,480 --> 00:43:44,160
session key

1044
00:43:44,160 --> 00:43:46,319
we can see that

1045
00:43:46,319 --> 00:43:47,599
the type

1046
00:43:47,599 --> 00:43:49,599
so we send it back a message with the

1047
00:43:49,599 --> 00:43:52,880
type get storage we can see the key with

1048
00:43:52,880 --> 00:43:54,480
the session key and we can see the

1049
00:43:54,480 --> 00:43:58,160
actual value that we retrieved from the

1050
00:43:58,160 --> 00:44:00,640
victim and then we can use this value in

1051
00:44:00,640 --> 00:44:04,879
order to take over its account

1052
00:44:05,920 --> 00:44:08,960
in here we can see

1053
00:44:08,960 --> 00:44:13,680
another use case that is simple um

1054
00:44:13,680 --> 00:44:17,920
implementation that in case we are

1055
00:44:17,920 --> 00:44:20,319
opening

1056
00:44:20,480 --> 00:44:23,280
we are opening uh the actual page and

1057
00:44:23,280 --> 00:44:26,319
the actual page is loaded and is sent to

1058
00:44:26,319 --> 00:44:29,440
its window opener this message and this

1059
00:44:29,440 --> 00:44:31,040
message is actually

1060
00:44:31,040 --> 00:44:32,079
um

1061
00:44:32,079 --> 00:44:35,119
have this uh data you can see that the

1062
00:44:35,119 --> 00:44:37,760
action is after i need so after an

1063
00:44:37,760 --> 00:44:40,160
initialization of the page this message

1064
00:44:40,160 --> 00:44:42,800
is sent to us all we needed to do is

1065
00:44:42,800 --> 00:44:45,359
just to uh have a

1066
00:44:45,359 --> 00:44:46,960
window list

1067
00:44:46,960 --> 00:44:49,520
an event listener to receive message and

1068
00:44:49,520 --> 00:44:50,800
we just

1069
00:44:50,800 --> 00:44:52,480
log them into the console and you can

1070
00:44:52,480 --> 00:44:55,040
see in here that we have

1071
00:44:55,040 --> 00:44:57,200
some data regarding the user and the

1072
00:44:57,200 --> 00:45:00,640
most interesting one is the actual csrf

1073
00:45:00,640 --> 00:45:02,960
token that we

1074
00:45:02,960 --> 00:45:06,160
could use in order to perform actions

1075
00:45:06,160 --> 00:45:09,440
and bypass the csrf protection mechanism

1076
00:45:09,440 --> 00:45:14,160
um so we were we had the ability uh to

1077
00:45:14,160 --> 00:45:16,800
perform actions on behalf of

1078
00:45:16,800 --> 00:45:19,040
any user that is

1079
00:45:19,040 --> 00:45:23,440
that will browse into our malicious page

1080
00:45:24,800 --> 00:45:29,520
um in here we can see the aliexpress

1081
00:45:29,520 --> 00:45:31,280
sidebar

1082
00:45:31,280 --> 00:45:32,800
you can see that

1083
00:45:32,800 --> 00:45:37,119
so i was browsing aliexpress um i saw

1084
00:45:37,119 --> 00:45:38,319
this

1085
00:45:38,319 --> 00:45:41,920
i was intercepting the the messages um

1086
00:45:41,920 --> 00:45:45,280
then i saw that we have

1087
00:45:45,280 --> 00:45:48,240
this i saw some messages contains this

1088
00:45:48,240 --> 00:45:50,640
uh the values of

1089
00:45:50,640 --> 00:45:54,319
as you can see in here in the uh

1090
00:45:54,319 --> 00:45:55,839
sales sidebar

1091
00:45:55,839 --> 00:45:58,720
um they had some different origin that

1092
00:45:58,720 --> 00:46:01,200
they are embedded as an iframe and they

1093
00:46:01,200 --> 00:46:03,200
communicate with them in order to

1094
00:46:03,200 --> 00:46:05,760
fetch the list of the

1095
00:46:05,760 --> 00:46:06,490
sales

1096
00:46:06,490 --> 00:46:09,440
[Music]

1097
00:46:09,440 --> 00:46:11,530
packages or whatever

1098
00:46:11,530 --> 00:46:13,040
[Music]

1099
00:46:13,040 --> 00:46:16,640
and what we did is to actually we went

1100
00:46:16,640 --> 00:46:19,680
drill down to the code and and let's see

1101
00:46:19,680 --> 00:46:22,640
uh what what happened there

1102
00:46:22,640 --> 00:46:26,240
so basically we can see that uh they

1103
00:46:26,240 --> 00:46:29,599
used their own listener wrapper

1104
00:46:29,599 --> 00:46:31,920
with this messenger

1105
00:46:31,920 --> 00:46:34,640
the store proxy and they they set up

1106
00:46:34,640 --> 00:46:38,400
some they have their own setup for

1107
00:46:38,400 --> 00:46:41,040
cross-document messaging

1108
00:46:41,040 --> 00:46:42,560
you can see that the messenger that

1109
00:46:42,560 --> 00:46:45,599
listen is actually a receiver

1110
00:46:45,599 --> 00:46:48,640
um then you can see that they are

1111
00:46:48,640 --> 00:46:53,359
uh use the space the spe to see

1112
00:46:53,359 --> 00:46:54,480
um

1113
00:46:54,480 --> 00:46:57,040
and this value in order to split some

1114
00:46:57,040 --> 00:47:00,079
operation with keys and values and they

1115
00:47:00,079 --> 00:47:03,359
use their own weird implementation that

1116
00:47:03,359 --> 00:47:04,560
the actual

1117
00:47:04,560 --> 00:47:07,680
the dash underscore dash is a separator

1118
00:47:07,680 --> 00:47:11,359
and they used it some some so this is

1119
00:47:11,359 --> 00:47:13,920
like their own implementation

1120
00:47:13,920 --> 00:47:16,800
for their own communication protocol

1121
00:47:16,800 --> 00:47:18,400
um

1122
00:47:18,400 --> 00:47:21,839
then we can see uh on the right that uh

1123
00:47:21,839 --> 00:47:24,400
in case the operation is set

1124
00:47:24,400 --> 00:47:25,760
so

1125
00:47:25,760 --> 00:47:27,839
they will use this store which is in

1126
00:47:27,839 --> 00:47:31,119
this case the local storage

1127
00:47:31,119 --> 00:47:32,000
to

1128
00:47:32,000 --> 00:47:35,280
set a key and a value which is

1129
00:47:35,280 --> 00:47:37,280
obviously controlled by

1130
00:47:37,280 --> 00:47:40,480
by us we can see that we can get the

1131
00:47:40,480 --> 00:47:41,440
store

1132
00:47:41,440 --> 00:47:43,839
values or any value in the local storage

1133
00:47:43,839 --> 00:47:46,880
and we can we could remove these this

1134
00:47:46,880 --> 00:47:49,200
keys

1135
00:47:49,599 --> 00:47:52,240
so let's see the the actual exploit so

1136
00:47:52,240 --> 00:47:54,720
after drilling down

1137
00:47:54,720 --> 00:47:57,119
and understanding the actual

1138
00:47:57,119 --> 00:47:59,359
messages and their own

1139
00:47:59,359 --> 00:48:03,599
proprietary protocol we used um store

1140
00:48:03,599 --> 00:48:07,280
dash so the payload looks like store

1141
00:48:07,280 --> 00:48:09,200
dash proxy

1142
00:48:09,200 --> 00:48:12,800
then the actual operation which is set

1143
00:48:12,800 --> 00:48:15,920
in this case then we have this

1144
00:48:15,920 --> 00:48:18,640
the the this separator with dash

1145
00:48:18,640 --> 00:48:21,280
underscore dash the actual

1146
00:48:21,280 --> 00:48:23,599
key which is the big promotion category

1147
00:48:23,599 --> 00:48:25,119
list object

1148
00:48:25,119 --> 00:48:26,960
um then we have

1149
00:48:26,960 --> 00:48:29,760
the separator again with dash underscore

1150
00:48:29,760 --> 00:48:30,559
dash

1151
00:48:30,559 --> 00:48:33,520
and the malicious object it is that is

1152
00:48:33,520 --> 00:48:35,520
uh controlled by us

1153
00:48:35,520 --> 00:48:36,640
um

1154
00:48:36,640 --> 00:48:39,680
we loaded an iframe to the um

1155
00:48:39,680 --> 00:48:41,200
2d uh

1156
00:48:41,200 --> 00:48:44,960
vulnerable page and we use the exploit

1157
00:48:44,960 --> 00:48:47,520
we waited just a half of a second

1158
00:48:47,520 --> 00:48:49,680
in order to send the message so the

1159
00:48:49,680 --> 00:48:53,040
iframe will be loaded basically

1160
00:48:53,040 --> 00:48:54,240
this is the most

1161
00:48:54,240 --> 00:48:56,559
this is just an example of

1162
00:48:56,559 --> 00:48:58,319
how

1163
00:48:58,319 --> 00:48:59,359
exploit

1164
00:48:59,359 --> 00:49:02,079
can be written so any user that will

1165
00:49:02,079 --> 00:49:03,920
browse to it

1166
00:49:03,920 --> 00:49:07,040
it will rewrite its own

1167
00:49:07,040 --> 00:49:09,200
big promotion category list inside the

1168
00:49:09,200 --> 00:49:11,359
local storage

1169
00:49:11,359 --> 00:49:14,960
and we can see in here that we have the

1170
00:49:14,960 --> 00:49:18,000
that we actually uh executed this attack

1171
00:49:18,000 --> 00:49:20,240
and we can see that the big promotion

1172
00:49:20,240 --> 00:49:23,599
category list object controlled by us uh

1173
00:49:23,599 --> 00:49:26,160
you can see that we change the title um

1174
00:49:26,160 --> 00:49:29,280
to hackers and hobbies uh we could

1175
00:49:29,280 --> 00:49:32,559
change the icon or the url and the url

1176
00:49:32,559 --> 00:49:35,440
is actually can hold the javascript

1177
00:49:35,440 --> 00:49:37,119
so

1178
00:49:37,119 --> 00:49:40,079
basically once the user will click it

1179
00:49:40,079 --> 00:49:42,480
it will trigger the

1180
00:49:42,480 --> 00:49:45,520
the malicious code

1181
00:49:45,520 --> 00:49:46,240
so

1182
00:49:46,240 --> 00:49:48,558
um

1183
00:49:50,640 --> 00:49:53,200
page um

1184
00:49:53,200 --> 00:49:56,919
so once the victim

1185
00:50:04,079 --> 00:50:06,240
hey barack um just

1186
00:50:06,240 --> 00:50:07,760
looks like it's cutting out right now at

1187
00:50:07,760 --> 00:50:10,240
the moment um

1188
00:50:10,240 --> 00:50:12,000
we're just uh we're into our just a 10

1189
00:50:12,000 --> 00:50:13,359
minute warning kind of thing and i had

1190
00:50:13,359 --> 00:50:15,520
just a couple questions um and you know

1191
00:50:15,520 --> 00:50:16,720
if you had something you could spin up

1192
00:50:16,720 --> 00:50:20,959
real quick um okay you let me know

1193
00:50:21,440 --> 00:50:23,359
um

1194
00:50:23,359 --> 00:50:24,400
yeah so

1195
00:50:24,400 --> 00:50:27,359
would you like me to to continue or

1196
00:50:27,359 --> 00:50:28,960
yeah we just have two questions one's a

1197
00:50:28,960 --> 00:50:30,800
really simple one like uh will the ref

1198
00:50:30,800 --> 00:50:32,240
you know will these slides be you

1199
00:50:32,240 --> 00:50:33,599
available post talk i'm guessing they

1200
00:50:33,599 --> 00:50:36,480
can hit it up on your blog on quentin um

1201
00:50:36,480 --> 00:50:38,240
and then uh the second one was kind of

1202
00:50:38,240 --> 00:50:40,400
just talking about um open messaging

1203
00:50:40,400 --> 00:50:42,480
applications being used as an avenue to

1204
00:50:42,480 --> 00:50:43,760
business infrastructure is that

1205
00:50:43,760 --> 00:50:46,400
something that you see

1206
00:50:46,400 --> 00:50:48,079
sorry can you repeat

1207
00:50:48,079 --> 00:50:50,319
yeah so like uh the question is can open

1208
00:50:50,319 --> 00:50:52,160
messaging applications be used as an

1209
00:50:52,160 --> 00:50:54,880
avenue to business infrastructure so

1210
00:50:54,880 --> 00:50:57,119
um

1211
00:50:57,520 --> 00:50:59,760
yeah so in bit like

1212
00:50:59,760 --> 00:51:01,680
if i if i try to like business

1213
00:51:01,680 --> 00:51:04,160
infrastructure usually um

1214
00:51:04,160 --> 00:51:06,000
you we can see a lot of

1215
00:51:06,000 --> 00:51:09,280
a lot of implementations around uh

1216
00:51:09,280 --> 00:51:11,359
around um

1217
00:51:11,359 --> 00:51:15,760
like third-party apps and in many many

1218
00:51:15,760 --> 00:51:18,640
infrastructure of infrastructure you can

1219
00:51:18,640 --> 00:51:22,800
see um website builders and and many

1220
00:51:22,800 --> 00:51:24,800
many other cases when you can see these

1221
00:51:24,800 --> 00:51:27,119
uh this implementation

1222
00:51:27,119 --> 00:51:28,880
um a lot of uh

1223
00:51:28,880 --> 00:51:31,599
advertisement um implemented around

1224
00:51:31,599 --> 00:51:33,359
implementations

1225
00:51:33,359 --> 00:51:34,720
um

1226
00:51:34,720 --> 00:51:36,720
yeah

1227
00:51:36,720 --> 00:51:37,760
gotcha

1228
00:51:37,760 --> 00:51:39,440
i just questioned i see your slide's a

1229
00:51:39,440 --> 00:51:41,119
magical research tool is that an open

1230
00:51:41,119 --> 00:51:44,000
source product that uh you're

1231
00:51:44,000 --> 00:51:47,040
yes i did i didn't had enough time to

1232
00:51:47,040 --> 00:51:49,200
talk about it but yes

1233
00:51:49,200 --> 00:51:52,960
we as you can see in the presentation um

1234
00:51:52,960 --> 00:51:55,839
so we basically managed to develop the

1235
00:51:55,839 --> 00:51:57,440
to develop

1236
00:51:57,440 --> 00:52:00,160
a research tool named pasta

1237
00:52:00,160 --> 00:52:03,119
um so we looked for um

1238
00:52:03,119 --> 00:52:05,520
for in other implementation of such a

1239
00:52:05,520 --> 00:52:09,680
research tool uh we didn't see any any

1240
00:52:09,680 --> 00:52:12,640
satisfied and really uh professional one

1241
00:52:12,640 --> 00:52:15,920
um and we we wanted it to be uh to be

1242
00:52:15,920 --> 00:52:19,200
able to see senders and messages to see

1243
00:52:19,200 --> 00:52:21,680
the receivers in the messages and to be

1244
00:52:21,680 --> 00:52:24,640
able to actually simulate malicious

1245
00:52:24,640 --> 00:52:26,960
sender and receivers

1246
00:52:26,960 --> 00:52:29,040
this is why like

1247
00:52:29,040 --> 00:52:32,000
me and the two other guys fen gubaria

1248
00:52:32,000 --> 00:52:35,119
and omari iran my colleagues we managed

1249
00:52:35,119 --> 00:52:38,160
to develop it together

1250
00:52:38,160 --> 00:52:41,920
it's basically just a simple

1251
00:52:41,920 --> 00:52:44,000
chrome chromium extension

1252
00:52:44,000 --> 00:52:46,559
that you can just install on your chrome

1253
00:52:46,559 --> 00:52:49,599
um it has the ability so it intercepts

1254
00:52:49,599 --> 00:52:52,640
the entire tabs it gives you the actual

1255
00:52:52,640 --> 00:52:55,920
uh hierarchy as you can see in here

1256
00:52:55,920 --> 00:52:59,280
we have the the answer.security

1257
00:52:59,280 --> 00:53:01,359
and we can see the actual messages that

1258
00:53:01,359 --> 00:53:04,640
sent to it and received

1259
00:53:04,640 --> 00:53:07,680
we can see the hierarchy and go and

1260
00:53:07,680 --> 00:53:09,440
drill down for each

1261
00:53:09,440 --> 00:53:11,680
tab to understand exactly what kind of

1262
00:53:11,680 --> 00:53:14,559
listeners it implements so you will be

1263
00:53:14,559 --> 00:53:17,359
able to see the listeners on the right

1264
00:53:17,359 --> 00:53:18,240
uh

1265
00:53:18,240 --> 00:53:21,040
when you can see now the the the message

1266
00:53:21,040 --> 00:53:23,440
so you will be able to go and

1267
00:53:23,440 --> 00:53:25,680
investigate the actual listener to see

1268
00:53:25,680 --> 00:53:26,960
if they have

1269
00:53:26,960 --> 00:53:29,599
authorization in place etc and you have

1270
00:53:29,599 --> 00:53:32,900
the ability to see and receive messages

1271
00:53:32,900 --> 00:53:34,640
[Music]

1272
00:53:34,640 --> 00:53:36,800
to see message incoming messages and

1273
00:53:36,800 --> 00:53:39,440
outcome messages as you can see in here

1274
00:53:39,440 --> 00:53:40,400
so

1275
00:53:40,400 --> 00:53:42,240
you can simply see that the first

1276
00:53:42,240 --> 00:53:45,440
message was uh incoming from uh

1277
00:53:45,440 --> 00:53:47,440
vars.org.com

1278
00:53:47,440 --> 00:53:50,000
into answer.security and you can see the

1279
00:53:50,000 --> 00:53:53,200
response of anzo security uh

1280
00:53:53,200 --> 00:53:54,240
in here

1281
00:53:54,240 --> 00:53:57,359
um on the right button uh you can see

1282
00:53:57,359 --> 00:53:59,040
you have two buttons

1283
00:53:59,040 --> 00:54:00,480
one for

1284
00:54:00,480 --> 00:54:03,119
actually replying um

1285
00:54:03,119 --> 00:54:06,640
and reply requests as as you wish and we

1286
00:54:06,640 --> 00:54:10,319
have the simulate exploit which

1287
00:54:10,319 --> 00:54:12,800
which is another page that allows you to

1288
00:54:12,800 --> 00:54:15,599
actually um test and exploit four

1289
00:54:15,599 --> 00:54:18,160
senders and receivers in order to be

1290
00:54:18,160 --> 00:54:21,359
able to to to actually test your exploit

1291
00:54:21,359 --> 00:54:22,559
um

1292
00:54:22,559 --> 00:54:26,960
in the much in the most uh efficient way

1293
00:54:30,559 --> 00:54:32,240
very cool um are there any uh other

1294
00:54:32,240 --> 00:54:34,079
projects you might your you and your

1295
00:54:34,079 --> 00:54:36,960
team are gonna be working on

1296
00:54:36,960 --> 00:54:39,839
um i have our own

1297
00:54:39,839 --> 00:54:42,720
yeah yeah yeah i have my own authorized

1298
00:54:42,720 --> 00:54:44,640
verb extension

1299
00:54:44,640 --> 00:54:47,599
i i understood from from uh portzweger

1300
00:54:47,599 --> 00:54:49,200
guys that is

1301
00:54:49,200 --> 00:54:51,119
it's one of the most popular burp

1302
00:54:51,119 --> 00:54:54,400
extension and i'm so happy about it and

1303
00:54:54,400 --> 00:54:57,119
and helping the the community

1304
00:54:57,119 --> 00:54:59,760
um so i'm highly recommending everyone

1305
00:54:59,760 --> 00:55:02,160
to to check it out i know it's pretty

1306
00:55:02,160 --> 00:55:04,640
popular in the optic ward but if you are

1307
00:55:04,640 --> 00:55:07,040
not familiar with that

1308
00:55:07,040 --> 00:55:08,799
you have to

1309
00:55:08,799 --> 00:55:09,760
um

1310
00:55:09,760 --> 00:55:12,480
yeah and if i would can i go through the

1311
00:55:12,480 --> 00:55:14,799
best practices maybe

1312
00:55:14,799 --> 00:55:16,480
sure go ahead great

1313
00:55:16,480 --> 00:55:20,799
cool um so basically two of the most uh

1314
00:55:20,799 --> 00:55:22,559
the most uh

1315
00:55:22,559 --> 00:55:25,359
so two of the most uh uh important

1316
00:55:25,359 --> 00:55:28,000
things regarding the regarding uh

1317
00:55:28,000 --> 00:55:30,960
cross-document messaging will be to

1318
00:55:30,960 --> 00:55:32,559
always declare

1319
00:55:32,559 --> 00:55:33,760
uh

1320
00:55:33,760 --> 00:55:36,079
and define explicit origin target when

1321
00:55:36,079 --> 00:55:37,359
you are

1322
00:55:37,359 --> 00:55:38,400
using

1323
00:55:38,400 --> 00:55:41,040
postmessage method um and

1324
00:55:41,040 --> 00:55:43,920
never use a wildcard and we'll need to

1325
00:55:43,920 --> 00:55:44,640
be

1326
00:55:44,640 --> 00:55:47,440
really strict about that

1327
00:55:47,440 --> 00:55:50,000
and the second is to actually when you

1328
00:55:50,000 --> 00:55:52,319
are receiving messages make sure that

1329
00:55:52,319 --> 00:55:53,520
you are

1330
00:55:53,520 --> 00:55:55,839
having the very verification the origin

1331
00:55:55,839 --> 00:55:57,280
verification

1332
00:55:57,280 --> 00:55:58,720
mechanism

1333
00:55:58,720 --> 00:56:00,160
um

1334
00:56:00,160 --> 00:56:02,480
we should like it is really crucial and

1335
00:56:02,480 --> 00:56:05,680
i see a lot of uh implementation when

1336
00:56:05,680 --> 00:56:08,079
developers are not aware of it and they

1337
00:56:08,079 --> 00:56:11,040
are doing a lot of mistakes around death

1338
00:56:11,040 --> 00:56:12,480
so

1339
00:56:12,480 --> 00:56:15,040
so that's that's the third point so you

1340
00:56:15,040 --> 00:56:17,440
have to to make sure that your

1341
00:56:17,440 --> 00:56:19,839
developers are actually no

1342
00:56:19,839 --> 00:56:22,160
um to that

1343
00:56:22,160 --> 00:56:25,119
and that's no to actually write a proper

1344
00:56:25,119 --> 00:56:27,680
verification mechanism because we can

1345
00:56:27,680 --> 00:56:31,359
see a lot of cases maybe most of you

1346
00:56:31,359 --> 00:56:32,720
know it from

1347
00:56:32,720 --> 00:56:35,839
from open redirection attacks when when

1348
00:56:35,839 --> 00:56:37,359
the developers

1349
00:56:37,359 --> 00:56:39,680
might implement some restrictions but

1350
00:56:39,680 --> 00:56:41,200
they are actually

1351
00:56:41,200 --> 00:56:43,520
easily bypassable and it is super

1352
00:56:43,520 --> 00:56:45,359
important for them to

1353
00:56:45,359 --> 00:56:46,860
to be able to

1354
00:56:46,860 --> 00:56:48,480
[Music]

1355
00:56:48,480 --> 00:56:50,880
know and share this knowledge and in

1356
00:56:50,880 --> 00:56:52,000
order to

1357
00:56:52,000 --> 00:56:55,040
for them and you to have a proper

1358
00:56:55,040 --> 00:56:56,960
origin verification

1359
00:56:56,960 --> 00:56:59,200
um the fourth point is regarding the the

1360
00:56:59,200 --> 00:57:01,440
headers to be honest

1361
00:57:01,440 --> 00:57:04,079
like it's it's always welcome and it's

1362
00:57:04,079 --> 00:57:06,480
and it's good but it's the headers the

1363
00:57:06,480 --> 00:57:08,559
exfoliators is

1364
00:57:08,559 --> 00:57:10,480
and and across the region policies they

1365
00:57:10,480 --> 00:57:12,400
are not really holistic

1366
00:57:12,400 --> 00:57:14,160
um so

1367
00:57:14,160 --> 00:57:17,119
as i said like the the two two first

1368
00:57:17,119 --> 00:57:19,440
points are the most important

1369
00:57:19,440 --> 00:57:22,720
and uh i'm highly recommending you to to

1370
00:57:22,720 --> 00:57:26,118
challenge it

1371
00:57:26,799 --> 00:57:28,720
awesome well thanks barack the i guess

1372
00:57:28,720 --> 00:57:30,160
they call you the cookie monster

1373
00:57:30,160 --> 00:57:32,799
probably um i

1374
00:57:32,799 --> 00:57:35,280
appreciate uh your presentation it was

1375
00:57:35,280 --> 00:57:38,240
really informative

