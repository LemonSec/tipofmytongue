1
00:00:01,420 --> 00:00:05,200
[Music]

2
00:00:05,200 --> 00:00:08,480
um hello everyone um so we're gonna do

3
00:00:08,480 --> 00:00:10,639
uh talk about injection ending injection

4
00:00:10,639 --> 00:00:13,280
vulnerabilities um

5
00:00:13,280 --> 00:00:15,120
obviously we've got quite a lot of stuff

6
00:00:15,120 --> 00:00:17,680
that's already happened trying to

7
00:00:17,680 --> 00:00:19,279
solve this problem

8
00:00:19,279 --> 00:00:21,279
um but we're going to just talk about

9
00:00:21,279 --> 00:00:22,560
quickly the

10
00:00:22,560 --> 00:00:26,160
injection properties just generally

11
00:00:26,320 --> 00:00:31,480
take checking a special type of string

12
00:00:31,519 --> 00:00:33,200
hello

13
00:00:33,200 --> 00:00:35,520
so download

14
00:00:35,520 --> 00:00:37,760
sound

15
00:00:40,000 --> 00:00:42,320
[Music]

16
00:00:42,320 --> 00:00:45,719
yeah i'm unmuted

17
00:00:46,480 --> 00:00:49,280
okay fine okay

18
00:00:49,280 --> 00:00:51,840
okay so right yes um so sometime taint

19
00:00:51,840 --> 00:00:54,079
checking stuff um but we'll move on to

20
00:00:54,079 --> 00:00:56,559
like a special type of string um

21
00:00:56,559 --> 00:01:00,000
handling some oddities um examples in go

22
00:01:00,000 --> 00:01:03,680
node javascript java and php the future

23
00:01:03,680 --> 00:01:04,559
and in

24
00:01:04,559 --> 00:01:06,320
10 years time

25
00:01:06,320 --> 00:01:07,760
so the main thing i'm going to be

26
00:01:07,760 --> 00:01:09,280
talking about is

27
00:01:09,280 --> 00:01:11,200
distinguishing strings from a trusted

28
00:01:11,200 --> 00:01:13,119
developer from strings that may be

29
00:01:13,119 --> 00:01:16,240
attacking controlled um now this was a

30
00:01:16,240 --> 00:01:19,200
statement that mike samuel made um in

31
00:01:19,200 --> 00:01:21,040
one of the

32
00:01:21,040 --> 00:01:22,080
javascript

33
00:01:22,080 --> 00:01:23,600
repos

34
00:01:23,600 --> 00:01:28,080
and it's kind of a key um thing for

35
00:01:28,080 --> 00:01:30,079
i am sharing the wrong slide

36
00:01:30,079 --> 00:01:33,600
okay sorry um this is not going well

37
00:01:33,600 --> 00:01:36,640
all right give me a second switch over

38
00:01:36,640 --> 00:01:39,960
stop sharing

39
00:01:46,000 --> 00:01:49,000
okay

40
00:01:55,840 --> 00:01:57,759
okay so that's a few seconds behind

41
00:01:57,759 --> 00:01:59,200
right

42
00:01:59,200 --> 00:02:01,200
okay so um

43
00:02:01,200 --> 00:02:02,479
the signature strings from a trusted

44
00:02:02,479 --> 00:02:04,240
developer from strings that may be

45
00:02:04,240 --> 00:02:06,240
attacker controlled um

46
00:02:06,240 --> 00:02:09,280
by mike samuel um back in march

47
00:02:09,280 --> 00:02:11,840
uh 2019

48
00:02:11,840 --> 00:02:12,959
um

49
00:02:12,959 --> 00:02:14,879
the

50
00:02:14,879 --> 00:02:16,959
this basic principle will allow us to

51
00:02:16,959 --> 00:02:19,200
actually stop injection vulnerabilities

52
00:02:19,200 --> 00:02:21,120
from being a problem

53
00:02:21,120 --> 00:02:24,080
um what we can

54
00:02:24,080 --> 00:02:27,040
also do is use information where uh sort

55
00:02:27,040 --> 00:02:29,520
of christopher kern did a talk uh back

56
00:02:29,520 --> 00:02:33,040
in uh 2015 or 2016 on preventing

57
00:02:33,040 --> 00:02:35,200
security bugs through software design uh

58
00:02:35,200 --> 00:02:37,680
kristoff works at google and this is how

59
00:02:37,680 --> 00:02:38,720
they have

60
00:02:38,720 --> 00:02:41,040
approached the problem selves and it has

61
00:02:41,040 --> 00:02:41,760
been

62
00:02:41,760 --> 00:02:44,560
very effective at stopping these

63
00:02:44,560 --> 00:02:47,040
problems

64
00:02:48,480 --> 00:02:50,319
it's also included in the building

65
00:02:50,319 --> 00:02:52,959
secure and reliable systems book um from

66
00:02:52,959 --> 00:02:55,680
a few different googlers um if you do

67
00:02:55,680 --> 00:02:57,519
get this book you if you just turn to

68
00:02:57,519 --> 00:03:00,560
page 266 it's about four or five pages

69
00:03:00,560 --> 00:03:02,840
on this basic concept

70
00:03:02,840 --> 00:03:05,280
um right so

71
00:03:05,280 --> 00:03:07,120
our actual talk today um we're going to

72
00:03:07,120 --> 00:03:09,599
use two characters uh thank you for toby

73
00:03:09,599 --> 00:03:11,200
fox um

74
00:03:11,200 --> 00:03:13,760
undyne is going to be our defender and

75
00:03:13,760 --> 00:03:16,080
spam tom nizanga attacker uh this is

76
00:03:16,080 --> 00:03:18,400
from undertale deltarune

77
00:03:18,400 --> 00:03:19,519
so

78
00:03:19,519 --> 00:03:22,159
injection vulnerabilities uh this is the

79
00:03:22,159 --> 00:03:24,799
classic it's simple example where you've

80
00:03:24,799 --> 00:03:28,000
got the escort query and

81
00:03:28,000 --> 00:03:29,760
user data has been appended onto the end

82
00:03:29,760 --> 00:03:33,760
of it the developer thinks this will be

83
00:03:33,760 --> 00:03:35,280
how it works and it's great you know it

84
00:03:35,280 --> 00:03:36,879
does actually work

85
00:03:36,879 --> 00:03:38,560
um but unfortunately when you have

86
00:03:38,560 --> 00:03:41,120
sphantum come along um

87
00:03:41,120 --> 00:03:42,959
spamton will just depend this on to the

88
00:03:42,959 --> 00:03:45,920
end and it'll be you know minus one to

89
00:03:45,920 --> 00:03:47,440
sort of probably kill off anything from

90
00:03:47,440 --> 00:03:48,640
the user table we're not actually going

91
00:03:48,640 --> 00:03:50,319
to return anything from there

92
00:03:50,319 --> 00:03:55,360
now use the union uh query and we'll um

93
00:03:55,360 --> 00:03:58,319
then select from the admin table so now

94
00:03:58,319 --> 00:04:00,640
spamtum is looking into the admin table

95
00:04:00,640 --> 00:04:02,879
who probably shouldn't be doing that

96
00:04:02,879 --> 00:04:03,920
um

97
00:04:03,920 --> 00:04:05,760
now we've been able to solve this for a

98
00:04:05,760 --> 00:04:08,799
while with uh prepared um primarized

99
00:04:08,799 --> 00:04:09,840
queries

100
00:04:09,840 --> 00:04:11,840
uh what we do is we

101
00:04:11,840 --> 00:04:14,400
select from oh you basically make your

102
00:04:14,400 --> 00:04:17,440
sql as a string as a programmer define

103
00:04:17,440 --> 00:04:18,560
string

104
00:04:18,560 --> 00:04:20,720
and what we do is we send that

105
00:04:20,720 --> 00:04:23,600
to the database where it will pass it it

106
00:04:23,600 --> 00:04:26,000
will create its query execution plan

107
00:04:26,000 --> 00:04:28,240
and then as a separate step the user

108
00:04:28,240 --> 00:04:29,919
data comes in and replaces those

109
00:04:29,919 --> 00:04:31,600
question marks or might be named

110
00:04:31,600 --> 00:04:32,800
parameters

111
00:04:32,800 --> 00:04:35,120
um this means the database does all of

112
00:04:35,120 --> 00:04:37,040
its work with the programmer defined

113
00:04:37,040 --> 00:04:39,040
string

114
00:04:39,040 --> 00:04:42,240
um another approach uh sorry that works

115
00:04:42,240 --> 00:04:44,639
another approach is we can use database

116
00:04:44,639 --> 00:04:47,440
abstractions because

117
00:04:47,440 --> 00:04:50,400
writing sql is not exactly um

118
00:04:50,400 --> 00:04:52,080
people's favorite way of doing things

119
00:04:52,080 --> 00:04:54,400
and the database abstraction can help us

120
00:04:54,400 --> 00:04:56,479
do other things like linking up to

121
00:04:56,479 --> 00:04:59,360
objects and different methods to you

122
00:04:59,360 --> 00:05:02,720
know make this make our lives easier

123
00:05:02,720 --> 00:05:04,720
now most

124
00:05:04,720 --> 00:05:07,039
abstractions will try to allow you to

125
00:05:07,039 --> 00:05:09,120
filter

126
00:05:09,120 --> 00:05:11,039
and what they'll do is they'll give you

127
00:05:11,039 --> 00:05:12,960
a method of sort of limiting those

128
00:05:12,960 --> 00:05:13,919
things

129
00:05:13,919 --> 00:05:15,840
um usually what you have to do is

130
00:05:15,840 --> 00:05:17,759
provide your developers to find string

131
00:05:17,759 --> 00:05:19,840
up front and then you provide any user

132
00:05:19,840 --> 00:05:22,720
values separately um in this case you

133
00:05:22,720 --> 00:05:24,400
know first we have the author id and

134
00:05:24,400 --> 00:05:26,240
we're just simply passing the id

135
00:05:26,240 --> 00:05:27,360
separately

136
00:05:27,360 --> 00:05:30,160
um sometimes there is no user data and

137
00:05:30,160 --> 00:05:31,520
it is just simply

138
00:05:31,520 --> 00:05:34,720
you know the author id is null

139
00:05:34,720 --> 00:05:36,080
next

140
00:05:36,080 --> 00:05:36,840
we

141
00:05:36,840 --> 00:05:41,440
have um a date in brackets published

142
00:05:41,440 --> 00:05:43,199
because

143
00:05:43,199 --> 00:05:45,520
let's say the published day is a time

144
00:05:45,520 --> 00:05:47,600
date time so it has a date and a time

145
00:05:47,600 --> 00:05:49,759
the date function allows us to filter

146
00:05:49,759 --> 00:05:51,759
just to the date component and you can

147
00:05:51,759 --> 00:05:53,919
do that not the most efficient but some

148
00:05:53,919 --> 00:05:55,840
people do it this way and all that is

149
00:05:55,840 --> 00:05:57,280
fine

150
00:05:57,280 --> 00:05:59,520
um when we start going a little bit off

151
00:05:59,520 --> 00:06:01,840
track is when you sort of take your you

152
00:06:01,840 --> 00:06:04,160
know maybe hard-coded you say word count

153
00:06:04,160 --> 00:06:05,840
is greater than a thousand maybe because

154
00:06:05,840 --> 00:06:08,639
we're looking for long form articles

155
00:06:08,639 --> 00:06:11,360
but imagine a situation

156
00:06:11,360 --> 00:06:13,199
where the

157
00:06:13,199 --> 00:06:14,720
uh

158
00:06:14,720 --> 00:06:16,479
users want to be able to configure what

159
00:06:16,479 --> 00:06:18,400
they consider to be a

160
00:06:18,400 --> 00:06:21,280
long form article

161
00:06:21,280 --> 00:06:23,280
now if you're to do this properly

162
00:06:23,280 --> 00:06:25,199
according to the documentation

163
00:06:25,199 --> 00:06:27,600
you would use the comma and you provide

164
00:06:27,600 --> 00:06:30,319
the counting separately

165
00:06:30,319 --> 00:06:32,000
but imagine this job has been given to a

166
00:06:32,000 --> 00:06:33,440
junior developer

167
00:06:33,440 --> 00:06:35,680
or maybe you just make a mistake

168
00:06:35,680 --> 00:06:37,840
and what you instead do is use

169
00:06:37,840 --> 00:06:39,360
concatenation

170
00:06:39,360 --> 00:06:41,800
so the word count is greater than the

171
00:06:41,800 --> 00:06:43,520
concatenated

172
00:06:43,520 --> 00:06:44,639
bit of

173
00:06:44,639 --> 00:06:45,759
count

174
00:06:45,759 --> 00:06:49,280
so the database abstraction has no idea

175
00:06:49,280 --> 00:06:52,240
that user data has been included in this

176
00:06:52,240 --> 00:06:54,080
and while this would work for the

177
00:06:54,080 --> 00:06:56,400
developer testing it because count for

178
00:06:56,400 --> 00:06:57,840
them is

179
00:06:57,840 --> 00:06:59,199
a thousand or whatever the number is

180
00:06:59,199 --> 00:07:00,800
going to be

181
00:07:00,800 --> 00:07:03,199
when spamton comes along uh you know our

182
00:07:03,199 --> 00:07:05,039
little attacker they'll do word count

183
00:07:05,039 --> 00:07:07,440
greater than word count which is false

184
00:07:07,440 --> 00:07:08,800
you can't have something greater than

185
00:07:08,800 --> 00:07:10,080
itself

186
00:07:10,080 --> 00:07:12,080
and then it will then spamming just does

187
00:07:12,080 --> 00:07:15,039
a union select to append more data onto

188
00:07:15,039 --> 00:07:16,479
the end of that query

189
00:07:16,479 --> 00:07:19,120
so that database abstraction has hidden

190
00:07:19,120 --> 00:07:21,840
some of the details that has allowed

191
00:07:21,840 --> 00:07:23,520
another injection vulnerability to come

192
00:07:23,520 --> 00:07:25,599
in

193
00:07:25,599 --> 00:07:29,120
another example is if you did a order by

194
00:07:29,120 --> 00:07:31,520
so the database abstraction allows you

195
00:07:31,520 --> 00:07:34,240
just to provide uh the order by query

196
00:07:34,240 --> 00:07:36,400
and if it goes from the url which it

197
00:07:36,400 --> 00:07:37,919
sometimes does

198
00:07:37,919 --> 00:07:40,400
um it can just be appended like this and

199
00:07:40,400 --> 00:07:42,400
that is working

200
00:07:42,400 --> 00:07:45,199
but is phantom's coming along

201
00:07:45,199 --> 00:07:49,199
they might do this now i quite like

202
00:07:49,199 --> 00:07:50,400
um

203
00:07:50,400 --> 00:07:52,560
the

204
00:07:53,039 --> 00:07:55,759
order by problem because order by is

205
00:07:55,759 --> 00:07:57,680
limited to

206
00:07:57,680 --> 00:08:00,400
what it um

207
00:08:00,400 --> 00:08:01,759
what it can and can't do you can't

208
00:08:01,759 --> 00:08:04,319
easily do a union onto this

209
00:08:04,319 --> 00:08:07,360
but what you can do is do it character

210
00:08:07,360 --> 00:08:10,840
by character extraction of the data

211
00:08:10,840 --> 00:08:13,360
um the

212
00:08:13,360 --> 00:08:15,680
way to do it is you do select one from

213
00:08:15,680 --> 00:08:17,680
admin where id equals six and what

214
00:08:17,680 --> 00:08:19,520
you're doing now is you're saying i'm

215
00:08:19,520 --> 00:08:21,680
you know the attacker is focusing on one

216
00:08:21,680 --> 00:08:22,800
thing

217
00:08:22,800 --> 00:08:23,680
um

218
00:08:23,680 --> 00:08:27,400
sorry two seconds

219
00:08:32,799 --> 00:08:34,799
okay right sorry

220
00:08:34,799 --> 00:08:37,679
let's go back to this

221
00:08:37,679 --> 00:08:39,839
okay so yes so we're going to select

222
00:08:39,839 --> 00:08:41,519
from the admin table

223
00:08:41,519 --> 00:08:43,519
where id equals 6

224
00:08:43,519 --> 00:08:46,000
and the password is this

225
00:08:46,000 --> 00:08:47,920
why this query is quite fascinating is

226
00:08:47,920 --> 00:08:49,920
because if it doesn't return any rows at

227
00:08:49,920 --> 00:08:50,800
all

228
00:08:50,800 --> 00:08:53,279
that's kind of zero-ish

229
00:08:53,279 --> 00:08:55,680
if it does match something it becomes

230
00:08:55,680 --> 00:08:58,000
one

231
00:08:58,080 --> 00:09:00,480
when you are running this query

232
00:09:00,480 --> 00:09:04,000
if one well the id equals the number one

233
00:09:04,000 --> 00:09:06,399
then user one moves to the bottom of the

234
00:09:06,399 --> 00:09:08,720
list

235
00:09:08,720 --> 00:09:11,600
so in this case let's say the id does

236
00:09:11,600 --> 00:09:13,200
not match

237
00:09:13,200 --> 00:09:16,080
amy anderson who has an id of one does

238
00:09:16,080 --> 00:09:17,440
not move

239
00:09:17,440 --> 00:09:20,160
reissue the query with a b

240
00:09:20,160 --> 00:09:23,040
and let's say it does match suddenly amy

241
00:09:23,040 --> 00:09:24,480
drops to the bottom

242
00:09:24,480 --> 00:09:25,680
and now you know what the first

243
00:09:25,680 --> 00:09:28,240
character of the password field is

244
00:09:28,240 --> 00:09:30,320
um and then scanting will just build up

245
00:09:30,320 --> 00:09:32,720
over and over again um swanson probably

246
00:09:32,720 --> 00:09:34,800
wouldn't do with abc probably start with

247
00:09:34,800 --> 00:09:37,279
s uh most common character and then once

248
00:09:37,279 --> 00:09:38,560
you get a few characters under the belt

249
00:09:38,560 --> 00:09:40,399
you start using words and things and

250
00:09:40,399 --> 00:09:42,320
obviously you know we know not to store

251
00:09:42,320 --> 00:09:44,480
passwords in plain text

252
00:09:44,480 --> 00:09:46,160
but you know it's just a nice easy

253
00:09:46,160 --> 00:09:48,240
example to show how an order by can be

254
00:09:48,240 --> 00:09:51,200
exploited with the database abstraction

255
00:09:51,200 --> 00:09:52,000
and

256
00:09:52,000 --> 00:09:53,120
people aren't thinking this is going to

257
00:09:53,120 --> 00:09:55,839
be a problem when it is

258
00:09:55,839 --> 00:09:58,080
so going from sql we've got some html

259
00:09:58,080 --> 00:10:00,160
this is your classic

260
00:10:00,160 --> 00:10:03,200
html encoding problem

261
00:10:03,200 --> 00:10:05,600
what we're gonna do is just basically do

262
00:10:05,600 --> 00:10:06,800
that um

263
00:10:06,800 --> 00:10:09,200
svanton just puts in the script tag

264
00:10:09,200 --> 00:10:11,760
and is running the evil alert

265
00:10:11,760 --> 00:10:13,760
um

266
00:10:13,760 --> 00:10:15,279
how we deal with this is we use

267
00:10:15,279 --> 00:10:17,279
templating engines you either get your

268
00:10:17,279 --> 00:10:19,600
html template from our file or in this

269
00:10:19,600 --> 00:10:21,600
case we're going to use a string

270
00:10:21,600 --> 00:10:23,440
a programmer define string

271
00:10:23,440 --> 00:10:25,440
and you put that in the first argument

272
00:10:25,440 --> 00:10:27,519
and then you provide the values

273
00:10:27,519 --> 00:10:30,000
separately so it can be filled out

274
00:10:30,000 --> 00:10:32,160
this is how it works um you do have to

275
00:10:32,160 --> 00:10:34,079
be careful your templating engine is

276
00:10:34,079 --> 00:10:36,320
actually context aware some templating

277
00:10:36,320 --> 00:10:39,200
engines are much too simple for this um

278
00:10:39,200 --> 00:10:42,160
but for example if you're putting a url

279
00:10:42,160 --> 00:10:45,440
into a haref that haref attribute should

280
00:10:45,440 --> 00:10:46,480
not contain

281
00:10:46,480 --> 00:10:48,480
javascript

282
00:10:48,480 --> 00:10:49,760
and that's why a templating engine needs

283
00:10:49,760 --> 00:10:52,240
to be context aware

284
00:10:52,240 --> 00:10:53,600
another example is command line

285
00:10:53,600 --> 00:10:55,920
injection

286
00:10:55,920 --> 00:10:58,640
this is a an example obviously you're a

287
00:10:58,640 --> 00:11:00,399
programmer you don't want to rebuild

288
00:11:00,399 --> 00:11:01,360
grep

289
00:11:01,360 --> 00:11:02,640
um

290
00:11:02,640 --> 00:11:03,680
grep

291
00:11:03,680 --> 00:11:05,519
will allow you to

292
00:11:05,519 --> 00:11:07,040
do a search

293
00:11:07,040 --> 00:11:09,440
uh through the file uh but in this case

294
00:11:09,440 --> 00:11:12,240
we've not escaped the value uh we just

295
00:11:12,240 --> 00:11:15,600
included it so spanton comes along and

296
00:11:15,600 --> 00:11:17,760
just puts in double quotes past the

297
00:11:17,760 --> 00:11:20,000
secrets semicolon another hash to

298
00:11:20,000 --> 00:11:22,079
comment out the rest of the line

299
00:11:22,079 --> 00:11:23,920
and now spantum is seeing the entire

300
00:11:23,920 --> 00:11:26,880
contents of the secrets file

301
00:11:26,880 --> 00:11:29,360
so how do we stop these mistakes

302
00:11:29,360 --> 00:11:31,440
um there is a technique called taint

303
00:11:31,440 --> 00:11:34,720
checking um where variables are

304
00:11:34,720 --> 00:11:38,880
unnoticeably tainted or untainted um it

305
00:11:38,880 --> 00:11:40,880
kind of works um

306
00:11:40,880 --> 00:11:42,560
but as we'll see there are a couple of

307
00:11:42,560 --> 00:11:43,600
issues

308
00:11:43,600 --> 00:11:45,920
so how does it how does it work

309
00:11:45,920 --> 00:11:48,320
uh first of all you have a string and

310
00:11:48,320 --> 00:11:49,760
it's because it's defined in the source

311
00:11:49,760 --> 00:11:52,560
code it is untainted

312
00:11:52,560 --> 00:11:55,120
therefore the variable in this case html

313
00:11:55,120 --> 00:11:57,920
is marked as untainted

314
00:11:57,920 --> 00:12:00,720
in this case we have the string the

315
00:12:00,720 --> 00:12:02,560
paragraph hi

316
00:12:02,560 --> 00:12:04,639
and that's unpainted then we have a

317
00:12:04,639 --> 00:12:07,360
variable name which is tainted

318
00:12:07,360 --> 00:12:08,959
and then you have another string which

319
00:12:08,959 --> 00:12:10,399
is from tainted

320
00:12:10,399 --> 00:12:12,800
and then that html is now considered

321
00:12:12,800 --> 00:12:15,920
untainted and our defender um you know

322
00:12:15,920 --> 00:12:18,000
templating engine or whatever can stop

323
00:12:18,000 --> 00:12:20,800
it it can say no i'm not having that i'm

324
00:12:20,800 --> 00:12:22,880
rejecting that

325
00:12:22,880 --> 00:12:26,240
so we're tainting the tank checking

326
00:12:26,240 --> 00:12:29,440
what you do is use escaping which is

327
00:12:29,440 --> 00:12:31,680
risky but and we'll show you how that is

328
00:12:31,680 --> 00:12:34,160
so you've got untainted you've got your

329
00:12:34,160 --> 00:12:36,160
tainted variable and then the final bit

330
00:12:36,160 --> 00:12:38,880
of untainted at the end

331
00:12:38,880 --> 00:12:40,800
by using this function based on special

332
00:12:40,800 --> 00:12:43,600
cards um we're basically html encoding

333
00:12:43,600 --> 00:12:44,800
that value

334
00:12:44,800 --> 00:12:48,160
and we're escaping it to make it safe

335
00:12:48,160 --> 00:12:50,399
and in this case it works perfectly it's

336
00:12:50,399 --> 00:12:52,720
good brilliant um

337
00:12:52,720 --> 00:12:55,040
the script tag that spanton has put in

338
00:12:55,040 --> 00:12:57,680
has been patiently encoded

339
00:12:57,680 --> 00:13:00,720
that variable is considered untainted

340
00:13:00,720 --> 00:13:02,880
and where we're happy

341
00:13:02,880 --> 00:13:04,320
but unfortunately tank checking

342
00:13:04,320 --> 00:13:07,519
incorrectly assumes that escaping makes

343
00:13:07,519 --> 00:13:10,560
a value safe for any context

344
00:13:10,560 --> 00:13:13,760
and that's where it falls apart

345
00:13:13,760 --> 00:13:15,200
um

346
00:13:15,200 --> 00:13:18,720
with the untainted one um

347
00:13:18,720 --> 00:13:20,320
sorry this one uh we're going to have

348
00:13:20,320 --> 00:13:22,800
the on tape thing tainted untainted and

349
00:13:22,800 --> 00:13:25,200
we do the escaping as usual

350
00:13:25,200 --> 00:13:26,560
but you'll notice that we're not

351
00:13:26,560 --> 00:13:27,440
actually

352
00:13:27,440 --> 00:13:29,519
having to encode anything in spam some

353
00:13:29,519 --> 00:13:32,240
stem because in the link context you can

354
00:13:32,240 --> 00:13:34,959
put javascript code on alert

355
00:13:34,959 --> 00:13:37,200
and patient encoding does not do

356
00:13:37,200 --> 00:13:39,680
anything to that and that

357
00:13:39,680 --> 00:13:41,600
has worked

358
00:13:41,600 --> 00:13:43,360
and it has created this false sense of

359
00:13:43,360 --> 00:13:44,880
security

360
00:13:44,880 --> 00:13:46,480
um

361
00:13:46,480 --> 00:13:49,360
because now the html is considered um

362
00:13:49,360 --> 00:13:52,639
untainted and it's safe in theory

363
00:13:52,639 --> 00:13:54,800
this is one of my favorites um you've

364
00:13:54,800 --> 00:13:57,920
got your image tag which is untainted um

365
00:13:57,920 --> 00:13:59,279
you've got your tainted

366
00:13:59,279 --> 00:14:01,040
url and that

367
00:14:01,040 --> 00:14:02,959
the

368
00:14:02,959 --> 00:14:04,560
thing that sort of trips people up is

369
00:14:04,560 --> 00:14:06,560
they think what's image is the src

370
00:14:06,560 --> 00:14:08,160
actually you can't put any javascript in

371
00:14:08,160 --> 00:14:09,440
that

372
00:14:09,440 --> 00:14:11,519
um you know it

373
00:14:11,519 --> 00:14:14,000
should be fine um but i'm missing some

374
00:14:14,000 --> 00:14:16,480
quote marks

375
00:14:16,480 --> 00:14:18,720
which means that the

376
00:14:18,720 --> 00:14:21,120
attacker can now just do forward slash

377
00:14:21,120 --> 00:14:22,880
so the browser will just download the

378
00:14:22,880 --> 00:14:25,760
home page for the image and then have an

379
00:14:25,760 --> 00:14:29,120
on error alert

380
00:14:29,600 --> 00:14:31,199
there is a mitigation you can put in

381
00:14:31,199 --> 00:14:33,519
place called the content security policy

382
00:14:33,519 --> 00:14:37,600
um but that's an another topic um it has

383
00:14:37,600 --> 00:14:39,600
still allowed this to happen this is

384
00:14:39,600 --> 00:14:40,880
still a problem

385
00:14:40,880 --> 00:14:44,079
um because the escaping is not context

386
00:14:44,079 --> 00:14:45,279
aware

387
00:14:45,279 --> 00:14:48,079
um and then this is my favorite let's

388
00:14:48,079 --> 00:14:50,160
put on some quote marks

389
00:14:50,160 --> 00:14:52,480
um

390
00:14:52,480 --> 00:14:54,399
this should work but is a trick question

391
00:14:54,399 --> 00:14:57,279
to this one because while this now all

392
00:14:57,279 --> 00:14:59,199
seems to make sense

393
00:14:59,199 --> 00:15:02,480
and it should seem safe

394
00:15:02,480 --> 00:15:04,240
it's still technically possible in the

395
00:15:04,240 --> 00:15:06,480
php language to do this

396
00:15:06,480 --> 00:15:09,120
and the reason being is that before php

397
00:15:09,120 --> 00:15:12,079
8.1 single quotes were not encoded by

398
00:15:12,079 --> 00:15:13,519
default

399
00:15:13,519 --> 00:15:14,639
um

400
00:15:14,639 --> 00:15:17,360
i've managed to get that changed for 8.1

401
00:15:17,360 --> 00:15:19,920
uh if it breaks anything then

402
00:15:19,920 --> 00:15:21,600
you can complain to me but i think it's

403
00:15:21,600 --> 00:15:22,800
probably because you've got a problem

404
00:15:22,800 --> 00:15:25,680
that you need to fix but anyway um there

405
00:15:25,680 --> 00:15:27,120
we go

406
00:15:27,120 --> 00:15:30,240
and another example here is ysql which

407
00:15:30,240 --> 00:15:32,480
is where id equals

408
00:15:32,480 --> 00:15:35,360
um you've got your escaping is this safe

409
00:15:35,360 --> 00:15:37,440
still missing the quotes and therefore

410
00:15:37,440 --> 00:15:38,639
this kind of

411
00:15:38,639 --> 00:15:42,320
escaping is again flawed and spanton was

412
00:15:42,320 --> 00:15:44,240
able to extract information from the

413
00:15:44,240 --> 00:15:46,160
admin table

414
00:15:46,160 --> 00:15:48,720
so taint checking is close you know it's

415
00:15:48,720 --> 00:15:50,959
got the right idea

416
00:15:50,959 --> 00:15:52,560
but escaping should be done by a third

417
00:15:52,560 --> 00:15:54,720
party library a library which

418
00:15:54,720 --> 00:15:56,399
understands what it's doing you know it

419
00:15:56,399 --> 00:15:58,240
understands the context in which it

420
00:15:58,240 --> 00:16:01,120
works a database uh library knows about

421
00:16:01,120 --> 00:16:04,079
sql html templating engine understands

422
00:16:04,079 --> 00:16:05,600
about html

423
00:16:05,600 --> 00:16:08,880
sorry um

424
00:16:08,880 --> 00:16:11,440
so instead we can simplify it by looking

425
00:16:11,440 --> 00:16:14,320
for strings from a trusted developer and

426
00:16:14,320 --> 00:16:16,720
don't handle any escaping

427
00:16:16,720 --> 00:16:19,600
or in short safe versus unsafe

428
00:16:19,600 --> 00:16:20,480
safe

429
00:16:20,480 --> 00:16:21,759
when talking about injection

430
00:16:21,759 --> 00:16:23,600
vulnerabilities and that is kind of

431
00:16:23,600 --> 00:16:25,600
important um

432
00:16:25,600 --> 00:16:27,600
is a string defined by a programmer as

433
00:16:27,600 --> 00:16:29,839
in in the source code and everything

434
00:16:29,839 --> 00:16:32,959
else is considered unsafe

435
00:16:32,959 --> 00:16:35,680
so we go back to our prepared privatized

436
00:16:35,680 --> 00:16:37,680
query and

437
00:16:37,680 --> 00:16:40,320
that is safe the id is unsafe but

438
00:16:40,320 --> 00:16:42,800
they're provided separately so it's good

439
00:16:42,800 --> 00:16:44,160
everyone's happy

440
00:16:44,160 --> 00:16:45,920
if the developer had made a mistake in

441
00:16:45,920 --> 00:16:48,240
their parameterization

442
00:16:48,240 --> 00:16:50,880
they would do this the safe versus

443
00:16:50,880 --> 00:16:52,320
unsafe

444
00:16:52,320 --> 00:16:54,399
together that is considered unsafe and

445
00:16:54,399 --> 00:16:56,000
then our

446
00:16:56,000 --> 00:16:58,560
database abstraction can reject to that

447
00:16:58,560 --> 00:17:00,720
you can go no i'm not having it it has

448
00:17:00,720 --> 00:17:02,800
been damaged by

449
00:17:02,800 --> 00:17:04,079
a value that was not written by a

450
00:17:04,079 --> 00:17:06,000
developer

451
00:17:06,000 --> 00:17:08,000
same with html template ending engine

452
00:17:08,000 --> 00:17:10,000
you've got a safe string you're unsafe

453
00:17:10,000 --> 00:17:12,559
string that's good as soon as you do

454
00:17:12,559 --> 00:17:14,480
something wrong you know the developers

455
00:17:14,480 --> 00:17:16,079
made a mistake

456
00:17:16,079 --> 00:17:16,959
you know you've got your safe zone

457
00:17:16,959 --> 00:17:19,359
unsafe is that and then the

458
00:17:19,359 --> 00:17:20,559
um

459
00:17:20,559 --> 00:17:22,559
you know the the templating engine can

460
00:17:22,559 --> 00:17:24,480
go no not having less than my accepting

461
00:17:24,480 --> 00:17:25,599
it

462
00:17:25,599 --> 00:17:27,359
and same with the command line keep it

463
00:17:27,359 --> 00:17:30,480
your developer defines string separately

464
00:17:30,480 --> 00:17:31,360
from

465
00:17:31,360 --> 00:17:33,760
the values from the user and again that

466
00:17:33,760 --> 00:17:35,840
is work fine go back to the mistake that

467
00:17:35,840 --> 00:17:37,360
we made earlier

468
00:17:37,360 --> 00:17:39,520
where we just put in the user value

469
00:17:39,520 --> 00:17:43,039
those are fine and again rejected by the

470
00:17:43,039 --> 00:17:44,840
function

471
00:17:44,840 --> 00:17:48,000
um and this will go back to the database

472
00:17:48,000 --> 00:17:51,039
abstraction with the orm uh we're going

473
00:17:51,039 --> 00:17:53,760
to keep you know the where the value is

474
00:17:53,760 --> 00:17:54,880
greater than

475
00:17:54,880 --> 00:17:59,360
date date comes from user kept separate

476
00:17:59,360 --> 00:18:00,799
and that's fine

477
00:18:00,799 --> 00:18:02,400
but again i'm just going to stress this

478
00:18:02,400 --> 00:18:04,720
remember when you talk about a safety in

479
00:18:04,720 --> 00:18:06,960
terms of injection vulnerabilities

480
00:18:06,960 --> 00:18:09,280
if spamtum had put in a value

481
00:18:09,280 --> 00:18:11,440
of zero zero zero you know basically

482
00:18:11,440 --> 00:18:12,799
year zero

483
00:18:12,799 --> 00:18:16,640
um the publish date is greater than zero

484
00:18:16,640 --> 00:18:18,320
which basically means everything

485
00:18:18,320 --> 00:18:19,679
and a select statement probably not

486
00:18:19,679 --> 00:18:21,600
means anything but for example a delete

487
00:18:21,600 --> 00:18:23,280
statement you might be deleting a little

488
00:18:23,280 --> 00:18:25,840
bit more than you can think of that is

489
00:18:25,840 --> 00:18:27,600
not really a problem we can solve that

490
00:18:27,600 --> 00:18:29,120
is very much a developer having to

491
00:18:29,120 --> 00:18:31,520
choose their boundaries we are focused

492
00:18:31,520 --> 00:18:33,919
on injection vulnerabilities here

493
00:18:33,919 --> 00:18:36,080
um and to make it that point even

494
00:18:36,080 --> 00:18:37,520
clearer

495
00:18:37,520 --> 00:18:40,400
same thing again string it's

496
00:18:40,400 --> 00:18:42,960
safe versus unsafe that's

497
00:18:42,960 --> 00:18:45,520
technically fine but as soon as you

498
00:18:45,520 --> 00:18:47,919
allow spamton to specify the path and

499
00:18:47,919 --> 00:18:49,840
that path becomes just a forward slash

500
00:18:49,840 --> 00:18:51,840
you get the classic rm dash rf forward

501
00:18:51,840 --> 00:18:54,640
slash and yes i know rm doesn't actually

502
00:18:54,640 --> 00:18:56,320
do that for a lot of the times now you

503
00:18:56,320 --> 00:18:58,240
have to put in a special flag to say yes

504
00:18:58,240 --> 00:19:00,400
i want to destroy my system

505
00:19:00,400 --> 00:19:01,679
okay so

506
00:19:01,679 --> 00:19:04,799
uh dealing with special cases um because

507
00:19:04,799 --> 00:19:06,559
it might seem like you can't always deal

508
00:19:06,559 --> 00:19:08,080
with everything

509
00:19:08,080 --> 00:19:08,880
so

510
00:19:08,880 --> 00:19:10,559
the classic one that comes up when this

511
00:19:10,559 --> 00:19:12,720
conversation happens is the where in

512
00:19:12,720 --> 00:19:15,520
clause or the the uh operator

513
00:19:15,520 --> 00:19:18,080
you say where id is in

514
00:19:18,080 --> 00:19:19,760
this list of ids

515
00:19:19,760 --> 00:19:22,000
and you'd typically give a list of ids

516
00:19:22,000 --> 00:19:23,520
to deal with and it will return those

517
00:19:23,520 --> 00:19:24,960
records

518
00:19:24,960 --> 00:19:26,960
this is a nice and quick way of doing it

519
00:19:26,960 --> 00:19:29,200
but you are technically allowing user

520
00:19:29,200 --> 00:19:31,919
values into

521
00:19:31,919 --> 00:19:34,880
the sql and this can be dangerous um

522
00:19:34,880 --> 00:19:36,559
especially if you don't remember to

523
00:19:36,559 --> 00:19:39,280
ensure they are all integers um if you

524
00:19:39,280 --> 00:19:40,799
don't

525
00:19:40,799 --> 00:19:42,480
this phantom comes along and puts in

526
00:19:42,480 --> 00:19:45,919
whatever they like uh into this um and

527
00:19:45,919 --> 00:19:47,520
if you start looking at large code bases

528
00:19:47,520 --> 00:19:48,880
which do this

529
00:19:48,880 --> 00:19:51,120
it is surprisingly common how often that

530
00:19:51,120 --> 00:19:52,799
actually happens where

531
00:19:52,799 --> 00:19:55,039
the values have been imploded into the

532
00:19:55,039 --> 00:19:57,200
wherein haven't actually been converted

533
00:19:57,200 --> 00:19:58,960
to an integer

534
00:19:58,960 --> 00:20:00,880
if you look at wordpress for example

535
00:20:00,880 --> 00:20:03,039
there's a few cases there fortunately

536
00:20:03,039 --> 00:20:05,760
they have other mitigations in place but

537
00:20:05,760 --> 00:20:09,039
it's not exactly consistent

538
00:20:09,039 --> 00:20:12,320
so one way of doing this is you use a

539
00:20:12,320 --> 00:20:13,919
function or some way of just basically

540
00:20:13,919 --> 00:20:16,880
putting in that number of parameters

541
00:20:16,880 --> 00:20:19,600
as in just question marks and then the

542
00:20:19,600 --> 00:20:22,880
database will fulfill those later

543
00:20:22,880 --> 00:20:24,960
the in parameters

544
00:20:24,960 --> 00:20:26,960
function in this case is just simply

545
00:20:26,960 --> 00:20:28,640
taking account of how many question

546
00:20:28,640 --> 00:20:29,840
marks to add

547
00:20:29,840 --> 00:20:31,760
and by doing it this way you are

548
00:20:31,760 --> 00:20:34,159
creating a string that has been defined

549
00:20:34,159 --> 00:20:36,000
by the developers and it is a string

550
00:20:36,000 --> 00:20:38,799
that is in the source code

551
00:20:38,799 --> 00:20:40,400
no user input

552
00:20:40,400 --> 00:20:41,760
if you want to get fancy you can

553
00:20:41,760 --> 00:20:43,360
simplify this a little bit by using an

554
00:20:43,360 --> 00:20:45,520
array fill type function where it will

555
00:20:45,520 --> 00:20:47,120
build up an array of that many elements

556
00:20:47,120 --> 00:20:48,559
of question marks and then it will

557
00:20:48,559 --> 00:20:50,799
implode them or join them together with

558
00:20:50,799 --> 00:20:52,720
a comma

559
00:20:52,720 --> 00:20:53,840
um

560
00:20:53,840 --> 00:20:55,200
as with anything like these you've got

561
00:20:55,200 --> 00:20:57,120
to be careful with no ids but that is

562
00:20:57,120 --> 00:20:58,480
going to be always a problem no matter

563
00:20:58,480 --> 00:21:00,799
what

564
00:21:00,799 --> 00:21:03,120
the other one that comes up is table

565
00:21:03,120 --> 00:21:05,919
names and field names um

566
00:21:05,919 --> 00:21:08,320
these are problematic because they can't

567
00:21:08,320 --> 00:21:10,000
be parameterized they can't go into the

568
00:21:10,000 --> 00:21:11,520
parameters but they need to go into that

569
00:21:11,520 --> 00:21:15,280
original sql sent to the database first

570
00:21:15,280 --> 00:21:16,880
uh

571
00:21:16,880 --> 00:21:18,240
so

572
00:21:18,240 --> 00:21:19,520
you know

573
00:21:19,520 --> 00:21:21,200
it's quite tempting to put them on you

574
00:21:21,200 --> 00:21:23,360
can escape them to make sure it is still

575
00:21:23,360 --> 00:21:26,400
a field um but should you allow any

576
00:21:26,400 --> 00:21:30,480
field to be in your sql can the attacker

577
00:21:30,480 --> 00:21:32,320
order your i don't know list of

578
00:21:32,320 --> 00:21:35,440
contributors by their email address um

579
00:21:35,440 --> 00:21:36,799
you know it's probably not the field

580
00:21:36,799 --> 00:21:39,360
that you want to allow them to sort by

581
00:21:39,360 --> 00:21:41,360
so one way around this or one way you

582
00:21:41,360 --> 00:21:42,799
should be dealing with it is you have

583
00:21:42,799 --> 00:21:46,000
your allow list so you have an array

584
00:21:46,000 --> 00:21:49,440
of allowed fields that you can order by

585
00:21:49,440 --> 00:21:51,679
and by using this array like structure

586
00:21:51,679 --> 00:21:53,520
you can first of all you can sort by

587
00:21:53,520 --> 00:21:57,120
search through it so the order field

588
00:21:57,120 --> 00:21:59,200
variable there is saying what the user

589
00:21:59,200 --> 00:22:01,360
would like to sort it by

590
00:22:01,360 --> 00:22:02,720
you search through that array to see if

591
00:22:02,720 --> 00:22:05,200
you can find it if you find it then you

592
00:22:05,200 --> 00:22:08,159
bring back the index for it which is

593
00:22:08,159 --> 00:22:10,720
where you get the order id

594
00:22:10,720 --> 00:22:12,880
variable uh so if it's ordered by the

595
00:22:12,880 --> 00:22:14,559
email field then that would be one

596
00:22:14,559 --> 00:22:17,679
because we're zero-based indexing um and

597
00:22:17,679 --> 00:22:19,039
then when you come to do the actual

598
00:22:19,039 --> 00:22:21,919
order by you reuse that array of

599
00:22:21,919 --> 00:22:24,000
programmer-defined strings

600
00:22:24,000 --> 00:22:26,640
to pull out the one that you want

601
00:22:26,640 --> 00:22:28,720
and therefore you now have a nice clean

602
00:22:28,720 --> 00:22:30,799
thing which ensures that you are only

603
00:22:30,799 --> 00:22:34,320
allowing the ordering by certain things

604
00:22:34,320 --> 00:22:37,039
um and that's the way we've done

605
00:22:37,039 --> 00:22:38,480
there is one other thing which is the

606
00:22:38,480 --> 00:22:40,720
config values which come from you know

607
00:22:40,720 --> 00:22:43,840
ini files json yaml because they've come

608
00:22:43,840 --> 00:22:46,320
external the programming language can't

609
00:22:46,320 --> 00:22:47,919
say that it was a program a defined

610
00:22:47,919 --> 00:22:48,799
string

611
00:22:48,799 --> 00:22:50,720
um in these cases

612
00:22:50,720 --> 00:22:53,039
we'll have to cover that next section uh

613
00:22:53,039 --> 00:22:54,400
but in short the library needs to handle

614
00:22:54,400 --> 00:22:56,640
these safely they need to know what they

615
00:22:56,640 --> 00:23:00,000
are and to handle it in its own way

616
00:23:00,000 --> 00:23:02,240
okay so um

617
00:23:02,240 --> 00:23:06,400
ending injection vulnerabilities in go

618
00:23:07,200 --> 00:23:08,960
go programming language is probably the

619
00:23:08,960 --> 00:23:11,360
only one that i've found which can do

620
00:23:11,360 --> 00:23:12,960
all of this

621
00:23:12,960 --> 00:23:16,080
by itself with no dependencies and it's

622
00:23:16,080 --> 00:23:18,960
quite simple in a way um once you've got

623
00:23:18,960 --> 00:23:21,520
your head around this first little bit

624
00:23:21,520 --> 00:23:23,840
i'd like to thanks uh dima who checked

625
00:23:23,840 --> 00:23:25,360
over my code because i'm not a

626
00:23:25,360 --> 00:23:28,720
programmer and roberto who worked on the

627
00:23:28,720 --> 00:23:32,080
go safe html library who kind of wrote

628
00:23:32,080 --> 00:23:34,720
up this description

629
00:23:34,720 --> 00:23:36,799
so um first of all we're going to look

630
00:23:36,799 --> 00:23:39,360
at the code that would be in the library

631
00:23:39,360 --> 00:23:41,679
so how would the library go about this

632
00:23:41,679 --> 00:23:42,559
um

633
00:23:42,559 --> 00:23:44,080
first of all they make a package you can

634
00:23:44,080 --> 00:23:46,320
go and they create a type of string

635
00:23:46,320 --> 00:23:49,600
constant and it's a string

636
00:23:49,600 --> 00:23:51,200
you'll notice that it starts with a

637
00:23:51,200 --> 00:23:52,799
lowercase s

638
00:23:52,799 --> 00:23:55,840
in go that means that

639
00:23:55,840 --> 00:23:58,159
is not exported so anyone using this

640
00:23:58,159 --> 00:24:00,559
library won't be able to

641
00:24:00,559 --> 00:24:02,960
use it

642
00:24:03,360 --> 00:24:05,919
then moving on we have a method the

643
00:24:05,919 --> 00:24:07,840
library provides two codes that's

644
00:24:07,840 --> 00:24:09,440
calling it you notice this one has a

645
00:24:09,440 --> 00:24:11,840
capital o at the beginning that means it

646
00:24:11,840 --> 00:24:14,960
is exposed exported so anyone can use it

647
00:24:14,960 --> 00:24:16,000
um

648
00:24:16,000 --> 00:24:17,200
and

649
00:24:17,200 --> 00:24:19,120
is its input the thing it takes is its

650
00:24:19,120 --> 00:24:20,960
first argument and in this case it's

651
00:24:20,960 --> 00:24:23,039
only argument it's saying it needs it to

652
00:24:23,039 --> 00:24:25,360
be a string constant

653
00:24:25,360 --> 00:24:28,159
as mentioned on line three the defined

654
00:24:28,159 --> 00:24:29,520
thing

655
00:24:29,520 --> 00:24:31,600
so put that to the side and now we'll

656
00:24:31,600 --> 00:24:33,360
look at the code

657
00:24:33,360 --> 00:24:34,720
the the

658
00:24:34,720 --> 00:24:37,440
user of that library is going to write

659
00:24:37,440 --> 00:24:39,760
uh first of all we have some basic code

660
00:24:39,760 --> 00:24:41,440
we're just simply getting the person's

661
00:24:41,440 --> 00:24:42,880
name it just says you know what's your

662
00:24:42,880 --> 00:24:43,679
name

663
00:24:43,679 --> 00:24:45,600
and it just reads it from input this is

664
00:24:45,600 --> 00:24:47,440
a way of testing we are working with

665
00:24:47,440 --> 00:24:50,400
untrusted data um

666
00:24:50,400 --> 00:24:52,799
now to actually call it uh we're going

667
00:24:52,799 --> 00:24:55,120
to call the example package which is now

668
00:24:55,120 --> 00:24:56,880
going over to the library and we call

669
00:24:56,880 --> 00:24:59,279
the method only accept strings from

670
00:24:59,279 --> 00:25:02,880
marketing except string constant

671
00:25:02,880 --> 00:25:06,640
and we pass in hello as an untyped

672
00:25:06,640 --> 00:25:08,559
string

673
00:25:08,559 --> 00:25:11,360
when go is compiling this code it will

674
00:25:11,360 --> 00:25:14,400
use a thing called type conversion to

675
00:25:14,400 --> 00:25:17,679
turn this into the string constant

676
00:25:17,679 --> 00:25:20,080
um this allows it to

677
00:25:20,080 --> 00:25:21,840
um

678
00:25:21,840 --> 00:25:24,080
basically it's an automatic thing and it

679
00:25:24,080 --> 00:25:25,919
basically it converts it and everyone's

680
00:25:25,919 --> 00:25:27,679
happy it matches the requirements for

681
00:25:27,679 --> 00:25:28,960
that method

682
00:25:28,960 --> 00:25:30,559
when you come to the next one which is

683
00:25:30,559 --> 00:25:32,880
the developer doing something wrong this

684
00:25:32,880 --> 00:25:34,159
time they're just passing in the your

685
00:25:34,159 --> 00:25:35,840
name variable

686
00:25:35,840 --> 00:25:38,400
which contains interest data

687
00:25:38,400 --> 00:25:40,240
it cannot be converted to a string

688
00:25:40,240 --> 00:25:42,480
constant at compile time

689
00:25:42,480 --> 00:25:43,200
so

690
00:25:43,200 --> 00:25:45,039
when you're compiling it

691
00:25:45,039 --> 00:25:47,520
the compiler rejects it it says

692
00:25:47,520 --> 00:25:49,440
you know cannot use your name

693
00:25:49,440 --> 00:25:50,559
because it's just a

694
00:25:50,559 --> 00:25:52,159
type string

695
00:25:52,159 --> 00:25:53,840
and it's that's it you can't compile the

696
00:25:53,840 --> 00:25:55,760
code that's it you're done

697
00:25:55,760 --> 00:25:57,679
so now the developer has to fix their

698
00:25:57,679 --> 00:25:59,840
code before they can continue

699
00:25:59,840 --> 00:26:02,159
and they can't make any mistakes

700
00:26:02,159 --> 00:26:04,320
um and this is how it works in the go

701
00:26:04,320 --> 00:26:06,799
safety html

702
00:26:06,799 --> 00:26:09,600
library uh or to give its full name

703
00:26:09,600 --> 00:26:11,840
on github

704
00:26:11,840 --> 00:26:14,080
now in the go safe html package there

705
00:26:14,080 --> 00:26:15,440
are

706
00:26:15,440 --> 00:26:17,200
about three or four different things

707
00:26:17,200 --> 00:26:20,000
they deal with html templates there's

708
00:26:20,000 --> 00:26:22,240
the javascripts and there's the styling

709
00:26:22,240 --> 00:26:24,080
stuff i'm going to start with the

710
00:26:24,080 --> 00:26:26,960
javascript one because it's the simplest

711
00:26:26,960 --> 00:26:29,600
really um you've got the string from

712
00:26:29,600 --> 00:26:32,000
constant and that is basically a string

713
00:26:32,000 --> 00:26:33,279
that has to be written by the developer

714
00:26:33,279 --> 00:26:35,039
if you're writing javascript

715
00:26:35,039 --> 00:26:37,360
it has to be written by the developer

716
00:26:37,360 --> 00:26:40,240
if you write as um script from constant

717
00:26:40,240 --> 00:26:42,159
and you pass in any user data or

718
00:26:42,159 --> 00:26:43,520
anything that wasn't defined by the

719
00:26:43,520 --> 00:26:44,480
programmer

720
00:26:44,480 --> 00:26:46,640
then this method will reject it and

721
00:26:46,640 --> 00:26:48,240
you'll say no i'm not having it you have

722
00:26:48,240 --> 00:26:50,080
to use something else

723
00:26:50,080 --> 00:26:51,600
and that's what i mean by the simple one

724
00:26:51,600 --> 00:26:54,320
you can just do a and b

725
00:26:54,320 --> 00:26:56,799
when you come to the html side of things

726
00:26:56,799 --> 00:27:00,720
um you go to the template package first

727
00:27:00,720 --> 00:27:03,279
and you say a method of must pass and

728
00:27:03,279 --> 00:27:05,039
execute to html

729
00:27:05,039 --> 00:27:08,480
and then you put in your untyped string

730
00:27:08,480 --> 00:27:10,799
of hello

731
00:27:10,799 --> 00:27:14,640
safe html escape is the second line and

732
00:27:14,640 --> 00:27:16,640
that's where you take the user value and

733
00:27:16,640 --> 00:27:18,960
you put it in and then the variable the

734
00:27:18,960 --> 00:27:20,480
third one c

735
00:27:20,480 --> 00:27:21,679
finishes this off with the closing

736
00:27:21,679 --> 00:27:23,039
paragraph tag

737
00:27:23,039 --> 00:27:25,440
and then we use the safe html package to

738
00:27:25,440 --> 00:27:27,039
then concatenate those three things

739
00:27:27,039 --> 00:27:28,399
together

740
00:27:28,399 --> 00:27:30,080
and that's how you do it correctly

741
00:27:30,080 --> 00:27:32,720
everyone's happy all good

742
00:27:32,720 --> 00:27:35,279
if the developer did this wrong

743
00:27:35,279 --> 00:27:37,919
must pass and execute to html

744
00:27:37,919 --> 00:27:39,520
uh your name

745
00:27:39,520 --> 00:27:40,480
um

746
00:27:40,480 --> 00:27:42,559
this would be rejected

747
00:27:42,559 --> 00:27:45,760
um you know it just wouldn't allow that

748
00:27:45,760 --> 00:27:48,000
likewise if during the concatenation

749
00:27:48,000 --> 00:27:51,760
phase you did a your name c that'll also

750
00:27:51,760 --> 00:27:54,799
be rejected um so the program will not

751
00:27:54,799 --> 00:27:56,799
compile

752
00:27:56,799 --> 00:27:59,919
okay so let's go um now in ending

753
00:27:59,919 --> 00:28:01,840
injection vulnerabilities with node and

754
00:28:01,840 --> 00:28:04,240
javascript the javascript stuff is still

755
00:28:04,240 --> 00:28:05,440
coming it's going through the standards

756
00:28:05,440 --> 00:28:06,480
process

757
00:28:06,480 --> 00:28:09,520
and it's kind of working there

758
00:28:09,520 --> 00:28:13,279
um so here is a template literal this

759
00:28:13,279 --> 00:28:14,399
has probably caused quite a lot of

760
00:28:14,399 --> 00:28:17,120
problems um hopefully he is because it

761
00:28:17,120 --> 00:28:18,960
made it even easier to do the wrong

762
00:28:18,960 --> 00:28:20,880
thing because you it makes easier to

763
00:28:20,880 --> 00:28:22,640
include a value without any kind of

764
00:28:22,640 --> 00:28:24,000
escaping at all

765
00:28:24,000 --> 00:28:26,240
um i was not happy when i saw this

766
00:28:26,240 --> 00:28:28,640
coming to the spec but hey how

767
00:28:28,640 --> 00:28:31,279
because it say it just allows them to be

768
00:28:31,279 --> 00:28:33,679
you know those values to be included no

769
00:28:33,679 --> 00:28:35,039
thoughts given

770
00:28:35,039 --> 00:28:37,840
however there is a thing called tagged

771
00:28:37,840 --> 00:28:41,520
templates it uses the same principle

772
00:28:41,520 --> 00:28:45,440
of using a the text for for templating

773
00:28:45,440 --> 00:28:47,600
but it uses a function called in this

774
00:28:47,600 --> 00:28:50,799
case i'm naming it my template

775
00:28:50,799 --> 00:28:53,200
you define the function as such the

776
00:28:53,200 --> 00:28:54,399
first

777
00:28:54,399 --> 00:28:56,000
argument is

778
00:28:56,000 --> 00:28:58,480
receives an array of the pieces that

779
00:28:58,480 --> 00:29:00,559
make up the template and then from that

780
00:29:00,559 --> 00:29:03,279
point on you have your values

781
00:29:03,279 --> 00:29:05,440
um if you just console log them it is

782
00:29:05,440 --> 00:29:07,679
just simply an array

783
00:29:07,679 --> 00:29:09,440
like that

784
00:29:09,440 --> 00:29:11,679
then when you do the values that's your

785
00:29:11,679 --> 00:29:13,840
additional arguments they come in and it

786
00:29:13,840 --> 00:29:15,200
means the

787
00:29:15,200 --> 00:29:17,120
function my template could actually

788
00:29:17,120 --> 00:29:19,679
build up uh the html template or the

789
00:29:19,679 --> 00:29:21,919
content knowing the context in which

790
00:29:21,919 --> 00:29:24,960
every variable was used in

791
00:29:24,960 --> 00:29:27,840
there's a small snag to this though

792
00:29:27,840 --> 00:29:29,520
um

793
00:29:29,520 --> 00:29:32,320
the developer could use it wrong

794
00:29:32,320 --> 00:29:34,080
i don't know if you notice but it's not

795
00:29:34,080 --> 00:29:36,000
usual to see a function being called

796
00:29:36,000 --> 00:29:38,960
without the brackets around it um

797
00:29:38,960 --> 00:29:41,360
so i've seen it before now where the

798
00:29:41,360 --> 00:29:42,720
developer has gone well that's a

799
00:29:42,720 --> 00:29:44,159
function so i need to put brackets

800
00:29:44,159 --> 00:29:45,520
around it and then i'll complain it's

801
00:29:45,520 --> 00:29:47,039
not receiving an array and then they put

802
00:29:47,039 --> 00:29:49,279
array brackets around it

803
00:29:49,279 --> 00:29:51,360
and therefore

804
00:29:51,360 --> 00:29:52,480
what

805
00:29:52,480 --> 00:29:55,760
the function receives is basically a

806
00:29:55,760 --> 00:29:57,520
everything inside the first part which

807
00:29:57,520 --> 00:29:58,720
is what all the developer defined

808
00:29:58,720 --> 00:30:00,799
strings are supposed to be and nothing

809
00:30:00,799 --> 00:30:03,360
in the second array um another approach

810
00:30:03,360 --> 00:30:06,320
that i saw um the same project uh they'd

811
00:30:06,320 --> 00:30:07,679
actually split it out into separate

812
00:30:07,679 --> 00:30:09,760
parts of the array and there it goes

813
00:30:09,760 --> 00:30:10,720
like that

814
00:30:10,720 --> 00:30:12,559
um

815
00:30:12,559 --> 00:30:14,640
the solution to this is a

816
00:30:14,640 --> 00:30:15,840
function that's been developed at the

817
00:30:15,840 --> 00:30:16,960
moment

818
00:30:16,960 --> 00:30:19,440
there's a polyfill in node and it's been

819
00:30:19,440 --> 00:30:21,520
specced at the moment in javascript

820
00:30:21,520 --> 00:30:24,159
where it's basically is template object

821
00:30:24,159 --> 00:30:25,919
it's a really simple function and it

822
00:30:25,919 --> 00:30:29,120
just simply says is that first argument

823
00:30:29,120 --> 00:30:32,240
from a template um and if it's not then

824
00:30:32,240 --> 00:30:36,000
you throw a mistake so in this case

825
00:30:36,000 --> 00:30:38,080
where it's been used correctly all good

826
00:30:38,080 --> 00:30:39,440
everyone's happy

827
00:30:39,440 --> 00:30:41,120
and in this case

828
00:30:41,120 --> 00:30:43,039
it was not uh

829
00:30:43,039 --> 00:30:45,279
provided as a template object and

830
00:30:45,279 --> 00:30:47,200
therefore is able to reject it and you

831
00:30:47,200 --> 00:30:49,760
get an exception thrown

832
00:30:49,760 --> 00:30:51,440
how this works in node

833
00:30:51,440 --> 00:30:53,600
first of all you install is template

834
00:30:53,600 --> 00:30:56,320
object which is a um

835
00:30:56,320 --> 00:30:58,480
it's a polyfill for now um hopefully

836
00:30:58,480 --> 00:30:59,919
later will come in

837
00:30:59,919 --> 00:31:04,559
um and it's made from uh mike samuel and

838
00:31:04,559 --> 00:31:06,080
basically just have that function

839
00:31:06,080 --> 00:31:08,399
everything on here is

840
00:31:08,399 --> 00:31:10,399
basically what we're showing earlier

841
00:31:10,399 --> 00:31:13,200
uh when you run it you get the true for

842
00:31:13,200 --> 00:31:15,120
the passing one and the two falses for

843
00:31:15,120 --> 00:31:17,039
the failing ones

844
00:31:17,039 --> 00:31:19,120
because you know it's worked as it

845
00:31:19,120 --> 00:31:21,760
should do um so you can do a little bit

846
00:31:21,760 --> 00:31:23,360
more and you could throw exceptions or

847
00:31:23,360 --> 00:31:24,640
whatever

848
00:31:24,640 --> 00:31:27,200
uh this is coming soon to javascript um

849
00:31:27,200 --> 00:31:30,240
it's a proposal uh in the tc39 group at

850
00:31:30,240 --> 00:31:32,720
the moment and i'd like to say thanks to

851
00:31:32,720 --> 00:31:34,720
christoph who's helped me

852
00:31:34,720 --> 00:31:36,559
talk this through and again mike samuel

853
00:31:36,559 --> 00:31:39,200
for starting this off

854
00:31:39,200 --> 00:31:42,640
okay so a different approach um

855
00:31:42,640 --> 00:31:46,159
node um also can you use the google

856
00:31:46,159 --> 00:31:49,039
closure library um

857
00:31:49,039 --> 00:31:51,360
first of all we have to install it

858
00:31:51,360 --> 00:31:52,720
and

859
00:31:52,720 --> 00:31:55,200
this one is basically

860
00:31:55,200 --> 00:31:56,320
you

861
00:31:56,320 --> 00:31:59,279
require that library and you include the

862
00:31:59,279 --> 00:32:00,000
goo

863
00:32:00,000 --> 00:32:04,000
dot string dot const uh thing

864
00:32:04,000 --> 00:32:05,440
here's our getting the name the

865
00:32:05,440 --> 00:32:06,880
impressive data

866
00:32:06,880 --> 00:32:09,519
and we're using the g string const from

867
00:32:09,519 --> 00:32:12,559
method um it will check that it has come

868
00:32:12,559 --> 00:32:13,519
from

869
00:32:13,519 --> 00:32:14,399
a

870
00:32:14,399 --> 00:32:15,760
um

871
00:32:15,760 --> 00:32:17,360
if it is actually programmer defined

872
00:32:17,360 --> 00:32:18,720
string

873
00:32:18,720 --> 00:32:20,080
now if you just write it through node

874
00:32:20,080 --> 00:32:22,080
normally it does nothing it actually

875
00:32:22,080 --> 00:32:24,320
makes no difference at all uh but if you

876
00:32:24,320 --> 00:32:27,600
download the closure compiler which is

877
00:32:27,600 --> 00:32:29,919
uh an extra step and then you run that

878
00:32:29,919 --> 00:32:32,559
compiler then it will reject that so for

879
00:32:32,559 --> 00:32:34,159
example in this case it was identified

880
00:32:34,159 --> 00:32:36,000
the error on line 14 and said it's not

881
00:32:36,000 --> 00:32:38,720
going any further

882
00:32:39,440 --> 00:32:42,159
javascript and trusted types is another

883
00:32:42,159 --> 00:32:44,880
thing which is coming in um

884
00:32:44,880 --> 00:32:49,600
where you have uh the trusted types um

885
00:32:49,919 --> 00:32:51,760
which is a technology which is already

886
00:32:51,760 --> 00:32:53,840
in the browser but it's looked at being

887
00:32:53,840 --> 00:32:56,240
extended

888
00:32:56,240 --> 00:32:58,080
at the moment what you do is you set a

889
00:32:58,080 --> 00:33:01,360
content security policy header um

890
00:33:01,360 --> 00:33:03,440
you say that trusted types are required

891
00:33:03,440 --> 00:33:05,760
for the script uh environment because in

892
00:33:05,760 --> 00:33:07,120
the future we might have css and

893
00:33:07,120 --> 00:33:09,039
everything else

894
00:33:09,039 --> 00:33:12,159
and we set the types to none for now

895
00:33:12,159 --> 00:33:15,600
this code is fine because the output

896
00:33:15,600 --> 00:33:17,039
uh element

897
00:33:17,039 --> 00:33:19,919
using the text content api is a

898
00:33:19,919 --> 00:33:23,200
perfectly safe api it is a good good

899
00:33:23,200 --> 00:33:24,399
api to use

900
00:33:24,399 --> 00:33:27,519
but inner html is not safe it is one of

901
00:33:27,519 --> 00:33:29,600
quite a few different apis which are

902
00:33:29,600 --> 00:33:31,519
dangerous um it's very easy to make

903
00:33:31,519 --> 00:33:32,799
mistakes with it

904
00:33:32,799 --> 00:33:35,200
so trusted types allows us to

905
00:33:35,200 --> 00:33:36,720
by default

906
00:33:36,720 --> 00:33:40,880
block the use of these dangerous apis

907
00:33:40,880 --> 00:33:43,279
the way around it if you really do need

908
00:33:43,279 --> 00:33:45,440
it for those few cases

909
00:33:45,440 --> 00:33:48,320
is you make a trusted type

910
00:33:48,320 --> 00:33:49,840
the reason is quite useful is it means

911
00:33:49,840 --> 00:33:53,039
it's easy to audit um so that

912
00:33:53,039 --> 00:33:54,399
the browser base ensures that you're

913
00:33:54,399 --> 00:33:56,080
using it correctly most of the time but

914
00:33:56,080 --> 00:33:57,840
when you're auditing the code you just

915
00:33:57,840 --> 00:33:59,039
look for

916
00:33:59,039 --> 00:34:01,279
these policies uh the policy is very

917
00:34:01,279 --> 00:34:04,159
much just a javascript object um it's

918
00:34:04,159 --> 00:34:06,399
our trusted type and it just simply has

919
00:34:06,399 --> 00:34:08,079
a few methods on it you only have to

920
00:34:08,079 --> 00:34:10,480
have one um

921
00:34:10,480 --> 00:34:11,199
now

922
00:34:11,199 --> 00:34:12,879
in this case i kept it simple by just

923
00:34:12,879 --> 00:34:14,480
simply returning the value i'm not doing

924
00:34:14,480 --> 00:34:18,159
any uh checking on it that kind of

925
00:34:18,159 --> 00:34:20,159
this is the point really uh you should

926
00:34:20,159 --> 00:34:22,399
be using something like don purify or

927
00:34:22,399 --> 00:34:24,639
the new sanitizer api which has been

928
00:34:24,639 --> 00:34:27,359
developed at the moment um

929
00:34:27,359 --> 00:34:28,960
to check it

930
00:34:28,960 --> 00:34:31,119
once you've got that set up you tell the

931
00:34:31,119 --> 00:34:33,520
browser you trust this object

932
00:34:33,520 --> 00:34:35,440
for trusted types and it's creating

933
00:34:35,440 --> 00:34:37,280
quality based on that

934
00:34:37,280 --> 00:34:39,119
you need to specify this in the header

935
00:34:39,119 --> 00:34:40,480
to say you know this is the one i'm

936
00:34:40,480 --> 00:34:42,000
going to be using and then when you

937
00:34:42,000 --> 00:34:44,320
actually go to use it as long as you use

938
00:34:44,320 --> 00:34:46,480
that method of my trusted type create

939
00:34:46,480 --> 00:34:49,040
html it's allowed through

940
00:34:49,040 --> 00:34:50,320
um

941
00:34:50,320 --> 00:34:53,040
now that's a quick tour on trusted types

942
00:34:53,040 --> 00:34:54,639
but you'll notice there's a lot of code

943
00:34:54,639 --> 00:34:55,918
here

944
00:34:55,918 --> 00:34:58,240
for something so this is where things

945
00:34:58,240 --> 00:34:59,280
are going to be

946
00:34:59,280 --> 00:35:00,400
working

947
00:35:00,400 --> 00:35:01,359
what we're going to be looking for

948
00:35:01,359 --> 00:35:04,000
hopefully in the future is trusted types

949
00:35:04,000 --> 00:35:06,720
dot from literal because if it's written

950
00:35:06,720 --> 00:35:08,320
by the programmer

951
00:35:08,320 --> 00:35:10,320
then it can be allowed through but who

952
00:35:10,320 --> 00:35:12,720
cares uh you know it we trust the

953
00:35:12,720 --> 00:35:14,800
programmer and as long as it's defined

954
00:35:14,800 --> 00:35:16,880
in the source code there's no chance of

955
00:35:16,880 --> 00:35:19,200
in this case a dom based cross-site

956
00:35:19,200 --> 00:35:22,160
scripting vulnerability

957
00:35:22,160 --> 00:35:25,520
okay so that's the javascript node stuff

958
00:35:25,520 --> 00:35:28,880
now i'm going to look at java

959
00:35:29,040 --> 00:35:30,400
java doesn't do it in the language

960
00:35:30,400 --> 00:35:34,400
itself but we have to use um a

961
00:35:34,400 --> 00:35:36,240
package called error prone again

962
00:35:36,240 --> 00:35:38,079
developed by google

963
00:35:38,079 --> 00:35:40,160
it returns it runs extra checks at

964
00:35:40,160 --> 00:35:42,240
compile time

965
00:35:42,240 --> 00:35:43,760
because it's java we're going to need to

966
00:35:43,760 --> 00:35:46,480
use a build tool i'm using

967
00:35:46,480 --> 00:35:48,480
maven in this case

968
00:35:48,480 --> 00:35:50,480
so i include that as a dependency and

969
00:35:50,480 --> 00:35:52,720
then i set up the compiler configuration

970
00:35:52,720 --> 00:35:54,880
all of which is set up on the

971
00:35:54,880 --> 00:35:56,839
described on the

972
00:35:56,839 --> 00:35:59,280
website it does this all a few

973
00:35:59,280 --> 00:36:02,320
dependencies um but once it's running

974
00:36:02,320 --> 00:36:04,880
all you have to do is you import the

975
00:36:04,880 --> 00:36:06,960
annotations the compile time constant

976
00:36:06,960 --> 00:36:08,960
annotation

977
00:36:08,960 --> 00:36:10,240
and then

978
00:36:10,240 --> 00:36:12,880
for your for the library's public

979
00:36:12,880 --> 00:36:15,200
methods it will specify

980
00:36:15,200 --> 00:36:16,560
compile time constant for those

981
00:36:16,560 --> 00:36:18,880
sensitive strings uh and it's just

982
00:36:18,880 --> 00:36:21,599
simply at compile time constant and

983
00:36:21,599 --> 00:36:23,440
that's it so when we actually start

984
00:36:23,440 --> 00:36:24,720
using this

985
00:36:24,720 --> 00:36:27,280
we get the user data the untrusted stuff

986
00:36:27,280 --> 00:36:28,560
um

987
00:36:28,560 --> 00:36:30,960
and if we call a sensitive function

988
00:36:30,960 --> 00:36:31,839
with

989
00:36:31,839 --> 00:36:34,160
a compile time constant

990
00:36:34,160 --> 00:36:36,320
it's fine it's happy with that but if

991
00:36:36,320 --> 00:36:39,680
you do it with a user value which is not

992
00:36:39,680 --> 00:36:41,599
programmer defined

993
00:36:41,599 --> 00:36:43,440
then the compiler will complain and it

994
00:36:43,440 --> 00:36:45,680
will reject it which says no not having

995
00:36:45,680 --> 00:36:47,919
that

996
00:36:48,960 --> 00:36:52,240
there is also for java a project called

997
00:36:52,240 --> 00:36:54,320
google gwt

998
00:36:54,320 --> 00:36:55,680
where there is a

999
00:36:55,680 --> 00:36:59,280
safe html from safe constant method

1000
00:36:59,280 --> 00:37:01,040
i couldn't get this working and i have a

1001
00:37:01,040 --> 00:37:02,320
feeling this project might have been

1002
00:37:02,320 --> 00:37:04,320
abandoned quite a while considering they

1003
00:37:04,320 --> 00:37:05,839
haven't actually even updated to use

1004
00:37:05,839 --> 00:37:08,800
https which for a google project is

1005
00:37:08,800 --> 00:37:10,240
questionable

1006
00:37:10,240 --> 00:37:13,359
um with c plus plus um

1007
00:37:13,359 --> 00:37:14,480
i

1008
00:37:14,480 --> 00:37:15,680
couldn't really work out how they were

1009
00:37:15,680 --> 00:37:16,720
doing it

1010
00:37:16,720 --> 00:37:18,320
if you're looking at the building secure

1011
00:37:18,320 --> 00:37:20,160
reliable systems book that i mentioned

1012
00:37:20,160 --> 00:37:21,760
at the beginning they do make this

1013
00:37:21,760 --> 00:37:23,520
statement of using a template

1014
00:37:23,520 --> 00:37:25,040
constructor that depends on each

1015
00:37:25,040 --> 00:37:27,520
character value in the string

1016
00:37:27,520 --> 00:37:28,480
um

1017
00:37:28,480 --> 00:37:30,079
that was it that's all they said i have

1018
00:37:30,079 --> 00:37:32,079
no idea what they mean by that

1019
00:37:32,079 --> 00:37:34,400
and also google have a document saying

1020
00:37:34,400 --> 00:37:36,640
about using safe html types as americans

1021
00:37:36,640 --> 00:37:37,520
view

1022
00:37:37,520 --> 00:37:39,200
and this was basically the statement

1023
00:37:39,200 --> 00:37:42,160
they made and that was it so i'm just

1024
00:37:42,160 --> 00:37:44,400
going to go

1025
00:37:44,400 --> 00:37:46,320
i've got nothing to do with that

1026
00:37:46,320 --> 00:37:48,880
so um ending in general vulnerabilities

1027
00:37:48,880 --> 00:37:50,800
in php

1028
00:37:50,800 --> 00:37:53,359
this is done through static analysis

1029
00:37:53,359 --> 00:37:55,280
so you run this as a check over your

1030
00:37:55,280 --> 00:37:58,640
entire project before you publish it

1031
00:37:58,640 --> 00:37:59,920
this one i'm going to start off with

1032
00:37:59,920 --> 00:38:02,079
using some

1033
00:38:02,079 --> 00:38:04,400
and i'd like to thank uh matthew brown

1034
00:38:04,400 --> 00:38:07,119
who put this into uh psalm a few months

1035
00:38:07,119 --> 00:38:08,079
ago

1036
00:38:08,079 --> 00:38:10,480
uh first of all you just install it um

1037
00:38:10,480 --> 00:38:12,720
your typical composer

1038
00:38:12,720 --> 00:38:15,680
um it installs all its dependencies

1039
00:38:15,680 --> 00:38:18,400
then you initialize some you need to

1040
00:38:18,400 --> 00:38:20,160
make sure that the sum is at level three

1041
00:38:20,160 --> 00:38:22,160
or stricter where level one is the most

1042
00:38:22,160 --> 00:38:23,680
strict

1043
00:38:23,680 --> 00:38:25,520
and when you actually are

1044
00:38:25,520 --> 00:38:27,680
you know as a library developer you

1045
00:38:27,680 --> 00:38:30,320
define that certain

1046
00:38:30,320 --> 00:38:32,800
arguments for your methods

1047
00:38:32,800 --> 00:38:33,760
are

1048
00:38:33,760 --> 00:38:36,640
um literal strings that's the type you

1049
00:38:36,640 --> 00:38:38,640
particularly want um as in it was

1050
00:38:38,640 --> 00:38:42,480
defined as a literal um

1051
00:38:42,480 --> 00:38:44,000
so when you actually are using this

1052
00:38:44,000 --> 00:38:47,200
library uh the code at the bottom

1053
00:38:47,200 --> 00:38:48,640
when you're actually concatenating the

1054
00:38:48,640 --> 00:38:50,960
user value that is rejected and in this

1055
00:38:50,960 --> 00:38:53,280
case uh sam will

1056
00:38:53,280 --> 00:38:55,760
uh error for you or complain but that's

1057
00:38:55,760 --> 00:38:57,359
not good enough that is no longer a

1058
00:38:57,359 --> 00:38:59,040
literal string

1059
00:38:59,040 --> 00:39:02,000
when you look at php stan um which is

1060
00:39:02,000 --> 00:39:03,839
another static analysis tool in php

1061
00:39:03,839 --> 00:39:06,160
world i'd like to thanks andre for

1062
00:39:06,160 --> 00:39:08,079
adding this uh again a couple of months

1063
00:39:08,079 --> 00:39:09,040
ago

1064
00:39:09,040 --> 00:39:11,200
uh again you install not as many

1065
00:39:11,200 --> 00:39:12,560
dependencies

1066
00:39:12,560 --> 00:39:14,960
php stand has a slight difference here

1067
00:39:14,960 --> 00:39:17,599
um you need to be five or stricter if

1068
00:39:17,599 --> 00:39:20,400
you're only taking a single type um so

1069
00:39:20,400 --> 00:39:22,640
you're only accepting literal strings it

1070
00:39:22,640 --> 00:39:24,800
has to be seven on stricter if there are

1071
00:39:24,800 --> 00:39:26,800
multiple types involved for example

1072
00:39:26,800 --> 00:39:28,640
you're saying a little string or an

1073
00:39:28,640 --> 00:39:30,640
array something like that

1074
00:39:30,640 --> 00:39:32,640
and this is inverted it's level nine is

1075
00:39:32,640 --> 00:39:34,560
the most strict at the moment

1076
00:39:34,560 --> 00:39:36,240
and it's pretty much exactly the same

1077
00:39:36,240 --> 00:39:39,680
you say the type is a literal string

1078
00:39:39,680 --> 00:39:41,520
you've got your code and it's rejected

1079
00:39:41,520 --> 00:39:43,520
straight away

1080
00:39:43,520 --> 00:39:44,400
so

1081
00:39:44,400 --> 00:39:48,079
that's kind of what we can do today um

1082
00:39:48,079 --> 00:39:49,520
the future you know how future

1083
00:39:49,520 --> 00:39:51,839
programming languages can help

1084
00:39:51,839 --> 00:39:54,240
the thing that i would like to point out

1085
00:39:54,240 --> 00:39:56,880
is static analysis while it's a great

1086
00:39:56,880 --> 00:39:57,680
tool

1087
00:39:57,680 --> 00:40:00,480
is not used by most developers uh

1088
00:40:00,480 --> 00:40:03,520
jetbrains did a survey um early part of

1089
00:40:03,520 --> 00:40:04,560
this year

1090
00:40:04,560 --> 00:40:07,839
and php developers was about 33

1091
00:40:07,839 --> 00:40:08,800
used a

1092
00:40:08,800 --> 00:40:11,200
66 not

1093
00:40:11,200 --> 00:40:12,960
a little bit more for other languages

1094
00:40:12,960 --> 00:40:16,000
but it seemed to be about the same

1095
00:40:16,000 --> 00:40:16,960
and

1096
00:40:16,960 --> 00:40:19,359
one i'd like to say that was good news

1097
00:40:19,359 --> 00:40:21,599
you know the third developer's doing it

1098
00:40:21,599 --> 00:40:24,160
i kind of feel like this survey is a

1099
00:40:24,160 --> 00:40:27,200
little bit biased because it implied

1100
00:40:27,200 --> 00:40:29,839
that most php developers are laravel

1101
00:40:29,839 --> 00:40:32,000
developers which is a great framework

1102
00:40:32,000 --> 00:40:34,000
don't get me wrong but if you look at

1103
00:40:34,000 --> 00:40:36,160
the um

1104
00:40:36,160 --> 00:40:38,160
the world of you know how many websites

1105
00:40:38,160 --> 00:40:40,160
have built in narrowville

1106
00:40:40,160 --> 00:40:41,920
let's just say that wordpress might be a

1107
00:40:41,920 --> 00:40:43,920
little bit ahead uh

1108
00:40:43,920 --> 00:40:46,079
on a global scale so the number of

1109
00:40:46,079 --> 00:40:47,520
developers

1110
00:40:47,520 --> 00:40:49,680
on a much wider scale

1111
00:40:49,680 --> 00:40:51,839
might be a bit biased

1112
00:40:51,839 --> 00:40:52,560
so

1113
00:40:52,560 --> 00:40:54,079
i would suggest that maybe it's less

1114
00:40:54,079 --> 00:40:55,760
than a third of developers with static

1115
00:40:55,760 --> 00:40:57,520
analysis and also remembering that

1116
00:40:57,520 --> 00:40:59,119
people we actually care about the most

1117
00:40:59,119 --> 00:41:01,119
the ones who make the most mistakes are

1118
00:41:01,119 --> 00:41:02,560
probably not using static analysis

1119
00:41:02,560 --> 00:41:04,079
either

1120
00:41:04,079 --> 00:41:05,359
so

1121
00:41:05,359 --> 00:41:08,000
uh last year we put together an is

1122
00:41:08,000 --> 00:41:10,800
literal rfc for php um

1123
00:41:10,800 --> 00:41:13,040
and i'd like to thank uh joe watkins and

1124
00:41:13,040 --> 00:41:16,880
matty corcus uh for doing that um joe

1125
00:41:16,880 --> 00:41:20,480
did the implementation um and mate did

1126
00:41:20,480 --> 00:41:21,680
the performance checking because we want

1127
00:41:21,680 --> 00:41:22,720
to make sure we're not going to cause

1128
00:41:22,720 --> 00:41:25,200
any problems um unfortunately it did

1129
00:41:25,200 --> 00:41:27,280
fail but that was mostly down to

1130
00:41:27,280 --> 00:41:30,160
communication issues and

1131
00:41:30,160 --> 00:41:32,720
concerns about performance which didn't

1132
00:41:32,720 --> 00:41:35,040
turn out to be any problem at all

1133
00:41:35,040 --> 00:41:36,960
and also because we put the vote up on

1134
00:41:36,960 --> 00:41:39,920
the last day of um before feature freeze

1135
00:41:39,920 --> 00:41:42,400
and people got a little bit uh unsure

1136
00:41:42,400 --> 00:41:45,599
about it so it is readable the rsc is

1137
00:41:45,599 --> 00:41:47,200
there the

1138
00:41:47,200 --> 00:41:48,960
implementation there you know patch is

1139
00:41:48,960 --> 00:41:50,880
also there and it works i'm using it on

1140
00:41:50,880 --> 00:41:53,520
my machine and it has been fantastic

1141
00:41:53,520 --> 00:41:55,359
um it has no dependencies because it's

1142
00:41:55,359 --> 00:41:57,680
actually built into language uh it is

1143
00:41:57,680 --> 00:41:59,680
actually easy to use

1144
00:41:59,680 --> 00:42:01,200
there's no need to use static analysis

1145
00:42:01,200 --> 00:42:02,800
but it works very well with it because

1146
00:42:02,800 --> 00:42:04,240
once the static analysis knows that it's

1147
00:42:04,240 --> 00:42:06,400
there it's all good

1148
00:42:06,400 --> 00:42:08,079
um

1149
00:42:08,079 --> 00:42:09,599
and it works with existing code and

1150
00:42:09,599 --> 00:42:11,440
libraries so

1151
00:42:11,440 --> 00:42:13,119
some of the things you saw earlier for

1152
00:42:13,119 --> 00:42:15,200
example the go stuff it would kind of

1153
00:42:15,200 --> 00:42:17,280
require people to rewrite stuff into

1154
00:42:17,280 --> 00:42:19,119
using query builders and you know just

1155
00:42:19,119 --> 00:42:20,640
working a different way

1156
00:42:20,640 --> 00:42:23,040
whereas a lot of code today does use

1157
00:42:23,040 --> 00:42:25,760
concatenation and it's concatenation of

1158
00:42:25,760 --> 00:42:27,920
developer defined strings

1159
00:42:27,920 --> 00:42:31,119
um so there we go um and also the

1160
00:42:31,119 --> 00:42:32,800
advantage of using a function like this

1161
00:42:32,800 --> 00:42:34,480
is you can choose how to handle the

1162
00:42:34,480 --> 00:42:37,040
mistakes um you know you could log to a

1163
00:42:37,040 --> 00:42:39,200
file you could write to a database call

1164
00:42:39,200 --> 00:42:41,760
an api throw an exception for the really

1165
00:42:41,760 --> 00:42:44,000
paranoid people or do nothing if you

1166
00:42:44,000 --> 00:42:46,160
just don't care um

1167
00:42:46,160 --> 00:42:47,280
and

1168
00:42:47,280 --> 00:42:50,079
one of the beauties of this is it means

1169
00:42:50,079 --> 00:42:51,599
it doesn't require

1170
00:42:51,599 --> 00:42:53,920
um libraries well libraries don't

1171
00:42:53,920 --> 00:42:55,920
require the developers to read and

1172
00:42:55,920 --> 00:42:57,920
understand all of their documentation

1173
00:42:57,920 --> 00:42:59,040
because

1174
00:42:59,040 --> 00:43:00,640
they're complicated enough as it is

1175
00:43:00,640 --> 00:43:03,520
trying to remember what argument allows

1176
00:43:03,520 --> 00:43:06,000
sql or not and what bits you know how

1177
00:43:06,000 --> 00:43:08,960
every part of it works is is important

1178
00:43:08,960 --> 00:43:11,280
um and also doesn't rely on developers

1179
00:43:11,280 --> 00:43:13,839
never making a mistake uh you noticed

1180
00:43:13,839 --> 00:43:15,680
earlier there was um it was just a

1181
00:43:15,680 --> 00:43:17,200
single character difference it was a

1182
00:43:17,200 --> 00:43:20,319
comma to separate the two or a dot which

1183
00:43:20,319 --> 00:43:21,920
did the concatenation

1184
00:43:21,920 --> 00:43:25,280
a very simple mistake to make

1185
00:43:25,440 --> 00:43:27,599
and the other advantage of this is uh

1186
00:43:27,599 --> 00:43:29,040
developers would be right

1187
00:43:29,040 --> 00:43:30,720
as they write the code so you talk about

1188
00:43:30,720 --> 00:43:32,640
people pushing left for their

1189
00:43:32,640 --> 00:43:34,240
development practices

1190
00:43:34,240 --> 00:43:37,280
um ides once they know about this type

1191
00:43:37,280 --> 00:43:39,359
would be able to go oh you know they can

1192
00:43:39,359 --> 00:43:41,839
highlight it as you type the keys um or

1193
00:43:41,839 --> 00:43:43,680
just have it trigger as soon as they run

1194
00:43:43,680 --> 00:43:46,319
that code for the very first time um

1195
00:43:46,319 --> 00:43:48,079
in terms of performance impact we got a

1196
00:43:48,079 --> 00:43:49,760
0.47

1197
00:43:49,760 --> 00:43:50,480
uh

1198
00:43:50,480 --> 00:43:53,200
performance impact and that was kind of

1199
00:43:53,200 --> 00:43:55,119
we were trying to be pessimistic on that

1200
00:43:55,119 --> 00:43:58,240
one um php is roughly 30 percent faster

1201
00:43:58,240 --> 00:44:01,599
anyway so you know it's dwarfs by that

1202
00:44:01,599 --> 00:44:03,359
um and also we're using the symphony

1203
00:44:03,359 --> 00:44:05,280
demo which is quite complex and we

1204
00:44:05,280 --> 00:44:06,560
couldn't even get it to connect to the

1205
00:44:06,560 --> 00:44:07,920
database because by connecting to the

1206
00:44:07,920 --> 00:44:11,119
database introduced too much variability

1207
00:44:11,119 --> 00:44:12,480
um so

1208
00:44:12,480 --> 00:44:14,240
you know the real-world performance

1209
00:44:14,240 --> 00:44:17,040
impact is going to be less than that

1210
00:44:17,040 --> 00:44:19,280
so how would it work um

1211
00:44:19,280 --> 00:44:22,000
that's it really um on the screen first

1212
00:44:22,000 --> 00:44:24,240
of all you do a function exists because

1213
00:44:24,240 --> 00:44:25,599
we need to look for backups

1214
00:44:25,599 --> 00:44:27,920
compatibility um if it doesn't exist yet

1215
00:44:27,920 --> 00:44:29,599
don't use it

1216
00:44:29,599 --> 00:44:32,319
and if the variable is not

1217
00:44:32,319 --> 00:44:33,760
a literal then you can throw an

1218
00:44:33,760 --> 00:44:35,280
exception

1219
00:44:35,280 --> 00:44:37,680
and in this case i'm trying to do it as

1220
00:44:37,680 --> 00:44:39,680
a library so the library might define

1221
00:44:39,680 --> 00:44:42,240
this as a private function

1222
00:44:42,240 --> 00:44:44,319
that it can use

1223
00:44:44,319 --> 00:44:47,839
every time it needs to check this

1224
00:44:47,839 --> 00:44:50,640
and that's it basically when the query

1225
00:44:50,640 --> 00:44:53,520
method is called it just checks that sql

1226
00:44:53,520 --> 00:44:55,040
is literal

1227
00:44:55,040 --> 00:44:56,160
but you might think that's a bit too

1228
00:44:56,160 --> 00:44:58,240
strict and that's fair enough

1229
00:44:58,240 --> 00:45:01,040
so how about this

1230
00:45:01,200 --> 00:45:03,599
okay hi cricks sorry the cut is short

1231
00:45:03,599 --> 00:45:05,440
but we have maybe one minute to wrap it

1232
00:45:05,440 --> 00:45:08,480
up and then we will really yep okay cool

1233
00:45:08,480 --> 00:45:10,000
uh so you've got your protection level

1234
00:45:10,000 --> 00:45:13,200
um zero one and zero

1235
00:45:13,200 --> 00:45:14,560
the is literal track is a little bit

1236
00:45:14,560 --> 00:45:16,880
more expanded um

1237
00:45:16,880 --> 00:45:18,480
we start off again with the standard

1238
00:45:18,480 --> 00:45:20,640
thing but we invert the function doesn't

1239
00:45:20,640 --> 00:45:23,280
exist or it is a literal then good to go

1240
00:45:23,280 --> 00:45:25,119
um otherwise it's instance of unsafe

1241
00:45:25,119 --> 00:45:27,920
value protection level of zero one and

1242
00:45:27,920 --> 00:45:29,599
you can either throw an exception or

1243
00:45:29,599 --> 00:45:32,720
just trigger an error um this is an

1244
00:45:32,720 --> 00:45:34,640
unsafe value

1245
00:45:34,640 --> 00:45:36,800
this is a fairly standard practice uh

1246
00:45:36,800 --> 00:45:40,480
just wrapping up a value into the object

1247
00:45:40,480 --> 00:45:42,319
um

1248
00:45:42,319 --> 00:45:44,160
why you would do this i'm not entirely

1249
00:45:44,160 --> 00:45:46,319
sure but let's say you needed to do

1250
00:45:46,319 --> 00:45:47,680
something unsafe

1251
00:45:47,680 --> 00:45:49,280
but the advantage of this means it's

1252
00:45:49,280 --> 00:45:51,760
easier for an audio to auditor to find

1253
00:45:51,760 --> 00:45:55,040
um and identifiers well if you look at

1254
00:45:55,040 --> 00:45:57,440
the query method you can introduce a new

1255
00:45:57,440 --> 00:45:59,280
argument of identifiers which is an

1256
00:45:59,280 --> 00:46:02,400
array that gets applied after you've

1257
00:46:02,400 --> 00:46:05,040
checked the literal check um so you do

1258
00:46:05,040 --> 00:46:06,720
the little check on the sql and then you

1259
00:46:06,720 --> 00:46:08,240
do it on there and you're just checking

1260
00:46:08,240 --> 00:46:09,920
the names and the identifiers are

1261
00:46:09,920 --> 00:46:11,359
matching a certain pattern i'm being

1262
00:46:11,359 --> 00:46:13,680
very restrictive of

1263
00:46:13,680 --> 00:46:15,520
um and that's how we talked about those

1264
00:46:15,520 --> 00:46:18,720
ini values the adjacent uh things and

1265
00:46:18,720 --> 00:46:20,240
then just sends up to the database and

1266
00:46:20,240 --> 00:46:22,640
that's how it gets

1267
00:46:22,640 --> 00:46:24,480
checked and so the actual code of the

1268
00:46:24,480 --> 00:46:26,640
person writes is that this is the

1269
00:46:26,640 --> 00:46:28,160
example of using identifiers which is

1270
00:46:28,160 --> 00:46:30,480
very rarely needed but it's there anyway

1271
00:46:30,480 --> 00:46:31,760
um

1272
00:46:31,760 --> 00:46:33,680
the orm approach would just do the

1273
00:46:33,680 --> 00:46:35,359
similar sort of thing

1274
00:46:35,359 --> 00:46:38,720
and that's the order by example cli

1275
00:46:38,720 --> 00:46:40,720
um a very simple check at the beginning

1276
00:46:40,720 --> 00:46:43,040
he's just doing it as literal um again

1277
00:46:43,040 --> 00:46:44,240
we could use the similar things at the

1278
00:46:44,240 --> 00:46:46,000
beginning that was just me showing how

1279
00:46:46,000 --> 00:46:48,160
you apply those parameters escaping more

1280
00:46:48,160 --> 00:46:49,200
values

1281
00:46:49,200 --> 00:46:51,359
running command and that's how we're

1282
00:46:51,359 --> 00:46:54,480
here for the user uh first argument is

1283
00:46:54,480 --> 00:46:56,560
checked and that is good if you did it

1284
00:46:56,560 --> 00:46:58,079
wrong it would be rejected and we're

1285
00:46:58,079 --> 00:47:01,280
good html same same

1286
00:47:01,280 --> 00:47:02,240
from that

1287
00:47:02,240 --> 00:47:04,240
this was a 300 line example of how to do

1288
00:47:04,240 --> 00:47:06,880
a templating engine like that protection

1289
00:47:06,880 --> 00:47:09,119
level allowed tags passing in xml

1290
00:47:09,119 --> 00:47:10,880
because you know xml gives you a nice

1291
00:47:10,880 --> 00:47:13,040
quality in theory um

1292
00:47:13,040 --> 00:47:14,560
node to walking

1293
00:47:14,560 --> 00:47:16,880
the question mark parameters html

1294
00:47:16,880 --> 00:47:19,119
checking parameters and that's basically

1295
00:47:19,119 --> 00:47:20,800
how it will appear to be used on the

1296
00:47:20,800 --> 00:47:24,480
other side um that's good span you can

1297
00:47:24,480 --> 00:47:28,400
make templates use not reusable um

1298
00:47:28,400 --> 00:47:30,480
that's including the html that gets

1299
00:47:30,480 --> 00:47:31,839
rejected

1300
00:47:31,839 --> 00:47:32,960
this one

1301
00:47:32,960 --> 00:47:35,680
is fine when it's a normal link but it's

1302
00:47:35,680 --> 00:47:37,920
rejected when it's a javascript um and

1303
00:47:37,920 --> 00:47:40,400
here's an example of that so

1304
00:47:40,400 --> 00:47:42,079
and i'm going to skip over this one

1305
00:47:42,079 --> 00:47:44,480
because future stuff

1306
00:47:44,480 --> 00:47:45,599
um

1307
00:47:45,599 --> 00:47:47,760
yeah okay thanks thank you thanks very

1308
00:47:47,760 --> 00:47:50,240
much

