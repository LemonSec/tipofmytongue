1
00:00:01,420 --> 00:00:05,630
[Music]

2
00:00:05,839 --> 00:00:07,839
and a very good morning to everyone

3
00:00:07,839 --> 00:00:10,080
i'm so excited to share our journey with

4
00:00:10,080 --> 00:00:12,000
you even though i may not really sound

5
00:00:12,000 --> 00:00:14,080
like it because it's actually 3am in the

6
00:00:14,080 --> 00:00:16,480
morning here in singapore and the walls

7
00:00:16,480 --> 00:00:18,800
are quite thin so

8
00:00:18,800 --> 00:00:20,080
this is the

9
00:00:20,080 --> 00:00:22,560
outline of my presentation today it is

10
00:00:22,560 --> 00:00:24,720
actually a story of our journey to scan

11
00:00:24,720 --> 00:00:27,680
600 apps with walks dependency check in

12
00:00:27,680 --> 00:00:29,199
60 days

13
00:00:29,199 --> 00:00:31,199
the drivers actually motivated us to do

14
00:00:31,199 --> 00:00:34,160
so how we went about planning it

15
00:00:34,160 --> 00:00:35,920
with success in mind how we

16
00:00:35,920 --> 00:00:38,160
operationalized and executed the plan

17
00:00:38,160 --> 00:00:40,000
and the challenges we faced while they

18
00:00:40,000 --> 00:00:42,640
did so i picked the title with the hope

19
00:00:42,640 --> 00:00:44,559
of attracting attendees who can actually

20
00:00:44,559 --> 00:00:47,039
relate very strongly with the difficulty

21
00:00:47,039 --> 00:00:49,200
and the challenge with an undertaking of

22
00:00:49,200 --> 00:00:52,079
such skill so if you happen to be an

23
00:00:52,079 --> 00:00:54,559
information security manager or is in

24
00:00:54,559 --> 00:00:56,640
charge of appsec which i see based on

25
00:00:56,640 --> 00:01:00,559
the poll we have quite a lot of abstract

26
00:01:00,559 --> 00:01:02,800
leads here with us today

27
00:01:02,800 --> 00:01:03,760
this is

28
00:01:03,760 --> 00:01:06,000
made for you this talk is addressed to

29
00:01:06,000 --> 00:01:06,880
you

30
00:01:06,880 --> 00:01:09,119
because more often than not you would

31
00:01:09,119 --> 00:01:10,799
feel that your hands are tight given

32
00:01:10,799 --> 00:01:12,799
your circumstances

33
00:01:12,799 --> 00:01:15,439
even if you are not absently fret not

34
00:01:15,439 --> 00:01:17,360
because i find the knowledge and

35
00:01:17,360 --> 00:01:19,119
perspectives for running website

36
00:01:19,119 --> 00:01:21,759
programs very useful for any abstract

37
00:01:21,759 --> 00:01:23,759
role as we are all part of a larger

38
00:01:23,759 --> 00:01:24,960
mission

39
00:01:24,960 --> 00:01:26,799
and it helps to see beyond our own

40
00:01:26,799 --> 00:01:28,880
confines even if your primary

41
00:01:28,880 --> 00:01:31,360
responsibility is to write code with

42
00:01:31,360 --> 00:01:33,360
very few things beyond that that's where

43
00:01:33,360 --> 00:01:35,520
i started off myself developing and

44
00:01:35,520 --> 00:01:37,840
architecting hardware software and cloud

45
00:01:37,840 --> 00:01:39,840
systems before actually moving on to

46
00:01:39,840 --> 00:01:42,479
building abstract programs now and using

47
00:01:42,479 --> 00:01:44,399
my knowledge and experience to enable

48
00:01:44,399 --> 00:01:46,640
many other roles to contribute towards

49
00:01:46,640 --> 00:01:49,200
our shared mission which is to which has

50
00:01:49,200 --> 00:01:51,680
brought all of us here together today in

51
00:01:51,680 --> 00:01:53,600
the first place so

52
00:01:53,600 --> 00:01:55,920
now that i've set the stage for the

53
00:01:55,920 --> 00:01:57,920
session let's dive right into the

54
00:01:57,920 --> 00:02:00,079
drivers so how do we find ourselves

55
00:02:00,079 --> 00:02:04,000
embarking on this journey

56
00:02:04,399 --> 00:02:06,799
so gov tank is large and the public

57
00:02:06,799 --> 00:02:09,440
service that it actually enables is huge

58
00:02:09,440 --> 00:02:11,520
and organizations of size tend to be

59
00:02:11,520 --> 00:02:13,920
less agile to changes than other

60
00:02:13,920 --> 00:02:15,599
organizations and this is actually

61
00:02:15,599 --> 00:02:18,239
worsened when bureaucracy actually gets

62
00:02:18,239 --> 00:02:19,599
into the mix

63
00:02:19,599 --> 00:02:21,760
in the public sector so to set the

64
00:02:21,760 --> 00:02:24,560
context of just how challenged gov tax

65
00:02:24,560 --> 00:02:27,200
application landscape is i borrowed this

66
00:02:27,200 --> 00:02:29,360
article by our local press in

67
00:02:29,360 --> 00:02:31,680
mid-september which actually explained

68
00:02:31,680 --> 00:02:33,760
the challenges facing the management of

69
00:02:33,760 --> 00:02:36,480
government i.t systems so specifically

70
00:02:36,480 --> 00:02:38,640
highlighted in red here there are more

71
00:02:38,640 --> 00:02:41,040
than 2 000 government i.t systems built

72
00:02:41,040 --> 00:02:43,120
over the years by different vendors

73
00:02:43,120 --> 00:02:45,280
using very different technologies and

74
00:02:45,280 --> 00:02:47,360
human errors and process gaps

75
00:02:47,360 --> 00:02:49,840
are bound to occur from time to time and

76
00:02:49,840 --> 00:02:51,760
accept practitioners like yourself

77
00:02:51,760 --> 00:02:53,760
actually integrate with one or more

78
00:02:53,760 --> 00:02:55,280
phases of the software development

79
00:02:55,280 --> 00:02:57,519
lifecycle so you could actually say

80
00:02:57,519 --> 00:02:59,920
influence or make decisions on how

81
00:02:59,920 --> 00:03:01,920
software is actually built

82
00:03:01,920 --> 00:03:04,800
it's designed the security control cell

83
00:03:04,800 --> 00:03:07,599
in use the kinds of tests that are being

84
00:03:07,599 --> 00:03:09,680
done on the application right down to

85
00:03:09,680 --> 00:03:11,040
the actual

86
00:03:11,040 --> 00:03:13,120
implementation of it itself writing the

87
00:03:13,120 --> 00:03:16,159
code that actually makes up the product

88
00:03:16,159 --> 00:03:18,800
and at gov tank we need to achieve the

89
00:03:18,800 --> 00:03:21,680
same objectives but true dozens of

90
00:03:21,680 --> 00:03:23,680
different vendors who actually built the

91
00:03:23,680 --> 00:03:27,040
i.t systems for us

92
00:03:28,720 --> 00:03:30,799
so working through vendors in an

93
00:03:30,799 --> 00:03:32,319
outsourced application development

94
00:03:32,319 --> 00:03:35,040
environment is particularly challenging

95
00:03:35,040 --> 00:03:37,280
the first challenge stems out from the

96
00:03:37,280 --> 00:03:39,519
lack of control on the development

97
00:03:39,519 --> 00:03:40,799
environment

98
00:03:40,799 --> 00:03:43,519
what we call the vendor backyard so our

99
00:03:43,519 --> 00:03:44,959
vendors actually provide their own

100
00:03:44,959 --> 00:03:46,959
development resources outside of the

101
00:03:46,959 --> 00:03:49,280
government control environment

102
00:03:49,280 --> 00:03:51,680
which may not be sufficiently secure and

103
00:03:51,680 --> 00:03:54,400
is very costly to audit and monolithic

104
00:03:54,400 --> 00:03:56,560
systems that were developed more than a

105
00:03:56,560 --> 00:03:59,040
decade ago are still actually very much

106
00:03:59,040 --> 00:04:01,519
news and in operation with very little

107
00:04:01,519 --> 00:04:03,439
deployment automation application

108
00:04:03,439 --> 00:04:05,360
security testing practices

109
00:04:05,360 --> 00:04:07,439
uh we've built and changed controls

110
00:04:07,439 --> 00:04:10,319
still being performed very manually due

111
00:04:10,319 --> 00:04:12,799
to the air gap hosting environment in

112
00:04:12,799 --> 00:04:14,480
which many of these applications are

113
00:04:14,480 --> 00:04:15,920
deployed

114
00:04:15,920 --> 00:04:17,680
and the second challenge is with the

115
00:04:17,680 --> 00:04:19,600
very use of tools and development

116
00:04:19,600 --> 00:04:21,600
testing practices it is actually

117
00:04:21,600 --> 00:04:24,000
difficult to ensure consistent quality

118
00:04:24,000 --> 00:04:26,080
across different systems when tolling

119
00:04:26,080 --> 00:04:28,320
and practices are not consistently

120
00:04:28,320 --> 00:04:30,320
applied or enforced

121
00:04:30,320 --> 00:04:32,479
there is little to no visibility into

122
00:04:32,479 --> 00:04:34,560
whether testing is performed properly or

123
00:04:34,560 --> 00:04:37,440
effectively so uh to give you an example

124
00:04:37,440 --> 00:04:39,360
a vendor one of our vendors actually had

125
00:04:39,360 --> 00:04:40,960
three copies of the same library

126
00:04:40,960 --> 00:04:43,199
application and only one was actually

127
00:04:43,199 --> 00:04:44,880
being patched for the other two were

128
00:04:44,880 --> 00:04:46,000
left

129
00:04:46,000 --> 00:04:47,919
to be vulnerable and the vendors

130
00:04:47,919 --> 00:04:49,520
understanding of the capabilities of

131
00:04:49,520 --> 00:04:51,520
various tools and techniques

132
00:04:51,520 --> 00:04:53,840
may be very poor based on our experience

133
00:04:53,840 --> 00:04:56,400
without necessarily understanding how

134
00:04:56,400 --> 00:04:58,240
the practices that they are asked to

135
00:04:58,240 --> 00:05:00,960
perform contribute towards the abstract

136
00:05:00,960 --> 00:05:02,160
objectives

137
00:05:02,160 --> 00:05:04,160
and many activities are

138
00:05:04,160 --> 00:05:06,080
actually nothing more than just checkbox

139
00:05:06,080 --> 00:05:09,199
exercises that are ineffective

140
00:05:09,199 --> 00:05:11,600
so majority of our application security

141
00:05:11,600 --> 00:05:13,520
issues observed in gov tank route

142
00:05:13,520 --> 00:05:15,520
themselves very strongly from the first

143
00:05:15,520 --> 00:05:17,600
two challenges on this side so when we

144
00:05:17,600 --> 00:05:20,320
discuss and agree to shift left on

145
00:05:20,320 --> 00:05:23,120
security as an organization we seek to

146
00:05:23,120 --> 00:05:24,639
incorporate security testing and

147
00:05:24,639 --> 00:05:27,280
practices into the early phases of the

148
00:05:27,280 --> 00:05:29,280
development process such as track

149
00:05:29,280 --> 00:05:31,199
modeling on the application architecture

150
00:05:31,199 --> 00:05:33,759
before code is ever even written

151
00:05:33,759 --> 00:05:35,280
as an example and having a good

152
00:05:35,280 --> 00:05:37,600
confidence that the developers actually

153
00:05:37,600 --> 00:05:40,000
writing the code are aware of secured

154
00:05:40,000 --> 00:05:41,280
software

155
00:05:41,280 --> 00:05:43,360
practices when code is

156
00:05:43,360 --> 00:05:45,759
being written so these practices and

157
00:05:45,759 --> 00:05:48,400
controls are particularly challenging to

158
00:05:48,400 --> 00:05:50,479
implement in an outsourced application

159
00:05:50,479 --> 00:05:52,880
development context especially when the

160
00:05:52,880 --> 00:05:54,880
system owners or the business may choose

161
00:05:54,880 --> 00:05:58,639
to prioritize features and cost over

162
00:05:58,639 --> 00:06:00,400
security

163
00:06:00,400 --> 00:06:02,800
so gov tank's intervention to this

164
00:06:02,800 --> 00:06:05,680
vendor backup problem is the sg tech

165
00:06:05,680 --> 00:06:08,319
stack also the singapore tech stack

166
00:06:08,319 --> 00:06:10,160
which is actually a suite of commercial

167
00:06:10,160 --> 00:06:12,400
tools hosted in the government

168
00:06:12,400 --> 00:06:14,160
environment whose configurations are

169
00:06:14,160 --> 00:06:16,240
actually compliant or immediately

170
00:06:16,240 --> 00:06:18,479
compliant with the government standards

171
00:06:18,479 --> 00:06:20,400
and projects can actually subscribe to

172
00:06:20,400 --> 00:06:22,560
the sgtech stack offerings which

173
00:06:22,560 --> 00:06:25,759
includes a standardized ci cd-2 chain

174
00:06:25,759 --> 00:06:28,240
dot ship that actually provides code

175
00:06:28,240 --> 00:06:29,520
repos

176
00:06:29,520 --> 00:06:31,120
static analysis

177
00:06:31,120 --> 00:06:34,560
tools sca tools dynamic analysis tools

178
00:06:34,560 --> 00:06:37,039
and a cloud hosting environment as well

179
00:06:37,039 --> 00:06:38,720
adopt ship

180
00:06:38,720 --> 00:06:39,600
sorry

181
00:06:39,600 --> 00:06:42,080
gcc actually with offerings from the

182
00:06:42,080 --> 00:06:44,080
major cloud service providers such as

183
00:06:44,080 --> 00:06:48,400
aws azure and google cloud and this may

184
00:06:48,400 --> 00:06:51,440
seem like a silver bullet to the vendor

185
00:06:51,440 --> 00:06:53,919
backup problems simply have

186
00:06:53,919 --> 00:06:58,240
all 2000 or it systems move on to the

187
00:06:58,240 --> 00:07:00,560
sgtech stack right and our vendor backup

188
00:07:00,560 --> 00:07:02,479
problem actually goes away but

189
00:07:02,479 --> 00:07:05,840
unfortunately that's not the case the sg

190
00:07:05,840 --> 00:07:08,400
tech stack solves in the very best case

191
00:07:08,400 --> 00:07:10,800
only half of the problem as the total

192
00:07:10,800 --> 00:07:12,880
addressable market is actually a

193
00:07:12,880 --> 00:07:14,240
fraction of the applications that we

194
00:07:14,240 --> 00:07:15,120
have

195
00:07:15,120 --> 00:07:17,680
only new applications or applications

196
00:07:17,680 --> 00:07:19,680
that are actually earmarked for what we

197
00:07:19,680 --> 00:07:22,000
call cloud modernization

198
00:07:22,000 --> 00:07:24,000
with non-sensitive data classifications

199
00:07:24,000 --> 00:07:26,560
are permitted to consume the sg tech

200
00:07:26,560 --> 00:07:29,039
stack and have access to these tools

201
00:07:29,039 --> 00:07:31,039
within a government hosting environment

202
00:07:31,039 --> 00:07:33,120
and many of the legacy and sensitive

203
00:07:33,120 --> 00:07:34,960
applications are actually left in the

204
00:07:34,960 --> 00:07:35,919
cold

205
00:07:35,919 --> 00:07:39,039
ever more exposed to brewing threats

206
00:07:39,039 --> 00:07:40,000
which is

207
00:07:40,000 --> 00:07:42,880
not surprising because the report on

208
00:07:42,880 --> 00:07:44,800
dart reading in june actually claimed

209
00:07:44,800 --> 00:07:46,639
that close to fourth

210
00:07:46,639 --> 00:07:49,440
of third-party libraries in applications

211
00:07:49,440 --> 00:07:51,280
are never updated

212
00:07:51,280 --> 00:07:52,080
and

213
00:07:52,080 --> 00:07:53,919
patching of third-party libraries may

214
00:07:53,919 --> 00:07:56,720
have been a proactive activity in the

215
00:07:56,720 --> 00:07:57,680
past

216
00:07:57,680 --> 00:07:59,680
in the interest of compatibility or not

217
00:07:59,680 --> 00:08:02,000
breaking things uh applications that

218
00:08:02,000 --> 00:08:04,319
really work but those days are well over

219
00:08:04,319 --> 00:08:06,240
and the risks of not doing so is far

220
00:08:06,240 --> 00:08:07,759
greater than before

221
00:08:07,759 --> 00:08:09,759
and track actors are

222
00:08:09,759 --> 00:08:12,160
actively exploiting the critical known

223
00:08:12,160 --> 00:08:14,800
vulnerabilities from years ago at scale

224
00:08:14,800 --> 00:08:16,800
now such as the tolerance ui and the

225
00:08:16,800 --> 00:08:18,160
apache stress

226
00:08:18,160 --> 00:08:20,479
remote code execution vulnerabilities

227
00:08:20,479 --> 00:08:24,240
from back in 2017 and many organizations

228
00:08:24,240 --> 00:08:26,639
have yet to patch these vulnerabilities

229
00:08:26,639 --> 00:08:29,199
despite the four-year runway and this

230
00:08:29,199 --> 00:08:30,720
does not even include the new attack

231
00:08:30,720 --> 00:08:32,719
vectors and vulnerabilities that are

232
00:08:32,719 --> 00:08:35,039
continually being discovered

233
00:08:35,039 --> 00:08:37,440
the risks from patch that can no longer

234
00:08:37,440 --> 00:08:40,399
be not given today's climate

235
00:08:40,399 --> 00:08:42,000
and

236
00:08:42,000 --> 00:08:44,080
graphtec

237
00:08:44,080 --> 00:08:46,480
has a few pre-existing tools that

238
00:08:46,480 --> 00:08:48,399
actually tries to centralize some of

239
00:08:48,399 --> 00:08:50,080
this infrastructure and host

240
00:08:50,080 --> 00:08:52,080
vulnerability management across the

241
00:08:52,080 --> 00:08:54,720
whole government so these tools were

242
00:08:54,720 --> 00:08:57,519
actually a response to audit findings

243
00:08:57,519 --> 00:08:59,920
from a few years ago that actually

244
00:08:59,920 --> 00:09:00,959
showed

245
00:09:00,959 --> 00:09:03,760
per compliance of the patch management

246
00:09:03,760 --> 00:09:06,080
and these layers and

247
00:09:06,080 --> 00:09:08,240
detection of known vulnerabilities for

248
00:09:08,240 --> 00:09:10,399
infrastructure and host layers are

249
00:09:10,399 --> 00:09:12,480
fairly straightforward because as we

250
00:09:12,480 --> 00:09:15,360
know tools are very well established and

251
00:09:15,360 --> 00:09:16,959
the patch regime

252
00:09:16,959 --> 00:09:19,440
is also a very well explored topic and

253
00:09:19,440 --> 00:09:21,920
is supported across like say for example

254
00:09:21,920 --> 00:09:24,560
various operating systems such as with

255
00:09:24,560 --> 00:09:26,560
windows that's wsus

256
00:09:26,560 --> 00:09:28,800
with enterprise linux there's a very

257
00:09:28,800 --> 00:09:30,959
high standard like for example

258
00:09:30,959 --> 00:09:33,920
uh unfortunately the same cannot be set

259
00:09:33,920 --> 00:09:37,040
of third party libraries in applications

260
00:09:37,040 --> 00:09:39,680
which actually require most of the time

261
00:09:39,680 --> 00:09:41,760
a source code to be available and the

262
00:09:41,760 --> 00:09:44,080
developer to actually make changes to

263
00:09:44,080 --> 00:09:46,720
the application for the upgrade and have

264
00:09:46,720 --> 00:09:48,880
the application thoroughly tested after

265
00:09:48,880 --> 00:09:51,600
patching our vendor backyard situation

266
00:09:51,600 --> 00:09:54,240
resulted in source code of applications

267
00:09:54,240 --> 00:09:56,000
not being stopped centrally in the

268
00:09:56,000 --> 00:09:59,120
government environment therefore sca has

269
00:09:59,120 --> 00:10:01,360
to be performed and actioned upon

270
00:10:01,360 --> 00:10:03,440
by the vendors within their development

271
00:10:03,440 --> 00:10:05,680
environment in order to close the gap so

272
00:10:05,680 --> 00:10:07,839
you might wonder why we did not consider

273
00:10:07,839 --> 00:10:10,720
having the vendors check in at minimum

274
00:10:10,720 --> 00:10:12,320
their source code into a government

275
00:10:12,320 --> 00:10:14,959
control repository that was considered

276
00:10:14,959 --> 00:10:17,120
and deliberated but turns out it was a

277
00:10:17,120 --> 00:10:19,360
blocker to our need to actually move

278
00:10:19,360 --> 00:10:22,079
quickly to identify vulnerable libraries

279
00:10:22,079 --> 00:10:24,079
as the process of designing and

280
00:10:24,079 --> 00:10:26,320
provisioning the infrastructure to

281
00:10:26,320 --> 00:10:28,560
support code repositories for sensitive

282
00:10:28,560 --> 00:10:30,000
applications is actually a very

283
00:10:30,000 --> 00:10:33,120
complicated affair and it's not a really

284
00:10:33,120 --> 00:10:35,200
a real blocker to reading up vulnerable

285
00:10:35,200 --> 00:10:38,079
libraries that are unpatched and what we

286
00:10:38,079 --> 00:10:40,320
need is an intervention in the form of a

287
00:10:40,320 --> 00:10:43,440
centralized solution that fills the gap

288
00:10:43,440 --> 00:10:45,600
that addresses the problem directly and

289
00:10:45,600 --> 00:10:47,680
completely across a large number of

290
00:10:47,680 --> 00:10:50,399
applications

291
00:10:51,440 --> 00:10:54,480
so it is very tempting to actually go

292
00:10:54,480 --> 00:10:57,040
for the best in class

293
00:10:57,040 --> 00:10:59,040
provider when implementing any

294
00:10:59,040 --> 00:11:00,959
particular solution

295
00:11:00,959 --> 00:11:02,880
that is the most obvious thing to do

296
00:11:02,880 --> 00:11:05,120
assuming that budget is not a concern

297
00:11:05,120 --> 00:11:06,720
and typically for

298
00:11:06,720 --> 00:11:08,000
government

299
00:11:08,000 --> 00:11:10,079
sector that is not a concern

300
00:11:10,079 --> 00:11:12,720
but there are nuances across different

301
00:11:12,720 --> 00:11:13,760
tools

302
00:11:13,760 --> 00:11:16,399
some may actually perform better across

303
00:11:16,399 --> 00:11:18,720
different concerns but underperform in

304
00:11:18,720 --> 00:11:21,040
areas that your organization actually

305
00:11:21,040 --> 00:11:22,800
cares about the most

306
00:11:22,800 --> 00:11:25,360
and i doubt that as not all concerns are

307
00:11:25,360 --> 00:11:28,720
equal and in our case the risks from the

308
00:11:28,720 --> 00:11:31,120
unpatched third-party libraries with

309
00:11:31,120 --> 00:11:32,880
known vulnerabilities actually far

310
00:11:32,880 --> 00:11:33,920
outweigh

311
00:11:33,920 --> 00:11:36,320
all other supply chain concerns that se

312
00:11:36,320 --> 00:11:38,800
tools can potentially address

313
00:11:38,800 --> 00:11:40,160
this may not be the same for your

314
00:11:40,160 --> 00:11:43,120
organization say perhaps you have a

315
00:11:43,120 --> 00:11:45,360
process that already ensures that

316
00:11:45,360 --> 00:11:47,440
packages with known vulnerabilities are

317
00:11:47,440 --> 00:11:50,240
not being introduced into your build and

318
00:11:50,240 --> 00:11:53,680
delivery pipeline but your delivery uh

319
00:11:53,680 --> 00:11:56,240
by but you deliver software uh as

320
00:11:56,240 --> 00:11:58,240
products and have no means to actually

321
00:11:58,240 --> 00:11:59,519
identify

322
00:11:59,519 --> 00:12:02,800
say the open source license risks that

323
00:12:02,800 --> 00:12:04,480
might actually invite legal trouble

324
00:12:04,480 --> 00:12:05,839
later on

325
00:12:05,839 --> 00:12:07,440
or you are in a high assurance

326
00:12:07,440 --> 00:12:09,519
environment where the introduction of

327
00:12:09,519 --> 00:12:11,519
malicious packages is a much bigger

328
00:12:11,519 --> 00:12:12,560
concern

329
00:12:12,560 --> 00:12:15,920
and your ideal sda solution is one that

330
00:12:15,920 --> 00:12:17,920
actually has a package firewall to

331
00:12:17,920 --> 00:12:20,639
mitigate the supply chain risks

332
00:12:20,639 --> 00:12:22,800
of obtaining the wrong packages

333
00:12:22,800 --> 00:12:25,920
so before adopting any solution

334
00:12:25,920 --> 00:12:28,079
properly evaluate your concerns and have

335
00:12:28,079 --> 00:12:30,240
that inform the closest matching

336
00:12:30,240 --> 00:12:33,200
solution that addresses your concerns so

337
00:12:33,200 --> 00:12:35,279
it may turn out to be more effective

338
00:12:35,279 --> 00:12:37,839
than a costly solution that provides

339
00:12:37,839 --> 00:12:40,320
many capabilities but under delivers for

340
00:12:40,320 --> 00:12:42,320
what you really care about

341
00:12:42,320 --> 00:12:43,279
and

342
00:12:43,279 --> 00:12:45,519
i think from experience the marketplace

343
00:12:45,519 --> 00:12:48,240
guides are a very good preference for

344
00:12:48,240 --> 00:12:49,680
who is in the game

345
00:12:49,680 --> 00:12:52,480
for a particular piece of technology and

346
00:12:52,480 --> 00:12:54,720
a good starting point for your own

347
00:12:54,720 --> 00:12:56,480
internal evaluation

348
00:12:56,480 --> 00:12:59,360
of what the commercial options are so

349
00:12:59,360 --> 00:13:01,120
what really works for others may not

350
00:13:01,120 --> 00:13:03,120
work as well for you which you'll see

351
00:13:03,120 --> 00:13:07,800
from our experience later

352
00:13:08,079 --> 00:13:08,880
so

353
00:13:08,880 --> 00:13:11,040
based on the studies that we have

354
00:13:11,040 --> 00:13:13,200
conducted on the past

355
00:13:13,200 --> 00:13:15,120
centralized vulnerability management

356
00:13:15,120 --> 00:13:18,240
programs that we run within gov 10 we

357
00:13:18,240 --> 00:13:20,560
have identified a crew a few critical

358
00:13:20,560 --> 00:13:23,120
success factors that should be duly

359
00:13:23,120 --> 00:13:25,440
considered so this is particularly

360
00:13:25,440 --> 00:13:28,320
relevant to programs that kind of sits

361
00:13:28,320 --> 00:13:31,120
outside the software delivery pipeline

362
00:13:31,120 --> 00:13:33,120
that may not benefit from the

363
00:13:33,120 --> 00:13:35,839
integration points for automation or

364
00:13:35,839 --> 00:13:38,720
expert resource such as with

365
00:13:38,720 --> 00:13:41,680
our case for sda here so the first is to

366
00:13:41,680 --> 00:13:44,639
adopt tools that actually provide a high

367
00:13:44,639 --> 00:13:47,360
signal to noise ratio so this means that

368
00:13:47,360 --> 00:13:50,079
false positive rate of results should be

369
00:13:50,079 --> 00:13:52,639
low and unskilled developers may not be

370
00:13:52,639 --> 00:13:55,040
conversant enough to actually triage the

371
00:13:55,040 --> 00:13:57,600
results from these tools directly

372
00:13:57,600 --> 00:14:00,399
testing methods such as static analysis

373
00:14:00,399 --> 00:14:02,320
actually new very large number of false

374
00:14:02,320 --> 00:14:04,800
positives in an effort to reduce the

375
00:14:04,800 --> 00:14:06,320
false negatives

376
00:14:06,320 --> 00:14:08,079
which can actually lead to the results

377
00:14:08,079 --> 00:14:10,880
being not or challenged which puts any

378
00:14:10,880 --> 00:14:13,120
program in jeopardy

379
00:14:13,120 --> 00:14:16,000
and next adult tools that are actually

380
00:14:16,000 --> 00:14:18,480
architectural agnostic and have what we

381
00:14:18,480 --> 00:14:21,040
call high consistency so this means that

382
00:14:21,040 --> 00:14:23,199
the tool should actually be relevant and

383
00:14:23,199 --> 00:14:25,199
applicable across different application

384
00:14:25,199 --> 00:14:28,320
designs and environments and minimizes

385
00:14:28,320 --> 00:14:30,480
the exceptions by which the user has to

386
00:14:30,480 --> 00:14:33,199
grapple with a different tool for say in

387
00:14:33,199 --> 00:14:36,160
a c-sharp versus a java environment a

388
00:14:36,160 --> 00:14:38,959
windows versus a linux environment

389
00:14:38,959 --> 00:14:42,240
an aws or azure cloud environment versus

390
00:14:42,240 --> 00:14:43,360
on-premise

391
00:14:43,360 --> 00:14:45,519
it is actually tempting to address the

392
00:14:45,519 --> 00:14:48,320
lowest hanging fruit in your universe

393
00:14:48,320 --> 00:14:50,480
while totally ignoring the elephant in

394
00:14:50,480 --> 00:14:51,600
the room

395
00:14:51,600 --> 00:14:55,040
that really matters and finally adopt

396
00:14:55,040 --> 00:14:57,040
tools that actually provide simple and

397
00:14:57,040 --> 00:14:59,519
actionable results so this translates to

398
00:14:59,519 --> 00:15:01,600
minimal reliance on

399
00:15:01,600 --> 00:15:05,040
the central team that offers the tools

400
00:15:05,040 --> 00:15:07,519
to enable the development teams the

401
00:15:07,519 --> 00:15:10,480
project teams tend to expect the central

402
00:15:10,480 --> 00:15:13,680
team to serve as the triage team for the

403
00:15:13,680 --> 00:15:16,639
unskilled developers back in point one

404
00:15:16,639 --> 00:15:18,800
because the scan is imposed on them by

405
00:15:18,800 --> 00:15:21,680
the central team and the project teams

406
00:15:21,680 --> 00:15:23,839
who primarily serve as a vendor

407
00:15:23,839 --> 00:15:25,760
management rule may not have the

408
00:15:25,760 --> 00:15:27,279
expertise to actually discern the

409
00:15:27,279 --> 00:15:29,680
results and this actually adds

410
00:15:29,680 --> 00:15:32,320
considerable overhead which you do not

411
00:15:32,320 --> 00:15:34,000
want to incur as essential team because

412
00:15:34,000 --> 00:15:38,160
it puts your team at risk of burning up

413
00:15:38,160 --> 00:15:39,600
so you may have noticed how these

414
00:15:39,600 --> 00:15:41,279
considerations actually

415
00:15:41,279 --> 00:15:44,240
aligns with maximizing security impact

416
00:15:44,240 --> 00:15:45,839
while minimizing

417
00:15:45,839 --> 00:15:48,800
resource usage and based on our studies

418
00:15:48,800 --> 00:15:51,040
of the many programs that initiate this

419
00:15:51,040 --> 00:15:54,000
in organization before us the ability to

420
00:15:54,000 --> 00:15:55,600
achieve these outcomes actually

421
00:15:55,600 --> 00:15:57,519
contributes significantly towards the

422
00:15:57,519 --> 00:16:00,000
success of the program

423
00:16:00,000 --> 00:16:01,199
so

424
00:16:01,199 --> 00:16:03,600
now that i've established our need to

425
00:16:03,600 --> 00:16:07,040
implement a centralized ses solution and

426
00:16:07,040 --> 00:16:09,040
are convinced that it is the right

427
00:16:09,040 --> 00:16:11,519
solution to address our problem

428
00:16:11,519 --> 00:16:13,120
we advise into the planning and the

429
00:16:13,120 --> 00:16:16,320
execution phases

430
00:16:18,320 --> 00:16:19,120
so

431
00:16:19,120 --> 00:16:21,839
appsec is a fairly technical discipline

432
00:16:21,839 --> 00:16:24,959
and when operating at absec we spend

433
00:16:24,959 --> 00:16:27,360
most of our time working on solutions

434
00:16:27,360 --> 00:16:29,360
that actually involve technology

435
00:16:29,360 --> 00:16:30,720
directly

436
00:16:30,720 --> 00:16:32,959
and from my experience many brilliant

437
00:16:32,959 --> 00:16:34,880
engineers actually built very elegant

438
00:16:34,880 --> 00:16:37,519
technological solutions that failed

439
00:16:37,519 --> 00:16:39,440
not because the technology itself is

440
00:16:39,440 --> 00:16:41,519
flawed but because the technology was

441
00:16:41,519 --> 00:16:44,320
actually built in a vacuum where only

442
00:16:44,320 --> 00:16:46,399
the technology method in solving the

443
00:16:46,399 --> 00:16:49,199
problem and reality is much more than

444
00:16:49,199 --> 00:16:51,680
technology that actually works well for

445
00:16:51,680 --> 00:16:53,920
its intended function

446
00:16:53,920 --> 00:16:56,639
so very often overlooked uh from

447
00:16:56,639 --> 00:16:58,639
experience are the people and process

448
00:16:58,639 --> 00:17:02,240
facets of the problem so i find this ppt

449
00:17:02,240 --> 00:17:03,759
framework which is actually first

450
00:17:03,759 --> 00:17:06,400
conceived for operational efficiency

451
00:17:06,400 --> 00:17:09,039
back in the 1960s still very relevant

452
00:17:09,039 --> 00:17:11,760
for technology management today and this

453
00:17:11,760 --> 00:17:13,679
framework has guided me to challenge a

454
00:17:13,679 --> 00:17:15,280
lot of norms and

455
00:17:15,280 --> 00:17:17,039
develop innovative solutions that

456
00:17:17,039 --> 00:17:18,400
actually achieved the intended

457
00:17:18,400 --> 00:17:22,079
objectives effectively as with sca here

458
00:17:22,079 --> 00:17:24,880
so the model is simple to use so just

459
00:17:24,880 --> 00:17:27,039
consider the interactions where two

460
00:17:27,039 --> 00:17:29,520
facets actually meet so

461
00:17:29,520 --> 00:17:31,440
for example between the people in the

462
00:17:31,440 --> 00:17:32,400
process

463
00:17:32,400 --> 00:17:35,120
facets do people really understand how

464
00:17:35,120 --> 00:17:37,679
they fit into the process

465
00:17:37,679 --> 00:17:40,960
so in the context of operationalizing sc

466
00:17:40,960 --> 00:17:42,240
engulf tank

467
00:17:42,240 --> 00:17:44,720
existing processes for quality

468
00:17:44,720 --> 00:17:47,120
acceptance and change management already

469
00:17:47,120 --> 00:17:49,840
exists so do the staff who actually are

470
00:17:49,840 --> 00:17:52,640
very seasoned with the existing process

471
00:17:52,640 --> 00:17:55,760
so these are the invariants uh or

472
00:17:55,760 --> 00:17:57,919
environment components as we call it

473
00:17:57,919 --> 00:18:00,000
we are not seeking to override the

474
00:18:00,000 --> 00:18:02,080
existing process or hire

475
00:18:02,080 --> 00:18:04,799
new people just to do sca

476
00:18:04,799 --> 00:18:05,760
and

477
00:18:05,760 --> 00:18:08,320
having do people do more is actually uh

478
00:18:08,320 --> 00:18:11,840
largely unpopular so a program that

479
00:18:11,840 --> 00:18:14,080
failed to explore such tensions will not

480
00:18:14,080 --> 00:18:16,160
be balanced and

481
00:18:16,160 --> 00:18:18,160
is highly likely to actually crumble

482
00:18:18,160 --> 00:18:20,880
eventually so i like to use the analogy

483
00:18:20,880 --> 00:18:22,880
of a three-legged stool

484
00:18:22,880 --> 00:18:24,559
where one leg is actually shorter than

485
00:18:24,559 --> 00:18:27,200
the other so if you sat on it you would

486
00:18:27,200 --> 00:18:30,080
fall no surprise there and the analogy

487
00:18:30,080 --> 00:18:32,480
is actually very apt so imagine when all

488
00:18:32,480 --> 00:18:36,480
three legs are also too short the stool

489
00:18:36,480 --> 00:18:38,320
is rather useless

490
00:18:38,320 --> 00:18:39,760
it's as good as sitting on the ground

491
00:18:39,760 --> 00:18:40,960
directly

492
00:18:40,960 --> 00:18:44,400
and to address this tension

493
00:18:44,400 --> 00:18:46,320
it is paramount to show people why they

494
00:18:46,320 --> 00:18:49,039
need to do what they are asked of and

495
00:18:49,039 --> 00:18:51,039
that their pains of doing

496
00:18:51,039 --> 00:18:52,880
more than they have been

497
00:18:52,880 --> 00:18:55,840
asked of is newly considered with all

498
00:18:55,840 --> 00:18:57,120
practical

499
00:18:57,120 --> 00:19:00,000
automation opportunities explored

500
00:19:00,000 --> 00:19:02,559
that the ask of them actually helps them

501
00:19:02,559 --> 00:19:05,200
do their job better that their success

502
00:19:05,200 --> 00:19:08,320
is intricately related to the adherence

503
00:19:08,320 --> 00:19:11,200
of the process

504
00:19:11,200 --> 00:19:14,000
so exploring the tensions is a good

505
00:19:14,000 --> 00:19:17,039
start but it's not sufficient in itself

506
00:19:17,039 --> 00:19:19,520
so each facet should also be considered

507
00:19:19,520 --> 00:19:21,280
thoroughly in itself the more

508
00:19:21,280 --> 00:19:23,039
information we can gather the more

509
00:19:23,039 --> 00:19:25,200
knowledge we have the more wisdom we

510
00:19:25,200 --> 00:19:27,440
have to make good informed judgments as

511
00:19:27,440 --> 00:19:30,240
we execute and evolve the program and

512
00:19:30,240 --> 00:19:32,480
extending the analogy of the stool this

513
00:19:32,480 --> 00:19:34,640
is the distance between each leg of the

514
00:19:34,640 --> 00:19:35,679
stool

515
00:19:35,679 --> 00:19:37,840
how comfortably we seat or bumps on the

516
00:19:37,840 --> 00:19:40,240
stool is defined by whether it's a

517
00:19:40,240 --> 00:19:41,760
perfect triangle

518
00:19:41,760 --> 00:19:44,240
or just simply a narrow wedge

519
00:19:44,240 --> 00:19:45,760
not particularly

520
00:19:45,760 --> 00:19:48,960
pleasant to rest on and from experience

521
00:19:48,960 --> 00:19:51,679
technology is hardly ever a problem

522
00:19:51,679 --> 00:19:54,160
the ability to mobilize people to follow

523
00:19:54,160 --> 00:19:57,120
through a process is key to a successful

524
00:19:57,120 --> 00:19:58,240
program

525
00:19:58,240 --> 00:20:00,400
so we'll show in the second half of this

526
00:20:00,400 --> 00:20:02,880
session how the process facet actually

527
00:20:02,880 --> 00:20:03,679
play

528
00:20:03,679 --> 00:20:05,679
a critical role in the success of our

529
00:20:05,679 --> 00:20:07,919
sca program so pay a particular

530
00:20:07,919 --> 00:20:10,880
attention to how attuned we were of the

531
00:20:10,880 --> 00:20:12,960
key steps that it took

532
00:20:12,960 --> 00:20:15,600
to achieve our objective many consume

533
00:20:15,600 --> 00:20:17,919
process by which they are given without

534
00:20:17,919 --> 00:20:20,559
much thought so perhaps it's because

535
00:20:20,559 --> 00:20:22,480
it's provided out of the box by the

536
00:20:22,480 --> 00:20:24,080
product paper cure

537
00:20:24,080 --> 00:20:26,080
uh and it's convinced that it is

538
00:20:26,080 --> 00:20:28,159
actually industry norm and that the

539
00:20:28,159 --> 00:20:30,080
expert who actually built the product

540
00:20:30,080 --> 00:20:32,240
knows better so i think an extreme

541
00:20:32,240 --> 00:20:35,280
example is the erp enterprise resource

542
00:20:35,280 --> 00:20:37,200
planning software space

543
00:20:37,200 --> 00:20:39,360
which do not generalize to all forms of

544
00:20:39,360 --> 00:20:41,760
business but it's still very prevalent

545
00:20:41,760 --> 00:20:44,720
and widespread at least in my region it

546
00:20:44,720 --> 00:20:47,440
is and that it has actually resulted in

547
00:20:47,440 --> 00:20:50,080
a lot of pain for the users and the

548
00:20:50,080 --> 00:20:51,919
businesses who had to adapt to

549
00:20:51,919 --> 00:20:55,039
technology in highly frustrating ways

550
00:20:55,039 --> 00:20:56,080
so

551
00:20:56,080 --> 00:20:58,320
uh in my opinion technology is amazing

552
00:20:58,320 --> 00:21:00,640
and the miller of great things

553
00:21:00,640 --> 00:21:03,440
but we can find ourselves pooping on a

554
00:21:03,440 --> 00:21:04,720
straight jacket

555
00:21:04,720 --> 00:21:07,280
if we are not careful about how it fits

556
00:21:07,280 --> 00:21:09,600
for us

557
00:21:10,159 --> 00:21:10,960
so

558
00:21:10,960 --> 00:21:13,440
a lot can go wrong when mobilizing

559
00:21:13,440 --> 00:21:14,960
hundreds of people

560
00:21:14,960 --> 00:21:17,200
let alone if they are spread across

561
00:21:17,200 --> 00:21:20,240
different vendors in our case and also

562
00:21:20,240 --> 00:21:22,240
parts of the organization

563
00:21:22,240 --> 00:21:24,960
miscommunication turning a blind eye to

564
00:21:24,960 --> 00:21:26,320
the ask

565
00:21:26,320 --> 00:21:28,880
can happen very often especially in a

566
00:21:28,880 --> 00:21:32,080
highly technical domain such as appsec

567
00:21:32,080 --> 00:21:34,159
so some understanding of what actually

568
00:21:34,159 --> 00:21:36,799
makes people tick and being aware of our

569
00:21:36,799 --> 00:21:39,520
own blind spots is very helpful to

570
00:21:39,520 --> 00:21:41,760
framing any program especially when

571
00:21:41,760 --> 00:21:44,159
mobilizing large numbers of people with

572
00:21:44,159 --> 00:21:46,799
varying experiences and expertise on the

573
00:21:46,799 --> 00:21:49,919
subject so it is easy and tempting to

574
00:21:49,919 --> 00:21:51,760
say use authority

575
00:21:51,760 --> 00:21:55,360
and power to push through our gender

576
00:21:55,360 --> 00:21:57,360
but that's not very collaborative and

577
00:21:57,360 --> 00:21:59,919
only invites a lot of resentment and

578
00:21:59,919 --> 00:22:02,960
successful programs are not defined

579
00:22:02,960 --> 00:22:05,200
solely or merely by whether people

580
00:22:05,200 --> 00:22:07,760
actually follow instructions to a team

581
00:22:07,760 --> 00:22:09,919
a program is successful

582
00:22:09,919 --> 00:22:12,159
really when people understand and

583
00:22:12,159 --> 00:22:14,640
resonate with the intent

584
00:22:14,640 --> 00:22:17,679
and can make an informed decision which

585
00:22:17,679 --> 00:22:20,080
actually stays true to the intent when

586
00:22:20,080 --> 00:22:22,559
any unexpected exceptions were to

587
00:22:22,559 --> 00:22:23,760
surface

588
00:22:23,760 --> 00:22:26,240
so i find these two concepts pretty

589
00:22:26,240 --> 00:22:27,919
encompassing when

590
00:22:27,919 --> 00:22:30,240
communicating with people

591
00:22:30,240 --> 00:22:32,960
so the first is the curse of knowledge

592
00:22:32,960 --> 00:22:36,720
so we are effectively not our user and

593
00:22:36,720 --> 00:22:39,760
borders this concept very well and the

594
00:22:39,760 --> 00:22:42,799
stereotype is that technical people kind

595
00:22:42,799 --> 00:22:45,120
of live in our own worlds and have very

596
00:22:45,120 --> 00:22:47,679
little empathy for the user and that we

597
00:22:47,679 --> 00:22:49,840
tend to make assumptions of how easy it

598
00:22:49,840 --> 00:22:53,039
is to perform a task if we were to do it

599
00:22:53,039 --> 00:22:55,760
ourselves what we may not realize is

600
00:22:55,760 --> 00:22:58,000
that our audience do not have the same

601
00:22:58,000 --> 00:23:00,400
depth of experience or expertise to

602
00:23:00,400 --> 00:23:03,200
actually see through the very same task

603
00:23:03,200 --> 00:23:05,760
so put yourself in the shoes of the user

604
00:23:05,760 --> 00:23:07,679
have conversations with them

605
00:23:07,679 --> 00:23:09,679
empathize with their challenges

606
00:23:09,679 --> 00:23:11,600
doing so actually minimizes the number

607
00:23:11,600 --> 00:23:14,400
of assumptions made and helps us avoid

608
00:23:14,400 --> 00:23:16,720
very unnecessary abstractions that may

609
00:23:16,720 --> 00:23:19,600
not be as prevalent as we think so on

610
00:23:19,600 --> 00:23:22,159
this note i have a related story to

611
00:23:22,159 --> 00:23:22,960
share

612
00:23:22,960 --> 00:23:26,080
so sca may be the universally accepted

613
00:23:26,080 --> 00:23:28,720
term for software composition analysis

614
00:23:28,720 --> 00:23:30,000
in our space

615
00:23:30,000 --> 00:23:32,960
and for gravity we make reference to it

616
00:23:32,960 --> 00:23:36,320
as sa in our own presentations of course

617
00:23:36,320 --> 00:23:38,480
after having set the context and defined

618
00:23:38,480 --> 00:23:40,159
it in full

619
00:23:40,159 --> 00:23:42,960
so after one of our presentations a

620
00:23:42,960 --> 00:23:45,360
project manager actually wrote to me

621
00:23:45,360 --> 00:23:48,880
sending me a static analysis report and

622
00:23:48,880 --> 00:23:52,480
asked if it qualified as a sca scan and

623
00:23:52,480 --> 00:23:54,880
turns out that in her world

624
00:23:54,880 --> 00:23:57,679
sca refers to fortify source code

625
00:23:57,679 --> 00:23:59,279
analysis

626
00:23:59,279 --> 00:24:02,400
because source code analysis is also sda

627
00:24:02,400 --> 00:24:04,720
and turns out that she wasn't alone

628
00:24:04,720 --> 00:24:07,679
because fortified was a very uh popular

629
00:24:07,679 --> 00:24:10,559
product within our organization

630
00:24:10,559 --> 00:24:13,039
others were also very similarly confused

631
00:24:13,039 --> 00:24:14,480
but didn't actually write to me to

632
00:24:14,480 --> 00:24:15,840
clarify

633
00:24:15,840 --> 00:24:16,960
and

634
00:24:16,960 --> 00:24:19,840
unfortunately the story doesn't end here

635
00:24:19,840 --> 00:24:22,159
our organization also had a separate

636
00:24:22,159 --> 00:24:24,480
process that agencies have to

637
00:24:24,480 --> 00:24:27,279
perform and undergo annually to declare

638
00:24:27,279 --> 00:24:29,440
these to the central authority

639
00:24:29,440 --> 00:24:31,520
or i.t systems and assets that they

640
00:24:31,520 --> 00:24:32,720
actually have

641
00:24:32,720 --> 00:24:34,880
and the process is actually called the

642
00:24:34,880 --> 00:24:37,760
system criticality assessment also

643
00:24:37,760 --> 00:24:40,720
acronymed as sca so the confusion

644
00:24:40,720 --> 00:24:42,480
doesn't just end there

645
00:24:42,480 --> 00:24:43,440
so

646
00:24:43,440 --> 00:24:45,360
the curse of knowledge is actually not

647
00:24:45,360 --> 00:24:48,559
as easy to break out of it as it seems

648
00:24:48,559 --> 00:24:50,480
so even when preparing

649
00:24:50,480 --> 00:24:51,679
this deck

650
00:24:51,679 --> 00:24:53,520
i struggled with it

651
00:24:53,520 --> 00:24:55,600
it may not be natural or second nature

652
00:24:55,600 --> 00:24:58,559
to us but some awareness and an effort

653
00:24:58,559 --> 00:25:00,159
to actually break out of it is better

654
00:25:00,159 --> 00:25:01,919
than none

655
00:25:01,919 --> 00:25:04,159
so the second concept is to actually

656
00:25:04,159 --> 00:25:07,039
appeal to one's self-interest so i

657
00:25:07,039 --> 00:25:08,960
explored this in depth on the previous

658
00:25:08,960 --> 00:25:10,880
slide when considering the tensions

659
00:25:10,880 --> 00:25:13,360
between people and process now some

660
00:25:13,360 --> 00:25:15,840
methods we used include case in point

661
00:25:15,840 --> 00:25:17,840
stories of known vulnerabilities that

662
00:25:17,840 --> 00:25:20,480
were exploited and to make it as close

663
00:25:20,480 --> 00:25:23,440
to home as possible so the stories were

664
00:25:23,440 --> 00:25:26,159
based on actual security incidents that

665
00:25:26,159 --> 00:25:28,480
happened to the unfortunate counterparts

666
00:25:28,480 --> 00:25:31,279
from other agencies and the ensuing pain

667
00:25:31,279 --> 00:25:33,440
that they had to go through after that

668
00:25:33,440 --> 00:25:35,679
and how our program is an investment

669
00:25:35,679 --> 00:25:37,360
that actually pays the difference for

670
00:25:37,360 --> 00:25:39,919
them down the road and the ability to

671
00:25:39,919 --> 00:25:42,640
invoke such feelings or emotions

672
00:25:42,640 --> 00:25:45,440
is a very powerful tools that makes

673
00:25:45,440 --> 00:25:48,240
ideas really stick

674
00:25:48,240 --> 00:25:51,279
so i took some time to share index the

675
00:25:51,279 --> 00:25:53,679
methodologies we used for planning our

676
00:25:53,679 --> 00:25:56,559
program it is time to show you how all

677
00:25:56,559 --> 00:25:58,720
of that was put into practice in the

678
00:25:58,720 --> 00:26:01,279
selection of the sca tool and in the

679
00:26:01,279 --> 00:26:03,600
design of the process

680
00:26:03,600 --> 00:26:06,080
so we evaluated two free and open source

681
00:26:06,080 --> 00:26:08,559
offerings and three commercial options

682
00:26:08,559 --> 00:26:11,360
for the open source options we evaluated

683
00:26:11,360 --> 00:26:13,440
the oax dependency check and logs

684
00:26:13,440 --> 00:26:16,720
dependency track so both are great tools

685
00:26:16,720 --> 00:26:19,679
but are fairly opinionated in themselves

686
00:26:19,679 --> 00:26:22,799
on how seas to be performed so i won't

687
00:26:22,799 --> 00:26:25,440
go into the details in this talk you can

688
00:26:25,440 --> 00:26:28,159
actually revisit steve springett's

689
00:26:28,159 --> 00:26:29,760
session from

690
00:26:29,760 --> 00:26:31,919
yesterday i believe and

691
00:26:31,919 --> 00:26:34,400
or actually find his excellent resources

692
00:26:34,400 --> 00:26:35,440
online

693
00:26:35,440 --> 00:26:37,520
that actually compares the

694
00:26:37,520 --> 00:26:38,400
software

695
00:26:38,400 --> 00:26:41,120
build material s-bomb method with the

696
00:26:41,120 --> 00:26:44,080
conventional sca that was dependency

697
00:26:44,080 --> 00:26:45,600
check uses

698
00:26:45,600 --> 00:26:48,159
so back to the topic itself

699
00:26:48,159 --> 00:26:50,840
the commercial options that were

700
00:26:50,840 --> 00:26:54,320
shortlisted uh from forrester wave based

701
00:26:54,320 --> 00:26:58,000
on the preliminary filter for solutions

702
00:26:58,000 --> 00:27:00,240
that actually support on-premise

703
00:27:00,240 --> 00:27:02,880
deployment because the policy in which

704
00:27:02,880 --> 00:27:05,279
we operate by does not actually allow us

705
00:27:05,279 --> 00:27:08,000
to consume software as a service based

706
00:27:08,000 --> 00:27:11,279
security solutions

707
00:27:11,440 --> 00:27:14,320
the success factors for the evaluation

708
00:27:14,320 --> 00:27:17,760
were performed or informed by our

709
00:27:17,760 --> 00:27:21,200
organizational and business needs and

710
00:27:21,200 --> 00:27:23,440
they seek to actually maximize the

711
00:27:23,440 --> 00:27:26,320
security impact and minimize resource

712
00:27:26,320 --> 00:27:28,880
usage as shared in the earlier slide on

713
00:27:28,880 --> 00:27:30,799
the considerations for centralized

714
00:27:30,799 --> 00:27:33,360
vulnerability management solutions so i

715
00:27:33,360 --> 00:27:35,840
will not go through all of these

716
00:27:35,840 --> 00:27:37,679
success factors though it is worth

717
00:27:37,679 --> 00:27:40,240
drawing your attention specifically to

718
00:27:40,240 --> 00:27:42,720
logistics as it influenced our

719
00:27:42,720 --> 00:27:44,960
architectural decisions and ultimately

720
00:27:44,960 --> 00:27:48,399
our choice of the sa tool later so i

721
00:27:48,399 --> 00:27:50,960
hinted at this when i looking at people

722
00:27:50,960 --> 00:27:52,799
process and technology methodology

723
00:27:52,799 --> 00:27:54,159
earlier

724
00:27:54,159 --> 00:27:56,559
when i suggested how the process

725
00:27:56,559 --> 00:27:59,120
actually played a very critical role in

726
00:27:59,120 --> 00:28:01,600
the success of our program

727
00:28:01,600 --> 00:28:03,919
and logistics is important as we need

728
00:28:03,919 --> 00:28:05,279
the ability

729
00:28:05,279 --> 00:28:07,279
for the vendor to actually perform the

730
00:28:07,279 --> 00:28:08,240
scan

731
00:28:08,240 --> 00:28:10,799
without connecting to the central server

732
00:28:10,799 --> 00:28:13,039
the vendor backyard do not have access

733
00:28:13,039 --> 00:28:15,360
to the secure government environment

734
00:28:15,360 --> 00:28:18,080
sca server is to be hosted with various

735
00:28:18,080 --> 00:28:19,039
ones

736
00:28:19,039 --> 00:28:20,799
and we also have a preference for the

737
00:28:20,799 --> 00:28:23,039
reports to actually be self-contained

738
00:28:23,039 --> 00:28:25,360
with sufficient detail for remedial

739
00:28:25,360 --> 00:28:27,760
action by the vendor in a highly

740
00:28:27,760 --> 00:28:31,039
portable format for sharing between the

741
00:28:31,039 --> 00:28:33,039
vendor and the agency

742
00:28:33,039 --> 00:28:34,399
and

743
00:28:34,399 --> 00:28:36,640
that makes actually a web portal access

744
00:28:36,640 --> 00:28:39,279
highly attractive but it is unlikely to

745
00:28:39,279 --> 00:28:42,080
actually provide

746
00:28:42,240 --> 00:28:45,440
the access that is uh needed for our

747
00:28:45,440 --> 00:28:48,480
vendors because of the secured

748
00:28:48,480 --> 00:28:50,799
government environment and

749
00:28:50,799 --> 00:28:52,480
provisioning the exercise actually adds

750
00:28:52,480 --> 00:28:55,520
a lot of overhead uh to our process

751
00:28:55,520 --> 00:28:58,520
significantly

752
00:29:00,080 --> 00:29:02,799
and we actually performed the evaluation

753
00:29:02,799 --> 00:29:04,720
on all the five options which is

754
00:29:04,720 --> 00:29:06,399
summarized into this

755
00:29:06,399 --> 00:29:07,760
matrix here

756
00:29:07,760 --> 00:29:09,840
and one of the commercial options

757
00:29:09,840 --> 00:29:11,760
checked all the boxes

758
00:29:11,760 --> 00:29:14,880
for our defined success factors and we

759
00:29:14,880 --> 00:29:17,440
proceeded to actually design an

760
00:29:17,440 --> 00:29:19,360
operational architecture

761
00:29:19,360 --> 00:29:22,720
for it which is here and our initial

762
00:29:22,720 --> 00:29:23,840
design

763
00:29:23,840 --> 00:29:25,840
based on this commercial option actually

764
00:29:25,840 --> 00:29:28,720
require the vendor to actually generate

765
00:29:28,720 --> 00:29:31,600
s-bomb for submission to the scs server

766
00:29:31,600 --> 00:29:33,840
which is to be hosted in the government

767
00:29:33,840 --> 00:29:35,279
hosting environment

768
00:29:35,279 --> 00:29:37,200
and the process of uploading the s-bomb

769
00:29:37,200 --> 00:29:38,840
and downloading the human-readable

770
00:29:38,840 --> 00:29:41,840
report from the scs server actually

771
00:29:41,840 --> 00:29:44,000
requires the two environments

772
00:29:44,000 --> 00:29:46,480
to be bridged manually by the various

773
00:29:46,480 --> 00:29:49,360
project teams who will literally

774
00:29:49,360 --> 00:29:52,159
hand off the s-bomb and reports

775
00:29:52,159 --> 00:29:55,120
over email very lightly and

776
00:29:55,120 --> 00:29:56,960
it is apparent that doing so actually

777
00:29:56,960 --> 00:29:59,520
gives rise to very significant manpower

778
00:29:59,520 --> 00:30:02,399
overhead and round-trip delay

779
00:30:02,399 --> 00:30:04,640
the vendor will have to wait for the

780
00:30:04,640 --> 00:30:07,840
project team to upload the s-bomb to the

781
00:30:07,840 --> 00:30:10,559
sda server have it processed by the sda

782
00:30:10,559 --> 00:30:13,200
server before downloading and returning

783
00:30:13,200 --> 00:30:15,840
the human readable reports to the vendor

784
00:30:15,840 --> 00:30:17,600
for remediation

785
00:30:17,600 --> 00:30:19,200
and it would be

786
00:30:19,200 --> 00:30:21,760
a lot more ideal if the scan performed

787
00:30:21,760 --> 00:30:24,480
by the vendor actually yield actionable

788
00:30:24,480 --> 00:30:26,799
results immediately

789
00:30:26,799 --> 00:30:29,200
the only option which provides such

790
00:30:29,200 --> 00:30:31,600
capability was really

791
00:30:31,600 --> 00:30:34,240
what's dependency check

792
00:30:34,240 --> 00:30:36,960
and assuming we were to use our

793
00:30:36,960 --> 00:30:38,480
dependency check

794
00:30:38,480 --> 00:30:41,200
the vendor will have immediate access to

795
00:30:41,200 --> 00:30:44,000
the actionable results in the form of a

796
00:30:44,000 --> 00:30:45,279
html

797
00:30:45,279 --> 00:30:47,679
report that's generated by the tool

798
00:30:47,679 --> 00:30:48,840
directly

799
00:30:48,840 --> 00:30:51,679
however what's dependency check do not

800
00:30:51,679 --> 00:30:54,480
provide a central server for

801
00:30:54,480 --> 00:30:57,360
that enables the aggregation of uh the

802
00:30:57,360 --> 00:30:59,919
scan results across different projects

803
00:30:59,919 --> 00:31:02,559
or for tracking the vulnerability trends

804
00:31:02,559 --> 00:31:06,320
for each project and in our case uh it

805
00:31:06,320 --> 00:31:09,600
is determined that central oversight is

806
00:31:09,600 --> 00:31:12,159
important because when exploring the

807
00:31:12,159 --> 00:31:15,200
process faster it is determined that if

808
00:31:15,200 --> 00:31:18,399
we can't measure it we can't improve it

809
00:31:18,399 --> 00:31:20,640
because based on our past experiences we

810
00:31:20,640 --> 00:31:21,519
know

811
00:31:21,519 --> 00:31:23,760
as a matter of fact that we constantly

812
00:31:23,760 --> 00:31:25,519
leave the vendor and the project teams

813
00:31:25,519 --> 00:31:28,799
to see true remediations

814
00:31:28,799 --> 00:31:31,200
because it will not be done and that we

815
00:31:31,200 --> 00:31:32,559
need a handle

816
00:31:32,559 --> 00:31:34,799
of the problem across the board

817
00:31:34,799 --> 00:31:36,960
so the ideal solution would actually

818
00:31:36,960 --> 00:31:39,200
allow us to capture the results

819
00:31:39,200 --> 00:31:42,080
from overwatch dependency check

820
00:31:42,080 --> 00:31:43,440
centrally

821
00:31:43,440 --> 00:31:45,760
and that is what we did

822
00:31:45,760 --> 00:31:46,480
we

823
00:31:46,480 --> 00:31:50,000
devised a process to

824
00:31:50,000 --> 00:31:52,320
provide the vendor with simple and

825
00:31:52,320 --> 00:31:53,679
complete

826
00:31:53,679 --> 00:31:56,000
instructions on how to actually obtain

827
00:31:56,000 --> 00:31:58,240
logs dependency checked and how to

828
00:31:58,240 --> 00:32:00,559
actually perform a scan and obtain the

829
00:32:00,559 --> 00:32:01,760
results

830
00:32:01,760 --> 00:32:03,039
after which

831
00:32:03,039 --> 00:32:05,840
the vendor would hand off the report to

832
00:32:05,840 --> 00:32:08,720
the respective project teams

833
00:32:08,720 --> 00:32:10,000
who would then

834
00:32:10,000 --> 00:32:12,880
submit the report via a structured form

835
00:32:12,880 --> 00:32:15,919
to an intranet portal that we published

836
00:32:15,919 --> 00:32:19,760
on an existing sharepoint system

837
00:32:19,760 --> 00:32:20,559
and

838
00:32:20,559 --> 00:32:22,640
our team will review and approve the

839
00:32:22,640 --> 00:32:25,600
submission and doing so actually allowed

840
00:32:25,600 --> 00:32:27,600
us to better understand

841
00:32:27,600 --> 00:32:29,919
if there were any unexpected exceptions

842
00:32:29,919 --> 00:32:31,919
that occurred during the scans and

843
00:32:31,919 --> 00:32:34,559
anything that we were not aware of of

844
00:32:34,559 --> 00:32:36,480
the behavior of what's dependency check

845
00:32:36,480 --> 00:32:39,519
or given the vendor environment

846
00:32:39,519 --> 00:32:40,640
and

847
00:32:40,640 --> 00:32:44,399
upon our uh the approval uh after a

848
00:32:44,399 --> 00:32:47,679
review the records in sharepoint is

849
00:32:47,679 --> 00:32:48,799
updated

850
00:32:48,799 --> 00:32:51,840
which can then be monitored in real time

851
00:32:51,840 --> 00:32:54,480
via an excel dashboard that draws

852
00:32:54,480 --> 00:32:56,559
data from sharepoint

853
00:32:56,559 --> 00:33:00,559
so this solution solved half the problem

854
00:33:00,559 --> 00:33:03,120
it enables us to collate the results

855
00:33:03,120 --> 00:33:06,240
essentially so we have a handle of which

856
00:33:06,240 --> 00:33:08,640
projects actually performed the scans

857
00:33:08,640 --> 00:33:10,799
and which ones didn't

858
00:33:10,799 --> 00:33:13,200
however there's no analytic capabilities

859
00:33:13,200 --> 00:33:14,960
on the vulnerabilities

860
00:33:14,960 --> 00:33:17,440
we weren't able to aggregate or train to

861
00:33:17,440 --> 00:33:20,320
discover issues within or across

862
00:33:20,320 --> 00:33:22,840
different projects that would be most

863
00:33:22,840 --> 00:33:24,480
ideal

864
00:33:24,480 --> 00:33:25,679
so

865
00:33:25,679 --> 00:33:27,440
we didn't leave it as that we actually

866
00:33:27,440 --> 00:33:29,919
iterated our architecture further

867
00:33:29,919 --> 00:33:32,240
so the first few steps are fairly

868
00:33:32,240 --> 00:33:34,159
similar to before

869
00:33:34,159 --> 00:33:37,760
the difference is that upon the review

870
00:33:37,760 --> 00:33:39,919
and approval of the reports

871
00:33:39,919 --> 00:33:43,200
the oax dependency check report is fed

872
00:33:43,200 --> 00:33:46,559
into a custom python automation system

873
00:33:46,559 --> 00:33:49,919
that interprets the report

874
00:33:49,919 --> 00:33:51,279
and stores the individual

875
00:33:51,279 --> 00:33:52,480
vulnerabilities

876
00:33:52,480 --> 00:33:54,480
into a data warehouse

877
00:33:54,480 --> 00:33:55,919
before

878
00:33:55,919 --> 00:33:57,440
updating

879
00:33:57,440 --> 00:33:59,120
sharepoint records with the

880
00:33:59,120 --> 00:34:01,039
vulnerability counts

881
00:34:01,039 --> 00:34:03,679
and emailing the notification

882
00:34:03,679 --> 00:34:07,919
to the agency on the submission status

883
00:34:07,919 --> 00:34:09,199
and

884
00:34:09,199 --> 00:34:11,359
that storage in the data warehouse

885
00:34:11,359 --> 00:34:15,199
actually allows us to query via

886
00:34:15,199 --> 00:34:17,599
different analytic tools

887
00:34:17,599 --> 00:34:20,560
for insights of the vulnerabilities

888
00:34:20,560 --> 00:34:21,760
including

889
00:34:21,760 --> 00:34:25,760
microsoft power bi and anaconda and the

890
00:34:25,760 --> 00:34:28,719
architecture has evolved significantly

891
00:34:28,719 --> 00:34:30,639
and is sufficient in achieving our

892
00:34:30,639 --> 00:34:33,760
objective of identifying the vulnerable

893
00:34:33,760 --> 00:34:36,079
third-party libraries and driving

894
00:34:36,079 --> 00:34:38,879
informed and action across multiple

895
00:34:38,879 --> 00:34:40,159
agencies

896
00:34:40,159 --> 00:34:42,639
through the use of analytics

897
00:34:42,639 --> 00:34:44,639
however it's not quite the end of the

898
00:34:44,639 --> 00:34:46,399
story yet

899
00:34:46,399 --> 00:34:49,280
if possible we would very much like to

900
00:34:49,280 --> 00:34:52,000
consider monitoring for emerging

901
00:34:52,000 --> 00:34:54,960
vulnerabilities and to actually

902
00:34:54,960 --> 00:34:58,880
notify the vendors or the project teams

903
00:34:58,880 --> 00:35:01,599
with multiple components

904
00:35:01,599 --> 00:35:03,680
with multiple vulnerable components as

905
00:35:03,680 --> 00:35:06,560
new vulnerabilities actually emerge this

906
00:35:06,560 --> 00:35:08,960
will actually reduce the exposure to

907
00:35:08,960 --> 00:35:11,920
known vulnerabilities further as even if

908
00:35:11,920 --> 00:35:14,480
the vendor actually fails to perform

909
00:35:14,480 --> 00:35:16,800
routine scans with what's dependency

910
00:35:16,800 --> 00:35:18,240
check that

911
00:35:18,240 --> 00:35:21,359
our system will use the last known

912
00:35:21,359 --> 00:35:23,839
build materials from the submitted

913
00:35:23,839 --> 00:35:26,160
dependency check report to actually

914
00:35:26,160 --> 00:35:28,560
ascertain if any known vulnerabilities

915
00:35:28,560 --> 00:35:32,480
exist within the systems

916
00:35:33,680 --> 00:35:37,359
so and that is what we are working on

917
00:35:37,359 --> 00:35:39,280
towards right now which is the work in

918
00:35:39,280 --> 00:35:41,280
progress system

919
00:35:41,280 --> 00:35:43,359
so instead of storing the individual

920
00:35:43,359 --> 00:35:46,079
vulnerabilities that is extracted from

921
00:35:46,079 --> 00:35:48,400
what's dependency check report into a

922
00:35:48,400 --> 00:35:51,359
data warehouse we store the components

923
00:35:51,359 --> 00:35:55,760
in use into our dependency track instead

924
00:35:55,760 --> 00:35:57,200
and

925
00:35:57,200 --> 00:36:00,000
this would allow us to actually uh

926
00:36:00,000 --> 00:36:02,240
continually retrieve from the

927
00:36:02,240 --> 00:36:05,359
vulnerability feeds uh from mvd and

928
00:36:05,359 --> 00:36:07,839
various sources daily uh by os

929
00:36:07,839 --> 00:36:10,320
dependency track to identify

930
00:36:10,320 --> 00:36:12,880
new emerging vulnerabilities from the

931
00:36:12,880 --> 00:36:15,200
use of existing components

932
00:36:15,200 --> 00:36:17,680
and this also unlocks the

933
00:36:17,680 --> 00:36:20,000
web portal analytics that is built into

934
00:36:20,000 --> 00:36:22,240
what's dependency track

935
00:36:22,240 --> 00:36:23,040
for

936
00:36:23,040 --> 00:36:27,839
uh data analytics and insights

937
00:36:28,880 --> 00:36:32,160
so revisiting our initial

938
00:36:32,160 --> 00:36:34,000
evaluation metrics

939
00:36:34,000 --> 00:36:36,640
we have augmented the capabilities of

940
00:36:36,640 --> 00:36:39,359
both oauth's dependency check and was

941
00:36:39,359 --> 00:36:42,480
dependency track to actually achieve our

942
00:36:42,480 --> 00:36:44,320
intended objectives

943
00:36:44,320 --> 00:36:47,280
and our solution may appear a little

944
00:36:47,280 --> 00:36:49,680
unorthodox to some but it worked

945
00:36:49,680 --> 00:36:51,920
extremely well in driving the remedial

946
00:36:51,920 --> 00:36:54,560
action across 600 applications that

947
00:36:54,560 --> 00:36:57,520
would otherwise not have happened within

948
00:36:57,520 --> 00:36:59,599
60 days

949
00:36:59,599 --> 00:37:00,560
and

950
00:37:00,560 --> 00:37:04,400
our journey was not free from unexpected

951
00:37:04,400 --> 00:37:06,960
challenges and i'll spend the rest of

952
00:37:06,960 --> 00:37:10,079
the time to show you some of them

953
00:37:10,079 --> 00:37:12,480
most of them actually pertain to the

954
00:37:12,480 --> 00:37:14,960
aftermath of the scan such as with the

955
00:37:14,960 --> 00:37:16,800
interpretation of the

956
00:37:16,800 --> 00:37:19,440
awards dependency check reports some of

957
00:37:19,440 --> 00:37:22,160
which we did not expect given that there

958
00:37:22,160 --> 00:37:25,680
is a lot of variance in 600 applications

959
00:37:25,680 --> 00:37:28,240
that were scanned across very different

960
00:37:28,240 --> 00:37:31,040
environments

961
00:37:31,440 --> 00:37:32,160
so

962
00:37:32,160 --> 00:37:34,440
the scans of quite a few

963
00:37:34,440 --> 00:37:37,520
asp.net projects actually yielded very

964
00:37:37,520 --> 00:37:40,160
consistent false positives

965
00:37:40,160 --> 00:37:43,839
through this set of dependencies and

966
00:37:43,839 --> 00:37:46,240
this didn't challenge vendors who

967
00:37:46,240 --> 00:37:49,280
were more astute and able to interpret

968
00:37:49,280 --> 00:37:51,040
the findings as

969
00:37:51,040 --> 00:37:53,920
as false positives very competently

970
00:37:53,920 --> 00:37:56,000
though we still received a number of

971
00:37:56,000 --> 00:37:59,760
support queries from our agencies and

972
00:37:59,760 --> 00:38:02,400
when our team actually investigated the

973
00:38:02,400 --> 00:38:04,880
what's dependency check reports

974
00:38:04,880 --> 00:38:07,760
we saw two vulnerabilities we

975
00:38:07,760 --> 00:38:11,200
repeatedly flagged for these components

976
00:38:11,200 --> 00:38:13,280
so notice how

977
00:38:13,280 --> 00:38:16,720
generalized the cpes

978
00:38:16,720 --> 00:38:19,280
for these vulnerabilities are and for

979
00:38:19,280 --> 00:38:21,520
those who are unfamiliar with the cpe

980
00:38:21,520 --> 00:38:24,079
convention it is actually an official

981
00:38:24,079 --> 00:38:25,680
structuring scheme

982
00:38:25,680 --> 00:38:28,960
uh by nist that identifies software

983
00:38:28,960 --> 00:38:30,880
packages and they are corresponding

984
00:38:30,880 --> 00:38:34,480
versions also known as the uh common

985
00:38:34,480 --> 00:38:36,160
platform enumeration

986
00:38:36,160 --> 00:38:39,200
and cves as we more commonly know

987
00:38:39,200 --> 00:38:42,400
are tagged to cpes which actually

988
00:38:42,400 --> 00:38:45,599
enabled a machine accessible way to

989
00:38:45,599 --> 00:38:47,359
determine if a particular piece of

990
00:38:47,359 --> 00:38:49,440
software or package have known

991
00:38:49,440 --> 00:38:52,160
vulnerabilities and

992
00:38:52,160 --> 00:38:54,240
based on this in my opinion lodge

993
00:38:54,240 --> 00:38:56,320
dependency check actually did what it's

994
00:38:56,320 --> 00:38:59,680
supposed to be doing because by design

995
00:38:59,680 --> 00:39:02,560
it trusted the cves from nvd's

996
00:39:02,560 --> 00:39:04,800
vulnerability feed which turned us out

997
00:39:04,800 --> 00:39:08,640
to be too generalized

998
00:39:08,960 --> 00:39:12,079
and although sca as i mentioned earlier

999
00:39:12,079 --> 00:39:14,960
have very high signal noise ratio

1000
00:39:14,960 --> 00:39:16,960
false positives for misidentification

1001
00:39:16,960 --> 00:39:19,680
still do occur especially

1002
00:39:19,680 --> 00:39:22,079
for evidence-based identification

1003
00:39:22,079 --> 00:39:24,480
methods used in

1004
00:39:24,480 --> 00:39:27,040
oauth dependency check though in much

1005
00:39:27,040 --> 00:39:28,480
smaller numbers

1006
00:39:28,480 --> 00:39:32,240
and this is also where the s-bomb method

1007
00:39:32,240 --> 00:39:34,760
uh shines through as it's less prone to

1008
00:39:34,760 --> 00:39:37,520
misidentification that does not stem

1009
00:39:37,520 --> 00:39:40,960
from the ndd as with this case so i

1010
00:39:40,960 --> 00:39:42,640
strongly encourage you to take a look at

1011
00:39:42,640 --> 00:39:46,480
steve steve's talk from uh yesterday on

1012
00:39:46,480 --> 00:39:48,000
cyclone dx

1013
00:39:48,000 --> 00:39:50,880
cyclone dx is a s-perm format which was

1014
00:39:50,880 --> 00:39:52,079
promoted

1015
00:39:52,079 --> 00:39:53,599
to become a

1016
00:39:53,599 --> 00:39:56,480
flagship project of ops in june this

1017
00:39:56,480 --> 00:39:58,800
year

1018
00:39:59,440 --> 00:40:00,400
so

1019
00:40:00,400 --> 00:40:02,720
since oauth dependency

1020
00:40:02,720 --> 00:40:05,440
check scans are decentralized we have

1021
00:40:05,440 --> 00:40:06,720
effectively

1022
00:40:06,720 --> 00:40:09,760
very limited means to suppress such

1023
00:40:09,760 --> 00:40:12,480
issues on behalf of our vendors and the

1024
00:40:12,480 --> 00:40:16,000
project teams centrally in fact the the

1025
00:40:16,000 --> 00:40:18,160
common suppressions uh for oax

1026
00:40:18,160 --> 00:40:21,119
dependency check are baked directly into

1027
00:40:21,119 --> 00:40:24,480
the tool itself and actually require

1028
00:40:24,480 --> 00:40:27,280
the lead developer jeremy long of os

1029
00:40:27,280 --> 00:40:29,280
dependency check to actually compile and

1030
00:40:29,280 --> 00:40:30,240
publish

1031
00:40:30,240 --> 00:40:31,839
a new version of the tool to actually

1032
00:40:31,839 --> 00:40:33,280
reflect any

1033
00:40:33,280 --> 00:40:35,200
new suppressions from component

1034
00:40:35,200 --> 00:40:37,440
misidentification

1035
00:40:37,440 --> 00:40:39,599
suppressions by the user during the time

1036
00:40:39,599 --> 00:40:42,079
of scan is actually provided to os

1037
00:40:42,079 --> 00:40:44,720
dependency check in a similar

1038
00:40:44,720 --> 00:40:46,560
xml format which is actually

1039
00:40:46,560 --> 00:40:49,760
sufficiently convenient for most cases

1040
00:40:49,760 --> 00:40:51,760
as the report actually

1041
00:40:51,760 --> 00:40:53,680
provides a helpful button here as you

1042
00:40:53,680 --> 00:40:55,760
can see the suppress button which if

1043
00:40:55,760 --> 00:40:58,560
they click would generate a little xml

1044
00:40:58,560 --> 00:41:01,040
snippet which can then be incorporated

1045
00:41:01,040 --> 00:41:03,599
into a suppression file that can be

1046
00:41:03,599 --> 00:41:04,800
checked in

1047
00:41:04,800 --> 00:41:06,720
to the code repository of the project

1048
00:41:06,720 --> 00:41:08,640
alongside with the source code

1049
00:41:08,640 --> 00:41:12,079
and it is ideal if the suppressions were

1050
00:41:12,079 --> 00:41:14,240
built in a more accessible manner to a

1051
00:41:14,240 --> 00:41:15,599
lay person

1052
00:41:15,599 --> 00:41:18,240
such as our project teams though we are

1053
00:41:18,240 --> 00:41:19,920
also very mindful that the whole

1054
00:41:19,920 --> 00:41:22,079
dependency check is designed as a

1055
00:41:22,079 --> 00:41:23,599
standalone tool

1056
00:41:23,599 --> 00:41:25,119
and there are actually practical and

1057
00:41:25,119 --> 00:41:28,400
logistical constraints to consider so

1058
00:41:28,400 --> 00:41:29,839
for our case

1059
00:41:29,839 --> 00:41:31,760
we rely on the vendor developers to

1060
00:41:31,760 --> 00:41:33,760
actually perform the suppressions and

1061
00:41:33,760 --> 00:41:34,720
the

1062
00:41:34,720 --> 00:41:37,040
only related complaint that we have

1063
00:41:37,040 --> 00:41:39,520
really come across was when a large

1064
00:41:39,520 --> 00:41:41,520
number of issues actually have to be

1065
00:41:41,520 --> 00:41:42,640
suppressed

1066
00:41:42,640 --> 00:41:44,720
and the means by which the suppression

1067
00:41:44,720 --> 00:41:46,640
file is put together doesn't actually

1068
00:41:46,640 --> 00:41:49,119
scale very well for a large number of

1069
00:41:49,119 --> 00:41:50,960
suppressions and

1070
00:41:50,960 --> 00:41:53,119
expressions are typically

1071
00:41:53,119 --> 00:41:55,119
once of activity

1072
00:41:55,119 --> 00:41:57,599
and projects with very large numbers of

1073
00:41:57,599 --> 00:42:00,560
suppressions are few and far between so

1074
00:42:00,560 --> 00:42:02,480
this problem is really not as

1075
00:42:02,480 --> 00:42:06,240
significant as it seems

1076
00:42:07,920 --> 00:42:10,720
so another project team also reached out

1077
00:42:10,720 --> 00:42:14,720
to us very recently on a case where

1078
00:42:14,720 --> 00:42:17,119
low dash was actually flagged as

1079
00:42:17,119 --> 00:42:19,760
vulnerable by dependency check

1080
00:42:19,760 --> 00:42:22,319
and that no patch was actually available

1081
00:42:22,319 --> 00:42:25,040
for this particular vulnerability and

1082
00:42:25,040 --> 00:42:26,400
this was quite interesting so we

1083
00:42:26,400 --> 00:42:28,640
actually investigated the case a lot

1084
00:42:28,640 --> 00:42:32,079
more in-depth and found that the cbe was

1085
00:42:32,079 --> 00:42:34,480
actually incorrectly issued for a

1086
00:42:34,480 --> 00:42:36,880
behavior of the library which turns out

1087
00:42:36,880 --> 00:42:39,520
to actually be expected

1088
00:42:39,520 --> 00:42:40,560
the

1089
00:42:40,560 --> 00:42:43,119
reporter did not perform responsible

1090
00:42:43,119 --> 00:42:44,960
disclosure on the issue

1091
00:42:44,960 --> 00:42:47,839
with the developers for lowdash

1092
00:42:47,839 --> 00:42:49,760
before actually requesting for a cbe

1093
00:42:49,760 --> 00:42:52,480
assignment and this actually resulted in

1094
00:42:52,480 --> 00:42:54,400
a lot of sda tools flagging the

1095
00:42:54,400 --> 00:42:55,760
component

1096
00:42:55,760 --> 00:42:58,480
as vulnerable when it's actually not

1097
00:42:58,480 --> 00:42:59,280
and

1098
00:42:59,280 --> 00:43:01,200
the issue was actually being discussed

1099
00:43:01,200 --> 00:43:04,800
very extensively on low dash's github

1100
00:43:04,800 --> 00:43:07,599
itself but the damage is actually

1101
00:43:07,599 --> 00:43:09,200
already done because the rainiest

1102
00:43:09,200 --> 00:43:11,520
vulnerability has to be suppressed

1103
00:43:11,520 --> 00:43:13,119
manually for

1104
00:43:13,119 --> 00:43:15,040
users of sda tools

1105
00:43:15,040 --> 00:43:17,200
all over the world that feed directly

1106
00:43:17,200 --> 00:43:20,160
from the mvd vulnerability feeds and at

1107
00:43:20,160 --> 00:43:22,079
least until the cde assignment is

1108
00:43:22,079 --> 00:43:24,079
revoked so you can see the summary has

1109
00:43:24,079 --> 00:43:25,760
been updated but the cd still lives

1110
00:43:25,760 --> 00:43:29,040
within the vulnerability fees

1111
00:43:29,040 --> 00:43:32,480
and interestingly we uh also took some

1112
00:43:32,480 --> 00:43:33,920
time out to actually review the

1113
00:43:33,920 --> 00:43:35,920
commercial seo solutions whether they

1114
00:43:35,920 --> 00:43:38,640
would have been able to address this on

1115
00:43:38,640 --> 00:43:41,760
behalf of the user and turns out that

1116
00:43:41,760 --> 00:43:43,119
only one

1117
00:43:43,119 --> 00:43:44,960
of them made any attempt to actually

1118
00:43:44,960 --> 00:43:46,640
suppress this vulnerability for its

1119
00:43:46,640 --> 00:43:48,160
users

1120
00:43:48,160 --> 00:43:49,920
so it would have been no not very much

1121
00:43:49,920 --> 00:43:51,520
different if we were on a commercial

1122
00:43:51,520 --> 00:43:54,480
solution that fed from a

1123
00:43:54,480 --> 00:43:57,599
vulnerability feed that is managed by

1124
00:43:57,599 --> 00:43:58,960
the

1125
00:43:58,960 --> 00:44:01,839
product principles

1126
00:44:02,880 --> 00:44:04,800
and

1127
00:44:04,800 --> 00:44:07,440
although we did not advise our project

1128
00:44:07,440 --> 00:44:09,520
teams to scan

1129
00:44:09,520 --> 00:44:12,000
based products or commercial products or

1130
00:44:12,000 --> 00:44:14,880
cost products as we would call it

1131
00:44:14,880 --> 00:44:17,280
some of them did nonetheless

1132
00:44:17,280 --> 00:44:20,480
our advice to not actually scan these

1133
00:44:20,480 --> 00:44:22,319
types of products will stamp out from

1134
00:44:22,319 --> 00:44:25,119
the limited influence

1135
00:44:25,119 --> 00:44:27,760
over the components in use within the

1136
00:44:27,760 --> 00:44:29,839
base products and that the base products

1137
00:44:29,839 --> 00:44:30,960
itself

1138
00:44:30,960 --> 00:44:32,960
should have patched for

1139
00:44:32,960 --> 00:44:33,760
and

1140
00:44:33,760 --> 00:44:35,599
as long as you apply the patches of the

1141
00:44:35,599 --> 00:44:37,599
base products is sufficient but

1142
00:44:37,599 --> 00:44:39,920
nonetheless for prudent stick if any

1143
00:44:39,920 --> 00:44:42,240
vulnerable components were discovered in

1144
00:44:42,240 --> 00:44:45,920
any base product our advice is for our

1145
00:44:45,920 --> 00:44:47,839
project teams to actually take the issue

1146
00:44:47,839 --> 00:44:50,400
up with the product principle who from

1147
00:44:50,400 --> 00:44:53,040
our experience so far either provide an

1148
00:44:53,040 --> 00:44:55,760
attestation of non-exploitability

1149
00:44:55,760 --> 00:44:58,480
given how the components are being used

1150
00:44:58,480 --> 00:45:00,720
within their products or some form of

1151
00:45:00,720 --> 00:45:02,319
configuration that would actually

1152
00:45:02,319 --> 00:45:03,359
mitigate

1153
00:45:03,359 --> 00:45:08,319
the exploitation of the vulnerabilities

1154
00:45:08,319 --> 00:45:09,280
and

1155
00:45:09,280 --> 00:45:10,960
this uh

1156
00:45:10,960 --> 00:45:13,359
slide it is actually quite unfortunate

1157
00:45:13,359 --> 00:45:15,440
that some vendors choose to challenge

1158
00:45:15,440 --> 00:45:16,400
the

1159
00:45:16,400 --> 00:45:18,560
discovered vulnerabilities by uh

1160
00:45:18,560 --> 00:45:20,560
dependency check and

1161
00:45:20,560 --> 00:45:23,359
uh they take on a very hard stance that

1162
00:45:23,359 --> 00:45:25,280
gov tech actually has to prove to them

1163
00:45:25,280 --> 00:45:27,599
that the vulnerability is exploitable

1164
00:45:27,599 --> 00:45:29,040
before they actually perform any

1165
00:45:29,040 --> 00:45:30,800
remedial action

1166
00:45:30,800 --> 00:45:33,359
and in such cases we default to our

1167
00:45:33,359 --> 00:45:35,839
policies a position on patching or known

1168
00:45:35,839 --> 00:45:37,520
vulnerabilities

1169
00:45:37,520 --> 00:45:39,920
which should have informed the tender

1170
00:45:39,920 --> 00:45:42,000
and the corresponding contract causes

1171
00:45:42,000 --> 00:45:44,640
which the vendor is to abide by and

1172
00:45:44,640 --> 00:45:47,040
to also advise our project teams to step

1173
00:45:47,040 --> 00:45:48,960
up on the third party

1174
00:45:48,960 --> 00:45:51,760
management and governance processes

1175
00:45:51,760 --> 00:45:54,319
our project teams have to learn to see

1176
00:45:54,319 --> 00:45:57,760
beyond just the visible requirements of

1177
00:45:57,760 --> 00:45:59,200
the system

1178
00:45:59,200 --> 00:46:02,160
and into the invisible requirements when

1179
00:46:02,160 --> 00:46:05,440
managing the delivery of their vendors

1180
00:46:05,440 --> 00:46:07,599
system owners can choose to set the

1181
00:46:07,599 --> 00:46:10,720
risks posed by the vulnerabilities or

1182
00:46:10,720 --> 00:46:12,880
what we call right classify the risks

1183
00:46:12,880 --> 00:46:14,960
based on the mitigation controls that

1184
00:46:14,960 --> 00:46:16,560
are in place

1185
00:46:16,560 --> 00:46:19,359
and the most common uh that we see would

1186
00:46:19,359 --> 00:46:21,440
be to actually literally write off risks

1187
00:46:21,440 --> 00:46:24,000
for systems that are actually uh hosted

1188
00:46:24,000 --> 00:46:25,760
on the intranet and not internet

1189
00:46:25,760 --> 00:46:27,520
accessible which is actually a form of

1190
00:46:27,520 --> 00:46:29,520
security through obscurity

1191
00:46:29,520 --> 00:46:32,160
and violates the spirit of defense and

1192
00:46:32,160 --> 00:46:34,960
deaths which we strongly advise against

1193
00:46:34,960 --> 00:46:36,400
doing so

1194
00:46:36,400 --> 00:46:39,200
but however the risk tolerance varies

1195
00:46:39,200 --> 00:46:41,920
across different parts of organization

1196
00:46:41,920 --> 00:46:44,800
and depending on the customer that is

1197
00:46:44,800 --> 00:46:46,640
being served

1198
00:46:46,640 --> 00:46:48,800
how risks are being treated is actually

1199
00:46:48,800 --> 00:46:51,359
a function of how much risk the customer

1200
00:46:51,359 --> 00:46:53,119
is willing to take

1201
00:46:53,119 --> 00:46:55,200
and in our opinion

1202
00:46:55,200 --> 00:46:57,440
it is almost always

1203
00:46:57,440 --> 00:46:59,599
less effort to actually patch

1204
00:46:59,599 --> 00:47:02,400
for known vulnerability than to prove uh

1205
00:47:02,400 --> 00:47:04,800
non-exploitability

1206
00:47:04,800 --> 00:47:07,839
i i believe this holds true for most uh

1207
00:47:07,839 --> 00:47:11,119
almost all cases even for projects of

1208
00:47:11,119 --> 00:47:12,880
significant size

1209
00:47:12,880 --> 00:47:13,760
and

1210
00:47:13,760 --> 00:47:16,240
clearing a backlog of

1211
00:47:16,240 --> 00:47:18,000
unpatched debt is actually a very

1212
00:47:18,000 --> 00:47:19,119
painful

1213
00:47:19,119 --> 00:47:21,440
one-stop process but reaps very

1214
00:47:21,440 --> 00:47:24,480
significant benefits down the road

1215
00:47:24,480 --> 00:47:26,960
in an ever-changing and ever-evolving

1216
00:47:26,960 --> 00:47:29,440
threat landscape

1217
00:47:29,440 --> 00:47:31,440
so just doing a bit of a time check i

1218
00:47:31,440 --> 00:47:33,520
think i have two minutes left

1219
00:47:33,520 --> 00:47:35,839
i have some time to squeeze in

1220
00:47:35,839 --> 00:47:37,359
some reflections

1221
00:47:37,359 --> 00:47:40,960
of our experience before closing off

1222
00:47:40,960 --> 00:47:41,680
so

1223
00:47:41,680 --> 00:47:43,839
since the

1224
00:47:43,839 --> 00:47:45,839
start of the program we have actually

1225
00:47:45,839 --> 00:47:48,400
noticed very visible change in some

1226
00:47:48,400 --> 00:47:49,359
parts

1227
00:47:49,359 --> 00:47:51,839
of our agencies and vendors attitudes

1228
00:47:51,839 --> 00:47:54,240
towards patching of components with

1229
00:47:54,240 --> 00:47:56,079
known vulnerabilities

1230
00:47:56,079 --> 00:47:57,760
even if we are

1231
00:47:57,760 --> 00:48:00,480
not able to directly observe or measure

1232
00:48:00,480 --> 00:48:02,319
their actions

1233
00:48:02,319 --> 00:48:05,520
so perhaps the awareness of such issues

1234
00:48:05,520 --> 00:48:08,640
were just lacking prior to the this

1235
00:48:08,640 --> 00:48:11,760
program and what some of them really

1236
00:48:11,760 --> 00:48:15,119
needed was a contextualized guide for

1237
00:48:15,119 --> 00:48:17,520
their specific to our environment to get

1238
00:48:17,520 --> 00:48:18,880
things started

1239
00:48:18,880 --> 00:48:21,359
and one of our juggernaut vendors

1240
00:48:21,359 --> 00:48:23,520
actually made a commitment

1241
00:48:23,520 --> 00:48:26,400
to make significant changes to their

1242
00:48:26,400 --> 00:48:28,240
software delivery process

1243
00:48:28,240 --> 00:48:31,359
across the board for a large number of

1244
00:48:31,359 --> 00:48:33,359
applications that they actually maintain

1245
00:48:33,359 --> 00:48:35,040
and develop

1246
00:48:35,040 --> 00:48:37,440
to uplift the secured coding and

1247
00:48:37,440 --> 00:48:40,079
application security testing practices

1248
00:48:40,079 --> 00:48:42,480
after we showed through this exercise

1249
00:48:42,480 --> 00:48:46,079
the gaps of their existing practices

1250
00:48:46,079 --> 00:48:48,240
which happened to be left to the

1251
00:48:48,240 --> 00:48:50,880
individual delivery teams to see through

1252
00:48:50,880 --> 00:48:51,920
so

1253
00:48:51,920 --> 00:48:54,079
uh also from this exercise we have

1254
00:48:54,079 --> 00:48:56,400
actually measured uh the exposure to

1255
00:48:56,400 --> 00:48:59,359
known and severe vulnerabilities and

1256
00:48:59,359 --> 00:49:03,440
have a marked reduction of um

1257
00:49:03,440 --> 00:49:05,200
upwards of 70

1258
00:49:05,200 --> 00:49:06,400
of uh

1259
00:49:06,400 --> 00:49:08,480
critical and high severity

1260
00:49:08,480 --> 00:49:11,200
vulnerabilities being removed from our

1261
00:49:11,200 --> 00:49:13,680
environment uh through known

1262
00:49:13,680 --> 00:49:16,880
vulnerabilities and this is only going

1263
00:49:16,880 --> 00:49:19,119
to improve further as we

1264
00:49:19,119 --> 00:49:20,319
discover

1265
00:49:20,319 --> 00:49:23,040
um as we actually give the agencies and

1266
00:49:23,040 --> 00:49:24,960
the vendors more time to actually

1267
00:49:24,960 --> 00:49:26,880
perform their remediations

1268
00:49:26,880 --> 00:49:28,160
and

1269
00:49:28,160 --> 00:49:30,319
perform this new practice of uh

1270
00:49:30,319 --> 00:49:33,280
discovering uh known vulnerabilities uh

1271
00:49:33,280 --> 00:49:36,240
within the r systems and

1272
00:49:36,240 --> 00:49:38,319
if there is something we need to

1273
00:49:38,319 --> 00:49:39,760
actually do

1274
00:49:39,760 --> 00:49:41,599
better as an organization

1275
00:49:41,599 --> 00:49:43,680
it is really to incorporate the security

1276
00:49:43,680 --> 00:49:46,800
outcomes into the deliverables

1277
00:49:46,800 --> 00:49:49,680
in an effective and measurable manner

1278
00:49:49,680 --> 00:49:51,839
and many of our vendors and project

1279
00:49:51,839 --> 00:49:54,960
teams are still very much driven by

1280
00:49:54,960 --> 00:49:57,680
what we call process activities and

1281
00:49:57,680 --> 00:49:59,680
functional delivery

1282
00:49:59,680 --> 00:50:02,800
and it's not yet able to say grubs the

1283
00:50:02,800 --> 00:50:06,319
true intent of absent activities as

1284
00:50:06,319 --> 00:50:07,839
they are asked of

1285
00:50:07,839 --> 00:50:08,960
and

1286
00:50:08,960 --> 00:50:12,000
the abstract landscape is ever evolving

1287
00:50:12,000 --> 00:50:14,240
and the interventions are

1288
00:50:14,240 --> 00:50:16,319
needed to actually improve website

1289
00:50:16,319 --> 00:50:19,200
practices significantly uh should we

1290
00:50:19,200 --> 00:50:20,160
actually

1291
00:50:20,160 --> 00:50:22,160
continue to depend on

1292
00:50:22,160 --> 00:50:23,920
vendor source

1293
00:50:23,920 --> 00:50:25,040
delivery

1294
00:50:25,040 --> 00:50:28,160
of secured software

1295
00:50:28,160 --> 00:50:29,040
actually

1296
00:50:29,040 --> 00:50:32,880
supports an ever-growing need for

1297
00:50:32,880 --> 00:50:36,480
within our digital government space so

1298
00:50:36,480 --> 00:50:39,839
this brings me to the end of my talk uh

1299
00:50:39,839 --> 00:50:41,920
thank you so much for your time and

1300
00:50:41,920 --> 00:50:42,960
attention

1301
00:50:42,960 --> 00:50:44,400
and i hope you took away something

1302
00:50:44,400 --> 00:50:47,280
useful from our own experience

1303
00:50:47,280 --> 00:50:49,440
so feel free to connect with me over

1304
00:50:49,440 --> 00:50:50,960
linkedin i'm happy to answer any

1305
00:50:50,960 --> 00:50:52,640
questions you may have

1306
00:50:52,640 --> 00:50:55,839
with the rest time or offline

1307
00:50:55,839 --> 00:50:59,400
thank you very much

