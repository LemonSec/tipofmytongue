1
00:00:01,420 --> 00:00:05,359
[Music]

2
00:00:05,359 --> 00:00:07,520
today i'm going to be talking about how

3
00:00:07,520 --> 00:00:09,200
to use your vulnerabilities to train

4
00:00:09,200 --> 00:00:12,160
your developers on security uh security

5
00:00:12,160 --> 00:00:15,200
training is becoming a much bigger topic

6
00:00:15,200 --> 00:00:17,840
as seen as a you know high roi activity

7
00:00:17,840 --> 00:00:19,600
in application security so i'm going to

8
00:00:19,600 --> 00:00:21,279
go over

9
00:00:21,279 --> 00:00:23,199
a few things today on the topic so i'm

10
00:00:23,199 --> 00:00:24,480
going to start with

11
00:00:24,480 --> 00:00:26,160
just some interesting things that we

12
00:00:26,160 --> 00:00:28,640
found from training tens of thousands of

13
00:00:28,640 --> 00:00:30,560
software developers

14
00:00:30,560 --> 00:00:32,079
i'm gonna go over how to create a

15
00:00:32,079 --> 00:00:33,920
successful secure coding training

16
00:00:33,920 --> 00:00:36,719
program uh then i'm gonna talk uh more

17
00:00:36,719 --> 00:00:38,800
about you know the the title of the

18
00:00:38,800 --> 00:00:40,559
presentation how you train developers

19
00:00:40,559 --> 00:00:43,360
using your own uh vulnerabilities and

20
00:00:43,360 --> 00:00:44,640
then i'm going to do a demo of our

21
00:00:44,640 --> 00:00:46,320
platform and kind of show you how you

22
00:00:46,320 --> 00:00:49,760
can do this in practice

23
00:00:49,760 --> 00:00:50,960
so

24
00:00:50,960 --> 00:00:53,120
i'm going to start with as i mentioned

25
00:00:53,120 --> 00:00:54,879
insights from tens of thousands of

26
00:00:54,879 --> 00:00:57,760
developers and the data is from uh

27
00:00:57,760 --> 00:01:00,320
lessons uh that we've that we have

28
00:01:00,320 --> 00:01:02,640
assessments challenges reported

29
00:01:02,640 --> 00:01:05,680
vulnerabilities and so the interaction

30
00:01:05,680 --> 00:01:09,040
uh with these people is um

31
00:01:09,040 --> 00:01:10,880
is what we've looked at to be able to

32
00:01:10,880 --> 00:01:12,880
determine some some very interesting

33
00:01:12,880 --> 00:01:14,159
insights

34
00:01:14,159 --> 00:01:14,880
so

35
00:01:14,880 --> 00:01:17,040
um one disclaimer before getting into it

36
00:01:17,040 --> 00:01:20,080
is that uh we're talking about the 2017

37
00:01:20,080 --> 00:01:24,000
oauth top 10 not the 2021 oauth top 10

38
00:01:24,000 --> 00:01:27,439
that that was just uh published um so uh

39
00:01:27,439 --> 00:01:30,079
we're currently updating our content and

40
00:01:30,079 --> 00:01:31,200
um

41
00:01:31,200 --> 00:01:32,960
and data so it will be reflective of the

42
00:01:32,960 --> 00:01:37,360
new uh top 10 in in december

43
00:01:38,400 --> 00:01:41,040
so what are the top two vulnerabilities

44
00:01:41,040 --> 00:01:45,360
that developers find easiest to fix

45
00:01:45,360 --> 00:01:47,680
they are external entities and

46
00:01:47,680 --> 00:01:49,360
cross-site scripting

47
00:01:49,360 --> 00:01:51,040
and so we looked at you know why might

48
00:01:51,040 --> 00:01:53,280
this be the case why are those the two

49
00:01:53,280 --> 00:01:55,439
easiest effects and and it really comes

50
00:01:55,439 --> 00:01:57,119
down to two things education if you

51
00:01:57,119 --> 00:01:58,479
educate developers on these

52
00:01:58,479 --> 00:01:59,920
vulnerabilities they're extremely easy

53
00:01:59,920 --> 00:02:01,119
to fix

54
00:02:01,119 --> 00:02:02,880
as well as the fact that frameworks make

55
00:02:02,880 --> 00:02:04,320
them

56
00:02:04,320 --> 00:02:06,479
extremely easy so once developers have

57
00:02:06,479 --> 00:02:07,920
the knowledge and understand the

58
00:02:07,920 --> 00:02:10,639
frameworks they can more easily

59
00:02:10,639 --> 00:02:12,560
fix these vulnerabilities so they're

60
00:02:12,560 --> 00:02:15,440
very easy for developers to fix

61
00:02:15,440 --> 00:02:16,959
what are the top two vulnerabilities

62
00:02:16,959 --> 00:02:19,280
developers find hardest to fix

63
00:02:19,280 --> 00:02:21,200
and so looking at at all of these

64
00:02:21,200 --> 00:02:22,959
developers we found broken access

65
00:02:22,959 --> 00:02:25,920
control and broken object level

66
00:02:25,920 --> 00:02:28,239
authorization and so when looking into

67
00:02:28,239 --> 00:02:30,080
the data you know why are developers

68
00:02:30,080 --> 00:02:32,560
having issues with with these areas in

69
00:02:32,560 --> 00:02:33,840
particular

70
00:02:33,840 --> 00:02:35,840
well they're more complex to fix right

71
00:02:35,840 --> 00:02:36,879
it's not

72
00:02:36,879 --> 00:02:38,879
leveraging a framework or leveraging

73
00:02:38,879 --> 00:02:41,680
something that's relatively easy

74
00:02:41,680 --> 00:02:43,840
and there's no one way to fix these

75
00:02:43,840 --> 00:02:45,920
issues there's a lot of issues that

76
00:02:45,920 --> 00:02:47,680
encompass

77
00:02:47,680 --> 00:02:50,400
access control and authorization so

78
00:02:50,400 --> 00:02:52,800
um it's really about having a mindset to

79
00:02:52,800 --> 00:02:55,840
think through all of the possible um

80
00:02:55,840 --> 00:02:58,000
issues that can can arise and training

81
00:02:58,000 --> 00:02:59,920
on the fundamentals rather than

82
00:02:59,920 --> 00:03:01,760
memorizing a specific syntax or

83
00:03:01,760 --> 00:03:04,159
framework or something like that so

84
00:03:04,159 --> 00:03:05,840
that's why this is these are

85
00:03:05,840 --> 00:03:07,599
particularly hard to fix

86
00:03:07,599 --> 00:03:09,040
what are the top two vulnerabilities

87
00:03:09,040 --> 00:03:10,400
that our customers tell us they're

88
00:03:10,400 --> 00:03:12,159
having the biggest issues with so this

89
00:03:12,159 --> 00:03:13,519
is not just from our data but this is

90
00:03:13,519 --> 00:03:15,519
them uh telling us that they're having

91
00:03:15,519 --> 00:03:18,000
these issues and one is uh using

92
00:03:18,000 --> 00:03:20,159
components with known vulnerabilities so

93
00:03:20,159 --> 00:03:21,760
open source software

94
00:03:21,760 --> 00:03:23,519
and also again broken authentication

95
00:03:23,519 --> 00:03:25,680
they know they're having issues with

96
00:03:25,680 --> 00:03:28,720
those areas open source it's so easy now

97
00:03:28,720 --> 00:03:30,560
to pull in third-party libraries it's

98
00:03:30,560 --> 00:03:32,560
it's extremely common that

99
00:03:32,560 --> 00:03:34,959
vulnerabilities creep in because of uh

100
00:03:34,959 --> 00:03:38,000
third-party software

101
00:03:38,000 --> 00:03:40,080
so do programmers in certain programming

102
00:03:40,080 --> 00:03:43,040
languages uh make fewer vulnerabilities

103
00:03:43,040 --> 00:03:45,040
so we looked into this and we we saw

104
00:03:45,040 --> 00:03:47,840
that on average no however

105
00:03:47,840 --> 00:03:49,680
certain languages there are certain

106
00:03:49,680 --> 00:03:51,280
vulnerabilities that are more likely to

107
00:03:51,280 --> 00:03:53,840
occur than others and so looking at all

108
00:03:53,840 --> 00:03:55,519
the at all of the language's

109
00:03:55,519 --> 00:03:57,439
vulnerabilities we found that these are

110
00:03:57,439 --> 00:03:59,519
the most common vulnerabilities so for

111
00:03:59,519 --> 00:04:02,480
net it's broken access control for java

112
00:04:02,480 --> 00:04:06,239
it's command injection uh node is xxe

113
00:04:06,239 --> 00:04:09,599
and php in ruby is sql injection

114
00:04:09,599 --> 00:04:11,200
so we tried to dig in a little more like

115
00:04:11,200 --> 00:04:12,959
why why this might be the case and we

116
00:04:12,959 --> 00:04:15,280
were asking the questions you know

117
00:04:15,280 --> 00:04:17,440
specifically you know is it the

118
00:04:17,440 --> 00:04:19,279
programmers of that language

119
00:04:19,279 --> 00:04:22,160
uh is it the language itself and kind of

120
00:04:22,160 --> 00:04:24,160
digging in deeper we found it's it's a

121
00:04:24,160 --> 00:04:26,160
little bit of both right so programmers

122
00:04:26,160 --> 00:04:27,919
of the language are using certain

123
00:04:27,919 --> 00:04:30,080
certain syntax or certain things that

124
00:04:30,080 --> 00:04:31,840
are available in that language so

125
00:04:31,840 --> 00:04:33,360
because of that it makes certain

126
00:04:33,360 --> 00:04:35,759
vulnerabilities more more common than

127
00:04:35,759 --> 00:04:38,080
others

128
00:04:39,120 --> 00:04:40,800
and then you know we also asked the

129
00:04:40,800 --> 00:04:41,759
question what are the top

130
00:04:41,759 --> 00:04:43,440
vulnerabilities that developers fix

131
00:04:43,440 --> 00:04:45,680
incorrectly so these are vulnerabilities

132
00:04:45,680 --> 00:04:47,840
that developers know they have they may

133
00:04:47,840 --> 00:04:50,320
have some knowledge of them and they go

134
00:04:50,320 --> 00:04:52,720
to try to fix them and they find you

135
00:04:52,720 --> 00:04:54,479
know they don't fix them exactly

136
00:04:54,479 --> 00:04:56,560
correctly so they're fixing them in a

137
00:04:56,560 --> 00:04:58,720
way where there might be you know some

138
00:04:58,720 --> 00:05:00,639
gaps or something and there's still a

139
00:05:00,639 --> 00:05:02,479
problem with these vulnerabilities and

140
00:05:02,479 --> 00:05:03,680
so

141
00:05:03,680 --> 00:05:05,360
we found command injection and sql

142
00:05:05,360 --> 00:05:07,280
injection are most often fixed

143
00:05:07,280 --> 00:05:10,000
incorrectly and so we look at why that

144
00:05:10,000 --> 00:05:12,080
that's the case it really comes down to

145
00:05:12,080 --> 00:05:13,600
developers wanting to go to regular

146
00:05:13,600 --> 00:05:16,000
expressions because they lack the formal

147
00:05:16,000 --> 00:05:18,639
training in understanding using you know

148
00:05:18,639 --> 00:05:20,880
parameterized queries you know the right

149
00:05:20,880 --> 00:05:22,560
way to fix these vulnerabilities and

150
00:05:22,560 --> 00:05:24,160
instead they think oh i have to filter

151
00:05:24,160 --> 00:05:26,639
out certain things for a particular case

152
00:05:26,639 --> 00:05:28,400
and so that's why

153
00:05:28,400 --> 00:05:32,080
these are often fixed uh incorrectly

154
00:05:32,080 --> 00:05:33,919
so that was just some interesting data

155
00:05:33,919 --> 00:05:35,039
to kind of

156
00:05:35,039 --> 00:05:36,479
think through you know some of the

157
00:05:36,479 --> 00:05:38,560
issues developers have

158
00:05:38,560 --> 00:05:40,320
think through how training can enable

159
00:05:40,320 --> 00:05:42,639
developers to make fewer vulnerabilities

160
00:05:42,639 --> 00:05:44,560
now i'm going to go into how do you

161
00:05:44,560 --> 00:05:46,960
create a successful secure coding

162
00:05:46,960 --> 00:05:49,280
training plan

163
00:05:49,280 --> 00:05:51,199
so when thinking through how to come up

164
00:05:51,199 --> 00:05:53,440
with a successful secure coding training

165
00:05:53,440 --> 00:05:56,080
plan you know you want to improve the

166
00:05:56,080 --> 00:05:58,080
engagement if you get developers engaged

167
00:05:58,080 --> 00:05:59,280
and they're interested and they're

168
00:05:59,280 --> 00:06:00,880
actually taking the training you know

169
00:06:00,880 --> 00:06:03,360
that's step one right and then the

170
00:06:03,360 --> 00:06:04,880
second most important thing is okay now

171
00:06:04,880 --> 00:06:06,319
we need to make sure it's effective and

172
00:06:06,319 --> 00:06:08,000
increase the effectiveness so so these

173
00:06:08,000 --> 00:06:09,759
are the two things we do at hacky to you

174
00:06:09,759 --> 00:06:12,080
we really are are focused on improving

175
00:06:12,080 --> 00:06:14,240
engagement and increasing effectiveness

176
00:06:14,240 --> 00:06:15,840
if you do those two things you'll see

177
00:06:15,840 --> 00:06:19,120
vulnerabilities um uh decrease in in

178
00:06:19,120 --> 00:06:21,039
your software and so this is

179
00:06:21,039 --> 00:06:22,720
recommendations based on working with

180
00:06:22,720 --> 00:06:24,800
hundreds hundreds of customers over

181
00:06:24,800 --> 00:06:26,960
years and looking at the data so we came

182
00:06:26,960 --> 00:06:28,960
up with you know best practice in terms

183
00:06:28,960 --> 00:06:32,639
of rolling out secure coding training

184
00:06:32,639 --> 00:06:35,440
so first looking at the training content

185
00:06:35,440 --> 00:06:37,600
um you know we found that multiple

186
00:06:37,600 --> 00:06:40,880
choice videos slides just don't cut it

187
00:06:40,880 --> 00:06:43,120
for videos in particular we've seen

188
00:06:43,120 --> 00:06:44,960
developers play videos in the background

189
00:06:44,960 --> 00:06:46,080
while they're coding so they're not

190
00:06:46,080 --> 00:06:47,680
really paying attention so it's really

191
00:06:47,680 --> 00:06:50,240
not effective it's not engaging

192
00:06:50,240 --> 00:06:51,919
you know multiple choice

193
00:06:51,919 --> 00:06:53,520
it doesn't that's not how developers

194
00:06:53,520 --> 00:06:55,520
learn developers are problem solvers

195
00:06:55,520 --> 00:06:57,120
they want to be thrown into a problem

196
00:06:57,120 --> 00:06:59,680
and try try to solve that in a more

197
00:06:59,680 --> 00:07:01,840
hands-on way and then we've also heard

198
00:07:01,840 --> 00:07:04,479
from from some companies um that they

199
00:07:04,479 --> 00:07:06,800
they tried a slide based approach um you

200
00:07:06,800 --> 00:07:08,639
know the the

201
00:07:08,639 --> 00:07:10,479
uh computer-based training where you

202
00:07:10,479 --> 00:07:12,639
click you know click through and kind of

203
00:07:12,639 --> 00:07:15,360
watch the animation run and we heard

204
00:07:15,360 --> 00:07:17,759
that uh for one they looked at the

205
00:07:17,759 --> 00:07:19,599
statistics of the training afterwards

206
00:07:19,599 --> 00:07:21,360
and saw that developers were finishing

207
00:07:21,360 --> 00:07:23,199
lessons in like seconds because they

208
00:07:23,199 --> 00:07:24,800
were just clicking through as fast as

209
00:07:24,800 --> 00:07:26,319
they could so obviously that's not

210
00:07:26,319 --> 00:07:29,360
effective so requiring developers to

211
00:07:29,360 --> 00:07:31,280
actually code is extremely important

212
00:07:31,280 --> 00:07:35,359
getting them hands-on and practice

213
00:07:36,319 --> 00:07:37,919
vulnerabilities because if they can do

214
00:07:37,919 --> 00:07:39,039
that if they can find and fix

215
00:07:39,039 --> 00:07:40,639
vulnerabilities in other people's code

216
00:07:40,639 --> 00:07:42,639
they're more likely to be able to avoid

217
00:07:42,639 --> 00:07:44,960
those mistakes in their own code um and

218
00:07:44,960 --> 00:07:46,560
then third here you know offensive and

219
00:07:46,560 --> 00:07:48,720
defensive approach is very good so as

220
00:07:48,720 --> 00:07:51,280
mentioned with broken access control and

221
00:07:51,280 --> 00:07:53,599
broken authentication it's less about

222
00:07:53,599 --> 00:07:55,280
one right way to fix it and more about

223
00:07:55,280 --> 00:07:57,440
having the mindset to think through how

224
00:07:57,440 --> 00:07:58,800
are attackers looking at our

225
00:07:58,800 --> 00:08:01,280
applications um you know having that

226
00:08:01,280 --> 00:08:02,639
mindset and thinking through the

227
00:08:02,639 --> 00:08:04,720
fundamentals of these vulnerabilities uh

228
00:08:04,720 --> 00:08:06,400
rather than just one way to fix it is

229
00:08:06,400 --> 00:08:08,160
extremely important and so giving the

230
00:08:08,160 --> 00:08:09,840
offensive approach

231
00:08:09,840 --> 00:08:12,800
really helps uh for that

232
00:08:12,800 --> 00:08:14,720
and and it helps them more solve for the

233
00:08:14,720 --> 00:08:16,560
general case rather than one one

234
00:08:16,560 --> 00:08:19,039
specific case

235
00:08:19,039 --> 00:08:21,680
so training schedule now we've you know

236
00:08:21,680 --> 00:08:24,639
working with organizations uh developers

237
00:08:24,639 --> 00:08:25,599
are

238
00:08:25,599 --> 00:08:27,039
more

239
00:08:27,039 --> 00:08:29,360
pressured today to write a lot of code

240
00:08:29,360 --> 00:08:31,039
right they got to get that product

241
00:08:31,039 --> 00:08:32,799
roadmap done there's no time for

242
00:08:32,799 --> 00:08:35,279
training they have to move forward and

243
00:08:35,279 --> 00:08:36,159
so

244
00:08:36,159 --> 00:08:37,200
um

245
00:08:37,200 --> 00:08:39,120
what we found is breaking up code into

246
00:08:39,120 --> 00:08:41,120
smaller portions right so like 20

247
00:08:41,120 --> 00:08:42,719
minutes or so

248
00:08:42,719 --> 00:08:44,080
and then

249
00:08:44,080 --> 00:08:46,160
assigning it throughout the year not one

250
00:08:46,160 --> 00:08:48,480
chunk right away is extremely effective

251
00:08:48,480 --> 00:08:51,360
so you know training continuously is

252
00:08:51,360 --> 00:08:52,880
makes it so it's not a one-time event

253
00:08:52,880 --> 00:08:54,000
right developers aren't going to take

254
00:08:54,000 --> 00:08:55,920
training you know for two days out of

255
00:08:55,920 --> 00:08:57,440
the year and then forget about it until

256
00:08:57,440 --> 00:08:59,200
next year um you know that's not an

257
00:08:59,200 --> 00:09:01,120
effective way to build the build

258
00:09:01,120 --> 00:09:02,720
learning and it doesn't follow learning

259
00:09:02,720 --> 00:09:04,640
science principles so learning science

260
00:09:04,640 --> 00:09:06,480
principles say that learning should be

261
00:09:06,480 --> 00:09:08,480
continuous throughout the year and that

262
00:09:08,480 --> 00:09:10,399
knowledge should continually reinforce

263
00:09:10,399 --> 00:09:13,760
itself so we recommend training every

264
00:09:13,760 --> 00:09:16,480
single month for two to three hours and

265
00:09:16,480 --> 00:09:18,880
breaking up the training into 20 to 30

266
00:09:18,880 --> 00:09:20,800
minute chunks and so that will help

267
00:09:20,800 --> 00:09:23,120
developers fit it in during compile time

268
00:09:23,120 --> 00:09:26,240
during downtime during testing during

269
00:09:26,240 --> 00:09:27,279
you know when they just need a break

270
00:09:27,279 --> 00:09:28,880
from looking at code and it really

271
00:09:28,880 --> 00:09:30,399
doesn't take away from the product

272
00:09:30,399 --> 00:09:31,760
roadmap

273
00:09:31,760 --> 00:09:33,839
so this is a way where

274
00:09:33,839 --> 00:09:36,560
security can work with engineering such

275
00:09:36,560 --> 00:09:40,720
that it works for for both organizations

276
00:09:40,720 --> 00:09:44,000
so training topics um so you know owasp

277
00:09:44,000 --> 00:09:46,000
puts out obviously a lot of really great

278
00:09:46,000 --> 00:09:48,560
content good lists on things to focus on

279
00:09:48,560 --> 00:09:51,839
and so the oauth top 10 is a great uh a

280
00:09:51,839 --> 00:09:54,000
great place to start having the owasp

281
00:09:54,000 --> 00:09:56,560
api top 10 if you do api or mobile

282
00:09:56,560 --> 00:09:58,560
anything like that focusing on the

283
00:09:58,560 --> 00:10:00,320
latest technologies and the latest

284
00:10:00,320 --> 00:10:02,000
attacks

285
00:10:02,000 --> 00:10:04,000
is extremely important so if you're

286
00:10:04,000 --> 00:10:05,680
using new authentication you know

287
00:10:05,680 --> 00:10:07,360
different authentication technologies

288
00:10:07,360 --> 00:10:09,279
you should be training on that so jwt

289
00:10:09,279 --> 00:10:11,440
authentication or

290
00:10:11,440 --> 00:10:13,360
or oauth or something like train on the

291
00:10:13,360 --> 00:10:15,519
technologies that you're using and then

292
00:10:15,519 --> 00:10:17,760
also if there are any attacks that are

293
00:10:17,760 --> 00:10:20,240
newer anything that um that might be

294
00:10:20,240 --> 00:10:22,959
interesting learning those um those

295
00:10:22,959 --> 00:10:25,200
newer attacks to be aware of them uh as

296
00:10:25,200 --> 00:10:26,880
you're developing your own code

297
00:10:26,880 --> 00:10:28,959
uh and then lastly here um you know

298
00:10:28,959 --> 00:10:32,399
using role-based uh training so training

299
00:10:32,399 --> 00:10:33,760
for particular

300
00:10:33,760 --> 00:10:35,760
roles so front end might be taking

301
00:10:35,760 --> 00:10:38,000
different training than back end um you

302
00:10:38,000 --> 00:10:39,680
know qa might be taking different

303
00:10:39,680 --> 00:10:42,160
training as well um there's usually a

304
00:10:42,160 --> 00:10:43,839
lot of overlap but sometimes there are

305
00:10:43,839 --> 00:10:46,079
specific things for specific roles as

306
00:10:46,079 --> 00:10:48,000
well as seniority as well right someone

307
00:10:48,000 --> 00:10:50,480
who's new uh you know out of out of

308
00:10:50,480 --> 00:10:52,399
college they might have very different

309
00:10:52,399 --> 00:10:54,320
training than someone who's been uh

310
00:10:54,320 --> 00:10:56,320
developing for for 20 years so you want

311
00:10:56,320 --> 00:10:58,079
to have a variety of training to be able

312
00:10:58,079 --> 00:10:58,800
to

313
00:10:58,800 --> 00:11:01,279
accommodate your your whole

314
00:11:01,279 --> 00:11:04,000
development team

315
00:11:04,880 --> 00:11:05,680
so

316
00:11:05,680 --> 00:11:07,200
you know then you know we talked a

317
00:11:07,200 --> 00:11:08,720
little bit how to make your training

318
00:11:08,720 --> 00:11:10,480
effective things to focus on but now how

319
00:11:10,480 --> 00:11:12,000
do you drive that engagement priest how

320
00:11:12,000 --> 00:11:13,760
do you improve that

321
00:11:13,760 --> 00:11:15,680
so one thing is having security and

322
00:11:15,680 --> 00:11:17,920
engineering team unity now this is very

323
00:11:17,920 --> 00:11:19,360
much you know

324
00:11:19,360 --> 00:11:21,680
organization specific some organizations

325
00:11:21,680 --> 00:11:23,200
have very good

326
00:11:23,200 --> 00:11:25,519
security and engineering unity

327
00:11:25,519 --> 00:11:28,079
part of it if you have good education

328
00:11:28,079 --> 00:11:30,320
and you're educating the engineers on

329
00:11:30,320 --> 00:11:32,160
some of these things you can help bridge

330
00:11:32,160 --> 00:11:34,560
the gap between security and engineering

331
00:11:34,560 --> 00:11:37,279
another thing is you know not having um

332
00:11:37,279 --> 00:11:38,800
training that's just like you know hey

333
00:11:38,800 --> 00:11:40,000
we're gonna do a week and stop

334
00:11:40,000 --> 00:11:41,279
everything you know making sure you're

335
00:11:41,279 --> 00:11:44,720
working with with engineering to have um

336
00:11:44,720 --> 00:11:46,959
you know good camaraderie and uh working

337
00:11:46,959 --> 00:11:49,200
towards the same effort uh

338
00:11:49,200 --> 00:11:50,880
having this you know that that ties in

339
00:11:50,880 --> 00:11:53,120
with security culture management buy-in

340
00:11:53,120 --> 00:11:55,440
right you wanna have management um you

341
00:11:55,440 --> 00:11:59,120
know at the highest levels buying into

342
00:11:59,120 --> 00:12:01,360
these programs and things luckily today

343
00:12:01,360 --> 00:12:04,240
it's much easier to have buy-in from

344
00:12:04,240 --> 00:12:07,279
c-level executives on security because

345
00:12:07,279 --> 00:12:09,600
of all the issues that have happened um

346
00:12:09,600 --> 00:12:11,680
and then you know incentives so we've

347
00:12:11,680 --> 00:12:13,120
seen there was one company we were

348
00:12:13,120 --> 00:12:14,160
working with

349
00:12:14,160 --> 00:12:15,519
they gave away

350
00:12:15,519 --> 00:12:17,920
special backpacks that had a special

351
00:12:17,920 --> 00:12:20,480
logo just for for their team for their

352
00:12:20,480 --> 00:12:22,800
company and they gave those away for

353
00:12:22,800 --> 00:12:24,639
everyone who completed training we saw

354
00:12:24,639 --> 00:12:26,880
the rates of completion for those for

355
00:12:26,880 --> 00:12:28,240
that organization was just through the

356
00:12:28,240 --> 00:12:29,760
roof everybody wanted a backpack

357
00:12:29,760 --> 00:12:31,600
everyone wanted to complete the training

358
00:12:31,600 --> 00:12:33,760
so they had a really great time uh

359
00:12:33,760 --> 00:12:35,440
getting everybody on board and actually

360
00:12:35,440 --> 00:12:36,959
taking the training

361
00:12:36,959 --> 00:12:38,880
so we saw this not only with that

362
00:12:38,880 --> 00:12:40,079
organization but several other

363
00:12:40,079 --> 00:12:41,279
organizations where they offered

364
00:12:41,279 --> 00:12:44,240
incentives um so we saw it was so

365
00:12:44,240 --> 00:12:48,160
effective we actually uh created uh a um

366
00:12:48,160 --> 00:12:49,680
you know feature within our platform

367
00:12:49,680 --> 00:12:51,839
called hackie rewards where we actually

368
00:12:51,839 --> 00:12:54,480
offer a similar thing all managed within

369
00:12:54,480 --> 00:12:56,399
our platform because we saw it is such

370
00:12:56,399 --> 00:12:59,440
an effective way to engage uh developers

371
00:12:59,440 --> 00:13:01,440
and get them to actually go in take the

372
00:13:01,440 --> 00:13:03,040
training and complete it

373
00:13:03,040 --> 00:13:04,800
uh and then the last thing here is

374
00:13:04,800 --> 00:13:07,120
accountability so engaging is great you

375
00:13:07,120 --> 00:13:09,519
want to engage developers

376
00:13:09,519 --> 00:13:10,959
you want to get them doing the right

377
00:13:10,959 --> 00:13:13,120
thing and if they don't you also want to

378
00:13:13,120 --> 00:13:15,279
hold them accountable so something that

379
00:13:15,279 --> 00:13:17,040
you can do

380
00:13:17,040 --> 00:13:19,600
is hey when developers checking code is

381
00:13:19,600 --> 00:13:21,040
there a way that you can remind them to

382
00:13:21,040 --> 00:13:23,279
take training if they haven't or can you

383
00:13:23,279 --> 00:13:25,279
even you know some organizations won't

384
00:13:25,279 --> 00:13:27,360
do this but but some might block them

385
00:13:27,360 --> 00:13:29,920
from checking in code if they haven't

386
00:13:29,920 --> 00:13:31,680
completed the training

387
00:13:31,680 --> 00:13:33,200
there are some tools out there that make

388
00:13:33,200 --> 00:13:36,000
this available we have a tool that does

389
00:13:36,000 --> 00:13:37,519
something similar and it's just another

390
00:13:37,519 --> 00:13:39,680
way to remind developers hey if you're

391
00:13:39,680 --> 00:13:41,600
checking in code into production you

392
00:13:41,600 --> 00:13:43,120
should be making sure that you're up on

393
00:13:43,120 --> 00:13:45,680
your training

394
00:13:45,920 --> 00:13:47,440
so now i'm going to get into you know

395
00:13:47,440 --> 00:13:49,440
how do you use your vulnerabilities to

396
00:13:49,440 --> 00:13:52,560
train your your developers

397
00:13:52,560 --> 00:13:54,560
so you know security metrics are

398
00:13:54,560 --> 00:13:56,160
something that i think as a as a

399
00:13:56,160 --> 00:13:57,519
community we all struggle with what are

400
00:13:57,519 --> 00:13:59,040
the right metrics how are you measuring

401
00:13:59,040 --> 00:14:00,880
the right things this is very difficult

402
00:14:00,880 --> 00:14:02,880
so instead of looking at you know

403
00:14:02,880 --> 00:14:04,720
metrics let's look at you know the tools

404
00:14:04,720 --> 00:14:06,880
that are already in place uh what tools

405
00:14:06,880 --> 00:14:10,399
can we leverage to improve the roi of of

406
00:14:10,399 --> 00:14:12,160
training right and so looking at bug

407
00:14:12,160 --> 00:14:14,880
bounty programs sas tools das tools your

408
00:14:14,880 --> 00:14:16,959
current training aggregating all of that

409
00:14:16,959 --> 00:14:19,600
data and then creating what what we call

410
00:14:19,600 --> 00:14:22,720
uh adaptive training plans to really

411
00:14:22,720 --> 00:14:25,199
try to change developer behavior and

412
00:14:25,199 --> 00:14:26,800
help them think more

413
00:14:26,800 --> 00:14:28,639
about security

414
00:14:28,639 --> 00:14:30,399
and so what are adaptive training

415
00:14:30,399 --> 00:14:33,279
uh plans and so this is essentially

416
00:14:33,279 --> 00:14:35,440
taking all relevant vulnerabilities from

417
00:14:35,440 --> 00:14:37,120
developers

418
00:14:37,120 --> 00:14:38,880
vulnerabilities found the severity of

419
00:14:38,880 --> 00:14:40,240
the vulnerabilities

420
00:14:40,240 --> 00:14:42,079
applications where vulnerabilities are

421
00:14:42,079 --> 00:14:44,000
found taking all of that information as

422
00:14:44,000 --> 00:14:45,120
well as

423
00:14:45,120 --> 00:14:46,480
developer knowledge you know what

424
00:14:46,480 --> 00:14:48,079
lessons have they taken where are they

425
00:14:48,079 --> 00:14:49,600
struggling what are they having issues

426
00:14:49,600 --> 00:14:52,639
with and then assigning highly relevant

427
00:14:52,639 --> 00:14:55,120
and timely lessons

428
00:14:55,120 --> 00:14:57,519
based on those to help fix the mistakes

429
00:14:57,519 --> 00:14:59,360
that they're making and so we've seen

430
00:14:59,360 --> 00:15:02,079
this is is an extremely effective way to

431
00:15:02,079 --> 00:15:04,240
train developers

432
00:15:04,240 --> 00:15:06,240
not only is it targeting the issues

433
00:15:06,240 --> 00:15:08,480
where they're having problems but it's

434
00:15:08,480 --> 00:15:10,880
also very hard for them to say hey i

435
00:15:10,880 --> 00:15:12,240
don't need security training it's not

436
00:15:12,240 --> 00:15:13,760
relevant i'm a senior developer i don't

437
00:15:13,760 --> 00:15:15,519
make mistakes right if you're showing

438
00:15:15,519 --> 00:15:17,360
them like hey this is based on data and

439
00:15:17,360 --> 00:15:19,680
your actual code then it's much more

440
00:15:19,680 --> 00:15:21,760
palatable for developers and for them to

441
00:15:21,760 --> 00:15:23,120
be able to

442
00:15:23,120 --> 00:15:25,839
take take this

443
00:15:25,839 --> 00:15:28,399
so now i'm going to jump into a demo and

444
00:15:28,399 --> 00:15:31,040
so i'm going to demo first uh the hacky

445
00:15:31,040 --> 00:15:32,320
u platform

446
00:15:32,320 --> 00:15:35,120
talk about how we tried to improve uh

447
00:15:35,120 --> 00:15:39,040
the ability to write secure software

448
00:15:39,040 --> 00:15:40,720
you know boost um

449
00:15:40,720 --> 00:15:42,720
uh developers understanding on how they

450
00:15:42,720 --> 00:15:43,839
they uh

451
00:15:43,839 --> 00:15:44,720
um

452
00:15:44,720 --> 00:15:46,560
the how software systems are hacked and

453
00:15:46,560 --> 00:15:48,639
and decrease the time to solve security

454
00:15:48,639 --> 00:15:50,240
problems so i'll walk through the hacky

455
00:15:50,240 --> 00:15:52,480
new platform and then i'll move into how

456
00:15:52,480 --> 00:15:54,160
we use

457
00:15:54,160 --> 00:15:56,639
vulnerabilities to help train

458
00:15:56,639 --> 00:15:59,440
trained developers

459
00:16:02,240 --> 00:16:05,240
so

460
00:16:10,160 --> 00:16:12,800
okay so starting with um the hackity

461
00:16:12,800 --> 00:16:15,279
platform uh so this is the hackyview

462
00:16:15,279 --> 00:16:17,920
platform um this is just kind of general

463
00:16:17,920 --> 00:16:19,519
general training and i'm gonna walk

464
00:16:19,519 --> 00:16:22,880
through a particular lesson here so

465
00:16:22,880 --> 00:16:25,360
if we go into our sql injection part one

466
00:16:25,360 --> 00:16:28,160
lesson the way our

467
00:16:28,160 --> 00:16:30,880
our training works is we have a tutorial

468
00:16:30,880 --> 00:16:32,480
on the left side and then the most

469
00:16:32,480 --> 00:16:34,160
important thing we do is try to get

470
00:16:34,160 --> 00:16:35,680
developers hands on as quickly as

471
00:16:35,680 --> 00:16:36,560
possible

472
00:16:36,560 --> 00:16:38,880
as mentioned we have um

473
00:16:38,880 --> 00:16:41,040
you know we have the offensive side is

474
00:16:41,040 --> 00:16:42,639
where we start so we'll walk through the

475
00:16:42,639 --> 00:16:45,279
offensive side of security and then and

476
00:16:45,279 --> 00:16:47,440
then move on to the defensive side so

477
00:16:47,440 --> 00:16:48,959
here for example

478
00:16:48,959 --> 00:16:50,720
um we have a real running web

479
00:16:50,720 --> 00:16:53,279
application it's a sandbox for this this

480
00:16:53,279 --> 00:16:55,680
particular developer and so if i try to

481
00:16:55,680 --> 00:16:57,920
log in i have um so

482
00:16:57,920 --> 00:16:59,440
intercept request is on and i have a

483
00:16:59,440 --> 00:17:01,199
proxy that's running so i can see the

484
00:17:01,199 --> 00:17:02,800
requests that are going on to the server

485
00:17:02,800 --> 00:17:05,039
i can modify requests and i could submit

486
00:17:05,039 --> 00:17:06,720
it to the server so we're starting to

487
00:17:06,720 --> 00:17:09,359
use the tools that security teams are

488
00:17:09,359 --> 00:17:11,039
using that

489
00:17:11,039 --> 00:17:12,240
that you know

490
00:17:12,240 --> 00:17:14,079
attackers are using to analyze

491
00:17:14,079 --> 00:17:16,400
applications so it gives developers a

492
00:17:16,400 --> 00:17:18,799
better way to understand these things

493
00:17:18,799 --> 00:17:19,679
and so

494
00:17:19,679 --> 00:17:21,520
um so we start with the offensive side

495
00:17:21,520 --> 00:17:22,720
of security

496
00:17:22,720 --> 00:17:25,520
uh so for example you know this is sql

497
00:17:25,520 --> 00:17:27,199
injection there's a sql

498
00:17:27,199 --> 00:17:29,760
injection vulnerability uh we teach you

499
00:17:29,760 --> 00:17:31,200
know how would you go about exploiting

500
00:17:31,200 --> 00:17:32,640
this so you have a

501
00:17:32,640 --> 00:17:34,640
an understanding of this and so for

502
00:17:34,640 --> 00:17:36,480
example here i was just able to break

503
00:17:36,480 --> 00:17:38,720
into this application that's what we're

504
00:17:38,720 --> 00:17:41,520
teaching developers here um but they're

505
00:17:41,520 --> 00:17:43,280
you know they're real vulnerabilities

506
00:17:43,280 --> 00:17:46,160
the the platform is open for anyone to

507
00:17:46,160 --> 00:17:48,799
exploit this you know kill the

508
00:17:48,799 --> 00:17:50,160
you know drop tables kill the

509
00:17:50,160 --> 00:17:52,000
application whatever completely fine if

510
00:17:52,000 --> 00:17:53,280
they ever get the

511
00:17:53,280 --> 00:17:55,440
application in a bad state they just hit

512
00:17:55,440 --> 00:17:57,600
this reset sandbox

513
00:17:57,600 --> 00:17:58,880
and they get a brand new one and could

514
00:17:58,880 --> 00:18:01,280
continue on with the application

515
00:18:01,280 --> 00:18:02,880
so that's the offensive side then we

516
00:18:02,880 --> 00:18:04,880
move to the defensive side and so for

517
00:18:04,880 --> 00:18:07,600
the defensive side we expose the source

518
00:18:07,600 --> 00:18:09,679
code the developers can choose whatever

519
00:18:09,679 --> 00:18:10,960
language

520
00:18:10,960 --> 00:18:13,520
they want here they select the language

521
00:18:13,520 --> 00:18:16,240
um you know that that they develop in uh

522
00:18:16,240 --> 00:18:18,240
then they have to find and fix the

523
00:18:18,240 --> 00:18:19,919
vulnerability in code

524
00:18:19,919 --> 00:18:22,000
once they find once they find and fix

525
00:18:22,000 --> 00:18:24,240
the vulnerability they hit run tests and

526
00:18:24,240 --> 00:18:26,320
tests are actually run and they have to

527
00:18:26,320 --> 00:18:28,080
actually solve it correctly before they

528
00:18:28,080 --> 00:18:30,480
can pass a lesson and move on

529
00:18:30,480 --> 00:18:32,960
so again hands-on training making sure

530
00:18:32,960 --> 00:18:34,799
that developers are actually coding is

531
00:18:34,799 --> 00:18:36,640
extremely important and then making sure

532
00:18:36,640 --> 00:18:38,080
they're actually doing it correctly by

533
00:18:38,080 --> 00:18:40,080
running tests against it

534
00:18:40,080 --> 00:18:42,160
so that's how our lessons work uh we

535
00:18:42,160 --> 00:18:45,120
have a full library of of uh of lessons

536
00:18:45,120 --> 00:18:47,520
cover a lot of the oauth topics uh

537
00:18:47,520 --> 00:18:49,840
additional topics we have challenges to

538
00:18:49,840 --> 00:18:52,480
help gamify so there's a lot going on uh

539
00:18:52,480 --> 00:18:54,000
in our platform

540
00:18:54,000 --> 00:18:57,120
but now moving over to um

541
00:18:57,120 --> 00:18:59,919
uh to to using your vulnerabilities so

542
00:18:59,919 --> 00:19:02,480
um so as i mentioned we have uh

543
00:19:02,480 --> 00:19:04,799
integrations with sas tools das tools

544
00:19:04,799 --> 00:19:07,520
bug bounty programs everything is is

545
00:19:07,520 --> 00:19:09,600
kind of pre-loaded here depending on

546
00:19:09,600 --> 00:19:12,080
what uh what tools you use and then you

547
00:19:12,080 --> 00:19:14,160
can connect it up and for this we have

548
00:19:14,160 --> 00:19:16,160
hacker one connected for this um

549
00:19:16,160 --> 00:19:17,679
organization

550
00:19:17,679 --> 00:19:20,320
and as you can see here it's kind of um

551
00:19:20,320 --> 00:19:22,000
categorize the vulnerabilities that are

552
00:19:22,000 --> 00:19:23,120
found right so it's looking at the

553
00:19:23,120 --> 00:19:25,200
vulnerabilities the severity the numbers

554
00:19:25,200 --> 00:19:27,200
all of those different things and based

555
00:19:27,200 --> 00:19:29,840
on that it's automatically assigning

556
00:19:29,840 --> 00:19:33,520
me um training so you know broken

557
00:19:33,520 --> 00:19:35,039
authentication and session management

558
00:19:35,039 --> 00:19:36,559
you know as you can see here with this

559
00:19:36,559 --> 00:19:38,559
integration you know there's an issue

560
00:19:38,559 --> 00:19:40,720
there right and it's looking at as i

561
00:19:40,720 --> 00:19:42,320
mentioned maybe the severity is there

562
00:19:42,320 --> 00:19:44,799
more than others uh cross-site scripting

563
00:19:44,799 --> 00:19:47,120
is another issue we actually have a you

564
00:19:47,120 --> 00:19:48,400
know the myspace worm which was a

565
00:19:48,400 --> 00:19:50,880
cross-site scripting issue so um maybe

566
00:19:50,880 --> 00:19:53,600
because i already took an initial uh

567
00:19:53,600 --> 00:19:55,520
uh cross-site scripting but i'm still

568
00:19:55,520 --> 00:19:57,120
having problems i'll get that assigned

569
00:19:57,120 --> 00:19:59,200
to me so this is all happening

570
00:19:59,200 --> 00:20:01,280
automatically behind the scenes and so

571
00:20:01,280 --> 00:20:03,840
that's how our training works in terms

572
00:20:03,840 --> 00:20:05,679
of um

573
00:20:05,679 --> 00:20:07,120
in terms of

574
00:20:07,120 --> 00:20:08,400
looking and using your own

575
00:20:08,400 --> 00:20:10,320
vulnerabilities in code

576
00:20:10,320 --> 00:20:12,000
so

577
00:20:12,000 --> 00:20:13,360
with that

578
00:20:13,360 --> 00:20:14,480
i will

579
00:20:14,480 --> 00:20:18,640
pause and see if there are any questions

