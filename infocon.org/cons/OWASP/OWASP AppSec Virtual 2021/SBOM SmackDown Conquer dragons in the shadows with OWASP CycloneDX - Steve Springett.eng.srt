1
00:00:01,420 --> 00:00:05,520
[Music]

2
00:00:05,520 --> 00:00:07,680
um so yeah we're gonna be talking a

3
00:00:07,680 --> 00:00:10,080
little bit about s-bombs today

4
00:00:10,080 --> 00:00:11,599
and um

5
00:00:11,599 --> 00:00:14,880
disclosure no actual dragons were harmed

6
00:00:14,880 --> 00:00:18,160
in the creation of this presentation

7
00:00:18,160 --> 00:00:19,920
this one's going to be a fun one i think

8
00:00:19,920 --> 00:00:22,960
but a little bit about me

9
00:00:22,960 --> 00:00:26,000
before we get started i'm the leader of

10
00:00:26,000 --> 00:00:28,480
two flagship awas projects

11
00:00:28,480 --> 00:00:31,039
first one is the oau's dependency track

12
00:00:31,039 --> 00:00:32,000
project

13
00:00:32,000 --> 00:00:34,559
that's a project that is

14
00:00:34,559 --> 00:00:37,840
specifically designed to analyze consume

15
00:00:37,840 --> 00:00:40,079
analyze s-bombs software-billed

16
00:00:40,079 --> 00:00:41,520
materials

17
00:00:41,520 --> 00:00:43,040
i'm also the

18
00:00:43,040 --> 00:00:45,440
chair of the cyclone dx software bill of

19
00:00:45,440 --> 00:00:47,760
material core working group

20
00:00:47,760 --> 00:00:50,399
and i'm the leader and the co-author of

21
00:00:50,399 --> 00:00:53,039
the ola software component verification

22
00:00:53,039 --> 00:00:54,879
standard it's a it's a way for

23
00:00:54,879 --> 00:00:57,920
organizations to measure and improve

24
00:00:57,920 --> 00:01:01,120
their software supply chain assurance

25
00:01:01,120 --> 00:01:03,280
i participate in a lot of various

26
00:01:03,280 --> 00:01:05,280
working groups especially for the u.s

27
00:01:05,280 --> 00:01:07,280
government on software component

28
00:01:07,280 --> 00:01:10,320
transparency and what i actually get

29
00:01:10,320 --> 00:01:12,479
paid to do is software security

30
00:01:12,479 --> 00:01:14,720
architecture where i lead a team of

31
00:01:14,720 --> 00:01:15,920
architects

32
00:01:15,920 --> 00:01:17,600
where we work with around 4 000

33
00:01:17,600 --> 00:01:19,840
developers helping the organization

34
00:01:19,840 --> 00:01:23,119
create and maintain secure and resilient

35
00:01:23,119 --> 00:01:26,119
software

36
00:01:26,240 --> 00:01:27,280
so

37
00:01:27,280 --> 00:01:28,720
yeah we're going to talk a little bit

38
00:01:28,720 --> 00:01:31,119
about s-bombs today

39
00:01:31,119 --> 00:01:33,840
and there's a

40
00:01:33,840 --> 00:01:34,880
i don't know

41
00:01:34,880 --> 00:01:36,880
most people have an analogy around

42
00:01:36,880 --> 00:01:38,640
s-bombs that

43
00:01:38,640 --> 00:01:41,759
it's a list of ingredients right at its

44
00:01:41,759 --> 00:01:44,640
very fundamental level this is kind of

45
00:01:44,640 --> 00:01:45,920
what it is

46
00:01:45,920 --> 00:01:46,799
um

47
00:01:46,799 --> 00:01:48,880
and as a consumer this just happens to

48
00:01:48,880 --> 00:01:51,680
be a list of ingredients of a back of an

49
00:01:51,680 --> 00:01:53,119
energy bar

50
00:01:53,119 --> 00:01:54,880
and as a consumer

51
00:01:54,880 --> 00:01:57,280
this allows me to make

52
00:01:57,280 --> 00:02:00,320
very basic risk-based decisions

53
00:02:00,320 --> 00:02:04,000
for example if if i'm allergic to nuts

54
00:02:04,000 --> 00:02:05,840
this is something that i might care

55
00:02:05,840 --> 00:02:07,119
about

56
00:02:07,119 --> 00:02:09,119
of course in the software world um we're

57
00:02:09,119 --> 00:02:11,120
not necessarily um

58
00:02:11,120 --> 00:02:13,120
looking for nuts we we me we might be

59
00:02:13,120 --> 00:02:15,840
looking for the presence of struts right

60
00:02:15,840 --> 00:02:17,520
because many organizations should and

61
00:02:17,520 --> 00:02:20,000
can be allergic to to certain types of

62
00:02:20,000 --> 00:02:22,000
frameworks

63
00:02:22,000 --> 00:02:23,040
um

64
00:02:23,040 --> 00:02:26,160
this talk is not going to be a

65
00:02:26,160 --> 00:02:28,720
a general purpose s-bomb talk there are

66
00:02:28,720 --> 00:02:30,879
plenty of those available i've probably

67
00:02:30,879 --> 00:02:34,319
given upwards of 10 of them this year

68
00:02:34,319 --> 00:02:37,040
but this is a really excellent talk by

69
00:02:37,040 --> 00:02:39,440
uh dr alan friedman from

70
00:02:39,440 --> 00:02:40,480
cisa

71
00:02:40,480 --> 00:02:42,000
as well as frederick

72
00:02:42,000 --> 00:02:44,560
from anthem um this was over at kubecon

73
00:02:44,560 --> 00:02:45,760
this year

74
00:02:45,760 --> 00:02:48,000
and uh it was a live event

75
00:02:48,000 --> 00:02:50,480
i kind of missed those but this is a

76
00:02:50,480 --> 00:02:52,160
really excellent

77
00:02:52,160 --> 00:02:54,720
presentation if you want to get some

78
00:02:54,720 --> 00:02:58,000
some background about what rs bombs and

79
00:02:58,000 --> 00:02:59,840
kind of why they're important and why

80
00:02:59,840 --> 00:03:02,480
you should care

81
00:03:03,519 --> 00:03:05,440
however one of the reasons why we all

82
00:03:05,440 --> 00:03:08,159
should care and although this is u.s

83
00:03:08,159 --> 00:03:11,680
specific the u.s federal government has

84
00:03:11,680 --> 00:03:14,560
a enormous budget for all kinds of

85
00:03:14,560 --> 00:03:16,800
things including software

86
00:03:16,800 --> 00:03:19,200
and when the u.s federal government says

87
00:03:19,200 --> 00:03:21,519
hey software vendors when i

88
00:03:21,519 --> 00:03:24,239
uh procure software for the federal

89
00:03:24,239 --> 00:03:26,799
government and by the way you you have

90
00:03:26,799 --> 00:03:29,120
to provide a software bill of material

91
00:03:29,120 --> 00:03:31,200
otherwise we won't actually purchase

92
00:03:31,200 --> 00:03:35,200
your stuff that has a downstream impact

93
00:03:35,200 --> 00:03:38,799
the reality is that none of us are are

94
00:03:38,799 --> 00:03:39,760
in the

95
00:03:39,760 --> 00:03:42,239
at the very edge of a of a software

96
00:03:42,239 --> 00:03:45,280
supply chain the majority of us are in

97
00:03:45,280 --> 00:03:47,599
the middle of a software supply chain we

98
00:03:47,599 --> 00:03:50,159
might we might produce stuff for

99
00:03:50,159 --> 00:03:52,239
external use but guess what we also

100
00:03:52,239 --> 00:03:54,480
consume stuff from from other vendors

101
00:03:54,480 --> 00:03:56,400
from other providers we're all kind of

102
00:03:56,400 --> 00:03:57,920
in the middle

103
00:03:57,920 --> 00:04:01,120
so with a massive budget that the us has

104
00:04:01,120 --> 00:04:03,360
this this kind of has a downstream

105
00:04:03,360 --> 00:04:05,360
impact on pretty much the entire

106
00:04:05,360 --> 00:04:06,959
software industry

107
00:04:06,959 --> 00:04:07,760
um

108
00:04:07,760 --> 00:04:09,920
the executive order signed earlier this

109
00:04:09,920 --> 00:04:12,959
year by president joseph biden

110
00:04:12,959 --> 00:04:15,599
deferred a lot of the requirements over

111
00:04:15,599 --> 00:04:17,120
to nist

112
00:04:17,120 --> 00:04:21,199
and the s-bom specific requirements were

113
00:04:21,199 --> 00:04:24,560
deferred even further to ntia who the

114
00:04:24,560 --> 00:04:26,240
national telecommunications and

115
00:04:26,240 --> 00:04:28,800
information administration who have been

116
00:04:28,800 --> 00:04:30,880
working kind of in this space

117
00:04:30,880 --> 00:04:34,400
formally since around 2018 or so

118
00:04:34,400 --> 00:04:37,360
and they created the minimum elements of

119
00:04:37,360 --> 00:04:38,720
an s-bomb

120
00:04:38,720 --> 00:04:40,320
and so

121
00:04:40,320 --> 00:04:43,120
good publication uh fairly light read if

122
00:04:43,120 --> 00:04:45,600
if you want to check it out

123
00:04:45,600 --> 00:04:47,840
but basically the minimum require the

124
00:04:47,840 --> 00:04:49,840
minimum elements of an s-bomb are

125
00:04:49,840 --> 00:04:51,759
essentially this

126
00:04:51,759 --> 00:04:53,600
supplier name what is the name of the

127
00:04:53,600 --> 00:04:55,040
component what is the version of the

128
00:04:55,040 --> 00:04:56,560
component

129
00:04:56,560 --> 00:05:00,400
what are maybe some identifiers

130
00:05:00,400 --> 00:05:02,880
and this is more about like cpe or

131
00:05:02,880 --> 00:05:05,759
package url something that i can

132
00:05:05,759 --> 00:05:09,039
use to look up that component in say the

133
00:05:09,039 --> 00:05:12,240
national vulnerability database

134
00:05:12,240 --> 00:05:14,960
my dependency relationships does my

135
00:05:14,960 --> 00:05:17,120
component include something else or does

136
00:05:17,120 --> 00:05:20,160
it depend on something else

137
00:05:20,160 --> 00:05:22,720
author and timestamp some this these are

138
00:05:22,720 --> 00:05:25,039
some basic fields

139
00:05:25,039 --> 00:05:25,840
uh

140
00:05:25,840 --> 00:05:28,080
that are required for

141
00:05:28,080 --> 00:05:32,080
really basic uh vulnerability management

142
00:05:32,080 --> 00:05:35,039
use cases so if i have

143
00:05:35,039 --> 00:05:37,840
a software bill of material for an

144
00:05:37,840 --> 00:05:40,960
application in my environment i will now

145
00:05:40,960 --> 00:05:41,919
know

146
00:05:41,919 --> 00:05:44,080
if one of the components in that

147
00:05:44,080 --> 00:05:46,560
application has a known vulnerability

148
00:05:46,560 --> 00:05:49,199
and i'll have the supplier information

149
00:05:49,199 --> 00:05:52,000
so i can contact the supplier for any

150
00:05:52,000 --> 00:05:53,759
remediation maybe there's a hot fix

151
00:05:53,759 --> 00:05:56,240
maybe there's a patch or an upgrade

152
00:05:56,240 --> 00:05:58,560
so it's it's really basic vulnerability

153
00:05:58,560 --> 00:06:01,759
management use cases

154
00:06:02,479 --> 00:06:04,400
but

155
00:06:04,400 --> 00:06:06,639
minimum elements um

156
00:06:06,639 --> 00:06:09,600
are kind of a uh um you know the first

157
00:06:09,600 --> 00:06:11,680
dragon but again no no dragons were

158
00:06:11,680 --> 00:06:12,960
harmed in the in the creation of this

159
00:06:12,960 --> 00:06:14,560
presentation

160
00:06:14,560 --> 00:06:17,440
minimum fields are going to result in

161
00:06:17,440 --> 00:06:19,120
minimal benefit

162
00:06:19,120 --> 00:06:20,400
um so

163
00:06:20,400 --> 00:06:24,400
what else should we actually care about

164
00:06:24,400 --> 00:06:26,560
well here's a few of these things that

165
00:06:26,560 --> 00:06:28,319
we should care about

166
00:06:28,319 --> 00:06:31,199
authenticity integrity verification

167
00:06:31,199 --> 00:06:34,720
services etc and we're going to dive in

168
00:06:34,720 --> 00:06:35,759
through

169
00:06:35,759 --> 00:06:37,759
some of these

170
00:06:37,759 --> 00:06:40,080
in in just a moment here and let's

171
00:06:40,080 --> 00:06:43,360
let's start with authenticity

172
00:06:43,360 --> 00:06:47,199
if i have an s-bob if i'm actually

173
00:06:47,199 --> 00:06:50,639
can produce if i'm actually

174
00:06:50,639 --> 00:06:52,960
if a customer asks for an s bomb and i

175
00:06:52,960 --> 00:06:55,840
give them an s-bomb

176
00:06:55,840 --> 00:06:58,080
there's no mechanism for sharing these

177
00:06:58,080 --> 00:07:00,319
things today how does the consumer of

178
00:07:00,319 --> 00:07:02,639
that s-bomb know that it hasn't been

179
00:07:02,639 --> 00:07:04,000
tampered with

180
00:07:04,000 --> 00:07:05,120
and

181
00:07:05,120 --> 00:07:08,560
so there's a way to sign right we can we

182
00:07:08,560 --> 00:07:12,000
can digitally sign s-bombs today and um

183
00:07:12,000 --> 00:07:15,280
so authenticity is is one security and

184
00:07:15,280 --> 00:07:17,680
really important security use case that

185
00:07:17,680 --> 00:07:19,840
we all should care about

186
00:07:19,840 --> 00:07:20,800
our

187
00:07:20,800 --> 00:07:23,759
global software supply chains are

188
00:07:23,759 --> 00:07:25,840
under constant attack

189
00:07:25,840 --> 00:07:26,800
and

190
00:07:26,800 --> 00:07:29,360
whether it's from inside

191
00:07:29,360 --> 00:07:31,360
solar winds for example where they they

192
00:07:31,360 --> 00:07:33,360
actually broke into the build system and

193
00:07:33,360 --> 00:07:35,360
and did all kinds of things after

194
00:07:35,360 --> 00:07:37,199
gaining access to that

195
00:07:37,199 --> 00:07:39,599
um so it's kind of important not just

196
00:07:39,599 --> 00:07:42,479
for the transfer between entities but

197
00:07:42,479 --> 00:07:44,160
even signing within the same

198
00:07:44,160 --> 00:07:46,560
organization because

199
00:07:46,560 --> 00:07:48,879
you might actually discover an issue

200
00:07:48,879 --> 00:07:51,360
that you didn't realize you had if you

201
00:07:51,360 --> 00:07:54,160
are signing things and then verifying

202
00:07:54,160 --> 00:07:56,080
those signatures throughout your your

203
00:07:56,080 --> 00:07:58,800
entire process

204
00:07:58,800 --> 00:08:00,960
the integrity verification if i have a

205
00:08:00,960 --> 00:08:02,639
component

206
00:08:02,639 --> 00:08:04,879
has it been modified from its original

207
00:08:04,879 --> 00:08:06,000
thing

208
00:08:06,000 --> 00:08:08,800
that's kind of important

209
00:08:08,800 --> 00:08:11,840
again the solarwinds incident

210
00:08:11,840 --> 00:08:14,479
this was actually part of that part of

211
00:08:14,479 --> 00:08:16,240
that issue

212
00:08:16,240 --> 00:08:20,000
so in many cases however

213
00:08:20,000 --> 00:08:20,800
the

214
00:08:20,800 --> 00:08:24,000
a component might have been modified and

215
00:08:24,000 --> 00:08:26,240
it might ben might have been intentional

216
00:08:26,240 --> 00:08:28,000
maybe they backported some security

217
00:08:28,000 --> 00:08:29,680
fixes whatever

218
00:08:29,680 --> 00:08:33,839
but in most cases if you if you have

219
00:08:33,839 --> 00:08:36,719
um a mismatch in your

220
00:08:36,719 --> 00:08:38,839
integrity the verification of that

221
00:08:38,839 --> 00:08:41,599
integrity that's interesting and it's

222
00:08:41,599 --> 00:08:43,200
it's a data point that as an

223
00:08:43,200 --> 00:08:45,519
organization you should probably care

224
00:08:45,519 --> 00:08:47,839
about

225
00:08:49,200 --> 00:08:51,519
services um

226
00:08:51,519 --> 00:08:52,839
components

227
00:08:52,839 --> 00:08:56,560
software doesn't live in a bubble

228
00:08:56,560 --> 00:08:59,839
i can't remember the last time i used

229
00:08:59,839 --> 00:09:01,040
software

230
00:09:01,040 --> 00:09:03,440
that didn't phone home to something

231
00:09:03,440 --> 00:09:05,279
right that didn't try to automatically

232
00:09:05,279 --> 00:09:06,399
update

233
00:09:06,399 --> 00:09:08,480
that didn't rely on some kind of

234
00:09:08,480 --> 00:09:10,720
external web service

235
00:09:10,720 --> 00:09:13,600
services are a very important part of

236
00:09:13,600 --> 00:09:14,320
the

237
00:09:14,320 --> 00:09:16,720
software inventory and needs to be

238
00:09:16,720 --> 00:09:18,080
treated as such

239
00:09:18,080 --> 00:09:20,640
the minimum fields don't account for

240
00:09:20,640 --> 00:09:23,120
that they don't account for services

241
00:09:23,120 --> 00:09:26,160
which rules out a very large percentage

242
00:09:26,160 --> 00:09:28,560
of software that's created

243
00:09:28,560 --> 00:09:29,360
and

244
00:09:29,360 --> 00:09:32,080
a very important part of software that's

245
00:09:32,080 --> 00:09:34,160
created services are really important

246
00:09:34,160 --> 00:09:36,080
and we should care about those in our in

247
00:09:36,080 --> 00:09:38,160
our global inventory of software

248
00:09:38,160 --> 00:09:40,719
components

249
00:09:40,880 --> 00:09:45,600
now in many cases um organizations

250
00:09:45,600 --> 00:09:48,000
can and and will

251
00:09:48,000 --> 00:09:51,760
make modifications to software

252
00:09:51,760 --> 00:09:54,959
in many cases these

253
00:09:54,959 --> 00:09:58,800
these cases are typically the result of

254
00:09:58,800 --> 00:10:01,279
using a third-party component that

255
00:10:01,279 --> 00:10:03,440
might no longer be supported right maybe

256
00:10:03,440 --> 00:10:05,839
the project is defunct or maybe that

257
00:10:05,839 --> 00:10:09,040
that branch of that of that component is

258
00:10:09,040 --> 00:10:11,200
no longer supported

259
00:10:11,200 --> 00:10:12,959
but you have tight coupling in your

260
00:10:12,959 --> 00:10:15,279
software you can't

261
00:10:15,279 --> 00:10:17,120
automatically upgrade to the latest

262
00:10:17,120 --> 00:10:18,560
version so

263
00:10:18,560 --> 00:10:21,440
what is a responsible organization to do

264
00:10:21,440 --> 00:10:23,760
well they backport the security fixes

265
00:10:23,760 --> 00:10:25,680
right and

266
00:10:25,680 --> 00:10:28,560
that is part of your component inventory

267
00:10:28,560 --> 00:10:30,800
right it's interesting information

268
00:10:30,800 --> 00:10:33,760
because it tells the consumer that yeah

269
00:10:33,760 --> 00:10:37,680
i'm actually using this this component

270
00:10:37,680 --> 00:10:39,839
yes i know that it's vulnerable but you

271
00:10:39,839 --> 00:10:42,800
know what i'm a responsible organization

272
00:10:42,800 --> 00:10:44,800
i've actually mitigated

273
00:10:44,800 --> 00:10:47,360
this particular vulnerability by

274
00:10:47,360 --> 00:10:50,320
introducing this code block that fixes

275
00:10:50,320 --> 00:10:52,079
the issue so

276
00:10:52,079 --> 00:10:54,399
hello mr customer

277
00:10:54,399 --> 00:10:56,399
you don't have to trust me that i fixed

278
00:10:56,399 --> 00:10:59,200
it here's the evidence in the s-bomb you

279
00:10:59,200 --> 00:11:02,079
can verify it for yourself so really

280
00:11:02,079 --> 00:11:04,079
important use case that

281
00:11:04,079 --> 00:11:05,839
really is applicable to many

282
00:11:05,839 --> 00:11:07,660
organizations

283
00:11:07,660 --> 00:11:08,959
[Music]

284
00:11:08,959 --> 00:11:12,399
now no software is perfect right every

285
00:11:12,399 --> 00:11:15,120
piece of software is going to contain a

286
00:11:15,120 --> 00:11:18,160
vulnerability at some point in its life

287
00:11:18,160 --> 00:11:21,360
i'm responsible for you know a few cves

288
00:11:21,360 --> 00:11:23,839
and i know how to do this um you know

289
00:11:23,839 --> 00:11:26,720
writing secure software is hard

290
00:11:26,720 --> 00:11:29,200
right the stacks that were all given as

291
00:11:29,200 --> 00:11:31,600
developers they're all inherently broken

292
00:11:31,600 --> 00:11:33,920
rfcs are broken everything is

293
00:11:33,920 --> 00:11:36,240
is it's challenging

294
00:11:36,240 --> 00:11:38,560
and a tremendous amount of empathy has

295
00:11:38,560 --> 00:11:40,880
to be placed toward development teams

296
00:11:40,880 --> 00:11:42,480
because they're expected to perform

297
00:11:42,480 --> 00:11:44,720
miracles and get it get it all right

298
00:11:44,720 --> 00:11:47,120
that's that's just not reality

299
00:11:47,120 --> 00:11:49,920
but what we need to do is when we're

300
00:11:49,920 --> 00:11:52,560
creating our inventory of components

301
00:11:52,560 --> 00:11:55,839
have a reference to a feed for security

302
00:11:55,839 --> 00:11:58,320
advisories so that we can get

303
00:11:58,320 --> 00:12:00,720
automatic updates on

304
00:12:00,720 --> 00:12:02,800
is this component that i'm using is it

305
00:12:02,800 --> 00:12:04,560
vulnerable or not even if that

306
00:12:04,560 --> 00:12:06,720
vulnerability is not in a public

307
00:12:06,720 --> 00:12:10,760
database like the nvd

308
00:12:11,680 --> 00:12:14,000
vulnerability disclosure now this is not

309
00:12:14,000 --> 00:12:16,320
disclosure in

310
00:12:16,320 --> 00:12:18,480
this word should probably change

311
00:12:18,480 --> 00:12:21,600
but an s bond that actually communicates

312
00:12:21,600 --> 00:12:22,360
the

313
00:12:22,360 --> 00:12:25,200
vulnerabilities that this product

314
00:12:25,200 --> 00:12:26,959
actually has now

315
00:12:26,959 --> 00:12:28,800
most software vendors are not going to

316
00:12:28,800 --> 00:12:29,760
do this right they're going to

317
00:12:29,760 --> 00:12:33,279
communicate the inventory however

318
00:12:33,279 --> 00:12:34,720
not all s-bombs are going to come from

319
00:12:34,720 --> 00:12:37,360
the vendors right they might come from a

320
00:12:37,360 --> 00:12:40,399
third party who actually audits

321
00:12:40,399 --> 00:12:43,519
a piece of software and vets it for

322
00:12:43,519 --> 00:12:46,560
approval for a certain environment right

323
00:12:46,560 --> 00:12:49,839
so it's very important to be able to

324
00:12:49,839 --> 00:12:52,639
identify not only the inventory

325
00:12:52,639 --> 00:12:54,399
but the vulnerabilities that that

326
00:12:54,399 --> 00:12:57,120
inventory has at a specific point in

327
00:12:57,120 --> 00:12:59,120
time because

328
00:12:59,120 --> 00:13:01,040
that's really important if you need to

329
00:13:01,040 --> 00:13:04,079
go back later for forensic or any kind

330
00:13:04,079 --> 00:13:07,330
of investigative purposes

331
00:13:07,330 --> 00:13:09,839
[Music]

332
00:13:09,839 --> 00:13:13,519
software is really really complex

333
00:13:13,519 --> 00:13:15,279
and

334
00:13:15,279 --> 00:13:19,360
you know stock overflow is a a and

335
00:13:19,360 --> 00:13:21,839
services like that are

336
00:13:21,839 --> 00:13:24,880
a popular destination for not only

337
00:13:24,880 --> 00:13:27,360
developers but security people and

338
00:13:27,360 --> 00:13:30,240
hackers and everybody else

339
00:13:30,240 --> 00:13:32,560
knowing what's in your software

340
00:13:32,560 --> 00:13:34,880
right whether you maybe you have a

341
00:13:34,880 --> 00:13:38,079
component that you got from a supplier

342
00:13:38,079 --> 00:13:40,959
and you don't necessarily know if

343
00:13:40,959 --> 00:13:43,120
what else is in their sausage so to

344
00:13:43,120 --> 00:13:44,000
speak

345
00:13:44,000 --> 00:13:46,880
um you can specify that

346
00:13:46,880 --> 00:13:48,800
saying hey you know i got this component

347
00:13:48,800 --> 00:13:50,880
from this supplier but

348
00:13:50,880 --> 00:13:54,160
i don't know anything more beyond that

349
00:13:54,160 --> 00:13:56,320
you can also say that hey i've got this

350
00:13:56,320 --> 00:13:59,040
opponent and i know exactly what's in it

351
00:13:59,040 --> 00:14:00,399
um

352
00:14:00,399 --> 00:14:02,079
and there's all kinds of

353
00:14:02,079 --> 00:14:04,720
middle ground in in there as well

354
00:14:04,720 --> 00:14:08,160
um but software's complex and even a a

355
00:14:08,160 --> 00:14:10,880
small little code snippet

356
00:14:10,880 --> 00:14:14,839
um can wreak havoc to an otherwise you

357
00:14:14,839 --> 00:14:18,000
know non-vulnerable component right

358
00:14:18,000 --> 00:14:20,720
being able to track that vulnerable code

359
00:14:20,720 --> 00:14:23,839
and its use across multiple different

360
00:14:23,839 --> 00:14:25,760
components so

361
00:14:25,760 --> 00:14:28,720
being able to identify the completeness

362
00:14:28,720 --> 00:14:31,839
or the known unknowns is is really

363
00:14:31,839 --> 00:14:35,519
important security use case

364
00:14:36,399 --> 00:14:38,959
providence provenance is really about

365
00:14:38,959 --> 00:14:40,800
the origin story

366
00:14:40,800 --> 00:14:44,160
this is where we got something from if

367
00:14:44,160 --> 00:14:46,240
there's anyone in the audience that is

368
00:14:46,240 --> 00:14:48,639
has been reading up on

369
00:14:48,639 --> 00:14:50,959
the salsa framework for example that's

370
00:14:50,959 --> 00:14:53,199
open ssf

371
00:14:53,199 --> 00:14:55,680
their definition of provenance

372
00:14:55,680 --> 00:14:59,360
is is very very different than the mitre

373
00:14:59,360 --> 00:15:02,800
owasp and u.s english versions of

374
00:15:02,800 --> 00:15:04,480
definitions of the word

375
00:15:04,480 --> 00:15:06,399
providence is really origin

376
00:15:06,399 --> 00:15:09,279
and in this case origin could be a few

377
00:15:09,279 --> 00:15:10,560
different things

378
00:15:10,560 --> 00:15:13,040
it could be the supplier like a a

379
00:15:13,040 --> 00:15:14,959
commercial entity where i obtain

380
00:15:14,959 --> 00:15:16,240
software from

381
00:15:16,240 --> 00:15:18,480
it could be the the public repository in

382
00:15:18,480 --> 00:15:20,560
which i got something from maven central

383
00:15:20,560 --> 00:15:21,600
npm

384
00:15:21,600 --> 00:15:25,040
um you know pi p i whatever

385
00:15:25,040 --> 00:15:27,680
it could be it could be a country you

386
00:15:27,680 --> 00:15:29,759
know maybe i got something from the

387
00:15:29,759 --> 00:15:33,040
united states or from israel or from an

388
00:15:33,040 --> 00:15:35,920
adversarial nation state right that's

389
00:15:35,920 --> 00:15:38,000
really interesting interesting

390
00:15:38,000 --> 00:15:41,120
information especially for fosee use

391
00:15:41,120 --> 00:15:42,839
cases for

392
00:15:42,839 --> 00:15:45,199
foci foreign

393
00:15:45,199 --> 00:15:47,680
ownership control and influence it's a

394
00:15:47,680 --> 00:15:49,519
u.s centric term

395
00:15:49,519 --> 00:15:50,959
but that

396
00:15:50,959 --> 00:15:53,199
that

397
00:15:53,600 --> 00:15:55,279
concept

398
00:15:55,279 --> 00:15:57,040
all world governments basically have the

399
00:15:57,040 --> 00:15:58,320
same concept

400
00:15:58,320 --> 00:16:00,320
uh so knowing where you got something

401
00:16:00,320 --> 00:16:03,920
from is is really really important uh

402
00:16:03,920 --> 00:16:06,480
even if you verify it and it's

403
00:16:06,480 --> 00:16:09,199
in its it's it hasn't been tainted just

404
00:16:09,199 --> 00:16:11,120
still knowing where you got something

405
00:16:11,120 --> 00:16:15,839
from is part of the the cycle of trust

406
00:16:16,320 --> 00:16:19,519
pedigree uh pedigree really refers to

407
00:16:19,519 --> 00:16:22,880
the the dna what is my makeup what is my

408
00:16:22,880 --> 00:16:26,639
lineage of my components

409
00:16:26,639 --> 00:16:28,880
components you know open source software

410
00:16:28,880 --> 00:16:31,040
is is the is the ultimate

411
00:16:31,040 --> 00:16:33,920
uh supply chain right components can and

412
00:16:33,920 --> 00:16:37,199
will be forked and modified renamed uh

413
00:16:37,199 --> 00:16:38,880
redistributed

414
00:16:38,880 --> 00:16:41,759
at infintium right for on and on and on

415
00:16:41,759 --> 00:16:44,240
and being able to identify what your

416
00:16:44,240 --> 00:16:46,720
component is and all your modifications

417
00:16:46,720 --> 00:16:49,440
that you've made to it so that you can

418
00:16:49,440 --> 00:16:50,560
represent

419
00:16:50,560 --> 00:16:53,279
your modified version to the world is a

420
00:16:53,279 --> 00:16:56,639
really important use case especially if

421
00:16:56,639 --> 00:16:59,199
those use cases involve you

422
00:16:59,199 --> 00:17:01,680
back porting security fixes

423
00:17:01,680 --> 00:17:04,160
fixing defects adding additional

424
00:17:04,160 --> 00:17:05,839
features that maybe that component

425
00:17:05,839 --> 00:17:08,319
didn't have to begin with well your

426
00:17:08,319 --> 00:17:10,079
modifications are part of that

427
00:17:10,079 --> 00:17:12,000
components pedigree though and you can

428
00:17:12,000 --> 00:17:16,079
describe those with s bombs today

429
00:17:16,079 --> 00:17:18,160
and you know security isn't the only use

430
00:17:18,160 --> 00:17:20,319
case there's other non-security use

431
00:17:20,319 --> 00:17:22,319
cases out there including license

432
00:17:22,319 --> 00:17:25,280
compliance um open chain for example is

433
00:17:25,280 --> 00:17:28,079
is relevant in many many organizations

434
00:17:28,079 --> 00:17:31,600
and s-bombs can can be used as a at the

435
00:17:31,600 --> 00:17:33,440
station or as a

436
00:17:33,440 --> 00:17:35,679
compliance artifact for for open chain

437
00:17:35,679 --> 00:17:37,360
compliance for example

438
00:17:37,360 --> 00:17:38,880
[Music]

439
00:17:38,880 --> 00:17:41,600
and of course there's many many more use

440
00:17:41,600 --> 00:17:45,919
cases that that we as s-bomb producers

441
00:17:45,919 --> 00:17:48,080
and s-bomb consumers

442
00:17:48,080 --> 00:17:49,670
should actually care about

443
00:17:49,670 --> 00:17:52,799
[Music]

444
00:17:53,360 --> 00:17:55,840
now when the

445
00:17:55,840 --> 00:17:58,960
the ntia the national telecommunications

446
00:17:58,960 --> 00:18:01,200
and if information administration put

447
00:18:01,200 --> 00:18:04,400
out its minimum elements it specked out

448
00:18:04,400 --> 00:18:08,080
three different formats uh cyclone dx

449
00:18:08,080 --> 00:18:11,360
which originated uh from the owasp work

450
00:18:11,360 --> 00:18:15,280
and is now a flagship oas project spdx

451
00:18:15,280 --> 00:18:18,799
which is a linux foundation project

452
00:18:18,799 --> 00:18:21,080
version 2.2

453
00:18:21,080 --> 00:18:24,480
2.2.1 i think is also now an iso

454
00:18:24,480 --> 00:18:26,080
standard

455
00:18:26,080 --> 00:18:29,840
and then suid uh software id um was also

456
00:18:29,840 --> 00:18:31,600
deemed as a

457
00:18:31,600 --> 00:18:34,640
bill of material format uh also an iso

458
00:18:34,640 --> 00:18:35,840
standard

459
00:18:35,840 --> 00:18:36,720
um

460
00:18:36,720 --> 00:18:38,960
the nvd just a little bit of background

461
00:18:38,960 --> 00:18:41,520
the nvd has been trying to transition

462
00:18:41,520 --> 00:18:42,640
away from

463
00:18:42,640 --> 00:18:46,160
common platform enumeration or cpes

464
00:18:46,160 --> 00:18:49,679
which is used to identify software and

465
00:18:49,679 --> 00:18:51,919
if that software has any vulnerabilities

466
00:18:51,919 --> 00:18:54,080
has been trying to transition away from

467
00:18:54,080 --> 00:18:56,480
cpes which are deprecated

468
00:18:56,480 --> 00:18:59,440
into using suid and

469
00:18:59,440 --> 00:19:01,760
we're still kind of waiting um so

470
00:19:01,760 --> 00:19:03,679
hopefully that will happen soon so

471
00:19:03,679 --> 00:19:06,400
that's one of the reasons why suit is

472
00:19:06,400 --> 00:19:08,400
kind of included with this

473
00:19:08,400 --> 00:19:09,600
however

474
00:19:09,600 --> 00:19:13,679
the um not all s-bom formats are created

475
00:19:13,679 --> 00:19:16,960
equal in fact once you actually get

476
00:19:16,960 --> 00:19:20,000
past the minimum elements

477
00:19:20,000 --> 00:19:23,360
format really really matters

478
00:19:23,360 --> 00:19:25,200
and in fact

479
00:19:25,200 --> 00:19:28,480
the minimum elements are written

480
00:19:28,480 --> 00:19:29,840
in a way

481
00:19:29,840 --> 00:19:31,280
where

482
00:19:31,280 --> 00:19:32,480
technically

483
00:19:32,480 --> 00:19:33,600
swit

484
00:19:33,600 --> 00:19:37,760
is not capable of achieving the minimum

485
00:19:37,760 --> 00:19:40,320
requirements um

486
00:19:40,320 --> 00:19:42,160
i'm not going to get into the the

487
00:19:42,160 --> 00:19:43,679
reasons why

488
00:19:43,679 --> 00:19:47,360
that happened but i can say that nist

489
00:19:47,360 --> 00:19:52,640
and ntia are sister agencies uh both for

490
00:19:52,640 --> 00:19:55,760
rolling up to the department of commerce

491
00:19:55,760 --> 00:19:56,480
so

492
00:19:56,480 --> 00:19:59,280
the only two formats that organizations

493
00:19:59,280 --> 00:20:00,960
should be concerned about

494
00:20:00,960 --> 00:20:04,799
is cyclone dx and

495
00:20:04,840 --> 00:20:08,159
spdx now cyclone dx is specifically

496
00:20:08,159 --> 00:20:12,320
designed to be a bill of material format

497
00:20:12,320 --> 00:20:14,320
but

498
00:20:14,320 --> 00:20:16,480
what is spdx

499
00:20:16,480 --> 00:20:18,880
sp software package

500
00:20:18,880 --> 00:20:21,679
data exchange i think it's

501
00:20:21,679 --> 00:20:23,440
called

502
00:20:23,440 --> 00:20:25,360
and here comes hazy dragon i want to

503
00:20:25,360 --> 00:20:26,880
introduce you to hazy dragon because

504
00:20:26,880 --> 00:20:29,520
hazy dragon is a little confused right

505
00:20:29,520 --> 00:20:31,600
right about now

506
00:20:31,600 --> 00:20:34,559
it's confused because it it it doesn't

507
00:20:34,559 --> 00:20:37,440
know a lot of identity right about now

508
00:20:37,440 --> 00:20:40,480
because it it read through this little

509
00:20:40,480 --> 00:20:43,919
paragraph on the spdx specification

510
00:20:43,919 --> 00:20:45,360
where it

511
00:20:45,360 --> 00:20:49,520
describes asset identifiers and other

512
00:20:49,520 --> 00:20:50,640
content

513
00:20:50,640 --> 00:20:54,559
believed to be relevant to a package

514
00:20:54,559 --> 00:20:58,720
and that sentence is very very important

515
00:20:58,720 --> 00:21:00,000
because

516
00:21:00,000 --> 00:21:01,039
one

517
00:21:01,039 --> 00:21:04,000
the com the package doesn't have an

518
00:21:04,000 --> 00:21:05,520
identity a

519
00:21:05,520 --> 00:21:08,720
an identity that actually maps out to

520
00:21:08,720 --> 00:21:10,799
a database like the national

521
00:21:10,799 --> 00:21:13,120
vulnerability database or oss index or

522
00:21:13,120 --> 00:21:14,960
any of the others uh vulneradb from

523
00:21:14,960 --> 00:21:16,799
risk-based security

524
00:21:16,799 --> 00:21:21,200
rather it uses external references

525
00:21:21,200 --> 00:21:22,159
with

526
00:21:22,159 --> 00:21:23,919
a belief system

527
00:21:23,919 --> 00:21:26,720
and this is really really important

528
00:21:26,720 --> 00:21:29,679
because the specification

529
00:21:29,679 --> 00:21:32,320
is flexible it allows you to have

530
00:21:32,320 --> 00:21:34,720
multiple maven coordinates multiple npm

531
00:21:34,720 --> 00:21:35,919
coordinates

532
00:21:35,919 --> 00:21:39,760
multiple package urls and multiple cpes

533
00:21:39,760 --> 00:21:42,880
for the exact same package obviously

534
00:21:42,880 --> 00:21:45,200
this is not possible in the real world

535
00:21:45,200 --> 00:21:46,799
and certainly you wouldn't want this for

536
00:21:46,799 --> 00:21:49,280
a bill of material specification

537
00:21:49,280 --> 00:21:50,080
but

538
00:21:50,080 --> 00:21:51,440
a belief

539
00:21:51,440 --> 00:21:53,200
is not a fact

540
00:21:53,200 --> 00:21:56,400
and facts matter in a software bill of

541
00:21:56,400 --> 00:21:58,080
material and to provide a little bit of

542
00:21:58,080 --> 00:21:59,520
context

543
00:21:59,520 --> 00:22:01,840
and not just for this particular case of

544
00:22:01,840 --> 00:22:04,000
of just the fact based approach let's

545
00:22:04,000 --> 00:22:06,720
let's take a container as an example but

546
00:22:06,720 --> 00:22:08,480
not this kind of container we want to

547
00:22:08,480 --> 00:22:10,640
talk about this kind of container

548
00:22:10,640 --> 00:22:14,240
and inside this container maybe there's

549
00:22:14,240 --> 00:22:15,760
100 of these

550
00:22:15,760 --> 00:22:18,240
and inside each one of these pallets i

551
00:22:18,240 --> 00:22:19,039
have

552
00:22:19,039 --> 00:22:21,120
a thousand different widgets

553
00:22:21,120 --> 00:22:23,280
and each one of those widgets has one of

554
00:22:23,280 --> 00:22:24,320
these

555
00:22:24,320 --> 00:22:27,360
and this tells me exactly

556
00:22:27,360 --> 00:22:29,679
what that product is

557
00:22:29,679 --> 00:22:33,039
there's no belief there's no evidence

558
00:22:33,039 --> 00:22:38,720
it's just a fact this component is that

559
00:22:38,960 --> 00:22:42,720
the problem with a lot of possibilities

560
00:22:42,720 --> 00:22:45,919
is that possibilities are not actionable

561
00:22:45,919 --> 00:22:48,640
right possibilities might be good for

562
00:22:48,640 --> 00:22:51,440
strategic initiatives across an

563
00:22:51,440 --> 00:22:54,320
organization however when you want to do

564
00:22:54,320 --> 00:22:56,240
impact analysis and vulnerability

565
00:22:56,240 --> 00:22:58,080
response

566
00:22:58,080 --> 00:23:00,400
if i have tens of thousands of assets in

567
00:23:00,400 --> 00:23:02,480
my environment and i need to very

568
00:23:02,480 --> 00:23:04,799
quickly identify which ones are going to

569
00:23:04,799 --> 00:23:07,120
be impacted by a potentially vulnerable

570
00:23:07,120 --> 00:23:09,120
vulnerable component

571
00:23:09,120 --> 00:23:11,600
possibilities are not what i want

572
00:23:11,600 --> 00:23:14,480
i want very specific

573
00:23:14,480 --> 00:23:17,360
things that my teams are going to have

574
00:23:17,360 --> 00:23:20,640
to respond to and i will prioritize them

575
00:23:20,640 --> 00:23:24,080
based on the business risk

576
00:23:24,080 --> 00:23:26,120
if i have to go through a bunch of

577
00:23:26,120 --> 00:23:27,679
possibilities

578
00:23:27,679 --> 00:23:29,600
that's going to increase

579
00:23:29,600 --> 00:23:31,760
my response time

580
00:23:31,760 --> 00:23:33,360
to the point where

581
00:23:33,360 --> 00:23:37,280
is s-bomb really going to be beneficial

582
00:23:37,280 --> 00:23:38,559
i don't know

583
00:23:38,559 --> 00:23:39,280
so

584
00:23:39,280 --> 00:23:42,159
that doesn't make hazy dragon all that

585
00:23:42,159 --> 00:23:45,679
happy his head explodes

586
00:23:46,080 --> 00:23:48,799
but spdick and this is this is not a

587
00:23:48,799 --> 00:23:52,320
bash on spdx spdx is is actually a

588
00:23:52,320 --> 00:23:53,919
really good format

589
00:23:53,919 --> 00:23:56,799
for what it was designed to do

590
00:23:56,799 --> 00:23:59,919
but i grepped out of curiosity i grabbed

591
00:23:59,919 --> 00:24:02,880
the words bomb s-bomb inventory and

592
00:24:02,880 --> 00:24:06,480
materials and i came across a single

593
00:24:06,480 --> 00:24:08,960
occurrence of the word materials

594
00:24:08,960 --> 00:24:11,760
but it was in relation to a data license

595
00:24:11,760 --> 00:24:13,840
paragraph

596
00:24:13,840 --> 00:24:16,720
so i i still have a question

597
00:24:16,720 --> 00:24:20,400
maybe you can help me answer it or not

598
00:24:22,320 --> 00:24:23,600
i think

599
00:24:23,600 --> 00:24:26,720
instead of looking at the two formats as

600
00:24:26,720 --> 00:24:30,080
one or the other in terms of competition

601
00:24:30,080 --> 00:24:33,279
i think we have to start framing it as

602
00:24:33,279 --> 00:24:34,240
using

603
00:24:34,240 --> 00:24:36,720
the best tool for the job

604
00:24:36,720 --> 00:24:39,840
now the hammer was invented three

605
00:24:39,840 --> 00:24:43,039
million years ago when caveman decided

606
00:24:43,039 --> 00:24:46,799
to attach a stick to a rock

607
00:24:46,799 --> 00:24:50,240
um and it wasn't until the 15th century

608
00:24:50,240 --> 00:24:52,960
that the screwdriver was invented now

609
00:24:52,960 --> 00:24:55,520
did the screwdriver replace the hammer

610
00:24:55,520 --> 00:24:56,480
no

611
00:24:56,480 --> 00:24:58,880
it's a different tool for a different

612
00:24:58,880 --> 00:25:01,279
job and as

613
00:25:01,279 --> 00:25:03,600
s-bomb creators

614
00:25:03,600 --> 00:25:05,039
as s-bomb

615
00:25:05,039 --> 00:25:07,919
consumers we need to choose the best

616
00:25:07,919 --> 00:25:12,919
tool for the job that we are doing

617
00:25:14,080 --> 00:25:16,720
and when we are creating s-bombs there

618
00:25:16,720 --> 00:25:18,320
are some hidden dragons in there so

619
00:25:18,320 --> 00:25:19,840
let's let's find out what some of those

620
00:25:19,840 --> 00:25:20,160
are

621
00:25:20,160 --> 00:25:22,240
[Music]

622
00:25:22,240 --> 00:25:24,559
now there's a lot of different ways that

623
00:25:24,559 --> 00:25:25,919
we can

624
00:25:25,919 --> 00:25:28,720
produce s-bombs um there's there's

625
00:25:28,720 --> 00:25:30,480
there's probably more ways to produce

626
00:25:30,480 --> 00:25:33,840
s-bonds than there are to uh consume and

627
00:25:33,840 --> 00:25:35,840
analyze them for sure

628
00:25:35,840 --> 00:25:39,120
um my favorite way is is build time

629
00:25:39,120 --> 00:25:41,919
integration right i like integrating

630
00:25:41,919 --> 00:25:44,799
s-bom creation in the build life cycle

631
00:25:44,799 --> 00:25:47,600
itself if i can tie onto a package

632
00:25:47,600 --> 00:25:49,039
management

633
00:25:49,039 --> 00:25:53,520
system like maven or npm or you know

634
00:25:53,520 --> 00:25:55,600
any of the other composer or you know

635
00:25:55,600 --> 00:25:58,240
cocoapods or whatever the case is if i

636
00:25:58,240 --> 00:26:00,559
can tie into one of those

637
00:26:00,559 --> 00:26:04,159
that those package managers um even the

638
00:26:04,159 --> 00:26:06,799
kind of the quirky ones like go

639
00:26:06,799 --> 00:26:09,760
they provide a lot of rich metadata

640
00:26:09,760 --> 00:26:12,960
about the components that i'm pulling in

641
00:26:12,960 --> 00:26:16,320
to my software and i can reuse i can i

642
00:26:16,320 --> 00:26:18,400
can use that information in the creation

643
00:26:18,400 --> 00:26:19,679
of an s-bom

644
00:26:19,679 --> 00:26:21,679
this is this is a lot of data that you

645
00:26:21,679 --> 00:26:24,400
don't get after the fact right it's very

646
00:26:24,400 --> 00:26:28,159
hard to obtain a lot of this data

647
00:26:28,159 --> 00:26:29,760
afterwards right so

648
00:26:29,760 --> 00:26:32,240
integrating into the build has a lot of

649
00:26:32,240 --> 00:26:34,080
different advantages

650
00:26:34,080 --> 00:26:35,200
however

651
00:26:35,200 --> 00:26:36,559
there's some

652
00:26:36,559 --> 00:26:40,159
you know most build systems have a build

653
00:26:40,159 --> 00:26:42,480
life cycle um there's very few that

654
00:26:42,480 --> 00:26:44,559
actually just have like a a lock file

655
00:26:44,559 --> 00:26:47,039
and it's just written in stone right

656
00:26:47,039 --> 00:26:48,960
they all typically have some kind of

657
00:26:48,960 --> 00:26:51,600
variance and the life cycle actually

658
00:26:51,600 --> 00:26:52,880
matters

659
00:26:52,880 --> 00:26:54,880
for example if you take maven who has a

660
00:26:54,880 --> 00:26:57,520
very predetermined

661
00:26:57,520 --> 00:26:59,760
formal life cycle

662
00:26:59,760 --> 00:27:00,799
its

663
00:27:00,799 --> 00:27:03,919
dependency graph isn't fully resolved

664
00:27:03,919 --> 00:27:07,039
until certain stages of that life cycle

665
00:27:07,039 --> 00:27:09,679
so if you were to analyze a pom for

666
00:27:09,679 --> 00:27:11,679
example outside of the outside of the

667
00:27:11,679 --> 00:27:13,039
build itself

668
00:27:13,039 --> 00:27:16,240
your inventory and your dependency graph

669
00:27:16,240 --> 00:27:19,120
would be inaccurate because it didn't go

670
00:27:19,120 --> 00:27:20,559
through that life cycle

671
00:27:20,559 --> 00:27:23,679
likewise if i'm creating an uh a

672
00:27:23,679 --> 00:27:25,679
javascript front end

673
00:27:25,679 --> 00:27:28,399
and the most common method of

674
00:27:28,399 --> 00:27:31,200
distribution of front ends is typically

675
00:27:31,200 --> 00:27:34,000
webpack or one of the similar types of

676
00:27:34,000 --> 00:27:35,840
of packing technologies

677
00:27:35,840 --> 00:27:36,880
well

678
00:27:36,880 --> 00:27:37,840
node

679
00:27:37,840 --> 00:27:39,840
you know npm

680
00:27:39,840 --> 00:27:42,880
is based on a micro module architecture

681
00:27:42,880 --> 00:27:46,159
right there's modules for everything but

682
00:27:46,159 --> 00:27:49,760
your resulting javascript front end is

683
00:27:49,760 --> 00:27:51,679
going to have a fraction

684
00:27:51,679 --> 00:27:54,240
of the modules that are actually in your

685
00:27:54,240 --> 00:27:56,399
lock file right not everything in your

686
00:27:56,399 --> 00:27:58,399
lock file actually ends up in your in

687
00:27:58,399 --> 00:27:59,840
your poc and you're

688
00:27:59,840 --> 00:28:01,360
distributable

689
00:28:01,360 --> 00:28:03,760
and if you want to communicate out to a

690
00:28:03,760 --> 00:28:06,000
customer what's actually in your

691
00:28:06,000 --> 00:28:08,880
software versus what's just in your lock

692
00:28:08,880 --> 00:28:11,200
file those are entirely different things

693
00:28:11,200 --> 00:28:12,640
and you're only going to get that

694
00:28:12,640 --> 00:28:13,919
information

695
00:28:13,919 --> 00:28:15,760
if you actually integrate with the

696
00:28:15,760 --> 00:28:18,159
webpack process itself you can't do it

697
00:28:18,159 --> 00:28:21,440
after the fact right it can't be done

698
00:28:21,440 --> 00:28:23,200
um

699
00:28:23,200 --> 00:28:26,159
now there are some standalone tools

700
00:28:26,159 --> 00:28:29,600
that try to do this os went down this

701
00:28:29,600 --> 00:28:33,039
path in 2012 2013 and it didn't really

702
00:28:33,039 --> 00:28:34,720
work all that well

703
00:28:34,720 --> 00:28:37,120
and the idea was to try to just

704
00:28:37,120 --> 00:28:38,880
this was not the dependency check

705
00:28:38,880 --> 00:28:40,720
project which was which was very very

706
00:28:40,720 --> 00:28:42,480
good by the way jeremy long has done a

707
00:28:42,480 --> 00:28:44,240
fantastic job with that project if you

708
00:28:44,240 --> 00:28:46,799
haven't checked it out you should

709
00:28:46,799 --> 00:28:49,679
we try to create

710
00:28:49,679 --> 00:28:53,039
a way to to do

711
00:28:53,039 --> 00:28:55,919
a elementary bill of material as a

712
00:28:55,919 --> 00:28:57,520
universal tool

713
00:28:57,520 --> 00:29:00,159
and it just didn't work for the reasons

714
00:29:00,159 --> 00:29:02,399
that that were mentioned right build

715
00:29:02,399 --> 00:29:05,039
integration build life cycle

716
00:29:05,039 --> 00:29:07,360
really really matters

717
00:29:07,360 --> 00:29:09,360
the other way you can produce s-bombs is

718
00:29:09,360 --> 00:29:12,399
from source files now this is

719
00:29:12,399 --> 00:29:13,840
i think its

720
00:29:13,840 --> 00:29:16,080
importance is is

721
00:29:16,080 --> 00:29:17,279
minimal

722
00:29:17,279 --> 00:29:18,720
um

723
00:29:18,720 --> 00:29:20,799
but you can create an s-bom

724
00:29:20,799 --> 00:29:23,039
from all of your source files

725
00:29:23,039 --> 00:29:24,640
and it's basically

726
00:29:24,640 --> 00:29:26,559
i mean i think you can do it better if

727
00:29:26,559 --> 00:29:29,360
you just link to the version control uh

728
00:29:29,360 --> 00:29:32,240
system and specify the commit or the tag

729
00:29:32,240 --> 00:29:34,000
right to specify the the commit or the

730
00:29:34,000 --> 00:29:35,440
commit hash

731
00:29:35,440 --> 00:29:37,279
because that's gonna that's immutable

732
00:29:37,279 --> 00:29:38,240
that's gonna tell you everything you

733
00:29:38,240 --> 00:29:39,919
need to know and you don't actually have

734
00:29:39,919 --> 00:29:42,399
to create the the source s-bomb so save

735
00:29:42,399 --> 00:29:43,919
yourself some trouble

736
00:29:43,919 --> 00:29:46,399
but it can be done

737
00:29:46,399 --> 00:29:49,520
now you can also create s-bombs with sca

738
00:29:49,520 --> 00:29:51,679
tools and other types of forensic or

739
00:29:51,679 --> 00:29:54,720
audit tools right there's many binary

740
00:29:54,720 --> 00:29:56,960
and manifest

741
00:29:56,960 --> 00:29:59,919
sca tools out there that can create

742
00:29:59,919 --> 00:30:01,120
s-bombs

743
00:30:01,120 --> 00:30:02,799
the interesting thing and here comes

744
00:30:02,799 --> 00:30:04,320
another dragon

745
00:30:04,320 --> 00:30:06,559
the interesting thing about sca

746
00:30:06,559 --> 00:30:09,120
is that they're not designed to

747
00:30:09,120 --> 00:30:11,360
identify an accurate inventory that's

748
00:30:11,360 --> 00:30:13,919
not their job their job is to identify

749
00:30:13,919 --> 00:30:14,799
risk

750
00:30:14,799 --> 00:30:16,960
and most of the time

751
00:30:16,960 --> 00:30:18,720
being close enough

752
00:30:18,720 --> 00:30:21,120
is good enough right if i'm a minor

753
00:30:21,120 --> 00:30:23,200
version off on something is it still

754
00:30:23,200 --> 00:30:24,240
vulnerable

755
00:30:24,240 --> 00:30:27,200
probably is it is it lice is it to still

756
00:30:27,200 --> 00:30:28,799
have the same license

757
00:30:28,799 --> 00:30:30,159
probably

758
00:30:30,159 --> 00:30:33,200
it's usually not a big deal but s bombs

759
00:30:33,200 --> 00:30:36,720
accuracy actually matters

760
00:30:36,799 --> 00:30:38,880
so that's that's one caveat

761
00:30:38,880 --> 00:30:41,200
but um you can produce them and it's

762
00:30:41,200 --> 00:30:44,559
really really easy for you to do this

763
00:30:44,559 --> 00:30:47,520
today without having to integrate them

764
00:30:47,520 --> 00:30:49,279
all with with all of your builds if you

765
00:30:49,279 --> 00:30:52,159
already have sca tools in your pipeline

766
00:30:52,159 --> 00:30:53,679
um especially some of the commercial

767
00:30:53,679 --> 00:30:55,760
tools those commercial tools many of

768
00:30:55,760 --> 00:30:57,279
them can produce

769
00:30:57,279 --> 00:31:00,080
cyclone dx s bombs today the ones that

770
00:31:00,080 --> 00:31:01,679
can't you should ask the vendors to

771
00:31:01,679 --> 00:31:05,360
support it um finally this is this is

772
00:31:05,360 --> 00:31:08,640
one i'm really really proud of um

773
00:31:08,640 --> 00:31:10,720
i never thought it would happen and

774
00:31:10,720 --> 00:31:12,080
especially

775
00:31:12,080 --> 00:31:13,600
i never thought it would happen so

776
00:31:13,600 --> 00:31:14,640
easily

777
00:31:14,640 --> 00:31:18,399
um but i asked in rasp as well as mobile

778
00:31:18,399 --> 00:31:20,799
everything runtime you can actually

779
00:31:20,799 --> 00:31:24,000
create s-bombs at runtime while the

780
00:31:24,000 --> 00:31:26,399
application's actually running

781
00:31:26,399 --> 00:31:28,320
and that's really interesting i mean

782
00:31:28,320 --> 00:31:30,960
you're not going to get the build time

783
00:31:30,960 --> 00:31:34,159
metadata that rich data that you have

784
00:31:34,159 --> 00:31:36,080
but you get some really interesting

785
00:31:36,080 --> 00:31:37,919
other data right

786
00:31:37,919 --> 00:31:39,679
you're going to get the components that

787
00:31:39,679 --> 00:31:41,600
are actually invoked

788
00:31:41,600 --> 00:31:42,559
right

789
00:31:42,559 --> 00:31:43,760
um

790
00:31:43,760 --> 00:31:46,080
you can you can create the full bomb if

791
00:31:46,080 --> 00:31:49,039
you want and you can also specify hey

792
00:31:49,039 --> 00:31:50,720
this one over here

793
00:31:50,720 --> 00:31:54,559
yeah it's not really used so yeah if if

794
00:31:54,559 --> 00:31:56,799
you have vulnerabilities in it

795
00:31:56,799 --> 00:32:00,320
it's probably of a less priority for you

796
00:32:00,320 --> 00:32:02,720
but that's a really interesting

797
00:32:02,720 --> 00:32:04,960
idea is be able to be able to see which

798
00:32:04,960 --> 00:32:07,919
ones are invoked and which ones are not

799
00:32:07,919 --> 00:32:09,840
the other thing that's that's really

800
00:32:09,840 --> 00:32:11,279
interesting to me

801
00:32:11,279 --> 00:32:15,320
is being able to dynamically

802
00:32:15,919 --> 00:32:18,480
recognize the services that these

803
00:32:18,480 --> 00:32:20,880
components are calling out to right and

804
00:32:20,880 --> 00:32:24,159
those services can be part of the

805
00:32:24,159 --> 00:32:26,159
inventory and then part of the

806
00:32:26,159 --> 00:32:29,279
dependency graph for example

807
00:32:29,279 --> 00:32:31,120
if i have a

808
00:32:31,120 --> 00:32:32,000
a

809
00:32:32,000 --> 00:32:35,120
java component that is responsible for

810
00:32:35,120 --> 00:32:37,760
getting stock quotes right

811
00:32:37,760 --> 00:32:40,080
it's a convenience library it's a shim

812
00:32:40,080 --> 00:32:42,159
essentially uh it allows me to

813
00:32:42,159 --> 00:32:43,600
programmatically get a stock quote

814
00:32:43,600 --> 00:32:45,519
without actually having to worry about

815
00:32:45,519 --> 00:32:48,320
uh the rest calls or the http or the tls

816
00:32:48,320 --> 00:32:50,240
negotiation right everything is kind of

817
00:32:50,240 --> 00:32:52,880
handled for me by that library i just

818
00:32:52,880 --> 00:32:55,600
have to call hey get quotes for

819
00:32:55,600 --> 00:32:58,880
um msft right

820
00:32:58,880 --> 00:33:02,080
and instead you know that component then

821
00:33:02,080 --> 00:33:04,399
actually relies on a service actually

822
00:33:04,399 --> 00:33:06,640
handles all the communication gets the

823
00:33:06,640 --> 00:33:09,360
result returns that result so that i can

824
00:33:09,360 --> 00:33:12,559
use it maybe it returns a string right

825
00:33:12,559 --> 00:33:13,519
um

826
00:33:13,519 --> 00:33:15,919
that service that component and that

827
00:33:15,919 --> 00:33:17,679
depends on that service can actually be

828
00:33:17,679 --> 00:33:20,159
represented in an s-bot

829
00:33:20,159 --> 00:33:22,240
that's fantastic right that's that's

830
00:33:22,240 --> 00:33:24,159
something that i really was hoping that

831
00:33:24,159 --> 00:33:25,679
we would get to

832
00:33:25,679 --> 00:33:27,519
and we got to it a lot sooner than we

833
00:33:27,519 --> 00:33:29,200
thought we would there's a lot of

834
00:33:29,200 --> 00:33:31,519
innovation happening in this space today

835
00:33:31,519 --> 00:33:34,000
but there's many other ways that we can

836
00:33:34,000 --> 00:33:38,720
that we can also produce s-bombs today

837
00:33:38,720 --> 00:33:41,200
but i wanted to mention all this to you

838
00:33:41,200 --> 00:33:42,399
because

839
00:33:42,399 --> 00:33:45,039
when you start out the path of creating

840
00:33:45,039 --> 00:33:46,480
s-bombs

841
00:33:46,480 --> 00:33:48,559
it's really easy to kind of

842
00:33:48,559 --> 00:33:51,039
go down a path and

843
00:33:51,039 --> 00:33:53,360
not necessarily know that you're kind of

844
00:33:53,360 --> 00:33:55,760
on the wrong path and and shoot yourself

845
00:33:55,760 --> 00:33:58,640
in the foot so watch out for the dragons

846
00:33:58,640 --> 00:34:01,760
and try to use a kind of a mix and match

847
00:34:01,760 --> 00:34:04,960
of kind of all the different ways to

848
00:34:04,960 --> 00:34:07,120
produce s-bombs because if you take some

849
00:34:07,120 --> 00:34:09,040
build s-bombs

850
00:34:09,040 --> 00:34:11,359
and some scas bombs

851
00:34:11,359 --> 00:34:13,839
i like to use the phrase trust but

852
00:34:13,839 --> 00:34:15,839
verify right i like to produce s-bombs

853
00:34:15,839 --> 00:34:17,599
in my build pipeline and use commercial

854
00:34:17,599 --> 00:34:21,280
sca tools as verification right

855
00:34:21,280 --> 00:34:23,199
and then the run time if you merge all

856
00:34:23,199 --> 00:34:25,119
that data in there you're going to have

857
00:34:25,119 --> 00:34:29,199
the most feature-rich s-bom of of anyone

858
00:34:29,199 --> 00:34:30,000
so

859
00:34:30,000 --> 00:34:31,599
and then of course watch out for the

860
00:34:31,599 --> 00:34:35,240
pitfalls as well

861
00:34:35,440 --> 00:34:36,560
because

862
00:34:36,560 --> 00:34:40,000
if you go down the wrong path if you uh

863
00:34:40,000 --> 00:34:41,359
you know

864
00:34:41,359 --> 00:34:44,079
do a source s-bomb and think that that's

865
00:34:44,079 --> 00:34:45,918
going to help you for i don't know

866
00:34:45,918 --> 00:34:48,399
vulnerability management use cases it's

867
00:34:48,399 --> 00:34:50,719
not it's not it's it's it's going to

868
00:34:50,719 --> 00:34:52,320
help you for a few

869
00:34:52,320 --> 00:34:54,480
um but there's there's much bigger

870
00:34:54,480 --> 00:34:56,719
things that we need to worry about so

871
00:34:56,719 --> 00:34:59,520
the the richer your s-bomb is the better

872
00:34:59,520 --> 00:35:01,920
data going into it the better you're

873
00:35:01,920 --> 00:35:03,440
going to better results you're going to

874
00:35:03,440 --> 00:35:04,880
have coming out of it

875
00:35:04,880 --> 00:35:07,520
[Music]

876
00:35:07,520 --> 00:35:08,800
and i wanted to take a little bit of

877
00:35:08,800 --> 00:35:11,680
time to talk about cycling dx

878
00:35:11,680 --> 00:35:13,280
yes there's there's a couple different

879
00:35:13,280 --> 00:35:16,240
s-bomb formats this particular one is

880
00:35:16,240 --> 00:35:17,920
coming out of owasp and i think it's

881
00:35:17,920 --> 00:35:19,839
really important in the security space

882
00:35:19,839 --> 00:35:21,839
so we're going to dive into it

883
00:35:21,839 --> 00:35:22,910
for just a little bit

884
00:35:22,910 --> 00:35:25,040
[Music]

885
00:35:25,040 --> 00:35:28,240
now cyclone dx is

886
00:35:28,240 --> 00:35:30,400
there's a huge focus on simplicity

887
00:35:30,400 --> 00:35:32,480
right we could have created the perfect

888
00:35:32,480 --> 00:35:33,359
model

889
00:35:33,359 --> 00:35:36,240
but perfection wasn't our goal right we

890
00:35:36,240 --> 00:35:37,599
wanted to create something that was

891
00:35:37,599 --> 00:35:39,599
lightweight that

892
00:35:39,599 --> 00:35:40,800
would be

893
00:35:40,800 --> 00:35:43,440
validatable with xml schema or json

894
00:35:43,440 --> 00:35:46,400
schema right we didn't want to use

895
00:35:46,400 --> 00:35:47,200
some

896
00:35:47,200 --> 00:35:49,359
weird tools to be able to validate our

897
00:35:49,359 --> 00:35:50,800
s-bombs

898
00:35:50,800 --> 00:35:53,359
so really focus on simplicity but the

899
00:35:53,359 --> 00:35:57,599
model itself is also very very simple

900
00:35:57,599 --> 00:36:00,560
essentially your comp your inventory is

901
00:36:00,560 --> 00:36:02,160
either a component

902
00:36:02,160 --> 00:36:03,599
or a service

903
00:36:03,599 --> 00:36:05,119
and

904
00:36:05,119 --> 00:36:09,200
this is by design right because a simple

905
00:36:09,200 --> 00:36:11,599
data model allows us to create very

906
00:36:11,599 --> 00:36:13,040
simple tools

907
00:36:13,040 --> 00:36:16,160
and very simple tools allow me to

908
00:36:16,160 --> 00:36:18,960
orchestrate the creation of an s-bomb

909
00:36:18,960 --> 00:36:21,920
throughout my entire build pipeline so

910
00:36:21,920 --> 00:36:24,240
instead of thinking about s-bomb

911
00:36:24,240 --> 00:36:26,880
creation as just a point in time event

912
00:36:26,880 --> 00:36:28,160
hey i got a piece of software i'm gonna

913
00:36:28,160 --> 00:36:30,240
i'm gonna create a nest bomb boom done

914
00:36:30,240 --> 00:36:31,680
um

915
00:36:31,680 --> 00:36:34,400
that might work for a lot of software

916
00:36:34,400 --> 00:36:36,240
but there's also a lot of software in

917
00:36:36,240 --> 00:36:38,560
there where that concept just doesn't

918
00:36:38,560 --> 00:36:40,960
work right you you

919
00:36:40,960 --> 00:36:42,800
you typically want to

920
00:36:42,800 --> 00:36:47,440
enhance or correct or modify that s-bomb

921
00:36:47,440 --> 00:36:49,359
throughout the course of a build

922
00:36:49,359 --> 00:36:52,320
pipeline and once you get to the end

923
00:36:52,320 --> 00:36:55,599
then you can sign and verify that s-bomb

924
00:36:55,599 --> 00:36:57,680
and at that point you actually have

925
00:36:57,680 --> 00:36:59,440
something that you can deliver whether

926
00:36:59,440 --> 00:37:01,680
it's internal delivery or external

927
00:37:01,680 --> 00:37:04,480
delivery to a customer

928
00:37:04,480 --> 00:37:06,560
but think of s-bomb creation as a

929
00:37:06,560 --> 00:37:09,359
process and if you have a very simple

930
00:37:09,359 --> 00:37:11,839
tool all right very simple model you can

931
00:37:11,839 --> 00:37:13,920
have very simple tools and highly

932
00:37:13,920 --> 00:37:16,400
efficient tools that can scale to

933
00:37:16,400 --> 00:37:18,880
producing tens of thousands of s-bombs

934
00:37:18,880 --> 00:37:20,079
per day

935
00:37:20,079 --> 00:37:21,839
in a build pipeline without a lot of

936
00:37:21,839 --> 00:37:23,599
effort right

937
00:37:23,599 --> 00:37:26,079
um so it's highly

938
00:37:26,079 --> 00:37:29,599
designed for for automation purposes

939
00:37:29,599 --> 00:37:32,880
the the simple model however uh has some

940
00:37:32,880 --> 00:37:35,839
really interesting benefits it's

941
00:37:35,839 --> 00:37:39,200
it's very easy to adopt as well as

942
00:37:39,200 --> 00:37:42,560
create new implementations of cyclone dx

943
00:37:42,560 --> 00:37:44,960
uh the adoption is is really about you

944
00:37:44,960 --> 00:37:47,520
know as organizations let's just create

945
00:37:47,520 --> 00:37:48,800
an s-bomb

946
00:37:48,800 --> 00:37:49,680
but

947
00:37:49,680 --> 00:37:51,680
there's a lot of tools that needed to be

948
00:37:51,680 --> 00:37:53,359
created right yeah i have a

949
00:37:53,359 --> 00:37:54,800
specification

950
00:37:54,800 --> 00:37:56,800
but having a special specification that

951
00:37:56,800 --> 00:37:58,320
nobody supports

952
00:37:58,320 --> 00:37:59,200
isn't

953
00:37:59,200 --> 00:38:01,440
beneficial right you need a

954
00:38:01,440 --> 00:38:04,480
specification that people want to

955
00:38:04,480 --> 00:38:05,599
support

956
00:38:05,599 --> 00:38:08,240
and whoops and uh

957
00:38:08,240 --> 00:38:11,119
and it's really elementary for whether

958
00:38:11,119 --> 00:38:13,440
it's an individual contributor

959
00:38:13,440 --> 00:38:16,320
or a commercial vendor to read

960
00:38:16,320 --> 00:38:19,280
understand and create a fully compliant

961
00:38:19,280 --> 00:38:22,000
100 compliant implementation of cyclone

962
00:38:22,000 --> 00:38:22,960
dx

963
00:38:22,960 --> 00:38:26,240
in under a day it's it's not hard

964
00:38:26,240 --> 00:38:27,040
um

965
00:38:27,040 --> 00:38:28,640
now i mentioned everything was either a

966
00:38:28,640 --> 00:38:31,200
component or a service and there's a lot

967
00:38:31,200 --> 00:38:32,960
of different types of components

968
00:38:32,960 --> 00:38:35,280
uh everything from applications and

969
00:38:35,280 --> 00:38:37,040
libraries and frameworks

970
00:38:37,040 --> 00:38:40,400
containers operating systems firmware

971
00:38:40,400 --> 00:38:45,119
devices yes we support hardware a bit

972
00:38:45,119 --> 00:38:47,920
not very good today but um that will be

973
00:38:47,920 --> 00:38:50,880
improving um files and of course

974
00:38:50,880 --> 00:38:52,480
services

975
00:38:52,480 --> 00:38:54,720
um the interesting thing about the

976
00:38:54,720 --> 00:38:58,160
cyclone dx model is that it's really a

977
00:38:58,160 --> 00:39:01,040
bomb format it's yes it's a software

978
00:39:01,040 --> 00:39:04,000
bill of material format but it's also an

979
00:39:04,000 --> 00:39:05,359
operations

980
00:39:05,359 --> 00:39:08,079
bill of material format and and oboms

981
00:39:08,079 --> 00:39:10,560
are actually a bsum requirement if if

982
00:39:10,560 --> 00:39:12,640
your organization is into maturity

983
00:39:12,640 --> 00:39:16,560
models uh operations bill of material

984
00:39:16,560 --> 00:39:19,520
are a requirement for s-bonds which

985
00:39:19,520 --> 00:39:21,760
often vary a little bit from software

986
00:39:21,760 --> 00:39:23,040
build materials i might have an

987
00:39:23,040 --> 00:39:24,320
application

988
00:39:24,320 --> 00:39:25,920
but you know what that application is

989
00:39:25,920 --> 00:39:27,599
deployed somewhere maybe it's deployed

990
00:39:27,599 --> 00:39:30,240
to an app server that's then you know

991
00:39:30,240 --> 00:39:32,560
running on an operating system well that

992
00:39:32,560 --> 00:39:34,320
would be my operations bill of material

993
00:39:34,320 --> 00:39:37,440
that that full stack inventory right

994
00:39:37,440 --> 00:39:39,119
manufacturing bill of materials this is

995
00:39:39,119 --> 00:39:41,599
really for hardware use cases and

996
00:39:41,599 --> 00:39:43,440
we're making some improvements in that

997
00:39:43,440 --> 00:39:47,119
space it's it's not prime time yet but

998
00:39:47,119 --> 00:39:48,480
it it will be

999
00:39:48,480 --> 00:39:50,400
and software as a service bill of

1000
00:39:50,400 --> 00:39:52,079
materials this is something that cyclone

1001
00:39:52,079 --> 00:39:54,640
dx has supported for a very long time

1002
00:39:54,640 --> 00:39:57,200
now being able to describe our services

1003
00:39:57,200 --> 00:40:00,480
and in fact we can describe complete

1004
00:40:00,480 --> 00:40:02,240
micro service architectures we can

1005
00:40:02,240 --> 00:40:04,160
describe services that depend on other

1006
00:40:04,160 --> 00:40:07,040
services or which include other services

1007
00:40:07,040 --> 00:40:10,319
so we can describe a system of systems

1008
00:40:10,319 --> 00:40:12,960
approach whether it's microservices the

1009
00:40:12,960 --> 00:40:15,359
actor model or any kind of architectural

1010
00:40:15,359 --> 00:40:16,480
construct

1011
00:40:16,480 --> 00:40:18,320
that's that's all supported today

1012
00:40:18,320 --> 00:40:20,079
[Music]

1013
00:40:20,079 --> 00:40:22,800
the great thing about cyclone dx is that

1014
00:40:22,800 --> 00:40:25,280
this is not theory right this is not

1015
00:40:25,280 --> 00:40:28,079
something that's that's new um this is

1016
00:40:28,079 --> 00:40:29,599
in production

1017
00:40:29,599 --> 00:40:32,079
at a staggering number of organizations

1018
00:40:32,079 --> 00:40:35,040
today an estimated 100 000 organizations

1019
00:40:35,040 --> 00:40:38,960
are using cyclone dx in production today

1020
00:40:38,960 --> 00:40:40,960
now the 100 000

1021
00:40:40,960 --> 00:40:44,000
number is interesting because it's it's

1022
00:40:44,000 --> 00:40:45,760
a big enough number

1023
00:40:45,760 --> 00:40:47,920
that you can step back and say hey you

1024
00:40:47,920 --> 00:40:49,119
know what

1025
00:40:49,119 --> 00:40:52,000
this thing actually has merit right this

1026
00:40:52,000 --> 00:40:54,720
thing is actually being used by a lot of

1027
00:40:54,720 --> 00:40:56,400
organizations

1028
00:40:56,400 --> 00:40:59,760
and if there were problems with the spec

1029
00:40:59,760 --> 00:41:00,880
you would you would have heard about it

1030
00:41:00,880 --> 00:41:04,000
right bad news travels uh much much much

1031
00:41:04,000 --> 00:41:06,400
easier than uh and further than that

1032
00:41:06,400 --> 00:41:08,000
than good news

1033
00:41:08,000 --> 00:41:10,720
so if the spec had problems or you know

1034
00:41:10,720 --> 00:41:11,839
whatever

1035
00:41:11,839 --> 00:41:14,800
we would hear about it and we haven't

1036
00:41:14,800 --> 00:41:17,200
which is which is a great thing

1037
00:41:17,200 --> 00:41:18,400
um

1038
00:41:18,400 --> 00:41:20,079
but the other interesting thing about

1039
00:41:20,079 --> 00:41:23,440
this number is that it represents

1040
00:41:23,440 --> 00:41:26,000
a small fraction

1041
00:41:26,000 --> 00:41:27,920
of the number of organizations in

1042
00:41:27,920 --> 00:41:29,520
existence right there's millions and

1043
00:41:29,520 --> 00:41:31,760
millions of organizations yes 100 000 is

1044
00:41:31,760 --> 00:41:34,319
a great number right no doubt about that

1045
00:41:34,319 --> 00:41:37,040
but it's a small fraction and compared

1046
00:41:37,040 --> 00:41:39,280
to where we want it to be right so we

1047
00:41:39,280 --> 00:41:42,079
have a lot of growth potential so

1048
00:41:42,079 --> 00:41:44,160
from this this is kind of your call to

1049
00:41:44,160 --> 00:41:46,560
action

1050
00:41:47,520 --> 00:41:51,040
now the cyclone dx website um has a lot

1051
00:41:51,040 --> 00:41:52,960
of different use cases that's that's

1052
00:41:52,960 --> 00:41:54,640
outlined here we talked about a lot of

1053
00:41:54,640 --> 00:41:57,280
these use these use cases from uh

1054
00:41:57,280 --> 00:41:59,680
vulnerability management and and prop

1055
00:41:59,680 --> 00:42:01,280
provenance and pedigree and all these

1056
00:42:01,280 --> 00:42:03,680
these other cases

1057
00:42:03,680 --> 00:42:07,119
there are examples in both

1058
00:42:07,119 --> 00:42:10,800
xml and json on the cyclone dx website

1059
00:42:10,800 --> 00:42:13,760
now the default uh view when you go to

1060
00:42:13,760 --> 00:42:16,800
the website is xml and i don't want you

1061
00:42:16,800 --> 00:42:19,119
to think that

1062
00:42:19,119 --> 00:42:21,359
the specs started out

1063
00:42:21,359 --> 00:42:23,119
being xml

1064
00:42:23,119 --> 00:42:26,160
our preference is actually json however

1065
00:42:26,160 --> 00:42:29,599
json you can't make comments in it

1066
00:42:29,599 --> 00:42:31,200
xml you can

1067
00:42:31,200 --> 00:42:34,240
so when you're showing examples for

1068
00:42:34,240 --> 00:42:36,720
something it's actually easier to show

1069
00:42:36,720 --> 00:42:39,440
it in xml because you can have inline

1070
00:42:39,440 --> 00:42:42,720
comments a multi-line inline comments

1071
00:42:42,720 --> 00:42:44,240
and then you can just switch over to the

1072
00:42:44,240 --> 00:42:46,640
to the json example and then see it and

1073
00:42:46,640 --> 00:42:49,280
see the json representation of that so

1074
00:42:49,280 --> 00:42:51,680
check out this page um because it's

1075
00:42:51,680 --> 00:42:53,680
going to give you some concrete examples

1076
00:42:53,680 --> 00:42:54,400
that

1077
00:42:54,400 --> 00:42:55,200
um

1078
00:42:55,200 --> 00:42:57,200
that are real right that you can use

1079
00:42:57,200 --> 00:43:00,240
today with tools like owasp dependency

1080
00:43:00,240 --> 00:43:02,079
track and some of the commercial and

1081
00:43:02,079 --> 00:43:03,920
competing tools that support the

1082
00:43:03,920 --> 00:43:06,800
consumption and analysis of s-bombs

1083
00:43:06,800 --> 00:43:09,040
today

1084
00:43:09,680 --> 00:43:11,680
the other resource that i want to tell

1085
00:43:11,680 --> 00:43:13,359
you about

1086
00:43:13,359 --> 00:43:15,920
is the cyclone dx tool center

1087
00:43:15,920 --> 00:43:18,480
and the tool setter is

1088
00:43:18,480 --> 00:43:21,839
is basically a resource to

1089
00:43:21,839 --> 00:43:24,480
have all the commercial as well as the

1090
00:43:24,480 --> 00:43:27,680
open source tools that are available in

1091
00:43:27,680 --> 00:43:30,560
the market um if now these are just the

1092
00:43:30,560 --> 00:43:32,000
ones that we know of and i think there's

1093
00:43:32,000 --> 00:43:34,160
around 85 of them today that we know of

1094
00:43:34,160 --> 00:43:35,520
actually i just found out and about

1095
00:43:35,520 --> 00:43:37,440
another one a couple hours ago so i've

1096
00:43:37,440 --> 00:43:39,440
got to add it today so by the end of the

1097
00:43:39,440 --> 00:43:41,440
day there'll be 86

1098
00:43:41,440 --> 00:43:42,880
these are just the ones that we know

1099
00:43:42,880 --> 00:43:45,520
about though so if you come across any

1100
00:43:45,520 --> 00:43:46,560
others

1101
00:43:46,560 --> 00:43:48,800
let us know actually in the in on that

1102
00:43:48,800 --> 00:43:50,480
page there's a link at the bottom of the

1103
00:43:50,480 --> 00:43:53,520
page uh to the repo so you can submit a

1104
00:43:53,520 --> 00:43:55,599
pull request so if you know of a tool

1105
00:43:55,599 --> 00:43:58,560
you can either let us know

1106
00:43:58,560 --> 00:44:01,200
or you can just submit a pull request

1107
00:44:01,200 --> 00:44:03,520
but it's also a way for

1108
00:44:03,520 --> 00:44:05,200
if you're a commercial vendor and you

1109
00:44:05,200 --> 00:44:06,960
want to get some

1110
00:44:06,960 --> 00:44:09,040
acknowledgement for example that that

1111
00:44:09,040 --> 00:44:11,599
you support the standard uh it's a way

1112
00:44:11,599 --> 00:44:14,079
to get kind of included in the uh

1113
00:44:14,079 --> 00:44:16,720
in the global list of of all known tools

1114
00:44:16,720 --> 00:44:18,880
so if you know of anything or if you

1115
00:44:18,880 --> 00:44:21,440
have a product in the pipeline that that

1116
00:44:21,440 --> 00:44:23,920
is going to be supporting cyclone dx i

1117
00:44:23,920 --> 00:44:25,599
highly encourage you to just reach out

1118
00:44:25,599 --> 00:44:28,240
or submit a pull request and let us know

1119
00:44:28,240 --> 00:44:31,440
we want to provide the community with

1120
00:44:31,440 --> 00:44:33,680
with all the tools necessary so that if

1121
00:44:33,680 --> 00:44:35,040
they're looking for

1122
00:44:35,040 --> 00:44:37,680
x that can actually find it right so

1123
00:44:37,680 --> 00:44:39,760
that's that's really the purpose of

1124
00:44:39,760 --> 00:44:41,920
of the tool setter is a

1125
00:44:41,920 --> 00:44:44,720
a springboard to kind of get you started

1126
00:44:44,720 --> 00:44:47,119
[Music]

1127
00:44:47,119 --> 00:44:49,520
now the current version of cyclone dx is

1128
00:44:49,520 --> 00:44:51,920
version 1.3 and

1129
00:44:51,920 --> 00:44:54,079
it it's a fantastic spec

1130
00:44:54,079 --> 00:44:56,880
you know lots of contributions both from

1131
00:44:56,880 --> 00:44:59,599
individual contributors as well as a lot

1132
00:44:59,599 --> 00:45:00,400
of

1133
00:45:00,400 --> 00:45:02,160
commercial contributions that we've had

1134
00:45:02,160 --> 00:45:03,359
to the spec

1135
00:45:03,359 --> 00:45:06,480
version 1.4 is currently in development

1136
00:45:06,480 --> 00:45:07,359
and

1137
00:45:07,359 --> 00:45:10,319
we're anticipating a release of

1138
00:45:10,319 --> 00:45:13,359
i don't know about the january 2022 time

1139
00:45:13,359 --> 00:45:16,560
frame so not not too far out

1140
00:45:16,560 --> 00:45:19,359
we are going to be improving um our

1141
00:45:19,359 --> 00:45:22,000
hardware support for manufacturing bill

1142
00:45:22,000 --> 00:45:25,040
of material use cases right this is um

1143
00:45:25,040 --> 00:45:27,680
this has come up many many times

1144
00:45:27,680 --> 00:45:30,079
especially in the industrial control

1145
00:45:30,079 --> 00:45:31,520
system space

1146
00:45:31,520 --> 00:45:33,200
as well as the

1147
00:45:33,200 --> 00:45:36,079
the iot space

1148
00:45:36,079 --> 00:45:38,160
the interesting thing about hardware is

1149
00:45:38,160 --> 00:45:41,200
that they have a long history of of

1150
00:45:41,200 --> 00:45:44,880
using and creating and producing um

1151
00:45:44,880 --> 00:45:47,599
bombs right this is not new to hardware

1152
00:45:47,599 --> 00:45:48,960
space they've been doing this for

1153
00:45:48,960 --> 00:45:50,000
decades

1154
00:45:50,000 --> 00:45:52,640
and they have their ways of doing things

1155
00:45:52,640 --> 00:45:56,240
um so it's it's very advantageous um to

1156
00:45:56,240 --> 00:45:58,880
not necessarily mix and match right you

1157
00:45:58,880 --> 00:46:01,520
typically don't want a bomb that has

1158
00:46:01,520 --> 00:46:04,160
both hardware and software components

1159
00:46:04,160 --> 00:46:07,040
you typically want to separate them um

1160
00:46:07,040 --> 00:46:08,960
just well there's a lot of reasons why

1161
00:46:08,960 --> 00:46:12,319
you would want to separate them but

1162
00:46:12,560 --> 00:46:14,079
we will be improving our hardware

1163
00:46:14,079 --> 00:46:16,800
support in 1.4

1164
00:46:16,800 --> 00:46:20,079
now as i mentioned cyclone dx is a bill

1165
00:46:20,079 --> 00:46:22,560
of materials format and we can kind of

1166
00:46:22,560 --> 00:46:23,760
represent

1167
00:46:23,760 --> 00:46:26,319
almost anything as as inventory

1168
00:46:26,319 --> 00:46:28,640
including vulnerabilities so

1169
00:46:28,640 --> 00:46:31,200
bill of vulnerabilities is going to be a

1170
00:46:31,200 --> 00:46:34,000
thing so if you want to communicate

1171
00:46:34,000 --> 00:46:36,319
um a just a list of vulnerabilities from

1172
00:46:36,319 --> 00:46:39,119
one machine to another um

1173
00:46:39,119 --> 00:46:41,680
you'll actually have that capability and

1174
00:46:41,680 --> 00:46:43,119
this is a very common use case

1175
00:46:43,119 --> 00:46:45,280
especially across different sources of

1176
00:46:45,280 --> 00:46:48,560
vulnerability intelligence

1177
00:46:49,760 --> 00:46:52,480
we're going to be improving our vex

1178
00:46:52,480 --> 00:46:54,480
support now what is vex

1179
00:46:54,480 --> 00:46:58,640
vex is vulnerability and exploitability

1180
00:46:58,640 --> 00:47:00,880
think of it as a

1181
00:47:00,880 --> 00:47:03,920
the inverse of an advisory right an

1182
00:47:03,920 --> 00:47:05,599
advisory tells you everything that's

1183
00:47:05,599 --> 00:47:06,960
wrong

1184
00:47:06,960 --> 00:47:09,280
a vex tells you

1185
00:47:09,280 --> 00:47:11,200
everything that's not wrong

1186
00:47:11,200 --> 00:47:14,480
right um i might have a i might be using

1187
00:47:14,480 --> 00:47:18,400
of a vulnerable version of openssl

1188
00:47:18,400 --> 00:47:20,559
but the way that i'm using it or the way

1189
00:47:20,559 --> 00:47:22,240
that it was compiled

1190
00:47:22,240 --> 00:47:25,680
i'm not my application is not vulnerable

1191
00:47:25,680 --> 00:47:27,839
vex is a way to communicate that out

1192
00:47:27,839 --> 00:47:30,400
because as an organization that consumes

1193
00:47:30,400 --> 00:47:32,559
s-bombs i want to make risk-based

1194
00:47:32,559 --> 00:47:34,800
decisions i want to i want to patch the

1195
00:47:34,800 --> 00:47:37,599
things that actually matter now

1196
00:47:37,599 --> 00:47:41,040
if an application is using a vulnerable

1197
00:47:41,040 --> 00:47:44,000
version of openssl but it's not actually

1198
00:47:44,000 --> 00:47:46,400
called or invoked right that vulnerable

1199
00:47:46,400 --> 00:47:48,720
function isn't invoked that's going to

1200
00:47:48,720 --> 00:47:51,359
take a lot lower priority in terms of my

1201
00:47:51,359 --> 00:47:53,839
patch schedule than maybe some of my

1202
00:47:53,839 --> 00:47:56,400
other things that are in my pipeline so

1203
00:47:56,400 --> 00:47:58,800
vex is a way to help organizations

1204
00:47:58,800 --> 00:48:00,400
prioritize the things that they should

1205
00:48:00,400 --> 00:48:02,319
care about

1206
00:48:02,319 --> 00:48:04,400
we've supported this use case since

1207
00:48:04,400 --> 00:48:07,359
about 2019 in fact sonatype who's been a

1208
00:48:07,359 --> 00:48:09,760
really big supporter of cyclone dx

1209
00:48:09,760 --> 00:48:12,480
actually contributed to this extension

1210
00:48:12,480 --> 00:48:16,559
um by definition xml is extensible

1211
00:48:16,559 --> 00:48:19,040
json is not

1212
00:48:19,040 --> 00:48:22,240
and we've learned a lot about the

1213
00:48:22,240 --> 00:48:24,880
the vex support that we currently have

1214
00:48:24,880 --> 00:48:27,839
with cyclone dx13 and lower

1215
00:48:27,839 --> 00:48:29,760
and we've made a bunch of improvements

1216
00:48:29,760 --> 00:48:32,319
we've we've we've rallied a bunch of

1217
00:48:32,319 --> 00:48:35,599
folks from different cloud providers

1218
00:48:35,599 --> 00:48:38,319
different security vendors etc we've got

1219
00:48:38,319 --> 00:48:41,119
a huge amount of contributions just for

1220
00:48:41,119 --> 00:48:42,640
this one use case because it's a really

1221
00:48:42,640 --> 00:48:44,000
important one and we want to get it

1222
00:48:44,000 --> 00:48:46,400
right and that's that's on target for

1223
00:48:46,400 --> 00:48:48,000
1.4

1224
00:48:48,000 --> 00:48:51,040
1.4 also it doubles as an advisory

1225
00:48:51,040 --> 00:48:52,079
format

1226
00:48:52,079 --> 00:48:54,800
which will be interesting because csaf

1227
00:48:54,800 --> 00:48:57,920
is also now a thing csf version 2 which

1228
00:48:57,920 --> 00:48:59,680
is the common security advisory

1229
00:48:59,680 --> 00:49:02,160
framework our format framework or format

1230
00:49:02,160 --> 00:49:04,240
i can't remember but check it out that's

1231
00:49:04,240 --> 00:49:05,440
um

1232
00:49:05,440 --> 00:49:07,200
two minutes sorry

1233
00:49:07,200 --> 00:49:09,280
okay nope no worries we're going to be

1234
00:49:09,280 --> 00:49:11,040
standalone standardizing the release

1235
00:49:11,040 --> 00:49:13,520
notes which is something that that most

1236
00:49:13,520 --> 00:49:16,400
software doesn't do today there's no

1237
00:49:16,400 --> 00:49:18,160
mechanism to standardize our release

1238
00:49:18,160 --> 00:49:20,480
notes uh release notes are markdown or

1239
00:49:20,480 --> 00:49:23,119
html or pdf or word documents there's no

1240
00:49:23,119 --> 00:49:25,520
way to to really use that in the machine

1241
00:49:25,520 --> 00:49:27,680
readable way cyclone dx is going to

1242
00:49:27,680 --> 00:49:29,280
change that so that's going to be really

1243
00:49:29,280 --> 00:49:31,440
really interesting and of course we're a

1244
00:49:31,440 --> 00:49:33,280
security uh standard so we're going to

1245
00:49:33,280 --> 00:49:34,559
be hardening

1246
00:49:34,559 --> 00:49:36,640
uh hardening the standard above and

1247
00:49:36,640 --> 00:49:38,720
beyond what it's what it's already at as

1248
00:49:38,720 --> 00:49:40,640
well as improving the documentation now

1249
00:49:40,640 --> 00:49:43,599
that it's uh that's not just for a

1250
00:49:43,599 --> 00:49:45,839
security niche this is this is a very

1251
00:49:45,839 --> 00:49:47,760
mainstream effort now

1252
00:49:47,760 --> 00:49:50,800
so here's the links to to participate in

1253
00:49:50,800 --> 00:49:53,359
the community uh check out our website

1254
00:49:53,359 --> 00:49:55,599
everything's on github we have a

1255
00:49:55,599 --> 00:49:58,960
dedicated slack instance uh independent

1256
00:49:58,960 --> 00:50:01,359
of el wasp for historical reasons but we

1257
00:50:01,359 --> 00:50:04,400
also have 20 plus channels as well

1258
00:50:04,400 --> 00:50:06,000
so check out that

1259
00:50:06,000 --> 00:50:08,319
linkedin and twitter for social and

1260
00:50:08,319 --> 00:50:10,319
thank you so much for listening to me

1261
00:50:10,319 --> 00:50:13,599
babel for the last 50 minutes and i

1262
00:50:13,599 --> 00:50:15,839
promise no dragons were hurt in the

1263
00:50:15,839 --> 00:50:17,680
creation of this at this presentation so

1264
00:50:17,680 --> 00:50:20,000
with that i'll open it up for questions

1265
00:50:20,000 --> 00:50:23,359
thank you so much

