1
00:00:10,100 --> 00:00:14,400
alert like to introduce you to crack
from fortify his his talk about

2
00:00:14,400 --> 00:00:21,449
API's

3
00:00:21,449 --> 00:00:21,840
thanks

4
00:00:21,840 --> 00:00:25,230
and I good afternoon this is the API
assessment primer

5
00:00:25,230 --> 00:00:28,230
the objective at this session will be to
give in

6
00:00:28,230 --> 00:00:31,770
overview are testing are API's

7
00:00:31,770 --> 00:00:35,019
I hope to get on the attackers

8
00:00:35,019 --> 00:00:39,170
and hackers in the audience a high-level
overview of

9
00:00:39,170 --> 00:00:43,710
and I approach to assessing API's in for
the developers in the room could give

10
00:00:43,710 --> 00:00:44,100
youth

11
00:00:44,100 --> 00:00:48,949
some things to think about why where
you're developing so sleepy

12
00:00:48,949 --> 00:00:53,059
quick agenda are do a quick introduction
they will talk about why

13
00:00:53,059 --> 00:00:57,109
API security matters why it's important
then we'll talk about

14
00:00:57,109 --> 00:01:00,480
arm what to consider when you're
conducting

15
00:01:00,480 --> 00:01:04,199
are SS security assessments and I'll
give you a

16
00:01:04,199 --> 00:01:08,399
up Boca the talk will be added
discussing various

17
00:01:08,399 --> 00:01:11,600
vulnerabilities are common in Apis

18
00:01:11,600 --> 00:01:16,289
now give you a few takeaways so quick
introduction I'm Greg Patton

19
00:01:16,289 --> 00:01:19,740
I'm based in Houston Texas I'm the

20
00:01:19,740 --> 00:01:23,610
a static source code nom testing manager

21
00:01:23,610 --> 00:01:27,020
for HP 42 final demand 84 by on demand
is a

22
00:01:27,020 --> 00:01:30,190
cloud-based security assessment service
we do static

23
00:01:30,190 --> 00:01:34,209
a source code assessments and dynamic
web and mobile assessments

24
00:01:34,209 --> 00:01:38,679
and I spent a about 10 years my career
mostly doing dynamic where the noble

25
00:01:38,679 --> 00:01:39,450
assessments

26
00:01:39,450 --> 00:01:42,869
on managing the static T now and it then

27
00:01:42,869 --> 00:01:46,440
an active member in the Los community
for a long time factor

28
00:01:46,440 --> 00:01:49,610
researching for this talk I i worked
back in

29
00:01:49,610 --> 00:01:52,709
and figured out that a attended my first
lost meeting back

30
00:01:52,709 --> 00:01:55,750
in 2007 at my local chapter

31
00:01:55,750 --> 00:01:59,069
so why is API security

32
00:01:59,069 --> 00:02:02,200
Tom why is it important why does it
matter and

33
00:02:02,200 --> 00:02:05,349
in short API's are everywhere on

34
00:02:05,349 --> 00:02:09,030
Gartner reports that there be an
estimated 4.9

35
00:02:09,030 --> 00:02:12,610
billion connected things in 2015

36
00:02:12,610 --> 00:02:16,840
to have this internet of things: we have
millions of mobile applications in

37
00:02:16,840 --> 00:02:18,110
various app stores

38
00:02:18,110 --> 00:02:21,980
worse if these things are talking to
backend systems using APIs

39
00:02:21,980 --> 00:02:25,030
we also have service oriented
architecture

40
00:02:25,030 --> 00:02:27,970
and debt service are using APIs and then

41
00:02:27,970 --> 00:02:32,070
yeah AP as are nothing new we have if
the client applications in our

42
00:02:32,070 --> 00:02:32,920
enterprises

43
00:02:32,920 --> 00:02:35,940
to the museum API's for communication
for a long time

44
00:02:35,940 --> 00:02:39,380
10 we have all these things that are
talking we have our

45
00:02:39,380 --> 00:02:43,380
our cars om are light bulbs as we're
talking about in the keynote this

46
00:02:43,380 --> 00:02:44,080
morning

47
00:02:44,080 --> 00:02:48,680
are various mobile applications as we've
been I reading in the news here recently

48
00:02:48,680 --> 00:02:49,870
airplanes

49
00:02:49,870 --> 00:02:53,290
and even from the keynote this morning
even some of our toilets that are

50
00:02:53,290 --> 00:02:57,460
have very sleepy eyes for talking to
back-end systems so with

51
00:02:57,460 --> 00:03:01,820
all this new surface area we have this
very dangerous area

52
00:03:01,820 --> 00:03:04,860
arm yes all that but there's this

53
00:03:04,860 --> 00:03:07,990
huge surface area that down

54
00:03:07,990 --> 00:03:11,290
where security is being overworked as

55
00:03:11,290 --> 00:03:15,520
we're kinda rush to market are many
these mobile applications in Internet of

56
00:03:15,520 --> 00:03:16,570
Things project

57
00:03:16,570 --> 00:03:20,050
often security is something that gets
overlooked it's one of those

58
00:03:20,050 --> 00:03:23,470
afterthoughts active get theirs any I

59
00:03:23,470 --> 00:03:26,400
any part above 20 in these mobile
applications Internet of Things

60
00:03:26,400 --> 00:03:29,060
applications it's going to get
overlooked its of and

61
00:03:29,060 --> 00:03:32,120
are its often security in advance serve
are

62
00:03:32,120 --> 00:03:35,860
assuring that features are are a

63
00:03:35,860 --> 00:03:39,080
at that features are included in the
product

64
00:03:39,080 --> 00:03:43,489
so many a far-right new API

65
00:03:43,489 --> 00:03:48,489
developers haven't had core security
training as such is your traditional web

66
00:03:48,489 --> 00:03:49,420
and the client

67
00:03:49,420 --> 00:03:55,440
typeof a security auditors and many just
kinda assume security through obscurity

68
00:03:55,440 --> 00:03:59,540
the assume that the air that their
applications are only going to be used

69
00:03:59,540 --> 00:04:01,160
the way that they're intended to be used

70
00:04:01,160 --> 00:04:05,160
they assume that these back and APIs are
things that

71
00:04:05,160 --> 00:04:10,650
that that because they're not presented
in some type of gooey system

72
00:04:10,650 --> 00:04:16,160
dat they don't have to worry about them
to my time without for final demand I

73
00:04:16,160 --> 00:04:20,150
certainly notice that analyzing any
given API is quite witty yield

74
00:04:20,150 --> 00:04:24,200
a significant number own abilities fact
I think I saw one recent study

75
00:04:24,200 --> 00:04:27,210
Internet of Things study that saw that
any

76
00:04:27,210 --> 00:04:31,720
on imagine that any Internet of Things
application is likely to have

77
00:04:31,720 --> 00:04:37,110
525 upon our abilities

78
00:04:37,110 --> 00:04:39,009
says some key things to consider

79
00:04:39,009 --> 00:04:42,539
when you're doing a security assessment
API's

80
00:04:42,539 --> 00:04:47,800
a very high level testing approach when
he should acquire information

81
00:04:47,800 --> 00:04:51,229
try to acquire as much information as
you can from

82
00:04:51,229 --> 00:04:54,300
palm from the source love your at

83
00:04:54,300 --> 00:04:57,349
from from from your customer from your
source try to

84
00:04:57,349 --> 00:05:00,430
acquire any source code for any type of
static

85
00:05:00,430 --> 00:05:03,789
review itrader: acquire documentation

86
00:05:03,789 --> 00:05:06,949
you want to acquire documentation not
just

87
00:05:06,949 --> 00:05:11,560
for the regular API's but for any admin
functionality as well

88
00:05:11,560 --> 00:05:15,550
you want to capture runtime: traffic
when actually use the

89
00:05:15,550 --> 00:05:19,590
you sure Epis figure out how it's making
calls and analyze

90
00:05:19,590 --> 00:05:23,610
I its actual traffic and you want to use
that traffic

91
00:05:23,610 --> 00:05:26,660
and the documentation to fully mapped
out the API

92
00:05:26,660 --> 00:05:31,009
you want to West al of various methods
that is calling

93
00:05:31,009 --> 00:05:35,909
and start to think about on what other
types and that it might not be Weston

94
00:05:35,909 --> 00:05:40,110
as you get into your your testing you
can certainly use a number

95
00:05:40,110 --> 00:05:43,720
on a media tools and then manually test
test test and I'll go through a lot of

96
00:05:43,720 --> 00:05:44,159
thing

97
00:05:44,159 --> 00:05:47,340
a lot of items to consider all your
valuating Tom

98
00:05:47,340 --> 00:05:51,560
your API's 50 things to collect

99
00:05:51,560 --> 00:05:55,340
yet once again whenever collect source
code documentation

100
00:05:55,340 --> 00:05:59,110
and from customers want to you up
acquire

101
00:05:59,110 --> 00:06:03,340
known good request see want to know what
values the APIs

102
00:06:03,340 --> 00:06:06,909
are are expecting want to ensure that
you know

103
00:06:06,909 --> 00:06:11,340
how to call how to make a valid request
your web services in backend systems

104
00:06:11,340 --> 00:06:15,270
you know a lot of times API testing is
hard simply because

105
00:06:15,270 --> 00:06:19,240
the testers don't know how to make
proper cause they don't know the

106
00:06:19,240 --> 00:06:23,639
the order of operations are the specific
parameter values at their

107
00:06:23,639 --> 00:06:26,880
that the backend system is expecting
2002 arm

108
00:06:26,880 --> 00:06:30,820
your acquire known good data and do some
about through

109
00:06:30,820 --> 00:06:34,560
on third I your Runtime traffic analysis

110
00:06:34,560 --> 00:06:38,500
in capturing actually using the
application capturing traffic

111
00:06:38,500 --> 00:06:41,770
you can get some %uh that a front from
the documentation and from your

112
00:06:41,770 --> 00:06:45,970
customers directly

113
00:06:45,970 --> 00:06:49,330
kinda quick tool box for assessing APIs

114
00:06:49,330 --> 00:06:53,199
iight it to keep things that you want to
ensure that you have

115
00:06:53,199 --> 00:06:56,639
r1 a way to capture network traffic
whether that's

116
00:06:56,639 --> 00:07:00,039
pic your EPA's using our web protocol
some type

117
00:07:00,039 --> 00:07:03,710
HTP editor and proxy to all on

118
00:07:03,710 --> 00:07:06,720
it using yes some type of other protocol
your some paper

119
00:07:06,720 --> 00:07:09,729
get a Wireshark or some type other I
network

120
00:07:09,729 --> 00:07:14,050
on network analyzer you want some way to
capture

121
00:07:14,050 --> 00:07:17,599
network traffic and then you want some
way to send requests as well

122
00:07:17,599 --> 00:07:21,229
and for sending requests if that's you
know if you're doing without

123
00:07:21,229 --> 00:07:26,250
what protocol you know when you're now
what your web proxy tools and ATP

124
00:07:26,250 --> 00:07:26,789
editors

125
00:07:26,789 --> 00:07:30,259
our in a very good on you might have to
write

126
00:07:30,259 --> 00:07:33,650
some source code if you're working with
a a backend system that using your Java

127
00:07:33,650 --> 00:07:34,909
serialized objects

128
00:07:34,909 --> 00:07:39,319
might have to break down and writer
rights in Java code in order to interact

129
00:07:39,319 --> 00:07:40,150
with your API

130
00:07:40,150 --> 00:07:43,479
but two things on to keep things to have
when

131
00:07:43,479 --> 00:07:47,849
assessing AP either one a way to capture
traffic and to a way to send traffic

132
00:07:47,849 --> 00:07:51,909
hear that quick list at some i of a ver
tools

133
00:07:51,909 --> 00:07:56,919
on in analyzing APIs and the into my
presentation got a whole bunch of links

134
00:07:56,919 --> 00:08:00,070
are with to with some URL's to grab
somebody's

135
00:08:00,070 --> 00:08:03,449
amateur to make that slides available to
the conference

136
00:08:03,449 --> 00:08:10,169
as well so most API's today are you
seeing

137
00:08:10,169 --> 00:08:13,479
at the web protocol HTP arm

138
00:08:13,479 --> 00:08:17,159
many others at which is true for REST
and SOAP

139
00:08:17,159 --> 00:08:21,580
arm your message is sent over the web
Jan we have some type of format

140
00:08:21,580 --> 00:08:25,300
I as your mapping out your API you want
to you

141
00:08:25,300 --> 00:08:29,120
figure out what protocol your API's
using

142
00:08:29,120 --> 00:08:32,839
in you want to ensure you understand the
message format whether it's on

143
00:08:32,839 --> 00:08:36,539
you for soap it's a yet typically XML

144
00:08:36,539 --> 00:08:40,880
are mandatory XML you for rest it's
typically some type but Jason message

145
00:08:40,880 --> 00:08:45,610
a home you want to examine any online
files

146
00:08:45,610 --> 00:08:49,380
for your for your backend system will
get any yep it's a dotnet

147
00:08:49,380 --> 00:08:52,560
web service will get any you know with
dole's arias an x-files

148
00:08:52,560 --> 00:08:55,420
its Java you're looking for one of piles

149
00:08:55,420 --> 00:08:59,760
research Google for ally you know any
additional information on how to use the

150
00:08:59,760 --> 00:09:00,550
application

151
00:09:00,550 --> 00:09:05,029
can often you discover other API's
that's that

152
00:09:05,029 --> 00:09:09,260
kidded let your system it may not have
been disclosed about your system

153
00:09:09,260 --> 00:09:14,150
person quick Google search in even as
you start to use your application

154
00:09:14,150 --> 00:09:18,260
Alan and capture on time traffic you
want to examine those runtime:

155
00:09:18,260 --> 00:09:22,670
operations and start to think about
other way is that the API

156
00:09:22,670 --> 00:09:26,390
on your could potentially be used are
some things that might not be disclosed

157
00:09:26,390 --> 00:09:28,100
that could be hidden in the back end

158
00:09:28,100 --> 00:09:34,520
a couple quick testing steps one thing
as year

159
00:09:34,520 --> 00:09:37,839
mapping out the API trying different
HTTP methods

160
00:09:37,839 --> 00:09:42,040
don't just assume that because the user
provided documentation

161
00:09:42,040 --> 00:09:45,339
now and said that you had to use arm
POST request

162
00:09:45,339 --> 00:09:49,240
don't just assume that get request won't
work as well to try other

163
00:09:49,240 --> 00:09:53,730
other for apps don't assume that are
other ATP verbs like put

164
00:09:53,730 --> 00:09:58,150
in the wheat won't work its often they
will take get often lead to you ask him

165
00:09:58,150 --> 00:10:02,750
in functionality and often some really
fun interesting hidden functionality

166
00:10:02,750 --> 00:10:06,710
on so don't just assume the
documentation

167
00:10:06,710 --> 00:10:11,710
but actually try other methods as well
don't just try other methods but also

168
00:10:11,710 --> 00:10:14,230
try other content types as well

169
00:10:14,230 --> 00:10:18,170
so a if you're you're working with a

170
00:10:18,170 --> 00:10:21,940
rest based AP I don't assume that it
that it

171
00:10:21,940 --> 00:10:25,790
only going to you accept a chase on on

172
00:10:25,790 --> 00:10:29,790
request your try sending XML are try
sending a plane tax

173
00:10:29,790 --> 00:10:33,470
and see what you get back I found it in
exploring different

174
00:10:33,470 --> 00:10:37,210
mobile applications that by changing it
content-type: I can sometimes get the

175
00:10:37,210 --> 00:10:38,420
application to feedback

176
00:10:38,420 --> 00:10:42,089
different information arm which is quite
surprising you can send the same request

177
00:10:42,089 --> 00:10:42,770
same

178
00:10:42,770 --> 00:10:46,550
you know get UserType request but for
many different way the

179
00:10:46,550 --> 00:10:50,220
API can respond in different ways often
kinda disclosing

180
00:10:50,220 --> 00:10:55,180
hi edition on formation cool

181
00:10:55,180 --> 00:10:59,390
set/sets so quick background on real
high-level approach to

182
00:10:59,390 --> 00:11:03,420
API testing now get to you that the fun
stuff and some common things

183
00:11:03,420 --> 00:11:07,230
that i've seen in in testing various
APIs

184
00:11:07,230 --> 00:11:10,390
got six or seven

185
00:11:10,390 --> 00:11:15,250
a common things that I C and a walk
through each of these Inc analyst

186
00:11:15,250 --> 00:11:19,010
some major concerns talk about a couple
testing steps

187
00:11:19,010 --> 00:11:23,339
and then give you some things to think
about and protecting your applications

188
00:11:23,339 --> 00:11:27,910
on some things to hope we take back at
take back your own practices

189
00:11:27,910 --> 00:11:31,320
to start with the you broken off
medication

190
00:11:31,320 --> 00:11:34,520
and session management should be no
surprise

191
00:11:34,520 --> 00:11:37,990
arm you're a number a backend API's

192
00:11:37,990 --> 00:11:41,089
assume in the quite wrongly assumed that
the

193
00:11:41,089 --> 00:11:45,000
Apple that some type Apple be the only
thing that assesses a

194
00:11:45,000 --> 00:11:49,430
that nobody will hit the API directly
are they assume

195
00:11:49,430 --> 00:11:53,500
that get it there you guys are going to
be used by backend systems that no in

196
00:11:53,500 --> 00:11:55,990
user is going to discover it and send

197
00:11:55,990 --> 00:11:59,930
various types of requests and I get
highlighted a major concern out there

198
00:11:59,930 --> 00:12:00,890
that there's

199
00:12:00,890 --> 00:12:04,540
many many API's out there especially in
mobile applications

200
00:12:04,540 --> 00:12:08,880
that often do your sensitive information
and they had no security around them at

201
00:12:08,880 --> 00:12:09,339
all

202
00:12:09,339 --> 00:12:12,480
I just no authentication just completely
open

203
00:12:12,480 --> 00:12:15,990
on hopefully this is obviously bad on

204
00:12:15,990 --> 00:12:19,780
but its absolutely were saying because
there's

205
00:12:19,780 --> 00:12:23,670
I guess so many APs that at dentist
wrongfully assume

206
00:12:23,670 --> 00:12:27,910
that nobody's going to hit them directly
so they don't need to protect their back

207
00:12:27,910 --> 00:12:28,930
and resources

208
00:12:28,930 --> 00:12:33,060
the whole other class serve API's out
there

209
00:12:33,060 --> 00:12:37,010
dad had implemented some type our
framework whether be something like

210
00:12:37,010 --> 00:12:40,990
open I DR know of and they're using

211
00:12:40,990 --> 00:12:44,170
a really old version it wanted these
frameworks are they haven't configured

212
00:12:44,170 --> 00:12:44,700
it

213
00:12:44,700 --> 00:12:47,760
securely so in secure

214
00:12:47,760 --> 00:12:50,970
don't don't just assume that because
you're using a framework that its

215
00:12:50,970 --> 00:12:55,190
going to protect you on he did to ensure
that it today that you're using the

216
00:12:55,190 --> 00:12:55,730
latest

217
00:12:55,730 --> 00:12:58,400
version that doesn't die have known

218
00:12:58,400 --> 00:13:01,570
serious vulnerabilities and that is
properly configured

219
00:13:01,570 --> 00:13:05,090
some other authentication and

220
00:13:05,090 --> 00:13:08,830
in session concerns are

221
00:13:08,830 --> 00:13:12,570
typical from that from the web world as
well we see on

222
00:13:12,570 --> 00:13:16,340
non expiring sessions Missy session
tokens that what we have

223
00:13:16,340 --> 00:13:19,870
forever are are great for a very very
long time

224
00:13:19,870 --> 00:13:24,170
which up I see increases the amount of
time an attacker could have to you

225
00:13:24,170 --> 00:13:27,910
to exploit those sessions we see the
same

226
00:13:27,910 --> 00:13:31,730
weak password and poor password policies
that we see

227
00:13:31,730 --> 00:13:36,090
and front-end web applications where
outback and APIs

228
00:13:36,090 --> 00:13:39,320
don't enforce a strong password
complexity

229
00:13:39,320 --> 00:13:42,460
we don't have some type of heart account
lockout powers

230
00:13:42,460 --> 00:13:47,300
policy aware they have various methods
to make it possible to

231
00:13:47,300 --> 00:13:50,470
enumerate users which can lead to
account harvesting

232
00:13:50,470 --> 00:13:55,510
and other West Point up Westport on the
side that i really wanna point out is

233
00:13:55,510 --> 00:13:56,040
the

234
00:13:56,040 --> 00:13:59,280
on so many especially mobile
applications out there

235
00:13:59,280 --> 00:14:03,450
that have no walkout are no way to
expire sessions

236
00:14:03,450 --> 00:14:06,650
arm as an inducer

237
00:14:06,650 --> 00:14:10,040
yeah i win are rapi user as is your

238
00:14:10,040 --> 00:14:14,820
get complete your transactions you need
some type of way to terminate a session

239
00:14:14,820 --> 00:14:18,450
it's a processions not that not not
living on for ever there so many

240
00:14:18,450 --> 00:14:21,490
applications out there that don't have
basic lockout functionality

241
00:14:21,490 --> 00:14:26,230
to some testing steps for working at on

242
00:14:26,230 --> 00:14:29,670
authentication our one as your testing
API's

243
00:14:29,670 --> 00:14:34,590
try to you don't just assume that
security at authentication is required

244
00:14:34,590 --> 00:14:37,870
try to send request with no
authentication and see what happens

245
00:14:37,870 --> 00:14:41,610
arm you may be surprising results our
you idea

246
00:14:41,610 --> 00:14:45,010
it might be a very bad surprise that a

247
00:14:45,010 --> 00:14:49,620
the applications except request with
with with no authentication

248
00:14:49,620 --> 00:14:53,560
are review your authentication scheme
make sure that the framework that's

249
00:14:53,560 --> 00:14:56,650
in place is wat is dat

250
00:14:56,650 --> 00:15:00,050
the latest and greatest if there's if it
using an old version

251
00:15:00,050 --> 00:15:03,260
a water pump are something looked work
for our

252
00:15:03,260 --> 00:15:07,530
for no no of a boner abilities attempt

253
00:15:07,530 --> 00:15:11,310
all the same things that you would in a
web application on

254
00:15:11,310 --> 00:15:15,510
and with with the web well again you try
to use simple

255
00:15:15,510 --> 00:15:19,160
passwords I tried to you brute force the
account

256
00:15:19,160 --> 00:15:25,050
on your test that password complexity so
some things to think about

257
00:15:25,050 --> 00:15:28,230
up for the developers in the room make
sure that your

258
00:15:28,230 --> 00:15:31,240
API's require some type of
authentication

259
00:15:31,240 --> 00:15:34,600
you please use strong passwords up to
the frameworks

260
00:15:34,600 --> 00:15:40,030
arm as mentioned please have some way to
walk out and terminate sessions

261
00:15:40,030 --> 00:15:43,670
and invalidated this at that is

262
00:15:43,670 --> 00:15:48,310
terminations really do work it finally
pay attention to sum up your sensitive

263
00:15:48,310 --> 00:15:49,200
operations

264
00:15:49,200 --> 00:15:52,970
so if you have a sensitive operations
something that's dealing with sensitive

265
00:15:52,970 --> 00:15:53,800
data

266
00:15:53,800 --> 00:15:57,950
like a banking transaction or a purchase
transaction

267
00:15:57,950 --> 00:16:01,090
insurer at two pay extra kit at

268
00:16:01,090 --> 00:16:05,230
exter attention to the to the
authentication around that

269
00:16:05,230 --> 00:16:10,590
those methods sex porno ability i

270
00:16:10,590 --> 00:16:14,380
common we see in Apis is information
leakage

271
00:16:14,380 --> 00:16:18,050
on this is extremely common in mobile
backends

272
00:16:18,050 --> 00:16:21,140
where the API's will respond with more
data

273
00:16:21,140 --> 00:16:24,410
dan a then is requested aP's returning

274
00:16:24,410 --> 00:16:28,040
all records from the database instead of
just the one user that

275
00:16:28,040 --> 00:16:32,260
that was that was requested aren't we
also see

276
00:16:32,260 --> 00:16:37,250
a backup data letters where a user can
request as much data as they won

277
00:16:37,250 --> 00:16:42,790
a request for 23 request order 124 in
Glasgow 25 26 27

278
00:16:42,790 --> 00:16:46,570
and there's no new backend when it's too
how many records

279
00:16:46,570 --> 00:16:51,390
up and a user can up that the user can
request

280
00:16:51,390 --> 00:16:55,360
and then on we also commonly see

281
00:16:55,360 --> 00:16:58,960
information leakage in error messages
error messages that reveal

282
00:16:58,960 --> 00:17:02,280
interesting information often technical
information about the back end

283
00:17:02,280 --> 00:17:06,449
took up all fun quick examples 01

284
00:17:06,449 --> 00:17:11,400
is the that registered a conference so
when is the 2014 our essay

285
00:17:11,400 --> 00:17:16,020
on mobile application which the i/o
active guys blog about

286
00:17:16,020 --> 00:17:20,020
as exposing personal data this is a fun
little

287
00:17:20,020 --> 00:17:23,600
you know typical conference application
that was intended for users to you

288
00:17:23,600 --> 00:17:27,800
gather information about conference
sessions and venue maps

289
00:17:27,800 --> 00:17:31,659
com and what have you but there is a
dates back and API

290
00:17:31,660 --> 00:17:34,670
had a in that they'd forget users

291
00:17:34,670 --> 00:17:38,510
that would return all the registered
users from the conference

292
00:17:38,510 --> 00:17:41,840
along with a lot of their personal
information such as the company they

293
00:17:41,840 --> 00:17:44,040
work for their position in the company

294
00:17:44,040 --> 00:17:47,180
on a company email address a lot of
their social media

295
00:17:47,180 --> 00:17:51,070
links to high places like LinkedIn and
Facebook

296
00:17:51,070 --> 00:17:54,560
just I a treasure trove information

297
00:17:54,560 --> 00:17:58,500
so intestine for

298
00:17:58,500 --> 00:18:02,440
information leakage are you should
review all of your API responses

299
00:18:02,440 --> 00:18:05,570
on do they've returned just what was
requested

300
00:18:05,570 --> 00:18:08,650
are due to return more if I your
requested

301
00:18:08,650 --> 00:18:13,220
information about when user to return
just that when users information are due

302
00:18:13,220 --> 00:18:14,600
to return a list of

303
00:18:14,600 --> 00:18:20,160
all users as you're fiddling with that
various parameters in your API stripe

304
00:18:20,160 --> 00:18:25,250
on not just in in our you strings as
parameters but tried various wild card

305
00:18:25,250 --> 00:18:25,880
values

306
00:18:25,880 --> 00:18:30,820
you try your can typical database while
cars such as the star and her

307
00:18:30,820 --> 00:18:33,840
and at and percent science a

308
00:18:33,840 --> 00:18:37,160
spaces in blanks see if I see him

309
00:18:37,160 --> 00:18:41,190
can't figure out how the API is
communicating with its backend database

310
00:18:41,190 --> 00:18:44,310
and see if you can track it into
returning more records

311
00:18:44,310 --> 00:18:48,270
unintended and also your review error
messages

312
00:18:48,270 --> 00:18:52,090
do you any the air messages reveal
interesting information that could lead

313
00:18:52,090 --> 00:18:52,640
to you

314
00:18:52,640 --> 00:18:57,400
other types of attacks so one quick
example from

315
00:18:57,400 --> 00:19:00,660
my personal test answers a a mobile out
that a

316
00:19:00,660 --> 00:19:04,040
was recently testing and this mobile app

317
00:19:04,040 --> 00:19:07,540
it may be hard to see on the screen but
had a a customer info

318
00:19:07,540 --> 00:19:12,380
out this is a customer and for request
and a customer in for request

319
00:19:12,380 --> 00:19:15,770
he send it a a customer ID arm

320
00:19:15,770 --> 00:19:19,100
anyways your possible to enumerate
through all this custom writing a sec

321
00:19:19,100 --> 00:19:23,120
ago your customer 611 612 614 615

322
00:19:23,120 --> 00:19:27,360
and i could get in not just my
information but the information up all

323
00:19:27,360 --> 00:19:28,860
the other customers at this price

324
00:19:28,860 --> 00:19:32,750
at and you're better yet with all the
information that I returned about these

325
00:19:32,750 --> 00:19:36,670
customers it include their name to your
email address and information about them

326
00:19:36,670 --> 00:19:41,100
and if you can see that last column up
there at also return their password hash

327
00:19:41,100 --> 00:19:44,920
which had no idea why and mobile app
would need to you I peten

328
00:19:44,920 --> 00:19:48,640
your password hashes not bad your back
back to the client

329
00:19:48,640 --> 00:19:51,860
how much less that password hashes all
the users of the system

330
00:19:51,860 --> 00:19:56,030
object but this one did Sep information
leakage

331
00:19:56,030 --> 00:20:00,179
I a very serious problem with a mobile
app's in various APIs

332
00:20:00,179 --> 00:20:04,190
cell on so a few things to consider

333
00:20:04,190 --> 00:20:07,650
out when you when you're developing your
applications ensure that

334
00:20:07,650 --> 00:20:11,690
your only returning the crew at the
requested data ensure that your only

335
00:20:11,690 --> 00:20:13,440
returning the data that's needed

336
00:20:13,440 --> 00:20:17,570
time your review your responses for
sensitive information on in

337
00:20:17,570 --> 00:20:25,059
of course your review your messages to
another common flaw I see in APIs

338
00:20:25,059 --> 00:20:29,710
is hidden functionality ominous
typically comes about because

339
00:20:29,710 --> 00:20:33,890
that developers are assume security
through obscurity

340
00:20:33,890 --> 00:20:37,270
they assume that the end users are only
going to use

341
00:20:37,270 --> 00:20:41,830
the on be documented methods are the
methods that are approved

342
00:20:41,830 --> 00:20:45,610
they seem that they their users are we
going to bed they're only going to use

343
00:20:45,610 --> 00:20:46,200
the

344
00:20:46,200 --> 00:20:50,630
API's to really to their mobile
application are true

345
00:20:50,630 --> 00:20:54,870
om are through kind of a prude systems

346
00:20:54,870 --> 00:21:00,919
in the a wrongfully assume that no one's
going to hit these back in strictly and

347
00:21:00,919 --> 00:21:04,230
tried to and try to hit undocumented
methods

348
00:21:04,230 --> 00:21:07,530
so when you're testing APIs

349
00:21:07,530 --> 00:21:11,520
as he talked about before a try other
perhaps don't just try

350
00:21:11,520 --> 00:21:16,350
our notice try at the document it
post-riot get

351
00:21:16,350 --> 00:21:21,020
try other perks like putting the wheat
and then enumerate various API burke's

352
00:21:21,020 --> 00:21:24,350
if there's a method for get users also
try: our

353
00:21:24,350 --> 00:21:27,799
and explore and see if there's an edit
user Armada by User

354
00:21:27,799 --> 00:21:32,620
our dad user a two-week user hit often
find undocumented methods that can often

355
00:21:32,620 --> 00:21:34,419
do very very interesting things

356
00:21:34,419 --> 00:21:38,260
and watch has a a very interesting

357
00:21:38,260 --> 00:21:41,530
sec was project now on it has

358
00:21:41,530 --> 00:21:44,980
a just take on a board West one of those
word West is a

359
00:21:44,980 --> 00:21:48,610
is a comin API for upcoming arrest burp

360
00:21:48,610 --> 00:21:52,919
on West I must give you some a real
ideas for

361
00:21:52,919 --> 00:21:59,179
power for finding your various APIs to
some things to consider

362
00:21:59,179 --> 00:22:02,710
I'll protection why issue insure that
your a Wii

363
00:22:02,710 --> 00:22:06,370
exposing required methods if you have
methods

364
00:22:06,370 --> 00:22:09,980
a few don't assume that because you
haven't documented

365
00:22:09,980 --> 00:22:13,100
on some admin function that someone's
not going to find it

366
00:22:13,100 --> 00:22:16,660
if you howard arm other admin

367
00:22:16,660 --> 00:22:19,679
type functions are other sensitive
operations that needed

368
00:22:19,679 --> 00:22:22,880
that a common user wouldn't use

369
00:22:22,880 --> 00:22:26,190
I consider creating a completely
separate API for those

370
00:22:26,190 --> 00:22:31,490
comment said a bundling them with the
core API in for any super sensitive

371
00:22:31,490 --> 00:22:35,860
methods insure that you understand the
authentication scheme

372
00:22:35,860 --> 00:22:44,350
and that you're properly protecting them
the next vulnerability I commonly see

373
00:22:44,350 --> 00:22:48,140
in Apis still active access control and

374
00:22:48,140 --> 00:22:51,250
this also includes a lot of tampering
and trust flaws

375
00:22:51,250 --> 00:22:54,919
arm in a lot of what we saw in their
early days a

376
00:22:54,919 --> 00:23:00,040
a loss to in the web world arm it is
very is kinda perimeter fuzzy

377
00:23:00,040 --> 00:23:04,440
often API's I don't verify that the
requester

378
00:23:04,440 --> 00:23:08,900
is the authorized is authorized I to
receive whatever that the whenever

379
00:23:08,900 --> 00:23:09,860
they've requested

380
00:23:09,860 --> 00:23:12,880
tits Canada in in indirect object
references

381
00:23:12,880 --> 00:23:18,610
where yet the we have some type it in a
fine

382
00:23:18,610 --> 00:23:23,309
ID aunt it be back in system doesn't
verify that

383
00:23:23,309 --> 00:23:26,500
whoever's regret that that letters
requesting

384
00:23:26,500 --> 00:23:29,669
this resource has the authorization to

385
00:23:29,669 --> 00:23:33,909
to view it associate number of tampering
issues

386
00:23:33,909 --> 00:23:37,390
are a lot in mobile applications where
we can often

387
00:23:37,390 --> 00:23:41,000
tamper with parameters and change I dot
just the

388
00:23:41,000 --> 00:23:44,010
data that we send arm it

389
00:23:44,010 --> 00:23:47,870
in in receive but also the mobile
applications functionality as well

390
00:23:47,870 --> 00:23:52,350
can often at tamper with responses and
get your mobile application to you

391
00:23:52,350 --> 00:23:56,730
on on the client side expose hidden
functionality

392
00:23:56,730 --> 00:24:01,840
arm and then we yelp.com NYC malicious
uploads and downloads

393
00:24:01,840 --> 00:24:05,280
too few things to consider when you're
testing on

394
00:24:05,280 --> 00:24:10,510
in regards to tampering access controls
you know intercepted modify request

395
00:24:10,510 --> 00:24:14,750
so modify all your prayers just as you
would in a traditional web testing

396
00:24:14,750 --> 00:24:19,100
attempt to you enumerate through account
numbers user ID's

397
00:24:19,100 --> 00:24:23,160
order numbers anything that's
interesting in to do to stop with your

398
00:24:23,160 --> 00:24:24,700
request but also

399
00:24:24,700 --> 00:24:28,900
intercept modify your responses aren't
particularly in mobile applications

400
00:24:28,900 --> 00:24:32,420
you might find if you I can change
various responses

401
00:24:32,420 --> 00:24:35,950
in a mobile application you can get that
client to behave in a different way

402
00:24:35,950 --> 00:24:39,940
you my can expose on admin functionality
or defer part the mobile application

403
00:24:39,940 --> 00:24:40,700
that

404
00:24:40,700 --> 00:24:44,300
might not normally be exposed in the
quiet and

405
00:24:44,300 --> 00:24:47,500
you can do that using I and a number of
tools

406
00:24:47,500 --> 00:24:51,880
now we had Simon appear we're talking
about this app Arms Act has

407
00:24:51,880 --> 00:24:55,680
our here various stuff others built in

408
00:24:55,680 --> 00:24:58,730
where you can even in West Bay Services
region in search

409
00:24:58,730 --> 00:25:03,850
between different Tom injection we can
hot creature injection points between

410
00:25:03,850 --> 00:25:09,510
II different insertions to protest scene

411
00:25:09,510 --> 00:25:12,710
home didn't like this one showing up on
the screen very well

412
00:25:12,710 --> 00:25:17,660
out at this is after also from a mobile
application I tested recently just

413
00:25:17,660 --> 00:25:22,350
on any a quick enumeration abuser orders
I was able to I does that the mobile

414
00:25:22,350 --> 00:25:26,510
application was using would return a
history of the orders that I had made

415
00:25:26,510 --> 00:25:29,660
arm it by sending a request you don't
like to request

416
00:25:29,660 --> 00:25:34,970
order 23-24 and if I send it when 25 26
I could get some

417
00:25:34,970 --> 00:25:39,180
any other users orders as well just very
very typical

418
00:25:39,180 --> 00:25:42,260
that on ATI's don't

419
00:25:42,260 --> 00:25:46,170
I'd don't properly authorized their
backend

420
00:25:46,170 --> 00:25:53,080
had they're back in da BX

421
00:25:53,080 --> 00:25:55,600
to a couple things to you consider input

422
00:25:55,600 --> 00:26:00,260
protecting and i cant access controls
make sure that you validate parameters

423
00:26:00,260 --> 00:26:04,180
and make sure that you have proper
protection around sensitive information

424
00:26:04,180 --> 00:26:05,120
should review

425
00:26:05,120 --> 00:26:10,050
who has access to what ensure that hope
that users can only access what their

426
00:26:10,050 --> 00:26:18,240
had is supposed to access another common
flaw in API's is the lack of transport

427
00:26:18,240 --> 00:26:19,050
security

428
00:26:19,050 --> 00:26:22,940
arm now should be no surprise

429
00:26:22,940 --> 00:26:26,780
at to by using that yeah attackers can
often

430
00:26:26,780 --> 00:26:30,480
man in the middle traffic on when

431
00:26:30,480 --> 00:26:33,690
when various systems are using in secure
communication its

432
00:26:33,690 --> 00:26:38,100
AF we very often see at picking mobile
applications

433
00:26:38,100 --> 00:26:43,440
at are not requiring encryption they're
just sending data over plain HTP

434
00:26:43,440 --> 00:26:46,830
we see on your other applications that
have

435
00:26:46,830 --> 00:26:51,240
your poorly implemented SSL and TLS and
as we've seen here in the last year

436
00:26:51,240 --> 00:26:54,750
on theirs you know a number of ssl/tls
loss

437
00:26:54,750 --> 00:26:58,010
arm as he head pool shell shock a number
of other things

438
00:26:58,010 --> 00:27:01,050
acid want to ensure that your
applications are

439
00:27:01,050 --> 00:27:05,100
are are protecting sensitive data in
transport

440
00:27:05,100 --> 00:27:08,440
to endure testing your

441
00:27:08,440 --> 00:27:12,370
hot mobile applications web services in
various API's want to review the network

442
00:27:12,370 --> 00:27:13,080
traffic

443
00:27:13,080 --> 00:27:16,710
you particular pay attention to any
sensitive information any sensitive

444
00:27:16,710 --> 00:27:19,360
information that could be passing in
cleartext

445
00:27:19,360 --> 00:27:23,340
others number of tools out there that
you can use for checking for Sypher

446
00:27:23,340 --> 00:27:24,250
flaws such as

447
00:27:24,250 --> 00:27:28,070
SSL bigger SSL scanned number a wasp
resources

448
00:27:28,070 --> 00:27:31,770
for a transport level security aunt

449
00:27:31,770 --> 00:27:35,580
on this is a sample from a nap I was
looking at just last week

450
00:27:35,580 --> 00:27:39,190
and this is bad in many ways this is up

451
00:27:39,190 --> 00:27:42,900
a mobile application and this is eighty
it get request

452
00:27:42,900 --> 00:27:46,690
it's sending arm for up for a walk in

453
00:27:46,690 --> 00:27:50,020
it's in in the that the user ID and
password right there

454
00:27:50,020 --> 00:27:53,950
in the right there in the in the
parameter string and it's doing it over

455
00:27:53,950 --> 00:27:55,410
just plain HTTP

456
00:27:55,410 --> 00:28:00,610
which bird users connected over an
insecure network be easily snapped

457
00:28:00,610 --> 00:28:03,640
front at easily step from a bad guy

458
00:28:03,640 --> 00:28:09,740
so protecting to transport security just
ensure that your data is protected

459
00:28:09,740 --> 00:28:13,290
om ensure that you're not sending
sensitive data in cleartext

460
00:28:13,290 --> 00:28:18,049
and for your for your web back in CA
ensure that your

461
00:28:18,049 --> 00:28:21,650
on church turning on each TPS and not
just turning it on

462
00:28:21,650 --> 00:28:25,170
but in foreseen that transport level
encryption as well I

463
00:28:25,170 --> 00:28:29,150
common we see that our back in
encryption might be turned on but it's

464
00:28:29,150 --> 00:28:30,549
not always enforced

465
00:28:30,549 --> 00:28:36,110
still number one on the

466
00:28:36,110 --> 00:28:39,270
loss web top 10 eyes and injection
concerns

467
00:28:39,270 --> 00:28:42,929
and this is also a concern in the API
world as well

468
00:28:42,929 --> 00:28:46,000
see all the same things that we see in
the web world with

469
00:28:46,000 --> 00:28:49,570
sequel injection cross-site scripting
and here with

470
00:28:49,570 --> 00:28:53,260
various so Mets messages we introduce a
you know a whole nother

471
00:28:53,260 --> 00:28:58,070
Class A various XML injections as well
including kinda XPath injection

472
00:28:58,070 --> 00:29:02,000
harm XML denial of service or we can
send

473
00:29:02,000 --> 00:29:05,299
be a large payloads on that could have

474
00:29:05,299 --> 00:29:08,410
on it could down

475
00:29:08,410 --> 00:29:11,630
they could expand are up

476
00:29:11,630 --> 00:29:16,620
have excessive nestin are week or so
content that caused the backend server

477
00:29:16,620 --> 00:29:17,900
to you to do. s

478
00:29:17,900 --> 00:29:21,450
and then we see on XML an external
entity

479
00:29:21,450 --> 00:29:26,630
xxc injection opportunities as well
don't assume that because your arm

480
00:29:26,630 --> 00:29:31,100
API doesn't need if we have a a client
interface

481
00:29:31,100 --> 00:29:35,150
that it's not vulnerable to you all the
comment injection flaws

482
00:29:35,150 --> 00:29:38,960
on you I commonly see you know mobile
applications that have cross site

483
00:29:38,960 --> 00:29:40,020
scripting for us

484
00:29:40,020 --> 00:29:43,549
and the mobile developers will tell me
well it doesn't matter because the

485
00:29:43,549 --> 00:29:47,890
you know ContiTech they were sending
back is chase on it might beat refusing

486
00:29:47,890 --> 00:29:49,190
the application just

487
00:29:49,190 --> 00:29:52,400
in the hide just through the mobile
client

488
00:29:52,400 --> 00:29:55,419
but it may be possible to send a sexy
requests and other way is

489
00:29:55,419 --> 00:29:58,640
and exploit those in other ways to all
this

490
00:29:58,640 --> 00:30:02,470
same kind of injection concerns that we
see in the web world still apply

491
00:30:02,470 --> 00:30:07,750
in your back and API's in Web services
as well so it s in those

492
00:30:07,750 --> 00:30:09,340
out you're quite simply

493
00:30:09,340 --> 00:30:13,600
up at the best approach is just follows
all parameters

494
00:30:13,600 --> 00:30:17,230
and in fuzz fuzz fuzz some more om

495
00:30:17,230 --> 00:30:21,010
you we have a number of automated a web
utilities

496
00:30:21,010 --> 00:30:24,850
tech help with with causing yet from
Pepe and that

497
00:30:24,850 --> 00:30:28,930
it for the techniques and zap can mean
your temper with his request figure out

498
00:30:28,930 --> 00:30:30,530
what parameters might be interesting

499
00:30:30,530 --> 00:30:34,930
in use things like the old wassup quest
project I to enumerate through all types

500
00:30:34,930 --> 00:30:36,050
the possibilities

501
00:30:36,050 --> 00:30:41,490
it obviously the protection for that is
to validate all parameters

502
00:30:41,490 --> 00:30:45,020
so for attacking oppose all parameters
for

503
00:30:45,020 --> 00:30:48,960
protection validate all parameters you
want to do that that that validation

504
00:30:48,960 --> 00:30:50,010
server-side

505
00:30:50,010 --> 00:30:53,930
on and ensuring that that that the
clients it here

506
00:30:53,930 --> 00:30:57,610
on don't just assume that your clients
are going to adhere to your API

507
00:30:57,610 --> 00:31:00,220
specifications don't assume that they're
going to use

508
00:31:00,220 --> 00:31:04,950
I'm your API the way that is intended to
be used only assume that they're going

509
00:31:04,950 --> 00:31:06,100
to make request

510
00:31:06,100 --> 00:31:09,290
just on just using on

511
00:31:09,290 --> 00:31:14,170
an provided examples so one last

512
00:31:14,170 --> 00:31:17,770
our concern in this is up somewhat of a
fun one

513
00:31:17,770 --> 00:31:23,460
and noon all-too-common one are are
folks that don't properly manage their

514
00:31:23,460 --> 00:31:27,150
API keys and they expose those API keys

515
00:31:27,150 --> 00:31:30,440
Tom in their mobile binaries for the
hardcore them

516
00:31:30,440 --> 00:31:34,220
where they include an in you know
Android manifest files

517
00:31:34,220 --> 00:31:37,750
already NIOS Key West files on

518
00:31:37,750 --> 00:31:41,160
it's nothing new we've seen this in the
and in the enterprise world for a long

519
00:31:41,160 --> 00:31:41,920
time

520
00:31:41,920 --> 00:31:45,410
were eight API keys and other secrets
are hardcoded into the client

521
00:31:45,410 --> 00:31:46,270
applications

522
00:31:46,270 --> 00:31:50,880
are there simply stored in your plain
text files are configured finals

523
00:31:50,880 --> 00:31:55,520
and then on you all too common we now
we're finding API keys

524
00:31:55,520 --> 00:32:01,460
in online source code repositories like
it happened that bucket

525
00:32:01,460 --> 00:32:04,549
here's a test a quick example love on

526
00:32:04,549 --> 00:32:09,429
mobile application com assessing the
this is it out to

527
00:32:09,429 --> 00:32:13,169
NIOS application this is that he was
filed that had

528
00:32:13,169 --> 00:32:16,659
others applications om Amazon Web
Service

529
00:32:16,659 --> 00:32:20,669
IDET and secrets just i right there in
plain text

530
00:32:20,669 --> 00:32:24,610
on held in the out in the I was iTunes
Store

531
00:32:24,610 --> 00:32:30,110
home very very easy to find in source
code repositories

532
00:32:30,110 --> 00:32:33,450
com media probably have friends that

533
00:32:33,450 --> 00:32:38,860
fallen victim to the schemes com I found
one quick blog that I wonder how I don't

534
00:32:38,860 --> 00:32:40,390
think this is a a very a

535
00:32:40,390 --> 00:32:43,440
at is worth a good read this is the
developer

536
00:32:43,440 --> 00:32:46,679
on who blogged about his horror story on

537
00:32:46,679 --> 00:32:50,590
he knew going in that he needed that is
Amazon Web Services keys were important

538
00:32:50,590 --> 00:32:54,039
arm in was trying to do is due diligence
in protecting them

539
00:32:54,039 --> 00:32:57,580
he's trying to do the right thing and as
he was uploading his

540
00:32:57,580 --> 00:33:01,020
source code to you to get hard he on

541
00:33:01,020 --> 00:33:04,770
his Amazon Web Services keys
accidentally made it up there as well

542
00:33:04,770 --> 00:33:09,320
arm fortunate for him he reckoned you
recognize this right away

543
00:33:09,320 --> 00:33:12,429
Tom was able to you you try to you

544
00:33:12,429 --> 00:33:16,480
rectify the situation in remove all
references to those keys

545
00:33:16,480 --> 00:33:21,580
within five minutes dot nothing other
and then woke up the next morning with a

546
00:33:21,580 --> 00:33:24,159
bill from Amazon for over two thousand

547
00:33:24,159 --> 00:33:27,830
American dollars it is in this five
minutes that he is

548
00:33:27,830 --> 00:33:31,760
API keys around and get hard some
automated bot had found them

549
00:33:31,760 --> 00:33:35,070
and then spun up a a bunch of our web
servers

550
00:33:35,070 --> 00:33:39,080
honors a number of other stories up
there I got a couple find links

551
00:33:39,080 --> 00:33:43,090
arm its key management can be a very
very scary thing

552
00:33:43,090 --> 00:33:46,230
so you're testing APIs

553
00:33:46,230 --> 00:33:50,340
and various mobile applications are
search for API key is

554
00:33:50,340 --> 00:33:53,770
up with mobile applications cook for
them in them in the binary

555
00:33:53,770 --> 00:33:57,120
run strings against a binary at work for
thats on

556
00:33:57,120 --> 00:34:01,549
sensitive information look in your
manifested Key West files

557
00:34:01,549 --> 00:34:05,049
also review your online no source code
repositories

558
00:34:05,049 --> 00:34:08,859
you make sure that your not accidentally
posting sensitive information in a

559
00:34:08,859 --> 00:34:09,639
public spy

560
00:34:09,639 --> 00:34:13,020
in a in a public space as as

561
00:34:13,020 --> 00:34:16,109
reviewing the slides out with I wanna my
colleagues

562
00:34:16,109 --> 00:34:19,770
he gave me a great quote he said
everybody knows it to you should

563
00:34:19,770 --> 00:34:22,780
you hide your that turkey should be
capped are

564
00:34:22,780 --> 00:34:26,419
under a rock outside your front door on

565
00:34:26,419 --> 00:34:29,349
but in all seriousness yet take care in
storing your keys know where their

566
00:34:29,349 --> 00:34:29,970
stores

567
00:34:29,970 --> 00:34:33,730
know how their steward on know how their
transmitted if you are a

568
00:34:33,730 --> 00:34:38,580
if you're transfer mm down in some way
in know who might have access to them

569
00:34:38,580 --> 00:34:42,330
so a couple quick takeaways

570
00:34:42,330 --> 00:34:47,210
in evaluating APIs am one as you look at
your APIs

571
00:34:47,210 --> 00:34:51,830
adopt the on mind set up an attacker
don't just think about how

572
00:34:51,830 --> 00:34:55,700
your back into web services and mobile
app should be used but also think

573
00:34:55,700 --> 00:34:59,339
like an abuser and how on how others

574
00:34:59,339 --> 00:35:02,730
and how bad guys might might my user on

575
00:35:02,730 --> 00:35:08,089
your backend systems at try to identify
places in your applications that could

576
00:35:08,089 --> 00:35:09,780
be vulnerable or could be interesting

577
00:35:09,780 --> 00:35:12,830
look for sensitive transactions work for
interesting parameters

578
00:35:12,830 --> 00:35:16,320
on things like order ID's customer
information

579
00:35:16,320 --> 00:35:19,839
home you know enumerate through them and
don't just think of the

580
00:35:19,839 --> 00:35:22,849
up the use cases but think up abuse
cases

581
00:35:22,849 --> 00:35:25,970
for the developers in the audience

582
00:35:25,970 --> 00:35:30,369
arm please take away at and did

583
00:35:30,369 --> 00:35:33,510
the principle of least privilege on did

584
00:35:33,510 --> 00:35:36,560
you should always keep this in mind a.m.
when you when you're doing any type

585
00:35:36,560 --> 00:35:37,820
development by think it's

586
00:35:37,820 --> 00:35:40,890
an especially mindful I N in

587
00:35:40,890 --> 00:35:45,720
API in what service development not to
expose operations that are needed

588
00:35:45,720 --> 00:35:50,440
enough to expose any data that's not
required to quite simply if the date is

589
00:35:50,440 --> 00:35:52,170
not needed or not required

590
00:35:52,170 --> 00:35:55,609
arm yes simply don't return it or don't
use it

591
00:35:55,609 --> 00:36:00,140
in finally Tom

592
00:36:00,140 --> 00:36:04,120
as you're developing your back in EP
eyes are testing API's

593
00:36:04,120 --> 00:36:08,050
leverage that a lot of resources there
is a number I love loss projects

594
00:36:08,050 --> 00:36:11,580
into law school West resources that are
available online

595
00:36:11,580 --> 00:36:14,880
that are particularly interesting we set
out a couple that I think our

596
00:36:14,880 --> 00:36:18,680
irrelevant for mobile web service
testing appear that

597
00:36:18,680 --> 00:36:23,040
obviously a web service projects and
that she cheats on the southwest project

598
00:36:23,040 --> 00:36:23,850
in the new

599
00:36:23,850 --> 00:36:31,480
power lost Internet of Things project as
well and fine with your free to reach

600
00:36:31,480 --> 00:36:32,240
out to me

601
00:36:32,240 --> 00:36:35,760
I know after the session you probably
won't remember my name but you might

602
00:36:35,760 --> 00:36:37,220
remember my e-mail

603
00:36:37,220 --> 00:36:41,570
serious I'm good and you can reach me at
hacker HP dot com

604
00:36:41,570 --> 00:36:44,810
army can on you hit me up for

605
00:36:44,810 --> 00:36:48,720
ideas and thoughts around API testing or
about it

606
00:36:48,720 --> 00:36:52,670
you fortifying demands application
security assessment

607
00:36:52,670 --> 00:36:56,440
com to security assessment practice you
can also find

608
00:36:56,440 --> 00:37:00,170
up might hang out in the HP booth
upstairs for a little while as well

609
00:37:00,170 --> 00:37:05,110
and as a I guess a final they all make
my slides available to the

610
00:37:05,110 --> 00:37:09,220
at to the community and entry the to the
conference but I do have that

611
00:37:09,220 --> 00:37:12,950
you're a number of references and such
of a of tools in

612
00:37:12,950 --> 00:37:16,640
other useful wakes I think at that I
think you guys might enjoy

613
00:37:16,640 --> 00:37:20,500
great effect thanks so much for having
me

614
00:37:20,500 --> 00:37:23,880
and to have a time for questions

615
00:37:23,880 --> 00:37:28,960
for good save about to Addis couple
moments if anybody has any cut a quick

616
00:37:28,960 --> 00:37:38,670
questions

617
00:37:38,670 --> 00:38:05,460
an

618
00:38:05,460 --> 00:38:07,160
right date question is

619
00:38:07,160 --> 00:38:11,130
arm centered around API performance

620
00:38:11,130 --> 00:38:14,780
and inkjet okay back and I think
usability

621
00:38:14,780 --> 00:38:18,920
on often the API's are developed

622
00:38:18,920 --> 00:38:22,390
in backend services want to be very
helpful they want to you

623
00:38:22,390 --> 00:38:26,650
return as much data as possible so we
don't have to make multiple calls

624
00:38:26,650 --> 00:38:30,040
I to you to take the ice but has

625
00:38:30,040 --> 00:38:33,810
you know our web performance has to
improved over the years I'd say that

626
00:38:33,810 --> 00:38:35,420
that's a less and less necessary

627
00:38:35,420 --> 00:38:39,580
it certainly you're keeping in mind that
principle of least privilege I do find

628
00:38:39,580 --> 00:38:43,240
often in mobile applications that here
the back in Mobile IP eyes will try to

629
00:38:43,240 --> 00:38:44,450
be overly helpful

630
00:38:44,450 --> 00:38:48,070
it said it just returning the user
that's needed else and backache

631
00:38:48,070 --> 00:38:51,900
whole database serve all the users that
all the users and a system

632
00:38:51,900 --> 00:38:55,480
and then let the client figure out how
to use those on

633
00:38:55,480 --> 00:39:00,000
he should yep be very mindful what the
data that that she sent back

634
00:39:00,000 --> 00:39:03,160
in just know that whatever you're
sending on

635
00:39:03,160 --> 00:39:06,670
in response our the is potentially
exposed

636
00:39:06,670 --> 00:39:12,260
pretty anyone else has a

637
00:39:12,260 --> 00:39:15,190
other questions I'll be hanging around
the conference in all hang around the HP

638
00:39:15,190 --> 00:39:16,430
booth upstairs as well

639
00:39:16,430 --> 00:39:20,420
thanks so much for having me and yes a
involved I know what

640
00:39:20,420 --> 00:39:20,670
thanks

