1
00:00:10,510 --> 00:00:13,810
and thank everyone for coming here today
so

2
00:00:13,810 --> 00:00:17,710
as he just said so I'm going to be
talking about security policies today

3
00:00:17,710 --> 00:00:21,880
and security policies are one of those
funny things where

4
00:00:21,880 --> 00:00:25,260
if you use the term security policy
probably a pretty good idea of what you

5
00:00:25,260 --> 00:00:25,800
mean

6
00:00:25,800 --> 00:00:30,349
but you ask ten different people that a
fine security policy upon gonna get 10

7
00:00:30,349 --> 00:00:31,390
different to finish

8
00:00:31,390 --> 00:00:35,980
definitions so I'm gonna spend a little
bit of time saying exactly what I mean

9
00:00:35,980 --> 00:00:38,770
by security policy and security manager
so that

10
00:00:38,770 --> 00:00:43,550
we're on the same page as I dive into
this and as I go through that stuff it's

11
00:00:43,550 --> 00:00:46,370
going to apply to application
application security

12
00:00:46,370 --> 00:00:50,760
in general I'm gonna pretty quickly get
into some specific examples and talk

13
00:00:50,760 --> 00:00:52,770
about Java web applications

14
00:00:52,770 --> 00:00:58,370
um and so once I go over all that stuff
then I'm gonna start talking about how

15
00:00:58,370 --> 00:01:02,130
these security managers and security
policies are being used

16
00:01:02,130 --> 00:01:05,199
in practice today in particular how
their

17
00:01:05,199 --> 00:01:09,659
not getting used to and sort of going to
some other reasons on

18
00:01:09,659 --> 00:01:14,920
why that is and finally and by talking
about pie which is a

19
00:01:14,920 --> 00:01:19,210
open source project I've been working on
to try to alleviate some these problems

20
00:01:19,210 --> 00:01:23,590
with managing security policies and with
writing them so that hopefully

21
00:01:23,590 --> 00:01:26,979
they can help make these tools easier to
use and help out

22
00:01:26,979 --> 00:01:30,360
make applications more scare so

23
00:01:30,360 --> 00:01:35,340
what is the security policy so at a very
high level of security policy defines

24
00:01:35,340 --> 00:01:37,350
resources on an application

25
00:01:37,350 --> 00:01:43,159
and defines what is allowed to be
accessed and under what context and so

26
00:01:43,159 --> 00:01:46,390
contacts can mean a lot of different
things depending on what the security

27
00:01:46,390 --> 00:01:48,390
policy is that you're talking about

28
00:01:48,390 --> 00:01:52,610
and it can be something like what the
user is where the request is coming from

29
00:01:52,610 --> 00:01:53,240
in terms of

30
00:01:53,240 --> 00:01:56,590
IP internal/external it can be a lot of
different

31
00:01:56,590 --> 00:01:59,770
aspects of what the contact is but

32
00:01:59,770 --> 00:02:04,330
generally it's just what resources can
be accessed

33
00:02:04,330 --> 00:02:08,729
and so if you think about an ideal

34
00:02:08,729 --> 00:02:12,420
simple security policy for maybe
something like

35
00:02:12,420 --> 00:02:16,830
in online financial application it could
look something like this where you've

36
00:02:16,830 --> 00:02:17,340
got

37
00:02:17,340 --> 00:02:20,819
four different resources and depending
on what

38
00:02:20,819 --> 00:02:22,750
role a user is logged in

39
00:02:22,750 --> 00:02:26,160
as a weather there authenticated at all
they might have access to these

40
00:02:26,160 --> 00:02:27,440
different components

41
00:02:27,440 --> 00:02:31,170
in practice this starts getting more
complicated because you don't

42
00:02:31,170 --> 00:02:35,660
just base your decisions on users role
it might be based on something like

43
00:02:35,660 --> 00:02:36,500
whether they're

44
00:02:36,500 --> 00:02:41,959
internal or external and so you start
having this summer more finely grains

45
00:02:41,959 --> 00:02:47,400
security policy and sis before long you
realize it's not just about

46
00:02:47,400 --> 00:02:51,450
what the users role is it also about

47
00:02:51,450 --> 00:02:55,640
more specific details on these
application resources so

48
00:02:55,640 --> 00:02:58,900
whether it's a public or private
Starkweather

49
00:02:58,900 --> 00:03:02,250
you're talking about beta features or
something that's already been released

50
00:03:02,250 --> 00:03:05,520
so all these different details come into
play as you start developing the

51
00:03:05,520 --> 00:03:06,790
security policies

52
00:03:06,790 --> 00:03:11,680
and I just sort of generated this access
control matrix based on what

53
00:03:11,680 --> 00:03:15,670
seemed reasonable to me but you can
imagine what this begins a look like as

54
00:03:15,670 --> 00:03:17,280
you implemented in codes

55
00:03:17,280 --> 00:03:20,489
and its gonna end up being scattered
across a lot of files and

56
00:03:20,489 --> 00:03:24,770
really hard to figure out whether your
code matches this policy and also

57
00:03:24,770 --> 00:03:27,739
probably pretty difficult even figure
out whether this policy is

58
00:03:27,739 --> 00:03:30,890
actually the business logic that you
want so

59
00:03:30,890 --> 00:03:35,420
this it just kind of motivating the idea
that before long in reality

60
00:03:35,420 --> 00:03:39,540
security policies are gonna get pretty
hairy so

61
00:03:39,540 --> 00:03:42,760
a security manager is something that
takes in

62
00:03:42,760 --> 00:03:46,410
a security policy to find whatever
contacts you're speaking about

63
00:03:46,410 --> 00:03:49,630
and then is responsible for enforcing
that security policy

64
00:03:49,630 --> 00:03:53,510
so there's a lot of different examples
depending on your contact if you're

65
00:03:53,510 --> 00:03:58,610
at a database or file system this can be
the actual file system driver or the

66
00:03:58,610 --> 00:03:59,810
database driver

67
00:03:59,810 --> 00:04:04,790
on a firewall this could be software are
where rules actually enforcing

68
00:04:04,790 --> 00:04:08,739
those IP tables from whatever your
firewall is

69
00:04:08,739 --> 00:04:13,549
um the Android permissions framework is
a great example the security manager

70
00:04:13,549 --> 00:04:17,370
you define your security policy in your
applications manifest

71
00:04:17,370 --> 00:04:21,350
but then is the actual Android kernel
that's responsible for enforcing those

72
00:04:21,350 --> 00:04:22,300
policies

73
00:04:22,300 --> 00:04:25,650
and then getting a little closer to

74
00:04:25,650 --> 00:04:29,550
actual application policies there's
content security policy which is

75
00:04:29,550 --> 00:04:30,470
implemented in

76
00:04:30,470 --> 00:04:34,729
user browsers there's the Java security
manager which is a component that was

77
00:04:34,729 --> 00:04:36,310
inside the JVM

78
00:04:36,310 --> 00:04:39,310
and then their Spring Security which is
a

79
00:04:39,310 --> 00:04:44,060
Java framework for I'd actually
implementing various

80
00:04:44,060 --> 00:04:48,160
web security tools I'm gonna go into a
little bit more details on those last

81
00:04:48,160 --> 00:04:48,640
three

82
00:04:48,640 --> 00:04:52,620
just because as i said im gonna get in
some very specific examples going

83
00:04:52,620 --> 00:04:53,210
forward

84
00:04:53,210 --> 00:04:56,740
so content security policy

85
00:04:56,740 --> 00:05:00,590
is a defense and absolution thats
implemented

86
00:05:00,590 --> 00:05:05,220
in browsers to try to mitigate and
eliminates cross-site scripting

87
00:05:05,220 --> 00:05:08,840
so the way that works is that the server

88
00:05:08,840 --> 00:05:12,170
sends information in the response header
saying

89
00:05:12,170 --> 00:05:15,330
what's what origins

90
00:05:15,330 --> 00:05:18,440
different resources can come from and

91
00:05:18,440 --> 00:05:23,780
since in principle usually things like
scripts and CSS are static files

92
00:05:23,780 --> 00:05:26,930
if you're only retrieving those from
trusted sources

93
00:05:26,930 --> 00:05:30,570
then you can't get cross site scripting
injected into your page

94
00:05:30,570 --> 00:05:33,820
in practice your CSP

95
00:05:33,820 --> 00:05:36,820
policy can also say that you can do
things like run

96
00:05:36,820 --> 00:05:41,780
even I'll which that means that you can
so I execute arbitrary code but

97
00:05:41,780 --> 00:05:44,970
a strong CSP policy can

98
00:05:44,970 --> 00:05:48,310
reduces or eliminates someone across
sites getting

99
00:05:48,310 --> 00:05:52,860
factors so but all the security manager

100
00:05:52,860 --> 00:05:57,220
is something that's been in the JDK
since the beginning so it's been there

101
00:05:57,220 --> 00:05:58,790
since version 1.0

102
00:05:58,790 --> 00:06:02,940
and the most common use case for the job
security managers to sandbox

103
00:06:02,940 --> 00:06:06,040
untrusted code and you see this come up

104
00:06:06,040 --> 00:06:10,590
in for example web app lets if if
someone's got a dollar application on a

105
00:06:10,590 --> 00:06:11,540
web page

106
00:06:11,540 --> 00:06:15,630
then there's a job security measures in
place to make sure can't do things like

107
00:06:15,630 --> 00:06:19,210
read files and then send that data back
off to a server software

108
00:06:19,210 --> 00:06:22,320
so it's very often used in

109
00:06:22,320 --> 00:06:26,230
cases where you don't know what color is
doing anyone make sure it's only doing

110
00:06:26,230 --> 00:06:27,410
authorized things

111
00:06:27,410 --> 00:06:31,560
so the Google App Engine which host of
other web applications for you

112
00:06:31,560 --> 00:06:35,730
also uses a security manager to sandbox
the code that people upload

113
00:06:35,730 --> 00:06:39,050
um but it doesn't have to just be

114
00:06:39,050 --> 00:06:43,730
used on untrusted applications they can
also be used on code you trust

115
00:06:43,730 --> 00:06:46,840
to just make sure it's not doing
anything you don't expect it to can

116
00:06:46,840 --> 00:06:47,870
reduce

117
00:06:47,870 --> 00:06:51,190
what sockets can be opened what files
can be accessed what

118
00:06:51,190 --> 00:06:57,230
files can be executed and various things
like that so it's got a very granular

119
00:06:57,230 --> 00:07:02,050
permission sets that you can specify as
part of the security policy

120
00:07:02,050 --> 00:07:06,090
and really Sourav lockdown in get very
finely

121
00:07:06,090 --> 00:07:11,400
tunes controls on your application and
then the last example that I brought up

122
00:07:11,400 --> 00:07:12,730
on the earlier side is

123
00:07:12,730 --> 00:07:17,390
Spring Security which is as I said a
dollar framework that

124
00:07:17,390 --> 00:07:21,380
can do a lot of different things said
Scott a lot of customization

125
00:07:21,380 --> 00:07:25,220
and supplies a lot of protections the
web applications and

126
00:07:25,220 --> 00:07:28,280
the one thing about it that I really
really like is that

127
00:07:28,280 --> 00:07:33,590
it's got support for putting annotations
on methods and defining method level

128
00:07:33,590 --> 00:07:37,390
access controls thats you can then
Hawkins here

129
00:07:37,390 --> 00:07:40,540
security policy and the fine

130
00:07:40,540 --> 00:07:45,030
what users what roles what I P S can
access certain method so if you think

131
00:07:45,030 --> 00:07:46,870
about something that sensitive like

132
00:07:46,870 --> 00:07:50,570
credit card data you can put an
annotation on your debt credit card

133
00:07:50,570 --> 00:07:51,150
number

134
00:07:51,150 --> 00:07:57,250
on the model for credit cards and
specify which users can access and

135
00:07:57,250 --> 00:08:00,950
so there's ways of getting really finely

136
00:08:00,950 --> 00:08:04,520
controlled security that is specific
your application

137
00:08:04,520 --> 00:08:07,540
to like this so

138
00:08:07,540 --> 00:08:11,620
in general the security managers enforce
policies

139
00:08:11,620 --> 00:08:15,960
and often addis additional layer of
protection on top of your applications

140
00:08:15,960 --> 00:08:20,450
and when they are utilized while they
can mitigate or entirely eliminate

141
00:08:20,450 --> 00:08:23,230
someone is really common classes a boner
abilities

142
00:08:23,230 --> 00:08:28,180
and so if these things are so great you
know we should be using

143
00:08:28,180 --> 00:08:32,480
rights um well let me give you a use
case

144
00:08:32,480 --> 00:08:35,870
love somewhere where this would help so
struts2

145
00:08:35,870 --> 00:08:40,310
is a web application framework that has
been plagued by remote

146
00:08:40,310 --> 00:08:43,690
code execution vulnerability is has had
over twelve them

147
00:08:43,690 --> 00:08:47,050
in the last five years or so and

148
00:08:47,050 --> 00:08:50,710
they're all related to injection into

149
00:08:50,710 --> 00:08:55,110
OJ and out which this object graph
notation language that struts uses

150
00:08:55,110 --> 00:08:58,460
as a way of storing dereferencing fields
within

151
00:08:58,460 --> 00:09:02,180
its object models and so you can

152
00:09:02,180 --> 00:09:05,640
so there's this I'll web logger whole

153
00:09:05,640 --> 00:09:09,530
called roller which happens to use as
viable framework because it happens to

154
00:09:09,530 --> 00:09:12,660
be using this phone will framework all
you need to do is pass a particularly

155
00:09:12,660 --> 00:09:13,650
crafted

156
00:09:13,650 --> 00:09:19,210
requests and Steph remote code execution
so if you just

157
00:09:19,210 --> 00:09:22,580
run this a cheapy request get requests

158
00:09:22,580 --> 00:09:25,860
it will pop up a calculator on your
screen

159
00:09:25,860 --> 00:09:29,040
and that's bad so

160
00:09:29,040 --> 00:09:33,850
the the first pass at fixing this
vulnerability involved

161
00:09:33,850 --> 00:09:37,730
blacklisting characters that UN use on
this attack

162
00:09:37,730 --> 00:09:42,410
ands that blocked the one particular
vulnerability and I knew about and they

163
00:09:42,410 --> 00:09:44,770
immediately found out that this was not
sufficient

164
00:09:44,770 --> 00:09:48,170
exclude a prendere pattern did not cover
other cases

165
00:09:48,170 --> 00:09:51,540
so babe did another pass at it

166
00:09:51,540 --> 00:09:55,460
and at this point strikes is using a
regular expression to whitelist

167
00:09:55,460 --> 00:09:58,900
allowed characters in so better

168
00:09:58,900 --> 00:10:01,949
white less is better than black lace on
allowed characters but it's still just a

169
00:10:01,950 --> 00:10:02,670
matter of

170
00:10:02,670 --> 00:10:06,820
regular expression matching the input
data and then passing it to this really

171
00:10:06,820 --> 00:10:07,740
powerful

172
00:10:07,740 --> 00:10:12,010
ogni language that has the potential to
execute arbitrary code

173
00:10:12,010 --> 00:10:15,070
so if you're supporting wannabes

174
00:10:15,070 --> 00:10:19,450
legacy strike two applications that's
all then you can't upgrade your version

175
00:10:19,450 --> 00:10:22,450
of struts you're stuck with this
potential issue of

176
00:10:22,450 --> 00:10:26,350
your application has a remote code
execution vulnerability

177
00:10:26,350 --> 00:10:30,280
so what do you do about it you need to
have some actual air protection on top

178
00:10:30,280 --> 00:10:31,440
of your application

179
00:10:31,440 --> 00:10:35,140
in reality supporting legacy
applications is something that we have

180
00:10:35,140 --> 00:10:35,760
to do

181
00:10:35,760 --> 00:10:40,330
and even though this current version
doesn't have any known exploits as I

182
00:10:40,330 --> 00:10:42,520
said it's just using a regular
expression

183
00:10:42,520 --> 00:10:46,570
to whitelist characters before passing
it on to this rgnl framework

184
00:10:46,570 --> 00:10:50,920
and so how confident are you that
there's still no way to craft a response

185
00:10:50,920 --> 00:10:52,680
that can execute arbitrary code

186
00:10:52,680 --> 00:10:56,970
it would be great to have an additional
layer protection to know that

187
00:10:56,970 --> 00:11:02,420
you probably less likely to get one this
remote code execution vulnerabilities

188
00:11:02,420 --> 00:11:06,060
so this is I think a very good case for
using something like two dollars

189
00:11:06,060 --> 00:11:09,600
security manager which has lots of
layers in this fine

190
00:11:09,600 --> 00:11:11,660
Lee Grahn permission mall to her

191
00:11:11,660 --> 00:11:15,330
vent these kinds of vulnerabilities so
you can

192
00:11:15,330 --> 00:11:19,140
finally specify which OJ and I'll
directives here allowing

193
00:11:19,140 --> 00:11:22,930
whether you can set the class loader
whether you can access an excuse certain

194
00:11:22,930 --> 00:11:24,710
files and all these things

195
00:11:24,710 --> 00:11:27,830
they need permission for in order to do
on the smoke at

196
00:11:27,830 --> 00:11:30,990
code executions so this

197
00:11:30,990 --> 00:11:34,460
that's a perfect example of why I think
we should be using the security managers

198
00:11:34,460 --> 00:11:37,030
they can protect legacy code and they
can't even protect you against

199
00:11:37,030 --> 00:11:39,410
vulnerabilities you don't even know
about

200
00:11:39,410 --> 00:11:43,330
and they've been around for twenty years
if not longer

201
00:11:43,330 --> 00:11:47,760
so every web application uses these
tools rights

202
00:11:47,760 --> 00:11:51,800
now you probably never even heard of
some these things I'm talking about

203
00:11:51,800 --> 00:11:54,920
so let's start by talking about CSP

204
00:11:54,920 --> 00:11:58,940
so before I A came over here to
Amsterdam I'd

205
00:11:58,940 --> 00:12:03,290
ran a script on the top500 web sites and
look to the response headers ISI which

206
00:12:03,290 --> 00:12:03,910
are using

207
00:12:03,910 --> 00:12:07,610
CSP and only 2.7 percent of them

208
00:12:07,610 --> 00:12:11,920
sent back a response to say they're
using CSP and

209
00:12:11,920 --> 00:12:15,170
even among those that are more than half
of them use this

210
00:12:15,170 --> 00:12:19,970
unsafe the valor unsafe in line
directive meaning that you can still run

211
00:12:19,970 --> 00:12:23,130
pretty much arbitrary code on those
sites are using CSP

212
00:12:23,130 --> 00:12:26,150
there's a good reason for that lots of
legacy code

213
00:12:26,150 --> 00:12:30,040
uses in liner Eve Alan lot some
frameworks use these things

214
00:12:30,040 --> 00:12:33,190
so it's better than having nothing bytes

215
00:12:33,190 --> 00:12:36,300
in reality just supporting these old
code base is mean that

216
00:12:36,300 --> 00:12:40,860
here going to be using this or week
security policy

217
00:12:40,860 --> 00:12:45,630
ends if you search around a little bit
finds a blog post people have done a lot

218
00:12:45,630 --> 00:12:48,180
of studies on how prevalent is CSP

219
00:12:48,180 --> 00:12:52,800
and the suggestion is that I guess even
worse after you get past those top 500

220
00:12:52,800 --> 00:12:55,920
sites very few sites and practice are
using CSP

221
00:12:55,920 --> 00:12:59,960
so to the Java security manager

222
00:12:59,960 --> 00:13:04,850
is again used in a lot of places that we
know about as a source and boxing

223
00:13:04,850 --> 00:13:05,610
mechanism

224
00:13:05,610 --> 00:13:08,630
but its prevalence is a little hard to
measure

225
00:13:08,630 --> 00:13:12,240
because it's or something that runs on
the server side to protect the web

226
00:13:12,240 --> 00:13:12,930
application

227
00:13:12,930 --> 00:13:16,750
their snowstorm fingerprint to decide
whether the sites are using a dollar

228
00:13:16,750 --> 00:13:17,740
Security Manager

229
00:13:17,740 --> 00:13:22,760
but I've talked to a lot of people about
this since I started on this project and

230
00:13:22,760 --> 00:13:24,200
no 1 I've talked to

231
00:13:24,200 --> 00:13:28,330
nose in a case where the job security
manager has been used on top of trusted

232
00:13:28,330 --> 00:13:28,900
code

233
00:13:28,900 --> 00:13:32,750
as a way of protection and see if anyone
here happens to

234
00:13:32,750 --> 00:13:36,270
heard the case at this I'd love to talk
to you afterwards because this is just

235
00:13:36,270 --> 00:13:39,460
not even something I've heard of people
doing so

236
00:13:39,460 --> 00:13:42,520
far as I know this is again something is
not being done

237
00:13:42,520 --> 00:13:46,140
and yet for example in the case I was
talkn bout with Struts it is you this

238
00:13:46,140 --> 00:13:47,840
great layer protection

239
00:13:47,840 --> 00:13:51,420
whether or not you know about Boehner
abilities in the frame issues

240
00:13:51,420 --> 00:13:57,590
so the question is if the schools are so
cool and so good why aren't we using

241
00:13:57,590 --> 00:14:01,620
and one of the first answers I hear
people give is that it impacts the

242
00:14:01,620 --> 00:14:03,130
performance the application

243
00:14:03,130 --> 00:14:07,760
if you're doing all these additional
permissions tax and security checks then

244
00:14:07,760 --> 00:14:10,910
is going to slow down your application
and of course there's no such thing as a

245
00:14:10,910 --> 00:14:11,730
free lunch

246
00:14:11,730 --> 00:14:15,030
there's gonna be some performance
impacts butts

247
00:14:15,030 --> 00:14:19,710
based on research people have done it's
not big enough that you should really be

248
00:14:19,710 --> 00:14:20,920
that concerned about it

249
00:14:20,920 --> 00:14:25,400
so paper from over 10 years ago study
the dollars security measure in

250
00:14:25,400 --> 00:14:26,250
particular and

251
00:14:26,250 --> 00:14:30,280
show that there's a five to one hundred
percent slowdown in resource requests

252
00:14:30,280 --> 00:14:33,910
one easing the security better and that
sounds really high like

253
00:14:33,910 --> 00:14:39,340
a hundred percent is not good but thats
per resource requests not per request

254
00:14:39,340 --> 00:14:43,190
not for web request and

255
00:14:43,190 --> 00:14:46,600
if you think about the density love
resource a class with an a typical

256
00:14:46,600 --> 00:14:49,020
application you're not reading and
writing files

257
00:14:49,020 --> 00:14:53,010
that many times within a given request
or even as much of a

258
00:14:53,010 --> 00:14:57,800
given request and this also doesn't
count for things like network overhead

259
00:14:57,800 --> 00:15:02,100
there can be involved with your response
time so when you factor all that stuff

260
00:15:02,100 --> 00:15:02,600
in

261
00:15:02,600 --> 00:15:06,340
the actual impact if the using a
security manager is pretty minimal

262
00:15:06,340 --> 00:15:09,360
on the actual response time other web
request

263
00:15:09,360 --> 00:15:15,560
and similarly the developers our Firefox
over mazzola had done benchmarks on the

264
00:15:15,560 --> 00:15:16,740
effective CSP

265
00:15:16,740 --> 00:15:20,440
and a very recent blog post says that
you know we recently

266
00:15:20,440 --> 00:15:24,770
a lot of work to improve the performance
and it's down 2.02 milliseconds per

267
00:15:24,770 --> 00:15:25,820
resource load

268
00:15:25,820 --> 00:15:29,410
and considering you've probably got at
most a few dozen

269
00:15:29,410 --> 00:15:33,060
bike going you know what they're really
dense web sites maybe you've got a

270
00:15:33,060 --> 00:15:34,989
couple hundred resources in

271
00:15:34,989 --> 00:15:38,179
a given page that's still only a few
milliseconds

272
00:15:38,179 --> 00:15:41,439
and if that's the thing that's
preventing you from using the security

273
00:15:41,439 --> 00:15:42,100
tools

274
00:15:42,100 --> 00:15:46,649
I think your priorities might the due to
be a look

275
00:15:46,649 --> 00:15:50,149
reevaluate its a couple milliseconds to
prevent

276
00:15:50,149 --> 00:15:53,569
access across your application is
probably not the reason

277
00:15:53,569 --> 00:15:57,720
that you're not using CSP so

278
00:15:57,720 --> 00:16:02,309
the other reason I hear people say is
it's just hard to use these things

279
00:16:02,309 --> 00:16:07,359
how do I bright a policy for CSP for the
dollar security man for how do I use

280
00:16:07,359 --> 00:16:08,410
Spring Security

281
00:16:08,410 --> 00:16:12,699
how do I know what permissions need to
be at since any good security policy is

282
00:16:12,699 --> 00:16:16,179
going to be a white western sea need to
know all the permissions that your

283
00:16:16,179 --> 00:16:17,329
policy needs

284
00:16:17,329 --> 00:16:22,480
and if it's a good policy that's
granular and doesn't grant too many

285
00:16:22,480 --> 00:16:25,779
permissions is going to be specific to
the different pieces are the application

286
00:16:25,779 --> 00:16:27,399
whether that's per page ur

287
00:16:27,399 --> 00:16:30,649
for class-a per package you've got to

288
00:16:30,649 --> 00:16:34,100
know what things each party application
needs

289
00:16:34,100 --> 00:16:37,309
and then assuming that you've done this

290
00:16:37,309 --> 00:16:41,040
efforts at creating a policy how can you
decide whether or not your policy is

291
00:16:41,040 --> 00:16:41,819
correct

292
00:16:41,819 --> 00:16:45,009
has spent some time trying to make a CSP
pop

293
00:16:45,009 --> 00:16:48,329
policy for an application I was working
on

294
00:16:48,329 --> 00:16:52,759
and I came across a web request a
resource on this something something

295
00:16:52,759 --> 00:16:54,489
something dark cloud front dotnet

296
00:16:54,489 --> 00:16:58,600
center Mike is that actually a
hard-coded hostname thats

297
00:16:58,600 --> 00:17:01,889
always going to be requested as part of
this application

298
00:17:01,889 --> 00:17:06,730
or is that sorta they randomly generated
hostname based on my location that has

299
00:17:06,730 --> 00:17:07,769
something to do with

300
00:17:07,769 --> 00:17:11,100
geo IP's and I don't know

301
00:17:11,100 --> 00:17:15,039
so should it be start up out front on
that's it I didn't know what I was

302
00:17:15,039 --> 00:17:17,610
trying his policy it's hard to decide
whether or not

303
00:17:17,610 --> 00:17:21,079
what you come up with is going to end up
breaking your application you don't want

304
00:17:21,079 --> 00:17:21,740
to do that

305
00:17:21,740 --> 00:17:24,860
that's not what's you want us to leave
helpers want to be we're gonna be

306
00:17:24,860 --> 00:17:27,260
unhappy if you're breaking their
application

307
00:17:27,260 --> 00:17:33,010
to supposedly gain secure and then
assuming that you have feared all that

308
00:17:33,010 --> 00:17:33,990
stuff outs

309
00:17:33,990 --> 00:17:37,769
how do you keep it up-to-date what
happens if a developer changes the

310
00:17:37,769 --> 00:17:40,649
resources that they're loading what
happens if you end up

311
00:17:40,649 --> 00:17:43,929
changing API's are changing whites

312
00:17:43,929 --> 00:17:48,310
I a third-party resources your poll

313
00:17:48,310 --> 00:17:53,010
down if you upgraded dependency is that
gonna change all the package names that

314
00:17:53,010 --> 00:17:55,950
you are granting permissions to s

315
00:17:55,950 --> 00:17:59,010
if you put in all this effort to make a
good security policy

316
00:17:59,010 --> 00:18:02,520
you want to make sure that you're going
to be able to actually utilize that

317
00:18:02,520 --> 00:18:03,460
efforts and

318
00:18:03,460 --> 00:18:06,860
continue using %uh policy in future
versions your code so these are all

319
00:18:06,860 --> 00:18:08,390
reasons that I hear on

320
00:18:08,390 --> 00:18:11,550
why we're not using Security Manager CSP

321
00:18:11,550 --> 00:18:17,150
and so just a walk through an example to
really motivate I think

322
00:18:17,150 --> 00:18:20,400
why this is a problem but tom cat

323
00:18:20,400 --> 00:18:24,520
the developers to put in a lot of effort
to make a really sane defaults security

324
00:18:24,520 --> 00:18:26,410
policy that ships with tom cat

325
00:18:26,410 --> 00:18:31,150
no need to do to turn it on his passes
dash security flag way start-up tom cat

326
00:18:31,150 --> 00:18:34,560
it does a lot of cool things like ran
the proper permissions the container

327
00:18:34,560 --> 00:18:36,570
itself while isolating all this

328
00:18:36,570 --> 00:18:40,240
web applications might have been there
and making sure that they

329
00:18:40,240 --> 00:18:44,400
don't interacting bad way is and so

330
00:18:44,400 --> 00:18:49,370
I decided to try doing this with a
different job a web app called pavel

331
00:18:49,370 --> 00:18:53,880
which is just another blogger their
store nothing too special about it it's

332
00:18:53,880 --> 00:18:54,690
just this kind of

333
00:18:54,690 --> 00:18:58,500
meet simple web application to try using
with this time cascading

334
00:18:58,500 --> 00:19:03,880
sure so i turn it on I go to pub a law
on my local host and I get a 404

335
00:19:03,880 --> 00:19:07,350
what's that about well probably means
that something went wrong as the

336
00:19:07,350 --> 00:19:09,100
application was trying to start up so

337
00:19:09,100 --> 00:19:12,550
I open up Tomcats logs in well I see

338
00:19:12,550 --> 00:19:17,340
sure enough there's a big stack trace in
there and your eyes how the glaze over a

339
00:19:17,340 --> 00:19:21,430
bit tears like I can't even read any of
that were my first to get out of this

340
00:19:21,430 --> 00:19:24,790
so if you squint hard enough you might
find the important things

341
00:19:24,790 --> 00:19:28,690
somewhere at the top you can see that
there was some exception with runtime:

342
00:19:28,690 --> 00:19:30,670
permissions and it got denied

343
00:19:30,670 --> 00:19:35,390
access declared members and won the
classes in the stack trace is this

344
00:19:35,390 --> 00:19:40,150
class from spring and a few are familiar
with springs bring this dependency

345
00:19:40,150 --> 00:19:43,840
injection so it auto wires in the things
you need into private and protected

346
00:19:43,840 --> 00:19:45,500
fields have classes

347
00:19:45,500 --> 00:19:50,490
so make sense that spring needs to be
able to access private fields on classes

348
00:19:50,490 --> 00:19:55,380
so all right that makes sense let's find
out what access declared members means

349
00:19:55,380 --> 00:19:58,350
just that actually know what is the
state that into Google you find the

350
00:19:58,350 --> 00:20:00,010
javadocs you read it you like

351
00:20:00,010 --> 00:20:01,740
understand why this is here

352
00:20:01,740 --> 00:20:05,620
ear I understand that spring needs this
so let me add that to the policy

353
00:20:05,620 --> 00:20:09,790
so you go to tom cat Stifel policy and
it

354
00:20:09,790 --> 00:20:15,000
tells you this this is what you need to
add policies to your web application

355
00:20:15,000 --> 00:20:20,070
and if you look at this bit States is a
code base that specifies that you're

356
00:20:20,070 --> 00:20:20,870
granting pol

357
00:20:20,870 --> 00:20:25,990
permissions to classes within your
application as opposed to this line

358
00:20:25,990 --> 00:20:30,070
which is granting permissions to
different jars containers dependencies

359
00:20:30,070 --> 00:20:31,130
if your application

360
00:20:31,130 --> 00:20:35,610
and then there you also specify the
class name of the permission you're

361
00:20:35,610 --> 00:20:37,460
adding as well as these potential other

362
00:20:37,460 --> 00:20:41,840
parameters so you've gotta sit there and
figure out what all these different

363
00:20:41,840 --> 00:20:44,830
pieces are that you've got it add to
your application

364
00:20:44,830 --> 00:20:48,300
we saw that there was this one time
permission and access declared member so

365
00:20:48,300 --> 00:20:49,920
it got a good idea those last two

366
00:20:49,920 --> 00:20:54,540
by what code base are we expose the
adding this permission to

367
00:20:54,540 --> 00:20:58,120
I've been saying spring a couple times
so we want added to spring

368
00:20:58,120 --> 00:21:01,320
right well if you look at couples
dependencies there's

369
00:21:01,320 --> 00:21:04,690
a spring core that seemed probably like
what he wants

370
00:21:04,690 --> 00:21:07,890
my sets this spring security core jar

371
00:21:07,890 --> 00:21:11,429
or maybe it was that Spring Web jar
that's in there or

372
00:21:11,429 --> 00:21:14,510
Spring Security web cuz but Scott
something new

373
00:21:14,510 --> 00:21:17,760
security right or contacts which is the
thing that actually

374
00:21:17,760 --> 00:21:22,120
auto wires that staff and is aware of
your different beans and so forth except

375
00:21:22,120 --> 00:21:24,929
that there's also the Spring beans which
has something to do with

376
00:21:24,929 --> 00:21:30,080
auto wiring and job which these dollars
are you supposed to use what

377
00:21:30,080 --> 00:21:34,280
maybe it's bring a oper spring and
summer Spring TX or spring expression or

378
00:21:34,280 --> 00:21:36,610
Spring Security configure spring Open ID

379
00:21:36,610 --> 00:21:40,980
but there's 12 spring jars and my web at
how do I know which spring

380
00:21:40,980 --> 00:21:46,059
charms was at his permission to so I
honestly have no idea how I suppose to

381
00:21:46,059 --> 00:21:47,020
figure this out

382
00:21:47,020 --> 00:21:50,740
and if you prey to the right Oracle's
they might tell you that

383
00:21:50,740 --> 00:21:54,429
what you need to adhere spring are your
Tomcat policy

384
00:21:54,429 --> 00:21:58,260
are these permissions to these five
dollars

385
00:21:58,260 --> 00:22:01,620
I don't even know I response to figure
that out but

386
00:22:01,620 --> 00:22:05,200
if you had that in you get past this
stack trace and

387
00:22:05,200 --> 00:22:10,039
and you can restart Tomcat and you still
get a 404

388
00:22:10,039 --> 00:22:14,950
so the process a building this policy
look something like this:

389
00:22:14,950 --> 00:22:18,679
you get your for all four you dig
through Tomcats logs you look up the

390
00:22:18,679 --> 00:22:21,500
dollar docs to figure out what
permission need to add

391
00:22:21,500 --> 00:22:24,529
you figure out how to add it to your
security policy

392
00:22:24,529 --> 00:22:27,649
restart Tomcat any still get a 404

393
00:22:27,649 --> 00:22:31,809
and just to get hubbell the startup you
have to do that loop

394
00:22:31,809 --> 00:22:36,700
eighty four times and each time you do
it yet to figure out which the 16 jars

395
00:22:36,700 --> 00:22:39,309
and a sled director years was the adding
that permission to

396
00:22:39,309 --> 00:22:43,380
and at this point that's just the start
up the application that's not even to do

397
00:22:43,380 --> 00:22:43,960
things like

398
00:22:43,960 --> 00:22:48,320
access files or upload files are any
these things that

399
00:22:48,320 --> 00:22:52,010
you're going to do we actually start
using application so

400
00:22:52,010 --> 00:22:55,429
you do this once and it is no surprise
that

401
00:22:55,429 --> 00:22:59,429
no one does this in practice it is a
painful process and by the time

402
00:22:59,429 --> 00:23:02,429
you're done with it probably have no
idea whether you've got a decent policy

403
00:23:02,429 --> 00:23:03,389
that works

404
00:23:03,389 --> 00:23:06,690
so to try to do something

405
00:23:06,690 --> 00:23:11,289
about this terrible process I started
working on this project called hi

406
00:23:11,289 --> 00:23:15,500
for policy in San she Asian enforcement
is an open source project is

407
00:23:15,500 --> 00:23:18,820
on get hub and the idea is to just

408
00:23:18,820 --> 00:23:23,429
simplify and automate this process so

409
00:23:23,429 --> 00:23:26,630
I'm gonna spends pretty much all time
talking about how to use it with a

410
00:23:26,630 --> 00:23:29,450
dollar security manager but it's
something as modular and works with

411
00:23:29,450 --> 00:23:31,049
security policies in general

412
00:23:31,049 --> 00:23:34,990
so it also works for CSP at the box and
there's some examples of using it with

413
00:23:34,990 --> 00:23:35,990
Spring Security

414
00:23:35,990 --> 00:23:39,630
and so what is pie pie

415
00:23:39,630 --> 00:23:43,510
first of all has a learning and it does
something similar to

416
00:23:43,510 --> 00:23:48,159
like SE Lake City use that where watches
your application Ryan

417
00:23:48,159 --> 00:23:52,100
and will automatically figure out what
permissions it he said generates

418
00:23:52,100 --> 00:23:55,429
in its policy so that a can at

419
00:23:55,429 --> 00:23:59,070
a layer of security to your application
so

420
00:23:59,070 --> 00:24:03,019
the second thing that it does is after
looking at all these permissions that

421
00:24:03,019 --> 00:24:04,820
your application will need to run

422
00:24:04,820 --> 00:24:09,490
it then uses various heuristics to
simplify and generalize that policy

423
00:24:09,490 --> 00:24:14,070
so that it is sore simple and easy to
understand

424
00:24:14,070 --> 00:24:18,039
and easy for human today and look at and
decide whether or not this

425
00:24:18,039 --> 00:24:18,630
policy

426
00:24:18,630 --> 00:24:22,800
has soared tweaks any to it and the last
thing that's

427
00:24:22,800 --> 00:24:26,300
I've done with pie is add this maven
Marshall

428
00:24:26,300 --> 00:24:30,640
so that you can make it part of your
software development life cycle tid

429
00:24:30,640 --> 00:24:35,110
test your application to rebuild your
policy and keep it up-to-date

430
00:24:35,110 --> 00:24:39,050
as you make changes to your application
so

431
00:24:39,050 --> 00:24:43,180
to go into a little bit more detail
about how this works suppose you've got

432
00:24:43,180 --> 00:24:47,150
your web application sitting in some
container like tom cat urge a year

433
00:24:47,150 --> 00:24:48,450
whatever you're using

434
00:24:48,450 --> 00:24:52,930
and the JVM always has a stall the
security manager built in there but

435
00:24:52,930 --> 00:24:56,540
generally is probably not acted so you
drop in pie

436
00:24:56,540 --> 00:25:00,380
and it turns on the job security manager
and anytime the job security manager

437
00:25:00,380 --> 00:25:01,590
needs a permission

438
00:25:01,590 --> 00:25:05,760
it will ask pie for permission to grant
that your application

439
00:25:05,760 --> 00:25:08,550
I will just always say yes you can and
that permission it's not gonna break

440
00:25:08,550 --> 00:25:09,550
application

441
00:25:09,550 --> 00:25:12,920
at this point it's just learning what
permissions application

442
00:25:12,920 --> 00:25:17,470
this and so as this goes along it
generates a policy and it

443
00:25:17,470 --> 00:25:21,100
output satin say is that somewhere that
you can then look at or even just

444
00:25:21,100 --> 00:25:25,190
except as it is so when it comes time to
actually enforce the policy

445
00:25:25,190 --> 00:25:29,180
pie will read that in and every time
that scary manager makes requests

446
00:25:29,180 --> 00:25:32,610
it'll say yes or no depending on whether
or not that permission is granted by

447
00:25:32,610 --> 00:25:33,610
security policy

448
00:25:33,610 --> 00:25:37,330
generated so I'd

449
00:25:37,330 --> 00:25:41,310
gave that a high-level specifically how
you do this if you're using something

450
00:25:41,310 --> 00:25:45,490
like tom cat all you need to do is drop
the pie charts into your live directory

451
00:25:45,490 --> 00:25:47,450
you're at them to class pass somehow

452
00:25:47,450 --> 00:25:51,830
using servlet 3.0 auto instantiation
ServiceMagic

453
00:25:51,830 --> 00:25:55,520
it'll automatically pick this up and
it'll do its thing I need to do is drop

454
00:25:55,520 --> 00:25:56,260
those dollars

455
00:25:56,260 --> 00:26:00,470
so than you load up powerful or whatever
your application is

456
00:26:00,470 --> 00:26:05,070
run tests you run your browser so you're
exercising application

457
00:26:05,070 --> 00:26:08,130
and it makes policy

458
00:26:08,130 --> 00:26:12,050
simple as that and so this is the policy
that on Matthew got generated

459
00:26:12,050 --> 00:26:15,850
for Pavel you can see that it's got
permission to read various things and

460
00:26:15,850 --> 00:26:17,230
its home directory

461
00:26:17,230 --> 00:26:21,060
can uploading delete files from the its

462
00:26:21,060 --> 00:26:24,680
theme where you can add custom images
and things

463
00:26:24,680 --> 00:26:28,930
and you can also see down here this
access declared members that we saw

464
00:26:28,930 --> 00:26:32,000
earlier so it picked that up as well so
this

465
00:26:32,000 --> 00:26:37,380
business or a policy that it generates
and so the second thing I mention that I

466
00:26:37,380 --> 00:26:38,050
does

467
00:26:38,050 --> 00:26:41,160
is simple fire policy for you so

468
00:26:41,160 --> 00:26:45,090
if you were to just let Pyron have it
just verbatim output everything that

469
00:26:45,090 --> 00:26:46,180
it's all you needed

470
00:26:46,180 --> 00:26:50,450
you would see a policy like this and it
turns out that pavel wanna upload files

471
00:26:50,450 --> 00:26:51,520
against everything

472
00:26:51,520 --> 00:26:55,130
names with incremented numbers and

473
00:26:55,130 --> 00:26:58,190
that not very good for you because

474
00:26:58,190 --> 00:27:02,430
if you test this and upload 100 files
and then deploy the security policy

475
00:27:02,430 --> 00:27:06,060
production when someone upload the 101st
file you're gonna get a permission

476
00:27:06,060 --> 00:27:06,850
denied

477
00:27:06,850 --> 00:27:10,580
because this policy doesn't let you
right to file

478
00:27:10,580 --> 00:27:14,850
upload a hundred 1.2 so what I does is
it Scott

479
00:27:14,850 --> 00:27:19,210
context-sensitive heuristics and it sees
things like file has and see that you've

480
00:27:19,210 --> 00:27:22,560
got a bunch of files and some directory
so it'll just collapse all those to

481
00:27:22,560 --> 00:27:23,510
slash star

482
00:27:23,510 --> 00:27:29,410
and when you run this simplification on
the policy generated for Pavel

483
00:27:29,410 --> 00:27:33,220
before the simplification this nearly
1800 lines and

484
00:27:33,220 --> 00:27:36,780
afterwards it's only eighty and if
you're going to look at one of these

485
00:27:36,780 --> 00:27:40,000
policies and decide whether it's correct
and whether it's doing what it's

486
00:27:40,000 --> 00:27:40,850
supposed to

487
00:27:40,850 --> 00:27:44,810
I definitely want to look at the second
one cuz I don't even think I can keep

488
00:27:44,810 --> 00:27:46,660
enough for the first time I had to
decide

489
00:27:46,660 --> 00:27:51,030
that's correct so I think this is also a
very important feature

490
00:27:51,030 --> 00:27:55,010
love making a security policy both
because it needs to not be

491
00:27:55,010 --> 00:27:59,360
too stringent cities have some
generality to it as I describe these

492
00:27:59,360 --> 00:28:00,340
file permissions

493
00:28:00,340 --> 00:28:03,590
and it also has to be easy for someone
to look at San

494
00:28:03,590 --> 00:28:08,780
art so let's say you've done all this
work you've

495
00:28:08,780 --> 00:28:12,920
built the policy automatically so it's
not too restrictive you know all the

496
00:28:12,920 --> 00:28:14,320
permissions it needs

497
00:28:14,320 --> 00:28:18,240
it's not too permissive you haven't
added a bunch of action things to it

498
00:28:18,240 --> 00:28:23,200
and by the time you finish doing this
year developers are on the next release

499
00:28:23,200 --> 00:28:27,050
so your policies already out of date how
do you deal with that

500
00:28:27,050 --> 00:28:30,190
so the

501
00:28:30,190 --> 00:28:33,740
last part of Pi thats I've already
mentioned a little bit

502
00:28:33,740 --> 00:28:38,660
is a maven plugin to make pie part the
div

503
00:28:38,660 --> 00:28:42,270
software development life cycle so you
can both validate

504
00:28:42,270 --> 00:28:44,220
and update your policy automatic

505
00:28:44,220 --> 00:28:47,740
Kylie you're already testing your
application thoroughly with every

506
00:28:47,740 --> 00:28:49,830
release right you've got great coverage

507
00:28:49,830 --> 00:28:53,159
in you know there are no bugs your
software so

508
00:28:53,159 --> 00:28:58,120
why not test it with your security
policy so

509
00:28:58,120 --> 00:29:03,039
all you need to do to put pi is part of
that test build is dropping the plugin

510
00:29:03,039 --> 00:29:06,830
hello where your server is and where
your configuration is

511
00:29:06,830 --> 00:29:11,010
and then run your test as usual so

512
00:29:11,010 --> 00:29:16,820
I pie doesn't do anything at first you
just start running your test however

513
00:29:16,820 --> 00:29:19,520
usually do down whether you're running
selenium ur

514
00:29:19,520 --> 00:29:23,780
some other a framework that exercises
your application

515
00:29:23,780 --> 00:29:27,309
cell whatever you're using and how
that's

516
00:29:27,309 --> 00:29:30,870
exercise the application pie will sit in
there

517
00:29:30,870 --> 00:29:34,549
you leave it in report only mode so that
it doesn't break your application

518
00:29:34,549 --> 00:29:38,150
so it's not gonna failure bill just
because the policy was wrong it's not

519
00:29:38,150 --> 00:29:40,400
gonna start making tests fail left and
right

520
00:29:40,400 --> 00:29:44,419
I but it is going to see any violations
that are occurring

521
00:29:44,419 --> 00:29:48,840
and so what the maven plugin does is
that the and have all your tests and all

522
00:29:48,840 --> 00:29:53,520
call out to the pie module and the
server and say what violations did you

523
00:29:53,520 --> 00:29:55,380
see while you're running all the tests

524
00:29:55,380 --> 00:29:58,780
and I'll automatically build new
policies for you

525
00:29:58,780 --> 00:30:02,179
so if you don't even need to go through
that whole ritual processor

526
00:30:02,179 --> 00:30:05,620
generating a policy to begin with they
can just see what's new

527
00:30:05,620 --> 00:30:10,299
about violations an update policy and so

528
00:30:10,299 --> 00:30:14,419
and optionally you can have it failed to
build without failing a those individual

529
00:30:14,419 --> 00:30:15,179
tests

530
00:30:15,179 --> 00:30:18,480
so that you know that you need to

531
00:30:18,480 --> 00:30:22,559
10 we deploy with an updated policy but
you don't need to

532
00:30:22,559 --> 00:30:25,600
goth figure out whether your test fail
because

533
00:30:25,600 --> 00:30:28,549
something actually broke in the
application was it just the policy doing

534
00:30:28,549 --> 00:30:29,220
something

535
00:30:29,220 --> 00:30:32,230
so

536
00:30:32,230 --> 00:30:35,830
course not a lot of time trying to talk
this up a little bit send the question

537
00:30:35,830 --> 00:30:36,350
is

538
00:30:36,350 --> 00:30:39,850
can you actually try pie out can I use
it so

539
00:30:39,850 --> 00:30:43,049
as I said if you're using something like
tom cat her daddy all you need to do is

540
00:30:43,049 --> 00:30:44,020
drop it in

541
00:30:44,020 --> 00:30:47,230
and if you're using a relatively modern

542
00:30:47,230 --> 00:30:51,260
container in a on actually find it put
it in there and start generating a

543
00:30:51,260 --> 00:30:52,200
policy for you

544
00:30:52,200 --> 00:30:56,789
using something like drop wizards yes
the two had one line of configurations

545
00:30:56,789 --> 00:30:57,340
idle

546
00:30:57,340 --> 00:31:00,350
it up and it's using standard interfaces

547
00:31:00,350 --> 00:31:04,929
so pretty much any Java web app you can
drop in pie and use a pretty

548
00:31:04,929 --> 00:31:08,440
um as I said its

549
00:31:08,440 --> 00:31:13,179
more generic than just the Java security
manager it also works for CSP so does

550
00:31:13,179 --> 00:31:14,299
something similar wary

551
00:31:14,299 --> 00:31:19,110
well just drop in a filter in at CSP
hatter's and see all the

552
00:31:19,110 --> 00:31:23,710
violations at the browser sends back in
on a nightly build up a policy from that

553
00:31:23,710 --> 00:31:27,909
on and if you have something
application-specific if using something

554
00:31:27,909 --> 00:31:29,950
like spring security that ties in

555
00:31:29,950 --> 00:31:34,470
users role what I P they're coming from
all these other different features

556
00:31:34,470 --> 00:31:39,489
that define the security policy you can
customize Pineville this custom

557
00:31:39,489 --> 00:31:42,700
module that still uses all these
features are the maven plugin and the

558
00:31:42,700 --> 00:31:44,210
IMAX implication

559
00:31:44,210 --> 00:31:47,850
and make it very specific to the
requirements have your application and

560
00:31:47,850 --> 00:31:48,359
year

561
00:31:48,359 --> 00:31:52,509
particular security policy so

562
00:31:52,509 --> 00:31:55,789
let's go back one more time and talk
about that struts 2 owner Billy I talked

563
00:31:55,789 --> 00:31:56,309
about

564
00:31:56,309 --> 00:32:00,340
and talk about what happens if we use
pie so

565
00:32:00,340 --> 00:32:03,629
you set up the pike and fake put it in
learning mode which is its default

566
00:32:03,629 --> 00:32:05,299
behavior such as first-line

567
00:32:05,299 --> 00:32:08,399
isn't even particularly necessary you
start up

568
00:32:08,399 --> 00:32:11,519
hubbell or sorry this was roller you
start up roller

569
00:32:11,519 --> 00:32:15,249
you run your tests you do whatever you
want to to exercise the application

570
00:32:15,249 --> 00:32:19,899
shut it down you put pie into actual
force mint modes

571
00:32:19,899 --> 00:32:24,909
you start up roller one more time and I
he tried to run that exploits

572
00:32:24,909 --> 00:32:28,190
and nothing happens no calculator pops
up

573
00:32:28,190 --> 00:32:31,249
and if you look at your Tomcat log it'll
say

574
00:32:31,249 --> 00:32:34,609
we saw a violation permission was denied
to

575
00:32:34,609 --> 00:32:37,940
do this particular a channel to write so

576
00:32:37,940 --> 00:32:41,639
pie without having to know anything
about OJ now without knowing anything

577
00:32:41,639 --> 00:32:42,749
about right sir

578
00:32:42,749 --> 00:32:46,369
anything about that particular
vulnerability blocked the remote

579
00:32:46,369 --> 00:32:49,720
remote code execution ands so

580
00:32:49,720 --> 00:32:53,259
if there's another remote code execution
struts one we don't even know about at

581
00:32:53,259 --> 00:32:54,059
this point

582
00:32:54,059 --> 00:32:58,830
pi can protect you from that sort of
thing without even knowing about it

583
00:32:58,830 --> 00:33:03,289
so what do I want you to take away from
this talk

584
00:33:03,289 --> 00:33:07,510
the main thing is that the stalls exists
for building security policies

585
00:33:07,510 --> 00:33:11,170
and securing your app against both known
and unknown vulnerabilities

586
00:33:11,170 --> 00:33:15,090
but they're not getting used and I think
we as an industry should be

587
00:33:15,090 --> 00:33:19,690
asking why is that if CSP and the job
security men have been around for so

588
00:33:19,690 --> 00:33:20,170
long

589
00:33:20,170 --> 00:33:24,980
wire using and my hypothesis as I've
been working on this project is just

590
00:33:24,980 --> 00:33:27,480
that these tools are not easy enough to
use

591
00:33:27,480 --> 00:33:31,030
even among security experts and among
the developers up a pack

592
00:33:31,030 --> 00:33:34,760
applications that understand these
things its

593
00:33:34,760 --> 00:33:39,770
just difficult to do and so my intent to
address some these difficulties

594
00:33:39,770 --> 00:33:44,200
is pie which is an open source project
is on get hobbits in maven-central

595
00:33:44,200 --> 00:33:48,340
so try it use it for kits provide for a
class

596
00:33:48,340 --> 00:33:51,780
let me know what you think it so that's
all I've got

597
00:33:51,780 --> 00:33:59,670
thank you I think we've got

598
00:33:59,670 --> 00:34:09,190
few minutes if anyone's got

599
00:34:09,190 --> 00:34:12,000
plane I integrate this into my am

600
00:34:12,000 --> 00:34:16,179
may even though prices would if I was
doing security testing

601
00:34:16,179 --> 00:34:20,070
is part of that as well my pickup
commissions that could be granted that I

602
00:34:20,070 --> 00:34:21,050
didn't want

603
00:34:21,050 --> 00:34:24,240
I yes that's true so if you're doing

604
00:34:24,240 --> 00:34:28,119
a learning mode either with a pie with
the maven plugin

605
00:34:28,119 --> 00:34:32,339
or outside in that context yeah anything
it sees

606
00:34:32,339 --> 00:34:36,460
it assumes is intended behavior of the
applications so you should

607
00:34:36,460 --> 00:34:39,669
distinguish between security testing

608
00:34:39,669 --> 00:34:42,960
hands here functional testing a

609
00:34:42,960 --> 00:34:46,970
that short answers certainly if you're
doing security testing a very much

610
00:34:46,970 --> 00:34:47,760
recommend

611
00:34:47,760 --> 00:34:51,619
then turning pile onto enforcement and
seeing whether it blocks the

612
00:34:51,619 --> 00:34:55,510
security issues are fine or even not
necessarily doing it

613
00:34:55,510 --> 00:34:59,140
enforcement mode but at least logging
the violations it sees so you can

614
00:34:59,140 --> 00:35:03,640
see on the server side hey I saw
something unusual

615
00:35:03,640 --> 00:35:07,890
and your question so

616
00:35:07,890 --> 00:35:12,130
I have one the game is set the security
managers and security for some famous

617
00:35:12,130 --> 00:35:16,480
they are often official air defense I
know you actually generating

618
00:35:16,480 --> 00:35:19,940
the forces for doesn't force will make
is based on the coats re not

619
00:35:19,940 --> 00:35:23,670
actually replicate actually have this
but of laws or the your sister

620
00:35:23,670 --> 00:35:27,940
thing replicating opposes a a in a
certain extent

621
00:35:27,940 --> 00:35:32,980
so if you're application does have
security vulnerabilities if it's not

622
00:35:32,980 --> 00:35:36,430
implementing sums were the author is
Asian Tackett supposed to

623
00:35:36,430 --> 00:35:39,630
then you're probably also not testing
facture

624
00:35:39,630 --> 00:35:42,829
in your as your exercise your
application running the test you're

625
00:35:42,829 --> 00:35:45,450
probably not doing that authorization
bypass

626
00:35:45,450 --> 00:35:49,069
so pi wouldn't see that and one at here
policy

627
00:35:49,069 --> 00:35:53,810
if you are testing that's then hopefully
your test is failing in recognizing

628
00:35:53,810 --> 00:35:57,180
this was supposed to give me an
authorization rejected and so your

629
00:35:57,180 --> 00:35:58,310
failure otherwise

630
00:35:58,310 --> 00:36:03,380
so it's certainly true that what this
does is going to give permission to what

631
00:36:03,380 --> 00:36:04,190
it sees

632
00:36:04,190 --> 00:36:07,270
but presumably what your testing is

633
00:36:07,270 --> 00:36:12,150
the expectations are the application to
give one example princes you're talking

634
00:36:12,150 --> 00:36:12,579
about

635
00:36:12,579 --> 00:36:17,500
the calculator that pops up executing
from Java if you have about program is

636
00:36:17,500 --> 00:36:19,240
actually executing multiple programs

637
00:36:19,240 --> 00:36:20,080
Java

638
00:36:20,080 --> 00:36:22,840
though allowing them because you
actually see the security measures yes

639
00:36:22,840 --> 00:36:23,970
and if I is a

640
00:36:23,970 --> 00:36:27,360
you can do comments on executions from
Jul that's what I mean

641
00:36:27,360 --> 00:36:30,590
yeah says you actually really taking
this osco test that

642
00:36:30,590 --> 00:36:35,690
the secret yes so if the yeah so if you
like to see a program get executed at

643
00:36:35,690 --> 00:36:37,570
one part of the code stand

644
00:36:37,570 --> 00:36:41,660
that permission is now granted the
application that being said

645
00:36:41,660 --> 00:36:44,920
the job security manager does have even

646
00:36:44,920 --> 00:36:48,810
more fine-grained permissions then I was
really letting on

647
00:36:48,810 --> 00:36:51,960
so when you granted permission to the
job security manager

648
00:36:51,960 --> 00:36:56,090
you granted to particular dollars or
even particular classes

649
00:36:56,090 --> 00:36:59,630
so it it sees that this particular class

650
00:36:59,630 --> 00:37:03,619
had execute this code ill grant
permission to that end and then if

651
00:37:03,619 --> 00:37:05,970
there's a vulnerability somewhere else
in your application

652
00:37:05,970 --> 00:37:10,680
it doesn't have a record that permission
and started security managers also very

653
00:37:10,680 --> 00:37:12,260
calm that actually touched the

654
00:37:12,260 --> 00:37:16,619
entire stack to make sure everything in
that stack has permission to this

655
00:37:16,619 --> 00:37:19,640
so you can't even get this problem of
sort of

656
00:37:19,640 --> 00:37:23,260
yes I granted permission to execute code
over here

657
00:37:23,260 --> 00:37:27,359
but this other unauthorized bed is
trying to use it texaco and you don't

658
00:37:27,359 --> 00:37:28,880
even get that unless that

659
00:37:28,880 --> 00:37:31,930
other piece of code also had that
permission at some point

660
00:37:31,930 --> 00:37:36,820
so yeah it depends on how granular
you're being when you develop your

661
00:37:36,820 --> 00:37:37,630
policies

662
00:37:37,630 --> 00:37:41,119
and pie does have some source
customization on how

663
00:37:41,119 --> 00:37:44,859
all far whether you want to collapse alt
our server

664
00:37:44,859 --> 00:37:48,130
look at the individual classes cuz
obviously if you do get a granular it

665
00:37:48,130 --> 00:37:49,930
gets to be a much longer policy

666
00:37:49,930 --> 00:37:57,220
arm

667
00:37:57,220 --> 00:38:02,000
what issues does pie but what issues do
you think I can mitigate and what issues

668
00:38:02,000 --> 00:38:03,350
do you think it cannot

669
00:38:03,350 --> 00:38:07,140
at a gay so

670
00:38:07,140 --> 00:38:10,890
a lot piña being a general framework

671
00:38:10,890 --> 00:38:13,940
it time depends on what you're applying
it to whens

672
00:38:13,940 --> 00:38:17,230
I'm gonna again speak to the contact to
the security manager

673
00:38:17,230 --> 00:38:21,910
just as that's what a lot of his talk
was about and so that really depends on

674
00:38:21,910 --> 00:38:25,910
what permissions the security manager
Ken four so we can prevent

675
00:38:25,910 --> 00:38:29,800
path manipulation because it whitelist
what files allow the axe

676
00:38:29,800 --> 00:38:34,610
est I they can potentially mitigate
something like

677
00:38:34,610 --> 00:38:39,580
server-side request forgery because
white lace which host names are louts

678
00:38:39,580 --> 00:38:42,890
allowed resolve an open soft its

679
00:38:42,890 --> 00:38:46,850
not going that particular model using an
assault access but a few

680
00:38:46,850 --> 00:38:51,600
apply pie to the CSP module then it can
help prevent access

681
00:38:51,600 --> 00:38:55,230
I it's not a friend authorization
bypasses

682
00:38:55,230 --> 00:38:58,250
in less you and build a model for your
application

683
00:38:58,250 --> 00:39:03,740
so it can potentially work on a lot of
defects especially well-known lines

684
00:39:03,740 --> 00:39:10,760
but it really depends on how you're
applying T

685
00:39:10,760 --> 00:39:14,160
do you think you could be applied to
legacy code somehow

686
00:39:14,160 --> 00:39:18,040
liked into it like an apple or something
like that you forced to use but

687
00:39:18,040 --> 00:39:21,780
you can you really you know you look
down here yeah I mean and that's exactly

688
00:39:21,780 --> 00:39:22,860
what I will

689
00:39:22,860 --> 00:39:26,340
was talking about with this trust to
example like if you're running a version

690
00:39:26,340 --> 00:39:27,440
of roller some

691
00:39:27,440 --> 00:39:32,690
legacy piece of code and you know it's
old and probably have the receipt

692
00:39:32,690 --> 00:39:33,820
security patches

693
00:39:33,820 --> 00:39:37,940
you don't know if it can be exploited or
not but you definitely want some

694
00:39:37,940 --> 00:39:41,690
added layer protection just cuz you know
this thing is old absolutely

695
00:39:41,690 --> 00:39:45,530
like that is one of the things that this
can do is did

696
00:39:45,530 --> 00:39:50,750
so yet this doesn't actually require any
source code years dropping jars into

697
00:39:50,750 --> 00:39:51,680
your container

698
00:39:51,680 --> 00:39:54,790
and it runs as part of your application

699
00:39:54,790 --> 00:39:58,380
so this is yet very much just

700
00:39:58,380 --> 00:40:01,920
running on with your war or whatever
your applications using

701
00:40:01,920 --> 00:40:07,440
think the speaker

702
00:40:07,440 --> 00:40:08,760
thank you

