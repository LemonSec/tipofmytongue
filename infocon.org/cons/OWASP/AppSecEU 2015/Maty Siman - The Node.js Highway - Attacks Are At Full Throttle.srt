1
00:00:10,100 --> 00:00:14,590
us

2
00:00:14,590 --> 00:00:17,830
think everyone and thank you for joining
me this morning

3
00:00:17,830 --> 00:00:20,940
in the next 45 minutes

4
00:00:20,940 --> 00:00:24,810
I will talk a little bit about and sum
up the No Jia

5
00:00:24,810 --> 00:00:28,029
node.js vulnerability basically a check
mark

6
00:00:28,029 --> 00:00:31,340
and the City of check marks a check
marks reduce orkut analysis

7
00:00:31,340 --> 00:00:36,160
to find on abilities in your code part
of the research is actually looking for

8
00:00:36,160 --> 00:00:40,080
von abilities or other research papers
is

9
00:00:40,080 --> 00:00:44,059
so we can introduce them into our
product and in this presentation we

10
00:00:44,059 --> 00:00:46,809
would like to share with you some of the
interesting aspect love

11
00:00:46,809 --> 00:00:50,350
node.js security which I hope you will
find also

12
00:00:50,350 --> 00:00:54,710
as interesting as I did a for those of
you who were at my

13
00:00:54,710 --> 00:00:58,230
my previous presentations you you may
know that the relief

14
00:00:58,230 --> 00:01:03,059
I'm a great fan of live demos they
really hate to be the recordings at the

15
00:01:03,059 --> 00:01:03,890
downside

16
00:01:03,890 --> 00:01:07,860
love live demos is that they might break
in real time so

17
00:01:07,860 --> 00:01:12,890
bear with me if something like that
happens so that gender for today's

18
00:01:12,890 --> 00:01:14,020
presentation

19
00:01:14,020 --> 00:01:17,740
is as follows: first double will
describe a little be the architectural

20
00:01:17,740 --> 00:01:18,509
node.js

21
00:01:18,509 --> 00:01:21,970
they believe that since you're sitting
in that room most if you are already

22
00:01:21,970 --> 00:01:23,130
familiar with that

23
00:01:23,130 --> 00:01:27,240
but just to make sure we're all on the
same page I will describe a little bit

24
00:01:27,240 --> 00:01:28,209
how no GS

25
00:01:28,209 --> 00:01:33,369
and works behind the scenes its it will
be from short we will describe some of

26
00:01:33,369 --> 00:01:35,060
the denial of services

27
00:01:35,060 --> 00:01:39,159
that and attacks that can be

28
00:01:39,159 --> 00:01:42,229
exploited for node.js we'll talk a
little bit about

29
00:01:42,229 --> 00:01:46,770
the crypto grew fueled with them with
the node.js the Jason

30
00:01:46,770 --> 00:01:50,690
part of node.js Jason is really
fundamental within OJ's

31
00:01:50,690 --> 00:01:55,740
but it brings a whole set of my ability
with we'll be talking about

32
00:01:55,740 --> 00:01:59,909
regular expression in our service and
finally about and I'll describe

33
00:01:59,909 --> 00:02:04,899
trace least throating hijacking which is
very interesting topic in my mind

34
00:02:04,899 --> 00:02:08,060
so very briefly both know Jess
Architektur

35
00:02:08,060 --> 00:02:11,720
so no G et node.js isn't event driven

36
00:02:11,720 --> 00:02:16,160
single-threaded and non-blocking i/o
which is built on top of chrome

37
00:02:16,160 --> 00:02:19,340
from %um projects v8 engine what does it
mean

38
00:02:19,340 --> 00:02:23,260
event-driven so I like for example this
is the code

39
00:02:23,260 --> 00:02:35,920
BC the code let me just turn it off

40
00:02:35,920 --> 00:02:39,030
yeah

41
00:02:39,030 --> 00:02:52,450
okay so that's the code and that

42
00:02:52,450 --> 00:02:56,900
so for example the this is the code that
to find if the specific follow is larger

43
00:02:56,900 --> 00:02:58,290
than 1 megabyte

44
00:02:58,290 --> 00:03:02,740
inside so I like other languages like
dot net and Java where you do

45
00:03:02,740 --> 00:03:06,790
find file and if size greater than one
megabyte do something

46
00:03:06,790 --> 00:03:09,910
in that case actually working with
called back

47
00:03:09,910 --> 00:03:14,740
recall the filesystem exist function we
send this task

48
00:03:14,740 --> 00:03:18,780
for different thread in with all the
system once you find if the file exists

49
00:03:18,780 --> 00:03:22,670
call or call back function okay the one
that appears

50
00:03:22,670 --> 00:03:25,810
writing year once you've found the file
a

51
00:03:25,810 --> 00:03:30,170
give me this time the statistics of that
file once again the statistics

52
00:03:30,170 --> 00:03:33,360
call back my call back function so it's
not

53
00:03:33,360 --> 00:03:38,520
a leaner execution but rather a lot of
call back back and forth looking at the

54
00:03:38,520 --> 00:03:41,940
at the architecture basically there is
an event queue

55
00:03:41,940 --> 00:03:44,989
each event all the events are cute in a
single

56
00:03:44,989 --> 00:03:49,480
cue and it's important that single cue
Thursday event loop

57
00:03:49,480 --> 00:03:53,230
that the grub each day a single event
from the queue

58
00:03:53,230 --> 00:03:57,620
and executed in on a single thread just
a single thread

59
00:03:57,620 --> 00:04:00,790
in case the action

60
00:04:00,790 --> 00:04:03,900
and izzle is an is denial action

61
00:04:03,900 --> 00:04:07,100
action that takes a lot of time but not
from the CPU but

62
00:04:07,100 --> 00:04:10,239
other devices the action is

63
00:04:10,239 --> 00:04:14,080
sent to a different thread so for
example in this is Tim wants to read if

64
00:04:14,080 --> 00:04:14,660
I'll

65
00:04:14,660 --> 00:04:18,919
doesn't happen on the main thread
because it will block all other

66
00:04:18,919 --> 00:04:20,940
activities it is sent to a different

67
00:04:20,940 --> 00:04:25,900
I O thread a so this concept mean that
there is a single thread

68
00:04:25,900 --> 00:04:29,290
which is very sensitive because once
this thread is running

69
00:04:29,290 --> 00:04:34,310
nothing health gonna happen in this
thread basically dispatcher's request

70
00:04:34,310 --> 00:04:37,430
the oh I obon request to other

71
00:04:37,430 --> 00:04:37,980
and

72
00:04:37,980 --> 00:04:41,630
other threads okay and want me these
threats complete

73
00:04:41,630 --> 00:04:45,170
the trigger and a call back function the
push it into the event queue

74
00:04:45,170 --> 00:04:51,780
so in due time it will also get executed
and so the fact that no GST

75
00:04:51,780 --> 00:04:55,520
event even driven single-threaded it
means that on the one hand

76
00:04:55,520 --> 00:04:59,130
the benefit is there is no context
switching a single thread

77
00:04:59,130 --> 00:05:03,530
no context switching works very very
fast this secure doesn't have to wait

78
00:05:03,530 --> 00:05:05,530
for an i/o action to complete

79
00:05:05,530 --> 00:05:08,640
just send the style action to a
different thread

80
00:05:08,640 --> 00:05:12,940
and then starts doing the next action so
it works well for i/o intensive

81
00:05:12,940 --> 00:05:14,550
applications and web app

82
00:05:14,550 --> 00:05:20,410
it doesn't work well for CPU intensive
applications so if you have a CPU

83
00:05:20,410 --> 00:05:22,340
intensive application I just doesn't
work well

84
00:05:22,340 --> 00:05:27,280
will see that in a moment and so let's
take a look on this

85
00:05:27,280 --> 00:05:31,590
am kind of I CPU intensive code

86
00:05:31,590 --> 00:05:35,160
this code looks for the sum all the

87
00:05:35,160 --> 00:05:40,230
numbers between one to p for example if
you want to find the sum up the numbers

88
00:05:40,230 --> 00:05:40,830
one and

89
00:05:40,830 --> 00:05:44,270
plus two plus three plus 4.5 there is a
No

90
00:05:44,270 --> 00:05:48,110
J supplication which that the following
other see this can improve but they just

91
00:05:48,110 --> 00:05:49,140
want to show

92
00:05:49,140 --> 00:05:56,050
something that is CPU intensive so let
me long to that

93
00:05:56,050 --> 00:06:01,500
just to mean sea consider look at so if

94
00:06:01,500 --> 00:06:05,450
people's five we get 15 if we do 10 we
get 55

95
00:06:05,450 --> 00:06:09,410
okay that's easy know what we gonna do

96
00:06:09,410 --> 00:06:13,690
is the following

97
00:06:13,690 --> 00:06:20,540
a blessed system K

98
00:06:20,540 --> 00:06:23,680
123 123 a

99
00:06:23,680 --> 00:06:27,130
and they will also show you the task
manager over here

100
00:06:27,130 --> 00:06:30,640
okay and so what I'm gonna do

101
00:06:30,640 --> 00:06:34,360
I will send the request to compute the
numbers between one and 100 million

102
00:06:34,360 --> 00:06:39,180
it is this very CPU intensive activity
and during that time no GS

103
00:06:39,180 --> 00:06:42,290
will persist no other requests besides
this

104
00:06:42,290 --> 00:06:48,989
the current one so let me hit enter okay

105
00:06:48,989 --> 00:06:52,749
let me just another 0 here okay as you
can

106
00:06:52,749 --> 00:06:55,919
might be able to see the known taking

107
00:06:55,919 --> 00:07:00,499
25 percent of my CPU they have I have
four cores and 50 runs

108
00:07:00,499 --> 00:07:04,059
single threaded on a single core so
basically takes the entire

109
00:07:04,059 --> 00:07:07,509
25 percent particular out is the low to
take

110
00:07:07,509 --> 00:07:11,679
let me run that okay

111
00:07:11,679 --> 00:07:15,229
and during the time another user wants
to come the summer between

112
00:07:15,229 --> 00:07:19,059
one in 100 latte but the

113
00:07:19,059 --> 00:07:22,389
other user doesn't get talked

114
00:07:22,389 --> 00:07:25,849
too slow okay so

115
00:07:25,849 --> 00:07:29,689
the the user doesn't get any response
until the first threat finishes

116
00:07:29,689 --> 00:07:32,939
okay so one user wanted to come the
number two in one in one

117
00:07:32,939 --> 00:07:36,369
hundred-million it takes a lot of time
during that time

118
00:07:36,369 --> 00:07:40,899
know or the user is able to get any
other a response from the server

119
00:07:40,899 --> 00:07:43,720
this shows you how easily and

120
00:07:43,720 --> 00:07:47,020
Dino loves it no jess is vulnerable to
denial-of-service

121
00:07:47,020 --> 00:07:51,000
okay assuming that one user is able to
do a CPU intensive

122
00:07:51,000 --> 00:07:54,410
action on that server no other users are
able to get

123
00:07:54,410 --> 00:07:57,580
any response from that server make sense

124
00:07:57,580 --> 00:08:04,330
ok

125
00:08:04,330 --> 00:08:06,610
no unlike other platform

126
00:08:06,610 --> 00:08:11,099
dotnet who's lost it on I a fine job
with that you don't cut

127
00:08:11,099 --> 00:08:15,389
node.js doesn't have any running web
server

128
00:08:15,389 --> 00:08:19,440
the web server is no jst self when
you're right you're up no justification

129
00:08:19,440 --> 00:08:22,069
you are responsible for handling all the
request get

130
00:08:22,069 --> 00:08:26,479
and post getting the data and and
combining it together

131
00:08:26,479 --> 00:08:30,050
there is no am web server who manages

132
00:08:30,050 --> 00:08:33,089
that in all that happens within the very
same

133
00:08:33,089 --> 00:08:36,669
thread on your application as he said
single-threaded applications

134
00:08:36,669 --> 00:08:40,110
so there is no real suppression between
the web service thing

135
00:08:40,110 --> 00:08:43,490
port and the logical part all run in the
same thread

136
00:08:43,490 --> 00:08:47,250
know obviously their third party
companies which

137
00:08:47,250 --> 00:08:51,279
dude that job for you combining request
go to a getting poked

138
00:08:51,279 --> 00:08:54,279
and but still and

139
00:08:54,279 --> 00:08:57,610
conceptually the all-around within the
same thread as yours

140
00:08:57,610 --> 00:09:01,600
so if you want to write to a web
application

141
00:09:01,600 --> 00:09:05,610
you don't only concentrate on your
business logic but whether you have to

142
00:09:05,610 --> 00:09:06,010
manage

143
00:09:06,010 --> 00:09:09,970
all be heavy lifting glove getting
information from

144
00:09:09,970 --> 00:09:14,220
from the server this is a kind of an
example where you feel the system

145
00:09:14,220 --> 00:09:17,680
to start with anyone for 3000

146
00:09:17,680 --> 00:09:20,460
and greatest server each day in

147
00:09:20,460 --> 00:09:23,500
each time you get a data packet you have
to combine it with the previous packet

148
00:09:23,500 --> 00:09:26,580
so there's a lot of work being done
within your

149
00:09:26,580 --> 00:09:32,630
thread now let's see how it is related

150
00:09:32,630 --> 00:09:36,560
and once we get this architecture let me
show you this example

151
00:09:36,560 --> 00:09:40,070
what's the problem with the following
code in here missus

152
00:09:40,070 --> 00:09:43,149
real code from commercial application

153
00:09:43,149 --> 00:09:54,019
what might be the problem in that code
md5 is

154
00:09:54,019 --> 00:09:57,069
okay that's one and

155
00:09:57,069 --> 00:10:00,300
one alright so

156
00:10:00,300 --> 00:10:03,470
math.random is really week okay

157
00:10:03,470 --> 00:10:07,879
it is considered the default random with
the node.js is considered as as as

158
00:10:07,879 --> 00:10:08,449
fairly

159
00:10:08,449 --> 00:10:12,750
and so in that case whenever a new user
register to the system

160
00:10:12,750 --> 00:10:17,079
his password her password is computed
based on the math random

161
00:10:17,079 --> 00:10:21,110
than it being hatched using md5 and that
would be the default password of that

162
00:10:21,110 --> 00:10:21,649
User

163
00:10:21,649 --> 00:10:24,829
so as I said the eighth

164
00:10:24,829 --> 00:10:28,560
pure in G said the random number
generator is known to be weak I actually

165
00:10:28,560 --> 00:10:29,610
there's a research

166
00:10:29,610 --> 00:10:32,639
from a meet client at the midline wrote
I think in nineteen

167
00:10:32,639 --> 00:10:37,589
in 20 2009 a hoe to break your engine

168
00:10:37,589 --> 00:10:40,810
google has somewhat improved

169
00:10:40,810 --> 00:10:46,040
that algorithm and but feel the very
same structure remains it

170
00:10:46,040 --> 00:10:50,839
whenever you start having some random
numbers for civil you get to see in

171
00:10:50,839 --> 00:10:54,339
and and then the field is used to create

172
00:10:54,339 --> 00:10:58,910
it privately a private data member Colts
take action to date a member state one

173
00:10:58,910 --> 00:11:03,579
state event whenever you ask for the
next no

174
00:11:03,579 --> 00:11:07,559
random number two things happened for
stubble you derive the first random

175
00:11:07,559 --> 00:11:07,980
number

176
00:11:07,980 --> 00:11:11,209
from the state and then you compute the
next eight

177
00:11:11,209 --> 00:11:15,490
based on the previous one okay so you
get this year this it is used to compute

178
00:11:15,490 --> 00:11:16,089
the first

179
00:11:16,089 --> 00:11:20,309
state variables these variables are you
to compute random 0

180
00:11:20,309 --> 00:11:23,680
and state one state one is used to
compute run the one

181
00:11:23,680 --> 00:11:27,110
in state to so that hoe a you get the
chain

182
00:11:27,110 --> 00:11:32,779
random numbers you and so as we said
Karen G

183
00:11:32,779 --> 00:11:35,220
is weak to me that the

184
00:11:35,220 --> 00:11:39,700
we were able to show that given 3 run
don't said the random

185
00:11:39,700 --> 00:11:43,370
numbers were able to and for what was

186
00:11:43,370 --> 00:11:47,090
the state variable used to compute the
third value

187
00:11:47,090 --> 00:11:50,730
and what does it mean once we get state
three what can we do from here

188
00:11:50,730 --> 00:11:55,820
think that you can predict the future
numbers probably we can also produce

189
00:11:55,820 --> 00:11:58,970
know what were the previous random
numbers

190
00:11:58,970 --> 00:12:02,829
maybe from other users but for now we're
complete predict the future

191
00:12:02,829 --> 00:12:06,569
the problem is the first we need to
reverse

192
00:12:06,569 --> 00:12:11,079
the MD 5 numbers okay so there's a
random number under

193
00:12:11,079 --> 00:12:14,920
is a number between 0 21 including 0 not
including 1

194
00:12:14,920 --> 00:12:17,980
but then we run and if I went over that
number

195
00:12:17,980 --> 00:12:22,360
we need to break md5 I do you suggest we
do that

196
00:12:22,360 --> 00:12:27,180
a dictionary attack

197
00:12:27,180 --> 00:12:33,250
and but in that case not that kind of
addiction everywhere user chooses

198
00:12:33,250 --> 00:12:36,839
password it's a random so did sorry

199
00:12:36,839 --> 00:12:40,189
to okay surrendered run rainbow table

200
00:12:40,189 --> 00:12:43,279
or for those viewers from your are you'd
least

201
00:12:43,279 --> 00:12:46,279
I'll various and values and their

202
00:12:46,279 --> 00:12:50,100
md5 computation these tables are indexed

203
00:12:50,100 --> 00:12:53,600
fairly well so if you got the md5 all
you have to find his

204
00:12:53,600 --> 00:12:56,750
the end if and the five entries and go
back to the

205
00:12:56,750 --> 00:12:57,260
a

206
00:12:57,260 --> 00:13:00,470
and original value the problem is that

207
00:13:00,470 --> 00:13:04,030
only available rainbow people that
iPhone are

208
00:13:04,030 --> 00:13:09,000
focused forwards passwords so usually
there were created for by alpha numeric

209
00:13:09,000 --> 00:13:10,740
values a through said

210
00:13:10,740 --> 00:13:14,780
8039 and up to eight nine ten characters

211
00:13:14,780 --> 00:13:18,000
in that case the source for md5

212
00:13:18,000 --> 00:13:22,800
is actually afloat number 80 dot and
then fairly large number

213
00:13:22,800 --> 00:13:26,340
about 15 16 D gets and they confine any

214
00:13:26,340 --> 00:13:31,590
rainbow table that focuses on that so I
had to create such a rainbow table in

215
00:13:31,590 --> 00:13:34,130
Asia and show how weak it can be used

216
00:13:34,130 --> 00:13:37,400
that's the actual source code I'll

217
00:13:37,400 --> 00:13:43,600
the random and within v8 so as you can
see here state 0

218
00:13:43,600 --> 00:13:48,290
is used to compute the next eight and
then to return the the actual value

219
00:13:48,290 --> 00:13:53,540
a there are some magic numbers in here
like 18,000 than 36,000

220
00:13:53,540 --> 00:13:56,560
and then there's the 14 beating here in
eighteen beating here

221
00:13:56,560 --> 00:13:59,720
a Google changes these values

222
00:13:59,720 --> 00:14:03,650
fairly often and this means that the
algorithm

223
00:14:03,650 --> 00:14:07,680
used to hack the random needs to be
changed accordingly

224
00:14:07,680 --> 00:14:12,200
it's not pretty straightforward it but
that's the current version

225
00:14:12,200 --> 00:14:19,200
and node.js using okay and so given
three consecutive random number three

226
00:14:19,200 --> 00:14:23,620
the values of state your own state when
can be inferred has of future values can

227
00:14:23,620 --> 00:14:24,680
be known in advance

228
00:14:24,680 --> 00:14:28,170
back in webbrowser in chrome

229
00:14:28,170 --> 00:14:32,420
each tab runs in a different process
different process

230
00:14:32,420 --> 00:14:36,000
means that the private data members I'll
random

231
00:14:36,000 --> 00:14:40,150
are different between each tab so they
did that if you have a tad

232
00:14:40,150 --> 00:14:44,150
singleton your application and you
compute random numbers you can tell what

233
00:14:44,150 --> 00:14:44,540
r

234
00:14:44,540 --> 00:14:49,260
what's the next state 20 on your tab but
you can tell anything about what would

235
00:14:49,260 --> 00:14:49,980
be the state's

236
00:14:49,980 --> 00:14:54,130
other types okay so that kind of
protection that's why Google

237
00:14:54,130 --> 00:14:58,280
doesn't consider and one of the reasons
that Google doesn't consider

238
00:14:58,280 --> 00:15:02,460
a defend the there appear in GV week as
a real problem

239
00:15:02,460 --> 00:15:06,160
because it's problem coffin with being
the specific session with them

240
00:15:06,160 --> 00:15:09,400
the specific dad that being said

241
00:15:09,400 --> 00:15:12,530
in node.js all users

242
00:15:12,530 --> 00:15:17,320
a running within the same process the
running within the same process

243
00:15:17,320 --> 00:15:21,650
there should ensure the very same state
this means that one user

244
00:15:21,650 --> 00:15:25,430
can get three random values get the
state and then

245
00:15:25,430 --> 00:15:28,820
and hacker can know in advance what
would be the next to run duvalier's

246
00:15:28,820 --> 00:15:32,220
for other users in you think that system

247
00:15:32,220 --> 00:15:36,840
make sense so we will

248
00:15:36,840 --> 00:15:41,430
demonstrate that and I'm so the steps
need to be taken for civil hecker

249
00:15:41,430 --> 00:15:45,370
would ask and written what I'm sorry

250
00:15:45,370 --> 00:15:49,180
getting back to the source code from the
application that we saw

251
00:15:49,180 --> 00:15:56,120
where we get the the random and then we
compute md5 right much

252
00:15:56,120 --> 00:16:00,519
right so we will register three times as
as a fake user

253
00:16:00,519 --> 00:16:03,730
we will get the fake passports or

254
00:16:03,730 --> 00:16:07,389
the real password the run-pass the
register user one

255
00:16:07,389 --> 00:16:10,889
get the password register fake user to
get the password

256
00:16:10,889 --> 00:16:14,860
register your the 3 get the password
know what would be over in

257
00:16:14,860 --> 00:16:18,930
next step not

258
00:16:18,930 --> 00:16:23,860
right away we so we what we got our
three consecutive

259
00:16:23,860 --> 00:16:28,009
md5 over random numbers so what would be
our next step

260
00:16:28,009 --> 00:16:32,380
okay at the end up so we think the
password

261
00:16:32,380 --> 00:16:35,620
will send them to Rainbow

262
00:16:35,620 --> 00:16:40,759
table and left the room with table what
the plain text for

263
00:16:40,759 --> 00:16:45,190
value okay so we will get the clear
random okay some

264
00:16:45,190 --> 00:16:48,639
got us with one graphically random for
two rundown

265
00:16:48,639 --> 00:16:52,050
and then the third one having these

266
00:16:52,050 --> 00:17:00,009
3 randoms we will send a flower magic
float service which will get us

267
00:17:00,009 --> 00:17:03,740
our the future password of the user so
let's see how it's going

268
00:17:03,740 --> 00:17:07,730
now as I said at the beginning it eases
the live demo

269
00:17:07,730 --> 00:17:11,270
each step takes about thirty-seconds
forty-five seconds

270
00:17:11,270 --> 00:17:14,439
which is kind of an eternity in terms of

271
00:17:14,439 --> 00:17:16,139
there

272
00:17:16,139 --> 00:17:20,099
presentation so please bear with me so

273
00:17:20,099 --> 00:17:27,869
okay so

274
00:17:27,869 --> 00:17:32,519
see it's a very secure site there's a
lot so your face okay

275
00:17:32,519 --> 00:17:37,269
air so let's producers as letter just as
fake user one

276
00:17:37,269 --> 00:17:41,059
and pictures the 1password it okay so
that's

277
00:17:41,059 --> 00:17:53,110
md5 ok up with that not the typical see
that

278
00:17:53,110 --> 00:17:58,400
so that's the first md5 that we got
let's register as fake user to

279
00:17:58,400 --> 00:18:04,920
to get the next password what we got

280
00:18:04,920 --> 00:18:08,620
here and then the third

281
00:18:08,620 --> 00:18:14,840
password now that we got that

282
00:18:14,840 --> 00:18:19,030
okay so we've got three

283
00:18:19,030 --> 00:18:23,390
md5 random passwords now let's get to
our hacking

284
00:18:23,390 --> 00:18:26,610
part I'll and here will type

285
00:18:26,610 --> 00:18:30,650
the end the fight that we got the actual

286
00:18:30,650 --> 00:18:34,710
and rainbow table is hosted on Amazon

287
00:18:34,710 --> 00:18:38,970
on one of our servers its roughly 200
Jacobite in size

288
00:18:38,970 --> 00:18:43,040
that's why it's not posted them on my
laptop and

289
00:18:43,040 --> 00:18:49,870
and it's not very well index that's why
takes about 30 seconds to get the clear

290
00:18:49,870 --> 00:18:50,780
value of the

291
00:18:50,780 --> 00:18:55,960
above that number it it was a bit tricky
to commit to get this rainbow table

292
00:18:55,960 --> 00:18:56,560
because

293
00:18:56,560 --> 00:19:01,500
and if you look at the code that you got
from Google basically

294
00:19:01,500 --> 00:19:04,880
you get an in you you unsigned int

295
00:19:04,880 --> 00:19:10,210
which is fairly large up to for for
billion and then it is divided by MaxEnt

296
00:19:10,210 --> 00:19:14,110
to get and values between 0 to 1 okay

297
00:19:14,110 --> 00:19:18,210
so you get a UN and you divided by
Maxine to get a fairly

298
00:19:18,210 --> 00:19:21,840
a small number now it différents

299
00:19:21,840 --> 00:19:26,640
platforms give different results for
example dot net is limited to 10

300
00:19:26,640 --> 00:19:30,980
last a 22 for Team dig dig its after the
doctor

301
00:19:30,980 --> 00:19:34,110
and were with no jst about 6-10 be gates

302
00:19:34,110 --> 00:19:39,610
so if your computer then the md5 with
different platform we just get different

303
00:19:39,610 --> 00:19:43,090
all yours so thats the first clear
number

304
00:19:43,090 --> 00:19:47,090
for the first passport okay three
billion

305
00:19:47,090 --> 00:19:51,120
that would be the let's complete

306
00:19:51,120 --> 00:20:02,820
the next and if I

307
00:20:02,820 --> 00:20:07,130
any questions or for

308
00:20:07,130 --> 00:20:12,140
will wait patiently yet

309
00:20:12,140 --> 00:20:16,160
good

310
00:20:16,160 --> 00:20:18,070
how to generate secure random with known

311
00:20:18,070 --> 00:20:21,350
yeah

312
00:20:21,350 --> 00:20:25,020
there are some a require there are some
modules which do

313
00:20:25,020 --> 00:20:29,330
proper random generator I mean proper
exhibits

314
00:20:29,330 --> 00:20:33,090
no the OPP said Oh but some of them are
able to get

315
00:20:33,090 --> 00:20:38,000
say values either from network traffic
or from your mouse movement

316
00:20:38,000 --> 00:20:42,040
try to get some noisy hand to get the
entropy for

317
00:20:42,040 --> 00:20:54,050
for for your under numbers

318
00:20:54,050 --> 00:20:59,480
okay didn't get the name of that s

319
00:20:59,480 --> 00:21:09,210
JCL

320
00:21:09,210 --> 00:21:10,820
up

321
00:21:10,820 --> 00:21:12,350
and

322
00:21:12,350 --> 00:21:17,460
were soon to be

323
00:21:17,460 --> 00:21:21,490
I'm sorry

324
00:21:21,490 --> 00:21:25,950
both 24 hours on Amazon

325
00:21:25,950 --> 00:21:29,780
and three large something because

326
00:21:29,780 --> 00:21:33,450
we have two computed for basically we
have to to go through

327
00:21:33,450 --> 00:21:38,150
II from 12 for billion in for each one
of them divided by Maxim didn't complete

328
00:21:38,150 --> 00:21:38,930
the md5

329
00:21:38,930 --> 00:21:42,470
I'm sorry

330
00:21:42,470 --> 00:21:47,470
I thought it would be faster but

331
00:21:47,470 --> 00:21:54,050
well didn't do the hard my myself okay

332
00:21:54,050 --> 00:21:57,120
good so we got the third number so we
have here the three

333
00:21:57,120 --> 00:22:00,540
clear text versions of the random

334
00:22:00,540 --> 00:22:04,500
and now we will run the a raking

335
00:22:04,500 --> 00:22:09,060
run Dawn Part once again also should
take about

336
00:22:09,060 --> 00:22:13,860
less hopefully less than a minute and
and what we expected as a result is

337
00:22:13,860 --> 00:22:15,040
first the next

338
00:22:15,040 --> 00:22:18,690
random number cleartext number followed
by

339
00:22:18,690 --> 00:22:22,340
being hopefully next password generated
by the system

340
00:22:22,340 --> 00:22:26,120
well this is running and let me load

341
00:22:26,120 --> 00:22:29,600
that screen through Internet Explorer
just to show that

342
00:22:29,600 --> 00:22:32,800
it's really server-side to nothing is on
the client

343
00:22:32,800 --> 00:22:42,090
would other plans from other places
working

344
00:22:42,090 --> 00:22:45,000
cruncher numbers

345
00:22:45,000 --> 00:22:50,680
and know the next question usually in
being gassed is ho the hacker know the

346
00:22:50,680 --> 00:22:51,400
username

347
00:22:51,400 --> 00:22:54,860
above the you there so we know the next
password but we don't have access to the

348
00:22:54,860 --> 00:22:55,430
user name

349
00:22:55,430 --> 00:22:59,800
and that's a valid question so because
these are forums you can look for

350
00:22:59,800 --> 00:23:03,640
other users in this forum or if the user
name

351
00:23:03,640 --> 00:23:06,900
is kinda consecutive number you can get
that from there

352
00:23:06,900 --> 00:23:10,930
I didn't it really depends on how so

353
00:23:10,930 --> 00:23:11,670
all

354
00:23:11,670 --> 00:23:15,940
and what system you using but they just
wanted to focus on the password part 2

355
00:23:15,940 --> 00:23:19,100
this system tells us that the next
password

356
00:23:19,100 --> 00:23:22,710
to be generated is the following

357
00:23:22,710 --> 00:23:25,850
okay seem to be short yes answer

358
00:23:25,850 --> 00:23:29,310
would be the following

359
00:23:29,310 --> 00:23:33,410
okay so it it will be the CE six

360
00:23:33,410 --> 00:23:36,870
handed by Dez 622 so let's

361
00:23:36,870 --> 00:23:41,290
crossing fingers really user one

362
00:23:41,290 --> 00:23:44,590
and email whatever

363
00:23:44,590 --> 00:23:50,350
with register and the password is

364
00:23:50,350 --> 00:23:54,100
okay you can see it in your see

365
00:23:54,100 --> 00:23:57,620
is six ended by d60 yet ended by

366
00:23:57,620 --> 00:24:04,180
the sixty-two me the cato

367
00:24:04,180 --> 00:24:07,560
just community will see that in

368
00:24:07,560 --> 00:24:14,100
okay CC the password in here okay

369
00:24:14,100 --> 00:24:17,230
next topic

370
00:24:17,230 --> 00:24:20,660
a is a little bit ok with projection

371
00:24:20,660 --> 00:24:24,110
and in node.js that's really interesting
Mongo DB

372
00:24:24,110 --> 00:24:28,460
unlike other databases is considered as
the No SQL database

373
00:24:28,460 --> 00:24:32,360
okay so it there are no tables and
records rather than

374
00:24:32,360 --> 00:24:37,530
there are collections and documents and
all the information is stored as a Jason

375
00:24:37,530 --> 00:24:40,299
the next part they will show you

376
00:24:40,299 --> 00:24:43,229
was actually is part over research done
by

377
00:24:43,229 --> 00:24:46,279
with secure if I about the urinal which
is really interesting

378
00:24:46,279 --> 00:24:50,850
they did behind document is that each
record or each document

379
00:24:50,850 --> 00:24:54,529
can be structured differently for
example the first document your

380
00:24:54,529 --> 00:24:59,169
has and I can feel and if want to feel
where the second object had

381
00:24:59,169 --> 00:25:04,409
the data field name and the second field
site so you can serve both of them at

382
00:25:04,409 --> 00:25:05,619
the very same collection

383
00:25:05,619 --> 00:25:10,649
different different data members in
order to retrieve information

384
00:25:10,649 --> 00:25:13,690
you can use the fine methods to get all
the information

385
00:25:13,690 --> 00:25:17,529
or you can express your worry in
adjacent for Mac

386
00:25:17,529 --> 00:25:21,049
for example I want to find all the
elements were there

387
00:25:21,049 --> 00:25:24,590
want to keep youth 15 now an interesting
point

388
00:25:24,590 --> 00:25:28,570
is that the 15 added value can be
replaced with another

389
00:25:28,570 --> 00:25:31,609
Jason object which actually contains an
operator

390
00:25:31,609 --> 00:25:34,629
for example find all the product that
their

391
00:25:34,629 --> 00:25:40,029
want to keep you greater than 25 okay so
instead of the concrete value we act

392
00:25:40,029 --> 00:25:41,169
that we can actually push

393
00:25:41,169 --> 00:25:45,629
Jason object okay and within the code

394
00:25:45,629 --> 00:25:49,919
Jason can be translated like that so we
have an object or orange

395
00:25:49,919 --> 00:25:54,369
and then up to quantity people's 215
database product find

396
00:25:54,369 --> 00:26:01,470
all elements with his qualifiers and

397
00:26:01,470 --> 00:26:04,809
so this is a classical single injection

398
00:26:04,809 --> 00:26:08,729
okay select for for all were and then
concatenate username and password

399
00:26:08,729 --> 00:26:12,259
and to get it fixed with %uh in node.js

400
00:26:12,259 --> 00:26:15,899
all you have to do is to use the
preferred statement name request

401
00:26:15,899 --> 00:26:19,229
where we get the user name from the
request and then to get

402
00:26:19,229 --> 00:26:22,639
get the password from the request and
just pushing

403
00:26:22,639 --> 00:26:26,359
the name into been in the past week to
the correct feel

404
00:26:26,359 --> 00:26:29,960
took it make sense wrong

405
00:26:29,960 --> 00:26:35,970
that know how it should be done okay
let's move how the system basically

406
00:26:35,970 --> 00:26:39,119
if you seen here with two the
querystring

407
00:26:39,119 --> 00:26:42,190
from the URL and we converted to an
object

408
00:26:42,190 --> 00:26:47,559
name and no just actually does very
interesting stuff when

409
00:26:47,559 --> 00:26:48,430
many

410
00:26:48,430 --> 00:26:52,760
parses the URL we will take advantage of
that so

411
00:26:52,760 --> 00:26:55,880
if for example rewrites the URL

412
00:26:55,880 --> 00:26:59,130
equals be with real creating object

413
00:26:59,130 --> 00:27:02,580
per screen with the field a and value is
the

414
00:27:02,580 --> 00:27:06,410
effete converted to Jason we will get
the structure

415
00:27:06,410 --> 00:27:10,030
if you're right a equals be and then see
people's 2d

416
00:27:10,030 --> 00:27:13,680
we should we get the same object data
member a

417
00:27:13,680 --> 00:27:17,360
with the bolivian been data member see
with the value be and that would be the

418
00:27:17,360 --> 00:27:18,320
Jason structure

419
00:27:18,320 --> 00:27:21,710
writing a cosby sepals the and then
again

420
00:27:21,710 --> 00:27:25,960
a people the okay that we actually get

421
00:27:25,960 --> 00:27:29,520
in array okay a week a

422
00:27:29,520 --> 00:27:33,390
an array that contains two elements be
and that and then see

423
00:27:33,390 --> 00:27:36,780
just a document with the and the Justin
Wolfers follow

424
00:27:36,780 --> 00:27:40,200
pain a then in array up values

425
00:27:40,200 --> 00:27:44,390
if you put in america indexer

426
00:27:44,390 --> 00:27:48,370
a at the fifth location we will get the
very same

427
00:27:48,370 --> 00:27:51,960
array with a single value %uh be okay

428
00:27:51,960 --> 00:27:56,840
and the Jason will be translated however
if we use

429
00:27:56,840 --> 00:28:00,020
string as an indexer as you can see here
we use

430
00:28:00,020 --> 00:28:03,470
the letter F the indexer instead of

431
00:28:03,470 --> 00:28:07,540
actually having it set into an array it
will create a sub

432
00:28:07,540 --> 00:28:11,170
object so RJ dot a duck ass people's to
be

433
00:28:11,170 --> 00:28:14,450
and the Jason part is interesting you
get that a

434
00:28:14,450 --> 00:28:18,570
equals to another Jason object with the
PS

435
00:28:18,570 --> 00:28:21,800
and the value of b okay so it actually
creates

436
00:28:21,800 --> 00:28:25,790
sabes element sub Jason element now

437
00:28:25,790 --> 00:28:29,380
I hope it rings a bell but it that
produce like we actually

438
00:28:29,380 --> 00:28:33,610
showed that you can use the greater than
operator so we can take advantage

439
00:28:33,610 --> 00:28:37,810
that in a short while so

440
00:28:37,810 --> 00:28:46,740
let's actually see that in action

441
00:28:46,740 --> 00:28:49,870
so this is a system if I don't know user
and password

442
00:28:49,870 --> 00:28:53,290
ABC year well

443
00:28:53,290 --> 00:28:57,300
sorry that's not correct and then if we
use a demean demean

444
00:28:57,300 --> 00:29:03,150
were able to login we can do the same
from the purse string

445
00:29:03,150 --> 00:29:07,080
so if I try to login as admin admin
that's perfectly fine

446
00:29:07,080 --> 00:29:11,150
but if I try to plug in with different
username and password I'm unable to

447
00:29:11,150 --> 00:29:11,670
login

448
00:29:11,670 --> 00:29:15,750
sis let's assume that we don't know any
valid

449
00:29:15,750 --> 00:29:20,190
the valid credentials we can use at the
user to use the indexer

450
00:29:20,190 --> 00:29:24,050
greater then so we'll use the greater
than

451
00:29:24,050 --> 00:29:28,610
operator greater than a and then the
password greater than a

452
00:29:28,610 --> 00:29:32,830
okay in that case the system will look
for an entry that

453
00:29:32,830 --> 00:29:36,460
a record or document that matches
greater than a

454
00:29:36,460 --> 00:29:40,620
and I was able to login as an admin okay

455
00:29:40,620 --> 00:29:44,710
and then you can iterate through the
different users for example then we can

456
00:29:44,710 --> 00:29:45,230
use

457
00:29:45,230 --> 00:29:48,310
at the pass for greater than you and we
see another user

458
00:29:48,310 --> 00:29:51,760
so we can actually threat to all the
users in the system or to log in as the

459
00:29:51,760 --> 00:29:52,280
admin

460
00:29:52,280 --> 00:29:56,170
without Val without knowing values in a
min password

461
00:29:56,170 --> 00:30:01,390
and questions yep I'm sorry

462
00:30:01,390 --> 00:30:04,390
air

463
00:30:04,390 --> 00:30:09,260
so I'm not sure who found him guilty but
it is very well documented

464
00:30:09,260 --> 00:30:13,130
at the website web secure if I blog okay
and

465
00:30:13,130 --> 00:30:17,080
I'm not sure if they have found it but
it's an amazing

466
00:30:17,080 --> 00:30:21,810
right up I really recommend you read
that who would secure if I blog

467
00:30:21,810 --> 00:30:26,100
really excellent no

468
00:30:26,100 --> 00:30:29,320
wanna the proposed solutions is

469
00:30:29,320 --> 00:30:32,880
to use am the following

470
00:30:32,880 --> 00:30:37,820
okay DB dots user find find a user given
the user name

471
00:30:37,820 --> 00:30:40,950
and then compare the

472
00:30:40,950 --> 00:30:44,090
get retrieve the password and then
compare the password

473
00:30:44,090 --> 00:30:49,180
to the password that is stored in the
database does it solve the problem

474
00:30:49,180 --> 00:30:52,530
wine why not someone said no

475
00:30:52,530 --> 00:30:57,520
why not I inject the username

476
00:30:57,520 --> 00:31:01,870
then we get let me add me then we get
the password

477
00:31:01,870 --> 00:31:05,460
and we compare it with whatever the user
typed at the text box

478
00:31:05,460 --> 00:31:09,160
so what's the problem here

479
00:31:09,160 --> 00:31:13,300
okay so

480
00:31:13,300 --> 00:31:17,380
everything is that we can still inject
something through the username field

481
00:31:17,380 --> 00:31:22,490
looking through the various operators
that can be injected like greater than

482
00:31:22,490 --> 00:31:23,150
in less than

483
00:31:23,150 --> 00:31:27,250
10 operators is read jack's so we can
actually

484
00:31:27,250 --> 00:31:31,050
look for user name that the name matches
a specific project

485
00:31:31,050 --> 00:31:34,600
and then we can use that to do what is
called

486
00:31:34,600 --> 00:31:39,720
regular expression denial of service to
provide a regular expression statement

487
00:31:39,720 --> 00:31:44,520
which is so difficult for the server
side to compute which will consume

488
00:31:44,520 --> 00:31:50,030
well all the CPU during that time and so

489
00:31:50,030 --> 00:31:53,990
thats would be an example that we just
copy pasted

490
00:31:53,990 --> 00:31:58,230
and

491
00:31:58,230 --> 00:32:01,260
are pointed in want to create a reeling
from that

492
00:32:01,260 --> 00:32:16,630
is good

493
00:32:16,630 --> 00:32:27,550
yesterday and I don't really know

494
00:32:27,550 --> 00:32:35,669
just think image is good

495
00:32:35,669 --> 00:32:40,580
talk so the I will put that interfere

496
00:32:40,580 --> 00:32:44,309
just based

497
00:32:44,309 --> 00:32:48,980
crime doesn't like it okay no

498
00:32:48,980 --> 00:32:52,960
it was a hit enter you will figure that
the Mongo DB service

499
00:32:52,960 --> 00:32:57,010
the service who manages the this request
will use

500
00:32:57,010 --> 00:33:01,840
25 percent of the CPU full-court for
about three to four seconds

501
00:33:01,840 --> 00:33:05,049
chrysalis after

502
00:33:05,049 --> 00:33:08,429
you can see them here okay

503
00:33:08,429 --> 00:33:12,240
longer being takes a few seconds

504
00:33:12,240 --> 00:33:15,880
to validate the user name that they just

505
00:33:15,880 --> 00:33:21,669
tight third during that time probably no
other users can get service from the

506
00:33:21,669 --> 00:33:22,260
manga to be

507
00:33:22,260 --> 00:33:27,140
they actually Council after for 5
request and it stop

508
00:33:27,140 --> 00:33:32,080
but basically during these five seconds
no other users could've getting

509
00:33:32,080 --> 00:33:36,860
any response from the Mongo DB service
okay

510
00:33:36,860 --> 00:33:41,309
a so and and that's probably every node
JS application

511
00:33:41,309 --> 00:33:44,940
is available to to that part okay any
request

512
00:33:44,940 --> 00:33:48,919
that you stand to the database where the
bodies come from the user

513
00:33:48,919 --> 00:33:54,419
a might be possible to that it probably
the best solution would be to use while

514
00:33:54,419 --> 00:33:58,950
character whitelisting okay so there is
no reason to use

515
00:33:58,950 --> 00:34:02,150
square brackets in in as an input for
username

516
00:34:02,150 --> 00:34:05,960
and there are some am require

517
00:34:05,960 --> 00:34:09,130
there are some more jobs with node.js
that can be used to automatically

518
00:34:09,130 --> 00:34:10,070
validate

519
00:34:10,070 --> 00:34:13,200
any input for specific format but

520
00:34:13,200 --> 00:34:17,179
unless you use any of these and may
default your no justification

521
00:34:17,179 --> 00:34:28,369
is wonderful any questions for for

522
00:34:28,369 --> 00:34:31,919
a okay no recapping

523
00:34:31,919 --> 00:34:35,810
if you recall the traditional way and no
just doesn't use any traditional web

524
00:34:35,810 --> 00:34:36,230
server

525
00:34:36,230 --> 00:34:40,510
this mean that the actual your code is
running at the same process

526
00:34:40,510 --> 00:34:44,240
think thread the web server the thing

527
00:34:44,240 --> 00:34:48,010
that problems in your code can affect

528
00:34:48,010 --> 00:34:51,720
on the web server itself not

529
00:34:51,720 --> 00:34:55,520
what they plan to present right now is

530
00:34:55,520 --> 00:34:58,560
well I i wouldn't reply I will present
it or not

531
00:34:58,560 --> 00:35:02,110
i think is that we all know that evil is
evil

532
00:35:02,110 --> 00:35:05,420
that fine and I do want to show

533
00:35:05,420 --> 00:35:09,790
something additional that can be done
with the evil we all know there's a

534
00:35:09,790 --> 00:35:10,410
problem

535
00:35:10,410 --> 00:35:13,880
with that just want to open your mind to
a different

536
00:35:13,880 --> 00:35:16,980
attack vector which I really found it
interesting

537
00:35:16,980 --> 00:35:20,700
and so an

538
00:35:20,700 --> 00:35:26,570
what ish 12 plan to show no was taken
from that research and analyses have no

539
00:35:26,570 --> 00:35:29,619
Jeff platform so in what most web
servers

540
00:35:29,619 --> 00:35:33,310
each request found in your child and
with no jacket

541
00:35:33,310 --> 00:35:37,850
single threaded this mean that and would
modification to the system that they're

542
00:35:37,850 --> 00:35:39,100
done by 1 User

543
00:35:39,100 --> 00:35:42,339
will affect all other users

544
00:35:42,340 --> 00:35:46,000
immediately so evil evaluated string:

545
00:35:46,000 --> 00:35:50,170
and in indictment in Java people cannot
control

546
00:35:50,170 --> 00:35:53,630
for example in dotnet evil cannot
control the I yes

547
00:35:53,630 --> 00:35:56,970
okay the ISA the different process and

548
00:35:56,970 --> 00:36:00,200
the dotted application cannot control
the the

549
00:36:00,200 --> 00:36:04,290
web server with node.js know the can
control the web server

550
00:36:04,290 --> 00:36:09,460
so we will show the difference the
demonstration will be shown on

551
00:36:09,460 --> 00:36:14,980
express JS experts gf is in module that
provide

552
00:36:14,980 --> 00:36:19,930
what servicing to node.js and

553
00:36:19,930 --> 00:36:24,320
vision for example if you want to add

554
00:36:24,320 --> 00:36:27,700
page or service called add to your
glorification

555
00:36:27,700 --> 00:36:31,760
recreate what call a routing

556
00:36:31,760 --> 00:36:35,680
okay so that you wrote Inc

557
00:36:35,680 --> 00:36:38,860
for example if you want to access the
server at the add

558
00:36:38,860 --> 00:36:43,829
page then we add in your outcall dad
together with the code writer at the

559
00:36:43,829 --> 00:36:47,280
at the bottom and so it this service
does

560
00:36:47,280 --> 00:36:51,089
just add two numbers for example

561
00:36:51,089 --> 00:36:54,390
I'd the number three to the number eight
and we get the little number

562
00:36:54,390 --> 00:36:57,500
11 does it really badly by using evil

563
00:36:57,500 --> 00:37:01,200
so eveleen the the first that the member
with with the second

564
00:37:01,200 --> 00:37:04,849
remember and combine the two and but

565
00:37:04,849 --> 00:37:08,000
some really interesting stuff and be
done here

566
00:37:08,000 --> 00:37:11,660
so the actual roping is done

567
00:37:11,660 --> 00:37:15,809
it but what they call the the stack

568
00:37:15,809 --> 00:37:19,010
so there is a routing stack which
contains all be

569
00:37:19,010 --> 00:37:22,559
available pages in each one point to
specific function

570
00:37:22,559 --> 00:37:27,050
so we figure that add point function one
remove both to function to

571
00:37:27,050 --> 00:37:30,460
there are some parameters for RESTful
API

572
00:37:30,460 --> 00:37:35,200
we get the ID for the page and we can
use a regular expression

573
00:37:35,200 --> 00:37:39,309
one focus on on that part in here it but
the

574
00:37:39,309 --> 00:37:42,309
I want to focus on the fact that we can
we have and

575
00:37:42,309 --> 00:37:46,880
they wrote to the add method and

576
00:37:46,880 --> 00:37:50,380
or system can access be the tactful

577
00:37:50,380 --> 00:37:53,579
with the clicking here that

578
00:37:53,579 --> 00:37:58,579
we get the police older wrote in to
YouTube or system so we've got an evil

579
00:37:58,579 --> 00:38:03,680
thanks with that an evil a and the evil
code: the truth

580
00:38:03,680 --> 00:38:06,760
posting here is to get the fourth tak

581
00:38:06,760 --> 00:38:10,730
over the rotating over or system so

582
00:38:10,730 --> 00:38:13,200
that's one

583
00:38:13,200 --> 00:38:16,660
so the stock is acceptable in runtime
both to read and to write

584
00:38:16,660 --> 00:38:20,000
so we will replace the existing routing
with anyone

585
00:38:20,000 --> 00:38:23,660
in this real effect all users connecting
to the system

586
00:38:23,660 --> 00:38:27,190
and it looks very weird because

587
00:38:27,190 --> 00:38:31,230
well I'll show you exactly the basically
we've got the ad

588
00:38:31,230 --> 00:38:35,890
the first comment that we will send it
to actually remove that routing from the

589
00:38:35,890 --> 00:38:36,400
system

590
00:38:36,400 --> 00:38:40,070
and we will add a different wrote Inc
with the very same in an ad

591
00:38:40,070 --> 00:38:43,880
but it will point to a different
function function 5

592
00:38:43,880 --> 00:38:47,980
so any any future users going to the add

593
00:38:47,980 --> 00:38:51,050
page will actually see something
different that one the

594
00:38:51,050 --> 00:38:58,810
well what they expected okay

595
00:38:58,810 --> 00:39:01,750
and know it

596
00:39:01,750 --> 00:39:05,280
what it cost a different function on the
same server your function can do

597
00:39:05,280 --> 00:39:06,310
whatever you want

598
00:39:06,310 --> 00:39:10,240
yeah

599
00:39:10,240 --> 00:39:13,710
I guess so what what you gonna do are in
just that

600
00:39:13,710 --> 00:39:18,030
for stubble we don't to go to the route
to and we will remove

601
00:39:18,030 --> 00:39:21,330
in that case the third element which is
our add age

602
00:39:21,330 --> 00:39:24,940
and then we will immediately afterward
push another ad

603
00:39:24,940 --> 00:39:28,370
which will just think to Bollywood and
multiply to

604
00:39:28,370 --> 00:39:33,500
instead o some coming to and

605
00:39:33,500 --> 00:39:37,200
so let me run this code in here so
three-plus

606
00:39:37,200 --> 00:39:41,180
eight equal to 11 okay three-plus 94 the
12 so everything goes

607
00:39:41,180 --> 00:39:44,600
fine no we will hit

608
00:39:44,600 --> 00:39:47,890
that which i think is here remove third
element

609
00:39:47,890 --> 00:39:51,800
and add another one everything looks
fine

610
00:39:51,800 --> 00:39:55,580
and then no a user wants to know how
much it three-plus

611
00:39:55,580 --> 00:39:59,060
ain't and he gets 24 okay

612
00:39:59,060 --> 00:40:02,120
so no any user connecting to the system
will get

613
00:40:02,120 --> 00:40:05,180
will actually use or multiplication
services

614
00:40:05,180 --> 00:40:09,230
they don't bother adding services and so
it

615
00:40:09,230 --> 00:40:12,670
no the funny part is that it seems like
a bug

616
00:40:12,670 --> 00:40:16,500
so you will approach the vendors say
well I see something going wrong

617
00:40:16,500 --> 00:40:19,580
looking good in your node.js source code
you see nothing wrong

618
00:40:19,580 --> 00:40:20,770
and

619
00:40:20,770 --> 00:40:24,460
and if you try to further investigated
upon or refer to the service

620
00:40:24,460 --> 00:40:29,300
everything just a.m. no israel is
completely removed so you have no

621
00:40:29,300 --> 00:40:31,470
tracking the what actually happened
behind the scenes

622
00:40:31,470 --> 00:40:35,080
this attack believe just in memory
doesn't

623
00:40:35,080 --> 00:40:39,320
store itself in on the DS I think we're

624
00:40:39,320 --> 00:40:42,780
toward the end they were clapping any
questions

625
00:40:42,780 --> 00:40:47,400
and

626
00:40:47,400 --> 00:40:50,650
answer so how to protect against

627
00:40:50,650 --> 00:40:55,430
these attacks for the last while so
first people don't use

628
00:40:55,430 --> 00:40:58,980
evoke that's pretty straightforward
that's really bad just wanted to show

629
00:40:58,980 --> 00:41:07,140
what else can be done with that and what
you're welcome to come for both a guest

630
00:41:07,140 --> 00:41:07,680
you

631
00:41:07,680 --> 00:41:12,560
and discussed that I'm sorry

632
00:41:12,560 --> 00:41:16,410
3 commode how how about

633
00:41:16,410 --> 00:41:23,290
strictures movement with node.js I'm not
familiar with that so I don't don't

634
00:41:23,290 --> 00:41:35,730
thank you very much on who

