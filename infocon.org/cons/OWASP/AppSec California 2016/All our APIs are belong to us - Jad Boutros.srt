1
00:00:18,460 --> 00:00:27,119
good afternoon everyone my name is John
boutros I work at the child and

2
00:00:27,119 --> 00:00:30,779
specifically I'm responsible for
security that's spam and abuse and

3
00:00:30,779 --> 00:00:34,769
privacy engineering and the talk today
is very much at the intersection of

4
00:00:34,769 --> 00:00:44,409
those three areas so because this is the
first time we give a talk at a security

5
00:00:44,409 --> 00:00:48,589
conference I thought it would be nice to
just spend a few minutes talking a bit

6
00:00:48,589 --> 00:00:54,108
of a about our security program at
slipshod and then we dive into the the

7
00:00:54,109 --> 00:00:59,929
main point of this talk which is third
party app abuse and the way we want to

8
00:00:59,929 --> 00:01:03,620
do this is first tell you a little bit
what is the problem that we're dealing

9
00:01:03,620 --> 00:01:08,700
with how how does it affect snapshot and
then talk about some of the solutions we

10
00:01:08,700 --> 00:01:13,800
have been implementing for some time now
starting with server-side solutions and

11
00:01:13,800 --> 00:01:20,340
then augmenting them on our mobile
client for Android and iOS and then talk

12
00:01:20,340 --> 00:01:26,240
about where we are today with this issue
and leave you with some sort of closing

13
00:01:26,240 --> 00:01:32,350
thoughts so I joined not chart almost
two years ago and I was the first

14
00:01:32,350 --> 00:01:35,219
full-time person on security and spam
and abuse

15
00:01:35,219 --> 00:01:40,469
up until then snap child was a startup
in the true sense of the word there were

16
00:01:40,469 --> 00:01:46,229
fewer than 20 developers thats not shut
and if ever there was a spam issue for

17
00:01:46,229 --> 00:01:50,270
example one developer would have to stop
what they're doing good address this

18
00:01:50,270 --> 00:01:55,259
issue when it's resolved to return to
their normal work today that the

19
00:01:55,259 --> 00:01:58,240
situation is very different than a child
has over two hundred and fifty

20
00:01:58,240 --> 00:02:07,600
developers and our own team is has about
20 engineers we've implemented a lot of

21
00:02:07,600 --> 00:02:14,739
security privacy and vendor review
processes that we have privacy by design

22
00:02:14,739 --> 00:02:19,680
we have security by design and also we
do due diligence for security and

23
00:02:19,680 --> 00:02:25,340
privacy whenever we're working with a
new vendor and sort of to put some

24
00:02:25,340 --> 00:02:29,370
numbers numbers don't mean much but they
give you a little bit of perspective for

25
00:02:29,370 --> 00:02:31,710
all of 2015

26
00:02:31,710 --> 00:02:36,890
mean we conducted more than a hundred
and forty security videos so that

27
00:02:36,890 --> 00:02:44,980
includes design reviews for security it
also includes been testing application

28
00:02:44,980 --> 00:02:50,519
source code ideas and fussing whatever
was needed and we also did more than

29
00:02:50,520 --> 00:02:55,170
five hundred and fifty privacy reviews
so anytime there is a new functionality

30
00:02:55,170 --> 00:02:57,679
at snapchat we do

31
00:02:57,680 --> 00:03:03,960
privacy by design first we also worked
on due diligence and security and

32
00:03:03,960 --> 00:03:10,390
privacy reduce for more than 70 vendors
and obviously sort of depending on the

33
00:03:10,390 --> 00:03:17,029
sensitivity of that gender integration
we either do a deeper dive if there is

34
00:03:17,030 --> 00:03:21,720
for instance integrating with our appt
with take them more seriously and if its

35
00:03:21,720 --> 00:03:26,000
vendor that is very peripheral to
security and privacy was much lower than

36
00:03:26,000 --> 00:03:35,050
we do a lighter lighter review also in
2015 we launched a vulnerability rewards

37
00:03:35,050 --> 00:03:40,700
program on Hacker one we started at
first in a private mode just to iron out

38
00:03:40,700 --> 00:03:46,589
the quirks communication the floor and
then we opened it up to the public on

39
00:03:46,590 --> 00:03:52,800
April 2nd by pretty much all measures
it's been a successful program for us

40
00:03:52,800 --> 00:03:56,310
we've interacted with the security
community we received bags we worked on

41
00:03:56,310 --> 00:04:00,960
them and that engagement has been very
useful to us as well

42
00:04:01,540 --> 00:04:07,179
also we've been progressively increasing
our county pay out and really we are

43
00:04:07,180 --> 00:04:14,460
looking for sort of the more serious
type issues and so we're always looking

44
00:04:14,460 --> 00:04:19,680
at ways to entice researchers 22
properties for instance for instance

45
00:04:19,680 --> 00:04:24,260
accessing someone's notes that you
shouldn't be able to view and things

46
00:04:24,260 --> 00:04:29,680
like that we also used to have an
account management website but it wasn't

47
00:04:29,680 --> 00:04:31,300
written with security in mind

48
00:04:31,300 --> 00:04:35,990
initially so when we joined we rewrote
it from scratch using the best security

49
00:04:35,990 --> 00:04:39,030
defenses that mean you of some of them

50
00:04:39,030 --> 00:04:43,270
Christophe Kern mentioning his talked
yesterday about security by design using

51
00:04:43,270 --> 00:04:44,680
safe frameworks

52
00:04:44,680 --> 00:04:50,699
and that's been very cool as well we
launched two factor authentication for

53
00:04:50,699 --> 00:04:56,199
our users first it was by SMS and then
we are happy to wait two more recently

54
00:04:56,199 --> 00:05:02,919
we've also been over time strengthening
our corporate security posture which is

55
00:05:02,919 --> 00:05:06,590
why I'm slightly less care today to
bring my work laptop to this conference

56
00:05:06,590 --> 00:05:11,969
and one thing that can always very
important to us is protecting user data

57
00:05:11,970 --> 00:05:17,570
that we have and so we've been all of
2015 we've been very focused on

58
00:05:17,570 --> 00:05:23,310
strengthening our internal controls
around this access to user data and

59
00:05:23,310 --> 00:05:27,680
that's a project that is ongoing it will
never finish just keep trying to get

60
00:05:27,680 --> 00:05:34,330
better and better at it so with that in
mind let's dig into the third party apps

61
00:05:34,330 --> 00:05:40,820
abuse issue and relief first sort of
what is the problem that we're tackling

62
00:05:40,820 --> 00:05:51,710
essentially like many mobile apps
interact with our server using HTTP in

63
00:05:51,710 --> 00:05:56,599
our case it's HTTPS but we haven't
points on our server that are meant to

64
00:05:56,599 --> 00:06:02,320
be called by our mobile clients and we
don't provide any ATI for other parties

65
00:06:02,320 --> 00:06:06,949
to integrate with us so those points
that we have are meant to be used

66
00:06:06,949 --> 00:06:09,470
exclusively by our Mobile Ala

67
00:06:09,470 --> 00:06:15,150
the fact that there is no public API
didn't stop third-party developers from

68
00:06:15,150 --> 00:06:21,270
trying to reverse engineer our own and
basically use them and they have a

69
00:06:21,270 --> 00:06:26,490
number of reasons why they would want to
do that for instance it could be about

70
00:06:26,490 --> 00:06:33,289
providing some new photo editing option
in two hours not adding it could be

71
00:06:33,289 --> 00:06:36,469
about providing a different way to
interact with content that we have a

72
00:06:36,470 --> 00:06:41,300
snapshot or it could be about providing
functionality we don't support for

73
00:06:41,300 --> 00:06:46,070
instance today we don't provide the
ability for you to share from your

74
00:06:46,070 --> 00:06:51,340
camera roll inside snaps you can do that
in other means but not use maps and it

75
00:06:51,340 --> 00:06:56,159
also could be because we support iOS and
Android but there are some platforms we

76
00:06:56,159 --> 00:06:58,020
don't support for third-party

77
00:06:58,020 --> 00:07:02,229
ops got written for those platforms

78
00:07:04,419 --> 00:07:09,650
the way they usually work is very
similar so there is a third party app

79
00:07:09,650 --> 00:07:15,099
that users will download it's not
affiliated with snapshot and it will

80
00:07:15,099 --> 00:07:19,110
prompt the user to provide their stature
and credentials there's no charge

81
00:07:19,110 --> 00:07:25,449
username and password and then it will
use that to log in to our snapshot

82
00:07:25,449 --> 00:07:34,889
servers and then access our API's those
exist in different forms primarily

83
00:07:34,889 --> 00:07:41,120
mobile applications you can find them
for instance on the iOS Apple App Store

84
00:07:41,120 --> 00:07:46,620
or Google Play they could be on
unofficial app stores they could be web

85
00:07:46,620 --> 00:07:56,020
applications or even pick client
installs I like command-line tools the

86
00:07:56,020 --> 00:08:02,849
thing that is important in our case is
that users don't necessarily have to

87
00:08:02,849 --> 00:08:07,650
exclusively use those third parties they
could be using our own and in some cases

88
00:08:07,650 --> 00:08:10,669
they want some functionality that we
don't provide a switch to a third party

89
00:08:10,669 --> 00:08:15,710
app and then they switch back to us and
really the main point here is that we

90
00:08:15,710 --> 00:08:19,630
don't look at it from the perspective of
the user is good or the user is a bad

91
00:08:19,630 --> 00:08:24,669
it's not about finding users that are
bad and preventing them from interacting

92
00:08:24,669 --> 00:08:30,099
with natural tits about encouraging the
right approaches and discouraging uses

93
00:08:30,099 --> 00:08:35,360
of third-party app that could present
risk and so just to give you an example

94
00:08:35,360 --> 00:08:40,990
this is a mobile application or it's a
bit hard to read in that this

95
00:08:40,990 --> 00:08:45,910
third-party app wants to provide
functionality using snapshots which asks

96
00:08:45,910 --> 00:08:53,430
the user to enter the snapshot username
and password now the issue to us is that

97
00:08:53,430 --> 00:08:59,630
those third party apps present risk to
our platform and really dress comes in

98
00:08:59,630 --> 00:09:06,720
different ways in the first case those
apps will receive not Chad credentials

99
00:09:06,720 --> 00:09:10,990
so you can imagine that if they're
storing these credentials

100
00:09:11,500 --> 00:09:17,940
somewhere and then that gets compromised
those credentials will be leaked or if

101
00:09:17,940 --> 00:09:24,230
they gather a trove of credentials they
may decide later on to use them for

102
00:09:24,230 --> 00:09:31,070
potentially malicious purposes they also
interact with user content so they might

103
00:09:31,070 --> 00:09:36,680
see for instance your snap if you're
giving them your snap to upload and so

104
00:09:36,680 --> 00:09:41,229
again you can imagine that if that user
content is stored in a wrong way or used

105
00:09:41,230 --> 00:09:48,760
in great ways than that content will be
exposed to extreme risks also we built a

106
00:09:48,760 --> 00:09:55,450
snapchat system with certain privacy the
privacy posture and our clients have to

107
00:09:55,450 --> 00:09:59,750
respect that privacy posture but if a
third party app is written that does

108
00:09:59,750 --> 00:10:06,130
whatever it wants then potentially it
could circumvent those privacy controls

109
00:10:06,130 --> 00:10:12,830
and you can also imagine that if someone
is using our mobile apps and only our

110
00:10:12,830 --> 00:10:18,180
mobile apps than the amount of abuse
that can happen as a result of those

111
00:10:18,180 --> 00:10:23,839
interactions is reasonably confined but
when you open it up to more ABS there is

112
00:10:23,840 --> 00:10:31,900
an increased risk there as well and this
issue sort of became more important in

113
00:10:31,900 --> 00:10:38,410
2014 when one of those third party apps
got compromised and it was their servers

114
00:10:38,410 --> 00:10:42,540
got compromise and it was found that
they were storing certain user content

115
00:10:42,540 --> 00:10:46,030
on there so that User Content became

116
00:10:46,030 --> 00:10:52,500
public knowledge when that happened it
really strengthen our belief that we

117
00:10:52,500 --> 00:10:57,740
should tackle this issue very
specifically and prevent the kind of

118
00:10:57,740 --> 00:11:03,510
access from these third parties into our
systems and this is what we've been

119
00:11:03,510 --> 00:11:09,770
working on since so one thing to keep in
mind is that before that happened we

120
00:11:09,770 --> 00:11:15,949
were all commenting hours fuhrman abuse
programs as soon as we started we

121
00:11:15,950 --> 00:11:22,620
started coming up with defenses to
combat abuse issues that we recognize

122
00:11:22,620 --> 00:11:29,170
we're happening so for instance we
implemented defenses rate limiting for

123
00:11:29,170 --> 00:11:35,069
all our end points per endpoint per user
per IP address we did a fair bit of work

124
00:11:35,070 --> 00:11:40,900
trying to analyze IP address reputation
to know which ones are potentially bad

125
00:11:40,900 --> 00:11:46,930
and abusive and have a way to saddam out
either temporarily or permanently block

126
00:11:46,930 --> 00:11:53,670
them out and also because the Spaniards
because of those red limits were

127
00:11:53,670 --> 00:11:57,839
starting to get in place it was getting
harder for spammers to do large-scale

128
00:11:57,840 --> 00:12:02,890
attack so they resorted to creating a
very large number of accounts on

129
00:12:02,890 --> 00:12:07,290
snapshot to be able to use them and
still stay under the radar imaging radar

130
00:12:07,290 --> 00:12:12,079
and so we focused very much on
preventing large-scale account

131
00:12:12,080 --> 00:12:17,800
registration stopping it before it
happens or in some cases of stopping its

132
00:12:17,800 --> 00:12:22,729
shortly after depending on what type of
abuse we were saying and also because

133
00:12:22,730 --> 00:12:29,530
it's even in 2015 1416 we still have the
issue with password reuse across the

134
00:12:29,530 --> 00:12:34,689
Internet users tend to reuse the same
password on different sides some sites

135
00:12:34,690 --> 00:12:41,090
get compromised you end up with a
massive list of compromise credentials

136
00:12:41,090 --> 00:12:45,450
we started putting a lot of effort on
trying to identify loggins that don't

137
00:12:45,450 --> 00:12:50,990
belong to the real user and either stop
them at the source or in some cases warn

138
00:12:50,990 --> 00:12:53,500
the user that there was a log in and

139
00:12:53,500 --> 00:12:58,310
suggesting they change their passwords
so all of these defenses were already

140
00:12:58,310 --> 00:13:04,000
well underway and they were curtailing
certain forms of third-party app abuse

141
00:13:04,000 --> 00:13:10,100
but we wanted to focus on that problem
more specifically and in fact when this

142
00:13:10,100 --> 00:13:14,300
compromise of that third party app
happened we saw a tweet that was

143
00:13:14,300 --> 00:13:19,459
directed at our CEO where it said basis
not just what are you doing surely you

144
00:13:19,460 --> 00:13:24,430
can stop this form of abuse why are you
letting those apps on your systems and

145
00:13:24,430 --> 00:13:29,160
it was a very interesting treat because
it made us think naively you could

146
00:13:29,160 --> 00:13:35,530
consider that we have some kind of
switch that in normal mode we allow

147
00:13:35,530 --> 00:13:40,180
logging from any other out there and if
we wanted we were just talking to on and

148
00:13:40,180 --> 00:13:44,219
suddenly only our can log into our
systems but that's not the way the

149
00:13:44,220 --> 00:13:48,760
internet works there is no such switch
and if you ask the security community

150
00:13:48,760 --> 00:13:53,290
everyone will tell you almost everyone
it's an impossible problem you can't

151
00:13:53,290 --> 00:13:57,939
really prevent the sort of abuse when
users willingly give their credentials

152
00:13:57,940 --> 00:14:03,200
to another's that is not in snapshots
control that will be able to access your

153
00:14:03,200 --> 00:14:08,610
abyei's but at the same time sort of
surely there were things we could

154
00:14:08,610 --> 00:14:14,810
consider doing to curb this form of
abuse and to keep encouraging our users

155
00:14:14,810 --> 00:14:18,750
to do the right things and discourage
them from behavior that could lead them

156
00:14:18,750 --> 00:14:26,030
to extra risk so we started thinking on
what can we do to combat this problem

157
00:14:26,030 --> 00:14:33,630
specifically and the first ideas we had
we're around solutions that were

158
00:14:33,630 --> 00:14:41,680
server-side only and the reason for that
is simple up until that point we we were

159
00:14:41,680 --> 00:14:45,349
still accepting requests from any
version of our snapshot mobile

160
00:14:45,350 --> 00:14:52,930
applications even the very very early on
ones and so implementing solutions that

161
00:14:52,930 --> 00:14:57,650
our server side would allow us to have
this defense work no matter what mobile

162
00:14:57,650 --> 00:15:00,769
version is being used

163
00:15:00,769 --> 00:15:05,410
and so they're the appeals for that was
very obvious for us we could ride away

164
00:15:05,410 --> 00:15:10,839
implement meaningful frameworks and have
them work regardless of which mobile

165
00:15:10,839 --> 00:15:11,470
version

166
00:15:11,470 --> 00:15:19,860
user is on first step was for us to
establish a baseline and really what

167
00:15:19,860 --> 00:15:25,179
that means is strengthened the posture
to to put sort of the basic defenses in

168
00:15:25,179 --> 00:15:30,769
place to indicate that with the API's
are meant to be used by our appt only

169
00:15:30,769 --> 00:15:35,209
saw one on one example is user agent now
we know it's trivial for third party

170
00:15:35,209 --> 00:15:39,609
apps to change the user agent do
whatever they want but at least if we

171
00:15:39,610 --> 00:15:43,819
enforce that only our user agent can
talk to our API's we're sending a clear

172
00:15:43,819 --> 00:15:51,170
message that these API's are meant for
us even that alone is hard to do when

173
00:15:51,170 --> 00:15:55,449
you support so many different versions
of your mobile because you go back two

174
00:15:55,449 --> 00:15:59,920
years you don't know what format the
user agent was in fact we found that

175
00:15:59,920 --> 00:16:04,779
some other versions of our we're not
even sending a user agent in some

176
00:16:04,779 --> 00:16:08,439
specific cases so you want to make sure
you don't like out also our older

177
00:16:08,439 --> 00:16:13,149
versions of the app but we we worked on
that progressively and we we sort of we

178
00:16:13,149 --> 00:16:18,759
turned it on the other thing is also to
check HTTP headers we know what our

179
00:16:18,759 --> 00:16:23,920
mobile apps should be sending and so if
we noticed that some are missing

180
00:16:23,920 --> 00:16:28,549
clearly that traffic is not coming from
us or if we see the matters that are

181
00:16:28,549 --> 00:16:32,329
superfluous and again for sure not
coming from our we can reject those

182
00:16:32,329 --> 00:16:36,989
requests and also because at the time we
were supporting all these versions with

183
00:16:36,990 --> 00:16:43,179
so many different versions of API's it
gave third-party developers more freedom

184
00:16:43,179 --> 00:16:46,649
in trying to pick and choose the one
that they're interested in so they would

185
00:16:46,649 --> 00:16:51,160
use some API from very old version some
other ones from newer ones whatever made

186
00:16:51,160 --> 00:16:56,740
their job easier and they're so we
started putting limits on what is

187
00:16:56,740 --> 00:17:01,129
possible if you're coming from a certain
mobile version than those are dpi you

188
00:17:01,129 --> 00:17:06,089
can use we also recognize very quickly
that supporting all these mobile

189
00:17:06,089 --> 00:17:10,970
versions just makes no sense in general
it invites abuse and we have to curb it

190
00:17:10,970 --> 00:17:12,589
no matter what else we do

191
00:17:12,589 --> 00:17:18,408
and so we started this effort of dip
deprecating our old API which is a bit

192
00:17:18,409 --> 00:17:23,740
difficult when in some cases all their
phones didn't support newer versions of

193
00:17:23,740 --> 00:17:28,230
hours so we had to make tough decisions
sometimes communicating well in advance

194
00:17:28,230 --> 00:17:32,539
with those users trying to not jump to a
dead end after a certain period of time

195
00:17:32,539 --> 00:17:40,990
we just completely rejected access from
all the API's one thing that happened

196
00:17:40,990 --> 00:17:44,460
right after we sort of turned on this
user agent checking is that we saw this

197
00:17:44,460 --> 00:17:49,450
press article about a third party app
that claimed to have circumvented our

198
00:17:49,450 --> 00:17:54,760
defenses for abuse and for us it was
sort of silly because at the time the

199
00:17:54,760 --> 00:17:59,000
only thing we had done yet is user agent
that's clearly not what what we had in

200
00:17:59,000 --> 00:18:03,320
mind but it also sent a message that
this is going to play out in the press

201
00:18:03,320 --> 00:18:08,668
and we have to be careful about the
messaging and about the fact that it can

202
00:18:08,669 --> 00:18:15,120
get sensationalized more than we would
like it to be so now sort of getting

203
00:18:15,120 --> 00:18:19,719
more serious some of the defense is one
of the defense's we thought of islets

204
00:18:19,720 --> 00:18:26,049
leverage mobile notifications so on
Google on Android this is the Google

205
00:18:26,049 --> 00:18:32,990
Cloud messaging on I pushed notification
service can we use that to better

206
00:18:32,990 --> 00:18:40,360
ascertain that the requests are coming
from our and not some other and so

207
00:18:40,360 --> 00:18:46,469
really in other words can we check that
the mobile client is research is getting

208
00:18:46,470 --> 00:18:51,760
valid notification talking is giving us
valued notification talking and can we

209
00:18:51,760 --> 00:18:55,850
check that they came from our it turned
out in the protocol that we had at the

210
00:18:55,850 --> 00:19:02,449
time it sort of worked backwards to what
we wanted the user logs Indian mobile

211
00:19:02,450 --> 00:19:07,450
and in the response to the logon we
would send them what we think is there a

212
00:19:07,450 --> 00:19:12,360
notification talking or at least the
last one on sale and if the mobile app

213
00:19:12,360 --> 00:19:16,289
signs that this is no longer the valid
one because it there are reasons why I

214
00:19:16,289 --> 00:19:19,470
could change then the mobile app with
send us

215
00:19:19,470 --> 00:19:25,030
newer one it wasn't great for us because
that basically means a third party app

216
00:19:25,030 --> 00:19:29,070
plugins with that user's credentials and
then it receives that notification

217
00:19:29,070 --> 00:19:33,139
talkin so there is no way for us to
differentiate is it our appt or someone

218
00:19:33,140 --> 00:19:37,820
else's so what we basically did is we
sort of had our own protocol because

219
00:19:37,820 --> 00:19:43,799
again we wanted something that works for
all our mobile versions and we we

220
00:19:43,799 --> 00:19:49,549
changed it around so that when you login
we send you in the response a fake

221
00:19:49,549 --> 00:19:54,860
notification talkin and our mobile app
will then detect that this is not the

222
00:19:54,860 --> 00:20:00,449
real one and it would communicate back
to us giving us the real one where is

223
00:20:00,450 --> 00:20:04,390
the third party app may not know what is
the real one and can't generate a new

224
00:20:04,390 --> 00:20:10,539
one so we will be able to know that this
wasn't our we had to do this in somewhat

225
00:20:10,539 --> 00:20:13,929
subtle way because we don't want to send
too many signal that make it very easy

226
00:20:13,929 --> 00:20:18,830
for others to know that this is what
we're doing and really it relies on one

227
00:20:18,830 --> 00:20:23,470
thing which is that were able to verify
server-side that a we received the token

228
00:20:23,470 --> 00:20:28,299
or we didn't receive one and the talking
that we received is a valid legitimate

229
00:20:28,299 --> 00:20:36,850
one issued by our so it was a good idea
in practice it didn't work the by the

230
00:20:36,850 --> 00:20:43,639
way we wanted and for different reasons
so on iOS the first issue we came across

231
00:20:43,640 --> 00:20:52,809
is that the behavior of apps
particularly when a user has disabled

232
00:20:52,809 --> 00:20:59,580
notifications to that varied according
to the iOS version on iOS version six

233
00:20:59,580 --> 00:21:04,720
and eight if a mobile app did if the
user has disabled notification for a

234
00:21:04,720 --> 00:21:10,960
mobile which some could do the app but
still nevertheless get a notification

235
00:21:10,960 --> 00:21:15,260
talking from the IRS system and it could
send it to the server

236
00:21:15,260 --> 00:21:20,140
the only thing it couldn't do is receive
notifications but on iOS version 7 the

237
00:21:20,140 --> 00:21:24,570
app would simply not get one so already
we knew that we had a major limitation

238
00:21:24,570 --> 00:21:29,530
and that a third party couldn't pretend
to be running on iOS version 7 and we

239
00:21:29,530 --> 00:21:32,490
would enable to be able to differentiate
that

240
00:21:32,490 --> 00:21:37,929
our own also the other problem is that
we had no way to validate in a very

241
00:21:37,929 --> 00:21:43,260
lightweight way that the talking is
indeed coming from our and given the

242
00:21:43,260 --> 00:21:48,490
scale that we're dealing with that
snapshot we this was a concern so at the

243
00:21:48,490 --> 00:21:53,710
end we didn't really proceed with it for
iOS or Android it was a different

244
00:21:53,710 --> 00:21:56,200
situation at first it worked great

245
00:21:56,200 --> 00:22:00,850
it gave us the signals we wanted we
could tell more reliably that the user

246
00:22:00,850 --> 00:22:07,669
is using our appt or not our intent
overtime things started to change the

247
00:22:07,670 --> 00:22:12,200
first change was that obviously
third-party developers started looking

248
00:22:12,200 --> 00:22:16,050
at our network traffic reverse
engineering our communication and also

249
00:22:16,050 --> 00:22:20,040
looking at our Android apks and seeing
what we're doing when we get

250
00:22:20,040 --> 00:22:25,170
notification talking what should be the
behavior so on the first part they

251
00:22:25,170 --> 00:22:29,860
reverse engineer the flu and they
started sending us fake notification and

252
00:22:29,860 --> 00:22:33,990
that was still ok we had a way Android
provides a way for us to validate that

253
00:22:33,990 --> 00:22:38,260
it did indeed come from us when we saw
fake ones we could still discard them

254
00:22:38,260 --> 00:22:43,910
and and proceed with our abuse detection
but later on it became more interesting

255
00:22:43,910 --> 00:22:48,200
because third party apps with finding
ways to generate push notification

256
00:22:48,200 --> 00:22:52,410
tokens as though they were our and it
turned out that basically those

257
00:22:52,410 --> 00:22:57,830
developers reverse engineer the way
Android obtains these notifications

258
00:22:57,830 --> 00:23:03,460
Hawkins and we're able to the mint ones
for any other day wanted including ours

259
00:23:03,460 --> 00:23:10,170
so it became stop becoming a useful
defense to us the one thing also to note

260
00:23:10,170 --> 00:23:14,640
is that when you use such an API you
want to keep into account that the API

261
00:23:14,640 --> 00:23:18,720
could fail I mean those are reliable but
sometimes there are failures on Android

262
00:23:18,720 --> 00:23:22,440
or iOS and notification dock and are not
issues or

263
00:23:22,440 --> 00:23:27,529
are not issued so you want to make sure
that you don't mistakenly assume that

264
00:23:27,529 --> 00:23:31,889
means the users are all using
third-party apps and just deal with it

265
00:23:31,889 --> 00:23:37,508
appropriately another approach we
thought of again server side is what if

266
00:23:37,509 --> 00:23:42,830
we looked at the way the user interacted
with our with our ATI's and can we tell

267
00:23:42,830 --> 00:23:47,500
if they were coming from our appt or
someone or another one based on those

268
00:23:47,500 --> 00:23:52,379
interactions with our eyes and the
reason for that is simple third party

269
00:23:52,379 --> 00:23:58,759
apps were created usually for single
purposes only and so they wanted really

270
00:23:58,759 --> 00:24:03,169
to implement the minimum amount of ATI's
that they needed in order to achieve the

271
00:24:03,169 --> 00:24:09,389
purposes they had whereas our is
necessarily more chatty it wants to use

272
00:24:09,389 --> 00:24:13,059
all the API is that it needs to
accomplish tasks but it also does state

273
00:24:13,059 --> 00:24:16,889
synchronization it could send
information for debugging it's good

274
00:24:17,490 --> 00:24:23,139
logging messages there are many more API
calls that if it does so conceptually

275
00:24:23,139 --> 00:24:28,820
you could look at the traffic and be
able to tell is this hour or not the

276
00:24:28,820 --> 00:24:33,580
other thing you could look at is
ordering of it is and timing of API and

277
00:24:33,580 --> 00:24:39,350
get a sense of is that the order that
our API our abuses or not you can also

278
00:24:39,350 --> 00:24:44,850
look at the frequency of login logout
for you can look at are the calls coming

279
00:24:44,850 --> 00:24:48,769
from unique devices that we know are
associated with the User of new devices

280
00:24:48,769 --> 00:24:57,110
we found that this general ideas are
actually very very effective and and

281
00:24:57,110 --> 00:25:01,360
they're they're really used very useful
signals for us to do the same big weight

282
00:25:01,360 --> 00:25:07,299
the only sort of pick up a little bit of
a problem is that they're much easier to

283
00:25:07,299 --> 00:25:12,639
use when we are targeting a specific
third party as opposed to sort of

284
00:25:12,639 --> 00:25:17,500
solution that works against any third
party and it's a bit of a problem for us

285
00:25:17,500 --> 00:25:21,879
because from the beginning our
philosophy was we wanna do this in a way

286
00:25:21,879 --> 00:25:25,759
that is generated we don't want to have
a bias against Pacific third party apps

287
00:25:25,759 --> 00:25:29,559
and so we don't really care about coming
up with solutions that are specific to

288
00:25:29,559 --> 00:25:33,629
them so that's that's the only issue but
otherwise it's very interesting

289
00:25:34,509 --> 00:25:39,409
us now in the case of the user agent
example if you get a user agent that is

290
00:25:39,409 --> 00:25:40,899
not ours we can block it

291
00:25:40,899 --> 00:25:46,418
block the request right away and there
isn't more to it but in the case of like

292
00:25:46,419 --> 00:25:51,499
push notifications or animal behavior
you need to look at the requests over

293
00:25:51,499 --> 00:25:58,389
time for instance within one login
session so at that point it's you need

294
00:25:58,389 --> 00:26:02,968
to develop a strategy for how do you
handle abuse when you see it you can't

295
00:26:02,969 --> 00:26:07,649
just stop a request one specific request
you need to wait until you have enough

296
00:26:07,649 --> 00:26:14,428
signals and our strategy was to when we
detective used to lock up user accounts

297
00:26:14,429 --> 00:26:22,129
and that means basically they can no
longer login they can no longer send or

298
00:26:22,129 --> 00:26:28,549
interact with our systems but it's it's
a very heavy weight operation and you

299
00:26:28,549 --> 00:26:32,639
can imagine users are extremely upset
when we locked our accounts so we did

300
00:26:32,639 --> 00:26:36,458
this progressively first we want them we
told them you're using a third party API

301
00:26:36,459 --> 00:26:41,859
please change your password and stop
doing that and that's all fine if they

302
00:26:41,859 --> 00:26:46,279
don't follow that recommendation then we
lost their account but give them a

303
00:26:46,279 --> 00:26:50,859
chance to unlock again if they
understand still use third-party app

304
00:26:50,859 --> 00:26:55,549
then we permanently locked their account
and there is no recovery in order to

305
00:26:55,549 --> 00:27:00,418
warn the user is we want to we need to
be able to communicate to them so at

306
00:27:00,419 --> 00:27:05,179
first we started sending emails but for
many reasons sometimes those emails

307
00:27:05,179 --> 00:27:09,690
don't arrive either they go to spam the
user doesn't monitor their emails so we

308
00:27:09,690 --> 00:27:15,269
came up with an additional strategies
namely to send them chat messages from

309
00:27:15,269 --> 00:27:19,159
within the app to give them warnings and
then to tell them under account was

310
00:27:19,159 --> 00:27:24,139
locked the key thing when you're locking
an account which is extremely heavy

311
00:27:24,139 --> 00:27:30,988
handed you users are going to be very
upset and they're going to communicate

312
00:27:30,989 --> 00:27:34,979
through treats or user contacting
customer support and they're going to

313
00:27:34,979 --> 00:27:39,809
say no no no we didn't do anything wrong
we're just using this not charged either

314
00:27:39,809 --> 00:27:43,369
because they don't know necessarily the
difference between our third-party ads

315
00:27:43,369 --> 00:27:44,050
which is a

316
00:27:44,050 --> 00:27:47,399
education thing or because they have
very strong reasons to keep their

317
00:27:47,400 --> 00:27:52,150
account so it puts our customer support
in a weird situation because now there

318
00:27:52,150 --> 00:27:56,980
they can't necessarily trust what the
user is dying and in turn they bring

319
00:27:56,980 --> 00:28:00,860
those reports to us and we have to
investigate them the bottom line is that

320
00:28:00,860 --> 00:28:04,699
anytime you want to do something so
heavy-handed you have to have very very

321
00:28:04,700 --> 00:28:09,580
strong capabilities to investigate and
go beyond and figure out exactly what

322
00:28:09,580 --> 00:28:13,240
happened and make very very sure we
don't have false positives

323
00:28:14,720 --> 00:28:22,150
our scale and our user base even a 0.01%
false-positive rate is is a lot and we

324
00:28:22,150 --> 00:28:28,350
want to be very mindful that now that we
had those frameworks in place for

325
00:28:28,350 --> 00:28:30,189
service ID solutions

326
00:28:30,190 --> 00:28:35,050
they're very good their respective but
we also know that we have control over

327
00:28:35,050 --> 00:28:40,610
our own ads and we can make them part of
that defense mechanism so we started

328
00:28:40,610 --> 00:28:44,899
thinking about early on we started
thinking about how to be augment our

329
00:28:44,900 --> 00:28:50,600
mobile labs and as we were able to
deprecate our older age is it made more

330
00:28:50,600 --> 00:28:55,280
sense to start really leveraging the
solutions the strategies were very

331
00:28:55,280 --> 00:29:03,310
different for Android and I will start
with the on the Android side on the end

332
00:29:03,310 --> 00:29:09,710
retired we were at a church anyways
thinking of leveraging Google Cloud and

333
00:29:09,710 --> 00:29:15,970
point for for other needs and as part of
that we started reading and we saw that

334
00:29:15,970 --> 00:29:23,540
there is this I D talk and that Android
provides and it can be used for having

335
00:29:23,540 --> 00:29:29,960
better confidence that the request that
Android is issuing is indeed request

336
00:29:29,960 --> 00:29:34,020
from our own up so we were very very
interested and we started looking at

337
00:29:34,020 --> 00:29:37,680
that the way it sort of works is that
you

338
00:29:37,680 --> 00:29:43,930
the mobile our mobile apps android give
me an idea talk on the Android system

339
00:29:43,930 --> 00:29:50,990
either has one cached or goes to the
Google lost servers obtains one gives it

340
00:29:50,990 --> 00:29:55,090
back to the mobile app and the mobile
app sends it to our servers on the

341
00:29:55,090 --> 00:29:57,470
server side we've we can check that is

342
00:29:57,470 --> 00:30:01,590
valid meaning we check that is issued by
Google signed by their current

343
00:30:01,590 --> 00:30:09,039
certificates that its current in in time
so that we preserve prevent replays and

344
00:30:09,039 --> 00:30:19,150
that its associated with our Android
application ClientID this idea talkin is

345
00:30:19,150 --> 00:30:25,179
associated with Google accounts so if
you have multiple Google accounts on

346
00:30:25,179 --> 00:30:26,020
your phone

347
00:30:26,020 --> 00:30:29,730
we could come up with a strategy to
either use the first one or try all of

348
00:30:29,730 --> 00:30:37,570
them or any strategy to be able to get
legitimate idea tokens in principle this

349
00:30:37,570 --> 00:30:43,980
seemed very interesting because this
token tells you whether or not it came

350
00:30:43,980 --> 00:30:51,340
from our own in in practice it didn't
quite work for us so first problem we

351
00:30:51,340 --> 00:30:55,330
hit right away is that you need to have
Google Play services in store installed

352
00:30:55,330 --> 00:30:59,960
on that Android device and there were
many Android phones that did not have

353
00:30:59,960 --> 00:31:05,880
Google Play Store for instance Amazon
Kindle Fire or some Nokia devices

354
00:31:05,880 --> 00:31:11,669
running Android and we had to make a
decision do we support those devices or

355
00:31:11,669 --> 00:31:16,130
do we go with this approach and
ultimately the need for curtailing abuse

356
00:31:16,130 --> 00:31:23,490
prevailed and we we stopped accepting
Android devices that don't have so that

357
00:31:23,490 --> 00:31:31,909
part was done but the part that at the
time we didn't know is that the idea

358
00:31:31,909 --> 00:31:36,610
talkin suffered from similar abuse
issues than our apt us which is that

359
00:31:36,610 --> 00:31:40,539
third parties can reverse engineer the
protocol that Android users to

360
00:31:40,539 --> 00:31:45,200
communicate with Google servers and
potentially figure out a way to generate

361
00:31:45,200 --> 00:31:51,669
those I D talking without coming from
our own they they can do that without

362
00:31:51,669 --> 00:31:59,330
knowing the Google account but it turned
out that those third parties started

363
00:31:59,330 --> 00:32:04,100
asking their users give us also Google
user names and passwords so we ended up

364
00:32:04,100 --> 00:32:09,530
with a situation like this these are
three separate third party apps and they

365
00:32:09,530 --> 00:32:10,840
started warning the user

366
00:32:10,840 --> 00:32:13,959
look we have your snatch a username and
password but now please give us your

367
00:32:13,960 --> 00:32:18,350
Google username and password as well and
really we thought that this would be

368
00:32:18,350 --> 00:32:22,340
like users with think twice about
handing also their Google credentials

369
00:32:22,340 --> 00:32:30,409
that didn't quite happen so we ended up
with a situation where you could have

370
00:32:30,410 --> 00:32:37,890
third party apps on the Apple App Store
that pretended to be our Android and

371
00:32:37,890 --> 00:32:44,000
requesting Google credentials as well as
the snapshot credentials fortunately for

372
00:32:44,000 --> 00:32:48,620
us at this time that we started
struggling with that I D talkin Android

373
00:32:48,620 --> 00:32:54,419
had can't come up with a new attestation
applied school safety net and that

374
00:32:54,420 --> 00:32:59,140
safety net is this API is designed to
better ascertain that the request comes

375
00:32:59,140 --> 00:33:04,970
from a legitimate Android device so
there is this compatibility test Street

376
00:33:04,970 --> 00:33:13,440
city s that is run on the device and
androids can communicate back whether

377
00:33:13,440 --> 00:33:19,390
the device $60,000 tests or failed them
and the way it interacts with the way we

378
00:33:19,390 --> 00:33:24,930
our mobile app would use it is similar
to the idea talking with some future two

379
00:33:24,930 --> 00:33:31,370
key changes one of them is that natively
this API supports a way to to get no

380
00:33:31,370 --> 00:33:36,639
answers so you can really prevent replay
to leverage that you have to be willing

381
00:33:36,640 --> 00:33:41,970
to do an extra round trip to your server
to obtain announces so your mileage may

382
00:33:41,970 --> 00:33:47,290
vary but also interestingly it's not
associated with Google account

383
00:33:47,290 --> 00:33:55,110
associated with devices themselves
unfortunately again for similar reasons

384
00:33:55,110 --> 00:34:02,479
that we struggle with we found that this
API had its own forms of abuse and for a

385
00:34:02,480 --> 00:34:07,280
while it was not really useful to us
more recently however we've been very

386
00:34:07,280 --> 00:34:12,940
encouraged because in November the
Android security team really in our view

387
00:34:12,940 --> 00:34:17,840
stepped up their abuse detection and
their use of their robustness of the

388
00:34:17,840 --> 00:34:23,650
safety net API and since then has become
a very valuable defense to us

389
00:34:23,650 --> 00:34:32,200
they have an advantage on us is that the
Google Play is running as root on the

390
00:34:32,199 --> 00:34:36,620
device you can do more checking and it
has a longer history of those devices

391
00:34:36,620 --> 00:34:44,170
than we do so we were very happy that we
were able to rely on this API more a few

392
00:34:44,170 --> 00:34:49,200
things to keep in mind if you do you
safety at the API still evolving so

393
00:34:49,199 --> 00:34:53,659
right now for instance rooted devices
will show up as devices that are that

394
00:34:53,659 --> 00:34:57,720
are sailing compatibility test read so
you may have to decide yourself whether

395
00:34:57,720 --> 00:35:04,350
you want to allow rooted devices are not
allowed them but if you do allow them

396
00:35:04,350 --> 00:35:10,140
it's a bit more difficult to defend
freedom from illegitimate devices and

397
00:35:10,140 --> 00:35:14,240
also the error distributions that the
API can return it returns different eras

398
00:35:14,240 --> 00:35:18,870
for different situations can change over
time as there are few strategy changes

399
00:35:18,870 --> 00:35:23,859
as well so if you rely on those staying
constant you might you might get a

400
00:35:23,860 --> 00:35:29,650
little bit surprised we expect that over
time this API will give us even more

401
00:35:29,650 --> 00:35:34,220
information on what the problem is that
became factor that in as well in our

402
00:35:34,220 --> 00:35:38,939
abuse so it's more than a sort of a yes
no kind of decision and that may happen

403
00:35:38,940 --> 00:35:45,430
also like other API is this one can fail
it's been stable for the most part but

404
00:35:45,430 --> 00:35:51,490
it had had large outages so you have to
make sure again you don't block users

405
00:35:51,490 --> 00:35:58,600
when those things happen for iOS iOS
does not provide similar at the station

406
00:35:58,600 --> 00:36:03,230
API's than 100 provides our strategy
there was completely different we

407
00:36:03,230 --> 00:36:07,050
thought instead what if every time the
mobile app makes a request to our

408
00:36:07,050 --> 00:36:14,130
servers we sign it we signed the request
and then server-side we verified that

409
00:36:14,130 --> 00:36:15,680
the signature is valid

410
00:36:15,680 --> 00:36:19,080
now you will say well obviously that
means the client needs to have the key

411
00:36:19,080 --> 00:36:25,220
to make that effective we need to have a
way to have teased embedded in the

412
00:36:25,220 --> 00:36:29,169
mobile client that are not easy to steal
in fact they should be very hard to

413
00:36:29,170 --> 00:36:34,930
steal and this is why we worked with a
reputed vendors in that space the vendor

414
00:36:34,930 --> 00:36:36,330
provides white box

415
00:36:36,330 --> 00:36:42,620
graffiti which is a set of techniques to
embed keys very deeply into code such

416
00:36:42,620 --> 00:36:47,319
that it's not easy for you to extract
them from that code and also to mongol

417
00:36:47,320 --> 00:36:51,550
them with the cryptographic primitives
so that again it's not easy to different

418
00:36:51,550 --> 00:36:55,570
to to tell the key apart from from the
algorithm that is being used

419
00:36:56,300 --> 00:37:04,960
they also provides codification and the
the office location is that not only the

420
00:37:04,960 --> 00:37:09,340
key shouldn't be able to be lifted but
also any code is doing the signing

421
00:37:09,340 --> 00:37:17,330
should not be able to be take extracted
from our and used as a signing so really

422
00:37:17,330 --> 00:37:23,950
the way it works we we bury some keys in
our mobile code they could be using

423
00:37:23,950 --> 00:37:28,950
different type of encryption encryption
algorithms like public your symmetric

424
00:37:28,950 --> 00:37:33,790
key crypto or they could be using HMAC
or something else as long as the server

425
00:37:33,790 --> 00:37:39,050
can receive the signature and validated
it is that it is correct and that should

426
00:37:39,050 --> 00:37:45,810
be good enough because it implicitly
assumes that the third parties don't

427
00:37:45,810 --> 00:37:48,880
have access to their keys then they
should be able to generate those

428
00:37:48,880 --> 00:37:53,920
signatures and it solves our problem now
we received a request from the client

429
00:37:53,920 --> 00:37:58,870
does it have the right signature if yes
it's coming from our if it doesn't it's

430
00:37:58,870 --> 00:38:02,960
not from our apt and we can rejected
right away which is exactly what we

431
00:38:02,960 --> 00:38:12,100
wanted to really the solution is great
it lets us in real-time block

432
00:38:12,100 --> 00:38:17,819
third-party ads with the assumption that
those apps cannot get our keys there are

433
00:38:17,820 --> 00:38:22,400
some pitfalls to be to be careful of
codification in general is not a joke

434
00:38:22,400 --> 00:38:26,200
there is a lot that goes into it you
have to understand how it works what it

435
00:38:26,200 --> 00:38:30,009
protects what it doesn't protect you
can't put it for all your code

436
00:38:30,010 --> 00:38:34,650
potentially because Dad also increases
our start time

437
00:38:34,650 --> 00:38:40,110
start-up time it could be adding a lot
more check ko checking for snapshot for

438
00:38:40,110 --> 00:38:46,990
instance eating yes you mentioned that
you're using a vendor to actually you

439
00:38:46,990 --> 00:38:48,049
know provide the keys

440
00:38:48,049 --> 00:38:52,630
and and and up to skate can you
mentioned which been there is it

441
00:38:52,630 --> 00:39:00,829
know if I could I would have just prefer
not to not because they are the least

442
00:39:00,829 --> 00:39:04,819
vulnerable because I did not communicate
with them I'm sorry I'm going to reserve

443
00:39:04,819 --> 00:39:11,299
the questions to the end but we're gonna
leave time for the question so there are

444
00:39:11,299 --> 00:39:14,499
a lot of things to be wary of when
you're signing requested introduces

445
00:39:14,499 --> 00:39:21,649
latency even if the code itself is
thread-safe it could bring up threat

446
00:39:21,650 --> 00:39:25,799
race conditions and other threats safety
concerns in your code because suddenly

447
00:39:25,799 --> 00:39:30,829
there is additional delay that didn't
used to exist before the signing and

448
00:39:30,829 --> 00:39:34,619
also because when you're dealing with
Kadhafi's kitchen it makes development

449
00:39:34,619 --> 00:39:38,150
and debugging more difficult in general
so you have to compensate for that and

450
00:39:38,150 --> 00:39:42,079
and implement processes around it to
make sure that developers can still

451
00:39:42,079 --> 00:39:49,979
develop on the up having said that sort
of the approach on iOS at least at a

452
00:39:49,979 --> 00:39:52,979
very high level is conceptually
straightforward

453
00:39:53,619 --> 00:39:58,269
those keys implement the right of the
station validate the signatures on the

454
00:39:58,269 --> 00:40:05,269
server it still took three to six months
to get an initial work well working

455
00:40:05,269 --> 00:40:07,419
solutions or its not at all

456
00:40:07,420 --> 00:40:12,839
technically easy but conceptually fairly
well understood what we needed to do on

457
00:40:12,839 --> 00:40:16,959
Android the situation was more
complicated because we didn't want to

458
00:40:16,959 --> 00:40:21,928
realize only on at the station API is we
we wanted to implement similar solutions

459
00:40:21,929 --> 00:40:27,609
for Android and there it was it was more
difficult even at a conceptual level for

460
00:40:27,609 --> 00:40:32,880
one thing our appt is written in Java
and sophistication in Java Island is is

461
00:40:32,880 --> 00:40:34,439
more complicated

462
00:40:34,439 --> 00:40:39,879
not working as as well as native code
also because the signing with 44 those

463
00:40:39,880 --> 00:40:43,529
security reasons we had two ported to
native code we ended up in a situation

464
00:40:43,529 --> 00:40:49,829
where we had to create safe bridges
between Java and and our native code

465
00:40:49,829 --> 00:40:52,829
signing and

466
00:40:53,490 --> 00:40:57,839
otherwise again either end up in a
situation where that code can be

467
00:40:57,840 --> 00:41:03,190
trivially lifted and used by others to
generate those signatures so we really

468
00:41:03,190 --> 00:41:07,780
had to create a way for the native code
to trust that the job market is indeed

469
00:41:07,780 --> 00:41:14,510
our Java code and and allow those
signing with over time we build the

470
00:41:14,510 --> 00:41:21,590
solution for Android by the way to get
the most value out of it would require

471
00:41:21,590 --> 00:41:28,010
that we put all of our opportunity of
cold without that is not as strong and

472
00:41:28,010 --> 00:41:35,970
robust as the iOS version so but at that
point we had already implemented it for

473
00:41:35,970 --> 00:41:38,140
iOS and Android were starting to feel
good

474
00:41:38,140 --> 00:41:42,379
our defenses are robust and we're
starting to get sort of hints from those

475
00:41:42,380 --> 00:41:46,430
third-party developers that they're
struggling to adapt and one of them was

476
00:41:46,430 --> 00:41:50,980
sending out those messages through HTTP
headers in communication for instance

477
00:41:50,980 --> 00:41:58,820
this one this is getting messy so we're
feeling better and let's talk about

478
00:41:58,820 --> 00:42:05,410
where we are right now so the current
challenge essentially we had implemented

479
00:42:05,410 --> 00:42:10,470
server-side solutions on Android we
implemented this white box stripped of

480
00:42:10,470 --> 00:42:18,720
his office location and we also leverage
the Android attestation applies for iOS

481
00:42:18,720 --> 00:42:25,000
be implemented white box crypto but we
feel it's pretty robust and also we made

482
00:42:25,000 --> 00:42:29,180
sure that we use it for all our
sensitivity is not just for instance

483
00:42:29,180 --> 00:42:34,730
login it became really really hard for
third party apps standalone applications

484
00:42:34,730 --> 00:42:39,470
to be able to forge those signatures and
to pretend to be Iraq so the main

485
00:42:39,470 --> 00:42:44,129
question for us at this point is are we
done is this problem solved and we

486
00:42:44,130 --> 00:42:50,470
realize no it's still a cat-and-mouse
game we ended up in a situation where

487
00:42:50,470 --> 00:42:57,439
because those apps can no longer do the
signing inside their own ups

488
00:42:59,360 --> 00:43:04,140
they came up with a new twist which is
to leverage removed signing servers and

489
00:43:04,140 --> 00:43:08,000
those signing servers again they can't
really lift our codes so they actually

490
00:43:08,000 --> 00:43:13,130
use our own application they run a
server farm of mobile clients are we

491
00:43:13,130 --> 00:43:17,180
think they do where they're running our
own up and they're using them as

492
00:43:17,180 --> 00:43:22,410
training Oracle's so the way it works is
something like this on the bottom left

493
00:43:22,410 --> 00:43:28,990
we have our that is talking with our
server and on the right side there is a

494
00:43:28,990 --> 00:43:32,850
third-party client that wants to talk to
stature and instead of talking directly

495
00:43:32,850 --> 00:43:37,420
it would make a request to a third party
service a peace sign this request for me

496
00:43:37,420 --> 00:43:44,100
the third party server with the intended
to signing farm using our own ads get

497
00:43:44,100 --> 00:43:48,290
the signature return it back to the
third party app and then it can pretend

498
00:43:48,290 --> 00:43:54,610
to be our own this is our current
challenge today where we think we have

499
00:43:54,610 --> 00:44:00,160
some good ideas to combat it but again
it's still a cat-and-mouse game and to

500
00:44:00,160 --> 00:44:05,049
be able to do for you to know more on
where we stand I think you'll have to

501
00:44:05,050 --> 00:44:10,350
wait for next conference where we have a
chance to to see how that goes and just

502
00:44:10,350 --> 00:44:14,350
to leave you with a couple of thoughts
of you know I snapshots product offering

503
00:44:14,350 --> 00:44:19,400
roads were seeing more and more
different types of abuse from target new

504
00:44:19,400 --> 00:44:23,310
functionality and we have to think about
them fundamentally differently from the

505
00:44:23,310 --> 00:44:27,940
initial abuse problems that we were
dealing with also as much as we spent on

506
00:44:27,940 --> 00:44:32,940
this we realize there are no perfect
solutions and so the way we were

507
00:44:32,940 --> 00:44:37,970
thinking about it now is let's try to
make this abuse more expensive to get to

508
00:44:37,970 --> 00:44:41,629
the point where it's more expensive to
circumvent our differences than it is to

509
00:44:41,630 --> 00:44:45,980
get the return on what those apps are
trying to do so

510
00:44:45,980 --> 00:44:50,440
sort of make it more expensive than what
they would get out of it and also we

511
00:44:50,440 --> 00:44:55,760
recognize that mobile platforms have a
role to play in this they can work on

512
00:44:55,760 --> 00:45:01,540
stronger attestation API's and they can
also produce better stores now you will

513
00:45:01,540 --> 00:45:05,970
argue there will still be whether they
would still be command line tools but

514
00:45:05,970 --> 00:45:07,899
really most users interact

515
00:45:07,900 --> 00:45:11,660
on the Internet these days with mobile
phones are curtailing those forms of

516
00:45:11,660 --> 00:45:15,868
abuse would be very effective and on our
side we know we have we still have work

517
00:45:15,869 --> 00:45:20,480
to do we have to find understand more
what users need and we don't provide and

518
00:45:20,480 --> 00:45:25,500
work harder and harder on providing
those needs and and this is sort of an

519
00:45:25,500 --> 00:45:31,400
intersection of security privacy
business needs and user growth last

520
00:45:31,400 --> 00:45:35,000
point I wanna say we're definitely
hiring on all of these France securities

521
00:45:35,000 --> 00:45:40,059
family abuse and privacy so if anyone is
interested please come to our booth or

522
00:45:40,059 --> 00:45:43,059
talk to us thank you very much

523
00:45:47,730 --> 00:45:55,079
there were some questions if your
encryption key gets compromised what are

524
00:45:55,079 --> 00:46:00,789
your plans of rotating those and having
to deal with the legacy code and so

525
00:46:00,789 --> 00:46:06,270
fortunately so far this hasn't happened
but at the same time that doesn't mean

526
00:46:06,270 --> 00:46:12,369
it can and so we certainly have built in
the way we use those keys we factor that

527
00:46:12,369 --> 00:46:18,789
in we have an ability to recover from
the situations I wanted to follow up on

528
00:46:18,789 --> 00:46:21,960
those are your signature saying I guess
you have your

529
00:46:21,960 --> 00:46:25,819
understand that this is not a perfect
solution I'm just wondering why didn't

530
00:46:25,819 --> 00:46:32,430
you use like ourselves approach like he
chain API hours or password basically

531
00:46:32,430 --> 00:46:35,879
presume assuming that like you don't
have passed what you just need to derive

532
00:46:35,880 --> 00:46:40,690
the Kindle signature because all his
like application on burden you know you

533
00:46:40,690 --> 00:46:45,690
see just like you know the deterrent for
amateurs it's not a deterrent for

534
00:46:45,690 --> 00:46:50,660
professionals rate ok so this is a good
question thank you why don't we use

535
00:46:50,660 --> 00:46:55,589
keychain and also use password racing
corruption the truth is this is a

536
00:46:55,589 --> 00:47:00,470
situation where our users are willingly
giving a third party after login the

537
00:47:00,470 --> 00:47:04,109
username and password you can imagine
that anything else we stored on the

538
00:47:04,109 --> 00:47:10,578
device is potentially also can be given
to those third party users may not be

539
00:47:10,579 --> 00:47:15,549
using non jailbroken users may be using
jailbroken devices for instance or

540
00:47:15,549 --> 00:47:20,150
rooted phones so those API's wouldn't
provide the kind of security that we

541
00:47:20,150 --> 00:47:20,440
would

542
00:47:20,440 --> 00:47:25,800
yes absolutely

543
00:47:26,619 --> 00:47:49,380
it is possible to check if users are
jailbroken yes yes you mentioned using

544
00:47:49,380 --> 00:47:53,910
mobile code obfuscation technology is a
key part of your practice my

545
00:47:53,910 --> 00:47:57,920
understanding is that to do a security
assessment against that technology is

546
00:47:57,920 --> 00:48:01,970
not practical because it's very time
consuming to crack it but to an

547
00:48:01,970 --> 00:48:07,109
adversary has practical it will get it
eventually and it's just like encoding

548
00:48:07,109 --> 00:48:12,660
it's not real security so I just worry
how much do depend upon that are you

549
00:48:12,660 --> 00:48:18,190
prepared for it to be broken by by a
savvy adversary no absolutely this is a

550
00:48:18,190 --> 00:48:23,770
great question so how much are relying
on mobile code obfuscation and is not

551
00:48:23,770 --> 00:48:28,990
enough against determined adversaries
certainly were not solely relying on

552
00:48:28,990 --> 00:48:33,490
that as we said our spam and abuse
defenses from the beginning are intended

553
00:48:33,490 --> 00:48:37,609
to curtail of different forms of abuse
and they've been effective to combat

554
00:48:37,609 --> 00:48:39,569
this has sort of problems as well

555
00:48:39,569 --> 00:48:44,509
also all our services solutions would
work regardless of a few station having

556
00:48:44,510 --> 00:48:49,780
said that I think you having said that
this obfuscation we worked with a very

557
00:48:49,780 --> 00:48:54,270
reputed vendors that spent a lot of time
thinking about how to make this

558
00:48:54,270 --> 00:48:59,009
occupation hard and we ourselves have
spent a lot of time according to

559
00:48:59,010 --> 00:49:04,050
understand is it really hard or is it or
is it not and we know that it's a very

560
00:49:04,050 --> 00:49:09,500
hard problem to solve so you have to be
extremely determined to work on this it

561
00:49:09,500 --> 00:49:14,630
may or may not happen but certainly this
is something we're very keenly aware of

562
00:49:14,630 --> 00:49:18,349
and where we're continuously working
with the vendor to implement stronger

563
00:49:18,349 --> 00:49:24,210
and stronger solutions when you do the
request signing with it and that it

564
00:49:24,210 --> 00:49:28,369
secret key is that something that you
can easily verify with you know public

565
00:49:28,369 --> 00:49:32,239
equivalence out that in your system or
do you need a secret key to verify

566
00:49:32,239 --> 00:49:37,129
and a second question is when you do
have like you know these solar farms

567
00:49:37,129 --> 00:49:41,529
signing forms you know that I would
imagine that you know you they have to

568
00:49:41,529 --> 00:49:45,439
be hosted some way in a cloud provider
baby you can just blacklist you know the

569
00:49:45,439 --> 00:49:50,979
type of request from that kind of IP
addresses what are the consequences are

570
00:49:50,979 --> 00:49:55,279
using them for you think your these are
very good question so the first one is

571
00:49:55,279 --> 00:50:00,649
what sort of it really depends what sort
of encryption crypto algorithms we use

572
00:50:00,649 --> 00:50:05,359
we have flexibility on that and yes
pretty much for any w's it's it's very

573
00:50:05,359 --> 00:50:09,348
easy to to do the corresponding
verification on the server

574
00:50:09,869 --> 00:50:13,959
we're not worried about people here for
this sort of issue we're not worried

575
00:50:13,959 --> 00:50:14,999
about people

576
00:50:14,999 --> 00:50:18,448
compromising our servers and getting
access to those keys if that happens we

577
00:50:18,449 --> 00:50:23,729
have bigger problems so for us to be
able to verify those signatures on the

578
00:50:23,729 --> 00:50:25,519
server is not very hard

579
00:50:25,519 --> 00:50:30,058
the the the second point regarding those
signing forms you're absolutely correct

580
00:50:30,059 --> 00:50:34,579
that those are hosted somewhere however
you have to also see that they're not

581
00:50:34,579 --> 00:50:38,939
interacting with not charged directly
they're not logging into those we don't

582
00:50:38,939 --> 00:50:43,239
have an easy way to detect them they're
simply returning content back to the

583
00:50:43,239 --> 00:50:47,269
third party app in the third party app
on the mobile device is the one that is

584
00:50:47,269 --> 00:50:51,919
doing this natural interaction so there
are ways and surely there are things we

585
00:50:51,919 --> 00:50:57,888
can do and we are doing to curtail these
sort of signing forms but it's not as

586
00:50:57,889 --> 00:51:05,339
simple as it would appear so quick
question I think we are ok one more

587
00:51:05,339 --> 00:51:10,399
question so it looks like a lot of
people want to get into the snapshot

588
00:51:10,399 --> 00:51:16,269
ecosystem to basically have some
interaction and send messages was there

589
00:51:16,269 --> 00:51:22,749
any discussion of what's your thought
process about having a while tokens are

590
00:51:22,749 --> 00:51:27,209
introducing additional partners so users
are less incentivized to give their

591
00:51:27,209 --> 00:51:31,069
usernames passwords that there is a lot
tokens for certain third parties what

592
00:51:31,069 --> 00:51:34,869
what's what's the thought process of
steps are being closed vs opening it up

593
00:51:34,869 --> 00:51:39,809
to other third party apps sure this is a
very good question can we think of a

594
00:51:39,809 --> 00:51:44,559
North scheme in order to allow
third-party apps to interact with our

595
00:51:44,559 --> 00:51:45,680
systems without her

596
00:51:45,680 --> 00:51:50,460
usernames and passwords if it was just a
question of all you could sort of answer

597
00:51:50,460 --> 00:51:54,569
it in that perspective but the truth is
if you do provide any author framework

598
00:51:54,569 --> 00:51:58,040
for third party apps to log into
snapshot without having those

599
00:51:58,040 --> 00:52:02,520
credentials you also want to provide
them an API in order to do that ensuing

600
00:52:02,520 --> 00:52:08,170
conversations and being able to achieve
certain purposes in reality we found

601
00:52:08,170 --> 00:52:13,579
that we were still short of stature is
still growing and still figuring out of

602
00:52:13,579 --> 00:52:19,309
what the product direction should be
were still testing a lot of new features

603
00:52:19,309 --> 00:52:24,140
we don't feel we're at the point right
now where it's easy to provide a stable

604
00:52:24,140 --> 00:52:28,618
ap third party apps can use and that
provide certain functionality so it's

605
00:52:28,619 --> 00:52:32,040
not out of the question for the future
that's part of something we have to be

606
00:52:32,040 --> 00:52:36,720
thinking about and certainly listening
to what our users one but also it's not

607
00:52:36,720 --> 00:52:42,629
a given that our stage we can provide an
API for others and also be very sure

608
00:52:42,630 --> 00:52:47,440
that it doesn't alter the experience on
snatcher thank you very much

