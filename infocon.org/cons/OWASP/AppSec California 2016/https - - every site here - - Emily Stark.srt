1
00:00:18,470 --> 00:00:29,149
software engineer on Google Chrome
security team and when I want to tell

2
00:00:29,149 --> 00:00:33,940
you about today is a whole grab bag of
projects that we're working on work

3
00:00:33,940 --> 00:00:39,120
that's designed to make the entire web
HTTPS and not just a cheap yes but

4
00:00:39,120 --> 00:00:44,629
high-quality strong SHANY HTTPS so that
users get the best they're the best

5
00:00:44,629 --> 00:00:47,409
security that issue to be asked it has
to offer

6
00:00:47,409 --> 00:00:53,019
I'm gonna be talking about kind of a
grab bag of projects stick with me there

7
00:00:53,019 --> 00:00:59,059
is an overall theme so I want to start
by you know talking about this like

8
00:00:59,059 --> 00:01:04,798
message of HTTPS Everywhere we hear a
lot these days it's something that there

9
00:01:04,799 --> 00:01:08,869
are a lot of projects pushing for modern
browsers are moving in this direction

10
00:01:08,869 --> 00:01:15,750
we've been hearing HTTPS Everywhere four
years from the eff who distributes this

11
00:01:15,750 --> 00:01:20,590
browser extension that sort of advances
the idea that the web should be HTTPS by

12
00:01:20,590 --> 00:01:25,820
default and insecure HDB should really
just be the exception it should be what

13
00:01:25,820 --> 00:01:31,729
you fall back on when it's ups isn't
available so from all the way back HTTPS

14
00:01:31,730 --> 00:01:34,140
Everywhere which has been around forever

15
00:01:34,140 --> 00:01:39,180
there are also a bunch of newer projects
like let's encrypt this has gotten a lot

16
00:01:39,180 --> 00:01:43,790
of buzz but in case you're not familiar
let's encrypt is a new CA certificate

17
00:01:43,790 --> 00:01:48,240
authority that is offering free
automated certificates and so one of the

18
00:01:48,240 --> 00:01:52,919
motivations for let's encrypted that
setting up HTTPS should be so easy that

19
00:01:52,920 --> 00:01:58,040
any mom-and-pop shop can do it and so
every web site on the web should really

20
00:01:58,040 --> 00:02:04,750
be a GPS enabled HTTPS Everywhere is
also something that as I mentioned

21
00:02:04,750 --> 00:02:09,429
modern browsers are pushing for this is
a screen shot of crown in a slightly

22
00:02:09,429 --> 00:02:14,650
experimental configuration and there's
two things I want to highlight here two

23
00:02:14,650 --> 00:02:20,629
ways in which in this screenshot chrome
is evangelizing HTTPS Everywhere so the

24
00:02:20,629 --> 00:02:26,970
first thing I want to highlight is this
is deprecation message in the console so

25
00:02:26,970 --> 00:02:31,650
what we have here is an insecure HTTP
say it that

26
00:02:31,650 --> 00:02:34,920
is trying to access a powerful web
platform feature which is the

27
00:02:34,920 --> 00:02:40,369
Geolocation API and this console
messages saying hey in the future chrome

28
00:02:40,370 --> 00:02:44,930
isn't going to allow this because you
location is too powerful a thing to fall

29
00:02:44,930 --> 00:02:48,670
into the hands of any any network
attacker it should be something that is

30
00:02:48,670 --> 00:02:52,879
only available to the site the user
actually thinks they're visiting and

31
00:02:52,879 --> 00:02:56,629
that's why we're deprecating the usage
of powerful web platform features over

32
00:02:56,629 --> 00:03:01,189
in secure HTTP so this is a gradual
effort or not you know trying not to

33
00:03:01,189 --> 00:03:05,450
pull the rug out from anyone but but we
are starting with his deputation message

34
00:03:05,450 --> 00:03:09,200
to warn developer is that if you want to
use the full power of the web these days

35
00:03:09,200 --> 00:03:15,000
you really should be using HTTPS and the
second thing I want to highlight on the

36
00:03:15,000 --> 00:03:17,849
screenshot is this experimental
configurations I'm running Chrome right

37
00:03:17,849 --> 00:03:22,310
now with a with a field trial flag which
you can actually turn on your own copy

38
00:03:22,310 --> 00:03:28,409
of chrome and this field child flag is
experimentally marking in secure HTTP

39
00:03:28,409 --> 00:03:34,040
pages as negative so you can see it's
not bad neutral pH indicator icon that

40
00:03:34,040 --> 00:03:39,168
we are used to seeing on insecurity GDP
it's like an actually negative bad state

41
00:03:39,169 --> 00:03:42,970
and this is something we want to do in
the future gradually start marking

42
00:03:42,970 --> 00:03:49,430
insecurity GDP as bad instead of neutral
because HTTPS should be the norm and

43
00:03:49,430 --> 00:03:53,549
insecurity GDP should be the exception
where users notice and say hey

44
00:03:53,549 --> 00:04:00,299
something's wrong this is not not the
state that expect the web to be in this

45
00:04:00,299 --> 00:04:05,530
is an example of how modern browser then
chrome is not alone in these efforts all

46
00:04:05,530 --> 00:04:10,959
modern browsers are are sort of making
the move towards HTTPS Everywhere when I

47
00:04:10,959 --> 00:04:16,699
wanna ask in the stock is whether HTTPS
Everywhere is actually the right thing

48
00:04:16,699 --> 00:04:20,949
for us all to be chanting and you can
probably guess by the fact that I have

49
00:04:20,949 --> 00:04:26,169
this question appeared the answer i
think is no it's not enough it's not

50
00:04:26,169 --> 00:04:32,090
even good in fact for every site to go
turn on each DPS if it's not well

51
00:04:32,090 --> 00:04:38,669
configured and if it's not high quality
HTTPS so to make this point this is a

52
00:04:38,669 --> 00:04:42,150
great great example of this is the error
page that crime show

53
00:04:42,150 --> 00:04:47,770
knows when a guy has failed certificate
validation so when chrome can't set up a

54
00:04:47,770 --> 00:04:53,109
valid HTTPS connection because the
certificate chain failed to validate and

55
00:04:53,110 --> 00:04:57,560
our data shows that chrome displays
error page hundreds of millions of times

56
00:04:57,560 --> 00:05:03,650
per month and there's no way thats all
actual attack and there's no way that's

57
00:05:03,650 --> 00:05:08,349
even actual service configurations this
is just a whole bunch of crossed that

58
00:05:08,350 --> 00:05:12,590
happening on clients and networks and
servers that's causing users to see all

59
00:05:12,590 --> 00:05:17,229
these hundreds of millions of
false-positive areas every month and

60
00:05:17,230 --> 00:05:21,420
this is really bad because we don't want
states to go turn on each ups and then

61
00:05:21,420 --> 00:05:26,380
this is the web that users see it kind
of is out with what happens when users

62
00:05:26,380 --> 00:05:31,040
will be trained to ignore these warnings
they'll be trained to try to click

63
00:05:31,040 --> 00:05:35,730
through and they won't think that they
would they won't be able to reliably

64
00:05:35,730 --> 00:05:40,560
interpret these in the case of an actual
attack and it's just a bad user

65
00:05:40,560 --> 00:05:43,760
experience you know they caesar's tryna
go to this website to get something done

66
00:05:43,760 --> 00:05:47,909
they can't access the say they don't
have an average user can be expected to

67
00:05:47,910 --> 00:05:53,340
know what's going on to know how this
might influence their behavior on this

68
00:05:53,340 --> 00:05:59,099
site so overall it's just bad for
websites and bad for user is if we turn

69
00:05:59,100 --> 00:06:02,100
on HTTPS on a bunch of sites and this is
the result

70
00:06:02,780 --> 00:06:09,859
another example of where HTTPS can kind
of go wrong like this is this you I this

71
00:06:09,860 --> 00:06:15,430
is another piece of crumb you I am and
this is why you see when you click on

72
00:06:15,430 --> 00:06:20,920
the laptop lock icon on HTTPS page where
chrome was able to set up the HTTPS

73
00:06:20,920 --> 00:06:26,000
connection and validate the certificate
came by subsequently noticed some other

74
00:06:26,000 --> 00:06:31,110
problems with the page and the thing
here is that this is confusing and where

75
00:06:31,110 --> 00:06:36,760
do you if you're an average and user
looking at this you probably don't know

76
00:06:36,760 --> 00:06:39,370
what it actually means or how it affects
you

77
00:06:39,370 --> 00:06:43,850
anecdotally even the average developer
doesn't have a great time trying to

78
00:06:43,850 --> 00:06:47,490
figure out what's going on here so this
is another example of something that can

79
00:06:47,490 --> 00:06:50,650
go wrong when it turns on HTTPS and

80
00:06:50,650 --> 00:06:58,060
a state that we don't want the web to
end up in so when I'm gonna be talking

81
00:06:58,060 --> 00:07:02,430
about in this grab bag of projects that
were working on Chrome in chrome is what

82
00:07:02,430 --> 00:07:06,550
we're doing to get not just HTTPS
Everywhere but high-quality HTTPS

83
00:07:06,550 --> 00:07:10,490
Everywhere where the users have a good
experience they they don't get confused

84
00:07:10,490 --> 00:07:15,509
by scary you I they are actually getting
the security and privacy benefits that

85
00:07:15,509 --> 00:07:22,330
it's ups can get divided into three
sections to see know where I'm going

86
00:07:22,330 --> 00:07:26,789
with this first time to talk about what
we are doing to understand the problem

87
00:07:26,789 --> 00:07:29,460
from the client's point of view because
I mentioned there's a whole lot of

88
00:07:29,460 --> 00:07:33,789
methods in client the networks in
addition to servers that is causing

89
00:07:33,789 --> 00:07:38,419
HTTPS deployments to kind of go wrong
and so we talk about talk about a

90
00:07:38,419 --> 00:07:42,580
dataset were gathering back is helping
us understand what is going on in the

91
00:07:42,580 --> 00:07:48,830
wild then I'm gonna talk about some web
platform tools were doing so once a

92
00:07:48,830 --> 00:07:54,570
website has kind of setup HTTPS and once
a user has actually been able to connect

93
00:07:54,570 --> 00:07:59,330
to the site over HTTPS we're working on
a set of tools in the web platform

94
00:07:59,330 --> 00:08:07,969
itself to help the developer migrate the
application to https and finally we're

95
00:08:07,970 --> 00:08:12,169
asking a lot of developers when we asked
them all to go to https and so I'm gonna

96
00:08:12,169 --> 00:08:15,880
give you a sneak peek of some tools are
building in chrome to just help

97
00:08:15,880 --> 00:08:20,380
developers understand this landscape
because as easy as we try to make it for

98
00:08:20,380 --> 00:08:24,169
them it is it's a complicated landscape
that we're trying to make it easier for

99
00:08:24,169 --> 00:08:31,120
them to understand so I'll stay here
with what we're doing to understand the

100
00:08:31,120 --> 00:08:33,839
problems from the from the client's
point of view and understand what's

101
00:08:33,839 --> 00:08:40,750
going wrong that's making HTTPS not as
good a user experience as it should be I

102
00:08:40,750 --> 00:08:44,440
want to go back to their site as a
spelling error page that crime shows

103
00:08:44,440 --> 00:08:50,580
when it fails to validate a certificate
chain about maybe eight or nine months

104
00:08:50,580 --> 00:08:54,160
ago you might have noticed this addition
to

105
00:08:54,690 --> 00:09:01,350
HTTPS area page this is a checkbox that
we added about allows the user to opt-in

106
00:09:01,350 --> 00:09:05,830
to send us a report about what's going
wrong because our hypothesis was that

107
00:09:05,830 --> 00:09:08,710
the hundreds of millions of these that
we show every month

108
00:09:08,710 --> 00:09:14,190
cannot be all actual attacks they cannot
all be actual kind of accidental service

109
00:09:14,190 --> 00:09:17,620
configurations there's other things
going wrong on the claims are the

110
00:09:17,620 --> 00:09:23,450
networks that are causing us to show so
many of these every month so want to

111
00:09:23,450 --> 00:09:25,870
talk about some of the patterns that
have emerged from these days that we've

112
00:09:25,870 --> 00:09:30,000
been collecting and analyzing telling us
what's going wrong in the wild for

113
00:09:30,000 --> 00:09:35,800
clients that are seeing significant
validation errors the first pattern that

114
00:09:35,800 --> 00:09:43,170
emerges overwhelmingly is that client
clocks are really really bad for this

115
00:09:43,170 --> 00:09:49,439
just like a six hour so much 30 percent
of the time that chrome shows a

116
00:09:49,440 --> 00:09:54,880
certificate validation error is because
the client clock was wrong not because

117
00:09:54,880 --> 00:09:57,270
the certificate is expired

118
00:09:57,270 --> 00:10:01,280
not because of an actual attack it's
because like someone mess with their

119
00:10:01,280 --> 00:10:06,230
clock or you know what we're trying to
figure out also is why it why people are

120
00:10:06,230 --> 00:10:09,420
messing with their clock sometimes it's
intentional to get to the next level

121
00:10:09,420 --> 00:10:17,939
candy crush I hear sometimes it's
malware malware changes the cock

122
00:10:17,940 --> 00:10:23,020
sometimes because it can mess with
antivirus after or it could just be you

123
00:10:23,020 --> 00:10:26,960
know an old device with a dying CMOS
battery we don't know exactly but it's

124
00:10:26,960 --> 00:10:34,380
overwhelming know this is an obvious
kind of problem area to try to fix we

125
00:10:34,380 --> 00:10:38,900
have a clock interstitial in chrome and
this this rolled out around the time

126
00:10:38,900 --> 00:10:42,589
that we realize this is such an
overwhelming problem so what we really

127
00:10:42,589 --> 00:10:50,060
want is when chrome notices that a
certificate looks expired and chrome

128
00:10:50,060 --> 00:10:54,810
notices that the users clock looks like
it might not be wrong it's great to kind

129
00:10:54,810 --> 00:10:58,239
of point them back onto the right track
in suggests that maybe they want to fix

130
00:10:58,240 --> 00:11:03,610
their clock so this is exactly what this
special interstitial page does it uses a

131
00:11:03,610 --> 00:11:07,730
huge mistake to decide that the
certificate will expire

132
00:11:07,730 --> 00:11:11,529
at the client's clark also looks not
quite right so I'm gonna suggest to the

133
00:11:11,529 --> 00:11:15,970
user that that they fix their clock
instead of showing them the scary

134
00:11:15,970 --> 00:11:19,500
generic message about their connection
may not be secure which they have no

135
00:11:19,500 --> 00:11:26,120
idea what to do it so this is pretty
cool and helpful i buy as I mentioned

136
00:11:26,120 --> 00:11:29,290
it's based on heuristic and that
heuristic if you're wondering how it

137
00:11:29,290 --> 00:11:35,880
works it's basically based around the
bill time crimes bill time so around

138
00:11:35,880 --> 00:11:41,990
looks at its own built home looks at the
the system clock time and if the system

139
00:11:41,990 --> 00:11:46,839
clock is outside a window around the
bill time chrome decides that the clock

140
00:11:46,839 --> 00:11:52,800
is probably wrong but it's a stack it
has to be a little bit rough to avoid

141
00:11:52,800 --> 00:11:56,599
having false positives and one thing
that we've learned from our certificate

142
00:11:56,600 --> 00:12:01,769
report data set is that it catches 40%
47% of the areas that it really should

143
00:12:01,769 --> 00:12:04,540
be catching that's pretty good

144
00:12:04,540 --> 00:12:09,680
from this from this overwhelming number
of false-positive certificate validation

145
00:12:09,680 --> 00:12:14,569
areas that are doing to that are due to
client clock areas we can cut them in

146
00:12:14,569 --> 00:12:19,910
half so for half of those areas we can
show this friendly helpful error message

147
00:12:19,910 --> 00:12:24,630
that is not scary and will help the user
get back on the right track but we are

148
00:12:24,630 --> 00:12:27,959
also investigating how to do better than
this so for example we're looking at

149
00:12:27,959 --> 00:12:34,050
using a secure time servicing chrome to
have a better approximation of when they

150
00:12:34,050 --> 00:12:37,620
when the client clock is cracked that
work that we have underway this quarter

151
00:12:37,620 --> 00:12:45,930
so I can claim clocks are overwhelming
the thing that emerges most prominently

152
00:12:45,930 --> 00:12:49,500
from the status that there are some
other patterns that emerge known smaller

153
00:12:49,500 --> 00:12:56,620
numbers so one thing we've noticed is
that there is a set of software security

154
00:12:56,620 --> 00:13:01,970
products antivirus firewall network
security solutions that intentionally

155
00:13:01,970 --> 00:13:07,819
man in the middle and users HTTPS
connections and they generally do this

156
00:13:07,819 --> 00:13:12,240
by installing a root certificate in the
client's trust or and then using that

157
00:13:12,240 --> 00:13:18,069
root certificate to animal captions so
you could argue that this is even you

158
00:13:18,069 --> 00:13:20,339
could argue that has legitimate purposes

159
00:13:20,339 --> 00:13:26,629
I think we have to accept that this is
not going away anytime soon and so we

160
00:13:26,629 --> 00:13:30,339
want when it went after security product
is going to be doing this we want them

161
00:13:30,339 --> 00:13:35,439
to be doing it the right way and we
noticed that there are often during the

162
00:13:35,439 --> 00:13:41,029
runway for example just not installing
the the the root certificate properly so

163
00:13:41,029 --> 00:13:46,059
we notice that at least 2 percent every
time that crime has a certificate

164
00:13:46,059 --> 00:13:50,719
validation error it's due to some kind
of misconfigured or antivirus or buggy

165
00:13:50,720 --> 00:13:55,470
antivirus software and when I say anti
virus after I mean a whole class of kind

166
00:13:55,470 --> 00:14:01,449
of security products that meet in the
middle HTTPS connections I'm seeing

167
00:14:01,449 --> 00:14:06,229
greater than 2 percent here because we
don't have in our analysis we don't yet

168
00:14:06,230 --> 00:14:10,970
have a great way of detecting all
instances of this problem automatically

169
00:14:10,970 --> 00:14:17,160
so to prevent is really a very
conservative lower bound here and it's

170
00:14:17,160 --> 00:14:23,029
also interesting to remember that two
percent of hundreds of millions every

171
00:14:23,029 --> 00:14:26,379
month is still really large absolute
number and a large number of affected

172
00:14:26,379 --> 00:14:32,749
users one in one instance of this is a
mentioned is the route search is not

173
00:14:32,749 --> 00:14:36,850
being installed on the user's trust or
there's also just downright bugs so for

174
00:14:36,850 --> 00:14:41,610
example this is one common problem that
we see this is an example of an Avast

175
00:14:41,610 --> 00:14:48,879
root certificate so Avast Antivirus is
Manalang this user's connection and

176
00:14:48,879 --> 00:14:52,389
there's a problem with the root
certificate it's installed on the user's

177
00:14:52,389 --> 00:14:59,519
trust or correctly but you'll notice
that it's valid from 2000 to 2010 and

178
00:14:59,519 --> 00:15:04,459
this report came in a few months ago and
in this case the client's cough with

179
00:15:04,459 --> 00:15:10,399
actually correct so we have here an
instance of a vast man in the modeling

180
00:15:10,399 --> 00:15:16,850
users with expired very expired
certificates so we've actually been

181
00:15:16,850 --> 00:15:20,649
working with a vast to fix this and we
we hear that this is fixed in the

182
00:15:20,649 --> 00:15:24,910
in the latest version of avast so that's
great so we've had some luck working

183
00:15:24,910 --> 00:15:29,740
with vendors trying to get bugs like
this fixed fortunately this was a pretty

184
00:15:29,740 --> 00:15:34,639
straightforward one to fix but in some
cases it's like you know the problem is

185
00:15:34,639 --> 00:15:38,540
like the network administrator just
didn't install the certificate properly

186
00:15:38,540 --> 00:15:42,410
so it's more problem of unclear
documentation and/or lack of

187
00:15:42,410 --> 00:15:45,569
administrative tools and things like
that are a little less straightforward

188
00:15:45,569 --> 00:15:49,639
to fix but wherever we can we're we're
working with lenders to get these these

189
00:15:49,639 --> 00:15:56,199
problems fixed one final pattern that's
emerged from our dataset

190
00:15:56,999 --> 00:16:00,420
I talked to that I said I said that a
lot of this is just messing us in claims

191
00:16:00,420 --> 00:16:06,860
and that works but you do have your your
your standard class of blatant server

192
00:16:06,860 --> 00:16:11,069
misconfiguration problems expired
certificates and things like that one

193
00:16:11,069 --> 00:16:16,839
that is just immensely frustrating is
1.5 percent of reports are due to

194
00:16:16,839 --> 00:16:20,899
certificate names that are almost but
not quite correct and I'll give you some

195
00:16:20,899 --> 00:16:24,319
examples to explain what this means but
basically this is an example where like

196
00:16:24,319 --> 00:16:30,498
he set up HEB asked they got the
certificate they did it like so close

197
00:16:30,499 --> 00:16:38,040
but just not quite there so for example
the user requests food at example.com

198
00:16:38,040 --> 00:16:44,379
and the certificate name is example.com
so someone was clearly trying really

199
00:16:44,379 --> 00:16:50,980
hard here but just didn't quite get
there another example a wildcard

200
00:16:50,980 --> 00:16:54,050
certificate when the requests name is

201
00:16:54,750 --> 00:16:59,010
two levels of subdomains so this is a
really common misconception a wild card

202
00:16:59,010 --> 00:17:05,900
will only match 11 levels of demand not
too and the grand finale is one that I

203
00:17:05,900 --> 00:17:10,540
had the most often personally you visit
example.com and you get a certificate

204
00:17:10,540 --> 00:17:14,920
for dub dub Dubble example.com this
happens all the time and to it to a

205
00:17:14,920 --> 00:17:18,010
developer to someone who knows what's
going on you're like ok I you know I see

206
00:17:18,010 --> 00:17:23,160
what's going on here just gonna go to
dub dub dub instead but to a user like

207
00:17:23,160 --> 00:17:28,069
they're not an average and users not
this is going to be just as as terrible

208
00:17:28,069 --> 00:17:32,180
as any other certificate validation
error so this is the most frustrating

209
00:17:32,180 --> 00:17:40,510
because it happens so often and because
it's like it really is the closest of

210
00:17:40,510 --> 00:17:45,020
these so close kind of areas so when
they are experimenting with in chrome

211
00:17:45,020 --> 00:17:49,030
this hasn't this hasn't hit canary yet
but I think it's on track to this

212
00:17:49,030 --> 00:17:55,320
quarter is just doing what the user
wanted so instead of hitting an

213
00:17:55,320 --> 00:17:59,350
interstitial where we went to the site
and it says this isn't the site you

214
00:17:59,350 --> 00:18:02,290
wanted to go to you but it's the dub dub
dub version of the same we wanted to go

215
00:18:02,290 --> 00:18:08,710
to we're experimenting with on a
top-level navigation just redirecting to

216
00:18:08,710 --> 00:18:14,590
dub dub dub version and printing a
message in the developer consoles that

217
00:18:14,590 --> 00:18:18,280
the developer will hopefully see there
and know what's going on and no to fix

218
00:18:18,280 --> 00:18:20,639
it but for the end user

219
00:18:20,640 --> 00:18:26,030
they end up just going where they wanted
to go and we feel ok about this because

220
00:18:26,030 --> 00:18:30,770
in a lot of cases chrome already treats
the dub dub version of a site is the

221
00:18:30,770 --> 00:18:35,650
same as the non dub dub dub version so
if you type example.com in the URL bar

222
00:18:35,650 --> 00:18:40,250
chrome feels just fine about redirecting
you to dub dub dub based on other

223
00:18:40,250 --> 00:18:46,690
heuristics so so we felt like this was a
good compromise of user experience and

224
00:18:46,690 --> 00:18:51,600
strict certificate valid valuation and
also we're not on one thing to note here

225
00:18:51,600 --> 00:18:56,090
is that we're not actually bypassing the
certificate error we're just

226
00:18:56,090 --> 00:18:59,500
transparently redirecting to the version
of the site that doesn't have the

227
00:18:59,500 --> 00:19:02,460
certificate error

228
00:19:02,460 --> 00:19:09,290
this is an example of what we're doing
in chrome to try to make HTTPS effective

229
00:19:09,290 --> 00:19:14,500
rather than scary unnecessarily scary 43
users so that we can honestly encourage

230
00:19:14,500 --> 00:19:22,170
every site to go to https without
without damaging the web with some

231
00:19:22,170 --> 00:19:25,940
knowledge in mind about what's going
wrong in a while we were making progress

232
00:19:25,940 --> 00:19:32,160
on these problems and if we pop up one
layer to the application layer we are

233
00:19:32,160 --> 00:19:36,890
doing some things there to address some
of the challenges that that sites that

234
00:19:36,890 --> 00:19:40,840
say they run into even after they get
their certificate chain set up and

235
00:19:40,840 --> 00:19:47,149
correctly validating all clients so in
the web platform other number of things

236
00:19:47,150 --> 00:19:51,490
we can do and I want to start with what
we hear from developers as the most

237
00:19:51,490 --> 00:19:56,850
problematic in the in their applications
when they moved to https another problem

238
00:19:56,850 --> 00:20:02,899
called mixed content so if you haven't
heard this time before the general idea

239
00:20:02,900 --> 00:20:10,330
is that when you load a page over HTTPS
if that page goes and loads of resources

240
00:20:10,330 --> 00:20:16,240
over in secure HTTP we call those
resources mixed content and we tend to

241
00:20:16,240 --> 00:20:19,640
highlight this is a problem because it
can compromise the security of the site

242
00:20:19,640 --> 00:20:20,620
as a whole

243
00:20:20,620 --> 00:20:26,969
when a script or an image is loaded over
and secure HTTP the problem is that it

244
00:20:26,970 --> 00:20:31,860
can be really hard on a large sites you
actually find and fix all instances of

245
00:20:31,860 --> 00:20:36,639
mixed content we hear this from
developers all the time and if you end

246
00:20:36,640 --> 00:20:41,420
up with some mixed content flipping
through on your site crime does does go

247
00:20:41,420 --> 00:20:45,680
to some lengths to try to notify the
user that their security is compromised

248
00:20:45,680 --> 00:20:50,560
so this is an instance of that you I
showed at the beginning of the talk and

249
00:20:50,560 --> 00:20:53,710
I'm just highlighting some of the ways
here that we are notifying the user

250
00:20:53,710 --> 00:20:57,760
about the presence of mixed content so
you can see we downgrade the lock icon

251
00:20:57,760 --> 00:21:02,450
so you don't get a shiny green lock icon
if you have mixed content and we have

252
00:21:02,450 --> 00:21:04,300
these strings bad try to

253
00:21:04,300 --> 00:21:09,100
tell the user and the developer what's
going on and that something's not right

254
00:21:09,100 --> 00:21:15,449
something's not right on it but as I
mentioned you know this is a this is

255
00:21:15,450 --> 00:21:18,810
such that you'd spend a bunch of time
and money to go to a GPS and in your

256
00:21:18,810 --> 00:21:22,530
users are seeing this kind of weird
scary state and they're not really

257
00:21:22,530 --> 00:21:27,690
getting the full benefits of HTTPS so
what we really want what we heard from

258
00:21:27,690 --> 00:21:33,000
developers they wanted was when my
Marines large site they want to wait for

259
00:21:33,000 --> 00:21:38,240
their website to just say to the browser
I intend for all my content to be loaded

260
00:21:38,240 --> 00:21:42,880
over HTTPS and if something slipped
through that is being loaded over in

261
00:21:42,880 --> 00:21:49,090
secure HTTP that was a mistake and I
don't want that to happen so there's

262
00:21:49,090 --> 00:21:53,689
this recent edition which we are
standardizing implementing addition to

263
00:21:53,690 --> 00:22:01,140
the web platform where an HTTP header I
say can basically say exactly that so by

264
00:22:01,140 --> 00:22:05,410
sending this header its value of the
content security policy had her and kind

265
00:22:05,410 --> 00:22:09,420
of security policies actually much more
general mechanism but in this talk I'm

266
00:22:09,420 --> 00:22:13,270
just gonna talk about this specific
usage other but basically by sending

267
00:22:13,270 --> 00:22:18,960
this content security policies upgrade
insecure requests the site is telling

268
00:22:18,960 --> 00:22:23,590
the browser and I intend for all my
content to be loaded over HTTPS and if

269
00:22:23,590 --> 00:22:29,159
you can't load it over HTTPS just block
out so it's sort of a way for the for

270
00:22:29,160 --> 00:22:33,190
the browser to say I don't want any
mixed content everything should be

271
00:22:33,190 --> 00:22:39,830
available over HTTPS so far

272
00:22:42,900 --> 00:22:51,580
it is richard Codey will not upgrade
resources that are crossed so for

273
00:22:51,580 --> 00:23:00,210
example if you're loading images or if
you are loading jQuery from a CD an

274
00:23:00,210 --> 00:23:13,870
insecure requests will upgrade those are
so strict security also won't I believe

275
00:23:13,870 --> 00:23:20,209
won't get rid of mixed content morning
and they're very complicated reasons for

276
00:23:20,210 --> 00:23:27,830
that which I we can talk about it after
if you want a question I think you so

277
00:23:27,830 --> 00:23:32,090
for example you know if you have an
image on your page and this is some you

278
00:23:32,090 --> 00:23:35,550
know maybe you're in news a new site
with hundreds of thousands of pages and

279
00:23:35,550 --> 00:23:40,169
you have some news articles from 2009
where you have a mixed image that you

280
00:23:40,170 --> 00:23:44,380
forgot to upgrade when you when you move
to https if you're sending the upgrade

281
00:23:44,380 --> 00:23:50,430
insecure requests better chrome will
automatically upgrade it for you and

282
00:23:50,430 --> 00:23:58,660
it'll be just as if you typed https
instead of HTTP so this idea of sending

283
00:23:58,660 --> 00:24:02,150
an HTTP header to sort of enhance the
security that you're getting out of

284
00:24:02,150 --> 00:24:08,660
HTTPS can be used to solve completely
different problems as well and one

285
00:24:08,660 --> 00:24:13,340
example of this is public he painting
and I want I'm gonna describe this this

286
00:24:13,340 --> 00:24:17,250
mechanism and a problematic calls and
then talk about what we're doing in

287
00:24:17,250 --> 00:24:18,390
chrome to

288
00:24:18,390 --> 00:24:23,010
a project we have done recently to make
this feature kind of more accessible to

289
00:24:23,010 --> 00:24:26,840
the masses because its previously been
something that we advocated only for

290
00:24:26,840 --> 00:24:30,860
kind of the girls in the Facebooks of
the world and I'll tell you why in a in

291
00:24:30,860 --> 00:24:36,379
a minute so publicly pending in a
nutshell shell is a tool that the web

292
00:24:36,380 --> 00:24:43,170
platform provides that mitigate the
impact when a root CA is compromised to

293
00:24:43,170 --> 00:24:47,700
take little explanation let me I let me
unpack that a little bit when you think

294
00:24:47,700 --> 00:24:51,860
of me she dps on your site you have a
certificate and that's basically a

295
00:24:51,860 --> 00:24:56,810
cryptographic key pair kind of proving
your identity and it's proved this proof

296
00:24:56,810 --> 00:25:03,470
is a form of a signature so it's another
another three signature on your public

297
00:25:03,470 --> 00:25:09,430
key which itself has been signed by what
we call root CA and every browser and

298
00:25:09,430 --> 00:25:13,840
operating system every phone in your
pocket have a list of several hundred

299
00:25:13,840 --> 00:25:18,240
CA's that it trusts to kind of anchor
what we call it

300
00:25:18,240 --> 00:25:25,180
certificate came so the problem at
public keep hitting is trying to solve

301
00:25:25,180 --> 00:25:35,050
is suppose that another another CA goes
rogue or gets compromised and its use

302
00:25:35,050 --> 00:25:42,340
another too difficult for example.com to
this second example.com certificate is

303
00:25:42,340 --> 00:25:48,030
what we call miss issued it was it was
issued by a by a certificate authority

304
00:25:48,030 --> 00:25:51,770
that kind of acting maliciously or not

305
00:25:51,770 --> 00:25:55,450
not honestly and what we would like it
for the browser to be able to recognize

306
00:25:55,450 --> 00:25:59,010
this message you'd certificate and say
hey that's not the real example.com

307
00:25:59,010 --> 00:26:03,590
certificate I can distinguish this their
certificate from the real one that was

308
00:26:03,590 --> 00:26:09,980
issued by the real example.com so it's
in other words it's a form of attack

309
00:26:09,980 --> 00:26:14,700
surface reduction where we want to take
all these hundreds of trusted routier's

310
00:26:14,700 --> 00:26:20,840
and say let's lock it down so that not
any rover compromise Siachen issue a

311
00:26:20,840 --> 00:26:23,840
certificate for anything

312
00:26:24,559 --> 00:26:31,779
so public deepening solves this via an
issue P header that is trust on first

313
00:26:31,779 --> 00:26:37,210
use mechanism delivered from the server
to the browser with a description of

314
00:26:37,210 --> 00:26:40,539
what these sites certificate chain
should look like

315
00:26:40,539 --> 00:26:43,610
so there's this sort of complicated
syntax I'm not going to describe in

316
00:26:43,610 --> 00:26:48,229
detail but the mechanism is basically a
way to describe what the significant

317
00:26:48,230 --> 00:26:53,009
change it look like and then the browser
remembers that description and will in

318
00:26:53,009 --> 00:26:58,590
future rejected connections that don't
match that description so for example

319
00:26:58,590 --> 00:27:03,939
one way to use this is to say I always
expect to issue certificates from this

320
00:27:03,940 --> 00:27:08,350
route CIA and if you ever see a
certificate issued from another route

321
00:27:08,350 --> 00:27:11,539
CIA something's gone wrong and you
should not accept that certificate

322
00:27:23,040 --> 00:27:29,320
it's a hash of the hash of the public
key that you expect to appear somewhere

323
00:27:29,320 --> 00:27:38,179
in the site certificate chain that you
trust yeah yeah it can also be a relief

324
00:27:38,180 --> 00:27:43,800
that can be your actual identity
certificate but very well okay this is

325
00:27:43,800 --> 00:27:49,730
good that we actually so you know my my
next question is what if you kind of get

326
00:27:49,730 --> 00:27:55,550
this wrong and this is why this is why
we have previously only really

327
00:27:55,550 --> 00:28:00,570
recommended this mechanism for six or
eight large sites with like operations

328
00:28:00,570 --> 00:28:03,100
security teams that can that can make
sure they know what they're doing

329
00:28:03,100 --> 00:28:09,159
because you know what if you pay into a
to a leaf certificate and then you lose

330
00:28:09,160 --> 00:28:17,000
control of your key is that we've
certificate or one client kind of build

331
00:28:17,000 --> 00:28:21,630
a certificate chain in a different way
than you expected because the chain that

332
00:28:21,630 --> 00:28:27,350
the that the server serves is not always
the same as the chain that validates and

333
00:28:27,350 --> 00:28:32,159
the public he paying that description of
the certificate chain that the side

334
00:28:32,160 --> 00:28:36,420
expects has to match up to the one of
the clan actually built while validating

335
00:28:36,420 --> 00:28:42,990
the certificate or you know what if
there's just an operational air example

336
00:28:42,990 --> 00:28:47,380
Israel example.com is rolling out a new
certificate and forgets to update some

337
00:28:47,380 --> 00:28:51,960
of its front end servers or is rolling
out new pins and doesn't quite do it

338
00:28:51,960 --> 00:28:52,920
right etcetera

339
00:28:52,920 --> 00:28:57,050
well what we do what we call this
situation is example.com breaking and

340
00:28:57,050 --> 00:29:00,149
software to effectively performed a
denial of service attack against itself

341
00:29:00,150 --> 00:29:04,880
in that it has pinned its certificate
chain to some description that no longer

342
00:29:04,880 --> 00:29:09,990
matches the chain that clients are
actually validating and it's in practice

343
00:29:09,990 --> 00:29:14,090
we hear it's a really really hard to get
this right that's why we've previously

344
00:29:14,090 --> 00:29:17,070
kind of only recommended public
deepening for the googles on the

345
00:29:17,070 --> 00:29:18,800
Facebooks of the world

346
00:29:18,800 --> 00:29:23,540
people with security experts on staff
PKI experts on staff who can who can

347
00:29:23,540 --> 00:29:27,610
really be sure that they're not going to
brace themselves by rolling out publicly

348
00:29:27,610 --> 00:29:32,699
pending you know he's talking about
HTTPS Everywhere for everything every

349
00:29:32,700 --> 00:29:36,260
mom and pop shop and so I want to
mention a project that we've done

350
00:29:36,260 --> 00:29:40,230
recently in chrome to try to make this a
little bit more accessible to the the

351
00:29:40,230 --> 00:29:44,080
mom-and-pop shops of the world and
that's a feature called public deepening

352
00:29:44,080 --> 00:29:48,590
reporting this is actually in the spec
but chrome is the first browser to

353
00:29:48,590 --> 00:29:53,840
implement that instead of serving the
public keep his header you can instead

354
00:29:53,840 --> 00:29:59,459
serve a report only version of the
header where the browser will sort of

355
00:29:59,460 --> 00:30:02,980
treat this is advisory it's sort of like
saying I'm in practice mode this is what

356
00:30:02,980 --> 00:30:07,680
my certificate chain should look like
but if it doesn't if something should go

357
00:30:07,680 --> 00:30:10,840
wrong and you should see a certificate
chain for my site that doesn't match my

358
00:30:10,840 --> 00:30:16,250
description then allow the connection to
go through and just send me a report

359
00:30:16,250 --> 00:30:21,750
about it so it's a way that it can turn
on public deepening and kind of see what

360
00:30:21,750 --> 00:30:25,890
would happen if they are going to be
tossing themselves before they turn it

361
00:30:25,890 --> 00:30:32,790
on for real this is an example of what a
weather report looks like it has you

362
00:30:32,790 --> 00:30:37,310
know the host name that was requested
has some information about the pins and

363
00:30:37,310 --> 00:30:41,679
i notice of notably a has the served and
validated certificate chain so as I

364
00:30:41,680 --> 00:30:45,850
mentioned a couple minutes ago between
the server service may not be the chain

365
00:30:45,850 --> 00:30:49,379
that the clan actually uses to validate
the certificate and that's a really

366
00:30:49,380 --> 00:30:54,160
common cause of public deepening bugs
and that's why I spread present in these

367
00:30:54,160 --> 00:31:00,250
reports are right through those are some
of the things they wanted to talk about

368
00:31:00,250 --> 00:31:06,990
that the web platform can provide when
migrating to https in the special talk

369
00:31:06,990 --> 00:31:09,990
yeah

370
00:31:13,260 --> 00:31:26,760
he pens have have a max age so after a
certain amount of time the browser will

371
00:31:26,760 --> 00:31:31,490
forget so you know if you own if you pay
in your if you plan your keys for a

372
00:31:31,490 --> 00:31:37,450
month you have to wait a month to start
serving New new pens wait a month before

373
00:31:37,450 --> 00:31:42,500
before you rotate your certificate you
can also in fact you have to also pin a

374
00:31:42,500 --> 00:31:49,550
backup key so you might pan like your CA
and then another CAI that you might use

375
00:31:49,550 --> 00:31:53,909
in case you wanna in case you want to
switch and you can you actually have to

376
00:31:53,910 --> 00:32:01,430
have backup him and to try to try to
mediate their the impact of messing

377
00:32:01,430 --> 00:32:10,890
something up so I just want to about one
more product that we have in the works

378
00:32:10,890 --> 00:32:16,860
this is actually launching two beta
today I think and it sort of immunology

379
00:32:16,860 --> 00:32:22,929
that we're asking a lot of developers by
pushing for HTTPS Everywhere Evie you

380
00:32:22,930 --> 00:32:26,920
know I've told you about towards working
on to make it easier but it is a hard

381
00:32:26,920 --> 00:32:32,900
thing for developers to understand on
average and so what we're launching a

382
00:32:32,900 --> 00:32:37,780
new panel and DEF tools and security
panel whose sole purpose is to help

383
00:32:37,780 --> 00:32:43,790
developers find and fix HEPES
configuration problems so this is going

384
00:32:43,790 --> 00:32:49,570
to be now I want to show you a little
bit of what it looks like and but I do

385
00:32:49,570 --> 00:32:54,780
encourage you to go try it China and you
know it is in beta so we are very eager

386
00:32:54,780 --> 00:32:58,020
for feedback we know there are some bugs

387
00:32:58,020 --> 00:33:03,450
but more reports can't can't hurt so
this is what the security panel looks

388
00:33:03,450 --> 00:33:08,830
like and I'll just briefly tell you
what's going on here so so the first

389
00:33:08,830 --> 00:33:12,560
thing you see is that we show that
security properties of the main page

390
00:33:12,560 --> 00:33:16,780
loads of this sort of matches up with
the lock icon and it shows the developer

391
00:33:16,780 --> 00:33:21,190
if the site is in like the green shiny
everything's good state or this neutral

392
00:33:21,190 --> 00:33:27,160
state which is sort of the page was
loaded over HTTPS but krone noticed some

393
00:33:27,160 --> 00:33:32,540
problems that stopped us from marking it
fully secure or the red state where

394
00:33:32,540 --> 00:33:35,600
something went really wrong like we
could invalidate your certificate

395
00:33:35,600 --> 00:33:40,959
everything is bad and horrible kind of
the overall page load that matches up

396
00:33:40,960 --> 00:33:46,040
with the lock icon the security panel is
a place where we can communicate clearly

397
00:33:46,040 --> 00:33:50,050
to developers about upcoming crypto
deprecation this is an ongoing problem

398
00:33:50,050 --> 00:33:55,440
when you set up a GPS it's not fire and
forget you have to keep up to date

399
00:33:55,440 --> 00:34:00,440
keep your configuration up today and so
in this example the certificate chain

400
00:34:00,440 --> 00:34:05,830
has a job one signature which is being
slowly phased out and so this is a place

401
00:34:05,830 --> 00:34:10,719
where we can communicate to developers
about that and finally talked a lot

402
00:34:10,719 --> 00:34:16,879
about mixed content the security panel
we can actually highlight the security

403
00:34:16,880 --> 00:34:20,950
properties of sub resources that have
affected the lock icon or mixed content

404
00:34:20,949 --> 00:34:25,569
and we can actually show the individual
certificate chain details for everything

405
00:34:25,570 --> 00:34:29,659
resource on the page which is something
that we have never done in chrome you I

406
00:34:29,659 --> 00:34:35,190
before so as I mentioned I just want to
give one more plugged as I'm data and

407
00:34:35,190 --> 00:34:40,409
feedback from real developers is really
really valuable so you can feel free to

408
00:34:40,409 --> 00:34:43,300
email me with your thoughts you start

409
00:34:43,300 --> 00:34:48,040
chromium dot org or file a bug on the
chromium bug tracker it'll get three

410
00:34:48,040 --> 00:34:48,820
people and

411
00:34:48,820 --> 00:34:55,170
we would be thrilled to have your
feedback i've talked a lot of as I said

412
00:34:55,170 --> 00:34:58,390
a grab bag of products today but I
promise you there would be a theme and I

413
00:34:58,390 --> 00:35:03,319
think there is a theme which is that on
that everyone says it's ups everywhere

414
00:35:03,320 --> 00:35:10,010
it's a good goal by a really has to be
high quality HTTPS so that's why we're

415
00:35:10,010 --> 00:35:12,330
trying to understand what's going on
from the client's point of you

416
00:35:12,330 --> 00:35:16,970
understand why users may not actually be
able to access HTTPS sites we're trying

417
00:35:16,970 --> 00:35:20,839
to build tools into the web platform to
make sure that developers are able to

418
00:35:20,840 --> 00:35:25,650
migrate their applications securely and
launching the new security panel and Deb

419
00:35:25,650 --> 00:35:29,290
tools because we are asking a lot of
developers by pushing for HCPs

420
00:35:29,290 --> 00:35:34,340
everywhere and we want to make this
landscape comprehensible to them right

421
00:35:34,340 --> 00:35:37,340
thank you very much for listening i'm
happy to answer any more questions

422
00:35:54,910 --> 00:36:01,819
so I don't work on search myself so I
can't say anything to knowledgeable or

423
00:36:01,819 --> 00:36:06,730
official but I know that this is
something that Google search cares a lot

424
00:36:06,730 --> 00:36:15,299
about and there was recently rankings
bump introduced for HTTPS and I'm not

425
00:36:15,299 --> 00:36:22,619
sure how big it is but it's definitely I
know there are supposed to be ways that

426
00:36:22,619 --> 00:36:29,030
you can migrate a GPS without losing
your search ranking I wish I had a good

427
00:36:29,030 --> 00:36:36,309
and i cant i dont have a good resource
off and 2.2 but I am if you maybe come

428
00:36:36,309 --> 00:36:41,670
find me afterwards in the email address
I can ask them people try to tell me

429
00:36:41,670 --> 00:36:44,670
what the resources are

430
00:36:53,580 --> 00:37:02,540
yet some extent we lumped into that
antivirus and firewall software security

431
00:37:02,540 --> 00:37:11,680
category I don't think I have any
numbers offhand about about like proxies

432
00:37:11,680 --> 00:37:16,250
as a category on its own but certainly
anything that relies on a on a root

433
00:37:16,250 --> 00:37:22,070
certificate installed on an end user
device is is problematic and other

434
00:37:22,070 --> 00:37:26,820
little interesting tidbit in that
category is if you've heard of filler

435
00:37:26,820 --> 00:37:34,490
which is a developer toolkit for for
debugging and inspecting US connections

436
00:37:34,490 --> 00:37:38,069
one thing that we found from our dataset
is that it's actually really

437
00:37:38,070 --> 00:37:45,660
depressingly common for malware it to
use it or to to mess with HTTPS

438
00:37:45,660 --> 00:37:53,290
connections so we end up seeing local
proxies like little are used to to to

439
00:37:53,290 --> 00:37:58,140
minimal connections in ways that end up
with false positive it's ups errors

440
00:38:16,240 --> 00:38:25,720
there is actually several checkboxes
within crime there is another check box

441
00:38:25,720 --> 00:38:31,759
I think that you get on install which
which asked if you wanna opt-in to send

442
00:38:31,760 --> 00:38:38,010
general usage metrics to go and so i
general metric like how many times do we

443
00:38:38,010 --> 00:38:43,190
show this page is reported as part of
that program but the reason we had to do

444
00:38:43,190 --> 00:38:49,140
a separate often 444 sending these
certificate reports is that they can I

445
00:38:49,140 --> 00:38:52,279
mean they contain much more sensitive
information like the hostname that the

446
00:38:52,280 --> 00:38:57,930
users trying to visit and and
certificate chains can even contain PII

447
00:38:57,930 --> 00:39:01,480
so for example if you install any
antivirus software

448
00:39:02,800 --> 00:39:08,040
certificate chain can actually have a
email address or your license number in

449
00:39:08,040 --> 00:39:13,570
there in the root certificate so the
optin for certificate chains is kind of

450
00:39:13,570 --> 00:39:19,730
special and that data is subject to much
more intense privacy policies than more

451
00:39:19,730 --> 00:39:24,080
general usage metrics such as just
incrementing encounter every time we

452
00:39:24,080 --> 00:39:27,080
showed that the warning page

453
00:39:49,420 --> 00:39:58,480
I don't know why I don't particularly
want to comment on behalf of Google at

454
00:39:58,480 --> 00:40:07,890
the hall I know that so there's a whole
bunch of stuff and application pipeline

455
00:40:07,890 --> 00:40:14,390
I'm actually not sure if he'll is 1.0 is
in it right now but we do monitor you

456
00:40:14,390 --> 00:40:18,828
know we are we doing like monitor usage
metrics very very closely before

457
00:40:18,829 --> 00:40:28,549
deprecating things and so you know i i I
would be surprised if we would just go

458
00:40:28,549 --> 00:40:33,359
turn off to us one point oh well it's
while the internet still relies on it

459
00:40:33,359 --> 00:40:39,930
but if you wanna talk about it offline I
can tell you that the people who would

460
00:40:39,930 --> 00:40:47,509
be would be the right people to talk to
you about that question

461
00:40:53,359 --> 00:40:54,328
all right thank you so much

