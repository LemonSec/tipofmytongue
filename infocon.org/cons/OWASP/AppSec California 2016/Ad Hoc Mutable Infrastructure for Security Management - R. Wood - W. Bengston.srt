1
00:00:18,460 --> 00:00:23,489
all rights thank you all for coming

2
00:00:23,489 --> 00:00:30,149
my name is robert would we work at a
tech company up in San Francisco called

3
00:00:30,149 --> 00:00:35,019
new health and we're gonna be talking
today about I won't spell out the title

4
00:00:35,019 --> 00:00:39,519
because it's rather long and arduous but
basically a little bit more focused

5
00:00:39,519 --> 00:00:44,180
topic around this whole DevOps and
security marriage in conversation that's

6
00:00:44,180 --> 00:00:50,510
been happening in recent years so the
crux of the stock which will get into a

7
00:00:50,510 --> 00:00:57,178
little bit more is focused on building a
in a completely automated and redeploy

8
00:00:57,179 --> 00:01:02,350
double identity management service /
stack for the company and how we did

9
00:01:02,350 --> 00:01:05,920
that and our plans to open source that
make it available to other companies who

10
00:01:05,920 --> 00:01:11,840
might be in similar situations and talk
about if you're not in a completely 121

11
00:01:11,840 --> 00:01:15,729
similar situation how you might still be
able to use some of the principles from

12
00:01:15,729 --> 00:01:23,570
this so I mentioned we both work in the
security team that knew how we can't

13
00:01:23,570 --> 00:01:26,820
even breathe cloud security and
automation as that's kinda the

14
00:01:26,820 --> 00:01:31,059
engineering culture and you know we have
a lot of Engineers that came from these

15
00:01:31,060 --> 00:01:35,390
companies who also live and breathe this
stuff like the Netflix is the Google's

16
00:01:35,390 --> 00:01:40,950
Microsoft of the world and so we're just
all together trying to solve automation

17
00:01:40,950 --> 00:01:49,869
and security problems very big data
environment so that is us so the problem

18
00:01:49,869 --> 00:01:54,689
statement basically what we're
attempting to solve is that is somewhat

19
00:01:54,689 --> 00:01:59,589
of a hipster company I'll use that term
a little bit in that it's kind of it's

20
00:01:59,590 --> 00:02:04,049
it's this new modern type of company
that basically everything you could

21
00:02:04,049 --> 00:02:10,799
think of runs on some cloud service one
form or another it's you know email is

22
00:02:10,799 --> 00:02:16,440
run out some on Sat solutions product
infrastructures host 9 AWS we really

23
00:02:16,440 --> 00:02:18,950
don't have the concept of a

24
00:02:18,950 --> 00:02:26,319
abusers coming in users being employees
coming into office sitting in a spot in

25
00:02:26,319 --> 00:02:29,849
their cubicle and logging into their
computer that is connected to their

26
00:02:29,849 --> 00:02:34,010
internal network which then grants them
access to some sort of internal network

27
00:02:34,010 --> 00:02:36,590
resources that that allows them to do
their job

28
00:02:36,590 --> 00:02:41,660
we do have an office we do have seats
and we do have laptops but the concepts

29
00:02:41,660 --> 00:02:46,299
that that would typically apply round
internal networks in that negate that

30
00:02:46,299 --> 00:02:50,080
usually exists being the firewall
between the outside world the inside

31
00:02:50,080 --> 00:02:53,739
world being your company that doesn't
really exist here our office is more

32
00:02:53,739 --> 00:02:59,980
like it's like a really big like a
really big Starbucks with free coffee so

33
00:02:59,980 --> 00:03:04,780
basically what we're trying to solve is
is how do we build security how do we

34
00:03:04,780 --> 00:03:11,380
take security into that and what we what
we did is we have we are using Active

35
00:03:11,380 --> 00:03:16,349
Directory for centralized identity
managements are using that to feed feed

36
00:03:16,349 --> 00:03:22,280
single sign-on solution for using that
to drive drive identity for everything

37
00:03:22,280 --> 00:03:27,910
at Nina it's not 100% complete yet the
stack is but the Integration Service

38
00:03:27,910 --> 00:03:32,590
integrations with it or not yet complete
yet and what we're going to be talking

39
00:03:32,590 --> 00:03:41,090
about is how we how we deployed all of
that and where might be useful so show

40
00:03:41,090 --> 00:03:47,370
of hands here how many of you guys come
from a pen testing background or have

41
00:03:47,370 --> 00:03:51,900
done it contest in the past I saw a
pretty decent amount of folks have come

42
00:03:51,900 --> 00:03:55,660
from a pen testing background so how
many times do you end up using the same

43
00:03:55,660 --> 00:04:00,569
exact tricks if you come from a network
interesting background do end up

44
00:04:00,569 --> 00:04:09,638
escalating your way up to domain admin
or a somewhat high-level structure so a

45
00:04:09,639 --> 00:04:16,139
lot of the same and we we've experienced
that as well so the next slide so

46
00:04:16,139 --> 00:04:21,120
traditional setup is that you end up
having in some internal corporate data

47
00:04:21,120 --> 00:04:22,130
center

48
00:04:22,130 --> 00:04:26,349
domain controllers to end up getting
rolled in what we call them special

49
00:04:26,349 --> 00:04:29,729
snowflake ways and they're completely
unplayable

50
00:04:29,729 --> 00:04:34,180
if they went down it's a you know
everyone is hair on fire they don't know

51
00:04:34,180 --> 00:04:38,919
how to handle it it's just not a good
situation for for the organization and

52
00:04:38,919 --> 00:04:43,990
as a result of those things just being
special snowflakes and existing overtime

53
00:04:43,990 --> 00:04:48,099
in evolving over time you end up with a
lot of these problems are just kind of

54
00:04:48,099 --> 00:04:52,919
evolved throughout the lifetime of that
that identity management service being

55
00:04:52,919 --> 00:04:56,589
the domain controller cluster and so you
end up with service account credentials

56
00:04:56,589 --> 00:05:02,210
and sprinkled all over the place service
domain admin credentials are used to to

57
00:05:02,210 --> 00:05:07,219
handle printers are used to provide
provided to vulnerability scanners did

58
00:05:07,219 --> 00:05:11,569
you scan their provided all over the
place and you end up with all of these

59
00:05:11,569 --> 00:05:17,719
weird accounts added to domain admin
groups and therefore one of those if one

60
00:05:17,719 --> 00:05:21,808
of those accounts gets compromised user
has demanded and privileges they can do

61
00:05:21,809 --> 00:05:27,139
whatever they want you also have all of
these weird services that end up getting

62
00:05:27,139 --> 00:05:33,110
connected to the modem connected to a
domain over time that increases the

63
00:05:33,110 --> 00:05:36,509
attack surface and some unnecessary ways
in some places

64
00:05:37,199 --> 00:05:43,919
your users so I D departments have have
evolved to kind of support users and

65
00:05:43,919 --> 00:05:48,258
push up policies to users and we want
all of our workstations join two domains

66
00:05:48,259 --> 00:05:54,499
and administered by no means but as a
result of that if a workstation that is

67
00:05:54,499 --> 00:05:58,499
sitting on an internal network and
therefore connected to an internal

68
00:05:58,499 --> 00:06:02,959
network there's there's a connection
that resides between what is potentially

69
00:06:02,959 --> 00:06:07,499
an untrusted device even though it's
being managed I'm sure we all have

70
00:06:07,499 --> 00:06:12,289
familiarity with users sometimes doing
foolish things or you know whether

71
00:06:12,289 --> 00:06:18,438
intentionally or unintentionally or you
end up having seen attacker walks into

72
00:06:18,439 --> 00:06:23,499
the office or some of get something else
running on the network like if you end

73
00:06:23,499 --> 00:06:27,189
up with somebody walking in the front
door plugging into your network and a

74
00:06:27,189 --> 00:06:31,740
lot of cases they can just get on and
with thats with that connection either

75
00:06:31,740 --> 00:06:36,129
on a user's workstation or just on the
internal network they can they can see

76
00:06:36,129 --> 00:06:39,550
the domain controller interactive the
domain controller and that connectivity

77
00:06:39,550 --> 00:06:42,340
is another problem that ends up leading
you

78
00:06:42,340 --> 00:06:47,448
really to through some form or another
in some chain of exploits end up taking

79
00:06:47,449 --> 00:06:53,630
over the dummy and therefore the network
and these last ones are are really built

80
00:06:53,630 --> 00:06:57,949
on the fact that the traditional domain
controllers having evolved over time out

81
00:06:57,949 --> 00:07:02,199
of being originally special handled
snowflakes and having some other hand

82
00:07:02,199 --> 00:07:03,919
rolled snowflakes to back it up

83
00:07:03,919 --> 00:07:09,229
there's really no overtime that the
known state of those domain controllers

84
00:07:09,229 --> 00:07:14,510
and just the identity service as a whole
the amount that you know about it goes

85
00:07:14,510 --> 00:07:19,190
down over time and if you have to patch
it if you have to do something critical

86
00:07:19,190 --> 00:07:23,540
to administer it it's usually a really
scary thing to do that because you have

87
00:07:23,540 --> 00:07:28,130
to schedule downtime you don't really
know for sure what those patches are

88
00:07:28,130 --> 00:07:34,210
going to do it's it's a scary thing and
as a result of that we've both witnessed

89
00:07:34,210 --> 00:07:36,960
a lot of companies coming from a
consulting background where

90
00:07:36,960 --> 00:07:42,229
administrators just won't do that stuff
because the fear of bringing down a

91
00:07:42,229 --> 00:07:46,760
service that's critical for the company
is usually worse then leaving an

92
00:07:46,760 --> 00:07:51,530
unpatched and therefore having the risk
of some other critical vulnerability

93
00:07:51,530 --> 00:07:56,320
sitting there so it's it's a it's a
balance between the Company shall the

94
00:07:56,320 --> 00:08:00,889
integrity of information on the
environment and the availability of the

95
00:08:00,889 --> 00:08:06,270
environment if you start to think about
three properties of security and on top

96
00:08:06,270 --> 00:08:10,950
of that we have crack a joke here
looking for just one more one more

97
00:08:10,950 --> 00:08:19,479
exploits so this is kind of that what
we've seen in two as time has gone on so

98
00:08:19,479 --> 00:08:24,530
I mentioned at the end of last slide
that you know the list of attacks on

99
00:08:24,530 --> 00:08:29,900
domain controllers and just eighty
environments we see this stuff at

100
00:08:29,900 --> 00:08:34,029
security conferences over and over and
over and over again there's always new

101
00:08:34,029 --> 00:08:38,049
stuff coming out there's a patch Tuesday
as it is I think there's always new

102
00:08:38,049 --> 00:08:42,260
vulnerabilities coming out and so
there's this never-ending game of cat

103
00:08:42,260 --> 00:08:45,870
and mouse and with all of the other
problems that exist there and new

104
00:08:45,870 --> 00:08:50,630
vulnerabilities constantly coming out we
end up as administrators just constantly

105
00:08:50,630 --> 00:08:52,740
slapping band-aids on to our

106
00:08:52,740 --> 00:08:58,430
under our identity service stack being
the domain controllers which is which is

107
00:08:58,430 --> 00:09:02,029
unfortunate because the the issues
around connectivity and the complexity

108
00:09:02,029 --> 00:09:06,890
with services constantly being
integrated with those things those are

109
00:09:06,890 --> 00:09:10,959
still there the underlying problems so
to speak are still there they're not

110
00:09:10,959 --> 00:09:14,880
necessarily problems they're just design
challenges that we have to work around

111
00:09:14,880 --> 00:09:20,089
and therefore we just end up getting
worse in interactively worse and worse

112
00:09:20,089 --> 00:09:25,980
over time which is an unfortunate state
to be in and on top of that there's

113
00:09:25,980 --> 00:09:26,959
anyone in here

114
00:09:26,959 --> 00:09:30,489
dealt with any kind of forensics or data
breach that they've had to either of

115
00:09:30,490 --> 00:09:35,600
their own company deal with or a
consultant doing forensics for another

116
00:09:35,600 --> 00:09:41,880
firm Johanns so if you have gone up so
so you guys are probably familiar with

117
00:09:41,880 --> 00:09:46,850
the fact that if if a Windows
environment gets breached there's almost

118
00:09:46,850 --> 00:09:53,120
no good wages we truly know if there
isn't some some form of persistence in

119
00:09:53,120 --> 00:09:57,200
that Windows environment like there's so
many ways that you can back dori system

120
00:09:57,200 --> 00:10:03,670
it's not as its not as obvious as you
know some like actually executable

121
00:10:03,670 --> 00:10:10,990
running on ANBU every time that reaches
out to you know evil dot com some weird

122
00:10:10,990 --> 00:10:14,820
port like it's it's not that
straightforward there's so many weird

123
00:10:14,820 --> 00:10:18,600
things that can happen in like attackers
if they crack credentials if they're in

124
00:10:18,600 --> 00:10:22,690
that position of demanding domain admin
and they just crack credentials and

125
00:10:22,690 --> 00:10:26,720
you're not rotating credentials than
they could just be using legitimate

126
00:10:26,720 --> 00:10:33,050
service accounts to still gain access to
things so we're here to tell you there's

127
00:10:33,050 --> 00:10:38,920
a better way if you are a hipster
company like us so what we did and we

128
00:10:38,920 --> 00:10:42,390
can go to the next slide is this
automation stack that we built as I

129
00:10:42,390 --> 00:10:47,939
mentioned we are running everything in
the AWS infrastructure as a Service

130
00:10:47,940 --> 00:10:52,920
realm of our product infrastructure and
our identity management infrastructure

131
00:10:52,920 --> 00:10:58,790
structure is in is in AWS and the

132
00:10:58,790 --> 00:11:02,770
the these are some of the high level
components that we use in our automation

133
00:11:02,770 --> 00:11:08,310
stack so is anyone familiar with cloud
formation AWS cloud formation so if you

134
00:11:08,310 --> 00:11:19,569
folks down at any enemy to remain hands
and so formation is a templating system

135
00:11:19,570 --> 00:11:25,910
date of urs provides basically you feed
it as input adjacent amply and that

136
00:11:25,910 --> 00:11:31,300
simply defines what either your entire
infrastructure a piece of your

137
00:11:31,300 --> 00:11:36,130
infrastructure should look like so you
can define BBC's you can define subnets

138
00:11:36,130 --> 00:11:40,830
you can define I am policies you can
find as three buckets and subsequent

139
00:11:40,830 --> 00:11:44,930
policies that would be attached that
bucket you can define policies around

140
00:11:44,930 --> 00:11:48,800
ec2 instances and how they get booted up
you can find all these wonderful things

141
00:11:48,800 --> 00:11:53,120
about how your AWS environment should
behave and then all that stuff lives in

142
00:11:53,120 --> 00:11:57,140
source code or in source control and
it's nice need audible and there's

143
00:11:57,140 --> 00:12:00,980
there's version control behind it that
you can go back and audit you can roll

144
00:12:00,980 --> 00:12:05,950
that you can do all these wonderful
things the downside you confirmation is

145
00:12:05,950 --> 00:12:09,490
that it's it's kinda like a bull in a
china shop carrying a sledgehammer it's

146
00:12:09,490 --> 00:12:15,850
it's a very very powerful tool but if
you don't manage it properly and you

147
00:12:15,850 --> 00:12:20,540
make small changes in your templates are
organized correctly you can blow away

148
00:12:20,540 --> 00:12:23,760
entire parts of your infrastructure you
can like you can score a lot of things

149
00:12:23,760 --> 00:12:27,930
up really really quickly with
confirmation and so we'll talk a little

150
00:12:27,930 --> 00:12:32,430
bit about how to layer templates in a
more say in ways that way you're not

151
00:12:32,430 --> 00:12:37,219
that way you can make small changes to
your infrastructure that don't they

152
00:12:37,220 --> 00:12:42,560
don't affect anything below the layer at
which is organized for instance the the

153
00:12:42,560 --> 00:12:46,089
parts of your infrastructure that should
not change like the BBC's in the subnets

154
00:12:46,090 --> 00:12:51,470
and such are using chef and
bootstrapping scripts to to do server

155
00:12:51,470 --> 00:12:59,210
provisioning and server configuration
GPO with respect to the with respect to

156
00:12:59,210 --> 00:13:03,900
the domain controller so these three
components here primarily chef in GPO

157
00:13:03,900 --> 00:13:10,189
for the domain controllers for anyone
who's not familiar chef is jeff is a

158
00:13:10,190 --> 00:13:15,290
configuration management and automation
tool so in in a very similar way that we

159
00:13:15,290 --> 00:13:19,099
define our infrastructure being our
network infrastructure with confirmation

160
00:13:19,100 --> 00:13:24,050
we define how we want service to look
and feel and be configured with Chef and

161
00:13:24,050 --> 00:13:28,469
so after club formation runs then ship
will run take care of the server

162
00:13:28,470 --> 00:13:33,210
provisioning we dropping a GPO policy
that says any more granular fashion how

163
00:13:33,210 --> 00:13:37,610
exactly a domain controller or forced to
do a controller should be configured and

164
00:13:37,610 --> 00:13:44,130
then we have a lot of repeatable policy
setting set of policies and settings on

165
00:13:44,130 --> 00:13:48,480
a domain controllers that we can spend
up to bend down and then with regards to

166
00:13:48,480 --> 00:13:53,810
access to that environment accident when
I say access to them talk about access

167
00:13:53,810 --> 00:13:57,630
to administration administrative
capabilities to the environment we're

168
00:13:57,630 --> 00:14:01,720
using do a security for anyone who's not
familiar with its cloud-based

169
00:14:01,720 --> 00:14:06,270
multi-factor authentication to all of
you can you protect RDP access you can

170
00:14:06,270 --> 00:14:12,290
protect us say services you protect any
number of web apps it's pretty slick so

171
00:14:12,290 --> 00:14:19,520
using that to protect all of the the
ingress 44 this stack so these are just

172
00:14:19,520 --> 00:14:25,160
a couple of the players that come into
play with with cloud formation templates

173
00:14:25,160 --> 00:14:30,860
so as I mentioned there's there's things
at the bottom and this is not this

174
00:14:30,860 --> 00:14:36,070
non-exhaustive list and we'll we'll chat
about this a little bit more in his when

175
00:14:36,070 --> 00:14:39,350
he starts walking through this in a
little bit more detail the actual

176
00:14:39,350 --> 00:14:43,720
process of spinning up spending down
infrastructure but these are just some

177
00:14:43,720 --> 00:14:49,150
of the ways that you can organize by
service or by function confirmation

178
00:14:49,150 --> 00:14:58,040
templates so the question becomes for
you know if we as as I T administrators

179
00:14:58,040 --> 00:15:02,870
are as people administering and
defending networks why we would want to

180
00:15:02,870 --> 00:15:07,500
spend the time to to automate all of
this stuff so there's obvious

181
00:15:07,500 --> 00:15:12,010
performance benefits you know the the
DevOps community will talk about this at

182
00:15:12,010 --> 00:15:16,150
length the fact that you can you can do
rapid deployments and redeployment of

183
00:15:16,150 --> 00:15:21,990
components of your infrastructure you
know they typically talk about that like

184
00:15:21,990 --> 00:15:23,410
the Etsy Groupon

185
00:15:23,410 --> 00:15:27,939
world the plane application code for
their their products but why can't we

186
00:15:27,940 --> 00:15:32,990
take the same tools and use them for on
services it's just lost not really

187
00:15:32,990 --> 00:15:37,569
thinking about it that way as a result
of everything living in source control

188
00:15:37,569 --> 00:15:40,199
you can audit it really really easily

189
00:15:40,199 --> 00:15:44,849
you don't need all of these crazy agents
that need to be installed on systems and

190
00:15:44,850 --> 00:15:49,750
constantly running in monitoring things
like a bastardized version of antivirus

191
00:15:49,750 --> 00:15:55,660
installed on everything and watching it
for your weirdness you could do that as

192
00:15:55,660 --> 00:15:59,420
a as an additional as an additional
layer control in your environment but

193
00:15:59,420 --> 00:16:03,920
really the the state of your servers
should live within the source code that

194
00:16:03,920 --> 00:16:08,219
defines how that servers to be provision
and when you have those things you can

195
00:16:08,220 --> 00:16:13,129
added changes over time from deployment
to deployment you can build winters so

196
00:16:13,129 --> 00:16:18,290
that every time every time a
configuration is to be changed you

197
00:16:18,290 --> 00:16:21,819
against that winter and that lender
could be mapped to some kind of

198
00:16:21,819 --> 00:16:25,620
regulatory compliance standard it could
be mapped to internal security policy

199
00:16:25,620 --> 00:16:32,230
really whatever you want to do but as
whenever it changes made to that you run

200
00:16:32,230 --> 00:16:36,310
those set of automated checks if you get
any flags you investigate why that is

201
00:16:36,310 --> 00:16:41,719
and of course you have a predictable
state overtime and that's that's kind of

202
00:16:41,720 --> 00:16:46,310
the benefit from a performance
standpoint and the security benefits are

203
00:16:46,310 --> 00:16:49,239
almost exactly like we also inherit all
of these things

204
00:16:49,240 --> 00:16:57,029
strip we also have additional security
benefits here so the fact that we can

205
00:16:57,029 --> 00:17:01,319
spin up spin down infrastructure
whenever we wanted to push of a button

206
00:17:01,319 --> 00:17:05,928
because everything is automated in a
beautiful our administrative

207
00:17:05,929 --> 00:17:11,439
infrastructure only needs to be up when
we needed to be up so how many times

208
00:17:11,439 --> 00:17:15,929
like the folks that have familiarity
dealing with administering domain

209
00:17:15,929 --> 00:17:20,549
controllers or other high availability
systems in our experience anyways in

210
00:17:20,549 --> 00:17:24,809
this this could vary between company to
company but folks usually are logging

211
00:17:24,809 --> 00:17:29,590
into those systems constantly to change
things because they're high availability

212
00:17:29,590 --> 00:17:34,470
because they demand high availability
you don't want to be screen with things

213
00:17:34,470 --> 00:17:35,190
that could impact

214
00:17:35,190 --> 00:17:38,600
fact that availability it's the same
principle as patching it potentially

215
00:17:38,600 --> 00:17:39,810
causing it to go down

216
00:17:39,810 --> 00:17:44,210
potentially breaking something that
fewer of screwing something up for doing

217
00:17:44,210 --> 00:17:44,530
that

218
00:17:44,530 --> 00:17:48,410
making that one configuration change the
cause of the whole thing to set on fire

219
00:17:48,990 --> 00:17:54,720
it's a scary thing so why do we why do
we need the capability to administer it

220
00:17:54,720 --> 00:18:01,670
sitting up and potentially susceptible
to attack 24 7 365 we argue that we

221
00:18:01,670 --> 00:18:07,810
don't and so therefore using cloud
formation and chef and bootstrapping

222
00:18:07,810 --> 00:18:14,020
scripts and such what we what we've
built really centers around with their

223
00:18:14,020 --> 00:18:19,670
infrastructure separated in setting off
an AWS complete with segmented from from

224
00:18:19,670 --> 00:18:25,990
the world as we know it we don't have
BPN access network routes network routes

225
00:18:25,990 --> 00:18:30,350
controlled by security groups we don't
even have that stuff available if it's

226
00:18:30,350 --> 00:18:35,010
not needed and so we're using the
concepts presented here to spin up an

227
00:18:35,010 --> 00:18:39,190
infrastructure for only time we need to
administer a service being the identity

228
00:18:39,190 --> 00:18:43,800
management service and then we spin down
afterwards so there's no there's no

229
00:18:43,800 --> 00:18:48,330
lagging time that a VPN is sitting out
there waiting to be waiting to be taken

230
00:18:48,330 --> 00:18:52,750
over by you know some 30 days anything
like that so if we if we have is your

231
00:18:52,750 --> 00:18:56,430
day that comes out we don't have to
worry about you know we can we can look

232
00:18:56,430 --> 00:19:01,160
at our configuration management that way
and deployed in a test environment make

233
00:19:01,160 --> 00:19:06,880
sure we're not susceptible to said 0 day
or just leave leave that connection down

234
00:19:06,880 --> 00:19:12,580
until a patch sorted out or workaround
is developed and published what have you

235
00:19:12,580 --> 00:19:16,460
so we don't have to leave ourselves
susceptible to those things and we don't

236
00:19:16,460 --> 00:19:21,360
have to leave ourselves acceptable today
we forgot that system existed so just

237
00:19:21,360 --> 00:19:26,629
kind of lived on and became vulnerable
overtime as another that's another easy

238
00:19:26,630 --> 00:19:30,350
way in for a lot of attackers as they
just find some system that and it's not

239
00:19:30,350 --> 00:19:36,790
stuck away from the typical typical
enterprise I T management's umbrella

240
00:19:36,790 --> 00:19:40,930
that gets created over time and then you
just have these special snowflake

241
00:19:40,930 --> 00:19:46,490
sitting on the world with a bunch of
customer data access to something I

242
00:19:46,490 --> 00:19:47,860
mentioned this before but

243
00:19:47,860 --> 00:19:52,590
basically with everything living in
source code we can of course back we can

244
00:19:52,590 --> 00:19:57,169
of course I did that with very focused
static analysis to audit these things

245
00:19:57,170 --> 00:20:01,320
you don't need these big heavy way
fortified area codes and things like

246
00:20:01,320 --> 00:20:06,439
that you really just need simple python
scripts and such or you know whatever

247
00:20:06,440 --> 00:20:11,130
your your automation language of choices
to just check that what you see in

248
00:20:11,130 --> 00:20:16,440
source is what you expect to see or
check for the presence of potentially

249
00:20:16,440 --> 00:20:23,590
odd known security risks and of course
with everything living in source you can

250
00:20:23,590 --> 00:20:29,409
enforce you can afford to get checking
reviews that lets say will want to make

251
00:20:29,410 --> 00:20:34,200
a change your identity management snack
and we need to have another manual peer

252
00:20:34,200 --> 00:20:38,549
review of any changes to that step and
so when he checks that change in to get

253
00:20:38,549 --> 00:20:43,600
they can go through it go through manual
peer review by me or another member of

254
00:20:43,600 --> 00:20:48,110
our team and where you can even have it
be across team collaboration things that

255
00:20:48,110 --> 00:20:52,010
way you don't have you don't have folks
just you know tapping their neighbor on

256
00:20:52,010 --> 00:20:55,530
the shoulder and saying you know hey
buddy can you can you just proved that

257
00:20:55,530 --> 00:20:59,220
really quickly I just want to get it
just want to get into production you can

258
00:20:59,220 --> 00:21:05,340
actually enforce checks and balances
through this kind of process so I'm

259
00:21:05,340 --> 00:21:08,290
gonna hand it over to will he's gonna do
a little bit more detailed walkthrough

260
00:21:08,290 --> 00:21:18,710
so mention it's really cool stuff opens
the world to new unique ways of

261
00:21:18,710 --> 00:21:24,210
preventing your infrastructure from
being exploited or potentially expletive

262
00:21:24,210 --> 00:21:28,960
for too long with any advanced
persistent threat there they tend to

263
00:21:28,960 --> 00:21:32,960
move slowly to be undetected so what
happens if you are completely wrong your

264
00:21:32,960 --> 00:21:36,780
stack every week that advanced
persistent threat loses their

265
00:21:36,780 --> 00:21:41,299
persistence if they have exported you
every week physically so you can choose

266
00:21:41,299 --> 00:21:45,668
to enjoy our sector will walk through
here we could ideally every evening

267
00:21:45,669 --> 00:21:50,049
reroll identity management stack and
have a complete Active Directory

268
00:21:50,049 --> 00:21:54,770
identity management stack brand new
every morning when we walk in the office

269
00:21:54,770 --> 00:21:58,930
so if you exported as the night before
you have to exploit us again

270
00:21:58,930 --> 00:22:02,920
next day passed Tuesday comes around all
those patches are automatically applied

271
00:22:02,920 --> 00:22:06,740
when we bring the new hampshire up and
now you're having to find a new way in

272
00:22:06,740 --> 00:22:14,160
their scenes from an attack perspective
200 if you're building your images off

273
00:22:14,160 --> 00:22:18,390
this golden image and I can get in and I
can you build back towards in the golden

274
00:22:18,390 --> 00:22:21,520
image that I have a permit back door
what happens if we build our golden

275
00:22:21,520 --> 00:22:22,190
image

276
00:22:22,190 --> 00:22:26,090
new every time and with things that
we're doing here in a walk through these

277
00:22:26,090 --> 00:22:31,439
in a little more detail here in a second
we can rebuild our in our images that we

278
00:22:31,440 --> 00:22:36,560
base things off where if you think
you're going to exploit us through 2014

279
00:22:36,560 --> 00:22:41,330
images you're really gonna go have to
back door Amazon image first because of

280
00:22:41,330 --> 00:22:49,560
all our best in my eyes are based off of
that I'm so you have a bigger target you

281
00:22:49,560 --> 00:22:55,340
know that you have to actually bigger
hurdle to get us in that case you've got

282
00:22:55,340 --> 00:23:02,899
everyone because everyone else is using
them as on images for the most part not

283
00:23:02,900 --> 00:23:06,030
I don't know too many companies are
building a miles from scratch in

284
00:23:06,030 --> 00:23:11,310
uploading them into the cloud custom
they're they're basing things off of

285
00:23:11,310 --> 00:23:19,120
known good proven true and my eyes and
modifying the Commission are our staff

286
00:23:19,120 --> 00:23:24,590
and how we're doing it so in our
audience tech we haven't only on VPN you

287
00:23:24,590 --> 00:23:28,449
should only have access to get two or
eighty if you need to get to the

288
00:23:28,450 --> 00:23:33,760
minister if you need a remote desktop
into city infrastructure you're gonna

289
00:23:33,760 --> 00:23:37,980
have to have a VPN access and route to
that lady that security group for the

290
00:23:37,980 --> 00:23:42,560
the port 3389 so I can be available at
certain times that EP and won't exist

291
00:23:42,560 --> 00:23:46,840
unless it actually needs to exist in
with cloud formation in a matter of five

292
00:23:46,840 --> 00:23:50,980
minutes I can press a button and the DPN
be up and running with our keys ready to

293
00:23:50,980 --> 00:23:51,920
go

294
00:23:51,920 --> 00:23:56,310
protected by two factor authentication
technologies and all sorts of different

295
00:23:56,310 --> 00:24:02,139
things in a known true secure state so
that we can control ins and outs of our

296
00:24:02,140 --> 00:24:08,360
BBC at all times with RVP and we have a
dedicated network stack so really

297
00:24:08,360 --> 00:24:10,668
pushing routes to certain people on a
VPN

298
00:24:10,669 --> 00:24:14,379
and those routes only exist based on
security groups that are set within the

299
00:24:14,379 --> 00:24:19,059
DVC and any additional security groups
that are applied the instances within

300
00:24:19,059 --> 00:24:27,359
the BBC itself when every role or delete
a stack whatever changes we've made have

301
00:24:27,359 --> 00:24:31,769
automatically get rolled back and
there's any areas that we create in

302
00:24:31,769 --> 00:24:37,230
pushing a stack that violate Amazon
policy or any of our internal policies

303
00:24:37,230 --> 00:24:42,090
they get on a roll back to know that
state we use hash court packard to build

304
00:24:42,090 --> 00:24:47,600
customized also will take a good Amazon
mi push our own scripts

305
00:24:48,359 --> 00:24:53,619
want forwarders a duo you ever whatever
else hardening want to do our to build

306
00:24:53,619 --> 00:24:59,709
our custom nuna mi and then make that
available to our the PC in order to run

307
00:24:59,710 --> 00:25:05,789
instances off of its really cool stuff
it's goes right along side back to the

308
00:25:05,789 --> 00:25:10,690
code reviews standpoint we don't have to
go into the AMI and manly look around to

309
00:25:10,690 --> 00:25:15,149
see what's installed we can go look at
the source code file JSON template and

310
00:25:15,149 --> 00:25:21,609
see ok this ami is built based off this
basic been to image it has do and saw it

311
00:25:21,609 --> 00:25:27,730
has these default users it has a spot
for dinner being said to this we tear

312
00:25:27,730 --> 00:25:34,119
down this it's in less however you want
to customize it its code of you we

313
00:25:34,119 --> 00:25:39,418
cannot we adopted DevOps perspective in
that we can have automated build

314
00:25:39,419 --> 00:25:44,440
validation if if things are outside of
our the policy rules that we define that

315
00:25:44,440 --> 00:25:48,259
can automatically be rejected on there
is not a manual process we build

316
00:25:48,259 --> 00:25:54,029
automation into that as well and with
the adopting latest AWS technologies we

317
00:25:54,029 --> 00:25:58,570
can actually increase volumes do some
really cool things it not many people

318
00:25:58,570 --> 00:26:03,999
are doing yet and as bob mentioned chef
be trippin so a lot of the Windows

319
00:26:03,999 --> 00:26:08,779
environments we don't want to go into
manually stands up ourselves up for

320
00:26:08,779 --> 00:26:14,119
instance and they have chef finish that
be traveling for us

321
00:26:14,850 --> 00:26:19,510
and even our chef server is be tripped
so will be trapped herself and India

322
00:26:19,510 --> 00:26:23,850
trip everything else I'm pretty cool
stuff so at any time if we ever felt

323
00:26:23,850 --> 00:26:28,909
like we were in a not get stay in our
identity management stack we could press

324
00:26:28,910 --> 00:26:34,490
the Delete button and redeploy in
above-mentioned forensics earlier if we

325
00:26:34,490 --> 00:26:38,710
ever felt we were in a state that we
don't know what happened we don't have

326
00:26:38,710 --> 00:26:44,200
time to investigate at risk of something
else being exploited we can take

327
00:26:44,200 --> 00:26:49,520
snapshots our entire environment delete
it set up a new instance and then go

328
00:26:49,520 --> 00:26:53,680
take the snapshots into our forensics
investigation also those I'm so we don't

329
00:26:53,680 --> 00:26:57,570
have to keep our exploded environment up
and running or keep anything down for an

330
00:26:57,570 --> 00:27:02,450
extended period of time leaving our
users unavailable to do work we can do

331
00:27:02,450 --> 00:27:08,050
things really rapid and move forward and
make progress without halting our

332
00:27:08,050 --> 00:27:09,480
production at work

333
00:27:09,480 --> 00:27:15,270
dimension with the with the forensics is
so we do restrict network egress on all

334
00:27:15,270 --> 00:27:19,210
of the domain controllers and basically
everything in this stack except you

335
00:27:19,210 --> 00:27:24,490
selects whitelisted waitlisted targets
that are there are customers of the

336
00:27:24,490 --> 00:27:31,060
service of the identity service so with
that if an attacker to compromise one of

337
00:27:31,060 --> 00:27:34,879
these servers they have to figure out a
way to extol tree any data or get out of

338
00:27:34,880 --> 00:27:39,620
the AWS environment since it's not a
server in a closet in some mom-and-pop

339
00:27:39,620 --> 00:27:44,060
shop they can't just stick USB Drive in
everything that you as being walk out

340
00:27:44,060 --> 00:27:48,379
the front door they do have to figure
out intelligent way to get out and as

341
00:27:48,380 --> 00:27:52,970
well mentioned if we can just destroy it
on a daily basis and stand back up to a

342
00:27:52,970 --> 00:27:56,320
known good state that they lose all of
that progress and they would have to

343
00:27:56,320 --> 00:28:00,040
figure out another way in and by that
time did the network routes and

344
00:28:00,040 --> 00:28:03,770
everything to even get to it are are
gone because we wouldn't be in ministry

345
00:28:03,770 --> 00:28:06,770
and so

346
00:28:12,400 --> 00:28:20,690
if it doesn't we can be exploited
everyday I'm so if there's zero days

347
00:28:20,690 --> 00:28:27,070
after using we're still susceptible to
that but we the attackers would be

348
00:28:27,070 --> 00:28:30,179
forced to change their tactics and
techniques that have to move a lot

349
00:28:30,180 --> 00:28:35,350
faster and they may not be used to that
so we got them off that way but the fact

350
00:28:35,350 --> 00:28:40,750
that if they're using a 30 day that they
were able to execute with it when a

351
00:28:40,750 --> 00:28:45,210
certain that workout was there and then
the next regrets not there then we could

352
00:28:45,210 --> 00:28:51,160
protect ourselves from that but yes it
insolvency had a problem until patches

353
00:28:51,160 --> 00:29:00,340
not entirely there's some mitigation
techniques but yeah we've seen that the

354
00:29:00,340 --> 00:29:05,949
attack would take more than one day to
get into our infrastructure find what

355
00:29:05,950 --> 00:29:08,950
they're looking for and get that data

356
00:29:12,740 --> 00:29:17,450
and that's why some like that we have
our advanced monitoring solutions in

357
00:29:17,450 --> 00:29:24,230
place to detect that something's not
right so it doesn't necessarily protect

358
00:29:24,230 --> 00:29:29,240
us against a super advanced attack you
know motions insider that knows our

359
00:29:29,240 --> 00:29:36,910
infrastructure is where things are they
would have to know our maintenance

360
00:29:36,910 --> 00:29:41,630
cycles that have to know when we're
planning to do things but since there

361
00:29:41,630 --> 00:29:45,070
aren't ways into our directory all the
time

362
00:29:45,070 --> 00:29:55,409
architects surfaces severely limited
compared to other so we had only on VPN

363
00:29:55,410 --> 00:30:00,020
which is up only when we needed ministry
things dedicated networks taxes are

364
00:30:00,020 --> 00:30:04,980
pushed out with that DPN and whatever
instances we have rolled into your

365
00:30:04,980 --> 00:30:11,170
audience tickets well this includes your
BBC's or subnets our routes in and out

366
00:30:11,170 --> 00:30:15,170
public ratting internal routing tables
we have a net device for internal

367
00:30:15,170 --> 00:30:20,679
servers that need to get updates through
tuesday or to be so serve the needs of

368
00:30:20,679 --> 00:30:23,780
poor updates to distribute out to the
rest of the environment is very

369
00:30:23,780 --> 00:30:26,690
important for backing of known
configuration States

370
00:30:26,690 --> 00:30:33,710
configuration scripts like that we have
dynamic network routes very audible

371
00:30:35,240 --> 00:30:39,580
we're going to try to run through the
movie real quick that show you that not

372
00:30:39,580 --> 00:30:43,780
only is it a durable from the standpoint
that from a code of you can basically do

373
00:30:43,780 --> 00:30:47,920
secure code review on your entire
infrastructure and what your images look

374
00:30:47,920 --> 00:30:53,660
like from a compliance standpoint from a
security standpoint from a known good

375
00:30:53,660 --> 00:31:00,740
corporate these this sort of port open
on this device would break corporate

376
00:31:00,740 --> 00:31:06,280
policy type deal but you can also
configure AWS to do automated checks for

377
00:31:06,280 --> 00:31:12,510
that is dumb boxes thrown up during
these periods of time with this port

378
00:31:12,510 --> 00:31:13,360
open to the world

379
00:31:13,360 --> 00:31:20,059
automatically terminate that so we don't
have to be there constantly monitoring

380
00:31:20,059 --> 00:31:21,590
we have things that do

381
00:31:21,590 --> 00:31:28,350
for us or we as shown in the demo are no
good state thats checked in with getting

382
00:31:28,350 --> 00:31:32,629
configuration managed we can actually
run that every day if we wanted to make

383
00:31:32,630 --> 00:31:36,510
sure that no changes have been pushed to
the system because you're pushing stacks

384
00:31:36,510 --> 00:31:43,279
the confirmation of yes can check and
see that state versus what you're trying

385
00:31:43,279 --> 00:31:47,690
to push again and if there's a need to
any changes I've made a change that bob

386
00:31:47,690 --> 00:31:50,630
didn't know about and then he went to
run it he would see that change without

387
00:31:50,630 --> 00:32:03,539
having to go into Amazon to look at that
and with Amazon command line we can

388
00:32:03,539 --> 00:32:09,500
programmatically query what our
corporation or corporate network looks

389
00:32:09,500 --> 00:32:13,630
like what instances we have running what
security guards are out there and run

390
00:32:13,630 --> 00:32:19,409
those against a set of policies that we
are there any IP cedars it exists

391
00:32:19,409 --> 00:32:23,309
outside of what we have clearly defined
are there any ports open that shouldn't

392
00:32:23,309 --> 00:32:29,230
be opened if we have 422 opened is it
only from the VPN security group or

393
00:32:29,230 --> 00:32:33,020
their innocence is open to the world
that violate our policies automated

394
00:32:33,020 --> 00:32:40,158
checks automated alerts automated
terminations if we deem appropriate so

395
00:32:40,159 --> 00:32:45,720
security code review very nice we've got
a lot of things in the past

396
00:32:45,720 --> 00:32:49,720
did you mean to have this port open did
you mean open these ports from the

397
00:32:49,720 --> 00:32:55,659
security group this is a cyclical
inclusion on security groups do you know

398
00:32:55,659 --> 00:33:00,179
what that really means things like that
and Bob talked about cross team

399
00:33:00,179 --> 00:33:04,140
collaboration in those reviews a lot of
times it's not just a review amongst the

400
00:33:04,140 --> 00:33:08,429
security team is a review its security
some people from engineering and DevOps

401
00:33:08,429 --> 00:33:13,809
to make sure that we're doing things in
the best fashion so we built a lot of

402
00:33:13,809 --> 00:33:18,360
tooling around that we build our
customers as we have custom macros in

403
00:33:18,360 --> 00:33:22,399
place so if we roll a new instance
overnight it automatically going to pull

404
00:33:22,399 --> 00:33:27,439
the latest approved invalidated in court
today my down so you're not having to

405
00:33:27,440 --> 00:33:31,669
constantly update your templates to
reflect new a mighty Zeus critical

406
00:33:31,669 --> 00:33:34,630
bodies etc

407
00:33:34,630 --> 00:33:39,490
so this is an example of a BBC that
we're going to attempt to deploy and the

408
00:33:39,490 --> 00:33:50,190
time remaining and walk through what the
actual templates so quick walking

409
00:33:50,190 --> 00:33:54,810
through an actual temple in cloud
formation looks like but talks about it

410
00:33:54,810 --> 00:33:59,490
being JSON we actually write all of our
team our templates in the animal and our

411
00:33:59,490 --> 00:34:06,340
to convert the animal to JSON and then
push that to AWS as well so it's it's

412
00:34:06,340 --> 00:34:11,360
very convoluted it in the beginning when
you look at how to write these templates

413
00:34:11,360 --> 00:34:16,669
but as you write more and more it
becomes second nature and the nice thing

414
00:34:16,668 --> 00:34:22,199
is you can pull from other teams as an
example so this is a very simple I guess

415
00:34:22,199 --> 00:34:25,600
I should mention this isn't our audience
tech they were showing today but just

416
00:34:25,600 --> 00:34:31,429
pieces of how we put the stick together
eventually to the item stack and

417
00:34:31,429 --> 00:34:35,720
betrayal process will be open sourced
available online once we finish cleaning

418
00:34:35,719 --> 00:34:41,428
it up and make that available but you
define outputs so at the end of this

419
00:34:41,429 --> 00:34:45,750
script we will actually I'll put this
information to the console window so

420
00:34:45,750 --> 00:34:50,649
that we can see and pull those ideas
from there but we basically have defined

421
00:34:50,649 --> 00:34:57,500
a public or private road here or DMZ
subnet and internal subnet and a test

422
00:34:57,500 --> 00:35:01,660
subnet we want internet gateway because
we need to be able to reach the internet

423
00:35:01,660 --> 00:35:08,569
from private subnets we want a we need
attached to a gateway to the VPC we want

424
00:35:08,570 --> 00:35:14,500
a default public and internal route we
want the net device in order to have

425
00:35:14,500 --> 00:35:19,580
that connection to the Gateway from the
internet and here we've made simple

426
00:35:19,580 --> 00:35:27,750
rules that we're gonna allow ingress
from to any of these skis me internal

427
00:35:27,750 --> 00:35:35,830
IP's onne port and we don't have any
rules by default in 80 s confirmation if

428
00:35:35,830 --> 00:35:39,250
you don't explicitly set rules they just
kind of mir

429
00:35:39,830 --> 00:35:46,040
your ingress openness and then we define
a net instance and then our subnets are

430
00:35:46,040 --> 00:35:46,640
defined

431
00:35:46,640 --> 00:35:53,129
and what's leaders we want them to have
and then the overall the PC this ten

432
00:35:53,130 --> 00:35:57,240
lines of code is basically all that's
needed if you wanted to deploy the PC

433
00:35:57,240 --> 00:36:00,828
without any sudden it's one thing to
note with when you're deploying a

434
00:36:00,829 --> 00:36:05,900
private cloud invaded yes you can add to
it as much as you want you can take away

435
00:36:05,900 --> 00:36:11,720
so I tried to find a sub i cant
especially if you attach devices to it

436
00:36:11,720 --> 00:36:17,859
so but if i've only defined 37 Nelson
and later on I decided that I wanted to

437
00:36:17,859 --> 00:36:22,569
find two more you can actually go add
the substance to it so if you deployed

438
00:36:22,569 --> 00:36:27,089
at one point without the idea that you
wanted a relational database system in

439
00:36:27,089 --> 00:36:31,990
since posted from Amazon and he find out
oh crap I need two more substance in

440
00:36:31,990 --> 00:36:35,348
order to support that you can easily go
at that so you don't have to clearly

441
00:36:35,349 --> 00:36:40,869
define out what your gonna look like
from the get-go you just need the basic

442
00:36:40,869 --> 00:36:47,480
concepts in the beginning to watch this
and hopefully it works well we talked

443
00:36:47,480 --> 00:36:51,730
through the next side and we can
actually see what it looks like so we

444
00:36:51,730 --> 00:36:57,259
run this store called saffron so we can
see here that it converted it suggests

445
00:36:57,259 --> 00:36:57,720
on it

446
00:36:57,720 --> 00:37:01,230
uploaded it has three which is what
Amazon actually uses to pull the

447
00:37:01,230 --> 00:37:05,380
template in the cloud formation and then
we have a continuous check goes to

448
00:37:05,380 --> 00:37:10,369
create and so if something happens we'll
see it cannot hear that pay something

449
00:37:10,369 --> 00:37:14,990
happen let's roll this back and get to
know good state and then also if you

450
00:37:14,990 --> 00:37:21,490
went to the actual AWS cloud formation
console we would see that hey this is

451
00:37:21,490 --> 00:37:26,819
being created and if you can actually go
through event table and see what piece

452
00:37:26,819 --> 00:37:31,980
of the confirmation process you're at it
this run it takes about two minutes but

453
00:37:31,980 --> 00:37:36,970
will go into what a simple security
group looks like this will be the next

454
00:37:36,970 --> 00:37:43,399
thing that we called for me look it so
it's very similar in structure once

455
00:37:43,400 --> 00:37:48,470
again but we can go through and set very
specific securities for instances or a

456
00:37:48,470 --> 00:37:52,459
broader spectrum like this is what our
internal web servers goods will look

457
00:37:52,460 --> 00:37:58,220
like this one insecurity like I'm so I
defined here as separate civil security

458
00:37:58,220 --> 00:37:59,620
for VPN that allows

459
00:37:59,620 --> 00:38:06,690
outbound access on port 22 to be able to
get into any of our association census

460
00:38:06,690 --> 00:38:15,040
inside our BBC it has about access to
the world on for 380 and UDP port 1234

461
00:38:15,040 --> 00:38:22,660
Network Time Protocol and of course in
been accessed from a small subset of the

462
00:38:22,660 --> 00:38:32,770
rule the world on port 1194 if I wanted
to see the entire world I kids 00 if I

463
00:38:32,770 --> 00:38:37,509
define an internal web security group I
could to find similar outbound access

464
00:38:37,510 --> 00:38:43,600
except I don't want to be able to pivot
from a web server to go to any other

465
00:38:43,600 --> 00:38:51,310
server except for on these ports and
then these examples here are a way of

466
00:38:51,310 --> 00:38:59,880
actually defining how to reference a
security guard from another school so on

467
00:38:59,880 --> 00:39:06,170
port 22 inbound to the web server I want
to allow SSH access from the VPN

468
00:39:06,170 --> 00:39:14,070
security group I want to allow for 43
access from the VPN or in this case I

469
00:39:14,070 --> 00:39:19,280
also on allow for further access from
the world you to it so it's quickly

470
00:39:19,280 --> 00:39:23,460
running out of time but we can see the
description is complete if I go into the

471
00:39:23,460 --> 00:39:31,940
designer looks like the image that I had
a on-screen earlier and I don't have

472
00:39:31,940 --> 00:39:35,160
time to run through these securing your
point but I can show you that if I were

473
00:39:35,160 --> 00:39:39,920
to run as the PC again it will actually
look at it all looks at what was

474
00:39:39,920 --> 00:39:42,410
deployed and what's trying to be
deployed and show me that there's no

475
00:39:42,410 --> 00:39:47,710
differences and I can say let's continue
to deploy it but it actually say there's

476
00:39:47,710 --> 00:39:51,760
no basis to be performed so it's not do
anything I'm so this would be an things

477
00:39:51,760 --> 00:39:54,850
saying the other day I could run the
script and say nothing's changed when is

478
00:39:54,850 --> 00:40:01,319
we're gonna get state all wrapped up in
all that bob cut off the risk

479
00:40:03,360 --> 00:40:13,010
moving past moving past what we've
talked about today so and and wrapping

480
00:40:13,010 --> 00:40:19,420
things up so basically what we what we
would urge everyone to do not just not

481
00:40:19,420 --> 00:40:23,500
just two hits for companies like us is
using some of these using some of these

482
00:40:23,500 --> 00:40:28,720
technologies even in the larger
corporate environments you can still

483
00:40:28,720 --> 00:40:34,109
Albion not using AWS if you're not if
you're not an AWS shop you can still

484
00:40:34,110 --> 00:40:38,260
utilize things like chef things like
puppets all in trouble there's a zillion

485
00:40:38,260 --> 00:40:43,060
of these technologies popping up we just
happened to Chef because as we liked it

486
00:40:43,060 --> 00:40:50,299
and it was more problematic than the
puppet that was more shells is start to

487
00:40:50,300 --> 00:40:53,430
try to take advantage of you look for
things in your infrastructure that you

488
00:40:53,430 --> 00:40:59,100
can automates so that you can achieve
some of the benefits of the DevOps the

489
00:40:59,100 --> 00:41:02,560
DevOps benefits that we mentioned
earlier the renowned good state the

490
00:41:02,560 --> 00:41:07,450
audible configurations the three
deployments as you want them and with

491
00:41:07,450 --> 00:41:13,500
those things you know burning something
to the ground if you suspect a

492
00:41:13,500 --> 00:41:17,440
compromise we oftentimes got this
question when we're consulting and you

493
00:41:17,440 --> 00:41:20,890
know we take over domain controllers
somebody to ask us like how do we know

494
00:41:20,890 --> 00:41:24,990
with all certainty that this hasn't
happened to us before you know there

495
00:41:24,990 --> 00:41:28,620
there is no good way to answer that
except for burning to the ground and

496
00:41:28,620 --> 00:41:34,150
start fresh and you know build a little
bit more securely that time which that

497
00:41:34,150 --> 00:41:37,800
that's not a really good answer from a
consulting perspective but it it really

498
00:41:37,800 --> 00:41:43,820
is one of the only answers that if he
wants to make absolutely sure that there

499
00:41:43,820 --> 00:41:48,730
is no persistence from an unauthorized
entity being an attacker in their

500
00:41:48,730 --> 00:41:52,170
environment that that's really the only
the only good way and it's not feasible

501
00:41:52,170 --> 00:41:56,670
without these kind of principles in
place and your infrastructure and of

502
00:41:56,670 --> 00:42:02,810
course with if you are a hipster company
you should be able to take all or at

503
00:42:02,810 --> 00:42:06,210
least some of what we've built here and
apply it your own infrastructure if

504
00:42:06,210 --> 00:42:10,370
you're starting to move things over to
AWS are you wanted to adopt this and

505
00:42:10,370 --> 00:42:15,170
even tested out to see if it worked for
your company or if you are

506
00:42:15,170 --> 00:42:17,940
are you know larger corporate
environment you should be able to just

507
00:42:17,940 --> 00:42:22,369
take the chef to chef components the
bootstrapping opponents and the GPO

508
00:42:22,369 --> 00:42:25,869
policies and such and utilize those you
don't have to it's not an all or nothing

509
00:42:25,869 --> 00:42:33,970
approach just on that this technology
stack isn't just something they can play

510
00:42:33,970 --> 00:42:38,220
here and in a management staggers
something that that's where we started

511
00:42:38,220 --> 00:42:43,000
and proved out there we could do this
and do it effectively and securely but

512
00:42:43,000 --> 00:42:47,579
since then everything else it's best
care possible company now that if you

513
00:42:47,579 --> 00:42:52,319
want any services if you want to deploy
new technologies it has to be closed for

514
00:42:52,319 --> 00:42:57,440
him to be tripped it has to be audible
through code review process and

515
00:42:57,440 --> 00:43:01,220
repeatable into a number of state so
anytime if we need to tear down and

516
00:43:01,220 --> 00:43:07,078
redeploy we can do that in my great if
for some reason AWS West is

517
00:43:07,079 --> 00:43:11,140
outperforming to our expectations we can
tear down in my grade to 8th Ave yes

518
00:43:11,140 --> 00:43:17,819
east overnight without causing any
delays in our product so it's a

519
00:43:17,819 --> 00:43:22,740
something you can do learn it well do
securely in and push it out across the

520
00:43:22,740 --> 00:43:27,450
corporation not sure I didn't imagine
that's where we started it as we put it

521
00:43:27,450 --> 00:43:32,200
out and that's where we're just
continuing across our enterprise the

522
00:43:32,200 --> 00:43:35,549
reason we we wanted to talk very
specifically about this like we do a lot

523
00:43:35,549 --> 00:43:38,799
of this with our our product stuff but
there's been a lot of research and

524
00:43:38,799 --> 00:43:42,759
everything in the product world undoing
automation so we want to show that this

525
00:43:42,760 --> 00:43:49,869
can be applicable to two other other
parts of the company and last slide so

526
00:43:49,869 --> 00:43:54,180
future plans we mentioned this that as
soon as we get things cleaned up we will

527
00:43:54,180 --> 00:43:59,339
be open sourcing the entire staff from
top to bottom out to the world on our

528
00:43:59,339 --> 00:44:11,369
republic if we will be we want to
ideally took the the terror tear down

529
00:44:11,369 --> 00:44:15,460
and build up provisioning process into
more of a centralized administrative

530
00:44:15,460 --> 00:44:19,079
portals that way nobody has to deal with
nobody has to do with the command line

531
00:44:19,079 --> 00:44:23,740
basically provisioning the provision
through an easy to define administrative

532
00:44:23,740 --> 00:44:26,740
interface you can just say I I need to
get to this

533
00:44:27,540 --> 00:44:32,230
created create the routes for me give
you my keys and I'll get in and get in

534
00:44:32,230 --> 00:44:37,930
with my my least key and obviously liked
at least ki will already be mapped my my

535
00:44:37,930 --> 00:44:41,970
mobile device 42 Ave and I'll get into
my saying and at least ki will be

536
00:44:41,970 --> 00:44:46,529
automatically configured to expire after
six hours or whatever the cases whatever

537
00:44:46,530 --> 00:44:53,500
we define as a as an exploration with it
and that is the end of our presentation

538
00:44:53,500 --> 00:45:10,740
so in our office so we do have like this
is all Active Directory infrastructure

539
00:45:10,740 --> 00:45:15,229
just the question was do we do we have
any impact of Directory infrastructure

540
00:45:15,230 --> 00:45:22,140
and it all just exists in AWS land it's
not it's not in our office you don't

541
00:45:22,140 --> 00:45:25,730
like sneak into the back into the back
closet and find it you know find it

542
00:45:25,730 --> 00:45:29,480
running on a server there it's it's all
it's all there and then that does

543
00:45:29,480 --> 00:45:34,180
selective outbound access to single
sign-on providers to provide other

544
00:45:34,180 --> 00:45:39,339
access to the cloud services that were
using it as a as a company so are you

545
00:45:39,340 --> 00:45:45,560
using Amazon as an IDP for other service
providers or you have a separate IDP

546
00:45:45,560 --> 00:45:53,140
that your Amazon doesn't actually exist
as the as the service provider the

547
00:45:53,140 --> 00:45:57,490
service provider is the identity
provider is Active Directory it's just

548
00:45:57,490 --> 00:46:04,839
hosted on AWS Service Director
directories feeding our ADP that handles

549
00:46:04,840 --> 00:46:09,420
our authorization to other
infrastructure and applications so it's

550
00:46:09,420 --> 00:46:13,360
a ride in the back but are true source
of identity that seeds are IDP solution

551
00:46:13,360 --> 00:46:17,500
its handling the sessions for you have
your domain controllers running in AWS

552
00:46:17,500 --> 00:46:22,600
that feeds other parts of the
environment you didn't just say that

553
00:46:22,600 --> 00:46:25,600
Microsoft he's in there is just
southeast

554
00:46:27,120 --> 00:46:33,850
and IDP so you know we're using a
cloud-based solution you could use

555
00:46:33,850 --> 00:46:43,950
something like there's a couple of other
ideas that you can like build it

556
00:46:43,950 --> 00:46:47,439
yourself then you have to build all the
sample integrations and all of that we

557
00:46:47,440 --> 00:46:51,430
we chose to go something with a lot less
management overhead and something that

558
00:46:51,430 --> 00:46:55,940
we couldn't Angeles corrupt because
family and all of that is accomplished

559
00:46:55,940 --> 00:47:00,740
its complicated there's there's a reason
that about your PhD work on it and it's

560
00:47:00,740 --> 00:47:06,000
already something that's figured out for
us so easier less manager out so but

561
00:47:06,000 --> 00:47:09,000
it's all backbone but this

562
00:47:22,160 --> 00:47:29,020
so the question was regarding whether we
have defined downtime requirements or

563
00:47:29,020 --> 00:47:32,759
whether we have alternatively whether we
have high availability requirements and

564
00:47:32,760 --> 00:47:39,120
how we manage that so we right now like
we have a high level meter high

565
00:47:39,120 --> 00:47:45,890
availability requirement in the sense
that our our users really wants to be

566
00:47:45,890 --> 00:47:49,819
able to access everything at all times
it's more it's more driven by them as

567
00:47:49,820 --> 00:47:54,490
opposed to regulatory compliance
requirements how we manage that is we

568
00:47:54,490 --> 00:48:00,279
don't have to take down the the whole
thing at the same time because we have

569
00:48:00,280 --> 00:48:04,860
redundant due to the domain controller
setup is is designed for liability

570
00:48:04,860 --> 00:48:12,610
high-availability purposes so there's a
set of 2 into 1 those those pairs work

571
00:48:12,610 --> 00:48:20,410
as a primary and fell over and we can
tear down the primary set back up to a

572
00:48:20,410 --> 00:48:25,740
known good stay and then while those are
down and being rebuilt the backup set

573
00:48:25,740 --> 00:48:30,049
primary and failover will function as
the source of identity so that's how we

574
00:48:30,050 --> 00:48:35,950
handled that's how we handle that a
requirement to do a lot of Devils blew

575
00:48:35,950 --> 00:48:40,419
during deployment as well as we're
bringing up new solutions in this tax we

576
00:48:40,420 --> 00:48:44,090
can put a touch of a button switch
everything over and operate a different

577
00:48:44,090 --> 00:48:49,670
system and entered into the system so in
essence we could tear down and have a

578
00:48:49,670 --> 00:48:55,280
period in our availability we rebuild or
we could have that needs to sum up

579
00:48:55,280 --> 00:49:01,800
switch over and in turn down and have no
control over which shouldn't interrupt

580
00:49:01,800 --> 00:49:06,480
but with you know all the information
and stuff you can define those

581
00:49:06,480 --> 00:49:10,050
maintenance periods it's a during this
time we will be down so if you have

582
00:49:10,050 --> 00:49:16,280
workers scheduled jobs you know you need
exclusions or around then if you have

583
00:49:16,280 --> 00:49:18,900
any other questions we can talk outside
or

584
00:49:18,900 --> 00:49:22,549
you can email us and we're happy to
answer anything thank you

