1
00:00:10,160 --> 00:00:19,880
<font color="#CCCCCC">a great</font><font color="#E5E5E5"> pleasure</font><font color="#CCCCCC"> or introduce Robin</font>

2
00:00:12,969 --> 00:00:22,700
who's talking<font color="#CCCCCC"> about thank you</font><font color="#E5E5E5"> very much</font>

3
00:00:19,880 --> 00:00:24,610
<font color="#CCCCCC">ah so the mics working great so yeah</font>

4
00:00:22,700 --> 00:00:26,448
hello and welcome<font color="#E5E5E5"> everybody to</font><font color="#CCCCCC"> my talk</font>

5
00:00:24,610 --> 00:00:29,150
<font color="#E5E5E5">introducing novel exploitation</font>

6
00:00:26,449 --> 00:00:31,310
techniques<font color="#E5E5E5"> in WordPress so first before</font>

7
00:00:29,150 --> 00:00:33,620
<font color="#E5E5E5">we</font><font color="#CCCCCC"> start</font><font color="#E5E5E5"> we will see a lot of</font><font color="#CCCCCC"> PHP code</font>

8
00:00:31,310 --> 00:00:35,600
today so everyone who's<font color="#CCCCCC"> not into PHP</font>

9
00:00:33,620 --> 00:00:37,900
just<font color="#CCCCCC"> hang in there and fight for the</font>

10
00:00:35,600 --> 00:00:40,519
demos and<font color="#CCCCCC"> try to understand the abstract</font>

11
00:00:37,900 --> 00:00:43,040
exploitation techniques and yeah<font color="#CCCCCC"> and you</font>

12
00:00:40,519 --> 00:00:45,530
<font color="#E5E5E5">should have some fun</font><font color="#CCCCCC"> ok so first</font><font color="#E5E5E5"> of all</font>

13
00:00:43,040 --> 00:00:47,780
<font color="#E5E5E5">a little bit about me</font><font color="#CCCCCC"> my name is Robin I</font>

14
00:00:45,530 --> 00:00:50,480
study at<font color="#E5E5E5"> the rural university in</font><font color="#CCCCCC"> BA home</font>

15
00:00:47,780 --> 00:00:52,940
at this time time<font color="#E5E5E5"> I'm a security</font>

16
00:00:50,480 --> 00:00:54,260
researcher<font color="#E5E5E5"> at</font><font color="#CCCCCC"> Rip's technologies we were</font>

17
00:00:52,940 --> 00:00:56,718
a vendor of<font color="#E5E5E5"> a static code analysis</font>

18
00:00:54,260 --> 00:00:59,739
engine<font color="#E5E5E5"> pretty cool stuff with</font><font color="#CCCCCC"> that</font>

19
00:00:56,719 --> 00:01:02,780
<font color="#CCCCCC">engine I love to hack web applications</font>

20
00:00:59,739 --> 00:01:04,519
<font color="#E5E5E5">how Ted some cool</font><font color="#CCCCCC"> bucks there lately</font><font color="#E5E5E5"> a</font>

21
00:01:02,780 --> 00:01:08,000
<font color="#CCCCCC">moodle a few weeks ago was pretty cool</font>

22
00:01:04,519 --> 00:01:10,940
stuff<font color="#CCCCCC"> PrestaShop as well al</font><font color="#E5E5E5"> i'm servive</font>

23
00:01:08,000 --> 00:01:12,740
maybe you feel<font color="#E5E5E5"> you</font><font color="#CCCCCC"> feel about it and at</font>

24
00:01:10,940 --> 00:01:15,110
<font color="#E5E5E5">this moment I want to give a big shout</font>

25
00:01:12,740 --> 00:01:17,690
outs<font color="#E5E5E5"> to a</font><font color="#CCCCCC"> Slavko me I'll ask Ian Karmel</font>

26
00:01:15,110 --> 00:01:19,610
<font color="#CCCCCC">what gave</font><font color="#E5E5E5"> me because their research is</font>

27
00:01:17,690 --> 00:01:20,810
kind<font color="#CCCCCC"> of like the foundation</font><font color="#E5E5E5"> of what</font>

28
00:01:19,610 --> 00:01:25,160
<font color="#E5E5E5">we're going</font><font color="#CCCCCC"> to see you today</font>

29
00:01:20,810 --> 00:01:27,080
<font color="#E5E5E5">so big shout outs to them so yeah what</font>

30
00:01:25,160 --> 00:01:28,340
first of<font color="#CCCCCC"> all what's WordPress WordPress</font>

31
00:01:27,080 --> 00:01:31,670
is an open source<font color="#E5E5E5"> content management</font>

32
00:01:28,340 --> 00:01:34,250
system I think<font color="#CCCCCC"> everyone or most</font><font color="#E5E5E5"> of you</font>

33
00:01:31,670 --> 00:01:36,830
will know the<font color="#CCCCCC"> interesting thing is that</font>

34
00:01:34,250 --> 00:01:38,869
<font color="#E5E5E5">it</font><font color="#CCCCCC"> is used by at least 30% of the web</font><font color="#E5E5E5"> so</font>

35
00:01:36,830 --> 00:01:41,239
for an attacker<font color="#E5E5E5"> this</font><font color="#CCCCCC"> suppose is a very</font>

36
00:01:38,869 --> 00:01:43,610
interesting target right<font color="#E5E5E5"> you have a very</font>

37
00:01:41,239 --> 00:01:44,989
large attack surface and so if it's

38
00:01:43,610 --> 00:01:47,810
interesting for<font color="#E5E5E5"> the attacker it should</font>

39
00:01:44,989 --> 00:01:49,970
be<font color="#CCCCCC"> interesting for</font><font color="#E5E5E5"> us so yeah at the</font>

40
00:01:47,810 --> 00:01:54,020
same<font color="#CCCCCC"> time it's written in PHP</font><font color="#E5E5E5"> very</font>

41
00:01:49,970 --> 00:01:56,149
flexible very<font color="#E5E5E5"> strange language</font><font color="#CCCCCC"> but at</font>

42
00:01:54,020 --> 00:01:58,280
the same time you can do a lot of<font color="#E5E5E5"> a lot</font>

43
00:01:56,149 --> 00:01:59,750
<font color="#CCCCCC">of with it</font><font color="#E5E5E5"> but at the same time it</font>

44
00:01:58,280 --> 00:02:03,080
<font color="#CCCCCC">brings a lot of software vulnerabilities</font>

45
00:01:59,750 --> 00:02:05,090
and I think everyone can<font color="#CCCCCC"> agree also on</font>

46
00:02:03,080 --> 00:02:07,789
that the penetration testers<font color="#E5E5E5"> code out</font><font color="#CCCCCC"> of</font>

47
00:02:05,090 --> 00:02:10,910
this as<font color="#E5E5E5"> well</font><font color="#CCCCCC"> so yeah WordPress</font><font color="#E5E5E5"> has an</font>

48
00:02:07,789 --> 00:02:12,500
<font color="#CCCCCC">open-back bounty program on hacker 1 so</font>

49
00:02:10,910 --> 00:02:15,799
<font color="#CCCCCC">I believe this leads to a decently</font>

50
00:02:12,500 --> 00:02:17,840
hardened<font color="#E5E5E5"> core so you wouldn't find any</font>

51
00:02:15,800 --> 00:02:20,450
remote code execution or<font color="#CCCCCC"> SQL injections</font>

52
00:02:17,840 --> 00:02:22,280
very easily<font color="#CCCCCC"> in the WordPress application</font>

53
00:02:20,450 --> 00:02:23,299
though<font color="#CCCCCC"> I think the question you may</font>

54
00:02:22,280 --> 00:02:25,700
remain sport

55
00:02:23,300 --> 00:02:27,230
attackers<font color="#E5E5E5"> and for us um how do you</font><font color="#CCCCCC"> how</font>

56
00:02:25,700 --> 00:02:31,549
do you exploit this thing<font color="#E5E5E5"> how do you get</font>

57
00:02:27,230 --> 00:02:34,399
<font color="#CCCCCC">into it so yeah of course</font>

58
00:02:31,550 --> 00:02:36,710
<font color="#CCCCCC">WordPress</font><font color="#E5E5E5"> Manila like the Robert Chris</font>

59
00:02:34,400 --> 00:02:38,660
installation is<font color="#E5E5E5"> actually very very rare</font>

60
00:02:36,710 --> 00:02:41,630
and what<font color="#E5E5E5"> people actually do is they</font>

61
00:02:38,660 --> 00:02:44,329
install all these<font color="#E5E5E5"> cool plugins to extend</font>

62
00:02:41,630 --> 00:02:47,240
the functionality and<font color="#E5E5E5"> get the</font><font color="#CCCCCC"> full-blown</font>

63
00:02:44,330 --> 00:02:48,650
<font color="#CCCCCC">web application they actually want so</font>

64
00:02:47,240 --> 00:02:50,480
for instance you can<font color="#E5E5E5"> install a plugin</font>

65
00:02:48,650 --> 00:02:53,300
which brings in these cool sliders and

66
00:02:50,480 --> 00:02:56,329
these cool toolbars or<font color="#CCCCCC"> does</font><font color="#E5E5E5"> even greater</font>

67
00:02:53,300 --> 00:02:59,180
stuff<font color="#E5E5E5"> so yeah and of course</font><font color="#CCCCCC"> um this</font>

68
00:02:56,330 --> 00:03:00,680
brings up a problem<font color="#CCCCCC"> often</font><font color="#E5E5E5"> because these</font>

69
00:02:59,180 --> 00:03:03,830
plugins are<font color="#E5E5E5"> not covered by</font><font color="#CCCCCC"> the bug</font>

70
00:03:00,680 --> 00:03:05,270
bounty<font color="#E5E5E5"> program so you kind of plug your</font>

71
00:03:03,830 --> 00:03:07,940
back straight into your<font color="#CCCCCC"> WordPress</font>

72
00:03:05,270 --> 00:03:12,260
instance and you then<font color="#CCCCCC"> you suddenly</font><font color="#E5E5E5"> have</font>

73
00:03:07,940 --> 00:03:13,820
a very very vulnerable instance so yeah

74
00:03:12,260 --> 00:03:15,980
what are we<font color="#CCCCCC"> going</font><font color="#E5E5E5"> to do today we</font><font color="#CCCCCC"> will</font>

75
00:03:13,820 --> 00:03:18,470
examine<font color="#E5E5E5"> design flaws</font><font color="#CCCCCC"> in the WordPress</font>

76
00:03:15,980 --> 00:03:20,630
core which then lead to<font color="#E5E5E5"> exploitation</font>

77
00:03:18,470 --> 00:03:23,090
techniques which can<font color="#E5E5E5"> be leveraged and</font>

78
00:03:20,630 --> 00:03:24,950
exported through plugins<font color="#CCCCCC"> through many</font>

79
00:03:23,090 --> 00:03:27,200
plugins<font color="#E5E5E5"> and we're not going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> do a</font>

80
00:03:24,950 --> 00:03:30,260
single vulnerability<font color="#CCCCCC"> or not look at a</font>

81
00:03:27,200 --> 00:03:31,880
single vulnerability type or not a

82
00:03:30,260 --> 00:03:33,950
technique<font color="#E5E5E5"> you can only use at the</font>

83
00:03:31,880 --> 00:03:36,500
specific plugins but we're trying<font color="#E5E5E5"> to</font>

84
00:03:33,950 --> 00:03:38,750
<font color="#E5E5E5">find</font><font color="#CCCCCC"> a vulnerability</font><font color="#E5E5E5"> techniques that you</font>

85
00:03:36,500 --> 00:03:41,510
can exploit on many<font color="#E5E5E5"> plugins so it's kind</font>

86
00:03:38,750 --> 00:03:42,980
of a general<font color="#E5E5E5"> approach so yeah in order</font>

87
00:03:41,510 --> 00:03:44,959
<font color="#CCCCCC">to understand that</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> were first</font><font color="#E5E5E5"> gonna</font>

88
00:03:42,980 --> 00:03:47,149
<font color="#E5E5E5">in order</font><font color="#CCCCCC"> before we do the exploitation</font>

89
00:03:44,959 --> 00:03:51,110
techniques directly we<font color="#E5E5E5"> will take a look</font>

90
00:03:47,150 --> 00:03:53,090
<font color="#E5E5E5">at</font><font color="#CCCCCC"> at the background</font><font color="#E5E5E5"> so first of all</font>

91
00:03:51,110 --> 00:03:55,550
let's take a look at the<font color="#CCCCCC"> security</font>

92
00:03:53,090 --> 00:04:00,500
defense side on the<font color="#CCCCCC"> WordPress of course</font>

93
00:03:55,550 --> 00:04:02,209
we have<font color="#E5E5E5"> CF tokens which prevent which</font>

94
00:04:00,500 --> 00:04:03,830
prevent an attacker from performing

95
00:04:02,209 --> 00:04:04,850
actions<font color="#E5E5E5"> in the name</font><font color="#CCCCCC"> of an authenticated</font>

96
00:04:03,830 --> 00:04:07,100
user

97
00:04:04,850 --> 00:04:09,170
these ones are generated uniquely for

98
00:04:07,100 --> 00:04:11,090
each action<font color="#E5E5E5"> so it's not easy to come</font>

99
00:04:09,170 --> 00:04:12,859
<font color="#E5E5E5">around that we have</font><font color="#CCCCCC"> contacts</font><font color="#E5E5E5"> dependent</font>

100
00:04:11,090 --> 00:04:15,200
sanitizers<font color="#E5E5E5"> which prevent most of</font>

101
00:04:12,860 --> 00:04:18,680
cross-site scripting vulnerabilities but

102
00:04:15,200 --> 00:04:20,810
<font color="#E5E5E5">also yeah you of course have to use them</font>

103
00:04:18,680 --> 00:04:24,110
<font color="#CCCCCC">to write</font><font color="#E5E5E5"> contacts so if you're using the</font>

104
00:04:20,810 --> 00:04:25,970
wrong function in the wrong context<font color="#CCCCCC"> then</font>

105
00:04:24,110 --> 00:04:27,950
you you still have<font color="#E5E5E5"> their ability but</font>

106
00:04:25,970 --> 00:04:31,789
most of<font color="#E5E5E5"> the time were from what I've</font>

107
00:04:27,950 --> 00:04:33,979
<font color="#CCCCCC">seen most plugins which kind of</font><font color="#E5E5E5"> care a</font>

108
00:04:31,789 --> 00:04:35,880
little bit about security<font color="#CCCCCC"> the most of</font>

109
00:04:33,979 --> 00:04:38,789
most of the times<font color="#E5E5E5"> implement</font>

110
00:04:35,880 --> 00:04:41,880
<font color="#E5E5E5">correctly so yeah what else do we</font><font color="#CCCCCC"> have</font>

111
00:04:38,790 --> 00:04:45,510
we have<font color="#CCCCCC"> Metta quotes I think</font><font color="#E5E5E5"> ever had</font>

112
00:04:41,880 --> 00:04:48,360
<font color="#CCCCCC">any one of you know magic quotes</font><font color="#E5E5E5"> oh okay</font>

113
00:04:45,510 --> 00:04:51,240
<font color="#CCCCCC">I had a kind</font><font color="#E5E5E5"> of ancient ancient</font>

114
00:04:48,360 --> 00:04:53,130
technology<font color="#CCCCCC"> that a few hard times</font><font color="#E5E5E5"> getting</font>

115
00:04:51,240 --> 00:04:55,440
around<font color="#E5E5E5"> the magic words in the early days</font>

116
00:04:53,130 --> 00:04:59,100
when<font color="#CCCCCC"> they try</font><font color="#E5E5E5"> to hack some pages but</font>

117
00:04:55,440 --> 00:05:02,190
yeah medicals basically they convert us

118
00:04:59,100 --> 00:05:04,440
try<font color="#E5E5E5"> to sanitize user input just before</font>

119
00:05:02,190 --> 00:05:06,120
it reaches the<font color="#E5E5E5"> web application so even</font>

120
00:05:04,440 --> 00:05:08,550
if you had a very vulnerable line of

121
00:05:06,120 --> 00:05:10,170
code in your web application like you

122
00:05:08,550 --> 00:05:13,170
see on<font color="#E5E5E5"> the slides below it looks like a</font>

123
00:05:10,170 --> 00:05:14,970
plain sequel injection<font color="#E5E5E5"> but actually with</font>

124
00:05:13,170 --> 00:05:17,190
magic quotes<font color="#E5E5E5"> this sequel injection is</font>

125
00:05:14,970 --> 00:05:19,230
not exploitable<font color="#CCCCCC"> because it would escape</font>

126
00:05:17,190 --> 00:05:21,180
and sanitize all the single and double

127
00:05:19,230 --> 00:05:24,500
<font color="#CCCCCC">quotes and</font><font color="#E5E5E5"> back slashes</font><font color="#CCCCCC"> preventing us</font>

128
00:05:21,180 --> 00:05:27,480
from controlling<font color="#E5E5E5"> the sequel syntax and</font>

129
00:05:24,500 --> 00:05:28,500
achieving our sequel injection<font color="#E5E5E5"> so yeah</font>

130
00:05:27,480 --> 00:05:30,270
of course that's<font color="#E5E5E5"> not really</font>

131
00:05:28,500 --> 00:05:31,860
state-of-the-art<font color="#E5E5E5"> but what what</font><font color="#CCCCCC"> works is</font>

132
00:05:30,270 --> 00:05:33,870
of<font color="#CCCCCC"> course does is they have prepared</font>

133
00:05:31,860 --> 00:05:36,000
statements<font color="#E5E5E5"> but the interesting thing at</font>

134
00:05:33,870 --> 00:05:37,710
the here is<font color="#E5E5E5"> that the it's a custom</font>

135
00:05:36,000 --> 00:05:40,110
implementation of prepared statements

136
00:05:37,710 --> 00:05:42,930
<font color="#E5E5E5">and you might be asking what</font><font color="#CCCCCC"> why why</font>

137
00:05:40,110 --> 00:05:45,110
<font color="#E5E5E5">would you implement a pre parents</font>

138
00:05:42,930 --> 00:05:49,220
favorite statements on your own<font color="#E5E5E5"> because</font>

139
00:05:45,110 --> 00:05:52,080
<font color="#CCCCCC">there actually</font><font color="#E5E5E5"> exists a PHP extension</font><font color="#CCCCCC"> 4</font>

140
00:05:49,220 --> 00:05:54,720
which does exactly that<font color="#E5E5E5"> what you want</font>

141
00:05:52,080 --> 00:05:57,270
which is well<font color="#CCCCCC"> tested pretty secure</font><font color="#E5E5E5"> a lot</font>

142
00:05:54,720 --> 00:05:58,530
<font color="#E5E5E5">of people use it so yeah the</font><font color="#CCCCCC"> question</font>

143
00:05:57,270 --> 00:06:00,960
remains why would you why would<font color="#E5E5E5"> you</font>

144
00:05:58,530 --> 00:06:03,030
<font color="#CCCCCC">implement your</font><font color="#E5E5E5"> own and it turns out in</font>

145
00:06:00,960 --> 00:06:05,880
fact<font color="#E5E5E5"> that the reason is most of the time</font>

146
00:06:03,030 --> 00:06:09,000
<font color="#E5E5E5">it's legislate plugins started to use to</font>

147
00:06:05,880 --> 00:06:11,670
vulnerable functions<font color="#CCCCCC"> they had this and</font>

148
00:06:09,000 --> 00:06:13,860
now they if<font color="#E5E5E5"> you wanted to switch to the</font>

149
00:06:11,670 --> 00:06:16,080
PDO extension you would have to rewrite

150
00:06:13,860 --> 00:06:19,200
<font color="#CCCCCC">all of them and no one of</font><font color="#E5E5E5"> us wants to do</font>

151
00:06:16,080 --> 00:06:21,090
<font color="#E5E5E5">that right</font><font color="#CCCCCC"> so yes</font><font color="#E5E5E5"> custom prepared</font>

152
00:06:19,200 --> 00:06:24,360
statements what is what is<font color="#E5E5E5"> different</font>

153
00:06:21,090 --> 00:06:26,909
what<font color="#E5E5E5"> is how does it look like so yeah</font>

154
00:06:24,360 --> 00:06:29,790
<font color="#CCCCCC">very</font><font color="#E5E5E5"> simple use case assume you have a</font>

155
00:06:26,910 --> 00:06:32,640
very simple sequel inject a sequel query

156
00:06:29,790 --> 00:06:34,350
here and you have user input<font color="#E5E5E5"> and one of</font>

157
00:06:32,640 --> 00:06:36,360
them you<font color="#CCCCCC"> want</font><font color="#E5E5E5"> to embed it safely</font><font color="#CCCCCC"> into</font>

158
00:06:34,350 --> 00:06:38,730
your query then you would first of<font color="#E5E5E5"> all</font>

159
00:06:36,360 --> 00:06:40,800
call<font color="#CCCCCC"> the prepare function pass the</font>

160
00:06:38,730 --> 00:06:43,470
sequel query along with it<font color="#CCCCCC"> have these</font>

161
00:06:40,800 --> 00:06:45,780
<font color="#CCCCCC">will place orders into the your sequel</font>

162
00:06:43,470 --> 00:06:47,379
query where you want to where you want

163
00:06:45,780 --> 00:06:49,179
the user input<font color="#CCCCCC"> to</font><font color="#E5E5E5"> be embedded</font>

164
00:06:47,379 --> 00:06:50,800
of course in the next<font color="#E5E5E5"> step and the query</font>

165
00:06:49,180 --> 00:06:53,319
function<font color="#CCCCCC"> this is</font><font color="#E5E5E5"> just sent to the</font>

166
00:06:50,800 --> 00:06:56,259
<font color="#CCCCCC">database so yeah</font><font color="#E5E5E5"> I'm sure you are now on</font>

167
00:06:53,319 --> 00:06:57,789
to try<font color="#E5E5E5"> and make some very simple sequel</font>

168
00:06:56,259 --> 00:06:59,559
injection payload<font color="#E5E5E5"> then you would</font>

169
00:06:57,789 --> 00:07:01,779
definitely<font color="#CCCCCC"> knock the seed because</font>

170
00:06:59,559 --> 00:07:06,339
<font color="#E5E5E5">everything was escaped properly even if</font>

171
00:07:01,779 --> 00:07:08,289
you hadn't<font color="#CCCCCC"> médicos in place</font><font color="#E5E5E5"> so yeah this</font>

172
00:07:06,339 --> 00:07:11,349
<font color="#CCCCCC">is now a</font><font color="#E5E5E5"> little bit</font><font color="#CCCCCC"> of the background</font><font color="#E5E5E5"> we</font>

173
00:07:08,289 --> 00:07:13,509
have<font color="#E5E5E5"> just seen and what now</font><font color="#CCCCCC"> we will do a</font>

174
00:07:11,349 --> 00:07:16,748
<font color="#E5E5E5">take a look</font><font color="#CCCCCC"> at is the exploitation</font>

175
00:07:13,509 --> 00:07:19,419
technique<font color="#E5E5E5"> number one is only a</font>

176
00:07:16,749 --> 00:07:20,770
vulnerable in<font color="#E5E5E5"> WordPress smaller or</font>

177
00:07:19,419 --> 00:07:23,469
earlier than four point eight point

178
00:07:20,770 --> 00:07:25,839
<font color="#CCCCCC">three but we will take a</font><font color="#E5E5E5"> look at it</font>

179
00:07:23,469 --> 00:07:27,849
right<font color="#E5E5E5"> now</font><font color="#CCCCCC"> so you've seen</font><font color="#E5E5E5"> the custom</font>

180
00:07:25,839 --> 00:07:31,599
prepared statements and now you will<font color="#CCCCCC"> see</font>

181
00:07:27,849 --> 00:07:33,759
the example<font color="#E5E5E5"> what people actually do</font><font color="#CCCCCC"> this</font>

182
00:07:31,599 --> 00:07:35,770
<font color="#E5E5E5">is not kind of</font><font color="#CCCCCC"> what they</font><font color="#E5E5E5"> the prepared</font>

183
00:07:33,759 --> 00:07:39,699
statements were designed<font color="#CCCCCC"> for and for</font>

184
00:07:35,770 --> 00:07:41,589
<font color="#E5E5E5">this reason it will definitely lead to a</font>

185
00:07:39,699 --> 00:07:44,050
flaw here but we<font color="#E5E5E5"> will see that</font><font color="#CCCCCC"> inside in</font>

186
00:07:41,589 --> 00:07:46,959
a second if<font color="#E5E5E5"> you take a look at this more</font>

187
00:07:44,050 --> 00:07:50,110
code snippet<font color="#CCCCCC"> you can see that the users</font>

188
00:07:46,959 --> 00:07:52,629
actually slide in or slip in another

189
00:07:50,110 --> 00:07:54,759
prepare call and try<font color="#E5E5E5"> to construct a</font>

190
00:07:52,629 --> 00:07:55,779
sequel query<font color="#CCCCCC"> by calling prepare two</font>

191
00:07:54,759 --> 00:07:58,240
times in a row

192
00:07:55,779 --> 00:08:00,610
this means they take<font color="#E5E5E5"> the first result of</font>

193
00:07:58,240 --> 00:08:04,389
the first prepare in this case the blue

194
00:08:00,610 --> 00:08:06,879
<font color="#CCCCCC">variable which is then later used</font><font color="#E5E5E5"> into</font>

195
00:08:04,389 --> 00:08:09,519
the second prepare as an argument<font color="#E5E5E5"> and</font>

196
00:08:06,879 --> 00:08:11,740
this means<font color="#CCCCCC"> that we have kind</font><font color="#E5E5E5"> of a core</font>

197
00:08:09,519 --> 00:08:14,680
catenation of<font color="#CCCCCC"> prepare statements called</font>

198
00:08:11,740 --> 00:08:18,099
a double prepare<font color="#E5E5E5"> which in fact suffers</font>

199
00:08:14,680 --> 00:08:21,909
from a sequel injection<font color="#CCCCCC"> and does anyone</font>

200
00:08:18,099 --> 00:08:24,430
see the problem<font color="#CCCCCC"> here okay</font><font color="#E5E5E5"> I see some</font>

201
00:08:21,909 --> 00:08:26,469
<font color="#CCCCCC">people nodding that's pretty cool yeah</font>

202
00:08:24,430 --> 00:08:28,629
the problem occurs when user input

203
00:08:26,469 --> 00:08:31,449
contains this weird<font color="#E5E5E5"> place orders</font>

204
00:08:28,629 --> 00:08:33,610
themselves<font color="#E5E5E5"> so assume you would add some</font>

205
00:08:31,449 --> 00:08:36,130
query parameters to your address<font color="#E5E5E5"> bar and</font>

206
00:08:33,610 --> 00:08:37,930
you would just<font color="#E5E5E5"> inject</font><font color="#CCCCCC"> this orange part</font>

207
00:08:36,130 --> 00:08:41,169
<font color="#CCCCCC">this is</font><font color="#E5E5E5"> the pay so they would inject by</font>

208
00:08:37,929 --> 00:08:43,029
<font color="#E5E5E5">a user input then some somatic stuff</font>

209
00:08:41,169 --> 00:08:45,610
happens<font color="#CCCCCC"> actually it is inserted into the</font>

210
00:08:43,029 --> 00:08:47,560
<font color="#E5E5E5">sequel query</font><font color="#CCCCCC"> in the first prepare which</font>

211
00:08:45,610 --> 00:08:51,220
leads us the blue variable which kind<font color="#E5E5E5"> of</font>

212
00:08:47,560 --> 00:08:52,959
looks<font color="#CCCCCC"> like this</font><font color="#E5E5E5"> and now</font><font color="#CCCCCC"> you can see</font><font color="#E5E5E5"> it's</font>

213
00:08:51,220 --> 00:08:54,939
safely embedded right<font color="#E5E5E5"> into the sequel</font>

214
00:08:52,959 --> 00:08:56,410
query you do<font color="#E5E5E5"> not have an injection here</font>

215
00:08:54,939 --> 00:08:58,870
there's<font color="#E5E5E5"> really nothing</font><font color="#CCCCCC"> to worry about</font>

216
00:08:56,410 --> 00:09:00,939
but<font color="#CCCCCC"> what happens is if</font><font color="#E5E5E5"> the other part of</font>

217
00:08:58,870 --> 00:09:04,690
the<font color="#CCCCCC"> secret query is appended</font>

218
00:09:00,940 --> 00:09:08,650
and now goes into<font color="#E5E5E5"> the second prepare the</font>

219
00:09:04,690 --> 00:09:10,780
user input of the rest of our user input

220
00:09:08,650 --> 00:09:13,329
<font color="#E5E5E5">is try to be embedded by WordPress and</font>

221
00:09:10,780 --> 00:09:16,199
what WordPress<font color="#E5E5E5"> did as just before it</font>

222
00:09:13,330 --> 00:09:18,520
embeds<font color="#E5E5E5"> our user input into single quotes</font>

223
00:09:16,200 --> 00:09:20,650
<font color="#E5E5E5">but</font><font color="#CCCCCC"> the problem here</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> our</font>

224
00:09:18,520 --> 00:09:23,319
placeholder was already in single quote

225
00:09:20,650 --> 00:09:25,270
so we kind of<font color="#E5E5E5"> have these two pair it</font><font color="#CCCCCC"> is</font>

226
00:09:23,320 --> 00:09:27,220
wrapped in single quotes or user input

227
00:09:25,270 --> 00:09:29,829
now the pink part<font color="#E5E5E5"> but you can see there</font>

228
00:09:27,220 --> 00:09:31,360
are<font color="#CCCCCC"> actually two single</font><font color="#E5E5E5"> quotes to</font><font color="#CCCCCC"> the</font>

229
00:09:29,830 --> 00:09:33,640
left side<font color="#E5E5E5"> and two single quotes</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the</font>

230
00:09:31,360 --> 00:09:36,760
right side<font color="#CCCCCC"> which ends our user input</font>

231
00:09:33,640 --> 00:09:40,210
<font color="#E5E5E5">being left not in quotes</font><font color="#CCCCCC"> and so we can</font>

232
00:09:36,760 --> 00:09:42,010
actually control the<font color="#CCCCCC"> the</font><font color="#E5E5E5"> query syntax</font>

233
00:09:40,210 --> 00:09:42,990
and have our sequel injection right

234
00:09:42,010 --> 00:09:45,640
there

235
00:09:42,990 --> 00:09:49,150
so yeah that's<font color="#E5E5E5"> I've prepared a small</font>

236
00:09:45,640 --> 00:09:55,380
<font color="#CCCCCC">demonstration which you cannot see here</font>

237
00:09:49,150 --> 00:09:55,380
<font color="#E5E5E5">right now let's see maybe shift</font>

238
00:09:59,750 --> 00:10:02,439
see

239
00:10:08,270 --> 00:10:14,040
<font color="#E5E5E5">okay so yeah here you can see if I type</font>

240
00:10:11,520 --> 00:10:16,949
anything<font color="#E5E5E5"> into this into this box here</font>

241
00:10:14,040 --> 00:10:19,199
<font color="#CCCCCC">you will see that</font><font color="#E5E5E5"> everything is just</font>

242
00:10:16,950 --> 00:10:21,360
inserted right into the sequel query<font color="#E5E5E5"> and</font>

243
00:10:19,200 --> 00:10:26,040
if<font color="#E5E5E5"> I now</font><font color="#CCCCCC"> go for single quotes</font><font color="#E5E5E5"> they</font>

244
00:10:21,360 --> 00:10:28,800
<font color="#CCCCCC">escape properly right but yeah if I now</font>

245
00:10:26,040 --> 00:10:31,319
turn on the highlighting<font color="#E5E5E5"> so we can see</font>

246
00:10:28,800 --> 00:10:33,089
what is<font color="#CCCCCC"> actually in single quotes and</font>

247
00:10:31,320 --> 00:10:35,459
what's not<font color="#E5E5E5"> and we can see that we do not</font>

248
00:10:33,089 --> 00:10:38,310
have<font color="#CCCCCC"> the injection here but as soon as I</font>

249
00:10:35,459 --> 00:10:42,270
am inject a placeholder<font color="#CCCCCC"> you can kind of</font>

250
00:10:38,310 --> 00:10:44,459
see that<font color="#E5E5E5"> the user input is now embedded</font>

251
00:10:42,270 --> 00:10:46,860
outside of the single quotes<font color="#CCCCCC"> and we have</font>

252
00:10:44,459 --> 00:10:49,529
our sequel injection there just to<font color="#E5E5E5"> show</font>

253
00:10:46,860 --> 00:10:56,490
<font color="#E5E5E5">you that so yeah right that's basically</font>

254
00:10:49,529 --> 00:10:58,050
<font color="#E5E5E5">it go back to</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> slides</font><font color="#CCCCCC"> here</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> yeah</font>

255
00:10:56,490 --> 00:10:59,760
that was<font color="#E5E5E5"> the double prepare you've just</font>

256
00:10:58,050 --> 00:11:02,399
seen it and of<font color="#E5E5E5"> course WordPress</font>

257
00:10:59,760 --> 00:11:03,839
<font color="#CCCCCC">acknowledge this and they said</font><font color="#E5E5E5"> okay we</font>

258
00:11:02,399 --> 00:11:06,630
are going<font color="#E5E5E5"> to fix this a lot of plugins</font>

259
00:11:03,839 --> 00:11:09,060
<font color="#E5E5E5">useless so the patch was kind of like to</font>

260
00:11:06,630 --> 00:11:10,620
say okay<font color="#CCCCCC"> we will change</font><font color="#E5E5E5"> the prepare</font>

261
00:11:09,060 --> 00:11:12,750
function and we will<font color="#E5E5E5"> change the query</font>

262
00:11:10,620 --> 00:11:14,220
function<font color="#E5E5E5"> and whenever user input</font>

263
00:11:12,750 --> 00:11:17,100
contains<font color="#E5E5E5"> this placeholder we want to</font>

264
00:11:14,220 --> 00:11:19,529
<font color="#E5E5E5">just replace all</font><font color="#CCCCCC"> % science with a 66</font>

265
00:11:17,100 --> 00:11:22,410
character long<font color="#E5E5E5"> unique random string and</font>

266
00:11:19,529 --> 00:11:24,570
later in the query<font color="#CCCCCC"> function we will just</font>

267
00:11:22,410 --> 00:11:27,089
<font color="#E5E5E5">turn it back so if we take a look</font><font color="#CCCCCC"> again</font>

268
00:11:24,570 --> 00:11:29,160
<font color="#CCCCCC">at</font><font color="#E5E5E5"> our old payload we will now see</font><font color="#CCCCCC"> that</font>

269
00:11:27,089 --> 00:11:31,290
<font color="#E5E5E5">when we inject any present science</font>

270
00:11:29,160 --> 00:11:34,709
<font color="#CCCCCC">they're being</font><font color="#E5E5E5"> effectively replaced with</font>

271
00:11:31,290 --> 00:11:37,140
this weird random unique<font color="#E5E5E5"> 66 character</font>

272
00:11:34,709 --> 00:11:39,390
long strings using<font color="#CCCCCC"> only boosts or</font><font color="#E5E5E5"> small</font>

273
00:11:37,140 --> 00:11:41,520
digits here and you can see that all our

274
00:11:39,390 --> 00:11:43,830
user input is learning<font color="#E5E5E5"> safely into</font>

275
00:11:41,520 --> 00:11:46,290
single<font color="#E5E5E5"> quotes and we cannot escape it</font>

276
00:11:43,830 --> 00:11:50,670
<font color="#CCCCCC">and the secret injection was effectively</font>

277
00:11:46,290 --> 00:11:52,920
mitigated by this<font color="#E5E5E5"> patch so yeah you can</font>

278
00:11:50,670 --> 00:11:55,920
<font color="#CCCCCC">see it this was actually our</font><font color="#E5E5E5"> first</font>

279
00:11:52,920 --> 00:11:57,870
<font color="#E5E5E5">exploitation technique already</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> course</font>

280
00:11:55,920 --> 00:11:59,880
it is<font color="#E5E5E5"> already patched but I think if you</font>

281
00:11:57,870 --> 00:12:01,890
are a penetration tester<font color="#E5E5E5"> then it is very</font>

282
00:11:59,880 --> 00:12:04,050
<font color="#E5E5E5">interesting for you because you can just</font>

283
00:12:01,890 --> 00:12:05,819
<font color="#E5E5E5">look out</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> that if you always</font><font color="#CCCCCC"> have</font>

284
00:12:04,050 --> 00:12:07,680
this double prepare or you can also

285
00:12:05,820 --> 00:12:09,510
think<font color="#E5E5E5"> sometimes they use it in a for</font>

286
00:12:07,680 --> 00:12:11,760
<font color="#CCCCCC">loop</font><font color="#E5E5E5"> or in a while loop and they just</font>

287
00:12:09,510 --> 00:12:14,220
start<font color="#CCCCCC"> to concatenate</font><font color="#E5E5E5"> the old result of</font>

288
00:12:11,760 --> 00:12:16,680
the prepares as an<font color="#E5E5E5"> argument in the</font>

289
00:12:14,220 --> 00:12:18,500
following<font color="#E5E5E5"> prepares and then you have</font>

290
00:12:16,680 --> 00:12:21,079
your sequel injection<font color="#E5E5E5"> right</font>

291
00:12:18,500 --> 00:12:22,940
but of<font color="#CCCCCC"> course it's</font><font color="#E5E5E5"> not</font><font color="#CCCCCC"> that cool because</font>

292
00:12:21,080 --> 00:12:25,370
<font color="#E5E5E5">it's</font><font color="#CCCCCC"> already patched</font><font color="#E5E5E5"> so what we're going</font>

293
00:12:22,940 --> 00:12:27,560
<font color="#E5E5E5">to look at right</font><font color="#CCCCCC"> now is our second</font>

294
00:12:25,370 --> 00:12:29,840
exploitation technique<font color="#E5E5E5"> which only exists</font>

295
00:12:27,560 --> 00:12:31,969
because<font color="#CCCCCC"> of our first exploitation</font>

296
00:12:29,840 --> 00:12:34,550
technique and because of the patch<font color="#CCCCCC"> of</font>

297
00:12:31,970 --> 00:12:36,800
our<font color="#E5E5E5"> first exploitation technique and if</font>

298
00:12:34,550 --> 00:12:39,020
this patch wasn't in place<font color="#E5E5E5"> we wouldn't</font>

299
00:12:36,800 --> 00:12:43,880
<font color="#E5E5E5">be able to</font><font color="#CCCCCC"> have our exploitation</font>

300
00:12:39,020 --> 00:12:45,110
technique<font color="#CCCCCC"> number two here so here in</font>

301
00:12:43,880 --> 00:12:47,030
order<font color="#CCCCCC"> to understand the second</font>

302
00:12:45,110 --> 00:12:48,290
expectation technique I<font color="#E5E5E5"> want to just</font>

303
00:12:47,030 --> 00:12:50,959
introduce you a little bit<font color="#E5E5E5"> of background</font>

304
00:12:48,290 --> 00:12:53,750
again and we take a<font color="#E5E5E5"> look at the WP query</font>

305
00:12:50,960 --> 00:12:56,240
object<font color="#E5E5E5"> so if you were on which you can</font>

306
00:12:53,750 --> 00:12:58,610
<font color="#E5E5E5">just see is another way of sending a</font>

307
00:12:56,240 --> 00:13:00,500
database query<font color="#E5E5E5"> so if you were on in your</font>

308
00:12:58,610 --> 00:13:02,210
<font color="#CCCCCC">wordpress plugin or theme or core and</font>

309
00:13:00,500 --> 00:13:04,160
you wanted<font color="#E5E5E5"> to send a database query</font>

310
00:13:02,210 --> 00:13:07,160
really quick<font color="#E5E5E5"> you could just construct</font>

311
00:13:04,160 --> 00:13:09,319
<font color="#E5E5E5">this WP query object and you could pass</font>

312
00:13:07,160 --> 00:13:11,390
<font color="#CCCCCC">it an argument and this argument</font><font color="#E5E5E5"> was</font>

313
00:13:09,320 --> 00:13:13,580
parsed into<font color="#CCCCCC"> a sequel query which was</font>

314
00:13:11,390 --> 00:13:15,560
then<font color="#CCCCCC"> executed to the database and</font><font color="#E5E5E5"> the</font>

315
00:13:13,580 --> 00:13:17,990
results of<font color="#E5E5E5"> the sequel query and the</font>

316
00:13:15,560 --> 00:13:20,239
secret query itself<font color="#E5E5E5"> were then stored as</font>

317
00:13:17,990 --> 00:13:22,910
<font color="#CCCCCC">the</font><font color="#E5E5E5"> object property in the WP query</font>

318
00:13:20,240 --> 00:13:25,580
object<font color="#E5E5E5"> so fair</font><font color="#CCCCCC"> enough sounds really</font><font color="#E5E5E5"> cool</font>

319
00:13:22,910 --> 00:13:27,439
<font color="#CCCCCC">but the problem was that this database</font>

320
00:13:25,580 --> 00:13:30,350
query sometimes in a large<font color="#E5E5E5"> WordPress</font>

321
00:13:27,440 --> 00:13:32,330
application<font color="#E5E5E5"> good very</font><font color="#CCCCCC"> very slow so</font>

322
00:13:30,350 --> 00:13:34,460
people said I<font color="#E5E5E5"> what can we do about it</font>

323
00:13:32,330 --> 00:13:36,470
<font color="#CCCCCC">and</font><font color="#E5E5E5"> words just said</font><font color="#CCCCCC"> okay if you have</font>

324
00:13:34,460 --> 00:13:39,410
slow database queries and<font color="#E5E5E5"> you sent them</font>

325
00:13:36,470 --> 00:13:42,500
all over very often<font color="#E5E5E5"> in</font><font color="#CCCCCC"> the small seconds</font>

326
00:13:39,410 --> 00:13:44,900
and sometimes you have the same<font color="#E5E5E5"> result</font>

327
00:13:42,500 --> 00:13:46,970
<font color="#CCCCCC">set</font><font color="#E5E5E5"> why don't you just store it you can</font>

328
00:13:44,900 --> 00:13:49,939
just<font color="#E5E5E5"> cash it and then the next one</font><font color="#CCCCCC"> you</font>

329
00:13:46,970 --> 00:13:51,950
can<font color="#E5E5E5"> just omit it so here this</font><font color="#CCCCCC"> is</font>

330
00:13:49,940 --> 00:13:54,770
actually<font color="#E5E5E5"> the answer of WordPress and</font>

331
00:13:51,950 --> 00:13:56,660
what they recommend<font color="#CCCCCC"> you to do this is an</font>

332
00:13:54,770 --> 00:14:00,260
excerpt from the official<font color="#E5E5E5"> WordPress</font><font color="#CCCCCC"> COEX</font>

333
00:13:56,660 --> 00:14:04,730
<font color="#E5E5E5">they tell you</font><font color="#CCCCCC"> to yeah implement a simple</font>

334
00:14:00,260 --> 00:14:07,850
cache miss and<font color="#E5E5E5"> an a cache set of the WP</font>

335
00:14:04,730 --> 00:14:11,000
query object<font color="#E5E5E5"> so when this small code</font>

336
00:14:07,850 --> 00:14:13,850
snippet you<font color="#E5E5E5"> can see</font><font color="#CCCCCC"> it's the caches are</font>

337
00:14:11,000 --> 00:14:16,370
<font color="#E5E5E5">do we have a result start a results</font>

338
00:14:13,850 --> 00:14:18,770
thought and the in cache if not please

339
00:14:16,370 --> 00:14:20,870
construct the WP<font color="#CCCCCC"> curio object sent the</font>

340
00:14:18,770 --> 00:14:24,230
slow database query<font color="#E5E5E5"> take the results and</font>

341
00:14:20,870 --> 00:14:26,000
put them back in the cache<font color="#E5E5E5"> so yeah so</font>

342
00:14:24,230 --> 00:14:28,340
the<font color="#CCCCCC"> question is of course how do we</font>

343
00:14:26,000 --> 00:14:31,190
actually<font color="#E5E5E5"> put an object</font><font color="#CCCCCC"> into the database</font>

344
00:14:28,340 --> 00:14:31,970
and<font color="#CCCCCC"> how do</font><font color="#E5E5E5"> we store our WP query object</font>

345
00:14:31,190 --> 00:14:35,169
<font color="#E5E5E5">temper</font>

346
00:14:31,970 --> 00:14:38,569
<font color="#CCCCCC">into the database and before you</font><font color="#E5E5E5"> ask</font>

347
00:14:35,169 --> 00:14:40,189
<font color="#E5E5E5">storing slow-slow result</font><font color="#CCCCCC"> slow database</font>

348
00:14:38,569 --> 00:14:43,459
queries or the results of them in the

349
00:14:40,189 --> 00:14:46,579
database<font color="#CCCCCC"> again it's not paradox</font><font color="#E5E5E5"> because</font>

350
00:14:43,459 --> 00:14:48,189
if the second query<font color="#E5E5E5"> is faster than the</font>

351
00:14:46,579 --> 00:14:51,439
first one then you actually have

352
00:14:48,189 --> 00:14:54,978
<font color="#E5E5E5">performance improvements so yeah this is</font>

353
00:14:51,439 --> 00:14:56,358
<font color="#E5E5E5">actually</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> good</font><font color="#CCCCCC"> idea or how we later</font>

354
00:14:54,979 --> 00:14:59,029
<font color="#CCCCCC">will see how this is not a really good</font>

355
00:14:56,359 --> 00:15:00,979
<font color="#CCCCCC">idea but so yeah</font><font color="#E5E5E5"> how do we put our</font>

356
00:14:59,029 --> 00:15:03,979
object into<font color="#CCCCCC"> the database</font><font color="#E5E5E5"> on WordPress</font>

357
00:15:00,979 --> 00:15:06,439
does it<font color="#CCCCCC"> by serialization</font><font color="#E5E5E5"> very easy it is</font>

358
00:15:03,979 --> 00:15:10,599
serialized<font color="#CCCCCC"> within PHP then insert it</font>

359
00:15:06,439 --> 00:15:15,709
<font color="#E5E5E5">into the</font><font color="#CCCCCC"> database just as a small recap</font>

360
00:15:10,599 --> 00:15:18,439
serialization<font color="#E5E5E5"> a PHP</font><font color="#CCCCCC"> is just transforming</font>

361
00:15:15,709 --> 00:15:21,289
<font color="#E5E5E5">a variety into a unique and uniform</font>

362
00:15:18,439 --> 00:15:24,049
string format<font color="#E5E5E5"> so yeah you can see</font><font color="#CCCCCC"> it</font>

363
00:15:21,289 --> 00:15:27,669
<font color="#CCCCCC">very</font><font color="#E5E5E5"> easily an integer is just being are</font>

364
00:15:24,049 --> 00:15:31,069
transformed into<font color="#E5E5E5"> I a double dot one and</font>

365
00:15:27,669 --> 00:15:32,359
yeah this<font color="#E5E5E5"> is basically it so all the</font>

366
00:15:31,069 --> 00:15:34,819
information<font color="#CCCCCC"> you can</font><font color="#E5E5E5"> see on the</font><font color="#CCCCCC"> Left</font>

367
00:15:32,359 --> 00:15:36,529
column<font color="#E5E5E5"> is with serialized</font><font color="#CCCCCC"> transformed</font>

368
00:15:34,819 --> 00:15:37,939
into the right column and<font color="#E5E5E5"> everything on</font>

369
00:15:36,529 --> 00:15:40,369
the<font color="#E5E5E5"> right column is transformed back</font>

370
00:15:37,939 --> 00:15:42,348
<font color="#E5E5E5">with an serialized to the left</font><font color="#CCCCCC"> column</font>

371
00:15:40,369 --> 00:15:44,659
and<font color="#E5E5E5"> the most important part about the</font>

372
00:15:42,349 --> 00:15:46,759
serialization<font color="#E5E5E5"> in PHP is I want you to</font>

373
00:15:44,659 --> 00:15:49,159
<font color="#E5E5E5">take with for for the next</font><font color="#CCCCCC"> for the next</font>

374
00:15:46,759 --> 00:15:51,499
chapters is this little number<font color="#E5E5E5"> here in</font>

375
00:15:49,159 --> 00:15:53,569
front<font color="#E5E5E5"> of the string which is actually a</font>

376
00:15:51,499 --> 00:15:55,519
meta information of the string itself

377
00:15:53,569 --> 00:15:58,189
<font color="#E5E5E5">which denotes the character length of</font>

378
00:15:55,519 --> 00:16:01,639
<font color="#E5E5E5">the string we have thrown</font><font color="#CCCCCC"> into</font><font color="#E5E5E5"> serialize</font>

379
00:15:58,189 --> 00:16:03,469
and if this number<font color="#E5E5E5"> is wrong</font><font color="#CCCCCC"> a lot</font><font color="#E5E5E5"> of</font>

380
00:16:01,639 --> 00:16:06,109
errors<font color="#CCCCCC"> occur and we cannot safely</font>

381
00:16:03,470 --> 00:16:08,679
<font color="#E5E5E5">transform it back just that you have</font>

382
00:16:06,109 --> 00:16:10,879
this as a small reminder<font color="#E5E5E5"> of course</font>

383
00:16:08,679 --> 00:16:13,848
<font color="#E5E5E5">civilization and PHP doesn't come</font>

384
00:16:10,879 --> 00:16:16,579
without a drawback as we all know there

385
00:16:13,849 --> 00:16:18,259
are PHP object<font color="#E5E5E5"> injections if user input</font>

386
00:16:16,579 --> 00:16:21,498
flows directly<font color="#E5E5E5"> into the an serialize</font>

387
00:16:18,259 --> 00:16:24,949
function then you<font color="#CCCCCC"> can actually sometimes</font>

388
00:16:21,499 --> 00:16:27,499
<font color="#E5E5E5">you cannot directly execute PHP code and</font>

389
00:16:24,949 --> 00:16:29,269
you cannot directly<font color="#E5E5E5"> inject PHP code but</font>

390
00:16:27,499 --> 00:16:31,519
you<font color="#CCCCCC"> can actually</font><font color="#E5E5E5"> control</font><font color="#CCCCCC"> the properties</font>

391
00:16:29,269 --> 00:16:34,159
of<font color="#E5E5E5"> the objects you inject and if that</font>

392
00:16:31,519 --> 00:16:36,109
object<font color="#E5E5E5"> uses some functions and use of</font>

393
00:16:34,159 --> 00:16:38,929
properties in security sensitive

394
00:16:36,109 --> 00:16:41,059
functions<font color="#E5E5E5"> then you sometimes can achieve</font>

395
00:16:38,929 --> 00:16:42,919
all kinds<font color="#E5E5E5"> of vulnerabilities</font><font color="#CCCCCC"> from</font>

396
00:16:41,059 --> 00:16:45,889
cross-site scripting to remote code

397
00:16:42,919 --> 00:16:48,619
execution so yeah<font color="#E5E5E5"> just</font>

398
00:16:45,889 --> 00:16:49,850
a<font color="#E5E5E5"> small recap so what we're going to</font>

399
00:16:48,619 --> 00:16:53,420
<font color="#E5E5E5">look at right now is the actual</font>

400
00:16:49,850 --> 00:16:56,059
<font color="#CCCCCC">exploitation technique number two this</font>

401
00:16:53,420 --> 00:16:59,358
exploitation technique is not only

402
00:16:56,059 --> 00:17:01,850
applicable<font color="#E5E5E5"> to WooCommerce but it's also</font>

403
00:16:59,359 --> 00:17:04,250
applicable to<font color="#CCCCCC"> a lot of</font><font color="#E5E5E5"> plugins</font><font color="#CCCCCC"> and so</font>

404
00:17:01,850 --> 00:17:06,380
and I've<font color="#E5E5E5"> chosen a wordpress WooCommerce</font>

405
00:17:04,250 --> 00:17:09,439
here because it is actually<font color="#CCCCCC"> very popular</font>

406
00:17:06,380 --> 00:17:12,559
it has 2.3<font color="#E5E5E5"> million installations just to</font>

407
00:17:09,439 --> 00:17:16,779
show you how<font color="#E5E5E5"> how the tech surface really</font>

408
00:17:12,559 --> 00:17:19,339
is and of<font color="#E5E5E5"> course it's</font><font color="#CCCCCC"> just an example</font>

409
00:17:16,779 --> 00:17:22,369
<font color="#E5E5E5">which leads to authenticated remote code</font>

410
00:17:19,339 --> 00:17:24,319
execution in this case<font color="#E5E5E5"> but we</font><font color="#CCCCCC"> will I</font>

411
00:17:22,369 --> 00:17:26,448
will have a few<font color="#CCCCCC"> words on that it</font><font color="#E5E5E5"> is just</font>

412
00:17:24,319 --> 00:17:28,850
applicable to a<font color="#CCCCCC"> lot of</font><font color="#E5E5E5"> plugins not only</font>

413
00:17:26,449 --> 00:17:31,460
<font color="#CCCCCC">overcomers</font><font color="#E5E5E5"> but we will take a look at</font>

414
00:17:28,850 --> 00:17:32,559
<font color="#CCCCCC">vaca</font><font color="#E5E5E5"> more specifically because it is a</font>

415
00:17:31,460 --> 00:17:35,419
very<font color="#CCCCCC"> nice example</font>

416
00:17:32,559 --> 00:17:37,820
<font color="#E5E5E5">so yeah</font><font color="#CCCCCC"> Moo commerce actually has these</font>

417
00:17:35,419 --> 00:17:40,370
cool<font color="#E5E5E5"> short</font><font color="#CCCCCC"> codes</font><font color="#E5E5E5"> so the image you see</font><font color="#CCCCCC"> on</font>

418
00:17:37,820 --> 00:17:42,769
the slides is actually something you<font color="#E5E5E5"> can</font>

419
00:17:40,370 --> 00:17:44,719
<font color="#E5E5E5">do after you have installed WooCommerce</font>

420
00:17:42,769 --> 00:17:47,779
so<font color="#E5E5E5"> vou coomer's actually is an</font>

421
00:17:44,720 --> 00:17:49,580
<font color="#CCCCCC">e-commerce online shop</font><font color="#E5E5E5"> so if you install</font>

422
00:17:47,779 --> 00:17:51,710
it then you can sell<font color="#CCCCCC"> product</font><font color="#E5E5E5"> in your</font>

423
00:17:49,580 --> 00:17:53,960
<font color="#E5E5E5">WordPress instance pretty cool stuff and</font>

424
00:17:51,710 --> 00:17:56,210
it comes<font color="#E5E5E5"> with these cool short codes</font>

425
00:17:53,960 --> 00:17:58,330
which<font color="#CCCCCC"> can then use in your blog post</font><font color="#E5E5E5"> so</font>

426
00:17:56,210 --> 00:18:02,029
if there were no products<font color="#E5E5E5"> you would just</font>

427
00:17:58,330 --> 00:18:04,428
make this<font color="#CCCCCC"> weird-lookin like a BB code in</font>

428
00:18:02,029 --> 00:18:06,049
this bulletin boards this<font color="#E5E5E5"> cool HTML kind</font>

429
00:18:04,429 --> 00:18:08,179
of thingy thing and you<font color="#CCCCCC"> would just</font><font color="#E5E5E5"> put</font>

430
00:18:06,049 --> 00:18:10,789
<font color="#CCCCCC">it in your blog post</font><font color="#E5E5E5"> and it would then</font>

431
00:18:08,179 --> 00:18:13,309
later<font color="#CCCCCC"> if people</font><font color="#E5E5E5"> use this blog post will</font>

432
00:18:10,789 --> 00:18:16,010
then be replaced<font color="#E5E5E5"> by this fancy HTML</font>

433
00:18:13,309 --> 00:18:20,360
product list<font color="#E5E5E5"> and I'm how this is exactly</font>

434
00:18:16,010 --> 00:18:22,399
<font color="#E5E5E5">done we will see in a second so yeah</font>

435
00:18:20,360 --> 00:18:24,830
this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> the function which is</font>

436
00:18:22,399 --> 00:18:27,139
responsible<font color="#E5E5E5"> for the</font><font color="#CCCCCC"> products list</font><font color="#E5E5E5"> and</font>

437
00:18:24,830 --> 00:18:29,449
<font color="#CCCCCC">you can</font><font color="#E5E5E5"> see that it actually has the</font>

438
00:18:27,139 --> 00:18:31,370
exact key points<font color="#CCCCCC"> that we have seen a few</font>

439
00:18:29,450 --> 00:18:33,830
<font color="#E5E5E5">slides ago which was recommended by the</font>

440
00:18:31,370 --> 00:18:36,350
WordPress<font color="#E5E5E5"> codex</font><font color="#CCCCCC"> and this is exactly what</font>

441
00:18:33,830 --> 00:18:38,600
<font color="#CCCCCC">they did they just had the they are</font><font color="#E5E5E5"> just</font>

442
00:18:36,350 --> 00:18:40,549
<font color="#CCCCCC">they followed the developers which</font>

443
00:18:38,600 --> 00:18:43,309
recommend good stuff because this is

444
00:18:40,549 --> 00:18:46,370
exactly<font color="#E5E5E5"> what the</font><font color="#CCCCCC"> people the people are</font>

445
00:18:43,309 --> 00:18:49,519
<font color="#E5E5E5">doing so yeah of course we would take a</font>

446
00:18:46,370 --> 00:18:51,559
<font color="#E5E5E5">look</font><font color="#CCCCCC"> now at</font><font color="#E5E5E5"> what exactly happens the</font>

447
00:18:49,519 --> 00:18:54,409
only<font color="#E5E5E5"> difference between the WordPress</font>

448
00:18:51,559 --> 00:18:56,539
codex and<font color="#E5E5E5"> our example here</font><font color="#CCCCCC"> is that</font><font color="#E5E5E5"> we</font>

449
00:18:54,409 --> 00:18:58,630
also<font color="#E5E5E5"> have we do not have a static</font>

450
00:18:56,539 --> 00:19:01,000
argument to the WP<font color="#CCCCCC"> Carey up</font>

451
00:18:58,630 --> 00:19:03,490
but this time it is<font color="#E5E5E5"> actually user input</font>

452
00:19:01,000 --> 00:19:05,769
<font color="#E5E5E5">and this user input comes from our short</font>

453
00:19:03,490 --> 00:19:08,230
code which we are using<font color="#E5E5E5"> in our blog</font><font color="#CCCCCC"> post</font>

454
00:19:05,769 --> 00:19:10,870
which is<font color="#E5E5E5"> then sent to this function here</font>

455
00:19:08,230 --> 00:19:12,940
<font color="#CCCCCC">so and we see it</font><font color="#E5E5E5"> on this</font><font color="#CCCCCC"> slide here</font>

456
00:19:10,870 --> 00:19:15,459
again so at the top<font color="#E5E5E5"> again this is our</font>

457
00:19:12,940 --> 00:19:17,710
short code we can also pass attributes

458
00:19:15,460 --> 00:19:20,470
to it<font color="#E5E5E5"> and this short code is going to be</font>

459
00:19:17,710 --> 00:19:23,169
the argument<font color="#CCCCCC"> of the WP query object</font><font color="#E5E5E5"> and</font>

460
00:19:20,470 --> 00:19:25,480
I told you that<font color="#CCCCCC"> this WP query object was</font>

461
00:19:23,169 --> 00:19:28,029
sending<font color="#E5E5E5"> database queries so it is this</font>

462
00:19:25,480 --> 00:19:30,370
short code is parsed into<font color="#E5E5E5"> a simple query</font>

463
00:19:28,029 --> 00:19:33,909
<font color="#CCCCCC">and as you</font><font color="#E5E5E5"> can</font><font color="#CCCCCC"> see if you are</font><font color="#E5E5E5"> using</font><font color="#CCCCCC"> a</font>

464
00:19:30,370 --> 00:19:35,799
<font color="#CCCCCC">percent sign into our</font><font color="#E5E5E5"> short code then</font>

465
00:19:33,909 --> 00:19:38,320
the through the first patch of our

466
00:19:35,799 --> 00:19:40,779
<font color="#E5E5E5">exploitation technique number one this %</font>

467
00:19:38,320 --> 00:19:43,240
<font color="#CCCCCC">is a</font><font color="#E5E5E5"> is effectively replaced with this</font>

468
00:19:40,779 --> 00:19:46,659
<font color="#E5E5E5">66 character long random and</font><font color="#CCCCCC"> unique</font>

469
00:19:43,240 --> 00:19:48,669
string and then later and the<font color="#CCCCCC"> set Ron</font>

470
00:19:46,659 --> 00:19:50,500
<font color="#CCCCCC">Zion function it is</font><font color="#E5E5E5"> then serialized and</font>

471
00:19:48,669 --> 00:19:53,200
supposed to<font color="#CCCCCC"> be written to the</font><font color="#E5E5E5"> database</font>

472
00:19:50,500 --> 00:19:56,919
which<font color="#E5E5E5"> will</font><font color="#CCCCCC"> also take a</font><font color="#E5E5E5"> look at right now</font>

473
00:19:53,200 --> 00:19:59,980
<font color="#CCCCCC">so okay we have we have this weird</font>

474
00:19:56,919 --> 00:20:02,590
<font color="#CCCCCC">shortcode used our WP query object was</font>

475
00:19:59,980 --> 00:20:03,100
constructed and then contains our sequel

476
00:20:02,590 --> 00:20:07,360
query

477
00:20:03,100 --> 00:20:09,939
<font color="#E5E5E5">as a property which is then prepared</font>

478
00:20:07,360 --> 00:20:12,549
<font color="#E5E5E5">which is then are serialized into this</font>

479
00:20:09,940 --> 00:20:15,279
weird string there and you can see the

480
00:20:12,549 --> 00:20:17,260
<font color="#E5E5E5">orange Mike part is again our % which</font>

481
00:20:15,279 --> 00:20:19,809
we've<font color="#CCCCCC"> used in</font><font color="#E5E5E5"> the short code if it is</font>

482
00:20:17,260 --> 00:20:22,240
now prepared<font color="#CCCCCC"> into</font><font color="#E5E5E5"> a sequel query to be</font>

483
00:20:19,809 --> 00:20:24,399
inserted<font color="#CCCCCC"> into</font><font color="#E5E5E5"> the database and then</font><font color="#CCCCCC"> send</font>

484
00:20:22,240 --> 00:20:26,710
to<font color="#E5E5E5"> the query</font><font color="#CCCCCC"> function what the query</font>

485
00:20:24,399 --> 00:20:29,080
function<font color="#E5E5E5"> actually thinks is that</font><font color="#CCCCCC"> the</font>

486
00:20:26,710 --> 00:20:31,210
place<font color="#E5E5E5"> order the 66 character long random</font>

487
00:20:29,080 --> 00:20:33,879
unique string was introduced by the

488
00:20:31,210 --> 00:20:36,970
previous prepare beforehand<font color="#E5E5E5"> which was</font>

489
00:20:33,880 --> 00:20:38,620
<font color="#CCCCCC">actually</font><font color="#E5E5E5"> not true this 66 character long</font>

490
00:20:36,970 --> 00:20:41,200
random unique string was introduced in

491
00:20:38,620 --> 00:20:43,389
the WP query object<font color="#E5E5E5"> so WordPress cannot</font>

492
00:20:41,200 --> 00:20:46,090
really distinguish where<font color="#E5E5E5"> this escape</font>

493
00:20:43,389 --> 00:20:48,639
where this<font color="#E5E5E5"> place order this escape place</font>

494
00:20:46,090 --> 00:20:51,279
<font color="#E5E5E5">order is coming</font><font color="#CCCCCC"> from what this actually</font>

495
00:20:48,639 --> 00:20:53,469
means now is that for a serialized

496
00:20:51,279 --> 00:20:55,269
string representation<font color="#E5E5E5"> there are these</font>

497
00:20:53,470 --> 00:20:58,659
small<font color="#CCCCCC"> numbers</font><font color="#E5E5E5"> I told you about</font><font color="#CCCCCC"> and you</font>

498
00:20:55,269 --> 00:21:01,960
<font color="#CCCCCC">can</font><font color="#E5E5E5"> see now that of course</font><font color="#CCCCCC"> if we replace</font>

499
00:20:58,659 --> 00:21:04,419
a 66 character long string again to a<font color="#E5E5E5"> %</font>

500
00:21:01,960 --> 00:21:07,570
then the effective length of our string

501
00:21:04,419 --> 00:21:09,130
<font color="#E5E5E5">is shorter about 65 characters and this</font>

502
00:21:07,570 --> 00:21:09,580
means that<font color="#E5E5E5"> the small number which is</font>

503
00:21:09,130 --> 00:21:12,430
<font color="#E5E5E5">perfect</font>

504
00:21:09,580 --> 00:21:14,949
with our<font color="#E5E5E5"> secret query is now not</font>

505
00:21:12,430 --> 00:21:16,930
entirely true it's not<font color="#E5E5E5"> matching anymore</font>

506
00:21:14,950 --> 00:21:20,110
right it says hundred characters but

507
00:21:16,930 --> 00:21:23,170
indeed it is only<font color="#CCCCCC"> 100 minus 65 yielding</font>

508
00:21:20,110 --> 00:21:25,659
35<font color="#E5E5E5"> characters and we will actually now</font>

509
00:21:23,170 --> 00:21:29,830
see how an attacker<font color="#E5E5E5"> can transform this</font>

510
00:21:25,660 --> 00:21:32,350
this this Ronis serialized

511
00:21:29,830 --> 00:21:34,740
representation<font color="#E5E5E5"> into</font><font color="#CCCCCC"> a working and fully</font>

512
00:21:32,350 --> 00:21:37,480
blown PHP object injection in a second

513
00:21:34,740 --> 00:21:40,990
so yeah<font color="#CCCCCC"> again</font><font color="#E5E5E5"> this is our civilized</font>

514
00:21:37,480 --> 00:21:42,340
representation our user input is

515
00:21:40,990 --> 00:21:44,470
embedded right into it

516
00:21:42,340 --> 00:21:46,800
the numbers do not<font color="#CCCCCC"> match</font><font color="#E5E5E5"> how do we get</font>

517
00:21:44,470 --> 00:21:49,630
the how do<font color="#E5E5E5"> you get the injection now</font>

518
00:21:46,800 --> 00:21:53,379
actually what<font color="#CCCCCC"> uncivilized will do when</font>

519
00:21:49,630 --> 00:21:56,020
throwing<font color="#CCCCCC"> this in it will actually</font><font color="#E5E5E5"> go 100</font>

520
00:21:53,380 --> 00:21:58,750
characters<font color="#E5E5E5"> to</font><font color="#CCCCCC"> the front</font><font color="#E5E5E5"> try to read this</font>

521
00:21:56,020 --> 00:22:00,790
<font color="#E5E5E5">at a string and then see</font><font color="#CCCCCC"> okay</font>

522
00:21:58,750 --> 00:22:02,560
the blue<font color="#E5E5E5"> part now</font><font color="#CCCCCC"> it try to read it in</font>

523
00:22:00,790 --> 00:22:04,899
but it doesn't work because<font color="#E5E5E5"> the</font>

524
00:22:02,560 --> 00:22:06,940
delimiters do not match it must be<font color="#E5E5E5"> kind</font>

525
00:22:04,900 --> 00:22:10,330
of wrong so what we can<font color="#E5E5E5"> actually do if</font>

526
00:22:06,940 --> 00:22:12,670
we control the second property<font color="#E5E5E5"> in our</font>

527
00:22:10,330 --> 00:22:15,159
<font color="#E5E5E5">serious representation we can</font><font color="#CCCCCC"> actually</font>

528
00:22:12,670 --> 00:22:19,120
try to<font color="#E5E5E5"> control</font><font color="#CCCCCC"> it as an attacker and fix</font>

529
00:22:15,160 --> 00:22:21,520
it<font color="#E5E5E5"> so we</font><font color="#CCCCCC"> actually have a</font><font color="#E5E5E5"> working</font><font color="#CCCCCC"> see</font>

530
00:22:19,120 --> 00:22:23,949
string the delimiter zarnow correct<font color="#E5E5E5"> and</font>

531
00:22:21,520 --> 00:22:27,430
at the end of the day we have our PHP

532
00:22:23,950 --> 00:22:29,740
object injection yeah<font color="#CCCCCC"> and this</font><font color="#E5E5E5"> is pretty</font>

533
00:22:27,430 --> 00:22:34,690
cool<font color="#E5E5E5"> I think and we are going to now see</font>

534
00:22:29,740 --> 00:22:42,100
a little exploit demo of it<font color="#E5E5E5"> so again go</font>

535
00:22:34,690 --> 00:22:44,620
<font color="#CCCCCC">back here and still see it so yeah this</font>

536
00:22:42,100 --> 00:22:47,050
<font color="#E5E5E5">is actually one of our</font><font color="#CCCCCC"> WordPress posts</font>

537
00:22:44,620 --> 00:22:48,639
you<font color="#E5E5E5"> can see it here we</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> using this</font>

538
00:22:47,050 --> 00:22:50,830
cool shortcode and<font color="#E5E5E5"> of course we</font><font color="#CCCCCC"> were</font>

539
00:22:48,640 --> 00:22:52,570
<font color="#E5E5E5">using percent signs because this was the</font>

540
00:22:50,830 --> 00:22:55,419
exploitation technique<font color="#E5E5E5"> number one</font><font color="#CCCCCC"> had a</font>

541
00:22:52,570 --> 00:22:57,610
patch<font color="#CCCCCC"> of it we have seen</font><font color="#E5E5E5"> and if we now</font>

542
00:22:55,420 --> 00:23:03,640
<font color="#E5E5E5">click on update we can</font><font color="#CCCCCC"> actually preview</font>

543
00:22:57,610 --> 00:23:06,219
<font color="#E5E5E5">the post actually here and we can see</font>

544
00:23:03,640 --> 00:23:08,160
that<font color="#CCCCCC"> our post</font><font color="#E5E5E5"> was contains this fancy</font>

545
00:23:06,220 --> 00:23:10,540
product list<font color="#CCCCCC"> I've told</font><font color="#E5E5E5"> you about and</font>

546
00:23:08,160 --> 00:23:13,510
this<font color="#E5E5E5"> is pretty cool stuff</font><font color="#CCCCCC"> and everything</font>

547
00:23:10,540 --> 00:23:18,840
<font color="#CCCCCC">is working</font><font color="#E5E5E5"> as expected</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> if I now</font><font color="#CCCCCC"> go</font>

548
00:23:13,510 --> 00:23:21,070
to the<font color="#E5E5E5"> products and throw in the</font>

549
00:23:18,840 --> 00:23:22,510
manipulate the<font color="#E5E5E5"> civilised representation</font>

550
00:23:21,070 --> 00:23:25,820
to be a correct one

551
00:23:22,510 --> 00:23:28,520
then<font color="#E5E5E5"> actually we have our PHP object</font>

552
00:23:25,820 --> 00:23:31,250
injection in a second<font color="#E5E5E5"> so yeah this is</font>

553
00:23:28,520 --> 00:23:32,750
<font color="#E5E5E5">what</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> can</font><font color="#CCCCCC"> see here now it makes a</font>

554
00:23:31,250 --> 00:23:35,240
<font color="#E5E5E5">little bit more sense to you maybe you</font>

555
00:23:32,750 --> 00:23:37,310
<font color="#CCCCCC">can see we have a PHP object injection</font>

556
00:23:35,240 --> 00:23:39,470
<font color="#CCCCCC">paylo right</font><font color="#E5E5E5"> now and the only thing I</font>

557
00:23:37,310 --> 00:23:41,270
have<font color="#E5E5E5"> to do it is now not correct</font>

558
00:23:39,470 --> 00:23:45,220
because there's a small<font color="#CCCCCC"> character right</font>

559
00:23:41,270 --> 00:23:49,790
in front<font color="#E5E5E5"> and if I remove this character</font>

560
00:23:45,220 --> 00:23:51,500
then it should actually try<font color="#CCCCCC"> to the</font>

561
00:23:49,790 --> 00:23:53,000
nature actually work the<font color="#CCCCCC"> serialize</font>

562
00:23:51,500 --> 00:23:55,520
representation is then<font color="#E5E5E5"> fixed to a</font>

563
00:23:53,000 --> 00:23:57,800
<font color="#E5E5E5">correct one and our PHP object injection</font>

564
00:23:55,520 --> 00:24:01,280
is kind of armed and<font color="#CCCCCC"> whatever</font><font color="#E5E5E5"> happen you</font>

565
00:23:57,800 --> 00:24:03,350
<font color="#CCCCCC">could already</font><font color="#E5E5E5"> see some payload there but</font>

566
00:24:01,280 --> 00:24:05,450
of<font color="#E5E5E5"> course we will just take a look at it</font>

567
00:24:03,350 --> 00:24:07,939
and<font color="#E5E5E5"> what we have to do right</font><font color="#CCCCCC"> now is</font>

568
00:24:05,450 --> 00:24:10,370
press two times we have to refresh<font color="#CCCCCC"> the</font>

569
00:24:07,940 --> 00:24:13,070
page<font color="#E5E5E5"> two times so the cache is first</font>

570
00:24:10,370 --> 00:24:14,239
written and then later in the second

571
00:24:13,070 --> 00:24:14,990
time it is<font color="#E5E5E5"> then read and then</font>

572
00:24:14,240 --> 00:24:17,990
<font color="#E5E5E5">uncivilised</font>

573
00:24:14,990 --> 00:24:18,320
so let's hope it<font color="#E5E5E5"> works once we did it</font>

574
00:24:17,990 --> 00:24:21,230
once

575
00:24:18,320 --> 00:24:23,899
<font color="#E5E5E5">refresh once and refresh twice and</font><font color="#CCCCCC"> there</font>

576
00:24:21,230 --> 00:24:26,330
<font color="#CCCCCC">is our PHP our PHP</font><font color="#E5E5E5"> info and we have</font>

577
00:24:23,900 --> 00:24:29,030
showed<font color="#E5E5E5"> that the exploitation definitely</font>

578
00:24:26,330 --> 00:24:34,550
works<font color="#E5E5E5"> so we have pretty cool stuff</font><font color="#CCCCCC"> I</font>

579
00:24:29,030 --> 00:24:36,530
think<font color="#E5E5E5"> now everything works as</font><font color="#CCCCCC"> expected</font>

580
00:24:34,550 --> 00:24:38,960
we can now of course as an attacker we

581
00:24:36,530 --> 00:24:41,840
can inject arbitrary PHP code we are<font color="#E5E5E5"> not</font>

582
00:24:38,960 --> 00:24:44,240
limited to<font color="#CCCCCC"> a PHP info page we can</font><font color="#E5E5E5"> do</font>

583
00:24:41,840 --> 00:24:45,770
<font color="#E5E5E5">basically whatever we want with</font><font color="#CCCCCC"> our</font>

584
00:24:44,240 --> 00:24:47,570
installation<font color="#CCCCCC"> and now you</font><font color="#E5E5E5"> might be</font>

585
00:24:45,770 --> 00:24:49,190
thinking all this is not so cool this<font color="#E5E5E5"> is</font>

586
00:24:47,570 --> 00:24:51,290
authenticated we<font color="#E5E5E5"> are view in the backend</font>

587
00:24:49,190 --> 00:24:53,120
<font color="#CCCCCC">of WordPress</font><font color="#E5E5E5"> but we have found actually</font>

588
00:24:51,290 --> 00:24:54,909
plugins<font color="#CCCCCC"> I cannot name</font><font color="#E5E5E5"> them right now</font>

589
00:24:53,120 --> 00:24:57,260
<font color="#CCCCCC">because we haven't been</font><font color="#E5E5E5"> completely done</font>

590
00:24:54,910 --> 00:24:59,840
by publishing the vendors but we have

591
00:24:57,260 --> 00:25:02,300
actually<font color="#CCCCCC"> found</font><font color="#E5E5E5"> plugins which use these</font>

592
00:24:59,840 --> 00:25:04,129
kind of which follow the WordPress codex

593
00:25:02,300 --> 00:25:06,409
<font color="#E5E5E5">unauthenticated so you can as an</font>

594
00:25:04,130 --> 00:25:09,620
unauthenticated user you can do exactly

595
00:25:06,410 --> 00:25:11,930
<font color="#CCCCCC">the</font><font color="#E5E5E5"> steps we've seen inject a PHP object</font>

596
00:25:09,620 --> 00:25:14,149
somewhere<font color="#CCCCCC"> and inject</font><font color="#E5E5E5"> present science</font>

597
00:25:11,930 --> 00:25:17,590
<font color="#E5E5E5">which then lead to a manipulated</font>

598
00:25:14,150 --> 00:25:20,510
serialize representation so yeah<font color="#E5E5E5"> um</font>

599
00:25:17,590 --> 00:25:26,240
let's close the<font color="#CCCCCC"> demo again see what we</font>

600
00:25:20,510 --> 00:25:27,470
have<font color="#CCCCCC"> here yeah closing words</font><font color="#E5E5E5"> so what</font>

601
00:25:26,240 --> 00:25:29,690
does this mean<font color="#CCCCCC"> now we have seen two</font>

602
00:25:27,470 --> 00:25:32,030
exploitation techniques<font color="#E5E5E5"> the first</font><font color="#CCCCCC"> one</font>

603
00:25:29,690 --> 00:25:35,340
was the double prepare and we have the

604
00:25:32,030 --> 00:25:38,490
second one<font color="#E5E5E5"> was a PHP object injection</font>

605
00:25:35,340 --> 00:25:40,379
in a<font color="#CCCCCC"> specific plugin</font><font color="#E5E5E5"> but this was not</font>

606
00:25:38,490 --> 00:25:42,720
applicable only to<font color="#CCCCCC"> a specific plugin but</font>

607
00:25:40,380 --> 00:25:45,720
which can generalize<font color="#CCCCCC"> this to applica to</font>

608
00:25:42,720 --> 00:25:48,150
apply it to<font color="#E5E5E5"> many plugins actually so</font>

609
00:25:45,720 --> 00:25:49,950
yeah<font color="#E5E5E5"> this is</font><font color="#CCCCCC"> pretty cool stuff</font><font color="#E5E5E5"> either</font>

610
00:25:48,150 --> 00:25:53,100
<font color="#E5E5E5">developers of course I think</font><font color="#CCCCCC"> try to</font>

611
00:25:49,950 --> 00:25:55,290
avoid<font color="#CCCCCC"> unsee realize we have JSON</font><font color="#E5E5E5"> encode</font>

612
00:25:53,100 --> 00:25:58,110
and JSON decode and most of the times

613
00:25:55,290 --> 00:26:00,240
this should be<font color="#E5E5E5"> sufficient so yeah and</font>

614
00:25:58,110 --> 00:26:02,699
<font color="#E5E5E5">for corridors</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> have seen</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> two</font>

615
00:26:00,240 --> 00:26:05,490
things this weird WP query object being

616
00:26:02,700 --> 00:26:07,290
cached<font color="#CCCCCC"> if you see this</font><font color="#E5E5E5"> as</font><font color="#CCCCCC"> a penetration</font>

617
00:26:05,490 --> 00:26:08,910
tester or as a code<font color="#E5E5E5"> editor then you</font>

618
00:26:07,290 --> 00:26:10,560
pretty much<font color="#E5E5E5"> know you have you still have</font>

619
00:26:08,910 --> 00:26:12,510
an injection<font color="#CCCCCC"> also of course on the</font>

620
00:26:10,560 --> 00:26:14,550
latest WordPress<font color="#E5E5E5"> version so it's kind of</font>

621
00:26:12,510 --> 00:26:16,379
a design flaw in the core which cannot

622
00:26:14,550 --> 00:26:20,220
be<font color="#E5E5E5"> taken out because of legend C code</font>

623
00:26:16,380 --> 00:26:23,400
<font color="#CCCCCC">and backwards compatibility</font><font color="#E5E5E5"> so yeah now</font>

624
00:26:20,220 --> 00:26:25,500
we could go for the questions but we're

625
00:26:23,400 --> 00:26:28,160
actually not I<font color="#E5E5E5"> think I'm just going</font><font color="#CCCCCC"> to</font>

626
00:26:25,500 --> 00:26:30,720
show<font color="#E5E5E5"> you one</font><font color="#CCCCCC"> more it's little technique</font>

627
00:26:28,160 --> 00:26:34,350
but this time<font color="#E5E5E5"> just the video just</font><font color="#CCCCCC"> one</font>

628
00:26:30,720 --> 00:26:35,580
minute<font color="#CCCCCC"> video showing how we found</font><font color="#E5E5E5"> a</font>

629
00:26:34,350 --> 00:26:38,760
vulnerability<font color="#E5E5E5"> if I delete</font>

630
00:26:35,580 --> 00:26:40,679
<font color="#CCCCCC">invulnerability</font><font color="#E5E5E5"> last week or a few</font>

631
00:26:38,760 --> 00:26:43,760
<font color="#CCCCCC">months ago actually six months ago</font><font color="#E5E5E5"> and</font>

632
00:26:40,680 --> 00:26:47,250
it was<font color="#E5E5E5"> published by us</font><font color="#CCCCCC"> a week ago and</font>

633
00:26:43,760 --> 00:26:49,129
<font color="#E5E5E5">finally</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> was just a patch yesterday so</font>

634
00:26:47,250 --> 00:26:53,220
what you see right now<font color="#E5E5E5"> is information</font>

635
00:26:49,130 --> 00:26:55,040
which comes<font color="#E5E5E5"> right from which is actually</font>

636
00:26:53,220 --> 00:26:58,530
very very<font color="#E5E5E5"> recent and pretty cool</font><font color="#CCCCCC"> I think</font>

637
00:26:55,040 --> 00:26:59,909
<font color="#E5E5E5">so yeah let's take</font><font color="#CCCCCC"> a look at how this</font>

638
00:26:58,530 --> 00:27:01,500
<font color="#CCCCCC">actually works it's</font><font color="#E5E5E5"> not really an</font>

639
00:26:59,910 --> 00:27:03,770
exploitation technique but it's a cool

640
00:27:01,500 --> 00:27:06,570
<font color="#CCCCCC">back</font><font color="#E5E5E5"> and so I want to show it</font><font color="#CCCCCC"> to you</font>

641
00:27:03,770 --> 00:27:08,280
<font color="#E5E5E5">yeah what happens here</font><font color="#CCCCCC"> an author locks</font>

642
00:27:06,570 --> 00:27:10,200
into<font color="#CCCCCC"> the</font><font color="#E5E5E5"> back end</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> not an admin it's</font>

643
00:27:08,280 --> 00:27:14,129
just an author<font color="#E5E5E5"> so everyone who can write</font>

644
00:27:10,200 --> 00:27:17,960
blog posts<font color="#CCCCCC"> he uploads a specific</font><font color="#E5E5E5"> picture</font>

645
00:27:14,130 --> 00:27:21,810
<font color="#E5E5E5">in Pacific image and injects his</font>

646
00:27:17,960 --> 00:27:23,520
obfuscated JavaScript secret payload

647
00:27:21,810 --> 00:27:26,760
which is now not so secret anymore

648
00:27:23,520 --> 00:27:29,250
because<font color="#E5E5E5"> it was just</font><font color="#CCCCCC"> patched but so yeah</font>

649
00:27:26,760 --> 00:27:33,750
he just gets<font color="#E5E5E5"> to exploit parameters right</font>

650
00:27:29,250 --> 00:27:35,940
<font color="#CCCCCC">um sets</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> thumbnail path</font><font color="#E5E5E5"> correctly</font>

651
00:27:33,750 --> 00:27:38,520
because<font color="#E5E5E5"> the vulnerability actually of</font>

652
00:27:35,940 --> 00:27:40,620
course<font color="#CCCCCC"> because of</font><font color="#E5E5E5"> the company deletion</font>

653
00:27:38,520 --> 00:27:42,780
<font color="#CCCCCC">they delete the image</font><font color="#E5E5E5"> correctly but the</font>

654
00:27:40,620 --> 00:27:44,250
thumbnail<font color="#E5E5E5"> of it they don't so what the</font>

655
00:27:42,780 --> 00:27:46,020
attacker now does after<font color="#E5E5E5"> setting up the</font>

656
00:27:44,250 --> 00:27:48,179
exploit he just deletes the image you've

657
00:27:46,020 --> 00:27:50,789
just<font color="#CCCCCC"> uploaded and can now</font>

658
00:27:48,179 --> 00:27:53,850
lead for instance the<font color="#E5E5E5"> WP config which</font>

659
00:27:50,789 --> 00:27:56,190
leads to<font color="#E5E5E5"> a completely fresh installation</font>

660
00:27:53,850 --> 00:27:58,139
<font color="#E5E5E5">now as an attacker</font><font color="#CCCCCC"> you cannot</font><font color="#E5E5E5"> completely</font>

661
00:27:56,190 --> 00:28:00,480
fresh and<font color="#E5E5E5"> start</font><font color="#CCCCCC"> WordPress and</font><font color="#E5E5E5"> you can</font>

662
00:27:58,139 --> 00:28:02,399
actually<font color="#E5E5E5"> spawn a plugin of your choice</font>

663
00:28:00,480 --> 00:28:03,809
and<font color="#CCCCCC"> we</font><font color="#E5E5E5"> have received questions</font><font color="#CCCCCC"> like how</font>

664
00:28:02,399 --> 00:28:04,799
do you wanna how do you want to<font color="#E5E5E5"> install</font>

665
00:28:03,809 --> 00:28:06,570
it<font color="#CCCCCC"> you don't know the</font><font color="#E5E5E5"> database</font>

666
00:28:04,799 --> 00:28:08,460
credentials<font color="#E5E5E5"> we'll remember</font><font color="#CCCCCC"> you can</font>

667
00:28:06,570 --> 00:28:12,629
actually use external database

668
00:28:08,460 --> 00:28:14,129
<font color="#E5E5E5">credentials and then spawn</font><font color="#CCCCCC"> your</font><font color="#E5E5E5"> own your</font>

669
00:28:12,629 --> 00:28:17,129
plugin<font color="#E5E5E5"> and the backdoor</font><font color="#CCCCCC"> of your choice</font>

670
00:28:14,129 --> 00:28:18,779
and you could then<font color="#CCCCCC"> open up the the at</font>

671
00:28:17,129 --> 00:28:20,580
<font color="#E5E5E5">minused and when</font><font color="#CCCCCC"> the stretchers log in</font>

672
00:28:18,779 --> 00:28:22,200
and<font color="#CCCCCC"> make the administrator actually</font>

673
00:28:20,580 --> 00:28:25,049
think that<font color="#E5E5E5"> this is still his page and</font>

674
00:28:22,200 --> 00:28:27,210
<font color="#CCCCCC">make him use it</font><font color="#E5E5E5"> so yeah you still have</font>

675
00:28:25,049 --> 00:28:28,049
<font color="#E5E5E5">full control over them so yeah that's</font>

676
00:28:27,210 --> 00:28:31,370
basically<font color="#E5E5E5"> it</font>

677
00:28:28,049 --> 00:28:39,889
thank you very<font color="#E5E5E5"> much for</font><font color="#CCCCCC"> attention and</font>

678
00:28:31,370 --> 00:28:39,889
[Applause]

679
00:28:52,400 --> 00:28:58,800
yes<font color="#E5E5E5"> still works in in the latest version</font>

680
00:28:56,670 --> 00:29:00,480
of<font color="#E5E5E5"> WordPress</font><font color="#CCCCCC"> why</font><font color="#E5E5E5"> I know the double</font>

681
00:28:58,800 --> 00:29:02,460
<font color="#E5E5E5">prepare does not work in the latest if I</font>

682
00:29:00,480 --> 00:29:04,560
said it was wrong<font color="#CCCCCC"> it only works in the</font>

683
00:29:02,460 --> 00:29:06,060
<font color="#E5E5E5">earlier than four point eight point four</font>

684
00:29:04,560 --> 00:29:07,919
<font color="#E5E5E5">point eight point three year and through</font>

685
00:29:06,060 --> 00:29:11,100
the patch<font color="#CCCCCC"> this</font><font color="#E5E5E5"> vulnerability was</font>

686
00:29:07,920 --> 00:29:12,690
<font color="#E5E5E5">mitigated yeah but the second</font>

687
00:29:11,100 --> 00:29:14,189
exploitation technique is<font color="#CCCCCC"> actually still</font>

688
00:29:12,690 --> 00:29:16,790
<font color="#CCCCCC">applicable so this is very more</font>

689
00:29:14,190 --> 00:29:16,790
interesting I think

690
00:29:33,920 --> 00:29:40,280
thank you what would we<font color="#CCCCCC"> the if you would</font>

691
00:29:38,630 --> 00:29:42,500
<font color="#CCCCCC">talk to a plug-in author</font><font color="#E5E5E5"> what would be</font>

692
00:29:40,280 --> 00:29:44,690
if<font color="#E5E5E5"> he would do one he or she would do</font>

693
00:29:42,500 --> 00:29:46,310
one<font color="#E5E5E5"> thing to make the plug-in more</font>

694
00:29:44,690 --> 00:29:49,910
secure what would what advice would you

695
00:29:46,310 --> 00:29:54,740
offer them<font color="#E5E5E5"> how that's a good size</font>

696
00:29:49,910 --> 00:29:56,900
deleting the project<font color="#CCCCCC"> and well as you</font>

697
00:29:54,740 --> 00:29:59,390
<font color="#E5E5E5">seen don't use a kind of color</font><font color="#CCCCCC"> these</font>

698
00:29:56,900 --> 00:30:01,460
code construct<font color="#CCCCCC"> I've showed you this is</font>

699
00:29:59,390 --> 00:30:03,590
definitely<font color="#CCCCCC"> a no-go</font><font color="#E5E5E5"> but of course</font>

700
00:30:01,460 --> 00:30:05,000
sometimes as a<font color="#CCCCCC"> plug-in developer you</font>

701
00:30:03,590 --> 00:30:07,310
<font color="#CCCCCC">don't really know what's safe and what's</font>

702
00:30:05,000 --> 00:30:09,380
<font color="#E5E5E5">not</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> mean how</font><font color="#CCCCCC"> did you know how do you</font>

703
00:30:07,310 --> 00:30:12,110
<font color="#CCCCCC">want to</font><font color="#E5E5E5"> know that the stuff</font><font color="#CCCCCC"> they</font><font color="#E5E5E5"> present</font>

704
00:30:09,380 --> 00:30:15,020
online<font color="#E5E5E5"> on the WordPress codex is not the</font>

705
00:30:12,110 --> 00:30:16,459
<font color="#E5E5E5">safest thing</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> do</font><font color="#CCCCCC"> it's very hard</font>

706
00:30:15,020 --> 00:30:19,070
<font color="#CCCCCC">actually for a plug-in developer to</font>

707
00:30:16,460 --> 00:30:22,100
decide what's safe and what's<font color="#CCCCCC"> not</font><font color="#E5E5E5"> but I</font>

708
00:30:19,070 --> 00:30:25,159
think<font color="#CCCCCC"> try to stick to what most</font><font color="#E5E5E5"> people</font>

709
00:30:22,100 --> 00:30:27,020
do try to be<font color="#E5E5E5"> confirmed</font><font color="#CCCCCC"> and don't use any</font>

710
00:30:25,160 --> 00:30:30,590
weird sequel injection stuff don't use

711
00:30:27,020 --> 00:30:32,030
any PHP object<font color="#CCCCCC"> a PHP serialization</font><font color="#E5E5E5"> stuff</font>

712
00:30:30,590 --> 00:30:34,610
because most of the times<font color="#E5E5E5"> you</font><font color="#CCCCCC"> don't</font>

713
00:30:32,030 --> 00:30:37,310
really<font color="#E5E5E5"> need it all right and don't use a</font>

714
00:30:34,610 --> 00:30:38,899
cross-site scripting<font color="#E5E5E5"> don't use I don't</font>

715
00:30:37,310 --> 00:30:41,179
achieve cross-site scripting by

716
00:30:38,900 --> 00:30:43,790
reflecting user input directly somewhere

717
00:30:41,180 --> 00:30:46,190
it's actually very<font color="#E5E5E5"> hard</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> not easy try</font>

718
00:30:43,790 --> 00:30:48,350
to minimize<font color="#E5E5E5"> everything try to think</font>

719
00:30:46,190 --> 00:30:59,720
<font color="#E5E5E5">about security basically that would</font><font color="#CCCCCC"> be a</font>

720
00:30:48,350 --> 00:31:03,610
good start<font color="#E5E5E5"> yeah thank you I</font><font color="#CCCCCC"> any I mean</font>

721
00:30:59,720 --> 00:31:05,960
<font color="#E5E5E5">you said</font><font color="#CCCCCC"> I just want</font><font color="#E5E5E5"> to get the</font>

722
00:31:03,610 --> 00:31:08,929
statement straight is there no chance

723
00:31:05,960 --> 00:31:12,880
<font color="#E5E5E5">for prepared video statement in the</font>

724
00:31:08,930 --> 00:31:15,680
future or are you<font color="#E5E5E5"> aware of any plans</font>

725
00:31:12,880 --> 00:31:17,240
<font color="#CCCCCC">well that's a good</font><font color="#E5E5E5"> question</font><font color="#CCCCCC"> I don't</font><font color="#E5E5E5"> know</font>

726
00:31:15,680 --> 00:31:18,590
if the<font color="#E5E5E5"> WordPress developers I mean</font>

727
00:31:17,240 --> 00:31:20,810
that's the thing<font color="#CCCCCC"> that the WordPress</font>

728
00:31:18,590 --> 00:31:22,550
developers have to decide whether or<font color="#E5E5E5"> not</font>

729
00:31:20,810 --> 00:31:24,200
they're going<font color="#E5E5E5"> to do it or</font><font color="#CCCCCC"> not</font><font color="#E5E5E5"> but I</font>

730
00:31:22,550 --> 00:31:25,580
think<font color="#E5E5E5"> it's</font><font color="#CCCCCC"> just for the plugin authors</font>

731
00:31:24,200 --> 00:31:27,230
which are not really<font color="#E5E5E5"> WordPress</font>

732
00:31:25,580 --> 00:31:29,240
developers<font color="#E5E5E5"> just people like</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> and me</font>

733
00:31:27,230 --> 00:31:32,000
who<font color="#CCCCCC"> are just I'm doing</font><font color="#E5E5E5"> their coding</font>

734
00:31:29,240 --> 00:31:34,130
their own stuff<font color="#CCCCCC"> I think every one of</font>

735
00:31:32,000 --> 00:31:36,470
them would have<font color="#E5E5E5"> to rewrite their plugins</font>

736
00:31:34,130 --> 00:31:38,930
<font color="#E5E5E5">maybe</font><font color="#CCCCCC"> they find a workaround or</font><font color="#E5E5E5"> some</font>

737
00:31:36,470 --> 00:31:41,600
hard fix but I don't think<font color="#E5E5E5"> we will see</font>

738
00:31:38,930 --> 00:31:44,690
<font color="#E5E5E5">that in the very near</font><font color="#CCCCCC"> future ok because</font>

739
00:31:41,600 --> 00:31:47,060
that<font color="#E5E5E5"> seems to</font><font color="#CCCCCC"> be the basis of some</font>

740
00:31:44,690 --> 00:32:01,070
<font color="#CCCCCC">either yeah yeah</font>

741
00:31:47,060 --> 00:32:03,230
custom database abstraction layer so is

742
00:32:01,070 --> 00:32:05,540
there a safe way to use that<font color="#CCCCCC"> caching</font>

743
00:32:03,230 --> 00:32:07,550
technique that<font color="#E5E5E5"> WP query gives you and</font>

744
00:32:05,540 --> 00:32:10,220
give<font color="#CCCCCC"> it in</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> Codex that's a good</font>

745
00:32:07,550 --> 00:32:12,740
question actually<font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> Luca</font><font color="#CCCCCC"> murse had the</font>

746
00:32:10,220 --> 00:32:14,390
same issue they and now<font color="#E5E5E5"> I have also have</font>

747
00:32:12,740 --> 00:32:16,340
the WP query and use it<font color="#CCCCCC"> in</font><font color="#E5E5E5"> the same</font>

748
00:32:14,390 --> 00:32:18,800
caching scheme<font color="#E5E5E5"> but this time they don't</font>

749
00:32:16,340 --> 00:32:20,929
store<font color="#E5E5E5"> the WP query object</font><font color="#CCCCCC"> directly as</font>

750
00:32:18,800 --> 00:32:23,810
recommended by the<font color="#CCCCCC"> WordPress codex but</font>

751
00:32:20,930 --> 00:32:25,820
this time they will retrieve<font color="#E5E5E5"> the</font><font color="#CCCCCC"> blog</font>

752
00:32:23,810 --> 00:32:28,129
posts which are returned by<font color="#CCCCCC"> the WP query</font>

753
00:32:25,820 --> 00:32:29,840
object<font color="#E5E5E5"> and extract the information they</font>

754
00:32:28,130 --> 00:32:31,700
want<font color="#E5E5E5"> because you don't have to store</font>

755
00:32:29,840 --> 00:32:33,709
everything you just<font color="#E5E5E5"> can store the IDS of</font>

756
00:32:31,700 --> 00:32:35,800
<font color="#E5E5E5">the posts which can then later be</font>

757
00:32:33,710 --> 00:32:38,780
retrieved again from the database<font color="#CCCCCC"> so</font>

758
00:32:35,800 --> 00:32:40,310
<font color="#CCCCCC">yeah</font><font color="#E5E5E5"> I think I'm stole</font><font color="#CCCCCC"> less don't stole</font>

759
00:32:38,780 --> 00:32:42,410
the whole object so it's not being

760
00:32:40,310 --> 00:32:44,240
serialized<font color="#E5E5E5"> internally by WordPress store</font>

761
00:32:42,410 --> 00:32:49,430
primitive data types and then<font color="#E5E5E5"> you save</font>

762
00:32:44,240 --> 00:32:51,950
to go so you said you found this in

763
00:32:49,430 --> 00:32:53,630
multiple<font color="#E5E5E5"> different plugins</font><font color="#CCCCCC"> how have you</font>

764
00:32:51,950 --> 00:32:55,880
<font color="#E5E5E5">found the experience</font><font color="#CCCCCC"> working with the</font>

765
00:32:53,630 --> 00:32:57,320
<font color="#CCCCCC">different</font><font color="#E5E5E5"> plug-in teams to resolve these</font>

766
00:32:55,880 --> 00:32:59,030
type of issues<font color="#CCCCCC"> you said it was about</font><font color="#E5E5E5"> six</font>

767
00:32:57,320 --> 00:33:01,399
months<font color="#CCCCCC"> ago for</font><font color="#E5E5E5"> that what's like an</font>

768
00:32:59,030 --> 00:33:04,879
<font color="#E5E5E5">average time span that the</font><font color="#CCCCCC"> teams</font><font color="#E5E5E5"> a</font>

769
00:33:01,400 --> 00:33:07,160
implementing a fix for<font color="#CCCCCC"> this yeah that's</font>

770
00:33:04,880 --> 00:33:10,450
<font color="#E5E5E5">a actually a good</font><font color="#CCCCCC"> question most of them</font>

771
00:33:07,160 --> 00:33:15,290
had<font color="#CCCCCC"> I mean six</font><font color="#E5E5E5"> month is a long time</font><font color="#CCCCCC"> or</font>

772
00:33:10,450 --> 00:33:17,420
well<font color="#E5E5E5"> it's it's more than average</font><font color="#CCCCCC"> I guess</font>

773
00:33:15,290 --> 00:33:18,889
for these kind of vulnerabilities so I

774
00:33:17,420 --> 00:33:21,800
think<font color="#E5E5E5"> everyone has</font><font color="#CCCCCC"> to judge them on</font>

775
00:33:18,890 --> 00:33:26,590
<font color="#CCCCCC">themselves whether</font><font color="#E5E5E5"> or not this time is</font>

776
00:33:21,800 --> 00:33:26,590
justified<font color="#CCCCCC"> or not but yeah basically</font>

777
00:33:32,860 --> 00:33:38,139
[Applause]

