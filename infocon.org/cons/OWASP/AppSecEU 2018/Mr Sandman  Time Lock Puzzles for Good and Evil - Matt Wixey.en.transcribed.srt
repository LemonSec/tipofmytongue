1
00:00:11,380 --> 00:00:15,970
team<font color="#E5E5E5"> I'm a part</font>

2
00:00:13,090 --> 00:00:18,250
PhD student at UCL<font color="#CCCCCC"> my</font><font color="#E5E5E5"> previous role</font>

3
00:00:15,970 --> 00:00:20,500
before<font color="#E5E5E5"> PwC was leading an R&D team in a</font>

4
00:00:18,250 --> 00:00:23,110
law<font color="#CCCCCC"> enforcement</font><font color="#E5E5E5"> agency and previous</font>

5
00:00:20,500 --> 00:00:26,560
<font color="#CCCCCC">poking at DEFCON brew corn 44 corn</font><font color="#E5E5E5"> and</font>

6
00:00:23,110 --> 00:00:28,720
so on<font color="#E5E5E5"> so what I'm going</font><font color="#CCCCCC"> to cover today</font>

7
00:00:26,560 --> 00:00:31,570
<font color="#CCCCCC">is the concept of delayed execution</font>

8
00:00:28,720 --> 00:00:33,640
particularly<font color="#E5E5E5"> in malware</font>

9
00:00:31,570 --> 00:00:36,210
<font color="#CCCCCC">thomna puzzles themselves what they are</font>

10
00:00:33,640 --> 00:00:38,830
and<font color="#E5E5E5"> how they work attack defense</font>

11
00:00:36,210 --> 00:00:40,870
countermeasures<font color="#E5E5E5"> and then some up with</font>

12
00:00:38,830 --> 00:00:42,790
<font color="#E5E5E5">the conclusion</font><font color="#CCCCCC"> I will kind</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> caveat</font>

13
00:00:40,870 --> 00:00:44,980
this<font color="#E5E5E5"> whole talk by saying that I'm not a</font>

14
00:00:42,790 --> 00:00:47,500
cryptographer<font color="#E5E5E5"> or a mathematician at all</font>

15
00:00:44,980 --> 00:00:50,559
<font color="#E5E5E5">my first degree was</font><font color="#CCCCCC"> in English language</font>

16
00:00:47,500 --> 00:00:51,850
<font color="#E5E5E5">and</font><font color="#CCCCCC"> literature</font><font color="#E5E5E5"> so definitely not an</font>

17
00:00:50,559 --> 00:00:53,589
<font color="#CCCCCC">expert on</font><font color="#E5E5E5"> this stuff I'm just kind of</font>

18
00:00:51,850 --> 00:00:55,870
interested<font color="#CCCCCC"> in in unconventional attack</font>

19
00:00:53,590 --> 00:00:59,730
vectors and kind<font color="#E5E5E5"> of manipulating the</font>

20
00:00:55,870 --> 00:01:04,420
properties<font color="#CCCCCC"> of things to have an effect</font>

21
00:00:59,730 --> 00:01:06,460
so delayed execution is as the name

22
00:01:04,420 --> 00:01:08,710
<font color="#E5E5E5">suggests deferring the execution of an</font>

23
00:01:06,460 --> 00:01:10,570
application<font color="#E5E5E5"> of a binary until a</font>

24
00:01:08,710 --> 00:01:12,729
predetermined<font color="#CCCCCC"> time</font><font color="#E5E5E5"> has passed</font><font color="#CCCCCC"> that can</font>

25
00:01:10,570 --> 00:01:15,910
either be kind<font color="#E5E5E5"> of normal time minutes</font>

26
00:01:12,729 --> 00:01:17,200
seconds hours<font color="#E5E5E5"> or it can be CPU cycles or</font>

27
00:01:15,910 --> 00:01:19,959
a certain<font color="#E5E5E5"> amount of things that have</font>

28
00:01:17,200 --> 00:01:22,569
<font color="#E5E5E5">happened and the idea behind it in</font>

29
00:01:19,959 --> 00:01:25,420
malware is to wait out the<font color="#E5E5E5"> analysis</font>

30
00:01:22,569 --> 00:01:27,910
period<font color="#E5E5E5"> of sandboxes</font><font color="#CCCCCC"> and emulators they</font>

31
00:01:25,420 --> 00:01:30,550
can only dedicate<font color="#CCCCCC"> a</font><font color="#E5E5E5"> finite amount of</font>

32
00:01:27,910 --> 00:01:33,340
time<font color="#E5E5E5"> to</font><font color="#CCCCCC"> analyzing a particular unknown</font>

33
00:01:30,550 --> 00:01:35,380
<font color="#E5E5E5">application after</font><font color="#CCCCCC"> which time</font><font color="#E5E5E5"> they have</font>

34
00:01:33,340 --> 00:01:37,119
to<font color="#E5E5E5"> return execution to the user or</font><font color="#CCCCCC"> to</font>

35
00:01:35,380 --> 00:01:40,360
allow that<font color="#E5E5E5"> file through an endpoint</font>

36
00:01:37,119 --> 00:01:41,800
filter or to<font color="#CCCCCC"> just move on to the next</font>

37
00:01:40,360 --> 00:01:43,660
file that there has to<font color="#E5E5E5"> be analyzed and</font>

38
00:01:41,800 --> 00:01:45,099
<font color="#E5E5E5">that period can differ it can be</font>

39
00:01:43,660 --> 00:01:48,130
anything from<font color="#E5E5E5"> a few seconds to a few</font>

40
00:01:45,099 --> 00:01:50,229
<font color="#CCCCCC">minutes and there are other applications</font>

41
00:01:48,130 --> 00:01:52,750
for<font color="#E5E5E5"> delayed execution why you want to do</font>

42
00:01:50,229 --> 00:01:54,819
it as well so<font color="#CCCCCC"> time bombs or</font><font color="#E5E5E5"> good example</font>

43
00:01:52,750 --> 00:01:56,920
logic bombs<font color="#E5E5E5"> that kind of thing</font>

44
00:01:54,819 --> 00:01:58,810
and crucially as I'll cover later<font color="#E5E5E5"> it's</font>

45
00:01:56,920 --> 00:02:00,789
<font color="#E5E5E5">not just about evading security</font>

46
00:01:58,810 --> 00:02:01,840
mechanisms there also be<font color="#CCCCCC"> known uses for</font>

47
00:02:00,789 --> 00:02:04,060
it<font color="#E5E5E5"> good uses for it</font>

48
00:02:01,840 --> 00:02:07,289
so<font color="#CCCCCC"> hantai DDoS is</font><font color="#E5E5E5"> one and I'll kind</font><font color="#CCCCCC"> of</font>

49
00:02:04,060 --> 00:02:10,420
cover how that works a<font color="#CCCCCC"> bit later on</font>

50
00:02:07,289 --> 00:02:11,500
<font color="#E5E5E5">so this is a really simple method of</font>

51
00:02:10,419 --> 00:02:14,049
<font color="#E5E5E5">delaying execution there's no</font>

52
00:02:11,500 --> 00:02:15,580
cryptography involved this<font color="#E5E5E5"> is how</font><font color="#CCCCCC"> I</font>

53
00:02:14,050 --> 00:02:17,830
<font color="#E5E5E5">developers did it for a long</font><font color="#CCCCCC"> time and</font>

54
00:02:15,580 --> 00:02:19,690
some<font color="#CCCCCC"> of them are still using this</font><font color="#E5E5E5"> you</font>

55
00:02:17,830 --> 00:02:22,030
literally just<font color="#E5E5E5"> call the sleep windows</font>

56
00:02:19,690 --> 00:02:24,219
<font color="#CCCCCC">API function and pass in an argument</font>

57
00:02:22,030 --> 00:02:26,569
<font color="#E5E5E5">which is a number of milliseconds and</font>

58
00:02:24,219 --> 00:02:31,099
<font color="#E5E5E5">then you have your evil</font><font color="#CCCCCC"> codex</font>

59
00:02:26,569 --> 00:02:33,730
you<font color="#E5E5E5"> after that you can also have a</font>

60
00:02:31,099 --> 00:02:36,709
conditional<font color="#CCCCCC"> statements</font><font color="#E5E5E5"> you can compare</font>

61
00:02:33,730 --> 00:02:39,469
the system timestamp<font color="#E5E5E5"> to a hard-coded</font>

62
00:02:36,709 --> 00:02:42,620
<font color="#E5E5E5">timestamp in the</font><font color="#CCCCCC"> malware and if those</font>

63
00:02:39,469 --> 00:02:44,150
<font color="#E5E5E5">don't</font><font color="#CCCCCC"> match or the the target timestamp</font>

64
00:02:42,620 --> 00:02:45,980
hasn't happened yet<font color="#CCCCCC"> then don't do</font>

65
00:02:44,150 --> 00:02:48,650
anything just continue sleeping<font color="#E5E5E5"> and then</font>

66
00:02:45,980 --> 00:02:50,709
check again<font color="#E5E5E5"> in</font><font color="#CCCCCC"> 3 seconds</font><font color="#E5E5E5"> or whatever</font><font color="#CCCCCC"> it</font>

67
00:02:48,650 --> 00:02:50,709
is

68
00:02:51,129 --> 00:02:58,249
so sandbox developers<font color="#E5E5E5"> and antivirus</font>

69
00:02:56,090 --> 00:03:00,230
developers and other people responsible

70
00:02:58,249 --> 00:03:01,840
<font color="#CCCCCC">for</font><font color="#E5E5E5"> creating security mechanisms kind of</font>

71
00:03:00,230 --> 00:03:03,738
got wise to<font color="#E5E5E5"> some of these techniques and</font>

72
00:03:01,840 --> 00:03:06,139
they started doing<font color="#E5E5E5"> things like</font>

73
00:03:03,739 --> 00:03:10,669
<font color="#E5E5E5">manipulating the</font><font color="#CCCCCC"> system time that was</font>

74
00:03:06,139 --> 00:03:13,699
returned to<font color="#E5E5E5"> applications querying it so</font>

75
00:03:10,669 --> 00:03:17,299
for instance accelerating it so this

76
00:03:13,699 --> 00:03:20,060
<font color="#E5E5E5">pseudocode here simulates a check for</font>

77
00:03:17,299 --> 00:03:21,169
that kind<font color="#E5E5E5"> of manipulation so what we're</font>

78
00:03:20,060 --> 00:03:23,689
doing<font color="#CCCCCC"> here is</font><font color="#E5E5E5"> getting a timestamp</font>

79
00:03:21,169 --> 00:03:25,340
<font color="#E5E5E5">sleeping for an amount of time and then</font>

80
00:03:23,689 --> 00:03:26,810
getting<font color="#E5E5E5"> another timestamp</font><font color="#CCCCCC"> and then</font>

81
00:03:25,340 --> 00:03:29,060
comparing the difference<font color="#CCCCCC"> between the two</font>

82
00:03:26,810 --> 00:03:32,840
<font color="#E5E5E5">and if the difference is less</font><font color="#CCCCCC"> than what</font>

83
00:03:29,060 --> 00:03:35,030
we expected<font color="#E5E5E5"> then we're probably in some</font>

84
00:03:32,840 --> 00:03:37,250
kind of sandbox or emulate environment

85
00:03:35,030 --> 00:03:39,259
so the code<font color="#CCCCCC"> will then not execute it's</font>

86
00:03:37,250 --> 00:03:43,310
originally intended methods it will do

87
00:03:39,259 --> 00:03:47,179
<font color="#CCCCCC">something</font><font color="#E5E5E5"> else this is an example with</font>

88
00:03:43,310 --> 00:03:49,129
<font color="#CCCCCC">just</font><font color="#E5E5E5"> wasting time in assembly</font><font color="#CCCCCC"> so again</font>

89
00:03:47,180 --> 00:03:51,470
this is<font color="#CCCCCC"> very simple no cryptography this</font>

90
00:03:49,129 --> 00:03:53,780
would happen<font color="#CCCCCC"> before the kind of main</font>

91
00:03:51,470 --> 00:03:56,840
method<font color="#E5E5E5"> of</font><font color="#CCCCCC"> your malware and in</font><font color="#E5E5E5"> this case</font>

92
00:03:53,780 --> 00:03:58,519
you just<font color="#E5E5E5"> zero out the X register and you</font>

93
00:03:56,840 --> 00:04:00,620
increment<font color="#E5E5E5"> it by</font><font color="#CCCCCC"> one and just loop around</font>

94
00:03:58,519 --> 00:04:06,439
<font color="#E5E5E5">continuously until it reaches some kind</font>

95
00:04:00,620 --> 00:04:09,079
of predetermined<font color="#CCCCCC"> amount and similarly</font><font color="#E5E5E5"> a</font>

96
00:04:06,439 --> 00:04:11,540
very simple example<font color="#E5E5E5"> here we just load a</font>

97
00:04:09,079 --> 00:04:14,269
library multiple<font color="#E5E5E5"> times so these are all</font>

98
00:04:11,540 --> 00:04:16,159
<font color="#E5E5E5">kind of really simple methods a little</font>

99
00:04:14,269 --> 00:04:18,469
<font color="#CCCCCC">bit more advanced is the</font><font color="#E5E5E5"> concept of</font>

100
00:04:16,159 --> 00:04:20,899
remote lookups for time stamps<font color="#CCCCCC"> so</font><font color="#E5E5E5"> rather</font>

101
00:04:18,469 --> 00:04:22,639
<font color="#E5E5E5">than relying on system time in this case</font>

102
00:04:20,899 --> 00:04:25,729
the malware<font color="#E5E5E5"> will get a</font><font color="#CCCCCC"> timestamp</font><font color="#E5E5E5"> from</font>

103
00:04:22,639 --> 00:04:27,009
the HTTP headers of a server<font color="#CCCCCC"> and compare</font>

104
00:04:25,729 --> 00:04:30,139
<font color="#CCCCCC">that to a</font><font color="#E5E5E5"> hard-coded</font>

105
00:04:27,009 --> 00:04:31,639
<font color="#E5E5E5">timestamp in the code and if that</font>

106
00:04:30,139 --> 00:04:33,560
<font color="#CCCCCC">matches then it will continue to execute</font>

107
00:04:31,639 --> 00:04:36,020
<font color="#E5E5E5">evil code and if not it will sleep and</font>

108
00:04:33,560 --> 00:04:39,110
then check<font color="#CCCCCC"> again the issue with this is</font>

109
00:04:36,020 --> 00:04:39,620
that<font color="#CCCCCC"> you are</font><font color="#E5E5E5"> relying firstly</font><font color="#CCCCCC"> on having</font>

110
00:04:39,110 --> 00:04:42,229
<font color="#CCCCCC">internet</font>

111
00:04:39,620 --> 00:04:45,199
access at a sandboxed environment<font color="#E5E5E5"> which</font>

112
00:04:42,229 --> 00:04:48,110
isn't always the<font color="#CCCCCC"> case the</font><font color="#E5E5E5"> internet</font>

113
00:04:45,199 --> 00:04:51,680
access might be simulated<font color="#E5E5E5"> so</font><font color="#CCCCCC"> sound boxes</font>

114
00:04:48,110 --> 00:04:54,110
do that<font color="#CCCCCC"> the wanna cry</font><font color="#E5E5E5"> malware for</font>

115
00:04:51,680 --> 00:04:55,699
instance<font color="#E5E5E5"> relied on that as a check so</font>

116
00:04:54,110 --> 00:04:58,460
that<font color="#E5E5E5"> non-existent domain that Marcus</font>

117
00:04:55,699 --> 00:05:00,410
<font color="#CCCCCC">Hutchins registered was a check by the</font>

118
00:04:58,460 --> 00:05:05,419
malware<font color="#E5E5E5"> to see if internet access was</font>

119
00:05:00,410 --> 00:05:10,400
being simulated<font color="#E5E5E5"> so here's a really brief</font>

120
00:05:05,419 --> 00:05:13,940
example of<font color="#E5E5E5"> this so what we're doing here</font>

121
00:05:10,400 --> 00:05:16,159
<font color="#E5E5E5">is getting date information from an HTTP</font>

122
00:05:13,940 --> 00:05:17,690
server<font color="#E5E5E5"> and we're checking it as</font>

123
00:05:16,160 --> 00:05:19,010
<font color="#CCCCCC">hard-coded one sleeping for a</font><font color="#E5E5E5"> certain</font>

124
00:05:17,690 --> 00:05:21,080
<font color="#E5E5E5">amount</font><font color="#CCCCCC"> of seconds</font><font color="#E5E5E5"> getting another</font>

125
00:05:19,010 --> 00:05:29,150
timestamp<font color="#E5E5E5"> comparing the</font><font color="#CCCCCC"> two and seeing</font>

126
00:05:21,080 --> 00:05:32,060
if it's<font color="#E5E5E5"> being manipulated</font><font color="#CCCCCC"> and then the</font>

127
00:05:29,150 --> 00:05:35,260
second example is an NTP server so just

128
00:05:32,060 --> 00:05:37,400
an alternative<font color="#E5E5E5"> to doing our over HTTP</font>

129
00:05:35,260 --> 00:05:39,830
now normally you do this<font color="#E5E5E5"> for more</font><font color="#CCCCCC"> than</font>

130
00:05:37,400 --> 00:05:42,080
<font color="#E5E5E5">15 seconds but otherwise</font><font color="#CCCCCC"> we just be kind</font>

131
00:05:39,830 --> 00:05:48,229
of staring a video for kind of<font color="#CCCCCC"> 2 or 3</font>

132
00:05:42,080 --> 00:05:50,180
<font color="#CCCCCC">minutes</font><font color="#E5E5E5"> now where I've kind of</font>

133
00:05:48,229 --> 00:05:52,880
introduced some new<font color="#E5E5E5"> techniques that</font><font color="#CCCCCC"> I</font>

134
00:05:50,180 --> 00:05:54,500
haven't<font color="#CCCCCC"> seen</font><font color="#E5E5E5"> before in the wild but that</font>

135
00:05:52,880 --> 00:05:58,130
could<font color="#CCCCCC"> be used is looking up external</font>

136
00:05:54,500 --> 00:06:02,090
data rather<font color="#CCCCCC"> than time so what this</font>

137
00:05:58,130 --> 00:06:03,889
<font color="#CCCCCC">pseudocode does is</font><font color="#E5E5E5"> it fetches a response</font>

138
00:06:02,090 --> 00:06:05,659
from the<font color="#E5E5E5"> Australian Government's website</font>

139
00:06:03,889 --> 00:06:08,690
on the current<font color="#CCCCCC"> population</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> Australia</font>

140
00:06:05,660 --> 00:06:10,550
<font color="#E5E5E5">and it compares the population count to</font>

141
00:06:08,690 --> 00:06:12,770
some target population count which is

142
00:06:10,550 --> 00:06:13,729
<font color="#CCCCCC">hard-coded in the malware obviously</font>

143
00:06:12,770 --> 00:06:15,020
there's an<font color="#E5E5E5"> assumption that the</font>

144
00:06:13,729 --> 00:06:17,870
population<font color="#CCCCCC"> of Australia</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> going to</font>

145
00:06:15,020 --> 00:06:20,539
increase but the<font color="#E5E5E5"> crucial thing here</font><font color="#CCCCCC"> is</font>

146
00:06:17,870 --> 00:06:21,830
that<font color="#E5E5E5"> you</font><font color="#CCCCCC"> don't know how much</font><font color="#E5E5E5"> it's going</font>

147
00:06:20,539 --> 00:06:25,400
<font color="#E5E5E5">to increase by it's not</font><font color="#CCCCCC"> a kind</font><font color="#E5E5E5"> of</font>

148
00:06:21,830 --> 00:06:30,740
predictable<font color="#E5E5E5"> increase at least not the</font>

149
00:06:25,400 --> 00:06:32,060
exact person<font color="#CCCCCC"> but the the statistics on</font>

150
00:06:30,740 --> 00:06:33,800
<font color="#CCCCCC">that Australian government website are</font>

151
00:06:32,060 --> 00:06:35,330
updated on<font color="#CCCCCC"> a regular basis so the</font>

152
00:06:33,800 --> 00:06:36,740
malware<font color="#E5E5E5"> can check every three seconds it</font>

153
00:06:35,330 --> 00:06:41,479
knows it's<font color="#E5E5E5"> going to get</font><font color="#CCCCCC"> a new value</font><font color="#E5E5E5"> and</font>

154
00:06:36,740 --> 00:06:43,729
it can<font color="#CCCCCC"> that</font><font color="#E5E5E5"> compare that the other</font>

155
00:06:41,479 --> 00:06:44,930
example I've<font color="#E5E5E5"> got in this demo as well as</font>

156
00:06:43,729 --> 00:06:48,590
the Australian<font color="#CCCCCC"> government is checking</font>

157
00:06:44,930 --> 00:06:51,409
<font color="#E5E5E5">the block count of Bitcoin so check how</font>

158
00:06:48,590 --> 00:06:52,799
<font color="#CCCCCC">many blocks of Bitcoin have in mind</font><font color="#E5E5E5"> that</font>

159
00:06:51,409 --> 00:06:54,300
<font color="#E5E5E5">is something it does happen on a</font>

160
00:06:52,800 --> 00:06:57,330
predictable regular basis<font color="#CCCCCC"> like</font><font color="#E5E5E5"> there</font>

161
00:06:54,300 --> 00:07:05,539
should<font color="#CCCCCC"> be a new block</font><font color="#E5E5E5"> around</font><font color="#CCCCCC"> every ten</font>

162
00:06:57,330 --> 00:07:08,878
minutes so this<font color="#E5E5E5"> is the Australia example</font>

163
00:07:05,539 --> 00:07:13,020
and you can<font color="#CCCCCC"> see very</font><font color="#E5E5E5"> simple again in</font>

164
00:07:08,879 --> 00:07:15,060
<font color="#E5E5E5">this case the</font><font color="#CCCCCC"> the actual value is below</font>

165
00:07:13,020 --> 00:07:17,490
<font color="#E5E5E5">our target again just to kind of save</font>

166
00:07:15,060 --> 00:07:18,900
time we don't<font color="#CCCCCC"> want to wait for so many</font>

167
00:07:17,490 --> 00:07:23,879
<font color="#CCCCCC">people</font><font color="#E5E5E5"> to be born in Australia before</font>

168
00:07:18,900 --> 00:07:25,080
<font color="#E5E5E5">the demo works</font><font color="#CCCCCC"> okay so</font><font color="#E5E5E5"> I briefly kind of</font>

169
00:07:23,879 --> 00:07:27,960
covered this<font color="#CCCCCC"> earlier soundbox</font>

170
00:07:25,080 --> 00:07:30,599
capabilities<font color="#E5E5E5"> what sandboxes can do is</font>

171
00:07:27,960 --> 00:07:32,310
they can<font color="#E5E5E5"> manipulate system time they can</font>

172
00:07:30,599 --> 00:07:33,870
manipulate values from external sources

173
00:07:32,310 --> 00:07:36,569
and crucially they can do something

174
00:07:33,870 --> 00:07:38,759
<font color="#CCCCCC">called</font><font color="#E5E5E5"> multipath execution that's where</font>

175
00:07:36,569 --> 00:07:41,190
you have<font color="#CCCCCC"> a conditional statement in</font>

176
00:07:38,759 --> 00:07:43,530
malware and the sandbox can take both

177
00:07:41,190 --> 00:07:45,479
branches<font color="#E5E5E5"> or more than one branch of that</font>

178
00:07:43,530 --> 00:07:48,179
conditional statement<font color="#CCCCCC"> to see what would</font>

179
00:07:45,479 --> 00:07:52,710
happen<font color="#E5E5E5"> regardless of whether the</font>

180
00:07:48,180 --> 00:07:53,539
condition is<font color="#CCCCCC"> true or not so it's hard</font>

181
00:07:52,710 --> 00:07:56,340
<font color="#E5E5E5">not puzzles</font>

182
00:07:53,539 --> 00:07:59,818
<font color="#CCCCCC">thomna</font><font color="#E5E5E5"> puzzles are a cryptographic</font>

183
00:07:56,340 --> 00:08:03,448
construct<font color="#E5E5E5"> it's quite an obscure sub</font>

184
00:07:59,819 --> 00:08:04,590
branch of cryptography<font color="#E5E5E5"> brief show of</font>

185
00:08:03,449 --> 00:08:09,360
hands has anyone heard<font color="#E5E5E5"> of Tom not</font>

186
00:08:04,590 --> 00:08:12,119
<font color="#CCCCCC">puzzles before</font><font color="#E5E5E5"> one two people I think</font>

187
00:08:09,360 --> 00:08:13,650
<font color="#CCCCCC">okay</font><font color="#E5E5E5"> so the idea</font><font color="#CCCCCC"> behind atomic puzzle is</font>

188
00:08:12,120 --> 00:08:17,360
that<font color="#CCCCCC"> it's a cryptographic</font><font color="#E5E5E5"> puzzle and the</font>

189
00:08:13,650 --> 00:08:19,469
solution to<font color="#CCCCCC"> it is generated over</font><font color="#E5E5E5"> time</font>

190
00:08:17,360 --> 00:08:20,610
<font color="#CCCCCC">sometimes it can be a</font><font color="#E5E5E5"> kind</font><font color="#CCCCCC"> of variation</font>

191
00:08:19,469 --> 00:08:24,240
of a<font color="#E5E5E5"> brute-force attack so it's</font>

192
00:08:20,610 --> 00:08:27,990
essentially brute forcing itself Timothy

193
00:08:24,240 --> 00:08:29,819
may of the<font color="#E5E5E5"> cypherpunks in</font><font color="#CCCCCC"> 1992 kind of</font>

194
00:08:27,990 --> 00:08:33,089
first suggested the concepts and then

195
00:08:29,819 --> 00:08:35,880
<font color="#E5E5E5">reversed than others in 1999 implemented</font>

196
00:08:33,089 --> 00:08:38,610
at a practical peripheral concept<font color="#E5E5E5"> and</font>

197
00:08:35,880 --> 00:08:40,939
the initial intention behind<font color="#CCCCCC"> sonic</font>

198
00:08:38,610 --> 00:08:43,050
puzzles was for them to<font color="#CCCCCC"> be benign</font>

199
00:08:40,940 --> 00:08:46,620
essentially a<font color="#CCCCCC"> kind of</font><font color="#E5E5E5"> digital time</font>

200
00:08:43,049 --> 00:08:49,050
capsule<font color="#E5E5E5"> and the ideal atomic puzzle as</font>

201
00:08:46,620 --> 00:08:51,570
suggested by<font color="#CCCCCC"> Rivest and others would be</font>

202
00:08:49,050 --> 00:08:53,069
resistant to parallelization<font color="#E5E5E5"> to</font>

203
00:08:51,570 --> 00:08:54,589
<font color="#CCCCCC">distributed attempts and that kind of</font>

204
00:08:53,070 --> 00:08:57,690
thing

205
00:08:54,589 --> 00:09:00,570
other uses included<font color="#E5E5E5"> are sealed auction</font>

206
00:08:57,690 --> 00:09:02,940
bids<font color="#E5E5E5"> so your bid</font><font color="#CCCCCC"> for a lot that an</font>

207
00:09:00,570 --> 00:09:05,100
auction wouldn't be available<font color="#CCCCCC"> until</font>

208
00:09:02,940 --> 00:09:06,329
everyone had put their bids in releasing

209
00:09:05,100 --> 00:09:08,459
<font color="#E5E5E5">classified information</font>

210
00:09:06,329 --> 00:09:14,519
after a certain period<font color="#E5E5E5"> of</font><font color="#CCCCCC"> time</font><font color="#E5E5E5"> and</font>

211
00:09:08,459 --> 00:09:17,368
escrow for contracts so this is<font color="#E5E5E5"> a brief</font>

212
00:09:14,519 --> 00:09:18,329
<font color="#E5E5E5">excerpt from the implementation</font><font color="#CCCCCC"> MIT and</font>

213
00:09:17,369 --> 00:09:22,170
by<font color="#CCCCCC"> Rivest</font>

214
00:09:18,329 --> 00:09:24,388
<font color="#E5E5E5">and others in 1999 so they have a kind</font>

215
00:09:22,170 --> 00:09:27,238
of digital<font color="#E5E5E5"> time capsule running at the</font>

216
00:09:24,389 --> 00:09:31,709
<font color="#E5E5E5">MIT computer science department which</font>

217
00:09:27,239 --> 00:09:34,170
should decrypt<font color="#E5E5E5"> roughly 2033 so it</font>

218
00:09:31,709 --> 00:09:38,910
started in 1999<font color="#CCCCCC"> should</font><font color="#E5E5E5"> take</font><font color="#CCCCCC"> about 35</font>

219
00:09:34,170 --> 00:09:42,689
years<font color="#CCCCCC"> to solve so Tom not puzzles</font><font color="#E5E5E5"> for</font>

220
00:09:38,910 --> 00:09:44,429
attack so<font color="#E5E5E5"> the kind of concept</font><font color="#CCCCCC"> here is</font>

221
00:09:42,689 --> 00:09:47,910
<font color="#CCCCCC">that you can achieve the</font><font color="#E5E5E5"> late execution</font>

222
00:09:44,429 --> 00:09:49,199
<font color="#E5E5E5">but without having to</font><font color="#CCCCCC"> use conditional</font>

223
00:09:47,910 --> 00:09:53,309
statements<font color="#E5E5E5"> without having to rely on</font>

224
00:09:49,199 --> 00:09:55,559
timestamps or anything like<font color="#E5E5E5"> that so an</font>

225
00:09:53,309 --> 00:09:57,839
example attack here would be you have

226
00:09:55,559 --> 00:10:00,029
some malicious payload<font color="#E5E5E5"> you encrypt it</font>

227
00:09:57,839 --> 00:10:02,100
with<font color="#CCCCCC"> a key which has been generated with</font>

228
00:10:00,029 --> 00:10:04,069
<font color="#E5E5E5">a torn-up puzzle you don't hard-code</font>

229
00:10:02,100 --> 00:10:06,779
that key into your decryption stub

230
00:10:04,069 --> 00:10:08,519
instead your stub has to generate<font color="#CCCCCC"> that</font>

231
00:10:06,779 --> 00:10:11,009
key by performing the same time lock

232
00:10:08,519 --> 00:10:13,350
puzzle<font color="#E5E5E5"> and that key will then be</font>

233
00:10:11,009 --> 00:10:16,649
generated after<font color="#E5E5E5"> X number</font><font color="#CCCCCC"> of cycles</font><font color="#E5E5E5"> or</font>

234
00:10:13,350 --> 00:10:17,819
loops or minutes<font color="#CCCCCC"> if you're looking</font><font color="#E5E5E5"> for</font>

235
00:10:16,649 --> 00:10:19,290
minutes it depends on<font color="#E5E5E5"> kind</font><font color="#CCCCCC"> of what</font>

236
00:10:17,819 --> 00:10:21,238
algorithm you're using or what kind of

237
00:10:19,290 --> 00:10:23,639
constructor using<font color="#E5E5E5"> once you've got the</font>

238
00:10:21,239 --> 00:10:25,230
key you decrypt<font color="#E5E5E5"> the payload and then you</font>

239
00:10:23,639 --> 00:10:28,589
can either run<font color="#E5E5E5"> that payload in memory or</font>

240
00:10:25,230 --> 00:10:31,319
<font color="#E5E5E5">write it to disk or whatever and the</font>

241
00:10:28,589 --> 00:10:33,299
benefits of<font color="#CCCCCC"> this for attackers for pen</font>

242
00:10:31,319 --> 00:10:35,099
testers and red teamers and so on would

243
00:10:33,299 --> 00:10:37,579
be<font color="#E5E5E5"> that you negate</font><font color="#CCCCCC"> multi-part execution</font>

244
00:10:35,100 --> 00:10:40,410
<font color="#E5E5E5">you negate that kind of system</font>

245
00:10:37,579 --> 00:10:42,809
<font color="#E5E5E5">manipulation of timestamps</font><font color="#CCCCCC"> obviously</font>

246
00:10:40,410 --> 00:10:44,910
negate<font color="#E5E5E5"> signature detection because we're</font>

247
00:10:42,809 --> 00:10:46,319
<font color="#E5E5E5">talking about encrypted content you</font>

248
00:10:44,910 --> 00:10:48,559
don't<font color="#CCCCCC"> have to rely</font><font color="#E5E5E5"> on any hard coded</font>

249
00:10:46,319 --> 00:10:50,819
keys in the<font color="#CCCCCC"> malware for decryption and</font>

250
00:10:48,559 --> 00:10:55,488
you will<font color="#CCCCCC"> so</font><font color="#E5E5E5"> wait out that analysis</font>

251
00:10:50,819 --> 00:10:58,979
<font color="#E5E5E5">period of</font><font color="#CCCCCC"> sandboxes as well the</font>

252
00:10:55,489 --> 00:11:00,389
disadvantages of<font color="#CCCCCC"> using it depending</font>

253
00:10:58,980 --> 00:11:02,730
again on what kind of<font color="#CCCCCC"> tomat possibly</font>

254
00:11:00,389 --> 00:11:04,619
using<font color="#CCCCCC"> it</font><font color="#E5E5E5"> can take as</font><font color="#CCCCCC"> long to generate</font>

255
00:11:02,730 --> 00:11:06,809
the key as<font color="#CCCCCC"> it</font><font color="#E5E5E5"> would eventually to to</font>

256
00:11:04,619 --> 00:11:08,129
generate<font color="#CCCCCC"> it from the decryption stub</font><font color="#E5E5E5"> so</font>

257
00:11:06,809 --> 00:11:10,709
you might<font color="#E5E5E5"> be kind</font><font color="#CCCCCC"> of sitting</font><font color="#E5E5E5"> there for</font>

258
00:11:08,129 --> 00:11:13,230
two or<font color="#E5E5E5"> three hours or whatever waiting</font>

259
00:11:10,709 --> 00:11:15,599
<font color="#CCCCCC">for that key to be generated there are</font>

260
00:11:13,230 --> 00:11:17,269
heuristic markers photonic puzzles and

261
00:11:15,600 --> 00:11:19,920
I'll talk about<font color="#E5E5E5"> that</font><font color="#CCCCCC"> a bit later and</font>

262
00:11:17,269 --> 00:11:21,750
some of<font color="#E5E5E5"> them will</font><font color="#CCCCCC"> also be vulnerable</font>

263
00:11:19,920 --> 00:11:26,279
<font color="#E5E5E5">to parallelization and distributed</font>

264
00:11:21,750 --> 00:11:28,200
<font color="#CCCCCC">computing so I'm going</font><font color="#E5E5E5"> to show you some</font>

265
00:11:26,279 --> 00:11:32,250
proof<font color="#E5E5E5"> of concepts the proof of concepts</font>

266
00:11:28,200 --> 00:11:33,300
<font color="#E5E5E5">are predominantly string</font><font color="#CCCCCC"> text-based</font><font color="#E5E5E5"> but</font>

267
00:11:32,250 --> 00:11:35,519
right at<font color="#E5E5E5"> the end I've</font><font color="#CCCCCC"> got some actual</font>

268
00:11:33,300 --> 00:11:38,910
<font color="#E5E5E5">weaponized versions in macros and</font>

269
00:11:35,519 --> 00:11:41,430
executables as well so I'll jump

270
00:11:38,910 --> 00:11:44,730
straight into<font color="#E5E5E5"> it with a future timestamp</font>

271
00:11:41,430 --> 00:11:48,029
<font color="#CCCCCC">so in this case this isn't encrypted</font>

272
00:11:44,730 --> 00:11:50,490
<font color="#E5E5E5">it's using a timestamp in the future to</font>

273
00:11:48,029 --> 00:11:52,380
encrypt the malicious payload<font color="#CCCCCC"> and what</font>

274
00:11:50,490 --> 00:11:55,680
the<font color="#CCCCCC"> malware will then do is</font><font color="#E5E5E5"> get a</font>

275
00:11:52,380 --> 00:11:58,260
timestamp<font color="#CCCCCC"> or the system based or from a</font>

276
00:11:55,680 --> 00:12:01,079
server it will<font color="#E5E5E5"> then try and use</font><font color="#CCCCCC"> that as</font>

277
00:11:58,260 --> 00:12:02,160
a<font color="#E5E5E5"> decryption key if it doesn't work it</font>

278
00:12:01,079 --> 00:12:04,849
will<font color="#E5E5E5"> sleep for a certain amount of time</font>

279
00:12:02,160 --> 00:12:04,850
<font color="#E5E5E5">and then try</font><font color="#CCCCCC"> again</font>

280
00:12:12,959 --> 00:12:19,119
you'll notice<font color="#CCCCCC"> my</font><font color="#E5E5E5"> really</font><font color="#CCCCCC"> GUI skills here</font>

281
00:12:16,240 --> 00:12:20,740
as well<font color="#CCCCCC"> so here we're just</font><font color="#E5E5E5"> taking some</font>

282
00:12:19,120 --> 00:12:22,720
string which is<font color="#E5E5E5"> testing one two three</font>

283
00:12:20,740 --> 00:12:26,319
we're putting in some<font color="#CCCCCC"> timestamp</font><font color="#E5E5E5"> from</font><font color="#CCCCCC"> the</font>

284
00:12:22,720 --> 00:12:29,290
future<font color="#E5E5E5"> encrypting the</font><font color="#CCCCCC"> data and then this</font>

285
00:12:26,319 --> 00:12:32,889
malware<font color="#E5E5E5"> will just try once a minute</font><font color="#CCCCCC"> to</font>

286
00:12:29,290 --> 00:12:35,920
fetch a timestamp<font color="#E5E5E5"> from a server and try</font>

287
00:12:32,889 --> 00:12:38,259
<font color="#E5E5E5">and use that</font><font color="#CCCCCC"> as</font><font color="#E5E5E5"> the decryption key so I</font>

288
00:12:35,920 --> 00:12:44,498
will skip forward for this rather than

289
00:12:38,259 --> 00:12:47,319
<font color="#CCCCCC">making</font><font color="#E5E5E5"> you sit through</font><font color="#CCCCCC"> it okay and then</font>

290
00:12:44,499 --> 00:12:48,930
it then decruz the issue with<font color="#E5E5E5"> this of</font>

291
00:12:47,319 --> 00:12:52,748
course is<font color="#CCCCCC"> that</font><font color="#E5E5E5"> you're still</font><font color="#CCCCCC"> relying on</font>

292
00:12:48,930 --> 00:12:54,189
data<font color="#CCCCCC"> from a remote source which the</font>

293
00:12:52,749 --> 00:12:57,610
sandbox could could speak<font color="#E5E5E5"> for whatever</font>

294
00:12:54,189 --> 00:13:02,319
<font color="#E5E5E5">but</font><font color="#CCCCCC"> this is less susceptible to things</font>

295
00:12:57,610 --> 00:13:04,899
<font color="#E5E5E5">like multipath execution chained hashing</font>

296
00:13:02,319 --> 00:13:07,540
so this is one<font color="#CCCCCC"> of my</font><font color="#E5E5E5"> favorite ones with</font>

297
00:13:04,899 --> 00:13:09,670
this one we take some seed text it's

298
00:13:07,540 --> 00:13:13,569
just an arbitrary<font color="#E5E5E5"> string or value and</font>

299
00:13:09,670 --> 00:13:15,248
then we hash it<font color="#E5E5E5"> and then we hash</font><font color="#CCCCCC"> the</font>

300
00:13:13,569 --> 00:13:17,019
result and then<font color="#CCCCCC"> we hash the result of</font>

301
00:13:15,249 --> 00:13:19,449
<font color="#E5E5E5">that hash</font><font color="#CCCCCC"> and we keep going for in this</font>

302
00:13:17,019 --> 00:13:21,339
case<font color="#CCCCCC"> 10,000</font><font color="#E5E5E5"> iterations and said</font>

303
00:13:19,449 --> 00:13:23,589
eventually<font color="#CCCCCC"> we end up with a final hash</font>

304
00:13:21,339 --> 00:13:25,029
value<font color="#E5E5E5"> and we use</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> as the encryption</font>

305
00:13:23,589 --> 00:13:27,819
key encrypt the malicious payload with

306
00:13:25,029 --> 00:13:29,800
that<font color="#CCCCCC"> and starting</font><font color="#E5E5E5"> from the same seed the</font>

307
00:13:27,819 --> 00:13:31,089
only way to get that eventual hash value

308
00:13:29,800 --> 00:13:33,389
<font color="#E5E5E5">would be to repeat the entire chain</font>

309
00:13:31,089 --> 00:13:33,389
<font color="#CCCCCC">again</font>

310
00:13:39,929 --> 00:13:44,589
so in this case<font color="#E5E5E5"> where we're going with</font>

311
00:13:42,699 --> 00:13:46,628
<font color="#CCCCCC">10,000</font><font color="#E5E5E5"> iterations again that's the</font>

312
00:13:44,589 --> 00:13:54,849
length of the chain we just start with<font color="#E5E5E5"> a</font>

313
00:13:46,629 --> 00:13:56,379
<font color="#CCCCCC">random seed value</font><font color="#E5E5E5"> and a string and that</font>

314
00:13:54,849 --> 00:13:58,329
eventually gives<font color="#E5E5E5"> us some encrypted</font><font color="#CCCCCC"> text</font>

315
00:13:56,379 --> 00:14:11,679
and then to decrypt<font color="#E5E5E5"> the text we need to</font>

316
00:13:58,329 --> 00:14:17,378
repeat<font color="#CCCCCC"> that chain so</font><font color="#E5E5E5"> we pass in the the</font>

317
00:14:11,679 --> 00:14:19,209
<font color="#E5E5E5">number of iterations the seed value and</font>

318
00:14:17,379 --> 00:14:20,259
the<font color="#E5E5E5"> encrypted text and that</font><font color="#CCCCCC"> returns us</font>

319
00:14:19,209 --> 00:14:22,868
<font color="#CCCCCC">to the plaintext</font>

320
00:14:20,259 --> 00:14:25,299
there are ways this<font color="#E5E5E5"> could be could be</font>

321
00:14:22,869 --> 00:14:27,279
<font color="#E5E5E5">defeated</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> if you have kind of</font>

322
00:14:25,299 --> 00:14:30,098
<font color="#E5E5E5">accelerated</font><font color="#CCCCCC"> Hardware for instance like</font><font color="#E5E5E5"> a</font>

323
00:14:27,279 --> 00:14:31,329
world like a Bitcoin mining rig or

324
00:14:30,099 --> 00:14:33,429
<font color="#CCCCCC">something like that that could</font><font color="#E5E5E5"> be</font>

325
00:14:31,329 --> 00:14:38,949
<font color="#E5E5E5">probably configured and to do this a lot</font>

326
00:14:33,429 --> 00:14:40,119
quicker<font color="#CCCCCC"> brute-forcing weak keys</font><font color="#E5E5E5"> so this</font>

327
00:14:38,949 --> 00:14:43,329
works on the<font color="#E5E5E5"> principle of layered</font>

328
00:14:40,119 --> 00:14:45,729
encryption so you have some<font color="#E5E5E5"> text</font><font color="#CCCCCC"> that</font>

329
00:14:43,329 --> 00:14:49,988
you encrypt<font color="#E5E5E5"> with maybe three or four</font>

330
00:14:45,729 --> 00:14:52,449
<font color="#E5E5E5">very weak keys in layers</font><font color="#CCCCCC"> and then for</font>

331
00:14:49,989 --> 00:14:55,209
decryption<font color="#CCCCCC"> what will run on the the</font>

332
00:14:52,449 --> 00:14:57,039
<font color="#CCCCCC">victim's computer would be a</font><font color="#E5E5E5"> brute-force</font>

333
00:14:55,209 --> 00:15:04,358
algorithm<font color="#E5E5E5"> to brute-force all of those</font>

334
00:14:57,039 --> 00:15:07,659
layers<font color="#E5E5E5"> of encryption so in this instance</font>

335
00:15:04,359 --> 00:15:10,359
<font color="#E5E5E5">we</font><font color="#CCCCCC"> just need to pass in a string</font><font color="#E5E5E5"> to</font>

336
00:15:07,659 --> 00:15:11,829
encrypt<font color="#E5E5E5"> and then just some weak keys in</font>

337
00:15:10,359 --> 00:15:14,649
this case<font color="#CCCCCC"> there they're</font><font color="#E5E5E5"> three character</font>

338
00:15:11,829 --> 00:15:17,289
keys<font color="#E5E5E5"> three</font><font color="#CCCCCC"> of them that gives us some</font>

339
00:15:14,649 --> 00:15:19,659
encrypted<font color="#CCCCCC"> text and then</font><font color="#E5E5E5"> the decryption</font>

340
00:15:17,289 --> 00:15:22,679
<font color="#E5E5E5">process will just</font><font color="#CCCCCC"> brute-force</font><font color="#E5E5E5"> all of</font>

341
00:15:19,659 --> 00:15:22,679
those weak keys in sequence

342
00:15:37,680 --> 00:15:43,029
until we then retrieve the<font color="#CCCCCC"> plaintext so</font>

343
00:15:40,300 --> 00:15:44,260
this technique<font color="#E5E5E5"> has been</font><font color="#CCCCCC"> used in some</font>

344
00:15:43,029 --> 00:15:47,500
proof of concepts before<font color="#E5E5E5"> it's using</font>

345
00:15:44,260 --> 00:15:49,810
something called<font color="#E5E5E5"> our crypto</font><font color="#CCCCCC"> a kind</font><font color="#E5E5E5"> of</font>

346
00:15:47,500 --> 00:15:54,550
similar version<font color="#E5E5E5"> to it is used in</font>

347
00:15:49,810 --> 00:15:57,189
Hyperion<font color="#E5E5E5"> as well repeated squaring so</font>

348
00:15:54,550 --> 00:15:59,410
this is the technique that's used for

349
00:15:57,190 --> 00:16:02,490
<font color="#E5E5E5">the MIT implementation by</font><font color="#CCCCCC"> Rivas than</font>

350
00:15:59,410 --> 00:16:11,920
others<font color="#E5E5E5"> so this is essentially trying to</font>

351
00:16:02,490 --> 00:16:16,089
do RSA factorization<font color="#CCCCCC"> so what we do with</font>

352
00:16:11,920 --> 00:16:21,040
this one is<font color="#CCCCCC"> we specify two Prime's a</font>

353
00:16:16,089 --> 00:16:23,850
difficulty value and the test string and

354
00:16:21,040 --> 00:16:23,849
the string to encrypt

355
00:16:30,040 --> 00:16:36,380
that then outputs<font color="#E5E5E5"> the modulus of those</font>

356
00:16:33,770 --> 00:16:37,790
two prime numbers<font color="#CCCCCC"> we</font><font color="#E5E5E5"> already know the</font>

357
00:16:36,380 --> 00:16:42,050
difficulty value which we have to<font color="#E5E5E5"> use on</font>

358
00:16:37,790 --> 00:16:44,870
the decryption side and a<font color="#E5E5E5"> kind of secret</font>

359
00:16:42,050 --> 00:16:47,359
<font color="#E5E5E5">value</font><font color="#CCCCCC"> our encrypted</font><font color="#E5E5E5"> text so</font><font color="#CCCCCC"> we pass in</font>

360
00:16:44,870 --> 00:16:53,030
those three<font color="#E5E5E5"> things the the modulus the</font>

361
00:16:47,360 --> 00:16:55,820
difficulty and<font color="#E5E5E5"> the secret value and then</font>

362
00:16:53,030 --> 00:16:59,990
repeated squaring is then<font color="#E5E5E5"> performed on</font>

363
00:16:55,820 --> 00:17:05,480
those and<font color="#E5E5E5"> so eventually we end up with</font>

364
00:16:59,990 --> 00:17:07,940
the<font color="#CCCCCC"> plaintext again client/server so</font>

365
00:17:05,480 --> 00:17:09,380
again this is potentially subject<font color="#E5E5E5"> to the</font>

366
00:17:07,940 --> 00:17:11,930
<font color="#E5E5E5">weakness</font><font color="#CCCCCC"> that you're relying on on some</font>

367
00:17:09,380 --> 00:17:15,920
remote<font color="#E5E5E5"> source</font><font color="#CCCCCC"> but this one's slightly</font>

368
00:17:11,930 --> 00:17:19,150
<font color="#E5E5E5">different so in this case you initially</font>

369
00:17:15,920 --> 00:17:21,760
encrypt your malware with a<font color="#CCCCCC"> a timestamp</font>

370
00:17:19,150 --> 00:17:25,820
<font color="#E5E5E5">concatenated</font><font color="#CCCCCC"> with some</font><font color="#E5E5E5"> secret value</font>

371
00:17:21,760 --> 00:17:27,230
which is stored on<font color="#E5E5E5"> a server and</font><font color="#CCCCCC"> you hash</font>

372
00:17:25,819 --> 00:17:29,240
those together you use the hash key to

373
00:17:27,230 --> 00:17:31,670
encrypt<font color="#CCCCCC"> your malware and then what the</font>

374
00:17:29,240 --> 00:17:33,110
client does every X minutes<font color="#E5E5E5"> is</font><font color="#CCCCCC"> what</font>

375
00:17:31,670 --> 00:17:36,290
<font color="#CCCCCC">we'll reach out</font><font color="#E5E5E5"> to that server and it</font>

376
00:17:33,110 --> 00:17:38,479
will retrieve<font color="#E5E5E5"> a hash of the server's</font>

377
00:17:36,290 --> 00:17:41,060
current timestamp<font color="#E5E5E5"> concatenated with</font><font color="#CCCCCC"> that</font>

378
00:17:38,480 --> 00:17:44,530
<font color="#E5E5E5">secret value to</font><font color="#CCCCCC"> determine if the the</font>

379
00:17:41,060 --> 00:17:44,530
decryption key is<font color="#E5E5E5"> correct</font>

380
00:17:50,810 --> 00:17:55,230
so in this case again<font color="#E5E5E5"> in the interest of</font>

381
00:17:53,250 --> 00:17:58,860
saving time<font color="#E5E5E5"> the time stamp has already</font>

382
00:17:55,230 --> 00:18:02,400
occurred so it will decrypt instantly<font color="#CCCCCC"> so</font>

383
00:17:58,860 --> 00:18:05,000
this is the encryption key so it's just

384
00:18:02,400 --> 00:18:09,050
<font color="#E5E5E5">a matter of passing that to the</font>

385
00:18:05,000 --> 00:18:09,050
application and encrypting the<font color="#CCCCCC"> plaintext</font>

386
00:18:16,019 --> 00:18:23,080
and then this is<font color="#CCCCCC"> what</font><font color="#E5E5E5"> the server will</font>

387
00:18:19,929 --> 00:18:25,509
<font color="#CCCCCC">return to the malware</font><font color="#E5E5E5"> when it updates so</font>

388
00:18:23,080 --> 00:18:27,490
it's a again the current<font color="#CCCCCC"> timestamp</font>

389
00:18:25,509 --> 00:18:30,269
<font color="#E5E5E5">concatenate it with some secret value</font>

390
00:18:27,490 --> 00:18:30,269
<font color="#E5E5E5">and hash together</font>

391
00:18:42,500 --> 00:18:45,770
<font color="#E5E5E5">okay so that</font><font color="#CCCCCC"> decrypts instantly in that</font>

392
00:18:44,510 --> 00:18:48,200
case<font color="#E5E5E5"> but you could</font><font color="#CCCCCC"> obviously set your</font>

393
00:18:45,770 --> 00:18:52,910
timestamp to be a day or a week<font color="#CCCCCC"> or a</font>

394
00:18:48,200 --> 00:18:54,860
month in the future<font color="#CCCCCC"> chain pseudo-random</font>

395
00:18:52,910 --> 00:18:58,490
number generators<font color="#CCCCCC"> this is very similar</font>

396
00:18:54,860 --> 00:18:59,870
<font color="#CCCCCC">to the serial hashing concept</font><font color="#E5E5E5"> so again</font>

397
00:18:58,490 --> 00:19:03,560
you start off<font color="#E5E5E5"> with some seed in this</font>

398
00:18:59,870 --> 00:19:06,560
case it's a number<font color="#CCCCCC"> you</font><font color="#E5E5E5"> specify a number</font>

399
00:19:03,560 --> 00:19:09,110
of<font color="#CCCCCC"> iterations</font><font color="#E5E5E5"> and then</font><font color="#CCCCCC"> you run</font><font color="#E5E5E5"> through a</font>

400
00:19:06,560 --> 00:19:12,679
<font color="#CCCCCC">PRNG I'm starting</font><font color="#E5E5E5"> with</font><font color="#CCCCCC"> that value as the</font>

401
00:19:09,110 --> 00:19:14,270
seed and then repeat<font color="#CCCCCC"> that</font><font color="#E5E5E5"> and then</font>

402
00:19:12,680 --> 00:19:15,080
<font color="#E5E5E5">eventually do</font><font color="#CCCCCC"> something with that</font><font color="#E5E5E5"> number</font>

403
00:19:14,270 --> 00:19:16,580
at the end so you<font color="#E5E5E5"> could either</font>

404
00:19:15,080 --> 00:19:18,770
concatenate<font color="#E5E5E5"> them all together for the</font>

405
00:19:16,580 --> 00:19:20,929
number of iterations you've got or you

406
00:19:18,770 --> 00:19:22,160
<font color="#E5E5E5">can hash them or whatever and then use</font>

407
00:19:20,930 --> 00:19:29,630
that<font color="#E5E5E5"> as the encryption in the encryption</font>

408
00:19:22,160 --> 00:19:32,180
<font color="#CCCCCC">key so in this</font><font color="#E5E5E5"> case we have a seed of</font>

409
00:19:29,630 --> 00:19:34,310
<font color="#CCCCCC">one two three four five</font><font color="#E5E5E5"> we're going to</font>

410
00:19:32,180 --> 00:19:36,560
do it five times<font color="#CCCCCC"> five lots of 10,000</font>

411
00:19:34,310 --> 00:19:40,190
iterations<font color="#CCCCCC"> and</font><font color="#E5E5E5"> this is our test string</font>

412
00:19:36,560 --> 00:19:43,190
to encrypt this will then run through

413
00:19:40,190 --> 00:19:47,480
five<font color="#CCCCCC"> lots of</font><font color="#E5E5E5"> 10,000 iterations until we</font>

414
00:19:43,190 --> 00:19:49,010
get<font color="#E5E5E5"> a</font><font color="#CCCCCC"> final value</font><font color="#E5E5E5"> and then use that as</font>

415
00:19:47,480 --> 00:19:50,840
the<font color="#E5E5E5"> encryption key for the plaintext and</font>

416
00:19:49,010 --> 00:19:52,400
then to decrypt<font color="#E5E5E5"> that you perform the</font>

417
00:19:50,840 --> 00:19:55,490
same thing again<font color="#CCCCCC"> so</font><font color="#E5E5E5"> all you need to</font><font color="#CCCCCC"> know</font>

418
00:19:52,400 --> 00:19:59,270
is the initial seed value<font color="#E5E5E5"> the</font><font color="#CCCCCC"> number of</font>

419
00:19:55,490 --> 00:20:02,000
iterations and<font color="#CCCCCC"> the encrypted text</font><font color="#E5E5E5"> and it</font>

420
00:19:59,270 --> 00:20:06,710
will<font color="#CCCCCC"> then just repeat the sequence until</font>

421
00:20:02,000 --> 00:20:08,660
you can decrypt the plaintext<font color="#E5E5E5"> okay this</font>

422
00:20:06,710 --> 00:20:12,520
is definitely<font color="#E5E5E5"> my</font><font color="#CCCCCC"> favorite one so this</font><font color="#E5E5E5"> is</font>

423
00:20:08,660 --> 00:20:15,190
proof of work<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is based on the same</font>

424
00:20:12,520 --> 00:20:17,629
algorithm that's<font color="#CCCCCC"> used in Bitcoin mining</font>

425
00:20:15,190 --> 00:20:20,200
so if you're not<font color="#CCCCCC"> familiar</font><font color="#E5E5E5"> with</font><font color="#CCCCCC"> how it</font>

426
00:20:17,630 --> 00:20:24,050
<font color="#CCCCCC">works it is pretty simple</font><font color="#E5E5E5"> so you have</font>

427
00:20:20,200 --> 00:20:25,910
some target hash value and you select a

428
00:20:24,050 --> 00:20:27,649
certain substring of<font color="#E5E5E5"> the hash value</font><font color="#CCCCCC"> and</font>

429
00:20:25,910 --> 00:20:29,150
that<font color="#E5E5E5"> the length of that substring</font>

430
00:20:27,650 --> 00:20:31,160
determines how<font color="#CCCCCC"> long it's going to take</font>

431
00:20:29,150 --> 00:20:32,900
because what you're<font color="#CCCCCC"> looking for is a</font>

432
00:20:31,160 --> 00:20:35,750
partial hash collision<font color="#E5E5E5"> for that</font>

433
00:20:32,900 --> 00:20:37,460
substring so in this<font color="#E5E5E5"> case it's</font><font color="#CCCCCC"> three</font>

434
00:20:35,750 --> 00:20:40,790
it's the<font color="#E5E5E5"> first three</font><font color="#CCCCCC"> characters which in</font>

435
00:20:37,460 --> 00:20:47,590
this case is ABC<font color="#CCCCCC"> and then you will hash</font>

436
00:20:40,790 --> 00:20:49,970
some data<font color="#CCCCCC"> plus</font><font color="#E5E5E5"> a nonce value</font><font color="#CCCCCC"> and if the</font>

437
00:20:47,590 --> 00:20:52,459
substring of the hash of<font color="#E5E5E5"> the result</font>

438
00:20:49,970 --> 00:20:54,910
matches<font color="#E5E5E5"> the substring of the target hash</font>

439
00:20:52,460 --> 00:20:58,810
then you've won

440
00:20:54,910 --> 00:21:00,670
and you know bitcoins of mind<font color="#CCCCCC"> if not</font>

441
00:20:58,810 --> 00:21:02,560
increment<font color="#CCCCCC"> the months by one and then</font><font color="#E5E5E5"> try</font>

442
00:21:00,670 --> 00:21:04,630
<font color="#E5E5E5">again</font><font color="#CCCCCC"> and keep going</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> keep going</font><font color="#E5E5E5"> and</font>

443
00:21:02,560 --> 00:21:07,750
<font color="#CCCCCC">keep going and if you still</font><font color="#E5E5E5"> can't get it</font>

444
00:21:04,630 --> 00:21:09,340
after<font color="#CCCCCC"> you've exhausted</font><font color="#E5E5E5"> that the amount</font>

445
00:21:07,750 --> 00:21:11,200
<font color="#E5E5E5">of</font><font color="#CCCCCC"> non C's that are available then you</font>

446
00:21:09,340 --> 00:21:13,379
<font color="#E5E5E5">change something in the data so the time</font>

447
00:21:11,200 --> 00:21:16,930
<font color="#E5E5E5">stamp for instance and then start again</font>

448
00:21:13,380 --> 00:21:20,890
so in Bitcoin<font color="#E5E5E5"> this takes about</font><font color="#CCCCCC"> ten</font>

449
00:21:16,930 --> 00:21:22,960
minutes<font color="#E5E5E5"> to</font><font color="#CCCCCC"> find a solution here</font><font color="#E5E5E5"> we're</font>

450
00:21:20,890 --> 00:21:24,460
doing<font color="#CCCCCC"> something</font><font color="#E5E5E5"> slightly different</font><font color="#CCCCCC"> we</font>

451
00:21:22,960 --> 00:21:27,190
still have a target hash we still have a

452
00:21:24,460 --> 00:21:29,710
substring we're still attempting<font color="#E5E5E5"> our</font>

453
00:21:27,190 --> 00:21:32,230
attempts are a hash<font color="#E5E5E5"> of some day so plus</font>

454
00:21:29,710 --> 00:21:34,390
<font color="#CCCCCC">an</font><font color="#E5E5E5"> Lance value what we're using is the</font>

455
00:21:32,230 --> 00:21:44,590
<font color="#E5E5E5">encryption key is the eventual hash</font>

456
00:21:34,390 --> 00:21:46,300
value the whole thing so all<font color="#E5E5E5"> we're doing</font>

457
00:21:44,590 --> 00:21:48,310
<font color="#CCCCCC">here is we're specifying some plain text</font>

458
00:21:46,300 --> 00:21:49,690
that<font color="#E5E5E5"> we're going to encrypt and the</font>

459
00:21:48,310 --> 00:21:51,460
length of the substring which will

460
00:21:49,690 --> 00:21:56,310
determine roughly how<font color="#CCCCCC"> long this will</font>

461
00:21:51,460 --> 00:21:56,310
take<font color="#E5E5E5"> or how difficult</font><font color="#CCCCCC"> is going to be</font>

462
00:22:02,500 --> 00:22:06,920
that thing<font color="#E5E5E5"> gives us some encrypted text</font>

463
00:22:04,520 --> 00:22:10,820
<font color="#E5E5E5">and then to decrypt it we just need to</font>

464
00:22:06,920 --> 00:22:11,870
pass in the the<font color="#CCCCCC"> ciphertext and the</font>

465
00:22:10,820 --> 00:22:17,899
difficulty<font color="#E5E5E5"> again and it would just</font>

466
00:22:11,870 --> 00:22:20,590
<font color="#E5E5E5">repeat the function so the really nice</font>

467
00:22:17,900 --> 00:22:23,900
thing about this<font color="#E5E5E5"> is that there are</font>

468
00:22:20,590 --> 00:22:25,310
multiple results multiple hash values

469
00:22:23,900 --> 00:22:27,860
and non C's which will<font color="#E5E5E5"> satisfy that</font>

470
00:22:25,310 --> 00:22:29,629
<font color="#E5E5E5">substring condition but there's only one</font>

471
00:22:27,860 --> 00:22:33,830
hash value which is going<font color="#E5E5E5"> to work as a</font>

472
00:22:29,630 --> 00:22:35,630
<font color="#E5E5E5">decryption key so if you're starting you</font>

473
00:22:33,830 --> 00:22:37,220
could start<font color="#CCCCCC"> at like a nonce of five</font>

474
00:22:35,630 --> 00:22:39,110
hundred<font color="#E5E5E5"> thousand or five million or</font><font color="#CCCCCC"> five</font>

475
00:22:37,220 --> 00:22:42,410
billion or<font color="#CCCCCC"> something like that and you</font>

476
00:22:39,110 --> 00:22:44,030
could very well<font color="#E5E5E5"> easily</font><font color="#CCCCCC"> get a successful</font>

477
00:22:42,410 --> 00:22:45,980
result<font color="#CCCCCC"> but it doesn't mean</font><font color="#E5E5E5"> it's going to</font>

478
00:22:44,030 --> 00:22:49,190
be the same hash value<font color="#E5E5E5"> that you've used</font>

479
00:22:45,980 --> 00:22:52,100
<font color="#E5E5E5">to encrypt because Bitcoin mining and</font>

480
00:22:49,190 --> 00:22:53,840
<font color="#E5E5E5">proof-of-work</font><font color="#CCCCCC"> isn't it's</font><font color="#E5E5E5"> more of a</font>

481
00:22:52,100 --> 00:22:58,399
lottery<font color="#E5E5E5"> so every</font><font color="#CCCCCC"> nonsuit wire has got an</font>

482
00:22:53,840 --> 00:23:00,919
equal<font color="#CCCCCC"> chance of</font><font color="#E5E5E5"> winning</font><font color="#CCCCCC"> okay so some</font>

483
00:22:58,400 --> 00:23:02,840
<font color="#E5E5E5">practical applications so what I'm going</font>

484
00:23:00,920 --> 00:23:05,300
<font color="#CCCCCC">to show</font><font color="#E5E5E5"> you now is proof of work as an</font>

485
00:23:02,840 --> 00:23:08,030
executable stub so actually<font color="#E5E5E5"> bypassing</font>

486
00:23:05,300 --> 00:23:12,409
antivirus product then proof of work as

487
00:23:08,030 --> 00:23:17,000
a<font color="#E5E5E5"> couple of VBA macros and then</font><font color="#CCCCCC"> sewer</font>

488
00:23:12,410 --> 00:23:19,220
hash training<font color="#E5E5E5"> is VBA</font><font color="#CCCCCC"> macro as well okay</font>

489
00:23:17,000 --> 00:23:22,430
so this is as an<font color="#E5E5E5"> exit stub so in this</font>

490
00:23:19,220 --> 00:23:24,860
case our malicious payload is calc<font color="#CCCCCC"> and</font>

491
00:23:22,430 --> 00:23:26,830
<font color="#CCCCCC">msfn and payload</font><font color="#E5E5E5"> which is obviously</font>

492
00:23:24,860 --> 00:23:29,270
going to trigger<font color="#E5E5E5"> antivirus straightaway</font>

493
00:23:26,830 --> 00:23:32,060
we're going to encrypt<font color="#E5E5E5"> that so this</font>

494
00:23:29,270 --> 00:23:36,040
<font color="#E5E5E5">would be on the attacker side this takes</font>

495
00:23:32,060 --> 00:23:36,040
about a minute<font color="#E5E5E5"> I will skip forward</font>

496
00:23:38,860 --> 00:23:44,709
and once this<font color="#E5E5E5"> encryption process</font><font color="#CCCCCC"> has</font>

497
00:23:41,230 --> 00:23:46,179
<font color="#CCCCCC">finished what we end up with is a blob</font>

498
00:23:44,710 --> 00:23:54,220
with encrypted<font color="#E5E5E5"> data</font><font color="#CCCCCC"> which is the</font>

499
00:23:46,179 --> 00:23:56,830
<font color="#E5E5E5">encrypted form of that</font><font color="#CCCCCC"> MSF nm payload so</font>

500
00:23:54,220 --> 00:23:58,809
just to<font color="#CCCCCC"> demonstrate if you try and run</font>

501
00:23:56,830 --> 00:24:05,590
that as an<font color="#E5E5E5"> X</font><font color="#CCCCCC"> E it's obviously</font><font color="#E5E5E5"> not going</font>

502
00:23:58,809 --> 00:24:07,690
<font color="#E5E5E5">to work so what actually is going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be</font>

503
00:24:05,590 --> 00:24:09,428
<font color="#E5E5E5">opened by the victim in this case is the</font>

504
00:24:07,690 --> 00:24:11,309
decryption stub<font color="#E5E5E5"> and what we're going to</font>

505
00:24:09,429 --> 00:24:13,809
<font color="#E5E5E5">do is add in that encrypted resource</font>

506
00:24:11,309 --> 00:24:16,210
<font color="#E5E5E5">sorry that encrypted blob of data as a</font>

507
00:24:13,809 --> 00:24:17,769
resource<font color="#CCCCCC"> to the decryption stuff</font><font color="#E5E5E5"> so the</font>

508
00:24:16,210 --> 00:24:21,029
decryption<font color="#E5E5E5"> stub is going to run</font><font color="#CCCCCC"> exactly</font>

509
00:24:17,769 --> 00:24:25,690
the same process<font color="#CCCCCC"> but once it</font>

510
00:24:21,029 --> 00:24:27,519
successfully<font color="#E5E5E5"> mines</font><font color="#CCCCCC"> as a problem it's</font>

511
00:24:25,690 --> 00:24:34,779
then going<font color="#E5E5E5"> to decrypt the encrypted</font>

512
00:24:27,519 --> 00:24:37,240
<font color="#E5E5E5">resource and run it in memory</font><font color="#CCCCCC"> ok so this</font>

513
00:24:34,779 --> 00:24:39,760
is our decryption<font color="#E5E5E5"> stub our new</font>

514
00:24:37,240 --> 00:24:41,169
<font color="#E5E5E5">executable so if we copy both of these</font>

515
00:24:39,760 --> 00:24:44,408
<font color="#E5E5E5">over to a virtual</font><font color="#CCCCCC"> machine that's</font><font color="#E5E5E5"> just</font>

516
00:24:41,169 --> 00:24:47,139
got<font color="#CCCCCC"> a standard</font><font color="#E5E5E5"> consumer antivirus</font>

517
00:24:44,409 --> 00:24:48,730
product running on it you can see MSF

518
00:24:47,139 --> 00:24:51,729
<font color="#CCCCCC">finem gets blocked straight away and</font>

519
00:24:48,730 --> 00:24:54,909
<font color="#E5E5E5">deleted as you'd expect</font><font color="#CCCCCC"> other critical</font>

520
00:24:51,730 --> 00:24:57,519
stuff hasn't if we scan<font color="#CCCCCC"> it with the</font>

521
00:24:54,909 --> 00:24:58,840
antivirus product it's not<font color="#CCCCCC"> going to find</font>

522
00:24:57,519 --> 00:25:03,880
anything<font color="#E5E5E5"> obviously because it's still</font>

523
00:24:58,840 --> 00:25:05,139
encrypted<font color="#E5E5E5"> at this point if we run it you</font>

524
00:25:03,880 --> 00:25:07,799
can<font color="#E5E5E5"> see</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> going to do exactly the</font>

525
00:25:05,139 --> 00:25:07,799
same<font color="#CCCCCC"> process</font>

526
00:25:13,830 --> 00:25:18,310
so this is looking<font color="#CCCCCC"> for a partial hash</font>

527
00:25:16,900 --> 00:25:26,860
collision of four<font color="#E5E5E5"> characters in this</font>

528
00:25:18,310 --> 00:25:35,169
case it finds<font color="#E5E5E5"> it and then runs the</font>

529
00:25:26,860 --> 00:25:37,209
payload in memory okay and this is<font color="#CCCCCC"> VBA</font>

530
00:25:35,170 --> 00:25:40,120
macros<font color="#CCCCCC"> so this is a serial hash training</font>

531
00:25:37,210 --> 00:25:41,800
and the<font color="#CCCCCC"> proof-of-work</font><font color="#E5E5E5"> thing</font><font color="#CCCCCC"> so here</font>

532
00:25:40,120 --> 00:25:44,469
<font color="#E5E5E5">you'll be able to see it's the same</font>

533
00:25:41,800 --> 00:25:49,270
payload<font color="#E5E5E5"> msfn and</font><font color="#CCCCCC"> power calc it's just</font>

534
00:25:44,470 --> 00:25:50,770
been customized for VBA so this is the

535
00:25:49,270 --> 00:25:52,389
array of encrypted bytes the encryption

536
00:25:50,770 --> 00:25:54,190
has already<font color="#CCCCCC"> happened</font>

537
00:25:52,390 --> 00:25:58,270
<font color="#E5E5E5">and you can see in the the console</font>

538
00:25:54,190 --> 00:26:01,240
window here we're now doing<font color="#E5E5E5"> the hash</font>

539
00:25:58,270 --> 00:26:13,000
training in this case then pops up calc

540
00:26:01,240 --> 00:26:14,530
<font color="#CCCCCC">and this is the</font><font color="#E5E5E5"> proof-of-work demo so</font>

541
00:26:13,000 --> 00:26:17,880
again we have an array of encrypted<font color="#E5E5E5"> bias</font>

542
00:26:14,530 --> 00:26:17,879
that's already been encrypted

543
00:26:30,330 --> 00:26:34,580
and again if you<font color="#CCCCCC"> look</font><font color="#E5E5E5"> at the console</font>

544
00:26:32,519 --> 00:26:40,080
window you can see<font color="#CCCCCC"> it's then</font>

545
00:26:34,580 --> 00:26:41,610
<font color="#E5E5E5">brute-forcing</font><font color="#CCCCCC"> house hashes the one issue</font>

546
00:26:40,080 --> 00:26:44,279
with<font color="#E5E5E5"> this obviously</font><font color="#CCCCCC"> is it from the users</font>

547
00:26:41,610 --> 00:26:47,428
perspective if the the program<font color="#E5E5E5"> seems to</font>

548
00:26:44,279 --> 00:26:49,279
<font color="#E5E5E5">freeze when it's running so I don't know</font>

549
00:26:47,429 --> 00:26:51,690
if there's a way around that<font color="#E5E5E5"> possibly</font>

550
00:26:49,279 --> 00:26:56,370
but<font color="#E5E5E5"> that's kind of</font><font color="#CCCCCC"> that the one drawback</font>

551
00:26:51,690 --> 00:26:58,799
of using<font color="#CCCCCC"> it as a macro</font><font color="#E5E5E5"> okay and here are</font>

552
00:26:56,370 --> 00:27:01,379
some holy and practical applications

553
00:26:58,799 --> 00:27:03,990
<font color="#E5E5E5">that I haven't tried</font><font color="#CCCCCC"> much as I wanted to</font>

554
00:27:01,380 --> 00:27:06,179
<font color="#E5E5E5">I wasn't allowed</font><font color="#CCCCCC"> to so you could use</font>

555
00:27:03,990 --> 00:27:08,549
lasers so you could shine<font color="#E5E5E5"> a laser at the</font>

556
00:27:06,179 --> 00:27:09,990
moon or<font color="#CCCCCC"> something and time the</font><font color="#E5E5E5"> amount of</font>

557
00:27:08,549 --> 00:27:12,090
<font color="#E5E5E5">time that the reflected laser beam takes</font>

558
00:27:09,990 --> 00:27:15,809
<font color="#E5E5E5">to come back you could wait for planets</font>

559
00:27:12,090 --> 00:27:18,120
to<font color="#E5E5E5"> align in a certain</font><font color="#CCCCCC"> certain way you</font>

560
00:27:15,809 --> 00:27:20,309
could measure the time of orbit for an

561
00:27:18,120 --> 00:27:25,139
<font color="#E5E5E5">arbitrary</font><font color="#CCCCCC"> object around</font><font color="#E5E5E5"> a planet</font><font color="#CCCCCC"> you</font>

562
00:27:20,309 --> 00:27:26,428
<font color="#CCCCCC">could measure bacterial growth which</font>

563
00:27:25,139 --> 00:27:27,899
will<font color="#CCCCCC"> kind of vary obviously depending on</font>

564
00:27:26,429 --> 00:27:29,700
conditions and<font color="#E5E5E5"> that kind of thing the</font>

565
00:27:27,899 --> 00:27:32,129
one I really wanted to<font color="#E5E5E5"> do and really</font>

566
00:27:29,700 --> 00:27:33,990
wasn't<font color="#E5E5E5"> allowed to do was to look at the</font>

567
00:27:32,130 --> 00:27:36,059
half-life of different radioactive

568
00:27:33,990 --> 00:27:37,500
materials combined<font color="#CCCCCC"> together and wait</font><font color="#E5E5E5"> for</font>

569
00:27:36,059 --> 00:27:40,350
<font color="#E5E5E5">the ratio</font><font color="#CCCCCC"> of them to reach a certain</font>

570
00:27:37,500 --> 00:27:42,000
<font color="#CCCCCC">point but</font><font color="#E5E5E5"> there there are some massively</font>

571
00:27:40,350 --> 00:27:45,990
impractical and dangerous ways that you

572
00:27:42,000 --> 00:27:47,880
could do<font color="#CCCCCC"> Tonto puzzles as well okay so</font>

573
00:27:45,990 --> 00:27:50,039
countermeasures photonic puzzles if an

574
00:27:47,880 --> 00:27:51,450
attacker is using<font color="#CCCCCC"> a ton</font><font color="#E5E5E5"> of puzzle in a</font>

575
00:27:50,039 --> 00:27:54,629
piece<font color="#CCCCCC"> of malware what can be done</font><font color="#E5E5E5"> about</font>

576
00:27:51,450 --> 00:27:59,450
<font color="#CCCCCC">it</font><font color="#E5E5E5"> so I mentioned earlier heuristic</font>

577
00:27:54,630 --> 00:28:02,220
markers<font color="#CCCCCC"> and</font><font color="#E5E5E5"> there are some now I'm not</font>

578
00:27:59,450 --> 00:28:03,870
<font color="#E5E5E5">an</font><font color="#CCCCCC"> anti-virus</font><font color="#E5E5E5"> developer</font><font color="#CCCCCC"> a sandbox</font>

579
00:28:02,220 --> 00:28:05,580
developer I don't know<font color="#CCCCCC"> kind of even in</font>

580
00:28:03,870 --> 00:28:08,279
practice how difficult<font color="#E5E5E5"> these would be to</font>

581
00:28:05,580 --> 00:28:10,830
<font color="#E5E5E5">implement but some markers</font><font color="#CCCCCC"> that</font>

582
00:28:08,279 --> 00:28:13,260
definitely give things away as<font color="#CCCCCC"> tile no</font>

583
00:28:10,830 --> 00:28:14,519
puzzles would<font color="#E5E5E5"> be obviously encrypted</font>

584
00:28:13,260 --> 00:28:17,580
contents or some kind<font color="#CCCCCC"> of blob of</font>

585
00:28:14,519 --> 00:28:19,740
<font color="#E5E5E5">encrypted content dynamic key generation</font>

586
00:28:17,580 --> 00:28:21,539
<font color="#E5E5E5">so there's no</font><font color="#CCCCCC"> hard-coded key and the</font>

587
00:28:19,740 --> 00:28:25,700
keys not fetched from<font color="#E5E5E5"> some remote</font>

588
00:28:21,539 --> 00:28:25,700
resource<font color="#E5E5E5"> it's generated on the fly</font>

589
00:28:25,789 --> 00:28:30,658
<font color="#CCCCCC">multiple failed decryption attempts so</font>

590
00:28:28,350 --> 00:28:32,459
most time at puzzles<font color="#E5E5E5"> will attempt to as</font>

591
00:28:30,659 --> 00:28:35,700
you've seen kind<font color="#E5E5E5"> of try and brute-force</font>

592
00:28:32,460 --> 00:28:37,919
themselves<font color="#CCCCCC"> and</font><font color="#E5E5E5"> they're finally not</font>

593
00:28:35,700 --> 00:28:39,570
specific to<font color="#CCCCCC"> thomna puzzles but but</font>

594
00:28:37,919 --> 00:28:42,419
<font color="#E5E5E5">generally kind of process injection and</font>

595
00:28:39,570 --> 00:28:43,539
process hollowing<font color="#CCCCCC"> because obviously if</font>

596
00:28:42,419 --> 00:28:44,799
you just write and

597
00:28:43,539 --> 00:28:45,908
just<font color="#CCCCCC"> payload out to disk that's</font><font color="#E5E5E5"> still</font>

598
00:28:44,799 --> 00:28:52,139
<font color="#E5E5E5">going to trigger a</font><font color="#CCCCCC"> signature based</font>

599
00:28:45,909 --> 00:28:53,859
<font color="#E5E5E5">antivirus in some</font><font color="#CCCCCC"> cases there are</font>

600
00:28:52,139 --> 00:28:55,209
<font color="#E5E5E5">cryptography attacks that you could</font>

601
00:28:53,859 --> 00:28:56,939
<font color="#E5E5E5">deploy against Hamlet puzzles as well</font>

602
00:28:55,210 --> 00:28:59,789
<font color="#E5E5E5">from an analysis</font><font color="#CCCCCC"> I did</font><font color="#E5E5E5"> so</font>

603
00:28:56,940 --> 00:29:02,559
parallelization is obviously one

604
00:28:59,789 --> 00:29:05,799
<font color="#E5E5E5">distributed computing as well</font>

605
00:29:02,559 --> 00:29:08,229
one potential<font color="#E5E5E5"> technique you could use</font>

606
00:29:05,799 --> 00:29:09,999
from a sandbox perspective<font color="#E5E5E5"> here starting</font>

607
00:29:08,229 --> 00:29:13,749
your analysis period<font color="#E5E5E5"> after something is</font>

608
00:29:09,999 --> 00:29:14,979
decrypted which then kind of<font color="#E5E5E5"> notifies</font>

609
00:29:13,749 --> 00:29:18,389
<font color="#E5E5E5">the whole point of someone trying to</font>

610
00:29:14,979 --> 00:29:18,389
wait out an analysis period

611
00:29:18,720 --> 00:29:25,299
okay so toilet puzzles for defense<font color="#E5E5E5"> so</font>

612
00:29:23,169 --> 00:29:27,789
this has been kind of suggested in a lot

613
00:29:25,299 --> 00:29:29,408
of<font color="#E5E5E5"> literature over the last</font><font color="#CCCCCC"> kind of ten</font>

614
00:29:27,789 --> 00:29:31,450
or<font color="#CCCCCC"> fifteen years</font><font color="#E5E5E5"> and it's a really</font>

615
00:29:29,409 --> 00:29:34,239
<font color="#CCCCCC">interesting potential</font><font color="#E5E5E5"> applications on</font>

616
00:29:31,450 --> 00:29:37,239
your<font color="#E5E5E5"> puzzles predominantly to do with</font>

617
00:29:34,239 --> 00:29:39,700
DDoS mitigation<font color="#E5E5E5"> so the idea would be</font>

618
00:29:37,239 --> 00:29:42,159
that you<font color="#CCCCCC"> have a server let's say it's a</font>

619
00:29:39,700 --> 00:29:43,659
web server<font color="#E5E5E5"> that obviously accepts</font>

620
00:29:42,159 --> 00:29:45,479
incoming requests and gives clients

621
00:29:43,659 --> 00:29:48,970
<font color="#E5E5E5">access to resources</font>

622
00:29:45,479 --> 00:29:52,869
<font color="#CCCCCC">if the server becomes aware for some</font>

623
00:29:48,970 --> 00:29:55,210
reason that it's experiencing malicious

624
00:29:52,869 --> 00:29:58,509
traffic<font color="#E5E5E5"> or</font><font color="#CCCCCC"> if it's experiencing an</font>

625
00:29:55,210 --> 00:30:01,269
overload of<font color="#E5E5E5"> traffic it</font><font color="#CCCCCC"> can then almost</font>

626
00:29:58,509 --> 00:30:03,009
<font color="#E5E5E5">kind of switch on</font><font color="#CCCCCC"> torn up puzzle mode so</font>

627
00:30:01,269 --> 00:30:05,529
with<font color="#E5E5E5"> time that puzzle mode what and the</font>

628
00:30:03,009 --> 00:30:07,779
server would do would<font color="#CCCCCC"> be to give every</font>

629
00:30:05,529 --> 00:30:10,059
client requesting a resource<font color="#CCCCCC"> a time a</font>

630
00:30:07,779 --> 00:30:11,320
puzzle to solve it wouldn't be anywhere

631
00:30:10,059 --> 00:30:11,799
<font color="#CCCCCC">near as long as the ones I've shown you</font>

632
00:30:11,320 --> 00:30:13,720
<font color="#E5E5E5">here today</font>

633
00:30:11,799 --> 00:30:16,359
it might take on a three or four seconds

634
00:30:13,720 --> 00:30:18,220
<font color="#E5E5E5">something like that the client has</font><font color="#CCCCCC"> to</font>

635
00:30:16,359 --> 00:30:21,369
solve that<font color="#E5E5E5"> and submit</font><font color="#CCCCCC"> a solution to the</font>

636
00:30:18,220 --> 00:30:22,960
server<font color="#CCCCCC"> the server</font><font color="#E5E5E5"> then verifies it and</font>

637
00:30:21,369 --> 00:30:25,959
if it's correct<font color="#E5E5E5"> it will then allow the</font>

638
00:30:22,960 --> 00:30:29,190
<font color="#E5E5E5">client access to those resources if the</font>

639
00:30:25,960 --> 00:30:31,479
solution is incorrect<font color="#CCCCCC"> then</font><font color="#E5E5E5"> it won't and</font>

640
00:30:29,190 --> 00:30:33,940
you could kind<font color="#CCCCCC"> of adjust the difficulty</font>

641
00:30:31,479 --> 00:30:35,529
<font color="#CCCCCC">of those Tomica puzzles depending on you</font>

642
00:30:33,940 --> 00:30:37,509
know<font color="#E5E5E5"> the client profile what type</font><font color="#CCCCCC"> of</font>

643
00:30:35,529 --> 00:30:40,559
<font color="#E5E5E5">request it is how many clients you have</font>

644
00:30:37,509 --> 00:30:43,779
requesting resources that kind of<font color="#E5E5E5"> thing</font>

645
00:30:40,559 --> 00:30:46,840
<font color="#CCCCCC">and crucially</font><font color="#E5E5E5"> you don't necessarily need</font>

646
00:30:43,779 --> 00:30:48,279
<font color="#CCCCCC">to use it just for kind of HTTP HTTP</font>

647
00:30:46,840 --> 00:30:52,049
DDoS attacks you could use it<font color="#CCCCCC"> for things</font>

648
00:30:48,279 --> 00:30:53,980
like spam as well so one of the first

649
00:30:52,049 --> 00:30:55,980
implementations of<font color="#CCCCCC"> proof-of-work</font><font color="#E5E5E5"> with</font>

650
00:30:53,980 --> 00:30:57,960
<font color="#E5E5E5">something called hash</font>

651
00:30:55,980 --> 00:31:01,950
anyone heard of<font color="#CCCCCC"> hashcash before the show</font>

652
00:30:57,960 --> 00:31:04,440
<font color="#E5E5E5">hands</font><font color="#CCCCCC"> wonder</font><font color="#E5E5E5"> one person rather back</font><font color="#CCCCCC"> okay</font>

653
00:31:01,950 --> 00:31:06,180
<font color="#CCCCCC">are two</font><font color="#E5E5E5"> people okay</font><font color="#CCCCCC"> so hashcash</font><font color="#E5E5E5"> is</font>

654
00:31:04,440 --> 00:31:09,710
really interesting and it contributed a

655
00:31:06,180 --> 00:31:11,730
lot to the development of<font color="#CCCCCC"> Bitcoin</font>

656
00:31:09,710 --> 00:31:18,150
<font color="#CCCCCC">hashcash was written by a</font><font color="#E5E5E5"> guy called</font>

657
00:31:11,730 --> 00:31:18,600
<font color="#E5E5E5">Adam back in 1997 excuse me and the idea</font>

658
00:31:18,150 --> 00:31:21,870
behind

659
00:31:18,600 --> 00:31:24,629
<font color="#CCCCCC">hashcash was to disrupt the</font><font color="#E5E5E5"> whole</font>

660
00:31:21,870 --> 00:31:27,000
business<font color="#CCCCCC"> model of spammers</font><font color="#E5E5E5"> so the idea</font>

661
00:31:24,630 --> 00:31:29,700
was everyone would have<font color="#E5E5E5"> some kind of</font>

662
00:31:27,000 --> 00:31:31,470
add-on<font color="#CCCCCC"> plugin to their email client and</font>

663
00:31:29,700 --> 00:31:34,050
if you wanted<font color="#E5E5E5"> to send someone an email</font>

664
00:31:31,470 --> 00:31:35,670
<font color="#E5E5E5">your client would have to compute a very</font>

665
00:31:34,050 --> 00:31:36,379
very short time<font color="#CCCCCC"> what puzzle</font><font color="#E5E5E5"> a</font>

666
00:31:35,670 --> 00:31:38,790
<font color="#CCCCCC">proof-of-work</font>

667
00:31:36,380 --> 00:31:41,040
<font color="#E5E5E5">again it might take kind of four or five</font>

668
00:31:38,790 --> 00:31:43,200
six<font color="#E5E5E5"> seconds something</font><font color="#CCCCCC"> like that</font><font color="#E5E5E5"> once</font>

669
00:31:41,040 --> 00:31:45,300
that solution had been<font color="#E5E5E5"> generated it</font>

670
00:31:43,200 --> 00:31:47,280
would be attached to<font color="#E5E5E5"> the email or it</font>

671
00:31:45,300 --> 00:31:49,740
would<font color="#E5E5E5"> be inserted</font><font color="#CCCCCC"> into the email headers</font>

672
00:31:47,280 --> 00:31:52,590
when that email was then received by the

673
00:31:49,740 --> 00:31:54,570
recipient their email client would check

674
00:31:52,590 --> 00:31:56,939
the email headers for the presence of

675
00:31:54,570 --> 00:31:58,409
<font color="#E5E5E5">that solution verify at their end and if</font>

676
00:31:56,940 --> 00:31:58,860
it was correct<font color="#CCCCCC"> it would move it to the</font>

677
00:31:58,410 --> 00:32:01,110
<font color="#CCCCCC">Inbox</font>

678
00:31:58,860 --> 00:32:03,979
if it was<font color="#E5E5E5"> incorrect or just wasn't there</font>

679
00:32:01,110 --> 00:32:06,840
<font color="#E5E5E5">it would put it into</font><font color="#CCCCCC"> the spam folder</font><font color="#E5E5E5"> so</font>

680
00:32:03,980 --> 00:32:09,600
the idea the concept<font color="#CCCCCC"> behind it was</font><font color="#E5E5E5"> that</font>

681
00:32:06,840 --> 00:32:11,399
for a legitimate<font color="#CCCCCC"> sender waiting four or</font>

682
00:32:09,600 --> 00:32:13,500
five seconds<font color="#E5E5E5"> to send an email is no big</font>

683
00:32:11,400 --> 00:32:15,360
deal<font color="#E5E5E5"> but if you're a spammer that throws</font>

684
00:32:13,500 --> 00:32:16,920
out your whole<font color="#E5E5E5"> approach if you have to</font>

685
00:32:15,360 --> 00:32:20,189
<font color="#E5E5E5">spend five seconds for every single</font>

686
00:32:16,920 --> 00:32:22,320
<font color="#CCCCCC">email</font><font color="#E5E5E5"> you're sending</font><font color="#CCCCCC"> you could also use</font>

687
00:32:20,190 --> 00:32:25,140
this<font color="#CCCCCC"> technique for</font><font color="#E5E5E5"> API requests as well</font>

688
00:32:22,320 --> 00:32:27,679
so it's something<font color="#E5E5E5"> that we're starting to</font>

689
00:32:25,140 --> 00:32:30,060
see<font color="#E5E5E5"> as an attack vector for DDoS is</font>

690
00:32:27,680 --> 00:32:31,680
abusing complex

691
00:32:30,060 --> 00:32:34,879
<font color="#CCCCCC">API requests particularly at the back</font>

692
00:32:31,680 --> 00:32:38,520
<font color="#CCCCCC">end and kind of mid tier</font><font color="#E5E5E5"> API requests so</font>

693
00:32:34,880 --> 00:32:40,830
<font color="#E5E5E5">where as kind of from the the client</font>

694
00:32:38,520 --> 00:32:43,740
<font color="#E5E5E5">side it doesn't</font><font color="#CCCCCC"> look like</font><font color="#E5E5E5"> anything</font>

695
00:32:40,830 --> 00:32:46,020
<font color="#E5E5E5">necessarily you know</font><font color="#CCCCCC"> too intensive is</font>

696
00:32:43,740 --> 00:32:48,290
happening within the<font color="#E5E5E5"> infrastructure</font>

697
00:32:46,020 --> 00:32:50,190
<font color="#E5E5E5">because of the amount of kind of</font>

698
00:32:48,290 --> 00:32:53,700
interconnected requests that certain

699
00:32:50,190 --> 00:32:57,420
<font color="#CCCCCC">api's have to make it can cause denial</font>

700
00:32:53,700 --> 00:32:58,650
of service conditions on the<font color="#CCCCCC"> backend so</font>

701
00:32:57,420 --> 00:33:03,690
again this is<font color="#CCCCCC"> something that</font><font color="#E5E5E5"> could be</font>

702
00:32:58,650 --> 00:33:05,970
applied<font color="#CCCCCC"> to that</font><font color="#E5E5E5"> so I mention</font><font color="#CCCCCC"> hash cash</font>

703
00:33:03,690 --> 00:33:07,480
<font color="#E5E5E5">and</font><font color="#CCCCCC"> buy them back some other work that's</font>

704
00:33:05,970 --> 00:33:10,179
been<font color="#CCCCCC"> done around this</font>

705
00:33:07,480 --> 00:33:14,200
I've cited here<font color="#CCCCCC"> one</font><font color="#E5E5E5"> particularly</font>

706
00:33:10,179 --> 00:33:19,750
<font color="#CCCCCC">interesting one is McNiven</font>

707
00:33:14,200 --> 00:33:21,250
and others in 2004<font color="#E5E5E5"> so they suggested</font><font color="#CCCCCC"> or</font>

708
00:33:19,750 --> 00:33:23,710
they<font color="#CCCCCC"> actually did</font><font color="#E5E5E5"> is a kind of proof of</font>

709
00:33:21,250 --> 00:33:26,950
concept making changes to the the<font color="#CCCCCC"> Linux</font>

710
00:33:23,710 --> 00:33:30,130
<font color="#E5E5E5">kernel to the</font><font color="#CCCCCC"> tcp/ip stack</font><font color="#E5E5E5"> to actually</font>

711
00:33:26,950 --> 00:33:31,659
implement<font color="#E5E5E5"> this so when a device for the</font>

712
00:33:30,130 --> 00:33:34,840
<font color="#E5E5E5">operating</font><font color="#CCCCCC"> system tried</font><font color="#E5E5E5"> to make an</font>

713
00:33:31,659 --> 00:33:40,360
outgoing request<font color="#CCCCCC"> it would have to solve</font>

714
00:33:34,840 --> 00:33:43,178
<font color="#E5E5E5">a</font><font color="#CCCCCC"> tamil puzzle so I've got a really</font>

715
00:33:40,360 --> 00:33:44,649
<font color="#CCCCCC">brief brief proof of concept for a</font>

716
00:33:43,179 --> 00:33:47,669
defense<font color="#E5E5E5"> tolerant puzzle it's really</font>

717
00:33:44,649 --> 00:33:50,500
<font color="#E5E5E5">simple</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> only works at kind of a</font>

718
00:33:47,669 --> 00:33:52,409
browser level so<font color="#E5E5E5"> clients requesting a</font>

719
00:33:50,500 --> 00:33:54,760
particular page have to solve a

720
00:33:52,409 --> 00:33:56,620
JavaScript puzzle and send that<font color="#CCCCCC"> to the</font>

721
00:33:54,760 --> 00:34:01,510
server<font color="#CCCCCC"> the server</font><font color="#E5E5E5"> then has to verify</font>

722
00:33:56,620 --> 00:34:03,010
<font color="#CCCCCC">that</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is all recorded</font><font color="#CCCCCC"> from the</font>

723
00:34:01,510 --> 00:34:07,269
client side<font color="#CCCCCC"> so you're not</font><font color="#E5E5E5"> gonna see a</font>

724
00:34:03,010 --> 00:34:09,129
<font color="#E5E5E5">lot but</font><font color="#CCCCCC"> just to take you through it the</font>

725
00:34:07,269 --> 00:34:11,879
client here is requesting a particular

726
00:34:09,129 --> 00:34:15,429
page you can see<font color="#E5E5E5"> the browser is hanging</font>

727
00:34:11,879 --> 00:34:17,078
for you know five<font color="#CCCCCC"> six seconds</font><font color="#E5E5E5"> and then</font>

728
00:34:15,429 --> 00:34:18,579
eventually it's granted access and you

729
00:34:17,079 --> 00:34:21,399
can<font color="#CCCCCC"> see the result of the timer puzzle</font>

730
00:34:18,579 --> 00:34:24,520
in the URL bar in this particular

731
00:34:21,399 --> 00:34:26,500
instance<font color="#E5E5E5"> that's not reusable</font><font color="#CCCCCC"> so if you</font>

732
00:34:24,520 --> 00:34:27,879
then<font color="#E5E5E5"> request the same page again</font><font color="#CCCCCC"> you</font>

733
00:34:26,500 --> 00:34:29,889
have to complete<font color="#E5E5E5"> the time not puzzle</font>

734
00:34:27,879 --> 00:34:32,020
<font color="#CCCCCC">again and that's the</font><font color="#E5E5E5"> idea behind that is</font>

735
00:34:29,889 --> 00:34:33,550
to<font color="#CCCCCC"> kind of stop an attacker then just</font>

736
00:34:32,020 --> 00:34:34,899
sending that link round to everyone so

737
00:34:33,550 --> 00:34:40,389
they can all use the link and bypass the

738
00:34:34,899 --> 00:34:44,290
<font color="#CCCCCC">time</font><font color="#E5E5E5"> puzzle so benefits of using it for</font>

739
00:34:40,389 --> 00:34:46,780
<font color="#E5E5E5">defense</font><font color="#CCCCCC"> good for layer seven attacks and</font>

740
00:34:44,290 --> 00:34:50,050
kind of application layer attacks<font color="#E5E5E5"> so</font>

741
00:34:46,780 --> 00:34:53,919
things<font color="#E5E5E5"> like kind of exhausting</font><font color="#CCCCCC"> web</font>

742
00:34:50,050 --> 00:34:55,060
application resources<font color="#E5E5E5"> if it's done at</font>

743
00:34:53,918 --> 00:34:57,190
that<font color="#E5E5E5"> level</font><font color="#CCCCCC"> it doesn't hugely in</font>

744
00:34:55,060 --> 00:34:59,380
<font color="#E5E5E5">convinced inconvenience legitimate users</font>

745
00:34:57,190 --> 00:35:01,359
and shouldn't<font color="#E5E5E5"> you</font><font color="#CCCCCC"> know regardless</font><font color="#E5E5E5"> of</font>

746
00:34:59,380 --> 00:35:02,800
whatever level<font color="#CCCCCC"> of</font><font color="#E5E5E5"> supply that if you're</font>

747
00:35:01,359 --> 00:35:03,940
a legitimate<font color="#CCCCCC"> user you know you</font><font color="#E5E5E5"> shouldn't</font>

748
00:35:02,800 --> 00:35:05,890
mind waiting kind of four or five

749
00:35:03,940 --> 00:35:08,500
<font color="#E5E5E5">seconds depending on what your use case</font>

750
00:35:05,890 --> 00:35:11,890
<font color="#E5E5E5">is of course</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> can't</font><font color="#CCCCCC"> always mate it</font>

751
00:35:08,500 --> 00:35:15,940
and here at least relatively simple to

752
00:35:11,890 --> 00:35:18,310
actually<font color="#E5E5E5"> implement some</font><font color="#CCCCCC"> drawbacks of</font>

753
00:35:15,940 --> 00:35:21,280
this approach is that the<font color="#E5E5E5"> verification</font>

754
00:35:18,310 --> 00:35:24,070
<font color="#CCCCCC">process itself can be a new deal</font>

755
00:35:21,280 --> 00:35:25,720
attack vector so an attacker can submit

756
00:35:24,070 --> 00:35:28,480
multiple<font color="#E5E5E5"> incorrect solutions</font>

757
00:35:25,720 --> 00:35:29,919
deliberately to cause denial of service

758
00:35:28,480 --> 00:35:32,820
conditions on the server trying to

759
00:35:29,920 --> 00:35:35,590
<font color="#E5E5E5">verify the time that puzzles themselves</font>

760
00:35:32,820 --> 00:35:38,620
<font color="#CCCCCC">there are ways that</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> could bypass</font><font color="#E5E5E5"> it</font>

761
00:35:35,590 --> 00:35:41,740
potentially<font color="#CCCCCC"> it gets pretty impractical</font>

762
00:35:38,620 --> 00:35:45,190
at lower layers<font color="#CCCCCC"> so you either kind of</font>

763
00:35:41,740 --> 00:35:47,080
would<font color="#E5E5E5"> have to revise tcp/ip or kind of</font>

764
00:35:45,190 --> 00:35:49,420
<font color="#E5E5E5">revise kernels or get everyone to agree</font>

765
00:35:47,080 --> 00:35:51,250
<font color="#CCCCCC">to use a particular</font><font color="#E5E5E5"> client</font><font color="#CCCCCC"> and that kind</font>

766
00:35:49,420 --> 00:35:54,190
of thing

767
00:35:51,250 --> 00:35:56,680
one interesting possibility which<font color="#E5E5E5"> is</font>

768
00:35:54,190 --> 00:36:01,180
purely hypothetical<font color="#E5E5E5"> and purely</font>

769
00:35:56,680 --> 00:36:03,580
theoretical<font color="#E5E5E5"> would be to attach a defense</font>

770
00:36:01,180 --> 00:36:09,040
<font color="#E5E5E5">Tom a puzzle construct to something like</font>

771
00:36:03,580 --> 00:36:12,279
brick a bot so<font color="#CCCCCC"> brick a bot is an IOT was</font>

772
00:36:09,040 --> 00:36:14,200
an IOT worm<font color="#CCCCCC"> that exploited many of the</font>

773
00:36:12,280 --> 00:36:19,030
same vulnerabilities as<font color="#CCCCCC"> Mirai and</font><font color="#E5E5E5"> Reaper</font>

774
00:36:14,200 --> 00:36:21,790
<font color="#CCCCCC">and those kind of</font><font color="#E5E5E5"> things the purported</font>

775
00:36:19,030 --> 00:36:23,350
developer of brick brick<font color="#E5E5E5"> a bot claimed</font>

776
00:36:21,790 --> 00:36:25,420
in a statement in January<font color="#E5E5E5"> that the</font>

777
00:36:23,350 --> 00:36:26,589
<font color="#E5E5E5">reason he launched it and the reason he</font>

778
00:36:25,420 --> 00:36:29,500
or she had launched it<font color="#E5E5E5"> and attacked all</font>

779
00:36:26,590 --> 00:36:31,390
those devices<font color="#E5E5E5"> was to prevent vulnerable</font>

780
00:36:29,500 --> 00:36:34,090
devices subsequently being<font color="#E5E5E5"> used by</font>

781
00:36:31,390 --> 00:36:36,129
Mariah and Reaper and<font color="#E5E5E5"> so on because</font>

782
00:36:34,090 --> 00:36:37,930
brick a bot would permanently brick

783
00:36:36,130 --> 00:36:39,490
<font color="#E5E5E5">vulnerable devices it would try and</font>

784
00:36:37,930 --> 00:36:42,730
upgrade the firmware<font color="#E5E5E5"> to some kind of bad</font>

785
00:36:39,490 --> 00:36:43,959
image<font color="#CCCCCC"> or something</font><font color="#E5E5E5"> similar</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> those</font>

786
00:36:42,730 --> 00:36:47,350
devices<font color="#CCCCCC"> would then be permanently</font>

787
00:36:43,960 --> 00:36:49,000
unusable<font color="#E5E5E5"> and therefore not available for</font>

788
00:36:47,350 --> 00:36:52,870
<font color="#E5E5E5">Mirai and Reaper and so on to to</font>

789
00:36:49,000 --> 00:36:56,050
actually<font color="#E5E5E5"> attack and that that some kind</font>

790
00:36:52,870 --> 00:36:58,270
<font color="#E5E5E5">of concept is</font><font color="#CCCCCC"> really interesting and</font>

791
00:36:56,050 --> 00:36:59,560
<font color="#CCCCCC">there's kind of lots of</font><font color="#E5E5E5"> ethical debates</font>

792
00:36:58,270 --> 00:37:03,070
<font color="#E5E5E5">you can have about</font><font color="#CCCCCC"> whether</font><font color="#E5E5E5"> that's ever</font>

793
00:36:59,560 --> 00:37:06,520
<font color="#CCCCCC">the right thing to do obviously it's</font>

794
00:37:03,070 --> 00:37:08,230
still<font color="#E5E5E5"> legal but but you know compared to</font>

795
00:37:06,520 --> 00:37:10,120
<font color="#E5E5E5">those devices subsequently being used</font>

796
00:37:08,230 --> 00:37:12,850
for<font color="#CCCCCC"> mirror</font><font color="#E5E5E5"> on Reaper is that preferable</font>

797
00:37:10,120 --> 00:37:15,009
it's it's really<font color="#E5E5E5"> gray area but it kind</font>

798
00:37:12,850 --> 00:37:16,810
of feeds into<font color="#E5E5E5"> a concept called nematodes</font>

799
00:37:15,010 --> 00:37:19,660
or anti worms<font color="#E5E5E5"> which is something else</font>

800
00:37:16,810 --> 00:37:22,259
<font color="#E5E5E5">I've been looking at recently which is</font>

801
00:37:19,660 --> 00:37:24,310
the concept of building worms which

802
00:37:22,260 --> 00:37:26,560
exploit<font color="#E5E5E5"> the same vulnerabilities as</font>

803
00:37:24,310 --> 00:37:30,279
malicious worms<font color="#E5E5E5"> but then</font><font color="#CCCCCC"> will patch them</font>

804
00:37:26,560 --> 00:37:32,259
or prevent them<font color="#E5E5E5"> being infected so in</font>

805
00:37:30,280 --> 00:37:35,049
terms of time<font color="#CCCCCC"> apostles</font>

806
00:37:32,259 --> 00:37:36,700
and again<font color="#E5E5E5"> purely hypothetical purely</font>

807
00:37:35,049 --> 00:37:39,490
theoretical<font color="#CCCCCC"> something like brick about</font>

808
00:37:36,700 --> 00:37:41,890
instead<font color="#CCCCCC"> of</font><font color="#E5E5E5"> permantly breaking devices</font>

809
00:37:39,490 --> 00:37:43,868
could implement some kind of<font color="#CCCCCC"> thomna</font>

810
00:37:41,890 --> 00:37:46,269
puzzle in those<font color="#CCCCCC"> devices</font><font color="#E5E5E5"> that would</font>

811
00:37:43,869 --> 00:37:47,650
massively hinder their usability<font color="#E5E5E5"> for</font>

812
00:37:46,269 --> 00:37:51,220
subsequent<font color="#CCCCCC"> DDoS attacks if they were</font>

813
00:37:47,650 --> 00:37:53,019
infected<font color="#CCCCCC"> it's purely</font><font color="#E5E5E5"> kind of completely</font>

814
00:37:51,220 --> 00:37:54,609
blue sky thinking<font color="#E5E5E5"> that I'm sure there's</font>

815
00:37:53,019 --> 00:37:58,180
all sorts of<font color="#E5E5E5"> problems with it I just</font>

816
00:37:54,609 --> 00:38:01,859
thought it was an<font color="#CCCCCC"> interesting idea</font><font color="#E5E5E5"> okay</font>

817
00:37:58,180 --> 00:38:04,680
so in conclusion<font color="#E5E5E5"> Tonglet puzzles are</font>

818
00:38:01,859 --> 00:38:07,480
relatively obscure area of<font color="#CCCCCC"> cryptography</font>

819
00:38:04,680 --> 00:38:09,848
<font color="#E5E5E5">and historically going all the way back</font>

820
00:38:07,480 --> 00:38:12,220
<font color="#E5E5E5">to 1992 and they were first first</font>

821
00:38:09,849 --> 00:38:15,640
suggested it's all been<font color="#E5E5E5"> about the benign</font>

822
00:38:12,220 --> 00:38:16,930
uses of them<font color="#E5E5E5"> in offensive security</font>

823
00:38:15,640 --> 00:38:18,549
<font color="#E5E5E5">research they've been very</font><font color="#CCCCCC"> much</font>

824
00:38:16,930 --> 00:38:20,440
underexposed there have been some<font color="#CCCCCC"> people</font>

825
00:38:18,549 --> 00:38:25,059
looking at<font color="#CCCCCC"> it I mentioned our crypto</font>

826
00:38:20,440 --> 00:38:28,089
<font color="#E5E5E5">there was a paper on</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> Python framework</font>

827
00:38:25,059 --> 00:38:30,069
that you could use for<font color="#E5E5E5"> anti emulation in</font>

828
00:38:28,089 --> 00:38:31,779
my opinion I<font color="#E5E5E5"> think it's really important</font>

829
00:38:30,069 --> 00:38:32,288
that<font color="#CCCCCC"> the vendors and defenders start to</font>

830
00:38:31,779 --> 00:38:33,940
look at

831
00:38:32,289 --> 00:38:36,970
<font color="#CCCCCC">thomna</font><font color="#E5E5E5"> puzzles and how they could</font><font color="#CCCCCC"> be</font>

832
00:38:33,940 --> 00:38:38,619
<font color="#E5E5E5">kind of misused</font><font color="#CCCCCC"> a problem is</font><font color="#E5E5E5"> that they</font>

833
00:38:36,970 --> 00:38:42,399
are<font color="#CCCCCC"> very difficult</font><font color="#E5E5E5"> to identify and</font>

834
00:38:38,619 --> 00:38:44,559
detect to my<font color="#E5E5E5"> knowledge they haven't</font>

835
00:38:42,400 --> 00:38:46,539
really been<font color="#E5E5E5"> seen in the wild yet other</font>

836
00:38:44,559 --> 00:38:48,609
than malware is created<font color="#E5E5E5"> with the likes</font>

837
00:38:46,539 --> 00:38:53,499
of Hyperion<font color="#CCCCCC"> our crypto that kind of</font>

838
00:38:48,609 --> 00:38:54,670
thing<font color="#CCCCCC"> the literature goes into a lot</font>

839
00:38:53,499 --> 00:38:58,660
more detail<font color="#E5E5E5"> about their</font><font color="#CCCCCC"> possible</font>

840
00:38:54,670 --> 00:39:01,390
applications for<font color="#E5E5E5"> defense</font><font color="#CCCCCC"> albeit those</font>

841
00:38:58,660 --> 00:39:03,190
aren't<font color="#CCCCCC"> always practical but there are</font>

842
00:39:01,390 --> 00:39:06,640
some really<font color="#CCCCCC"> interesting applications for</font>

843
00:39:03,190 --> 00:39:08,470
defense and<font color="#E5E5E5"> for deterrence</font><font color="#CCCCCC"> particularly</font>

844
00:39:06,640 --> 00:39:10,328
when combined<font color="#E5E5E5"> with other</font><font color="#CCCCCC"> measures but</font>

845
00:39:08,470 --> 00:39:12,249
still a very<font color="#E5E5E5"> underexplored area of</font>

846
00:39:10,329 --> 00:39:14,380
research<font color="#E5E5E5"> and I've when I was kind of</font>

847
00:39:12,249 --> 00:39:17,259
researching<font color="#CCCCCC"> this project yet to kind of</font>

848
00:39:14,380 --> 00:39:21,880
see a really practical way<font color="#CCCCCC"> that this</font>

849
00:39:17,259 --> 00:39:24,009
could be<font color="#E5E5E5"> applied for defense so some</font>

850
00:39:21,880 --> 00:39:26,140
future research<font color="#CCCCCC"> that I'd like to do and</font>

851
00:39:24,009 --> 00:39:28,450
I'd like<font color="#E5E5E5"> to invite you to</font><font color="#CCCCCC"> think about as</font>

852
00:39:26,140 --> 00:39:30,970
well if you're<font color="#CCCCCC"> interested is comment</font>

853
00:39:28,450 --> 00:39:32,109
with more variants of<font color="#CCCCCC"> atomic puzzles so</font>

854
00:39:30,970 --> 00:39:34,089
some of the ones<font color="#CCCCCC"> that I showed you</font>

855
00:39:32,109 --> 00:39:36,578
earlier were novel some of them were

856
00:39:34,089 --> 00:39:37,869
<font color="#E5E5E5">based on you know the work of others so</font>

857
00:39:36,579 --> 00:39:40,779
<font color="#CCCCCC">Rivest</font><font color="#E5E5E5"> and others for</font><font color="#CCCCCC"> instance the</font>

858
00:39:37,869 --> 00:39:41,799
repeated squaring one but<font color="#CCCCCC"> I think it'll</font>

859
00:39:40,779 --> 00:39:43,059
<font color="#E5E5E5">be really interesting</font><font color="#CCCCCC"> to see</font><font color="#E5E5E5"> if we</font><font color="#CCCCCC"> can</font>

860
00:39:41,799 --> 00:39:44,259
have some<font color="#E5E5E5"> more variants at on our</font>

861
00:39:43,059 --> 00:39:45,130
puzzles

862
00:39:44,259 --> 00:39:47,859
I think it

863
00:39:45,130 --> 00:39:49,420
be awesome<font color="#CCCCCC"> to</font><font color="#E5E5E5"> get some more realistic</font>

864
00:39:47,859 --> 00:39:51,700
applications for defense<font color="#E5E5E5"> and some more</font>

865
00:39:49,420 --> 00:39:52,960
<font color="#E5E5E5">realistic proof of concepts</font><font color="#CCCCCC"> and I'm sure</font>

866
00:39:51,700 --> 00:39:54,640
that<font color="#E5E5E5"> people</font><font color="#CCCCCC"> in this audience</font><font color="#E5E5E5"> and in the</font>

867
00:39:52,960 --> 00:39:56,920
community who would be kind of<font color="#E5E5E5"> far</font>

868
00:39:54,640 --> 00:39:58,660
better<font color="#E5E5E5"> suited at doing that</font><font color="#CCCCCC"> than I am</font>

869
00:39:56,920 --> 00:40:00,279
prevention<font color="#E5E5E5"> and</font><font color="#CCCCCC"> detection is a crucial</font>

870
00:39:58,660 --> 00:40:03,430
thing<font color="#E5E5E5"> so if you have kind of ideas for</font>

871
00:40:00,279 --> 00:40:05,200
how<font color="#E5E5E5"> tamo puzzles could be prevented and</font>

872
00:40:03,430 --> 00:40:07,390
detected<font color="#E5E5E5"> and that would be really</font>

873
00:40:05,200 --> 00:40:10,359
<font color="#E5E5E5">interesting</font><font color="#CCCCCC"> and I think just from</font><font color="#E5E5E5"> a kind</font>

874
00:40:07,390 --> 00:40:12,250
<font color="#E5E5E5">of societal point of view other uses for</font>

875
00:40:10,359 --> 00:40:13,839
<font color="#E5E5E5">Tommo</font><font color="#CCCCCC"> puzzles would</font><font color="#E5E5E5"> be really</font>

876
00:40:12,250 --> 00:40:17,049
interesting so I went<font color="#E5E5E5"> through some</font>

877
00:40:13,839 --> 00:40:18,279
earlier<font color="#CCCCCC"> you know time capsules solution</font>

878
00:40:17,049 --> 00:40:20,490
<font color="#CCCCCC">beards release of classified</font><font color="#E5E5E5"> information</font>

879
00:40:18,279 --> 00:40:22,569
<font color="#E5E5E5">that kind</font><font color="#CCCCCC"> of thing but</font><font color="#E5E5E5"> it would be</font>

880
00:40:20,490 --> 00:40:23,740
really<font color="#E5E5E5"> cool</font><font color="#CCCCCC"> to see</font><font color="#E5E5E5"> if there</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> other</font>

881
00:40:22,569 --> 00:40:28,960
ways that<font color="#CCCCCC"> this could be used</font>

882
00:40:23,740 --> 00:40:30,459
<font color="#E5E5E5">beneficially for for society as well so</font>

883
00:40:28,960 --> 00:40:32,230
thank you very<font color="#E5E5E5"> much</font><font color="#CCCCCC"> if you'd</font><font color="#E5E5E5"> like to get</font>

884
00:40:30,460 --> 00:40:34,210
in<font color="#CCCCCC"> touch that's my</font><font color="#E5E5E5"> twitter handle</font><font color="#CCCCCC"> and my</font>

885
00:40:32,230 --> 00:40:36,490
email<font color="#E5E5E5"> address feel free to drop</font><font color="#CCCCCC"> me a</font>

886
00:40:34,210 --> 00:40:38,200
line and the<font color="#E5E5E5"> feedback or comments</font><font color="#CCCCCC"> if</font>

887
00:40:36,490 --> 00:40:41,799
you're interested<font color="#E5E5E5"> in</font><font color="#CCCCCC"> doing some stuff on</font>

888
00:40:38,200 --> 00:40:42,939
<font color="#CCCCCC">tom at puzzles I think I have</font><font color="#E5E5E5"> about five</font>

889
00:40:41,799 --> 00:40:45,250
minutes<font color="#E5E5E5"> for questions</font>

890
00:40:42,940 --> 00:40:59,460
<font color="#CCCCCC">I'm so happy to take any</font><font color="#E5E5E5"> thank you very</font>

891
00:40:45,250 --> 00:40:59,460
much yeah

892
00:41:04,560 --> 00:41:11,320
so yeah that's<font color="#CCCCCC"> a really interesting</font>

893
00:41:07,450 --> 00:41:12,609
question<font color="#CCCCCC"> so so we</font><font color="#E5E5E5"> have used this</font>

894
00:41:11,320 --> 00:41:15,010
technique<font color="#CCCCCC"> before for some</font><font color="#E5E5E5"> of our red</font>

895
00:41:12,610 --> 00:41:18,430
<font color="#E5E5E5">teaming stuff and we typically set it</font>

896
00:41:15,010 --> 00:41:21,280
for kind<font color="#E5E5E5"> of</font><font color="#CCCCCC"> twenty</font><font color="#E5E5E5"> minutes plus one</font>

897
00:41:18,430 --> 00:41:23,529
actually<font color="#E5E5E5"> on that subject</font><font color="#CCCCCC"> one really</font>

898
00:41:21,280 --> 00:41:25,890
<font color="#E5E5E5">interesting possible method of detection</font>

899
00:41:23,530 --> 00:41:29,080
<font color="#CCCCCC">is looking at the amount</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> CPU cycles</font>

900
00:41:25,890 --> 00:41:30,279
<font color="#E5E5E5">for a certain period of time</font><font color="#CCCCCC"> and that's</font>

901
00:41:29,080 --> 00:41:33,340
obviously something<font color="#E5E5E5"> that's</font><font color="#CCCCCC"> also</font><font color="#E5E5E5"> being</font>

902
00:41:30,280 --> 00:41:34,900
looked<font color="#E5E5E5"> at</font><font color="#CCCCCC"> for crypto jackin malware so</font>

903
00:41:33,340 --> 00:41:36,520
you could certainly<font color="#E5E5E5"> look at CPU usage</font>

904
00:41:34,900 --> 00:41:39,910
but<font color="#E5E5E5"> typically yeah we've set it for kind</font>

905
00:41:36,520 --> 00:41:41,470
<font color="#E5E5E5">of</font><font color="#CCCCCC"> 20</font><font color="#E5E5E5"> minutes and above we don't try and</font>

906
00:41:39,910 --> 00:41:44,410
<font color="#E5E5E5">set it for</font><font color="#CCCCCC"> anything kind</font><font color="#E5E5E5"> of more than 30</font>

907
00:41:41,470 --> 00:41:48,060
minutes<font color="#CCCCCC"> just in case something overheats</font>

908
00:41:44,410 --> 00:41:48,060
or something like<font color="#E5E5E5"> that but yeah</font>

909
00:41:53,220 --> 00:42:03,368
whether you got one at the back<font color="#CCCCCC"> hey good</font>

910
00:42:02,920 --> 00:42:07,809
talk

911
00:42:03,369 --> 00:42:11,109
so not really question but now here for

912
00:42:07,809 --> 00:42:16,720
<font color="#CCCCCC">a time</font><font color="#E5E5E5"> lock puzzle invalid JavaScript</font>

913
00:42:11,109 --> 00:42:18,339
syntax so create a puzzle<font color="#E5E5E5"> based on you</font>

914
00:42:16,720 --> 00:42:23,109
basically<font color="#E5E5E5"> mutate at the</font><font color="#CCCCCC"> card so it</font>

915
00:42:18,339 --> 00:42:25,779
<font color="#E5E5E5">produces in bad syntax and then the the</font>

916
00:42:23,109 --> 00:42:27,490
server knows the answer<font color="#CCCCCC"> and then</font><font color="#E5E5E5"> the</font>

917
00:42:25,780 --> 00:42:29,770
client side<font color="#CCCCCC"> you brute force the</font>

918
00:42:27,490 --> 00:42:32,770
<font color="#E5E5E5">JavaScript</font><font color="#CCCCCC"> cold</font><font color="#E5E5E5"> and so it contains valid</font>

919
00:42:29,770 --> 00:42:35,799
<font color="#CCCCCC">send syntax which will</font><font color="#E5E5E5"> return the</font><font color="#CCCCCC"> the</font>

920
00:42:32,770 --> 00:42:38,140
correct password<font color="#CCCCCC"> court whatever you</font>

921
00:42:35,799 --> 00:42:40,150
wanna call it<font color="#E5E5E5"> yeah that's awesome</font><font color="#CCCCCC"> yeah</font>

922
00:42:38,140 --> 00:42:44,009
<font color="#E5E5E5">that that's really cool</font><font color="#CCCCCC"> so that that</font>

923
00:42:40,150 --> 00:42:44,010
<font color="#E5E5E5">would work yeah that's really</font><font color="#CCCCCC"> cool</font>

924
00:42:51,860 --> 00:42:55,540
<font color="#CCCCCC">who done</font><font color="#E5E5E5"> all right thanks very much</font>

925
00:42:57,200 --> 00:43:01,709
[Applause]

