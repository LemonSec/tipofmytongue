1
00:00:37,690 --> 00:00:43,030
hello and<font color="#CCCCCC"> good afternoon so thank</font><font color="#E5E5E5"> you</font>

2
00:00:40,870 --> 00:00:46,750
guys<font color="#CCCCCC"> for joining us for the afternoon</font>

3
00:00:43,030 --> 00:00:50,700
<font color="#E5E5E5">session here on the hacker track so</font>

4
00:00:46,750 --> 00:00:53,650
<font color="#E5E5E5">coming up next</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> us is Gareth</font><font color="#CCCCCC"> Hayes in</font>

5
00:00:50,700 --> 00:00:56,980
<font color="#CCCCCC">entitle exploiting unknown browsers</font><font color="#E5E5E5"> and</font>

6
00:00:53,650 --> 00:00:59,739
objects<font color="#CCCCCC"> a little bit about Gareth</font><font color="#E5E5E5"> as he</font>

7
00:00:56,980 --> 00:01:02,709
works as a researcher at ports<font color="#CCCCCC"> wigger</font>

8
00:00:59,739 --> 00:01:05,319
and loves breaking<font color="#CCCCCC"> sand boxes</font><font color="#E5E5E5"> and</font>

9
00:01:02,710 --> 00:01:07,810
anything to do with JavaScript<font color="#CCCCCC"> he has</font>

10
00:01:05,319 --> 00:01:14,229
developed various free online tools such

11
00:01:07,810 --> 00:01:20,200
<font color="#CCCCCC">as hacker hacker</font><font color="#E5E5E5"> for Shazzer and also</font>

12
00:01:14,229 --> 00:01:24,670
created mentals<font color="#E5E5E5"> mentals yes yes but so</font><font color="#CCCCCC"> J</font>

13
00:01:20,200 --> 00:01:29,770
is<font color="#E5E5E5"> a JavaScript sandbox that provides a</font>

14
00:01:24,670 --> 00:01:31,960
safe<font color="#CCCCCC"> Daelim environment for sand box</font>

15
00:01:29,770 --> 00:01:34,630
code so please give him a round<font color="#CCCCCC"> of</font>

16
00:01:31,960 --> 00:01:40,270
applause as he<font color="#E5E5E5"> comes to</font><font color="#CCCCCC"> the stage</font>

17
00:01:34,630 --> 00:01:42,669
[Applause]

18
00:01:40,270 --> 00:01:44,740
welcome to exploit<font color="#CCCCCC"> Singham non browsers</font>

19
00:01:42,670 --> 00:01:48,009
and objects using the hack ability

20
00:01:44,740 --> 00:01:50,830
inspector<font color="#E5E5E5"> so I believe</font><font color="#CCCCCC"> that when you</font>

21
00:01:48,009 --> 00:01:52,960
find a cool<font color="#E5E5E5"> bug we should build tools</font>

22
00:01:50,830 --> 00:01:55,869
<font color="#CCCCCC">around that book and that's what I'm</font>

23
00:01:52,960 --> 00:01:58,270
<font color="#CCCCCC">gonna</font><font color="#E5E5E5"> show you today so a little bit</font>

24
00:01:55,869 --> 00:02:01,030
<font color="#E5E5E5">about me</font><font color="#CCCCCC"> I research I'm a</font><font color="#E5E5E5"> researcher at</font>

25
00:01:58,270 --> 00:02:02,830
<font color="#E5E5E5">ports we go</font><font color="#CCCCCC"> I think</font><font color="#E5E5E5"> Portuguese the best</font>

26
00:02:01,030 --> 00:02:05,170
web security<font color="#E5E5E5"> company in the world to</font>

27
00:02:02,830 --> 00:02:08,560
work for<font color="#CCCCCC"> you're awesome</font>

28
00:02:05,170 --> 00:02:11,470
<font color="#CCCCCC">I love hacking JavaScript</font><font color="#E5E5E5"> and I use this</font>

29
00:02:08,560 --> 00:02:14,650
to<font color="#CCCCCC"> simply put I</font><font color="#E5E5E5"> do I do this on every</font>

30
00:02:11,470 --> 00:02:15,790
single<font color="#CCCCCC"> presentation now I present it's</font>

31
00:02:14,650 --> 00:02:18,370
just a mean so I can put some

32
00:02:15,790 --> 00:02:22,480
<font color="#E5E5E5">crazy-looking JavaScript on there today</font>

33
00:02:18,370 --> 00:02:24,700
<font color="#CCCCCC">is no exception so here we have a</font><font color="#E5E5E5"> number</font>

34
00:02:22,480 --> 00:02:29,049
followed<font color="#CCCCCC"> by</font><font color="#E5E5E5"> the in operator and followed</font>

35
00:02:24,700 --> 00:02:31,089
by<font color="#CCCCCC"> the alert function so edge allows you</font>

36
00:02:29,050 --> 00:02:33,400
to use it<font color="#CCCCCC"> in operator</font><font color="#E5E5E5"> after</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> number</font>

37
00:02:31,090 --> 00:02:36,580
without<font color="#E5E5E5"> a space which is pretty crazy</font>

38
00:02:33,400 --> 00:02:39,640
and also it also uses<font color="#E5E5E5"> the Unicode</font>

39
00:02:36,580 --> 00:02:41,280
<font color="#E5E5E5">character six one five eight as a space</font>

40
00:02:39,640 --> 00:02:43,450
character and all the browser does<font color="#E5E5E5"> this</font>

41
00:02:41,280 --> 00:02:46,050
so it looks<font color="#CCCCCC"> like</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> whole thing</font><font color="#E5E5E5"> is</font>

42
00:02:43,450 --> 00:02:48,250
joined together which is<font color="#E5E5E5"> pretty crazy</font>

43
00:02:46,050 --> 00:02:50,500
<font color="#CCCCCC">I'd generally tweet about this sort of</font>

44
00:02:48,250 --> 00:02:52,320
<font color="#E5E5E5">stuff</font><font color="#CCCCCC"> so I follow me on twit phone to</font>

45
00:02:50,500 --> 00:02:55,060
see about

46
00:02:52,320 --> 00:02:58,720
so we created a<font color="#E5E5E5"> tool called</font>

47
00:02:55,060 --> 00:03:01,300
hack ability and hack ability was a tool

48
00:02:58,720 --> 00:03:04,660
to test the capable capabilities of

49
00:03:01,300 --> 00:03:08,860
rendering engines<font color="#CCCCCC"> and it has a series of</font>

50
00:03:04,660 --> 00:03:12,040
<font color="#E5E5E5">JavaScript and HTML tests so some</font><font color="#CCCCCC"> of the</font>

51
00:03:08,860 --> 00:03:15,160
<font color="#E5E5E5">test them might include our is sopping</font>

52
00:03:12,040 --> 00:03:18,220
<font color="#CCCCCC">able is same-origin policy</font><font color="#E5E5E5"> enabled</font><font color="#CCCCCC"> his</font>

53
00:03:15,160 --> 00:03:22,600
<font color="#CCCCCC">javascript supported</font><font color="#E5E5E5"> is the CSS imports</font>

54
00:03:18,220 --> 00:03:24,850
and stuff<font color="#E5E5E5"> like that so this is what</font><font color="#CCCCCC"> it</font>

55
00:03:22,600 --> 00:03:28,210
looks<font color="#CCCCCC"> like</font><font color="#E5E5E5"> it's pretty basic</font><font color="#CCCCCC"> because he</font>

56
00:03:24,850 --> 00:03:31,420
asked to support<font color="#E5E5E5"> older browser clients</font>

57
00:03:28,210 --> 00:03:35,920
so the basic tests on the<font color="#CCCCCC"> Left</font><font color="#E5E5E5"> so like</font>

58
00:03:31,420 --> 00:03:38,049
is CSS imports allowed<font color="#E5E5E5"> our style</font>

59
00:03:35,920 --> 00:03:40,269
attributes<font color="#E5E5E5"> allowed our form supported</font>

60
00:03:38,050 --> 00:03:43,050
etc and on the right we've got more

61
00:03:40,270 --> 00:03:46,420
interesting<font color="#E5E5E5"> JavaScript tests so is</font>

62
00:03:43,050 --> 00:03:50,140
<font color="#E5E5E5">phantom GS detected for example is SVG</font>

63
00:03:46,420 --> 00:03:51,970
supports it<font color="#E5E5E5"> or using es5 or es6</font><font color="#CCCCCC"> and the</font>

64
00:03:50,140 --> 00:03:53,859
more green you<font color="#E5E5E5"> get the more the better</font>

65
00:03:51,970 --> 00:03:57,940
it is<font color="#CCCCCC"> for researcher to hack</font><font color="#E5E5E5"> this</font>

66
00:03:53,860 --> 00:03:59,830
particular browser and it can also

67
00:03:57,940 --> 00:04:02,890
<font color="#E5E5E5">detect your local IP address using</font>

68
00:03:59,830 --> 00:04:04,870
<font color="#E5E5E5">WebRTC for example but the most</font>

69
00:04:02,890 --> 00:04:07,779
interesting one<font color="#E5E5E5"> for this talk is the</font>

70
00:04:04,870 --> 00:04:11,100
JavaScript<font color="#E5E5E5"> environment difference so</font>

71
00:04:07,780 --> 00:04:13,450
what<font color="#E5E5E5"> this is is it collects all the norm</font>

72
00:04:11,100 --> 00:04:16,180
properties on window on every browser

73
00:04:13,450 --> 00:04:18,820
<font color="#E5E5E5">and looks for stuff</font><font color="#CCCCCC"> that isn't in there</font>

74
00:04:16,180 --> 00:04:22,150
<font color="#E5E5E5">so this will be interesting objects to</font>

75
00:04:18,820 --> 00:04:25,090
inspect<font color="#CCCCCC"> so the hack ability</font><font color="#E5E5E5"> tool will in</font>

76
00:04:22,150 --> 00:04:28,870
it will tell you what objects<font color="#E5E5E5"> are there</font>

77
00:04:25,090 --> 00:04:31,929
that<font color="#E5E5E5"> are interesting so it finds the</font>

78
00:04:28,870 --> 00:04:34,000
interesting stuff<font color="#CCCCCC"> but we have no</font><font color="#E5E5E5"> means</font>

79
00:04:31,930 --> 00:04:34,870
to inspect these objects<font color="#CCCCCC"> so we know what</font>

80
00:04:34,000 --> 00:04:37,270
<font color="#CCCCCC">they are but</font><font color="#E5E5E5"> we don't know how to</font>

81
00:04:34,870 --> 00:04:43,270
inspect them

82
00:04:37,270 --> 00:04:46,810
we need a new tool<font color="#E5E5E5"> basically</font><font color="#CCCCCC"> so this</font><font color="#E5E5E5"> is</font>

83
00:04:43,270 --> 00:04:51,490
like life before dev tools<font color="#E5E5E5"> it felt like</font>

84
00:04:46,810 --> 00:04:55,150
banging rocks against<font color="#E5E5E5"> a computer so this</font>

85
00:04:51,490 --> 00:04:55,750
is browser dev tools basically<font color="#CCCCCC"> so back</font>

86
00:04:55,150 --> 00:04:58,929
<font color="#E5E5E5">in the day</font>

87
00:04:55,750 --> 00:05:02,410
when I<font color="#E5E5E5"> was calling JavaScript and HTML</font>

88
00:04:58,930 --> 00:05:05,470
<font color="#E5E5E5">back in 9 in the 90s 99 98 or</font><font color="#CCCCCC"> something</font>

89
00:05:02,410 --> 00:05:07,389
<font color="#CCCCCC">he</font><font color="#E5E5E5"> just had view source</font>

90
00:05:05,470 --> 00:05:08,800
can you<font color="#E5E5E5"> imagine just debugging nowadays</font>

91
00:05:07,389 --> 00:05:11,979
with just view<font color="#CCCCCC"> sauce</font><font color="#E5E5E5"> it would be an</font>

92
00:05:08,800 --> 00:05:13,990
<font color="#E5E5E5">absolute nightmare</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> nor console you</font>

93
00:05:11,979 --> 00:05:16,620
were reduced<font color="#E5E5E5"> to doing aware and then the</font>

94
00:05:13,990 --> 00:05:18,759
variable so it was<font color="#E5E5E5"> pretty crazy</font>

95
00:05:16,620 --> 00:05:21,159
and you in the same<font color="#CCCCCC"> sort of situation</font>

96
00:05:18,759 --> 00:05:22,360
<font color="#E5E5E5">when you're investigating a rendering</font>

97
00:05:21,159 --> 00:05:25,629
<font color="#CCCCCC">engine that you don't know what it</font><font color="#E5E5E5"> is</font>

98
00:05:22,360 --> 00:05:28,060
and<font color="#CCCCCC"> what it does and what</font><font color="#E5E5E5"> security</font><font color="#CCCCCC"> is</font>

99
00:05:25,629 --> 00:05:33,280
enabled<font color="#E5E5E5"> what what security protections</font>

100
00:05:28,060 --> 00:05:36,789
are in place and so when when the

101
00:05:33,280 --> 00:05:38,530
browser has no dev tools<font color="#CCCCCC"> and when the</font>

102
00:05:36,789 --> 00:05:39,940
birth<font color="#E5E5E5"> the dev tools are missing on this</font>

103
00:05:38,530 --> 00:05:42,309
rendering engine you in the same sort of

104
00:05:39,940 --> 00:05:45,400
situation<font color="#CCCCCC"> so how do you</font><font color="#E5E5E5"> know what</font>

105
00:05:42,310 --> 00:05:49,240
objects are available and how<font color="#E5E5E5"> can you</font>

106
00:05:45,400 --> 00:05:51,609
find<font color="#E5E5E5"> the interesting stuff</font><font color="#CCCCCC"> so me</font><font color="#E5E5E5"> and</font>

107
00:05:49,240 --> 00:05:52,469
James<font color="#E5E5E5"> was talking</font><font color="#CCCCCC"> he was using my tool</font>

108
00:05:51,610 --> 00:05:56,289
called

109
00:05:52,469 --> 00:05:57,789
<font color="#CCCCCC">hat Verta which has got an inspector and</font>

110
00:05:56,289 --> 00:06:00,659
<font color="#E5E5E5">he said that we need an inspector</font><font color="#CCCCCC"> of</font>

111
00:05:57,789 --> 00:06:03,099
<font color="#CCCCCC">hacking ability because we know</font><font color="#E5E5E5"> these</font>

112
00:06:00,659 --> 00:06:04,840
objects<font color="#CCCCCC"> that have</font><font color="#E5E5E5"> been detected</font><font color="#CCCCCC"> but we</font>

113
00:06:03,099 --> 00:06:07,300
have no means<font color="#E5E5E5"> to inspect them because</font>

114
00:06:04,840 --> 00:06:09,128
when a browser that<font color="#E5E5E5"> doesn't have dev</font>

115
00:06:07,300 --> 00:06:11,020
tools because it's<font color="#E5E5E5"> just been rendering</font>

116
00:06:09,129 --> 00:06:14,349
on a page<font color="#E5E5E5"> and sometimes it's not even</font>

117
00:06:11,020 --> 00:06:16,210
<font color="#E5E5E5">allowing you to interact with it so I</font>

118
00:06:14,349 --> 00:06:21,069
<font color="#E5E5E5">said yeah we need something</font><font color="#CCCCCC"> like dev</font>

119
00:06:16,210 --> 00:06:23,710
tools<font color="#E5E5E5"> but for security and so the</font>

120
00:06:21,069 --> 00:06:25,629
<font color="#CCCCCC">inspector was born so the inspector is</font>

121
00:06:23,710 --> 00:06:27,669
<font color="#CCCCCC">basically like taking</font><font color="#E5E5E5"> a magnifying glass</font>

122
00:06:25,629 --> 00:06:32,379
<font color="#CCCCCC">and looking at the objects and</font>

123
00:06:27,669 --> 00:06:36,339
inspecting them so it's<font color="#CCCCCC"> your missing</font>

124
00:06:32,379 --> 00:06:38,139
tools for security basically it will

125
00:06:36,339 --> 00:06:40,479
find<font color="#E5E5E5"> you ensure the</font><font color="#CCCCCC"> most interesting</font>

126
00:06:38,139 --> 00:06:43,389
stuff first<font color="#CCCCCC"> so if a developer defines a</font>

127
00:06:40,479 --> 00:06:44,979
custom<font color="#CCCCCC"> object</font><font color="#E5E5E5"> that may be a bridge for</font>

128
00:06:43,389 --> 00:06:48,219
<font color="#CCCCCC">example a Java bridge then it will show</font>

129
00:06:44,979 --> 00:06:50,560
<font color="#CCCCCC">you that sort of stuff first and it will</font>

130
00:06:48,219 --> 00:06:52,659
run security<font color="#E5E5E5"> tests on each of the</font>

131
00:06:50,560 --> 00:06:55,479
<font color="#CCCCCC">properties as well</font><font color="#E5E5E5"> so it will try and</font>

132
00:06:52,659 --> 00:06:58,509
exploit these objects<font color="#CCCCCC"> so for example you</font>

133
00:06:55,479 --> 00:07:01,150
might have<font color="#CCCCCC"> a cross</font><font color="#E5E5E5"> domain iframe window</font>

134
00:06:58,509 --> 00:07:02,919
object this tool will allow<font color="#E5E5E5"> you to</font>

135
00:07:01,150 --> 00:07:08,849
inspect<font color="#CCCCCC"> that object and test it</font><font color="#E5E5E5"> for</font>

136
00:07:02,919 --> 00:07:12,099
security<font color="#E5E5E5"> flaws so here I've put in the</font>

137
00:07:08,849 --> 00:07:14,500
<font color="#E5E5E5">window objects</font><font color="#CCCCCC"> I mean and I'm inspecting</font>

138
00:07:12,099 --> 00:07:16,180
the window object<font color="#CCCCCC"> so on the left is the</font>

139
00:07:14,500 --> 00:07:18,030
name so in this case<font color="#E5E5E5"> it's window the</font>

140
00:07:16,180 --> 00:07:19,920
value the value<font color="#E5E5E5"> of the window</font>

141
00:07:18,030 --> 00:07:22,679
and the proper team<font color="#E5E5E5"> for on the right is</font>

142
00:07:19,920 --> 00:07:25,500
were some more<font color="#E5E5E5"> interesting stuff is so</font>

143
00:07:22,680 --> 00:07:27,150
it'll tell you<font color="#E5E5E5"> the type of object</font><font color="#CCCCCC"> its</font>

144
00:07:25,500 --> 00:07:29,370
length<font color="#CCCCCC"> if it's a function</font><font color="#E5E5E5"> how many</font>

145
00:07:27,150 --> 00:07:31,950
<font color="#E5E5E5">arguments it's got what type of</font><font color="#CCCCCC"> object</font>

146
00:07:29,370 --> 00:07:34,170
it is so in this<font color="#E5E5E5"> instance it's detected</font>

147
00:07:31,950 --> 00:07:36,000
it<font color="#CCCCCC"> as a</font><font color="#E5E5E5"> window object and this is really</font>

148
00:07:34,170 --> 00:07:38,940
important because<font color="#E5E5E5"> the window objects is</font>

149
00:07:36,000 --> 00:07:41,250
<font color="#CCCCCC">the key to enumerate</font><font color="#E5E5E5"> and stuff and you</font>

150
00:07:38,940 --> 00:07:44,640
can send<font color="#E5E5E5"> that information to input so</font>

151
00:07:41,250 --> 00:07:47,370
that<font color="#CCCCCC"> will copy it to the input box and</font>

152
00:07:44,640 --> 00:07:49,050
here I've enumerated the window<font color="#E5E5E5"> and</font>

153
00:07:47,370 --> 00:07:50,970
underneath is the<font color="#E5E5E5"> results of the</font>

154
00:07:49,050 --> 00:07:53,450
enumeration<font color="#CCCCCC"> and you can click on the</font>

155
00:07:50,970 --> 00:07:55,650
arrows and drill down<font color="#E5E5E5"> further and</font>

156
00:07:53,450 --> 00:08:02,340
enumerate further on the different

157
00:07:55,650 --> 00:08:05,310
<font color="#E5E5E5">properties it also supports HTML and it</font>

158
00:08:02,340 --> 00:08:07,440
will detect if the character begins<font color="#CCCCCC"> with</font>

159
00:08:05,310 --> 00:08:09,390
a less<font color="#E5E5E5"> than sign and then writes it to</font>

160
00:08:07,440 --> 00:08:14,000
<font color="#CCCCCC">the Dom so that you can inspect these</font>

161
00:08:09,390 --> 00:08:16,289
HTML<font color="#E5E5E5"> objects and as I said you can</font>

162
00:08:14,000 --> 00:08:21,030
inspect normal objects<font color="#E5E5E5"> or you can</font>

163
00:08:16,290 --> 00:08:23,850
inspect<font color="#CCCCCC"> cross-domain window objects and</font>

164
00:08:21,030 --> 00:08:27,479
you<font color="#E5E5E5"> can filter it</font><font color="#CCCCCC"> too so</font><font color="#E5E5E5"> you can reg</font>

165
00:08:23,850 --> 00:08:30,030
exit by a<font color="#E5E5E5"> property</font><font color="#CCCCCC"> named you can filter</font>

166
00:08:27,480 --> 00:08:32,310
it<font color="#E5E5E5"> by the type of object which is really</font>

167
00:08:30,030 --> 00:08:34,770
<font color="#CCCCCC">interesting for</font><font color="#E5E5E5"> hacking</font><font color="#CCCCCC"> JavaScript</font>

168
00:08:32,309 --> 00:08:38,640
<font color="#E5E5E5">because it allows you allows you to</font>

169
00:08:34,770 --> 00:08:40,348
detect<font color="#E5E5E5"> what if it's a window object the</font>

170
00:08:38,640 --> 00:08:42,598
browser might add a new property called

171
00:08:40,349 --> 00:08:44,640
global front for instance so from a

172
00:08:42,599 --> 00:08:46,920
<font color="#CCCCCC">JavaScript hackers point of view it's</font>

173
00:08:44,640 --> 00:08:51,150
useful<font color="#CCCCCC"> to know these objects are windows</font>

174
00:08:46,920 --> 00:08:53,339
and<font color="#CCCCCC"> the value of</font><font color="#E5E5E5"> the property if it's a</font>

175
00:08:51,150 --> 00:08:54,750
window object it will<font color="#CCCCCC"> filter by</font>

176
00:08:53,340 --> 00:08:57,240
interesting so<font color="#CCCCCC"> it'll show you the</font>

177
00:08:54,750 --> 00:09:01,380
<font color="#E5E5E5">interesting</font><font color="#CCCCCC"> stuff first with a just a</font>

178
00:08:57,240 --> 00:09:04,940
<font color="#E5E5E5">simple</font><font color="#CCCCCC"> checkbox so the key to</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> are</font>

179
00:09:01,380 --> 00:09:07,890
<font color="#CCCCCC">Windows</font><font color="#E5E5E5"> once you know there's a window</font>

180
00:09:04,940 --> 00:09:10,080
then you can enumerate<font color="#E5E5E5"> that object and</font>

181
00:09:07,890 --> 00:09:12,930
if you know<font color="#CCCCCC"> it's a cross-domain window</font>

182
00:09:10,080 --> 00:09:17,240
you can perform security<font color="#E5E5E5"> tests on it to</font>

183
00:09:12,930 --> 00:09:20,640
make<font color="#E5E5E5"> sure the shop is properly enforced</font>

184
00:09:17,240 --> 00:09:23,940
<font color="#CCCCCC">sorts of detects a window it's pretty</font>

185
00:09:20,640 --> 00:09:26,400
simple so this function basically<font color="#CCCCCC"> looks</font>

186
00:09:23,940 --> 00:09:29,670
at<font color="#E5E5E5"> the window property and compares it</font>

187
00:09:26,400 --> 00:09:31,650
<font color="#E5E5E5">against itself and it will be detected</font>

188
00:09:29,670 --> 00:09:35,250
<font color="#CCCCCC">as the window</font><font color="#E5E5E5"> object</font>

189
00:09:31,650 --> 00:09:36,990
and if<font color="#E5E5E5"> that property doesn't exist or it</font>

190
00:09:35,250 --> 00:09:39,150
<font color="#CCCCCC">doesn't equal</font><font color="#E5E5E5"> itself then it will return</font>

191
00:09:36,990 --> 00:09:41,910
<font color="#CCCCCC">false so that's a cool</font><font color="#E5E5E5"> way</font><font color="#CCCCCC"> of detecting</font>

192
00:09:39,150 --> 00:09:43,920
<font color="#CCCCCC">Windows and you can filter</font><font color="#E5E5E5"> by that so</font>

193
00:09:41,910 --> 00:09:46,560
you can get all the window objects and

194
00:09:43,920 --> 00:09:51,180
you can<font color="#CCCCCC"> also detect</font><font color="#E5E5E5"> a cross</font><font color="#CCCCCC"> Damir</font><font color="#E5E5E5"> in</font>

195
00:09:46,560 --> 00:09:53,760
window<font color="#E5E5E5"> using the following</font><font color="#CCCCCC"> technique so</font>

196
00:09:51,180 --> 00:09:57,510
here we have a function<font color="#CCCCCC"> that it reuses</font>

197
00:09:53,760 --> 00:09:59,279
that is<font color="#E5E5E5"> window function and it check</font>

198
00:09:57,510 --> 00:10:01,589
this this<font color="#E5E5E5"> these window function will</font>

199
00:09:59,279 --> 00:10:02,939
work on the cross<font color="#E5E5E5"> domain object</font><font color="#CCCCCC"> but</font>

200
00:10:01,589 --> 00:10:04,830
you're just proving<font color="#E5E5E5"> that it's a window</font>

201
00:10:02,940 --> 00:10:05,790
<font color="#E5E5E5">to actually prove that it's a cross</font>

202
00:10:04,830 --> 00:10:09,540
domain window

203
00:10:05,790 --> 00:10:11,880
we try and read the location<font color="#E5E5E5"> property of</font>

204
00:10:09,540 --> 00:10:14,160
the window<font color="#E5E5E5"> and then convert that to a</font>

205
00:10:11,880 --> 00:10:17,189
string<font color="#E5E5E5"> and that will be as an exception</font>

206
00:10:14,160 --> 00:10:18,719
for<font color="#E5E5E5"> a cross domain window</font><font color="#CCCCCC"> so when the</font>

207
00:10:17,190 --> 00:10:20,160
exception is thrown<font color="#E5E5E5"> that will be</font>

208
00:10:18,720 --> 00:10:22,920
detected<font color="#E5E5E5"> as a cross domain window</font>

209
00:10:20,160 --> 00:10:24,420
because those checks have<font color="#E5E5E5"> been passed so</font>

210
00:10:22,920 --> 00:10:28,560
it's a pretty<font color="#CCCCCC"> cool way of</font><font color="#E5E5E5"> detecting</font><font color="#CCCCCC"> a</font>

211
00:10:24,420 --> 00:10:32,339
<font color="#CCCCCC">cross demand window so here</font><font color="#E5E5E5"> I've entered</font>

212
00:10:28,560 --> 00:10:36,680
the window<font color="#CCCCCC"> object again and</font><font color="#E5E5E5"> our filter</font>

213
00:10:32,339 --> 00:10:36,680
by window to get<font color="#E5E5E5"> all the window objects</font>

214
00:10:37,400 --> 00:10:41,689
<font color="#E5E5E5">and this is how to detect the function</font>

215
00:10:39,750 --> 00:10:45,900
constructor so I<font color="#E5E5E5"> borrowed this from</font>

216
00:10:41,690 --> 00:10:48,120
<font color="#E5E5E5">angularjs</font><font color="#CCCCCC"> so it looks at the constructor</font>

217
00:10:45,900 --> 00:10:50,040
property<font color="#E5E5E5"> and compares it against itself</font>

218
00:10:48,120 --> 00:10:52,529
<font color="#CCCCCC">and this will detect</font><font color="#E5E5E5"> the function</font>

219
00:10:50,040 --> 00:10:54,449
constructor so a function constructor is

220
00:10:52,529 --> 00:10:58,020
interesting because it<font color="#E5E5E5"> allows you to</font>

221
00:10:54,450 --> 00:11:00,470
execute arbitrary<font color="#E5E5E5"> card and</font><font color="#CCCCCC"> a function</font>

222
00:10:58,020 --> 00:11:03,150
constructor can come from<font color="#E5E5E5"> another domain</font>

223
00:11:00,470 --> 00:11:05,010
<font color="#E5E5E5">so detecting these function constructors</font>

224
00:11:03,150 --> 00:11:09,839
<font color="#E5E5E5">are highly important when you're testing</font>

225
00:11:05,010 --> 00:11:11,580
browsers for security flaws<font color="#CCCCCC"> and I came</font>

226
00:11:09,839 --> 00:11:14,910
up<font color="#CCCCCC"> with this cool technique of detecting</font>

227
00:11:11,580 --> 00:11:18,900
the object constructor<font color="#E5E5E5"> angularjs gave up</font>

228
00:11:14,910 --> 00:11:21,209
on<font color="#CCCCCC"> that but</font><font color="#E5E5E5"> I came</font><font color="#CCCCCC"> up with this</font><font color="#E5E5E5"> so you</font>

229
00:11:18,900 --> 00:11:23,069
check if the object is<font color="#E5E5E5"> true the-- has it</font>

230
00:11:21,209 --> 00:11:27,029
got<font color="#E5E5E5"> the prot or property and then</font>

231
00:11:23,070 --> 00:11:29,370
<font color="#E5E5E5">comparing the product property</font><font color="#CCCCCC"> of the</font>

232
00:11:27,029 --> 00:11:31,680
<font color="#CCCCCC">object to the constructor and that will</font>

233
00:11:29,370 --> 00:11:33,589
detect the<font color="#CCCCCC"> object constructor</font><font color="#E5E5E5"> so the</font>

234
00:11:31,680 --> 00:11:36,569
object constructor is interesting too

235
00:11:33,589 --> 00:11:38,640
<font color="#CCCCCC">because it doesn't allow you</font><font color="#E5E5E5"> to execute</font>

236
00:11:36,570 --> 00:11:45,240
arbitrary<font color="#CCCCCC"> code</font><font color="#E5E5E5"> but it allows you to</font>

237
00:11:38,640 --> 00:11:48,990
<font color="#E5E5E5">modify the</font><font color="#CCCCCC"> global properties and global</font>

238
00:11:45,240 --> 00:11:50,730
<font color="#CCCCCC">Jax okay so I like to</font><font color="#E5E5E5"> give you a quick</font>

239
00:11:48,990 --> 00:11:53,270
demo of<font color="#E5E5E5"> the tool just so we know what</font>

240
00:11:50,730 --> 00:11:53,270
<font color="#E5E5E5">we're talking about</font>

241
00:12:05,830 --> 00:12:12,730
so this is the tool<font color="#CCCCCC"> the idea here is</font><font color="#E5E5E5"> you</font>

242
00:12:10,360 --> 00:12:17,140
can run this tool<font color="#E5E5E5"> on</font><font color="#CCCCCC"> your own website</font>

243
00:12:12,730 --> 00:12:20,200
<font color="#CCCCCC">and run it from there to inspect</font><font color="#E5E5E5"> web</font>

244
00:12:17,140 --> 00:12:23,800
<font color="#E5E5E5">services</font><font color="#CCCCCC"> that render pages</font><font color="#E5E5E5"> so first of</font>

245
00:12:20,200 --> 00:12:28,570
all I'll inspect the window object if

246
00:12:23,800 --> 00:12:33,550
you can see<font color="#E5E5E5"> and</font><font color="#CCCCCC"> you can</font><font color="#E5E5E5"> filter it</font><font color="#CCCCCC"> by</font>

247
00:12:28,570 --> 00:12:35,769
type<font color="#E5E5E5"> so I want to get so you can get the</font>

248
00:12:33,550 --> 00:12:38,290
<font color="#E5E5E5">Java bridges for example you can get</font>

249
00:12:35,769 --> 00:12:40,860
function<font color="#E5E5E5"> constructors Dom nodes</font><font color="#CCCCCC"> but in</font>

250
00:12:38,290 --> 00:12:42,969
this<font color="#E5E5E5"> instance I get a window object and</font>

251
00:12:40,860 --> 00:12:47,140
<font color="#E5E5E5">immediately it will show you all</font><font color="#CCCCCC"> the</font>

252
00:12:42,970 --> 00:12:48,730
window objects which<font color="#CCCCCC"> is pretty cool</font><font color="#E5E5E5"> from</font>

253
00:12:47,140 --> 00:12:52,600
hacking point of view<font color="#CCCCCC"> that the windows</font>

254
00:12:48,730 --> 00:12:55,930
are<font color="#CCCCCC"> either</font><font color="#E5E5E5"> key really so you can also</font>

255
00:12:52,600 --> 00:12:57,550
filter by a<font color="#E5E5E5"> reg X so I could</font><font color="#CCCCCC"> look for a</font>

256
00:12:55,930 --> 00:13:01,300
top for instance and that<font color="#E5E5E5"> would</font>

257
00:12:57,550 --> 00:13:04,719
instantly show me<font color="#E5E5E5"> the property and as I</font>

258
00:13:01,300 --> 00:13:08,170
said<font color="#E5E5E5"> you can inspect cross-domain window</font>

259
00:13:04,720 --> 00:13:11,770
objects<font color="#CCCCCC"> so here I've got</font><font color="#E5E5E5"> an iframe</font>

260
00:13:08,170 --> 00:13:15,640
that's pointing to X<font color="#E5E5E5"> - domain comm with</font>

261
00:13:11,770 --> 00:13:17,500
an idea of X and then once you've done

262
00:13:15,640 --> 00:13:20,199
<font color="#CCCCCC">that you can then use the reference to</font>

263
00:13:17,500 --> 00:13:22,600
the object<font color="#E5E5E5"> which is X and inspect across</font>

264
00:13:20,200 --> 00:13:24,100
the main window object<font color="#E5E5E5"> so immediately</font>

265
00:13:22,600 --> 00:13:26,079
now we get<font color="#CCCCCC"> loads</font><font color="#E5E5E5"> of properties on this</font>

266
00:13:24,100 --> 00:13:28,600
cross<font color="#CCCCCC"> demand window object but the</font>

267
00:13:26,079 --> 00:13:32,170
interesting one is the content window<font color="#E5E5E5"> so</font>

268
00:13:28,600 --> 00:13:35,110
the content window is the window of<font color="#E5E5E5"> the</font>

269
00:13:32,170 --> 00:13:37,079
iframe and that security restricted so

270
00:13:35,110 --> 00:13:42,279
you can only access<font color="#E5E5E5"> certain properties</font>

271
00:13:37,079 --> 00:13:45,239
so if we select<font color="#E5E5E5"> cross domain window you</font>

272
00:13:42,279 --> 00:13:47,980
can see there<font color="#E5E5E5"> the inspector has</font>

273
00:13:45,240 --> 00:13:50,680
enumerated that it can't get its<font color="#CCCCCC"> value</font>

274
00:13:47,980 --> 00:13:53,079
but<font color="#E5E5E5"> it'll still show it and it will say</font>

275
00:13:50,680 --> 00:13:55,989
<font color="#CCCCCC">on the right-hand side that</font><font color="#E5E5E5"> this is a</font>

276
00:13:53,079 --> 00:13:59,020
cross domain window and when you click

277
00:13:55,990 --> 00:14:01,570
on the inspection<font color="#E5E5E5"> and enumerate you can</font>

278
00:13:59,020 --> 00:14:03,279
see<font color="#E5E5E5"> its enumerated further and you can</font>

279
00:14:01,570 --> 00:14:07,480
see all the functions that you<font color="#CCCCCC"> can call</font>

280
00:14:03,279 --> 00:14:09,430
on that<font color="#E5E5E5"> cross domain window object so</font>

281
00:14:07,480 --> 00:14:11,260
because it can detect<font color="#E5E5E5"> a cross domain</font>

282
00:14:09,430 --> 00:14:14,349
<font color="#E5E5E5">window it knows that the object is</font>

283
00:14:11,260 --> 00:14:16,839
possibly a cross domain object<font color="#E5E5E5"> - so for</font>

284
00:14:14,350 --> 00:14:19,220
example the<font color="#CCCCCC"> clause prop the clause</font>

285
00:14:16,839 --> 00:14:23,270
<font color="#E5E5E5">function on the content window</font>

286
00:14:19,220 --> 00:14:25,640
so it will<font color="#E5E5E5"> try tests to overwrite</font>

287
00:14:23,270 --> 00:14:27,920
properties on<font color="#CCCCCC"> that function</font><font color="#E5E5E5"> which could</font>

288
00:14:25,640 --> 00:14:40,490
then<font color="#E5E5E5"> lead to see emerging policy</font>

289
00:14:27,920 --> 00:14:42,410
<font color="#CCCCCC">bypasses</font><font color="#E5E5E5"> okay so let's talk about</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> few</font>

290
00:14:40,490 --> 00:14:48,590
<font color="#E5E5E5">bugs</font><font color="#CCCCCC"> because</font><font color="#E5E5E5"> that's what I like to talk</font>

291
00:14:42,410 --> 00:14:50,660
about<font color="#CCCCCC"> so in the past I found it</font><font color="#E5E5E5"> quite a</font>

292
00:14:48,590 --> 00:14:54,140
<font color="#E5E5E5">few cool bugs that</font><font color="#CCCCCC"> have incorporated</font>

293
00:14:50,660 --> 00:14:55,520
<font color="#CCCCCC">into the inspector and this one is</font>

294
00:14:54,140 --> 00:14:58,189
pretty<font color="#E5E5E5"> simple</font>

295
00:14:55,520 --> 00:15:01,640
Safari<font color="#E5E5E5"> allowed you to overwrite</font><font color="#CCCCCC"> the</font>

296
00:14:58,190 --> 00:15:03,170
<font color="#CCCCCC">hosts property of the location object</font><font color="#E5E5E5"> so</font>

297
00:15:01,640 --> 00:15:05,000
you<font color="#E5E5E5"> might</font><font color="#CCCCCC"> think to yourself</font><font color="#E5E5E5"> well that's</font>

298
00:15:03,170 --> 00:15:06,949
not a really a<font color="#CCCCCC"> big deal</font><font color="#E5E5E5"> but what</font>

299
00:15:05,000 --> 00:15:08,600
happened was<font color="#E5E5E5"> the query string also was</font>

300
00:15:06,950 --> 00:15:10,730
sent when<font color="#CCCCCC"> you overwrite the horse</font>

301
00:15:08,600 --> 00:15:15,050
property<font color="#E5E5E5"> so you could have an iframe</font>

302
00:15:10,730 --> 00:15:17,180
<font color="#E5E5E5">that pointed to a different origin and</font>

303
00:15:15,050 --> 00:15:20,000
then you could change the location<font color="#CCCCCC"> horse</font>

304
00:15:17,180 --> 00:15:21,979
property to a different domain<font color="#E5E5E5"> and then</font>

305
00:15:20,000 --> 00:15:23,930
that would send the<font color="#E5E5E5"> query string so you</font>

306
00:15:21,980 --> 00:15:27,290
<font color="#CCCCCC">could steal data basically</font><font color="#E5E5E5"> they</font>

307
00:15:23,930 --> 00:15:29,930
shouldn't be allowed<font color="#CCCCCC"> to</font><font color="#E5E5E5"> also Safari</font>

308
00:15:27,290 --> 00:15:33,740
allowed you to overwrite<font color="#E5E5E5"> the top and</font>

309
00:15:29,930 --> 00:15:36,140
<font color="#CCCCCC">parent</font><font color="#E5E5E5"> object with another function</font><font color="#CCCCCC"> so</font>

310
00:15:33,740 --> 00:15:38,810
<font color="#E5E5E5">here we have an iframe and it overwrites</font>

311
00:15:36,140 --> 00:15:41,030
the<font color="#E5E5E5"> parent and top function with the</font>

312
00:15:38,810 --> 00:15:43,459
alert function and then on<font color="#E5E5E5"> that external</font>

313
00:15:41,030 --> 00:15:45,980
<font color="#E5E5E5">domain</font><font color="#CCCCCC"> I've shown</font><font color="#E5E5E5"> scripts here but it</font>

314
00:15:43,460 --> 00:15:48,440
would<font color="#E5E5E5"> probably be a click so you could</font>

315
00:15:45,980 --> 00:15:51,470
call parents<font color="#E5E5E5"> as a function and call top</font>

316
00:15:48,440 --> 00:15:53,420
as a function and that<font color="#E5E5E5"> would execute so</font>

317
00:15:51,470 --> 00:15:54,590
it was like a same origin policy bypass

318
00:15:53,420 --> 00:15:59,150
because normally that wouldn't be

319
00:15:54,590 --> 00:16:02,180
<font color="#E5E5E5">allowed this one is a cool bug I</font>

320
00:15:59,150 --> 00:16:05,480
reported privately to Microsoft

321
00:16:02,180 --> 00:16:07,959
basically the<font color="#CCCCCC"> caused property was</font>

322
00:16:05,480 --> 00:16:10,220
leaking across the main constructor

323
00:16:07,960 --> 00:16:12,950
<font color="#CCCCCC">which sounds quite complicated but it's</font>

324
00:16:10,220 --> 00:16:15,530
pretty<font color="#E5E5E5"> simple</font><font color="#CCCCCC"> when I drew the</font><font color="#E5E5E5"> card so I</font>

325
00:16:12,950 --> 00:16:17,900
forgot<font color="#E5E5E5"> an iframe</font><font color="#CCCCCC"> and we've got a Content</font>

326
00:16:15,530 --> 00:16:21,589
<font color="#E5E5E5">window now interestingly the closed</font>

327
00:16:17,900 --> 00:16:23,540
property applies to window objects<font color="#E5E5E5"> and</font>

328
00:16:21,590 --> 00:16:25,220
it tells you quite obviously<font color="#E5E5E5"> that if the</font>

329
00:16:23,540 --> 00:16:27,530
window<font color="#E5E5E5"> is closed or not but this also</font>

330
00:16:25,220 --> 00:16:28,820
applies to<font color="#E5E5E5"> an iframe for some reason and</font>

331
00:16:27,530 --> 00:16:33,020
that's<font color="#E5E5E5"> probably because it's a window</font>

332
00:16:28,820 --> 00:16:34,760
objects as well<font color="#CCCCCC"> so what Microsoft</font>

333
00:16:33,020 --> 00:16:36,350
they forgot<font color="#E5E5E5"> about this property</font><font color="#CCCCCC"> and they</font>

334
00:16:34,760 --> 00:16:38,689
weren't<font color="#E5E5E5"> doing any checks whatsoever on</font>

335
00:16:36,350 --> 00:16:41,030
it and it was a crust a memory<font color="#E5E5E5"> an object</font>

336
00:16:38,690 --> 00:16:42,560
so if you get the the constructor of the

337
00:16:41,030 --> 00:16:44,780
<font color="#CCCCCC">cross-domain billion</font><font color="#E5E5E5"> object you get the</font>

338
00:16:42,560 --> 00:16:45,739
<font color="#E5E5E5">buildin constructor and then the</font>

339
00:16:44,780 --> 00:16:48,410
constructor<font color="#CCCCCC"> of that is a function</font>

340
00:16:45,740 --> 00:16:50,360
constructor and the function constructor

341
00:16:48,410 --> 00:16:53,270
<font color="#E5E5E5">allows you to execute our brush your</font>

342
00:16:50,360 --> 00:16:55,010
<font color="#CCCCCC">cord</font><font color="#E5E5E5"> so when you pop when you execute</font>

343
00:16:53,270 --> 00:16:58,660
that<font color="#E5E5E5"> alert and pop</font><font color="#CCCCCC"> that alert it will</font>

344
00:16:55,010 --> 00:17:01,730
actually tell<font color="#CCCCCC"> you the domain</font><font color="#E5E5E5"> of the</font>

345
00:16:58,660 --> 00:17:06,889
<font color="#E5E5E5">iframe the cross-origin iframe so you've</font>

346
00:17:01,730 --> 00:17:12,380
got<font color="#CCCCCC"> basically Universal XSS this one is</font>

347
00:17:06,890 --> 00:17:14,720
<font color="#E5E5E5">probably</font><font color="#CCCCCC"> my favorite book</font><font color="#E5E5E5"> so this was</font>

348
00:17:12,380 --> 00:17:16,670
similar<font color="#CCCCCC"> to the previous book that I</font>

349
00:17:14,720 --> 00:17:19,940
showed<font color="#CCCCCC"> you but with one important</font>

350
00:17:16,670 --> 00:17:21,740
<font color="#CCCCCC">difference</font><font color="#E5E5E5"> so in this way they were they</font>

351
00:17:19,940 --> 00:17:25,280
were leaking the constructor property of

352
00:17:21,740 --> 00:17:28,069
the location<font color="#CCCCCC"> object and you could use</font>

353
00:17:25,280 --> 00:17:29,600
prot attack<font color="#E5E5E5"> define getter and dot</font>

354
00:17:28,069 --> 00:17:32,270
constructor<font color="#E5E5E5"> to get the function</font>

355
00:17:29,600 --> 00:17:34,250
constructor but this time it was quite

356
00:17:32,270 --> 00:17:36,260
<font color="#E5E5E5">interesting</font><font color="#CCCCCC"> I tried to call the</font><font color="#E5E5E5"> alert</font>

357
00:17:34,250 --> 00:17:38,900
function<font color="#E5E5E5"> and it</font><font color="#CCCCCC"> didn't work</font>

358
00:17:36,260 --> 00:17:39,890
it said this<font color="#CCCCCC"> is a cross domain function</font>

359
00:17:38,900 --> 00:17:42,200
constructor you're not allowed<font color="#E5E5E5"> to do</font>

360
00:17:39,890 --> 00:17:44,270
<font color="#E5E5E5">that so I thought</font><font color="#CCCCCC"> mmm</font>

361
00:17:42,200 --> 00:17:46,220
I shouldn't<font color="#E5E5E5"> still be allowed to call the</font>

362
00:17:44,270 --> 00:17:47,780
function<font color="#E5E5E5"> constructor but it's not</font>

363
00:17:46,220 --> 00:17:50,710
<font color="#E5E5E5">allowing me to</font><font color="#CCCCCC"> access these functions</font>

364
00:17:47,780 --> 00:17:52,940
what up what<font color="#E5E5E5"> else could I do so I</font>

365
00:17:50,710 --> 00:17:55,460
thought well<font color="#CCCCCC"> let's see what if it</font>

366
00:17:52,940 --> 00:17:57,910
evaluates<font color="#CCCCCC"> so I did</font><font color="#E5E5E5"> one plus one and</font><font color="#CCCCCC"> see</font>

367
00:17:55,460 --> 00:18:01,160
<font color="#E5E5E5">if I got two and it did it worked</font><font color="#CCCCCC"> so</font>

368
00:17:57,910 --> 00:18:06,410
<font color="#CCCCCC">that</font><font color="#E5E5E5"> got me</font><font color="#CCCCCC"> thinking</font><font color="#E5E5E5"> maybe</font><font color="#CCCCCC"> if you</font>

369
00:18:01,160 --> 00:18:08,120
overwrite<font color="#CCCCCC"> a function on on an array</font>

370
00:18:06,410 --> 00:18:10,580
object for<font color="#CCCCCC"> example you could</font><font color="#E5E5E5"> get</font>

371
00:18:08,120 --> 00:18:13,939
arbitrary code execution<font color="#E5E5E5"> in</font><font color="#CCCCCC"> the context</font>

372
00:18:10,580 --> 00:18:16,699
of<font color="#E5E5E5"> that domain so what i did was i over</font>

373
00:18:13,940 --> 00:18:19,970
<font color="#CCCCCC">Ott's the joint function</font><font color="#E5E5E5"> so i overrode</font>

374
00:18:16,700 --> 00:18:22,550
the join function<font color="#E5E5E5"> and for every single</font>

375
00:18:19,970 --> 00:18:24,650
<font color="#E5E5E5">array on that domain so when the join</font>

376
00:18:22,550 --> 00:18:27,409
function<font color="#CCCCCC"> was</font><font color="#E5E5E5"> called on that that that</font>

377
00:18:24,650 --> 00:18:30,400
domain<font color="#E5E5E5"> it would execute my cord and it</font>

378
00:18:27,410 --> 00:18:35,090
would<font color="#E5E5E5"> and it would alert</font><font color="#CCCCCC"> porned with the</font>

379
00:18:30,400 --> 00:18:38,990
contents of the body in a HTML so at

380
00:18:35,090 --> 00:18:40,590
some of the<font color="#E5E5E5"> universal XSS</font><font color="#CCCCCC"> this one was</font>

381
00:18:38,990 --> 00:18:44,649
<font color="#E5E5E5">quite funny</font>

382
00:18:40,590 --> 00:18:48,129
firefox 15 ships<font color="#E5E5E5"> without any protections</font>

383
00:18:44,649 --> 00:18:50,428
whatsoever<font color="#E5E5E5"> on the location object so I</font>

384
00:18:48,129 --> 00:18:52,689
created a<font color="#E5E5E5"> blog post called</font>

385
00:18:50,429 --> 00:18:56,100
<font color="#E5E5E5">Firefox knows what your friends did last</font>

386
00:18:52,690 --> 00:18:59,980
summer basically what it did was open

387
00:18:56,100 --> 00:19:04,629
<font color="#CCCCCC">the Twitter list page which redirected</font>

388
00:18:59,980 --> 00:19:06,909
you to a personalized<font color="#E5E5E5"> list page that</font>

389
00:19:04,629 --> 00:19:09,100
contained your<font color="#CCCCCC"> Twitter handle</font><font color="#E5E5E5"> and then</font>

390
00:19:06,909 --> 00:19:12,279
Firefox just didn't check the<font color="#CCCCCC"> location</font>

391
00:19:09,100 --> 00:19:14,080
at all<font color="#E5E5E5"> so then you could get the user ID</font>

392
00:19:12,279 --> 00:19:18,639
of<font color="#E5E5E5"> the Twitter user and then get</font><font color="#CCCCCC"> other</font>

393
00:19:14,080 --> 00:19:20,350
<font color="#E5E5E5">friends</font><font color="#CCCCCC"> yeah so that</font><font color="#E5E5E5"> was pretty bad</font><font color="#CCCCCC"> and</font>

394
00:19:18,639 --> 00:19:26,498
<font color="#E5E5E5">these books will be easily detected in</font>

395
00:19:20,350 --> 00:19:30,609
the<font color="#CCCCCC"> inspector so this one was a safari</font>

396
00:19:26,499 --> 00:19:35,739
<font color="#CCCCCC">Universal</font><font color="#E5E5E5"> exercise so back in the day I</font>

397
00:19:30,609 --> 00:19:38,949
was<font color="#E5E5E5"> testing</font><font color="#CCCCCC"> Safari</font><font color="#E5E5E5"> and I found that the</font>

398
00:19:35,739 --> 00:19:43,840
about blank context<font color="#E5E5E5"> wasn't been enforced</font>

399
00:19:38,950 --> 00:19:45,730
correctly for local files<font color="#E5E5E5"> so</font><font color="#CCCCCC"> I've</font>

400
00:19:43,840 --> 00:19:48,129
reported<font color="#CCCCCC"> this to</font><font color="#E5E5E5"> Apple and they refused</font>

401
00:19:45,730 --> 00:19:50,109
<font color="#CCCCCC">to say that this was a problem so you</font>

402
00:19:48,129 --> 00:19:52,359
could open<font color="#E5E5E5"> a local file with a local</font>

403
00:19:50,109 --> 00:19:54,220
HTML file<font color="#E5E5E5"> and it could read Amazon duck</font>

404
00:19:52,359 --> 00:19:55,570
<font color="#CCCCCC">call at UK for example and that</font><font color="#E5E5E5"> was</font>

405
00:19:54,220 --> 00:19:59,649
really bad

406
00:19:55,570 --> 00:20:02,559
<font color="#E5E5E5">so I stayed up 23 hours to try and prove</font>

407
00:19:59,649 --> 00:20:05,379
<font color="#CCCCCC">that this was a serious</font><font color="#E5E5E5"> book so as soon</font>

408
00:20:02,559 --> 00:20:07,450
as<font color="#E5E5E5"> the besa came out I stayed up 24 23</font>

409
00:20:05,379 --> 00:20:09,639
hours straight<font color="#CCCCCC"> I can't do that now</font>

410
00:20:07,450 --> 00:20:12,299
<font color="#CCCCCC">because</font><font color="#E5E5E5"> I've got kids but back in the</font>

411
00:20:09,639 --> 00:20:16,479
day<font color="#E5E5E5"> that's what I used to do</font><font color="#CCCCCC"> and</font>

412
00:20:12,299 --> 00:20:20,289
basically<font color="#E5E5E5"> the</font><font color="#CCCCCC"> x-play</font><font color="#E5E5E5"> just involved using</font>

413
00:20:16,480 --> 00:20:22,690
<font color="#E5E5E5">an ass</font><font color="#CCCCCC"> for him use it</font><font color="#E5E5E5"> pointing it to</font>

414
00:20:20,289 --> 00:20:26,919
about blank<font color="#E5E5E5"> then when that lauded</font>

415
00:20:22,690 --> 00:20:29,440
<font color="#CCCCCC">overwrite the document body dot</font><font color="#E5E5E5"> in HTML</font>

416
00:20:26,919 --> 00:20:31,409
<font color="#E5E5E5">with another iframe and this was before</font>

417
00:20:29,440 --> 00:20:33,609
I click<font color="#CCCCCC"> jackin so this worked</font>

418
00:20:31,409 --> 00:20:37,210
<font color="#E5E5E5">you could you</font><font color="#CCCCCC"> could</font><font color="#E5E5E5"> ask</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> him any</font><font color="#CCCCCC"> web</font>

419
00:20:33,609 --> 00:20:39,100
<font color="#CCCCCC">site</font><font color="#E5E5E5"> and basically it would</font><font color="#CCCCCC"> law Amazon</font>

420
00:20:37,210 --> 00:20:44,889
<font color="#E5E5E5">call at UK and then you had</font><font color="#CCCCCC"> access to</font>

421
00:20:39,100 --> 00:20:47,199
<font color="#E5E5E5">the inner HTML or the cookies</font><font color="#CCCCCC"> so all</font>

422
00:20:44,889 --> 00:20:49,479
these bugs will<font color="#E5E5E5"> be easy to find with the</font>

423
00:20:47,200 --> 00:20:53,769
inspector and I've incorporated some<font color="#E5E5E5"> of</font>

424
00:20:49,480 --> 00:20:54,260
these into<font color="#CCCCCC"> it as well I've created some</font>

425
00:20:53,769 --> 00:20:56,030
automated

426
00:20:54,260 --> 00:20:59,810
<font color="#E5E5E5">test that find all this sort of</font><font color="#CCCCCC"> stuff</font>

427
00:20:56,030 --> 00:21:02,210
and<font color="#E5E5E5"> some</font><font color="#CCCCCC"> of the stuff like the opera</font>

428
00:20:59,810 --> 00:21:05,179
book that assured<font color="#E5E5E5"> requires manual</font>

429
00:21:02,210 --> 00:21:07,940
analysis because sometimes if you call

430
00:21:05,180 --> 00:21:10,580
the<font color="#CCCCCC"> konk ssin constructor it won't</font>

431
00:21:07,940 --> 00:21:13,100
always<font color="#E5E5E5"> return</font><font color="#CCCCCC"> the value that you</font><font color="#E5E5E5"> that</font>

432
00:21:10,580 --> 00:21:16,490
you<font color="#CCCCCC"> are</font><font color="#E5E5E5"> have access to so you might need</font>

433
00:21:13,100 --> 00:21:19,610
<font color="#E5E5E5">to</font><font color="#CCCCCC"> use a tool for manual analysis and</font>

434
00:21:16,490 --> 00:21:22,040
try and exploit the books<font color="#E5E5E5"> because things</font>

435
00:21:19,610 --> 00:21:27,709
like overwriting<font color="#E5E5E5"> the</font><font color="#CCCCCC"> join function for</font>

436
00:21:22,040 --> 00:21:29,810
example<font color="#CCCCCC"> are difficult to do automated so</font>

437
00:21:27,710 --> 00:21:33,620
here's a couple<font color="#E5E5E5"> of security tests that</font>

438
00:21:29,810 --> 00:21:37,940
<font color="#E5E5E5">I've got so once you know you've got a</font>

439
00:21:33,620 --> 00:21:40,189
cross<font color="#E5E5E5"> domain window you can train set a</font>

440
00:21:37,940 --> 00:21:42,650
<font color="#E5E5E5">property on that cross domain window</font>

441
00:21:40,190 --> 00:21:45,110
object so<font color="#CCCCCC"> here</font><font color="#E5E5E5"> we just all right the</font>

442
00:21:42,650 --> 00:21:48,170
property test<font color="#E5E5E5"> and read it back and then</font>

443
00:21:45,110 --> 00:21:50,389
<font color="#E5E5E5">you can set</font><font color="#CCCCCC"> it will</font><font color="#E5E5E5"> display a message</font>

444
00:21:48,170 --> 00:21:52,640
<font color="#CCCCCC">saying that</font><font color="#E5E5E5"> you can set properties on a</font>

445
00:21:50,390 --> 00:21:54,740
cross to<font color="#CCCCCC"> my own window so this</font><font color="#E5E5E5"> can lead</font>

446
00:21:52,640 --> 00:21:59,990
to same origin policy bypasses because

447
00:21:54,740 --> 00:22:02,510
if<font color="#CCCCCC"> for example the website</font><font color="#E5E5E5"> is framed and</font>

448
00:21:59,990 --> 00:22:05,390
<font color="#E5E5E5">then you can call the function like blur</font>

449
00:22:02,510 --> 00:22:07,700
<font color="#E5E5E5">for example and then you</font><font color="#CCCCCC"> call the you</font>

450
00:22:05,390 --> 00:22:10,040
use the call property on the blur

451
00:22:07,700 --> 00:22:14,110
function then if you can<font color="#E5E5E5"> override</font><font color="#CCCCCC"> that</font>

452
00:22:10,040 --> 00:22:14,110
then that can<font color="#CCCCCC"> lead to universal exercise</font>

453
00:22:14,200 --> 00:22:21,050
<font color="#CCCCCC">and this</font><font color="#E5E5E5"> one is pretty cool</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is a</font>

454
00:22:17,300 --> 00:22:24,710
test based<font color="#E5E5E5"> on a safari bug so it checks</font>

455
00:22:21,050 --> 00:22:27,800
for<font color="#E5E5E5"> data leaking</font><font color="#CCCCCC"> in exceptions so if</font>

456
00:22:24,710 --> 00:22:30,500
you've<font color="#E5E5E5"> got a cross domain window object</font>

457
00:22:27,800 --> 00:22:32,780
so in this case or<font color="#CCCCCC"> BGA</font><font color="#E5E5E5"> is the cross</font>

458
00:22:30,500 --> 00:22:35,960
domain window object and you try<font color="#E5E5E5"> to read</font>

459
00:22:32,780 --> 00:22:39,590
a property<font color="#CCCCCC"> on that</font><font color="#E5E5E5"> object</font><font color="#CCCCCC"> so far if</font>

460
00:22:35,960 --> 00:22:44,510
there was an<font color="#CCCCCC"> exception but</font><font color="#E5E5E5"> actually it</font>

461
00:22:39,590 --> 00:22:47,419
leaks<font color="#E5E5E5"> the origin in the exception so you</font>

462
00:22:44,510 --> 00:22:51,350
can discover what our<font color="#E5E5E5"> frames are on a</font>

463
00:22:47,420 --> 00:22:54,230
different domain and you can get the

464
00:22:51,350 --> 00:22:57,080
origin on Safari so this will extract

465
00:22:54,230 --> 00:23:03,050
<font color="#E5E5E5">the the origin and show you that it's</font>

466
00:22:57,080 --> 00:23:05,629
vulnerable<font color="#CCCCCC"> so how can</font><font color="#E5E5E5"> you know if you've</font>

467
00:23:03,050 --> 00:23:07,450
<font color="#CCCCCC">got a cross domain function a cross</font>

468
00:23:05,630 --> 00:23:10,810
domain<font color="#E5E5E5"> function constructor</font>

469
00:23:07,450 --> 00:23:14,920
so there's no inbuilt way of doing this

470
00:23:10,810 --> 00:23:17,470
so<font color="#CCCCCC"> there's no like</font><font color="#E5E5E5"> is this cross domain</font>

471
00:23:14,920 --> 00:23:19,900
function constructor property<font color="#CCCCCC"> what you</font>

472
00:23:17,470 --> 00:23:23,200
have to do is<font color="#E5E5E5"> return the document</font><font color="#CCCCCC"> domain</font>

473
00:23:19,900 --> 00:23:25,390
to discover it<font color="#E5E5E5"> so</font><font color="#CCCCCC"> where do</font><font color="#E5E5E5"> you call the</font>

474
00:23:23,200 --> 00:23:27,760
function constructor so this object

475
00:23:25,390 --> 00:23:29,650
could<font color="#CCCCCC"> be any object it could be a</font>

476
00:23:27,760 --> 00:23:33,879
boolean like I showed<font color="#E5E5E5"> you</font><font color="#CCCCCC"> before it</font>

477
00:23:29,650 --> 00:23:36,520
could be a function<font color="#E5E5E5"> so in this case it's</font>

478
00:23:33,880 --> 00:23:39,370
an object<font color="#CCCCCC"> literal so the constructor of</font>

479
00:23:36,520 --> 00:23:41,620
<font color="#E5E5E5">the object literal is the object</font>

480
00:23:39,370 --> 00:23:43,419
constructor<font color="#E5E5E5"> and then the constructor of</font>

481
00:23:41,620 --> 00:23:47,139
<font color="#E5E5E5">that is the function constructor and</font>

482
00:23:43,420 --> 00:23:52,540
then when we return document.domain<font color="#E5E5E5"> that</font>

483
00:23:47,140 --> 00:23:55,540
will return<font color="#CCCCCC"> X</font><font color="#E5E5E5"> - domain calm calm so that</font>

484
00:23:52,540 --> 00:24:01,030
would indicate<font color="#E5E5E5"> that this</font><font color="#CCCCCC"> is a</font>

485
00:23:55,540 --> 00:24:03,490
<font color="#CCCCCC">cross-domain functioning constructor so</font>

486
00:24:01,030 --> 00:24:05,710
<font color="#CCCCCC">I've incorporated this into the tool so</font>

487
00:24:03,490 --> 00:24:09,460
as you enumerate cross-domain window

488
00:24:05,710 --> 00:24:11,200
objects<font color="#E5E5E5"> it will try and determine if</font>

489
00:24:09,460 --> 00:24:13,270
you've got a cross domain<font color="#E5E5E5"> function</font>

490
00:24:11,200 --> 00:24:15,460
constructor so this<font color="#E5E5E5"> took an even earning</font>

491
00:24:13,270 --> 00:24:19,750
bug bounties<font color="#E5E5E5"> and I recommend running on</font>

492
00:24:15,460 --> 00:24:21,970
mobile<font color="#E5E5E5"> applications like a mobile</font>

493
00:24:19,750 --> 00:24:25,630
browser<font color="#E5E5E5"> because it could find you</font>

494
00:24:21,970 --> 00:24:28,000
<font color="#CCCCCC">Universal XSS so I use that</font><font color="#E5E5E5"> technique to</font>

495
00:24:25,630 --> 00:24:28,840
check the domain<font color="#E5E5E5"> against the current</font>

496
00:24:28,000 --> 00:24:32,500
demand<font color="#E5E5E5"> that you're on</font>

497
00:24:28,840 --> 00:24:33,879
so the function constructor is called<font color="#CCCCCC"> it</font>

498
00:24:32,500 --> 00:24:35,650
returns the<font color="#E5E5E5"> document domain and you</font>

499
00:24:33,880 --> 00:24:37,960
compare it<font color="#E5E5E5"> against the document dot</font>

500
00:24:35,650 --> 00:24:39,100
domain<font color="#E5E5E5"> of the current window and that</font>

501
00:24:37,960 --> 00:24:43,990
will tell you<font color="#E5E5E5"> if you've</font><font color="#CCCCCC"> got a cross</font>

502
00:24:39,100 --> 00:24:47,020
domain<font color="#E5E5E5"> function constructor and it</font><font color="#CCCCCC"> also</font>

503
00:24:43,990 --> 00:24:49,420
the<font color="#CCCCCC"> Opera book that I showed you</font>

504
00:24:47,020 --> 00:24:52,000
I've also incorporated that check into

505
00:24:49,420 --> 00:24:53,410
into it as<font color="#E5E5E5"> well so it will check using</font>

506
00:24:52,000 --> 00:24:55,210
<font color="#CCCCCC">the different method to see if you've</font>

507
00:24:53,410 --> 00:24:57,400
got a cross domain function constructor

508
00:24:55,210 --> 00:24:59,080
<font color="#E5E5E5">and but in the upper case you will</font>

509
00:24:57,400 --> 00:25:03,640
probably<font color="#E5E5E5"> have to do manual analysis to</font>

510
00:24:59,080 --> 00:25:04,990
determine if it's vulnerable<font color="#E5E5E5"> and up</font><font color="#CCCCCC"> so</font>

511
00:25:03,640 --> 00:25:09,580
the next thing I want<font color="#E5E5E5"> to talk about are</font>

512
00:25:04,990 --> 00:25:13,240
Java bridges<font color="#E5E5E5"> so a Java bridge is a means</font>

513
00:25:09,580 --> 00:25:15,970
for JavaScript and<font color="#E5E5E5"> Java to communicate</font>

514
00:25:13,240 --> 00:25:18,040
<font color="#E5E5E5">so you can call JavaScript functions</font>

515
00:25:15,970 --> 00:25:21,250
from Java<font color="#E5E5E5"> and you</font><font color="#CCCCCC"> can call</font><font color="#E5E5E5"> Java</font>

516
00:25:18,040 --> 00:25:25,290
functions from JavaScript Java bridges

517
00:25:21,250 --> 00:25:28,300
<font color="#CCCCCC">are interesting because they are defined</font>

518
00:25:25,290 --> 00:25:32,639
by the developer and could contain

519
00:25:28,300 --> 00:25:36,790
remote code execution<font color="#E5E5E5"> and I was using</font>

520
00:25:32,640 --> 00:25:40,560
<font color="#CCCCCC">Jack's browser which is</font><font color="#E5E5E5"> a Java library</font>

521
00:25:36,790 --> 00:25:43,840
<font color="#CCCCCC">that</font><font color="#E5E5E5"> enables you to use chromium in Java</font>

522
00:25:40,560 --> 00:25:47,740
<font color="#E5E5E5">Allen</font><font color="#CCCCCC"> I was using a bridge</font><font color="#E5E5E5"> and I thought</font>

523
00:25:43,840 --> 00:25:50,709
this looks<font color="#E5E5E5"> dodgy really don't you so I</font>

524
00:25:47,740 --> 00:25:53,440
was<font color="#E5E5E5"> trying</font><font color="#CCCCCC"> to exploit it and I was</font>

525
00:25:50,710 --> 00:25:55,180
trying to<font color="#E5E5E5"> create</font><font color="#CCCCCC"> a new socket</font><font color="#E5E5E5"> and I</font>

526
00:25:53,440 --> 00:25:58,600
could create<font color="#CCCCCC"> a new socket and I knew</font>

527
00:25:55,180 --> 00:26:00,970
this<font color="#E5E5E5"> was interesting</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> I could not</font>

528
00:25:58,600 --> 00:26:04,149
<font color="#CCCCCC">find a way</font><font color="#E5E5E5"> to exploit it so I asked Matt</font>

529
00:26:00,970 --> 00:26:06,940
chicom a Patrick and Mike to<font color="#E5E5E5"> come over</font>

530
00:26:04,150 --> 00:26:11,020
<font color="#E5E5E5">and we we all worked on it together to</font>

531
00:26:06,940 --> 00:26:13,330
try and<font color="#E5E5E5"> exploit it</font><font color="#CCCCCC"> so the first thing</font>

532
00:26:11,020 --> 00:26:16,120
the inspector does when you select the

533
00:26:13,330 --> 00:26:19,899
Java bridge filter is detects<font color="#E5E5E5"> if it is a</font>

534
00:26:16,120 --> 00:26:21,669
<font color="#E5E5E5">Java bridge if it is a Java bridge</font><font color="#CCCCCC"> it</font>

535
00:26:19,900 --> 00:26:24,430
tries to create<font color="#CCCCCC"> a new socket</font><font color="#E5E5E5"> this</font>

536
00:26:21,670 --> 00:26:26,590
emulates my manual test<font color="#CCCCCC"> I found the</font>

537
00:26:24,430 --> 00:26:30,280
vulnerability<font color="#E5E5E5"> so if you can create</font><font color="#CCCCCC"> a new</font>

538
00:26:26,590 --> 00:26:32,620
<font color="#CCCCCC">socket then it</font><font color="#E5E5E5"> indicates that this is</font>

539
00:26:30,280 --> 00:26:34,210
probably an exploitable Java bridge<font color="#CCCCCC"> and</font>

540
00:26:32,620 --> 00:26:36,790
I've tried<font color="#CCCCCC"> to do it</font><font color="#E5E5E5"> in a generic way</font>

541
00:26:34,210 --> 00:26:41,800
<font color="#E5E5E5">using this test so it'll</font><font color="#CCCCCC"> work on other</font>

542
00:26:36,790 --> 00:26:44,800
Java bridges<font color="#E5E5E5"> too and then once we</font><font color="#CCCCCC"> know</font>

543
00:26:41,800 --> 00:26:47,800
<font color="#CCCCCC">that this bridge can you can create new</font>

544
00:26:44,800 --> 00:26:51,879
sockets then I can<font color="#E5E5E5"> use and I</font><font color="#CCCCCC"> can</font>

545
00:26:47,800 --> 00:26:55,180
<font color="#E5E5E5">generate an exploit using get class so</font>

546
00:26:51,880 --> 00:26:57,640
first<font color="#E5E5E5"> step is to detect if it's a Java</font>

547
00:26:55,180 --> 00:26:59,470
bridge so this is the function I came up

548
00:26:57,640 --> 00:27:02,560
with it's<font color="#E5E5E5"> pretty simple it just looks</font>

549
00:26:59,470 --> 00:27:04,960
for get class and<font color="#CCCCCC"> hash card and detects</font>

550
00:27:02,560 --> 00:27:07,870
<font color="#CCCCCC">e if it's got those properties then it</font>

551
00:27:04,960 --> 00:27:10,890
will be<font color="#E5E5E5"> detected as a Java bridge and</font>

552
00:27:07,870 --> 00:27:14,229
then we<font color="#CCCCCC"> need</font><font color="#E5E5E5"> to check if it's vulnerable</font>

553
00:27:10,890 --> 00:27:17,280
<font color="#CCCCCC">so getclass</font><font color="#E5E5E5"> allows you to get a</font><font color="#CCCCCC"> java</font>

554
00:27:14,230 --> 00:27:20,200
class<font color="#CCCCCC"> so in this instance</font><font color="#E5E5E5"> we're using</font>

555
00:27:17,280 --> 00:27:23,649
java.net<font color="#E5E5E5"> socket and creating a new</font>

556
00:27:20,200 --> 00:27:25,300
<font color="#CCCCCC">instance</font><font color="#E5E5E5"> now I knew</font><font color="#CCCCCC"> this was exploitable</font>

557
00:27:23,650 --> 00:27:27,850
<font color="#CCCCCC">because she</font><font color="#E5E5E5"> shouldn't be allowed to</font>

558
00:27:25,300 --> 00:27:31,330
create<font color="#E5E5E5"> Saki objects but I couldn't</font>

559
00:27:27,850 --> 00:27:32,860
exploit it because the bridge that<font color="#CCCCCC"> I</font><font color="#E5E5E5"> was</font>

560
00:27:31,330 --> 00:27:34,899
using will not allow me to<font color="#E5E5E5"> call</font>

561
00:27:32,860 --> 00:27:37,449
functions<font color="#CCCCCC"> on</font><font color="#E5E5E5"> that</font>

562
00:27:34,900 --> 00:27:41,410
<font color="#E5E5E5">objects when it was created</font><font color="#CCCCCC"> so I had to</font>

563
00:27:37,450 --> 00:27:44,050
come up with<font color="#CCCCCC"> a</font><font color="#E5E5E5"> different method</font><font color="#CCCCCC"> and so</font>

564
00:27:41,410 --> 00:27:50,560
this is how to exploit the bridge using

565
00:27:44,050 --> 00:27:53,620
<font color="#E5E5E5">get class you get the field</font><font color="#CCCCCC"> so the</font>

566
00:27:50,560 --> 00:27:55,149
current long time is a private field<font color="#E5E5E5"> so</font>

567
00:27:53,620 --> 00:27:58,120
we get the current<font color="#CCCCCC"> runtime of the</font>

568
00:27:55,150 --> 00:28:00,280
runtime<font color="#E5E5E5"> object then</font><font color="#CCCCCC"> we make that</font><font color="#E5E5E5"> public</font>

569
00:27:58,120 --> 00:28:03,580
<font color="#E5E5E5">so we</font><font color="#CCCCCC"> change it</font><font color="#E5E5E5"> from private to public</font>

570
00:28:00,280 --> 00:28:06,790
<font color="#E5E5E5">and then we've got access to the runtime</font>

571
00:28:03,580 --> 00:28:08,860
object and then<font color="#CCCCCC"> we can call field get</font>

572
00:28:06,790 --> 00:28:13,149
and we can get the runtime and then pop

573
00:28:08,860 --> 00:28:16,810
the calculator<font color="#CCCCCC"> so</font><font color="#E5E5E5"> I exploited Jake's</font>

574
00:28:13,150 --> 00:28:19,390
browser with this technique<font color="#CCCCCC"> team dev</font><font color="#E5E5E5"> of</font>

575
00:28:16,810 --> 00:28:22,720
the guys who make it<font color="#E5E5E5"> patch this book</font>

576
00:28:19,390 --> 00:28:25,090
with annotations<font color="#CCCCCC"> they did it in a way</font>

577
00:28:22,720 --> 00:28:29,620
<font color="#CCCCCC">that was puzzling but probably because</font>

578
00:28:25,090 --> 00:28:31,300
<font color="#CCCCCC">of a legacy card</font><font color="#E5E5E5"> they made it off by</font>

579
00:28:29,620 --> 00:28:35,709
<font color="#E5E5E5">default</font><font color="#CCCCCC"> so if you don't have any</font>

580
00:28:31,300 --> 00:28:37,870
annotations<font color="#E5E5E5"> then it would allow you to</font>

581
00:28:35,710 --> 00:28:41,080
call<font color="#E5E5E5"> any function on the job any</font>

582
00:28:37,870 --> 00:28:43,389
function<font color="#E5E5E5"> on the Java bridge so the idea</font>

583
00:28:41,080 --> 00:28:45,159
of the jeaious annotation is you mark

584
00:28:43,390 --> 00:28:49,660
<font color="#E5E5E5">which functions you want to</font><font color="#CCCCCC"> be</font>

585
00:28:45,160 --> 00:28:51,730
accessible to<font color="#E5E5E5"> JavaScript so if you don't</font>

586
00:28:49,660 --> 00:28:57,130
have<font color="#E5E5E5"> any at all then</font><font color="#CCCCCC"> it's renewable</font><font color="#E5E5E5"> by</font>

587
00:28:51,730 --> 00:28:59,440
default<font color="#CCCCCC"> but I use the inspector and he</font>

588
00:28:57,130 --> 00:29:02,800
inspected<font color="#CCCCCC"> the Java bridge and guess what</font>

589
00:28:59,440 --> 00:29:05,020
<font color="#CCCCCC">I exploited</font><font color="#E5E5E5"> it again</font><font color="#CCCCCC"> and the reason was</font>

590
00:29:02,800 --> 00:29:08,169
even though you've got annotations<font color="#E5E5E5"> so if</font>

591
00:29:05,020 --> 00:29:09,280
you put an annotation<font color="#CCCCCC"> on</font><font color="#E5E5E5"> a function</font><font color="#CCCCCC"> you</font>

592
00:29:08,170 --> 00:29:11,980
<font color="#E5E5E5">should only</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> able to call that</font>

593
00:29:09,280 --> 00:29:14,350
<font color="#CCCCCC">function but the references to other</font>

594
00:29:11,980 --> 00:29:16,000
objects weren't being checked as<font color="#CCCCCC"> well so</font>

595
00:29:14,350 --> 00:29:18,070
you<font color="#E5E5E5"> could get a field on another object</font>

596
00:29:16,000 --> 00:29:21,520
<font color="#E5E5E5">and then get used get class and you've</font>

597
00:29:18,070 --> 00:29:23,679
got remote code execution again so here

598
00:29:21,520 --> 00:29:27,400
we've got<font color="#CCCCCC"> a bridge we get a test object</font>

599
00:29:23,680 --> 00:29:29,170
<font color="#CCCCCC">we get the field</font><font color="#E5E5E5"> and then we can call</font>

600
00:29:27,400 --> 00:29:33,340
<font color="#E5E5E5">get class and we've got remote code</font>

601
00:29:29,170 --> 00:29:36,880
execution again and saw the bridge was

602
00:29:33,340 --> 00:29:38,740
broken again<font color="#E5E5E5"> so I like to give you a</font>

603
00:29:36,880 --> 00:29:41,950
quick demo<font color="#CCCCCC"> oh I'm going to</font><font color="#E5E5E5"> give you a</font>

604
00:29:38,740 --> 00:29:45,100
demo of brick in the bridge<font color="#E5E5E5"> and also the</font>

605
00:29:41,950 --> 00:29:48,250
Safari<font color="#E5E5E5"> exception issue which is quite</font>

606
00:29:45,100 --> 00:29:48,699
interesting<font color="#CCCCCC"> so the first demo I</font><font color="#E5E5E5"> want to</font>

607
00:29:48,250 --> 00:29:56,230
give<font color="#E5E5E5"> you</font>

608
00:29:48,700 --> 00:30:00,660
is the<font color="#E5E5E5"> Java bridge so here we've</font><font color="#CCCCCC"> got</font>

609
00:29:56,230 --> 00:30:04,450
some Java<font color="#E5E5E5"> code</font><font color="#CCCCCC"> that Lords the inspector</font>

610
00:30:00,660 --> 00:30:09,130
so it<font color="#E5E5E5"> loads the inspector and we've got</font>

611
00:30:04,450 --> 00:30:11,640
a bridge<font color="#E5E5E5"> the bridge has a completed</font>

612
00:30:09,130 --> 00:30:23,800
function and a<font color="#CCCCCC"> super-secret</font><font color="#E5E5E5"> function</font>

613
00:30:11,640 --> 00:30:30,730
<font color="#E5E5E5">okay so I'll run that prayer to the demo</font>

614
00:30:23,800 --> 00:30:33,040
gods<font color="#E5E5E5"> oh thank God for that right so</font><font color="#CCCCCC"> now</font>

615
00:30:30,730 --> 00:30:36,640
I can use<font color="#CCCCCC"> the</font><font color="#E5E5E5"> inspector and I don't have</font>

616
00:30:33,040 --> 00:30:40,090
any dev tools<font color="#E5E5E5"> so I can inspect the</font>

617
00:30:36,640 --> 00:30:42,400
window object and what the inspector

618
00:30:40,090 --> 00:30:44,260
does<font color="#CCCCCC"> straightaway is it</font><font color="#E5E5E5"> highlights the</font>

619
00:30:42,400 --> 00:30:48,100
interesting stuff<font color="#CCCCCC"> so immediately</font><font color="#E5E5E5"> it's</font>

620
00:30:44,260 --> 00:30:50,170
found the<font color="#E5E5E5"> bridge automatically</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> it's</font>

621
00:30:48,100 --> 00:30:53,110
tried to exploit the bridge<font color="#CCCCCC"> so it's</font>

622
00:30:50,170 --> 00:30:54,880
detected here<font color="#E5E5E5"> it thinks it's a Java</font>

623
00:30:53,110 --> 00:30:57,370
bridge and then it thinks it's an

624
00:30:54,880 --> 00:30:59,080
exploitable Java bridge<font color="#E5E5E5"> and to prove</font><font color="#CCCCCC"> its</font>

625
00:30:57,370 --> 00:31:01,510
exploitable<font color="#E5E5E5"> it generates a proof of</font>

626
00:30:59,080 --> 00:31:06,000
concept depending on what OS you are on

627
00:31:01,510 --> 00:31:12,400
<font color="#E5E5E5">and that should point pop the calculator</font>

628
00:31:06,000 --> 00:31:15,610
and you can inspect<font color="#E5E5E5"> it further so the</font>

629
00:31:12,400 --> 00:31:17,770
Java bridges have Java methods like get

630
00:31:15,610 --> 00:31:21,100
methods so you can inspect<font color="#E5E5E5"> the Java</font>

631
00:31:17,770 --> 00:31:22,750
bridge<font color="#E5E5E5"> and it will enumerate it for you</font>

632
00:31:21,100 --> 00:31:25,330
so you<font color="#E5E5E5"> can see it's got the completed</font>

633
00:31:22,750 --> 00:31:28,900
function<font color="#E5E5E5"> it's got the</font><font color="#CCCCCC"> super-secret</font>

634
00:31:25,330 --> 00:31:30,669
<font color="#E5E5E5">function somewhere</font><font color="#CCCCCC"> yeah so you can</font>

635
00:31:28,900 --> 00:31:32,380
enumerate the bridge find these

636
00:31:30,670 --> 00:31:35,770
interesting<font color="#E5E5E5"> functions and exploit them</font>

637
00:31:32,380 --> 00:31:39,850
further<font color="#E5E5E5"> so now I want to show you the</font>

638
00:31:35,770 --> 00:31:44,280
Safari bug<font color="#CCCCCC"> so</font><font color="#E5E5E5"> hopefully you can see</font><font color="#CCCCCC"> that</font>

639
00:31:39,850 --> 00:31:47,199
<font color="#CCCCCC">all</font><font color="#E5E5E5"> up there first of all I'm going to</font>

640
00:31:44,280 --> 00:31:51,610
<font color="#CCCCCC">lured an iframe</font><font color="#E5E5E5"> so if you can't see</font><font color="#CCCCCC"> it</font>

641
00:31:47,200 --> 00:31:55,930
<font color="#E5E5E5">loads an iframe 2x - domain comm with an</font>

642
00:31:51,610 --> 00:32:00,000
idea of X so that<font color="#CCCCCC"> I frames from</font><font color="#E5E5E5"> another</font>

643
00:31:55,930 --> 00:32:02,530
domain<font color="#CCCCCC"> so now if we</font><font color="#E5E5E5"> inspect the X object</font>

644
00:32:00,000 --> 00:32:05,590
you can see<font color="#CCCCCC"> it's found</font>

645
00:32:02,530 --> 00:32:08,200
the<font color="#E5E5E5"> crust</font><font color="#CCCCCC"> domain window is leaking the</font>

646
00:32:05,590 --> 00:32:12,010
origin from<font color="#CCCCCC"> the exception and it shows</font>

647
00:32:08,200 --> 00:32:14,500
you the the<font color="#CCCCCC"> domain</font><font color="#E5E5E5"> on the</font><font color="#CCCCCC"> right-hand</font>

648
00:32:12,010 --> 00:32:16,299
side<font color="#CCCCCC"> so in this case so far he's doing</font>

649
00:32:14,500 --> 00:32:19,530
<font color="#E5E5E5">something wrong</font><font color="#CCCCCC"> nor</font><font color="#E5E5E5"> the browser does</font>

650
00:32:16,299 --> 00:32:23,590
<font color="#E5E5E5">this nor the browser leaks the exception</font>

651
00:32:19,530 --> 00:32:28,120
the origin in<font color="#E5E5E5"> the exception to see what</font>

652
00:32:23,590 --> 00:32:30,970
the inspector saw<font color="#E5E5E5"> we can just convert</font>

653
00:32:28,120 --> 00:32:34,020
the window objects who are string<font color="#CCCCCC"> and</font>

654
00:32:30,970 --> 00:32:37,409
you can see the exception<font color="#E5E5E5"> for yourself</font>

655
00:32:34,020 --> 00:32:41,500
<font color="#CCCCCC">the</font><font color="#E5E5E5"> the origin is being leaked on Safari</font>

656
00:32:37,409 --> 00:32:43,360
<font color="#E5E5E5">so the origin being</font><font color="#CCCCCC"> leaked but not the</font>

657
00:32:41,500 --> 00:32:47,140
query string<font color="#E5E5E5"> or anything like that so</font>

658
00:32:43,360 --> 00:32:56,289
it's not<font color="#E5E5E5"> as super serious bug but a bug</font>

659
00:32:47,140 --> 00:32:59,799
nevertheless so it's got some advanced

660
00:32:56,289 --> 00:33:03,640
inspection features<font color="#E5E5E5"> so as I said you can</font>

661
00:32:59,799 --> 00:33:06,730
use<font color="#CCCCCC"> oh sorry</font><font color="#E5E5E5"> in this instance you can</font>

662
00:33:03,640 --> 00:33:09,220
execute JavaScript<font color="#E5E5E5"> on every property so</font>

663
00:33:06,730 --> 00:33:11,740
here<font color="#CCCCCC"> I'm inspecting</font><font color="#E5E5E5"> the window object</font>

664
00:33:09,220 --> 00:33:14,679
<font color="#CCCCCC">I'm giving it a red X of 1 to 3</font>

665
00:33:11,740 --> 00:33:17,169
<font color="#E5E5E5">characters the</font><font color="#CCCCCC"> JavaScript</font><font color="#E5E5E5"> so that's been</font>

666
00:33:14,679 --> 00:33:21,370
executed is alert with the property and

667
00:33:17,169 --> 00:33:25,179
it's filtering by functions<font color="#CCCCCC"> so inside</font>

668
00:33:21,370 --> 00:33:28,270
<font color="#E5E5E5">the</font><font color="#CCCCCC"> JS filter obj refers to the current</font>

669
00:33:25,179 --> 00:33:30,760
object<font color="#E5E5E5"> and prop which refers to the</font>

670
00:33:28,270 --> 00:33:32,350
current<font color="#E5E5E5"> property so for instance if you</font>

671
00:33:30,760 --> 00:33:33,970
wanted to<font color="#E5E5E5"> call a function</font><font color="#CCCCCC"> on every</font>

672
00:33:32,350 --> 00:33:37,260
<font color="#E5E5E5">property</font><font color="#CCCCCC"> of that object</font>

673
00:33:33,970 --> 00:33:37,260
oops sorry

674
00:33:40,270 --> 00:33:45,549
then you would use obj prop and then

675
00:33:43,390 --> 00:33:47,880
<font color="#E5E5E5">parentheses</font><font color="#CCCCCC"> to call every function on</font>

676
00:33:45,549 --> 00:33:47,879
that<font color="#E5E5E5"> object</font>

677
00:33:48,429 --> 00:33:53,100
so<font color="#CCCCCC"> yeah query string parameters are a</font>

678
00:33:50,980 --> 00:33:56,650
support for every inspection feature<font color="#E5E5E5"> and</font>

679
00:33:53,100 --> 00:33:58,719
<font color="#E5E5E5">this is super important</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is a blind</font>

680
00:33:56,650 --> 00:34:00,909
parameter<font color="#E5E5E5"> now this is pretty cool</font>

681
00:33:58,720 --> 00:34:03,280
<font color="#E5E5E5">because it will save the inspection</font>

682
00:34:00,909 --> 00:34:05,169
results<font color="#E5E5E5"> so you might encounter a website</font>

683
00:34:03,280 --> 00:34:06,940
that<font color="#E5E5E5"> allows</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> to render</font><font color="#CCCCCC"> a page but</font>

684
00:34:05,169 --> 00:34:09,369
doesn't<font color="#E5E5E5"> allow you to interact with it</font><font color="#CCCCCC"> if</font>

685
00:34:06,940 --> 00:34:12,280
you pass the blind parameter to the tool

686
00:34:09,369 --> 00:34:14,169
then it will enumerate the object and

687
00:34:12,280 --> 00:34:15,410
then save<font color="#E5E5E5"> the results so you can view</font>

688
00:34:14,168 --> 00:34:17,420
later

689
00:34:15,409 --> 00:34:22,370
and you can view<font color="#E5E5E5"> the</font><font color="#CCCCCC"> results from</font>

690
00:34:17,420 --> 00:34:25,240
<font color="#E5E5E5">displayed up PHP on the tool</font><font color="#CCCCCC"> so use</font>

691
00:34:22,370 --> 00:34:28,040
cases for<font color="#E5E5E5"> the tool is you can find</font>

692
00:34:25,239 --> 00:34:30,109
browser issues<font color="#E5E5E5"> and I do a lot of fuzzing</font>

693
00:34:28,040 --> 00:34:33,139
in<font color="#E5E5E5"> JavaScript and I use the multi-line</font>

694
00:34:30,110 --> 00:34:36,440
mod in the tool to<font color="#CCCCCC"> force</font><font color="#E5E5E5"> JavaScript and</font>

695
00:34:33,139 --> 00:34:39,080
<font color="#CCCCCC">I've found a</font><font color="#E5E5E5"> lot</font><font color="#CCCCCC"> of bugs doing that I</font>

696
00:34:36,440 --> 00:34:41,389
<font color="#E5E5E5">think some boxes are going to be quite</font>

697
00:34:39,080 --> 00:34:43,009
important in future<font color="#CCCCCC"> so when you're in a</font>

698
00:34:41,389 --> 00:34:45,440
sandbox the environment<font color="#CCCCCC"> you can use a</font>

699
00:34:43,010 --> 00:34:47,660
tool<font color="#CCCCCC"> to inspect</font><font color="#E5E5E5"> that environment to see</font>

700
00:34:45,440 --> 00:34:50,420
if you can break<font color="#E5E5E5"> out</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the sandbox so</font>

701
00:34:47,659 --> 00:34:52,279
it's useful<font color="#CCCCCC"> for that you need</font><font color="#E5E5E5"> to use a</font>

702
00:34:50,420 --> 00:34:55,760
<font color="#E5E5E5">black mod when you can't interact with</font>

703
00:34:52,280 --> 00:34:59,990
<font color="#CCCCCC">the browser</font><font color="#E5E5E5"> because it's a lot easier</font><font color="#CCCCCC"> to</font>

704
00:34:55,760 --> 00:35:02,750
<font color="#E5E5E5">enumerate the objects</font><font color="#CCCCCC"> saw a</font><font color="#E5E5E5"> couple of</font>

705
00:34:59,990 --> 00:35:05,330
<font color="#CCCCCC">shortcuts so up-down cycles through</font>

706
00:35:02,750 --> 00:35:08,150
history and<font color="#CCCCCC"> Alt + alt works in</font>

707
00:35:05,330 --> 00:35:12,860
<font color="#CCCCCC">multi-line mod</font><font color="#E5E5E5"> multi-line mod is</font>

708
00:35:08,150 --> 00:35:15,290
initiated<font color="#CCCCCC"> when blocks</font><font color="#E5E5E5"> are entered switch</font>

709
00:35:12,860 --> 00:35:18,410
it such as if blocks or while loops for

710
00:35:15,290 --> 00:35:20,570
example<font color="#E5E5E5"> if you hit return it will</font>

711
00:35:18,410 --> 00:35:23,259
evaluate<font color="#E5E5E5"> and inspect and if you hit</font>

712
00:35:20,570 --> 00:35:26,570
<font color="#CCCCCC">control</font><font color="#E5E5E5"> and return it will just execute</font>

713
00:35:23,260 --> 00:35:28,940
and<font color="#CCCCCC"> shift and return will evaluate and</font>

714
00:35:26,570 --> 00:35:31,490
return the output<font color="#CCCCCC"> switches one plus one</font>

715
00:35:28,940 --> 00:35:33,170
<font color="#E5E5E5">and they'll tell you the</font><font color="#CCCCCC"> value if you</font>

716
00:35:31,490 --> 00:35:34,970
hit ctrl backspace that will clear the

717
00:35:33,170 --> 00:35:38,840
results and shift<font color="#CCCCCC"> control shift</font>

718
00:35:34,970 --> 00:35:41,629
backspace will clear<font color="#E5E5E5"> your history</font><font color="#CCCCCC"> sorts</font>

719
00:35:38,840 --> 00:35:46,460
of conclude<font color="#CCCCCC"> don't stop testing because</font>

720
00:35:41,630 --> 00:35:47,990
you don't have any dev tools<font color="#CCCCCC"> and use the</font>

721
00:35:46,460 --> 00:35:52,010
<font color="#E5E5E5">inspector to gather information about</font>

722
00:35:47,990 --> 00:35:53,390
<font color="#E5E5E5">your environment and you can exploit</font>

723
00:35:52,010 --> 00:35:56,600
<font color="#CCCCCC">that environment using interesting</font>

724
00:35:53,390 --> 00:35:59,810
functions<font color="#E5E5E5"> so like I used get class in</font>

725
00:35:56,600 --> 00:36:03,890
the<font color="#E5E5E5"> Java bridge you can get remote code</font>

726
00:35:59,810 --> 00:36:06,740
execution if you look hard<font color="#E5E5E5"> enough and so</font>

727
00:36:03,890 --> 00:36:08,720
this is life<font color="#E5E5E5"> before the inspector it was</font>

728
00:36:06,740 --> 00:36:09,950
a lot like banging<font color="#E5E5E5"> stones against your</font>

729
00:36:08,720 --> 00:36:12,770
computer trying<font color="#E5E5E5"> to get it to do what</font>

730
00:36:09,950 --> 00:36:14,529
<font color="#CCCCCC">were</font><font color="#E5E5E5"> you on it thank you</font>

731
00:36:12,770 --> 00:36:22,360
any<font color="#E5E5E5"> questions</font>

732
00:36:14,530 --> 00:36:22,360
[Applause]

733
00:36:26,450 --> 00:36:35,250
my question is this tool could<font color="#E5E5E5"> be useful</font>

734
00:36:30,420 --> 00:36:38,160
<font color="#E5E5E5">for testing server side request forgery</font>

735
00:36:35,250 --> 00:36:40,260
<font color="#CCCCCC">alright</font><font color="#E5E5E5"> bugs with the blind mode yes</font><font color="#CCCCCC"> I</font>

736
00:36:38,160 --> 00:36:41,819
mean it makes sense<font color="#CCCCCC"> to you something</font>

737
00:36:40,260 --> 00:36:44,430
<font color="#E5E5E5">like</font><font color="#CCCCCC"> this for some like</font><font color="#E5E5E5"> this I mean not</font>

738
00:36:41,820 --> 00:36:45,660
not this like<font color="#CCCCCC"> brows or bugs but I mean</font>

739
00:36:44,430 --> 00:36:48,750
if you have some kind<font color="#CCCCCC"> of rendering</font>

740
00:36:45,660 --> 00:36:51,149
engine<font color="#CCCCCC"> which you don't know how if he's</font>

741
00:36:48,750 --> 00:37:00,990
<font color="#E5E5E5">blind</font><font color="#CCCCCC"> Needham yeah</font><font color="#E5E5E5"> maybe</font><font color="#CCCCCC"> yeah you could</font>

742
00:36:51,150 --> 00:37:02,100
<font color="#CCCCCC">use it for</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> yeah well thank you for</font>

743
00:37:00,990 --> 00:37:05,759
<font color="#E5E5E5">the presentation</font>

744
00:37:02,100 --> 00:37:11,150
<font color="#CCCCCC">Thanks have you thought or tried</font>

745
00:37:05,760 --> 00:37:11,150
something<font color="#E5E5E5"> with JavaScript inside the PDF</font>

746
00:37:11,180 --> 00:37:15,569
join the<font color="#E5E5E5"> service</font><font color="#CCCCCC"> keep that you can</font>

747
00:37:13,260 --> 00:37:18,720
execute in<font color="#CCCCCC"> a pittance after some testing</font>

748
00:37:15,570 --> 00:37:20,490
on PDFs<font color="#E5E5E5"> and I've enumerated properties</font>

749
00:37:18,720 --> 00:37:23,730
in PDFs and<font color="#CCCCCC"> there seems to</font><font color="#E5E5E5"> be a lot</font><font color="#CCCCCC"> of</font>

750
00:37:20,490 --> 00:37:25,470
like<font color="#E5E5E5"> crashes</font><font color="#CCCCCC"> and some bugs in Acrobat</font><font color="#E5E5E5"> so</font>

751
00:37:23,730 --> 00:37:28,020
I've used the same<font color="#E5E5E5"> techniques I've</font>

752
00:37:25,470 --> 00:37:31,459
showed<font color="#E5E5E5"> today to enumerate objects in</font>

753
00:37:28,020 --> 00:37:34,020
PDFs<font color="#E5E5E5"> and it does look</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> there's some</font>

754
00:37:31,460 --> 00:37:37,340
<font color="#E5E5E5">decent books to be found in there still</font>

755
00:37:34,020 --> 00:37:37,340
even now yeah

756
00:37:43,200 --> 00:37:51,720
out of curiosity<font color="#E5E5E5"> what</font><font color="#CCCCCC"> is the special use</font>

757
00:37:45,570 --> 00:37:54,270
case of is phantom<font color="#E5E5E5"> Jas</font><font color="#CCCCCC"> well because for</font>

758
00:37:51,720 --> 00:37:57,270
<font color="#E5E5E5">example you</font><font color="#CCCCCC"> can cause</font><font color="#E5E5E5"> denial of service</font>

759
00:37:54,270 --> 00:37:59,880
so if<font color="#E5E5E5"> it's phantom</font><font color="#CCCCCC"> JSC is being used you</font>

760
00:37:57,270 --> 00:38:02,579
<font color="#CCCCCC">can</font><font color="#E5E5E5"> open a</font><font color="#CCCCCC"> new window using</font><font color="#E5E5E5"> like a</font>

761
00:37:59,880 --> 00:38:05,010
really ancient function like<font color="#CCCCCC"> sha model</font>

762
00:38:02,579 --> 00:38:07,890
<font color="#CCCCCC">dialog I</font><font color="#E5E5E5"> think and that can cause denial</font>

763
00:38:05,010 --> 00:38:11,010
<font color="#CCCCCC">service on the server</font><font color="#E5E5E5"> because basically</font>

764
00:38:07,890 --> 00:38:13,379
the window pops up<font color="#E5E5E5"> and it doesn't close</font>

765
00:38:11,010 --> 00:38:16,140
so that<font color="#CCCCCC"> can it can lock the server</font>

766
00:38:13,380 --> 00:38:17,400
basically<font color="#E5E5E5"> so yeah that's just some of</font>

767
00:38:16,140 --> 00:38:19,170
<font color="#CCCCCC">the stuff that</font><font color="#E5E5E5"> I found but there could</font>

768
00:38:17,400 --> 00:38:22,170
be other other issues<font color="#CCCCCC"> as well so it's</font>

769
00:38:19,170 --> 00:38:24,329
important<font color="#CCCCCC"> to know and</font><font color="#E5E5E5"> also it's</font><font color="#CCCCCC"> a it's</font>

770
00:38:22,170 --> 00:38:28,040
an outdated<font color="#E5E5E5"> rendering engine</font><font color="#CCCCCC"> too so</font>

771
00:38:24,329 --> 00:38:28,040
that's super important to<font color="#CCCCCC"> know as well</font>

772
00:38:28,670 --> 00:38:32,180
any more questions

773
00:38:37,380 --> 00:38:46,179
I guess not<font color="#E5E5E5"> so thank you</font><font color="#CCCCCC"> the key card</font>

774
00:38:41,810 --> 00:38:46,179
[Applause]

