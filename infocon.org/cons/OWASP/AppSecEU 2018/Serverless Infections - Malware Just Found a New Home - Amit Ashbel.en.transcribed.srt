1
00:00:10,389 --> 00:00:17,198
so my name<font color="#CCCCCC"> is Amit Ashville</font><font color="#E5E5E5"> I work for</font>

2
00:00:14,469 --> 00:00:19,529
<font color="#CCCCCC">checkmarks shimmie</font><font color="#E5E5E5"> Ashkenazi he also</font>

3
00:00:17,199 --> 00:00:21,490
works for check marks his research team

4
00:00:19,529 --> 00:00:25,720
<font color="#CCCCCC">we're gonna talk a little bit about</font>

5
00:00:21,490 --> 00:00:28,479
serverless injections today<font color="#E5E5E5"> serverless</font>

6
00:00:25,720 --> 00:00:31,119
is a big thing now<font color="#E5E5E5"> it's growing</font>

7
00:00:28,480 --> 00:00:33,520
significantly<font color="#E5E5E5"> and we thought it's</font>

8
00:00:31,119 --> 00:00:35,950
important to look at the<font color="#CCCCCC"> security aspect</font>

9
00:00:33,520 --> 00:00:40,960
of<font color="#E5E5E5"> that how</font><font color="#CCCCCC"> many of you by the</font><font color="#E5E5E5"> way</font><font color="#CCCCCC"> are</font>

10
00:00:35,950 --> 00:00:46,060
using already<font color="#E5E5E5"> server lists</font><font color="#CCCCCC"> ok nice</font><font color="#E5E5E5"> like</font>

11
00:00:40,960 --> 00:00:48,460
<font color="#CCCCCC">10% 5% maybe so we'll quickly</font><font color="#E5E5E5"> talk about</font>

12
00:00:46,060 --> 00:00:49,960
<font color="#E5E5E5">an introduction</font><font color="#CCCCCC"> to server</font><font color="#E5E5E5"> less which</font>

13
00:00:48,460 --> 00:00:52,540
<font color="#CCCCCC">I'll run</font><font color="#E5E5E5"> through very quickly because</font>

14
00:00:49,960 --> 00:00:53,560
most<font color="#E5E5E5"> of you probably are</font><font color="#CCCCCC"> familiar with</font>

15
00:00:52,540 --> 00:00:55,360
it

16
00:00:53,560 --> 00:00:58,060
we'll look at a few server security

17
00:00:55,360 --> 00:01:00,579
assumptions<font color="#E5E5E5"> and then Jimmy will have the</font>

18
00:00:58,060 --> 00:01:02,530
hard work of<font color="#CCCCCC"> doing the demos</font><font color="#E5E5E5"> and</font>

19
00:01:00,579 --> 00:01:05,860
explaining<font color="#E5E5E5"> the technical details of what</font>

20
00:01:02,530 --> 00:01:08,049
we did in<font color="#CCCCCC"> terms of</font><font color="#E5E5E5"> understanding where</font>

21
00:01:05,860 --> 00:01:13,500
the security<font color="#CCCCCC"> is</font><font color="#E5E5E5"> limited what needs to be</font>

22
00:01:08,049 --> 00:01:16,720
<font color="#E5E5E5">improved changed or what's good also</font><font color="#CCCCCC"> and</font>

23
00:01:13,500 --> 00:01:20,229
<font color="#E5E5E5">then we'll have an example of what you</font>

24
00:01:16,720 --> 00:01:22,570
<font color="#CCCCCC">can do in order to test your security or</font>

25
00:01:20,229 --> 00:01:27,070
your code security<font color="#E5E5E5"> even in a service</font>

26
00:01:22,570 --> 00:01:30,399
<font color="#CCCCCC">environment so starting off</font><font color="#E5E5E5"> in the past</font>

27
00:01:27,070 --> 00:01:34,539
we had data<font color="#E5E5E5"> centers</font><font color="#CCCCCC"> Hardware was the</font>

28
00:01:30,400 --> 00:01:36,820
unit<font color="#E5E5E5"> the abstract material was actually</font>

29
00:01:34,540 --> 00:01:39,640
<font color="#E5E5E5">the physical hosting environment so you</font>

30
00:01:36,820 --> 00:01:43,059
had a<font color="#E5E5E5"> computer a server in a hosting</font>

31
00:01:39,640 --> 00:01:45,460
environment and that was your server

32
00:01:43,060 --> 00:01:47,890
<font color="#E5E5E5">later on we moved to infrastructure as a</font>

33
00:01:45,460 --> 00:01:50,169
service where the operating system

34
00:01:47,890 --> 00:01:54,040
became the unit of scale<font color="#E5E5E5"> and the</font>

35
00:01:50,170 --> 00:01:58,299
hardware was no<font color="#E5E5E5"> longer relevant for the</font>

36
00:01:54,040 --> 00:02:00,369
<font color="#E5E5E5">let's call the users for us</font><font color="#CCCCCC"> and then we</font>

37
00:01:58,299 --> 00:02:03,340
had platform as a service where the

38
00:02:00,369 --> 00:02:05,530
application was<font color="#CCCCCC"> the unit of scale and</font>

39
00:02:03,340 --> 00:02:07,000
the OS was no longer<font color="#E5E5E5"> relevant you just</font>

40
00:02:05,530 --> 00:02:09,579
<font color="#E5E5E5">launch your application</font><font color="#CCCCCC"> it runs there</font>

41
00:02:07,000 --> 00:02:11,409
you don't<font color="#CCCCCC"> care</font><font color="#E5E5E5"> where</font><font color="#CCCCCC"> it really</font><font color="#E5E5E5"> or what</font>

42
00:02:09,579 --> 00:02:13,150
OS is really running<font color="#E5E5E5"> it you don't have</font>

43
00:02:11,409 --> 00:02:16,269
<font color="#CCCCCC">to set up an OS or anything like</font><font color="#E5E5E5"> that</font>

44
00:02:13,150 --> 00:02:19,989
and today we're<font color="#CCCCCC"> it's serverless we're</font>

45
00:02:16,269 --> 00:02:21,880
function is the unit<font color="#E5E5E5"> of scale and the</font>

46
00:02:19,989 --> 00:02:23,560
language<font color="#CCCCCC"> rent runtime is the abstract</font>

47
00:02:21,880 --> 00:02:25,299
<font color="#CCCCCC">there are a few different</font><font color="#E5E5E5"> types</font>

48
00:02:23,560 --> 00:02:26,560
of service environments<font color="#E5E5E5"> today there are</font>

49
00:02:25,300 --> 00:02:27,480
more<font color="#CCCCCC"> than these we'll talk about them</font>

50
00:02:26,560 --> 00:02:29,830
<font color="#CCCCCC">all so later</font>

51
00:02:27,480 --> 00:02:32,950
AWS is probably the main one at the

52
00:02:29,830 --> 00:02:35,130
moment<font color="#CCCCCC"> we then have ashore IBM cloud</font>

53
00:02:32,950 --> 00:02:38,260
functions<font color="#E5E5E5"> and Google cloud platform</font>

54
00:02:35,130 --> 00:02:44,650
<font color="#CCCCCC">we'll be talking</font><font color="#E5E5E5"> specifically about AWS</font>

55
00:02:38,260 --> 00:02:47,230
today so again<font color="#E5E5E5"> looking back data centers</font>

56
00:02:44,650 --> 00:02:49,510
we used to deploy<font color="#E5E5E5"> in months</font><font color="#CCCCCC"> so you had</font>

57
00:02:47,230 --> 00:02:52,630
to set up<font color="#E5E5E5"> your server implement it make</font>

58
00:02:49,510 --> 00:02:54,160
all the security checks<font color="#E5E5E5"> and so on so</font>

59
00:02:52,630 --> 00:02:57,519
forth<font color="#CCCCCC"> and then they used to live there</font>

60
00:02:54,160 --> 00:03:00,579
<font color="#CCCCCC">for years later on we moved to deploying</font>

61
00:02:57,519 --> 00:03:02,709
in minutes on virtualized clouds and the

62
00:03:00,580 --> 00:03:06,130
systems used to live<font color="#E5E5E5"> for weeks</font><font color="#CCCCCC"> they</font>

63
00:03:02,709 --> 00:03:09,280
still do and when<font color="#CCCCCC"> contort containers</font>

64
00:03:06,130 --> 00:03:11,890
were<font color="#E5E5E5"> introduced we deploy and second and</font>

65
00:03:09,280 --> 00:03:14,110
<font color="#CCCCCC">we'll live for hours so you drop the</font>

66
00:03:11,890 --> 00:03:17,048
container you start a<font color="#E5E5E5"> new container and</font>

67
00:03:14,110 --> 00:03:19,599
with AWS lambda you actually<font color="#CCCCCC"> deploy in</font>

68
00:03:17,049 --> 00:03:21,880
<font color="#CCCCCC">milliseconds</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> you live for seconds</font>

69
00:03:19,599 --> 00:03:23,530
<font color="#CCCCCC">actually 60 seconds</font><font color="#E5E5E5"> after these 60</font>

70
00:03:21,880 --> 00:03:28,350
seconds the functions that<font color="#E5E5E5"> you've</font>

71
00:03:23,530 --> 00:03:31,239
deployed<font color="#E5E5E5"> just disappear off the server</font>

72
00:03:28,350 --> 00:03:34,810
so again the classic<font color="#CCCCCC"> approach you had</font>

73
00:03:31,239 --> 00:03:39,430
the back end which was stateful very

74
00:03:34,810 --> 00:03:41,890
accessible<font color="#CCCCCC"> for hackers where today you</font>

75
00:03:39,430 --> 00:03:43,959
actually<font color="#E5E5E5"> don't really have a</font><font color="#CCCCCC"> back-end</font>

76
00:03:41,890 --> 00:03:46,929
<font color="#E5E5E5">it's not stateful at least you do have a</font>

77
00:03:43,959 --> 00:03:48,519
<font color="#E5E5E5">back-end</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> it's not stateful</font><font color="#CCCCCC"> and it</font>

78
00:03:46,930 --> 00:03:50,950
moves all<font color="#CCCCCC"> over the place</font><font color="#E5E5E5"> so one</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> your</font>

79
00:03:48,519 --> 00:03:52,840
functions could<font color="#E5E5E5"> be running on thousands</font>

80
00:03:50,950 --> 00:03:56,700
<font color="#E5E5E5">of servers</font><font color="#CCCCCC"> it's multiple time and</font>

81
00:03:52,840 --> 00:04:00,280
disappearing or running<font color="#E5E5E5"> on a bunch of</font>

82
00:03:56,700 --> 00:04:07,720
<font color="#E5E5E5">different servers and replacing every</font>

83
00:04:00,280 --> 00:04:10,540
<font color="#E5E5E5">time that's the process you develop you</font>

84
00:04:07,720 --> 00:04:13,180
push you trigger and you clean so

85
00:04:10,540 --> 00:04:14,769
nothing is left over<font color="#E5E5E5"> that's the</font>

86
00:04:13,180 --> 00:04:16,810
assumption that nothing<font color="#E5E5E5"> is</font><font color="#CCCCCC"> left over</font>

87
00:04:14,769 --> 00:04:19,660
<font color="#E5E5E5">after you finished deploying your</font>

88
00:04:16,810 --> 00:04:23,850
functions or triggering<font color="#E5E5E5"> your functions</font>

89
00:04:19,660 --> 00:04:26,830
actually<font color="#E5E5E5"> the advantages of server less</font>

90
00:04:23,850 --> 00:04:30,820
infrastructure<font color="#CCCCCC"> are one</font><font color="#E5E5E5"> that they are</font>

91
00:04:26,830 --> 00:04:34,740
<font color="#CCCCCC">scalable you can run as many functions</font>

92
00:04:30,820 --> 00:04:37,240
as you want<font color="#E5E5E5"> on as much CPU that you want</font>

93
00:04:34,740 --> 00:04:40,630
there's no operations<font color="#E5E5E5"> behind the</font>

94
00:04:37,240 --> 00:04:41,830
it's very easy<font color="#E5E5E5"> to</font><font color="#CCCCCC"> implement and the cost</font>

95
00:04:40,630 --> 00:04:43,840
is lower because<font color="#E5E5E5"> you're only running</font>

96
00:04:41,830 --> 00:04:47,198
<font color="#E5E5E5">what you need</font><font color="#CCCCCC"> really you're not</font><font color="#E5E5E5"> buying a</font>

97
00:04:43,840 --> 00:04:50,380
server you're not buying a cloud server

98
00:04:47,199 --> 00:04:53,650
you're actually running<font color="#CCCCCC"> exactly what you</font>

99
00:04:50,380 --> 00:04:56,020
need or leveraging the CPU and the

100
00:04:53,650 --> 00:04:58,270
resources<font color="#CCCCCC"> that you need exactly</font><font color="#E5E5E5"> the</font>

101
00:04:56,020 --> 00:04:59,979
<font color="#E5E5E5">disadvantages first of all it's a new</font>

102
00:04:58,270 --> 00:05:04,330
paradigm<font color="#CCCCCC"> like every new paradigm that</font>

103
00:04:59,979 --> 00:05:05,919
<font color="#E5E5E5">has to be learned</font><font color="#CCCCCC"> understood better</font><font color="#E5E5E5"> it</font>

104
00:05:04,330 --> 00:05:09,310
might<font color="#E5E5E5"> be a bit slower in some cases</font>

105
00:05:05,919 --> 00:05:11,080
<font color="#E5E5E5">because you have to trigger or or start</font>

106
00:05:09,310 --> 00:05:13,780
the<font color="#CCCCCC"> function every time that might take</font>

107
00:05:11,080 --> 00:05:15,370
<font color="#E5E5E5">a few milliseconds</font><font color="#CCCCCC"> monitoring is</font>

108
00:05:13,780 --> 00:05:17,948
difficult<font color="#E5E5E5"> again because you're not</font>

109
00:05:15,370 --> 00:05:21,759
really<font color="#CCCCCC"> sure where your functions are</font>

110
00:05:17,949 --> 00:05:24,550
<font color="#E5E5E5">gonna run at any given time and it's not</font>

111
00:05:21,759 --> 00:05:25,960
platform dependent<font color="#CCCCCC"> so you have as we</font>

112
00:05:24,550 --> 00:05:27,580
said<font color="#CCCCCC"> earlier you have the different</font>

113
00:05:25,960 --> 00:05:32,080
<font color="#E5E5E5">vendors who provide the different</font>

114
00:05:27,580 --> 00:05:34,719
<font color="#CCCCCC">platforms so a</font><font color="#E5E5E5"> little bit about the</font>

115
00:05:32,080 --> 00:05:37,359
different<font color="#CCCCCC"> platforms we mentioned the</font>

116
00:05:34,720 --> 00:05:39,400
commercial ones<font color="#E5E5E5"> there are also some open</font>

117
00:05:37,360 --> 00:05:43,770
source<font color="#E5E5E5"> solutions</font><font color="#CCCCCC"> quite a bunch of them</font>

118
00:05:39,400 --> 00:05:43,770
actually<font color="#E5E5E5"> there are names of some of</font><font color="#CCCCCC"> them</font>

119
00:05:45,479 --> 00:05:53,710
<font color="#E5E5E5">and this is an overview</font><font color="#CCCCCC"> of the top</font><font color="#E5E5E5"> three</font>

120
00:05:49,889 --> 00:05:55,930
AWS<font color="#CCCCCC"> lamda it's probably the most common</font>

121
00:05:53,710 --> 00:05:58,930
<font color="#CCCCCC">and matured as I mentioned earlier it's</font>

122
00:05:55,930 --> 00:06:01,990
<font color="#CCCCCC">been around since 2014</font>

123
00:05:58,930 --> 00:06:05,080
it has a wide language support<font color="#E5E5E5"> or wider</font>

124
00:06:01,990 --> 00:06:08,620
<font color="#E5E5E5">language coverage and will focus our</font>

125
00:06:05,080 --> 00:06:10,180
demo on that<font color="#E5E5E5"> specific platform and then</font>

126
00:06:08,620 --> 00:06:12,099
you have the<font color="#E5E5E5"> coop the</font><font color="#CCCCCC"> Google cloud</font>

127
00:06:10,180 --> 00:06:14,800
function which was introduced<font color="#E5E5E5"> about two</font>

128
00:06:12,099 --> 00:06:18,430
years<font color="#CCCCCC"> ago</font><font color="#E5E5E5"> in alpha it's still</font><font color="#CCCCCC"> considered</font>

129
00:06:14,800 --> 00:06:21,940
in beta<font color="#CCCCCC"> and it supports only</font><font color="#E5E5E5"> JavaScript</font>

130
00:06:18,430 --> 00:06:25,289
<font color="#CCCCCC">nodejs runtime at this stage microsoft</font>

131
00:06:21,940 --> 00:06:27,729
<font color="#CCCCCC">azure</font><font color="#E5E5E5"> also introduced two years ago</font>

132
00:06:25,289 --> 00:06:30,159
<font color="#CCCCCC">supports</font><font color="#E5E5E5"> a bunch of languages in</font>

133
00:06:27,729 --> 00:06:32,860
experimental stage

134
00:06:30,159 --> 00:06:34,599
very well integrated<font color="#E5E5E5"> obviously with</font>

135
00:06:32,860 --> 00:06:40,780
visual<font color="#E5E5E5"> studios and Microsoft</font>

136
00:06:34,599 --> 00:06:44,500
environments a bit more about Amazon as

137
00:06:40,780 --> 00:06:50,330
we said introduced 2014 supports nodejs

138
00:06:44,500 --> 00:06:53,270
Python Java<font color="#CCCCCC"> go net core Linux</font><font color="#E5E5E5"> containers</font>

139
00:06:50,330 --> 00:06:56,710
can be triggered using all of<font color="#CCCCCC"> Amazon's</font>

140
00:06:53,270 --> 00:07:00,830
different services so whether it's s3 or

141
00:06:56,710 --> 00:07:04,068
the any of<font color="#E5E5E5"> the the services that we use</font>

142
00:07:00,830 --> 00:07:07,630
<font color="#E5E5E5">on Amazon's AWS obviously you also have</font>

143
00:07:04,069 --> 00:07:07,630
an<font color="#CCCCCC"> api gateway</font><font color="#E5E5E5"> that you can leverage</font>

144
00:07:10,750 --> 00:07:15,229
well this slide<font color="#E5E5E5"> talks about the</font>

145
00:07:13,160 --> 00:07:17,000
<font color="#E5E5E5">different use cases for server less</font>

146
00:07:15,229 --> 00:07:19,219
environments<font color="#E5E5E5"> but</font><font color="#CCCCCC"> I think that the most</font>

147
00:07:17,000 --> 00:07:22,220
relevant<font color="#E5E5E5"> ones would</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> the file and</font>

148
00:07:19,220 --> 00:07:24,620
image processing<font color="#E5E5E5"> and any heavy CPU</font>

149
00:07:22,220 --> 00:07:28,370
utilization so imagine you want<font color="#E5E5E5"> to do</font>

150
00:07:24,620 --> 00:07:29,840
image<font color="#E5E5E5"> processing today you need a lot</font><font color="#CCCCCC"> of</font>

151
00:07:28,370 --> 00:07:31,340
<font color="#CCCCCC">CPU power</font><font color="#E5E5E5"> if</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> want to do image</font>

152
00:07:29,840 --> 00:07:33,530
<font color="#E5E5E5">processing with server less you just</font>

153
00:07:31,340 --> 00:07:35,900
need a lot<font color="#E5E5E5"> of servers running the same</font>

154
00:07:33,530 --> 00:07:38,659
functions or<font color="#CCCCCC"> the different functions</font><font color="#E5E5E5"> so</font>

155
00:07:35,900 --> 00:07:41,289
it's<font color="#E5E5E5"> very useful</font><font color="#CCCCCC"> when we're talking</font>

156
00:07:38,659 --> 00:07:45,650
<font color="#E5E5E5">about high CPU</font><font color="#CCCCCC"> or CPU intensive</font>

157
00:07:41,289 --> 00:07:52,849
<font color="#E5E5E5">functionality which includes a lot of</font>

158
00:07:45,650 --> 00:07:55,969
these specific cases some assumptions

159
00:07:52,849 --> 00:08:01,659
based on<font color="#E5E5E5"> a research done by rich Jones</font>

160
00:07:55,969 --> 00:08:03,680
<font color="#CCCCCC">awhile</font><font color="#E5E5E5"> ago</font><font color="#CCCCCC"> so the fact that the</font>

161
00:08:01,659 --> 00:08:05,870
functions are running in their own

162
00:08:03,680 --> 00:08:08,780
environment reduces<font color="#CCCCCC"> the</font><font color="#E5E5E5"> potential damage</font>

163
00:08:05,870 --> 00:08:12,620
and the fact<font color="#CCCCCC"> that</font><font color="#E5E5E5"> nothing is stored so</font>

164
00:08:08,780 --> 00:08:16,039
the function is removed deleted<font color="#E5E5E5"> disposed</font>

165
00:08:12,620 --> 00:08:17,419
<font color="#E5E5E5">after run also prevents stored</font>

166
00:08:16,039 --> 00:08:20,030
injections because<font color="#E5E5E5"> if you inject</font>

167
00:08:17,419 --> 00:08:22,669
something<font color="#E5E5E5"> it's deleted later</font><font color="#CCCCCC"> the</font>

168
00:08:20,030 --> 00:08:26,239
function is new and clean should be much

169
00:08:22,669 --> 00:08:28,669
more secure with<font color="#E5E5E5"> that I will pass</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> on</font>

170
00:08:26,240 --> 00:08:31,219
to shimmy<font color="#E5E5E5"> will show you why</font><font color="#CCCCCC"> these</font>

171
00:08:28,669 --> 00:08:35,750
assumptions are<font color="#E5E5E5"> not necessarily accurate</font>

172
00:08:31,219 --> 00:08:38,390
thanks to<font color="#E5E5E5"> meat so as we mentioned</font><font color="#CCCCCC"> the</font>

173
00:08:35,750 --> 00:08:41,270
<font color="#E5E5E5">the common assumption</font><font color="#CCCCCC"> is that</font><font color="#E5E5E5"> the server</font>

174
00:08:38,390 --> 00:08:43,130
<font color="#E5E5E5">is more secure than others</font><font color="#CCCCCC"> drones and</font>

175
00:08:41,270 --> 00:08:45,649
<font color="#E5E5E5">other security</font><font color="#CCCCCC"> visual search including</font>

176
00:08:43,130 --> 00:08:47,750
<font color="#CCCCCC">checkboxes</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> stream</font><font color="#E5E5E5"> I want to eliminate</font>

177
00:08:45,649 --> 00:08:49,940
<font color="#E5E5E5">this assumption so in the research</font>

178
00:08:47,750 --> 00:08:53,570
stream of check<font color="#CCCCCC"> marks we wrote a demo</font>

179
00:08:49,940 --> 00:08:56,660
<font color="#E5E5E5">app that's as a simple UI and in the its</font>

180
00:08:53,570 --> 00:09:00,829
<font color="#CCCCCC">back-end it's run free service function</font>

181
00:08:56,660 --> 00:09:01,550
in the iaws<font color="#E5E5E5"> lambda there it is example</font>

182
00:09:00,829 --> 00:09:03,920
<font color="#E5E5E5">of</font><font color="#CCCCCC"> two Fox</font>

183
00:09:01,550 --> 00:09:06,620
the main factions is invoked once this

184
00:09:03,920 --> 00:09:09,770
page is loaded and it's<font color="#CCCCCC"> returning the</font>

185
00:09:06,620 --> 00:09:12,380
results they<font color="#E5E5E5"> state the data of the main</font>

186
00:09:09,770 --> 00:09:16,040
box including<font color="#E5E5E5"> the widows visitors Kanto</font>

187
00:09:12,380 --> 00:09:18,230
and inside it in the invoke<font color="#E5E5E5"> in another</font>

188
00:09:16,040 --> 00:09:22,069
lambda functions called cars<font color="#E5E5E5"> according</font>

189
00:09:18,230 --> 00:09:24,500
<font color="#CCCCCC">to the marked</font><font color="#E5E5E5"> input in the URL cows and</font>

190
00:09:22,070 --> 00:09:26,810
<font color="#CCCCCC">it's get a parameter</font><font color="#E5E5E5"> and number in milk</font>

191
00:09:24,500 --> 00:09:29,149
<font color="#E5E5E5">parameter</font><font color="#CCCCCC"> 1 and in</font><font color="#E5E5E5"> this case you can see</font>

192
00:09:26,810 --> 00:09:31,699
<font color="#E5E5E5">therefore</font><font color="#CCCCCC"> the front end of the</font>

193
00:09:29,149 --> 00:09:35,270
application including<font color="#CCCCCC"> data from 3 to</font>

194
00:09:31,700 --> 00:09:38,180
lambda functions<font color="#E5E5E5"> another function in</font>

195
00:09:35,270 --> 00:09:40,579
<font color="#E5E5E5">this demo app is the users and you can</font>

196
00:09:38,180 --> 00:09:42,949
use can see an image<font color="#E5E5E5"> of the user at</font>

197
00:09:40,580 --> 00:09:45,440
internal data they taken form a cloud

198
00:09:42,950 --> 00:09:46,970
<font color="#CCCCCC">database and there is a really thin</font>

199
00:09:45,440 --> 00:09:50,180
client it's only invoked serverless

200
00:09:46,970 --> 00:09:54,279
functions and let's see<font color="#E5E5E5"> it's running</font>

201
00:09:50,180 --> 00:09:57,380
<font color="#E5E5E5">just</font><font color="#CCCCCC"> to let me shoot snots a</font><font color="#E5E5E5"> screenshot</font>

202
00:09:54,279 --> 00:10:00,110
<font color="#E5E5E5">yes you can see while clothing</font><font color="#CCCCCC"> the Rizk</font>

203
00:09:57,380 --> 00:10:03,860
invocation of<font color="#CCCCCC"> the lambda function the in</font>

204
00:10:00,110 --> 00:10:06,800
this stage<font color="#CCCCCC"> the male is triggered Nick</font>

205
00:10:03,860 --> 00:10:10,040
created and in milliseconds disappeared

206
00:10:06,800 --> 00:10:14,199
<font color="#CCCCCC">it's</font><font color="#E5E5E5"> they use aside it like any other</font>

207
00:10:10,040 --> 00:10:16,969
application so this code<font color="#E5E5E5"> that I wrote</font>

208
00:10:14,200 --> 00:10:18,770
<font color="#CCCCCC">secret it's include code injection after</font>

209
00:10:16,970 --> 00:10:20,959
<font color="#CCCCCC">our code is code it's every code if it's</font>

210
00:10:18,770 --> 00:10:23,449
routine correctly and on<font color="#E5E5E5"> purpose or</font><font color="#CCCCCC"> not</font>

211
00:10:20,959 --> 00:10:25,459
a purpose<font color="#E5E5E5"> could</font><font color="#CCCCCC"> be vulnerable</font><font color="#E5E5E5"> what is</font>

212
00:10:23,450 --> 00:10:27,620
the code injection<font color="#E5E5E5"> there is a very</font><font color="#CCCCCC"> basic</font>

213
00:10:25,459 --> 00:10:30,380
definition<font color="#E5E5E5"> of of ASP</font><font color="#CCCCCC"> I pretty sure you</font>

214
00:10:27,620 --> 00:10:33,560
already know in case<font color="#CCCCCC"> you have an input</font>

215
00:10:30,380 --> 00:10:35,600
<font color="#E5E5E5">that it's</font><font color="#CCCCCC"> sourced by the user</font><font color="#E5E5E5"> it's not</font>

216
00:10:33,560 --> 00:10:38,149
been sanitized<font color="#E5E5E5"> and it's get</font><font color="#CCCCCC"> tree and of</font>

217
00:10:35,600 --> 00:10:41,120
that flow<font color="#E5E5E5"> to an invocation a command</font>

218
00:10:38,149 --> 00:10:41,950
like even in JavaScript<font color="#CCCCCC"> then it can be</font>

219
00:10:41,120 --> 00:10:45,410
answered

220
00:10:41,950 --> 00:10:48,050
so if it's the code that I wrote and<font color="#E5E5E5"> I</font>

221
00:10:45,410 --> 00:10:51,050
on purpose<font color="#CCCCCC"> internet congestion inside it</font>

222
00:10:48,050 --> 00:10:53,000
you<font color="#CCCCCC"> can see an evil of the JavaScript</font>

223
00:10:51,050 --> 00:10:55,279
that's running the<font color="#E5E5E5"> code and the code</font><font color="#CCCCCC"> is</font>

224
00:10:53,000 --> 00:10:58,209
built of<font color="#E5E5E5"> the event trigger the event</font>

225
00:10:55,279 --> 00:11:00,980
trigger is the<font color="#CCCCCC"> input of</font><font color="#E5E5E5"> the lambda</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> a</font>

226
00:10:58,209 --> 00:11:03,589
function as we<font color="#CCCCCC"> said event it trigger is</font>

227
00:11:00,980 --> 00:11:05,720
not<font color="#CCCCCC"> always the textbox</font><font color="#E5E5E5"> so regular input</font>

228
00:11:03,589 --> 00:11:08,570
it could be<font color="#E5E5E5"> iota vol 10 it</font><font color="#CCCCCC"> could be API</font>

229
00:11:05,720 --> 00:11:10,699
service<font color="#E5E5E5"> and in this case we could</font><font color="#CCCCCC"> clue</font>

230
00:11:08,570 --> 00:11:12,829
<font color="#CCCCCC">to parameters that we saw in the</font><font color="#E5E5E5"> URL</font><font color="#CCCCCC"> the</font>

231
00:11:10,699 --> 00:11:14,329
<font color="#CCCCCC">resource</font><font color="#E5E5E5"> names it will create the</font>

232
00:11:12,829 --> 00:11:15,160
invocation to the internal lambda

233
00:11:14,329 --> 00:11:19,899
function

234
00:11:15,160 --> 00:11:22,509
<font color="#CCCCCC">anomalous</font><font color="#E5E5E5"> parameter so</font><font color="#CCCCCC"> okay and</font><font color="#E5E5E5"> this is</font>

235
00:11:19,899 --> 00:11:24,639
<font color="#CCCCCC">the</font><font color="#E5E5E5"> function code we start the in this</font>

236
00:11:22,509 --> 00:11:26,110
market<font color="#CCCCCC"> call injection do you concede in</font>

237
00:11:24,639 --> 00:11:31,629
this<font color="#E5E5E5"> I admit</font>

238
00:11:26,110 --> 00:11:34,720
<font color="#CCCCCC">I will code</font><font color="#E5E5E5"> another vulnerability</font><font color="#CCCCCC"> its</font>

239
00:11:31,629 --> 00:11:36,759
<font color="#E5E5E5">marked</font><font color="#CCCCCC"> away in the first line there</font><font color="#E5E5E5"> is</font>

240
00:11:34,720 --> 00:11:39,189
some sensitive<font color="#E5E5E5"> data</font><font color="#CCCCCC"> exposing</font><font color="#E5E5E5"> the code</font>

241
00:11:36,759 --> 00:11:41,529
<font color="#E5E5E5">not related to</font><font color="#CCCCCC"> server less</font><font color="#E5E5E5"> but just</font><font color="#CCCCCC"> may</font>

242
00:11:39,189 --> 00:11:43,629
<font color="#E5E5E5">we'll get back</font><font color="#CCCCCC"> into</font><font color="#E5E5E5"> its later</font><font color="#CCCCCC"> if you're</font>

243
00:11:41,529 --> 00:11:45,639
<font color="#E5E5E5">writing your code don't do it</font><font color="#CCCCCC"> you it</font>

244
00:11:43,629 --> 00:11:47,529
<font color="#E5E5E5">will have a serious</font><font color="#CCCCCC"> impact in the next</font>

245
00:11:45,639 --> 00:11:50,079
<font color="#E5E5E5">stage of the demo you can see the</font>

246
00:11:47,529 --> 00:11:53,529
database<font color="#E5E5E5"> core included API key expose</font>

247
00:11:50,079 --> 00:11:55,209
<font color="#CCCCCC">it's not scripted</font><font color="#E5E5E5"> in the code okay</font><font color="#CCCCCC"> so</font>

248
00:11:53,529 --> 00:11:58,209
assuming<font color="#CCCCCC"> we have the code injection</font><font color="#E5E5E5"> and</font>

249
00:11:55,209 --> 00:11:59,800
<font color="#CCCCCC">will try to attack it with further</font><font color="#E5E5E5"> and</font>

250
00:11:58,209 --> 00:12:02,229
until we find the malicious inputs

251
00:11:59,800 --> 00:12:03,969
<font color="#E5E5E5">deaths will do is arm what</font><font color="#CCCCCC"> can what can</font>

252
00:12:02,230 --> 00:12:06,040
<font color="#E5E5E5">be what can they</font><font color="#CCCCCC"> actually do which</font>

253
00:12:03,970 --> 00:12:08,860
<font color="#CCCCCC">infidel is in this know several</font>

254
00:12:06,040 --> 00:12:10,660
<font color="#E5E5E5">container okay</font><font color="#CCCCCC"> so I read the Amazon</font>

255
00:12:08,860 --> 00:12:12,550
documentation and I<font color="#E5E5E5"> thought this</font>

256
00:12:10,660 --> 00:12:14,649
container contains some environment

257
00:12:12,550 --> 00:12:16,089
viable one<font color="#E5E5E5"> of them is</font><font color="#CCCCCC"> very interesting</font>

258
00:12:14,649 --> 00:12:19,600
is<font color="#CCCCCC"> the path of</font><font color="#E5E5E5"> the lambda</font><font color="#CCCCCC"> called</font>

259
00:12:16,089 --> 00:12:21,130
function<font color="#CCCCCC"> called</font><font color="#E5E5E5"> itself so assuming we</font>

260
00:12:19,600 --> 00:12:23,759
<font color="#CCCCCC">know there is</font><font color="#E5E5E5"> a call</font><font color="#CCCCCC"> instruction in the</font>

261
00:12:21,130 --> 00:12:26,319
function and the soon we<font color="#E5E5E5"> found after</font>

262
00:12:23,759 --> 00:12:30,009
<font color="#CCCCCC">both Falls the malicious inputs that can</font>

263
00:12:26,319 --> 00:12:32,139
invoke this<font color="#CCCCCC"> eval and we try</font><font color="#E5E5E5"> to get this</font>

264
00:12:30,009 --> 00:12:34,269
in<font color="#E5E5E5"> football to form</font><font color="#CCCCCC"> the invalid viable</font>

265
00:12:32,139 --> 00:12:36,850
and especially<font color="#E5E5E5"> we want to be focused and</font>

266
00:12:34,269 --> 00:12:41,680
get the RAM to test route<font color="#E5E5E5"> let's see is</font>

267
00:12:36,850 --> 00:12:45,939
in demo this malicious code on the same

268
00:12:41,680 --> 00:12:47,800
make URL and we can see the result<font color="#E5E5E5"> is</font>

269
00:12:45,939 --> 00:12:50,560
<font color="#CCCCCC">virtus it's not surprising it's the</font>

270
00:12:47,800 --> 00:12:53,939
default<font color="#CCCCCC"> location of path of the code in</font>

271
00:12:50,560 --> 00:12:56,500
<font color="#E5E5E5">lambda containers so we have</font><font color="#CCCCCC"> our demo</font>

272
00:12:53,939 --> 00:12:58,300
<font color="#E5E5E5">application and we know its own demand</font>

273
00:12:56,500 --> 00:13:00,430
<font color="#CCCCCC">it's create a container</font><font color="#E5E5E5"> that's contained</font>

274
00:12:58,300 --> 00:13:02,500
the functions code and we know where it

275
00:13:00,430 --> 00:13:04,899
stores in this container in<font color="#CCCCCC"> the specific</font>

276
00:13:02,500 --> 00:13:06,730
<font color="#E5E5E5">folder and there's an actual outside of</font>

277
00:13:04,899 --> 00:13:09,220
this<font color="#CCCCCC"> environment</font><font color="#E5E5E5"> I have my several of my</font>

278
00:13:06,730 --> 00:13:11,290
<font color="#E5E5E5">own using this code attention I want to</font>

279
00:13:09,220 --> 00:13:13,389
check can I copy this code to my

280
00:13:11,290 --> 00:13:15,490
location<font color="#E5E5E5"> as</font><font color="#CCCCCC"> Annika</font><font color="#E5E5E5"> or</font><font color="#CCCCCC"> not there will</font><font color="#E5E5E5"> be</font>

281
00:13:13,389 --> 00:13:17,589
I assume<font color="#CCCCCC"> there will be some block of</font>

282
00:13:15,490 --> 00:13:19,600
limitation in<font color="#E5E5E5"> the network</font><font color="#CCCCCC"> that prevent</font>

283
00:13:17,589 --> 00:13:23,259
<font color="#E5E5E5">me from doing this but I was surprised</font>

284
00:13:19,600 --> 00:13:27,500
<font color="#CCCCCC">and was not here is the malicious code</font>

285
00:13:23,259 --> 00:13:29,600
<font color="#CCCCCC">that road we am</font><font color="#E5E5E5"> using guess the classic</font>

286
00:13:27,500 --> 00:13:31,820
<font color="#E5E5E5">library</font><font color="#CCCCCC"> is available</font><font color="#E5E5E5"> for nodejs I'm</font>

287
00:13:29,600 --> 00:13:34,430
zipping the source code<font color="#CCCCCC"> today nobody</font>

288
00:13:31,820 --> 00:13:38,600
stays in the<font color="#CCCCCC"> virtus and</font><font color="#E5E5E5"> I'm sending it</font>

289
00:13:34,430 --> 00:13:41,839
to<font color="#CCCCCC"> my</font><font color="#E5E5E5"> actual server URL using</font><font color="#CCCCCC"> a non</font>

290
00:13:38,600 --> 00:13:43,310
common pot it's also an Indian ink<font color="#CCCCCC"> jet</font>

291
00:13:41,840 --> 00:13:46,700
<font color="#CCCCCC">we'll get back</font><font color="#E5E5E5"> and compared to artists</font>

292
00:13:43,310 --> 00:13:47,839
solution it is<font color="#CCCCCC"> my</font><font color="#E5E5E5"> server of the</font><font color="#CCCCCC"> archive</font>

293
00:13:46,700 --> 00:13:55,370
country it's empty

294
00:13:47,840 --> 00:13:57,640
running<font color="#E5E5E5"> this malicious code and let's</font>

295
00:13:55,370 --> 00:14:00,590
see what happens to our server<font color="#E5E5E5"> right</font><font color="#CCCCCC"> now</font>

296
00:13:57,640 --> 00:14:03,319
we can see a copy of this<font color="#E5E5E5"> zipped</font><font color="#CCCCCC"> a</font>

297
00:14:00,590 --> 00:14:09,530
source code and let's see what<font color="#CCCCCC"> it's</font>

298
00:14:03,320 --> 00:14:11,390
<font color="#CCCCCC">contains it contains</font><font color="#E5E5E5"> the code itself</font>

299
00:14:09,530 --> 00:14:14,720
<font color="#E5E5E5">including</font><font color="#CCCCCC"> the sensitive</font><font color="#E5E5E5"> data</font><font color="#CCCCCC"> that was</font>

300
00:14:11,390 --> 00:14:16,730
<font color="#E5E5E5">exposed the code and another thing even</font>

301
00:14:14,720 --> 00:14:19,010
<font color="#E5E5E5">if it was the</font><font color="#CCCCCC"> end not in the code</font><font color="#E5E5E5"> and</font>

302
00:14:16,730 --> 00:14:21,200
was in the<font color="#CCCCCC"> configuration</font><font color="#E5E5E5"> is beside it we</font>

303
00:14:19,010 --> 00:14:23,480
would could get it is part of the zip

304
00:14:21,200 --> 00:14:25,070
but it would be a bit<font color="#E5E5E5"> harder</font><font color="#CCCCCC"> it's</font>

305
00:14:23,480 --> 00:14:27,770
<font color="#CCCCCC">obvious in the code you can</font><font color="#E5E5E5"> see the out</font>

306
00:14:25,070 --> 00:14:31,910
code it will<font color="#E5E5E5"> be</font><font color="#CCCCCC"> PI key that this</font><font color="#E5E5E5"> K could</font>

307
00:14:27,770 --> 00:14:33,920
<font color="#E5E5E5">be used by the this cloud DB but you can</font>

308
00:14:31,910 --> 00:14:39,620
be no<font color="#E5E5E5"> worries we already replace it</font>

309
00:14:33,920 --> 00:14:42,469
since then so we used<font color="#CCCCCC"> within</font><font color="#E5E5E5"> done</font><font color="#CCCCCC"> a</font>

310
00:14:39,620 --> 00:14:44,690
<font color="#E5E5E5">simple</font><font color="#CCCCCC"> code injection</font><font color="#E5E5E5"> but we don't want</font>

311
00:14:42,470 --> 00:14:46,820
to<font color="#E5E5E5"> do some</font><font color="#CCCCCC"> more company</font><font color="#E5E5E5"> complex a and</font>

312
00:14:44,690 --> 00:14:50,390
<font color="#CCCCCC">invest</font><font color="#E5E5E5"> actions not just copying the code</font>

313
00:14:46,820 --> 00:14:52,339
<font color="#E5E5E5">what tools to Amazon give us so I was on</font>

314
00:14:50,390 --> 00:14:55,100
Evan<font color="#E5E5E5"> SDK</font><font color="#CCCCCC"> that can do some cool stuff</font>

315
00:14:52,339 --> 00:14:56,990
<font color="#CCCCCC">with lambda</font><font color="#E5E5E5"> it could get a list of all</font>

316
00:14:55,100 --> 00:14:59,600
the functions<font color="#CCCCCC"> of your account</font><font color="#E5E5E5"> deployed</font>

317
00:14:56,990 --> 00:15:01,730
<font color="#E5E5E5">and invoked it's it's usually useful in</font>

318
00:14:59,600 --> 00:15:03,020
the development<font color="#E5E5E5"> environment</font><font color="#CCCCCC"> and when</font>

319
00:15:01,730 --> 00:15:05,360
you're<font color="#E5E5E5"> doing it in your</font><font color="#CCCCCC"> development</font>

320
00:15:03,020 --> 00:15:07,280
environment<font color="#E5E5E5"> you are authenticated by</font>

321
00:15:05,360 --> 00:15:09,890
your AWS profile<font color="#CCCCCC"> and you can do</font><font color="#E5E5E5"> only</font>

322
00:15:07,280 --> 00:15:11,990
what you are<font color="#CCCCCC"> permitted to</font><font color="#E5E5E5"> do but what if</font>

323
00:15:09,890 --> 00:15:14,000
we were doing<font color="#E5E5E5"> this using the same SDK</font>

324
00:15:11,990 --> 00:15:16,040
<font color="#E5E5E5">that it's already built in in the lambda</font>

325
00:15:14,000 --> 00:15:17,510
function and you'll do is it<font color="#CCCCCC"> calling</font>

326
00:15:16,040 --> 00:15:19,510
<font color="#CCCCCC">it's within</font><font color="#E5E5E5"> the lambda function</font><font color="#CCCCCC"> itself</font>

327
00:15:17,510 --> 00:15:22,339
in this<font color="#E5E5E5"> case there is no authentication</font>

328
00:15:19,510 --> 00:15:24,610
<font color="#CCCCCC">amazon counts on the</font><font color="#E5E5E5"> setting that</font><font color="#CCCCCC"> was</font>

329
00:15:22,339 --> 00:15:27,230
set in<font color="#E5E5E5"> the predefined lambda function</font>

330
00:15:24,610 --> 00:15:29,330
including their description<font color="#E5E5E5"> role and</font>

331
00:15:27,230 --> 00:15:31,190
only what the cook is<font color="#CCCCCC"> the crucial role</font>

332
00:15:29,330 --> 00:15:33,680
that<font color="#E5E5E5"> was pretty fun</font><font color="#CCCCCC"> for the lambda</font><font color="#E5E5E5"> you</font>

333
00:15:31,190 --> 00:15:35,070
can can do the same action will be

334
00:15:33,680 --> 00:15:38,849
<font color="#E5E5E5">permitted by you the</font>

335
00:15:35,070 --> 00:15:41,700
decay<font color="#E5E5E5"> so I don't know what permission do</font>

336
00:15:38,850 --> 00:15:43,860
I have so I<font color="#E5E5E5"> tried</font><font color="#CCCCCC"> to write this bit more</font>

337
00:15:41,700 --> 00:15:45,510
complex<font color="#E5E5E5"> code including and using name</font>

338
00:15:43,860 --> 00:15:47,580
dead at the<font color="#CCCCCC"> Bruce decay and using an</font>

339
00:15:45,510 --> 00:15:49,470
<font color="#CCCCCC">update</font><font color="#E5E5E5"> function code object</font><font color="#CCCCCC"> function</font>

340
00:15:47,580 --> 00:15:51,840
code will create a<font color="#E5E5E5"> stored injection it</font>

341
00:15:49,470 --> 00:15:54,510
will rewrite a regional function<font color="#E5E5E5"> and</font>

342
00:15:51,840 --> 00:15:57,570
<font color="#CCCCCC">will</font><font color="#E5E5E5"> edit some malicious in in malicious</font>

343
00:15:54,510 --> 00:16:00,510
code so if we see the original layer is

344
00:15:57,570 --> 00:16:03,180
a output of the both functions<font color="#E5E5E5"> it's</font>

345
00:16:00,510 --> 00:16:06,420
clean as we saw<font color="#E5E5E5"> its before visitors and</font>

346
00:16:03,180 --> 00:16:11,189
details<font color="#E5E5E5"> and</font><font color="#CCCCCC"> in its original code</font><font color="#E5E5E5"> nothing</font>

347
00:16:06,420 --> 00:16:15,920
with<font color="#CCCCCC"> suspicious now I'm running</font><font color="#E5E5E5"> this</font>

348
00:16:11,190 --> 00:16:21,360
malicious code including the AWS SDK

349
00:16:15,920 --> 00:16:25,349
usage in<font color="#E5E5E5"> the and including the update</font>

350
00:16:21,360 --> 00:16:30,660
function code in the end of the of this

351
00:16:25,350 --> 00:16:33,840
URL and once it's done we come back to

352
00:16:30,660 --> 00:16:41,370
the application with consented<font color="#E5E5E5"> our</font>

353
00:16:33,840 --> 00:16:44,580
result of the output contains<font color="#E5E5E5"> some</font>

354
00:16:41,370 --> 00:16:45,990
strange output main act by<font color="#CCCCCC"> six what is</font>

355
00:16:44,580 --> 00:16:49,070
written there<font color="#E5E5E5"> let's go to the main</font>

356
00:16:45,990 --> 00:16:49,070
function<font color="#CCCCCC"> what's happened</font>

357
00:16:53,750 --> 00:16:59,150
<font color="#E5E5E5">chuckle gave us a hint</font><font color="#CCCCCC"> he mocked is</font><font color="#E5E5E5"> the</font>

358
00:16:56,210 --> 00:17:03,230
function is act like<font color="#CCCCCC"> a good hacker and</font>

359
00:16:59,150 --> 00:17:07,310
is as to edit<font color="#E5E5E5"> this malicious output in</font>

360
00:17:03,230 --> 00:17:10,400
the result of the function<font color="#E5E5E5"> and/or</font><font color="#CCCCCC"> just</font>

361
00:17:07,310 --> 00:17:17,688
<font color="#E5E5E5">using the NWS decay of the within</font><font color="#CCCCCC"> the</font>

362
00:17:10,400 --> 00:17:20,150
<font color="#E5E5E5">memory simple so this was a stoic</font>

363
00:17:17,689 --> 00:17:21,439
injection not a regular we use the

364
00:17:20,150 --> 00:17:23,600
permissions that's given to<font color="#E5E5E5"> the</font>

365
00:17:21,439 --> 00:17:25,939
<font color="#E5E5E5">execution of the function</font><font color="#CCCCCC"> but again it</font>

366
00:17:23,599 --> 00:17:28,280
was<font color="#E5E5E5"> a one-time</font><font color="#CCCCCC"> may</font><font color="#E5E5E5"> damage we can reset</font>

367
00:17:25,939 --> 00:17:31,370
<font color="#E5E5E5">the function and this will go back</font><font color="#CCCCCC"> to</font>

368
00:17:28,280 --> 00:17:33,170
the<font color="#CCCCCC"> original code the code diction</font><font color="#E5E5E5"> at</font>

369
00:17:31,370 --> 00:17:35,090
the<font color="#CCCCCC"> code attraction path will stay since</font>

370
00:17:33,170 --> 00:17:38,150
we did fix<font color="#E5E5E5"> the problem but we can</font>

371
00:17:35,090 --> 00:17:39,740
<font color="#CCCCCC">control</font><font color="#E5E5E5"> on the damage let's see in</font><font color="#CCCCCC"> this</font>

372
00:17:38,150 --> 00:17:42,470
<font color="#E5E5E5">case both functions were infected both</font>

373
00:17:39,740 --> 00:17:46,130
the cars in the main and you can restore

374
00:17:42,470 --> 00:17:50,510
the<font color="#CCCCCC"> cast</font><font color="#E5E5E5"> the original code assuming the</font>

375
00:17:46,130 --> 00:17:52,430
<font color="#CCCCCC">DevOps doing that in</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> case the cars</font>

376
00:17:50,510 --> 00:17:55,160
<font color="#E5E5E5">must clean</font><font color="#CCCCCC"> the main was not cleaned but</font>

377
00:17:52,430 --> 00:17:57,200
<font color="#E5E5E5">there was no impact since the main only</font>

378
00:17:55,160 --> 00:17:59,330
was injected and was not<font color="#E5E5E5"> viral it does</font>

379
00:17:57,200 --> 00:18:02,980
not affect<font color="#E5E5E5"> another function the solution</font>

380
00:17:59,330 --> 00:18:05,929
<font color="#E5E5E5">of</font><font color="#CCCCCC"> wlw</font><font color="#E5E5E5"> lambda was useful</font><font color="#CCCCCC"> in this case</font>

381
00:18:02,980 --> 00:18:09,860
but what if we want to<font color="#E5E5E5"> do some more</font>

382
00:18:05,930 --> 00:18:11,750
<font color="#CCCCCC">damage</font><font color="#E5E5E5"> that is</font><font color="#CCCCCC"> order to fix in this case</font>

383
00:18:09,860 --> 00:18:14,240
and<font color="#CCCCCC"> every stored code injection will not</font>

384
00:18:11,750 --> 00:18:16,580
just the<font color="#CCCCCC"> ED some</font><font color="#E5E5E5"> may output in the end</font>

385
00:18:14,240 --> 00:18:19,130
of JSON<font color="#CCCCCC"> but also in fact</font><font color="#E5E5E5"> all others it</font>

386
00:18:16,580 --> 00:18:21,830
has<font color="#CCCCCC"> access to it is case you are going</font>

387
00:18:19,130 --> 00:18:23,630
<font color="#E5E5E5">to get a cost contamination that is in</font>

388
00:18:21,830 --> 00:18:25,760
an endless<font color="#CCCCCC"> loop will inject all others</font>

389
00:18:23,630 --> 00:18:28,970
<font color="#CCCCCC">access</font><font color="#E5E5E5"> function is</font><font color="#CCCCCC"> killed a</font><font color="#E5E5E5"> useful and</font>

390
00:18:25,760 --> 00:18:31,970
you get out of<font color="#E5E5E5"> control in</font><font color="#CCCCCC"> this our case</font>

391
00:18:28,970 --> 00:18:34,610
we have three<font color="#CCCCCC"> functions</font><font color="#E5E5E5"> in the beginning</font>

392
00:18:31,970 --> 00:18:38,060
<font color="#E5E5E5">they are clean when you will inject only</font>

393
00:18:34,610 --> 00:18:40,699
the users we run the cars in the main

394
00:18:38,060 --> 00:18:43,129
and<font color="#CCCCCC"> we'll see they're both clean we load</font>

395
00:18:40,700 --> 00:18:45,140
the<font color="#E5E5E5"> queues of functions we will see the</font>

396
00:18:43,130 --> 00:18:49,010
contamination in all the older<font color="#E5E5E5"> systems</font>

397
00:18:45,140 --> 00:18:51,710
got infected<font color="#E5E5E5"> will clean the</font><font color="#CCCCCC"> main in the</font>

398
00:18:49,010 --> 00:18:53,780
users will see<font color="#CCCCCC"> they're both clean but</font>

399
00:18:51,710 --> 00:18:55,850
when<font color="#E5E5E5"> we load the cars that was forgot to</font>

400
00:18:53,780 --> 00:18:56,360
clean<font color="#E5E5E5"> the</font><font color="#CCCCCC"> Earth</font><font color="#E5E5E5"> system will be damaged</font>

401
00:18:55,850 --> 00:18:58,129
again

402
00:18:56,360 --> 00:19:00,260
and the only way<font color="#E5E5E5"> to get out of</font><font color="#CCCCCC"> this</font>

403
00:18:58,130 --> 00:19:02,179
<font color="#CCCCCC">situation to be</font><font color="#E5E5E5"> traced all the functions</font>

404
00:19:00,260 --> 00:19:04,610
to<font color="#CCCCCC"> the original source but all of them</font>

405
00:19:02,179 --> 00:19:09,720
<font color="#E5E5E5">without forgetting anyone</font>

406
00:19:04,610 --> 00:19:12,320
it was the<font color="#CCCCCC"> scenario in the beginning</font>

407
00:19:09,720 --> 00:19:12,320
it's all<font color="#E5E5E5"> okay</font>

408
00:19:15,559 --> 00:19:22,350
in this<font color="#CCCCCC"> is never consistent much smaller</font>

409
00:19:19,500 --> 00:19:24,000
leg<font color="#CCCCCC"> because</font><font color="#E5E5E5"> the function code is being</font>

410
00:19:22,350 --> 00:19:26,399
<font color="#E5E5E5">changed every time and the caching</font>

411
00:19:24,000 --> 00:19:28,320
mechanism<font color="#CCCCCC"> arrival of</font><font color="#E5E5E5"> Amazon which needs</font>

412
00:19:26,399 --> 00:19:29,850
<font color="#E5E5E5">to read trigger</font><font color="#CCCCCC"> ready no other that</font>

413
00:19:28,320 --> 00:19:32,939
cannot restore the code from its

414
00:19:29,850 --> 00:19:35,189
<font color="#E5E5E5">previous version</font><font color="#CCCCCC"> and especially</font><font color="#E5E5E5"> all the</font>

415
00:19:32,940 --> 00:19:39,049
infection and nutria cost contamination

416
00:19:35,190 --> 00:19:41,399
<font color="#E5E5E5">it takes some time but as you see as</font>

417
00:19:39,049 --> 00:19:44,789
described in the scenario<font color="#CCCCCC"> the cows was</font>

418
00:19:41,399 --> 00:19:48,658
injected it is now contaminating at the

419
00:19:44,789 --> 00:19:52,230
other functions both<font color="#CCCCCC"> thousand men</font>

420
00:19:48,659 --> 00:19:54,679
infected but I'm cleaning the main

421
00:19:52,230 --> 00:19:54,679
function

422
00:20:00,090 --> 00:20:04,740
and cleaning<font color="#E5E5E5"> the users the DevOps do it</font>

423
00:20:02,880 --> 00:20:06,920
this<font color="#CCCCCC"> think</font><font color="#E5E5E5"> is the control of the</font>

424
00:20:04,740 --> 00:20:06,920
situation

425
00:20:09,830 --> 00:20:15,929
everything is there<font color="#CCCCCC"> ok but when it</font><font color="#E5E5E5"> will</font>

426
00:20:14,070 --> 00:20:21,659
call back some<font color="#CCCCCC"> other user will render a</font>

427
00:20:15,930 --> 00:20:25,110
<font color="#E5E5E5">class function it will infect the count</font>

428
00:20:21,660 --> 00:20:26,940
function<font color="#E5E5E5"> and in the second one we can</font>

429
00:20:25,110 --> 00:20:37,679
see that you main end user got infected

430
00:20:26,940 --> 00:20:38,730
as well<font color="#CCCCCC"> ok</font><font color="#E5E5E5"> so how can we prevent some</font>

431
00:20:37,680 --> 00:20:41,070
such attacks

432
00:20:38,730 --> 00:20:44,040
<font color="#E5E5E5">there are</font><font color="#CCCCCC"> two main layers of projection</font>

433
00:20:41,070 --> 00:20:46,230
<font color="#CCCCCC">debris lambda to prevent it the first</font>

434
00:20:44,040 --> 00:20:47,970
one<font color="#E5E5E5"> is the execution</font><font color="#CCCCCC"> roll the lambda</font>

435
00:20:46,230 --> 00:20:50,940
function can<font color="#E5E5E5"> only do what it was the</font>

436
00:20:47,970 --> 00:20:53,460
<font color="#CCCCCC">sets meant to be done by the execution</font>

437
00:20:50,940 --> 00:20:55,380
or permissions and luckily the default

438
00:20:53,460 --> 00:20:57,930
is the<font color="#E5E5E5"> basic limited permissions given</font>

439
00:20:55,380 --> 00:21:00,030
<font color="#CCCCCC">as set by Amazon</font><font color="#E5E5E5"> in this case in this</font>

440
00:20:57,930 --> 00:21:03,660
demo<font color="#E5E5E5"> I on purpose</font><font color="#CCCCCC"> change</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> layer</font><font color="#E5E5E5"> role</font>

441
00:21:00,030 --> 00:21:05,520
to a full access<font color="#CCCCCC"> control and you could</font>

442
00:21:03,660 --> 00:21:07,080
say it will be mistake we<font color="#E5E5E5"> are show in</font>

443
00:21:05,520 --> 00:21:09,750
the<font color="#E5E5E5"> next slides was this mistake is</font>

444
00:21:07,080 --> 00:21:11,610
<font color="#E5E5E5">there not so surprising another layer of</font>

445
00:21:09,750 --> 00:21:13,800
protection<font color="#CCCCCC"> is the</font><font color="#E5E5E5"> BBC that should</font>

446
00:21:11,610 --> 00:21:17,250
isolates the container that they<font color="#E5E5E5"> prevent</font>

447
00:21:13,800 --> 00:21:21,540
<font color="#E5E5E5">out both the connection but unfortunate</font>

448
00:21:17,250 --> 00:21:23,370
the<font color="#CCCCCC"> d40</font><font color="#E5E5E5"> was you know using the PC so we</font>

449
00:21:21,540 --> 00:21:26,129
talked about the execution<font color="#E5E5E5"> role and</font>

450
00:21:23,370 --> 00:21:28,020
there is<font color="#E5E5E5"> a long complex</font><font color="#CCCCCC"> term</font><font color="#E5E5E5"> creation or</font>

451
00:21:26,130 --> 00:21:30,090
<font color="#E5E5E5">Amazon</font><font color="#CCCCCC"> that's if you read it very</font><font color="#E5E5E5"> well</font>

452
00:21:28,020 --> 00:21:32,760
you will<font color="#E5E5E5"> know do it but assuming you are</font>

453
00:21:30,090 --> 00:21:35,280
lazy and<font color="#E5E5E5"> you want man let's do some open</font>

454
00:21:32,760 --> 00:21:37,500
<font color="#E5E5E5">source tool that's better life easier</font>

455
00:21:35,280 --> 00:21:39,840
deploy no J's is lift<font color="#CCCCCC"> one the lambda</font>

456
00:21:37,500 --> 00:21:42,720
founded Google and very common open

457
00:21:39,840 --> 00:21:46,560
source<font color="#E5E5E5"> web walk let's see what it's says</font>

458
00:21:42,720 --> 00:21:49,170
instrumentation<font color="#E5E5E5"> oh it's will require</font><font color="#CCCCCC"> AWS</font>

459
00:21:46,560 --> 00:21:51,330
<font color="#E5E5E5">number full access not so good once you</font>

460
00:21:49,170 --> 00:21:54,360
have such a<font color="#E5E5E5"> troll in your system you</font><font color="#CCCCCC"> can</font>

461
00:21:51,330 --> 00:21:57,330
get easily confused and use<font color="#E5E5E5"> there as</font>

462
00:21:54,360 --> 00:22:00,000
<font color="#CCCCCC">blatant a privilege</font><font color="#E5E5E5"> but you say it's</font>

463
00:21:57,330 --> 00:22:02,610
such just one tool not already<font color="#E5E5E5"> using it</font>

464
00:22:00,000 --> 00:22:05,730
<font color="#E5E5E5">but I'm sure</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> Amazon are responsible</font>

465
00:22:02,610 --> 00:22:08,070
and<font color="#E5E5E5"> not</font><font color="#CCCCCC"> have in such cases</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> again you</font>

466
00:22:05,730 --> 00:22:08,880
<font color="#E5E5E5">can be a good developer and in all the</font>

467
00:22:08,070 --> 00:22:11,490
<font color="#E5E5E5">documentation</font>

468
00:22:08,880 --> 00:22:12,510
oh<font color="#E5E5E5"> you're lazy to just Google for ready</font>

469
00:22:11,490 --> 00:22:14,520
<font color="#E5E5E5">code example</font>

470
00:22:12,510 --> 00:22:17,430
and while you're looking<font color="#CCCCCC"> for</font><font color="#E5E5E5"> ready code</font>

471
00:22:14,520 --> 00:22:19,920
example but official one<font color="#E5E5E5"> of AWS labs not</font>

472
00:22:17,430 --> 00:22:23,370
someone they<font color="#CCCCCC"> wrote in the</font><font color="#E5E5E5"> top row</font><font color="#CCCCCC"> bleats</font>

473
00:22:19,920 --> 00:22:26,070
<font color="#E5E5E5">so the official code example of a SS l</font>

474
00:22:23,370 --> 00:22:29,070
WS labs include the following<font color="#CCCCCC"> commit to</font>

475
00:22:26,070 --> 00:22:32,550
a sign if<font color="#CCCCCC"> n</font><font color="#E5E5E5"> WS time the full axis not</font>

476
00:22:29,070 --> 00:22:38,070
good so this<font color="#CCCCCC"> is all</font><font color="#E5E5E5"> about how we</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> get</font>

477
00:22:32,550 --> 00:22:39,629
confused and get<font color="#E5E5E5"> creative function LW</font>

478
00:22:38,070 --> 00:22:43,290
<font color="#E5E5E5">stand the full access permissions to</font>

479
00:22:39,630 --> 00:22:45,120
your execution<font color="#CCCCCC"> role and</font><font color="#E5E5E5"> there again</font>

480
00:22:43,290 --> 00:22:46,440
<font color="#E5E5E5">proved that the whip is zoomed out the</font>

481
00:22:45,120 --> 00:22:48,899
rain it's more easy to<font color="#E5E5E5"> get confused</font>

482
00:22:46,440 --> 00:22:52,680
<font color="#CCCCCC">because</font><font color="#E5E5E5"> the default is no V PC the first</font>

483
00:22:48,900 --> 00:22:55,650
option so these two layers<font color="#E5E5E5"> of protection</font>

484
00:22:52,680 --> 00:22:58,800
<font color="#CCCCCC">that's meant</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> prevent protect us one</font>

485
00:22:55,650 --> 00:23:00,810
was the easily<font color="#CCCCCC"> a</font><font color="#E5E5E5"> cabal with no</font><font color="#CCCCCC"> V PC</font><font color="#E5E5E5"> by</font>

486
00:22:58,800 --> 00:23:03,300
<font color="#CCCCCC">therefore and what was easily to get</font>

487
00:23:00,810 --> 00:23:04,669
confused by using<font color="#E5E5E5"> external tools or</font>

488
00:23:03,300 --> 00:23:09,270
using your<font color="#E5E5E5"> own</font>

489
00:23:04,670 --> 00:23:12,060
obsoleted so simple<font color="#E5E5E5"> but what is the</font>

490
00:23:09,270 --> 00:23:14,129
lesson<font color="#CCCCCC"> of</font><font color="#E5E5E5"> all of this research yes there</font>

491
00:23:12,060 --> 00:23:16,710
is no<font color="#E5E5E5"> such</font><font color="#CCCCCC"> Fingal cloud or server list</font>

492
00:23:14,130 --> 00:23:18,890
there is always someone else ever<font color="#E5E5E5"> yes</font>

493
00:23:16,710 --> 00:23:21,390
you should be<font color="#E5E5E5"> worried about</font><font color="#CCCCCC"> and</font>

494
00:23:18,890 --> 00:23:23,850
<font color="#CCCCCC">protected</font><font color="#E5E5E5"> there</font><font color="#CCCCCC"> were these</font><font color="#E5E5E5"> two servers</font>

495
00:23:21,390 --> 00:23:25,920
the<font color="#E5E5E5"> servers of the objects containing</font>

496
00:23:23,850 --> 00:23:27,780
<font color="#E5E5E5">temp container and the</font><font color="#CCCCCC"> services</font>

497
00:23:25,920 --> 00:23:31,230
containing the<font color="#E5E5E5"> source code in Amazon</font>

498
00:23:27,780 --> 00:23:33,389
it's probably as free and code<font color="#CCCCCC"> is</font><font color="#E5E5E5"> code</font>

499
00:23:31,230 --> 00:23:35,220
and if you not write a sensitive<font color="#CCCCCC"> latin</font>

500
00:23:33,390 --> 00:23:37,290
your code in the server<font color="#E5E5E5"> the same way you</font>

501
00:23:35,220 --> 00:23:39,810
should<font color="#CCCCCC"> not write</font><font color="#E5E5E5"> sensitive data in</font><font color="#CCCCCC"> the</font>

502
00:23:37,290 --> 00:23:43,620
in the service code<font color="#E5E5E5"> since this could be</font>

503
00:23:39,810 --> 00:23:45,629
<font color="#CCCCCC">a accelerated</font><font color="#E5E5E5"> and attacked by</font><font color="#CCCCCC"> a torrent</font>

504
00:23:43,620 --> 00:23:48,030
to the<font color="#E5E5E5"> occur server you</font><font color="#CCCCCC"> should be aware</font>

505
00:23:45,630 --> 00:23:50,190
in case this<font color="#E5E5E5"> case of Amazon that the</font>

506
00:23:48,030 --> 00:23:53,520
<font color="#E5E5E5">iaws SDK is built-in and a lambda</font>

507
00:23:50,190 --> 00:23:55,740
container and<font color="#E5E5E5"> you should be aware that</font>

508
00:23:53,520 --> 00:23:57,930
the way<font color="#CCCCCC"> pcs must be defined otherwise</font>

509
00:23:55,740 --> 00:24:00,650
the default<font color="#E5E5E5"> is open there's a good</font>

510
00:23:57,930 --> 00:24:03,090
reason<font color="#CCCCCC"> test there is no pcfo is there a</font>

511
00:24:00,650 --> 00:24:05,610
common<font color="#E5E5E5"> use cases of getting data from</font>

512
00:24:03,090 --> 00:24:09,300
<font color="#E5E5E5">the internet but sometimes you</font><font color="#CCCCCC"> should</font>

513
00:24:05,610 --> 00:24:11,219
get control of this isolation<font color="#E5E5E5"> and beside</font>

514
00:24:09,300 --> 00:24:14,100
the fact<font color="#CCCCCC"> of</font><font color="#E5E5E5"> del WS</font><font color="#CCCCCC"> SDK is</font><font color="#E5E5E5"> built-in</font>

515
00:24:11,220 --> 00:24:18,840
<font color="#E5E5E5">should be available about its execution</font>

516
00:24:14,100 --> 00:24:22,050
<font color="#CCCCCC">world</font><font color="#E5E5E5"> effect at not and most in most</font>

517
00:24:18,840 --> 00:24:24,629
cases the basic limited permissions are

518
00:24:22,050 --> 00:24:25,799
good enough if not you should control

519
00:24:24,630 --> 00:24:26,970
and read very<font color="#CCCCCC"> well</font>

520
00:24:25,799 --> 00:24:29,519
<font color="#E5E5E5">what about the permission you are going</font>

521
00:24:26,970 --> 00:24:32,460
to do a function since if it's by any

522
00:24:29,519 --> 00:24:34,590
case<font color="#CCCCCC"> contain</font><font color="#E5E5E5"> the cont dejection then you</font>

523
00:24:32,460 --> 00:24:36,779
<font color="#E5E5E5">enter you</font><font color="#CCCCCC"> are not monitoring it</font><font color="#E5E5E5"> you can</font>

524
00:24:34,590 --> 00:24:40,619
get<font color="#CCCCCC"> reproduced such scenarios</font><font color="#E5E5E5"> of attacks</font>

525
00:24:36,779 --> 00:24:42,470
<font color="#E5E5E5">and as we there is a common</font><font color="#CCCCCC"> st. with</font>

526
00:24:40,619 --> 00:24:45,360
great power comes<font color="#CCCCCC"> great responsibility</font>

527
00:24:42,470 --> 00:24:47,190
<font color="#CCCCCC">so you have no power</font><font color="#E5E5E5"> armors to</font>

528
00:24:45,360 --> 00:24:50,039
<font color="#CCCCCC">accounting on Amazon Google Microsoft</font>

529
00:24:47,190 --> 00:24:51,929
<font color="#CCCCCC">the day of the power of silver but still</font>

530
00:24:50,039 --> 00:24:53,610
you<font color="#CCCCCC"> have the responsibility you have the</font>

531
00:24:51,929 --> 00:24:56,519
responsibility<font color="#CCCCCC"> to keep</font><font color="#E5E5E5"> your code this</font>

532
00:24:53,610 --> 00:24:59,789
<font color="#E5E5E5">were secured and the</font><font color="#CCCCCC"> monitor is deployed</font>

533
00:24:56,519 --> 00:25:02,429
version<font color="#E5E5E5"> and how you do it is</font><font color="#CCCCCC"> you like</font>

534
00:24:59,789 --> 00:25:05,039
<font color="#CCCCCC">code this</font><font color="#E5E5E5"> code as I said you should scan</font>

535
00:25:02,429 --> 00:25:06,330
it<font color="#E5E5E5"> and use a</font><font color="#CCCCCC"> living any other sqt tools</font>

536
00:25:05,039 --> 00:25:10,379
to make sure there are no<font color="#E5E5E5"> variability</font>

537
00:25:06,330 --> 00:25:11,428
<font color="#E5E5E5">delete why way to use the one tool is</font>

538
00:25:10,379 --> 00:25:13,980
the SAS tool

539
00:25:11,429 --> 00:25:16,590
that's as I said you can download the

540
00:25:13,980 --> 00:25:19,499
code automatically with integration from

541
00:25:16,590 --> 00:25:22,109
data from<font color="#CCCCCC"> the AWS and</font><font color="#E5E5E5"> scattering scan it</font>

542
00:25:19,499 --> 00:25:25,710
with every SAS tool in this case of

543
00:25:22,109 --> 00:25:28,139
<font color="#CCCCCC">checkmarks</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> here we say</font><font color="#E5E5E5"> a project it</font>

544
00:25:25,710 --> 00:25:30,929
is was predefined to be integrated with

545
00:25:28,139 --> 00:25:32,998
<font color="#CCCCCC">the lambda project the code it was is</font>

546
00:25:30,929 --> 00:25:35,489
downloaded with the current version<font color="#CCCCCC"> you</font>

547
00:25:32,999 --> 00:25:39,059
can trigger<font color="#E5E5E5"> events that's only on update</font>

548
00:25:35,489 --> 00:25:44,249
version<font color="#E5E5E5"> there will</font><font color="#CCCCCC"> be such scan the scan</font>

549
00:25:39,059 --> 00:25:46,049
<font color="#E5E5E5">was finished and code injection is a</font>

550
00:25:44,249 --> 00:25:47,850
call injections of<font color="#E5E5E5"> the same queries and</font>

551
00:25:46,049 --> 00:25:50,220
rules that<font color="#CCCCCC"> are valid for</font><font color="#E5E5E5"> regular code</font>

552
00:25:47,850 --> 00:25:52,230
will be<font color="#E5E5E5"> valid for</font><font color="#CCCCCC"> this JavaScript code</font>

553
00:25:50,220 --> 00:25:54,570
the only difference<font color="#CCCCCC"> this the</font><font color="#E5E5E5"> input is</font>

554
00:25:52,230 --> 00:25:56,970
not a common input<font color="#CCCCCC"> another function</font><font color="#E5E5E5"> it's</font>

555
00:25:54,570 --> 00:25:58,619
as an<font color="#E5E5E5"> event Regal and even check</font><font color="#CCCCCC"> mocks</font>

556
00:25:56,970 --> 00:26:01,259
the resort you<font color="#CCCCCC"> can see how the event</font>

557
00:25:58,619 --> 00:26:05,189
trigger<font color="#E5E5E5"> a goal in the data flow</font><font color="#CCCCCC"> till the</font>

558
00:26:01,259 --> 00:26:07,950
code<font color="#E5E5E5"> that's been run by an invalid and</font>

559
00:26:05,190 --> 00:26:10,889
if you would<font color="#E5E5E5"> scan the code you</font><font color="#CCCCCC"> can see</font>

560
00:26:07,950 --> 00:26:16,289
<font color="#CCCCCC">this</font><font color="#E5E5E5"> vulnerability fixed it and approve</font>

561
00:26:10,889 --> 00:26:19,649
the fixed version to the server<font color="#CCCCCC"> and so</font>

562
00:26:16,289 --> 00:26:21,419
the main research was of AWS lambda I

563
00:26:19,649 --> 00:26:23,758
are produced all the following scenarios

564
00:26:21,419 --> 00:26:26,309
under<font color="#E5E5E5"> some limitations and the</font>

565
00:26:23,759 --> 00:26:29,009
assumptions<font color="#E5E5E5"> there are</font><font color="#CCCCCC"> two others</font>

566
00:26:26,309 --> 00:26:31,289
<font color="#E5E5E5">commercial solution I did some small</font>

567
00:26:29,009 --> 00:26:33,210
<font color="#E5E5E5">research about them as well and the code</font>

568
00:26:31,289 --> 00:26:36,090
<font color="#CCCCCC">injection scenario</font><font color="#E5E5E5"> assuming the code is</font>

569
00:26:33,210 --> 00:26:37,859
as<font color="#E5E5E5"> the new valid in North sanitation can</font>

570
00:26:36,090 --> 00:26:39,639
<font color="#E5E5E5">be</font><font color="#CCCCCC"> reproduce in every other solution</font>

571
00:26:37,859 --> 00:26:42,549
<font color="#E5E5E5">after</font><font color="#CCCCCC"> all code is</font><font color="#E5E5E5"> code</font>

572
00:26:39,639 --> 00:26:46,149
the<font color="#E5E5E5"> Outland connection and the default</font>

573
00:26:42,549 --> 00:26:48,879
depends between<font color="#E5E5E5"> windows in Amazon the</font>

574
00:26:46,149 --> 00:26:50,889
default was no<font color="#CCCCCC"> we PC in google GCP there</font>

575
00:26:48,879 --> 00:26:54,340
is a<font color="#E5E5E5"> firewall by default but it's walk a</font>

576
00:26:50,889 --> 00:26:56,469
block only uncommon<font color="#E5E5E5"> part like this</font><font color="#CCCCCC"> the</font>

577
00:26:54,340 --> 00:26:59,350
50 Potter use it was being blocked<font color="#E5E5E5"> by a</font>

578
00:26:56,470 --> 00:27:01,480
<font color="#CCCCCC">qu 2</font><font color="#E5E5E5"> switches and it was not blocking IP</font>

579
00:26:59,350 --> 00:27:03,519
in a<font color="#CCCCCC"> shoe</font><font color="#E5E5E5"> there is some more advanced</font>

580
00:27:01,480 --> 00:27:04,899
settings<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> edge resources and I</font>

581
00:27:03,519 --> 00:27:07,570
would<font color="#CCCCCC"> indicate with other tools of</font>

582
00:27:04,899 --> 00:27:09,610
Microsoft<font color="#E5E5E5"> so again there is some</font>

583
00:27:07,570 --> 00:27:12,939
protection<font color="#CCCCCC"> but you should take the</font>

584
00:27:09,610 --> 00:27:15,729
responsibility<font color="#E5E5E5"> of setting it the modify</font>

585
00:27:12,940 --> 00:27:18,340
function code was<font color="#CCCCCC"> not</font><font color="#E5E5E5"> indeed agree to do</font>

586
00:27:15,730 --> 00:27:20,889
list it in<font color="#E5E5E5"> GC Peter since there was no</font>

587
00:27:18,340 --> 00:27:23,859
SDK pre-installed<font color="#CCCCCC"> but maybe they</font><font color="#E5E5E5"> will do</font>

588
00:27:20,889 --> 00:27:25,508
it in one stage of another and in a<font color="#CCCCCC"> Joe</font>

589
00:27:23,859 --> 00:27:28,239
it<font color="#CCCCCC"> was not best to much decay it was</font>

590
00:27:25,509 --> 00:27:31,450
based on<font color="#CCCCCC"> some common resources</font><font color="#E5E5E5"> of the</font>

591
00:27:28,239 --> 00:27:34,440
agile<font color="#E5E5E5"> that was accessible but again</font>

592
00:27:31,450 --> 00:27:37,450
depends on<font color="#E5E5E5"> the settings</font><font color="#CCCCCC"> of continual</font><font color="#E5E5E5"> and</font>

593
00:27:34,440 --> 00:27:40,210
the stole injection modify other

594
00:27:37,450 --> 00:27:42,700
function code was reproduced<font color="#E5E5E5"> under the</font>

595
00:27:40,210 --> 00:27:44,379
certain<font color="#E5E5E5"> permissions in Amazon but not to</font>

596
00:27:42,700 --> 00:27:47,350
produced not in a<font color="#CCCCCC"> jewel and not in</font>

597
00:27:44,379 --> 00:27:49,480
<font color="#E5E5E5">Google again yet the</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> using still in</font>

598
00:27:47,350 --> 00:27:52,059
beta<font color="#E5E5E5"> and alpha version Amazon is the</font>

599
00:27:49,480 --> 00:27:54,639
<font color="#E5E5E5">most common and</font><font color="#CCCCCC"> most stable solution</font><font color="#E5E5E5"> and</font>

600
00:27:52,059 --> 00:27:57,309
the viral injection was<font color="#E5E5E5"> reproduced again</font>

601
00:27:54,639 --> 00:28:00,399
under the same<font color="#E5E5E5"> assumption in lambda but</font>

602
00:27:57,309 --> 00:28:02,559
it's not<font color="#CCCCCC"> worry about comparing AWS</font>

603
00:28:00,399 --> 00:28:05,018
Google<font color="#CCCCCC"> issue</font><font color="#E5E5E5"> it's about keeping in mind</font>

604
00:28:02,559 --> 00:28:07,149
it's<font color="#E5E5E5"> the fact</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> is using someone else</font>

605
00:28:05,019 --> 00:28:10,029
<font color="#E5E5E5">solution</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> will provide you the</font>

606
00:28:07,149 --> 00:28:12,008
server even<font color="#CCCCCC"> your Delta probably they</font>

607
00:28:10,029 --> 00:28:13,299
some damage could be done it should<font color="#CCCCCC"> be</font>

608
00:28:12,009 --> 00:28:16,989
you<font color="#CCCCCC"> should believe</font><font color="#E5E5E5"> it's</font><font color="#CCCCCC"> possible of your</font>

609
00:28:13,299 --> 00:28:20,070
code and<font color="#CCCCCC"> that's it</font>

610
00:28:16,989 --> 00:28:20,070
any questions

611
00:28:23,960 --> 00:28:34,919
do<font color="#E5E5E5"> any questions does anyone have any</font>

612
00:28:26,970 --> 00:28:37,410
questions<font color="#E5E5E5"> they would</font><font color="#CCCCCC"> like to</font><font color="#E5E5E5"> ask and</font>

613
00:28:34,919 --> 00:28:39,750
quick questions<font color="#E5E5E5"> you saw that you were</font>

614
00:28:37,410 --> 00:28:41,970
<font color="#E5E5E5">basically evil or some some arbitrary</font>

615
00:28:39,750 --> 00:28:43,740
stuff<font color="#CCCCCC"> do you know some other kind of</font>

616
00:28:41,970 --> 00:28:46,799
<font color="#E5E5E5">vulnerability so it could be actually</font>

617
00:28:43,740 --> 00:28:49,320
exploited<font color="#CCCCCC"> yes you know you can reproduce</font>

618
00:28:46,799 --> 00:28:51,690
SQL<font color="#CCCCCC"> congestion was</font><font color="#E5E5E5"> the most easy to</font>

619
00:28:49,320 --> 00:28:53,820
<font color="#E5E5E5">produce but if the original code was the</font>

620
00:28:51,690 --> 00:28:57,299
<font color="#E5E5E5">containing the SQL injection and there</font>

621
00:28:53,820 --> 00:29:02,010
is a path<font color="#CCCCCC"> data</font><font color="#E5E5E5"> flow from the input to</font>

622
00:28:57,299 --> 00:29:04,320
the database call and in this case which

623
00:29:02,010 --> 00:29:07,500
<font color="#E5E5E5">usually will be a several database with</font>

624
00:29:04,320 --> 00:29:09,240
a cloud<font color="#E5E5E5"> resources and if it will access</font>

625
00:29:07,500 --> 00:29:11,880
to a malicious<font color="#CCCCCC"> import it</font><font color="#E5E5E5"> will be</font>

626
00:29:09,240 --> 00:29:17,580
reproduced as well<font color="#E5E5E5"> after all code is</font>

627
00:29:11,880 --> 00:29:19,679
<font color="#E5E5E5">code and the same for the protection of</font>

628
00:29:17,580 --> 00:29:21,990
course<font color="#E5E5E5"> the same rules that are valid for</font>

629
00:29:19,679 --> 00:29:25,350
<font color="#E5E5E5">the scanning layer involving judgments</font>

630
00:29:21,990 --> 00:29:27,150
of tools<font color="#CCCCCC"> scan</font><font color="#E5E5E5"> tools that scan and find</font>

631
00:29:25,350 --> 00:29:30,139
vulnerabilities in regular code are

632
00:29:27,150 --> 00:29:36,780
still relevant in<font color="#E5E5E5"> the several</font><font color="#CCCCCC"> support</font>

633
00:29:30,140 --> 00:29:41,220
<font color="#E5E5E5">more questions</font><font color="#CCCCCC"> okay thank you very much</font>

634
00:29:36,780 --> 00:29:41,220
[Applause]

