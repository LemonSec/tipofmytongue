1
00:00:09,650 --> 00:00:15,820
hello everyone<font color="#E5E5E5"> welcome</font><font color="#CCCCCC"> to the</font>

2
00:00:13,760 --> 00:00:18,350
<font color="#CCCCCC">presentation thank you for attending I</font>

3
00:00:15,820 --> 00:00:20,750
just like to<font color="#E5E5E5"> start with two quick</font>

4
00:00:18,350 --> 00:00:23,840
questions please<font color="#CCCCCC"> the first</font><font color="#E5E5E5"> one is how</font>

5
00:00:20,750 --> 00:00:27,470
<font color="#CCCCCC">many</font><font color="#E5E5E5"> of you are actually using HTTP</font><font color="#CCCCCC"> two</font>

6
00:00:23,840 --> 00:00:29,630
in the day to day lives<font color="#E5E5E5"> okay and the</font>

7
00:00:27,470 --> 00:00:32,089
second one is<font color="#CCCCCC"> just so</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> know how</font><font color="#E5E5E5"> many of</font>

8
00:00:29,630 --> 00:00:34,730
<font color="#E5E5E5">you have</font><font color="#CCCCCC"> actually spent some time with</font>

9
00:00:32,090 --> 00:00:38,270
<font color="#CCCCCC">GRC and</font><font color="#E5E5E5"> got to implement</font><font color="#CCCCCC"> H</font><font color="#E5E5E5"> 2 in you know</font>

10
00:00:34,730 --> 00:00:43,250
some<font color="#E5E5E5"> kind of a context</font><font color="#CCCCCC"> okay cool</font><font color="#E5E5E5"> thank</font>

11
00:00:38,270 --> 00:00:45,230
you so my name is<font color="#E5E5E5"> Alistair I'm a senior</font>

12
00:00:43,250 --> 00:00:48,829
<font color="#CCCCCC">security researcher at Akamai</font><font color="#E5E5E5"> at the</font>

13
00:00:45,230 --> 00:00:50,718
threat research<font color="#E5E5E5"> team and actually I love</font>

14
00:00:48,829 --> 00:00:53,350
security big data and that's<font color="#CCCCCC"> a cool</font>

15
00:00:50,719 --> 00:00:55,579
combination<font color="#E5E5E5"> for for that job title and</font>

16
00:00:53,350 --> 00:00:58,160
single<font color="#E5E5E5"> Mott whiskey so feel free</font><font color="#CCCCCC"> to</font>

17
00:00:55,579 --> 00:00:59,930
approach me afterwards<font color="#E5E5E5"> what we're going</font>

18
00:00:58,160 --> 00:01:02,360
<font color="#E5E5E5">to do today is we're</font><font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> sift through</font>

19
00:00:59,930 --> 00:01:05,089
some of the<font color="#E5E5E5"> data</font><font color="#CCCCCC"> collection methods for</font>

20
00:01:02,360 --> 00:01:07,729
the research that<font color="#CCCCCC"> we've created and</font>

21
00:01:05,089 --> 00:01:10,250
display and I'll show you the research

22
00:01:07,729 --> 00:01:14,209
data corpus<font color="#E5E5E5"> and then we're going</font><font color="#CCCCCC"> to go</font>

23
00:01:10,250 --> 00:01:16,160
and go over<font color="#E5E5E5"> some definitions about basic</font>

24
00:01:14,209 --> 00:01:18,649
client fingerprinting passive

25
00:01:16,160 --> 00:01:21,259
transfigure printing and some efficient

26
00:01:18,649 --> 00:01:23,390
methods<font color="#E5E5E5"> and at the end we'll do some</font>

27
00:01:21,259 --> 00:01:27,470
common ground<font color="#E5E5E5"> about h2 and cover the</font>

28
00:01:23,390 --> 00:01:29,179
fingerprint<font color="#CCCCCC"> quick acknowledgment before</font>

29
00:01:27,470 --> 00:01:30,979
I start there were two other researchers

30
00:01:29,179 --> 00:01:34,970
<font color="#CCCCCC">working</font><font color="#E5E5E5"> on this project with me</font>

31
00:01:30,979 --> 00:01:36,110
<font color="#CCCCCC">it's</font><font color="#E5E5E5"> Ori several in our own Friedman so</font>

32
00:01:34,970 --> 00:01:38,450
I'll start with the data collection

33
00:01:36,110 --> 00:01:41,090
since<font color="#E5E5E5"> the data is actually the key</font>

34
00:01:38,450 --> 00:01:43,310
component of every<font color="#E5E5E5"> research and</font><font color="#CCCCCC"> really</font>

35
00:01:41,090 --> 00:01:46,069
connects to how broad is your visibility

36
00:01:43,310 --> 00:01:48,950
and<font color="#E5E5E5"> how</font><font color="#CCCCCC"> does</font><font color="#E5E5E5"> it really reflect things</font>

37
00:01:46,069 --> 00:01:50,690
going on in the real world and<font color="#E5E5E5"> so</font><font color="#CCCCCC"> our</font>

38
00:01:48,950 --> 00:01:53,209
data<font color="#E5E5E5"> for the research was collected over</font>

39
00:01:50,690 --> 00:01:54,860
Akamai's platform those of you do not

40
00:01:53,209 --> 00:01:58,420
<font color="#E5E5E5">know Akamai it's one of the leading city</font>

41
00:01:54,860 --> 00:02:01,429
ends today and it's<font color="#E5E5E5"> widely dispersed</font>

42
00:01:58,420 --> 00:02:03,739
<font color="#CCCCCC">we're about</font><font color="#E5E5E5"> one hop away from</font><font color="#CCCCCC"> 90% of all</font>

43
00:02:01,429 --> 00:02:07,099
<font color="#CCCCCC">Internet users and I've thrown ingestion</font>

44
00:02:03,739 --> 00:02:09,170
numbers so you get a feel of what was

45
00:02:07,099 --> 00:02:11,330
this research<font color="#E5E5E5"> base table latest</font>

46
00:02:09,169 --> 00:02:14,839
statistics<font color="#CCCCCC"> show that</font><font color="#E5E5E5"> we serve about</font><font color="#CCCCCC"> 15</font>

47
00:02:11,330 --> 00:02:16,430
to<font color="#CCCCCC"> 30% of all</font><font color="#E5E5E5"> web traffic and you can</font>

48
00:02:14,840 --> 00:02:18,769
get the magnitude<font color="#E5E5E5"> of 1 billion unique</font>

49
00:02:16,430 --> 00:02:21,200
IPS<font color="#E5E5E5"> quarterly and you know three</font>

50
00:02:18,769 --> 00:02:22,970
trillion hits per days and that's<font color="#E5E5E5"> of</font>

51
00:02:21,200 --> 00:02:27,649
course for HTTP<font color="#E5E5E5"> 1 and HTTP</font>

52
00:02:22,970 --> 00:02:30,470
traffic<font color="#CCCCCC"> altogether and at the time of</font>

53
00:02:27,650 --> 00:02:33,440
<font color="#CCCCCC">the research which was early 2017 this</font>

54
00:02:30,470 --> 00:02:35,480
<font color="#E5E5E5">was the state of you know the statistics</font>

55
00:02:33,440 --> 00:02:37,400
<font color="#CCCCCC">for h2 that we've seen it was</font>

56
00:02:35,480 --> 00:02:39,140
approximately<font color="#CCCCCC"> 10%</font><font color="#E5E5E5"> of the traffic</font><font color="#CCCCCC"> that</font>

57
00:02:37,400 --> 00:02:43,040
we've seen<font color="#E5E5E5"> and 1 billion requests per</font>

58
00:02:39,140 --> 00:02:45,799
days<font color="#CCCCCC"> we've seen approximately</font><font color="#E5E5E5"> 30 million</font>

59
00:02:43,040 --> 00:02:47,510
IP is using it and thousands of hosts

60
00:02:45,800 --> 00:02:50,780
<font color="#E5E5E5">and almost you know more than half</font><font color="#CCCCCC"> a</font>

61
00:02:47,510 --> 00:02:52,370
million user agents<font color="#E5E5E5"> using it but for</font>

62
00:02:50,780 --> 00:02:54,260
<font color="#E5E5E5">this presentation I wanted to bring some</font>

63
00:02:52,370 --> 00:02:58,250
<font color="#E5E5E5">more updated data it's been more than a</font>

64
00:02:54,260 --> 00:02:59,720
year<font color="#E5E5E5"> ever since and actually the data is</font>

65
00:02:58,250 --> 00:03:02,709
astounding it's been<font color="#E5E5E5"> more than 50</font>

66
00:02:59,720 --> 00:03:05,510
percent<font color="#E5E5E5"> increase</font><font color="#CCCCCC"> in overall traffic</font>

67
00:03:02,709 --> 00:03:09,290
<font color="#CCCCCC">twice the number of IPs and hosts using</font>

68
00:03:05,510 --> 00:03:11,690
<font color="#E5E5E5">it and I think it's really something to</font>

69
00:03:09,290 --> 00:03:15,350
be<font color="#CCCCCC"> glad about because it's now amazing</font>

70
00:03:11,690 --> 00:03:17,660
<font color="#E5E5E5">technology</font><font color="#CCCCCC"> though the</font><font color="#E5E5E5"> protocol</font><font color="#CCCCCC"> can be</font>

71
00:03:15,350 --> 00:03:20,239
<font color="#E5E5E5">transmitted both over clear text and</font>

72
00:03:17,660 --> 00:03:22,549
over an<font color="#E5E5E5"> encrypted Channel</font>

73
00:03:20,240 --> 00:03:25,490
most of the implementations actually go

74
00:03:22,550 --> 00:03:27,890
over TLS<font color="#CCCCCC"> so it would</font><font color="#E5E5E5"> be also interesting</font>

75
00:03:25,490 --> 00:03:30,830
to<font color="#CCCCCC"> observe the the increase in the usage</font>

76
00:03:27,890 --> 00:03:33,768
of HTTP<font color="#E5E5E5"> 2 and if we look at how much</font>

77
00:03:30,830 --> 00:03:36,470
HTTP 2 Akamai serves<font color="#E5E5E5"> out of the total</font>

78
00:03:33,769 --> 00:03:40,370
HTTP traffic then the number<font color="#E5E5E5"> of us you</font>

79
00:03:36,470 --> 00:03:42,680
know<font color="#E5E5E5"> jumps higher to</font><font color="#CCCCCC"> 30%</font><font color="#E5E5E5"> and I've</font>

80
00:03:40,370 --> 00:03:45,260
brought this graph which<font color="#CCCCCC"> shows the daily</font>

81
00:03:42,680 --> 00:03:47,750
new HTTP 2 connections<font color="#CCCCCC"> and you see this</font>

82
00:03:45,260 --> 00:03:50,239
ramp up when you know a<font color="#E5E5E5"> couple of our</font>

83
00:03:47,750 --> 00:03:53,120
big customers<font color="#E5E5E5"> decided to go to h2 and</font>

84
00:03:50,239 --> 00:03:56,750
you just see a<font color="#E5E5E5"> lot</font><font color="#CCCCCC"> of connections today</font>

85
00:03:53,120 --> 00:04:01,940
<font color="#E5E5E5">we are seeing about 120 million new HTTP</font>

86
00:03:56,750 --> 00:04:04,549
<font color="#CCCCCC">- connection on a daily basis so the</font>

87
00:04:01,940 --> 00:04:06,320
data<font color="#E5E5E5"> corpus for this research was 10</font>

88
00:04:04,549 --> 00:04:08,810
million HTTP<font color="#E5E5E5"> 2 connections which</font>

89
00:04:06,320 --> 00:04:13,160
included<font color="#E5E5E5"> about 40,000 different user</font>

90
00:04:08,810 --> 00:04:15,230
agents<font color="#CCCCCC"> and they covered about</font><font color="#E5E5E5"> hundreds</font>

91
00:04:13,160 --> 00:04:17,870
of HTTP<font color="#CCCCCC"> - implementations those would be</font>

92
00:04:15,230 --> 00:04:21,380
of major browsers or all kinds<font color="#E5E5E5"> of</font>

93
00:04:17,870 --> 00:04:23,180
automation libraries now from a security

94
00:04:21,380 --> 00:04:25,159
standpoint one of the things that we try

95
00:04:23,180 --> 00:04:27,770
<font color="#E5E5E5">to monitor in in Akamai's web attacks</font>

96
00:04:25,160 --> 00:04:31,130
over<font color="#CCCCCC"> the traffic</font><font color="#E5E5E5"> and surprisingly so</font>

97
00:04:27,770 --> 00:04:33,260
about HTTP<font color="#E5E5E5"> - even though we see an</font>

98
00:04:31,130 --> 00:04:35,030
increase in<font color="#E5E5E5"> traffic and and quite a lot</font>

99
00:04:33,260 --> 00:04:35,630
of<font color="#E5E5E5"> traffic</font><font color="#CCCCCC"> there aren't that much a</font><font color="#E5E5E5"> lot</font>

100
00:04:35,030 --> 00:04:38,630
<font color="#E5E5E5">of web</font>

101
00:04:35,630 --> 00:04:42,320
tax<font color="#E5E5E5"> and this arises</font><font color="#CCCCCC"> the question of why</font>

102
00:04:38,630 --> 00:04:43,810
why is that the case<font color="#E5E5E5"> well there are a</font>

103
00:04:42,320 --> 00:04:46,520
couple<font color="#E5E5E5"> of reasons for</font><font color="#CCCCCC"> that</font>

104
00:04:43,810 --> 00:04:48,890
first of<font color="#CCCCCC"> all most of the you</font><font color="#E5E5E5"> know tools</font>

105
00:04:46,520 --> 00:04:51,200
of the trade<font color="#E5E5E5"> tools on this list which</font>

106
00:04:48,890 --> 00:04:53,719
most of you<font color="#E5E5E5"> probably use on</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> some of</font>

107
00:04:51,200 --> 00:04:56,810
them on a<font color="#E5E5E5"> daily basis like burp you know</font>

108
00:04:53,720 --> 00:04:59,240
<font color="#CCCCCC">sap filter</font><font color="#E5E5E5"> sequin map</font><font color="#CCCCCC"> sentry and BA</font><font color="#E5E5E5"> hide</font>

109
00:04:56,810 --> 00:05:03,950
referring to credential abuse just<font color="#E5E5E5"> don't</font>

110
00:04:59,240 --> 00:05:07,160
<font color="#E5E5E5">support h2 they lack the support and why</font>

111
00:05:03,950 --> 00:05:08,930
and a couple<font color="#E5E5E5"> of reasons for that first</font>

112
00:05:07,160 --> 00:05:10,610
of<font color="#E5E5E5"> all there's not enough incentive most</font>

113
00:05:08,930 --> 00:05:15,020
of the web servers today support both

114
00:05:10,610 --> 00:05:16,880
HTTP<font color="#E5E5E5"> 1 dot X and HTTP 2 so why put</font><font color="#CCCCCC"> on</font>

115
00:05:15,020 --> 00:05:19,370
the effort<font color="#CCCCCC"> I mean they would get some</font>

116
00:05:16,880 --> 00:05:22,700
benefits on performance but<font color="#CCCCCC"> I don't</font>

117
00:05:19,370 --> 00:05:24,710
<font color="#E5E5E5">think that's one of</font><font color="#CCCCCC"> the major you know</font>

118
00:05:22,700 --> 00:05:27,229
key assets that attackers<font color="#CCCCCC"> are looking</font>

119
00:05:24,710 --> 00:05:28,760
for and the second<font color="#CCCCCC"> point is that</font><font color="#E5E5E5"> if you</font>

120
00:05:27,230 --> 00:05:31,010
would look for automation libraries for

121
00:05:28,760 --> 00:05:33,800
HTTP<font color="#E5E5E5"> 2 you would find</font><font color="#CCCCCC"> few in several</font>

122
00:05:31,010 --> 00:05:36,710
languages<font color="#E5E5E5"> they are mostly new and not</font>

123
00:05:33,800 --> 00:05:39,320
mature enough so just the cost of

124
00:05:36,710 --> 00:05:41,270
porting all of your existing<font color="#CCCCCC"> tools into</font>

125
00:05:39,320 --> 00:05:45,770
<font color="#CCCCCC">h2 just exceeds the gains for attackers</font>

126
00:05:41,270 --> 00:05:47,900
<font color="#E5E5E5">this is what I think at least and the</font>

127
00:05:45,770 --> 00:05:51,770
second thing to note is that<font color="#E5E5E5"> ever since</font>

128
00:05:47,900 --> 00:05:54,530
the the protocol<font color="#E5E5E5"> was published at 2015</font>

129
00:05:51,770 --> 00:05:56,799
<font color="#E5E5E5">there aren't really flaws that were</font>

130
00:05:54,530 --> 00:05:59,659
found within the<font color="#E5E5E5"> protocols</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> itself</font>

131
00:05:56,800 --> 00:06:02,840
<font color="#E5E5E5">other words a cool research done by</font>

132
00:05:59,660 --> 00:06:04,840
Imperva<font color="#E5E5E5"> researchers in 2016 which found</font>

133
00:06:02,840 --> 00:06:09,679
some flaws in<font color="#E5E5E5"> the ways that server</font>

134
00:06:04,840 --> 00:06:11,090
implement the protocol<font color="#E5E5E5"> especially</font><font color="#CCCCCC"> around</font>

135
00:06:09,680 --> 00:06:13,460
the areas of handling the header

136
00:06:11,090 --> 00:06:15,109
compression<font color="#E5E5E5"> and the stream management</font>

137
00:06:13,460 --> 00:06:18,349
but those are not<font color="#E5E5E5"> flaws</font><font color="#CCCCCC"> within the</font>

138
00:06:15,110 --> 00:06:19,850
<font color="#E5E5E5">protocol</font><font color="#CCCCCC"> itself</font><font color="#E5E5E5"> so there are no known</font>

139
00:06:18,350 --> 00:06:24,520
<font color="#E5E5E5">flaws today and that could be another</font>

140
00:06:19,850 --> 00:06:26,690
<font color="#E5E5E5">reason for the lack of attacks in h2 and</font>

141
00:06:24,520 --> 00:06:28,609
the last thing I'd like<font color="#CCCCCC"> to</font><font color="#E5E5E5"> cover before</font>

142
00:06:26,690 --> 00:06:30,290
<font color="#CCCCCC">we dive into</font><font color="#E5E5E5"> the fingerprint itself is</font>

143
00:06:28,610 --> 00:06:32,930
the notion of passive client

144
00:06:30,290 --> 00:06:35,180
fingerprinting and<font color="#CCCCCC"> first of all</font><font color="#E5E5E5"> as</font><font color="#CCCCCC"> the</font>

145
00:06:32,930 --> 00:06:36,980
name suggests<font color="#E5E5E5"> passive means that we do</font>

146
00:06:35,180 --> 00:06:39,110
<font color="#CCCCCC">not run or execute anything</font><font color="#E5E5E5"> on the</font>

147
00:06:36,980 --> 00:06:41,240
client side<font color="#CCCCCC"> we merely observe his</font>

148
00:06:39,110 --> 00:06:44,330
behavior and<font color="#E5E5E5"> from his behavior we try to</font>

149
00:06:41,240 --> 00:06:47,580
figure<font color="#E5E5E5"> out what kind of constant unique</font>

150
00:06:44,330 --> 00:06:51,840
behaviors we can we can derive<font color="#E5E5E5"> that</font>

151
00:06:47,580 --> 00:06:53,969
differentiating<font color="#E5E5E5"> from other clients</font>

152
00:06:51,840 --> 00:06:55,469
now<font color="#E5E5E5"> fingerprinting can be done not</font><font color="#CCCCCC"> only</font>

153
00:06:53,970 --> 00:06:57,240
on the application layer but in the

154
00:06:55,470 --> 00:06:59,069
other layers is the transport layer for

155
00:06:57,240 --> 00:07:01,710
TCP fingerprinting and<font color="#E5E5E5"> of course the</font>

156
00:06:59,069 --> 00:07:06,750
session there but combination would<font color="#E5E5E5"> be</font>

157
00:07:01,710 --> 00:07:08,370
<font color="#E5E5E5">best</font><font color="#CCCCCC"> another thing to note is that we're</font>

158
00:07:06,750 --> 00:07:11,460
not trying<font color="#CCCCCC"> to fingerprint end-users we</font>

159
00:07:08,370 --> 00:07:13,080
are merely trying<font color="#E5E5E5"> to fingerprint the way</font>

160
00:07:11,460 --> 00:07:15,120
that<font color="#E5E5E5"> software that client software</font>

161
00:07:13,080 --> 00:07:18,508
instances is implementing<font color="#E5E5E5"> the protocol</font>

162
00:07:15,120 --> 00:07:21,389
so<font color="#CCCCCC"> that just there would not be any</font>

163
00:07:18,509 --> 00:07:23,039
confusion there and we do that<font color="#E5E5E5"> to try</font>

164
00:07:21,389 --> 00:07:25,289
and<font color="#CCCCCC"> validate the client assertions I</font>

165
00:07:23,039 --> 00:07:27,180
have some use<font color="#CCCCCC"> cases later on but</font><font color="#E5E5E5"> if</font><font color="#CCCCCC"> the</font>

166
00:07:25,289 --> 00:07:28,889
client<font color="#E5E5E5"> puts on some assertions</font>

167
00:07:27,180 --> 00:07:36,629
fingerprinting could help us validate

168
00:07:28,889 --> 00:07:39,000
them or detect impersonators sorry so

169
00:07:36,629 --> 00:07:41,520
for the<font color="#CCCCCC"> h2 passive</font><font color="#E5E5E5"> client fingerprinting</font>

170
00:07:39,000 --> 00:07:43,590
we actually observe<font color="#E5E5E5"> the clients behavior</font>

171
00:07:41,520 --> 00:07:46,139
while<font color="#CCCCCC"> establishing an HTTP 2 connection</font>

172
00:07:43,590 --> 00:07:48,750
we would look exactly<font color="#E5E5E5"> at how the client</font>

173
00:07:46,139 --> 00:07:52,889
<font color="#E5E5E5">would</font><font color="#CCCCCC"> - is a flow management what are</font>

174
00:07:48,750 --> 00:07:54,779
the default values<font color="#CCCCCC"> we would look</font><font color="#E5E5E5"> at how</font>

175
00:07:52,889 --> 00:07:57,719
<font color="#E5E5E5">does</font><font color="#CCCCCC"> it handle the headers in</font><font color="#E5E5E5"> terms of</font>

176
00:07:54,779 --> 00:08:00,300
order<font color="#E5E5E5"> the connection settings and stuff</font>

177
00:07:57,719 --> 00:08:04,080
like that I'll go<font color="#CCCCCC"> into detail</font><font color="#E5E5E5"> just</font><font color="#CCCCCC"> in a</font>

178
00:08:00,300 --> 00:08:07,379
<font color="#E5E5E5">few slides now like any other protocol</font>

179
00:08:04,080 --> 00:08:08,849
<font color="#E5E5E5">what I've said up to now is that should</font>

180
00:08:07,379 --> 00:08:12,479
<font color="#E5E5E5">you choose</font><font color="#CCCCCC"> to use</font><font color="#E5E5E5"> it there are some</font>

181
00:08:08,849 --> 00:08:13,979
<font color="#E5E5E5">implications</font><font color="#CCCCCC"> you by default if you</font><font color="#E5E5E5"> try</font>

182
00:08:12,479 --> 00:08:15,389
to use that<font color="#E5E5E5"> you'll be exposing some of</font>

183
00:08:13,979 --> 00:08:18,029
<font color="#CCCCCC">the</font><font color="#E5E5E5"> characteristics of</font><font color="#CCCCCC"> your software</font>

184
00:08:15,389 --> 00:08:20,129
clients and some<font color="#E5E5E5"> of you might not be</font>

185
00:08:18,029 --> 00:08:22,050
<font color="#E5E5E5">interested in doing that</font><font color="#CCCCCC"> so there</font><font color="#E5E5E5"> comes</font>

186
00:08:20,129 --> 00:08:26,129
the question<font color="#E5E5E5"> of how do we obfuscate</font>

187
00:08:22,050 --> 00:08:27,810
ourselves in light of that<font color="#CCCCCC"> and so first</font>

188
00:08:26,129 --> 00:08:28,770
<font color="#CCCCCC">of all anonymity networks are not a good</font>

189
00:08:27,810 --> 00:08:32,820
<font color="#CCCCCC">solution for</font><font color="#E5E5E5"> that</font>

190
00:08:28,770 --> 00:08:34,319
<font color="#CCCCCC">Torin I to</font><font color="#E5E5E5"> pee or do not support h2 this</font>

191
00:08:32,820 --> 00:08:36,149
<font color="#E5E5E5">is an interesting topic you can look</font>

192
00:08:34,320 --> 00:08:38,849
look it<font color="#CCCCCC"> up there are two bug trackers</font>

193
00:08:36,149 --> 00:08:42,059
I'm assuming they would soon would

194
00:08:38,849 --> 00:08:45,860
support h2 and each for its own<font color="#CCCCCC"> reasons</font>

195
00:08:42,059 --> 00:08:48,420
and<font color="#E5E5E5"> currently it's</font><font color="#CCCCCC"> not a good solution</font>

196
00:08:45,860 --> 00:08:49,980
but any<font color="#E5E5E5"> other possible</font><font color="#CCCCCC"> solutions are</font>

197
00:08:48,420 --> 00:08:52,050
<font color="#E5E5E5">first of all develop your own h2</font>

198
00:08:49,980 --> 00:08:54,329
implementation this is not as hard as<font color="#E5E5E5"> it</font>

199
00:08:52,050 --> 00:08:55,620
<font color="#CCCCCC">sound</font><font color="#E5E5E5"> but when you are doing that make</font>

200
00:08:54,329 --> 00:08:58,589
<font color="#CCCCCC">sure that</font><font color="#E5E5E5"> you are randomizing your</font>

201
00:08:55,620 --> 00:09:00,180
behaviors because if I observe<font color="#CCCCCC"> you as</font><font color="#E5E5E5"> a</font>

202
00:08:58,589 --> 00:09:01,500
<font color="#CCCCCC">client</font><font color="#E5E5E5"> and I don't see any consistent</font>

203
00:09:00,180 --> 00:09:04,010
behaviors it's hard for me

204
00:09:01,500 --> 00:09:08,480
to distinguish you from other clients

205
00:09:04,010 --> 00:09:11,400
<font color="#E5E5E5">the second solution which is which is</font>

206
00:09:08,480 --> 00:09:14,520
requires less effort but still it's a it

207
00:09:11,400 --> 00:09:17,459
would come up<font color="#E5E5E5"> on a fingerprinting effort</font>

208
00:09:14,520 --> 00:09:20,100
was the usage of<font color="#E5E5E5"> a proxy</font><font color="#CCCCCC"> yeah there are</font>

209
00:09:17,460 --> 00:09:24,210
two proxies today MIT and proxy and H a

210
00:09:20,100 --> 00:09:26,700
proxy<font color="#CCCCCC"> that support</font><font color="#E5E5E5"> h2 and there's a nice</font>

211
00:09:24,210 --> 00:09:29,520
node<font color="#CCCCCC"> library called node HTTP</font><font color="#E5E5E5"> to proxy</font>

212
00:09:26,700 --> 00:09:31,500
<font color="#E5E5E5">that could be used for that of course if</font>

213
00:09:29,520 --> 00:09:32,939
<font color="#CCCCCC">you're</font><font color="#E5E5E5"> using some kind of open source</font>

214
00:09:31,500 --> 00:09:37,350
<font color="#CCCCCC">software you can try and modify and</font>

215
00:09:32,940 --> 00:09:39,180
<font color="#E5E5E5">recompile it so let's set some common</font>

216
00:09:37,350 --> 00:09:41,010
grounds about h2 before we go into the

217
00:09:39,180 --> 00:09:46,620
fingerprint so we will<font color="#E5E5E5"> all be on the</font>

218
00:09:41,010 --> 00:09:48,540
<font color="#CCCCCC">same terms so HTTP 2 is based on a</font>

219
00:09:46,620 --> 00:09:51,810
protocol<font color="#CCCCCC"> that was developed</font><font color="#E5E5E5"> by Google in</font>

220
00:09:48,540 --> 00:09:54,420
2012<font color="#E5E5E5"> called the speedy and it was</font>

221
00:09:51,810 --> 00:09:56,550
formally published<font color="#E5E5E5"> during 2015 it was</font>

222
00:09:54,420 --> 00:09:58,949
<font color="#E5E5E5">published in</font><font color="#CCCCCC"> two</font><font color="#E5E5E5"> rfcs the first of them</font>

223
00:09:56,550 --> 00:10:01,530
actually detailed the protocol and<font color="#E5E5E5"> the</font>

224
00:09:58,950 --> 00:10:03,870
second one was related<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the header</font>

225
00:10:01,530 --> 00:10:05,550
compression mechanisms<font color="#CCCCCC"> I think that if</font>

226
00:10:03,870 --> 00:10:07,380
you look<font color="#E5E5E5"> at the internet ecosystem today</font>

227
00:10:05,550 --> 00:10:09,660
all of<font color="#E5E5E5"> the major players which</font><font color="#CCCCCC"> is major</font>

228
00:10:07,380 --> 00:10:13,320
client version major server versions and

229
00:10:09,660 --> 00:10:16,949
all the major<font color="#CCCCCC"> CDNs support h2 which is a</font>

230
00:10:13,320 --> 00:10:19,650
good step<font color="#E5E5E5"> going forward HTTP</font><font color="#CCCCCC"> 2 is a</font>

231
00:10:16,950 --> 00:10:21,120
binary<font color="#E5E5E5"> protocol</font><font color="#CCCCCC"> it's not an text based</font>

232
00:10:19,650 --> 00:10:26,579
protocol<font color="#E5E5E5"> as you are used to seeing in</font>

233
00:10:21,120 --> 00:10:27,360
HTTP 1<font color="#E5E5E5"> and</font><font color="#CCCCCC"> so some example</font><font color="#E5E5E5"> of that in a</font>

234
00:10:26,580 --> 00:10:29,790
few<font color="#CCCCCC"> slides</font>

235
00:10:27,360 --> 00:10:31,800
it could be transmitted<font color="#E5E5E5"> either over</font>

236
00:10:29,790 --> 00:10:35,579
clear text or over an encrypted<font color="#CCCCCC"> channel</font>

237
00:10:31,800 --> 00:10:38,520
and the main<font color="#CCCCCC"> motivation behind it is</font>

238
00:10:35,580 --> 00:10:44,790
trying to address some<font color="#E5E5E5"> key challenges</font>

239
00:10:38,520 --> 00:10:49,050
mainly around performance in HTTP 1.1 so

240
00:10:44,790 --> 00:10:50,819
the challenges in HTTP 1<font color="#E5E5E5"> essentially the</font>

241
00:10:49,050 --> 00:10:52,680
first<font color="#E5E5E5"> one is concurrency</font><font color="#CCCCCC"> if you want to</font>

242
00:10:50,820 --> 00:10:54,600
achieve concurrency<font color="#CCCCCC"> and this is what the</font>

243
00:10:52,680 --> 00:10:57,680
browser's<font color="#CCCCCC"> are doing today</font><font color="#E5E5E5"> and HTTP 1</font>

244
00:10:54,600 --> 00:10:59,730
directs you actually open<font color="#CCCCCC"> multiple TCP</font>

245
00:10:57,680 --> 00:11:02,370
connections and<font color="#E5E5E5"> that's not a good</font>

246
00:10:59,730 --> 00:11:03,870
practice<font color="#E5E5E5"> it's</font><font color="#CCCCCC"> not really efficient</font><font color="#E5E5E5"> HTTP</font>

247
00:11:02,370 --> 00:11:05,430
connection has an overhead the

248
00:11:03,870 --> 00:11:07,430
performance overhead<font color="#E5E5E5"> it's called a</font>

249
00:11:05,430 --> 00:11:10,050
mechanism<font color="#CCCCCC"> called slow start where the</font>

250
00:11:07,430 --> 00:11:12,209
sending of packets<font color="#CCCCCC"> would start slow and</font>

251
00:11:10,050 --> 00:11:13,250
increase gradually<font color="#E5E5E5"> until it encounters</font>

252
00:11:12,210 --> 00:11:15,470
the<font color="#E5E5E5"> last</font>

253
00:11:13,250 --> 00:11:17,529
and if you do that<font color="#E5E5E5"> over multiple TCP</font>

254
00:11:15,470 --> 00:11:19,730
<font color="#E5E5E5">connections which keep open and</font><font color="#CCCCCC"> closed</font>

255
00:11:17,529 --> 00:11:22,220
keep opening and<font color="#E5E5E5"> closing that's not a</font>

256
00:11:19,730 --> 00:11:24,860
very efficient<font color="#E5E5E5"> way of doing things</font>

257
00:11:22,220 --> 00:11:28,100
version 1.1 of<font color="#CCCCCC"> the protocol</font><font color="#E5E5E5"> actually</font><font color="#CCCCCC"> did</font>

258
00:11:24,860 --> 00:11:29,629
<font color="#E5E5E5">introduce</font><font color="#CCCCCC"> notion of pipelining where on</font>

259
00:11:28,100 --> 00:11:32,600
the<font color="#E5E5E5"> scientist</font><font color="#CCCCCC"> EP connection you can try</font>

260
00:11:29,629 --> 00:11:34,730
and resolve<font color="#E5E5E5"> several requests</font><font color="#CCCCCC"> but it was</font>

261
00:11:32,600 --> 00:11:36,769
<font color="#E5E5E5">not efficient enough and it suffered</font>

262
00:11:34,730 --> 00:11:38,329
from<font color="#E5E5E5"> a phenomena called</font><font color="#CCCCCC"> the head of line</font>

263
00:11:36,769 --> 00:11:40,879
blocking where a big<font color="#E5E5E5"> request would block</font>

264
00:11:38,329 --> 00:11:44,750
all<font color="#CCCCCC"> the hours in the line</font><font color="#E5E5E5"> so it was not</font>

265
00:11:40,879 --> 00:11:46,699
a good<font color="#CCCCCC"> combination</font><font color="#E5E5E5"> now I imagine most of</font>

266
00:11:44,750 --> 00:11:48,410
<font color="#CCCCCC">you have seen an HTTP request somewhere</font>

267
00:11:46,699 --> 00:11:50,209
<font color="#E5E5E5">among your career and you have the</font>

268
00:11:48,410 --> 00:11:52,399
header section of<font color="#E5E5E5"> that request and you</font>

269
00:11:50,209 --> 00:11:55,099
would<font color="#E5E5E5"> notice</font><font color="#CCCCCC"> that first</font><font color="#E5E5E5"> headers are very</font>

270
00:11:52,399 --> 00:11:56,750
verbose<font color="#E5E5E5"> and they are repetitive they are</font>

271
00:11:55,100 --> 00:11:59,149
keep going back and<font color="#CCCCCC"> forth for each</font>

272
00:11:56,750 --> 00:12:01,339
<font color="#E5E5E5">request and each response sometimes</font><font color="#CCCCCC"> with</font>

273
00:11:59,149 --> 00:12:04,220
constant values and<font color="#E5E5E5"> that's ideal for</font>

274
00:12:01,339 --> 00:12:06,019
<font color="#E5E5E5">compression but first versions of the</font>

275
00:12:04,220 --> 00:12:08,620
protocol did not introduce<font color="#E5E5E5"> any notion of</font>

276
00:12:06,019 --> 00:12:12,490
compression so that<font color="#CCCCCC"> was the second issue</font>

277
00:12:08,620 --> 00:12:16,009
now last one is the concept<font color="#E5E5E5"> of a passive</font>

278
00:12:12,490 --> 00:12:18,500
passive server<font color="#E5E5E5"> in HTTP one directs</font>

279
00:12:16,009 --> 00:12:20,420
unless the client requested<font color="#E5E5E5"> a resource</font>

280
00:12:18,500 --> 00:12:22,309
from<font color="#E5E5E5"> the server the</font><font color="#CCCCCC"> server</font><font color="#E5E5E5"> could not</font>

281
00:12:20,420 --> 00:12:25,160
initiate a response back<font color="#CCCCCC"> to the client</font>

282
00:12:22,309 --> 00:12:27,139
<font color="#E5E5E5">and you might ask</font><font color="#CCCCCC"> yourself why would I</font>

283
00:12:25,160 --> 00:12:29,870
want the server start to proactively

284
00:12:27,139 --> 00:12:32,439
push stuff to me<font color="#E5E5E5"> and the reason</font><font color="#CCCCCC"> is that</font>

285
00:12:29,870 --> 00:12:36,589
<font color="#E5E5E5">there are situation where the server can</font>

286
00:12:32,439 --> 00:12:38,480
estimate<font color="#E5E5E5"> was high with high</font><font color="#CCCCCC"> probability</font>

287
00:12:36,589 --> 00:12:41,209
that<font color="#CCCCCC"> the</font><font color="#E5E5E5"> that the client is actually</font>

288
00:12:38,480 --> 00:12:43,790
<font color="#E5E5E5">going to request the resource for</font>

289
00:12:41,209 --> 00:12:46,609
example<font color="#CCCCCC"> if I'm downloading the HTML file</font>

290
00:12:43,790 --> 00:12:48,410
of a<font color="#E5E5E5"> web</font><font color="#CCCCCC"> page and I'm rendering</font><font color="#E5E5E5"> it it</font>

291
00:12:46,610 --> 00:12:50,360
would be<font color="#E5E5E5"> very</font><font color="#CCCCCC"> likely that</font><font color="#E5E5E5"> my next</font>

292
00:12:48,410 --> 00:12:51,949
<font color="#E5E5E5">request would</font><font color="#CCCCCC"> be for the contents that</font>

293
00:12:50,360 --> 00:12:54,559
for a<font color="#E5E5E5"> static content</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> things like</font>

294
00:12:51,949 --> 00:12:56,719
<font color="#E5E5E5">images the JavaScript and the</font><font color="#CCCCCC"> CSS so why</font>

295
00:12:54,559 --> 00:12:59,149
wait for<font color="#E5E5E5"> the client to download the HTML</font>

296
00:12:56,720 --> 00:13:01,550
<font color="#CCCCCC">and then start saying</font><font color="#E5E5E5"> in the request if</font>

297
00:12:59,149 --> 00:13:04,490
we can just<font color="#E5E5E5"> you know ahead of time</font><font color="#CCCCCC"> send</font>

298
00:13:01,550 --> 00:13:10,579
them and with high probability<font color="#E5E5E5"> we would</font>

299
00:13:04,490 --> 00:13:13,579
need them<font color="#E5E5E5"> so now enters the HTTP</font><font color="#CCCCCC"> - for</font>

300
00:13:10,579 --> 00:13:15,709
the concurrency problem<font color="#E5E5E5"> HTTP - is using</font>

301
00:13:13,579 --> 00:13:18,019
a single TCP<font color="#E5E5E5"> connection everything is</font>

302
00:13:15,709 --> 00:13:20,660
done in<font color="#E5E5E5"> a single constant TCP connection</font>

303
00:13:18,019 --> 00:13:24,679
and multiple requests and responses are

304
00:13:20,660 --> 00:13:26,329
interleaved on that on<font color="#CCCCCC"> that TCP</font>

305
00:13:24,679 --> 00:13:28,949
<font color="#E5E5E5">connection</font>

306
00:13:26,330 --> 00:13:32,370
header compression<font color="#E5E5E5"> was addressed with</font>

307
00:13:28,950 --> 00:13:35,850
the<font color="#CCCCCC"> h-back RFC which was</font><font color="#E5E5E5"> released along</font>

308
00:13:32,370 --> 00:13:39,560
with the<font color="#E5E5E5"> protocol RFC which allows</font>

309
00:13:35,850 --> 00:13:42,270
<font color="#CCCCCC">efficient</font><font color="#E5E5E5"> coding of those headers and</font>

310
00:13:39,560 --> 00:13:43,859
last<font color="#E5E5E5"> but not least the server push was</font>

311
00:13:42,270 --> 00:13:45,689
introduced and<font color="#E5E5E5"> now the server can</font>

312
00:13:43,860 --> 00:13:47,220
actually push ahead<font color="#CCCCCC"> of time things for</font>

313
00:13:45,690 --> 00:13:49,830
the client

314
00:13:47,220 --> 00:13:52,170
he actually<font color="#E5E5E5"> creates pseudo requests by</font>

315
00:13:49,830 --> 00:13:54,360
<font color="#E5E5E5">the client and just sends things</font><font color="#CCCCCC"> to the</font>

316
00:13:52,170 --> 00:13:55,860
client<font color="#E5E5E5"> now if any of you does not feel</font>

317
00:13:54,360 --> 00:13:58,200
comfortable<font color="#E5E5E5"> with</font><font color="#CCCCCC"> this notion that</font><font color="#E5E5E5"> the</font>

318
00:13:55,860 --> 00:14:00,180
server is<font color="#CCCCCC"> just pushing</font><font color="#E5E5E5"> stuff to a client</font>

319
00:13:58,200 --> 00:14:03,030
that<font color="#CCCCCC"> you</font><font color="#E5E5E5"> haven't requested there's a</font>

320
00:14:00,180 --> 00:14:04,949
<font color="#E5E5E5">mechanism in the protocol to</font><font color="#CCCCCC"> opt</font><font color="#E5E5E5"> out by</font>

321
00:14:03,030 --> 00:14:07,199
<font color="#E5E5E5">default it's</font><font color="#CCCCCC"> opt-in but</font><font color="#E5E5E5"> within the</font>

322
00:14:04,950 --> 00:14:10,980
establishment<font color="#E5E5E5"> of the connection the</font>

323
00:14:07,200 --> 00:14:12,660
client can opt<font color="#E5E5E5"> out of it so these are</font>

324
00:14:10,980 --> 00:14:14,580
the key<font color="#CCCCCC"> elements of the</font><font color="#E5E5E5"> protocol</font><font color="#CCCCCC"> that</font>

325
00:14:12,660 --> 00:14:17,250
and the first two is the the ones that

326
00:14:14,580 --> 00:14:20,010
we need<font color="#E5E5E5"> to understand best frame is the</font>

327
00:14:17,250 --> 00:14:22,470
small smallest unit of<font color="#CCCCCC"> communication</font>

328
00:14:20,010 --> 00:14:26,280
<font color="#CCCCCC">there are ten</font><font color="#E5E5E5"> types of frames head of</font>

329
00:14:22,470 --> 00:14:28,950
frames data frames<font color="#E5E5E5"> priority frames</font><font color="#CCCCCC"> pink</font>

330
00:14:26,280 --> 00:14:31,170
frame and those are the smallest<font color="#CCCCCC"> unit of</font>

331
00:14:28,950 --> 00:14:32,970
communications now since we have<font color="#E5E5E5"> a</font>

332
00:14:31,170 --> 00:14:35,339
<font color="#E5E5E5">single TCP connection and multiple</font>

333
00:14:32,970 --> 00:14:39,030
requests<font color="#E5E5E5"> and responses and and and and</font>

334
00:14:35,340 --> 00:14:40,890
<font color="#E5E5E5">you know some flow control</font><font color="#CCCCCC"> pack frames</font>

335
00:14:39,030 --> 00:14:42,480
going<font color="#E5E5E5"> back and forth there's had to be</font>

336
00:14:40,890 --> 00:14:45,090
some<font color="#E5E5E5"> kind of a system</font><font color="#CCCCCC"> to organize</font><font color="#E5E5E5"> that</font>

337
00:14:42,480 --> 00:14:47,280
and that is<font color="#CCCCCC"> Trine's streams you can</font>

338
00:14:45,090 --> 00:14:50,460
think<font color="#E5E5E5"> of them as logical conversation as</font>

339
00:14:47,280 --> 00:14:53,910
channels<font color="#E5E5E5"> in which there</font><font color="#CCCCCC"> is a b</font><font color="#E5E5E5"> direction</font>

340
00:14:50,460 --> 00:14:57,740
<font color="#E5E5E5">of flow frames each stream is allocated</font>

341
00:14:53,910 --> 00:15:00,959
with<font color="#CCCCCC"> a stream ID</font><font color="#E5E5E5"> this is like you know</font>

342
00:14:57,740 --> 00:15:03,990
<font color="#E5E5E5">TCP connection and streams are numbered</font>

343
00:15:00,960 --> 00:15:06,570
going from<font color="#E5E5E5"> 0 and up where the stream 0</font>

344
00:15:03,990 --> 00:15:08,730
is a reserved stream for settings for

345
00:15:06,570 --> 00:15:10,590
the connection level setting things<font color="#E5E5E5"> that</font>

346
00:15:08,730 --> 00:15:13,020
<font color="#E5E5E5">control the TCP connection the window</font>

347
00:15:10,590 --> 00:15:15,090
size the settings<font color="#E5E5E5"> the the maximum</font>

348
00:15:13,020 --> 00:15:17,069
concurrent streams that<font color="#E5E5E5"> each endpoint is</font>

349
00:15:15,090 --> 00:15:19,980
willing to<font color="#E5E5E5"> handle at any given moment</font>

350
00:15:17,070 --> 00:15:24,120
<font color="#CCCCCC">and from one up we start building up the</font>

351
00:15:19,980 --> 00:15:26,610
<font color="#E5E5E5">streams</font><font color="#CCCCCC"> where according to the RFC oddly</font>

352
00:15:24,120 --> 00:15:27,990
numbered streams are represent streams

353
00:15:26,610 --> 00:15:30,770
which were<font color="#E5E5E5"> generally</font><font color="#CCCCCC"> which were</font>

354
00:15:27,990 --> 00:15:33,540
initiated<font color="#CCCCCC"> by the client and the</font>

355
00:15:30,770 --> 00:15:35,850
<font color="#CCCCCC">even-numbered streams are streams that</font>

356
00:15:33,540 --> 00:15:36,599
were conversation that were initiated<font color="#CCCCCC"> by</font>

357
00:15:35,850 --> 00:15:39,500
<font color="#CCCCCC">the server</font>

358
00:15:36,600 --> 00:15:39,500
meaning server pushes

359
00:15:39,810 --> 00:15:44,800
so if we look for<font color="#E5E5E5"> example</font><font color="#CCCCCC"> at stream 93</font>

360
00:15:42,850 --> 00:15:48,070
<font color="#E5E5E5">we would see friends</font><font color="#CCCCCC"> going back and</font>

361
00:15:44,800 --> 00:15:51,099
forth<font color="#E5E5E5"> each frame would have a notation</font>

362
00:15:48,070 --> 00:15:53,380
<font color="#E5E5E5">it would it would include metadata as</font>

363
00:15:51,100 --> 00:15:56,170
for the<font color="#E5E5E5"> actual stream which</font><font color="#CCCCCC"> it is it's</font>

364
00:15:53,380 --> 00:15:58,000
relevant for<font color="#E5E5E5"> and that way the recipient</font>

365
00:15:56,170 --> 00:16:00,490
<font color="#E5E5E5">can actually go and take all those frame</font>

366
00:15:58,000 --> 00:16:02,440
is getting you<font color="#E5E5E5"> know at once and sort</font>

367
00:16:00,490 --> 00:16:05,800
them<font color="#E5E5E5"> out</font><font color="#CCCCCC"> and then</font><font color="#E5E5E5"> forward</font><font color="#CCCCCC"> the</font>

368
00:16:02,440 --> 00:16:08,199
<font color="#CCCCCC">information to the application the last</font>

369
00:16:05,800 --> 00:16:11,920
entity that which is quite trivial is

370
00:16:08,199 --> 00:16:13,870
message<font color="#CCCCCC"> if you think</font><font color="#E5E5E5"> about HTTP 1.1 our</font>

371
00:16:11,920 --> 00:16:15,880
request<font color="#E5E5E5"> could have two sections</font><font color="#CCCCCC"> it could</font>

372
00:16:13,870 --> 00:16:18,220
have a header section and a body<font color="#E5E5E5"> the</font>

373
00:16:15,880 --> 00:16:21,040
same as a response<font color="#E5E5E5"> and those two would</font>

374
00:16:18,220 --> 00:16:22,870
<font color="#E5E5E5">be the the request</font><font color="#CCCCCC"> or the response</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> we</font>

375
00:16:21,040 --> 00:16:24,699
have the same situation HTTP<font color="#CCCCCC"> two we can</font>

376
00:16:22,870 --> 00:16:27,009
have a headers frame and a data frame

377
00:16:24,699 --> 00:16:28,750
<font color="#E5E5E5">and both would be mapped logically to a</font>

378
00:16:27,009 --> 00:16:33,579
message that could<font color="#E5E5E5"> be either a request</font>

379
00:16:28,750 --> 00:16:36,040
<font color="#E5E5E5">or response so so that's how things</font>

380
00:16:33,579 --> 00:16:37,839
actually<font color="#CCCCCC"> look we get all</font><font color="#E5E5E5"> kinds of frames</font>

381
00:16:36,040 --> 00:16:40,060
from all kinds of stream all together<font color="#E5E5E5"> on</font>

382
00:16:37,839 --> 00:16:42,670
a same single<font color="#E5E5E5"> TCP connection no more</font>

383
00:16:40,060 --> 00:16:43,119
multiple<font color="#CCCCCC"> TCP connections</font><font color="#E5E5E5"> and each</font><font color="#CCCCCC"> end</font>

384
00:16:42,670 --> 00:16:45,719
<font color="#CCCCCC">point</font>

385
00:16:43,120 --> 00:16:49,420
receiving<font color="#CCCCCC"> end can sort</font><font color="#E5E5E5"> them out and we</font>

386
00:16:45,720 --> 00:16:52,360
bring<font color="#E5E5E5"> them to the application now the</font>

387
00:16:49,420 --> 00:16:54,610
RFC defines<font color="#CCCCCC"> 10 types of frames</font><font color="#E5E5E5"> mostly</font>

388
00:16:52,360 --> 00:16:56,380
the names are<font color="#E5E5E5"> self-explanatory but we</font>

389
00:16:54,610 --> 00:16:59,290
can divide them into<font color="#E5E5E5"> three logical group</font>

390
00:16:56,380 --> 00:17:00,760
first of all are the frames<font color="#CCCCCC"> that deal</font>

391
00:16:59,290 --> 00:17:03,360
with the<font color="#E5E5E5"> actual messaging we have a</font>

392
00:17:00,760 --> 00:17:06,099
headers frame and a data frame<font color="#E5E5E5"> and</font>

393
00:17:03,360 --> 00:17:08,409
<font color="#E5E5E5">continuation frame for that and the</font>

394
00:17:06,099 --> 00:17:11,708
second group<font color="#E5E5E5"> is controlling the flow of</font>

395
00:17:08,409 --> 00:17:14,169
the connection<font color="#E5E5E5"> things like the</font><font color="#CCCCCC"> windows</font>

396
00:17:11,709 --> 00:17:16,329
<font color="#CCCCCC">update</font><font color="#E5E5E5"> just as we have</font><font color="#CCCCCC"> in TCP the</font>

397
00:17:14,169 --> 00:17:19,780
settings frame which actually allows

398
00:17:16,329 --> 00:17:22,720
each<font color="#E5E5E5"> endpoint</font><font color="#CCCCCC"> to convey parameters such</font>

399
00:17:19,780 --> 00:17:25,839
as<font color="#E5E5E5"> what</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> the maximum frame size it's</font>

400
00:17:22,720 --> 00:17:27,610
willing to accept or what is the maximum

401
00:17:25,839 --> 00:17:29,799
header table<font color="#CCCCCC"> list or things like that</font>

402
00:17:27,609 --> 00:17:31,479
<font color="#E5E5E5">and the last group is dealing</font><font color="#CCCCCC"> with</font>

403
00:17:29,799 --> 00:17:33,340
stream management when we have all those

404
00:17:31,480 --> 00:17:35,500
streams which are<font color="#CCCCCC"> getting opened and</font>

405
00:17:33,340 --> 00:17:40,899
sometimes closed<font color="#E5E5E5"> you need some kind of</font>

406
00:17:35,500 --> 00:17:43,150
flow<font color="#CCCCCC"> control mechanism for</font><font color="#E5E5E5"> that now I've</font>

407
00:17:40,900 --> 00:17:46,299
<font color="#CCCCCC">mentioned</font><font color="#E5E5E5"> that the</font><font color="#CCCCCC"> HTTP 2 is a binary</font>

408
00:17:43,150 --> 00:17:48,340
<font color="#E5E5E5">protocol it's no longer no longer</font><font color="#CCCCCC"> going</font>

409
00:17:46,299 --> 00:17:49,629
over the wire<font color="#CCCCCC"> just as ascii text</font>

410
00:17:48,340 --> 00:17:51,340
messaging

411
00:17:49,630 --> 00:17:53,919
and for<font color="#E5E5E5"> those</font><font color="#CCCCCC"> of you did not work</font><font color="#E5E5E5"> with</font>

412
00:17:51,340 --> 00:17:57,909
binary protocols this is a bit of a

413
00:17:53,919 --> 00:18:00,730
<font color="#CCCCCC">taste</font><font color="#E5E5E5"> each frame has</font><font color="#CCCCCC"> a predetermined</font>

414
00:17:57,910 --> 00:18:03,190
<font color="#CCCCCC">structure where the first 24 bits</font><font color="#E5E5E5"> would</font>

415
00:18:00,730 --> 00:18:06,549
denote the length<font color="#E5E5E5"> of the payload then</font>

416
00:18:03,190 --> 00:18:09,309
the next 8<font color="#CCCCCC"> bits would be declaring the</font>

417
00:18:06,549 --> 00:18:12,400
type<font color="#CCCCCC"> of this frame the we have another</font>

418
00:18:09,309 --> 00:18:14,620
eight bits reserved for the flags one

419
00:18:12,400 --> 00:18:16,870
resolved bit which was not allocated

420
00:18:14,620 --> 00:18:19,090
with any meaning semantics in the<font color="#E5E5E5"> RFC</font>

421
00:18:16,870 --> 00:18:20,590
and the stream<font color="#E5E5E5"> identifier as</font><font color="#CCCCCC"> I've said</font>

422
00:18:19,090 --> 00:18:23,590
<font color="#E5E5E5">we have 31 bits for the stream</font>

423
00:18:20,590 --> 00:18:26,830
identifier<font color="#E5E5E5"> that's a huge space next</font>

424
00:18:23,590 --> 00:18:29,908
<font color="#CCCCCC">would follow the payload</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> this is an</font>

425
00:18:26,830 --> 00:18:33,370
example for headers frame<font color="#E5E5E5"> whose type is</font>

426
00:18:29,909 --> 00:18:34,990
here in<font color="#E5E5E5"> X</font><font color="#CCCCCC"> notation is</font><font color="#E5E5E5"> 1 and we have some</font>

427
00:18:33,370 --> 00:18:36,610
flags which denoting that<font color="#E5E5E5"> this is the</font>

428
00:18:34,990 --> 00:18:38,110
end of the headers<font color="#CCCCCC"> and things</font><font color="#E5E5E5"> like</font><font color="#CCCCCC"> that</font>

429
00:18:36,610 --> 00:18:40,149
and the student<font color="#E5E5E5"> identifier and what I'd</font>

430
00:18:38,110 --> 00:18:42,580
like<font color="#CCCCCC"> you to</font><font color="#E5E5E5"> to look</font><font color="#CCCCCC"> is inside the</font>

431
00:18:40,150 --> 00:18:45,370
payload<font color="#E5E5E5"> we have the first field which is</font>

432
00:18:42,580 --> 00:18:47,260
called<font color="#E5E5E5"> pad length and and that is</font>

433
00:18:45,370 --> 00:18:49,389
<font color="#E5E5E5">interesting because padding is a notion</font>

434
00:18:47,260 --> 00:18:53,559
that was introduced into<font color="#E5E5E5"> the RFC to</font>

435
00:18:49,390 --> 00:18:56,230
actually allow for obfuscation<font color="#E5E5E5"> to you</font>

436
00:18:53,559 --> 00:18:58,418
know to avoid<font color="#E5E5E5"> the situations where the</font>

437
00:18:56,230 --> 00:19:01,630
<font color="#E5E5E5">size of the</font><font color="#CCCCCC"> payload could could actually</font>

438
00:18:58,419 --> 00:19:03,549
be determined and<font color="#CCCCCC"> you can pat it</font><font color="#E5E5E5"> in</font>

439
00:19:01,630 --> 00:19:05,320
different<font color="#E5E5E5"> lengths and so when observer</font>

440
00:19:03,549 --> 00:19:09,400
would not<font color="#E5E5E5"> actually know what what the</font>

441
00:19:05,320 --> 00:19:10,990
actual<font color="#CCCCCC"> payload length so I invite all of</font>

442
00:19:09,400 --> 00:19:14,470
you<font color="#CCCCCC"> you can</font><font color="#E5E5E5"> google app it's called a</font>

443
00:19:10,990 --> 00:19:16,179
nice page by<font color="#E5E5E5"> Akamai call Akamai</font><font color="#CCCCCC"> GDP</font><font color="#E5E5E5"> to</font>

444
00:19:14,470 --> 00:19:19,390
demo<font color="#CCCCCC"> where you see</font><font color="#E5E5E5"> the same picture</font>

445
00:19:16,179 --> 00:19:22,000
being<font color="#CCCCCC"> loaded first by HTTP 1.1 and</font><font color="#E5E5E5"> then</font>

446
00:19:19,390 --> 00:19:23,559
<font color="#E5E5E5">by the HTTP 2 and then you get some</font>

447
00:19:22,000 --> 00:19:26,230
metrics about<font color="#E5E5E5"> how efficient more</font>

448
00:19:23,559 --> 00:19:29,590
efficient what it was<font color="#E5E5E5"> when I recorded</font>

449
00:19:26,230 --> 00:19:32,080
<font color="#E5E5E5">this</font><font color="#CCCCCC"> screenshot it was done via VPN so</font>

450
00:19:29,590 --> 00:19:34,030
all I got is a bit more<font color="#E5E5E5"> than that you</font>

451
00:19:32,080 --> 00:19:35,408
know twice<font color="#CCCCCC"> to one performance</font><font color="#E5E5E5"> but I</font>

452
00:19:34,030 --> 00:19:37,059
<font color="#CCCCCC">imagined</font><font color="#E5E5E5"> that if you would do that you</font>

453
00:19:35,409 --> 00:19:38,740
<font color="#E5E5E5">would get up to you know three times</font>

454
00:19:37,059 --> 00:19:42,100
four<font color="#CCCCCC"> times and maybe even five times</font>

455
00:19:38,740 --> 00:19:44,370
faster performance<font color="#CCCCCC"> on that I tried</font><font color="#E5E5E5"> to</font>

456
00:19:42,100 --> 00:19:46,840
show it in a video<font color="#E5E5E5"> but usually the</font>

457
00:19:44,370 --> 00:19:50,860
refresh rate<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the projectors is not</font>

458
00:19:46,840 --> 00:19:52,418
high enough<font color="#E5E5E5"> to show it and the last</font>

459
00:19:50,860 --> 00:19:54,280
thing we<font color="#CCCCCC"> are going</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> cover before</font><font color="#E5E5E5"> we</font>

460
00:19:52,419 --> 00:19:56,590
<font color="#E5E5E5">actually dive into the fingerprint is</font>

461
00:19:54,280 --> 00:19:58,299
the the flow of the conversation<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font>

462
00:19:56,590 --> 00:20:01,270
h2 conversation and that's<font color="#E5E5E5"> very</font>

463
00:19:58,299 --> 00:20:02,860
important because<font color="#CCCCCC"> the fingerprint</font><font color="#E5E5E5"> really</font>

464
00:20:01,270 --> 00:20:06,700
focuses on the

465
00:20:02,860 --> 00:20:11,139
that stage of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> http/2 conversation as</font>

466
00:20:06,700 --> 00:20:13,780
I've mentioned<font color="#CCCCCC"> http/2 can be delivered</font>

467
00:20:11,140 --> 00:20:15,309
either over clear text which<font color="#CCCCCC"> is usually</font>

468
00:20:13,780 --> 00:20:18,850
<font color="#CCCCCC">not the case or open an encrypted</font>

469
00:20:15,309 --> 00:20:22,899
channel<font color="#E5E5E5"> over TLS and when the RFC was</font>

470
00:20:18,850 --> 00:20:24,520
composed<font color="#E5E5E5"> the</font><font color="#CCCCCC"> authors wanted to rely on</font>

471
00:20:22,900 --> 00:20:26,500
the<font color="#E5E5E5"> existing infrastructure and not</font>

472
00:20:24,520 --> 00:20:29,799
start making modification<font color="#E5E5E5"> to any other</font>

473
00:20:26,500 --> 00:20:32,890
underlying<font color="#E5E5E5"> layers</font><font color="#CCCCCC"> and so for the</font>

474
00:20:29,799 --> 00:20:34,750
negotiation of HTTP<font color="#CCCCCC"> 2 over TLS is done</font>

475
00:20:32,890 --> 00:20:36,900
via and TLS extension called the

476
00:20:34,750 --> 00:20:39,850
application<font color="#CCCCCC"> level protocol negotiation</font>

477
00:20:36,900 --> 00:20:44,290
<font color="#CCCCCC">ALP and extension were in the TLS</font>

478
00:20:39,850 --> 00:20:47,559
handshake the client adds the<font color="#CCCCCC"> h2 it's</font>

479
00:20:44,290 --> 00:20:50,230
<font color="#E5E5E5">two characters to</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> to the</font><font color="#CCCCCC"> ALP an</font>

480
00:20:47,559 --> 00:20:51,820
extension<font color="#E5E5E5"> and if the server supports h2</font>

481
00:20:50,230 --> 00:20:56,970
they would then negotiate<font color="#E5E5E5"> this protocol</font>

482
00:20:51,820 --> 00:20:56,970
<font color="#E5E5E5">and from that point on we talk with h2</font>

483
00:20:57,450 --> 00:21:02,049
<font color="#CCCCCC">if it's done if the negotiation</font><font color="#E5E5E5"> is done</font>

484
00:20:59,890 --> 00:21:04,419
over clear text by<font color="#E5E5E5"> the way it's done via</font>

485
00:21:02,049 --> 00:21:07,540
an upgrade header a regular HTTP<font color="#CCCCCC"> one</font>

486
00:21:04,419 --> 00:21:10,510
<font color="#CCCCCC">direct seller an</font><font color="#E5E5E5"> upgrade header so once</font>

487
00:21:07,540 --> 00:21:13,389
the protocol<font color="#E5E5E5"> was negotiated next comes</font>

488
00:21:10,510 --> 00:21:16,059
<font color="#E5E5E5">exchange of settings now the RFC</font>

489
00:21:13,390 --> 00:21:17,770
mandates that<font color="#E5E5E5"> both sides not only the</font>

490
00:21:16,059 --> 00:21:20,139
client<font color="#CCCCCC"> or the other server both side</font>

491
00:21:17,770 --> 00:21:22,840
must send the settings frame as the

492
00:21:20,140 --> 00:21:24,429
<font color="#E5E5E5">first frame</font><font color="#CCCCCC"> of which</font><font color="#E5E5E5"> connection it could</font>

493
00:21:22,840 --> 00:21:26,530
be an empty settings frame but<font color="#E5E5E5"> a</font>

494
00:21:24,429 --> 00:21:29,970
settings frame has to<font color="#CCCCCC"> be sent by both</font>

495
00:21:26,530 --> 00:21:32,410
endpoints<font color="#E5E5E5"> after each connection and</font>

496
00:21:29,970 --> 00:21:35,080
within<font color="#E5E5E5"> those settings and we will touch</font>

497
00:21:32,410 --> 00:21:37,450
upon that settings frame a bit later but

498
00:21:35,080 --> 00:21:39,639
then once those<font color="#CCCCCC"> were exchanged</font><font color="#E5E5E5"> and they</font>

499
00:21:37,450 --> 00:21:44,590
are always exchanged over<font color="#CCCCCC"> the reserved</font>

500
00:21:39,640 --> 00:21:47,380
stream ID 0 then we can<font color="#CCCCCC"> go</font><font color="#E5E5E5"> on and start</font>

501
00:21:44,590 --> 00:21:53,889
making requests<font color="#E5E5E5"> now if you can see in</font>

502
00:21:47,380 --> 00:21:56,350
this example in the last<font color="#E5E5E5"> line of the you</font>

503
00:21:53,890 --> 00:21:58,120
know<font color="#E5E5E5"> its first</font><font color="#CCCCCC"> line from the end we see</font>

504
00:21:56,350 --> 00:22:00,100
a thing this is<font color="#E5E5E5"> sir those are server</font>

505
00:21:58,120 --> 00:22:01,809
logs so if you see received those<font color="#E5E5E5"> are</font>

506
00:22:00,100 --> 00:22:04,719
friends which were received by<font color="#CCCCCC"> the</font>

507
00:22:01,809 --> 00:22:07,750
server<font color="#E5E5E5"> so now the server receives the</font>

508
00:22:04,720 --> 00:22:09,910
headers frame from<font color="#CCCCCC"> the client just as it</font>

509
00:22:07,750 --> 00:22:12,760
would<font color="#E5E5E5"> in HTTP 1 get</font><font color="#CCCCCC"> request which would</font>

510
00:22:09,910 --> 00:22:14,770
contain only headers and no data<font color="#E5E5E5"> most of</font>

511
00:22:12,760 --> 00:22:15,700
the time and this<font color="#E5E5E5"> is going over stream</font>

512
00:22:14,770 --> 00:22:17,620
ID 1

513
00:22:15,700 --> 00:22:20,650
and<font color="#E5E5E5"> next the server will actually</font>

514
00:22:17,620 --> 00:22:22,600
respond over<font color="#E5E5E5"> stream ID</font><font color="#CCCCCC"> one and if the</font>

515
00:22:20,650 --> 00:22:25,240
<font color="#CCCCCC">response has a body it would</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> two had</font>

516
00:22:22,600 --> 00:22:28,629
<font color="#CCCCCC">two frames ahead arose frame and data</font>

517
00:22:25,240 --> 00:22:30,640
frames<font color="#E5E5E5"> so two more snippets of the</font><font color="#CCCCCC"> log</font>

518
00:22:28,630 --> 00:22:33,730
just to get you a bit more<font color="#E5E5E5"> familiarized</font>

519
00:22:30,640 --> 00:22:36,730
with them we see you can see in the<font color="#CCCCCC"> log</font>

520
00:22:33,730 --> 00:22:40,810
that<font color="#CCCCCC"> the server</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> sending the settings</font>

521
00:22:36,730 --> 00:22:42,280
frame over stream ID<font color="#E5E5E5"> zero and his is</font>

522
00:22:40,810 --> 00:22:43,990
making sure<font color="#CCCCCC"> that the client knows that</font>

523
00:22:42,280 --> 00:22:46,389
he can<font color="#E5E5E5"> handles no more than</font><font color="#CCCCCC"> 100</font>

524
00:22:43,990 --> 00:22:48,040
concurrent streams<font color="#E5E5E5"> and then the client</font>

525
00:22:46,390 --> 00:22:50,200
is responding with<font color="#E5E5E5"> the settings frame on</font>

526
00:22:48,040 --> 00:22:52,600
the same stream ID and<font color="#CCCCCC"> sends three</font>

527
00:22:50,200 --> 00:22:54,340
different settings<font color="#CCCCCC"> about that header</font>

528
00:22:52,600 --> 00:22:59,050
table<font color="#E5E5E5"> size and the initial window size</font>

529
00:22:54,340 --> 00:23:00,669
and so<font color="#E5E5E5"> on and so forth</font><font color="#CCCCCC"> once</font><font color="#E5E5E5"> again here</font>

530
00:22:59,050 --> 00:23:02,590
<font color="#E5E5E5">we see packets going</font>

531
00:23:00,670 --> 00:23:05,920
I'm sorry friends<font color="#E5E5E5"> going over stream ID</font>

532
00:23:02,590 --> 00:23:08,709
15 and<font color="#E5E5E5"> a headers frame and the window</font>

533
00:23:05,920 --> 00:23:10,240
<font color="#E5E5E5">update frame which</font><font color="#CCCCCC"> updates</font><font color="#E5E5E5"> the initial</font>

534
00:23:08,710 --> 00:23:12,670
window<font color="#E5E5E5"> that was set in the settings</font>

535
00:23:10,240 --> 00:23:16,960
frame and the server<font color="#E5E5E5"> responds with</font><font color="#CCCCCC"> a</font>

536
00:23:12,670 --> 00:23:18,910
headers frame<font color="#E5E5E5"> on the same stream ID so</font>

537
00:23:16,960 --> 00:23:20,470
I'm summing it up those are<font color="#E5E5E5"> the key</font>

538
00:23:18,910 --> 00:23:22,990
differences<font color="#CCCCCC"> between</font><font color="#E5E5E5"> the two protocols</font>

539
00:23:20,470 --> 00:23:24,550
<font color="#E5E5E5">the one directs versions are</font><font color="#CCCCCC"> text-based</font>

540
00:23:22,990 --> 00:23:27,640
where the second one is a<font color="#E5E5E5"> binary</font>

541
00:23:24,550 --> 00:23:30,659
protocol<font color="#E5E5E5"> both could be transmitted over</font>

542
00:23:27,640 --> 00:23:34,260
clear text or over an<font color="#E5E5E5"> encrypted</font><font color="#CCCCCC"> channel</font>

543
00:23:30,660 --> 00:23:36,640
where<font color="#E5E5E5"> whereas in the first versions</font>

544
00:23:34,260 --> 00:23:38,290
concurrency was achieved by multiple<font color="#E5E5E5"> TCP</font>

545
00:23:36,640 --> 00:23:41,560
connection in the second version we have

546
00:23:38,290 --> 00:23:43,899
<font color="#E5E5E5">single TCP connection and requests are</font>

547
00:23:41,560 --> 00:23:46,659
interleaved<font color="#CCCCCC"> via frames and and streams</font>

548
00:23:43,900 --> 00:23:48,460
and<font color="#E5E5E5"> two new mechanism that were</font>

549
00:23:46,660 --> 00:23:54,750
introduced is the<font color="#CCCCCC"> header compression</font><font color="#E5E5E5"> and</font>

550
00:23:48,460 --> 00:23:59,230
<font color="#CCCCCC">server push so now for the actual</font>

551
00:23:54,750 --> 00:24:01,960
fingerprinting so of those<font color="#CCCCCC"> ten frame</font>

552
00:23:59,230 --> 00:24:05,410
types for the RFC<font color="#E5E5E5"> we would be only</font><font color="#CCCCCC"> using</font>

553
00:24:01,960 --> 00:24:07,180
<font color="#E5E5E5">four and there are several reasons for</font>

554
00:24:05,410 --> 00:24:09,280
<font color="#E5E5E5">that first of all not all frame types</font>

555
00:24:07,180 --> 00:24:10,750
are present during the<font color="#E5E5E5"> entire</font>

556
00:24:09,280 --> 00:24:13,270
conversation<font color="#CCCCCC"> and in passive</font>

557
00:24:10,750 --> 00:24:16,060
fingerprinting we want to<font color="#E5E5E5"> fingerprint</font>

558
00:24:13,270 --> 00:24:18,160
the client as fast as we can<font color="#E5E5E5"> and we want</font>

559
00:24:16,060 --> 00:24:22,399
<font color="#E5E5E5">to try and</font><font color="#CCCCCC"> do</font><font color="#E5E5E5"> that by looking</font><font color="#CCCCCC"> at</font>

560
00:24:18,160 --> 00:24:24,440
reliable behavior and those<font color="#E5E5E5"> four</font>

561
00:24:22,400 --> 00:24:28,250
frame types actually reflected that

562
00:24:24,440 --> 00:24:31,190
during<font color="#E5E5E5"> our research first one is a</font>

563
00:24:28,250 --> 00:24:33,740
setting frame and as I've<font color="#CCCCCC"> mentioned its</font>

564
00:24:31,190 --> 00:24:36,080
conveyed configuration parameters<font color="#E5E5E5"> and</font>

565
00:24:33,740 --> 00:24:38,390
the great thing from<font color="#E5E5E5"> a fingerprinting</font>

566
00:24:36,080 --> 00:24:41,360
point of view is<font color="#CCCCCC"> that both</font><font color="#E5E5E5"> ends must</font>

567
00:24:38,390 --> 00:24:43,990
send it so it would always be<font color="#E5E5E5"> present at</font>

568
00:24:41,360 --> 00:24:46,459
the start<font color="#CCCCCC"> of each http/2 connection</font><font color="#E5E5E5"> and</font>

569
00:24:43,990 --> 00:24:49,070
even if<font color="#E5E5E5"> it's present as an empty one</font>

570
00:24:46,460 --> 00:24:50,690
that's a signal for us<font color="#E5E5E5"> as the one who's</font>

571
00:24:49,070 --> 00:24:55,939
trying<font color="#E5E5E5"> to fingerprint the client of the</font>

572
00:24:50,690 --> 00:24:58,490
behavior<font color="#CCCCCC"> of that client so the RFC</font>

573
00:24:55,940 --> 00:25:00,860
defines<font color="#E5E5E5"> six types of settings we won't</font>

574
00:24:58,490 --> 00:25:03,590
go into them they are<font color="#E5E5E5"> quite really</font><font color="#CCCCCC"> self</font>

575
00:25:00,860 --> 00:25:05,030
<font color="#CCCCCC">explanatory and but what is important to</font>

576
00:25:03,590 --> 00:25:07,459
know<font color="#CCCCCC"> that each has its own</font>

577
00:25:05,030 --> 00:25:09,800
representation<font color="#CCCCCC"> a hex representation and</font>

578
00:25:07,460 --> 00:25:12,920
when we actually<font color="#E5E5E5"> look at the logs and</font>

579
00:25:09,800 --> 00:25:14,870
this is from<font color="#E5E5E5"> Firefox 55 every time this</font>

580
00:25:12,920 --> 00:25:18,050
<font color="#CCCCCC">5-4 fix</font><font color="#E5E5E5"> 55</font><font color="#CCCCCC"> / max</font>

581
00:25:14,870 --> 00:25:19,820
<font color="#E5E5E5">OS X X is starting an HTTP</font><font color="#CCCCCC"> - connection</font>

582
00:25:18,050 --> 00:25:22,669
<font color="#CCCCCC">he would send those exact three</font>

583
00:25:19,820 --> 00:25:26,659
parameters<font color="#E5E5E5"> or e exact three settings</font>

584
00:25:22,670 --> 00:25:28,820
with those value<font color="#CCCCCC"> its constant</font><font color="#E5E5E5"> and if we</font>

585
00:25:26,660 --> 00:25:31,900
<font color="#E5E5E5">move over to Safari Safari would use</font>

586
00:25:28,820 --> 00:25:34,939
<font color="#E5E5E5">other two settings with again</font><font color="#CCCCCC"> repetitive</font>

587
00:25:31,900 --> 00:25:36,680
default values opting out of<font color="#CCCCCC"> the enable</font>

588
00:25:34,940 --> 00:25:39,320
push and the maximum<font color="#E5E5E5"> current streams and</font>

589
00:25:36,680 --> 00:25:42,080
those are<font color="#CCCCCC"> examples for edge and for</font>

590
00:25:39,320 --> 00:25:45,110
chrome on Android<font color="#E5E5E5"> and if we go and just</font>

591
00:25:42,080 --> 00:25:46,429
put it in a table<font color="#CCCCCC"> then we can start</font>

592
00:25:45,110 --> 00:25:49,570
differentiating between different

593
00:25:46,430 --> 00:25:52,970
clients only<font color="#CCCCCC"> based</font><font color="#E5E5E5"> on the settings alone</font>

594
00:25:49,570 --> 00:25:55,189
so we had a<font color="#E5E5E5"> table for about</font><font color="#CCCCCC"> 40</font><font color="#E5E5E5"> thousand</font>

595
00:25:52,970 --> 00:25:57,860
entries of those<font color="#E5E5E5"> I</font><font color="#CCCCCC"> can't say that we</font>

596
00:25:55,190 --> 00:25:59,210
were able to distinguish<font color="#E5E5E5"> forty thousand</font>

597
00:25:57,860 --> 00:26:01,820
user<font color="#CCCCCC"> edges far from that the works</font>

598
00:25:59,210 --> 00:26:04,490
<font color="#E5E5E5">lasting around several settings of a lot</font>

599
00:26:01,820 --> 00:26:07,010
of<font color="#CCCCCC"> user agents</font><font color="#E5E5E5"> but I think that's a good</font>

600
00:26:04,490 --> 00:26:10,610
<font color="#E5E5E5">starting point for start forging the</font>

601
00:26:07,010 --> 00:26:15,560
actual fingerprint<font color="#E5E5E5"> so what we propose is</font>

602
00:26:10,610 --> 00:26:17,000
actually taking the the hex notation of

603
00:26:15,560 --> 00:26:19,550
the type of the settings and

604
00:26:17,000 --> 00:26:24,620
concatenating it with the<font color="#E5E5E5"> default value</font>

605
00:26:19,550 --> 00:26:28,399
which is<font color="#CCCCCC"> sent this is for edge and we</font>

606
00:26:24,620 --> 00:26:32,270
can see this exact<font color="#CCCCCC"> example for Firefox</font>

607
00:26:28,400 --> 00:26:34,679
55 but as I've<font color="#CCCCCC"> said that was not enough</font>

608
00:26:32,270 --> 00:26:36,570
we had to gain more

609
00:26:34,679 --> 00:26:38,429
entropy<font color="#CCCCCC"> we needed some you know to break</font>

610
00:26:36,570 --> 00:26:42,539
<font color="#E5E5E5">down those</font><font color="#CCCCCC"> clusters so we moved on to</font>

611
00:26:38,429 --> 00:26:45,330
<font color="#E5E5E5">the next type of frame now</font><font color="#CCCCCC"> Windows</font>

612
00:26:42,539 --> 00:26:47,370
<font color="#CCCCCC">Update frame is a flow management flow</font>

613
00:26:45,330 --> 00:26:49,439
control frame<font color="#CCCCCC"> and it could be sent at</font>

614
00:26:47,370 --> 00:26:50,789
any point of<font color="#E5E5E5"> the connection it could be</font>

615
00:26:49,440 --> 00:26:52,799
sent<font color="#E5E5E5"> for the entire connection where</font>

616
00:26:50,789 --> 00:26:55,169
someone<font color="#CCCCCC"> would</font><font color="#E5E5E5"> one endpoint would like to</font>

617
00:26:52,799 --> 00:26:58,158
<font color="#CCCCCC">adjust the window size for the entire</font>

618
00:26:55,169 --> 00:27:01,020
<font color="#E5E5E5">connection or for a given stream and</font>

619
00:26:58,159 --> 00:27:03,360
what was interesting about it is<font color="#E5E5E5"> that we</font>

620
00:27:01,020 --> 00:27:05,220
noticed that some<font color="#CCCCCC"> clients when they</font>

621
00:27:03,360 --> 00:27:08,490
established<font color="#E5E5E5"> a new</font><font color="#CCCCCC"> HTTP 2 connection</font>

622
00:27:05,220 --> 00:27:10,169
actually<font color="#CCCCCC"> sent 2 frames</font><font color="#E5E5E5"> they sent the</font>

623
00:27:08,490 --> 00:27:12,510
settings frame which they are mandated

624
00:27:10,169 --> 00:27:14,100
<font color="#CCCCCC">to</font><font color="#E5E5E5"> send by the RFC</font><font color="#CCCCCC"> and right after the</font>

625
00:27:12,510 --> 00:27:16,710
after it it would<font color="#CCCCCC"> they</font><font color="#E5E5E5"> would send</font>

626
00:27:14,100 --> 00:27:18,539
Windows<font color="#E5E5E5"> Update frame and this is a</font>

627
00:27:16,710 --> 00:27:20,250
consistent<font color="#E5E5E5"> behavior though it's not</font>

628
00:27:18,539 --> 00:27:22,320
mandated<font color="#E5E5E5"> by nothing it's just</font><font color="#CCCCCC"> a</font>

629
00:27:20,250 --> 00:27:26,640
consistent behavior<font color="#E5E5E5"> so you</font><font color="#CCCCCC"> can see from</font>

630
00:27:22,320 --> 00:27:28,110
chrome 16 on<font color="#E5E5E5"> on my pixel</font><font color="#CCCCCC"> excel we send</font>

631
00:27:26,640 --> 00:27:30,390
the settings frame and right after it

632
00:27:28,110 --> 00:27:32,279
<font color="#CCCCCC">the windows update value and the value</font>

633
00:27:30,390 --> 00:27:37,770
<font color="#CCCCCC">is constant</font><font color="#E5E5E5"> so we just collected that</font>

634
00:27:32,279 --> 00:27:40,289
value and in<font color="#E5E5E5"> the case where it would not</font>

635
00:27:37,770 --> 00:27:43,230
send<font color="#CCCCCC"> that you know</font><font color="#E5E5E5"> that frame we would</font>

636
00:27:40,289 --> 00:27:45,779
<font color="#E5E5E5">just put</font><font color="#CCCCCC"> yours there instead and that's</font>

637
00:27:43,230 --> 00:27:48,000
great<font color="#E5E5E5"> we gain some more entropy and and</font>

638
00:27:45,779 --> 00:27:51,539
we've broken<font color="#CCCCCC"> down the</font><font color="#E5E5E5"> cluster but still</font>

639
00:27:48,000 --> 00:27:53,850
it was<font color="#E5E5E5"> not enough so this is a chance</font><font color="#CCCCCC"> to</font>

640
00:27:51,539 --> 00:28:00,450
<font color="#E5E5E5">learn about a new</font><font color="#CCCCCC"> cool mechanism HTTP 2</font>

641
00:27:53,850 --> 00:28:04,469
which is priority<font color="#E5E5E5"> now priority is a bit</font>

642
00:28:00,450 --> 00:28:08,370
of a weird<font color="#CCCCCC"> thing the RFC allows an</font>

643
00:28:04,470 --> 00:28:11,610
<font color="#CCCCCC">endpoint</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> client to express his</font>

644
00:28:08,370 --> 00:28:13,979
preferences<font color="#E5E5E5"> to the server of priorities</font>

645
00:28:11,610 --> 00:28:15,870
so it's obvious that<font color="#E5E5E5"> if the server can</font>

646
00:28:13,980 --> 00:28:18,330
<font color="#CCCCCC">he</font><font color="#E5E5E5"> should send everything he has on on</font>

647
00:28:15,870 --> 00:28:19,860
the all the open streams and you know

648
00:28:18,330 --> 00:28:21,840
just communicate with the<font color="#E5E5E5"> client but if</font>

649
00:28:19,860 --> 00:28:24,719
<font color="#E5E5E5">the server has</font><font color="#CCCCCC"> a resource allocation</font>

650
00:28:21,840 --> 00:28:26,908
<font color="#CCCCCC">problem then the</font><font color="#E5E5E5"> client can express his</font>

651
00:28:24,720 --> 00:28:29,460
preferences to the server<font color="#CCCCCC"> like</font><font color="#E5E5E5"> in this</font>

652
00:28:26,909 --> 00:28:32,370
example he<font color="#E5E5E5"> would say first please send</font>

653
00:28:29,460 --> 00:28:34,350
<font color="#E5E5E5">everything</font><font color="#CCCCCC"> you have on</font><font color="#E5E5E5"> stream D once</font>

654
00:28:32,370 --> 00:28:37,049
you're done with stream D which<font color="#CCCCCC"> is</font><font color="#E5E5E5"> the</font>

655
00:28:34,350 --> 00:28:39,750
parent stream<font color="#E5E5E5"> please go to e stream in</font>

656
00:28:37,049 --> 00:28:42,029
stream<font color="#CCCCCC"> se you have those weights those</font>

657
00:28:39,750 --> 00:28:44,669
numbers which are<font color="#E5E5E5"> 8 and 8 which</font><font color="#CCCCCC"> means</font>

658
00:28:42,029 --> 00:28:47,520
50%<font color="#E5E5E5"> allocate 50% of our available</font>

659
00:28:44,669 --> 00:28:50,160
<font color="#CCCCCC">resources to stream E</font><font color="#E5E5E5"> and then</font><font color="#CCCCCC"> 2 streams</font>

660
00:28:47,520 --> 00:28:52,290
and once you're done<font color="#CCCCCC"> with</font><font color="#E5E5E5"> the only</font><font color="#CCCCCC"> then</font>

661
00:28:50,160 --> 00:28:56,010
go to stream a and B that's something

662
00:28:52,290 --> 00:28:58,590
which<font color="#E5E5E5"> is allowed by the RFC and you can</font>

663
00:28:56,010 --> 00:29:02,340
see like for<font color="#E5E5E5"> a and beats would be 25%</font>

664
00:28:58,590 --> 00:29:03,899
and 75% and<font color="#E5E5E5"> the weird thing</font><font color="#CCCCCC"> is that</font>

665
00:29:02,340 --> 00:29:06,360
<font color="#CCCCCC">there are no</font><font color="#E5E5E5"> guarantees the</font><font color="#CCCCCC"> service does</font>

666
00:29:03,900 --> 00:29:09,270
not<font color="#E5E5E5"> have to respect that I'm quoting</font>

667
00:29:06,360 --> 00:29:11,909
from<font color="#E5E5E5"> the from the actual RFC it's only a</font>

668
00:29:09,270 --> 00:29:13,879
suggestion<font color="#CCCCCC"> and you might ask yourself</font>

669
00:29:11,910 --> 00:29:17,250
why<font color="#E5E5E5"> is that relevant</font><font color="#CCCCCC"> for the fingerprint</font>

670
00:29:13,880 --> 00:29:20,250
<font color="#E5E5E5">well just as the as the update frame</font>

671
00:29:17,250 --> 00:29:23,400
goes it seems<font color="#E5E5E5"> that some clients actually</font>

672
00:29:20,250 --> 00:29:25,890
<font color="#E5E5E5">sent three types of frames at every</font>

673
00:29:23,400 --> 00:29:27,900
<font color="#CCCCCC">http/2 connection</font><font color="#E5E5E5"> and this is the case</font>

674
00:29:25,890 --> 00:29:29,820
for<font color="#E5E5E5"> Firefox where he would send the</font>

675
00:29:27,900 --> 00:29:31,500
settings frame he would set the<font color="#CCCCCC"> Windows</font>

676
00:29:29,820 --> 00:29:34,980
<font color="#CCCCCC">Update</font><font color="#E5E5E5"> frame and immediately after we</font>

677
00:29:31,500 --> 00:29:36,929
would<font color="#E5E5E5"> set</font><font color="#CCCCCC"> 6 priority frames</font><font color="#E5E5E5"> creating</font>

678
00:29:34,980 --> 00:29:39,570
<font color="#E5E5E5">this structure that you</font><font color="#CCCCCC"> see this</font><font color="#E5E5E5"> is not</font>

679
00:29:36,929 --> 00:29:41,460
<font color="#E5E5E5">only for Firefox</font><font color="#CCCCCC"> 54:55 it's present up</font>

680
00:29:39,570 --> 00:29:43,200
until the<font color="#E5E5E5"> latest version of Firefox and</font>

681
00:29:41,460 --> 00:29:47,520
you might<font color="#E5E5E5"> ask yourself why would</font><font color="#CCCCCC"> he do</font>

682
00:29:43,200 --> 00:29:50,130
that<font color="#E5E5E5"> well the answer I came up with it's</font>

683
00:29:47,520 --> 00:29:51,929
like<font color="#E5E5E5"> having three types of channels a</font>

684
00:29:50,130 --> 00:29:55,200
channel for<font color="#E5E5E5"> high priority a low priority</font>

685
00:29:51,929 --> 00:29:58,500
<font color="#E5E5E5">and a medium</font><font color="#CCCCCC"> priority Channel but that's</font>

686
00:29:55,200 --> 00:30:01,140
consistent<font color="#CCCCCC"> and</font><font color="#E5E5E5"> we actually collect that</font>

687
00:29:58,500 --> 00:30:02,670
we collect that data<font color="#E5E5E5"> and it helps us</font><font color="#CCCCCC"> to</font>

688
00:30:01,140 --> 00:30:05,760
<font color="#E5E5E5">break down the entropy of the</font>

689
00:30:02,670 --> 00:30:07,830
fingerprint even further<font color="#CCCCCC"> just so you</font>

690
00:30:05,760 --> 00:30:11,010
know you know it's<font color="#E5E5E5"> not something</font><font color="#CCCCCC"> which</font>

691
00:30:07,830 --> 00:30:12,449
<font color="#CCCCCC">is a arbitrary this is actually a</font>

692
00:30:11,010 --> 00:30:14,490
snippet<font color="#E5E5E5"> from the comments from</font><font color="#CCCCCC"> the</font>

693
00:30:12,450 --> 00:30:17,100
<font color="#E5E5E5">Firefox source code this is hard coded</font>

694
00:30:14,490 --> 00:30:18,929
<font color="#E5E5E5">into Firefox the exact order of these</font>

695
00:30:17,100 --> 00:30:22,709
priority frames<font color="#E5E5E5"> so this is a consistent</font>

696
00:30:18,929 --> 00:30:24,510
<font color="#CCCCCC">behavior so this is what we've got up</font>

697
00:30:22,710 --> 00:30:26,670
until now we have three elements<font color="#CCCCCC"> we have</font>

698
00:30:24,510 --> 00:30:28,050
<font color="#CCCCCC">the settings frame we have</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> Windows</font>

699
00:30:26,670 --> 00:30:30,660
<font color="#CCCCCC">Update frame and we have the priority</font>

700
00:30:28,050 --> 00:30:33,899
<font color="#CCCCCC">which we collect</font><font color="#E5E5E5"> if the client</font><font color="#CCCCCC"> actually</font>

701
00:30:30,660 --> 00:30:35,910
sends them and you would<font color="#CCCCCC"> see we can</font>

702
00:30:33,900 --> 00:30:40,950
already distinguish between chrome and

703
00:30:35,910 --> 00:30:43,260
<font color="#CCCCCC">okay HTTP library and CRO version 754</font>

704
00:30:40,950 --> 00:30:51,380
which is the<font color="#E5E5E5"> version that supports h2</font>

705
00:30:43,260 --> 00:30:51,379
and ng HTTP and that was really<font color="#E5E5E5"> cool but</font>

706
00:30:51,559 --> 00:30:58,020
we<font color="#E5E5E5"> tried one last</font><font color="#CCCCCC"> thing and to gain that</font>

707
00:30:55,500 --> 00:30:59,309
<font color="#E5E5E5">entropy and that is the last element</font>

708
00:30:58,020 --> 00:31:01,908
<font color="#CCCCCC">that</font><font color="#E5E5E5"> we're going to talk</font><font color="#CCCCCC"> about and</font>

709
00:30:59,309 --> 00:31:04,760
that's pseudo header

710
00:31:01,909 --> 00:31:07,669
on the left you can<font color="#CCCCCC"> see a</font><font color="#E5E5E5"> regular HTTP</font>

711
00:31:04,760 --> 00:31:10,429
request 1.1<font color="#E5E5E5"> with the with the headers</font>

712
00:31:07,669 --> 00:31:13,100
and<font color="#CCCCCC"> the first starting line and and the</font>

713
00:31:10,429 --> 00:31:14,809
starting line of HTTP 1.1<font color="#E5E5E5"> actually</font>

714
00:31:13,100 --> 00:31:17,990
conveys some information such as the

715
00:31:14,809 --> 00:31:21,830
method the path<font color="#E5E5E5"> to the resource and the</font>

716
00:31:17,990 --> 00:31:26,360
protocol<font color="#CCCCCC"> versions so to replace</font><font color="#E5E5E5"> that the</font>

717
00:31:21,830 --> 00:31:28,520
RFC<font color="#CCCCCC"> set is defining</font><font color="#E5E5E5"> an entity called</font>

718
00:31:26,360 --> 00:31:32,059
pseudo headers<font color="#E5E5E5"> there is one for a</font>

719
00:31:28,520 --> 00:31:34,129
response to the header and for<font color="#E5E5E5"> request</font>

720
00:31:32,059 --> 00:31:36,080
<font color="#E5E5E5">pseudo headers now those headers are</font>

721
00:31:34,130 --> 00:31:37,760
mandatory<font color="#E5E5E5"> and it's a closed list you</font>

722
00:31:36,080 --> 00:31:39,949
cannot change them you can<font color="#E5E5E5"> add to them</font>

723
00:31:37,760 --> 00:31:42,049
you cannot make up<font color="#CCCCCC"> your own each of them</font>

724
00:31:39,950 --> 00:31:44,120
is starting with<font color="#E5E5E5"> the with the colon and</font>

725
00:31:42,049 --> 00:31:47,000
there are and their purpose is to

726
00:31:44,120 --> 00:31:50,510
<font color="#CCCCCC">replace to replace</font><font color="#E5E5E5"> the the data which</font><font color="#CCCCCC"> is</font>

727
00:31:47,000 --> 00:31:52,220
transmitted over the<font color="#E5E5E5"> HTTP start line so</font>

728
00:31:50,510 --> 00:31:55,158
we have<font color="#CCCCCC"> one</font><font color="#E5E5E5"> for the method we have one</font>

729
00:31:52,220 --> 00:31:57,950
for<font color="#CCCCCC"> the</font><font color="#E5E5E5"> path the authority would replace</font>

730
00:31:55,159 --> 00:32:00,919
the host header which we had<font color="#E5E5E5"> in HTTP</font><font color="#CCCCCC"> 1</font>

731
00:31:57,950 --> 00:32:06,470
and the scheme<font color="#E5E5E5"> would actually tell</font><font color="#CCCCCC"> us if</font>

732
00:32:00,919 --> 00:32:09,740
it's in HTTP HTTP or FTP the<font color="#E5E5E5"> protocol</font>

733
00:32:06,470 --> 00:32:11,779
supports not only HTTP transactions<font color="#E5E5E5"> if</font>

734
00:32:09,740 --> 00:32:15,919
<font color="#CCCCCC">you'll</font><font color="#E5E5E5"> notice one thing is missing</font><font color="#CCCCCC"> and</font>

735
00:32:11,779 --> 00:32:19,010
<font color="#E5E5E5">that's the version of the HTTP which is</font>

736
00:32:15,919 --> 00:32:21,950
no longer being sent in the new version

737
00:32:19,010 --> 00:32:23,990
of the protocol<font color="#E5E5E5"> so we have those we have</font>

738
00:32:21,950 --> 00:32:26,029
the client and<font color="#CCCCCC"> we've</font><font color="#E5E5E5"> the client is</font>

739
00:32:23,990 --> 00:32:27,950
establishing<font color="#E5E5E5"> an h2 connection and we've</font>

740
00:32:26,029 --> 00:32:31,610
collected the<font color="#E5E5E5"> settings frame and any</font>

741
00:32:27,950 --> 00:32:33,649
other frame which<font color="#CCCCCC"> is a relevant</font><font color="#E5E5E5"> up until</font>

742
00:32:31,610 --> 00:32:35,449
the<font color="#E5E5E5"> first request</font><font color="#CCCCCC"> at its end and</font><font color="#E5E5E5"> what</font>

743
00:32:33,649 --> 00:32:39,408
what we've noticed<font color="#CCCCCC"> that though this is a</font>

744
00:32:35,450 --> 00:32:40,880
closed list of<font color="#E5E5E5"> for headers each client</font>

745
00:32:39,409 --> 00:32:43,340
<font color="#E5E5E5">send them in a different order</font>

746
00:32:40,880 --> 00:32:45,049
<font color="#E5E5E5">and this is consistent I don't know why</font>

747
00:32:43,340 --> 00:32:46,879
and once again<font color="#CCCCCC"> you</font><font color="#E5E5E5"> can see</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> Chrome</font>

748
00:32:45,049 --> 00:32:49,760
<font color="#E5E5E5">is sending them different from the go</font>

749
00:32:46,880 --> 00:32:54,080
HTTP client or the<font color="#CCCCCC"> GID HTTP 2 client</font><font color="#E5E5E5"> or</font>

750
00:32:49,760 --> 00:32:55,370
Safari and<font color="#E5E5E5"> and this is exactly what</font>

751
00:32:54,080 --> 00:32:59,720
you're looking<font color="#E5E5E5"> for when you're trying to</font>

752
00:32:55,370 --> 00:33:01,219
passively fingerprint<font color="#CCCCCC"> client once again</font>

753
00:32:59,720 --> 00:33:03,080
this is<font color="#E5E5E5"> a snapshot from</font><font color="#CCCCCC"> the source code</font>

754
00:33:01,220 --> 00:33:06,799
of<font color="#E5E5E5"> Chrome this is hard</font><font color="#CCCCCC"> coded this</font><font color="#E5E5E5"> is not</font>

755
00:33:03,080 --> 00:33:08,510
some arbitrary<font color="#E5E5E5"> decision that by some</font>

756
00:33:06,799 --> 00:33:12,020
kind<font color="#E5E5E5"> of a random dictionary that the</font>

757
00:33:08,510 --> 00:33:15,640
<font color="#CCCCCC">chrome is making on the fly</font><font color="#E5E5E5"> so</font>

758
00:33:12,020 --> 00:33:18,110
so now I have the final fingerprint<font color="#CCCCCC"> and</font>

759
00:33:15,640 --> 00:33:19,700
we have four elements<font color="#CCCCCC"> which</font><font color="#E5E5E5"> we spoken</font>

760
00:33:18,110 --> 00:33:23,090
about we've encoded the headers<font color="#E5E5E5"> there</font>

761
00:33:19,700 --> 00:33:25,160
<font color="#E5E5E5">are initial letters and we have the full</font>

762
00:33:23,090 --> 00:33:27,740
fingerprint<font color="#E5E5E5"> and if you look at it it's</font>

763
00:33:25,160 --> 00:33:30,830
like<font color="#E5E5E5"> a kind of a timeline where we know</font>

764
00:33:27,740 --> 00:33:32,390
ideal if we could end the fingerprint<font color="#E5E5E5"> at</font>

765
00:33:30,830 --> 00:33:34,699
the settings frame that would<font color="#E5E5E5"> be best</font>

766
00:33:32,390 --> 00:33:36,410
because had the<font color="#E5E5E5"> short it that would be</font>

767
00:33:34,700 --> 00:33:38,240
<font color="#CCCCCC">the</font><font color="#E5E5E5"> first time where we can fingerprint</font>

768
00:33:36,410 --> 00:33:40,250
the client and we wouldn't<font color="#CCCCCC"> have to wait</font>

769
00:33:38,240 --> 00:33:41,600
for the first<font color="#E5E5E5"> request but you have a</font>

770
00:33:40,250 --> 00:33:45,559
<font color="#E5E5E5">trade-off between</font><font color="#CCCCCC"> the time that</font><font color="#E5E5E5"> you are</font>

771
00:33:41,600 --> 00:33:47,149
trying to<font color="#CCCCCC"> - wait</font><font color="#E5E5E5"> until you're done</font><font color="#CCCCCC"> with</font>

772
00:33:45,559 --> 00:33:51,040
<font color="#CCCCCC">the fingerprint</font><font color="#E5E5E5"> which makes it a bit</font>

773
00:33:47,150 --> 00:33:53,090
<font color="#CCCCCC">more</font><font color="#E5E5E5"> complex but I think</font><font color="#CCCCCC"> that these</font>

774
00:33:51,040 --> 00:33:54,920
detected seconds I mean a client would

775
00:33:53,090 --> 00:33:56,899
<font color="#CCCCCC">not</font><font color="#E5E5E5"> initiate an HTTP connection if it</font>

776
00:33:54,920 --> 00:33:59,780
does not intend to send<font color="#E5E5E5"> a</font><font color="#CCCCCC"> request</font><font color="#E5E5E5"> that</font>

777
00:33:56,900 --> 00:34:04,490
<font color="#E5E5E5">would usually be</font><font color="#CCCCCC"> the quest the case so I</font>

778
00:33:59,780 --> 00:34:05,990
think<font color="#E5E5E5"> that is a good enough so what</font>

779
00:34:04,490 --> 00:34:09,320
kinds<font color="#CCCCCC"> of use cases do you have for these</font>

780
00:34:05,990 --> 00:34:11,360
<font color="#E5E5E5">fingerprints so the obvious one is of</font>

781
00:34:09,320 --> 00:34:13,429
<font color="#CCCCCC">course positive security</font><font color="#E5E5E5"> and we try to</font>

782
00:34:11,360 --> 00:34:15,669
validate client assertion if someone is

783
00:34:13,429 --> 00:34:18,139
<font color="#E5E5E5">trying to</font><font color="#CCCCCC"> use the go GDP client to send</font>

784
00:34:15,668 --> 00:34:22,100
HTTP requests<font color="#E5E5E5"> and assert itself in the</font>

785
00:34:18,139 --> 00:34:24,889
user agent<font color="#E5E5E5"> as chrome 67</font><font color="#CCCCCC"> now if I have a</font>

786
00:34:22,100 --> 00:34:27,679
<font color="#E5E5E5">finger a good fingerprint directory</font><font color="#CCCCCC"> that</font>

787
00:34:24,889 --> 00:34:31,250
would you know that<font color="#CCCCCC"> would obviously</font>

788
00:34:27,679 --> 00:34:34,429
<font color="#E5E5E5">stand out so we can both validate the</font>

789
00:34:31,250 --> 00:34:37,730
assertions<font color="#CCCCCC"> of real browsers</font><font color="#E5E5E5"> sorry or</font>

790
00:34:34,429 --> 00:34:40,369
detect impersonators another useful tool

791
00:34:37,730 --> 00:34:42,409
is for<font color="#E5E5E5"> a toe detection and forensics</font>

792
00:34:40,369 --> 00:34:45,830
maybe if we<font color="#E5E5E5"> can look at that in that</font><font color="#CCCCCC"> way</font>

793
00:34:42,409 --> 00:34:48,109
<font color="#E5E5E5">and and the last but a very interesting</font>

794
00:34:45,830 --> 00:34:51,469
<font color="#CCCCCC">point is that if you think about</font><font color="#E5E5E5"> it if</font>

795
00:34:48,109 --> 00:34:53,179
<font color="#CCCCCC">we see an IP from which originating a</font>

796
00:34:51,469 --> 00:34:55,368
large amount of fingerprints<font color="#E5E5E5"> of</font>

797
00:34:53,179 --> 00:34:56,899
especially<font color="#CCCCCC"> of</font><font color="#E5E5E5"> valid browsers we can then</font>

798
00:34:55,369 --> 00:34:59,869
try and<font color="#CCCCCC"> make some assumptions about this</font>

799
00:34:56,899 --> 00:35:02,960
IP<font color="#E5E5E5"> this could be a VPN exit node or some</font>

800
00:34:59,869 --> 00:35:04,580
kind<font color="#CCCCCC"> of an anomalous proxy or this is a</font>

801
00:35:02,960 --> 00:35:07,220
signal by itself so<font color="#E5E5E5"> that's very</font>

802
00:35:04,580 --> 00:35:09,650
<font color="#E5E5E5">interesting</font><font color="#CCCCCC"> now I've added this</font><font color="#E5E5E5"> last</font>

803
00:35:07,220 --> 00:35:12,410
line<font color="#E5E5E5"> to the comments and I don't know if</font>

804
00:35:09,650 --> 00:35:14,119
you are<font color="#CCCCCC"> dealing in the attacker start of</font>

805
00:35:12,410 --> 00:35:16,609
the defender side or forensic<font color="#E5E5E5"> side</font>

806
00:35:14,119 --> 00:35:19,790
<font color="#E5E5E5">whatever but whenever you are using</font>

807
00:35:16,609 --> 00:35:21,560
fingerprinting best results<font color="#E5E5E5"> are obtained</font>

808
00:35:19,790 --> 00:35:23,779
when you are combining<font color="#E5E5E5"> fingerprints from</font>

809
00:35:21,560 --> 00:35:24,980
different players don't<font color="#E5E5E5"> only do</font>

810
00:35:23,780 --> 00:35:27,140
application<font color="#E5E5E5"> or finger</font>

811
00:35:24,980 --> 00:35:34,099
<font color="#E5E5E5">you can you have other layers in between</font>

812
00:35:27,140 --> 00:35:36,529
<font color="#E5E5E5">and use them as much as you</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> so what</font>

813
00:35:34,099 --> 00:35:38,750
are<font color="#CCCCCC"> my key takeaways for</font><font color="#E5E5E5"> you hopefully</font>

814
00:35:36,530 --> 00:35:41,300
<font color="#CCCCCC">by</font><font color="#E5E5E5"> now you you should have</font><font color="#CCCCCC"> some basic</font>

815
00:35:38,750 --> 00:35:44,570
good understanding of how<font color="#CCCCCC"> HTTP 2 works</font>

816
00:35:41,300 --> 00:35:46,970
<font color="#E5E5E5">where are the key advantages</font><font color="#CCCCCC"> of HTTP 2</font>

817
00:35:44,570 --> 00:35:50,240
over 1 what<font color="#E5E5E5"> are the key</font><font color="#CCCCCC"> elements the</font>

818
00:35:46,970 --> 00:35:53,359
flow<font color="#E5E5E5"> the key differences between</font><font color="#CCCCCC"> SCP 1</font><font color="#E5E5E5"> &</font>

819
00:35:50,240 --> 00:35:55,310
2 hopefully by<font color="#E5E5E5"> now you are</font><font color="#CCCCCC"> a wearing of</font>

820
00:35:53,359 --> 00:35:57,950
the fingerprinting capabilities of<font color="#CCCCCC"> what</font>

821
00:35:55,310 --> 00:36:00,560
which data could<font color="#CCCCCC"> be exposed</font><font color="#E5E5E5"> about your</font>

822
00:35:57,950 --> 00:36:02,629
client when<font color="#E5E5E5"> you are using</font><font color="#CCCCCC"> H 2</font><font color="#E5E5E5"> and I gave</font>

823
00:36:00,560 --> 00:36:06,020
you<font color="#CCCCCC"> some</font><font color="#E5E5E5"> initial concept of how we can</font>

824
00:36:02,630 --> 00:36:09,380
<font color="#E5E5E5">try and obfuscate that and last but not</font>

825
00:36:06,020 --> 00:36:11,509
least the proposed fingerprints the

826
00:36:09,380 --> 00:36:14,660
elements which once we chose to listen

827
00:36:11,510 --> 00:36:20,320
to live out and some real-world<font color="#CCCCCC"> examples</font>

828
00:36:14,660 --> 00:36:20,319
and use<font color="#E5E5E5"> cases questions</font>

829
00:36:26,190 --> 00:36:28,820
yeah

830
00:36:42,690 --> 00:36:48,430
yeah well there's some kind of a logic

831
00:36:45,550 --> 00:36:50,560
and the flags within the frame<font color="#E5E5E5"> could</font>

832
00:36:48,430 --> 00:36:53,529
indicate<font color="#E5E5E5"> that</font><font color="#CCCCCC"> for example</font><font color="#E5E5E5"> the headers</font>

833
00:36:50,560 --> 00:36:54,850
frame headers could be contained in more

834
00:36:53,530 --> 00:36:57,040
than one<font color="#E5E5E5"> headers frame and</font><font color="#CCCCCC"> there's</font><font color="#E5E5E5"> a</font>

835
00:36:54,850 --> 00:36:59,140
flag which called end headers and if

836
00:36:57,040 --> 00:37:01,029
that<font color="#E5E5E5"> flag is not set then the</font>

837
00:36:59,140 --> 00:37:02,170
application knows that<font color="#E5E5E5"> it should expect</font>

838
00:37:01,030 --> 00:37:04,630
another frame which is<font color="#E5E5E5"> called</font>

839
00:37:02,170 --> 00:37:08,710
continuation frame until it is meeting

840
00:37:04,630 --> 00:37:11,410
<font color="#E5E5E5">frame with a flag and so that would be</font>

841
00:37:08,710 --> 00:37:13,420
the all kinds<font color="#CCCCCC"> of flags and</font><font color="#E5E5E5"> mechanism</font>

842
00:37:11,410 --> 00:37:13,960
within<font color="#E5E5E5"> the RFC</font><font color="#CCCCCC"> too but that's a good</font>

843
00:37:13,420 --> 00:37:18,360
<font color="#E5E5E5">question</font>

844
00:37:13,960 --> 00:37:18,360
thank you yeah

845
00:37:24,820 --> 00:37:29,050
the question was was this something<font color="#CCCCCC"> that</font>

846
00:37:27,340 --> 00:37:37,510
<font color="#E5E5E5">would go</font><font color="#CCCCCC"> away when browsers update</font>

847
00:37:29,050 --> 00:37:40,600
themselves well we've we've<font color="#CCCCCC"> done that</font>

848
00:37:37,510 --> 00:37:44,620
research<font color="#CCCCCC"> for more than a year ago</font><font color="#E5E5E5"> early</font>

849
00:37:40,600 --> 00:37:46,660
2017 and browsers have keep kept on

850
00:37:44,620 --> 00:37:50,049
updating themselves<font color="#CCCCCC"> and we see no</font>

851
00:37:46,660 --> 00:37:52,390
evidences<font color="#E5E5E5"> and this is true especially</font>

852
00:37:50,050 --> 00:37:53,890
<font color="#E5E5E5">for automation libraries where we have</font>

853
00:37:52,390 --> 00:37:59,379
software which is using all kinds of

854
00:37:53,890 --> 00:38:01,060
<font color="#E5E5E5">libraries</font><font color="#CCCCCC"> for HTTP too and they don't</font>

855
00:37:59,380 --> 00:38:02,800
always<font color="#E5E5E5"> you know update themselves</font><font color="#CCCCCC"> and</font>

856
00:38:01,060 --> 00:38:04,570
recompile with different libraries so I

857
00:38:02,800 --> 00:38:08,020
think the fingerprint is<font color="#E5E5E5"> quite</font>

858
00:38:04,570 --> 00:38:09,340
sustainable though<font color="#E5E5E5"> you know if</font><font color="#CCCCCC"> there</font>

859
00:38:08,020 --> 00:38:10,600
would be<font color="#E5E5E5"> any changes introduced you</font>

860
00:38:09,340 --> 00:38:12,160
would see them as long<font color="#E5E5E5"> as you have</font>

861
00:38:10,600 --> 00:38:15,040
visibility<font color="#CCCCCC"> into</font><font color="#E5E5E5"> the traffic</font><font color="#CCCCCC"> you would</font>

862
00:38:12,160 --> 00:38:18,160
see the changes which<font color="#CCCCCC"> is a</font><font color="#E5E5E5"> fingerprint</font>

863
00:38:15,040 --> 00:38:20,770
can<font color="#E5E5E5"> be dynamic per version that's very</font>

864
00:38:18,160 --> 00:38:23,770
<font color="#E5E5E5">interesting but the other question</font><font color="#CCCCCC"> is</font>

865
00:38:20,770 --> 00:38:26,850
this is specific<font color="#CCCCCC"> for the browser and</font><font color="#E5E5E5"> the</font>

866
00:38:23,770 --> 00:38:30,370
server<font color="#E5E5E5"> like can it be cross browser or</font>

867
00:38:26,850 --> 00:38:32,170
cross server<font color="#E5E5E5"> across domain yes that's</font>

868
00:38:30,370 --> 00:38:34,270
why I said<font color="#E5E5E5"> you should combine</font><font color="#CCCCCC"> several</font>

869
00:38:32,170 --> 00:38:36,460
layers of<font color="#E5E5E5"> fingerprinting you you don't</font>

870
00:38:34,270 --> 00:38:39,160
get the best general arity when<font color="#E5E5E5"> only</font>

871
00:38:36,460 --> 00:38:41,770
relying like on you know<font color="#E5E5E5"> h2 fingerprint</font>

872
00:38:39,160 --> 00:38:44,200
you can still have clusters<font color="#CCCCCC"> of</font><font color="#E5E5E5"> different</font>

873
00:38:41,770 --> 00:38:47,170
<font color="#E5E5E5">browsers using the same settings by the</font>

874
00:38:44,200 --> 00:38:49,210
way since HTTP<font color="#E5E5E5"> 2 is mostly over TLS the</font>

875
00:38:47,170 --> 00:38:51,700
most convenient<font color="#E5E5E5"> way to observe the</font>

876
00:38:49,210 --> 00:38:54,130
traffic is you have two ways one of<font color="#E5E5E5"> them</font>

877
00:38:51,700 --> 00:38:56,919
is<font color="#CCCCCC"> just installed your</font><font color="#E5E5E5"> own</font><font color="#CCCCCC"> ng httpd</font>

878
00:38:54,130 --> 00:38:59,590
server and it has a very verbose and

879
00:38:56,920 --> 00:39:02,890
<font color="#E5E5E5">clear logs as you've seen and the second</font>

880
00:38:59,590 --> 00:39:06,790
one is used chrome net internals<font color="#E5E5E5"> that</font>

881
00:39:02,890 --> 00:39:08,500
would show you a complete you know

882
00:39:06,790 --> 00:39:10,690
verbal log of all<font color="#E5E5E5"> the friends which are</font>

883
00:39:08,500 --> 00:39:12,490
exchanged<font color="#E5E5E5"> so those are both endpoints</font><font color="#CCCCCC"> of</font>

884
00:39:10,690 --> 00:39:14,170
<font color="#E5E5E5">the conversation you could set up</font>

885
00:39:12,490 --> 00:39:17,009
wireshark and some other stuff but<font color="#CCCCCC"> that</font>

886
00:39:14,170 --> 00:39:24,150
would require some<font color="#E5E5E5"> more</font><font color="#CCCCCC"> effort to do so</font>

887
00:39:17,010 --> 00:39:24,150
awesome yeah

888
00:39:30,740 --> 00:39:35,129
we have that<font color="#E5E5E5"> for some of the</font><font color="#CCCCCC"> browsers</font>

889
00:39:33,450 --> 00:39:37,140
<font color="#CCCCCC">not for all of them there are</font><font color="#E5E5E5"> some</font>

890
00:39:35,130 --> 00:39:39,020
<font color="#E5E5E5">browsers where it's impossible to</font>

891
00:39:37,140 --> 00:39:46,460
distinguish between different<font color="#CCCCCC"> versions</font>

892
00:39:39,020 --> 00:39:46,460
<font color="#CCCCCC">but some of them we can do that yeah I</font>

893
00:39:50,960 --> 00:39:56,970
think<font color="#E5E5E5"> you can</font><font color="#CCCCCC"> fingerprint</font><font color="#E5E5E5"> anything</font><font color="#CCCCCC"> I</font>

894
00:39:53,520 --> 00:40:00,780
mean everything which has<font color="#CCCCCC"> a</font><font color="#E5E5E5"> an expected</font>

895
00:39:56,970 --> 00:40:04,160
hard-coded consistent<font color="#CCCCCC"> behavior</font><font color="#E5E5E5"> even</font><font color="#CCCCCC"> the</font>

896
00:40:00,780 --> 00:40:07,320
<font color="#CCCCCC">the fact that</font><font color="#E5E5E5"> someone</font><font color="#CCCCCC"> is randomizing</font>

897
00:40:04,160 --> 00:40:09,120
things<font color="#E5E5E5"> is something that you can</font>

898
00:40:07,320 --> 00:40:11,790
fingerprint<font color="#E5E5E5"> the fact that it's never</font>

899
00:40:09,120 --> 00:40:14,460
coming<font color="#E5E5E5"> with the same values or keep on</font>

900
00:40:11,790 --> 00:40:17,430
randomizing so you can fingerprint

901
00:40:14,460 --> 00:40:19,910
anything that's a good<font color="#CCCCCC"> direction to</font>

902
00:40:17,430 --> 00:40:19,910
<font color="#E5E5E5">think about</font>

903
00:40:28,160 --> 00:40:30,970
yeah

904
00:40:43,150 --> 00:40:46,150
yeah

905
00:40:48,660 --> 00:40:52,868
that's a good question an interesting

906
00:40:50,830 --> 00:40:54,549
question<font color="#E5E5E5"> what happens if within</font><font color="#CCCCCC"> the same</font>

907
00:40:52,869 --> 00:40:57,640
<font color="#E5E5E5">browser on the same version you turn to</font>

908
00:40:54,550 --> 00:40:59,800
<font color="#E5E5E5">an incognito mode and the guy here was</font>

909
00:40:57,640 --> 00:41:01,810
saying<font color="#E5E5E5"> which the header</font><font color="#CCCCCC"> or the</font><font color="#E5E5E5"> HTTP 1</font>

910
00:40:59,800 --> 00:41:03,880
dot X is<font color="#E5E5E5"> we can observe them changing</font>

911
00:41:01,810 --> 00:41:06,460
within<font color="#E5E5E5"> the same version the header rows</font>

912
00:41:03,880 --> 00:41:08,260
of the regular HTTP headers and the

913
00:41:06,460 --> 00:41:10,359
<font color="#E5E5E5">truces</font><font color="#CCCCCC"> that I</font><font color="#E5E5E5"> have not tested that</font><font color="#CCCCCC"> and</font>

914
00:41:08,260 --> 00:41:15,840
now I'm very<font color="#E5E5E5"> eager to see that that's a</font>

915
00:41:10,359 --> 00:41:15,840
interesting yeah

916
00:41:24,280 --> 00:41:28,720
yeah well<font color="#CCCCCC"> well that's something</font><font color="#E5E5E5"> that</font>

917
00:41:26,380 --> 00:41:33,850
<font color="#E5E5E5">occupies us a lot</font><font color="#CCCCCC"> headless chrome and</font>

918
00:41:28,720 --> 00:41:37,029
all those headless browsers<font color="#E5E5E5"> it's not</font>

919
00:41:33,850 --> 00:41:39,700
100%<font color="#CCCCCC"> effective</font><font color="#E5E5E5"> to distinguish them from</font>

920
00:41:37,030 --> 00:42:02,230
real<font color="#E5E5E5"> chrome or h2 is not the place you</font>

921
00:41:39,700 --> 00:42:03,910
<font color="#CCCCCC">should look at yeah</font><font color="#E5E5E5"> for my side</font><font color="#CCCCCC"> Channel</font>

922
00:42:02,230 --> 00:42:05,320
can<font color="#E5E5E5"> you observe the encrypted traffic</font>

923
00:42:03,910 --> 00:42:07,540
and know<font color="#E5E5E5"> that this is</font><font color="#CCCCCC"> a settings frame</font>

924
00:42:05,320 --> 00:42:18,760
I'm not trying understood the question

925
00:42:07,540 --> 00:42:20,590
yet you have to be one<font color="#E5E5E5"> of the endpoints</font>

926
00:42:18,760 --> 00:42:23,230
<font color="#E5E5E5">yes unless it's going over clear text</font>

927
00:42:20,590 --> 00:42:25,720
but if it's over<font color="#CCCCCC"> I haven't tried that</font>

928
00:42:23,230 --> 00:42:29,410
<font color="#E5E5E5">but logic says that yeah you would have</font>

929
00:42:25,720 --> 00:42:31,649
<font color="#CCCCCC">to be you</font><font color="#E5E5E5"> know aside to the conversation</font>

930
00:42:29,410 --> 00:42:36,279
to actually fingerprint or a proxy

931
00:42:31,650 --> 00:42:44,520
<font color="#E5E5E5">within in the middle to actually be able</font>

932
00:42:36,280 --> 00:42:44,520
<font color="#E5E5E5">to</font><font color="#CCCCCC"> do that</font><font color="#E5E5E5"> over encrypted</font><font color="#CCCCCC"> Channel yeah</font>

933
00:42:51,230 --> 00:42:56,020
yeah<font color="#CCCCCC"> no changes yeah</font>

934
00:43:02,880 --> 00:43:07,690
well proxies can<font color="#CCCCCC"> add headers or things</font>

935
00:43:05,680 --> 00:43:09,940
like<font color="#E5E5E5"> that</font><font color="#CCCCCC"> but the the proxies that I've</font>

936
00:43:07,690 --> 00:43:12,430
<font color="#CCCCCC">mentioned</font><font color="#E5E5E5"> which are for HTTP</font><font color="#CCCCCC"> - that they</font>

937
00:43:09,940 --> 00:43:15,400
don't do it<font color="#CCCCCC"> I'm talking about</font><font color="#E5E5E5"> pure HTTP</font>

938
00:43:12,430 --> 00:43:17,379
- proxies not proxies that<font color="#CCCCCC"> do</font><font color="#E5E5E5"> on the</font>

939
00:43:15,400 --> 00:43:19,240
upstream edge HTTP - and then<font color="#E5E5E5"> translate</font>

940
00:43:17,380 --> 00:43:21,460
<font color="#E5E5E5">it to</font><font color="#CCCCCC"> http 1 which is not really the</font>

941
00:43:19,240 --> 00:43:25,269
<font color="#CCCCCC">case but</font><font color="#E5E5E5"> for HTTP - proxies if you'd</font>

942
00:43:21,460 --> 00:43:27,010
used like<font color="#CCCCCC"> for example</font><font color="#E5E5E5"> MIT</font><font color="#CCCCCC"> M proxy</font><font color="#E5E5E5"> the</font>

943
00:43:25,269 --> 00:43:29,558
server would<font color="#E5E5E5"> not be able to</font><font color="#CCCCCC"> see anything</font>

944
00:43:27,010 --> 00:43:31,750
<font color="#E5E5E5">MIT M has its own fingerprint his own</font>

945
00:43:29,559 --> 00:43:33,519
way<font color="#CCCCCC"> of setting up a TCP connection with</font>

946
00:43:31,750 --> 00:43:35,890
the<font color="#CCCCCC"> server and the server would be</font>

947
00:43:33,519 --> 00:43:38,140
completely blind to the things that<font color="#CCCCCC"> your</font>

948
00:43:35,890 --> 00:43:44,670
client<font color="#E5E5E5"> your browser is sending</font><font color="#CCCCCC"> - to the</font>

949
00:43:38,140 --> 00:43:52,240
proxy<font color="#E5E5E5"> no not that I've noticed</font>

950
00:43:44,670 --> 00:43:58,500
<font color="#E5E5E5">ok</font><font color="#CCCCCC"> ok</font><font color="#E5E5E5"> thank</font><font color="#CCCCCC"> you very much guys</font>

951
00:43:52,240 --> 00:43:58,500
[Applause]

