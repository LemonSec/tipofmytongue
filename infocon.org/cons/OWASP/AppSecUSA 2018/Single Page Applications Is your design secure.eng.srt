1
00:00:03,259 --> 00:00:07,259
<font color="#E5E5E5">all right</font>

2
00:00:05,220 --> 00:00:10,260
first thank<font color="#E5E5E5"> you it's Friday it's</font>

3
00:00:07,259 --> 00:00:13,200
afternoon<font color="#CCCCCC"> it's sunny outside and thank</font>

4
00:00:10,260 --> 00:00:14,519
you guys<font color="#E5E5E5"> for being here</font><font color="#CCCCCC"> to see</font><font color="#E5E5E5"> us what</font>

5
00:00:13,200 --> 00:00:17,038
talking<font color="#E5E5E5"> about a little bit</font><font color="#CCCCCC"> on single</font>

6
00:00:14,519 --> 00:00:20,300
page applications<font color="#E5E5E5"> is your design secure</font>

7
00:00:17,039 --> 00:00:22,740
so I'm<font color="#CCCCCC"> Raphael this</font><font color="#E5E5E5"> is Murali</font>

8
00:00:20,300 --> 00:00:24,810
we are security engineers with Microsoft

9
00:00:22,740 --> 00:00:26,939
<font color="#CCCCCC">more specific were part of the serpent</font>

10
00:00:24,810 --> 00:00:30,538
is one of the red<font color="#E5E5E5"> teams with Microsoft</font>

11
00:00:26,939 --> 00:00:33,149
<font color="#E5E5E5">our team provides services for Xbox and</font>

12
00:00:30,539 --> 00:00:36,690
Windows as<font color="#CCCCCC"> well and that's a little</font><font color="#E5E5E5"> bit</font>

13
00:00:33,149 --> 00:00:41,430
<font color="#E5E5E5">of for ourselves</font><font color="#CCCCCC"> so we'll talk a little</font>

14
00:00:36,690 --> 00:00:45,199
<font color="#E5E5E5">bit today on why SPX why they're popular</font>

15
00:00:41,430 --> 00:00:49,050
right<font color="#CCCCCC"> now right</font><font color="#E5E5E5"> they are lighter faster</font>

16
00:00:45,200 --> 00:00:51,780
easier to<font color="#E5E5E5"> port to mobile you have a tons</font>

17
00:00:49,050 --> 00:00:55,530
of new frameworks out there<font color="#E5E5E5"> angular</font>

18
00:00:51,780 --> 00:00:58,079
react most proper ones<font color="#CCCCCC"> you name</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> that</font>

19
00:00:55,530 --> 00:01:01,260
make easier for you to<font color="#E5E5E5"> transition</font><font color="#CCCCCC"> from</font>

20
00:00:58,079 --> 00:01:05,129
this all the way<font color="#E5E5E5"> to do web application</font>

21
00:01:01,260 --> 00:01:08,908
with MVC<font color="#E5E5E5"> spring you know all those kind</font>

22
00:01:05,129 --> 00:01:09,960
<font color="#E5E5E5">of ancient 90s early 2000 frameworks</font><font color="#CCCCCC"> in</font>

23
00:01:08,909 --> 00:01:11,369
this presentation<font color="#E5E5E5"> we're</font><font color="#CCCCCC"> going</font><font color="#E5E5E5"> to</font>

24
00:01:09,960 --> 00:01:14,009
<font color="#E5E5E5">describe a little bit of the security</font>

25
00:01:11,369 --> 00:01:15,570
pitfalls that<font color="#E5E5E5"> affect you on the process</font>

26
00:01:14,010 --> 00:01:17,490
of<font color="#E5E5E5"> migrating from this traditional web</font>

27
00:01:15,570 --> 00:01:20,250
application<font color="#CCCCCC"> development to single page</font>

28
00:01:17,490 --> 00:01:24,179
applications<font color="#CCCCCC"> a little bit on background</font>

29
00:01:20,250 --> 00:01:26,270
<font color="#E5E5E5">old model right it used to be you have a</font>

30
00:01:24,180 --> 00:01:29,659
browser of course about publication

31
00:01:26,270 --> 00:01:33,990
browser makes a request<font color="#E5E5E5"> server process</font>

32
00:01:29,659 --> 00:01:37,530
<font color="#E5E5E5">returns you an HTML simple fit for the</font>

33
00:01:33,990 --> 00:01:39,899
caveat here<font color="#CCCCCC"> is every time that you</font><font color="#E5E5E5"> have</font>

34
00:01:37,530 --> 00:01:42,780
<font color="#CCCCCC">to refresh the</font><font color="#E5E5E5"> web page browser</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> make</font>

35
00:01:39,900 --> 00:01:45,710
<font color="#E5E5E5">another request server process it send</font>

36
00:01:42,780 --> 00:01:47,880
you full<font color="#E5E5E5"> backup HTML to your browser</font>

37
00:01:45,710 --> 00:01:50,070
<font color="#E5E5E5">this new paradigm single page</font>

38
00:01:47,880 --> 00:01:53,250
applications<font color="#E5E5E5"> beautiful you still have a</font>

39
00:01:50,070 --> 00:01:56,669
browser<font color="#E5E5E5"> make a request server process</font>

40
00:01:53,250 --> 00:02:00,119
will<font color="#E5E5E5"> get back static HTML some</font><font color="#CCCCCC"> Jason's</font>

41
00:01:56,670 --> 00:02:01,469
some JavaScript the caveat here is<font color="#E5E5E5"> every</font>

42
00:02:00,119 --> 00:02:03,329
time<font color="#CCCCCC"> that the browser</font><font color="#E5E5E5"> needs to</font><font color="#CCCCCC"> update</font>

43
00:02:01,469 --> 00:02:05,939
<font color="#E5E5E5">the UI</font><font color="#CCCCCC"> it will make a call</font><font color="#E5E5E5"> back</font><font color="#CCCCCC"> to the</font>

44
00:02:03,329 --> 00:02:08,220
server sending<font color="#E5E5E5"> JSON data and</font><font color="#CCCCCC"> the Refresh</font>

45
00:02:05,939 --> 00:02:09,538
<font color="#E5E5E5">and the UI will happen locally</font><font color="#CCCCCC"> without</font>

46
00:02:08,220 --> 00:02:11,700
need of<font color="#CCCCCC"> having a server to process</font>

47
00:02:09,538 --> 00:02:13,970
<font color="#CCCCCC">another request</font><font color="#E5E5E5"> or render or generate</font>

48
00:02:11,700 --> 00:02:18,000
HTML back to you

49
00:02:13,970 --> 00:02:20,190
and this kind of<font color="#CCCCCC"> there's a we have a</font>

50
00:02:18,000 --> 00:02:23,670
transition<font color="#CCCCCC"> right on this stateful versus</font>

51
00:02:20,190 --> 00:02:26,550
stateless applications<font color="#E5E5E5"> right on the old</font>

52
00:02:23,670 --> 00:02:30,179
days you have section variables<font color="#CCCCCC"> view</font>

53
00:02:26,550 --> 00:02:33,030
<font color="#CCCCCC">state cookies</font><font color="#E5E5E5"> for you to keep track of</font>

54
00:02:30,180 --> 00:02:34,950
your of<font color="#CCCCCC"> your request</font><font color="#E5E5E5"> each request</font>

55
00:02:33,030 --> 00:02:37,740
<font color="#CCCCCC">depends on each other the previous</font>

56
00:02:34,950 --> 00:02:40,230
<font color="#CCCCCC">request</font><font color="#E5E5E5"> depends on the next request and</font>

57
00:02:37,740 --> 00:02:42,150
so on<font color="#E5E5E5"> with single page applications</font><font color="#CCCCCC"> they</font>

58
00:02:40,230 --> 00:02:45,030
are<font color="#E5E5E5"> different each request will happen</font>

59
00:02:42,150 --> 00:02:46,410
in isolation<font color="#CCCCCC"> that means that the pre-tax</font>

60
00:02:45,030 --> 00:02:49,830
requests are<font color="#CCCCCC"> not depend on</font><font color="#E5E5E5"> the previous</font>

61
00:02:46,410 --> 00:02:52,470
and so on that what that<font color="#CCCCCC"> means that you</font>

62
00:02:49,830 --> 00:02:54,900
<font color="#E5E5E5">have to verify for</font><font color="#CCCCCC"> authorization and</font>

63
00:02:52,470 --> 00:02:57,090
authentication<font color="#CCCCCC"> every time</font><font color="#E5E5E5"> that you send</font>

64
00:02:54,900 --> 00:02:59,790
a request<font color="#CCCCCC"> to the</font><font color="#E5E5E5"> server</font><font color="#CCCCCC"> they simplify</font>

65
00:02:57,090 --> 00:03:04,040
stuff<font color="#E5E5E5"> but we need to make sure</font><font color="#CCCCCC"> that we</font>

66
00:02:59,790 --> 00:03:07,440
don't assume anything<font color="#E5E5E5"> so going into</font>

67
00:03:04,040 --> 00:03:09,420
authentication<font color="#E5E5E5"> in a traditional web app</font>

68
00:03:07,440 --> 00:03:11,250
what you see here is a<font color="#E5E5E5"> diagram</font>

69
00:03:09,420 --> 00:03:14,070
<font color="#E5E5E5">describing authentication with an</font>

70
00:03:11,250 --> 00:03:16,560
identity provider<font color="#E5E5E5"> so the first time the</font>

71
00:03:14,070 --> 00:03:19,440
<font color="#CCCCCC">user logs</font><font color="#E5E5E5"> in twice to access a web</font>

72
00:03:16,560 --> 00:03:21,330
application<font color="#CCCCCC"> they get redirected</font><font color="#E5E5E5"> by the</font>

73
00:03:19,440 --> 00:03:24,900
web application to<font color="#E5E5E5"> the identity provider</font>

74
00:03:21,330 --> 00:03:26,610
<font color="#CCCCCC">the user logs in gets back a token</font><font color="#E5E5E5"> the</font>

75
00:03:24,900 --> 00:03:28,769
browser sends our token<font color="#E5E5E5"> back</font><font color="#CCCCCC"> to the</font>

76
00:03:26,610 --> 00:03:31,050
server<font color="#CCCCCC"> that creates a session on</font><font color="#E5E5E5"> the</font>

77
00:03:28,769 --> 00:03:33,720
server side<font color="#E5E5E5"> and sends back</font><font color="#CCCCCC"> a cookie to</font>

78
00:03:31,050 --> 00:03:35,459
the browser and any subsequent<font color="#CCCCCC"> requests</font>

79
00:03:33,720 --> 00:03:39,840
from<font color="#E5E5E5"> the</font><font color="#CCCCCC"> browser will send the cookie</font>

80
00:03:35,459 --> 00:03:43,290
along and identify<font color="#E5E5E5"> itself</font><font color="#CCCCCC"> in a single</font>

81
00:03:39,840 --> 00:03:45,900
page application the implementation<font color="#E5E5E5"> on</font>

82
00:03:43,290 --> 00:03:47,970
<font color="#E5E5E5">the server side is much simpler</font><font color="#CCCCCC"> so the</font>

83
00:03:45,900 --> 00:03:50,670
only thing that<font color="#CCCCCC"> the server has to</font><font color="#E5E5E5"> do is</font>

84
00:03:47,970 --> 00:03:53,370
check whether a valid token<font color="#E5E5E5"> is coming</font>

85
00:03:50,670 --> 00:03:55,470
along with the request<font color="#E5E5E5"> so it is up to</font>

86
00:03:53,370 --> 00:03:57,690
<font color="#E5E5E5">the browser or</font><font color="#CCCCCC"> the JavaScript that's</font>

87
00:03:55,470 --> 00:04:00,180
<font color="#E5E5E5">running on the browser to make sure that</font>

88
00:03:57,690 --> 00:04:02,670
it attaches or token with every request

89
00:04:00,180 --> 00:04:04,650
<font color="#E5E5E5">so in this case the browser would</font>

90
00:04:02,670 --> 00:04:06,480
automatically go to<font color="#E5E5E5"> the identity</font>

91
00:04:04,650 --> 00:04:09,420
provider if it doesn't have a valid

92
00:04:06,480 --> 00:04:12,090
token<font color="#CCCCCC"> and get a</font><font color="#E5E5E5"> token by logging the</font>

93
00:04:09,420 --> 00:04:13,950
user in once the user<font color="#CCCCCC"> was logged in</font>

94
00:04:12,090 --> 00:04:17,100
it makes requests to the server<font color="#E5E5E5"> using</font>

95
00:04:13,950 --> 00:04:20,700
JSON<font color="#CCCCCC"> preferably and</font><font color="#E5E5E5"> sends the token</font>

96
00:04:17,100 --> 00:04:23,810
along with every<font color="#E5E5E5"> request so what we see</font>

97
00:04:20,700 --> 00:04:26,909
a<font color="#E5E5E5"> lot is JWT tokens being used and</font>

98
00:04:23,810 --> 00:04:30,450
<font color="#E5E5E5">that's kind of the standard for single</font>

99
00:04:26,910 --> 00:04:32,310
phase<font color="#CCCCCC"> applications now right now what</font>

100
00:04:30,450 --> 00:04:33,810
all this means is<font color="#CCCCCC"> that we</font><font color="#E5E5E5"> are going to</font>

101
00:04:32,310 --> 00:04:36,750
make the cookie<font color="#CCCCCC"> Monts are</font><font color="#E5E5E5"> really sad</font>

102
00:04:33,810 --> 00:04:40,190
<font color="#E5E5E5">because</font><font color="#CCCCCC"> we are</font><font color="#E5E5E5"> going to say that we</font>

103
00:04:36,750 --> 00:04:43,289
shouldn't<font color="#CCCCCC"> use cookies anymore and any</font>

104
00:04:40,190 --> 00:04:46,890
s.p.a should really use the<font color="#CCCCCC"> token based</font>

105
00:04:43,289 --> 00:04:48,780
<font color="#E5E5E5">approach for authentication but this</font>

106
00:04:46,890 --> 00:04:51,150
also means<font color="#E5E5E5"> that things</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> you take for</font>

107
00:04:48,780 --> 00:04:55,500
<font color="#CCCCCC">granted</font><font color="#E5E5E5"> with cookies are no longer there</font>

108
00:04:51,150 --> 00:04:58,169
<font color="#E5E5E5">so things like</font><font color="#CCCCCC"> same-side cookies or HTTP</font>

109
00:04:55,500 --> 00:05:00,930
only and secure<font color="#E5E5E5"> flags</font><font color="#CCCCCC"> that apply to</font>

110
00:04:58,169 --> 00:05:04,560
cookies<font color="#CCCCCC"> you do</font><font color="#E5E5E5"> not have that option with</font>

111
00:05:00,930 --> 00:05:06,479
tokens<font color="#E5E5E5"> and this means</font><font color="#CCCCCC"> that you still</font>

112
00:05:04,560 --> 00:05:08,789
need that<font color="#E5E5E5"> functionality</font><font color="#CCCCCC"> and protection</font>

113
00:05:06,479 --> 00:05:14,940
<font color="#E5E5E5">but</font><font color="#CCCCCC"> you have to do it on your own in</font>

114
00:05:08,789 --> 00:05:18,479
<font color="#E5E5E5">JavaScript so one advantage</font><font color="#CCCCCC"> that you</font>

115
00:05:14,940 --> 00:05:20,280
still have with the token<font color="#E5E5E5"> based approach</font>

116
00:05:18,479 --> 00:05:24,330
is<font color="#CCCCCC"> that</font><font color="#E5E5E5"> you don't have to worry about</font>

117
00:05:20,280 --> 00:05:27,140
<font color="#E5E5E5">CSRF anymore and this is one of the</font>

118
00:05:24,330 --> 00:05:30,840
reasons why<font color="#E5E5E5"> if you look at the</font><font color="#CCCCCC"> latest OS</font>

119
00:05:27,140 --> 00:05:34,530
<font color="#CCCCCC">top 10</font><font color="#E5E5E5"> CSRF has been removed in the lace</font>

120
00:05:30,840 --> 00:05:35,760
<font color="#CCCCCC">terse 2017 version and that's because of</font>

121
00:05:34,530 --> 00:05:38,880
the popularity of single phase

122
00:05:35,760 --> 00:05:40,919
application architecture we are the

123
00:05:38,880 --> 00:05:44,969
cookie based authentication is going

124
00:05:40,919 --> 00:05:48,659
<font color="#E5E5E5">away in it's more token based and one</font>

125
00:05:44,970 --> 00:05:51,060
reason why<font color="#CCCCCC"> CSRF is not a problem</font><font color="#E5E5E5"> anymore</font>

126
00:05:48,660 --> 00:05:53,010
is that<font color="#E5E5E5"> unlike a cookie</font><font color="#CCCCCC"> that gets sent</font>

127
00:05:51,060 --> 00:05:55,710
with every request<font color="#E5E5E5"> automatically by the</font>

128
00:05:53,010 --> 00:05:57,510
browser<font color="#E5E5E5"> the token is not sent</font>

129
00:05:55,710 --> 00:05:59,640
automatically by the browser<font color="#E5E5E5"> the</font>

130
00:05:57,510 --> 00:06:01,979
JavaScript<font color="#E5E5E5"> code that's running on the</font>

131
00:05:59,640 --> 00:06:05,700
browser has<font color="#CCCCCC"> to send the</font><font color="#E5E5E5"> token by</font>

132
00:06:01,979 --> 00:06:10,349
attaching<font color="#CCCCCC"> it to the header by explicit</font>

133
00:06:05,700 --> 00:06:14,940
code so it's now no<font color="#CCCCCC"> longer like a single</font>

134
00:06:10,349 --> 00:06:18,090
<font color="#E5E5E5">flick attack anymore there's also other</font>

135
00:06:14,940 --> 00:06:20,460
changes<font color="#E5E5E5"> that happen when you move</font><font color="#CCCCCC"> from a</font>

136
00:06:18,090 --> 00:06:23,580
traditional<font color="#CCCCCC"> to single page application</font>

137
00:06:20,460 --> 00:06:26,280
<font color="#E5E5E5">and one of the things you take for</font>

138
00:06:23,580 --> 00:06:28,440
<font color="#CCCCCC">granted is the cache control header</font><font color="#E5E5E5"> so</font>

139
00:06:26,280 --> 00:06:30,330
typically<font color="#E5E5E5"> you would</font><font color="#CCCCCC"> use a</font><font color="#E5E5E5"> cache control</font>

140
00:06:28,440 --> 00:06:33,349
header in a traditional web application

141
00:06:30,330 --> 00:06:35,669
to prevent caching of sensitive phases

142
00:06:33,349 --> 00:06:38,490
<font color="#CCCCCC">but in the new world</font>

143
00:06:35,669 --> 00:06:40,049
<font color="#CCCCCC">cache control headers are not really</font>

144
00:06:38,490 --> 00:06:42,810
relevant<font color="#E5E5E5"> in</font>

145
00:06:40,050 --> 00:06:45,840
because even if<font color="#E5E5E5"> you say cache-control</font>

146
00:06:42,810 --> 00:06:48,270
<font color="#E5E5E5">none the JavaScript on</font><font color="#CCCCCC"> the face could</font>

147
00:06:45,840 --> 00:06:52,289
still store<font color="#E5E5E5"> sensitive data into a local</font>

148
00:06:48,270 --> 00:06:54,840
<font color="#E5E5E5">stories or recession stories so this</font>

149
00:06:52,289 --> 00:06:56,969
means that<font color="#E5E5E5"> you had to look at other</font>

150
00:06:54,840 --> 00:06:59,039
things<font color="#E5E5E5"> and not just</font><font color="#CCCCCC"> ahead those that are</font>

151
00:06:56,970 --> 00:07:02,240
<font color="#E5E5E5">coming with every request to determine</font>

152
00:06:59,039 --> 00:07:06,060
whether you are<font color="#E5E5E5"> storing things securely</font>

153
00:07:02,240 --> 00:07:09,240
so<font color="#E5E5E5"> we'll go into a small demo</font><font color="#CCCCCC"> the intent</font>

154
00:07:06,060 --> 00:07:13,370
of<font color="#E5E5E5"> this demo is to show why</font>

155
00:07:09,240 --> 00:07:16,319
storing data<font color="#E5E5E5"> in the difference</font><font color="#CCCCCC"> I also</font>

156
00:07:13,370 --> 00:07:18,719
<font color="#CCCCCC">store reads is different</font><font color="#E5E5E5"> like for</font>

157
00:07:16,319 --> 00:07:21,199
<font color="#E5E5E5">example we</font><font color="#CCCCCC"> have local storage and</font>

158
00:07:18,719 --> 00:07:23,849
session<font color="#E5E5E5"> storage</font><font color="#CCCCCC"> available and how</font>

159
00:07:21,199 --> 00:07:27,030
storing something<font color="#E5E5E5"> in local storage could</font>

160
00:07:23,849 --> 00:07:32,940
<font color="#E5E5E5">be a security concern</font><font color="#CCCCCC"> for you</font><font color="#E5E5E5"> so in this</font>

161
00:07:27,030 --> 00:07:35,840
demo we<font color="#CCCCCC"> have a and B</font><font color="#E5E5E5"> introducing like</font>

162
00:07:32,940 --> 00:07:40,550
<font color="#CCCCCC">two web applications that</font><font color="#E5E5E5"> we created</font>

163
00:07:35,840 --> 00:07:40,549
<font color="#CCCCCC">they both have the same functionality</font>

164
00:07:40,819 --> 00:07:44,960
<font color="#E5E5E5">let me just drag them over</font>

165
00:07:50,090 --> 00:07:56,359
so what we have here<font color="#CCCCCC"> is a web</font>

166
00:07:53,540 --> 00:07:58,790
application<font color="#E5E5E5"> where it is a message board</font>

167
00:07:56,360 --> 00:08:00,830
application<font color="#E5E5E5"> where you can log in and</font>

168
00:07:58,790 --> 00:08:03,199
write<font color="#E5E5E5"> messages and reply to messages</font>

169
00:08:00,830 --> 00:08:06,229
from<font color="#CCCCCC"> other people on the board</font>

170
00:08:03,199 --> 00:08:07,910
so what<font color="#E5E5E5"> I</font><font color="#CCCCCC"> just showed now as you log</font>

171
00:08:06,229 --> 00:08:11,090
<font color="#CCCCCC">into</font><font color="#E5E5E5"> your application</font>

172
00:08:07,910 --> 00:08:13,010
and in the first<font color="#E5E5E5"> instance of this</font>

173
00:08:11,090 --> 00:08:15,799
message board application<font color="#E5E5E5"> we would be</font>

174
00:08:13,010 --> 00:08:19,460
storing the tokens<font color="#CCCCCC"> that you get</font><font color="#E5E5E5"> from</font>

175
00:08:15,800 --> 00:08:21,919
logging<font color="#E5E5E5"> in into the session storage so</font>

176
00:08:19,460 --> 00:08:24,289
to view this<font color="#E5E5E5"> you can go to the developer</font>

177
00:08:21,919 --> 00:08:27,530
tools<font color="#E5E5E5"> and there in the session storage</font>

178
00:08:24,290 --> 00:08:31,100
<font color="#E5E5E5">you can see that the tokens are being</font>

179
00:08:27,530 --> 00:08:33,439
present<font color="#E5E5E5"> so yeah like it's blocked out</font>

180
00:08:31,100 --> 00:08:35,990
but<font color="#E5E5E5"> the tokens were there in the session</font>

181
00:08:33,440 --> 00:08:37,900
<font color="#CCCCCC">storage</font><font color="#E5E5E5"> but now if</font><font color="#CCCCCC"> the user then decides</font>

182
00:08:35,990 --> 00:08:41,539
a closer browser without logging<font color="#E5E5E5"> out</font>

183
00:08:37,900 --> 00:08:43,760
<font color="#E5E5E5">let's see what happens</font><font color="#CCCCCC"> so we have</font>

184
00:08:41,539 --> 00:08:46,850
written a simple<font color="#E5E5E5"> script that looks into</font>

185
00:08:43,760 --> 00:08:49,550
the session<font color="#E5E5E5"> storage file that is used by</font>

186
00:08:46,850 --> 00:08:51,410
Chrome so if you just run this code<font color="#CCCCCC"> you</font>

187
00:08:49,550 --> 00:08:53,510
see that it does<font color="#E5E5E5"> not return anything</font>

188
00:08:51,410 --> 00:08:55,579
<font color="#E5E5E5">like once you close</font><font color="#CCCCCC"> a row so</font><font color="#E5E5E5"> the first</font>

189
00:08:53,510 --> 00:08:58,279
session storage<font color="#E5E5E5"> is cleared automatically</font>

190
00:08:55,580 --> 00:09:02,180
and there's no tokens available<font color="#CCCCCC"> on the</font>

191
00:08:58,279 --> 00:09:04,520
disk<font color="#E5E5E5"> so now let's go to the second</font>

192
00:09:02,180 --> 00:09:09,339
<font color="#CCCCCC">application which is very similar to the</font>

193
00:09:04,520 --> 00:09:12,860
<font color="#E5E5E5">first one where you log in again and</font>

194
00:09:09,339 --> 00:09:17,860
yeah<font color="#CCCCCC"> so once you logged in</font><font color="#E5E5E5"> we can now</font>

195
00:09:12,860 --> 00:09:17,860
see that if<font color="#E5E5E5"> we</font><font color="#CCCCCC"> go to the developer tools</font>

196
00:09:18,730 --> 00:09:24,740
<font color="#E5E5E5">in</font><font color="#CCCCCC"> this application</font><font color="#E5E5E5"> they do not use a</font>

197
00:09:22,400 --> 00:09:27,170
session<font color="#E5E5E5"> storage but rather use</font><font color="#CCCCCC"> the local</font>

198
00:09:24,740 --> 00:09:30,110
storage<font color="#CCCCCC"> so here you</font><font color="#E5E5E5"> can see that the</font>

199
00:09:27,170 --> 00:09:32,589
blocked out code is actually<font color="#CCCCCC"> the token</font>

200
00:09:30,110 --> 00:09:35,450
<font color="#E5E5E5">that's being stored</font><font color="#CCCCCC"> in the browser so</font>

201
00:09:32,589 --> 00:09:37,839
<font color="#CCCCCC">let's see what happens when the user</font><font color="#E5E5E5"> now</font>

202
00:09:35,450 --> 00:09:42,110
closes<font color="#E5E5E5"> the browser without logging out</font>

203
00:09:37,839 --> 00:09:44,930
<font color="#E5E5E5">so he logs out but now we have on the</font>

204
00:09:42,110 --> 00:09:48,440
same script<font color="#CCCCCC"> on the local file which is</font>

205
00:09:44,930 --> 00:09:50,930
used<font color="#E5E5E5"> to for storing</font><font color="#CCCCCC"> the local storage</font>

206
00:09:48,440 --> 00:09:52,820
data<font color="#E5E5E5"> and you can see that it still</font>

207
00:09:50,930 --> 00:09:57,050
contains a token the browser does<font color="#CCCCCC"> not</font>

208
00:09:52,820 --> 00:10:00,950
clear that<font color="#CCCCCC"> automatically so when you're</font>

209
00:09:57,050 --> 00:10:02,349
defining your<font color="#E5E5E5"> software make sure that</font>

210
00:10:00,950 --> 00:10:05,400
you use

211
00:10:02,350 --> 00:10:09,040
in storage instead<font color="#E5E5E5"> of local storage</font><font color="#CCCCCC"> for</font>

212
00:10:05,400 --> 00:10:15,699
<font color="#CCCCCC">any sensitive</font><font color="#E5E5E5"> data so that's</font><font color="#CCCCCC"> the key</font>

213
00:10:09,040 --> 00:10:19,510
<font color="#E5E5E5">takeaway that we have now the next point</font>

214
00:10:15,700 --> 00:10:22,840
is something that's going to<font color="#E5E5E5"> be hard for</font>

215
00:10:19,510 --> 00:10:25,540
security experts<font color="#E5E5E5"> to accept but this is</font>

216
00:10:22,840 --> 00:10:28,810
<font color="#E5E5E5">something that we have to consider</font>

217
00:10:25,540 --> 00:10:29,829
because<font color="#CCCCCC"> of the design of</font><font color="#E5E5E5"> the single</font>

218
00:10:28,810 --> 00:10:34,300
phase<font color="#CCCCCC"> applications</font>

219
00:10:29,830 --> 00:10:38,640
so a typical<font color="#CCCCCC"> s.p.a application would</font>

220
00:10:34,300 --> 00:10:41,949
have a front end and<font color="#E5E5E5"> a back</font><font color="#CCCCCC"> end API</font><font color="#E5E5E5"> that</font>

221
00:10:38,640 --> 00:10:43,689
interacts with<font color="#E5E5E5"> the front end by</font><font color="#CCCCCC"> giving</font>

222
00:10:41,950 --> 00:10:46,810
it new data that's<font color="#E5E5E5"> refreshed on the</font>

223
00:10:43,690 --> 00:10:48,670
server on the client<font color="#CCCCCC"> side and typically</font>

224
00:10:46,810 --> 00:10:50,829
what we see<font color="#E5E5E5"> is that the front end needs</font>

225
00:10:48,670 --> 00:10:53,500
<font color="#E5E5E5">to talk to multiple back-end a pas</font><font color="#CCCCCC"> and</font>

226
00:10:50,830 --> 00:10:56,290
these different back-end ApS would be in

227
00:10:53,500 --> 00:10:58,450
<font color="#E5E5E5">different</font><font color="#CCCCCC"> domains</font><font color="#E5E5E5"> what this means is</font>

228
00:10:56,290 --> 00:11:00,130
that now you<font color="#E5E5E5"> have the same</font><font color="#CCCCCC"> origin policy</font>

229
00:10:58,450 --> 00:11:03,430
<font color="#E5E5E5">in JavaScript that</font><font color="#CCCCCC"> prevents you from</font>

230
00:11:00,130 --> 00:11:06,670
accessing<font color="#E5E5E5"> this different domains to make</font>

231
00:11:03,430 --> 00:11:08,890
<font color="#CCCCCC">request</font><font color="#E5E5E5"> and get the data back and the</font>

232
00:11:06,670 --> 00:11:13,660
support for<font color="#CCCCCC"> that is the fossils</font><font color="#E5E5E5"> in</font>

233
00:11:08,890 --> 00:11:15,490
resource sharing and typically you<font color="#CCCCCC"> have</font>

234
00:11:13,660 --> 00:11:18,430
<font color="#CCCCCC">to use course with a single phase</font>

235
00:11:15,490 --> 00:11:20,710
application and the easiest option<font color="#CCCCCC"> for</font>

236
00:11:18,430 --> 00:11:22,870
course is to allow<font color="#CCCCCC"> wildcard like allow</font>

237
00:11:20,710 --> 00:11:26,050
all<font color="#E5E5E5"> origins to access your resource and</font>

238
00:11:22,870 --> 00:11:29,170
this gets flagged<font color="#E5E5E5"> in all security audits</font>

239
00:11:26,050 --> 00:11:31,150
as being insecure<font color="#E5E5E5"> but most of the time</font>

240
00:11:29,170 --> 00:11:34,209
it is<font color="#CCCCCC"> not really insecure that's the</font>

241
00:11:31,150 --> 00:11:38,050
thing<font color="#CCCCCC"> that we wanted to show here</font><font color="#E5E5E5"> so</font>

242
00:11:34,210 --> 00:11:41,890
I'll go<font color="#E5E5E5"> into a demo for this again so</font>

243
00:11:38,050 --> 00:11:43,599
why this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> ok is because in modern</font>

244
00:11:41,890 --> 00:11:46,210
application we assume<font color="#CCCCCC"> that you're not</font>

245
00:11:43,600 --> 00:11:48,670
<font color="#E5E5E5">using cookies anymore if you still have</font>

246
00:11:46,210 --> 00:11:51,580
to depend on cookies then<font color="#E5E5E5"> an access</font>

247
00:11:48,670 --> 00:11:53,829
control of<font color="#CCCCCC"> wildcard star is not a good</font>

248
00:11:51,580 --> 00:11:56,440
design<font color="#E5E5E5"> but if it is a token based</font>

249
00:11:53,830 --> 00:12:00,670
application where you send the token<font color="#E5E5E5"> in</font>

250
00:11:56,440 --> 00:12:02,770
the header<font color="#CCCCCC"> then it should be</font><font color="#E5E5E5"> fine so let</font>

251
00:12:00,670 --> 00:12:08,229
me<font color="#CCCCCC"> just show a quick demo for that</font><font color="#E5E5E5"> as</font>

252
00:12:02,770 --> 00:12:11,130
well so what<font color="#E5E5E5"> we have here</font><font color="#CCCCCC"> is again</font><font color="#E5E5E5"> the</font>

253
00:12:08,230 --> 00:12:11,130
<font color="#CCCCCC">same application</font>

254
00:12:12,940 --> 00:12:21,370
so in this application<font color="#CCCCCC"> we scan it</font><font color="#E5E5E5"> with</font>

255
00:12:17,740 --> 00:12:23,260
book and then we see<font color="#CCCCCC"> that there is</font><font color="#E5E5E5"> a</font>

256
00:12:21,370 --> 00:12:25,960
crosses in was so sharing this<font color="#E5E5E5"> it's</font>

257
00:12:23,260 --> 00:12:28,360
notified as a warning<font color="#E5E5E5"> from both and it</font>

258
00:12:25,960 --> 00:12:30,520
shows<font color="#E5E5E5"> that okay you have access control</font>

259
00:12:28,360 --> 00:12:33,250
allow origin<font color="#CCCCCC"> set to stop</font><font color="#E5E5E5"> and that's</font><font color="#CCCCCC"> the</font>

260
00:12:30,520 --> 00:12:37,090
reason that the tool<font color="#CCCCCC"> book flax that</font><font color="#E5E5E5"> as</font>

261
00:12:33,250 --> 00:12:39,430
an issue<font color="#E5E5E5"> and</font><font color="#CCCCCC"> burp is also good</font><font color="#E5E5E5"> where it</font>

262
00:12:37,090 --> 00:12:42,550
gives you an advisory<font color="#E5E5E5"> and the reasoning</font>

263
00:12:39,430 --> 00:12:45,280
why it flagged that<font color="#E5E5E5"> as an issue so you</font>

264
00:12:42,550 --> 00:12:48,189
can you<font color="#E5E5E5"> know see</font><font color="#CCCCCC"> that it is a valid</font>

265
00:12:45,280 --> 00:12:50,680
<font color="#E5E5E5">concern</font><font color="#CCCCCC"> as</font><font color="#E5E5E5"> far as</font><font color="#CCCCCC"> Bob is concerned</font><font color="#E5E5E5"> but</font>

266
00:12:48,190 --> 00:12:52,210
Bob<font color="#CCCCCC"> does not fully understand the</font>

267
00:12:50,680 --> 00:12:54,160
architecture<font color="#CCCCCC"> of the application it only</font>

268
00:12:52,210 --> 00:12:56,740
looks at<font color="#E5E5E5"> the requests and the responses</font>

269
00:12:54,160 --> 00:12:58,420
that<font color="#E5E5E5"> come back and it packs potential</font>

270
00:12:56,740 --> 00:13:01,090
issues<font color="#CCCCCC"> it's up to</font><font color="#E5E5E5"> us to actually</font>

271
00:12:58,420 --> 00:13:04,689
<font color="#CCCCCC">validate that</font><font color="#E5E5E5"> it is a valid security</font>

272
00:13:01,090 --> 00:13:07,960
issue or<font color="#CCCCCC"> not</font><font color="#E5E5E5"> so how we validate is that</font>

273
00:13:04,690 --> 00:13:12,850
you can go<font color="#E5E5E5"> to the birth like request</font>

274
00:13:07,960 --> 00:13:15,010
history<font color="#CCCCCC"> and you</font><font color="#E5E5E5"> can see that what</font><font color="#CCCCCC"> kind</font>

275
00:13:12,850 --> 00:13:18,910
of authentication is being used<font color="#E5E5E5"> for this</font>

276
00:13:15,010 --> 00:13:20,950
<font color="#E5E5E5">request</font><font color="#CCCCCC"> so if you actually</font><font color="#E5E5E5"> look at the</font>

277
00:13:18,910 --> 00:13:23,350
request<font color="#E5E5E5"> that is being</font><font color="#CCCCCC"> sent you see that</font>

278
00:13:20,950 --> 00:13:25,450
it<font color="#E5E5E5"> is not</font><font color="#CCCCCC"> a cookie</font><font color="#E5E5E5"> based request it it</font>

279
00:13:23,350 --> 00:13:27,460
has an authorization header and the

280
00:13:25,450 --> 00:13:29,530
authorization<font color="#CCCCCC"> header</font><font color="#E5E5E5"> has a bear or token</font>

281
00:13:27,460 --> 00:13:31,810
associated with it so it is<font color="#CCCCCC"> probably</font>

282
00:13:29,530 --> 00:13:34,569
<font color="#E5E5E5">fine so you have to validate each of</font>

283
00:13:31,810 --> 00:13:36,189
these warnings from<font color="#CCCCCC"> Bob and actually go</font>

284
00:13:34,570 --> 00:13:38,490
deeper into<font color="#E5E5E5"> the axioms because</font><font color="#CCCCCC"> search is</font>

285
00:13:36,190 --> 00:13:42,040
being<font color="#E5E5E5"> made to make sure that it's a</font>

286
00:13:38,490 --> 00:13:43,900
concern or not<font color="#E5E5E5"> so this is where you as</font>

287
00:13:42,040 --> 00:13:46,240
<font color="#CCCCCC">security for professionals would have to</font>

288
00:13:43,900 --> 00:13:49,300
dig deeper<font color="#CCCCCC"> and actually find the false</font>

289
00:13:46,240 --> 00:13:51,930
positives<font color="#E5E5E5"> from the real issues so that's</font>

290
00:13:49,300 --> 00:13:54,250
<font color="#E5E5E5">the end of the demo so all of this makes</font>

291
00:13:51,930 --> 00:13:56,969
you know the<font color="#E5E5E5"> single phase application</font>

292
00:13:54,250 --> 00:13:58,810
<font color="#E5E5E5">sound like a great security design</font>

293
00:13:56,970 --> 00:14:00,310
<font color="#CCCCCC">because you</font><font color="#E5E5E5"> don't have to worry about</font>

294
00:13:58,810 --> 00:14:03,670
<font color="#E5E5E5">CSRF you don't have to worry about</font>

295
00:14:00,310 --> 00:14:05,800
course<font color="#CCCCCC"> the</font><font color="#E5E5E5"> framework automatically</font>

296
00:14:03,670 --> 00:14:09,790
protects you however<font color="#E5E5E5"> there are some</font>

297
00:14:05,800 --> 00:14:13,569
<font color="#E5E5E5">issues with</font><font color="#CCCCCC"> it as well so I'll invite</font><font color="#E5E5E5"> my</font>

298
00:14:09,790 --> 00:14:15,819
file<font color="#CCCCCC"> again to talk over the</font><font color="#E5E5E5"> issues so as</font>

299
00:14:13,570 --> 00:14:19,690
more automation<font color="#CCCCCC"> we have yella phone in a</font>

300
00:14:15,820 --> 00:14:21,970
room or<font color="#CCCCCC"> sad elephant</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> single page</font>

301
00:14:19,690 --> 00:14:25,780
applications<font color="#E5E5E5"> again data</font><font color="#CCCCCC"> plant depend</font>

302
00:14:21,970 --> 00:14:26,499
heavily on JavaScript<font color="#E5E5E5"> right so remember</font>

303
00:14:25,780 --> 00:14:28,779
<font color="#E5E5E5">from</font><font color="#CCCCCC"> Gloria</font>

304
00:14:26,499 --> 00:14:30,279
what we have is basically<font color="#E5E5E5"> their UI</font>

305
00:14:28,779 --> 00:14:31,899
making<font color="#E5E5E5"> JavaScript requests in the</font>

306
00:14:30,279 --> 00:14:34,029
<font color="#CCCCCC">backend</font><font color="#E5E5E5"> and you're getting JSON back</font>

307
00:14:31,899 --> 00:14:37,479
<font color="#E5E5E5">open it into UI so all this is pure</font>

308
00:14:34,029 --> 00:14:40,659
<font color="#E5E5E5">JavaScript</font><font color="#CCCCCC"> and and the</font><font color="#E5E5E5"> problem with that</font>

309
00:14:37,479 --> 00:14:43,179
<font color="#E5E5E5">is that cross-site scripting becomes the</font>

310
00:14:40,659 --> 00:14:44,619
holy grail<font color="#CCCCCC"> for an attacker</font><font color="#E5E5E5"> if you have a</font>

311
00:14:43,179 --> 00:14:45,968
cross-site scripting in a single page

312
00:14:44,619 --> 00:14:47,289
application that uses token-based

313
00:14:45,969 --> 00:14:49,959
authentication

314
00:14:47,289 --> 00:14:52,329
that's the<font color="#CCCCCC"> Tauri game over fortunately</font>

315
00:14:49,959 --> 00:14:54,218
we<font color="#E5E5E5"> have some good allies on our side</font>

316
00:14:52,329 --> 00:14:56,939
<font color="#E5E5E5">right we have frameworks like angular</font>

317
00:14:54,219 --> 00:15:00,819
and reacted<font color="#E5E5E5"> are safe by default right</font>

318
00:14:56,939 --> 00:15:02,889
however we need to<font color="#E5E5E5"> make some some be</font>

319
00:15:00,819 --> 00:15:05,348
very careful on some specifics<font color="#E5E5E5"> right</font>

320
00:15:02,889 --> 00:15:07,449
like angler or react or any other

321
00:15:05,349 --> 00:15:09,339
JavaScript around you they rely on

322
00:15:07,449 --> 00:15:11,079
dynamic templates<font color="#E5E5E5"> it's like pretty much</font>

323
00:15:09,339 --> 00:15:14,139
<font color="#E5E5E5">you're injecting</font><font color="#CCCCCC"> third-party code in</font>

324
00:15:11,079 --> 00:15:15,848
your<font color="#E5E5E5"> application</font><font color="#CCCCCC"> so be</font><font color="#E5E5E5"> careful when</font>

325
00:15:14,139 --> 00:15:17,439
<font color="#CCCCCC">you're using</font><font color="#E5E5E5"> dynamic templates or using</font>

326
00:15:15,849 --> 00:15:19,839
third-party<font color="#E5E5E5"> libraries making sure that</font>

327
00:15:17,439 --> 00:15:21,519
you trust that that you have gone

328
00:15:19,839 --> 00:15:23,729
<font color="#CCCCCC">through</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> secure assessment or something</font>

329
00:15:21,519 --> 00:15:27,609
that you make<font color="#CCCCCC"> sure it's safe for you</font>

330
00:15:23,729 --> 00:15:29,349
<font color="#E5E5E5">also Dom API is like inner HTML they are</font>

331
00:15:27,609 --> 00:15:31,359
search<font color="#E5E5E5"> first process creating make sure</font>

332
00:15:29,349 --> 00:15:35,679
that<font color="#E5E5E5"> you're using</font><font color="#CCCCCC"> that in a safer safe</font>

333
00:15:31,359 --> 00:15:38,499
way<font color="#E5E5E5"> and review your application on so</font>

334
00:15:35,679 --> 00:15:40,059
angular for example angler has some some

335
00:15:38,499 --> 00:15:42,729
ways for you to bypass<font color="#E5E5E5"> cross-site</font>

336
00:15:40,059 --> 00:15:46,089
scripting<font color="#E5E5E5"> protections like bypass</font>

337
00:15:42,729 --> 00:15:47,439
through HTML<font color="#E5E5E5"> by</font><font color="#CCCCCC"> press</font><font color="#E5E5E5"> trust URL</font><font color="#CCCCCC"> this</font>

338
00:15:46,089 --> 00:15:50,079
<font color="#E5E5E5">might be neither for application in</font><font color="#CCCCCC"> case</font>

339
00:15:47,439 --> 00:15:53,079
<font color="#E5E5E5">you want</font><font color="#CCCCCC"> to learn</font><font color="#E5E5E5"> a load an external</font>

340
00:15:50,079 --> 00:15:55,779
resource<font color="#CCCCCC"> however make</font><font color="#E5E5E5"> sure that when</font>

341
00:15:53,079 --> 00:15:57,279
you're<font color="#CCCCCC"> using</font><font color="#E5E5E5"> that you again trust the</font>

342
00:15:55,779 --> 00:15:59,559
research<font color="#CCCCCC"> that</font><font color="#E5E5E5"> you're loading</font><font color="#CCCCCC"> that's the</font>

343
00:15:57,279 --> 00:16:00,879
<font color="#E5E5E5">the tricky part</font><font color="#CCCCCC"> here right if you</font><font color="#E5E5E5"> are</font>

344
00:15:59,559 --> 00:16:02,589
disabled<font color="#CCCCCC"> those security controls by</font>

345
00:16:00,879 --> 00:16:04,929
default make sure that you trust<font color="#E5E5E5"> what</font>

346
00:16:02,589 --> 00:16:06,970
you're<font color="#CCCCCC"> loading on we have created a demo</font>

347
00:16:04,929 --> 00:16:08,858
<font color="#E5E5E5">for that</font><font color="#CCCCCC"> as well to show kind</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> the big</font>

348
00:16:06,970 --> 00:16:10,720
impact and<font color="#CCCCCC"> a cross-site scripting can</font>

349
00:16:08,859 --> 00:16:12,489
<font color="#CCCCCC">have</font><font color="#E5E5E5"> on a single page application so</font>

350
00:16:10,720 --> 00:16:14,199
we're going<font color="#CCCCCC"> back to the same same</font>

351
00:16:12,489 --> 00:16:17,079
application that we<font color="#E5E5E5"> have created</font><font color="#CCCCCC"> before</font>

352
00:16:14,199 --> 00:16:20,728
and<font color="#E5E5E5"> we</font><font color="#CCCCCC"> intentionally added</font><font color="#E5E5E5"> a cross-site</font>

353
00:16:17,079 --> 00:16:20,728
scripting vulnerability into that one

354
00:16:26,410 --> 00:16:30,939
and that's why we don't<font color="#E5E5E5"> have live demos</font>

355
00:16:35,290 --> 00:16:43,310
so again same<font color="#E5E5E5"> message world application</font>

356
00:16:39,230 --> 00:16:46,100
<font color="#E5E5E5">okay and we added by on purpose</font><font color="#CCCCCC"> a</font>

357
00:16:43,310 --> 00:16:51,099
cross-site scripting on<font color="#E5E5E5"> this page is it</font>

358
00:16:46,100 --> 00:16:53,420
running<font color="#E5E5E5"> no it's not ready there we go</font>

359
00:16:51,100 --> 00:16:56,300
so if you go to<font color="#E5E5E5"> the Security tab which</font>

360
00:16:53,420 --> 00:16:58,490
it has a process capability<font color="#CCCCCC"> we're going</font>

361
00:16:56,300 --> 00:17:03,050
to show<font color="#E5E5E5"> you kind</font><font color="#CCCCCC"> of basics of course the</font>

362
00:16:58,490 --> 00:17:04,250
<font color="#CCCCCC">scripts</font><font color="#E5E5E5"> so our initial payload it's a</font>

363
00:17:03,050 --> 00:17:05,659
simple payload just to show that<font color="#CCCCCC"> they</font>

364
00:17:04,250 --> 00:17:09,530
have<font color="#CCCCCC"> across</font><font color="#E5E5E5"> this creepy here you have</font>

365
00:17:05,660 --> 00:17:11,690
our<font color="#CCCCCC"> glorified</font><font color="#E5E5E5"> alert box but we're not</font>

366
00:17:09,530 --> 00:17:14,810
<font color="#E5E5E5">looking for alert box we're looking for</font>

367
00:17:11,690 --> 00:17:18,140
a real<font color="#CCCCCC"> way</font><font color="#E5E5E5"> to to steal user credentials</font>

368
00:17:14,810 --> 00:17:20,710
here<font color="#E5E5E5"> so we crafted a new payload</font><font color="#CCCCCC"> and we</font>

369
00:17:18,140 --> 00:17:24,290
have a website<font color="#E5E5E5"> where we control and</font>

370
00:17:20,710 --> 00:17:26,360
using this payload<font color="#E5E5E5"> we're going to inject</font>

371
00:17:24,290 --> 00:17:27,920
<font color="#E5E5E5">this</font><font color="#CCCCCC"> javascript read from section</font>

372
00:17:26,359 --> 00:17:29,570
<font color="#CCCCCC">storage and at this point</font><font color="#E5E5E5"> it doesn't</font>

373
00:17:27,920 --> 00:17:31,580
matter<font color="#E5E5E5"> if you're using section storage</font>

374
00:17:29,570 --> 00:17:32,990
<font color="#E5E5E5">if you're using local storage</font><font color="#CCCCCC"> the</font>

375
00:17:31,580 --> 00:17:34,939
difference between<font color="#E5E5E5"> local</font><font color="#CCCCCC"> starting sector</font>

376
00:17:32,990 --> 00:17:36,470
storage is<font color="#E5E5E5"> just about persistency it's</font>

377
00:17:34,940 --> 00:17:38,540
not<font color="#E5E5E5"> about encryption</font><font color="#CCCCCC"> it's not</font><font color="#E5E5E5"> about</font>

378
00:17:36,470 --> 00:17:40,790
safety at<font color="#E5E5E5"> all it's just about close the</font>

379
00:17:38,540 --> 00:17:43,070
browser<font color="#E5E5E5"> section is gone with section</font>

380
00:17:40,790 --> 00:17:44,180
storage so again<font color="#E5E5E5"> we're reading from the</font>

381
00:17:43,070 --> 00:17:47,179
section storage<font color="#E5E5E5"> a token with the</font>

382
00:17:44,180 --> 00:17:51,140
cross-site scripting so we're going<font color="#E5E5E5"> to</font>

383
00:17:47,180 --> 00:17:52,280
inject our payload into the page go into

384
00:17:51,140 --> 00:17:55,930
a website<font color="#CCCCCC"> that you control</font>

385
00:17:52,280 --> 00:17:58,340
voila that's the talking so again

386
00:17:55,930 --> 00:18:00,710
cross-site scripting<font color="#E5E5E5"> is the</font><font color="#CCCCCC"> holy grail</font><font color="#E5E5E5"> a</font>

387
00:17:58,340 --> 00:18:02,540
cross-site scripting in a single page

388
00:18:00,710 --> 00:18:05,870
application that uses token-based

389
00:18:02,540 --> 00:18:12,800
authentication is game over<font color="#CCCCCC"> so be</font>

390
00:18:05,870 --> 00:18:15,739
careful we still have some good things

391
00:18:12,800 --> 00:18:17,330
<font color="#E5E5E5">to protect us even if you have a</font>

392
00:18:15,740 --> 00:18:20,330
cross-site scripting error code

393
00:18:17,330 --> 00:18:22,970
CSP<font color="#E5E5E5"> content security policy is a defense</font>

394
00:18:20,330 --> 00:18:25,090
<font color="#E5E5E5">in</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> security people like us we love</font>

395
00:18:22,970 --> 00:18:28,220
<font color="#CCCCCC">defense-in-depth</font>

396
00:18:25,090 --> 00:18:30,470
<font color="#CCCCCC">CSP is a good</font><font color="#E5E5E5"> friend and and we should</font>

397
00:18:28,220 --> 00:18:32,750
always<font color="#E5E5E5"> be pushing for for that</font><font color="#CCCCCC"> scripts</font>

398
00:18:30,470 --> 00:18:35,060
<font color="#CCCCCC">yourself is a great example</font><font color="#E5E5E5"> of a policy</font>

399
00:18:32,750 --> 00:18:38,150
right that you would would allow your

400
00:18:35,060 --> 00:18:41,179
page to only<font color="#E5E5E5"> load</font><font color="#CCCCCC"> JavaScript from your</font>

401
00:18:38,150 --> 00:18:43,790
own<font color="#E5E5E5"> source however it's just a</font>

402
00:18:41,180 --> 00:18:46,310
<font color="#E5E5E5">mitigation</font><font color="#CCCCCC"> right you you you still have</font>

403
00:18:43,790 --> 00:18:48,800
a ways<font color="#CCCCCC"> to inject cross</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> you have</font>

404
00:18:46,310 --> 00:18:52,879
<font color="#E5E5E5">versa scripting using HTML mark</font>

405
00:18:48,800 --> 00:18:55,460
attacks on this one<font color="#CCCCCC"> and</font><font color="#E5E5E5"> also a caveat on</font>

406
00:18:52,880 --> 00:18:57,920
<font color="#E5E5E5">this one is</font><font color="#CCCCCC"> you have</font><font color="#E5E5E5"> like policies like</font>

407
00:18:55,460 --> 00:18:59,420
unsafe<font color="#E5E5E5"> inline and unsafe you've all that</font>

408
00:18:57,920 --> 00:19:03,800
it might be required<font color="#E5E5E5"> for some libraries</font>

409
00:18:59,420 --> 00:19:06,500
to execute on that<font color="#E5E5E5"> so this is make CSP</font>

410
00:19:03,800 --> 00:19:09,919
complex to<font color="#CCCCCC"> implement but I say</font><font color="#E5E5E5"> don't be</font>

411
00:19:06,500 --> 00:19:13,190
afraid of CSP<font color="#CCCCCC"> go implement CSP and a one</font>

412
00:19:09,920 --> 00:19:15,050
good example<font color="#CCCCCC"> of a</font><font color="#E5E5E5"> very nice way to</font>

413
00:19:13,190 --> 00:19:18,080
implement<font color="#E5E5E5"> or very nice implementation of</font>

414
00:19:15,050 --> 00:19:21,940
<font color="#E5E5E5">CSP is the github case there's two great</font>

415
00:19:18,080 --> 00:19:24,320
post blog<font color="#E5E5E5"> posts from from github from</font>

416
00:19:21,940 --> 00:19:27,380
<font color="#E5E5E5">2016-2017 one where they</font><font color="#CCCCCC"> describe</font><font color="#E5E5E5"> the</font>

417
00:19:24,320 --> 00:19:29,510
way that<font color="#CCCCCC"> they implemented</font><font color="#E5E5E5"> CSP and the</font>

418
00:19:27,380 --> 00:19:31,940
post evaluation<font color="#E5E5E5"> after one year that have</font>

419
00:19:29,510 --> 00:19:34,580
been<font color="#E5E5E5"> running at CSP policy CSP might be</font>

420
00:19:31,940 --> 00:19:39,560
tricky<font color="#E5E5E5"> might be heavy but</font><font color="#CCCCCC"> it's a butyl</font><font color="#E5E5E5"> I</font>

421
00:19:34,580 --> 00:19:40,240
it's a good<font color="#CCCCCC"> friend of</font><font color="#E5E5E5"> us so</font><font color="#CCCCCC"> take it back</font>

422
00:19:39,560 --> 00:19:43,399
<font color="#CCCCCC">to</font><font color="#E5E5E5"> Murali</font>

423
00:19:40,240 --> 00:19:47,270
so what are the key<font color="#CCCCCC"> takeaways from this</font>

424
00:19:43,400 --> 00:19:48,950
<font color="#E5E5E5">talk</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> what what we are</font><font color="#CCCCCC"> suggesting here</font>

425
00:19:47,270 --> 00:19:51,980
<font color="#CCCCCC">is</font><font color="#E5E5E5"> if you are</font><font color="#CCCCCC"> designing single page</font>

426
00:19:48,950 --> 00:19:53,810
applications<font color="#E5E5E5"> you should say goodbye to</font>

427
00:19:51,980 --> 00:19:57,080
cookies and use a token-based

428
00:19:53,810 --> 00:20:00,800
authentication applause the other thing

429
00:19:57,080 --> 00:20:03,470
which<font color="#CCCCCC"> is important is use session</font>

430
00:20:00,800 --> 00:20:06,169
<font color="#E5E5E5">storage for all your</font><font color="#CCCCCC"> sensitive data do</font>

431
00:20:03,470 --> 00:20:07,940
not<font color="#CCCCCC"> use local storage</font><font color="#E5E5E5"> or index DB or any</font>

432
00:20:06,170 --> 00:20:11,810
of the persistent<font color="#CCCCCC"> storage that's</font>

433
00:20:07,940 --> 00:20:14,390
available<font color="#E5E5E5"> to</font><font color="#CCCCCC"> JavaScript the other</font><font color="#E5E5E5"> may be</font>

434
00:20:11,810 --> 00:20:17,330
controversial part of<font color="#E5E5E5"> the talk is an</font>

435
00:20:14,390 --> 00:20:20,300
access control of allowing all<font color="#E5E5E5"> origins</font>

436
00:20:17,330 --> 00:20:22,720
the<font color="#E5E5E5"> wildcard star is okay as long as you</font>

437
00:20:20,300 --> 00:20:25,580
do<font color="#E5E5E5"> not use cookies in your application</font>

438
00:20:22,720 --> 00:20:27,860
and it may also<font color="#CCCCCC"> be</font><font color="#E5E5E5"> necessary for</font><font color="#CCCCCC"> your</font>

439
00:20:25,580 --> 00:20:29,689
design because<font color="#CCCCCC"> you are talking to</font>

440
00:20:27,860 --> 00:20:33,139
different<font color="#CCCCCC"> back-end API so</font><font color="#E5E5E5"> they are all</font>

441
00:20:29,690 --> 00:20:37,640
<font color="#E5E5E5">on different domains</font><font color="#CCCCCC"> so you need course</font>

442
00:20:33,140 --> 00:20:39,680
policies to<font color="#CCCCCC"> allow that and use you know</font>

443
00:20:37,640 --> 00:20:42,290
the framework support for preventing

444
00:20:39,680 --> 00:20:44,180
<font color="#E5E5E5">excesses like angular and react has lot</font>

445
00:20:42,290 --> 00:20:46,610
of default protections<font color="#E5E5E5"> to prevent</font>

446
00:20:44,180 --> 00:20:49,040
excesses<font color="#E5E5E5"> just use that and if you need</font>

447
00:20:46,610 --> 00:20:51,860
<font color="#E5E5E5">to bypass any of the default protections</font>

448
00:20:49,040 --> 00:20:53,090
just review<font color="#E5E5E5"> that code very carefully to</font>

449
00:20:51,860 --> 00:20:55,520
make sure<font color="#CCCCCC"> that you know what you're</font>

450
00:20:53,090 --> 00:20:57,709
doing and you have<font color="#E5E5E5"> thought</font><font color="#CCCCCC"> about all the</font>

451
00:20:55,520 --> 00:21:00,200
<font color="#CCCCCC">implications over there and the last</font>

452
00:20:57,710 --> 00:21:02,030
step is<font color="#CCCCCC"> use CSV whenever possible as a</font>

453
00:21:00,200 --> 00:21:02,700
defense in<font color="#E5E5E5"> depth it is</font><font color="#CCCCCC"> tricky to</font>

454
00:21:02,030 --> 00:21:04,440
implement

455
00:21:02,700 --> 00:21:06,930
and it takes<font color="#E5E5E5"> a long</font><font color="#CCCCCC"> time to actually</font>

456
00:21:04,440 --> 00:21:09,870
make<font color="#CCCCCC"> it get it working in a real-world</font>

457
00:21:06,930 --> 00:21:12,870
<font color="#E5E5E5">application</font><font color="#CCCCCC"> with all the scenarios that</font>

458
00:21:09,870 --> 00:21:15,449
<font color="#E5E5E5">you need to support but invest in</font><font color="#CCCCCC"> CSV</font>

459
00:21:12,870 --> 00:21:19,439
<font color="#E5E5E5">and these are key</font><font color="#CCCCCC"> things that we want to</font>

460
00:21:15,450 --> 00:21:38,820
say and<font color="#E5E5E5"> we say thank</font><font color="#CCCCCC"> you and we have</font>

461
00:21:19,440 --> 00:21:42,900
time for<font color="#E5E5E5"> some questions</font><font color="#CCCCCC"> so with what we</font>

462
00:21:38,820 --> 00:21:46,980
say here is this<font color="#CCCCCC"> CSV policy of strips so</font>

463
00:21:42,900 --> 00:21:49,860
self<font color="#CCCCCC"> what it means is that you cannot do</font>

464
00:21:46,980 --> 00:21:51,360
inline<font color="#E5E5E5"> JavaScript this is what exercies</font>

465
00:21:49,860 --> 00:21:53,820
tries to do it tries to<font color="#E5E5E5"> inject</font>

466
00:21:51,360 --> 00:21:56,159
JavaScript<font color="#E5E5E5"> into the page and execute it</font>

467
00:21:53,820 --> 00:21:58,740
in<font color="#E5E5E5"> line and that would be prevented by</font>

468
00:21:56,160 --> 00:22:01,650
this CSV policy<font color="#CCCCCC"> and this</font><font color="#E5E5E5"> is a very</font>

469
00:21:58,740 --> 00:22:03,900
<font color="#E5E5E5">strict</font><font color="#CCCCCC"> policy</font><font color="#E5E5E5"> and to get it implemented</font>

470
00:22:01,650 --> 00:22:06,090
you probably have to<font color="#E5E5E5"> work with the</font>

471
00:22:03,900 --> 00:22:09,000
libraries<font color="#CCCCCC"> that you</font><font color="#E5E5E5"> use because they are</font>

472
00:22:06,090 --> 00:22:10,490
<font color="#E5E5E5">probably using inline eval so that's the</font>

473
00:22:09,000 --> 00:22:14,250
challenge<font color="#CCCCCC"> that you have with that</font>

474
00:22:10,490 --> 00:22:16,560
<font color="#CCCCCC">scripts are self</font><font color="#E5E5E5"> it says only load</font>

475
00:22:14,250 --> 00:22:18,860
<font color="#E5E5E5">JavaScript from my own domain my own</font>

476
00:22:16,560 --> 00:22:18,860
source

477
00:22:25,860 --> 00:22:39,729
yeah so yeah<font color="#CCCCCC"> so yes</font><font color="#E5E5E5"> yeah so most single</font>

478
00:22:38,049 --> 00:22:41,730
phase applications use a token-based

479
00:22:39,730 --> 00:22:44,830
authentication

480
00:22:41,730 --> 00:22:46,659
implementation but there are certain

481
00:22:44,830 --> 00:22:49,389
<font color="#E5E5E5">single page applications that still use</font>

482
00:22:46,659 --> 00:22:52,000
cookies for authentication<font color="#CCCCCC"> in those</font>

483
00:22:49,390 --> 00:22:54,519
cases having a course for<font color="#CCCCCC"> save wildcard</font>

484
00:22:52,000 --> 00:22:58,350
<font color="#CCCCCC">stuff is not okay if you have to use</font>

485
00:22:54,519 --> 00:23:05,860
cookies it<font color="#CCCCCC"> is not okay to have</font><font color="#E5E5E5"> wildcard</font>

486
00:22:58,350 --> 00:23:07,658
yes<font color="#CCCCCC"> how can only then it is okay</font><font color="#E5E5E5"> yes it</font>

487
00:23:05,860 --> 00:23:09,370
is not<font color="#CCCCCC"> a problem for</font><font color="#E5E5E5"> it's not</font><font color="#CCCCCC"> a problem</font>

488
00:23:07,659 --> 00:23:13,950
<font color="#E5E5E5">for for a case like cross-site request</font>

489
00:23:09,370 --> 00:23:13,949
forgery yeah

490
00:23:24,669 --> 00:23:28,559
yes yeah

491
00:23:30,830 --> 00:23:38,429
no it's not like<font color="#E5E5E5"> that's a</font><font color="#CCCCCC"> cop so yeah</font>

492
00:23:35,220 --> 00:23:41,640
the question<font color="#E5E5E5"> was whether course is meant</font>

493
00:23:38,430 --> 00:23:44,190
to protect the<font color="#E5E5E5"> roots or server and not</font>

494
00:23:41,640 --> 00:23:45,900
the client side<font color="#E5E5E5"> but the way course is</font>

495
00:23:44,190 --> 00:23:48,540
implemented it is an implementation on

496
00:23:45,900 --> 00:23:50,940
<font color="#CCCCCC">the browser side</font><font color="#E5E5E5"> so it also implements</font>

497
00:23:48,540 --> 00:23:53,850
this course policy where it sees that

498
00:23:50,940 --> 00:23:56,550
are you making a<font color="#E5E5E5"> simple request or</font><font color="#CCCCCC"> a in</font>

499
00:23:53,850 --> 00:24:00,330
a<font color="#E5E5E5"> complicated complex request if it is a</font>

500
00:23:56,550 --> 00:24:02,460
simple<font color="#E5E5E5"> request</font><font color="#CCCCCC"> it just sends that across</font>

501
00:24:00,330 --> 00:24:04,860
without a<font color="#E5E5E5"> pre-flight if it is a complex</font>

502
00:24:02,460 --> 00:24:07,530
request<font color="#E5E5E5"> it makes a pre-flight request to</font>

503
00:24:04,860 --> 00:24:09,659
get the cost<font color="#CCCCCC"> policy and then make the</font>

504
00:24:07,530 --> 00:24:12,180
<font color="#E5E5E5">axle request so it is a client-side</font>

505
00:24:09,660 --> 00:24:14,280
implementation<font color="#E5E5E5"> it is</font><font color="#CCCCCC"> not to protect the</font>

506
00:24:12,180 --> 00:24:17,910
<font color="#E5E5E5">axle</font><font color="#CCCCCC"> resource the resource is just</font>

507
00:24:14,280 --> 00:24:19,320
saying how the browser<font color="#E5E5E5"> should behave if</font>

508
00:24:17,910 --> 00:24:20,610
the browser is<font color="#E5E5E5"> allow it to read that</font>

509
00:24:19,320 --> 00:24:22,530
resource or to access<font color="#CCCCCC"> that particular</font>

510
00:24:20,610 --> 00:24:23,850
<font color="#E5E5E5">resource is not on the server side</font><font color="#CCCCCC"> were</font>

511
00:24:22,530 --> 00:24:29,600
protecting is a client<font color="#E5E5E5"> side again</font>

512
00:24:23,850 --> 00:24:29,600
<font color="#CCCCCC">clients</font><font color="#E5E5E5"> I protect yeah go ahead</font>

513
00:24:42,440 --> 00:24:49,400
so I I<font color="#E5E5E5"> asked a more the secure flag and</font>

514
00:24:45,890 --> 00:24:51,140
cookies<font color="#CCCCCC"> so the secure</font><font color="#E5E5E5"> flag and cookies</font>

515
00:24:49,400 --> 00:24:54,350
<font color="#CCCCCC">all it does is make sure that the</font>

516
00:24:51,140 --> 00:25:02,660
<font color="#CCCCCC">cookies send over</font><font color="#E5E5E5"> HTTP there is another</font>

517
00:24:54,350 --> 00:25:05,000
one called<font color="#E5E5E5"> same site yeah</font><font color="#CCCCCC"> so there is so</font>

518
00:25:02,660 --> 00:25:07,340
yeah<font color="#E5E5E5"> like that's that's the whole</font>

519
00:25:05,000 --> 00:25:09,350
<font color="#E5E5E5">elephant in the</font><font color="#CCCCCC"> wrong a room thing like</font>

520
00:25:07,340 --> 00:25:12,350
in cookies you have something<font color="#E5E5E5"> called as</font>

521
00:25:09,350 --> 00:25:14,209
HTTP only flag which prevents like an

522
00:25:12,350 --> 00:25:17,300
exercise from accessing<font color="#CCCCCC"> your cookie</font>

523
00:25:14,210 --> 00:25:20,330
value<font color="#E5E5E5"> how it cook with tokens you don't</font>

524
00:25:17,300 --> 00:25:22,399
have that and you<font color="#CCCCCC"> still need to protect</font>

525
00:25:20,330 --> 00:25:25,100
<font color="#E5E5E5">your token and the only way is to</font>

526
00:25:22,400 --> 00:25:27,200
prevent<font color="#E5E5E5"> exercise now and this is what</font>

527
00:25:25,100 --> 00:25:29,060
the<font color="#CCCCCC"> future is like we are</font><font color="#E5E5E5"> all going</font><font color="#CCCCCC"> to</font>

528
00:25:27,200 --> 00:25:31,490
single<font color="#CCCCCC"> page</font><font color="#E5E5E5"> applications</font><font color="#CCCCCC"> we're not in</font>

529
00:25:29,060 --> 00:25:33,169
the tradition world anymore<font color="#CCCCCC"> and</font><font color="#E5E5E5"> yeah you</font>

530
00:25:31,490 --> 00:25:35,650
have<font color="#E5E5E5"> to worry about</font><font color="#CCCCCC"> access is a big</font>

531
00:25:33,170 --> 00:25:35,650
<font color="#CCCCCC">threat</font><font color="#E5E5E5"> now</font>

532
00:25:40,490 --> 00:25:46,460
yes yeah

533
00:25:44,210 --> 00:25:50,510
again this is going<font color="#E5E5E5"> back</font><font color="#CCCCCC"> to how browsers</font>

534
00:25:46,460 --> 00:25:53,810
<font color="#CCCCCC">behave so with cookies what the browser</font>

535
00:25:50,510 --> 00:25:56,600
sees is<font color="#CCCCCC"> that when I make a request to</font>

536
00:25:53,810 --> 00:25:59,419
domain a and I have a cookie for domain

537
00:25:56,600 --> 00:26:02,300
a it sends<font color="#E5E5E5"> that automatically so if it's</font>

538
00:25:59,420 --> 00:26:05,060
a emails request or if it's you<font color="#E5E5E5"> know</font>

539
00:26:02,300 --> 00:26:07,639
like a<font color="#E5E5E5"> forum post</font><font color="#CCCCCC"> these cookies get sent</font>

540
00:26:05,060 --> 00:26:09,740
automatically<font color="#E5E5E5"> by the browser</font><font color="#CCCCCC"> there is no</font>

541
00:26:07,640 --> 00:26:12,560
code was also<font color="#E5E5E5"> that</font><font color="#CCCCCC"> sensor cookie that</font>

542
00:26:09,740 --> 00:26:14,780
makes the cookie<font color="#CCCCCC"> wheel</font><font color="#E5E5E5"> send there</font><font color="#CCCCCC"> so</font>

543
00:26:12,560 --> 00:26:18,440
this is why<font color="#E5E5E5"> CSRF is a big problem</font>

544
00:26:14,780 --> 00:26:21,220
<font color="#E5E5E5">because without a CSRF token</font><font color="#CCCCCC"> another</font>

545
00:26:18,440 --> 00:26:23,840
page could make the post<font color="#CCCCCC"> request to</font><font color="#E5E5E5"> your</font>

546
00:26:21,220 --> 00:26:27,410
domain<font color="#E5E5E5"> and the cookies would get sent</font>

547
00:26:23,840 --> 00:26:28,730
<font color="#CCCCCC">automatically in case of tokens the</font>

548
00:26:27,410 --> 00:26:31,550
browser does not<font color="#E5E5E5"> send the token</font>

549
00:26:28,730 --> 00:26:33,520
automatically<font color="#E5E5E5"> you need some JavaScript</font>

550
00:26:31,550 --> 00:26:36,290
code<font color="#CCCCCC"> to run from your domain</font>

551
00:26:33,520 --> 00:26:39,590
<font color="#E5E5E5">specifically to send a token to</font><font color="#CCCCCC"> the</font>

552
00:26:36,290 --> 00:26:41,810
resource<font color="#E5E5E5"> so since the browser's out of</font>

553
00:26:39,590 --> 00:26:43,879
the pizza<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> just more secure and you</font>

554
00:26:41,810 --> 00:26:51,050
don't really<font color="#E5E5E5"> have to worry words like a</font>

555
00:26:43,880 --> 00:26:52,370
<font color="#E5E5E5">CSRF token in this case yes yes your</font>

556
00:26:51,050 --> 00:26:54,260
senior<font color="#CCCCCC"> authorization</font><font color="#E5E5E5"> on the header then</font>

557
00:26:52,370 --> 00:26:56,179
you have to explicitly<font color="#E5E5E5"> add that the</font>

558
00:26:54,260 --> 00:26:58,010
<font color="#E5E5E5">JavaScript you have to explicitly add</font>

559
00:26:56,180 --> 00:27:00,020
that to the header<font color="#E5E5E5"> in order to send you</font>

560
00:26:58,010 --> 00:27:08,870
authenticate<font color="#E5E5E5"> authorization request</font>

561
00:27:00,020 --> 00:27:12,620
authentication<font color="#CCCCCC"> request if there if</font>

562
00:27:08,870 --> 00:27:15,169
there's any cookie like if it's yeah<font color="#E5E5E5"> so</font>

563
00:27:12,620 --> 00:27:19,969
<font color="#E5E5E5">what what the new cookie flag this</font>

564
00:27:15,170 --> 00:27:22,190
cookie flag called<font color="#E5E5E5"> same site</font><font color="#CCCCCC"> which kind</font>

565
00:27:19,970 --> 00:27:24,950
of prevents you know CSRF attacks again

566
00:27:22,190 --> 00:27:27,470
<font color="#E5E5E5">so that's another option if you</font><font color="#CCCCCC"> have to</font>

567
00:27:24,950 --> 00:27:29,800
use cookies<font color="#E5E5E5"> but the support for same</font>

568
00:27:27,470 --> 00:27:31,910
<font color="#E5E5E5">site is not universal not all browsers</font>

569
00:27:29,800 --> 00:27:38,590
<font color="#E5E5E5">support that but most</font><font color="#CCCCCC"> modern browsers</font>

570
00:27:31,910 --> 00:27:38,590
<font color="#E5E5E5">will support that another question</font>

571
00:27:38,870 --> 00:27:46,060
<font color="#E5E5E5">all right thank</font><font color="#CCCCCC"> you God oh sorry god yes</font>

572
00:27:51,010 --> 00:27:58,750
it's<font color="#CCCCCC"> a yes sir</font>

573
00:27:55,389 --> 00:28:02,439
with<font color="#E5E5E5"> CSV the most strict policy is a CSV</font>

574
00:27:58,750 --> 00:28:04,539
self<font color="#CCCCCC"> stripped so self where you do</font><font color="#E5E5E5"> not</font>

575
00:28:02,440 --> 00:28:07,000
allow in lines our<font color="#CCCCCC"> strip you do not</font>

576
00:28:04,539 --> 00:28:08,799
<font color="#E5E5E5">allow a stroke from another domain</font><font color="#CCCCCC"> so</font>

577
00:28:07,000 --> 00:28:11,470
this is<font color="#E5E5E5"> a most strictest policy but</font>

578
00:28:08,799 --> 00:28:16,210
still there are<font color="#E5E5E5"> two papers</font><font color="#CCCCCC"> on how to</font>

579
00:28:11,470 --> 00:28:18,750
steal data using<font color="#E5E5E5"> Dom</font><font color="#CCCCCC"> based like HTML</font>

580
00:28:16,210 --> 00:28:22,539
injection the one is called HTML

581
00:28:18,750 --> 00:28:25,059
<font color="#E5E5E5">dangling markup the other one is using a</font>

582
00:28:22,539 --> 00:28:28,720
form injected onto<font color="#CCCCCC"> the page and using</font>

583
00:28:25,059 --> 00:28:34,960
some clicks<font color="#CCCCCC"> - like social engineer the</font>

584
00:28:28,720 --> 00:28:37,330
user to interact<font color="#E5E5E5"> with that HTML so you</font>

585
00:28:34,960 --> 00:28:40,090
know<font color="#E5E5E5"> around CSP but it's really hard</font>

586
00:28:37,330 --> 00:28:42,250
<font color="#E5E5E5">work</font><font color="#CCCCCC"> and that's why I mentioned that's</font><font color="#E5E5E5"> a</font>

587
00:28:40,090 --> 00:28:44,168
defense in<font color="#CCCCCC"> that</font><font color="#E5E5E5"> right you for your first</font>

588
00:28:42,250 --> 00:28:46,210
defense<font color="#E5E5E5"> is kind of make sure that you</font>

589
00:28:44,169 --> 00:28:49,179
are<font color="#E5E5E5"> not using dynamic or secure dynamic</font>

590
00:28:46,210 --> 00:28:52,210
templates or or your source code<font color="#E5E5E5"> is free</font>

591
00:28:49,179 --> 00:28:54,580
of<font color="#E5E5E5"> cross-site scripting CSP is a another</font>

592
00:28:52,210 --> 00:28:55,059
layer<font color="#E5E5E5"> but can be bypassed as well as</font>

593
00:28:54,580 --> 00:28:58,178
<font color="#E5E5E5">Murali</font>

594
00:28:55,059 --> 00:29:01,779
<font color="#CCCCCC">Murali</font><font color="#E5E5E5"> explain yeah read the blog from</font>

595
00:28:58,179 --> 00:29:04,480
<font color="#E5E5E5">github about the CSP journey and that</font>

596
00:29:01,779 --> 00:29:06,340
explains the threats and how they defend

597
00:29:04,480 --> 00:29:07,330
<font color="#E5E5E5">it against</font><font color="#CCCCCC"> it it's a</font><font color="#E5E5E5"> really good</font><font color="#CCCCCC"> pose I</font>

598
00:29:06,340 --> 00:29:09,668
<font color="#E5E5E5">mean for everybody</font>

599
00:29:07,330 --> 00:29:11,710
looking forward<font color="#E5E5E5"> to implement CSP or</font><font color="#CCCCCC"> have</font>

600
00:29:09,669 --> 00:29:13,899
<font color="#CCCCCC">parts about CSP</font><font color="#E5E5E5"> these two blog posts</font>

601
00:29:11,710 --> 00:29:18,669
<font color="#E5E5E5">from from</font><font color="#CCCCCC"> github it's if you google</font>

602
00:29:13,899 --> 00:29:21,549
github or being github<font color="#E5E5E5"> CSP github CSP</font>

603
00:29:18,669 --> 00:29:23,289
journey<font color="#CCCCCC"> you find it's it's it's on the</font>

604
00:29:21,549 --> 00:29:24,610
top - Rizzo it's<font color="#CCCCCC"> a really good post and</font>

605
00:29:23,289 --> 00:29:28,269
very good<font color="#CCCCCC"> reference for anyone that's</font>

606
00:29:24,610 --> 00:29:29,918
<font color="#E5E5E5">interested on that right again thank you</font>

607
00:29:28,269 --> 00:29:34,470
<font color="#CCCCCC">very much for coming thanks for first</font>

608
00:29:29,919 --> 00:29:34,470
things is happening appreciate<font color="#E5E5E5"> that</font>

