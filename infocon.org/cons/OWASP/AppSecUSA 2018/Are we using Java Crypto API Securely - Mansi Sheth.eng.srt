1
00:00:00,650 --> 00:00:05,580
hopefully you guys<font color="#E5E5E5"> had some fun solving</font>

2
00:00:02,970 --> 00:00:08,630
<font color="#E5E5E5">some paper and pencil based crypto so</font>

3
00:00:05,580 --> 00:00:12,480
<font color="#E5E5E5">now let's start talking about real-world</font>

4
00:00:08,630 --> 00:00:16,800
<font color="#CCCCCC">computer-based cryptography</font><font color="#E5E5E5"> I'm Martha</font>

5
00:00:12,480 --> 00:00:20,759
<font color="#CCCCCC">shade I work for a very cold I have over</font>

6
00:00:16,800 --> 00:00:22,710
eight years<font color="#E5E5E5"> of security</font><font color="#CCCCCC"> experience last</font>

7
00:00:20,760 --> 00:00:25,710
five years<font color="#E5E5E5"> at</font><font color="#CCCCCC"> where</font><font color="#E5E5E5"> a cold</font><font color="#CCCCCC"> or being</font><font color="#E5E5E5"> a</font>

8
00:00:22,710 --> 00:00:28,410
<font color="#E5E5E5">researcher I look at a lot of different</font>

9
00:00:25,710 --> 00:00:31,579
<font color="#E5E5E5">programming languages and frameworks in</font>

10
00:00:28,410 --> 00:00:33,930
my day<font color="#E5E5E5"> try to analyze and see how</font>

11
00:00:31,579 --> 00:00:36,000
<font color="#E5E5E5">insecurely they can be</font><font color="#CCCCCC"> written and leave</font>

12
00:00:33,930 --> 00:00:38,370
applications completely open<font color="#CCCCCC"> and then</font>

13
00:00:36,000 --> 00:00:40,739
obviously<font color="#E5E5E5"> suggest those things for our</font>

14
00:00:38,370 --> 00:00:44,550
how<font color="#E5E5E5"> to automatically find this to our</font>

15
00:00:40,739 --> 00:00:47,339
binary static analysis<font color="#CCCCCC"> tools one such</font>

16
00:00:44,550 --> 00:00:49,078
project was looking at different<font color="#E5E5E5"> crypto</font>

17
00:00:47,340 --> 00:00:50,789
implementations across different

18
00:00:49,079 --> 00:00:53,489
languages<font color="#E5E5E5"> and libraries</font>

19
00:00:50,789 --> 00:00:56,010
I found Java the more<font color="#E5E5E5"> something which</font>

20
00:00:53,489 --> 00:00:58,980
needed most<font color="#E5E5E5"> amount of attention and</font>

21
00:00:56,010 --> 00:01:01,199
that's where I come from<font color="#E5E5E5"> I'm a cripple</font>

22
00:00:58,980 --> 00:01:03,148
enthusiast I like solving<font color="#E5E5E5"> crypto puzzles</font>

23
00:01:01,199 --> 00:01:06,600
as you saw but I'm not a cryptographer

24
00:01:03,149 --> 00:01:08,700
or a mathematician or a cryptologist or

25
00:01:06,600 --> 00:01:11,369
any of<font color="#E5E5E5"> that there are just like two</font>

26
00:01:08,700 --> 00:01:13,530
dozen such people<font color="#E5E5E5"> on earth right now and</font>

27
00:01:11,369 --> 00:01:15,299
I'm<font color="#E5E5E5"> not going to make any one of you</font>

28
00:01:13,530 --> 00:01:17,250
you're a<font color="#CCCCCC"> crypto logis at the end of just</font>

29
00:01:15,299 --> 00:01:21,630
35 minutes<font color="#E5E5E5"> just so that we have</font><font color="#CCCCCC"> our</font>

30
00:01:17,250 --> 00:01:23,220
expectations straight<font color="#CCCCCC"> cryptography</font><font color="#E5E5E5"> is</font>

31
00:01:21,630 --> 00:01:24,869
everywhere<font color="#E5E5E5"> it's probably half of the</font>

32
00:01:23,220 --> 00:01:26,548
things right now<font color="#CCCCCC"> you might be doing</font>

33
00:01:24,869 --> 00:01:28,920
apart<font color="#E5E5E5"> from listening to</font><font color="#CCCCCC"> me like maybe</font>

34
00:01:26,549 --> 00:01:31,799
<font color="#CCCCCC">checking your emails or</font><font color="#E5E5E5"> logged on</font><font color="#CCCCCC"> to</font>

35
00:01:28,920 --> 00:01:35,520
Wi-Fi<font color="#CCCCCC"> or maybe doing some cryptocurrency</font>

36
00:01:31,799 --> 00:01:37,350
mining<font color="#CCCCCC"> it's not only</font><font color="#E5E5E5"> you guys here but</font>

37
00:01:35,520 --> 00:01:40,048
<font color="#E5E5E5">even</font><font color="#CCCCCC"> your family your friends everyone</font>

38
00:01:37,350 --> 00:01:41,789
<font color="#CCCCCC">you know around</font><font color="#E5E5E5"> here would</font><font color="#CCCCCC"> be doing</font>

39
00:01:40,049 --> 00:01:44,009
<font color="#E5E5E5">something or the other with cryptography</font>

40
00:01:41,790 --> 00:01:46,829
this is the state of<font color="#CCCCCC"> Earth we currently</font>

41
00:01:44,009 --> 00:01:49,350
live<font color="#CCCCCC"> in and that's responsible eyes on</font>

42
00:01:46,829 --> 00:01:52,798
every one of us<font color="#E5E5E5"> here who</font><font color="#CCCCCC"> are responsible</font>

43
00:01:49,350 --> 00:01:58,408
<font color="#E5E5E5">or have any encounter</font><font color="#CCCCCC"> with crypto</font><font color="#E5E5E5"> to get</font>

44
00:01:52,799 --> 00:02:00,810
it secured and get it right<font color="#E5E5E5"> before</font><font color="#CCCCCC"> I go</font>

45
00:01:58,409 --> 00:02:02,520
deeper into<font color="#E5E5E5"> this I wanted to make few</font>

46
00:02:00,810 --> 00:02:05,040
disclaimers so as a security

47
00:02:02,520 --> 00:02:07,890
<font color="#E5E5E5">professional I definitely want to say if</font>

48
00:02:05,040 --> 00:02:09,840
you<font color="#CCCCCC"> ever encounter</font><font color="#E5E5E5"> any situations where</font>

49
00:02:07,890 --> 00:02:12,000
<font color="#E5E5E5">someone is writing their own crypto</font>

50
00:02:09,840 --> 00:02:13,770
algorithms and using it in their systems

51
00:02:12,000 --> 00:02:16,410
<font color="#E5E5E5">please stop</font>

52
00:02:13,770 --> 00:02:18,690
we really have<font color="#E5E5E5"> to trust the implementers</font>

53
00:02:16,410 --> 00:02:20,790
who have spent years<font color="#E5E5E5"> trying to</font>

54
00:02:18,690 --> 00:02:22,740
<font color="#E5E5E5">understand and study the specifications</font>

55
00:02:20,790 --> 00:02:24,660
which needed even more number of<font color="#E5E5E5"> years</font>

56
00:02:22,740 --> 00:02:27,480
to<font color="#CCCCCC"> come up with and fight against and</font>

57
00:02:24,660 --> 00:02:30,570
that is available for<font color="#CCCCCC"> all of</font><font color="#E5E5E5"> us in any</font>

58
00:02:27,480 --> 00:02:32,880
major language or framework we pick<font color="#E5E5E5"> up</font><font color="#CCCCCC"> -</font>

59
00:02:30,570 --> 00:02:35,340
and it's available for<font color="#E5E5E5"> us to</font><font color="#CCCCCC"> use some</font>

60
00:02:32,880 --> 00:02:37,380
less secure<font color="#E5E5E5"> out of the box some more</font>

61
00:02:35,340 --> 00:02:39,320
secure<font color="#E5E5E5"> after the box but it is all there</font>

62
00:02:37,380 --> 00:02:42,990
<font color="#CCCCCC">and it's just</font><font color="#E5E5E5"> up to</font><font color="#CCCCCC"> us</font><font color="#E5E5E5"> to get it</font><font color="#CCCCCC"> right</font>

63
00:02:39,320 --> 00:02:46,170
and if<font color="#CCCCCC"> you have a cryptosystems</font>

64
00:02:42,990 --> 00:02:48,390
perfectly secure<font color="#E5E5E5"> kudos</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> guys</font><font color="#E5E5E5"> but</font>

65
00:02:46,170 --> 00:02:51,149
<font color="#CCCCCC">that</font><font color="#E5E5E5"> does not mean we don't put any</font>

66
00:02:48,390 --> 00:02:53,850
mitigations of other non crypto related

67
00:02:51,150 --> 00:02:55,740
bugs in our<font color="#E5E5E5"> systems we still have to do</font>

68
00:02:53,850 --> 00:02:58,380
mitigations for any other bugs like

69
00:02:55,740 --> 00:03:04,110
<font color="#E5E5E5">cross-site or sequel</font><font color="#CCCCCC"> or any that</font><font color="#E5E5E5"> any of</font>

70
00:02:58,380 --> 00:03:06,540
<font color="#E5E5E5">that so don't ignore those either</font><font color="#CCCCCC"> okay</font>

71
00:03:04,110 --> 00:03:11,070
<font color="#E5E5E5">so</font><font color="#CCCCCC"> since this talk is about</font><font color="#E5E5E5"> Java</font><font color="#CCCCCC"> I</font>

72
00:03:06,540 --> 00:03:13,200
expect some<font color="#CCCCCC"> of you are so</font><font color="#E5E5E5"> I expect most</font>

73
00:03:11,070 --> 00:03:15,870
of<font color="#E5E5E5"> you having some</font><font color="#CCCCCC"> kind of encounter</font>

74
00:03:13,200 --> 00:03:18,238
with using<font color="#E5E5E5"> Java and cryptography so just</font>

75
00:03:15,870 --> 00:03:20,670
just<font color="#E5E5E5"> trying to understand here</font><font color="#CCCCCC"> what are</font>

76
00:03:18,239 --> 00:03:23,640
your rules like security<font color="#E5E5E5"> engineers</font>

77
00:03:20,670 --> 00:03:26,910
<font color="#E5E5E5">involved in writing</font><font color="#CCCCCC"> secure applications</font>

78
00:03:23,640 --> 00:03:28,859
<font color="#E5E5E5">raise your hand maybe like more product</font>

79
00:03:26,910 --> 00:03:32,600
security<font color="#E5E5E5"> folks trying to make</font><font color="#CCCCCC"> sure the</font>

80
00:03:28,860 --> 00:03:35,520
systems<font color="#CCCCCC"> they're doing are secured enough</font>

81
00:03:32,600 --> 00:03:41,010
managers who want<font color="#E5E5E5"> to become police</font>

82
00:03:35,520 --> 00:03:43,350
officers<font color="#E5E5E5"> about this</font><font color="#CCCCCC"> No okay okay so as I</font>

83
00:03:41,010 --> 00:03:46,230
<font color="#E5E5E5">can see here most of you all are almost</font>

84
00:03:43,350 --> 00:03:49,470
100% here are<font color="#E5E5E5"> involved with some level</font>

85
00:03:46,230 --> 00:03:52,380
of crypto encounter in your<font color="#E5E5E5"> in the</font>

86
00:03:49,470 --> 00:03:55,709
system in your crypto systems and what

87
00:03:52,380 --> 00:03:57,989
behind the senior using is<font color="#CCCCCC"> Javas ship</font>

88
00:03:55,709 --> 00:04:00,239
<font color="#E5E5E5">Java cryptography architecture which I</font>

89
00:03:57,989 --> 00:04:03,209
will call<font color="#CCCCCC"> as JCR from now</font>

90
00:04:00,239 --> 00:04:04,890
<font color="#CCCCCC">jaesi a ship with</font><font color="#E5E5E5"> set of engine classes</font>

91
00:04:03,209 --> 00:04:06,930
which you will be<font color="#CCCCCC"> using in your</font><font color="#E5E5E5"> crypto</font>

92
00:04:04,890 --> 00:04:08,070
systems and what are these engine

93
00:04:06,930 --> 00:04:10,260
classes they are basically just

94
00:04:08,070 --> 00:04:12,329
interfaces whose implementations are

95
00:04:10,260 --> 00:04:16,620
supplied<font color="#CCCCCC"> by different providers again</font>

96
00:04:12,330 --> 00:04:18,450
shipped by<font color="#CCCCCC"> JCA JCI out of box comes with</font>

97
00:04:16,620 --> 00:04:20,820
around a little<font color="#CCCCCC"> more than half a</font><font color="#E5E5E5"> dozen</font>

98
00:04:18,450 --> 00:04:22,380
of providers and and they<font color="#E5E5E5"> are being</font>

99
00:04:20,820 --> 00:04:24,719
configured<font color="#E5E5E5"> as a less</font>

100
00:04:22,380 --> 00:04:27,540
<font color="#E5E5E5">in the</font><font color="#CCCCCC"> Java's</font><font color="#E5E5E5"> a security config file</font>

101
00:04:24,720 --> 00:04:36,360
external to the basically<font color="#CCCCCC"> default</font><font color="#E5E5E5"> that</font>

102
00:04:27,540 --> 00:04:38,430
in the<font color="#E5E5E5"> jdk shipped by</font><font color="#CCCCCC"> oracle</font><font color="#E5E5E5"> for them so</font>

103
00:04:36,360 --> 00:04:40,050
for the most<font color="#CCCCCC"> part you should</font><font color="#E5E5E5"> be okay</font>

104
00:04:38,430 --> 00:04:43,680
<font color="#CCCCCC">with using the default</font>

105
00:04:40,050 --> 00:04:45,480
<font color="#E5E5E5">Java's providers</font><font color="#CCCCCC"> java</font><font color="#E5E5E5"> took some time</font><font color="#CCCCCC"> to</font>

106
00:04:43,680 --> 00:04:47,970
catch<font color="#CCCCCC"> up with</font><font color="#E5E5E5"> all</font><font color="#CCCCCC"> different</font><font color="#E5E5E5"> kinds of</font>

107
00:04:45,480 --> 00:04:50,910
<font color="#E5E5E5">algorithms and primitives but it has</font>

108
00:04:47,970 --> 00:04:52,890
caught up well so there is no<font color="#E5E5E5"> reason</font><font color="#CCCCCC"> you</font>

109
00:04:50,910 --> 00:04:55,140
<font color="#E5E5E5">really need to bother with all the</font>

110
00:04:52,890 --> 00:04:57,030
<font color="#E5E5E5">complicated third-party providers and</font>

111
00:04:55,140 --> 00:04:59,520
scaling it<font color="#E5E5E5"> across your systems or</font>

112
00:04:57,030 --> 00:05:01,859
<font color="#CCCCCC">anything at this</font><font color="#E5E5E5"> point</font><font color="#CCCCCC"> in time</font><font color="#E5E5E5"> unless</font>

113
00:04:59,520 --> 00:05:05,969
unless you are in some specific

114
00:05:01,860 --> 00:05:09,180
situation where<font color="#CCCCCC"> JCA does not provide api</font>

115
00:05:05,970 --> 00:05:11,550
<font color="#E5E5E5">support for some application which you</font>

116
00:05:09,180 --> 00:05:13,470
might<font color="#E5E5E5"> be</font><font color="#CCCCCC"> in like for example no sane</font>

117
00:05:11,550 --> 00:05:15,870
person wants<font color="#E5E5E5"> to deal with parsing sort</font>

118
00:05:13,470 --> 00:05:19,590
files and<font color="#CCCCCC"> JCA does not provide</font><font color="#E5E5E5"> api for</font>

119
00:05:15,870 --> 00:05:22,980
<font color="#CCCCCC">it so that might be a</font><font color="#E5E5E5"> good time</font><font color="#CCCCCC"> to look</font>

120
00:05:19,590 --> 00:05:25,200
at<font color="#CCCCCC"> some third-party help to come up with</font>

121
00:05:22,980 --> 00:05:27,000
use that particular<font color="#E5E5E5"> API or some</font>

122
00:05:25,200 --> 00:05:30,479
algorithmic support which<font color="#CCCCCC"> you absolutely</font>

123
00:05:27,000 --> 00:05:34,140
<font color="#E5E5E5">need and not in not in</font><font color="#CCCCCC"> jca</font><font color="#E5E5E5"> which we will</font>

124
00:05:30,480 --> 00:05:36,150
see<font color="#CCCCCC"> in the digital signatures now if you</font>

125
00:05:34,140 --> 00:05:38,520
have to add a<font color="#CCCCCC"> third-party provider</font><font color="#E5E5E5"> which</font>

126
00:05:36,150 --> 00:05:40,409
<font color="#E5E5E5">I</font><font color="#CCCCCC"> don't think</font><font color="#E5E5E5"> you need</font><font color="#CCCCCC"> to then this is</font>

127
00:05:38,520 --> 00:05:43,080
the most common way I have seen being

128
00:05:40,410 --> 00:05:45,810
adding a<font color="#CCCCCC"> third-party provider it's all</font>

129
00:05:43,080 --> 00:05:48,539
cool but<font color="#E5E5E5"> the</font><font color="#CCCCCC"> problem is this particular</font>

130
00:05:45,810 --> 00:05:51,150
provider<font color="#E5E5E5"> adds a adds your provider to</font>

131
00:05:48,540 --> 00:05:53,190
<font color="#CCCCCC">the</font><font color="#E5E5E5"> end of the list and of the list in</font>

132
00:05:51,150 --> 00:05:55,770
the Java security config file we saw in

133
00:05:53,190 --> 00:05:57,600
the previous slide<font color="#E5E5E5"> what that means is</font>

134
00:05:55,770 --> 00:05:59,310
whenever you<font color="#CCCCCC"> are</font><font color="#E5E5E5"> having your engine</font>

135
00:05:57,600 --> 00:06:01,830
class tell that<font color="#CCCCCC"> ok give me this</font>

136
00:05:59,310 --> 00:06:04,440
algorithm<font color="#E5E5E5"> it will go through the list in</font>

137
00:06:01,830 --> 00:06:06,060
<font color="#CCCCCC">that particular properties file and if</font>

138
00:06:04,440 --> 00:06:08,580
there is any provider which supplies

139
00:06:06,060 --> 00:06:11,130
that algorithm<font color="#E5E5E5"> above this added</font>

140
00:06:08,580 --> 00:06:13,440
algorithm of<font color="#CCCCCC"> the before the last added</font>

141
00:06:11,130 --> 00:06:15,780
provider<font color="#E5E5E5"> that providers algorithm is</font>

142
00:06:13,440 --> 00:06:17,670
taking<font color="#E5E5E5"> precedence which is probably not</font>

143
00:06:15,780 --> 00:06:20,789
<font color="#CCCCCC">what you want if you are</font><font color="#E5E5E5"> trying to add a</font>

144
00:06:17,670 --> 00:06:23,040
provider<font color="#E5E5E5"> so in my opinion</font><font color="#CCCCCC"> just go</font><font color="#E5E5E5"> and go</font>

145
00:06:20,790 --> 00:06:26,430
change the Java<font color="#CCCCCC"> property Java config</font>

146
00:06:23,040 --> 00:06:27,960
file<font color="#E5E5E5"> or there is an insert at API also</font>

147
00:06:26,430 --> 00:06:30,720
where you can<font color="#CCCCCC"> actually forcefully say</font>

148
00:06:27,960 --> 00:06:32,520
insert my API insert<font color="#E5E5E5"> insert my</font>

149
00:06:30,720 --> 00:06:34,620
<font color="#CCCCCC">third-party providers I did this</font>

150
00:06:32,520 --> 00:06:35,840
<font color="#E5E5E5">particular</font><font color="#CCCCCC"> location in the properties</font>

151
00:06:34,620 --> 00:06:38,490
file so

152
00:06:35,840 --> 00:06:43,109
<font color="#CCCCCC">you</font><font color="#E5E5E5"> watch up because I've seen this</font>

153
00:06:38,490 --> 00:06:44,940
happening a lot<font color="#CCCCCC"> why am i standing here</font>

154
00:06:43,110 --> 00:06:48,740
<font color="#E5E5E5">because</font><font color="#CCCCCC"> I have a lot of</font><font color="#E5E5E5"> empathy for</font>

155
00:06:44,940 --> 00:06:51,360
developers<font color="#CCCCCC"> I personally</font><font color="#E5E5E5"> took around</font><font color="#CCCCCC"> 20</font>

156
00:06:48,740 --> 00:06:53,340
20 stabs at understanding<font color="#CCCCCC"> the Java</font>

157
00:06:51,360 --> 00:06:54,960
cryptographic<font color="#E5E5E5"> architecture document</font>

158
00:06:53,340 --> 00:06:58,080
which<font color="#E5E5E5"> is supposed to be used by all</font>

159
00:06:54,960 --> 00:07:00,510
developers<font color="#E5E5E5"> it's it's it's extremely bad</font>

160
00:06:58,080 --> 00:07:02,460
it's<font color="#E5E5E5"> like very complicated designs the</font>

161
00:07:00,510 --> 00:07:04,280
<font color="#E5E5E5">defaults being used even in the</font><font color="#CCCCCC"> coats</font>

162
00:07:02,460 --> 00:07:07,260
<font color="#CCCCCC">and the</font><font color="#E5E5E5"> plates are completely insecure</font>

163
00:07:04,280 --> 00:07:09,239
<font color="#CCCCCC">the</font><font color="#E5E5E5"> documentation talks about more</font>

164
00:07:07,260 --> 00:07:11,880
ambiguous stuff than<font color="#E5E5E5"> making things clear</font>

165
00:07:09,240 --> 00:07:14,370
<font color="#CCCCCC">there</font><font color="#E5E5E5"> is no security or responsibility</font>

166
00:07:11,880 --> 00:07:16,950
taken by<font color="#E5E5E5"> Oracle saying that we have to</font>

167
00:07:14,370 --> 00:07:18,450
<font color="#CCCCCC">support</font><font color="#E5E5E5"> this legacy application gotham's</font>

168
00:07:16,950 --> 00:07:21,210
which were<font color="#E5E5E5"> actually the precursor</font><font color="#CCCCCC"> to</font>

169
00:07:18,450 --> 00:07:23,099
decades ago but but you don't<font color="#CCCCCC"> use that</font>

170
00:07:21,210 --> 00:07:24,900
there is no such disclaimer from there

171
00:07:23,100 --> 00:07:26,670
so it's<font color="#E5E5E5"> pretty much left to the</font>

172
00:07:24,900 --> 00:07:30,150
developers who just wants to<font color="#E5E5E5"> solve the</font>

173
00:07:26,670 --> 00:07:32,100
problem and<font color="#E5E5E5"> move ahead so so there are</font>

174
00:07:30,150 --> 00:07:36,539
lots of those kind of interesting things

175
00:07:32,100 --> 00:07:39,360
happening<font color="#CCCCCC"> so from here</font><font color="#E5E5E5"> or the way I have</font>

176
00:07:36,540 --> 00:07:42,300
divided<font color="#E5E5E5"> the talk is</font><font color="#CCCCCC"> I'll pick</font><font color="#E5E5E5"> up each of</font>

177
00:07:39,360 --> 00:07:44,970
each cryptographic primitive<font color="#E5E5E5"> talk about</font>

178
00:07:42,300 --> 00:07:47,270
things which are problematic things

179
00:07:44,970 --> 00:07:49,860
where<font color="#CCCCCC"> I've seen most things are breaking</font>

180
00:07:47,270 --> 00:07:56,130
with enough<font color="#CCCCCC"> quartz templates hopefully</font>

181
00:07:49,860 --> 00:07:58,350
to<font color="#CCCCCC"> make the thing clear very first</font><font color="#E5E5E5"> thing</font>

182
00:07:56,130 --> 00:08:00,719
cryptographically secure random<font color="#E5E5E5"> number</font>

183
00:07:58,350 --> 00:08:02,880
generator this cryptographic primitive

184
00:08:00,720 --> 00:08:04,760
is used everywhere<font color="#E5E5E5"> it's used for any</font>

185
00:08:02,880 --> 00:08:07,170
<font color="#E5E5E5">kind of keying material keys</font>

186
00:08:04,760 --> 00:08:09,719
<font color="#E5E5E5">initialization vectors</font><font color="#CCCCCC"> noises everywhere</font>

187
00:08:07,170 --> 00:08:12,240
<font color="#E5E5E5">it's pretty much the basic building</font>

188
00:08:09,720 --> 00:08:16,590
<font color="#E5E5E5">block of any cryptographic system you</font>

189
00:08:12,240 --> 00:08:20,070
are<font color="#E5E5E5"> ever going</font><font color="#CCCCCC"> to design what properties</font>

190
00:08:16,590 --> 00:08:21,719
<font color="#CCCCCC">you expect out of</font><font color="#E5E5E5"> it the the the random</font>

191
00:08:20,070 --> 00:08:23,340
number generator should generate<font color="#CCCCCC"> numbers</font>

192
00:08:21,720 --> 00:08:25,320
which are<font color="#E5E5E5"> completely unpredictable</font>

193
00:08:23,340 --> 00:08:27,690
knowing the previous bit we should<font color="#CCCCCC"> not</font>

194
00:08:25,320 --> 00:08:29,760
be able<font color="#CCCCCC"> to guess</font><font color="#E5E5E5"> the current bit</font><font color="#CCCCCC"> it it</font>

195
00:08:27,690 --> 00:08:31,320
should<font color="#E5E5E5"> be completely random</font><font color="#CCCCCC"> knowing this</font>

196
00:08:29,760 --> 00:08:33,599
bit we<font color="#CCCCCC"> should not be able to guess what</font>

197
00:08:31,320 --> 00:08:35,760
the<font color="#CCCCCC"> next bit would be</font><font color="#E5E5E5"> and it</font><font color="#CCCCCC"> should be</font>

198
00:08:33,599 --> 00:08:37,110
completely<font color="#CCCCCC"> it should not be able</font><font color="#E5E5E5"> to we</font>

199
00:08:35,760 --> 00:08:39,960
should<font color="#E5E5E5"> not be able to</font><font color="#CCCCCC"> reproduce that</font>

200
00:08:37,110 --> 00:08:44,580
<font color="#E5E5E5">number again ever</font><font color="#CCCCCC"> I mean ever is</font>

201
00:08:39,960 --> 00:08:47,400
relative<font color="#CCCCCC"> whatever and no math dot random</font>

202
00:08:44,580 --> 00:08:49,040
does not qualify<font color="#CCCCCC"> I have seen this</font><font color="#E5E5E5"> like</font>

203
00:08:47,400 --> 00:08:51,560
many many<font color="#E5E5E5"> times</font>

204
00:08:49,040 --> 00:08:53,569
the java.lang dot<font color="#CCCCCC"> mat comes with a</font>

205
00:08:51,560 --> 00:08:56,660
random function and they are<font color="#E5E5E5"> using it</font>

206
00:08:53,570 --> 00:08:58,850
for<font color="#E5E5E5"> cryptographic operations</font><font color="#CCCCCC"> no it does</font>

207
00:08:56,660 --> 00:09:01,160
<font color="#E5E5E5">not exhibit</font><font color="#CCCCCC"> all the properties we</font><font color="#E5E5E5"> expect</font>

208
00:08:58,850 --> 00:09:09,520
out<font color="#CCCCCC"> of it so please</font><font color="#E5E5E5"> stop it right</font><font color="#CCCCCC"> there</font>

209
00:09:01,160 --> 00:09:12,079
<font color="#CCCCCC">okay how how does</font><font color="#E5E5E5"> CSP</font><font color="#CCCCCC"> orangy work in JCA</font>

210
00:09:09,520 --> 00:09:14,840
<font color="#E5E5E5">this is the most simplistically I can</font>

211
00:09:12,080 --> 00:09:17,060
explain most of not most all the

212
00:09:14,840 --> 00:09:20,780
<font color="#CCCCCC">algorithms which are shipped for CSP</font><font color="#E5E5E5"> are</font>

213
00:09:17,060 --> 00:09:23,150
<font color="#E5E5E5">ng by JCAR secured out of the box but if</font>

214
00:09:20,780 --> 00:09:24,860
you don't configure<font color="#E5E5E5"> how it is</font>

215
00:09:23,150 --> 00:09:26,900
initialized and what the source of

216
00:09:24,860 --> 00:09:29,360
<font color="#E5E5E5">entropy the algorithm is going to use</font>

217
00:09:26,900 --> 00:09:31,850
it's very very trivial to guess the

218
00:09:29,360 --> 00:09:33,710
output<font color="#E5E5E5"> so it's it's very important that</font>

219
00:09:31,850 --> 00:09:37,010
<font color="#CCCCCC">we configure these two parameters</font>

220
00:09:33,710 --> 00:09:40,100
<font color="#E5E5E5">securely now how does Java help us do</font>

221
00:09:37,010 --> 00:09:43,610
this<font color="#E5E5E5"> so Java of</font><font color="#CCCCCC"> while for sealing</font>

222
00:09:40,100 --> 00:09:45,680
mechanism<font color="#E5E5E5"> it has to in the JC document</font>

223
00:09:43,610 --> 00:09:49,760
it talks about<font color="#E5E5E5"> two things it talks about</font>

224
00:09:45,680 --> 00:09:51,979
<font color="#E5E5E5">self sealing and explicit sealing now</font>

225
00:09:49,760 --> 00:09:54,939
how much our<font color="#CCCCCC"> counterintuitive the word</font>

226
00:09:51,980 --> 00:09:57,710
self sealing sounds that's what we want

227
00:09:54,940 --> 00:09:59,540
<font color="#E5E5E5">that's that's when we are telling the</font>

228
00:09:57,710 --> 00:10:01,690
operating system<font color="#CCCCCC"> to take control over</font>

229
00:09:59,540 --> 00:10:05,089
<font color="#E5E5E5">how</font><font color="#CCCCCC"> to seed the random</font><font color="#E5E5E5"> number generator</font>

230
00:10:01,690 --> 00:10:07,580
<font color="#CCCCCC">and explicit sealing means we are</font><font color="#E5E5E5"> giving</font>

231
00:10:05,090 --> 00:10:09,290
the developers code the responsibility

232
00:10:07,580 --> 00:10:13,850
<font color="#CCCCCC">to see the algorithm which we'd never</font>

233
00:10:09,290 --> 00:10:16,030
want and how<font color="#E5E5E5"> to</font><font color="#CCCCCC"> seed this algorithm what</font>

234
00:10:13,850 --> 00:10:19,220
source of entropy<font color="#CCCCCC"> there are broadly two</font>

235
00:10:16,030 --> 00:10:21,110
<font color="#CCCCCC">sources</font><font color="#E5E5E5"> of entropy blocking source and a</font>

236
00:10:19,220 --> 00:10:24,140
non blocking source<font color="#E5E5E5"> and what does that</font>

237
00:10:21,110 --> 00:10:26,690
<font color="#E5E5E5">mean is the way I think</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> it as a</font>

238
00:10:24,140 --> 00:10:28,189
bucket<font color="#E5E5E5"> where</font><font color="#CCCCCC"> we're</font><font color="#E5E5E5"> all the operating</font>

239
00:10:26,690 --> 00:10:30,320
system interrupts and hardware

240
00:10:28,190 --> 00:10:32,360
interrupts and timing cycles they all

241
00:10:30,320 --> 00:10:35,630
put<font color="#CCCCCC"> their input</font><font color="#E5E5E5"> in it and there is a</font>

242
00:10:32,360 --> 00:10:38,300
threshold set on that bucket<font color="#E5E5E5"> when we say</font>

243
00:10:35,630 --> 00:10:40,790
we<font color="#E5E5E5"> want our blocking source to see the</font>

244
00:10:38,300 --> 00:10:42,770
algorithm<font color="#E5E5E5"> that if the threshold is</font><font color="#CCCCCC"> not</font>

245
00:10:40,790 --> 00:10:44,900
met<font color="#E5E5E5"> we are just the</font><font color="#CCCCCC"> blocking source will</font>

246
00:10:42,770 --> 00:10:46,790
just block the algorithm wait till<font color="#E5E5E5"> I've</font>

247
00:10:44,900 --> 00:10:48,949
<font color="#E5E5E5">written my threshold is met and then I</font>

248
00:10:46,790 --> 00:10:50,870
will give<font color="#E5E5E5"> you an through P and non</font>

249
00:10:48,950 --> 00:10:52,460
<font color="#E5E5E5">blocking is completely opposite the the</font>

250
00:10:50,870 --> 00:10:55,630
<font color="#E5E5E5">moment algorithm asks it will give it</font>

251
00:10:52,460 --> 00:10:58,970
whatever entropy it has from that bucket

252
00:10:55,630 --> 00:11:01,760
<font color="#CCCCCC">now I think cryptographers</font><font color="#E5E5E5"> are basically</font>

253
00:10:58,970 --> 00:11:03,100
<font color="#E5E5E5">very pessimistic people they think that</font>

254
00:11:01,760 --> 00:11:05,110
if they<font color="#CCCCCC"> have if</font>

255
00:11:03,100 --> 00:11:07,000
<font color="#E5E5E5">if they are going to</font><font color="#CCCCCC"> use any</font><font color="#E5E5E5"> kind of</font>

256
00:11:05,110 --> 00:11:09,190
<font color="#CCCCCC">non-blocking source of</font><font color="#E5E5E5"> sorry</font>

257
00:11:07,000 --> 00:11:10,510
<font color="#E5E5E5">non-blocking source of entropy the world</font>

258
00:11:09,190 --> 00:11:13,090
is going to fall<font color="#CCCCCC"> apart it's not</font>

259
00:11:10,510 --> 00:11:15,970
sufficient<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the entropy given etc</font>

260
00:11:13,090 --> 00:11:18,610
etcetera etcetera<font color="#CCCCCC"> I personally think of</font>

261
00:11:15,970 --> 00:11:21,460
<font color="#CCCCCC">480</font><font color="#E5E5E5"> or the 90% of the crypto systems I</font>

262
00:11:18,610 --> 00:11:24,790
<font color="#E5E5E5">have seen non-blocking source is good</font>

263
00:11:21,460 --> 00:11:26,500
enough now unless<font color="#E5E5E5"> you are in that 10% of</font>

264
00:11:24,790 --> 00:11:28,030
<font color="#E5E5E5">the situation you will</font><font color="#CCCCCC"> probably know it</font>

265
00:11:26,500 --> 00:11:29,130
for yourself and<font color="#E5E5E5"> you might</font><font color="#CCCCCC"> just be used</font>

266
00:11:28,030 --> 00:11:32,439
<font color="#CCCCCC">non-blocking</font>

267
00:11:29,130 --> 00:11:35,040
so to<font color="#E5E5E5"> take away always</font><font color="#CCCCCC"> yourself</font>

268
00:11:32,440 --> 00:11:40,060
<font color="#CCCCCC">shielding and all and</font><font color="#E5E5E5"> probably use a</font>

269
00:11:35,040 --> 00:11:42,250
<font color="#E5E5E5">non-blocking source this is</font><font color="#CCCCCC"> the first</font>

270
00:11:40,060 --> 00:11:45,189
time I'm showing<font color="#E5E5E5"> or showing code</font><font color="#CCCCCC"> snippet</font>

271
00:11:42,250 --> 00:11:47,860
so this is all in the<font color="#E5E5E5"> migrated lab</font>

272
00:11:45,190 --> 00:11:49,600
report which is all in a modern<font color="#CCCCCC"> Java</font>

273
00:11:47,860 --> 00:11:50,950
cryptographic modules and all those

274
00:11:49,600 --> 00:11:53,140
things<font color="#CCCCCC"> so do you don't</font><font color="#E5E5E5"> have</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> take</font>

275
00:11:50,950 --> 00:11:56,290
<font color="#E5E5E5">screenshots or anything here and just</font>

276
00:11:53,140 --> 00:11:59,380
just enjoy the talk yeah so if<font color="#CCCCCC"> your so</font>

277
00:11:56,290 --> 00:12:00,939
if you are right so now since a<font color="#E5E5E5"> seeding</font>

278
00:11:59,380 --> 00:12:03,850
is operating system<font color="#E5E5E5"> based what is the</font>

279
00:12:00,940 --> 00:12:07,510
most<font color="#E5E5E5"> agonistic way to write</font><font color="#CCCCCC"> more secure</font>

280
00:12:03,850 --> 00:12:10,750
the<font color="#E5E5E5"> CSP</font><font color="#CCCCCC"> RNG</font><font color="#E5E5E5"> get</font><font color="#CCCCCC"> to engine class</font>

281
00:12:07,510 --> 00:12:13,270
initialize it and<font color="#E5E5E5"> immediately follow it</font>

282
00:12:10,750 --> 00:12:15,460
by any of the next<font color="#E5E5E5"> star methods you have</font>

283
00:12:13,270 --> 00:12:17,770
<font color="#E5E5E5">next</font><font color="#CCCCCC"> by</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> ain't along whatever any of</font>

284
00:12:15,460 --> 00:12:19,600
the next methods<font color="#CCCCCC"> it's when you use the</font>

285
00:12:17,770 --> 00:12:21,819
next<font color="#E5E5E5"> method is</font><font color="#CCCCCC"> actually when the</font>

286
00:12:19,600 --> 00:12:23,650
operating system<font color="#CCCCCC"> is seeding with the</font>

287
00:12:21,820 --> 00:12:28,000
<font color="#CCCCCC">configured source of entropy</font><font color="#E5E5E5"> the</font>

288
00:12:23,650 --> 00:12:30,520
algorithm and in between<font color="#CCCCCC"> if you use this</font>

289
00:12:28,000 --> 00:12:32,170
set seed method<font color="#E5E5E5"> that's when the</font>

290
00:12:30,520 --> 00:12:34,780
<font color="#CCCCCC">developer</font><font color="#E5E5E5"> ceiling comes into picture in</font>

291
00:12:32,170 --> 00:12:37,120
<font color="#E5E5E5">which we definitely never</font><font color="#CCCCCC"> want to do set</font>

292
00:12:34,780 --> 00:12:39,280
seed is a<font color="#E5E5E5"> provided by this engine class</font>

293
00:12:37,120 --> 00:12:42,330
for some<font color="#E5E5E5"> other reason and which is</font>

294
00:12:39,280 --> 00:12:45,010
<font color="#CCCCCC">documented</font><font color="#E5E5E5"> in the in the Java Docs but</font>

295
00:12:42,330 --> 00:12:48,160
takeaway never ever have a set seed but

296
00:12:45,010 --> 00:12:53,260
before the<font color="#CCCCCC"> NED</font><font color="#E5E5E5"> next bytes or next star</font>

297
00:12:48,160 --> 00:12:54,969
of<font color="#CCCCCC"> api is ever</font><font color="#E5E5E5"> used since this is like</font>

298
00:12:53,260 --> 00:12:57,040
<font color="#E5E5E5">pretty</font><font color="#CCCCCC"> much</font><font color="#E5E5E5"> the building block of any</font>

299
00:12:54,970 --> 00:12:59,860
cryptographic system<font color="#E5E5E5"> I like picked up</font>

300
00:12:57,040 --> 00:13:02,230
some anti patterns out from<font color="#E5E5E5"> Internet any</font>

301
00:12:59,860 --> 00:13:08,920
guesses what's a<font color="#E5E5E5"> problem with this one</font>

302
00:13:02,230 --> 00:13:10,990
anyone yes<font color="#E5E5E5"> so even so even if we</font><font color="#CCCCCC"> think</font>

303
00:13:08,920 --> 00:13:13,089
<font color="#E5E5E5">that</font><font color="#CCCCCC"> timestamp that timestamp in</font>

304
00:13:10,990 --> 00:13:14,870
milliseconds<font color="#E5E5E5"> is sufficient entropy it's</font>

305
00:13:13,090 --> 00:13:17,029
<font color="#E5E5E5">definitely not and we should not</font>

306
00:13:14,870 --> 00:13:19,070
<font color="#E5E5E5">be doing</font><font color="#CCCCCC"> that so there</font><font color="#E5E5E5"> are some very</font>

307
00:13:17,029 --> 00:13:22,189
<font color="#E5E5E5">smart developers I have seen who think</font>

308
00:13:19,070 --> 00:13:23,420
that they<font color="#CCCCCC"> can give more entropy</font><font color="#E5E5E5"> more</font>

309
00:13:22,190 --> 00:13:36,529
than the operating<font color="#E5E5E5"> system which is not</font>

310
00:13:23,420 --> 00:13:40,150
the<font color="#E5E5E5"> case this example the</font><font color="#CCCCCC"> cell and any</font>

311
00:13:36,529 --> 00:13:40,150
guesses what<font color="#E5E5E5"> the output</font><font color="#CCCCCC"> is actually</font>

312
00:13:40,300 --> 00:13:48,279
output is actually<font color="#CCCCCC"> one two three this</font>

313
00:13:46,040 --> 00:13:48,279
one

314
00:13:50,340 --> 00:13:56,110
you are<font color="#E5E5E5"> initializing the engine class</font>

315
00:13:52,990 --> 00:13:58,960
<font color="#CCCCCC">with again as explicit scene and again</font>

316
00:13:56,110 --> 00:14:00,700
the<font color="#CCCCCC"> output is 1</font><font color="#E5E5E5"> 2 3 in this</font><font color="#CCCCCC"> case so</font>

317
00:13:58,960 --> 00:14:02,350
these these<font color="#CCCCCC"> are all common Stack</font>

318
00:14:00,700 --> 00:14:04,000
<font color="#CCCCCC">Overflow quotes the plaits I have picked</font>

319
00:14:02,350 --> 00:14:06,270
up<font color="#E5E5E5"> so please before he about these</font>

320
00:14:04,000 --> 00:14:06,270
things

321
00:14:08,100 --> 00:14:12,940
<font color="#CCCCCC">okay the next primitive encryption and</font>

322
00:14:11,620 --> 00:14:16,630
<font color="#CCCCCC">decryption which is pretty</font><font color="#E5E5E5"> much</font>

323
00:14:12,940 --> 00:14:18,580
synonymous to cryptography<font color="#E5E5E5"> sometimes the</font>

324
00:14:16,630 --> 00:14:20,170
most<font color="#E5E5E5"> basic way encryption is when you</font>

325
00:14:18,580 --> 00:14:21,910
want to<font color="#E5E5E5"> obscure the meaning of the data</font>

326
00:14:20,170 --> 00:14:24,130
and<font color="#E5E5E5"> decryption is when you have you</font><font color="#CCCCCC"> are</font>

327
00:14:21,910 --> 00:14:26,439
authorized<font color="#E5E5E5"> to have keys to actually</font>

328
00:14:24,130 --> 00:14:28,990
decrypt them<font color="#E5E5E5"> get the meaning out</font><font color="#CCCCCC"> of that</font>

329
00:14:26,440 --> 00:14:31,150
<font color="#E5E5E5">encrypted data there are two broad</font>

330
00:14:28,990 --> 00:14:33,310
<font color="#CCCCCC">categories of algorithms</font><font color="#E5E5E5"> symmetric or</font>

331
00:14:31,150 --> 00:14:36,100
block ciphers where the same key<font color="#CCCCCC"> is</font><font color="#E5E5E5"> used</font>

332
00:14:33,310 --> 00:14:37,959
to encrypt and decrypt<font color="#E5E5E5"> all your data and</font>

333
00:14:36,100 --> 00:14:39,690
a symmetric or public<font color="#E5E5E5"> key is when</font>

334
00:14:37,960 --> 00:14:41,800
different<font color="#E5E5E5"> set of keys are involved</font>

335
00:14:39,690 --> 00:14:43,540
applications it's used everywhere it's

336
00:14:41,800 --> 00:14:48,760
used<font color="#E5E5E5"> for data I pressed a data in</font>

337
00:14:43,540 --> 00:14:52,959
transit<font color="#E5E5E5"> and everything in between okay</font>

338
00:14:48,760 --> 00:14:54,819
now to get<font color="#CCCCCC"> a</font><font color="#E5E5E5"> simple cipher going in my</font>

339
00:14:52,960 --> 00:14:57,220
opinion there<font color="#CCCCCC"> are these five</font><font color="#E5E5E5"> parameters</font>

340
00:14:54,820 --> 00:15:01,750
we should configure very very vigilantly

341
00:14:57,220 --> 00:15:03,310
to get a very<font color="#E5E5E5"> secure cipher which are</font>

342
00:15:01,750 --> 00:15:06,610
<font color="#CCCCCC">these you obviously have to</font><font color="#E5E5E5"> specify the</font>

343
00:15:03,310 --> 00:15:08,680
<font color="#E5E5E5">algorithm you specify the mode</font><font color="#CCCCCC"> of the</font>

344
00:15:06,610 --> 00:15:10,450
mode<font color="#CCCCCC"> of the algorithms operation which</font>

345
00:15:08,680 --> 00:15:12,699
is<font color="#E5E5E5"> only a relevant and symmetric</font>

346
00:15:10,450 --> 00:15:14,320
encryption of block ciphers<font color="#E5E5E5"> padding</font>

347
00:15:12,700 --> 00:15:16,480
scheme<font color="#E5E5E5"> your data is never going to be</font>

348
00:15:14,320 --> 00:15:18,520
the exact size your algorithm is<font color="#E5E5E5"> used to</font>

349
00:15:16,480 --> 00:15:20,350
working<font color="#CCCCCC"> in so you have to pad it to the</font>

350
00:15:18,520 --> 00:15:22,449
texture<font color="#E5E5E5"> data and make it of exact size</font>

351
00:15:20,350 --> 00:15:25,720
the encryption algorithm can work on

352
00:15:22,450 --> 00:15:27,760
obviously<font color="#CCCCCC"> the keys and initialization</font>

353
00:15:25,720 --> 00:15:31,000
<font color="#E5E5E5">vectors is again relevant only in</font>

354
00:15:27,760 --> 00:15:31,450
symmetric<font color="#E5E5E5"> encryption we will talk</font><font color="#CCCCCC"> about</font>

355
00:15:31,000 --> 00:15:33,970
it<font color="#E5E5E5"> later</font>

356
00:15:31,450 --> 00:15:35,410
<font color="#E5E5E5">now just to configure these five</font>

357
00:15:33,970 --> 00:15:37,120
parameters<font color="#E5E5E5"> no does</font><font color="#CCCCCC"> not matter a</font>

358
00:15:35,410 --> 00:15:39,370
symmetric or a symmetric there are

359
00:15:37,120 --> 00:15:41,680
minimum three to four classes<font color="#E5E5E5"> involved</font>

360
00:15:39,370 --> 00:15:45,130
with its own set<font color="#CCCCCC"> of interfaces and</font>

361
00:15:41,680 --> 00:15:48,489
hierarchies just in Java so it's just

362
00:15:45,130 --> 00:15:52,330
imagine how easy<font color="#E5E5E5"> it is to do something</font>

363
00:15:48,490 --> 00:15:54,040
<font color="#E5E5E5">wrong now luckily</font><font color="#CCCCCC"> are the first three</font>

364
00:15:52,330 --> 00:15:55,690
parameters which is<font color="#CCCCCC"> the algorithm mode</font>

365
00:15:54,040 --> 00:15:57,819
of operation and padding scheme is

366
00:15:55,690 --> 00:16:00,790
configured by a single string called the

367
00:15:57,820 --> 00:16:03,340
transformation string<font color="#E5E5E5"> now these are the</font>

368
00:16:00,790 --> 00:16:06,670
<font color="#CCCCCC">list of options or algorithm</font>

369
00:16:03,340 --> 00:16:08,410
which is supplied by<font color="#E5E5E5"> JC a</font><font color="#CCCCCC"> 10 not even</font>

370
00:16:06,670 --> 00:16:10,780
like<font color="#CCCCCC"> 6 or 7 I am talking about the</font>

371
00:16:08,410 --> 00:16:13,209
latest yes here<font color="#E5E5E5"> just just meditate over</font>

372
00:16:10,780 --> 00:16:15,699
the slides look at number<font color="#CCCCCC"> of red dots</font>

373
00:16:13,210 --> 00:16:18,250
<font color="#E5E5E5">and number</font><font color="#CCCCCC"> of green dots and just</font>

374
00:16:15,700 --> 00:16:23,160
imagine how easy it<font color="#E5E5E5"> is to pick a wrong</font>

375
00:16:18,250 --> 00:16:23,160
choice<font color="#CCCCCC"> and</font><font color="#E5E5E5"> just break your</font><font color="#CCCCCC"> cypher</font>

376
00:16:29,380 --> 00:16:34,600
<font color="#E5E5E5">okay so how to configure</font><font color="#CCCCCC"> these three</font>

377
00:16:31,990 --> 00:16:36,550
<font color="#E5E5E5">parameters first thing is if you want to</font>

378
00:16:34,600 --> 00:16:39,760
<font color="#E5E5E5">take away one thing from this section is</font>

379
00:16:36,550 --> 00:16:43,569
<font color="#CCCCCC">always specify the</font><font color="#E5E5E5"> entire transformation</font>

380
00:16:39,760 --> 00:16:45,750
string as the<font color="#CCCCCC"> algorithm slash your mode</font>

381
00:16:43,570 --> 00:16:48,610
<font color="#CCCCCC">of operation</font><font color="#E5E5E5"> and your padding scheme and</font>

382
00:16:45,750 --> 00:16:50,830
why I'm<font color="#E5E5E5"> saying so because</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> default</font>

383
00:16:48,610 --> 00:16:52,480
<font color="#CCCCCC">switch chase here decides to take</font><font color="#E5E5E5"> if you</font>

384
00:16:50,830 --> 00:16:55,360
don't<font color="#E5E5E5"> specify</font><font color="#CCCCCC"> it yourself it's</font>

385
00:16:52,480 --> 00:16:57,010
completely insecure<font color="#E5E5E5"> so for example if</font>

386
00:16:55,360 --> 00:17:01,240
you<font color="#CCCCCC"> are using are doing a symmetric</font>

387
00:16:57,010 --> 00:17:03,340
encryption<font color="#E5E5E5"> use RSA algorithm use ECB ACB</font>

388
00:17:01,240 --> 00:17:05,740
is<font color="#E5E5E5"> only relevant in block ciphers I'm</font><font color="#CCCCCC"> no</font>

389
00:17:03,340 --> 00:17:08,020
but in the<font color="#E5E5E5"> Java world ECB</font>

390
00:17:05,740 --> 00:17:11,160
behind-the-scene translates to none and

391
00:17:08,020 --> 00:17:13,780
that's why we are<font color="#E5E5E5"> writing ECB year and</font>

392
00:17:11,160 --> 00:17:16,720
and the documentation<font color="#E5E5E5"> does not talk very</font>

393
00:17:13,780 --> 00:17:19,569
openly about<font color="#CCCCCC"> OAP algorithms and how to</font>

394
00:17:16,720 --> 00:17:21,819
configure<font color="#CCCCCC"> its different digests but this</font>

395
00:17:19,569 --> 00:17:25,329
is the way to do it this is<font color="#E5E5E5"> this is what</font>

396
00:17:21,819 --> 00:17:27,849
is<font color="#E5E5E5"> working so always use OAP with the</font>

397
00:17:25,329 --> 00:17:29,800
right hash and the MGS padding for it so

398
00:17:27,849 --> 00:17:31,899
<font color="#E5E5E5">and that's how a symmetric should be</font>

399
00:17:29,800 --> 00:17:33,520
done and<font color="#CCCCCC"> for symmetric</font><font color="#E5E5E5"> use an</font>

400
00:17:31,900 --> 00:17:36,670
authentication and on<font color="#CCCCCC"> 10 together</font>

401
00:17:33,520 --> 00:17:41,530
encryption which only<font color="#E5E5E5"> is a GCM from</font><font color="#CCCCCC"> J</font>

402
00:17:36,670 --> 00:17:43,420
CSI algorithm obviously always<font color="#CCCCCC"> AC a yes</font>

403
00:17:41,530 --> 00:17:45,010
three days everything is<font color="#E5E5E5"> deprecated a</font>

404
00:17:43,420 --> 00:17:46,750
decade ago I<font color="#E5E5E5"> don't know why Java is</font>

405
00:17:45,010 --> 00:17:49,840
<font color="#E5E5E5">still talking about it but just forget</font>

406
00:17:46,750 --> 00:17:53,320
<font color="#CCCCCC">about those things some</font><font color="#E5E5E5"> things I have</font>

407
00:17:49,840 --> 00:17:55,540
seen our AES and someone is still using

408
00:17:53,320 --> 00:17:58,419
ECB because it is defaulted in RSA it's

409
00:17:55,540 --> 00:17:59,860
confusing but you see me more<font color="#E5E5E5"> in a yes</font>

410
00:17:58,420 --> 00:18:02,470
is a very<font color="#E5E5E5"> very bad</font><font color="#CCCCCC"> idea</font>

411
00:17:59,860 --> 00:18:03,729
so never do that and the last one is

412
00:18:02,470 --> 00:18:05,980
something<font color="#E5E5E5"> which I</font><font color="#CCCCCC"> have seen the</font><font color="#E5E5E5"> most</font>

413
00:18:03,730 --> 00:18:09,010
common and<font color="#CCCCCC"> the most dangerous it again</font>

414
00:18:05,980 --> 00:18:14,080
maps to the second last<font color="#E5E5E5"> line</font><font color="#CCCCCC"> D</font><font color="#E5E5E5"> forces</font>

415
00:18:09,010 --> 00:18:15,700
<font color="#E5E5E5">ECB and pkcs</font><font color="#CCCCCC"> paradigm</font><font color="#E5E5E5"> which is</font><font color="#CCCCCC"> okay so</font>

416
00:18:14,080 --> 00:18:19,840
yeah this is<font color="#CCCCCC"> how to configure those</font>

417
00:18:15,700 --> 00:18:22,000
three parameters<font color="#E5E5E5"> next to ski keys is a</font>

418
00:18:19,840 --> 00:18:23,830
relatively straightforward<font color="#E5E5E5"> use the</font>

419
00:18:22,000 --> 00:18:25,930
<font color="#E5E5E5">keypads and</font><font color="#CCCCCC"> ret arranged in class for</font>

420
00:18:23,830 --> 00:18:28,419
public keys<font color="#E5E5E5"> the size should</font><font color="#CCCCCC"> be at least</font>

421
00:18:25,930 --> 00:18:30,640
<font color="#CCCCCC">two zero four eight I would say much go</font>

422
00:18:28,420 --> 00:18:33,990
for<font color="#E5E5E5"> 4 0 9 6 or</font><font color="#CCCCCC"> even higher there</font><font color="#E5E5E5"> is no</font>

423
00:18:30,640 --> 00:18:37,930
reason<font color="#CCCCCC"> not to in this crypto power edge</font>

424
00:18:33,990 --> 00:18:39,610
for symmetric<font color="#CCCCCC"> I would say go for 256 if</font>

425
00:18:37,930 --> 00:18:41,480
you can if<font color="#E5E5E5"> you're writing software for</font>

426
00:18:39,610 --> 00:18:44,270
<font color="#E5E5E5">in</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> outside United States</font>

427
00:18:41,480 --> 00:18:48,140
<font color="#E5E5E5">2:56 if not don't lose your</font><font color="#CCCCCC"> sleep use</font>

428
00:18:44,270 --> 00:18:50,270
<font color="#E5E5E5">128 one good thing is Java</font><font color="#CCCCCC"> 10 defaults</font>

429
00:18:48,140 --> 00:18:52,210
<font color="#E5E5E5">comes with unlimited</font><font color="#CCCCCC"> your addiction so</font>

430
00:18:50,270 --> 00:18:55,580
now you don't have<font color="#E5E5E5"> to go and install</font>

431
00:18:52,210 --> 00:18:58,690
your addiction policy for 256 bits so

432
00:18:55,580 --> 00:18:58,689
which is a which<font color="#CCCCCC"> is a good thing</font>

433
00:18:59,679 --> 00:19:05,120
lastly initialization vectors<font color="#E5E5E5"> as we said</font>

434
00:19:02,900 --> 00:19:09,679
this is<font color="#CCCCCC"> a very</font><font color="#E5E5E5"> relevant only in</font>

435
00:19:05,120 --> 00:19:11,389
symmetric encryption<font color="#E5E5E5"> now Java most of</font>

436
00:19:09,679 --> 00:19:14,510
the configurations happens to something

437
00:19:11,390 --> 00:19:16,730
called<font color="#E5E5E5"> as open specification</font><font color="#CCCCCC"> what it</font>

438
00:19:14,510 --> 00:19:18,830
means<font color="#E5E5E5"> is</font><font color="#CCCCCC"> it jaesi</font><font color="#E5E5E5"> does not decide to</font>

439
00:19:16,730 --> 00:19:21,049
give a lot<font color="#E5E5E5"> of control of</font><font color="#CCCCCC"> the different</font>

440
00:19:18,830 --> 00:19:22,520
algorithmic parameters to the developers

441
00:19:21,049 --> 00:19:24,070
because<font color="#E5E5E5"> they don't trust developers and</font>

442
00:19:22,520 --> 00:19:27,470
which is the right<font color="#E5E5E5"> thing</font><font color="#CCCCCC"> to do</font>

443
00:19:24,070 --> 00:19:30,889
except for<font color="#CCCCCC"> initialization vectors now in</font>

444
00:19:27,470 --> 00:19:33,080
the Java<font color="#E5E5E5"> Docs</font><font color="#CCCCCC"> there is a cipher api</font>

445
00:19:30,890 --> 00:19:36,260
which says that<font color="#E5E5E5"> if you use this last</font>

446
00:19:33,080 --> 00:19:37,639
parameter<font color="#E5E5E5"> as a as a CSP</font><font color="#CCCCCC"> rng</font><font color="#E5E5E5"> that's what</font>

447
00:19:36,260 --> 00:19:40,429
is going to<font color="#CCCCCC"> be used for</font><font color="#E5E5E5"> all</font><font color="#CCCCCC"> different</font>

448
00:19:37,640 --> 00:19:41,350
<font color="#E5E5E5">parameters randomization everything etc</font>

449
00:19:40,429 --> 00:19:44,179
<font color="#CCCCCC">etcetera</font>

450
00:19:41,350 --> 00:19:46,399
it run it might be true but<font color="#CCCCCC"> it did not</font>

451
00:19:44,179 --> 00:19:48,710
ever randomize my initialization vector

452
00:19:46,400 --> 00:19:50,870
so the only way I could<font color="#E5E5E5"> initialize</font><font color="#CCCCCC"> the I</font>

453
00:19:48,710 --> 00:19:53,510
nice for the GCM world was through

454
00:19:50,870 --> 00:19:55,969
transparent initialization<font color="#E5E5E5"> go through</font>

455
00:19:53,510 --> 00:19:58,460
the hierarchy<font color="#E5E5E5"> of controlling the</font>

456
00:19:55,970 --> 00:20:00,830
different parameters and go through the

457
00:19:58,460 --> 00:20:05,390
GCM specs and configure the<font color="#CCCCCC"> IV in the</font>

458
00:20:00,830 --> 00:20:07,790
<font color="#CCCCCC">more CSP RNG way okay once you</font><font color="#E5E5E5"> have</font>

459
00:20:05,390 --> 00:20:17,000
these five<font color="#E5E5E5"> things in place hopefully we</font>

460
00:20:07,790 --> 00:20:19,610
<font color="#CCCCCC">should have a pretty</font><font color="#E5E5E5"> good cipher</font><font color="#CCCCCC"> ok</font><font color="#E5E5E5"> next</font>

461
00:20:17,000 --> 00:20:22,460
primitive hash functions very simple and

462
00:20:19,610 --> 00:20:24,379
sweet you give a huge input<font color="#CCCCCC"> throw to a</font>

463
00:20:22,460 --> 00:20:26,240
hash function<font color="#E5E5E5"> a fixed</font><font color="#CCCCCC"> size output is</font>

464
00:20:24,380 --> 00:20:29,150
coming<font color="#CCCCCC"> this</font><font color="#E5E5E5"> output could</font><font color="#CCCCCC"> be called like</font>

465
00:20:26,240 --> 00:20:31,760
hash or tags or checksums or whatever

466
00:20:29,150 --> 00:20:34,010
<font color="#CCCCCC">I'm just going to stick</font><font color="#E5E5E5"> to hash it</font><font color="#CCCCCC"> does</font>

467
00:20:31,760 --> 00:20:38,540
not involve any keys<font color="#E5E5E5"> it reduces all</font>

468
00:20:34,010 --> 00:20:41,270
those complexities what<font color="#E5E5E5"> operator what</font>

469
00:20:38,540 --> 00:20:43,040
properties we expect out of a hash<font color="#CCCCCC"> it</font>

470
00:20:41,270 --> 00:20:44,860
should be<font color="#E5E5E5"> one</font><font color="#CCCCCC"> way given one input</font><font color="#E5E5E5"> it</font>

471
00:20:43,040 --> 00:20:47,178
should<font color="#CCCCCC"> always generate the same output</font>

472
00:20:44,860 --> 00:20:49,219
<font color="#E5E5E5">it should be collision resistant it</font>

473
00:20:47,179 --> 00:20:50,780
should not have we should<font color="#E5E5E5"> not have two</font>

474
00:20:49,220 --> 00:20:53,090
inputs which can change

475
00:20:50,780 --> 00:20:55,660
the same output<font color="#E5E5E5"> that's</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> disaster</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> it</font>

476
00:20:53,090 --> 00:20:58,250
shouldn't output should<font color="#E5E5E5"> be unpredictable</font>

477
00:20:55,660 --> 00:20:59,690
<font color="#CCCCCC">what kind of a security strength</font><font color="#E5E5E5"> do we</font>

478
00:20:58,250 --> 00:21:02,600
expect this<font color="#E5E5E5"> is mainly to avoid</font>

479
00:20:59,690 --> 00:21:05,540
<font color="#CCCCCC">brute-forcing at least 256</font><font color="#E5E5E5"> bits because</font>

480
00:21:02,600 --> 00:21:10,699
128 to<font color="#E5E5E5"> raise to 128 is good enough</font>

481
00:21:05,540 --> 00:21:12,260
security<font color="#E5E5E5"> strength</font><font color="#CCCCCC"> applications it's used</font>

482
00:21:10,700 --> 00:21:14,600
at a lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> places it's used for</font>

483
00:21:12,260 --> 00:21:16,490
calculating<font color="#E5E5E5"> max authenticating your API</font>

484
00:21:14,600 --> 00:21:22,909
is digital source file<font color="#E5E5E5"> integrity checks</font>

485
00:21:16,490 --> 00:21:25,220
and so on and so forth now again<font color="#E5E5E5"> Jesse</font>

486
00:21:22,910 --> 00:21:27,530
comes with this bunch of<font color="#E5E5E5"> algorithms even</font>

487
00:21:25,220 --> 00:21:31,070
<font color="#E5E5E5">in the latest version again look at the</font>

488
00:21:27,530 --> 00:21:34,000
red arrows I would say stick to char<font color="#CCCCCC"> to</font>

489
00:21:31,070 --> 00:21:37,669
family of<font color="#E5E5E5"> algorithms</font><font color="#CCCCCC"> sharp 3 wasn't</font>

490
00:21:34,000 --> 00:21:39,920
<font color="#E5E5E5">introduced to replace char</font><font color="#CCCCCC"> -</font><font color="#E5E5E5"> it's it's</font>

491
00:21:37,670 --> 00:21:42,250
still newer it's not very well<font color="#E5E5E5"> vetted</font>

492
00:21:39,920 --> 00:21:45,440
out bowels implemented implementers

493
00:21:42,250 --> 00:21:47,060
<font color="#E5E5E5">unless you have any reason</font><font color="#CCCCCC"> to not</font><font color="#E5E5E5"> use</font>

494
00:21:45,440 --> 00:21:49,190
char<font color="#E5E5E5"> - which I could not come</font><font color="#CCCCCC"> up with</font>

495
00:21:47,060 --> 00:21:51,679
<font color="#E5E5E5">any I don't</font><font color="#CCCCCC"> see</font><font color="#E5E5E5"> us using char three at</font>

496
00:21:49,190 --> 00:21:54,140
the moment<font color="#CCCCCC"> if you decide to use char</font>

497
00:21:51,680 --> 00:21:56,180
<font color="#CCCCCC">three</font><font color="#E5E5E5"> and if you decide</font><font color="#CCCCCC"> to use it</font>

498
00:21:54,140 --> 00:21:58,970
through some<font color="#E5E5E5"> third party providers</font><font color="#CCCCCC"> there</font>

499
00:21:56,180 --> 00:22:02,180
is a huge naming confusion like char<font color="#CCCCCC"> 3</font>

500
00:21:58,970 --> 00:22:04,730
could even mean sharp 380 char<font color="#CCCCCC"> -</font><font color="#E5E5E5"> is 384</font>

501
00:22:02,180 --> 00:22:06,650
384 bit output or something so just just

502
00:22:04,730 --> 00:22:12,770
be vigilant<font color="#CCCCCC"> of what exact algorithm you</font>

503
00:22:06,650 --> 00:22:15,110
are actually<font color="#E5E5E5"> trying to use the only</font>

504
00:22:12,770 --> 00:22:18,139
thing I want to point out with related

505
00:22:15,110 --> 00:22:20,389
<font color="#E5E5E5">to coding mistakes here is when someone</font>

506
00:22:18,140 --> 00:22:22,910
<font color="#CCCCCC">is trying there is a</font><font color="#E5E5E5"> wait the digest</font>

507
00:22:20,390 --> 00:22:25,190
works on all<font color="#E5E5E5"> the data you want</font><font color="#CCCCCC"> to digest</font>

508
00:22:22,910 --> 00:22:26,540
<font color="#CCCCCC">just to first</font><font color="#E5E5E5"> collect all the data you</font>

509
00:22:25,190 --> 00:22:29,300
want<font color="#CCCCCC"> to digest and then apply</font><font color="#E5E5E5"> that</font>

510
00:22:26,540 --> 00:22:31,879
digesting lot of times what<font color="#CCCCCC"> we have seen</font>

511
00:22:29,300 --> 00:22:34,070
is they<font color="#E5E5E5"> just pick the first n bytes of</font>

512
00:22:31,880 --> 00:22:36,080
<font color="#CCCCCC">the buffer</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> just apply the digesting</font>

513
00:22:34,070 --> 00:22:38,060
so it's like if if it's hundred lines

514
00:22:36,080 --> 00:22:39,860
they just digest the first line<font color="#E5E5E5"> it does</font>

515
00:22:38,060 --> 00:22:42,169
not<font color="#E5E5E5"> make</font><font color="#CCCCCC"> any</font><font color="#E5E5E5"> sense so</font><font color="#CCCCCC"> that's why the</font>

516
00:22:39,860 --> 00:22:47,090
importance of applying the repeated

517
00:22:42,170 --> 00:22:50,240
<font color="#E5E5E5">while loop on all the data</font><font color="#CCCCCC"> ok these</font><font color="#E5E5E5"> are</font>

518
00:22:47,090 --> 00:22:53,449
<font color="#CCCCCC">the</font><font color="#E5E5E5"> three basic crypto primitives now</font>

519
00:22:50,240 --> 00:22:55,900
very rarely<font color="#CCCCCC"> they're used in isolation</font>

520
00:22:53,450 --> 00:23:00,800
<font color="#E5E5E5">it's always used in a more higher level</font>

521
00:22:55,900 --> 00:23:01,480
operations<font color="#CCCCCC"> these</font><font color="#E5E5E5"> are the main operations</font>

522
00:23:00,800 --> 00:23:05,200
which I

523
00:23:01,480 --> 00:23:07,570
<font color="#CCCCCC">see mostly</font><font color="#E5E5E5"> used across and for which</font>

524
00:23:05,200 --> 00:23:12,220
<font color="#E5E5E5">JJ's here comes out with an engine class</font>

525
00:23:07,570 --> 00:23:15,100
<font color="#E5E5E5">so I will quickly go through those</font><font color="#CCCCCC"> first</font>

526
00:23:12,220 --> 00:23:18,549
<font color="#E5E5E5">is a message authentication code</font><font color="#CCCCCC"> it's a</font>

527
00:23:15,100 --> 00:23:21,100
symmetric encryption based<font color="#CCCCCC"> perimeter</font><font color="#E5E5E5"> a</font>

528
00:23:18,549 --> 00:23:23,260
<font color="#CCCCCC">paper-based</font><font color="#E5E5E5"> application it's the same</font>

529
00:23:21,100 --> 00:23:25,689
keys are used for by the sender and<font color="#CCCCCC"> the</font>

530
00:23:23,260 --> 00:23:29,169
receiver<font color="#E5E5E5"> side the sender side computes</font>

531
00:23:25,690 --> 00:23:31,480
<font color="#CCCCCC">the</font><font color="#E5E5E5"> using the symmetric key computes the</font>

532
00:23:29,169 --> 00:23:33,280
<font color="#CCCCCC">Mac</font><font color="#E5E5E5"> sends the Mac and the actual data to</font>

533
00:23:31,480 --> 00:23:35,620
the receiver receiver<font color="#CCCCCC"> recompute said</font>

534
00:23:33,280 --> 00:23:38,230
with the same key if the<font color="#E5E5E5"> Macs match you</font>

535
00:23:35,620 --> 00:23:40,379
have<font color="#E5E5E5"> integrity check and authenticity on</font>

536
00:23:38,230 --> 00:23:42,669
the data you<font color="#CCCCCC"> are being passing around</font>

537
00:23:40,380 --> 00:23:45,880
<font color="#E5E5E5">there is nothing difficult about this</font>

538
00:23:42,669 --> 00:23:49,900
the<font color="#CCCCCC"> only thing I wanted to</font><font color="#E5E5E5"> point was the</font>

539
00:23:45,880 --> 00:23:52,929
H Mac algorithm it's<font color="#E5E5E5"> always better to</font>

540
00:23:49,900 --> 00:23:55,330
use<font color="#E5E5E5"> a right and the most secured ones</font>

541
00:23:52,929 --> 00:23:58,690
but if you are using like for example H

542
00:23:55,330 --> 00:24:00,668
<font color="#CCCCCC">max sha-1 or something which is a very</font>

543
00:23:58,690 --> 00:24:03,669
<font color="#CCCCCC">collusion which has a lot of collusion</font>

544
00:24:00,669 --> 00:24:05,650
resistance issues<font color="#E5E5E5"> it's</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> the</font>

545
00:24:03,669 --> 00:24:08,260
collusion<font color="#E5E5E5"> the internal algorithm has</font>

546
00:24:05,650 --> 00:24:10,210
function is not the problem<font color="#E5E5E5"> for your Mac</font>

547
00:24:08,260 --> 00:24:12,549
it's the keys which<font color="#E5E5E5"> are usually the</font>

548
00:24:10,210 --> 00:24:14,830
problem<font color="#E5E5E5"> but there is no</font><font color="#CCCCCC"> reason to</font><font color="#E5E5E5"> go and</font>

549
00:24:12,549 --> 00:24:20,860
use a older algorithm always<font color="#CCCCCC"> use the</font>

550
00:24:14,830 --> 00:24:24,850
newer one<font color="#CCCCCC"> next</font><font color="#E5E5E5"> one is obviously digital</font>

551
00:24:20,860 --> 00:24:26,709
signatures here you have a signer<font color="#E5E5E5"> and a</font>

552
00:24:24,850 --> 00:24:29,860
verifier it's based on a symmetric

553
00:24:26,710 --> 00:24:32,350
encryption<font color="#CCCCCC"> the signer signs width is a</font>

554
00:24:29,860 --> 00:24:34,840
private key the data and sends the clear

555
00:24:32,350 --> 00:24:36,879
sign to<font color="#E5E5E5"> the verifier who recomputes the</font>

556
00:24:34,840 --> 00:24:39,790
sign from<font color="#CCCCCC"> the public key</font><font color="#E5E5E5"> and if they</font>

557
00:24:36,880 --> 00:24:41,880
match you<font color="#E5E5E5"> get all these properties now</font>

558
00:24:39,790 --> 00:24:46,000
as we were<font color="#E5E5E5"> speaking earlier it's a</font>

559
00:24:41,880 --> 00:24:49,900
<font color="#E5E5E5">symmetric</font><font color="#CCCCCC"> Basinger based application you</font>

560
00:24:46,000 --> 00:24:53,080
<font color="#E5E5E5">should always try to use a MGP MGF based</font>

561
00:24:49,900 --> 00:24:55,960
padding<font color="#CCCCCC"> our schemes now interestingly</font>

562
00:24:53,080 --> 00:24:59,110
<font color="#E5E5E5">Jess here has up the algorithm support</font>

563
00:24:55,960 --> 00:25:00,760
for it but it does not<font color="#CCCCCC"> have engine class</font>

564
00:24:59,110 --> 00:25:03,070
support for this<font color="#E5E5E5"> through the signature</font>

565
00:25:00,760 --> 00:25:05,020
<font color="#CCCCCC">API I have tried</font><font color="#E5E5E5"> through a lot of</font>

566
00:25:03,070 --> 00:25:07,240
<font color="#E5E5E5">different transparent specifications to</font>

567
00:25:05,020 --> 00:25:09,280
figure out<font color="#E5E5E5"> whether there is a API</font>

568
00:25:07,240 --> 00:25:12,460
support for this engine<font color="#E5E5E5"> class but there</font>

569
00:25:09,280 --> 00:25:14,410
is none<font color="#CCCCCC"> so</font><font color="#E5E5E5"> this is one instance</font><font color="#CCCCCC"> I would</font>

570
00:25:12,460 --> 00:25:17,020
<font color="#CCCCCC">suggest</font><font color="#E5E5E5"> go for a</font><font color="#CCCCCC"> third</font><font color="#E5E5E5"> party</font>

571
00:25:14,410 --> 00:25:22,630
where it<font color="#E5E5E5"> is much</font><font color="#CCCCCC"> easier to just use</font><font color="#E5E5E5"> the</font>

572
00:25:17,020 --> 00:25:34,270
right algorithm unfortunately<font color="#E5E5E5"> yeah and</font>

573
00:25:22,630 --> 00:25:36,310
the<font color="#E5E5E5"> last one okay last one how to store</font>

574
00:25:34,270 --> 00:25:39,129
<font color="#CCCCCC">your passwords I'm sure everyone has</font>

575
00:25:36,310 --> 00:25:41,800
faced this issue<font color="#CCCCCC"> it even leads to how to</font>

576
00:25:39,130 --> 00:25:44,230
authenticate<font color="#E5E5E5"> your users</font><font color="#CCCCCC"> you might have</font>

577
00:25:41,800 --> 00:25:46,030
<font color="#E5E5E5">started your career with hashing and</font>

578
00:25:44,230 --> 00:25:48,030
salting the user passwords and storing

579
00:25:46,030 --> 00:25:50,350
in<font color="#E5E5E5"> the database and everything it's all</font>

580
00:25:48,030 --> 00:25:53,020
not very<font color="#E5E5E5"> good anymore these days and</font>

581
00:25:50,350 --> 00:25:56,290
everyone<font color="#E5E5E5"> knows why one of the best ways</font>

582
00:25:53,020 --> 00:25:59,560
to do it<font color="#E5E5E5"> is to use</font><font color="#CCCCCC"> a password based</font><font color="#E5E5E5"> key</font>

583
00:25:56,290 --> 00:26:01,540
derivative functions now<font color="#E5E5E5"> Java does not</font>

584
00:25:59,560 --> 00:26:03,570
talk about<font color="#E5E5E5"> the support for this ever</font>

585
00:26:01,540 --> 00:26:06,310
anywhere<font color="#E5E5E5"> in the entire documentation</font>

586
00:26:03,570 --> 00:26:08,290
<font color="#E5E5E5">except for when I was actually debugging</font>

587
00:26:06,310 --> 00:26:10,120
different providers and their support

588
00:26:08,290 --> 00:26:12,010
through one some<font color="#E5E5E5"> command-line utility</font><font color="#CCCCCC"> or</font>

589
00:26:10,120 --> 00:26:15,219
something and I figured out<font color="#E5E5E5"> Oh what does</font>

590
00:26:12,010 --> 00:26:17,800
<font color="#E5E5E5">this</font><font color="#CCCCCC"> PE key expecting doing for us and</font>

591
00:26:15,220 --> 00:26:18,520
that's when I realized<font color="#E5E5E5"> okay they do have</font>

592
00:26:17,800 --> 00:26:20,560
<font color="#E5E5E5">this support</font>

593
00:26:18,520 --> 00:26:22,570
<font color="#E5E5E5">so now if you really have an</font><font color="#CCCCCC"> option you</font>

594
00:26:20,560 --> 00:26:25,090
should<font color="#E5E5E5"> definitely try to use more mature</font>

595
00:26:22,570 --> 00:26:27,340
algorithms like argon-argon<font color="#CCCCCC"> 2 or B</font>

596
00:26:25,090 --> 00:26:30,300
script or a script or<font color="#E5E5E5"> anything but JC</font>

597
00:26:27,340 --> 00:26:32,590
has support<font color="#E5E5E5"> for it</font><font color="#CCCCCC"> it's good enough and</font>

598
00:26:30,300 --> 00:26:35,290
<font color="#CCCCCC">this</font><font color="#E5E5E5"> is how I would recommend you</font>

599
00:26:32,590 --> 00:26:38,199
configuring these parameters obviously

600
00:26:35,290 --> 00:26:40,350
your user like very low entropy<font color="#E5E5E5"> user</font>

601
00:26:38,200 --> 00:26:42,640
<font color="#CCCCCC">enter</font><font color="#E5E5E5"> password you should never store it</font>

602
00:26:40,350 --> 00:26:45,429
as it is in your database

603
00:26:42,640 --> 00:26:48,100
your<font color="#CCCCCC"> site should be at least 64 bits in</font>

604
00:26:45,430 --> 00:26:49,690
<font color="#E5E5E5">the size iteration algorithm is number</font>

605
00:26:48,100 --> 00:26:51,850
of<font color="#CCCCCC"> times the hashing should be applied</font>

606
00:26:49,690 --> 00:26:53,710
on the<font color="#E5E5E5"> password it should be at least</font>

607
00:26:51,850 --> 00:26:55,719
<font color="#CCCCCC">ten</font><font color="#E5E5E5"> thousand I would say go for twenty</font>

608
00:26:53,710 --> 00:26:57,610
thousand today's computer power

609
00:26:55,720 --> 00:27:00,100
definitely permits that this is mainly

610
00:26:57,610 --> 00:27:02,199
to<font color="#E5E5E5"> slow down brute forcing attacks and</font>

611
00:27:00,100 --> 00:27:05,169
expect the output<font color="#E5E5E5"> key land to be at</font>

612
00:27:02,200 --> 00:27:11,140
least<font color="#E5E5E5"> 256 characters and obviously use a</font>

613
00:27:05,170 --> 00:27:14,230
nice secure H<font color="#CCCCCC"> Mike algorithm for it this</font>

614
00:27:11,140 --> 00:27:16,090
<font color="#E5E5E5">is this is what I had for all the crypto</font>

615
00:27:14,230 --> 00:27:19,240
<font color="#E5E5E5">chrome it is so obviously crypto is a</font>

616
00:27:16,090 --> 00:27:21,189
very important<font color="#E5E5E5"> topic</font><font color="#CCCCCC"> its</font><font color="#E5E5E5"> responsibility</font>

617
00:27:19,240 --> 00:27:22,930
<font color="#E5E5E5">is all of</font><font color="#CCCCCC"> us to make</font><font color="#E5E5E5"> sure whatever</font>

618
00:27:21,190 --> 00:27:24,580
<font color="#E5E5E5">systems however we are involved in</font>

619
00:27:22,930 --> 00:27:26,000
through<font color="#CCCCCC"> our employers who are</font><font color="#E5E5E5"> private</font>

620
00:27:24,580 --> 00:27:31,460
projects<font color="#CCCCCC"> whatever</font>

621
00:27:26,000 --> 00:27:34,790
secured enough and that comes to the

622
00:27:31,460 --> 00:27:36,770
conclusion<font color="#CCCCCC"> Slade I have all the codes</font>

623
00:27:34,790 --> 00:27:39,500
templates working as<font color="#E5E5E5"> Java modules and</font>

624
00:27:36,770 --> 00:27:41,600
<font color="#E5E5E5">micro services</font><font color="#CCCCCC"> on the grid lab</font><font color="#E5E5E5"> here and</font>

625
00:27:39,500 --> 00:27:44,060
I have been blogging<font color="#E5E5E5"> about all these</font>

626
00:27:41,600 --> 00:27:45,860
parameters in the much much much more

627
00:27:44,060 --> 00:27:49,370
detail<font color="#E5E5E5"> than I can I work over in 35</font>

628
00:27:45,860 --> 00:27:55,820
minutes<font color="#CCCCCC"> on my</font><font color="#E5E5E5"> company's a block so yeah</font>

629
00:27:49,370 --> 00:28:00,219
to visit that I<font color="#E5E5E5"> know at this point I can</font>

630
00:27:55,820 --> 00:28:00,220
take questions<font color="#E5E5E5"> I think I can</font>

631
00:28:12,519 --> 00:28:18,289
it's it's<font color="#E5E5E5"> basically to reinitialize</font><font color="#CCCCCC"> the</font>

632
00:28:16,070 --> 00:28:20,990
algorithm after<font color="#CCCCCC"> you have initially</font>

633
00:28:18,289 --> 00:28:23,149
seeded it so like after after using<font color="#E5E5E5"> the</font>

634
00:28:20,990 --> 00:28:25,309
initial seed for like first for<font color="#E5E5E5"> example</font>

635
00:28:23,149 --> 00:28:32,629
<font color="#E5E5E5">X number</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> times you want</font><font color="#CCCCCC"> to reseal the</font>

636
00:28:25,309 --> 00:28:34,279
algorithm<font color="#E5E5E5"> that's when you you said C so</font>

637
00:28:32,630 --> 00:28:36,649
it does not produce<font color="#CCCCCC"> determination</font>

638
00:28:34,279 --> 00:28:39,200
deterministic output but if it is used

639
00:28:36,649 --> 00:28:40,428
before the algorithm is initialized by

640
00:28:39,200 --> 00:28:47,919
the next<font color="#E5E5E5"> yield it will produce</font>

641
00:28:40,429 --> 00:28:47,919
deterministic yes

642
00:28:50,590 --> 00:28:59,270
sorry<font color="#E5E5E5"> password-based</font><font color="#CCCCCC"> I will go</font><font color="#E5E5E5"> for</font>

643
00:28:58,789 --> 00:29:01,690
bcrypt

644
00:28:59,270 --> 00:29:04,580
but if I mean since I'm focusing more on

645
00:29:01,690 --> 00:29:06,380
<font color="#CCCCCC">JCS stuff I</font><font color="#E5E5E5"> just wanted to point out</font>

646
00:29:04,580 --> 00:29:08,330
<font color="#E5E5E5">that there</font><font color="#CCCCCC"> is a way to do that if you</font>

647
00:29:06,380 --> 00:29:11,360
<font color="#E5E5E5">don't want to relearn the new API or</font>

648
00:29:08,330 --> 00:29:12,949
something<font color="#CCCCCC"> you at</font><font color="#E5E5E5"> least can do this I'm</font>

649
00:29:11,360 --> 00:29:18,820
seeing<font color="#E5E5E5"> different slides different places</font>

650
00:29:12,950 --> 00:29:18,820
<font color="#CCCCCC">that's interesting sorry</font>

651
00:29:27,990 --> 00:29:32,570
<font color="#E5E5E5">okay I'm around today tomorrow sorry</font>

652
00:29:33,410 --> 00:29:43,140
finally<font color="#E5E5E5"> okay I think any more questions</font>

653
00:29:40,860 --> 00:29:46,639
I'm around today tomorrow<font color="#CCCCCC"> if you have</font>

654
00:29:43,140 --> 00:29:46,640
<font color="#CCCCCC">any comments questions</font>

655
00:29:46,830 --> 00:29:52,839
[Applause]

