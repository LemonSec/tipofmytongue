1
00:00:00,000 --> 00:00:11,250
<font color="#CCCCCC">alright</font><font color="#E5E5E5"> thanks for having me and thanks</font>

2
00:00:02,760 --> 00:00:13,440
<font color="#E5E5E5">for coming</font><font color="#CCCCCC"> to my</font><font color="#E5E5E5"> talk I'm not working</font>

3
00:00:11,250 --> 00:00:16,079
Mike's not working<font color="#CCCCCC"> there we go all right</font>

4
00:00:13,440 --> 00:00:18,509
thank<font color="#CCCCCC"> you so just couple</font><font color="#E5E5E5"> words about Who</font>

5
00:00:16,079 --> 00:00:20,759
I am<font color="#E5E5E5"> so I mean</font><font color="#CCCCCC"> Hagen I</font><font color="#E5E5E5"> work at Netflix</font>

6
00:00:18,510 --> 00:00:22,410
<font color="#E5E5E5">I'm a senior security software engineer</font>

7
00:00:20,760 --> 00:00:24,029
on<font color="#CCCCCC"> a platform security</font><font color="#E5E5E5"> team our team</font>

8
00:00:22,410 --> 00:00:25,619
builds a lot<font color="#CCCCCC"> of cool</font><font color="#E5E5E5"> stuff to keep our</font>

9
00:00:24,029 --> 00:00:28,439
ecosystem secure and we've talked<font color="#E5E5E5"> about</font>

10
00:00:25,619 --> 00:00:30,929
a lot<font color="#CCCCCC"> of the things we do so Google us</font>

11
00:00:28,439 --> 00:00:32,488
or find these links<font color="#CCCCCC"> after the talk and</font>

12
00:00:30,929 --> 00:00:34,589
check out all<font color="#E5E5E5"> the cool</font><font color="#CCCCCC"> stuff we</font><font color="#E5E5E5"> work on</font>

13
00:00:32,488 --> 00:00:36,449
but let's<font color="#E5E5E5"> focus on what we're here to</font>

14
00:00:34,590 --> 00:00:38,940
<font color="#E5E5E5">talk about today</font><font color="#CCCCCC"> d</font><font color="#E5E5E5"> serialization gadget</font>

15
00:00:36,450 --> 00:00:40,559
chains so I'm<font color="#E5E5E5"> gonna talk about what a</font><font color="#CCCCCC"> D</font>

16
00:00:38,940 --> 00:00:41,879
<font color="#CCCCCC">serialization vulnerability is for</font>

17
00:00:40,559 --> 00:00:43,769
<font color="#E5E5E5">people in the room</font><font color="#CCCCCC"> that don't</font><font color="#E5E5E5"> know</font>

18
00:00:41,879 --> 00:00:45,718
exactly what I'm talking<font color="#CCCCCC"> about and just</font>

19
00:00:43,770 --> 00:00:47,460
so<font color="#E5E5E5"> that we're all on the same page and</font>

20
00:00:45,719 --> 00:00:49,079
<font color="#E5E5E5">then I'm gonna give you a kind of</font><font color="#CCCCCC"> a very</font>

21
00:00:47,460 --> 00:00:50,520
brief history<font color="#CCCCCC"> of</font><font color="#E5E5E5"> D civilization</font>

22
00:00:49,079 --> 00:00:52,800
vulnerabilities because it's not a new

23
00:00:50,520 --> 00:00:55,710
topic by any means<font color="#E5E5E5"> but</font><font color="#CCCCCC"> then I'm gonna</font>

24
00:00:52,800 --> 00:00:57,300
really<font color="#E5E5E5"> deep dive into gadget chains</font><font color="#CCCCCC"> so</font>

25
00:00:55,710 --> 00:00:59,699
I'm<font color="#CCCCCC"> gonna talk about</font><font color="#E5E5E5"> what</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> is what</font>

26
00:00:57,300 --> 00:01:02,640
<font color="#E5E5E5">it means how we find them and ultimately</font>

27
00:00:59,699 --> 00:01:04,378
a new tool that<font color="#E5E5E5"> I built in order</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> find</font>

28
00:01:02,640 --> 00:01:06,720
gadget chains and how we use that<font color="#E5E5E5"> at</font>

29
00:01:04,379 --> 00:01:09,869
Netflix to help discover and remediate

30
00:01:06,720 --> 00:01:12,600
vulnerabilities and applications so what

31
00:01:09,869 --> 00:01:14,280
is<font color="#CCCCCC"> a D serialisation vulnerability so an</font>

32
00:01:12,600 --> 00:01:15,809
<font color="#CCCCCC">object-oriented languages like Java</font>

33
00:01:14,280 --> 00:01:17,820
<font color="#E5E5E5">which is the language I'm gonna be</font>

34
00:01:15,810 --> 00:01:19,799
really talking<font color="#CCCCCC"> about today but</font><font color="#E5E5E5"> most of</font>

35
00:01:17,820 --> 00:01:22,470
this<font color="#E5E5E5"> applies to any object oriented</font>

36
00:01:19,799 --> 00:01:23,939
language<font color="#E5E5E5"> so you know c-sharp and PHP and</font>

37
00:01:22,470 --> 00:01:26,158
what else

38
00:01:23,939 --> 00:01:28,559
but in these languages<font color="#E5E5E5"> data is contained</font>

39
00:01:26,159 --> 00:01:30,659
in classes and<font color="#E5E5E5"> classes contain code</font><font color="#CCCCCC"> this</font>

40
00:01:28,560 --> 00:01:33,479
<font color="#E5E5E5">is like the idea</font><font color="#CCCCCC"> of what object-oriented</font>

41
00:01:30,659 --> 00:01:35,340
programming means<font color="#CCCCCC"> but this</font><font color="#E5E5E5"> has a</font><font color="#CCCCCC"> really</font>

42
00:01:33,479 --> 00:01:37,829
fundamental implication which is that if

43
00:01:35,340 --> 00:01:39,479
<font color="#E5E5E5">you control</font><font color="#CCCCCC"> the datatype</font><font color="#E5E5E5"> that some of</font>

44
00:01:37,829 --> 00:01:41,100
your code is operating on then you're

45
00:01:39,479 --> 00:01:42,780
also controlling what code<font color="#CCCCCC"> is running</font>

46
00:01:41,100 --> 00:01:45,869
<font color="#E5E5E5">because the code is associated</font><font color="#CCCCCC"> with the</font>

47
00:01:42,780 --> 00:01:49,500
<font color="#E5E5E5">data type so</font><font color="#CCCCCC"> why</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> that significant</font><font color="#E5E5E5"> so</font>

48
00:01:45,869 --> 00:01:51,180
here's an example<font color="#E5E5E5"> of kind</font><font color="#CCCCCC"> of a classic</font><font color="#E5E5E5"> D</font>

49
00:01:49,500 --> 00:01:53,460
<font color="#E5E5E5">so as</font><font color="#CCCCCC"> a ssin vulnerability in java so</font>

50
00:01:51,180 --> 00:01:55,530
there's some rest<font color="#CCCCCC"> endpoints and it</font>

51
00:01:53,460 --> 00:01:57,119
converts<font color="#E5E5E5"> the body of</font><font color="#CCCCCC"> that request into</font>

52
00:01:55,530 --> 00:01:59,280
an object input stream and<font color="#CCCCCC"> this is the</font>

53
00:01:57,119 --> 00:02:01,110
<font color="#E5E5E5">jdk is built in</font><font color="#CCCCCC"> d</font><font color="#E5E5E5"> serialization library</font>

54
00:01:59,280 --> 00:02:03,719
and then reads an object out<font color="#CCCCCC"> of that</font>

55
00:02:01,110 --> 00:02:06,329
<font color="#E5E5E5">input stream so if DC realizes it casts</font>

56
00:02:03,719 --> 00:02:08,579
it to a user<font color="#E5E5E5"> and then outputs user dot</font>

57
00:02:06,329 --> 00:02:10,679
render<font color="#E5E5E5"> or whatever that means</font><font color="#CCCCCC"> so the</font>

58
00:02:08,580 --> 00:02:12,300
intent is probably that<font color="#E5E5E5"> the</font><font color="#CCCCCC"> user is some</font>

59
00:02:10,679 --> 00:02:13,410
class like this that just<font color="#CCCCCC"> has a name and</font>

60
00:02:12,300 --> 00:02:15,510
<font color="#CCCCCC">we call renderer</font>

61
00:02:13,410 --> 00:02:17,640
some data<font color="#E5E5E5"> so this is totally innocuous</font>

62
00:02:15,510 --> 00:02:20,190
<font color="#CCCCCC">sort of nothing</font><font color="#E5E5E5"> bad really happens here</font>

63
00:02:17,640 --> 00:02:22,230
<font color="#CCCCCC">but where</font><font color="#E5E5E5"> things can get dangerous</font><font color="#CCCCCC"> is if</font>

64
00:02:20,190 --> 00:02:24,690
you have some other<font color="#E5E5E5"> class on your</font><font color="#CCCCCC"> class</font>

65
00:02:22,230 --> 00:02:26,910
path like this<font color="#E5E5E5"> thumbnail user which</font>

66
00:02:24,690 --> 00:02:29,160
extends user and has a different render

67
00:02:26,910 --> 00:02:31,170
method<font color="#E5E5E5"> in this case it reads a file off</font>

68
00:02:29,160 --> 00:02:33,329
<font color="#CCCCCC">the file system and outputs</font><font color="#E5E5E5"> that as the</font>

69
00:02:31,170 --> 00:02:35,730
render method<font color="#E5E5E5"> and that means that if you</font>

70
00:02:33,330 --> 00:02:37,770
were to serialize a thumbnail user<font color="#E5E5E5"> and</font>

71
00:02:35,730 --> 00:02:40,260
send that to<font color="#CCCCCC"> this endpoint you would get</font>

72
00:02:37,770 --> 00:02:42,240
any file<font color="#E5E5E5"> off the disk</font><font color="#CCCCCC"> returned</font><font color="#E5E5E5"> back to</font>

73
00:02:40,260 --> 00:02:44,130
<font color="#CCCCCC">you and so this is what I</font><font color="#E5E5E5"> mean when I</font>

74
00:02:42,240 --> 00:02:45,690
<font color="#E5E5E5">say when you control the data type you</font>

75
00:02:44,130 --> 00:02:47,010
control what code is<font color="#CCCCCC"> running and</font>

76
00:02:45,690 --> 00:02:49,130
fundamentally<font color="#E5E5E5"> that's what</font><font color="#CCCCCC"> D</font>

77
00:02:47,010 --> 00:02:51,329
serialization vulnerabilities are about

78
00:02:49,130 --> 00:02:53,250
so why am<font color="#E5E5E5"> I talking</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> D</font>

79
00:02:51,330 --> 00:02:54,930
serialization<font color="#E5E5E5"> if you've been following</font>

80
00:02:53,250 --> 00:02:57,120
<font color="#CCCCCC">this vulnerability class this</font><font color="#E5E5E5"> has</font><font color="#CCCCCC"> been</font>

81
00:02:54,930 --> 00:02:59,610
like super talked about since around

82
00:02:57,120 --> 00:03:02,130
<font color="#E5E5E5">2016 but really this is a vulnerability</font>

83
00:02:59,610 --> 00:03:03,570
class that<font color="#E5E5E5"> goes back way before that so</font>

84
00:03:02,130 --> 00:03:06,299
some of the<font color="#E5E5E5"> first</font><font color="#CCCCCC"> talks</font><font color="#E5E5E5"> about it we're</font>

85
00:03:03,570 --> 00:03:07,920
back<font color="#E5E5E5"> in 2006</font><font color="#CCCCCC"> mark Shonen Feld gave a</font>

86
00:03:06,300 --> 00:03:09,660
talk at blackhat<font color="#E5E5E5"> where he</font><font color="#CCCCCC"> kind of</font>

87
00:03:07,920 --> 00:03:11,720
describes what some of<font color="#E5E5E5"> these</font>

88
00:03:09,660 --> 00:03:14,850
<font color="#CCCCCC">vulnerabilities look like in popular</font>

89
00:03:11,720 --> 00:03:16,620
enterprise applications and in

90
00:03:14,850 --> 00:03:19,650
particular application application

91
00:03:16,620 --> 00:03:21,930
containers<font color="#E5E5E5"> but even though this was kind</font>

92
00:03:19,650 --> 00:03:25,080
<font color="#E5E5E5">of first discovered back in 2006 it</font>

93
00:03:21,930 --> 00:03:26,880
wasn't really popularized until<font color="#E5E5E5"> 2015</font><font color="#CCCCCC"> now</font>

94
00:03:25,080 --> 00:03:29,580
<font color="#CCCCCC">as with</font><font color="#E5E5E5"> fro</font><font color="#CCCCCC"> Hopf and</font><font color="#E5E5E5"> Lawrence's talk</font><font color="#CCCCCC"> at</font>

95
00:03:26,880 --> 00:03:31,019
<font color="#CCCCCC">apps at</font><font color="#E5E5E5"> Kali</font><font color="#CCCCCC"> where they gave this</font><font color="#E5E5E5"> talk</font>

96
00:03:29,580 --> 00:03:32,190
<font color="#E5E5E5">of</font><font color="#CCCCCC"> marshaling pickles where they</font>

97
00:03:31,020 --> 00:03:35,070
<font color="#E5E5E5">basically</font><font color="#CCCCCC"> describe</font><font color="#E5E5E5"> that there's all</font>

98
00:03:32,190 --> 00:03:37,380
these RC e gadget chains<font color="#E5E5E5"> in popular open</font>

99
00:03:35,070 --> 00:03:38,519
<font color="#CCCCCC">source libraries</font><font color="#E5E5E5"> so it's not</font><font color="#CCCCCC"> just if</font>

100
00:03:37,380 --> 00:03:41,190
you're running a<font color="#CCCCCC"> particular application</font>

101
00:03:38,520 --> 00:03:43,140
container<font color="#CCCCCC"> but</font><font color="#E5E5E5"> if you are pulling in any</font>

102
00:03:41,190 --> 00:03:45,000
of these libraries<font color="#E5E5E5"> into your application</font>

103
00:03:43,140 --> 00:03:46,859
<font color="#E5E5E5">then you might be vulnerable and you</font>

104
00:03:45,000 --> 00:03:50,190
might have code execution in your app

105
00:03:46,860 --> 00:03:52,050
and so the year that<font color="#E5E5E5"> followed I've often</font>

106
00:03:50,190 --> 00:03:53,970
heard<font color="#CCCCCC"> people describe as the like D</font>

107
00:03:52,050 --> 00:03:55,620
serialization apocalypse<font color="#E5E5E5"> because just</font>

108
00:03:53,970 --> 00:03:57,239
everyone realized that all of<font color="#CCCCCC"> these</font>

109
00:03:55,620 --> 00:03:58,830
<font color="#E5E5E5">applications were vulnerable because</font>

110
00:03:57,239 --> 00:04:02,000
there were so many common libraries

111
00:03:58,830 --> 00:04:05,010
<font color="#E5E5E5">being pulled in that had these issues so</font>

112
00:04:02,000 --> 00:04:07,080
2016<font color="#E5E5E5"> had dozens and dozens and dozens of</font>

113
00:04:05,010 --> 00:04:08,730
talks<font color="#E5E5E5"> that you can look up about Java D</font>

114
00:04:07,080 --> 00:04:10,560
civilization issues but one of my

115
00:04:08,730 --> 00:04:12,959
<font color="#E5E5E5">favorite ones from that year was by Luca</font>

116
00:04:10,560 --> 00:04:15,450
at an<font color="#E5E5E5"> OAuth</font><font color="#CCCCCC"> Meetup</font><font color="#E5E5E5"> and it's called Java</font>

117
00:04:12,959 --> 00:04:16,890
<font color="#E5E5E5">D serialization vulnerabilities</font><font color="#CCCCCC"> and you</font>

118
00:04:15,450 --> 00:04:18,209
can look that up<font color="#CCCCCC"> later but</font><font color="#E5E5E5"> he just does</font>

119
00:04:16,890 --> 00:04:20,039
a really good<font color="#E5E5E5"> job of giving you kind</font><font color="#CCCCCC"> of</font>

120
00:04:18,209 --> 00:04:21,329
like an<font color="#E5E5E5"> overview</font><font color="#CCCCCC"> of what they are and</font>

121
00:04:20,040 --> 00:04:24,990
how<font color="#E5E5E5"> to figure out</font><font color="#CCCCCC"> if you're vulnerable</font>

122
00:04:21,329 --> 00:04:27,389
<font color="#E5E5E5">and what to do</font><font color="#CCCCCC"> about it but in the year</font>

123
00:04:24,990 --> 00:04:29,449
<font color="#E5E5E5">that</font><font color="#CCCCCC"> followed after that in 2017</font>

124
00:04:27,389 --> 00:04:32,580
<font color="#CCCCCC">Mirage gave this great</font><font color="#E5E5E5"> talk at blackhat</font>

125
00:04:29,449 --> 00:04:34,979
<font color="#E5E5E5">about JSON attack so up until this</font><font color="#CCCCCC"> point</font>

126
00:04:32,580 --> 00:04:36,568
<font color="#CCCCCC">everyone was really</font><font color="#E5E5E5"> focused</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> the JDK</font>

127
00:04:34,979 --> 00:04:38,758
is<font color="#CCCCCC"> built-in serialization and</font>

128
00:04:36,569 --> 00:04:40,319
deserialization library and how to build

129
00:04:38,759 --> 00:04:42,300
<font color="#CCCCCC">gadget</font><font color="#E5E5E5"> chains and exploits using that</font>

130
00:04:40,319 --> 00:04:44,580
and what<font color="#CCCCCC"> Muniz</font><font color="#E5E5E5"> Amuro showed was</font><font color="#CCCCCC"> give do</font>

131
00:04:42,300 --> 00:04:47,460
a really good survey of all these other

132
00:04:44,580 --> 00:04:50,938
serialization libraries and in languages

133
00:04:47,460 --> 00:04:52,469
beyond just<font color="#E5E5E5"> Java</font><font color="#CCCCCC"> and identified when</font>

134
00:04:50,939 --> 00:04:54,509
those are possibly vulnerable and what

135
00:04:52,469 --> 00:04:56,279
kind of attacks you can do against<font color="#E5E5E5"> those</font>

136
00:04:54,509 --> 00:04:57,960
libraries<font color="#E5E5E5"> so just because you're using</font>

137
00:04:56,279 --> 00:05:00,180
JSON<font color="#E5E5E5"> doesn't mean you're safe from these</font>

138
00:04:57,960 --> 00:05:02,128
kind of<font color="#CCCCCC"> attacks if you're fundamentally</font>

139
00:05:00,180 --> 00:05:04,289
<font color="#E5E5E5">if whatever serialization scheme you're</font>

140
00:05:02,129 --> 00:05:06,090
using<font color="#E5E5E5"> allows you to control what data</font>

141
00:05:04,289 --> 00:05:07,650
types are getting deserialized<font color="#E5E5E5"> then</font>

142
00:05:06,090 --> 00:05:09,179
you're potentially<font color="#CCCCCC"> vulnerable to one of</font>

143
00:05:07,650 --> 00:05:10,318
<font color="#E5E5E5">these kinds of attacks and so this does</font>

144
00:05:09,180 --> 00:05:11,520
a really<font color="#CCCCCC"> good</font><font color="#E5E5E5"> job</font><font color="#CCCCCC"> they're</font><font color="#E5E5E5"> just kind of</font>

145
00:05:10,319 --> 00:05:13,860
identifying the fact<font color="#E5E5E5"> that there's more</font>

146
00:05:11,520 --> 00:05:16,979
<font color="#CCCCCC">libraries</font><font color="#E5E5E5"> where this kind of attack can</font>

147
00:05:13,860 --> 00:05:18,509
<font color="#E5E5E5">apply but</font><font color="#CCCCCC"> in case you think this is</font><font color="#E5E5E5"> the</font>

148
00:05:16,979 --> 00:05:20,310
last<font color="#E5E5E5"> talk about destabilization you</font>

149
00:05:18,509 --> 00:05:22,110
probably<font color="#E5E5E5"> haven't read the rest of this</font>

150
00:05:20,310 --> 00:05:23,759
schedule because<font color="#E5E5E5"> there's another one</font><font color="#CCCCCC"> at</font>

151
00:05:22,110 --> 00:05:26,129
<font color="#CCCCCC">about 90 minutes from now</font><font color="#E5E5E5"> in the</font><font color="#CCCCCC"> gold</font>

152
00:05:23,759 --> 00:05:28,020
<font color="#CCCCCC">room so I hopefully that just highlights</font>

153
00:05:26,129 --> 00:05:29,669
<font color="#E5E5E5">for you that this topic is</font><font color="#CCCCCC"> not dead like</font>

154
00:05:28,020 --> 00:05:31,560
these realization vulnerabilities are

155
00:05:29,669 --> 00:05:33,359
still a thing that are present and that

156
00:05:31,560 --> 00:05:34,439
<font color="#E5E5E5">we're</font><font color="#CCCCCC"> interested in and hopefully by the</font>

157
00:05:33,360 --> 00:05:36,689
<font color="#CCCCCC">end of this</font><font color="#E5E5E5"> also</font><font color="#CCCCCC"> convince you that</font>

158
00:05:34,439 --> 00:05:37,830
they're<font color="#CCCCCC"> getting more sophisticated</font><font color="#E5E5E5"> so</font>

159
00:05:36,689 --> 00:05:40,139
something we really<font color="#E5E5E5"> need</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be paying</font>

160
00:05:37,830 --> 00:05:41,938
attention<font color="#E5E5E5"> to so</font><font color="#CCCCCC"> alright y r-d</font>

161
00:05:40,139 --> 00:05:43,620
<font color="#CCCCCC">civilization</font><font color="#E5E5E5"> vulnerability so bad if</font>

162
00:05:41,939 --> 00:05:45,569
they<font color="#E5E5E5"> were just what I described on that</font>

163
00:05:43,620 --> 00:05:47,189
first slide<font color="#E5E5E5"> then they probably wouldn't</font>

164
00:05:45,569 --> 00:05:48,750
<font color="#CCCCCC">be that interesting it's not</font><font color="#E5E5E5"> that often</font>

165
00:05:47,189 --> 00:05:50,580
<font color="#E5E5E5">that you have some class that overrides</font>

166
00:05:48,750 --> 00:05:52,349
another class where one has a knock<font color="#E5E5E5"> us</font>

167
00:05:50,580 --> 00:05:54,180
behavior but<font color="#E5E5E5"> one's really dangerous and</font>

168
00:05:52,349 --> 00:05:55,319
the reason<font color="#CCCCCC"> that they're so</font><font color="#E5E5E5"> bad is</font><font color="#CCCCCC"> that</font>

169
00:05:54,180 --> 00:05:58,620
there's these things<font color="#E5E5E5"> called magic</font>

170
00:05:55,319 --> 00:06:00,360
methods that classes can<font color="#E5E5E5"> implement in</font>

171
00:05:58,620 --> 00:06:02,729
<font color="#E5E5E5">order to control how they get serialize</font>

172
00:06:00,360 --> 00:06:04,979
and deserialize<font color="#CCCCCC"> and because they control</font>

173
00:06:02,729 --> 00:06:06,930
<font color="#E5E5E5">how</font><font color="#CCCCCC"> DC realization happens they get</font>

174
00:06:04,979 --> 00:06:08,878
<font color="#E5E5E5">invoked</font><font color="#CCCCCC"> before the</font><font color="#E5E5E5"> DC realization</font>

175
00:06:06,930 --> 00:06:10,860
<font color="#E5E5E5">actually finishes so this means that</font>

176
00:06:08,879 --> 00:06:13,080
<font color="#E5E5E5">there</font><font color="#CCCCCC"> is code that's</font><font color="#E5E5E5"> going to get</font>

177
00:06:10,860 --> 00:06:15,569
magically run depending<font color="#E5E5E5"> on what class is</font>

178
00:06:13,080 --> 00:06:17,580
in that<font color="#CCCCCC"> Paila and it has nothing to do</font>

179
00:06:15,569 --> 00:06:19,649
with<font color="#E5E5E5"> what you're actually casting it to</font>

180
00:06:17,580 --> 00:06:21,300
on the other end<font color="#E5E5E5"> so here's the rest</font><font color="#CCCCCC"> end</font>

181
00:06:19,649 --> 00:06:22,469
<font color="#CCCCCC">point from</font><font color="#E5E5E5"> that first slide and suppose</font>

182
00:06:21,300 --> 00:06:24,000
for the sake<font color="#E5E5E5"> of argument there's this</font>

183
00:06:22,469 --> 00:06:25,949
evil class or in<font color="#E5E5E5"> class path which</font>

184
00:06:24,000 --> 00:06:27,899
implements one of these<font color="#CCCCCC"> magic methods so</font>

185
00:06:25,949 --> 00:06:30,689
we'd object is one of them and it just

186
00:06:27,899 --> 00:06:32,729
<font color="#E5E5E5">execute arbitrary code even</font><font color="#CCCCCC"> though this</font>

187
00:06:30,689 --> 00:06:35,819
evil class can't be classed to a user

188
00:06:32,729 --> 00:06:37,949
<font color="#CCCCCC">that magic method gets invoked</font><font color="#E5E5E5"> before</font>

189
00:06:35,819 --> 00:06:39,449
the end of the<font color="#E5E5E5"> we'd object method</font><font color="#CCCCCC"> so</font>

190
00:06:37,949 --> 00:06:41,330
before it even<font color="#E5E5E5"> tries to get cast to a</font>

191
00:06:39,449 --> 00:06:44,240
user so

192
00:06:41,330 --> 00:06:45,889
that means that it doesn't<font color="#CCCCCC"> matter what</font>

193
00:06:44,240 --> 00:06:48,080
you've<font color="#CCCCCC"> actually implemented in</font><font color="#E5E5E5"> your</font>

194
00:06:45,889 --> 00:06:50,120
application<font color="#CCCCCC"> if there is some bad codes</font>

195
00:06:48,080 --> 00:06:52,698
that you're<font color="#E5E5E5"> getting in its path through</font>

196
00:06:50,120 --> 00:06:54,710
<font color="#E5E5E5">some con transitive dependency then you</font>

197
00:06:52,699 --> 00:06:57,830
can<font color="#E5E5E5"> potentially build an exploit against</font>

198
00:06:54,710 --> 00:06:59,810
that application<font color="#E5E5E5"> so what's the deal with</font>

199
00:06:57,830 --> 00:07:01,609
magic methods you might be thinking like

200
00:06:59,810 --> 00:07:03,650
<font color="#E5E5E5">I've never implemented one of those how</font>

201
00:07:01,610 --> 00:07:04,490
common can they really be<font color="#E5E5E5"> and the answer</font>

202
00:07:03,650 --> 00:07:06,679
is<font color="#E5E5E5"> that they're</font><font color="#CCCCCC"> actually extremely</font>

203
00:07:04,490 --> 00:07:08,930
<font color="#E5E5E5">common because there's tons of classes</font>

204
00:07:06,680 --> 00:07:10,550
<font color="#CCCCCC">in the JDK</font><font color="#E5E5E5"> that actually implement these</font>

205
00:07:08,930 --> 00:07:12,229
magic methods in order<font color="#CCCCCC"> to control how</font>

206
00:07:10,550 --> 00:07:13,789
<font color="#CCCCCC">that gets</font><font color="#E5E5E5"> utilized</font><font color="#CCCCCC"> all right</font>

207
00:07:12,229 --> 00:07:15,560
<font color="#E5E5E5">the main reason for that and so that</font>

208
00:07:13,789 --> 00:07:17,449
<font color="#E5E5E5">they're actually the serialized version</font>

209
00:07:15,560 --> 00:07:19,940
<font color="#CCCCCC">is</font><font color="#E5E5E5"> compatible between different</font><font color="#CCCCCC"> JDK</font>

210
00:07:17,449 --> 00:07:22,159
versions but<font color="#E5E5E5"> that means that since those</font>

211
00:07:19,940 --> 00:07:23,810
classes implement<font color="#E5E5E5"> some these magic</font>

212
00:07:22,159 --> 00:07:25,580
methods and those magic methods ended up

213
00:07:23,810 --> 00:07:27,949
invoking other methods under the hoods

214
00:07:25,580 --> 00:07:30,409
<font color="#E5E5E5">then</font><font color="#CCCCCC"> they're become a</font><font color="#E5E5E5"> lot of</font><font color="#CCCCCC"> the other</font>

215
00:07:27,949 --> 00:07:32,990
known entry<font color="#E5E5E5"> points so for example a</font>

216
00:07:30,409 --> 00:07:33,949
<font color="#CCCCCC">hashmap get serialized</font><font color="#E5E5E5"> if it was using</font>

217
00:07:32,990 --> 00:07:36,349
<font color="#CCCCCC">the default strategy</font>

218
00:07:33,949 --> 00:07:38,180
<font color="#CCCCCC">it</font><font color="#E5E5E5"> would output</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> table it would be</font>

219
00:07:36,349 --> 00:07:41,240
<font color="#E5E5E5">very dependent on these specific</font>

220
00:07:38,180 --> 00:07:43,520
implementation<font color="#CCCCCC"> the</font><font color="#E5E5E5"> hash</font><font color="#CCCCCC"> map instead a TK</font>

221
00:07:41,240 --> 00:07:45,889
does is it just<font color="#CCCCCC"> writes out its value</font>

222
00:07:43,520 --> 00:07:47,900
pairs as a list so<font color="#CCCCCC"> just a list of</font><font color="#E5E5E5"> key</font>

223
00:07:45,889 --> 00:07:50,000
value<font color="#CCCCCC"> pairs and</font><font color="#E5E5E5"> when it reads back in it</font>

224
00:07:47,900 --> 00:07:51,590
calls this dot put with the key<font color="#E5E5E5"> and the</font>

225
00:07:50,000 --> 00:07:53,120
value<font color="#E5E5E5"> that it reads out and so that</font>

226
00:07:51,590 --> 00:07:55,340
<font color="#CCCCCC">means that</font><font color="#E5E5E5"> it ends up calling hashcode</font>

227
00:07:53,120 --> 00:07:56,960
and equals<font color="#E5E5E5"> on every object read out of</font>

228
00:07:55,340 --> 00:07:58,969
the input stream<font color="#CCCCCC"> so if there's some</font>

229
00:07:56,960 --> 00:08:01,698
class which<font color="#E5E5E5"> implements daint behavior</font>

230
00:07:58,969 --> 00:08:03,169
inside of<font color="#CCCCCC"> hack side of equals</font><font color="#E5E5E5"> then we</font>

231
00:08:01,699 --> 00:08:04,909
know<font color="#E5E5E5"> that there's a way</font><font color="#CCCCCC"> to jump into</font>

232
00:08:03,169 --> 00:08:06,490
<font color="#E5E5E5">that code through a magic method and</font>

233
00:08:04,909 --> 00:08:09,169
that's<font color="#E5E5E5"> by just wrapping it in a hash map</font>

234
00:08:06,490 --> 00:08:11,629
<font color="#CCCCCC">so hash map is</font><font color="#E5E5E5"> probably the best example</font>

235
00:08:09,169 --> 00:08:14,000
because<font color="#E5E5E5"> there's lots of gadget chains</font>

236
00:08:11,629 --> 00:08:16,099
that<font color="#CCCCCC"> are built using hash code or equals</font>

237
00:08:14,000 --> 00:08:18,199
but there's other<font color="#E5E5E5"> stuff in the JDK like</font>

238
00:08:16,099 --> 00:08:20,150
a<font color="#E5E5E5"> priority</font><font color="#CCCCCC"> 2 which will</font><font color="#E5E5E5"> reorder things</font>

239
00:08:18,199 --> 00:08:21,860
after it leads them<font color="#CCCCCC"> back in from</font><font color="#E5E5E5"> the</font>

240
00:08:20,150 --> 00:08:23,779
payload<font color="#E5E5E5"> so it's going to end</font><font color="#CCCCCC"> up calling</font>

241
00:08:21,860 --> 00:08:27,169
<font color="#E5E5E5">compare or compare to on all those</font>

242
00:08:23,779 --> 00:08:28,789
objects<font color="#E5E5E5"> it reads in so all</font><font color="#CCCCCC"> right how do</font>

243
00:08:27,169 --> 00:08:31,068
you get<font color="#E5E5E5"> from these matching methods to</font>

244
00:08:28,789 --> 00:08:33,380
gadget chains<font color="#E5E5E5"> gadget chains is of course</font>

245
00:08:31,069 --> 00:08:36,079
what I'm really<font color="#E5E5E5"> talking about today</font><font color="#CCCCCC"> so</font>

246
00:08:33,380 --> 00:08:37,698
what is a gadget chain<font color="#E5E5E5"> so here's a</font>

247
00:08:36,078 --> 00:08:39,739
really simplified<font color="#E5E5E5"> version of what that</font>

248
00:08:37,698 --> 00:08:40,549
<font color="#CCCCCC">magic method inside hash map looks</font><font color="#E5E5E5"> like</font>

249
00:08:39,740 --> 00:08:42,860
and<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is kind of what I just</font>

250
00:08:40,549 --> 00:08:45,079
<font color="#E5E5E5">described it's just reading in key value</font>

251
00:08:42,860 --> 00:08:47,779
pairs<font color="#E5E5E5"> as a list out of</font><font color="#CCCCCC"> the payload and</font>

252
00:08:45,079 --> 00:08:49,819
calling put bow on them<font color="#E5E5E5"> in particular it</font>

253
00:08:47,779 --> 00:08:51,800
has<font color="#CCCCCC"> a code call hash code on each of the</font>

254
00:08:49,819 --> 00:08:54,380
keys<font color="#CCCCCC"> that it reads in so here's an</font>

255
00:08:51,800 --> 00:08:55,189
<font color="#E5E5E5">example of a class</font><font color="#CCCCCC"> that might exist on</font>

256
00:08:54,380 --> 00:08:56,780
<font color="#CCCCCC">your class</font><font color="#E5E5E5"> path</font>

257
00:08:55,190 --> 00:08:58,580
something interesting<font color="#CCCCCC"> when</font><font color="#E5E5E5"> you call</font>

258
00:08:56,780 --> 00:09:01,069
<font color="#CCCCCC">hashcode on</font><font color="#E5E5E5"> it so this is out of the</font>

259
00:08:58,580 --> 00:09:03,860
closure library<font color="#E5E5E5"> and inside</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> class</font>

260
00:09:01,070 --> 00:09:05,690
<font color="#CCCCCC">is</font><font color="#E5E5E5"> hash code it's got a function map and</font>

261
00:09:03,860 --> 00:09:09,050
it reads out<font color="#E5E5E5"> the hash code function from</font>

262
00:09:05,690 --> 00:09:11,360
<font color="#E5E5E5">the map and calls invoke on it so if we</font>

263
00:09:09,050 --> 00:09:13,699
can supply an interesting<font color="#CCCCCC"> implementation</font>

264
00:09:11,360 --> 00:09:14,810
of this<font color="#CCCCCC"> eye function interface that when</font>

265
00:09:13,700 --> 00:09:16,610
you call invoke on it does something

266
00:09:14,810 --> 00:09:17,989
<font color="#E5E5E5">interesting</font><font color="#CCCCCC"> then when it gets</font><font color="#E5E5E5"> wrapped in</font>

267
00:09:16,610 --> 00:09:20,120
a hash map you'll end up invoking that

268
00:09:17,990 --> 00:09:21,950
<font color="#E5E5E5">so here's an example of a function that</font>

269
00:09:20,120 --> 00:09:24,230
does<font color="#E5E5E5"> something interesting</font><font color="#CCCCCC"> it just wraps</font>

270
00:09:21,950 --> 00:09:26,090
<font color="#CCCCCC">two other</font><font color="#E5E5E5"> functions and takes the</font><font color="#CCCCCC"> output</font>

271
00:09:24,230 --> 00:09:27,830
of one and passes it<font color="#CCCCCC"> to</font><font color="#E5E5E5"> another so we</font>

272
00:09:26,090 --> 00:09:29,810
<font color="#CCCCCC">can</font><font color="#E5E5E5"> supply as an attacker sort of</font>

273
00:09:27,830 --> 00:09:32,180
whatever implementations<font color="#E5E5E5"> of</font><font color="#CCCCCC"> f1 and f2 we</font>

274
00:09:29,810 --> 00:09:33,619
want<font color="#E5E5E5"> so for f1 we might supply</font><font color="#CCCCCC"> this</font>

275
00:09:32,180 --> 00:09:36,739
constant value<font color="#E5E5E5"> function</font><font color="#CCCCCC"> which just</font>

276
00:09:33,620 --> 00:09:39,350
<font color="#E5E5E5">returns whatever value is and as f2 we</font>

277
00:09:36,740 --> 00:09:41,330
can<font color="#E5E5E5"> supply this eval function which will</font>

278
00:09:39,350 --> 00:09:44,360
then execute whatever<font color="#E5E5E5"> it gets passed</font>

279
00:09:41,330 --> 00:09:46,480
into it<font color="#E5E5E5"> so this is actually a real</font>

280
00:09:44,360 --> 00:09:49,670
example<font color="#E5E5E5"> of a gadget chain that I'm gonna</font>

281
00:09:46,480 --> 00:09:52,040
talk about<font color="#E5E5E5"> more later that exists in the</font>

282
00:09:49,670 --> 00:09:53,870
closure<font color="#E5E5E5"> library</font><font color="#CCCCCC"> so if you put all this</font>

283
00:09:52,040 --> 00:09:55,400
<font color="#E5E5E5">into a payload and here's an</font><font color="#CCCCCC"> example</font><font color="#E5E5E5"> of</font>

284
00:09:53,870 --> 00:09:57,440
what a payload might look like in kind

285
00:09:55,400 --> 00:09:58,100
<font color="#E5E5E5">of a</font><font color="#CCCCCC"> Jackson representation</font><font color="#E5E5E5"> it would</font>

286
00:09:57,440 --> 00:09:59,540
look<font color="#E5E5E5"> like this</font>

287
00:09:58,100 --> 00:10:01,040
so you just<font color="#CCCCCC"> wrap all these things the</font>

288
00:09:59,540 --> 00:10:03,230
way I've described<font color="#E5E5E5"> and when you send</font>

289
00:10:01,040 --> 00:10:05,180
that<font color="#E5E5E5"> this value down here is going to</font>

290
00:10:03,230 --> 00:10:08,840
get executed<font color="#CCCCCC"> before the DC realization</font>

291
00:10:05,180 --> 00:10:10,189
even<font color="#E5E5E5"> finishes so the really important</font>

292
00:10:08,840 --> 00:10:12,110
takeaway when you start understanding

293
00:10:10,190 --> 00:10:14,240
gadget chains<font color="#E5E5E5"> is that they have nothing</font>

294
00:10:12,110 --> 00:10:16,880
<font color="#CCCCCC">to do with what codes you've actually</font>

295
00:10:14,240 --> 00:10:18,290
written in your application<font color="#CCCCCC"> the one I</font>

296
00:10:16,880 --> 00:10:20,360
just described was a gadget<font color="#CCCCCC"> chained</font>

297
00:10:18,290 --> 00:10:22,819
exclusively built out<font color="#CCCCCC"> of</font><font color="#E5E5E5"> classes in the</font>

298
00:10:20,360 --> 00:10:24,470
JDK and<font color="#CCCCCC"> the closure library</font><font color="#E5E5E5"> so if you</font>

299
00:10:22,820 --> 00:10:25,550
have some<font color="#CCCCCC"> transitive dependency that's</font>

300
00:10:24,470 --> 00:10:27,740
pulling<font color="#E5E5E5"> in closure but you don't</font>

301
00:10:25,550 --> 00:10:29,390
actually use<font color="#E5E5E5"> it itself then you can</font>

302
00:10:27,740 --> 00:10:30,560
still<font color="#E5E5E5"> build this gadget chain and send</font>

303
00:10:29,390 --> 00:10:32,810
it<font color="#CCCCCC"> to your application</font>

304
00:10:30,560 --> 00:10:34,280
so what gadget chains are possible is is

305
00:10:32,810 --> 00:10:36,199
completely<font color="#E5E5E5"> influenced by the cumulative</font>

306
00:10:34,280 --> 00:10:37,880
collection of all<font color="#E5E5E5"> of your dependencies</font>

307
00:10:36,200 --> 00:10:40,160
and all<font color="#E5E5E5"> of your classes and not</font>

308
00:10:37,880 --> 00:10:42,500
necessarily just<font color="#E5E5E5"> what code is around the</font>

309
00:10:40,160 --> 00:10:46,880
vulnerable sites<font color="#E5E5E5"> that you're potentially</font>

310
00:10:42,500 --> 00:10:49,130
exploiting so what DC relation libraries

311
00:10:46,880 --> 00:10:51,410
are potentially exploitable<font color="#CCCCCC"> so I</font>

312
00:10:49,130 --> 00:10:52,910
mentioned<font color="#CCCCCC"> that you</font><font color="#E5E5E5"> know</font><font color="#CCCCCC"> Amuro should</font>

313
00:10:51,410 --> 00:10:54,829
this great survey where they pointed<font color="#E5E5E5"> out</font>

314
00:10:52,910 --> 00:10:56,449
<font color="#E5E5E5">that all these</font><font color="#CCCCCC"> other</font><font color="#E5E5E5"> D serialization</font>

315
00:10:54,830 --> 00:10:58,790
libraries are potentially vulnerable to

316
00:10:56,450 --> 00:11:00,680
these kinds of<font color="#E5E5E5"> attacks</font><font color="#CCCCCC"> so there's</font>

317
00:10:58,790 --> 00:11:02,150
obviously<font color="#E5E5E5"> the JDK object input stream</font>

318
00:11:00,680 --> 00:11:03,560
which<font color="#CCCCCC"> is the one</font><font color="#E5E5E5"> that's received the</font>

319
00:11:02,150 --> 00:11:05,870
most<font color="#CCCCCC"> attention and I'm gonna use for</font>

320
00:11:03,560 --> 00:11:07,670
<font color="#CCCCCC">most of these</font><font color="#E5E5E5"> examples but extreme is</font>

321
00:11:05,870 --> 00:11:08,560
another example<font color="#CCCCCC"> that allows you</font><font color="#E5E5E5"> to build</font>

322
00:11:07,670 --> 00:11:10,300
<font color="#CCCCCC">some XML</font>

323
00:11:08,560 --> 00:11:11,979
specifies object types and has some of

324
00:11:10,300 --> 00:11:13,689
these<font color="#CCCCCC"> mashing methods</font><font color="#E5E5E5"> so all of these</font>

325
00:11:11,980 --> 00:11:16,000
<font color="#CCCCCC">json libraries are also potentially</font>

326
00:11:13,690 --> 00:11:17,770
exploitable<font color="#CCCCCC"> and some of them depend on</font>

327
00:11:16,000 --> 00:11:19,330
<font color="#CCCCCC">exactly what configuration they're using</font>

328
00:11:17,770 --> 00:11:22,000
<font color="#E5E5E5">but</font><font color="#CCCCCC"> you should totally</font><font color="#E5E5E5"> read the you</font>

329
00:11:19,330 --> 00:11:24,430
knows<font color="#CCCCCC"> Mirage paper or watch their</font>

330
00:11:22,000 --> 00:11:26,050
presentation<font color="#CCCCCC"> to understand</font><font color="#E5E5E5"> when you can</font>

331
00:11:24,430 --> 00:11:27,459
build exploits against these libraries

332
00:11:26,050 --> 00:11:28,810
<font color="#E5E5E5">but kind of the important thing to</font>

333
00:11:27,460 --> 00:11:30,339
<font color="#E5E5E5">understand is the fact that there are</font>

334
00:11:28,810 --> 00:11:32,529
all these<font color="#CCCCCC"> different libraries that come</font>

335
00:11:30,339 --> 00:11:34,540
deserialize payloads in different ways

336
00:11:32,529 --> 00:11:36,430
and<font color="#E5E5E5"> have different</font><font color="#CCCCCC"> magic methods and are</font>

337
00:11:34,540 --> 00:11:39,189
capable of deserializing<font color="#E5E5E5"> different</font>

338
00:11:36,430 --> 00:11:40,660
classes<font color="#E5E5E5"> exactly what gadget chains can</font>

339
00:11:39,190 --> 00:11:42,310
be built<font color="#E5E5E5"> kind of depends on which</font>

340
00:11:40,660 --> 00:11:43,449
library you're actually targeting<font color="#CCCCCC"> and</font>

341
00:11:42,310 --> 00:11:47,260
that's<font color="#E5E5E5"> something important to</font><font color="#CCCCCC"> keep in</font>

342
00:11:43,450 --> 00:11:49,839
mind<font color="#CCCCCC"> as</font><font color="#E5E5E5"> I keep talking so all</font><font color="#CCCCCC"> right how</font>

343
00:11:47,260 --> 00:11:51,550
do you find vulnerabilities<font color="#CCCCCC"> well</font><font color="#E5E5E5"> finding</font>

344
00:11:49,839 --> 00:11:52,930
<font color="#E5E5E5">a DC realization vulnerability isn't</font>

345
00:11:51,550 --> 00:11:56,290
<font color="#E5E5E5">that different from finding a lot of</font>

346
00:11:52,930 --> 00:11:57,550
<font color="#CCCCCC">other sort</font><font color="#E5E5E5"> of web application issues and</font>

347
00:11:56,290 --> 00:11:59,439
<font color="#E5E5E5">fundamentally it's a question</font><font color="#CCCCCC"> of does</font>

348
00:11:57,550 --> 00:12:01,089
untrusted input flow into<font color="#CCCCCC"> one of the</font>

349
00:11:59,440 --> 00:12:03,310
sinks so one<font color="#CCCCCC"> of</font><font color="#E5E5E5"> these</font><font color="#CCCCCC"> D</font><font color="#E5E5E5"> serialization</font>

350
00:12:01,089 --> 00:12:04,630
libraries so you<font color="#CCCCCC"> know whether you're</font>

351
00:12:03,310 --> 00:12:07,119
talking<font color="#E5E5E5"> about the object input stream</font>

352
00:12:04,630 --> 00:12:08,439
the JDK D serializer or extreme or

353
00:12:07,120 --> 00:12:10,750
<font color="#CCCCCC">Jackson</font>

354
00:12:08,440 --> 00:12:12,460
if untrusted input gets into one of

355
00:12:10,750 --> 00:12:14,740
those then<font color="#E5E5E5"> you're potentially</font><font color="#CCCCCC"> vulnerable</font>

356
00:12:12,460 --> 00:12:16,690
and<font color="#E5E5E5"> honestly I think that talk that's</font>

357
00:12:14,740 --> 00:12:18,220
coming up in<font color="#E5E5E5"> like an hour and a half</font>

358
00:12:16,690 --> 00:12:19,690
<font color="#CCCCCC">it's</font><font color="#E5E5E5"> probably gonna go into this a lot</font>

359
00:12:18,220 --> 00:12:21,339
deeper so I'm not<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> talk</font><font color="#CCCCCC"> about this</font>

360
00:12:19,690 --> 00:12:23,650
too<font color="#CCCCCC"> much but what</font><font color="#E5E5E5"> I'm</font><font color="#CCCCCC"> really</font><font color="#E5E5E5"> interested</font>

361
00:12:21,339 --> 00:12:25,270
in is<font color="#CCCCCC"> what do you do with</font><font color="#E5E5E5"> your</font>

362
00:12:23,650 --> 00:12:28,810
application if you<font color="#E5E5E5"> discover that</font><font color="#CCCCCC"> it is</font>

363
00:12:25,270 --> 00:12:30,100
<font color="#CCCCCC">vulnerable to one of these</font><font color="#E5E5E5"> issues</font><font color="#CCCCCC"> so how</font>

364
00:12:28,810 --> 00:12:33,430
do you remediated<font color="#E5E5E5"> deserialization</font>

365
00:12:30,100 --> 00:12:35,140
vulnerability well if you look<font color="#E5E5E5"> at that</font>

366
00:12:33,430 --> 00:12:37,959
talk I mentioned earlier that<font color="#E5E5E5"> Luca gave</font>

367
00:12:35,140 --> 00:12:40,330
his response was<font color="#CCCCCC"> it's 2016</font><font color="#E5E5E5"> like there</font>

368
00:12:37,960 --> 00:12:43,450
are better serialization options than

369
00:12:40,330 --> 00:12:44,980
this object<font color="#E5E5E5"> input stream</font><font color="#CCCCCC"> and really any</font>

370
00:12:43,450 --> 00:12:46,960
of<font color="#E5E5E5"> these other sort of</font><font color="#CCCCCC"> libraries sets</font>

371
00:12:44,980 --> 00:12:48,430
that<font color="#E5E5E5"> have these issues</font><font color="#CCCCCC"> you know I don't</font>

372
00:12:46,960 --> 00:12:50,440
know what the last<font color="#E5E5E5"> time is I programmed</font>

373
00:12:48,430 --> 00:12:51,880
against an XML soap interface but

374
00:12:50,440 --> 00:12:53,880
hopefully that's<font color="#E5E5E5"> not something that</font>

375
00:12:51,880 --> 00:12:56,800
<font color="#CCCCCC">people</font><font color="#E5E5E5"> are doing for</font><font color="#CCCCCC"> new applications</font>

376
00:12:53,880 --> 00:12:58,990
<font color="#CCCCCC">and I think if you have the</font><font color="#E5E5E5"> option of</font>

377
00:12:56,800 --> 00:13:00,579
<font color="#E5E5E5">using</font><font color="#CCCCCC"> a better</font><font color="#E5E5E5"> serialization strategy</font>

378
00:12:58,990 --> 00:13:02,680
then that is absolutely<font color="#E5E5E5"> the right way to</font>

379
00:13:00,580 --> 00:13:05,380
remediate this problem<font color="#E5E5E5"> but what happens</font>

380
00:13:02,680 --> 00:13:07,510
if that's not a good option<font color="#E5E5E5"> for you so</font>

381
00:13:05,380 --> 00:13:10,270
who<font color="#E5E5E5"> recognizes the things that I just</font>

382
00:13:07,510 --> 00:13:11,950
put<font color="#E5E5E5"> up here anyone yeah all right a few</font>

383
00:13:10,270 --> 00:13:13,839
<font color="#E5E5E5">people so that guy on the</font><font color="#CCCCCC"> left is the</font>

384
00:13:11,950 --> 00:13:15,670
Netflix<font color="#CCCCCC"> wee disc that</font><font color="#E5E5E5"> got sent out in</font>

385
00:13:13,839 --> 00:13:17,650
2010 that lets you play<font color="#E5E5E5"> Netflix from</font>

386
00:13:15,670 --> 00:13:20,260
your<font color="#E5E5E5"> Wii there is some client code</font>

387
00:13:17,650 --> 00:13:22,480
that's stamped<font color="#E5E5E5"> on that disc which if you</font>

388
00:13:20,260 --> 00:13:25,959
plug it in today<font color="#E5E5E5"> and try to play Netflix</font>

389
00:13:22,480 --> 00:13:27,670
it should still<font color="#CCCCCC"> work</font><font color="#E5E5E5"> if you then have to</font>

390
00:13:25,959 --> 00:13:29,680
change the serialization tragedy of the

391
00:13:27,670 --> 00:13:31,630
IPC mechanism that that client<font color="#E5E5E5"> uses to</font>

392
00:13:29,680 --> 00:13:33,910
talk to the Netflix servers<font color="#E5E5E5"> you're gonna</font>

393
00:13:31,630 --> 00:13:35,079
have a really<font color="#CCCCCC"> bad</font><font color="#E5E5E5"> time because you have</font>

394
00:13:33,910 --> 00:13:37,000
to make<font color="#CCCCCC"> sure</font><font color="#E5E5E5"> that it's properly</font>

395
00:13:35,079 --> 00:13:39,638
<font color="#E5E5E5">compatible with whatever</font><font color="#CCCCCC"> civilization</font>

396
00:13:37,000 --> 00:13:41,019
<font color="#E5E5E5">strategy that client code is using same</font>

397
00:13:39,639 --> 00:13:42,639
story<font color="#E5E5E5"> for the guy on the</font><font color="#CCCCCC"> right so that's</font>

398
00:13:41,019 --> 00:13:44,769
the<font color="#E5E5E5"> first generation</font><font color="#CCCCCC"> Roku which also</font>

399
00:13:42,639 --> 00:13:48,160
<font color="#CCCCCC">came</font><font color="#E5E5E5"> out around 2010 and there are still</font>

400
00:13:44,769 --> 00:13:49,480
these clients<font color="#E5E5E5"> out there so what happens</font>

401
00:13:48,160 --> 00:13:51,339
if there<font color="#E5E5E5"> are clients that you literally</font>

402
00:13:49,480 --> 00:13:54,130
cannot update<font color="#E5E5E5"> how do you change your</font>

403
00:13:51,339 --> 00:13:55,480
<font color="#E5E5E5">serialization strategy it's a really</font>

404
00:13:54,130 --> 00:13:57,519
hard<font color="#CCCCCC"> problem and</font><font color="#E5E5E5"> it might not</font><font color="#CCCCCC"> always be</font>

405
00:13:55,480 --> 00:13:58,899
<font color="#CCCCCC">an option to</font><font color="#E5E5E5"> just say</font><font color="#CCCCCC"> alright we're</font>

406
00:13:57,519 --> 00:14:01,870
gonna use something<font color="#E5E5E5"> other than the</font>

407
00:13:58,899 --> 00:14:03,670
object input stream<font color="#CCCCCC"> and even if like</font>

408
00:14:01,870 --> 00:14:05,470
you're not in<font color="#E5E5E5"> this situation where you</font>

409
00:14:03,670 --> 00:14:08,019
literally have like<font color="#CCCCCC"> seee devices that</font>

410
00:14:05,470 --> 00:14:09,850
you can't<font color="#CCCCCC"> change</font><font color="#E5E5E5"> changing the IPC</font>

411
00:14:08,019 --> 00:14:12,130
mechanism between<font color="#E5E5E5"> clients</font><font color="#CCCCCC"> and servers is</font>

412
00:14:09,850 --> 00:14:14,170
a really hard<font color="#E5E5E5"> thing</font><font color="#CCCCCC"> to do it</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> really</font>

413
00:14:12,130 --> 00:14:16,600
time consuming<font color="#CCCCCC"> and it's very brittle and</font>

414
00:14:14,170 --> 00:14:18,130
you have to go on a campaign to make

415
00:14:16,600 --> 00:14:20,860
<font color="#E5E5E5">sure all your clients get off the old</font>

416
00:14:18,130 --> 00:14:22,810
version<font color="#E5E5E5"> and get on to a new version and</font>

417
00:14:20,860 --> 00:14:25,449
so it's<font color="#E5E5E5"> just a very</font><font color="#CCCCCC"> costly thing</font><font color="#E5E5E5"> to do</font>

418
00:14:22,810 --> 00:14:27,160
so<font color="#E5E5E5"> you</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> to ask the question is it</font>

419
00:14:25,449 --> 00:14:28,779
<font color="#CCCCCC">worth the effort to remediate this</font>

420
00:14:27,160 --> 00:14:30,579
vulnerability<font color="#E5E5E5"> because maybe that</font>

421
00:14:28,779 --> 00:14:33,339
<font color="#E5E5E5">vulnerability you discover does actually</font>

422
00:14:30,579 --> 00:14:34,540
exist maybe a attacker can control what

423
00:14:33,339 --> 00:14:35,500
classes are<font color="#CCCCCC"> actually getting</font>

424
00:14:34,540 --> 00:14:37,630
deserialized

425
00:14:35,500 --> 00:14:39,670
but is there actually a gadget<font color="#CCCCCC"> chained</font>

426
00:14:37,630 --> 00:14:41,260
in there like maybe<font color="#E5E5E5"> you've looked at the</font>

427
00:14:39,670 --> 00:14:42,699
<font color="#E5E5E5">Y so serial project maybe you know that</font>

428
00:14:41,260 --> 00:14:44,260
<font color="#CCCCCC">like these versions</font><font color="#E5E5E5"> of common</font>

429
00:14:42,699 --> 00:14:45,939
collections had these gadget chains and

430
00:14:44,260 --> 00:14:47,560
<font color="#E5E5E5">you know any of them in so you're just</font>

431
00:14:45,940 --> 00:14:48,819
<font color="#E5E5E5">like I'm pretty</font><font color="#CCCCCC"> sure you can't actually</font>

432
00:14:47,560 --> 00:14:50,589
construct the gadget chain against my

433
00:14:48,819 --> 00:14:53,410
application<font color="#CCCCCC"> should</font><font color="#E5E5E5"> I spend like a</font>

434
00:14:50,589 --> 00:14:56,019
quarter<font color="#E5E5E5"> of efforts actually changing out</font>

435
00:14:53,410 --> 00:14:57,189
what serialization strategy we use so

436
00:14:56,019 --> 00:14:58,360
you want to be able<font color="#E5E5E5"> to answer the</font>

437
00:14:57,190 --> 00:15:00,810
question when you discover one<font color="#CCCCCC"> of these</font>

438
00:14:58,360 --> 00:15:03,100
is my vulnerability actually exploitable

439
00:15:00,810 --> 00:15:05,050
<font color="#E5E5E5">so how do you know if it's exploitable</font>

440
00:15:03,100 --> 00:15:06,519
how do you find exploits<font color="#E5E5E5"> so I just</font>

441
00:15:05,050 --> 00:15:08,859
<font color="#E5E5E5">mentioned</font><font color="#CCCCCC"> why so serial this is one of</font>

442
00:15:06,519 --> 00:15:11,350
<font color="#CCCCCC">the I</font><font color="#E5E5E5"> think most well-known projects in</font>

443
00:15:08,860 --> 00:15:12,579
this space<font color="#CCCCCC"> it's maintained by fro HOF</font>

444
00:15:11,350 --> 00:15:14,230
and it's basically a collection of

445
00:15:12,579 --> 00:15:15,910
gadget chains<font color="#E5E5E5"> that researchers</font><font color="#CCCCCC"> have</font>

446
00:15:14,230 --> 00:15:18,459
<font color="#CCCCCC">discovered in a bunch of different open</font>

447
00:15:15,910 --> 00:15:21,850
<font color="#E5E5E5">source libraries so it's mostly focused</font>

448
00:15:18,459 --> 00:15:23,920
<font color="#CCCCCC">on</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> JDK object input stream but it</font>

449
00:15:21,850 --> 00:15:26,199
gives you a really<font color="#E5E5E5"> good way of just like</font>

450
00:15:23,920 --> 00:15:28,329
surveying what things have known issues

451
00:15:26,199 --> 00:15:31,029
and making<font color="#E5E5E5"> sure you're not</font><font color="#CCCCCC"> using them</font><font color="#E5E5E5"> so</font>

452
00:15:28,329 --> 00:15:33,130
<font color="#E5E5E5">Marshall</font><font color="#CCCCCC"> SEK is another research project</font>

453
00:15:31,029 --> 00:15:34,720
that has wider breadth on different<font color="#E5E5E5"> DC</font>

454
00:15:33,130 --> 00:15:35,459
realization schemes and<font color="#E5E5E5"> for different</font>

455
00:15:34,720 --> 00:15:38,399
<font color="#CCCCCC">live</font>

456
00:15:35,459 --> 00:15:41,339
languages<font color="#CCCCCC"> but you know again it's mostly</font>

457
00:15:38,399 --> 00:15:42,660
a list of known gadget chains<font color="#E5E5E5"> so neither</font>

458
00:15:41,339 --> 00:15:44,189
of<font color="#E5E5E5"> those projects is really</font><font color="#CCCCCC"> going</font><font color="#E5E5E5"> to</font>

459
00:15:42,660 --> 00:15:45,689
give you a good<font color="#CCCCCC"> answer about what about</font>

460
00:15:44,189 --> 00:15:47,368
you know is there a gadget chain<font color="#E5E5E5"> that</font>

461
00:15:45,689 --> 00:15:49,889
uses<font color="#E5E5E5"> the specific combination of</font>

462
00:15:47,369 --> 00:15:52,319
libraries I have that<font color="#CCCCCC"> utilize classes</font>

463
00:15:49,889 --> 00:15:53,459
<font color="#E5E5E5">that are in multiple</font><font color="#CCCCCC"> libraries or for</font>

464
00:15:52,319 --> 00:15:56,219
that matter what about these<font color="#E5E5E5"> a</font>

465
00:15:53,459 --> 00:15:57,779
non-standard<font color="#E5E5E5"> DC relation library that my</font>

466
00:15:56,220 --> 00:15:59,699
application happens to be<font color="#E5E5E5"> using that</font>

467
00:15:57,779 --> 00:16:03,689
<font color="#E5E5E5">security researchers haven't spent a</font>

468
00:15:59,699 --> 00:16:05,309
bunch of<font color="#CCCCCC"> time staring</font><font color="#E5E5E5"> at so there are</font>

469
00:16:03,689 --> 00:16:06,839
some<font color="#CCCCCC"> existing tools beyond I just</font>

470
00:16:05,309 --> 00:16:09,389
mentioned that<font color="#CCCCCC"> might help you do that so</font>

471
00:16:06,839 --> 00:16:12,059
<font color="#CCCCCC">I</font><font color="#E5E5E5"> already talked about why so</font><font color="#CCCCCC"> cereal and</font>

472
00:16:09,389 --> 00:16:14,089
<font color="#CCCCCC">frohawk even has</font><font color="#E5E5E5"> this graph discovery</font>

473
00:16:12,059 --> 00:16:16,709
tool for trying to<font color="#E5E5E5"> find different</font>

474
00:16:14,089 --> 00:16:18,420
<font color="#E5E5E5">things that can potentially blow up</font>

475
00:16:16,709 --> 00:16:20,248
gadget chains but there's some other

476
00:16:18,420 --> 00:16:22,439
<font color="#E5E5E5">tools like</font><font color="#CCCCCC"> Jugal</font><font color="#E5E5E5"> which is a way to</font>

477
00:16:20,249 --> 00:16:24,629
programmatically query<font color="#E5E5E5"> about data types</font>

478
00:16:22,439 --> 00:16:26,399
on your class path<font color="#E5E5E5"> which can kind of</font>

479
00:16:24,629 --> 00:16:27,929
help you<font color="#E5E5E5"> build up gadget ain't one step</font>

480
00:16:26,399 --> 00:16:30,389
at a time if you're<font color="#E5E5E5"> sort of doing it</font>

481
00:16:27,929 --> 00:16:31,889
manually<font color="#E5E5E5"> helps you with each step and</font>

482
00:16:30,389 --> 00:16:33,569
<font color="#E5E5E5">then there's some other like burp</font>

483
00:16:31,889 --> 00:16:35,249
plugins like the<font color="#CCCCCC"> java d serialization</font>

484
00:16:33,569 --> 00:16:37,979
scanner which<font color="#E5E5E5"> mostly use payloads from</font><font color="#CCCCCC"> y</font>

485
00:16:35,249 --> 00:16:40,679
so<font color="#CCCCCC"> serial and the NCC</font><font color="#E5E5E5"> group</font><font color="#CCCCCC"> plug-in</font>

486
00:16:37,980 --> 00:16:42,720
<font color="#E5E5E5">which came out earlier this</font><font color="#CCCCCC"> year</font><font color="#E5E5E5"> if that</font>

487
00:16:40,679 --> 00:16:45,600
<font color="#E5E5E5">mostly uses payloads from you know</font>

488
00:16:42,720 --> 00:16:47,129
<font color="#E5E5E5">summer</font><font color="#CCCCCC"> OSHA's work</font><font color="#E5E5E5"> but kind of all of</font>

489
00:16:45,600 --> 00:16:49,199
<font color="#E5E5E5">these things are basically still relying</font>

490
00:16:47,129 --> 00:16:50,670
on like a bunch of known gadget chains

491
00:16:49,199 --> 00:16:53,429
and figuring out<font color="#E5E5E5"> whether or not they can</font>

492
00:16:50,670 --> 00:16:54,719
<font color="#CCCCCC">be used against your application so</font>

493
00:16:53,429 --> 00:16:57,299
since none<font color="#E5E5E5"> of those things were really</font>

494
00:16:54,720 --> 00:16:59,189
<font color="#E5E5E5">telling me about gadget chains specific</font>

495
00:16:57,299 --> 00:17:02,639
to my application is specific to<font color="#E5E5E5"> my D</font>

496
00:16:59,189 --> 00:17:04,980
serialization library<font color="#E5E5E5"> as I was trying</font><font color="#CCCCCC"> to</font>

497
00:17:02,639 --> 00:17:06,449
<font color="#CCCCCC">answer this question of you know</font><font color="#E5E5E5"> can I</font>

498
00:17:04,980 --> 00:17:08,069
attack this application we've just<font color="#CCCCCC"> kind</font>

499
00:17:06,449 --> 00:17:09,659
of vulnerability<font color="#CCCCCC"> I wanted</font><font color="#E5E5E5"> to build a</font>

500
00:17:08,069 --> 00:17:12,148
tool that would solve this problem for

501
00:17:09,659 --> 00:17:14,039
me<font color="#E5E5E5"> so what</font><font color="#CCCCCC"> I really want</font><font color="#E5E5E5"> to evaluate if</font>

502
00:17:12,148 --> 00:17:15,539
I'm<font color="#E5E5E5"> building a new tool is the risk of a</font>

503
00:17:14,039 --> 00:17:18,089
vulnerability<font color="#CCCCCC"> how important is it to</font>

504
00:17:15,539 --> 00:17:20,129
remediate and if<font color="#E5E5E5"> that's your mindset if</font>

505
00:17:18,089 --> 00:17:23,010
you're not<font color="#E5E5E5"> necessarily trying to build</font>

506
00:17:20,130 --> 00:17:26,339
actual<font color="#E5E5E5"> exploits</font><font color="#CCCCCC"> it kind of makes this</font>

507
00:17:23,010 --> 00:17:27,990
problem<font color="#E5E5E5"> a</font><font color="#CCCCCC"> little bit easier so if you</font>

508
00:17:26,339 --> 00:17:29,039
want to evaluate risk<font color="#E5E5E5"> obviously</font><font color="#CCCCCC"> the main</font>

509
00:17:27,990 --> 00:17:30,870
question is you want<font color="#E5E5E5"> to know if it's</font>

510
00:17:29,039 --> 00:17:32,760
exploitable<font color="#E5E5E5"> but you kind of want to know</font>

511
00:17:30,870 --> 00:17:34,770
<font color="#E5E5E5">it's basically what exploits possible</font>

512
00:17:32,760 --> 00:17:36,690
you know if a denial service<font color="#E5E5E5"> is</font>

513
00:17:34,770 --> 00:17:38,639
<font color="#E5E5E5">obviously different</font><font color="#CCCCCC"> from</font><font color="#E5E5E5"> an</font><font color="#CCCCCC"> RC e so you</font>

514
00:17:36,690 --> 00:17:41,880
<font color="#E5E5E5">want to know what gadget chain we built</font>

515
00:17:38,640 --> 00:17:43,470
not necessarily just do any<font color="#E5E5E5"> exist</font><font color="#CCCCCC"> and</font>

516
00:17:41,880 --> 00:17:45,630
you need to<font color="#E5E5E5"> consider the entire class</font>

517
00:17:43,470 --> 00:17:47,520
<font color="#CCCCCC">path</font><font color="#E5E5E5"> so not each library you're pulling</font>

518
00:17:45,630 --> 00:17:48,750
in individually but to your application

519
00:17:47,520 --> 00:17:51,090
as a whole

520
00:17:48,750 --> 00:17:52,890
and as you're<font color="#E5E5E5"> doing this you can also</font>

521
00:17:51,090 --> 00:17:54,030
<font color="#E5E5E5">make a bunch of simplifications given</font>

522
00:17:52,890 --> 00:17:56,310
that we're really<font color="#CCCCCC"> just</font><font color="#E5E5E5"> trying to</font>

523
00:17:54,030 --> 00:17:57,450
evaluate<font color="#E5E5E5"> the risk of a vulnerability</font><font color="#CCCCCC"> so</font>

524
00:17:56,310 --> 00:17:59,340
for<font color="#E5E5E5"> example it doesn't need to be</font>

525
00:17:57,450 --> 00:18:00,810
<font color="#E5E5E5">perfect</font><font color="#CCCCCC"> some false positives are okay</font>

526
00:17:59,340 --> 00:18:01,949
the idea<font color="#CCCCCC"> is that</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> human's gonna look at</font>

527
00:18:00,810 --> 00:18:03,960
this<font color="#CCCCCC"> in the</font><font color="#E5E5E5"> end of the day and decide</font>

528
00:18:01,950 --> 00:18:07,530
how important is<font color="#E5E5E5"> it to remediate</font><font color="#CCCCCC"> this</font>

529
00:18:03,960 --> 00:18:09,450
vulnerability<font color="#CCCCCC"> and</font><font color="#E5E5E5"> also and I think</font><font color="#CCCCCC"> kind</font>

530
00:18:07,530 --> 00:18:11,520
of most importantly is that<font color="#E5E5E5"> you're not</font>

531
00:18:09,450 --> 00:18:13,320
looking<font color="#CCCCCC"> for vulnerabilities with this</font>

532
00:18:11,520 --> 00:18:15,570
tool<font color="#E5E5E5"> you're going</font><font color="#CCCCCC"> to assume that through</font>

533
00:18:13,320 --> 00:18:17,700
some means<font color="#E5E5E5"> through either some penetrate</font>

534
00:18:15,570 --> 00:18:19,950
other scanner you found that there's a

535
00:18:17,700 --> 00:18:21,390
<font color="#E5E5E5">DC realization of vulnerability and now</font>

536
00:18:19,950 --> 00:18:24,720
you're just trying<font color="#CCCCCC"> to answer</font><font color="#E5E5E5"> can you</font>

537
00:18:21,390 --> 00:18:26,460
exploit it<font color="#CCCCCC"> and also you don't actually</font>

538
00:18:24,720 --> 00:18:28,440
need to generate payloads if the goal of

539
00:18:26,460 --> 00:18:30,890
<font color="#CCCCCC">this tool is just to tell you like</font><font color="#E5E5E5"> what</font>

540
00:18:28,440 --> 00:18:33,120
<font color="#E5E5E5">is the riskiness of this vulnerability</font>

541
00:18:30,890 --> 00:18:35,160
<font color="#CCCCCC">and you</font><font color="#E5E5E5"> probably actually could generate</font>

542
00:18:33,120 --> 00:18:36,719
<font color="#E5E5E5">its with the tool I'm gonna describe but</font>

543
00:18:35,160 --> 00:18:40,530
that wasn't a goal<font color="#CCCCCC"> that</font><font color="#E5E5E5"> I was setting</font>

544
00:18:36,720 --> 00:18:42,090
<font color="#E5E5E5">out to achieve on day one so I tried</font><font color="#CCCCCC"> to</font>

545
00:18:40,530 --> 00:18:43,889
build<font color="#E5E5E5"> a tool to do this and I call the</font>

546
00:18:42,090 --> 00:18:46,500
gadget inspector<font color="#CCCCCC"> and so what this tool</font>

547
00:18:43,890 --> 00:18:48,180
is is a Java bytecode analysis tool<font color="#CCCCCC"> that</font>

548
00:18:46,500 --> 00:18:50,760
will<font color="#E5E5E5"> look at an entire</font><font color="#CCCCCC"> class path and</font>

549
00:18:48,180 --> 00:18:52,470
try to build gadget chains<font color="#E5E5E5"> and so in</font>

550
00:18:50,760 --> 00:18:53,640
doing<font color="#CCCCCC"> so it's gonna output what if</font>

551
00:18:52,470 --> 00:18:55,680
<font color="#E5E5E5">things started the possible gadget</font>

552
00:18:53,640 --> 00:18:57,660
<font color="#E5E5E5">chains that it's discovered and then you</font>

553
00:18:55,680 --> 00:19:00,000
as an application security<font color="#E5E5E5"> engineer or</font>

554
00:18:57,660 --> 00:19:01,920
as a penetration tester can use that<font color="#E5E5E5"> as</font>

555
00:19:00,000 --> 00:19:03,720
either a starting point<font color="#E5E5E5"> to try and</font>

556
00:19:01,920 --> 00:19:06,270
decide whether or<font color="#E5E5E5"> not these exploits are</font>

557
00:19:03,720 --> 00:19:08,280
actually possible<font color="#CCCCCC"> and</font><font color="#E5E5E5"> whether keishon</font>

558
00:19:06,270 --> 00:19:09,960
can actually be exploited or just as a

559
00:19:08,280 --> 00:19:12,990
<font color="#E5E5E5">way of saying like</font><font color="#CCCCCC"> I there's too many</font>

560
00:19:09,960 --> 00:19:14,730
possibility<font color="#E5E5E5"> I think we should fix this</font>

561
00:19:12,990 --> 00:19:15,720
<font color="#E5E5E5">anyway or maybe it outputs nothing and</font>

562
00:19:14,730 --> 00:19:17,550
you're like all right<font color="#E5E5E5"> there's probably</font>

563
00:19:15,720 --> 00:19:20,820
nothing here and<font color="#E5E5E5"> we can take our time</font>

564
00:19:17,550 --> 00:19:23,129
<font color="#CCCCCC">with it so what</font><font color="#E5E5E5"> does gadget</font><font color="#CCCCCC"> inspector do</font>

565
00:19:20,820 --> 00:19:24,840
so it operates<font color="#CCCCCC"> on any given class path</font>

566
00:19:23,130 --> 00:19:27,960
so it can<font color="#E5E5E5"> point to either a specific</font>

567
00:19:24,840 --> 00:19:29,909
<font color="#CCCCCC">library or an entire war and it</font><font color="#E5E5E5"> reports</font>

568
00:19:27,960 --> 00:19:31,230
the discovered gadget<font color="#CCCCCC"> chains the gadget</font>

569
00:19:29,910 --> 00:19:32,730
chains are<font color="#E5E5E5"> basically</font><font color="#CCCCCC"> just a sequence of</font>

570
00:19:31,230 --> 00:19:35,490
method invocations that it believes<font color="#E5E5E5"> that</font>

571
00:19:32,730 --> 00:19:38,310
it<font color="#CCCCCC"> can jump to and it and the way</font><font color="#E5E5E5"> it</font>

572
00:19:35,490 --> 00:19:39,780
does<font color="#CCCCCC"> figures</font><font color="#E5E5E5"> out those sequences is it</font>

573
00:19:38,310 --> 00:19:42,090
does some simplistic symbolic execution

574
00:19:39,780 --> 00:19:44,129
<font color="#CCCCCC">to figure out whether there's</font><font color="#E5E5E5"> data flow</font>

575
00:19:42,090 --> 00:19:46,560
from<font color="#E5E5E5"> arguments down into subsequent</font>

576
00:19:44,130 --> 00:19:48,150
method invocations<font color="#CCCCCC"> and</font><font color="#E5E5E5"> that sort of</font>

577
00:19:46,560 --> 00:19:49,889
process<font color="#E5E5E5"> is really just rule out a bunch</font>

578
00:19:48,150 --> 00:19:51,990
of false positives<font color="#E5E5E5"> that crop up</font><font color="#CCCCCC"> if</font>

579
00:19:49,890 --> 00:19:54,090
you're doing<font color="#E5E5E5"> this analysis naively where</font>

580
00:19:51,990 --> 00:19:55,530
if you<font color="#E5E5E5"> just look at what methods get</font>

581
00:19:54,090 --> 00:19:58,678
<font color="#CCCCCC">called then you're not actually</font><font color="#E5E5E5"> checking</font>

582
00:19:55,530 --> 00:20:00,990
<font color="#E5E5E5">whether there's data flow from all to</font>

583
00:19:58,679 --> 00:20:02,100
the<font color="#E5E5E5"> next one but most importantly is</font>

584
00:20:00,990 --> 00:20:02,730
<font color="#CCCCCC">that there's a bunch</font><font color="#E5E5E5"> of simplifying</font>

585
00:20:02,100 --> 00:20:04,379
assumptions

586
00:20:02,730 --> 00:20:05,669
<font color="#E5E5E5">we can make in this process that</font>

587
00:20:04,380 --> 00:20:07,950
<font color="#E5E5E5">actually make</font><font color="#CCCCCC"> the code analysis</font><font color="#E5E5E5"> very</font>

588
00:20:05,669 --> 00:20:09,780
easy and a lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> that's</font><font color="#CCCCCC"> just due to</font><font color="#E5E5E5"> the</font>

589
00:20:07,950 --> 00:20:12,000
context<font color="#E5E5E5"> we're working in if you're</font>

590
00:20:09,780 --> 00:20:13,770
thinking<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the attacker as controlling</font>

591
00:20:12,000 --> 00:20:15,870
this payload that<font color="#E5E5E5"> you're reading</font><font color="#CCCCCC"> in so</font>

592
00:20:13,770 --> 00:20:17,490
they're able to control<font color="#E5E5E5"> every like field</font>

593
00:20:15,870 --> 00:20:19,439
value on the object<font color="#E5E5E5"> that you're</font>

594
00:20:17,490 --> 00:20:21,120
operating<font color="#E5E5E5"> on then you can</font><font color="#CCCCCC"> make</font>

595
00:20:19,440 --> 00:20:22,890
assumptions<font color="#CCCCCC"> about like which branches</font>

596
00:20:21,120 --> 00:20:24,600
you take and it fails condition because

597
00:20:22,890 --> 00:20:26,309
pretty much all the variables going<font color="#E5E5E5"> into</font>

598
00:20:24,600 --> 00:20:28,379
that<font color="#E5E5E5"> if-else are gonna be controlled by</font>

599
00:20:26,309 --> 00:20:29,460
the attacker<font color="#CCCCCC"> so that's the kind of thing</font>

600
00:20:28,380 --> 00:20:30,870
that I'm<font color="#E5E5E5"> talking about where you get to</font>

601
00:20:29,460 --> 00:20:32,970
make<font color="#E5E5E5"> a bunch of simplifying assumptions</font>

602
00:20:30,870 --> 00:20:33,540
that normally make code analysis really

603
00:20:32,970 --> 00:20:36,570
<font color="#E5E5E5">hard</font>

604
00:20:33,540 --> 00:20:38,010
<font color="#E5E5E5">normally deciding if a branch condition</font>

605
00:20:36,570 --> 00:20:40,409
<font color="#E5E5E5">is satisfiable is like one of the</font>

606
00:20:38,010 --> 00:20:43,020
<font color="#E5E5E5">hardest</font><font color="#CCCCCC"> problems in code analysis</font><font color="#E5E5E5"> so you</font>

607
00:20:40,410 --> 00:20:45,360
don't need a degree<font color="#CCCCCC"> in code analysis to</font>

608
00:20:43,020 --> 00:20:47,580
figure<font color="#CCCCCC"> out what this tool</font><font color="#E5E5E5"> is doing so</font>

609
00:20:45,360 --> 00:20:49,709
how does it<font color="#CCCCCC"> kind of specifically so</font>

610
00:20:47,580 --> 00:20:51,659
here's an example<font color="#E5E5E5"> so here's some known</font>

611
00:20:49,710 --> 00:20:54,090
entry points that we will discover

612
00:20:51,660 --> 00:20:56,130
through just kind<font color="#CCCCCC"> of enumerate the</font>

613
00:20:54,090 --> 00:20:57,720
methods that<font color="#E5E5E5"> are on our</font><font color="#CCCCCC"> class path so in</font>

614
00:20:56,130 --> 00:20:59,429
this<font color="#E5E5E5"> case we know equals</font><font color="#CCCCCC"> as an entry</font>

615
00:20:57,720 --> 00:21:01,799
point using<font color="#E5E5E5"> the trick of wrapping it in</font>

616
00:20:59,429 --> 00:21:03,900
a hash map and somewhere<font color="#E5E5E5"> inside the</font>

617
00:21:01,799 --> 00:21:06,450
equals method<font color="#CCCCCC"> we might call</font><font color="#E5E5E5"> a collection</font>

618
00:21:03,900 --> 00:21:08,490
that<font color="#CCCCCC"> contains and in this case we know</font>

619
00:21:06,450 --> 00:21:10,350
the<font color="#CCCCCC"> O that</font><font color="#E5E5E5"> gets passed into equals is</font>

620
00:21:08,490 --> 00:21:12,510
<font color="#CCCCCC">attacker controllable as well as the</font>

621
00:21:10,350 --> 00:21:14,219
this<font color="#E5E5E5"> object that we're calling equals on</font>

622
00:21:12,510 --> 00:21:15,990
and that's because<font color="#E5E5E5"> both of those things</font>

623
00:21:14,220 --> 00:21:17,400
<font color="#CCCCCC">are basically read in by the hash map as</font>

624
00:21:15,990 --> 00:21:20,400
key value pairs<font color="#CCCCCC"> so</font><font color="#E5E5E5"> you're going to call</font>

625
00:21:17,400 --> 00:21:21,120
equals on it<font color="#E5E5E5"> so what we're gonna do is</font>

626
00:21:20,400 --> 00:21:23,160
we're going<font color="#CCCCCC"> to look</font><font color="#E5E5E5"> at all</font>

627
00:21:21,120 --> 00:21:24,840
implementations<font color="#E5E5E5"> of contains that are on</font>

628
00:21:23,160 --> 00:21:26,760
<font color="#CCCCCC">our class path because that's the thing</font>

629
00:21:24,840 --> 00:21:28,530
the oh that we're calling contains on

630
00:21:26,760 --> 00:21:31,110
we're assuming is attacker controllable

631
00:21:28,530 --> 00:21:33,928
so any implementation<font color="#E5E5E5"> of a collection</font>

632
00:21:31,110 --> 00:21:35,939
<font color="#E5E5E5">could be used as the oh that's getting</font>

633
00:21:33,929 --> 00:21:37,679
passed in so we're gonna enumerate all

634
00:21:35,940 --> 00:21:39,600
<font color="#E5E5E5">implementations that contains and</font>

635
00:21:37,679 --> 00:21:41,940
continue<font color="#E5E5E5"> doing a graph search on each of</font>

636
00:21:39,600 --> 00:21:43,770
those implementations<font color="#E5E5E5"> so here's one</font>

637
00:21:41,940 --> 00:21:45,600
particular<font color="#CCCCCC"> example and when we jump</font><font color="#E5E5E5"> into</font>

638
00:21:43,770 --> 00:21:47,639
it<font color="#E5E5E5"> we're gonna say that the this that</font>

639
00:21:45,600 --> 00:21:49,439
gets passed in is the argument<font color="#E5E5E5"> T we know</font>

640
00:21:47,640 --> 00:21:51,570
could<font color="#E5E5E5"> be</font><font color="#CCCCCC"> at active controllable as well</font>

641
00:21:49,440 --> 00:21:53,100
as the implicit this and then if the

642
00:21:51,570 --> 00:21:55,049
implicit this is<font color="#CCCCCC"> at active controllable</font>

643
00:21:53,100 --> 00:21:57,570
then all the fields<font color="#CCCCCC"> on it are because</font>

644
00:21:55,049 --> 00:21:58,710
that's again the entire object<font color="#CCCCCC"> is</font>

645
00:21:57,570 --> 00:22:00,570
something<font color="#CCCCCC"> that's getting deep T realized</font>

646
00:21:58,710 --> 00:22:02,490
out of the<font color="#E5E5E5"> payload so we're gonna look</font>

647
00:22:00,570 --> 00:22:04,320
at<font color="#CCCCCC"> all methods invoked in that one and</font>

648
00:22:02,490 --> 00:22:05,669
so there might be something<font color="#CCCCCC"> like</font><font color="#E5E5E5"> Q dot</font>

649
00:22:04,320 --> 00:22:07,530
head and basically we're<font color="#CCCCCC"> just gonna</font>

650
00:22:05,669 --> 00:22:09,600
<font color="#CCCCCC">continue</font><font color="#E5E5E5"> this graph search on and on and</font>

651
00:22:07,530 --> 00:22:11,879
on look always<font color="#E5E5E5"> looking at all</font>

652
00:22:09,600 --> 00:22:14,908
<font color="#E5E5E5">implementations of a class whenever we</font>

653
00:22:11,880 --> 00:22:16,470
jump to it<font color="#E5E5E5"> and eventually</font><font color="#CCCCCC"> we might</font><font color="#E5E5E5"> see</font>

654
00:22:14,909 --> 00:22:18,299
that<font color="#CCCCCC"> we get somewhere interesting</font>

655
00:22:16,470 --> 00:22:20,429
some piece of<font color="#E5E5E5"> code that does something</font>

656
00:22:18,299 --> 00:22:22,350
that<font color="#E5E5E5"> has a side effect like one time not</font>

657
00:22:20,429 --> 00:22:24,120
exact or maybe something<font color="#CCCCCC"> that reads</font><font color="#E5E5E5"> or</font>

658
00:22:22,350 --> 00:22:25,379
writes files from<font color="#E5E5E5"> the disk and whenever</font>

659
00:22:24,120 --> 00:22:27,030
we<font color="#E5E5E5"> see one</font><font color="#CCCCCC"> of those we're just gonna</font>

660
00:22:25,380 --> 00:22:29,580
output that as our gadget chain and

661
00:22:27,030 --> 00:22:31,950
that's basically all<font color="#E5E5E5"> there</font><font color="#CCCCCC"> is to this</font>

662
00:22:29,580 --> 00:22:33,360
you know devil is in the<font color="#CCCCCC"> details so for</font>

663
00:22:31,950 --> 00:22:34,890
the sake<font color="#CCCCCC"> of time I'm not going to go</font>

664
00:22:33,360 --> 00:22:36,209
through<font color="#CCCCCC"> all of the ways that this thing</font>

665
00:22:34,890 --> 00:22:38,700
does symbolic execution but I've got a

666
00:22:36,210 --> 00:22:40,409
white paper<font color="#E5E5E5"> up as well as some you know</font>

667
00:22:38,700 --> 00:22:42,020
the source code<font color="#E5E5E5"> that you can go look at</font>

668
00:22:40,409 --> 00:22:44,130
and see exactly<font color="#E5E5E5"> what this</font><font color="#CCCCCC"> thing is doing</font>

669
00:22:42,020 --> 00:22:45,600
but<font color="#E5E5E5"> that's the general idea</font><font color="#CCCCCC"> basically</font>

670
00:22:44,130 --> 00:22:47,520
<font color="#CCCCCC">it's just a graph search through method</font>

671
00:22:45,600 --> 00:22:50,969
<font color="#E5E5E5">invocations with some tricks to rule out</font>

672
00:22:47,520 --> 00:22:53,400
<font color="#E5E5E5">some false</font><font color="#CCCCCC"> positives</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> the most</font>

673
00:22:50,970 --> 00:22:54,929
important<font color="#E5E5E5"> thing in what</font><font color="#CCCCCC"> sketch</font><font color="#E5E5E5"> inspector</font>

674
00:22:53,400 --> 00:22:57,390
does though is<font color="#CCCCCC"> that it allows some</font>

675
00:22:54,929 --> 00:22:59,490
flexibility for<font color="#CCCCCC"> the DC ization library</font>

676
00:22:57,390 --> 00:23:01,110
that you're talking<font color="#E5E5E5"> about</font><font color="#CCCCCC"> so in</font>

677
00:22:59,490 --> 00:23:02,640
<font color="#E5E5E5">particular there's lots of</font>

678
00:23:01,110 --> 00:23:04,860
customizations that<font color="#E5E5E5"> you can make around</font>

679
00:23:02,640 --> 00:23:06,840
the idea of<font color="#E5E5E5"> what's considered realizable</font>

680
00:23:04,860 --> 00:23:07,590
<font color="#E5E5E5">so I mentioned in that analysis</font><font color="#CCCCCC"> that we</font>

681
00:23:06,840 --> 00:23:09,389
were<font color="#E5E5E5"> going to look at all</font>

682
00:23:07,590 --> 00:23:11,399
implementations<font color="#E5E5E5"> of</font><font color="#CCCCCC"> collection ducking</font>

683
00:23:09,390 --> 00:23:12,840
<font color="#CCCCCC">techniques</font><font color="#E5E5E5"> that's a little bit broader</font>

684
00:23:11,400 --> 00:23:13,919
<font color="#CCCCCC">than what I actually want to do because</font>

685
00:23:12,840 --> 00:23:15,959
I really<font color="#CCCCCC"> want</font><font color="#E5E5E5"> to look at all</font>

686
00:23:13,919 --> 00:23:18,240
implementations<font color="#E5E5E5"> inside classes that are</font>

687
00:23:15,960 --> 00:23:20,159
considered serializable<font color="#E5E5E5"> so for the Java</font>

688
00:23:18,240 --> 00:23:21,659
object<font color="#CCCCCC"> input stream</font><font color="#E5E5E5"> only classes that</font>

689
00:23:20,159 --> 00:23:24,059
implement this serializable interface

690
00:23:21,659 --> 00:23:26,190
<font color="#CCCCCC">can</font><font color="#E5E5E5"> actually be shoved into a payload</font>

691
00:23:24,059 --> 00:23:27,658
but that's<font color="#E5E5E5"> different for something like</font>

692
00:23:26,190 --> 00:23:29,880
<font color="#CCCCCC">x-ray where it depends on what</font>

693
00:23:27,659 --> 00:23:32,280
converters have<font color="#CCCCCC"> been</font><font color="#E5E5E5"> enabled in your</font><font color="#CCCCCC"> D</font>

694
00:23:29,880 --> 00:23:34,320
<font color="#E5E5E5">serializer or something like</font><font color="#CCCCCC"> jackson</font>

695
00:23:32,280 --> 00:23:37,408
<font color="#E5E5E5">only classes with</font><font color="#CCCCCC"> an OU</font><font color="#E5E5E5"> our constructor</font>

696
00:23:34,320 --> 00:23:39,510
<font color="#E5E5E5">can actually be</font><font color="#CCCCCC"> deserialize</font><font color="#E5E5E5"> by by</font>

697
00:23:37,409 --> 00:23:40,710
Jackson so exactly what classes you

698
00:23:39,510 --> 00:23:43,010
consider we're looking at all

699
00:23:40,710 --> 00:23:46,350
implementations<font color="#CCCCCC"> is something that's</font>

700
00:23:43,010 --> 00:23:48,120
configurable similar<font color="#CCCCCC"> well similarly like</font>

701
00:23:46,350 --> 00:23:49,379
what are the<font color="#CCCCCC"> D</font><font color="#E5E5E5"> serialization sources</font>

702
00:23:48,120 --> 00:23:50,668
what are<font color="#CCCCCC"> the magic</font><font color="#E5E5E5"> methods are things</font>

703
00:23:49,380 --> 00:23:53,039
<font color="#CCCCCC">that are gonna differ depending on what</font>

704
00:23:50,669 --> 00:23:54,900
library you're talking<font color="#CCCCCC"> about and also</font>

705
00:23:53,039 --> 00:23:57,090
what method implementations you should

706
00:23:54,900 --> 00:23:59,549
consider<font color="#E5E5E5"> is something that varies a lot</font>

707
00:23:57,090 --> 00:24:01,770
between<font color="#E5E5E5"> these different different</font>

708
00:23:59,549 --> 00:24:03,600
libraries so again for the object input

709
00:24:01,770 --> 00:24:05,280
stream<font color="#CCCCCC"> all implementations would work</font>

710
00:24:03,600 --> 00:24:07,110
but for Jackson it really depends<font color="#E5E5E5"> on</font>

711
00:24:05,280 --> 00:24:09,570
<font color="#CCCCCC">exactly what annotations are on the</font>

712
00:24:07,110 --> 00:24:11,789
classes<font color="#E5E5E5"> so you</font><font color="#CCCCCC"> can be smart about how</font>

713
00:24:09,570 --> 00:24:13,168
<font color="#CCCCCC">you're</font><font color="#E5E5E5"> building up those call graphs and</font>

714
00:24:11,789 --> 00:24:16,500
therefore what gadget chains you're

715
00:24:13,169 --> 00:24:18,090
actually looking<font color="#E5E5E5"> at so</font><font color="#CCCCCC"> all right</font><font color="#E5E5E5"> I built</font>

716
00:24:16,500 --> 00:24:20,220
this tool I<font color="#CCCCCC"> claimed</font><font color="#E5E5E5"> that it does cool</font>

717
00:24:18,090 --> 00:24:22,289
stuff<font color="#E5E5E5"> but obviously until I actually run</font>

718
00:24:20,220 --> 00:24:24,150
it on<font color="#E5E5E5"> something I don't</font><font color="#CCCCCC"> actually know</font>

719
00:24:22,289 --> 00:24:25,830
<font color="#CCCCCC">that it's doing useful</font><font color="#E5E5E5"> things</font><font color="#CCCCCC"> so the</font>

720
00:24:24,150 --> 00:24:27,630
first thing I<font color="#CCCCCC"> did was</font><font color="#E5E5E5"> write in this tool</font>

721
00:24:25,830 --> 00:24:30,269
on<font color="#CCCCCC"> a bunch of open</font><font color="#E5E5E5"> source libraries to</font>

722
00:24:27,630 --> 00:24:31,889
see what what it would come<font color="#E5E5E5"> up with</font>

723
00:24:30,269 --> 00:24:34,080
so the very first thing<font color="#E5E5E5"> it came up</font><font color="#CCCCCC"> with</font>

724
00:24:31,889 --> 00:24:35,849
was this<font color="#E5E5E5"> gadget</font><font color="#CCCCCC"> chain enclosure</font><font color="#E5E5E5"> and this</font>

725
00:24:34,080 --> 00:24:37,649
is what I was alluding to<font color="#E5E5E5"> in that</font>

726
00:24:35,849 --> 00:24:41,668
example from the beginning of the talk

727
00:24:37,649 --> 00:24:44,580
so<font color="#E5E5E5"> the</font><font color="#CCCCCC"> Commons collections</font><font color="#E5E5E5"> RC e gadget</font>

728
00:24:41,669 --> 00:24:46,979
chain that<font color="#CCCCCC"> fro Hoff</font><font color="#E5E5E5"> and Lawrence came up</font>

729
00:24:44,580 --> 00:24:50,089
with in 2015 was super interesting

730
00:24:46,979 --> 00:24:52,580
<font color="#E5E5E5">because it</font><font color="#CCCCCC"> was a</font><font color="#E5E5E5"> 30 most popular library</font>

731
00:24:50,089 --> 00:24:55,589
according to maven repository<font color="#CCCCCC"> comm</font>

732
00:24:52,580 --> 00:24:57,208
<font color="#CCCCCC">closure</font><font color="#E5E5E5"> is the</font><font color="#CCCCCC"> six most popular library</font>

733
00:24:55,589 --> 00:25:00,899
so it's pulled in by even<font color="#E5E5E5"> more things</font>

734
00:24:57,209 --> 00:25:02,999
than Commons collections<font color="#CCCCCC"> but despite</font>

735
00:25:00,899 --> 00:25:06,629
<font color="#CCCCCC">that it has an RT e gadget chain in it</font>

736
00:25:02,999 --> 00:25:09,539
<font color="#E5E5E5">so this was super interesting</font><font color="#CCCCCC"> to</font>

737
00:25:06,629 --> 00:25:11,820
discover<font color="#E5E5E5"> so what this gadget chain does</font>

738
00:25:09,539 --> 00:25:13,679
<font color="#E5E5E5">that it discovered is basically load an</font>

739
00:25:11,820 --> 00:25:15,658
arbitrary file<font color="#E5E5E5"> off the</font><font color="#CCCCCC"> disk and execute</font>

740
00:25:13,679 --> 00:25:17,309
it<font color="#E5E5E5"> it turns out you can tweak the</font><font color="#CCCCCC"> last</font>

741
00:25:15,659 --> 00:25:19,049
step in there a little<font color="#CCCCCC"> bit to call eval</font>

742
00:25:17,309 --> 00:25:21,539
instead of load script<font color="#E5E5E5"> and basically get</font>

743
00:25:19,049 --> 00:25:23,579
arbitrary code execution<font color="#CCCCCC"> so this was so</font>

744
00:25:21,539 --> 00:25:24,929
super cool to discover and I reported it

745
00:25:23,579 --> 00:25:25,859
to<font color="#E5E5E5"> the closure tuff mailing list and</font>

746
00:25:24,929 --> 00:25:27,989
<font color="#E5E5E5">they basically just turned off</font>

747
00:25:25,859 --> 00:25:29,718
civilization of this class<font color="#E5E5E5"> in order</font><font color="#CCCCCC"> to</font>

748
00:25:27,989 --> 00:25:32,309
<font color="#E5E5E5">close out this gadget chain because</font>

749
00:25:29,719 --> 00:25:34,440
who's actually<font color="#E5E5E5"> using serialization of</font>

750
00:25:32,309 --> 00:25:36,029
this class and they're like no one so

751
00:25:34,440 --> 00:25:39,320
we're<font color="#CCCCCC"> just</font><font color="#E5E5E5"> going to turn it</font><font color="#CCCCCC"> off so</font><font color="#E5E5E5"> yay</font>

752
00:25:36,029 --> 00:25:42,479
<font color="#E5E5E5">all right making</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> world a safer</font><font color="#CCCCCC"> place</font>

753
00:25:39,320 --> 00:25:44,218
<font color="#CCCCCC">in scanning</font><font color="#E5E5E5"> some of the most popular</font>

754
00:25:42,479 --> 00:25:46,109
libraries a bunch<font color="#E5E5E5"> of stuff also popped</font>

755
00:25:44,219 --> 00:25:47,339
up for<font color="#E5E5E5"> Scala Scala is really interesting</font>

756
00:25:46,109 --> 00:25:49,708
because<font color="#E5E5E5"> it's the third</font><font color="#CCCCCC"> most</font><font color="#E5E5E5"> popular</font>

757
00:25:47,339 --> 00:25:52,499
library<font color="#E5E5E5"> so I didn't find an RC e gadget</font>

758
00:25:49,709 --> 00:25:54,539
chain in Scala<font color="#CCCCCC"> but I did find this</font>

759
00:25:52,499 --> 00:25:56,099
gadget chain which would<font color="#E5E5E5"> basically write</font>

760
00:25:54,539 --> 00:25:57,869
or overwrite a file with<font color="#E5E5E5"> zero bytes</font>

761
00:25:56,099 --> 00:25:59,579
<font color="#E5E5E5">which is potentially interesting because</font>

762
00:25:57,869 --> 00:26:01,559
you can<font color="#E5E5E5"> basically denial-of-service a</font>

763
00:25:59,579 --> 00:26:04,289
web application by<font color="#CCCCCC"> overwriting some of</font>

764
00:26:01,559 --> 00:26:06,119
its resources<font color="#CCCCCC"> conceivably you could also</font>

765
00:26:04,289 --> 00:26:08,399
do something<font color="#E5E5E5"> like zero out of</font><font color="#CCCCCC"> blacklist</font>

766
00:26:06,119 --> 00:26:09,809
like an<font color="#E5E5E5"> HD access file so again pretty</font>

767
00:26:08,399 --> 00:26:11,879
<font color="#E5E5E5">interesting</font>

768
00:26:09,809 --> 00:26:13,408
by tweaking<font color="#E5E5E5"> that a little bit</font><font color="#CCCCCC"> to another</font>

769
00:26:11,879 --> 00:26:15,958
<font color="#E5E5E5">gadget chain that it discovered in Scala</font>

770
00:26:13,409 --> 00:26:18,119
<font color="#E5E5E5">allows you to do</font><font color="#CCCCCC"> an SSR F do a get</font>

771
00:26:15,959 --> 00:26:20,009
against<font color="#E5E5E5"> an arbitrary URL which if you've</font>

772
00:26:18,119 --> 00:26:22,619
ever<font color="#CCCCCC"> done any pen tests against</font>

773
00:26:20,009 --> 00:26:24,809
applications usually<font color="#CCCCCC"> once you</font><font color="#E5E5E5"> manage to</font>

774
00:26:22,619 --> 00:26:26,609
do some kind<font color="#E5E5E5"> of get operation inside the</font>

775
00:26:24,809 --> 00:26:28,649
<font color="#CCCCCC">perimeter you can end up doing a</font><font color="#E5E5E5"> lot</font><font color="#CCCCCC"> of</font>

776
00:26:26,609 --> 00:26:32,489
<font color="#E5E5E5">interesting stuff</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> also super</font>

777
00:26:28,649 --> 00:26:34,018
interesting<font color="#CCCCCC"> but in rerunning gadget</font>

778
00:26:32,489 --> 00:26:36,119
<font color="#CCCCCC">inspector</font><font color="#E5E5E5"> sort of shortly before this</font>

779
00:26:34,019 --> 00:26:37,889
talk to see<font color="#CCCCCC"> like what what it might have</font>

780
00:26:36,119 --> 00:26:40,289
<font color="#E5E5E5">missed due to kind of some improvements</font>

781
00:26:37,889 --> 00:26:42,238
I made in the<font color="#E5E5E5"> meantime it discovered a</font>

782
00:26:40,289 --> 00:26:43,800
new gadget chain<font color="#E5E5E5"> the side closure that</font>

783
00:26:42,239 --> 00:26:46,050
<font color="#E5E5E5">uses a different hash code and</font>

784
00:26:43,800 --> 00:26:47,669
point<font color="#E5E5E5"> and comes up</font><font color="#CCCCCC"> with exactly</font><font color="#E5E5E5"> the same</font>

785
00:26:46,050 --> 00:26:49,740
gadget chain that<font color="#E5E5E5"> I saw the first time</font>

786
00:26:47,670 --> 00:26:51,780
<font color="#E5E5E5">so even though the closure community</font>

787
00:26:49,740 --> 00:26:53,880
patched that<font color="#CCCCCC"> RC e gadget</font><font color="#E5E5E5"> chain that I</font>

788
00:26:51,780 --> 00:26:55,560
found before<font color="#CCCCCC"> there's still a new one in</font>

789
00:26:53,880 --> 00:26:57,380
every version<font color="#CCCCCC"> released since</font><font color="#E5E5E5"> so if</font>

790
00:26:55,560 --> 00:27:00,210
you're pulling<font color="#E5E5E5"> in any version of closure</font>

791
00:26:57,380 --> 00:27:02,190
<font color="#CCCCCC">and you're</font><font color="#E5E5E5"> doing unsafety serialization</font>

792
00:27:00,210 --> 00:27:04,320
then there's an RC e vulnerability in

793
00:27:02,190 --> 00:27:06,930
your application so<font color="#E5E5E5"> you should check</font>

794
00:27:04,320 --> 00:27:08,850
that<font color="#E5E5E5"> out but</font><font color="#CCCCCC"> okay obviously the whole</font>

795
00:27:06,930 --> 00:27:11,070
point of this talk is<font color="#CCCCCC"> to</font><font color="#E5E5E5"> talk</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> how</font>

796
00:27:08,850 --> 00:27:12,750
we can<font color="#CCCCCC"> use this tool to more effectively</font>

797
00:27:11,070 --> 00:27:15,990
remediate<font color="#CCCCCC"> formability</font><font color="#E5E5E5"> discovered in</font>

798
00:27:12,750 --> 00:27:17,820
applications<font color="#E5E5E5"> so the</font><font color="#CCCCCC"> but I wanted</font><font color="#E5E5E5"> to use</font>

799
00:27:15,990 --> 00:27:21,360
<font color="#E5E5E5">this tool for</font><font color="#CCCCCC"> at the end of the day is</font>

800
00:27:17,820 --> 00:27:22,770
to<font color="#E5E5E5"> scan applications at Netflix and</font>

801
00:27:21,360 --> 00:27:24,870
figure out<font color="#E5E5E5"> whether or not we need</font><font color="#CCCCCC"> to</font>

802
00:27:22,770 --> 00:27:27,510
remediate vulnerabilities we found so

803
00:27:24,870 --> 00:27:29,459
here's one<font color="#CCCCCC"> example of an internal web</font>

804
00:27:27,510 --> 00:27:31,800
app where we discovered a<font color="#E5E5E5"> DC realization</font>

805
00:27:29,460 --> 00:27:36,480
vulnerability<font color="#E5E5E5"> so this was using</font><font color="#CCCCCC"> Jack</font><font color="#E5E5E5"> and</font>

806
00:27:31,800 --> 00:27:38,399
in a fine Arbit to deserialize<font color="#E5E5E5"> and</font>

807
00:27:36,480 --> 00:27:39,870
specifies the whole payloads that

808
00:27:38,400 --> 00:27:41,610
Jackson's going to deserialize

809
00:27:39,870 --> 00:27:43,229
<font color="#E5E5E5">but because it's Jackson it's got some</font>

810
00:27:41,610 --> 00:27:45,240
<font color="#CCCCCC">limitations so it can</font><font color="#E5E5E5"> only deserialize</font>

811
00:27:43,230 --> 00:27:47,090
class with no<font color="#CCCCCC"> are constructors and</font><font color="#E5E5E5"> it's</font>

812
00:27:45,240 --> 00:27:49,440
only endpoints are gonna be set methods

813
00:27:47,090 --> 00:27:51,120
now that doesn't<font color="#E5E5E5"> sound too interesting</font>

814
00:27:49,440 --> 00:27:52,500
usually setters are kind<font color="#E5E5E5"> of no</font><font color="#CCCCCC"> ops I</font>

815
00:27:51,120 --> 00:27:56,209
don't do<font color="#CCCCCC"> anything interesting</font><font color="#E5E5E5"> but that</font>

816
00:27:52,500 --> 00:27:59,070
does<font color="#E5E5E5"> include methods</font><font color="#CCCCCC"> names set up or</font>

817
00:27:56,210 --> 00:28:00,660
similarly<font color="#E5E5E5"> so there might be something</font>

818
00:27:59,070 --> 00:28:02,790
<font color="#E5E5E5">there and in particular this app had</font>

819
00:28:00,660 --> 00:28:04,500
like a 200 megabyte class path so<font color="#CCCCCC"> we had</font>

820
00:28:02,790 --> 00:28:06,180
like<font color="#E5E5E5"> literally thousands and thousands</font>

821
00:28:04,500 --> 00:28:07,560
<font color="#E5E5E5">of classes so there might be something</font>

822
00:28:06,180 --> 00:28:09,360
interesting there even though it's kind

823
00:28:07,560 --> 00:28:11,940
<font color="#E5E5E5">of hard to conceive of a good gadget</font>

824
00:28:09,360 --> 00:28:15,090
<font color="#CCCCCC">chain subject to</font><font color="#E5E5E5"> these restrictions so</font>

825
00:28:11,940 --> 00:28:16,500
<font color="#E5E5E5">Ryan gadget inspector</font><font color="#CCCCCC"> and it didn't come</font>

826
00:28:15,090 --> 00:28:18,030
up<font color="#E5E5E5"> with anything it came up with like</font>

827
00:28:16,500 --> 00:28:19,710
<font color="#CCCCCC">two false positives that were easy to</font>

828
00:28:18,030 --> 00:28:21,330
rule out<font color="#CCCCCC"> so we're like</font><font color="#E5E5E5"> all</font><font color="#CCCCCC"> right we're</font>

829
00:28:19,710 --> 00:28:22,620
gonna take<font color="#CCCCCC"> our time fixing this</font><font color="#E5E5E5"> it's not</font>

830
00:28:21,330 --> 00:28:25,139
<font color="#E5E5E5">the biggest</font><font color="#CCCCCC"> deal in</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> world we don't</font>

831
00:28:22,620 --> 00:28:27,139
have to drop features for the quarter in

832
00:28:25,140 --> 00:28:29,400
<font color="#CCCCCC">order to like work on this right away</font>

833
00:28:27,140 --> 00:28:32,370
but I'm not<font color="#E5E5E5"> gonna leave you</font><font color="#CCCCCC"> with that</font>

834
00:28:29,400 --> 00:28:34,290
<font color="#E5E5E5">the</font><font color="#CCCCCC"> next one that I was using this for</font>

835
00:28:32,370 --> 00:28:36,510
used some really interesting

836
00:28:34,290 --> 00:28:39,120
non-standard<font color="#CCCCCC"> D serialization library so</font>

837
00:28:36,510 --> 00:28:41,190
<font color="#E5E5E5">we had a</font><font color="#CCCCCC"> penetration test team</font><font color="#E5E5E5"> looking</font>

838
00:28:39,120 --> 00:28:42,780
at this application<font color="#CCCCCC"> and they discovered</font>

839
00:28:41,190 --> 00:28:44,910
that it used this on standard<font color="#CCCCCC"> D</font>

840
00:28:42,780 --> 00:28:46,889
serialization library<font color="#E5E5E5"> and it was doing</font>

841
00:28:44,910 --> 00:28:48,900
unsafety civilization with it but

842
00:28:46,890 --> 00:28:50,280
because<font color="#E5E5E5"> it was a sort of weird library</font>

843
00:28:48,900 --> 00:28:51,630
it had a lot<font color="#CCCCCC"> of really</font><font color="#E5E5E5"> weird unique</font>

844
00:28:50,280 --> 00:28:54,570
constraints on it<font color="#E5E5E5"> so it still had a</font>

845
00:28:51,630 --> 00:28:56,190
magic method<font color="#E5E5E5"> it would use we resolve but</font>

846
00:28:54,570 --> 00:28:57,480
not<font color="#E5E5E5"> read object which is the one that</font>

847
00:28:56,190 --> 00:29:00,299
the object input stream you

848
00:28:57,480 --> 00:29:01,860
<font color="#CCCCCC">she uses but to utilize objects don't</font>

849
00:29:00,299 --> 00:29:03,179
<font color="#E5E5E5">need to implement serializable which</font>

850
00:29:01,860 --> 00:29:04,678
means that you actually<font color="#E5E5E5"> have almost</font>

851
00:29:03,179 --> 00:29:06,960
every class<font color="#E5E5E5"> or in class path to work</font>

852
00:29:04,679 --> 00:29:08,880
with<font color="#E5E5E5"> but there's a bunch of other weird</font>

853
00:29:06,960 --> 00:29:10,049
restrictions on it so member fields<font color="#E5E5E5"> of</font>

854
00:29:08,880 --> 00:29:11,640
the<font color="#CCCCCC"> CIE utilized object can't have a</font>

855
00:29:10,049 --> 00:29:12,990
dollar sign<font color="#CCCCCC"> in</font><font color="#E5E5E5"> them for example and</font>

856
00:29:11,640 --> 00:29:14,760
<font color="#E5E5E5">that's just because of</font><font color="#CCCCCC"> the way that it</font>

857
00:29:12,990 --> 00:29:16,320
<font color="#E5E5E5">was</font><font color="#CCCCCC"> actually encoded in the payloads</font>

858
00:29:14,760 --> 00:29:18,690
like it would<font color="#E5E5E5"> just break the encoding</font>

859
00:29:16,320 --> 00:29:20,428
scheme<font color="#CCCCCC"> there were no serialization</font>

860
00:29:18,690 --> 00:29:22,590
support for arrays or generic<font color="#CCCCCC"> Maps</font><font color="#E5E5E5"> and</font>

861
00:29:20,429 --> 00:29:25,140
most importantly it didn't let<font color="#E5E5E5"> you have</font>

862
00:29:22,590 --> 00:29:26,399
any null values for fields on objects

863
00:29:25,140 --> 00:29:28,440
<font color="#E5E5E5">and that means that there was this</font>

864
00:29:26,400 --> 00:29:30,059
recursive requirement where every field

865
00:29:28,440 --> 00:29:31,830
<font color="#E5E5E5">also had to satisfy all these</font>

866
00:29:30,059 --> 00:29:33,720
requirements<font color="#CCCCCC"> so it was really</font><font color="#E5E5E5"> really</font>

867
00:29:31,830 --> 00:29:36,889
hard to even<font color="#CCCCCC"> say what classes on the</font>

868
00:29:33,720 --> 00:29:39,179
class path could<font color="#E5E5E5"> be deserialized</font>

869
00:29:36,890 --> 00:29:42,059
<font color="#CCCCCC">but that's the</font><font color="#E5E5E5"> sort of thing that you</font>

870
00:29:39,179 --> 00:29:43,950
<font color="#E5E5E5">can just kind</font><font color="#CCCCCC"> of configure inside gadget</font>

871
00:29:42,059 --> 00:29:47,370
inspector<font color="#CCCCCC"> and run it on and this</font><font color="#E5E5E5"> is what</font>

872
00:29:43,950 --> 00:29:50,610
<font color="#E5E5E5">it came up with so this is</font><font color="#CCCCCC"> some crazy</font><font color="#E5E5E5"> 12</font>

873
00:29:47,370 --> 00:29:52,649
<font color="#E5E5E5">step deep</font><font color="#CCCCCC"> D</font><font color="#E5E5E5"> civilization gadget chain</font>

874
00:29:50,610 --> 00:29:55,049
and this was a real gadget chain<font color="#E5E5E5"> this</font>

875
00:29:52,650 --> 00:29:56,820
was a true hit<font color="#E5E5E5"> and I'm not gonna make</font>

876
00:29:55,049 --> 00:29:58,470
<font color="#E5E5E5">you like weed every one</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> these lines</font>

877
00:29:56,820 --> 00:30:00,059
or go through exactly<font color="#E5E5E5"> what this</font><font color="#CCCCCC"> means</font>

878
00:29:58,470 --> 00:30:01,590
cuz that<font color="#E5E5E5"> would take a half an hour by</font>

879
00:30:00,059 --> 00:30:03,570
itself<font color="#CCCCCC"> but if you just kind of</font><font color="#E5E5E5"> let your</font>

880
00:30:01,590 --> 00:30:05,459
eyes fuzz a little bit and look at the

881
00:30:03,570 --> 00:30:07,379
different package names here<font color="#E5E5E5"> there are</font>

882
00:30:05,460 --> 00:30:11,790
seven different libraries involved<font color="#E5E5E5"> in</font>

883
00:30:07,380 --> 00:30:13,559
building<font color="#E5E5E5"> this gadget chain</font><font color="#CCCCCC"> and like that</font>

884
00:30:11,790 --> 00:30:15,600
<font color="#E5E5E5">includes</font><font color="#CCCCCC"> Jerry</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> the application</font>

885
00:30:13,559 --> 00:30:18,899
itself not just libraries that it's

886
00:30:15,600 --> 00:30:20,129
pulling<font color="#E5E5E5"> in so this is</font><font color="#CCCCCC"> something that you</font>

887
00:30:18,900 --> 00:30:21,419
know the penetration team even though

888
00:30:20,130 --> 00:30:23,400
<font color="#CCCCCC">they spent a couple days looking this</font>

889
00:30:21,419 --> 00:30:24,990
app did not find by themselves and<font color="#E5E5E5"> with</font>

890
00:30:23,400 --> 00:30:25,980
good reason<font color="#CCCCCC"> I don't know how long</font><font color="#E5E5E5"> it</font>

891
00:30:24,990 --> 00:30:28,799
would<font color="#E5E5E5"> have taken me</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> find this</font>

892
00:30:25,980 --> 00:30:30,690
manually but<font color="#E5E5E5"> what this thing did was it</font>

893
00:30:28,799 --> 00:30:32,639
allowed<font color="#E5E5E5"> you to copy an arbitrary file</font>

894
00:30:30,690 --> 00:30:34,110
from some input path to some output<font color="#E5E5E5"> path</font>

895
00:30:32,640 --> 00:30:37,110
so this basically allowed you to exit a

896
00:30:34,110 --> 00:30:38,969
private keys out<font color="#E5E5E5"> of</font><font color="#CCCCCC"> the application but</font>

897
00:30:37,110 --> 00:30:40,860
<font color="#E5E5E5">with a small tweak of the last step in</font>

898
00:30:38,970 --> 00:30:42,660
this you could actually write an

899
00:30:40,860 --> 00:30:44,610
arbitrary string<font color="#E5E5E5"> to an arbitrary output</font>

900
00:30:42,660 --> 00:30:47,370
path and in particular right at JSP out

901
00:30:44,610 --> 00:30:50,610
for the for the application<font color="#E5E5E5"> and get</font><font color="#CCCCCC"> RCE</font>

902
00:30:47,370 --> 00:30:51,719
so with about<font color="#E5E5E5"> 30 minutes of efforts I</font>

903
00:30:50,610 --> 00:30:53,490
was able<font color="#E5E5E5"> to discover</font><font color="#CCCCCC"> that this</font>

904
00:30:51,720 --> 00:30:55,890
vulnerability<font color="#E5E5E5"> led to</font><font color="#CCCCCC"> RCE</font>

905
00:30:53,490 --> 00:30:57,690
using this tool<font color="#E5E5E5"> so that was something</font>

906
00:30:55,890 --> 00:31:00,480
that we<font color="#E5E5E5"> wanted to remediate right away</font>

907
00:30:57,690 --> 00:31:02,010
so this tool is<font color="#CCCCCC"> basically a proof of</font>

908
00:31:00,480 --> 00:31:04,410
concept we've been using it for a<font color="#CCCCCC"> little</font>

909
00:31:02,010 --> 00:31:05,640
<font color="#CCCCCC">while now at</font><font color="#E5E5E5"> Netflix but there's lots of</font>

910
00:31:04,410 --> 00:31:07,470
rooms for<font color="#E5E5E5"> improvements</font>

911
00:31:05,640 --> 00:31:10,200
it really doesn't handle reflection<font color="#E5E5E5"> too</font>

912
00:31:07,470 --> 00:31:10,690
well<font color="#CCCCCC"> it makes a</font><font color="#E5E5E5"> bunch of assumptions</font>

913
00:31:10,200 --> 00:31:12,040
that<font color="#CCCCCC"> could be</font>

914
00:31:10,690 --> 00:31:14,350
prove<font color="#CCCCCC"> that are currently being in</font><font color="#E5E5E5"> false</font>

915
00:31:12,040 --> 00:31:15,850
<font color="#E5E5E5">positives</font><font color="#CCCCCC"> it only</font><font color="#E5E5E5"> knows about</font><font color="#CCCCCC"> energy</font>

916
00:31:14,350 --> 00:31:17,409
points using<font color="#CCCCCC"> known tricks and in</font>

917
00:31:15,850 --> 00:31:19,030
particular<font color="#CCCCCC"> it</font><font color="#E5E5E5"> only</font><font color="#CCCCCC"> knows about</font><font color="#E5E5E5"> sinks</font>

918
00:31:17,410 --> 00:31:22,000
with interesting behavior based on a

919
00:31:19,030 --> 00:31:23,290
list of known sinks<font color="#E5E5E5"> so there's lots of</font>

920
00:31:22,000 --> 00:31:24,640
<font color="#CCCCCC">ways this thing could be improved I'm</font>

921
00:31:23,290 --> 00:31:26,020
not going to tell you that like you run

922
00:31:24,640 --> 00:31:28,450
it and<font color="#CCCCCC"> you know this whether or not your</font>

923
00:31:26,020 --> 00:31:30,280
app is safe<font color="#E5E5E5"> but it definitely has</font>

924
00:31:28,450 --> 00:31:31,480
started saving<font color="#E5E5E5"> us a lot</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> time in</font>

925
00:31:30,280 --> 00:31:35,080
remediating these kind of

926
00:31:31,480 --> 00:31:36,640
vulnerabilities so<font color="#E5E5E5"> automated discovery</font>

927
00:31:35,080 --> 00:31:39,310
for gadget chains I think is new

928
00:31:36,640 --> 00:31:40,630
territory<font color="#CCCCCC"> this is a functional</font><font color="#E5E5E5"> prototype</font>

929
00:31:39,310 --> 00:31:42,340
there's awesome rooms for<font color="#CCCCCC"> improvement</font>

930
00:31:40,630 --> 00:31:44,620
<font color="#E5E5E5">and it's specifically written against</font>

931
00:31:42,340 --> 00:31:46,149
Java applications<font color="#E5E5E5"> but I think all these</font>

932
00:31:44,620 --> 00:31:48,850
<font color="#E5E5E5">ideas apply just as well to other</font>

933
00:31:46,150 --> 00:31:50,710
languages<font color="#CCCCCC"> like C sharp and this</font><font color="#E5E5E5"> thing is</font>

934
00:31:48,850 --> 00:31:52,270
<font color="#CCCCCC">open-source so I</font><font color="#E5E5E5"> encourage people to go</font>

935
00:31:50,710 --> 00:31:53,590
check it out look at<font color="#E5E5E5"> the source code</font><font color="#CCCCCC"> to</font>

936
00:31:52,270 --> 00:31:55,629
understand how it<font color="#E5E5E5"> works see if you want</font>

937
00:31:53,590 --> 00:31:57,520
to<font color="#E5E5E5"> apply it in other contexts</font><font color="#CCCCCC"> or just</font>

938
00:31:55,630 --> 00:31:59,170
<font color="#CCCCCC">improve it make it understand other</font><font color="#E5E5E5"> DC</font>

939
00:31:57,520 --> 00:32:01,270
<font color="#E5E5E5">realization libraries and most</font>

940
00:31:59,170 --> 00:32:02,470
importantly of all I think<font color="#E5E5E5"> I want you</font>

941
00:32:01,270 --> 00:32:04,600
<font color="#E5E5E5">guys to walk away with the message that</font>

942
00:32:02,470 --> 00:32:06,100
<font color="#CCCCCC">DC realization vulnerabilities aren't</font>

943
00:32:04,600 --> 00:32:07,360
going away<font color="#CCCCCC"> yet so we keep</font><font color="#E5E5E5"> finding them</font>

944
00:32:06,100 --> 00:32:08,949
<font color="#E5E5E5">and we keep talking</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> them and</font>

945
00:32:07,360 --> 00:32:11,409
exploits are getting way more

946
00:32:08,950 --> 00:32:13,060
<font color="#CCCCCC">sophisticated</font><font color="#E5E5E5"> so I think we need</font><font color="#CCCCCC"> some</font>

947
00:32:11,410 --> 00:32:14,920
better<font color="#CCCCCC"> tools to understand them as well</font>

948
00:32:13,060 --> 00:32:16,010
<font color="#E5E5E5">so that's all I've got to</font><font color="#CCCCCC"> thank</font><font color="#E5E5E5"> you all</font>

949
00:32:14,920 --> 00:32:20,859
<font color="#E5E5E5">for</font><font color="#CCCCCC"> coming</font>

950
00:32:16,010 --> 00:32:20,859
[Applause]

