1
00:00:00,030 --> 00:00:07,069
so hello<font color="#CCCCCC"> everyone</font><font color="#E5E5E5"> we're here to talk</font>

2
00:00:03,179 --> 00:00:07,069
about<font color="#CCCCCC"> cellular</font><font color="#E5E5E5"> less infections today</font>

3
00:00:07,490 --> 00:00:15,960
serverless is some more<font color="#E5E5E5"> and more way</font>

4
00:00:12,179 --> 00:00:18,000
beyond the<font color="#E5E5E5"> buzzword at the moment and we</font>

5
00:00:15,960 --> 00:00:22,130
<font color="#CCCCCC">need to make sure</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> to understand</font><font color="#E5E5E5"> all</font>

6
00:00:18,000 --> 00:00:26,519
the implications were implementing<font color="#E5E5E5"> that</font>

7
00:00:22,130 --> 00:00:29,130
<font color="#E5E5E5">so about me my name</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> Aris I'm head of</font>

8
00:00:26,519 --> 00:00:32,850
security research in check marks<font color="#CCCCCC"> and</font>

9
00:00:29,130 --> 00:00:36,540
this is usually<font color="#E5E5E5"> part of</font><font color="#CCCCCC"> the talk</font><font color="#E5E5E5"> when I</font>

10
00:00:32,850 --> 00:00:39,870
need<font color="#E5E5E5"> to justify why I am allowed</font><font color="#CCCCCC"> to sit</font>

11
00:00:36,540 --> 00:00:43,829
<font color="#E5E5E5">here and explain things to you</font><font color="#CCCCCC"> so check</font>

12
00:00:39,870 --> 00:00:47,489
<font color="#E5E5E5">marks handles a lot of software exposure</font>

13
00:00:43,829 --> 00:00:51,660
issues<font color="#CCCCCC"> server base is no different and</font>

14
00:00:47,489 --> 00:00:56,300
as part of my<font color="#E5E5E5"> job I see</font><font color="#CCCCCC"> and we see in</font>

15
00:00:51,660 --> 00:01:01,980
general<font color="#E5E5E5"> a</font><font color="#CCCCCC"> lot</font><font color="#E5E5E5"> of mistakes done by</font>

16
00:00:56,300 --> 00:01:10,500
architects etc<font color="#E5E5E5"> usually these mistakes</font>

17
00:01:01,980 --> 00:01:18,539
<font color="#CCCCCC">comes</font><font color="#E5E5E5"> with reasons or excuses actually</font>

18
00:01:10,500 --> 00:01:20,210
we're<font color="#E5E5E5"> here of</font><font color="#CCCCCC"> making mistakes in</font>

19
00:01:18,540 --> 00:01:23,159
serverless

20
00:01:20,210 --> 00:01:26,369
so let's start<font color="#E5E5E5"> I will a quick intro to</font>

21
00:01:23,159 --> 00:01:29,700
<font color="#E5E5E5">service</font><font color="#CCCCCC"> by the show of</font><font color="#E5E5E5"> hands how many</font>

22
00:01:26,369 --> 00:01:33,990
people here work<font color="#E5E5E5"> with several s as a</font>

23
00:01:29,700 --> 00:01:38,150
<font color="#E5E5E5">day-to-day thing</font><font color="#CCCCCC"> okay that's quite a lot</font>

24
00:01:33,990 --> 00:01:40,710
how many used server<font color="#E5E5E5"> lists at least once</font>

25
00:01:38,150 --> 00:01:42,360
<font color="#E5E5E5">how many people know what server this is</font>

26
00:01:40,710 --> 00:01:45,329
<font color="#E5E5E5">although they are not working with it</font>

27
00:01:42,360 --> 00:01:51,270
excellent<font color="#E5E5E5"> so yeah so we'll make a quick</font>

28
00:01:45,329 --> 00:01:54,750
<font color="#E5E5E5">intro yes with a</font><font color="#CCCCCC"> specific focus</font><font color="#E5E5E5"> on AWS</font>

29
00:01:51,270 --> 00:01:59,130
lambda of Amazon then we'll show some

30
00:01:54,750 --> 00:02:02,789
<font color="#E5E5E5">demos of what we did moving from code</font>

31
00:01:59,130 --> 00:02:05,789
injection<font color="#E5E5E5"> to actually to actual viral</font>

32
00:02:02,790 --> 00:02:09,090
infection<font color="#E5E5E5"> and we give a few</font><font color="#CCCCCC"> more words</font>

33
00:02:05,790 --> 00:02:12,069
about the AWS<font color="#CCCCCC"> lambda secure and</font>

34
00:02:09,090 --> 00:02:17,200
hopefully on time and<font color="#E5E5E5"> we'll finish with</font>

35
00:02:12,069 --> 00:02:18,909
some takeaways<font color="#E5E5E5"> so start by</font><font color="#CCCCCC"> a legal</font><font color="#E5E5E5"> thing</font>

36
00:02:17,200 --> 00:02:21,339
I understand it's illegal to talk<font color="#CCCCCC"> about</font>

37
00:02:18,909 --> 00:02:24,909
several s now<font color="#CCCCCC"> without at least showing</font>

38
00:02:21,340 --> 00:02:29,010
<font color="#E5E5E5">this picture or a similar one so here it</font>

39
00:02:24,909 --> 00:02:35,980
is<font color="#CCCCCC"> let's put it behind us and continue</font>

40
00:02:29,010 --> 00:02:39,959
intro let's talk about<font color="#E5E5E5"> evolution</font><font color="#CCCCCC"> a long</font>

41
00:02:35,980 --> 00:02:39,959
time<font color="#E5E5E5"> ago I'm trying to convince my</font>

42
00:02:41,220 --> 00:02:52,239
centers<font color="#CCCCCC"> and storage you know did the</font>

43
00:02:50,470 --> 00:03:10,620
<font color="#E5E5E5">hard disk</font><font color="#CCCCCC"> you needed more computing</font>

44
00:02:52,239 --> 00:03:10,620
power<font color="#CCCCCC"> you with us better</font>

45
00:03:21,330 --> 00:03:35,540
is it okay<font color="#CCCCCC"> now okay let</font><font color="#E5E5E5"> me know</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> not</font>

46
00:03:25,130 --> 00:03:35,540
so<font color="#E5E5E5"> the body one</font>

47
00:03:40,090 --> 00:03:48,430
oh<font color="#E5E5E5"> okay</font>

48
00:03:45,090 --> 00:03:51,940
so after data centers we got introduced

49
00:03:48,430 --> 00:03:54,880
to<font color="#CCCCCC"> infrastructure as a service AWS by</font>

50
00:03:51,940 --> 00:03:57,040
<font color="#E5E5E5">Amazon was a really good is really good</font>

51
00:03:54,880 --> 00:03:59,019
example<font color="#E5E5E5"> for that and you don't care</font>

52
00:03:57,040 --> 00:04:00,670
about how<font color="#CCCCCC"> do</font><font color="#E5E5E5"> it anymore and the unit of</font>

53
00:03:59,019 --> 00:04:07,209
scale is operating system you<font color="#E5E5E5"> need</font>

54
00:04:00,670 --> 00:04:11,100
another<font color="#E5E5E5"> one</font><font color="#CCCCCC"> just turn one</font><font color="#E5E5E5"> on later that</font>

55
00:04:07,209 --> 00:04:14,650
was introduced<font color="#CCCCCC"> platform-as-a-service</font>

56
00:04:11,100 --> 00:04:18,608
<font color="#CCCCCC">salesforce hiroko if some of you knows</font>

57
00:04:14,650 --> 00:04:20,680
it<font color="#E5E5E5"> no it's a good example for</font><font color="#CCCCCC"> that where</font>

58
00:04:18,608 --> 00:04:23,500
you have the application<font color="#E5E5E5"> is the unit of</font>

59
00:04:20,680 --> 00:04:26,110
scale and you don't care<font color="#E5E5E5"> about anything</font>

60
00:04:23,500 --> 00:04:29,590
below the application itself<font color="#CCCCCC"> and now the</font>

61
00:04:26,110 --> 00:04:31,690
<font color="#CCCCCC">new era of</font><font color="#E5E5E5"> server</font><font color="#CCCCCC"> list computing where</font>

62
00:04:29,590 --> 00:04:36,849
the unit of scale is<font color="#E5E5E5"> actually the</font>

63
00:04:31,690 --> 00:04:39,219
function<font color="#E5E5E5"> abstract everything except the</font>

64
00:04:36,850 --> 00:04:43,150
code itself<font color="#E5E5E5"> this is all you evolved</font>

65
00:04:39,220 --> 00:04:47,110
<font color="#CCCCCC">about</font><font color="#E5E5E5"> let's look from the side of</font>

66
00:04:43,150 --> 00:04:50,890
deployment especially when considering

67
00:04:47,110 --> 00:04:53,979
time<font color="#E5E5E5"> when you</font><font color="#CCCCCC"> had data</font><font color="#E5E5E5"> centers</font>

68
00:04:50,890 --> 00:04:56,229
deployment could have taken<font color="#CCCCCC"> months the</font>

69
00:04:53,979 --> 00:04:58,210
application lived for years<font color="#E5E5E5"> which means</font>

70
00:04:56,229 --> 00:05:01,300
that if<font color="#CCCCCC"> you had a problem</font><font color="#E5E5E5"> it was a very</font>

71
00:04:58,210 --> 00:05:04,210
persistent problem I'm talking about

72
00:05:01,300 --> 00:05:05,950
<font color="#E5E5E5">code vulnerabilities</font><font color="#CCCCCC"> of course and we</font>

73
00:05:04,210 --> 00:05:09,159
then moved to virtualized cloud

74
00:05:05,950 --> 00:05:13,450
solutions and containers deployment

75
00:05:09,160 --> 00:05:16,270
<font color="#E5E5E5">improved from minutes to seconds the</font>

76
00:05:13,450 --> 00:05:20,919
processes lived for weeks<font color="#E5E5E5"> sometimes</font>

77
00:05:16,270 --> 00:05:24,219
<font color="#E5E5E5">hours but now we have the what's called</font>

78
00:05:20,919 --> 00:05:27,039
function as a service<font color="#CCCCCC"> it deploys in</font>

79
00:05:24,220 --> 00:05:31,720
seriously milliseconds it<font color="#CCCCCC"> lives</font><font color="#E5E5E5"> for</font>

80
00:05:27,039 --> 00:05:34,060
seconds and then<font color="#E5E5E5"> nothing is left we can</font>

81
00:05:31,720 --> 00:05:38,560
<font color="#E5E5E5">see the life cycle here you actually</font>

82
00:05:34,060 --> 00:05:41,860
<font color="#CCCCCC">develop a function code as any other</font>

83
00:05:38,560 --> 00:05:44,620
function you push it<font color="#CCCCCC"> into a specific</font>

84
00:05:41,860 --> 00:05:46,120
<font color="#E5E5E5">place in the cloud then something</font>

85
00:05:44,620 --> 00:05:48,849
triggers it<font color="#E5E5E5"> we will talk about the</font>

86
00:05:46,120 --> 00:05:50,060
triggers<font color="#E5E5E5"> a bit later and</font><font color="#CCCCCC"> then it's</font>

87
00:05:48,849 --> 00:05:52,610
cleaned

88
00:05:50,060 --> 00:05:55,250
no<font color="#E5E5E5"> traces of what happened of the</font>

89
00:05:52,610 --> 00:05:58,760
parameters of the results of calculation

90
00:05:55,250 --> 00:06:04,700
<font color="#E5E5E5">nothing everything</font><font color="#CCCCCC"> is clean very</font>

91
00:05:58,760 --> 00:06:07,820
<font color="#CCCCCC">short-lived</font><font color="#E5E5E5"> so the benefits we can talk</font>

92
00:06:04,700 --> 00:06:09,229
about scalability<font color="#E5E5E5"> and then we have two</font>

93
00:06:07,820 --> 00:06:12,380
buzzwords both<font color="#CCCCCC"> server less</font><font color="#E5E5E5"> and</font>

94
00:06:09,230 --> 00:06:15,770
scalability<font color="#E5E5E5"> which is great but it is</font>

95
00:06:12,380 --> 00:06:17,450
<font color="#CCCCCC">really scalable</font><font color="#E5E5E5"> when using lambda</font>

96
00:06:15,770 --> 00:06:21,409
functions<font color="#E5E5E5"> it doesn't really matter if</font>

97
00:06:17,450 --> 00:06:23,930
you use one function<font color="#E5E5E5"> an instance of a</font>

98
00:06:21,410 --> 00:06:26,810
function once a day<font color="#CCCCCC"> once a week or</font><font color="#E5E5E5"> you</font>

99
00:06:23,930 --> 00:06:30,229
<font color="#E5E5E5">use one thousand two thousand instances</font>

100
00:06:26,810 --> 00:06:32,570
<font color="#CCCCCC">of a function</font><font color="#E5E5E5"> per second it's not</font><font color="#CCCCCC"> a</font>

101
00:06:30,229 --> 00:06:36,320
problem<font color="#CCCCCC"> it's definitely not</font><font color="#E5E5E5"> your</font><font color="#CCCCCC"> problem</font>

102
00:06:32,570 --> 00:06:38,479
as a user it just happens<font color="#E5E5E5"> and it's very</font>

103
00:06:36,320 --> 00:06:41,570
scalable<font color="#E5E5E5"> and very comfortable and</font>

104
00:06:38,479 --> 00:06:44,240
comfortable<font color="#CCCCCC"> you don't have operation</font>

105
00:06:41,570 --> 00:06:46,490
problems<font color="#E5E5E5"> you don't need to connect any</font>

106
00:06:44,240 --> 00:06:50,060
wires<font color="#CCCCCC"> you</font><font color="#E5E5E5"> don't need to update anything</font>

107
00:06:46,490 --> 00:06:55,010
<font color="#E5E5E5">no patches no memory restrictions just</font>

108
00:06:50,060 --> 00:06:57,710
<font color="#E5E5E5">happens magically</font><font color="#CCCCCC"> on the cloud these</font><font color="#E5E5E5"> two</font>

109
00:06:55,010 --> 00:07:01,190
things the scalability and<font color="#E5E5E5"> no parade no</font>

110
00:06:57,710 --> 00:07:03,739
need for operations results in low cost

111
00:07:01,190 --> 00:07:07,880
<font color="#E5E5E5">we didn't get really into that but to</font>

112
00:07:03,740 --> 00:07:12,500
hear it from a lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> customers the</font>

113
00:07:07,880 --> 00:07:15,409
model of pay<font color="#CCCCCC"> for what you use it makes</font>

114
00:07:12,500 --> 00:07:20,000
everything cheaper also<font color="#CCCCCC"> the ability to</font>

115
00:07:15,410 --> 00:07:22,630
move sometimes<font color="#E5E5E5"> your</font><font color="#CCCCCC"> work into</font><font color="#E5E5E5"> less</font>

116
00:07:20,000 --> 00:07:25,190
<font color="#CCCCCC">stress sometimes</font><font color="#E5E5E5"> makes it even cheaper</font>

117
00:07:22,630 --> 00:07:27,469
so these are the<font color="#CCCCCC"> benefits and this</font><font color="#E5E5E5"> is</font>

118
00:07:25,190 --> 00:07:30,080
why the industry<font color="#CCCCCC"> is going though</font><font color="#E5E5E5"> we also</font>

119
00:07:27,470 --> 00:07:32,510
have the downsides<font color="#E5E5E5"> the downside</font><font color="#CCCCCC"> one</font>

120
00:07:30,080 --> 00:07:34,580
<font color="#E5E5E5">downside is the we see a new paradigm</font>

121
00:07:32,510 --> 00:07:36,889
here it's a<font color="#E5E5E5"> problem</font><font color="#CCCCCC"> sometimes for</font>

122
00:07:34,580 --> 00:07:38,359
developers<font color="#CCCCCC"> who needs to</font><font color="#E5E5E5"> think a bit</font>

123
00:07:36,889 --> 00:07:40,729
<font color="#CCCCCC">differently</font><font color="#E5E5E5"> when they're implementing</font>

124
00:07:38,360 --> 00:07:43,610
<font color="#E5E5E5">things it's a problem sometimes for</font>

125
00:07:40,729 --> 00:07:48,620
architects<font color="#E5E5E5"> they need to design their new</font>

126
00:07:43,610 --> 00:07:51,020
systems<font color="#E5E5E5"> in a different way less less</font>

127
00:07:48,620 --> 00:07:55,190
stateful<font color="#CCCCCC"> I mean it's more stateless and</font>

128
00:07:51,020 --> 00:07:57,139
there's no classic back-end anymore and

129
00:07:55,190 --> 00:07:59,570
sometimes<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> problem for</font><font color="#E5E5E5"> the</font>

130
00:07:57,139 --> 00:08:00,880
companies themselves who have<font color="#E5E5E5"> sometimes</font>

131
00:07:59,570 --> 00:08:04,180
difficult

132
00:08:00,880 --> 00:08:06,760
it's hard<font color="#E5E5E5"> for them to</font><font color="#CCCCCC"> move to new</font>

133
00:08:04,180 --> 00:08:11,590
technologies and adopt new new ways of

134
00:08:06,760 --> 00:08:15,610
work<font color="#CCCCCC"> it's also slower there is sometimes</font>

135
00:08:11,590 --> 00:08:19,109
<font color="#E5E5E5">some overhead when when the count is</font>

136
00:08:15,610 --> 00:08:22,060
pushed to the<font color="#CCCCCC"> cloud in the</font><font color="#E5E5E5"> beginning and</font>

137
00:08:19,110 --> 00:08:25,270
every time it's triggered<font color="#E5E5E5"> it needs to be</font>

138
00:08:22,060 --> 00:08:28,240
pushed to a new container<font color="#E5E5E5"> most services</font>

139
00:08:25,270 --> 00:08:33,069
offer some sort of caching<font color="#E5E5E5"> for</font><font color="#CCCCCC"> that but</font>

140
00:08:28,240 --> 00:08:35,820
still<font color="#E5E5E5"> there is sometimes not big but</font>

141
00:08:33,070 --> 00:08:38,880
overheads<font color="#E5E5E5"> which</font><font color="#CCCCCC"> makes the process slower</font>

142
00:08:35,820 --> 00:08:41,919
<font color="#E5E5E5">and this is something</font><font color="#CCCCCC"> to think about</font>

143
00:08:38,880 --> 00:08:44,080
<font color="#CCCCCC">monitoring</font><font color="#E5E5E5"> is terrible monitoring is not</font>

144
00:08:41,919 --> 00:08:46,660
<font color="#E5E5E5">really possible</font><font color="#CCCCCC"> you're moving</font><font color="#E5E5E5"> from a</font>

145
00:08:44,080 --> 00:08:48,790
place<font color="#CCCCCC"> where</font><font color="#E5E5E5"> you could log everything</font><font color="#CCCCCC"> and</font>

146
00:08:46,660 --> 00:08:55,180
monitor everything<font color="#E5E5E5"> from one server or</font>

147
00:08:48,790 --> 00:08:58,000
one<font color="#E5E5E5"> one batch of servers to to a</font>

148
00:08:55,180 --> 00:09:01,180
situation<font color="#E5E5E5"> when</font><font color="#CCCCCC"> the processes are not</font>

149
00:08:58,000 --> 00:09:04,330
<font color="#E5E5E5">running on the same server sometimes not</font>

150
00:09:01,180 --> 00:09:06,010
<font color="#E5E5E5">even on the same continent so monitoring</font>

151
00:09:04,330 --> 00:09:08,470
is<font color="#E5E5E5"> really tough logging is really tough</font>

152
00:09:06,010 --> 00:09:13,360
this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> one of the biggest issues at the</font>

153
00:09:08,470 --> 00:09:18,670
<font color="#CCCCCC">moment that are</font><font color="#E5E5E5"> trying let's try to be</font>

154
00:09:13,360 --> 00:09:20,350
to be solved by<font color="#E5E5E5"> the solution givers and</font>

155
00:09:18,670 --> 00:09:26,260
<font color="#E5E5E5">the last thing is the platform dependent</font>

156
00:09:20,350 --> 00:09:29,830
<font color="#E5E5E5">issue if you go and adopt Amazon for</font>

157
00:09:26,260 --> 00:09:33,490
example<font color="#E5E5E5"> as your</font><font color="#CCCCCC"> platform you will</font><font color="#E5E5E5"> have</font>

158
00:09:29,830 --> 00:09:37,570
really<font color="#CCCCCC"> hard time later moving</font><font color="#E5E5E5"> to Google</font>

159
00:09:33,490 --> 00:09:41,350
<font color="#E5E5E5">or Microsoft or IBM especially if you're</font>

160
00:09:37,570 --> 00:09:44,050
using all the all the other services as

161
00:09:41,350 --> 00:09:49,390
well for example<font color="#CCCCCC"> the s3 and</font><font color="#E5E5E5"> buckets and</font>

162
00:09:44,050 --> 00:09:51,219
all that<font color="#E5E5E5"> so it's kind of considered some</font>

163
00:09:49,390 --> 00:09:53,110
sort<font color="#CCCCCC"> of marriage to the specific</font>

164
00:09:51,220 --> 00:09:57,070
<font color="#CCCCCC">platform and it's not really easy</font><font color="#E5E5E5"> to</font>

165
00:09:53,110 --> 00:09:59,140
move so these are the downsides let's

166
00:09:57,070 --> 00:10:00,970
see what we have<font color="#CCCCCC"> out there</font><font color="#E5E5E5"> today we have</font>

167
00:09:59,140 --> 00:10:04,550
the<font color="#E5E5E5"> commercial solutions that most of</font>

168
00:10:00,970 --> 00:10:07,430
you probably<font color="#CCCCCC"> know Google has one</font>

169
00:10:04,550 --> 00:10:11,420
Microsoft<font color="#CCCCCC"> an IBM also</font><font color="#E5E5E5"> many open-source</font>

170
00:10:07,430 --> 00:10:14,329
solutions<font color="#E5E5E5"> function give start</font><font color="#CCCCCC"> iron</font>

171
00:10:11,420 --> 00:10:18,199
<font color="#E5E5E5">factions each one of them has their own</font>

172
00:10:14,330 --> 00:10:21,880
pros their own cons but it really<font color="#E5E5E5"> shows</font>

173
00:10:18,200 --> 00:10:25,880
that<font color="#CCCCCC"> serverless</font><font color="#E5E5E5"> is here to stay it's</font>

174
00:10:21,880 --> 00:10:31,100
<font color="#E5E5E5">it's adopted by both both</font><font color="#CCCCCC"> the server</font>

175
00:10:25,880 --> 00:10:36,110
givers and users<font color="#E5E5E5"> and vendors</font><font color="#CCCCCC"> and it's</font>

176
00:10:31,100 --> 00:10:40,220
here to stay<font color="#CCCCCC"> for sure we wanted</font><font color="#E5E5E5"> to take</font>

177
00:10:36,110 --> 00:10:43,190
<font color="#CCCCCC">focus on one specific solution</font><font color="#E5E5E5"> because</font>

178
00:10:40,220 --> 00:10:46,310
<font color="#E5E5E5">we wanted to create some demos so we</font>

179
00:10:43,190 --> 00:10:52,070
compared them and compared to<font color="#CCCCCC"> Google and</font>

180
00:10:46,310 --> 00:10:56,000
<font color="#E5E5E5">and Microsoft Azure Amazon has the AWS</font>

181
00:10:52,070 --> 00:10:59,560
lambda it's most common it's considered

182
00:10:56,000 --> 00:11:02,180
relatively<font color="#E5E5E5"> mature it's here since 2014</font>

183
00:10:59,560 --> 00:11:06,260
<font color="#E5E5E5">we have a really wide language coverage</font>

184
00:11:02,180 --> 00:11:09,530
and we decided<font color="#CCCCCC"> that our demo our proof</font>

185
00:11:06,260 --> 00:11:15,439
of concept will be<font color="#E5E5E5"> focused on that</font><font color="#CCCCCC"> so</font>

186
00:11:09,530 --> 00:11:18,730
let's talk about<font color="#CCCCCC"> lambdas they support a</font>

187
00:11:15,440 --> 00:11:23,960
lot<font color="#CCCCCC"> of languages including</font><font color="#E5E5E5"> nodejs Python</font>

188
00:11:18,730 --> 00:11:25,400
java.net core they introduced go in the

189
00:11:23,960 --> 00:11:26,530
<font color="#E5E5E5">beginning of this year which was really</font>

190
00:11:25,400 --> 00:11:30,620
<font color="#CCCCCC">fun</font>

191
00:11:26,530 --> 00:11:34,130
and we can see that<font color="#CCCCCC"> they have</font><font color="#E5E5E5"> two two</font>

192
00:11:30,620 --> 00:11:36,080
ways of triggering functions and the

193
00:11:34,130 --> 00:11:40,430
lambda functions it can<font color="#CCCCCC"> be either</font>

194
00:11:36,080 --> 00:11:42,260
triggered explicitly by an API just an

195
00:11:40,430 --> 00:11:46,010
API<font color="#CCCCCC"> that calls the lambda function and</font>

196
00:11:42,260 --> 00:11:50,780
runs it and also<font color="#E5E5E5"> by using any other</font>

197
00:11:46,010 --> 00:11:55,840
service<font color="#E5E5E5"> by Amazon it can be as noted</font>

198
00:11:50,780 --> 00:11:59,810
<font color="#CCCCCC">here s3 update or</font><font color="#E5E5E5"> IOT button all the</font>

199
00:11:55,840 --> 00:12:03,860
code<font color="#E5E5E5"> commits AWS or CLI tasks or</font>

200
00:11:59,810 --> 00:12:06,819
whatever<font color="#E5E5E5"> needed you can use it as a</font>

201
00:12:03,860 --> 00:12:10,250
trigger which<font color="#CCCCCC"> is extremely</font><font color="#E5E5E5"> comfortable</font>

202
00:12:06,820 --> 00:12:13,250
<font color="#CCCCCC">the common use cases for that</font><font color="#E5E5E5"> is a lot</font>

203
00:12:10,250 --> 00:12:15,470
of mobile functionalities<font color="#E5E5E5"> back end back</font>

204
00:12:13,250 --> 00:12:17,119
in not in the<font color="#E5E5E5"> classical way but in a</font>

205
00:12:15,470 --> 00:12:20,339
<font color="#CCCCCC">service</font><font color="#E5E5E5"> way</font>

206
00:12:17,119 --> 00:12:23,910
IOT<font color="#CCCCCC"> beckoned we see it a lot in boats</font>

207
00:12:20,339 --> 00:12:26,879
and<font color="#CCCCCC"> jet boats scheduled tasks</font><font color="#E5E5E5"> because of</font>

208
00:12:23,910 --> 00:12:30,059
the triggering anything that is really

209
00:12:26,879 --> 00:12:33,689
high consumption of<font color="#CCCCCC"> CPU file and image</font>

210
00:12:30,059 --> 00:12:37,319
<font color="#CCCCCC">processing distributed computing by</font>

211
00:12:33,689 --> 00:12:39,389
<font color="#E5E5E5">fathers or machine learnings next time</font>

212
00:12:37,319 --> 00:12:43,378
you need<font color="#E5E5E5"> to</font><font color="#CCCCCC"> crack a</font><font color="#E5E5E5"> password</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is</font>

213
00:12:39,389 --> 00:12:48,319
probably one of the<font color="#E5E5E5"> best ways and</font><font color="#CCCCCC"> the</font>

214
00:12:43,379 --> 00:12:50,519
<font color="#CCCCCC">lexer</font><font color="#E5E5E5"> skills so</font><font color="#CCCCCC"> solace</font><font color="#E5E5E5"> is great right</font>

215
00:12:48,319 --> 00:12:55,639
<font color="#E5E5E5">what else</font><font color="#CCCCCC"> could you</font><font color="#E5E5E5"> ask for</font>

216
00:12:50,519 --> 00:13:01,790
well<font color="#E5E5E5"> security and this is why we're</font><font color="#CCCCCC"> here</font>

217
00:12:55,639 --> 00:13:04,980
<font color="#CCCCCC">when talking to developers when we find</font>

218
00:13:01,790 --> 00:13:06,799
problems in the code<font color="#E5E5E5"> for</font><font color="#CCCCCC"> example code</font>

219
00:13:04,980 --> 00:13:10,019
execution or code injection

220
00:13:06,799 --> 00:13:13,889
we often<font color="#CCCCCC"> hear yeah but it</font><font color="#E5E5E5"> doesn't</font><font color="#CCCCCC"> matter</font>

221
00:13:10,019 --> 00:13:16,949
<font color="#E5E5E5">because it's service and when we say so</font>

222
00:13:13,889 --> 00:13:20,100
what<font color="#E5E5E5"> they say well there are two</font><font color="#CCCCCC"> reasons</font>

223
00:13:16,949 --> 00:13:22,549
<font color="#CCCCCC">the</font><font color="#E5E5E5"> first</font><font color="#CCCCCC"> reason we hear a lot is that</font>

224
00:13:20,100 --> 00:13:25,559
<font color="#CCCCCC">the potential</font><font color="#E5E5E5"> damage is</font><font color="#CCCCCC"> very limited</font>

225
00:13:22,549 --> 00:13:29,279
<font color="#CCCCCC">when the</font><font color="#E5E5E5"> function is running on its own</font>

226
00:13:25,559 --> 00:13:32,279
environment<font color="#CCCCCC"> very</font><font color="#E5E5E5"> limited we can even</font>

227
00:13:29,279 --> 00:13:36,839
<font color="#E5E5E5">call it sandbox the potential of damage</font>

228
00:13:32,279 --> 00:13:38,759
is very<font color="#E5E5E5"> limited</font><font color="#CCCCCC"> the second thing is that</font>

229
00:13:36,839 --> 00:13:42,209
the environment<font color="#CCCCCC"> is disposed after run</font><font color="#E5E5E5"> we</font>

230
00:13:38,759 --> 00:13:45,269
just saw that<font color="#E5E5E5"> right so nothing is stored</font>

231
00:13:42,209 --> 00:13:47,849
nothing is persistent

232
00:13:45,269 --> 00:13:51,269
you can damage<font color="#CCCCCC"> very</font><font color="#E5E5E5"> little for very</font>

233
00:13:47,850 --> 00:13:55,350
<font color="#CCCCCC">little time</font><font color="#E5E5E5"> and that's it this actually</font>

234
00:13:51,269 --> 00:14:01,319
<font color="#CCCCCC">makes</font><font color="#E5E5E5"> serverless the cue for everything</font>

235
00:13:55,350 --> 00:14:03,629
security related so no actually not we

236
00:14:01,319 --> 00:14:05,939
wanted to show it's<font color="#E5E5E5"> not true because we</font>

237
00:14:03,629 --> 00:14:07,949
started to get<font color="#E5E5E5"> that</font><font color="#CCCCCC"> a lot</font>

238
00:14:05,939 --> 00:14:10,889
we want to exploit a code injection

239
00:14:07,949 --> 00:14:15,839
vulnerability something that many<font color="#E5E5E5"> people</font>

240
00:14:10,889 --> 00:14:17,699
<font color="#E5E5E5">would</font><font color="#CCCCCC"> say</font><font color="#E5E5E5"> doesn't</font><font color="#CCCCCC"> matter</font><font color="#E5E5E5"> on</font><font color="#CCCCCC"> service in</font>

241
00:14:15,839 --> 00:14:22,319
<font color="#E5E5E5">the lambda function and we want to</font>

242
00:14:17,699 --> 00:14:25,589
<font color="#E5E5E5">create code persistent by backdoor this</font>

243
00:14:22,319 --> 00:14:27,649
was the<font color="#CCCCCC"> challenge</font><font color="#E5E5E5"> you can</font><font color="#CCCCCC"> see below</font><font color="#E5E5E5"> a</font>

244
00:14:25,589 --> 00:14:32,689
link

245
00:14:27,649 --> 00:14:34,910
to talk given by rich Jones<font color="#CCCCCC"> this was one</font>

246
00:14:32,689 --> 00:14:36,769
of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> inspirations for</font><font color="#E5E5E5"> what we did and</font>

247
00:14:34,910 --> 00:14:40,629
we had some more materials there<font color="#CCCCCC"> you</font>

248
00:14:36,769 --> 00:14:42,589
should read it<font color="#E5E5E5"> so challenge accepted</font>

249
00:14:40,629 --> 00:14:48,559
let's see how we take<font color="#CCCCCC"> a code injection</font>

250
00:14:42,589 --> 00:14:52,009
<font color="#CCCCCC">and make</font><font color="#E5E5E5"> it a viral infection</font><font color="#CCCCCC"> so let me</font>

251
00:14:48,559 --> 00:14:55,368
introduce you<font color="#CCCCCC"> to the playground using</font>

252
00:14:52,009 --> 00:14:59,689
AWS lambdas<font color="#E5E5E5"> we build a very small and</font>

253
00:14:55,369 --> 00:15:02,689
not<font color="#E5E5E5"> complex three functions one is main</font>

254
00:14:59,689 --> 00:15:07,429
that calls<font color="#E5E5E5"> to other functions one is</font>

255
00:15:02,689 --> 00:15:09,439
users one is cars<font color="#CCCCCC"> I will show</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> you</font>

256
00:15:07,429 --> 00:15:11,119
if there are any UI people in the

257
00:15:09,439 --> 00:15:17,569
audience<font color="#E5E5E5"> I'm sorry</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is not our</font>

258
00:15:11,119 --> 00:15:19,369
strong part<font color="#E5E5E5"> I said I'm sorry</font><font color="#CCCCCC"> okay so we</font>

259
00:15:17,569 --> 00:15:22,579
<font color="#E5E5E5">can see</font><font color="#CCCCCC"> the URL</font><font color="#E5E5E5"> it's being parsed by</font>

260
00:15:19,369 --> 00:15:26,959
main the resources either<font color="#E5E5E5"> causal users</font>

261
00:15:22,579 --> 00:15:29,269
are here you can see them<font color="#E5E5E5"> here</font><font color="#CCCCCC"> and then</font>

262
00:15:26,959 --> 00:15:33,138
we<font color="#E5E5E5"> use a parameter</font><font color="#CCCCCC"> to say which source</font>

263
00:15:29,269 --> 00:15:36,679
we want so if we<font color="#E5E5E5"> take here it was cars</font><font color="#CCCCCC"> 1</font>

264
00:15:33,139 --> 00:15:40,929
we can see it it's being called<font color="#E5E5E5"> here and</font>

265
00:15:36,679 --> 00:15:48,470
then user 1 is here this<font color="#E5E5E5"> is how it works</font>

266
00:15:40,929 --> 00:15:53,929
users<font color="#CCCCCC"> 1 users to resource is user</font>

267
00:15:48,470 --> 00:15:56,920
parameter<font color="#E5E5E5"> is</font><font color="#CCCCCC"> 2 if you go to cars</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> is</font>

268
00:15:53,929 --> 00:16:01,040
<font color="#E5E5E5">actually what it's doing nothing</font><font color="#CCCCCC"> else</font>

269
00:15:56,920 --> 00:16:04,660
<font color="#CCCCCC">very basic</font><font color="#E5E5E5"> not very interesting but it's</font>

270
00:16:01,040 --> 00:16:08,449
a model of way way more<font color="#E5E5E5"> complex</font>

271
00:16:04,660 --> 00:16:09,139
implementations out there<font color="#E5E5E5"> so what is</font><font color="#CCCCCC"> the</font>

272
00:16:08,449 --> 00:16:12,109
code injection

273
00:16:09,139 --> 00:16:17,420
I love<font color="#E5E5E5"> quoting</font><font color="#CCCCCC"> OS especially on all</font>

274
00:16:12,110 --> 00:16:19,610
<font color="#E5E5E5">events so</font><font color="#CCCCCC"> it's an attack</font><font color="#E5E5E5"> type which</font>

275
00:16:17,420 --> 00:16:21,829
consists of injection injecting code

276
00:16:19,610 --> 00:16:24,470
that is then executed by the application

277
00:16:21,829 --> 00:16:28,929
<font color="#E5E5E5">I'm pretty sure most of you knows what</font>

278
00:16:24,470 --> 00:16:33,049
<font color="#CCCCCC">it</font><font color="#E5E5E5"> means so we added a code injection</font>

279
00:16:28,929 --> 00:16:37,610
<font color="#E5E5E5">the same one that you can see</font><font color="#CCCCCC"> here so</font>

280
00:16:33,049 --> 00:16:39,970
you can see that resources and

281
00:16:37,610 --> 00:16:43,060
parameters<font color="#E5E5E5"> are parsed</font>

282
00:16:39,970 --> 00:16:46,209
and concatenated into<font color="#E5E5E5"> code both</font><font color="#CCCCCC"> our</font>

283
00:16:43,060 --> 00:16:50,410
based on input in the<font color="#CCCCCC"> URL</font><font color="#E5E5E5"> and then it is</font>

284
00:16:46,209 --> 00:16:52,599
run the code by evil<font color="#CCCCCC"> most of you should</font>

285
00:16:50,410 --> 00:16:55,660
move uncomfortably when confronting this

286
00:16:52,600 --> 00:16:58,389
kind<font color="#E5E5E5"> of code twice once is because it's</font>

287
00:16:55,660 --> 00:17:00,670
probably<font color="#E5E5E5"> the worst way to do that and</font>

288
00:16:58,389 --> 00:17:04,419
the second time is because we know that

289
00:17:00,670 --> 00:17:08,438
<font color="#E5E5E5">it happens</font><font color="#CCCCCC"> a lot</font><font color="#E5E5E5"> out there</font><font color="#CCCCCC"> we see it</font>

290
00:17:04,419 --> 00:17:12,490
<font color="#E5E5E5">every day this is how code looks</font><font color="#CCCCCC"> like so</font>

291
00:17:08,439 --> 00:17:14,169
we have a code injection<font color="#E5E5E5"> and developer</font>

292
00:17:12,490 --> 00:17:16,569
says that it doesn't<font color="#CCCCCC"> really matter</font>

293
00:17:14,169 --> 00:17:21,150
because nothing<font color="#E5E5E5"> can happen again</font>

294
00:17:16,569 --> 00:17:26,260
<font color="#CCCCCC">we very</font><font color="#E5E5E5"> short-lived nothing persistent</font>

295
00:17:21,150 --> 00:17:29,169
so let's see what we can<font color="#E5E5E5"> find on this</font>

296
00:17:26,260 --> 00:17:34,120
soon<font color="#CCCCCC"> to die instance</font><font color="#E5E5E5"> we went to the</font>

297
00:17:29,169 --> 00:17:36,789
documentation<font color="#E5E5E5"> of</font><font color="#CCCCCC"> lambda</font><font color="#E5E5E5"> lambda has a lot</font>

298
00:17:34,120 --> 00:17:39,309
of internal environment info we found

299
00:17:36,789 --> 00:17:41,740
one interesting<font color="#E5E5E5"> and it's called lambda</font>

300
00:17:39,309 --> 00:17:43,990
<font color="#CCCCCC">tasket it contains the path to your</font>

301
00:17:41,740 --> 00:17:45,730
<font color="#CCCCCC">lambda function code that's it</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> is</font>

302
00:17:43,990 --> 00:17:50,080
the function where all your<font color="#E5E5E5"> lambda</font>

303
00:17:45,730 --> 00:17:53,919
functions live<font color="#E5E5E5"> not only</font><font color="#CCCCCC"> the one</font><font color="#E5E5E5"> that you</font>

304
00:17:50,080 --> 00:17:57,908
currently<font color="#E5E5E5"> see but the entire tree so</font>

305
00:17:53,919 --> 00:18:01,600
this<font color="#E5E5E5"> is rather interesting</font><font color="#CCCCCC"> and we</font><font color="#E5E5E5"> tried</font>

306
00:17:57,909 --> 00:18:04,179
that<font color="#E5E5E5"> we have a</font><font color="#CCCCCC"> propelled payload for</font>

307
00:18:01,600 --> 00:18:07,120
code injection<font color="#E5E5E5"> you can see the encoded</font>

308
00:18:04,179 --> 00:18:08,950
in the decoded code here because we

309
00:18:07,120 --> 00:18:12,939
obviously<font color="#CCCCCC"> use</font><font color="#E5E5E5"> the encoded one but I want</font>

310
00:18:08,950 --> 00:18:15,400
you<font color="#CCCCCC"> to see so we use the resource cows</font>

311
00:18:12,940 --> 00:18:18,669
we use the parameter 1 and then we

312
00:18:15,400 --> 00:18:28,020
escape it<font color="#E5E5E5"> and do whatever we want and we</font>

313
00:18:18,669 --> 00:18:28,020
get the parameter lambda<font color="#CCCCCC"> task route and</font>

314
00:18:34,000 --> 00:18:40,400
excellent so we have the<font color="#CCCCCC"> puff</font><font color="#E5E5E5"> of our</font>

315
00:18:37,400 --> 00:18:44,210
<font color="#E5E5E5">task very simple not very surprising</font>

316
00:18:40,400 --> 00:18:46,970
<font color="#CCCCCC">because</font><font color="#E5E5E5"> actually</font><font color="#CCCCCC"> our task is the default</font>

317
00:18:44,210 --> 00:18:51,110
path<font color="#E5E5E5"> but it can obviously be changed and</font>

318
00:18:46,970 --> 00:18:53,960
<font color="#E5E5E5">we</font><font color="#CCCCCC"> can find it so okay we can get some</font>

319
00:18:51,110 --> 00:18:57,290
information<font color="#E5E5E5"> about that</font>

320
00:18:53,960 --> 00:19:01,040
what if<font color="#CCCCCC"> who</font><font color="#E5E5E5"> actually can now that we</font>

321
00:18:57,290 --> 00:19:05,620
<font color="#E5E5E5">know this path we can actually take all</font>

322
00:19:01,040 --> 00:19:10,940
the<font color="#CCCCCC"> information in</font><font color="#E5E5E5"> it all the functions</font>

323
00:19:05,620 --> 00:19:13,250
maybe we can<font color="#CCCCCC"> I don't know zip them or</font>

324
00:19:10,940 --> 00:19:17,930
tell them<font color="#E5E5E5"> and send them</font><font color="#CCCCCC"> to our own place</font>

325
00:19:13,250 --> 00:19:22,670
<font color="#E5E5E5">so including just by</font><font color="#CCCCCC"> checkmarks demo</font><font color="#E5E5E5"> we</font>

326
00:19:17,930 --> 00:19:25,040
open<font color="#E5E5E5"> check mark sack and this is what we</font>

327
00:19:22,670 --> 00:19:26,690
want<font color="#E5E5E5"> to do we want</font><font color="#CCCCCC"> to be able indeed</font>

328
00:19:25,040 --> 00:19:29,840
<font color="#CCCCCC">it's</font><font color="#E5E5E5"> short-lived what we want to be able</font>

329
00:19:26,690 --> 00:19:33,020
<font color="#E5E5E5">to look at the code later also as</font>

330
00:19:29,840 --> 00:19:35,990
attackers<font color="#E5E5E5"> it can be very</font><font color="#CCCCCC"> useful to</font><font color="#E5E5E5"> look</font>

331
00:19:33,020 --> 00:19:38,480
at<font color="#E5E5E5"> the code itself so we</font><font color="#CCCCCC"> did</font><font color="#E5E5E5"> just that</font>

332
00:19:35,990 --> 00:19:42,410
here is the payload again the important

333
00:19:38,480 --> 00:19:44,540
parts are<font color="#E5E5E5"> in red you can see</font><font color="#CCCCCC"> the</font>

334
00:19:42,410 --> 00:19:51,020
compression here<font color="#E5E5E5"> and then we just curl</font>

335
00:19:44,540 --> 00:19:56,920
it to our new home this<font color="#E5E5E5"> is it</font><font color="#CCCCCC"> it's empty</font>

336
00:19:51,020 --> 00:19:56,920
at the moment now we go<font color="#CCCCCC"> back</font><font color="#E5E5E5"> to the demo</font>

337
00:19:57,160 --> 00:20:07,640
put the payload in successfully and then

338
00:20:02,420 --> 00:20:13,030
when we<font color="#E5E5E5"> refresh we</font><font color="#CCCCCC"> can see Hotel opening</font>

339
00:20:07,640 --> 00:20:17,180
it we can see<font color="#E5E5E5"> the entire thing</font><font color="#CCCCCC"> and</font>

340
00:20:13,030 --> 00:20:20,510
actually<font color="#E5E5E5"> immediately you can see some</font>

341
00:20:17,180 --> 00:20:23,090
really<font color="#E5E5E5"> important things</font><font color="#CCCCCC"> in the for</font>

342
00:20:20,510 --> 00:20:25,850
example the API key<font color="#CCCCCC"> you can lower</font><font color="#E5E5E5"> your</font>

343
00:20:23,090 --> 00:20:33,980
<font color="#E5E5E5">cameras we change the keys so I see you</font>

344
00:20:25,850 --> 00:20:36,830
though<font color="#E5E5E5"> we changed it before but again</font>

345
00:20:33,980 --> 00:20:40,430
this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> very powerful thing to</font><font color="#E5E5E5"> have the</font>

346
00:20:36,830 --> 00:20:42,049
<font color="#E5E5E5">API key and</font><font color="#CCCCCC"> you just got it by</font><font color="#E5E5E5"> a very</font>

347
00:20:40,430 --> 00:20:44,910
<font color="#E5E5E5">short-lived instance</font>

348
00:20:42,049 --> 00:20:47,520
so let's continue<font color="#CCCCCC"> what else can be done</font>

349
00:20:44,910 --> 00:20:51,570
<font color="#CCCCCC">this</font><font color="#E5E5E5"> is nice but it's not what we not</font>

350
00:20:47,520 --> 00:20:54,299
our goal<font color="#E5E5E5"> so back to</font><font color="#CCCCCC"> documentation</font><font color="#E5E5E5"> Amazon</font>

351
00:20:51,570 --> 00:20:54,889
<font color="#E5E5E5">is nice enough to offer some</font><font color="#CCCCCC"> tool boxes</font>

352
00:20:54,299 --> 00:21:01,168
for you

353
00:20:54,890 --> 00:21:03,360
they offer you<font color="#E5E5E5"> the SDK and AWS CLI still</font>

354
00:21:01,169 --> 00:21:07,380
<font color="#E5E5E5">is less</font><font color="#CCCCCC"> relevant to you but the SDK</font><font color="#E5E5E5"> is</font>

355
00:21:03,360 --> 00:21:12,360
very very interesting SDK includes some

356
00:21:07,380 --> 00:21:14,970
functions<font color="#CCCCCC"> that allows you I mean API</font>

357
00:21:12,360 --> 00:21:18,449
that allows you to to list functions<font color="#E5E5E5"> to</font>

358
00:21:14,970 --> 00:21:23,850
deploy<font color="#CCCCCC"> new ones</font><font color="#E5E5E5"> update existing ones and</font>

359
00:21:18,450 --> 00:21:26,280
all of that is invoked<font color="#E5E5E5"> by code now you</font>

360
00:21:23,850 --> 00:21:27,658
have a small voice<font color="#E5E5E5"> in your head telling</font>

361
00:21:26,280 --> 00:21:30,570
you yeah but<font color="#E5E5E5"> you probably need</font><font color="#CCCCCC"> to be</font>

362
00:21:27,659 --> 00:21:32,690
authorized right<font color="#E5E5E5"> yes you're right</font>

363
00:21:30,570 --> 00:21:36,270
it only happens if you have permission

364
00:21:32,690 --> 00:21:39,419
<font color="#E5E5E5">authenticated by AWS profile but we're</font>

365
00:21:36,270 --> 00:21:41,730
also wrong<font color="#E5E5E5"> because when you're</font><font color="#CCCCCC"> running</font>

366
00:21:39,419 --> 00:21:46,559
the lambda function you've already been

367
00:21:41,730 --> 00:21:50,549
authorized<font color="#E5E5E5"> so an extra authentication is</font>

368
00:21:46,559 --> 00:21:53,428
not needed<font color="#E5E5E5"> so every breach you have</font>

369
00:21:50,549 --> 00:21:56,970
<font color="#E5E5E5">after the lambda every vulnerability</font><font color="#CCCCCC"> you</font>

370
00:21:53,429 --> 00:21:59,640
<font color="#CCCCCC">have after</font><font color="#E5E5E5"> the lambda actually started</font>

371
00:21:56,970 --> 00:22:05,720
running has all the authentication

372
00:21:59,640 --> 00:22:09,120
needed<font color="#E5E5E5"> so this is nice</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> let's update</font>

373
00:22:05,720 --> 00:22:10,230
some functions<font color="#E5E5E5"> now the reason we were</font><font color="#CCCCCC"> so</font>

374
00:22:09,120 --> 00:22:13,010
excited<font color="#E5E5E5"> about it</font>

375
00:22:10,230 --> 00:22:19,340
<font color="#E5E5E5">because we didn't</font><font color="#CCCCCC"> really know how we can</font>

376
00:22:13,010 --> 00:22:21,720
make<font color="#CCCCCC"> persistent vulnerabilities</font><font color="#E5E5E5"> because</font>

377
00:22:19,340 --> 00:22:23,250
you don't<font color="#E5E5E5"> have a database you don't have</font>

378
00:22:21,720 --> 00:22:26,460
a file<font color="#CCCCCC"> system you</font><font color="#E5E5E5"> don't have anything</font>

379
00:22:23,250 --> 00:22:28,770
<font color="#E5E5E5">but actually we're going to put our</font>

380
00:22:26,460 --> 00:22:30,179
vulnerabilities<font color="#CCCCCC"> and the persistence is</font>

381
00:22:28,770 --> 00:22:32,639
going to be in the code<font color="#E5E5E5"> itself we're</font>

382
00:22:30,179 --> 00:22:36,900
<font color="#CCCCCC">going to change the code and make it</font>

383
00:22:32,640 --> 00:22:38,090
store the vulnerabilities so you can see

384
00:22:36,900 --> 00:22:42,659
the update<font color="#E5E5E5"> here</font>

385
00:22:38,090 --> 00:22:45,480
what<font color="#E5E5E5"> this is</font><font color="#CCCCCC"> doing going over all the</font>

386
00:22:42,659 --> 00:22:47,820
<font color="#E5E5E5">functions in</font><font color="#CCCCCC"> the in the</font><font color="#E5E5E5"> path we don't</font>

387
00:22:45,480 --> 00:22:50,190
even<font color="#E5E5E5"> have to know which functions are</font>

388
00:22:47,820 --> 00:22:52,220
<font color="#E5E5E5">well I'm just going through them and</font>

389
00:22:50,190 --> 00:22:54,080
then<font color="#E5E5E5"> update them</font>

390
00:22:52,220 --> 00:23:00,039
with our own malicious code<font color="#E5E5E5"> that we'll</font>

391
00:22:54,080 --> 00:23:03,470
see a bit later<font color="#CCCCCC"> let's see how it goes</font>

392
00:23:00,039 --> 00:23:11,440
this<font color="#E5E5E5"> is how it looks and then</font><font color="#CCCCCC"> we put the</font>

393
00:23:03,470 --> 00:23:11,440
payload successfully

394
00:23:13,260 --> 00:23:21,030
yay so just by running the payload on

395
00:23:18,240 --> 00:23:27,060
the cars<font color="#E5E5E5"> we can see that</font><font color="#CCCCCC"> we infected</font>

396
00:23:21,030 --> 00:23:29,240
both cars<font color="#E5E5E5"> and main can you see that</font><font color="#CCCCCC"> the</font>

397
00:23:27,060 --> 00:23:31,800
reason is again<font color="#CCCCCC"> that we went over</font>

398
00:23:29,240 --> 00:23:35,610
iterated<font color="#CCCCCC"> over all the functions under</font>

399
00:23:31,800 --> 00:23:36,450
the<font color="#E5E5E5"> path and infected them so this</font><font color="#CCCCCC"> is</font>

400
00:23:35,610 --> 00:23:40,439
<font color="#CCCCCC">pretty nice</font>

401
00:23:36,450 --> 00:23:42,960
all we did<font color="#E5E5E5"> in the code was</font><font color="#CCCCCC"> actually just</font>

402
00:23:40,440 --> 00:23:45,240
adding<font color="#E5E5E5"> strings but you can obviously</font>

403
00:23:42,960 --> 00:23:47,930
understand that if we changed the code

404
00:23:45,240 --> 00:23:51,390
we could change it<font color="#CCCCCC"> to</font><font color="#E5E5E5"> anything we want</font>

405
00:23:47,930 --> 00:23:53,730
<font color="#CCCCCC">so this</font><font color="#E5E5E5"> is a serious thing</font><font color="#CCCCCC"> and we</font>

406
00:23:51,390 --> 00:23:58,110
managed to get persistency<font color="#E5E5E5"> which is</font>

407
00:23:53,730 --> 00:24:00,570
great but it's a one-time infection it's

408
00:23:58,110 --> 00:24:04,169
not really what we call a virus or viral

409
00:24:00,570 --> 00:24:07,080
infection<font color="#E5E5E5"> it's a</font><font color="#CCCCCC"> one-time infection when</font>

410
00:24:04,170 --> 00:24:08,820
if the<font color="#E5E5E5"> function is cleaned or updated or</font>

411
00:24:07,080 --> 00:24:10,800
anything like<font color="#E5E5E5"> that</font><font color="#CCCCCC"> it will stay clean</font>

412
00:24:08,820 --> 00:24:14,189
<font color="#CCCCCC">and we</font><font color="#E5E5E5"> don't want to reinfect</font>

413
00:24:10,800 --> 00:24:17,730
<font color="#E5E5E5">all the time</font><font color="#CCCCCC"> let's see how it's done we</font>

414
00:24:14,190 --> 00:24:20,420
<font color="#E5E5E5">implemented</font><font color="#CCCCCC"> a reset</font><font color="#E5E5E5"> function and when we</font>

415
00:24:17,730 --> 00:24:20,420
<font color="#E5E5E5">reset cars</font>

416
00:24:25,960 --> 00:24:33,850
we can see that<font color="#E5E5E5"> Maine is still infected</font>

417
00:24:28,090 --> 00:24:36,309
<font color="#E5E5E5">but cars is not so we had a new goal the</font>

418
00:24:33,850 --> 00:24:39,219
goal is persistent infection and cross

419
00:24:36,309 --> 00:24:41,860
contamination<font color="#E5E5E5"> the reason we wanted to do</font>

420
00:24:39,220 --> 00:24:45,580
this cross contamination is that this

421
00:24:41,860 --> 00:24:46,990
way<font color="#E5E5E5"> each function actually checks the</font>

422
00:24:45,580 --> 00:24:52,289
other functions<font color="#E5E5E5"> make sure it's</font>

423
00:24:46,990 --> 00:24:55,539
contaminated<font color="#E5E5E5"> if it's not reinfection</font>

424
00:24:52,289 --> 00:24:59,470
<font color="#E5E5E5">which causes viral infection with a</font>

425
00:24:55,539 --> 00:25:02,440
<font color="#E5E5E5">cross contamination so let's see the</font>

426
00:24:59,470 --> 00:25:05,890
<font color="#E5E5E5">last demo in this demo we</font><font color="#CCCCCC"> have again the</font>

427
00:25:02,440 --> 00:25:09,600
main cars and users cows<font color="#CCCCCC"> in Maine are</font>

428
00:25:05,890 --> 00:25:12,669
clean we inject the payload into users

429
00:25:09,600 --> 00:25:16,870
when<font color="#CCCCCC"> meinen cars are still clean when</font>

430
00:25:12,669 --> 00:25:20,830
someone loads users<font color="#E5E5E5"> it infects</font><font color="#CCCCCC"> meinen</font>

431
00:25:16,870 --> 00:25:24,340
cars everything is now infected<font color="#E5E5E5"> it could</font>

432
00:25:20,830 --> 00:25:27,699
be 50 70<font color="#E5E5E5"> 1000 functions it doesn't</font>

433
00:25:24,340 --> 00:25:32,559
really matter<font color="#CCCCCC"> and</font><font color="#E5E5E5"> then we we know that</font>

434
00:25:27,700 --> 00:25:35,140
the user developer and or<font color="#E5E5E5"> whatever tries</font>

435
00:25:32,559 --> 00:25:39,250
to clean them but he forgets<font color="#E5E5E5"> one he</font>

436
00:25:35,140 --> 00:25:43,539
forgets the<font color="#E5E5E5"> car function so again when</font>

437
00:25:39,250 --> 00:25:45,640
someone loads car<font color="#CCCCCC"> again</font>

438
00:25:43,539 --> 00:25:48,149
full infection so let's see that

439
00:25:45,640 --> 00:25:48,149
<font color="#E5E5E5">happening</font>

440
00:25:51,080 --> 00:26:00,020
so here we have<font color="#E5E5E5"> payload successfully</font>

441
00:26:00,320 --> 00:26:03,889
someone runs cars

442
00:26:06,190 --> 00:26:14,320
it's clean<font color="#E5E5E5"> but when someone runs users</font>

443
00:26:10,139 --> 00:26:18,820
the infection takes place you can see

444
00:26:14,320 --> 00:26:25,418
the<font color="#E5E5E5"> tusers is already in</font><font color="#CCCCCC"> factored now we</font>

445
00:26:18,820 --> 00:26:30,009
can check<font color="#E5E5E5"> ours again you can see it was</font>

446
00:26:25,419 --> 00:26:31,029
<font color="#E5E5E5">also infected including name now we do</font>

447
00:26:30,009 --> 00:26:33,809
what we did before

448
00:26:31,029 --> 00:26:33,809
who is it<font color="#CCCCCC"> main</font>

449
00:26:41,070 --> 00:26:47,179
only safe users but we<font color="#E5E5E5"> forgot to</font><font color="#CCCCCC"> reset</font>

450
00:26:44,910 --> 00:26:47,180
cars

451
00:26:50,580 --> 00:27:01,529
so everything<font color="#E5E5E5"> looks fine now until</font>

452
00:26:52,890 --> 00:27:04,890
someone<font color="#E5E5E5"> the girls cause it seems like</font>

453
00:27:01,529 --> 00:27:11,700
<font color="#CCCCCC">only</font><font color="#E5E5E5"> cars is infected but if you go back</font>

454
00:27:04,890 --> 00:27:15,390
<font color="#E5E5E5">to users you can see that again every</font>

455
00:27:11,700 --> 00:27:18,779
function under this path is infected

456
00:27:15,390 --> 00:27:20,309
again and voila we<font color="#CCCCCC"> have persistent code</font>

457
00:27:18,779 --> 00:27:24,470
contamination in a non persistent

458
00:27:20,309 --> 00:27:30,690
environment that can<font color="#E5E5E5"> do whatever we want</font>

459
00:27:24,470 --> 00:27:33,299
mission accomplished<font color="#CCCCCC"> let's</font><font color="#E5E5E5"> talk a bit</font>

460
00:27:30,690 --> 00:27:38,940
more<font color="#CCCCCC"> about</font><font color="#E5E5E5"> lambda security before we</font>

461
00:27:33,299 --> 00:27:44,010
finish this so a few more<font color="#E5E5E5"> words</font><font color="#CCCCCC"> lambda</font>

462
00:27:38,940 --> 00:27:47,250
security depends on two main two main

463
00:27:44,010 --> 00:27:49,649
<font color="#CCCCCC">parameters</font><font color="#E5E5E5"> execution</font><font color="#CCCCCC"> roll and</font><font color="#E5E5E5"> V PC</font><font color="#CCCCCC"> the</font>

464
00:27:47,250 --> 00:27:52,080
execution roll means whatever the

465
00:27:49,649 --> 00:27:56,010
<font color="#E5E5E5">function is allowed to do you can get</font>

466
00:27:52,080 --> 00:27:58,860
really into<font color="#CCCCCC"> fine-grain permissions</font>

467
00:27:56,010 --> 00:28:03,840
though<font color="#E5E5E5"> if you if you know it and if you</font>

468
00:27:58,860 --> 00:28:07,320
want to do that<font color="#CCCCCC"> v pc is which virtual</font>

469
00:28:03,840 --> 00:28:10,709
private cloud the lambda function

470
00:28:07,320 --> 00:28:12,870
belongs to and can communicate<font color="#E5E5E5"> with so</font>

471
00:28:10,710 --> 00:28:15,600
if we were looking<font color="#CCCCCC"> at execution rolls</font>

472
00:28:12,870 --> 00:28:21,768
<font color="#CCCCCC">how many of you knows</font><font color="#E5E5E5"> Claudia Claudia</font>

473
00:28:15,600 --> 00:28:25,980
joy yes<font color="#E5E5E5"> okay it's</font><font color="#CCCCCC"> a it's a</font><font color="#E5E5E5"> pretty common</font>

474
00:28:21,769 --> 00:28:30,240
solution for<font color="#E5E5E5"> deployment of nodejs</font>

475
00:28:25,980 --> 00:28:34,789
projects to AWS<font color="#CCCCCC"> let's for a second look</font>

476
00:28:30,240 --> 00:28:38,399
at<font color="#E5E5E5"> the documentation you can see that</font>

477
00:28:34,789 --> 00:28:41,760
<font color="#CCCCCC">the AWS lambda full access</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> required</font>

478
00:28:38,399 --> 00:28:43,260
for<font color="#E5E5E5"> all cloud deployments so if anyone</font>

479
00:28:41,760 --> 00:28:45,360
<font color="#E5E5E5">is</font><font color="#CCCCCC"> using</font><font color="#E5E5E5"> Claudia and that's a lot of</font>

480
00:28:43,260 --> 00:28:49,830
<font color="#E5E5E5">people they're giving the full</font>

481
00:28:45,360 --> 00:28:52,260
permissions as requirement<font color="#CCCCCC"> without</font>

482
00:28:49,830 --> 00:28:56,039
<font color="#CCCCCC">Claudia is the</font><font color="#E5E5E5"> only one but actually we</font>

483
00:28:52,260 --> 00:28:58,770
see it all over<font color="#CCCCCC"> the place even Amazon</font>

484
00:28:56,039 --> 00:29:01,160
themselves<font color="#E5E5E5"> they have a github sample</font>

485
00:28:58,770 --> 00:29:05,310
showing you

486
00:29:01,160 --> 00:29:07,620
how to<font color="#CCCCCC"> use a single lambda function it's</font>

487
00:29:05,310 --> 00:29:10,950
in their github<font color="#E5E5E5"> and this is the actual</font>

488
00:29:07,620 --> 00:29:13,830
documentation<font color="#E5E5E5"> of it this is the this is</font>

489
00:29:10,950 --> 00:29:16,650
<font color="#E5E5E5">what they recommend to use and they say</font>

490
00:29:13,830 --> 00:29:19,169
the requisite<font color="#E5E5E5"> create a role called</font>

491
00:29:16,650 --> 00:29:23,010
lambda<font color="#E5E5E5"> role assign it</font><font color="#CCCCCC"> AWS</font><font color="#E5E5E5"> lambda full</font>

492
00:29:19,170 --> 00:29:25,890
access<font color="#CCCCCC"> so this is the boilerplate</font><font color="#E5E5E5"> for</font>

493
00:29:23,010 --> 00:29:29,370
many many other projects<font color="#E5E5E5"> it's being</font>

494
00:29:25,890 --> 00:29:31,380
fought constantly<font color="#E5E5E5"> you can guess that if</font>

495
00:29:29,370 --> 00:29:36,810
this is the<font color="#E5E5E5"> documentation of Amazon this</font>

496
00:29:31,380 --> 00:29:40,200
is what<font color="#CCCCCC"> the</font><font color="#E5E5E5"> VP see the virtual private</font>

497
00:29:36,810 --> 00:29:42,120
cloud is<font color="#E5E5E5"> actually there is no</font><font color="#CCCCCC"> VPC by</font>

498
00:29:40,200 --> 00:29:44,910
<font color="#E5E5E5">default I remind you that if there was</font>

499
00:29:42,120 --> 00:29:47,250
some sort of<font color="#CCCCCC"> DPC</font><font color="#E5E5E5"> we could not</font><font color="#CCCCCC"> even do</font>

500
00:29:44,910 --> 00:29:49,740
the first<font color="#E5E5E5"> step of exfiltrating data</font>

501
00:29:47,250 --> 00:29:52,200
because<font color="#CCCCCC"> we contacted something beyond</font>

502
00:29:49,740 --> 00:29:57,960
what<font color="#CCCCCC"> would be considered</font><font color="#E5E5E5"> the virtual</font>

503
00:29:52,200 --> 00:30:01,140
private cloud so it's not by default

504
00:29:57,960 --> 00:30:05,880
<font color="#E5E5E5">it's not activated we had a chance to</font>

505
00:30:01,140 --> 00:30:06,900
talk<font color="#E5E5E5"> with an Amazon engineer this was</font>

506
00:30:05,880 --> 00:30:09,270
kind of<font color="#E5E5E5"> the reply</font>

507
00:30:06,900 --> 00:30:12,120
the main issue they have was with the

508
00:30:09,270 --> 00:30:16,580
documentation<font color="#E5E5E5"> they said they will change</font>

509
00:30:12,120 --> 00:30:19,530
it<font color="#E5E5E5"> it was a year ago it's</font><font color="#CCCCCC"> still the same</font>

510
00:30:16,580 --> 00:30:22,620
<font color="#E5E5E5">but this is something</font><font color="#CCCCCC"> that we need to</font>

511
00:30:19,530 --> 00:30:25,170
understand they consider it<font color="#E5E5E5"> working</font><font color="#CCCCCC"> as</font>

512
00:30:22,620 --> 00:30:28,649
intended<font color="#CCCCCC"> you should not</font><font color="#E5E5E5"> have issues</font><font color="#CCCCCC"> in</font>

513
00:30:25,170 --> 00:30:30,330
your<font color="#E5E5E5"> code and they are right I think</font>

514
00:30:28,650 --> 00:30:32,520
there<font color="#CCCCCC"> are better ways to</font><font color="#E5E5E5"> handle it but</font>

515
00:30:30,330 --> 00:30:33,990
they are right<font color="#E5E5E5"> issues in your code are</font>

516
00:30:32,520 --> 00:30:37,320
yours<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is the only thing they are</font>

517
00:30:33,990 --> 00:30:41,360
<font color="#E5E5E5">not in</font><font color="#CCCCCC"> charge</font><font color="#E5E5E5"> of and you should take</font>

518
00:30:37,320 --> 00:30:47,280
<font color="#CCCCCC">care of</font><font color="#E5E5E5"> that so let me finish with some</font>

519
00:30:41,360 --> 00:30:50,070
takeaways<font color="#CCCCCC"> ok serverless but we still</font>

520
00:30:47,280 --> 00:30:52,889
have two servers<font color="#CCCCCC"> and both of them can be</font>

521
00:30:50,070 --> 00:30:55,159
attacked one is the server that<font color="#E5E5E5"> hosts</font>

522
00:30:52,890 --> 00:30:57,660
<font color="#CCCCCC">the container</font><font color="#E5E5E5"> in the running container</font>

523
00:30:55,160 --> 00:31:00,510
this<font color="#E5E5E5"> is the one that we got the</font>

524
00:30:57,660 --> 00:31:02,790
information<font color="#E5E5E5"> from in the beginning the</font>

525
00:31:00,510 --> 00:31:05,160
next server is<font color="#CCCCCC"> the server hosting</font><font color="#E5E5E5"> the</font>

526
00:31:02,790 --> 00:31:09,720
source code<font color="#CCCCCC"> this is the server</font><font color="#E5E5E5"> that we</font>

527
00:31:05,160 --> 00:31:15,120
attacked when we wanted<font color="#CCCCCC"> to update</font>

528
00:31:09,720 --> 00:31:17,040
the functions<font color="#E5E5E5"> to malicious ones</font><font color="#CCCCCC"> we need</font>

529
00:31:15,120 --> 00:31:19,260
<font color="#E5E5E5">to keep security</font><font color="#CCCCCC"> in mind</font><font color="#E5E5E5"> although it's</font>

530
00:31:17,040 --> 00:31:23,270
not our<font color="#CCCCCC"> business what Amazon is doing</font><font color="#E5E5E5"> or</font>

531
00:31:19,260 --> 00:31:26,520
<font color="#CCCCCC">not</font><font color="#E5E5E5"> we still</font><font color="#CCCCCC"> need to beware be aware of</font>

532
00:31:23,270 --> 00:31:29,639
<font color="#E5E5E5">sensitive data in our functions</font><font color="#CCCCCC"> it's</font>

533
00:31:26,520 --> 00:31:34,500
<font color="#E5E5E5">really bad practice</font><font color="#CCCCCC"> we need to be aware</font>

534
00:31:29,640 --> 00:31:37,350
<font color="#CCCCCC">of the role permissions</font><font color="#E5E5E5"> that we give and</font>

535
00:31:34,500 --> 00:31:39,000
<font color="#CCCCCC">VPC</font><font color="#E5E5E5"> all these things are solvable and</font>

536
00:31:37,350 --> 00:31:44,790
<font color="#E5E5E5">should be handled</font>

537
00:31:39,000 --> 00:31:46,770
this is<font color="#E5E5E5"> configuration and the last thing</font>

538
00:31:44,790 --> 00:31:48,000
that<font color="#E5E5E5"> should be also the first thing you</font>

539
00:31:46,770 --> 00:31:50,850
<font color="#E5E5E5">need to</font><font color="#CCCCCC"> check the quality</font><font color="#E5E5E5"> of your code</font>

540
00:31:48,000 --> 00:31:54,360
security<font color="#CCCCCC"> there is nothing different</font>

541
00:31:50,850 --> 00:31:57,350
between code that is<font color="#E5E5E5"> going to the cloud</font>

542
00:31:54,360 --> 00:31:59,850
<font color="#E5E5E5">to</font><font color="#CCCCCC"> lambda2 any</font><font color="#E5E5E5"> function somewhere</font>

543
00:31:57,350 --> 00:32:03,360
<font color="#E5E5E5">virtual as it may be short-lived as it</font>

544
00:31:59,850 --> 00:32:04,770
<font color="#E5E5E5">may be sandboxed as it may be</font><font color="#CCCCCC"> and</font>

545
00:32:03,360 --> 00:32:11,100
there's no<font color="#E5E5E5"> difference between that and</font>

546
00:32:04,770 --> 00:32:14,490
classical code with vulnerabilities and

547
00:32:11,100 --> 00:32:16,429
<font color="#E5E5E5">that is that thank you</font><font color="#CCCCCC"> very much</font>

548
00:32:14,490 --> 00:32:26,059
questions

549
00:32:16,430 --> 00:32:26,059
[Applause]

550
00:32:51,210 --> 00:32:59,980
well actually I'm from<font color="#E5E5E5"> check marks I can</font>

551
00:32:53,950 --> 00:33:03,910
say about<font color="#E5E5E5"> us that</font><font color="#CCCCCC"> we are</font><font color="#E5E5E5"> I I don't</font><font color="#CCCCCC"> know</font>

552
00:32:59,980 --> 00:33:06,160
about others I guess<font color="#CCCCCC"> some of</font><font color="#E5E5E5"> them can</font>

553
00:33:03,910 --> 00:33:09,700
integrate<font color="#E5E5E5"> that as well it's not supposed</font>

554
00:33:06,160 --> 00:33:11,740
to be<font color="#E5E5E5"> that difficult</font><font color="#CCCCCC"> there are</font><font color="#E5E5E5"> no</font>

555
00:33:09,700 --> 00:33:14,080
specific<font color="#CCCCCC"> functions</font><font color="#E5E5E5"> that they can say</font>

556
00:33:11,740 --> 00:33:16,120
that<font color="#E5E5E5"> are more vulnerable than others</font><font color="#CCCCCC"> the</font>

557
00:33:14,080 --> 00:33:18,040
<font color="#E5E5E5">vulnerability itself is the</font><font color="#CCCCCC"> problem is</font>

558
00:33:16,120 --> 00:33:20,409
the<font color="#CCCCCC"> issue</font><font color="#E5E5E5"> it's the same classic</font>

559
00:33:18,040 --> 00:33:24,100
vulnerabilities<font color="#CCCCCC"> we just need</font><font color="#E5E5E5"> to change</font>

560
00:33:20,410 --> 00:33:27,610
the way we<font color="#CCCCCC"> think about</font><font color="#E5E5E5"> serverless about</font>

561
00:33:24,100 --> 00:33:29,530
so short and<font color="#CCCCCC"> so</font><font color="#E5E5E5"> sandboxed and just look</font>

562
00:33:27,610 --> 00:33:33,010
at it as any<font color="#E5E5E5"> other normal regular</font>

563
00:33:29,530 --> 00:33:36,629
vulnerability and it doesn't<font color="#E5E5E5"> matter the</font>

564
00:33:33,010 --> 00:33:36,629
language<font color="#E5E5E5"> as well it's the same</font>

565
00:33:41,690 --> 00:33:47,790
it's just<font color="#CCCCCC"> um well I prefer</font><font color="#E5E5E5"> not to talk</font>

566
00:33:45,270 --> 00:33:49,020
<font color="#E5E5E5">about the product at the moment</font><font color="#CCCCCC"> but just</font>

567
00:33:47,790 --> 00:33:55,310
<font color="#E5E5E5">just regular scans</font>

568
00:33:49,020 --> 00:33:55,310
it's just scans it automatically yeah

