1
00:00:03,190 --> 00:00:06,259
[Music]

2
00:00:06,529 --> 00:00:08,910
good evening ladies and gentlemen my

3
00:00:08,910 --> 00:00:11,820
name is Prateek I'm working in Intel

4
00:00:11,820 --> 00:00:15,389
mostly on Corbett projects and my talk

5
00:00:15,389 --> 00:00:18,090
is about recent changes that we have

6
00:00:18,090 --> 00:00:21,630
done in coreboot for multiprocessor

7
00:00:21,630 --> 00:00:23,519
initialization which with respect to

8
00:00:23,519 --> 00:00:25,529
some of the restricted feature

9
00:00:25,529 --> 00:00:27,480
programming so we're gonna go through

10
00:00:27,480 --> 00:00:33,090
that and how the community can use it so

11
00:00:33,090 --> 00:00:35,640
the agenda costed me like this summed

12
00:00:35,640 --> 00:00:37,890
over you of the MP initialization and

13
00:00:37,890 --> 00:00:41,370
the basic flow of coreboot and in the

14
00:00:41,370 --> 00:00:43,860
laughs SP this just restarted the

15
00:00:43,860 --> 00:00:45,809
problem statement so that people can

16
00:00:45,809 --> 00:00:48,030
understand what was the problem what are

17
00:00:48,030 --> 00:00:50,840
the solutions available what we chose

18
00:00:50,840 --> 00:00:56,539
the design of it and feature scope so

19
00:00:56,539 --> 00:01:00,270
starting with p6 family in mid-90s Intel

20
00:01:00,270 --> 00:01:03,420
as released a specification for MP

21
00:01:03,420 --> 00:01:06,510
initialization the flow is defined very

22
00:01:06,510 --> 00:01:08,580
well in the STM that anybody can go and

23
00:01:08,580 --> 00:01:10,920
refer I don't spend time going through

24
00:01:10,920 --> 00:01:12,650
all of it we can go through it I'm gonna

25
00:01:12,650 --> 00:01:16,530
go to the main problem but basically it

26
00:01:16,530 --> 00:01:19,140
divides the programming into BSP and ap

27
00:01:19,140 --> 00:01:21,750
the bizarre bit session or the system

28
00:01:21,750 --> 00:01:23,990
dynamically to suspend processor SPSP

29
00:01:23,990 --> 00:01:26,549
everything goes on the BSP and then the

30
00:01:26,549 --> 00:01:29,119
BSP would program the rest of the IPS

31
00:01:29,119 --> 00:01:31,590
they can go through the STM for the

32
00:01:31,590 --> 00:01:36,479
whole control for flow now just to make

33
00:01:36,479 --> 00:01:38,490
everyone on the same page I'm gonna go

34
00:01:38,490 --> 00:01:40,079
through this slide a little bit in

35
00:01:40,079 --> 00:01:44,189
detail so coreboot or bias any any bias

36
00:01:44,189 --> 00:01:45,869
sits on the research vector typically

37
00:01:45,869 --> 00:01:48,840
and it can call into F SP T for time for

38
00:01:48,840 --> 00:01:51,090
a minute but the recruit has its own

39
00:01:51,090 --> 00:01:54,990
temper emanated code tena first and the

40
00:01:54,990 --> 00:01:57,810
coreboot can call into SP m to the

41
00:01:57,810 --> 00:02:01,560
memory training teardown as typical and

42
00:02:01,560 --> 00:02:04,229
then go boot does the MP in it here and

43
00:02:04,229 --> 00:02:07,950
then it calls into FS PS for silicon

44
00:02:07,950 --> 00:02:09,989
initialization and then bunch of notify

45
00:02:09,989 --> 00:02:12,810
phase depending upon the platform

46
00:02:12,810 --> 00:02:15,180
so these the typical flow so that people

47
00:02:15,180 --> 00:02:18,150
can understand what's going on now

48
00:02:18,150 --> 00:02:20,550
the problem arises here with the recent

49
00:02:20,550 --> 00:02:24,630
the latest CPUs is that intel has

50
00:02:24,630 --> 00:02:29,420
introduced a new call s AI security

51
00:02:29,420 --> 00:02:34,590
arbitrator in it initiator so so that

52
00:02:34,590 --> 00:02:36,600
has to secure the platform but but it

53
00:02:36,600 --> 00:02:40,380
imposes some of the restriction in the

54
00:02:40,380 --> 00:02:44,460
programming flow so in that so basically

55
00:02:44,460 --> 00:02:46,680
F SPS has to program certain registers

56
00:02:46,680 --> 00:02:51,270
and then some restricted CPU programming

57
00:02:51,270 --> 00:02:53,190
would be done and then before exiting

58
00:02:53,190 --> 00:02:58,230
FSB as it has to lot other registers and

59
00:02:58,230 --> 00:03:02,430
then if you have to do those feature

60
00:03:02,430 --> 00:03:05,520
programming before F SPS or after F SPS

61
00:03:05,520 --> 00:03:10,320
it's not possible as of now and we want

62
00:03:10,320 --> 00:03:12,780
everything to be open source and we want

63
00:03:12,780 --> 00:03:14,880
to have those features so basically that

64
00:03:14,880 --> 00:03:17,060
was the problem

65
00:03:17,060 --> 00:03:20,130
so do this si I some of the feature

66
00:03:20,130 --> 00:03:23,340
programming can't be done before FS PSN

67
00:03:23,340 --> 00:03:25,860
even after FS PSO within the FS PS at a

68
00:03:25,860 --> 00:03:29,310
small window where those programming can

69
00:03:29,310 --> 00:03:31,560
be done and those features are mainly

70
00:03:31,560 --> 00:03:36,480
Intel SGX c6 DRAM those are the cool

71
00:03:36,480 --> 00:03:38,700
features for power saving as well as

72
00:03:38,700 --> 00:03:40,370
security

73
00:03:40,370 --> 00:03:44,190
so after cannon leaked and onwards those

74
00:03:44,190 --> 00:03:47,220
features has that typical of the

75
00:03:47,220 --> 00:03:48,720
restricted flow that we have to follow

76
00:03:48,720 --> 00:03:53,240
now to have these features as well as to

77
00:03:53,240 --> 00:03:56,580
make the things open source we have

78
00:03:56,580 --> 00:03:58,350
proposed something and there were a

79
00:03:58,350 --> 00:04:02,790
couple of solutions on the table let me

80
00:04:02,790 --> 00:04:05,580
go through it and explain what it is so

81
00:04:05,580 --> 00:04:08,850
number one is coreboot would do the MP

82
00:04:08,850 --> 00:04:10,920
initialization because coreboot has very

83
00:04:10,920 --> 00:04:14,970
cool MP need flow which is open source

84
00:04:14,970 --> 00:04:16,950
that's good thing but the problem is

85
00:04:16,950 --> 00:04:19,890
from cannon lake onwards we can't have

86
00:04:19,890 --> 00:04:23,190
the SSG X for the c69 feature if we do

87
00:04:23,190 --> 00:04:24,870
the MP need before and then call a

88
00:04:24,870 --> 00:04:27,180
SPS because FSB has to log certain

89
00:04:27,180 --> 00:04:31,560
registers in that flow the other option

90
00:04:31,560 --> 00:04:34,560
is a go boot gain or anybody can skip

91
00:04:34,560 --> 00:04:38,729
the MP in it in itself and let FSB do

92
00:04:38,729 --> 00:04:40,229
the all job

93
00:04:40,229 --> 00:04:42,540
so if SP would do them penis leiserson

94
00:04:42,540 --> 00:04:45,360
and as a part of em penalizes and it

95
00:04:45,360 --> 00:04:48,090
would do the restricted cpu future

96
00:04:48,090 --> 00:04:51,740
programming but the problem is Vietnam

97
00:04:51,740 --> 00:04:55,080
mr. cool boots open source and be neat

98
00:04:55,080 --> 00:04:58,260
flow and again in the notes over there

99
00:04:58,260 --> 00:05:00,180
it says what kind of config you can use

100
00:05:00,180 --> 00:05:04,050
to select which of the Hobson's but to

101
00:05:04,050 --> 00:05:06,389
get the rest of the boat was we have

102
00:05:06,389 --> 00:05:09,229
proposed Thursday listen that is

103
00:05:09,229 --> 00:05:12,240
implement PPI ice transfer p.m. 2 p.m.

104
00:05:12,240 --> 00:05:15,960
interface if you guys from educator

105
00:05:15,960 --> 00:05:18,570
background you can see FSB typically

106
00:05:18,570 --> 00:05:20,250
uses the I dedicate to infrastructure

107
00:05:20,250 --> 00:05:22,470
and it has from those fundamentals of

108
00:05:22,470 --> 00:05:27,030
the PIM now we can have this PPI bit

109
00:05:27,030 --> 00:05:29,460
basically it is nothing but a list of

110
00:05:29,460 --> 00:05:32,250
function pointers we can pass it to FSB

111
00:05:32,250 --> 00:05:35,520
and then FSB can use core boots and PE

112
00:05:35,520 --> 00:05:37,530
need to do the restrict trade feature

113
00:05:37,530 --> 00:05:40,200
programming web so the whole talk is

114
00:05:40,200 --> 00:05:41,820
about this we are gonna go through the

115
00:05:41,820 --> 00:05:45,900
design and how the flow works the good

116
00:05:45,900 --> 00:05:48,690
thing with this approach is that we

117
00:05:48,690 --> 00:05:51,270
Corbett can do the MP in this lesson as

118
00:05:51,270 --> 00:05:53,849
Corbett is doing as of now and on top of

119
00:05:53,849 --> 00:05:57,330
that we let FSP use cool boots and

120
00:05:57,330 --> 00:05:58,770
paneer infrastructure to do the

121
00:05:58,770 --> 00:06:02,750
restricted feature programming and to

122
00:06:02,750 --> 00:06:06,389
use that option you can set this config

123
00:06:06,389 --> 00:06:09,419
flag the good thing is code is already

124
00:06:09,419 --> 00:06:12,900
upstream it's all emerged so you can use

125
00:06:12,900 --> 00:06:16,830
it even as of today basically it is with

126
00:06:16,830 --> 00:06:22,830
FSP 2.1 back so let's go to the design

127
00:06:22,830 --> 00:06:25,349
so nutshell the basic three things very

128
00:06:25,349 --> 00:06:29,520
simple create the MP BPI interface give

129
00:06:29,520 --> 00:06:32,160
that interface pointer to FSP and let

130
00:06:32,160 --> 00:06:37,320
FSP execute it as simple as possible now

131
00:06:37,320 --> 00:06:41,490
what is that PPI so basically the the PI

132
00:06:41,490 --> 00:06:44,760
specification says that sound functions

133
00:06:44,760 --> 00:06:46,950
that anybody has to implement to provide

134
00:06:46,950 --> 00:06:49,590
that API interface two of them are

135
00:06:49,590 --> 00:06:51,479
optional so we have implemented five of

136
00:06:51,479 --> 00:06:55,229
them basically sales number of

137
00:06:55,229 --> 00:06:57,539
processors how to get the processor

138
00:06:57,539 --> 00:06:59,729
information these are the two main

139
00:06:59,729 --> 00:07:04,710
routines that is mostly used that is

140
00:07:04,710 --> 00:07:07,340
using cool boots MP drawn on ep's

141
00:07:07,340 --> 00:07:10,740
callback so so how it works is let's say

142
00:07:10,740 --> 00:07:13,860
if Google or FSB has to do as the X

143
00:07:13,860 --> 00:07:15,990
feature programming go boot will call

144
00:07:15,990 --> 00:07:18,960
this api's and fast on its own function

145
00:07:18,960 --> 00:07:22,740
pointer and execute those routines it's

146
00:07:22,740 --> 00:07:25,310
it's that simple

147
00:07:25,310 --> 00:07:28,740
either on PSP or all the course now you

148
00:07:28,740 --> 00:07:30,630
can follow this branch to see the whole

149
00:07:30,630 --> 00:07:32,969
sequence and bunch of review comments

150
00:07:32,969 --> 00:07:39,330
how this design was evolved now let's go

151
00:07:39,330 --> 00:07:42,870
to the flow as you know would block

152
00:07:42,870 --> 00:07:44,460
round stage two and stage we have with

153
00:07:44,460 --> 00:07:45,740
the core boot

154
00:07:45,740 --> 00:07:49,560
yeah but now I called the events so cool

155
00:07:49,560 --> 00:07:51,990
boot would still do the MBA need as it

156
00:07:51,990 --> 00:07:56,370
does right now and then we fill the FS

157
00:07:56,370 --> 00:08:01,529
PS UPD parameters P we call into FS PS

158
00:08:01,529 --> 00:08:05,190
is in telophase PS f SP and FS PS would

159
00:08:05,190 --> 00:08:08,010
do the silicon initialization this the

160
00:08:08,010 --> 00:08:10,800
current flow and then what extra we have

161
00:08:10,800 --> 00:08:13,680
to do is we have to create the MP epi

162
00:08:13,680 --> 00:08:18,029
api's oh there pass the function pointer

163
00:08:18,029 --> 00:08:21,690
in the FS PE s and the name of the GPD

164
00:08:21,690 --> 00:08:25,310
parameter is cpu MP PPI

165
00:08:25,310 --> 00:08:30,289
now f SP would do its own protocol for

166
00:08:30,289 --> 00:08:34,469
for ppi it will typically install the

167
00:08:34,469 --> 00:08:37,469
PPI locate it whenever it is time to do

168
00:08:37,469 --> 00:08:38,370
the feature

169
00:08:38,370 --> 00:08:41,809
initialization and it would call into

170
00:08:41,809 --> 00:08:44,850
coreboot again to do the feature

171
00:08:44,850 --> 00:08:47,850
programming so so remember those api

172
00:08:47,850 --> 00:08:50,460
that we have passed one of the Fiona

173
00:08:50,460 --> 00:08:54,420
P I was to execute some function on all

174
00:08:54,420 --> 00:08:56,880
day piece or selected ap so coreboot

175
00:08:56,880 --> 00:08:59,399
would sorry f SP would call those AP

176
00:08:59,399 --> 00:09:01,470
eyes and pass its own function pointer

177
00:09:01,470 --> 00:09:06,029
to do the feature programming so this is

178
00:09:06,029 --> 00:09:12,110
the main flow that I had and in future

179
00:09:12,110 --> 00:09:14,880
so you can exchange the same idea for

180
00:09:14,880 --> 00:09:17,220
other functionalities we can maybe make

181
00:09:17,220 --> 00:09:23,130
f SP to use into the core boots debug

182
00:09:23,130 --> 00:09:25,920
library to print its own debug messages

183
00:09:25,920 --> 00:09:29,580
into CB man that might be useful if

184
00:09:29,580 --> 00:09:32,700
someone has access to f SP debug we can

185
00:09:32,700 --> 00:09:34,260
at least try that option so this is the

186
00:09:34,260 --> 00:09:37,500
this idea that we have in mind and any

187
00:09:37,500 --> 00:09:40,200
other suggestions the community has its

188
00:09:40,200 --> 00:09:43,080
kind of welcome we can see how we can

189
00:09:43,080 --> 00:09:45,660
incorporate that make use of this

190
00:09:45,660 --> 00:09:50,240
infrastructure that is it I had to talk

191
00:09:50,240 --> 00:09:59,670
any questions thank you please queue up

192
00:09:59,670 --> 00:10:02,420
at the mics again

193
00:10:07,730 --> 00:10:11,550
hi I don't really know anything specific

194
00:10:11,550 --> 00:10:13,050
about this architecture I'm just curious

195
00:10:13,050 --> 00:10:15,750
from hearing this why can't you just add

196
00:10:15,750 --> 00:10:19,200
the new register set up that you need to

197
00:10:19,200 --> 00:10:21,510
do for the common lake to the core temp

198
00:10:21,510 --> 00:10:25,920
unit code do you know the logic of FSP a

199
00:10:25,920 --> 00:10:29,180
lot of the registers are restricted

200
00:10:29,180 --> 00:10:32,790
company considers it at the confluence

201
00:10:32,790 --> 00:10:36,060
here or secret top secret so some of the

202
00:10:36,060 --> 00:10:38,070
registers are not publicly available

203
00:10:38,070 --> 00:10:40,560
that fire FSP does a lot of programming

204
00:10:40,560 --> 00:10:44,580
but with the latest s AI configuration

205
00:10:44,580 --> 00:10:47,850
to secure the pad form or the it imposes

206
00:10:47,850 --> 00:10:50,430
a lot of restriction in the boot flow so

207
00:10:50,430 --> 00:10:52,170
we have to lock certain register first

208
00:10:52,170 --> 00:10:54,090
and then do the feature programming and

209
00:10:54,090 --> 00:10:57,300
before F SPS leaves we are - we know do

210
00:10:57,300 --> 00:10:59,670
certain other programming then only

211
00:10:59,670 --> 00:11:01,920
things would work otherwise if you skip

212
00:11:01,920 --> 00:11:03,600
that window then those features won't

213
00:11:03,600 --> 00:11:06,270
get enabled so that's a restriction in

214
00:11:06,270 --> 00:11:07,860
the programming that there's a

215
00:11:07,860 --> 00:11:11,970
recommendation so now to get locked when

216
00:11:11,970 --> 00:11:14,250
FSP is running yeah but you could still

217
00:11:14,250 --> 00:11:16,560
do it before you want if SP you it know

218
00:11:16,560 --> 00:11:19,530
but to initialize those registers there

219
00:11:19,530 --> 00:11:21,630
like to set up cyclic dependency so you

220
00:11:21,630 --> 00:11:24,180
can't just do before FS PS either for

221
00:11:24,180 --> 00:11:26,250
this particular scenario this is the

222
00:11:26,250 --> 00:11:29,010
specific restriction beyond Cannon Lake

223
00:11:29,010 --> 00:11:33,540
associate a castle feature

224
00:11:33,540 --> 00:11:36,540
so just to work on that we provided one

225
00:11:36,540 --> 00:11:38,970
more interface let F SP use coreboot

226
00:11:38,970 --> 00:11:40,680
infrastructure and it's the time to

227
00:11:40,680 --> 00:11:43,260
execute feature programming it would

228
00:11:43,260 --> 00:11:47,940
call into FS core boots MP pick API is

229
00:11:47,940 --> 00:11:50,130
to do the future programming because

230
00:11:50,130 --> 00:11:53,070
could FSP ideally can do its own they

231
00:11:53,070 --> 00:11:55,310
need to have the PIM interface to do the

232
00:11:55,310 --> 00:11:58,830
initialization so we are the most

233
00:11:58,830 --> 00:12:02,270
routines open sources like

234
00:12:07,310 --> 00:12:12,180
and please send out your suggestions if

235
00:12:12,180 --> 00:12:13,860
you want to see something more in this

236
00:12:13,860 --> 00:12:17,850
particular area you can see my contact

237
00:12:17,850 --> 00:12:19,500
detail here and my colleagues contact

238
00:12:19,500 --> 00:12:22,710
detail really like to implement new

239
00:12:22,710 --> 00:12:33,740
features here any questions

240
00:12:38,140 --> 00:12:41,920
all right then thank you very much

241
00:12:41,920 --> 00:12:48,570
[Applause]

242
00:12:48,570 --> 00:12:54,810
[Music]

