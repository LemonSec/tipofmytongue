1
00:00:03,190 --> 00:00:06,259
[Music]

2
00:00:07,280 --> 00:00:09,870
so our first speaker today is a wreck

3
00:00:09,870 --> 00:00:12,420
altar so he has got a wide range of

4
00:00:12,420 --> 00:00:14,759
career working from May 6 and all the

5
00:00:14,759 --> 00:00:17,670
way to UX and he worked at Google for

6
00:00:17,670 --> 00:00:20,490
nine years on the machine management and

7
00:00:20,490 --> 00:00:23,310
health monitoring and where he also led

8
00:00:23,310 --> 00:00:25,500
the unification of open BMC as a Linux

9
00:00:25,500 --> 00:00:29,429
Foundation project now he works at Clips

10
00:00:29,429 --> 00:00:32,940
iam as a security researcher uh working

11
00:00:32,940 --> 00:00:36,390
on at pga bitstreams and he's going to

12
00:00:36,390 --> 00:00:39,510
talk today about how to avoid common

13
00:00:39,510 --> 00:00:43,590
vulnerabilities in BMC systems Thank You

14
00:00:43,590 --> 00:00:45,379
Benjamin

15
00:00:45,379 --> 00:00:50,190
so as you said I'm Rick alter with the

16
00:00:50,190 --> 00:00:56,100
clips iam clip seems just a we won't

17
00:00:56,100 --> 00:00:57,719
talk about them too much we like to keep

18
00:00:57,719 --> 00:01:01,609
our research separate from our marketing

19
00:01:02,120 --> 00:01:05,909
so being the BMC track I assume most

20
00:01:05,909 --> 00:01:07,229
people are at least somewhat familiar

21
00:01:07,229 --> 00:01:10,970
with BMC's still gonna do a slight recap

22
00:01:10,970 --> 00:01:14,040
but the main thing is that bmc's are our

23
00:01:14,040 --> 00:01:16,200
way of providing your remote management

24
00:01:16,200 --> 00:01:18,299
functionality for a server right and a

25
00:01:18,299 --> 00:01:20,850
lot of the drive for these systems was

26
00:01:20,850 --> 00:01:24,780
actually to control various aspects of

27
00:01:24,780 --> 00:01:27,000
the system that were things like fan

28
00:01:27,000 --> 00:01:28,860
control temperature or environmental

29
00:01:28,860 --> 00:01:30,960
management and sort of automated

30
00:01:30,960 --> 00:01:33,210
processes but once you have a system

31
00:01:33,210 --> 00:01:35,520
available that takes care of that and

32
00:01:35,520 --> 00:01:39,270
runs outside the host processor then you

33
00:01:39,270 --> 00:01:41,670
can start adding nice-to-haves features

34
00:01:41,670 --> 00:01:45,869
for IT functionality so your remote

35
00:01:45,869 --> 00:01:47,939
hands capabilities like virtual consoles

36
00:01:47,939 --> 00:01:52,020
virtual media updating posts firmware so

37
00:01:52,020 --> 00:01:53,549
a BMC ends up being a fairly

38
00:01:53,549 --> 00:01:58,320
comprehensive device so just a touch on

39
00:01:58,320 --> 00:02:01,530
terminology when I say host I mean the

40
00:02:01,530 --> 00:02:03,030
computer that you're actually intending

41
00:02:03,030 --> 00:02:06,000
to boot and run an OS on but a server

42
00:02:06,000 --> 00:02:10,110
contains both a host and a BMC and in

43
00:02:10,110 --> 00:02:12,599
some cases you might have a a chassis

44
00:02:12,599 --> 00:02:13,380
that

45
00:02:13,380 --> 00:02:15,480
has its own independent BMC and may

46
00:02:15,480 --> 00:02:17,880
contain more than one server so if you

47
00:02:17,880 --> 00:02:19,500
had blade servers for example there

48
00:02:19,500 --> 00:02:22,320
often be a separate BMC associated with

49
00:02:22,320 --> 00:02:27,330
the chassis itself because I'm likely to

50
00:02:27,330 --> 00:02:29,400
reference them as I throughout my talk

51
00:02:29,400 --> 00:02:31,890
these are just some of the common SOC s

52
00:02:31,890 --> 00:02:35,550
in use some more recent than others but

53
00:02:35,550 --> 00:02:37,140
there's there's only a handful of

54
00:02:37,140 --> 00:02:39,270
vendors that actually produce silicon

55
00:02:39,270 --> 00:02:42,870
for BMC's mmm most people are familiar

56
00:02:42,870 --> 00:02:46,190
with a speed as that pretty widely used

57
00:02:46,190 --> 00:02:50,220
HP actually makes their own silicon and

58
00:02:50,220 --> 00:02:53,610
then new Vuitton also has products that

59
00:02:53,610 --> 00:02:55,230
are out there

60
00:02:55,230 --> 00:02:57,420
most of these are arm based they do also

61
00:02:57,420 --> 00:03:00,480
have Co processors and some of them so

62
00:03:00,480 --> 00:03:02,310
you end up with sort of a mishmash of of

63
00:03:02,310 --> 00:03:04,290
CPU architectures that you can play with

64
00:03:04,290 --> 00:03:09,570
in these devices ok why would I attack a

65
00:03:09,570 --> 00:03:11,430
BMC so I'm coming at this from a

66
00:03:11,430 --> 00:03:15,660
security perspective so a BMC if it

67
00:03:15,660 --> 00:03:18,090
offers remote management capabilities it

68
00:03:18,090 --> 00:03:21,000
must be highly privileged as far as

69
00:03:21,000 --> 00:03:22,860
access to the host and if I look at the

70
00:03:22,860 --> 00:03:25,800
feature set that's available yes I can

71
00:03:25,800 --> 00:03:28,530
not only have interact with it from a

72
00:03:28,530 --> 00:03:30,360
keyboard video you know Mouse

73
00:03:30,360 --> 00:03:32,460
perspective but also things like

74
00:03:32,460 --> 00:03:34,470
accessing the host firmware and and

75
00:03:34,470 --> 00:03:37,800
other systems on usually a BMC is

76
00:03:37,800 --> 00:03:39,360
network accessible right it's supposed

77
00:03:39,360 --> 00:03:42,240
to be out of band and the whole point of

78
00:03:42,240 --> 00:03:43,380
the remote management is that I don't

79
00:03:43,380 --> 00:03:45,510
have to be there so it's usually

80
00:03:45,510 --> 00:03:47,630
connected to a network that is reachable

81
00:03:47,630 --> 00:03:51,020
now assuming that I compromised a BMC

82
00:03:51,020 --> 00:03:53,459
it's really a computer that's separate

83
00:03:53,459 --> 00:03:56,250
from the host computer so if I

84
00:03:56,250 --> 00:03:59,940
compromised a BMC I get persistence

85
00:03:59,940 --> 00:04:02,360
independent of the host you can format

86
00:04:02,360 --> 00:04:04,830
the disks on the host you can replace

87
00:04:04,830 --> 00:04:06,660
the firmware it doesn't matter if I'm on

88
00:04:06,660 --> 00:04:08,490
the BMC you have to actually replace the

89
00:04:08,490 --> 00:04:12,060
BMC's firmware to actually eliminate

90
00:04:12,060 --> 00:04:16,350
that persistence as well and BMC's tend

91
00:04:16,350 --> 00:04:17,970
to have a poor for more security history

92
00:04:17,970 --> 00:04:22,290
we'll get into this a bit later but one

93
00:04:22,290 --> 00:04:24,390
of the key points is even when security

94
00:04:24,390 --> 00:04:26,130
vulnerabilities are found and firmware

95
00:04:26,130 --> 00:04:27,250
updates are produced

96
00:04:27,250 --> 00:04:31,360
they're usually deployed very slowly if

97
00:04:31,360 --> 00:04:34,780
at all and they're often overlooked as

98
00:04:34,780 --> 00:04:39,940
is there even an update available so

99
00:04:39,940 --> 00:04:43,060
there's lots of research in this space

100
00:04:43,060 --> 00:04:50,050
around BMC's so back in 2013 there was a

101
00:04:50,050 --> 00:04:53,950
report from on ipmi and a lot of the

102
00:04:53,950 --> 00:04:56,500
classic vulnerabilities there rapid7

103
00:04:56,500 --> 00:04:59,230
actually has a penetration testers guide

104
00:04:59,230 --> 00:05:01,870
to tell you here's how to run the tools

105
00:05:01,870 --> 00:05:03,940
to actually perform a variety of common

106
00:05:03,940 --> 00:05:05,260
attacks against systems when you're

107
00:05:05,260 --> 00:05:08,410
doing a Red Team penetration test and

108
00:05:08,410 --> 00:05:11,680
more recently there was a group from

109
00:05:11,680 --> 00:05:15,700
Airbus that went through and figured out

110
00:05:15,700 --> 00:05:18,940
I ll fors firmware reverse engineering

111
00:05:18,940 --> 00:05:20,980
the operating system on it and found

112
00:05:20,980 --> 00:05:23,020
numerous vulnerabilities that were able

113
00:05:23,020 --> 00:05:29,590
to compromise the ILO four systems so my

114
00:05:29,590 --> 00:05:33,640
intent is to raise some awareness of the

115
00:05:33,640 --> 00:05:35,590
classic vulnerabilities that we run into

116
00:05:35,590 --> 00:05:38,350
and the thing is that these

117
00:05:38,350 --> 00:05:40,680
vulnerabilities keep repeating over time

118
00:05:40,680 --> 00:05:44,080
well the very first class of these is

119
00:05:44,080 --> 00:05:46,960
simply that if you implement ipmi to the

120
00:05:46,960 --> 00:05:48,669
spec you're gonna run into security

121
00:05:48,669 --> 00:05:51,820
problems it's anybody not familiar with

122
00:05:51,820 --> 00:05:55,630
that anybody familiar with the IPMI

123
00:05:55,630 --> 00:05:57,940
security vulnerabilities oh a few hands

124
00:05:57,940 --> 00:06:02,560
alright alright ok so first of all our

125
00:06:02,560 --> 00:06:07,270
mCP Plus or an RM CP both have it those

126
00:06:07,270 --> 00:06:09,880
are the protocols used to talk to IBM I

127
00:06:09,880 --> 00:06:12,520
over a LAN interface so over over a

128
00:06:12,520 --> 00:06:15,930
network and the actual specification

129
00:06:15,930 --> 00:06:19,930
requires a few crypto protocols and hash

130
00:06:19,930 --> 00:06:22,810
functions and others are optional but

131
00:06:22,810 --> 00:06:24,910
given that the standard was last updated

132
00:06:24,910 --> 00:06:28,450
in 2013 pretty much all of the available

133
00:06:28,450 --> 00:06:30,700
options for you even if there you

134
00:06:30,700 --> 00:06:33,850
implement the optional ones are just

135
00:06:33,850 --> 00:06:36,250
classic algorithms that either are

136
00:06:36,250 --> 00:06:38,590
already vulnerable or very likely to be

137
00:06:38,590 --> 00:06:40,960
vulnerable in

138
00:06:40,960 --> 00:06:42,789
in fact if you implement only the

139
00:06:42,789 --> 00:06:45,520
mandatory ones you are guaranteed that

140
00:06:45,520 --> 00:06:47,410
you're using a weak algorithm for at

141
00:06:47,410 --> 00:06:49,870
least some aspect of your security at

142
00:06:49,870 --> 00:06:52,949
this point the ipmi promoters recommend

143
00:06:52,949 --> 00:06:55,389
you not actually rely on this

144
00:06:55,389 --> 00:06:56,500
specification anymore

145
00:06:56,500 --> 00:06:57,759
right they're not planning any new

146
00:06:57,759 --> 00:06:59,139
updates you should go implement

147
00:06:59,139 --> 00:07:03,099
something else one thing to note there

148
00:07:03,099 --> 00:07:06,699
is boat in in most of these encryption

149
00:07:06,699 --> 00:07:08,979
schemes you actually see that mandatory

150
00:07:08,979 --> 00:07:12,759
type zero is none which ends up being a

151
00:07:12,759 --> 00:07:15,970
nice hole as that was interpreted to

152
00:07:15,970 --> 00:07:17,590
mean that I don't actually have to

153
00:07:17,590 --> 00:07:19,960
authenticate at all on many BMC

154
00:07:19,960 --> 00:07:22,620
implementations so this was found in

155
00:07:22,620 --> 00:07:24,699
that you can simply connect with

156
00:07:24,699 --> 00:07:26,530
authentication type zero and it won't

157
00:07:26,530 --> 00:07:32,620
ask you for any credentials looking past

158
00:07:32,620 --> 00:07:34,210
that and we look towards password

159
00:07:34,210 --> 00:07:38,229
storage the required algorithms as part

160
00:07:38,229 --> 00:07:41,289
of the ipmi spec include plaintext

161
00:07:41,289 --> 00:07:43,120
passwords and multiple hashing functions

162
00:07:43,120 --> 00:07:46,990
which means that the ipmi stack has to

163
00:07:46,990 --> 00:07:49,479
be able to compute these hashes and has

164
00:07:49,479 --> 00:07:51,460
to have a copy of the plain plaintext

165
00:07:51,460 --> 00:07:53,259
password in order to be able to actually

166
00:07:53,259 --> 00:07:55,360
validate your password so somewhere on

167
00:07:55,360 --> 00:07:58,300
the system I have a plaintext password

168
00:07:58,300 --> 00:08:00,909
now that tells me that there's

169
00:08:00,909 --> 00:08:02,500
interesting things to go find inside of

170
00:08:02,500 --> 00:08:05,469
a BMC this gives me even more of an of a

171
00:08:05,469 --> 00:08:09,250
reason to actually attack them if that

172
00:08:09,250 --> 00:08:13,090
isn't enough then the our akp algorithm

173
00:08:13,090 --> 00:08:16,570
that runs on top of our mCP + when

174
00:08:16,570 --> 00:08:20,080
you're actually authenticating to a BMC

175
00:08:20,080 --> 00:08:24,430
over over the network has a quirky

176
00:08:24,430 --> 00:08:27,099
implementation of H Mac as part of the

177
00:08:27,099 --> 00:08:29,770
specification it actually sends you a

178
00:08:29,770 --> 00:08:31,659
salted hash of the user password before

179
00:08:31,659 --> 00:08:34,270
you authenticate it essentially sends

180
00:08:34,270 --> 00:08:36,490
you their path their hashed password and

181
00:08:36,490 --> 00:08:38,200
then asks you to perform a computation

182
00:08:38,200 --> 00:08:40,708
that validates that it's correct

183
00:08:40,708 --> 00:08:43,390
so it turns out that this has been known

184
00:08:43,390 --> 00:08:45,160
this was reported you know many many

185
00:08:45,160 --> 00:08:47,740
years ago and in fact Metasploit

186
00:08:47,740 --> 00:08:49,750
framework which is a collection of

187
00:08:49,750 --> 00:08:52,089
attacks in an in sort of an automated

188
00:08:52,089 --> 00:08:54,610
form has a script

189
00:08:54,610 --> 00:08:56,620
you can simply run over an IP range and

190
00:08:56,620 --> 00:08:57,880
it will actually collect all of these

191
00:08:57,880 --> 00:08:59,770
password hashes for you and dump them

192
00:08:59,770 --> 00:09:03,670
out into formats that you can feed into

193
00:09:03,670 --> 00:09:05,320
password crackers like Jack the Ripper

194
00:09:05,320 --> 00:09:10,090
John the Ripper and hashtag so I went

195
00:09:10,090 --> 00:09:12,010
ahead and did this just to see what

196
00:09:12,010 --> 00:09:14,590
would happen against my array of test

197
00:09:14,590 --> 00:09:17,650
machines at at eclipse IAM and found

198
00:09:17,650 --> 00:09:20,770
that i could crack all of the one to

199
00:09:20,770 --> 00:09:22,660
eight character alphanumeric passwords

200
00:09:22,660 --> 00:09:24,970
for about twenty dollars now how did i

201
00:09:24,970 --> 00:09:27,610
get to twenty dollars well there's

202
00:09:27,610 --> 00:09:29,440
actually services nowadays for machine

203
00:09:29,440 --> 00:09:32,440
learning that allow you to rent machines

204
00:09:32,440 --> 00:09:34,990
with large numbers of GPUs attached and

205
00:09:34,990 --> 00:09:38,650
I found one that offered me 91 cents an

206
00:09:38,650 --> 00:09:43,030
hour on a for for top-of-the-line NVIDIA

207
00:09:43,030 --> 00:09:45,400
GPU setup which meant that I could run

208
00:09:45,400 --> 00:09:48,910
this and it was computing about ten tera

209
00:09:48,910 --> 00:09:53,290
hashes per second and so I was able to

210
00:09:53,290 --> 00:09:55,840
actually crack all of these in I think

211
00:09:55,840 --> 00:09:59,320
it was yeah just under twenty hours so

212
00:09:59,320 --> 00:10:01,560
if you're using a character passwords

213
00:10:01,560 --> 00:10:04,180
you might want to be thinking about you

214
00:10:04,180 --> 00:10:07,270
know at least extending that to hurt the

215
00:10:07,270 --> 00:10:10,420
search space but keep in mind that most

216
00:10:10,420 --> 00:10:14,230
systems today still ship with DES fixed

217
00:10:14,230 --> 00:10:16,060
to default credentials right that the

218
00:10:16,060 --> 00:10:18,810
default passwords are well known in fact

219
00:10:18,810 --> 00:10:21,790
Metasploit even checks for those hashes

220
00:10:21,790 --> 00:10:26,050
it just knows what they are but even

221
00:10:26,050 --> 00:10:28,480
when you look at HP's ILO which actually

222
00:10:28,480 --> 00:10:30,580
ships with randomized credentials on a

223
00:10:30,580 --> 00:10:32,890
per server basis those are only eight

224
00:10:32,890 --> 00:10:34,360
character passwords and they all use

225
00:10:34,360 --> 00:10:36,040
uppercase which meant that I could crack

226
00:10:36,040 --> 00:10:40,570
them in about 16 minutes so this

227
00:10:40,570 --> 00:10:46,380
password story in IPMI is just not good

228
00:10:46,680 --> 00:10:51,520
now some assumptions about IPMI are that

229
00:10:51,520 --> 00:10:59,260
the it's they're in well I guess the the

230
00:10:59,260 --> 00:11:02,110
ipmi spec says that local interfaces are

231
00:11:02,110 --> 00:11:04,480
session lists and in the context of IP

232
00:11:04,480 --> 00:11:08,150
me I PMI that means unauthenticated you

233
00:11:08,150 --> 00:11:11,060
just simply can execute commands and and

234
00:11:11,060 --> 00:11:13,040
you have no real privilege check-in

235
00:11:13,040 --> 00:11:15,110
there is a a list of what commands are

236
00:11:15,110 --> 00:11:17,740
valid over local interfaces but by

237
00:11:17,740 --> 00:11:20,210
specification it has no authentication

238
00:11:20,210 --> 00:11:23,030
mechanism over the local interface now

239
00:11:23,030 --> 00:11:25,070
what that meant is that the host system

240
00:11:25,070 --> 00:11:27,860
can just send off whatever commands at

241
00:11:27,860 --> 00:11:33,230
once now in ipmi 2.0 there was an

242
00:11:33,230 --> 00:11:36,020
understanding that oh well we also

243
00:11:36,020 --> 00:11:38,180
defined local interfaces to include

244
00:11:38,180 --> 00:11:40,130
things like I squared C out to

245
00:11:40,130 --> 00:11:43,070
peripheral cards which means that a

246
00:11:43,070 --> 00:11:45,170
peripheral device could actually send on

247
00:11:45,170 --> 00:11:47,180
with indicated commands to the BMC and

248
00:11:47,180 --> 00:11:48,230
can do all sorts of things that you

249
00:11:48,230 --> 00:11:49,910
probably shouldn't be able to do and

250
00:11:49,910 --> 00:11:52,330
especially when you start looking at

251
00:11:52,330 --> 00:11:55,430
other protocols and transports for these

252
00:11:55,430 --> 00:11:57,140
commands you you just run into a bad

253
00:11:57,140 --> 00:11:59,030
scenario so there was this introduction

254
00:11:59,030 --> 00:12:00,950
of the fire or firmware firewall and

255
00:12:00,950 --> 00:12:02,900
it's essentially a set of IPMI commands

256
00:12:02,900 --> 00:12:05,570
that let you flip a few bits to disable

257
00:12:05,570 --> 00:12:08,180
certain commands over certain transports

258
00:12:08,180 --> 00:12:11,480
or certain channels this firmware

259
00:12:11,480 --> 00:12:13,310
firewall is actually an optional part of

260
00:12:13,310 --> 00:12:15,290
the specification so you hope that your

261
00:12:15,290 --> 00:12:18,770
vendor has implemented this if they did

262
00:12:18,770 --> 00:12:20,780
implement it the specification makes no

263
00:12:20,780 --> 00:12:22,340
recommendations as to what the defaults

264
00:12:22,340 --> 00:12:24,440
are so you're left up to whatever the

265
00:12:24,440 --> 00:12:27,620
vendor decided is the reasonable subset

266
00:12:27,620 --> 00:12:29,210
of commands that a host should by

267
00:12:29,210 --> 00:12:31,070
default be able to run or that an add-in

268
00:12:31,070 --> 00:12:34,010
card should be able to run in practice

269
00:12:34,010 --> 00:12:36,170
most vendors if they implement it at all

270
00:12:36,170 --> 00:12:39,080
just leave it wide open so from the

271
00:12:39,080 --> 00:12:41,150
perspective of the host or an add-in

272
00:12:41,150 --> 00:12:44,740
card I have full access to a BMC VIP mi

273
00:12:44,740 --> 00:12:48,440
just from the get-go this might make

274
00:12:48,440 --> 00:12:50,570
sense internet classic IT environment

275
00:12:50,570 --> 00:12:52,550
where I have careful IT staff managing

276
00:12:52,550 --> 00:12:54,580
the server the host machine in

277
00:12:54,580 --> 00:12:58,100
coordination with BMC s this does not

278
00:12:58,100 --> 00:13:02,360
make sense in a bare-metal virtual

279
00:13:02,360 --> 00:13:10,330
machine environment ok so I PMI is bad

280
00:13:10,330 --> 00:13:12,700
I'm just gonna say it

281
00:13:12,700 --> 00:13:16,820
please stop using it but let's talk

282
00:13:16,820 --> 00:13:19,960
about some other areas so moving on

283
00:13:19,960 --> 00:13:22,040
how many people have used to be

284
00:13:22,040 --> 00:13:24,470
see his web interface hopefully

285
00:13:24,470 --> 00:13:28,850
everybody in the room okay great so we

286
00:13:28,850 --> 00:13:30,490
have a web interface on these things

287
00:13:30,490 --> 00:13:33,230
well if you pay attention to the web

288
00:13:33,230 --> 00:13:35,690
security space there are a lot of

289
00:13:35,690 --> 00:13:40,399
attacks towards web targeting HTTP and

290
00:13:40,399 --> 00:13:42,410
web servers and web frameworks there's a

291
00:13:42,410 --> 00:13:44,600
whole host of new attack types that come

292
00:13:44,600 --> 00:13:47,990
in with that space how have PMC's done

293
00:13:47,990 --> 00:13:52,819
in this space well in a typical BMC you

294
00:13:52,819 --> 00:13:56,380
usually have an HTTP server running and

295
00:13:56,380 --> 00:13:59,060
because it's a constrained environment

296
00:13:59,060 --> 00:14:01,670
most of what I've seen is an HTTP server

297
00:14:01,670 --> 00:14:03,620
that really only serves static pages and

298
00:14:03,620 --> 00:14:05,630
actually implements all the dynamic

299
00:14:05,630 --> 00:14:08,589
functionality by simply executing CGI's

300
00:14:08,589 --> 00:14:11,839
now for those who haven't done CGI

301
00:14:11,839 --> 00:14:14,899
programming since the 90s essentially

302
00:14:14,899 --> 00:14:16,790
this is it literally the web server is

303
00:14:16,790 --> 00:14:19,190
just going to execute either a script or

304
00:14:19,190 --> 00:14:22,910
a binary and pass it some variables that

305
00:14:22,910 --> 00:14:27,230
indicate that the contents of the HTTP

306
00:14:27,230 --> 00:14:29,839
variables and other information and the

307
00:14:29,839 --> 00:14:31,639
script runs and whatever it returns is

308
00:14:31,639 --> 00:14:33,800
sent back to the client well in the case

309
00:14:33,800 --> 00:14:36,800
of these bmc's most of the time these

310
00:14:36,800 --> 00:14:40,519
CGI's are actually C binaries that have

311
00:14:40,519 --> 00:14:42,290
been compiled in and so it's actually

312
00:14:42,290 --> 00:14:46,940
literally just running a binary and ship

313
00:14:46,940 --> 00:14:49,579
so the HTTP server ships out some static

314
00:14:49,579 --> 00:14:51,620
content to the browser to build up to

315
00:14:51,620 --> 00:14:55,130
Dom it uses JavaScript to do ajax type

316
00:14:55,130 --> 00:14:57,199
queries to the cgi scripts which are

317
00:14:57,199 --> 00:14:58,760
these c applications that are running

318
00:14:58,760 --> 00:15:01,550
and on some of the more modern ones that

319
00:15:01,550 --> 00:15:05,720
have html5 k vm functionality you'll

320
00:15:05,720 --> 00:15:06,980
actually see that they also run a

321
00:15:06,980 --> 00:15:09,949
WebSocket server and connect over

322
00:15:09,949 --> 00:15:12,260
WebSocket to actually do streaming for

323
00:15:12,260 --> 00:15:14,209
the actual ikv M instead of connecting

324
00:15:14,209 --> 00:15:16,670
separately via VNC and and things like

325
00:15:16,670 --> 00:15:22,579
that ok well if I go look at the OWASP

326
00:15:22,579 --> 00:15:25,250
top 10 from the very first list so

327
00:15:25,250 --> 00:15:27,970
everybody familiar with Oh wasp

328
00:15:27,970 --> 00:15:31,689
yes yes anybody not familiar with a wasp

329
00:15:31,689 --> 00:15:35,600
ok we do have a few it's

330
00:15:35,600 --> 00:15:37,430
the own it's in my notes but they're not

331
00:15:37,430 --> 00:15:39,440
showing on here for some reason that's

332
00:15:39,440 --> 00:15:43,810
fun the open web application security

333
00:15:43,810 --> 00:15:48,740
project I don't remember if it's with

334
00:15:48,740 --> 00:15:49,550
the peas um

335
00:15:49,550 --> 00:15:51,829
but essentially it's a group that are

336
00:15:51,829 --> 00:15:54,860
focused on web security overall as a

337
00:15:54,860 --> 00:15:57,500
body and they they publish a top 10

338
00:15:57,500 --> 00:16:00,019
pretty much every year 2004 was the very

339
00:16:00,019 --> 00:16:01,490
first year they published these this was

340
00:16:01,490 --> 00:16:02,509
sort of at the time

341
00:16:02,509 --> 00:16:04,850
height of understanding that security on

342
00:16:04,850 --> 00:16:06,139
the web was going to be different and it

343
00:16:06,139 --> 00:16:07,850
was going to be and and there were a lot

344
00:16:07,850 --> 00:16:10,430
of common patterns that were continuing

345
00:16:10,430 --> 00:16:12,980
to crop up and I'm not gonna go through

346
00:16:12,980 --> 00:16:15,199
all of these but what's what's

347
00:16:15,199 --> 00:16:18,589
interesting to me is that when I go look

348
00:16:18,589 --> 00:16:22,040
at the CDE s for the MCS we actually

349
00:16:22,040 --> 00:16:23,480
match up really well and I only really

350
00:16:23,480 --> 00:16:26,149
grabbed one example from each case but

351
00:16:26,149 --> 00:16:27,980
notice that for example buffer overflows

352
00:16:27,980 --> 00:16:29,420
is something that's been reported in

353
00:16:29,420 --> 00:16:32,209
2019 right cross-site scripting is as

354
00:16:32,209 --> 00:16:37,790
recent as 2015 many in 2018 even though

355
00:16:37,790 --> 00:16:38,690
we have known about these

356
00:16:38,690 --> 00:16:41,569
vulnerabilities for 15 years right these

357
00:16:41,569 --> 00:16:42,980
classes of vulnerabilities we keep

358
00:16:42,980 --> 00:16:45,680
making the same mistakes now to be fair

359
00:16:45,680 --> 00:16:48,589
if I look at top 10 for this year there

360
00:16:48,589 --> 00:16:51,170
are still a lot of these classes of

361
00:16:51,170 --> 00:16:53,240
attacks on that list but some of them

362
00:16:53,240 --> 00:16:54,709
that we see here are actually things

363
00:16:54,709 --> 00:16:56,509
that are not so prevalent on the open

364
00:16:56,509 --> 00:17:02,660
web anymore now if I look at one of

365
00:17:02,660 --> 00:17:05,959
these in particular just to show you how

366
00:17:05,959 --> 00:17:11,390
simple this is so on ilo4 there was an

367
00:17:11,390 --> 00:17:12,740
authentication bypass and remote code

368
00:17:12,740 --> 00:17:15,199
execution now it turned out that what

369
00:17:15,199 --> 00:17:17,000
happened was your your remember you're

370
00:17:17,000 --> 00:17:19,549
actually calling a HTTP server which is

371
00:17:19,549 --> 00:17:23,419
going to run a cgi and that cgi is a

372
00:17:23,419 --> 00:17:25,730
compiled binary and in this case it was

373
00:17:25,730 --> 00:17:28,520
reporting the request headers using stir

374
00:17:28,520 --> 00:17:31,730
Comp stir stir and stir sscanf these are

375
00:17:31,730 --> 00:17:34,130
well known insecure functions that have

376
00:17:34,130 --> 00:17:38,270
problematic error behaviors well they

377
00:17:38,270 --> 00:17:40,429
were copying the value of the connection

378
00:17:40,429 --> 00:17:43,220
header into a 16 byte buffer but because

379
00:17:43,220 --> 00:17:44,960
of the way they implemented it it wasn't

380
00:17:44,960 --> 00:17:46,429
checking the length of what was being

381
00:17:46,429 --> 00:17:48,540
passed so it wasn't just copying

382
00:17:48,540 --> 00:17:50,340
first 16 characters of the connection

383
00:17:50,340 --> 00:17:52,290
header it was copying everything which

384
00:17:52,290 --> 00:17:54,030
meant you could scribble over whatever

385
00:17:54,030 --> 00:17:57,240
was after that so the entire exploit is

386
00:17:57,240 --> 00:17:58,950
right there if you run that curl command

387
00:17:58,950 --> 00:18:03,300
you will actually crash an ILO 4 and if

388
00:18:03,300 --> 00:18:04,620
you're very careful about it and Pat it

389
00:18:04,620 --> 00:18:06,180
just right you can actually overwrite

390
00:18:06,180 --> 00:18:09,600
the security information inside of the

391
00:18:09,600 --> 00:18:11,280
context that happens to be stored right

392
00:18:11,280 --> 00:18:13,620
next to this connection header field in

393
00:18:13,620 --> 00:18:15,720
memory and completely gain remote access

394
00:18:15,720 --> 00:18:18,320
into it as well as remote code execution

395
00:18:18,320 --> 00:18:20,610
this is how simple some of these attacks

396
00:18:20,610 --> 00:18:26,070
actually are now you might say well why

397
00:18:26,070 --> 00:18:29,070
is that bad well most of the BMC's I

398
00:18:29,070 --> 00:18:31,740
look at run everything as root the HTTP

399
00:18:31,740 --> 00:18:33,480
servers running as root the CG eyes are

400
00:18:33,480 --> 00:18:35,820
running as root there is no reason for

401
00:18:35,820 --> 00:18:40,560
this the IOT world is better at building

402
00:18:40,560 --> 00:18:42,750
up privilege separation than this right

403
00:18:42,750 --> 00:18:45,660
this is this is a real major problem and

404
00:18:45,660 --> 00:18:47,370
there's certainly design issues at play

405
00:18:47,370 --> 00:18:49,910
here like some of the systems use

406
00:18:49,910 --> 00:18:52,080
various IPC mechanisms that would be

407
00:18:52,080 --> 00:18:53,210
harder if you did privilege separation

408
00:18:53,210 --> 00:18:56,100
but this is really a thing there is no

409
00:18:56,100 --> 00:18:57,810
defense in depth if I can get one

410
00:18:57,810 --> 00:19:01,170
foothold into any process running any

411
00:19:01,170 --> 00:19:04,220
CGI script I have full access to the BMC

412
00:19:04,220 --> 00:19:07,670
it's that simple

413
00:19:08,870 --> 00:19:12,000
ok let's talk about unsigned firmware

414
00:19:12,000 --> 00:19:16,410
and updates so I'm gonna pick on Super

415
00:19:16,410 --> 00:19:19,550
Micro I'm sorry they're an easy target

416
00:19:19,550 --> 00:19:21,900
they are great people I like working

417
00:19:21,900 --> 00:19:27,420
with them so if I look at a super micro

418
00:19:27,420 --> 00:19:31,020
x10 BMC first of all note that they

419
00:19:31,020 --> 00:19:32,940
actually use the same BMC across their

420
00:19:32,940 --> 00:19:34,620
entire product line so it's the exact

421
00:19:34,620 --> 00:19:36,300
same firmware image across all of their

422
00:19:36,300 --> 00:19:39,090
x10 platforms well if I take a look at

423
00:19:39,090 --> 00:19:41,610
the actual BMC update file it's actually

424
00:19:41,610 --> 00:19:46,110
just a dump of a flash image so

425
00:19:46,110 --> 00:19:48,120
essentially it's going to you know take

426
00:19:48,120 --> 00:19:49,530
this image and just write it out to the

427
00:19:49,530 --> 00:19:51,770
flash now it turns out that they have

428
00:19:51,770 --> 00:19:54,060
broken it up into sections as you might

429
00:19:54,060 --> 00:19:55,860
expect for a typical embedded Linux

430
00:19:55,860 --> 00:19:57,600
system and that's because it is a

431
00:19:57,600 --> 00:19:59,910
typical embedded Linux system now there

432
00:19:59,910 --> 00:20:01,890
is one thing that at the end there's a

433
00:20:01,890 --> 00:20:03,929
this section called the image tags that

434
00:20:03,929 --> 00:20:05,790
basically is self describing of the

435
00:20:05,790 --> 00:20:08,220
image so by searching for this region in

436
00:20:08,220 --> 00:20:11,190
the the binary the updater knows ok this

437
00:20:11,190 --> 00:20:13,620
section you know here's the start offset

438
00:20:13,620 --> 00:20:15,900
here's the end offset here's the crc32

439
00:20:15,900 --> 00:20:17,429
and here's what my name of that binary

440
00:20:17,429 --> 00:20:20,220
is it basically tells me everything I

441
00:20:20,220 --> 00:20:22,530
need can anybody tell me what's missing

442
00:20:22,530 --> 00:20:31,410
a signature right like there's a crc32

443
00:20:31,410 --> 00:20:33,030
which is gonna tell me whether or not a

444
00:20:33,030 --> 00:20:35,130
bit got flipped but there's absolutely

445
00:20:35,130 --> 00:20:40,110
no security in this at all right so what

446
00:20:40,110 --> 00:20:42,960
happened when we looked at x11

447
00:20:42,960 --> 00:20:44,549
maybe they got better in there their

448
00:20:44,549 --> 00:20:46,700
next generation well they kinda did

449
00:20:46,700 --> 00:20:49,980
right so the layout is actually the same

450
00:20:49,980 --> 00:20:52,020
as the next n it's just that

451
00:20:52,020 --> 00:20:54,870
they used a EES to actually encrypt the

452
00:20:54,870 --> 00:20:57,570
very first 96 bytes of each of the file

453
00:20:57,570 --> 00:21:00,360
systems of the read-only file systems so

454
00:21:00,360 --> 00:21:02,070
they'd be they wouldn't be detected as a

455
00:21:02,070 --> 00:21:05,940
normal crime FS file system but the rest

456
00:21:05,940 --> 00:21:07,710
of the file system was completely

457
00:21:07,710 --> 00:21:09,330
unencrypted it was only the first 96

458
00:21:09,330 --> 00:21:13,320
bytes but then and they also encrypted

459
00:21:13,320 --> 00:21:17,280
the image tags but of course because I

460
00:21:17,280 --> 00:21:19,470
can read most of the file system and I

461
00:21:19,470 --> 00:21:22,980
know that it has to be unencrypted when

462
00:21:22,980 --> 00:21:24,540
it actually writes it to the file system

463
00:21:24,540 --> 00:21:26,640
or writes it to the actual flash part i

464
00:21:26,640 --> 00:21:29,250
we can just go looking and what do you

465
00:21:29,250 --> 00:21:31,770
know the actual AES keys and and

466
00:21:31,770 --> 00:21:33,360
everything are actually in a firmware

467
00:21:33,360 --> 00:21:35,160
update or binary that happens to not be

468
00:21:35,160 --> 00:21:38,160
encrypted by the encryption right

469
00:21:38,160 --> 00:21:40,440
so from there you can just go ahead and

470
00:21:40,440 --> 00:21:41,880
pull all the information out decrypt it

471
00:21:41,880 --> 00:21:44,340
and again you're back to well yeah they

472
00:21:44,340 --> 00:21:46,740
did encrypt it but not enough to

473
00:21:46,740 --> 00:21:48,480
actually prevent an attacker right it's

474
00:21:48,480 --> 00:21:49,890
gonna stop someone from casually

475
00:21:49,890 --> 00:21:51,990
updating it but it's not comprehensive

476
00:21:51,990 --> 00:21:57,540
in any way ok well well maybe if I write

477
00:21:57,540 --> 00:22:00,510
a bad image right maybe I'll be it'll be

478
00:22:00,510 --> 00:22:04,440
caught on the next boot well really only

479
00:22:04,440 --> 00:22:08,580
the latest latest BMC's even have secure

480
00:22:08,580 --> 00:22:11,940
boot in the hardware so I listed a

481
00:22:11,940 --> 00:22:14,400
couple that I I'm aware of there may be

482
00:22:14,400 --> 00:22:15,600
others but

483
00:22:15,600 --> 00:22:18,299
you know most of the systems that I

484
00:22:18,299 --> 00:22:21,030
encounter use a speed ast 25 hundreds it

485
00:22:21,030 --> 00:22:22,380
does not have secure boot it's just

486
00:22:22,380 --> 00:22:25,650
simply not an option the the CPUs are

487
00:22:25,650 --> 00:22:26,789
just going to load whatever the first

488
00:22:26,789 --> 00:22:28,669
age bootloader is and go from there now

489
00:22:28,669 --> 00:22:30,750
the other thing is that even if the

490
00:22:30,750 --> 00:22:34,830
hardware has that initial stage of the

491
00:22:34,830 --> 00:22:36,539
rom verifying the first stage bootloader

492
00:22:36,539 --> 00:22:38,280
you actually have to fill out a full

493
00:22:38,280 --> 00:22:40,049
chain of that verification

494
00:22:40,049 --> 00:22:41,370
so the SSC has de Velde at the

495
00:22:41,370 --> 00:22:42,690
bootloader the bootloader has developed

496
00:22:42,690 --> 00:22:43,740
it's the kernel the kernel has stability

497
00:22:43,740 --> 00:22:45,750
at the file systems if you've worked

498
00:22:45,750 --> 00:22:47,190
with Chromebooks you know what this

499
00:22:47,190 --> 00:22:48,750
scheme looks like if you've worked

500
00:22:48,750 --> 00:22:50,100
Android you know what this scheme looks

501
00:22:50,100 --> 00:22:53,070
like this scheme is not implemented on

502
00:22:53,070 --> 00:22:56,640
bmc's and then there's the question of

503
00:22:56,640 --> 00:22:57,780
what do you do when the verification

504
00:22:57,780 --> 00:23:01,650
fails right if I write a bad image and I

505
00:23:01,650 --> 00:23:04,470
know that the signature fails if I'm in

506
00:23:04,470 --> 00:23:05,970
an enterprise server product do I

507
00:23:05,970 --> 00:23:07,919
actually want to stop the machine at

508
00:23:07,919 --> 00:23:10,559
this point should I should it

509
00:23:10,559 --> 00:23:11,940
effectively brick it or should I

510
00:23:11,940 --> 00:23:14,159
actually go ahead and boot the image but

511
00:23:14,159 --> 00:23:17,630
notify somebody that it's actually

512
00:23:17,960 --> 00:23:20,880
running unsigned images or been

513
00:23:20,880 --> 00:23:22,559
compromised so you can come back and

514
00:23:22,559 --> 00:23:24,240
look at it these are actually policy

515
00:23:24,240 --> 00:23:26,280
decisions and it's this gets into a hard

516
00:23:26,280 --> 00:23:28,049
part of this some folks are actually

517
00:23:28,049 --> 00:23:30,150
afraid of implementing secure boot and a

518
00:23:30,150 --> 00:23:32,220
full verified chain because the recovery

519
00:23:32,220 --> 00:23:35,340
story is hard I shouldn't really stop

520
00:23:35,340 --> 00:23:36,900
this we should be building things to be

521
00:23:36,900 --> 00:23:38,730
as secure as possible and figure out

522
00:23:38,730 --> 00:23:42,049
what the the right mechanism is right

523
00:23:42,049 --> 00:23:44,120
I'm sorry

524
00:23:44,120 --> 00:23:46,289
you could have redundant images like

525
00:23:46,289 --> 00:23:47,730
that's certainly a way to solve this

526
00:23:47,730 --> 00:23:49,710
problem but that requires you to put

527
00:23:49,710 --> 00:23:52,559
down bigger flashes and what do you do

528
00:23:52,559 --> 00:23:55,470
if both images are broken right so that

529
00:23:55,470 --> 00:23:56,850
there's ways of solving this problem

530
00:23:56,850 --> 00:23:58,710
it's just that people haven't done it

531
00:23:58,710 --> 00:24:05,520
for the most part you could there's

532
00:24:05,520 --> 00:24:07,049
certainly ways of solving it I mean I I

533
00:24:07,049 --> 00:24:09,870
know that there are it's just how many

534
00:24:09,870 --> 00:24:11,309
servers do you know whether implement

535
00:24:11,309 --> 00:24:17,039
any of those schemes on their BMC all

536
00:24:17,039 --> 00:24:21,979
right management networks

537
00:24:21,979 --> 00:24:24,389
when you typically deploy a BMC the

538
00:24:24,389 --> 00:24:26,519
common guidance is do not put the BMC on

539
00:24:26,519 --> 00:24:28,619
your main data network instead put it on

540
00:24:28,619 --> 00:24:30,659
an isolated management network that then

541
00:24:30,659 --> 00:24:32,789
you restrict access to because we know

542
00:24:32,789 --> 00:24:35,099
the MCS are insecure

543
00:24:35,099 --> 00:24:38,279
so just segment it okay all right so I

544
00:24:38,279 --> 00:24:40,169
go through the expense of putting in my

545
00:24:40,169 --> 00:24:41,879
extra switch and running all the extra

546
00:24:41,879 --> 00:24:43,919
cabling and this also gives me a nice

547
00:24:43,919 --> 00:24:46,499
nice ability that if for some reason I

548
00:24:46,499 --> 00:24:47,909
bring that in the data plane and I need

549
00:24:47,909 --> 00:24:50,519
to be able to hit management I can so

550
00:24:50,519 --> 00:24:51,839
usually that management switch would

551
00:24:51,839 --> 00:24:53,879
actually have a path to the BMC in the

552
00:24:53,879 --> 00:24:55,919
data switch because switches have bmc's

553
00:24:55,919 --> 00:25:00,569
now ok well but what does this give me

554
00:25:00,569 --> 00:25:04,049
from an attackers standpoint well let's

555
00:25:04,049 --> 00:25:06,629
talk about advanced lateral movement so

556
00:25:06,629 --> 00:25:08,579
imagine I have two servers in the same

557
00:25:08,579 --> 00:25:11,699
rack those they could actually be in

558
00:25:11,699 --> 00:25:12,839
different racks but assume that I have

559
00:25:12,839 --> 00:25:14,999
two servers in the same facility so one

560
00:25:14,999 --> 00:25:16,829
of the server's head is mapped directly

561
00:25:16,829 --> 00:25:17,939
out onto the Internet it's your

562
00:25:17,939 --> 00:25:20,639
front-end serving traffic and the next

563
00:25:20,639 --> 00:25:22,649
server over is actually only connected

564
00:25:22,649 --> 00:25:24,629
to your internal network right there

565
00:25:24,629 --> 00:25:26,459
they're isolated as far as the data

566
00:25:26,459 --> 00:25:30,839
networks are concerned so no traffic can

567
00:25:30,839 --> 00:25:32,609
actually get from the internet directly

568
00:25:32,609 --> 00:25:33,539
into your private cloud

569
00:25:33,539 --> 00:25:37,619
there's just no hop there and if I gain

570
00:25:37,619 --> 00:25:39,179
access to these servers they don't have

571
00:25:39,179 --> 00:25:41,639
a direct path even over their data

572
00:25:41,639 --> 00:25:45,809
network right but if I can compromise

573
00:25:45,809 --> 00:25:47,429
the server that's actually connected

574
00:25:47,429 --> 00:25:49,289
over to the Internet

575
00:25:49,289 --> 00:25:53,129
I can leverage the BMC network to

576
00:25:53,129 --> 00:25:54,299
actually go and attack all the other

577
00:25:54,299 --> 00:25:55,889
machine all the other BMC's that are on

578
00:25:55,889 --> 00:25:57,539
that same network so you've actually

579
00:25:57,539 --> 00:26:00,239
given me a backdoor into this so

580
00:26:00,239 --> 00:26:03,359
ultimately this is kind of a planning

581
00:26:03,359 --> 00:26:05,549
exercise problem of if you're building

582
00:26:05,549 --> 00:26:07,079
out a separate management network you

583
00:26:07,079 --> 00:26:08,069
actually have to build out separate

584
00:26:08,069 --> 00:26:10,079
management networks that also think

585
00:26:10,079 --> 00:26:12,359
through the attack vector of what data

586
00:26:12,359 --> 00:26:14,099
network would I be coming into and what

587
00:26:14,099 --> 00:26:15,629
would happen if the host was compromised

588
00:26:15,629 --> 00:26:17,879
we wouldn't usually think about that all

589
00:26:17,879 --> 00:26:18,839
right we're usually thinking about the

590
00:26:18,839 --> 00:26:20,429
the a single management network as a

591
00:26:20,429 --> 00:26:22,919
backup option but it actually provides

592
00:26:22,919 --> 00:26:27,329
me as an attacker a nice feature so how

593
00:26:27,329 --> 00:26:29,429
many be MCS but but that doesn't

594
00:26:29,429 --> 00:26:31,739
actually matter that much when people

595
00:26:31,739 --> 00:26:33,649
just put their bmc's on the internet

596
00:26:33,649 --> 00:26:35,350
there's actually 90

597
00:26:35,350 --> 00:26:37,330
2,000 of them per showed in this of

598
00:26:37,330 --> 00:26:40,660
about two weeks ago so you know I can

599
00:26:40,660 --> 00:26:44,110
just go ahead and connect to them and

600
00:26:44,110 --> 00:26:45,370
remember all those wonderful

601
00:26:45,370 --> 00:26:50,440
ipmi attacks there's a lot of them out

602
00:26:50,440 --> 00:26:51,120
there

603
00:26:51,120 --> 00:26:54,850
all right so management it works but

604
00:26:54,850 --> 00:26:56,440
what if I come at it from the other

605
00:26:56,440 --> 00:26:57,850
direction right we can trust the hosts

606
00:26:57,850 --> 00:26:59,980
well talked about that a little bit when

607
00:26:59,980 --> 00:27:01,620
you talk about local interfaces right

608
00:27:01,620 --> 00:27:06,010
what about in a case where I am running

609
00:27:06,010 --> 00:27:09,640
a bare-metal virtual machine no long now

610
00:27:09,640 --> 00:27:11,140
I'm running code that I don't trust on

611
00:27:11,140 --> 00:27:12,520
the host and in fact I'm relying on the

612
00:27:12,520 --> 00:27:14,500
BMC is of what mechanism to regain

613
00:27:14,500 --> 00:27:17,980
control of the system well that's

614
00:27:17,980 --> 00:27:19,510
certainly one model that we can we can

615
00:27:19,510 --> 00:27:23,049
talk about um you know if I'm relying on

616
00:27:23,049 --> 00:27:24,610
it as my sole control mechanism then

617
00:27:24,610 --> 00:27:26,500
then that's somewhat problematic right I

618
00:27:26,500 --> 00:27:29,590
just don't want to trust hosts well but

619
00:27:29,590 --> 00:27:30,850
there's also the cases of well what if I

620
00:27:30,850 --> 00:27:33,520
compromised a host right this gets it

621
00:27:33,520 --> 00:27:35,440
back to the the advanced lateral

622
00:27:35,440 --> 00:27:38,289
movement if the host can become is

623
00:27:38,289 --> 00:27:40,630
compromised then being able to

624
00:27:40,630 --> 00:27:42,370
compromise the BMC from the host gives

625
00:27:42,370 --> 00:27:45,400
you an additional step and you really we

626
00:27:45,400 --> 00:27:47,679
can close that door there's not a whole

627
00:27:47,679 --> 00:27:49,750
lot of reason that we need the level of

628
00:27:49,750 --> 00:27:51,190
access that you would need to go from

629
00:27:51,190 --> 00:27:53,320
the host to the BMC most of the time

630
00:27:53,320 --> 00:27:54,990
that's not necessary

631
00:27:54,990 --> 00:27:58,950
there's also times where we just from a

632
00:27:58,950 --> 00:28:01,390
deployment strategy we may not want to

633
00:28:01,390 --> 00:28:03,580
actually trust the host even in a single

634
00:28:03,580 --> 00:28:05,080
environment you might have an IT group

635
00:28:05,080 --> 00:28:08,169
that manages the hardware you know the

636
00:28:08,169 --> 00:28:10,570
minute they use the BMC to keep control

637
00:28:10,570 --> 00:28:13,720
of it but they actually have the OS side

638
00:28:13,720 --> 00:28:15,429
of things you know the host side handed

639
00:28:15,429 --> 00:28:16,900
off to a separate business unit that

640
00:28:16,900 --> 00:28:20,260
maintains that on its own and it really

641
00:28:20,260 --> 00:28:21,580
starts to look like a bare metal VM

642
00:28:21,580 --> 00:28:23,380
model but maybe it doesn't actually have

643
00:28:23,380 --> 00:28:25,120
all the fancy features of allocating

644
00:28:25,120 --> 00:28:27,700
UVM's and things like that but you still

645
00:28:27,700 --> 00:28:30,850
have the same problem of the BMC should

646
00:28:30,850 --> 00:28:35,320
not be implicitly trusting the host well

647
00:28:35,320 --> 00:28:38,919
why what sort of attacks can we do well

648
00:28:38,919 --> 00:28:42,730
NCSI so NCSI is a wonderful feature to

649
00:28:42,730 --> 00:28:45,090
let you use a single network interface

650
00:28:45,090 --> 00:28:48,130
beat for both your host system and your

651
00:28:48,130 --> 00:28:49,360
BMC

652
00:28:49,360 --> 00:28:53,410
well the hosts by defaults gonna receive

653
00:28:53,410 --> 00:28:55,360
all its traffic and the BMC sends some

654
00:28:55,360 --> 00:28:57,820
careful packets over its NCSI interface

655
00:28:57,820 --> 00:28:59,590
to say please filter this traffic and

656
00:28:59,590 --> 00:29:03,220
send it to me well it turns out that

657
00:29:03,220 --> 00:29:06,730
some folks are working on the wraptor

658
00:29:06,730 --> 00:29:09,790
computing talos workstations really are

659
00:29:09,790 --> 00:29:12,760
wanting to figure out all be able to

660
00:29:12,760 --> 00:29:14,500
release open source firmware for all of

661
00:29:14,500 --> 00:29:16,420
the components in that system so as part

662
00:29:16,420 --> 00:29:18,310
of that they began reverse engineering

663
00:29:18,310 --> 00:29:20,740
the Broadcom Gigabit Ethernet chip

664
00:29:20,740 --> 00:29:22,810
that's on that system and so that's

665
00:29:22,810 --> 00:29:25,180
called a project ortega documents this

666
00:29:25,180 --> 00:29:26,050
they're doing it as a cleanroom

667
00:29:26,050 --> 00:29:27,130
implementation where they've done the

668
00:29:27,130 --> 00:29:28,360
reverse engineering with one team

669
00:29:28,360 --> 00:29:29,950
writing up documentation then another

670
00:29:29,950 --> 00:29:31,300
team is then taking to actually

671
00:29:31,300 --> 00:29:33,520
implement a cleanroom version of the the

672
00:29:33,520 --> 00:29:37,030
firmware well out of curiosity I started

673
00:29:37,030 --> 00:29:39,010
poking through the documentation and it

674
00:29:39,010 --> 00:29:41,340
turns out that inside of these chips

675
00:29:41,340 --> 00:29:43,660
there are actually multiple cores and

676
00:29:43,660 --> 00:29:45,010
it's actually a mix there's actually two

677
00:29:45,010 --> 00:29:47,890
MIPS cores and a cortex m3 inside of one

678
00:29:47,890 --> 00:29:51,610
of these things and all of these can

679
00:29:51,610 --> 00:29:54,940
boot from firmware images stored in the

680
00:29:54,940 --> 00:29:57,700
actual EEPROM attached with the gigabit

681
00:29:57,700 --> 00:30:00,130
controller but they also have the

682
00:30:00,130 --> 00:30:01,810
ability for the host to push firmware to

683
00:30:01,810 --> 00:30:04,630
them well that makes sense in the

684
00:30:04,630 --> 00:30:07,390
context of this is a NIC for the host

685
00:30:07,390 --> 00:30:09,280
right so the host should be able to go

686
00:30:09,280 --> 00:30:12,070
ahead and update the firmware on it but

687
00:30:12,070 --> 00:30:15,070
the way NCS is implemented inside of

688
00:30:15,070 --> 00:30:19,140
this NIC is actually that the cortex m3

689
00:30:19,140 --> 00:30:24,130
gets its firmware normally from a PCI

690
00:30:24,130 --> 00:30:27,340
option ROM and that firmware is unsigned

691
00:30:27,340 --> 00:30:29,740
and it just so happens that that

692
00:30:29,740 --> 00:30:31,750
firmware is what actually handles the

693
00:30:31,750 --> 00:30:35,710
traffic from NCSI so all of the NCSI

694
00:30:35,710 --> 00:30:38,470
traffic gets processed by firmware that

695
00:30:38,470 --> 00:30:44,050
can be changed by the host now if I have

696
00:30:44,050 --> 00:30:47,200
a hostile host it takes some work but I

697
00:30:47,200 --> 00:30:49,120
can intercept all management traffic to

698
00:30:49,120 --> 00:30:54,340
and from your BMC okay and that's that's

699
00:30:54,340 --> 00:30:56,580
not good

700
00:30:58,800 --> 00:31:04,830
but it gets there's even more so M CTP M

701
00:31:04,830 --> 00:31:07,020
CTP is kind of a complex topic but we're

702
00:31:07,020 --> 00:31:09,360
going to focus on one part of it so at

703
00:31:09,360 --> 00:31:11,760
its core it provides sort of an if you

704
00:31:11,760 --> 00:31:14,280
think of like the the concept of an

705
00:31:14,280 --> 00:31:15,600
overlay Network you're essentially

706
00:31:15,600 --> 00:31:17,010
building a routable network out of

707
00:31:17,010 --> 00:31:19,110
various types of connector buses and

708
00:31:19,110 --> 00:31:21,240
connections on the system so it carries

709
00:31:21,240 --> 00:31:23,520
traffic over I squared C or PCIe or

710
00:31:23,520 --> 00:31:27,000
whatever is available to you in the case

711
00:31:27,000 --> 00:31:30,090
of PCIe M CTP is handled through a

712
00:31:30,090 --> 00:31:33,150
vendor defined messages and these are

713
00:31:33,150 --> 00:31:34,620
specified in the PCIe based

714
00:31:34,620 --> 00:31:36,870
specification so essentially you you

715
00:31:36,870 --> 00:31:39,410
have a way of being able to send these

716
00:31:39,410 --> 00:31:43,140
messages that are intended as carrying

717
00:31:43,140 --> 00:31:45,390
data that's not really defined by this

718
00:31:45,390 --> 00:31:46,800
pack and it's not really part of the

719
00:31:46,800 --> 00:31:48,440
main functionality of the device usually

720
00:31:48,440 --> 00:31:51,300
some sort of out-of-band data for but

721
00:31:51,300 --> 00:31:54,630
you're carrying it over PCI well VD Em's

722
00:31:54,630 --> 00:31:57,330
by their nature can be routed in a

723
00:31:57,330 --> 00:31:59,310
couple of different ways now the common

724
00:31:59,310 --> 00:32:02,520
use in PCI is that you send data to the

725
00:32:02,520 --> 00:32:05,070
route complex and that's to get access

726
00:32:05,070 --> 00:32:06,480
back to the host right the host is going

727
00:32:06,480 --> 00:32:07,920
to interact with whatever your PCIe

728
00:32:07,920 --> 00:32:11,850
devices are but you also have things

729
00:32:11,850 --> 00:32:15,150
like a broadcast from the route complex

730
00:32:15,150 --> 00:32:15,840
when you're trying to actually

731
00:32:15,840 --> 00:32:19,110
communicate data down downward but more

732
00:32:19,110 --> 00:32:20,550
interesting is when you end up in a case

733
00:32:20,550 --> 00:32:22,470
where you're using peer-to-peer traffic

734
00:32:22,470 --> 00:32:25,110
so you're actually addressing M CTP or

735
00:32:25,110 --> 00:32:27,810
you're addressing V DMS to another from

736
00:32:27,810 --> 00:32:29,180
one device to another

737
00:32:29,180 --> 00:32:32,010
well it's using the peer-to-peer

738
00:32:32,010 --> 00:32:33,930
functionality in PCIe and this is

739
00:32:33,930 --> 00:32:38,010
available to allow device high bandwidth

740
00:32:38,010 --> 00:32:40,080
devices you can do like offloading where

741
00:32:40,080 --> 00:32:42,510
your SSD can actually push the data

742
00:32:42,510 --> 00:32:44,850
directly into your NIC without passing

743
00:32:44,850 --> 00:32:47,100
through the CPU and and the system

744
00:32:47,100 --> 00:32:50,580
memory but there's also security

745
00:32:50,580 --> 00:32:53,880
implications of having that open so in

746
00:32:53,880 --> 00:32:54,900
modern systems when you're running

747
00:32:54,900 --> 00:32:58,380
things like you know virtualization and

748
00:32:58,380 --> 00:32:59,460
you're running VMs and you're doing

749
00:32:59,460 --> 00:33:02,850
device allocation you'll often disable

750
00:33:02,850 --> 00:33:04,680
peer-to-peer traffic and force it to go

751
00:33:04,680 --> 00:33:05,940
back through the host as a way to

752
00:33:05,940 --> 00:33:08,040
enforce some security on isolating

753
00:33:08,040 --> 00:33:12,360
individual devices well the route

754
00:33:12,360 --> 00:33:13,920
complex gets to make that choice right

755
00:33:13,920 --> 00:33:15,660
and the root complex is actually owned

756
00:33:15,660 --> 00:33:18,840
by the hosts so the host has an option

757
00:33:18,840 --> 00:33:20,370
to say peer-to-peer traffic isn't

758
00:33:20,370 --> 00:33:24,690
allowed well then how does device by ID

759
00:33:24,690 --> 00:33:30,750
routing work well instead these VD MS

760
00:33:30,750 --> 00:33:33,030
that are device by ID routed gets sent

761
00:33:33,030 --> 00:33:35,070
up to the root complex who's then

762
00:33:35,070 --> 00:33:36,600
responsible for turning them around and

763
00:33:36,600 --> 00:33:40,170
setting them back down in concept this

764
00:33:40,170 --> 00:33:42,660
has never been demonstrated yet but in

765
00:33:42,660 --> 00:33:45,419
concept this means that the host via the

766
00:33:45,419 --> 00:33:47,640
PCIe root complex has the ability to

767
00:33:47,640 --> 00:33:50,070
intercept M CTP traffic even if it

768
00:33:50,070 --> 00:33:57,870
wasn't suppose to so just to make this a

769
00:33:57,870 --> 00:33:59,760
little bit more clear so in a case when

770
00:33:59,760 --> 00:34:01,350
you have peer-to-peer and the root

771
00:34:01,350 --> 00:34:04,260
allows it the BMC is gonna send say NCSI

772
00:34:04,260 --> 00:34:07,650
traffic 4 over m CTP and it's gonna send

773
00:34:07,650 --> 00:34:09,359
that up to the PCIe switch which is then

774
00:34:09,359 --> 00:34:11,250
going to just immediately short-circuit

775
00:34:11,250 --> 00:34:15,510
it back down to the the NIC and it's

776
00:34:15,510 --> 00:34:17,100
going to handle that VD m and probably

777
00:34:17,100 --> 00:34:19,679
send a response back but in a case where

778
00:34:19,679 --> 00:34:21,239
you disable to peer to peer traffic it

779
00:34:21,239 --> 00:34:22,560
has to actually punt it all the way up

780
00:34:22,560 --> 00:34:24,030
to the root complex and the root complex

781
00:34:24,030 --> 00:34:27,290
has to push it all the way back down so

782
00:34:30,080 --> 00:34:32,250
with all these in mind and we keep

783
00:34:32,250 --> 00:34:33,690
making these mistakes right we keep

784
00:34:33,690 --> 00:34:35,909
trusting the hosts we keep building out

785
00:34:35,909 --> 00:34:37,560
management at works we keep making web

786
00:34:37,560 --> 00:34:40,020
security mistakes how do we evaluate our

787
00:34:40,020 --> 00:34:43,050
designs to actually figure out where we

788
00:34:43,050 --> 00:34:44,190
need to pay attention and how do we

789
00:34:44,190 --> 00:34:46,290
think about what's going to be an actual

790
00:34:46,290 --> 00:34:49,560
attack vector for a system well I'm

791
00:34:49,560 --> 00:34:50,940
gonna make a few assumptions about a

792
00:34:50,940 --> 00:34:53,790
threat model for BMC's so first of all

793
00:34:53,790 --> 00:34:56,429
if you have to open the case of the

794
00:34:56,429 --> 00:34:58,050
server I'm saying that's out of scope

795
00:34:58,050 --> 00:35:01,020
right that's that's physical attack now

796
00:35:01,020 --> 00:35:02,660
the reason I say case open is because

797
00:35:02,660 --> 00:35:05,790
there are ports accessible and physical

798
00:35:05,790 --> 00:35:08,070
presence where I just plug something in

799
00:35:08,070 --> 00:35:10,320
is a lot simpler than actually opening

800
00:35:10,320 --> 00:35:13,290
the Machine and flashing the bios right

801
00:35:13,290 --> 00:35:13,770
there

802
00:35:13,770 --> 00:35:16,230
so only the latter case is going to be

803
00:35:16,230 --> 00:35:19,200
out of scope I'm going to explicitly

804
00:35:19,200 --> 00:35:22,200
include bare metal VM use case I am

805
00:35:22,200 --> 00:35:25,470
going to assume that the BMC is

806
00:35:25,470 --> 00:35:26,190
primarily

807
00:35:26,190 --> 00:35:28,020
used for control of the system and that

808
00:35:28,020 --> 00:35:31,680
the host is potentially hostile and

809
00:35:31,680 --> 00:35:35,250
should be treated as such I'm also going

810
00:35:35,250 --> 00:35:36,660
to assume that the BMC is the highest

811
00:35:36,660 --> 00:35:38,609
value device in the server I know me

812
00:35:38,609 --> 00:35:40,109
from monetary cost I mean from attack

813
00:35:40,109 --> 00:35:42,300
perspective it's the most privileged

814
00:35:42,300 --> 00:35:47,970
thing in the system if I can get control

815
00:35:47,970 --> 00:35:50,579
the BMC I'm very very very likely to get

816
00:35:50,579 --> 00:35:52,380
control over the host and it may be able

817
00:35:52,380 --> 00:35:53,849
to entirely subvert the reader trust

818
00:35:53,849 --> 00:35:58,980
that the host uses to validate itself so

819
00:35:58,980 --> 00:36:02,940
this is a typical SOC architecture sorry

820
00:36:02,940 --> 00:36:04,200
for the eye chart it's hard to fit

821
00:36:04,200 --> 00:36:08,220
everything in there but things in black

822
00:36:08,220 --> 00:36:10,109
are actually the components that are

823
00:36:10,109 --> 00:36:13,290
truly what the BMC firmware itself runs

824
00:36:13,290 --> 00:36:15,720
on right this is the CPU and the flash

825
00:36:15,720 --> 00:36:18,060
part for the BMC firmware and it's local

826
00:36:18,060 --> 00:36:20,670
memory sometimes they even have a USB

827
00:36:20,670 --> 00:36:25,950
host port things in dark blue are sort

828
00:36:25,950 --> 00:36:28,500
of the local peripherals that it's using

829
00:36:28,500 --> 00:36:31,680
to in control the overall system like

830
00:36:31,680 --> 00:36:34,109
fan control monitoring voltage sensors

831
00:36:34,109 --> 00:36:36,390
and things in light blue we have the

832
00:36:36,390 --> 00:36:38,790
ethernet interfaces could be NCSI could

833
00:36:38,790 --> 00:36:41,460
be a physical jack and then the things

834
00:36:41,460 --> 00:36:42,720
in green are really sort of these

835
00:36:42,720 --> 00:36:45,450
peripherals that exist in the BMC but

836
00:36:45,450 --> 00:36:48,210
are in some way used by the host right

837
00:36:48,210 --> 00:36:50,970
there they're intentionally a place

838
00:36:50,970 --> 00:36:52,349
where those security models are going to

839
00:36:52,349 --> 00:36:55,950
meet well this starts to define a couple

840
00:36:55,950 --> 00:36:57,720
of boundaries and so you know part of

841
00:36:57,720 --> 00:36:59,369
threat modeling is actually establishing

842
00:36:59,369 --> 00:37:00,750
points where you need to look at the

843
00:37:00,750 --> 00:37:02,220
transitions from one domain to another

844
00:37:02,220 --> 00:37:04,920
so in this case we see you know the host

845
00:37:04,920 --> 00:37:08,130
primarily comes over PCI Express LPC us

846
00:37:08,130 --> 00:37:10,349
be without PC you could also expand that

847
00:37:10,349 --> 00:37:12,720
to be e spy and you know all the other

848
00:37:12,720 --> 00:37:15,390
low speed buses so that's certainly one

849
00:37:15,390 --> 00:37:16,710
boundary that we should be looking at

850
00:37:16,710 --> 00:37:18,420
but over on the other side we see that

851
00:37:18,420 --> 00:37:20,310
there's also the physical connectors on

852
00:37:20,310 --> 00:37:22,260
the server right so what do I actually

853
00:37:22,260 --> 00:37:24,810
have in terms of the the physical serial

854
00:37:24,810 --> 00:37:26,579
port right that's a domain that I cross

855
00:37:26,579 --> 00:37:28,230
if somebody can physically plug into it

856
00:37:28,230 --> 00:37:30,750
and then there and that also includes

857
00:37:30,750 --> 00:37:32,970
you know the USB host port for the BMC

858
00:37:32,970 --> 00:37:34,800
if it's physically populated and

859
00:37:34,800 --> 00:37:36,990
accessible then that becomes an attack

860
00:37:36,990 --> 00:37:39,540
vector and then the network

861
00:37:39,540 --> 00:37:41,370
interface itself is really its own

862
00:37:41,370 --> 00:37:44,310
attack space right it's it offers a

863
00:37:44,310 --> 00:37:50,460
remote X remote attack so if we start

864
00:37:50,460 --> 00:37:52,410
digging into these and we look at well

865
00:37:52,410 --> 00:37:57,300
what can the host do to the BMC so if I

866
00:37:57,300 --> 00:38:00,150
start asking myself the questions okay

867
00:38:00,150 --> 00:38:03,150
if I look at LPC and East by most of the

868
00:38:03,150 --> 00:38:04,530
time what you're routing over that is

869
00:38:04,530 --> 00:38:07,560
things like firmware access and classic

870
00:38:07,560 --> 00:38:12,300
IO ports so what IO ports are even

871
00:38:12,300 --> 00:38:13,800
available to the host have I actually

872
00:38:13,800 --> 00:38:15,510
restricted that to the minimum subset

873
00:38:15,510 --> 00:38:18,240
that I need and maybe I have to have it

874
00:38:18,240 --> 00:38:19,950
more open during an early part of boot

875
00:38:19,950 --> 00:38:21,420
and then close it back down but just

876
00:38:21,420 --> 00:38:23,190
completely assume that the host is

877
00:38:23,190 --> 00:38:25,620
hostile like what could it do via those

878
00:38:25,620 --> 00:38:28,350
ports and how would that affect the BMC

879
00:38:28,350 --> 00:38:30,960
and then what BMC Software acts on that

880
00:38:30,960 --> 00:38:33,420
if I'm exposing a virtual serial ports

881
00:38:33,420 --> 00:38:37,530
of the host how that virtual serial port

882
00:38:37,530 --> 00:38:41,760
driver becomes an attack vector I just

883
00:38:41,760 --> 00:38:45,480
had to find some exploit in it similar

884
00:38:45,480 --> 00:38:47,490
things with PCI Express what address

885
00:38:47,490 --> 00:38:50,430
mappings am i pushing out how many of

886
00:38:50,430 --> 00:38:52,140
you have looked at the address mapping

887
00:38:52,140 --> 00:38:55,170
set of BMC pushes over its vga interface

888
00:38:55,170 --> 00:38:58,890
to the host yeah there's like two hands

889
00:38:58,890 --> 00:39:03,090
three three four or five ok a few how

890
00:39:03,090 --> 00:39:06,720
many of you knew about the the pants

891
00:39:06,720 --> 00:39:10,680
down the a speed hole right so part of

892
00:39:10,680 --> 00:39:12,450
that is actually accessible through the

893
00:39:12,450 --> 00:39:17,310
PCI space right why why did it take us

894
00:39:17,310 --> 00:39:18,480
so long to actually deal with that

895
00:39:18,480 --> 00:39:22,860
problem have we sufficiently restricted

896
00:39:22,860 --> 00:39:24,900
the capabilities of these address

897
00:39:24,900 --> 00:39:27,660
mappings in the BMC address space so

898
00:39:27,660 --> 00:39:29,340
keep in mind these are address mappings

899
00:39:29,340 --> 00:39:31,710
maybe I need to have them maybe I need

900
00:39:31,710 --> 00:39:33,750
to be able to access a memory window

901
00:39:33,750 --> 00:39:36,810
inside the BMC but when the host makes a

902
00:39:36,810 --> 00:39:39,090
request have I restricted it so that say

903
00:39:39,090 --> 00:39:41,070
the DMA engine inside the BMC

904
00:39:41,070 --> 00:39:42,960
can only access the memory window that

905
00:39:42,960 --> 00:39:46,980
I've actually granted to the host often

906
00:39:46,980 --> 00:39:48,560
the case is no and I can actually

907
00:39:48,560 --> 00:39:51,180
arbitrarily perform DMA reads over the

908
00:39:51,180 --> 00:39:53,480
entire BMC address space

909
00:39:53,480 --> 00:39:55,829
again what software is running over

910
00:39:55,829 --> 00:39:58,349
these shared peripherals what can I do

911
00:39:58,349 --> 00:39:59,329
with it

912
00:39:59,329 --> 00:40:01,739
any device driver any user space

913
00:40:01,739 --> 00:40:03,420
software any data that comes via these

914
00:40:03,420 --> 00:40:04,890
interfaces has to be treated with

915
00:40:04,890 --> 00:40:06,749
suspicion and then needs to go through

916
00:40:06,749 --> 00:40:13,220
strict validation USB virtual hub I mean

917
00:40:13,220 --> 00:40:17,849
you're acting as a USB device if I'm a

918
00:40:17,849 --> 00:40:19,289
mass storage device what does it look

919
00:40:19,289 --> 00:40:21,029
like when the host sends me traffic am i

920
00:40:21,029 --> 00:40:23,130
handling that correctly how much face do

921
00:40:23,130 --> 00:40:25,769
we have in the linux gadget stack at

922
00:40:25,769 --> 00:40:33,509
four attacks what about over the land

923
00:40:33,509 --> 00:40:35,849
well what services are accessible right

924
00:40:35,849 --> 00:40:38,549
just like what ports are even open do

925
00:40:38,549 --> 00:40:40,440
these need to be open externally can I

926
00:40:40,440 --> 00:40:42,660
make them local host only could I do it

927
00:40:42,660 --> 00:40:45,239
via some other mechanism if I get a

928
00:40:45,239 --> 00:40:47,160
request over some network service how do

929
00:40:47,160 --> 00:40:48,630
I actually know that that is an

930
00:40:48,630 --> 00:40:53,249
authorized request and I'm making an

931
00:40:53,249 --> 00:40:56,069
assumption about session state that I

932
00:40:56,069 --> 00:40:58,680
held on to a credential somewhere or am

933
00:40:58,680 --> 00:41:01,859
I actually looking at oh it carries the

934
00:41:01,859 --> 00:41:03,630
credential inside of the message and I

935
00:41:03,630 --> 00:41:06,410
need to validate each individual request

936
00:41:06,410 --> 00:41:08,609
if I'm in an authorized user what

937
00:41:08,609 --> 00:41:10,859
information can I learn about it imagine

938
00:41:10,859 --> 00:41:12,299
somebody plugs in said on the internet

939
00:41:12,299 --> 00:41:14,519
and they start running port scans and

940
00:41:14,519 --> 00:41:15,900
they start playing with these protocols

941
00:41:15,900 --> 00:41:17,819
what can they actually learn about the

942
00:41:17,819 --> 00:41:23,700
system today it's a lot the more you can

943
00:41:23,700 --> 00:41:26,279
restrict what an unauthorized user can

944
00:41:26,279 --> 00:41:27,900
actually learn about a system the harder

945
00:41:27,900 --> 00:41:32,519
it is to attack it when I do export

946
00:41:32,519 --> 00:41:35,430
these services am I actually restricting

947
00:41:35,430 --> 00:41:38,190
it to the intended functionality did I

948
00:41:38,190 --> 00:41:40,739
build the service in a very generic way

949
00:41:40,739 --> 00:41:42,480
but I really only ended up using it in

950
00:41:42,480 --> 00:41:44,069
one specific way like the customer

951
00:41:44,069 --> 00:41:46,650
facing feature is very restricted but

952
00:41:46,650 --> 00:41:49,619
the underlying concept is wide open well

953
00:41:49,619 --> 00:41:51,029
that gives additional attack surface

954
00:41:51,029 --> 00:41:52,829
that you're not going to think about

955
00:41:52,829 --> 00:41:55,170
from a feature perspective but it still

956
00:41:55,170 --> 00:41:58,920
exists and you know do I need to limit

957
00:41:58,920 --> 00:42:00,509
the capabilities of the services on a on

958
00:42:00,509 --> 00:42:03,509
a per user basis or a parole basis user

959
00:42:03,509 --> 00:42:06,029
management MB MCS and like actual access

960
00:42:06,029 --> 00:42:06,780
credentials

961
00:42:06,780 --> 00:42:09,420
is kind of you know that it's very

962
00:42:09,420 --> 00:42:12,630
limited I have very little control over

963
00:42:12,630 --> 00:42:13,860
what credentials

964
00:42:13,860 --> 00:42:16,890
I can I can authorize for certain

965
00:42:16,890 --> 00:42:20,220
behaviors and am I actually using

966
00:42:20,220 --> 00:42:22,320
encryption for everything again assume

967
00:42:22,320 --> 00:42:23,520
that this is going over the Internet

968
00:42:23,520 --> 00:42:25,590
assume that somebody can subvert the

969
00:42:25,590 --> 00:42:28,920
network traffic how can I know that like

970
00:42:28,920 --> 00:42:30,510
if you're not using an encryption you

971
00:42:30,510 --> 00:42:35,550
just need to be and what about external

972
00:42:35,550 --> 00:42:38,220
connectors okay well I mean the USB host

973
00:42:38,220 --> 00:42:40,140
one hopefully that's self-explanatory

974
00:42:40,140 --> 00:42:42,390
right if they can plug an arbitrary USB

975
00:42:42,390 --> 00:42:44,580
device into your BMC and your BMC has

976
00:42:44,580 --> 00:42:49,470
drivers for it then anything goes right

977
00:42:49,470 --> 00:42:52,020
there's there's never-ending list of

978
00:42:52,020 --> 00:42:56,550
attacks via USB now why are you actually

979
00:42:56,550 --> 00:42:57,870
providing this often it's like a

980
00:42:57,870 --> 00:43:00,600
recovery path for your BMC well in that

981
00:43:00,600 --> 00:43:02,580
case how are you actually up verifying

982
00:43:02,580 --> 00:43:05,340
the contents they are updating from that

983
00:43:05,340 --> 00:43:07,680
USB stick because how do I know that

984
00:43:07,680 --> 00:43:09,930
this is actually an intended authorized

985
00:43:09,930 --> 00:43:16,170
update to this machine VGA okay why do I

986
00:43:16,170 --> 00:43:18,120
mention VGA it's an output only device

987
00:43:18,120 --> 00:43:22,860
right so anecdote when I was doing the

988
00:43:22,860 --> 00:43:26,640
initial quanta q 71 L support for open

989
00:43:26,640 --> 00:43:31,650
BMC I started with the ast 2400 support

990
00:43:31,650 --> 00:43:35,730
from Palmetto and the amount of RAM

991
00:43:35,730 --> 00:43:37,670
installed in the system is different and

992
00:43:37,670 --> 00:43:40,500
the the allocation or the straps for the

993
00:43:40,500 --> 00:43:43,410
VGA frame buffer were different so when

994
00:43:43,410 --> 00:43:45,060
I actually booted that BMC image the

995
00:43:45,060 --> 00:43:46,620
very first time I wasn't getting video

996
00:43:46,620 --> 00:43:48,540
output that made any sense it was just

997
00:43:48,540 --> 00:43:50,490
complete gibberish and that's when I

998
00:43:50,490 --> 00:43:52,020
realized that in fact what I was looking

999
00:43:52,020 --> 00:43:53,760
at was a section of kernel memory dumped

1000
00:43:53,760 --> 00:43:55,590
onto my VGA output as though it were a

1001
00:43:55,590 --> 00:44:01,770
VGA frame buffer right so think about

1002
00:44:01,770 --> 00:44:03,810
these things of the host gets access to

1003
00:44:03,810 --> 00:44:06,390
the VGA port so like where is this frame

1004
00:44:06,390 --> 00:44:07,920
buffer located and what can happen if I

1005
00:44:07,920 --> 00:44:10,500
steer that wrong the VGA port becomes

1006
00:44:10,500 --> 00:44:12,890
sort of an automatic data output device

1007
00:44:12,890 --> 00:44:15,270
even if the host isn't really doing

1008
00:44:15,270 --> 00:44:17,940
anything and what data are you going to

1009
00:44:17,940 --> 00:44:19,530
show there like if I do give it to the

1010
00:44:19,530 --> 00:44:20,170
hose

1011
00:44:20,170 --> 00:44:22,450
then it's the host problem as to what

1012
00:44:22,450 --> 00:44:23,860
information they show on the VGA device

1013
00:44:23,860 --> 00:44:25,390
but if I actually have a stage where the

1014
00:44:25,390 --> 00:44:27,220
BMC can take control over the VGA and

1015
00:44:27,220 --> 00:44:29,230
display something I got to think about

1016
00:44:29,230 --> 00:44:30,190
what I'm actually displaying there

1017
00:44:30,190 --> 00:44:31,690
because somebody could have just taken a

1018
00:44:31,690 --> 00:44:34,690
crash cart and plugged in you know

1019
00:44:34,690 --> 00:44:35,980
similar thing with the serial ports I

1020
00:44:35,980 --> 00:44:38,500
mean just what what am I actually

1021
00:44:38,500 --> 00:44:40,900
allowing access over this and how do I

1022
00:44:40,900 --> 00:44:43,120
know that it's trustworthy just because

1023
00:44:43,120 --> 00:44:44,560
it's a physical serial port does not

1024
00:44:44,560 --> 00:44:49,150
mean it's trustworthy okay so let's do a

1025
00:44:49,150 --> 00:44:51,190
case study if you haven't paid attention

1026
00:44:51,190 --> 00:44:54,310
to the news today this this got revealed

1027
00:44:54,310 --> 00:44:58,360
6:00 a.m. Eastern Time it's just some

1028
00:44:58,360 --> 00:44:59,950
research I've been working on since June

1029
00:44:59,950 --> 00:45:02,010
ish

1030
00:45:02,010 --> 00:45:07,180
so USB anywhere first of all responsible

1031
00:45:07,180 --> 00:45:09,850
disclosure timeline as I said I've been

1032
00:45:09,850 --> 00:45:11,440
working on this since June I've been

1033
00:45:11,440 --> 00:45:12,790
working with Super Micro to actually get

1034
00:45:12,790 --> 00:45:16,840
this fixes out in place and make sure

1035
00:45:16,840 --> 00:45:19,390
that people affected by this that I'm

1036
00:45:19,390 --> 00:45:21,400
able to get in touch with have been

1037
00:45:21,400 --> 00:45:28,720
notified so so this all started from a

1038
00:45:28,720 --> 00:45:29,890
question of how does the virtual media

1039
00:45:29,890 --> 00:45:32,830
service work so if you've never used

1040
00:45:32,830 --> 00:45:34,690
virtual media the idea is that if I

1041
00:45:34,690 --> 00:45:38,440
launch the I KVM application then I have

1042
00:45:38,440 --> 00:45:40,090
the ability to you know type on a

1043
00:45:40,090 --> 00:45:41,800
keyboard and use the mouse and get video

1044
00:45:41,800 --> 00:45:43,600
it's kind of like using VNC but it's

1045
00:45:43,600 --> 00:45:44,800
actually connected at the hardware level

1046
00:45:44,800 --> 00:45:46,480
so I can play with BIOS I can do all

1047
00:45:46,480 --> 00:45:48,970
sorts of things well but it has this

1048
00:45:48,970 --> 00:45:51,790
feature for being able to mount a ISO

1049
00:45:51,790 --> 00:45:55,810
disk image as though it were a cd-rom

1050
00:45:55,810 --> 00:45:59,110
drive on the remote machine and I

1051
00:45:59,110 --> 00:46:00,820
thought that's kind of clever how do

1052
00:46:00,820 --> 00:46:02,590
they actually make that work this seems

1053
00:46:02,590 --> 00:46:05,560
like it could be ripe for for poor

1054
00:46:05,560 --> 00:46:10,750
implementation okay so what do I know

1055
00:46:10,750 --> 00:46:13,810
well I know that in the case of the the

1056
00:46:13,810 --> 00:46:15,310
super micro machine that I happened to

1057
00:46:15,310 --> 00:46:16,510
pick I actually looked at a lot of

1058
00:46:16,510 --> 00:46:17,920
different machines it just happened to

1059
00:46:17,920 --> 00:46:20,140
be the Super Micro one was the the one

1060
00:46:20,140 --> 00:46:24,310
that was most interesting so on the

1061
00:46:24,310 --> 00:46:27,250
Super Micro Machines the BMC serves me a

1062
00:46:27,250 --> 00:46:29,620
Java applet via jnlp so essentially it

1063
00:46:29,620 --> 00:46:31,300
hands me a little metadata file with

1064
00:46:31,300 --> 00:46:32,560
some setup arguments and tells me to go

1065
00:46:32,560 --> 00:46:33,640
fetch a jar

1066
00:46:33,640 --> 00:46:34,839
serves me the jar and I actually

1067
00:46:34,839 --> 00:46:36,190
launched an application with a couple of

1068
00:46:36,190 --> 00:46:38,710
arguments inside of that java

1069
00:46:38,710 --> 00:46:41,200
application I can mount an ISO and that

1070
00:46:41,200 --> 00:46:43,480
ISO is located on the machine that's

1071
00:46:43,480 --> 00:46:47,440
running the java application now when I

1072
00:46:47,440 --> 00:46:51,819
click the plug-in button in the UI that

1073
00:46:51,819 --> 00:46:54,099
ISO shows up as a USB device on the

1074
00:46:54,099 --> 00:46:56,680
remote host so if I'm running Linux on

1075
00:46:56,680 --> 00:46:57,910
the remote side I can actually look and

1076
00:46:57,910 --> 00:46:59,650
inspect and I see a mass storage device

1077
00:46:59,650 --> 00:47:01,960
using the scuzzy transparent command set

1078
00:47:01,960 --> 00:47:04,269
it shows up as a multimedia device aka a

1079
00:47:04,269 --> 00:47:06,690
cd-rom drive and it provides some

1080
00:47:06,690 --> 00:47:09,249
information as being the a-10 virtual

1081
00:47:09,249 --> 00:47:13,749
cd-rom now I also know that from looking

1082
00:47:13,749 --> 00:47:15,759
at the ls USB output and other things

1083
00:47:15,759 --> 00:47:18,749
that the IEEE KVM also implements its

1084
00:47:18,749 --> 00:47:22,269
keyboard and mouse as virtual USB HID

1085
00:47:22,269 --> 00:47:25,450
devices okay so this this tells me a

1086
00:47:25,450 --> 00:47:27,940
couple of interesting things if I go

1087
00:47:27,940 --> 00:47:30,549
back and look at the connections that

1088
00:47:30,549 --> 00:47:32,440
are available between the host and the

1089
00:47:32,440 --> 00:47:33,519
BNC

1090
00:47:33,519 --> 00:47:37,390
I know that the USB had the host USB

1091
00:47:37,390 --> 00:47:40,480
host port connects to the virtual USB

1092
00:47:40,480 --> 00:47:43,210
hub on the BMC so let's go looking a

1093
00:47:43,210 --> 00:47:45,609
little bit into how that USB hub

1094
00:47:45,609 --> 00:47:49,930
actually works so a virtual USB hub in a

1095
00:47:49,930 --> 00:47:53,920
BMC is a couple of devices but a whole

1096
00:47:53,920 --> 00:47:57,160
pile of separate endpoints so in USB

1097
00:47:57,160 --> 00:47:59,410
nomenclature an endpoint is a is a

1098
00:47:59,410 --> 00:48:01,150
unidirectional pipe it's gonna let you

1099
00:48:01,150 --> 00:48:02,999
send data to the BMC or get data back

1100
00:48:02,999 --> 00:48:07,779
and a device is some sort of description

1101
00:48:07,779 --> 00:48:10,930
of all of the metadata associated with a

1102
00:48:10,930 --> 00:48:13,029
set of endpoints and it identifies some

1103
00:48:13,029 --> 00:48:16,900
function on the the actual USB device so

1104
00:48:16,900 --> 00:48:18,910
on the the machine I was looking at the

1105
00:48:18,910 --> 00:48:21,880
BMC there supported one hub device and

1106
00:48:21,880 --> 00:48:24,160
then it underneath that it had five

1107
00:48:24,160 --> 00:48:26,289
downstream devices and each of those

1108
00:48:26,289 --> 00:48:28,180
devices could then allocate any of these

1109
00:48:28,180 --> 00:48:30,849
15 endpoints to those devices as it

1110
00:48:30,849 --> 00:48:33,519
wanted so the actual configuration of

1111
00:48:33,519 --> 00:48:36,039
the USB devices is entirely up to the

1112
00:48:36,039 --> 00:48:39,039
BMC Software I can be any USB device I

1113
00:48:39,039 --> 00:48:41,410
want and that kind of makes sense both

1114
00:48:41,410 --> 00:48:43,690
in keeping the actual hardware design

1115
00:48:43,690 --> 00:48:45,609
simple but also providing a lot of

1116
00:48:45,609 --> 00:48:47,099
flexibility to the firmware

1117
00:48:47,099 --> 00:48:49,890
okay but remember back to our threat

1118
00:48:49,890 --> 00:48:51,959
model if I thought through the traffic

1119
00:48:51,959 --> 00:48:54,660
they can come over USB and I know that

1120
00:48:54,660 --> 00:48:55,920
the hardware allows me to do anything

1121
00:48:55,920 --> 00:48:58,349
now I'm gonna think about what can the

1122
00:48:58,349 --> 00:49:01,739
saw what can happen in the software okay

1123
00:49:01,739 --> 00:49:03,690
well first of all let's switch over and

1124
00:49:03,690 --> 00:49:05,369
look at the land attack site right

1125
00:49:05,369 --> 00:49:07,229
because actually going in and figuring

1126
00:49:07,229 --> 00:49:08,549
out what the firmware is doing with that

1127
00:49:08,549 --> 00:49:10,670
USB peripheral is gonna be hard work and

1128
00:49:10,670 --> 00:49:14,880
attackers are lazy so if I go look over

1129
00:49:14,880 --> 00:49:18,839
the network and I grab a Wireshark trace

1130
00:49:18,839 --> 00:49:21,839
I see first of all some HTTP traffic I

1131
00:49:21,839 --> 00:49:23,160
knew that because I had to go get the

1132
00:49:23,160 --> 00:49:26,519
jnlp in the Java jars I see VNC which

1133
00:49:26,519 --> 00:49:28,589
makes sense for the IQ VM that's that's

1134
00:49:28,589 --> 00:49:31,529
pretty common but I also see port 623 a

1135
00:49:31,529 --> 00:49:34,979
TCP and this port only shows up once I

1136
00:49:34,979 --> 00:49:36,869
actually opened the virtual media UI

1137
00:49:36,869 --> 00:49:39,569
window okay that's a good indicator that

1138
00:49:39,569 --> 00:49:40,859
something interesting is happening there

1139
00:49:40,859 --> 00:49:42,599
but nobody knows anything about what

1140
00:49:42,599 --> 00:49:46,079
this protocol is okay well let's start

1141
00:49:46,079 --> 00:49:47,940
poking around inside of this proto

1142
00:49:47,940 --> 00:49:52,559
packet well hang on a 10 virtual you

1143
00:49:52,559 --> 00:49:55,079
cd-rom drive I've seen that string

1144
00:49:55,079 --> 00:50:00,479
before now if I can see that in the raw

1145
00:50:00,479 --> 00:50:01,640
packet dump

1146
00:50:01,640 --> 00:50:07,099
that means there's no encryption so

1147
00:50:07,099 --> 00:50:10,769
what's going on well there's this other

1148
00:50:10,769 --> 00:50:15,329
string that says USBs what is this well

1149
00:50:15,329 --> 00:50:18,180
if you if you google for that thank you

1150
00:50:18,180 --> 00:50:24,809
google for being a sponsor I you get

1151
00:50:24,809 --> 00:50:28,170
that this is actually a signature for

1152
00:50:28,170 --> 00:50:31,380
the response so the the command so

1153
00:50:31,380 --> 00:50:33,329
there's a command status wrapper inside

1154
00:50:33,329 --> 00:50:35,699
of the bulk only transport of the USB

1155
00:50:35,699 --> 00:50:37,529
mass-storage class and so this is

1156
00:50:37,529 --> 00:50:39,180
actually you know four bytes that

1157
00:50:39,180 --> 00:50:41,009
identify that this is the the status

1158
00:50:41,009 --> 00:50:45,420
response to a command issued over USB so

1159
00:50:45,420 --> 00:50:47,249
now I know not only is it unencrypted

1160
00:50:47,249 --> 00:50:49,410
but it's actually sending USB

1161
00:50:49,410 --> 00:50:52,289
mass-storage bulk only transport data

1162
00:50:52,289 --> 00:50:58,369
directly over inside this on this port

1163
00:50:58,489 --> 00:51:01,739
so with a lot of work and and staring at

1164
00:51:01,739 --> 00:51:03,869
things and actually having to dip into

1165
00:51:03,869 --> 00:51:07,380
the firmware and reverse-engineer things

1166
00:51:07,380 --> 00:51:09,390
I was able to actually figure out the

1167
00:51:09,390 --> 00:51:12,719
entire protocol and there's a couple of

1168
00:51:12,719 --> 00:51:13,799
things to note this is actually the

1169
00:51:13,799 --> 00:51:15,269
device is set up so there's there's a

1170
00:51:15,269 --> 00:51:17,519
particular packet that carries over the

1171
00:51:17,519 --> 00:51:19,559
credentials and the actual USB

1172
00:51:19,559 --> 00:51:21,239
descriptors for allocating a device and

1173
00:51:21,239 --> 00:51:24,690
a couple of things to note there's a bit

1174
00:51:24,690 --> 00:51:26,219
that indicates whether or not the

1175
00:51:26,219 --> 00:51:27,660
payload is actually encrypted it's up to

1176
00:51:27,660 --> 00:51:29,279
the client to decide whether or not to

1177
00:51:29,279 --> 00:51:31,229
send it encrypted or not

1178
00:51:31,229 --> 00:51:33,029
now the java application actually does

1179
00:51:33,029 --> 00:51:36,529
choose to send it encrypted but i don't

1180
00:51:36,529 --> 00:51:39,359
and then there's also a set of flags

1181
00:51:39,359 --> 00:51:42,359
where that indicate is the username a

1182
00:51:42,359 --> 00:51:45,509
session ID so essentially in the case of

1183
00:51:45,509 --> 00:51:49,979
a normal in the java application part of

1184
00:51:49,979 --> 00:51:51,809
the jnlp packet is actually a unique

1185
00:51:51,809 --> 00:51:55,349
session ID token that then it gets used

1186
00:51:55,349 --> 00:51:57,809
to send us the username and password but

1187
00:51:57,809 --> 00:52:01,469
if I set that bit to zero it accepts a

1188
00:52:01,469 --> 00:52:04,609
plain tech username and password

1189
00:52:06,529 --> 00:52:13,380
interesting but it gets worse so you may

1190
00:52:13,380 --> 00:52:14,459
have noticed that there was actually a

1191
00:52:14,459 --> 00:52:17,009
couple of panes here that show frame and

1192
00:52:17,009 --> 00:52:19,349
decrypted payload so we talked about

1193
00:52:19,349 --> 00:52:21,089
encryption as being optional well it's

1194
00:52:21,089 --> 00:52:25,079
actually rc4 not exactly a stellar

1195
00:52:25,079 --> 00:52:26,400
encryption algorithm by today's

1196
00:52:26,400 --> 00:52:29,849
standards they actually used the exact

1197
00:52:29,849 --> 00:52:33,900
same key on all of their X 9 X 10 and X

1198
00:52:33,900 --> 00:52:37,789
11 BMC's they just never changed it and

1199
00:52:37,789 --> 00:52:40,259
they could have actually implemented it

1200
00:52:40,259 --> 00:52:41,759
so that every packet was encrypted but

1201
00:52:41,759 --> 00:52:43,920
it doesn't it only encrypts that setup

1202
00:52:43,920 --> 00:52:45,559
packet that includes the credentials

1203
00:52:45,559 --> 00:52:49,699
everything else is entirely transparent

1204
00:52:49,699 --> 00:52:52,739
the USB device is entirely implemented

1205
00:52:52,739 --> 00:52:55,259
on the client side that java application

1206
00:52:55,259 --> 00:52:59,219
actually has a j'ni that is a native

1207
00:52:59,219 --> 00:53:01,259
library that implements scuzzy command

1208
00:53:01,259 --> 00:53:05,699
protocol and ISO reading and handles all

1209
00:53:05,699 --> 00:53:10,079
the USB packets and ultimately when you

1210
00:53:10,079 --> 00:53:11,700
send that setup packet in a

1211
00:53:11,700 --> 00:53:13,109
ten occasion you also send all of the

1212
00:53:13,109 --> 00:53:14,940
descriptors for the device the server

1213
00:53:14,940 --> 00:53:16,680
does cache those so that it can respond

1214
00:53:16,680 --> 00:53:19,050
to us be set up requests fast enough but

1215
00:53:19,050 --> 00:53:20,609
everything else all the endpoint traffic

1216
00:53:20,609 --> 00:53:22,589
is sent directly over to the client and

1217
00:53:22,589 --> 00:53:23,880
the clients responsible for it so the

1218
00:53:23,880 --> 00:53:26,190
clients in complete control of what

1219
00:53:26,190 --> 00:53:28,470
happens on the USB interface going to

1220
00:53:28,470 --> 00:53:33,480
the host now it also turns out that when

1221
00:53:33,480 --> 00:53:35,369
they were implementing this on X 10 X 11

1222
00:53:35,369 --> 00:53:36,960
somewhere along the line they decided

1223
00:53:36,960 --> 00:53:38,730
that they needed to cache some internal

1224
00:53:38,730 --> 00:53:40,290
state and part of that is the

1225
00:53:40,290 --> 00:53:42,960
credentials it's it appears to be some

1226
00:53:42,960 --> 00:53:45,359
sort of mechanism for if I temporarily

1227
00:53:45,359 --> 00:53:47,460
lost connection that it would come back

1228
00:53:47,460 --> 00:53:50,369
within a certain time window if I

1229
00:53:50,369 --> 00:53:52,079
reestablish the connection I don't

1230
00:53:52,079 --> 00:53:53,730
really understand but ultimately what it

1231
00:53:53,730 --> 00:53:54,780
means is that when the client

1232
00:53:54,780 --> 00:53:56,970
disconnects they fail to actually clean

1233
00:53:56,970 --> 00:53:59,220
they have a cache that is associated by

1234
00:53:59,220 --> 00:54:01,740
the socket number so this essentially

1235
00:54:01,740 --> 00:54:03,510
the socket file descriptor number it's

1236
00:54:03,510 --> 00:54:04,790
not technically a file descriptor but

1237
00:54:04,790 --> 00:54:07,410
well the socket number and the

1238
00:54:07,410 --> 00:54:08,910
credentials are part of that cached

1239
00:54:08,910 --> 00:54:11,220
information and when on a client

1240
00:54:11,220 --> 00:54:13,140
disconnect it doesn't actually clean up

1241
00:54:13,140 --> 00:54:16,460
that state so if you connect again and

1242
00:54:16,460 --> 00:54:19,319
happen to get the same socket number it

1243
00:54:19,319 --> 00:54:21,000
completely ignores whatever credentials

1244
00:54:21,000 --> 00:54:22,500
you send to it and just uses the cache

1245
00:54:22,500 --> 00:54:25,020
ones so as long as somebody has used the

1246
00:54:25,020 --> 00:54:27,359
virtual media service once before

1247
00:54:27,359 --> 00:54:30,030
since the BMC was powered on which

1248
00:54:30,030 --> 00:54:31,880
happens when you attach the power and

1249
00:54:31,880 --> 00:54:34,589
won't reboot unless you did like a

1250
00:54:34,589 --> 00:54:36,720
firmware update or crashed it or pulled

1251
00:54:36,720 --> 00:54:41,760
the power to the machine then also

1252
00:54:41,760 --> 00:54:44,069
remember that VMC's tend to only have

1253
00:54:44,069 --> 00:54:46,800
one user at a time and given how the

1254
00:54:46,800 --> 00:54:49,099
Linux kernel recycles socket numbers

1255
00:54:49,099 --> 00:54:52,290
when not user gets disconnected if I

1256
00:54:52,290 --> 00:54:54,210
connect I'm pretty much gonna get the

1257
00:54:54,210 --> 00:54:56,730
same socket number most of the time I

1258
00:54:56,730 --> 00:54:58,050
can actually just reconnect and it

1259
00:54:58,050 --> 00:55:01,550
completely ignores all the credentials

1260
00:55:02,180 --> 00:55:07,589
so in a good case for an attacker bad

1261
00:55:07,589 --> 00:55:09,240
case everybody else

1262
00:55:09,240 --> 00:55:14,670
I have unauthenticated access to raw USB

1263
00:55:14,670 --> 00:55:19,800
traffic to the host okay well what can I

1264
00:55:19,800 --> 00:55:20,450
do with that

1265
00:55:20,450 --> 00:55:24,030
well faced answer is a Python framework

1266
00:55:24,030 --> 00:55:25,930
for emulating USB devices

1267
00:55:25,930 --> 00:55:28,220
now this was originally designed for

1268
00:55:28,220 --> 00:55:29,630
some special purpose hardware called the

1269
00:55:29,630 --> 00:55:34,280
face dancer 21 and over time it's gained

1270
00:55:34,280 --> 00:55:35,930
sort of a plug-in architecture for the

1271
00:55:35,930 --> 00:55:39,320
back ends so you can basically write

1272
00:55:39,320 --> 00:55:42,260
Python applications that are the USB

1273
00:55:42,260 --> 00:55:44,150
device and then use hardware to actually

1274
00:55:44,150 --> 00:55:46,790
make it show up as a USB endpoint or a

1275
00:55:46,790 --> 00:55:49,970
USB device to some target host system so

1276
00:55:49,970 --> 00:55:51,710
I just implemented a new back-end right

1277
00:55:51,710 --> 00:55:54,140
I don't use encryption I use plain text

1278
00:55:54,140 --> 00:55:56,630
username password and this is a proof of

1279
00:55:56,630 --> 00:55:59,900
concept quality right so it's not not

1280
00:55:59,900 --> 00:56:03,800
excellent but it's good enough so what

1281
00:56:03,800 --> 00:56:08,120
can I do with this if you can't see this

1282
00:56:08,120 --> 00:56:11,750
clearly enough it's available online as

1283
00:56:11,750 --> 00:56:14,930
well so here I am logging in to the

1284
00:56:14,930 --> 00:56:16,520
interface yes it's the default

1285
00:56:16,520 --> 00:56:20,120
credentials but imagine it wasn't go

1286
00:56:20,120 --> 00:56:22,340
over here and I'm I'm gonna go ahead and

1287
00:56:22,340 --> 00:56:31,970
fire up the I KVM okay so on the Left we

1288
00:56:31,970 --> 00:56:34,550
see the actual IQ VM application

1289
00:56:34,550 --> 00:56:38,450
starting okay now I'm logged in as root

1290
00:56:38,450 --> 00:56:40,460
on this machine this is just for

1291
00:56:40,460 --> 00:56:42,140
convenience sake writing it could be

1292
00:56:42,140 --> 00:56:44,000
anything and on the right hand side I'm

1293
00:56:44,000 --> 00:56:47,230
actually on my my Windows laptop in

1294
00:56:47,230 --> 00:56:49,460
PowerShell and here I'm just pinging it

1295
00:56:49,460 --> 00:56:52,250
to show you this is actually like quite

1296
00:56:52,250 --> 00:56:54,080
a ways away it's like 35 millisecond

1297
00:56:54,080 --> 00:56:57,110
latency I was actually over a VPN from

1298
00:56:57,110 --> 00:57:00,710
San Jose to Portland so here I'm just

1299
00:57:00,710 --> 00:57:02,090
going to go ahead and create an empty

1300
00:57:02,090 --> 00:57:09,940
file empty like 16 megabyte file great

1301
00:57:09,940 --> 00:57:12,830
notice on the left the USB devices

1302
00:57:12,830 --> 00:57:14,960
there's there's some a10 devices those

1303
00:57:14,960 --> 00:57:16,730
are the keyboard and mouse and the

1304
00:57:16,730 --> 00:57:20,180
virtual hub but there's no the SanDisk

1305
00:57:20,180 --> 00:57:22,040
is actually an actual Santas plugged

1306
00:57:22,040 --> 00:57:26,330
into this machine so on the right here I

1307
00:57:26,330 --> 00:57:32,420
tell a face to answer to connect to that

1308
00:57:32,420 --> 00:57:35,150
machines BMC and emulate a USB Mass

1309
00:57:35,150 --> 00:57:38,240
Storage device with that disk image or

1310
00:57:38,240 --> 00:57:39,560
without empty file as the disk in

1311
00:57:39,560 --> 00:57:42,410
and you'll notice that it connected and

1312
00:57:42,410 --> 00:57:43,820
actually there's a new drive on the

1313
00:57:43,820 --> 00:57:48,440
Linux machine we do a little bit of

1314
00:57:48,440 --> 00:57:50,330
detail look here yep there's a new

1315
00:57:50,330 --> 00:57:53,840
device it's got a very odd user name or

1316
00:57:53,840 --> 00:57:57,830
a UID pid' of course that's a completely

1317
00:57:57,830 --> 00:57:59,000
under my control so I can make it

1318
00:57:59,000 --> 00:58:03,020
whatever I want so I take a look at at

1319
00:58:03,020 --> 00:58:12,920
the details of that comes back ok so I'm

1320
00:58:12,920 --> 00:58:15,140
I'm presenting a mass storage scuzzy

1321
00:58:15,140 --> 00:58:18,950
device in this case the endpoint

1322
00:58:18,950 --> 00:58:20,390
addresses are 1 & 2 but I was actually

1323
00:58:20,390 --> 00:58:22,100
making them prime numbers before just to

1324
00:58:22,100 --> 00:58:24,260
see that I can have fun with it

1325
00:58:24,260 --> 00:58:26,720
strings I don't get to control that's

1326
00:58:26,720 --> 00:58:30,080
that's a limitation of the protocol but

1327
00:58:30,080 --> 00:58:31,850
clearly you know I have access to this

1328
00:58:31,850 --> 00:58:34,460
device and I can I can set up the type

1329
00:58:34,460 --> 00:58:36,320
of device I want I also had a prototype

1330
00:58:36,320 --> 00:58:38,810
of a keyboard but it's it's trickier to

1331
00:58:38,810 --> 00:58:41,270
make it work correctly if I look at the

1332
00:58:41,270 --> 00:58:42,710
D message output you see that it

1333
00:58:42,710 --> 00:58:44,390
actually goes and finds it and notice

1334
00:58:44,390 --> 00:58:46,640
that the identifying information is

1335
00:58:46,640 --> 00:58:47,570
actually called good FET

1336
00:58:47,570 --> 00:58:50,870
that's another hardware project that's

1337
00:58:50,870 --> 00:58:54,350
another back-end four-faced answer so

1338
00:58:54,350 --> 00:58:56,690
here I can run the scuzzy inquiry and

1339
00:58:56,690 --> 00:58:59,300
get a response that's entirely

1340
00:58:59,300 --> 00:59:02,150
implemented on the Python side so now

1341
00:59:02,150 --> 00:59:03,260
I'm actually going ahead and

1342
00:59:03,260 --> 00:59:10,430
partitioning the drive setting up a

1343
00:59:10,430 --> 00:59:19,730
small dose partition actually took me a

1344
00:59:19,730 --> 00:59:21,380
while to figure out how to get it to not

1345
00:59:21,380 --> 00:59:22,880
crash when it was sending so much data

1346
00:59:22,880 --> 00:59:25,820
over turns out with that much latency

1347
00:59:25,820 --> 00:59:30,500
and that the large writes is some

1348
00:59:30,500 --> 00:59:33,350
instability but after wrote that go

1349
00:59:33,350 --> 00:59:36,580
ahead and make a fat filesystem

1350
00:59:42,440 --> 00:59:45,539
and in this case I'm just gonna go ahead

1351
00:59:45,539 --> 00:59:48,150
and copy Etsy password onto my my

1352
00:59:48,150 --> 01:00:01,079
filesystem unmount it and detach the USB

1353
01:00:01,079 --> 01:00:06,660
device it's gone yes there's some log

1354
01:00:06,660 --> 01:00:08,130
messages that's indicate all this

1355
01:00:08,130 --> 01:00:15,869
happened and here we're gonna go and

1356
01:00:15,869 --> 01:00:19,500
just actually search the output for

1357
01:00:19,500 --> 01:00:22,349
route because here I copied over Etsy

1358
01:00:22,349 --> 01:00:24,329
password and so I kind of expect to find

1359
01:00:24,329 --> 01:00:27,289
this it takes a moment

1360
01:00:37,200 --> 01:00:40,420
but as expected I get the contents right

1361
01:00:40,420 --> 01:00:42,099
it's it's simply buried in there it's a

1362
01:00:42,099 --> 01:00:45,519
normal fat file system okay so the

1363
01:00:45,519 --> 01:00:49,180
impact of this I once I found it I knew

1364
01:00:49,180 --> 01:00:50,680
that people hook BMC's on the internet

1365
01:00:50,680 --> 01:00:53,230
so that's bad I did a scan of the

1366
01:00:53,230 --> 01:00:56,589
Internet 47,000 affected BMC's were on

1367
01:00:56,589 --> 01:00:58,569
the Internet

1368
01:00:58,569 --> 01:01:01,930
they span 90 plus countries in 1900 a

1369
01:01:01,930 --> 01:01:04,769
ass's so 1900 separate network operators

1370
01:01:04,769 --> 01:01:07,420
and this has nothing about how many are

1371
01:01:07,420 --> 01:01:09,849
on enterprise networks right this is

1372
01:01:09,849 --> 01:01:11,380
simply what's literally it open on the

1373
01:01:11,380 --> 01:01:16,869
Internet the list is you can do whatever

1374
01:01:16,869 --> 01:01:19,029
you want with USB attacks the list of

1375
01:01:19,029 --> 01:01:25,150
possible attacks is endless so putting

1376
01:01:25,150 --> 01:01:26,920
all together what we've talked about

1377
01:01:26,920 --> 01:01:30,569
today if you're an end-user of a server

1378
01:01:30,569 --> 01:01:33,700
protect your existing BMC's they're very

1379
01:01:33,700 --> 01:01:36,269
privileged and very vulnerable right

1380
01:01:36,269 --> 01:01:38,470
treat them like you would if you plugged

1381
01:01:38,470 --> 01:01:40,450
an unpatched Windows XP machine onto

1382
01:01:40,450 --> 01:01:43,809
your network you do not want it to be

1383
01:01:43,809 --> 01:01:47,440
accessible by most things start working

1384
01:01:47,440 --> 01:01:49,720
on updating your infrastructure red fish

1385
01:01:49,720 --> 01:01:52,180
is coming up as a replacement for IPMI

1386
01:01:52,180 --> 01:01:54,819
if you can move that way figure out how

1387
01:01:54,819 --> 01:01:59,529
to move that way be prepared whatever is

1388
01:01:59,529 --> 01:02:01,180
holding you back from actually hardening

1389
01:02:01,180 --> 01:02:02,920
your be MCS and eliminating access to it

1390
01:02:02,920 --> 01:02:04,750
like go through and start figuring out

1391
01:02:04,750 --> 01:02:07,089
those policies and and understand what

1392
01:02:07,089 --> 01:02:08,319
do I need to actually start locking

1393
01:02:08,319 --> 01:02:10,779
these things down put pressure on your

1394
01:02:10,779 --> 01:02:13,660
vendors vendors look to the customers to

1395
01:02:13,660 --> 01:02:15,430
figure out what they need to do the

1396
01:02:15,430 --> 01:02:16,960
vendors are not gonna add security

1397
01:02:16,960 --> 01:02:20,559
unless you actually ask for it or you

1398
01:02:20,559 --> 01:02:22,539
file a vulnerability disclosure with

1399
01:02:22,539 --> 01:02:27,099
them ask about the roadmap right at see

1400
01:02:27,099 --> 01:02:28,329
what they're actually doing in terms of

1401
01:02:28,329 --> 01:02:31,440
security on the roadmap if you're an OEM

1402
01:02:31,440 --> 01:02:35,140
first of all please PLEASE establish a

1403
01:02:35,140 --> 01:02:38,079
Security Response Team it's really hard

1404
01:02:38,079 --> 01:02:39,130
when you find a vulnerability and you

1405
01:02:39,130 --> 01:02:40,839
have no idea who to contact at a company

1406
01:02:40,839 --> 01:02:42,789
and especially hard when you segment it

1407
01:02:42,789 --> 01:02:44,259
by business unit and so I have five

1408
01:02:44,259 --> 01:02:46,000
different places to ask who actually

1409
01:02:46,000 --> 01:02:49,059
deals with this product there's actually

1410
01:02:49,059 --> 01:02:50,470
an iso standard for how to set

1411
01:02:50,470 --> 01:02:51,450
things up and how to handle

1412
01:02:51,450 --> 01:02:54,310
vulnerabilities disclosures so if your

1413
01:02:54,310 --> 01:02:57,510
company does not have one please do this

1414
01:02:57,510 --> 01:03:00,210
think about how to make deploying BMC's

1415
01:03:00,210 --> 01:03:04,119
safe right what are the defaults that

1416
01:03:04,119 --> 01:03:06,190
would make it safe for me to plug a PMC

1417
01:03:06,190 --> 01:03:07,810
on the internet we know nobody should be

1418
01:03:07,810 --> 01:03:08,440
doing this

1419
01:03:08,440 --> 01:03:10,240
but they do it anyway so how can I make

1420
01:03:10,240 --> 01:03:13,780
it okay you know things like generating

1421
01:03:13,780 --> 01:03:15,310
per device default passwords and

1422
01:03:15,310 --> 01:03:17,619
certificates guiding them towards modern

1423
01:03:17,619 --> 01:03:20,470
protocols maybe just defaults to IPM I

1424
01:03:20,470 --> 01:03:22,540
disabled and make them enable it there's

1425
01:03:22,540 --> 01:03:25,330
ways right and challenge your PMC

1426
01:03:25,330 --> 01:03:27,340
firmware and SOC vendors to do better I

1427
01:03:27,340 --> 01:03:29,290
know that most OEMs don't write their

1428
01:03:29,290 --> 01:03:31,810
own firmware stacks those that do please

1429
01:03:31,810 --> 01:03:33,580
pay attention to the next slide but if

1430
01:03:33,580 --> 01:03:35,920
you if you don't just you know be in

1431
01:03:35,920 --> 01:03:37,990
contact with your actual BMC firmware

1432
01:03:37,990 --> 01:03:39,460
vendor and say like security is

1433
01:03:39,460 --> 01:03:40,630
important to us we need to solve these

1434
01:03:40,630 --> 01:03:43,570
things get security audit results right

1435
01:03:43,570 --> 01:03:44,950
they should be doing security audits of

1436
01:03:44,950 --> 01:03:48,090
the codebase if you're a developer

1437
01:03:48,090 --> 01:03:50,200
expect to your machine to be attacked

1438
01:03:50,200 --> 01:03:52,540
expect every interface and every feature

1439
01:03:52,540 --> 01:03:55,030
to be misused get used to asking

1440
01:03:55,030 --> 01:03:56,650
yourself what can go wrong

1441
01:03:56,650 --> 01:03:58,660
how can a user actually abuse this in

1442
01:03:58,660 --> 01:04:02,109
some way insist on improving this

1443
01:04:02,109 --> 01:04:04,960
security to go ahead and design in

1444
01:04:04,960 --> 01:04:07,480
secure boot even though you might not be

1445
01:04:07,480 --> 01:04:09,160
being asked for it like start adding

1446
01:04:09,160 --> 01:04:10,450
that into your design and start solving

1447
01:04:10,450 --> 01:04:11,470
the problems because it's gonna take

1448
01:04:11,470 --> 01:04:14,830
time make sure you move those modern

1449
01:04:14,830 --> 01:04:16,810
protocols up on your priority list make

1450
01:04:16,810 --> 01:04:18,369
sure they are available your customers

1451
01:04:18,369 --> 01:04:20,230
may not be using them yet but they can't

1452
01:04:20,230 --> 01:04:23,560
use them if they don't exist start

1453
01:04:23,560 --> 01:04:25,480
folding in security tests into your CI

1454
01:04:25,480 --> 01:04:27,280
process you want to find just like your

1455
01:04:27,280 --> 01:04:28,750
code breakage you want to find security

1456
01:04:28,750 --> 01:04:30,550
breakage as fast as you possibly can

1457
01:04:30,550 --> 01:04:32,290
things like Metasploit are gonna easily

1458
01:04:32,290 --> 01:04:34,920
show you what what's available to you in

1459
01:04:34,920 --> 01:04:37,900
for being I p.m. I type attacks and and

1460
01:04:37,900 --> 01:04:39,940
things like that go ahead and just start

1461
01:04:39,940 --> 01:04:43,390
folding this into your testing if you

1462
01:04:43,390 --> 01:04:45,460
want more on USB anywhere there's a blog

1463
01:04:45,460 --> 01:04:47,440
post the POC demo video if you want to

1464
01:04:47,440 --> 01:04:49,810
see it more also there's a github that

1465
01:04:49,810 --> 01:04:52,119
actually includes some of the tools it

1466
01:04:52,119 --> 01:04:53,470
does not currently include the face

1467
01:04:53,470 --> 01:04:55,660
dancer patches those are being up

1468
01:04:55,660 --> 01:04:58,030
streamed to face dancer but there's

1469
01:04:58,030 --> 01:04:59,770
packet captures and some others tools

1470
01:04:59,770 --> 01:05:05,339
and other information about it alright

1471
01:05:05,940 --> 01:05:08,820
thank you

1472
01:05:08,820 --> 01:05:14,450
[Applause]

1473
01:05:14,450 --> 01:05:20,689
[Music]

