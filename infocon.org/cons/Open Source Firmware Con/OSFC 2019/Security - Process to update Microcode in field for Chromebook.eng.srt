1
00:00:03,190 --> 00:00:06,259
[Music]

2
00:00:07,220 --> 00:00:10,110
alright so next up we have Amir speaking

3
00:00:10,110 --> 00:00:12,360
about micro code updates on Chromebooks

4
00:00:12,360 --> 00:00:16,020
enjoy I don't

5
00:00:16,020 --> 00:00:18,660
good afternoon uh I'm here to talk about

6
00:00:18,660 --> 00:00:20,850
the infinite microcode of breed on

7
00:00:20,850 --> 00:00:25,470
Chromebooks so is the list of people to

8
00:00:25,470 --> 00:00:28,519
worry Donna

9
00:00:30,080 --> 00:00:34,079
so starting with will be looking in

10
00:00:34,079 --> 00:00:36,000
general as to what the microcode update

11
00:00:36,000 --> 00:00:39,210
is I will explore what does it mean to

12
00:00:39,210 --> 00:00:41,610
until a general format about the

13
00:00:41,610 --> 00:00:45,420
microcode update star because that will

14
00:00:45,420 --> 00:00:46,770
have a look at the problem statement

15
00:00:46,770 --> 00:00:49,710
that we are trying to solve here then a

16
00:00:49,710 --> 00:00:52,949
proposed solution corresponding to the

17
00:00:52,949 --> 00:00:54,930
problem and a general inflammation

18
00:00:54,930 --> 00:00:58,760
scheme and the flow updates

19
00:00:58,940 --> 00:01:04,290
so starting p6 family mid-90s and the

20
00:01:04,290 --> 00:01:06,570
processors further into the have

21
00:01:06,570 --> 00:01:10,409
capability to correct the bugs or errata

22
00:01:10,409 --> 00:01:14,479
by loading an Intel supplied binary and

23
00:01:14,479 --> 00:01:19,110
that gets loaded on the cpu so this data

24
00:01:19,110 --> 00:01:22,430
block is called as the microcode update

25
00:01:22,430 --> 00:01:25,350
so it has capability to patch the

26
00:01:25,350 --> 00:01:28,170
microcode family on the cpu thus it has

27
00:01:28,170 --> 00:01:30,840
the capability to pass these other cpu

28
00:01:30,840 --> 00:01:34,140
from Reza as well charlie screen you'll

29
00:01:34,140 --> 00:01:37,439
see the general layout for the microcode

30
00:01:37,439 --> 00:01:41,100
update it has a 48 by tough generic

31
00:01:41,100 --> 00:01:43,590
header that goes in which has the

32
00:01:43,590 --> 00:01:45,240
information about the microcode version

33
00:01:45,240 --> 00:01:48,240
the date in my third version of the

34
00:01:48,240 --> 00:01:50,549
binary was built and it has the

35
00:01:50,549 --> 00:01:54,450
information about the CPU it is being

36
00:01:54,450 --> 00:02:00,090
targeted for 4 followed by that 48 byte

37
00:02:00,090 --> 00:02:02,100
of general header you have the actual

38
00:02:02,100 --> 00:02:05,130
microcode update data and the reader

39
00:02:05,130 --> 00:02:08,758
size is also part of the header and in

40
00:02:08,758 --> 00:02:10,789
some of the LEAs you have the extended

41
00:02:10,789 --> 00:02:13,470
error along with the

42
00:02:13,470 --> 00:02:15,690
Makeda if you want to target the

43
00:02:15,690 --> 00:02:18,060
microcode update specific to some of the

44
00:02:18,060 --> 00:02:20,790
cps cues then you need a fertile

45
00:02:20,790 --> 00:02:23,280
resolution into figuring out what cpu or

46
00:02:23,280 --> 00:02:26,280
it's being targeted to so that's when

47
00:02:26,280 --> 00:02:28,860
the extended header comes into picture

48
00:02:28,860 --> 00:02:32,880
and you load it allows you to load the

49
00:02:32,880 --> 00:02:35,640
microcode only for very specific skews

50
00:02:35,640 --> 00:02:39,180
of the processors that are in theme so

51
00:02:39,180 --> 00:02:41,910
in general microcode update helps to

52
00:02:41,910 --> 00:02:45,540
ensure the stability and security of the

53
00:02:45,540 --> 00:02:53,580
platform once it's shipped out so

54
00:02:53,580 --> 00:02:55,380
looking at the problem statement today

55
00:02:55,380 --> 00:02:57,510
Chromebooks do not have a provision to

56
00:02:57,510 --> 00:03:00,720
update the microcode from our double

57
00:03:00,720 --> 00:03:03,200
region through the fit based mechanism

58
00:03:03,200 --> 00:03:06,780
so the fit based mechanism is actually a

59
00:03:06,780 --> 00:03:09,240
previous thing where CPU goes and look

60
00:03:09,240 --> 00:03:12,570
out looks up for the fit or table where

61
00:03:12,570 --> 00:03:14,220
it gets the address using micro code

62
00:03:14,220 --> 00:03:16,800
data and starts closing the micro read

63
00:03:16,800 --> 00:03:19,650
code firmware order the micro the micro

64
00:03:19,650 --> 00:03:21,600
could update on to the microcode

65
00:03:21,600 --> 00:03:24,000
firmware and patches the other CPU

66
00:03:24,000 --> 00:03:28,650
fungus as well so this is how your fit

67
00:03:28,650 --> 00:03:35,370
entries actually look like so you're fit

68
00:03:35,370 --> 00:03:37,709
table actually contains can continue

69
00:03:37,709 --> 00:03:40,290
multiple of these fit entries where you

70
00:03:40,290 --> 00:03:42,150
have the address of the firmware you

71
00:03:42,150 --> 00:03:45,060
want to load and you give the size of

72
00:03:45,060 --> 00:03:47,970
the update and that of the binary that

73
00:03:47,970 --> 00:03:50,459
needs to be loaded and you have a gender

74
00:03:50,459 --> 00:03:53,040
type so type 0 is for Mike record you

75
00:03:53,040 --> 00:03:55,470
have provisions to get insert the other

76
00:03:55,470 --> 00:03:59,220
binaries as a CM txt so that is being

77
00:03:59,220 --> 00:04:05,850
dictated by the type filter arriving at

78
00:04:05,850 --> 00:04:09,330
the problem statement here your fit

79
00:04:09,330 --> 00:04:13,739
actually points to fit is actually part

80
00:04:13,739 --> 00:04:16,048
of your boot block so booth lock is your

81
00:04:16,048 --> 00:04:19,380
arrow section and fit fit actually

82
00:04:19,380 --> 00:04:22,320
resides into it and it points to the CPU

83
00:04:22,320 --> 00:04:25,530
the micro code binary which is part of

84
00:04:25,530 --> 00:04:26,889
the ro itself

85
00:04:26,889 --> 00:04:30,009
so neither your foot is capable of

86
00:04:30,009 --> 00:04:30,909
getting updated

87
00:04:30,909 --> 00:04:33,699
now you can update the CP of a good blog

88
00:04:33,699 --> 00:04:36,520
because both of them resides into the

89
00:04:36,520 --> 00:04:39,219
other section so I don't have a

90
00:04:39,219 --> 00:04:41,020
provision where I can update the

91
00:04:41,020 --> 00:04:43,539
microcode somehow because there's no

92
00:04:43,539 --> 00:04:47,800
readwrite section here so that's

93
00:04:47,800 --> 00:04:51,639
restricts my fit B skip a capability to

94
00:04:51,639 --> 00:04:53,289
load the microcode only from the ro

95
00:04:53,289 --> 00:04:58,000
region which is non updatable so some

96
00:04:58,000 --> 00:05:01,750
the problem now shareware actually there

97
00:05:01,750 --> 00:05:03,819
is a capability for micro code to load

98
00:05:03,819 --> 00:05:06,400
after the reset also but then there are

99
00:05:06,400 --> 00:05:07,810
restrictions on some of the firmware

100
00:05:07,810 --> 00:05:10,979
that needs to be passed before the reset

101
00:05:10,979 --> 00:05:14,770
so it's important that those IP

102
00:05:14,770 --> 00:05:17,080
firmwares Gant gets patched before the

103
00:05:17,080 --> 00:05:19,389
reset is recalled so it's essential that

104
00:05:19,389 --> 00:05:22,409
the microcode update that goes through

105
00:05:22,409 --> 00:05:31,360
gets loaded before the reset so we came

106
00:05:31,360 --> 00:05:34,180
up with solution to rather path to boot

107
00:05:34,180 --> 00:05:36,210
blocks now in the core boot image so

108
00:05:36,210 --> 00:05:38,289
with the current elimination what you

109
00:05:38,289 --> 00:05:41,229
have is your ro section contains single

110
00:05:41,229 --> 00:05:44,710
boot block what we propose is to pack to

111
00:05:44,710 --> 00:05:47,589
boot blocks here where each boot block

112
00:05:47,589 --> 00:05:49,629
are identical the only difference

113
00:05:49,629 --> 00:05:52,120
between the two boot block is defect

114
00:05:52,120 --> 00:05:56,199
table insider so the fit table in the

115
00:05:56,199 --> 00:05:58,419
first boot block which I call as boot

116
00:05:58,419 --> 00:06:00,699
block underscore RF it actually has a

117
00:06:00,699 --> 00:06:03,789
fit table that points to your micro code

118
00:06:03,789 --> 00:06:06,879
binary inside the Aero region so this is

119
00:06:06,879 --> 00:06:08,349
same as the original implementation

120
00:06:08,349 --> 00:06:10,990
where nothing has changed right the

121
00:06:10,990 --> 00:06:13,750
addition to this is the second boot

122
00:06:13,750 --> 00:06:16,089
block that has been put in there now

123
00:06:16,089 --> 00:06:19,259
this boot block would have a fit table

124
00:06:19,259 --> 00:06:22,389
which would contain the address of the

125
00:06:22,389 --> 00:06:24,339
micro code which would point to a micro

126
00:06:24,339 --> 00:06:25,080
code binary

127
00:06:25,080 --> 00:06:27,669
actually pointing to your RW staging

128
00:06:27,669 --> 00:06:28,319
area

129
00:06:28,319 --> 00:06:32,080
now this RW staging area is capable of

130
00:06:32,080 --> 00:06:34,419
getting updated so this is my R double

131
00:06:34,419 --> 00:06:36,069
region and I'm capable of pushing an

132
00:06:36,069 --> 00:06:39,970
update here and I would make the

133
00:06:39,970 --> 00:06:42,220
fit a w-2 point to my order the staging

134
00:06:42,220 --> 00:06:46,060
area so I have now provisions to

135
00:06:46,060 --> 00:06:47,590
actually pick up the microcode other

136
00:06:47,590 --> 00:06:50,320
from the original boot block which was

137
00:06:50,320 --> 00:06:53,170
sizing the road region and now have

138
00:06:53,170 --> 00:06:55,240
provision to pick up the microcut from

139
00:06:55,240 --> 00:07:00,160
the RW region as well so this actually

140
00:07:00,160 --> 00:07:03,160
needed are creating one of the leaders

141
00:07:03,160 --> 00:07:05,110
of one of the flash map area for are

142
00:07:05,110 --> 00:07:07,060
doubly staging area to get the

143
00:07:07,060 --> 00:07:09,400
read/write to actually updating my Creek

144
00:07:09,400 --> 00:07:11,500
were there inside the binary gets

145
00:07:11,500 --> 00:07:16,990
updated there and we use the Intel top

146
00:07:16,990 --> 00:07:19,420
swap mechanism to actually switch

147
00:07:19,420 --> 00:07:21,850
between the two boot blocks so if you

148
00:07:21,850 --> 00:07:24,130
want to boot from the microcode that is

149
00:07:24,130 --> 00:07:26,800
part of your auto region you pick up the

150
00:07:26,800 --> 00:07:29,410
top boot block which is on the top and

151
00:07:29,410 --> 00:07:32,410
if you want to boot with a boot block

152
00:07:32,410 --> 00:07:35,110
that points to your micro code in the

153
00:07:35,110 --> 00:07:37,450
our double staging area you pick the

154
00:07:37,450 --> 00:07:40,270
other boot block which is down there so

155
00:07:40,270 --> 00:07:42,400
you use the Intel Topshop mechanism to

156
00:07:42,400 --> 00:07:44,140
actually switch between the two boot

157
00:07:44,140 --> 00:07:53,110
blocks so in terms of the inflammation

158
00:07:53,110 --> 00:07:56,169
relies on picking the microcode update

159
00:07:56,169 --> 00:08:00,970
from the our double staging area so this

160
00:08:00,970 --> 00:08:03,640
would essentially need your the fit that

161
00:08:03,640 --> 00:08:06,070
is allocated in the second boot block to

162
00:08:06,070 --> 00:08:11,440
point to your RW staging area and you

163
00:08:11,440 --> 00:08:13,450
somehow need a knob to switch between

164
00:08:13,450 --> 00:08:16,600
the two boot blocks right so that knob

165
00:08:16,600 --> 00:08:19,150
is provided by your RTC backup control

166
00:08:19,150 --> 00:08:22,570
register which i like we mentioned there

167
00:08:22,570 --> 00:08:24,280
is a feature called top strap right

168
00:08:24,280 --> 00:08:25,900
where you can it allows you to pick

169
00:08:25,900 --> 00:08:29,919
either of the two boot blocks so we'll

170
00:08:29,919 --> 00:08:32,169
look into general how the top strap

171
00:08:32,169 --> 00:08:36,969
works so top strap is an Intel feature

172
00:08:36,969 --> 00:08:39,370
which is capable of inverting address

173
00:08:39,370 --> 00:08:43,390
lines ranging from a 16 to a 24 the

174
00:08:43,390 --> 00:08:44,740
current implementation what you have

175
00:08:44,740 --> 00:08:48,250
done is we have set the tops of enable

176
00:08:48,250 --> 00:08:50,500
in the descriptor plus we have set the

177
00:08:50,500 --> 00:08:53,010
top strap

178
00:08:54,930 --> 00:09:02,050
sure yeah so you see on the screen it

179
00:09:02,050 --> 00:09:04,630
has capability to actually invert a 16

180
00:09:04,630 --> 00:09:10,060
to a 20 lines so for 16 64 KB if I set

181
00:09:10,060 --> 00:09:11,860
the talk shop to enable and said the

182
00:09:11,860 --> 00:09:15,250
tops off size to 64 KB and you set your

183
00:09:15,250 --> 00:09:17,680
boot block size to 64 KB you can

184
00:09:17,680 --> 00:09:19,690
actually invert the access to the boot

185
00:09:19,690 --> 00:09:22,570
blocks so either a single time when I

186
00:09:22,570 --> 00:09:27,130
enable the top swap so when I enable the

187
00:09:27,130 --> 00:09:29,890
talk shop this boot block gets picked up

188
00:09:29,890 --> 00:09:33,010
when I disable the tops from the boot

189
00:09:33,010 --> 00:09:35,290
block which is above get fixed up picked

190
00:09:35,290 --> 00:09:37,600
up so essentially both the boot block

191
00:09:37,600 --> 00:09:39,420
are now pointing to different fits and

192
00:09:39,420 --> 00:09:42,670
when I boot from the book boot block

193
00:09:42,670 --> 00:09:45,130
which is on the first one I'm able to

194
00:09:45,130 --> 00:09:47,380
point to the microcode binary in the

195
00:09:47,380 --> 00:09:49,870
Aero region if I pick B my boot block

196
00:09:49,870 --> 00:09:52,410
which is below and we will do boot

197
00:09:52,410 --> 00:09:55,840
passing microgrid from the RW region so

198
00:09:55,840 --> 00:09:58,390
this allows me to get actually updating

199
00:09:58,390 --> 00:10:02,710
microcode region and use the micro can

200
00:10:02,710 --> 00:10:04,290
update from there

201
00:10:04,290 --> 00:10:06,820
so this back up control rule says part

202
00:10:06,820 --> 00:10:10,120
of your RTC resistor block and you can

203
00:10:10,120 --> 00:10:12,910
just write one zero to it I to as a

204
00:10:12,910 --> 00:10:14,800
switch to enable the tops up and disable

205
00:10:14,800 --> 00:10:24,340
the top strap so we'll look at the

206
00:10:24,340 --> 00:10:28,330
general flow as to how the top strap or

207
00:10:28,330 --> 00:10:30,370
the magic code update would work with

208
00:10:30,370 --> 00:10:32,850
the architecture that is being planned

209
00:10:32,850 --> 00:10:36,160
so let's suppose you are into a kernel

210
00:10:36,160 --> 00:10:38,110
and you bought booted with your active

211
00:10:38,110 --> 00:10:44,680
firmware block RW a and and you have

212
00:10:44,680 --> 00:10:46,930
ruled out an update which is having the

213
00:10:46,930 --> 00:10:50,230
microcode update and since you your

214
00:10:50,230 --> 00:10:52,600
active for my block is RW a the farmer

215
00:10:52,600 --> 00:10:55,840
gets loaded into RW b now this the

216
00:10:55,840 --> 00:10:57,790
firmware pass that is the update hat

217
00:10:57,790 --> 00:10:59,710
that has come comes within a brittle

218
00:10:59,710 --> 00:11:03,430
microcode binary as well so the

219
00:11:03,430 --> 00:11:05,680
microcode version and RW a which is your

220
00:11:05,680 --> 00:11:07,370
current booting slot was

221
00:11:07,370 --> 00:11:10,400
me too and the microcode version in the

222
00:11:10,400 --> 00:11:12,830
staging area which the other boot block

223
00:11:12,830 --> 00:11:16,130
points to is also v1 and in my cougar

224
00:11:16,130 --> 00:11:17,720
version that has come as a part of

225
00:11:17,720 --> 00:11:21,140
update is version v2 and your top strap

226
00:11:21,140 --> 00:11:23,810
is set to one because your normal boot

227
00:11:23,810 --> 00:11:25,640
would always have your tops are set to

228
00:11:25,640 --> 00:11:25,940
one

229
00:11:25,940 --> 00:11:27,500
so you will essentially boot with the

230
00:11:27,500 --> 00:11:30,110
boot block point they having fit

231
00:11:30,110 --> 00:11:34,100
pointing it to your RW region so when

232
00:11:34,100 --> 00:11:37,880
you when you reboot this system the way

233
00:11:37,880 --> 00:11:42,410
when you reboot this system your boot

234
00:11:42,410 --> 00:11:46,720
block that gets picked up your fit that

235
00:11:46,720 --> 00:11:49,400
is currently pointing to a micro staging

236
00:11:49,400 --> 00:11:53,000
area which shows the version v1 so if

237
00:11:53,000 --> 00:11:56,120
you look here the staging area still has

238
00:11:56,120 --> 00:11:58,580
the version v1 and your fit points to it

239
00:11:58,580 --> 00:12:01,640
so as soon as you figure a reboot your

240
00:12:01,640 --> 00:12:03,950
version v1 gets loaded you come to boot

241
00:12:03,950 --> 00:12:07,339
Block B boot sees that the rwb has been

242
00:12:07,339 --> 00:12:10,339
updated and the firmware next said to

243
00:12:10,339 --> 00:12:12,980
from where B so start speaking of the

244
00:12:12,980 --> 00:12:17,480
from where B now boots further picking

245
00:12:17,480 --> 00:12:20,390
up the firmware be with and comes to RAM

246
00:12:20,390 --> 00:12:23,900
stage so that ramjet is a driver which

247
00:12:23,900 --> 00:12:26,870
looks which sees are different in the

248
00:12:26,870 --> 00:12:29,570
microcode version between the slot and

249
00:12:29,570 --> 00:12:32,089
he one me one mic the microcode which is

250
00:12:32,089 --> 00:12:35,660
storing the staging area so like as we

251
00:12:35,660 --> 00:12:37,940
mentioned the microcode in the update

252
00:12:37,940 --> 00:12:40,310
would be version v2 and the one you are

253
00:12:40,310 --> 00:12:42,230
running into is v1 so there's a

254
00:12:42,230 --> 00:12:45,200
difference in the version there so what

255
00:12:45,200 --> 00:12:47,870
it does is it's updates the staging area

256
00:12:47,870 --> 00:12:52,190
with version v2 and your fit now points

257
00:12:52,190 --> 00:12:54,890
to was pointing to staging area right so

258
00:12:54,890 --> 00:12:57,290
now you fit actually points to your

259
00:12:57,290 --> 00:13:02,480
version v2 here so you disabled it out

260
00:13:02,480 --> 00:13:04,279
strap well while doing it just for a

261
00:13:04,279 --> 00:13:06,709
precautionary way if the update is big

262
00:13:06,709 --> 00:13:09,170
broken you still have a way to point

263
00:13:09,170 --> 00:13:12,010
your macro code to your arrow region and

264
00:13:12,010 --> 00:13:16,339
then you issue a reset here so once you

265
00:13:16,339 --> 00:13:20,120
show a reset here you're already the fit

266
00:13:20,120 --> 00:13:21,139
now would point to

267
00:13:21,139 --> 00:13:23,269
version v2 which just got updated in the

268
00:13:23,269 --> 00:13:26,359
staging area so just before the reset

269
00:13:26,359 --> 00:13:29,509
you actually now started picking up the

270
00:13:29,509 --> 00:13:33,319
version v2 so earlier you actually

271
00:13:33,319 --> 00:13:35,749
booted with version v1 now you have a

272
00:13:35,749 --> 00:13:40,129
version v2 running on the CPU now you

273
00:13:40,129 --> 00:13:42,829
come to the scene check when you see the

274
00:13:42,829 --> 00:13:45,859
slot RW is updated to v2 the staging

275
00:13:45,859 --> 00:13:47,809
area is v2 and the current running

276
00:13:47,809 --> 00:13:50,959
version is v2 so you you just do a

277
00:13:50,959 --> 00:13:53,779
flashback project for this staging area

278
00:13:53,779 --> 00:13:56,600
and you boot further so this is the

279
00:13:56,600 --> 00:13:59,720
update flow that is that would you would

280
00:13:59,720 --> 00:14:04,009
see with the plan implementation now

281
00:14:04,009 --> 00:14:06,709
coming to the recovery part where due to

282
00:14:06,709 --> 00:14:10,059
some reason there is failure right so

283
00:14:10,059 --> 00:14:13,309
y-you might look good that gets loaded

284
00:14:13,309 --> 00:14:16,220
after the update is version v1 you come

285
00:14:16,220 --> 00:14:19,069
to reboot so the cases for recovery

286
00:14:19,069 --> 00:14:21,379
would be your staging area after the

287
00:14:21,379 --> 00:14:24,350
update gets updated with version v2 your

288
00:14:24,350 --> 00:14:26,899
microcode version in the RO cannot get

289
00:14:26,899 --> 00:14:29,660
updated so still it holds the reference

290
00:14:29,660 --> 00:14:33,499
to version v1 and it and the recovery

291
00:14:33,499 --> 00:14:36,860
case like when you the default boot

292
00:14:36,860 --> 00:14:41,209
scenario is with topshop enable C so

293
00:14:41,209 --> 00:14:43,249
issue Arisa either by manual grip

294
00:14:43,249 --> 00:14:45,230
recovery or developer based recovery

295
00:14:45,230 --> 00:14:48,829
right you issue a reboot the my go code

296
00:14:48,829 --> 00:14:50,449
version that gets loaded after the

297
00:14:50,449 --> 00:14:53,410
update was v2 you come to the boot block

298
00:14:53,410 --> 00:14:58,819
so if recovery is set and top sub it is

299
00:14:58,819 --> 00:15:01,429
set to enable what the logic would do it

300
00:15:01,429 --> 00:15:04,789
would say detox were +0 so essentially

301
00:15:04,789 --> 00:15:08,059
it will make the fit to point to your

302
00:15:08,059 --> 00:15:10,610
arrow region so pick up the alternate

303
00:15:10,610 --> 00:15:12,769
boot block that we have put that was

304
00:15:12,769 --> 00:15:16,549
part of the original implementation so

305
00:15:16,549 --> 00:15:19,429
now after this shoe issue a reboot you

306
00:15:19,429 --> 00:15:21,289
sure you boot now your boot block gets

307
00:15:21,289 --> 00:15:23,089
in that gets picked up is the upper one

308
00:15:23,089 --> 00:15:24,980
which has the straight which points to

309
00:15:24,980 --> 00:15:26,929
your arrow good aroma if you could

310
00:15:26,929 --> 00:15:29,989
update so on the reset the ro micro

311
00:15:29,989 --> 00:15:31,610
could update gets picked up and you

312
00:15:31,610 --> 00:15:34,989
would further through the recovery

313
00:15:36,040 --> 00:15:38,950
so this isn't generality recovery case

314
00:15:38,950 --> 00:15:41,530
so this is the first boot case where

315
00:15:41,530 --> 00:15:45,080
you're actually staging areas empty your

316
00:15:45,080 --> 00:15:48,950
micro code binary in your ROM are ro RW

317
00:15:48,950 --> 00:15:52,430
AR WB is all same so all I said to

318
00:15:52,430 --> 00:15:54,230
version be one because this is basically

319
00:15:54,230 --> 00:15:56,120
when you build an image and flash it or

320
00:15:56,120 --> 00:15:59,030
a factory flash when you flash the image

321
00:15:59,030 --> 00:16:03,260
so all the AR AR o RW AR WB would have

322
00:16:03,260 --> 00:16:08,090
the same C microcode binaries and the

323
00:16:08,090 --> 00:16:10,640
initial top suck state is the buck

324
00:16:10,640 --> 00:16:14,960
control default which is set to zero so

325
00:16:14,960 --> 00:16:18,740
start start booting and then the same

326
00:16:18,740 --> 00:16:19,100
thing

327
00:16:19,100 --> 00:16:20,960
Rammstein driver sees that the staging

328
00:16:20,960 --> 00:16:23,180
area is empty it copies the microcode

329
00:16:23,180 --> 00:16:25,970
binary v1 into the staging area issues a

330
00:16:25,970 --> 00:16:28,310
reboot by setting the top strap to

331
00:16:28,310 --> 00:16:31,310
enable so this would be your normal case

332
00:16:31,310 --> 00:16:33,320
where officer would always be enable for

333
00:16:33,320 --> 00:16:35,270
the normal case and for recovery case

334
00:16:35,270 --> 00:16:39,080
will have tops up always disabled so it

335
00:16:39,080 --> 00:16:40,910
starts spiking the version B went from

336
00:16:40,910 --> 00:16:41,720
the staging area

337
00:16:41,720 --> 00:16:45,040
boots further gets into RAM stage

338
00:16:45,040 --> 00:16:48,310
applies the flash protection to the

339
00:16:48,310 --> 00:16:51,760
microcode staging area and boots further

340
00:16:51,760 --> 00:16:54,620
so this is pretty much the inflammation

341
00:16:54,620 --> 00:16:59,350
flow with the micro quad updates

342
00:17:00,550 --> 00:17:04,569
yeah any questions

343
00:17:17,780 --> 00:17:19,919
so my first question is just for

344
00:17:19,919 --> 00:17:20,970
understanding um

345
00:17:20,970 --> 00:17:24,030
that's this micro code update it doesn't

346
00:17:24,030 --> 00:17:25,890
persist on the CPU right so it has to be

347
00:17:25,890 --> 00:17:29,190
reloaded on every boot okay so does that

348
00:17:29,190 --> 00:17:32,490
mean once you have an update every who

349
00:17:32,490 --> 00:17:34,440
every normal boot after that that's not

350
00:17:34,440 --> 00:17:37,380
recover even load the updated boot block

351
00:17:37,380 --> 00:17:41,340
and aw yeah so the Scopus only lasting

352
00:17:41,340 --> 00:17:43,860
LED boot so for every reboot you'll have

353
00:17:43,860 --> 00:17:46,559
to apply the microcode ID okay and then

354
00:17:46,559 --> 00:17:50,820
when you want to boot in recovery then

355
00:17:50,820 --> 00:17:53,280
you first boot into the updated boot

356
00:17:53,280 --> 00:17:56,250
block and that one will reset to zero

357
00:17:56,250 --> 00:17:58,559
yes but what if it's broken and doesn't

358
00:17:58,559 --> 00:18:00,809
do that should then there's an option

359
00:18:00,809 --> 00:18:05,340
for normal like first recovery where you

360
00:18:05,340 --> 00:18:08,520
see that the system gets hanged or it

361
00:18:08,520 --> 00:18:11,070
gets pricked right so you have a battery

362
00:18:11,070 --> 00:18:13,919
cutoff option through the buttons right

363
00:18:13,919 --> 00:18:16,590
so if you press that you have better cut

364
00:18:16,590 --> 00:18:19,410
off and your RTC back register right it

365
00:18:19,410 --> 00:18:21,660
goes to zero by default so that's like

366
00:18:21,660 --> 00:18:23,970
absolute recovery okay but the user has

367
00:18:23,970 --> 00:18:25,559
to manually do this right there's no

368
00:18:25,559 --> 00:18:27,570
automatic way to recover from that no

369
00:18:27,570 --> 00:18:30,299
okay so this is like this way the system

370
00:18:30,299 --> 00:18:31,830
is bricked and you can't like do

371
00:18:31,830 --> 00:18:33,660
anything sure I mean so on a novel

372
00:18:33,660 --> 00:18:35,940
Chromebook it's not possible to put it

373
00:18:35,940 --> 00:18:38,010
in a state where it won't automatically

374
00:18:38,010 --> 00:18:41,160
recover right because it's always the

375
00:18:41,160 --> 00:18:43,049
binary that gets updated right that's

376
00:18:43,049 --> 00:18:45,600
already being validated at the Intel end

377
00:18:45,600 --> 00:18:48,299
and the google it so whatever has been

378
00:18:48,299 --> 00:18:50,370
pushed as a part of the update is the

379
00:18:50,370 --> 00:18:53,669
same binary and the same team gets

380
00:18:53,669 --> 00:18:56,450
updated in the staging area too but oh

381
00:18:56,450 --> 00:19:00,140
so it's the area flash protected rather

382
00:19:00,140 --> 00:19:03,540
and the and the one you mentioned would

383
00:19:03,540 --> 00:19:06,530
all in the recovery scenario write your

384
00:19:06,530 --> 00:19:09,360
cpu binary is also already likely

385
00:19:09,360 --> 00:19:11,340
microcode binary it's already power of

386
00:19:11,340 --> 00:19:14,730
here or so that can never be tampered so

387
00:19:14,730 --> 00:19:17,010
you'll also always have a scene copy of

388
00:19:17,010 --> 00:19:18,840
mica code there right but you need to

389
00:19:18,840 --> 00:19:22,140
manually trigger it to boot and one more

390
00:19:22,140 --> 00:19:23,030
thing

391
00:19:23,030 --> 00:19:28,500
so isn't this way that the

392
00:19:28,500 --> 00:19:33,210
w firmware can use to circumvent the W

393
00:19:33,210 --> 00:19:37,410
from the rollback protection if it so it

394
00:19:37,410 --> 00:19:39,720
it can essentially attack the read-only

395
00:19:39,720 --> 00:19:42,120
TPM filmer space with that right because

396
00:19:42,120 --> 00:19:44,280
it can reboot into a boot block that is

397
00:19:44,280 --> 00:19:46,110
controlled by the aw firmware and then

398
00:19:46,110 --> 00:19:49,110
it can use the control over the TPM to

399
00:19:49,110 --> 00:19:51,360
drop or modify the TPM spaces that it

400
00:19:51,360 --> 00:19:54,000
wasn't supposed to have access to share

401
00:19:54,000 --> 00:19:56,520
easily this would apply way before the

402
00:19:56,520 --> 00:19:59,790
reset is done right so I mean so the

403
00:19:59,790 --> 00:20:01,050
fundamental problem here is you're

404
00:20:01,050 --> 00:20:03,000
running your boot block out of wheat

405
00:20:03,000 --> 00:20:08,700
variable space but then how do you

406
00:20:08,700 --> 00:20:14,520
update it so if you look at the

407
00:20:14,520 --> 00:20:18,300
following shake it's being so those

408
00:20:18,300 --> 00:20:20,940
blocks right the one in the top is all

409
00:20:20,940 --> 00:20:23,330
are oh right but that was the problem

410
00:20:23,330 --> 00:20:27,270
yet so there's a few pieces to this to

411
00:20:27,270 --> 00:20:31,260
note one is that last bullet point where

412
00:20:31,260 --> 00:20:32,850
it says some IP firmware it can be

413
00:20:32,850 --> 00:20:36,450
passionately during reset that actually

414
00:20:36,450 --> 00:20:39,300
should be also discuss about what type

415
00:20:39,300 --> 00:20:41,490
of resets there's different you know

416
00:20:41,490 --> 00:20:42,960
there's warm and cold and some of that

417
00:20:42,960 --> 00:20:44,790
only gets applied during warm versus

418
00:20:44,790 --> 00:20:47,700
cold and to your point about the attack

419
00:20:47,700 --> 00:20:50,850
vector it is in this particular case the

420
00:20:50,850 --> 00:20:53,550
to boot blocks are sitting in ro but one

421
00:20:53,550 --> 00:20:57,840
of them has a fit entry to a region

422
00:20:57,840 --> 00:20:59,880
that's an RW which is only containing

423
00:20:59,880 --> 00:21:03,050
the microcode update and all the code is

424
00:21:03,050 --> 00:21:06,510
yes the code is still in ro and then go

425
00:21:06,510 --> 00:21:10,560
to the next one of these guys yeah so

426
00:21:10,560 --> 00:21:14,550
that's the are overs RW layout where the

427
00:21:14,550 --> 00:21:19,980
green is ro and then the blue and the

428
00:21:19,980 --> 00:21:24,630
black down below is our w yeah so there

429
00:21:24,630 --> 00:21:26,220
is I mean to your point like you're

430
00:21:26,220 --> 00:21:28,440
essentially on there's a will you I'm

431
00:21:28,440 --> 00:21:30,750
here to go to the next one I think we

432
00:21:30,750 --> 00:21:33,870
had a sequence in time yeah so like it's

433
00:21:33,870 --> 00:21:36,990
these guys between the resets where

434
00:21:36,990 --> 00:21:40,320
that's like your duration of mismatch of

435
00:21:40,320 --> 00:21:41,350
ro and

436
00:21:41,350 --> 00:21:44,019
our W in the hopes that it works more

437
00:21:44,019 --> 00:21:46,059
than anything but that is your attack

438
00:21:46,059 --> 00:21:48,549
vector if you can load a micro code

439
00:21:48,549 --> 00:21:51,220
which is signed and encrypted but in

440
00:21:51,220 --> 00:21:53,320
till what and then you could take over

441
00:21:53,320 --> 00:21:55,600
the actual execution of the CPU to make

442
00:21:55,600 --> 00:21:57,610
it do something different but that's

443
00:21:57,610 --> 00:21:59,919
that's the risk is essentially what what

444
00:21:59,919 --> 00:22:10,029
that opens up okay can you lord old

445
00:22:10,029 --> 00:22:12,070
microcode or is it going by version

446
00:22:12,070 --> 00:22:15,700
number no it's in a dual micro core - so

447
00:22:15,700 --> 00:22:19,059
then you can basically attack this by

448
00:22:19,059 --> 00:22:22,840
yes or the other bit was go - he had FPR

449
00:22:22,840 --> 00:22:25,059
somewhere which wasn't mentioned in here

450
00:22:25,059 --> 00:22:28,750
but it is in there it's there last time

451
00:22:28,750 --> 00:22:31,870
yeah so that is a Stanford flash

452
00:22:31,870 --> 00:22:34,690
protection region so basically in these

453
00:22:34,690 --> 00:22:38,190
PI controller you could so I mean

454
00:22:38,190 --> 00:22:41,799
ignoring a physical attack but then the

455
00:22:41,799 --> 00:22:44,019
flash protection register will protect

456
00:22:44,019 --> 00:22:46,529
access to that specific region I

457
00:22:46,529 --> 00:22:49,509
understand but if somebody puts their if

458
00:22:49,509 --> 00:22:52,120
you update my gray code and you manage

459
00:22:52,120 --> 00:22:54,929
to update it to an old version which is

460
00:22:54,929 --> 00:22:58,330
flawed for whatever reason this one this

461
00:22:58,330 --> 00:23:00,940
the old version will be executed from

462
00:23:00,940 --> 00:23:04,720
our W if that other direction is enabled

463
00:23:04,720 --> 00:23:06,909
I mean that's what Aaron mentioned you

464
00:23:06,909 --> 00:23:08,799
are actually doing a flash project on

465
00:23:08,799 --> 00:23:11,320
that so while booting to the CUDA kernel

466
00:23:11,320 --> 00:23:13,840
you would not have actually a right

467
00:23:13,840 --> 00:23:16,600
access to that to you but at some point

468
00:23:16,600 --> 00:23:18,549
you had right access to that top de

469
00:23:18,549 --> 00:23:21,460
demócrata code right so what one you

470
00:23:21,460 --> 00:23:23,500
updating the microcode you put there not

471
00:23:23,500 --> 00:23:26,110
a newer but older version yeah there is

472
00:23:26,110 --> 00:23:29,620
only happen for sure but that it's also

473
00:23:29,620 --> 00:23:31,659
within the purview of our boot flow of

474
00:23:31,659 --> 00:23:33,370
already choosing things to verify boot

475
00:23:33,370 --> 00:23:36,190
right that's all packaged together and

476
00:23:36,190 --> 00:23:37,750
just taking it from one area and putting

477
00:23:37,750 --> 00:23:42,009
it into another this is part of the

478
00:23:42,009 --> 00:23:43,960
chain of trust it is not every link in

479
00:23:43,960 --> 00:23:46,210
the chain of trust so something else

480
00:23:46,210 --> 00:23:49,120
would be preferred to verify that you're

481
00:23:49,120 --> 00:23:50,649
actually about to load the right

482
00:23:50,649 --> 00:23:53,590
microcode that's like an UEFI was

483
00:23:53,590 --> 00:23:55,160
something like capsule update it was

484
00:23:55,160 --> 00:23:58,310
and was to have us focus before loading

485
00:23:58,310 --> 00:24:02,330
it it's like the staging area right you

486
00:24:02,330 --> 00:24:04,580
actually started loop right you do a

487
00:24:04,580 --> 00:24:06,800
dash where you actually load the micro

488
00:24:06,800 --> 00:24:07,940
from the staging area

489
00:24:07,940 --> 00:24:10,130
if the micro version turns out to be

490
00:24:10,130 --> 00:24:13,640
invalid you actually drop that and just

491
00:24:13,640 --> 00:24:15,470
reboot setting the top swap to zero

492
00:24:15,470 --> 00:24:15,920
right

493
00:24:15,920 --> 00:24:17,440
right that's why what I'm saying is that

494
00:24:17,440 --> 00:24:20,030
this is the process and to prevent

495
00:24:20,030 --> 00:24:21,950
things like going back to rolling back

496
00:24:21,950 --> 00:24:23,180
to an older microcode there has to be

497
00:24:23,180 --> 00:24:25,220
some other thing in the process of like

498
00:24:25,220 --> 00:24:36,890
delivering to the system yes thanks for

499
00:24:36,890 --> 00:24:38,510
the presentation I have a question on

500
00:24:38,510 --> 00:24:40,490
can this myth or be applied to other

501
00:24:40,490 --> 00:24:43,280
binary blobs like any image

502
00:24:43,280 --> 00:24:47,060
so yeah that's walking pro Krish it's

503
00:24:47,060 --> 00:24:51,200
working progress okay yeah I think the

504
00:24:51,200 --> 00:24:53,330
it's definitely working progress the

505
00:24:53,330 --> 00:24:56,000
unique thing yeah I mean I would I'd say

506
00:24:56,000 --> 00:24:57,860
and I think I Mara would agree with me

507
00:24:57,860 --> 00:25:00,950
this is a a solution with the pieces

508
00:25:00,950 --> 00:25:02,690
that we have to work with it is not an

509
00:25:02,690 --> 00:25:05,390
ideal solution but this is what's baked

510
00:25:05,390 --> 00:25:07,370
into existing hardware and some of the

511
00:25:07,370 --> 00:25:10,850
assumptions and the intel's designs and

512
00:25:10,850 --> 00:25:17,950
then yes we well so sorry this is also

513
00:25:17,950 --> 00:25:21,710
intersects with Chrome OS as designs and

514
00:25:21,710 --> 00:25:24,800
intent which is we care about not

515
00:25:24,800 --> 00:25:27,680
breaking a machine yes and and we're

516
00:25:27,680 --> 00:25:29,870
talking earlier how it opens up a

517
00:25:29,870 --> 00:25:32,180
potential vector potentially of breaking

518
00:25:32,180 --> 00:25:34,220
a machine but fundamentally we don't

519
00:25:34,220 --> 00:25:36,070
want to ever break a machine and

520
00:25:36,070 --> 00:25:39,170
recovery in that particular case is a

521
00:25:39,170 --> 00:25:42,410
first classes and then that you can

522
00:25:42,410 --> 00:25:44,690
always at least get some input or an out

523
00:25:44,690 --> 00:25:46,190
or excuse me like me output from a

524
00:25:46,190 --> 00:25:47,810
device that you can get it back into a

525
00:25:47,810 --> 00:25:49,820
clean state so that's why we have in our

526
00:25:49,820 --> 00:25:51,650
Oh which actually contains all the

527
00:25:51,650 --> 00:25:54,530
pieces to basically re image everything

528
00:25:54,530 --> 00:25:57,110
on your machine and then if you don't

529
00:25:57,110 --> 00:26:00,590
care about that and there's various many

530
00:26:00,590 --> 00:26:02,720
designs actually go down that path it's

531
00:26:02,720 --> 00:26:04,190
like you're basically in a crippled

532
00:26:04,190 --> 00:26:05,570
state you don't actually know you just

533
00:26:05,570 --> 00:26:07,670
know the things broken sometimes maybe

534
00:26:07,670 --> 00:26:08,720
there's a

535
00:26:08,720 --> 00:26:10,490
my band path for updating sometimes

536
00:26:10,490 --> 00:26:14,270
there isn't or for that it could be a

537
00:26:14,270 --> 00:26:16,820
USB type thing and assisted USB through

538
00:26:16,820 --> 00:26:18,440
the Emmy or something like that that's

539
00:26:18,440 --> 00:26:21,530
also a possibility however you don't

540
00:26:21,530 --> 00:26:23,090
really have a lot of input to the end

541
00:26:23,090 --> 00:26:25,640
user that things are in that state what

542
00:26:25,640 --> 00:26:27,110
are you supposed to do I hit the button

543
00:26:27,110 --> 00:26:30,500
it just looks like it's dead in Chrome

544
00:26:30,500 --> 00:26:32,330
OS for Chromebooks and things like that

545
00:26:32,330 --> 00:26:34,549
our whole goal is that oles provide a

546
00:26:34,549 --> 00:26:36,350
signal to the user what is going on in

547
00:26:36,350 --> 00:26:37,850
that particular case that's why we fall

548
00:26:37,850 --> 00:26:40,159
back to a full ro path and we can

549
00:26:40,159 --> 00:26:42,230
display instructions and that sort of

550
00:26:42,230 --> 00:26:43,640
stuff so that you can get the system

551
00:26:43,640 --> 00:26:48,470
back into a normal place so the moment

552
00:26:48,470 --> 00:26:50,570
you say I don't care about that you

553
00:26:50,570 --> 00:26:52,039
don't need a lot of redundancy you don't

554
00:26:52,039 --> 00:26:53,929
need in which what that's what this is

555
00:26:53,929 --> 00:26:57,080
trying to ensure to to allow the ro path

556
00:26:57,080 --> 00:26:59,030
as well as you know updating all these

557
00:26:59,030 --> 00:27:02,240
other pieces and and if you if you don't

558
00:27:02,240 --> 00:27:04,610
care about risking that presumably brick

559
00:27:04,610 --> 00:27:06,500
then you can definitely just throw out a

560
00:27:06,500 --> 00:27:13,340
lot of these things yeah if you have a

561
00:27:13,340 --> 00:27:16,039
sideband way to recover your system then

562
00:27:16,039 --> 00:27:18,950
yes right which is give a BMC connected

563
00:27:18,950 --> 00:27:20,539
to a control network that's a pretty

564
00:27:20,539 --> 00:27:24,890
easy way to get stuff reprovision okay

565
00:27:24,890 --> 00:27:28,850
question hi2 is a tough small reliable

566
00:27:28,850 --> 00:27:32,419
because in my preference we found tops

567
00:27:32,419 --> 00:27:36,409
Baba can be like a few mistaken set up

568
00:27:36,409 --> 00:27:39,530
by because the power sequence the power

569
00:27:39,530 --> 00:27:41,570
signal was not good then TAS valve can

570
00:27:41,570 --> 00:27:44,750
be a mistake instead then the the the

571
00:27:44,750 --> 00:27:47,270
tube state has put in order to block so

572
00:27:47,270 --> 00:27:51,440
I won't do it pops up is Rapa Nui find

573
00:27:51,440 --> 00:27:53,630
it like we have not it's also going to

574
00:27:53,630 --> 00:27:55,970
instances where it's not reliable so

575
00:27:55,970 --> 00:27:58,220
every time you have tested this we were

576
00:27:58,220 --> 00:27:59,450
actually able to switch between

577
00:27:59,450 --> 00:28:02,390
different table and actually able to

578
00:28:02,390 --> 00:28:04,400
switch between the microcode binary in

579
00:28:04,400 --> 00:28:07,220
the staging area and e1x again be so

580
00:28:07,220 --> 00:28:09,230
pretty reliable I'm not sure what your

581
00:28:09,230 --> 00:28:11,659
experience is because we have poor

582
00:28:11,659 --> 00:28:13,370
management comes horror on the poor to

583
00:28:13,370 --> 00:28:16,280
capture a power signals and we found if

584
00:28:16,280 --> 00:28:18,380
some kind of condition and mac/pc edge

585
00:28:18,380 --> 00:28:20,149
you're not happy so PC you're mistaken

586
00:28:20,149 --> 00:28:23,000
is set out the bit this is for which

587
00:28:23,000 --> 00:28:26,059
Hoss well okay sure yeah at that time I

588
00:28:26,059 --> 00:28:27,740
believe it's fit table it's already

589
00:28:27,740 --> 00:28:30,110
there so and then the second question is

590
00:28:30,110 --> 00:28:32,780
to do it it can go back to the previous

591
00:28:32,780 --> 00:28:38,510
size poor afro and this one no next one

592
00:28:38,510 --> 00:28:39,590
next one

593
00:28:39,590 --> 00:28:41,750
yeah I see you have a fifth table loaded

594
00:28:41,750 --> 00:28:45,170
so so yeah but you have to pop rock they

595
00:28:45,170 --> 00:28:47,450
I wonder if you need to have two fifth

596
00:28:47,450 --> 00:28:51,590
type of in the design no actually we

597
00:28:51,590 --> 00:28:54,919
wanted to have a root of trust so is

598
00:28:54,919 --> 00:28:57,290
your question like we could have no my

599
00:28:57,290 --> 00:28:59,480
question is fifth level contains the

600
00:28:59,480 --> 00:29:01,850
information from my cocoa the absolute

601
00:29:01,850 --> 00:29:05,540
location yeah so if you put you have too

602
00:29:05,540 --> 00:29:07,669
much to pop rock to contain two

603
00:29:07,669 --> 00:29:10,070
different Russian Mong Kok oh so you but

604
00:29:10,070 --> 00:29:13,220
you only have one fifth table so that

605
00:29:13,220 --> 00:29:15,140
means if your table that my cocoa

606
00:29:15,140 --> 00:29:17,000
size does not match although they are

607
00:29:17,000 --> 00:29:19,400
there new one is larger in the previous

608
00:29:19,400 --> 00:29:21,650
one I lost job it's more in previous one

609
00:29:21,650 --> 00:29:24,230
then the fit table definite some change

610
00:29:24,230 --> 00:29:26,570
oh you have multiple my cocoa so we

611
00:29:26,570 --> 00:29:28,400
actually populate different table on the

612
00:29:28,400 --> 00:29:30,980
runtime which variate fix the microcode

613
00:29:30,980 --> 00:29:33,590
binary and fills in that lead as to

614
00:29:33,590 --> 00:29:35,120
where the microcode binary sitting it

615
00:29:35,120 --> 00:29:38,240
and the size of the magical binary and

616
00:29:38,240 --> 00:29:40,220
the every entry that goes into the fact

617
00:29:40,220 --> 00:29:42,340
table right so that's done by the code

618
00:29:42,340 --> 00:29:46,429
so pretty level so I'm here I think you

619
00:29:46,429 --> 00:29:48,860
have a picture this where you listed the

620
00:29:48,860 --> 00:29:50,240
to boot there's actually two different

621
00:29:50,240 --> 00:29:55,040
foot tables yeah yeah this is the

622
00:29:55,040 --> 00:30:02,510
picture oh yeah my cushion it so nice

623
00:30:02,510 --> 00:30:06,260
all right thank you shabooey boot blocks

624
00:30:06,260 --> 00:30:09,910
would be part of your Auto Show

625
00:30:14,580 --> 00:30:18,780
any other questions more questions

626
00:30:28,100 --> 00:30:31,160
in case you forgot for the questions do

627
00:30:31,160 --> 00:30:33,890
drop the needles will respond to the

628
00:30:33,890 --> 00:30:34,820
queries yeah

629
00:30:34,820 --> 00:30:40,360
Joe alright thank you thank you

630
00:30:43,490 --> 00:30:49,730
[Music]

