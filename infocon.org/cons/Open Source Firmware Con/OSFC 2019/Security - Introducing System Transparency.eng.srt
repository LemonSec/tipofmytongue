1
00:00:03,190 --> 00:00:06,259
[Music]

2
00:00:07,400 --> 00:00:10,410
okay uh hi I'm Daniel you might remember

3
00:00:10,410 --> 00:00:12,480
me from last year also moderating the

4
00:00:12,480 --> 00:00:14,130
security track and welcome back to the

5
00:00:14,130 --> 00:00:16,770
security track then otherwise hello and

6
00:00:16,770 --> 00:00:18,900
welcome to the security track

7
00:00:18,900 --> 00:00:21,300
so first up now we have kind Frederick

8
00:00:21,300 --> 00:00:23,970
talking about transparency and enjoy the

9
00:00:23,970 --> 00:00:29,910
first talk right thank you mmm let's see

10
00:00:29,910 --> 00:00:31,529
it's my microphone still working

11
00:00:31,529 --> 00:00:35,489
excellent thanks alright so welcome to

12
00:00:35,489 --> 00:00:38,010
our talk on system transparency my name

13
00:00:38,010 --> 00:00:40,379
is Frederick this is my colleague hi

14
00:00:40,379 --> 00:00:42,690
okay would you care to start hey i'm

15
00:00:42,690 --> 00:00:47,399
calculus and a previous worked in the GP

16
00:00:47,399 --> 00:00:49,980
ecosystem and now i'm a system security

17
00:00:49,980 --> 00:00:52,649
i checked for us it's not a security and

18
00:00:52,649 --> 00:00:54,710
I'm interested in program analysis

19
00:00:54,710 --> 00:00:57,140
cryptography and trusted computing and

20
00:00:57,140 --> 00:00:59,699
my name is Frederic Stromberg I've been

21
00:00:59,699 --> 00:01:01,680
interested in philosophy and computer

22
00:01:01,680 --> 00:01:05,369
security for over 20 years and as a side

23
00:01:05,369 --> 00:01:07,650
effect of that ten years ago I started a

24
00:01:07,650 --> 00:01:10,320
VPN service named mo vaad together with

25
00:01:10,320 --> 00:01:11,100
a friend of mine

26
00:01:11,100 --> 00:01:14,070
Daniel Bernsen which eventually led me

27
00:01:14,070 --> 00:01:17,040
to meet Kai and now we stand before you

28
00:01:17,040 --> 00:01:22,770
here today and Boulevard like all other

29
00:01:22,770 --> 00:01:24,900
weekend providers attempt to protect the

30
00:01:24,900 --> 00:01:28,530
privacy and security of their users by

31
00:01:28,530 --> 00:01:30,299
among other things proxying all the

32
00:01:30,299 --> 00:01:30,930
traffic

33
00:01:30,930 --> 00:01:34,470
this puts VPN providers in great

34
00:01:34,470 --> 00:01:36,030
positions of power without much

35
00:01:36,030 --> 00:01:39,270
accountability for that reason their

36
00:01:39,270 --> 00:01:41,070
trustworthiness and transparency are

37
00:01:41,070 --> 00:01:45,390
imperative for this for us this this

38
00:01:45,390 --> 00:01:48,240
insight led to an obsession with the

39
00:01:48,240 --> 00:01:49,799
question of how do we prove our

40
00:01:49,799 --> 00:01:51,740
trustworthiness to our users the

41
00:01:51,740 --> 00:01:55,049
following presentation is one or salt of

42
00:01:55,049 --> 00:01:59,490
that 10 year long obsession computer

43
00:01:59,490 --> 00:02:01,770
security exists to facilitate trust and

44
00:02:01,770 --> 00:02:04,020
the fundamental part of security is

45
00:02:04,020 --> 00:02:06,259
system integrity

46
00:02:06,259 --> 00:02:08,520
unfortunately computer systems are rife

47
00:02:08,520 --> 00:02:10,110
with vulnerabilities

48
00:02:10,110 --> 00:02:13,470
administrators are in recurring races to

49
00:02:13,470 --> 00:02:13,950
patch

50
00:02:13,950 --> 00:02:17,280
before attackers exploits even with a

51
00:02:17,280 --> 00:02:19,620
good patching story however a system

52
00:02:19,620 --> 00:02:21,629
once compromised is often costed to get

53
00:02:21,629 --> 00:02:24,150
back to a secure state a lack of

54
00:02:24,150 --> 00:02:26,670
trustworthy audit trails may prevent

55
00:02:26,670 --> 00:02:28,290
discovering the initial cost of the

56
00:02:28,290 --> 00:02:29,819
breach resulting in inadequate

57
00:02:29,819 --> 00:02:31,459
mitigations

58
00:02:31,459 --> 00:02:34,260
additionally systems also offer many

59
00:02:34,260 --> 00:02:36,030
places to hide and gain malware

60
00:02:36,030 --> 00:02:39,390
persistence the technical challenges

61
00:02:39,390 --> 00:02:42,330
involved in maintaining system integrity

62
00:02:42,330 --> 00:02:45,150
with a relatively high assurance prevent

63
00:02:45,150 --> 00:02:49,500
most organizations from doing so today

64
00:02:49,500 --> 00:02:51,720
we introduce a novel design approach to

65
00:02:51,720 --> 00:02:53,670
ensuring and maintaining system

66
00:02:53,670 --> 00:02:56,640
integrity its utilizes seven established

67
00:02:56,640 --> 00:02:59,549
concepts which all assist in doing so in

68
00:02:59,549 --> 00:03:01,980
orthogonal ways through their

69
00:03:01,980 --> 00:03:03,959
combination new security properties

70
00:03:03,959 --> 00:03:07,049
emerge used correctly system

71
00:03:07,049 --> 00:03:08,489
transparency will prevent malware

72
00:03:08,489 --> 00:03:10,799
persistence provide an extensive and

73
00:03:10,799 --> 00:03:13,019
trustworthy audit trail and eventually

74
00:03:13,019 --> 00:03:15,690
self-heal after compromise within

75
00:03:15,690 --> 00:03:17,760
certain limitations it can be used to

76
00:03:17,760 --> 00:03:19,620
prove to third parties what is currently

77
00:03:19,620 --> 00:03:21,750
running on the system and what it has

78
00:03:21,750 --> 00:03:26,430
been permitted to run in the past but

79
00:03:26,430 --> 00:03:29,370
before I say more let's start with let's

80
00:03:29,370 --> 00:03:31,380
consider three different perspectives to

81
00:03:31,380 --> 00:03:34,799
put us in the right frame of mind first

82
00:03:34,799 --> 00:03:38,459
of all a wonderful property of computing

83
00:03:38,459 --> 00:03:40,530
systems is that they do exactly what we

84
00:03:40,530 --> 00:03:43,109
tell them to do unfortunately it turns

85
00:03:43,109 --> 00:03:44,819
out we are not yet very good at giving

86
00:03:44,819 --> 00:03:47,639
instructions we are not very good at

87
00:03:47,639 --> 00:03:50,790
managing the complexity yet regardless

88
00:03:50,790 --> 00:03:52,889
computers are state machines which can

89
00:03:52,889 --> 00:03:55,440
be reset to an initial state and it is

90
00:03:55,440 --> 00:03:56,910
from that state that we must take care

91
00:03:56,910 --> 00:03:58,709
to build a foundation worthy of our

92
00:03:58,709 --> 00:04:02,639
trust second of all this is one of my

93
00:04:02,639 --> 00:04:06,049
favorite quotes on on computer security

94
00:04:06,049 --> 00:04:08,579
exploitation of vulnerabilities can be

95
00:04:08,579 --> 00:04:10,739
modeled as the practical exploration of

96
00:04:10,739 --> 00:04:13,139
the space of states not intended by the

97
00:04:13,139 --> 00:04:15,540
designer of the system I think that's a

98
00:04:15,540 --> 00:04:18,238
wonderful formulation in other words let

99
00:04:18,238 --> 00:04:20,488
us make unintended state transitions

100
00:04:20,488 --> 00:04:22,380
hard to accomplish at all levels of

101
00:04:22,380 --> 00:04:26,130
abstraction and third well-designed

102
00:04:26,130 --> 00:04:27,780
modern

103
00:04:27,780 --> 00:04:29,700
design modern cryptographic protocols

104
00:04:29,700 --> 00:04:31,560
can be reduced to assumptions of

105
00:04:31,560 --> 00:04:34,080
computational hardness it can be reduced

106
00:04:34,080 --> 00:04:36,660
to reliance on the crypto primitives

107
00:04:36,660 --> 00:04:39,330
involved together with the previous

108
00:04:39,330 --> 00:04:41,430
perspectives this suggests an

109
00:04:41,430 --> 00:04:43,380
interesting approach to ensuring system

110
00:04:43,380 --> 00:04:49,070
integrity and this is what it looks like

111
00:04:49,070 --> 00:04:53,160
there is the initial state in immutable

112
00:04:53,160 --> 00:04:56,419
states of the hardware hardware in

113
00:04:56,419 --> 00:04:59,730
acceleration done by coreboot stored in

114
00:04:59,730 --> 00:05:03,930
integrity protected flash memory network

115
00:05:03,930 --> 00:05:05,700
booth and verification software also

116
00:05:05,700 --> 00:05:10,040
stored in integrity protected flash and

117
00:05:10,040 --> 00:05:12,900
finally the OS and application stage

118
00:05:12,900 --> 00:05:15,060
reached after executing the downloaded

119
00:05:15,060 --> 00:05:19,800
Linux system system transparency

120
00:05:19,800 --> 00:05:21,450
facilitates Trust in the hardware an

121
00:05:21,450 --> 00:05:23,340
initial state of the system through a

122
00:05:23,340 --> 00:05:25,919
provisioning ritual which together with

123
00:05:25,919 --> 00:05:32,400
tamper resistance and TPM and firmer

124
00:05:32,400 --> 00:05:36,560
integrity protection establishes the

125
00:05:36,560 --> 00:05:40,260
root of trust as well as prevents

126
00:05:40,260 --> 00:05:43,130
malware persistence

127
00:05:45,620 --> 00:05:48,450
it requires reproducible builds of all

128
00:05:48,450 --> 00:05:53,220
artifacts in combination with limited

129
00:05:53,220 --> 00:05:56,520
system access which deter and prevent

130
00:05:56,520 --> 00:05:58,530
malicious modification during the build

131
00:05:58,530 --> 00:06:03,479
stage as well as during runtime it

132
00:06:03,479 --> 00:06:05,280
furthermore requires platform at the

133
00:06:05,280 --> 00:06:08,100
station of the boot chain in combination

134
00:06:08,100 --> 00:06:12,479
with transparency log which provide

135
00:06:12,479 --> 00:06:14,190
assurances of the current system

136
00:06:14,190 --> 00:06:16,680
configuration as well as an audit trail

137
00:06:16,680 --> 00:06:22,100
of previous configurations if a machine

138
00:06:22,100 --> 00:06:24,660
using system transparency is compromised

139
00:06:24,660 --> 00:06:27,360
due to an unpatched application it can

140
00:06:27,360 --> 00:06:29,880
reboot load an updated system image and

141
00:06:29,880 --> 00:06:32,850
a test its new patched and uncompromised

142
00:06:32,850 --> 00:06:35,990
food chain to its users

143
00:06:38,750 --> 00:06:43,940
which brings us from the f3 design I did

144
00:06:44,210 --> 00:06:46,590
which brings us from the abstract design

145
00:06:46,590 --> 00:06:48,120
ID and the philosophy to the

146
00:06:48,120 --> 00:06:51,450
implementation plan so system

147
00:06:51,450 --> 00:06:52,890
transparency in stands on four pillars

148
00:06:52,890 --> 00:06:56,220
the first one being a unique and hard to

149
00:06:56,220 --> 00:06:58,320
forge platform identity which allows us

150
00:06:58,320 --> 00:07:00,840
to make statements about concrete

151
00:07:00,840 --> 00:07:02,730
systems in the system transparency

152
00:07:02,730 --> 00:07:04,950
context we also need a trustworthy

153
00:07:04,950 --> 00:07:07,350
initial state because he can't see we

154
00:07:07,350 --> 00:07:09,060
can't secure a system after it has been

155
00:07:09,060 --> 00:07:09,690
compromised

156
00:07:09,690 --> 00:07:11,610
we need to make sure that the state

157
00:07:11,610 --> 00:07:14,130
assistant boots in is secured and known

158
00:07:14,130 --> 00:07:16,500
to everybody who depends on services of

159
00:07:16,500 --> 00:07:19,110
the system we also need transparent

160
00:07:19,110 --> 00:07:20,910
software because the software running on

161
00:07:20,910 --> 00:07:22,710
the system governs all the possible

162
00:07:22,710 --> 00:07:24,270
state transitions we need to make sure

163
00:07:24,270 --> 00:07:26,760
that we can verify that these state

164
00:07:26,760 --> 00:07:28,950
transitions are not violating any

165
00:07:28,950 --> 00:07:31,260
security properties and we need an

166
00:07:31,260 --> 00:07:33,300
audible boot chain in order to verify

167
00:07:33,300 --> 00:07:35,700
that these statuses transitions actually

168
00:07:35,700 --> 00:07:39,240
happened at boot for the platform

169
00:07:39,240 --> 00:07:41,400
identity we use in trust computing

170
00:07:41,400 --> 00:07:42,870
module which is a separate

171
00:07:42,870 --> 00:07:44,580
microcontroller that sold it on to the

172
00:07:44,580 --> 00:07:46,830
mainboard which contains an endorsement

173
00:07:46,830 --> 00:07:49,260
key certificate that's an infused at

174
00:07:49,260 --> 00:07:51,780
manufacturing time and never changes we

175
00:07:51,780 --> 00:07:53,580
use that endorsement certificate to

176
00:07:53,580 --> 00:07:56,340
identify a platform in order to forge a

177
00:07:56,340 --> 00:07:58,950
link between the physical server and the

178
00:07:58,950 --> 00:08:00,720
endorsement key certificate the trusted

179
00:08:00,720 --> 00:08:03,690
virtual thing we use this provision

180
00:08:03,690 --> 00:08:05,730
original which used some kind of hard to

181
00:08:05,730 --> 00:08:07,200
forge proof like in video of the

182
00:08:07,200 --> 00:08:09,450
provisioning of the server to establish

183
00:08:09,450 --> 00:08:12,420
the association with India ek and the

184
00:08:12,420 --> 00:08:15,960
platform for trustworthy in every state

185
00:08:15,960 --> 00:08:17,970
we also use a feature of TPM called the

186
00:08:17,970 --> 00:08:19,650
measured boot where everything that's

187
00:08:19,650 --> 00:08:21,720
booted is recalling as part of a

188
00:08:21,720 --> 00:08:23,850
cryptographic checksum that can be read

189
00:08:23,850 --> 00:08:26,570
out of TPM but not written directly

190
00:08:26,570 --> 00:08:29,040
additionally we use features like in

191
00:08:29,040 --> 00:08:32,640
2016 or temper proof cases or flash

192
00:08:32,640 --> 00:08:35,039
protections to prevent this initial

193
00:08:35,039 --> 00:08:39,720
state to be changed easily and fall

194
00:08:39,720 --> 00:08:41,130
transparent software we need to make

195
00:08:41,130 --> 00:08:43,530
sure that everybody who is who depends

196
00:08:43,530 --> 00:08:45,210
on services of this particular server

197
00:08:45,210 --> 00:08:49,200
can access the source code augment free

198
00:08:49,200 --> 00:08:51,180
software is sufficient but

199
00:08:51,180 --> 00:08:53,250
necessary condition for that you can

200
00:08:53,250 --> 00:08:55,890
imagine our systems fancy setup where

201
00:08:55,890 --> 00:08:57,600
all the software's proprietary but

202
00:08:57,600 --> 00:08:59,190
everybody who wants all of the system

203
00:08:59,190 --> 00:09:01,440
has access to the source code what is

204
00:09:01,440 --> 00:09:03,480
the necessary condition our reproducible

205
00:09:03,480 --> 00:09:05,279
builds because our measure boot

206
00:09:05,279 --> 00:09:07,680
mechanism only gives us a binaries that

207
00:09:07,680 --> 00:09:09,750
has been executed and we need to

208
00:09:09,750 --> 00:09:11,160
establish a link between this binary

209
00:09:11,160 --> 00:09:12,990
code and the source code we have

210
00:09:12,990 --> 00:09:15,060
actually inspected and we producer Birds

211
00:09:15,060 --> 00:09:19,860
does exactly that so in a system

212
00:09:19,860 --> 00:09:22,080
transparency context we need to make

213
00:09:22,080 --> 00:09:23,820
sure that the owner of the system is the

214
00:09:23,820 --> 00:09:26,220
only one who decides what's executed on

215
00:09:26,220 --> 00:09:28,279
it especially we have trusted computing

216
00:09:28,279 --> 00:09:30,300
the owner of the system is often

217
00:09:30,300 --> 00:09:31,980
conflated with the platform manufacturer

218
00:09:31,980 --> 00:09:34,459
and we want to avoid this in system

219
00:09:34,459 --> 00:09:37,620
system transparency in order to make

220
00:09:37,620 --> 00:09:39,330
sure that only the owner decides what's

221
00:09:39,330 --> 00:09:41,520
wrong on the system we use an M of n

222
00:09:41,520 --> 00:09:43,080
signature scheme for all the binaries

223
00:09:43,080 --> 00:09:45,540
that are due to drive network so the

224
00:09:45,540 --> 00:09:47,190
bootloader forces with transparency

225
00:09:47,190 --> 00:09:49,649
checks that there is a set of signatures

226
00:09:49,649 --> 00:09:51,390
on every binary that's fetched by the

227
00:09:51,390 --> 00:09:54,180
network and will boot only if the subset

228
00:09:54,180 --> 00:09:56,730
of these signatures are valid so for

229
00:09:56,730 --> 00:09:59,310
example you can have a company with five

230
00:09:59,310 --> 00:10:01,050
administrators and you can configure

231
00:10:01,050 --> 00:10:03,600
your servers to only accept binaries

232
00:10:03,600 --> 00:10:04,830
that are signed by at least three of

233
00:10:04,830 --> 00:10:10,140
them so why the operator the system

234
00:10:10,140 --> 00:10:11,580
owner decides what's running on the

235
00:10:11,580 --> 00:10:13,650
system everybody who depends on services

236
00:10:13,650 --> 00:10:15,420
of the system needs to be able to audit

237
00:10:15,420 --> 00:10:19,140
it and to do that we use two different

238
00:10:19,140 --> 00:10:21,480
technologies the first one is in public

239
00:10:21,480 --> 00:10:24,930
and only transparency log of all the

240
00:10:24,930 --> 00:10:27,630
binaries that can possibly boot on a set

241
00:10:27,630 --> 00:10:30,720
of servers for that we piggyback on a

242
00:10:30,720 --> 00:10:33,900
certificate transparency ecosystem by

243
00:10:33,900 --> 00:10:36,540
assurance certificates for every binary

244
00:10:36,540 --> 00:10:39,180
image we want to do it on our server the

245
00:10:39,180 --> 00:10:40,860
certificate is for a hostname that

246
00:10:40,860 --> 00:10:44,040
contains the hash of the binary image so

247
00:10:44,040 --> 00:10:46,740
and client can now monitor on the

248
00:10:46,740 --> 00:10:48,660
certificate transparency locks look for

249
00:10:48,660 --> 00:10:51,870
a certain certificates and get a set of

250
00:10:51,870 --> 00:10:52,560
possible

251
00:10:52,560 --> 00:10:54,510
operating system images they can boot on

252
00:10:54,510 --> 00:10:58,410
the platforms of one specific user of

253
00:10:58,410 --> 00:11:02,800
system transparency while this gives us

254
00:11:02,800 --> 00:11:04,870
of possible operating system images we

255
00:11:04,870 --> 00:11:07,149
also want to ensure that a concrete

256
00:11:07,149 --> 00:11:09,250
server we are currently talking to runs

257
00:11:09,250 --> 00:11:11,769
the concrete operating system image and

258
00:11:11,769 --> 00:11:13,680
to do that we use another technology

259
00:11:13,680 --> 00:11:16,660
into it in the TPM order a remote at the

260
00:11:16,660 --> 00:11:19,060
station where the TPM will send us a

261
00:11:19,060 --> 00:11:21,130
sign version of the Cupra graphic our

262
00:11:21,130 --> 00:11:23,079
hash function f hash some this has been

263
00:11:23,079 --> 00:11:25,720
calculated as part of due process send

264
00:11:25,720 --> 00:11:27,820
us that and then we can use the

265
00:11:27,820 --> 00:11:30,190
repeaters of abodes the accessibility to

266
00:11:30,190 --> 00:11:32,350
a source code to verify that the exactly

267
00:11:32,350 --> 00:11:34,450
the source code be expecting to be

268
00:11:34,450 --> 00:11:35,589
running on the server actually once

269
00:11:35,589 --> 00:11:40,959
there while this is all nice we stop the

270
00:11:40,959 --> 00:11:42,550
problem that after booting into an

271
00:11:42,550 --> 00:11:44,019
operating system we need to make sure

272
00:11:44,019 --> 00:11:46,089
that all security guarantees we got from

273
00:11:46,089 --> 00:11:49,240
the boot chain are destroyed in order to

274
00:11:49,240 --> 00:11:51,040
do that we have to like further exert

275
00:11:51,040 --> 00:11:53,230
limit the amount of things you need to

276
00:11:53,230 --> 00:11:55,149
limit the amount of state transition

277
00:11:55,149 --> 00:11:58,180
Center system it has a range of things

278
00:11:58,180 --> 00:12:00,700
you can do and one end you can say we

279
00:12:00,700 --> 00:12:03,459
forbid any kind of age access into the

280
00:12:03,459 --> 00:12:05,380
system whatsoever which means that

281
00:12:05,380 --> 00:12:08,440
Audion illustrators need to rebuild an

282
00:12:08,440 --> 00:12:10,480
offer existing image every time they

283
00:12:10,480 --> 00:12:11,910
want to change the configuration or

284
00:12:11,910 --> 00:12:15,270
update package sign that binary image

285
00:12:15,270 --> 00:12:17,709
issue a certificate put it into the

286
00:12:17,709 --> 00:12:19,480
certificate response alot and then

287
00:12:19,480 --> 00:12:20,709
reboot the server with the new operating

288
00:12:20,709 --> 00:12:24,130
system on the other hand we can say that

289
00:12:24,130 --> 00:12:27,190
we do allow SSH access into the system

290
00:12:27,190 --> 00:12:30,250
but force administrator to drop into a

291
00:12:30,250 --> 00:12:32,320
restricted shell the only certain tasks

292
00:12:32,320 --> 00:12:34,390
are possible like updating package

293
00:12:34,390 --> 00:12:36,339
changing configuration in reading our

294
00:12:36,339 --> 00:12:39,700
certificate reading out log files what

295
00:12:39,700 --> 00:12:41,380
solution you use kind of depends on use

296
00:12:41,380 --> 00:12:44,350
case and how secure versus how obnoxious

297
00:12:44,350 --> 00:12:48,579
you want your system to be we can't

298
00:12:48,579 --> 00:12:51,040
decide that for you but of course of

299
00:12:51,040 --> 00:12:52,240
course it would be nice to err on the

300
00:12:52,240 --> 00:12:55,380
side of security

301
00:13:00,639 --> 00:13:05,180
so um after that I want to talk now

302
00:13:05,180 --> 00:13:08,360
about what we implemented already so we

303
00:13:08,360 --> 00:13:09,980
have this prototype and permutation of

304
00:13:09,980 --> 00:13:12,550
system transparency that's based on an

305
00:13:12,550 --> 00:13:14,899
super macro board dx11

306
00:13:14,899 --> 00:13:18,050
ssh TF is the first modern x86 server

307
00:13:18,050 --> 00:13:20,209
platform there has been ported to cobalt

308
00:13:20,209 --> 00:13:24,050
and Linux would be as implemented in TST

309
00:13:24,050 --> 00:13:26,839
in cobalt it takes T is one of these

310
00:13:26,839 --> 00:13:28,370
technologies that can be used to secure

311
00:13:28,370 --> 00:13:32,120
this initial state we also implemented

312
00:13:32,120 --> 00:13:34,310
bootloader base alone spooge called st

313
00:13:34,310 --> 00:13:36,110
boot that implements exactly the policy

314
00:13:36,110 --> 00:13:38,329
a previously talked about so as T mood

315
00:13:38,329 --> 00:13:39,709
is able to fetch an operating system

316
00:13:39,709 --> 00:13:40,670
image

317
00:13:40,670 --> 00:13:43,939
why HTTP or HTTPS verify the signatures

318
00:13:43,939 --> 00:13:46,220
and we're currently working on that it

319
00:13:46,220 --> 00:13:48,290
asked for me to do proof of the

320
00:13:48,290 --> 00:13:49,519
certificate and their certificate

321
00:13:49,519 --> 00:13:51,259
response you lock and then boots VT

322
00:13:51,259 --> 00:13:55,009
system and you will witness this now

323
00:13:55,009 --> 00:13:56,889
life

324
00:13:56,889 --> 00:14:01,459
so we have the xlm and I have this

325
00:14:01,459 --> 00:14:05,779
little square port gets connected to the

326
00:14:05,779 --> 00:14:21,019
serial console to wake up here and so

327
00:14:21,019 --> 00:14:24,579
let's this your output let's go

328
00:14:25,950 --> 00:14:28,630
so the first thing that starts is

329
00:14:28,630 --> 00:14:34,660
commode and you can see here the serial

330
00:14:34,660 --> 00:14:37,090
output of commode sadly cobalt version

331
00:14:37,090 --> 00:14:40,390
number is already hidden but we best in

332
00:14:40,390 --> 00:14:43,390
forward 410 and after the wire covered

333
00:14:43,390 --> 00:14:47,440
starts continue booting and suddenly we

334
00:14:47,440 --> 00:14:48,820
are still running the original

335
00:14:48,820 --> 00:14:52,240
proprietor IBMC which takes ages to boot

336
00:14:52,240 --> 00:14:55,750
and we have to wait here for it because

337
00:14:55,750 --> 00:14:57,880
if you just continue on things don't

338
00:14:57,880 --> 00:15:00,730
work right so we have to know wait for

339
00:15:00,730 --> 00:15:02,980
BMC to boot up and we're currently

340
00:15:02,980 --> 00:15:04,960
investigating and replacing that with

341
00:15:04,960 --> 00:15:09,900
microbe BMC or as the UPMC or EMC but

342
00:15:09,900 --> 00:15:12,370
currently we are still depending on the

343
00:15:12,370 --> 00:15:13,839
propriety of adjudication

344
00:15:13,839 --> 00:15:17,350
so you have to get if they're taking a

345
00:15:17,350 --> 00:15:22,450
few seconds okay now again so as team

346
00:15:22,450 --> 00:15:25,120
will displace the next boot so the next

347
00:15:25,120 --> 00:15:27,700
thing that happens is that the touch

348
00:15:27,700 --> 00:15:30,280
nose color from the fresh image and put

349
00:15:30,280 --> 00:15:36,060
that so that's what's happening now and

350
00:15:36,060 --> 00:15:38,800
then we put in the nearest boot itself

351
00:15:38,800 --> 00:15:40,690
and then the first thing that thoughts

352
00:15:40,690 --> 00:15:42,250
interpreters that Leo's boot fetches the

353
00:15:42,250 --> 00:15:44,440
estimate fetches the over to this image

354
00:15:44,440 --> 00:15:49,080
by HTTP over the natural connection here

355
00:15:49,080 --> 00:15:52,780
unpacks dead and very files verify

356
00:15:52,780 --> 00:15:54,339
signature so we have three signatures

357
00:15:54,339 --> 00:15:58,420
here these are here in the operating

358
00:15:58,420 --> 00:16:00,580
system image and they all verified

359
00:16:00,580 --> 00:16:01,839
correctly so we have three of them

360
00:16:01,839 --> 00:16:04,300
signatures that are valid and I'm going

361
00:16:04,300 --> 00:16:07,900
to press ENTER it continues to boot into

362
00:16:07,900 --> 00:16:09,520
this new kernel that has been fetched

363
00:16:09,520 --> 00:16:12,790
wide network so we have to come on duty

364
00:16:12,790 --> 00:16:23,860
now and then we have system B and after

365
00:16:23,860 --> 00:16:26,880
a few seconds here talking to me oh sure

366
00:16:26,880 --> 00:16:29,910
there is

367
00:16:32,960 --> 00:16:38,089
[Applause]

368
00:16:45,459 --> 00:16:54,800
okay turn the thing off with us so in

369
00:16:54,800 --> 00:16:57,769
order to you know enforces transparency

370
00:16:57,769 --> 00:17:00,230
to be a viable project we need more than

371
00:17:00,230 --> 00:17:02,180
trust these prototype boards to be

372
00:17:02,180 --> 00:17:05,329
supported for it putting a platform to

373
00:17:05,329 --> 00:17:07,429
system transparency is super easy it

374
00:17:07,429 --> 00:17:09,709
just needs to support coordinators boot

375
00:17:09,709 --> 00:17:11,599
because our boot solution is based on

376
00:17:11,599 --> 00:17:13,730
that and needs to provide some kind of

377
00:17:13,730 --> 00:17:16,490
trust anchor ppm would be the easiest

378
00:17:16,490 --> 00:17:18,230
because we already support it but

379
00:17:18,230 --> 00:17:20,480
there's no reason why other solutions

380
00:17:20,480 --> 00:17:23,000
shouldn't work too as what would be

381
00:17:23,000 --> 00:17:25,699
helpful if it would support one of the

382
00:17:25,699 --> 00:17:27,109
technologies to further secure the

383
00:17:27,109 --> 00:17:29,330
initial state so for example we couldn't

384
00:17:29,330 --> 00:17:31,309
use into txt if you're on a low platform

385
00:17:31,309 --> 00:17:33,919
or you can choose a platform with

386
00:17:33,919 --> 00:17:37,190
effective flash protections so the data

387
00:17:37,190 --> 00:17:39,260
and the flasher can be read from be

388
00:17:39,260 --> 00:17:44,090
written for the coming year our plans

389
00:17:44,090 --> 00:17:46,100
are to develop this proof of concept

390
00:17:46,100 --> 00:17:49,790
further into a working product and have

391
00:17:49,790 --> 00:17:52,640
the first transparent server working in

392
00:17:52,640 --> 00:17:55,520
production based on the system we also

393
00:17:55,520 --> 00:17:57,740
want to further develop the est boot

394
00:17:57,740 --> 00:18:00,350
solution to be an real open source

395
00:18:00,350 --> 00:18:02,480
project that's well-maintained and other

396
00:18:02,480 --> 00:18:08,080
people can use thank you

397
00:18:08,080 --> 00:18:10,340
which brings us to our long-term

398
00:18:10,340 --> 00:18:13,390
aspirations for system transparency

399
00:18:13,390 --> 00:18:16,190
first of all we need a solid body of

400
00:18:16,190 --> 00:18:17,870
academic research to gain more

401
00:18:17,870 --> 00:18:19,970
confidence in its benefits and

402
00:18:19,970 --> 00:18:23,870
limitations assuming we are not wrong

403
00:18:23,870 --> 00:18:27,710
about its security guarantees eventually

404
00:18:27,710 --> 00:18:29,720
we'd like to encourage its use on a

405
00:18:29,720 --> 00:18:33,230
wider scale and in the end fewer systems

406
00:18:33,230 --> 00:18:35,210
might detect intrusions who will be

407
00:18:35,210 --> 00:18:37,580
discovered earlier costs of recovery go

408
00:18:37,580 --> 00:18:39,679
down and suicide mints will have a

409
00:18:39,679 --> 00:18:41,780
powerful tool to ensure and maintain the

410
00:18:41,780 --> 00:18:45,190
integrity of their systems

411
00:18:45,700 --> 00:18:48,110
your privacy relies on the cluster

412
00:18:48,110 --> 00:18:49,970
illness of your digital systems and

413
00:18:49,970 --> 00:18:52,850
trust is facilitated by a secure

414
00:18:52,850 --> 00:18:55,309
foundation let's make sure that

415
00:18:55,309 --> 00:18:58,630
foundation serves you and no one else

416
00:18:58,630 --> 00:19:00,890
we are quite optimistic about the future

417
00:19:00,890 --> 00:19:03,230
the potential for improvement is immense

418
00:19:03,230 --> 00:19:05,419
the greatest ideas and insights lie

419
00:19:05,419 --> 00:19:14,900
ahead of us thank you and now we move on

420
00:19:14,900 --> 00:19:20,440
to questions yeah

421
00:19:20,440 --> 00:19:30,970
does anyone have any questions oh yes

422
00:19:32,740 --> 00:19:35,419
hey um

423
00:19:35,419 --> 00:19:39,590
awesome stuff so sorry you're currently

424
00:19:39,590 --> 00:19:41,210
doing this based on Intel txt have you

425
00:19:41,210 --> 00:19:43,010
looked at doing static routes of trust

426
00:19:43,010 --> 00:19:49,220
instead the thing is you have to sum all

427
00:19:49,220 --> 00:19:51,140
secure the contents of the flash right

428
00:19:51,140 --> 00:19:54,049
and using h-60 would be the easiest way

429
00:19:54,049 --> 00:19:56,780
because then would be part of our of our

430
00:19:56,780 --> 00:19:59,150
magic book and we can trust into because

431
00:19:59,150 --> 00:20:00,470
we already have to trust indirectly

432
00:20:00,470 --> 00:20:03,740
using their CPUs another way would be

433
00:20:03,740 --> 00:20:05,929
the flood protection is right so key so

434
00:20:05,929 --> 00:20:08,179
say we're a protect at least part of the

435
00:20:08,179 --> 00:20:09,919
flash the thing is then the update

436
00:20:09,919 --> 00:20:12,429
stories get a bit more complicated and

437
00:20:12,429 --> 00:20:16,370
I'm not really a fan of that but I can

438
00:20:16,370 --> 00:20:17,480
understand that

439
00:20:17,480 --> 00:20:20,270
using these cellular trust makes things

440
00:20:20,270 --> 00:20:22,820
easier right because you depend on

441
00:20:22,820 --> 00:20:25,010
technology yeah if you have let's say

442
00:20:25,010 --> 00:20:28,070
you have a physical write protection of

443
00:20:28,070 --> 00:20:30,590
the spy flash containing coreboot and

444
00:20:30,590 --> 00:20:33,830
Linux boot that you obviously gives you

445
00:20:33,830 --> 00:20:36,860
a higher assurance but as ty says it

446
00:20:36,860 --> 00:20:39,860
makes updates much more challenging or

447
00:20:39,860 --> 00:20:42,710
and costly another idea would be to use

448
00:20:42,710 --> 00:20:47,900
something like the Google Titan ship

449
00:20:47,900 --> 00:20:52,400
which combines sort of the TPM and spy

450
00:20:52,400 --> 00:20:55,700
flash in one which I think it's an it's

451
00:20:55,700 --> 00:20:57,250
a brilliant idea

452
00:20:57,250 --> 00:21:01,929
and and but as of now we're making a

453
00:21:01,929 --> 00:21:03,370
proof of concept and we're trying to

454
00:21:03,370 --> 00:21:06,700
figure out exactly

455
00:21:06,700 --> 00:21:10,090
well what trade-offs to make and and

456
00:21:10,090 --> 00:21:12,400
actually in an earlier version of the

457
00:21:12,400 --> 00:21:15,250
torch we didn't say limited system

458
00:21:15,250 --> 00:21:17,470
access just to give an example of

459
00:21:17,470 --> 00:21:20,590
something else that we thought about so

460
00:21:20,590 --> 00:21:22,960
we call it immutable infrastructure but

461
00:21:22,960 --> 00:21:25,870
but obviously the security trade-off of

462
00:21:25,870 --> 00:21:28,690
immutable infrastructure versus limited

463
00:21:28,690 --> 00:21:31,150
system access is also costly because

464
00:21:31,150 --> 00:21:33,549
lots of organizations don't want to

465
00:21:33,549 --> 00:21:35,200
reboot the machine every time you update

466
00:21:35,200 --> 00:21:40,090
a single micro service so so I expect

467
00:21:40,090 --> 00:21:42,880
that a range of options will be

468
00:21:42,880 --> 00:21:46,030
developed depending on your preferences

469
00:21:46,030 --> 00:21:49,210
and will simply list what options people

470
00:21:49,210 --> 00:21:51,909
have when they deploy this in their own

471
00:21:51,909 --> 00:21:55,740
environments yeah

472
00:22:03,480 --> 00:22:07,900
hello I was curious if what your guys

473
00:22:07,900 --> 00:22:09,670
thoughts were since you're doing a

474
00:22:09,670 --> 00:22:10,720
measured boot approach in this

475
00:22:10,720 --> 00:22:12,520
particular case on how you're actually

476
00:22:12,520 --> 00:22:14,260
ensuring that you're not accessing

477
00:22:14,260 --> 00:22:16,450
things outside of the measurement itself

478
00:22:16,450 --> 00:22:18,670
I know that I've seen some your patches

479
00:22:18,670 --> 00:22:20,320
and things like that but ultimately they

480
00:22:20,320 --> 00:22:23,050
the code is quite complex on the access

481
00:22:23,050 --> 00:22:24,970
patterns and whatnot so it's really hard

482
00:22:24,970 --> 00:22:28,150
to ensure that you believe that it's

483
00:22:28,150 --> 00:22:30,430
working the way you intend I mean that's

484
00:22:30,430 --> 00:22:31,840
just from these are the types of things

485
00:22:31,840 --> 00:22:33,040
I think about and when we're

486
00:22:33,040 --> 00:22:35,950
implementing as well especially I know

487
00:22:35,950 --> 00:22:37,540
about takes he's specifically but when

488
00:22:37,540 --> 00:22:38,590
you're talking boot guard things like

489
00:22:38,590 --> 00:22:40,330
that you only get that first little

490
00:22:40,330 --> 00:22:42,160
snippet and then you're it's up to

491
00:22:42,160 --> 00:22:43,780
everyone else just to implement it

492
00:22:43,780 --> 00:22:45,520
correctly going forward so you can carry

493
00:22:45,520 --> 00:22:49,810
that Jana truster yeah so Co would fix

494
00:22:49,810 --> 00:22:51,340
this part of the problem right because

495
00:22:51,340 --> 00:22:53,080
at least we can take a little source

496
00:22:53,080 --> 00:22:54,880
code and fix things that are wrong it's

497
00:22:54,880 --> 00:22:57,330
possibly proprietary ufi implementations

498
00:22:57,330 --> 00:23:01,600
of course the the order of thing how

499
00:23:01,600 --> 00:23:05,050
things are measured at runtime is hard

500
00:23:05,050 --> 00:23:07,360
to predict from from static point of

501
00:23:07,360 --> 00:23:10,870
view the thing is if you have you know

502
00:23:10,870 --> 00:23:12,550
your service right so when you're when

503
00:23:12,550 --> 00:23:14,230
you're running and a fleet of system

504
00:23:14,230 --> 00:23:16,030
transparency service you can it's

505
00:23:16,030 --> 00:23:17,800
reasonable to expect that you know which

506
00:23:17,800 --> 00:23:19,330
hardware platforms you run it on and

507
00:23:19,330 --> 00:23:21,790
what the access patterns are and at

508
00:23:21,790 --> 00:23:24,250
least for most from our experiences that

509
00:23:24,250 --> 00:23:26,140
when you're just booting a single system

510
00:23:26,140 --> 00:23:29,530
the the code path pretty much stays

511
00:23:29,530 --> 00:23:32,440
static so we can pre-compute

512
00:23:32,440 --> 00:23:37,630
pcr values for our TPMS reliably and as

513
00:23:37,630 --> 00:23:39,400
long as we know the system and update

514
00:23:39,400 --> 00:23:41,830
them but of course if we say okay we

515
00:23:41,830 --> 00:23:44,170
want in and ready-made solution that

516
00:23:44,170 --> 00:23:45,420
works for everybody on every platform

517
00:23:45,420 --> 00:23:48,700
they need to be worked up and and

518
00:23:48,700 --> 00:23:52,530
another perspective would be that this

519
00:23:52,530 --> 00:23:54,940
one of the things we like about this

520
00:23:54,940 --> 00:23:58,000
approach is that it moves us in roughly

521
00:23:58,000 --> 00:23:59,230
the same direction as modern

522
00:23:59,230 --> 00:24:01,450
cryptographic protocols to reliance on

523
00:24:01,450 --> 00:24:04,000
more on cryptographic proofs and and

524
00:24:04,000 --> 00:24:05,890
things like that you are of course

525
00:24:05,890 --> 00:24:09,460
entirely right that ultimately you need

526
00:24:09,460 --> 00:24:10,810
to know what the source code does

527
00:24:10,810 --> 00:24:12,940
because it can diverge into a path that

528
00:24:12,940 --> 00:24:16,950
that is not measured by the TPM and

529
00:24:17,020 --> 00:24:19,960
so but but the nice thing about it is

530
00:24:19,960 --> 00:24:23,080
that well the you have to you have to

531
00:24:23,080 --> 00:24:25,210
establish there's a manual trust step in

532
00:24:25,210 --> 00:24:28,690
the provisioning ritual that I or or you

533
00:24:28,690 --> 00:24:30,970
were ops team or whoever says that yes

534
00:24:30,970 --> 00:24:33,040
this is in fact a physical hardware that

535
00:24:33,040 --> 00:24:34,450
we provisioned it has these

536
00:24:34,450 --> 00:24:36,820
specifications here's the hash of the

537
00:24:36,820 --> 00:24:39,580
artifact we flash to the spy flash and

538
00:24:39,580 --> 00:24:43,150
here is its public key identity but as

539
00:24:43,150 --> 00:24:46,420
long as you can establish manual trust

540
00:24:46,420 --> 00:24:51,940
in that step then then you can infer

541
00:24:51,940 --> 00:24:54,250
from the hash what the source code was

542
00:24:54,250 --> 00:24:58,780
for that piece of software and and and

543
00:24:58,780 --> 00:25:01,150
you move up the stack so you also have

544
00:25:01,150 --> 00:25:07,050
to of course look at the source code but

545
00:25:07,050 --> 00:25:10,800
everything in between is is

546
00:25:10,800 --> 00:25:14,710
automatically verifiable which is a very

547
00:25:14,710 --> 00:25:18,220
nice place to be because then you can

548
00:25:18,220 --> 00:25:20,710
focus your efforts on the provisioning

549
00:25:20,710 --> 00:25:23,530
ritual and the establishing trust in the

550
00:25:23,530 --> 00:25:25,120
in the source code and everything else

551
00:25:25,120 --> 00:25:27,190
is taken care of and then you also of

552
00:25:27,190 --> 00:25:29,080
course assuming you have the right main

553
00:25:29,080 --> 00:25:31,929
board you can reboot the Machine and you

554
00:25:31,929 --> 00:25:33,490
don't have any malware persistence so

555
00:25:33,490 --> 00:25:38,800
yeah those are some of them is yeah more

556
00:25:38,800 --> 00:25:46,780
questions so what are you using for an

557
00:25:46,780 --> 00:25:49,270
attestation client server and how are

558
00:25:49,270 --> 00:25:50,830
you providing the golden measurements

559
00:25:50,830 --> 00:25:52,929
are you using the TCP reference manifest

560
00:25:52,929 --> 00:25:56,050
spec or how are you doing that cobra

561
00:25:56,050 --> 00:25:57,910
contains tools to do that

562
00:25:57,910 --> 00:26:00,420
so commit contains tools to pre-compute

563
00:26:00,420 --> 00:26:04,990
health without having a lock and for the

564
00:26:04,990 --> 00:26:06,820
remote stations are we're planning to

565
00:26:06,820 --> 00:26:08,200
use scope source of limitations so

566
00:26:08,200 --> 00:26:10,630
things like he live for example that I

567
00:26:10,630 --> 00:26:13,480
provided and on the client there are

568
00:26:13,480 --> 00:26:16,179
tools like the intro tem tools to do

569
00:26:16,179 --> 00:26:19,480
that but of course you can other the de

570
00:26:19,480 --> 00:26:21,280
cabra implement difference the TCPA lock

571
00:26:21,280 --> 00:26:23,830
norris so we can read that out and use

572
00:26:23,830 --> 00:26:28,570
that for computing the half dollars so

573
00:26:28,570 --> 00:26:29,420
there's two

574
00:26:29,420 --> 00:26:33,410
is not really easy to use some product

575
00:26:33,410 --> 00:26:34,850
that's in the works but it's something I

576
00:26:34,850 --> 00:26:36,800
would expect from this st Borge project

577
00:26:36,800 --> 00:26:38,540
to have ready-made to others Capri

578
00:26:38,540 --> 00:26:40,520
computes me my actual buyers and provide

579
00:26:40,520 --> 00:26:42,590
some kind of surface solution to do the

580
00:26:42,590 --> 00:26:52,490
remote to the station more questions no

581
00:26:52,490 --> 00:26:56,270
all right well thank you so much for

582
00:26:56,270 --> 00:26:58,809
attending

583
00:26:59,850 --> 00:27:02,930
[Applause]

584
00:27:02,930 --> 00:27:09,170
[Music]

