1
00:00:03,190 --> 00:00:06,259
[Music]

2
00:00:07,400 --> 00:00:13,830
we're continuing Julius hi I want to

3
00:00:13,830 --> 00:00:16,500
talk about verification in coreboot and

4
00:00:16,500 --> 00:00:18,480
it's only letting talk so that's jump

5
00:00:18,480 --> 00:00:21,810
straight in this is how verification in

6
00:00:21,810 --> 00:00:23,220
coreboot works today and it's

7
00:00:23,220 --> 00:00:26,550
essentially all based on having hardware

8
00:00:26,550 --> 00:00:29,460
web protection on your spy flash so we

9
00:00:29,460 --> 00:00:31,230
sort of separate the spy flash into two

10
00:00:31,230 --> 00:00:33,210
regions there's a read-only region which

11
00:00:33,210 --> 00:00:35,130
is permanently right protected and then

12
00:00:35,130 --> 00:00:36,809
there's the rest where you can put

13
00:00:36,809 --> 00:00:40,410
updatable firmware and in this read-only

14
00:00:40,410 --> 00:00:42,989
region we have the core boot boot block

15
00:00:42,989 --> 00:00:45,329
so there's there's where execution

16
00:00:45,329 --> 00:00:47,940
begins we have a CB FS with a bunch of

17
00:00:47,940 --> 00:00:52,320
other stages in it and a root key which

18
00:00:52,320 --> 00:00:54,239
can be used to verify the read white

19
00:00:54,239 --> 00:00:55,949
version and stuff like that

20
00:00:55,949 --> 00:00:59,879
and so if if you run this essentially

21
00:00:59,879 --> 00:01:01,559
execution will start in the we the only

22
00:01:01,559 --> 00:01:03,449
part in the boot block and then jump to

23
00:01:03,449 --> 00:01:04,830
the worst stage which is still in

24
00:01:04,830 --> 00:01:06,720
read-only and then the worst stage is

25
00:01:06,720 --> 00:01:08,490
the code that verifies the we'd white

26
00:01:08,490 --> 00:01:12,600
section by checking the signature which

27
00:01:12,600 --> 00:01:15,030
is in the weed white part and verifying

28
00:01:15,030 --> 00:01:16,740
it with that root key which is in the

29
00:01:16,740 --> 00:01:18,960
video only version and then using the

30
00:01:18,960 --> 00:01:20,900
hash from that signature check to

31
00:01:20,900 --> 00:01:24,270
validate this weed white CB FS which is

32
00:01:24,270 --> 00:01:26,670
a whole CB FS with all the other stages

33
00:01:26,670 --> 00:01:29,340
that you need to boot but our current

34
00:01:29,340 --> 00:01:31,680
system doesn't interpret this as a CB FS

35
00:01:31,680 --> 00:01:33,299
so it was essentially treats it like a

36
00:01:33,299 --> 00:01:35,790
blob and the whole thing is read at once

37
00:01:35,790 --> 00:01:38,280
and hashed and one go and then you

38
00:01:38,280 --> 00:01:39,869
continue booting from there so you only

39
00:01:39,869 --> 00:01:42,299
verify as a one shot verification at

40
00:01:42,299 --> 00:01:44,700
this moment essentially and we

41
00:01:44,700 --> 00:01:46,320
implicitly trust that everything in the

42
00:01:46,320 --> 00:01:49,110
video only version is is trusted so

43
00:01:49,110 --> 00:01:50,579
there's no verification going on for

44
00:01:50,579 --> 00:01:53,310
those parts and this is some surface

45
00:01:53,310 --> 00:01:54,990
pretty well for awhile but there are

46
00:01:54,990 --> 00:01:58,560
some issues with it for example one of

47
00:01:58,560 --> 00:02:00,810
the problems is that we essentially end

48
00:02:00,810 --> 00:02:03,509
up reading all these we double the

49
00:02:03,509 --> 00:02:06,329
read/write bits twice because we read

50
00:02:06,329 --> 00:02:08,008
them once when we verify them at the

51
00:02:08,008 --> 00:02:09,989
start but this is before D um is up so

52
00:02:09,989 --> 00:02:11,910
at that point we can't really save them

53
00:02:11,910 --> 00:02:13,140
we just hash them all and throw them

54
00:02:13,140 --> 00:02:13,770
away again

55
00:02:13,770 --> 00:02:15,810
and then when we actually run those

56
00:02:15,810 --> 00:02:17,490
stages we got to read them again

57
00:02:17,490 --> 00:02:19,170
so we are wasting time reading the same

58
00:02:19,170 --> 00:02:22,890
bits times five twice essentially and we

59
00:02:22,890 --> 00:02:25,560
also have a thing called a time of check

60
00:02:25,560 --> 00:02:27,300
brothers time of useful and ability

61
00:02:27,300 --> 00:02:29,970
which means that if you would open up

62
00:02:29,970 --> 00:02:32,370
the Machine and for example disorder the

63
00:02:32,370 --> 00:02:34,620
spy flash and replace it with an EMR 100

64
00:02:34,620 --> 00:02:36,900
you could feed it back different bytes

65
00:02:36,900 --> 00:02:38,760
depending on which stage of execution

66
00:02:38,760 --> 00:02:40,670
you're and even if it's reading the same

67
00:02:40,670 --> 00:02:44,550
piece on flash so for example while it's

68
00:02:44,550 --> 00:02:46,080
very like while the worst stage is

69
00:02:46,080 --> 00:02:48,000
running and verifying all of this you

70
00:02:48,000 --> 00:02:49,440
could feed it back the correct parts and

71
00:02:49,440 --> 00:02:51,120
verification would succeed but then

72
00:02:51,120 --> 00:02:52,890
afterwards when you're actually loading

73
00:02:52,890 --> 00:02:54,480
the warm stage you could feed it back

74
00:02:54,480 --> 00:02:55,830
different bites and inject malicious

75
00:02:55,830 --> 00:02:58,740
code so this isn't really a problem if

76
00:02:58,740 --> 00:03:00,420
you just rely on spy right protection

77
00:03:00,420 --> 00:03:02,010
because in that case if you open the

78
00:03:02,010 --> 00:03:03,390
case and took up a dirty prague you

79
00:03:03,390 --> 00:03:05,340
can't beat it anyway but if for example

80
00:03:05,340 --> 00:03:07,170
you wanted to extend this to into the

81
00:03:07,170 --> 00:03:09,420
boot guard or a similar SOC vendor

82
00:03:09,420 --> 00:03:11,520
verification mechanism then that could

83
00:03:11,520 --> 00:03:12,840
be a problem that you might want to

84
00:03:12,840 --> 00:03:15,300
defend against and you also have the

85
00:03:15,300 --> 00:03:16,530
other problem with those vendor

86
00:03:16,530 --> 00:03:20,130
verification mechanisms that the the

87
00:03:20,130 --> 00:03:21,690
root of trust over there's essentially

88
00:03:21,690 --> 00:03:23,610
this whole block so you would need boot

89
00:03:23,610 --> 00:03:25,440
card to verify the whole we'd only

90
00:03:25,440 --> 00:03:26,880
section which may be very baker

91
00:03:26,880 --> 00:03:29,060
sometimes we have recovery code in there

92
00:03:29,060 --> 00:03:32,250
and you can't really verify all the

93
00:03:32,250 --> 00:03:33,630
individual parts that you need to boot

94
00:03:33,630 --> 00:03:34,800
because you need that boot block you

95
00:03:34,800 --> 00:03:36,720
need the verse stage you need that key

96
00:03:36,720 --> 00:03:38,460
and you need a bunch of metadata that

97
00:03:38,460 --> 00:03:40,470
spread around the flash and not really

98
00:03:40,470 --> 00:03:42,090
in one compact area that you can just

99
00:03:42,090 --> 00:03:45,030
cover with boot guard so we would like

100
00:03:45,030 --> 00:03:48,030
to get a better system for this and it

101
00:03:48,030 --> 00:03:49,950
would be great if we could somehow put

102
00:03:49,950 --> 00:03:52,290
the verification logic into cbofs so

103
00:03:52,290 --> 00:03:54,180
that every fire is actually verified by

104
00:03:54,180 --> 00:03:56,580
the time i use it and not all in one

105
00:03:56,580 --> 00:03:59,970
shot and the system we would like to

106
00:03:59,970 --> 00:04:02,100
implement for this somehow looks like

107
00:04:02,100 --> 00:04:04,350
this so let's start with a quick

108
00:04:04,350 --> 00:04:06,510
refresher of how CB FS looks it's a

109
00:04:06,510 --> 00:04:07,830
really simple file system it's

110
00:04:07,830 --> 00:04:09,360
essentially just you put all the files

111
00:04:09,360 --> 00:04:11,550
one after the other and every file has a

112
00:04:11,550 --> 00:04:13,590
small header which tells you the name

113
00:04:13,590 --> 00:04:15,420
and how long it is and a couple of that

114
00:04:15,420 --> 00:04:18,899
fields and if you look at the file and

115
00:04:18,899 --> 00:04:20,459
cbos what you do is you always start at

116
00:04:20,459 --> 00:04:22,680
the first file you compare the file name

117
00:04:22,680 --> 00:04:24,210
see if that's what you're looking for if

118
00:04:24,210 --> 00:04:26,040
it's not you look at the length to see

119
00:04:26,040 --> 00:04:27,330
where the file ends and

120
00:04:27,330 --> 00:04:28,710
the next arrow starts and then you look

121
00:04:28,710 --> 00:04:30,509
at that header and you check the name

122
00:04:30,509 --> 00:04:31,680
and if it's not what you're looking for

123
00:04:31,680 --> 00:04:34,560
you go to the next one and so on and we

124
00:04:34,560 --> 00:04:36,509
could put a hash in those headers to

125
00:04:36,509 --> 00:04:39,270
hash individual files we actually we

126
00:04:39,270 --> 00:04:40,560
already have sort of that code in

127
00:04:40,560 --> 00:04:42,560
cordwood right now it's not really used

128
00:04:42,560 --> 00:04:44,819
but the problem with that is that's not

129
00:04:44,819 --> 00:04:48,680
enough to ensure verification because

130
00:04:48,680 --> 00:04:51,419
even so essentially you you gotta make

131
00:04:51,419 --> 00:04:53,009
sure that the header you find is

132
00:04:53,009 --> 00:04:54,270
actually the one you were looking for

133
00:04:54,270 --> 00:04:55,740
and since it does this linked list

134
00:04:55,740 --> 00:04:57,539
lookup through all the files until it

135
00:04:57,539 --> 00:04:59,400
finds the one you're looking for

136
00:04:59,400 --> 00:05:00,960
you got to make sure that all those

137
00:05:00,960 --> 00:05:02,759
headers you go through before that are

138
00:05:02,759 --> 00:05:04,650
also secure you can just secure a single

139
00:05:04,650 --> 00:05:07,949
file by itself and the way we propose to

140
00:05:07,949 --> 00:05:11,099
solve this is to have a master hash for

141
00:05:11,099 --> 00:05:13,680
the whole cbofs which is essentially a

142
00:05:13,680 --> 00:05:15,719
hash of all the headers concatenated

143
00:05:15,719 --> 00:05:17,190
together so the headers aren't actually

144
00:05:17,190 --> 00:05:18,629
concatenated on the flesh the flesh

145
00:05:18,629 --> 00:05:20,789
layout stays the same as it is right now

146
00:05:20,789 --> 00:05:24,029
in the middle but for hashing purposes

147
00:05:24,029 --> 00:05:25,770
you virtually pretend as if all the

148
00:05:25,770 --> 00:05:27,240
headers were just concatenated and then

149
00:05:27,240 --> 00:05:28,590
you calculate a hash over the whole

150
00:05:28,590 --> 00:05:31,830
thing and with that system you can do a

151
00:05:31,830 --> 00:05:34,560
secure file lookup essentially the same

152
00:05:34,560 --> 00:05:36,000
way as before so you start with the

153
00:05:36,000 --> 00:05:38,370
first file you check if that's the file

154
00:05:38,370 --> 00:05:40,139
name you're looking for but at the same

155
00:05:40,139 --> 00:05:41,699
time you also throw that header into

156
00:05:41,699 --> 00:05:43,770
your shower function and then if it's

157
00:05:43,770 --> 00:05:44,759
not the file you're looking for you're

158
00:05:44,759 --> 00:05:45,810
going to the next header

159
00:05:45,810 --> 00:05:47,759
you're comparing that file name but you

160
00:05:47,759 --> 00:05:49,349
also throw that header into the shower

161
00:05:49,349 --> 00:05:52,199
function and you keep walking the cbofs

162
00:05:52,199 --> 00:05:53,849
chain until you find the file you're

163
00:05:53,849 --> 00:05:55,770
looking for but then you can't stop yet

164
00:05:55,770 --> 00:05:57,719
you got to save that header away for

165
00:05:57,719 --> 00:05:59,400
later and then you still got to keep

166
00:05:59,400 --> 00:06:01,020
going until you go through all the files

167
00:06:01,020 --> 00:06:03,240
and keep throwing all those headers into

168
00:06:03,240 --> 00:06:04,589
the shaft function so that in the end

169
00:06:04,589 --> 00:06:07,440
you can compare this the hash that you

170
00:06:07,440 --> 00:06:09,180
got there with this master hash but you

171
00:06:09,180 --> 00:06:11,069
got to put in your hood of trust and at

172
00:06:11,069 --> 00:06:12,300
that point you know that all the headers

173
00:06:12,300 --> 00:06:14,580
you just scanned were valid and then you

174
00:06:14,580 --> 00:06:16,199
can go back to the header that use safe

175
00:06:16,199 --> 00:06:19,740
to side and use the file hash from in

176
00:06:19,740 --> 00:06:21,810
there to very verify the data of the

177
00:06:21,810 --> 00:06:24,029
file you're trying to load and in that

178
00:06:24,029 --> 00:06:26,460
case you would have to verify it while

179
00:06:26,460 --> 00:06:28,139
you're using it so if it's a stage for

180
00:06:28,139 --> 00:06:29,849
example you copy it into memory then you

181
00:06:29,849 --> 00:06:32,039
verify it and then you decompress it and

182
00:06:32,039 --> 00:06:33,690
then you start running it and that way

183
00:06:33,690 --> 00:06:35,069
you can get around this time of check

184
00:06:35,069 --> 00:06:39,509
rails down view things so let's see how

185
00:06:39,509 --> 00:06:41,689
that would look in practice

186
00:06:41,689 --> 00:06:43,889
they're still mostly looks the way it

187
00:06:43,889 --> 00:06:45,990
did before but now we have this master

188
00:06:45,990 --> 00:06:48,360
hash and we would embed it into the boot

189
00:06:48,360 --> 00:06:50,909
block program code and that means that

190
00:06:50,909 --> 00:06:52,319
we can use boot guard or any other

191
00:06:52,319 --> 00:06:54,180
verification mechanism even if it can

192
00:06:54,180 --> 00:06:56,729
only cover a single contiguous area we

193
00:06:56,729 --> 00:06:58,289
just need to cover the boot block with

194
00:06:58,289 --> 00:07:00,419
that and from then on we can chain into

195
00:07:00,419 --> 00:07:03,749
our own verification system and when the

196
00:07:03,749 --> 00:07:05,520
boot block loads the verse stage it

197
00:07:05,520 --> 00:07:07,949
would use that master hash to first

198
00:07:07,949 --> 00:07:10,199
verify all the headers in the read-only

199
00:07:10,199 --> 00:07:12,629
CB FS and then use the header of the

200
00:07:12,629 --> 00:07:14,069
rest stage to verify the first stage

201
00:07:14,069 --> 00:07:17,370
file and for the are W side it sort of

202
00:07:17,370 --> 00:07:19,439
looks the same except that the master

203
00:07:19,439 --> 00:07:21,330
hash is now the hash that is verified

204
00:07:21,330 --> 00:07:24,270
that is signed by V boot so if we are

205
00:07:24,270 --> 00:07:26,219
booting we still go from the boot plug

206
00:07:26,219 --> 00:07:27,779
into the verse stage and then the verse

207
00:07:27,779 --> 00:07:29,490
stage will do all the signature checks

208
00:07:29,490 --> 00:07:32,370
like it did before with the root key and

209
00:07:32,370 --> 00:07:33,930
you can also change the root key into

210
00:07:33,930 --> 00:07:35,879
that we only see BFS to get your

211
00:07:35,879 --> 00:07:39,479
verification chain there and but then

212
00:07:39,479 --> 00:07:41,039
after that signature check we do not

213
00:07:41,039 --> 00:07:43,680
load and hash the whole WCB if I said

214
00:07:43,680 --> 00:07:45,449
once we just keep that hash in memory

215
00:07:45,449 --> 00:07:47,219
and that will be our master hash for

216
00:07:47,219 --> 00:07:49,289
every a WC b FS final look up later on

217
00:07:49,289 --> 00:07:51,809
so then once the worst stage jumps into

218
00:07:51,809 --> 00:07:54,379
the warm stage over here it would again

219
00:07:54,379 --> 00:07:57,209
like check out all the headers and erwc

220
00:07:57,209 --> 00:08:00,269
v FS and hashem and then use the warm

221
00:08:00,269 --> 00:08:01,860
stage file hash from those headers to

222
00:08:01,860 --> 00:08:04,589
validate them on stage and those master

223
00:08:04,589 --> 00:08:05,849
hashes essentially you would have to

224
00:08:05,849 --> 00:08:08,430
keep him in memory between stages so

225
00:08:08,430 --> 00:08:09,839
that every stage has it available to

226
00:08:09,839 --> 00:08:13,909
hash the next one and with this we can

227
00:08:13,909 --> 00:08:16,289
both solve the time of check for the

228
00:08:16,289 --> 00:08:18,749
time of use problems except for some

229
00:08:18,749 --> 00:08:20,729
platform issues I get to in a minute and

230
00:08:20,729 --> 00:08:22,499
we also solve that problem that we're

231
00:08:22,499 --> 00:08:23,729
loading everything twice because now we

232
00:08:23,729 --> 00:08:26,519
are really only loading it when we use

233
00:08:26,519 --> 00:08:31,199
it and hash it at that time so this is

234
00:08:31,199 --> 00:08:33,839
mostly the proposal we have it has a few

235
00:08:33,839 --> 00:08:37,039
detail issues the most important one is

236
00:08:37,039 --> 00:08:40,589
it works great for arm it has a couple

237
00:08:40,589 --> 00:08:43,679
of problems on Intel occurs in x86

238
00:08:43,679 --> 00:08:46,260
rather because those are executing early

239
00:08:46,260 --> 00:08:49,529
stages in place and execute in place is

240
00:08:49,529 --> 00:08:51,060
a problem and you want to protect

241
00:08:51,060 --> 00:08:52,649
against time of check rails time of use

242
00:08:52,649 --> 00:08:53,949
because the

243
00:08:53,949 --> 00:08:56,799
Spyke controller memory maps your code

244
00:08:56,799 --> 00:09:00,040
and when you're essentially executing an

245
00:09:00,040 --> 00:09:01,239
instruction this PI controller I will

246
00:09:01,239 --> 00:09:03,339
fetch it and use it at the same time you

247
00:09:03,339 --> 00:09:04,569
don't really have a spot in between

248
00:09:04,569 --> 00:09:05,980
where you can get in there and hash

249
00:09:05,980 --> 00:09:09,339
something so this is not really a

250
00:09:09,339 --> 00:09:11,079
problem you can solve I think you can

251
00:09:11,079 --> 00:09:15,429
try to argue about the the behavior of

252
00:09:15,429 --> 00:09:17,079
the caches because the spy controller

253
00:09:17,079 --> 00:09:19,179
usually loads it into a cache and then

254
00:09:19,179 --> 00:09:20,589
if you fetch it again it should fetch it

255
00:09:20,589 --> 00:09:21,850
from the cache but that depends on the

256
00:09:21,850 --> 00:09:23,889
cache behavior depends on the exact

257
00:09:23,889 --> 00:09:27,519
cache lines and architecture and the

258
00:09:27,519 --> 00:09:30,069
information to guarantee that you could

259
00:09:30,069 --> 00:09:31,359
make this work isn't really freely

260
00:09:31,359 --> 00:09:34,749
available I think so I think that is

261
00:09:34,749 --> 00:09:36,899
sort of a problem into the has to solve

262
00:09:36,899 --> 00:09:39,009
we sort of talked to some of the

263
00:09:39,009 --> 00:09:41,049
engineers about this and they didn't

264
00:09:41,049 --> 00:09:43,389
have a good solution yet either so this

265
00:09:43,389 --> 00:09:46,959
is an open question on the Adams side of

266
00:09:46,959 --> 00:09:50,230
Sunday Adam CPUs we actually already

267
00:09:50,230 --> 00:09:52,359
don't execute in place anymore instead

268
00:09:52,359 --> 00:09:55,029
we load stages into caches Ram areas and

269
00:09:55,029 --> 00:09:56,529
then execute them explicitly from there

270
00:09:56,529 --> 00:09:58,209
so in that case that solves the problem

271
00:09:58,209 --> 00:10:00,549
and on those CPUs we should be able to

272
00:10:00,549 --> 00:10:03,639
support this on the core line for some

273
00:10:03,639 --> 00:10:05,379
reason they do not support that yet and

274
00:10:05,379 --> 00:10:08,649
I'm not sure why I hope they start

275
00:10:08,649 --> 00:10:09,910
supporting that in the future because

276
00:10:09,910 --> 00:10:13,329
then this will work but for now you may

277
00:10:13,329 --> 00:10:14,889
not be able to get full time of check

278
00:10:14,889 --> 00:10:17,649
runs and some of use protection on those

279
00:10:17,649 --> 00:10:21,389
systems if we look at performance issues

280
00:10:21,389 --> 00:10:24,939
this should mostly come out either as

281
00:10:24,939 --> 00:10:26,889
wash or sort of ahead of what we have

282
00:10:26,889 --> 00:10:28,419
right now because you're saving all that

283
00:10:28,419 --> 00:10:30,009
time from not loading everything twice

284
00:10:30,009 --> 00:10:32,199
but you have a little bit of extra time

285
00:10:32,199 --> 00:10:34,959
from doing those cbofs walks because now

286
00:10:34,959 --> 00:10:36,459
you have to always walk through the

287
00:10:36,459 --> 00:10:38,319
whole cbofs and you can stop at the file

288
00:10:38,319 --> 00:10:40,360
that you're looking for so amortize that

289
00:10:40,360 --> 00:10:42,759
would be a factor of two of extra bytes

290
00:10:42,759 --> 00:10:44,139
you need to read from spy flash every

291
00:10:44,139 --> 00:10:46,569
time you look something up you also need

292
00:10:46,569 --> 00:10:48,189
to hash something but in general the

293
00:10:48,189 --> 00:10:51,069
hashing times should so those by reading

294
00:10:51,069 --> 00:10:52,720
times should dominate hashing times so

295
00:10:52,720 --> 00:10:54,879
that's probably not a big problem and we

296
00:10:54,879 --> 00:10:57,819
could further solve these issues by

297
00:10:57,819 --> 00:11:00,369
caching the cbofs metadata once we read

298
00:11:00,369 --> 00:11:02,769
it so on most platforms we probably have

299
00:11:02,769 --> 00:11:05,019
enough cash as RAM or SOA I'm available

300
00:11:05,019 --> 00:11:07,600
to cache those and then we can further

301
00:11:07,600 --> 00:11:07,900
this

302
00:11:07,900 --> 00:11:11,260
that up so yeah that's pretty much the

303
00:11:11,260 --> 00:11:13,150
idea we have right now and it's

304
00:11:13,150 --> 00:11:14,950
unfortunately only an idea right now

305
00:11:14,950 --> 00:11:16,410
because we don't really have anyone

306
00:11:16,410 --> 00:11:21,940
lined up to implement it yet but yeah so

307
00:11:21,940 --> 00:11:23,680
essentially this this whole idea came up

308
00:11:23,680 --> 00:11:26,770
from Inter trying to implement something

309
00:11:26,770 --> 00:11:28,150
that would support boot guard and

310
00:11:28,150 --> 00:11:30,190
coreboot but it didn't solve all of

311
00:11:30,190 --> 00:11:31,900
these issues so we were trying to first

312
00:11:31,900 --> 00:11:35,770
come up with a joint proposal that would

313
00:11:35,770 --> 00:11:37,660
really solve all the issues and then now

314
00:11:37,660 --> 00:11:39,370
we need to find someone to implement it

315
00:11:39,370 --> 00:11:41,230
essentially but maybe we'll get to that

316
00:11:41,230 --> 00:11:44,320
next year sometime that's all I have

317
00:11:44,320 --> 00:11:57,360
anyone have any questions back one slide

318
00:11:57,360 --> 00:12:01,330
so you could put the I mean at the

319
00:12:01,330 --> 00:12:03,730
moment you're going and reading all of

320
00:12:03,730 --> 00:12:07,960
the bits from the RO CPF all cbofs all

321
00:12:07,960 --> 00:12:09,940
the headers if you put all that in the

322
00:12:09,940 --> 00:12:12,520
boot block then it'll be in one place

323
00:12:12,520 --> 00:12:15,250
and it would already be hashed and you

324
00:12:15,250 --> 00:12:16,900
could just use that so you want to pull

325
00:12:16,900 --> 00:12:19,690
all the CVS metadata into the sort of

326
00:12:19,690 --> 00:12:23,530
sin that was maybe you later slide but

327
00:12:23,530 --> 00:12:25,270
yeah so you could do something like that

328
00:12:25,270 --> 00:12:26,500
and then you wouldn't have to chase down

329
00:12:26,500 --> 00:12:30,340
all that data right so like one of the

330
00:12:30,340 --> 00:12:32,410
main goals here is to stay compatible

331
00:12:32,410 --> 00:12:34,360
with the old CB FS system so if we do

332
00:12:34,360 --> 00:12:37,720
this you can just disable the hashing

333
00:12:37,720 --> 00:12:39,130
and see BFS will look the same as it

334
00:12:39,130 --> 00:12:40,270
does today and you can enable the

335
00:12:40,270 --> 00:12:41,800
hashing and then it has an extra

336
00:12:41,800 --> 00:12:43,210
attribute but otherwise it's the same

337
00:12:43,210 --> 00:12:46,390
see BFS so all others see BFS readers

338
00:12:46,390 --> 00:12:48,490
don't have to be updated you could of

339
00:12:48,490 --> 00:12:50,410
course invent a whole new file system

340
00:12:50,410 --> 00:12:52,900
which doesn't have these issues that CBF

341
00:12:52,900 --> 00:12:55,840
SS but we think with the sort of

342
00:12:55,840 --> 00:12:57,190
penetration that coreboot has like

343
00:12:57,190 --> 00:12:58,660
sticking to the thing we already have

344
00:12:58,660 --> 00:13:00,070
that's already supported everywhere it's

345
00:13:00,070 --> 00:13:03,300
a big win so that's why we're doing this

346
00:13:03,300 --> 00:13:07,120
so why do I need to hush all headers and

347
00:13:07,120 --> 00:13:10,270
then verify to read them all why not do

348
00:13:10,270 --> 00:13:12,910
like a blockchain thing so like each

349
00:13:12,910 --> 00:13:16,440
next header depends on the previous one

350
00:13:16,440 --> 00:13:19,510
so you would want each header to have a

351
00:13:19,510 --> 00:13:21,000
hash of the next

352
00:13:21,000 --> 00:13:24,420
some of the previous like each other

353
00:13:24,420 --> 00:13:28,439
including hush which depends on previous

354
00:13:28,439 --> 00:13:31,350
headers hashes on the previous headers

355
00:13:31,350 --> 00:13:33,839
contends or like there is no field in

356
00:13:33,839 --> 00:13:36,680
the header for harsh or something well I

357
00:13:36,680 --> 00:13:40,470
mean you'd have to clarify the details

358
00:13:40,470 --> 00:13:42,689
but I think that would just be less

359
00:13:42,689 --> 00:13:45,120
efficient in the end because right now

360
00:13:45,120 --> 00:13:46,889
even if we have to go through all the

361
00:13:46,889 --> 00:13:49,439
headers on every walk by every edge you

362
00:13:49,439 --> 00:13:51,269
have to go through half of them right if

363
00:13:51,269 --> 00:13:53,670
you just look up a random file it might

364
00:13:53,670 --> 00:13:54,839
be at the end it might be at the end

365
00:13:54,839 --> 00:13:56,819
beginning so an average you go through

366
00:13:56,819 --> 00:14:00,870
half of them anyway and if you had a

367
00:14:00,870 --> 00:14:02,699
hash for the next header in every header

368
00:14:02,699 --> 00:14:04,860
then first of all you would have to

369
00:14:04,860 --> 00:14:06,149
calculate all those hashes where you

370
00:14:06,149 --> 00:14:07,290
walk so you're spending extra time on

371
00:14:07,290 --> 00:14:09,779
that and second of all hashes are not

372
00:14:09,779 --> 00:14:10,920
that small

373
00:14:10,920 --> 00:14:12,810
so the headers themselves right now are

374
00:14:12,810 --> 00:14:15,449
probably like I think 40 bytes or

375
00:14:15,449 --> 00:14:19,860
something and sha-256 is 32 by it so

376
00:14:19,860 --> 00:14:21,899
we're already almost doubling the size

377
00:14:21,899 --> 00:14:23,370
of the header with this and if we add

378
00:14:23,370 --> 00:14:25,920
yet another hash so and that's for the

379
00:14:25,920 --> 00:14:27,809
hashes for the files only so if we add

380
00:14:27,809 --> 00:14:29,339
yet another hash to every header that's

381
00:14:29,339 --> 00:14:31,230
just for the previous header then we are

382
00:14:31,230 --> 00:14:32,490
blowing them up even more and then

383
00:14:32,490 --> 00:14:34,199
you've got to read all those extra bytes

384
00:14:34,199 --> 00:14:36,180
every time you walk so I think in the

385
00:14:36,180 --> 00:14:40,079
end you would come out yeah you can

386
00:14:40,079 --> 00:14:42,059
combine information when you hush you

387
00:14:42,059 --> 00:14:44,399
can combine file contents and the

388
00:14:44,399 --> 00:14:46,019
previous header so you would still have

389
00:14:46,019 --> 00:14:49,680
just one hash and if you do this

390
00:14:49,680 --> 00:14:52,559
blockchain thing even if files in the

391
00:14:52,559 --> 00:14:54,509
end of the of this chain I destroyed at

392
00:14:54,509 --> 00:14:57,509
least the files before then you can know

393
00:14:57,509 --> 00:14:59,699
that they're good if you harsh all

394
00:14:59,699 --> 00:15:01,379
headers together and something is

395
00:15:01,379 --> 00:15:03,809
corrupted somewhere you everything is

396
00:15:03,809 --> 00:15:09,689
lost yes I do I mean we don't currently

397
00:15:09,689 --> 00:15:12,120
see any use cases where that corruption

398
00:15:12,120 --> 00:15:13,910
would be a problem but that's true I

399
00:15:13,910 --> 00:15:16,680
guess we could think about other ways to

400
00:15:16,680 --> 00:15:18,660
do that more efficiently so it's

401
00:15:18,660 --> 00:15:24,120
interesting for systems with boot guard

402
00:15:24,120 --> 00:15:25,709
would people still be able to tinker

403
00:15:25,709 --> 00:15:27,720
around with their biases if it's enabled

404
00:15:27,720 --> 00:15:30,240
but that's of course the way everyone

405
00:15:30,240 --> 00:15:31,920
hates boot code and me too the problem

406
00:15:31,920 --> 00:15:34,000
is some people want to

407
00:15:34,000 --> 00:15:35,980
Kovu this way and they're going to end

408
00:15:35,980 --> 00:15:37,420
up implementing something so we want to

409
00:15:37,420 --> 00:15:38,350
make sure they implement something that

410
00:15:38,350 --> 00:15:41,380
works for everyone in the end it always

411
00:15:41,380 --> 00:15:43,030
depends on what you do with boot-cut how

412
00:15:43,030 --> 00:15:47,280
we can use it normally of course if you

413
00:15:47,280 --> 00:15:51,340
so this is only a hashing chain there is

414
00:15:51,340 --> 00:15:54,310
no signatures involved so if boot guard

415
00:15:54,310 --> 00:15:55,630
protects the boot blogs and everything

416
00:15:55,630 --> 00:15:57,790
and the cbofs cannot be modified anymore

417
00:15:57,790 --> 00:16:00,010
so in that case if you don't open

418
00:16:00,010 --> 00:16:03,250
developer your scoot but yeah that's

419
00:16:03,250 --> 00:16:04,900
sort of an issue that the platform

420
00:16:04,900 --> 00:16:06,310
developer has to solve right for example

421
00:16:06,310 --> 00:16:08,950
they could release the keys to their

422
00:16:08,950 --> 00:16:10,960
boot guard to the owner and then you

423
00:16:10,960 --> 00:16:12,280
could private design something as well

424
00:16:12,280 --> 00:16:14,290
that's sort of out of scope we're just

425
00:16:14,290 --> 00:16:16,030
trying to make something that's secure

426
00:16:16,030 --> 00:16:19,360
and then how you use it depends on who

427
00:16:19,360 --> 00:16:29,500
uses it okay for one yeah this one I see

428
00:16:29,500 --> 00:16:31,510
you have problem with the catch a string

429
00:16:31,510 --> 00:16:34,360
right yeah I've only if you use the tff

430
00:16:34,360 --> 00:16:36,520
sthiti for cash as well in need or use

431
00:16:36,520 --> 00:16:40,330
copper version I don't think it makes a

432
00:16:40,330 --> 00:16:42,250
difference for this but I think I know

433
00:16:42,250 --> 00:16:44,020
the neurochip score would use because I

434
00:16:44,020 --> 00:16:46,720
suffer as npnp previous hair we found if

435
00:16:46,720 --> 00:16:49,870
we use FF CT and you give it a try

436
00:16:49,870 --> 00:16:53,980
Michael Cole before we launch ffs DT to

437
00:16:53,980 --> 00:16:56,620
get temporary memory in it but the 10

438
00:16:56,620 --> 00:16:59,830
years I've previously I was using hope

439
00:16:59,830 --> 00:17:01,810
wood with I don't need to you can just

440
00:17:01,810 --> 00:17:04,900
avoid FF sthiti sure but you still have

441
00:17:04,900 --> 00:17:06,970
caches right yes the fundamental issue

442
00:17:06,970 --> 00:17:10,990
yeah the thing is the intel has the

443
00:17:10,990 --> 00:17:13,660
arabs TT i wanted if we had can help we

444
00:17:13,660 --> 00:17:16,240
we found Intel Fox here then we should

445
00:17:16,240 --> 00:17:18,970
we get Intel Fox I can the open source

446
00:17:18,970 --> 00:17:21,430
ffs DT because this is about tempo

447
00:17:21,430 --> 00:17:24,699
memory in it not like for Cicilline then

448
00:17:24,699 --> 00:17:27,819
we can leverage it both ways because for

449
00:17:27,819 --> 00:17:30,400
Intel FFT is in needed last level cache

450
00:17:30,400 --> 00:17:35,380
to be the problem in memory then for

451
00:17:35,380 --> 00:17:37,510
corporate version is to in need that

452
00:17:37,510 --> 00:17:41,500
cash Australian and just fresh I mean a

453
00:17:41,500 --> 00:17:44,250
network as read-only last level cache

454
00:17:44,250 --> 00:17:47,290
your copper has a lot of cash but it it

455
00:17:47,290 --> 00:17:47,740
doesn't

456
00:17:47,740 --> 00:17:51,700
previously okay yeah I mean yes overlap

457
00:17:51,700 --> 00:17:54,870
those close to infinity overlap to cater

458
00:17:54,870 --> 00:17:58,059
okay so I think this is to be honest I'm

459
00:17:58,059 --> 00:17:59,830
not super familiar with the platform

460
00:17:59,830 --> 00:18:01,240
details because I mostly work on armed

461
00:18:01,240 --> 00:18:03,400
systems but as I understand this is sort

462
00:18:03,400 --> 00:18:05,380
of a hardware issue so it doesn't really

463
00:18:05,380 --> 00:18:10,450
use a finished beauty or I wonder if we

464
00:18:10,450 --> 00:18:13,090
can have some voice on FX or to open

465
00:18:13,090 --> 00:18:17,410
source FS TT yeah because that one is is

466
00:18:17,410 --> 00:18:21,429
overlap so it's not that worthy we spent

467
00:18:21,429 --> 00:18:25,450
much the boy from yeah on that sure but

468
00:18:25,450 --> 00:18:26,440
I don't think it would have put this

469
00:18:26,440 --> 00:18:28,150
problem because it's a hardware mystery

470
00:18:28,150 --> 00:18:31,660
yeah it's how ways you so it seems to me

471
00:18:31,660 --> 00:18:33,429
like you really need the boot guard to

472
00:18:33,429 --> 00:18:35,230
verify your master hash or someone can

473
00:18:35,230 --> 00:18:36,730
just replace the contents and update the

474
00:18:36,730 --> 00:18:39,429
hash right like a second thing is does

475
00:18:39,429 --> 00:18:41,020
this protect against buy-busts attacks

476
00:18:41,020 --> 00:18:44,170
it seems like it does not you're

477
00:18:44,170 --> 00:18:46,120
verifying the hash of files as they're

478
00:18:46,120 --> 00:18:50,559
loaded so first of all so the idea is to

479
00:18:50,559 --> 00:18:52,600
put the master hash in the boot block so

480
00:18:52,600 --> 00:18:54,850
when boot boot guard covers the boot

481
00:18:54,850 --> 00:18:56,320
block the master hash would be in there

482
00:18:56,320 --> 00:18:57,730
and so the master has should also be

483
00:18:57,730 --> 00:18:59,230
covered by we've got if you're fetching

484
00:18:59,230 --> 00:19:01,059
things over the spy bus as you're

485
00:19:01,059 --> 00:19:02,980
executing code then someone could just

486
00:19:02,980 --> 00:19:04,840
use us by bus attack and replace the

487
00:19:04,840 --> 00:19:06,520
data that you're getting right right so

488
00:19:06,520 --> 00:19:08,380
this is sort of I think you're sort of

489
00:19:08,380 --> 00:19:10,809
getting at this execute and case problem

490
00:19:10,809 --> 00:19:12,850
so first of all if you don't execute in

491
00:19:12,850 --> 00:19:14,050
place for example if you have an arm

492
00:19:14,050 --> 00:19:16,000
system which always loads code into som

493
00:19:16,000 --> 00:19:19,120
then this should be safe cuz so the

494
00:19:19,120 --> 00:19:20,590
first part that you're executing the

495
00:19:20,590 --> 00:19:23,190
boot block would be verified by the SOC

496
00:19:23,190 --> 00:19:26,020
master form and then when the boot block

497
00:19:26,020 --> 00:19:28,690
loads the next case stage it will verify

498
00:19:28,690 --> 00:19:31,090
it after loading so even if you have a

499
00:19:31,090 --> 00:19:32,440
spy bus attack and if you inject

500
00:19:32,440 --> 00:19:34,059
malicious data at any point the

501
00:19:34,059 --> 00:19:35,980
verification should catch that if you're

502
00:19:35,980 --> 00:19:37,600
running on an inter system with execute

503
00:19:37,600 --> 00:19:39,400
in place then you're running into

504
00:19:39,400 --> 00:19:41,530
exactly this issue that there's not

505
00:19:41,530 --> 00:19:44,200
really a way to secure execute and play

506
00:19:44,200 --> 00:19:46,620
systems against this unless you try to

507
00:19:46,620 --> 00:19:48,970
reason about oh we like caching with

508
00:19:48,970 --> 00:19:53,380
boot garden loads did here because you

509
00:19:53,380 --> 00:19:55,600
know time is running up so I'll just say

510
00:19:55,600 --> 00:19:57,220
boot guard is not supposed to be

511
00:19:57,220 --> 00:19:59,110
susceptible to spy bus attacks but we

512
00:19:59,110 --> 00:20:01,149
can talk offline but it

513
00:20:01,149 --> 00:20:02,710
is on caching behavior that's not well

514
00:20:02,710 --> 00:20:04,239
documented so that's but we can talk

515
00:20:04,239 --> 00:20:07,330
later all right thank you very much

516
00:20:07,330 --> 00:20:12,810
[Applause]

517
00:20:12,810 --> 00:20:19,050
[Music]

