1
00:00:03,190 --> 00:00:06,259
[Music]

2
00:00:07,280 --> 00:00:12,230
how I want to present the trans boot

3
00:00:12,230 --> 00:00:15,719
which is open dear TM implementation and

4
00:00:15,719 --> 00:00:17,789
not only for int platforms that I but I

5
00:00:17,789 --> 00:00:19,920
will focus on IMD since we're doing this

6
00:00:19,920 --> 00:00:24,779
part of job so my name is Bert cruel I'm

7
00:00:24,779 --> 00:00:26,609
founder and embedded system consultant

8
00:00:26,609 --> 00:00:29,189
at trim that opponent based consulting

9
00:00:29,189 --> 00:00:31,619
company I'm interested in open source

10
00:00:31,619 --> 00:00:33,270
fear my apartment security trusted

11
00:00:33,270 --> 00:00:37,469
computing so just one small not all the

12
00:00:37,469 --> 00:00:39,899
on presidential presentation made by

13
00:00:39,899 --> 00:00:44,280
tram Deb had associated paper so if you

14
00:00:44,280 --> 00:00:45,960
really want to know more about that you

15
00:00:45,960 --> 00:00:49,530
can read exhausting paper which will be

16
00:00:49,530 --> 00:00:50,789
published at after after this

17
00:00:50,789 --> 00:00:53,730
presentation okay what we will talk

18
00:00:53,730 --> 00:00:57,420
about is a little bit of terminology but

19
00:00:57,420 --> 00:00:59,989
I see that most of you are familiar with

20
00:00:59,989 --> 00:01:03,750
trusted computing and here TM stuff but

21
00:01:03,750 --> 00:01:06,299
we will repeat some terminology we will

22
00:01:06,299 --> 00:01:08,159
see what's the difference between static

23
00:01:08,159 --> 00:01:09,960
root of trust and dynamic root of trust

24
00:01:09,960 --> 00:01:13,380
and maybe we bit about this holy war

25
00:01:13,380 --> 00:01:15,830
because definitely there are two comes

26
00:01:15,830 --> 00:01:19,740
despite those those solutions are

27
00:01:19,740 --> 00:01:24,360
orthogonal to be honest then I would

28
00:01:24,360 --> 00:01:26,960
like to show you some diagram from

29
00:01:26,960 --> 00:01:30,600
trusted computing group specification

30
00:01:30,600 --> 00:01:33,210
just to give the ground what we're

31
00:01:33,210 --> 00:01:36,090
talking about and and how this flow work

32
00:01:36,090 --> 00:01:38,869
I will switch to our implementation

33
00:01:38,869 --> 00:01:41,909
couple problems that we had and then I

34
00:01:41,909 --> 00:01:46,430
will present demo on our on our

35
00:01:46,430 --> 00:01:49,530
coreboot platform pc engine good

36
00:01:49,530 --> 00:01:50,909
platform that we maintained for a long

37
00:01:50,909 --> 00:01:56,430
time and then some issues and so what we

38
00:01:56,430 --> 00:02:00,840
plan to do further with that work so

39
00:02:00,840 --> 00:02:04,619
what was the motivation so we want to

40
00:02:04,619 --> 00:02:06,619
implement trend boot trend good is a

41
00:02:06,619 --> 00:02:10,110
open toolbox you can say because this is

42
00:02:10,110 --> 00:02:12,390
not exactly framework there are many

43
00:02:12,390 --> 00:02:13,800
components to that

44
00:02:13,800 --> 00:02:16,650
for AMD platforms there were a couple of

45
00:02:16,650 --> 00:02:20,070
questions about about platform that we

46
00:02:20,070 --> 00:02:22,770
maintain a so definitely it supports the

47
00:02:22,770 --> 00:02:25,290
RTM but there was no software stock that

48
00:02:25,290 --> 00:02:27,510
can leverage that or the software stack

49
00:02:27,510 --> 00:02:30,420
stack stack existing were not usable

50
00:02:30,420 --> 00:02:35,820
exactly in correct correct case so yeah

51
00:02:35,820 --> 00:02:38,730
so it would be great to provide out of

52
00:02:38,730 --> 00:02:41,850
the box support for TR TM in all

53
00:02:41,850 --> 00:02:46,500
components like in boot loader in Linux

54
00:02:46,500 --> 00:02:48,660
kernel and this is what we try to do

55
00:02:48,660 --> 00:02:53,040
here and we succeed and of course we

56
00:02:53,040 --> 00:02:58,410
want to rise our knowledge about trusted

57
00:02:58,410 --> 00:03:01,410
computing and and build better hardware

58
00:03:01,410 --> 00:03:04,470
more secure hardware inferior of course

59
00:03:04,470 --> 00:03:07,770
okay a little bit of terminology so what

60
00:03:07,770 --> 00:03:09,810
is root of trust sort of trust is a

61
00:03:09,810 --> 00:03:12,530
component performing security specific

62
00:03:12,530 --> 00:03:15,930
functions and this component can be

63
00:03:15,930 --> 00:03:20,280
Emme can be if you trust it MVP SP can

64
00:03:20,280 --> 00:03:23,670
be open BMC I so discussion that that

65
00:03:23,670 --> 00:03:26,670
what if the BMC would be a lot of trust

66
00:03:26,670 --> 00:03:31,770
and so this is some component on our

67
00:03:31,770 --> 00:03:35,040
platform typically so a root of

68
00:03:35,040 --> 00:03:36,720
draftsmen for measurement measurement

69
00:03:36,720 --> 00:03:40,170
and makes the ensure integrity man

70
00:03:40,170 --> 00:03:44,040
measurement of the executed code and put

71
00:03:44,040 --> 00:03:46,110
it in something a tamper resistant which

72
00:03:46,110 --> 00:03:50,430
can be which which is trusted platform

73
00:03:50,430 --> 00:03:55,260
module so TPM and so there are other

74
00:03:55,260 --> 00:03:57,870
terms here like cult of trust for

75
00:03:57,870 --> 00:03:59,700
measurement and Static root of trust for

76
00:03:59,700 --> 00:04:02,220
measurement somehow explain that arrays

77
00:04:02,220 --> 00:04:04,070
the date on the during the presentation

78
00:04:04,070 --> 00:04:08,550
bond but in general core or cold right

79
00:04:08,550 --> 00:04:08,970
now

80
00:04:08,970 --> 00:04:10,650
since the trusted computing we would

81
00:04:10,650 --> 00:04:13,050
group change the glossary from core to

82
00:04:13,050 --> 00:04:18,358
code not sure why so code root of trust

83
00:04:18,358 --> 00:04:20,399
for measurement is the instruction or

84
00:04:20,399 --> 00:04:23,550
these are the instructions executed by

85
00:04:23,550 --> 00:04:26,310
the platform when when it acts as the

86
00:04:26,310 --> 00:04:29,130
root of transformers room and and static

87
00:04:29,130 --> 00:04:31,110
elite of trust for measurement provide

88
00:04:31,110 --> 00:04:33,020
chains of measurement so we have these

89
00:04:33,020 --> 00:04:37,350
stages of butene and and each stage is

90
00:04:37,350 --> 00:04:39,450
measured and pull at the measurement is

91
00:04:39,450 --> 00:04:42,630
in TPM and what's the difference between

92
00:04:42,630 --> 00:04:44,400
the dynamic root of trust for a

93
00:04:44,400 --> 00:04:46,800
measurement and so dynamic root of trust

94
00:04:46,800 --> 00:04:48,720
for measurement is some platform

95
00:04:48,720 --> 00:04:52,320
dependent function which can be typical

96
00:04:52,320 --> 00:04:54,660
it is instruction on Intel and on AMD

97
00:04:54,660 --> 00:04:57,330
it's different so on AMD would we have

98
00:04:57,330 --> 00:04:57,889
ske

99
00:04:57,889 --> 00:05:01,440
on Intel we need Intel txt and there is

100
00:05:01,440 --> 00:05:03,690
instruction as entry and there are

101
00:05:03,690 --> 00:05:06,690
couple leaf functions that that help

102
00:05:06,690 --> 00:05:10,620
that that helped run the RTM and what

103
00:05:10,620 --> 00:05:14,790
this instruction does it provides a new

104
00:05:14,790 --> 00:05:16,590
instance of route of transfer

105
00:05:16,590 --> 00:05:19,320
measurement without rebooting so to

106
00:05:19,320 --> 00:05:21,419
establish static route of trust we have

107
00:05:21,419 --> 00:05:24,240
to boot platform since since it begins

108
00:05:24,240 --> 00:05:26,490
from the boot and then we at some point

109
00:05:26,490 --> 00:05:28,229
we have measurements which we can check

110
00:05:28,229 --> 00:05:31,620
and in case of the RPM we don't really

111
00:05:31,620 --> 00:05:33,990
care about those early phases because we

112
00:05:33,990 --> 00:05:36,090
dynamically establish this route of

113
00:05:36,090 --> 00:05:37,820
trust

114
00:05:37,820 --> 00:05:41,340
yeah so so it establishes minimal

115
00:05:41,340 --> 00:05:43,050
trusted computing base which is kind of

116
00:05:43,050 --> 00:05:45,360
code which is self defending this is

117
00:05:45,360 --> 00:05:47,789
self defending code and I will and will

118
00:05:47,789 --> 00:05:49,890
show you how it happened but what's the

119
00:05:49,890 --> 00:05:51,479
difference between static root of trust

120
00:05:51,479 --> 00:05:55,020
for measurement and so first of all I

121
00:05:55,020 --> 00:05:56,310
mentioned that we need to rest it for

122
00:05:56,310 --> 00:05:58,740
static root of trust second there is

123
00:05:58,740 --> 00:06:03,630
problem with PCRs and since when we'd

124
00:06:03,630 --> 00:06:05,490
have update we have to somehow

125
00:06:05,490 --> 00:06:10,940
reevaluate that and maybe reprovision

126
00:06:10,940 --> 00:06:13,889
TPM if we have some secret silly to pc

127
00:06:13,889 --> 00:06:17,550
ours so it's it's kind of problematic

128
00:06:17,550 --> 00:06:19,470
and to be honest I don't know about

129
00:06:19,470 --> 00:06:22,590
anyone who implement that correctly in

130
00:06:22,590 --> 00:06:27,320
an open way and delivered it's widely

131
00:06:27,320 --> 00:06:31,410
other things are that various

132
00:06:31,410 --> 00:06:34,169
specifications are closed and there are

133
00:06:34,169 --> 00:06:37,020
no open tools or a kind of provisioning

134
00:06:37,020 --> 00:06:39,970
platform with static route of trust

135
00:06:39,970 --> 00:06:42,310
so of course in Corbett we have V boot

136
00:06:42,310 --> 00:06:45,400
but if we're talking about the heart of

137
00:06:45,400 --> 00:06:48,550
specific mechanism like an XP high

138
00:06:48,550 --> 00:06:51,400
hardwood or red boot or intersect your

139
00:06:51,400 --> 00:06:55,030
boot or boot boot guard or AMD Hardware

140
00:06:55,030 --> 00:06:57,160
validated boot it is tired to close

141
00:06:57,160 --> 00:07:00,280
close tools which are typically

142
00:07:00,280 --> 00:07:03,220
available under MDA and there are a lot

143
00:07:03,220 --> 00:07:07,090
of problems with them so static root of

144
00:07:07,090 --> 00:07:08,860
trust as well helps establish with with

145
00:07:08,860 --> 00:07:13,660
major independent BIOS vendors and so

146
00:07:13,660 --> 00:07:16,210
typically you you have platforms you

147
00:07:16,210 --> 00:07:17,770
have many platforms mentorship at and

148
00:07:17,770 --> 00:07:19,870
and support a secure boot is supported

149
00:07:19,870 --> 00:07:24,250
and there are open implementations as I

150
00:07:24,250 --> 00:07:26,230
mentioned there is V boot and at the

151
00:07:26,230 --> 00:07:28,450
Chromebook and PC Angie's use use the

152
00:07:28,450 --> 00:07:32,020
open implementation so dynamic root of

153
00:07:32,020 --> 00:07:35,770
trust for measurement in theory worlds

154
00:07:35,770 --> 00:07:38,440
even in compromised environment so we

155
00:07:38,440 --> 00:07:41,650
don't really occur about what happens

156
00:07:41,650 --> 00:07:45,400
before we did this instruction that

157
00:07:45,400 --> 00:07:49,210
establishes the dynamic root of trust so

158
00:07:49,210 --> 00:07:51,100
we don't have to we don't have to reboot

159
00:07:51,100 --> 00:07:56,800
to establish that we don't have like

160
00:07:56,800 --> 00:07:59,169
typically the RTM should be associated

161
00:07:59,169 --> 00:08:03,160
with remote attestation so so to be

162
00:08:03,160 --> 00:08:05,169
honest the some remote server should say

163
00:08:05,169 --> 00:08:08,020
to us if the measurements are correct or

164
00:08:08,020 --> 00:08:13,570
incorrect and it is very small like the

165
00:08:13,570 --> 00:08:16,300
secure loader which is used during the

166
00:08:16,300 --> 00:08:21,820
execution in case of MD it is 64 K so it

167
00:08:21,820 --> 00:08:23,800
is possible to get through some

168
00:08:23,800 --> 00:08:27,400
certification and and with trans boot we

169
00:08:27,400 --> 00:08:29,860
have open implementation for that so why

170
00:08:29,860 --> 00:08:33,309
Cannot not use that so this is picture

171
00:08:33,309 --> 00:08:36,580
from TC GDR TM architecture

172
00:08:36,580 --> 00:08:39,580
specification so what we have what we

173
00:08:39,580 --> 00:08:43,210
see here is platform boot flow on the

174
00:08:43,210 --> 00:08:45,660
left side we have a platform power on

175
00:08:45,660 --> 00:08:50,280
then we're getting through pre gap stage

176
00:08:50,280 --> 00:08:53,510
so in case of Intel txt

177
00:08:53,510 --> 00:08:57,230
this is needed because it use some close

178
00:08:57,230 --> 00:08:59,589
binary from Intel ACM bios to

179
00:08:59,589 --> 00:09:03,910
pre-configure environment for further

180
00:09:03,910 --> 00:09:07,820
dynamic launch event this for AMD this

181
00:09:07,820 --> 00:09:10,790
is not needed then we either have a

182
00:09:10,790 --> 00:09:14,149
certain or we don't have as our p.m. so

183
00:09:14,149 --> 00:09:17,060
we put our firmware and DCE

184
00:09:17,060 --> 00:09:19,540
preamble is kind of preparation

185
00:09:19,540 --> 00:09:22,449
configuration a environment

186
00:09:22,449 --> 00:09:24,800
configuration or preparation of the

187
00:09:24,800 --> 00:09:27,320
environment to run dynamic crunch event

188
00:09:27,320 --> 00:09:31,070
some steps are needed typically so we

189
00:09:31,070 --> 00:09:32,660
have this dynamic lounge even this is

190
00:09:32,660 --> 00:09:35,829
exactly our SK in it or s entry

191
00:09:35,829 --> 00:09:38,990
instruction and then we have some some

192
00:09:38,990 --> 00:09:41,360
code which is run in case of Intel we

193
00:09:41,360 --> 00:09:44,060
have ACM which you can download from

194
00:09:44,060 --> 00:09:47,690
inter website in case of indeed there

195
00:09:47,690 --> 00:09:52,910
was nothing available just out of the

196
00:09:52,910 --> 00:09:54,889
box so and it does not provide any

197
00:09:54,889 --> 00:09:57,199
anything but there were various

198
00:09:57,199 --> 00:10:00,079
commercial in implementation and with

199
00:10:00,079 --> 00:10:01,819
trend booth we have of an implementation

200
00:10:01,819 --> 00:10:06,589
of VCE and then either we have success

201
00:10:06,589 --> 00:10:09,440
and we have a dynamic dynamically

202
00:10:09,440 --> 00:10:13,310
launched measured environment so we run

203
00:10:13,310 --> 00:10:16,730
some kernel or some other software and

204
00:10:16,730 --> 00:10:19,370
we can check PCRs that everything was

205
00:10:19,370 --> 00:10:21,709
dynamically measured and we can check

206
00:10:21,709 --> 00:10:23,600
those measurement or we have some

207
00:10:23,600 --> 00:10:30,079
remediation if this didn't succeed so

208
00:10:30,079 --> 00:10:33,139
this is the dynamic launch event use PCR

209
00:10:33,139 --> 00:10:35,680
70 to 17 to 22

210
00:10:35,680 --> 00:10:39,829
those are initialized with minus 1 and

211
00:10:39,829 --> 00:10:42,560
during the day even the execution of the

212
00:10:42,560 --> 00:10:46,250
instruction it is changed to 0 and

213
00:10:46,250 --> 00:10:49,690
immediately extent with the hash of ARMA

214
00:10:49,690 --> 00:10:54,079
VCE which can be either ACM bios plus

215
00:10:54,079 --> 00:10:56,060
probably something else I'm not sure and

216
00:10:56,060 --> 00:10:58,730
I don't know no ii stand exactly steps

217
00:10:58,730 --> 00:11:01,630
for intel txt but for md we have our

218
00:11:01,630 --> 00:11:05,810
secure loader which which is measured

219
00:11:05,810 --> 00:11:06,540
and

220
00:11:06,540 --> 00:11:09,570
it extends the pcrc panting which I will

221
00:11:09,570 --> 00:11:13,170
show you later so I told you a little

222
00:11:13,170 --> 00:11:17,580
bit about the implementation mmm so most

223
00:11:17,580 --> 00:11:20,730
of that I already told you so the

224
00:11:20,730 --> 00:11:23,400
problem with Intel txt from my point of

225
00:11:23,400 --> 00:11:27,260
view it is that it used closed binary

226
00:11:27,260 --> 00:11:31,140
ICM BIOS so up to now I heard some

227
00:11:31,140 --> 00:11:33,060
rumors that there is there will be

228
00:11:33,060 --> 00:11:35,460
implementation in Corbett I know that

229
00:11:35,460 --> 00:11:37,440
some people in line elements working on

230
00:11:37,440 --> 00:11:40,530
that but but still they will not open

231
00:11:40,530 --> 00:11:42,600
ACM BIOS because it's impossible into

232
00:11:42,600 --> 00:11:45,360
will not allow dot so that's kind of key

233
00:11:45,360 --> 00:11:47,100
problem with that implementation in my

234
00:11:47,100 --> 00:11:52,350
opinion and then we have AMD which is

235
00:11:52,350 --> 00:11:55,470
very well described in software manual

236
00:11:55,470 --> 00:11:57,630
you can implement the completely open

237
00:11:57,630 --> 00:12:02,610
source version of the of the ACM for AMD

238
00:12:02,610 --> 00:12:04,260
so it's called at differently it's

239
00:12:04,260 --> 00:12:06,950
called secure secure loader but anyway

240
00:12:06,950 --> 00:12:09,990
so there are some rumors that Qualcomm

241
00:12:09,990 --> 00:12:13,530
will we'll have something soon it was

242
00:12:13,530 --> 00:12:17,700
mentioned on Zen some it and and you

243
00:12:17,700 --> 00:12:19,170
know both both the implement all the

244
00:12:19,170 --> 00:12:20,570
implementations will be probably

245
00:12:20,570 --> 00:12:25,350
compatible with TCG specification but

246
00:12:25,350 --> 00:12:29,550
the problem is that each of this dynamic

247
00:12:29,550 --> 00:12:31,200
route of transmission and implementation

248
00:12:31,200 --> 00:12:33,690
use different terminology and it's like

249
00:12:33,690 --> 00:12:35,700
when you're reading that it's complete

250
00:12:35,700 --> 00:12:38,670
mess and it's hard to new to new

251
00:12:38,670 --> 00:12:41,840
beginners to understand what's going on

252
00:12:41,840 --> 00:12:44,700
so this is comparison of the terminology

253
00:12:44,700 --> 00:12:49,530
use it by overuse implementation so

254
00:12:49,530 --> 00:12:51,990
trend would typically tries to use TCG

255
00:12:51,990 --> 00:12:54,120
terminology but there are some things

256
00:12:54,120 --> 00:12:57,150
that are not named or we taking

257
00:12:57,150 --> 00:12:59,850
shortcuts shortcuts so the gap you saw

258
00:12:59,850 --> 00:13:02,520
the gap is the this page where SRTM is

259
00:13:02,520 --> 00:13:05,340
running and we really don't care what

260
00:13:05,340 --> 00:13:08,670
exactly going there because this is non

261
00:13:08,670 --> 00:13:11,880
trusted environment and then we have

262
00:13:11,880 --> 00:13:14,340
this dynamic launch event which is ske

263
00:13:14,340 --> 00:13:18,030
instruction in case of in case of trend

264
00:13:18,030 --> 00:13:20,370
remote away in case of MD I'm sorry

265
00:13:20,370 --> 00:13:22,470
in case of trench boot it is call it as

266
00:13:22,470 --> 00:13:27,930
vendor call it so DMA protection from PC

267
00:13:27,930 --> 00:13:31,350
chip specification is in I am the

268
00:13:31,350 --> 00:13:33,930
feature called device exclusion factor

269
00:13:33,930 --> 00:13:38,490
which gives us ability to protect

270
00:13:38,490 --> 00:13:42,240
against DMA attacks in specific way so I

271
00:13:42,240 --> 00:13:43,860
will not read that like you see what

272
00:13:43,860 --> 00:13:45,870
what's the difference between various

273
00:13:45,870 --> 00:13:50,279
implementation probably arm has its own

274
00:13:50,279 --> 00:13:52,249
terminology they also has some

275
00:13:52,249 --> 00:13:58,170
specification related to D RT M yeah so

276
00:13:58,170 --> 00:14:00,269
we as we are part of the transport

277
00:14:00,269 --> 00:14:02,819
community so we are also trying to clean

278
00:14:02,819 --> 00:14:05,699
it up and hopefully after some time we

279
00:14:05,699 --> 00:14:07,439
will have common language to talk about

280
00:14:07,439 --> 00:14:17,569
that okay so in case of problems we had

281
00:14:17,569 --> 00:14:21,300
so typically we want to protect

282
00:14:21,300 --> 00:14:25,079
ourselves against it two issues so those

283
00:14:25,079 --> 00:14:27,829
are mentioned in trusted computing

284
00:14:27,829 --> 00:14:29,040
specification

285
00:14:29,040 --> 00:14:35,699
this is DMA and say SML so we have to be

286
00:14:35,699 --> 00:14:38,519
we have to ensure that code cannot be

287
00:14:38,519 --> 00:14:42,209
changed by anything outside of our a

288
00:14:42,209 --> 00:14:44,850
trusted computing base from our small

289
00:14:44,850 --> 00:14:48,300
piece of code but but various things may

290
00:14:48,300 --> 00:14:52,079
happen so typically in typically we have

291
00:14:52,079 --> 00:14:56,129
something like we start our DC e we

292
00:14:56,129 --> 00:14:59,939
measure we extend PC ours and execute

293
00:14:59,939 --> 00:15:02,189
component and we follow that with with

294
00:15:02,189 --> 00:15:05,029
all the components but it may happen

295
00:15:05,029 --> 00:15:08,749
some corner a situation where we

296
00:15:08,749 --> 00:15:12,209
measured an extent the the component but

297
00:15:12,209 --> 00:15:14,730
when we try to execute some something

298
00:15:14,730 --> 00:15:20,699
like DMA or SMM caused that that that

299
00:15:20,699 --> 00:15:23,129
there was execution of some road

300
00:15:23,129 --> 00:15:25,230
component and to be honest we not

301
00:15:25,230 --> 00:15:27,329
despite we have correct measurement and

302
00:15:27,329 --> 00:15:30,420
correct extension of the PC ours we

303
00:15:30,420 --> 00:15:33,960
running some some Roche component

304
00:15:33,960 --> 00:15:36,030
because of the money manipulation to DMA

305
00:15:36,030 --> 00:15:39,000
or as a man and in that way of course

306
00:15:39,000 --> 00:15:42,240
the RTM will not work and and this

307
00:15:42,240 --> 00:15:44,520
caused problems because of that we have

308
00:15:44,520 --> 00:15:48,480
to protect ourselves about DMA attacks

309
00:15:48,480 --> 00:15:51,180
so who's who understand DMA attacks who

310
00:15:51,180 --> 00:15:51,990
knows how it works

311
00:15:51,990 --> 00:15:56,460
I probably everyone so it's like I

312
00:15:56,460 --> 00:15:59,570
mentioned that last year on presentation

313
00:15:59,570 --> 00:16:02,490
so I will not repeat repeat myself there

314
00:16:02,490 --> 00:16:06,000
are in general two - in - Djem general

315
00:16:06,000 --> 00:16:08,280
groups of a Hani's to protect yourself

316
00:16:08,280 --> 00:16:11,450
against DMA attacks its exclusion and

317
00:16:11,450 --> 00:16:15,660
translation so vtg typically implements

318
00:16:15,660 --> 00:16:19,020
exclusion it used something called a DMA

319
00:16:19,020 --> 00:16:23,010
protected ranges and protected memory

320
00:16:23,010 --> 00:16:25,530
regions of course like you have to

321
00:16:25,530 --> 00:16:27,660
really TD to understand how to configure

322
00:16:27,660 --> 00:16:28,650
dot

323
00:16:28,650 --> 00:16:31,440
AMD uses a device inclusion exclusion

324
00:16:31,440 --> 00:16:35,400
factor which we in our opinion it's a

325
00:16:35,400 --> 00:16:38,030
little bit better since we can we have

326
00:16:38,030 --> 00:16:40,320
continuous array of beads and we can

327
00:16:40,320 --> 00:16:44,340
slice it sighs my motive for in 4

328
00:16:44,340 --> 00:16:47,430
kilobytes and say what kind of what kind

329
00:16:47,430 --> 00:16:49,530
of protection we have so this 4

330
00:16:49,530 --> 00:16:52,170
kilobytes is not the random number I

331
00:16:52,170 --> 00:16:55,140
believe it's because of the PCI config

332
00:16:55,140 --> 00:16:58,890
space so like I believe this is related

333
00:16:58,890 --> 00:17:05,099
with PCI and the translation - is used

334
00:17:05,099 --> 00:17:09,480
and we have iommu or or with the DMA

335
00:17:09,480 --> 00:17:12,750
remapping it's more complicated you have

336
00:17:12,750 --> 00:17:16,130
to configure iommu correctly you have to

337
00:17:16,130 --> 00:17:20,130
take care of specifics of the iommu

338
00:17:20,130 --> 00:17:24,839
hardware and typically the RTM use use

339
00:17:24,839 --> 00:17:27,420
exclusion at least in the implementation

340
00:17:27,420 --> 00:17:32,220
that we saw so far as I am

341
00:17:32,220 --> 00:17:35,730
so this is quote from the RTM

342
00:17:35,730 --> 00:17:39,930
specification so you can see that the DC

343
00:17:39,930 --> 00:17:45,120
DC so dynamic configurate environment

344
00:17:45,120 --> 00:17:47,110
shall consider as a meant to be

345
00:17:47,110 --> 00:17:49,870
correct by construction whatever that

346
00:17:49,870 --> 00:17:50,919
means

347
00:17:50,919 --> 00:17:54,429
the SSM implementation so successfully

348
00:17:54,429 --> 00:17:56,049
maintain its code and data integrity

349
00:17:56,049 --> 00:17:59,919
indefinitely so yeah so the assumption

350
00:17:59,919 --> 00:18:04,120
is that when we're getting some SMM code

351
00:18:04,120 --> 00:18:07,870
it's correctly developed and correctly

352
00:18:07,870 --> 00:18:10,510
shipped but shifted by bios vendor and

353
00:18:10,510 --> 00:18:13,059
to be honest we have a little to protect

354
00:18:13,059 --> 00:18:13,570
ourselves

355
00:18:13,570 --> 00:18:17,110
I believe Eugene SDM can help us with

356
00:18:17,110 --> 00:18:20,260
and with not but the question is how we

357
00:18:20,260 --> 00:18:23,320
can connect that with the dear TM

358
00:18:23,320 --> 00:18:25,840
implementation and what you know how

359
00:18:25,840 --> 00:18:28,120
much many resources we'll need to to

360
00:18:28,120 --> 00:18:32,200
connect those two things so SMM in our

361
00:18:32,200 --> 00:18:33,820
opinion is the one of the most

362
00:18:33,820 --> 00:18:37,659
problematic area areas so ibv should

363
00:18:37,659 --> 00:18:41,649
ensure that all the handlers are

364
00:18:41,649 --> 00:18:43,750
correctly are safe and correctly

365
00:18:43,750 --> 00:18:45,909
implemented but you know like we saw

366
00:18:45,909 --> 00:18:48,399
that we cannot rely on that and there

367
00:18:48,399 --> 00:18:52,990
were problems already with with SMM so

368
00:18:52,990 --> 00:18:55,179
typically after setting everything up

369
00:18:55,179 --> 00:18:57,700
we're looking Casa ma'am there is no way

370
00:18:57,700 --> 00:19:00,850
to validate a SM code after this disk

371
00:19:00,850 --> 00:19:06,309
locking so despite if we have open

372
00:19:06,309 --> 00:19:08,440
source firmware we can investigate and

373
00:19:08,440 --> 00:19:13,389
we can check those SMN and even if we

374
00:19:13,389 --> 00:19:18,070
use SRTM we can even measure that and in

375
00:19:18,070 --> 00:19:20,799
in VR TM we can even verify those

376
00:19:20,799 --> 00:19:23,220
measurement if those are those are fine

377
00:19:23,220 --> 00:19:27,250
but still we have situation that during

378
00:19:27,250 --> 00:19:30,279
zero can change sm ram and we of course

379
00:19:30,279 --> 00:19:32,889
have correct measurement but after that

380
00:19:32,889 --> 00:19:35,340
someone changes what we executing so

381
00:19:35,340 --> 00:19:38,070
this doesn't help

382
00:19:38,070 --> 00:19:40,600
yeah so as I said like the only option

383
00:19:40,600 --> 00:19:45,370
is SMI transfer monitor but the question

384
00:19:45,370 --> 00:19:46,870
question is how to implement that for

385
00:19:46,870 --> 00:19:49,809
AMD I believe right now it's completely

386
00:19:49,809 --> 00:19:54,100
out of scope the AMD programmers on

387
00:19:54,100 --> 00:19:56,320
walls saying something about that how

388
00:19:56,320 --> 00:19:58,360
there are some guys how to implement

389
00:19:58,360 --> 00:20:00,460
that but still this have to

390
00:20:00,460 --> 00:20:03,790
I consider it and we have to think how

391
00:20:03,790 --> 00:20:06,630
to do that so I just mentioned a couple

392
00:20:06,630 --> 00:20:10,240
implementation of the year TM that were

393
00:20:10,240 --> 00:20:13,990
even commercially successful so first of

394
00:20:13,990 --> 00:20:18,160
all like first Oslo was just just the

395
00:20:18,160 --> 00:20:20,590
research stuff Flickr and softcard were

396
00:20:20,590 --> 00:20:24,280
part of the commercial products but they

397
00:20:24,280 --> 00:20:28,210
didn't go into the open so everyone can

398
00:20:28,210 --> 00:20:31,360
use that so because of that tranch boot

399
00:20:31,360 --> 00:20:33,520
was created to provide open

400
00:20:33,520 --> 00:20:37,780
implementation for 40 ft m and also

401
00:20:37,780 --> 00:20:40,930
there was a de implementation that they

402
00:20:40,930 --> 00:20:44,380
tried to integrate with t boot the

403
00:20:44,380 --> 00:20:49,360
booties is is a software that used Intel

404
00:20:49,360 --> 00:20:52,150
txt and of course this wasn't out of the

405
00:20:52,150 --> 00:20:55,330
agonda because this is MD and T boot

406
00:20:55,330 --> 00:21:00,810
didn't consider to merging and AMD code

407
00:21:01,080 --> 00:21:04,810
okay so our implementation so our

408
00:21:04,810 --> 00:21:07,630
implementation if we compare that to the

409
00:21:07,630 --> 00:21:10,450
picture from TCG specification looks

410
00:21:10,450 --> 00:21:14,170
like that so we have platform reset then

411
00:21:14,170 --> 00:21:18,550
we have a cold boot then we have graph

412
00:21:18,550 --> 00:21:21,400
as a as a payload the everything is all

413
00:21:21,400 --> 00:21:25,570
that stuff is in SPI then we have in

414
00:21:25,570 --> 00:21:29,170
graph we have s launch module this is

415
00:21:29,170 --> 00:21:33,040
extension to grab and we invoke SK init

416
00:21:33,040 --> 00:21:36,670
instruction we have this secure loader

417
00:21:36,670 --> 00:21:38,830
which is called landing zone in trench

418
00:21:38,830 --> 00:21:44,140
boot and it can run Linux kernel

419
00:21:44,140 --> 00:21:46,600
majority Linux kernel what I will

420
00:21:46,600 --> 00:21:49,870
present you in a second so far with this

421
00:21:49,870 --> 00:21:53,850
this is piece of code from grub config

422
00:21:53,850 --> 00:21:58,000
so we typically have some part a path to

423
00:21:58,000 --> 00:22:02,320
Linux kernel and then we climbing that

424
00:22:02,320 --> 00:22:04,510
we want to use ske there is alternative

425
00:22:04,510 --> 00:22:07,690
also for for inter version like people

426
00:22:07,690 --> 00:22:11,050
from oracle developing intervention and

427
00:22:11,050 --> 00:22:14,260
end of apparatus consulting

428
00:22:14,260 --> 00:22:17,290
so and then we have as launch this is

429
00:22:17,290 --> 00:22:21,160
our secure loader which we take from the

430
00:22:21,160 --> 00:22:25,090
spy flash this is indicated but this

431
00:22:25,090 --> 00:22:29,620
cbofs disk and then we boot the

432
00:22:29,620 --> 00:22:33,790
difference is that the that the boot

433
00:22:33,790 --> 00:22:36,040
command is not exactly boot common that

434
00:22:36,040 --> 00:22:38,890
we typically run in grab it is modified

435
00:22:38,890 --> 00:22:41,799
because we run those two previous things

436
00:22:41,799 --> 00:22:45,130
like as lounge sk8 as launch module

437
00:22:45,130 --> 00:22:47,470
it changed the memory layout in a way

438
00:22:47,470 --> 00:22:50,380
that when we boot think we we executing

439
00:22:50,380 --> 00:22:53,110
SK in it and running landing zone not

440
00:22:53,110 --> 00:22:55,059
the kernel because in normal case the

441
00:22:55,059 --> 00:22:57,700
boot will cause jump to the kernel and

442
00:22:57,700 --> 00:23:01,059
we just put limits and in that case we

443
00:23:01,059 --> 00:23:03,370
want little bit different role okay

444
00:23:03,370 --> 00:23:10,600
let's let's show little demo so I have

445
00:23:10,600 --> 00:23:14,590
my PC Angie's board there is a TPM

446
00:23:14,590 --> 00:23:17,530
module here be honest the disc is not me

447
00:23:17,530 --> 00:23:20,770
that everything is in spy flash so let's

448
00:23:20,770 --> 00:23:33,850
boot yeah so just to show that and that

449
00:23:33,850 --> 00:23:36,160
the config contain things that I told

450
00:23:36,160 --> 00:23:39,280
you so other are some debugging stuff

451
00:23:39,280 --> 00:23:43,030
here but we have so see BFS means that

452
00:23:43,030 --> 00:23:43,990
this is in spy

453
00:23:43,990 --> 00:23:48,040
so we loading this kernel with those

454
00:23:48,040 --> 00:23:51,490
parameters we have some Intel in it Rd

455
00:23:51,490 --> 00:23:54,610
also here to be able to have some user

456
00:23:54,610 --> 00:23:59,140
space and we're just executing as long

457
00:23:59,140 --> 00:24:02,320
as ke need a slouch model CP effects LZ

458
00:24:02,320 --> 00:24:03,970
header so this is landing zone this is

459
00:24:03,970 --> 00:24:07,929
trench boot to be honest of course this

460
00:24:07,929 --> 00:24:10,360
was already executed so I don't have to

461
00:24:10,360 --> 00:24:12,400
kind of source that file second time

462
00:24:12,400 --> 00:24:15,059
where I just boot

463
00:24:20,130 --> 00:24:23,990
and I can

464
00:24:23,990 --> 00:24:27,130
[Music]

465
00:24:29,700 --> 00:24:32,789
[Music]

466
00:24:36,060 --> 00:24:40,990
and you can see that the PCR 17 and PCR

467
00:24:40,990 --> 00:24:45,400
18 was extended I would like you to

468
00:24:45,400 --> 00:24:49,420
remember that value and the PCR 18 the

469
00:24:49,420 --> 00:24:51,670
PCR and like maybe not whole like at

470
00:24:51,670 --> 00:24:55,930
least couple couple if you can hole like

471
00:24:55,930 --> 00:24:58,410
I have no problem with that so you

472
00:24:58,410 --> 00:25:01,150
should get a beer in if you can remember

473
00:25:01,150 --> 00:25:05,140
a hole so the 13 ad let's say the the

474
00:25:05,140 --> 00:25:09,130
the 17 contain our landing zone

475
00:25:09,130 --> 00:25:13,720
measurement and 18 contain comment line

476
00:25:13,720 --> 00:25:19,090
so so if we change if we change comment

477
00:25:19,090 --> 00:25:23,470
line we should be able to modify the PCR

478
00:25:23,470 --> 00:25:27,190
18 so let's say our attacker change the

479
00:25:27,190 --> 00:25:39,580
command line to to get some advantage so

480
00:25:39,580 --> 00:25:42,990
I have to type that

481
00:25:45,090 --> 00:25:48,220
[Music]

482
00:25:57,470 --> 00:26:01,110
and let's say I will leave the elephant

483
00:26:01,110 --> 00:26:05,790
gate I will not disappear repent K and I

484
00:26:05,790 --> 00:26:14,600
need in 32 B load it again

485
00:26:14,970 --> 00:26:17,790
since the since the memory layout is the

486
00:26:17,790 --> 00:26:20,970
same like nothing changed I rerun the S

487
00:26:20,970 --> 00:26:23,220
launch SK in it and blessed as launch

488
00:26:23,220 --> 00:26:24,990
module since everything should be set up

489
00:26:24,990 --> 00:26:28,790
I am just booting

490
00:26:37,100 --> 00:26:40,240
[Music]

491
00:26:42,820 --> 00:26:46,880
yeah so you can see that the PCR 18

492
00:26:46,880 --> 00:26:51,200
changed since we have 13 ad here so that

493
00:26:51,200 --> 00:26:53,810
means that a change in common line cause

494
00:26:53,810 --> 00:26:56,680
change in measurement what means that

495
00:26:56,680 --> 00:26:59,960
our secure blue that'll really do the

496
00:26:59,960 --> 00:27:02,570
measurement of course it's very hard to

497
00:27:02,570 --> 00:27:04,940
prove that we really run SK in it you

498
00:27:04,940 --> 00:27:07,450
just have to trust me or read the code

499
00:27:07,450 --> 00:27:10,850
so I don't know how how in other way I

500
00:27:10,850 --> 00:27:13,270
can you know provide that information

501
00:27:13,270 --> 00:27:16,010
there is this lock like invoke SK you

502
00:27:16,010 --> 00:27:21,770
need it is it is from from grab module

503
00:27:21,770 --> 00:27:25,220
and then we have some logs from from

504
00:27:25,220 --> 00:27:28,460
inside the landing zone or our secure

505
00:27:28,460 --> 00:27:31,400
loader which user just the booking

506
00:27:31,400 --> 00:27:33,410
information that we extending PCRs and

507
00:27:33,410 --> 00:27:38,860
so on okay so that's it from the demo

508
00:27:38,860 --> 00:27:43,070
okay so what we plan to do with that so

509
00:27:43,070 --> 00:27:45,650
we can so you saw that I just show you

510
00:27:45,650 --> 00:27:50,720
the sha-1 PC ours so we want to also

511
00:27:50,720 --> 00:27:56,240
have a code that dual shot 256 but you

512
00:27:56,240 --> 00:27:58,070
know like for now with we just don't

513
00:27:58,070 --> 00:28:00,260
have that code and using TPM for that

514
00:28:00,260 --> 00:28:01,610
would have be a little bit problematic

515
00:28:01,610 --> 00:28:03,620
and slow since we have to slice

516
00:28:03,620 --> 00:28:05,870
everything in one kilobytes and feed the

517
00:28:05,870 --> 00:28:08,000
TPM with that this would be slow

518
00:28:08,000 --> 00:28:10,280
operation and and for now we're not

519
00:28:10,280 --> 00:28:11,480
doing that

520
00:28:11,480 --> 00:28:14,360
so either shot to fix 56 have to be

521
00:28:14,360 --> 00:28:17,150
implemented somehow in secure loader or

522
00:28:17,150 --> 00:28:20,750
I don't know like or we have to live

523
00:28:20,750 --> 00:28:24,500
with sha-1 which is not not cool the SML

524
00:28:24,500 --> 00:28:27,160
and SMI problem have to be addressed

525
00:28:27,160 --> 00:28:30,230
like this implementation is better than

526
00:28:30,230 --> 00:28:31,850
we than what we have before because

527
00:28:31,850 --> 00:28:33,860
because before there was nothing so

528
00:28:33,860 --> 00:28:35,780
right now we have like some remaining

529
00:28:35,780 --> 00:28:40,100
small problems with with SMI and yeah so

530
00:28:40,100 --> 00:28:43,820
it's right now the only reasonable

531
00:28:43,820 --> 00:28:46,190
mitigation probably would be to use SR

532
00:28:46,190 --> 00:28:50,240
SR TM and just measure everything and

533
00:28:50,240 --> 00:28:53,709
make sure that the filmer didn't changed

534
00:28:53,709 --> 00:28:56,779
so this is the way we can check that SM

535
00:28:56,779 --> 00:28:58,519
eyes were not modified we're not

536
00:28:58,519 --> 00:29:01,450
measuring ECPI tables and we should and

537
00:29:01,450 --> 00:29:04,849
the RTM specifications say clearly that

538
00:29:04,849 --> 00:29:06,799
that we should do that there is even

539
00:29:06,799 --> 00:29:11,269
special dr TM resource table which

540
00:29:11,269 --> 00:29:14,559
should be created there should be

541
00:29:14,559 --> 00:29:16,729
consideration about supporting different

542
00:29:16,729 --> 00:29:20,119
OS and hypervisors I hope to have

543
00:29:20,119 --> 00:29:22,219
presentation on platform security I mean

544
00:29:22,219 --> 00:29:27,440
2019 where where we will show then

545
00:29:27,440 --> 00:29:29,719
running but you know I don't know if

546
00:29:29,719 --> 00:29:31,700
this will succeed I have not too much

547
00:29:31,700 --> 00:29:35,869
time for that there is also idea to have

548
00:29:35,869 --> 00:29:39,499
I peek CNC BIOS working with the RTM I

549
00:29:39,499 --> 00:29:42,169
fix it would be very cool I would say

550
00:29:42,169 --> 00:29:45,919
since in that way for example we can we

551
00:29:45,919 --> 00:29:51,859
can attest if if things boot booted from

552
00:29:51,859 --> 00:29:57,349
server are correct yeah and and there is

553
00:29:57,349 --> 00:30:00,320
of course need for building custom

554
00:30:00,320 --> 00:30:04,279
kernel for and custom notifies and it

555
00:30:04,279 --> 00:30:06,289
will be great if you can use Yocto to

556
00:30:06,289 --> 00:30:10,519
build like a small kernel and rotifers

557
00:30:10,519 --> 00:30:12,859
that can support various tools for

558
00:30:12,859 --> 00:30:14,929
embedded applications and to use of

559
00:30:14,929 --> 00:30:19,249
course dear team so a word what to go go

560
00:30:19,249 --> 00:30:23,419
from here we working on putting every

561
00:30:23,419 --> 00:30:26,029
all patches into the trench pod github

562
00:30:26,029 --> 00:30:32,629
account there is a Google Groups turn to

563
00:30:32,629 --> 00:30:35,570
the devil I'm not sure if this is the

564
00:30:35,570 --> 00:30:38,239
public clicking join and then Daniels

565
00:30:38,239 --> 00:30:41,059
need see some notification about that

566
00:30:41,059 --> 00:30:44,929
and he can approve yeah you can try this

567
00:30:44,929 --> 00:30:48,169
code like if you like the main thing

568
00:30:48,169 --> 00:30:50,509
right now is trying that on different MV

569
00:30:50,509 --> 00:30:54,200
platform that we did we use quite quite

570
00:30:54,200 --> 00:31:01,700
old one so yeah so this is puma SOC so

571
00:31:01,700 --> 00:31:03,709
it would be great to check if there will

572
00:31:03,709 --> 00:31:05,659
be any problems to use that code for

573
00:31:05,659 --> 00:31:06,830
newer and

574
00:31:06,830 --> 00:31:09,830
the platform's antia and we are open for

575
00:31:09,830 --> 00:31:13,039
discussion and if you have any comments

576
00:31:13,039 --> 00:31:25,220
questions feel free to ask everything is

577
00:31:25,220 --> 00:31:27,410
clear

578
00:31:27,410 --> 00:31:30,309
obvious stuff I don't know why we didn't

579
00:31:30,309 --> 00:31:36,559
completed that before sooner there was

580
00:31:36,559 --> 00:31:38,000
one thing that bothers me in the future

581
00:31:38,000 --> 00:31:41,090
improvements you have stated a support

582
00:31:41,090 --> 00:31:44,150
for Tobias yeah could you explain

583
00:31:44,150 --> 00:31:48,039
shortly how would you implement that

584
00:31:48,039 --> 00:31:51,140
yeah so so the see by us would be like

585
00:31:51,140 --> 00:31:56,270
like drop in our case so it's my car how

586
00:31:56,270 --> 00:31:59,450
I will implement that so this is not so

587
00:31:59,450 --> 00:32:03,590
we see buyers can read from CB FS so it

588
00:32:03,590 --> 00:32:07,760
can get secured longer and it can get

589
00:32:07,760 --> 00:32:10,309
other other at Carmel and other things

590
00:32:10,309 --> 00:32:13,309
and then it can invoke some assembly to

591
00:32:13,309 --> 00:32:15,880
to invoke SK you need to jump to this

592
00:32:15,880 --> 00:32:18,830
dynamically launch measure at

593
00:32:18,830 --> 00:32:23,000
environment so so it will be cool if if

594
00:32:23,000 --> 00:32:25,100
see bios up also supports that not only

595
00:32:25,100 --> 00:32:37,159
grab I think that would be okay alright

596
00:32:37,159 --> 00:32:40,510
and thank you very much thank you

597
00:32:40,510 --> 00:32:43,549
[Applause]

598
00:32:44,730 --> 00:32:46,330
[Music]

599
00:32:46,330 --> 00:32:48,389
you

