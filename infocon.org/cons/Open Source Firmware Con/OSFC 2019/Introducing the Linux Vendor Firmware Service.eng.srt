1
00:00:03,190 --> 00:00:06,259
[Music]

2
00:00:07,099 --> 00:00:09,990
so next up is Richard Hughes he's going

3
00:00:09,990 --> 00:00:11,730
to talk about a funnel Mentor

4
00:00:11,730 --> 00:00:14,809
fundamental part of the firmware

5
00:00:14,809 --> 00:00:18,750
ecosystem I believe because whenever you

6
00:00:18,750 --> 00:00:21,480
update your firmware ever firmware

7
00:00:21,480 --> 00:00:23,789
updating is occurring or you need any

8
00:00:23,789 --> 00:00:26,039
metadata about information you you're

9
00:00:26,039 --> 00:00:30,840
probably using the llv FS so and yeah

10
00:00:30,840 --> 00:00:32,940
where's is going to talk about that so

11
00:00:32,940 --> 00:00:39,290
give it up thank you can you hear me

12
00:00:39,290 --> 00:00:42,420
brilliant so my name is Richard Hughes I

13
00:00:42,420 --> 00:00:43,350
work for Red Hat

14
00:00:43,350 --> 00:00:45,030
I'm principal engineer I've been working

15
00:00:45,030 --> 00:00:47,010
for on the next stuff for about I guess

16
00:00:47,010 --> 00:00:49,320
15 years to over them at Red Hat so

17
00:00:49,320 --> 00:00:50,550
we're doing this stuff a long time I

18
00:00:50,550 --> 00:00:52,920
maintain all the stuff you've seen these

19
00:00:52,920 --> 00:00:55,410
slides and also some stuff like other

20
00:00:55,410 --> 00:00:58,770
stuff like um you power them software a

21
00:00:58,770 --> 00:01:00,210
lot of stuff that you might be using are

22
00:01:00,210 --> 00:01:03,239
you just up right now we always hear a

23
00:01:03,239 --> 00:01:05,220
lot of bad news about from a security

24
00:01:05,220 --> 00:01:07,310
and the our BFS is kind of a way of

25
00:01:07,310 --> 00:01:09,840
making it a bit better making it easy

26
00:01:09,840 --> 00:01:11,640
for the ODMs and the OEMs to do the

27
00:01:11,640 --> 00:01:13,049
right thing with adam to reinvent

28
00:01:13,049 --> 00:01:16,200
everything so there's really four parts

29
00:01:16,200 --> 00:01:19,110
to this problem the first tricky part is

30
00:01:19,110 --> 00:01:20,520
you just don't actually know what

31
00:01:20,520 --> 00:01:22,259
hardware they have on their system uses

32
00:01:22,259 --> 00:01:24,119
but know where they have a satyr drive

33
00:01:24,119 --> 00:01:27,810
or an nvme drive and they don't know

34
00:01:27,810 --> 00:01:29,670
what hardware updatable and even if they

35
00:01:29,670 --> 00:01:31,470
did know what happened was updatable

36
00:01:31,470 --> 00:01:32,729
they don't know what firmware versions

37
00:01:32,729 --> 00:01:34,110
they're running some tools it will tell

38
00:01:34,110 --> 00:01:37,409
you in Dannette in in the journal some

39
00:01:37,409 --> 00:01:39,299
tools it will tell you some random

40
00:01:39,299 --> 00:01:42,180
priety at all but they also don't

41
00:01:42,180 --> 00:01:43,979
appreciate how important some updates

42
00:01:43,979 --> 00:01:46,649
are like to update your mouse firmware

43
00:01:46,649 --> 00:01:48,509
if your mouse is working fine seems

44
00:01:48,509 --> 00:01:50,729
ridiculous but then the Logitech mouse

45
00:01:50,729 --> 00:01:52,740
jack vulnerability came out and actually

46
00:01:52,740 --> 00:01:54,899
it became critically important to update

47
00:01:54,899 --> 00:01:57,750
your unifying reciever and even if the

48
00:01:57,750 --> 00:01:59,610
user does know what hardware they have

49
00:01:59,610 --> 00:02:01,740
installed and they aren't know which

50
00:02:01,740 --> 00:02:03,240
hardware they need to update they don't

51
00:02:03,240 --> 00:02:05,030
know where to get the updates from like

52
00:02:05,030 --> 00:02:07,049
personally I don't go to support

53
00:02:07,049 --> 00:02:09,300
dell.com and search for my hardware once

54
00:02:09,300 --> 00:02:11,730
every six months and it doesn't help

55
00:02:11,730 --> 00:02:14,069
that although the whole I might say

56
00:02:14,069 --> 00:02:15,719
on the outside it might not be Dell on

57
00:02:15,719 --> 00:02:18,930
the inside it might be a Intel chip or a

58
00:02:18,930 --> 00:02:22,499
via hub or something and even if you do

59
00:02:22,499 --> 00:02:23,819
manage to get the update actually

60
00:02:23,819 --> 00:02:26,340
applying it's really hard so you can

61
00:02:26,340 --> 00:02:27,689
like me on fashion days you'd have a

62
00:02:27,689 --> 00:02:29,969
like a boot disk with autoexec.bat and

63
00:02:29,969 --> 00:02:31,409
you have a keyboard in the mouse and

64
00:02:31,409 --> 00:02:32,659
it'd be disastrous

65
00:02:32,659 --> 00:02:36,260
or maybe require a Windows 8 system to

66
00:02:36,260 --> 00:02:40,109
to update the system so actually even if

67
00:02:40,109 --> 00:02:42,239
you said the users have no chance of

68
00:02:42,239 --> 00:02:45,840
getting this stuff right so about six

69
00:02:45,840 --> 00:02:47,219
seven years ago I meant this thing

70
00:02:47,219 --> 00:02:48,659
called a color hug color hugs like a

71
00:02:48,659 --> 00:02:51,209
display color emitter which measures to

72
00:02:51,209 --> 00:02:53,819
display the colors portrayed on the

73
00:02:53,819 --> 00:02:54,739
screen

74
00:02:54,739 --> 00:02:56,909
now as part of that we we ship the

75
00:02:56,909 --> 00:02:59,280
hardware I had user updating firmware so

76
00:02:59,280 --> 00:03:01,680
I made a gtp application for flashing

77
00:03:01,680 --> 00:03:03,870
the hardware but it kind of they felt

78
00:03:03,870 --> 00:03:06,629
really wrong all the vendors had to

79
00:03:06,629 --> 00:03:08,790
re-implement all the same UI is all the

80
00:03:08,790 --> 00:03:11,099
same system tools and stuff just to be

81
00:03:11,099 --> 00:03:13,230
able to update something as easy as a

82
00:03:13,230 --> 00:03:16,199
USB a disk it just seemed wrong there

83
00:03:16,199 --> 00:03:19,459
wasn't some common way of doing it and

84
00:03:19,459 --> 00:03:21,900
about the same time my boss said to me

85
00:03:21,900 --> 00:03:24,180
goes here we've had some requests from

86
00:03:24,180 --> 00:03:26,599
various customers that we'd like to get

87
00:03:26,599 --> 00:03:31,169
BIOS updates working now that's really

88
00:03:31,169 --> 00:03:31,829
hard

89
00:03:31,829 --> 00:03:34,400
so UEFI BIOS now isn't this

90
00:03:34,400 --> 00:03:37,500
old-fashioned system which only updates

91
00:03:37,500 --> 00:03:38,669
would be released to add new hardware

92
00:03:38,669 --> 00:03:40,590
this is a system that if you don't

93
00:03:40,590 --> 00:03:43,379
update it has potentially remotely

94
00:03:43,379 --> 00:03:45,569
exploitable security problems and so

95
00:03:45,569 --> 00:03:47,009
rather than the vendors doing an update

96
00:03:47,009 --> 00:03:49,139
say once just to add support for a new

97
00:03:49,139 --> 00:03:51,810
CPU actually it's critically important

98
00:03:51,810 --> 00:03:54,509
for things like compliance reasons if

99
00:03:54,509 --> 00:03:56,639
your PCI compliant rather than just

100
00:03:56,639 --> 00:03:58,680
having the OS updated it now be a

101
00:03:58,680 --> 00:03:59,729
requirement that you have to have the

102
00:03:59,729 --> 00:04:01,889
firmware updated so we had none of this

103
00:04:01,889 --> 00:04:04,109
functionality in place now I kind of

104
00:04:04,109 --> 00:04:05,879
think my boss wanted me to just make the

105
00:04:05,879 --> 00:04:08,729
Windows executables work but that's not

106
00:04:08,729 --> 00:04:12,090
kind of where we win so what's the

107
00:04:12,090 --> 00:04:14,120
easiest way to affect Hardware right now

108
00:04:14,120 --> 00:04:16,529
is it missing protections like missing

109
00:04:16,529 --> 00:04:19,228
boot guard or BIOS guard is it a failed

110
00:04:19,228 --> 00:04:21,539
root of trust implementation is it

111
00:04:21,539 --> 00:04:23,400
implanted updates like from the NSA when

112
00:04:23,400 --> 00:04:26,610
you actually or a supply chain attack is

113
00:04:26,610 --> 00:04:27,800
it using an unsigned update

114
00:04:27,800 --> 00:04:29,240
like Isis did so you could flash

115
00:04:29,240 --> 00:04:31,639
anything using aces up data or is it

116
00:04:31,639 --> 00:04:33,560
malicious devices like her like a DMA

117
00:04:33,560 --> 00:04:36,590
attack but the light blue one is

118
00:04:36,590 --> 00:04:39,740
actually the far easiest 99% of people

119
00:04:39,740 --> 00:04:42,650
will never update their firmware and so

120
00:04:42,650 --> 00:04:44,270
you go to the vendor websites and you

121
00:04:44,270 --> 00:04:46,430
find any of the CVS as affected by a

122
00:04:46,430 --> 00:04:49,490
vendor and 99% of time that's the

123
00:04:49,490 --> 00:04:51,830
easiest way to infect my hardware that's

124
00:04:51,830 --> 00:04:55,490
the bit I want to concentrate on so how

125
00:04:55,490 --> 00:04:57,110
do we fix this this is put them into two

126
00:04:57,110 --> 00:05:01,210
sections FW up D is a 100% free software

127
00:05:01,210 --> 00:05:04,969
daemon it's super important that it's

128
00:05:04,969 --> 00:05:06,770
free software I'll come to explain why

129
00:05:06,770 --> 00:05:09,349
later and it provides the mechanism it

130
00:05:09,349 --> 00:05:11,750
provides the areas of blob of data

131
00:05:11,750 --> 00:05:14,960
here's a file put that file on this SPI

132
00:05:14,960 --> 00:05:17,270
flash or put that file on the receipt on

133
00:05:17,270 --> 00:05:19,759
the unifying reciever and it's used by

134
00:05:19,759 --> 00:05:22,400
millions of users but typically not

135
00:05:22,400 --> 00:05:24,620
directly typically using a GUI rather

136
00:05:24,620 --> 00:05:27,319
than a command-line now having a

137
00:05:27,319 --> 00:05:28,969
mechanism is great which means you can

138
00:05:28,969 --> 00:05:30,759
have this standardized d-bus way of

139
00:05:30,759 --> 00:05:33,380
updating hardware but without actually

140
00:05:33,380 --> 00:05:35,630
the metadata from vendors what updates

141
00:05:35,630 --> 00:05:38,060
are available what updates what what's

142
00:05:38,060 --> 00:05:41,270
the the description for the update it's

143
00:05:41,270 --> 00:05:42,289
actually not that useful

144
00:05:42,289 --> 00:05:44,690
so the our VFS website is a another

145
00:05:44,690 --> 00:05:48,050
project which is again free software and

146
00:05:48,050 --> 00:05:50,060
provides the data source so the idea

147
00:05:50,060 --> 00:05:51,919
being that the vendor like Dell HP

148
00:05:51,919 --> 00:05:56,330
Lenovo would log on upload the like

149
00:05:56,330 --> 00:06:00,050
producer capsule or any other DFU update

150
00:06:00,050 --> 00:06:02,479
file along with high quality metadata

151
00:06:02,479 --> 00:06:05,740
and that is then used by end-users to

152
00:06:05,740 --> 00:06:09,710
flash under hardware this is kind of how

153
00:06:09,710 --> 00:06:12,650
it works as diagram the top level is the

154
00:06:12,650 --> 00:06:14,659
like the internet side so the LV FS

155
00:06:14,659 --> 00:06:18,080
provides a shared metadata on a CDN the

156
00:06:18,080 --> 00:06:20,029
architecture is based so it's a

157
00:06:20,029 --> 00:06:21,529
client-side matching so it's not like

158
00:06:21,529 --> 00:06:24,199
Windows Update where you are you upload

159
00:06:24,199 --> 00:06:25,310
all details about your hardware to

160
00:06:25,310 --> 00:06:26,659
Microsoft and they send you the results

161
00:06:26,659 --> 00:06:28,940
back everyone downloads the same X data

162
00:06:28,940 --> 00:06:30,770
catalog from the RBF s which means

163
00:06:30,770 --> 00:06:32,240
looking use a dumb CDN which makes it

164
00:06:32,240 --> 00:06:33,949
really cheap and also means you have to

165
00:06:33,949 --> 00:06:35,330
deal with the privacy implications of

166
00:06:35,330 --> 00:06:38,270
that this is then downloaded by the

167
00:06:38,270 --> 00:06:39,949
session software which isn't running us

168
00:06:39,949 --> 00:06:41,139
routes not safe too

169
00:06:41,139 --> 00:06:44,080
load stuffers route and so then both the

170
00:06:44,080 --> 00:06:45,789
metadata and firmware is downloaded by

171
00:06:45,789 --> 00:06:48,189
the session client and then squirted

172
00:06:48,189 --> 00:06:50,080
into the the daemon that's running this

173
00:06:50,080 --> 00:06:54,129
route using a file descriptor FWD then

174
00:06:54,129 --> 00:06:56,349
talks to the entire system it's using

175
00:06:56,349 --> 00:06:58,090
system D to schedule offline updates

176
00:06:58,090 --> 00:07:02,020
it's got a pending database for offline

177
00:07:02,020 --> 00:07:04,060
updates and also to record a basis on

178
00:07:04,060 --> 00:07:06,969
already it also has this concept of

179
00:07:06,969 --> 00:07:10,029
plugins there's about 15 plugins I think

180
00:07:10,029 --> 00:07:12,099
now another maybe half dozen in

181
00:07:12,099 --> 00:07:13,889
development which are responsible for

182
00:07:13,889 --> 00:07:16,659
updating specific protocols so you have

183
00:07:16,659 --> 00:07:19,960
a plug-in for nvme a plug-in for DFU a

184
00:07:19,960 --> 00:07:25,860
plugin for a proprietary like Realtek

185
00:07:25,860 --> 00:07:28,870
updating protocol and as long as the

186
00:07:28,870 --> 00:07:31,479
plugins are free software it doesn't

187
00:07:31,479 --> 00:07:33,159
matter that the protocols proprietary as

188
00:07:33,159 --> 00:07:38,379
long as we have the LGPL source code so

189
00:07:38,379 --> 00:07:40,419
this let this architecture allows us to

190
00:07:40,419 --> 00:07:44,050
have this really high level UI on top

191
00:07:44,050 --> 00:07:46,300
now from all the research we did all

192
00:07:46,300 --> 00:07:48,099
those years ago if we make this

193
00:07:48,099 --> 00:07:50,680
complicated no one will ever do it so

194
00:07:50,680 --> 00:07:51,849
there's two things we took away from the

195
00:07:51,849 --> 00:07:54,370
research one that it had to be easy so

196
00:07:54,370 --> 00:07:55,960
it had to be in the software center and

197
00:07:55,960 --> 00:07:58,509
literally one click to update the

198
00:07:58,509 --> 00:08:00,370
hardware the other thing we found from

199
00:08:00,370 --> 00:08:02,680
users is if we ever get it wrong we will

200
00:08:02,680 --> 00:08:05,050
never regain the users trust this stuff

201
00:08:05,050 --> 00:08:07,449
has to be bulletproof if the user bricks

202
00:08:07,449 --> 00:08:08,889
their hardware they're never going to

203
00:08:08,889 --> 00:08:11,110
use the system again if we if we get

204
00:08:11,110 --> 00:08:12,580
them into a state that's recoverable

205
00:08:12,580 --> 00:08:14,319
using a command-line but they have to

206
00:08:14,319 --> 00:08:16,180
then then they can't use their computer

207
00:08:16,180 --> 00:08:17,439
for school or college or whatever

208
00:08:17,439 --> 00:08:18,969
they're never going to use our system

209
00:08:18,969 --> 00:08:20,409
again and they're gonna tell everyone on

210
00:08:20,409 --> 00:08:22,509
reddit Twitter whatever how much for

211
00:08:22,509 --> 00:08:24,399
stupid idea this is so this is the has

212
00:08:24,399 --> 00:08:27,129
to be bulletproof it also has to be

213
00:08:27,129 --> 00:08:29,860
really easy to use when some devices we

214
00:08:29,860 --> 00:08:31,750
don't have the luxury of being able to

215
00:08:31,750 --> 00:08:33,519
reboot them automatically into some

216
00:08:33,519 --> 00:08:35,860
bootloader mode so sometimes you

217
00:08:35,860 --> 00:08:37,120
actually have to do stuff we have to

218
00:08:37,120 --> 00:08:38,948
hold down a menu button while we turn

219
00:08:38,948 --> 00:08:41,500
them on etc and so one of the

220
00:08:41,500 --> 00:08:42,880
requirements for your professor is that

221
00:08:42,880 --> 00:08:45,250
if we do have this manual step it needs

222
00:08:45,250 --> 00:08:47,680
to be in this line art style clearly

223
00:08:47,680 --> 00:08:49,180
explaining what use has to do so it's

224
00:08:49,180 --> 00:08:51,399
not sort of scary the other thing is it

225
00:08:51,399 --> 00:08:52,959
needs to be translatable all the

226
00:08:52,959 --> 00:08:54,850
metadata coming from the IVFs this

227
00:08:54,850 --> 00:08:57,610
if you don't speak English hold down

228
00:08:57,610 --> 00:08:59,259
left right start for three seconds it's

229
00:08:59,259 --> 00:09:01,600
utterly meaningless and so you've

230
00:09:01,600 --> 00:09:04,329
excluded a good two thirds of the

231
00:09:04,329 --> 00:09:05,500
population you want to get firmware

232
00:09:05,500 --> 00:09:09,370
updates so it's all sounds awesome and

233
00:09:09,370 --> 00:09:15,220
it's all looks very good and it does

234
00:09:15,220 --> 00:09:17,050
sound scary the fact that we can send

235
00:09:17,050 --> 00:09:18,730
millions of firm ways to end end-user

236
00:09:18,730 --> 00:09:22,000
systems without any checks and balances

237
00:09:22,000 --> 00:09:23,649
so we can have this layers of security

238
00:09:23,649 --> 00:09:26,139
model we have the firmer itself which is

239
00:09:26,139 --> 00:09:28,209
this little this bit here and this is

240
00:09:28,209 --> 00:09:32,519
then signed with a GP g or pkcs7

241
00:09:32,519 --> 00:09:34,930
signature on the LV FS this is the

242
00:09:34,930 --> 00:09:36,699
detached signature deliberately detach

243
00:09:36,699 --> 00:09:37,720
because we don't want to change the

244
00:09:37,720 --> 00:09:39,579
original capsule file or do a few fun

245
00:09:39,579 --> 00:09:42,220
anyway or change timestamps or affect

246
00:09:42,220 --> 00:09:44,709
existing signatures this is along this

247
00:09:44,709 --> 00:09:47,410
is included a cabinet archive which

248
00:09:47,410 --> 00:09:48,910
seems an odd choice but it means that

249
00:09:48,910 --> 00:09:51,639
the vendor like Dell HP can use the same

250
00:09:51,639 --> 00:09:53,110
deliverable from Windows Update as they

251
00:09:53,110 --> 00:09:55,800
do the r v FS so for a small increment

252
00:09:55,800 --> 00:09:58,149
interoperability pane we can actually

253
00:09:58,149 --> 00:10:02,410
make it lot easier for the vendors it

254
00:10:02,410 --> 00:10:05,889
also we support INF from cat files but

255
00:10:05,889 --> 00:10:07,029
would actually do anything with them on

256
00:10:07,029 --> 00:10:08,680
the RV FS which means you can use you

257
00:10:08,680 --> 00:10:10,660
can either upload the file to winners

258
00:10:10,660 --> 00:10:12,730
update and then they'll be FS to get it

259
00:10:12,730 --> 00:10:15,100
signed in both places or vice-versa and

260
00:10:15,100 --> 00:10:18,279
we have readme file for explaining what

261
00:10:18,279 --> 00:10:21,100
the extra files are this cabin archive

262
00:10:21,100 --> 00:10:23,709
is served over SSL from FWD directly

263
00:10:23,709 --> 00:10:26,380
doesn't go into the CDN there's only a

264
00:10:26,380 --> 00:10:28,389
download every few seconds isn't a big

265
00:10:28,389 --> 00:10:30,970
load but this is referenced in Seidel

266
00:10:30,970 --> 00:10:33,310
app Stream XML documents this is the

267
00:10:33,310 --> 00:10:35,560
file that millions tens of millions

268
00:10:35,560 --> 00:10:38,050
people download to see if the hardware

269
00:10:38,050 --> 00:10:41,439
has updates on the avi FS this is on the

270
00:10:41,439 --> 00:10:46,360
CDN this is then signed with a GP g or

271
00:10:46,360 --> 00:10:50,019
PKS seven signature I think and or some

272
00:10:50,019 --> 00:10:52,930
companies can't use GP g for not very

273
00:10:52,930 --> 00:10:54,819
good reasons some people some companies

274
00:10:54,819 --> 00:10:56,980
can't use PK 7 for other equally bad

275
00:10:56,980 --> 00:11:01,899
reasons so we support both so the only

276
00:11:01,899 --> 00:11:02,100
thing

277
00:11:02,100 --> 00:11:05,130
is really just a website it's a website

278
00:11:05,130 --> 00:11:06,839
that can run cron jobs you can kind of

279
00:11:06,839 --> 00:11:07,949
pick it up as this great big thing

280
00:11:07,949 --> 00:11:10,259
that's really useful but actually it's

281
00:11:10,259 --> 00:11:13,589
it's um really just a flask place and

282
00:11:13,589 --> 00:11:15,779
website so if you're a vendor like an

283
00:11:15,779 --> 00:11:19,230
icon om or ODM or even IB they you can

284
00:11:19,230 --> 00:11:20,940
upload firmware files to the are to the

285
00:11:20,940 --> 00:11:23,670
obvious and find out how many downloads

286
00:11:23,670 --> 00:11:24,959
you have over a certain number of days

287
00:11:24,959 --> 00:11:27,810
and find out telemetry about that but

288
00:11:27,810 --> 00:11:31,050
those downloads and what's really

289
00:11:31,050 --> 00:11:31,829
interesting is we can have this

290
00:11:31,829 --> 00:11:33,120
bi-directional feedback model

291
00:11:33,120 --> 00:11:34,920
traditionally when you have a firmware

292
00:11:34,920 --> 00:11:37,500
update on the FTP site or something you

293
00:11:37,500 --> 00:11:40,910
don't get information back from the user

294
00:11:40,910 --> 00:11:44,130
about the update itself so in this model

295
00:11:44,130 --> 00:11:46,980
we have an optional report for end-users

296
00:11:46,980 --> 00:11:49,470
which say this firmware was applied

297
00:11:49,470 --> 00:11:52,800
successfully top on bottom one it fails

298
00:11:52,800 --> 00:11:56,459
the unifying failed which is super

299
00:11:56,459 --> 00:11:58,199
useful this is only for people using if

300
00:11:58,199 --> 00:11:59,579
they're on the command line on the

301
00:11:59,579 --> 00:12:00,779
assumption that if you're using the

302
00:12:00,779 --> 00:12:02,519
command line tools to update this stuff

303
00:12:02,519 --> 00:12:04,230
you're probably in a position where you

304
00:12:04,230 --> 00:12:06,089
understand the ramifications uploading

305
00:12:06,089 --> 00:12:08,310
things like your your kernel version and

306
00:12:08,310 --> 00:12:09,720
that kind of thing it's not something we

307
00:12:09,720 --> 00:12:12,509
do for people using the GUI tools and

308
00:12:12,509 --> 00:12:14,399
doing this also lets us do some really

309
00:12:14,399 --> 00:12:18,600
cool stuff with which basically lets me

310
00:12:18,600 --> 00:12:20,550
sleep at night so that if they're as bad

311
00:12:20,550 --> 00:12:25,439
update that goes out from no am if many

312
00:12:25,439 --> 00:12:28,019
failed reports come back then we

313
00:12:28,019 --> 00:12:29,459
automatically pull that firmware back

314
00:12:29,459 --> 00:12:31,980
from the stable was a true - an embargo

315
00:12:31,980 --> 00:12:39,870
repository yep so the other thing allows

316
00:12:39,870 --> 00:12:42,829
us to do with these signed with these

317
00:12:42,829 --> 00:12:46,380
these reports is we can sign them so

318
00:12:46,380 --> 00:12:48,000
that seems like most most of the data

319
00:12:48,000 --> 00:12:51,240
from the internet is random people we

320
00:12:51,240 --> 00:12:52,680
don't know and so you can't trust the

321
00:12:52,680 --> 00:12:54,990
data other than maybe from a status of

322
00:12:54,990 --> 00:12:57,300
thousand people it works successfully

323
00:12:57,300 --> 00:12:59,519
for in one person it didn't then maybe

324
00:12:59,519 --> 00:13:02,670
you can use as a metric but if you sign

325
00:13:02,670 --> 00:13:06,630
the report with a key with a public key

326
00:13:06,630 --> 00:13:07,709
that you've attached your user account

327
00:13:07,709 --> 00:13:09,810
on me I'll be at first someone like a QA

328
00:13:09,810 --> 00:13:12,540
engineer and Dell could upload a report

329
00:13:12,540 --> 00:13:15,149
on the command line which would then we

330
00:13:15,149 --> 00:13:15,810
would then use

331
00:13:15,810 --> 00:13:17,760
for trust so for something like checking

332
00:13:17,760 --> 00:13:19,980
the pcr zeros you can see here that

333
00:13:19,980 --> 00:13:21,779
we've had in I think it's a thousand

334
00:13:21,779 --> 00:13:24,870
downloads 34 people have uploaded one

335
00:13:24,870 --> 00:13:27,540
PCR zero but one person has uploaded a

336
00:13:27,540 --> 00:13:30,660
slightly different PCR zero which is at

337
00:13:30,660 --> 00:13:32,160
the station point you feel a bit weird

338
00:13:32,160 --> 00:13:36,089
now if Dell uploaded a signed assigned

339
00:13:36,089 --> 00:13:37,920
report we'd get an actual value which we

340
00:13:37,920 --> 00:13:39,570
could compare against and then warn this

341
00:13:39,570 --> 00:13:42,000
person but so far and not many vendors

342
00:13:42,000 --> 00:13:47,610
have done that work in progress so with

343
00:13:47,610 --> 00:13:49,500
the old EFS is obviously massive privacy

344
00:13:49,500 --> 00:13:50,220
concerns

345
00:13:50,220 --> 00:13:52,980
so vendors have to trust me I'm not

346
00:13:52,980 --> 00:13:57,000
going to change their firmware they have

347
00:13:57,000 --> 00:13:59,550
to be sure if they're uploading

348
00:13:59,550 --> 00:14:01,860
embargoed firmware then I'm not going to

349
00:14:01,860 --> 00:14:04,470
leak embargo socially if it's a CD or

350
00:14:04,470 --> 00:14:09,600
something now to keep they there's lots

351
00:14:09,600 --> 00:14:10,770
of solutions there

352
00:14:10,770 --> 00:14:13,620
one is you can mirror the avi FS the RFS

353
00:14:13,620 --> 00:14:15,779
has a full public firmware has a pulp

354
00:14:15,779 --> 00:14:18,270
URL which lets you basically mirror it

355
00:14:18,270 --> 00:14:20,250
to a hard disk or to an NFS share

356
00:14:20,250 --> 00:14:21,600
somewhere so if you're someone like

357
00:14:21,600 --> 00:14:24,390
Google who want to update ten thousand

358
00:14:24,390 --> 00:14:26,220
computers you won't want 10,000

359
00:14:26,220 --> 00:14:27,630
computers or connected to the Internet

360
00:14:27,630 --> 00:14:29,550
and downloading the firmware themselves

361
00:14:29,550 --> 00:14:33,000
you'd have just NFS share somewhere in

362
00:14:33,000 --> 00:14:34,290
the way you could do is you can also set

363
00:14:34,290 --> 00:14:36,990
up your own LV FS server as an internet

364
00:14:36,990 --> 00:14:38,820
thing so you then re sign the firmware

365
00:14:38,820 --> 00:14:42,750
with your own pk7 or GPG keys and then

366
00:14:42,750 --> 00:14:44,940
manage the flow of updates like that and

367
00:14:44,940 --> 00:14:46,380
then there's also another thing that I

368
00:14:46,380 --> 00:14:47,820
might show you later which is the an

369
00:14:47,820 --> 00:14:49,890
enterprise dashboard which also lets you

370
00:14:49,890 --> 00:14:51,810
kind of throttle some of the updates in

371
00:14:51,810 --> 00:14:56,030
your organization the other thing is

372
00:14:56,030 --> 00:14:59,880
vendors are really really secret I used

373
00:14:59,880 --> 00:15:01,709
to work for a UK defense company and

374
00:15:01,709 --> 00:15:03,450
hardware vendors are an order of

375
00:15:03,450 --> 00:15:05,670
magnitude more paranoid than a defense

376
00:15:05,670 --> 00:15:08,640
company so a lot of the secrets that

377
00:15:08,640 --> 00:15:11,100
they think of secrets really are so a

378
00:15:11,100 --> 00:15:13,500
good example would be a proprietary

379
00:15:13,500 --> 00:15:16,589
update protocol so if you're using

380
00:15:16,589 --> 00:15:20,220
something like nvme or ata FWD supports

381
00:15:20,220 --> 00:15:21,990
you have to write any code you literally

382
00:15:21,990 --> 00:15:23,130
just upload the phone which the Elvia

383
00:15:23,130 --> 00:15:24,870
first and potentially push it to

384
00:15:24,870 --> 00:15:27,510
millions of users but if you're using

385
00:15:27,510 --> 00:15:28,860
something that some

386
00:15:28,860 --> 00:15:32,610
essentially a vendor protocol exists for

387
00:15:32,610 --> 00:15:34,050
no reason

388
00:15:34,050 --> 00:15:36,810
vendors are often saying things like can

389
00:15:36,810 --> 00:15:39,630
I ship your a Linux binary which you

390
00:15:39,630 --> 00:15:41,250
call which will then update the hardware

391
00:15:41,250 --> 00:15:43,560
now says no because this stuff has to be

392
00:15:43,560 --> 00:15:45,210
audited by security teams we have to be

393
00:15:45,210 --> 00:15:47,310
able to ship this stuff in rail and give

394
00:15:47,310 --> 00:15:49,170
it to banks and government and

395
00:15:49,170 --> 00:15:50,580
government government contracts and

396
00:15:50,580 --> 00:15:52,080
stuff this stuff needs to be completely

397
00:15:52,080 --> 00:15:54,690
auditable so the answer I give them is

398
00:15:54,690 --> 00:15:56,430
no so they come back and say look can we

399
00:15:56,430 --> 00:15:58,800
give you a static library which updates

400
00:15:58,800 --> 00:16:02,100
the firm which you call API into you

401
00:16:02,100 --> 00:16:04,020
also still know because it's it's not um

402
00:16:04,020 --> 00:16:07,230
it's not possible to order it and so

403
00:16:07,230 --> 00:16:09,420
we're back and forward and what normally

404
00:16:09,420 --> 00:16:11,130
happens is the vendor says well it's a

405
00:16:11,130 --> 00:16:12,720
proprietary protocol which you can't

406
00:16:12,720 --> 00:16:14,460
tell anything about and I take them all

407
00:16:14,460 --> 00:16:18,150
up let me guess your protocol is there a

408
00:16:18,150 --> 00:16:20,220
magic packet that sends the runtime

409
00:16:20,220 --> 00:16:22,980
hardware into bootloader mode and then

410
00:16:22,980 --> 00:16:26,580
several more packets which as a multiple

411
00:16:26,580 --> 00:16:29,340
of your block size do an arrays a right

412
00:16:29,340 --> 00:16:32,160
and a reads and then another packet

413
00:16:32,160 --> 00:16:33,480
which pushes the hardware back into

414
00:16:33,480 --> 00:16:35,880
runtime mode and they're like how did

415
00:16:35,880 --> 00:16:39,360
you know our secret protocol because all

416
00:16:39,360 --> 00:16:41,850
the protocols are the same and so once

417
00:16:41,850 --> 00:16:43,290
you actually explain to the vendor that

418
00:16:43,290 --> 00:16:45,690
they have no IP and there is no magic

419
00:16:45,690 --> 00:16:47,790
secret here and actually the fact that

420
00:16:47,790 --> 00:16:50,340
you could connect a USB analyzer and

421
00:16:50,340 --> 00:16:53,790
decode that in minutes means that they

422
00:16:53,790 --> 00:16:55,470
have nothing that's worth protecting

423
00:16:55,470 --> 00:16:56,820
so some of them can ease take a bit of

424
00:16:56,820 --> 00:17:00,240
convincing so far all of them have been

425
00:17:00,240 --> 00:17:02,400
convinced with the exception of Broadcom

426
00:17:02,400 --> 00:17:05,910
but that's not over what normally

427
00:17:05,910 --> 00:17:07,650
happens in that case that some senior

428
00:17:07,650 --> 00:17:09,359
manager a legal team etc signs off a

429
00:17:09,359 --> 00:17:11,010
code release and they send me three or

430
00:17:11,010 --> 00:17:13,260
four thousand lines of really shitty C

431
00:17:13,260 --> 00:17:16,470
code which updates their hardware and we

432
00:17:16,470 --> 00:17:18,480
take that code and with their permission

433
00:17:18,480 --> 00:17:19,800
to realize that's it we realize that

434
00:17:19,800 --> 00:17:23,190
citizen LGPL - + plugin committee

435
00:17:23,190 --> 00:17:25,530
upstream and their 3000 lines of C

436
00:17:25,530 --> 00:17:29,250
becomes four hundred lines using all the

437
00:17:29,250 --> 00:17:30,930
shared helper functionality because all

438
00:17:30,930 --> 00:17:32,130
the front-- all the codes doing the same

439
00:17:32,130 --> 00:17:33,990
thing they're all you think they're all

440
00:17:33,990 --> 00:17:36,030
generating checksum so we use a library

441
00:17:36,030 --> 00:17:37,740
function for that they're all splitting

442
00:17:37,740 --> 00:17:40,170
the chunk of the blob of firmware up

443
00:17:40,170 --> 00:17:42,120
into 64 K blocks

444
00:17:42,120 --> 00:17:43,740
we'll use a function for that and so

445
00:17:43,740 --> 00:17:45,030
actually we can strip out all of the

446
00:17:45,030 --> 00:17:46,890
stuff that they sent us but actually the

447
00:17:46,890 --> 00:17:48,360
most useful bit of a code dump is

448
00:17:48,360 --> 00:17:50,190
usually what error codes map to watch

449
00:17:50,190 --> 00:17:53,780
they like our memory wrong version etc

450
00:17:53,780 --> 00:17:56,280
with some exceptions like some vendors

451
00:17:56,280 --> 00:17:58,200
have this like a handshake that they

452
00:17:58,200 --> 00:18:01,680
need to do before before the updates

453
00:18:01,680 --> 00:18:04,680
done but most of the protocols are 99%

454
00:18:04,680 --> 00:18:09,660
the same yeah so I guess some examples

455
00:18:09,660 --> 00:18:13,440
there this is so Logitech said we cannot

456
00:18:13,440 --> 00:18:15,780
release you any code but if you ask us a

457
00:18:15,780 --> 00:18:18,720
question will tell the answer so over

458
00:18:18,720 --> 00:18:21,270
about two or three weeks we are asking a

459
00:18:21,270 --> 00:18:22,800
question and they've had this shared

460
00:18:22,800 --> 00:18:24,960
Google Doc as the last question not so

461
00:18:24,960 --> 00:18:27,240
echo is this field big-endian or small

462
00:18:27,240 --> 00:18:29,730
endian small endian and over about two

463
00:18:29,730 --> 00:18:30,870
or three weeks we built this stock from

464
00:18:30,870 --> 00:18:33,110
nothing to a complete implementation

465
00:18:33,110 --> 00:18:36,660
almost a cleanroom spec of how to update

466
00:18:36,660 --> 00:18:39,750
their unifying Hardware wacom better

467
00:18:39,750 --> 00:18:42,750
they sent me some some optimal code

468
00:18:42,750 --> 00:18:45,179
which we could then turn to plug in and

469
00:18:45,179 --> 00:18:47,130
even companies like Dell they were just

470
00:18:47,130 --> 00:18:48,450
literally send a pull request to say

471
00:18:48,450 --> 00:18:50,090
look this adds support for a new doc

472
00:18:50,090 --> 00:18:54,450
which is which is awesome now obviously

473
00:18:54,450 --> 00:18:58,080
this is a lot of trust in me now with

474
00:18:58,080 --> 00:19:01,530
the bear up that obviously I control the

475
00:19:01,530 --> 00:19:04,950
OVF s and so I'm I can kind of see what

476
00:19:04,950 --> 00:19:08,130
the vendors are doing on the RBF s but a

477
00:19:08,130 --> 00:19:10,230
lot of it's like an informal agreement

478
00:19:10,230 --> 00:19:13,190
in that if I ever for instance on a

479
00:19:13,190 --> 00:19:15,809
released an embargoed Hardware for Dell

480
00:19:15,809 --> 00:19:18,030
Dell will stop using the RDFS it would

481
00:19:18,030 --> 00:19:19,950
be it would be the end of the obvious so

482
00:19:19,950 --> 00:19:21,660
it's kind of like a balancing act

483
00:19:21,660 --> 00:19:25,590
between making it easy to use and making

484
00:19:25,590 --> 00:19:27,690
it private it's a really some really

485
00:19:27,690 --> 00:19:30,620
tricky balance not all some ideas there

486
00:19:30,620 --> 00:19:33,570
so we also have this idea of vendor

487
00:19:33,570 --> 00:19:36,510
relationships so on the LB FS you have

488
00:19:36,510 --> 00:19:39,860
the ODMs the IB ves and the OEMs and

489
00:19:39,860 --> 00:19:42,270
everything in between and so we let

490
00:19:42,270 --> 00:19:44,130
someone like Dell or HP manages their

491
00:19:44,130 --> 00:19:46,800
own users so del uses the yes year

492
00:19:46,800 --> 00:19:49,350
thanks though they uses their as your

493
00:19:49,350 --> 00:19:52,080
system and they don't have this but

494
00:19:52,080 --> 00:19:53,480
other companies will manage the

495
00:19:53,480 --> 00:19:55,770
different user classes

496
00:19:55,770 --> 00:19:58,800
the LV FS you see some users are verses

497
00:19:58,800 --> 00:20:00,450
like analysts where they can look at all

498
00:20:00,450 --> 00:20:02,190
the firmware and all the reports of

499
00:20:02,190 --> 00:20:04,770
failures and things other users might be

500
00:20:04,770 --> 00:20:07,320
managers that can add other users in

501
00:20:07,320 --> 00:20:12,090
their domain what's really cool is that

502
00:20:12,090 --> 00:20:13,620
once we have all this software this with

503
00:20:13,620 --> 00:20:15,840
this high quality metadata on the LV FS

504
00:20:15,840 --> 00:20:17,820
we can start doing analysis on it so

505
00:20:17,820 --> 00:20:20,280
using something like chipset we can take

506
00:20:20,280 --> 00:20:25,140
the the the capsule itself we can break

507
00:20:25,140 --> 00:20:29,370
it out so we can decompress the pfh we

508
00:20:29,370 --> 00:20:32,760
can unzip Libet we can break apart the

509
00:20:32,760 --> 00:20:36,570
fvh we can then look at all of the efi

510
00:20:36,570 --> 00:20:39,870
binaries in that image and there's some

511
00:20:39,870 --> 00:20:41,580
things we can guess about them there's

512
00:20:41,580 --> 00:20:43,050
not much information too much metadata

513
00:20:43,050 --> 00:20:45,210
there but we can see who signed them we

514
00:20:45,210 --> 00:20:47,010
can see what the show values are we can

515
00:20:47,010 --> 00:20:49,850
see if it kind of GUI do their targeting

516
00:20:49,850 --> 00:20:52,770
which means we can have this publicly

517
00:20:52,770 --> 00:20:54,690
available system to say ok well who is

518
00:20:54,690 --> 00:20:56,760
using who is using for instance the

519
00:20:56,760 --> 00:20:59,190
Intel gigabyte Ethernet controller you

520
00:20:59,190 --> 00:21:01,260
can see that that same checksum there

521
00:21:01,260 --> 00:21:04,380
will turn up between different OEMs so I

522
00:21:04,380 --> 00:21:05,910
see the OEMs are just using the pre bill

523
00:21:05,910 --> 00:21:09,740
if I blob which is kind of interesting

524
00:21:09,740 --> 00:21:11,940
we can also use it to keep the vendors

525
00:21:11,940 --> 00:21:12,660
honest

526
00:21:12,660 --> 00:21:15,480
so some once or twice we've caught the

527
00:21:15,480 --> 00:21:17,310
vendors out that they've issued a Lowe's

528
00:21:17,310 --> 00:21:20,070
low priority in hearts and only update

529
00:21:20,070 --> 00:21:22,320
when you actually look at the shot

530
00:21:22,320 --> 00:21:24,720
they've updated that's you're the EFI

531
00:21:24,720 --> 00:21:26,640
binaries themselves or the ma partition

532
00:21:26,640 --> 00:21:29,820
etc actually they've done some security

533
00:21:29,820 --> 00:21:31,020
they've sort of snuck the security

534
00:21:31,020 --> 00:21:33,060
changes in so we can kind of keep them

535
00:21:33,060 --> 00:21:34,410
honest and sort of say actually I think

536
00:21:34,410 --> 00:21:35,490
he might forgotten something in your

537
00:21:35,490 --> 00:21:39,660
release notes but he can compare all the

538
00:21:39,660 --> 00:21:41,190
objects in the RFS with the previous one

539
00:21:41,190 --> 00:21:44,370
which is super super useful obviously

540
00:21:44,370 --> 00:21:45,780
you can see here we've got the the ticks

541
00:21:45,780 --> 00:21:48,780
now I found it right on the start the

542
00:21:48,780 --> 00:21:50,100
way to get thermal engineers to do

543
00:21:50,100 --> 00:21:51,600
anything is getting their marketing

544
00:21:51,600 --> 00:21:54,300
department to call them so if you have a

545
00:21:54,300 --> 00:21:58,020
red mark a red cross next to a firm

546
00:21:58,020 --> 00:21:59,640
where the marketing department rings up

547
00:21:59,640 --> 00:22:01,020
the firmware department says I don't

548
00:22:01,020 --> 00:22:02,190
know what it is but you need to make

549
00:22:02,190 --> 00:22:05,010
that red mark go into a green tick and

550
00:22:05,010 --> 00:22:06,360
that's a really good way of getting

551
00:22:06,360 --> 00:22:08,970
Vince to do stuff part of the deal

552
00:22:08,970 --> 00:22:11,250
with uploading prfs is that we're

553
00:22:11,250 --> 00:22:12,179
allowed to do this kind of analysis

554
00:22:12,179 --> 00:22:14,490
which means that we can do virus

555
00:22:14,490 --> 00:22:17,580
scanning and that kind of thing so you

556
00:22:17,580 --> 00:22:20,070
can also do other checks like for

557
00:22:20,070 --> 00:22:22,380
instance we can check the efi capsule as

558
00:22:22,380 --> 00:22:24,210
it is it actually a capsule header if it

559
00:22:24,210 --> 00:22:26,220
is a capsule header does it have the

560
00:22:26,220 --> 00:22:27,179
correct flags

561
00:22:27,179 --> 00:22:29,340
does it have does it match the GUI deal

562
00:22:29,340 --> 00:22:30,690
at the vendors reference and the meta

563
00:22:30,690 --> 00:22:32,580
data so you can do other checks like

564
00:22:32,580 --> 00:22:35,549
this as well we can also check

565
00:22:35,549 --> 00:22:37,200
signatures we can see who actually

566
00:22:37,200 --> 00:22:41,720
signed this this this EFI binary and

567
00:22:41,720 --> 00:22:46,169
until we started off and the the

568
00:22:46,169 --> 00:22:47,820
allowance we gave them was the signature

569
00:22:47,820 --> 00:22:49,380
couldn't be more than three years out of

570
00:22:49,380 --> 00:22:54,240
date and half the firm I failed so over

571
00:22:54,240 --> 00:22:55,710
the last few months we've been really

572
00:22:55,710 --> 00:22:58,860
increasing the number of checks we doing

573
00:22:58,860 --> 00:23:00,659
firmware and also been making them more

574
00:23:00,659 --> 00:23:02,730
more strict so vendors are saying

575
00:23:02,730 --> 00:23:04,890
actually ok well sure you can waive

576
00:23:04,890 --> 00:23:06,870
these phase you can have a QA user from

577
00:23:06,870 --> 00:23:09,419
the event of organization login waive

578
00:23:09,419 --> 00:23:11,820
the failure then promote it to a stable

579
00:23:11,820 --> 00:23:13,860
but actually it's way less work if they

580
00:23:13,860 --> 00:23:16,380
go just go back to a Infineon or

581
00:23:16,380 --> 00:23:17,700
whatever I'm get it re signed by the

582
00:23:17,700 --> 00:23:19,799
vendor which is much better security so

583
00:23:19,799 --> 00:23:21,690
what kind of slowly but surely raising

584
00:23:21,690 --> 00:23:25,679
the bar for firmware security other

585
00:23:25,679 --> 00:23:27,210
interesting things now this one's a

586
00:23:27,210 --> 00:23:28,620
really interesting one it's just a

587
00:23:28,620 --> 00:23:30,299
simple black block list we basically

588
00:23:30,299 --> 00:23:34,530
take the DFU file break into elements we

589
00:23:34,530 --> 00:23:35,690
take the MA

590
00:23:35,690 --> 00:23:38,970
update we break it into partitions we

591
00:23:38,970 --> 00:23:41,640
take the ufi binary we scan the whole

592
00:23:41,640 --> 00:23:43,559
thing I'm we also scan each efi binary

593
00:23:43,559 --> 00:23:46,169
as well I mean any format format that we

594
00:23:46,169 --> 00:23:48,720
can recognize on the RBF s we can run it

595
00:23:48,720 --> 00:23:50,520
through this simple block list so

596
00:23:50,520 --> 00:23:53,159
something like do not ship you'd be

597
00:23:53,159 --> 00:23:55,770
amazed the number of binaries we found

598
00:23:55,770 --> 00:23:59,150
to be defined by OAM in your DMI data

599
00:23:59,150 --> 00:24:01,289
there was a vendor that was affected by

600
00:24:01,289 --> 00:24:03,539
that big time and so we can kind of add

601
00:24:03,539 --> 00:24:05,370
more and more checks now this one that

602
00:24:05,370 --> 00:24:06,809
i've had to kind of gray out because it

603
00:24:06,809 --> 00:24:09,150
actually found quite high priority CVA

604
00:24:09,150 --> 00:24:12,120
which you can't talk about which is

605
00:24:12,120 --> 00:24:14,250
fairly predictable if you understand

606
00:24:14,250 --> 00:24:15,750
what is looking for instantly we're

607
00:24:15,750 --> 00:24:18,210
looking in for with this for utf-8 a

608
00:24:18,210 --> 00:24:19,919
user ugh

609
00:24:19,919 --> 00:24:22,020
utf-8 16 ba and

610
00:24:22,020 --> 00:24:24,090
we've gotta find some permutations of

611
00:24:24,090 --> 00:24:29,010
this data so using this data this

612
00:24:29,010 --> 00:24:31,170
historical data it's kind of limited in

613
00:24:31,170 --> 00:24:32,490
that we only have a couple of years of

614
00:24:32,490 --> 00:24:34,410
this data going back but you can

615
00:24:34,410 --> 00:24:37,140
actually see for this XPS model that

616
00:24:37,140 --> 00:24:38,910
updates were released every quarter

617
00:24:38,910 --> 00:24:40,680
nearly all quarters so if you're

618
00:24:40,680 --> 00:24:42,240
approaching Department for a government

619
00:24:42,240 --> 00:24:44,160
or something you can see that actually

620
00:24:44,160 --> 00:24:46,910
it's probably worth buying the XPS 13

621
00:24:46,910 --> 00:24:49,260
over a maybe a lesser-known model

622
00:24:49,260 --> 00:24:51,210
because you're guaranteed support we

623
00:24:51,210 --> 00:24:53,790
have proof that the the phone is being

624
00:24:53,790 --> 00:24:55,740
updated and of course you've gained this

625
00:24:55,740 --> 00:24:59,070
you could just update the version number

626
00:24:59,070 --> 00:25:01,520
and then we submit to the our via first

627
00:25:01,520 --> 00:25:03,660
but then we're going to find out because

628
00:25:03,660 --> 00:25:05,430
the shards aren't gonna have changed and

629
00:25:05,430 --> 00:25:07,080
so we can use this to keep the vendors

630
00:25:07,080 --> 00:25:09,630
honest as well this is being used this

631
00:25:09,630 --> 00:25:11,970
was actually a direct requirement for a

632
00:25:11,970 --> 00:25:13,980
UK government who wanted to be able to

633
00:25:13,980 --> 00:25:16,320
work out what laptops would be supported

634
00:25:16,320 --> 00:25:21,990
for X months now in doing the obviou

635
00:25:21,990 --> 00:25:23,250
fess we have this this whole model of

636
00:25:23,250 --> 00:25:25,110
affiliates so for instance you can have

637
00:25:25,110 --> 00:25:28,230
an affiliate like Foxconn uploading to

638
00:25:28,230 --> 00:25:30,570
various different OEMs and so actually

639
00:25:30,570 --> 00:25:33,210
the case might say Lenovo but it might

640
00:25:33,210 --> 00:25:35,130
be made by various different OEMs and

641
00:25:35,130 --> 00:25:37,410
stares and you have this concept of an

642
00:25:37,410 --> 00:25:40,830
obv like a like an ami or a Phoenix it

643
00:25:40,830 --> 00:25:43,200
actually produced in the BIOS which then

644
00:25:43,200 --> 00:25:45,180
the ODM will then take and build on and

645
00:25:45,180 --> 00:25:47,490
then ship to the OEM but actually it's

646
00:25:47,490 --> 00:25:49,590
really really hard at much harder than

647
00:25:49,590 --> 00:25:53,370
that some in in this train there might

648
00:25:53,370 --> 00:25:55,470
not be an obv it might be people are

649
00:25:55,470 --> 00:25:57,540
just cut out the obv step at all it

650
00:25:57,540 --> 00:25:59,190
might be that the OEM is responsible for

651
00:25:59,190 --> 00:26:01,050
all parts of the firmware update process

652
00:26:01,050 --> 00:26:04,110
so including managing the QA and all

653
00:26:04,110 --> 00:26:07,350
that kind of the embargo stuff so

654
00:26:07,350 --> 00:26:11,629
actually there's a fairly complicated

655
00:26:12,650 --> 00:26:15,540
system to kind of map vendors among on

656
00:26:15,540 --> 00:26:18,120
the LV FS versus allowing one ODM to

657
00:26:18,120 --> 00:26:20,340
upload on behalf of Lenovo or another

658
00:26:20,340 --> 00:26:24,180
odn to upload on behalf of Dell and it

659
00:26:24,180 --> 00:26:25,470
does get complicated when there's

660
00:26:25,470 --> 00:26:27,840
various update protocols which are trade

661
00:26:27,840 --> 00:26:31,350
secrets which are being used with the

662
00:26:31,350 --> 00:26:33,210
OEM the supplies Dell and the OD and

663
00:26:33,210 --> 00:26:35,350
that supplies Lenovo etc

664
00:26:35,350 --> 00:26:43,630
like some secrets just fine now one

665
00:26:43,630 --> 00:26:45,910
thing I did get pinged someone in Google

666
00:26:45,910 --> 00:26:47,940
was actually passing the command line

667
00:26:47,940 --> 00:26:49,840
saying look we want to find out what

668
00:26:49,840 --> 00:26:52,960
firmware versions are installed on the

669
00:26:52,960 --> 00:26:56,230
hardware our systems we would be passing

670
00:26:56,230 --> 00:26:58,870
the the command line that users use to

671
00:26:58,870 --> 00:27:00,190
find that out and so you don't want to

672
00:27:00,190 --> 00:27:01,510
do that it's a terrible idea

673
00:27:01,510 --> 00:27:03,880
so we've created this thing called FWD

674
00:27:03,880 --> 00:27:06,970
agent which basically spits out a JSON

675
00:27:06,970 --> 00:27:08,800
blob of what hardware you have that's

676
00:27:08,800 --> 00:27:10,900
updatable and critically what firm

677
00:27:10,900 --> 00:27:12,910
updates available for it using the

678
00:27:12,910 --> 00:27:15,690
metadata that's on the device currently

679
00:27:15,690 --> 00:27:18,910
and yeah FW the agent is at the moment

680
00:27:18,910 --> 00:27:21,100
just an information provider but we have

681
00:27:21,100 --> 00:27:23,170
patches which allow after the agent to

682
00:27:23,170 --> 00:27:25,390
actually register with a remote webbing

683
00:27:25,390 --> 00:27:27,880
web instance so you can actually enroll

684
00:27:27,880 --> 00:27:30,610
the server much like I guess our hnd

685
00:27:30,610 --> 00:27:32,950
used to do so you can actually see if

686
00:27:32,950 --> 00:27:36,340
your enterprise what updates what

687
00:27:36,340 --> 00:27:37,810
machines haven't been updated that's

688
00:27:37,810 --> 00:27:39,670
kind of working progress it's maybe not

689
00:27:39,670 --> 00:27:41,860
something I want to do but someone else

690
00:27:41,860 --> 00:27:44,470
might if the agent also has

691
00:27:44,470 --> 00:27:46,300
functionality so that you can the remote

692
00:27:46,300 --> 00:27:49,540
web web service can actually say install

693
00:27:49,540 --> 00:27:51,970
this firmware from this location which

694
00:27:51,970 --> 00:27:53,530
makes it bit more useful for things like

695
00:27:53,530 --> 00:27:57,610
her using in like ansible and that kind

696
00:27:57,610 --> 00:28:02,620
of thing so three years ago when we

697
00:28:02,620 --> 00:28:06,070
started the lv FS we were asking the

698
00:28:06,070 --> 00:28:07,600
OEMs and the OEMs

699
00:28:07,600 --> 00:28:11,850
please help us please help Linux users

700
00:28:11,850 --> 00:28:13,810
because we need to install firmware

701
00:28:13,810 --> 00:28:17,290
updates to mostly on deaf ears but in

702
00:28:17,290 --> 00:28:19,660
the last three years it's really changed

703
00:28:19,660 --> 00:28:21,850
we've now got people like Dell saying if

704
00:28:21,850 --> 00:28:23,200
you want to supply hard way to Dell if

705
00:28:23,200 --> 00:28:24,850
it would be a supplier to tell your

706
00:28:24,850 --> 00:28:26,710
hardware needs to be updated bull and on

707
00:28:26,710 --> 00:28:29,080
the audio first Google has increasing

708
00:28:29,080 --> 00:28:32,080
requirements for lvf s to be supported

709
00:28:32,080 --> 00:28:33,670
on the hardware read tactics very

710
00:28:33,670 --> 00:28:34,720
different getting ready at hardware

711
00:28:34,720 --> 00:28:37,480
isn't Apple which doesn't have LV FS

712
00:28:37,480 --> 00:28:41,050
support and interestingly the UK and US

713
00:28:41,050 --> 00:28:42,760
have various governmental departments

714
00:28:42,760 --> 00:28:44,710
which refused to buy hardware that is

715
00:28:44,710 --> 00:28:45,940
not dateable they don't want to be

716
00:28:45,940 --> 00:28:47,650
locked into these proprietary and

717
00:28:47,650 --> 00:28:48,820
support contracts

718
00:28:48,820 --> 00:28:51,639
with various enterprise vendors which

719
00:28:51,639 --> 00:28:53,830
basically means we changed in tone so

720
00:28:53,830 --> 00:28:55,720
rather than it being me pleading with

721
00:28:55,720 --> 00:28:58,539
vendors saying look up Linux users we

722
00:28:58,539 --> 00:29:00,220
have this number of people etc etc etc

723
00:29:00,220 --> 00:29:02,320
now they're saying if we don't get our

724
00:29:02,320 --> 00:29:04,990
firm on the RBF s in the next quarter we

725
00:29:04,990 --> 00:29:07,059
will lose this many millions of dollars

726
00:29:07,059 --> 00:29:10,029
worth of sales what what heaven on earth

727
00:29:10,029 --> 00:29:12,190
do we need to move to make this happen

728
00:29:12,190 --> 00:29:13,690
and then I can say well you need to open

729
00:29:13,690 --> 00:29:15,100
this update protocol you need to go back

730
00:29:15,100 --> 00:29:17,110
to your silicon supplier and we need to

731
00:29:17,110 --> 00:29:18,549
talk to your silicon supply about

732
00:29:18,549 --> 00:29:19,779
opening the protocol so we can get

733
00:29:19,779 --> 00:29:21,789
support in FWD so we can get firm on the

734
00:29:21,789 --> 00:29:25,210
IVFs etc this means that can be bit more

735
00:29:25,210 --> 00:29:27,399
obnoxious when I'm asking for stuff

736
00:29:27,399 --> 00:29:32,200
she's good so we've come basically from

737
00:29:32,200 --> 00:29:34,029
nothing we're now shipping like the

738
00:29:34,029 --> 00:29:35,649
scale on the left hand side is like

739
00:29:35,649 --> 00:29:38,259
that's that top numbers 900,000 firmware

740
00:29:38,259 --> 00:29:41,980
downloads a month so and you can't

741
00:29:41,980 --> 00:29:43,419
really read too much into it this is

742
00:29:43,419 --> 00:29:45,370
kind of fudged the numbers a little bit

743
00:29:45,370 --> 00:29:47,679
because Dell started off with a few

744
00:29:47,679 --> 00:29:49,629
model supported but Dell basically Co

745
00:29:49,629 --> 00:29:51,700
maintained this entire stack so although

746
00:29:51,700 --> 00:29:53,409
Dell looks like a very small peak

747
00:29:53,409 --> 00:29:55,000
actually a good chunk of these updates

748
00:29:55,000 --> 00:29:56,590
are probably all Dell they've rolled up

749
00:29:56,590 --> 00:29:59,379
for more models similarly ThinkPad and

750
00:29:59,379 --> 00:30:00,789
Lenovo endeavors a tricky one because

751
00:30:00,789 --> 00:30:02,350
they had to get over there Oh DMS and

752
00:30:02,350 --> 00:30:03,370
they're still looking providers on board

753
00:30:03,370 --> 00:30:06,149
before they could do the big tada

754
00:30:06,149 --> 00:30:09,009
announcement so actually we had to work

755
00:30:09,009 --> 00:30:11,139
with Lenovo for months before we could

756
00:30:11,139 --> 00:30:13,659
actually announce ThinkPad support for

757
00:30:13,659 --> 00:30:16,779
instance and similar HP so Christmas

758
00:30:16,779 --> 00:30:18,429
last year was just mad so more and more

759
00:30:18,429 --> 00:30:19,720
companies are basically finding it

760
00:30:19,720 --> 00:30:22,600
couldn't sell stuff to the big o AMS and

761
00:30:22,600 --> 00:30:25,960
so I was getting essentially an email

762
00:30:25,960 --> 00:30:28,509
every other week to say we need to get

763
00:30:28,509 --> 00:30:30,759
the stuff on the all the FS I've kind of

764
00:30:30,759 --> 00:30:32,379
used the date that they uploaded the

765
00:30:32,379 --> 00:30:34,419
first firmware always pushed a stable

766
00:30:34,419 --> 00:30:36,759
but if I have to sort of fudge some and

767
00:30:36,759 --> 00:30:39,759
for reasons there's lots of logos you

768
00:30:39,759 --> 00:30:41,860
can't see there lots of companies test

769
00:30:41,860 --> 00:30:44,139
the RFS in secret they want to see if

770
00:30:44,139 --> 00:30:47,440
it's don't see whether it's possible to

771
00:30:47,440 --> 00:30:49,029
support and what the whole architecture

772
00:30:49,029 --> 00:30:51,309
is before they commit to it and B free

773
00:30:51,309 --> 00:30:52,929
software most completely free to free

774
00:30:52,929 --> 00:30:55,179
service there's no cost at all engineers

775
00:30:55,179 --> 00:30:56,919
can try out that engineers can notice

776
00:30:56,919 --> 00:30:58,539
their managers and the managers can link

777
00:30:58,539 --> 00:31:02,289
up to legal yeah there's lots of logos

778
00:31:02,289 --> 00:31:02,590
there

779
00:31:02,590 --> 00:31:04,539
you can't see they are actually on the

780
00:31:04,539 --> 00:31:08,950
RBF s and well announced soon also we

781
00:31:08,950 --> 00:31:11,140
have a search feature on the RV FS so

782
00:31:11,140 --> 00:31:13,779
you can sort of go to aces and say look

783
00:31:13,779 --> 00:31:15,370
in the last month a thousand people

784
00:31:15,370 --> 00:31:17,770
searched for Asus firma updates which

785
00:31:17,770 --> 00:31:20,380
they didn't find on the RV FS will you

786
00:31:20,380 --> 00:31:22,090
reconsider your decision that's a really

787
00:31:22,090 --> 00:31:24,640
powerful thing so when we were kind of

788
00:31:24,640 --> 00:31:27,480
courting a Lenovo we could say look

789
00:31:27,480 --> 00:31:30,159
20,000 people are social and novo but I

790
00:31:30,159 --> 00:31:31,770
found nothing

791
00:31:31,770 --> 00:31:33,789
so let's look to the future I'm

792
00:31:33,789 --> 00:31:36,820
consciously running out of time I'd like

793
00:31:36,820 --> 00:31:38,289
to see an enterprise dashboard I'm not

794
00:31:38,289 --> 00:31:39,520
sure I'm the person that wants to do it

795
00:31:39,520 --> 00:31:41,380
but we need together put all the tools

796
00:31:41,380 --> 00:31:43,840
in place like the JSON output etc so

797
00:31:43,840 --> 00:31:45,250
that users can build something in

798
00:31:45,250 --> 00:31:48,730
ansible or whatever and produce

799
00:31:48,730 --> 00:31:50,980
something that's good there are a few

800
00:31:50,980 --> 00:31:52,630
remaining Venice like Asus are

801
00:31:52,630 --> 00:31:54,970
interested done nothing Microsoft say

802
00:31:54,970 --> 00:31:56,350
they're super excited you want to do it

803
00:31:56,350 --> 00:31:58,630
but I then have another anything and a

804
00:31:58,630 --> 00:32:00,850
few smaller vendors and I'd also like to

805
00:32:00,850 --> 00:32:02,200
increase them protests we do on the

806
00:32:02,200 --> 00:32:04,929
firmware itself so Ivan no I have no

807
00:32:04,929 --> 00:32:07,149
problem with for instance the thief oh

808
00:32:07,149 --> 00:32:08,799
my files will be scanned with clamavi

809
00:32:08,799 --> 00:32:11,200
and they also gets into virustotal which

810
00:32:11,200 --> 00:32:12,880
doesn't more thorough virus analysis on

811
00:32:12,880 --> 00:32:15,070
me if i binaries and that'll be a non

812
00:32:15,070 --> 00:32:17,380
free service and i've got no problem

813
00:32:17,380 --> 00:32:20,140
with for me being tested for things like

814
00:32:20,140 --> 00:32:22,750
viruses or let's just go to like static

815
00:32:22,750 --> 00:32:24,730
analysis on them if you want it so I

816
00:32:24,730 --> 00:32:28,630
think that's we look for the future so

817
00:32:28,630 --> 00:32:30,100
thank you for listening to me ramble on

818
00:32:30,100 --> 00:32:32,470
I can't not so any questions about what

819
00:32:32,470 --> 00:32:34,779
hardware is gonna be an absolutely I'll

820
00:32:34,779 --> 00:32:36,880
be FS in the future nor which companies

821
00:32:36,880 --> 00:32:38,230
are hopefully going to release

822
00:32:38,230 --> 00:32:41,020
announcement etc but yeah thank you

823
00:32:41,020 --> 00:32:47,169
listening thank you Richard said any

824
00:32:47,169 --> 00:32:49,990
questions we have about time for seven

825
00:32:49,990 --> 00:32:54,789
questions seven questions please would

826
00:32:54,789 --> 00:32:57,880
you please go to the microphones to the

827
00:32:57,880 --> 00:33:05,799
questions I was wondering about you know

828
00:33:05,799 --> 00:33:08,169
a few of the things that I come across

829
00:33:08,169 --> 00:33:12,010
is we don't have it for that what I

830
00:33:12,010 --> 00:33:14,049
noticed is majority of this is being

831
00:33:14,049 --> 00:33:16,150
deployed for the laptop yeah

832
00:33:16,150 --> 00:33:19,030
and how much of this is being integrated

833
00:33:19,030 --> 00:33:20,350
into enterprise that you mentioned is

834
00:33:20,350 --> 00:33:23,250
the world so enterprise is hard so

835
00:33:23,250 --> 00:33:25,570
laptop vendors one unlike desktop

836
00:33:25,570 --> 00:33:26,980
commercial stuff they want to sell as

837
00:33:26,980 --> 00:33:29,020
many units as possible enterprise

838
00:33:29,020 --> 00:33:30,460
vendors have looked at this and there

839
00:33:30,460 --> 00:33:32,680
are two big enterprise centers that are

840
00:33:32,680 --> 00:33:35,170
testing this right now but they have

841
00:33:35,170 --> 00:33:36,850
this model where security updates cost

842
00:33:36,850 --> 00:33:38,350
money and there's a subscription

843
00:33:38,350 --> 00:33:39,790
attached to that they don't want to

844
00:33:39,790 --> 00:33:41,680
release that for cash cow now I think

845
00:33:41,680 --> 00:33:42,820
that's absolutely crazy

846
00:33:42,820 --> 00:33:45,510
withholding security updates for money's

847
00:33:45,510 --> 00:33:50,190
insane so I think the vendors will

848
00:33:50,190 --> 00:33:52,510
increasingly find it harder to sell what

849
00:33:52,510 --> 00:33:53,740
they need to sell and will come to the

850
00:33:53,740 --> 00:33:55,870
conclusion that they're losing sales but

851
00:33:55,870 --> 00:33:57,550
there it will cost them less money and

852
00:33:57,550 --> 00:33:59,850
lost revenue compared to loss of sales

853
00:33:59,850 --> 00:34:03,910
one more question before I am how do you

854
00:34:03,910 --> 00:34:07,750
do a cannery like when you actually read

855
00:34:07,750 --> 00:34:09,550
do you mention about throttling ah

856
00:34:09,550 --> 00:34:11,080
that's a good question

857
00:34:11,080 --> 00:34:14,380
so there's there's lots of easy things

858
00:34:14,380 --> 00:34:15,880
we can do in one massive failure in the

859
00:34:15,880 --> 00:34:18,580
whole system so if you're doing like a

860
00:34:18,580 --> 00:34:20,350
DFU update we check that the device came

861
00:34:20,350 --> 00:34:22,030
back with the expected version number

862
00:34:22,030 --> 00:34:23,320
which is straight because you can run

863
00:34:23,320 --> 00:34:24,940
time this meter for a reboot if it's a

864
00:34:24,940 --> 00:34:27,100
UEFI update capsule we wait for the user

865
00:34:27,100 --> 00:34:29,409
to reboot and then we on the next boot

866
00:34:29,409 --> 00:34:30,940
subsequent of that we then check the

867
00:34:30,940 --> 00:34:32,500
version numbers what we expect and then

868
00:34:32,500 --> 00:34:36,399
epcr zeros are correct etc what the

869
00:34:36,399 --> 00:34:38,199
major failure in this problem is if you

870
00:34:38,199 --> 00:34:42,010
actually sent a low mark day out which

871
00:34:42,010 --> 00:34:44,530
bricked the computer completely you have

872
00:34:44,530 --> 00:34:46,060
no way of getting that information back

873
00:34:46,060 --> 00:34:48,580
to the obvious and so far that hasn't

874
00:34:48,580 --> 00:34:51,190
happened but there's no I don't think

875
00:34:51,190 --> 00:34:56,139
there's any way around that thanks we

876
00:34:56,139 --> 00:34:59,130
have time for about five more questions

877
00:34:59,130 --> 00:35:03,880
I've only got one so I'm Simon glass the

878
00:35:03,880 --> 00:35:05,680
company the top lift I worked on the

879
00:35:05,680 --> 00:35:07,840
Dell Latitude and we used that your your

880
00:35:07,840 --> 00:35:10,300
project one thing I noticed some looking

881
00:35:10,300 --> 00:35:13,510
at using it more is that identifying the

882
00:35:13,510 --> 00:35:16,150
hardware it is not obvious how to do

883
00:35:16,150 --> 00:35:16,960
that

884
00:35:16,960 --> 00:35:19,030
for example for touchscreens sometimes

885
00:35:19,030 --> 00:35:21,070
you don't you can't prove it you know

886
00:35:21,070 --> 00:35:22,030
that sort of thing is there a standard

887
00:35:22,030 --> 00:35:25,240
way to do that or do you standardize

888
00:35:25,240 --> 00:35:28,150
continuously in advice there so vendors

889
00:35:28,150 --> 00:35:29,650
reinvent that

890
00:35:29,650 --> 00:35:31,660
no reason so for instance like a

891
00:35:31,660 --> 00:35:33,910
synaptics MST you have a specific way to

892
00:35:33,910 --> 00:35:35,740
prove it using your channel and it's

893
00:35:35,740 --> 00:35:38,200
very specific to the hardware so I think

894
00:35:38,200 --> 00:35:40,390
realistically it's a new plugin in F the

895
00:35:40,390 --> 00:35:43,180
blip D for each end of protocol from the

896
00:35:43,180 --> 00:35:44,590
practical plug-in itself responsible for

897
00:35:44,590 --> 00:35:45,730
updating the firmware also about

898
00:35:45,730 --> 00:35:47,380
enumerating what's there and like

899
00:35:47,380 --> 00:35:49,210
watching hot plug events and stuff so I

900
00:35:49,210 --> 00:35:50,080
think the question you're asking is

901
00:35:50,080 --> 00:35:52,380
someone like social some presence like

902
00:35:52,380 --> 00:35:54,670
synaptics are contributing an RMI for

903
00:35:54,670 --> 00:35:57,190
plug-in which can then look at all the

904
00:35:57,190 --> 00:36:00,070
touchpads that exist for semantics so

905
00:36:00,070 --> 00:36:02,140
but then until their protocol exists we

906
00:36:02,140 --> 00:36:03,400
don't know if the existence of the

907
00:36:03,400 --> 00:36:06,340
touchpad does answer the question you

908
00:36:06,340 --> 00:36:07,900
can ask a different question sounds like

909
00:36:07,900 --> 00:36:09,370
it's a tough one it is a tough question

910
00:36:09,370 --> 00:36:11,290
because a lot of the silicones you can't

911
00:36:11,290 --> 00:36:13,360
change silicon and so you say to offend

912
00:36:13,360 --> 00:36:14,740
all if you use something like the new

913
00:36:14,740 --> 00:36:17,020
Microsoft CFU you to be able to

914
00:36:17,020 --> 00:36:18,640
enumerate across this cross-platform

915
00:36:18,640 --> 00:36:20,320
thing but they're like with the silicon

916
00:36:20,320 --> 00:36:22,450
we can't change and there's 30 million

917
00:36:22,450 --> 00:36:24,190
units in the wilds which we have to

918
00:36:24,190 --> 00:36:24,700
support

919
00:36:24,700 --> 00:36:27,430
so essentially you cut more code I'm

920
00:36:27,430 --> 00:36:33,130
afraid this was Sammy sir is that a

921
00:36:33,130 --> 00:36:36,070
sailing body for the former's is it

922
00:36:36,070 --> 00:36:37,630
funny what sorry is that a signing body

923
00:36:37,630 --> 00:36:41,290
like your fader door if I want to say in

924
00:36:41,290 --> 00:36:44,950
my firmware so is that is a difference

925
00:36:44,950 --> 00:36:47,260
of the vendor to sign it or do you have

926
00:36:47,260 --> 00:36:49,810
a general body to sign it so Jimmy is

927
00:36:49,810 --> 00:36:53,020
signing from a UEFI point of view or any

928
00:36:53,020 --> 00:36:56,140
other device former so at the moment the

929
00:36:56,140 --> 00:36:59,230
RFS has to signing always you shine the

930
00:36:59,230 --> 00:37:00,910
UEFI firmware from the Effendi's and the

931
00:37:00,910 --> 00:37:02,320
private vendor key I don't have anything

932
00:37:02,320 --> 00:37:03,940
to do with that you sign the binary

933
00:37:03,940 --> 00:37:07,870
itself and then the RFS signs on top so

934
00:37:07,870 --> 00:37:10,000
if you manage to say hack the LV FS and

935
00:37:10,000 --> 00:37:11,590
you've got some random fellow that you

936
00:37:11,590 --> 00:37:14,140
self-signed assigned by the RFS it would

937
00:37:14,140 --> 00:37:15,760
be deployed on Caesars computer it

938
00:37:15,760 --> 00:37:17,200
wouldn't be up you would you can update

939
00:37:17,200 --> 00:37:19,960
it wouldn't match the users heart by

940
00:37:19,960 --> 00:37:21,490
signing key and so it wouldn't actually

941
00:37:21,490 --> 00:37:26,380
be deployed at Sonnen firmware is

942
00:37:26,380 --> 00:37:28,510
totally unsigned like Supriyo firmware

943
00:37:28,510 --> 00:37:30,910
is unsigned there's no Mille to checksum

944
00:37:30,910 --> 00:37:33,460
and so it's more it's easier to you have

945
00:37:33,460 --> 00:37:34,810
to come rely more on the are VFS

946
00:37:34,810 --> 00:37:37,270
checksum and stuff so answer the

947
00:37:37,270 --> 00:37:39,430
question at all yeah yeah so it's pretty

948
00:37:39,430 --> 00:37:41,680
much where they was asking is holy I

949
00:37:41,680 --> 00:37:43,109
trust some people

950
00:37:43,109 --> 00:37:46,019
coming in so a lot of it like security

951
00:37:46,019 --> 00:37:47,819
you can't solve security unless you get

952
00:37:47,819 --> 00:37:49,230
people involved so sometimes it's

953
00:37:49,230 --> 00:37:50,190
literally picking up the phone and

954
00:37:50,190 --> 00:37:52,589
talking to someone saying okay I need to

955
00:37:52,589 --> 00:37:55,440
talk to your legal department and as if

956
00:37:55,440 --> 00:37:56,910
you're HP and you want to ship stuff on

957
00:37:56,910 --> 00:37:58,529
the obvious I need to talk to their

958
00:37:58,529 --> 00:37:59,999
legal department to make sure the person

959
00:37:59,999 --> 00:38:02,730
is able to upload the code and then I

960
00:38:02,730 --> 00:38:04,319
can redistribute it without meeting in

961
00:38:04,319 --> 00:38:06,329
trouble and so as part of our escalation

962
00:38:06,329 --> 00:38:08,970
you kind of you get kind of I guess

963
00:38:08,970 --> 00:38:12,329
social trust of doing that is no way for

964
00:38:12,329 --> 00:38:13,710
placing that with numbers or or

965
00:38:13,710 --> 00:38:15,089
computers I think it's literally a

966
00:38:15,089 --> 00:38:19,529
person-to-person thing Thanks how do you

967
00:38:19,529 --> 00:38:21,359
think this looks with open source

968
00:38:21,359 --> 00:38:23,640
firmware if you have the same kind of

969
00:38:23,640 --> 00:38:25,980
security methods but since it's compiled

970
00:38:25,980 --> 00:38:27,779
separately it's not going to match any

971
00:38:27,779 --> 00:38:31,890
of the checksums for other UEFI binaries

972
00:38:31,890 --> 00:38:34,799
from other IB V's so the firmware you

973
00:38:34,799 --> 00:38:36,960
could probably do a much more in-depth

974
00:38:36,960 --> 00:38:38,460
security check because you could

975
00:38:38,460 --> 00:38:40,799
identify the exact source code that it

976
00:38:40,799 --> 00:38:42,630
was compiled with for example good

977
00:38:42,630 --> 00:38:44,999
question that goes so one thing I'd like

978
00:38:44,999 --> 00:38:46,349
to see like I've been talking to one of

979
00:38:46,349 --> 00:38:48,539
the US Department comment departments

980
00:38:48,539 --> 00:38:50,160
about doing a software build materials

981
00:38:50,160 --> 00:38:52,049
where you can find out like from an EFI

982
00:38:52,049 --> 00:38:53,970
binary what SSL it was compiled against

983
00:38:53,970 --> 00:38:55,470
etc so rather than just relying on this

984
00:38:55,470 --> 00:38:57,900
it's shut if I took checks on you can

985
00:38:57,900 --> 00:38:59,339
compare its software below materials

986
00:38:59,339 --> 00:39:01,109
which is then signed by the vendor

987
00:39:01,109 --> 00:39:02,970
that's a much better way doing it just

988
00:39:02,970 --> 00:39:04,980
blind checks on G just cuz all we've got

989
00:39:04,980 --> 00:39:07,259
but if you want to use better that's the

990
00:39:07,259 --> 00:39:07,739
awesome

991
00:39:07,739 --> 00:39:09,569
I should go so it was like that is not

992
00:39:09,569 --> 00:39:11,400
just a proprietary software thing like I

993
00:39:11,400 --> 00:39:13,410
guess 20% of the firmware on the all the

994
00:39:13,410 --> 00:39:16,769
FS is free software like a GPL or other

995
00:39:16,769 --> 00:39:19,559
licensed so I think something like call

996
00:39:19,559 --> 00:39:22,470
boot would make total sense right does

997
00:39:22,470 --> 00:39:23,609
have another round of applause for

998
00:39:23,609 --> 00:39:27,110
Richard pinky thank you

999
00:39:27,110 --> 00:39:34,930
[Music]

