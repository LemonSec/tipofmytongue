1
00:00:03,190 --> 00:00:06,259
[Music]

2
00:00:07,670 --> 00:00:11,130
though so this next talk is by Iran and

3
00:00:11,130 --> 00:00:15,690
luncheon and and subrata but he's not

4
00:00:15,690 --> 00:00:16,139
here

5
00:00:16,139 --> 00:00:18,180
yeah but he worked on the talk as well

6
00:00:18,180 --> 00:00:21,449
so yeah sir Prada did some work on the

7
00:00:21,449 --> 00:00:23,939
talk as well so and last year and the

8
00:00:23,939 --> 00:00:26,730
years of see Ron talked about that is

9
00:00:26,730 --> 00:00:30,630
about the Rams age and how it's already

10
00:00:30,630 --> 00:00:34,079
possible to substitute the RAM stage

11
00:00:34,079 --> 00:00:35,640
with the Linux kernel because the Linux

12
00:00:35,640 --> 00:00:38,219
kernel has so much stuff that the RAM

13
00:00:38,219 --> 00:00:40,620
stage does so we don't have really have

14
00:00:40,620 --> 00:00:42,030
to use the RAM stage we can just

15
00:00:42,030 --> 00:00:46,140
substitute it and have all that work be

16
00:00:46,140 --> 00:00:50,280
in the Linux kernel so and now this this

17
00:00:50,280 --> 00:00:52,620
works with coreboot but now there's work

18
00:00:52,620 --> 00:00:54,180
done to make it work with a slim

19
00:00:54,180 --> 00:00:57,239
bootloader and so this is what the talks

20
00:00:57,239 --> 00:00:59,370
going to be about please have a big

21
00:00:59,370 --> 00:01:05,670
round of applause for Ronan and yeah

22
00:01:05,670 --> 00:01:08,520
minor correction all the heavy lifting

23
00:01:08,520 --> 00:01:10,590
on this was done by sue Brockton and

24
00:01:10,590 --> 00:01:12,799
Shang I've just been kibitzing and

25
00:01:12,799 --> 00:01:14,670
actually the slides are kind of really

26
00:01:14,670 --> 00:01:16,320
super autos but he couldn't make it and

27
00:01:16,320 --> 00:01:19,170
asked me to stand in for him I changed

28
00:01:19,170 --> 00:01:21,090
the title a little because that's what

29
00:01:21,090 --> 00:01:22,409
you get to do when you give a talk for

30
00:01:22,409 --> 00:01:25,110
someone so it doesn't say coreboot light

31
00:01:25,110 --> 00:01:27,659
anymore because I never said my favorite

32
00:01:27,659 --> 00:01:33,229
word but anyway when we go so what were

33
00:01:33,229 --> 00:01:35,670
we've been working on this maybe since

34
00:01:35,670 --> 00:01:37,500
last year when you know I first brought

35
00:01:37,500 --> 00:01:41,759
up this idea at the talk and so we just

36
00:01:41,759 --> 00:01:43,220
wanted to talk about where we are and

37
00:01:43,220 --> 00:01:45,720
Shang is here to watch over me and make

38
00:01:45,720 --> 00:01:49,200
sure I don't get too far off track but

39
00:01:49,200 --> 00:01:51,240
we were gonna talk about Ram payload and

40
00:01:51,240 --> 00:01:54,780
Linux boot and my original interest in

41
00:01:54,780 --> 00:01:57,030
you know removing the ramp stages is

42
00:01:57,030 --> 00:01:59,430
around Linux boot but he's also worked

43
00:01:59,430 --> 00:02:02,939
on on on the ramp a load for non Linux

44
00:02:02,939 --> 00:02:05,820
kernel applications and the idea is you

45
00:02:05,820 --> 00:02:07,409
just you like to try and remove as much

46
00:02:07,409 --> 00:02:09,919
redundancy in the RAM stage that that is

47
00:02:09,919 --> 00:02:14,149
replicated in your payload as you can

48
00:02:14,489 --> 00:02:19,420
so here's a quick status on that work so

49
00:02:19,420 --> 00:02:21,939
the observation was that there is

50
00:02:21,939 --> 00:02:24,099
functionality duplication and Abood flow

51
00:02:24,099 --> 00:02:27,970
and that could actually impact firmware

52
00:02:27,970 --> 00:02:29,799
boot time now for most firmware we're I

53
00:02:29,799 --> 00:02:31,810
don't care cuz you know most firmware

54
00:02:31,810 --> 00:02:34,150
burns minutes like you know they're

55
00:02:34,150 --> 00:02:36,549
going out of style but for core score

56
00:02:36,549 --> 00:02:38,470
booth you know every 10 milliseconds or

57
00:02:38,470 --> 00:02:40,750
so you add is in 10 milliseconds that

58
00:02:40,750 --> 00:02:42,879
you you know made your boot time worse

59
00:02:42,879 --> 00:02:48,849
so if you can possibly remove that kind

60
00:02:48,849 --> 00:02:50,079
of thing you can get rid of it and so

61
00:02:50,079 --> 00:02:51,849
basically what this talk about is really

62
00:02:51,849 --> 00:02:54,639
from the coreboot perspective you know

63
00:02:54,639 --> 00:02:55,870
you don't see a ramp stage in there

64
00:02:55,870 --> 00:02:58,030
because it's hardly been removed or

65
00:02:58,030 --> 00:03:01,409
functionality got moved into post core

66
00:03:01,409 --> 00:03:06,519
so that's the goal here and so this is a

67
00:03:06,519 --> 00:03:08,470
summary of the work subrata has done on

68
00:03:08,470 --> 00:03:12,819
the latest ia chrome platform and I was

69
00:03:12,819 --> 00:03:14,920
there kind of providing the Linux kernel

70
00:03:14,920 --> 00:03:17,919
in the you root image for him and then

71
00:03:17,919 --> 00:03:20,769
testing what he was doing so here's your

72
00:03:20,769 --> 00:03:22,870
classic car boot boot flow which

73
00:03:22,870 --> 00:03:24,250
probably everybody in here knows by now

74
00:03:24,250 --> 00:03:27,310
there's your boot block your rom stage

75
00:03:27,310 --> 00:03:29,410
the post car where your teardown caches

76
00:03:29,410 --> 00:03:31,989
ram and do some empty RR stuff and an

77
00:03:31,989 --> 00:03:33,790
RAM stage and this is a heavily f SP

78
00:03:33,790 --> 00:03:35,889
centric slide as you can see this is not

79
00:03:35,889 --> 00:03:38,169
like you know your grandfather's core

80
00:03:38,169 --> 00:03:40,690
boot because there's just a lot of

81
00:03:40,690 --> 00:03:43,410
binary blob action here with the FSP but

82
00:03:43,410 --> 00:03:45,609
that's kind of how it's done on newer

83
00:03:45,609 --> 00:03:47,109
Chromebooks today and other platforms

84
00:03:47,109 --> 00:03:49,660
and here's some rough size numbers you

85
00:03:49,660 --> 00:03:51,069
can kind of see it the right the RAM

86
00:03:51,069 --> 00:03:55,510
stage is a quarter Meg and then we were

87
00:03:55,510 --> 00:03:57,669
on depth charge so my interest in all

88
00:03:57,669 --> 00:03:58,870
this is not actually in depth charge

89
00:03:58,870 --> 00:04:00,609
it's in Linux boot but you know this is

90
00:04:00,609 --> 00:04:02,530
what the flow looks like on a chrome

91
00:04:02,530 --> 00:04:05,290
platform and the experiment he did was

92
00:04:05,290 --> 00:04:10,000
to yank out the RAM stage and even

93
00:04:10,000 --> 00:04:12,159
though and I and here's where things get

94
00:04:12,159 --> 00:04:13,810
a little concerning for me because he

95
00:04:13,810 --> 00:04:15,940
did yank out the RAM stage what did make

96
00:04:15,940 --> 00:04:18,849
it work that's great but I noticed what

97
00:04:18,849 --> 00:04:21,089
happened here for depth-charged purposes

98
00:04:21,089 --> 00:04:23,409
and I'm the guy who made these red they

99
00:04:23,409 --> 00:04:25,810
were black but there's a little bit of

100
00:04:25,810 --> 00:04:26,500
PC ice

101
00:04:26,500 --> 00:04:28,720
going on here and yeah there's a CPI

102
00:04:28,720 --> 00:04:30,370
table creation going here and that was a

103
00:04:30,370 --> 00:04:32,560
little concerning to me although he did

104
00:04:32,560 --> 00:04:35,350
get some kind of nice numbers you

105
00:04:35,350 --> 00:04:38,920
reduced the overall image by 150 K and

106
00:04:38,920 --> 00:04:41,620
again you know in a kind of an F s P

107
00:04:41,620 --> 00:04:43,750
UEFI world that's just peanuts because

108
00:04:43,750 --> 00:04:45,700
those things - of megabytes like

109
00:04:45,700 --> 00:04:47,320
nobody's business but still from a

110
00:04:47,320 --> 00:04:49,060
coreboot perspective that's a pretty

111
00:04:49,060 --> 00:04:53,740
good sized reduction and but the thing I

112
00:04:53,740 --> 00:04:56,650
like is is chopping off 240 milliseconds

113
00:04:56,650 --> 00:04:58,390
because again on a Chromebook and IOT

114
00:04:58,390 --> 00:05:01,210
things every every 10 milliseconds you

115
00:05:01,210 --> 00:05:03,370
save matters I was telling shining a

116
00:05:03,370 --> 00:05:06,550
story last night about a visit I had

117
00:05:06,550 --> 00:05:08,860
from the Navy one year these are the

118
00:05:08,860 --> 00:05:10,570
guys who put the sonar in the subs and

119
00:05:10,570 --> 00:05:13,900
they said you don't like to really have

120
00:05:13,900 --> 00:05:15,310
a sonar that takes a long time to do

121
00:05:15,310 --> 00:05:18,490
because then you could be dead so real

122
00:05:18,490 --> 00:05:20,200
life application I've heard you know

123
00:05:20,200 --> 00:05:22,360
from DoD in several cases where boot

124
00:05:22,360 --> 00:05:24,700
time is incredibly critical to living

125
00:05:24,700 --> 00:05:27,700
and and so you know 240 milliseconds is

126
00:05:27,700 --> 00:05:29,320
no small gain in in boot time

127
00:05:29,320 --> 00:05:33,310
performance super aught that makes an

128
00:05:33,310 --> 00:05:36,280
interesting argument he reduced the code

129
00:05:36,280 --> 00:05:38,800
size 41% and in some notional

130
00:05:38,800 --> 00:05:40,510
measurement that's a 10% reduction in

131
00:05:40,510 --> 00:05:41,979
bugs which is not something I ever

132
00:05:41,979 --> 00:05:43,710
thought of it's kind of a neat argument

133
00:05:43,710 --> 00:05:46,630
and again you can you can shrink your

134
00:05:46,630 --> 00:05:53,050
spy flash flash footprint by a bit this

135
00:05:53,050 --> 00:05:55,570
is kinda neat but again you know I'll

136
00:05:55,570 --> 00:05:57,820
say it again the air isn't red for me or

137
00:05:57,820 --> 00:05:59,500
a little concerning because my original

138
00:05:59,500 --> 00:06:01,960
thought on this is we go from post car

139
00:06:01,960 --> 00:06:03,669
right to Linux and and good things

140
00:06:03,669 --> 00:06:06,790
happen I would like to mention if you

141
00:06:06,790 --> 00:06:10,090
get a chance look at UB MC UMC to me is

142
00:06:10,090 --> 00:06:11,650
the ultimate example of getting this

143
00:06:11,650 --> 00:06:13,510
right there's about a thousand lines of

144
00:06:13,510 --> 00:06:15,250
assembly code that turns on DRAM then

145
00:06:15,250 --> 00:06:16,930
they load Linux to ram and jump to Linux

146
00:06:16,930 --> 00:06:18,400
so if you really want to look at a

147
00:06:18,400 --> 00:06:21,160
pretty cool example of no Ram stage you

148
00:06:21,160 --> 00:06:24,580
BMC is a great place to start now

149
00:06:24,580 --> 00:06:26,729
further mention you know this idea began

150
00:06:26,729 --> 00:06:31,240
for me years ago when I was

151
00:06:31,240 --> 00:06:32,740
experimenting with having playing nine

152
00:06:32,740 --> 00:06:34,300
replaced the RAM stage and got some

153
00:06:34,300 --> 00:06:35,919
pretty reasonable results that was

154
00:06:35,919 --> 00:06:38,530
talked about at the 2015 coreboot

155
00:06:38,530 --> 00:06:40,710
meeting in Denver

156
00:06:40,710 --> 00:06:45,820
so where this idea originated at least

157
00:06:45,820 --> 00:06:48,460
in my mind in 2015 I was doing a lot of

158
00:06:48,460 --> 00:06:50,230
work on risk 5 and I kept looking at the

159
00:06:50,230 --> 00:06:51,910
Strand stage which was basically a load

160
00:06:51,910 --> 00:06:53,890
the next you know load the payload Ram

161
00:06:53,890 --> 00:06:56,020
stage and thought well you know why do I

162
00:06:56,020 --> 00:06:57,940
even need that then and so I did do some

163
00:06:57,940 --> 00:07:00,550
experiments and I did determine that

164
00:07:00,550 --> 00:07:02,110
there were cases where I did not really

165
00:07:02,110 --> 00:07:05,080
need the RAM stage talked to Patrick

166
00:07:05,080 --> 00:07:06,760
Georgie about this and he kind of had a

167
00:07:06,760 --> 00:07:08,620
neat idea which is if we could we could

168
00:07:08,620 --> 00:07:10,180
get more flexibility and how the RAM

169
00:07:10,180 --> 00:07:13,120
stage is set up simply by making it an

170
00:07:13,120 --> 00:07:15,220
optional where appropriate and again

171
00:07:15,220 --> 00:07:17,740
I'll go back to the earlier slide maybe

172
00:07:17,740 --> 00:07:19,090
it's not always appropriate to remove

173
00:07:19,090 --> 00:07:20,980
the RAM stage but maybe when we want to

174
00:07:20,980 --> 00:07:24,070
have the option to do so and a more

175
00:07:24,070 --> 00:07:25,330
interesting idea what you're actually

176
00:07:25,330 --> 00:07:26,740
gonna see realized in this limb

177
00:07:26,740 --> 00:07:29,740
bootloader componentized Ram stage so we

178
00:07:29,740 --> 00:07:31,840
make the RAM stage a payload we make

179
00:07:31,840 --> 00:07:33,490
that payload a lot more configurable it

180
00:07:33,490 --> 00:07:35,200
is today with components you can add or

181
00:07:35,200 --> 00:07:39,430
remove and you know it during the 3 n

182
00:07:39,430 --> 00:07:41,320
Deb talked that po2 did yesterday which

183
00:07:41,320 --> 00:07:42,370
is an excellent talk about

184
00:07:42,370 --> 00:07:45,070
virtualization support in in coreboot

185
00:07:45,070 --> 00:07:47,440
they had a little bit of a tussle there

186
00:07:47,440 --> 00:07:48,670
because they kind of wanted to add

187
00:07:48,670 --> 00:07:50,110
things to the RAM stage but that's a

188
00:07:50,110 --> 00:07:51,310
headache because I mean you had things

189
00:07:51,310 --> 00:07:52,810
to RAM stage you more or less have to

190
00:07:52,810 --> 00:07:54,340
upstream them to coreboot and it didn't

191
00:07:54,340 --> 00:07:56,410
seem really appropriate for some of

192
00:07:56,410 --> 00:07:57,760
those components to be upstream to

193
00:07:57,760 --> 00:08:00,280
coreboot so if we had the idea of a Ram

194
00:08:00,280 --> 00:08:02,080
payload where some pieces came from

195
00:08:02,080 --> 00:08:04,330
coreboot proper and some pieces came

196
00:08:04,330 --> 00:08:06,340
from my special thing that might be a

197
00:08:06,340 --> 00:08:07,630
lot more powerful than what we have

198
00:08:07,630 --> 00:08:12,640
today in coreboot and i so that that's

199
00:08:12,640 --> 00:08:14,290
another thought I know for a fact

200
00:08:14,290 --> 00:08:15,880
because we've done it that Linux boot

201
00:08:15,880 --> 00:08:17,170
would be a little better if we could

202
00:08:17,170 --> 00:08:19,030
basically ditch most of the RAM stage

203
00:08:19,030 --> 00:08:21,520
altogether any areas in red I pointed

204
00:08:21,520 --> 00:08:23,290
out we have experimented with removing

205
00:08:23,290 --> 00:08:25,240
them one mechanism is to actually

206
00:08:25,240 --> 00:08:26,920
include the active generation in a Linux

207
00:08:26,920 --> 00:08:28,540
and it Ram if that's not in core boot

208
00:08:28,540 --> 00:08:30,580
and that's actually a fairly practical

209
00:08:30,580 --> 00:08:32,740
thing to do Trammell Hudson demonstrated

210
00:08:32,740 --> 00:08:37,710
it on a number of server platforms so

211
00:08:37,710 --> 00:08:40,179
kind of the discussion as you all know

212
00:08:40,179 --> 00:08:43,630
got a tad heated on the review sites and

213
00:08:43,630 --> 00:08:45,850
the mailing list because I feel like

214
00:08:45,850 --> 00:08:48,250
maybe to some extent there was a little

215
00:08:48,250 --> 00:08:51,970
bit of hole in the communication PCI

216
00:08:51,970 --> 00:08:54,060
support should you remove PCI

217
00:08:54,060 --> 00:08:57,390
support you know should you remove the

218
00:08:57,390 --> 00:08:59,550
RAM station and add PCI support into

219
00:08:59,550 --> 00:09:01,710
post car that to me doesn't make a ton

220
00:09:01,710 --> 00:09:03,900
of sense right it's not really about

221
00:09:03,900 --> 00:09:05,460
moving the deck chairs around it's sort

222
00:09:05,460 --> 00:09:07,560
of like saying I can move the RAM stage

223
00:09:07,560 --> 00:09:10,260
because my payload does everything that

224
00:09:10,260 --> 00:09:11,820
the RAM stage is doing and in a case of

225
00:09:11,820 --> 00:09:13,529
Linux that's true Linux can configure a

226
00:09:13,529 --> 00:09:15,930
PCI bus nowadays where 20 years ago it

227
00:09:15,930 --> 00:09:19,230
could not but if we need a bunch of

228
00:09:19,230 --> 00:09:20,490
things for depth charge it might make

229
00:09:20,490 --> 00:09:22,320
sense just to keep the RAM stage and not

230
00:09:22,320 --> 00:09:24,089
do all this but maybe we should make a

231
00:09:24,089 --> 00:09:25,860
component size maybe that's the right

232
00:09:25,860 --> 00:09:28,260
model if you if it sounds like I'm

233
00:09:28,260 --> 00:09:30,300
asking more questions about how coreboot

234
00:09:30,300 --> 00:09:31,800
should do this then giving you answers

235
00:09:31,800 --> 00:09:33,810
that's what I'm trying to do here right

236
00:09:33,810 --> 00:09:35,670
I'm trying to spur a little discussion

237
00:09:35,670 --> 00:09:38,190
and thought about where where should we

238
00:09:38,190 --> 00:09:39,720
be heading with the RAM stage now

239
00:09:39,720 --> 00:09:43,740
Patrick Georgie put up a ramp a load CL

240
00:09:43,740 --> 00:09:46,650
for discussion in just a document later

241
00:09:46,650 --> 00:09:48,240
abandon it I'm probably going to revive

242
00:09:48,240 --> 00:09:50,370
it and and try and resume the discussion

243
00:09:50,370 --> 00:09:52,620
again and hopefully we can come to some

244
00:09:52,620 --> 00:09:55,290
thoughts on that one of the things that

245
00:09:55,290 --> 00:09:57,120
tends to come up a lot is s3 support

246
00:09:57,120 --> 00:09:59,339
critical for a mobile except surface

247
00:09:59,339 --> 00:10:03,060
doesn't use s3 at all so s3 isn't really

248
00:10:03,060 --> 00:10:04,830
an issue for surface at all they use

249
00:10:04,830 --> 00:10:06,660
something called modern standby they've

250
00:10:06,660 --> 00:10:08,430
modified all the drivers so that they do

251
00:10:08,430 --> 00:10:10,980
the right things for power maybe we

252
00:10:10,980 --> 00:10:12,300
should be looking at things like that

253
00:10:12,300 --> 00:10:14,700
instead of sort of clinging to s3 and

254
00:10:14,700 --> 00:10:17,190
other things like SMM service don't care

255
00:10:17,190 --> 00:10:19,680
about this stuff right so I mean I've

256
00:10:19,680 --> 00:10:21,000
never talked to anyone who said I really

257
00:10:21,000 --> 00:10:23,640
care about this in my server so I'm

258
00:10:23,640 --> 00:10:26,010
happy to shed some of the things the

259
00:10:26,010 --> 00:10:28,140
rain stage does today on a server and

260
00:10:28,140 --> 00:10:30,240
then Shane reminded me that IOT doesn't

261
00:10:30,240 --> 00:10:31,800
need any of this either you turn on the

262
00:10:31,800 --> 00:10:33,390
IOT it runs hot the whole time because

263
00:10:33,390 --> 00:10:35,040
it's doing stuff like the sonar in your

264
00:10:35,040 --> 00:10:37,020
nuclear sub for those who have a nuclear

265
00:10:37,020 --> 00:10:41,339
sub so you know not really an issue what

266
00:10:41,339 --> 00:10:44,700
we've decided to do until we can better

267
00:10:44,700 --> 00:10:47,190
refine what we think ought to happen in

268
00:10:47,190 --> 00:10:49,140
coreboot we're gonna take a little pause

269
00:10:49,140 --> 00:10:51,540
on this coreboot work that that I

270
00:10:51,540 --> 00:10:53,940
described here I'm gonna try and revive

271
00:10:53,940 --> 00:10:57,300
the discussion in a document and and and

272
00:10:57,300 --> 00:10:58,350
we're gonna see about bringing people

273
00:10:58,350 --> 00:11:00,600
into this whole discussion of what do we

274
00:11:00,600 --> 00:11:04,380
do with the RAM stage finally I did talk

275
00:11:04,380 --> 00:11:06,839
to one person about hardware and I

276
00:11:06,839 --> 00:11:07,649
didn't remember the

277
00:11:07,649 --> 00:11:09,029
recession well enough to put it down

278
00:11:09,029 --> 00:11:10,559
here but basically there was a case

279
00:11:10,559 --> 00:11:13,050
where the RAM stage configured PCI and

280
00:11:13,050 --> 00:11:14,999
actually caused trouble for the payload

281
00:11:14,999 --> 00:11:17,160
and the payloads access to the PCI and

282
00:11:17,160 --> 00:11:20,040
configuration of it so there it isn't

283
00:11:20,040 --> 00:11:22,949
just about time and and space it can

284
00:11:22,949 --> 00:11:24,329
actually be about correctness

285
00:11:24,329 --> 00:11:26,850
so the RAM stage can do things that

286
00:11:26,850 --> 00:11:28,199
cause correctness problems for the

287
00:11:28,199 --> 00:11:30,809
payload so I think that you know that

288
00:11:30,809 --> 00:11:32,339
the time is coming when we've really got

289
00:11:32,339 --> 00:11:33,869
to think about the configuration and

290
00:11:33,869 --> 00:11:35,819
what we where we go with the Rams stage

291
00:11:35,819 --> 00:11:37,529
now that we have more capable payloads

292
00:11:37,529 --> 00:11:41,279
than we used to and we might not only do

293
00:11:41,279 --> 00:11:43,110
redundant work and take up space and

294
00:11:43,110 --> 00:11:44,759
flash that we don't need to we might

295
00:11:44,759 --> 00:11:47,220
actually conflict in things we do in the

296
00:11:47,220 --> 00:11:48,720
RAM stage with things we want to do in

297
00:11:48,720 --> 00:11:52,589
the payload this actually led to one

298
00:11:52,589 --> 00:11:54,300
thing in orbit

299
00:11:54,300 --> 00:11:56,730
we had been calling it the RAM payload

300
00:11:56,730 --> 00:11:58,259
in orbit we decided to change the name

301
00:11:58,259 --> 00:12:00,689
payloader to make it clear that that

302
00:12:00,689 --> 00:12:03,569
intermediate function after the RAM is

303
00:12:03,569 --> 00:12:06,059
set up and before the payload is just a

304
00:12:06,059 --> 00:12:07,619
thing that loads the payload and there

305
00:12:07,619 --> 00:12:09,029
might be something else that does what

306
00:12:09,029 --> 00:12:10,379
the RAM stage does today or there might

307
00:12:10,379 --> 00:12:11,790
not it might be just the Linux kernel

308
00:12:11,790 --> 00:12:13,949
certainly under s5 it's just gonna be a

309
00:12:13,949 --> 00:12:16,170
Linux kernel probably an arm it'll just

310
00:12:16,170 --> 00:12:19,079
be a Linux kernel if we ever find that

311
00:12:19,079 --> 00:12:21,269
open x86 where we can own it from you

312
00:12:21,269 --> 00:12:22,850
know the ground up the way we used to

313
00:12:22,850 --> 00:12:26,300
probably would just be a Linux kernel

314
00:12:26,300 --> 00:12:30,209
and so that's it for the coreboot part

315
00:12:30,209 --> 00:12:32,120
of this talk these were really

316
00:12:32,120 --> 00:12:34,230
describing who brought this work and in

317
00:12:34,230 --> 00:12:36,809
discussions we've had in the reviews and

318
00:12:36,809 --> 00:12:39,839
and mr. Botha and I and that's kind of

319
00:12:39,839 --> 00:12:42,059
all and now I'm gonna hand off to shank

320
00:12:42,059 --> 00:12:43,439
who's gonna talk about the slim

321
00:12:43,439 --> 00:12:48,059
bootloader work thank you ok thanks Ron

322
00:12:48,059 --> 00:12:49,800
so now I'm going to talk about the Linux

323
00:12:49,800 --> 00:12:52,670
boot POC on see what we have done so far

324
00:12:52,670 --> 00:12:55,740
so as mentioned by Ron yesterday

325
00:12:55,740 --> 00:12:58,259
so the key essence here you can see is

326
00:12:58,259 --> 00:13:00,990
let me next to it I think we're on the

327
00:13:00,990 --> 00:13:04,589
same page where that the firmware has to

328
00:13:04,589 --> 00:13:06,569
done very minimal work and a handoff the

329
00:13:06,569 --> 00:13:07,470
works

330
00:13:07,470 --> 00:13:09,329
the majority work to the kernel itself

331
00:13:09,329 --> 00:13:13,049
so that's why you can see on the photon

332
00:13:13,049 --> 00:13:15,149
right hand side that's all

333
00:13:15,149 --> 00:13:18,420
similar to EFI compo gram stage here you

334
00:13:18,420 --> 00:13:21,130
put SPL or the reduced h2

335
00:13:21,130 --> 00:13:24,250
h1b which is a simple odor which is what

336
00:13:24,250 --> 00:13:25,660
we're gonna do so all this tree will

337
00:13:25,660 --> 00:13:28,510
boot dilated Linux kernel so these are a

338
00:13:28,510 --> 00:13:30,550
concept where we kind of bring today

339
00:13:30,550 --> 00:13:33,010
and Linux boot is going to it has been

340
00:13:33,010 --> 00:13:37,510
deployed today and is going to be a lot

341
00:13:37,510 --> 00:13:39,820
of servers so that's why scanning is

342
00:13:39,820 --> 00:13:43,840
gaining momentum now so okay let me go

343
00:13:43,840 --> 00:13:45,910
through the architecture design so you

344
00:13:45,910 --> 00:13:48,490
can see the first one is with is a boost

345
00:13:48,490 --> 00:13:51,310
stage to Linux OS is the original design

346
00:13:51,310 --> 00:13:55,240
without that reacts reacts put so I'm

347
00:13:55,240 --> 00:13:57,340
sure those who are from cob with you can

348
00:13:57,340 --> 00:13:59,560
familiar with this is a streamlined

349
00:13:59,560 --> 00:14:03,640
process stage 1a 1b stage 2 and then the

350
00:14:03,640 --> 00:14:05,440
Oso or the year have paid off and then

351
00:14:05,440 --> 00:14:08,830
put to the Linux OS but you can see when

352
00:14:08,830 --> 00:14:10,990
you go to the we've called will combine

353
00:14:10,990 --> 00:14:12,820
with the Linux boot itself so you can

354
00:14:12,820 --> 00:14:14,770
die early from a stage to jump to the

355
00:14:14,770 --> 00:14:19,870
beam expert and to the videos OS and so

356
00:14:19,870 --> 00:14:22,810
what's new over here things that you can

357
00:14:22,810 --> 00:14:25,300
see that we have removes a meet of

358
00:14:25,300 --> 00:14:28,120
people to load OS where we can use a

359
00:14:28,120 --> 00:14:31,050
lean expert to done to do all the kernel

360
00:14:31,050 --> 00:14:34,380
initialization and also the stage 2 is

361
00:14:34,380 --> 00:14:38,020
simplified as a - we could not exchange

362
00:14:38,020 --> 00:14:39,850
so let me go to the next side see how

363
00:14:39,850 --> 00:14:43,360
it's a simplified okay so you can see

364
00:14:43,360 --> 00:14:45,460
over here these are all the these are

365
00:14:45,460 --> 00:14:47,170
the normal boot so that we have today

366
00:14:47,170 --> 00:14:48,580
I'm not going to go through what

367
00:14:48,580 --> 00:14:53,320
everything now so these are standard

368
00:14:53,320 --> 00:14:55,960
right so let's remove this so with Linux

369
00:14:55,960 --> 00:14:59,920
boot we are able to remove a few things

370
00:14:59,920 --> 00:15:03,790
pyro to this there's no mode you can see

371
00:15:03,790 --> 00:15:06,640
the more people you can jump directly to

372
00:15:06,640 --> 00:15:09,280
the kernel and three point from the last

373
00:15:09,280 --> 00:15:12,430
one okay so that's all right so that

374
00:15:12,430 --> 00:15:15,010
that's not nothing much to see you here

375
00:15:15,010 --> 00:15:18,640
but wait a second how about we take up

376
00:15:18,640 --> 00:15:23,200
more even more stuff from here well we

377
00:15:23,200 --> 00:15:26,020
can also take out certain paths a CPI

378
00:15:26,020 --> 00:15:28,630
tables and then move it to cleaner

379
00:15:28,630 --> 00:15:30,270
itself

380
00:15:30,270 --> 00:15:36,180
ah MP need we can also even may take our

381
00:15:36,180 --> 00:15:38,580
MP knee and let the current do that in

382
00:15:38,580 --> 00:15:41,010
penis so these are even safe much more

383
00:15:41,010 --> 00:15:44,279
time so the two key components here as

384
00:15:44,279 --> 00:15:47,190
we can see is that we all this thing has

385
00:15:47,190 --> 00:15:49,680
been removed we can obviously we can see

386
00:15:49,680 --> 00:15:53,459
faster with time observe for the qmu i

387
00:15:53,459 --> 00:15:57,380
think we look around 300 milliseconds

388
00:15:57,380 --> 00:15:59,970
the boot times safe from the stage to

389
00:15:59,970 --> 00:16:03,350
itself and then no more redundancy when

390
00:16:03,350 --> 00:16:05,970
what's the point of doing redundancy to

391
00:16:05,970 --> 00:16:08,339
do it Pisa in immersion in the state

392
00:16:08,339 --> 00:16:10,350
shoe and I do it again in a corner that

393
00:16:10,350 --> 00:16:12,149
doesn't make sense at all so that's why

394
00:16:12,149 --> 00:16:14,670
the goal of here is to remove the

395
00:16:14,670 --> 00:16:17,430
redundancy and a boot time so there's a

396
00:16:17,430 --> 00:16:19,680
two key point that we achieve so far

397
00:16:19,680 --> 00:16:23,430
so okay let's go to the next one the

398
00:16:23,430 --> 00:16:25,620
actual so the beauty that's what pay

399
00:16:25,620 --> 00:16:26,820
dough is quite straightforward

400
00:16:26,820 --> 00:16:30,420
thanks for wrong you just keep clone go

401
00:16:30,420 --> 00:16:32,580
to the folder and make stuff get stuff

402
00:16:32,580 --> 00:16:35,010
and then that's all you can do yourself

403
00:16:35,010 --> 00:16:39,180
or you can get further away from me okay

404
00:16:39,180 --> 00:16:42,089
so how do view it for the how to build

405
00:16:42,089 --> 00:16:45,630
the single load my colleague later will

406
00:16:45,630 --> 00:16:47,670
tell you how to do exactly porting but

407
00:16:47,670 --> 00:16:50,010
this is a more simplified version how do

408
00:16:50,010 --> 00:16:52,709
we so you just keep good for the same no

409
00:16:52,709 --> 00:16:56,279
the github and you just need to how

410
00:16:56,279 --> 00:16:58,380
beauty you just need a few in these

411
00:16:58,380 --> 00:17:01,380
parameters the first one the CMD line is

412
00:17:01,380 --> 00:17:03,000
a dummy found you don't don't care about

413
00:17:03,000 --> 00:17:05,550
it but the one highlighted in red color

414
00:17:05,550 --> 00:17:07,800
these two are the one you need to change

415
00:17:07,800 --> 00:17:11,849
the first one is Linux would image file

416
00:17:11,849 --> 00:17:14,250
for me you have to pull it and then the

417
00:17:14,250 --> 00:17:16,800
second one is a common line taxi where

418
00:17:16,800 --> 00:17:19,170
the comment you need to pass when you go

419
00:17:19,170 --> 00:17:21,689
in the kernel okay so these two you have

420
00:17:21,689 --> 00:17:23,400
to store inside the payload package

421
00:17:23,400 --> 00:17:24,089
slash

422
00:17:24,089 --> 00:17:28,140
paid all pins all right okay

423
00:17:28,140 --> 00:17:30,450
so these are few parameters where you

424
00:17:30,450 --> 00:17:34,580
can change pyro to using needles who is

425
00:17:34,580 --> 00:17:38,100
this Eva from Cabo you know copy you can

426
00:17:38,100 --> 00:17:40,260
change okay confit right so this has

427
00:17:40,260 --> 00:17:43,910
kind of similar so inside

428
00:17:43,910 --> 00:17:47,100
load of Python file there's a few

429
00:17:47,100 --> 00:17:49,860
parameters you need to change either set

430
00:17:49,860 --> 00:17:52,200
anybody ensuite goes of one mission able

431
00:17:52,200 --> 00:17:55,170
to be a school support and the second

432
00:17:55,170 --> 00:17:59,340
one the other reserve memory sizes you

433
00:17:59,340 --> 00:18:01,500
need to increase a recent memory for

434
00:18:01,500 --> 00:18:03,870
Linux kernel loading in case that your

435
00:18:03,870 --> 00:18:06,600
rhiness Crennel is in its bigger size

436
00:18:06,600 --> 00:18:10,200
and then as I mentioned just so you can

437
00:18:10,200 --> 00:18:12,600
disable the PC in operation and also

438
00:18:12,600 --> 00:18:15,929
disable the MP need but just already

439
00:18:15,929 --> 00:18:18,179
study it goes to zero you can try out so

440
00:18:18,179 --> 00:18:20,040
it's pretty straightforward it's already

441
00:18:20,040 --> 00:18:23,730
there and also from that site I hide it

442
00:18:23,730 --> 00:18:25,770
in red because if a qemu you have to go

443
00:18:25,770 --> 00:18:29,820
to key mu package folder so there's a to

444
00:18:29,820 --> 00:18:31,950
one the first one is a payload size

445
00:18:31,950 --> 00:18:34,020
itself is you change it according to

446
00:18:34,020 --> 00:18:40,049
your kernel size and a second one is you

447
00:18:40,049 --> 00:18:41,850
have to add a pedo ID to support the

448
00:18:41,850 --> 00:18:44,669
expert so that's all quite

449
00:18:44,669 --> 00:18:46,919
straightforward right so let's go to the

450
00:18:46,919 --> 00:18:50,990
demo okay

451
00:19:13,289 --> 00:19:20,320
yeah okay that's it so these are time oh

452
00:19:20,320 --> 00:19:22,659
I want to show you it's pretty fast but

453
00:19:22,659 --> 00:19:25,029
it's not fully optimized yet I haven't

454
00:19:25,029 --> 00:19:27,389
optimized for that because I've done it

455
00:19:27,389 --> 00:19:36,639
okay sorry oh okay yeah clearly I mean

456
00:19:36,639 --> 00:19:38,559
I'm actually using the up square board

457
00:19:38,559 --> 00:19:40,809
and showed by Michael it result is an

458
00:19:40,809 --> 00:19:42,970
obscure pod which is a committee maker

459
00:19:42,970 --> 00:19:46,720
spot where I using Intel a poly silicon

460
00:19:46,720 --> 00:19:49,960
itself and you yeah you can just use it

461
00:19:49,960 --> 00:19:51,850
and then hack it the way any way you

462
00:19:51,850 --> 00:19:55,539
want so this how how we try it from

463
00:19:55,539 --> 00:19:57,130
there you can see pretty fast but it's

464
00:19:57,130 --> 00:19:59,279
not yet optimized you can further

465
00:19:59,279 --> 00:20:01,720
optimize further to make it put even

466
00:20:01,720 --> 00:20:14,159
more faster alright so that's it

467
00:20:14,159 --> 00:20:17,649
so here it's a summary so as we had

468
00:20:17,649 --> 00:20:20,309
showcase the same bootloader has finally

469
00:20:20,309 --> 00:20:22,960
officially support Linux boot itself and

470
00:20:22,960 --> 00:20:26,529
it's a because so it actually showed

471
00:20:26,529 --> 00:20:28,149
that simple it's a flexible boot

472
00:20:28,149 --> 00:20:31,510
solution but you can change it quite

473
00:20:31,510 --> 00:20:33,700
easy to optimize it accordingly

474
00:20:33,700 --> 00:20:36,730
so the second thing as Rob mentioned it

475
00:20:36,730 --> 00:20:39,690
Linux is the mainstream it's going to be

476
00:20:39,690 --> 00:20:42,130
it's going to be deployed in more and

477
00:20:42,130 --> 00:20:44,230
more servers itself especially so that's

478
00:20:44,230 --> 00:20:47,019
why we are making this effort to embrace

479
00:20:47,019 --> 00:20:49,980
open source or industry requirements and

480
00:20:49,980 --> 00:20:52,870
alas me a trial on a symbol over

481
00:20:52,870 --> 00:20:55,120
configured stage to where you can also

482
00:20:55,120 --> 00:20:56,519
try yourself

483
00:20:56,519 --> 00:20:59,200
so yeah pretty much

484
00:20:59,200 --> 00:21:02,230
thank you Thank You senator Veronica Paz

485
00:21:02,230 --> 00:21:08,400
[Applause]

486
00:21:09,080 --> 00:21:11,399
we have a lot of time for questions a

487
00:21:11,399 --> 00:21:18,750
lot like yeah we I won't to where you

488
00:21:18,750 --> 00:21:20,100
can all go out and get some more food

489
00:21:20,100 --> 00:21:22,440
let's do an equation that you saw for ik

490
00:21:22,440 --> 00:21:27,600
X but yeah right yeah I did when I

491
00:21:27,600 --> 00:21:30,059
mentioned the the the shell prompt there

492
00:21:30,059 --> 00:21:32,460
that came up was from a shell written

493
00:21:32,460 --> 00:21:34,549
and go because that was the you route

494
00:21:34,549 --> 00:21:35,759
userland

495
00:21:35,759 --> 00:21:38,519
in Linux so all that all the code there

496
00:21:38,519 --> 00:21:41,370
is code written and go yesterday that

497
00:21:41,370 --> 00:21:43,500
was I mentioned aboard the next I was

498
00:21:43,500 --> 00:21:47,159
not happy if the PC emulation was not

499
00:21:47,159 --> 00:21:49,710
done by the BIOS that was here in 1999

500
00:21:49,710 --> 00:21:52,379
that was true okay so that was kernel

501
00:21:52,379 --> 00:21:55,019
believe it or not I believe that kernel

502
00:21:55,019 --> 00:21:59,580
was to 0.36 some so it's no such diction

503
00:21:59,580 --> 00:22:00,990
these days there she is

504
00:22:00,990 --> 00:22:05,429
so the restriction is people are always

505
00:22:05,429 --> 00:22:07,110
happy to produce code that depends on

506
00:22:07,110 --> 00:22:09,809
the BIOS having been run and on the

507
00:22:09,809 --> 00:22:12,600
winterfell knows from facebook we did

508
00:22:12,600 --> 00:22:15,570
about two years ago find an a HCI bug

509
00:22:15,570 --> 00:22:18,360
because we you know we weren't doing a

510
00:22:18,360 --> 00:22:21,659
thing and jean marie verdun pushed a

511
00:22:21,659 --> 00:22:24,539
patch upstream to fix that so the this

512
00:22:24,539 --> 00:22:27,299
is why and i don't think i brought this

513
00:22:27,299 --> 00:22:30,379
out as well as I should have yesterday I

514
00:22:30,379 --> 00:22:32,850
was saying it'd be nice if if we could

515
00:22:32,850 --> 00:22:34,679
find a way to make it a policy for Linux

516
00:22:34,679 --> 00:22:37,379
to to be booted on these machines

517
00:22:37,379 --> 00:22:39,840
without all these Dixie's having been

518
00:22:39,840 --> 00:22:42,210
run because you you do it's the only

519
00:22:42,210 --> 00:22:44,610
real way to find a buggy driver but it

520
00:22:44,610 --> 00:22:46,649
but if we that was in two and a half

521
00:22:46,649 --> 00:22:48,720
years that's actually the only bug I can

522
00:22:48,720 --> 00:22:50,639
remember hitting with with that kind of

523
00:22:50,639 --> 00:22:53,309
problem so do I understand right if the

524
00:22:53,309 --> 00:22:55,500
Linux pay lord will be able to handle

525
00:22:55,500 --> 00:22:57,179
the PC enumeration before transferring

526
00:22:57,179 --> 00:23:00,059
to the actual Linux kernel yeah yeah

527
00:23:00,059 --> 00:23:01,019
you've been doing that for a couple

528
00:23:01,019 --> 00:23:02,370
years now yeah

529
00:23:02,370 --> 00:23:06,320
sorry I wasn't a little more clear

530
00:23:09,179 --> 00:23:12,490
hi wrong I think nice booty is really a

531
00:23:12,490 --> 00:23:15,369
great idea so here since we are trying

532
00:23:15,369 --> 00:23:17,799
to do mutton tin Colonel right so best

533
00:23:17,799 --> 00:23:19,779
day we have to join I'm between a

534
00:23:19,779 --> 00:23:22,210
firmware and it colonel this should have

535
00:23:22,210 --> 00:23:24,909
a boundary right now since we are moving

536
00:23:24,909 --> 00:23:27,519
more time from firmware traditional

537
00:23:27,519 --> 00:23:31,480
outside to a colonel and it might make

538
00:23:31,480 --> 00:23:33,309
colonel a little bit boss with the

539
00:23:33,309 --> 00:23:35,679
figure if we do more time so how do you

540
00:23:35,679 --> 00:23:39,070
see how to keep the balance between

541
00:23:39,070 --> 00:23:41,769
these two what basically saying if

542
00:23:41,769 --> 00:23:44,460
boards will fig we leave it out and then

543
00:23:44,460 --> 00:23:46,840
do not necessarily do it in colonel so

544
00:23:46,840 --> 00:23:48,279
basically they have some imbalance you

545
00:23:48,279 --> 00:23:50,950
have to consider right so yeah we we've

546
00:23:50,950 --> 00:23:52,600
been doing that a lot and and actually

547
00:23:52,600 --> 00:23:54,519
one of the nests your board specific

548
00:23:54,519 --> 00:23:57,429
things has been GPI is now you how do

549
00:23:57,429 --> 00:23:59,470
you get that stuff to communicate it to

550
00:23:59,470 --> 00:24:00,820
the colonel about things like GPIO

551
00:24:00,820 --> 00:24:02,889
sandor boot we're using a platen device

552
00:24:02,889 --> 00:24:06,460
tree um I actually was watching a slim

553
00:24:06,460 --> 00:24:08,919
boot talk and I was screaming inside my

554
00:24:08,919 --> 00:24:10,269
head flattened device tree flattened

555
00:24:10,269 --> 00:24:13,840
device tree and I kind of wish that that

556
00:24:13,840 --> 00:24:16,450
you know you all would be looking at

557
00:24:16,450 --> 00:24:17,860
that because it solved the problem now

558
00:24:17,860 --> 00:24:20,110
for a long time and why not just use it

559
00:24:20,110 --> 00:24:24,039
and other than that I have no idea I

560
00:24:24,039 --> 00:24:25,389
don't have a general answer to your

561
00:24:25,389 --> 00:24:27,720
question it's a really hard problem okay

562
00:24:27,720 --> 00:24:31,629
okay that's good to know that trend I

563
00:24:31,629 --> 00:24:36,299
think yeah yeah it's it's it's actually

564
00:24:36,299 --> 00:24:39,249
the funny thing is it's it's it's it's a

565
00:24:39,249 --> 00:24:41,590
it's an area we went over and a lot of

566
00:24:41,590 --> 00:24:45,220
depth 20 years ago and that's the origin

567
00:24:45,220 --> 00:24:47,019
of the coreboot tables actually right we

568
00:24:47,019 --> 00:24:48,549
were communicating information from

569
00:24:48,549 --> 00:24:51,759
coreboot to the curl and a lot of ways

570
00:24:51,759 --> 00:24:55,240
we we lost 20 years while you know we

571
00:24:55,240 --> 00:24:58,720
went into this proprietary jog we've

572
00:24:58,720 --> 00:25:00,759
been on and now we're back trying to

573
00:25:00,759 --> 00:25:02,320
solve the problem again and I'm hoping

574
00:25:02,320 --> 00:25:06,850
this time around we stay on the open

575
00:25:06,850 --> 00:25:09,909
pass and get this thing stopped right so

576
00:25:09,909 --> 00:25:11,259
that's my thank you Ron

577
00:25:11,259 --> 00:25:13,499
yeah

578
00:25:16,170 --> 00:25:19,320
so I noticed in the Abu talk yesterday

579
00:25:19,320 --> 00:25:20,910
it looks like you have the separate

580
00:25:20,910 --> 00:25:22,860
stage to load the payload after the

581
00:25:22,860 --> 00:25:25,200
rabbinate stage yeah hey Laura you know

582
00:25:25,200 --> 00:25:27,330
in your coreboot work I think you're

583
00:25:27,330 --> 00:25:29,310
trying to load the payload directly from

584
00:25:29,310 --> 00:25:31,710
the wrong stage so yeah it's show the

585
00:25:31,710 --> 00:25:33,480
two approaches is the right one I don't

586
00:25:33,480 --> 00:25:38,670
know if this is still all up in the air

587
00:25:38,670 --> 00:25:42,270
and I think the main reason we named it

588
00:25:42,270 --> 00:25:44,610
payload or was to avoid any implication

589
00:25:44,610 --> 00:25:45,990
that we were gonna recreate the RAM

590
00:25:45,990 --> 00:25:51,600
stage I think that the right mode is if

591
00:25:51,600 --> 00:25:53,850
if you can get by without the RAM stage

592
00:25:53,850 --> 00:25:55,860
do so because you save time and space

593
00:25:55,860 --> 00:25:59,310
but at the same time that was a

594
00:25:59,310 --> 00:26:02,040
conjecture from last fall and I think

595
00:26:02,040 --> 00:26:03,390
that you look at the work with depth

596
00:26:03,390 --> 00:26:05,220
charge there's a clear need for a ramp

597
00:26:05,220 --> 00:26:08,490
stage there and so or there's clear need

598
00:26:08,490 --> 00:26:12,030
for something right now thing that we

599
00:26:12,030 --> 00:26:13,500
didn't mention yesterday about or food

600
00:26:13,500 --> 00:26:15,690
is the the format for all the things is

601
00:26:15,690 --> 00:26:17,400
going to be self we're not we're you

602
00:26:17,400 --> 00:26:18,990
know we were essentially dropping the

603
00:26:18,990 --> 00:26:21,780
stage format entirely because one way to

604
00:26:21,780 --> 00:26:23,850
look at it a paler as a stage if a

605
00:26:23,850 --> 00:26:26,460
payload has one if a self thing has one

606
00:26:26,460 --> 00:26:28,050
segment and it's already at location and

607
00:26:28,050 --> 00:26:29,250
it's that it's kind of implicitly a

608
00:26:29,250 --> 00:26:31,020
stage right so in some sense we never

609
00:26:31,020 --> 00:26:33,660
needed that that distinction of stage

610
00:26:33,660 --> 00:26:37,770
and payload so from my point of view

611
00:26:37,770 --> 00:26:38,910
there's there's actually a lot of

612
00:26:38,910 --> 00:26:40,980
unknowns at the moment we're just trying

613
00:26:40,980 --> 00:26:42,480
to rethink a little what we've done

614
00:26:42,480 --> 00:26:45,390
because Linux is just so much more

615
00:26:45,390 --> 00:26:47,460
capable than it was and the original

616
00:26:47,460 --> 00:26:49,350
motivations have changed so we need I

617
00:26:49,350 --> 00:26:50,910
just wanted to try and think about you

618
00:26:50,910 --> 00:26:53,390
know what should we be doing here and

619
00:26:53,390 --> 00:26:55,620
learning about surface just this morning

620
00:26:55,620 --> 00:26:57,390
was a surprise learning that they've now

621
00:26:57,390 --> 00:27:00,500
haven't used s3 for three or four years

622
00:27:00,500 --> 00:27:03,780
so it this is this is really a lot of

623
00:27:03,780 --> 00:27:04,950
open questions it's a really good

624
00:27:04,950 --> 00:27:08,000
question I don't know the answer

625
00:27:11,010 --> 00:27:13,800
I don't series and Linux couldn't be

626
00:27:13,800 --> 00:27:16,080
fixed but I don't think it will be for

627
00:27:16,080 --> 00:27:17,580
another 20 years but I don't see a

628
00:27:17,580 --> 00:27:19,500
reason it couldn't be so ya know it's

629
00:27:19,500 --> 00:27:21,660
good point they get they get they get to

630
00:27:21,660 --> 00:27:23,250
fix all their drivers and they've done a

631
00:27:23,250 --> 00:27:24,510
lot of really neat work fixing our

632
00:27:24,510 --> 00:27:26,010
drivers and they're using the

633
00:27:26,010 --> 00:27:27,720
instruction for you know whatever it's

634
00:27:27,720 --> 00:27:30,209
called something modern standby

635
00:27:30,209 --> 00:27:32,099
I love the word modern so a modern

636
00:27:32,099 --> 00:27:33,449
standby it comes with all this great

637
00:27:33,449 --> 00:27:35,099
stuff but you got to rewrite or well now

638
00:27:35,099 --> 00:27:37,199
you got to fix all your drivers that's a

639
00:27:37,199 --> 00:27:38,909
big deal but they were able to do it and

640
00:27:38,909 --> 00:27:41,729
will Linux catch up don't know so

641
00:27:41,729 --> 00:27:44,039
interesting question but so for the

642
00:27:44,039 --> 00:27:46,049
coreboot stuff would it maybe be easier

643
00:27:46,049 --> 00:27:49,409
to just configure the a spi part or the

644
00:27:49,409 --> 00:27:51,749
PCI init part out of the RAM stage

645
00:27:51,749 --> 00:27:52,979
rather than dropping it completely

646
00:27:52,979 --> 00:27:55,169
because yeah a lot of issues with just

647
00:27:55,169 --> 00:27:56,819
pulling the payload loading into the

648
00:27:56,819 --> 00:27:59,279
website you're right and and yeah that

649
00:27:59,279 --> 00:28:01,259
might be the right way to go but I think

650
00:28:01,259 --> 00:28:04,469
this is I think I think this is more

651
00:28:04,469 --> 00:28:05,999
about having a discussion and trying

652
00:28:05,999 --> 00:28:08,039
things out so I think the the RAM

653
00:28:08,039 --> 00:28:10,649
payload here worked at Surat they did we

654
00:28:10,649 --> 00:28:14,609
learned a lot I think Patrick Georg's so

655
00:28:14,609 --> 00:28:16,139
I want to revive his CL because I kind

656
00:28:16,139 --> 00:28:17,459
of want to revive the discussion I

657
00:28:17,459 --> 00:28:19,319
learned something yesterday from the 3m

658
00:28:19,319 --> 00:28:21,119
dev guys about you know there are

659
00:28:21,119 --> 00:28:24,689
problems so I think it's a good time

660
00:28:24,689 --> 00:28:26,639
just to reopen the discussion a little

661
00:28:26,639 --> 00:28:28,409
and see what the right path for it is

662
00:28:28,409 --> 00:28:31,319
and clearly in some situations removing

663
00:28:31,319 --> 00:28:32,729
the RAM stage it's just simply not an

664
00:28:32,729 --> 00:28:36,299
option so we just need to maybe even and

665
00:28:36,299 --> 00:28:38,939
sort of lay out the space in which it is

666
00:28:38,939 --> 00:28:40,319
an option in which it isn't an option

667
00:28:40,319 --> 00:28:44,129
but you know I I think that I didn't I

668
00:28:44,129 --> 00:28:45,869
wasn't careful about a you know

669
00:28:45,869 --> 00:28:47,579
explaining that idea last fall and I

670
00:28:47,579 --> 00:28:48,899
think it's led to a lot of you know

671
00:28:48,899 --> 00:28:55,129
misunderstandings ourselves yeah

672
00:28:55,129 --> 00:29:00,029
different view do you customize the

673
00:29:00,029 --> 00:29:03,479
Linux kernel in the firmware no you

674
00:29:03,479 --> 00:29:06,089
don't okay how do you think apart a new

675
00:29:06,089 --> 00:29:06,659
bus

676
00:29:06,659 --> 00:29:12,509
I'm sorry nuke new type bus like cxl OCC

677
00:29:12,509 --> 00:29:14,999
CRX I would hope I mean a whole reason

678
00:29:14,999 --> 00:29:17,639
that that Linux bias became practical in

679
00:29:17,639 --> 00:29:20,009
1999 is we had self-describing buses you

680
00:29:20,009 --> 00:29:22,079
know PCI was a big deal right no more

681
00:29:22,079 --> 00:29:24,059
dip switches right no more of this weird

682
00:29:24,059 --> 00:29:27,989
stuff if you look in the Esso seas in

683
00:29:27,989 --> 00:29:29,369
the last couple years we've sort of

684
00:29:29,369 --> 00:29:32,159
diverged away from self-describing buses

685
00:29:32,159 --> 00:29:33,779
and in some places we're kind of going

686
00:29:33,779 --> 00:29:36,059
back to magic numbers which is I think

687
00:29:36,059 --> 00:29:38,759
not a good development so I would hope

688
00:29:38,759 --> 00:29:41,039
that any new thing like cxl we would

689
00:29:41,039 --> 00:29:43,319
continue the goodness of PCI with the

690
00:29:43,319 --> 00:29:44,460
self-described

691
00:29:44,460 --> 00:29:48,990
devices if we fail to do that we're

692
00:29:48,990 --> 00:29:53,130
creating a lot of problems and and a CPI

693
00:29:53,130 --> 00:29:55,710
table I don't see how can you remove the

694
00:29:55,710 --> 00:29:59,520
a CPI table you put in every FS we we we

695
00:29:59,520 --> 00:30:01,890
did Tramell did do that experiment and

696
00:30:01,890 --> 00:30:05,010
it when he told me what he was doing I

697
00:30:05,010 --> 00:30:11,850
thought you're nuts yeah I mean you sure

698
00:30:11,850 --> 00:30:14,910
and but if you generate with I ASL and

699
00:30:14,910 --> 00:30:16,980
then as part of your generation if s you

700
00:30:16,980 --> 00:30:19,740
drop it in a certain place it gets

701
00:30:19,740 --> 00:30:21,390
loaded earlier I've done this actually

702
00:30:21,390 --> 00:30:23,370
so it gets loaded in the early going and

703
00:30:23,370 --> 00:30:25,170
a colonel can't told that it didn't come

704
00:30:25,170 --> 00:30:28,560
from the current bios in the last point

705
00:30:28,560 --> 00:30:31,050
is why you care about a server boot

706
00:30:31,050 --> 00:30:35,310
faster a few seconds o server boot

707
00:30:35,310 --> 00:30:39,630
window twice in lifetime not true not

708
00:30:39,630 --> 00:30:44,220
true at all and in fact we have cases

709
00:30:44,220 --> 00:30:46,790
which I can't talk too much about but

710
00:30:46,790 --> 00:30:49,380
well I know I can tell you the one story

711
00:30:49,380 --> 00:30:54,120
your AT&T you have a server reboot it

712
00:30:54,120 --> 00:30:55,680
takes too long to reboot just pick a

713
00:30:55,680 --> 00:30:57,420
server takes too long to reboot guess

714
00:30:57,420 --> 00:31:00,150
what you do next you file paperwork with

715
00:31:00,150 --> 00:31:02,430
the FCC explaining why that took two

716
00:31:02,430 --> 00:31:05,040
longer a bit that is a pain you do not

717
00:31:05,040 --> 00:31:08,910
want so so to my surprise Tom and Chad

718
00:31:08,910 --> 00:31:10,740
said oh my god if you can fix my boot

719
00:31:10,740 --> 00:31:12,780
time problem you'll make me a very happy

720
00:31:12,780 --> 00:31:15,300
person the next thing you said isn't by

721
00:31:15,300 --> 00:31:16,800
the way I want everything running Linux

722
00:31:16,800 --> 00:31:18,330
boot because I'm sick of waiting for all

723
00:31:18,330 --> 00:31:21,150
my routers and other things to boot so

724
00:31:21,150 --> 00:31:23,760
ya know 20 seconds or less is great Tom

725
00:31:23,760 --> 00:31:28,110
even if h2 lights you agree to do a ram

726
00:31:28,110 --> 00:31:31,020
test right if you don't not on

727
00:31:31,020 --> 00:31:33,360
assistants I've seen yeah but I mean

728
00:31:33,360 --> 00:31:35,220
it's actually it's actually from what

729
00:31:35,220 --> 00:31:38,010
we've seen it's almost order n-squared

730
00:31:38,010 --> 00:31:40,290
and a number of Dixie's it's horrible so

731
00:31:40,290 --> 00:31:42,120
if you can take for example on this tie

732
00:31:42,120 --> 00:31:45,360
n board I were able to filter out of the

733
00:31:45,360 --> 00:31:47,940
424 Dixie's all of which run by the way

734
00:31:47,940 --> 00:31:49,200
all of which seem to depend on each

735
00:31:49,200 --> 00:31:50,610
other which means they all run at least

736
00:31:50,610 --> 00:31:53,940
twice we filled around 214 of those

737
00:31:53,940 --> 00:31:55,440
Dixie's and I didn't expect to notice

738
00:31:55,440 --> 00:31:56,760
the difference and it was noticeably

739
00:31:56,760 --> 00:31:57,750
faster

740
00:31:57,750 --> 00:31:59,310
to remove Dixie's that you didn't even

741
00:31:59,310 --> 00:32:03,450
need so no it's not just ran tests it's

742
00:32:03,450 --> 00:32:04,200
not buy anything

743
00:32:04,200 --> 00:32:07,290
customized if I customized a regular

744
00:32:07,290 --> 00:32:10,170
UEFI BIOS I can boot two window into

745
00:32:10,170 --> 00:32:13,320
sector oh great right so it's wise so

746
00:32:13,320 --> 00:32:15,150
tell me tell me well my server does take

747
00:32:15,150 --> 00:32:15,840
ten minutes

748
00:32:15,840 --> 00:32:18,750
it's a customization issue it's not the

749
00:32:18,750 --> 00:32:21,210
boot boot process issue that's what I

750
00:32:21,210 --> 00:32:24,240
think and it's not or it's not it is not

751
00:32:24,240 --> 00:32:26,520
your it's not our experience but I can't

752
00:32:26,520 --> 00:32:28,350
argue if that's your experience then my

753
00:32:28,350 --> 00:32:32,100
lock on is if manufactured they are they

754
00:32:32,100 --> 00:32:35,160
test the UEFI boot to everything truly

755
00:32:35,160 --> 00:32:38,040
and again you're suing or something that

756
00:32:38,040 --> 00:32:40,920
is never tested by just the silicon

757
00:32:40,920 --> 00:32:44,250
vendor I don't see what is advantage I

758
00:32:44,250 --> 00:32:46,230
guess based on my experience with

759
00:32:46,230 --> 00:32:48,600
servers I wouldn't want to say that

760
00:32:48,600 --> 00:32:51,840
things are tested yeah you need a test

761
00:32:51,840 --> 00:32:53,280
anyway Philip well let's just say I

762
00:32:53,280 --> 00:32:54,720
would say that you're tested as

763
00:32:54,720 --> 00:32:55,980
thoroughly as we're testing them now

764
00:32:55,980 --> 00:32:57,960
with Linux boot because we can boot so

765
00:32:57,960 --> 00:33:01,560
quickly I mean if I boot in 20 seconds I

766
00:33:01,560 --> 00:33:03,660
can do roughly sixteen times as many

767
00:33:03,660 --> 00:33:05,880
tests a day as when you boot in ten

768
00:33:05,880 --> 00:33:09,410
minutes it becomes practical to do

769
00:33:09,410 --> 00:33:12,690
thousand test cycles not practical with

770
00:33:12,690 --> 00:33:14,580
UEFI off-the-shelf that I get from

771
00:33:14,580 --> 00:33:16,830
vendors right I mean I've got a machine

772
00:33:16,830 --> 00:33:20,000
right now from a very credible company

773
00:33:20,000 --> 00:33:22,380
god it takes like five minutes before I

774
00:33:22,380 --> 00:33:24,870
can press the power button it's

775
00:33:24,870 --> 00:33:25,380
horrendous

776
00:33:25,380 --> 00:33:27,570
yeah right and then it's another five to

777
00:33:27,570 --> 00:33:29,520
ten minutes before I got a I have any

778
00:33:29,520 --> 00:33:31,050
kind of ability to interact with the

779
00:33:31,050 --> 00:33:33,600
machine so you know twenty seconds

780
00:33:33,600 --> 00:33:35,460
versus many minutes is a really big deal

781
00:33:35,460 --> 00:33:38,490
for testing you cannot do a lot of

782
00:33:38,490 --> 00:33:40,290
testing if the machine takes 8 to 10

783
00:33:40,290 --> 00:33:43,560
minutes to boot you just can't so okay

784
00:33:43,560 --> 00:33:50,280
yeah so just to follow up with what

785
00:33:50,280 --> 00:33:53,240
Maurice was saying earlier yeah about

786
00:33:53,240 --> 00:33:56,850
some of the things that are platform

787
00:33:56,850 --> 00:33:59,370
dependent yeah like for example if you

788
00:33:59,370 --> 00:34:02,280
take servers yeah we have PCI slots you

789
00:34:02,280 --> 00:34:04,320
have to bifurcate yeah based on how the

790
00:34:04,320 --> 00:34:06,750
number of floors our number of width of

791
00:34:06,750 --> 00:34:07,980
the slots are right

792
00:34:07,980 --> 00:34:10,260
yeah and then you also have things like

793
00:34:10,260 --> 00:34:11,190
if you have

794
00:34:11,190 --> 00:34:13,589
PC SSDs and hot plug yeah you know which

795
00:34:13,589 --> 00:34:15,780
slots are hot pluggable slots what there

796
00:34:15,780 --> 00:34:19,379
are addresses of those VPP ports so lot

797
00:34:19,379 --> 00:34:20,819
of things that are platform knowledge

798
00:34:20,819 --> 00:34:22,800
that comes along with it yeah not just

799
00:34:22,800 --> 00:34:24,270
icky naughty you can ignore the platform

800
00:34:24,270 --> 00:34:27,000
and move everything to the Linux kernel

801
00:34:27,000 --> 00:34:30,000
yeah so that's I try to understand how

802
00:34:30,000 --> 00:34:31,770
you're trying to solve that problem so

803
00:34:31,770 --> 00:34:32,659
there Dirar

804
00:34:32,659 --> 00:34:36,960
so the hot plug thing I totally I pretty

805
00:34:36,960 --> 00:34:38,520
much don't buy because there's like X

806
00:34:38,520 --> 00:34:40,109
million machines in data centers out

807
00:34:40,109 --> 00:34:41,489
there that nobody's were gonna hot plug

808
00:34:41,489 --> 00:34:43,589
anything right they roll on out there on

809
00:34:43,589 --> 00:34:46,619
a sardine but BTSs least these days all

810
00:34:46,619 --> 00:34:46,949
right

811
00:34:46,949 --> 00:34:49,500
never have yeah but with front panel PC

812
00:34:49,500 --> 00:34:52,589
SSDs there are eight configuration you

813
00:34:52,589 --> 00:34:54,359
can remove one and then you can replace

814
00:34:54,359 --> 00:34:56,849
it if it's a failing SSD is happening

815
00:34:56,849 --> 00:34:57,180
now

816
00:34:57,180 --> 00:35:00,329
it yeah so depends on your on how you go

817
00:35:00,329 --> 00:35:06,089
about doing those things but but I give

818
00:35:06,089 --> 00:35:07,950
yeah we should have a discussion offline

819
00:35:07,950 --> 00:35:12,690
okay this is being recorded so again the

820
00:35:12,690 --> 00:35:14,099
other thing is a lot it's just an

821
00:35:14,099 --> 00:35:16,140
example right you know a lot of platform

822
00:35:16,140 --> 00:35:19,500
specific things you know that is today

823
00:35:19,500 --> 00:35:21,480
if you want to make the case that this

824
00:35:21,480 --> 00:35:23,609
idea of putting the Acme tables in your

825
00:35:23,609 --> 00:35:26,640
FS is complete bunk I'm not gonna make

826
00:35:26,640 --> 00:35:28,050
I'm not gonna try and argue you out of

827
00:35:28,050 --> 00:35:28,319
it

828
00:35:28,319 --> 00:35:30,060
these you're probably right it's just

829
00:35:30,060 --> 00:35:31,800
it's just something that we did

830
00:35:31,800 --> 00:35:33,630
experiment with and found in some cases

831
00:35:33,630 --> 00:35:37,470
would actually work is it is it is it

832
00:35:37,470 --> 00:35:39,540
entirely practical not really sure I

833
00:35:39,540 --> 00:35:41,460
note that on the wrist v one of the

834
00:35:41,460 --> 00:35:44,430
things on a high five or the fu 540 chip

835
00:35:44,430 --> 00:35:48,839
is the mask ROM hands you an F DT right

836
00:35:48,839 --> 00:35:49,950
you get it right out of the mask ROM you

837
00:35:49,950 --> 00:35:51,210
get an F TT and you're supposed to build

838
00:35:51,210 --> 00:35:53,609
the rest funny story the FTP we're

839
00:35:53,609 --> 00:35:55,230
getting seems to be complete garbage so

840
00:35:55,230 --> 00:35:56,520
we're having the Builder in anyway in

841
00:35:56,520 --> 00:36:00,750
Linux so you know this this argument can

842
00:36:00,750 --> 00:36:02,190
go either way that's what we're learning

843
00:36:02,190 --> 00:36:03,960
and I really I don't think there's any

844
00:36:03,960 --> 00:36:05,730
certainty is through the right way to do

845
00:36:05,730 --> 00:36:08,940
it and the second thing is just to at

846
00:36:08,940 --> 00:36:10,619
this point on boot time mm-hmm

847
00:36:10,619 --> 00:36:14,520
so the majority of the boot time is

848
00:36:14,520 --> 00:36:17,250
taken by ECC in it so when you come up

849
00:36:17,250 --> 00:36:19,079
at a cold boot remember is not

850
00:36:19,079 --> 00:36:21,630
initialized with zeros which means easy

851
00:36:21,630 --> 00:36:24,300
doesn't match I know right so I know

852
00:36:24,300 --> 00:36:25,020
that went very well

853
00:36:25,020 --> 00:36:28,260
yes so that's a task that vege time

854
00:36:28,260 --> 00:36:30,990
consuming tasks no and right all 0 so

855
00:36:30,990 --> 00:36:32,910
that ECC would matches with the data

856
00:36:32,910 --> 00:36:36,270
hey Ryan its most of our memory a gun

857
00:36:36,270 --> 00:36:37,920
and Ryan is most of our booth time taken

858
00:36:37,920 --> 00:36:43,440
up with ECC in it no it's not I I mean a

859
00:36:43,440 --> 00:36:45,660
getting an example there's a lot of

860
00:36:45,660 --> 00:36:47,190
these things are some damn pixie thing

861
00:36:47,190 --> 00:36:48,570
in air which you got a turn all off and

862
00:36:48,570 --> 00:36:51,150
when pixie goes to numerator net all the

863
00:36:51,150 --> 00:36:52,890
wait 30 seconds on every Ethernet port

864
00:36:52,890 --> 00:36:54,570
to figure out there doesn't have carrier

865
00:36:54,570 --> 00:36:56,310
sure and Linux will do that step in

866
00:36:56,310 --> 00:36:57,780
seconds because it can turn them all on

867
00:36:57,780 --> 00:37:00,090
all at once yeah for the boat so what

868
00:37:00,090 --> 00:37:01,800
selection Hagerty with that right yeah

869
00:37:01,800 --> 00:37:05,730
so there but but again there are 424

870
00:37:05,730 --> 00:37:07,619
Dixie's in this one small server board

871
00:37:07,619 --> 00:37:10,320
and they all time out on something sure

872
00:37:10,320 --> 00:37:12,480
okay and I don't want them and I don't

873
00:37:12,480 --> 00:37:13,500
need him and I want to get rid of them

874
00:37:13,500 --> 00:37:17,040
and when we do that okay typically we

875
00:37:17,040 --> 00:37:19,650
are trying goes from minutes to seconds

876
00:37:19,650 --> 00:37:23,400
it just does so okay maybe EC seen it as

877
00:37:23,400 --> 00:37:24,660
important I actually think there's

878
00:37:24,660 --> 00:37:25,890
better ways to do it than we're doing it

879
00:37:25,890 --> 00:37:26,430
today

880
00:37:26,430 --> 00:37:31,290
but all that said not what we're seeing

881
00:37:31,290 --> 00:37:32,760
what we're seeing is a lot of badly

882
00:37:32,760 --> 00:37:35,160
written Dixie's we actually have one

883
00:37:35,160 --> 00:37:37,830
board I won't name the vendor but we

884
00:37:37,830 --> 00:37:40,650
found you know is am deep learning we

885
00:37:40,650 --> 00:37:42,090
found a bunch of Intel Dixie's in there

886
00:37:42,090 --> 00:37:42,510
sure

887
00:37:42,510 --> 00:37:45,869
so there's incredible sloppiness on the

888
00:37:45,869 --> 00:37:48,930
part of the company's shipping UEFI our

889
00:37:48,930 --> 00:37:50,520
proposal to solve the problem is to get

890
00:37:50,520 --> 00:37:52,140
rid of a lot of stuff right sure and

891
00:37:52,140 --> 00:37:54,060
when we do that all of a sudden gush our

892
00:37:54,060 --> 00:37:56,190
boot time is great yes so yeah you know

893
00:37:56,190 --> 00:37:59,070
so and and further on a tie an board

894
00:37:59,070 --> 00:38:00,600
where we hit I mean I'm sorry the the

895
00:38:00,600 --> 00:38:02,190
winterfell board where he hit 20 seconds

896
00:38:02,190 --> 00:38:03,510
the first thing we did actually was just

897
00:38:03,510 --> 00:38:05,550
replaced the the UC shell with with

898
00:38:05,550 --> 00:38:09,869
Linux kernel you know so that wasn't HDC

899
00:38:09,869 --> 00:38:11,790
in it right because that was a constant

900
00:38:11,790 --> 00:38:15,500
in each case right so basically if you

901
00:38:15,500 --> 00:38:18,359
remember last Oct summit in Amsterdam

902
00:38:18,359 --> 00:38:20,820
yeah we demoed a five-second one BRE set

903
00:38:20,820 --> 00:38:24,060
in the 10 second cold reset on yeah

904
00:38:24,060 --> 00:38:26,520
OCP platform server platform you know

905
00:38:26,520 --> 00:38:29,070
it's great and again we took a lot of

906
00:38:29,070 --> 00:38:30,869
things out of the Dixie phase sure

907
00:38:30,869 --> 00:38:33,720
things that you have platform dependency

908
00:38:33,720 --> 00:38:36,270
on for example BMC wafer BMC to come up

909
00:38:36,270 --> 00:38:37,680
s 20 seconds

910
00:38:37,680 --> 00:38:40,350
right and then a cold boot so to wait

911
00:38:40,350 --> 00:38:42,180
for that IP my commands take a lot

912
00:38:42,180 --> 00:38:44,130
longer so if we step everything down to

913
00:38:44,130 --> 00:38:46,440
a bad required I can bring it down to

914
00:38:46,440 --> 00:38:48,210
five seconds and we Demarest thank you

915
00:38:48,210 --> 00:38:51,420
supporting argument so but how do you we

916
00:38:51,420 --> 00:38:52,860
strip our stuff out and it gets better

917
00:38:52,860 --> 00:38:54,660
what you need the stuff ECC in it is

918
00:38:54,660 --> 00:38:56,100
still trying but we strip all that stuff

919
00:38:56,100 --> 00:38:57,690
out and it got better right but then if

920
00:38:57,690 --> 00:38:59,340
you I mean that's supporting is not

921
00:38:59,340 --> 00:39:01,050
supporting argument well if you make

922
00:39:01,050 --> 00:39:04,230
easing it out yeah honestly take ECC in

923
00:39:04,230 --> 00:39:05,970
there now okay I'm saying you should you

924
00:39:05,970 --> 00:39:07,920
demonstrated this really neat thing 10

925
00:39:07,920 --> 00:39:09,720
second - by stripping a lot of stuff out

926
00:39:09,720 --> 00:39:11,700
you don't need that's our that's our

927
00:39:11,700 --> 00:39:13,050
whole or not of I can demonstrate

928
00:39:13,050 --> 00:39:15,180
something that I can by taking away

929
00:39:15,180 --> 00:39:16,530
things they don't need for boot

930
00:39:16,530 --> 00:39:18,720
yeah but a need for functionality so if

931
00:39:18,720 --> 00:39:20,460
I need to have BMC logging all the

932
00:39:20,460 --> 00:39:22,200
errors that coming up I need the

933
00:39:22,200 --> 00:39:23,970
functionality so if you start adding

934
00:39:23,970 --> 00:39:25,800
platform functionalities on top of a

935
00:39:25,800 --> 00:39:29,130
basic base line then your thought adding

936
00:39:29,130 --> 00:39:33,620
book ID only in HTTP Dixie I don't need

937
00:39:33,620 --> 00:39:39,510
tcp/ip 6 ping Jesse I don't need send

938
00:39:39,510 --> 00:39:41,670
mail Dixie which we we are finding I

939
00:39:41,670 --> 00:39:44,550
don't need the sexy password right I

940
00:39:44,550 --> 00:39:48,180
don't need a HCI Dixie I don't need is a

941
00:39:48,180 --> 00:39:51,750
Dixie I don't need vfat Dixie it's a

942
00:39:51,750 --> 00:39:53,610
long list right I could it store and 14

943
00:39:53,610 --> 00:39:54,930
things I'm not gonna do them all right

944
00:39:54,930 --> 00:39:56,850
and when I remove those things it gets a

945
00:39:56,850 --> 00:39:58,680
lot faster yeah you see see unit is

946
00:39:58,680 --> 00:40:01,200
still current so if I remove all these

947
00:40:01,200 --> 00:40:03,210
things I'm down I've chopped off 7

948
00:40:03,210 --> 00:40:04,980
minutes and 40 seconds it's not the ECC

949
00:40:04,980 --> 00:40:06,930
in it this is not sure so those things

950
00:40:06,930 --> 00:40:10,530
that like the HTTP those things yeah all

951
00:40:10,530 --> 00:40:10,920
right

952
00:40:10,920 --> 00:40:12,150
those thing I know it by the way

953
00:40:12,150 --> 00:40:14,220
ghosting not everybody knows this every

954
00:40:14,220 --> 00:40:16,620
single Dixie at least it runs unit

955
00:40:16,620 --> 00:40:18,660
function because there's the protocol

956
00:40:18,660 --> 00:40:20,520
gooood in the Dixie you cannot discover

957
00:40:20,520 --> 00:40:22,520
without running the init function

958
00:40:22,520 --> 00:40:24,960
so all those Dixie's run whether you

959
00:40:24,960 --> 00:40:27,030
think they run or not they all run even

960
00:40:27,030 --> 00:40:28,200
if you think they're not configured

961
00:40:28,200 --> 00:40:30,600
that's what we that was the shock for us

962
00:40:30,600 --> 00:40:33,240
right there's the file good and a

963
00:40:33,240 --> 00:40:34,560
protocol gooood and you can't know the

964
00:40:34,560 --> 00:40:35,970
protocol good because it's not at a

965
00:40:35,970 --> 00:40:37,980
fixed place than the object the only way

966
00:40:37,980 --> 00:40:39,300
you come in a protocol go at this run

967
00:40:39,300 --> 00:40:41,400
unit function in Dixie every Dixie will

968
00:40:41,400 --> 00:40:43,350
run at least once if any Dixie has

969
00:40:43,350 --> 00:40:45,030
dependencies on other Dixie's they'll

970
00:40:45,030 --> 00:40:47,670
run at least twice that's the problem if

971
00:40:47,670 --> 00:40:49,860
you've got code from ami that has a

972
00:40:49,860 --> 00:40:51,540
hidden dependency on a Dixie because

973
00:40:51,540 --> 00:40:54,240
cuz it's not written correctly you'll

974
00:40:54,240 --> 00:40:56,700
run more than app if you remove English

975
00:40:56,700 --> 00:40:58,230
site Exe because you don't know what

976
00:40:58,230 --> 00:41:00,840
English DXE is then am i firmware will

977
00:41:00,840 --> 00:41:04,440
crash sure so you know it's not properly

978
00:41:04,440 --> 00:41:06,450
listed as the dependency in the ami TSE

979
00:41:06,450 --> 00:41:10,440
so notes gotta go we want it all gone

980
00:41:10,440 --> 00:41:14,250
thanks yeah but thank you and those are

981
00:41:14,250 --> 00:41:17,310
good points so yeah okay thanks that is

982
00:41:17,310 --> 00:41:18,210
for that's it for questions

983
00:41:18,210 --> 00:41:21,300
unfortunately but yeah let's have

984
00:41:21,300 --> 00:41:22,690
another round of applause

985
00:41:22,690 --> 00:41:23,340
[Applause]

986
00:41:23,340 --> 00:41:35,330
[Music]

