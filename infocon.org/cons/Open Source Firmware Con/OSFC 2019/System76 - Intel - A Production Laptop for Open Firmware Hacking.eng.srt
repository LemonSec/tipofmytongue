1
00:00:03,190 --> 00:00:06,259
[Music]

2
00:00:07,099 --> 00:00:09,320
good morning everyone

3
00:00:09,320 --> 00:00:12,059
I'm Carla shell I'm the CEO and founder

4
00:00:12,059 --> 00:00:14,809
of system76 I'm with Jeremy solar

5
00:00:14,809 --> 00:00:18,359
engineering manager at system76 if you

6
00:00:18,359 --> 00:00:20,279
don't know about us we are a Linux

7
00:00:20,279 --> 00:00:23,550
computer OAM we specialize in laptops

8
00:00:23,550 --> 00:00:25,019
desktops and servers we've been doing

9
00:00:25,019 --> 00:00:28,769
this for about 14 years now and 14 years

10
00:00:28,769 --> 00:00:31,529
ago when we started this every single

11
00:00:31,529 --> 00:00:32,969
thing you could imagine about making

12
00:00:32,969 --> 00:00:35,280
Linux laptop was challenging but

13
00:00:35,280 --> 00:00:36,989
touchpads didn't work the hotkeys didn't

14
00:00:36,989 --> 00:00:37,500
work

15
00:00:37,500 --> 00:00:41,160
the graphics didn't work modems Ethernet

16
00:00:41,160 --> 00:00:43,770
our first laptops had 56k baud modems

17
00:00:43,770 --> 00:00:46,890
those were a nightmare but it was our

18
00:00:46,890 --> 00:00:49,920
our ethos said if you're going to build

19
00:00:49,920 --> 00:00:51,239
a product and all the things on that

20
00:00:51,239 --> 00:00:54,270
product needed to work so we spent lots

21
00:00:54,270 --> 00:00:57,390
of time building or working on just the

22
00:00:57,390 --> 00:01:02,660
fundamental functionality of laptops

23
00:01:02,660 --> 00:01:05,188
there were binary blobs everywhere

24
00:01:05,188 --> 00:01:07,680
throughout the stack that was necessary

25
00:01:07,680 --> 00:01:10,950
just to get these devices working as

26
00:01:10,950 --> 00:01:13,080
they should now over the course of last

27
00:01:13,080 --> 00:01:15,299
14 years that's changed dramatically a

28
00:01:15,299 --> 00:01:17,040
lot of those binary blobs been replaced

29
00:01:17,040 --> 00:01:19,740
by open-source software the effort to

30
00:01:19,740 --> 00:01:22,290
bring a laptop up is far less than what

31
00:01:22,290 --> 00:01:25,740
it was 14 years ago now the things that

32
00:01:25,740 --> 00:01:27,360
we're working on aren't just getting to

33
00:01:27,360 --> 00:01:29,520
par functionality with proprietary world

34
00:01:29,520 --> 00:01:31,979
it's going beyond what exists in the

35
00:01:31,979 --> 00:01:33,630
proprietary world we're working on

36
00:01:33,630 --> 00:01:36,960
things like improving boot performance

37
00:01:36,960 --> 00:01:40,100
improving the reliability for spend

38
00:01:40,100 --> 00:01:42,329
overall performance with the machine and

39
00:01:42,329 --> 00:01:45,990
with things like more precise fan curves

40
00:01:45,990 --> 00:01:48,990
and and other effort to not just not

41
00:01:48,990 --> 00:01:50,399
just match what's happening the prior

42
00:01:50,399 --> 00:01:54,090
two world but go beyond it now it was

43
00:01:54,090 --> 00:01:57,450
always our ambition to offer open source

44
00:01:57,450 --> 00:02:00,360
firmware as well core boot or or Linux

45
00:02:00,360 --> 00:02:02,009
boot or any of those projects along the

46
00:02:02,009 --> 00:02:04,310
way the challenge that we had was that

47
00:02:04,310 --> 00:02:07,110
to reverse engineer the proprietary

48
00:02:07,110 --> 00:02:09,179
firmware that we received and get it to

49
00:02:09,179 --> 00:02:11,280
the point where it was operating with

50
00:02:11,280 --> 00:02:13,200
the same functionality with core boot

51
00:02:13,200 --> 00:02:15,569
would take a few months and a few months

52
00:02:15,569 --> 00:02:17,400
isn't enough time for us to deliver

53
00:02:17,400 --> 00:02:20,459
hardware on day zero and for us they

54
00:02:20,459 --> 00:02:22,140
zero means that when Intel releases the

55
00:02:22,140 --> 00:02:25,260
chip when the video releases the GPU our

56
00:02:25,260 --> 00:02:26,970
customers have access to that hardware

57
00:02:26,970 --> 00:02:29,220
at the same time that everyone else in

58
00:02:29,220 --> 00:02:31,440
the hardware world has access to that so

59
00:02:31,440 --> 00:02:32,880
we couldn't have this gap of time

60
00:02:32,880 --> 00:02:35,250
between between when we're ready to

61
00:02:35,250 --> 00:02:36,840
release we have the Linux stack ready to

62
00:02:36,840 --> 00:02:39,120
go but we don't have a firmware stack

63
00:02:39,120 --> 00:02:39,930
ready to go

64
00:02:39,930 --> 00:02:42,330
we felt like what we needed to to bridge

65
00:02:42,330 --> 00:02:45,510
that gap between between the proprietary

66
00:02:45,510 --> 00:02:47,160
firmware and being able to ship it and

67
00:02:47,160 --> 00:02:50,190
open source firmware was helped and in a

68
00:02:50,190 --> 00:02:52,530
partnership with silicon providers we

69
00:02:52,530 --> 00:02:55,680
needed we needed the assistance and they

70
00:02:55,680 --> 00:02:58,230
an access to the type of documentation

71
00:02:58,230 --> 00:02:59,970
and reference boards that are available

72
00:02:59,970 --> 00:03:03,019
from Intel and AMD and other suppliers

73
00:03:03,019 --> 00:03:08,220
so then come along about November of

74
00:03:08,220 --> 00:03:11,700
2018 e Intel sends us an email and they

75
00:03:11,700 --> 00:03:14,340
say hey we're looking for a partner to

76
00:03:14,340 --> 00:03:17,820
build open firmware we need a we're

77
00:03:17,820 --> 00:03:20,220
looking for a preferably company

78
00:03:20,220 --> 00:03:23,220
specialized in Linux a company that can

79
00:03:23,220 --> 00:03:24,690
deliver Hardware upon production

80
00:03:24,690 --> 00:03:27,030
hardware without boot guard that way

81
00:03:27,030 --> 00:03:29,430
they the hardware itself is hackable one

82
00:03:29,430 --> 00:03:33,989
firmware so so we said well yeah we're

83
00:03:33,989 --> 00:03:36,390
absolutely interested in that a few

84
00:03:36,390 --> 00:03:39,090
months later until and their team came

85
00:03:39,090 --> 00:03:41,370
out I'll tell there's something unique

86
00:03:41,370 --> 00:03:44,100
when this team came out to meet us you

87
00:03:44,100 --> 00:03:48,090
see we talked to until let's see

88
00:03:48,090 --> 00:03:50,640
bi-weekly we're bi-weekly meetings AMD

89
00:03:50,640 --> 00:03:52,440
comes out so about once a month or so

90
00:03:52,440 --> 00:03:54,239
Samsung although our vendors come out

91
00:03:54,239 --> 00:03:56,130
and meet with us pretty regularly but

92
00:03:56,130 --> 00:03:58,049
these are folks that are within the

93
00:03:58,049 --> 00:03:59,700
sales channel and so they're coming out

94
00:03:59,700 --> 00:04:01,890
to show us the roadmap what's coming so

95
00:04:01,890 --> 00:04:05,069
it helps us keep on top of and plan out

96
00:04:05,069 --> 00:04:06,930
what our products life cycle is going to

97
00:04:06,930 --> 00:04:08,970
be but the firmware team that came from

98
00:04:08,970 --> 00:04:11,910
Intel were engineers and it was clear to

99
00:04:11,910 --> 00:04:14,549
us pretty early that that this isn't

100
00:04:14,549 --> 00:04:18,029
about them telling us things to you know

101
00:04:18,029 --> 00:04:20,488
that we should be using to make this was

102
00:04:20,488 --> 00:04:22,019
these were people that we could build

103
00:04:22,019 --> 00:04:24,539
something with and that's an encouraging

104
00:04:24,539 --> 00:04:27,410
that's an encouraging distinct

105
00:04:27,410 --> 00:04:32,210
with with this this partnership so so we

106
00:04:32,210 --> 00:04:34,490
had hardware that was available on the

107
00:04:34,490 --> 00:04:36,500
market we could disable boot guard now

108
00:04:36,500 --> 00:04:39,710
it was now was Intel coming in and I'm

109
00:04:39,710 --> 00:04:41,930
willing to discuss what project that

110
00:04:41,930 --> 00:04:44,480
they had in mind and it was a project

111
00:04:44,480 --> 00:04:47,690
called min platform min platform was I

112
00:04:47,690 --> 00:04:49,970
believe I think they would say a veteran

113
00:04:49,970 --> 00:04:51,620
a they're talking the layer today but it

114
00:04:51,620 --> 00:04:53,900
was an experiment to determine what the

115
00:04:53,900 --> 00:04:55,430
minimum amount of code that's necessary

116
00:04:55,430 --> 00:04:59,090
to bring up an x86 system so they

117
00:04:59,090 --> 00:05:00,740
started the presentation it was a snowy

118
00:05:00,740 --> 00:05:03,080
day out so there's a lot of there's a

119
00:05:03,080 --> 00:05:04,280
lot of snow coming down and the

120
00:05:04,280 --> 00:05:06,080
presentation was continuing it went on

121
00:05:06,080 --> 00:05:09,080
for an hour and then two hours and then

122
00:05:09,080 --> 00:05:11,600
three hours and then six hours later if

123
00:05:11,600 --> 00:05:12,640
we decided we'd better take a break

124
00:05:12,640 --> 00:05:15,620
because there's snowing too hard we had

125
00:05:15,620 --> 00:05:18,140
to send everybody home so so we said

126
00:05:18,140 --> 00:05:19,520
everybody home we had actually closed up

127
00:05:19,520 --> 00:05:22,340
the factory and then and then come back

128
00:05:22,340 --> 00:05:24,260
the next morning so the guys came back

129
00:05:24,260 --> 00:05:26,030
we got back to our craft room we only

130
00:05:26,030 --> 00:05:28,550
have one small really private room at

131
00:05:28,550 --> 00:05:30,590
our Factory and and so we got into that

132
00:05:30,590 --> 00:05:32,600
cramped room and it gets really hot in

133
00:05:32,600 --> 00:05:35,870
there and so six hours is this is quite

134
00:05:35,870 --> 00:05:38,600
a presentation so then we had about two

135
00:05:38,600 --> 00:05:40,090
more hours of presentation and

136
00:05:40,090 --> 00:05:44,570
afterwards the Intel guys say so this is

137
00:05:44,570 --> 00:05:45,740
what we're trying to do who's your

138
00:05:45,740 --> 00:05:47,210
partner with us on building open

139
00:05:47,210 --> 00:05:51,080
firmware and we said you had a set to

140
00:05:51,080 --> 00:05:56,060
open firmware we this is absolutely what

141
00:05:56,060 --> 00:05:57,620
we've been wanting to do for a long time

142
00:05:57,620 --> 00:06:00,919
we felt that that like I said that the

143
00:06:00,919 --> 00:06:03,470
challenge for us was we're a day 0 a.m.

144
00:06:03,470 --> 00:06:04,880
we didn't feel like the Linux desktop

145
00:06:04,880 --> 00:06:07,310
should be should lag behind everyone

146
00:06:07,310 --> 00:06:09,620
else when Intel had a new CPU and AMD

147
00:06:09,620 --> 00:06:11,540
has new CPU we wouldn't be there at the

148
00:06:11,540 --> 00:06:12,830
exact same time and over the course of

149
00:06:12,830 --> 00:06:14,900
the last 14 years we've done quite well

150
00:06:14,900 --> 00:06:17,300
at being able to do that now with the

151
00:06:17,300 --> 00:06:20,360
with a support of Intel and most

152
00:06:20,360 --> 00:06:22,850
partnering on building firmware we feel

153
00:06:22,850 --> 00:06:25,280
really confident that once we finished

154
00:06:25,280 --> 00:06:28,370
our first open firmware product now the

155
00:06:28,370 --> 00:06:29,840
thing is once you do that first one you

156
00:06:29,840 --> 00:06:32,900
can't go back that means we've built

157
00:06:32,900 --> 00:06:35,060
we're gonna build a laptop that ships

158
00:06:35,060 --> 00:06:37,130
with open firmware the next version of

159
00:06:37,130 --> 00:06:39,260
that laptop can't ship with proprietary

160
00:06:39,260 --> 00:06:40,729
former for three months before we

161
00:06:40,729 --> 00:06:42,979
ship they open former for it we want a

162
00:06:42,979 --> 00:06:44,300
ship from day zero in the same way so

163
00:06:44,300 --> 00:06:46,460
that's the complete product so that's

164
00:06:46,460 --> 00:06:48,259
what that's the path that we're working

165
00:06:48,259 --> 00:06:51,439
towards so now I'm gonna hand the stage

166
00:06:51,439 --> 00:06:54,349
to Jeremy he's going to talk you through

167
00:06:54,349 --> 00:06:55,909
the steps that we took going from a

168
00:06:55,909 --> 00:06:58,400
proprietary BIOS on on Hardware on this

169
00:06:58,400 --> 00:07:00,620
specific hardware and moving to open

170
00:07:00,620 --> 00:07:04,009
firmware yeah so in order to meet the

171
00:07:04,009 --> 00:07:06,349
demand of having absolutely new hardware

172
00:07:06,349 --> 00:07:08,029
and delivering it with open firmware we

173
00:07:08,029 --> 00:07:09,860
have to come up with a process that lets

174
00:07:09,860 --> 00:07:12,409
us develop the firmware in a very short

175
00:07:12,409 --> 00:07:15,199
period of time so what we took is our

176
00:07:15,199 --> 00:07:16,819
target system was actually this system

177
00:07:16,819 --> 00:07:19,249
here the darter Pro it's running

178
00:07:19,249 --> 00:07:20,599
coreboot right now and it's running

179
00:07:20,599 --> 00:07:23,270
Tianna core and it's booting pop OS

180
00:07:23,270 --> 00:07:25,099
which is our operating system project

181
00:07:25,099 --> 00:07:27,620
the first thing you have to do is not be

182
00:07:27,620 --> 00:07:30,379
afraid to flash the system you're going

183
00:07:30,379 --> 00:07:32,180
to flash bad firmware it's not going to

184
00:07:32,180 --> 00:07:34,849
boot that's absolutely the case only one

185
00:07:34,849 --> 00:07:37,279
time out of the out of the six different

186
00:07:37,279 --> 00:07:39,199
models I've done have I ever had the

187
00:07:39,199 --> 00:07:41,990
first definition of things be correct

188
00:07:41,990 --> 00:07:43,939
and the system actually get to graphics

189
00:07:43,939 --> 00:07:45,770
in it with the first firmware I have

190
00:07:45,770 --> 00:07:48,589
flashed so what we use is this tool here

191
00:07:48,589 --> 00:07:50,959
this is a Raspberry Pi with a spy clip

192
00:07:50,959 --> 00:07:52,969
on it it clips on to the motherboard to

193
00:07:52,969 --> 00:07:54,589
a chip on the motherboard that holds the

194
00:07:54,589 --> 00:07:56,959
firmware and it replaces it with a good

195
00:07:56,959 --> 00:07:59,689
image with a bad image with complete

196
00:07:59,689 --> 00:08:02,899
garbage whatever and the benefit of

197
00:08:02,899 --> 00:08:05,149
having this device is we're no longer

198
00:08:05,149 --> 00:08:07,129
afraid so we can start developing

199
00:08:07,129 --> 00:08:09,860
firmware flash bad image get it working

200
00:08:09,860 --> 00:08:12,439
again and keep moving so the first thing

201
00:08:12,439 --> 00:08:15,020
that we do when we have this confidence

202
00:08:15,020 --> 00:08:17,719
is get documentation and the

203
00:08:17,719 --> 00:08:19,969
documentation often looks a little bit

204
00:08:19,969 --> 00:08:22,219
like this oops

205
00:08:22,219 --> 00:08:24,050
have to type a password because it's

206
00:08:24,050 --> 00:08:26,680
password protected and you'll notice

207
00:08:26,680 --> 00:08:29,629
confidential written in watermark I

208
00:08:29,629 --> 00:08:32,208
can't even show you this page so

209
00:08:32,208 --> 00:08:34,159
everything in documentation about

210
00:08:34,159 --> 00:08:36,828
embedded controllers Intel PCH things

211
00:08:36,828 --> 00:08:38,958
like that are often confidential which

212
00:08:38,958 --> 00:08:40,669
is a big problem in this community now

213
00:08:40,669 --> 00:08:43,010
thankfully the Intel documentation does

214
00:08:43,010 --> 00:08:46,459
open up after product launch sometimes

215
00:08:46,459 --> 00:08:50,540
but but when you get that documentation

216
00:08:50,540 --> 00:08:52,730
you can now start working on support in

217
00:08:52,730 --> 00:08:54,710
the firmware so a lot of the device

218
00:08:54,710 --> 00:08:58,100
is that our in and I say devices inside

219
00:08:58,100 --> 00:08:59,870
of this device I'm talking about discs

220
00:08:59,870 --> 00:09:01,460
I'm talking about the graphics I'm

221
00:09:01,460 --> 00:09:03,860
talking about the the spy ROM I'm

222
00:09:03,860 --> 00:09:06,560
talking about camera they are all

223
00:09:06,560 --> 00:09:09,590
supported either by firmware custom code

224
00:09:09,590 --> 00:09:11,510
for the firmware or industry standard

225
00:09:11,510 --> 00:09:13,820
drivers so when you talk about things

226
00:09:13,820 --> 00:09:16,100
like discs they have industry standard

227
00:09:16,100 --> 00:09:17,780
drivers there's no work you have to do

228
00:09:17,780 --> 00:09:19,940
there you have an nvme driver it works

229
00:09:19,940 --> 00:09:21,800
across every board but when you talk

230
00:09:21,800 --> 00:09:24,620
about things like PC h's when you talk

231
00:09:24,620 --> 00:09:26,390
about the GPIO s that have to be

232
00:09:26,390 --> 00:09:29,600
configured per motherboard then you have

233
00:09:29,600 --> 00:09:31,340
to collect a lot of information about

234
00:09:31,340 --> 00:09:34,340
the platform so that's the schematics

235
00:09:34,340 --> 00:09:36,620
for the motherboard here for example you

236
00:09:36,620 --> 00:09:39,470
see the the ddr4 lines that go to the

237
00:09:39,470 --> 00:09:42,920
processor on this specific model and in

238
00:09:42,920 --> 00:09:44,480
order to get anywhere we're going to

239
00:09:44,480 --> 00:09:46,190
have to figure out how those lines are

240
00:09:46,190 --> 00:09:48,410
connected and pass that to the memory

241
00:09:48,410 --> 00:09:51,100
reference code which initializes memory

242
00:09:51,100 --> 00:09:54,710
so if coreboot supports the sock that's

243
00:09:54,710 --> 00:09:58,130
great right now core boot has support

244
00:09:58,130 --> 00:10:02,660
for ice Lake in cascade Lake and that

245
00:10:02,660 --> 00:10:04,250
provides support for all the latest

246
00:10:04,250 --> 00:10:06,170
platforms Tiger Lake is probably coming

247
00:10:06,170 --> 00:10:07,640
soon which will be the next platform

248
00:10:07,640 --> 00:10:11,000
we're targeting the good news is things

249
00:10:11,000 --> 00:10:12,710
have changed quite a bit since a few

250
00:10:12,710 --> 00:10:15,230
years ago a few years ago the FSP was

251
00:10:15,230 --> 00:10:18,470
six months behind a few years ago the

252
00:10:18,470 --> 00:10:21,050
the it felt like core boot support for

253
00:10:21,050 --> 00:10:23,660
four platforms was much later after

254
00:10:23,660 --> 00:10:25,430
release now we have support for

255
00:10:25,430 --> 00:10:28,820
platforms prior to release so now that

256
00:10:28,820 --> 00:10:30,710
we have that we try to get memory in it

257
00:10:30,710 --> 00:10:33,380
to work currently the FS PM provides

258
00:10:33,380 --> 00:10:35,660
memory in it on this model that's a

259
00:10:35,660 --> 00:10:37,820
closed source binary from Intel it's

260
00:10:37,820 --> 00:10:39,470
actually source available if you're a

261
00:10:39,470 --> 00:10:41,450
partner you can ask for source code

262
00:10:41,450 --> 00:10:43,580
you're not allowed to distribute it it

263
00:10:43,580 --> 00:10:46,310
has a very restrictive license you use

264
00:10:46,310 --> 00:10:50,840
that too you use the settings for like

265
00:10:50,840 --> 00:10:53,120
the resistors they're connected to the

266
00:10:53,120 --> 00:10:55,400
memory bus the way that the the bytes

267
00:10:55,400 --> 00:10:57,980
are mapped to get the system to

268
00:10:57,980 --> 00:10:59,660
initialize memory and you have to do

269
00:10:59,660 --> 00:11:01,490
that to get to graphics in it and you

270
00:11:01,490 --> 00:11:03,050
have to do that to get more advanced

271
00:11:03,050 --> 00:11:05,930
debugging out of the board so there is

272
00:11:05,930 --> 00:11:07,880
actually a method in coreboot to debug

273
00:11:07,880 --> 00:11:08,430
and in

274
00:11:08,430 --> 00:11:10,740
platform using this where you can dump

275
00:11:10,740 --> 00:11:12,990
debug output straight to the spy ROM but

276
00:11:12,990 --> 00:11:15,390
it's not very versatile so we like to

277
00:11:15,390 --> 00:11:17,460
get past that and get to a place where

278
00:11:17,460 --> 00:11:20,160
we can load PCI Express devices and

279
00:11:20,160 --> 00:11:22,290
things like that so that's the FS PS

280
00:11:22,290 --> 00:11:24,450
configuration you have to prepare GPIO

281
00:11:24,450 --> 00:11:26,580
settings every board is gonna have

282
00:11:26,580 --> 00:11:28,770
different GPIO settings as Ron mentioned

283
00:11:28,770 --> 00:11:31,589
sometimes they switch those settings in

284
00:11:31,589 --> 00:11:35,459
a boards lifetime we don't have that

285
00:11:35,459 --> 00:11:38,010
from our our board manufacturer but I

286
00:11:38,010 --> 00:11:40,890
can certainly see that happening if you

287
00:11:40,890 --> 00:11:42,930
get the FSP configuration right which is

288
00:11:42,930 --> 00:11:45,660
things like the video BIOS table that

289
00:11:45,660 --> 00:11:47,130
sets up the internal display on the

290
00:11:47,130 --> 00:11:49,860
laptop things like the PCI Express Lanes

291
00:11:49,860 --> 00:11:51,570
how they're bifurcated what devices

292
00:11:51,570 --> 00:11:54,000
they're connected to and things like PCH

293
00:11:54,000 --> 00:11:55,980
devices then you should be able to boot

294
00:11:55,980 --> 00:11:58,320
to an OS now this is going to be very

295
00:11:58,320 --> 00:12:01,320
limited hardware support you're going to

296
00:12:01,320 --> 00:12:02,790
have hopefully you're gonna have drives

297
00:12:02,790 --> 00:12:04,920
because those are industry standard but

298
00:12:04,920 --> 00:12:07,020
you're probably not gonna have things

299
00:12:07,020 --> 00:12:08,940
like your your power adapter working

300
00:12:08,940 --> 00:12:10,709
your battery you're not going to have

301
00:12:10,709 --> 00:12:14,250
your hotkeys working so this provides at

302
00:12:14,250 --> 00:12:17,430
best in IOT experience so the next thing

303
00:12:17,430 --> 00:12:18,810
you have to do is define your a CPI

304
00:12:18,810 --> 00:12:21,360
tables a lot of those are industry

305
00:12:21,360 --> 00:12:24,270
standard like batteries if you define

306
00:12:24,270 --> 00:12:26,459
the right device in a CPI land it shows

307
00:12:26,459 --> 00:12:28,650
up in every a CPI compliant operating

308
00:12:28,650 --> 00:12:31,860
system but things like hotkeys are not

309
00:12:31,860 --> 00:12:34,230
so you also have to develop drivers in

310
00:12:34,230 --> 00:12:36,120
the OS for that now there's an

311
00:12:36,120 --> 00:12:37,800
interesting things supporting these with

312
00:12:37,800 --> 00:12:40,529
a not vendor specific with an industry

313
00:12:40,529 --> 00:12:42,209
standard driver called Intel hit event

314
00:12:42,209 --> 00:12:45,839
filter but it's not very inclusive there

315
00:12:45,839 --> 00:12:47,850
are a lot of hotkeys that are missed so

316
00:12:47,850 --> 00:12:49,650
what we've actually been working on with

317
00:12:49,650 --> 00:12:52,110
our a CPI tables is to have something

318
00:12:52,110 --> 00:12:54,540
that's available to everyone who has

319
00:12:54,540 --> 00:12:56,250
these hotkeys who's developing for a

320
00:12:56,250 --> 00:12:58,709
laptop so they can use the same a CPI

321
00:12:58,709 --> 00:13:00,870
definitions over and over and over and

322
00:13:00,870 --> 00:13:03,420
they can get to the point where the same

323
00:13:03,420 --> 00:13:05,730
driver in the operating system in Linux

324
00:13:05,730 --> 00:13:07,770
or whatever supports that device and

325
00:13:07,770 --> 00:13:09,750
they don't have to keep adding in new

326
00:13:09,750 --> 00:13:12,390
definitions for every new device because

327
00:13:12,390 --> 00:13:16,110
what often happens for these is a device

328
00:13:16,110 --> 00:13:18,720
vendor has to add in the DMI information

329
00:13:18,720 --> 00:13:20,130
for every single device they ever

330
00:13:20,130 --> 00:13:22,230
develop to a long list

331
00:13:22,230 --> 00:13:23,760
in the linux kernel that ends up being

332
00:13:23,760 --> 00:13:25,830
longer than the driver itself to

333
00:13:25,830 --> 00:13:29,280
identify how to access the hotkeys so I

334
00:13:29,280 --> 00:13:31,620
went through that really fast because

335
00:13:31,620 --> 00:13:33,180
that's the part that we're going to

336
00:13:33,180 --> 00:13:35,730
handle and we get to we get to the point

337
00:13:35,730 --> 00:13:37,050
where all we have to do for a new

338
00:13:37,050 --> 00:13:39,210
product is identify the new GPIO

339
00:13:39,210 --> 00:13:41,400
settings for that product we have the

340
00:13:41,400 --> 00:13:42,960
schematics we can do the memory in it

341
00:13:42,960 --> 00:13:45,600
very quickly it can take a day to get

342
00:13:45,600 --> 00:13:47,280
something booting on a new product this

343
00:13:47,280 --> 00:13:49,650
way then we work to add advanced

344
00:13:49,650 --> 00:13:52,050
features so we develop trust

345
00:13:52,050 --> 00:13:55,320
capabilities to rust libraries that work

346
00:13:55,320 --> 00:13:59,490
in UEFI and those libraries allow native

347
00:13:59,490 --> 00:14:01,920
graphics support high definition and

348
00:14:01,920 --> 00:14:04,920
high quality font rendering and we use

349
00:14:04,920 --> 00:14:06,630
those to build our firmware setup screen

350
00:14:06,630 --> 00:14:08,700
and our firmware updater and they're

351
00:14:08,700 --> 00:14:10,650
meant to be features that can be used by

352
00:14:10,650 --> 00:14:13,440
anyone else they're all GPL 3 or where

353
00:14:13,440 --> 00:14:17,100
MIT depending on the project and they

354
00:14:17,100 --> 00:14:18,690
are meant to be used by any vendor who

355
00:14:18,690 --> 00:14:21,570
wants to have high quality firmware so

356
00:14:21,570 --> 00:14:24,420
after we've done that Karl can describe

357
00:14:24,420 --> 00:14:27,030
what what you can do yeah all right so

358
00:14:27,030 --> 00:14:30,120
so this work has been bringing up our

359
00:14:30,120 --> 00:14:32,970
first product being the Darda Pro with

360
00:14:32,970 --> 00:14:35,820
open firmware we expect to have it

361
00:14:35,820 --> 00:14:38,040
available in q4 of this year or

362
00:14:38,040 --> 00:14:41,040
generally available and that should have

363
00:14:41,040 --> 00:14:46,890
a a side notes like hopefully q4 the

364
00:14:46,890 --> 00:14:48,360
reason being is that we don't want to

365
00:14:48,360 --> 00:14:51,210
just ship open firmware that has

366
00:14:51,210 --> 00:14:52,650
equivalent functionality to the

367
00:14:52,650 --> 00:14:54,030
proprietary format that we're replacing

368
00:14:54,030 --> 00:14:56,550
we want a product that once we replace

369
00:14:56,550 --> 00:14:58,320
that that proprietary firmer you can

370
00:14:58,320 --> 00:14:59,700
feel the difference in the quality of

371
00:14:59,700 --> 00:15:01,470
the product so it's going to boot far

372
00:15:01,470 --> 00:15:03,000
faster it's good it's a spin will be

373
00:15:03,000 --> 00:15:04,320
more reliable all the things that you

374
00:15:04,320 --> 00:15:09,300
think of that that are annoyances caused

375
00:15:09,300 --> 00:15:11,730
by firmware we wanted we want to as best

376
00:15:11,730 --> 00:15:12,390
we can

377
00:15:12,390 --> 00:15:14,730
wipe those out so it so that the

378
00:15:14,730 --> 00:15:16,380
customer can feel the difference when

379
00:15:16,380 --> 00:15:18,540
we've moved to open firmware we want to

380
00:15:18,540 --> 00:15:21,300
be we want to show be the gold standard

381
00:15:21,300 --> 00:15:26,430
for a product with open firmware so I'm

382
00:15:26,430 --> 00:15:29,430
a byproduct of that and a shipping the

383
00:15:29,430 --> 00:15:30,960
daughter pro with open firmware means

384
00:15:30,960 --> 00:15:32,640
that all the things that Jeremy just

385
00:15:32,640 --> 00:15:35,430
described of memory initialization and

386
00:15:35,430 --> 00:15:39,450
and all the other functionality is it

387
00:15:39,450 --> 00:15:41,180
required if you want a hack on firmware

388
00:15:41,180 --> 00:15:43,860
so if you have a Tartar pro with the

389
00:15:43,860 --> 00:15:45,390
open firmware then all you have to do is

390
00:15:45,390 --> 00:15:49,529
download the git repository make changes

391
00:15:49,529 --> 00:15:51,660
that you'd like see and understand how

392
00:15:51,660 --> 00:15:53,910
the firmware operates and then reload it

393
00:15:53,910 --> 00:15:56,310
to your reload to your machine so a lot

394
00:15:56,310 --> 00:15:58,770
of the they differ the lower level

395
00:15:58,770 --> 00:16:00,089
difficult things it's just booting

396
00:16:00,089 --> 00:16:01,770
machine or out of the way and you can

397
00:16:01,770 --> 00:16:05,880
just get to get to hacking you will

398
00:16:05,880 --> 00:16:07,980
brick machines though it just happens

399
00:16:07,980 --> 00:16:10,320
it's a natural part of BIOS development

400
00:16:10,320 --> 00:16:12,959
so so you'd want to have one of these if

401
00:16:12,959 --> 00:16:14,540
you're doing that that development

402
00:16:14,540 --> 00:16:18,270
however what we will always like to do

403
00:16:18,270 --> 00:16:20,430
is for people that are doing firmware

404
00:16:20,430 --> 00:16:23,160
developments on the Tartar Pro we will

405
00:16:23,160 --> 00:16:26,640
test the firmware for you so if you if

406
00:16:26,640 --> 00:16:28,980
you build something you don't have a spy

407
00:16:28,980 --> 00:16:32,459
ROM set up then you can send us a

408
00:16:32,459 --> 00:16:33,690
firmware we'll make sure it boots for

409
00:16:33,690 --> 00:16:35,430
you and then we say yeah you're you're

410
00:16:35,430 --> 00:16:36,920
gonna be safe to go ahead and flash this

411
00:16:36,920 --> 00:16:40,170
that doesn't scale very widely but it's

412
00:16:40,170 --> 00:16:41,640
something that we want to start now and

413
00:16:41,640 --> 00:16:43,410
our my QC team is gonna hate me

414
00:16:43,410 --> 00:16:48,870
I don't think I can told them so but we

415
00:16:48,870 --> 00:16:49,980
think that that's an important part to

416
00:16:49,980 --> 00:16:51,930
kind of get this momentum moving and and

417
00:16:51,930 --> 00:16:53,490
get up and firmer and get more people

418
00:16:53,490 --> 00:16:55,350
hacking on it so you can feel more

419
00:16:55,350 --> 00:16:58,200
confident about about just experimenting

420
00:16:58,200 --> 00:16:59,580
with things and that you're not going to

421
00:16:59,580 --> 00:17:03,720
throw away a thousand dollar machine if

422
00:17:03,720 --> 00:17:07,829
you want to help okay so hackable

423
00:17:07,829 --> 00:17:09,689
computers hackable operating systems

424
00:17:09,689 --> 00:17:12,209
hackable things are the basis of our

425
00:17:12,209 --> 00:17:13,859
ethos is who we are and so what we care

426
00:17:13,859 --> 00:17:17,099
about so how do we build a secure system

427
00:17:17,099 --> 00:17:19,770
for hackable firmware you can't have

428
00:17:19,770 --> 00:17:22,170
boot guard obviously we don't want to

429
00:17:22,170 --> 00:17:24,000
lock down our devices in a way that

430
00:17:24,000 --> 00:17:25,949
people can't do things with them so we

431
00:17:25,949 --> 00:17:29,750
have some ideas about making security

432
00:17:29,750 --> 00:17:31,950
making good security in hackable

433
00:17:31,950 --> 00:17:35,220
firmware Jimmy kind of discuss that yeah

434
00:17:35,220 --> 00:17:38,670
so boot guard is a problem because you

435
00:17:38,670 --> 00:17:40,200
either leak the vendor keys so that

436
00:17:40,200 --> 00:17:42,210
other people can compile firmware that

437
00:17:42,210 --> 00:17:44,790
boots or you sign other people's

438
00:17:44,790 --> 00:17:46,290
firmware which is in essence the same

439
00:17:46,290 --> 00:17:49,049
exact thing because now you sign

440
00:17:49,049 --> 00:17:51,149
someone else's firmware it looks like it

441
00:17:51,149 --> 00:17:53,340
came from you so what we want to do is

442
00:17:53,340 --> 00:17:55,379
instead of using boot guard we want to

443
00:17:55,379 --> 00:17:57,419
use we're gonna use update capsule in

444
00:17:57,419 --> 00:17:59,639
this new firmware we're going to when

445
00:17:59,639 --> 00:18:02,190
the capsule comes in it will be checked

446
00:18:02,190 --> 00:18:04,860
against its signature but if there's a

447
00:18:04,860 --> 00:18:07,139
mismatch we're going to simply prompt

448
00:18:07,139 --> 00:18:09,899
the user to input a random number when

449
00:18:09,899 --> 00:18:11,759
the firmware doesn't match the vendor

450
00:18:11,759 --> 00:18:14,249
code when they do that and they press

451
00:18:14,249 --> 00:18:14,730
Enter

452
00:18:14,730 --> 00:18:16,649
it will flash the new firmware and if

453
00:18:16,649 --> 00:18:18,059
they've built the firmware with their

454
00:18:18,059 --> 00:18:20,369
own key as part of the BIOS they can

455
00:18:20,369 --> 00:18:22,080
keep reflashing on their own firmware

456
00:18:22,080 --> 00:18:24,690
track as much as they like and have have

457
00:18:24,690 --> 00:18:27,210
some level of proof that someone else

458
00:18:27,210 --> 00:18:29,039
hasn't flashed firmware that isn't

459
00:18:29,039 --> 00:18:31,409
signed with their own key doing this the

460
00:18:31,409 --> 00:18:34,039
only way to get bad firmware or

461
00:18:34,039 --> 00:18:35,999
malicious firmware is to use one of

462
00:18:35,999 --> 00:18:38,070
these devices and physically open the

463
00:18:38,070 --> 00:18:40,109
machine there will be no software update

464
00:18:40,109 --> 00:18:42,210
mechanism that can go through that

465
00:18:42,210 --> 00:18:44,789
process now of course with this you can

466
00:18:44,789 --> 00:18:47,070
actually simply remove that security

467
00:18:47,070 --> 00:18:49,799
feature if you want flash that firmware

468
00:18:49,799 --> 00:18:51,239
without the security feature and now you

469
00:18:51,239 --> 00:18:53,399
have it open up however you want by

470
00:18:53,399 --> 00:18:55,499
doing this you don't have to ask the

471
00:18:55,499 --> 00:18:58,009
vendor for signing your firmware and

472
00:18:58,009 --> 00:19:00,269
anybody can make their own firmware but

473
00:19:00,269 --> 00:19:02,159
you can also be sure that someone hasn't

474
00:19:02,159 --> 00:19:03,419
flashed for them without your consent

475
00:19:03,419 --> 00:19:06,779
right but that's that's that's one one

476
00:19:06,779 --> 00:19:08,609
idea but we're also very interested in

477
00:19:08,609 --> 00:19:10,289
in discussing with this community

478
00:19:10,289 --> 00:19:12,210
different ways to secure hackable

479
00:19:12,210 --> 00:19:13,769
firmware and so if this is something

480
00:19:13,769 --> 00:19:15,809
that's interesting to you please come up

481
00:19:15,809 --> 00:19:17,309
and let's have some conversations about

482
00:19:17,309 --> 00:19:18,389
it

483
00:19:18,389 --> 00:19:20,820
we talked about min platform and how

484
00:19:20,820 --> 00:19:23,580
it's its core purpose is only to bring

485
00:19:23,580 --> 00:19:25,230
up the hardware that means advanced

486
00:19:25,230 --> 00:19:27,149
features are any other anything else on

487
00:19:27,149 --> 00:19:29,070
top of that a BIOS screen is an advanced

488
00:19:29,070 --> 00:19:30,359
feature so that's something we've

489
00:19:30,359 --> 00:19:32,039
already implemented and implemented in a

490
00:19:32,039 --> 00:19:34,499
way that's reusable by people pixee

491
00:19:34,499 --> 00:19:36,570
booting is an advanced feature so that's

492
00:19:36,570 --> 00:19:38,909
a that would be a module that's added to

493
00:19:38,909 --> 00:19:44,100
moon platform and it's not there yet see

494
00:19:44,100 --> 00:19:46,710
yeah we do some things we make some

495
00:19:46,710 --> 00:19:48,269
guesses about the configuration like the

496
00:19:48,269 --> 00:19:50,940
CPU power levels so CPU power levels are

497
00:19:50,940 --> 00:19:52,619
determined on different things like the

498
00:19:52,619 --> 00:19:54,509
thermal capabilities of the chassis that

499
00:19:54,509 --> 00:19:56,369
they the processor and the chips that

500
00:19:56,369 --> 00:20:00,149
are housed in we're using the the power

501
00:20:00,149 --> 00:20:02,269
levels that are coming from the

502
00:20:02,269 --> 00:20:03,769
I urge a firmer and just copying those

503
00:20:03,769 --> 00:20:05,629
but we don't know how optimize those

504
00:20:05,629 --> 00:20:08,089
really are so if there's expertise in

505
00:20:08,089 --> 00:20:10,190
the room about optimizing CPU power

506
00:20:10,190 --> 00:20:12,139
levels and jessee's we'd love to talk to

507
00:20:12,139 --> 00:20:14,830
you about that as well improve

508
00:20:14,830 --> 00:20:17,049
improvements for the build process

509
00:20:17,049 --> 00:20:19,519
jeremy Zuma yeah currently we have

510
00:20:19,519 --> 00:20:22,249
several blobs that unfortunately have to

511
00:20:22,249 --> 00:20:23,690
be included in the firmware we have the

512
00:20:23,690 --> 00:20:26,570
Intel micro code which without actually

513
00:20:26,570 --> 00:20:28,369
having the microcode sometimes the FSP

514
00:20:28,369 --> 00:20:29,839
can't even run because you haven't

515
00:20:29,839 --> 00:20:32,239
loaded new enough micro code so we have

516
00:20:32,239 --> 00:20:34,039
a micro code which we get from Intel

517
00:20:34,039 --> 00:20:36,529
through a private micro code repository

518
00:20:36,529 --> 00:20:38,839
we have the FSP which we have source

519
00:20:38,839 --> 00:20:40,519
available but we're not allowed to share

520
00:20:40,519 --> 00:20:43,190
unfortunately and we have the ME which

521
00:20:43,190 --> 00:20:45,049
no one even at Intel really knows

522
00:20:45,049 --> 00:20:50,779
anything about it's scary but we we hope

523
00:20:50,779 --> 00:20:52,789
fingers crossed that setting the hat bid

524
00:20:52,789 --> 00:20:54,289
and removing a whole bunch of code from

525
00:20:54,289 --> 00:20:56,179
the from the ME actually does what it's

526
00:20:56,179 --> 00:20:57,499
supposed to do and it doesn't have like

527
00:20:57,499 --> 00:20:59,899
a secret ROM chip where it stores its

528
00:20:59,899 --> 00:21:03,919
super backdoor program but keeping that

529
00:21:03,919 --> 00:21:05,509
up today is important because if there

530
00:21:05,509 --> 00:21:07,969
is a vulnerability and in the in the

531
00:21:07,969 --> 00:21:10,339
buck in the ME which is the piece that

532
00:21:10,339 --> 00:21:12,589
runs to bootstrap the processor and has

533
00:21:12,589 --> 00:21:14,299
to run in order for the processor to

534
00:21:14,299 --> 00:21:15,469
boot

535
00:21:15,469 --> 00:21:17,450
if there is a vulnerability there and

536
00:21:17,450 --> 00:21:19,399
it's fixed by Intel we have to quickly

537
00:21:19,399 --> 00:21:20,899
and very quickly get it into our

538
00:21:20,899 --> 00:21:22,909
firmware so currently that's a pretty

539
00:21:22,909 --> 00:21:25,159
manual process you have to extract the

540
00:21:25,159 --> 00:21:26,959
settings because the Emme is actually

541
00:21:26,959 --> 00:21:28,879
transformed for every motherboard you

542
00:21:28,879 --> 00:21:31,459
have to extract the settings using a

543
00:21:31,459 --> 00:21:33,320
proprietary Intel tool and then apply

544
00:21:33,320 --> 00:21:35,359
those thanks to the new ME and then do

545
00:21:35,359 --> 00:21:36,409
QC on it

546
00:21:36,409 --> 00:21:39,200
and having that process of getting a new

547
00:21:39,200 --> 00:21:42,019
GOP getting a new Emmy and getting a new

548
00:21:42,019 --> 00:21:45,289
FS PB and microcode as B as quick as

549
00:21:45,289 --> 00:21:46,909
possible is something we still haven't

550
00:21:46,909 --> 00:21:48,559
figured out it's still a very manual

551
00:21:48,559 --> 00:21:51,679
process and sweet we're talking about

552
00:21:51,679 --> 00:21:54,409
about blobs here and they the fact that

553
00:21:54,409 --> 00:21:57,049
they exist I'm still extremely

554
00:21:57,049 --> 00:21:58,999
optimistic about the path that I've seen

555
00:21:58,999 --> 00:22:01,009
over the last 14 years they become

556
00:22:01,009 --> 00:22:02,659
smaller and smaller and smaller and now

557
00:22:02,659 --> 00:22:06,409
that Intel is is involved in developing

558
00:22:06,409 --> 00:22:08,719
open firmware so I hope that they see

559
00:22:08,719 --> 00:22:10,489
the light for these other things like

560
00:22:10,489 --> 00:22:13,159
the MA in other areas so we're only

561
00:22:13,159 --> 00:22:15,619
optimistic about what's what's possible

562
00:22:15,619 --> 00:22:16,400
and all

563
00:22:16,400 --> 00:22:20,480
things becoming more open okay so we're

564
00:22:20,480 --> 00:22:24,230
we're working people now this is the

565
00:22:24,230 --> 00:22:27,260
master repo it has get sub modules for

566
00:22:27,260 --> 00:22:29,560
every other related repository

567
00:22:29,560 --> 00:22:31,430
everything we're going to list after

568
00:22:31,430 --> 00:22:33,980
this is here we're gonna we're gonna

569
00:22:33,980 --> 00:22:35,750
come back to this slide so I'm gonna

570
00:22:35,750 --> 00:22:37,400
quickly go through the list of the other

571
00:22:37,400 --> 00:22:39,740
projects and then come back to here if

572
00:22:39,740 --> 00:22:42,080
you want to look at any webpage or

573
00:22:42,080 --> 00:22:43,730
anything this is where you should go

574
00:22:43,730 --> 00:22:44,360
first

575
00:22:44,360 --> 00:22:47,930
so system76 has developed quite a number

576
00:22:47,930 --> 00:22:50,900
of things for this open firmware we've

577
00:22:50,900 --> 00:22:52,700
developed our firmware setup menu our

578
00:22:52,700 --> 00:22:55,850
firmware updater we have a GOP policy

579
00:22:55,850 --> 00:22:58,010
driver which provides some board

580
00:22:58,010 --> 00:23:00,470
specific information to the Intel GOP

581
00:23:00,470 --> 00:23:03,530
driver which is the UEFI driver for the

582
00:23:03,530 --> 00:23:05,990
graphics we have an embed controller

583
00:23:05,990 --> 00:23:08,660
library that allows open source flashing

584
00:23:08,660 --> 00:23:10,700
of the embed controller we have a spy

585
00:23:10,700 --> 00:23:12,620
library that allows and these are rust

586
00:23:12,620 --> 00:23:14,960
libraries by the way every single one of

587
00:23:14,960 --> 00:23:16,820
the things listed here except the top

588
00:23:16,820 --> 00:23:19,240
thing that is simply a meta repo is

589
00:23:19,240 --> 00:23:23,540
written in rust so just so you know we

590
00:23:23,540 --> 00:23:27,380
have a spy chip library so you can flash

591
00:23:27,380 --> 00:23:29,780
the ROM and we have an EC emulator which

592
00:23:29,780 --> 00:23:31,640
I'm particularly proud of because of how

593
00:23:31,640 --> 00:23:33,680
ridiculous it was to set up as you've

594
00:23:33,680 --> 00:23:36,260
seen the documentation for the EC is

595
00:23:36,260 --> 00:23:38,240
completely confidential not only is it

596
00:23:38,240 --> 00:23:41,090
confidential it's super messy and nasty

597
00:23:41,090 --> 00:23:44,450
to read so in order to reverse engineer

598
00:23:44,450 --> 00:23:45,980
some of the things the embed controller

599
00:23:45,980 --> 00:23:49,580
does I decided you know I'm getting

600
00:23:49,580 --> 00:23:52,100
really tired of not being able to

601
00:23:52,100 --> 00:23:53,930
inspect the communication and I'm not

602
00:23:53,930 --> 00:23:56,210
gonna be able to like cut the OPC lines

603
00:23:56,210 --> 00:23:58,430
on the motherboard and splice into them

604
00:23:58,430 --> 00:24:02,150
so what I did was I wrote an emulator

605
00:24:02,150 --> 00:24:04,010
for the embedded controller and then I

606
00:24:04,010 --> 00:24:07,630
took kaymu which is an emulator and I

607
00:24:07,630 --> 00:24:10,940
wrote a little driver that sockets over

608
00:24:10,940 --> 00:24:13,640
to the simulator of the EC and it sends

609
00:24:13,640 --> 00:24:16,940
all the LPC traffic from the emulated

610
00:24:16,940 --> 00:24:18,530
version of the firmware

611
00:24:18,530 --> 00:24:20,840
over to the simulant to the emulator of

612
00:24:20,840 --> 00:24:23,480
the embedded controller which is using

613
00:24:23,480 --> 00:24:26,060
an 8051 processor and then has a bunch

614
00:24:26,060 --> 00:24:29,090
of other nasty stupid vendors specific

615
00:24:29,090 --> 00:24:30,230
stuff for like fans

616
00:24:30,230 --> 00:24:32,720
and stuff and then I can see the

617
00:24:32,720 --> 00:24:35,059
protocol that that the proprietary

618
00:24:35,059 --> 00:24:36,830
firmware uses and I can reverse-engineer

619
00:24:36,830 --> 00:24:39,890
it and I can develop our own stuff now a

620
00:24:39,890 --> 00:24:42,590
lot of this work has been done under my

621
00:24:42,590 --> 00:24:45,860
alter-ego as well I I am the maintainer

622
00:24:45,860 --> 00:24:49,419
and BD FL of redox OS which is a a rust

623
00:24:49,419 --> 00:24:51,380
operating system we we have a

624
00:24:51,380 --> 00:24:53,179
microkernel all of the drivers are

625
00:24:53,179 --> 00:24:56,030
written in user space and in rust and

626
00:24:56,030 --> 00:24:58,760
what what I wanted for redox was very

627
00:24:58,760 --> 00:25:00,850
similar to what we wanted at system 76

628
00:25:00,850 --> 00:25:04,280
we wanted UEFI and rust to work together

629
00:25:04,280 --> 00:25:06,260
flawlessly we want coreboot and rust to

630
00:25:06,260 --> 00:25:08,419
work together flawlessly so I wrote a

631
00:25:08,419 --> 00:25:10,309
library for accessing the core root

632
00:25:10,309 --> 00:25:12,470
filesystem I wrote a library for parsing

633
00:25:12,470 --> 00:25:15,710
coreboot table DMI tables Intel firmware

634
00:25:15,710 --> 00:25:19,429
images then there's a rust UEFI library

635
00:25:19,429 --> 00:25:22,190
for defining all of the UEFI standard

636
00:25:22,190 --> 00:25:24,740
and arrest you if I standard library for

637
00:25:24,740 --> 00:25:26,900
providing what is essentially the rust

638
00:25:26,900 --> 00:25:30,400
standard library in it for a UEFI target

639
00:25:30,400 --> 00:25:33,080
and then there's third parties and these

640
00:25:33,080 --> 00:25:34,490
are some of the more important things

641
00:25:34,490 --> 00:25:36,020
because without this we have really

642
00:25:36,020 --> 00:25:38,990
nothing coreboot of course we're using

643
00:25:38,990 --> 00:25:41,240
coreboot for for platform in it for this

644
00:25:41,240 --> 00:25:44,840
for this device we have a fork where we

645
00:25:44,840 --> 00:25:47,270
maintain our latest mainboard stuff we

646
00:25:47,270 --> 00:25:48,710
still need to clean up the mainboard and

647
00:25:48,710 --> 00:25:51,980
get it upstream that is a process of by

648
00:25:51,980 --> 00:25:53,570
the time we figure out a couple more

649
00:25:53,570 --> 00:25:55,880
bugs we're going to submit this upstream

650
00:25:55,880 --> 00:25:58,520
and start using the upstream repo as the

651
00:25:58,520 --> 00:26:01,340
definition for where to get the coreboot

652
00:26:01,340 --> 00:26:04,309
piece of this then we have e DK 2 which

653
00:26:04,309 --> 00:26:09,140
is the the UEFI libraries and you fi

654
00:26:09,140 --> 00:26:11,750
drivers so our payload for coreboot is

655
00:26:11,750 --> 00:26:15,590
currently e TK 2 we have the Intel FS P

656
00:26:15,590 --> 00:26:18,500
which is important for for coreboot to

657
00:26:18,500 --> 00:26:23,540
init on this platform and then something

658
00:26:23,540 --> 00:26:27,169
that we will get more into later down

659
00:26:27,169 --> 00:26:29,299
the line is min platform so as we work

660
00:26:29,299 --> 00:26:31,580
in tangent with Intel we're developing

661
00:26:31,580 --> 00:26:34,280
this e TK two platforms repo where min

662
00:26:34,280 --> 00:26:38,480
platform their platform in it for UEFI

663
00:26:38,480 --> 00:26:40,669
their open source platform in it which

664
00:26:40,669 --> 00:26:42,980
which is really cool they want the

665
00:26:42,980 --> 00:26:43,970
standard for you

666
00:26:43,970 --> 00:26:47,210
fi BIOS to the open source and this will

667
00:26:47,210 --> 00:26:50,660
hopefully hopefully up in the UEFI

668
00:26:50,660 --> 00:26:53,510
market I'm not entirely optimistic yet

669
00:26:53,510 --> 00:26:56,990
because I don't see inside or am I going

670
00:26:56,990 --> 00:26:59,210
anywhere even though the stuff they

671
00:26:59,210 --> 00:27:02,630
create is terrible and never works but

672
00:27:02,630 --> 00:27:04,160
they do have quite a big hold on the

673
00:27:04,160 --> 00:27:06,140
industry but at the very least we hope

674
00:27:06,140 --> 00:27:08,030
that they'll be using min platform as

675
00:27:08,030 --> 00:27:11,270
the platform in it and that a big

676
00:27:11,270 --> 00:27:13,190
portion of the stuff required to bring

677
00:27:13,190 --> 00:27:15,410
up an Intel motherboard will be open

678
00:27:15,410 --> 00:27:18,680
source and and by default

679
00:27:18,680 --> 00:27:21,890
yeah and I'll take you back to the main

680
00:27:21,890 --> 00:27:24,380
repo so you can take pictures to write

681
00:27:24,380 --> 00:27:28,390
it down or whatever and we spoke quickly

682
00:27:28,390 --> 00:27:30,860
so there's a lot of time left we hope

683
00:27:30,860 --> 00:27:34,370
you guys have questions if you have any

684
00:27:34,370 --> 00:27:35,930
questions you can to go to the

685
00:27:35,930 --> 00:27:37,640
microphones to the sign up microphones

686
00:27:37,640 --> 00:27:40,520
and have them so we have all questions

687
00:27:40,520 --> 00:27:51,740
recorded how big is the flash part 16

688
00:27:51,740 --> 00:28:00,860
Meg on this model it can be a lot bigger

689
00:28:00,860 --> 00:28:04,010
boy I'm thinking about I'm thinking

690
00:28:04,010 --> 00:28:06,920
about gigabyte flashes when we do our

691
00:28:06,920 --> 00:28:14,930
own when we do our own board yeah so the

692
00:28:14,930 --> 00:28:15,950
microphones are not biting

693
00:28:15,950 --> 00:28:18,920
maybe I checked so is this a sort of

694
00:28:18,920 --> 00:28:23,390
boot at the moment yes it is core boot

695
00:28:23,390 --> 00:28:26,180
is the platform in it and the bootloader

696
00:28:26,180 --> 00:28:29,600
for the payload that is UEFI so how you

697
00:28:29,600 --> 00:28:31,730
see the direction of code would end from

698
00:28:31,730 --> 00:28:34,820
the open going together or well men

699
00:28:34,820 --> 00:28:36,800
platform would replace core boot and

700
00:28:36,800 --> 00:28:40,610
what what I see personally is I'm really

701
00:28:40,610 --> 00:28:42,260
excited by coreboot I really like core

702
00:28:42,260 --> 00:28:44,720
boot so even if we're not maintaining it

703
00:28:44,720 --> 00:28:49,040
as as our system 76 default firmer I

704
00:28:49,040 --> 00:28:51,290
would like to maintain core boot support

705
00:28:51,290 --> 00:28:53,180
going forward so that all the payloads

706
00:28:53,180 --> 00:28:56,840
available in core boot Linux and redox

707
00:28:56,840 --> 00:28:57,800
is actually a pale

708
00:28:57,800 --> 00:29:00,440
for for coreboot right now not in the

709
00:29:00,440 --> 00:29:02,090
upstream but we can talk about that

710
00:29:02,090 --> 00:29:07,760
later and see bios lasting as you

711
00:29:07,760 --> 00:29:09,950
mentioned that you are using the user

712
00:29:09,950 --> 00:29:11,810
space driver any reason for that not

713
00:29:11,810 --> 00:29:13,790
being in the canal redox is a

714
00:29:13,790 --> 00:29:16,010
microkernel that's that's why the it's

715
00:29:16,010 --> 00:29:18,680
not related to this so we're not doing

716
00:29:18,680 --> 00:29:21,260
we're not doing user space in firmware I

717
00:29:21,260 --> 00:29:22,850
don't think that makes sense

718
00:29:22,850 --> 00:29:24,670
firmware should really only be

719
00:29:24,670 --> 00:29:27,710
initialization not runtime components so

720
00:29:27,710 --> 00:29:31,430
it starts something that runs in in ring

721
00:29:31,430 --> 00:29:34,280
zero and then ring zero starts up ring

722
00:29:34,280 --> 00:29:38,270
three I awesome stuff the set of things

723
00:29:38,270 --> 00:29:39,860
that you're trying to have open is this

724
00:29:39,860 --> 00:29:42,020
only stuff that runs in the main CPU for

725
00:29:42,020 --> 00:29:43,610
plot for a minute or also the embedded

726
00:29:43,610 --> 00:29:46,310
controller firmware there so with the

727
00:29:46,310 --> 00:29:48,290
extremely high quality and I say high

728
00:29:48,290 --> 00:29:51,290
quality because I wrote it embedded

729
00:29:51,290 --> 00:29:54,320
controller simulator my my boot and

730
00:29:54,320 --> 00:29:57,320
we're also you know this is easy peasy

731
00:29:57,320 --> 00:30:00,830
lemon squeezy okay flashing an embedded

732
00:30:00,830 --> 00:30:03,710
controller using ISP it actually

733
00:30:03,710 --> 00:30:05,600
connects through the keyboard matrix and

734
00:30:05,600 --> 00:30:08,480
then connects to like three other chips

735
00:30:08,480 --> 00:30:10,820
that are all proprietary who knows what

736
00:30:10,820 --> 00:30:12,470
they use and then there's a Windows

737
00:30:12,470 --> 00:30:15,080
piece of software so that you can flash

738
00:30:15,080 --> 00:30:16,760
the embedded controller when we do our

739
00:30:16,760 --> 00:30:18,440
own motherboard we are gonna use

740
00:30:18,440 --> 00:30:20,180
something that you can flash more easily

741
00:30:20,180 --> 00:30:23,060
and hopefully the the EC firmware will

742
00:30:23,060 --> 00:30:25,550
be on the spy ROM so it's a lot more

743
00:30:25,550 --> 00:30:27,890
difficult to experiment with EC firmware

744
00:30:27,890 --> 00:30:30,020
but because we have this simulator and

745
00:30:30,020 --> 00:30:32,090
because we're going to have the ability

746
00:30:32,090 --> 00:30:34,100
to flash the embedded controller using a

747
00:30:34,100 --> 00:30:38,450
in system programming I do expect to to

748
00:30:38,450 --> 00:30:41,360
try to create open source easy firmware

749
00:30:41,360 --> 00:30:46,910
yeah so this is a good follow up because

750
00:30:46,910 --> 00:30:49,010
I wanted to ask about what you plan to

751
00:30:49,010 --> 00:30:51,530
do when you switch from using the odium

752
00:30:51,530 --> 00:30:53,000
model to designing your own board

753
00:30:53,000 --> 00:30:54,800
hopefully one of those things is like

754
00:30:54,800 --> 00:30:58,070
USB 3 DC ID bugging but what other

755
00:30:58,070 --> 00:31:00,080
things are you what like what's gonna

756
00:31:00,080 --> 00:31:01,430
motivate you to really change over to

757
00:31:01,430 --> 00:31:02,720
your on board what improvements can you

758
00:31:02,720 --> 00:31:05,060
make yeah the the main motivation it's

759
00:31:05,060 --> 00:31:07,100
it's gonna be done in kicad hopefully

760
00:31:07,100 --> 00:31:10,100
and it's going to be a GPL 3 design so

761
00:31:10,100 --> 00:31:11,799
that's the main motivation

762
00:31:11,799 --> 00:31:14,140
a design that we own that's open-source

763
00:31:14,140 --> 00:31:16,000
I should've been hardware to expand on

764
00:31:16,000 --> 00:31:17,350
that just a we've been working on

765
00:31:17,350 --> 00:31:18,909
shipping away open-source not just in

766
00:31:18,909 --> 00:31:20,440
the operating system but on the hardware

767
00:31:20,440 --> 00:31:22,779
side as well so we've recently designed

768
00:31:22,779 --> 00:31:25,809
our own in-house a desktop computer as

769
00:31:25,809 --> 00:31:28,000
well as i/o controllers and that all of

770
00:31:28,000 --> 00:31:29,770
that work is open source so it's open

771
00:31:29,770 --> 00:31:31,929
hardware and open software together and

772
00:31:31,929 --> 00:31:34,659
open firmware on the Ryo controller and

773
00:31:34,659 --> 00:31:37,630
open firmware this is extending that

774
00:31:37,630 --> 00:31:39,549
effort so that the more of the stack

775
00:31:39,549 --> 00:31:40,990
from the hardware all the way off is

776
00:31:40,990 --> 00:31:48,250
open source thanks for another

777
00:31:48,250 --> 00:31:51,130
questioners is really yeah um so it is

778
00:31:51,130 --> 00:31:53,080
sort of a slightly different sin curd to

779
00:31:53,080 --> 00:31:56,140
me in different since philosophy with

780
00:31:56,140 --> 00:31:59,860
your with your um the things you're

781
00:31:59,860 --> 00:32:02,470
doing so what we're doing kind of in

782
00:32:02,470 --> 00:32:05,140
Linux food and I may be arguably in the

783
00:32:05,140 --> 00:32:08,679
chrome core boot is depth charge well no

784
00:32:08,679 --> 00:32:10,419
fraid about that's charge but we tend to

785
00:32:10,419 --> 00:32:11,860
move a lot of these sort of dialogue

786
00:32:11,860 --> 00:32:14,919
type things off into the domain of Linux

787
00:32:14,919 --> 00:32:16,630
in other words you want to minimize the

788
00:32:16,630 --> 00:32:18,070
number of things you're running in rings

789
00:32:18,070 --> 00:32:20,140
here oh you know yeah sure the firmware

790
00:32:20,140 --> 00:32:22,360
but if I read what you were saying right

791
00:32:22,360 --> 00:32:24,340
it's sort of you're you're you're

792
00:32:24,340 --> 00:32:26,140
growing that number of things but in a

793
00:32:26,140 --> 00:32:27,789
safe language I was just kind of curious

794
00:32:27,789 --> 00:32:30,520
about your thoughts about the two

795
00:32:30,520 --> 00:32:32,710
approaches yeah that's a good point we

796
00:32:32,710 --> 00:32:36,130
could we could remove more and more and

797
00:32:36,130 --> 00:32:38,309
more from the firmware and we could have

798
00:32:38,309 --> 00:32:40,899
why are we doing anything UEFI that's

799
00:32:40,899 --> 00:32:43,539
okay why not do it in Linux

800
00:32:43,539 --> 00:32:47,049
part of it is UEFI is the standard that

801
00:32:47,049 --> 00:32:48,610
gets us to booting every operating

802
00:32:48,610 --> 00:32:51,820
system and Linux boot is really great

803
00:32:51,820 --> 00:32:55,390
Linux using Linux as the firmware so

804
00:32:55,390 --> 00:32:57,159
that you can k exec and other Linux is

805
00:32:57,159 --> 00:33:00,100
probably the fastest most reliable way

806
00:33:00,100 --> 00:33:03,520
to get up to a Linux user space it's

807
00:33:03,520 --> 00:33:05,980
just not something that boots absolutely

808
00:33:05,980 --> 00:33:08,409
everything unless you root provides an

809
00:33:08,409 --> 00:33:12,130
EFI implementation so does that make

810
00:33:12,130 --> 00:33:13,620
sense

811
00:33:13,620 --> 00:33:16,929
yeah you're booting Windows how with a

812
00:33:16,929 --> 00:33:22,120
EFI implementation yep so maybe that's

813
00:33:22,120 --> 00:33:24,750
something we investigate

814
00:33:24,750 --> 00:33:26,760
that's that's the reason we have any fi

815
00:33:26,760 --> 00:33:29,850
implementation it comes by default with

816
00:33:29,850 --> 00:33:33,030
with Tiano core it has a setup menu

817
00:33:33,030 --> 00:33:35,910
that's blue and ugly and always at 800

818
00:33:35,910 --> 00:33:40,070
by 600 or worse which then the the

819
00:33:40,070 --> 00:33:43,170
independent BIOS vendors take that and

820
00:33:43,170 --> 00:33:45,570
make it even uglier and I don't know a

821
00:33:45,570 --> 00:33:48,150
single product that has absolutely you

822
00:33:48,150 --> 00:33:52,800
know ff0000 as their dominant color

823
00:33:52,800 --> 00:33:54,750
because all the BIOS is seem to think

824
00:33:54,750 --> 00:33:57,060
that is the case because they use this

825
00:33:57,060 --> 00:33:59,640
ugly gray for all of the menus and this

826
00:33:59,640 --> 00:34:01,800
ugly blue and they don't make they don't

827
00:34:01,800 --> 00:34:04,710
really work at all so it's poor taste so

828
00:34:04,710 --> 00:34:08,030
all we've done with the firmware 7 is

829
00:34:08,030 --> 00:34:10,620
all we've done is make it high DPI

830
00:34:10,620 --> 00:34:14,280
capable which the the interface is not

831
00:34:14,280 --> 00:34:16,409
by default make it always native

832
00:34:16,409 --> 00:34:18,780
resolution make it extremely high

833
00:34:18,780 --> 00:34:22,800
quality font rendering and show the

834
00:34:22,800 --> 00:34:25,050
default Tiano core menu and thimble

835
00:34:25,050 --> 00:34:27,210
anthemic oh yes basics we have a brand

836
00:34:27,210 --> 00:34:28,800
we have a style that it's gonna

837
00:34:28,800 --> 00:34:31,379
represent our brand and style but anyone

838
00:34:31,379 --> 00:34:32,580
else that picks it up and changes out

839
00:34:32,580 --> 00:34:34,020
the color palettes will represent their

840
00:34:34,020 --> 00:34:37,860
brand new style as well yes so kind of

841
00:34:37,860 --> 00:34:41,060
slightly off topic I was just curious I

842
00:34:41,060 --> 00:34:43,649
realized no one ever does any laptop or

843
00:34:43,649 --> 00:34:45,540
desktop stuff under the Open Compute

844
00:34:45,540 --> 00:34:47,340
manner would that be something you're

845
00:34:47,340 --> 00:34:49,379
interested in or just stay with GPL 3

846
00:34:49,379 --> 00:34:52,469
and go your own way oh so men platform

847
00:34:52,469 --> 00:34:54,750
is BSD licensed I don't know if that's

848
00:34:54,750 --> 00:34:58,830
compatible with you and then edk 2 is is

849
00:34:58,830 --> 00:34:59,550
similar

850
00:34:59,550 --> 00:35:03,780
yes D license so we right now coreboot

851
00:35:03,780 --> 00:35:07,530
is GPL 3 it boots a payload that is this

852
00:35:07,530 --> 00:35:09,990
BSD I'm specifically thinking the

853
00:35:09,990 --> 00:35:13,680
hardware yeah oh yeah what we've I knew

854
00:35:13,680 --> 00:35:15,660
bless entourage WA the open source

855
00:35:15,660 --> 00:35:17,580
hardware Association and we believe they

856
00:35:17,580 --> 00:35:19,170
have a lot of good momentum and it's a

857
00:35:19,170 --> 00:35:21,750
it's nice community to work within but

858
00:35:21,750 --> 00:35:24,260
we're we're also open to - you know all

859
00:35:24,260 --> 00:35:30,660
open communities so we'd look at it I

860
00:35:30,660 --> 00:35:33,510
just have a curiosity about using the

861
00:35:33,510 --> 00:35:35,640
code but is there any plan to use a new

862
00:35:35,640 --> 00:35:38,910
boot on top of EFI are

863
00:35:38,910 --> 00:35:42,779
Dylan not at the moment on x86 the last

864
00:35:42,779 --> 00:35:44,759
time I tried you booted was was not a

865
00:35:44,759 --> 00:35:45,539
good experience

866
00:35:45,539 --> 00:35:48,690
okay so x86 will probably support a new

867
00:35:48,690 --> 00:35:51,470
boot will probably build quickly but

868
00:35:51,470 --> 00:35:54,599
right now efi allowed us to boot

869
00:35:54,599 --> 00:35:56,250
all of the operating systems that we

870
00:35:56,250 --> 00:36:02,250
need to provide support for okay all

871
00:36:02,250 --> 00:36:05,250
right any other questions all right

872
00:36:05,250 --> 00:36:06,920
thank you everyone

873
00:36:06,920 --> 00:36:09,680
[Applause]

874
00:36:09,680 --> 00:36:17,490
[Music]

