1
00:00:03,190 --> 00:00:06,259
[Music]

2
00:00:07,400 --> 00:00:09,809
so the next half hour Morgan and

3
00:00:09,809 --> 00:00:13,530
Jonathan and they were talking about

4
00:00:13,530 --> 00:00:15,120
really exciting some really exciting

5
00:00:15,120 --> 00:00:18,990
stuff so Morgan is talking we're talking

6
00:00:18,990 --> 00:00:21,150
about some exciting stuff that happened

7
00:00:21,150 --> 00:00:26,369
at at the Open Compute Project regarding

8
00:00:26,369 --> 00:00:27,930
the Open Compute projects I'm really

9
00:00:27,930 --> 00:00:30,689
exciting hardware stuff and after that

10
00:00:30,689 --> 00:00:34,260
there will be a recap of what happened

11
00:00:34,260 --> 00:00:37,980
at Facebook with open source firmware in

12
00:00:37,980 --> 00:00:40,340
general so in general really generalized

13
00:00:40,340 --> 00:00:43,500
overview and some news about what's

14
00:00:43,500 --> 00:00:45,030
what's really happening so we're going

15
00:00:45,030 --> 00:00:47,579
to get some insights so yeah let's fire

16
00:00:47,579 --> 00:00:49,379
it up and ever a big round of applause

17
00:00:49,379 --> 00:01:01,620
for Morgan and Jonathan hi everyone my

18
00:01:01,620 --> 00:01:07,080
name is Morgan I I am a bicycle engineer

19
00:01:07,080 --> 00:01:09,119
and response folder of a system for my

20
00:01:09,119 --> 00:01:12,060
project in one way and then and now I'm

21
00:01:12,060 --> 00:01:15,210
talking about the Tioga Pass authoring

22
00:01:15,210 --> 00:01:17,549
and building instruction for nearest

23
00:01:17,549 --> 00:01:25,049
boot here's the agenda the first I would

24
00:01:25,049 --> 00:01:29,009
talk about the hyper brief introduction

25
00:01:29,009 --> 00:01:32,610
in a talk about how to have a retire

26
00:01:32,610 --> 00:01:35,280
order for tioga pass and narrative next

27
00:01:35,280 --> 00:01:37,829
is for building process of nearest boots

28
00:01:37,829 --> 00:01:40,590
for gel compost and the final is for

29
00:01:40,590 --> 00:01:43,049
women's organization for already trained

30
00:01:43,049 --> 00:01:49,920
from 2019 to 10 if only one women is a

31
00:01:49,920 --> 00:01:52,740
cloud infrastructure provider that

32
00:01:52,740 --> 00:01:55,049
develops high-density computing and

33
00:01:55,049 --> 00:01:57,899
storage products and we also have Rick

34
00:01:57,899 --> 00:02:01,290
solution for Tara strangers we are

35
00:02:01,290 --> 00:02:04,610
working with customers to enable

36
00:02:04,610 --> 00:02:09,679
opposites and firmware in our products

37
00:02:09,679 --> 00:02:12,379
including a nice boot and

38
00:02:12,379 --> 00:02:19,099
this foundation open BMC telepath is one

39
00:02:19,099 --> 00:02:22,010
of women is aa sleepy server products

40
00:02:22,010 --> 00:02:25,959
and includes Intel skylake SP processor

41
00:02:25,959 --> 00:02:30,379
and Risberg PCH you can find more

42
00:02:30,379 --> 00:02:34,519
information and we website we have

43
00:02:34,519 --> 00:02:36,889
purified telepaths can be powered with

44
00:02:36,889 --> 00:02:40,659
nearest booth buyers for rate high order

45
00:02:40,659 --> 00:02:44,689
you can connect check ad folder detailed

46
00:02:44,689 --> 00:02:49,989
information here's the keyboardist for

47
00:02:49,989 --> 00:02:55,060
tioga pass you can find information of

48
00:02:55,060 --> 00:02:59,810
processor memory chips say an expansion

49
00:02:59,810 --> 00:03:04,430
slot we have a we have a demo tomorrow

50
00:03:04,430 --> 00:03:08,709
in facebook please welcome to see it

51
00:03:09,219 --> 00:03:13,849
about nice boot on KOCO pass we use near

52
00:03:13,849 --> 00:03:17,810
sports on UEFI and the framework of a

53
00:03:17,810 --> 00:03:20,840
nice boots on UEFI was present in the

54
00:03:20,840 --> 00:03:21,919
last year

55
00:03:21,919 --> 00:03:27,650
you can refuel on youtube so i will give

56
00:03:27,650 --> 00:03:31,180
a brief of view here

57
00:03:31,180 --> 00:03:34,759
the first one it shred the necessary

58
00:03:34,759 --> 00:03:37,280
from with forums from unified by us for

59
00:03:37,280 --> 00:03:41,389
initializing the platform like

60
00:03:41,389 --> 00:03:45,229
initialize spi tables the second one

61
00:03:45,229 --> 00:03:48,769
next boot is excluded as an EFI

62
00:03:48,769 --> 00:03:53,780
application so the Patrol is like the

63
00:03:53,780 --> 00:03:56,419
system boots from minimize us by and

64
00:03:56,419 --> 00:04:00,889
then execute a nice boot and the final

65
00:04:00,889 --> 00:04:07,669
is target OS if the falling is talking

66
00:04:07,669 --> 00:04:11,419
about how to build a nice boot for tioga

67
00:04:11,419 --> 00:04:15,560
pass first of course you have styled a

68
00:04:15,560 --> 00:04:18,790
building package a second

69
00:04:18,790 --> 00:04:20,610
you need to get the page for

70
00:04:20,610 --> 00:04:23,920
billionaires boot for tioga pass I will

71
00:04:23,920 --> 00:04:28,980
talk about this page later third

72
00:04:28,980 --> 00:04:31,630
peut-être image for nice boot you can

73
00:04:31,630 --> 00:04:36,010
refute really Corrine referred refer to

74
00:04:36,010 --> 00:04:41,140
the building guy post trace the Europe a

75
00:04:41,140 --> 00:04:44,740
path of telepaths and peace image into

76
00:04:44,740 --> 00:04:50,770
the building package peeps start to

77
00:04:50,770 --> 00:04:54,130
build the nearest booth buyers and you

78
00:04:54,130 --> 00:04:56,140
can get the news both buyers at this

79
00:04:56,140 --> 00:05:04,080
past here at here are the notes first

80
00:05:04,080 --> 00:05:08,590
you need to config this come via tooth

81
00:05:08,590 --> 00:05:11,410
said - yes internal config for making

82
00:05:11,410 --> 00:05:14,830
nice boots as an EFI application before

83
00:05:14,830 --> 00:05:18,420
building PC image

84
00:05:18,420 --> 00:05:22,570
second the unify of TTL go path is

85
00:05:22,570 --> 00:05:25,800
provided from wing wing after all during

86
00:05:25,800 --> 00:05:28,960
certain you may also find the further

87
00:05:28,960 --> 00:05:32,729
information from this link

88
00:05:34,620 --> 00:05:37,980
ok let's talk about the page 40 of us on

89
00:05:37,980 --> 00:05:43,270
the list put on tioga pass the patch is

90
00:05:43,270 --> 00:05:46,750
fixed two issues the first one is a

91
00:05:46,750 --> 00:05:50,260
unified BIOS 40 octopus has profiled as

92
00:05:50,260 --> 00:05:53,890
mm a compressor sections which are not

93
00:05:53,890 --> 00:05:55,990
supported by the indicator ticks a call

94
00:05:55,990 --> 00:05:59,500
so this whole doesn't hold any pixie and

95
00:05:59,500 --> 00:06:04,710
SMN modules so we need to add the

96
00:06:04,710 --> 00:06:08,320
parameter repacked for the compressing

97
00:06:08,320 --> 00:06:12,970
the LCME sections after doing this the

98
00:06:12,970 --> 00:06:17,560
Texaco can load the modules directly the

99
00:06:17,560 --> 00:06:20,860
second you see the second issue is some

100
00:06:20,860 --> 00:06:23,320
necessary functions are now ready like

101
00:06:23,320 --> 00:06:24,310
spi tables

102
00:06:24,310 --> 00:06:27,730
pichia immigration but lease boot is

103
00:06:27,730 --> 00:06:30,360
already loaded

104
00:06:30,810 --> 00:06:33,750
this is because the lake of dependency

105
00:06:33,750 --> 00:06:39,360
for nearly is execute we need to add

106
00:06:39,360 --> 00:06:42,030
more dependency for prevent in this boot

107
00:06:42,030 --> 00:06:50,280
loaded too early the final is for open

108
00:06:50,280 --> 00:06:52,320
Stephen Turner already played Uncle Al

109
00:06:52,320 --> 00:06:56,280
Kooper Lake platform in 2019 we develop

110
00:06:56,280 --> 00:06:58,980
the pictures on Mille electron first

111
00:06:58,980 --> 00:07:02,730
because the cooperate cooperate reform

112
00:07:02,730 --> 00:07:06,570
is now ready yet we would like to remove

113
00:07:06,570 --> 00:07:11,669
these features to collect a phone after

114
00:07:11,669 --> 00:07:16,530
the after we bring up the platform in

115
00:07:16,530 --> 00:07:19,260
2020 we would like to get these pictures

116
00:07:19,260 --> 00:07:22,830
ready like how we're related features

117
00:07:22,830 --> 00:07:26,070
Leslie Lexi pious functions and all

118
00:07:26,070 --> 00:07:32,490
young teachers in 2021 we would like to

119
00:07:32,490 --> 00:07:34,470
get open system Tory ready for

120
00:07:34,470 --> 00:07:47,100
protection thank you thank Sam Morgan

121
00:07:47,100 --> 00:07:49,650
and we give my name is Janice and by the

122
00:07:49,650 --> 00:07:51,180
way I'm not from wearing in-ear in

123
00:07:51,180 --> 00:07:55,770
facebook so we know what they are doing

124
00:07:55,770 --> 00:07:59,330
is is great this is actually first time

125
00:07:59,330 --> 00:08:02,729
you can bang off shelf of the Shelf OCP

126
00:08:02,729 --> 00:08:05,880
platform from the market to actually you

127
00:08:05,880 --> 00:08:07,290
don't have to order hundreds of

128
00:08:07,290 --> 00:08:09,540
thousands like Facebook does orders

129
00:08:09,540 --> 00:08:11,430
hundreds of thousands from way way you

130
00:08:11,430 --> 00:08:14,540
can just by Y play with it right and

131
00:08:14,540 --> 00:08:17,640
when we also get all of job work that

132
00:08:17,640 --> 00:08:20,729
non Linux boots work sign with just a

133
00:08:20,729 --> 00:08:23,850
few instructions download and then you

134
00:08:23,850 --> 00:08:25,830
build and then you can write and then

135
00:08:25,830 --> 00:08:27,840
you can customize it play with it so

136
00:08:27,840 --> 00:08:31,350
that's great so so my part of the

137
00:08:31,350 --> 00:08:36,210
presentation will be first give a status

138
00:08:36,210 --> 00:08:38,490
update so what Facebook is doing in

139
00:08:38,490 --> 00:08:40,650
terms of thermal development so Facebook

140
00:08:40,650 --> 00:08:42,958
is not further development house right

141
00:08:42,958 --> 00:08:44,490
but we are

142
00:08:44,490 --> 00:08:47,730
going to be one of them so why we are

143
00:08:47,730 --> 00:08:52,680
doing that and then we talk about for

144
00:08:52,680 --> 00:08:55,770
our stack of the firmware what is the

145
00:08:55,770 --> 00:08:58,500
build system design and how we plan to

146
00:08:58,500 --> 00:09:01,290
enable our partners and work with the

147
00:09:01,290 --> 00:09:07,230
community so getting a community or a

148
00:09:07,230 --> 00:09:09,510
Burin communities is vital to our

149
00:09:09,510 --> 00:09:11,810
success

150
00:09:11,810 --> 00:09:16,200
so in this book right now we are doing a

151
00:09:16,200 --> 00:09:20,340
network server deploy so if you remember

152
00:09:20,340 --> 00:09:21,900
that yesterday morning

153
00:09:21,900 --> 00:09:26,610
van ronk had cooked right so that was a

154
00:09:26,610 --> 00:09:28,920
last-minute front or our networking team

155
00:09:28,920 --> 00:09:32,430
that the build a new switch is great is

156
00:09:32,430 --> 00:09:34,380
a shiny new switch that comes with a new

157
00:09:34,380 --> 00:09:37,140
firmware so which runs on core boot

158
00:09:37,140 --> 00:09:43,410
Linux boot open Cellular so in OCP they

159
00:09:43,410 --> 00:09:46,350
are to open cellular project we build

160
00:09:46,350 --> 00:09:50,700
those open cellular devices worldwide so

161
00:09:50,700 --> 00:09:52,380
that billions of people can connect with

162
00:09:52,380 --> 00:09:54,060
each other what's running in the open

163
00:09:54,060 --> 00:09:56,760
cellular devices core boots in expert

164
00:09:56,760 --> 00:09:59,880
today are deploying now in our

165
00:09:59,880 --> 00:10:01,800
conference room there are thousands of

166
00:10:01,800 --> 00:10:04,830
devices like this you can play with it

167
00:10:04,830 --> 00:10:08,340
you can make a video calls Lear on core

168
00:10:08,340 --> 00:10:13,200
Linux good so we are not stopping there

169
00:10:13,200 --> 00:10:15,180
we're working on computer and storage

170
00:10:15,180 --> 00:10:20,070
servers so our next goal is in data

171
00:10:20,070 --> 00:10:23,000
center meanings of devices in our fleet

172
00:10:23,000 --> 00:10:25,380
we hope we can get Corbin and in

173
00:10:25,380 --> 00:10:30,110
expedite we are hacking on so so this

174
00:10:30,110 --> 00:10:32,850
presentation is about what our plans

175
00:10:32,850 --> 00:10:37,290
were hacking our our our design choice

176
00:10:37,290 --> 00:10:40,260
so first in the last several days right

177
00:10:40,260 --> 00:10:43,950
we heard a lot of acronyms slim boot you

178
00:10:43,950 --> 00:10:51,750
boot mean platform and and orbit right

179
00:10:51,750 --> 00:10:54,390
but for us we need to pick up something

180
00:10:54,390 --> 00:10:57,000
practical because we need to be able to

181
00:10:57,000 --> 00:10:57,870
see

182
00:10:57,870 --> 00:11:00,390
- ready to get into their center in the

183
00:11:00,390 --> 00:11:04,740
next one to two years and we needed to

184
00:11:04,740 --> 00:11:09,839
meet our our users demands right hour

185
00:11:09,839 --> 00:11:11,790
per hour our friends in our production

186
00:11:11,790 --> 00:11:14,550
engineering we need to take care of

187
00:11:14,550 --> 00:11:17,790
millions of servers how do they do how

188
00:11:17,790 --> 00:11:18,540
do they do it

189
00:11:18,540 --> 00:11:20,610
so they have a lot of requirements to us

190
00:11:20,610 --> 00:11:24,240
so in the end which was this solution

191
00:11:24,240 --> 00:11:26,670
which we use the core would to the

192
00:11:26,670 --> 00:11:29,279
silicon initially and then we put into

193
00:11:29,279 --> 00:11:32,339
Linux embedded Linux corner and the in

194
00:11:32,339 --> 00:11:34,200
the unique embedded and in this corner

195
00:11:34,200 --> 00:11:36,360
there's a you need around FS have a

196
00:11:36,360 --> 00:11:38,640
bunch of user space tools including pool

197
00:11:38,640 --> 00:11:45,600
loaders and then from that we we use

198
00:11:45,600 --> 00:11:49,620
dynamics to put it a target in Linux so

199
00:11:49,620 --> 00:11:52,290
so the Nvidia dynamics corner and other

200
00:11:52,290 --> 00:11:54,270
you need rang ref s is on the Buddha

201
00:11:54,270 --> 00:11:57,740
round together with corporate image

202
00:11:58,790 --> 00:12:02,240
motivation why do we do this what our

203
00:12:02,240 --> 00:12:06,600
requirement from our customers to the

204
00:12:06,600 --> 00:12:09,570
product to product engineering teams so

205
00:12:09,570 --> 00:12:12,029
lines debug ability so when something

206
00:12:12,029 --> 00:12:14,820
happens we have to be able to debug very

207
00:12:14,820 --> 00:12:16,950
quickly right whereas every issue comes

208
00:12:16,950 --> 00:12:19,740
people we are will have to work 24 hours

209
00:12:19,740 --> 00:12:21,930
otherwise there will be a call to the

210
00:12:21,930 --> 00:12:24,930
police department so we need to be able

211
00:12:24,930 --> 00:12:27,870
to control our firmware we need to be

212
00:12:27,870 --> 00:12:29,790
able to know the design and the

213
00:12:29,790 --> 00:12:33,650
implementation inside out manageability

214
00:12:33,650 --> 00:12:37,529
our P team they are they're all Linux

215
00:12:37,529 --> 00:12:39,570
groups they know how to manage is the OS

216
00:12:39,570 --> 00:12:41,520
now they want to many is a former

217
00:12:41,520 --> 00:12:46,920
similar as the manager gos workload

218
00:12:46,920 --> 00:12:53,100
requirement so Linux corner so you have

219
00:12:53,100 --> 00:12:54,810
a corner has been great solved a lot of

220
00:12:54,810 --> 00:12:58,440
problems but over the years we see that

221
00:12:58,440 --> 00:13:01,410
the name is Connor has a some of the

222
00:13:01,410 --> 00:13:03,600
best designs in terms of architecture

223
00:13:03,600 --> 00:13:06,270
like a multiprocessor support like for

224
00:13:06,270 --> 00:13:10,470
example to interrupt support and also

225
00:13:10,470 --> 00:13:11,730
the Linux drivers

226
00:13:11,730 --> 00:13:15,540
to have more tangents so so so so all

227
00:13:15,540 --> 00:13:17,639
that's as together that will meet our

228
00:13:17,639 --> 00:13:20,010
workload with Hartmann better like the

229
00:13:20,010 --> 00:13:22,709
fastboot time right we if in you know

230
00:13:22,709 --> 00:13:25,019
provisioning time you may need to put it

231
00:13:25,019 --> 00:13:26,010
several times

232
00:13:26,010 --> 00:13:31,110
you do need to fast security so security

233
00:13:31,110 --> 00:13:33,240
comes from two things one is the more

234
00:13:33,240 --> 00:13:35,610
eyes eyeballs on the codebase it would

235
00:13:35,610 --> 00:13:38,160
be generally be safer second is on the

236
00:13:38,160 --> 00:13:39,779
Linux that there are a lot of security

237
00:13:39,779 --> 00:13:42,810
features are innovating so we design our

238
00:13:42,810 --> 00:13:46,139
own Hardware right so so when we did our

239
00:13:46,139 --> 00:13:49,110
own hardware hardware we cannot wait for

240
00:13:49,110 --> 00:13:50,730
somebody to develop software for us

241
00:13:50,730 --> 00:13:53,880
including firmware so so once we are

242
00:13:53,880 --> 00:13:56,279
able to build our own firmware we know

243
00:13:56,279 --> 00:13:58,649
we can crap out crank out new firmware

244
00:13:58,649 --> 00:14:02,610
very quickly for new hardware's green so

245
00:14:02,610 --> 00:14:06,449
so once our our hardware with harder

246
00:14:06,449 --> 00:14:07,949
from the data center they are still in

247
00:14:07,949 --> 00:14:10,589
good shape now people by without

248
00:14:10,589 --> 00:14:12,510
firmware what can you do right you can

249
00:14:12,510 --> 00:14:14,160
only take it apart now you sell a hard

250
00:14:14,160 --> 00:14:18,480
drive you sell some Nick hard right but

251
00:14:18,480 --> 00:14:20,790
but with the open source firmware people

252
00:14:20,790 --> 00:14:22,500
can just download the customers use it

253
00:14:22,500 --> 00:14:27,300
now you can sell it as a service so

254
00:14:27,300 --> 00:14:32,540
there's a green part of it so next part

255
00:14:32,540 --> 00:14:39,029
is a pure system design so here is the

256
00:14:39,029 --> 00:14:42,569
general pure process so we use a unit of

257
00:14:42,569 --> 00:14:44,699
NFS source we build the unit of my

258
00:14:44,699 --> 00:14:47,190
affairs binary that together with the

259
00:14:47,190 --> 00:14:49,319
corner source we build an index put

260
00:14:49,319 --> 00:14:52,260
payload now with Linux boot payload and

261
00:14:52,260 --> 00:14:55,230
acro boot source and a silicon vendor

262
00:14:55,230 --> 00:14:57,899
panel blocks to get the firmware image

263
00:14:57,899 --> 00:15:01,980
and flush on the on the flash and then

264
00:15:01,980 --> 00:15:07,889
it it boots up so I'm going to break

265
00:15:07,889 --> 00:15:09,720
down into each of the components and

266
00:15:09,720 --> 00:15:12,360
then summarize it so the first group of

267
00:15:12,360 --> 00:15:13,949
components a pure environment

268
00:15:13,949 --> 00:15:19,139
so in corpore there's there's cross to

269
00:15:19,139 --> 00:15:24,149
attend build for for for elf so so you

270
00:15:24,149 --> 00:15:25,139
needed those

271
00:15:25,139 --> 00:15:27,449
Krauss GCC tools it's downloaded from

272
00:15:27,449 --> 00:15:29,369
somewhere either for an internet or from

273
00:15:29,369 --> 00:15:32,220
your company's copy of it you need to

274
00:15:32,220 --> 00:15:34,109
attend for other components at this

275
00:15:34,109 --> 00:15:37,920
moment it is using GCC properly using

276
00:15:37,920 --> 00:15:40,259
GCC at this moment and it's need it has

277
00:15:40,259 --> 00:15:42,119
some requirements has been known no

278
00:15:42,119 --> 00:15:45,239
order than that so those are the

279
00:15:45,239 --> 00:15:48,419
building environment requirements and in

280
00:15:48,419 --> 00:15:50,009
order to eliminate the build environment

281
00:15:50,009 --> 00:15:52,319
any potential issue brought forth by the

282
00:15:52,319 --> 00:15:54,269
building environment differences if we

283
00:15:54,269 --> 00:15:57,329
use docker to ensure the bearing

284
00:15:57,329 --> 00:16:00,779
normally is identical you need a very

285
00:16:00,779 --> 00:16:03,929
very fess our choice of the technology

286
00:16:03,929 --> 00:16:06,709
is go language so so because that's

287
00:16:06,709 --> 00:16:12,089
that's for the userland username code

288
00:16:12,089 --> 00:16:14,910
and the goal is a modern seasoned

289
00:16:14,910 --> 00:16:17,609
programming languages it has built-in

290
00:16:17,609 --> 00:16:24,899
testing facilities so we already so so

291
00:16:24,899 --> 00:16:27,540
so using the code language we together

292
00:16:27,540 --> 00:16:31,169
with the Europe community we do there's

293
00:16:31,169 --> 00:16:35,850
a full code source userland with Linux

294
00:16:35,850 --> 00:16:38,339
boot loaders so the Linux boot loader so

295
00:16:38,339 --> 00:16:43,589
so there are probably 150 or so Linux

296
00:16:43,589 --> 00:16:46,470
commands are provisioning lingo and

297
00:16:46,470 --> 00:16:52,499
rousing in Europe and we also developed

298
00:16:52,499 --> 00:16:55,049
Linux boot loaders the bull orders would

299
00:16:55,049 --> 00:16:56,970
have the file system drivers and the

300
00:16:56,970 --> 00:16:59,669
network drivers and we are will go to

301
00:16:59,669 --> 00:17:04,380
the local local and disk and the network

302
00:17:04,380 --> 00:17:07,019
did a network environment to find a boot

303
00:17:07,019 --> 00:17:12,510
loaders and a jump started you route one

304
00:17:12,510 --> 00:17:14,638
advantage of Europe is it can be source

305
00:17:14,638 --> 00:17:16,829
based like a /

306
00:17:16,829 --> 00:17:20,250
Linux so that means that enables fast

307
00:17:20,250 --> 00:17:22,109
development so when you are doing

308
00:17:22,109 --> 00:17:24,388
development you can do source based it's

309
00:17:24,388 --> 00:17:28,319
like you're doing the script but in our

310
00:17:28,319 --> 00:17:31,409
production environment in our in our

311
00:17:31,409 --> 00:17:33,710
beliefs we use a binary like a bitty box

312
00:17:33,710 --> 00:17:37,919
so we build as busybox mode and as you

313
00:17:37,919 --> 00:17:38,980
are working on

314
00:17:38,980 --> 00:17:46,630
you root canal so this this leak is to

315
00:17:46,630 --> 00:17:50,500
the euro and you have a burn the

316
00:17:50,500 --> 00:17:53,890
community that it has the charters and

317
00:17:53,890 --> 00:17:58,690
it has a chairman committee in the unit

318
00:17:58,690 --> 00:18:01,360
of MF s we also included some binaries

319
00:18:01,360 --> 00:18:04,540
like flash run at VA medical but but

320
00:18:04,540 --> 00:18:06,100
yeah

321
00:18:06,100 --> 00:18:09,190
for example TMI vehicle today we have it

322
00:18:09,190 --> 00:18:10,540
as a binary we'd be all ready to

323
00:18:10,540 --> 00:18:12,400
statically under then we include into

324
00:18:12,400 --> 00:18:15,040
unit of my affairs but we also have some

325
00:18:15,040 --> 00:18:18,220
interns working on translating tea I'm a

326
00:18:18,220 --> 00:18:23,140
geek of the two to to go language so

327
00:18:23,140 --> 00:18:26,620
that will well we all a vastly reduces

328
00:18:26,620 --> 00:18:30,100
the size of the binary because in our

329
00:18:30,100 --> 00:18:32,169
some of our servers we only have 80 make

330
00:18:32,169 --> 00:18:37,150
of flash pneumix corner you can use any

331
00:18:37,150 --> 00:18:39,669
stable corner right for us we use our FB

332
00:18:39,669 --> 00:18:44,350
corner just ACOTA as is the same code as

333
00:18:44,350 --> 00:18:47,290
we use for the target OS and then k

334
00:18:47,290 --> 00:18:49,330
config you can customize the K config

335
00:18:49,330 --> 00:18:52,090
for example we could we exclude XFS

336
00:18:52,090 --> 00:18:55,710
support why because our boudoir when we

337
00:18:55,710 --> 00:18:58,630
never use XA face our data reviews

338
00:18:58,630 --> 00:19:01,960
exercise but for Linux bullet it does

339
00:19:01,960 --> 00:19:05,919
not have to understand it because it

340
00:19:05,919 --> 00:19:11,940
only needs to find a the Poudre coreboot

341
00:19:11,940 --> 00:19:14,620
corbett config so it's different for

342
00:19:14,620 --> 00:19:17,710
each platform so so so today we board

343
00:19:17,710 --> 00:19:20,950
four to five platforms including qemu

344
00:19:20,950 --> 00:19:24,190
that's four so so we have config

345
00:19:24,190 --> 00:19:25,809
corporate config for each platform

346
00:19:25,809 --> 00:19:29,380
and when we PR Cobra image we need to

347
00:19:29,380 --> 00:19:31,299
add or additional features for example

348
00:19:31,299 --> 00:19:33,820
that we build so so code for we would

349
00:19:33,820 --> 00:19:36,700
it's outside of the core boot key to

350
00:19:36,700 --> 00:19:39,100
repository it has its own key to

351
00:19:39,100 --> 00:19:46,260
repository we also need to add FSP we

352
00:19:50,260 --> 00:19:54,040
to make a full former image we need

353
00:19:54,040 --> 00:19:57,850
other is at here binary blobs such as FD

354
00:19:57,850 --> 00:20:02,290
a-- me and a macro code put it together

355
00:20:02,290 --> 00:20:05,470
you can see there are a lot of

356
00:20:05,470 --> 00:20:07,750
components involved right a lot of

357
00:20:07,750 --> 00:20:11,919
different different things needs to be

358
00:20:11,919 --> 00:20:14,200
taken care of so the bobbin is a pure

359
00:20:14,200 --> 00:20:18,130
environment and then the linux put is a

360
00:20:18,130 --> 00:20:22,270
part that that serves the entire process

361
00:20:22,270 --> 00:20:26,320
it includes the pure script pure

362
00:20:26,320 --> 00:20:29,740
configuration files look like the

363
00:20:29,740 --> 00:20:30,880
configurations for cobras a

364
00:20:30,880 --> 00:20:34,059
configuration for linux corner and some

365
00:20:34,059 --> 00:20:38,590
patties on and again you need a randolph

366
00:20:38,590 --> 00:20:41,140
s you have those things like i have this

367
00:20:41,140 --> 00:20:43,720
as are the banners other gold modules so

368
00:20:43,720 --> 00:20:45,490
there are so like dozens actually for

369
00:20:45,490 --> 00:20:49,900
each of those one box so it's gets

370
00:20:49,900 --> 00:20:51,280
complicated too quickly

371
00:20:51,280 --> 00:20:54,160
so our answer to this is a beard

372
00:20:54,160 --> 00:20:55,660
configuration file so build

373
00:20:55,660 --> 00:20:57,280
configuration file included information

374
00:20:57,280 --> 00:20:59,890
such as what components are included

375
00:20:59,890 --> 00:21:02,380
where to get a component you could get

376
00:21:02,380 --> 00:21:03,850
either from a public career pole you

377
00:21:03,850 --> 00:21:06,160
could get a from internal repo you could

378
00:21:06,160 --> 00:21:08,080
have get it from turbo right

379
00:21:08,080 --> 00:21:11,590
for example let's say if SP we give

380
00:21:11,590 --> 00:21:14,340
turbo to our partners right because

381
00:21:14,340 --> 00:21:17,620
there's trailer secretly you cannot give

382
00:21:17,620 --> 00:21:19,690
the source code

383
00:21:19,690 --> 00:21:22,480
what snapshot is useful a component and

384
00:21:22,480 --> 00:21:25,210
was a directory structure so we use a

385
00:21:25,210 --> 00:21:27,700
video json file to capture this kind of

386
00:21:27,700 --> 00:21:33,490
information and then with with with with

387
00:21:33,490 --> 00:21:35,260
that period configuration file there

388
00:21:35,260 --> 00:21:39,160
with with appropriate pure n't mean

389
00:21:39,160 --> 00:21:42,940
export code base everything is paired

390
00:21:42,940 --> 00:21:45,090
together

391
00:21:46,440 --> 00:21:51,429
configurations so so for the firmware

392
00:21:51,429 --> 00:21:56,080
configurations we uses a chrome OS v BD

393
00:21:56,080 --> 00:22:01,929
binary block it has it already has a has

394
00:22:01,929 --> 00:22:04,320
a very good support for

395
00:22:04,320 --> 00:22:07,389
thankful and Google's effort so they are

396
00:22:07,389 --> 00:22:10,330
so like VPD tool you can run on the

397
00:22:10,330 --> 00:22:11,860
Bureau machine or on the target

398
00:22:11,860 --> 00:22:15,070
immersion in the nimac in the Linux boot

399
00:22:15,070 --> 00:22:18,340
you can see that as well it shows up in

400
00:22:18,340 --> 00:22:22,840
the in the in the CFS configuration that

401
00:22:22,840 --> 00:22:24,549
can be used for teens like like them

402
00:22:24,549 --> 00:22:28,110
IFSP configurations right you you can

403
00:22:28,110 --> 00:22:31,600
set up so ODMs can set up default

404
00:22:31,600 --> 00:22:35,320
configurations in vbd and the user can

405
00:22:35,320 --> 00:22:38,350
set up in vb d as well and then it can

406
00:22:38,350 --> 00:22:41,110
use those settings to customize FSP boot

407
00:22:41,110 --> 00:22:45,039
behavior another example is you can use

408
00:22:45,039 --> 00:22:47,080
to configuration to set up the put put

409
00:22:47,080 --> 00:22:52,539
lock robust level another important

410
00:22:52,539 --> 00:22:55,210
thing we we record in the VVD is a

411
00:22:55,210 --> 00:22:57,370
version information so one version is

412
00:22:57,370 --> 00:23:00,309
the overall version to this schematic

413
00:23:00,309 --> 00:23:03,629
version we put into the our vid only

414
00:23:03,629 --> 00:23:06,100
Perdition and internal versions with

415
00:23:06,100 --> 00:23:07,720
what's internal versions internal

416
00:23:07,720 --> 00:23:10,419
version this it basically is where you

417
00:23:10,419 --> 00:23:15,720
get each component and with what version

418
00:23:15,720 --> 00:23:18,940
so so internal version could be pretty

419
00:23:18,940 --> 00:23:21,309
long it would like 20 to 30 different

420
00:23:21,309 --> 00:23:23,950
components or there you get an exact

421
00:23:23,950 --> 00:23:27,730
picture of how this image is built well

422
00:23:27,730 --> 00:23:30,129
another coating about VPD is it has to

423
00:23:30,129 --> 00:23:31,899
Perdition wines we only producing

424
00:23:31,899 --> 00:23:34,090
another readwrite producing so it's also

425
00:23:34,090 --> 00:23:36,009
so with read-only producing wise the

426
00:23:36,009 --> 00:23:38,350
server's shipped gets to the users hand

427
00:23:38,350 --> 00:23:40,809
of read-only Purdy's locked user cannot

428
00:23:40,809 --> 00:23:47,590
change it so Facebook needs put people

429
00:23:47,590 --> 00:23:50,409
in order to include pure scripts pure

430
00:23:50,409 --> 00:23:53,830
configurations Connor

431
00:23:53,830 --> 00:23:57,490
config coreboot config and Apaches had

432
00:23:57,490 --> 00:24:03,370
is real cases we will we were upstream

433
00:24:03,370 --> 00:24:06,370
it and the birth steps becomes three

434
00:24:06,370 --> 00:24:09,730
steps clone to new explodable CD to it

435
00:24:09,730 --> 00:24:16,410
and then buery so

436
00:24:16,410 --> 00:24:20,730
this is the scenarios let us say the

437
00:24:20,730 --> 00:24:23,640
birth process enables you to do to do

438
00:24:23,640 --> 00:24:26,160
what say let's say given any image tell

439
00:24:26,160 --> 00:24:27,900
me how is a build right you send us an

440
00:24:27,900 --> 00:24:30,120
email somewhere to somebody so people

441
00:24:30,120 --> 00:24:31,770
needs to figure out how it is built

442
00:24:31,770 --> 00:24:34,290
how was it built you run the VPD tool

443
00:24:34,290 --> 00:24:35,910
you get the internal version VPD

444
00:24:35,910 --> 00:24:38,160
variable you get everything give them a

445
00:24:38,160 --> 00:24:40,890
target how do I be bug you booted it

446
00:24:40,890 --> 00:24:42,840
into your shell or I'll show you just

447
00:24:42,840 --> 00:24:45,990
run the VPT command or you just run the

448
00:24:45,990 --> 00:24:48,870
flash run come in time to the image job

449
00:24:48,870 --> 00:24:53,690
and then use vbd commander to analyze it

450
00:24:53,690 --> 00:24:55,890
give them a Burin for me how do i

451
00:24:55,890 --> 00:24:58,020
replicate Sabir you clone the repo

452
00:24:58,020 --> 00:25:00,410
coding the purium for me then you build

453
00:25:00,410 --> 00:25:03,360
so in that way we can get a reliable

454
00:25:03,360 --> 00:25:06,660
replicable builds throughout the process

455
00:25:06,660 --> 00:25:13,740
the last agenda is how do we plan to

456
00:25:13,740 --> 00:25:16,380
enable our partners and I suppose a

457
00:25:16,380 --> 00:25:26,480
community so OCP is found based on the

458
00:25:26,480 --> 00:25:31,400
based on the concept that open hardware

459
00:25:31,400 --> 00:25:36,120
will help with industry innovation right

460
00:25:36,120 --> 00:25:42,270
so so so did so so so we submit we

461
00:25:42,270 --> 00:25:44,730
submit the OCB platform design together

462
00:25:44,730 --> 00:25:49,740
with our audience after so when we are

463
00:25:49,740 --> 00:25:53,040
ready to go to mass production so so we

464
00:25:53,040 --> 00:25:57,180
work with our audience on para EVG dvg

465
00:25:57,180 --> 00:26:00,660
PVD and mass production so so from the

466
00:26:00,660 --> 00:26:03,330
firmware development viewpoint during

467
00:26:03,330 --> 00:26:06,090
EVG DVD and PVG we collaborate

468
00:26:06,090 --> 00:26:07,950
collaborate with our partner to get it

469
00:26:07,950 --> 00:26:11,430
all ready we we get all the server

470
00:26:11,430 --> 00:26:13,350
features ready we get our infrastructure

471
00:26:13,350 --> 00:26:16,620
ready regular order ready now it is

472
00:26:16,620 --> 00:26:19,830
ready to to be mass deployed in the data

473
00:26:19,830 --> 00:26:23,100
center at that time together with odium

474
00:26:23,100 --> 00:26:25,110
we will do the OCP platform submission

475
00:26:25,110 --> 00:26:28,140
and that that's we called

476
00:26:28,140 --> 00:26:30,690
at that time we are about to enable the

477
00:26:30,690 --> 00:26:33,900
community when we saw me to the OCB

478
00:26:33,900 --> 00:26:36,390
platform we submitted two things one is

479
00:26:36,390 --> 00:26:39,660
hardware disaster so anybody can just

480
00:26:39,660 --> 00:26:43,830
download and then and then using the

481
00:26:43,830 --> 00:26:45,600
design is a replica of the design or

482
00:26:45,600 --> 00:26:50,340
modify the design to suit your needs on

483
00:26:50,340 --> 00:26:53,970
top of that a new thing we are going to

484
00:26:53,970 --> 00:26:57,930
do is we were we will make the open

485
00:26:57,930 --> 00:27:00,630
system firmware ready so anybody can go

486
00:27:00,630 --> 00:27:03,420
to the internet download the open system

487
00:27:03,420 --> 00:27:05,940
firmware and then you either design the

488
00:27:05,940 --> 00:27:08,100
hardware by yourself or you buy the

489
00:27:08,100 --> 00:27:11,940
hardware but off-the-shelf hardware from

490
00:27:11,940 --> 00:27:16,410
win-win in this case after that is

491
00:27:16,410 --> 00:27:19,770
community involvement so so Facebook

492
00:27:19,770 --> 00:27:23,480
will be involved as a community member

493
00:27:23,480 --> 00:27:28,440
in the partner collaboration phase our

494
00:27:28,440 --> 00:27:32,730
philosophy is upstream only so unless

495
00:27:32,730 --> 00:27:35,010
for the short amount of time we have to

496
00:27:35,010 --> 00:27:37,560
stabilize our code ready for for

497
00:27:37,560 --> 00:27:39,540
production it's a rating for EVD acted

498
00:27:39,540 --> 00:27:42,240
for grambo at that time we will do an

499
00:27:42,240 --> 00:27:45,780
internal and branch but for majority of

500
00:27:45,780 --> 00:27:49,590
the time we are up spring only so

501
00:27:49,590 --> 00:27:51,630
facebook developer or partner developer

502
00:27:51,630 --> 00:27:53,340
we some in a new code to the upstream

503
00:27:53,340 --> 00:27:58,500
people and the upstream ripple is it's

504
00:27:58,500 --> 00:28:00,600
mirrored into internal people of course

505
00:28:00,600 --> 00:28:02,910
when we move our internal repo we we run

506
00:28:02,910 --> 00:28:06,420
rigorous tests to make sure we are not

507
00:28:06,420 --> 00:28:09,290
the upstream weibo chinese does not

508
00:28:09,290 --> 00:28:12,150
regress the functionalities on our

509
00:28:12,150 --> 00:28:14,970
platform and our change we are

510
00:28:14,970 --> 00:28:17,130
immediately get pushed out to the

511
00:28:17,130 --> 00:28:19,130
private shared deliverable we share

512
00:28:19,130 --> 00:28:21,840
between Facebook and its partners and

513
00:28:21,840 --> 00:28:26,959
that gets moved back to the developers

514
00:28:28,040 --> 00:28:30,450
for community enablement at the

515
00:28:30,450 --> 00:28:33,390
community enable in in after the

516
00:28:33,390 --> 00:28:36,150
community is enabled Facebook is merely

517
00:28:36,150 --> 00:28:40,320
a community member we probably will be

518
00:28:40,320 --> 00:28:41,940
we will be a very active

519
00:28:41,940 --> 00:28:44,700
but we're just a community member we are

520
00:28:44,700 --> 00:28:48,840
not the owner of the code anymore but we

521
00:28:48,840 --> 00:28:52,650
will help to maintain all the pieces all

522
00:28:52,650 --> 00:28:55,710
the pieces to make a firmware to make

523
00:28:55,710 --> 00:29:00,630
the server to be able to para is

524
00:29:00,630 --> 00:29:02,750
downloadable and there redistributable

525
00:29:02,750 --> 00:29:06,440
so that would include everything

526
00:29:06,440 --> 00:29:09,090
including Linux boot code Corps boot

527
00:29:09,090 --> 00:29:12,630
code and you root code and thanks for

528
00:29:12,630 --> 00:29:15,420
our friends the silicon vendor banners

529
00:29:15,420 --> 00:29:17,520
will be also be able to be downloadable

530
00:29:17,520 --> 00:29:22,980
under redistributable them with this OCB

531
00:29:22,980 --> 00:29:24,390
members can customize for their

532
00:29:24,390 --> 00:29:28,890
infrastructure as needed if if they need

533
00:29:28,890 --> 00:29:32,370
distribution support they can get help

534
00:29:32,370 --> 00:29:35,820
from the community and they can help

535
00:29:35,820 --> 00:29:39,300
from professional sort of party event

536
00:29:39,300 --> 00:29:43,590
browser vendors like the same thing they

537
00:29:43,590 --> 00:29:49,770
get help from wear hat for example all

538
00:29:49,770 --> 00:29:53,850
all those code development we are not

539
00:29:53,850 --> 00:29:57,990
work without a good test framework so

540
00:29:57,990 --> 00:30:00,720
within Facebook we have a lot of our own

541
00:30:00,720 --> 00:30:03,740
ways of doing testing like how to get

542
00:30:03,740 --> 00:30:07,470
get a server how to dispatch is a test

543
00:30:07,470 --> 00:30:09,810
out to servers how to connect to the

544
00:30:09,810 --> 00:30:15,930
results we want that to seem in a

545
00:30:15,930 --> 00:30:18,780
process to be also available you go to

546
00:30:18,780 --> 00:30:22,050
the open source community because we do

547
00:30:22,050 --> 00:30:25,680
upstream first philosophy that means

548
00:30:25,680 --> 00:30:29,100
everybody's commit to core Buddha to you

549
00:30:29,100 --> 00:30:32,370
root it's going to affect us so we are

550
00:30:32,370 --> 00:30:34,730
developing something we call the contest

551
00:30:34,730 --> 00:30:38,940
which can run tests in continuously

552
00:30:38,940 --> 00:30:42,750
andaman or / div and it will have the

553
00:30:42,750 --> 00:30:48,060
flexible set design to have plugins to

554
00:30:48,060 --> 00:30:50,600
accommodate different types of test

555
00:30:50,600 --> 00:30:52,680
infrastructures in currently our own

556
00:30:52,680 --> 00:30:55,049
test infrastructure and other

557
00:30:55,049 --> 00:30:57,889
has infrastructures of various companies

558
00:30:57,889 --> 00:31:04,549
we were open source their call to action

559
00:31:04,549 --> 00:31:08,789
so in all CP there is a open system

560
00:31:08,789 --> 00:31:14,009
firmware project note that is called

561
00:31:14,009 --> 00:31:15,629
open system firmware it's not called

562
00:31:15,629 --> 00:31:18,059
open source firmware because

563
00:31:18,059 --> 00:31:20,850
OCP comes from the viewpoint of open

564
00:31:20,850 --> 00:31:25,590
system system viewpoint osf project it

565
00:31:25,590 --> 00:31:29,009
used to be an incubation project now is

566
00:31:29,009 --> 00:31:32,220
a former project so other project would

567
00:31:32,220 --> 00:31:35,159
be like server project like parse

568
00:31:35,159 --> 00:31:38,850
project or thermal project so firmware

569
00:31:38,850 --> 00:31:42,119
is not a very important part of OCP

570
00:31:42,119 --> 00:31:46,889
charter in the LCBO SF project we have

571
00:31:46,889 --> 00:31:52,830
harbours scalars and we have silicon

572
00:31:52,830 --> 00:31:56,789
vendors arm Intel and there is also all

573
00:31:56,789 --> 00:32:04,350
DMS and other companies like IBM on so

574
00:32:04,350 --> 00:32:09,889
so yeah please join us and join this

575
00:32:09,889 --> 00:32:12,840
industry effort and then on the open

576
00:32:12,840 --> 00:32:15,960
source development aside and there's OSF

577
00:32:15,960 --> 00:32:19,399
communities near expert you root

578
00:32:19,399 --> 00:32:22,909
coreboot another thing you can do is

579
00:32:22,909 --> 00:32:26,159
battle of the shelf platform and play

580
00:32:26,159 --> 00:32:29,749
with it so you can play with it today

581
00:32:29,749 --> 00:32:32,749
Thanks

582
00:32:32,899 --> 00:32:34,470
Thank You Jonathan

583
00:32:34,470 --> 00:32:38,580
Thank You Morgan about time for seven

584
00:32:38,580 --> 00:32:40,200
questions so if you have any questions

585
00:32:40,200 --> 00:32:43,350
go to the microphones and ask questions

586
00:32:43,350 --> 00:32:46,289
can nine up there don't have to stay

587
00:32:46,289 --> 00:32:49,340
back you can just

588
00:32:53,470 --> 00:32:56,359
all right just a quick question on the

589
00:32:56,359 --> 00:32:57,830
pricing for the win-win

590
00:32:57,830 --> 00:33:06,619
Morgan roughly what's the rough pricing

591
00:33:06,619 --> 00:33:11,139
on a win-win of the Shelf ICP price

592
00:33:11,139 --> 00:33:16,789
price it's more sensitive here so you

593
00:33:16,789 --> 00:33:19,190
can come to compare the window window

594
00:33:19,190 --> 00:33:22,249
about a chickadee you show the picture

595
00:33:22,249 --> 00:33:28,519
of the of the park members and it has a

596
00:33:28,519 --> 00:33:41,989
several part yeah here's the contact

597
00:33:41,989 --> 00:33:44,600
window okay okay

598
00:33:44,600 --> 00:33:49,009
yes email this is a key policy yeah we

599
00:33:49,009 --> 00:33:52,249
don't put the prices on it because it is

600
00:33:52,249 --> 00:33:57,980
sensitive yeah yet just to just to

601
00:33:57,980 --> 00:34:01,279
supplement what Morgan said on you can

602
00:34:01,279 --> 00:34:03,739
order of course this is the main part

603
00:34:03,739 --> 00:34:04,190
right

604
00:34:04,190 --> 00:34:06,200
you know Dean to this you can also order

605
00:34:06,200 --> 00:34:09,109
a debug card right yeah yes yeah and

606
00:34:09,109 --> 00:34:12,379
power cable so that you can hook up to

607
00:34:12,379 --> 00:34:15,139
the wall and because a normally this

608
00:34:15,139 --> 00:34:19,969
just gets into half rack yes yeah create

609
00:34:19,969 --> 00:34:22,250
go back this does make me really happy

610
00:34:22,250 --> 00:34:24,589
too especially that debug card it's

611
00:34:24,589 --> 00:34:27,109
impossible to try to find anything like

612
00:34:27,109 --> 00:34:30,109
that or yeah I'm afraid of electrical

613
00:34:30,109 --> 00:34:32,329
fires at home so that helps me a lot

614
00:34:32,329 --> 00:34:39,559
thank you it sounds great are there more

615
00:34:39,559 --> 00:34:40,159
questions

616
00:34:40,159 --> 00:34:41,510
priestess just line up at the

617
00:34:41,510 --> 00:34:49,869
microphones update time and do time

618
00:34:49,869 --> 00:34:56,239
update time to time means what yeah if

619
00:34:56,239 --> 00:34:56,800
you know

620
00:34:56,800 --> 00:34:58,690
the microphones people can hear you and

621
00:34:58,690 --> 00:35:01,180
it's off the record so you understand do

622
00:35:01,180 --> 00:35:02,890
you have any data on the boot time and

623
00:35:02,890 --> 00:35:05,290
update time with this this new fungus

624
00:35:05,290 --> 00:35:09,100
track no we with all major input time

625
00:35:09,100 --> 00:35:10,200
yet

626
00:35:10,200 --> 00:35:14,320
you mean put time I mean once you have

627
00:35:14,320 --> 00:35:16,960
this core boot how long it takes to boot

628
00:35:16,960 --> 00:35:20,320
as compared to traditional boot with you

629
00:35:20,320 --> 00:35:26,590
know I found where yeah so maybe I can

630
00:35:26,590 --> 00:35:28,990
explain a little bit so first is with

631
00:35:28,990 --> 00:35:31,090
the wing wing order in this moment it is

632
00:35:31,090 --> 00:35:33,970
not cold boot plus near explode solution

633
00:35:33,970 --> 00:35:38,320
it is minimize UEFI plus nimac split

634
00:35:38,320 --> 00:35:41,320
solution it's still a lot of faster than

635
00:35:41,320 --> 00:35:45,340
the full stack UEFI and you may notice

636
00:35:45,340 --> 00:35:47,410
that we have to slow down in excluded

637
00:35:47,410 --> 00:35:51,540
process to to get rid of some problems

638
00:35:51,540 --> 00:35:55,360
okay so it's pushed faster but I do not

639
00:35:55,360 --> 00:35:57,190
have the number how about the update

640
00:35:57,190 --> 00:36:02,050
time update time you mean the tough

641
00:36:02,050 --> 00:36:03,910
stuff or more flash time yes that would

642
00:36:03,910 --> 00:36:05,260
be the exactly the same because you

643
00:36:05,260 --> 00:36:07,680
still have flash extra little Meg off

644
00:36:07,680 --> 00:36:11,110
image but I'm sure like you know in

645
00:36:11,110 --> 00:36:13,420
stream writing like you will use Linux

646
00:36:13,420 --> 00:36:15,190
services to write to the flash so it's

647
00:36:15,190 --> 00:36:16,840
gonna be much faster I believe we use

648
00:36:16,840 --> 00:36:21,070
the flash rom tour to flash the burner

649
00:36:21,070 --> 00:36:24,220
okay yes it's not super to fresh though

650
00:36:24,220 --> 00:36:24,640
yeah

651
00:36:24,640 --> 00:36:28,390
it's faster is the same David you have

652
00:36:28,390 --> 00:36:32,650
some ideas about speed of flash ROM want

653
00:36:32,650 --> 00:36:33,910
to come to the microphone and tell us

654
00:36:33,910 --> 00:36:37,720
something about it I haven't tried it on

655
00:36:37,720 --> 00:36:41,290
this configuration so but since it

656
00:36:41,290 --> 00:36:43,990
doesn't rely on the typical SMI

657
00:36:43,990 --> 00:36:49,090
mechanism the the thing is it's it is

658
00:36:49,090 --> 00:36:50,590
faster on its own but especially if you

659
00:36:50,590 --> 00:36:51,940
have other things going on in the

660
00:36:51,940 --> 00:36:54,940
background then they won't get

661
00:36:54,940 --> 00:36:56,020
interrupted just because you're not

662
00:36:56,020 --> 00:36:59,310
going in SMI all the time

663
00:36:59,310 --> 00:37:03,720
he's a flash rom maintainer

664
00:37:03,720 --> 00:37:05,710
so we still have time for a few

665
00:37:05,710 --> 00:37:07,829
questions

666
00:37:12,779 --> 00:37:16,210
so at Facebook you did have the slide

667
00:37:16,210 --> 00:37:17,650
that was talking about more than just

668
00:37:17,650 --> 00:37:20,799
servers and you mentioned networking

669
00:37:20,799 --> 00:37:23,140
devices yeah talk about that a little

670
00:37:23,140 --> 00:37:24,579
bit yeah

671
00:37:24,579 --> 00:37:30,640
so in March of OCP Facebook announced a

672
00:37:30,640 --> 00:37:35,289
new type of networking server and the in

673
00:37:35,289 --> 00:37:39,329
the networking server in the controller

674
00:37:39,329 --> 00:37:45,150
the firmware is corporate plus Linux but

675
00:37:45,150 --> 00:37:47,559
then we are in the process of deploying

676
00:37:47,559 --> 00:37:52,779
this shiny new network server yes

677
00:37:52,779 --> 00:37:57,010
there's a blog post on Khadafi comm I

678
00:37:57,010 --> 00:38:02,019
think called bully if you search for f16

679
00:38:02,019 --> 00:38:05,710
mini-pak you'll see the announcement it

680
00:38:05,710 --> 00:38:08,529
the the platform itself is based on its

681
00:38:08,529 --> 00:38:10,180
it was developed in partnership with

682
00:38:10,180 --> 00:38:12,970
Arista so it's actually Arista hardware

683
00:38:12,970 --> 00:38:16,450
and the control plane uses as a broad

684
00:38:16,450 --> 00:38:26,890
belt de arbol de yeah ask one question

685
00:38:26,890 --> 00:38:29,349
about the license right this is a good

686
00:38:29,349 --> 00:38:34,119
new license right um so yeah :

687
00:38:34,119 --> 00:38:38,049
yes for the Linux kernel yeah so you

688
00:38:38,049 --> 00:38:40,599
have your own innovation of hardware you

689
00:38:40,599 --> 00:38:43,809
are giving up your patent rights when

690
00:38:43,809 --> 00:38:46,329
you implement some people OCP platform

691
00:38:46,329 --> 00:38:50,140
yeah okay yeah

692
00:38:50,140 --> 00:38:52,720
I don't know whether OCP has his own

693
00:38:52,720 --> 00:38:55,750
license turn or not okay in terms of

694
00:38:55,750 --> 00:38:59,170
hardware and then another thing is I'd

695
00:38:59,170 --> 00:39:02,019
see your presentation that also

696
00:39:02,019 --> 00:39:06,279
mentioned by wing wing is that lots of

697
00:39:06,279 --> 00:39:11,619
features like a CPI you know TPM secure

698
00:39:11,619 --> 00:39:14,710
boot you have are kept so update all

699
00:39:14,710 --> 00:39:16,600
those things are not here

700
00:39:16,600 --> 00:39:19,450
and so how are you dealing with it yes

701
00:39:19,450 --> 00:39:25,470
so to get to get to get a new firmware

702
00:39:25,470 --> 00:39:28,390
into data center it's not as easy as you

703
00:39:28,390 --> 00:39:30,820
just boot it right so you need to

704
00:39:30,820 --> 00:39:32,790
consider all the server features as

705
00:39:32,790 --> 00:39:35,650
imagined and we also need to work out

706
00:39:35,650 --> 00:39:37,750
our our infrastructure tools to deal

707
00:39:37,750 --> 00:39:40,660
with it and we also need to work out a

708
00:39:40,660 --> 00:39:43,660
manufacturing process right so so yes we

709
00:39:43,660 --> 00:39:45,790
know about that and we have spent a lot

710
00:39:45,790 --> 00:39:47,830
of time and we continue to spend time on

711
00:39:47,830 --> 00:39:49,450
this is to figure out all the

712
00:39:49,450 --> 00:39:52,240
requirements and we do have a complete

713
00:39:52,240 --> 00:39:55,930
analysis as far as we can get all the

714
00:39:55,930 --> 00:39:58,510
features we need to work on and we do

715
00:39:58,510 --> 00:40:01,690
have a clear path to early some of the

716
00:40:01,690 --> 00:40:03,760
things you mention about yes they are

717
00:40:03,760 --> 00:40:05,560
not there but some of them are already

718
00:40:05,560 --> 00:40:12,970
there we still have time for about yeah

719
00:40:12,970 --> 00:40:14,980
I think one last question if anyone

720
00:40:14,980 --> 00:40:25,540
wants to ask them something okay that

721
00:40:25,540 --> 00:40:27,100
sounds great Thank You Morgan saying

722
00:40:27,100 --> 00:40:30,810
thank you Jonathan big round of applause

723
00:40:30,810 --> 00:40:33,540
together with our audience and with our

724
00:40:33,540 --> 00:40:37,620
university we can make it happen

725
00:40:38,050 --> 00:40:39,640
[Music]

726
00:40:39,640 --> 00:40:41,700
you

