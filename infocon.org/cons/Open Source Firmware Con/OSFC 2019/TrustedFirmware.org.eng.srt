1
00:00:03,190 --> 00:00:06,259
[Music]

2
00:00:07,610 --> 00:00:11,550
so this this sock looks really promising

3
00:00:11,550 --> 00:00:14,519
from when I heard and I never actually

4
00:00:14,519 --> 00:00:19,410
heard of what trusted former is but what

5
00:00:19,410 --> 00:00:24,359
I've heard it's it's pretty pretty

6
00:00:24,359 --> 00:00:26,880
thoughtful it's pretty forward looking

7
00:00:26,880 --> 00:00:29,730
forward thinking and it's replaying

8
00:00:29,730 --> 00:00:32,460
ahead on the arm architecture in terms

9
00:00:32,460 --> 00:00:35,579
of security in firmware so yeah that's

10
00:00:35,579 --> 00:00:38,370
look that sounds promising you've run

11
00:00:38,370 --> 00:00:43,500
the four blasts please thank you thank

12
00:00:43,500 --> 00:00:45,059
you everyone thanks for making the last

13
00:00:45,059 --> 00:00:48,210
lot of the day it's gonna be tough I

14
00:00:48,210 --> 00:00:50,760
know so I'm not too Carlini and I'm

15
00:00:50,760 --> 00:00:52,559
going to present you the trusted FEMA

16
00:00:52,559 --> 00:00:54,680
project and the effort around

17
00:00:54,680 --> 00:00:57,000
standardization for open source fear

18
00:00:57,000 --> 00:00:59,640
more in the our maker system so the

19
00:00:59,640 --> 00:01:02,550
problem is not only I'm the last slot of

20
00:01:02,550 --> 00:01:04,349
today but it also got the longest

21
00:01:04,349 --> 00:01:06,890
presentation title of all the conference

22
00:01:06,890 --> 00:01:10,650
don't ask me why I choose that one but

23
00:01:10,650 --> 00:01:13,590
the important thing is that I would like

24
00:01:13,590 --> 00:01:15,840
you to just remember the first two words

25
00:01:15,840 --> 00:01:18,960
trusted VMware and have an idea a rough

26
00:01:18,960 --> 00:01:21,810
idea on what it is when you leave this

27
00:01:21,810 --> 00:01:26,430
room so that's the goal so Who am I so

28
00:01:26,430 --> 00:01:28,380
I'm part of arm I work in the open

29
00:01:28,380 --> 00:01:30,390
source software organization in arm I

30
00:01:30,390 --> 00:01:32,340
look after all the development

31
00:01:32,340 --> 00:01:34,619
Siddhartha's in the open source firmware

32
00:01:34,619 --> 00:01:37,680
world so not only just a few more but we

33
00:01:37,680 --> 00:01:39,390
are also very active in the channel core

34
00:01:39,390 --> 00:01:42,000
indicator space and we have another open

35
00:01:42,000 --> 00:01:43,710
source project for power management on

36
00:01:43,710 --> 00:01:46,710
our that is called SCP on top of that

37
00:01:46,710 --> 00:01:49,020
I'm also proud to be the chairman of the

38
00:01:49,020 --> 00:01:50,970
board for the trust a female or project

39
00:01:50,970 --> 00:01:53,310
and that's why and representing here

40
00:01:53,310 --> 00:01:56,460
that project I'm brainiest in the lovely

41
00:01:56,460 --> 00:02:00,210
cambridge UK and I'm a long a long time

42
00:02:00,210 --> 00:02:03,149
football fan actually that's me visiting

43
00:02:03,149 --> 00:02:06,030
the Manchester United Stadium the Old

44
00:02:06,030 --> 00:02:07,979
Trafford in Manchester that's one of the

45
00:02:07,979 --> 00:02:10,979
most important one in the UK please

46
00:02:10,979 --> 00:02:13,710
please don't ask me about American

47
00:02:13,710 --> 00:02:15,930
football or soccer there is only one

48
00:02:15,930 --> 00:02:19,620
football right so contacts are there if

49
00:02:19,620 --> 00:02:21,300
you want to reach out I'll be around for

50
00:02:21,300 --> 00:02:24,090
the rest of the week anyway so the

51
00:02:24,090 --> 00:02:25,770
agenda is pretty simple

52
00:02:25,770 --> 00:02:28,380
two sections so the first one is more

53
00:02:28,380 --> 00:02:30,600
like product historic marketing-oriented

54
00:02:30,600 --> 00:02:33,840
the second one is the bit more technical

55
00:02:33,840 --> 00:02:36,150
one so I know you are tired you can

56
00:02:36,150 --> 00:02:38,820
decide if taking a nap on the first slot

57
00:02:38,820 --> 00:02:41,100
or on the second I would just try to

58
00:02:41,100 --> 00:02:45,050
keep you awake anyway okay so let's go

59
00:02:45,050 --> 00:02:49,200
let's take a ride back in time so not as

60
00:02:49,200 --> 00:02:52,650
much as Rob did this morning but almost

61
00:02:52,650 --> 00:02:55,860
so quite a few years ago and I have a

62
00:02:55,860 --> 00:02:58,950
little trivia for you here so let's see

63
00:02:58,950 --> 00:03:01,410
if you can spot which year it was so it

64
00:03:01,410 --> 00:03:03,690
was the year in which an 18 years old

65
00:03:03,690 --> 00:03:06,060
Cristiano Ronaldo signs for Manchester

66
00:03:06,060 --> 00:03:09,690
United if you know who it is

67
00:03:09,690 --> 00:03:11,430
the second guy is probably more popular

68
00:03:11,430 --> 00:03:14,520
here it was a movie star that went into

69
00:03:14,520 --> 00:03:18,090
politics that year the third one is

70
00:03:18,090 --> 00:03:20,520
curious one the human genome project was

71
00:03:20,520 --> 00:03:23,400
declared complete in that year and

72
00:03:23,400 --> 00:03:26,640
obviously the Lord of the Rings The

73
00:03:26,640 --> 00:03:27,990
Return of the King was the

74
00:03:27,990 --> 00:03:31,980
highest-grossing movie in the year in

75
00:03:31,980 --> 00:03:34,100
the year of the Lord

76
00:03:34,100 --> 00:03:38,730
2003 but that's not the important thing

77
00:03:38,730 --> 00:03:42,330
so in 2003 arm introduced the trustzone

78
00:03:42,330 --> 00:03:46,050
concept so trans owned was introduced as

79
00:03:46,050 --> 00:03:48,480
an architectural extensions back in the

80
00:03:48,480 --> 00:03:50,910
time there was the arm v6 architecture

81
00:03:50,910 --> 00:03:54,140
so arm v8 was far far away in the future

82
00:03:54,140 --> 00:03:56,040
so arm trustzone

83
00:03:56,040 --> 00:03:58,800
introduced the first for the very first

84
00:03:58,800 --> 00:04:00,810
time the concept of secure word

85
00:04:00,810 --> 00:04:03,900
execution environments isolated from the

86
00:04:03,900 --> 00:04:05,640
normal word execution environments

87
00:04:05,640 --> 00:04:08,820
controlled by a bit then famous and a

88
00:04:08,820 --> 00:04:13,020
speech on the Amba bus so that's the

89
00:04:13,020 --> 00:04:16,019
earliest article I could spot it on the

90
00:04:16,019 --> 00:04:20,010
internet that again 2003 present trust

91
00:04:20,010 --> 00:04:23,700
zone so fast forward fast for a bit on

92
00:04:23,700 --> 00:04:26,040
yours again let's try again is exercise

93
00:04:26,040 --> 00:04:27,660
so a much more

94
00:04:27,660 --> 00:04:29,910
mature Cristiano Ronaldo wins the Ballon

95
00:04:29,910 --> 00:04:32,220
d'Or for the best European football

96
00:04:32,220 --> 00:04:35,520
player that year the movie star is back

97
00:04:35,520 --> 00:04:37,830
to movies actually with another young

98
00:04:37,830 --> 00:04:42,300
actor console wars continues in the

99
00:04:42,300 --> 00:04:45,480
console space like the 98 years but

100
00:04:45,480 --> 00:04:48,870
that's not SIA and no Nintendo and

101
00:04:48,870 --> 00:04:52,560
minions make a laugh at Gandalf at the

102
00:04:52,560 --> 00:04:52,950
barre

103
00:04:52,950 --> 00:04:55,440
so we dare to speak about me number two

104
00:04:55,440 --> 00:04:58,880
movie that meets The Hobbit in cinemas

105
00:04:58,880 --> 00:05:02,910
so anyone wants to try so this one was

106
00:05:02,910 --> 00:05:10,650
the year 2013 and in 2013 arm launched

107
00:05:10,650 --> 00:05:15,330
with the first comet on github the arm

108
00:05:15,330 --> 00:05:18,480
trusted femur project so arm trusted

109
00:05:18,480 --> 00:05:21,630
femur project came basically together

110
00:05:21,630 --> 00:05:25,860
with the rd8 architecture to provide the

111
00:05:25,860 --> 00:05:27,990
reference implementation for secular

112
00:05:27,990 --> 00:05:31,370
world film we're running on the rd8

113
00:05:31,370 --> 00:05:33,600
architecture at the time now we also

114
00:05:33,600 --> 00:05:38,190
introduced the core 4 mb 7 a bit of

115
00:05:38,190 --> 00:05:41,310
history since then so 5 years of history

116
00:05:41,310 --> 00:05:46,140
till 2018 so as I said the idea was with

117
00:05:46,140 --> 00:05:49,260
the brand-new on v8 proposed an open

118
00:05:49,260 --> 00:05:51,270
source firmware from the start

119
00:05:51,270 --> 00:05:55,169
to defragment the highest privilege feel

120
00:05:55,169 --> 00:05:58,260
more space on the ARM architecture so

121
00:05:58,260 --> 00:06:00,990
that was the goal released on github

122
00:06:00,990 --> 00:06:06,020
initially 5 years of major releases

123
00:06:06,020 --> 00:06:10,169
let's jump to fall 2017 so after many

124
00:06:10,169 --> 00:06:12,450
years standardization spec support

125
00:06:12,450 --> 00:06:13,790
trusted boot

126
00:06:13,790 --> 00:06:18,060
power management's back and so on in the

127
00:06:18,060 --> 00:06:21,510
fall 2017 are also introduced the patent

128
00:06:21,510 --> 00:06:25,140
security architecture framework so this

129
00:06:25,140 --> 00:06:27,450
is a framework mostly coming from the

130
00:06:27,450 --> 00:06:30,960
IOT market space for securing all your

131
00:06:30,960 --> 00:06:34,410
IATA devices but that also was the

132
00:06:34,410 --> 00:06:37,470
opportunity for creating a sibling

133
00:06:37,470 --> 00:06:39,660
project so the trusted VMware for the

134
00:06:39,660 --> 00:06:41,190
microcontrollers

135
00:06:41,190 --> 00:06:43,050
given the success of trust a femur for

136
00:06:43,050 --> 00:06:45,390
the application processor just as p.m.

137
00:06:45,390 --> 00:06:49,560
we're a how it is called today our

138
00:06:49,560 --> 00:06:51,960
launch the sibling project was a femur

139
00:06:51,960 --> 00:06:56,160
em and together with that we decided

140
00:06:56,160 --> 00:06:59,010
that it was time to open up the

141
00:06:59,010 --> 00:07:01,620
governance of that project so that it's

142
00:07:01,620 --> 00:07:04,950
it's gonna be no more an arm open source

143
00:07:04,950 --> 00:07:08,430
project under the arm github space but

144
00:07:08,430 --> 00:07:10,650
it's gonna be a very true open

145
00:07:10,650 --> 00:07:13,260
governance community project and that's

146
00:07:13,260 --> 00:07:15,900
what it is right now so arm trusted

147
00:07:15,900 --> 00:07:20,910
femur is no more code by that name now

148
00:07:20,910 --> 00:07:26,070
we are in the fall 2018 last exercise so

149
00:07:26,070 --> 00:07:27,750
Cristiano Ronaldo finally signs for a

150
00:07:27,750 --> 00:07:30,990
big team back in Europe that's Juventus

151
00:07:30,990 --> 00:07:36,450
that's my team mr. Arnold is shooting

152
00:07:36,450 --> 00:07:40,230
the last Terminator movie process in

153
00:07:40,230 --> 00:07:42,480
Britain for something called breaks it I

154
00:07:42,480 --> 00:07:44,370
don't know what it is really

155
00:07:44,370 --> 00:07:48,240
and Incredibles number two is a good

156
00:07:48,240 --> 00:07:49,950
movie but here we go

157
00:07:49,950 --> 00:07:54,090
trusted rhema.org is born in the fall of

158
00:07:54,090 --> 00:07:58,530
2018 trusted femur dot org is born as an

159
00:07:58,530 --> 00:08:00,330
open governance community project

160
00:08:00,330 --> 00:08:03,450
keeping the very same permissive license

161
00:08:03,450 --> 00:08:06,419
as the originating projects so it's bsd

162
00:08:06,419 --> 00:08:09,300
free closed all contributions accepted

163
00:08:09,300 --> 00:08:11,580
under VCO so developers or certificate

164
00:08:11,580 --> 00:08:14,280
of origin no need to sign anything if

165
00:08:14,280 --> 00:08:16,290
you want to contribute everyone is

166
00:08:16,290 --> 00:08:16,980
welcome

167
00:08:16,980 --> 00:08:20,240
please go and contribute to that project

168
00:08:20,240 --> 00:08:24,830
if you want to join the project itself

169
00:08:24,830 --> 00:08:29,010
the project membership gives a seat to

170
00:08:29,010 --> 00:08:31,650
the board of project member

171
00:08:31,650 --> 00:08:33,900
representatives and gives a seat to the

172
00:08:33,900 --> 00:08:35,969
technical steering committee and these

173
00:08:35,969 --> 00:08:39,299
are the two bodies that drives the

174
00:08:39,299 --> 00:08:41,219
strategic and technical direction for

175
00:08:41,219 --> 00:08:44,780
the project there are publicly available

176
00:08:44,780 --> 00:08:47,580
resources of all kind mailing lists

177
00:08:47,580 --> 00:08:51,270
roadmaps meeting minutes and so on and

178
00:08:51,270 --> 00:08:54,330
as of today well actually as of three

179
00:08:54,330 --> 00:08:55,110
days ago

180
00:08:55,110 --> 00:08:57,990
that's the same August 19 so the project

181
00:08:57,990 --> 00:09:01,079
is the combine the combination of three

182
00:09:01,079 --> 00:09:03,089
major open-source projects so as we said

183
00:09:03,089 --> 00:09:04,860
just a figment for da class for the

184
00:09:04,860 --> 00:09:08,970
m-class and also recently opti i'm not

185
00:09:08,970 --> 00:09:10,950
sure if you know what it is but opti is

186
00:09:10,950 --> 00:09:14,010
the reference trusted OS implementation

187
00:09:14,010 --> 00:09:17,089
that was originally provided by lin ro

188
00:09:17,089 --> 00:09:20,100
Nowlin aro proposed and the trusted fema

189
00:09:20,100 --> 00:09:23,190
project accepted the inclusion of octi

190
00:09:23,190 --> 00:09:26,100
within the trust fema dot org umbrella

191
00:09:26,100 --> 00:09:29,100
project so we'll see in a minute how

192
00:09:29,100 --> 00:09:31,110
this will translate in the ARM

193
00:09:31,110 --> 00:09:32,880
architecture from a reference software

194
00:09:32,880 --> 00:09:38,100
point of view in the second word so

195
00:09:38,100 --> 00:09:41,010
these are the current members you will

196
00:09:41,010 --> 00:09:44,390
see there is a different variety of

197
00:09:44,390 --> 00:09:47,970
market segments that are represented are

198
00:09:47,970 --> 00:09:50,579
mainly narrow just seats as one of the

199
00:09:50,579 --> 00:09:52,079
two founding members but then there are

200
00:09:52,079 --> 00:09:53,430
all the other companies that are

201
00:09:53,430 --> 00:09:55,529
contributing actively to the life cycle

202
00:09:55,529 --> 00:10:00,990
of the project as I said it covers all

203
00:10:00,990 --> 00:10:03,449
different kind of market segments in

204
00:10:03,449 --> 00:10:05,940
which there are armed products around so

205
00:10:05,940 --> 00:10:09,750
it goes from end-user devices of all

206
00:10:09,750 --> 00:10:13,440
kinds or wearables IOT mobile all the

207
00:10:13,440 --> 00:10:15,110
smart phones that you have in hands

208
00:10:15,110 --> 00:10:19,440
automotive everything that is on an

209
00:10:19,440 --> 00:10:23,060
automotive system as well as laptops so

210
00:10:23,060 --> 00:10:26,699
laptops on arm machines and then it goes

211
00:10:26,699 --> 00:10:31,019
down to embedded edge router gateways

212
00:10:31,019 --> 00:10:33,720
down to the cloud and the more

213
00:10:33,720 --> 00:10:35,310
traditional general-purpose server

214
00:10:35,310 --> 00:10:39,690
segment so it really covers a huge

215
00:10:39,690 --> 00:10:42,360
variety and these also translate in a

216
00:10:42,360 --> 00:10:45,360
huge set of very different security

217
00:10:45,360 --> 00:10:48,209
requirements when it's down to securing

218
00:10:48,209 --> 00:10:50,670
your platform because all of these have

219
00:10:50,670 --> 00:10:52,740
different trade models different

220
00:10:52,740 --> 00:10:56,850
security requirements at the end so

221
00:10:56,850 --> 00:11:00,449
which are the key pillars the goals upon

222
00:11:00,449 --> 00:11:03,089
which the project was created or quite

223
00:11:03,089 --> 00:11:04,860
simply so trying to solve the security

224
00:11:04,860 --> 00:11:08,040
issues by scale so take an example the

225
00:11:08,040 --> 00:11:09,389
spectrum

226
00:11:09,389 --> 00:11:14,220
mass of 2018 so if you are able to solve

227
00:11:14,220 --> 00:11:16,560
Spectre meltdown in one single codebase

228
00:11:16,560 --> 00:11:19,110
and then deploy it across all the

229
00:11:19,110 --> 00:11:21,600
segments that we saw before so we done a

230
00:11:21,600 --> 00:11:22,620
great success

231
00:11:22,620 --> 00:11:25,050
so we fix it once and for all across all

232
00:11:25,050 --> 00:11:28,709
the segments so joining the project

233
00:11:28,709 --> 00:11:30,959
gives shared responsibilities to the

234
00:11:30,959 --> 00:11:35,779
security of your products it obviously

235
00:11:35,779 --> 00:11:38,670
helps reduce in time to market and

236
00:11:38,670 --> 00:11:40,440
development costs that's the traditional

237
00:11:40,440 --> 00:11:43,079
argument for using and contributing back

238
00:11:43,079 --> 00:11:45,839
to open source projects less individual

239
00:11:45,839 --> 00:11:48,149
maintenance and minimize cost of

240
00:11:48,149 --> 00:11:52,500
ownership for for the project adopters

241
00:11:52,500 --> 00:11:55,110
and as I said so at the end of the day

242
00:11:55,110 --> 00:11:58,199
your security complexity is solved once

243
00:11:58,199 --> 00:11:58,829
and for all

244
00:11:58,829 --> 00:12:01,500
in one place in one code base that you

245
00:12:01,500 --> 00:12:04,740
can then audit assess and deploy across

246
00:12:04,740 --> 00:12:08,810
all your products in all your segments

247
00:12:09,500 --> 00:12:12,329
so that's one important thing that we

248
00:12:12,329 --> 00:12:14,459
recently set up on the project so we

249
00:12:14,459 --> 00:12:16,740
have an open CI system that continuously

250
00:12:16,740 --> 00:12:19,110
tests every single commit that goes on

251
00:12:19,110 --> 00:12:22,380
there the open review systems it gets

252
00:12:22,380 --> 00:12:26,399
tested on a lava system that is managed

253
00:12:26,399 --> 00:12:29,819
by Lin Aero as a contractor company and

254
00:12:29,819 --> 00:12:32,160
its tested currently against our

255
00:12:32,160 --> 00:12:33,990
platforms so there is a microcontroller

256
00:12:33,990 --> 00:12:36,839
base platform the NPS - and an

257
00:12:36,839 --> 00:12:38,730
application controller base the popular

258
00:12:38,730 --> 00:12:42,259
Juno development board but we obviously

259
00:12:42,259 --> 00:12:44,730
foresee that partners will donate

260
00:12:44,730 --> 00:12:47,339
project members will donate that boards

261
00:12:47,339 --> 00:12:50,370
to be contributor to the open CI so

262
00:12:50,370 --> 00:12:52,439
every single comment will be tested

263
00:12:52,439 --> 00:12:54,899
against all partners balls that are

264
00:12:54,899 --> 00:13:00,300
available in the open CI system that is

265
00:13:00,300 --> 00:13:02,519
already live so you can go and look at

266
00:13:02,519 --> 00:13:04,259
the URL it's already working

267
00:13:04,259 --> 00:13:06,509
for every commit that gets reviewed in

268
00:13:06,509 --> 00:13:11,459
open so some statistics shown by

269
00:13:11,459 --> 00:13:15,209
christiana up there so as of the first

270
00:13:15,209 --> 00:13:18,100
six months of 2019

271
00:13:18,100 --> 00:13:21,370
half of the Comets are coming from the

272
00:13:21,370 --> 00:13:24,820
our maker system and not from our so we

273
00:13:24,820 --> 00:13:27,220
reach the point almost the point of you

274
00:13:27,220 --> 00:13:28,510
know in which the partners are

275
00:13:28,510 --> 00:13:31,930
contributing more than our cells we have

276
00:13:31,930 --> 00:13:36,430
more than 30 partner platforms from 16

277
00:13:36,430 --> 00:13:38,050
different vendors and this is not

278
00:13:38,050 --> 00:13:40,090
counting the arm development boards so

279
00:13:40,090 --> 00:13:41,260
the undeveloped members there are a

280
00:13:41,260 --> 00:13:44,800
bunch of fixed virtual platform modeling

281
00:13:44,800 --> 00:13:46,510
platforms development boards that are

282
00:13:46,510 --> 00:13:49,090
armed property these are not counted in

283
00:13:49,090 --> 00:13:52,690
in that numbers and if you see the

284
00:13:52,690 --> 00:13:55,000
collaboration so from when we started

285
00:13:55,000 --> 00:13:56,320
with the project that we are obviously

286
00:13:56,320 --> 00:13:58,780
it was an arm project zero comments from

287
00:13:58,780 --> 00:14:02,340
the community now it's it runs of about

288
00:14:02,340 --> 00:14:05,920
almost 1000 of comments per year so an

289
00:14:05,920 --> 00:14:08,920
increasing a huge increase in the past

290
00:14:08,920 --> 00:14:11,050
few three years since we opened up also

291
00:14:11,050 --> 00:14:17,530
the governance of the project so how to

292
00:14:17,530 --> 00:14:19,450
get involved well first of all if you

293
00:14:19,450 --> 00:14:21,490
bump up an arm platform and you want to

294
00:14:21,490 --> 00:14:24,160
see what is going on under the hood so

295
00:14:24,160 --> 00:14:27,040
behind the kernel and behind the BIOS

296
00:14:27,040 --> 00:14:28,990
there will be a tiny layer that is

297
00:14:28,990 --> 00:14:31,060
trusted fear more and you can play with

298
00:14:31,060 --> 00:14:33,940
it you can look at the code base you can

299
00:14:33,940 --> 00:14:36,610
contribute you can read the mailing list

300
00:14:36,610 --> 00:14:38,980
participate 2d to the project life and

301
00:14:38,980 --> 00:14:41,380
this all for free then if you want to be

302
00:14:41,380 --> 00:14:43,000
part of the project if your company

303
00:14:43,000 --> 00:14:44,680
wants to contribute to the direction of

304
00:14:44,680 --> 00:14:46,870
the project you might consider joining

305
00:14:46,870 --> 00:14:49,810
it's just a female doctor project so at

306
00:14:49,810 --> 00:14:52,140
that point you will participate a known

307
00:14:52,140 --> 00:14:54,160
technical and strategic direction for

308
00:14:54,160 --> 00:14:56,710
the project itself and finally Beatrice

309
00:14:56,710 --> 00:15:00,210
a femur ambassador as I am here on stage

310
00:15:00,210 --> 00:15:04,300
so that's complete the first slot so

311
00:15:04,300 --> 00:15:08,230
what trust a female at org is now we've

312
00:15:08,230 --> 00:15:10,120
got the second part it's a bit more

313
00:15:10,120 --> 00:15:14,740
technical so what is happening from a

314
00:15:14,740 --> 00:15:16,960
standardization point of view in the

315
00:15:16,960 --> 00:15:18,610
open source field more space on arm

316
00:15:18,610 --> 00:15:21,010
especially on the second word former

317
00:15:21,010 --> 00:15:26,080
site then go here we go

318
00:15:26,080 --> 00:15:29,560
so this is a high-level picture on how

319
00:15:29,560 --> 00:15:31,010
the secure world

320
00:15:31,010 --> 00:15:32,600
architecture looks like today you know

321
00:15:32,600 --> 00:15:36,110
non platform so we've got yield three

322
00:15:36,110 --> 00:15:38,600
the highest privilege firmware that

323
00:15:38,600 --> 00:15:41,690
usually is based more or less on the

324
00:15:41,690 --> 00:15:43,520
trusted femur project that's the blue

325
00:15:43,520 --> 00:15:46,520
box but it has a lot of proprietary

326
00:15:46,520 --> 00:15:49,340
stuff coming from the silicon provider

327
00:15:49,340 --> 00:15:51,980
coming from the odium coming from other

328
00:15:51,980 --> 00:15:56,090
entities so when you have a secure

329
00:15:56,090 --> 00:15:58,850
service that you want to run on arm or a

330
00:15:58,850 --> 00:16:02,810
platform specific service the easiest

331
00:16:02,810 --> 00:16:04,880
choice to be is just to stock this

332
00:16:04,880 --> 00:16:07,910
service at el3 so implement it within

333
00:16:07,910 --> 00:16:10,070
the runtime portion of the film where at

334
00:16:10,070 --> 00:16:14,500
el3 and that's it like easy

335
00:16:14,500 --> 00:16:18,110
so I grayed out the trusted OS part here

336
00:16:18,110 --> 00:16:20,840
because it might not be relevant in all

337
00:16:20,840 --> 00:16:22,700
in all these segments so we have

338
00:16:22,700 --> 00:16:24,440
deployments that looks like this

339
00:16:24,440 --> 00:16:27,140
precisely and we have deployment from

340
00:16:27,140 --> 00:16:30,140
our partner that looks like that instead

341
00:16:30,140 --> 00:16:32,510
so in this case there is a trusted OS

342
00:16:32,510 --> 00:16:37,580
but again there are a lot of by this way

343
00:16:37,580 --> 00:16:40,880
there are a lot of red boxes that marks

344
00:16:40,880 --> 00:16:43,880
silicon band or specific pieces that are

345
00:16:43,880 --> 00:16:47,420
added they are added again at l3 they

346
00:16:47,420 --> 00:16:50,540
are added at the secure one layer within

347
00:16:50,540 --> 00:16:55,250
the trusted OS in all sort of places so

348
00:16:55,250 --> 00:16:56,870
we want to try and solve this situation

349
00:16:56,870 --> 00:17:00,760
Y which is the problem so the problem is

350
00:17:00,760 --> 00:17:06,099
that we've been increasingly complex el3

351
00:17:06,099 --> 00:17:08,900
standardization audit and certification

352
00:17:08,900 --> 00:17:11,780
becomes increasingly difficult so the

353
00:17:11,780 --> 00:17:13,970
initial goal for the untrusted fumer

354
00:17:13,970 --> 00:17:17,569
project back in 2013 was to defragment

355
00:17:17,569 --> 00:17:22,609
the our d 8 VMO space and we we have

356
00:17:22,609 --> 00:17:23,720
done a lot of steps in that direction

357
00:17:23,720 --> 00:17:27,410
but if partners continues to you know

358
00:17:27,410 --> 00:17:29,930
add specific services that he'll treat

359
00:17:29,930 --> 00:17:32,150
they just keep fragmenting the fillmore

360
00:17:32,150 --> 00:17:34,760
ecosystem at the highest privilege level

361
00:17:34,760 --> 00:17:37,310
so there are papers available in the

362
00:17:37,310 --> 00:17:39,860
internet in which security researchers

363
00:17:39,860 --> 00:17:41,900
continuously breaks proprietary

364
00:17:41,900 --> 00:17:44,780
implementation of the l3 firmer

365
00:17:44,780 --> 00:17:46,970
because because again it's difficult to

366
00:17:46,970 --> 00:17:49,940
audit it's difficult to certify it so if

367
00:17:49,940 --> 00:17:52,730
we want to have a secure highest

368
00:17:52,730 --> 00:17:54,560
privilege film where we want to have it

369
00:17:54,560 --> 00:17:57,980
clean other challenges if you have a

370
00:17:57,980 --> 00:18:00,440
trusted OS there is no separation

371
00:18:00,440 --> 00:18:03,440
between el3 and the security l1 space in

372
00:18:03,440 --> 00:18:06,290
which the trusted OS runs so effectively

373
00:18:06,290 --> 00:18:08,120
you cannot enforce the principle of

374
00:18:08,120 --> 00:18:11,450
least privilege and there is no weight

375
00:18:11,450 --> 00:18:13,610
for protecting the normal world from

376
00:18:13,610 --> 00:18:16,130
attacks coming from trusted application

377
00:18:16,130 --> 00:18:18,980
and trusted oasis as yet another attack

378
00:18:18,980 --> 00:18:21,110
vector that is very popular on research

379
00:18:21,110 --> 00:18:23,660
papers so these are all the challenges

380
00:18:23,660 --> 00:18:26,480
and this is more or less a dream that we

381
00:18:26,480 --> 00:18:29,120
have for the evolution of the firmware

382
00:18:29,120 --> 00:18:32,330
so we would like to have click on this

383
00:18:32,330 --> 00:18:35,630
side to have a stander and completely

384
00:18:35,630 --> 00:18:39,650
generic en3 runtime fear more that will

385
00:18:39,650 --> 00:18:41,870
be delivered and provided by trusted

386
00:18:41,870 --> 00:18:44,120
femur as an open-source project as it is

387
00:18:44,120 --> 00:18:46,820
today so we would like to encourage all

388
00:18:46,820 --> 00:18:50,150
our partners to move out all their

389
00:18:50,150 --> 00:18:53,150
platform specific services and secure

390
00:18:53,150 --> 00:18:55,640
services that they need so for doing

391
00:18:55,640 --> 00:19:00,020
drn's secure payments secure storage or

392
00:19:00,020 --> 00:19:02,930
crypt operations so to move all these

393
00:19:02,930 --> 00:19:08,050
services out from l3 into lowest

394
00:19:08,050 --> 00:19:10,460
exception levels in the secular world so

395
00:19:10,460 --> 00:19:13,940
lower lower exceptional level like

396
00:19:13,940 --> 00:19:15,910
sakura l0

397
00:19:15,910 --> 00:19:19,550
and what about platform specific

398
00:19:19,550 --> 00:19:21,860
configurations like memory addresses and

399
00:19:21,860 --> 00:19:24,950
so on so we've got already today in the

400
00:19:24,950 --> 00:19:28,580
code base a way for adding configuration

401
00:19:28,580 --> 00:19:31,340
files it can be a build time or at

402
00:19:31,340 --> 00:19:34,640
runtime to the fumer so you can have one

403
00:19:34,640 --> 00:19:37,100
single binary and configure the binary

404
00:19:37,100 --> 00:19:40,340
with your platform specific parameters

405
00:19:40,340 --> 00:19:42,860
you can do that today so mixing these

406
00:19:42,860 --> 00:19:45,410
two topics we would really like to

407
00:19:45,410 --> 00:19:47,210
arrive to a point in which there is a

408
00:19:47,210 --> 00:19:50,570
stander audited certified el3 firmware

409
00:19:50,570 --> 00:19:52,910
for your platforms and all the

410
00:19:52,910 --> 00:19:56,420
differentiator services are moved up to

411
00:19:56,420 --> 00:19:58,110
lowest exception levels

412
00:19:58,110 --> 00:20:00,420
so how to arrive to this point from the

413
00:20:00,420 --> 00:20:02,190
previous picture so we have to build an

414
00:20:02,190 --> 00:20:04,560
architecture and we have been working on

415
00:20:04,560 --> 00:20:06,390
this architecture for two three years

416
00:20:06,390 --> 00:20:08,570
now

417
00:20:08,570 --> 00:20:11,160
so these are the building blocks you may

418
00:20:11,160 --> 00:20:12,540
have heard of it in previous

419
00:20:12,540 --> 00:20:15,570
presentations also last year an army

420
00:20:15,570 --> 00:20:18,000
employee Sandrine was here presenting

421
00:20:18,000 --> 00:20:20,820
some of these building blocks so secure

422
00:20:20,820 --> 00:20:23,850
partition is an unprivileged software

423
00:20:23,850 --> 00:20:25,860
environment a sandbox environment that

424
00:20:25,860 --> 00:20:28,230
runs in the secular world in which you

425
00:20:28,230 --> 00:20:32,340
can run your secure services the beauty

426
00:20:32,340 --> 00:20:34,740
of the secure partition it it's that it

427
00:20:34,740 --> 00:20:37,230
has an isolated execution context so

428
00:20:37,230 --> 00:20:38,970
every partition is isolated from each

429
00:20:38,970 --> 00:20:41,640
other and it has limited access to the

430
00:20:41,640 --> 00:20:44,580
system resources so it doesn't see all

431
00:20:44,580 --> 00:20:48,170
your system resources and who controls

432
00:20:48,170 --> 00:20:51,630
the visibility of the of the resources

433
00:20:51,630 --> 00:20:54,150
for a partition the second building

434
00:20:54,150 --> 00:20:56,190
block the secure partition manager it's

435
00:20:56,190 --> 00:20:59,270
an entity that runs traditionally at

436
00:20:59,270 --> 00:21:02,580
el34 systems that are not yet a dot for

437
00:21:02,580 --> 00:21:08,340
enabled and this entity we will see in a

438
00:21:08,340 --> 00:21:12,030
picture in a second owns and enforces

439
00:21:12,030 --> 00:21:13,740
the principle of least privilege so it

440
00:21:13,740 --> 00:21:15,960
basically tells which resources each

441
00:21:15,960 --> 00:21:19,800
partition is able to see and it's also

442
00:21:19,800 --> 00:21:21,690
responsible for the runtime

443
00:21:21,690 --> 00:21:23,520
communication between partitions and

444
00:21:23,520 --> 00:21:25,950
between the normal world that is

445
00:21:25,950 --> 00:21:28,470
requesting a secure service ok so I want

446
00:21:28,470 --> 00:21:31,020
to do a secure payment from my Linux OS

447
00:21:31,020 --> 00:21:33,930
so I execute the service request and

448
00:21:33,930 --> 00:21:36,000
this is the router that routes the

449
00:21:36,000 --> 00:21:38,430
request up to the specific partition

450
00:21:38,430 --> 00:21:40,500
that will execute the payment service in

451
00:21:40,500 --> 00:21:44,240
the sector world and then obviously

452
00:21:44,240 --> 00:21:46,830
standard set of interfaces so no

453
00:21:46,830 --> 00:21:48,420
proprietary stuff no proprietary

454
00:21:48,420 --> 00:21:53,550
interfaces a dock SMC Corning SMC but

455
00:21:53,550 --> 00:21:55,680
rather a standard set of interfaces that

456
00:21:55,680 --> 00:21:59,100
will really describe how these various

457
00:21:59,100 --> 00:22:02,610
entities communicate together so the

458
00:22:02,610 --> 00:22:06,420
picture starts to look like this so this

459
00:22:06,420 --> 00:22:10,850
is an early picture from 2017 ish the

460
00:22:10,850 --> 00:22:13,580
we completed the development upstream of

461
00:22:13,580 --> 00:22:16,549
this picture last year so this picture

462
00:22:16,549 --> 00:22:18,950
is actually already available using the

463
00:22:18,950 --> 00:22:20,690
absent project trust a few more and

464
00:22:20,690 --> 00:22:24,169
Tiano core indicate - so you basically

465
00:22:24,169 --> 00:22:27,169
have a generic femur that implements the

466
00:22:27,169 --> 00:22:29,779
partition manager the entity that

467
00:22:29,779 --> 00:22:32,600
controls the partition there is a little

468
00:22:32,600 --> 00:22:34,940
shim that translates your request from

469
00:22:34,940 --> 00:22:36,950
the normal world to the second world and

470
00:22:36,950 --> 00:22:38,830
then here we go the secure partition

471
00:22:38,830 --> 00:22:41,659
that can implement what is called a

472
00:22:41,659 --> 00:22:44,240
standalone mmm service as defined by the

473
00:22:44,240 --> 00:22:47,659
UEFI P icepack and in the channel

474
00:22:47,659 --> 00:22:50,210
corrida k2 there is a package that is

475
00:22:50,210 --> 00:22:52,970
maintained by arm and partners that

476
00:22:52,970 --> 00:22:55,659
implement standalone mmm services and

477
00:22:55,659 --> 00:22:59,240
we've got already platforms implementing

478
00:22:59,240 --> 00:23:02,080
this model that are available now so

479
00:23:02,080 --> 00:23:05,500
this is one step in the right direction

480
00:23:05,500 --> 00:23:08,330
it's not enough though it's not enough

481
00:23:08,330 --> 00:23:10,879
because this is allowing just single one

482
00:23:10,879 --> 00:23:12,889
part one single partition to run in the

483
00:23:12,889 --> 00:23:14,929
security world so you can only have one

484
00:23:14,929 --> 00:23:18,049
service one payment service when DRM

485
00:23:18,049 --> 00:23:21,049
storage access secure storage access one

486
00:23:21,049 --> 00:23:23,690
only one in your platform and that's the

487
00:23:23,690 --> 00:23:27,230
limitation and then it also has still a

488
00:23:27,230 --> 00:23:30,169
run to completion model so it means that

489
00:23:30,169 --> 00:23:31,820
the normal world is not in control of

490
00:23:31,820 --> 00:23:33,860
these cycles that are spending in the

491
00:23:33,860 --> 00:23:35,269
sector world so there is the same

492
00:23:35,269 --> 00:23:37,639
problem that other architectures has on

493
00:23:37,639 --> 00:23:41,899
their secure systems so the way forward

494
00:23:41,899 --> 00:23:44,929
is the evolution and the evolutions of

495
00:23:44,929 --> 00:23:46,580
the company the pictures with complex

496
00:23:46,580 --> 00:23:49,429
become a bit complicated so these the

497
00:23:49,429 --> 00:23:53,509
interface now changes it becomes a more

498
00:23:53,509 --> 00:23:55,399
complex interface called secure

499
00:23:55,399 --> 00:23:58,370
partition client interface how it's

500
00:23:58,370 --> 00:24:02,149
changes it allows multiple services

501
00:24:02,149 --> 00:24:05,840
requests to happen concurrently so you

502
00:24:05,840 --> 00:24:08,179
can spawn basically multiple partitions

503
00:24:08,179 --> 00:24:11,419
sorry you can call into multiple

504
00:24:11,419 --> 00:24:12,970
partitions in the secular world

505
00:24:12,970 --> 00:24:17,179
concurrently and it also allows yielding

506
00:24:17,179 --> 00:24:21,019
calls so it means that the normal world

507
00:24:21,019 --> 00:24:23,480
is in control of the cycles that are

508
00:24:23,480 --> 00:24:24,320
spent in the

509
00:24:24,320 --> 00:24:27,320
secular world so these prevents the

510
00:24:27,320 --> 00:24:29,600
cycle stealing problem that was

511
00:24:29,600 --> 00:24:31,789
affecting the previous picture so the

512
00:24:31,789 --> 00:24:34,399
secular world is no more stealing cycles

513
00:24:34,399 --> 00:24:36,710
behind your hypervisor or behind your

514
00:24:36,710 --> 00:24:42,039
normal work kernel under the hood so

515
00:24:42,039 --> 00:24:44,720
that's on the normal word side on the

516
00:24:44,720 --> 00:24:46,940
secular world side in order to allow

517
00:24:46,940 --> 00:24:50,000
multiple services and in order also to

518
00:24:50,000 --> 00:24:53,450
have trusted applications that can run

519
00:24:53,450 --> 00:24:58,220
together we are working to enable these

520
00:24:58,220 --> 00:25:01,549
pictures so having a trusted OS and the

521
00:25:01,549 --> 00:25:04,490
trusted few model project will deliver a

522
00:25:04,490 --> 00:25:07,700
solution based on opti so hence the

523
00:25:07,700 --> 00:25:10,789
importance of having opti migrated into

524
00:25:10,789 --> 00:25:13,490
the trust a female of your project so we

525
00:25:13,490 --> 00:25:15,289
will provide a reference implementation

526
00:25:15,289 --> 00:25:18,769
not only of the l3 firmware but also of

527
00:25:18,769 --> 00:25:22,460
the secure l1 using op te the secure

528
00:25:22,460 --> 00:25:25,159
partition manager will have work to do

529
00:25:25,159 --> 00:25:29,330
in the opticore kernel as well because

530
00:25:29,330 --> 00:25:31,490
it will have to decide if the requests

531
00:25:31,490 --> 00:25:33,080
that are coming from the normal world

532
00:25:33,080 --> 00:25:36,649
needs to land on trusted applications or

533
00:25:36,649 --> 00:25:40,190
on standalone services and that's an

534
00:25:40,190 --> 00:25:43,940
implementation choice by our audience or

535
00:25:43,940 --> 00:25:46,009
our partners so depending on which

536
00:25:46,009 --> 00:25:49,039
services fits mostly a trusted

537
00:25:49,039 --> 00:25:52,730
application or other services might want

538
00:25:52,730 --> 00:25:54,679
to be separated so if you have a

539
00:25:54,679 --> 00:25:57,919
specific secure storage access and you

540
00:25:57,919 --> 00:25:59,809
have a driver for it and you don't want

541
00:25:59,809 --> 00:26:01,759
to rewrite it as a trusted application

542
00:26:01,759 --> 00:26:04,429
you can run it on top of AB key as a

543
00:26:04,429 --> 00:26:10,970
standalone mm service on top of that

544
00:26:10,970 --> 00:26:15,250
again the blue box here means that our

545
00:26:15,250 --> 00:26:18,049
Frutiger semi total project with the arm

546
00:26:18,049 --> 00:26:20,379
ecosystem is also going to provide

547
00:26:20,379 --> 00:26:23,960
reference trusted applications for PSA

548
00:26:23,960 --> 00:26:27,830
specific services so PSA services are a

549
00:26:27,830 --> 00:26:30,649
reality on the microcontrollers today so

550
00:26:30,649 --> 00:26:33,379
services like crypt operations secure

551
00:26:33,379 --> 00:26:35,678
storage

552
00:26:36,300 --> 00:26:40,710
at the station these will be ported as

553
00:26:40,710 --> 00:26:42,960
reference services on the application

554
00:26:42,960 --> 00:26:45,600
processors as well and they will be

555
00:26:45,600 --> 00:26:48,090
ported as trusted applications running

556
00:26:48,090 --> 00:26:50,730
on top of opt and delivered through

557
00:26:50,730 --> 00:26:57,570
trust a few more wrote org again so this

558
00:26:57,570 --> 00:27:00,179
is the picture that we are working on

559
00:27:00,179 --> 00:27:03,929
right now in the our maker system for

560
00:27:03,929 --> 00:27:07,140
the evolution of the secular world

561
00:27:07,140 --> 00:27:10,050
software this is not the final picture

562
00:27:10,050 --> 00:27:13,740
though because this creates a nice and

563
00:27:13,740 --> 00:27:14,610
clean

564
00:27:14,610 --> 00:27:18,660
migration patch losted here we go

565
00:27:18,660 --> 00:27:21,570
for what we will come next and what it

566
00:27:21,570 --> 00:27:25,020
will come next is written here is the

567
00:27:25,020 --> 00:27:28,620
missing block in the middle here so the

568
00:27:28,620 --> 00:27:31,800
next picture is the final goal is to

569
00:27:31,800 --> 00:27:36,870
have a secure l2 firmware so someone

570
00:27:36,870 --> 00:27:39,420
would call it a secure hypervisor we

571
00:27:39,420 --> 00:27:41,220
don't really like that wording because

572
00:27:41,220 --> 00:27:43,950
it's not gonna be a real full-fledged

573
00:27:43,950 --> 00:27:46,140
hypervisor running in the node in the

574
00:27:46,140 --> 00:27:48,840
sector world it will mostly be a secure

575
00:27:48,840 --> 00:27:50,960
partition manager as we saw it before

576
00:27:50,960 --> 00:27:54,450
that will decide which request goes into

577
00:27:54,450 --> 00:27:57,630
which partitions on top the beauty of

578
00:27:57,630 --> 00:28:01,550
this picture is that at this point the

579
00:28:01,550 --> 00:28:05,760
isolation between various partitions and

580
00:28:05,760 --> 00:28:07,770
in these case there is one partition

581
00:28:07,770 --> 00:28:09,990
that embraces the world trusted OS and

582
00:28:09,990 --> 00:28:12,360
another partition that embrace all

583
00:28:12,360 --> 00:28:15,780
single possible standalone mmm service

584
00:28:15,780 --> 00:28:17,790
that you could have so those partitions

585
00:28:17,790 --> 00:28:21,840
will be isolated by the hardware not by

586
00:28:21,840 --> 00:28:23,730
the software as it was in the previous

587
00:28:23,730 --> 00:28:26,309
picture so this is still a software

588
00:28:26,309 --> 00:28:28,020
solution there is nothing in the

589
00:28:28,020 --> 00:28:29,820
hardware that prevents a compromised

590
00:28:29,820 --> 00:28:32,400
service to go around and play with the

591
00:28:32,400 --> 00:28:34,679
other services this is a hardware

592
00:28:34,679 --> 00:28:37,410
enforce solution and these comes with

593
00:28:37,410 --> 00:28:39,860
the army dot for architecture and

594
00:28:39,860 --> 00:28:41,760
specifically the secure to

595
00:28:41,760 --> 00:28:45,780
virtualization extension so that's the

596
00:28:45,780 --> 00:28:46,770
direction of travel

597
00:28:46,770 --> 00:28:48,860
obviously coupling these with the new

598
00:28:48,860 --> 00:28:50,460
smmu architecture

599
00:28:50,460 --> 00:28:52,019
geek architecture this will give

600
00:28:52,019 --> 00:28:54,600
system-wide isolations also for all your

601
00:28:54,600 --> 00:28:57,929
peripherals in the system and this will

602
00:28:57,929 --> 00:29:00,539
be our next two can development in the

603
00:29:00,539 --> 00:29:04,679
TF lorrog space a topic for lay 2019 and

604
00:29:04,679 --> 00:29:09,779
the rise of 2020 all the blue boxes as I

605
00:29:09,779 --> 00:29:11,909
said will be delivered as part of

606
00:29:11,909 --> 00:29:19,559
trusses teamwork and yeah I think that's

607
00:29:19,559 --> 00:29:24,059
it there are few links if you wanna go

608
00:29:24,059 --> 00:29:25,440
and look at the project the project

609
00:29:25,440 --> 00:29:28,590
charter is publicly available if you

610
00:29:28,590 --> 00:29:30,509
want to consider joining the project

611
00:29:30,509 --> 00:29:33,299
there is a white paper from arm that

612
00:29:33,299 --> 00:29:35,820
talks about virtualization extensions

613
00:29:35,820 --> 00:29:38,990
coming with the aid of for architecture

614
00:29:38,990 --> 00:29:41,669
the previous presentation from Sun drain

615
00:29:41,669 --> 00:29:44,879
or CE OS FC last year regarding secure

616
00:29:44,879 --> 00:29:47,820
partitions a deep dive on the status of

617
00:29:47,820 --> 00:29:50,369
the art back one year ago unsecured

618
00:29:50,369 --> 00:29:54,269
partitions link to the platform security

619
00:29:54,269 --> 00:29:57,179
architecture frame or from arm and the

620
00:29:57,179 --> 00:29:59,999
specification as PCI that will be called

621
00:29:59,999 --> 00:30:04,110
PS a few more frame or for the a-class

622
00:30:04,110 --> 00:30:07,320
processors will be coming out very soon

623
00:30:07,320 --> 00:30:11,279
from our so that's it

624
00:30:11,279 --> 00:30:14,460
any questions thank you very much let's

625
00:30:14,460 --> 00:30:20,970
have another round of applause so we

626
00:30:20,970 --> 00:30:24,269
have yeah we have time for about ten

627
00:30:24,269 --> 00:30:26,279
questions but since this is the end of

628
00:30:26,279 --> 00:30:31,379
day we have virtually infinite amount of

629
00:30:31,379 --> 00:30:37,049
questions fishing that went off your

630
00:30:37,049 --> 00:30:40,200
stretch that you have a way to avoid

631
00:30:40,200 --> 00:30:44,249
like the x-ray detection steering cycle

632
00:30:44,249 --> 00:30:46,710
from socket I didn't understand how you

633
00:30:46,710 --> 00:30:50,129
can prevent that so the specification I

634
00:30:50,129 --> 00:30:51,269
I've lost the slides but the

635
00:30:51,269 --> 00:30:53,519
specification that will be coming out

636
00:30:53,519 --> 00:30:58,909
allows for specific calls that basically

637
00:30:58,909 --> 00:31:01,799
allows the normal world to tell the

638
00:31:01,799 --> 00:31:02,700
second world

639
00:31:02,700 --> 00:31:04,290
how much cycles

640
00:31:04,290 --> 00:31:08,190
it's allowed to spend and then there is

641
00:31:08,190 --> 00:31:10,860
a mechanism for the normal world to

642
00:31:10,860 --> 00:31:13,530
request the basically and interrupt

643
00:31:13,530 --> 00:31:15,420
based mechanisms to request the

644
00:31:15,420 --> 00:31:18,840
execution back to the normal world if it

645
00:31:18,840 --> 00:31:22,350
wants to but still steering cycle we

646
00:31:22,350 --> 00:31:26,970
have in x86 we have sliced as a man that

647
00:31:26,970 --> 00:31:31,260
we have we can cut a big program into

648
00:31:31,260 --> 00:31:35,610
pieces like Windows has a specification

649
00:31:35,610 --> 00:31:39,540
limit how long you can stay in the SMM

650
00:31:39,540 --> 00:31:41,580
okay but if you're Linux kernel wants to

651
00:31:41,580 --> 00:31:44,250
use your cycles back you cannot ask them

652
00:31:44,250 --> 00:31:46,020
back from the SMM it should it's

653
00:31:46,020 --> 00:31:48,330
disappeared it's a disappear just that's

654
00:31:48,330 --> 00:31:52,890
not what it happens here okay we we need

655
00:31:52,890 --> 00:31:55,800
to look at this back deeply and see how

656
00:31:55,800 --> 00:31:57,600
it allows the normal world kernel to

657
00:31:57,600 --> 00:32:00,120
request your cycles back and bring the

658
00:32:00,120 --> 00:32:03,030
execution back to your Linux kernel when

659
00:32:03,030 --> 00:32:05,450
you need it

660
00:32:11,330 --> 00:32:14,490
other more questions yes repeating the

661
00:32:14,490 --> 00:32:16,020
question like I think you know the

662
00:32:16,020 --> 00:32:18,720
question but the thing is that this is

663
00:32:18,720 --> 00:32:20,970
the question that does not quite related

664
00:32:20,970 --> 00:32:23,460
to development of a TF but you are using

665
00:32:23,460 --> 00:32:27,060
a DF in new boot per arm sister fir as a

666
00:32:27,060 --> 00:32:30,360
block by new block like we built out of

667
00:32:30,360 --> 00:32:33,870
three ATF and we will reuse it in you

668
00:32:33,870 --> 00:32:36,780
good image format do you see any point

669
00:32:36,780 --> 00:32:39,030
of taking that code or for that code

670
00:32:39,030 --> 00:32:41,850
into you boot and do you see any point

671
00:32:41,850 --> 00:32:46,170
with respect to licensing is it that

672
00:32:46,170 --> 00:32:49,200
seems like worth to 4:30 to boot or a

673
00:32:49,200 --> 00:32:53,450
leg you book so I will repeat my answer

674
00:32:53,450 --> 00:32:57,420
basically the same so I'm not a lawyer

675
00:32:57,420 --> 00:33:01,230
so I cannot really pronounce myself on

676
00:33:01,230 --> 00:33:04,080
the legal side of the licensing what you

677
00:33:04,080 --> 00:33:06,830
can do is you can surely for the project

678
00:33:06,830 --> 00:33:10,170
that is we still keep its B as the

679
00:33:10,170 --> 00:33:12,660
permissive license and you can mix and

680
00:33:12,660 --> 00:33:15,030
release it as part of your boot

681
00:33:15,030 --> 00:33:18,150
now how you boot with its

682
00:33:18,150 --> 00:33:20,850
GPL will be something licensed we cope

683
00:33:20,850 --> 00:33:23,910
with the inclusion of a BSD piece of

684
00:33:23,910 --> 00:33:26,400
code that's up for you to sort out on

685
00:33:26,400 --> 00:33:28,560
the legal side that's not up for me to

686
00:33:28,560 --> 00:33:29,070
decide

687
00:33:29,070 --> 00:33:32,340
that's my political answer then we can

688
00:33:32,340 --> 00:33:36,000
discuss more with some licensing angles

689
00:33:36,000 --> 00:33:44,010
offline okay thanks if so my question

690
00:33:44,010 --> 00:33:46,350
was for the army it normally we have

691
00:33:46,350 --> 00:33:48,930
like in el3 the secure copies or some of

692
00:33:48,930 --> 00:33:51,780
the registers like in Jake v3 or SMU so

693
00:33:51,780 --> 00:33:54,120
in the last slide you sent you mentioned

694
00:33:54,120 --> 00:33:55,950
about a dot for that the firmware is

695
00:33:55,950 --> 00:33:59,130
going to be a l3 jungak and you're going

696
00:33:59,130 --> 00:34:01,140
to push the secure things into the l2

697
00:34:01,140 --> 00:34:03,750
right so the secure copies do they

698
00:34:03,750 --> 00:34:07,170
become programmable in l2 then or how's

699
00:34:07,170 --> 00:34:08,940
that I mean all the secure copies go

700
00:34:08,940 --> 00:34:11,940
away in a dot for do you remember I

701
00:34:11,940 --> 00:34:15,840
don't remember reading about that but I

702
00:34:15,840 --> 00:34:17,969
don't remember a particular detail we

703
00:34:17,969 --> 00:34:21,540
can check it so when I say the l3 femur

704
00:34:21,540 --> 00:34:25,139
becomes standard we we cannot enforce

705
00:34:25,139 --> 00:34:27,270
our partners to just get rid of

706
00:34:27,270 --> 00:34:29,460
everything that they have and just add

707
00:34:29,460 --> 00:34:31,649
up everything that comes downstream from

708
00:34:31,649 --> 00:34:34,770
TF dot or what we can do is encourage or

709
00:34:34,770 --> 00:34:36,570
first of all encourage platform pours to

710
00:34:36,570 --> 00:34:39,750
be up streamed then we can encourage

711
00:34:39,750 --> 00:34:42,239
collaboration on topics like this in the

712
00:34:42,239 --> 00:34:45,090
mailing list saying look we have this

713
00:34:45,090 --> 00:34:47,699
problem in our we usually you know keep

714
00:34:47,699 --> 00:34:50,130
a secure estate copy how do we cope with

715
00:34:50,130 --> 00:34:52,080
that on security l2 do we want to move

716
00:34:52,080 --> 00:34:55,380
that on SEL to and so on that's probably

717
00:34:55,380 --> 00:34:57,720
the right direction to go we can we can

718
00:34:57,720 --> 00:35:00,060
be cast discuss it offline on and on the

719
00:35:00,060 --> 00:35:02,460
public mailing list but that's the kind

720
00:35:02,460 --> 00:35:05,730
of direction so we want to start now to

721
00:35:05,730 --> 00:35:09,090
tell partners look we would really like

722
00:35:09,090 --> 00:35:12,480
to clean up the l3 space in order also

723
00:35:12,480 --> 00:35:17,010
for the coming of the SEL to one or two

724
00:35:17,010 --> 00:35:20,010
years out down the line if you want to

725
00:35:20,010 --> 00:35:22,410
be prepared we can start approaching the

726
00:35:22,410 --> 00:35:23,100
top lurch

727
00:35:23,100 --> 00:35:26,400
otherwise partners just will be caught

728
00:35:26,400 --> 00:35:29,070
unprepared right that's what we would

729
00:35:29,070 --> 00:35:33,110
try to avoid sure thank you

730
00:35:37,400 --> 00:35:40,230
I'm sorry I'm very ignorant of all this

731
00:35:40,230 --> 00:35:43,190
but my question is you've got lots of

732
00:35:43,190 --> 00:35:45,960
microprocessors running inside the ARM

733
00:35:45,960 --> 00:35:49,890
chip why D while the sealing of cycles

734
00:35:49,890 --> 00:35:51,660
and so on worry you just did a crack one

735
00:35:51,660 --> 00:35:58,710
of them to secure stuff so let me see if

736
00:35:58,710 --> 00:36:01,290
I have understood the question so in a

737
00:36:01,290 --> 00:36:03,050
typical armed system there might be

738
00:36:03,050 --> 00:36:09,900
multiple multiple application processors

739
00:36:09,900 --> 00:36:12,720
so you are suggesting let's reserve one

740
00:36:12,720 --> 00:36:14,760
of the application processor for doing

741
00:36:14,760 --> 00:36:20,880
secure stuff did I get it right yeah I

742
00:36:20,880 --> 00:36:27,690
guess I'm saying okay so okay so see how

743
00:36:27,690 --> 00:36:30,980
I can reply to that in 30 seconds so

744
00:36:30,980 --> 00:36:35,160
every partners has its different kind of

745
00:36:35,160 --> 00:36:37,970
system so there are system with age

746
00:36:37,970 --> 00:36:42,090
mixed very high hand cortex a course

747
00:36:42,090 --> 00:36:44,340
there are system that are big little

748
00:36:44,340 --> 00:36:46,350
systems in the mobile space with

749
00:36:46,350 --> 00:36:48,180
completely different set configurations

750
00:36:48,180 --> 00:36:52,500
so every core counts a lot and every

751
00:36:52,500 --> 00:36:56,490
every application processor costs a lot

752
00:36:56,490 --> 00:36:59,220
of money to our partners so what arm is

753
00:36:59,220 --> 00:37:02,190
suggesting from a security standpoint so

754
00:37:02,190 --> 00:37:05,130
is either go with a key base solution

755
00:37:05,130 --> 00:37:08,160
like this one so these are solutions to

756
00:37:08,160 --> 00:37:11,220
solve security on your application

757
00:37:11,220 --> 00:37:14,280
processor that you still have but if you

758
00:37:14,280 --> 00:37:16,830
can afford having a separate coprocessor

759
00:37:16,830 --> 00:37:21,510
that does security we we are okay with

760
00:37:21,510 --> 00:37:23,190
that and actually the architecture

761
00:37:23,190 --> 00:37:26,070
allows you to put to reserve one of the

762
00:37:26,070 --> 00:37:28,770
partitions to communicate with your

763
00:37:28,770 --> 00:37:31,619
security core processor it will probably

764
00:37:31,619 --> 00:37:35,040
not be a cortex a as we know it it will

765
00:37:35,040 --> 00:37:36,780
probably be a specific security

766
00:37:36,780 --> 00:37:40,590
processor and arm has other IPS to

767
00:37:40,590 --> 00:37:43,500
suggest to our partners for doing this

768
00:37:43,500 --> 00:37:45,300
sort operation so Cobra

769
00:37:45,300 --> 00:37:47,460
so that does accelerate security

770
00:37:47,460 --> 00:37:49,470
operations coprocessor that does

771
00:37:49,470 --> 00:37:52,860
discrete TPM implementations coprocessor

772
00:37:52,860 --> 00:37:55,830
that does all the sector of storage that

773
00:37:55,830 --> 00:37:58,490
you need so we do have in our portfolio

774
00:37:58,490 --> 00:38:02,190
other products so not the traditional

775
00:38:02,190 --> 00:38:03,510
application process because it would be

776
00:38:03,510 --> 00:38:05,850
a waste of money so they are different

777
00:38:05,850 --> 00:38:07,620
they are fought for different purposes

778
00:38:07,620 --> 00:38:10,710
they are not optimized for accelerating

779
00:38:10,710 --> 00:38:12,750
crypt operations for example so we have

780
00:38:12,750 --> 00:38:18,330
separate Hardware and IPS that are fit

781
00:38:18,330 --> 00:38:21,210
for that purpose so we foresee a system

782
00:38:21,210 --> 00:38:23,700
in which you can have your set of cortex

783
00:38:23,700 --> 00:38:26,670
a that does your traditional job and the

784
00:38:26,670 --> 00:38:28,290
communication with the security core

785
00:38:28,290 --> 00:38:31,380
processor goes through the trans own so

786
00:38:31,380 --> 00:38:32,790
goes through the second word and you

787
00:38:32,790 --> 00:38:35,340
have a partition that communicates and

788
00:38:35,340 --> 00:38:38,730
just it just a relay basically so it

789
00:38:38,730 --> 00:38:40,560
received a request from the normal word

790
00:38:40,560 --> 00:38:42,210
it goes in the securin that it gets

791
00:38:42,210 --> 00:38:45,990
relayed to your core processor similar

792
00:38:45,990 --> 00:38:49,620
the answer is yes yes but not in the

793
00:38:49,620 --> 00:38:51,450
cortex a we've a different route of our

794
00:38:51,450 --> 00:38:54,330
my piece but you you working on SSA is

795
00:38:54,330 --> 00:38:56,430
where there will be a security processor

796
00:38:56,430 --> 00:38:58,770
is one of the to Isis only that would

797
00:38:58,770 --> 00:39:00,480
all the stuff one of the optional

798
00:39:00,480 --> 00:39:03,030
deployment choice yes okay it's yes

799
00:39:03,030 --> 00:39:05,190
absolutely so depending on the segment

800
00:39:05,190 --> 00:39:07,830
again it might be more popular or less

801
00:39:07,830 --> 00:39:09,660
popular but it would be given the choice

802
00:39:09,660 --> 00:39:19,260
or partners absolutely since no one is

803
00:39:19,260 --> 00:39:21,450
asking so I asked my second question

804
00:39:21,450 --> 00:39:26,340
okay yeah so in your sites that has the

805
00:39:26,340 --> 00:39:33,660
proprietary interface cut spi I prefer

806
00:39:33,660 --> 00:39:35,250
to call it standard rather than

807
00:39:35,250 --> 00:39:40,920
proprietary standard ok so I what I have

808
00:39:40,920 --> 00:39:44,040
noticed you know in the previous talk

809
00:39:44,040 --> 00:39:49,410
from FSP right and then they have the to

810
00:39:49,410 --> 00:39:52,970
penguin version and they start to use

811
00:39:52,970 --> 00:39:57,480
the native UEFI interface and their API

812
00:39:57,480 --> 00:39:59,210
interface

813
00:39:59,210 --> 00:40:03,540
okay so it's it's pretty common even in

814
00:40:03,540 --> 00:40:08,400
being a cellphone that we carry a UEFI

815
00:40:08,400 --> 00:40:10,950
interface and also carry our device tree

816
00:40:10,950 --> 00:40:13,700
interface something like that so I just

817
00:40:13,700 --> 00:40:18,869
wondering is it but do you have any plan

818
00:40:18,869 --> 00:40:22,680
like making two type of interface for

819
00:40:22,680 --> 00:40:27,359
different world but for for different

820
00:40:27,359 --> 00:40:31,590
firmware right so I should go back to

821
00:40:31,590 --> 00:40:33,600
the to the picture but basically it

822
00:40:33,600 --> 00:40:36,000
doesn't matter what you run on the

823
00:40:36,000 --> 00:40:37,280
normal world

824
00:40:37,280 --> 00:40:43,020
Thanks so we we can stop here so it

825
00:40:43,020 --> 00:40:45,570
doesn't matter what you have in the

826
00:40:45,570 --> 00:40:48,810
normal world space here or here so you

827
00:40:48,810 --> 00:40:51,600
can have that's something I forgot to

828
00:40:51,600 --> 00:40:53,520
mention actually thanks for reminding me

829
00:40:53,520 --> 00:40:56,160
that so you can have a normal website as

830
00:40:56,160 --> 00:40:58,950
a bootloader trusted firmware doesn't

831
00:40:58,950 --> 00:41:01,500
care it you may have coreboot you might

832
00:41:01,500 --> 00:41:03,930
have you boot you might have t a no

833
00:41:03,930 --> 00:41:06,810
corrida k2 or whatever proprietary bios

834
00:41:06,810 --> 00:41:10,230
implementation you want and from so how

835
00:41:10,230 --> 00:41:12,780
the bios or the bootloader exposes and

836
00:41:12,780 --> 00:41:14,520
communicates to the kernel again it

837
00:41:14,520 --> 00:41:16,080
doesn't matter from atrocity no

838
00:41:16,080 --> 00:41:18,300
perspective what i'm talking about down

839
00:41:18,300 --> 00:41:22,710
there is how the your linux kernel or

840
00:41:22,710 --> 00:41:24,869
your proprietary kernel and how your

841
00:41:24,869 --> 00:41:28,680
bootloader hypervisor calls in to secure

842
00:41:28,680 --> 00:41:32,790
services in the secular world so these

843
00:41:32,790 --> 00:41:36,810
at the moment is kind of not specified

844
00:41:36,810 --> 00:41:39,810
so there are some SMC calls to arrive to

845
00:41:39,810 --> 00:41:43,080
l3 but there is no way to execute to

846
00:41:43,080 --> 00:41:44,670
call in to the execution of these

847
00:41:44,670 --> 00:41:48,119
partitions up here so there are a lot of

848
00:41:48,119 --> 00:41:50,940
proprietary SMC calls that leaves down

849
00:41:50,940 --> 00:41:54,030
there or down there if it's coming from

850
00:41:54,030 --> 00:41:56,160
the kernel so that's where we are

851
00:41:56,160 --> 00:41:58,350
standardizing so we are proposing a

852
00:41:58,350 --> 00:42:01,280
standard set of interfaces that we leave

853
00:42:01,280 --> 00:42:04,710
below your running kernel or below

854
00:42:04,710 --> 00:42:07,440
yellow stay below your running kernel or

855
00:42:07,440 --> 00:42:11,730
below your bootloader hypervisor no

856
00:42:11,730 --> 00:42:12,569
matter

857
00:42:12,569 --> 00:42:16,829
what it is it can be again huge the rice

858
00:42:16,829 --> 00:42:18,599
three basis epi Bay's all this

859
00:42:18,599 --> 00:42:20,779
controversy we we don't care in the

860
00:42:20,779 --> 00:42:23,880
highest privilege film work so when we

861
00:42:23,880 --> 00:42:26,640
hand over the execution to the normal

862
00:42:26,640 --> 00:42:28,410
world bootloader than the normal world

863
00:42:28,410 --> 00:42:31,410
does whatever it's meant to to be to do

864
00:42:31,410 --> 00:42:34,759
to the memory siding firmware is in

865
00:42:34,759 --> 00:42:38,579
church firmware or in the generic form

866
00:42:38,579 --> 00:42:41,759
where the memory sizing what do you mean

867
00:42:41,759 --> 00:42:46,309
by memory there weren't yet in in

868
00:42:46,309 --> 00:42:50,459
cabochon dimension at the block where to

869
00:42:50,459 --> 00:42:52,919
discovery the memory you know change

870
00:42:52,919 --> 00:42:55,169
that's that's defined in the trusted

871
00:42:55,169 --> 00:42:58,589
VMware portion here that's the runtime

872
00:42:58,589 --> 00:43:01,439
portion of Trustee MRDs trickier that's

873
00:43:01,439 --> 00:43:04,079
what you are used to to know today

874
00:43:04,079 --> 00:43:06,299
you're right yeah that that is not gonna

875
00:43:06,299 --> 00:43:08,429
change so it this will be even more

876
00:43:08,429 --> 00:43:12,869
generic but it's exactly what what bl3

877
00:43:12,869 --> 00:43:16,410
one is today on all arm platform so the

878
00:43:16,410 --> 00:43:18,509
runtime portion of trusted firmware that

879
00:43:18,509 --> 00:43:21,439
leaves as a second monitor down

880
00:43:21,439 --> 00:43:24,929
spc I may not be the only interface

881
00:43:24,929 --> 00:43:32,329
there's other interface to the right oh

882
00:43:32,329 --> 00:43:37,709
I did because I haven't read read as SPC

883
00:43:37,709 --> 00:43:41,759
I so SPC I will be how arm recommends a

884
00:43:41,759 --> 00:43:44,880
standardized these interfaces and we

885
00:43:44,880 --> 00:43:46,019
will provide the reference

886
00:43:46,019 --> 00:43:48,900
implementation across all the levels if

887
00:43:48,900 --> 00:43:51,539
a band or would like to have their own

888
00:43:51,539 --> 00:43:56,130
proprietary in place or in parallel but

889
00:43:56,130 --> 00:43:58,650
that will not be forbidden so it's up to

890
00:43:58,650 --> 00:44:00,599
to the implementation choice of our

891
00:44:00,599 --> 00:44:04,199
vendors standard interface will still be

892
00:44:04,199 --> 00:44:06,959
there the PSE I oh yeah yeah sure sure

893
00:44:06,959 --> 00:44:09,209
this has nothing to do with the PSE I so

894
00:44:09,209 --> 00:44:13,049
this is not meant to substitute existing

895
00:44:13,049 --> 00:44:16,369
arm standards this is meant to replace

896
00:44:16,369 --> 00:44:20,999
specific proprietary ways of calling

897
00:44:20,999 --> 00:44:25,519
into the secure world absolutely

898
00:44:25,519 --> 00:44:29,039
yeah okay I may have to cut you off

899
00:44:29,039 --> 00:44:31,259
there because we're at the end of the

900
00:44:31,259 --> 00:44:34,529
day so thank you again Matteo and please

901
00:44:34,529 --> 00:44:35,910
have another round of applause

902
00:44:35,910 --> 00:44:38,130
[Applause]

903
00:44:38,130 --> 00:44:44,370
[Music]

