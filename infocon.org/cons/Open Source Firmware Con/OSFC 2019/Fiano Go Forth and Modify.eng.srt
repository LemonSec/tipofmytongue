1
00:00:03,190 --> 00:00:06,259
[Music]

2
00:00:07,309 --> 00:00:10,530
so next up is say talk about piano which

3
00:00:10,530 --> 00:00:13,920
is a great tool to inspect ua5 binaries

4
00:00:13,920 --> 00:00:17,640
and yeah that's all I'm gonna say about

5
00:00:17,640 --> 00:00:20,520
that so thank you folks

6
00:00:20,520 --> 00:00:22,320
and please have a round of applause for

7
00:00:22,320 --> 00:00:25,960
GaN Xiang Lim and Rhino leery

8
00:00:25,960 --> 00:00:27,740
[Applause]

9
00:00:27,740 --> 00:00:31,289
so hi oh I'm gone and that's right yeah

10
00:00:31,289 --> 00:00:33,239
we both okay Google and today were

11
00:00:33,239 --> 00:00:35,399
talking about Fianna and so before I

12
00:00:35,399 --> 00:00:37,710
started about piano I'm gonna talk a

13
00:00:37,710 --> 00:00:39,809
little bit about why we did this project

14
00:00:39,809 --> 00:00:42,629
and the reason Oh before that all he's

15
00:00:42,629 --> 00:00:46,110
first thank Ron Julian who is not here

16
00:00:46,110 --> 00:00:48,600
Andrea who is I think was not here and

17
00:00:48,600 --> 00:00:51,989
Nikolai and Teddy Reed for their code

18
00:00:51,989 --> 00:00:55,620
and contributions right now the reason

19
00:00:55,620 --> 00:00:58,020
we started piano for Linux good all

20
00:00:58,020 --> 00:00:59,699
right and for those of you who are still

21
00:00:59,699 --> 00:01:02,250
not familiar VX boot basically we stuff

22
00:01:02,250 --> 00:01:04,949
Linux inside the UEFI firmware image you

23
00:01:04,949 --> 00:01:07,110
take advantage of Linux drivers and we

24
00:01:07,110 --> 00:01:09,320
take an advantage of process isolation

25
00:01:09,320 --> 00:01:12,479
all right so this food and net boot on

26
00:01:12,479 --> 00:01:14,729
their separate processors can't corrupt

27
00:01:14,729 --> 00:01:16,650
the memory from one process to the next

28
00:01:16,650 --> 00:01:20,310
one or it's not easy to release and all

29
00:01:20,310 --> 00:01:21,540
these functionalities are performed by

30
00:01:21,540 --> 00:01:23,970
Linux right for more information visit

31
00:01:23,970 --> 00:01:25,490
linux with our org

32
00:01:25,490 --> 00:01:30,000
now the problem so the problem is that

33
00:01:30,000 --> 00:01:32,490
vendors kind of provide binary blobs

34
00:01:32,490 --> 00:01:34,680
without source most commercial

35
00:01:34,680 --> 00:01:37,070
off-the-shelf systems you get today you

36
00:01:37,070 --> 00:01:40,229
flash the firmware is just on the spy

37
00:01:40,229 --> 00:01:42,270
flash and yes you don't have source to

38
00:01:42,270 --> 00:01:43,829
it you can't edit it you don't know

39
00:01:43,829 --> 00:01:45,960
what's on it all right and sometimes you

40
00:01:45,960 --> 00:01:50,329
want to analyze or modify these images

41
00:01:50,329 --> 00:01:52,710
UEFI itself was designed to be modular

42
00:01:52,710 --> 00:01:54,270
right there's a whole bunch of different

43
00:01:54,270 --> 00:01:58,049
DX es or pis and it was built in a way

44
00:01:58,049 --> 00:02:00,420
that you ideally should be able to solve

45
00:02:00,420 --> 00:02:03,659
pieces out it will and so there are a

46
00:02:03,659 --> 00:02:05,759
lot of applications for piano um the

47
00:02:05,759 --> 00:02:07,619
first which is why we did it it's so

48
00:02:07,619 --> 00:02:09,000
that we can insert a Linux kernel in

49
00:02:09,000 --> 00:02:09,288
there

50
00:02:09,288 --> 00:02:11,970
right now the whole image is just one

51
00:02:11,970 --> 00:02:13,420
giant binary and

52
00:02:13,420 --> 00:02:14,770
something to make sense of what goes

53
00:02:14,770 --> 00:02:17,980
where and how do we insert Linux boot in

54
00:02:17,980 --> 00:02:19,709
there we can't do that

55
00:02:19,709 --> 00:02:23,590
the next is we can remove Dixie's that

56
00:02:23,590 --> 00:02:25,840
we don't need especially like and then

57
00:02:25,840 --> 00:02:26,950
once you have Linux in there we don't

58
00:02:26,950 --> 00:02:28,690
need the ACI driver we don't need the IP

59
00:02:28,690 --> 00:02:30,819
stack we don't need the TCP stack we

60
00:02:30,819 --> 00:02:33,370
don't need DHCP a whole bunch of stuff

61
00:02:33,370 --> 00:02:37,090
hey sometimes you want to do security

62
00:02:37,090 --> 00:02:38,950
forensics there is a startup that's

63
00:02:38,950 --> 00:02:41,440
actually already using piano to extract

64
00:02:41,440 --> 00:02:45,489
the entire like UEFI binary and split

65
00:02:45,489 --> 00:02:48,250
them up into its constituent individual

66
00:02:48,250 --> 00:02:51,040
DX es or p ice and then run malware

67
00:02:51,040 --> 00:02:53,140
analysis on it they are collecting

68
00:02:53,140 --> 00:02:56,230
firmware images from people who submit

69
00:02:56,230 --> 00:02:57,730
them online and they're just running

70
00:02:57,730 --> 00:03:00,370
these kinds of tools to analyze all of

71
00:03:00,370 --> 00:03:03,400
this firmware and sometimes you just

72
00:03:03,400 --> 00:03:04,989
want to quick quickly prototype

73
00:03:04,989 --> 00:03:07,660
something right I don't know if how many

74
00:03:07,660 --> 00:03:09,790
of you have built UEFI images the build

75
00:03:09,790 --> 00:03:11,410
tends to be long it depends on how

76
00:03:11,410 --> 00:03:13,959
complex it is sometimes you just want to

77
00:03:13,959 --> 00:03:15,069
change the binary let's say you want to

78
00:03:15,069 --> 00:03:16,540
change the shell prompt or something

79
00:03:16,540 --> 00:03:18,820
right and this is not strictly specific

80
00:03:18,820 --> 00:03:21,340
to Linux boot it can be a Dixie you just

81
00:03:21,340 --> 00:03:24,070
want to change a print you can compile

82
00:03:24,070 --> 00:03:26,200
that separately and then use this tool

83
00:03:26,200 --> 00:03:29,200
to insert it and replace those binaries

84
00:03:29,200 --> 00:03:32,760
rather than we compile the entire image

85
00:03:33,600 --> 00:03:35,859
so the first thing was the way we used

86
00:03:35,859 --> 00:03:38,109
it utk which is the tool fee I know it's

87
00:03:38,109 --> 00:03:40,690
the library we used we used as a build

88
00:03:40,690 --> 00:03:43,150
tool for Linux boot so we take the

89
00:03:43,150 --> 00:03:45,280
existing ROM image read it out with our

90
00:03:45,280 --> 00:03:48,519
flash ROM and whatever else is on there

91
00:03:48,519 --> 00:03:52,239
we add the next EFI into it using UDK in

92
00:03:52,239 --> 00:03:54,880
this case we replace a shell because the

93
00:03:54,880 --> 00:03:57,040
show is usually not load-bearing the

94
00:03:57,040 --> 00:04:00,090
show is just a nice diagnostic debug in

95
00:04:00,090 --> 00:04:03,430
tool so we replace that safely because

96
00:04:03,430 --> 00:04:04,959
we know it's unlikely for that to be

97
00:04:04,959 --> 00:04:07,359
important and we have the legs before

98
00:04:07,359 --> 00:04:11,680
image in the case for form analysis we

99
00:04:11,680 --> 00:04:13,329
can again read out the entire image and

100
00:04:13,329 --> 00:04:16,060
we say extract it to this folder and

101
00:04:16,060 --> 00:04:18,279
this goes through the entire image and

102
00:04:18,279 --> 00:04:20,620
dumps every single binary in there into

103
00:04:20,620 --> 00:04:22,659
this folder with JSON file the top to

104
00:04:22,659 --> 00:04:25,890
tell you what the whole structure is

105
00:04:26,770 --> 00:04:28,690
so for those of you who are not familiar

106
00:04:28,690 --> 00:04:30,789
I'm gonna go through a bit about the

107
00:04:30,789 --> 00:04:34,120
anatomy of UEFI image and the blue parts

108
00:04:34,120 --> 00:04:36,160
are Intel specific but the general

109
00:04:36,160 --> 00:04:38,080
structure is the same so the hope so

110
00:04:38,080 --> 00:04:41,110
first you have the entire image on Intel

111
00:04:41,110 --> 00:04:43,389
platforms you you'll have the IFD the

112
00:04:43,389 --> 00:04:45,699
Intel firmware descriptor and Intel does

113
00:04:45,699 --> 00:04:48,310
separate their image into a couple of

114
00:04:48,310 --> 00:04:50,590
sections cover regions the Emme region

115
00:04:50,590 --> 00:04:52,599
the Gigabit Ethernet region the BIOS

116
00:04:52,599 --> 00:04:54,550
region and for the most part we only

117
00:04:54,550 --> 00:04:56,050
concern ourselves with the BIOS region

118
00:04:56,050 --> 00:04:57,970
we don't have parsing for the MU region

119
00:04:57,970 --> 00:05:00,400
or the Gigabit Ethernet region we just

120
00:05:00,400 --> 00:05:03,069
focus on the bias region in the case of

121
00:05:03,069 --> 00:05:07,360
like AMD ROM images or qmu o vm f rom

122
00:05:07,360 --> 00:05:10,659
images or even arm UEFI images usually

123
00:05:10,659 --> 00:05:12,190
don't have the descriptor you don't have

124
00:05:12,190 --> 00:05:13,780
the regions you start right at the next

125
00:05:13,780 --> 00:05:17,259
level which is the firmware volumes so

126
00:05:17,259 --> 00:05:19,090
in the image you have open firmware

127
00:05:19,090 --> 00:05:20,590
volumes and in those four men volumes

128
00:05:20,590 --> 00:05:23,020
you have false right inside each file

129
00:05:23,020 --> 00:05:25,360
you have sections and it would be this

130
00:05:25,360 --> 00:05:27,220
simple except for the fact that now in

131
00:05:27,220 --> 00:05:29,530
sections you can have more formal

132
00:05:29,530 --> 00:05:31,300
volumes and you can have more files and

133
00:05:31,300 --> 00:05:34,389
more sections and this leads to

134
00:05:34,389 --> 00:05:36,219
sometimes very complicated nesting

135
00:05:36,219 --> 00:05:38,590
behavior and usually we see that for

136
00:05:38,590 --> 00:05:43,150
compression purposes right so what else

137
00:05:43,150 --> 00:05:45,789
can you TK do we can list the entire set

138
00:05:45,789 --> 00:05:48,639
of files in the image we can extract all

139
00:05:48,639 --> 00:05:51,460
them as I said we can replace components

140
00:05:51,460 --> 00:05:55,150
in the image we can dump specific files

141
00:05:55,150 --> 00:05:58,120
and we can validate images and more and

142
00:05:58,120 --> 00:06:01,620
more so how you use it

143
00:06:01,620 --> 00:06:04,270
so this is the first example I want to

144
00:06:04,270 --> 00:06:06,909
see what's in the image ID I say you TK

145
00:06:06,909 --> 00:06:10,120
I pass it the ROM image I type table and

146
00:06:10,120 --> 00:06:12,460
I pipe the output to less and here you

147
00:06:12,460 --> 00:06:15,310
can see this is a qm u o vm f image and

148
00:06:15,310 --> 00:06:17,050
you can see the different from where

149
00:06:17,050 --> 00:06:19,680
volumes and the nesting you can see

150
00:06:19,680 --> 00:06:22,389
oddly enough this starts with pei at the

151
00:06:22,389 --> 00:06:24,280
beginning of the image usually p is at

152
00:06:24,280 --> 00:06:25,719
the back and you can see a different

153
00:06:25,719 --> 00:06:27,819
types of sections you can see the

154
00:06:27,819 --> 00:06:29,380
compression session and the volume image

155
00:06:29,380 --> 00:06:31,690
section which is the nested volume and

156
00:06:31,690 --> 00:06:33,370
you can see the different sizes in hex

157
00:06:33,370 --> 00:06:36,430
on the side this is the first way and

158
00:06:36,430 --> 00:06:38,620
the first command usually do two count

159
00:06:38,620 --> 00:06:40,330
get a sense of what does this image look

160
00:06:40,330 --> 00:06:40,639
like

161
00:06:40,639 --> 00:06:45,289
what's in it now let's take a little bit

162
00:06:45,289 --> 00:06:49,430
of a closer look so we can say uck image

163
00:06:49,430 --> 00:06:52,129
find me something that starts or that

164
00:06:52,129 --> 00:06:54,080
has shell in it right it takes a red X

165
00:06:54,080 --> 00:06:56,569
and it dumps JSON about the whole

166
00:06:56,569 --> 00:06:58,430
struggling question what's the quid

167
00:06:58,430 --> 00:07:01,729
what's the size and what what does it

168
00:07:01,729 --> 00:07:03,560
look like in general does it have a name

169
00:07:03,560 --> 00:07:07,340
that they have UI section we can also

170
00:07:07,340 --> 00:07:08,569
pass it a good instead if you're

171
00:07:08,569 --> 00:07:11,930
familiar goods in the case sometimes you

172
00:07:11,930 --> 00:07:13,969
fi taxi drivers don't have labels they

173
00:07:13,969 --> 00:07:15,199
don't have names so sometimes they just

174
00:07:15,199 --> 00:07:16,759
have a good so you can use the GUI to

175
00:07:16,759 --> 00:07:20,330
find the same thing if you want to look

176
00:07:20,330 --> 00:07:22,069
at the actual binary you can see UEFI

177
00:07:22,069 --> 00:07:25,099
now you see a wrong image dump the show

178
00:07:25,099 --> 00:07:26,750
right dump takes the same arguments

179
00:07:26,750 --> 00:07:29,300
that's fine you can use this to actually

180
00:07:29,300 --> 00:07:33,289
get individual dxis you can also use

181
00:07:33,289 --> 00:07:35,960
count count tells you oh there are this

182
00:07:35,960 --> 00:07:38,000
many types of drivers the key drivers

183
00:07:38,000 --> 00:07:40,249
there are these many of P I modules

184
00:07:40,249 --> 00:07:42,860
there are these many applications it

185
00:07:42,860 --> 00:07:44,659
gives you a very rough summary of what's

186
00:07:44,659 --> 00:07:48,259
in the image but enough talking around

187
00:07:48,259 --> 00:07:51,620
you wanna actually change things so we

188
00:07:51,620 --> 00:07:55,159
can say you you TK ROM image remove the

189
00:07:55,159 --> 00:07:57,500
shell or remove everything that has the

190
00:07:57,500 --> 00:07:59,389
word shell in it and we save it to a new

191
00:07:59,389 --> 00:08:03,199
image remove takes the same arguments

192
00:08:03,199 --> 00:08:05,089
are fine again same style you can pass a

193
00:08:05,089 --> 00:08:07,099
good you can pass your records but the

194
00:08:07,099 --> 00:08:08,719
most important thing that we've used so

195
00:08:08,719 --> 00:08:12,080
far is to replace P 32 so for those of

196
00:08:12,080 --> 00:08:14,120
you who are not familiar all the ufi

197
00:08:14,120 --> 00:08:15,409
binaries at the end of the day look like

198
00:08:15,409 --> 00:08:18,649
a P P 32 executable so you can compile

199
00:08:18,649 --> 00:08:20,509
the Linux kernel with a PT 2 header on

200
00:08:20,509 --> 00:08:21,740
it that looks like it make it makes it

201
00:08:21,740 --> 00:08:24,020
look like a PA 32 executable and we say

202
00:08:24,020 --> 00:08:26,300
goes find the shell code shell Dixie and

203
00:08:26,300 --> 00:08:29,839
we swap out the binary for the Linux

204
00:08:29,839 --> 00:08:32,719
kernel so by the time you fi starts to

205
00:08:32,719 --> 00:08:34,849
run the show what it thinks is the

206
00:08:34,849 --> 00:08:36,260
shower it ends up starting the Linux

207
00:08:36,260 --> 00:08:42,649
kernel and here's where things getting a

208
00:08:42,649 --> 00:08:43,880
little bit more complicated we can

209
00:08:43,880 --> 00:08:46,250
actually chain commands together so in

210
00:08:46,250 --> 00:08:47,720
this case what happens you want to

211
00:08:47,720 --> 00:08:51,920
remove all the IP stack all the DHCP TCP

212
00:08:51,920 --> 00:08:54,030
and all that and add in

213
00:08:54,030 --> 00:08:56,250
all right so here you can change the

214
00:08:56,250 --> 00:08:59,100
commands together we can say UDK ROM

215
00:08:59,100 --> 00:09:02,040
image remove all them remove something

216
00:09:02,040 --> 00:09:04,200
remove something replace p32

217
00:09:04,200 --> 00:09:06,090
and then we save at the end of the day

218
00:09:06,090 --> 00:09:08,400
so you can you can put all this together

219
00:09:08,400 --> 00:09:12,510
and put them in your script right and we

220
00:09:12,510 --> 00:09:13,830
can change more and more and more things

221
00:09:13,830 --> 00:09:15,240
together for complex operations at the

222
00:09:15,240 --> 00:09:17,910
end there you could even put a table to

223
00:09:17,910 --> 00:09:19,980
see what's in the new image that you've

224
00:09:19,980 --> 00:09:24,060
just modified next I'll hand to Ryan

225
00:09:24,060 --> 00:09:25,470
who's gonna talk to you a little bit

226
00:09:25,470 --> 00:09:27,210
more about another problem with

227
00:09:27,210 --> 00:09:30,060
modifying UEFI binaries all right thank

228
00:09:30,060 --> 00:09:33,690
you God so a big challenge we had of in

229
00:09:33,690 --> 00:09:35,520
the next bit is we had to make room

230
00:09:35,520 --> 00:09:37,590
inside of the firmware volumes and you

231
00:09:37,590 --> 00:09:40,260
have I to put the mix oftentimes as I'm

232
00:09:40,260 --> 00:09:42,510
not enough room for an excuse you need

233
00:09:42,510 --> 00:09:44,340
like two to three or maybe sometimes

234
00:09:44,340 --> 00:09:47,640
even four megabytes and they get that

235
00:09:47,640 --> 00:09:50,760
room you have to delete drivers from the

236
00:09:50,760 --> 00:09:54,360
firmware volume so there's also other

237
00:09:54,360 --> 00:09:56,090
reasons you would want to remove drivers

238
00:09:56,090 --> 00:09:58,710
they could make your boot time faster

239
00:09:58,710 --> 00:10:01,110
they could remove attack surfaces or

240
00:10:01,110 --> 00:10:03,930
simplify your firmware but the big

241
00:10:03,930 --> 00:10:05,270
questions how do you figure out which

242
00:10:05,270 --> 00:10:10,200
drivers are safe to remove so each taxi

243
00:10:10,200 --> 00:10:13,110
has a dependency section with states

244
00:10:13,110 --> 00:10:17,520
which protocols they depend on so which

245
00:10:17,520 --> 00:10:21,540
means they depend on so looking at this

246
00:10:21,540 --> 00:10:23,280
problem you might think you can make a

247
00:10:23,280 --> 00:10:26,790
dependency graph of all the taxis easily

248
00:10:26,790 --> 00:10:28,470
figure out which ones you don't need

249
00:10:28,470 --> 00:10:32,580
delete them and that's that but there's

250
00:10:32,580 --> 00:10:34,560
a fundamental problem here is that

251
00:10:34,560 --> 00:10:36,570
there's a difference between file Greens

252
00:10:36,570 --> 00:10:38,520
the grid's used to define a Dixie and

253
00:10:38,520 --> 00:10:42,600
protocol grids so when in Dixie loads it

254
00:10:42,600 --> 00:10:44,970
registers protocols in each protocol has

255
00:10:44,970 --> 00:10:47,520
agreed and the dependencies are on the

256
00:10:47,520 --> 00:10:50,460
protocols so you can't statically with

257
00:10:50,460 --> 00:10:51,870
they're running the Dixie you don't know

258
00:10:51,870 --> 00:10:54,660
what protocols it registers so you can't

259
00:10:54,660 --> 00:10:57,540
make that dependency graph with a tool

260
00:10:57,540 --> 00:10:59,430
like you know you have to actually run

261
00:10:59,430 --> 00:11:02,479
the firmware

262
00:11:02,589 --> 00:11:04,450
in addition to that oftentimes the

263
00:11:04,450 --> 00:11:07,209
dependency section of the Dixie isn't

264
00:11:07,209 --> 00:11:10,829
accurate it might be missing dependency

265
00:11:10,829 --> 00:11:13,630
so we made this tool called Dixie

266
00:11:13,630 --> 00:11:16,959
cleaner which what it does it combines

267
00:11:16,959 --> 00:11:19,120
via no the static analysis of PML and

268
00:11:19,120 --> 00:11:23,700
also running the firmware on a machine

269
00:11:23,700 --> 00:11:30,399
so essentially what you do is you you

270
00:11:30,399 --> 00:11:33,730
remove a single Dixie try booting it on

271
00:11:33,730 --> 00:11:35,620
the machine if it boots up properly you

272
00:11:35,620 --> 00:11:36,459
run some tests

273
00:11:36,459 --> 00:11:38,950
if those tests pass you can see that

274
00:11:38,950 --> 00:11:40,839
consider that Dixie not to be

275
00:11:40,839 --> 00:11:42,640
load-bearing and you can delete it if

276
00:11:42,640 --> 00:11:45,579
those tests don't pass that Dixie is

277
00:11:45,579 --> 00:11:47,740
considered load-bearing and you keep it

278
00:11:47,740 --> 00:11:51,160
and you repeat this for each Dixie and

279
00:11:51,160 --> 00:11:53,470
once you've done it for each Dixie you

280
00:11:53,470 --> 00:11:55,810
might have deleted a Dixie but another

281
00:11:55,810 --> 00:11:57,970
Dixie depends on so you do it again and

282
00:11:57,970 --> 00:12:00,450
this algorithm is essentially N squared

283
00:12:00,450 --> 00:12:03,040
but usually on the first pass that

284
00:12:03,040 --> 00:12:06,550
deletes like half the Dixie's and if

285
00:12:06,550 --> 00:12:07,660
finally you don't have to do what more

286
00:12:07,660 --> 00:12:09,490
than one pass so I'll give you a demo of

287
00:12:09,490 --> 00:12:15,100
running this tool in qemu on actual

288
00:12:15,100 --> 00:12:19,329
hardware it's a lot slower because you

289
00:12:19,329 --> 00:12:25,199
have to wait for the boot cycle yeah so

290
00:12:25,199 --> 00:12:28,120
yeah so this is it so it's actually UPF

291
00:12:28,120 --> 00:12:30,910
eno with the script and the script if

292
00:12:30,910 --> 00:12:31,930
you know itself doesn't know how to

293
00:12:31,930 --> 00:12:33,880
flash the fair amount here machine and

294
00:12:33,880 --> 00:12:36,070
build it and test it so you made a

295
00:12:36,070 --> 00:12:38,290
script which performs the flashing forms

296
00:12:38,290 --> 00:12:40,540
of Budin in this demo the script

297
00:12:40,540 --> 00:12:42,970
essentially runs in cream.you and checks

298
00:12:42,970 --> 00:12:47,019
to see if a kernel booted and you see

299
00:12:47,019 --> 00:12:52,449
when you run UDK on the image it goes it

300
00:12:52,449 --> 00:12:54,160
begins with the first round then it

301
00:12:54,160 --> 00:12:56,260
tries to move from one Dixie it's a bit

302
00:12:56,260 --> 00:12:59,079
small but tries to move agreed and then

303
00:12:59,079 --> 00:13:00,970
it says successfully booted in qmu and

304
00:13:00,970 --> 00:13:02,680
then notice you could delete that greed

305
00:13:02,680 --> 00:13:05,500
then it tries the next one and X

306
00:13:05,500 --> 00:13:07,630
successful so you could live downwind to

307
00:13:07,630 --> 00:13:09,550
you then tries the next one and says

308
00:13:09,550 --> 00:13:12,069
failed to boot in QEMU which means that

309
00:13:12,069 --> 00:13:14,310
is a load bearing Dixie

310
00:13:14,310 --> 00:13:15,480
and you have to keep it in there at

311
00:13:15,480 --> 00:13:17,579
least for this pass I mean keeps doing

312
00:13:17,579 --> 00:13:19,680
that for all the taxis in the familiar

313
00:13:19,680 --> 00:13:31,170
volume so you mean this uh hold on I

314
00:13:31,170 --> 00:13:33,809
need to work up to this laughing so we

315
00:13:33,809 --> 00:13:37,620
actually we end this on um on a tie-in

316
00:13:37,620 --> 00:13:40,430
board and we found that that board had

317
00:13:40,430 --> 00:13:43,379
424 Dixie's to begin with and after he

318
00:13:43,379 --> 00:13:45,420
ran one pass of this tool we ended up

319
00:13:45,420 --> 00:13:48,300
with 214 Dixie's which is about a 50%

320
00:13:48,300 --> 00:13:51,480
removal and the boot time became much

321
00:13:51,480 --> 00:13:54,959
faster and doing this test I believe it

322
00:13:54,959 --> 00:13:56,850
was about 4 days so like over a weekend

323
00:13:56,850 --> 00:13:59,490
or something so it's actually during

324
00:13:59,490 --> 00:14:01,170
this conference I was how many of you

325
00:14:01,170 --> 00:14:04,529
are from Germany I was a talking I was

326
00:14:04,529 --> 00:14:05,819
talking with a few of you and he

327
00:14:05,819 --> 00:14:07,649
mentioned that in Germany Dixie means

328
00:14:07,649 --> 00:14:10,980
something else huh that means it's a

329
00:14:10,980 --> 00:14:13,740
it's a word for a portable washroom

330
00:14:13,740 --> 00:14:17,149
uh-huh and I found that quite fitting um

331
00:14:17,149 --> 00:14:19,860
cleaning Dixie's and the the

332
00:14:19,860 --> 00:14:21,540
dependencies between them and which ones

333
00:14:21,540 --> 00:14:26,670
you don't actually need so Fiona is

334
00:14:26,670 --> 00:14:29,189
actually a set of multiple tools so UDK

335
00:14:29,189 --> 00:14:31,290
is one of them there's a few other tools

336
00:14:31,290 --> 00:14:33,600
in this collection so there's I go into

337
00:14:33,600 --> 00:14:37,500
English that's Shakespeare here I'm so

338
00:14:37,500 --> 00:14:40,980
good to English what it does is it finds

339
00:14:40,980 --> 00:14:43,620
all the goods in a file so usually it's

340
00:14:43,620 --> 00:14:48,689
like a log and it appends the like a

341
00:14:48,689 --> 00:14:50,759
textual like an English representation

342
00:14:50,759 --> 00:14:53,629
of I grew it afterwards and it works in

343
00:14:53,629 --> 00:14:56,189
students stood out so you could pipe

344
00:14:56,189 --> 00:14:59,189
you're like mini-com or whatever program

345
00:14:59,189 --> 00:15:01,439
you used to read ela output do agree to

346
00:15:01,439 --> 00:15:03,769
English and it just puts readable

347
00:15:03,769 --> 00:15:05,910
English representations of what the

348
00:15:05,910 --> 00:15:07,949
green guids mean afterwards because no

349
00:15:07,949 --> 00:15:11,990
one can remember like grades themselves

350
00:15:11,990 --> 00:15:14,999
and the way we found the English up in

351
00:15:14,999 --> 00:15:17,370
representations we have a big map in our

352
00:15:17,370 --> 00:15:20,759
go code and about a thousand grids and

353
00:15:20,759 --> 00:15:23,220
we essentially got these grades from

354
00:15:23,220 --> 00:15:24,839
looking at unique 8th year we have like

355
00:15:24,839 --> 00:15:26,189
a little script which builds out of the

356
00:15:26,189 --> 00:15:27,400
build files

357
00:15:27,400 --> 00:15:30,340
it's very convenient another tool we're

358
00:15:30,340 --> 00:15:31,780
working on is the Linux boot readiness

359
00:15:31,780 --> 00:15:34,750
check so we find a lot of people they

360
00:15:34,750 --> 00:15:36,310
want to put Linux boot on their firmware

361
00:15:36,310 --> 00:15:39,940
but they don't know like how easy MIT or

362
00:15:39,940 --> 00:15:42,310
if they want to change the layer of

363
00:15:42,310 --> 00:15:45,400
their firmware to make it easier so

364
00:15:45,400 --> 00:15:47,440
essentially what this tool will do it

365
00:15:47,440 --> 00:15:52,360
has a set of rules which will which are

366
00:15:52,360 --> 00:15:55,630
rules which if they were applied it

367
00:15:55,630 --> 00:15:58,630
would make the family easier to put

368
00:15:58,630 --> 00:16:00,340
links to on so for example our free

369
00:16:00,340 --> 00:16:02,800
space we prefer that there's more free

370
00:16:02,800 --> 00:16:05,380
space available 8 megabytes might be a

371
00:16:05,380 --> 00:16:06,940
bit much but the more the merrier

372
00:16:06,940 --> 00:16:10,420
the compression method so UDK right now

373
00:16:10,420 --> 00:16:12,130
mainly works with lzma or standing

374
00:16:12,130 --> 00:16:13,900
compression methods so some more there's

375
00:16:13,900 --> 00:16:16,560
some ease of hair compression methods

376
00:16:16,560 --> 00:16:19,000
which some framerate volumes use and

377
00:16:19,000 --> 00:16:21,310
there's not really any reason not to use

378
00:16:21,310 --> 00:16:24,550
lzma it's fairly good so there's a bunch

379
00:16:24,550 --> 00:16:27,310
of rules we have and this tool will go

380
00:16:27,310 --> 00:16:31,510
through the rules see if the the rules

381
00:16:31,510 --> 00:16:35,230
apply into your bar see if the the they

382
00:16:35,230 --> 00:16:37,060
pass or not and we'll give you an

383
00:16:37,060 --> 00:16:39,040
explanation of which ones failed and how

384
00:16:39,040 --> 00:16:41,500
you could improve your firmware layout

385
00:16:41,500 --> 00:16:46,690
and premiere image for them to pass so

386
00:16:46,690 --> 00:16:49,780
in summary we have an easily scriptable

387
00:16:49,780 --> 00:16:53,320
tool for parsing and editing ufi premier

388
00:16:53,320 --> 00:16:55,720
volumes it's written in go it's unit

389
00:16:55,720 --> 00:17:00,130
tested it's typesafe it helps you

390
00:17:00,130 --> 00:17:04,690
develop Linux systems it's fast you can

391
00:17:04,690 --> 00:17:05,859
find the source code online you could

392
00:17:05,859 --> 00:17:08,200
contribute to it we have tools such as

393
00:17:08,200 --> 00:17:10,240
the Dixie cleaner we have the good

394
00:17:10,240 --> 00:17:12,400
English we have the Linux readiness

395
00:17:12,400 --> 00:17:17,440
check and what now so how can you help

396
00:17:17,440 --> 00:17:20,819
how can you use this project so

397
00:17:20,819 --> 00:17:24,160
everything's on github it's very easy to

398
00:17:24,160 --> 00:17:26,380
get started you install go you can go

399
00:17:26,380 --> 00:17:28,690
get to download it that installs UDK

400
00:17:28,690 --> 00:17:31,200
into your path so you can just a minute

401
00:17:31,200 --> 00:17:34,150
if you want to contribute we have an

402
00:17:34,150 --> 00:17:36,130
issue tracker if you want to fix bugs so

403
00:17:36,130 --> 00:17:38,290
we could follow new bugs we're really

404
00:17:38,290 --> 00:17:40,360
interested if you ran this tool on like

405
00:17:40,360 --> 00:17:41,080
new for me

406
00:17:41,080 --> 00:17:43,450
images I was driving to support as much

407
00:17:43,450 --> 00:17:47,549
memory as possible and also have some

408
00:17:47,549 --> 00:17:50,500
chapter in the next book if you want to

409
00:17:50,500 --> 00:17:52,840
like meet Monty detail I hope the next

410
00:17:52,840 --> 00:17:55,029
bit yeah the especially last bit about

411
00:17:55,029 --> 00:17:57,429
for my images we have a very limited set

412
00:17:57,429 --> 00:17:59,350
off for my images we can try on just

413
00:17:59,350 --> 00:18:01,450
because we don't have that many so if

414
00:18:01,450 --> 00:18:03,340
you want to try this on your own image

415
00:18:03,340 --> 00:18:06,519
and send us the results please do I know

416
00:18:06,519 --> 00:18:09,309
we are very curious every time we ran on

417
00:18:09,309 --> 00:18:11,260
something else that doesn't work and we

418
00:18:11,260 --> 00:18:15,330
fill in some interesting esoteric way so

419
00:18:15,330 --> 00:18:20,950
all right I guess any questions well

420
00:18:20,950 --> 00:18:24,370
that was fast so please have another one

421
00:18:24,370 --> 00:18:30,730
of applause for Brian and gun yeah we

422
00:18:30,730 --> 00:18:32,649
love quite a time for questions so

423
00:18:32,649 --> 00:18:34,419
please just line up at the microphones

424
00:18:34,419 --> 00:18:38,289
and ask you questions though I have a 2

425
00:18:38,289 --> 00:18:41,860
question 1 is that did you only try on

426
00:18:41,860 --> 00:18:45,460
the piano call or any probability parts

427
00:18:45,460 --> 00:18:48,789
like the MRI inside players we have all

428
00:18:48,789 --> 00:18:51,190
this choice about your work yes we have

429
00:18:51,190 --> 00:18:53,440
run em on proprietary biases I mean

430
00:18:53,440 --> 00:18:56,200
there was the original design and it was

431
00:18:56,200 --> 00:18:58,960
useful for us for doing some prototyping

432
00:18:58,960 --> 00:19:01,809
on for example the OCP winterfell board

433
00:19:01,809 --> 00:19:04,389
that's how we develop the next boot

434
00:19:04,389 --> 00:19:07,659
there as well um so currently our CI

435
00:19:07,659 --> 00:19:10,029
system only runs it on the II D key to

436
00:19:10,029 --> 00:19:11,740
ovm F my house because that's the only

437
00:19:11,740 --> 00:19:13,389
one we can actually submit to github

438
00:19:13,389 --> 00:19:18,178
yeah is other ones that proprietary yeah

439
00:19:18,210 --> 00:19:21,789
yes so in the holidays are for a

440
00:19:21,789 --> 00:19:26,980
compressed take taxi driver this the he

441
00:19:26,980 --> 00:19:29,559
sent the the compressed aquata in nature

442
00:19:29,559 --> 00:19:32,080
like someone will may use the like of

443
00:19:32,080 --> 00:19:35,789
the Centaur deep all its LD ma will let

444
00:19:35,789 --> 00:19:39,309
impact the decompress chill for your

445
00:19:39,309 --> 00:19:43,179
tour to analyze the taxi driver um as

446
00:19:43,179 --> 00:19:45,970
long as it's been compressed with lzma

447
00:19:45,970 --> 00:19:49,840
that's all - is fine so all - actually -

448
00:19:49,840 --> 00:19:52,179
to decompress and recompress LZ mal -

449
00:19:52,179 --> 00:19:54,460
has a built-in go

450
00:19:54,460 --> 00:19:57,490
based lzma decompressor but by default

451
00:19:57,490 --> 00:20:00,100
it uses wipers on your system so so

452
00:20:00,100 --> 00:20:03,040
whatever your system lzma rxz supports

453
00:20:03,040 --> 00:20:08,470
we support that so that we have noticed

454
00:20:08,470 --> 00:20:09,850
that sometimes when you know when you

455
00:20:09,850 --> 00:20:12,160
recom decompress and recompress it of

456
00:20:12,160 --> 00:20:13,480
course the size changes because the

457
00:20:13,480 --> 00:20:15,570
compression algorithm or like the

458
00:20:15,570 --> 00:20:17,590
options are slightly different so you

459
00:20:17,590 --> 00:20:19,690
will see things shift a little bit or

460
00:20:19,690 --> 00:20:22,600
grow in size yeah yeah that's a big

461
00:20:22,600 --> 00:20:25,480
problem too so this tool if you if you

462
00:20:25,480 --> 00:20:28,240
extract a familiar volume and you create

463
00:20:28,240 --> 00:20:30,910
it without making any changes you might

464
00:20:30,910 --> 00:20:33,070
expect it to be the same but it differs

465
00:20:33,070 --> 00:20:35,860
because our compression algorithm was

466
00:20:35,860 --> 00:20:37,570
different from the one that originally

467
00:20:37,570 --> 00:20:39,880
compressed it so it's not the tool isn't

468
00:20:39,880 --> 00:20:43,030
really it will always may compress it to

469
00:20:43,030 --> 00:20:45,190
the same thing but don't it will we can

470
00:20:45,190 --> 00:20:47,410
pass it reproducibly like it also we

471
00:20:47,410 --> 00:20:49,360
compress it to a new thing which is the

472
00:20:49,360 --> 00:20:51,430
same if you ran it multiple times but it

473
00:20:51,430 --> 00:20:56,740
won't be the same as the original one so

474
00:20:56,740 --> 00:20:58,720
i've got a question about the process

475
00:20:58,720 --> 00:21:00,310
you're using for determining what's

476
00:21:00,310 --> 00:21:03,070
load-bearing code and what isn't it

477
00:21:03,070 --> 00:21:06,010
seems like that it's those modules that

478
00:21:06,010 --> 00:21:07,330
aren't running or a running

479
00:21:07,330 --> 00:21:09,730
sub-optimally might have another purpose

480
00:21:09,730 --> 00:21:11,800
that you couldn't detect just by you

481
00:21:11,800 --> 00:21:13,900
know booting like they work when a

482
00:21:13,900 --> 00:21:14,800
particular piece of hardware is

483
00:21:14,800 --> 00:21:16,180
installed or they're doing something

484
00:21:16,180 --> 00:21:19,000
that's kind of security focused and so

485
00:21:19,000 --> 00:21:21,550
pulling that out might have a unintended

486
00:21:21,550 --> 00:21:22,750
side effect when you change

487
00:21:22,750 --> 00:21:25,720
configurations or so how do you have

488
00:21:25,720 --> 00:21:27,040
anything in your process where you could

489
00:21:27,040 --> 00:21:28,960
add other criteria aside from just

490
00:21:28,960 --> 00:21:30,880
booting to determine if that was safely

491
00:21:30,880 --> 00:21:32,320
so in the test script you can put

492
00:21:32,320 --> 00:21:35,950
whatever testing you need so for example

493
00:21:35,950 --> 00:21:38,200
non-developed this tool called eut the

494
00:21:38,200 --> 00:21:40,210
device on the test pool and it would

495
00:21:40,210 --> 00:21:41,650
check to make sure you could connect the

496
00:21:41,650 --> 00:21:43,600
network and that the the piece I was

497
00:21:43,600 --> 00:21:45,880
working other tests you might include is

498
00:21:45,880 --> 00:21:49,180
chip sack fasciculus congestion yeah but

499
00:21:49,180 --> 00:21:50,560
it's really up to the user so you just

500
00:21:50,560 --> 00:21:52,420
pass in whatever school you want to be

501
00:21:52,420 --> 00:21:56,770
run a post generation of the image okay

502
00:21:56,770 --> 00:21:58,480
that must include of course the whole

503
00:21:58,480 --> 00:22:00,370
step of flashing and running and booting

504
00:22:00,370 --> 00:22:01,900
that system and then running your test

505
00:22:01,900 --> 00:22:05,110
but it's up to the user to define what

506
00:22:05,110 --> 00:22:06,160
they want

507
00:22:06,160 --> 00:22:07,750
yeah because load bearing code depends

508
00:22:07,750 --> 00:22:08,050
yeah

509
00:22:08,050 --> 00:22:09,190
a lot on your perspective yes what

510
00:22:09,190 --> 00:22:10,690
you're doing with the system definitely

511
00:22:10,690 --> 00:22:19,300
okay thanks um I know you guys also try

512
00:22:19,300 --> 00:22:21,640
to good Windows so when you run this

513
00:22:21,640 --> 00:22:25,120
tool later you try to boot windows do

514
00:22:25,120 --> 00:22:27,160
you find that you might need some teeth

515
00:22:27,160 --> 00:22:31,870
IXY back so um I'll leave this for Oh

516
00:22:31,870 --> 00:22:34,030
fear stop because I was over here okay

517
00:22:34,030 --> 00:22:36,520
are you here oh yeah yeah he's gonna

518
00:22:36,520 --> 00:22:38,560
talk about that tomorrow I'll need it

519
00:22:38,560 --> 00:22:41,760
tomorrow the day after but um as far as

520
00:22:41,760 --> 00:22:45,670
tomorrow okay yeah but as far as I know

521
00:22:45,670 --> 00:22:47,800
when we run Windows we don't actually

522
00:22:47,800 --> 00:22:50,440
use any of the existing UEFI Dixey

523
00:22:50,440 --> 00:22:52,780
drivers we implement most of the

524
00:22:52,780 --> 00:22:54,580
functionality using Linux right because

525
00:22:54,580 --> 00:22:56,500
a lot of it is very simple stuff like we

526
00:22:56,500 --> 00:22:59,080
this block device gave me this give me

527
00:22:59,080 --> 00:23:00,640
the memory map and there's a

528
00:23:00,640 --> 00:23:02,890
surprisingly small number of services

529
00:23:02,890 --> 00:23:04,810
that actually request that by Windows

530
00:23:04,810 --> 00:23:07,120
and we implement them or from Linux

531
00:23:07,120 --> 00:23:14,230
rather than using the existing ones are

532
00:23:14,230 --> 00:23:16,450
you envisioning to use this tool on the

533
00:23:16,450 --> 00:23:17,830
physical flash that you can actually

534
00:23:17,830 --> 00:23:22,840
change modules in the runtime oh you

535
00:23:22,840 --> 00:23:25,090
mean like so right now I assume this

536
00:23:25,090 --> 00:23:26,950
your your operating out of offline right

537
00:23:26,950 --> 00:23:28,450
I mean you have this pie image and you

538
00:23:28,450 --> 00:23:30,370
can open the image and you can edit that

539
00:23:30,370 --> 00:23:32,470
country at the image I'm asking you

540
00:23:32,470 --> 00:23:34,120
think that you could do even on the

541
00:23:34,120 --> 00:23:38,230
physical flash that you could yes we

542
00:23:38,230 --> 00:23:40,090
there's no reason because what happens

543
00:23:40,090 --> 00:23:41,980
that you ideally use like flash from

544
00:23:41,980 --> 00:23:44,080
internal right or something to read your

545
00:23:44,080 --> 00:23:47,260
own trash you could modify it and then

546
00:23:47,260 --> 00:23:48,940
use it to write to your own internal

547
00:23:48,940 --> 00:23:50,860
flash I would not recommend it in case

548
00:23:50,860 --> 00:23:53,880
something goes wrong but it's there's no

549
00:23:53,880 --> 00:23:56,410
reason because this is a tool to operate

550
00:23:56,410 --> 00:23:57,460
on the binary image

551
00:23:57,460 --> 00:23:58,810
so as long as you have a mechanism for

552
00:23:58,810 --> 00:24:00,400
reading out the binary image and writing

553
00:24:00,400 --> 00:24:02,590
it back right that there is no

554
00:24:02,590 --> 00:24:04,030
difference from this tools perspective

555
00:24:04,030 --> 00:24:06,730
now when you do internal flashing and if

556
00:24:06,730 --> 00:24:09,970
you get it wrong then yeah it can't help

557
00:24:09,970 --> 00:24:11,890
you there but its second time I mean I I

558
00:24:11,890 --> 00:24:15,180
saw that your tool basically removes the

559
00:24:15,180 --> 00:24:17,500
dependencies the unused components from

560
00:24:17,500 --> 00:24:18,820
the image right yeah so if you are

561
00:24:18,820 --> 00:24:20,140
building that image why would you even

562
00:24:20,140 --> 00:24:21,529
include those

563
00:24:21,529 --> 00:24:25,039
sometimes it's because when vendors

564
00:24:25,039 --> 00:24:26,570
built that image it must work for

565
00:24:26,570 --> 00:24:30,799
everybody right and it it all kind of

566
00:24:30,799 --> 00:24:34,100
has to fulfill right like it must work

567
00:24:34,100 --> 00:24:36,139
for someone who's buying this off the

568
00:24:36,139 --> 00:24:38,200
shelf and turn into whatever they want

569
00:24:38,200 --> 00:24:40,730
if we are doing the next book and we

570
00:24:40,730 --> 00:24:43,129
plan to insert Linux kernel using Linux

571
00:24:43,129 --> 00:24:44,690
drivers we don't need a lot of

572
00:24:44,690 --> 00:24:47,330
functionality so to us we can remove it

573
00:24:47,330 --> 00:24:50,120
and it's not immediately obvious from

574
00:24:50,120 --> 00:24:52,009
looking at it which ones are safe to

575
00:24:52,009 --> 00:24:55,610
remove like a stack kind of clear some

576
00:24:55,610 --> 00:24:56,690
of the other things I didn't know about

577
00:24:56,690 --> 00:24:58,730
what's a nice uh bus i I didn't know

578
00:24:58,730 --> 00:25:04,759
that so it's not clear yeah yeah which

579
00:25:04,759 --> 00:25:06,710
is important which one's not yeah thank

580
00:25:06,710 --> 00:25:09,409
you mm-hmm so it's part of your process

581
00:25:09,409 --> 00:25:11,179
to determine which Dixie drivers are

582
00:25:11,179 --> 00:25:12,919
load-bearing you're flashing you're

583
00:25:12,919 --> 00:25:14,330
editing the binary you're flashing back

584
00:25:14,330 --> 00:25:16,820
on the boots yep at this point I would

585
00:25:16,820 --> 00:25:18,830
have thought most systems were nice they

586
00:25:18,830 --> 00:25:21,379
enter - 147 compliant so how do you get

587
00:25:21,379 --> 00:25:23,809
around that - flash so you said I get

588
00:25:23,809 --> 00:25:26,690
most systems on what the NIST 800 ash

589
00:25:26,690 --> 00:25:29,870
147 which requires the flash images be

590
00:25:29,870 --> 00:25:32,889
signed how are you getting around so bad

591
00:25:32,889 --> 00:25:36,190
it won't work with boot got on that's

592
00:25:36,190 --> 00:25:40,759
one thing um so he goes talking

593
00:25:40,759 --> 00:25:43,669
specifically about like something like

594
00:25:43,669 --> 00:25:45,490
boot guy which verifies the signature

595
00:25:45,490 --> 00:25:50,929
upon boot right yes that won't work most

596
00:25:50,929 --> 00:25:52,580
of the stuff we've done so far up to now

597
00:25:52,580 --> 00:25:54,559
has been on how weather eather

598
00:25:54,559 --> 00:25:56,299
specifically does not have boogers or

599
00:25:56,299 --> 00:25:59,210
not or you would basically need to be

600
00:25:59,210 --> 00:26:02,629
able to have to be able sign it okay

601
00:26:02,629 --> 00:26:05,120
yeah boot guard creates the same kind of

602
00:26:05,120 --> 00:26:08,389
challenge yeah even before boot guard

603
00:26:08,389 --> 00:26:10,220
there was for like the last five six

604
00:26:10,220 --> 00:26:12,769
years the NIST 800 Asha 147 compliance

605
00:26:12,769 --> 00:26:15,139
stuff which meant the image that gets

606
00:26:15,139 --> 00:26:17,509
flashed on the system must be signed and

607
00:26:17,509 --> 00:26:19,700
verified before it gets landed and it

608
00:26:19,700 --> 00:26:21,049
sounds like you were doing flashing

609
00:26:21,049 --> 00:26:25,039
landing these images you had modified so

610
00:26:25,039 --> 00:26:27,279
I'm not sure what actually enforces that

611
00:26:27,279 --> 00:26:30,379
sorry I wasn't familiar the spec and I'm

612
00:26:30,379 --> 00:26:31,789
not sure what actually enforces that

613
00:26:31,789 --> 00:26:35,240
because most spice ice chips I think

614
00:26:35,240 --> 00:26:36,950
have signature verification built into

615
00:26:36,950 --> 00:26:38,720
them so we really there have a click and

616
00:26:38,720 --> 00:26:42,410
like we could do the spy part yeah okay

617
00:26:42,410 --> 00:26:43,970
yeah yeah that's how you get around it

618
00:26:43,970 --> 00:26:51,290
yeah we shall have a lot of time for

619
00:26:51,290 --> 00:26:53,350
questions

620
00:26:56,679 --> 00:27:01,280
no okay then thank you guys and please

621
00:27:01,280 --> 00:27:04,600
have another round of applause

622
00:27:04,930 --> 00:27:08,530
[Applause]

623
00:27:08,530 --> 00:27:14,770
[Music]

