1
00:00:03,190 --> 00:00:06,259
[Music]

2
00:00:07,370 --> 00:00:10,440
hello everybody my name is Isaac Orem

3
00:00:10,440 --> 00:00:13,290
I've been at Intel I didn't put a an

4
00:00:13,290 --> 00:00:15,260
intro in but I've been at Intel since

5
00:00:15,260 --> 00:00:18,869
1996 mostly in the bio space and I'm

6
00:00:18,869 --> 00:00:22,050
mostly a UEFI person since the year 2000

7
00:00:22,050 --> 00:00:23,720
I've been working on you if I enable

8
00:00:23,720 --> 00:00:25,560
essentially there have been a few other

9
00:00:25,560 --> 00:00:28,439
side projects but I hear tell that we're

10
00:00:28,439 --> 00:00:30,960
almost done with legacy boot but I'm not

11
00:00:30,960 --> 00:00:34,050
confident yet anyway so a lot of time in

12
00:00:34,050 --> 00:00:36,120
Intel a lot of time in the BIOS firmware

13
00:00:36,120 --> 00:00:39,300
space mostly UEFI and so the rather

14
00:00:39,300 --> 00:00:41,190
grandiose title today is the open

15
00:00:41,190 --> 00:00:43,829
platform enabling plans and I'm going to

16
00:00:43,829 --> 00:00:46,500
get into I guess tying together some of

17
00:00:46,500 --> 00:00:47,760
the things we've seen another session

18
00:00:47,760 --> 00:00:50,969
slim boot min platform and our regular

19
00:00:50,969 --> 00:00:54,899
platform enabling so the initial context

20
00:00:54,899 --> 00:00:56,699
that's driving much of this discussion

21
00:00:56,699 --> 00:00:59,100
is the Open Compute Project and their

22
00:00:59,100 --> 00:01:01,410
plans for open systems firmware so I'll

23
00:01:01,410 --> 00:01:03,210
talk about that a little bit I'll talk

24
00:01:03,210 --> 00:01:06,330
about our open source solutions what we

25
00:01:06,330 --> 00:01:08,220
call or our tentatively calling the

26
00:01:08,220 --> 00:01:10,380
Minimum Viable platform but what we're

27
00:01:10,380 --> 00:01:12,600
gonna put as an open platform out into

28
00:01:12,600 --> 00:01:15,030
Tiano coorg and elsewhere and then a

29
00:01:15,030 --> 00:01:16,380
little bit of wrap-up summary

30
00:01:16,380 --> 00:01:20,400
call-to-actions on our plans the open

31
00:01:20,400 --> 00:01:22,770
system firmware project is a part of the

32
00:01:22,770 --> 00:01:25,710
Open Compute Project headed by run

33
00:01:25,710 --> 00:01:28,770
managed and Devinder good it is a work

34
00:01:28,770 --> 00:01:31,229
stream that's focused on the firmware

35
00:01:31,229 --> 00:01:35,189
side of Open Compute the big focus area

36
00:01:35,189 --> 00:01:37,710
currently feels like it's around the

37
00:01:37,710 --> 00:01:39,479
boot firmware of the system firmware the

38
00:01:39,479 --> 00:01:41,400
BIOS the way for firmware the bootloader

39
00:01:41,400 --> 00:01:43,200
whatever you want to call it I use a lot

40
00:01:43,200 --> 00:01:45,750
of those terms interchangeably to me the

41
00:01:45,750 --> 00:01:47,729
firmware that initializes the main CPU

42
00:01:47,729 --> 00:01:49,500
the main memory those kinds of pieces

43
00:01:49,500 --> 00:01:51,689
that's that's what I'm talking about for

44
00:01:51,689 --> 00:01:53,280
the most part I'll talk about some of

45
00:01:53,280 --> 00:01:55,049
the other IP firmwares

46
00:01:55,049 --> 00:01:57,270
the other system controllers a little

47
00:01:57,270 --> 00:01:59,460
bit but mostly this is a UEFI firmware a

48
00:01:59,460 --> 00:02:03,090
BIOS context the other contextual thing

49
00:02:03,090 --> 00:02:05,159
is we're mostly looking at this Linux

50
00:02:05,159 --> 00:02:07,409
boot model as the basis for the open

51
00:02:07,409 --> 00:02:10,348
system firmware so multiple firmware

52
00:02:10,348 --> 00:02:11,940
initialization our Hardware

53
00:02:11,940 --> 00:02:13,530
initialization pieces of

54
00:02:13,530 --> 00:02:16,950
the line once memories initialized OS

55
00:02:16,950 --> 00:02:20,910
loader and an OS and so we can see you

56
00:02:20,910 --> 00:02:22,980
know whether it's the UEFI PE I doing

57
00:02:22,980 --> 00:02:25,500
hardware NIT or core boot ROM stage or

58
00:02:25,500 --> 00:02:28,380
you good SPO to have multiple Hardware

59
00:02:28,380 --> 00:02:31,739
initialization options and well this

60
00:02:31,739 --> 00:02:33,390
picture shows Linux boot you can also

61
00:02:33,390 --> 00:02:35,610
think of you if I payload in this box

62
00:02:35,610 --> 00:02:40,319
you can think of other Linux loaders so

63
00:02:40,319 --> 00:02:42,330
there multiple solutions at multiple

64
00:02:42,330 --> 00:02:44,160
stages in this stack but this is the

65
00:02:44,160 --> 00:02:45,810
basic model that open system firmware

66
00:02:45,810 --> 00:02:49,440
brought work stream is talking about so

67
00:02:49,440 --> 00:02:51,269
the main driving tank for today's

68
00:02:51,269 --> 00:02:53,519
discussion in our plans is around the

69
00:02:53,519 --> 00:02:56,430
open systems from we're ready logo

70
00:02:56,430 --> 00:02:58,950
discussion and so this is essentially

71
00:02:58,950 --> 00:03:01,800
that the details will be worked out but

72
00:03:01,800 --> 00:03:03,269
the objective is to have clear

73
00:03:03,269 --> 00:03:07,050
requirements for what what matches what

74
00:03:07,050 --> 00:03:09,180
is required to be open systems firmware

75
00:03:09,180 --> 00:03:11,280
to be Open Compute Project is compatible

76
00:03:11,280 --> 00:03:14,489
firmware to get a logo so the key points

77
00:03:14,489 --> 00:03:16,560
is they want to have solutions we want

78
00:03:16,560 --> 00:03:18,810
to have solutions that are based on open

79
00:03:18,810 --> 00:03:21,090
source firmware still with opaque binary

80
00:03:21,090 --> 00:03:23,790
blobs like FSP but fewer those and

81
00:03:23,790 --> 00:03:26,040
fundamentally open firmware open boot

82
00:03:26,040 --> 00:03:29,280
firmware the year the target is 2021

83
00:03:29,280 --> 00:03:32,190
so we've got a not immediately but a

84
00:03:32,190 --> 00:03:33,959
reasonably short time frame for the

85
00:03:33,959 --> 00:03:37,140
server community and the key thing in

86
00:03:37,140 --> 00:03:39,150
here is it really is targeted multiple

87
00:03:39,150 --> 00:03:40,920
solutions so we spend a lot of time

88
00:03:40,920 --> 00:03:43,049
talking about x86 solutions Intel

89
00:03:43,049 --> 00:03:45,269
solutions UEFI firmware and core boot

90
00:03:45,269 --> 00:03:47,519
but it is really much broader than that

91
00:03:47,519 --> 00:03:49,829
so those are the key points I would

92
00:03:49,829 --> 00:03:53,010
bring up about that the key schedule

93
00:03:53,010 --> 00:03:59,000
timeline for the OS f proposal is was

94
00:03:59,000 --> 00:04:01,739
started in March of this year at the

95
00:04:01,739 --> 00:04:03,900
Open Compute Project Global Summit we

96
00:04:03,900 --> 00:04:07,109
sketched out the basic timeline today

97
00:04:07,109 --> 00:04:09,780
we're talking apin compute project

98
00:04:09,780 --> 00:04:11,730
regional summit in Amsterdam I will talk

99
00:04:11,730 --> 00:04:13,049
a little bit more details about the

100
00:04:13,049 --> 00:04:16,079
plans in March of next year we're

101
00:04:16,079 --> 00:04:18,180
looking to have the pieces in place such

102
00:04:18,180 --> 00:04:19,769
that open system firmware it can be

103
00:04:19,769 --> 00:04:22,520
provided but it's still not yet required

104
00:04:22,520 --> 00:04:25,320
September of next year we're looking to

105
00:04:25,320 --> 00:04:27,090
have systems coming

106
00:04:27,090 --> 00:04:29,940
from manufacturers that they may ship

107
00:04:29,940 --> 00:04:32,520
with a traditional form our solution or

108
00:04:32,520 --> 00:04:33,990
a full form or solution but you'll be

109
00:04:33,990 --> 00:04:35,910
able to put open systems for more on

110
00:04:35,910 --> 00:04:37,560
that so that means the hardware vendors

111
00:04:37,560 --> 00:04:39,300
like Intel we need to provide all the

112
00:04:39,300 --> 00:04:39,740
pieces

113
00:04:39,740 --> 00:04:43,320
odm and OEM need to build systems but

114
00:04:43,320 --> 00:04:45,210
they won't be shipping yet at that point

115
00:04:45,210 --> 00:04:47,220
we're expecting to have systems start to

116
00:04:47,220 --> 00:04:49,410
show up and we can finalize the

117
00:04:49,410 --> 00:04:51,510
requirements that's the the discussion

118
00:04:51,510 --> 00:04:53,370
and that gives six months to meet the

119
00:04:53,370 --> 00:04:56,550
requirements before March of 2021 where

120
00:04:56,550 --> 00:04:58,530
it's possible to get a system that ships

121
00:04:58,530 --> 00:05:00,330
out of the factory with open systems

122
00:05:00,330 --> 00:05:03,030
from one so that's the basic context and

123
00:05:03,030 --> 00:05:05,340
schedule that's driving our Intel open

124
00:05:05,340 --> 00:05:07,500
deliverables for this so that our

125
00:05:07,500 --> 00:05:09,720
customers and our ODMs can meet those

126
00:05:09,720 --> 00:05:14,880
those timeframes is it sporting to take

127
00:05:14,880 --> 00:05:17,669
pictures of your own documents I'm just

128
00:05:17,669 --> 00:05:19,289
kidding Rahn actually wrote the document

129
00:05:19,289 --> 00:05:28,050
link below or started it at least all

130
00:05:28,050 --> 00:05:29,789
right so now we'll talk a little bit

131
00:05:29,789 --> 00:05:31,740
about the range of solutions that Intel

132
00:05:31,740 --> 00:05:34,350
has to feed the open source and so we

133
00:05:34,350 --> 00:05:35,880
look at this picture on the left side

134
00:05:35,880 --> 00:05:37,770
the open source pieces are gonna show up

135
00:05:37,770 --> 00:05:39,860
on the right source the closed source

136
00:05:39,860 --> 00:05:42,150
proprietary pieces are gonna show up and

137
00:05:42,150 --> 00:05:44,940
the X scale from my perspective is

138
00:05:44,940 --> 00:05:46,680
basically as you go from left to right

139
00:05:46,680 --> 00:05:48,599
you're gonna get more flexibility and

140
00:05:48,599 --> 00:05:50,789
more complexity coming along with that

141
00:05:50,789 --> 00:05:55,229
more features but also a lot more system

142
00:05:55,229 --> 00:05:57,840
firmware so it looks like a spectrum

143
00:05:57,840 --> 00:06:00,570
like this we've got coreboot as the most

144
00:06:00,570 --> 00:06:02,729
basic slim bootloader right up there the

145
00:06:02,729 --> 00:06:04,889
same level of this is just booting the

146
00:06:04,889 --> 00:06:06,690
heart or just configuring the hardware

147
00:06:06,690 --> 00:06:08,669
and getting out of the way then you

148
00:06:08,669 --> 00:06:11,520
start to add utq if I payloads or things

149
00:06:11,520 --> 00:06:13,110
that build the system from where they

150
00:06:13,110 --> 00:06:14,820
get more complicated that offer more

151
00:06:14,820 --> 00:06:17,639
driver models and pieces like that the

152
00:06:17,639 --> 00:06:19,680
min platform is expected to come in a

153
00:06:19,680 --> 00:06:21,450
little more complicated than the payload

154
00:06:21,450 --> 00:06:23,460
it's gonna have the SMM still it's going

155
00:06:23,460 --> 00:06:25,830
to have security features authenticated

156
00:06:25,830 --> 00:06:27,060
boot and things that you won't find

157
00:06:27,060 --> 00:06:30,539
necessarily in the UEFI payload and then

158
00:06:30,539 --> 00:06:32,940
we've got our traditional reference

159
00:06:32,940 --> 00:06:35,039
platform our enabling platform which is

160
00:06:35,039 --> 00:06:37,409
mostly closed source but with some open

161
00:06:37,409 --> 00:06:39,780
source Tiano coorg stuff and then we

162
00:06:39,780 --> 00:06:40,970
have customer product

163
00:06:40,970 --> 00:06:43,100
built on the top of that so this is our

164
00:06:43,100 --> 00:06:45,080
basic picture of the spectrum of open

165
00:06:45,080 --> 00:06:46,610
and closed solutions that Intel is

166
00:06:46,610 --> 00:06:49,190
enabling and our primary vehicle for

167
00:06:49,190 --> 00:06:51,380
enabling these is the reference

168
00:06:51,380 --> 00:06:55,030
platforms for a given silicon chipset

169
00:06:55,030 --> 00:06:57,950
given platform so we're looking to have

170
00:06:57,950 --> 00:06:59,780
a spectrum of options available and

171
00:06:59,780 --> 00:07:01,730
you've got to talk to us privately for

172
00:07:01,730 --> 00:07:03,980
for specific roadmaps and what products

173
00:07:03,980 --> 00:07:06,500
support what not everything not every

174
00:07:06,500 --> 00:07:08,480
platform not every chipset will have all

175
00:07:08,480 --> 00:07:11,300
of these options available for example

176
00:07:11,300 --> 00:07:13,130
enabling made sure that I point out that

177
00:07:13,130 --> 00:07:15,590
we don't have coreboot direct coreboot

178
00:07:15,590 --> 00:07:17,750
enabling from Intel for server silicon

179
00:07:17,750 --> 00:07:19,580
at this time we do for client from any

180
00:07:19,580 --> 00:07:22,250
client products but the silicon we still

181
00:07:22,250 --> 00:07:24,590
don't have a plan in place to do direct

182
00:07:24,590 --> 00:07:27,260
horbet enabling but we'll talk about the

183
00:07:27,260 --> 00:07:28,490
FSB and we'll talk about the mem

184
00:07:28,490 --> 00:07:31,130
platform and how we can utilize those to

185
00:07:31,130 --> 00:07:34,730
enable coreboot and other answers so the

186
00:07:34,730 --> 00:07:37,930
thrust of our solutions are really to

187
00:07:37,930 --> 00:07:40,700
start taking steps to reduce complexity

188
00:07:40,700 --> 00:07:42,830
at this point in the evolution of UEFI

189
00:07:42,830 --> 00:07:46,100
we've got UEFI saturating much of the

190
00:07:46,100 --> 00:07:48,440
market we have lots of unify solutions

191
00:07:48,440 --> 00:07:50,090
we have lots and lots of features based

192
00:07:50,090 --> 00:07:52,880
on UEFI and what we need to do is start

193
00:07:52,880 --> 00:07:55,130
to reduce the complexity because there's

194
00:07:55,130 --> 00:07:58,580
a lot a lot that goes with the current

195
00:07:58,580 --> 00:08:00,230
answer so we're looking to reduce the

196
00:08:00,230 --> 00:08:02,120
complexity min platform is a big part of

197
00:08:02,120 --> 00:08:02,390
that

198
00:08:02,390 --> 00:08:04,669
making features more modular so they can

199
00:08:04,669 --> 00:08:06,800
plug into min platform or the full

200
00:08:06,800 --> 00:08:09,020
platform that'll be another thrust of

201
00:08:09,020 --> 00:08:12,310
upcoming years and then we have another

202
00:08:12,310 --> 00:08:15,110
focus to move both of these things into

203
00:08:15,110 --> 00:08:18,590
the more open space over time so those

204
00:08:18,590 --> 00:08:20,960
are the two I think things trends that

205
00:08:20,960 --> 00:08:22,910
we see in the firmware enabling for

206
00:08:22,910 --> 00:08:24,080
Intel's we've got to reduce the

207
00:08:24,080 --> 00:08:26,180
complexity and we've got to get more of

208
00:08:26,180 --> 00:08:31,370
it into the open so it's summarizing the

209
00:08:31,370 --> 00:08:32,809
different things that's coming from

210
00:08:32,809 --> 00:08:34,580
Intel the slim bootloader the min

211
00:08:34,580 --> 00:08:36,169
platform and then the full reference

212
00:08:36,169 --> 00:08:38,929
platform I think a couple key messages

213
00:08:38,929 --> 00:08:41,059
are that the min platform is the newest

214
00:08:41,059 --> 00:08:43,339
thing it's to fit between the slim

215
00:08:43,339 --> 00:08:45,020
bootloader and the full reference

216
00:08:45,020 --> 00:08:46,910
platform that's close so the slim

217
00:08:46,910 --> 00:08:49,520
bootloader is open it is statically

218
00:08:49,520 --> 00:08:51,589
linked together a single image program

219
00:08:51,589 --> 00:08:54,350
and the min platform is still you if

220
00:08:54,350 --> 00:08:57,500
stoolie dk2 NPI architecture compliant

221
00:08:57,500 --> 00:08:59,720
and has a dynamic driver model on all

222
00:08:59,720 --> 00:09:02,360
those pieces but it's a lot less than

223
00:09:02,360 --> 00:09:04,400
the full BIOS and then the full system

224
00:09:04,400 --> 00:09:05,510
firmware is still there the full

225
00:09:05,510 --> 00:09:08,210
reference platform all of these we're

226
00:09:08,210 --> 00:09:10,610
looking to leverage the FSP to provide

227
00:09:10,610 --> 00:09:12,920
the one set of silicon support one of

228
00:09:12,920 --> 00:09:14,750
the constraints for us as a company is

229
00:09:14,750 --> 00:09:17,180
we don't like we spend a lot of money on

230
00:09:17,180 --> 00:09:19,160
validating memory configuration and

231
00:09:19,160 --> 00:09:21,230
memory initialization code and so it's

232
00:09:21,230 --> 00:09:22,820
very difficult for us to support

233
00:09:22,820 --> 00:09:25,190
multiple answers in that space so all

234
00:09:25,190 --> 00:09:26,720
these solutions are going to be based

235
00:09:26,720 --> 00:09:30,200
off of FSP and the net result is we

236
00:09:30,200 --> 00:09:31,910
we're looking to have three options you

237
00:09:31,910 --> 00:09:33,710
can build a completely custom solution

238
00:09:33,710 --> 00:09:36,080
with the slim bootloader you can build

239
00:09:36,080 --> 00:09:38,690
an e dk2 solution from the bottom up

240
00:09:38,690 --> 00:09:40,460
with the minimum features and add more

241
00:09:40,460 --> 00:09:41,840
into it or you can take the full

242
00:09:41,840 --> 00:09:44,540
reference solution full ibv solution

243
00:09:44,540 --> 00:09:46,550
bios render solution and reduce it down

244
00:09:46,550 --> 00:09:49,940
to your needs so that's the the spectrum

245
00:09:49,940 --> 00:09:52,820
of enabling that we're actively working

246
00:09:52,820 --> 00:09:57,500
towards so talking a little bit more

247
00:09:57,500 --> 00:09:59,570
about the min platform if you saw

248
00:09:59,570 --> 00:10:01,340
Michael's presentation earlier you

249
00:10:01,340 --> 00:10:03,260
covered this but the min platform

250
00:10:03,260 --> 00:10:05,120
approach was to break the boot into

251
00:10:05,120 --> 00:10:07,760
stages that are both reflective of how

252
00:10:07,760 --> 00:10:10,460
we bring up a new system as a team and

253
00:10:10,460 --> 00:10:13,700
as how a system bootstraps itself is it

254
00:10:13,700 --> 00:10:15,470
boots as it goes through the boot

255
00:10:15,470 --> 00:10:17,170
process bringing up the hardware so

256
00:10:17,170 --> 00:10:19,910
initially stage one of the men platform

257
00:10:19,910 --> 00:10:22,220
is to get debug up and going get a

258
00:10:22,220 --> 00:10:24,890
serial port get caches Ram did a basic

259
00:10:24,890 --> 00:10:26,480
environment for doing memory

260
00:10:26,480 --> 00:10:27,500
initialization

261
00:10:27,500 --> 00:10:30,140
Stage two gets us to memory functional

262
00:10:30,140 --> 00:10:33,200
stage three gets us to a UEFI shell with

263
00:10:33,200 --> 00:10:36,500
the basic two serial console text input

264
00:10:36,500 --> 00:10:39,410
text output stage four then adds basic a

265
00:10:39,410 --> 00:10:41,420
CPI tables and the pieces we need to

266
00:10:41,420 --> 00:10:44,120
boot in OS Stage five turns on the

267
00:10:44,120 --> 00:10:46,130
authenticated boot and security features

268
00:10:46,130 --> 00:10:49,580
that we need to be ubiquitous as we go

269
00:10:49,580 --> 00:10:53,120
forward we see that as table stakes for

270
00:10:53,120 --> 00:10:54,560
playing in the silicon game anyway

271
00:10:54,560 --> 00:10:56,480
everyone has some sort of hardware root

272
00:10:56,480 --> 00:10:58,550
of trust Hardware boot solution that we

273
00:10:58,550 --> 00:11:00,770
have to deal with and we want to enable

274
00:11:00,770 --> 00:11:02,510
that whether it's blue guard or whatever

275
00:11:02,510 --> 00:11:05,270
and then advanced feature selection is

276
00:11:05,270 --> 00:11:07,130
where more things can plug in to build

277
00:11:07,130 --> 00:11:07,910
out the finals

278
00:11:07,910 --> 00:11:09,860
so this is the basic min platform

279
00:11:09,860 --> 00:11:12,530
architecture we've organized the code

280
00:11:12,530 --> 00:11:15,770
around these stages and organized the

281
00:11:15,770 --> 00:11:17,660
functionality around these stages and

282
00:11:17,660 --> 00:11:19,910
tried to make each of them useful

283
00:11:19,910 --> 00:11:21,590
without any of the others

284
00:11:21,590 --> 00:11:23,990
so admittedly the first stage of just

285
00:11:23,990 --> 00:11:25,490
getting a serial port up and running

286
00:11:25,490 --> 00:11:27,050
isn't the most interesting thing you can

287
00:11:27,050 --> 00:11:29,030
do with somewhere but if you just need

288
00:11:29,030 --> 00:11:31,340
to get through memory stage 1 and stage

289
00:11:31,340 --> 00:11:33,800
2 will get you through it our system

290
00:11:33,800 --> 00:11:35,600
with the silicon initialize the memory

291
00:11:35,600 --> 00:11:38,060
running and then we could at that point

292
00:11:38,060 --> 00:11:39,680
jump to other things we could jump the

293
00:11:39,680 --> 00:11:41,210
Linux boot from there we could jump the

294
00:11:41,210 --> 00:11:42,830
Linux boot from later we're envisioning

295
00:11:42,830 --> 00:11:45,020
those kinds of options being available

296
00:11:45,020 --> 00:11:47,600
to people depending on how much or how

297
00:11:47,600 --> 00:11:49,430
little of the min platform they want to

298
00:11:49,430 --> 00:11:51,650
leverage so the idea is that each of

299
00:11:51,650 --> 00:11:54,940
these stages is distinctly usable and

300
00:11:54,940 --> 00:11:57,290
then there's another piece that we

301
00:11:57,290 --> 00:11:58,550
haven't really talked about because we

302
00:11:58,550 --> 00:11:59,600
don't have much of the infrastructure

303
00:11:59,600 --> 00:12:01,730
there but the visioning envisioned

304
00:12:01,730 --> 00:12:04,490
answer is there's also a stage 7 where

305
00:12:04,490 --> 00:12:05,780
after you've got all the features that

306
00:12:05,780 --> 00:12:07,940
come as packaged things you go through

307
00:12:07,940 --> 00:12:10,910
optimization stage and you if you saw

308
00:12:10,910 --> 00:12:13,280
the piano conversation you remove all

309
00:12:13,280 --> 00:12:14,630
the Dixie drivers you don't care about

310
00:12:14,630 --> 00:12:16,490
you remove all the P IMS you don't care

311
00:12:16,490 --> 00:12:18,950
about supposing you need something from

312
00:12:18,950 --> 00:12:20,810
USB but you don't need the USB

313
00:12:20,810 --> 00:12:22,940
mass-storage survivor we're gonna have a

314
00:12:22,940 --> 00:12:24,980
USB feature that tries to plug in all of

315
00:12:24,980 --> 00:12:26,540
them and then just go through with the

316
00:12:26,540 --> 00:12:28,640
optimization and kill the USB Mass

317
00:12:28,640 --> 00:12:29,870
Storage device because you don't need

318
00:12:29,870 --> 00:12:31,880
that one so that's the the basic min

319
00:12:31,880 --> 00:12:33,380
platform model that we're working

320
00:12:33,380 --> 00:12:37,400
towards and then so we'll get that and

321
00:12:37,400 --> 00:12:38,750
then the full reference platform the

322
00:12:38,750 --> 00:12:40,430
full reference platform will eventually

323
00:12:40,430 --> 00:12:43,520
be the min platform with all the rest of

324
00:12:43,520 --> 00:12:46,040
the UEFI stuff that we use for silicon

325
00:12:46,040 --> 00:12:49,010
validation for customer enabling set up

326
00:12:49,010 --> 00:12:51,080
browsers for doing configuration and

327
00:12:51,080 --> 00:12:52,730
those kinds of built-in things those

328
00:12:52,730 --> 00:12:56,990
those all show up as advantage features

329
00:12:56,990 --> 00:12:58,820
or as proprietary features on top of

330
00:12:58,820 --> 00:13:03,220
this basic of these this open baseline

331
00:13:03,370 --> 00:13:05,540
talking about the relationships of these

332
00:13:05,540 --> 00:13:07,640
things in it from another perspective on

333
00:13:07,640 --> 00:13:09,830
the bottom we have the common building

334
00:13:09,830 --> 00:13:11,840
blocks and this is Ronis that started

335
00:13:11,840 --> 00:13:13,760
evolving from the min platform which is

336
00:13:13,760 --> 00:13:17,000
the ia system firmware to the full

337
00:13:17,000 --> 00:13:19,460
integrated firmware image or the full

338
00:13:19,460 --> 00:13:21,010
platform which has

339
00:13:21,010 --> 00:13:25,120
the Emmy firmware ACM txt firmware if

340
00:13:25,120 --> 00:13:26,440
you're familiar with Intel trusted

341
00:13:26,440 --> 00:13:29,139
execution technology the those kinds of

342
00:13:29,139 --> 00:13:31,930
pieces so in in the base level we have

343
00:13:31,930 --> 00:13:34,029
common building blocks a mem platform

344
00:13:34,029 --> 00:13:36,670
and a motherboard port of that we've got

345
00:13:36,670 --> 00:13:38,709
the Intel FSB binary for silicon

346
00:13:38,709 --> 00:13:41,250
initialization we've got microcode

347
00:13:41,250 --> 00:13:46,529
binaries for the cpu we've got the Intel

348
00:13:46,529 --> 00:13:49,180
server platform services binary also

349
00:13:49,180 --> 00:13:51,279
known as the ME binary so we go to these

350
00:13:51,279 --> 00:13:53,320
different pieces and we're envisioning

351
00:13:53,320 --> 00:13:56,050
open BMC is the the BMC solution for

352
00:13:56,050 --> 00:13:57,760
Open Compute if you have these basic

353
00:13:57,760 --> 00:13:59,470
pieces that are common to all of the

354
00:13:59,470 --> 00:14:01,839
answers on top of that or if you add a

355
00:14:01,839 --> 00:14:04,899
few more pieces that make it a usable

356
00:14:04,899 --> 00:14:06,699
system then you get a minimum viable

357
00:14:06,699 --> 00:14:09,730
platform and so the key attributes of

358
00:14:09,730 --> 00:14:11,949
that is it's the set of building blocks

359
00:14:11,949 --> 00:14:14,889
with some minimum functionality and then

360
00:14:14,889 --> 00:14:18,010
open source minute form code and opaque

361
00:14:18,010 --> 00:14:20,279
binary blobs for the rest of the pieces

362
00:14:20,279 --> 00:14:23,500
initially and then the key timing for

363
00:14:23,500 --> 00:14:25,269
the minimum viable platform is we can

364
00:14:25,269 --> 00:14:28,089
start open sourcing things after the

365
00:14:28,089 --> 00:14:30,639
products launch so we can't do open

366
00:14:30,639 --> 00:14:32,260
source development at this time we're

367
00:14:32,260 --> 00:14:34,300
limited but once we launch a new process

368
00:14:34,300 --> 00:14:36,160
or a new platform we expect we're

369
00:14:36,160 --> 00:14:38,740
looking to flip the minimal at form port

370
00:14:38,740 --> 00:14:41,110
open and the binary FS PS and these

371
00:14:41,110 --> 00:14:43,839
other pieces open so they'll be freely

372
00:14:43,839 --> 00:14:45,339
available downloadable and

373
00:14:45,339 --> 00:14:48,430
redistributable on top of that we've got

374
00:14:48,430 --> 00:14:50,199
the full reference platform this will be

375
00:14:50,199 --> 00:14:52,720
closed this is the platform development

376
00:14:52,720 --> 00:14:54,459
and validation the vehicle that we use

377
00:14:54,459 --> 00:14:56,380
to build all these things it has lots of

378
00:14:56,380 --> 00:14:58,480
features and it's the traditional

379
00:14:58,480 --> 00:15:01,569
ecosystem enabling tool so that's the

380
00:15:01,569 --> 00:15:04,089
the basic stack of how the full platform

381
00:15:04,089 --> 00:15:07,540
in platform and the the building blocks

382
00:15:07,540 --> 00:15:11,319
work together so in the Venn diagram

383
00:15:11,319 --> 00:15:13,779
picture the key thing I want to stress

384
00:15:13,779 --> 00:15:15,699
here is the FSB is the same throughout

385
00:15:15,699 --> 00:15:17,889
all of these the min platform is looking

386
00:15:17,889 --> 00:15:19,180
to be the same throughout all of these

387
00:15:19,180 --> 00:15:21,160
the binary pieces early we're not having

388
00:15:21,160 --> 00:15:23,040
multiple flavors of these things it is

389
00:15:23,040 --> 00:15:25,360
consistently adding things on they're

390
00:15:25,360 --> 00:15:28,480
not 100% super sets but for the most

391
00:15:28,480 --> 00:15:31,630
part 95% plus in the source code will be

392
00:15:31,630 --> 00:15:32,810
shared and we use

393
00:15:32,810 --> 00:15:37,970
that's the model for these things so a

394
00:15:37,970 --> 00:15:39,110
couple notes on that

395
00:15:39,110 --> 00:15:41,060
mmm viable platform is probably not an

396
00:15:41,060 --> 00:15:43,490
actual deliverable it's probably going

397
00:15:43,490 --> 00:15:45,500
to be posted a little more ad hoc than

398
00:15:45,500 --> 00:15:47,630
that and likely won't show up on

399
00:15:47,630 --> 00:15:49,220
platform roadmaps when you're talking to

400
00:15:49,220 --> 00:15:50,750
Intel or published material you've got

401
00:15:50,750 --> 00:15:52,490
to look at the the actual platform

402
00:15:52,490 --> 00:15:55,160
information and extrapolate that okay at

403
00:15:55,160 --> 00:15:56,930
this platform launch of these pieces are

404
00:15:56,930 --> 00:16:00,950
gonna come open the middle platformer is

405
00:16:00,950 --> 00:16:03,440
an initial open source target we don't

406
00:16:03,440 --> 00:16:06,260
believe that a fully it's that it's

407
00:16:06,260 --> 00:16:08,390
going to be a fully featured solution

408
00:16:08,390 --> 00:16:10,279
for quite some time so we're expected to

409
00:16:10,279 --> 00:16:13,279
require proprietary code and/or

410
00:16:13,279 --> 00:16:15,230
additional binaries to have a really

411
00:16:15,230 --> 00:16:17,870
useful system the minimum functionality

412
00:16:17,870 --> 00:16:20,900
is not your minimum PC functionality or

413
00:16:20,900 --> 00:16:22,300
your minimum enterprise server

414
00:16:22,300 --> 00:16:24,890
functionality or even necessarily your

415
00:16:24,890 --> 00:16:26,779
minimal enterprise your minimal cloud

416
00:16:26,779 --> 00:16:28,610
server at this time or hyperscale server

417
00:16:28,610 --> 00:16:31,630
so we're missing things in manageability

418
00:16:31,630 --> 00:16:33,830
update ability those kinds of pieces

419
00:16:33,830 --> 00:16:35,720
those those were looking to have built

420
00:16:35,720 --> 00:16:37,580
on the communities as we get things out

421
00:16:37,580 --> 00:16:42,620
into the open and then the other node to

422
00:16:42,620 --> 00:16:45,410
facilitate the spread of this we're

423
00:16:45,410 --> 00:16:47,630
looking to control the rate of change in

424
00:16:47,630 --> 00:16:49,550
the FSP specification we feel like with

425
00:16:49,550 --> 00:16:52,610
the FSB 2.1 specification we've started

426
00:16:52,610 --> 00:16:54,140
to have a little fragmentation in the

427
00:16:54,140 --> 00:16:57,110
ecosystem we've got 1.0 and 1.1 and 2.0

428
00:16:57,110 --> 00:16:59,780
and 2.1 versions of the FSB so we're

429
00:16:59,780 --> 00:17:01,430
really interested and get all the

430
00:17:01,430 --> 00:17:03,770
binaries to the same level before we

431
00:17:03,770 --> 00:17:06,079
embark on the next round of change so so

432
00:17:06,079 --> 00:17:08,030
our basic direction to keep that stable

433
00:17:08,030 --> 00:17:10,250
for a while so we can get it into use in

434
00:17:10,250 --> 00:17:15,310
Corbett you booth and all of our answers

435
00:17:15,490 --> 00:17:18,290
and so I last note on that that I

436
00:17:18,290 --> 00:17:20,569
skipped over is for the near future if

437
00:17:20,569 --> 00:17:23,270
we do need additional functionality for

438
00:17:23,270 --> 00:17:25,459
servers that's proprietary we're looking

439
00:17:25,459 --> 00:17:27,859
to use the UEFI modularity to deliver

440
00:17:27,859 --> 00:17:30,410
that so we can publish Dixey drivers and

441
00:17:30,410 --> 00:17:32,960
P IMS and it's not a great answer but

442
00:17:32,960 --> 00:17:34,730
you can do something like Corbeau plus

443
00:17:34,730 --> 00:17:37,460
FS P plus the UEFI payload plus the

444
00:17:37,460 --> 00:17:39,830
proprietary binary blob of UEFI stuff

445
00:17:39,830 --> 00:17:41,840
and we can build those answers if we

446
00:17:41,840 --> 00:17:44,630
need those until we reach a more proper

447
00:17:44,630 --> 00:17:46,340
open system from our fully

448
00:17:46,340 --> 00:17:50,450
functional engine all right

449
00:17:50,450 --> 00:17:52,909
so talking about our part of this so

450
00:17:52,909 --> 00:17:54,710
we've got the context we've got the open

451
00:17:54,710 --> 00:17:56,570
systems from our timeline and we got

452
00:17:56,570 --> 00:17:58,400
this basic target of a Minimum Viable

453
00:17:58,400 --> 00:18:01,460
platform where we are right now is we've

454
00:18:01,460 --> 00:18:03,380
got some of the common building blocks

455
00:18:03,380 --> 00:18:06,860
posted onto various places so we've got

456
00:18:06,860 --> 00:18:08,929
the microcode we've got Intel txt

457
00:18:08,929 --> 00:18:12,380
binaries and we've got Intel FSP for a

458
00:18:12,380 --> 00:18:14,150
variety of platforms we need to start

459
00:18:14,150 --> 00:18:15,620
getting those out there for more server

460
00:18:15,620 --> 00:18:17,419
platforms so that'll be the next focus

461
00:18:17,419 --> 00:18:21,590
but we've got examples and the licensing

462
00:18:21,590 --> 00:18:22,880
and we've been working through that

463
00:18:22,880 --> 00:18:25,210
we're working currently on the SPS

464
00:18:25,210 --> 00:18:27,679
licensing and tools that we need for the

465
00:18:27,679 --> 00:18:30,230
men platform to get those going

466
00:18:30,230 --> 00:18:33,289
and so right now it is not one thing it

467
00:18:33,289 --> 00:18:34,850
is a mix of different versions and

468
00:18:34,850 --> 00:18:36,380
different pieces and it's mostly just

469
00:18:36,380 --> 00:18:38,659
showing demonstrating that we've got

470
00:18:38,659 --> 00:18:41,179
this piece open a redistributable and

471
00:18:41,179 --> 00:18:42,710
available we've got the next one coming

472
00:18:42,710 --> 00:18:46,399
so it's a mix of min platform proof of

473
00:18:46,399 --> 00:18:48,230
concepts and ports and things like that

474
00:18:48,230 --> 00:18:50,000
so we're not really expecting until the

475
00:18:50,000 --> 00:18:52,070
next platform generation for servers to

476
00:18:52,070 --> 00:18:54,250
have a fully integrated fully usable

477
00:18:54,250 --> 00:18:57,409
proof of concept and baseline to start

478
00:18:57,409 --> 00:18:59,990
from so the next steps we are developing

479
00:18:59,990 --> 00:19:03,020
that proof of concept for the next

480
00:19:03,020 --> 00:19:07,340
generation of Xeon SP servers and we're

481
00:19:07,340 --> 00:19:09,710
looking to get and we're developing the

482
00:19:09,710 --> 00:19:11,090
mem platform ports for our reference

483
00:19:11,090 --> 00:19:13,549
platform so the the basic model there is

484
00:19:13,549 --> 00:19:15,380
we can do a reference platform and then

485
00:19:15,380 --> 00:19:17,570
derivative board designs can leverage

486
00:19:17,570 --> 00:19:19,820
that to quickly produce their own open

487
00:19:19,820 --> 00:19:24,409
board ports after we get to as after

488
00:19:24,409 --> 00:19:26,510
products start launching so this next

489
00:19:26,510 --> 00:19:28,940
time frame is the next six months to the

490
00:19:28,940 --> 00:19:31,640
next March milestone for OCP open

491
00:19:31,640 --> 00:19:35,059
systems firmware so at that point at the

492
00:19:35,059 --> 00:19:37,039
next milestone we looked at the

493
00:19:37,039 --> 00:19:39,350
committed schedule for the Intel

494
00:19:39,350 --> 00:19:41,659
platform deliverables so if you talk to

495
00:19:41,659 --> 00:19:43,640
us right now we don't have the schedules

496
00:19:43,640 --> 00:19:45,799
but we're working on them when by March

497
00:19:45,799 --> 00:19:47,299
we're looking to have all the schedules

498
00:19:47,299 --> 00:19:49,580
for our next generation of Xeon ESPE

499
00:19:49,580 --> 00:19:51,710
nailed down so people can build their

500
00:19:51,710 --> 00:19:53,720
products based off of them there and

501
00:19:53,720 --> 00:19:56,870
their plans and then at the future time

502
00:19:56,870 --> 00:19:59,040
when OSF is required we

503
00:19:59,040 --> 00:20:01,020
or we feel like we're on track to feel

504
00:20:01,020 --> 00:20:02,690
like we're making progress towards the

505
00:20:02,690 --> 00:20:05,180
commercially available Intel platforms

506
00:20:05,180 --> 00:20:08,340
having an able to meet the OSF logo

507
00:20:08,340 --> 00:20:10,170
based on our current trends so that's

508
00:20:10,170 --> 00:20:11,790
that's really the key message today

509
00:20:11,790 --> 00:20:13,710
we're doing them platforms we're doing

510
00:20:13,710 --> 00:20:17,580
FS PS for the future Zeon SP products we

511
00:20:17,580 --> 00:20:18,930
don't have a lot of detail we don't have

512
00:20:18,930 --> 00:20:21,000
timelines yet that's much more under the

513
00:20:21,000 --> 00:20:22,860
the private disclosure discussions we

514
00:20:22,860 --> 00:20:24,630
can talk about those things but as a

515
00:20:24,630 --> 00:20:27,180
general direction we really want to say

516
00:20:27,180 --> 00:20:28,830
we are working towards this milestone

517
00:20:28,830 --> 00:20:31,230
enabling this for our partners and our

518
00:20:31,230 --> 00:20:37,140
development ecosystem alright so a few

519
00:20:37,140 --> 00:20:39,000
notes on the deliverables again product

520
00:20:39,000 --> 00:20:41,310
launch is the key dependency for us we

521
00:20:41,310 --> 00:20:43,050
really can't push things into the open

522
00:20:43,050 --> 00:20:45,630
or work on them publicly until those

523
00:20:45,630 --> 00:20:49,170
those silicon products launch we have

524
00:20:49,170 --> 00:20:51,510
some we have some concerns and risks

525
00:20:51,510 --> 00:20:54,270
about FSB API mode for multi socket

526
00:20:54,270 --> 00:20:56,070
functionality we've got a lot of desktop

527
00:20:56,070 --> 00:20:58,710
and a lot of client systems and single

528
00:20:58,710 --> 00:21:02,280
socket SOC based server systems that are

529
00:21:02,280 --> 00:21:04,680
using the FSB we believe that we'll get

530
00:21:04,680 --> 00:21:06,810
the FSB functional for multi socket

531
00:21:06,810 --> 00:21:08,730
systems without any issues but there is

532
00:21:08,730 --> 00:21:11,400
still a little asterisk it hasn't been

533
00:21:11,400 --> 00:21:13,140
done yet it's not mature so all

534
00:21:13,140 --> 00:21:15,120
statements are are forward-looking on

535
00:21:15,120 --> 00:21:16,710
the schedule because we've been burned

536
00:21:16,710 --> 00:21:17,160
before

537
00:21:17,160 --> 00:21:19,560
it looks really easy until you start

538
00:21:19,560 --> 00:21:21,870
debugging some of those month eye socket

539
00:21:21,870 --> 00:21:24,660
issues but in general we are moving we

540
00:21:24,660 --> 00:21:26,280
believe we're moving forward well we've

541
00:21:26,280 --> 00:21:28,050
got good initial data and those kinds of

542
00:21:28,050 --> 00:21:31,020
things and then the other key limitation

543
00:21:31,020 --> 00:21:34,050
is we don't currently have a plan to

544
00:21:34,050 --> 00:21:35,610
support system management about

545
00:21:35,610 --> 00:21:38,400
functionality so this shows up in a

546
00:21:38,400 --> 00:21:40,410
variety of manageability and update

547
00:21:40,410 --> 00:21:43,200
features in the server space today in

548
00:21:43,200 --> 00:21:45,180
the client space updates are largely

549
00:21:45,180 --> 00:21:47,430
driven through capsule updates or some

550
00:21:47,430 --> 00:21:50,310
other reboot based mechanism in the

551
00:21:50,310 --> 00:21:52,470
server space it's still typical

552
00:21:52,470 --> 00:21:54,600
traditional BIOS update where you run a

553
00:21:54,600 --> 00:21:57,720
program that goes into SMM and reap

554
00:21:57,720 --> 00:22:00,450
revisions the flash image and so there's

555
00:22:00,450 --> 00:22:02,130
a fair amount of work to do to get away

556
00:22:02,130 --> 00:22:06,930
from that model into an S mm free flow

557
00:22:06,930 --> 00:22:09,570
for things so so those are some of the

558
00:22:09,570 --> 00:22:11,110
limitations that I want

559
00:22:11,110 --> 00:22:13,030
keep in people's minds that we've got

560
00:22:13,030 --> 00:22:15,220
still a lot of S&M dependencies today in

561
00:22:15,220 --> 00:22:19,059
the firmware in the server space and we

562
00:22:19,059 --> 00:22:20,740
still got some risks associated with the

563
00:22:20,740 --> 00:22:24,910
multi socket functionality but basically

564
00:22:24,910 --> 00:22:27,850
that's it the OSF ready logo program is

565
00:22:27,850 --> 00:22:31,179
expected to happen is expected to drive

566
00:22:31,179 --> 00:22:33,790
open systems firmware into the server

567
00:22:33,790 --> 00:22:36,730
space and drive solutions and we believe

568
00:22:36,730 --> 00:22:39,940
we can support that we are using the FSP

569
00:22:39,940 --> 00:22:42,309
as our primary silicon enabling vehicle

570
00:22:42,309 --> 00:22:46,570
for these efforts and for a range of

571
00:22:46,570 --> 00:22:48,940
spectrum of of firmware solutions and

572
00:22:48,940 --> 00:22:52,270
we're we're producing MIM platforms as

573
00:22:52,270 --> 00:22:57,549
the open enabling version of edk - so

574
00:22:57,549 --> 00:23:00,040
the call of action learn more about the

575
00:23:00,040 --> 00:23:02,140
OSF work there's the open systems

576
00:23:02,140 --> 00:23:05,049
firmware website and there's a variety

577
00:23:05,049 --> 00:23:07,330
of documents going with it and then the

578
00:23:07,330 --> 00:23:09,580
min platform stuff is out there largely

579
00:23:09,580 --> 00:23:11,260
instantiated on the client side right

580
00:23:11,260 --> 00:23:12,730
now but with the next generation of

581
00:23:12,730 --> 00:23:14,679
product server versions will go up on

582
00:23:14,679 --> 00:23:17,679
Tiano coorg the specification is there

583
00:23:17,679 --> 00:23:19,360
it's very much a draft specification

584
00:23:19,360 --> 00:23:21,309
we're looking to evolve it to meet

585
00:23:21,309 --> 00:23:23,590
everyone's needs we published what we

586
00:23:23,590 --> 00:23:25,270
think we need what we know we need to

587
00:23:25,270 --> 00:23:27,160
align with our validation efforts and

588
00:23:27,160 --> 00:23:29,290
our silicon development and from there I

589
00:23:29,290 --> 00:23:31,090
think we can we can take in a lot of

590
00:23:31,090 --> 00:23:34,030
directions so engagement on the min

591
00:23:34,030 --> 00:23:36,190
platform specification is definitely

592
00:23:36,190 --> 00:23:39,850
welcome and with that I'd like to open

593
00:23:39,850 --> 00:23:54,070
it up to Q&A late last year there was a

594
00:23:54,070 --> 00:23:56,950
lot of press around some thoughts that

595
00:23:56,950 --> 00:24:00,010
Intel might open-source the FSB is that

596
00:24:00,010 --> 00:24:04,900
a was that ever planned and be may that

597
00:24:04,900 --> 00:24:09,309
happen in the future it depends on what

598
00:24:09,309 --> 00:24:11,140
you mean by planned and so I don't feel

599
00:24:11,140 --> 00:24:12,730
like I can answer that in any useful

600
00:24:12,730 --> 00:24:14,500
official way but yes we are still

601
00:24:14,500 --> 00:24:16,179
looking at that we don't have concrete

602
00:24:16,179 --> 00:24:18,400
plans at this time so there's there's a

603
00:24:18,400 --> 00:24:20,530
lot of things that have to go as you you

604
00:24:20,530 --> 00:24:22,330
look at Ron's 20 year history than the

605
00:24:22,330 --> 00:24:24,300
intro the

606
00:24:24,300 --> 00:24:27,180
toe has moved a couple different ways

607
00:24:27,180 --> 00:24:29,400
over history and so I feel like we've

608
00:24:29,400 --> 00:24:30,930
got a lot of momentum moving towards

609
00:24:30,930 --> 00:24:33,020
more open space and more open things but

610
00:24:33,020 --> 00:24:35,280
there's still a lot of work to do so

611
00:24:35,280 --> 00:24:36,960
it's it's not something that we would

612
00:24:36,960 --> 00:24:40,020
talk about a timeframe for yet by any

613
00:24:40,020 --> 00:24:41,850
means

614
00:24:41,850 --> 00:24:43,440
could you please shed some light what

615
00:24:43,440 --> 00:24:45,470
are the issues getting FSP to work on

616
00:24:45,470 --> 00:24:48,690
Multi circuit configurations it's it's a

617
00:24:48,690 --> 00:24:50,190
risk statement there's a greater than

618
00:24:50,190 --> 00:24:53,310
greater than 25% chance that we'll hit

619
00:24:53,310 --> 00:24:56,160
some hard issues in making useful so

620
00:24:56,160 --> 00:24:57,390
when we look at the memory

621
00:24:57,390 --> 00:25:00,030
initialization in the server code it is

622
00:25:00,030 --> 00:25:03,680
multi socket today and it's a very

623
00:25:03,680 --> 00:25:07,980
specialized magic hardware low low

624
00:25:07,980 --> 00:25:10,440
performance buses and so we just we

625
00:25:10,440 --> 00:25:12,030
haven't worked that out we're not we're

626
00:25:12,030 --> 00:25:14,130
not worried about the boot loaders EDK

627
00:25:14,130 --> 00:25:15,870
to when coreboot both have long

628
00:25:15,870 --> 00:25:18,240
histories and HPC and server and

629
00:25:18,240 --> 00:25:20,310
enterprise and things it's you know is

630
00:25:20,310 --> 00:25:21,960
there some limitation to the FS piece

631
00:25:21,960 --> 00:25:23,520
back is there some limitation of the

632
00:25:23,520 --> 00:25:25,380
implementation we haven't so it's purely

633
00:25:25,380 --> 00:25:27,990
a risk management statement to say we

634
00:25:27,990 --> 00:25:29,610
need to be a little cautious if you're

635
00:25:29,610 --> 00:25:31,140
if you're betting your business on

636
00:25:31,140 --> 00:25:33,060
building something off of an FSB that's

637
00:25:33,060 --> 00:25:34,380
gonna show up in nine months that's

638
00:25:34,380 --> 00:25:36,780
probably a high-risk bet since we just

639
00:25:36,780 --> 00:25:38,610
we haven't done it yet that's that's the

640
00:25:38,610 --> 00:25:40,590
main message that we don't we haven't

641
00:25:40,590 --> 00:25:42,870
hit any issues we've got FS B's that are

642
00:25:42,870 --> 00:25:44,850
booting multi socket in the early

643
00:25:44,850 --> 00:25:48,120
functionality and so that's we haven't

644
00:25:48,120 --> 00:25:51,870
hit anything yet but our multi socket

645
00:25:51,870 --> 00:25:53,100
initialization and our memory

646
00:25:53,100 --> 00:25:56,210
initialization or complicated endeavors

647
00:25:56,210 --> 00:26:00,750
so we mentioned bootable components for

648
00:26:00,750 --> 00:26:06,350
Intel txt what doesn't mean do you mean

649
00:26:06,350 --> 00:26:10,140
yeah so there are the question what do I

650
00:26:10,140 --> 00:26:12,450
mean by Intel txt binaries so the BIOS

651
00:26:12,450 --> 00:26:15,510
ACM binaries that do thee that hook into

652
00:26:15,510 --> 00:26:17,610
the v table and do the initial blue card

653
00:26:17,610 --> 00:26:19,050
authentication we can make those

654
00:26:19,050 --> 00:26:20,790
available to do measurement any they

655
00:26:20,790 --> 00:26:24,379
have a different functionality but yes

656
00:26:25,130 --> 00:26:29,400
yes that's great so that that happened a

657
00:26:29,400 --> 00:26:31,410
month or two ago maybe longer than that

658
00:26:31,410 --> 00:26:33,660
and we're working on the Emmy currently

659
00:26:33,660 --> 00:26:35,280
to get that what platforms will be

660
00:26:35,280 --> 00:26:38,040
covered with that so the first one

661
00:26:38,040 --> 00:26:40,750
Kaskade lake and it would be going

662
00:26:40,750 --> 00:26:42,760
forward so we uh we don't expect to have

663
00:26:42,760 --> 00:26:44,350
all the pieces for cascade Lake we

664
00:26:44,350 --> 00:26:45,760
expect to have all the pieces for the

665
00:26:45,760 --> 00:26:47,770
next generation okay so this will be all

666
00:26:47,770 --> 00:26:52,450
new for we we have a difficulty going

667
00:26:52,450 --> 00:26:54,400
backwards at this point yeah at this

668
00:26:54,400 --> 00:26:57,670
point thought what was your timetable on

669
00:26:57,670 --> 00:27:00,790
actually aligning all of your offerings

670
00:27:00,790 --> 00:27:05,140
to FS p21 oh that's a good question I

671
00:27:05,140 --> 00:27:06,370
should have foreseen that I don't have a

672
00:27:06,370 --> 00:27:09,880
timetable so so we're pausing new spec

673
00:27:09,880 --> 00:27:11,470
development and letting everything catch

674
00:27:11,470 --> 00:27:14,170
up so that the long poles tend to be the

675
00:27:14,170 --> 00:27:18,520
server products but the the embedded

676
00:27:18,520 --> 00:27:20,950
teams may also have some projects that

677
00:27:20,950 --> 00:27:22,540
are still 2.0 and things like that i

678
00:27:22,540 --> 00:27:24,280
think i think we're catching up we've

679
00:27:24,280 --> 00:27:25,960
got the initial 2.1 and i think they're

680
00:27:25,960 --> 00:27:27,490
for client but i don't have a hard time

681
00:27:27,490 --> 00:27:28,210
three years

682
00:27:28,210 --> 00:27:30,660
oh it'll be less than that pretty sure

683
00:27:30,660 --> 00:27:34,680
okay cuz it has some severe limitations

684
00:27:34,680 --> 00:27:49,270
okay tell me this is off topic but the

685
00:27:49,270 --> 00:27:51,250
if is please take a long time to inner

686
00:27:51,250 --> 00:27:53,350
memory and you you keep saying how

687
00:27:53,350 --> 00:27:57,040
complicated it is is that gonna get more

688
00:27:57,040 --> 00:27:59,280
and more complicated than and slow

689
00:27:59,280 --> 00:28:03,130
forever or is it going to settle down

690
00:28:03,130 --> 00:28:07,660
and is it possible to have a memory in

691
00:28:07,660 --> 00:28:09,600
it that's targeted perhaps not quite so

692
00:28:09,600 --> 00:28:11,500
you know getting them the maximum

693
00:28:11,500 --> 00:28:14,230
possible performance out of a system

694
00:28:14,230 --> 00:28:18,120
just have a slightly crappy memory in it

695
00:28:18,270 --> 00:28:20,860
is an excellent question that's what we

696
00:28:20,860 --> 00:28:22,900
were talking about at lunch and there

697
00:28:22,900 --> 00:28:24,370
are definitely segments that would make

698
00:28:24,370 --> 00:28:26,680
that useful but I am not aware of any

699
00:28:26,680 --> 00:28:29,380
good enough memory in it things in the

700
00:28:29,380 --> 00:28:32,380
server space our driver is definitely

701
00:28:32,380 --> 00:28:34,480
performance and bandwidth and throughput

702
00:28:34,480 --> 00:28:36,430
and performance and bandwidth and

703
00:28:36,430 --> 00:28:39,670
throughput and we're trying to make boot

704
00:28:39,670 --> 00:28:41,050
speed and we've got lots of great

705
00:28:41,050 --> 00:28:43,900
feedback that you know systems need to

706
00:28:43,900 --> 00:28:48,330
boot in less than minutes but the the

707
00:28:48,330 --> 00:28:51,430
driver does appear to be performance and

708
00:28:51,430 --> 00:28:52,030
so

709
00:28:52,030 --> 00:28:53,530
it's a balance for us it's a struggle

710
00:28:53,530 --> 00:28:55,930
for us so I don't know any concrete

711
00:28:55,930 --> 00:29:00,760
plans I'm fairly pessimistic that we can

712
00:29:00,760 --> 00:29:02,740
really make things simpler I think you

713
00:29:02,740 --> 00:29:04,840
know we can we can make efforts like min

714
00:29:04,840 --> 00:29:07,480
platform but if I look forward 5 or 10

715
00:29:07,480 --> 00:29:10,060
years I see Moore's law continuing I see

716
00:29:10,060 --> 00:29:13,270
10x more firmware being more likely than

717
00:29:13,270 --> 00:29:15,460
half as much firmware and I don't know

718
00:29:15,460 --> 00:29:17,230
how to I don't know how to really get

719
00:29:17,230 --> 00:29:18,610
off that job I see a lot of positive

720
00:29:18,610 --> 00:29:20,770
effort and I think we do things to

721
00:29:20,770 --> 00:29:25,320
simplify it along the way but ultimately

722
00:29:25,350 --> 00:29:27,850
I'd not aware of anything that's going

723
00:29:27,850 --> 00:29:30,040
to be a magic bullet for that so we are

724
00:29:30,040 --> 00:29:32,980
adding new memory technologies that the

725
00:29:32,980 --> 00:29:34,990
non-volatile memory is continued

726
00:29:34,990 --> 00:29:36,850
increase in complexity and what's going

727
00:29:36,850 --> 00:29:40,360
on in system memory topologies so I

728
00:29:40,360 --> 00:29:42,400
don't have any particularly good news on

729
00:29:42,400 --> 00:29:45,010
that front but I also might I wouldn't

730
00:29:45,010 --> 00:29:47,560
be involved so if we're Intel is doing

731
00:29:47,560 --> 00:29:49,720
that I'm not the right person I'm more

732
00:29:49,720 --> 00:29:52,150
the product firmware deployment side not

733
00:29:52,150 --> 00:29:55,090
the cutting edge memory development side

734
00:29:55,090 --> 00:29:59,730
so take my answer with a grain of salt I

735
00:30:00,120 --> 00:30:04,060
just remember that you express

736
00:30:04,060 --> 00:30:06,490
frustration at a future where there

737
00:30:06,490 --> 00:30:08,680
could be some platforms on FSB one and

738
00:30:08,680 --> 00:30:10,150
one point one and two point two point

739
00:30:10,150 --> 00:30:12,790
zero two point one did that mean that

740
00:30:12,790 --> 00:30:15,160
maybe there would be desire to bring

741
00:30:15,160 --> 00:30:16,600
everything up to two point one

742
00:30:16,600 --> 00:30:20,410
eventually yes so we'd like to let the

743
00:30:20,410 --> 00:30:24,220
let all of our things catch up but it's

744
00:30:24,220 --> 00:30:27,660
a it's a general gist simplicity and

745
00:30:27,660 --> 00:30:29,980
simplifying coreboot and and other

746
00:30:29,980 --> 00:30:31,690
bootloader supporting the multiple

747
00:30:31,690 --> 00:30:33,720
versions I mean the specs are pretty

748
00:30:33,720 --> 00:30:36,060
reasonably

749
00:30:36,060 --> 00:30:38,230
compatible and related like the old

750
00:30:38,230 --> 00:30:41,140
stuff didn't get thrown away so I think

751
00:30:41,140 --> 00:30:42,730
it's completely reasonable for a boot

752
00:30:42,730 --> 00:30:44,410
loader to support multiple generations

753
00:30:44,410 --> 00:30:48,280
of the FSP but at the same time we don't

754
00:30:48,280 --> 00:30:50,470
want to always have oh here's the next

755
00:30:50,470 --> 00:30:53,200
pack coming fragment and ecosystem we

756
00:30:53,200 --> 00:30:55,960
would like to really get the the our

757
00:30:55,960 --> 00:30:59,910
roadmap complete rather than have more

758
00:30:59,910 --> 00:31:01,870
bifurcation but I'm in it what we're

759
00:31:01,870 --> 00:31:04,600
open I think it's a general directional

760
00:31:04,600 --> 00:31:05,440
statement

761
00:31:05,440 --> 00:31:07,720
based on our history with UEFI and now

762
00:31:07,720 --> 00:31:11,710
how fragmented we let things get in that

763
00:31:11,710 --> 00:31:14,170
experience so but I think that question

764
00:31:14,170 --> 00:31:15,910
is about the trailing window I mean

765
00:31:15,910 --> 00:31:18,070
you're not taking old platforms and

766
00:31:18,070 --> 00:31:19,630
moving in the two one you're looking at

767
00:31:19,630 --> 00:31:21,580
your products and getting them all up to

768
00:31:21,580 --> 00:31:34,270
two on correct is your statement yes we

769
00:31:34,270 --> 00:31:35,800
keep hitting that memory the training is

770
00:31:35,800 --> 00:31:38,680
very complicated and maybe it is but the

771
00:31:38,680 --> 00:31:41,530
right system which may not require all

772
00:31:41,530 --> 00:31:43,990
the complexity to train the memory alike

773
00:31:43,990 --> 00:31:46,600
system is soldered down memory there is

774
00:31:46,600 --> 00:31:49,360
any plan to maybe open our training

775
00:31:49,360 --> 00:31:50,920
supposed to work in this configuration

776
00:31:50,920 --> 00:31:52,840
so some customers might be able to

777
00:31:52,840 --> 00:31:55,120
implement their own training or like

778
00:31:55,120 --> 00:31:56,620
reduced version of training or something

779
00:31:56,620 --> 00:31:58,390
like that so that we won't have to

780
00:31:58,390 --> 00:32:00,460
depend on this thing we supposed to

781
00:32:00,460 --> 00:32:01,930
cover thousands of different

782
00:32:01,930 --> 00:32:05,530
configurations of chips so I'm not aware

783
00:32:05,530 --> 00:32:08,050
of any plans at this time so you know

784
00:32:08,050 --> 00:32:09,820
we're working it as a general direction

785
00:32:09,820 --> 00:32:12,310
to be more open with even the silicon

786
00:32:12,310 --> 00:32:13,870
stuff in the document one of the things

787
00:32:13,870 --> 00:32:15,300
that came out of this conference is

788
00:32:15,300 --> 00:32:18,010
thinking about the documentation as well

789
00:32:18,010 --> 00:32:19,570
as an answer you know we don't

790
00:32:19,570 --> 00:32:21,310
necessarily we've been thinking very

791
00:32:21,310 --> 00:32:23,470
strongly reference code for the last

792
00:32:23,470 --> 00:32:26,740
decade or two at Intel and moving from

793
00:32:26,740 --> 00:32:29,350
purely spec based NDA spec based

794
00:32:29,350 --> 00:32:32,440
enabling to here is functional code and

795
00:32:32,440 --> 00:32:34,930
that's been the the last ten years or so

796
00:32:34,930 --> 00:32:37,450
and I think it's an interesting thing to

797
00:32:37,450 --> 00:32:39,100
bring up that there is the mix in the

798
00:32:39,100 --> 00:32:40,630
open world where we can just make the

799
00:32:40,630 --> 00:32:42,850
documents available and maybe we need to

800
00:32:42,850 --> 00:32:45,340
do more of that but right now my

801
00:32:45,340 --> 00:32:47,230
experiences we've been very focused on

802
00:32:47,230 --> 00:32:49,990
reference implementations and binaries

803
00:32:49,990 --> 00:32:52,690
that people can use and not so much

804
00:32:52,690 --> 00:32:55,750
publishing specs so I'm not aware of any

805
00:32:55,750 --> 00:32:57,340
plans I think it's an interesting

806
00:32:57,340 --> 00:32:58,990
direction I think there's opportunity

807
00:32:58,990 --> 00:33:01,690
there but we don't have plans to my

808
00:33:01,690 --> 00:33:07,060
knowledge at this point let me turn the

809
00:33:07,060 --> 00:33:09,130
earlier question around other than you

810
00:33:09,130 --> 00:33:10,930
know asking at conferences like this

811
00:33:10,930 --> 00:33:13,480
what's happening what can we as you know

812
00:33:13,480 --> 00:33:17,110
Intel users do to help push Intel into

813
00:33:17,110 --> 00:33:19,389
this direction of more open

814
00:33:19,389 --> 00:33:21,759
documentation you know more low-level in

815
00:33:21,759 --> 00:33:22,539
it

816
00:33:22,539 --> 00:33:25,450
such that you know as he mentioned you

817
00:33:25,450 --> 00:33:28,269
know we may not necessarily have the

818
00:33:28,269 --> 00:33:30,579
full set of requirements but you know we

819
00:33:30,579 --> 00:33:33,219
want to get a you know minimal firmware

820
00:33:33,219 --> 00:33:36,849
product shipping you know where it Intel

821
00:33:36,849 --> 00:33:39,669
is the right pressure point to push push

822
00:33:39,669 --> 00:33:45,099
in that direction I'm gonna give a very

823
00:33:45,099 --> 00:33:46,659
generic answer that one so there's

824
00:33:46,659 --> 00:33:48,669
there's a couple places you know you can

825
00:33:48,669 --> 00:33:51,219
you can work with us on the open piano

826
00:33:51,219 --> 00:33:53,440
core and other places like that and you

827
00:33:53,440 --> 00:33:55,419
can work with us in a collaborative way

828
00:33:55,419 --> 00:33:58,479
on the the pre-launch development and

829
00:33:58,479 --> 00:34:01,570
and I think that's a thing that we need

830
00:34:01,570 --> 00:34:04,539
to work on going forward is this

831
00:34:04,539 --> 00:34:09,190
constraint of being open post launch is

832
00:34:09,190 --> 00:34:11,500
a real problem if we can't collaborate

833
00:34:11,500 --> 00:34:13,569
effectively pre-launch so how do we

834
00:34:13,569 --> 00:34:16,059
create some sort of quasi pre-launch

835
00:34:16,059 --> 00:34:17,859
collaboration where people can have

836
00:34:17,859 --> 00:34:20,500
input because it does us no good if we

837
00:34:20,500 --> 00:34:22,719
open the silicon code and then tell you

838
00:34:22,719 --> 00:34:24,969
yet none of your changes are acceptable

839
00:34:24,969 --> 00:34:26,589
or valid or what huh you know there is

840
00:34:26,589 --> 00:34:28,389
no it's me path so that's that's a hard

841
00:34:28,389 --> 00:34:29,889
problem that we're only in the early

842
00:34:29,889 --> 00:34:32,230
stages of thinking about you know if you

843
00:34:32,230 --> 00:34:34,750
had a step one that's get you know get

844
00:34:34,750 --> 00:34:36,460
the information public a step two that's

845
00:34:36,460 --> 00:34:38,079
figure out how to use it in some sort of

846
00:34:38,079 --> 00:34:40,719
effective way so nothing concrete there

847
00:34:40,719 --> 00:34:45,069
but that the feedback is welcome and I

848
00:34:45,069 --> 00:34:47,259
think working with this collaborative II

849
00:34:47,259 --> 00:34:49,509
some way of committing things back to us

850
00:34:49,509 --> 00:34:51,940
you know in a one on one point the point

851
00:34:51,940 --> 00:34:54,460
thing might be the first steps but yeah

852
00:34:54,460 --> 00:34:56,139
that's that's the essential thing we're

853
00:34:56,139 --> 00:34:58,029
gonna do if we if we are ever to get to

854
00:34:58,029 --> 00:35:00,069
some sort of open thing we have to be

855
00:35:00,069 --> 00:35:03,490
better at taking feedback in and right

856
00:35:03,490 --> 00:35:05,619
now just simple schedules don't line up

857
00:35:05,619 --> 00:35:06,880
and things like that so it's very

858
00:35:06,880 --> 00:35:09,420
difficult

859
00:35:14,810 --> 00:35:16,730
one thing regarding as-salaam you said

860
00:35:16,730 --> 00:35:18,530
we want to thin down s mm there's one

861
00:35:18,530 --> 00:35:20,510
thing but you said there are no plans to

862
00:35:20,510 --> 00:35:23,960
support s mm an FSB is it in the long

863
00:35:23,960 --> 00:35:27,380
run is it a time thing right now it's

864
00:35:27,380 --> 00:35:29,420
time effort and priority thing we don't

865
00:35:29,420 --> 00:35:31,790
have we don't have the the people

866
00:35:31,790 --> 00:35:33,950
working on a different answer we don't

867
00:35:33,950 --> 00:35:35,750
have the time to intercept the different

868
00:35:35,750 --> 00:35:38,330
answer so we're working on the PRM so we

869
00:35:38,330 --> 00:35:40,160
you know we've seen Sarathy jaikumar

870
00:35:40,160 --> 00:35:43,070
talk about that at the OCP Global Summit

871
00:35:43,070 --> 00:35:45,350
and a little bit mentioned it here but

872
00:35:45,350 --> 00:35:47,330
yeah so we're working to reduce the SMM

873
00:35:47,330 --> 00:35:50,030
and I think there's a lot of consensus

874
00:35:50,030 --> 00:35:51,590
that it would be nice to have systems

875
00:35:51,590 --> 00:35:55,010
without SMM at all or severely limited

876
00:35:55,010 --> 00:36:00,770
and constrained SMM I think so yeah so

877
00:36:00,770 --> 00:36:02,540
we're looking to reduce the SMM and

878
00:36:02,540 --> 00:36:03,530
we're looking to provide some

879
00:36:03,530 --> 00:36:05,450
alternative answers and that's another

880
00:36:05,450 --> 00:36:09,200
area where there is probably a good

881
00:36:09,200 --> 00:36:11,180
opportunity to move things from the bio

882
00:36:11,180 --> 00:36:14,330
space to the OS space so so Linux boot

883
00:36:14,330 --> 00:36:16,130
is one big place where we can move

884
00:36:16,130 --> 00:36:18,320
functionality out of the BIOS system

885
00:36:18,320 --> 00:36:21,560
firmware into a more OS level and then

886
00:36:21,560 --> 00:36:24,440
run time I mean from the very beginning

887
00:36:24,440 --> 00:36:27,560
we everyone has hated UEFI run time like

888
00:36:27,560 --> 00:36:29,630
we don't want BIOS code running at run

889
00:36:29,630 --> 00:36:31,280
time we want OS is running at run time

890
00:36:31,280 --> 00:36:33,410
but for whatever reason some of these

891
00:36:33,410 --> 00:36:35,660
capabilities of features have utility

892
00:36:35,660 --> 00:36:38,060
that that keeps them around so that's

893
00:36:38,060 --> 00:36:40,280
that's the fight or it is to need reduce

894
00:36:40,280 --> 00:36:42,650
as much as we can the runtime footprint

895
00:36:42,650 --> 00:36:44,900
of firmware it's a security challenge

896
00:36:44,900 --> 00:36:47,030
anywhere you can interface directly with

897
00:36:47,030 --> 00:36:49,190
the BIOS anywhere you can start changing

898
00:36:49,190 --> 00:36:51,590
system configuration of functionality so

899
00:36:51,590 --> 00:36:54,350
we would like to reduce that and so it's

900
00:36:54,350 --> 00:36:55,940
just for the next generation of

901
00:36:55,940 --> 00:36:58,160
platforms I think we have the features

902
00:36:58,160 --> 00:37:00,170
that we have in the SMM space but we're

903
00:37:00,170 --> 00:37:02,360
working PRM we're working on offloading

904
00:37:02,360 --> 00:37:04,550
things to other controllers and we'd

905
00:37:04,550 --> 00:37:06,170
like to see Linux boot take more of

906
00:37:06,170 --> 00:37:08,270
those pieces and OS level drivers take

907
00:37:08,270 --> 00:37:10,100
more of those pieces okay and the other

908
00:37:10,100 --> 00:37:12,560
thing is FSB does it have mandatory

909
00:37:12,560 --> 00:37:15,290
pieces that are uniform across all the

910
00:37:15,290 --> 00:37:17,720
customers are reallyy configuration

911
00:37:17,720 --> 00:37:19,520
options that people can further strip

912
00:37:19,520 --> 00:37:25,549
them down to date platform needs yeah so

913
00:37:25,549 --> 00:37:29,539
I think we definitely like to go in the

914
00:37:29,539 --> 00:37:30,949
latter direction of having the ability

915
00:37:30,949 --> 00:37:33,619
to strip things down I think piano

916
00:37:33,619 --> 00:37:35,509
obviously demonstrates something that

917
00:37:35,509 --> 00:37:37,189
was always intended there that you could

918
00:37:37,189 --> 00:37:38,959
remove the tools there's there's a tool

919
00:37:38,959 --> 00:37:41,899
in piano Korg F F M T that's the same

920
00:37:41,899 --> 00:37:44,269
thing pull out modules and things so I'd

921
00:37:44,269 --> 00:37:46,969
like to use that modularity rather than

922
00:37:46,969 --> 00:37:49,459
a build time feature flag modularity and

923
00:37:49,459 --> 00:37:51,709
I know there's some size penalties to

924
00:37:51,709 --> 00:37:53,799
that but it's a it's an incremental step

925
00:37:53,799 --> 00:37:56,269
where we can align on things and we can

926
00:37:56,269 --> 00:37:59,959
have we can do cryptographic hashes of

927
00:37:59,959 --> 00:38:02,209
FS B's and have known answers and things

928
00:38:02,209 --> 00:38:04,009
like that if we have some some

929
00:38:04,009 --> 00:38:05,749
consistency to how we do that versus

930
00:38:05,749 --> 00:38:08,899
builds so we are also looking at

931
00:38:08,899 --> 00:38:11,390
bringing back reproducible builds if

932
00:38:11,390 --> 00:38:12,679
you're familiar that the two different

933
00:38:12,679 --> 00:38:14,630
systems and bill targets should be able

934
00:38:14,630 --> 00:38:16,519
to build the same binary we'd very much

935
00:38:16,519 --> 00:38:19,219
like to get that capability back we had

936
00:38:19,219 --> 00:38:20,539
it and at some point we just stopped

937
00:38:20,539 --> 00:38:25,999
testing for it and lost it so I'm afraid

938
00:38:25,999 --> 00:38:27,589
we have to cut it here because we have

939
00:38:27,589 --> 00:38:29,799
to make it thank you very much again

940
00:38:29,799 --> 00:38:33,219
right applause

941
00:38:35,010 --> 00:38:36,630
[Music]

942
00:38:36,630 --> 00:38:38,690
you

