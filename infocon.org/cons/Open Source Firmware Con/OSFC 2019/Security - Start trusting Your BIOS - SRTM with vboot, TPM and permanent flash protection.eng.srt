1
00:00:03,190 --> 00:00:06,259
[Music]

2
00:00:07,189 --> 00:00:10,380
alright coming back again to SR Jeff

3
00:00:10,380 --> 00:00:13,349
though we have Mahad and he will be

4
00:00:13,349 --> 00:00:17,599
talking about more trust in your bias

5
00:00:17,630 --> 00:00:19,949
thank you for attending my talking hello

6
00:00:19,949 --> 00:00:23,550
I would like to present you my recent

7
00:00:23,550 --> 00:00:25,890
work about the static route of trustful

8
00:00:25,890 --> 00:00:27,630
measurement that I have to implemented

9
00:00:27,630 --> 00:00:30,689
with Corbett big-booty p.m. and the

10
00:00:30,689 --> 00:00:34,739
permanent SPI flash protection I am a

11
00:00:34,739 --> 00:00:37,620
thermal engineer at polish based and

12
00:00:37,620 --> 00:00:39,960
bells consulting company Jim frame that

13
00:00:39,960 --> 00:00:43,530
and I'm most interested in invest Hydra

14
00:00:43,530 --> 00:00:46,350
features in cobalt and Paris security

15
00:00:46,350 --> 00:00:51,239
solutions so I will briefly describe

16
00:00:51,239 --> 00:00:56,039
what the SRTM is how it is implemented

17
00:00:56,039 --> 00:00:59,399
in coreboot and describe which of the

18
00:00:59,399 --> 00:01:04,438
components and I will also present what

19
00:01:04,438 --> 00:01:06,900
other additional features I have added

20
00:01:06,900 --> 00:01:10,740
to the fumer to make it better and more

21
00:01:10,740 --> 00:01:13,650
customer friendly and user-friendly of

22
00:01:13,650 --> 00:01:16,020
course I wish all so small demo how it

23
00:01:16,020 --> 00:01:19,619
works and describe some future

24
00:01:19,619 --> 00:01:22,460
improvements that can be made my

25
00:01:22,460 --> 00:01:27,540
orientation so what the static route of

26
00:01:27,540 --> 00:01:31,799
just measurement is this route of trust

27
00:01:31,799 --> 00:01:33,990
that is based on a piece of immutable

28
00:01:33,990 --> 00:01:38,159
code each root of trust requires to be

29
00:01:38,159 --> 00:01:41,100
set up with its own core which is a

30
00:01:41,100 --> 00:01:44,880
basement of the whole chain of trust and

31
00:01:44,880 --> 00:01:47,310
we call it the core root of trust for

32
00:01:47,310 --> 00:01:50,250
measurement also CR TM Samuel provision

33
00:01:50,250 --> 00:01:54,119
and in coreboot and other measurement

34
00:01:54,119 --> 00:01:56,280
systems it is realized as a self

35
00:01:56,280 --> 00:01:59,270
measurement which is placed in this

36
00:01:59,270 --> 00:02:02,219
immutable piece of code this self

37
00:02:02,219 --> 00:02:04,259
measurement is the base for all other

38
00:02:04,259 --> 00:02:07,380
measurements and verification of next

39
00:02:07,380 --> 00:02:11,580
executed components this immutable piece

40
00:02:11,580 --> 00:02:13,420
of code can be achieved

41
00:02:13,420 --> 00:02:16,300
various mechanisms which can be based on

42
00:02:16,300 --> 00:02:19,540
spi flash blocked mechanisms like

43
00:02:19,540 --> 00:02:22,120
Hardware protected mode which I think

44
00:02:22,120 --> 00:02:24,640
most of you already know about it is a

45
00:02:24,640 --> 00:02:28,090
right in protected screw right Rohtak

46
00:02:28,090 --> 00:02:30,100
input protects screw for example or a

47
00:02:30,100 --> 00:02:34,090
jumper or there is also a one time

48
00:02:34,090 --> 00:02:36,180
program and remote available on certain

49
00:02:36,180 --> 00:02:39,970
partnerships that allows to permanently

50
00:02:39,970 --> 00:02:44,200
flash the status registers on the spy

51
00:02:44,200 --> 00:02:44,709
flash

52
00:02:44,709 --> 00:02:48,700
there are also some silicon vendor based

53
00:02:48,700 --> 00:02:51,580
solutions like in the hardware validated

54
00:02:51,580 --> 00:02:55,840
boot which is based on the PSP boot rom

55
00:02:55,840 --> 00:03:01,050
and only does allow to boot

56
00:03:01,050 --> 00:03:03,220
cryptographically signed components and

57
00:03:03,220 --> 00:03:08,110
early boot phase and the Intel secure

58
00:03:08,110 --> 00:03:10,480
boot or boot guard which is also based

59
00:03:10,480 --> 00:03:14,440
on the me or TXE boot ROM which also

60
00:03:14,440 --> 00:03:16,420
serves the same purpose as am the

61
00:03:16,420 --> 00:03:19,299
hardware dated but it does not allow to

62
00:03:19,299 --> 00:03:23,200
execute unsigned code in the very early

63
00:03:23,200 --> 00:03:28,420
phase and first of all why did I even

64
00:03:28,420 --> 00:03:33,820
attempt to implement this even even

65
00:03:33,820 --> 00:03:35,890
though there is an implementation for

66
00:03:35,890 --> 00:03:40,930
all of this almost in the Corp so this

67
00:03:40,930 --> 00:03:43,860
was mainly aimed at our customer needs

68
00:03:43,860 --> 00:03:49,660
which who would like to have a firm work

69
00:03:49,660 --> 00:03:51,610
that will not allow to exist on some

70
00:03:51,610 --> 00:03:55,420
components and would have be able to

71
00:03:55,420 --> 00:03:58,900
attest its own firmware with for example

72
00:03:58,900 --> 00:04:00,549
the measurements that I made in the

73
00:04:00,549 --> 00:04:04,840
framework so the advantages of of the

74
00:04:04,840 --> 00:04:08,230
SRTM are basically the measurements that

75
00:04:08,230 --> 00:04:11,820
are stored in securely in the TPM and

76
00:04:11,820 --> 00:04:14,049
which can be later used for the

77
00:04:14,049 --> 00:04:18,700
attestation in the OS those measurements

78
00:04:18,700 --> 00:04:21,459
can be also used to for example see us

79
00:04:21,459 --> 00:04:24,430
on secret data like disk encryption keys

80
00:04:24,430 --> 00:04:27,160
and only the

81
00:04:27,160 --> 00:04:30,430
trusted firmware State or trusted

82
00:04:30,430 --> 00:04:34,080
platform stake I would say can either to

83
00:04:34,080 --> 00:04:37,150
unseal the secret for example to unlock

84
00:04:37,150 --> 00:04:43,300
the disk and a verified memory feature

85
00:04:43,300 --> 00:04:48,910
can also prevent from executing and sign

86
00:04:48,910 --> 00:04:53,740
component in the chamber so how does the

87
00:04:53,740 --> 00:04:57,760
SR team look like in coreboot so very

88
00:04:57,760 --> 00:04:59,050
fact that measured boot mode are

89
00:04:59,050 --> 00:05:05,140
available since February 2019 and the

90
00:05:05,140 --> 00:05:07,380
implementation was brought by Solon or

91
00:05:07,380 --> 00:05:11,140
known as dependent visa also just an

92
00:05:11,140 --> 00:05:13,500
organizer of this conference and

93
00:05:13,500 --> 00:05:15,760
basically comprises the following

94
00:05:15,760 --> 00:05:19,600
components from preface compliant and

95
00:05:19,600 --> 00:05:21,790
most crucial is v boot which is a

96
00:05:21,790 --> 00:05:25,030
Google's verified boot reference

97
00:05:25,030 --> 00:05:28,630
implementation the TPM driver which is

98
00:05:28,630 --> 00:05:30,880
responsible for all all low-level access

99
00:05:30,880 --> 00:05:34,330
to the TPM is a part of coreboot basic

100
00:05:34,330 --> 00:05:36,970
code base and the flash map also

101
00:05:36,970 --> 00:05:40,120
developed by Google on the needs of the

102
00:05:40,120 --> 00:05:45,000
Chromebooks which allows to describe the

103
00:05:45,000 --> 00:05:48,640
thermal image differently than than

104
00:05:48,640 --> 00:05:52,300
coreboot did it before so flash mob has

105
00:05:52,300 --> 00:05:55,390
disadvantage that it can allow to have

106
00:05:55,390 --> 00:05:58,300
multiple core boot file system inside so

107
00:05:58,300 --> 00:06:02,410
we can have like multiple filmer stacks

108
00:06:02,410 --> 00:06:05,650
in one image and what is most important

109
00:06:05,650 --> 00:06:09,940
everything is open source and my

110
00:06:09,940 --> 00:06:12,820
implementation is based on this changes

111
00:06:12,820 --> 00:06:16,470
apu to platform the second module is

112
00:06:16,470 --> 00:06:20,470
Infineon as all be as presented on the

113
00:06:20,470 --> 00:06:24,660
slide and the flash chip I have used to

114
00:06:24,660 --> 00:06:27,520
implement a permanent display flash lock

115
00:06:27,520 --> 00:06:33,660
is from Edisto it's an 8 mega party chip

116
00:06:33,660 --> 00:06:37,000
this is how my thermal image look like

117
00:06:37,000 --> 00:06:39,340
this is a diagram that describes the

118
00:06:39,340 --> 00:06:41,030
flash not play out of the

119
00:06:41,030 --> 00:06:47,380
image and it basically contains most

120
00:06:47,380 --> 00:06:49,910
basically contains three parts that

121
00:06:49,910 --> 00:06:53,410
should be mentioned and the

122
00:06:53,410 --> 00:06:56,780
write-protected reads only legend is six

123
00:06:56,780 --> 00:06:57,770
megabytes in size

124
00:06:57,770 --> 00:07:00,500
it contains the the boot blocks of the

125
00:07:00,500 --> 00:07:03,650
resident vector the flesh map layout

126
00:07:03,650 --> 00:07:08,420
description the ROM stage where the ROM

127
00:07:08,420 --> 00:07:11,750
is initialized and the Linux kernel

128
00:07:11,750 --> 00:07:14,630
which I'll describe later and in the

129
00:07:14,630 --> 00:07:17,020
readwrite sections which are updatable

130
00:07:17,020 --> 00:07:18,880
contains also

131
00:07:18,880 --> 00:07:21,980
coreboot stock beginning from ROM stage

132
00:07:21,980 --> 00:07:26,780
and payload and I have some also some

133
00:07:26,780 --> 00:07:29,030
miscellaneous readwrite region for

134
00:07:29,030 --> 00:07:33,680
example for for PSP firmware and where I

135
00:07:33,680 --> 00:07:35,300
store for example the boot order or

136
00:07:35,300 --> 00:07:40,520
without product data so a little bit

137
00:07:40,520 --> 00:07:46,540
about Google's reboot so it was made to

138
00:07:46,540 --> 00:07:48,950
make the verifies would happen on the

139
00:07:48,950 --> 00:07:52,040
Chromebooks their idea behind that was

140
00:07:52,040 --> 00:07:57,500
to have a root key but the public part

141
00:07:57,500 --> 00:07:59,840
of root key stored in a structure called

142
00:07:59,840 --> 00:08:02,840
Google by number block which were which

143
00:08:02,840 --> 00:08:06,800
was then used to verify the signing the

144
00:08:06,800 --> 00:08:10,160
firmest signing keys which signatures of

145
00:08:10,160 --> 00:08:14,090
the code that is signed by this case is

146
00:08:14,090 --> 00:08:17,300
in the V blocks in readwrite framework

147
00:08:17,300 --> 00:08:22,790
and also Google wanted to have the

148
00:08:22,790 --> 00:08:25,010
update procedure to be saved that is why

149
00:08:25,010 --> 00:08:28,010
and they also implemented the to retry

150
00:08:28,010 --> 00:08:31,220
purchases so in case one partition is

151
00:08:31,220 --> 00:08:35,599
being corrupted or has a garbage or the

152
00:08:35,599 --> 00:08:37,789
femur is broken there there is also a

153
00:08:37,789 --> 00:08:39,979
backup from a petition before example

154
00:08:39,979 --> 00:08:42,200
can be which can be booted with all the

155
00:08:42,200 --> 00:08:45,800
buttons still working firmware and the V

156
00:08:45,800 --> 00:08:48,880
boot also provides all the cryptographic

157
00:08:48,880 --> 00:08:53,390
algorithm or a what's different in my

158
00:08:53,390 --> 00:08:56,160
implantation done in

159
00:08:56,160 --> 00:08:59,380
in Google Chromebook the root of trust

160
00:08:59,380 --> 00:09:01,480
which was in the spy flash in the surf

161
00:09:01,480 --> 00:09:04,870
measurement was protected by fuel block

162
00:09:04,870 --> 00:09:07,510
protection bits of the SPI flash along

163
00:09:07,510 --> 00:09:10,060
with hardware protected mode which I

164
00:09:10,060 --> 00:09:10,690
mentioned earlier

165
00:09:10,690 --> 00:09:14,440
so one has been locking the status

166
00:09:14,440 --> 00:09:17,890
register and additionally protecting it

167
00:09:17,890 --> 00:09:21,160
with right protect P Wolff I screw all

168
00:09:21,160 --> 00:09:23,620
with a jumper through a screw but my

169
00:09:23,620 --> 00:09:24,430
implementation

170
00:09:24,430 --> 00:09:27,270
the lock is permanent so it is

171
00:09:27,270 --> 00:09:29,790
independent of the right hook by

172
00:09:29,790 --> 00:09:35,530
protecting state and from boxes or from

173
00:09:35,530 --> 00:09:41,650
books recovery mode used external USB to

174
00:09:41,650 --> 00:09:44,140
recover the operating system not the

175
00:09:44,140 --> 00:09:46,900
femur in my implementation I have put a

176
00:09:46,900 --> 00:09:49,170
minimal Linux kernel it will read only

177
00:09:49,170 --> 00:09:53,980
to have a friendly shell environment

178
00:09:53,980 --> 00:09:57,850
with a few necessary binaries like flash

179
00:09:57,850 --> 00:10:00,940
rom and some network driver story

180
00:10:00,940 --> 00:10:04,720
drivers just to get the femur from some

181
00:10:04,720 --> 00:10:07,480
external sources the trusted femur and

182
00:10:07,480 --> 00:10:10,330
flash it back in case the red white

183
00:10:10,330 --> 00:10:15,760
partitions are untrusted and that's how

184
00:10:15,760 --> 00:10:19,630
the hood process look like so we have as

185
00:10:19,630 --> 00:10:21,310
I mentioned the boot block interim stage

186
00:10:21,310 --> 00:10:23,080
we frame is a vision that read-only

187
00:10:23,080 --> 00:10:25,530
femur in the wrong stage there is

188
00:10:25,530 --> 00:10:29,620
executed the boot logic which decides

189
00:10:29,620 --> 00:10:32,580
which partition we do like to boot and

190
00:10:32,580 --> 00:10:36,640
of course of course - of course checks

191
00:10:36,640 --> 00:10:39,400
the signatures of the read white

192
00:10:39,400 --> 00:10:43,120
partitions and in case these partitions

193
00:10:43,120 --> 00:10:46,270
are not valid it boots to the read-only

194
00:10:46,270 --> 00:10:49,210
line stage and then the recovery kernel

195
00:10:49,210 --> 00:10:52,780
or if the partitions are valid it boots

196
00:10:52,780 --> 00:10:54,910
normally with Ram stage and see BIOS

197
00:10:54,910 --> 00:10:56,920
payload and to the target operating

198
00:10:56,920 --> 00:11:02,830
system the TPM driver core which is used

199
00:11:02,830 --> 00:11:06,100
in the SRT implementation it's located

200
00:11:06,100 --> 00:11:08,529
in the source security TPM the

201
00:11:08,529 --> 00:11:12,959
tree and covers both TP in 1.2 and 2.0

202
00:11:12,959 --> 00:11:16,420
modules entice responsible like I said

203
00:11:16,420 --> 00:11:18,819
before the whole low-level access to the

204
00:11:18,819 --> 00:11:22,389
TPM it is mainly used in the reboot

205
00:11:22,389 --> 00:11:25,959
logic which is implemented in the source

206
00:11:25,959 --> 00:11:29,470
Security reboot this this directory

207
00:11:29,470 --> 00:11:32,259
mainly focuses on the hooks that need to

208
00:11:32,259 --> 00:11:38,139
be made to the V boot in order to enable

209
00:11:38,139 --> 00:11:41,410
the perfect boot not and there are two

210
00:11:41,410 --> 00:11:44,680
files that need our attention it is V

211
00:11:44,680 --> 00:11:48,759
boot CR TM which contains the insulation

212
00:11:48,759 --> 00:11:52,079
code for the V boot measure boot mode

213
00:11:52,079 --> 00:11:57,670
Malaysia is d PM v boot context and does

214
00:11:57,670 --> 00:11:59,529
the self measurement of all the

215
00:11:59,529 --> 00:12:01,480
components that we have have already

216
00:12:01,480 --> 00:12:06,189
executed and and the measurement of the

217
00:12:06,189 --> 00:12:09,370
GU binary block which is extended to the

218
00:12:09,370 --> 00:12:14,800
PC R 0 and is the core of the root of

219
00:12:14,800 --> 00:12:19,209
trust and there is also a reboot

220
00:12:19,209 --> 00:12:23,170
emergency BFS hook function and we will

221
00:12:23,170 --> 00:12:28,439
see our TM which is hope that during an

222
00:12:28,439 --> 00:12:32,100
executed component execution it involves

223
00:12:32,100 --> 00:12:34,389
hashing Calgary which calculates the

224
00:12:34,389 --> 00:12:36,809
hash of the component and then extended

225
00:12:36,809 --> 00:12:40,600
extended to the PC R before it is

226
00:12:40,600 --> 00:12:44,500
executed and the whole V boot logic

227
00:12:44,500 --> 00:12:46,930
starts at a program location typically

228
00:12:46,930 --> 00:12:52,720
it is prom stage or wrong stage when we

229
00:12:52,720 --> 00:12:54,189
have a platform that supports the

230
00:12:54,189 --> 00:12:59,350
environment hood so the main issue I

231
00:12:59,350 --> 00:13:02,529
have encountered from the start was the

232
00:13:02,529 --> 00:13:05,139
default spy flash chip that was present

233
00:13:05,139 --> 00:13:09,069
on the IP YouTube platform and this wind

234
00:13:09,069 --> 00:13:13,990
bond also has the one time program mode

235
00:13:13,990 --> 00:13:15,519
available as the datasheet states

236
00:13:15,519 --> 00:13:20,709
however there is a small small and note

237
00:13:20,709 --> 00:13:22,640
there that

238
00:13:22,640 --> 00:13:26,940
mm let's say that this mode is only

239
00:13:26,940 --> 00:13:31,020
available upon special order so probably

240
00:13:31,020 --> 00:13:35,150
I would have to order thousands of chips

241
00:13:35,150 --> 00:13:40,800
to get those to get to smooth working I

242
00:13:40,800 --> 00:13:44,370
don't look for another spy flash part

243
00:13:44,370 --> 00:13:46,890
that would do it out of the box without

244
00:13:46,890 --> 00:13:49,530
any special orders as I heard soon as we

245
00:13:49,530 --> 00:13:51,390
found it

246
00:13:51,390 --> 00:13:54,980
I got found a Modesto chip which has

247
00:13:54,980 --> 00:13:57,420
surprisingly the same instruction says

248
00:13:57,420 --> 00:14:00,650
the same registers and everything and

249
00:14:00,650 --> 00:14:03,510
moreover has the spy one time in

250
00:14:03,510 --> 00:14:05,790
programmer mode available without any

251
00:14:05,790 --> 00:14:09,810
restrictions and please note that this

252
00:14:09,810 --> 00:14:11,580
one-time programmable may not fit

253
00:14:11,580 --> 00:14:15,450
everybody since it was mainly aimed to

254
00:14:15,450 --> 00:14:18,870
protect our customers humor so not

255
00:14:18,870 --> 00:14:20,940
everybody may want to lock permanently

256
00:14:20,940 --> 00:14:23,310
they firmer and get stuck with some box

257
00:14:23,310 --> 00:14:29,610
if there are and locked sections so and

258
00:14:29,610 --> 00:14:31,610
my additional value which I have added

259
00:14:31,610 --> 00:14:37,140
to the srgm is good other region because

260
00:14:37,140 --> 00:14:40,350
with multiple severe faces we cannot

261
00:14:40,350 --> 00:14:43,050
determine which partition we should

262
00:14:43,050 --> 00:14:44,970
check for the boot order file which is

263
00:14:44,970 --> 00:14:48,180
authorized for C BIOS to prioritize our

264
00:14:48,180 --> 00:14:53,040
boot media's so I have made a small

265
00:14:53,040 --> 00:14:56,820
region in flash map that were where I

266
00:14:56,820 --> 00:14:59,060
store the boot order boot order entries

267
00:14:59,060 --> 00:15:02,370
mm and made the see BIOS read it instead

268
00:15:02,370 --> 00:15:05,700
of GPFS file like it was previously and

269
00:15:05,700 --> 00:15:08,670
now thanks to that I have a persistent

270
00:15:08,670 --> 00:15:13,680
good order and as I mentioned here I

271
00:15:13,680 --> 00:15:16,290
have put a minimum Linux kernel to the

272
00:15:16,290 --> 00:15:22,920
root only flash part flash what I have I

273
00:15:22,920 --> 00:15:26,190
had about 4 megabytes left space there

274
00:15:26,190 --> 00:15:30,930
is only but I managed to put inside a

275
00:15:30,930 --> 00:15:32,640
minimal games kernel with only few

276
00:15:32,640 --> 00:15:35,490
kilobytes left the kernel was the

277
00:15:35,490 --> 00:15:39,540
based on the hats repository I just cut

278
00:15:39,540 --> 00:15:43,800
up some unused modules and put only some

279
00:15:43,800 --> 00:15:46,920
classroom CBMM and GPG example signature

280
00:15:46,920 --> 00:15:51,059
verification and basic network drivers

281
00:15:51,059 --> 00:15:54,240
and remote stole timers and I've got a

282
00:15:54,240 --> 00:15:59,790
nice recovery shop thanks lad there was

283
00:15:59,790 --> 00:16:02,730
on there was also a problem with runtime

284
00:16:02,730 --> 00:16:04,759
configuration because

285
00:16:04,759 --> 00:16:08,279
coreboot only does support some runtime

286
00:16:08,279 --> 00:16:11,009
configuration based on CMOS but not

287
00:16:11,009 --> 00:16:13,949
everybody may may lack this solution

288
00:16:13,949 --> 00:16:16,050
because the CMOS runtime configuration

289
00:16:16,050 --> 00:16:18,540
is dependent on the battery life on the

290
00:16:18,540 --> 00:16:23,249
platform and as some may know that the

291
00:16:23,249 --> 00:16:27,209
CMOS memory can be influenced by cosmic

292
00:16:27,209 --> 00:16:31,829
rays etc and I have thought about

293
00:16:31,829 --> 00:16:35,179
reusing the little project data by

294
00:16:35,179 --> 00:16:38,540
implemented by Google to store some

295
00:16:38,540 --> 00:16:40,799
configuration that may be changed during

296
00:16:40,799 --> 00:16:45,619
the firmware runtime and so I have

297
00:16:45,769 --> 00:16:48,959
included in my flesh map layout a two

298
00:16:48,959 --> 00:16:51,119
regions like with only VPD and redraw

299
00:16:51,119 --> 00:16:54,749
BPD in revive BPD I do store the default

300
00:16:54,749 --> 00:16:57,420
values of the runtime configuration

301
00:16:57,420 --> 00:17:00,360
options and in the readwrite VPD I do

302
00:17:00,360 --> 00:17:02,790
store the modifiable runtime

303
00:17:02,790 --> 00:17:05,429
configuration options what is more to

304
00:17:05,429 --> 00:17:07,549
the VPD

305
00:17:07,549 --> 00:17:11,099
it also provides utility to the user

306
00:17:11,099 --> 00:17:13,859
space that can really modify either de

307
00:17:13,859 --> 00:17:18,299
fumer online on this pi flash or can

308
00:17:18,299 --> 00:17:21,359
directly manipulate the file so we can

309
00:17:21,359 --> 00:17:23,819
prepare our own binary and running

310
00:17:23,819 --> 00:17:28,740
configuration before flushing but there

311
00:17:28,740 --> 00:17:34,230
were also some obstacles here the VPD

312
00:17:34,230 --> 00:17:36,690
partitions must be formatted before they

313
00:17:36,690 --> 00:17:41,309
are propagated by coreboot and CP man so

314
00:17:41,309 --> 00:17:44,549
i have stripped google VPD utility and

315
00:17:44,549 --> 00:17:47,149
here is all the trash from API code and

316
00:17:47,149 --> 00:17:49,210
placed under

317
00:17:49,210 --> 00:17:54,039
VPD - just to obtain some small utility

318
00:17:54,039 --> 00:17:56,770
to format the partitions at the end of

319
00:17:56,770 --> 00:17:59,409
the Corbett build so when the config BPG

320
00:17:59,409 --> 00:18:01,990
is selected I just built the tool and

321
00:18:01,990 --> 00:18:05,169
format the partitions and when the

322
00:18:05,169 --> 00:18:09,130
binary fetched I have already got the

323
00:18:09,130 --> 00:18:12,520
VPD in correct format and it's correctly

324
00:18:12,520 --> 00:18:18,190
propagated via CB man cooks I have all

325
00:18:18,190 --> 00:18:21,279
said that Duty library to see bios in

326
00:18:21,279 --> 00:18:23,110
order to parse some of the rantin

327
00:18:23,110 --> 00:18:25,600
configurations like I can disable USB

328
00:18:25,600 --> 00:18:28,570
Butte I think it's a been able pixie

329
00:18:28,570 --> 00:18:33,490
Butte or even I can disable serial

330
00:18:33,490 --> 00:18:35,740
console on my system which is headless

331
00:18:35,740 --> 00:18:40,630
etc and I see also the potential of the

332
00:18:40,630 --> 00:18:44,110
VPD to replace entirely the all symbols

333
00:18:44,110 --> 00:18:45,789
configuration which is based on cbofs

334
00:18:45,789 --> 00:18:48,549
files because in case of v boot and

335
00:18:48,549 --> 00:18:52,120
multiple cbofs partitions it becomes

336
00:18:52,120 --> 00:18:55,710
just unusable because we cannot read

337
00:18:55,710 --> 00:18:59,110
from the target partitions as we as we

338
00:18:59,110 --> 00:19:01,840
like the VPD is much more convenient

339
00:19:01,840 --> 00:19:06,190
approach okay so I would like to show

340
00:19:06,190 --> 00:19:09,760
you some small demo about the

341
00:19:09,760 --> 00:19:19,899
implementation so I have a a pewter here

342
00:19:19,899 --> 00:19:34,330
with the magic flash chip yep and I will

343
00:19:34,330 --> 00:19:39,490
put it on at your screen oh I have some

344
00:19:39,490 --> 00:19:42,600
small Debian Buster on the

345
00:19:42,600 --> 00:19:46,889
mSATA SSD for convenience

346
00:19:58,140 --> 00:20:05,380
so to show you how the Stilton works so

347
00:20:05,380 --> 00:20:09,600
I have the measurements here you can see

348
00:20:09,600 --> 00:20:13,870
VCRs from from 0 to 7 our DP shares of

349
00:20:13,870 --> 00:20:25,560
the buyers and I have also oh crap I

350
00:20:25,740 --> 00:20:32,110
have to okay and there are two binaries

351
00:20:32,110 --> 00:20:35,800
here already prepared for the demo and I

352
00:20:35,800 --> 00:20:37,990
have already on the spy flash the core

353
00:20:37,990 --> 00:20:39,550
boot ROM image which is sit on there

354
00:20:39,550 --> 00:20:46,360
also and I will now flash another frame

355
00:20:46,360 --> 00:20:48,670
where is which is in fact the same

356
00:20:48,670 --> 00:20:50,680
framework but I have signed it with

357
00:20:50,680 --> 00:20:53,350
different randomly-generated the boot

358
00:20:53,350 --> 00:20:58,270
keys as you can see we have the Edisto

359
00:20:58,270 --> 00:21:00,340
chip which was presented earlier and

360
00:21:00,340 --> 00:21:03,910
currently there is no lock applied so we

361
00:21:03,910 --> 00:21:07,980
can flash entire frame wear and be happy

362
00:21:22,290 --> 00:21:32,730
so let's now try to lock our spy flash

363
00:21:32,730 --> 00:21:35,530
and I have enabled a block protection

364
00:21:35,530 --> 00:21:37,780
for the right protected read-only region

365
00:21:37,780 --> 00:21:40,180
and enable the one time program mode so

366
00:21:40,180 --> 00:21:42,640
now the whole six megabytes region

367
00:21:42,640 --> 00:21:44,500
region which represented here is now a

368
00:21:44,500 --> 00:21:48,700
lot permanently so if you would like if

369
00:21:48,700 --> 00:21:53,220
we would like to flash and the old

370
00:21:53,220 --> 00:22:01,060
carpet which I have here let's say I

371
00:22:01,060 --> 00:22:06,580
will flash the rupee wpr own region it

372
00:22:06,580 --> 00:22:08,080
says that the block protection could not

373
00:22:08,080 --> 00:22:13,660
be disable already and there should be

374
00:22:13,660 --> 00:22:17,770
areas that the spy flash could not be

375
00:22:17,770 --> 00:22:24,670
raced with some sectors sectors okay

376
00:22:24,670 --> 00:22:28,090
this will loop for five or more times in

377
00:22:28,090 --> 00:22:31,270
order to check for different us

378
00:22:31,270 --> 00:22:34,570
functions but it's not necessary to wait

379
00:22:34,570 --> 00:22:38,680
for the final output so now let's try to

380
00:22:38,680 --> 00:22:48,370
power off and unplug the power supply it

381
00:22:48,370 --> 00:22:50,410
should now forget all the information we

382
00:22:50,410 --> 00:22:53,920
have got so typically if we would have

383
00:22:53,920 --> 00:22:56,950
the right detecting screw it should

384
00:22:56,950 --> 00:23:02,290
disable dialogue entirely and if I plug

385
00:23:02,290 --> 00:23:05,320
the supply will still have the flash

386
00:23:05,320 --> 00:23:08,170
work there because it is one hour

387
00:23:08,170 --> 00:23:10,590
programmable

388
00:23:35,360 --> 00:23:38,179
we'll try again the repetition on your

389
00:23:38,179 --> 00:23:42,040
agent flash to a still fail

390
00:23:52,269 --> 00:23:55,159
okay so I would like to show you the

391
00:23:55,159 --> 00:23:58,009
last thing the recovery can also so I

392
00:23:58,009 --> 00:24:02,209
will just overwrite the readwrite

393
00:24:02,209 --> 00:24:11,599
sections in order to to force the

394
00:24:11,599 --> 00:24:15,950
recovery mode and as we see these

395
00:24:15,950 --> 00:24:20,329
regions are still readable as we will

396
00:24:20,329 --> 00:24:27,759
see of course and there we go

397
00:24:27,759 --> 00:24:43,669
already verifying and let's reboot the

398
00:24:43,669 --> 00:24:45,609
system we will reboot itself two times

399
00:24:45,609 --> 00:24:49,339
because it will find that one first

400
00:24:49,339 --> 00:24:51,259
partition is untrusted second partition

401
00:24:51,259 --> 00:24:54,440
is untrusted and now and the third boot

402
00:24:54,440 --> 00:24:59,749
I can go to recover it and there you go

403
00:24:59,749 --> 00:25:02,749
you have a recovery mode a flush room

404
00:25:02,749 --> 00:25:08,479
here we have CBMM to check the logs GPG

405
00:25:08,479 --> 00:25:11,859
for importing some keys or verifying

406
00:25:11,859 --> 00:25:18,679
signatures we have done a dhcp also to

407
00:25:18,679 --> 00:25:20,929
get network configurations that are we

408
00:25:20,929 --> 00:25:23,719
have various ways to download the femur

409
00:25:23,719 --> 00:25:25,820
and flush it back to bring the pattern

410
00:25:25,820 --> 00:25:30,259
to the trusted state ok so that would

411
00:25:30,259 --> 00:25:35,139
that would be it as for the demo and

412
00:25:43,010 --> 00:25:45,919
and I will thank you for your attention

413
00:25:45,919 --> 00:25:51,440
and you have any questions I missed one

414
00:25:51,440 --> 00:25:54,620
slide the future improvements sorry

415
00:25:54,620 --> 00:25:58,179
so there is still some things to do like

416
00:25:58,179 --> 00:26:00,260
implementing the environment good block

417
00:26:00,260 --> 00:26:07,660
for the AMD 16h family I still need to

418
00:26:07,660 --> 00:26:11,330
prepare some generic pilot to to modify

419
00:26:11,330 --> 00:26:16,070
butoden MVPD like in the proprietary ufi

420
00:26:16,070 --> 00:26:20,360
bios's also for user convenience port

421
00:26:20,360 --> 00:26:24,220
all the simple runtime options to VPD

422
00:26:24,220 --> 00:26:27,110
there still to do work with maintaining

423
00:26:27,110 --> 00:26:29,510
the chain of trust until the OS because

424
00:26:29,510 --> 00:26:31,090
there is no country in own

425
00:26:31,090 --> 00:26:34,580
implementation that would prolong the

426
00:26:34,580 --> 00:26:37,669
chain of trust with TPM 2.0 from the

427
00:26:37,669 --> 00:26:39,740
bootloader like grab to the terminal

428
00:26:39,740 --> 00:26:42,559
there is of course the atrocity up but

429
00:26:42,559 --> 00:26:46,010
it only supports tip-in 1.2 and there i

430
00:26:46,010 --> 00:26:48,500
fuse issues with the TPM point-to-point

431
00:26:48,500 --> 00:26:52,250
boot for example all the locks for now

432
00:26:52,250 --> 00:26:54,950
are starting the TCPA table which is a

433
00:26:54,950 --> 00:26:58,070
table that points to a memory that

434
00:26:58,070 --> 00:27:00,710
contains log area for tipping one point

435
00:27:00,710 --> 00:27:04,549
to the CBMM would since he can print TCP

436
00:27:04,549 --> 00:27:08,809
a logs but not TPM to locks and I think

437
00:27:08,809 --> 00:27:12,200
it's it is a bug but the virus just

438
00:27:12,200 --> 00:27:14,360
starts writing TPM to locks and the

439
00:27:14,360 --> 00:27:16,340
start of the region regardless there are

440
00:27:16,340 --> 00:27:20,990
any entries present there or not and the

441
00:27:20,990 --> 00:27:23,179
TPM to look locks have also different

442
00:27:23,179 --> 00:27:27,140
format than those from TPM 1.2 so

443
00:27:27,140 --> 00:27:29,090
coreboot should implement a correct

444
00:27:29,090 --> 00:27:32,919
format for that TPM products also and I

445
00:27:32,919 --> 00:27:35,870
started to do some work on automatic

446
00:27:35,870 --> 00:27:38,299
disk encryption decryption is Japan 2.0

447
00:27:38,299 --> 00:27:42,169
but for now I have run into a bunch of

448
00:27:42,169 --> 00:27:44,510
issues like I have used

449
00:27:44,510 --> 00:27:48,650
implementation based on clevis framework

450
00:27:48,650 --> 00:27:55,400
for a station and storing secrets and it

451
00:27:55,400 --> 00:27:56,750
looks like there is some

452
00:27:56,750 --> 00:27:59,240
race in the Dracut that does not allow

453
00:27:59,240 --> 00:28:02,150
to poke the clave ease into the password

454
00:28:02,150 --> 00:28:21,260
prompt said so now question answers I'm

455
00:28:21,260 --> 00:28:24,230
just a bit confused of the usage of V

456
00:28:24,230 --> 00:28:28,100
boot instead of just like finalizing the

457
00:28:28,100 --> 00:28:30,470
initialization of the chipset why is it

458
00:28:30,470 --> 00:28:33,140
needed to actually learn people does not

459
00:28:33,140 --> 00:28:35,660
do the chipset in association it is only

460
00:28:35,660 --> 00:28:40,100
a software that provides cryptographic

461
00:28:40,100 --> 00:28:44,150
operations and integrates into a stack

462
00:28:44,150 --> 00:28:47,600
that allows verify each executed

463
00:28:47,600 --> 00:28:51,080
component before it is executed so it's

464
00:28:51,080 --> 00:28:54,740
like verifies the femur that is loaded

465
00:28:54,740 --> 00:28:57,380
from the readwrite partitions it is of

466
00:28:57,380 --> 00:28:59,930
course digitally signed by the keys that

467
00:28:59,930 --> 00:29:01,850
are generated also by people to the

468
00:29:01,850 --> 00:29:06,040
libraries right thank you very much

469
00:29:06,040 --> 00:29:11,530
[Applause]

470
00:29:11,530 --> 00:29:13,149
[Music]

471
00:29:13,149 --> 00:29:15,209
you

