1
00:00:03,190 --> 00:00:06,259
[Music]

2
00:00:07,429 --> 00:00:10,800
today's a great day it's actually it's a

3
00:00:10,800 --> 00:00:14,130
birthday and a great piece of software

4
00:00:14,130 --> 00:00:17,940
that's been yeah that's that that's been

5
00:00:17,940 --> 00:00:20,970
created last year is Turing exactly one

6
00:00:20,970 --> 00:00:24,869
year today and this next talk is about

7
00:00:24,869 --> 00:00:25,590
that

8
00:00:25,590 --> 00:00:28,529
so give a big round of applause for Ravi

9
00:00:28,529 --> 00:00:34,739
and yeah when all right good morning

10
00:00:34,739 --> 00:00:37,739
everyone it's great to start off the

11
00:00:37,739 --> 00:00:40,800
second day of OSF C 2019 with a birthday

12
00:00:40,800 --> 00:00:43,290
party right so whose birthday it is

13
00:00:43,290 --> 00:00:45,600
it is a slim boot loader firmware that

14
00:00:45,600 --> 00:00:48,420
intel created and you know what just

15
00:00:48,420 --> 00:00:51,360
last year right so my name is yawen I'm

16
00:00:51,360 --> 00:00:53,550
a former engineer from the

17
00:00:53,550 --> 00:00:55,620
internet-of-things group from Intel and

18
00:00:55,620 --> 00:00:57,570
together with my colleague Ravi

19
00:00:57,570 --> 00:00:59,039
Rangarajan we're gonna share with you

20
00:00:59,039 --> 00:01:01,469
what we have learned what's coming next

21
00:01:01,469 --> 00:01:04,199
and also the key learnings from simple

22
00:01:04,199 --> 00:01:07,760
loader so today I'm gonna share with you

23
00:01:07,760 --> 00:01:10,439
again it a little bit introduction a

24
00:01:10,439 --> 00:01:12,060
recap just in case you wouldn't dare

25
00:01:12,060 --> 00:01:14,189
last year about slim boot loader what it

26
00:01:14,189 --> 00:01:16,290
is and also the updates that we have

27
00:01:16,290 --> 00:01:18,869
done what we have learned what's coming

28
00:01:18,869 --> 00:01:24,630
and a call to action alright so last

29
00:01:24,630 --> 00:01:28,259
year o SFC 2019 in oil engine Germany so

30
00:01:28,259 --> 00:01:30,630
I said during the lightening talk of a

31
00:01:30,630 --> 00:01:32,729
slim boot loader I introduced to the

32
00:01:32,729 --> 00:01:36,509
world a bustling loader is value and the

33
00:01:36,509 --> 00:01:39,150
Intel team were there we even had a demo

34
00:01:39,150 --> 00:01:41,340
working on simple loader on one of the

35
00:01:41,340 --> 00:01:43,950
Apple Olek systems so that was last year

36
00:01:43,950 --> 00:01:46,770
and if you're interested in that top the

37
00:01:46,770 --> 00:01:49,680
slides are available from OSF C 2018 so

38
00:01:49,680 --> 00:01:51,000
this light should be shed to you and

39
00:01:51,000 --> 00:01:54,750
with links provided alright so first

40
00:01:54,750 --> 00:01:58,439
things first what has changed we have a

41
00:01:58,439 --> 00:02:03,810
new logo right so anyone can guess what

42
00:02:03,810 --> 00:02:07,520
animal is that it is a

43
00:02:07,520 --> 00:02:11,060
III humming but yeah so it's a humming

44
00:02:11,060 --> 00:02:13,520
but we chose the humming but because it

45
00:02:13,520 --> 00:02:15,700
represents a simple order the principle

46
00:02:15,700 --> 00:02:19,340
architectures it is small it is agile

47
00:02:19,340 --> 00:02:22,489
and it's sweet right so it represents I

48
00:02:22,489 --> 00:02:24,739
will product the constant bootloader and

49
00:02:24,739 --> 00:02:26,360
we have variants of colors and

50
00:02:26,360 --> 00:02:28,340
backgrounds that comes if yourself and

51
00:02:28,340 --> 00:02:30,230
if I'm not mistaken

52
00:02:30,230 --> 00:02:32,060
let's pick the stickers of slim below

53
00:02:32,060 --> 00:02:33,650
the ass P I was like so feel free to

54
00:02:33,650 --> 00:02:37,250
take them all right so let me do a quick

55
00:02:37,250 --> 00:02:39,860
recap of what slim border is again so

56
00:02:39,860 --> 00:02:42,350
before we have slim boot loader in the

57
00:02:42,350 --> 00:02:44,540
internet of things use cases we have

58
00:02:44,540 --> 00:02:47,480
from Intel site we have customers with

59
00:02:47,480 --> 00:02:50,239
very wide range of use cases and also

60
00:02:50,239 --> 00:02:52,940
requirements and back then we found that

61
00:02:52,940 --> 00:02:56,299
there's actually not one boot from where

62
00:02:56,299 --> 00:02:58,069
that fits all these requirements what

63
00:02:58,069 --> 00:03:01,310
are them ease of implementation how easy

64
00:03:01,310 --> 00:03:03,799
it is to put a boot from wear to the

65
00:03:03,799 --> 00:03:05,170
internet-of-things

66
00:03:05,170 --> 00:03:08,150
application and use cases security is a

67
00:03:08,150 --> 00:03:08,750
concern

68
00:03:08,750 --> 00:03:12,350
how safe it is and how extensible it is

69
00:03:12,350 --> 00:03:15,769
can you put different OSS on features at

70
00:03:15,769 --> 00:03:18,140
once features and also scaling across

71
00:03:18,140 --> 00:03:19,790
market segments when we talk about

72
00:03:19,790 --> 00:03:21,500
Internet of Things there are so many

73
00:03:21,500 --> 00:03:23,480
market segments from industrial

74
00:03:23,480 --> 00:03:28,010
automotive and so on also licensing is a

75
00:03:28,010 --> 00:03:30,380
concern we need to have an open source

76
00:03:30,380 --> 00:03:32,209
solution that is permissive to our

77
00:03:32,209 --> 00:03:34,070
customers and also ecosystem partners

78
00:03:34,070 --> 00:03:37,069
and lastly he leverages the Intel

79
00:03:37,069 --> 00:03:39,079
firmware support packages so that the

80
00:03:39,079 --> 00:03:41,299
adoption of new SOC and platforms is

81
00:03:41,299 --> 00:03:43,970
easy so since we have launched slim

82
00:03:43,970 --> 00:03:46,069
bootloader and get a feedback from

83
00:03:46,069 --> 00:03:48,380
customers it is getting a lot of

84
00:03:48,380 --> 00:03:50,630
attention and also from the customers

85
00:03:50,630 --> 00:03:52,190
from partners and also from the

86
00:03:52,190 --> 00:03:56,180
community so what is the value

87
00:03:56,180 --> 00:03:57,799
proposition of slim bootloader

88
00:03:57,799 --> 00:04:00,560
firstly as I mentioned slim boot loader

89
00:04:00,560 --> 00:04:04,069
is designed to enable new experiences so

90
00:04:04,069 --> 00:04:06,260
that it is for the customer centric

91
00:04:06,260 --> 00:04:08,750
innovation and can be used across wide

92
00:04:08,750 --> 00:04:11,600
variety of use cases so the four pillars

93
00:04:11,600 --> 00:04:13,790
of simulator is that we can do first

94
00:04:13,790 --> 00:04:17,478
boot it was fast in Intel with some

95
00:04:17,478 --> 00:04:19,699
optimization we can achieve sub second

96
00:04:19,699 --> 00:04:21,339
boot from reset vector

97
00:04:21,339 --> 00:04:25,150
enough security is integrated by default

98
00:04:25,150 --> 00:04:27,040
slim bootloader comes with verified

99
00:04:27,040 --> 00:04:29,260
would measure good and the firmware

100
00:04:29,260 --> 00:04:32,919
update payload also can perform a from a

101
00:04:32,919 --> 00:04:36,940
a bit security for you and thirdly the

102
00:04:36,940 --> 00:04:39,460
permissive licensing so slim builder

103
00:04:39,460 --> 00:04:41,770
comes with BSD plus patrons license and

104
00:04:41,770 --> 00:04:44,199
we found that it allows our customers

105
00:04:44,199 --> 00:04:46,419
and partners to add on their value added

106
00:04:46,419 --> 00:04:49,449
features and a propriety customization

107
00:04:49,449 --> 00:04:53,020
and lastly it is ecosystem wide support

108
00:04:53,020 --> 00:04:55,690
so we enable for customisation and

109
00:04:55,690 --> 00:04:57,790
maintenance easily with slim boot loader

110
00:04:57,790 --> 00:05:01,330
so with this SB L can be used in many

111
00:05:01,330 --> 00:05:04,990
use cases because of its features it is

112
00:05:04,990 --> 00:05:07,510
very highly adaptable I split Mashable

113
00:05:07,510 --> 00:05:10,750
and for now is peyote focused but we see

114
00:05:10,750 --> 00:05:12,220
no problem if you can scale the other

115
00:05:12,220 --> 00:05:13,780
market segments as well like I've

116
00:05:13,780 --> 00:05:16,960
mentioned industrial automotive smart

117
00:05:16,960 --> 00:05:21,190
cameras this is about anything so when

118
00:05:21,190 --> 00:05:23,620
you download slim boot loader this is

119
00:05:23,620 --> 00:05:26,500
what you get so the boxes in blue are

120
00:05:26,500 --> 00:05:28,120
the one that comes default with slim

121
00:05:28,120 --> 00:05:30,100
boot loader firstly it comes to four

122
00:05:30,100 --> 00:05:32,139
with two different pillows the OS loader

123
00:05:32,139 --> 00:05:34,120
and a firmware update payload on the top

124
00:05:34,120 --> 00:05:37,060
and it has speed optimization hooks that

125
00:05:37,060 --> 00:05:38,950
allows you to perform some optimization

126
00:05:38,950 --> 00:05:41,560
from an update allows you to have a

127
00:05:41,560 --> 00:05:43,380
failsafe for me update as a backup

128
00:05:43,380 --> 00:05:45,760
redundancy copy are integrated with it

129
00:05:45,760 --> 00:05:49,479
and integrated with verify both measured

130
00:05:49,479 --> 00:05:52,270
boot and of course it confused the inter

131
00:05:52,270 --> 00:05:55,570
FSP silicon initialization block and on

132
00:05:55,570 --> 00:05:57,460
the right side as you can see it also

133
00:05:57,460 --> 00:05:58,840
comes before default with a

134
00:05:58,840 --> 00:06:01,960
configuration editor tool so in the top

135
00:06:01,960 --> 00:06:03,940
today which I also be sharing I will

136
00:06:03,940 --> 00:06:05,830
show a quick demo of what these two does

137
00:06:05,830 --> 00:06:08,169
basically it allows our customer or

138
00:06:08,169 --> 00:06:10,690
partners Orion partners to customize

139
00:06:10,690 --> 00:06:12,490
slim boot without even looking at the

140
00:06:12,490 --> 00:06:16,389
source code so if a customer or partners

141
00:06:16,389 --> 00:06:18,120
wants to change to a different payload

142
00:06:18,120 --> 00:06:21,789
UEFI payload for example or you both for

143
00:06:21,789 --> 00:06:23,889
anything so they can easily plug in into

144
00:06:23,889 --> 00:06:25,990
slim boot order without any problems

145
00:06:25,990 --> 00:06:28,810
right and simple order is supported

146
00:06:28,810 --> 00:06:30,159
across all the intel architecture

147
00:06:30,159 --> 00:06:35,010
platform from adam all the way to see on

148
00:06:35,280 --> 00:06:37,450
so since we have launched slim

149
00:06:37,450 --> 00:06:39,639
bootloader a year ago we have engaged

150
00:06:39,639 --> 00:06:41,110
with our different ecosystem partners

151
00:06:41,110 --> 00:06:43,330
and this is the list and this partners

152
00:06:43,330 --> 00:06:45,700
provide customisation extensions of

153
00:06:45,700 --> 00:06:47,889
features and also maintenance services

154
00:06:47,889 --> 00:06:50,139
and I actually see some of them are here

155
00:06:50,139 --> 00:06:53,080
in this Congress and I'd like to thank

156
00:06:53,080 --> 00:06:56,169
them on behalf of Intel all right so

157
00:06:56,169 --> 00:06:57,850
right now I'm gonna pass the time over

158
00:06:57,850 --> 00:07:00,040
to Ravi and he's gonna share a few what

159
00:07:00,040 --> 00:07:01,510
we have learned from simple order and

160
00:07:01,510 --> 00:07:07,030
what's next Roddy thanks Yavin thanks

161
00:07:07,030 --> 00:07:08,050
for the recap as well as the

162
00:07:08,050 --> 00:07:09,940
introduction my name is Ravi Rangarajan

163
00:07:09,940 --> 00:07:12,300
I'm a former architect for Intel

164
00:07:12,300 --> 00:07:14,290
specifically I work for a group call I

165
00:07:14,290 --> 00:07:16,750
would eg and as Yavin mentioned we

166
00:07:16,750 --> 00:07:19,540
created a slim bootloader last year to

167
00:07:19,540 --> 00:07:22,240
cater to some of our I would eg specific

168
00:07:22,240 --> 00:07:26,500
use cases so the next few slides I would

169
00:07:26,500 --> 00:07:28,150
like to share with you the progress we

170
00:07:28,150 --> 00:07:30,460
have made so far since last launch last

171
00:07:30,460 --> 00:07:32,860
year what are our key learnings as well

172
00:07:32,860 --> 00:07:34,389
as what's next

173
00:07:34,389 --> 00:07:37,630
firstly boot order so last year when we

174
00:07:37,630 --> 00:07:43,390
launched am i pressing it wrong or

175
00:07:43,390 --> 00:07:46,060
something okay so last year when we

176
00:07:46,060 --> 00:07:47,770
launched in bootloader we actually had

177
00:07:47,770 --> 00:07:49,090
support for two different platforms

178
00:07:49,090 --> 00:07:51,130
right so the first one was the Apollo

179
00:07:51,130 --> 00:07:53,229
Lake Association and we support at a

180
00:07:53,229 --> 00:07:54,760
four different boards so three of them

181
00:07:54,760 --> 00:07:57,910
are from there from our TG Liefeld

182
00:07:57,910 --> 00:08:00,550
mineral Hill an oxbow Hill and we also

183
00:08:00,550 --> 00:08:02,140
supported our virtual platform

184
00:08:02,140 --> 00:08:03,700
originally inter platforms are put it on

185
00:08:03,700 --> 00:08:07,150
top of key umu since then our team has

186
00:08:07,150 --> 00:08:09,550
added support for these two new silicon

187
00:08:09,550 --> 00:08:13,539
coffee leg refresh and we support two

188
00:08:13,539 --> 00:08:15,850
different flavors yes one hitch and the

189
00:08:15,850 --> 00:08:17,169
Intel CR these are the reference

190
00:08:17,169 --> 00:08:19,450
platforms for those we also support

191
00:08:19,450 --> 00:08:22,389
whiskey Lake and as usual we support

192
00:08:22,389 --> 00:08:24,460
until CRB with whiskey Lake but on top

193
00:08:24,460 --> 00:08:28,930
of that we also support up extreme boat

194
00:08:28,930 --> 00:08:33,940
from AER so yesterday there were a few

195
00:08:33,940 --> 00:08:37,320
mentions of up square board from a yawn

196
00:08:37,320 --> 00:08:40,779
so up extreme wood is the next iteration

197
00:08:40,779 --> 00:08:43,179
of that it is with whiskey Lake I don't

198
00:08:43,179 --> 00:08:45,459
think it is still available for purchase

199
00:08:45,459 --> 00:08:47,440
yet but

200
00:08:47,440 --> 00:08:49,090
you can pre-order them if you are

201
00:08:49,090 --> 00:08:50,980
interested this is a publicly available

202
00:08:50,980 --> 00:08:55,150
hardware it's kind of semi open so

203
00:08:55,150 --> 00:08:57,640
anybody can purchase it and it's not

204
00:08:57,640 --> 00:08:59,830
locked so good god is not enabled so

205
00:08:59,830 --> 00:09:03,520
it's pretty suitable for developing your

206
00:09:03,520 --> 00:09:04,870
own form but if you want to experiment

207
00:09:04,870 --> 00:09:06,100
if you want to hack the firmware so

208
00:09:06,100 --> 00:09:09,940
these bodies are available so I would

209
00:09:09,940 --> 00:09:12,210
like to make another note here so

210
00:09:12,210 --> 00:09:15,760
specifically from I would DG based on

211
00:09:15,760 --> 00:09:18,280
the market responses we have seen from

212
00:09:18,280 --> 00:09:21,490
our customers from community our plan of

213
00:09:21,490 --> 00:09:23,770
record our intent is to support slim

214
00:09:23,770 --> 00:09:27,070
bootloader across all fewer platforms

215
00:09:27,070 --> 00:09:30,520
for IOT G as yawen mentioned covering

216
00:09:30,520 --> 00:09:33,880
from atom core and Xeon so when I talk

217
00:09:33,880 --> 00:09:35,500
about Zr and there is an exception so we

218
00:09:35,500 --> 00:09:37,450
talked about a xeon d the density

219
00:09:37,450 --> 00:09:39,280
addition skews and not the SP the

220
00:09:39,280 --> 00:09:41,320
scalable platform dual socket or multi

221
00:09:41,320 --> 00:09:44,080
socket platform so slim bootloader is PR

222
00:09:44,080 --> 00:09:49,630
across I would DG roadmap so as for the

223
00:09:49,630 --> 00:09:52,960
major new features we added support for

224
00:09:52,960 --> 00:09:55,870
boot dot on a jig so this is a critical

225
00:09:55,870 --> 00:09:58,330
security feature it is an optional

226
00:09:58,330 --> 00:10:00,160
feature I know there are

227
00:10:00,160 --> 00:10:02,740
it's a polarizing topic but it's a boot

228
00:10:02,740 --> 00:10:05,230
cut what it does is it actually verifies

229
00:10:05,230 --> 00:10:08,230
your initial boot block without

230
00:10:08,230 --> 00:10:10,690
requiring you to have any other special

231
00:10:10,690 --> 00:10:14,290
Hardware protection for your boot block

232
00:10:14,290 --> 00:10:16,270
some people like it some people don't

233
00:10:16,270 --> 00:10:18,850
like it that much but it is available it

234
00:10:18,850 --> 00:10:21,130
has been enabled as far as enabling we

235
00:10:21,130 --> 00:10:24,700
actually support creating a necessary

236
00:10:24,700 --> 00:10:26,650
data structures so that there are data

237
00:10:26,650 --> 00:10:29,020
structures for creating a manifest of

238
00:10:29,020 --> 00:10:31,750
the boot block which an authenticated

239
00:10:31,750 --> 00:10:35,100
code module from Intel will verify and

240
00:10:35,100 --> 00:10:37,360
only if the verification is successful

241
00:10:37,360 --> 00:10:39,370
it will allow it to boot so there are

242
00:10:39,370 --> 00:10:41,920
the infrastructure for enabling boot

243
00:10:41,920 --> 00:10:44,650
guard is in place in slim bootloader it

244
00:10:44,650 --> 00:10:47,200
has been up streamed as well but as

245
00:10:47,200 --> 00:10:49,120
usual there may be some binary blobs

246
00:10:49,120 --> 00:10:51,190
that you may have to get it directly

247
00:10:51,190 --> 00:10:54,160
from Intel remember that leg support has

248
00:10:54,160 --> 00:10:57,790
been added discreet TPM and firmware TPM

249
00:10:57,790 --> 00:10:59,530
the PTT support has been added as well

250
00:10:59,530 --> 00:11:01,290
we were able to test

251
00:11:01,290 --> 00:11:04,259
deep discrete TPM on both us LPC bus as

252
00:11:04,259 --> 00:11:06,980
well as the spy debugging capabilities

253
00:11:06,980 --> 00:11:09,529
yesterday there was a whole talk on

254
00:11:09,529 --> 00:11:13,680
debugging that the focus these days is

255
00:11:13,680 --> 00:11:15,899
towards close chassis debug right so

256
00:11:15,899 --> 00:11:18,149
when we are debugging within Intel

257
00:11:18,149 --> 00:11:24,389
within any OAM premises we have all the

258
00:11:24,389 --> 00:11:25,920
tools we need we have the attack

259
00:11:25,920 --> 00:11:28,440
debuggers we can open the board we can

260
00:11:28,440 --> 00:11:30,569
even connect a logic analyzer and so on

261
00:11:30,569 --> 00:11:32,459
but how do you debug a production system

262
00:11:32,459 --> 00:11:34,920
how do you back a system that is

263
00:11:34,920 --> 00:11:37,470
returned from the field so close to

264
00:11:37,470 --> 00:11:40,050
chassis debug is gaining attention and

265
00:11:40,050 --> 00:11:41,850
the Intel has enabled this technology

266
00:11:41,850 --> 00:11:44,699
USB debugging DCI Overby and DCI USB

267
00:11:44,699 --> 00:11:47,220
Obie's out-of-band and USB is through

268
00:11:47,220 --> 00:11:51,060
USB 3 we have enabled these debugging

269
00:11:51,060 --> 00:11:54,060
capabilities in interesting boot order

270
00:11:54,060 --> 00:11:56,610
and on top of that one of the

271
00:11:56,610 --> 00:11:58,649
requirements that we often hear from our

272
00:11:58,649 --> 00:12:01,800
customers and community is the ability

273
00:12:01,800 --> 00:12:03,810
to do source-level debugger right

274
00:12:03,810 --> 00:12:06,569
I don't have J dot debugger expense to

275
00:12:06,569 --> 00:12:08,670
you and I don't want to my boot does not

276
00:12:08,670 --> 00:12:11,370
have a date at port as well so how do ID

277
00:12:11,370 --> 00:12:14,360
bug so you can do social debugging

278
00:12:14,360 --> 00:12:17,610
through later in the slide I'm going to

279
00:12:17,610 --> 00:12:19,500
talk about the leverage from UDK to and

280
00:12:19,500 --> 00:12:20,940
this is a great example of that

281
00:12:20,940 --> 00:12:26,660
so irrigate to project has UDK debugger

282
00:12:26,839 --> 00:12:30,240
module that you can use to enable social

283
00:12:30,240 --> 00:12:32,670
debugging we ported that over to slim

284
00:12:32,670 --> 00:12:35,370
boot loader and it has been verified and

285
00:12:35,370 --> 00:12:38,370
working file if you stitching mechanism

286
00:12:38,370 --> 00:12:41,040
so this is another a bit of a

287
00:12:41,040 --> 00:12:43,500
contentious topic in this kind of

288
00:12:43,500 --> 00:12:46,410
conferences but so we support two

289
00:12:46,410 --> 00:12:48,689
different types of switching mechanism

290
00:12:48,689 --> 00:12:50,880
right so one let's say you get a

291
00:12:50,880 --> 00:12:53,970
reference board from Intel and you want

292
00:12:53,970 --> 00:12:55,980
to use you want to try slim boot loader

293
00:12:55,980 --> 00:12:58,170
I don't have the rest of the components

294
00:12:58,170 --> 00:13:00,480
that make up the EFI by the way for

295
00:13:00,480 --> 00:13:01,980
those who don't know what if he is it's

296
00:13:01,980 --> 00:13:04,230
a intel firmware image so it's not just

297
00:13:04,230 --> 00:13:07,769
of biiss binary it is made up of a few

298
00:13:07,769 --> 00:13:09,480
other firmware ingredients as well like

299
00:13:09,480 --> 00:13:11,480
CSM a binary and a few other blobs and

300
00:13:11,480 --> 00:13:14,160
some descriptor settings and things like

301
00:13:14,160 --> 00:13:14,730
that

302
00:13:14,730 --> 00:13:18,600
so you get a reference board and you can

303
00:13:18,600 --> 00:13:20,220
download the slim bootloader directly

304
00:13:20,220 --> 00:13:21,750
from the open source github and I am

305
00:13:21,750 --> 00:13:23,850
able to build and everything so I want

306
00:13:23,850 --> 00:13:25,500
to flash so where do I get the rest of

307
00:13:25,500 --> 00:13:33,060
the rest of the efi components and and I

308
00:13:33,060 --> 00:13:34,980
don't want to go through all these hoops

309
00:13:34,980 --> 00:13:37,470
to get the referring in that case we

310
00:13:37,470 --> 00:13:39,360
actually provide a mechanism for you to

311
00:13:39,360 --> 00:13:42,420
replace just the bias region with the

312
00:13:42,420 --> 00:13:45,600
slim boot or the binary you built and on

313
00:13:45,600 --> 00:13:47,940
top of that you like it and then you

314
00:13:47,940 --> 00:13:50,790
want to go full fledged on that in at

315
00:13:50,790 --> 00:13:53,400
that point you actually contact Intel to

316
00:13:53,400 --> 00:13:56,670
get the kick if he's teaching it it

317
00:13:56,670 --> 00:13:59,630
includes certain tools like fitzy and

318
00:13:59,630 --> 00:14:02,430
the other binary block that you require

319
00:14:02,430 --> 00:14:04,440
to create a Fe image so you you got

320
00:14:04,440 --> 00:14:06,960
everything and then in that case we have

321
00:14:06,960 --> 00:14:09,840
provide a script that actually takes all

322
00:14:09,840 --> 00:14:11,760
these ingredients and create some easy

323
00:14:11,760 --> 00:14:15,540
image for you the goal for all these is

324
00:14:15,540 --> 00:14:19,050
to make the job of creating a nifty

325
00:14:19,050 --> 00:14:22,710
easier right so and if possibly even

326
00:14:22,710 --> 00:14:25,380
automate if you have CI system and

327
00:14:25,380 --> 00:14:25,890
things like that

328
00:14:25,890 --> 00:14:30,510
everything should be automatable so new

329
00:14:30,510 --> 00:14:33,420
payload support so one of the features

330
00:14:33,420 --> 00:14:36,590
that we loud about coreboot was the

331
00:14:36,590 --> 00:14:38,490
flexibility to support different

332
00:14:38,490 --> 00:14:41,820
payloads and when we when we did a slim

333
00:14:41,820 --> 00:14:43,890
boot loader we actually carried that

334
00:14:43,890 --> 00:14:48,000
idea over and so we when we launched in

335
00:14:48,000 --> 00:14:49,650
boot over last year so we had our one

336
00:14:49,650 --> 00:14:51,990
default payload called the OS loader and

337
00:14:51,990 --> 00:14:54,450
we had a firmware update fail or at the

338
00:14:54,450 --> 00:14:55,800
time we mentioned that there is a

339
00:14:55,800 --> 00:14:59,090
possibility of adding more support and

340
00:14:59,090 --> 00:15:02,280
we went ahead and submitted a code

341
00:15:02,280 --> 00:15:04,320
review to you boot to build you would as

342
00:15:04,320 --> 00:15:06,000
a payload firstly boot loader it is

343
00:15:06,000 --> 00:15:08,730
currently under review and you just

344
00:15:08,730 --> 00:15:10,200
updated our documentation yesterday I

345
00:15:10,200 --> 00:15:11,760
don't know if the pull request was

346
00:15:11,760 --> 00:15:14,610
merged already and then on top of that

347
00:15:14,610 --> 00:15:19,610
we had a special branch of efi payload

348
00:15:19,610 --> 00:15:22,170
because the open-source version of few

349
00:15:22,170 --> 00:15:25,290
EFI pillowed supported core boot and it

350
00:15:25,290 --> 00:15:27,660
depended on certain data structures

351
00:15:27,660 --> 00:15:28,320
produced by

352
00:15:28,320 --> 00:15:30,540
core board so we went ahead and added

353
00:15:30,540 --> 00:15:32,610
support for a slim boot loader as well

354
00:15:32,610 --> 00:15:35,610
and pillowed has been unified and as you

355
00:15:35,610 --> 00:15:36,960
can see that there's a link here you can

356
00:15:36,960 --> 00:15:38,730
go downloaded it today and you should be

357
00:15:38,730 --> 00:15:41,480
able to build and try the high payload

358
00:15:41,480 --> 00:15:44,730
Linux boot I believe the next topic

359
00:15:44,730 --> 00:15:48,030
after this session is about a Linux boot

360
00:15:48,030 --> 00:15:51,210
and Ron and/or not my colleagues Lynch

361
00:15:51,210 --> 00:15:53,060
Shankar going to talk about that and I

362
00:15:53,060 --> 00:15:55,320
believe they're going to show a demo as

363
00:15:55,320 --> 00:15:57,840
well with boot loader on you good yeah

364
00:15:57,840 --> 00:16:04,020
so please stick around and and again so

365
00:16:04,020 --> 00:16:07,230
the concept is payload is modular and

366
00:16:07,230 --> 00:16:09,740
you can extend it to anything you want

367
00:16:09,740 --> 00:16:12,780
it's not limiting for example if I want

368
00:16:12,780 --> 00:16:14,310
to develop a diagnostic payload it is

369
00:16:14,310 --> 00:16:16,620
possible one of the things that we are

370
00:16:16,620 --> 00:16:18,540
exploring within Intel within our group

371
00:16:18,540 --> 00:16:23,160
is to have something for functionally

372
00:16:23,160 --> 00:16:24,570
safe system so we are exploring a

373
00:16:24,570 --> 00:16:26,790
payload that goes and qualifies or

374
00:16:26,790 --> 00:16:28,320
certifies that the system has been

375
00:16:28,320 --> 00:16:31,710
initialized or expected and some

376
00:16:31,710 --> 00:16:34,020
tsunamis about 25 but it's kind of

377
00:16:34,020 --> 00:16:35,850
question checks the system has been

378
00:16:35,850 --> 00:16:38,040
initialized as expected and then

379
00:16:38,040 --> 00:16:39,840
qualifies the system for functional

380
00:16:39,840 --> 00:16:42,180
safety workloads so there are many

381
00:16:42,180 --> 00:16:43,890
possibilities like that and then we are

382
00:16:43,890 --> 00:16:45,800
we are actually looking at more ideas

383
00:16:45,800 --> 00:16:49,290
along those lines for more update just

384
00:16:49,290 --> 00:16:52,080
last year when we launched we supported

385
00:16:52,080 --> 00:16:55,020
update of the bias region alone we have

386
00:16:55,020 --> 00:16:57,330
added a mechanism to perform Emme region

387
00:16:57,330 --> 00:17:01,710
update as well I think it was system76

388
00:17:01,710 --> 00:17:04,680
thought yesterday they were they were

389
00:17:04,680 --> 00:17:06,329
actually showing interest in updating

390
00:17:06,329 --> 00:17:08,339
the ME region even if you have a

391
00:17:08,339 --> 00:17:11,189
skeletal version you Emme is a required

392
00:17:11,189 --> 00:17:13,980
component as part of the efi and

393
00:17:13,980 --> 00:17:16,829
updating a updating ami is a critical

394
00:17:16,829 --> 00:17:19,890
requirement again so require CSM update

395
00:17:19,890 --> 00:17:21,780
components from Intel the infrastructure

396
00:17:21,780 --> 00:17:23,459
is there you may need some certain

397
00:17:23,459 --> 00:17:24,660
components that you need to get from

398
00:17:24,660 --> 00:17:29,130
Intel to actually enable a feature key

399
00:17:29,130 --> 00:17:32,820
learning so we have had one year we

400
00:17:32,820 --> 00:17:34,380
added a few platform support we added a

401
00:17:34,380 --> 00:17:36,330
few features and as I mentioned going

402
00:17:36,330 --> 00:17:38,670
forward swing bootloader is plan of

403
00:17:38,670 --> 00:17:42,320
record for IOT G platforms

404
00:17:42,400 --> 00:17:47,000
moving forward in 2019 and 2020 I expect

405
00:17:47,000 --> 00:17:48,920
at least two or three more platforms to

406
00:17:48,920 --> 00:17:52,880
be added there and our or one of our

407
00:17:52,880 --> 00:17:54,860
goals is to build a community but I'm

408
00:17:54,860 --> 00:17:57,110
jumping ahead of myself but let's talk

409
00:17:57,110 --> 00:17:58,730
about the key learnings so what what did

410
00:17:58,730 --> 00:18:01,100
we learn from this effort what did we

411
00:18:01,100 --> 00:18:04,580
learn from doing same bootloader in

412
00:18:04,580 --> 00:18:07,070
general right so open sourcing helps

413
00:18:07,070 --> 00:18:09,170
with faster scaling hope everybody here

414
00:18:09,170 --> 00:18:10,940
understands the power of open sourcing

415
00:18:10,940 --> 00:18:13,910
and Ron mentioned however smart you may

416
00:18:13,910 --> 00:18:15,950
be you can be smarter than the rest of

417
00:18:15,950 --> 00:18:18,190
the world so open sourcing is critical

418
00:18:18,190 --> 00:18:21,560
and Michael also mention about the

419
00:18:21,560 --> 00:18:23,960
ability to dispatch or deliver a

420
00:18:23,960 --> 00:18:26,210
security fix much faster right so

421
00:18:26,210 --> 00:18:28,160
working from the tip of the tree and

422
00:18:28,160 --> 00:18:31,070
things like that it helps us if the

423
00:18:31,070 --> 00:18:32,420
house I would easy to deliver new

424
00:18:32,420 --> 00:18:34,550
features right so a bug fixes and

425
00:18:34,550 --> 00:18:37,100
everything it's kind of a real-time so

426
00:18:37,100 --> 00:18:39,110
once we submit a pull request everybody

427
00:18:39,110 --> 00:18:42,230
can see it and once it gets merged it is

428
00:18:42,230 --> 00:18:43,840
there and you can just go pull later

429
00:18:43,840 --> 00:18:46,520
roadmap consistency is critical so this

430
00:18:46,520 --> 00:18:47,840
is something that we have learned as

431
00:18:47,840 --> 00:18:50,240
well and I think again going back to the

432
00:18:50,240 --> 00:18:51,800
system sound six talkest today he

433
00:18:51,800 --> 00:18:53,660
mentioned that it's a really critical

434
00:18:53,660 --> 00:18:55,040
point that we keep hearing from our

435
00:18:55,040 --> 00:18:57,760
customers right once you do something

436
00:18:57,760 --> 00:18:59,810
and we have heard from our other

437
00:18:59,810 --> 00:19:01,850
customers also so when they make an

438
00:19:01,850 --> 00:19:04,730
investment they want to carry over that

439
00:19:04,730 --> 00:19:07,270
investment I don't want to do one

440
00:19:07,270 --> 00:19:09,650
bootloader implementation firmware

441
00:19:09,650 --> 00:19:12,140
implementation of this project and then

442
00:19:12,140 --> 00:19:14,480
I don't like the rod we are getting

443
00:19:14,480 --> 00:19:16,460
pulled on terminal legs right so I want

444
00:19:16,460 --> 00:19:18,530
to continue let's say I develop a driver

445
00:19:18,530 --> 00:19:21,800
you see simple example there were a few

446
00:19:21,800 --> 00:19:24,500
references to developing some kind of a

447
00:19:24,500 --> 00:19:27,590
network boot driver and certain other

448
00:19:27,590 --> 00:19:29,900
things yesterday so let's say I do go

449
00:19:29,900 --> 00:19:31,940
ahead and do a developer driver so I

450
00:19:31,940 --> 00:19:34,250
want to take that driver and then carry

451
00:19:34,250 --> 00:19:37,550
that over the next generation platforms

452
00:19:37,550 --> 00:19:39,110
as well I don't want to go redo things

453
00:19:39,110 --> 00:19:41,120
for every platform

454
00:19:41,120 --> 00:19:42,920
similarly my learning curve right so I

455
00:19:42,920 --> 00:19:46,250
spend time I'll own a particular code

456
00:19:46,250 --> 00:19:48,260
base and I'm quite comfortable with that

457
00:19:48,260 --> 00:19:51,020
I don't want to go do something else

458
00:19:51,020 --> 00:19:53,420
next year right so roadmap consistency

459
00:19:53,420 --> 00:19:54,870
is critical and in

460
00:19:54,870 --> 00:19:56,520
Munson need to be carried over so that's

461
00:19:56,520 --> 00:19:57,930
a message that we have received and

462
00:19:57,930 --> 00:19:59,700
that's why I keep repeating the same

463
00:19:59,700 --> 00:20:01,290
point over and over again that slim

464
00:20:01,290 --> 00:20:03,900
bootloader is PR for alwa TG platforms

465
00:20:03,900 --> 00:20:06,510
one round of a developer experience

466
00:20:06,510 --> 00:20:10,590
testing was done by ass the process was

467
00:20:10,590 --> 00:20:12,450
really interesting it was an eye-opening

468
00:20:12,450 --> 00:20:14,610
experience for me as well so what we did

469
00:20:14,610 --> 00:20:18,030
was we be a partner with an a consulting

470
00:20:18,030 --> 00:20:24,180
company and they hired a number of five

471
00:20:24,180 --> 00:20:27,570
or six former engineers engineers who

472
00:20:27,570 --> 00:20:29,880
had firmware development experience but

473
00:20:29,880 --> 00:20:32,220
not familiar with slim bootloader yet so

474
00:20:32,220 --> 00:20:36,650
we hired them as a experience testing

475
00:20:36,650 --> 00:20:40,260
project and we gave them a scenario

476
00:20:40,260 --> 00:20:41,940
right so the scenario was assume you are

477
00:20:41,940 --> 00:20:45,570
firmware developer for company X and you

478
00:20:45,570 --> 00:20:48,150
are a tasked with developing fast

479
00:20:48,150 --> 00:20:51,300
booting firmware for our upcoming

480
00:20:51,300 --> 00:20:54,210
platform you hear that there is a new

481
00:20:54,210 --> 00:20:56,040
project called slim bootloader that is

482
00:20:56,040 --> 00:20:59,600
open source go explore that so the the

483
00:20:59,600 --> 00:21:02,370
time duration given was two hours or

484
00:21:02,370 --> 00:21:04,110
three hours I don't recollect exactly

485
00:21:04,110 --> 00:21:06,809
and then we track to where they stumble

486
00:21:06,809 --> 00:21:08,580
and where they had difficulty finding

487
00:21:08,580 --> 00:21:12,690
information and they explained the the

488
00:21:12,690 --> 00:21:14,670
learning for us is good documentation is

489
00:21:14,670 --> 00:21:16,890
a must we went ahead and updated the

490
00:21:16,890 --> 00:21:19,770
documentation after that exercise and we

491
00:21:19,770 --> 00:21:21,480
plan to do a couple of more rounds of

492
00:21:21,480 --> 00:21:24,600
the same kind of experiments in the next

493
00:21:24,600 --> 00:21:28,200
one year out of box experience so this

494
00:21:28,200 --> 00:21:29,820
is critical as well so as you all know

495
00:21:29,820 --> 00:21:32,220
the amount of a developer pool available

496
00:21:32,220 --> 00:21:35,130
for former development is low relative

497
00:21:35,130 --> 00:21:36,990
to for example the amount of kernel

498
00:21:36,990 --> 00:21:38,490
developers you will find for Linux right

499
00:21:38,490 --> 00:21:41,309
so so how do i how do we attract more

500
00:21:41,309 --> 00:21:42,570
people right so the out of box

501
00:21:42,570 --> 00:21:45,300
experience comes it becomes really

502
00:21:45,300 --> 00:21:47,130
important so when I provide a reference

503
00:21:47,130 --> 00:21:48,900
implementation and I say here is a

504
00:21:48,900 --> 00:21:50,910
documentation here is a board this is

505
00:21:50,910 --> 00:21:53,580
what you do to get it boot in and if he

506
00:21:53,580 --> 00:21:55,620
follows the same steps and the steps

507
00:21:55,620 --> 00:21:57,900
should be fairly simple as well it's not

508
00:21:57,900 --> 00:21:59,640
should not be too involved let's say I

509
00:21:59,640 --> 00:22:01,940
give them a set of ten steps and and

510
00:22:01,940 --> 00:22:04,980
later today the yawen is going to show a

511
00:22:04,980 --> 00:22:08,740
porting exercise demo so if he does that

512
00:22:08,740 --> 00:22:10,750
it should boot out of the box at least

513
00:22:10,750 --> 00:22:13,030
on the reference platform right he

514
00:22:13,030 --> 00:22:15,340
should not stump which do not hang or if

515
00:22:15,340 --> 00:22:17,520
it has an issue it should be clearly

516
00:22:17,520 --> 00:22:20,380
logged and things like that once you

517
00:22:20,380 --> 00:22:22,540
have a reference implementation working

518
00:22:22,540 --> 00:22:24,730
on a reference board then taking that

519
00:22:24,730 --> 00:22:27,309
and putting to your own custom hardware

520
00:22:27,309 --> 00:22:29,050
adding new features becomes easier

521
00:22:29,050 --> 00:22:32,860
because you you would not daunted with

522
00:22:32,860 --> 00:22:35,320
just climbing over the the mountain at

523
00:22:35,320 --> 00:22:37,240
the very first step right so you you get

524
00:22:37,240 --> 00:22:39,040
into a rhythm and then you can figure

525
00:22:39,040 --> 00:22:40,960
things out so out of box experience is

526
00:22:40,960 --> 00:22:44,440
really critical cooperate with our other

527
00:22:44,440 --> 00:22:46,450
open source community projects indicate

528
00:22:46,450 --> 00:22:48,940
to Linux boot icon you boot etcetera to

529
00:22:48,940 --> 00:22:51,970
provide value as I mentioned earlier so

530
00:22:51,970 --> 00:22:54,370
we already have a patch under review for

531
00:22:54,370 --> 00:22:56,710
you boot indicate - we have submitted so

532
00:22:56,710 --> 00:22:59,380
UDK - is like we share we contribute

533
00:22:59,380 --> 00:23:01,780
both it goes both ways right so indicate

534
00:23:01,780 --> 00:23:05,020
- we have leveraged a lot of code like

535
00:23:05,020 --> 00:23:06,580
for example the base libraries and

536
00:23:06,580 --> 00:23:07,840
things like that they are well tested

537
00:23:07,840 --> 00:23:09,670
and available for you so we leverage

538
00:23:09,670 --> 00:23:12,130
that we have leveraged some drivers has

539
00:23:12,130 --> 00:23:14,559
felt like a PCIe nvme tour ever and

540
00:23:14,559 --> 00:23:16,300
things like that we have contributed to

541
00:23:16,300 --> 00:23:18,490
the ephah payload from our group as well

542
00:23:18,490 --> 00:23:22,620
so if there is something available there

543
00:23:22,620 --> 00:23:25,480
don't have to reinvent it we don't have

544
00:23:25,480 --> 00:23:27,670
that not invented here syndrome

545
00:23:27,670 --> 00:23:30,490
we love to leverage as long as the

546
00:23:30,490 --> 00:23:32,110
licensing permits and we'd like to

547
00:23:32,110 --> 00:23:34,570
contribute back as well that community

548
00:23:34,570 --> 00:23:36,040
engagement provides a valuable feedback

549
00:23:36,040 --> 00:23:37,990
right so this is pretty obvious so we

550
00:23:37,990 --> 00:23:40,090
have a mailing list on down we come to

551
00:23:40,090 --> 00:23:42,160
know various different use cases so pain

552
00:23:42,160 --> 00:23:44,020
points directly from our customers and

553
00:23:44,020 --> 00:23:46,420
the community a recent example that I

554
00:23:46,420 --> 00:23:48,460
can quote is somebody was using ufi

555
00:23:48,460 --> 00:23:50,020
payload with slim bootloader

556
00:23:50,020 --> 00:23:51,910
so the efi pillared has four variables

557
00:23:51,910 --> 00:23:55,030
and they wanted to access the variables

558
00:23:55,030 --> 00:23:56,980
from swim boot rotor even though there

559
00:23:56,980 --> 00:24:02,230
are kind of different entities so after

560
00:24:02,230 --> 00:24:03,790
hearing their use case we thought okay

561
00:24:03,790 --> 00:24:05,890
maybe it's reasonable and we heard that

562
00:24:05,890 --> 00:24:07,630
from a couple of other customers as well

563
00:24:07,630 --> 00:24:08,890
and then we went ahead and added that

564
00:24:08,890 --> 00:24:11,020
support so we get an opportunity to hear

565
00:24:11,020 --> 00:24:13,000
a customer feedback community feedback

566
00:24:13,000 --> 00:24:16,540
and during my closing remarks I would

567
00:24:16,540 --> 00:24:19,330
say we in to us in general welcomes

568
00:24:19,330 --> 00:24:21,310
community feedback please feel free to

569
00:24:21,310 --> 00:24:22,370
provide that

570
00:24:22,370 --> 00:24:24,470
hi leverage from indicate to and until

571
00:24:24,470 --> 00:24:26,409
FSB makes it easier to enable new

572
00:24:26,409 --> 00:24:28,580
features and platforms I think I hit on

573
00:24:28,580 --> 00:24:30,669
this point a couple of times already so

574
00:24:30,669 --> 00:24:34,159
what's next - for slim bootloader endo

575
00:24:34,159 --> 00:24:35,809
will continue to add support for future

576
00:24:35,809 --> 00:24:40,100
Intel silicon on platforms and even

577
00:24:40,100 --> 00:24:42,080
though I say Intel just noticed it I

578
00:24:42,080 --> 00:24:44,690
should I should qualify that I would eg

579
00:24:44,690 --> 00:24:46,669
I would eg group within Intel so there

580
00:24:46,669 --> 00:24:48,440
are a few other groups and they may have

581
00:24:48,440 --> 00:24:51,980
some different plans as well so adding

582
00:24:51,980 --> 00:24:54,080
support for FSB 2.1 so again Michael

583
00:24:54,080 --> 00:24:56,750
mentioned the evolution of FSB from 100

584
00:24:56,750 --> 00:25:00,620
to 2.1 so 2.1 api mode does not have a

585
00:25:00,620 --> 00:25:03,799
big impact on consumers like core boot

586
00:25:03,799 --> 00:25:05,510
on a slim boot loader but I still we had

587
00:25:05,510 --> 00:25:08,000
to go support some put the new version

588
00:25:08,000 --> 00:25:09,770
of the FSB info header and things like

589
00:25:09,770 --> 00:25:13,580
that more payload options enhance

590
00:25:13,580 --> 00:25:15,679
configuration management

591
00:25:15,679 --> 00:25:19,970
so as yawen mentioned a bit ago so one

592
00:25:19,970 --> 00:25:22,730
of the goals that we had mentioned was

593
00:25:22,730 --> 00:25:26,000
to lower the entry barrier right

594
00:25:26,000 --> 00:25:29,390
so actually interim boot rotor was

595
00:25:29,390 --> 00:25:33,140
initially offered to an internal IOT G

596
00:25:33,140 --> 00:25:35,510
group and one of the requirements they

597
00:25:35,510 --> 00:25:36,980
provided was quite interesting so they

598
00:25:36,980 --> 00:25:40,240
wanted one binary to be able to work on

599
00:25:40,240 --> 00:25:43,220
multiple different boards so we came up

600
00:25:43,220 --> 00:25:46,039
with this a configuration infrastructure

601
00:25:46,039 --> 00:25:48,529
it's a platform ID based configuration

602
00:25:48,529 --> 00:25:53,870
and goal the desired goal was to see if

603
00:25:53,870 --> 00:25:55,760
I can take the slim bootloader

604
00:25:55,760 --> 00:25:58,010
I can just change some configuration

605
00:25:58,010 --> 00:26:00,200
parameters without changing any source

606
00:26:00,200 --> 00:26:01,730
code so it should not require rebuild

607
00:26:01,730 --> 00:26:04,990
can I try it on a different board

608
00:26:04,990 --> 00:26:07,070
especially from I would eg point of view

609
00:26:07,070 --> 00:26:08,960
a lot of our customers take our

610
00:26:08,960 --> 00:26:10,850
reference design they come up their own

611
00:26:10,850 --> 00:26:14,149
layout but not too much changes in terms

612
00:26:14,149 --> 00:26:16,850
of the hardware schematics and things

613
00:26:16,850 --> 00:26:19,490
like that a few GPIO changes maybe all

614
00:26:19,490 --> 00:26:21,710
they make maybe they change the type of

615
00:26:21,710 --> 00:26:24,380
memory they support so do I have to go

616
00:26:24,380 --> 00:26:27,380
change the source code for - to make all

617
00:26:27,380 --> 00:26:29,450
these to support these changes or can I

618
00:26:29,450 --> 00:26:33,399
make these changes through a UI tool and

619
00:26:33,399 --> 00:26:35,120
restage not

620
00:26:35,120 --> 00:26:38,360
rebuild research and can I support a new

621
00:26:38,360 --> 00:26:43,820
board with that if if the the new custom

622
00:26:43,820 --> 00:26:45,500
hardware is closer to the reference

623
00:26:45,500 --> 00:26:46,970
design this should be absolutely

624
00:26:46,970 --> 00:26:49,970
possible there may be cases where you

625
00:26:49,970 --> 00:26:52,280
still may have to go change the code you

626
00:26:52,280 --> 00:26:54,230
want to do that that's fine that's all

627
00:26:54,230 --> 00:26:56,510
allowed it's all open source but if you

628
00:26:56,510 --> 00:26:58,640
are a small company having one former

629
00:26:58,640 --> 00:26:59,930
engineer I don't want to spend too much

630
00:26:59,930 --> 00:27:02,300
time on this or my Linux engineer is

631
00:27:02,300 --> 00:27:03,890
doubling up a semi-firm were in here as

632
00:27:03,890 --> 00:27:06,740
well then getting things going is really

633
00:27:06,740 --> 00:27:10,250
critical right so there's a session

634
00:27:10,250 --> 00:27:12,140
today later today which will show a demo

635
00:27:12,140 --> 00:27:14,420
about the configurational enhanced

636
00:27:14,420 --> 00:27:17,179
documentation this is like a continuous

637
00:27:17,179 --> 00:27:20,150
improvement process for us I said we

638
00:27:20,150 --> 00:27:22,370
have a set of documentation we have

639
00:27:22,370 --> 00:27:25,820
heard a lot of praise good feedback

640
00:27:25,820 --> 00:27:27,950
about that but we also realize as part

641
00:27:27,950 --> 00:27:29,300
of the developer experience testing that

642
00:27:29,300 --> 00:27:31,340
there are still a few areas where we can

643
00:27:31,340 --> 00:27:33,559
improve and it takes time actually

644
00:27:33,559 --> 00:27:35,540
creating documentation so it's a

645
00:27:35,540 --> 00:27:37,640
continuous process for for us we will

646
00:27:37,640 --> 00:27:40,360
continue to enhance it documentation

647
00:27:40,360 --> 00:27:42,740
improve code quality improvements so we

648
00:27:42,740 --> 00:27:44,929
do michael also mention this yesterday

649
00:27:44,929 --> 00:27:47,210
right so we do some of this already

650
00:27:47,210 --> 00:27:49,970
internally like running clockwork protec

651
00:27:49,970 --> 00:27:52,730
scans and things like that we have an

652
00:27:52,730 --> 00:27:55,610
automated bat setup also we like to

653
00:27:55,610 --> 00:27:57,950
improve what we have and then start

654
00:27:57,950 --> 00:28:01,610
publishing this as well so don't hold me

655
00:28:01,610 --> 00:28:03,860
into this another thing that we had was

656
00:28:03,860 --> 00:28:07,100
ok how about we do a quarterly major

657
00:28:07,100 --> 00:28:09,320
validation that will be a bat running

658
00:28:09,320 --> 00:28:11,350
every day but it's an open source code

659
00:28:11,350 --> 00:28:13,940
hope is more people will contribute so

660
00:28:13,940 --> 00:28:15,620
how about we run a quarterly major

661
00:28:15,620 --> 00:28:17,300
evaluation cycle and publish everything

662
00:28:17,300 --> 00:28:19,850
out there so you take this version of

663
00:28:19,850 --> 00:28:23,690
the source and you have the validation

664
00:28:23,690 --> 00:28:25,309
reports and everything with you so you

665
00:28:25,309 --> 00:28:26,990
know what is working what is not right

666
00:28:26,990 --> 00:28:30,050
so it helps you to plan your work here

667
00:28:30,050 --> 00:28:34,429
and call to action tryout stream boot

668
00:28:34,429 --> 00:28:36,950
loader participate and contribute to the

669
00:28:36,950 --> 00:28:39,950
open source community and as I mentioned

670
00:28:39,950 --> 00:28:41,809
earlier we really appreciate your

671
00:28:41,809 --> 00:28:45,380
valuable feedback and contributions so

672
00:28:45,380 --> 00:28:48,620
there is a mailing list you can get

673
00:28:48,620 --> 00:28:50,330
the source directly from the github and

674
00:28:50,330 --> 00:28:51,919
there is an issue tracking mechanism as

675
00:28:51,919 --> 00:28:53,480
well so we would love to hear from you

676
00:28:53,480 --> 00:28:57,830
thank you any questions thank you please

677
00:28:57,830 --> 00:29:04,309
give a lot of applause and now we have

678
00:29:04,309 --> 00:29:08,929
triumph or think 12 questions please if

679
00:29:08,929 --> 00:29:10,669
you have any questions yeah at this very

680
00:29:10,669 --> 00:29:13,789
specific numbers right so if you have

681
00:29:13,789 --> 00:29:15,650
any questions please go send a stay up

682
00:29:15,650 --> 00:29:24,289
to the the microphones and so Robbie you

683
00:29:24,289 --> 00:29:25,549
mentioned about some platform

684
00:29:25,549 --> 00:29:27,289
configuration checker or something yeah

685
00:29:27,289 --> 00:29:28,640
can you throw more light on that

686
00:29:28,640 --> 00:29:31,279
yeah so it's a platform configuration

687
00:29:31,279 --> 00:29:33,020
there is it's part of the slim boot

688
00:29:33,020 --> 00:29:34,520
order project itself there is a tool

689
00:29:34,520 --> 00:29:36,679
called config edit it's a pipe embrace

690
00:29:36,679 --> 00:29:40,840
tool as part of a boat Support Package

691
00:29:40,840 --> 00:29:43,190
for example let's say we support whiskey

692
00:29:43,190 --> 00:29:45,590
egg we publish a set of confident it's

693
00:29:45,590 --> 00:29:49,970
very similar to FSP UPD it's kind of

694
00:29:49,970 --> 00:29:52,039
similar to that so we saw publish a set

695
00:29:52,039 --> 00:29:54,350
of configuration parameters you can use

696
00:29:54,350 --> 00:29:56,330
the tool to open the configuration

697
00:29:56,330 --> 00:29:58,520
parameters you sit let's say you you're

698
00:29:58,520 --> 00:30:00,559
doubting your own board and your board

699
00:30:00,559 --> 00:30:02,450
has a board ID platform ID you can

700
00:30:02,450 --> 00:30:03,950
change the platform ID and you can

701
00:30:03,950 --> 00:30:05,720
change that configuration and then

702
00:30:05,720 --> 00:30:07,520
restage during runtime spin boot order

703
00:30:07,520 --> 00:30:09,260
will read the platform ID from your

704
00:30:09,260 --> 00:30:12,200
board and it will match one of the

705
00:30:12,200 --> 00:30:14,299
existing platform configuration data set

706
00:30:14,299 --> 00:30:18,460
and it will apply that and later today's

707
00:30:18,460 --> 00:30:21,260
or something yeah is that do stay tuned

708
00:30:21,260 --> 00:30:22,970
for the third presentation I'll do a

709
00:30:22,970 --> 00:30:24,740
simple demo of the configuration editor

710
00:30:24,740 --> 00:30:26,899
tool and you can get a good picture of

711
00:30:26,899 --> 00:30:31,580
what it does Hey

712
00:30:31,580 --> 00:30:33,860
so yesterday I saw talk about min

713
00:30:33,860 --> 00:30:35,480
platform and today we're talking about

714
00:30:35,480 --> 00:30:38,360
slim boot loader can you elaborate about

715
00:30:38,360 --> 00:30:40,700
what what overlap or intersection there

716
00:30:40,700 --> 00:30:44,360
is between the two if any yeah so so min

717
00:30:44,360 --> 00:30:47,120
platform is a native edk to project

718
00:30:47,120 --> 00:30:50,270
alright so everything is done in the

719
00:30:50,270 --> 00:30:53,659
indicate to framework slim boot or

720
00:30:53,659 --> 00:30:56,380
another hand follows the idea of

721
00:30:56,380 --> 00:30:59,720
initialization phase first and then OS

722
00:30:59,720 --> 00:31:02,090
boot logic separate it's like

723
00:31:02,090 --> 00:31:05,330
Association for by pale or that's the

724
00:31:05,330 --> 00:31:08,480
main architectural difference use case

725
00:31:08,480 --> 00:31:11,330
wise there are differences for example

726
00:31:11,330 --> 00:31:14,960
I'll put it this way let's say from I

727
00:31:14,960 --> 00:31:16,549
think I saw more in one presentation

728
00:31:16,549 --> 00:31:19,820
yesterday that the Linux boot was

729
00:31:19,820 --> 00:31:21,620
automotive with Linux boot was done in

730
00:31:21,620 --> 00:31:23,120
800 milliseconds or something like that

731
00:31:23,120 --> 00:31:25,669
so that exactly is the use case firstly

732
00:31:25,669 --> 00:31:28,159
in bootloader where I don't need UEFI

733
00:31:28,159 --> 00:31:30,559
I'm booting a on a real-time operating

734
00:31:30,559 --> 00:31:33,799
system I'm booting a vxworks like rrq an

735
00:31:33,799 --> 00:31:35,750
ax or something like that I don't need

736
00:31:35,750 --> 00:31:38,630
you fi I don't need you for on time

737
00:31:38,630 --> 00:31:39,260
services

738
00:31:39,260 --> 00:31:41,330
I want initialization launch in the

739
00:31:41,330 --> 00:31:42,919
operating system boot order fish that

740
00:31:42,919 --> 00:31:45,770
case booted plus your 5 payload can boot

741
00:31:45,770 --> 00:31:48,830
and evaporation like Windows that's

742
00:31:48,830 --> 00:31:50,510
where it's like I don't know it's a

743
00:31:50,510 --> 00:31:53,090
personal choice kind of thing like it's

744
00:31:53,090 --> 00:31:54,470
a little difficult to ads of that part

745
00:31:54,470 --> 00:31:58,820
yeah we have nine point seven two

746
00:31:58,820 --> 00:32:08,140
questions left actually attend questions

747
00:32:08,140 --> 00:32:09,529
ahem

748
00:32:09,529 --> 00:32:12,230
how big is slim boot loader I gather

749
00:32:12,230 --> 00:32:16,070
it's lump in it roaring the FSP and all

750
00:32:16,070 --> 00:32:18,260
that stuff roughly how much as epic as

751
00:32:18,260 --> 00:32:23,029
the binary so we have a sister so

752
00:32:23,029 --> 00:32:25,159
efforts we had a ignore FSB and then if

753
00:32:25,159 --> 00:32:27,799
you ignore all the redundancy it should

754
00:32:27,799 --> 00:32:47,149
not be Morris you have a number three

755
00:32:47,149 --> 00:32:49,820
three hundred to four ok yeah yeah thank

756
00:32:49,820 --> 00:32:51,789
you

757
00:32:51,789 --> 00:32:54,950
alright now two questions here first you

758
00:32:54,950 --> 00:32:58,309
mentioned the the if' wi packaging has

759
00:32:58,309 --> 00:33:00,950
fit fit the fit tool in it so i mean you

760
00:33:00,950 --> 00:33:03,279
have a linux version of fit in there

761
00:33:03,279 --> 00:33:05,450
linux personal fitness available for

762
00:33:05,450 --> 00:33:11,870
apollo leak I don't know if it's

763
00:33:11,870 --> 00:33:13,130
available for whiskey like coffee like

764
00:33:13,130 --> 00:33:14,480
refresh if you're gonna spread this

765
00:33:14,480 --> 00:33:15,840
across your entire roadmap

766
00:33:15,840 --> 00:33:19,260
be kind of right yes yes so that is our

767
00:33:19,260 --> 00:33:20,940
intent as well so we have we have

768
00:33:20,940 --> 00:33:22,890
communicated that within Intel so we

769
00:33:22,890 --> 00:33:25,020
want a Linux version of the whole

770
00:33:25,020 --> 00:33:28,409
building should be done in Linux second

771
00:33:28,409 --> 00:33:31,080
question you may you're building your

772
00:33:31,080 --> 00:33:32,820
you're building some bootloader II and

773
00:33:32,820 --> 00:33:37,650
then basically an e dk2 tree right not

774
00:33:37,650 --> 00:33:39,929
necessarily so we we leverage they

775
00:33:39,929 --> 00:33:41,820
indicate to build infrastructure build

776
00:33:41,820 --> 00:33:43,740
infrastructure yeah now can I build the

777
00:33:43,740 --> 00:33:45,990
entire can I build both my payload and

778
00:33:45,990 --> 00:33:48,179
my slim boot out of the same tree in the

779
00:33:48,179 --> 00:33:51,360
same build you can build the voice

780
00:33:51,360 --> 00:33:54,720
loader and you fi payload

781
00:33:54,720 --> 00:33:56,610
you say it's a separate bill but you can

782
00:33:56,610 --> 00:33:57,840
use the same build infrastructure to

783
00:33:57,840 --> 00:33:59,669
build run and make twice or build

784
00:33:59,669 --> 00:34:02,070
Whiterun build twice which one which

785
00:34:02,070 --> 00:34:04,289
span or specific Bell or OS fail why

786
00:34:04,289 --> 00:34:06,450
spill on it it can be one build it can

787
00:34:06,450 --> 00:34:10,830
be one they'll have it thank you to PI

788
00:34:10,830 --> 00:34:18,239
questions left we will be able to be

789
00:34:18,239 --> 00:34:19,649
here so if you have any more questions

790
00:34:19,649 --> 00:34:21,449
so you can and there are a couple of

791
00:34:21,449 --> 00:34:24,000
more sessions as well as that we'll

792
00:34:24,000 --> 00:34:25,349
cover a little bit more about stream

793
00:34:25,349 --> 00:34:27,089
boot loader so please feel free to ask

794
00:34:27,089 --> 00:34:30,210
us something thank you okay let's have

795
00:34:30,210 --> 00:34:33,859
another round of applause thank you

796
00:34:34,850 --> 00:34:36,440
[Music]

797
00:34:36,440 --> 00:34:38,500
you

