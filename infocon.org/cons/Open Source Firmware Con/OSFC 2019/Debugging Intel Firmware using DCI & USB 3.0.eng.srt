1
00:00:03,190 --> 00:00:06,259
[Music]

2
00:00:07,220 --> 00:00:11,400
next talk will be held by Maggie and

3
00:00:11,400 --> 00:00:16,289
Mickey and yeah on that point I think we

4
00:00:16,289 --> 00:00:18,420
can all agree that documentation is an

5
00:00:18,420 --> 00:00:20,880
essential part of creating and

6
00:00:20,880 --> 00:00:23,880
developing on a platform like on an

7
00:00:23,880 --> 00:00:26,609
Intel platform for example that's like

8
00:00:26,609 --> 00:00:32,880
some platform for example Intel and most

9
00:00:32,880 --> 00:00:35,190
of these these document Asians tend to

10
00:00:35,190 --> 00:00:37,559
be like on a lookup basis so they don't

11
00:00:37,559 --> 00:00:39,870
have really have a step-by-step guide on

12
00:00:39,870 --> 00:00:42,149
oh I would want to do this so how do I

13
00:00:42,149 --> 00:00:46,770
get there well these folks here have a

14
00:00:46,770 --> 00:00:48,780
pretty nice talk repaired jet to do

15
00:00:48,780 --> 00:00:49,649
exactly that

16
00:00:49,649 --> 00:00:51,719
so please give a round of applause for

17
00:00:51,719 --> 00:01:00,570
Maggie and Mickey I work for Intel and

18
00:01:00,570 --> 00:01:03,149
this is Mickey and I don't work for

19
00:01:03,149 --> 00:01:06,180
Intel it'll be an interesting talk you

20
00:01:06,180 --> 00:01:08,100
have kind of two points of view one

21
00:01:08,100 --> 00:01:10,140
until proper these are features and

22
00:01:10,140 --> 00:01:11,909
these are this is how things work and

23
00:01:11,909 --> 00:01:13,530
then you get an external point of view

24
00:01:13,530 --> 00:01:19,729
of actually use this in real life so

25
00:01:20,030 --> 00:01:24,360
yeah uh firstly a little bit about what

26
00:01:24,360 --> 00:01:26,970
this talk is not this talk is not gonna

27
00:01:26,970 --> 00:01:29,460
teach you how to debug we assume this is

28
00:01:29,460 --> 00:01:32,250
a conference full of firmware experts so

29
00:01:32,250 --> 00:01:33,479
we're not going to teach you how to do

30
00:01:33,479 --> 00:01:35,040
that we're also not going to teach you

31
00:01:35,040 --> 00:01:37,759
how to use a UI we figure you are

32
00:01:37,759 --> 00:01:40,310
competent enough to do that on your own

33
00:01:40,310 --> 00:01:44,850
we will talk about features and a suite

34
00:01:44,850 --> 00:01:46,670
of tools that are available and

35
00:01:46,670 --> 00:01:50,939
different ways to do breakpoints and the

36
00:01:50,939 --> 00:01:58,469
way to run chip SEC within DCI so yeah

37
00:01:58,469 --> 00:02:01,530
let's dive into it close chassis

38
00:02:01,530 --> 00:02:04,259
debugging so this is exciting because it

39
00:02:04,259 --> 00:02:07,439
changes the way we've done it for for

40
00:02:07,439 --> 00:02:09,060
years and years so you no longer need

41
00:02:09,060 --> 00:02:12,870
open chassis $3,000 proprietary hardware

42
00:02:12,870 --> 00:02:14,069
to do this

43
00:02:14,069 --> 00:02:16,560
you can now do this pretty much for free

44
00:02:16,560 --> 00:02:24,750
or with a $10 USB cable right

45
00:02:24,750 --> 00:02:27,359
it has a UEFI a platform for more

46
00:02:27,359 --> 00:02:36,409
support in every stage of boot and yep

47
00:02:36,409 --> 00:02:40,560
it's pretty flexible yeah so let's talk

48
00:02:40,560 --> 00:02:43,409
about DCI there are two ways you can do

49
00:02:43,409 --> 00:02:45,930
it DCI is supported from a Gen 6

50
00:02:45,930 --> 00:02:49,379
platforms and beyond if you wanted to

51
00:02:49,379 --> 00:02:51,389
use it on on previous platforms as a

52
00:02:51,389 --> 00:02:53,430
host you can use something called the

53
00:02:53,430 --> 00:02:55,590
CCA a closed chassis adapter that

54
00:02:55,590 --> 00:02:59,760
implements DCI for the host and and

55
00:02:59,760 --> 00:03:04,400
it'll work as well the CCA is a

56
00:03:04,400 --> 00:03:07,980
available through Intel and it cost

57
00:03:07,980 --> 00:03:11,459
about $400 so we went from needing to

58
00:03:11,459 --> 00:03:14,189
open the platform and needing a $3,000

59
00:03:14,189 --> 00:03:20,579
part to do it to 400 to a to a USB cable

60
00:03:20,579 --> 00:03:23,819
that just clips VCC which is available

61
00:03:23,819 --> 00:03:26,129
through until for ten dollars or you can

62
00:03:26,129 --> 00:03:31,409
DIY it so just a quick note the CCA box

63
00:03:31,409 --> 00:03:33,299
does require you to sign an NDA with

64
00:03:33,299 --> 00:03:37,349
Intel however if you go to data Pro

65
00:03:37,349 --> 00:03:39,120
which is a cable supplier from Seattle

66
00:03:39,120 --> 00:03:41,879
you can buy the USB ADA a cables make

67
00:03:41,879 --> 00:03:44,729
your own or buy the Intel cables from

68
00:03:44,729 --> 00:03:47,209
mowzer which we recently discovered

69
00:03:47,209 --> 00:03:50,310
happily you can get the USB ADA a or A

70
00:03:50,310 --> 00:03:54,569
to C so A to C is $50 and ADA is $18

71
00:03:54,569 --> 00:03:56,970
these are the yellow cables the non

72
00:03:56,970 --> 00:03:59,699
Intel branded cables are orange and

73
00:03:59,699 --> 00:04:02,760
black and they go for about 10 15

74
00:04:02,760 --> 00:04:07,079
dollars for 3 feet and goes up from

75
00:04:07,079 --> 00:04:09,209
there depending on the length of the

76
00:04:09,209 --> 00:04:11,359
cable

77
00:04:13,319 --> 00:04:17,070
so six gen and above these are the

78
00:04:17,070 --> 00:04:19,350
limitations you need additional hardware

79
00:04:19,350 --> 00:04:22,169
so you need to debug it back adapter or

80
00:04:22,169 --> 00:04:26,250
Android cable if manufacturers may

81
00:04:26,250 --> 00:04:28,169
disable their specific settings that you

82
00:04:28,169 --> 00:04:30,560
need to go in setup and enable them

83
00:04:30,560 --> 00:04:34,080
these might be removed which making us

84
00:04:34,080 --> 00:04:36,440
some experience with as well well we're

85
00:04:36,440 --> 00:04:39,949
basically there's two main things that

86
00:04:39,949 --> 00:04:43,620
you need to have enabled to do proper

87
00:04:43,620 --> 00:04:50,160
DCI one is the ia32 debug MSR you need

88
00:04:50,160 --> 00:04:52,259
to have it flipped on for the cpu to be

89
00:04:52,259 --> 00:04:55,340
halted and the other is to enable DCI

90
00:04:55,340 --> 00:04:58,740
HTC ien that's the register if you want

91
00:04:58,740 --> 00:05:01,919
to look it up it's in the series 100

92
00:05:01,919 --> 00:05:04,860
chipset datasheet after that it

93
00:05:04,860 --> 00:05:07,320
disappeared so if you need a reference

94
00:05:07,320 --> 00:05:08,970
there is there that's where you can find

95
00:05:08,970 --> 00:05:12,900
it so I'm also part of the team at Intel

96
00:05:12,900 --> 00:05:15,419
that supports chip stack so we're part

97
00:05:15,419 --> 00:05:16,710
of the larger organization that delivers

98
00:05:16,710 --> 00:05:20,729
our UEFI solutions platform code and as

99
00:05:20,729 --> 00:05:22,889
well as Tiano part of the team but for

100
00:05:22,889 --> 00:05:25,289
example Vincent summers are part of we

101
00:05:25,289 --> 00:05:27,240
also are the team with an Intel that

102
00:05:27,240 --> 00:05:31,470
supports chip sec and we also help until

103
00:05:31,470 --> 00:05:34,440
until bug bounty for UEFI stuff there is

104
00:05:34,440 --> 00:05:37,080
a chip seg module that you can just test

105
00:05:37,080 --> 00:05:40,889
to see if DCI is enabled it checks for a

106
00:05:40,889 --> 00:05:42,419
couple different things you check the e

107
00:05:42,419 --> 00:05:44,760
control register to see if a DCI is

108
00:05:44,760 --> 00:05:48,330
enabled on the PCH it also checks MSR

109
00:05:48,330 --> 00:05:51,659
eye 32 debug interface to check whether

110
00:05:51,659 --> 00:05:54,270
debug is enabled to check whether an

111
00:05:54,270 --> 00:05:56,430
debug is locked and whether debug has

112
00:05:56,430 --> 00:05:58,530
occurred that might be interesting if

113
00:05:58,530 --> 00:06:00,599
you notice that debug has occurred on

114
00:06:00,599 --> 00:06:02,729
your system and you potentially haven't

115
00:06:02,729 --> 00:06:04,770
done it yourself so you'll get warnings

116
00:06:04,770 --> 00:06:07,530
under failures accordingly anyone here

117
00:06:07,530 --> 00:06:13,409
is not familiar with chip SEC okay we

118
00:06:13,409 --> 00:06:17,099
got a few awesome few +1 so yeah that's

119
00:06:17,099 --> 00:06:19,139
touch on that you undo it over if you

120
00:06:19,139 --> 00:06:21,810
dirty it is my team but it was initiated

121
00:06:21,810 --> 00:06:24,889
by my boss

122
00:06:25,800 --> 00:06:27,720
I work for a start-up that our CEO was

123
00:06:27,720 --> 00:06:31,470
the creator of chip sack basically it is

124
00:06:31,470 --> 00:06:34,980
a tool allowing you to do security

125
00:06:34,980 --> 00:06:37,080
verification validation and exploration

126
00:06:37,080 --> 00:06:42,930
of your platform think of a nicely

127
00:06:42,930 --> 00:06:46,170
written comfortable Python framework to

128
00:06:46,170 --> 00:06:50,880
play with ACP immi owes all the UEFI

129
00:06:50,880 --> 00:06:54,210
stuff you can think of the spy and more

130
00:06:54,210 --> 00:06:57,240
and so much more so if you want a deep

131
00:06:57,240 --> 00:06:59,910
dive into your Intel based platform you

132
00:06:59,910 --> 00:07:03,270
can use chipset as a as a tool to get

133
00:07:03,270 --> 00:07:05,880
there and and see how things work under

134
00:07:05,880 --> 00:07:08,130
the hood so the configuration of a

135
00:07:08,130 --> 00:07:09,750
platform is pretty complex there's a ton

136
00:07:09,750 --> 00:07:11,400
of registers and a ton of locks and a

137
00:07:11,400 --> 00:07:13,040
ton of things and the more

138
00:07:13,040 --> 00:07:14,970
vulnerabilities are discovered the more

139
00:07:14,970 --> 00:07:16,650
stuff there is to check and it's

140
00:07:16,650 --> 00:07:18,720
different for the platforms so one of

141
00:07:18,720 --> 00:07:19,950
the brilliant things that I think Yuri

142
00:07:19,950 --> 00:07:22,980
did you know back when he's still

143
00:07:22,980 --> 00:07:26,310
working until is if one person knows a

144
00:07:26,310 --> 00:07:28,140
brilliant thing and goes and checks for

145
00:07:28,140 --> 00:07:29,669
that and good for that person but he

146
00:07:29,669 --> 00:07:31,200
created a framework that is now kind of

147
00:07:31,200 --> 00:07:33,840
the standard that everybody tests

148
00:07:33,840 --> 00:07:36,900
against and it's open source and we find

149
00:07:36,900 --> 00:07:38,790
it to be very valuable and like I said

150
00:07:38,790 --> 00:07:41,600
we also work with the Intel bug bounty

151
00:07:41,600 --> 00:07:45,720
where every time we get the exploits

152
00:07:45,720 --> 00:07:47,580
developed by researchers around the

153
00:07:47,580 --> 00:07:49,860
world so we can tool it back into chip

154
00:07:49,860 --> 00:07:52,020
sack and make sure that every that the

155
00:07:52,020 --> 00:07:54,030
bar is raised and everybody can test to

156
00:07:54,030 --> 00:07:57,990
the same bar it's not just a scanner

157
00:07:57,990 --> 00:07:59,340
though a lot of people just think of

158
00:07:59,340 --> 00:08:02,820
chips Tech as Oki pastor I failed it

159
00:08:02,820 --> 00:08:06,650
also has a bunch of tools and utilities

160
00:08:06,650 --> 00:08:09,300
and write to different things you can

161
00:08:09,300 --> 00:08:12,660
read your PC rs40 p.m. there's fuzzers

162
00:08:12,660 --> 00:08:14,430
so you can do a whole bunch of

163
00:08:14,430 --> 00:08:15,870
interesting functionality and the fact

164
00:08:15,870 --> 00:08:20,700
that a subversion 136 you can when

165
00:08:20,700 --> 00:08:23,280
you're doing debug over USB on your

166
00:08:23,280 --> 00:08:25,560
platform you can run chip sick at

167
00:08:25,560 --> 00:08:28,290
different parts of the boot so you don't

168
00:08:28,290 --> 00:08:31,169
get just a runtime scan of what your

169
00:08:31,169 --> 00:08:32,789
registers look like you can see like a

170
00:08:32,789 --> 00:08:35,909
3d view from the moment I vote to all

171
00:08:35,909 --> 00:08:37,500
the interesting points how

172
00:08:37,500 --> 00:08:40,799
what my registers look like try to

173
00:08:40,799 --> 00:08:43,020
do some potentially destructive test see

174
00:08:43,020 --> 00:08:47,660
if it sticks through through the boot so

175
00:08:47,660 --> 00:08:50,400
yeah that was recently added in November

176
00:08:50,400 --> 00:08:54,450
of last year yeah uh yeah all right so

177
00:08:54,450 --> 00:08:56,880
other limitations in order to be able to

178
00:08:56,880 --> 00:08:59,520
do debug with and load the symbols so

179
00:08:59,520 --> 00:09:02,700
you can do the source code debug you

180
00:09:02,700 --> 00:09:05,220
need to flash a debug imogen and build

181
00:09:05,220 --> 00:09:05,820
it yourself

182
00:09:05,820 --> 00:09:08,340
and we will go over through how you do

183
00:09:08,340 --> 00:09:12,930
that until system studio supports Linux

184
00:09:12,930 --> 00:09:17,310
Windows and Mac OS and its debug is not

185
00:09:17,310 --> 00:09:19,590
optimized for performance obviously it

186
00:09:19,590 --> 00:09:21,630
some of our demos that will show a

187
00:09:21,630 --> 00:09:24,090
little later are kind of sped up because

188
00:09:24,090 --> 00:09:26,520
it takes it takes a while you don't want

189
00:09:26,520 --> 00:09:29,850
to take the JTAG and go over and then do

190
00:09:29,850 --> 00:09:32,070
all the magic to translate and go back

191
00:09:32,070 --> 00:09:34,680
it's millions of lines of code and all

192
00:09:34,680 --> 00:09:36,210
the debug messages there so you can

193
00:09:36,210 --> 00:09:40,430
imagine those that's not built for speed

194
00:09:40,430 --> 00:09:45,690
um so Intel didn't just enable the

195
00:09:45,690 --> 00:09:48,270
platforms to be able to do it to to

196
00:09:48,270 --> 00:09:50,070
enable the JTAG interface we also

197
00:09:50,070 --> 00:09:52,920
provide a suite of tools so so that you

198
00:09:52,920 --> 00:09:54,150
can do this this is really available

199
00:09:54,150 --> 00:09:56,760
online with a free 90-day renewable

200
00:09:56,760 --> 00:09:59,010
community license you can go request it

201
00:09:59,010 --> 00:10:01,050
it usually takes a few hours - maybe a

202
00:10:01,050 --> 00:10:03,120
day so you get the license and you can

203
00:10:03,120 --> 00:10:06,360
just renew forever well you basically

204
00:10:06,360 --> 00:10:09,990
you you go through the usual EULA and

205
00:10:09,990 --> 00:10:13,110
whatnot you get your software your your

206
00:10:13,110 --> 00:10:15,120
Dendy for 90 days and then after about

207
00:10:15,120 --> 00:10:17,970
80 or 75 days to get an email saying

208
00:10:17,970 --> 00:10:19,710
your license is about to expire and

209
00:10:19,710 --> 00:10:21,840
click this link to renew and you're

210
00:10:21,840 --> 00:10:25,020
golden so if you wanna there's a lot of

211
00:10:25,020 --> 00:10:26,820
tools and then they'll System studio so

212
00:10:26,820 --> 00:10:29,720
if you want to explore it and use it

213
00:10:29,720 --> 00:10:34,230
it's up to you but if I get a chance I

214
00:10:34,230 --> 00:10:36,450
think we can show pictures of how the

215
00:10:36,450 --> 00:10:39,510
debugger works specifically yes we have

216
00:10:39,510 --> 00:10:41,840
some screenshots and then the backup has

217
00:10:41,840 --> 00:10:45,600
way more step-by-step yes

218
00:10:45,600 --> 00:10:48,430
all right so basically you launch the

219
00:10:48,430 --> 00:10:52,209
IDE you click on the debugger button

220
00:10:52,209 --> 00:10:56,290
there and the debug the debugger has is

221
00:10:56,290 --> 00:10:59,470
enabled for until Adam until core and C

222
00:10:59,470 --> 00:11:04,240
on platforms um you can debug UEFI

223
00:11:04,240 --> 00:11:06,760
firmware it's it's OS aware and is able

224
00:11:06,760 --> 00:11:10,269
to do kernel module debug you got full

225
00:11:10,269 --> 00:11:11,829
CPU register description in bit lower

226
00:11:11,829 --> 00:11:14,680
editor which can be useful you get

227
00:11:14,680 --> 00:11:16,540
access to page translator and descriptor

228
00:11:16,540 --> 00:11:21,490
tables etc and and and more and more and

229
00:11:21,490 --> 00:11:25,529
more and more so if you if you want to

230
00:11:25,529 --> 00:11:28,029
have a secondary platform you want to

231
00:11:28,029 --> 00:11:29,860
develop like a kernel module or Windows

232
00:11:29,860 --> 00:11:33,910
driver and you want something that gives

233
00:11:33,910 --> 00:11:38,019
you visibility without no stuttering

234
00:11:38,019 --> 00:11:42,579
once in a while using the Intel debug

235
00:11:42,579 --> 00:11:47,320
hardware is is pretty cool to see it

236
00:11:47,320 --> 00:11:52,779
happen for example when when when we

237
00:11:52,779 --> 00:11:53,820
give a talk

238
00:11:53,820 --> 00:11:57,040
two years ago at Def Con we found a

239
00:11:57,040 --> 00:12:00,490
buffer overflow in your BIOS and to

240
00:12:00,490 --> 00:12:04,060
debug the exploit we used ECI which is

241
00:12:04,060 --> 00:12:07,510
amazing so imagine you have to look at

242
00:12:07,510 --> 00:12:09,220
memory and look at code executing when

243
00:12:09,220 --> 00:12:11,620
you when you're in your bug triggers and

244
00:12:11,620 --> 00:12:15,880
bios and and you just watch the knob

245
00:12:15,880 --> 00:12:18,490
sled then you step through it it's quite

246
00:12:18,490 --> 00:12:21,790
interesting to see and it's very simple

247
00:12:21,790 --> 00:12:25,050
to use so that same principle applies to

248
00:12:25,050 --> 00:12:27,550
anything you'd like to do so if you'd

249
00:12:27,550 --> 00:12:29,920
like to look at the kernel specific

250
00:12:29,920 --> 00:12:33,520
module or anything during boot you want

251
00:12:33,520 --> 00:12:36,180
to pause you can set up a breakpoint and

252
00:12:36,180 --> 00:12:38,980
it's not limited just for debug debug

253
00:12:38,980 --> 00:12:41,740
gives you symbols but you can also do

254
00:12:41,740 --> 00:12:43,810
this on release and you can hold the

255
00:12:43,810 --> 00:12:45,910
system at your convenience and set

256
00:12:45,910 --> 00:12:48,430
breakpoints for a recent vector and what

257
00:12:48,430 --> 00:12:51,940
a nice mm enter and so many others we'll

258
00:12:51,940 --> 00:12:53,410
talk about this in and hopefully it's a

259
00:12:53,410 --> 00:12:55,120
feature that gives more platform

260
00:12:55,120 --> 00:12:58,390
transparency that enables service to

261
00:12:58,390 --> 00:12:59,300
happen

262
00:12:59,300 --> 00:13:01,070
in a much more accessible way you don't

263
00:13:01,070 --> 00:13:02,710
have to send it back to the manufacturer

264
00:13:02,710 --> 00:13:08,240
so alright let's see how we can debug

265
00:13:08,240 --> 00:13:11,780
for UEFI so what you're going to need is

266
00:13:11,780 --> 00:13:17,530
Intel system debugger Visual Studio the

267
00:13:17,530 --> 00:13:23,120
the edk environment for for building the

268
00:13:23,120 --> 00:13:25,340
a on up squared so we chose to work on

269
00:13:25,340 --> 00:13:27,490
the up squared for this presentation

270
00:13:27,490 --> 00:13:30,710
since since it's a it's in them since

271
00:13:30,710 --> 00:13:32,390
it's of course so you see yeah like

272
00:13:32,390 --> 00:13:35,720
doesn't somewhat open sourced and it

273
00:13:35,720 --> 00:13:41,660
supports the CIA alright so this is our

274
00:13:41,660 --> 00:13:45,890
solar on and C 33 50 yeah these are 200

275
00:13:45,890 --> 00:13:47,960
bucks on Amazon Prime if your it was

276
00:13:47,960 --> 00:13:49,750
based Apollo Lake

277
00:13:49,750 --> 00:13:53,900
Roxton platform so in order for you to

278
00:13:53,900 --> 00:13:57,980
build the platform there are you can go

279
00:13:57,980 --> 00:14:00,920
and get the code base and the release

280
00:14:00,920 --> 00:14:03,080
notes include the step by step process

281
00:14:03,080 --> 00:14:06,740
for you to go build it yourself it's

282
00:14:06,740 --> 00:14:07,730
pretty straightforward

283
00:14:07,730 --> 00:14:12,530
I wind owes unfortunately although for

284
00:14:12,530 --> 00:14:17,470
most of my work and no offense Jeremiah

285
00:14:17,470 --> 00:14:24,050
but it takes a while right so it's a

286
00:14:24,050 --> 00:14:26,270
simple step through guide but to build

287
00:14:26,270 --> 00:14:29,360
BIOS I don't know why it always takes

288
00:14:29,360 --> 00:14:31,490
like at least an hour to get to the

289
00:14:31,490 --> 00:14:33,140
point where you can build it so you have

290
00:14:33,140 --> 00:14:34,700
to install Visual Studio the proper way

291
00:14:34,700 --> 00:14:37,550
and Python if you have multiple visual

292
00:14:37,550 --> 00:14:39,770
Studios you have to make sure that you

293
00:14:39,770 --> 00:14:42,940
know you know mix everything together so

294
00:14:42,940 --> 00:14:46,160
my advice to you is if you can run this

295
00:14:46,160 --> 00:14:49,010
all in the VM do it it might be a little

296
00:14:49,010 --> 00:14:50,900
bit slower but at least you get a clean

297
00:14:50,900 --> 00:14:54,470
build environment and you can trust and

298
00:14:54,470 --> 00:14:56,510
repeat with in repeat yeah yeah because

299
00:14:56,510 --> 00:14:57,830
at some point you want to install visual

300
00:14:57,830 --> 00:15:00,440
studio 2019 and it messes up a path

301
00:15:00,440 --> 00:15:03,740
somewhere and then you just yeah there's

302
00:15:03,740 --> 00:15:05,030
the by step instructions through there

303
00:15:05,030 --> 00:15:07,220
and let us know if you have problems

304
00:15:07,220 --> 00:15:09,910
yeah

305
00:15:09,960 --> 00:15:15,360
so debug is obviously slower put larger

306
00:15:15,360 --> 00:15:17,550
image it's clunkier but you can use the

307
00:15:17,550 --> 00:15:19,649
serial port to get all the debug output

308
00:15:19,649 --> 00:15:23,190
and see things like a certain tracers

309
00:15:23,190 --> 00:15:25,170
yeah there's a lot of stuff coming out

310
00:15:25,170 --> 00:15:27,600
of serial if you boot in debug and it

311
00:15:27,600 --> 00:15:30,660
takes what like eight times fast lower

312
00:15:30,660 --> 00:15:34,140
than release oh yeah but you get a lot

313
00:15:34,140 --> 00:15:38,820
more insight into the code alright so

314
00:15:38,820 --> 00:15:41,610
one let's let's see how we could step

315
00:15:41,610 --> 00:15:43,980
through the BIOS Katniss so we need to

316
00:15:43,980 --> 00:15:45,510
be in protective mode in order to do

317
00:15:45,510 --> 00:15:51,890
this so we can break on reset and then

318
00:15:51,890 --> 00:15:56,459
step over step step from the reset

319
00:15:56,459 --> 00:15:58,980
vector to jump into protected mode once

320
00:15:58,980 --> 00:16:01,050
we're in protected mode we can load the

321
00:16:01,050 --> 00:16:02,970
symbols is there not already loaded with

322
00:16:02,970 --> 00:16:09,120
the load this tab and it'll again work

323
00:16:09,120 --> 00:16:13,020
on all the the faces for for you if I

324
00:16:13,020 --> 00:16:15,990
suck VI Dixie and you can set which

325
00:16:15,990 --> 00:16:18,050
modules you're interested in and it'll

326
00:16:18,050 --> 00:16:22,260
halt on entry or each one of these

327
00:16:22,260 --> 00:16:24,690
modules so in order for you to start an

328
00:16:24,690 --> 00:16:30,170
agent-based debug session for UEFI you

329
00:16:30,170 --> 00:16:32,790
select UEFI agent in the connection

330
00:16:32,790 --> 00:16:36,120
method click connect power on your

331
00:16:36,120 --> 00:16:39,000
target and then you can add the names of

332
00:16:39,000 --> 00:16:40,800
the UEFI modules that you're interested

333
00:16:40,800 --> 00:16:44,550
in to the watch list and the debug

334
00:16:44,550 --> 00:16:48,240
target will halt every time a module

335
00:16:48,240 --> 00:16:49,980
matching the name to the watch list is

336
00:16:49,980 --> 00:16:53,390
loaded and you'll need to delete those

337
00:16:53,390 --> 00:16:56,550
break points so you can see the

338
00:16:56,550 --> 00:17:00,990
subsequent ones but this is pretty

339
00:17:00,990 --> 00:17:03,600
useful so you can stop MPI you can stop

340
00:17:03,600 --> 00:17:06,480
and see you can stop wherever you want

341
00:17:06,480 --> 00:17:08,760
and we'll teach you how to set different

342
00:17:08,760 --> 00:17:13,199
types of breakpoints as well great

343
00:17:13,199 --> 00:17:15,780
points so there's a few different types

344
00:17:15,780 --> 00:17:17,220
of breakpoints that you can do there's a

345
00:17:17,220 --> 00:17:18,800
drop-down menu that you can select

346
00:17:18,800 --> 00:17:22,079
specific things like break on reset or

347
00:17:22,079 --> 00:17:22,970
break on this am

348
00:17:22,970 --> 00:17:26,449
Center we have an example using that at

349
00:17:26,449 --> 00:17:31,010
the end a little video script Mickey

350
00:17:31,010 --> 00:17:34,490
created some of you may be familiar with

351
00:17:34,490 --> 00:17:38,510
CPU dead loop which is basically what we

352
00:17:38,510 --> 00:17:40,490
used to do we will set an infinite loop

353
00:17:40,490 --> 00:17:43,820
there so that it'll stop basically and

354
00:17:43,820 --> 00:17:47,090
we can debug starting from there

355
00:17:47,090 --> 00:17:49,340
the problem with doing that is that your

356
00:17:49,340 --> 00:17:51,260
system trace is probably going to be

357
00:17:51,260 --> 00:17:52,520
filled with stuff that's not very

358
00:17:52,520 --> 00:17:55,789
valuable or interesting to the specific

359
00:17:55,789 --> 00:17:58,010
thing that you're trying to do so there

360
00:17:58,010 --> 00:18:01,940
is a better way a special DCI breakpoint

361
00:18:01,940 --> 00:18:03,740
something called an ice break

362
00:18:03,740 --> 00:18:07,370
it's an Intel Architecture opcode called

363
00:18:07,370 --> 00:18:12,909
int 1 so it'll help the processor and

364
00:18:12,909 --> 00:18:17,000
you'll be you'll have the correct trace

365
00:18:17,000 --> 00:18:19,280
information that you expect and then you

366
00:18:19,280 --> 00:18:22,190
can just step over it there's no sing

367
00:18:22,190 --> 00:18:24,940
equivalent it's assembly code and it's

368
00:18:24,940 --> 00:18:28,789
just basically this tiny little blur of

369
00:18:28,789 --> 00:18:32,419
into one and then just read you added to

370
00:18:32,419 --> 00:18:34,700
a file called CPU s breakpoint dot nasa

371
00:18:34,700 --> 00:18:38,750
mew included in your /i 8:32 and slash

372
00:18:38,750 --> 00:18:41,750
six x64 directories and then you just

373
00:18:41,750 --> 00:18:44,230
call them from the C file

374
00:18:44,230 --> 00:18:47,600
CPI's breakpoint and you define it as an

375
00:18:47,600 --> 00:18:49,610
external point and then you just call it

376
00:18:49,610 --> 00:18:53,360
and make sure to include the NASM files

377
00:18:53,360 --> 00:19:01,429
in the INF file build and repeat now you

378
00:19:01,429 --> 00:19:07,549
also need to make sure to add the in to

379
00:19:07,549 --> 00:19:09,289
enable the exception Handler and the

380
00:19:09,289 --> 00:19:11,809
console so that you can trap it so

381
00:19:11,809 --> 00:19:14,390
basically you choose the thread that you

382
00:19:14,390 --> 00:19:17,150
want to break on and then you do thread

383
00:19:17,150 --> 00:19:19,400
whatever the read ID you want to break

384
00:19:19,400 --> 00:19:25,390
on the breakpoints add int one exception

385
00:19:27,150 --> 00:19:31,500
and after chips like fun all right so we

386
00:19:31,500 --> 00:19:34,230
walked a little bit over about what chip

387
00:19:34,230 --> 00:19:35,400
psyche is and all the forensic

388
00:19:35,400 --> 00:19:37,950
capabilities that it has you can see

389
00:19:37,950 --> 00:19:40,920
what drivers are loaded which ones are

390
00:19:40,920 --> 00:19:44,610
blacklisted whitelisted etc look at the

391
00:19:44,610 --> 00:19:46,920
TPM do a whole bunch of stuff and and

392
00:19:46,920 --> 00:19:51,290
tools as of release one three six of

393
00:19:51,290 --> 00:19:56,300
late last year we have Dow support and

394
00:19:56,300 --> 00:19:59,700
that enables us to break somewhere and

395
00:19:59,700 --> 00:20:03,540
use chips ik on the Python console which

396
00:20:03,540 --> 00:20:06,290
will show in the demo again mm-hmm the

397
00:20:06,290 --> 00:20:08,610
formatting for chips like is a little

398
00:20:08,610 --> 00:20:11,400
different so basically what you want to

399
00:20:11,400 --> 00:20:14,160
do is just install system studio then

400
00:20:14,160 --> 00:20:18,620
install PI 132 and setup tools these are

401
00:20:18,620 --> 00:20:24,900
yeah so you clean your chip sack you

402
00:20:24,900 --> 00:20:27,450
install chip sack connect and halt the

403
00:20:27,450 --> 00:20:30,420
platform and then you import chip sex so

404
00:20:30,420 --> 00:20:32,520
for example import chip psych underscore

405
00:20:32,520 --> 00:20:34,650
main and then you can run chip psych

406
00:20:34,650 --> 00:20:37,230
underscore main main and if you want to

407
00:20:37,230 --> 00:20:39,630
run a specific module there's a bit of

408
00:20:39,630 --> 00:20:44,220
funky parentheses and a comma syntax

409
00:20:44,220 --> 00:20:46,679
here but you can run just the BIOS

410
00:20:46,679 --> 00:20:49,830
write-protect or you can do logs the

411
00:20:49,830 --> 00:20:51,660
logs will be saved to the place where

412
00:20:51,660 --> 00:20:53,429
your Python console is running from so

413
00:20:53,429 --> 00:20:57,090
it's typically see until Dow but could

414
00:20:57,090 --> 00:20:58,350
be anywhere Program Files when you

415
00:20:58,350 --> 00:21:00,000
installed it it's from wherever you're

416
00:21:00,000 --> 00:21:04,860
running it from alright Windows do you

417
00:21:04,860 --> 00:21:07,370
wanna do that now

418
00:21:15,850 --> 00:21:38,100
and you see that Oh No okay

419
00:21:38,279 --> 00:21:43,149
can you see the text in the back or I

420
00:21:43,149 --> 00:21:45,179
need to be a little bit bigger

421
00:21:45,179 --> 00:21:49,989
this is better so I wanted to get cut in

422
00:21:49,989 --> 00:21:52,330
the corner windows keep snapping it back

423
00:21:52,330 --> 00:21:58,539
to is this biggest I can get it all

424
00:21:58,539 --> 00:22:03,879
right if you can't see it and you want

425
00:22:03,879 --> 00:22:06,099
to see it just come closer basically

426
00:22:06,099 --> 00:22:10,649
this is the Python console starting up

427
00:22:10,649 --> 00:22:15,460
Ladell connecting to a skylake laptop

428
00:22:15,460 --> 00:22:18,419
that I have with me it's a Dell Latitude

429
00:22:18,419 --> 00:22:23,080
so just a quick disclaimer there's a

430
00:22:23,080 --> 00:22:24,909
timer at the bottom it shows real life

431
00:22:24,909 --> 00:22:27,669
time it's sped up so you'd understand

432
00:22:27,669 --> 00:22:29,049
you get a grasp of how long it usually

433
00:22:29,049 --> 00:22:34,019
takes so just start up set up and halt

434
00:22:34,019 --> 00:22:38,019
it takes 45 seconds give or take from

435
00:22:38,019 --> 00:22:41,580
start to finish now that we have a

436
00:22:41,580 --> 00:22:44,470
console we import chip sack in this case

437
00:22:44,470 --> 00:22:49,929
chip sack you till I call spy read I

438
00:22:49,929 --> 00:22:53,619
want to read 20 X bytes from position 0

439
00:22:53,619 --> 00:23:00,580
from the spy it halts the CPU and it

440
00:23:00,580 --> 00:23:06,159
reads the spy content now go this is the

441
00:23:06,159 --> 00:23:11,950
beginning of spy and I think we go let's

442
00:23:11,950 --> 00:23:16,779
the CPU resume this this is kind of

443
00:23:16,779 --> 00:23:20,019
Awesome if you tend to deal with us by

444
00:23:20,019 --> 00:23:23,739
often but a caveat is this is really

445
00:23:23,739 --> 00:23:27,099
very very slow if you want to dump the

446
00:23:27,099 --> 00:23:29,470
whole spy using ITP

447
00:23:29,470 --> 00:23:32,350
I better go for lunch probably an hour

448
00:23:32,350 --> 00:23:36,640
yeah about an hour eight Meg's but if

449
00:23:36,640 --> 00:23:39,730
you want to do specific stuff anything

450
00:23:39,730 --> 00:23:42,100
chips I can do you can do with ITP at

451
00:23:42,100 --> 00:23:44,590
any point you halt the system which is

452
00:23:44,590 --> 00:23:46,360
at any point during boot which is pretty

453
00:23:46,360 --> 00:23:47,470
cop yeah so from the reset vector

454
00:23:47,470 --> 00:23:53,050
onwards it's up to you we chose to do

455
00:23:53,050 --> 00:23:54,790
this demo because it shows a little bit

456
00:23:54,790 --> 00:23:56,110
of the functionality a little bit of

457
00:23:56,110 --> 00:23:58,690
what you can do we thought showing the

458
00:23:58,690 --> 00:23:59,890
different breakpoints all the different

459
00:23:59,890 --> 00:24:01,930
places would be kind of anti-climatic of

460
00:24:01,930 --> 00:24:04,990
like oh look it stopped and if we step

461
00:24:04,990 --> 00:24:08,740
over it stops again so but if you have

462
00:24:08,740 --> 00:24:10,330
thoughts of things you want to do or

463
00:24:10,330 --> 00:24:12,120
platform you want to try to get going

464
00:24:12,120 --> 00:24:14,980
and come find us later and we'll help

465
00:24:14,980 --> 00:24:17,230
you do it now we can do a sample app and

466
00:24:17,230 --> 00:24:19,320
just putting a breakpoint wherever and

467
00:24:19,320 --> 00:24:22,600
yeah yeah if you want to see if you want

468
00:24:22,600 --> 00:24:26,640
to ask more specific questions or more

469
00:24:26,640 --> 00:24:29,290
you know personal issues that you want

470
00:24:29,290 --> 00:24:31,690
to discuss about how to do this on your

471
00:24:31,690 --> 00:24:34,150
own computer or whatnot

472
00:24:34,150 --> 00:24:35,860
feel free to catch us afterwards I have

473
00:24:35,860 --> 00:24:37,090
the cables with me if you have your

474
00:24:37,090 --> 00:24:38,560
computer with you then you want to live

475
00:24:38,560 --> 00:24:41,350
dangerously we can do it today and the

476
00:24:41,350 --> 00:24:43,000
point of the talk really is we have

477
00:24:43,000 --> 00:24:47,040
these features we have the software

478
00:24:47,040 --> 00:24:52,390
go forth and debug we can do this on

479
00:24:52,390 --> 00:24:53,680
clothes chassis we can do these on

480
00:24:53,680 --> 00:24:56,050
production systems I can do it over USB

481
00:24:56,050 --> 00:24:59,650
and you can do chip SEC over it so go

482
00:24:59,650 --> 00:25:01,120
ahead give it a shot let us know if you

483
00:25:01,120 --> 00:25:03,910
have questions for any chips like stuff

484
00:25:03,910 --> 00:25:05,620
there's always chips I cadential comm

485
00:25:05,620 --> 00:25:11,590
that goes to me and my team yeah there's

486
00:25:11,590 --> 00:25:13,750
that if there's another video yeah again

487
00:25:13,750 --> 00:25:17,920
once you've uh this is kind of the end

488
00:25:17,920 --> 00:25:19,150
so you want to do that before I say

489
00:25:19,150 --> 00:25:20,410
thank you know say thank you and then

490
00:25:20,410 --> 00:25:22,540
say thank you yeah Laurie thank you so

491
00:25:22,540 --> 00:25:27,600
much she they have a ton of material and

492
00:25:27,600 --> 00:25:30,220
including the stuff we've presented but

493
00:25:30,220 --> 00:25:31,630
so much more there's training and stuff

494
00:25:31,630 --> 00:25:35,760
go check out tiana core on github and

495
00:25:35,760 --> 00:25:38,590
and of course a chips like team for

496
00:25:38,590 --> 00:25:40,000
enabling the hardware abstraction layer

497
00:25:40,000 --> 00:25:42,340
to be able to support dow i think that's

498
00:25:42,340 --> 00:25:43,090
pretty powerful

499
00:25:43,090 --> 00:25:45,370
pretty awesome so I think it's

500
00:25:45,370 --> 00:25:46,419
definitely a good thing for our

501
00:25:46,419 --> 00:25:51,460
community and one more oh because

502
00:25:51,460 --> 00:25:54,429
lawyers yes there's also the backup you

503
00:25:54,429 --> 00:25:57,039
wanna ah just that flips or would

504
00:25:57,039 --> 00:25:58,690
there's a bunch of stuff in here you can

505
00:25:58,690 --> 00:26:00,549
go look at it it tells you where to get

506
00:26:00,549 --> 00:26:03,759
stuff where stuff is all the different

507
00:26:03,759 --> 00:26:06,190
things that are available like what's

508
00:26:06,190 --> 00:26:08,620
what where's where yeah where the trace

509
00:26:08,620 --> 00:26:11,919
is where the breakpoints would be good

510
00:26:11,919 --> 00:26:15,309
for reference neck just connect this is

511
00:26:15,309 --> 00:26:18,279
your console window click to connect

512
00:26:18,279 --> 00:26:20,320
select the probe which is usually DCI

513
00:26:20,320 --> 00:26:24,700
what platform you have yeah oh yeah um

514
00:26:24,700 --> 00:26:28,720
you can resume how to restart step over

515
00:26:28,720 --> 00:26:33,610
step into um you can look at your

516
00:26:33,610 --> 00:26:38,100
threads and see all de registro flags

517
00:26:38,100 --> 00:26:41,740
and see variables page tables that's it

518
00:26:41,740 --> 00:26:45,309
all the things so that's that's the

519
00:26:45,309 --> 00:26:49,570
Intel side and now let's make you sad so

520
00:26:49,570 --> 00:26:56,169
one more one more demo that is kind of

521
00:26:56,169 --> 00:27:01,809
interesting is so this is not new it's

522
00:27:01,809 --> 00:27:05,169
been it's on on the internet for almost

523
00:27:05,169 --> 00:27:08,139
two years now if you're interested in SM

524
00:27:08,139 --> 00:27:10,629
Ram and stopping and looking in it and

525
00:27:10,629 --> 00:27:14,350
playing with us around there's a like a

526
00:27:14,350 --> 00:27:17,499
pen line worth of script that allows you

527
00:27:17,499 --> 00:27:20,259
to dump us around so this is an example

528
00:27:20,259 --> 00:27:22,470
of how to do this from ITP and a script

529
00:27:22,470 --> 00:27:26,889
it's principally very simple you tell

530
00:27:26,889 --> 00:27:29,799
ITP to break point on s Elementor you

531
00:27:29,799 --> 00:27:33,669
issue an IO on B to you you hold the CPU

532
00:27:33,669 --> 00:27:35,710
in the process you continue you wait for

533
00:27:35,710 --> 00:27:38,860
the break point when it gets the SMI you

534
00:27:38,860 --> 00:27:40,779
break on near semi you're executing in

535
00:27:40,779 --> 00:27:42,789
sm ram and you just dump it and this

536
00:27:42,789 --> 00:27:43,929
isn't one of the breakpoints that you

537
00:27:43,929 --> 00:27:46,629
have to go code and build it's it's by

538
00:27:46,629 --> 00:27:48,820
default part of until system studio drop

539
00:27:48,820 --> 00:27:51,250
down break on us on my mentor it's built

540
00:27:51,250 --> 00:27:53,740
in yeah it's among the other things vm

541
00:27:53,740 --> 00:27:55,710
enter vm exit cement dress and

542
00:27:55,710 --> 00:27:58,260
a recent victor in it there's all kinds

543
00:27:58,260 --> 00:28:06,120
of cool stuff there being a little bit

544
00:28:06,120 --> 00:28:08,970
of time until everything starts up and

545
00:28:08,970 --> 00:28:10,289
connects and everything but what some

546
00:28:10,289 --> 00:28:12,679
connect you can start playing with it

547
00:28:12,679 --> 00:28:15,960
one caveat I forgot to mention you might

548
00:28:15,960 --> 00:28:18,870
get your platform into an inconsistent

549
00:28:18,870 --> 00:28:21,779
state so if you do end up playing with

550
00:28:21,779 --> 00:28:25,649
registers and you know don't don't don't

551
00:28:25,649 --> 00:28:27,090
complain if you do brain surgery on

552
00:28:27,090 --> 00:28:27,570
yourself

553
00:28:27,570 --> 00:28:33,840
so don't blame ITP blame the the

554
00:28:33,840 --> 00:28:42,029
platform you're messing with you knows

555
00:28:42,029 --> 00:28:45,179
we hope the CPU we set the breakpoint

556
00:28:45,179 --> 00:28:49,590
for a sentiment or we should SMI we

557
00:28:49,590 --> 00:28:52,740
break an S mmm and then we just dump the

558
00:28:52,740 --> 00:28:55,559
SM Ram now this takes a while so spit it

559
00:28:55,559 --> 00:28:57,330
up a little bit but as you can see it

560
00:28:57,330 --> 00:29:03,299
take the the contents of SM Ram and I

561
00:29:03,299 --> 00:29:07,559
ready to see temp and that's it pretty

562
00:29:07,559 --> 00:29:12,899
simple now the target you're gonna use

563
00:29:12,899 --> 00:29:16,529
it on it's either a development board so

564
00:29:16,529 --> 00:29:20,399
like up squared you buy this you like a

565
00:29:20,399 --> 00:29:22,380
stuff from an Amazon it's like 220 bucks

566
00:29:22,380 --> 00:29:24,720
or something all that it doesn't come

567
00:29:24,720 --> 00:29:25,980
with a power supply so you divide the

568
00:29:25,980 --> 00:29:29,909
price the power supply and you download

569
00:29:29,909 --> 00:29:33,350
the debug image from Intel you flash it

570
00:29:33,350 --> 00:29:35,940
you can flash it to through USB so you

571
00:29:35,940 --> 00:29:38,460
don't need a flash programmer or use a

572
00:29:38,460 --> 00:29:41,460
flash programmer and then you just go on

573
00:29:41,460 --> 00:29:45,179
and have fun but if you have a laptop

574
00:29:45,179 --> 00:29:47,429
that is skylake and over like six gen

575
00:29:47,429 --> 00:29:51,960
and above that is just a black top the

576
00:29:51,960 --> 00:29:54,000
computer platform anything that's Intel

577
00:29:54,000 --> 00:29:58,080
based six gen and above that you want to

578
00:29:58,080 --> 00:30:02,549
play with for your own amusement or work

579
00:30:02,549 --> 00:30:03,539
or whatever

580
00:30:03,539 --> 00:30:09,389
I recommend msi gigabyte all the the

581
00:30:09,389 --> 00:30:12,209
it's the good manufacturers that leave a

582
00:30:12,209 --> 00:30:16,619
lot of things unlocked so we you get one

583
00:30:16,619 --> 00:30:19,940
of those boards you put in a CPU in and

584
00:30:19,940 --> 00:30:25,249
then you go in the process of basically

585
00:30:25,279 --> 00:30:31,259
enabling DCI and enabling CPU debug I

586
00:30:31,259 --> 00:30:34,919
did this to a laptop if you wanna get an

587
00:30:34,919 --> 00:30:37,369
example I bought a used Dell Latitude

588
00:30:37,369 --> 00:30:39,659
3470 for a hundred bucks off eBay

589
00:30:39,659 --> 00:30:42,329
it's a 6100 skylake machine I have it

590
00:30:42,329 --> 00:30:44,190
with me if you guys want to come play

591
00:30:44,190 --> 00:30:49,349
with it later what I did was I booted I

592
00:30:49,349 --> 00:30:51,599
didn't even open the chassis booted into

593
00:30:51,599 --> 00:30:53,759
UEFI shell from a USB stick with chip

594
00:30:53,759 --> 00:30:56,399
sack dumped the spy found a set of

595
00:30:56,399 --> 00:30:59,249
variable used the ifr extract to look at

596
00:30:59,249 --> 00:31:01,320
the settings found the right settings

597
00:31:01,320 --> 00:31:04,759
for DCI and CPU in debug enable them

598
00:31:04,759 --> 00:31:08,039
through again booting through USB device

599
00:31:08,039 --> 00:31:10,139
using a tool called are you buddy if I

600
00:31:10,139 --> 00:31:13,009
if you're not familiar with it it's a

601
00:31:13,009 --> 00:31:17,309
cool if I tool to look at the variables

602
00:31:17,309 --> 00:31:19,469
and look at all kinds of information the

603
00:31:19,469 --> 00:31:20,969
platform I wanted to show it to you but

604
00:31:20,969 --> 00:31:24,690
the projectors didn't really like UEFI

605
00:31:24,690 --> 00:31:27,690
video which makes sense I was just

606
00:31:27,690 --> 00:31:30,239
hoping to but anyway I'm just gonna go

607
00:31:30,239 --> 00:31:32,459
through the process of doing this off

608
00:31:32,459 --> 00:31:34,709
platform so you can get a sense of how

609
00:31:34,709 --> 00:31:37,859
how how it works so normally you would

610
00:31:37,859 --> 00:31:40,159
just go to setup when this is some this

611
00:31:40,159 --> 00:31:44,249
booting and just go to the DCI settings

612
00:31:44,249 --> 00:31:46,409
and toggle them on if these settings are

613
00:31:46,409 --> 00:31:49,259
removed then you can play with the hii

614
00:31:49,259 --> 00:31:52,469
database and go find where they are and

615
00:31:52,469 --> 00:31:54,479
toggle them back on and modify them

616
00:31:54,479 --> 00:31:56,549
that's what I was doing here already

617
00:31:56,549 --> 00:31:59,909
have the gooood for for that set of

618
00:31:59,909 --> 00:32:02,459
variables so basically I open the dump

619
00:32:02,459 --> 00:32:06,349
that I got from the spy in UEFI tool I

620
00:32:06,349 --> 00:32:11,639
look for that gooood which is set up

621
00:32:11,639 --> 00:32:19,850
right I extract the p32 body and

622
00:32:19,850 --> 00:32:24,430
I'm done next step is use DRF extractor

623
00:32:24,430 --> 00:32:28,220
they get the values off it basically

624
00:32:28,220 --> 00:32:31,730
both of these tools are by Nikolai

625
00:32:31,730 --> 00:32:33,890
Schley you can find them on github there

626
00:32:33,890 --> 00:32:36,440
are other open-source unify tool and the

627
00:32:36,440 --> 00:32:40,030
IRF or IFR extractor confusing the

628
00:32:40,030 --> 00:32:46,880
dyslexia anyway once you get the

629
00:32:46,880 --> 00:32:48,740
information of it you get all of this

630
00:32:48,740 --> 00:32:51,200
information so it's all the settings

631
00:32:51,200 --> 00:32:55,130
that the BIOS has now the easiest place

632
00:32:55,130 --> 00:32:57,610
to start is you just search for DCI and

633
00:32:57,610 --> 00:33:07,160
let me get the font bigger so the first

634
00:33:07,160 --> 00:33:08,600
thing I do is I search for DCI and I

635
00:33:08,600 --> 00:33:11,660
find the setting DCI enabled HD cin

636
00:33:11,660 --> 00:33:14,390
that's the name of the register and the

637
00:33:14,390 --> 00:33:19,910
offset is 538 i write it down set it

638
00:33:19,910 --> 00:33:21,610
aside

639
00:33:21,610 --> 00:33:27,110
DCI auto detect current I don't know if

640
00:33:27,110 --> 00:33:28,400
it's disabled or enabled but you know

641
00:33:28,400 --> 00:33:30,740
disabled 2-0 enabled is one always

642
00:33:30,740 --> 00:33:32,720
double check you never know when someone

643
00:33:32,720 --> 00:33:35,690
decides that enabled is zero all rights

644
00:33:35,690 --> 00:33:38,260
up to you I guess and then the offset

645
00:33:38,260 --> 00:33:40,850
keep searching XD CI support there's

646
00:33:40,850 --> 00:33:44,870
also important 56 D you remember these

647
00:33:44,870 --> 00:33:48,170
three offsets and you're not done yet

648
00:33:48,170 --> 00:33:53,810
this is just a DCI now you need to

649
00:33:53,810 --> 00:33:57,650
enable debug so so DCI is for PC H CPU

650
00:33:57,650 --> 00:34:01,960
debug interface debug interface is for

651
00:34:01,960 --> 00:34:04,910
pro mode people gonna say if you want to

652
00:34:04,910 --> 00:34:06,950
access your course and don't memory

653
00:34:06,950 --> 00:34:09,260
things like that this is the visible

654
00:34:09,260 --> 00:34:13,400
basically sets the debug bit in ia-32

655
00:34:13,400 --> 00:34:17,719
debug game sr or CA t so well this tells

656
00:34:17,719 --> 00:34:20,690
the bios to do it if the vendor hasn't

657
00:34:20,690 --> 00:34:23,090
disabled it so what you do is you

658
00:34:23,090 --> 00:34:25,610
remember these offsets 188 189 the lock

659
00:34:25,610 --> 00:34:28,010
is a lot bit the debug interface is the

660
00:34:28,010 --> 00:34:30,139
debug enable bit you just set that one

661
00:34:30,139 --> 00:34:33,020
is on you I recommend disable the lock

662
00:34:33,020 --> 00:34:33,699
just

663
00:34:33,699 --> 00:34:36,730
just to be safe you know whatever codon

664
00:34:36,730 --> 00:34:39,219
bias translator and that's it so once

665
00:34:39,219 --> 00:34:41,710
you have these offsets you go to your

666
00:34:41,710 --> 00:34:43,839
target machine you put it off you if I

667
00:34:43,839 --> 00:34:48,040
you go to this ru tool it allows you to

668
00:34:48,040 --> 00:34:52,210
edit the non-volatile variables you look

669
00:34:52,210 --> 00:34:53,980
for the setup variable you jump to these

670
00:34:53,980 --> 00:34:55,540
offsets and you make sure the bits are

671
00:34:55,540 --> 00:35:01,240
flipped you save it flash it it flashes

672
00:35:01,240 --> 00:35:04,480
it for you you close the you know it

673
00:35:04,480 --> 00:35:06,790
should shut down the Machine reboot it

674
00:35:06,790 --> 00:35:14,140
and it's in DC I see if I can we have

675
00:35:14,140 --> 00:35:19,000
some time right and no you know if if

676
00:35:19,000 --> 00:35:21,220
anyone wants to ask questions we can do

677
00:35:21,220 --> 00:35:23,049
it now if you only wants hands-on look

678
00:35:23,049 --> 00:35:24,339
at the K ball playing with a computer

679
00:35:24,339 --> 00:35:25,059
look at how it works

680
00:35:25,059 --> 00:35:27,460
come find me all right we have time for

681
00:35:27,460 --> 00:35:31,000
questions that we have so we have any

682
00:35:31,000 --> 00:35:32,020
questions please line up at the

683
00:35:32,020 --> 00:35:37,210
microphones no questions

684
00:35:37,210 --> 00:35:38,470
Thank You room timing to think of a

685
00:35:38,470 --> 00:35:42,089
question it's pretty straightforward

686
00:35:42,089 --> 00:35:43,829
yeah go ahead

687
00:35:43,829 --> 00:35:47,589
you just go to the microphones can you

688
00:35:47,589 --> 00:35:50,290
talk about those USB cables what exactly

689
00:35:50,290 --> 00:36:01,680
happens under the hood so in a nutshell

690
00:36:02,220 --> 00:36:06,579
the entire the the JTAG is implemented

691
00:36:06,579 --> 00:36:09,730
in the 6 gen and above chipsets right so

692
00:36:09,730 --> 00:36:12,839
the USB cable is nothing but the medium

693
00:36:12,839 --> 00:36:15,250
whatever happens there whatever it's

694
00:36:15,250 --> 00:36:16,079
implemented

695
00:36:16,079 --> 00:36:22,270
it's Intel's proprietary technology if

696
00:36:22,270 --> 00:36:24,069
you want to look into it more there's a

697
00:36:24,069 --> 00:36:28,270
Peter Bosch and all the embedding and

698
00:36:28,270 --> 00:36:29,950
research that was published years ago

699
00:36:29,950 --> 00:36:32,440
and B SSB and all all that kind of stuff

700
00:36:32,440 --> 00:36:38,130
that's quite a discussion so basically

701
00:36:38,130 --> 00:36:42,069
the USB port on the device has also

702
00:36:42,069 --> 00:36:45,390
connection to JTAG on the processor and

703
00:36:45,390 --> 00:36:47,170
it depends

704
00:36:47,170 --> 00:36:48,970
yes and no it depends on platforms don't

705
00:36:48,970 --> 00:36:50,860
have the the traces connected to the CPU

706
00:36:50,860 --> 00:36:54,550
from the chipset but in a sense in

707
00:36:54,550 --> 00:36:55,330
essence yes

708
00:36:55,330 --> 00:36:57,610
so the chipset handles the JTAG and goes

709
00:36:57,610 --> 00:36:59,950
genic sent above it should so you can

710
00:36:59,950 --> 00:37:01,870
just use the straight thrill cable and

711
00:37:01,870 --> 00:37:03,850
it should just work otherwise you need

712
00:37:03,850 --> 00:37:05,980
the CCA that implements it for you so

713
00:37:05,980 --> 00:37:08,890
yeah so your platform can talk DCI yes

714
00:37:08,890 --> 00:37:10,900
both platforms are six gen and above you

715
00:37:10,900 --> 00:37:15,010
don't need that CC this may be a

716
00:37:15,010 --> 00:37:18,640
confused question but still so any of

717
00:37:18,640 --> 00:37:21,910
the same tooling could it be used for

718
00:37:21,910 --> 00:37:24,370
debugging and you know just working with

719
00:37:24,370 --> 00:37:26,140
alternative you know firmware

720
00:37:26,140 --> 00:37:27,670
implementations like I don't know core

721
00:37:27,670 --> 00:37:28,930
boots and stuff like that

722
00:37:28,930 --> 00:37:33,100
yes mm-hmm it's Intel Architecture right

723
00:37:33,100 --> 00:37:34,540
all you need to do is flip bits and

724
00:37:34,540 --> 00:37:37,300
registers and MSRs if you do that in

725
00:37:37,300 --> 00:37:40,720
coreboot you can do it so your knowledge

726
00:37:40,720 --> 00:37:43,390
anybody is looking into that I remember

727
00:37:43,390 --> 00:37:45,700
last year there was an attempt to do

728
00:37:45,700 --> 00:37:47,320
something with coreboot with that but

729
00:37:47,320 --> 00:37:49,420
and when we did those have seen Germany

730
00:37:49,420 --> 00:37:50,020
but IE

731
00:37:50,020 --> 00:37:53,440
I haven't seen anything do you want

732
00:37:53,440 --> 00:37:59,850
O'Brien know if anyone here in coreboot

733
00:38:02,520 --> 00:38:07,660
right you know not every platform has BC

734
00:38:07,660 --> 00:38:10,180
I understood ya know it takes is some

735
00:38:10,180 --> 00:38:12,070
some patch of the manufacturers confuse

736
00:38:12,070 --> 00:38:18,090
it off so not every device would have it

737
00:38:18,090 --> 00:38:21,700
there are known if you google there are

738
00:38:21,700 --> 00:38:23,620
known models of machines there like

739
00:38:23,620 --> 00:38:25,510
there's a couple of dell latitudes

740
00:38:25,510 --> 00:38:29,740
there's a p4 sixty there's gigabyte

741
00:38:29,740 --> 00:38:33,340
breaks so gigabyte msi again all the

742
00:38:33,340 --> 00:38:38,670
good stuff are you shaking your head for

743
00:38:38,670 --> 00:38:42,280
debug enabling debug in a woman and a

744
00:38:42,280 --> 00:38:44,050
Sturrock also good for buffer overflows

745
00:38:44,050 --> 00:38:47,140
and remote code execution where does one

746
00:38:47,140 --> 00:38:50,380
get a CCA right so you go to design

747
00:38:50,380 --> 00:38:53,950
tools that intercom and you start the

748
00:38:53,950 --> 00:38:58,210
process of an NDA and then you pay them

749
00:38:58,210 --> 00:39:00,250
monies and then you get a box the link

750
00:39:00,250 --> 00:39:00,790
is over

751
00:39:00,790 --> 00:39:05,050
there yeah anybody could do it anybody

752
00:39:05,050 --> 00:39:09,220
yeah Sarris I know but if you if you

753
00:39:09,220 --> 00:39:10,390
just don't want to have the hassle of

754
00:39:10,390 --> 00:39:12,340
the CCA box just get a machine that's

755
00:39:12,340 --> 00:39:16,950
kind of like in above right cool thanks

756
00:39:16,950 --> 00:39:19,060
we have time for three more questions

757
00:39:19,060 --> 00:39:22,410
three more questions very specific well

758
00:39:22,410 --> 00:39:26,740
yeah and one person please for one

759
00:39:26,740 --> 00:39:30,209
really long or one really long question

760
00:39:38,190 --> 00:39:40,660
I'm sorry can you please step middle bit

761
00:39:40,660 --> 00:39:42,430
closer to the microphone yeah can even

762
00:39:42,430 --> 00:39:48,730
like bend it down a little bit so this

763
00:39:48,730 --> 00:39:52,120
is looks like a security risk you know

764
00:39:52,120 --> 00:39:56,620
if you can't get back up so it really

765
00:39:56,620 --> 00:39:58,360
depends on your threat model right if

766
00:39:58,360 --> 00:40:02,650
you consider physical access in your

767
00:40:02,650 --> 00:40:05,080
threat model then yes and that's what

768
00:40:05,080 --> 00:40:07,270
the the settings are for and om can

769
00:40:07,270 --> 00:40:10,020
choose to disable them lock it and

770
00:40:10,020 --> 00:40:12,130
remove the settings all together to

771
00:40:12,130 --> 00:40:15,880
prevent users from using it but then

772
00:40:15,880 --> 00:40:18,760
again if you if your system is a server

773
00:40:18,760 --> 00:40:23,320
and you consider a data center or a

774
00:40:23,320 --> 00:40:27,060
protected place it just it depends right

775
00:40:27,060 --> 00:40:28,270
okay

776
00:40:28,270 --> 00:40:30,910
in a perfect world you won't be able to

777
00:40:30,910 --> 00:40:34,690
do debug in production but we all know

778
00:40:34,690 --> 00:40:38,230
we don't live in a perfect world so we

779
00:40:38,230 --> 00:40:40,330
can get to have fun in production

780
00:40:40,330 --> 00:40:45,340
systems yeah you're right if you worry

781
00:40:45,340 --> 00:40:46,570
don't long enough people come up with

782
00:40:46,570 --> 00:40:48,280
questions well you gotta think about

783
00:40:48,280 --> 00:40:50,470
giving a chance this is just a little

784
00:40:50,470 --> 00:40:52,300
more food for thought more than a

785
00:40:52,300 --> 00:40:55,870
question but we saw the some of us were

786
00:40:55,870 --> 00:41:00,640
at the usb anywhere reveal today which

787
00:41:00,640 --> 00:41:03,310
basically meant supermicro boards it was

788
00:41:03,310 --> 00:41:07,660
a bug basically through the BMC it

789
00:41:07,660 --> 00:41:09,670
attached to USB so just thought wow

790
00:41:09,670 --> 00:41:11,890
that'd be interesting to attach the USB

791
00:41:11,890 --> 00:41:14,200
and then

792
00:41:14,200 --> 00:41:18,069
you know get ahold of the DCI and you

793
00:41:18,069 --> 00:41:20,890
know that's an interesting thought I

794
00:41:20,890 --> 00:41:24,160
don't think it will work I mean I don't

795
00:41:24,160 --> 00:41:26,170
know about the implementation of it I

796
00:41:26,170 --> 00:41:28,319
know it uses the medium over the USB

797
00:41:28,319 --> 00:41:31,539
stack but it's not actually using the

798
00:41:31,539 --> 00:41:35,049
USB oh wrapping so I don't remember

799
00:41:35,049 --> 00:41:38,380
exactly if it's if the be SSB go inside

800
00:41:38,380 --> 00:41:40,240
the USB or is it just me SSB without use

801
00:41:40,240 --> 00:41:43,450
be so it just switches off to a DCI mode

802
00:41:43,450 --> 00:41:46,269
on the port and then in that case then

803
00:41:46,269 --> 00:41:47,769
you would have to emulate those packets

804
00:41:47,769 --> 00:41:50,440
and not the same the USB is just a

805
00:41:50,440 --> 00:41:52,599
medium and then it's using a different

806
00:41:52,599 --> 00:41:54,700
they use me is the physical medium hmm I

807
00:41:54,700 --> 00:41:58,990
don't know what goes over the wire it

808
00:41:58,990 --> 00:42:00,880
may not be what compliant three dot out

809
00:42:00,880 --> 00:42:01,809
Oh

810
00:42:01,809 --> 00:42:04,000
it may not be USB three computing but

811
00:42:04,000 --> 00:42:05,260
can you talk a little bit more than

812
00:42:05,260 --> 00:42:09,010
about the protocol that it talks if it's

813
00:42:09,010 --> 00:42:11,289
not you know it's not USB it's something

814
00:42:11,289 --> 00:42:14,319
as far as I know its proprietary there

815
00:42:14,319 --> 00:42:17,529
there are efforts going on to

816
00:42:17,529 --> 00:42:21,930
reverse-engineer it online I don't know

817
00:42:21,930 --> 00:42:24,640
and it's about article called or does it

818
00:42:24,640 --> 00:42:27,750
have any that's thing that does DCI ITP

819
00:42:27,750 --> 00:42:32,019
okay cool yeah basically there's a lot

820
00:42:32,019 --> 00:42:34,240
of acronyms and names when you talk

821
00:42:34,240 --> 00:42:40,150
about Intel products alright okay then

822
00:42:40,150 --> 00:42:41,090
that's about it

823
00:42:41,090 --> 00:42:43,010
since a banana round of applause while

824
00:42:43,010 --> 00:42:45,350
Maggie and Maggie very much thank you

825
00:42:45,350 --> 00:42:53,170
[Music]

