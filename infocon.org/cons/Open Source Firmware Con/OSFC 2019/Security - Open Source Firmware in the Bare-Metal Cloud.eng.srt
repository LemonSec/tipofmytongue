1
00:00:03,190 --> 00:00:06,259
[Music]

2
00:00:07,610 --> 00:00:10,950
alright hello everybody I'm Scott burns

3
00:00:10,950 --> 00:00:13,290
I'm the senior director of research and

4
00:00:13,290 --> 00:00:17,550
development at packet alright but you a

5
00:00:17,550 --> 00:00:20,220
packet is this one at welcome everybody

6
00:00:20,220 --> 00:00:21,930
to open source firmware conference I

7
00:00:21,930 --> 00:00:22,980
think it's a great place for everybody

8
00:00:22,980 --> 00:00:24,660
to collaborate on open source firmware

9
00:00:24,660 --> 00:00:26,789
and that OPIC didn't you're doing this

10
00:00:26,789 --> 00:00:31,170
every year so I work for packet packet

11
00:00:31,170 --> 00:00:33,960
is a bare metal cloud company so instead

12
00:00:33,960 --> 00:00:36,120
of what I'll call a traditional cloud

13
00:00:36,120 --> 00:00:40,200
where you get a virtual machine we give

14
00:00:40,200 --> 00:00:43,079
out full servers so the minimum unit you

15
00:00:43,079 --> 00:00:45,420
get instead of a virtual machine which

16
00:00:45,420 --> 00:00:49,890
you might be sharing might have you know

17
00:00:49,890 --> 00:00:51,390
tons of virtual machines with other

18
00:00:51,390 --> 00:00:53,010
customers on a server well we give you

19
00:00:53,010 --> 00:00:55,350
the entire server now that doesn't mean

20
00:00:55,350 --> 00:01:00,750
that it has to be a dual socket server

21
00:01:00,750 --> 00:01:03,930
with terabyte of RAM you can start small

22
00:01:03,930 --> 00:01:06,299
we have small servers with just quad

23
00:01:06,299 --> 00:01:09,960
core atom processors and a couple gigs

24
00:01:09,960 --> 00:01:11,369
of ram and we go all the way up so you

25
00:01:11,369 --> 00:01:12,990
can start small even though you have a

26
00:01:12,990 --> 00:01:16,580
full server at different sizes available

27
00:01:16,580 --> 00:01:22,430
to fit your workload and so I'm like

28
00:01:22,430 --> 00:01:26,400
most cloud computing providers we give

29
00:01:26,400 --> 00:01:28,080
you full access to the server there is

30
00:01:28,080 --> 00:01:29,909
no hypervisor involved at all

31
00:01:29,909 --> 00:01:32,520
if direct access so you get you stole

32
00:01:32,520 --> 00:01:33,720
your operating system directly on the

33
00:01:33,720 --> 00:01:37,350
server and you have full control once we

34
00:01:37,350 --> 00:01:40,380
hand it over to you you are welcome to

35
00:01:40,380 --> 00:01:41,700
bring your own virtualization if you

36
00:01:41,700 --> 00:01:44,930
like you can run yes exei you can run

37
00:01:44,930 --> 00:01:48,540
KVM marzan would run any virtualization

38
00:01:48,540 --> 00:01:50,189
you want on top or you can just run your

39
00:01:50,189 --> 00:01:53,100
workload directly on the bare metal it's

40
00:01:53,100 --> 00:01:55,140
up to you that's part of the reason I

41
00:01:55,140 --> 00:01:56,869
actually got involved with packet

42
00:01:56,869 --> 00:01:58,460
because I thought it kind of

43
00:01:58,460 --> 00:02:01,770
democratizes the cloud the world you're

44
00:02:01,770 --> 00:02:04,979
not getting locked into using you know

45
00:02:04,979 --> 00:02:07,439
proprietary stack with a particular

46
00:02:07,439 --> 00:02:11,849
provider we give you a server and you do

47
00:02:11,849 --> 00:02:13,959
what you like with it basically

48
00:02:13,959 --> 00:02:15,519
as part of the reason that I got

49
00:02:15,519 --> 00:02:19,450
involved with a packet to begin with and

50
00:02:19,450 --> 00:02:23,430
we also support a lot of open source

51
00:02:23,430 --> 00:02:25,150
foundations like the Linux Foundation

52
00:02:25,150 --> 00:02:26,890
and the cloud native computing

53
00:02:26,890 --> 00:02:32,049
foundation just some of many we really

54
00:02:32,049 --> 00:02:33,819
like to engage with the open source

55
00:02:33,819 --> 00:02:38,310
community and give back when we can

56
00:02:39,030 --> 00:02:41,409
actually before I continue I should

57
00:02:41,409 --> 00:02:43,269
introduce myself a little bit so I've

58
00:02:43,269 --> 00:02:45,280
been in the web hosting industry for

59
00:02:45,280 --> 00:02:52,840
about 20 years almost now so I've been

60
00:02:52,840 --> 00:02:56,620
involved long before BMC's were a thing

61
00:02:56,620 --> 00:02:58,120
and servers know nowadays you kind of

62
00:02:58,120 --> 00:02:59,530
expect the server to come with the BMC

63
00:02:59,530 --> 00:03:02,310
and as they control the power and

64
00:03:02,310 --> 00:03:05,379
connect your virtual media and have your

65
00:03:05,379 --> 00:03:08,069
you know virtual console and all that

66
00:03:08,069 --> 00:03:11,290
back when I started using servers that

67
00:03:11,290 --> 00:03:12,940
was just starting to become a thing you

68
00:03:12,940 --> 00:03:16,780
could add a BMC add-on card and at that

69
00:03:16,780 --> 00:03:21,819
time gave you the ability to turn the

70
00:03:21,819 --> 00:03:24,519
server on and off give you a serial

71
00:03:24,519 --> 00:03:26,410
console and if you were lucky you might

72
00:03:26,410 --> 00:03:28,440
have had access to some sensors but

73
00:03:28,440 --> 00:03:30,810
nothing like today where you have

74
00:03:30,810 --> 00:03:34,690
virtual media and any of it all these

75
00:03:34,690 --> 00:03:38,489
other features we have on a modern BMC

76
00:03:38,489 --> 00:03:46,180
all right so I've been spending about

77
00:03:46,180 --> 00:03:50,709
four months now focusing mainly on using

78
00:03:50,709 --> 00:03:54,669
open source firmware on package servers

79
00:03:54,669 --> 00:03:58,959
so you know at the moment we use

80
00:03:58,959 --> 00:04:01,840
whatever BIOS the vendor supplies we use

81
00:04:01,840 --> 00:04:04,629
whatever BMC firmware comes with the

82
00:04:04,629 --> 00:04:07,799
server but really want to change that

83
00:04:07,799 --> 00:04:11,560
anybody who's dealt with BMC's much

84
00:04:11,560 --> 00:04:17,019
knows the quality is missing too but

85
00:04:17,019 --> 00:04:21,760
lately there have been problems with EMC

86
00:04:21,760 --> 00:04:25,450
firmware or now we've reported it and it

87
00:04:25,450 --> 00:04:27,010
takes months just to get an

88
00:04:27,010 --> 00:04:27,930
acknowledgment

89
00:04:27,930 --> 00:04:30,000
you know tickets been opened that you

90
00:04:30,000 --> 00:04:32,880
can look at it if we're lucky maybe a

91
00:04:32,880 --> 00:04:34,620
year and a half later two years later

92
00:04:34,620 --> 00:04:38,190
the bug gets fixed so you know part part

93
00:04:38,190 --> 00:04:41,580
of that has to do with there's so many

94
00:04:41,580 --> 00:04:43,500
parties involved with writing BMC

95
00:04:43,500 --> 00:04:45,630
firmware you know the the actual server

96
00:04:45,630 --> 00:04:47,699
vendor usually isn't doing it their

97
00:04:47,699 --> 00:04:50,639
selves they're usually outsourcing it to

98
00:04:50,639 --> 00:04:52,800
another company which is using an SDK

99
00:04:52,800 --> 00:04:56,850
from another company which is then you

100
00:04:56,850 --> 00:05:00,150
know write writing the libraries to run

101
00:05:00,150 --> 00:05:03,000
on another vendors BMC and there's just

102
00:05:03,000 --> 00:05:05,820
multiple players involved and anytime

103
00:05:05,820 --> 00:05:07,680
you report a problem nobody wants to

104
00:05:07,680 --> 00:05:11,520
take responsibility for it so you know

105
00:05:11,520 --> 00:05:13,500
enough of that we want to just get in

106
00:05:13,500 --> 00:05:14,520
there and be able to fix problems

107
00:05:14,520 --> 00:05:17,610
ourselves the BMC is obviously an

108
00:05:17,610 --> 00:05:21,419
important part of a bare-metal cloud we

109
00:05:21,419 --> 00:05:26,900
need the ability to control the server

110
00:05:26,900 --> 00:05:29,010
without having any sort of agent

111
00:05:29,010 --> 00:05:30,539
installed on the host operating system

112
00:05:30,539 --> 00:05:34,130
because in the bare-metal cloud case

113
00:05:34,130 --> 00:05:36,720
like the customer has full control off

114
00:05:36,720 --> 00:05:39,510
the host system once we hand it over to

115
00:05:39,510 --> 00:05:43,680
them so any value-added features that

116
00:05:43,680 --> 00:05:45,780
we're going to have we need to have in

117
00:05:45,780 --> 00:05:48,000
the BMC and that's why we really need

118
00:05:48,000 --> 00:05:50,280
control off the firmware running on the

119
00:05:50,280 --> 00:05:56,550
BMC so I work in the research and

120
00:05:56,550 --> 00:05:58,349
development part of packet so I'm in a

121
00:05:58,349 --> 00:06:02,160
small group called packet labs and one

122
00:06:02,160 --> 00:06:03,360
of the things we do is we try to keep

123
00:06:03,360 --> 00:06:06,720
our options open so you know I've listed

124
00:06:06,720 --> 00:06:09,660
a number of different firmware projects

125
00:06:09,660 --> 00:06:11,760
here and you know we're looking at all

126
00:06:11,760 --> 00:06:13,050
these at the same time we don't want to

127
00:06:13,050 --> 00:06:16,080
pick a winner just yet so the BMC saw it

128
00:06:16,080 --> 00:06:19,710
open bmc's kind of an obvious choice to

129
00:06:19,710 --> 00:06:22,770
go with but you BMC is also doing some

130
00:06:22,770 --> 00:06:25,530
interesting things and so taking a look

131
00:06:25,530 --> 00:06:28,289
good both the same time and then on the

132
00:06:28,289 --> 00:06:30,479
bio side of Krushchev coreboot Tiano

133
00:06:30,479 --> 00:06:36,210
core Linux boot see bios and for for arm

134
00:06:36,210 --> 00:06:37,740
servers you know so if the trusted firm

135
00:06:37,740 --> 00:06:40,099
work I'll go into more details on these

136
00:06:40,099 --> 00:06:42,340
leaders

137
00:06:42,340 --> 00:06:47,889
so on the BMC side you have open BMC and

138
00:06:47,889 --> 00:06:52,099
ufu BMC for most part if anybody is

139
00:06:52,099 --> 00:06:55,849
working on any open source BMC projects

140
00:06:55,849 --> 00:06:57,380
besides those I'd love to hear about

141
00:06:57,380 --> 00:06:59,120
them those are obviously the two obvious

142
00:06:59,120 --> 00:07:03,819
choices all right now so open BMC

143
00:07:03,819 --> 00:07:06,280
originally started by Facebook they

144
00:07:06,280 --> 00:07:10,250
released it publicly in 2015 but they

145
00:07:10,250 --> 00:07:14,300
were prototyping it in 2014 for the

146
00:07:14,300 --> 00:07:16,250
wedge switch they were designing at the

147
00:07:16,250 --> 00:07:20,479
time when people think about open BMC

148
00:07:20,479 --> 00:07:22,880
it's usually version they're thinking

149
00:07:22,880 --> 00:07:25,639
about from Facebook but around the same

150
00:07:25,639 --> 00:07:32,389
time IBM also released BMC firmware with

151
00:07:32,389 --> 00:07:34,099
the same name which kind of made things

152
00:07:34,099 --> 00:07:35,960
a little confusing so IBM was

153
00:07:35,960 --> 00:07:38,720
collaborating with Rackspace on an open

154
00:07:38,720 --> 00:07:42,740
power server and you know I think they

155
00:07:42,740 --> 00:07:44,060
had some communication with Facebook

156
00:07:44,060 --> 00:07:45,740
when they did this but they basically

157
00:07:45,740 --> 00:07:50,090
released their own open BMC which is

158
00:07:50,090 --> 00:07:57,259
still based on Yocto Nicks and at a very

159
00:07:57,259 --> 00:07:59,960
similar build process but very different

160
00:07:59,960 --> 00:08:02,630
codebase very different community and so

161
00:08:02,630 --> 00:08:04,820
for a few years or is really confusing

162
00:08:04,820 --> 00:08:07,099
situation when you talk about open BMC

163
00:08:07,099 --> 00:08:08,960
you don't know if somebody's talking

164
00:08:08,960 --> 00:08:12,849
about Facebook open BMC or IBM open BMC

165
00:08:12,849 --> 00:08:16,490
luckily it's not an issue anymore

166
00:08:16,490 --> 00:08:21,979
so basically Facebook and IBM got

167
00:08:21,979 --> 00:08:24,560
together a few more companies also IBM

168
00:08:24,560 --> 00:08:27,080
Intel and Microsoft and they kind of all

169
00:08:27,080 --> 00:08:30,349
agreed but there are resources behind

170
00:08:30,349 --> 00:08:34,190
one code base so open BMC is now a Linux

171
00:08:34,190 --> 00:08:40,700
Foundation project project and you know

172
00:08:40,700 --> 00:08:42,099
have to worry about competing

173
00:08:42,099 --> 00:08:47,870
communities anymore so but open BMC is

174
00:08:47,870 --> 00:08:50,420
not the only choice out there oh so have

175
00:08:50,420 --> 00:08:55,040
you BMC I was released last year 2018

176
00:08:55,040 --> 00:08:58,300
and it's mainly based on the go language

177
00:08:58,300 --> 00:09:01,100
you know there's still some C code in

178
00:09:01,100 --> 00:09:06,170
the bootloader but once once once you've

179
00:09:06,170 --> 00:09:07,730
booted your kernel you're using the user

180
00:09:07,730 --> 00:09:10,670
role and that's basically Quilly made

181
00:09:10,670 --> 00:09:16,750
out of go it's built on you root and a

182
00:09:16,750 --> 00:09:20,509
change trying to change the status quo

183
00:09:20,509 --> 00:09:24,610
so instead of IPMI they're using G RPC

184
00:09:24,610 --> 00:09:26,110
[Music]

185
00:09:26,110 --> 00:09:30,500
that is a kind of method of interacting

186
00:09:30,500 --> 00:09:34,910
with BMC but like I said don't pick

187
00:09:34,910 --> 00:09:36,620
winners yet I think some of the things

188
00:09:36,620 --> 00:09:40,269
you BMC is doing is interesting

189
00:09:40,269 --> 00:09:42,470
one of the nice things about it is it's

190
00:09:42,470 --> 00:09:44,870
simpler to work with so open BMC has a

191
00:09:44,870 --> 00:09:48,470
complex code base and it there's a steep

192
00:09:48,470 --> 00:09:53,420
learning curve to figure out if you want

193
00:09:53,420 --> 00:09:54,740
to make any changes to open BMC you

194
00:09:54,740 --> 00:09:55,910
really need to spend some time with it

195
00:09:55,910 --> 00:09:57,769
first you can just jump in there whereas

196
00:09:57,769 --> 00:10:00,319
you BMC simple code you can probably

197
00:10:00,319 --> 00:10:03,709
find the code you want to change within

198
00:10:03,709 --> 00:10:07,180
a few minutes if you just look around so

199
00:10:07,180 --> 00:10:11,240
spending time hacking on you BMC or

200
00:10:11,240 --> 00:10:12,649
certain projects just because it's just

201
00:10:12,649 --> 00:10:14,000
so much easier just jump in there and

202
00:10:14,000 --> 00:10:16,389
get going

203
00:10:16,519 --> 00:10:20,199
so first problem is okay fine

204
00:10:20,199 --> 00:10:23,180
you've built the BMC image whether

205
00:10:23,180 --> 00:10:25,250
that's with open BMC or you BMC or

206
00:10:25,250 --> 00:10:27,680
something else have you get it onto a

207
00:10:27,680 --> 00:10:31,100
server that has already come with

208
00:10:31,100 --> 00:10:33,920
proprietary firmware so seems like

209
00:10:33,920 --> 00:10:37,010
should be an easy thing but it's not you

210
00:10:37,010 --> 00:10:40,550
have physical access to the server yeah

211
00:10:40,550 --> 00:10:46,329
you know you can hook up SOI c-clip and

212
00:10:46,329 --> 00:10:49,550
this example on the slide I used a

213
00:10:49,550 --> 00:10:53,360
Raspberry Pi connect it to the clip and

214
00:10:53,360 --> 00:10:57,620
clip goes over the SPI flash jet and I

215
00:10:57,620 --> 00:10:59,959
can read and write directly to the flash

216
00:10:59,959 --> 00:11:03,529
that way you know this the motherboard

217
00:11:03,529 --> 00:11:06,110
is not on do you need to provide some

218
00:11:06,110 --> 00:11:08,340
power to the flash chip

219
00:11:08,340 --> 00:11:10,290
but you know you're bought you're

220
00:11:10,290 --> 00:11:11,910
bypassing any software protections or

221
00:11:11,910 --> 00:11:13,890
anything else that other vendor might

222
00:11:13,890 --> 00:11:15,270
try to throw on your way to stop you

223
00:11:15,270 --> 00:11:19,230
from updating firmware so it's kind of a

224
00:11:19,230 --> 00:11:22,350
last resort way to change the firmware

225
00:11:22,350 --> 00:11:26,220
on a server but it doesn't scale you

226
00:11:26,220 --> 00:11:29,040
want to do this to uh you know you say

227
00:11:29,040 --> 00:11:30,750
you have racks full servers you're not

228
00:11:30,750 --> 00:11:32,520
going to pull them all out and hook up a

229
00:11:32,520 --> 00:11:34,440
clip to each one and put it back in the

230
00:11:34,440 --> 00:11:37,410
server back in the rack this is not

231
00:11:37,410 --> 00:11:38,190
going to scale at all

232
00:11:38,190 --> 00:11:42,930
so another method you can use to at

233
00:11:42,930 --> 00:11:46,350
least in the case of a speed BMC's they

234
00:11:46,350 --> 00:11:48,740
distribute a utility called SOC flash

235
00:11:48,740 --> 00:11:51,300
you run it on the host system it

236
00:11:51,300 --> 00:11:53,700
actually bypasses the software stack

237
00:11:53,700 --> 00:11:55,050
that's running on the BMC there's no

238
00:11:55,050 --> 00:11:58,970
kernel involvement or anything like that

239
00:11:58,970 --> 00:12:01,740
thing is what that is that was recently

240
00:12:01,740 --> 00:12:06,089
a lot of BMC vendors didn't realize that

241
00:12:06,089 --> 00:12:07,920
that feature was turned on and their BMC

242
00:12:07,920 --> 00:12:11,460
firmware so the next you might have

243
00:12:11,460 --> 00:12:14,700
heard of there's an exploit called

244
00:12:14,700 --> 00:12:16,589
pants-down which is an interesting name

245
00:12:16,589 --> 00:12:17,730
for an exploit I don't know where they

246
00:12:17,730 --> 00:12:19,530
came up with that name but that's

247
00:12:19,530 --> 00:12:21,420
actually just the name they use to

248
00:12:21,420 --> 00:12:24,990
describe a way of completely bypassing

249
00:12:24,990 --> 00:12:28,500
the BMC firmware and flashing whatever

250
00:12:28,500 --> 00:12:30,930
you want to the BMC slash you can access

251
00:12:30,930 --> 00:12:34,320
the next to actually access the memory

252
00:12:34,320 --> 00:12:38,820
on SOC and change it and do whatever you

253
00:12:38,820 --> 00:12:41,040
want that's kind of it's a hardware

254
00:12:41,040 --> 00:12:43,320
feature that's built in today's be the

255
00:12:43,320 --> 00:12:49,020
MCS but it can be disabled when the BMC

256
00:12:49,020 --> 00:12:53,520
boots so you know a lot of server

257
00:12:53,520 --> 00:12:54,930
vendors have started putting out new

258
00:12:54,930 --> 00:12:59,700
firmware that disables that feature when

259
00:12:59,700 --> 00:13:04,589
the BMC first boots and fortunately if

260
00:13:04,589 --> 00:13:06,950
you wanted to use this OC flesh to

261
00:13:06,950 --> 00:13:09,810
change the firmware a lot of cases you

262
00:13:09,810 --> 00:13:13,250
can no longer do that in the case of a

263
00:13:13,250 --> 00:13:16,530
bare metal cloud like packet that wasn't

264
00:13:16,530 --> 00:13:18,330
an ideal way of updating it anyway

265
00:13:18,330 --> 00:13:19,770
because we have a lot of servers that

266
00:13:19,770 --> 00:13:22,200
are already in use by customers

267
00:13:22,200 --> 00:13:23,760
so we can't really just reboot their

268
00:13:23,760 --> 00:13:27,149
server and and run this SOC flash

269
00:13:27,149 --> 00:13:32,399
utility if we want to do an upgrade now

270
00:13:32,399 --> 00:13:34,200
without having a maintenance window and

271
00:13:34,200 --> 00:13:35,940
all that so that's a pain so kept

272
00:13:35,940 --> 00:13:37,820
looking for better ways to do this

273
00:13:37,820 --> 00:13:44,610
though way way I settled on while I was

274
00:13:44,610 --> 00:13:46,589
working on this is to reverse engineer

275
00:13:46,589 --> 00:13:49,589
the proprietary firmware images that the

276
00:13:49,589 --> 00:13:52,649
vendors provide so you know you buy a

277
00:13:52,649 --> 00:13:56,339
server your vendor probably provides BMC

278
00:13:56,339 --> 00:13:57,870
firmware updates once in a while and

279
00:13:57,870 --> 00:13:59,610
they give you an image file you can

280
00:13:59,610 --> 00:14:01,820
download and you can upload it through

281
00:14:01,820 --> 00:14:05,310
you know the web interface or maybe yeah

282
00:14:05,310 --> 00:14:09,000
you know ipmi tool command you can run

283
00:14:09,000 --> 00:14:13,380
do it but those images are in a

284
00:14:13,380 --> 00:14:16,079
proprietary format and so at the moment

285
00:14:16,079 --> 00:14:19,440
you can't just have something like open

286
00:14:19,440 --> 00:14:23,579
BMC create firmware image in that format

287
00:14:23,579 --> 00:14:27,980
that you can you can upload through the

288
00:14:27,980 --> 00:14:30,660
proprietary interface that your server

289
00:14:30,660 --> 00:14:35,640
came with so the good news is those

290
00:14:35,640 --> 00:14:38,250
special firmware formats are fairly easy

291
00:14:38,250 --> 00:14:40,620
to reverse-engineer and of course I did

292
00:14:40,620 --> 00:14:47,100
that so since the firmware format is

293
00:14:47,100 --> 00:14:49,500
easy to reverse-engineer it's also

294
00:14:49,500 --> 00:14:52,019
possible to then go in and modify that

295
00:14:52,019 --> 00:14:55,589
firmware you know you take your server

296
00:14:55,589 --> 00:14:56,760
vendors firmware and you make your

297
00:14:56,760 --> 00:14:58,760
changes and then you just go ahead and

298
00:14:58,760 --> 00:15:00,779
upload it through their normal update

299
00:15:00,779 --> 00:15:02,880
method what's with the sites the web

300
00:15:02,880 --> 00:15:04,529
interface that they provide very easy

301
00:15:04,529 --> 00:15:07,980
way to do it and if you can modify your

302
00:15:07,980 --> 00:15:11,850
server vendors BMC firmware then you can

303
00:15:11,850 --> 00:15:14,279
also route it and you can use it for raw

304
00:15:14,279 --> 00:15:15,930
flash access and at that point you can

305
00:15:15,930 --> 00:15:20,250
then write any firmware image you want

306
00:15:20,250 --> 00:15:29,810
whether it's open BMC or otherwise so

307
00:15:29,810 --> 00:15:31,620
one of the reasons you can

308
00:15:31,620 --> 00:15:34,350
going download like open BMC images

309
00:15:34,350 --> 00:15:36,330
right now and install them on any server

310
00:15:36,330 --> 00:15:40,110
you want it's because every server even

311
00:15:40,110 --> 00:15:44,420
if it uses the same you know BMC chip

312
00:15:44,420 --> 00:15:47,190
each server connects to them in

313
00:15:47,190 --> 00:15:50,910
different ways you know if your your

314
00:15:50,910 --> 00:15:51,960
sensors are connected in different

315
00:15:51,960 --> 00:15:56,130
places and and whatnot so in order to

316
00:15:56,130 --> 00:15:59,070
pour something any sort of open source

317
00:15:59,070 --> 00:16:01,620
BMC firmware to a new server model you

318
00:16:01,620 --> 00:16:03,570
need the device tree and you need the

319
00:16:03,570 --> 00:16:08,610
sensor list and if we want to accelerate

320
00:16:08,610 --> 00:16:12,540
the rate of porting open source BMC

321
00:16:12,540 --> 00:16:14,940
firmware to new server models then there

322
00:16:14,940 --> 00:16:16,200
needs to be an easier way so you'll have

323
00:16:16,200 --> 00:16:17,610
to manually come up with that yourself

324
00:16:17,610 --> 00:16:19,800
every time you want to add support to a

325
00:16:19,800 --> 00:16:24,089
new server so there's another reason

326
00:16:24,089 --> 00:16:26,040
that I was focusing on reverse

327
00:16:26,040 --> 00:16:27,690
engineering the vendors firmware images

328
00:16:27,690 --> 00:16:29,640
because you can actually go in there and

329
00:16:29,640 --> 00:16:31,620
you can extract the device tree and you

330
00:16:31,620 --> 00:16:35,990
can extract the sensor list and you can

331
00:16:35,990 --> 00:16:39,740
you can turn the job of porting your

332
00:16:39,740 --> 00:16:42,930
open source firmware to that new server

333
00:16:42,930 --> 00:16:45,180
model you know it just becomes a lot

334
00:16:45,180 --> 00:16:46,730
easier than it might need to do a

335
00:16:46,730 --> 00:16:52,380
handful of a handful of manual changes

336
00:16:52,380 --> 00:16:55,140
but for the most part it's gonna be

337
00:16:55,140 --> 00:17:01,800
automated so really speeds up the rate

338
00:17:01,800 --> 00:17:08,010
of porting your BMC firmware so move on

339
00:17:08,010 --> 00:17:12,510
to open source bios so everyone over

340
00:17:12,510 --> 00:17:15,059
this list earlier on i'm gonna skip over

341
00:17:15,059 --> 00:17:20,189
to the details for each one here so core

342
00:17:20,189 --> 00:17:23,609
boot is pretty well-known coreboot just

343
00:17:23,609 --> 00:17:26,569
basically does the initial hardware

344
00:17:26,569 --> 00:17:29,760
initialization so initialize your memory

345
00:17:29,760 --> 00:17:31,770
controller does early initialization of

346
00:17:31,770 --> 00:17:34,470
your chipset but that's really all it's

347
00:17:34,470 --> 00:17:36,450
meant to do it gives you a serial

348
00:17:36,450 --> 00:17:38,059
console but it gets out of your way and

349
00:17:38,059 --> 00:17:40,620
so if you want to do anything more

350
00:17:40,620 --> 00:17:43,950
advanced you would load up a load on top

351
00:17:43,950 --> 00:17:46,400
but

352
00:17:46,470 --> 00:17:48,760
you know I think the simplicity if

353
00:17:48,760 --> 00:17:50,440
coreboot is one of its greatest features

354
00:17:50,440 --> 00:17:55,210
so you have a lot of flexibility with

355
00:17:55,210 --> 00:17:57,610
what you can do once you have that basic

356
00:17:57,610 --> 00:18:01,830
initialization out of the way Tiano core

357
00:18:01,830 --> 00:18:03,790
anybody who's familiar with that knows

358
00:18:03,790 --> 00:18:09,250
it's a fairly complex package very easy

359
00:18:09,250 --> 00:18:13,120
to work with but you can use it as core

360
00:18:13,120 --> 00:18:15,280
payload if you want to provide a UEFI

361
00:18:15,280 --> 00:18:21,400
environment boot with Linux boot is

362
00:18:21,400 --> 00:18:23,530
interesting because you can bypass

363
00:18:23,530 --> 00:18:27,580
channel core and Linux boot provides a

364
00:18:27,580 --> 00:18:30,070
partial UF by an implementation on top

365
00:18:30,070 --> 00:18:32,820
of the Linux kernel right now obviously

366
00:18:32,820 --> 00:18:35,290
expect that to continue to expand and

367
00:18:35,290 --> 00:18:38,520
become a full UEFI implementation but

368
00:18:38,520 --> 00:18:40,870
it's nursing the look at because it's

369
00:18:40,870 --> 00:18:42,670
not deanna core and nothing wrong with

370
00:18:42,670 --> 00:18:44,020
piano core but it's always good to have

371
00:18:44,020 --> 00:18:46,780
alternatives and sometimes you won't

372
00:18:46,780 --> 00:18:48,100
have something simpler to work with when

373
00:18:48,100 --> 00:18:51,010
you're prototyping something new so when

374
00:18:51,010 --> 00:18:52,270
exclude also works as a core blue

375
00:18:52,270 --> 00:19:00,510
payload see bios that's your legacy x86

376
00:19:00,510 --> 00:19:06,040
if you've if you've it up virtual

377
00:19:06,040 --> 00:19:08,350
machine on so let's say qmu or something

378
00:19:08,350 --> 00:19:10,810
you've probably seen see bios that works

379
00:19:10,810 --> 00:19:13,630
as a bios for virtual machines or it

380
00:19:13,630 --> 00:19:18,090
works as bias for physical machines

381
00:19:18,090 --> 00:19:24,550
certain cases so case of core boot you

382
00:19:24,550 --> 00:19:27,700
can load see bios and do a legacy x86

383
00:19:27,700 --> 00:19:30,940
boot and then if you're running an arm

384
00:19:30,940 --> 00:19:35,880
server arm recently contributed a

385
00:19:35,880 --> 00:19:39,610
reference implementation for booting

386
00:19:39,610 --> 00:19:41,800
into the an arm secure world that's

387
00:19:41,800 --> 00:19:44,370
currently maintained by Lennar oh and

388
00:19:44,370 --> 00:19:49,060
also be integrated with core boot so you

389
00:19:49,060 --> 00:19:50,830
probably noticed that every one of those

390
00:19:50,830 --> 00:19:54,790
I mentioned core boot is the one of the

391
00:19:54,790 --> 00:19:55,960
great things about core boot is that you

392
00:19:55,960 --> 00:19:58,180
can you can you can start with core boot

393
00:19:58,180 --> 00:19:59,270
you can do your

394
00:19:59,270 --> 00:20:03,600
early initialization and then you can go

395
00:20:03,600 --> 00:20:05,040
different ways depending on what you

396
00:20:05,040 --> 00:20:08,310
need to do so you could load different

397
00:20:08,310 --> 00:20:11,720
payloads on-demand if you need to load a

398
00:20:11,720 --> 00:20:15,750
legacy x86 operating system you go in

399
00:20:15,750 --> 00:20:19,230
the C BIOS if you if you just want to

400
00:20:19,230 --> 00:20:21,690
boot Linux I could do that directly from

401
00:20:21,690 --> 00:20:26,160
core boot or maybe you want to be able

402
00:20:26,160 --> 00:20:28,260
to still provide some UEFI runtime

403
00:20:28,260 --> 00:20:31,770
services so you could load a Tiano core

404
00:20:31,770 --> 00:20:36,830
or Linux boot payload or on top of that

405
00:20:36,830 --> 00:20:40,080
but you can also if you're using open

406
00:20:40,080 --> 00:20:43,230
source BMC firmware along with your open

407
00:20:43,230 --> 00:20:45,510
source bios you can have the BIOS

408
00:20:45,510 --> 00:20:49,080
coordinate with the BMC and basically

409
00:20:49,080 --> 00:20:52,620
select which payload to load on demand

410
00:20:52,620 --> 00:20:56,310
so in the in the case of the bare metal

411
00:20:56,310 --> 00:20:59,460
cloud you might have a certain customer

412
00:20:59,460 --> 00:21:01,170
that wants to provision the server and

413
00:21:01,170 --> 00:21:04,200
they're running an old operating system

414
00:21:04,200 --> 00:21:07,170
image and so they want to do a legacy

415
00:21:07,170 --> 00:21:12,120
boot so just signal to the BMC that you

416
00:21:12,120 --> 00:21:13,800
want to do a legacy boot and it'll work

417
00:21:13,800 --> 00:21:16,620
with coreboot if Corbeau go directly and

418
00:21:16,620 --> 00:21:22,110
see bios for example and it makes for

419
00:21:22,110 --> 00:21:24,420
very fast boots because you don't have

420
00:21:24,420 --> 00:21:27,810
to load a bunch of unnecessary payloads

421
00:21:27,810 --> 00:21:30,660
or have them ready to go you're just

422
00:21:30,660 --> 00:21:32,310
going into directly into payload that

423
00:21:32,310 --> 00:21:38,400
you want so there are a lot of benefits

424
00:21:38,400 --> 00:21:42,240
of running an open-source bios on bare

425
00:21:42,240 --> 00:21:46,110
metal compared to just taking whatever

426
00:21:46,110 --> 00:21:51,920
proprietary people I don't use any

427
00:21:51,920 --> 00:21:55,260
terrible words describe what most

428
00:21:55,260 --> 00:21:57,750
vendors will give you but let's just say

429
00:21:57,750 --> 00:22:00,210
you can have better quality better

430
00:22:00,210 --> 00:22:04,130
security better everything if you have

431
00:22:04,130 --> 00:22:06,470
access to the source code and you can

432
00:22:06,470 --> 00:22:09,390
compile your own bios so you can do

433
00:22:09,390 --> 00:22:11,850
things like check your option roms or

434
00:22:11,850 --> 00:22:13,290
UEFI drivers

435
00:22:13,290 --> 00:22:16,799
you can check the you can check the

436
00:22:16,799 --> 00:22:18,660
cryptograph the cache for loading any of

437
00:22:18,660 --> 00:22:21,480
those things so maybe you have a list of

438
00:22:21,480 --> 00:22:23,490
pre-approved devices where you actually

439
00:22:23,490 --> 00:22:25,080
want to be able to run their option roms

440
00:22:25,080 --> 00:22:29,120
and everything else you can ignore

441
00:22:29,120 --> 00:22:31,980
obviously if you're starting with the

442
00:22:31,980 --> 00:22:35,580
core boot it's fast you can buton

443
00:22:35,580 --> 00:22:38,580
seconds instead of minutes or some

444
00:22:38,580 --> 00:22:41,549
servers that i've worked with you take

445
00:22:41,549 --> 00:22:44,370
five six seven minutes to boot which not

446
00:22:44,370 --> 00:22:45,419
really sure what's going on under the

447
00:22:45,419 --> 00:22:48,059
hood but if you can control what's going

448
00:22:48,059 --> 00:22:50,309
on under the hood then get that down to

449
00:22:50,309 --> 00:22:55,530
seconds you can add custom system

450
00:22:55,530 --> 00:22:57,840
management interrupt handlers so Eugene

451
00:22:57,840 --> 00:22:58,860
that was interesting you're talking

452
00:22:58,860 --> 00:23:00,900
about the system management mode and

453
00:23:00,900 --> 00:23:04,710
system management drops before there are

454
00:23:04,710 --> 00:23:07,440
a lot of possibilities if you're able to

455
00:23:07,440 --> 00:23:09,240
install your own system management

456
00:23:09,240 --> 00:23:11,250
interrupt handlers obviously if you're

457
00:23:11,250 --> 00:23:13,530
using a proprietary BIOS you can't do

458
00:23:13,530 --> 00:23:17,460
that you you get whatever your BIOS

459
00:23:17,460 --> 00:23:19,559
vendor provides you and by the time

460
00:23:19,559 --> 00:23:20,760
you're booting into your operating

461
00:23:20,760 --> 00:23:22,440
system you no longer have the ability to

462
00:23:22,440 --> 00:23:26,429
add new system management and lers but

463
00:23:26,429 --> 00:23:30,990
if you control the BIOS then you can and

464
00:23:30,990 --> 00:23:33,690
of course if you're using open source

465
00:23:33,690 --> 00:23:39,419
BMC firmware you can integrate you can

466
00:23:39,419 --> 00:23:42,720
have features that integrate between

467
00:23:42,720 --> 00:23:44,010
both of them so you can have your BMC

468
00:23:44,010 --> 00:23:46,830
communicating with your BIOS during the

469
00:23:46,830 --> 00:23:49,520
boot process and it gives you a lot of

470
00:23:49,520 --> 00:23:54,590
opens up a lot of new features that are

471
00:23:54,590 --> 00:23:56,760
currently available so basically

472
00:23:56,760 --> 00:23:59,100
anything you can think of you can do as

473
00:23:59,100 --> 00:24:02,460
long as you have open source bios so

474
00:24:02,460 --> 00:24:06,230
system management mode on the x86 it's

475
00:24:06,230 --> 00:24:08,669
there to bring negative two which is

476
00:24:08,669 --> 00:24:11,220
higher privilege and hypervisor which of

477
00:24:11,220 --> 00:24:12,210
course is higher privilege in the

478
00:24:12,210 --> 00:24:17,790
operating system so like I was just

479
00:24:17,790 --> 00:24:19,950
saying since the operating system or

480
00:24:19,950 --> 00:24:26,300
hypervisor isn't able to install system

481
00:24:26,300 --> 00:24:28,820
and rope and lers then there's something

482
00:24:28,820 --> 00:24:30,710
you can do in the BIOS you can use this

483
00:24:30,710 --> 00:24:32,570
for security monitoring features

484
00:24:32,570 --> 00:24:36,290
obviously because whatever OS is running

485
00:24:36,290 --> 00:24:40,130
on the server can no longer interfere

486
00:24:40,130 --> 00:24:41,690
with those handlers in theory if it's

487
00:24:41,690 --> 00:24:43,220
implemented properly using modern

488
00:24:43,220 --> 00:24:46,100
hardware so since the management mode

489
00:24:46,100 --> 00:24:47,390
was originally used for power management

490
00:24:47,390 --> 00:24:53,450
but be used for security features and so

491
00:24:53,450 --> 00:24:57,650
one of those features would be to detect

492
00:24:57,650 --> 00:25:01,100
any attempts on a server to write to

493
00:25:01,100 --> 00:25:06,080
flash so somebody tries to replace your

494
00:25:06,080 --> 00:25:08,300
BIOS with their own I remember I'm

495
00:25:08,300 --> 00:25:09,590
talking about a bare metal cloud here

496
00:25:09,590 --> 00:25:11,210
where customers have direct access to a

497
00:25:11,210 --> 00:25:14,450
server so that's one case where we need

498
00:25:14,450 --> 00:25:17,510
to prevent that from happening so just a

499
00:25:17,510 --> 00:25:20,930
management mode you can is we configure

500
00:25:20,930 --> 00:25:23,150
the chipset to generate a system

501
00:25:23,150 --> 00:25:24,860
management interrupt anytime the flash

502
00:25:24,860 --> 00:25:30,560
is accessed and you can then basically

503
00:25:30,560 --> 00:25:33,020
signal the BMC at that point and have

504
00:25:33,020 --> 00:25:35,390
the BMC send out a real-time alert so in

505
00:25:35,390 --> 00:25:38,420
the case of bare metal cloud you know

506
00:25:38,420 --> 00:25:40,460
we're not really looking for cases where

507
00:25:40,460 --> 00:25:44,750
customers are trying to modify flash

508
00:25:44,750 --> 00:25:49,880
we're really looking for cases where the

509
00:25:49,880 --> 00:25:53,270
server has been exploited and might have

510
00:25:53,270 --> 00:25:57,740
a botnet perhaps trying to add a rootkit

511
00:25:57,740 --> 00:25:59,960
to the BIOS things like that so

512
00:25:59,960 --> 00:26:02,570
obviously if you're using open-source

513
00:26:02,570 --> 00:26:05,440
BMC and an open-source bios then you can

514
00:26:05,440 --> 00:26:07,250
create a feature where you have a

515
00:26:07,250 --> 00:26:09,620
real-time alert anytime that writes any

516
00:26:09,620 --> 00:26:15,830
time that happens so we've talked about

517
00:26:15,830 --> 00:26:18,470
open source firmware but what about open

518
00:26:18,470 --> 00:26:21,920
hardware so obviously with the Open

519
00:26:21,920 --> 00:26:23,810
Compute Project there have been a lot of

520
00:26:23,810 --> 00:26:27,970
companies contributing hardware designs

521
00:26:27,970 --> 00:26:33,290
there are additional security features

522
00:26:33,290 --> 00:26:36,830
you could add if you have more Hardware

523
00:26:36,830 --> 00:26:39,879
so I'm thinking of here is having

524
00:26:39,879 --> 00:26:44,169
a controller in a server and can use it

525
00:26:44,169 --> 00:26:47,379
to protect firmware for basically

526
00:26:47,379 --> 00:26:50,019
anything in this in a server that uses

527
00:26:50,019 --> 00:26:52,389
firmware whether it's a CPU with BMC the

528
00:26:52,389 --> 00:26:58,359
network controller basically verify

529
00:26:58,359 --> 00:27:00,429
firmware before it actually returns it

530
00:27:00,429 --> 00:27:01,869
back to those devices so you can hold

531
00:27:01,869 --> 00:27:04,169
the system and reset while you're

532
00:27:04,169 --> 00:27:08,589
verifying you know parts are your

533
00:27:08,589 --> 00:27:12,219
firmware and then you provide multiple

534
00:27:12,219 --> 00:27:15,789
VI buses for each so that you you know

535
00:27:15,789 --> 00:27:17,709
each device has its own virtual flash

536
00:27:17,709 --> 00:27:20,139
chip basically even though you only need

537
00:27:20,139 --> 00:27:23,139
to physically have one flash chip you

538
00:27:23,139 --> 00:27:24,819
can add other features like compression

539
00:27:24,819 --> 00:27:28,199
since a lot of time firmware images

540
00:27:28,199 --> 00:27:32,079
waste space the awful lot of empty space

541
00:27:32,079 --> 00:27:36,190
in them and so you either save a little

542
00:27:36,190 --> 00:27:40,569
money or you could improve performance a

543
00:27:40,569 --> 00:27:42,190
little bit by actually compressing those

544
00:27:42,190 --> 00:27:44,739
flash images and so if you have some

545
00:27:44,739 --> 00:27:49,569
sort of security controller that is in

546
00:27:49,569 --> 00:27:51,969
between your microcontrollers and your

547
00:27:51,969 --> 00:27:54,759
flash chip and I you know you can add a

548
00:27:54,759 --> 00:27:59,919
feature like compression Microsoft has

549
00:27:59,919 --> 00:28:02,519
their project Cerberus which is

550
00:28:02,519 --> 00:28:06,609
basically a controller that monitors a

551
00:28:06,609 --> 00:28:12,549
flash accesses and so this is something

552
00:28:12,549 --> 00:28:15,969
that they are in the process of

553
00:28:15,969 --> 00:28:19,409
contributing to the OCD project so

554
00:28:19,409 --> 00:28:23,019
obviously as you know the features on

555
00:28:23,019 --> 00:28:25,059
this list could be built on top of

556
00:28:25,059 --> 00:28:26,799
something like project Cerberus but for

557
00:28:26,799 --> 00:28:31,389
now packet is prototyping kind of like

558
00:28:31,389 --> 00:28:33,429
green feel of design using a small

559
00:28:33,429 --> 00:28:38,709
non-volatile FPGA so but just to make a

560
00:28:38,709 --> 00:28:40,509
proof of concept but you know after

561
00:28:40,509 --> 00:28:42,249
after that we could go back and talk to

562
00:28:42,249 --> 00:28:46,209
folks on Microsoft and see if you use

563
00:28:46,209 --> 00:28:50,469
their chip as is or maybe add additional

564
00:28:50,469 --> 00:28:53,099
features to it

565
00:28:54,040 --> 00:28:57,830
the you know most of the topics here at

566
00:28:57,830 --> 00:29:00,770
the conference are around either bmc's

567
00:29:00,770 --> 00:29:05,270
or bios but there are other kinds of

568
00:29:05,270 --> 00:29:08,720
firmware like smart Nick firmware so

569
00:29:08,720 --> 00:29:10,430
there are a number of smart Nick's

570
00:29:10,430 --> 00:29:14,120
coming out these days such as melt

571
00:29:14,120 --> 00:29:17,390
Mellanox has their Bluefield smart Nick

572
00:29:17,390 --> 00:29:18,770
and you know it's basically just a

573
00:29:18,770 --> 00:29:21,400
network controller which has a built in

574
00:29:21,400 --> 00:29:26,870
ARM processor on it and so you can

575
00:29:26,870 --> 00:29:31,210
basically run an embedded Linux and

576
00:29:31,210 --> 00:29:35,570
control firmware running on your smart

577
00:29:35,570 --> 00:29:43,310
Nick's so that's one one additional area

578
00:29:43,310 --> 00:29:46,010
that I hope to see more of fat at the

579
00:29:46,010 --> 00:29:47,750
conference is people working on things

580
00:29:47,750 --> 00:29:52,670
like smart Nick firmware if people are

581
00:29:52,670 --> 00:29:53,750
going to be working on open source

582
00:29:53,750 --> 00:29:56,170
firmware we need to make it easier for

583
00:29:56,170 --> 00:29:58,550
firmware developers to have access to

584
00:29:58,550 --> 00:30:02,840
hardware so packet being in the business

585
00:30:02,840 --> 00:30:04,850
of giving people access to hardware that

586
00:30:04,850 --> 00:30:06,200
is something we're working on we're not

587
00:30:06,200 --> 00:30:09,440
ready to announce anything just yet but

588
00:30:09,440 --> 00:30:10,940
know that we're working on it and

589
00:30:10,940 --> 00:30:13,640
hopefully we'll be able to make a little

590
00:30:13,640 --> 00:30:16,910
easier for folks to have access to

591
00:30:16,910 --> 00:30:23,920
hardware to actually develop on and then

592
00:30:23,920 --> 00:30:26,210
you know it's great that everybody here

593
00:30:26,210 --> 00:30:28,490
is independently working on open source

594
00:30:28,490 --> 00:30:33,290
firmware and bypassing you know the

595
00:30:33,290 --> 00:30:34,610
vendors that traditionally make all that

596
00:30:34,610 --> 00:30:35,990
proprietary firmware that we want to get

597
00:30:35,990 --> 00:30:38,150
rid of but it would be nice to have them

598
00:30:38,150 --> 00:30:40,400
on board and it would be nice to have

599
00:30:40,400 --> 00:30:43,630
more server vendors doing things like

600
00:30:43,630 --> 00:30:46,820
contributing the open BMC for example so

601
00:30:46,820 --> 00:30:49,850
that is something that we've also been

602
00:30:49,850 --> 00:30:51,470
working on at packet we have couple

603
00:30:51,470 --> 00:30:54,050
vendors that we're actively talking to

604
00:30:54,050 --> 00:30:57,470
and helping them get open BMC running on

605
00:30:57,470 --> 00:31:01,730
their hardware and getting them start

606
00:31:01,730 --> 00:31:06,960
contributing back though so I think

607
00:31:06,960 --> 00:31:11,480
whew my packet colleagues Manny Mendez

608
00:31:11,480 --> 00:31:14,490
he's been sending me links to UPMC for

609
00:31:14,490 --> 00:31:17,549
months and I wasn't initially paying

610
00:31:17,549 --> 00:31:19,320
attention to it as I focused on unopened

611
00:31:19,320 --> 00:31:22,500
BMC but I'm glad he kept pestering me

612
00:31:22,500 --> 00:31:24,690
because I know I've seen you BMC a well

613
00:31:24,690 --> 00:31:28,049
actually liked it quite a lot and he

614
00:31:28,049 --> 00:31:30,690
also reminded me that the open source

615
00:31:30,690 --> 00:31:32,580
former conference would be coming up and

616
00:31:32,580 --> 00:31:35,309
so don't work for him I probably would

617
00:31:35,309 --> 00:31:37,860
not have responded for the call

618
00:31:37,860 --> 00:31:39,659
proposals and I probably would not be

619
00:31:39,659 --> 00:31:42,330
here right now Carl Perry

620
00:31:42,330 --> 00:31:44,279
he's been attending a lot of our

621
00:31:44,279 --> 00:31:46,380
meetings for me and fill me in and

622
00:31:46,380 --> 00:31:49,159
what's going on so things like the

623
00:31:49,159 --> 00:31:52,320
trusted firm word out of work we

624
00:31:52,320 --> 00:31:54,690
actually work out a lot on arm servers a

625
00:31:54,690 --> 00:32:00,570
packet and so hopefully we'll be more

626
00:32:00,570 --> 00:32:03,659
active in the armed security world and

627
00:32:03,659 --> 00:32:05,190
their platform security architecture and

628
00:32:05,190 --> 00:32:06,899
things like that in the future so Carl's

629
00:32:06,899 --> 00:32:08,789
been very helpful with that and then my

630
00:32:08,789 --> 00:32:10,409
Truong he's actually here at the

631
00:32:10,409 --> 00:32:13,529
conference always in the room you want

632
00:32:13,529 --> 00:32:19,190
to raise your hand my so my join packet

633
00:32:19,190 --> 00:32:21,990
fairly recently and I was glad when he

634
00:32:21,990 --> 00:32:24,270
came that he shared my enthusiasm for

635
00:32:24,270 --> 00:32:26,100
open source firmware so my has been

636
00:32:26,100 --> 00:32:28,919
going out there and trying to get some

637
00:32:28,919 --> 00:32:31,049
of our collaboration going so we

638
00:32:31,049 --> 00:32:32,880
actually have some projects going with a

639
00:32:32,880 --> 00:32:35,340
couple other Bay Area companies that

640
00:32:35,340 --> 00:32:37,130
we're all working on together and

641
00:32:37,130 --> 00:32:42,149
weren't from my we would probably just

642
00:32:42,149 --> 00:32:45,110
be doing these things ourselves and

643
00:32:45,110 --> 00:32:46,890
duplicating work other people are doing

644
00:32:46,890 --> 00:32:49,200
so as a team we can actually work

645
00:32:49,200 --> 00:32:52,289
together and get more done so anyway my

646
00:32:52,289 --> 00:32:54,630
will be around at the conference all

647
00:32:54,630 --> 00:33:00,299
week great so anyway anybody have any

648
00:33:00,299 --> 00:33:09,299
questions have you given any thought

649
00:33:09,299 --> 00:33:11,520
about how the interaction between the

650
00:33:11,520 --> 00:33:13,970
bias and the BMC might look like in

651
00:33:13,970 --> 00:33:18,600
current systems I think IPM is the most

652
00:33:18,600 --> 00:33:20,880
used and not the

653
00:33:20,880 --> 00:33:24,690
form that we usually see it but in IP mb

654
00:33:24,690 --> 00:33:25,830
or something like that

655
00:33:25,830 --> 00:33:30,870
but have you thought about how yeah how

656
00:33:30,870 --> 00:33:32,909
that interface would look like so

657
00:33:32,909 --> 00:33:36,630
basically the interface for say BIOS

658
00:33:36,630 --> 00:33:38,370
booting on the CPU to actually

659
00:33:38,370 --> 00:33:42,389
communicate with the BMC well maybe for

660
00:33:42,389 --> 00:33:45,299
example how to select which boot source

661
00:33:45,299 --> 00:33:46,500
you're talking about

662
00:33:46,500 --> 00:33:48,240
selecting by the legacy boot or

663
00:33:48,240 --> 00:33:50,820
something like that yeah if I understood

664
00:33:50,820 --> 00:33:54,210
correctly right so there a couple

665
00:33:54,210 --> 00:33:55,889
different ways of doing that

666
00:33:55,889 --> 00:34:03,840
but you know the BMC actually is

667
00:34:03,840 --> 00:34:07,710
accessible through PCI Express and there

668
00:34:07,710 --> 00:34:10,710
are multiple I squared C buses available

669
00:34:10,710 --> 00:34:14,750
and things like that so you know the

670
00:34:14,750 --> 00:34:18,270
simple way to the way to do it would

671
00:34:18,270 --> 00:34:22,099
just be using the PCI Express interface

672
00:34:22,099 --> 00:34:25,589
right uh I was more thinking like how

673
00:34:25,589 --> 00:34:26,969
would you like about the interface to

674
00:34:26,969 --> 00:34:29,369
look like if you if you could get

675
00:34:29,369 --> 00:34:34,579
anything you wanted right here oh okay

676
00:34:34,579 --> 00:34:39,149
no I I haven't thought about it like

677
00:34:39,149 --> 00:34:40,349
that I mean it would be nice if there

678
00:34:40,349 --> 00:34:42,719
were standards behind it for a way of a

679
00:34:42,719 --> 00:34:46,638
better way an open way of exchanging

680
00:34:47,030 --> 00:34:50,310
requested boot parameters from the BMC

681
00:34:50,310 --> 00:34:53,310
and the BIOS right now you know if every

682
00:34:53,310 --> 00:34:56,668
star every I keep saying servers I mean

683
00:34:56,668 --> 00:34:57,900
obviously I talk about servers here but

684
00:34:57,900 --> 00:34:59,579
you know you know I mean and any

685
00:34:59,579 --> 00:35:02,819
motherboards it's all proprietary right

686
00:35:02,819 --> 00:35:07,589
now so let's say you you request a pixie

687
00:35:07,589 --> 00:35:10,950
boot for example through the BMC every

688
00:35:10,950 --> 00:35:12,030
vendor pretty much has a different way

689
00:35:12,030 --> 00:35:15,990
of requesting that from the BIOS and it

690
00:35:15,990 --> 00:35:17,609
would be nice if that was standardized

691
00:35:17,609 --> 00:35:20,490
and if there were a lot more options and

692
00:35:20,490 --> 00:35:23,760
you could choose so that's obviously

693
00:35:23,760 --> 00:35:27,690
something that people at a conference

694
00:35:27,690 --> 00:35:29,400
like this could get together and work on

695
00:35:29,400 --> 00:35:34,410
but I'm not aware of any active efforts

696
00:35:34,410 --> 00:35:41,010
that I know I know the DM TF has

697
00:35:41,010 --> 00:35:42,210
probably been working on things like

698
00:35:42,210 --> 00:35:44,100
this I know they've been putting a lot

699
00:35:44,100 --> 00:35:48,870
of effort into things like pl DM and so

700
00:35:48,870 --> 00:35:52,080
they would probably be a good group

701
00:35:52,080 --> 00:35:54,270
actually if we needed you know somebody

702
00:35:54,270 --> 00:35:56,370
that's established that's already

703
00:35:56,370 --> 00:35:59,670
setting standards in the BMC world

704
00:35:59,670 --> 00:36:01,680
somebody like the DM TF would probably

705
00:36:01,680 --> 00:36:04,350
be people to talk to you is something to

706
00:36:04,350 --> 00:36:06,500
think about

707
00:36:06,500 --> 00:36:12,390
hi I'm I'm very curious about the open

708
00:36:12,390 --> 00:36:14,190
hardware trust anchor that you alluded

709
00:36:14,190 --> 00:36:17,160
to and you mentioned holding the main

710
00:36:17,160 --> 00:36:20,820
board in resets and intercepting putting

711
00:36:20,820 --> 00:36:22,440
something in between the sock and the

712
00:36:22,440 --> 00:36:26,160
spy flash reminds me very much of Google

713
00:36:26,160 --> 00:36:29,910
Titan ships and depending on how many

714
00:36:29,910 --> 00:36:32,940
Lots you put on this FPGA if you've

715
00:36:32,940 --> 00:36:36,000
considered using the ice 40 which has 8k

716
00:36:36,000 --> 00:36:39,360
lots and LTP memory and yeah please tell

717
00:36:39,360 --> 00:36:39,810
me more

718
00:36:39,810 --> 00:36:42,330
what's okay so that particular project

719
00:36:42,330 --> 00:36:46,740
is in very early stages right now so I'm

720
00:36:46,740 --> 00:36:51,510
hoping to have a proof-of-concept maybe

721
00:36:51,510 --> 00:36:55,770
in let's say three months or so but the

722
00:36:55,770 --> 00:37:03,210
idea is to use a okay so you know most

723
00:37:03,210 --> 00:37:05,040
most motherboards are gonna come with

724
00:37:05,040 --> 00:37:08,100
the CPL d4 blue logic power sequencing

725
00:37:08,100 --> 00:37:09,960
and things like that and so what if you

726
00:37:09,960 --> 00:37:12,180
were to and instead of having a CPL d

727
00:37:12,180 --> 00:37:13,680
you spend a little more money and you

728
00:37:13,680 --> 00:37:18,480
upgrade to a small FPGA so you know to

729
00:37:18,480 --> 00:37:20,130
keep your costs down you probably want a

730
00:37:20,130 --> 00:37:22,680
non-volatile FPGA and not just for cost

731
00:37:22,680 --> 00:37:25,530
reasons but also security reasons but

732
00:37:25,530 --> 00:37:28,350
you'd get an inexpensive non-volatile

733
00:37:28,350 --> 00:37:31,260
FPGA and you can implement your logic in

734
00:37:31,260 --> 00:37:33,210
there and you can provide as many spi

735
00:37:33,210 --> 00:37:35,520
buses as you want so each device you

736
00:37:35,520 --> 00:37:37,200
know this is something where I'm not

737
00:37:37,200 --> 00:37:39,210
thinking of just secure boot on the CPU

738
00:37:39,210 --> 00:37:43,230
I want to extend that to be MCS to your

739
00:37:43,230 --> 00:37:44,940
network card to any other

740
00:37:44,940 --> 00:37:46,830
microcontrollers RAID controller and

741
00:37:46,830 --> 00:37:47,490
anything

742
00:37:47,490 --> 00:37:50,069
that might be on board you could extend

743
00:37:50,069 --> 00:37:53,880
it to that you don't need a ton of logic

744
00:37:53,880 --> 00:37:59,220
for the the basic features because you

745
00:37:59,220 --> 00:38:03,510
can basically also communicate with the

746
00:38:03,510 --> 00:38:04,859
BMC and you can do a lot of your heavy

747
00:38:04,859 --> 00:38:06,660
lifting on the BMC so if you've ensured

748
00:38:06,660 --> 00:38:10,290
that your BMC is as booted securely then

749
00:38:10,290 --> 00:38:13,290
you can run most of your code on the BMC

750
00:38:13,290 --> 00:38:15,599
and just you only need a little bit of

751
00:38:15,599 --> 00:38:20,099
functionality in in the FPGA let's do

752
00:38:20,099 --> 00:38:21,599
that answer your question yeah thank you

753
00:38:21,599 --> 00:38:29,130
Oh somewhat related to the previous

754
00:38:29,130 --> 00:38:31,980
question but like in general terms I'm

755
00:38:31,980 --> 00:38:33,470
interested in what your threat model is

756
00:38:33,470 --> 00:38:35,579
one thing about bear model host team

757
00:38:35,579 --> 00:38:38,359
concerned about like analysis attacks

758
00:38:38,359 --> 00:38:42,599
SPD's on on dims voltage regulator Cpl

759
00:38:42,599 --> 00:38:45,930
des firmware on disk drives or the

760
00:38:45,930 --> 00:38:48,710
peripheral firmware in the BIOS itself

761
00:38:48,710 --> 00:38:51,569
you know any system that mediates its

762
00:38:51,569 --> 00:38:55,280
own upgrade of configuration or firmware

763
00:38:55,280 --> 00:38:58,380
if it's one durable it's an opportunity

764
00:38:58,380 --> 00:39:04,410
to install a persistent threat so if

765
00:39:04,410 --> 00:39:06,020
you're living with off-the-shelf

766
00:39:06,020 --> 00:39:09,030
solutions right now there are some

767
00:39:09,030 --> 00:39:10,349
things that might be in your threat

768
00:39:10,349 --> 00:39:12,270
model you just can't address I'm

769
00:39:12,270 --> 00:39:14,309
interested in what is in your model and

770
00:39:14,309 --> 00:39:17,130
what you hope to include with

771
00:39:17,130 --> 00:39:22,230
advancements so obviously you know

772
00:39:22,230 --> 00:39:23,660
there's a lot of room for improvement

773
00:39:23,660 --> 00:39:27,390
because you know at the moment we're

774
00:39:27,390 --> 00:39:29,579
forced to just kind of accept what comes

775
00:39:29,579 --> 00:39:32,579
from the vendor as far as the what's

776
00:39:32,579 --> 00:39:35,549
what's running on the BMC as far as the

777
00:39:35,549 --> 00:39:41,280
BIOS but you know we'd like to be able

778
00:39:41,280 --> 00:39:45,770
to control all of the code running on

779
00:39:45,770 --> 00:39:49,380
both the BMC and during initialization

780
00:39:49,380 --> 00:39:58,109
in the CPU so you brought up a lot of

781
00:39:58,109 --> 00:40:01,260
interesting things like

782
00:40:01,260 --> 00:40:03,550
basically all the non rubble stayed in

783
00:40:03,550 --> 00:40:05,650
the TCP of a system but were you

784
00:40:05,650 --> 00:40:09,640
suggesting somebody might backed or

785
00:40:09,640 --> 00:40:11,890
backdoor an SPD on an atom

786
00:40:11,890 --> 00:40:14,200
well you can certainly put configuration

787
00:40:14,200 --> 00:40:15,220
information in there that makes it

788
00:40:15,220 --> 00:40:15,760
unusable

789
00:40:15,760 --> 00:40:17,980
oh absolutely right so you can trash I

790
00:40:17,980 --> 00:40:21,690
could rent your system and trash it and

791
00:40:21,690 --> 00:40:23,890
again of course I hope you've got some

792
00:40:23,890 --> 00:40:25,960
heuristics there say don't rent this guy

793
00:40:25,960 --> 00:40:27,040
anymore hardware until we figure out

794
00:40:27,040 --> 00:40:30,250
what's going on yeah we know who is

795
00:40:30,250 --> 00:40:31,810
using a server at a time and if we see

796
00:40:31,810 --> 00:40:35,050
that it falls off I mean you know we see

797
00:40:35,050 --> 00:40:36,880
the big deep revision it and the next

798
00:40:36,880 --> 00:40:39,400
person that tries to provision it it

799
00:40:39,400 --> 00:40:41,930
fails provision then we're gonna be

800
00:40:41,930 --> 00:40:43,560
[Music]

801
00:40:43,560 --> 00:40:45,160
that's what we're gonna be very

802
00:40:45,160 --> 00:40:49,810
suspicious about that um so you know I

803
00:40:49,810 --> 00:40:51,340
can't give you a full answer right now

804
00:40:51,340 --> 00:40:53,410
this is something we have to sit down

805
00:40:53,410 --> 00:40:57,930
and do a proper analysis and look at

806
00:40:57,930 --> 00:41:02,050
what exact threats we want to protect

807
00:41:02,050 --> 00:41:05,770
against and what you know might be seen

808
00:41:05,770 --> 00:41:11,380
as kind of acceptable to ignore for now

809
00:41:11,380 --> 00:41:13,360
but you know obviously we need to

810
00:41:13,360 --> 00:41:17,020
prioritize so which security features we

811
00:41:17,020 --> 00:41:21,730
add on as we go along but you know it's

812
00:41:21,730 --> 00:41:23,670
going to be something where it's gonna

813
00:41:23,670 --> 00:41:25,960
take a lot of work and we're gonna be

814
00:41:25,960 --> 00:41:27,610
continually improving and making things

815
00:41:27,610 --> 00:41:30,550
better but right now we at least want to

816
00:41:30,550 --> 00:41:35,110
be able to prevent customers from doing

817
00:41:35,110 --> 00:41:37,270
things like writing their own BIOS and

818
00:41:37,270 --> 00:41:42,460
using that as a backdoor and we do we do

819
00:41:42,460 --> 00:41:46,780
do some firmware verification during the

820
00:41:46,780 --> 00:41:50,620
deep provisioning process to detect if

821
00:41:50,620 --> 00:41:52,150
somebody's try to do that but of course

822
00:41:52,150 --> 00:41:55,180
a very sophisticated actor might be able

823
00:41:55,180 --> 00:42:02,050
to can hide their tracks and well

824
00:42:02,050 --> 00:42:03,100
they're getting into too much detail I

825
00:42:03,100 --> 00:42:04,720
also say there's room for improvement

826
00:42:04,720 --> 00:42:07,720
and that's why I've been spending a lot

827
00:42:07,720 --> 00:42:13,680
of time on security lately there

828
00:42:13,680 --> 00:42:16,360
good afternoon my name is Edwin Pierre I

829
00:42:16,360 --> 00:42:18,550
work for a company called metronome and

830
00:42:18,550 --> 00:42:20,800
I see you made the explicit mention of

831
00:42:20,800 --> 00:42:23,470
smart mix we actually released our

832
00:42:23,470 --> 00:42:26,290
open-source kornek firmware a couple

833
00:42:26,290 --> 00:42:28,720
weeks ago actually so that that's kind

834
00:42:28,720 --> 00:42:31,390
of cool but in terms of where smart and

835
00:42:31,390 --> 00:42:33,190
exciting in the infrastructure they are

836
00:42:33,190 --> 00:42:35,770
kind of a serious threaten in your

837
00:42:35,770 --> 00:42:38,050
infrastructure I wonder what your

838
00:42:38,050 --> 00:42:39,670
thoughts on the threat models on with

839
00:42:39,670 --> 00:42:41,500
respect to smart Nix I mean they see

840
00:42:41,500 --> 00:42:44,200
every packet you know with things like

841
00:42:44,200 --> 00:42:45,790
TLS or float they're starting to get

842
00:42:45,790 --> 00:42:49,270
access to crypto keys as well and these

843
00:42:49,270 --> 00:42:51,430
things run software and and it's not

844
00:42:51,430 --> 00:42:53,590
open what are your thoughts on yeah I

845
00:42:53,590 --> 00:42:57,070
mean absolutely because say you're

846
00:42:57,070 --> 00:42:59,140
running a smart NIC you might be using

847
00:42:59,140 --> 00:43:03,670
it to process sensitive transactions

848
00:43:03,670 --> 00:43:06,970
from customers things like that and if

849
00:43:06,970 --> 00:43:09,550
you have a compromised compromised rumor

850
00:43:09,550 --> 00:43:10,870
and your smart NIC then how do you know

851
00:43:10,870 --> 00:43:12,640
it's not taking it and sending it back

852
00:43:12,640 --> 00:43:14,770
somewhere they might be looking for

853
00:43:14,770 --> 00:43:18,550
something very specific obviously know

854
00:43:18,550 --> 00:43:21,580
if it was a more general dev data

855
00:43:21,580 --> 00:43:25,480
harvesting type of situation you'd catch

856
00:43:25,480 --> 00:43:29,740
that but what if it was a you know it

857
00:43:29,740 --> 00:43:30,970
was a targeted attack if they're looking

858
00:43:30,970 --> 00:43:32,530
for very specific data and you don't

859
00:43:32,530 --> 00:43:33,730
know anything's happening until it

860
00:43:33,730 --> 00:43:35,050
finally gets that data and it sends it

861
00:43:35,050 --> 00:43:37,600
back and now it's too late already been

862
00:43:37,600 --> 00:43:43,780
sent off your network so obviously it

863
00:43:43,780 --> 00:43:45,940
would be great to be able to run open

864
00:43:45,940 --> 00:43:47,650
source firmware on a smart NIC instead

865
00:43:47,650 --> 00:43:49,540
of just using whatever the vendor

866
00:43:49,540 --> 00:43:51,040
provides of course if the vendor

867
00:43:51,040 --> 00:43:53,920
provides the source that's great led to

868
00:43:53,920 --> 00:43:58,000
but well the questions have been about

869
00:43:58,000 --> 00:43:59,650
security and I just wanted to mention

870
00:43:59,650 --> 00:44:01,300
this wasn't actually originally supposed

871
00:44:01,300 --> 00:44:04,420
to be a security oriented talk but I

872
00:44:04,420 --> 00:44:05,830
knew I would have a tough crowd here

873
00:44:05,830 --> 00:44:07,360
today when they put me in the security

874
00:44:07,360 --> 00:44:10,930
track I'm glad to talk about the

875
00:44:10,930 --> 00:44:13,840
security angles further with anybody

876
00:44:13,840 --> 00:44:15,940
that wants to talk about it my email

877
00:44:15,940 --> 00:44:17,650
address is here it's got a packet calm

878
00:44:17,650 --> 00:44:19,690
if you can come look for me later in the

879
00:44:19,690 --> 00:44:20,620
conference

880
00:44:20,620 --> 00:44:23,410
most of my trauma over there I'm sure

881
00:44:23,410 --> 00:44:24,520
he'll be glad to talk to people about

882
00:44:24,520 --> 00:44:27,180
this but

883
00:44:27,760 --> 00:44:31,130
they may other questions I know you said

884
00:44:31,130 --> 00:44:33,320
the project was in the early stages but

885
00:44:33,320 --> 00:44:37,340
what FPGA and EDA suite are you looking

886
00:44:37,340 --> 00:44:45,170
at doing this work so there's two ways

887
00:44:45,170 --> 00:44:47,690
to answer that obviously one is what

888
00:44:47,690 --> 00:44:50,000
might we use if this was a mass

889
00:44:50,000 --> 00:44:54,490
production is it cost into account and

890
00:44:54,490 --> 00:44:58,880
board space and things like that so in

891
00:44:58,880 --> 00:45:00,050
that situation

892
00:45:00,050 --> 00:45:02,500
Intel has some nice options there as

893
00:45:02,500 --> 00:45:07,940
upgrade from their Maxie field use that

894
00:45:07,940 --> 00:45:08,930
would be at the top of the list right

895
00:45:08,930 --> 00:45:11,119
now if we're gonna smash production but

896
00:45:11,119 --> 00:45:12,920
just as prototype there's something

897
00:45:12,920 --> 00:45:16,369
together and using the Xilinx Inc as a

898
00:45:16,369 --> 00:45:22,670
built-in ARM arm core and actually

899
00:45:22,670 --> 00:45:25,160
pretty powerful FPGA sparse look-up

900
00:45:25,160 --> 00:45:27,830
tables and well that goes but that is

901
00:45:27,830 --> 00:45:30,040
just to throw together a quick and dirty

902
00:45:30,040 --> 00:45:34,339
proof of concept and obviously in

903
00:45:34,339 --> 00:45:36,109
production you use something much

904
00:45:36,109 --> 00:45:40,460
smaller much cheaper but yes for very

905
00:45:40,460 --> 00:45:42,200
early stages this hardware does not

906
00:45:42,200 --> 00:45:44,000
exist yet but I'm hoping it will soon

907
00:45:44,000 --> 00:45:46,970
and anybody would like to have updates

908
00:45:46,970 --> 00:45:49,869
along the way send me an email glad to

909
00:45:49,869 --> 00:45:52,730
tell you one when there's more to report

910
00:45:52,730 --> 00:45:55,060
and I'm sure it'll be a blog post and

911
00:45:55,060 --> 00:46:02,810
all that it's we have we're a bit

912
00:46:02,810 --> 00:46:04,250
running out of time but I guess we can

913
00:46:04,250 --> 00:46:05,930
take two more questions and then we

914
00:46:05,930 --> 00:46:09,500
should be done so I had a quick question

915
00:46:09,500 --> 00:46:12,980
about the utility that you use to get

916
00:46:12,980 --> 00:46:15,380
the device tree for open BMC development

917
00:46:15,380 --> 00:46:17,089
could you speak a little bit more about

918
00:46:17,089 --> 00:46:18,500
that is that something you guys

919
00:46:18,500 --> 00:46:20,510
developed are you guys using that right

920
00:46:20,510 --> 00:46:24,530
now yeah so I actually meant to talk

921
00:46:24,530 --> 00:46:27,770
about that more during the talk so this

922
00:46:27,770 --> 00:46:30,050
is something that it's a work in

923
00:46:30,050 --> 00:46:30,530
progress

924
00:46:30,530 --> 00:46:33,050
it partially works right now I have a

925
00:46:33,050 --> 00:46:34,910
little more work to do on it before

926
00:46:34,910 --> 00:46:39,790
being able to call it a success but

927
00:46:40,320 --> 00:46:43,300
it's very close to working and if we all

928
00:46:43,300 --> 00:46:46,000
have a blog post I'm actually planning

929
00:46:46,000 --> 00:46:48,010
on doing a blog post later this month so

930
00:46:48,010 --> 00:46:51,130
maybe three or four weeks from now but

931
00:46:51,130 --> 00:46:53,020
out of post but out code but yeah the

932
00:46:53,020 --> 00:46:56,590
idea is that you take your vendors BMC

933
00:46:56,590 --> 00:46:57,730
firmware image that they provide you

934
00:46:57,730 --> 00:46:58,960
know you go you go to their website and

935
00:46:58,960 --> 00:47:00,340
you download the latest version of their

936
00:47:00,340 --> 00:47:03,100
BMC firmware so yeah their image file

937
00:47:03,100 --> 00:47:06,340
it's in there special format you know

938
00:47:06,340 --> 00:47:09,150
whether it's super micros format or an

939
00:47:09,150 --> 00:47:13,420
ami image but the idea is you just feed

940
00:47:13,420 --> 00:47:15,790
that image into the tool and it spits

941
00:47:15,790 --> 00:47:17,650
out the device tree you would need for

942
00:47:17,650 --> 00:47:19,960
you boot what you need to provide to the

943
00:47:19,960 --> 00:47:25,260
Linux kernel and also a list of sensors

944
00:47:25,260 --> 00:47:27,580
it's not going to be perfect there are

945
00:47:27,580 --> 00:47:30,610
some some pmc firmware that does weird

946
00:47:30,610 --> 00:47:32,880
things

947
00:47:33,300 --> 00:47:37,240
maybe they add I squared C muxes around

948
00:47:37,240 --> 00:47:38,800
the board and places wooden expect it

949
00:47:38,800 --> 00:47:39,940
there's some things you'll have to do

950
00:47:39,940 --> 00:47:41,860
manually but it's designed to save a lot

951
00:47:41,860 --> 00:47:47,800
of the time glad to tell you when I have

952
00:47:47,800 --> 00:47:50,170
a code just share and I think they'll be

953
00:47:50,170 --> 00:47:56,890
in a few weeks from now all right thanks

954
00:47:56,890 --> 00:47:58,980
again

955
00:47:59,770 --> 00:48:04,210
[Applause]

956
00:48:04,210 --> 00:48:05,850
[Music]

957
00:48:05,850 --> 00:48:07,910
you

