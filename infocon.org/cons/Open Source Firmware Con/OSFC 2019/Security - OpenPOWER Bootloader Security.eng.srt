1
00:00:03,190 --> 00:00:06,259
[Music]

2
00:00:07,099 --> 00:00:10,230
so welcome back everyone

3
00:00:10,230 --> 00:00:12,210
now we have George speaking about open

4
00:00:12,210 --> 00:00:16,590
power and trusted butsu enjoy right

5
00:00:16,590 --> 00:00:18,480
thank you very much and I appreciate the

6
00:00:18,480 --> 00:00:20,160
opportunity to to talk a little bit

7
00:00:20,160 --> 00:00:23,160
about the work that my team has been

8
00:00:23,160 --> 00:00:28,170
doing to improve the security ecosystem

9
00:00:28,170 --> 00:00:30,990
for open power

10
00:00:30,990 --> 00:00:36,770
I am the IBM Linux Technology Center

11
00:00:36,770 --> 00:00:39,030
security development team lead and I'm a

12
00:00:39,030 --> 00:00:44,010
security architect there and Linux

13
00:00:44,010 --> 00:00:46,410
Technology Center the part that I'm in

14
00:00:46,410 --> 00:00:49,440
has moved under the power organization

15
00:00:49,440 --> 00:00:51,899
so we are largely although not

16
00:00:51,899 --> 00:00:54,449
exclusively focused on power systems

17
00:00:54,449 --> 00:00:57,539
nowadays so and then with the

18
00:00:57,539 --> 00:00:59,420
acquisition of Red Hat there's another

19
00:00:59,420 --> 00:01:02,190
when X technologies center over there so

20
00:01:02,190 --> 00:01:05,760
I expect we'll be interacting a lot more

21
00:01:05,760 --> 00:01:09,600
with them originally this was a proposed

22
00:01:09,600 --> 00:01:12,180
as a lightning talk so I've expanded it

23
00:01:12,180 --> 00:01:14,159
and hopefully I'm giving you more for

24
00:01:14,159 --> 00:01:20,549
your money so with that I'm gonna take

25
00:01:20,549 --> 00:01:25,860
you through some background and in

26
00:01:25,860 --> 00:01:31,920
rationale for this project some open

27
00:01:31,920 --> 00:01:35,189
power specific things some major boot

28
00:01:35,189 --> 00:01:37,560
components of open power because you're

29
00:01:37,560 --> 00:01:39,570
probably most of you not very familiar

30
00:01:39,570 --> 00:01:42,119
with open power before you'll become

31
00:01:42,119 --> 00:01:44,250
more familiar since we're opening up the

32
00:01:44,250 --> 00:01:49,280
architecture even more the firmware

33
00:01:49,280 --> 00:01:52,979
foundation for trusted booth OS trusted

34
00:01:52,979 --> 00:01:58,110
boot secure boot and the firmware and

35
00:01:58,110 --> 00:02:00,000
the operating system the current state

36
00:02:00,000 --> 00:02:02,640
of the project and then if have enough

37
00:02:02,640 --> 00:02:06,350
time some extension into the OS and two

38
00:02:06,350 --> 00:02:11,640
guests so standard disclaimer these are

39
00:02:11,640 --> 00:02:13,950
really my views whatever I'm presenting

40
00:02:13,950 --> 00:02:15,270
here may or may not make it into

41
00:02:15,270 --> 00:02:18,000
products I hope it does because I want

42
00:02:18,000 --> 00:02:21,989
to keep my job but I have to tell you

43
00:02:21,989 --> 00:02:23,670
that there are various trademarks here

44
00:02:23,670 --> 00:02:28,319
as well so a little background secure

45
00:02:28,319 --> 00:02:30,950
boot and by that I mean signed

46
00:02:30,950 --> 00:02:33,629
components that are verified at boot

47
00:02:33,629 --> 00:02:38,099
time you know these Rick this is a

48
00:02:38,099 --> 00:02:40,170
feature that's expected by customers

49
00:02:40,170 --> 00:02:43,170
nowadays and standards are requiring it

50
00:02:43,170 --> 00:02:48,750
more and more often trusted boot which

51
00:02:48,750 --> 00:02:53,519
is TCG style measurement and TCR

52
00:02:53,519 --> 00:02:56,599
extensions is useful for assessing

53
00:02:56,599 --> 00:03:00,709
system state and we expected there to be

54
00:03:00,709 --> 00:03:03,900
more standards around it by this time

55
00:03:03,900 --> 00:03:05,849
but I expect that might be changed you

56
00:03:05,849 --> 00:03:06,900
know I see a lot of interest in

57
00:03:06,900 --> 00:03:10,980
attestation nowadays and so we're

58
00:03:10,980 --> 00:03:13,470
working towards a comprehensive secure

59
00:03:13,470 --> 00:03:16,940
and trusted boot solution for open power

60
00:03:16,940 --> 00:03:20,670
all power 9 systems nowadays ship with

61
00:03:20,670 --> 00:03:23,970
the TPM and sign firmware and the

62
00:03:23,970 --> 00:03:28,620
firmware exploits the TPM by producing a

63
00:03:28,620 --> 00:03:30,840
an event log and extending measurements

64
00:03:30,840 --> 00:03:35,670
out to the TPM PC ours however it

65
00:03:35,670 --> 00:03:39,299
currently only extends to the bootloader

66
00:03:39,299 --> 00:03:42,750
and it stops and that's where my team is

67
00:03:42,750 --> 00:03:46,830
focusing is adding the flexibility to

68
00:03:46,830 --> 00:03:50,750
manage different operating system

69
00:03:50,750 --> 00:03:55,530
certificates and creating a workable key

70
00:03:55,530 --> 00:04:02,819
management and so hopefully we'll get it

71
00:04:02,819 --> 00:04:05,159
on through to the OS and and beyond in

72
00:04:05,159 --> 00:04:08,939
the relatively near future I probably

73
00:04:08,939 --> 00:04:10,830
don't have to give a lot of rationale

74
00:04:10,830 --> 00:04:14,010
here for this but I mean we've seen

75
00:04:14,010 --> 00:04:19,250
evidence of real world firmware attacks

76
00:04:19,250 --> 00:04:24,479
from a number of quarters and government

77
00:04:24,479 --> 00:04:26,850
standards not just in the US but

78
00:04:26,850 --> 00:04:28,970
worldwide are beginning to require

79
00:04:28,970 --> 00:04:32,720
secure boot and trusted computing

80
00:04:32,720 --> 00:04:36,240
instrumentation so I won't belabor that

81
00:04:36,240 --> 00:04:44,190
a lot just recently announced that the

82
00:04:44,190 --> 00:04:46,080
open power foundation has moved under

83
00:04:46,080 --> 00:04:48,180
the Linux Foundation so we've opened our

84
00:04:48,180 --> 00:04:51,360
eisah and produced soft core

85
00:04:51,360 --> 00:04:54,330
implementation of that that was just

86
00:04:54,330 --> 00:04:59,340
demoed so I'm happy to see not only is

87
00:04:59,340 --> 00:05:01,920
now all of our firmware open source but

88
00:05:01,920 --> 00:05:07,680
we're making the actual CPU design

89
00:05:07,680 --> 00:05:12,270
information more available and that can

90
00:05:12,270 --> 00:05:15,030
allow you to see everything that's in

91
00:05:15,030 --> 00:05:17,970
your system which is very cool from a

92
00:05:17,970 --> 00:05:22,590
security standpoint it is however its

93
00:05:22,590 --> 00:05:26,880
own thing it's not UEFI it's not

94
00:05:26,880 --> 00:05:29,630
anything else it's it's got its own

95
00:05:29,630 --> 00:05:34,170
design from the ground up rooted in the

96
00:05:34,170 --> 00:05:39,480
the older PowerPC work and power VM and

97
00:05:39,480 --> 00:05:44,610
and before we have two distinct security

98
00:05:44,610 --> 00:05:47,970
domains with two different key

99
00:05:47,970 --> 00:05:50,880
authorities a what we call a firmware

100
00:05:50,880 --> 00:05:53,220
security domain it's rooted in hardware

101
00:05:53,220 --> 00:05:56,910
and then that gets handed off to a

102
00:05:56,910 --> 00:05:58,980
software security domain where we need

103
00:05:58,980 --> 00:06:02,010
to implement this flexible key

104
00:06:02,010 --> 00:06:04,740
management so that different operating

105
00:06:04,740 --> 00:06:08,520
system kernels can be verified we have a

106
00:06:08,520 --> 00:06:14,010
device tree we don't have an S mmm

107
00:06:14,010 --> 00:06:17,220
we are not planning on any time in the

108
00:06:17,220 --> 00:06:18,840
near future implementing the D RTM

109
00:06:18,840 --> 00:06:21,030
capability our trust in computing as

110
00:06:21,030 --> 00:06:25,770
static only at the moment and most

111
00:06:25,770 --> 00:06:29,490
importantly from a strip standpoint we

112
00:06:29,490 --> 00:06:33,000
don't have any robot reliably lockable

113
00:06:33,000 --> 00:06:40,169
storage so no no lockable flash and this

114
00:06:40,169 --> 00:06:41,550
was a

115
00:06:41,550 --> 00:06:45,120
because the hardware designs didn't

116
00:06:45,120 --> 00:06:47,520
initially consider secure food so we're

117
00:06:47,520 --> 00:06:50,370
still sort of living with this model but

118
00:06:50,370 --> 00:06:54,720
we have a TPM and the TPM offers us the

119
00:06:54,720 --> 00:06:58,740
ability to have a small piece of

120
00:06:58,740 --> 00:07:01,139
securable memory that we can update

121
00:07:01,139 --> 00:07:03,810
early in the boot process and lock the

122
00:07:03,810 --> 00:07:06,320
door behind us by throwing away that the

123
00:07:06,320 --> 00:07:11,490
key to that allows us to write it and

124
00:07:11,490 --> 00:07:15,270
this this turns out to be the the most

125
00:07:15,270 --> 00:07:18,720
important thing for our secure boot

126
00:07:18,720 --> 00:07:21,510
solution that allows us to actually have

127
00:07:21,510 --> 00:07:26,460
one I won't go into a great bit of

128
00:07:26,460 --> 00:07:28,770
detail but I want to tell you a little

129
00:07:28,770 --> 00:07:35,010
bit about the boot components so we have

130
00:07:35,010 --> 00:07:39,210
this this small pre firmware processor

131
00:07:39,210 --> 00:07:42,690
called self boot engine that does some

132
00:07:42,690 --> 00:07:44,820
initialization passes control off to

133
00:07:44,820 --> 00:07:49,080
host boot all of the routines that are

134
00:07:49,080 --> 00:07:52,590
used to verify the earliest code are

135
00:07:52,590 --> 00:07:55,289
contained in a one-time programmable ROM

136
00:07:55,289 --> 00:07:58,740
and then we have a C prom that stores a

137
00:07:58,740 --> 00:08:01,229
hash of our firmware keys so that we can

138
00:08:01,229 --> 00:08:03,120
actually go update firmware if we have

139
00:08:03,120 --> 00:08:09,720
to do keep transitions the what we call

140
00:08:09,720 --> 00:08:12,479
the peon or the processor nor is a nor

141
00:08:12,479 --> 00:08:16,860
flash that holds our firmware images and

142
00:08:16,860 --> 00:08:22,650
our secure boot certificates host boots

143
00:08:22,650 --> 00:08:24,840
really the early stage firmware that

144
00:08:24,840 --> 00:08:27,720
does basic initialization of buses and

145
00:08:27,720 --> 00:08:31,590
memory it hands-off control to ski boot

146
00:08:31,590 --> 00:08:35,400
that does more initialization and it

147
00:08:35,400 --> 00:08:37,440
provides runtime services so this you

148
00:08:37,440 --> 00:08:39,510
may have heard of opal the open power

149
00:08:39,510 --> 00:08:41,760
abstraction layer ski boots what

150
00:08:41,760 --> 00:08:46,020
actually provides opal and then ski

151
00:08:46,020 --> 00:08:51,209
route is what ski boot hands over

152
00:08:51,209 --> 00:08:54,570
control to after it finishes and it's

153
00:08:54,570 --> 00:08:54,990
act

154
00:08:54,990 --> 00:08:58,770
a Linux kernel with an embedded Ram file

155
00:08:58,770 --> 00:09:01,650
system that runs petty boot in its user

156
00:09:01,650 --> 00:09:04,200
space and petty boot is what's used to

157
00:09:04,200 --> 00:09:07,500
take Zech the OS kernel finally so the

158
00:09:07,500 --> 00:09:10,590
little gold box there represents what my

159
00:09:10,590 --> 00:09:13,110
team is presently working on now it's

160
00:09:13,110 --> 00:09:14,870
it's higher up in the stack and

161
00:09:14,870 --> 00:09:18,930
everything below it already has a secure

162
00:09:18,930 --> 00:09:26,640
and trusted boot capability so the TCG

163
00:09:26,640 --> 00:09:33,360
server spec is kind of you know old and

164
00:09:33,360 --> 00:09:38,310
ossified and it largely defers to the pc

165
00:09:38,310 --> 00:09:45,960
spec so we've tried to map the PC client

166
00:09:45,960 --> 00:09:52,080
spec and UEFI specs into open power in a

167
00:09:52,080 --> 00:09:56,190
reasonable way and we try to provide

168
00:09:56,190 --> 00:09:59,250
reasonable PC our semantics so that

169
00:09:59,250 --> 00:10:02,600
attestation makes some amount of sense

170
00:10:02,600 --> 00:10:06,780
we can't do that in all cases maybe we

171
00:10:06,780 --> 00:10:09,630
need architecture specific standards in

172
00:10:09,630 --> 00:10:12,750
the TCG to address these non PC

173
00:10:12,750 --> 00:10:18,780
architectures and in our case we're

174
00:10:18,780 --> 00:10:22,260
using the device tree to to locate our

175
00:10:22,260 --> 00:10:25,830
TPM and the event log area and pass that

176
00:10:25,830 --> 00:10:29,400
along to our layers and as I mentioned

177
00:10:29,400 --> 00:10:30,990
before we only have a static bit of

178
00:10:30,990 --> 00:10:37,020
trust for measurement the measurement

179
00:10:37,020 --> 00:10:40,280
starts with the dassault boot engine

180
00:10:40,280 --> 00:10:45,120
measuring host boot host boot loads

181
00:10:45,120 --> 00:10:48,690
another layer called host would extended

182
00:10:48,690 --> 00:10:50,340
and the host foot extended is actually

183
00:10:50,340 --> 00:10:52,170
the first piece of firmware that has the

184
00:10:52,170 --> 00:10:54,330
ability to communicate with a TPM so the

185
00:10:54,330 --> 00:10:56,990
the TPM measurements are squirreled away

186
00:10:56,990 --> 00:11:00,510
until such time as host but extended can

187
00:11:00,510 --> 00:11:03,840
extend those into the TPM so our CR TM

188
00:11:03,840 --> 00:11:06,660
comprises the SPE the ROM code and all

189
00:11:06,660 --> 00:11:09,120
of host boot and

190
00:11:09,120 --> 00:11:12,870
the the CR TM depends on its tag rity

191
00:11:12,870 --> 00:11:16,379
integrity being verified by secure boot

192
00:11:16,379 --> 00:11:18,930
so the signing and verification of the

193
00:11:18,930 --> 00:11:22,949
firmware modules and then the firmware

194
00:11:22,949 --> 00:11:27,360
measurement chain stops when ski boot

195
00:11:27,360 --> 00:11:29,009
measures ski route and that's when we

196
00:11:29,009 --> 00:11:34,790
transition to the software domain so

197
00:11:34,790 --> 00:11:39,089
what happens once we get to the petty

198
00:11:39,089 --> 00:11:43,230
boot boot loader in and ski route so

199
00:11:43,230 --> 00:11:50,339
this is an it Ram FS image contains the

200
00:11:50,339 --> 00:11:52,350
petty boot application it calls

201
00:11:52,350 --> 00:11:57,540
K exec file load to load the kernel so

202
00:11:57,540 --> 00:12:00,389
that it can it can pass control over to

203
00:12:00,389 --> 00:12:05,670
it and it uses i'ma appraisal to measure

204
00:12:05,670 --> 00:12:08,279
the kernel before it passes control over

205
00:12:08,279 --> 00:12:15,269
to it and ski route largely relies on

206
00:12:15,269 --> 00:12:18,779
IMO we're adding some checking in the

207
00:12:18,779 --> 00:12:21,059
kernel for instance checking loading of

208
00:12:21,059 --> 00:12:25,339
keys but we're we're essentially already

209
00:12:25,339 --> 00:12:27,809
we already have this mechanism available

210
00:12:27,809 --> 00:12:29,579
it's a really nice mechanism in the

211
00:12:29,579 --> 00:12:34,350
Linux kernel to measure what's going on

212
00:12:34,350 --> 00:12:35,999
in the kernel so why not take advantage

213
00:12:35,999 --> 00:12:39,929
of it and as I mentioned we passed

214
00:12:39,929 --> 00:12:42,329
things up in the device tree because we

215
00:12:42,329 --> 00:12:45,170
have it available to us and it's

216
00:12:45,170 --> 00:12:48,529
reasonably secure

217
00:12:49,339 --> 00:12:51,929
however the I'm event log is maintained

218
00:12:51,929 --> 00:12:54,540
separately from the firmware event log

219
00:12:54,540 --> 00:12:58,079
and so we've modified K exec file load

220
00:12:58,079 --> 00:13:01,980
to pass the event log up to the next

221
00:13:01,980 --> 00:13:09,509
kernel in the purgatory area and in this

222
00:13:09,509 --> 00:13:11,459
way you can have you can envision an

223
00:13:11,459 --> 00:13:14,100
infinite chain of K exact kernels that

224
00:13:14,100 --> 00:13:17,129
each extend the imma event log so that

225
00:13:17,129 --> 00:13:20,490
you have a complete log of what I was

226
00:13:20,490 --> 00:13:23,430
measured through all the kernels

227
00:13:23,430 --> 00:13:26,190
and you might envision this being used

228
00:13:26,190 --> 00:13:31,290
by not just this but maybe you know you

229
00:13:31,290 --> 00:13:33,390
want your crashed on Colonel measuring

230
00:13:33,390 --> 00:13:38,880
stuff and there are other cases where

231
00:13:38,880 --> 00:13:40,020
this might be useful we thought about

232
00:13:40,020 --> 00:13:41,730
like self encrypting drive secrets

233
00:13:41,730 --> 00:13:44,790
passing them up through the the the

234
00:13:44,790 --> 00:13:49,080
purgatory area as well haven't

235
00:13:49,080 --> 00:13:50,700
implemented it but but it's it's a

236
00:13:50,700 --> 00:13:55,950
thought and then of course when in and

237
00:13:55,950 --> 00:13:58,800
if we extend this into guests we need

238
00:13:58,800 --> 00:14:02,190
virtual implementations of TPM and and

239
00:14:02,190 --> 00:14:06,270
sign from where they're I won't talk a

240
00:14:06,270 --> 00:14:09,090
lot about how the firmware signed but

241
00:14:09,090 --> 00:14:13,230
suffice it to say that it's it's it's

242
00:14:13,230 --> 00:14:16,620
signed and it's encapsulated and what we

243
00:14:16,620 --> 00:14:18,540
call containers may be the most

244
00:14:18,540 --> 00:14:23,850
overloaded term of the decade but it

245
00:14:23,850 --> 00:14:25,290
actually contains three different keys

246
00:14:25,290 --> 00:14:26,790
that can allow for different key

247
00:14:26,790 --> 00:14:29,580
authorities we maintain our signing keys

248
00:14:29,580 --> 00:14:32,880
and an HSM so that the signing keys

249
00:14:32,880 --> 00:14:41,850
can't easily escape and we keep hash of

250
00:14:41,850 --> 00:14:45,950
the hardware keys in the sea prom and

251
00:14:45,950 --> 00:14:49,530
the firmware can really only be updated

252
00:14:49,530 --> 00:14:52,830
by applying a security jumper so that

253
00:14:52,830 --> 00:14:56,340
you update the host boot and the see

254
00:14:56,340 --> 00:15:00,000
prom concurrently so you can't actually

255
00:15:00,000 --> 00:15:02,100
change it but it we've made it hard to

256
00:15:02,100 --> 00:15:07,620
change absent a physical attack so once

257
00:15:07,620 --> 00:15:09,570
again verification begins with the self

258
00:15:09,570 --> 00:15:14,130
boot engine checking host boot and and

259
00:15:14,130 --> 00:15:18,120
the the chain really begins in the rom

260
00:15:18,120 --> 00:15:22,400
code that's immutable so it's a true

261
00:15:22,400 --> 00:15:25,290
immutable chunk of code and it's got all

262
00:15:25,290 --> 00:15:29,070
the verification routines in it and that

263
00:15:29,070 --> 00:15:31,770
can't be changed so hopefully we don't

264
00:15:31,770 --> 00:15:35,759
have any bugs on it and

265
00:15:35,759 --> 00:15:38,639
the I already mentioned you can update

266
00:15:38,639 --> 00:15:44,189
it with a security jumper and then this

267
00:15:44,189 --> 00:15:46,319
train of trust comes to an end its key

268
00:15:46,319 --> 00:15:50,040
route as well and that's our layer that

269
00:15:50,040 --> 00:15:51,739
remember that's our Linux kernel did

270
00:15:51,739 --> 00:15:56,279
execute our bootloader so what about OS

271
00:15:56,279 --> 00:16:00,540
secure boot what we're working on so we

272
00:16:00,540 --> 00:16:04,589
have no central certificate authority in

273
00:16:04,589 --> 00:16:09,329
our case and the system owner is the

274
00:16:09,329 --> 00:16:11,339
system owner it's up to the system owner

275
00:16:11,339 --> 00:16:16,019
to sign updates and the system owner

276
00:16:16,019 --> 00:16:18,540
could be the administrator the system

277
00:16:18,540 --> 00:16:23,269
owner could be the manufacturer and it

278
00:16:23,269 --> 00:16:26,819
supports flexibility there

279
00:16:26,819 --> 00:16:35,459
this is very much Ken to the G hierarchy

280
00:16:35,459 --> 00:16:39,779
that you see in EFI we've used the same

281
00:16:39,779 --> 00:16:45,239
variable names and we've also used the

282
00:16:45,239 --> 00:16:49,439
same EFI signature list format for tool

283
00:16:49,439 --> 00:16:52,109
compatibility so the idea is that most

284
00:16:52,109 --> 00:16:54,389
people you absolutely must generate your

285
00:16:54,389 --> 00:16:56,100
private keys offline and not keep them

286
00:16:56,100 --> 00:16:58,439
on the server where you're you're doing

287
00:16:58,439 --> 00:17:01,829
the verification and most people will

288
00:17:01,829 --> 00:17:04,049
probably want to do it on a laptop so

289
00:17:04,049 --> 00:17:06,240
why not reuse the same tools this is

290
00:17:06,240 --> 00:17:07,980
about the only compatibility that we

291
00:17:07,980 --> 00:17:10,679
have with the FI but we thought that

292
00:17:10,679 --> 00:17:14,130
this was this was a useful take away out

293
00:17:14,130 --> 00:17:19,769
of out of UEFI so I mean you can you

294
00:17:19,769 --> 00:17:22,199
sort of read the diagram that the the

295
00:17:22,199 --> 00:17:25,079
keys in the higher level verify the

296
00:17:25,079 --> 00:17:29,700
public keys updates at the next floral

297
00:17:29,700 --> 00:17:32,330
level until we get to the actual kernel

298
00:17:32,330 --> 00:17:39,029
verification at the bottom and probably

299
00:17:39,029 --> 00:17:40,559
everyone's pretty familiar with with

300
00:17:40,559 --> 00:17:43,529
UEFI secure boot at this point we we do

301
00:17:43,529 --> 00:17:46,019
aim to support scenarios where you sign

302
00:17:46,019 --> 00:17:49,230
your own kernel manufacturer signs

303
00:17:49,230 --> 00:17:54,989
the the operating system or we preload a

304
00:17:54,989 --> 00:17:57,600
Linux distribution or other operating

305
00:17:57,600 --> 00:18:01,350
system we're only going to have a couple

306
00:18:01,350 --> 00:18:06,799
modes that are similar to UEFI modes

307
00:18:06,799 --> 00:18:10,289
setup mode where unauthenticated updates

308
00:18:10,289 --> 00:18:14,269
are permitted in then user mode where

309
00:18:14,269 --> 00:18:16,320
authenticated updates are required to

310
00:18:16,320 --> 00:18:18,570
update the key store and then you have

311
00:18:18,570 --> 00:18:20,869
to assert some sort of physical presence

312
00:18:20,869 --> 00:18:24,869
to bypass that authentication and there

313
00:18:24,869 --> 00:18:25,830
are a couple of different kinds of

314
00:18:25,830 --> 00:18:27,629
physical presence one is a jumper on the

315
00:18:27,629 --> 00:18:29,970
board another in some models is a

316
00:18:29,970 --> 00:18:32,129
special power switch that you hold the

317
00:18:32,129 --> 00:18:34,710
power button and were three seconds or

318
00:18:34,710 --> 00:18:36,090
something like that and you assert

319
00:18:36,090 --> 00:18:37,499
physical presence and then you can go

320
00:18:37,499 --> 00:18:39,179
bypass authentication so you've got to

321
00:18:39,179 --> 00:18:41,700
take a physical action authenticated

322
00:18:41,700 --> 00:18:43,289
updates is generally two scalable way

323
00:18:43,289 --> 00:18:45,570
you want to do this you don't want to

324
00:18:45,570 --> 00:18:46,830
have to go around to a thousand machines

325
00:18:46,830 --> 00:18:48,450
in a data center and assert physical

326
00:18:48,450 --> 00:18:51,299
presence but you also don't want people

327
00:18:51,299 --> 00:18:53,220
to to be able to bypass it easily so

328
00:18:53,220 --> 00:18:55,859
it's a trade-off between convenience and

329
00:18:55,859 --> 00:19:01,710
security we're signing the kernel with

330
00:19:01,710 --> 00:19:04,559
the sign file utility that is used to

331
00:19:04,559 --> 00:19:08,340
sign kernel modules we're not using the

332
00:19:08,340 --> 00:19:11,730
peak off format that that Intel

333
00:19:11,730 --> 00:19:16,470
Microsoft use and by appending the

334
00:19:16,470 --> 00:19:18,409
signature to the end of the kernel image

335
00:19:18,409 --> 00:19:20,340
we're able to provide backward

336
00:19:20,340 --> 00:19:24,570
compatibility so that's kind of cool and

337
00:19:24,570 --> 00:19:28,889
we're just we're something using sha-256

338
00:19:28,889 --> 00:19:31,980
with with RSA to 2048 signatures right

339
00:19:31,980 --> 00:19:37,879
now just as they're doing for PE cough

340
00:19:37,879 --> 00:19:41,899
the Linux in it Ram if s was not signed

341
00:19:41,899 --> 00:19:45,389
it's volatile most distros regenerate it

342
00:19:45,389 --> 00:19:48,480
on installation this might be a case

343
00:19:48,480 --> 00:19:52,440
where we can apply i'm appraisal which

344
00:19:52,440 --> 00:19:55,369
allows you to sign files and verify them

345
00:19:55,369 --> 00:20:01,109
that requires cpio support for x adders

346
00:20:01,109 --> 00:20:03,120
and the linux kernel

347
00:20:03,120 --> 00:20:06,090
and there is a patch for that going

348
00:20:06,090 --> 00:20:08,010
upstream now so hopefully in the near

349
00:20:08,010 --> 00:20:09,360
future we'll be able to do this in the

350
00:20:09,360 --> 00:20:12,590
interim with us extend the chain on up

351
00:20:12,590 --> 00:20:19,220
unbroken into the operating system and

352
00:20:19,220 --> 00:20:21,660
our signatures need to be compatible

353
00:20:21,660 --> 00:20:26,400
with guests as well which shouldn't be a

354
00:20:26,400 --> 00:20:32,100
problem but that was certainly a goal so

355
00:20:32,100 --> 00:20:34,200
tea management is as you might imagine

356
00:20:34,200 --> 00:20:38,820
the hard part of this since we we don't

357
00:20:38,820 --> 00:20:44,550
have lockable flash we store a hash of

358
00:20:44,550 --> 00:20:47,850
the key store in a TPM in the RAM index

359
00:20:47,850 --> 00:20:53,280
and we can update that in the ski boot

360
00:20:53,280 --> 00:20:57,660
layer here and and then write a random

361
00:20:57,660 --> 00:21:00,630
password on it for the password away and

362
00:21:00,630 --> 00:21:03,960
and right walk it away from the higher

363
00:21:03,960 --> 00:21:07,220
layers so we can we can do our

364
00:21:07,220 --> 00:21:10,620
processing and then prevent operating

365
00:21:10,620 --> 00:21:13,350
systems and and boot loaders from I'm

366
00:21:13,350 --> 00:21:17,970
touching it and this corresponds to the

367
00:21:17,970 --> 00:21:21,030
scenario three and the NIST server bio

368
00:21:21,030 --> 00:21:26,340
protection BIOS protection guidelines so

369
00:21:26,340 --> 00:21:27,420
we can't actually meet that

370
00:21:27,420 --> 00:21:31,290
specification with this design as the

371
00:21:31,290 --> 00:21:36,980
spec or as the standard currently stands

372
00:21:37,670 --> 00:21:42,420
the updates are placed into a an update

373
00:21:42,420 --> 00:21:44,190
queue that's stored in p-norm

374
00:21:44,190 --> 00:21:47,730
and because each of them are signed even

375
00:21:47,730 --> 00:21:49,320
if you tamper with them you know we can

376
00:21:49,320 --> 00:21:52,110
we can detect that and and throw those

377
00:21:52,110 --> 00:21:55,770
away throw an error and every update

378
00:21:55,770 --> 00:21:59,640
requires a reboot you know we don't do

379
00:21:59,640 --> 00:22:01,230
any of this in line we don't have an S

380
00:22:01,230 --> 00:22:05,370
on them so it's it's a simpler model

381
00:22:05,370 --> 00:22:07,440
little more cumbersome to deal with

382
00:22:07,440 --> 00:22:09,900
maybe but simple is often good for

383
00:22:09,900 --> 00:22:15,179
security so hopefully that applies here

384
00:22:15,179 --> 00:22:21,979
so the ski boot layer verifies the

385
00:22:21,979 --> 00:22:25,499
updates using the PK or the Keck public

386
00:22:25,499 --> 00:22:30,210
key and the PK is special in that it has

387
00:22:30,210 --> 00:22:34,080
its own nvram index and that's because

388
00:22:34,080 --> 00:22:36,509
it controls the mode we're in and we

389
00:22:36,509 --> 00:22:37,379
want to be able to switch modes

390
00:22:37,379 --> 00:22:40,589
atomically and not worry about the rest

391
00:22:40,589 --> 00:22:49,379
of the keystore and similarly the the

392
00:22:49,379 --> 00:22:53,759
keystore has its own NVRAM index and we

393
00:22:53,759 --> 00:22:56,549
switch banks after an update and we want

394
00:22:56,549 --> 00:23:05,609
to be able to do that atomically and as

395
00:23:05,609 --> 00:23:07,739
I mentioned we we walked this behind us

396
00:23:07,739 --> 00:23:09,989
after after we do the update on the

397
00:23:09,989 --> 00:23:13,679
update cycle we can race against

398
00:23:13,679 --> 00:23:17,099
external changes nothing we can do about

399
00:23:17,099 --> 00:23:19,229
that in the current design hopefully in

400
00:23:19,229 --> 00:23:23,549
the future we'll have lockable flash so

401
00:23:23,549 --> 00:23:25,649
we can prevent races but we have to

402
00:23:25,649 --> 00:23:27,330
check the keystore now against the hash

403
00:23:27,330 --> 00:23:33,299
and the TPM before we use this so we we

404
00:23:33,299 --> 00:23:35,909
can't prevent someone infinitely denying

405
00:23:35,909 --> 00:23:37,529
service right now and that's something

406
00:23:37,529 --> 00:23:39,989
we want to address sana in a future

407
00:23:39,989 --> 00:23:41,849
design along with our hardware

408
00:23:41,849 --> 00:23:47,159
colleagues when this the underlying

409
00:23:47,159 --> 00:23:50,099
firmware Keys change we invalidate the

410
00:23:50,099 --> 00:23:53,369
software keys and if for some reason you

411
00:23:53,369 --> 00:23:59,879
can't update the key store because say

412
00:23:59,879 --> 00:24:02,789
the machine ownership has changed you

413
00:24:02,789 --> 00:24:08,820
don't have the private key to to go sign

414
00:24:08,820 --> 00:24:11,609
an update then you can assert physical

415
00:24:11,609 --> 00:24:13,109
presence with this jumper or power

416
00:24:13,109 --> 00:24:19,789
button so

417
00:24:21,610 --> 00:24:24,180
when we verify this as skier it boots up

418
00:24:24,180 --> 00:24:28,180
it populates the colonel keyring the

419
00:24:28,180 --> 00:24:34,140
i'ma keyring with keys and then when

420
00:24:34,140 --> 00:24:38,320
penny boot is used to select signed

421
00:24:38,320 --> 00:24:42,700
colonel it uses K exec file load and K

422
00:24:42,700 --> 00:24:46,540
exec file load uses imma to verify the

423
00:24:46,540 --> 00:24:49,600
kernel and we we had the patch I'm on to

424
00:24:49,600 --> 00:24:53,350
add this capability for an appended

425
00:24:53,350 --> 00:24:56,290
signature I'm on normally uses extended

426
00:24:56,290 --> 00:24:58,270
attributes in the file system to store

427
00:24:58,270 --> 00:25:02,560
the the signatures we didn't think it

428
00:25:02,560 --> 00:25:04,750
was desirable to have a two part thing

429
00:25:04,750 --> 00:25:06,610
extended attributes wasting to cause

430
00:25:06,610 --> 00:25:11,560
problems since forever so it's it's nice

431
00:25:11,560 --> 00:25:13,960
to have the signature appended and have

432
00:25:13,960 --> 00:25:16,450
it verified so other architectures might

433
00:25:16,450 --> 00:25:18,280
find this useful - everybody's got to

434
00:25:18,280 --> 00:25:21,880
pay exact kernels so we're hoping that

435
00:25:21,880 --> 00:25:27,250
this is a generally useful thing and so

436
00:25:27,250 --> 00:25:28,900
we have an arch specific policy right

437
00:25:28,900 --> 00:25:35,620
now for PowerPC to go add kernel policy

438
00:25:35,620 --> 00:25:38,950
to verify the kernel for our skier it

439
00:25:38,950 --> 00:25:45,550
colonel so we also need to make UI

440
00:25:45,550 --> 00:25:49,990
changes to the pedi boot UI so of course

441
00:25:49,990 --> 00:25:56,310
it needs to accept efi signature lists

442
00:25:56,310 --> 00:25:59,140
the peak ape presence determines the

443
00:25:59,140 --> 00:26:01,030
secure boot mode so I could go read dot

444
00:26:01,030 --> 00:26:04,780
and report status password

445
00:26:04,780 --> 00:26:06,190
authentication has been added to Petty

446
00:26:06,190 --> 00:26:07,990
Buddha it it previously didn't have

447
00:26:07,990 --> 00:26:10,390
password authentication so now we can

448
00:26:10,390 --> 00:26:12,490
control changes that are done through

449
00:26:12,490 --> 00:26:17,740
the pedi boot UI and you know this is

450
00:26:17,740 --> 00:26:21,160
still work in progress we're also adding

451
00:26:21,160 --> 00:26:24,010
adding Harding and lockdown patches to

452
00:26:24,010 --> 00:26:25,810
the Linux kernel there's Matthew

453
00:26:25,810 --> 00:26:26,350
Garrett's

454
00:26:26,350 --> 00:26:28,900
rather extensive set and I don't know if

455
00:26:28,900 --> 00:26:30,580
he did like 40 iterations or something

456
00:26:30,580 --> 00:26:35,110
like that on those and it looks like

457
00:26:35,110 --> 00:26:35,500
there

458
00:26:35,500 --> 00:26:36,850
finally get to where they're they're

459
00:26:36,850 --> 00:26:39,480
acceptable since it's an LS em now but

460
00:26:39,480 --> 00:26:42,309
there are some some of those we can use

461
00:26:42,309 --> 00:26:44,200
on power some of them don't make any

462
00:26:44,200 --> 00:26:46,240
sense we don't have a CPI table so we

463
00:26:46,240 --> 00:26:47,440
don't care about that

464
00:26:47,440 --> 00:26:50,020
we have our own problems like we have X

465
00:26:50,020 --> 00:26:52,780
Mon a built-in debugger you may not want

466
00:26:52,780 --> 00:26:54,580
to drop into X Mon where you can go

467
00:26:54,580 --> 00:26:56,679
twiddle with memory you know when you

468
00:26:56,679 --> 00:27:00,820
have some sort of error so that's one of

469
00:27:00,820 --> 00:27:03,970
the the patches that's proposed so we we

470
00:27:03,970 --> 00:27:06,429
know we need to harden this and lock it

471
00:27:06,429 --> 00:27:09,909
down and we also need to restrict the

472
00:27:09,909 --> 00:27:12,610
shell further right now you have pretty

473
00:27:12,610 --> 00:27:14,169
much unfettered access from the shell

474
00:27:14,169 --> 00:27:17,980
and so we want to use I'm appraisal and

475
00:27:17,980 --> 00:27:21,309
SELinux and minimize the operations that

476
00:27:21,309 --> 00:27:24,549
an administrator can do from that it'd

477
00:27:24,549 --> 00:27:25,900
be nice to have everything that you

478
00:27:25,900 --> 00:27:27,669
bring in have to be signed like there's

479
00:27:27,669 --> 00:27:29,740
a raid setup utility it should be signed

480
00:27:29,740 --> 00:27:31,270
it shouldn't be some random binary

481
00:27:31,270 --> 00:27:35,620
reality and as I mentioned before the

482
00:27:35,620 --> 00:27:38,049
key generation and signing but updates

483
00:27:38,049 --> 00:27:40,299
really needs to be done offline so we're

484
00:27:40,299 --> 00:27:42,280
not providing tools to do that as part

485
00:27:42,280 --> 00:27:43,809
of this environment we don't want to

486
00:27:43,809 --> 00:27:46,090
encourage bad practices here and the

487
00:27:46,090 --> 00:27:48,490
administrator can go generate these and

488
00:27:48,490 --> 00:27:50,110
then you can set up a network interface

489
00:27:50,110 --> 00:27:55,270
and that's the updates offline not sure

490
00:27:55,270 --> 00:27:57,010
how we'll make that easier in the future

491
00:27:57,010 --> 00:28:03,240
I'm not sure that we really should so

492
00:28:03,240 --> 00:28:07,750
current statuses that select power eight

493
00:28:07,750 --> 00:28:12,610
models premièred secure boot and swipe

494
00:28:12,610 --> 00:28:15,220
models could have TPM cards and power

495
00:28:15,220 --> 00:28:18,220
eight all power nine models shipped with

496
00:28:18,220 --> 00:28:21,580
the TPM and shipped with firmware

497
00:28:21,580 --> 00:28:27,960
instrumented to do extensions of PCRs

498
00:28:27,960 --> 00:28:31,570
create an event log and to verify the

499
00:28:31,570 --> 00:28:36,659
farm where we've been socializing our

500
00:28:36,659 --> 00:28:43,030
secure boot solution with open power

501
00:28:43,030 --> 00:28:45,809
with our Linux distribution partners

502
00:28:45,809 --> 00:28:47,890
right now

503
00:28:47,890 --> 00:28:49,330
Ubuntu

504
00:28:49,330 --> 00:28:53,139
to power Colonel in with sign file we

505
00:28:53,139 --> 00:28:54,940
anticipate Red Hat is going to do this

506
00:28:54,940 --> 00:28:59,379
in the very near future and that will

507
00:28:59,379 --> 00:29:01,539
give us the ability to verify these you

508
00:29:01,539 --> 00:29:03,879
know out of the box much as you do on

509
00:29:03,879 --> 00:29:10,360
x86 nowadays and we anticipate that the

510
00:29:10,360 --> 00:29:13,090
OS secure and trusted boot will premiere

511
00:29:13,090 --> 00:29:26,919
next year so we're not done the chains

512
00:29:26,919 --> 00:29:29,289
of trust the the secure boot chain of

513
00:29:29,289 --> 00:29:31,840
trust and the the trusted boot chain of

514
00:29:31,840 --> 00:29:36,429
trust need to go on up into the

515
00:29:36,429 --> 00:29:40,779
operating system and you know we we

516
00:29:40,779 --> 00:29:42,369
don't directly control that but we'll

517
00:29:42,369 --> 00:29:45,789
certainly levy features against distros

518
00:29:45,789 --> 00:29:49,629
to harden the kernels and in particular

519
00:29:49,629 --> 00:29:51,639
a exact load needs to be prohibited

520
00:29:51,639 --> 00:29:53,499
everybody needs to use K exact file load

521
00:29:53,499 --> 00:29:55,840
so you can K exactly sign kernels so

522
00:29:55,840 --> 00:29:57,609
even your a crash dump kernel should be

523
00:29:57,609 --> 00:30:01,119
signed and as I mentioned that we need

524
00:30:01,119 --> 00:30:03,399
to power in lockdown in hardening

525
00:30:03,399 --> 00:30:05,879
patches

526
00:30:06,119 --> 00:30:09,730
I'm appraisal can extend this secure

527
00:30:09,730 --> 00:30:12,700
boot chain of trust up into the OS it's

528
00:30:12,700 --> 00:30:14,830
been slow and adoption it'd be really

529
00:30:14,830 --> 00:30:18,129
helpful if distros would lay down the

530
00:30:18,129 --> 00:30:22,600
signature metadata when packages are

531
00:30:22,600 --> 00:30:24,460
installed and their patches upstream to

532
00:30:24,460 --> 00:30:26,710
do that but getting them to do this has

533
00:30:26,710 --> 00:30:30,129
been a bit of a chore and and there

534
00:30:30,129 --> 00:30:32,080
there are things that I'm a praise Allah

535
00:30:32,080 --> 00:30:34,960
does like slow things down so people

536
00:30:34,960 --> 00:30:36,249
don't necessarily want that if they

537
00:30:36,249 --> 00:30:37,960
don't care about security as much as

538
00:30:37,960 --> 00:30:43,539
they do about efficiency passing the

539
00:30:43,539 --> 00:30:45,340
i'ma Event log should be done so that

540
00:30:45,340 --> 00:30:46,749
you have this complete chain of

541
00:30:46,749 --> 00:30:50,889
measurements and we're also thinking

542
00:30:50,889 --> 00:30:52,570
about guests I think in the interest of

543
00:30:52,570 --> 00:30:54,279
time I'll probably skip what we're

544
00:30:54,279 --> 00:30:56,499
thinking about guests cuz that's really

545
00:30:56,499 --> 00:30:59,889
not that's not fleshed out well I've got

546
00:30:59,889 --> 00:31:02,650
a couple of slides on it

547
00:31:02,650 --> 00:31:04,330
taking our solution and putting it into

548
00:31:04,330 --> 00:31:07,390
the guest would be possible but

549
00:31:07,390 --> 00:31:08,409
problematic

550
00:31:08,409 --> 00:31:10,539
we had nixed that idea and now we're

551
00:31:10,539 --> 00:31:13,480
thinking about it again so and then you

552
00:31:13,480 --> 00:31:15,820
have the problem with KBM of how you

553
00:31:15,820 --> 00:31:18,039
create a complete chain of trust through

554
00:31:18,039 --> 00:31:21,039
the hypervisor I'm it can help that i'ma

555
00:31:21,039 --> 00:31:23,440
have some blind spots though so it may

556
00:31:23,440 --> 00:31:28,470
not may not be the way forward there but

557
00:31:28,470 --> 00:31:34,990
it's better than no verification and

558
00:31:34,990 --> 00:31:37,570
dirty 'm you know we certainly see value

559
00:31:37,570 --> 00:31:41,740
in d artyom but in our case it would

560
00:31:41,740 --> 00:31:46,179
require a memory preserving IPL so Intel

561
00:31:46,179 --> 00:31:48,610
and AMD have instructions to do this we

562
00:31:48,610 --> 00:31:50,890
would have to go back through a rather

563
00:31:50,890 --> 00:31:54,100
slow IPL process which would make it

564
00:31:54,100 --> 00:31:54,730
painful

565
00:31:54,730 --> 00:31:58,240
and I think limit the the usefulness of

566
00:31:58,240 --> 00:32:02,399
D RTM so for the moment we're not really

567
00:32:02,399 --> 00:32:08,200
contemplating that so I'm gonna skip

568
00:32:08,200 --> 00:32:13,510
over the guests so you know there's

569
00:32:13,510 --> 00:32:14,980
certainly good reasons for doing this

570
00:32:14,980 --> 00:32:18,130
and we think that that we want to stay

571
00:32:18,130 --> 00:32:19,630
out of the way we want the machine owner

572
00:32:19,630 --> 00:32:22,360
to be fully in charge of the machine

573
00:32:22,360 --> 00:32:24,960
however you define the machine owner

574
00:32:24,960 --> 00:32:28,690
developing secure boot has not been easy

575
00:32:28,690 --> 00:32:31,419
I was not experienced in this area we

576
00:32:31,419 --> 00:32:34,600
come from OS land and we're working on

577
00:32:34,600 --> 00:32:39,760
firmware more so that was challenging my

578
00:32:39,760 --> 00:32:41,950
team has been really good this is a

579
00:32:41,950 --> 00:32:43,870
really an update to a series of talks

580
00:32:43,870 --> 00:32:49,270
that Eric Richter Claudio Carvalho 9a

581
00:32:49,270 --> 00:32:52,720
Jain and others have had presented at a

582
00:32:52,720 --> 00:32:55,600
Linux security summit and open-source

583
00:32:55,600 --> 00:32:59,500
summit so it's taken us a while to to

584
00:32:59,500 --> 00:33:05,830
get here and having well tested

585
00:33:05,830 --> 00:33:07,659
components hopefully helps us along the

586
00:33:07,659 --> 00:33:10,110
way and we tried to learn from other

587
00:33:10,110 --> 00:33:16,180
open source firmware projects and

588
00:33:16,180 --> 00:33:18,760
from other secure boot trusted boot

589
00:33:18,760 --> 00:33:20,790
experiences on other architectures

590
00:33:20,790 --> 00:33:23,530
having fully open source firmware makes

591
00:33:23,530 --> 00:33:25,060
life really easy because you can go talk

592
00:33:25,060 --> 00:33:28,480
about this stuff and you as users of the

593
00:33:28,480 --> 00:33:31,030
systems can go audit that firmware and

594
00:33:31,030 --> 00:33:32,320
see exactly what's running in your

595
00:33:32,320 --> 00:33:34,780
systems so that's pretty cool and

596
00:33:34,780 --> 00:33:38,260
hopefully solving these arch specific

597
00:33:38,260 --> 00:33:43,020
problems can help the whole art advance

598
00:33:43,020 --> 00:33:45,280
so I've got a couple of references here

599
00:33:45,280 --> 00:33:48,970
in case you're interested I've updated

600
00:33:48,970 --> 00:33:51,910
this presentation from what I originally

601
00:33:51,910 --> 00:33:53,500
posted but these references are in that

602
00:33:53,500 --> 00:34:08,710
so questions hey sorry I'm not

603
00:34:08,710 --> 00:34:10,840
sufficiently familiar with open power

604
00:34:10,840 --> 00:34:13,210
bring up stages so at what point do

605
00:34:13,210 --> 00:34:17,290
peripherals get DMA to your system what

606
00:34:17,290 --> 00:34:19,620
point do a lot do peripherals get DMA oh

607
00:34:19,620 --> 00:34:20,739
god

608
00:34:20,739 --> 00:34:25,480
that's probably in ski boot okay can you

609
00:34:25,480 --> 00:34:27,940
go back to the yet slightly like that

610
00:34:27,940 --> 00:34:39,100
yeah okay so the SPE is some immutable

611
00:34:39,100 --> 00:34:45,280
thing yeah okay then in like OTP ROM

612
00:34:45,280 --> 00:34:47,370
someplace

613
00:34:47,370 --> 00:34:51,040
then you have sorry I'm just trying to

614
00:34:51,040 --> 00:34:53,260
walk through it so that it's clear can

615
00:34:53,260 --> 00:34:55,239
you go to two like two slides forward I

616
00:34:55,239 --> 00:34:58,680
think yeah sure yeah that one yeah okay

617
00:34:58,680 --> 00:35:10,010
um okay okay thank you

618
00:35:10,010 --> 00:35:11,720
sure hi and welcome yeah yeah there

619
00:35:11,720 --> 00:35:14,540
there actually wait there's a nifty

620
00:35:14,540 --> 00:35:16,790
diagram like the you know two dozen

621
00:35:16,790 --> 00:35:19,550
steps to Buddha open power system it's

622
00:35:19,550 --> 00:35:22,060
available out on the open power github

623
00:35:22,060 --> 00:35:24,740
so that this is an abstraction of an

624
00:35:24,740 --> 00:35:37,430
abstraction of an abstraction so the

625
00:35:37,430 --> 00:35:40,820
event log is that is the goal to

626
00:35:40,820 --> 00:35:43,490
propagate this as far as the boot is

627
00:35:43,490 --> 00:35:47,750
linear like as as long as there's just

628
00:35:47,750 --> 00:35:48,650
one chain

629
00:35:48,650 --> 00:35:50,300
that's next and until the point where

630
00:35:50,300 --> 00:35:51,590
you're loading applications that are and

631
00:35:51,590 --> 00:35:54,350
then at that point use I'm I'm like yeah

632
00:35:54,350 --> 00:35:57,290
yeah yeah so so this this is not updated

633
00:35:57,290 --> 00:36:00,200
after we hit the bootloader okay is

634
00:36:00,200 --> 00:36:02,630
there a and then I'm also not

635
00:36:02,630 --> 00:36:04,940
sufficiently familiar with the K exact

636
00:36:04,940 --> 00:36:05,630
handoff

637
00:36:05,630 --> 00:36:08,080
like what fields their art so is there a

638
00:36:08,080 --> 00:36:14,410
generic like ox data thing just like

639
00:36:14,410 --> 00:36:17,420
this size at this place that you from

640
00:36:17,420 --> 00:36:18,619
get stuff through or yeah I already

641
00:36:18,619 --> 00:36:20,330
implement that we've used what they call

642
00:36:20,330 --> 00:36:26,119
the purgatory area so we preserve that

643
00:36:26,119 --> 00:36:32,420
memory across the K exec and you know

644
00:36:32,420 --> 00:36:34,369
basically the next kernel can go you

645
00:36:34,369 --> 00:36:36,410
know grab it from that area has to know

646
00:36:36,410 --> 00:36:39,740
to do that so that's why we need to get

647
00:36:39,740 --> 00:36:44,540
patches into distro kernels so that you

648
00:36:44,540 --> 00:36:46,790
know if you kick sect from there you

649
00:36:46,790 --> 00:36:48,590
don't use K exact load that's prohibited

650
00:36:48,590 --> 00:36:53,420
and then it knows to go grab that event

651
00:36:53,420 --> 00:36:55,310
log from the previous kernel so it can

652
00:36:55,310 --> 00:36:58,640
chain on to it so it's a central

653
00:36:58,640 --> 00:37:00,650
essentially a memory leak across kernels

654
00:37:00,650 --> 00:37:03,680
if you want yeah sure

655
00:37:03,680 --> 00:37:06,850
and then which of these stages live in

656
00:37:06,850 --> 00:37:11,390
some kind of flash burst disk or well

657
00:37:11,390 --> 00:37:14,060
actually everything above the SPE lives

658
00:37:14,060 --> 00:37:18,260
in flash and then so everything from

659
00:37:18,260 --> 00:37:20,900
host boot to petty boot or flash in the

660
00:37:20,900 --> 00:37:23,790
nose gentleness all wash and then

661
00:37:23,790 --> 00:37:30,420
if I want to update that I can you go to

662
00:37:30,420 --> 00:37:31,530
that key management hierarchy you had

663
00:37:31,530 --> 00:37:43,530
yeah sure okay um it's not the one you

664
00:37:43,530 --> 00:37:54,390
wanna maybe okay so there's a per device

665
00:37:54,390 --> 00:37:59,480
key in something immutable and then

666
00:37:59,480 --> 00:38:03,140
there's the owner controlled key in

667
00:38:03,140 --> 00:38:04,470
flash

668
00:38:04,470 --> 00:38:07,680
that's right protected at anything post

669
00:38:07,680 --> 00:38:10,640
boot it is not right protected it is

670
00:38:10,640 --> 00:38:16,890
stored in in this very mutable p-norm

671
00:38:16,890 --> 00:38:20,250
flash and we actually have to go check

672
00:38:20,250 --> 00:38:23,280
it against the hash that's stored in

673
00:38:23,280 --> 00:38:27,510
this TPM NVRAM index okay which is not

674
00:38:27,510 --> 00:38:30,570
ideal we'd like to just have lockable

675
00:38:30,570 --> 00:38:34,140
storage and I hope that in a future

676
00:38:34,140 --> 00:38:37,350
design that will have significant sized

677
00:38:37,350 --> 00:38:39,630
lockable storage so that we can go do

678
00:38:39,630 --> 00:38:40,770
that and we don't have to do this

679
00:38:40,770 --> 00:38:42,660
business with the TPM because I mean

680
00:38:42,660 --> 00:38:45,450
this is time time of check time of use

681
00:38:45,450 --> 00:38:48,290
right kind of stuff so you don't wanna

682
00:38:48,290 --> 00:38:50,730
fortunately there's nothing else going

683
00:38:50,730 --> 00:38:54,030
on except the BMC at this points but you

684
00:38:54,030 --> 00:38:56,130
know the PM the BMC could go reflash

685
00:38:56,130 --> 00:38:59,040
p-norm and you know prevent you from

686
00:38:59,040 --> 00:39:01,170
booting and there's nothing we can do

687
00:39:01,170 --> 00:39:04,140
about that except detect it and say you

688
00:39:04,140 --> 00:39:06,950
know somebody corrupted your p-norm and

689
00:39:06,950 --> 00:39:08,970
that that's something you would want to

690
00:39:08,970 --> 00:39:11,430
know about but we can't recover from it

691
00:39:11,430 --> 00:39:15,210
in the current design hopefully and the

692
00:39:15,210 --> 00:39:19,170
next iteration will have reliably

693
00:39:19,170 --> 00:39:22,170
lockable flash and we can go just store

694
00:39:22,170 --> 00:39:23,520
our secrets in there and not have to

695
00:39:23,520 --> 00:39:27,840
recheck them against this this hash it's

696
00:39:27,840 --> 00:39:31,170
not not ideal because once again it

697
00:39:31,170 --> 00:39:32,940
wasn't designed with secure boot in mind

698
00:39:32,940 --> 00:39:34,500
you really do want to think about

699
00:39:34,500 --> 00:39:37,140
security holistically and I I can tell

700
00:39:37,140 --> 00:39:37,890
you that we are

701
00:39:37,890 --> 00:39:40,700
about security more holistically now

702
00:39:40,700 --> 00:39:43,320
spectrum meltdown woke a lot of people

703
00:39:43,320 --> 00:39:45,030
up you know that you need to think about

704
00:39:45,030 --> 00:39:48,630
security I've actually heard hardware

705
00:39:48,630 --> 00:39:50,340
engineers say that security is more

706
00:39:50,340 --> 00:39:52,080
important than performance and I've

707
00:39:52,080 --> 00:39:54,600
never in my life heard them say that

708
00:39:54,600 --> 00:39:59,460
until Spectre meltdown so so yeah I'd

709
00:39:59,460 --> 00:40:01,260
say that we're addressing that but now

710
00:40:01,260 --> 00:40:04,320
yeah it's kind of kind of ugly I have to

711
00:40:04,320 --> 00:40:15,390
do this just checking against a hash one

712
00:40:15,390 --> 00:40:19,129
more question we serve a few minutes

713
00:40:24,549 --> 00:40:27,740
right then thank you better but IQ

714
00:40:27,740 --> 00:40:32,529
[Applause]

715
00:40:33,130 --> 00:40:39,370
[Music]

