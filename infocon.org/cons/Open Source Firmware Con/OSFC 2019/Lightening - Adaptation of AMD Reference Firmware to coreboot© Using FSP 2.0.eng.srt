1
00:00:03,190 --> 00:00:06,259
[Music]

2
00:00:07,460 --> 00:00:12,630
hi everybody so I found that I really

3
00:00:12,630 --> 00:00:14,009
don't want to go on the third day of

4
00:00:14,009 --> 00:00:15,210
this thing because I've sat through two

5
00:00:15,210 --> 00:00:16,560
days of things that I should have talked

6
00:00:16,560 --> 00:00:18,800
about in this presentation and didn't

7
00:00:18,800 --> 00:00:21,210
and then last night I had a really scary

8
00:00:21,210 --> 00:00:23,789
comment come up that you know if you

9
00:00:23,789 --> 00:00:26,460
looked at that that partner slide AMD is

10
00:00:26,460 --> 00:00:27,539
right in the middle of it and I'm the

11
00:00:27,539 --> 00:00:30,740
only person actually talking about AMD

12
00:00:30,740 --> 00:00:33,420
so I was wondering if I might need body

13
00:00:33,420 --> 00:00:41,790
armor to get through this so to to meet

14
00:00:41,790 --> 00:00:42,780
that what we're going to talk about

15
00:00:42,780 --> 00:00:46,520
today and I made this topic rather than

16
00:00:46,520 --> 00:00:49,050
any kind of a table of contents because

17
00:00:49,050 --> 00:00:53,370
I jump around a lot so background what

18
00:00:53,370 --> 00:00:54,899
this new processor is that we are

19
00:00:54,899 --> 00:00:57,030
working on which is the ascend core

20
00:00:57,030 --> 00:00:59,879
processor and what our approach is to

21
00:00:59,879 --> 00:01:03,420
bring it into coreboot support and where

22
00:01:03,420 --> 00:01:08,400
we are today so some background AMD

23
00:01:08,400 --> 00:01:10,590
actually has a very long history with

24
00:01:10,590 --> 00:01:12,299
coreboot going all the way back to their

25
00:01:12,299 --> 00:01:16,049
geo del X processor but it's been an

26
00:01:16,049 --> 00:01:18,689
on-and-off-again relationship is a lot

27
00:01:18,689 --> 00:01:20,880
of you can testify and when they're off

28
00:01:20,880 --> 00:01:23,750
they are really off there they are

29
00:01:23,750 --> 00:01:27,500
absolutely absent from the community but

30
00:01:27,500 --> 00:01:29,640
we've been working with them for a

31
00:01:29,640 --> 00:01:31,380
couple years now to try and bring them

32
00:01:31,380 --> 00:01:33,450
back into the community and there they

33
00:01:33,450 --> 00:01:40,079
seem to be going well with that one of

34
00:01:40,079 --> 00:01:42,780
the things that's come up is yeah I

35
00:01:42,780 --> 00:01:44,159
don't know if you've ever heard of their

36
00:01:44,159 --> 00:01:45,450
reference code it's called the GISA

37
00:01:45,450 --> 00:01:48,450
AMD's generic encapsulated software

38
00:01:48,450 --> 00:01:52,560
architecture there's a test later and

39
00:01:52,560 --> 00:01:54,930
all of that all of the core boots

40
00:01:54,930 --> 00:01:57,090
support except for the GL LX is based on

41
00:01:57,090 --> 00:01:59,340
something called architecture 2008 or

42
00:01:59,340 --> 00:02:02,969
version 5 this new processor is actually

43
00:02:02,969 --> 00:02:05,130
based on version 9 which came out with

44
00:02:05,130 --> 00:02:08,068
the Zen course and that's presented some

45
00:02:08,068 --> 00:02:11,610
challenges for us but they actually had

46
00:02:11,610 --> 00:02:13,620
even some open source versions of

47
00:02:13,620 --> 00:02:18,180
Issa version 5 back in the 2011-2012

48
00:02:18,180 --> 00:02:20,489
timeframe for a couple of generations of

49
00:02:20,489 --> 00:02:22,860
processor so if you want to go back and

50
00:02:22,860 --> 00:02:24,150
look at some of those things they were

51
00:02:24,150 --> 00:02:25,620
actually out there you can see what the

52
00:02:25,620 --> 00:02:28,110
source code looks like but they are

53
00:02:28,110 --> 00:02:30,989
actually in a binary kind of mode like

54
00:02:30,989 --> 00:02:36,989
Intel is today so the new AMD processor

55
00:02:36,989 --> 00:02:38,940
that we're working on

56
00:02:38,940 --> 00:02:41,220
it's called Picasso for those of you who

57
00:02:41,220 --> 00:02:43,590
love those code names it's called family

58
00:02:43,590 --> 00:02:49,379
17 great naming but it is in a Gerke

59
00:02:49,379 --> 00:02:53,879
subversion v9 processor when they went

60
00:02:53,879 --> 00:02:56,400
from v5 to v9 don't ask what happened to

61
00:02:56,400 --> 00:03:00,180
the ones in between they they made the

62
00:03:00,180 --> 00:03:04,349
decision to drop legacy boot support so

63
00:03:04,349 --> 00:03:07,019
it was it was designed to be optimized

64
00:03:07,019 --> 00:03:13,680
with ufi and UEFI alone which means all

65
00:03:13,680 --> 00:03:15,720
of the previous coreboot implementations

66
00:03:15,720 --> 00:03:20,750
don't work we had to start from scratch

67
00:03:21,290 --> 00:03:23,609
when they optimized it for that they

68
00:03:23,609 --> 00:03:25,440
made a lot of assumptions about tiyanak

69
00:03:25,440 --> 00:03:28,849
or being involved in in their firmware

70
00:03:28,849 --> 00:03:31,109
so we had to come up with a way to

71
00:03:31,109 --> 00:03:33,260
accommodate the dependencies on

72
00:03:33,260 --> 00:03:35,849
infrastructure that is built into Tiano

73
00:03:35,849 --> 00:03:39,180
core and obviously available to anybody

74
00:03:39,180 --> 00:03:42,329
doing a UEFI BIOS but not readily

75
00:03:42,329 --> 00:03:43,709
available to those of us in the

76
00:03:43,709 --> 00:03:49,739
corporate world so we we made a decision

77
00:03:49,739 --> 00:03:52,379
which isn't popular with a lot of people

78
00:03:52,379 --> 00:03:56,030
we decided to leverage the Intel FSP

79
00:03:56,030 --> 00:04:00,269
which was essentially a way for Intel to

80
00:04:00,269 --> 00:04:03,449
get their reference code which was UEFI

81
00:04:03,449 --> 00:04:09,540
dependent into coreboot and so rather

82
00:04:09,540 --> 00:04:11,910
than inventing yet another set of

83
00:04:11,910 --> 00:04:14,040
interfaces for coreboot we decided to

84
00:04:14,040 --> 00:04:17,310
try and use that one so there were

85
00:04:17,310 --> 00:04:19,738
standard existing software already

86
00:04:19,738 --> 00:04:22,440
written in core boot and in Tiano core

87
00:04:22,440 --> 00:04:24,510
to do this sort of thing it was intended

88
00:04:24,510 --> 00:04:26,850
for this purpose

89
00:04:26,850 --> 00:04:30,840
again it it it avoided creating yet

90
00:04:30,840 --> 00:04:33,630
another interface so that was the

91
00:04:33,630 --> 00:04:39,090
approach we took and in doing so this

92
00:04:39,090 --> 00:04:40,530
cutter carries with it a lot of

93
00:04:40,530 --> 00:04:43,860
assumptions and one of the assumptions

94
00:04:43,860 --> 00:04:47,490
is this boot flow which is sort of Intel

95
00:04:47,490 --> 00:04:52,140
centric but works for most x86 is thanks

96
00:04:52,140 --> 00:04:54,030
Ron for letting me steal this I actually

97
00:04:54,030 --> 00:04:56,100
got this from Ron's presentation

98
00:04:56,100 --> 00:05:01,200
yesterday that's right so it's super

99
00:05:01,200 --> 00:05:03,080
otta it actually did this slide right

100
00:05:03,080 --> 00:05:08,430
cut this out of but any of it this

101
00:05:08,430 --> 00:05:09,720
worked with Corbeau and understands

102
00:05:09,720 --> 00:05:11,190
these are the stages you're gonna

103
00:05:11,190 --> 00:05:14,010
normally go through you do the boot

104
00:05:14,010 --> 00:05:16,050
block and you do a rom stage and train

105
00:05:16,050 --> 00:05:18,570
memory and then you get rid of your

106
00:05:18,570 --> 00:05:20,760
memory training stuff and go into the

107
00:05:20,760 --> 00:05:23,820
RAM stage and get set up to go find your

108
00:05:23,820 --> 00:05:27,590
operating system and we thought this was

109
00:05:27,590 --> 00:05:33,870
okay it's an x86 right except AMD

110
00:05:33,870 --> 00:05:36,060
decided to do some interesting stuff for

111
00:05:36,060 --> 00:05:39,860
us so there's actually a security core

112
00:05:39,860 --> 00:05:42,420
and you can those of you or Intel

113
00:05:42,420 --> 00:05:43,920
centric and think of this as sort of

114
00:05:43,920 --> 00:05:46,200
like the emmy the platform security

115
00:05:46,200 --> 00:05:48,660
processor actually trains a memory for

116
00:05:48,660 --> 00:05:53,250
us so when the x86 cores come out of

117
00:05:53,250 --> 00:05:57,150
reset DRAM is done sitting there waiting

118
00:05:57,150 --> 00:06:00,390
and the PSP has kindly copied our ROM

119
00:06:00,390 --> 00:06:03,270
image up out of the spy ROM into DRAM

120
00:06:03,270 --> 00:06:05,430
for us we don't you have to go do

121
00:06:05,430 --> 00:06:10,860
execution in place it's just there so

122
00:06:10,860 --> 00:06:12,720
and the hardware doesn't actually have

123
00:06:12,720 --> 00:06:17,820
the capability to do caches Ram it's it

124
00:06:17,820 --> 00:06:20,640
can't do it you have to use the PSB core

125
00:06:20,640 --> 00:06:25,110
to Train memory which sort of changes

126
00:06:25,110 --> 00:06:29,280
that flow because when the ax 86 comes

127
00:06:29,280 --> 00:06:33,510
out of reset we're here but all this red

128
00:06:33,510 --> 00:06:38,520
stuff didn't get done which left us with

129
00:06:38,520 --> 00:06:41,359
a bit of a mess

130
00:06:41,970 --> 00:06:45,110
so we had to start figuring out how to

131
00:06:45,110 --> 00:06:50,879
accommodate this and at the same time we

132
00:06:50,879 --> 00:06:56,610
were trying to to figure out some other

133
00:06:56,610 --> 00:06:59,009
issue so some of the implications of

134
00:06:59,009 --> 00:07:02,280
that are you don't need FS PT but that's

135
00:07:02,280 --> 00:07:03,720
not that unusual because there's a lot

136
00:07:03,720 --> 00:07:05,159
of Intel processors where you can run

137
00:07:05,159 --> 00:07:10,500
open code to set up temporary we don't

138
00:07:10,500 --> 00:07:13,620
really need FS p-m because memory is

139
00:07:13,620 --> 00:07:15,479
trained for us but there's a lot of

140
00:07:15,479 --> 00:07:17,280
things that we didn't do at the end of

141
00:07:17,280 --> 00:07:19,800
memory training so we still use it for

142
00:07:19,800 --> 00:07:21,449
that but we don't actually use it for

143
00:07:21,449 --> 00:07:26,039
training we still use the FS PS Corbett

144
00:07:26,039 --> 00:07:27,289
implications

145
00:07:27,289 --> 00:07:30,780
we don't need boot block in ROM stage

146
00:07:30,780 --> 00:07:33,659
because we Ram stages we can run out of

147
00:07:33,659 --> 00:07:35,810
DRAM

148
00:07:35,810 --> 00:07:38,190
but there's a lot of important things

149
00:07:38,190 --> 00:07:40,319
that happen in those stages that haven't

150
00:07:40,319 --> 00:07:44,250
been done yet and some examples of

151
00:07:44,250 --> 00:07:46,380
things like that or issue go through and

152
00:07:46,380 --> 00:07:48,919
get ready to launch your Ram stage

153
00:07:48,919 --> 00:07:50,990
coreboot wants to do things like

154
00:07:50,990 --> 00:07:54,930
teardown caches Ram and it wants to copy

155
00:07:54,930 --> 00:07:57,210
all the stuff that's in caches ran into

156
00:07:57,210 --> 00:08:00,779
CBMM well there is no caches Ram to tear

157
00:08:00,779 --> 00:08:04,229
down and there's nothing to copy so we

158
00:08:04,229 --> 00:08:10,650
ended up sort of pushing these three

159
00:08:10,650 --> 00:08:13,800
stages together into something we called

160
00:08:13,800 --> 00:08:17,340
the hybrid ROM stage so we actually run

161
00:08:17,340 --> 00:08:20,699
boot block is an elf so that we can

162
00:08:20,699 --> 00:08:24,289
accomplish this both switch and the jump

163
00:08:24,289 --> 00:08:29,279
and some other weird things there's not

164
00:08:29,279 --> 00:08:31,229
a whole lot in boot block put their

165
00:08:31,229 --> 00:08:33,929
stuff that you have to do and after

166
00:08:33,929 --> 00:08:35,789
listening this morning to what we want

167
00:08:35,789 --> 00:08:39,929
to do with V boot this model doesn't

168
00:08:39,929 --> 00:08:45,390
work a lot but so we still have to set

169
00:08:45,390 --> 00:08:48,120
up FS p.m. do the U P DS and call FS

170
00:08:48,120 --> 00:08:51,930
p.m. and set up our CBMM we still do

171
00:08:51,930 --> 00:08:53,180
that

172
00:08:53,180 --> 00:08:55,310
and we still have to set up our MTR RS

173
00:08:55,310 --> 00:08:57,560
which we do over here but we're doing

174
00:08:57,560 --> 00:09:00,230
this in a very up you know shortened

175
00:09:00,230 --> 00:09:04,580
path to get there and then we get into

176
00:09:04,580 --> 00:09:09,850
our RAM stage which really is unchanged

177
00:09:09,850 --> 00:09:12,290
other than the fact that the PSP

178
00:09:12,290 --> 00:09:15,190
actually found it for us and copied it

179
00:09:15,190 --> 00:09:17,510
some other interesting things if you're

180
00:09:17,510 --> 00:09:21,290
really x86 centric normally you consider

181
00:09:21,290 --> 00:09:22,550
the reset vector

182
00:09:22,550 --> 00:09:26,750
you know FFF is 0 actually maps into spy

183
00:09:26,750 --> 00:09:29,510
ROM in this case it actually maps into

184
00:09:29,510 --> 00:09:32,630
DRAM so all of this runs out of DRAM

185
00:09:32,630 --> 00:09:35,950
even though it doesn't look like it does

186
00:09:35,950 --> 00:09:38,930
so we've been working through a lot of

187
00:09:38,930 --> 00:09:45,740
this stuff so we have tried to maximize

188
00:09:45,740 --> 00:09:48,800
our use of the existing FSP so we still

189
00:09:48,800 --> 00:09:51,740
use FS PM as a naming technology it

190
00:09:51,740 --> 00:09:53,900
still has the same entry points but we

191
00:09:53,900 --> 00:09:55,910
don't necessarily do the same things

192
00:09:55,910 --> 00:09:58,570
that Intel does in that particular call

193
00:09:58,570 --> 00:10:03,290
we created that hybrid ROM stage and

194
00:10:03,290 --> 00:10:05,900
what we did to satisfy the dependencies

195
00:10:05,900 --> 00:10:07,370
on the hybrid ROM stage is we actually

196
00:10:07,370 --> 00:10:09,590
reserved a little piece of memory and we

197
00:10:09,590 --> 00:10:11,390
build what looks like caches Ram and

198
00:10:11,390 --> 00:10:13,760
then we let coreboot tear it apart for

199
00:10:13,760 --> 00:10:18,380
us and then we throw it away this is not

200
00:10:18,380 --> 00:10:23,090
proved to be a popular solution so we're

201
00:10:23,090 --> 00:10:24,770
currently rethinking that we're actually

202
00:10:24,770 --> 00:10:31,810
reworking that right now so where are we

203
00:10:31,810 --> 00:10:36,710
these talks go really fast we do have a

204
00:10:36,710 --> 00:10:38,570
preliminary version running on an AMD

205
00:10:38,570 --> 00:10:40,640
reference design this is not a design

206
00:10:40,640 --> 00:10:42,440
that you can go out and buy there's new

207
00:10:42,440 --> 00:10:45,650
a handful of them in the world but it

208
00:10:45,650 --> 00:10:47,870
will work it boots Linux it boots some

209
00:10:47,870 --> 00:10:50,630
other things we expect to have

210
00:10:50,630 --> 00:10:53,240
production worthy versions in 2020 but

211
00:10:53,240 --> 00:10:55,670
it's actually showing up in Corbeau org

212
00:10:55,670 --> 00:10:59,600
today so pieces of it have already been

213
00:10:59,600 --> 00:11:01,520
in review pieces of it have already been

214
00:11:01,520 --> 00:11:04,700
merged so I invite you all to go look at

215
00:11:04,700 --> 00:11:07,959
it if you are interested in that

216
00:11:07,959 --> 00:11:09,910
right now we're still working through he

217
00:11:09,910 --> 00:11:13,540
things like a CPI based on community

218
00:11:13,540 --> 00:11:14,980
feedback what we're going to be working

219
00:11:14,980 --> 00:11:17,890
on in the short term is we will be going

220
00:11:17,890 --> 00:11:22,180
to FSP 2.1 so that we're on a little

221
00:11:22,180 --> 00:11:24,040
more stable footing with the Intel we'd

222
00:11:24,040 --> 00:11:27,700
like to to keep that consistent we're

223
00:11:27,700 --> 00:11:29,829
probably going to abandon the hybrid wom

224
00:11:29,829 --> 00:11:31,600
stage approach and just build a whole

225
00:11:31,600 --> 00:11:34,860
new stage in environment which we are

226
00:11:34,860 --> 00:11:39,940
creatively naming PSP stage to

227
00:11:39,940 --> 00:11:42,070
accommodate the fact that PSP has gotten

228
00:11:42,070 --> 00:11:43,930
DRM up for us so we're just gonna do all

229
00:11:43,930 --> 00:11:45,490
our cleanup stuff in that PSP

230
00:11:45,490 --> 00:11:50,380
environment we don't really like that

231
00:11:50,380 --> 00:11:53,440
name it's it's very AMD centric but

232
00:11:53,440 --> 00:11:56,380
since this is the the only manufacturer

233
00:11:56,380 --> 00:11:59,019
who's putting out processors that train

234
00:11:59,019 --> 00:12:00,610
their memory this way

235
00:12:00,610 --> 00:12:02,740
I guess they get to have that name until

236
00:12:02,740 --> 00:12:04,180
somebody else comes up with a

237
00:12:04,180 --> 00:12:10,209
coprocessor trained memory so but it

238
00:12:10,209 --> 00:12:12,940
will support AMD family 17 and beyond

239
00:12:12,940 --> 00:12:14,440
and probably include some of the other

240
00:12:14,440 --> 00:12:16,959
current AMD chips that are based on Zen

241
00:12:16,959 --> 00:12:20,230
core so we're gonna eliminate that

242
00:12:20,230 --> 00:12:22,779
virtual car structure that I talked

243
00:12:22,779 --> 00:12:25,269
about that may actually have already

244
00:12:25,269 --> 00:12:28,930
merged today I didn't check on the merge

245
00:12:28,930 --> 00:12:30,730
queue but I think it was going to have

246
00:12:30,730 --> 00:12:35,500
merge today but we're gonna have a very

247
00:12:35,500 --> 00:12:41,709
lean Ram stage and then maybe be able to

248
00:12:41,709 --> 00:12:44,399
accommodate Linux boot better that way

249
00:12:44,399 --> 00:12:47,560
so that's our goal is to to get to a

250
00:12:47,560 --> 00:12:50,350
point where we can quickly and with as

251
00:12:50,350 --> 00:12:53,140
little code as we can run in the x86 get

252
00:12:53,140 --> 00:12:54,850
to the point where we can call a payload

253
00:12:54,850 --> 00:12:56,829
or potentially switch over to a Linux

254
00:12:56,829 --> 00:13:03,790
boot kind of solution with that are

255
00:13:03,790 --> 00:13:06,870
there any questions

256
00:13:09,290 --> 00:13:14,450
oh we did have microphones over there so

257
00:13:14,450 --> 00:13:19,510
we'll use this one sorry they vanished

258
00:13:20,200 --> 00:13:25,850
Thanks so I like that you are going to a

259
00:13:25,850 --> 00:13:27,650
different approach with the stage now

260
00:13:27,650 --> 00:13:28,940
because I was one of those people who

261
00:13:28,940 --> 00:13:30,260
had a hybrid realm stage wasn't very

262
00:13:30,260 --> 00:13:33,890
popular with but I still want to ask why

263
00:13:33,890 --> 00:13:35,600
do you need a separate stage at all

264
00:13:35,600 --> 00:13:37,400
because with all the other stages in

265
00:13:37,400 --> 00:13:39,710
coreboot we really have a reason why we

266
00:13:39,710 --> 00:13:41,540
need to switch to a new execution

267
00:13:41,540 --> 00:13:43,160
environment and tear on the old one for

268
00:13:43,160 --> 00:13:45,530
some reason or another and in this case

269
00:13:45,530 --> 00:13:47,270
I don't really see why I can't just put

270
00:13:47,270 --> 00:13:49,280
it in the beginning of the ramp stage

271
00:13:49,280 --> 00:13:51,680
because the the entry point of the ramp

272
00:13:51,680 --> 00:13:53,150
stage doesn't need to be a sacred cow

273
00:13:53,150 --> 00:13:55,370
right we can do have a different entry

274
00:13:55,370 --> 00:13:58,070
point for a specific SOC or platform why

275
00:13:58,070 --> 00:14:00,920
can't you just do that so as we looked

276
00:14:00,920 --> 00:14:04,010
at this we actually we tried it and it

277
00:14:04,010 --> 00:14:07,850
was going to require a huge amount of

278
00:14:07,850 --> 00:14:09,470
change in the entry point of the RAM

279
00:14:09,470 --> 00:14:13,580
stage and we can talk about that you

280
00:14:13,580 --> 00:14:15,140
know offline it's not something that we

281
00:14:15,140 --> 00:14:16,850
could cover here and get some of the

282
00:14:16,850 --> 00:14:18,050
other guys involved that are a little

283
00:14:18,050 --> 00:14:22,820
deeper into that exploration but it

284
00:14:22,820 --> 00:14:25,610
turned out we needed we needed a buffer

285
00:14:25,610 --> 00:14:27,260
in there we needed some kind of a shim

286
00:14:27,260 --> 00:14:28,580
to get to the point where we weren't

287
00:14:28,580 --> 00:14:37,280
just completely ruining ram stage we've

288
00:14:37,280 --> 00:14:39,080
we've been pushing some documents up to

289
00:14:39,080 --> 00:14:42,500
coreboot org to try and explain that too

290
00:14:42,500 --> 00:14:45,920
so yeah let's have a different

291
00:14:45,920 --> 00:14:51,980
conversation on that one okay anybody

292
00:14:51,980 --> 00:14:54,280
else

293
00:14:55,640 --> 00:15:11,130
No so I'm remembering a funny story all

294
00:15:11,130 --> 00:15:12,300
the people who worked at AMD at that

295
00:15:12,300 --> 00:15:13,620
time are going so I can tell the story

296
00:15:13,620 --> 00:15:16,380
this is six years ago and this is when

297
00:15:16,380 --> 00:15:17,670
they had they're gonna all be an armed

298
00:15:17,670 --> 00:15:20,400
company and they had the 64-bit arm in a

299
00:15:20,400 --> 00:15:23,490
32-bit arm in the 32-bit arm did memory

300
00:15:23,490 --> 00:15:27,180
training and so he said so you're gonna

301
00:15:27,180 --> 00:15:28,530
open source that right so we can see

302
00:15:28,530 --> 00:15:30,150
that code and the immediate response is

303
00:15:30,150 --> 00:15:33,060
nobody ever wants to see Ram setup code

304
00:15:33,060 --> 00:15:36,030
so no not gonna do it but it was ironic

305
00:15:36,030 --> 00:15:38,280
because of course we'd always seen Ram

306
00:15:38,280 --> 00:15:40,680
setup code from AMD but are they gonna

307
00:15:40,680 --> 00:15:45,030
source the RAM setup code so here's the

308
00:15:45,030 --> 00:15:47,970
on-again off-again relationship so I've

309
00:15:47,970 --> 00:15:50,310
been talking with them since 2011 about

310
00:15:50,310 --> 00:15:52,260
open sourcing it they actually did it

311
00:15:52,260 --> 00:15:55,290
twice for two different processors in

312
00:15:55,290 --> 00:15:57,390
the past this conversation has been

313
00:15:57,390 --> 00:16:00,089
going to executive management and AMD

314
00:16:00,089 --> 00:16:02,730
and dragging them kicking and screaming

315
00:16:02,730 --> 00:16:06,210
to the chasm of open source and coreboot

316
00:16:06,210 --> 00:16:08,370
where they immediately when you turn

317
00:16:08,370 --> 00:16:12,630
loose of them run away the current

318
00:16:12,630 --> 00:16:15,000
generation of executive management at

319
00:16:15,000 --> 00:16:16,950
AMD actually of their own volition

320
00:16:16,950 --> 00:16:19,920
walked up to the chasm I went it's not

321
00:16:19,920 --> 00:16:21,050
that deep

322
00:16:21,050 --> 00:16:25,790
so maybe

323
00:16:28,209 --> 00:16:30,410
and it's much better than we've had in

324
00:16:30,410 --> 00:16:35,899
the past so we're pushing for it Noby it

325
00:16:35,899 --> 00:16:40,610
AMD is saying no everybody's saying it

326
00:16:40,610 --> 00:16:45,730
would be hard and that's progress

327
00:16:49,329 --> 00:16:52,399
anybody else all right well thank you

328
00:16:52,399 --> 00:16:53,220
very much

329
00:16:53,220 --> 00:16:57,800
[Applause]

330
00:16:57,800 --> 00:17:05,490
[Music]

