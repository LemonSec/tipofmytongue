1
00:00:03,190 --> 00:00:06,259
[Music]

2
00:00:07,099 --> 00:00:09,990
next talk it's about risk five versus

3
00:00:09,990 --> 00:00:12,150
five firm reverse five open firm rare

4
00:00:12,150 --> 00:00:15,690
and how what's what the state of open

5
00:00:15,690 --> 00:00:18,600
firmware absorption rate is in regards

6
00:00:18,600 --> 00:00:21,660
to the risk five ecosystem so without

7
00:00:21,660 --> 00:00:22,619
further you

8
00:00:22,619 --> 00:00:32,840
I've nice round of applause yeah awesome

9
00:00:32,840 --> 00:00:35,550
this is a really fancy set up for me so

10
00:00:35,550 --> 00:00:36,870
I was trying to figure out where do I

11
00:00:36,870 --> 00:00:40,860
look on but it's so high so today I'm

12
00:00:40,860 --> 00:00:42,210
going to talk we're going to talk about

13
00:00:42,210 --> 00:00:44,930
role of open source formats in this five

14
00:00:44,930 --> 00:00:46,110
myself

15
00:00:46,110 --> 00:00:48,239
aaseesh is Alastair then we have another

16
00:00:48,239 --> 00:00:50,399
colleague Ono basically which we were

17
00:00:50,399 --> 00:00:53,219
walking on it and he's in India so he

18
00:00:53,219 --> 00:00:57,180
couldn't make it in years so to give you

19
00:00:57,180 --> 00:00:59,699
an brief outline would start with what

20
00:00:59,699 --> 00:01:02,039
exactly is the describe which I hope I

21
00:01:02,039 --> 00:01:03,600
don't have to tell you this audience in

22
00:01:03,600 --> 00:01:04,589
2019

23
00:01:04,589 --> 00:01:06,540
so let's 2019 everybody should know

24
00:01:06,540 --> 00:01:09,510
what's the risk five then the industry

25
00:01:09,510 --> 00:01:11,729
standard opens shows bootloaders which I

26
00:01:11,729 --> 00:01:13,680
hope I don't have to tell you this

27
00:01:13,680 --> 00:01:15,060
audience because it's open source

28
00:01:15,060 --> 00:01:18,150
firmware so everybody must be more aware

29
00:01:18,150 --> 00:01:20,420
of bootloaders from where than me so

30
00:01:20,420 --> 00:01:23,340
next is the risk by boot flow which I

31
00:01:23,340 --> 00:01:25,259
also hope shouldn't have to go into

32
00:01:25,259 --> 00:01:28,080
details Pitts exactly works how it works

33
00:01:28,080 --> 00:01:31,409
for arm or x86 or anything else then

34
00:01:31,409 --> 00:01:33,119
we'll talk a little bit about what's the

35
00:01:33,119 --> 00:01:36,299
describe specific things and what's the

36
00:01:36,299 --> 00:01:38,490
roadmap overhead and we have two cool

37
00:01:38,490 --> 00:01:42,210
demos that will go in the soap before

38
00:01:42,210 --> 00:01:43,740
they start will like to acknowledge

39
00:01:43,740 --> 00:01:45,869
acknowledge all these people from

40
00:01:45,869 --> 00:01:48,149
different projects so I am pretty sure I

41
00:01:48,149 --> 00:01:50,970
might have missed couple of them so I've

42
00:01:50,970 --> 00:01:53,310
tried to put out as much as could fit in

43
00:01:53,310 --> 00:01:56,040
the slides so the entire ecosystem boot

44
00:01:56,040 --> 00:01:58,710
ecosystem is done by the community work

45
00:01:58,710 --> 00:02:02,100
which are just trying to solve one piece

46
00:02:02,100 --> 00:02:04,560
in the boot puzzle everything else is

47
00:02:04,560 --> 00:02:06,180
done by you good guys cold boot guys

48
00:02:06,180 --> 00:02:09,119
irrigate too and then many others so it

49
00:02:09,119 --> 00:02:11,280
would be unfair to start with the slide

50
00:02:11,280 --> 00:02:14,090
with our work without acknowledging them

51
00:02:14,090 --> 00:02:17,880
next so what is risk 5 so let's do a

52
00:02:17,880 --> 00:02:19,680
quick survey how many of you guys have

53
00:02:19,680 --> 00:02:22,290
actually got anything at all about risk

54
00:02:22,290 --> 00:02:26,280
by what this is like branding though ok

55
00:02:26,280 --> 00:02:28,980
it's good enough but it's still seeing I

56
00:02:28,980 --> 00:02:31,620
don't see all hands so I guess this Chi

57
00:02:31,620 --> 00:02:34,500
foundation need to pump more and more

58
00:02:34,500 --> 00:02:36,420
and more money to the marketing I

59
00:02:36,420 --> 00:02:38,520
thought it's enough but I guess it's not

60
00:02:38,520 --> 00:02:42,450
so you'll see more one day half day I

61
00:02:42,450 --> 00:02:44,970
don't know 5 day they keep organized it

62
00:02:44,970 --> 00:02:46,980
saying so it's like why do we do this

63
00:02:46,980 --> 00:02:49,050
why do they do this but I guess they

64
00:02:49,050 --> 00:02:52,380
still need to do this so basically and

65
00:02:52,380 --> 00:02:55,470
one more thing it's not a lot of people

66
00:02:55,470 --> 00:02:59,390
say this could be but actually this is 5

67
00:02:59,390 --> 00:03:02,910
it's a big difference but that's what

68
00:03:02,910 --> 00:03:05,040
foundation wants everybody to know it's

69
00:03:05,040 --> 00:03:08,370
risk v naught is V so that has to be the

70
00:03:08,370 --> 00:03:10,350
first line of every what is the describe

71
00:03:10,350 --> 00:03:13,230
slide it's known as it is v naught we

72
00:03:13,230 --> 00:03:15,840
just make sure keep in remember that

73
00:03:15,840 --> 00:03:18,859
anyways moving on it's the open source

74
00:03:18,859 --> 00:03:21,359
risk reduced instruction set

75
00:03:21,359 --> 00:03:24,180
architecture which is instructional I

76
00:03:24,180 --> 00:03:28,829
say so we are it's basically a modular I

77
00:03:28,829 --> 00:03:30,950
say which gives you a flexibility of

78
00:03:30,950 --> 00:03:33,390
customizing your application customizing

79
00:03:33,390 --> 00:03:37,799
your need to provide a better solution

80
00:03:37,799 --> 00:03:40,560
for your product so the base I say there

81
00:03:40,560 --> 00:03:42,000
is a base ice and there is bunch of

82
00:03:42,000 --> 00:03:44,700
modular or extensions on top of it the

83
00:03:44,700 --> 00:03:46,680
base ice is incredibly small and it's

84
00:03:46,680 --> 00:03:49,859
frozen and the mostly it's integer and

85
00:03:49,859 --> 00:03:52,440
embedded and then although on top of it

86
00:03:52,440 --> 00:03:54,380
it's like multiplied divided atomic

87
00:03:54,380 --> 00:03:57,750
floating point and then compressed

88
00:03:57,750 --> 00:03:59,850
instruction so all those are also frozen

89
00:03:59,850 --> 00:04:04,980
all these forms the G which is I'm FD

90
00:04:04,980 --> 00:04:09,660
see known as G and then our V 64 G C

91
00:04:09,660 --> 00:04:12,329
which basically boots Linux so if you

92
00:04:12,329 --> 00:04:14,459
want to boot Linux on risk 5 that's the

93
00:04:14,459 --> 00:04:16,589
minimum extensions you need to support

94
00:04:16,589 --> 00:04:19,470
on your hardware then we have more

95
00:04:19,470 --> 00:04:23,130
feature-rich advanced extension which is

96
00:04:23,130 --> 00:04:25,530
such as virtualization vector with

97
00:04:25,530 --> 00:04:26,970
manipulation which are still being

98
00:04:26,970 --> 00:04:27,810
drafted

99
00:04:27,810 --> 00:04:30,300
there are numerous working group

100
00:04:30,300 --> 00:04:32,940
committees anybody who is a member of

101
00:04:32,940 --> 00:04:34,890
foundation is welcome to join or if you

102
00:04:34,890 --> 00:04:36,720
can be an individual member and welcome

103
00:04:36,720 --> 00:04:39,210
to join in the group and then contribute

104
00:04:39,210 --> 00:04:41,520
and those are draft extends and those

105
00:04:41,520 --> 00:04:43,890
are being revised and as they are being

106
00:04:43,890 --> 00:04:46,020
revised we go on implement it in cameo

107
00:04:46,020 --> 00:04:48,510
or if there is a PC implementation we go

108
00:04:48,510 --> 00:04:50,910
out and do it in the PGA to prove that

109
00:04:50,910 --> 00:04:54,330
ok this spec works then it's being gets

110
00:04:54,330 --> 00:04:56,310
ratified and eventually frozen once it's

111
00:04:56,310 --> 00:04:56,670
frozen

112
00:04:56,670 --> 00:04:58,830
there is no looking back you you can

113
00:04:58,830 --> 00:05:01,530
make extension you can make amends but

114
00:05:01,530 --> 00:05:03,120
it's always should be backward

115
00:05:03,120 --> 00:05:05,580
compatible so one suspect is frozen you

116
00:05:05,580 --> 00:05:09,150
always have to go in a route like go

117
00:05:09,150 --> 00:05:11,100
forward and your software will always be

118
00:05:11,100 --> 00:05:13,230
backward compatible so there are a lot

119
00:05:13,230 --> 00:05:15,510
of multiple CPU implementations

120
00:05:15,510 --> 00:05:17,640
available both open-source and IP

121
00:05:17,640 --> 00:05:21,060
license so remember risk 5 is an ISA so

122
00:05:21,060 --> 00:05:23,940
that's open but any CPU that implements

123
00:05:23,940 --> 00:05:25,710
described doesn't have to be open it

124
00:05:25,710 --> 00:05:28,740
depending on the company what do they

125
00:05:28,740 --> 00:05:31,140
want to do there are multiple CPUs

126
00:05:31,140 --> 00:05:34,320
boondock at 64 we have a swear code from

127
00:05:34,320 --> 00:05:35,640
Western Digital which are open source

128
00:05:35,640 --> 00:05:37,800
available at the same time you have and

129
00:05:37,800 --> 00:05:40,740
this sci-fi which basically licensed

130
00:05:40,740 --> 00:05:43,500
their core IP currently will be backed

131
00:05:43,500 --> 00:05:47,430
by all these companies and which sees

132
00:05:47,430 --> 00:05:50,669
the growth of the ecosystem now why this

133
00:05:50,669 --> 00:05:54,419
why why do we need it so we need a open

134
00:05:54,419 --> 00:05:57,750
source this I say to leverage the

135
00:05:57,750 --> 00:05:59,970
implementation so that you can change

136
00:05:59,970 --> 00:06:02,430
modify without paying any licensing cost

137
00:06:02,430 --> 00:06:04,919
as far as I remember until recently

138
00:06:04,919 --> 00:06:07,290
there was no I say that you can just

139
00:06:07,290 --> 00:06:11,550
take it and go and change it until to

140
00:06:11,550 --> 00:06:13,620
expect when IBM announced all there is

141
00:06:13,620 --> 00:06:16,260
open power so here you go open power go

142
00:06:16,260 --> 00:06:16,830
and take it

143
00:06:16,830 --> 00:06:19,560
sometimes I wonder what caused their

144
00:06:19,560 --> 00:06:22,410
change of heart but I'm nobody to answer

145
00:06:22,410 --> 00:06:25,770
so but yeah so whole point is you have

146
00:06:25,770 --> 00:06:28,290
an open I say so same as this five same

147
00:06:28,290 --> 00:06:29,970
as open power or any other open source I

148
00:06:29,970 --> 00:06:32,820
say that allows you to don't have to

149
00:06:32,820 --> 00:06:34,860
contract go to into a NDA with let's say

150
00:06:34,860 --> 00:06:37,229
are more like say Intel or any other

151
00:06:37,229 --> 00:06:40,050
company and you can go and modify to

152
00:06:40,050 --> 00:06:41,610
your own liking

153
00:06:41,610 --> 00:06:43,919
security audits become very useful you

154
00:06:43,919 --> 00:06:46,680
can specific for you can do a custom

155
00:06:46,680 --> 00:06:49,889
specific application specific custom CPU

156
00:06:49,889 --> 00:06:52,469
that only suits your application domain

157
00:06:52,469 --> 00:06:54,990
which kind of enhances the performance

158
00:06:54,990 --> 00:06:57,360
it's a community driven development

159
00:06:57,360 --> 00:06:59,430
approach where everybody's welcome to

160
00:06:59,430 --> 00:07:02,699
contribute to the hardware design and

161
00:07:02,699 --> 00:07:05,729
the spec and basically it take taken a

162
00:07:05,729 --> 00:07:06,840
leaf from the open-source software

163
00:07:06,840 --> 00:07:09,180
ecosystem how it is evolved and grown

164
00:07:09,180 --> 00:07:11,280
over the time and we are basically

165
00:07:11,280 --> 00:07:14,159
trying to adopt the same approach so

166
00:07:14,159 --> 00:07:16,379
that's all the boring stuff now let's go

167
00:07:16,379 --> 00:07:19,020
to the cool stuff what exactly what's

168
00:07:19,020 --> 00:07:20,969
happening in the bootloader area and the

169
00:07:20,969 --> 00:07:24,990
former's so this is a it's not like when

170
00:07:24,990 --> 00:07:26,969
I say industry standard boot rotor this

171
00:07:26,969 --> 00:07:29,550
is just an simplistic multistage

172
00:07:29,550 --> 00:07:31,080
bootloader that may be much more

173
00:07:31,080 --> 00:07:33,750
complicated but in the view of this talk

174
00:07:33,750 --> 00:07:35,190
I wanted to present a simplistic

175
00:07:35,190 --> 00:07:39,360
bootloader boot flow for how exactly all

176
00:07:39,360 --> 00:07:41,550
the most of the embedded not if not all

177
00:07:41,550 --> 00:07:44,219
most of the board's work so we have a

178
00:07:44,219 --> 00:07:46,500
ROM which runs from the on-chip draw

179
00:07:46,500 --> 00:07:48,930
which basically as it name suggests it

180
00:07:48,930 --> 00:07:52,529
runs from the ROM do the associate our

181
00:07:52,529 --> 00:07:54,539
append clock setup then we have a loader

182
00:07:54,539 --> 00:07:56,610
which runs from the does the DDR

183
00:07:56,610 --> 00:07:58,949
initialization does a your fake DD

184
00:07:58,949 --> 00:08:00,949
o'clock initialization and then

185
00:08:00,949 --> 00:08:04,379
typically loads all the forward stages

186
00:08:04,379 --> 00:08:07,229
and the typical example would be an e

187
00:08:07,229 --> 00:08:11,909
boot SPL or code boot which deals as an

188
00:08:11,909 --> 00:08:14,159
loader and then there is next runtime

189
00:08:14,159 --> 00:08:16,229
which provides any kind of runtime

190
00:08:16,229 --> 00:08:19,680
services which will be persistent

191
00:08:19,680 --> 00:08:21,900
after all this boot loader is done and

192
00:08:21,900 --> 00:08:23,789
let's say your Linux or other operating

193
00:08:23,789 --> 00:08:26,039
systems boots up so that will be the

194
00:08:26,039 --> 00:08:27,659
persistent code ron was talking about

195
00:08:27,659 --> 00:08:29,120
which shouldn't have it we shouldn't

196
00:08:29,120 --> 00:08:31,589
maintain it there shouldn't be any

197
00:08:31,589 --> 00:08:34,049
persistent code after Linux boots one

198
00:08:34,049 --> 00:08:37,740
day yes I would also vote for it but for

199
00:08:37,740 --> 00:08:40,919
now it's there so it is so it basically

200
00:08:40,919 --> 00:08:43,140
typical example would be an in my arm

201
00:08:43,140 --> 00:08:45,149
world it's an ATF where you do all

202
00:08:45,149 --> 00:08:48,449
security services and all do run runtime

203
00:08:48,449 --> 00:08:50,850
services as per whatever specification

204
00:08:50,850 --> 00:08:53,550
based on the that architecture then

205
00:08:53,550 --> 00:08:55,080
there is bootloader which is

206
00:08:55,080 --> 00:08:58,230
Grob you boot or Linux boot which has

207
00:08:58,230 --> 00:09:01,830
much more richer fetch much more richer

208
00:09:01,830 --> 00:09:04,410
features which basically have file

209
00:09:04,410 --> 00:09:07,200
system support network support and then

210
00:09:07,200 --> 00:09:10,190
boot configuration you can do multiple

211
00:09:10,190 --> 00:09:13,350
multiple OSS at the same time from a

212
00:09:13,350 --> 00:09:16,640
menu or fancy stuff so this is what

213
00:09:16,640 --> 00:09:18,650
almost all of the boards are

214
00:09:18,650 --> 00:09:22,170
architecture follow and this is what we

215
00:09:22,170 --> 00:09:24,360
try to follow which you carefully look

216
00:09:24,360 --> 00:09:27,540
more or less exactly same the currently

217
00:09:27,540 --> 00:09:30,570
this is in terms of hi-5 Unleashed board

218
00:09:30,570 --> 00:09:32,460
the boot flow the namings are hi-5

219
00:09:32,460 --> 00:09:34,260
Unleashed board because that's the only

220
00:09:34,260 --> 00:09:37,110
this five platform available today but

221
00:09:37,110 --> 00:09:40,070
going forward the names may be change

222
00:09:40,070 --> 00:09:43,170
especially the first two stages but we

223
00:09:43,170 --> 00:09:45,000
are hoping that this will continue to be

224
00:09:45,000 --> 00:09:47,430
the boot flow for risk 5 so currently

225
00:09:47,430 --> 00:09:48,660
have four high five on list there is

226
00:09:48,660 --> 00:09:50,310
some the ROM stage basically known as

227
00:09:50,310 --> 00:09:52,980
Jed SPL which is known as zero stretch

228
00:09:52,980 --> 00:09:55,110
boot loader then there is FS wheel which

229
00:09:55,110 --> 00:09:56,850
is first stage bootloader which again

230
00:09:56,850 --> 00:09:58,380
does the same clock initialization on

231
00:09:58,380 --> 00:10:01,200
all clock and DD reinstallation then it

232
00:10:01,200 --> 00:10:03,300
jumps to open SP a which is the only

233
00:10:03,300 --> 00:10:07,740
respite specific firmware which

234
00:10:07,740 --> 00:10:10,230
basically just prove the whole objective

235
00:10:10,230 --> 00:10:12,120
is to just provide the runtime services

236
00:10:12,120 --> 00:10:16,200
for s 5 we'll go back to go into the

237
00:10:16,200 --> 00:10:18,330
details of what exactly and what it does

238
00:10:18,330 --> 00:10:21,510
then that is e boot which guess

239
00:10:21,510 --> 00:10:23,580
everybody's aware of so we have complete

240
00:10:23,580 --> 00:10:26,040
you would network on network and HD cut

241
00:10:26,040 --> 00:10:28,260
support so you can load your image from

242
00:10:28,260 --> 00:10:30,870
network or SD card how you do for let's

243
00:10:30,870 --> 00:10:33,840
say excited arm any arm board or x86

244
00:10:33,840 --> 00:10:37,710
then of course the Linux OS so the whole

245
00:10:37,710 --> 00:10:39,750
idea is to stand follow a standard boot

246
00:10:39,750 --> 00:10:42,840
flow and all of them all these

247
00:10:42,840 --> 00:10:44,070
components are open-source

248
00:10:44,070 --> 00:10:46,140
none of them are a vendor log or

249
00:10:46,140 --> 00:10:48,720
anything I put it as a proprietary like

250
00:10:48,720 --> 00:10:50,700
some of the color because going forward

251
00:10:50,700 --> 00:10:53,730
there may be some jealous PL code which

252
00:10:53,730 --> 00:10:56,280
may be vendor locked maybe some of SPL

253
00:10:56,280 --> 00:10:57,990
but we are trying to not to habit so

254
00:10:57,990 --> 00:11:00,600
that you good SPL encore boot basically

255
00:11:00,600 --> 00:11:03,150
can replace FS BL and everybody just

256
00:11:03,150 --> 00:11:06,150
used the entire open-source boot flow as

257
00:11:06,150 --> 00:11:09,050
an default sky boot flow

258
00:11:09,050 --> 00:11:11,760
now what exactly

259
00:11:11,760 --> 00:11:13,860
SBI I remember some of you might be

260
00:11:13,860 --> 00:11:15,900
present in the prawn stock when you

261
00:11:15,900 --> 00:11:18,540
saying it's we're going back to the

262
00:11:18,540 --> 00:11:21,120
legacy OS more like a legacy bias mode

263
00:11:21,120 --> 00:11:26,310
and it's all not that great to some

264
00:11:26,310 --> 00:11:28,680
extent I agree but this is what is in

265
00:11:28,680 --> 00:11:30,810
the spec this is what is a designer's

266
00:11:30,810 --> 00:11:33,180
thought it's a good idea to have it so

267
00:11:33,180 --> 00:11:35,480
we have to make the software work

268
00:11:35,480 --> 00:11:38,430
whenever there is an alternate method or

269
00:11:38,430 --> 00:11:39,990
there is better hardware to support it

270
00:11:39,990 --> 00:11:42,300
we can always get rid of it but I don't

271
00:11:42,300 --> 00:11:44,340
see it in at least in near future

272
00:11:44,340 --> 00:11:47,340
so let's little bit learn about what

273
00:11:47,340 --> 00:11:50,070
exactly is SPI it's a supervised a

274
00:11:50,070 --> 00:11:52,080
binary interface which basically an

275
00:11:52,080 --> 00:11:54,660
interface between your OS which runs in

276
00:11:54,660 --> 00:11:57,180
your supervisor mode and your supervisor

277
00:11:57,180 --> 00:11:59,610
execution environment which is like a

278
00:11:59,610 --> 00:12:04,470
bare metal hardware or hypervisor so any

279
00:12:04,470 --> 00:12:06,540
of those layer have to implement that

280
00:12:06,540 --> 00:12:09,530
sba layer to provide those services to

281
00:12:09,530 --> 00:12:12,150
whatever running on the supervisor mode

282
00:12:12,150 --> 00:12:14,190
so it can be linux freebsd or any other

283
00:12:14,190 --> 00:12:16,500
operating system so it's like a system

284
00:12:16,500 --> 00:12:18,830
called connivance on you put in calling

285
00:12:18,830 --> 00:12:21,060
arguments in which call and what are the

286
00:12:21,060 --> 00:12:24,510
arguments in on your is 0a one arguments

287
00:12:24,510 --> 00:12:26,190
and then you make an a call it will trap

288
00:12:26,190 --> 00:12:29,190
into your the m mode and then it will

289
00:12:29,190 --> 00:12:32,190
execute that code and figure out what

290
00:12:32,190 --> 00:12:34,440
needs to be done based on that call so

291
00:12:34,440 --> 00:12:36,870
the advantage of sba calls a why it was

292
00:12:36,870 --> 00:12:38,750
there to reduce the duplication

293
00:12:38,750 --> 00:12:42,030
duplicate platform code between across

294
00:12:42,030 --> 00:12:43,410
choices so you don't have to implement

295
00:12:43,410 --> 00:12:45,720
something specific that is very specific

296
00:12:45,720 --> 00:12:47,850
to the hardware so sba call basically

297
00:12:47,850 --> 00:12:50,280
abstracts a way for you and then there

298
00:12:50,280 --> 00:12:52,620
is a common drivers can be developed

299
00:12:52,620 --> 00:12:54,900
common then there is the interface

300
00:12:54,900 --> 00:12:56,580
direct access for hardware resources

301
00:12:56,580 --> 00:12:58,140
something like misaligned load store or

302
00:12:58,140 --> 00:13:01,620
a instruction that is or a csr that is

303
00:13:01,620 --> 00:13:03,120
not present in the hardware but in the

304
00:13:03,120 --> 00:13:05,970
spec so you can emulate or in the in

305
00:13:05,970 --> 00:13:08,430
this layer so the currently we are at

306
00:13:08,430 --> 00:13:11,370
the 0.1 specification which has a lot of

307
00:13:11,370 --> 00:13:13,020
legacy calls and we are trying to remove

308
00:13:13,020 --> 00:13:15,180
those to improve the performance the

309
00:13:15,180 --> 00:13:17,610
next one is 0.2 which are being drafted

310
00:13:17,610 --> 00:13:20,730
right now like it's already in the Kitab

311
00:13:20,730 --> 00:13:22,170
and then there's a implementation I will

312
00:13:22,170 --> 00:13:24,899
the mailing list so going forward it

313
00:13:24,899 --> 00:13:29,100
will go improve to make it more profound

314
00:13:29,100 --> 00:13:32,120
sensitive rather than just make it work

315
00:13:32,120 --> 00:13:33,839
so what is open

316
00:13:33,839 --> 00:13:36,180
SBI so open SBI is an open-source

317
00:13:36,180 --> 00:13:38,370
implementation of the SBI specification

318
00:13:38,370 --> 00:13:41,459
so it's unlicensed under BSD to clause

319
00:13:41,459 --> 00:13:45,269
or the whole idea is to when we started

320
00:13:45,269 --> 00:13:46,980
like last year when this project got

321
00:13:46,980 --> 00:13:50,100
ideated we saw that there is all the

322
00:13:50,100 --> 00:13:52,680
boot loaders now need to implement the

323
00:13:52,680 --> 00:13:56,010
sba so the specification will go into

324
00:13:56,010 --> 00:13:58,680
multiple multiple flag fragmented

325
00:13:58,680 --> 00:14:00,389
implementation mode so there is a new

326
00:14:00,389 --> 00:14:02,130
specification everybody has to go and

327
00:14:02,130 --> 00:14:04,230
implement that then there is changes

328
00:14:04,230 --> 00:14:05,940
there are bugs so everybody has to go on

329
00:14:05,940 --> 00:14:08,279
fix in individual layers instead of that

330
00:14:08,279 --> 00:14:09,930
we thought of okay why not having a

331
00:14:09,930 --> 00:14:12,870
common open-source project which every

332
00:14:12,870 --> 00:14:15,480
architecture can basically every boot

333
00:14:15,480 --> 00:14:17,940
loaders or every whatever the mode

334
00:14:17,940 --> 00:14:20,130
firmware can leverage it so that nobody

335
00:14:20,130 --> 00:14:21,750
has to bothered about open is the

336
00:14:21,750 --> 00:14:24,510
Essbase specification and if there is a

337
00:14:24,510 --> 00:14:26,130
day when we need to remove it you can

338
00:14:26,130 --> 00:14:28,170
just get rid of it just directly call to

339
00:14:28,170 --> 00:14:31,350
Linux so it's aimed at providing runtime

340
00:14:31,350 --> 00:14:34,910
services in M mode and then it provides

341
00:14:34,910 --> 00:14:38,430
reference platforms for like some kind

342
00:14:38,430 --> 00:14:40,140
of drivers which are bare minimum

343
00:14:40,140 --> 00:14:41,910
drivers which are necessary such as your

344
00:14:41,910 --> 00:14:43,649
interrupt controller local maybe

345
00:14:43,649 --> 00:14:45,480
external interrupt controller then your

346
00:14:45,480 --> 00:14:49,079
yacht and other any platform vendors can

347
00:14:49,079 --> 00:14:52,079
use the common code so that they don't

348
00:14:52,079 --> 00:14:53,610
have to write as long as they are

349
00:14:53,610 --> 00:14:55,440
compatible if not they can just leverage

350
00:14:55,440 --> 00:14:58,290
the SBA as in library and then before

351
00:14:58,290 --> 00:15:02,160
word so the key features in it is it has

352
00:15:02,160 --> 00:15:04,320
multiple layers one is it just

353
00:15:04,320 --> 00:15:06,480
implements the sba specification as a

354
00:15:06,480 --> 00:15:09,480
library so anybody who wants to just use

355
00:15:09,480 --> 00:15:11,699
the library to this take the use it as a

356
00:15:11,699 --> 00:15:13,380
library wrapper and then just use it

357
00:15:13,380 --> 00:15:15,360
then there is a platform specific

358
00:15:15,360 --> 00:15:17,880
library which is any platform vendors

359
00:15:17,880 --> 00:15:20,819
can take a make use of it so that they

360
00:15:20,819 --> 00:15:22,560
don't have to rewrite those codes same

361
00:15:22,560 --> 00:15:24,930
code again and again then they have it

362
00:15:24,930 --> 00:15:26,970
has the platform specific form where

363
00:15:26,970 --> 00:15:29,399
which has different options which I will

364
00:15:29,399 --> 00:15:32,130
follow the next slide and the platform

365
00:15:32,130 --> 00:15:34,230
vendors can choose the same to take and

366
00:15:34,230 --> 00:15:35,730
take advantage of the

367
00:15:35,730 --> 00:15:37,470
direct former generated by openness way

368
00:15:37,470 --> 00:15:39,480
if they want to if they don't want just

369
00:15:39,480 --> 00:15:41,220
take the library as an use it

370
00:15:41,220 --> 00:15:44,519
so apart from a space specification ml

371
00:15:44,519 --> 00:15:47,339
SB a specific as an implementation also

372
00:15:47,339 --> 00:15:49,679
also have different features such as

373
00:15:49,679 --> 00:15:52,169
load store handling missing CSR

374
00:15:52,169 --> 00:15:53,910
emulation and then protect the form

375
00:15:53,910 --> 00:15:55,949
we're using physical memory protection

376
00:15:55,949 --> 00:15:59,999
as known as PMP so open HP provides

377
00:15:59,999 --> 00:16:02,160
different formats one is from where

378
00:16:02,160 --> 00:16:03,569
payload which is straightforward your

379
00:16:03,569 --> 00:16:06,149
next is payload is basically given as

380
00:16:06,149 --> 00:16:08,819
and let's say next days as a you boot or

381
00:16:08,819 --> 00:16:10,499
Linux given as a payload to open espy

382
00:16:10,499 --> 00:16:13,889
open ice pages jumps to that address it

383
00:16:13,889 --> 00:16:16,290
knows that that is it exists then there

384
00:16:16,290 --> 00:16:18,389
is this is the default method which we

385
00:16:18,389 --> 00:16:20,730
are using currently on the i5 unleashed

386
00:16:20,730 --> 00:16:24,209
hardware that's present here and then

387
00:16:24,209 --> 00:16:26,069
there is form a jump which is a static

388
00:16:26,069 --> 00:16:28,139
fixed address so open ice play knows

389
00:16:28,139 --> 00:16:30,059
that the next stage is at this address

390
00:16:30,059 --> 00:16:33,389
and then I just jump to it that's being

391
00:16:33,389 --> 00:16:36,149
the default model used for cameo ten

392
00:16:36,149 --> 00:16:38,339
days from a dynamic where the previous

393
00:16:38,339 --> 00:16:41,009
days such as you would SPL or coreboot

394
00:16:41,009 --> 00:16:44,429
we still configures that your next days

395
00:16:44,429 --> 00:16:46,619
I have loaded it for you so you don't

396
00:16:46,619 --> 00:16:48,839
have to load it I have loaded it for you

397
00:16:48,839 --> 00:16:50,970
it's this address it passes that address

398
00:16:50,970 --> 00:16:53,459
to form a dynamic open spi just jump to

399
00:16:53,459 --> 00:16:55,829
that address so there's different ways

400
00:16:55,829 --> 00:16:58,889
to provide different a kind of option to

401
00:16:58,889 --> 00:17:01,439
different boot order so for mass then

402
00:17:01,439 --> 00:17:04,500
SOC vendor may choose either way to do

403
00:17:04,500 --> 00:17:08,099
it and then currently it's done in a

404
00:17:08,099 --> 00:17:10,619
different way depending on the

405
00:17:10,619 --> 00:17:11,839
bootloader is done in a different

406
00:17:11,839 --> 00:17:14,490
approaches which will also follow so

407
00:17:14,490 --> 00:17:16,679
currently we have multiple platforms

408
00:17:16,679 --> 00:17:19,079
supported in open spi we have SCI five

409
00:17:19,079 --> 00:17:21,779
high five on list which is this one then

410
00:17:21,779 --> 00:17:25,138
there is and s and which is I think they

411
00:17:25,138 --> 00:17:26,398
don't have they have an FPGA

412
00:17:26,398 --> 00:17:28,138
implementation but if I'm not wrong they

413
00:17:28,138 --> 00:17:30,210
don't have an ass ik then that is Arian

414
00:17:30,210 --> 00:17:32,940
a PC SOC which is from UTS Urich and

415
00:17:32,940 --> 00:17:36,269
then there is supercool $20 can read

416
00:17:36,269 --> 00:17:38,760
chinese board from a chinese company is

417
00:17:38,760 --> 00:17:40,409
a kenda right kit okay two one zero

418
00:17:40,409 --> 00:17:42,149
the problem with it is it doesn't have

419
00:17:42,149 --> 00:17:44,220
one it has an S mode but it doesn't have

420
00:17:44,220 --> 00:17:44,669
an MMU

421
00:17:44,669 --> 00:17:47,070
so you have to run and it has six MB of

422
00:17:47,070 --> 00:17:50,130
SRAM so you have to run really like

423
00:17:50,130 --> 00:17:52,890
mm you Linux The Witcher the patches are

424
00:17:52,890 --> 00:17:55,080
on the mailing list and then obviously

425
00:17:55,080 --> 00:17:57,810
we have Q which is the best coolest

426
00:17:57,810 --> 00:18:00,000
software ever available in this world

427
00:18:00,000 --> 00:18:02,760
because you can go ahead implemented in

428
00:18:02,760 --> 00:18:05,430
queue and then verify and speaking of Q

429
00:18:05,430 --> 00:18:08,670
I'll switch to Alistar who is will go

430
00:18:08,670 --> 00:18:15,420
through the rest of the slides thanks of

431
00:18:15,420 --> 00:18:18,390
everything so open SBI is actively

432
00:18:18,390 --> 00:18:20,580
developed and maintained we recently had

433
00:18:20,580 --> 00:18:23,390
the 0.4 release like a month or two ago

434
00:18:23,390 --> 00:18:26,790
and open SBI is now the default firmware

435
00:18:26,790 --> 00:18:28,800
and build root and open embedded which

436
00:18:28,800 --> 00:18:30,600
are two commonly used embedded

437
00:18:30,600 --> 00:18:33,810
distributions it's the qmu bios option

438
00:18:33,810 --> 00:18:35,940
now so Kim you has an option to pass in

439
00:18:35,940 --> 00:18:38,550
basically a firmware and can you start

440
00:18:38,550 --> 00:18:41,610
up an x86 so they call it BIOS and Kimmy

441
00:18:41,610 --> 00:18:43,080
will ship now with the open SPI

442
00:18:43,080 --> 00:18:45,210
pre-built for you and you can just point

443
00:18:45,210 --> 00:18:46,530
to that and run that so if you're not

444
00:18:46,530 --> 00:18:48,390
interested at all in building with five

445
00:18:48,390 --> 00:18:50,160
things you just want to download fedora

446
00:18:50,160 --> 00:18:52,020
from the internet and run that you can

447
00:18:52,020 --> 00:18:55,110
do it now with comeyou fedora and debian

448
00:18:55,110 --> 00:18:57,240
also provide images with open SPI as

449
00:18:57,240 --> 00:18:59,850
well so you boot it gets a little

450
00:18:59,850 --> 00:19:02,280
confusing but you boot 2019 seven which

451
00:19:02,280 --> 00:19:05,070
was released in July this year has hi-5

452
00:19:05,070 --> 00:19:07,620
unleash support but it only supports

453
00:19:07,620 --> 00:19:10,200
booting by our network not by the MMC

454
00:19:10,200 --> 00:19:13,740
and MMC support is coming in the 2019 10

455
00:19:13,740 --> 00:19:16,620
release which happens in October and EFI

456
00:19:16,620 --> 00:19:19,200
support is there so grub actually has a

457
00:19:19,200 --> 00:19:22,320
port it was a pretty early on port so

458
00:19:22,320 --> 00:19:25,020
grub bruton works on verse 5 the Linux

459
00:19:25,020 --> 00:19:27,300
kernel any kind of recent ish since the

460
00:19:27,300 --> 00:19:32,150
4.19 kernel will work on key mu and 5.3

461
00:19:32,150 --> 00:19:34,170
next week or the week after that

462
00:19:34,170 --> 00:19:36,330
whenever it comes out we'll work with

463
00:19:36,330 --> 00:19:38,370
open SPI you boot and everything on the

464
00:19:38,370 --> 00:19:39,690
hi-5 Unleashed and that's what we're

465
00:19:39,690 --> 00:19:41,760
going to demo in a little bit at the end

466
00:19:41,760 --> 00:19:46,290
of this so this is the planned boot flow

467
00:19:46,290 --> 00:19:48,450
with you root SPL so it just kind of

468
00:19:48,450 --> 00:19:50,640
stoked about it a little bit of this so

469
00:19:50,640 --> 00:19:53,010
you root SPL has support upstream in

470
00:19:53,010 --> 00:19:55,230
master today just for the Kim Yuna

471
00:19:55,230 --> 00:19:55,620
Sheen's

472
00:19:55,620 --> 00:19:58,590
not for the high fiving leeched but I

473
00:19:58,590 --> 00:20:00,990
think that's coming along so the idea

474
00:20:00,990 --> 00:20:03,670
here is Z SPL which is the wrong

475
00:20:03,670 --> 00:20:05,920
can't get rid of that or boot and after

476
00:20:05,920 --> 00:20:07,660
that everything is open source so we

477
00:20:07,660 --> 00:20:10,150
have you boot SPL or coreboot also works

478
00:20:10,150 --> 00:20:13,810
on emu and the - leash and we have a

479
00:20:13,810 --> 00:20:16,180
demo of that on camera as well but you

480
00:20:16,180 --> 00:20:18,220
route SPL starts and then that can load

481
00:20:18,220 --> 00:20:21,520
open spi and the full you boot which

482
00:20:21,520 --> 00:20:23,470
then jumps to open spi which jumps to

483
00:20:23,470 --> 00:20:24,940
the full new boot and there you have a

484
00:20:24,940 --> 00:20:27,010
full new boot where you can TFTP in your

485
00:20:27,010 --> 00:20:29,800
images or boot MMC boot your images

486
00:20:29,800 --> 00:20:31,240
whatever you want to do and you have a

487
00:20:31,240 --> 00:20:33,640
full boots flow from open source code

488
00:20:33,640 --> 00:20:37,120
except except for the ROM but so yeah

489
00:20:37,120 --> 00:20:39,100
like I said that's in Kim you now and OH

490
00:20:39,100 --> 00:20:43,180
in Master Kim you now and so II DK - so

491
00:20:43,180 --> 00:20:46,300
the HPE people are working on the edk -

492
00:20:46,300 --> 00:20:47,410
implementation

493
00:20:47,410 --> 00:20:50,500
so they link the open spi library into e

494
00:20:50,500 --> 00:20:52,720
DK - and use that for the spi runtime

495
00:20:52,720 --> 00:20:55,360
services so they build it inside their

496
00:20:55,360 --> 00:20:57,550
build environment which is the same way

497
00:20:57,550 --> 00:20:59,590
that coreboot builds open spi for their

498
00:20:59,590 --> 00:21:02,260
users and so it's getting that it runs

499
00:21:02,260 --> 00:21:05,260
on the u5 40 which is the same court

500
00:21:05,260 --> 00:21:07,690
it's an Unleashed but on it's a soft one

501
00:21:07,690 --> 00:21:14,320
is on the FPGA platform so still stuff

502
00:21:14,320 --> 00:21:16,240
to do it was always something to do so

503
00:21:16,240 --> 00:21:19,300
efi stub support for you full UEFI

504
00:21:19,300 --> 00:21:20,950
support so I think it's probably a lot

505
00:21:20,950 --> 00:21:24,550
of people don't like that but Red Hat

506
00:21:24,550 --> 00:21:26,170
people want it fedora people want it so

507
00:21:26,170 --> 00:21:28,720
that people want it there this destroys

508
00:21:28,720 --> 00:21:31,510
that face if they could get away with it

509
00:21:31,510 --> 00:21:33,490
they would only ever support UEFI and

510
00:21:33,490 --> 00:21:34,410
it's kind of what they want to do

511
00:21:34,410 --> 00:21:36,490
because it simplifies everything for

512
00:21:36,490 --> 00:21:37,750
them they can boot the same thing in

513
00:21:37,750 --> 00:21:38,920
every architecture they don't have to

514
00:21:38,920 --> 00:21:41,860
worry about it so even if you most

515
00:21:41,860 --> 00:21:44,080
people don't like you if I hear it's

516
00:21:44,080 --> 00:21:45,490
something that has to be done and looked

517
00:21:45,490 --> 00:21:48,970
up your boot SPL support for hardware so

518
00:21:48,970 --> 00:21:51,310
I again that's right almost there we

519
00:21:51,310 --> 00:21:53,440
have the key mu support of step 1

520
00:21:53,440 --> 00:21:55,900
it's a SMP support in coreboot although

521
00:21:55,900 --> 00:21:57,160
I think someone said there were patches

522
00:21:57,160 --> 00:21:58,900
for that or at least people where

523
00:21:58,900 --> 00:22:01,210
someone was working on that UDK to up

524
00:22:01,210 --> 00:22:03,310
streaming and then every other

525
00:22:03,310 --> 00:22:05,110
bootloader that people care about

526
00:22:05,110 --> 00:22:07,150
so Linux boot if anyone wants to do that

527
00:22:07,150 --> 00:22:09,700
go ahead and whatever other boot loader

528
00:22:09,700 --> 00:22:11,890
people are working on risk 5 should

529
00:22:11,890 --> 00:22:15,460
always be supported open such books oh

530
00:22:15,460 --> 00:22:18,670
well yeah or if it's awesome mostly

531
00:22:18,670 --> 00:22:21,190
so I'm going work so the SPI specs are

532
00:22:21,190 --> 00:22:24,750
big focus now so the current version is

533
00:22:24,750 --> 00:22:27,940
just what Heights i-5 did and everyone's

534
00:22:27,940 --> 00:22:30,400
can use that so the new plan is to do a

535
00:22:30,400 --> 00:22:32,230
0 to 2 version which at least allows

536
00:22:32,230 --> 00:22:34,330
like a framework to probe the version

537
00:22:34,330 --> 00:22:35,590
information and extensions and things

538
00:22:35,590 --> 00:22:37,540
like that and then on top of that power

539
00:22:37,540 --> 00:22:39,940
management to turn cause or hearts they

540
00:22:39,940 --> 00:22:43,360
call them on and off open spi that needs

541
00:22:43,360 --> 00:22:46,690
to support the new spi aspect sequential

542
00:22:46,690 --> 00:22:49,750
CPU boots supporting other boot loaders

543
00:22:49,750 --> 00:22:51,550
so we've done a lot of work for the ATK

544
00:22:51,550 --> 00:22:54,580
2 people anything else to support the

545
00:22:54,580 --> 00:22:56,320
core boots already there and ups PL is

546
00:22:56,320 --> 00:23:00,130
coming along sir hypervisor support open

547
00:23:00,130 --> 00:23:02,800
spi actually needs patches or support

548
00:23:02,800 --> 00:23:04,780
the hypervisor extensions so the high

549
00:23:04,780 --> 00:23:06,520
price attention is has a queue

550
00:23:06,520 --> 00:23:08,590
implementation of KVM implementation and

551
00:23:08,590 --> 00:23:10,690
a bare-metal hypervisor implantation now

552
00:23:10,690 --> 00:23:13,809
and this patches on list for open spi

553
00:23:13,809 --> 00:23:15,760
support for that as well so it just

554
00:23:15,760 --> 00:23:17,230
needs to become tiding up in there and

555
00:23:17,230 --> 00:23:20,380
then platform so open spi this platform

556
00:23:20,380 --> 00:23:22,150
dependent sort of every new platform

557
00:23:22,150 --> 00:23:24,790
added organ spi has to be change the

558
00:23:24,790 --> 00:23:26,590
lease for that so that always has to

559
00:23:26,590 --> 00:23:32,200
happen so this is unrelated to anything

560
00:23:32,200 --> 00:23:34,750
else but one of the demos is going to be

561
00:23:34,750 --> 00:23:37,270
showing oh s tree so it's kind of a

562
00:23:37,270 --> 00:23:40,179
mutable way to boot embedded systems so

563
00:23:40,179 --> 00:23:41,950
you can update your system like a get

564
00:23:41,950 --> 00:23:43,540
update basically so you pull in the

565
00:23:43,540 --> 00:23:46,120
update and then reboot into your newly

566
00:23:46,120 --> 00:23:47,550
updated system

567
00:23:47,550 --> 00:23:51,190
it's what Fedora atomic which is now

568
00:23:51,190 --> 00:23:52,900
closed Fedora silver blue is looking at

569
00:23:52,900 --> 00:23:54,850
its for meta up data users which is

570
00:23:54,850 --> 00:23:57,520
where it came from for here flat pack

571
00:23:57,520 --> 00:24:00,010
uses Lib OS tree so it's kind of cool

572
00:24:00,010 --> 00:24:01,630
I'm not gonna go into too much detail

573
00:24:01,630 --> 00:24:03,940
just showing it off and the idea here is

574
00:24:03,940 --> 00:24:06,010
that RIS 5 is the same as everyone else

575
00:24:06,010 --> 00:24:08,050
we do the same things in boot that

576
00:24:08,050 --> 00:24:09,730
everyone else does we don't have to do

577
00:24:09,730 --> 00:24:15,030
anything special okay so now that demo

578
00:24:17,370 --> 00:24:20,679
there yeah is that ok can people see

579
00:24:20,679 --> 00:24:29,550
that people in the back can see it

580
00:24:29,550 --> 00:24:36,180
yeah better yeah this other size aren't

581
00:24:36,180 --> 00:24:36,780
too exciting

582
00:24:36,780 --> 00:24:43,640
okay so this is the high five

583
00:24:43,640 --> 00:24:46,200
this little one is the high five

584
00:24:46,200 --> 00:24:46,890
unleashed

585
00:24:46,890 --> 00:24:49,020
it's the first risk first and only

586
00:24:49,020 --> 00:24:51,840
publicly available respite ASIC so it's

587
00:24:51,840 --> 00:24:54,630
for risk five cause plus another one

588
00:24:54,630 --> 00:24:56,730
doesn't do anything and it boots Linux

589
00:24:56,730 --> 00:24:59,430
and then here is a micro semi expansion

590
00:24:59,430 --> 00:25:01,680
board that gives you PCIe so we're not

591
00:25:01,680 --> 00:25:02,850
using that today it's just attached in

592
00:25:02,850 --> 00:25:08,970
the box so I was easy to bring it okay

593
00:25:08,970 --> 00:25:19,830
so we just turn it on oh sorry it's like

594
00:25:19,830 --> 00:25:22,740
in there okay so so it's gonna boot in a

595
00:25:22,740 --> 00:25:24,540
sec so it's gonna boot through the full

596
00:25:24,540 --> 00:25:30,720
or mostly full open source flows only so

597
00:25:30,720 --> 00:25:34,410
it's oh yeah so okay okay I can talk it

598
00:25:34,410 --> 00:25:34,770
through

599
00:25:34,770 --> 00:25:36,990
so it's booting Zed SPF in F SPL and

600
00:25:36,990 --> 00:25:41,430
then over an SPI so this is openness so

601
00:25:41,430 --> 00:25:45,570
see sci-fi of SPL then open SPI and then

602
00:25:45,570 --> 00:25:48,990
new boot so it's now running that's what

603
00:25:48,990 --> 00:25:50,790
this other window is it's now running

604
00:25:50,790 --> 00:25:52,500
this script and it's just my development

605
00:25:52,500 --> 00:25:54,390
script so it tries to TFTP a whole heap

606
00:25:54,390 --> 00:25:56,040
of different things and it's not

607
00:25:56,040 --> 00:25:57,210
connected so it's just going to time out

608
00:25:57,210 --> 00:25:59,370
but it's what I used to develop so

609
00:25:59,370 --> 00:26:00,930
normally I put an image in there if I

610
00:26:00,930 --> 00:26:02,070
want to test that and just prove that

611
00:26:02,070 --> 00:26:04,260
eventually when it all times out it'll

612
00:26:04,260 --> 00:26:07,500
MNC boot from a fit image which is a

613
00:26:07,500 --> 00:26:11,850
flattened image g-free slide an industry

614
00:26:11,850 --> 00:26:12,930
which is basically a fancy way to

615
00:26:12,930 --> 00:26:15,810
package kernel images all together so

616
00:26:15,810 --> 00:26:17,970
you just see it just found the kernel so

617
00:26:17,970 --> 00:26:19,620
it's brooding a Linux kernel this is a

618
00:26:19,620 --> 00:26:23,220
5.3 I'll see something you can see here

619
00:26:23,220 --> 00:26:25,860
it started OS tree so I mounts in at

620
00:26:25,860 --> 00:26:27,420
Randolph s and then puts the root of s

621
00:26:27,420 --> 00:26:29,400
real word offense on top of that it

622
00:26:29,400 --> 00:26:30,630
starts open embedded there we have

623
00:26:30,630 --> 00:26:32,640
system D and eventually boot all the way

624
00:26:32,640 --> 00:26:36,150
to use the space so this is kind of show

625
00:26:36,150 --> 00:26:37,950
you how standard this is if anyone's use

626
00:26:37,950 --> 00:26:39,960
you boot this is kind of how you boot

627
00:26:39,960 --> 00:26:42,810
works and just running a script mm see

628
00:26:42,810 --> 00:26:43,530
boots that I have to

629
00:26:43,530 --> 00:26:46,590
haptic commands and then a standard

630
00:26:46,590 --> 00:26:56,070
systemd boot all the way up oh well does

631
00:26:56,070 --> 00:26:58,800
the type and never tell someone's less

632
00:26:58,800 --> 00:27:02,160
up okay doesn't know all right so the

633
00:27:02,160 --> 00:27:08,310
other one that also okay people see that

634
00:27:08,310 --> 00:27:13,740
oh yeah I can use from fullscreen okay

635
00:27:13,740 --> 00:27:19,680
this is cool boot so this is Q yeah so

636
00:27:19,680 --> 00:27:20,970
we're just running no graphic cuz we

637
00:27:20,970 --> 00:27:22,670
don't need graphics we're running the

638
00:27:22,670 --> 00:27:25,380
virtus v is the the best machine it's

639
00:27:25,380 --> 00:27:27,030
it's not real it doesn't model a real

640
00:27:27,030 --> 00:27:30,360
board it's just a few generic thing has

641
00:27:30,360 --> 00:27:33,420
a similar one of this there's some

642
00:27:33,420 --> 00:27:35,130
cereal options so we're passing in the

643
00:27:35,130 --> 00:27:37,650
kernel is a core boot file so this core

644
00:27:37,650 --> 00:27:40,080
boot file has over an SPI compiled into

645
00:27:40,080 --> 00:27:42,360
it and a kernel compiled into it so it's

646
00:27:42,360 --> 00:27:45,150
gonna boot all the corporate stuff then

647
00:27:45,150 --> 00:27:47,760
open SPI and then a kernel and then

648
00:27:47,760 --> 00:27:51,170
we're just attaching my brood FS as a

649
00:27:51,170 --> 00:27:53,700
video block device so it just like

650
00:27:53,700 --> 00:27:57,480
plugging a hard drive into Kimmy that's

651
00:27:57,480 --> 00:27:59,300
too quick

652
00:27:59,300 --> 00:28:06,380
well fast okay yeah

653
00:28:06,380 --> 00:28:16,080
so there's coreboot Donuts thing again

654
00:28:16,080 --> 00:28:21,360
open spi starting and that jumps to a

655
00:28:21,360 --> 00:28:23,400
Linux kernel which boosts the Linux

656
00:28:23,400 --> 00:28:25,950
kernel and then the same thing we're

657
00:28:25,950 --> 00:28:28,530
back to user space with system D so

658
00:28:28,530 --> 00:28:30,570
let's transfer everything kind of works

659
00:28:30,570 --> 00:28:33,180
in risk 5 as you would hope that that's

660
00:28:33,180 --> 00:28:34,770
the plan we don't want to re-implement

661
00:28:34,770 --> 00:28:36,870
everything ourselves we want to use

662
00:28:36,870 --> 00:28:39,270
whatever else is doing and and get

663
00:28:39,270 --> 00:28:44,560
everyone on board yeah so

664
00:28:44,560 --> 00:28:47,920
any questions thank you please give a

665
00:28:47,920 --> 00:28:49,320
round of applause

666
00:28:49,320 --> 00:28:55,090
I think we have time for a ton of

667
00:28:55,090 --> 00:28:57,720
questions really there's so much done

668
00:28:57,720 --> 00:29:01,650
the thing only says one minute

669
00:29:01,650 --> 00:29:07,750
yeah it's lying please go to the to the

670
00:29:07,750 --> 00:29:10,660
respective microphones and line up there

671
00:29:10,660 --> 00:29:16,540
and I decided to make a new policy and

672
00:29:16,540 --> 00:29:18,880
I'm really sorry if anyone has a problem

673
00:29:18,880 --> 00:29:20,830
with that but only one question per

674
00:29:20,830 --> 00:29:33,070
person please we have time but please if

675
00:29:33,070 --> 00:29:35,170
that is the case can i bypass a but each

676
00:29:35,170 --> 00:29:37,270
day and then slightly boot from a spell

677
00:29:37,270 --> 00:29:40,690
- you would prefer you mean from you

678
00:29:40,690 --> 00:29:43,420
would M mode to e boot proper now we

679
00:29:43,420 --> 00:29:45,910
still need s bi because Linux kernel

680
00:29:45,910 --> 00:29:48,310
expected so at current stage you can

681
00:29:48,310 --> 00:29:51,100
send I Pai pair has to through SPI your

682
00:29:51,100 --> 00:29:52,780
timer program has to throw SPI so you

683
00:29:52,780 --> 00:29:54,580
need some kind of runtime services

684
00:29:54,580 --> 00:29:56,050
it's your beef washers have to go

685
00:29:56,050 --> 00:30:00,910
through as I can then yes you don't have

686
00:30:00,910 --> 00:30:03,040
to run you could jump from SPI straight

687
00:30:03,040 --> 00:30:04,810
away yeah you don't need you boot proper

688
00:30:04,810 --> 00:30:07,090
let's s mode you can directly from open

689
00:30:07,090 --> 00:30:08,470
s where you can directly jump to Linux

690
00:30:08,470 --> 00:30:14,140
as well in the linux yes for now yes

691
00:30:14,140 --> 00:30:16,270
it's mandatory so you can hub you would

692
00:30:16,270 --> 00:30:18,130
a mode jump to it so that's how I think

693
00:30:18,130 --> 00:30:19,960
some of the people run if you want to

694
00:30:19,960 --> 00:30:22,590
run you would M mode you boot in M mode

695
00:30:22,590 --> 00:30:25,360
use open s PS and payload to e boot M

696
00:30:25,360 --> 00:30:28,060
mode and then also load the you would

697
00:30:28,060 --> 00:30:31,720
proper and I'm just continues a separate

698
00:30:31,720 --> 00:30:33,670
drive in the Linux instead of having

699
00:30:33,670 --> 00:30:36,070
separate it's has two nm modes so in

700
00:30:36,070 --> 00:30:38,110
fact an ml so the whole point we are

701
00:30:38,110 --> 00:30:41,080
using SBI in M mode SP and open SPI

702
00:30:41,080 --> 00:30:43,360
because the MMI address the time of

703
00:30:43,360 --> 00:30:45,640
programming the timers you cannot access

704
00:30:45,640 --> 00:30:46,540
from this mode

705
00:30:46,540 --> 00:30:49,540
IPS you cannot send an IP I in S mode so

706
00:30:49,540 --> 00:30:51,430
it has to trap down to M mode to send it

707
00:30:51,430 --> 00:30:53,980
one day when there will be hardware

708
00:30:53,980 --> 00:30:55,690
support we'll get rid of it and we're

709
00:30:55,690 --> 00:30:57,700
trying to get rid of it because it's

710
00:30:57,700 --> 00:30:59,710
heavy performance for every timer

711
00:30:59,710 --> 00:31:02,590
programming for every TLP floss for

712
00:31:02,590 --> 00:31:03,970
every I pay you need to trap it to a

713
00:31:03,970 --> 00:31:06,430
mode but it is what it is currently in

714
00:31:06,430 --> 00:31:08,290
again the arm world it's like eel three

715
00:31:08,290 --> 00:31:10,600
right so the kernel runs an eel one and

716
00:31:10,600 --> 00:31:13,030
that's what s1 it is in verse five and

717
00:31:13,030 --> 00:31:14,710
so the kernels there it can't do

718
00:31:14,710 --> 00:31:17,170
everything from the main story needs to

719
00:31:17,170 --> 00:31:18,880
call something like endure in the in the

720
00:31:18,880 --> 00:31:20,860
armed we can even bypass eightieth and

721
00:31:20,860 --> 00:31:23,410
we can done directly to the you would

722
00:31:23,410 --> 00:31:26,200
you can then use for hot biases so yeah

723
00:31:26,200 --> 00:31:28,690
so that's the seal to is the same as

724
00:31:28,690 --> 00:31:31,750
esperan in R is five so your threesome

725
00:31:31,750 --> 00:31:33,280
is still there which is the machine mode

726
00:31:33,280 --> 00:31:35,230
so you still have to call down to eel

727
00:31:35,230 --> 00:31:36,580
three basically it's the equivalent

728
00:31:36,580 --> 00:31:45,130
thanks um when can we expect to see some

729
00:31:45,130 --> 00:31:47,790
risk five silicon from Western Digital

730
00:31:47,790 --> 00:31:50,080
we have we have our open source core

731
00:31:50,080 --> 00:31:54,100
quite a venue on toasted so you can send

732
00:31:54,100 --> 00:31:55,510
pool requests the humble guys are having

733
00:31:55,510 --> 00:31:58,030
a lot of fun we're gonna have a question

734
00:31:58,030 --> 00:32:00,220
so send of what one guy just didn't one

735
00:32:00,220 --> 00:32:03,990
to replace like all the spaces with tabs

736
00:32:04,170 --> 00:32:06,940
alright sorry and I just like to give a

737
00:32:06,940 --> 00:32:10,540
shout-out to my token Thursday yeah

738
00:32:10,540 --> 00:32:12,820
related service 5 yeah yeah he also has

739
00:32:12,820 --> 00:32:15,100
a talk on Thursday at like 11 or

740
00:32:15,100 --> 00:32:16,270
something in the afternoon

741
00:32:16,270 --> 00:32:22,420
ok onerous 5 and FPGA right

742
00:32:22,420 --> 00:32:25,870
so I usually don't stand up to to

743
00:32:25,870 --> 00:32:28,570
comment but I figured I would do it it's

744
00:32:28,570 --> 00:32:30,490
not a question but I figure it might be

745
00:32:30,490 --> 00:32:33,210
useful for some people in the room

746
00:32:33,210 --> 00:32:38,320
my company is funding development work

747
00:32:38,320 --> 00:32:40,690
for to make sure that both coreboot as

748
00:32:40,690 --> 00:32:44,440
well as Linux boot works on the SyFy

749
00:32:44,440 --> 00:32:46,180
unleashed board so you can remove

750
00:32:46,180 --> 00:32:49,660
question marks okay yeah so so there is

751
00:32:49,660 --> 00:32:51,670
a Linux board Linux boot work in

752
00:32:51,670 --> 00:32:52,330
progress

753
00:32:52,330 --> 00:32:56,740
yes okay so there were some things with

754
00:32:56,740 --> 00:32:59,140
core route that doesn't work completely

755
00:32:59,140 --> 00:33:00,610
on the unleash board and that's being

756
00:33:00,610 --> 00:33:02,920
worked on and then I said at this point

757
00:33:02,920 --> 00:33:05,530
we probably have no good sort of working

758
00:33:05,530 --> 00:33:07,960
but I heard the cover it was supposed to

759
00:33:07,960 --> 00:33:10,510
work we had to flash the flash on to the

760
00:33:10,510 --> 00:33:11,500
flash and

761
00:33:11,500 --> 00:33:13,809
and we found that on Friday so I will

762
00:33:13,809 --> 00:33:16,240
make sure that it works well yeah if

763
00:33:16,240 --> 00:33:18,309
anyone is interested at that so yeah

764
00:33:18,309 --> 00:33:20,350
virtually as you saw virtually all it's

765
00:33:20,350 --> 00:33:24,400
pretty cool yeah all right you have time

766
00:33:24,400 --> 00:33:28,000
for a lot more questions any more

767
00:33:28,000 --> 00:33:28,570
questions

768
00:33:28,570 --> 00:33:34,150
No Oh does that mean we did a good job

769
00:33:34,150 --> 00:33:36,580
or a bad job everybody's can either

770
00:33:36,580 --> 00:33:40,659
everybody's confused on good can you

771
00:33:40,659 --> 00:33:42,460
talk about what's left to be done from

772
00:33:42,460 --> 00:33:49,539
the firmware side on rs5 so if the from

773
00:33:49,539 --> 00:33:51,700
the SBA perspective this whole if of

774
00:33:51,700 --> 00:33:54,010
things where there will be new version

775
00:33:54,010 --> 00:33:56,679
of SBI so which will be need to be

776
00:33:56,679 --> 00:33:57,850
implemented so as if now there is a

777
00:33:57,850 --> 00:34:00,640
patch both in open SP and the Linux

778
00:34:00,640 --> 00:34:02,909
kernel which would basically have an

779
00:34:02,909 --> 00:34:05,890
mechanism to extend any of the SBI calls

780
00:34:05,890 --> 00:34:08,800
in future also will try to get it off

781
00:34:08,800 --> 00:34:11,590
the legacy SBA calls which is IPI TLB

782
00:34:11,590 --> 00:34:14,500
flosses and your timer programming so

783
00:34:14,500 --> 00:34:17,139
we'd like to remove it from the former

784
00:34:17,139 --> 00:34:19,780
so that Linux can directly handle it

785
00:34:19,780 --> 00:34:21,730
then there is other bootloader such as

786
00:34:21,730 --> 00:34:23,889
you boot SPL currently only works in kmu

787
00:34:23,889 --> 00:34:25,780
so we need you to SPL support for

788
00:34:25,780 --> 00:34:28,418
hardware like only stock whatever

789
00:34:28,418 --> 00:34:30,909
hardware then and then core board

790
00:34:30,909 --> 00:34:33,760
I think Phillip would correct me SMP

791
00:34:33,760 --> 00:34:35,918
support is still working on it so there

792
00:34:35,918 --> 00:34:38,080
will be a simpie code boot yet still

793
00:34:38,080 --> 00:34:40,210
doesn't have SMP support that's one

794
00:34:40,210 --> 00:34:42,129
thing then as he said there is Linux

795
00:34:42,129 --> 00:34:43,989
boot which would also take care of

796
00:34:43,989 --> 00:34:48,369
running into the S mode boot rotor as in

797
00:34:48,369 --> 00:34:50,800
Linux boot to basically replace you boot

798
00:34:50,800 --> 00:34:53,199
in the upper stack and it would be the

799
00:34:53,199 --> 00:34:55,750
last stage boot rotor and UEFI and you

800
00:34:55,750 --> 00:34:58,510
if I that's a big block I don't a lot of

801
00:34:58,510 --> 00:35:00,400
people don't care about some of them so

802
00:35:00,400 --> 00:35:03,369
so main big pissing main that's why we

803
00:35:03,369 --> 00:35:04,960
didn't stress too much on EFI but

804
00:35:04,960 --> 00:35:08,200
there's enough interest to at least make

805
00:35:08,200 --> 00:35:10,570
it work so the main so we have grub

806
00:35:10,570 --> 00:35:13,510
support and we have EFI supporting new

807
00:35:13,510 --> 00:35:15,310
boot yeah but there is no if I stop

808
00:35:15,310 --> 00:35:17,650
supporting Linux kernel so that's what

809
00:35:17,650 --> 00:35:20,859
basically blocking the EFI one and the

810
00:35:20,859 --> 00:35:23,410
ATK two patches went in like last week

811
00:35:23,410 --> 00:35:24,640
in the mailing list it

812
00:35:24,640 --> 00:35:27,970
to mailing list can you tell us a little

813
00:35:27,970 --> 00:35:30,220
bit about how you get back the firmware

814
00:35:30,220 --> 00:35:34,150
code your name mostly yeah

815
00:35:34,150 --> 00:35:36,280
so we first we test and Kimmy so

816
00:35:36,280 --> 00:35:38,260
hopefully whatever works in key M you

817
00:35:38,260 --> 00:35:40,990
basically go and works on hardware but

818
00:35:40,990 --> 00:35:43,210
as everybody know that doesn't happen

819
00:35:43,210 --> 00:35:47,590
always so ideally mostly with this one

820
00:35:47,590 --> 00:35:49,450
we don't have we didn't have JTAG so we

821
00:35:49,450 --> 00:35:52,030
could take point on those fancy stuff so

822
00:35:52,030 --> 00:35:54,400
mostly using the prints but unless

823
00:35:54,400 --> 00:35:56,530
serial driver is initialized i used to

824
00:35:56,530 --> 00:35:59,650
basically put one character directly

825
00:35:59,650 --> 00:36:01,480
written to the serial driver to figure

826
00:36:01,480 --> 00:36:03,370
out in the code flow where am i because

827
00:36:03,370 --> 00:36:05,410
my serial is not initialized so i can't

828
00:36:05,410 --> 00:36:07,750
print anything so that's the best devote

829
00:36:07,750 --> 00:36:10,810
method i have so if if it's not just the

830
00:36:10,810 --> 00:36:13,540
highway problem emu has amazing debug

831
00:36:13,540 --> 00:36:15,190
powers right yeah print every line of

832
00:36:15,190 --> 00:36:16,720
assembly that it runs so you can follow

833
00:36:16,720 --> 00:36:19,480
it gdb back point and you gdb connect to

834
00:36:19,480 --> 00:36:22,270
it and step through you can yeah so Jane

835
00:36:22,270 --> 00:36:24,040
Lee handy for getting here yeah I would

836
00:36:24,040 --> 00:36:26,350
say 95 percent issues issues are solved

837
00:36:26,350 --> 00:36:28,660
in queue then last five percent of that

838
00:36:28,660 --> 00:36:31,990
last stretch to do you won't find cache

839
00:36:31,990 --> 00:36:34,150
issues and things of that sir it's not

840
00:36:34,150 --> 00:36:34,570
everything

841
00:36:34,570 --> 00:36:37,750
once it is booting you can lau enough

842
00:36:37,750 --> 00:36:39,940
debug support in open spi so you can

843
00:36:39,940 --> 00:36:42,730
just go and print it and it pretty

844
00:36:42,730 --> 00:36:44,860
excited here but the key me debugging

845
00:36:44,860 --> 00:36:46,270
capabilities I know that you've been

846
00:36:46,270 --> 00:36:49,930
looking at adding hypervisor support yes

847
00:36:49,930 --> 00:36:54,670
he using QM use debugging stuff to help

848
00:36:54,670 --> 00:36:55,570
you with the development of the

849
00:36:55,570 --> 00:36:58,030
hypervisor yes a lot yeah so you can

850
00:36:58,030 --> 00:37:02,770
connect yes you can one print of the

851
00:37:02,770 --> 00:37:05,350
assembly in from Kim you that it runs so

852
00:37:05,350 --> 00:37:07,140
that's really useful if you don't have

853
00:37:07,140 --> 00:37:09,820
well I'm GTV can work but it's useful to

854
00:37:09,820 --> 00:37:11,260
see kind of what it's taking and where

855
00:37:11,260 --> 00:37:14,320
it's going and if a brand illegal

856
00:37:14,320 --> 00:37:15,790
instruction you can see what the illegal

857
00:37:15,790 --> 00:37:17,500
instruction was and things like that but

858
00:37:17,500 --> 00:37:19,600
gdb can also connect to Kim you and then

859
00:37:19,600 --> 00:37:21,010
control I catch a type debugger

860
00:37:21,010 --> 00:37:22,990
basically and so gdb can then step

861
00:37:22,990 --> 00:37:25,300
through and expect everything and so we

862
00:37:25,300 --> 00:37:27,370
used a lot of that to develop to develop

863
00:37:27,370 --> 00:37:29,920
the hypervisor extensions and he has a

864
00:37:29,920 --> 00:37:32,500
talk of in this guy workshop last in

865
00:37:32,500 --> 00:37:34,930
Zurich yeah where he was showing how to

866
00:37:34,930 --> 00:37:37,000
debug in different methods so he it's in

867
00:37:37,000 --> 00:37:38,500
the risk 5 YouTube channel

868
00:37:38,500 --> 00:37:40,240
something together the Zurich workshop

869
00:37:40,240 --> 00:37:44,830
something Kim you something yeah Kimmy's

870
00:37:44,830 --> 00:37:48,160
amazing yeah that's all more stuff out

871
00:37:48,160 --> 00:37:48,820
problem

872
00:37:48,820 --> 00:37:52,480
95 96 percent I agree

873
00:37:52,480 --> 00:37:55,810
any more questions you really did a good

874
00:37:55,810 --> 00:37:58,869
job so thank you never run off applause

875
00:37:58,869 --> 00:38:01,240
for them thank you

876
00:38:01,240 --> 00:38:02,510
[Applause]

877
00:38:02,510 --> 00:38:11,570
[Music]

