1
00:00:03,190 --> 00:00:06,259
[Music]

2
00:00:08,090 --> 00:00:14,849
all right morning everybody all right so

3
00:00:14,849 --> 00:00:18,270
I'm Ben I've been watching an open PMC

4
00:00:18,270 --> 00:00:19,949
for Facebook for last two and a half

5
00:00:19,949 --> 00:00:22,140
years so I seen Soundview will probably

6
00:00:22,140 --> 00:00:24,900
hear yesterday heard my presentation on

7
00:00:24,900 --> 00:00:28,289
the native management and monitoring so

8
00:00:28,289 --> 00:00:30,900
here's where I talked about a little bit

9
00:00:30,900 --> 00:00:33,600
about how we use Pio DME novembe mc4

10
00:00:33,600 --> 00:00:36,840
sensor monitoring and also for our need

11
00:00:36,840 --> 00:00:38,610
firmware upgrades in the input in our

12
00:00:38,610 --> 00:00:40,680
production fleet so here is a follow-up

13
00:00:40,680 --> 00:00:42,989
presentation from yesterday where I'll

14
00:00:42,989 --> 00:00:45,469
go into more details on how we perform

15
00:00:45,469 --> 00:00:48,270
firmware update through our opened using

16
00:00:48,270 --> 00:00:55,770
PDM okay so here's a recap so the P odm

17
00:00:55,770 --> 00:00:57,989
essentially it's not only way to do

18
00:00:57,989 --> 00:01:00,120
firmware update but essentially is a TM

19
00:01:00,120 --> 00:01:02,910
TM TM standard who stiffnesses stand

20
00:01:02,910 --> 00:01:05,010
away for post from BMC and device point

21
00:01:05,010 --> 00:01:07,170
of view it provides a standard protocol

22
00:01:07,170 --> 00:01:10,799
to do four more upgrades okay so we just

23
00:01:10,799 --> 00:01:13,860
it defines a protocol and then we can we

24
00:01:13,860 --> 00:01:18,090
post device and EMC you can follow so if

25
00:01:18,090 --> 00:01:20,909
we look at the P o DM essentially it's

26
00:01:20,909 --> 00:01:22,979
so on the bottom layer we have a

27
00:01:22,979 --> 00:01:25,350
physical layer which is your physical

28
00:01:25,350 --> 00:01:28,049
link and then you have in so in our case

29
00:01:28,049 --> 00:01:31,170
we run p OD m over and CSI so this is

30
00:01:31,170 --> 00:01:33,180
what this whole stat look like you have

31
00:01:33,180 --> 00:01:34,799
a you have a physical layer in the

32
00:01:34,799 --> 00:01:36,630
bottom and transport layer can be

33
00:01:36,630 --> 00:01:39,750
Ethernet in our trace and on top of it

34
00:01:39,750 --> 00:01:41,729
we have the NCS a control packet and

35
00:01:41,729 --> 00:01:44,340
then there's the p OD m base which

36
00:01:44,340 --> 00:01:46,560
defines how we carry a p OD m traffic

37
00:01:46,560 --> 00:01:49,079
over in CSI and then once we have that

38
00:01:49,079 --> 00:01:51,329
defined that you can run p OD m

39
00:01:51,329 --> 00:01:53,460
monitoring tom shaw opium update over N

40
00:01:53,460 --> 00:01:56,130
CSI okay and then P o TM can work for

41
00:01:56,130 --> 00:01:59,130
other medium such as M CTP but for our

42
00:01:59,130 --> 00:02:02,899
use case I'll just focus on CSI for now

43
00:02:02,899 --> 00:02:07,950
and for our purpose we have come in on

44
00:02:07,950 --> 00:02:09,568
utility and CSI uto

45
00:02:09,568 --> 00:02:11,250
so I introduced this a little bit

46
00:02:11,250 --> 00:02:14,069
yesterday where this allow user to send

47
00:02:14,069 --> 00:02:17,730
any NCS a comment or Pio DM comments to

48
00:02:17,730 --> 00:02:21,360
a device and we further extend this to

49
00:02:21,360 --> 00:02:22,230
4:00 p.m.

50
00:02:22,230 --> 00:02:25,349
update purpose so addition to send law

51
00:02:25,349 --> 00:02:28,019
comments this will recognize a pure DM

52
00:02:28,019 --> 00:02:30,090
package and you will parse the field iam

53
00:02:30,090 --> 00:02:31,590
package and then do all the

54
00:02:31,590 --> 00:02:33,599
orchestration and upgrade so this I'll

55
00:02:33,599 --> 00:02:43,019
show in in a few minutes okay so yep so

56
00:02:43,019 --> 00:02:44,790
here's more details on the Quixote I'm

57
00:02:44,790 --> 00:02:47,730
over in CSI so essentially in so we have

58
00:02:47,730 --> 00:02:50,400
a normal it's an airframe up to you

59
00:02:50,400 --> 00:02:52,680
so no more isn't a frame and a special

60
00:02:52,680 --> 00:02:55,079
type identifier to identify this as a

61
00:02:55,079 --> 00:02:58,890
CSI control packet so and then once in

62
00:02:58,890 --> 00:03:01,799
an CSI control packet there is a certain

63
00:03:01,799 --> 00:03:04,920
NCS and CSI comment which allow us to

64
00:03:04,920 --> 00:03:08,780
Terry Pio diem traffic so in this case

65
00:03:08,780 --> 00:03:12,480
the pure diem payload is limited by the

66
00:03:12,480 --> 00:03:15,360
ethernet frame size so the total in CSI

67
00:03:15,360 --> 00:03:18,690
can be 1500 bytes so in this case the

68
00:03:18,690 --> 00:03:20,389
PIO diem payload can be something like

69
00:03:20,389 --> 00:03:23,430
fourteen seventy six or basically it's

70
00:03:23,430 --> 00:03:25,829
limited by the net frame and if you run

71
00:03:25,829 --> 00:03:28,319
p odium over a DES medium and so the

72
00:03:28,319 --> 00:03:35,549
maximum size will be different okay so

73
00:03:35,549 --> 00:03:38,760
here's the this is the purity and

74
00:03:38,760 --> 00:03:40,380
firmware updated protocol defined as

75
00:03:40,380 --> 00:03:43,350
defined by DMT F so essentially for

76
00:03:43,350 --> 00:03:47,130
firmware update both BMC and device can

77
00:03:47,130 --> 00:03:50,190
send comment to each other okay so and

78
00:03:50,190 --> 00:03:52,829
both BMC and device need to keep track

79
00:03:52,829 --> 00:03:55,500
which state we are in so the so here I

80
00:03:55,500 --> 00:03:57,299
try to tell it hold a little bit to to

81
00:03:57,299 --> 00:03:58,440
help us watch through this

82
00:03:58,440 --> 00:04:03,150
so essentially even though both BMC and

83
00:04:03,150 --> 00:04:04,470
device can stand come in to each other

84
00:04:04,470 --> 00:04:06,989
with an ash tree for my own

85
00:04:06,989 --> 00:04:09,540
understanding I try to divide this into

86
00:04:09,540 --> 00:04:10,109
three parts

87
00:04:10,109 --> 00:04:11,730
alright the first part is the

88
00:04:11,730 --> 00:04:13,799
illustration so the first part is some

89
00:04:13,799 --> 00:04:16,139
BMC will send to comment to device

90
00:04:16,139 --> 00:04:18,478
informing device hey we are about to

91
00:04:18,478 --> 00:04:21,269
initiate update and then both sides are

92
00:04:21,269 --> 00:04:23,880
some handshake to this disturb how many

93
00:04:23,880 --> 00:04:25,440
firmware components are doing device

94
00:04:25,440 --> 00:04:27,510
what's the component size

95
00:04:27,510 --> 00:04:29,850
and then um what's dimensional buffer we

96
00:04:29,850 --> 00:04:31,650
can support so this is like this

97
00:04:31,650 --> 00:04:34,020
handshake happens as part of a BMC

98
00:04:34,020 --> 00:04:36,240
illustration once this is done

99
00:04:36,240 --> 00:04:39,240
BMC goes in to listen mode so now device

100
00:04:39,240 --> 00:04:41,130
takes over device will start requesting

101
00:04:41,130 --> 00:04:44,430
buffers one by one so so even though in

102
00:04:44,430 --> 00:04:46,410
theory you know both sides can come into

103
00:04:46,410 --> 00:04:49,020
each other at any given time normally to

104
00:04:49,020 --> 00:04:50,820
make forward progress during the first

105
00:04:50,820 --> 00:04:51,240
half

106
00:04:51,240 --> 00:04:53,490
BMC runs the show so BMC sends to

107
00:04:53,490 --> 00:04:55,680
comment to initiate transfer but once we

108
00:04:55,680 --> 00:04:57,960
agreed we are in a transfer mode BMC

109
00:04:57,960 --> 00:04:59,940
just sits back and lists and handles all

110
00:04:59,940 --> 00:05:02,640
the incoming VOD em comments okay so

111
00:05:02,640 --> 00:05:04,800
I'll show how how this goes so initially

112
00:05:04,800 --> 00:05:07,680
we start an idle state so the right so

113
00:05:07,680 --> 00:05:09,660
we're in idle state post BMC and device

114
00:05:09,660 --> 00:05:12,720
in idle state then PNC sends a comment

115
00:05:12,720 --> 00:05:14,790
to the device to initiate to request

116
00:05:14,790 --> 00:05:17,190
update oh by the way so in any of this

117
00:05:17,190 --> 00:05:18,870
state so I think this diagram looks more

118
00:05:18,870 --> 00:05:22,650
complicated because at any state both

119
00:05:22,650 --> 00:05:23,970
sides can decide where I wanted to

120
00:05:23,970 --> 00:05:26,100
install the upgrade process so this is

121
00:05:26,100 --> 00:05:28,110
very easy on the BMC side for BMC side

122
00:05:28,110 --> 00:05:29,490
to tensile upgrade we just send the

123
00:05:29,490 --> 00:05:32,490
tensor comment and you'll be done device

124
00:05:32,490 --> 00:05:34,800
can also wanted device rain also tensor

125
00:05:34,800 --> 00:05:36,690
the upgrade process anytime but for

126
00:05:36,690 --> 00:05:38,160
device to do it is essentially device

127
00:05:38,160 --> 00:05:39,990
just return error codes in any of the PM

128
00:05:39,990 --> 00:05:43,230
command the BMC instant then this then

129
00:05:43,230 --> 00:05:44,280
will go back to idle State

130
00:05:44,280 --> 00:05:46,500
so assuming there's no translation

131
00:05:46,500 --> 00:05:49,860
there's no abort abort then we start

132
00:05:49,860 --> 00:05:51,960
from idle PMC sentiment you request

133
00:05:51,960 --> 00:05:54,870
update now we are in that post device

134
00:05:54,870 --> 00:05:57,240
and BMC goes to a net state we are in

135
00:05:57,240 --> 00:05:59,940
the learned component States so every P

136
00:05:59,940 --> 00:06:02,730
odium package can contain what a pole

137
00:06:02,730 --> 00:06:04,770
form where components so let's say on

138
00:06:04,770 --> 00:06:06,090
your device if you have fired

139
00:06:06,090 --> 00:06:07,830
distant firmware components you can put

140
00:06:07,830 --> 00:06:09,900
them in a simpie of the in package in

141
00:06:09,900 --> 00:06:13,680
Apia diem header you will describe these

142
00:06:13,680 --> 00:06:15,870
component types so west way inland

143
00:06:15,870 --> 00:06:18,900
component States BMC send data to the

144
00:06:18,900 --> 00:06:21,780
device describing what's the component

145
00:06:21,780 --> 00:06:24,300
I'm about to update and what's the size

146
00:06:24,300 --> 00:06:27,210
of a component and so basically the

147
00:06:27,210 --> 00:06:30,510
provides the metadata to a device okay

148
00:06:30,510 --> 00:06:32,640
so once this is done we're in a ready

149
00:06:32,640 --> 00:06:36,870
transfer state then BMC sends another

150
00:06:36,870 --> 00:06:39,870
comment to say okay start start updating

151
00:06:39,870 --> 00:06:41,100
process so

152
00:06:41,100 --> 00:06:43,800
- this time notice how device does not

153
00:06:43,800 --> 00:06:46,290
send any time into BMC it's strictly

154
00:06:46,290 --> 00:06:48,600
one-way right BMC sentimental device and

155
00:06:48,600 --> 00:06:52,800
we at Wayne State and once we in a

156
00:06:52,800 --> 00:06:54,930
downlo state this is when p.m. this is

157
00:06:54,930 --> 00:06:57,480
when device states over so tentatively

158
00:06:57,480 --> 00:06:59,580
BMC to instill sentiment at this stage

159
00:06:59,580 --> 00:07:01,770
to say tensile transfer or there are

160
00:07:01,770 --> 00:07:04,620
some exceptions but most of time once we

161
00:07:04,620 --> 00:07:06,540
reach the stage BMC just listens BMC

162
00:07:06,540 --> 00:07:09,540
waits for the for the for the device

163
00:07:09,540 --> 00:07:12,360
comments so in this case we will will

164
00:07:12,360 --> 00:07:14,640
have already agreed on what's the chunk

165
00:07:14,640 --> 00:07:16,500
size per transfer so let's say you have

166
00:07:16,500 --> 00:07:18,660
a 10 megabyte from where you can decide

167
00:07:18,660 --> 00:07:21,990
what's the maximum buffer size that you

168
00:07:21,990 --> 00:07:24,840
will support so device will so in this

169
00:07:24,840 --> 00:07:27,540
case device sentiment to be QB MC to say

170
00:07:27,540 --> 00:07:31,440
hey give me you know 1k bite from offset

171
00:07:31,440 --> 00:07:35,070
0 so BMC response and then simian it's

172
00:07:35,070 --> 00:07:35,930
challenge

173
00:07:35,930 --> 00:07:38,550
Annette's junk and it's junk so right

174
00:07:38,550 --> 00:07:41,190
here device takes over and device try to

175
00:07:41,190 --> 00:07:44,700
dictate when it's ready to receive in

176
00:07:44,700 --> 00:07:48,000
its jump net started a transfer so BMC

177
00:07:48,000 --> 00:07:50,820
fits idle and anytime so actually here

178
00:07:50,820 --> 00:07:53,730
the device sends a comment to BMC

179
00:07:53,730 --> 00:07:57,240
requesting boasted of device requests a

180
00:07:57,240 --> 00:07:59,490
chunk transfer and specify both the

181
00:07:59,490 --> 00:08:02,790
buffer size and also the offset so there

182
00:08:02,790 --> 00:08:05,520
is actually no requirement for device to

183
00:08:05,520 --> 00:08:08,910
do this eventually so from what I see is

184
00:08:08,910 --> 00:08:11,970
useful on a BMC site to keep track of

185
00:08:11,970 --> 00:08:14,040
all the offset that device has requested

186
00:08:14,040 --> 00:08:16,740
because we have seen cases where you

187
00:08:16,740 --> 00:08:18,290
know out of a 10 meter by transfer

188
00:08:18,290 --> 00:08:21,750
device actually misses a few chunks so

189
00:08:21,750 --> 00:08:22,800
at the end of you you'll see a

190
00:08:22,800 --> 00:08:24,930
verification fail or signature check

191
00:08:24,930 --> 00:08:28,590
fail and if we p.m. see side wooden tube

192
00:08:28,590 --> 00:08:29,970
track of how many chunks has been

193
00:08:29,970 --> 00:08:32,309
requested by device and must offset it

194
00:08:32,309 --> 00:08:33,780
will be a much much easier to debug down

195
00:08:33,780 --> 00:08:36,150
the road okay so assuming there's no

196
00:08:36,150 --> 00:08:38,370
issues so device keep requesting

197
00:08:38,370 --> 00:08:41,820
additional chunks finally when device

198
00:08:41,820 --> 00:08:43,890
receives every the entire format

199
00:08:43,890 --> 00:08:46,560
component by the way BMC has no control

200
00:08:46,560 --> 00:08:48,510
over this so out of a 10 megabyte

201
00:08:48,510 --> 00:08:51,840
component devised him requests 3

202
00:08:51,840 --> 00:08:53,760
megabyte and device can decide to move

203
00:08:53,760 --> 00:08:54,920
to the net state

204
00:08:54,920 --> 00:08:57,290
exemple so it's up to the device to

205
00:08:57,290 --> 00:09:01,010
verify this pmc actually has no no way

206
00:09:01,010 --> 00:09:03,920
to initiate retry or or verify so which

207
00:09:03,920 --> 00:09:05,660
first device from where it knows what

208
00:09:05,660 --> 00:09:06,100
it's doing

209
00:09:06,100 --> 00:09:08,899
so okay device move to net state and

210
00:09:08,899 --> 00:09:11,060
then we are in a verify state in a

211
00:09:11,060 --> 00:09:12,649
verify state this is all done on a

212
00:09:12,649 --> 00:09:14,420
device site so device will verify the

213
00:09:14,420 --> 00:09:15,980
firmware download is correct

214
00:09:15,980 --> 00:09:18,769
it matches its expectation it has it

215
00:09:18,769 --> 00:09:20,779
passes the CRC it passes the signature

216
00:09:20,779 --> 00:09:24,350
check and then once that's done device

217
00:09:24,350 --> 00:09:26,630
was sent a comment to BMC let us the BMC

218
00:09:26,630 --> 00:09:29,360
known a state so a verification is grid

219
00:09:29,360 --> 00:09:32,810
we don't fill up apply state so apply

220
00:09:32,810 --> 00:09:34,339
actually doesn't mean activate

221
00:09:34,339 --> 00:09:38,240
so the apply I think so as in here

222
00:09:38,240 --> 00:09:40,010
you'll see two different states there's

223
00:09:40,010 --> 00:09:43,339
a apply and there's activation so apply

224
00:09:43,339 --> 00:09:45,980
is implementation independent it can be

225
00:09:45,980 --> 00:09:47,540
no up on the by site but essentially

226
00:09:47,540 --> 00:09:50,060
what this tells the BMC is this firmware

227
00:09:50,060 --> 00:09:51,920
has been verified and we are good to go

228
00:09:51,920 --> 00:09:54,050
but it doesn't mean it's it has it's

229
00:09:54,050 --> 00:09:58,040
been activated yet so I would alternate

230
00:09:58,040 --> 00:10:01,699
state applied complete then we go back

231
00:10:01,699 --> 00:10:03,829
to ready transfer state the reason we

232
00:10:03,829 --> 00:10:05,570
thought already transfer and that should

233
00:10:05,570 --> 00:10:08,329
not taught you activation just yet it's

234
00:10:08,329 --> 00:10:10,279
because the P Odeon package can contain

235
00:10:10,279 --> 00:10:12,410
multiple components so this is actually

236
00:10:12,410 --> 00:10:14,600
a bit loop where we can upgrade

237
00:10:14,600 --> 00:10:16,160
let's say multiple components

238
00:10:16,160 --> 00:10:19,279
continuously right so what we did is we

239
00:10:19,279 --> 00:10:21,170
went through a loop once we update one

240
00:10:21,170 --> 00:10:25,880
component and my current is mostly Odeon

241
00:10:25,880 --> 00:10:27,410
package I see contains one from wind

242
00:10:27,410 --> 00:10:29,779
component anyway but the spec does allow

243
00:10:29,779 --> 00:10:31,610
multiple components in the inner podium

244
00:10:31,610 --> 00:10:33,350
package so in theory you can keep going

245
00:10:33,350 --> 00:10:34,970
through this loop updating all the

246
00:10:34,970 --> 00:10:36,890
former components in a device and

247
00:10:36,890 --> 00:10:38,980
finally when old component has has been

248
00:10:38,980 --> 00:10:41,110
has been updated

249
00:10:41,110 --> 00:10:43,940
BMC sends a comment to a device to say

250
00:10:43,940 --> 00:10:46,519
activate so this is controlled by the

251
00:10:46,519 --> 00:10:49,100
BMC so from here so once we are in a

252
00:10:49,100 --> 00:10:51,709
ready transfer state BMC and decide if I

253
00:10:51,709 --> 00:10:53,209
want to update other components or not

254
00:10:53,209 --> 00:10:56,990
or BMC 10 can actually stop the process

255
00:10:56,990 --> 00:10:59,620
to say okay let's activate what we have

256
00:10:59,620 --> 00:11:03,040
so on activation also there are certain

257
00:11:03,040 --> 00:11:06,560
there's some options to activate so in

258
00:11:06,560 --> 00:11:08,240
most cases we want delay activation

259
00:11:08,240 --> 00:11:09,080
which means

260
00:11:09,080 --> 00:11:11,090
we send activate we send activate

261
00:11:11,090 --> 00:11:12,890
comment to the device but it doesn't

262
00:11:12,890 --> 00:11:14,360
mean from waste activate right away

263
00:11:14,360 --> 00:11:17,060
usually it gets activated I'm an ester

264
00:11:17,060 --> 00:11:19,550
power cycle for example but essentially

265
00:11:19,550 --> 00:11:20,840
we have a pending firmware that's ready

266
00:11:20,840 --> 00:11:25,790
to be to be activated and yep that's it

267
00:11:25,790 --> 00:11:28,700
so if if there's no error from

268
00:11:28,700 --> 00:11:30,320
activation comment then we know that new

269
00:11:30,320 --> 00:11:35,510
firmware is ready to go ok so so here

270
00:11:35,510 --> 00:11:38,630
are some numbers what I so we try this

271
00:11:38,630 --> 00:11:41,900
in a feed for the NIT firmware so

272
00:11:41,900 --> 00:11:43,970
actually was the new turn out so the

273
00:11:43,970 --> 00:11:45,740
time it takes for the 4 bar 4 megabytes

274
00:11:45,740 --> 00:11:48,800
about 2 minutes with the latest kernel

275
00:11:48,800 --> 00:11:52,640
so so this is Tod I'm over in CSI over

276
00:11:52,640 --> 00:11:54,200
net link so it takes about 2 minutes to

277
00:11:54,200 --> 00:11:56,510
do 1/4 megabyte and this is actually

278
00:11:56,510 --> 00:11:59,750
done through fight or by buffer / p o DM

279
00:11:59,750 --> 00:12:01,580
transfer so this number 2 I should go up

280
00:12:01,580 --> 00:12:02,960
because earlier I mentioned written

281
00:12:02,960 --> 00:12:05,210
support up to something like close to 15

282
00:12:05,210 --> 00:12:08,570
1500 byte per transfer right but this is

283
00:12:08,570 --> 00:12:10,850
up to your device firmware so when I was

284
00:12:10,850 --> 00:12:13,160
doing this experiment the device I use

285
00:12:13,160 --> 00:12:15,410
only supports up to fight will bytecode

286
00:12:15,410 --> 00:12:17,030
transfer so that's how I got this

287
00:12:17,030 --> 00:12:19,670
two-minute number so if we 10 did if we

288
00:12:19,670 --> 00:12:22,100
can use a higher buffer a larger buffer

289
00:12:22,100 --> 00:12:26,990
say 15 1k or even 1/2 K I see this

290
00:12:26,990 --> 00:12:30,080
number reduce even further so and I try

291
00:12:30,080 --> 00:12:31,580
both in pen and out auto paint

292
00:12:31,580 --> 00:12:34,900
performance are very similar

293
00:12:34,960 --> 00:12:41,890
yep and then here's so here is a demo of

294
00:12:41,890 --> 00:12:45,220
this in action

295
00:12:55,350 --> 00:12:58,480
yeah see I say you to I show yesterday

296
00:12:58,480 --> 00:13:01,120
where we can send that just any peon

297
00:13:01,120 --> 00:13:02,620
comments so I made sure the device is

298
00:13:02,620 --> 00:13:05,610
nine update mode right now

299
00:13:10,250 --> 00:13:12,750
so this is the one of the podium

300
00:13:12,750 --> 00:13:16,020
which I cp200 BMC earlier and yep that's

301
00:13:16,020 --> 00:13:16,290
it

302
00:13:16,290 --> 00:13:19,950
so transfer transfer transfer and and

303
00:13:19,950 --> 00:13:25,500
anytime I didn't throw it then so the

304
00:13:25,500 --> 00:13:27,990
first time I can sew it notice how it

305
00:13:27,990 --> 00:13:29,310
would be for success because I was in

306
00:13:29,310 --> 00:13:30,720
the middle of an update I cancelled it

307
00:13:30,720 --> 00:13:32,640
if I tried at the end it would tell me

308
00:13:32,640 --> 00:13:34,920
hey unite in update mode so um there's

309
00:13:34,920 --> 00:13:37,790
no cancel update

310
00:13:46,250 --> 00:13:48,720
and wouldn't let it one finish but

311
00:13:48,720 --> 00:13:50,009
essentially right now you didn't see how

312
00:13:50,009 --> 00:13:51,750
a device is just requesting buffer and

313
00:13:51,750 --> 00:13:53,579
then right now we're doing phyto bytes

314
00:13:53,579 --> 00:13:54,180
at a time

315
00:13:54,180 --> 00:13:57,300
and so this house in text it's about two

316
00:13:57,300 --> 00:14:02,610
minutes to finish but um yep so yeah

317
00:14:02,610 --> 00:14:05,519
that's it and any questions on the

318
00:14:05,519 --> 00:14:21,089
update process yeah so yeah so I think

319
00:14:21,089 --> 00:14:23,459
this is relatively new especially purium

320
00:14:23,459 --> 00:14:26,310
over in CSI so so far the vendors the

321
00:14:26,310 --> 00:14:27,779
network controller vendors I worked with

322
00:14:27,779 --> 00:14:30,870
they both support this so but it's new

323
00:14:30,870 --> 00:14:33,300
so it when they initially supported some

324
00:14:33,300 --> 00:14:35,339
integration on BMC site to make sure it

325
00:14:35,339 --> 00:14:38,220
like to 2d part but I do see support in

326
00:14:38,220 --> 00:14:39,870
the industry at least our vendors are

327
00:14:39,870 --> 00:14:41,939
what with sales support this so this is

328
00:14:41,939 --> 00:14:44,490
what we've seen a fleet for the UM to

329
00:14:44,490 --> 00:14:56,310
push our new need from where yeah that's

330
00:14:56,310 --> 00:14:57,720
point to point so the question is what

331
00:14:57,720 --> 00:14:59,819
happens after we hit apply and BFC hit

332
00:14:59,819 --> 00:15:01,529
tencel so actually that's what I'm doing

333
00:15:01,529 --> 00:15:04,199
right now so here because I'm updating a

334
00:15:04,199 --> 00:15:05,250
test from where so it should be almost

335
00:15:05,250 --> 00:15:08,730
done so if we do cancel as long as we

336
00:15:08,730 --> 00:15:10,589
don't activate the new format didn't hit

337
00:15:10,589 --> 00:15:12,089
effect so you can actually cancel

338
00:15:12,089 --> 00:15:14,300
anytime before we hit activation stage

339
00:15:14,300 --> 00:15:16,829
so that's what I have been here so um

340
00:15:16,829 --> 00:15:19,110
yeah in or the error message but so

341
00:15:19,110 --> 00:15:20,819
right now we are in applied complete so

342
00:15:20,819 --> 00:15:22,740
I haven't activated the firmware yet so

343
00:15:22,740 --> 00:15:24,449
it takes about two minutes to go through

344
00:15:24,449 --> 00:15:26,220
the whole process and we're in apply

345
00:15:26,220 --> 00:15:29,360
template stage then here I can do I

346
00:15:29,360 --> 00:15:32,430
can't end so any time and then the new

347
00:15:32,430 --> 00:15:39,689
form I want a to fetched okay alright

348
00:15:39,689 --> 00:15:41,280
thank you everybody

349
00:15:41,280 --> 00:15:41,560
you

350
00:15:41,560 --> 00:15:43,900
[Applause]

351
00:15:43,900 --> 00:15:52,970
[Music]

