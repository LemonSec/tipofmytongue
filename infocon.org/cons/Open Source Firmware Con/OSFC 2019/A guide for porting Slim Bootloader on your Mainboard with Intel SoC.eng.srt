1
00:00:03,190 --> 00:00:06,259
[Music]

2
00:00:06,950 --> 00:00:09,570
so we're very long about the slim

3
00:00:09,570 --> 00:00:12,450
bootloader today we had already three

4
00:00:12,450 --> 00:00:14,160
talks that contained the slim boot

5
00:00:14,160 --> 00:00:20,760
loader so pretty hot topic right like I

6
00:00:20,760 --> 00:00:21,869
said yesterday problem with

7
00:00:21,869 --> 00:00:23,640
documentation technical documentation is

8
00:00:23,640 --> 00:00:24,779
that it usually doesn't contain

9
00:00:24,779 --> 00:00:27,180
step-by-step guides and today we have

10
00:00:27,180 --> 00:00:30,119
another step by step guide for porting

11
00:00:30,119 --> 00:00:32,488
and a slim boot loader to actual

12
00:00:32,488 --> 00:00:39,750
hardware by these two folks so please

13
00:00:39,750 --> 00:00:41,370
give her a round of applause for yah

14
00:00:41,370 --> 00:00:44,450
when engines ooh

15
00:00:44,450 --> 00:00:48,870
all right so good morning and I promise

16
00:00:48,870 --> 00:00:50,550
you this is the last presentation about

17
00:00:50,550 --> 00:00:52,050
slim boot loader before you get sick of

18
00:00:52,050 --> 00:00:55,079
us all right so my name is again yeah if

19
00:00:55,079 --> 00:00:57,030
you didn't attend the first topic this

20
00:00:57,030 --> 00:00:58,980
morning my name is yawen and together

21
00:00:58,980 --> 00:01:01,320
with my colleague ginger we are going to

22
00:01:01,320 --> 00:01:03,629
share a practical guide of how do you

23
00:01:03,629 --> 00:01:06,060
put slim boot loader on your main board

24
00:01:06,060 --> 00:01:08,159
there's reference from an entire friends

25
00:01:08,159 --> 00:01:10,020
design so we came all the way from

26
00:01:10,020 --> 00:01:12,869
Malaysia and machetes are interesting

27
00:01:12,869 --> 00:01:14,220
talk with you and we are from the

28
00:01:14,220 --> 00:01:17,580
internet-of-things group in Intel so I'm

29
00:01:17,580 --> 00:01:19,380
gonna go straight to the methodology of

30
00:01:19,380 --> 00:01:22,409
the meanwhat protein steps right so in

31
00:01:22,409 --> 00:01:24,990
Intel every time we come up with a new

32
00:01:24,990 --> 00:01:27,540
silicon or sock we will develop the

33
00:01:27,540 --> 00:01:30,270
silicon initialization code the some

34
00:01:30,270 --> 00:01:32,880
will call the silicon reference code SRC

35
00:01:32,880 --> 00:01:35,340
and it can be in the form of source code

36
00:01:35,340 --> 00:01:38,310
and we provide to the independent BIOS

37
00:01:38,310 --> 00:01:41,670
vendors our ecosystem partners and also

38
00:01:41,670 --> 00:01:43,439
it can be in the form of the binary

39
00:01:43,439 --> 00:01:46,560
encapsulation known as the Intel FSP now

40
00:01:46,560 --> 00:01:48,869
additionally we will provide a firmware

41
00:01:48,869 --> 00:01:51,030
code to support for the Intel reference

42
00:01:51,030 --> 00:01:54,420
platform namely the RVP or the CRB

43
00:01:54,420 --> 00:01:56,939
that's from Intel with the same SOC so

44
00:01:56,939 --> 00:01:59,070
you got the code for the chip you got

45
00:01:59,070 --> 00:02:00,630
the code for the mainboard reference

46
00:02:00,630 --> 00:02:02,520
design and what does it mean to the

47
00:02:02,520 --> 00:02:05,070
customer so om generate will design a

48
00:02:05,070 --> 00:02:07,710
hardware platform based on our reference

49
00:02:07,710 --> 00:02:10,560
back from typically the CRB and make use

50
00:02:10,560 --> 00:02:12,390
of the reference limb bootloader

51
00:02:12,390 --> 00:02:13,620
implementation

52
00:02:13,620 --> 00:02:16,019
for your book format development so just

53
00:02:16,019 --> 00:02:20,910
three steps very easy so just now my

54
00:02:20,910 --> 00:02:23,640
collection he shed the boot stages of

55
00:02:23,640 --> 00:02:25,379
you know slim boot loader what does he

56
00:02:25,379 --> 00:02:27,030
do so it looks pretty similar to how

57
00:02:27,030 --> 00:02:29,730
Corbett does it so typically slim blood

58
00:02:29,730 --> 00:02:32,940
is separated into two parts one is the

59
00:02:32,940 --> 00:02:34,650
hardware and silicon initialization

60
00:02:34,650 --> 00:02:35,489
phase

61
00:02:35,489 --> 00:02:38,010
I wish further breakdown into stage 1a

62
00:02:38,010 --> 00:02:41,250
1b and of course - - and the second is

63
00:02:41,250 --> 00:02:45,110
the OS boot logic bar payload portion so

64
00:02:45,110 --> 00:02:47,819
from a very high level let me describe

65
00:02:47,819 --> 00:02:50,190
what does the and each different stage

66
00:02:50,190 --> 00:02:53,130
do so in stage one is where you come up

67
00:02:53,130 --> 00:02:55,680
from the reset vector of the CPU so it

68
00:02:55,680 --> 00:02:57,810
starts with some assembly code and it

69
00:02:57,810 --> 00:02:59,940
performs some basic initialization

70
00:02:59,940 --> 00:03:02,519
including setting up the car provide

71
00:03:02,519 --> 00:03:05,010
some debug output now in this stage is

72
00:03:05,010 --> 00:03:07,290
where we consume the first FSP binary

73
00:03:07,290 --> 00:03:10,410
blob of known as the fsvp before we hand

74
00:03:10,410 --> 00:03:12,480
over to the next stage which is stage 1

75
00:03:12,480 --> 00:03:15,299
B now in stage 1 B where code code is

76
00:03:15,299 --> 00:03:19,019
written in C we perform the continue the

77
00:03:19,019 --> 00:03:21,450
rest of the silicon and platform

78
00:03:21,450 --> 00:03:24,120
initialization namely very importantly

79
00:03:24,120 --> 00:03:26,250
is the memory initialization so this is

80
00:03:26,250 --> 00:03:28,380
where we get the RAM in it and it's

81
00:03:28,380 --> 00:03:31,260
usually in the form of F SPM where we

82
00:03:31,260 --> 00:03:33,180
have a platform we have hooks to call

83
00:03:33,180 --> 00:03:36,359
into F SP and this dish is also lost the

84
00:03:36,359 --> 00:03:38,880
configuration data now I'm gonna talk a

85
00:03:38,880 --> 00:03:40,470
little bit more on the configuration

86
00:03:40,470 --> 00:03:43,250
data and I do I do have a demo later

87
00:03:43,250 --> 00:03:46,500
before we pass to stage 2 stage 2 is

88
00:03:46,500 --> 00:03:49,049
where we have memory setup and ready to

89
00:03:49,049 --> 00:03:51,870
go so stage 2 we perform the rest of the

90
00:03:51,870 --> 00:03:54,480
silicon in it like f SP s we set up

91
00:03:54,480 --> 00:03:57,419
tables like a symbiosis API and we also

92
00:03:57,419 --> 00:04:00,389
perform the PCI enumeration now with

93
00:04:00,389 --> 00:04:03,329
stage 1 a B and of course stage 2 done

94
00:04:03,329 --> 00:04:05,639
the hard way and silicon initialization

95
00:04:05,639 --> 00:04:06,540
is complete

96
00:04:06,540 --> 00:04:09,900
and after that we'll pan over to the

97
00:04:09,900 --> 00:04:12,090
payload now in simple order we do

98
00:04:12,090 --> 00:04:15,630
provide a stuff like a efi shell are

99
00:04:15,630 --> 00:04:17,579
kind of like environment for you to do

100
00:04:17,579 --> 00:04:20,668
certain things but the payload can be

101
00:04:20,668 --> 00:04:23,070
configured now slim below de when you

102
00:04:23,070 --> 00:04:26,130
download from the repo it comes by

103
00:04:26,130 --> 00:04:27,270
default if you

104
00:04:27,270 --> 00:04:29,220
remember my first talk this morning it

105
00:04:29,220 --> 00:04:31,800
comes default with the OS loader and the

106
00:04:31,800 --> 00:04:33,599
second one is the firmware update

107
00:04:33,599 --> 00:04:35,639
payload now the payload what does it

108
00:04:35,639 --> 00:04:38,099
does is what does it do is basically the

109
00:04:38,099 --> 00:04:41,490
logic to boot to hand for the operating

110
00:04:41,490 --> 00:04:45,599
system in a media like SATA Hadees emmc

111
00:04:45,599 --> 00:04:48,930
and also then after that you're past

112
00:04:48,930 --> 00:04:51,270
control from then the payload will pass

113
00:04:51,270 --> 00:04:53,460
control and load the operating system so

114
00:04:53,460 --> 00:04:57,780
it's linear it is predictable and it

115
00:04:57,780 --> 00:05:01,699
consumes FSP all right

116
00:05:01,699 --> 00:05:05,610
so with that done let's get started to

117
00:05:05,610 --> 00:05:07,349
put a slim boot loader for your main

118
00:05:07,349 --> 00:05:07,710
board

119
00:05:07,710 --> 00:05:09,990
imagine you have a main board and now

120
00:05:09,990 --> 00:05:12,650
you're gonna put slim boot loader so in

121
00:05:12,650 --> 00:05:16,259
these are the main we saw like summarize

122
00:05:16,259 --> 00:05:17,520
everything from a very high-level

123
00:05:17,520 --> 00:05:19,860
perspective and of course you can go

124
00:05:19,860 --> 00:05:21,240
even deeper we can have that

125
00:05:21,240 --> 00:05:22,229
conversation later

126
00:05:22,229 --> 00:05:24,810
but from a high level these are just a

127
00:05:24,810 --> 00:05:26,639
few steps that you need to do to put

128
00:05:26,639 --> 00:05:28,979
slim below the on the main board now if

129
00:05:28,979 --> 00:05:32,759
you notice I color-coded this flow the

130
00:05:32,759 --> 00:05:37,050
boxes and in I'm not sure it's orange or

131
00:05:37,050 --> 00:05:39,810
yellow maybe it's orange yellow but for

132
00:05:39,810 --> 00:05:41,550
those two steps those are optional steps

133
00:05:41,550 --> 00:05:43,770
okay in case you need to perform more

134
00:05:43,770 --> 00:05:46,229
initialization which my colleague Jinju

135
00:05:46,229 --> 00:05:49,770
will explain in detail later so first

136
00:05:49,770 --> 00:05:51,930
things first if you want to build

137
00:05:51,930 --> 00:05:53,550
something you need to build up the

138
00:05:53,550 --> 00:05:55,919
system environment okay so your system

139
00:05:55,919 --> 00:05:58,229
to build slim boot loader we support

140
00:05:58,229 --> 00:06:00,569
building on both windows and also Linux

141
00:06:00,569 --> 00:06:04,590
now in our in Intel we have tried it

142
00:06:04,590 --> 00:06:06,569
with windows and the supported

143
00:06:06,569 --> 00:06:08,039
environment is you need to install

144
00:06:08,039 --> 00:06:12,210
Visual Studio 2015 or or other versions

145
00:06:12,210 --> 00:06:15,270
I wish require the x86 C or the C++

146
00:06:15,270 --> 00:06:17,400
compiler tools right and if you are

147
00:06:17,400 --> 00:06:20,130
building on Lina's like an a question

148
00:06:20,130 --> 00:06:22,560
this morning from a gentleman with we

149
00:06:22,560 --> 00:06:24,870
have tested on try to build it on Ubuntu

150
00:06:24,870 --> 00:06:27,029
Linux it is not all for long term user

151
00:06:27,029 --> 00:06:31,199
oh yes and also the compiler is GCC now

152
00:06:31,199 --> 00:06:33,240
the tools required to generate a slim

153
00:06:33,240 --> 00:06:36,990
bootloader binary Python is l2 generate

154
00:06:36,990 --> 00:06:39,990
a CPI images and SM to compile the

155
00:06:39,990 --> 00:06:41,160
assembly course

156
00:06:41,160 --> 00:06:47,550
lastly OpenSSL so you got the system set

157
00:06:47,550 --> 00:06:50,040
up now where do you get the sauce so my

158
00:06:50,040 --> 00:06:52,230
collection earlier or social where's the

159
00:06:52,230 --> 00:06:54,000
link to get the sauce and if you go to

160
00:06:54,000 --> 00:06:56,820
this I did have fish this is what you'll

161
00:06:56,820 --> 00:06:59,550
see I take a snapshot of this just last

162
00:06:59,550 --> 00:07:01,890
week I'm I suppose you'll be even more

163
00:07:01,890 --> 00:07:04,710
updated today so click on the clone or

164
00:07:04,710 --> 00:07:06,000
download that's where you'll copy the

165
00:07:06,000 --> 00:07:08,490
link use git clone and you get your

166
00:07:08,490 --> 00:07:12,570
sauce and it's very fast why this is

167
00:07:12,570 --> 00:07:14,760
what you get when you clone gee a slim

168
00:07:14,760 --> 00:07:16,530
below the sauce as you can see it's

169
00:07:16,530 --> 00:07:19,710
pretty simple that's what we are talking

170
00:07:19,710 --> 00:07:21,930
about this morning is small simple and

171
00:07:21,930 --> 00:07:24,930
are highly flexible as what is shared by

172
00:07:24,930 --> 00:07:27,090
my collection and earlier on the

173
00:07:27,090 --> 00:07:30,030
previous topic you can remove stuff and

174
00:07:30,030 --> 00:07:31,530
put his Lena's food and order so it's

175
00:07:31,530 --> 00:07:33,960
pretty simple and the way it is

176
00:07:33,960 --> 00:07:36,150
structured also sort of like mimics the

177
00:07:36,150 --> 00:07:37,650
boot flow as you can see that's the

178
00:07:37,650 --> 00:07:41,100
stage 1 a1 b2 in the below the core

179
00:07:41,100 --> 00:07:44,010
packages now just a very brief

180
00:07:44,010 --> 00:07:46,740
description on what they do first is the

181
00:07:46,740 --> 00:07:48,840
bootloader that py the bootloader the

182
00:07:48,840 --> 00:07:50,610
Python script is actually the script

183
00:07:50,610 --> 00:07:52,620
that you invoke to build and generate

184
00:07:52,620 --> 00:07:54,600
the slim bootloader binary that's the

185
00:07:54,600 --> 00:07:57,300
thing that you see here so based oasiz

186
00:07:57,300 --> 00:07:59,970
we leverage some of the tools from the

187
00:07:59,970 --> 00:08:02,040
edk to build so we leverage highly from

188
00:08:02,040 --> 00:08:03,830
them you don't recreate the same tools

189
00:08:03,830 --> 00:08:07,290
below the common packages is where we

190
00:08:07,290 --> 00:08:09,300
have libraries that is shared between

191
00:08:09,300 --> 00:08:11,280
the boot load slim below the core and

192
00:08:11,280 --> 00:08:14,280
the payload and below the car package is

193
00:08:14,280 --> 00:08:16,380
where we have the slim below the coffers

194
00:08:16,380 --> 00:08:19,590
and FSP to practice is where we have our

195
00:08:19,590 --> 00:08:23,130
files that is needed to die in the FSB

196
00:08:23,130 --> 00:08:24,990
binaries and you know provide the api's

197
00:08:24,990 --> 00:08:27,120
to go into that and the package is

198
00:08:27,120 --> 00:08:29,130
familiar if you are with a indicate to

199
00:08:29,130 --> 00:08:31,500
the payload package is where our OS

200
00:08:31,500 --> 00:08:33,360
loaded and firmware updates are and

201
00:08:33,360 --> 00:08:36,539
anything related to that now platform is

202
00:08:36,539 --> 00:08:39,419
where most of you will be doing your

203
00:08:39,419 --> 00:08:42,450
work in so in this stop because we're

204
00:08:42,450 --> 00:08:44,250
focusing on meaning but not silicon

205
00:08:44,250 --> 00:08:46,230
initialization because Intel does the

206
00:08:46,230 --> 00:08:48,180
silicon initialization and you work on

207
00:08:48,180 --> 00:08:49,980
the platform so you will be working

208
00:08:49,980 --> 00:08:52,200
mostly on the platform folder for those

209
00:08:52,200 --> 00:08:54,570
bot specific libraries now

210
00:08:54,570 --> 00:08:56,730
reason why's libraries because in the

211
00:08:56,730 --> 00:08:58,980
booth floor steam bootloader will have

212
00:08:58,980 --> 00:09:01,020
that predictable linear boot flow and it

213
00:09:01,020 --> 00:09:02,550
calls into the different perform

214
00:09:02,550 --> 00:09:04,650
packages in the form of libraries all

215
00:09:04,650 --> 00:09:04,980
right

216
00:09:04,980 --> 00:09:07,620
lastly silicon specific libraries is

217
00:09:07,620 --> 00:09:10,230
located in the silicon package folder oh

218
00:09:10,230 --> 00:09:12,390
that's a typo that should be silicon pkg

219
00:09:12,390 --> 00:09:15,060
so if you download this you're noticed

220
00:09:15,060 --> 00:09:17,490
that whatever intel has upstream into

221
00:09:17,490 --> 00:09:19,830
slim below the open source is really

222
00:09:19,830 --> 00:09:21,990
available today we have apple Olek

223
00:09:21,990 --> 00:09:25,590
bought coffee leg and a QEMU as well and

224
00:09:25,590 --> 00:09:27,360
of course as what rubbish air this

225
00:09:27,360 --> 00:09:29,490
morning we will continue to upstream

226
00:09:29,490 --> 00:09:31,770
more support for the newer SOC as time

227
00:09:31,770 --> 00:09:37,560
goes by so with that I'm gonna pass the

228
00:09:37,560 --> 00:09:39,390
time to ginger who will show you the

229
00:09:39,390 --> 00:09:43,730
step by step to put your main button

230
00:09:44,360 --> 00:09:47,940
okay thanks yeah one okay so after you

231
00:09:47,940 --> 00:09:49,500
clone the source code you get a source

232
00:09:49,500 --> 00:09:51,930
code you can post it to the location the

233
00:09:51,930 --> 00:09:54,480
bot convict pattern structure and this

234
00:09:54,480 --> 00:09:56,610
file provider bought specific static

235
00:09:56,610 --> 00:09:58,740
configuration for example the platform

236
00:09:58,740 --> 00:10:01,290
and feature configuration the image

237
00:10:01,290 --> 00:10:03,960
layer information and library instant

238
00:10:03,960 --> 00:10:09,450
and the version information okay and so

239
00:10:09,450 --> 00:10:11,520
this is an example content of the bot

240
00:10:11,520 --> 00:10:14,460
coming pattern structure and the upper

241
00:10:14,460 --> 00:10:16,500
part is the platform version comfort

242
00:10:16,500 --> 00:10:20,690
information and this is the part for the

243
00:10:20,690 --> 00:10:22,800
silicon-silicon feature configuration

244
00:10:22,800 --> 00:10:24,720
and the lower part is for the perform

245
00:10:24,720 --> 00:10:28,410
features and from what the previous my

246
00:10:28,410 --> 00:10:30,390
colleague mentioned present and you can

247
00:10:30,390 --> 00:10:33,390
enter Linux on the on the region there

248
00:10:33,390 --> 00:10:36,480
and for example you don't need measure

249
00:10:36,480 --> 00:10:38,760
but you can see it set the measure book

250
00:10:38,760 --> 00:10:43,680
value to zero okay next you have to

251
00:10:43,680 --> 00:10:46,560
assign a perform ID okay so each bot

252
00:10:46,560 --> 00:10:49,410
need to happen unique ID and during the

253
00:10:49,410 --> 00:10:52,080
bot 14 this ID is specified in the

254
00:10:52,080 --> 00:10:54,240
configuration Delta file for the bot

255
00:10:54,240 --> 00:10:56,910
okay so during the boot process slim

256
00:10:56,910 --> 00:10:58,950
boot loader will detect the platform ID

257
00:10:58,950 --> 00:11:01,410
and select a configuration the tougher

258
00:11:01,410 --> 00:11:04,380
and apply it to a bot so

259
00:11:04,380 --> 00:11:07,290
slimmer owners support up to 32 platform

260
00:11:07,290 --> 00:11:07,880
ID

261
00:11:07,880 --> 00:11:10,720
but the ID 0 is restocked for the base

262
00:11:10,720 --> 00:11:14,990
reference configuration and single slim

263
00:11:14,990 --> 00:11:17,920
border binary can support up to 31 body

264
00:11:17,920 --> 00:11:24,079
30 trips ok so next you have to create a

265
00:11:24,079 --> 00:11:27,470
platform configuration data so slim boot

266
00:11:27,470 --> 00:11:30,350
loader comes with graphic base configure

267
00:11:30,350 --> 00:11:32,630
data tools to let you to modify the

268
00:11:32,630 --> 00:11:36,190
settings such as memory GPIO PCIe pod

269
00:11:36,190 --> 00:11:39,440
from a base configuration so by

270
00:11:39,440 --> 00:11:41,930
proceeding to the path you can assess

271
00:11:41,930 --> 00:11:44,120
the confi editor pattern structure and

272
00:11:44,120 --> 00:11:46,730
use the tool to load an existing refers

273
00:11:46,730 --> 00:11:49,519
bot data file and you update the

274
00:11:49,519 --> 00:11:52,579
platform ID for the bot and you can make

275
00:11:52,579 --> 00:11:55,009
any necessary changes to reflect for

276
00:11:55,009 --> 00:11:57,670
your member main board configuration and

277
00:11:57,670 --> 00:12:00,980
save it to the bots new board data file

278
00:12:00,980 --> 00:12:03,319
and lastly you have to include the new

279
00:12:03,319 --> 00:12:05,540
data file entry in a bot config pattern

280
00:12:05,540 --> 00:12:10,310
structure ok so now yeah one is going to

281
00:12:10,310 --> 00:12:15,380
do the demo for the confi editor too so

282
00:12:15,380 --> 00:12:18,949
as you can see from the previous like is

283
00:12:18,949 --> 00:12:21,380
very worthy I can understand but nothing

284
00:12:21,380 --> 00:12:23,920
beats a demo right so I'm gonna show a

285
00:12:23,920 --> 00:12:30,589
demo okay so the configure config editor

286
00:12:30,589 --> 00:12:32,240
tool is located in the boot of the car

287
00:12:32,240 --> 00:12:34,880
package in another subfolder called tool

288
00:12:34,880 --> 00:12:37,279
so typically you just use Python to

289
00:12:37,279 --> 00:12:40,610
invoke it oh it's in this screen so let

290
00:12:40,610 --> 00:12:44,720
me pull it over ready my cursor go there

291
00:12:44,720 --> 00:12:47,180
it is so evil launch this let me

292
00:12:47,180 --> 00:12:50,209
maximize this so the first thing you do

293
00:12:50,209 --> 00:12:54,439
is to load an open config DSC file so in

294
00:12:54,439 --> 00:12:56,540
this example we were using coffee like

295
00:12:56,540 --> 00:12:58,639
right so let me go to the coffee lick

296
00:12:58,639 --> 00:13:08,410
folder platform coffee like

297
00:13:08,410 --> 00:13:12,800
config data there you go so this will

298
00:13:12,800 --> 00:13:15,199
load the basic configuration that's

299
00:13:15,199 --> 00:13:17,360
available on the coffee liquor reference

300
00:13:17,360 --> 00:13:19,630
platform as you can see there's a lot of

301
00:13:19,630 --> 00:13:21,190
not a lot

302
00:13:21,190 --> 00:13:22,839
their categories of the settings that

303
00:13:22,839 --> 00:13:25,240
you can go to so the next step that we

304
00:13:25,240 --> 00:13:28,360
want to do remember are we showed you

305
00:13:28,360 --> 00:13:30,269
that we have already at support for the

306
00:13:30,269 --> 00:13:33,430
Aeon extreme bot so let's just load its

307
00:13:33,430 --> 00:13:35,709
configuration here so a lot config

308
00:13:35,709 --> 00:13:37,959
changes from Delta file do you want to

309
00:13:37,959 --> 00:13:40,449
continue yes I'm very sure so there we

310
00:13:40,449 --> 00:13:44,680
go extremist right here and you'll apply

311
00:13:44,680 --> 00:13:47,079
those config Delta on top of this big

312
00:13:47,079 --> 00:13:50,829
configuration so as you can see if you

313
00:13:50,829 --> 00:13:53,019
click on if you maximize it and the

314
00:13:53,019 --> 00:13:54,759
platform's you can already start

315
00:13:54,759 --> 00:13:56,680
configure a lot of things like the boot

316
00:13:56,680 --> 00:13:59,170
in Vice device instance now remember

317
00:13:59,170 --> 00:14:01,569
about bot ID so you need to assign us

318
00:14:01,569 --> 00:14:04,389
unique bot ID for your config data files

319
00:14:04,389 --> 00:14:07,389
so that a slim below the both boots you

320
00:14:07,389 --> 00:14:09,550
will know which configuration that you

321
00:14:09,550 --> 00:14:11,560
needs to load and apply the settings to

322
00:14:11,560 --> 00:14:14,920
alright so points in this case are for

323
00:14:14,920 --> 00:14:18,430
the extreme we have a Sangha but ID 16

324
00:14:18,430 --> 00:14:20,560
to it now other than that you can also

325
00:14:20,560 --> 00:14:23,230
give a name for your platform name which

326
00:14:23,230 --> 00:14:26,529
is used and the device type have a

327
00:14:26,529 --> 00:14:28,089
partition so you can see there's

328
00:14:28,089 --> 00:14:29,889
actually quite a lot of settings in just

329
00:14:29,889 --> 00:14:32,740
platform alone and a CPI you can choose

330
00:14:32,740 --> 00:14:34,959
to disable enable now even though you

331
00:14:34,959 --> 00:14:37,750
can also disable some of the features in

332
00:14:37,750 --> 00:14:40,000
the bot config dot Python structure you

333
00:14:40,000 --> 00:14:42,160
can also do it in this config editor

334
00:14:42,160 --> 00:14:44,589
tool by enabling and disabling stuff so

335
00:14:44,589 --> 00:14:47,139
a lot of this stuff is we abstract all

336
00:14:47,139 --> 00:14:49,600
the source code you know like in my

337
00:14:49,600 --> 00:14:51,819
experience as a BIOS engineer when we

338
00:14:51,819 --> 00:14:53,920
try to find certain settings we do

339
00:14:53,920 --> 00:14:55,720
something called source code archeology

340
00:14:55,720 --> 00:14:58,029
we need to dig in whereas that setting

341
00:14:58,029 --> 00:14:59,620
is this correct fault does this file

342
00:14:59,620 --> 00:15:01,990
even build so we you know abstract all

343
00:15:01,990 --> 00:15:03,790
that complexity and put it in a very

344
00:15:03,790 --> 00:15:06,309
nice graphical user interface for the

345
00:15:06,309 --> 00:15:10,300
modern engineer like me so okay let's go

346
00:15:10,300 --> 00:15:13,240
to memory as you can see for the extreme

347
00:15:13,240 --> 00:15:16,089
but it is a with a what you call it a

348
00:15:16,089 --> 00:15:18,040
memory down design so that you don't

349
00:15:18,040 --> 00:15:20,259
actually have to plug in deep so where

350
00:15:20,259 --> 00:15:23,019
does the SPD configuration came from you

351
00:15:23,019 --> 00:15:24,970
can even specify it here so what we did

352
00:15:24,970 --> 00:15:27,519
is that we read the SPD from the BIOS

353
00:15:27,519 --> 00:15:29,860
and we've noticed part if we ask any

354
00:15:29,860 --> 00:15:32,439
memory parameters that you want to

355
00:15:32,439 --> 00:15:34,370
change and pass into

356
00:15:34,370 --> 00:15:37,640
p.m. you can do it right here alright so

357
00:15:37,640 --> 00:15:42,740
let's go to silicon so for coffee like

358
00:15:42,740 --> 00:15:44,300
reference platform we do have an

359
00:15:44,300 --> 00:15:46,130
embedded controller on what we can

360
00:15:46,130 --> 00:15:47,750
choose to disable it it's disabled by

361
00:15:47,750 --> 00:15:50,000
default here and also some other

362
00:15:50,000 --> 00:15:51,800
features like processor debug features

363
00:15:51,800 --> 00:15:55,250
legacy 0 io port and so on now some of

364
00:15:55,250 --> 00:15:58,610
you may have some PCIe configuration so

365
00:15:58,610 --> 00:16:00,710
this is why it's available on coffee

366
00:16:00,710 --> 00:16:03,800
like let's take for example RP it so

367
00:16:03,800 --> 00:16:05,380
these are all the PCI Express

368
00:16:05,380 --> 00:16:07,850
configuration that you can just click on

369
00:16:07,850 --> 00:16:09,529
the pull down menu choose whatever you

370
00:16:09,529 --> 00:16:10,070
want

371
00:16:10,070 --> 00:16:12,380
alright so let me see what other than

372
00:16:12,380 --> 00:16:15,650
Isis are things that we can look at okay

373
00:16:15,650 --> 00:16:20,180
let's collapse this payload right and

374
00:16:20,180 --> 00:16:23,000
also graphics so graphics like a gob

375
00:16:23,000 --> 00:16:25,130
driver there are certain parameters that

376
00:16:25,130 --> 00:16:26,839
you can pass in to the size of the

377
00:16:26,839 --> 00:16:28,520
pre-allocate the memory the aperture

378
00:16:28,520 --> 00:16:31,430
whether you want to enable the EDP or

379
00:16:31,430 --> 00:16:34,070
HTTP and things like that and not of

380
00:16:34,070 --> 00:16:36,130
course there's general settings and

381
00:16:36,130 --> 00:16:40,790
everybody's favorite GPIO so I we had a

382
00:16:40,790 --> 00:16:42,380
very interesting conversation yesterday

383
00:16:42,380 --> 00:16:44,390
during the break that you know for an

384
00:16:44,390 --> 00:16:45,550
Intel SLC

385
00:16:45,550 --> 00:16:48,529
GPIO initialization and configuration

386
00:16:48,529 --> 00:16:51,230
used to be very simple process some base

387
00:16:51,230 --> 00:16:53,529
offset plus some other offset

388
00:16:53,529 --> 00:16:56,000
enable/disable you're done but today

389
00:16:56,000 --> 00:16:59,600
they are correct me if I'm wrong for the

390
00:16:59,600 --> 00:17:02,720
width for each pad and sometimes and

391
00:17:02,720 --> 00:17:04,189
most of the time we don't even know what

392
00:17:04,189 --> 00:17:06,380
the D word to so it's very confusing

393
00:17:06,380 --> 00:17:09,369
nowadays but with this config editor to

394
00:17:09,369 --> 00:17:12,679
it is now very easy to just configure

395
00:17:12,679 --> 00:17:15,619
your GPIO and if you have the Intel EDS

396
00:17:15,619 --> 00:17:17,689
specification to know ok what does it is

397
00:17:17,689 --> 00:17:19,910
what does this pins native function do

398
00:17:19,910 --> 00:17:21,920
and all that is all reflected here all

399
00:17:21,920 --> 00:17:25,099
right so Bay in mine up until now we

400
00:17:25,099 --> 00:17:26,569
haven't looked at a single line of

401
00:17:26,569 --> 00:17:28,339
source book alright

402
00:17:28,339 --> 00:17:31,490
so OS boot options we have three boot

403
00:17:31,490 --> 00:17:34,370
options each either from usb saara emmc

404
00:17:34,370 --> 00:17:36,620
in a particular order that you can swap

405
00:17:36,620 --> 00:17:39,679
around and lastly security for those who

406
00:17:39,679 --> 00:17:41,360
have to believe me in coffee like we

407
00:17:41,360 --> 00:17:42,700
have the feature of the platform

408
00:17:42,700 --> 00:17:46,850
security discover if and yeah PSD and

409
00:17:46,850 --> 00:17:48,290
also software

410
00:17:48,290 --> 00:17:51,530
expansion so as you can see you know let

411
00:17:51,530 --> 00:17:53,240
me let me do an exercise let's say my

412
00:17:53,240 --> 00:17:57,230
favorite GPIO I want GPIO a zero I want

413
00:17:57,230 --> 00:18:01,880
to skip it and Direction is an output

414
00:18:01,880 --> 00:18:05,270
when it's high okay so these are all the

415
00:18:05,270 --> 00:18:07,910
changes I need to make for my coffee

416
00:18:07,910 --> 00:18:10,640
like on coffee like but that's based on

417
00:18:10,640 --> 00:18:12,200
an Intel reference design so after I

418
00:18:12,200 --> 00:18:14,540
make those changes I will just save the

419
00:18:14,540 --> 00:18:17,540
conflict to a new Delta file so keep it

420
00:18:17,540 --> 00:18:19,700
within the same folder maybe I'll just

421
00:18:19,700 --> 00:18:23,720
call it where I sleep okay so this is

422
00:18:23,720 --> 00:18:28,300
called up square I'll just rename this

423
00:18:28,330 --> 00:18:33,380
OSF SIBO alright save it okay so once

424
00:18:33,380 --> 00:18:35,870
you're safe remember in the steps that

425
00:18:35,870 --> 00:18:40,220
ginger outlined earlier we need to let

426
00:18:40,220 --> 00:18:48,200
me go to this convicted of sorry so I'm

427
00:18:48,200 --> 00:18:50,210
just gonna load the bot config dot py

428
00:18:50,210 --> 00:18:58,269
file okay so this is

429
00:18:58,269 --> 00:19:00,399
think of py file as a what Jinju showed

430
00:19:00,399 --> 00:19:05,320
you earlier oh so these are some of the

431
00:19:05,320 --> 00:19:07,330
settings that you can actually read so

432
00:19:07,330 --> 00:19:09,369
the first step is just review this foul

433
00:19:09,369 --> 00:19:11,589
if that's anything you need to change or

434
00:19:11,589 --> 00:19:14,169
tweet you can do it here so I've got my

435
00:19:14,169 --> 00:19:16,839
new ball right so where do I put it

436
00:19:16,839 --> 00:19:19,119
where do I tell symbol order that you

437
00:19:19,119 --> 00:19:22,359
know please include my Delta house so

438
00:19:22,359 --> 00:19:24,009
where do you go oh

439
00:19:24,009 --> 00:19:34,559
upstair summer they're just like little

440
00:19:35,339 --> 00:19:42,929
it's hard to see this you know yeah oh

441
00:19:42,929 --> 00:19:44,139
okay

442
00:19:44,139 --> 00:19:46,839
the area alright so as you can see by

443
00:19:46,839 --> 00:19:48,609
default it comes to already with the

444
00:19:48,609 --> 00:19:51,849
tree are three or four Delta 4 so this

445
00:19:51,849 --> 00:19:55,799
is where you add your new generated file

446
00:19:55,799 --> 00:19:59,440
config data and so and so far whatever

447
00:19:59,440 --> 00:20:01,570
the new file that you just saw safe all

448
00:20:01,570 --> 00:20:04,419
right so that's basically all you need

449
00:20:04,419 --> 00:20:07,029
to do for your configuration and you

450
00:20:07,029 --> 00:20:09,249
know editing of all the settings for

451
00:20:09,249 --> 00:20:11,739
your platform and silicon so and let's

452
00:20:11,739 --> 00:20:15,969
go back to the presentation and not

453
00:20:15,969 --> 00:20:20,349
ginger we'll take it over again okay so

454
00:20:20,349 --> 00:20:23,979
ideally the configuration can be done by

455
00:20:23,979 --> 00:20:26,709
using the config editor tool but most of

456
00:20:26,709 --> 00:20:28,839
but these are cases where the bot

457
00:20:28,839 --> 00:20:32,019
specific body is needed so you can done

458
00:20:32,019 --> 00:20:34,679
it in the vod's pipe support library and

459
00:20:34,679 --> 00:20:37,899
for example you can for example the

460
00:20:37,899 --> 00:20:40,659
serial console the backhoe you need to

461
00:20:40,659 --> 00:20:41,950
configure to match the hardware

462
00:20:41,950 --> 00:20:44,529
combination and you can do that by using

463
00:20:44,529 --> 00:20:47,619
an external legacy you add device so for

464
00:20:47,619 --> 00:20:49,690
example the super i/o chip and in my

465
00:20:49,690 --> 00:20:52,599
embedded controller or you can use the

466
00:20:52,599 --> 00:20:56,700
internet associate my or base you add

467
00:20:56,700 --> 00:20:57,909
okay

468
00:20:57,909 --> 00:21:01,719
so you can modify the bot specific ACPI

469
00:21:01,719 --> 00:21:03,909
table if needed and this step is the

470
00:21:03,909 --> 00:21:07,119
optional step so first you can modify

471
00:21:07,119 --> 00:21:10,059
the dsdt if required and for any

472
00:21:10,059 --> 00:21:11,720
additional

473
00:21:11,720 --> 00:21:14,030
you can create and paste them within the

474
00:21:14,030 --> 00:21:17,570
a CPI table folder and lastly update a

475
00:21:17,570 --> 00:21:20,090
CPI taper and file to include a new

476
00:21:20,090 --> 00:21:25,370
entry mmm okay all right

477
00:21:25,370 --> 00:21:28,370
the slim below the support by the very

478
00:21:28,370 --> 00:21:30,559
support is loaded that can boot with the

479
00:21:30,559 --> 00:21:34,309
Linux F multi board for example the

480
00:21:34,309 --> 00:21:39,350
Android and hypervisor and PE image so

481
00:21:39,350 --> 00:21:42,470
if you want to boot with UEFI payload so

482
00:21:42,470 --> 00:21:44,600
you firstly you have to clone the

483
00:21:44,600 --> 00:21:46,789
payload from the link the github channel

484
00:21:46,789 --> 00:21:49,850
called indicator and bear it and in the

485
00:21:49,850 --> 00:21:52,549
minimal data file we can change the pelo

486
00:21:52,549 --> 00:21:56,539
ID to UEFI and lastly you build it with

487
00:21:56,539 --> 00:22:02,150
the comments data okay so lastly to

488
00:22:02,150 --> 00:22:04,640
build stitch and a refresh process so

489
00:22:04,640 --> 00:22:06,799
firstly you build the slim boot loader

490
00:22:06,799 --> 00:22:09,590
with the command builder built and your

491
00:22:09,590 --> 00:22:11,659
platform name so in the built binary

492
00:22:11,659 --> 00:22:14,059
will be stored in the output folder and

493
00:22:14,059 --> 00:22:16,730
together with a slim below the binary

494
00:22:16,730 --> 00:22:18,620
file which is required for the stitching

495
00:22:18,620 --> 00:22:21,890
process okay so for stitching firstly

496
00:22:21,890 --> 00:22:23,809
you have to get a full if we do mesh

497
00:22:23,809 --> 00:22:27,020
from either you can get it from Intel or

498
00:22:27,020 --> 00:22:28,880
you can read it from your body that

499
00:22:28,880 --> 00:22:31,370
content the additional former ingredient

500
00:22:31,370 --> 00:22:34,250
and you can stitch it with the command

501
00:22:34,250 --> 00:22:37,940
sit here and lastly you can fresh the

502
00:22:37,940 --> 00:22:40,400
generator if we mesh to the docket one

503
00:22:40,400 --> 00:22:44,419
tag to your target bot and the basic of

504
00:22:44,419 --> 00:22:51,700
basic 14 for your member is done okay so

505
00:22:51,700 --> 00:22:54,559
yeah that's basically all you need to do

506
00:22:54,559 --> 00:22:57,049
to get started to taught a slim

507
00:22:57,049 --> 00:23:00,140
bootloader on your design that's based

508
00:23:00,140 --> 00:23:02,750
on an Intel reference you've got a in

509
00:23:02,750 --> 00:23:04,490
terrence but you get the schematics from

510
00:23:04,490 --> 00:23:06,200
my entire reference our representative

511
00:23:06,200 --> 00:23:07,909
design you make your own hardware

512
00:23:07,909 --> 00:23:10,039
changes now all you need to do is to

513
00:23:10,039 --> 00:23:12,470
make mirror that same changes into

514
00:23:12,470 --> 00:23:14,510
symbol order by using the config editor

515
00:23:14,510 --> 00:23:17,150
to save it and generate it and then

516
00:23:17,150 --> 00:23:19,130
lastly species and of course don't

517
00:23:19,130 --> 00:23:21,289
forget to flash it now intel we do

518
00:23:21,289 --> 00:23:23,539
commit to keep our dog project

519
00:23:23,539 --> 00:23:25,070
documentation

520
00:23:25,070 --> 00:23:28,070
up-to-date and you know as detail as

521
00:23:28,070 --> 00:23:31,460
possible we receive feedback that the

522
00:23:31,460 --> 00:23:35,269
documentation is a very good but it is

523
00:23:35,269 --> 00:23:37,159
our responsibility to keep this

524
00:23:37,159 --> 00:23:37,940
documentation

525
00:23:37,940 --> 00:23:41,269
updated as possible and because this is

526
00:23:41,269 --> 00:23:44,149
a community project we do encourage all

527
00:23:44,149 --> 00:23:46,549
of you to try it out or at least go

528
00:23:46,549 --> 00:23:48,139
through the documentation and you know

529
00:23:48,139 --> 00:23:50,090
start posting questions and giving us

530
00:23:50,090 --> 00:23:51,590
feedback on how can we make it better

531
00:23:51,590 --> 00:23:54,350
there may be use cases that we haven't

532
00:23:54,350 --> 00:23:55,940
thought of yet like for example what

533
00:23:55,940 --> 00:23:58,000
Robby mentioned about slim bootloader

534
00:23:58,000 --> 00:24:01,370
reading UEFI variables are from the ufi

535
00:24:01,370 --> 00:24:03,379
payload so that is actually very good

536
00:24:03,379 --> 00:24:05,360
feedback that we take it and internalize

537
00:24:05,360 --> 00:24:07,100
it and then we implement that feature

538
00:24:07,100 --> 00:24:09,049
into slim bootloader which is available

539
00:24:09,049 --> 00:24:13,039
today so I guess with that that ends our

540
00:24:13,039 --> 00:24:16,970
presentations slightly earlier Thank You

541
00:24:16,970 --> 00:24:18,470
Sharon and ginger please have another

542
00:24:18,470 --> 00:24:25,700
order floss feel free to ask us any

543
00:24:25,700 --> 00:24:28,190
questions and uh you know we'll be glad

544
00:24:28,190 --> 00:24:31,549
to answer you and you know I didn't do

545
00:24:31,549 --> 00:24:33,649
this earlier in my earlier topic but the

546
00:24:33,649 --> 00:24:35,899
creators of slim below are here Ravi and

547
00:24:35,899 --> 00:24:38,149
Maurice so feel free to engage in

548
00:24:38,149 --> 00:24:40,850
meaningful discussion with them if them

549
00:24:40,850 --> 00:24:43,820
have time please we have about 12

550
00:24:43,820 --> 00:24:45,379
minutes for question right so that

551
00:24:45,379 --> 00:24:51,080
should work so again feel free to go to

552
00:24:51,080 --> 00:24:53,299
the microphones and just actually ask

553
00:24:53,299 --> 00:24:55,700
your question Messam not available

554
00:24:55,700 --> 00:25:00,980
please sit Messam prefix sorry I don't

555
00:25:00,980 --> 00:25:02,779
get it that's what I get when I try and

556
00:25:02,779 --> 00:25:08,029
builder what does mesm in my yes M mas

557
00:25:08,029 --> 00:25:11,110
I'm this assembler right okay yeah

558
00:25:11,110 --> 00:25:13,519
assembler to pump out assembly language

559
00:25:13,519 --> 00:25:17,720
we don't use missile and it SM listen

560
00:25:17,720 --> 00:25:20,840
it's an infinity okay I need to get that

561
00:25:20,840 --> 00:25:31,370
I can't use GCC we've you use nezam on

562
00:25:31,370 --> 00:25:35,080
on Linux okay

563
00:25:39,330 --> 00:25:42,640
just to confirm my understanding OpenSSL

564
00:25:42,640 --> 00:25:46,330
is used just for creating signatures but

565
00:25:46,330 --> 00:25:49,870
during inside your actual binary you're

566
00:25:49,870 --> 00:25:52,750
not including open SSL you're using an

567
00:25:52,750 --> 00:25:55,450
Intel crypto library that's much slimmer

568
00:25:55,450 --> 00:25:57,430
part of that is because you don't do sir

569
00:25:57,430 --> 00:25:59,320
chaining it's part of the verification

570
00:25:59,320 --> 00:26:01,180
process that is correct which is fine

571
00:26:01,180 --> 00:26:02,830
for some scenarios so yeah okay so

572
00:26:02,830 --> 00:26:04,680
wanted to mention that open SSL is a

573
00:26:04,680 --> 00:26:08,710
non-trivial sized piece of how we do

574
00:26:08,710 --> 00:26:10,810
things in yeah if I typically read a

575
00:26:10,810 --> 00:26:17,140
defendant yes death thestral all right

576
00:26:17,140 --> 00:26:20,530
seems like a pretty easy curl it's still

577
00:26:20,530 --> 00:26:22,810
some time for questions so we were

578
00:26:22,810 --> 00:26:28,660
hanging around there okay but okay it

579
00:26:28,660 --> 00:26:30,010
seems to be it for now please have

580
00:26:30,010 --> 00:26:31,540
another round of applause thank you

581
00:26:31,540 --> 00:26:36,480
thank you thank you thank you very much

582
00:26:36,810 --> 00:26:38,429
[Music]

583
00:26:38,429 --> 00:26:40,490
you

