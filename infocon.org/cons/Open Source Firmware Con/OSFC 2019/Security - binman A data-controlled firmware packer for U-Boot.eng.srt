1
00:00:03,190 --> 00:00:06,259
[Music]

2
00:00:07,010 --> 00:00:09,960
hello everyone thank you for making the

3
00:00:09,960 --> 00:00:12,570
trek all the way over here took me a

4
00:00:12,570 --> 00:00:18,449
long time so I have to say I was

5
00:00:18,449 --> 00:00:20,250
thinking this was a lightning talk

6
00:00:20,250 --> 00:00:21,750
somehow I got a little bit of confused

7
00:00:21,750 --> 00:00:23,189
but I quickly added some more material

8
00:00:23,189 --> 00:00:24,029
so don't worry

9
00:00:24,029 --> 00:00:31,710
I won't I won't finish too early okay

10
00:00:31,710 --> 00:00:33,000
this is what I'm going to talk about

11
00:00:33,000 --> 00:00:37,290
today the main thing I'm going to do

12
00:00:37,290 --> 00:00:39,059
initially is just explain why feeling

13
00:00:39,059 --> 00:00:40,980
we're packing as a thing and not just

14
00:00:40,980 --> 00:00:43,950
something incredibly trivial talk about

15
00:00:43,950 --> 00:00:45,960
the advantages of doing of defining the

16
00:00:45,960 --> 00:00:48,000
film where image in terms of data rather

17
00:00:48,000 --> 00:00:50,370
than code and then I'm going to spend

18
00:00:50,370 --> 00:00:52,050
most of the time looking at how been man

19
00:00:52,050 --> 00:00:54,570
works and you know how you haven't

20
00:00:54,570 --> 00:00:57,030
degraded at runtime and that sort of

21
00:00:57,030 --> 00:01:00,719
thing and we'll have some time for

22
00:01:00,719 --> 00:01:04,610
questions if I don't take too long so

23
00:01:04,610 --> 00:01:07,799
first thing I wanted to ask you because

24
00:01:07,799 --> 00:01:11,729
you are all expert it's amazing being at

25
00:01:11,729 --> 00:01:12,270
a conference

26
00:01:12,270 --> 00:01:14,280
everyone does firmware it's just the

27
00:01:14,280 --> 00:01:17,850
strangest thing but it's great what

28
00:01:17,850 --> 00:01:20,189
language should I have used for my

29
00:01:20,189 --> 00:01:22,880
firmware Packer

30
00:01:23,210 --> 00:01:35,790
Python fish you can't be done yeah is

31
00:01:35,790 --> 00:01:37,799
anyone as Ron's not here I never

32
00:01:37,799 --> 00:01:43,740
frequency okay yes I use Python okay so

33
00:01:43,740 --> 00:01:45,390
I think I've got away with that I know

34
00:01:45,390 --> 00:01:46,890
that it's not the bleeding edge of

35
00:01:46,890 --> 00:01:53,540
everything but it does the job so

36
00:01:53,540 --> 00:01:55,829
traditional approach to building

37
00:01:55,829 --> 00:01:58,259
firmware is basically you know some some

38
00:01:58,259 --> 00:01:59,820
time ago shall we say when things were

39
00:01:59,820 --> 00:02:02,210
simpler it's just you just type make and

40
00:02:02,210 --> 00:02:06,210
outcomes this image and in this case the

41
00:02:06,210 --> 00:02:09,508
images this file here you boot burn it's

42
00:02:09,508 --> 00:02:12,690
some you know 300k or so and it's you

43
00:02:12,690 --> 00:02:13,770
put it in your flash

44
00:02:13,770 --> 00:02:15,860
you boot your board and and you're done

45
00:02:15,860 --> 00:02:17,730
and maybe there's an environment

46
00:02:17,730 --> 00:02:20,280
somewhere but that's all set up within

47
00:02:20,280 --> 00:02:23,180
your boot and no one really cares

48
00:02:23,180 --> 00:02:26,760
so let's print that very simple but

49
00:02:26,760 --> 00:02:30,270
things have changed a lot and in the

50
00:02:30,270 --> 00:02:34,230
last lesson shall we say decade we now

51
00:02:34,230 --> 00:02:38,160
have we now have SPL which is a

52
00:02:38,160 --> 00:02:39,840
secondary program loader for loading

53
00:02:39,840 --> 00:02:42,900
underneath its RAM and loads you boot

54
00:02:42,900 --> 00:02:45,660
we even have TPL which is when you get

55
00:02:45,660 --> 00:02:48,240
so desperate that you you need something

56
00:02:48,240 --> 00:02:50,250
even smaller there is a chip I think

57
00:02:50,250 --> 00:02:54,120
with with a 64-bit instruction set and

58
00:02:54,120 --> 00:02:56,880
some tiny amount of this room trying to

59
00:02:56,880 --> 00:03:00,060
mean what it is and there are there are

60
00:03:00,060 --> 00:03:01,590
other reasons why you might want to use

61
00:03:01,590 --> 00:03:06,210
TP a little cover later people so you

62
00:03:06,210 --> 00:03:07,620
end up with more things than your image

63
00:03:07,620 --> 00:03:10,260
and and also you've got things like

64
00:03:10,260 --> 00:03:13,710
untrusted firmware which was not found

65
00:03:13,710 --> 00:03:16,320
on this case but we still need it to be

66
00:03:16,320 --> 00:03:18,900
able to boot in some boards have an FPGA

67
00:03:18,900 --> 00:03:22,560
image so it's getting more complicated

68
00:03:22,560 --> 00:03:24,390
as is just for basic stuff just to be

69
00:03:24,390 --> 00:03:28,500
able to boot with x86 things are even

70
00:03:28,500 --> 00:03:33,870
more interesting because there are these

71
00:03:33,870 --> 00:03:36,360
binary blobs called

72
00:03:36,360 --> 00:03:38,520
part of the firmware Support Package if

73
00:03:38,520 --> 00:03:41,040
SP and they have to go somewhere they

74
00:03:41,040 --> 00:03:42,690
have to be accessed at runtime and that

75
00:03:42,690 --> 00:03:45,540
kind of thing we also have 16-bit reset

76
00:03:45,540 --> 00:03:48,060
code and entry code and in this

77
00:03:48,060 --> 00:03:49,530
particular case we're running we're

78
00:03:49,530 --> 00:03:52,380
trying to run a 64 bit new boot but we

79
00:03:52,380 --> 00:03:54,990
need to get into 64-bit mode so we have

80
00:03:54,990 --> 00:03:57,720
SPL is a 32 bit I don't know that's the

81
00:03:57,720 --> 00:04:00,870
way that's the way it works so you know

82
00:04:00,870 --> 00:04:01,680
you end up with all these different

83
00:04:01,680 --> 00:04:06,360
pieces and it's exciting sex is getting

84
00:04:06,360 --> 00:04:09,690
more interesting because in the last

85
00:04:09,690 --> 00:04:12,450
several years there's a thing called the

86
00:04:12,450 --> 00:04:16,649
I won't pronounce it a prime pronounced

87
00:04:16,649 --> 00:04:18,329
at the way the Intel guy did was it if

88
00:04:18,329 --> 00:04:22,108
we okay instead of Wi-Fi was it

89
00:04:22,108 --> 00:04:24,570
deliberately backwards for Wi-Fi I don't

90
00:04:24,570 --> 00:04:26,100
know maybe not

91
00:04:26,100 --> 00:04:27,920
anyway this

92
00:04:27,920 --> 00:04:30,270
essentially a firm we package that as

93
00:04:30,270 --> 00:04:31,500
real as I understand it by little

94
00:04:31,500 --> 00:04:34,680
microcontroller and the in the CPU or

95
00:04:34,680 --> 00:04:37,290
the SOC and it contains a lot of

96
00:04:37,290 --> 00:04:40,020
interesting stuff the most interesting

97
00:04:40,020 --> 00:04:41,910
thing is there's TPL image which is the

98
00:04:41,910 --> 00:04:45,150
air to boot basically so once you get

99
00:04:45,150 --> 00:04:47,010
out of there you within unti SPL in your

100
00:04:47,010 --> 00:04:48,360
interview boot and you still need these

101
00:04:48,360 --> 00:04:51,390
things here and there's a solder script

102
00:04:51,390 --> 00:04:52,980
a thing which you have to have which

103
00:04:52,980 --> 00:04:55,710
tells you tells the everything else on

104
00:04:55,710 --> 00:04:59,250
the system where stuff is and if you've

105
00:04:59,250 --> 00:05:01,590
got verified a be boot then you have

106
00:05:01,590 --> 00:05:03,570
multiple of these things for example you

107
00:05:03,570 --> 00:05:05,010
might have an A in a B and you have to

108
00:05:05,010 --> 00:05:07,110
update the a and the B you might have a

109
00:05:07,110 --> 00:05:08,970
recovery one and so on and everything

110
00:05:08,970 --> 00:05:11,400
gets completely out of hand so that's

111
00:05:11,400 --> 00:05:12,690
why I think you need a film where Packer

112
00:05:12,690 --> 00:05:15,660
and I just snap shot of this photo I

113
00:05:15,660 --> 00:05:17,430
hope nobody minds but yesterday there

114
00:05:17,430 --> 00:05:20,880
was there was a talk about about the arm

115
00:05:20,880 --> 00:05:22,470
picture and the secure world and all

116
00:05:22,470 --> 00:05:24,240
that sort of thing and again we're

117
00:05:24,240 --> 00:05:25,110
getting things are getting more

118
00:05:25,110 --> 00:05:28,740
complicated on that side with the with

119
00:05:28,740 --> 00:05:31,340
the different images that are required

120
00:05:31,340 --> 00:05:34,830
I guess one point I should make is that

121
00:05:34,830 --> 00:05:36,390
I am talking here about firmware I'm not

122
00:05:36,390 --> 00:05:38,460
interested in reading what's on the on

123
00:05:38,460 --> 00:05:41,750
the boot disc on you that sort of thing

124
00:05:41,970 --> 00:05:44,030
[Music]

125
00:05:44,030 --> 00:05:48,419
okay so why pack firmware why not just

126
00:05:48,419 --> 00:05:51,210
build your firmware and be done to me

127
00:05:51,210 --> 00:05:52,590
packing as a separate thing from

128
00:05:52,590 --> 00:05:55,230
building it's quite a different

129
00:05:55,230 --> 00:05:57,450
operation your building is getting all

130
00:05:57,450 --> 00:05:58,650
the bits and pieces running your

131
00:05:58,650 --> 00:06:00,360
compiler your linker and producing these

132
00:06:00,360 --> 00:06:02,850
binaries and so on packing is what you

133
00:06:02,850 --> 00:06:04,470
do to assemble them and put them in the

134
00:06:04,470 --> 00:06:07,260
right place and I think it works well to

135
00:06:07,260 --> 00:06:08,880
actually separate those two operations

136
00:06:08,880 --> 00:06:12,210
and think of them as separate things for

137
00:06:12,210 --> 00:06:14,310
a number of reasons sometimes you might

138
00:06:14,310 --> 00:06:15,990
want to stuff some configuration data

139
00:06:15,990 --> 00:06:18,510
into those binaries and that's not known

140
00:06:18,510 --> 00:06:20,220
until the end or might want to be

141
00:06:20,220 --> 00:06:23,580
configured right at the end packing is

142
00:06:23,580 --> 00:06:25,530
much faster if you do it in one go if

143
00:06:25,530 --> 00:06:28,169
you continually add one file to an image

144
00:06:28,169 --> 00:06:29,640
you're constantly reading the thing and

145
00:06:29,640 --> 00:06:31,380
adding one will file writing it back out

146
00:06:31,380 --> 00:06:34,590
you know it's very slow but the other

147
00:06:34,590 --> 00:06:36,210
nice thing and the thing that I found

148
00:06:36,210 --> 00:06:38,580
seems to work best is that we can keep

149
00:06:38,580 --> 00:06:41,370
the image description in one place

150
00:06:41,370 --> 00:06:43,260
so here's that here's a bit of a look at

151
00:06:43,260 --> 00:06:44,760
an existing approach and when I say this

152
00:06:44,760 --> 00:06:46,470
is perhaps the you're too old now but

153
00:06:46,470 --> 00:06:50,430
this is how it used to put package

154
00:06:50,430 --> 00:06:52,320
36 binaries and we can see we're

155
00:06:52,320 --> 00:06:54,120
building up all these flags we're

156
00:06:54,120 --> 00:06:57,320
running this IFD tool thing and and then

157
00:06:57,320 --> 00:06:59,040
and and off we go

158
00:06:59,040 --> 00:07:02,880
and in fourth son EXI which is an ARM

159
00:07:02,880 --> 00:07:03,419
chip

160
00:07:03,419 --> 00:07:06,030
we're simply capping this is PL to the

161
00:07:06,030 --> 00:07:08,130
new boot and with with the cat command

162
00:07:08,130 --> 00:07:10,350
and that's good enough you know to make

163
00:07:10,350 --> 00:07:13,320
this thing boot but in either case

164
00:07:13,320 --> 00:07:15,150
they're both sort of if you like ad hoc

165
00:07:15,150 --> 00:07:18,090
there it's pretty hard to look at this

166
00:07:18,090 --> 00:07:19,800
and see we're what's the structure of

167
00:07:19,800 --> 00:07:22,050
the image I can't really figure out

168
00:07:22,050 --> 00:07:23,880
where everything is in the image because

169
00:07:23,880 --> 00:07:25,410
everything's behind these config flags

170
00:07:25,410 --> 00:07:28,560
which is great but it's it's a little

171
00:07:28,560 --> 00:07:31,979
bit it's a little bit painful because

172
00:07:31,979 --> 00:07:34,289
for example while I can move things

173
00:07:34,289 --> 00:07:36,060
around I can't figure out where the

174
00:07:36,060 --> 00:07:38,639
things overlap I can't figure out what

175
00:07:38,639 --> 00:07:40,979
if I can't detect a binary getting too

176
00:07:40,979 --> 00:07:42,930
big for the space that's assumed and so

177
00:07:42,930 --> 00:07:46,440
forth and so on and also I'm not sure

178
00:07:46,440 --> 00:07:48,210
how to access the position of something

179
00:07:48,210 --> 00:07:52,830
at runtime very easily so describing the

180
00:07:52,830 --> 00:07:55,430
image and data can solve these problems

181
00:07:55,430 --> 00:07:58,289
so this is how Ben man works it's pretty

182
00:07:58,289 --> 00:08:02,010
simple we have on the left a description

183
00:08:02,010 --> 00:08:05,160
of the of the image and on the right the

184
00:08:05,160 --> 00:08:09,240
actual image that you get and I'd just

185
00:08:09,240 --> 00:08:11,430
say it's wonderful to have sea-level T

186
00:08:11,430 --> 00:08:14,190
so very very I live in a very high place

187
00:08:14,190 --> 00:08:16,110
and mile high and the T doesn't the

188
00:08:16,110 --> 00:08:18,360
water doesn't boil there so the T

189
00:08:18,360 --> 00:08:23,220
definitely tastes better here so here we

190
00:08:23,220 --> 00:08:24,870
have an image we an SPL we have some

191
00:08:24,870 --> 00:08:27,770
padding because we told it that SPL

192
00:08:27,770 --> 00:08:30,300
sorry that you boot starts at City Tech

193
00:08:30,300 --> 00:08:32,880
a little padding there and then as the

194
00:08:32,880 --> 00:08:35,070
you Buddha Minister more padding up to

195
00:08:35,070 --> 00:08:37,679
the total size of our image and we've

196
00:08:37,679 --> 00:08:39,299
told it the paid byte that we want so

197
00:08:39,299 --> 00:08:40,708
that's a pretty simple image is about as

198
00:08:40,708 --> 00:08:42,599
simple as you can get it's pretty much

199
00:08:42,599 --> 00:08:46,010
equivalent to cat except for the padding

200
00:08:46,010 --> 00:08:48,420
which you would sometimes you might have

201
00:08:48,420 --> 00:08:50,730
seen people do with DD you know they D

202
00:08:50,730 --> 00:08:52,410
do things and they mess around that way

203
00:08:52,410 --> 00:08:55,740
so I don't have to use DD here

204
00:08:55,740 --> 00:08:58,149
so now I'm just going to dig into a bit

205
00:08:58,149 --> 00:09:01,809
more detail about how it works so then

206
00:09:01,809 --> 00:09:03,910
man generates one or more images when

207
00:09:03,910 --> 00:09:05,889
run and the reason it supports multiple

208
00:09:05,889 --> 00:09:07,889
images is because you might want to have

209
00:09:07,889 --> 00:09:11,319
for example a debug builder and a

210
00:09:11,319 --> 00:09:13,119
release builder sort of thing you know

211
00:09:13,119 --> 00:09:14,410
your your build system might produce a

212
00:09:14,410 --> 00:09:16,329
lot of different things and you can put

213
00:09:16,329 --> 00:09:18,249
them together in two different ways you

214
00:09:18,249 --> 00:09:20,800
might want to develop a build where for

215
00:09:20,800 --> 00:09:22,119
example nothing's signed and

216
00:09:22,119 --> 00:09:23,559
everything's unlocked and that kind of

217
00:09:23,559 --> 00:09:28,449
thing the images each image contains a

218
00:09:28,449 --> 00:09:30,550
number of entries and Anitra is really

219
00:09:30,550 --> 00:09:32,439
just a way of saying what's in this

220
00:09:32,439 --> 00:09:32,740
thing

221
00:09:32,740 --> 00:09:35,410
is it a binary of some sort is that some

222
00:09:35,410 --> 00:09:38,230
data is it some padding or whatever and

223
00:09:38,230 --> 00:09:40,329
the entries are packed one after the

224
00:09:40,329 --> 00:09:41,949
other an order and they're not allowed

225
00:09:41,949 --> 00:09:47,459
to overlap so that seems pretty simple

226
00:09:47,790 --> 00:09:50,230
for the entries as you saw we can

227
00:09:50,230 --> 00:09:52,059
specify various properties and here are

228
00:09:52,059 --> 00:09:54,459
some of the common ones that but we have

229
00:09:54,459 --> 00:09:58,389
there's a mic okay yep we can tell it

230
00:09:58,389 --> 00:10:01,269
we're where the entry should be within

231
00:10:01,269 --> 00:10:04,410
its parent what offset by to focus just

232
00:10:04,410 --> 00:10:07,389
immediately above immediately past the

233
00:10:07,389 --> 00:10:09,699
one before we can tell up the size of

234
00:10:09,699 --> 00:10:11,619
the entry the alignment the alignment of

235
00:10:11,619 --> 00:10:14,470
the size and things like that we can ask

236
00:10:14,470 --> 00:10:16,149
an entry to expand to fill available

237
00:10:16,149 --> 00:10:18,069
space so there won't be any padding

238
00:10:18,069 --> 00:10:20,799
after we can ask for an intro to be

239
00:10:20,799 --> 00:10:22,720
compressed so they're just a safe space

240
00:10:22,720 --> 00:10:24,459
which obviously means at runtime you

241
00:10:24,459 --> 00:10:27,639
have to decompress it so those are some

242
00:10:27,639 --> 00:10:29,470
of the things that you can that you can

243
00:10:29,470 --> 00:10:33,089
specify and images can be hierarchical

244
00:10:33,089 --> 00:10:38,559
so entries can contain other entries and

245
00:10:38,559 --> 00:10:42,339
in fact an image is an entry it's

246
00:10:42,339 --> 00:10:45,429
actually a section because the section

247
00:10:45,429 --> 00:10:47,290
is a simple container containing

248
00:10:47,290 --> 00:10:53,230
multiple images so here you can see a

249
00:10:53,230 --> 00:10:54,910
couple of examples of hierarchical

250
00:10:54,910 --> 00:10:56,499
images here's a simple one with a

251
00:10:56,499 --> 00:11:00,220
section that has a read-only section so

252
00:11:00,220 --> 00:11:02,170
it has this prefix and just as you boot

253
00:11:02,170 --> 00:11:04,029
in it same with the second one they're

254
00:11:04,029 --> 00:11:08,199
actually identical and that's that's a

255
00:11:08,199 --> 00:11:09,150
hierarchical and

256
00:11:09,150 --> 00:11:13,279
and over here you have the fwee which is

257
00:11:13,279 --> 00:11:18,300
basically got a TPL in it and the 16-bit

258
00:11:18,300 --> 00:11:21,150
startup in reset code both of these are

259
00:11:21,150 --> 00:11:28,770
containers the this one is is actually

260
00:11:28,770 --> 00:11:30,800
eight you know in a particular format

261
00:11:30,800 --> 00:11:35,850
that this format here and in fact this

262
00:11:35,850 --> 00:11:42,300
one contains a section within it anyway

263
00:11:42,300 --> 00:11:44,550
so it supports hierarchal images and it

264
00:11:44,550 --> 00:11:46,529
has some interesting features for x86 I

265
00:11:46,529 --> 00:11:48,450
have to sorry to say this is the most

266
00:11:48,450 --> 00:11:50,760
interesting for a firmware Pecha it's

267
00:11:50,760 --> 00:11:53,160
most interesting environmentally there's

268
00:11:53,160 --> 00:11:58,140
a lot more going on so here we say we

269
00:11:58,140 --> 00:12:00,000
want our offsets to be described in

270
00:12:00,000 --> 00:12:03,120
terms of the ROM the ROM address so this

271
00:12:03,120 --> 00:12:05,940
is what this property does and we also

272
00:12:05,940 --> 00:12:09,690
had some strange things like the int or

273
00:12:09,690 --> 00:12:11,610
descriptor tells you where some of these

274
00:12:11,610 --> 00:12:13,110
other things are for example it tells

275
00:12:13,110 --> 00:12:15,240
you the images at this position so

276
00:12:15,240 --> 00:12:16,800
there's no need for you to say it and in

277
00:12:16,800 --> 00:12:18,480
fact if you tried to say the position of

278
00:12:18,480 --> 00:12:21,570
that it might conflict so interviews can

279
00:12:21,570 --> 00:12:23,779
see at the positions of other entries

280
00:12:23,779 --> 00:12:26,070
and there's also things that are at

281
00:12:26,070 --> 00:12:28,080
known location so descriptors at the

282
00:12:28,080 --> 00:12:30,120
start and been men that will they at

283
00:12:30,120 --> 00:12:32,520
least the entry type they do descriptor

284
00:12:32,520 --> 00:12:46,529
knows that okay so then man knows the

285
00:12:46,529 --> 00:12:48,630
location of of binaries or at least a

286
00:12:48,630 --> 00:12:50,610
nosy a file name and you can give it an

287
00:12:50,610 --> 00:12:53,610
input - Ettore to look in so here we're

288
00:12:53,610 --> 00:12:56,250
saying go and find all the files in this

289
00:12:56,250 --> 00:12:58,740
directory and and stuff them in in here

290
00:12:58,740 --> 00:13:01,050
and here we're saying please go and find

291
00:13:01,050 --> 00:13:04,020
this be l1 bin file from our build

292
00:13:04,020 --> 00:13:08,959
system so you can do things like their

293
00:13:11,510 --> 00:13:15,450
entries can process stuff so they don't

294
00:13:15,450 --> 00:13:16,800
just think they don't have to be just

295
00:13:16,800 --> 00:13:19,770
dumb binaries as you saw in the previous

296
00:13:19,770 --> 00:13:22,570
slide this one actually produces

297
00:13:22,570 --> 00:13:24,640
goes and looks for these files and it

298
00:13:24,640 --> 00:13:29,590
stuffs them into the into the image into

299
00:13:29,590 --> 00:13:33,310
the image so for this to work what is

300
00:13:33,310 --> 00:13:34,660
actually happening here is we've created

301
00:13:34,660 --> 00:13:37,630
these two new entries sort of sub

302
00:13:37,630 --> 00:13:41,020
entries if you like which gives the

303
00:13:41,020 --> 00:13:42,760
information about what it what files it

304
00:13:42,760 --> 00:13:44,530
actually found and it put them there and

305
00:13:44,530 --> 00:13:46,480
so on so that's effectively what's

306
00:13:46,480 --> 00:13:49,090
happening although I didn't type this

307
00:13:49,090 --> 00:13:51,850
stuff but man itself internally is doing

308
00:13:51,850 --> 00:13:54,310
this in a few if you output the map

309
00:13:54,310 --> 00:13:56,380
you'll this is what you'll see and in

310
00:13:56,380 --> 00:13:58,210
fact you'll see which the position of

311
00:13:58,210 --> 00:14:05,890
each thing as well so yeah you can also

312
00:14:05,890 --> 00:14:08,170
do things like sign or hash an entry and

313
00:14:08,170 --> 00:14:09,820
put that information somewhere which is

314
00:14:09,820 --> 00:14:12,550
good for verified boot and data

315
00:14:12,550 --> 00:14:15,570
integrity and that sort of thing so

316
00:14:15,570 --> 00:14:17,470
getting a little bit more into the

317
00:14:17,470 --> 00:14:21,790
detail of bin men it's split up into a

318
00:14:21,790 --> 00:14:25,510
number of different steps and these

319
00:14:25,510 --> 00:14:29,110
steps have particularly particular

320
00:14:29,110 --> 00:14:30,820
purposes and each of them is effectively

321
00:14:30,820 --> 00:14:34,660
a call into the entry subclass so the

322
00:14:34,660 --> 00:14:38,290
entry entry class base class so first

323
00:14:38,290 --> 00:14:40,450
one is getting the contents of the

324
00:14:40,450 --> 00:14:42,190
entries we go and read all the binary

325
00:14:42,190 --> 00:14:45,430
data and we bring it into bin man we

326
00:14:45,430 --> 00:14:46,600
didn't try and figure out where it

327
00:14:46,600 --> 00:14:46,990
should go

328
00:14:46,990 --> 00:14:49,600
whether any of them want other ones to

329
00:14:49,600 --> 00:14:50,980
go somewhere else that kind of thing

330
00:14:50,980 --> 00:14:54,220
with the skiddy trees offsets size we

331
00:14:54,220 --> 00:14:55,870
then run the actual Packer

332
00:14:55,870 --> 00:14:57,400
which is very very simple it's just a

333
00:14:57,400 --> 00:14:59,950
for loop it says what the first one at

334
00:14:59,950 --> 00:15:01,330
zero the next one goes immediately

335
00:15:01,330 --> 00:15:03,370
afterwards and so on and so forth

336
00:15:03,370 --> 00:15:05,590
unless there's actually offsets given or

337
00:15:05,590 --> 00:15:07,420
in other information like alignment that

338
00:15:07,420 --> 00:15:08,770
we have to take a count off but that's

339
00:15:08,770 --> 00:15:10,240
basically what happens they just goes

340
00:15:10,240 --> 00:15:13,270
goes down an order we then check the

341
00:15:13,270 --> 00:15:14,950
size and check that the oh nothing

342
00:15:14,950 --> 00:15:16,510
overlaps there's no problems and that

343
00:15:16,510 --> 00:15:18,760
kind of thing if there are then we're

344
00:15:18,760 --> 00:15:20,410
going to have to blow up then complain

345
00:15:20,410 --> 00:15:24,240
we rented a space or something like that

346
00:15:24,540 --> 00:15:27,580
after that we set the image position now

347
00:15:27,580 --> 00:15:29,080
that we know exactly where everything is

348
00:15:29,080 --> 00:15:30,850
we can tell you the absolute image

349
00:15:30,850 --> 00:15:32,470
position of everything regardless of

350
00:15:32,470 --> 00:15:35,740
hierarchy so we can actually write that

351
00:15:35,740 --> 00:15:36,279
image because

352
00:15:36,279 --> 00:15:41,829
information into the into the image then

353
00:15:41,829 --> 00:15:43,839
we go and calculate some properties that

354
00:15:43,839 --> 00:15:47,019
are relevant to that for example we

355
00:15:47,019 --> 00:15:48,579
might want to put the image position

356
00:15:48,579 --> 00:15:51,060
actually in the in the image description

357
00:15:51,060 --> 00:15:54,399
bill to explain there later and finally

358
00:15:54,399 --> 00:15:56,920
we can go and update the contents if we

359
00:15:56,920 --> 00:15:59,290
need to do to base some updates to the

360
00:15:59,290 --> 00:16:02,949
contents for example we want to you know

361
00:16:02,949 --> 00:16:05,439
go go through and change some of the

362
00:16:05,439 --> 00:16:07,749
values of an elephant a file or

363
00:16:07,749 --> 00:16:09,069
something like that we can go and do

364
00:16:09,069 --> 00:16:11,860
that then and finally we write some

365
00:16:11,860 --> 00:16:14,350
symbols out which is where we can look

366
00:16:14,350 --> 00:16:19,240
sorry which is where we can we can make

367
00:16:19,240 --> 00:16:21,430
things available at run time and I'll

368
00:16:21,430 --> 00:16:27,910
show you that later as well so first

369
00:16:27,910 --> 00:16:30,819
thing is finding entries at run time the

370
00:16:30,819 --> 00:16:33,370
way this works typically is you you

371
00:16:33,370 --> 00:16:37,240
update the device tree with the men

372
00:16:37,240 --> 00:16:39,160
basically writes these data this this

373
00:16:39,160 --> 00:16:40,899
data into the device tree and you can go

374
00:16:40,899 --> 00:16:42,519
and read it it gives you the full

375
00:16:42,519 --> 00:16:44,709
hierarchy and it's it's these things

376
00:16:44,709 --> 00:16:46,600
like image position and uncompressed

377
00:16:46,600 --> 00:16:48,850
size and that kind of thing so that

378
00:16:48,850 --> 00:16:50,259
gives you all the information that been

379
00:16:50,259 --> 00:16:52,480
man was able to figure out you didn't

380
00:16:52,480 --> 00:16:55,029
have to type all that in yourself you

381
00:16:55,029 --> 00:16:56,860
know these values are actually what they

382
00:16:56,860 --> 00:16:58,600
ended up being whereas previously you

383
00:16:58,600 --> 00:17:00,279
might have specified them at all or they

384
00:17:00,279 --> 00:17:01,449
might have just been alignment and

385
00:17:01,449 --> 00:17:03,899
things like that

386
00:17:04,980 --> 00:17:07,630
the other way of doing it unfortunately

387
00:17:07,630 --> 00:17:10,480
in an SPL and TPL you've got quite

388
00:17:10,480 --> 00:17:13,449
constrained code size you don't really

389
00:17:13,449 --> 00:17:15,369
want to be looking at device trees and

390
00:17:15,369 --> 00:17:19,030
things like that it's just it takes time

391
00:17:19,030 --> 00:17:22,030
it's also you need to store it you need

392
00:17:22,030 --> 00:17:23,500
the code that runs it and that sort of

393
00:17:23,500 --> 00:17:26,919
thing on a typical ARM chip it's about

394
00:17:26,919 --> 00:17:29,500
7k bytes of overhead you know three for

395
00:17:29,500 --> 00:17:30,909
the device three and four for the code

396
00:17:30,909 --> 00:17:33,940
which is kind of a lot to pay for when

397
00:17:33,940 --> 00:17:35,020
you just want to find out where you

398
00:17:35,020 --> 00:17:41,260
buddha's so what we do there instead is

399
00:17:41,260 --> 00:17:43,870
just a clearer symbol here this is a

400
00:17:43,870 --> 00:17:47,590
macro and then we can use that symbol in

401
00:17:47,590 --> 00:17:49,630
the code basically this is the position

402
00:17:49,630 --> 00:17:50,020
that

403
00:17:50,020 --> 00:17:52,360
you be bin man automatically stuffs the

404
00:17:52,360 --> 00:17:54,460
symbol into the right place and an SPL

405
00:17:54,460 --> 00:17:56,350
will take y'all or whatever and then you

406
00:17:56,350 --> 00:18:00,010
can just basically use it directly and

407
00:18:00,010 --> 00:18:01,210
that kind of integration is really

408
00:18:01,210 --> 00:18:04,270
convenient for when you have a lot of

409
00:18:04,270 --> 00:18:14,790
space you can have entries that

410
00:18:14,790 --> 00:18:18,310
basically Maps otherwise they map out

411
00:18:18,310 --> 00:18:21,610
what the image looks like there's two

412
00:18:21,610 --> 00:18:26,110
types of map available at the moment

413
00:18:26,110 --> 00:18:28,720
one is this ftt map which is sort of

414
00:18:28,720 --> 00:18:32,110
what you saw before so effectively sorry

415
00:18:32,110 --> 00:18:33,940
this big thing on the on the right here

416
00:18:33,940 --> 00:18:36,040
it's just everything that been man knows

417
00:18:36,040 --> 00:18:39,870
and then there's also the F map which is

418
00:18:39,870 --> 00:18:42,970
what coreboot users and I think some

419
00:18:42,970 --> 00:18:45,340
other things it's a pretty sort of it's

420
00:18:45,340 --> 00:18:48,820
a flat map of of the information without

421
00:18:48,820 --> 00:18:50,860
really a lot of a lot of detail about

422
00:18:50,860 --> 00:18:54,400
what's going on the cool thing about the

423
00:18:54,400 --> 00:18:55,810
map is it does tell you everything

424
00:18:55,810 --> 00:18:58,810
including inside any entries that it has

425
00:18:58,810 --> 00:19:01,270
a hierarchical so you can actually see

426
00:19:01,270 --> 00:19:06,310
what's going on so at this point I'm

427
00:19:06,310 --> 00:19:08,470
just going to do well it's going to talk

428
00:19:08,470 --> 00:19:11,920
about some of the things that you some

429
00:19:11,920 --> 00:19:13,840
of the benefits you get by having your

430
00:19:13,840 --> 00:19:17,020
image in this kind of format so here I

431
00:19:17,020 --> 00:19:21,010
am looking at an image I'm just

432
00:19:21,010 --> 00:19:25,630
basically doing an LS on it and if you

433
00:19:25,630 --> 00:19:28,000
look at that that image was generated by

434
00:19:28,000 --> 00:19:30,250
bin man and all you can you can see here

435
00:19:30,250 --> 00:19:32,790
that we've got our sections we've got

436
00:19:32,790 --> 00:19:36,430
the position of each the size of each

437
00:19:36,430 --> 00:19:39,160
and and that sort of thing and the type

438
00:19:39,160 --> 00:19:42,100
this is the type of the entry and and

439
00:19:42,100 --> 00:19:43,360
some of them are compressed so they have

440
00:19:43,360 --> 00:19:47,890
an uncompressed size so you can you can

441
00:19:47,890 --> 00:19:50,080
look at an image and see what it see

442
00:19:50,080 --> 00:19:51,760
what it looks like after you've

443
00:19:51,760 --> 00:19:54,220
generated it you can also extract stuff

444
00:19:54,220 --> 00:19:56,350
out you can extract in this case we're

445
00:19:56,350 --> 00:19:58,360
going to extract you the u-boot out of

446
00:19:58,360 --> 00:20:00,400
it and we just do that with the extract

447
00:20:00,400 --> 00:20:02,530
command you can extract the whole

448
00:20:02,530 --> 00:20:03,970
everything out of it we

449
00:20:03,970 --> 00:20:06,630
you can just extract a few things but

450
00:20:06,630 --> 00:20:12,580
that's there's the feature there if you

451
00:20:12,580 --> 00:20:14,980
really want to sometimes this can happen

452
00:20:14,980 --> 00:20:16,720
that you want to replace something in an

453
00:20:16,720 --> 00:20:17,830
image but you don't really want to

454
00:20:17,830 --> 00:20:19,240
regenerate it maybe you don't have all

455
00:20:19,240 --> 00:20:21,940
the bits obviously you could extract

456
00:20:21,940 --> 00:20:23,860
them all and then stuff around with one

457
00:20:23,860 --> 00:20:25,870
you want it and then put them all back

458
00:20:25,870 --> 00:20:29,170
in but you can also just change one

459
00:20:29,170 --> 00:20:31,750
thing as we have here we're just

460
00:20:31,750 --> 00:20:33,280
changing the u-boot and this particular

461
00:20:33,280 --> 00:20:36,700
thing and here we're replacing anything

462
00:20:36,700 --> 00:20:39,010
any ice any things that match you boot

463
00:20:39,010 --> 00:20:41,500
with you know so that case we're

464
00:20:41,500 --> 00:20:46,390
replacing multiple files so the

465
00:20:46,390 --> 00:20:49,210
interesting thing about this is that it

466
00:20:49,210 --> 00:20:52,060
can handle things changing in size if

467
00:20:52,060 --> 00:20:54,580
you shoot for example you know you boots

468
00:20:54,580 --> 00:20:55,960
go a little bit bigger and now you're

469
00:20:55,960 --> 00:20:57,370
replacing a little slightly bigger one

470
00:20:57,370 --> 00:20:59,530
that's okay I can handle there and it

471
00:20:59,530 --> 00:21:01,870
will remember your original constraints

472
00:21:01,870 --> 00:21:03,310
so if you said that the size of the

473
00:21:03,310 --> 00:21:06,760
section was 32 K and it gets to 33 K it

474
00:21:06,760 --> 00:21:08,200
will notice that and complain but if

475
00:21:08,200 --> 00:21:10,540
it's just growing up to 30 and a half K

476
00:21:10,540 --> 00:21:12,220
that would be fine and all that it will

477
00:21:12,220 --> 00:21:15,580
let it happen and it can the replace

478
00:21:15,580 --> 00:21:17,710
works through the existing sort of

479
00:21:17,710 --> 00:21:21,580
subclass mechanism and so on so it can

480
00:21:21,580 --> 00:21:23,680
replace intersections effectively you

481
00:21:23,680 --> 00:21:25,240
can go and replace things throughout the

482
00:21:25,240 --> 00:21:28,240
image willy nilly provided that the

483
00:21:28,240 --> 00:21:35,260
entry supports them okay so now I'm

484
00:21:35,260 --> 00:21:37,720
going to talk a little bit about how to

485
00:21:37,720 --> 00:21:41,290
extend been men and how to how to work

486
00:21:41,290 --> 00:21:43,660
on it and do stuff with it not in any

487
00:21:43,660 --> 00:21:47,170
great detail to create a new entry

488
00:21:47,170 --> 00:21:51,040
called wibble you put a new file called

489
00:21:51,040 --> 00:21:52,840
we've all got high into the C type

490
00:21:52,840 --> 00:21:54,940
directory entry type directory and you

491
00:21:54,940 --> 00:21:57,550
put a class this class in it and bin man

492
00:21:57,550 --> 00:21:59,050
will find it and now you've got Whittle

493
00:21:59,050 --> 00:22:01,930
so you can now put a little and the in

494
00:22:01,930 --> 00:22:04,840
the in the image if you want to run

495
00:22:04,840 --> 00:22:06,250
command line tools to do certain things

496
00:22:06,250 --> 00:22:08,140
you can do there

497
00:22:08,140 --> 00:22:10,170
most of the logic isn't a thing called

498
00:22:10,170 --> 00:22:12,580
controlled up here why it's around about

499
00:22:12,580 --> 00:22:15,010
20 lines of the calls that you saw at

500
00:22:15,010 --> 00:22:16,450
the beginning the different stages of

501
00:22:16,450 --> 00:22:17,040
the

502
00:22:17,040 --> 00:22:19,680
that of the thing there's quite a lot of

503
00:22:19,680 --> 00:22:21,840
comments and if you get stuck for ideas

504
00:22:21,840 --> 00:22:24,510
you can look at entries other entries to

505
00:22:24,510 --> 00:22:26,370
see how you might want to do things and

506
00:22:26,370 --> 00:22:29,280
you have to add a test kind of an entry

507
00:22:29,280 --> 00:22:33,750
without a test this is the entry based

508
00:22:33,750 --> 00:22:36,630
class it basically just has a number of

509
00:22:36,630 --> 00:22:39,570
properties but like you'd expect from

510
00:22:39,570 --> 00:22:42,090
what I've described before everything is

511
00:22:42,090 --> 00:22:45,150
a subclass of this and this is the thing

512
00:22:45,150 --> 00:22:46,560
with implements or has default

513
00:22:46,560 --> 00:22:48,810
implementations for all of the all of

514
00:22:48,810 --> 00:22:52,550
the methods I mentioned at the beginning

515
00:22:53,660 --> 00:22:55,860
so some things are really simple if you

516
00:22:55,860 --> 00:23:00,110
just want to add a new blob so here's a

517
00:23:00,170 --> 00:23:07,050
if sp4 Creek Queens Bay and it is it's

518
00:23:07,050 --> 00:23:09,660
each Li it's just a blob there's really

519
00:23:09,660 --> 00:23:10,890
nothing else to say about it

520
00:23:10,890 --> 00:23:12,240
we didn't even give it a default

521
00:23:12,240 --> 00:23:15,540
filename so you're going to have to it's

522
00:23:15,540 --> 00:23:17,310
going to have to make that work so

523
00:23:17,310 --> 00:23:20,730
essentially this is this is going to

524
00:23:20,730 --> 00:23:22,950
rely entirely on the blob entry which is

525
00:23:22,950 --> 00:23:24,990
available there to implement all of the

526
00:23:24,990 --> 00:23:26,670
other things like getting its contents

527
00:23:26,670 --> 00:23:29,760
and that kind of thing you want to do

528
00:23:29,760 --> 00:23:31,020
something a little bit more complicated

529
00:23:31,020 --> 00:23:34,020
this is how if map is implemented if met

530
00:23:34,020 --> 00:23:36,390
if you remember is a very simple flash

531
00:23:36,390 --> 00:23:40,640
map non-hierarchical flash map thing and

532
00:23:40,640 --> 00:23:42,870
there's a little it's got a little more

533
00:23:42,870 --> 00:23:51,000
going on so let's start here to obtain

534
00:23:51,000 --> 00:23:53,280
the contents we call this PDF map phone

535
00:23:53,280 --> 00:23:56,220
and this is good if map here it

536
00:23:56,220 --> 00:23:59,130
basically goes through all the entries

537
00:23:59,130 --> 00:24:00,510
gets all the entries out of the image

538
00:24:00,510 --> 00:24:02,940
here everything goes through all the

539
00:24:02,940 --> 00:24:05,100
images adding them and adding an entry

540
00:24:05,100 --> 00:24:10,110
involves basically going through all the

541
00:24:10,110 --> 00:24:11,700
all these sub entries that feels like

542
00:24:11,700 --> 00:24:14,400
this could be simplified actually let's

543
00:24:14,400 --> 00:24:17,730
go is doing a look twice but anyway when

544
00:24:17,730 --> 00:24:19,680
it finds something that wants to add it

545
00:24:19,680 --> 00:24:22,080
just adds it isn't it as a new F map

546
00:24:22,080 --> 00:24:24,780
area here to the to the F map there's a

547
00:24:24,780 --> 00:24:28,320
utility library here and we're not we

548
00:24:28,320 --> 00:24:31,169
deliberately skipping CB affairs

549
00:24:31,169 --> 00:24:34,030
we've got some debugging that we want to

550
00:24:34,030 --> 00:24:36,220
output so you can see it the log level

551
00:24:36,220 --> 00:24:39,669
and see what's going on and then at the

552
00:24:39,669 --> 00:24:41,980
very end we encode the F map basically

553
00:24:41,980 --> 00:24:44,200
giving up these areas and it's

554
00:24:44,200 --> 00:24:46,390
information about that will go in the

555
00:24:46,390 --> 00:24:50,740
and the thing at the top process

556
00:24:50,740 --> 00:24:52,570
contents if you picked it up earlier

557
00:24:52,570 --> 00:24:54,370
it's for when you want to update some

558
00:24:54,370 --> 00:24:57,580
things later now can anyone think of why

559
00:24:57,580 --> 00:24:59,559
we might want to update so we've we've

560
00:24:59,559 --> 00:25:00,910
figured out the if map right at the

561
00:25:00,910 --> 00:25:02,320
beginning and then right at the end we

562
00:25:02,320 --> 00:25:04,000
might want to update it whoa why would

563
00:25:04,000 --> 00:25:13,390
it need updating no tell you anyway well

564
00:25:13,390 --> 00:25:14,740
we didn't know the size of everything

565
00:25:14,740 --> 00:25:16,330
necessarily we may have got it wrong

566
00:25:16,330 --> 00:25:18,700
maybe things got compressed everything's

567
00:25:18,700 --> 00:25:20,890
good to move around we don't not sure

568
00:25:20,890 --> 00:25:23,530
but at some point we know for certain

569
00:25:23,530 --> 00:25:25,660
and at that point we have to go back and

570
00:25:25,660 --> 00:25:27,549
update it why do we have to get its

571
00:25:27,549 --> 00:25:29,470
conta to the star we need to know its

572
00:25:29,470 --> 00:25:31,000
size we need to know something about it

573
00:25:31,000 --> 00:25:32,919
so we can pack it right there's this

574
00:25:32,919 --> 00:25:34,780
weird thing we can sort of PEC fins and

575
00:25:34,780 --> 00:25:36,640
you kind of know where they are

576
00:25:36,640 --> 00:25:39,100
but some of them might the actual

577
00:25:39,100 --> 00:25:40,809
contents might change a little bit later

578
00:25:40,809 --> 00:25:42,549
on so that's something that been men

579
00:25:42,549 --> 00:25:47,380
deals worth been men has 100% code

580
00:25:47,380 --> 00:25:49,960
coverage which means that everything all

581
00:25:49,960 --> 00:25:52,660
the entries and all of the logic coders

582
00:25:52,660 --> 00:25:56,710
is hundred percent covered and this is

583
00:25:56,710 --> 00:26:00,400
an example of a test we read this file

584
00:26:00,400 --> 00:26:02,919
which is the description of the of an

585
00:26:02,919 --> 00:26:06,429
x86 rom and then we basically assert

586
00:26:06,429 --> 00:26:08,350
that that now having having read the

587
00:26:08,350 --> 00:26:10,559
data out of it it contains the data some

588
00:26:10,559 --> 00:26:13,600
padding SPL and some more padding or

589
00:26:13,600 --> 00:26:16,600
something like that all of the data is

590
00:26:16,600 --> 00:26:20,470
fake and the tests this is what you boot

591
00:26:20,470 --> 00:26:21,970
looks like it's basically just four

592
00:26:21,970 --> 00:26:25,299
bytes and the test this makes it far

593
00:26:25,299 --> 00:26:27,490
easier to write tests when you've got

594
00:26:27,490 --> 00:26:28,780
small amount of data and that kind of

595
00:26:28,780 --> 00:26:30,549
thing and you have the ability to use

596
00:26:30,549 --> 00:26:33,540
real data but almost now notice need it

597
00:26:33,540 --> 00:26:35,919
makes it much much simpler and the tests

598
00:26:35,919 --> 00:26:39,760
run really quickly I was going to give

599
00:26:39,760 --> 00:26:41,980
you a demo but then I realized my laptop

600
00:26:41,980 --> 00:26:44,350
doesn't crashes if I connect to anything

601
00:26:44,350 --> 00:26:45,700
so there's a truck that I'm going to

602
00:26:45,700 --> 00:26:47,350
drive over my laptop with after this

603
00:26:47,350 --> 00:26:52,960
talk but then I realized that we do

604
00:26:52,960 --> 00:26:55,570
actually have hangouts so I can do a

605
00:26:55,570 --> 00:26:57,520
little BMI but this is this is a really

606
00:26:57,520 --> 00:26:59,080
dummy dumb demo because I haven't really

607
00:26:59,080 --> 00:27:03,010
prepared much but the this is just

608
00:27:03,010 --> 00:27:06,220
showing you a list of an image printing

609
00:27:06,220 --> 00:27:07,750
out the stuff that's oh no that kind of

610
00:27:07,750 --> 00:27:13,240
thing and I'll just give you this is you

611
00:27:13,240 --> 00:27:15,340
know showing the help and so on so it's

612
00:27:15,340 --> 00:27:16,809
got a lot of a lot of bits and pieces

613
00:27:16,809 --> 00:27:24,700
and there's also a entry Doc's read

614
00:27:24,700 --> 00:27:28,799
apart that's room less which whoops hmm

615
00:27:28,799 --> 00:27:30,820
that's you got to be really careful with

616
00:27:30,820 --> 00:27:35,710
this which shows you the entries each of

617
00:27:35,710 --> 00:27:37,330
the entries basically his automatically

618
00:27:37,330 --> 00:27:39,490
generated documentation just coming out

619
00:27:39,490 --> 00:27:42,100
of the Python code so you can see you

620
00:27:42,100 --> 00:27:44,250
can look at that and see what's going on

621
00:27:44,250 --> 00:27:46,809
and been man itself doesn't have that

622
00:27:46,809 --> 00:27:49,450
many options it's pretty easy pretty

623
00:27:49,450 --> 00:27:52,559
easy to look the main command is build

624
00:27:52,559 --> 00:27:57,280
and build has options to you know

625
00:27:57,280 --> 00:28:00,309
specify the image the input directory

626
00:28:00,309 --> 00:28:02,620
the upward directory and that kind of

627
00:28:02,620 --> 00:28:07,480
thing so yeah there's lots of bits and

628
00:28:07,480 --> 00:28:09,280
pieces one thing I didn't mention is

629
00:28:09,280 --> 00:28:11,340
these entry arguments

630
00:28:11,340 --> 00:28:13,900
perhaps I'll briefly do that if I've got

631
00:28:13,900 --> 00:28:16,240
time essentially you can pass an

632
00:28:16,240 --> 00:28:17,710
information on the command line that he

633
00:28:17,710 --> 00:28:19,570
ends up in the image that can be useful

634
00:28:19,570 --> 00:28:21,940
for build IDs and that sort of thing

635
00:28:21,940 --> 00:28:23,799
and any any entry can access that

636
00:28:23,799 --> 00:28:29,220
information just for convenience the

637
00:28:29,220 --> 00:28:31,659
output of everything that you get can be

638
00:28:31,659 --> 00:28:33,280
preserved as well so you can go and look

639
00:28:33,280 --> 00:28:35,020
at all the temporary files that are

640
00:28:35,020 --> 00:28:38,530
created and what it did in the end and I

641
00:28:38,530 --> 00:28:40,299
should have also mentioned that the

642
00:28:40,299 --> 00:28:44,250
there's a debugging a velocity option

643
00:28:44,250 --> 00:28:46,650
okay so you're sort of quite at EMI and

644
00:28:46,650 --> 00:28:50,559
maybe all them I'll run over there run

645
00:28:50,559 --> 00:28:52,210
over my laptop and a Prius instead of

646
00:28:52,210 --> 00:28:56,710
that truck MC that survives so a few

647
00:28:56,710 --> 00:28:58,600
future ideas about what we might

648
00:28:58,600 --> 00:29:04,360
do next so more support for different

649
00:29:04,360 --> 00:29:05,980
types of binary at the moment you can

650
00:29:05,980 --> 00:29:08,080
see it's mostly just what has had to be

651
00:29:08,080 --> 00:29:11,170
happen had to be used to date a new boom

652
00:29:11,170 --> 00:29:14,620
only I think Tigre Sun X I and x86

653
00:29:14,620 --> 00:29:17,800
actually used been men most of them so

654
00:29:17,800 --> 00:29:19,900
they were also be simple needs fulfill

655
00:29:19,900 --> 00:29:22,870
my packing and doesn't seem to be but is

656
00:29:22,870 --> 00:29:26,020
slowly changing I noticed that more and

657
00:29:26,020 --> 00:29:26,980
more of them are getting more and more

658
00:29:26,980 --> 00:29:31,179
complicated so we'll see how it goes we

659
00:29:31,179 --> 00:29:33,910
could pack and power in parallel and

660
00:29:33,910 --> 00:29:35,080
even better would be to have a

661
00:29:35,080 --> 00:29:37,210
dependency graph in other words be able

662
00:29:37,210 --> 00:29:38,770
to say ok this depends on this which

663
00:29:38,770 --> 00:29:40,929
depends on Merce and actually follow

664
00:29:40,929 --> 00:29:42,490
that through and then man at the moment

665
00:29:42,490 --> 00:29:44,380
it's sort of when it when it discovers

666
00:29:44,380 --> 00:29:46,090
that that something needs to change it

667
00:29:46,090 --> 00:29:47,170
actually just goes and does the whole

668
00:29:47,170 --> 00:29:49,570
thing again it doesn't necessarily get

669
00:29:49,570 --> 00:29:51,280
the data again but it does most well

670
00:29:51,280 --> 00:29:54,460
thing again there's a thing there's a

671
00:29:54,460 --> 00:29:56,650
tool called fetch exile it's checks and

672
00:29:56,650 --> 00:29:59,230
verify boot in your boot we could do

673
00:29:59,230 --> 00:30:01,300
something like chicken image you know is

674
00:30:01,300 --> 00:30:02,830
there so much corrector the signature is

675
00:30:02,830 --> 00:30:04,330
good or the hash is good that kind of

676
00:30:04,330 --> 00:30:06,790
thing that's something that that could

677
00:30:06,790 --> 00:30:11,380
be useful as well somebody at Intel

678
00:30:11,380 --> 00:30:12,490
mentioned that they were writing their

679
00:30:12,490 --> 00:30:14,800
tools in Python were writing more of the

680
00:30:14,800 --> 00:30:18,550
tools in Python to make to avoid the the

681
00:30:18,550 --> 00:30:20,650
windows versus low next thing and I

682
00:30:20,650 --> 00:30:22,559
think if they did that then I wouldn't

683
00:30:22,559 --> 00:30:25,210
if to you you have to call out to some

684
00:30:25,210 --> 00:30:27,370
of the tools I think the one that the

685
00:30:27,370 --> 00:30:32,830
yeah the fweet all is a C program and

686
00:30:32,830 --> 00:30:35,380
you could even download missing binaries

687
00:30:35,380 --> 00:30:37,900
from the internet govern that everything

688
00:30:37,900 --> 00:30:39,190
seems to be going to blind area blobs

689
00:30:39,190 --> 00:30:41,950
these days maybe we should just give up

690
00:30:41,950 --> 00:30:43,150
and put them on the internet in

691
00:30:43,150 --> 00:30:47,920
somewhere so this is why you should use

692
00:30:47,920 --> 00:30:50,940
been men or try it out

693
00:30:50,940 --> 00:30:55,030
it's data-driven firmware packing as the

694
00:30:55,030 --> 00:30:57,760
main its main goal and we'll see where

695
00:30:57,760 --> 00:30:58,030
it goes

696
00:30:58,030 --> 00:31:03,120
it's it's been around a couple of years

697
00:31:03,120 --> 00:31:06,610
it might it might get a bit more

698
00:31:06,610 --> 00:31:08,760
activity it might not I just don't know

699
00:31:08,760 --> 00:31:12,560
and there's some pointers to document

700
00:31:12,560 --> 00:31:30,950
and thank you for listening thanks the

701
00:31:30,950 --> 00:31:34,220
talk Simon I work on open power firmware

702
00:31:34,220 --> 00:31:37,730
and we have a really huge pal scope in

703
00:31:37,730 --> 00:31:40,580
XML that builds FM wear so uh it's been

704
00:31:40,580 --> 00:31:41,840
on someone's to-do list or a place for a

705
00:31:41,840 --> 00:31:42,830
long time and I think I'll have a look

706
00:31:42,830 --> 00:31:44,690
at this one of our requirements is we

707
00:31:44,690 --> 00:31:47,270
ECC protect some of the blobs inside our

708
00:31:47,270 --> 00:31:50,690
image how hard can that be able to be

709
00:31:50,690 --> 00:31:54,470
men you say ECC protect yes a DCC

710
00:31:54,470 --> 00:31:56,750
information to each word or by it I

711
00:31:56,750 --> 00:31:58,730
don't know how it works actually yeah so

712
00:31:58,730 --> 00:32:01,100
that you could do by in the process

713
00:32:01,100 --> 00:32:03,770
image call you can just basically go and

714
00:32:03,770 --> 00:32:06,800
change that to whatever you want at that

715
00:32:06,800 --> 00:32:09,320
point you can change the size if you

716
00:32:09,320 --> 00:32:10,940
need to presumably you would need to and

717
00:32:10,940 --> 00:32:13,730
you can just end up with us an updated

718
00:32:13,730 --> 00:32:15,890
entry there that's pretty easy to do

719
00:32:15,890 --> 00:32:19,250
before though oh thanks also you're um

720
00:32:19,250 --> 00:32:21,590
you'd read me needs updating sorry you

721
00:32:21,590 --> 00:32:23,000
read me needs updating it depends on

722
00:32:23,000 --> 00:32:27,170
Python live fdt support and not mention

723
00:32:27,170 --> 00:32:29,450
the readme yet so attached it's not good

724
00:32:29,450 --> 00:32:31,220
it's actually called at the moment

725
00:32:31,220 --> 00:32:32,780
called from new boot which has it so

726
00:32:32,780 --> 00:32:37,310
yeah I'll have to fly they don't okay

727
00:32:37,310 --> 00:32:40,310
yeah you might have to build do make you

728
00:32:40,310 --> 00:32:42,140
check which is just to get it all the

729
00:32:42,140 --> 00:32:49,460
build sandbox SPL build slow FDJ as

730
00:32:49,460 --> 00:32:50,780
salmon great luck

731
00:32:50,780 --> 00:32:52,610
I actually I just wanted to understand

732
00:32:52,610 --> 00:32:55,130
like how do you see like server signing

733
00:32:55,130 --> 00:32:58,730
like as an extension understand those

734
00:32:58,730 --> 00:33:01,460
terms of like if I was trying to use

735
00:33:01,460 --> 00:33:05,320
this with some kind of a like a sign in

736
00:33:05,320 --> 00:33:07,790
infrastructure and I'm trying to like

737
00:33:07,790 --> 00:33:11,540
merge this well I imagine the signing

738
00:33:11,540 --> 00:33:16,790
infrastructure would would take all the

739
00:33:16,790 --> 00:33:19,040
binaries and put them together and then

740
00:33:19,040 --> 00:33:22,450
sign put some signature somewhere right

741
00:33:22,450 --> 00:33:24,640
so

742
00:33:24,640 --> 00:33:26,320
why did you got all the all the original

743
00:33:26,320 --> 00:33:28,300
binary somewhere sitting on the Siri you

744
00:33:28,300 --> 00:33:29,920
should be able to run been man to do

745
00:33:29,920 --> 00:33:33,550
that if if you're asking can I take an

746
00:33:33,550 --> 00:33:36,010
existing image and sign it is that what

747
00:33:36,010 --> 00:33:40,420
you're thinking then that's easy so long

748
00:33:40,420 --> 00:33:42,790
as you have an entry they already that

749
00:33:42,790 --> 00:33:45,160
will hold the signature so long as you

750
00:33:45,160 --> 00:33:48,460
set that out that would work if you

751
00:33:48,460 --> 00:33:49,540
using I don't know what sign-in

752
00:33:49,540 --> 00:33:52,780
mechanism using a few using the u-boot

753
00:33:52,780 --> 00:33:55,180
fit then the way that works is you

754
00:33:55,180 --> 00:33:57,220
actually run you build the fit and it

755
00:33:57,220 --> 00:33:58,930
sits there and then later on you come

756
00:33:58,930 --> 00:34:01,480
along and you say sign this fit with

757
00:34:01,480 --> 00:34:06,520
this key and so if you do that then you

758
00:34:06,520 --> 00:34:08,649
would simply run replace something like

759
00:34:08,649 --> 00:34:10,389
that and then mean to put that new fit

760
00:34:10,389 --> 00:34:13,210
into the into the image I think there's

761
00:34:13,210 --> 00:34:16,000
various ways of doing it but it should

762
00:34:16,000 --> 00:34:18,100
be should be possible to integrate it I

763
00:34:18,100 --> 00:34:26,469
think my first question is did you write

764
00:34:26,469 --> 00:34:27,760
all this from scratch or did you just

765
00:34:27,760 --> 00:34:31,449
reuse Cosmo I forgot to mention that

766
00:34:31,449 --> 00:34:33,250
there's a credit for it at the bottom of

767
00:34:33,250 --> 00:34:36,010
the readme it's all it's all from

768
00:34:36,010 --> 00:34:36,340
scratch

769
00:34:36,340 --> 00:34:39,520
so what Julius is referring to as a very

770
00:34:39,520 --> 00:34:44,980
old tool that I wrote at least some of

771
00:34:44,980 --> 00:34:48,870
years ago with some very similar ideas

772
00:34:48,870 --> 00:34:51,190
the problem with there is it had no

773
00:34:51,190 --> 00:34:55,020
tests it was very ad hoc didn't have

774
00:34:55,020 --> 00:34:58,210
like a base class and a class structure

775
00:34:58,210 --> 00:35:01,180
and that kind of thing it didn't support

776
00:35:01,180 --> 00:35:03,460
looking at images or extracting things

777
00:35:03,460 --> 00:35:05,560
from images and that kind of thing I

778
00:35:05,560 --> 00:35:06,610
don't know there's probably other

779
00:35:06,610 --> 00:35:08,290
problems as well it was that was written

780
00:35:08,290 --> 00:35:09,400
and somewhat of a hurry

781
00:35:09,400 --> 00:35:11,320
whereas this is as you can tell at

782
00:35:11,320 --> 00:35:15,340
leisure time missing around project so

783
00:35:15,340 --> 00:35:17,500
it's a little bit different but yeah

784
00:35:17,500 --> 00:35:21,850
there's certainly no code from that that

785
00:35:21,850 --> 00:35:22,500
I'm aware of

786
00:35:22,500 --> 00:35:26,080
he got deliberation I think yeah okay I

787
00:35:26,080 --> 00:35:28,720
also wanted to ask you said that in some

788
00:35:28,720 --> 00:35:31,240
cases you compile base addresses

789
00:35:31,240 --> 00:35:34,900
directly into the code but so from what

790
00:35:34,900 --> 00:35:37,210
I understand it also has a mode where it

791
00:35:37,210 --> 00:35:38,410
places the file

792
00:35:38,410 --> 00:35:40,539
it's like right after another depending

793
00:35:40,539 --> 00:35:42,400
on how big they are and don't you get in

794
00:35:42,400 --> 00:35:43,839
a chicken-and-egg problem with that if

795
00:35:43,839 --> 00:35:45,640
you don't know where it's placed before

796
00:35:45,640 --> 00:35:47,200
you have a compiler but then you need to

797
00:35:47,200 --> 00:35:51,130
insert the base it was well if I go back

798
00:35:51,130 --> 00:35:55,780
to that the the way it works is that you

799
00:35:55,780 --> 00:35:59,230
actually declare the variable at compile

800
00:35:59,230 --> 00:36:04,270
time so this where is it this one right

801
00:36:04,270 --> 00:36:06,430
is this what you're talking about yeah

802
00:36:06,430 --> 00:36:08,980
yeah so this is actually a declaration

803
00:36:08,980 --> 00:36:13,720
that ends up in a an area and the in the

804
00:36:13,720 --> 00:36:15,849
image so there's actually a bin main

805
00:36:15,849 --> 00:36:17,440
area and the image was just these

806
00:36:17,440 --> 00:36:18,970
symbols and they're four bytes or eight

807
00:36:18,970 --> 00:36:20,890
bytes or whatever it is age so they're

808
00:36:20,890 --> 00:36:23,170
at this point there when the win this

809
00:36:23,170 --> 00:36:26,079
thing is built they are zero okay so you

810
00:36:26,079 --> 00:36:28,630
update the binary afterwards yeah read

811
00:36:28,630 --> 00:36:30,609
the Alpha and find out where the symbols

812
00:36:30,609 --> 00:36:32,410
are going stuff the values into the

813
00:36:32,410 --> 00:36:35,109
binary it's pretty simple to do that and

814
00:36:35,109 --> 00:36:37,420
and then it sort of seamless as you know

815
00:36:37,420 --> 00:36:39,789
you know it kind of closes the loop if

816
00:36:39,789 --> 00:36:58,900
you like go back to my truck my truck so

817
00:36:58,900 --> 00:37:01,539
could this have been an extension to see

818
00:37:01,539 --> 00:37:07,020
BFS as opposed to kind of how what is

819
00:37:07,020 --> 00:37:10,599
what does this think of that zip FS

820
00:37:10,599 --> 00:37:16,180
wouldn't have so intense I think you're

821
00:37:16,180 --> 00:37:18,490
talking it into the format of the things

822
00:37:18,490 --> 00:37:22,510
so I think it's not everyone knows the

823
00:37:22,510 --> 00:37:24,819
state here but so I understand it a

824
00:37:24,819 --> 00:37:27,640
Chrome OS image is multiple CBS is

825
00:37:27,640 --> 00:37:29,890
images along with some other stuff right

826
00:37:29,890 --> 00:37:35,049
so yes but men then principle could

827
00:37:35,049 --> 00:37:38,380
produce that what so what you're saying

828
00:37:38,380 --> 00:37:40,510
is what has been what would been man

829
00:37:40,510 --> 00:37:44,640
give you over there I don't know I guess

830
00:37:44,640 --> 00:37:50,190
a unified view of the whole thing maybe

831
00:37:50,190 --> 00:37:51,900
rather and

832
00:37:51,900 --> 00:37:54,299
sort of multiple sort of individual CDA

833
00:37:54,299 --> 00:37:59,420
phases but I'm not sure there's a huge

834
00:37:59,420 --> 00:38:02,010
you know they're just different ways of

835
00:38:02,010 --> 00:38:04,020
solving the same problem I would I would

836
00:38:04,020 --> 00:38:08,970
say swings and roundabouts I have to

837
00:38:08,970 --> 00:38:19,890
think about it more Oh can't get away

838
00:38:19,890 --> 00:38:28,859
that easily so if you list an existing

839
00:38:28,859 --> 00:38:31,079
image how does it bootstrap the

840
00:38:31,079 --> 00:38:32,520
information like how does it find the

841
00:38:32,520 --> 00:38:36,420
anchor that it like the the FTP map or

842
00:38:36,420 --> 00:38:39,359
whatever it's based off in it there's an

843
00:38:39,359 --> 00:38:41,579
image header which is very much which is

844
00:38:41,579 --> 00:38:45,839
just a couple of just a six to eight or

845
00:38:45,839 --> 00:38:49,230
sixteen by pointer basically which is

846
00:38:49,230 --> 00:38:50,490
always at there you can put it anywhere

847
00:38:50,490 --> 00:38:51,990
but it's normally at the beginning of

848
00:38:51,990 --> 00:38:54,720
the end of the image federally you can't

849
00:38:54,720 --> 00:38:55,710
put it anywhere I think it has to be at

850
00:38:55,710 --> 00:38:57,059
the beginning of the end it's some very

851
00:38:57,059 --> 00:39:00,049
similar to what's see BFS does with the

852
00:39:00,049 --> 00:39:03,359
file would they get a pointer or

853
00:39:03,359 --> 00:39:05,190
something what is it so this is the

854
00:39:05,190 --> 00:39:07,319
whole image that you put on flash right

855
00:39:07,319 --> 00:39:10,079
so right and don't you have restrictions

856
00:39:10,079 --> 00:39:12,809
on some architectures like that you need

857
00:39:12,809 --> 00:39:15,210
to put something specific at a zero cost

858
00:39:15,210 --> 00:39:17,579
yeah so if you do then you should put it

859
00:39:17,579 --> 00:39:18,869
at the end and if you don't you put it

860
00:39:18,869 --> 00:39:21,029
at the start or something like that yeah

861
00:39:21,029 --> 00:39:23,460
you've got those two options if you do

862
00:39:23,460 --> 00:39:25,170
if you also have restrictions from spy

863
00:39:25,170 --> 00:39:28,020
right protection that you wanted to you

864
00:39:28,020 --> 00:39:29,520
would usually want to be right protected

865
00:39:29,520 --> 00:39:31,049
I assume if you have some kind of evil

866
00:39:31,049 --> 00:39:33,510
solution yeah well you have to I mean at

867
00:39:33,510 --> 00:39:34,920
some point you may have to search for

868
00:39:34,920 --> 00:39:37,500
the FTP met so it's got a magic value at

869
00:39:37,500 --> 00:39:39,180
the beginning of it if it can't find

870
00:39:39,180 --> 00:39:40,440
minerals of tears they actually have

871
00:39:40,440 --> 00:39:42,539
been men that creates an image without

872
00:39:42,539 --> 00:39:44,339
the image header and make sure they can

873
00:39:44,339 --> 00:39:47,309
still find all the information so yeah

874
00:39:47,309 --> 00:39:49,859
you have the ability to to search for it

875
00:39:49,859 --> 00:39:51,940
manually just takes a little bit longer

876
00:39:51,940 --> 00:39:58,169
[Music]

877
00:39:58,799 --> 00:40:01,150
okay well I guess we've got a long trek

878
00:40:01,150 --> 00:40:05,410
back so we probably want to so if you

879
00:40:05,410 --> 00:40:07,059
have further questions you can approach

880
00:40:07,059 --> 00:40:09,309
them and later thank you very much thank

881
00:40:09,309 --> 00:40:11,400
you

882
00:40:11,490 --> 00:40:12,760
[Applause]

883
00:40:12,760 --> 00:40:20,330
[Music]

