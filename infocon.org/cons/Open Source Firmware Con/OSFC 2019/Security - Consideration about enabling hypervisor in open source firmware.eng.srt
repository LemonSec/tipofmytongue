1
00:00:03,190 --> 00:00:06,259
[Music]

2
00:00:07,490 --> 00:00:10,650
alright so next up we have Kotwal and he

3
00:00:10,650 --> 00:00:12,690
will be speaking about hypervisors being

4
00:00:12,690 --> 00:00:16,219
enabled to a and the firmware enjoy

5
00:00:16,219 --> 00:00:18,930
hello everyone thank you for coming to

6
00:00:18,930 --> 00:00:21,900
my talk I want to tell you a little bit

7
00:00:21,900 --> 00:00:25,260
about our story how we enabled smaller

8
00:00:25,260 --> 00:00:30,330
better and hypervisor in in fumer or

9
00:00:30,330 --> 00:00:40,920
update it as a payload Courbet so my

10
00:00:40,920 --> 00:00:42,480
name is Claude Crowell I'm called

11
00:00:42,480 --> 00:00:44,969
Thunder and embedded system consultant

12
00:00:44,969 --> 00:00:48,270
at 3m DEP it's a pollen pace embedded

13
00:00:48,270 --> 00:00:51,090
system consulting company I'm a huge fan

14
00:00:51,090 --> 00:00:54,090
of open-source filmer interested about

15
00:00:54,090 --> 00:00:55,850
platform security and trusted computing

16
00:00:55,850 --> 00:00:58,050
so we can reach me on various social

17
00:00:58,050 --> 00:01:01,170
media and feel free to ping me if you

18
00:01:01,170 --> 00:01:04,739
have any questions related so what we

19
00:01:04,739 --> 00:01:06,930
will talk about a little bit of

20
00:01:06,930 --> 00:01:08,460
introduction and terminology above the

21
00:01:08,460 --> 00:01:10,799
hypervisors I'm not hypervisors

22
00:01:10,799 --> 00:01:13,680
researcher so I will not give you a PhD

23
00:01:13,680 --> 00:01:16,439
level talk about that I hope that some

24
00:01:16,439 --> 00:01:19,650
basics are already known I will talk a

25
00:01:19,650 --> 00:01:21,420
little bit about the birth rank what it

26
00:01:21,420 --> 00:01:25,890
is and what it tries to address and then

27
00:01:25,890 --> 00:01:29,460
we will go to to hypervisor as a payload

28
00:01:29,460 --> 00:01:32,640
in code would feel a little bit demo

29
00:01:32,640 --> 00:01:35,250
unfortunately we have to stick to ante

30
00:01:35,250 --> 00:01:38,340
for recording I forget a power supply

31
00:01:38,340 --> 00:01:41,579
for for my motherboard but if you will

32
00:01:41,579 --> 00:01:43,799
be interested to see that life I would

33
00:01:43,799 --> 00:01:45,540
be glad to show you that this is not any

34
00:01:45,540 --> 00:01:49,070
fake and who image not just making some

35
00:01:49,070 --> 00:01:53,700
video sheets and then I will tell you a

36
00:01:53,700 --> 00:01:55,770
bit about the issues and and further

37
00:01:55,770 --> 00:01:58,079
work that we plan to do so what was the

38
00:01:58,079 --> 00:02:00,630
goal the goal was to create a humor that

39
00:02:00,630 --> 00:02:04,579
can start multiple applications in

40
00:02:04,579 --> 00:02:07,860
isolated isolated gift wall environments

41
00:02:07,860 --> 00:02:11,250
and and what we did that we did that may

42
00:02:11,250 --> 00:02:13,740
need to improve our hypervisor foo

43
00:02:13,740 --> 00:02:15,600
and to learn more about the hypervisors

44
00:02:15,600 --> 00:02:18,380
is very smart cut diamond for that and

45
00:02:18,380 --> 00:02:20,970
to understand what kind of capabilities

46
00:02:20,970 --> 00:02:22,920
values hardware platforms have

47
00:02:22,920 --> 00:02:26,870
definitely silicon vendors expand

48
00:02:26,870 --> 00:02:29,820
support for internalization pretty fast

49
00:02:29,820 --> 00:02:33,930
we have vtd VTC and probably we'll see a

50
00:02:33,930 --> 00:02:36,510
lot of mark virtualization related

51
00:02:36,510 --> 00:02:41,790
features in future ok so maybe some

52
00:02:41,790 --> 00:02:44,940
definition this is very kind of just to

53
00:02:44,940 --> 00:02:46,830
start so virtualization is the

54
00:02:46,830 --> 00:02:48,570
application of the wiring principle

55
00:02:48,570 --> 00:02:51,000
through enforced modularity whereby

56
00:02:51,000 --> 00:02:52,920
deposit bill to our resources is

57
00:02:52,920 --> 00:02:54,600
identical to the underlying physical

58
00:02:54,600 --> 00:02:57,840
resource being good for us so so this

59
00:02:57,840 --> 00:03:00,780
layering is kind of a single abstraction

60
00:03:00,780 --> 00:03:06,630
a liar so example of the of the of this

61
00:03:06,630 --> 00:03:11,250
virtualization is like we have we have

62
00:03:11,250 --> 00:03:14,030
for example memory which we want to

63
00:03:14,030 --> 00:03:17,220
somehow expose and hire and we have

64
00:03:17,220 --> 00:03:20,070
unified layering for dots over 12 memory

65
00:03:20,070 --> 00:03:22,590
right this kind of way of flying we're

66
00:03:22,590 --> 00:03:24,990
layering we exposing physical resource

67
00:03:24,990 --> 00:03:27,540
which is disk in little bit different

68
00:03:27,540 --> 00:03:30,270
way which is right and so we can see

69
00:03:30,270 --> 00:03:33,300
either bigger or redundant array of

70
00:03:33,300 --> 00:03:36,720
disks and this this is this is the same

71
00:03:36,720 --> 00:03:40,950
the same concept and to enforce the

72
00:03:40,950 --> 00:03:43,350
authority modularity means we the the

73
00:03:43,350 --> 00:03:45,990
person who see the things from that from

74
00:03:45,990 --> 00:03:47,850
top of the pipe cannot get through and

75
00:03:47,850 --> 00:03:50,910
see what is below so the utilization

76
00:03:50,910 --> 00:03:53,910
gives us it gives us that easel

77
00:03:53,910 --> 00:03:58,800
isolation so we n is is the abstraction

78
00:03:58,800 --> 00:04:00,890
of complete compute environment

79
00:04:00,890 --> 00:04:03,180
hypervisor is a software that manage

80
00:04:03,180 --> 00:04:04,020
those VMs

81
00:04:04,020 --> 00:04:07,560
so we will speak about the BIOS types of

82
00:04:07,560 --> 00:04:08,300
paper based

83
00:04:08,300 --> 00:04:11,190
hypervisors later and virtual machine

84
00:04:11,190 --> 00:04:13,320
monitor is a portion of hypervisor which

85
00:04:13,320 --> 00:04:16,680
is just responsible for CPU and memory

86
00:04:16,680 --> 00:04:19,560
utilization so full hypervisor also

87
00:04:19,560 --> 00:04:23,810
contained IO management

88
00:04:23,840 --> 00:04:26,400
okay what types of have up hypervisors

89
00:04:26,400 --> 00:04:29,220
we typically have so type zero is not

90
00:04:29,220 --> 00:04:31,889
official and then it's very unofficial I

91
00:04:31,889 --> 00:04:34,260
would say we are most frequently play

92
00:04:34,260 --> 00:04:35,580
with type 1 and type 2

93
00:04:35,580 --> 00:04:39,150
so type 2 is for example VMware or

94
00:04:39,150 --> 00:04:42,590
Oracle VirtualBox or qmo how it works

95
00:04:42,590 --> 00:04:46,290
simply in operating system we have some

96
00:04:46,290 --> 00:04:49,229
module or even this is purely software

97
00:04:49,229 --> 00:04:53,639
and we just run hypervisor and it can

98
00:04:53,639 --> 00:04:56,190
run some various sources inside other

99
00:04:56,190 --> 00:05:00,750
model is type 1 hypervisor where we and

100
00:05:00,750 --> 00:05:03,330
for example Xen is type 1 hypervisor or

101
00:05:03,330 --> 00:05:08,600
hyper-v or VMware ESX and where we just

102
00:05:08,600 --> 00:05:12,690
bare metal run the hypervisor and inside

103
00:05:12,690 --> 00:05:15,120
we can run various operate these

104
00:05:15,120 --> 00:05:18,810
operating systems if we talking about

105
00:05:18,810 --> 00:05:21,539
type 0 hypervisor which we can call 3m

106
00:05:21,539 --> 00:05:24,020
bed visor which we develop and other

107
00:05:24,020 --> 00:05:25,260
IBM's

108
00:05:25,260 --> 00:05:29,099
or l4 and this means that we have feel

109
00:05:29,099 --> 00:05:32,360
more inside which we put hypervisor and

110
00:05:32,360 --> 00:05:36,000
then we just run from that point as it

111
00:05:36,000 --> 00:05:37,889
is used in embedded environment

112
00:05:37,889 --> 00:05:42,950
frequently ok little bit about the

113
00:05:42,950 --> 00:05:45,539
embedded hypervisors or embedded

114
00:05:45,539 --> 00:05:48,150
bare-metal hypervisor on the market so

115
00:05:48,150 --> 00:05:52,949
it's not it's not so old technology I

116
00:05:52,949 --> 00:05:55,770
would say it's relatively new to the

117
00:05:55,770 --> 00:05:59,160
industry it started to be used in in

118
00:05:59,160 --> 00:06:02,070
2000 it is used in mission and safety

119
00:06:02,070 --> 00:06:04,289
critical applications we saw that in

120
00:06:04,289 --> 00:06:07,470
robotics in ultimate automotive in

121
00:06:07,470 --> 00:06:10,800
medical industry so what it gives us is

122
00:06:10,800 --> 00:06:13,320
stronger isolation for for example

123
00:06:13,320 --> 00:06:15,960
non-critical and critical computation so

124
00:06:15,960 --> 00:06:17,690
let's say we have to build our machines

125
00:06:17,690 --> 00:06:20,849
one doing some critical computation

126
00:06:20,849 --> 00:06:24,210
which is very important for us to so the

127
00:06:24,210 --> 00:06:26,099
application perform correctly and other

128
00:06:26,099 --> 00:06:28,289
if there will be any failure death we

129
00:06:28,289 --> 00:06:30,210
don't care which we will simply recover

130
00:06:30,210 --> 00:06:33,440
from from that point and also we saw

131
00:06:33,440 --> 00:06:36,020
applications where we have

132
00:06:36,020 --> 00:06:39,530
full full detection so one VM doing

133
00:06:39,530 --> 00:06:43,090
fourth kind of calculation and other we

134
00:06:43,090 --> 00:06:46,160
reverse that computer computation and if

135
00:06:46,160 --> 00:06:48,580
it sees some difference it start to

136
00:06:48,580 --> 00:06:51,889
claim that there is some fault and big

137
00:06:51,889 --> 00:06:55,430
decision to let's say run some security

138
00:06:55,430 --> 00:06:57,620
procedure or some recovery procedure

139
00:06:57,620 --> 00:07:01,849
there is also need for running legacy

140
00:07:01,849 --> 00:07:05,000
code so for example it may happen that

141
00:07:05,000 --> 00:07:09,440
that we have some legacy code but we

142
00:07:09,440 --> 00:07:12,830
want to move on with new features and we

143
00:07:12,830 --> 00:07:15,289
cannot simply change that legacy code so

144
00:07:15,289 --> 00:07:17,990
because of that we just isolate legacy

145
00:07:17,990 --> 00:07:21,830
code in in some VM giving it resources

146
00:07:21,830 --> 00:07:24,440
that it needs and the new features we I

147
00:07:24,440 --> 00:07:27,560
think in separate via also migration

148
00:07:27,560 --> 00:07:29,659
from the unicorn rule ecosystem is

149
00:07:29,659 --> 00:07:32,180
simplified thanks to that because

150
00:07:32,180 --> 00:07:34,750
because we can scale thanks to

151
00:07:34,750 --> 00:07:36,370
virtualization

152
00:07:36,370 --> 00:07:39,610
manageability is other embedded

153
00:07:39,610 --> 00:07:43,580
hypervisor feature which hypervisor Keys

154
00:07:43,580 --> 00:07:45,800
gives us line for managing those built

155
00:07:45,800 --> 00:07:48,199
on machine is checking it states may be

156
00:07:48,199 --> 00:07:51,380
updating them and thanks to that we have

157
00:07:51,380 --> 00:07:55,639
more features on the platform also I saw

158
00:07:55,639 --> 00:07:58,180
that Costco saving can be factored

159
00:07:58,180 --> 00:08:05,349
because this thanks to running multiple

160
00:08:05,349 --> 00:08:08,659
multi multiple isolated applications on

161
00:08:08,659 --> 00:08:12,099
one SOC using just simply dragging the

162
00:08:12,099 --> 00:08:15,139
interfaces to given DM we can move

163
00:08:15,139 --> 00:08:18,800
system which is distributed on bodies

164
00:08:18,800 --> 00:08:21,169
microcontrollers to one system which is

165
00:08:21,169 --> 00:08:25,340
one one chip and this this saves cost so

166
00:08:25,340 --> 00:08:28,729
how it looks in in filmer this is this

167
00:08:28,729 --> 00:08:32,860
is what we build so we have CP FS

168
00:08:32,860 --> 00:08:35,719
typical core both boot phases which is

169
00:08:35,719 --> 00:08:37,640
boot block ROM stage and DRAM stage and

170
00:08:37,640 --> 00:08:41,328
from ROM stage as a payload we created 3

171
00:08:41,328 --> 00:08:44,449
MB advisor or a blank payload which

172
00:08:44,449 --> 00:08:46,579
creates a hypervisor then this

173
00:08:46,579 --> 00:08:49,000
hypervisor can

174
00:08:49,000 --> 00:08:52,209
values VMs for example in 1 p.m. we may

175
00:08:52,209 --> 00:08:55,240
have see BIOS in other we have like

176
00:08:55,240 --> 00:08:57,819
arbitrary payroll it can be some arrows

177
00:08:57,819 --> 00:09:01,839
or we can also use grapple time accord

178
00:09:01,839 --> 00:09:06,370
to boot operating system ok what is bad

179
00:09:06,370 --> 00:09:08,649
flank so bad Frank is a like lightweight

180
00:09:08,649 --> 00:09:12,189
hypervisor written in C++ it is managed

181
00:09:12,189 --> 00:09:14,170
by a charade information security

182
00:09:14,170 --> 00:09:17,860
it supports Windows Linux and you Fi and

183
00:09:17,860 --> 00:09:21,339
and from now also called boot and it

184
00:09:21,339 --> 00:09:24,129
supports mostly Intel but the structure

185
00:09:24,129 --> 00:09:26,259
of the code is prepared to support arm

186
00:09:26,259 --> 00:09:29,319
and AMD and those that support is planet

187
00:09:29,319 --> 00:09:32,470
in the future and most important

188
00:09:32,470 --> 00:09:34,660
features of that it's it provides memory

189
00:09:34,660 --> 00:09:37,449
management support it has serial support

190
00:09:37,449 --> 00:09:43,839
lip C++ also v CPU management and VM vmx

191
00:09:43,839 --> 00:09:47,740
project management so typically how you

192
00:09:47,740 --> 00:09:49,480
use bare frank is a kind of framework

193
00:09:49,480 --> 00:09:52,449
but he was careful where you scaffold

194
00:09:52,449 --> 00:09:55,329
your own hypervisors and then you

195
00:09:55,329 --> 00:09:58,899
develop correct vm exit handlers to

196
00:09:58,899 --> 00:10:02,860
support various operations and bad Frank

197
00:10:02,860 --> 00:10:07,149
was created for an interception and kind

198
00:10:07,149 --> 00:10:10,500
of the security research niche I believe

199
00:10:10,500 --> 00:10:12,939
and because of that it's a little bit

200
00:10:12,939 --> 00:10:14,620
differently scheme then we apply a tit

201
00:10:14,620 --> 00:10:20,129
but that's that's caused some future

202
00:10:20,129 --> 00:10:22,149
assumptions I would say our design

203
00:10:22,149 --> 00:10:25,809
assumptions ok so what we what we really

204
00:10:25,809 --> 00:10:26,889
built mmm

205
00:10:26,889 --> 00:10:30,550
that is VM I'm called delivery handle it

206
00:10:30,550 --> 00:10:34,600
is generated by the front decay you can

207
00:10:34,600 --> 00:10:39,790
say the bytecode is if we put white put

208
00:10:39,790 --> 00:10:43,329
into this VM MH is 88 thousand lies of

209
00:10:43,329 --> 00:10:44,709
course but it doesn't matter it's just

210
00:10:44,709 --> 00:10:48,279
white gold it's a 1.2 Mac without any

211
00:10:48,279 --> 00:10:50,680
customization so it's like out of the

212
00:10:50,680 --> 00:10:53,079
box we getting one point to make we

213
00:10:53,079 --> 00:10:55,120
created but front driver which is

214
00:10:55,120 --> 00:11:01,290
minimal C code which helps us who

215
00:11:01,290 --> 00:11:05,380
hook everything to launch virtual

216
00:11:05,380 --> 00:11:09,250
machines and it contains like for it

217
00:11:09,250 --> 00:11:11,440
fully contains around six hundred six

218
00:11:11,440 --> 00:11:14,170
thousand lines of code it required to

219
00:11:14,170 --> 00:11:15,880
live by load notifications because we

220
00:11:15,880 --> 00:11:17,980
payload which is required to build a

221
00:11:17,980 --> 00:11:20,650
payload was just that to beat and we had

222
00:11:20,650 --> 00:11:25,030
to extend it to support 64-bit and and

223
00:11:25,030 --> 00:11:27,850
other headers we had to import from bed

224
00:11:27,850 --> 00:11:29,680
length projects because we use functions

225
00:11:29,680 --> 00:11:31,930
from there so the tree looks like like

226
00:11:31,930 --> 00:11:34,990
you see here it's inside coreboot

227
00:11:34,990 --> 00:11:37,810
projects it's on our github you can use

228
00:11:37,810 --> 00:11:44,890
that a compiled and and test ok so

229
00:11:44,890 --> 00:11:49,840
typically bad Frank uses OS API if use

230
00:11:49,840 --> 00:11:51,460
it as a type to because bad ones can be

231
00:11:51,460 --> 00:11:53,340
used other various types of hypervisors

232
00:11:53,340 --> 00:11:56,980
if use it as a type type to it uses OS

233
00:11:56,980 --> 00:11:59,770
specific API if use it as type one it

234
00:11:59,770 --> 00:12:02,370
uses for example you Fe boot services

235
00:12:02,370 --> 00:12:06,460
but of course when we using code boot

236
00:12:06,460 --> 00:12:08,140
without your fat payload we don't have

237
00:12:08,140 --> 00:12:10,240
you fi boot services so we have to

238
00:12:10,240 --> 00:12:14,800
extend leap I load to support some

239
00:12:14,800 --> 00:12:17,190
support so we added support for sixty

240
00:12:17,190 --> 00:12:18,580
sixty four-bit

241
00:12:18,580 --> 00:12:21,540
we have that 64 bit exception hunting

242
00:12:21,540 --> 00:12:24,430
and of course the we didn't care too

243
00:12:24,430 --> 00:12:26,500
much about the device drivers this may

244
00:12:26,500 --> 00:12:30,190
still require some some fixes so we had

245
00:12:30,190 --> 00:12:35,590
some size problems because because we

246
00:12:35,590 --> 00:12:37,990
just have to if we boot some VM we just

247
00:12:37,990 --> 00:12:40,990
have to have something inside SPI we

248
00:12:40,990 --> 00:12:42,790
don't want to use disk for login

249
00:12:42,790 --> 00:12:45,850
conditional boot loaders or or anything

250
00:12:45,850 --> 00:12:47,920
else so we want to have everything spi

251
00:12:47,920 --> 00:12:50,890
and of course we need some additional

252
00:12:50,890 --> 00:12:55,030
stuff exe BIOS the hyper bar so hope you

253
00:12:55,030 --> 00:12:57,100
have to be there also we need coreboot

254
00:12:57,100 --> 00:12:59,500
there so it happens in and we have just

255
00:12:59,500 --> 00:13:02,590
eight mechs so we had to compress some

256
00:13:02,590 --> 00:13:07,570
stuff to to enable that ok what other

257
00:13:07,570 --> 00:13:09,490
problems we have one of the problems was

258
00:13:09,490 --> 00:13:14,019
that public tables are not modified by

259
00:13:14,019 --> 00:13:16,300
we payload so so code bootleg booze

260
00:13:16,300 --> 00:13:21,189
describe the modem up and and then this

261
00:13:21,189 --> 00:13:24,420
my modem up is use it by for example by

262
00:13:24,420 --> 00:13:29,679
my C BIOS so then we run payload which

263
00:13:29,679 --> 00:13:32,559
is our birth Frank hypervisor and then

264
00:13:32,559 --> 00:13:35,049
we payload just allocate some memory for

265
00:13:35,049 --> 00:13:41,290
example for for vmm and and if it if

266
00:13:41,290 --> 00:13:44,350
then C BIOS and of course lip I love do

267
00:13:44,350 --> 00:13:46,449
not modify code boot tables to indicate

268
00:13:46,449 --> 00:13:49,059
that that memory was allocated and then

269
00:13:49,059 --> 00:13:50,649
when we jumped over to our machine and

270
00:13:50,649 --> 00:13:53,170
try to use C BIOS which of course use

271
00:13:53,170 --> 00:13:56,170
coreboot tables then we can have problem

272
00:13:56,170 --> 00:13:58,509
because because that memory can be

273
00:13:58,509 --> 00:14:02,290
already corrupted so how we how we fix

274
00:14:02,290 --> 00:14:05,170
it that first of all at the coreboot

275
00:14:05,170 --> 00:14:07,149
level during the built we reserve some

276
00:14:07,149 --> 00:14:10,959
memory for vmm and this memory is just

277
00:14:10,959 --> 00:14:14,249
reserved at over whole whole time and

278
00:14:14,249 --> 00:14:20,230
then yeah that's the main fix so the

279
00:14:20,230 --> 00:14:22,329
compilation time it should be solved by

280
00:14:22,329 --> 00:14:24,809
a runtime solution but we didn't have

281
00:14:24,809 --> 00:14:29,559
enough type to apply that other problem

282
00:14:29,559 --> 00:14:33,910
that we faced was that vm x is like vm

283
00:14:33,910 --> 00:14:36,999
extensions have to be run on all course

284
00:14:36,999 --> 00:14:39,730
because if we if we have situation if

285
00:14:39,730 --> 00:14:43,720
one of the core does not run vm m then

286
00:14:43,720 --> 00:14:46,569
it some software which is there can

287
00:14:46,569 --> 00:14:48,730
corrupt in amore and we face the

288
00:14:48,730 --> 00:14:50,949
situation we didn't know what what

289
00:14:50,949 --> 00:14:54,040
exactly going on and after some time we

290
00:14:54,040 --> 00:14:57,549
realized that that at some core at four

291
00:14:57,549 --> 00:15:01,179
core we have we didn't run the extension

292
00:15:01,179 --> 00:15:03,730
and because of that we corrupt memory of

293
00:15:03,730 --> 00:15:09,999
other the ends or even vmm so so we had

294
00:15:09,999 --> 00:15:12,730
to implement into the payload NP code

295
00:15:12,730 --> 00:15:15,910
that gives ability to say okay I'll run

296
00:15:15,910 --> 00:15:18,189
the a week zone on this core on that car

297
00:15:18,189 --> 00:15:20,379
and the other car at remember to run on

298
00:15:20,379 --> 00:15:25,799
all course okay

299
00:15:26,890 --> 00:15:30,200
so the mostly talk about that but there

300
00:15:30,200 --> 00:15:32,270
is other solution for for this problem

301
00:15:32,270 --> 00:15:36,140
with carpet tables of course we can use

302
00:15:36,140 --> 00:15:40,670
EPT but but the problem is that of

303
00:15:40,670 --> 00:15:42,260
course Bertrand contains some support

304
00:15:42,260 --> 00:15:45,470
for that but the problem is that there

305
00:15:45,470 --> 00:15:47,360
was also a lot of things that you had to

306
00:15:47,360 --> 00:15:50,690
additionally implement to manage EPT

307
00:15:50,690 --> 00:15:54,860
correctly and of course this would have

308
00:15:54,860 --> 00:15:57,430
a significant significant impact on

309
00:15:57,430 --> 00:16:01,280
hypervisor size and we cannot approach

310
00:16:01,280 --> 00:16:03,440
that because we have limited the spi

311
00:16:03,440 --> 00:16:05,870
size we have just this 8 8 mag and we

312
00:16:05,870 --> 00:16:09,200
just put in gate couldn't end up yeah

313
00:16:09,200 --> 00:16:11,510
and it can be no sweet apple sweet a

314
00:16:11,510 --> 00:16:13,160
before embedded hypervisors because

315
00:16:13,160 --> 00:16:15,620
because of the spice limitation and

316
00:16:15,620 --> 00:16:20,450
probably performance so how the pile

317
00:16:20,450 --> 00:16:24,650
would look like and what is design what

318
00:16:24,650 --> 00:16:27,380
the components it has so as I said we

319
00:16:27,380 --> 00:16:29,000
starting with we cope with code boot and

320
00:16:29,000 --> 00:16:32,030
we have bad front payload inside we have

321
00:16:32,030 --> 00:16:33,880
this bad front driver

322
00:16:33,880 --> 00:16:37,010
we have driver and we have driver

323
00:16:37,010 --> 00:16:41,150
contain lead payload which provides us

324
00:16:41,150 --> 00:16:44,990
support for entry point for the 64 bit

325
00:16:44,990 --> 00:16:48,440
for some memory management of course we

326
00:16:48,440 --> 00:16:51,950
need CB FS functions to read to read C

327
00:16:51,950 --> 00:16:55,910
BFS and get any boot holder from there

328
00:16:55,910 --> 00:16:59,900
if you want to run yes and yeah and of

329
00:16:59,900 --> 00:17:01,820
course with the display load folder

330
00:17:01,820 --> 00:17:04,640
there and there is this logic like we

331
00:17:04,640 --> 00:17:07,940
first load the mm so we load on on the

332
00:17:07,940 --> 00:17:10,220
course that we want to run VM then we

333
00:17:10,220 --> 00:17:13,069
started and we start payloads inside

334
00:17:13,069 --> 00:17:16,880
given given VMs the the other problem

335
00:17:16,880 --> 00:17:18,859
that we had to here to solve here is

336
00:17:18,859 --> 00:17:21,619
this switching from 32 bits to 64 bit

337
00:17:21,619 --> 00:17:24,920
and then if needed my payload switching

338
00:17:24,920 --> 00:17:27,319
back to 32 bit for example C bias is

339
00:17:27,319 --> 00:17:29,030
that little bit so we have to speed back

340
00:17:29,030 --> 00:17:31,670
and this this kind of game had to be

341
00:17:31,670 --> 00:17:34,270
implemented

342
00:17:34,480 --> 00:17:37,820
okay so me

343
00:17:37,820 --> 00:17:41,150
I will try to describe what's going on

344
00:17:41,150 --> 00:17:53,380
with the demo okay

345
00:17:53,380 --> 00:17:58,460
so what you see here on the top left you

346
00:17:58,460 --> 00:18:02,990
have you have serial console of of the

347
00:18:02,990 --> 00:18:05,660
platform of the mini board and that we

348
00:18:05,660 --> 00:18:07,760
used for development and you will see

349
00:18:07,760 --> 00:18:10,580
that we will boot bed front it will boot

350
00:18:10,580 --> 00:18:12,860
bed front as a pilot room code boot so

351
00:18:12,860 --> 00:18:15,200
we boot in code book so it's I know that

352
00:18:15,200 --> 00:18:17,600
it's very hard to see but believe me

353
00:18:17,600 --> 00:18:20,410
that there will be bad funk here and

354
00:18:20,410 --> 00:18:23,230
yeah and bad prank right now starting

355
00:18:23,230 --> 00:18:28,130
VMs like for VMs one on each code and on

356
00:18:28,130 --> 00:18:31,460
one VM we see it it starts core info

357
00:18:31,460 --> 00:18:34,190
payload so this this is just basic

358
00:18:34,190 --> 00:18:36,080
payload of code boot with just show

359
00:18:36,080 --> 00:18:39,050
processor and its features you can also

360
00:18:39,050 --> 00:18:41,170
see that we have some memory reserved

361
00:18:41,170 --> 00:18:45,920
this is this is a memory reserved for

362
00:18:45,920 --> 00:18:54,890
vmm yeah so on the other core we start a

363
00:18:54,890 --> 00:18:58,690
Linux kernel which we want to show that

364
00:18:58,690 --> 00:19:01,760
after booting this Linux kernel we can

365
00:19:01,760 --> 00:19:04,310
on the same machine have access to Linux

366
00:19:04,310 --> 00:19:06,230
which is of course we don't have serial

367
00:19:06,230 --> 00:19:09,170
output we also didn't manage to enable

368
00:19:09,170 --> 00:19:13,520
any any video video output but we run

369
00:19:13,520 --> 00:19:19,030
some some service which will show that

370
00:19:19,030 --> 00:19:22,550
that this this vm really works with

371
00:19:22,550 --> 00:19:26,110
linux inside

372
00:19:34,750 --> 00:19:47,660
okay yeah we can have values we can have

373
00:19:47,660 --> 00:19:56,720
various payloads use it yeah we put

374
00:19:56,720 --> 00:19:59,990
Linux kernel in spi flash as well as in

375
00:19:59,990 --> 00:20:02,180
Tom FS so this machine does not require

376
00:20:02,180 --> 00:20:04,190
any additional storage it's directly

377
00:20:04,190 --> 00:20:08,360
from spy flash yeah there is not a lot

378
00:20:08,360 --> 00:20:14,780
of the space but still some so yeah so

379
00:20:14,780 --> 00:20:16,850
also this of course on this one core

380
00:20:16,850 --> 00:20:18,770
with limited my mother this Linux boots

381
00:20:18,770 --> 00:20:21,440
quite long like it takes like 40 seconds

382
00:20:21,440 --> 00:20:24,850
but this is this is this shows that

383
00:20:24,850 --> 00:20:29,450
exactly on that machine we have we have

384
00:20:29,450 --> 00:20:32,090
running Linux and we can tell that to it

385
00:20:32,090 --> 00:20:37,520
we can SSH to eat and even yeah it we

386
00:20:37,520 --> 00:20:45,680
can even run other other stuff so um so

387
00:20:45,680 --> 00:20:48,230
we we just build those two VMs one with

388
00:20:48,230 --> 00:20:51,290
core info payload and other with Linux

389
00:20:51,290 --> 00:20:54,680
kernel and I believe on this video we

390
00:20:54,680 --> 00:21:02,270
have also some inception yeah so you can

391
00:21:02,270 --> 00:21:04,640
see that it was my presentation was

392
00:21:04,640 --> 00:21:08,500
based around inside this Linux ok anyway

393
00:21:08,500 --> 00:21:13,160
let me close that okay this is

394
00:21:13,160 --> 00:21:15,350
description of the memory layout that

395
00:21:15,350 --> 00:21:18,470
that we used so on top you'll see vm 1

396
00:21:18,470 --> 00:21:23,000
how vm 1 C demo model so it's C coreboot

397
00:21:23,000 --> 00:21:25,730
tables some some reserve with memory

398
00:21:25,730 --> 00:21:30,320
which is for vm m if you see other area

399
00:21:30,320 --> 00:21:33,290
of reservatrol motor which is really a

400
00:21:33,290 --> 00:21:39,350
copy of the of the corbett tables to

401
00:21:39,350 --> 00:21:43,940
present that to the second VM and forth

402
00:21:43,940 --> 00:21:45,740
region is

403
00:21:45,740 --> 00:21:50,510
a CPI PCI and all that stuff of course

404
00:21:50,510 --> 00:21:53,179
there is no sophisticated device

405
00:21:53,179 --> 00:21:56,840
management and exposing those devices to

406
00:21:56,840 --> 00:21:59,660
VMs so if those devices together will

407
00:21:59,660 --> 00:22:01,370
try to talk with Hunt would probably

408
00:22:01,370 --> 00:22:03,770
elephant whiplash but anyway it is

409
00:22:03,770 --> 00:22:05,990
possible to implement that in hypervisor

410
00:22:05,990 --> 00:22:09,710
and second VM which is which is our

411
00:22:09,710 --> 00:22:12,500
Linux sees the memorial it will be

412
00:22:12,500 --> 00:22:14,770
different and this is this third line

413
00:22:14,770 --> 00:22:17,830
it's just see that the beginning is this

414
00:22:17,830 --> 00:22:22,760
this copy of the of the original area so

415
00:22:22,760 --> 00:22:28,429
and things that this so also it is in

416
00:22:28,429 --> 00:22:30,080
the same place in the same place you see

417
00:22:30,080 --> 00:22:34,720
vm v mm reserved memory so this is many

418
00:22:34,720 --> 00:22:38,960
not so what we would like to do with

419
00:22:38,960 --> 00:22:41,780
that in future so first of all the

420
00:22:41,780 --> 00:22:43,550
problem is that bad Frank is built

421
00:22:43,550 --> 00:22:46,700
completely as a separate project and you

422
00:22:46,700 --> 00:22:50,059
have to deliver components of that

423
00:22:50,059 --> 00:22:52,460
projects or artifacts of that building

424
00:22:52,460 --> 00:22:56,290
to the core boot and then do it manually

425
00:22:56,290 --> 00:23:03,980
we would like to integrate into boot so

426
00:23:03,980 --> 00:23:06,410
some configuration right now we have

427
00:23:06,410 --> 00:23:08,270
almost all configuration if everything

428
00:23:08,270 --> 00:23:11,570
is hard-coded so if you want to VMs in

429
00:23:11,570 --> 00:23:13,280
that configuration or just have to mono

430
00:23:13,280 --> 00:23:15,650
very hard code that of course this needs

431
00:23:15,650 --> 00:23:17,540
some customization someone would like to

432
00:23:17,540 --> 00:23:19,910
have three VMs or four VMs with values

433
00:23:19,910 --> 00:23:21,730
other payloads or for various other

434
00:23:21,730 --> 00:23:25,309
applications then of course this the

435
00:23:25,309 --> 00:23:28,400
configuration have to be extended we

436
00:23:28,400 --> 00:23:30,140
should improve the finish in memorium a

437
00:23:30,140 --> 00:23:33,679
pink so might be use of this EPT like

438
00:23:33,679 --> 00:23:36,890
flexible use of EPT and leveraging all

439
00:23:36,890 --> 00:23:39,110
the features of the platform would be

440
00:23:39,110 --> 00:23:42,410
needed of course the problem is also

441
00:23:42,410 --> 00:23:44,900
that bedrock is very fast moving target

442
00:23:44,900 --> 00:23:47,510
and sometimes there are big code drops

443
00:23:47,510 --> 00:23:49,340
like sixty thousand lines of code and

444
00:23:49,340 --> 00:23:52,850
you're just losing your your ground and

445
00:23:52,850 --> 00:23:55,760
because of that like we we frozen our

446
00:23:55,760 --> 00:23:58,669
code base in early 2019 it changed

447
00:23:58,669 --> 00:24:00,799
you can't leave from that time and we

448
00:24:00,799 --> 00:24:02,600
would like to rebase on the most recent

449
00:24:02,600 --> 00:24:04,460
version and of course it would be great

450
00:24:04,460 --> 00:24:06,409
to provide support for and for IMD

451
00:24:06,409 --> 00:24:09,499
platforms like I'm the getting a lot of

452
00:24:09,499 --> 00:24:11,960
traction recently and we are supporting

453
00:24:11,960 --> 00:24:15,259
2md in on other hardware so it would be

454
00:24:15,259 --> 00:24:19,159
great to enable that front there okay

455
00:24:19,159 --> 00:24:22,820
that's mostly very fast so I I thought

456
00:24:22,820 --> 00:24:26,299
that I will get to hardware demo it

457
00:24:26,299 --> 00:24:35,539
should take more time but this is it so

458
00:24:35,539 --> 00:24:40,249
this is a pair Frank based on existing

459
00:24:40,249 --> 00:24:42,169
code base or is this is a completely

460
00:24:42,169 --> 00:24:45,379
from scratch and this is sober Frank is

461
00:24:45,379 --> 00:24:48,679
a scaffolding quick as a scaffolding

462
00:24:48,679 --> 00:24:50,779
framework for building hypervisors and

463
00:24:50,779 --> 00:24:54,559
this is like clean build of like plus

464
00:24:54,559 --> 00:24:57,409
our me not modifications but everything

465
00:24:57,409 --> 00:25:00,230
is public it's not based on kV engine or

466
00:25:00,230 --> 00:25:04,279
a comb this is like black is completely

467
00:25:04,279 --> 00:25:07,460
other hypervisor is a lyric SDK for

468
00:25:07,460 --> 00:25:11,720
building hypervisor okay yeah okay so in

469
00:25:11,720 --> 00:25:15,019
this case we have application like one

470
00:25:15,019 --> 00:25:17,989
VM one partition does it also suitable

471
00:25:17,989 --> 00:25:21,830
for that purpose yeah like I believe

472
00:25:21,830 --> 00:25:24,619
like better Franco is good for for

473
00:25:24,619 --> 00:25:27,350
embedded environments it's not like for

474
00:25:27,350 --> 00:25:30,369
general purpose hypervisor environment

475
00:25:30,369 --> 00:25:38,899
Thanks so I've been having discussions

476
00:25:38,899 --> 00:25:41,659
with some people at Intel about and with

477
00:25:41,659 --> 00:25:44,779
Patrick Georgie in the past about maybe

478
00:25:44,779 --> 00:25:46,940
a more componentized Ram stage that will

479
00:25:46,940 --> 00:25:48,950
be loaded as a payload not a stage

480
00:25:48,950 --> 00:25:51,230
uh-huh would that be of any help and the

481
00:25:51,230 --> 00:25:52,700
kind of thing you're talking about or is

482
00:25:52,700 --> 00:25:55,100
it really not any connection I was just

483
00:25:55,100 --> 00:25:57,019
wondering if we could if we had more

484
00:25:57,019 --> 00:25:58,639
componentized Ram stage maybe we could

485
00:25:58,639 --> 00:26:00,080
build your bare flying stuff in more

486
00:26:00,080 --> 00:26:02,929
easily than we do is just an you know

487
00:26:02,929 --> 00:26:05,269
separate payload yeah yeah definitely

488
00:26:05,269 --> 00:26:08,840
like yeah that would help because we

489
00:26:08,840 --> 00:26:11,749
already had idea to integrate that into

490
00:26:11,749 --> 00:26:12,470
core boot

491
00:26:12,470 --> 00:26:14,990
I was like this was internal discussion

492
00:26:14,990 --> 00:26:17,360
entry and up and we argue rather that

493
00:26:17,360 --> 00:26:19,760
this would not be approved by corporate

494
00:26:19,760 --> 00:26:22,220
community because like you know like how

495
00:26:22,220 --> 00:26:25,429
it would be and so there was idea to it

496
00:26:25,429 --> 00:26:27,620
would be easier probably because we

497
00:26:27,620 --> 00:26:29,659
don't have pipe I load and all this game

498
00:26:29,659 --> 00:26:32,360
would be payload and I know there is

499
00:26:32,360 --> 00:26:34,700
also idea to have coreboot in 64 bits

500
00:26:34,700 --> 00:26:38,450
yeah so if that will also be implemented

501
00:26:38,450 --> 00:26:42,880
then we will have like two wins at least

502
00:26:48,159 --> 00:26:50,900
how difficult do you think it will be to

503
00:26:50,900 --> 00:26:53,480
reproduce something like what you've

504
00:26:53,480 --> 00:26:56,539
done on hypervisors that are a little

505
00:26:56,539 --> 00:26:58,610
bit more complex like let's say a core

506
00:26:58,610 --> 00:27:02,539
nodes then we try it that car like we

507
00:27:02,539 --> 00:27:06,530
give it a try and acorn is bloated to be

508
00:27:06,530 --> 00:27:09,950
honest like and there is service OS like

509
00:27:09,950 --> 00:27:12,919
it our idea was to start from SPI so

510
00:27:12,919 --> 00:27:17,179
like acorn for sure no zen is huge for

511
00:27:17,179 --> 00:27:20,780
x86 on arm is much smaller maybe would

512
00:27:20,780 --> 00:27:24,620
be possible to reproduce it so i know i

513
00:27:24,620 --> 00:27:26,990
know other things like maybe we didn't

514
00:27:26,990 --> 00:27:29,510
explore all the possible paths for

515
00:27:29,510 --> 00:27:31,700
embedded hypervisor for example recently

516
00:27:31,700 --> 00:27:35,960
i know that there is a work in f4 r e so

517
00:27:35,960 --> 00:27:38,570
those guys probably if someone from that

518
00:27:38,570 --> 00:27:40,970
environment probably can argue that this

519
00:27:40,970 --> 00:27:42,440
would be might be better solution

520
00:27:42,440 --> 00:27:44,809
because more components already you know

521
00:27:44,809 --> 00:27:47,630
if their flank will ever support iom you

522
00:27:47,630 --> 00:27:54,110
actually separate like native natively I

523
00:27:54,110 --> 00:27:58,280
don't know like you always can add that

524
00:27:58,280 --> 00:28:01,820
but it's kind of work additional work I

525
00:28:01,820 --> 00:28:04,280
don't think like they have idea of doing

526
00:28:04,280 --> 00:28:07,130
that natively so because I assume there

527
00:28:07,130 --> 00:28:09,919
would be need for driver and some way of

528
00:28:09,919 --> 00:28:11,960
configuring okay I want the separation

529
00:28:11,960 --> 00:28:14,120
the question is how it will play with

530
00:28:14,120 --> 00:28:18,320
varios hardware configurations yep we

531
00:28:18,320 --> 00:28:22,760
implemented the ETD support in efi like

532
00:28:22,760 --> 00:28:26,299
two years ago at Apple and it was really

533
00:28:26,299 --> 00:28:30,080
but when it works it does work so it

534
00:28:30,080 --> 00:28:32,690
works on almost all Intel systems we

535
00:28:32,690 --> 00:28:37,580
have now and the biggest difficulty was

536
00:28:37,580 --> 00:28:41,450
actually get the right people from

537
00:28:41,450 --> 00:28:44,839
mental to tell us how to debug out of

538
00:28:44,839 --> 00:28:49,249
things that have like not this there is

539
00:28:49,249 --> 00:28:51,200
no documentation for this corner and

540
00:28:51,200 --> 00:28:52,429
nobody knows

541
00:28:52,429 --> 00:28:56,029
yeah yeah so for an open-source I am

542
00:28:56,029 --> 00:28:58,219
actually I am looking forward for

543
00:28:58,219 --> 00:29:01,249
somebody to redo the work and then

544
00:29:01,249 --> 00:29:04,129
publish the license for it to be used as

545
00:29:04,129 --> 00:29:07,279
an only source because now I would like

546
00:29:07,279 --> 00:29:10,039
to have it somewhere and yeah I can't

547
00:29:10,039 --> 00:29:12,709
deliver so you know it would be great if

548
00:29:12,709 --> 00:29:14,479
you contribute that that to open-source

549
00:29:14,479 --> 00:29:16,519
but I believe this is a huge value for

550
00:29:16,519 --> 00:29:20,479
company I did stuff for em the last year

551
00:29:20,479 --> 00:29:22,639
I have a talk about MDI oh man mmm ooh

552
00:29:22,639 --> 00:29:24,829
and an eye blink on PC Angie's platform

553
00:29:24,829 --> 00:29:27,349
and yeah I I know the pain like I

554
00:29:27,349 --> 00:29:30,320
understand that and still there did it

555
00:29:30,320 --> 00:29:33,409
is buggy there we have some facing some

556
00:29:33,409 --> 00:29:34,969
corner cases where people complaining

557
00:29:34,969 --> 00:29:37,070
device is not work correctly when it's

558
00:29:37,070 --> 00:29:39,849
enabled by default

559
00:29:53,800 --> 00:29:57,080
could you a dynamic unit which is a

560
00:29:57,080 --> 00:30:00,020
memory allocation for example if wham

561
00:30:00,020 --> 00:30:03,020
bam needs a large memory or an underwear

562
00:30:03,020 --> 00:30:06,590
mean is a less memory so could you read

563
00:30:06,590 --> 00:30:08,710
a chest with a memory for each of em

564
00:30:08,710 --> 00:30:12,860
yeah not dynamically like not in a way

565
00:30:12,860 --> 00:30:14,900
no truant I'm like we're doing that it's

566
00:30:14,900 --> 00:30:19,310
hard coded this is reserve the memory

567
00:30:19,310 --> 00:30:20,750
for each memory in the beginning and

568
00:30:20,750 --> 00:30:23,630
then a change after that yes like you

569
00:30:23,630 --> 00:30:25,670
cannot change one time at least in

570
00:30:25,670 --> 00:30:27,350
current implementation tri means in the

571
00:30:27,350 --> 00:30:28,520
beginning you have to know the

572
00:30:28,520 --> 00:30:30,650
requirement for each of em a part of the

573
00:30:30,650 --> 00:30:32,600
memory that's not my requirement for

574
00:30:32,600 --> 00:30:35,360
embedded an embedded environment so in

575
00:30:35,360 --> 00:30:37,310
embedded hypervisor usage typically you

576
00:30:37,310 --> 00:30:40,340
know what VMs you want how many of them

577
00:30:40,340 --> 00:30:42,500
what resources they need what devices

578
00:30:42,500 --> 00:30:45,590
they need and this is a predefined

579
00:30:45,590 --> 00:30:48,580
environment

580
00:31:05,929 --> 00:31:07,610
apologize if I missed it it feels

581
00:31:07,610 --> 00:31:10,009
already in your presentation the first

582
00:31:10,009 --> 00:31:14,509
was what I don't believe that you talked

583
00:31:14,509 --> 00:31:19,159
about why you chose bare flank because

584
00:31:19,159 --> 00:31:21,259
we analyzed bad Frank versus our corn

585
00:31:21,259 --> 00:31:24,679
and decide that Frank fits our ability

586
00:31:24,679 --> 00:31:28,159
to customize to to our needs and it's

587
00:31:28,159 --> 00:31:30,649
small enough we can build hypervisor

588
00:31:30,649 --> 00:31:33,019
small enough to fit into an SPI ok

589
00:31:33,019 --> 00:31:34,129
thanks

590
00:31:34,129 --> 00:31:36,049
the other question I had was I you

591
00:31:36,049 --> 00:31:37,279
talked about other pieces that you were

592
00:31:37,279 --> 00:31:38,720
carrying I guess some hatches the

593
00:31:38,720 --> 00:31:41,570
Corbett and things like that or were you

594
00:31:41,570 --> 00:31:44,659
putting that in your own builds yeah we

595
00:31:44,659 --> 00:31:47,210
would be glad like Frank building

596
00:31:47,210 --> 00:31:51,019
environment is scenic based and you know

597
00:31:51,019 --> 00:31:53,360
like I don't know like how it will fit

598
00:31:53,360 --> 00:31:56,090
into the environment it also depends on

599
00:31:56,090 --> 00:31:59,779
on demand if there will be demand like

600
00:31:59,779 --> 00:32:02,450
we are pulling more willing to provide

601
00:32:02,450 --> 00:32:04,549
that right now it is integrated on on

602
00:32:04,549 --> 00:32:07,369
our cord put fork it's open it's like

603
00:32:07,369 --> 00:32:10,879
we've done high anything so but but you

604
00:32:10,879 --> 00:32:12,769
know I don't know when it may happen

605
00:32:12,769 --> 00:32:15,200
mm-hmm and in what for like because it

606
00:32:15,200 --> 00:32:17,389
depends on corporate community decisions

607
00:32:17,389 --> 00:32:18,580
okay

608
00:32:18,580 --> 00:32:22,730
so then are you carrying your 64-bit

609
00:32:22,730 --> 00:32:25,159
trampoline stub in your bear fling port

610
00:32:25,159 --> 00:32:25,759
as well

611
00:32:25,759 --> 00:32:28,730
likely payload I believe flip pilot will

612
00:32:28,730 --> 00:32:30,230
be contributed I don't know if we send

613
00:32:30,230 --> 00:32:32,539
patches already repellent will be

614
00:32:32,539 --> 00:32:34,460
contributed because there was a work

615
00:32:34,460 --> 00:32:36,470
about 64-bit

616
00:32:36,470 --> 00:32:39,320
rappel out and I believe more people can

617
00:32:39,320 --> 00:32:40,999
contribute than that bad Frank I don't

618
00:32:40,999 --> 00:32:42,529
know how many people really can

619
00:32:42,529 --> 00:32:45,860
contribute from that work like that's

620
00:32:45,860 --> 00:32:47,809
why I'm talking this giving this talk

621
00:32:47,809 --> 00:32:50,240
and to get some feedback if this is

622
00:32:50,240 --> 00:32:51,860
really interesting if this makes sense

623
00:32:51,860 --> 00:32:54,259
but I see quite a lot of you and I

624
00:32:54,259 --> 00:32:58,210
believe it makes sense Thanks

625
00:33:04,409 --> 00:33:07,470
I missed the beginning of the

626
00:33:07,470 --> 00:33:09,299
presentation so I don't know what is the

627
00:33:09,299 --> 00:33:11,309
size of bear flame compared like to

628
00:33:11,309 --> 00:33:14,159
Zhang for example I don't know if we can

629
00:33:14,159 --> 00:33:16,500
compare and if we should this is

630
00:33:16,500 --> 00:33:19,950
completely different so at one point to

631
00:33:19,950 --> 00:33:25,620
mic vmm and six thousand lines of code

632
00:33:25,620 --> 00:33:29,940
of the driver you can say like at the

633
00:33:29,940 --> 00:33:33,539
heart of the payload which 1000 line of

634
00:33:33,539 --> 00:33:35,580
code is the payload modification to

635
00:33:35,580 --> 00:33:39,330
support 64-bit and 800 lines are just

636
00:33:39,330 --> 00:33:41,190
copied from Bad flank because we need

637
00:33:41,190 --> 00:33:43,980
headers okay because I'm a contributor

638
00:33:43,980 --> 00:33:45,929
for the EADS project and before we

639
00:33:45,929 --> 00:33:48,990
needed to exam inside of the SPI flash

640
00:33:48,990 --> 00:33:52,200
because of constraint and with key exact

641
00:33:52,200 --> 00:33:53,879
being modified and everything we don't

642
00:33:53,879 --> 00:33:55,220
need

643
00:33:55,220 --> 00:33:58,500
why do i bill to succeed with that yeah

644
00:33:58,500 --> 00:34:00,960
what trial did it like John Watson it

645
00:34:00,960 --> 00:34:02,549
was working so if you want to check

646
00:34:02,549 --> 00:34:04,049
because like if you want something that

647
00:34:04,049 --> 00:34:06,179
is embedded and really small and pretty

648
00:34:06,179 --> 00:34:08,819
fun already like y-your machines that

649
00:34:08,819 --> 00:34:10,918
you want and everything like Zen seems

650
00:34:10,918 --> 00:34:16,079
to be able to do yeah but I thought it

651
00:34:16,079 --> 00:34:18,659
was like 2 1 1 Meg or something I don't

652
00:34:18,659 --> 00:34:20,429
know that the size conference of all of

653
00:34:20,429 --> 00:34:33,418
this but well I was questioning yeah so

654
00:34:33,418 --> 00:34:36,480
Zen will require zeros and and those

655
00:34:36,480 --> 00:34:38,849
zero is fully featured operating system

656
00:34:38,849 --> 00:34:42,530
and we don't really need that

657
00:34:42,530 --> 00:34:45,270
speaking of arm I mean there's actual

658
00:34:45,270 --> 00:34:46,980
Tom's zero less then now so like it's

659
00:34:46,980 --> 00:34:48,839
all evolving pretty quickly but you know

660
00:34:48,839 --> 00:34:51,300
that work that he's done it's still

661
00:34:51,300 --> 00:34:52,889
pretty big from what I understand you

662
00:34:52,889 --> 00:34:54,810
know for the purposes of the temptation

663
00:34:54,810 --> 00:34:59,250
yeah yes Anne was like too big for us in

664
00:34:59,250 --> 00:35:03,480
that case there are that there are some

665
00:35:03,480 --> 00:35:07,050
hypervisors coming which will kind of

666
00:35:07,050 --> 00:35:09,630
fulfill those requirements but they were

667
00:35:09,630 --> 00:35:13,520
not available at the point we developed

668
00:35:18,880 --> 00:35:23,870
we still have 10 more minutes so take

669
00:35:23,870 --> 00:35:25,720
the chance

670
00:35:25,720 --> 00:35:29,150
yeah and you want to have like me no

671
00:35:29,150 --> 00:35:31,220
board so power supply or something like

672
00:35:31,220 --> 00:35:31,460
that

673
00:35:31,460 --> 00:35:34,430
I just released my one and because of

674
00:35:34,430 --> 00:35:36,680
that I cannot show live demo why would I

675
00:35:36,680 --> 00:35:38,330
will just prove that this is real thing

676
00:35:38,330 --> 00:35:39,830
can be can switch this is quite cool

677
00:35:39,830 --> 00:35:42,320
that one on one side we have on Syria

678
00:35:42,320 --> 00:35:44,240
for example we have payload

679
00:35:44,240 --> 00:35:45,920
it's a be try to pay a lot of code but

680
00:35:45,920 --> 00:35:47,780
another side we have fully featured

681
00:35:47,780 --> 00:35:52,490
system yeah so it we were also surprised

682
00:35:52,490 --> 00:35:54,860
that Linux boot without to be honest

683
00:35:54,860 --> 00:36:02,870
much work using perfect calm okay yeah

684
00:36:02,870 --> 00:36:06,740
yeah sure sure sure but also if anyone

685
00:36:06,740 --> 00:36:09,080
would be interested in seeing that you

686
00:36:09,080 --> 00:36:11,240
know present that on hardware I would be

687
00:36:11,240 --> 00:36:20,840
glad to show that ok any questions right

688
00:36:20,840 --> 00:36:23,560
then thanks again

689
00:36:24,460 --> 00:36:27,869
[Applause]

690
00:36:28,170 --> 00:36:29,800
[Music]

691
00:36:29,800 --> 00:36:31,860
you

