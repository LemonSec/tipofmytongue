1
00:00:03,190 --> 00:00:10,350
[Music]

2
00:00:20,130 --> 00:00:23,039
before going - why do we need a a

3
00:00:23,039 --> 00:00:25,560
synchronous even notification for at

4
00:00:25,560 --> 00:00:26,039
fish

5
00:00:26,039 --> 00:00:29,429
what is there in current open BMC stack

6
00:00:29,429 --> 00:00:32,420
for asynchronous even notification

7
00:00:32,420 --> 00:00:36,350
currently we have two methods we have

8
00:00:36,350 --> 00:00:39,510
SNMP when notification as well as we

9
00:00:39,510 --> 00:00:42,899
have a rest event notification through

10
00:00:42,899 --> 00:00:46,260
the WebSockets but if we look into a

11
00:00:46,260 --> 00:00:50,539
like SNMP we are using a custom nip and

12
00:00:50,539 --> 00:00:53,910
we look at a rest so there is is that's

13
00:00:53,910 --> 00:00:58,170
not a standard so that's why like we

14
00:00:58,170 --> 00:01:00,239
thought of like we should do

15
00:01:00,239 --> 00:01:02,850
asynchronous even notification aware at

16
00:01:02,850 --> 00:01:09,750
fish so moving on to next slide yeah

17
00:01:09,750 --> 00:01:13,830
thank you so what is the motivation

18
00:01:13,830 --> 00:01:17,939
behind doing a like icing process of a

19
00:01:17,939 --> 00:01:20,820
when notification by a red fish first is

20
00:01:20,820 --> 00:01:24,780
red fish is gaining attraction for

21
00:01:24,780 --> 00:01:27,960
server management we need to notify that

22
00:01:27,960 --> 00:01:31,290
line for for the various event logs or

23
00:01:31,290 --> 00:01:34,189
error logs if it is there how to notify

24
00:01:34,189 --> 00:01:36,960
we need to notify the clients for for

25
00:01:36,960 --> 00:01:41,549
the telemetry data as well as if there

26
00:01:41,549 --> 00:01:44,549
is a some long-running operation like

27
00:01:44,549 --> 00:01:47,420
async operations which is there and we

28
00:01:47,420 --> 00:01:50,189
open a task create a task so once the

29
00:01:50,189 --> 00:01:52,290
task is completed how to notify it to

30
00:01:52,290 --> 00:01:54,479
the to the client so these are the some

31
00:01:54,479 --> 00:01:58,799
motivational factors for doing it why

32
00:01:58,799 --> 00:02:04,380
are at fish so what are the various

33
00:02:04,380 --> 00:02:06,090
eventing mechanism which is currently

34
00:02:06,090 --> 00:02:09,929
exist over HTTP so one is like normal

35
00:02:09,929 --> 00:02:12,750
pulling the SSE server-side events and

36
00:02:12,750 --> 00:02:13,980
the WebSockets

37
00:02:13,980 --> 00:02:16,200
so in in a polling if you look at right

38
00:02:16,200 --> 00:02:18,150
so we do our like a periodic polling

39
00:02:18,150 --> 00:02:20,790
where client is keep pulling for for a

40
00:02:20,790 --> 00:02:22,470
resource like but what is the state of

41
00:02:22,470 --> 00:02:25,620
the of a certain resource but that is

42
00:02:25,620 --> 00:02:29,250
pretty resource and intensive and the

43
00:02:29,250 --> 00:02:30,720
client doesn't get a like a real-time

44
00:02:30,720 --> 00:02:35,640
updates in a server sent events client

45
00:02:35,640 --> 00:02:36,959
open a connection and once the

46
00:02:36,959 --> 00:02:39,239
connection is open the server keeps

47
00:02:39,239 --> 00:02:44,370
sending a data over the connection if we

48
00:02:44,370 --> 00:02:45,720
talk about WebSockets

49
00:02:45,720 --> 00:02:48,030
you know WebSockets it's a it's a

50
00:02:48,030 --> 00:02:51,239
bi-directional protocol and WebSockets

51
00:02:51,239 --> 00:02:55,590
is its uses this own protocol only the

52
00:02:55,590 --> 00:02:59,760
handshake happens over HTTP and once the

53
00:02:59,760 --> 00:03:02,370
handshake happens it's a the WebSocket

54
00:03:02,370 --> 00:03:05,790
is chooses its own protocol but if you

55
00:03:05,790 --> 00:03:07,829
look at like a WebSockets

56
00:03:07,829 --> 00:03:09,810
it's a bi-directional but in the case of

57
00:03:09,810 --> 00:03:12,630
redfish where we just want like the

58
00:03:12,630 --> 00:03:14,760
server should notify it so we don't want

59
00:03:14,760 --> 00:03:17,209
a bi-directional communication protocol

60
00:03:17,209 --> 00:03:23,220
and the WebSockets is the normal like if

61
00:03:23,220 --> 00:03:24,870
there are legacy browsers they don't

62
00:03:24,870 --> 00:03:27,630
support web sockets but latest browsers

63
00:03:27,630 --> 00:03:31,139
they support suburb sockets so now

64
00:03:31,139 --> 00:03:33,780
coming back or like what are the

65
00:03:33,780 --> 00:03:36,859
different methods which redfish supports

66
00:03:36,859 --> 00:03:39,060
rat-faced supports to type of eventing

67
00:03:39,060 --> 00:03:40,769
the first one is the purchase styler

68
00:03:40,769 --> 00:03:44,329
venting in a purchase styler venting

69
00:03:44,329 --> 00:03:48,239
client makes a subscription request to

70
00:03:48,239 --> 00:03:50,579
the event service an event service

71
00:03:50,579 --> 00:03:53,239
internally creates a subscription and

72
00:03:53,239 --> 00:03:55,829
whenever if you look like the event

73
00:03:55,829 --> 00:03:57,389
monitor there is an internal event

74
00:03:57,389 --> 00:04:01,170
happen on a BMC it opens a connection to

75
00:04:01,170 --> 00:04:03,510
the subscribe client and sends the data

76
00:04:03,510 --> 00:04:07,290
to the client so this is the pushes

77
00:04:07,290 --> 00:04:14,370
styler venting so polling but but the

78
00:04:14,370 --> 00:04:16,168
negative is is a non secure channel and

79
00:04:16,168 --> 00:04:18,120
well and it's vulnerable to men in the

80
00:04:18,120 --> 00:04:21,870
middle attack and then connection cannot

81
00:04:21,870 --> 00:04:24,539
be kept alive indefinitely so means that

82
00:04:24,539 --> 00:04:27,570
TCP handshake normally takes longer

83
00:04:27,570 --> 00:04:29,670
so we need to make a opener connection

84
00:04:29,670 --> 00:04:31,050
and then send the UN data and then close

85
00:04:31,050 --> 00:04:34,640
the connection so that will take a long

86
00:04:35,960 --> 00:04:39,780
no next eventing reckon about it by red

87
00:04:39,780 --> 00:04:42,660
fishes server-sent events in a

88
00:04:42,660 --> 00:04:45,510
server-sent event the client makes a

89
00:04:45,510 --> 00:04:48,060
request to the event service to get the

90
00:04:48,060 --> 00:04:52,230
server sent uri once client gets a

91
00:04:52,230 --> 00:04:54,240
server sent uri client makes a request

92
00:04:54,240 --> 00:04:57,630
to get server sent uri that opens a

93
00:04:57,630 --> 00:05:00,390
connection internally event service

94
00:05:00,390 --> 00:05:02,850
creates a subscription request and any

95
00:05:02,850 --> 00:05:05,250
event occurs so whatsoever the channel

96
00:05:05,250 --> 00:05:08,070
was opened in a first step we will

97
00:05:08,070 --> 00:05:10,460
sending the data over the same channel

98
00:05:10,460 --> 00:05:13,470
it's a secure Channel and TCP

99
00:05:13,470 --> 00:05:15,720
connections needed only once and it's a

100
00:05:15,720 --> 00:05:18,420
single way communication so this is the

101
00:05:18,420 --> 00:05:25,560
server sent event so the redfish event

102
00:05:25,560 --> 00:05:27,990
modeling how does the redfish event

103
00:05:27,990 --> 00:05:32,130
model looks like this this PPD tells

104
00:05:32,130 --> 00:05:34,710
about there is a service route in a

105
00:05:34,710 --> 00:05:36,480
service route the redfish service route

106
00:05:36,480 --> 00:05:38,820
which is nothing is your redfish v1

107
00:05:38,820 --> 00:05:41,610
doing a get request on a redfish v1

108
00:05:41,610 --> 00:05:44,670
tells you there is a event service if

109
00:05:44,670 --> 00:05:46,050
the event service is supported by the

110
00:05:46,050 --> 00:05:49,320
open BMC implementation event service

111
00:05:49,320 --> 00:05:51,810
contains a subscription which is a

112
00:05:51,810 --> 00:05:53,880
collection object and the connection can

113
00:05:53,880 --> 00:05:56,070
have a multiple subscription the

114
00:05:56,070 --> 00:05:57,960
subscription is nothing is your redfish

115
00:05:57,960 --> 00:06:01,590
endpoints where the event need to be

116
00:06:01,590 --> 00:06:04,500
sent and the service route will be

117
00:06:04,500 --> 00:06:07,260
having a message registries again it's a

118
00:06:07,260 --> 00:06:09,300
collection and the master registries

119
00:06:09,300 --> 00:06:12,090
will be having multiple registries these

120
00:06:12,090 --> 00:06:16,250
registries would be used like the masses

121
00:06:16,250 --> 00:06:18,540
when we create an event message the

122
00:06:18,540 --> 00:06:20,220
youant message will be having a

123
00:06:20,220 --> 00:06:22,470
registries ID and the message would be

124
00:06:22,470 --> 00:06:24,840
comes constructed with the use of

125
00:06:24,840 --> 00:06:28,110
registries and we have the event

126
00:06:28,110 --> 00:06:30,990
modeling the event resource we have so

127
00:06:30,990 --> 00:06:34,200
this is the redfish event service model

128
00:06:34,200 --> 00:06:39,990
map so when we fire a request on our

129
00:06:39,990 --> 00:06:41,310
event service these are

130
00:06:41,310 --> 00:06:43,500
some certain important parameters in a

131
00:06:43,500 --> 00:06:47,340
event service if you look into if it is

132
00:06:47,340 --> 00:06:49,770
a pushes style event we have bothered

133
00:06:49,770 --> 00:06:51,690
about server sent URI which is

134
00:06:51,690 --> 00:06:55,980
highlighted in green and then if we talk

135
00:06:55,980 --> 00:06:58,110
about a pushes styler venting we look

136
00:06:58,110 --> 00:07:00,330
for like a subscription object so client

137
00:07:00,330 --> 00:07:02,070
makes a post request on a subscription

138
00:07:02,070 --> 00:07:05,910
to create a subscription request the

139
00:07:05,910 --> 00:07:08,370
event service also tells about what are

140
00:07:08,370 --> 00:07:11,010
the event format types supported by the

141
00:07:11,010 --> 00:07:13,650
event service could be event and the

142
00:07:13,650 --> 00:07:15,810
metric report the metric report is a

143
00:07:15,810 --> 00:07:20,130
telemetry report resource types resource

144
00:07:20,130 --> 00:07:24,120
type tells what kind of resources this

145
00:07:24,120 --> 00:07:26,190
event service supports and resource

146
00:07:26,190 --> 00:07:28,710
types is all the resources supported by

147
00:07:28,710 --> 00:07:32,130
the red fish could be account service or

148
00:07:32,130 --> 00:07:34,740
could be network or anything else just

149
00:07:34,740 --> 00:07:40,290
see so this is the even service that

150
00:07:40,290 --> 00:07:46,220
delivery retry attempts tells if the BMC

151
00:07:46,220 --> 00:07:50,070
tries to send a data to the subscript

152
00:07:50,070 --> 00:07:52,140
subscribe declined and it gets failed

153
00:07:52,140 --> 00:07:54,390
how many times the retry will be happen

154
00:07:54,390 --> 00:07:56,660
and similarly for the interval seconds

155
00:07:56,660 --> 00:07:58,920
like what would be the retry interval

156
00:07:58,920 --> 00:08:05,160
before attempting secondary try moving

157
00:08:05,160 --> 00:08:09,170
on to event subscription client can

158
00:08:09,170 --> 00:08:12,570
subscribed like making a post request

159
00:08:12,570 --> 00:08:15,120
while it makes a post request what what

160
00:08:15,120 --> 00:08:17,070
are the what are the parameters which it

161
00:08:17,070 --> 00:08:22,080
has to give the destination where like

162
00:08:22,080 --> 00:08:25,190
the client has to send the event back

163
00:08:25,190 --> 00:08:29,280
contacts is pretty like when you are

164
00:08:29,280 --> 00:08:31,500
sending the data the client can ask okay

165
00:08:31,500 --> 00:08:33,419
this is my context and we need to send

166
00:08:33,419 --> 00:08:36,059
the same context as part of as part of

167
00:08:36,059 --> 00:08:40,220
the response resource type client can

168
00:08:40,220 --> 00:08:44,100
the in event service if you look at it

169
00:08:44,100 --> 00:08:45,720
was telling like what are the supported

170
00:08:45,720 --> 00:08:48,090
resource types in a subscription client

171
00:08:48,090 --> 00:08:49,800
can save from the supported resource

172
00:08:49,800 --> 00:08:51,720
types I am only interested on certain

173
00:08:51,720 --> 00:08:54,810
the source type and they even format

174
00:08:54,810 --> 00:08:55,260
type like

175
00:08:55,260 --> 00:08:57,180
can say I am only interested in a any

176
00:08:57,180 --> 00:08:59,100
event I'm not interested in a metric

177
00:08:59,100 --> 00:09:06,540
report so this is event subscription the

178
00:09:06,540 --> 00:09:10,860
event message event message contains the

179
00:09:10,860 --> 00:09:13,740
events are it on an event sorry if we

180
00:09:13,740 --> 00:09:16,830
see like it tells about the event type

181
00:09:16,830 --> 00:09:19,230
the message what is the message of the

182
00:09:19,230 --> 00:09:23,610
event and the message ID message ID if

183
00:09:23,610 --> 00:09:26,310
you look into it this is when we talk

184
00:09:26,310 --> 00:09:28,380
about registries so it's either a

185
00:09:28,380 --> 00:09:31,560
history ID and there is a veces

186
00:09:31,560 --> 00:09:33,990
arguments which is again it depends upon

187
00:09:33,990 --> 00:09:38,640
the registry message registries so this

188
00:09:38,640 --> 00:09:43,620
is our event message so we saw in a

189
00:09:43,620 --> 00:09:47,130
previous slide the message ID was alert

190
00:09:47,130 --> 00:09:49,350
one zero land disconnect so what does

191
00:09:49,350 --> 00:09:53,100
that mean if you look into the message

192
00:09:53,100 --> 00:09:57,300
ID so alert is a is the registry alert

193
00:09:57,300 --> 00:09:59,850
tells it's a registry ID I will say

194
00:09:59,850 --> 00:10:02,910
registry type 1.0 is a version and the

195
00:10:02,910 --> 00:10:05,010
land disconnect is a it's a it's a

196
00:10:05,010 --> 00:10:05,580
message ID

197
00:10:05,580 --> 00:10:09,720
it's a registry ID so how the how like

198
00:10:09,720 --> 00:10:11,490
whenever the client gets this message

199
00:10:11,490 --> 00:10:13,980
and defier it knows how to how to fetch

200
00:10:13,980 --> 00:10:17,540
that it out how to construct the message

201
00:10:17,840 --> 00:10:20,760
so this is the massive registry okay

202
00:10:20,760 --> 00:10:25,940
let's moving on so we did a quick POC

203
00:10:25,940 --> 00:10:29,130
sorry we did a cue POC on the on the

204
00:10:29,130 --> 00:10:38,100
same what we did is like we open a we

205
00:10:38,100 --> 00:10:41,580
open a like a connection before making a

206
00:10:41,580 --> 00:10:43,980
connection we need a session so if you

207
00:10:43,980 --> 00:10:47,970
look into it like we did a B opener like

208
00:10:47,970 --> 00:10:51,090
a connection and then we give a like a X

209
00:10:51,090 --> 00:10:54,720
authentication token and our this this

210
00:10:54,720 --> 00:10:58,140
POC is for SSE so we need a server sent

211
00:10:58,140 --> 00:11:01,380
URI the redfish v1 SS events is a it's a

212
00:11:01,380 --> 00:11:04,470
server sent URI so climb keeps waiting

213
00:11:04,470 --> 00:11:08,010
on this on this URI and if you look at

214
00:11:08,010 --> 00:11:10,280
into

215
00:11:10,620 --> 00:11:12,810
the other side of the window is is a BMC

216
00:11:12,810 --> 00:11:16,140
where we fire a require where we what we

217
00:11:16,140 --> 00:11:18,930
did is like we created a user like say

218
00:11:18,930 --> 00:11:20,550
like test user or something we created

219
00:11:20,550 --> 00:11:23,220
it and we go to get a notification here

220
00:11:23,220 --> 00:11:25,770
ok this user has been created that the

221
00:11:25,770 --> 00:11:28,410
source added event we got it so this was

222
00:11:28,410 --> 00:11:30,930
the POC which we did it for the for the

223
00:11:30,930 --> 00:11:52,740
SSE any question answer so the client

224
00:11:52,740 --> 00:11:54,600
loses a connection in the case of SSE

225
00:11:54,600 --> 00:11:58,530
event so normally that client because

226
00:11:58,530 --> 00:11:59,910
it's a the connection has lost the

227
00:11:59,910 --> 00:12:01,980
socket has been closed the client will

228
00:12:01,980 --> 00:12:03,570
next time when the client comes up it

229
00:12:03,570 --> 00:12:06,390
says last event ID I got this so now the

230
00:12:06,390 --> 00:12:09,240
server whatsoever the event ID is there

231
00:12:09,240 --> 00:12:11,130
from the last event ID the client will

232
00:12:11,130 --> 00:12:12,810
say the server will the BMC will send

233
00:12:12,810 --> 00:12:15,290
although all the messages all the events

234
00:12:15,290 --> 00:12:17,940
on the server side that it has persists

235
00:12:17,940 --> 00:12:20,160
yep has the buffer

236
00:12:20,160 --> 00:12:22,140
yeah so it is like suppose like the last

237
00:12:22,140 --> 00:12:26,640
event ID was say - and like on on a BMC

238
00:12:26,640 --> 00:12:28,350
there are there are like suppose 100 of

239
00:12:28,350 --> 00:12:30,090
events has been generated after that and

240
00:12:30,090 --> 00:12:31,740
because of there are some persistent

241
00:12:31,740 --> 00:12:33,300
issue like there will be certain limit

242
00:12:33,300 --> 00:12:35,790
and suppose the BMC is persisting now

243
00:12:35,790 --> 00:12:38,940
from n 200 so it will send from 10 200

244
00:12:38,940 --> 00:12:42,020
thank you

245
00:12:48,630 --> 00:12:51,240
follow up on that question so if it's

246
00:12:51,240 --> 00:12:55,680
asynchronous is the ideas sequential do

247
00:12:55,680 --> 00:12:58,440
you mean to say event IDs yes yes so if

248
00:12:58,440 --> 00:13:00,990
I get in any shock there is no way I get

249
00:13:00,990 --> 00:13:03,900
an event in an in sequential I I mean

250
00:13:03,900 --> 00:13:05,280
they're sequential ideas always

251
00:13:05,280 --> 00:13:07,040
preserved when I get it from server

252
00:13:07,040 --> 00:13:08,820
sorry you didn't get you can come back

253
00:13:08,820 --> 00:13:11,130
if it's an asynchronous event and

254
00:13:11,130 --> 00:13:13,440
mechanism huh so it's possible that I

255
00:13:13,440 --> 00:13:16,170
would get the events in and in out of

256
00:13:16,170 --> 00:13:17,580
order right

257
00:13:17,580 --> 00:13:20,600
no because that connection is over TCP

258
00:13:20,600 --> 00:13:25,820
the connection is not UDP okay

259
00:13:33,910 --> 00:13:36,200
we still do have a couple few more

260
00:13:36,200 --> 00:13:39,410
minutes so feel free to ask more

261
00:13:39,410 --> 00:13:42,760
questions and queue up at the mics

262
00:13:50,110 --> 00:13:51,610
thanks just the follow-up question to

263
00:13:51,610 --> 00:13:54,460
what I had before did you say that the

264
00:13:54,460 --> 00:13:56,740
client can actually filter some filter

265
00:13:56,740 --> 00:13:58,180
for certain events yep

266
00:13:58,180 --> 00:13:59,410
so you can say I only want to know like

267
00:13:59,410 --> 00:14:02,980
a new user events for example in that

268
00:14:02,980 --> 00:14:05,140
case how do the event IDs work if you're

269
00:14:05,140 --> 00:14:06,880
getting only a subset of the full events

270
00:14:06,880 --> 00:14:07,900
that happen on the server

271
00:14:07,900 --> 00:14:11,980
mm-hmm so whenever because like there's

272
00:14:11,980 --> 00:14:14,140
a subscription request in a subscription

273
00:14:14,140 --> 00:14:15,850
request client tells I am interested

274
00:14:15,850 --> 00:14:18,010
only in this event and last time if

275
00:14:18,010 --> 00:14:21,130
client gets say like event ID number one

276
00:14:21,130 --> 00:14:23,410
and we have like on the BMC there is a

277
00:14:23,410 --> 00:14:25,960
less stuff like hundred of events so in

278
00:14:25,960 --> 00:14:28,240
hundred of the events the BMC will look

279
00:14:28,240 --> 00:14:28,870
into it

280
00:14:28,870 --> 00:14:31,300
oh this this particular subscription or

281
00:14:31,300 --> 00:14:32,860
this particular destination is only

282
00:14:32,860 --> 00:14:35,080
looking for the account events so from

283
00:14:35,080 --> 00:14:37,630
these like available events the BMC will

284
00:14:37,630 --> 00:14:40,120
send only the interest rate events I say

285
00:14:40,120 --> 00:14:43,180
so the event ID is really specific to

286
00:14:43,180 --> 00:14:46,300
the subscription yes and all the events

287
00:14:46,300 --> 00:14:51,520
in general yes okay thanks so on follow

288
00:14:51,520 --> 00:14:54,490
up on the same questions so if I have

289
00:14:54,490 --> 00:14:56,500
asked for filtering the certain events

290
00:14:56,500 --> 00:14:59,770
what will happen to the other rest of

291
00:14:59,770 --> 00:15:03,330
the events can I ask them next time or

292
00:15:03,330 --> 00:15:06,340
repost so think of there could be like

293
00:15:06,340 --> 00:15:09,610
on multiple connected lines one of the

294
00:15:09,610 --> 00:15:12,220
client is interested for account events

295
00:15:12,220 --> 00:15:13,780
the other guys interested in alsace

296
00:15:13,780 --> 00:15:16,360
events so even like on the on the BNC

297
00:15:16,360 --> 00:15:18,850
there are all the events depends upon

298
00:15:18,850 --> 00:15:20,890
what client is interested we will be

299
00:15:20,890 --> 00:15:23,500
sending event so how does this client

300
00:15:23,500 --> 00:15:25,140
and the event ID works on multiple

301
00:15:25,140 --> 00:15:28,900
requests so so so as I said like it's a

302
00:15:28,900 --> 00:15:31,990
sequential number so say like okay last

303
00:15:31,990 --> 00:15:34,420
time the my client number one say I

304
00:15:34,420 --> 00:15:36,940
gotta like a human ID number two and

305
00:15:36,940 --> 00:15:38,920
like I got a disconnect and after

306
00:15:38,920 --> 00:15:40,600
disconnect whatsoever my interested

307
00:15:40,600 --> 00:15:43,240
events I am looking for so like after

308
00:15:43,240 --> 00:15:46,180
two whatsoever like say various like

309
00:15:46,180 --> 00:15:48,130
various account events are there so

310
00:15:48,130 --> 00:15:49,780
after two whatsoever is there like say 5

311
00:15:49,780 --> 00:15:51,640
10 or 11 whatsoever is there you you

312
00:15:51,640 --> 00:15:53,440
keep sending and if multiple clients are

313
00:15:53,440 --> 00:15:56,290
interested in the same event you can set

314
00:15:56,290 --> 00:16:01,150
it so you can still filter okay thank

315
00:16:01,150 --> 00:16:03,209
you

316
00:16:13,690 --> 00:16:15,880
does the eventing scale with the number

317
00:16:15,880 --> 00:16:18,040
of subscriptions well because it seems

318
00:16:18,040 --> 00:16:20,380
like for every event you have to check

319
00:16:20,380 --> 00:16:22,450
through all the subscriptions in order

320
00:16:22,450 --> 00:16:24,730
to see whether or not that they are

321
00:16:24,730 --> 00:16:27,250
relevant for the subscription so it

322
00:16:27,250 --> 00:16:30,100
seems that if you have thousands of

323
00:16:30,100 --> 00:16:31,600
subscriptions it would slow down the

324
00:16:31,600 --> 00:16:34,180
event acquired a thousand of

325
00:16:34,180 --> 00:16:35,770
subscriptions like you are saying like

326
00:16:35,770 --> 00:16:38,290
thousands of clients are listening for

327
00:16:38,290 --> 00:16:40,390
the events possibly because the cloud

328
00:16:40,390 --> 00:16:43,270
services yeah yeah so in that case yes

329
00:16:43,270 --> 00:16:45,940
if it is yes so because that thousand

330
00:16:45,940 --> 00:16:48,040
TCP connections would be there yes it

331
00:16:48,040 --> 00:16:50,250
would

332
00:16:59,700 --> 00:17:02,050
okay I guess that's it then thank you

333
00:17:02,050 --> 00:17:04,379
very much

334
00:17:04,650 --> 00:17:12,369
[Music]

