1
00:00:03,190 --> 00:00:06,259
[Music]

2
00:00:07,010 --> 00:00:09,750
so our first speaker today is Gunnar

3
00:00:09,750 --> 00:00:12,179
Mills he's a software engineer from IBM

4
00:00:12,179 --> 00:00:14,940
who maintains four repositories in open

5
00:00:14,940 --> 00:00:17,220
BMC including the web interface

6
00:00:17,220 --> 00:00:19,560
repository so we July goes today about

7
00:00:19,560 --> 00:00:28,619
redfish on open BNC Gunnar Mills from

8
00:00:28,619 --> 00:00:31,349
IBM I'm going to talk about redfish on

9
00:00:31,349 --> 00:00:37,350
open BMC I'm gonna start with what is

10
00:00:37,350 --> 00:00:39,739
redfish and getting started with redfish

11
00:00:39,739 --> 00:00:43,100
gonna move on to open BMC's redfish

12
00:00:43,100 --> 00:00:47,100
implementation open BMC releases and how

13
00:00:47,100 --> 00:00:51,620
they tie to redfish and then finish with

14
00:00:51,620 --> 00:00:55,469
redfish data model redfish sessions and

15
00:00:55,469 --> 00:01:01,800
redfish major collections what is red

16
00:01:01,800 --> 00:01:06,920
fish red fish is a industry standard

17
00:01:06,920 --> 00:01:10,680
spec for Hardware management it's

18
00:01:10,680 --> 00:01:14,850
defined by the DMT F distributed

19
00:01:14,850 --> 00:01:19,799
management task force the DMT F was

20
00:01:19,799 --> 00:01:24,630
formed in 1992 it has many other

21
00:01:24,630 --> 00:01:31,670
standards including p LD m MC TP smash

22
00:01:31,670 --> 00:01:35,759
the redfish forum or redfish group was

23
00:01:35,759 --> 00:01:42,750
formed in 2014 with the first spec

24
00:01:42,750 --> 00:01:48,899
coming out in 2015 the latest is 20 19.2

25
00:01:48,899 --> 00:01:52,409
which is due out this quarter third

26
00:01:52,409 --> 00:01:56,189
quarter twenty nineteen thirty companies

27
00:01:56,189 --> 00:02:02,640
make up the redfish group there's two

28
00:02:02,640 --> 00:02:06,570
tiers there's a promoter tier and a

29
00:02:06,570 --> 00:02:09,270
supporter tier the top ten companies

30
00:02:09,270 --> 00:02:12,780
there are promoter companies and then

31
00:02:12,780 --> 00:02:13,950
the bottom 20

32
00:02:13,950 --> 00:02:17,010
our supporting companies and it's kind

33
00:02:17,010 --> 00:02:20,819
of who you would expect in the system

34
00:02:20,819 --> 00:02:23,390
management

35
00:02:23,390 --> 00:02:30,019
Broadcom Cisco Dell HPE intel lenovo arm

36
00:02:30,019 --> 00:02:34,950
Google IBM Western Digital and so the

37
00:02:34,950 --> 00:02:38,910
first release of red fish was focused on

38
00:02:38,910 --> 00:02:43,530
servers it was intended to meet the Open

39
00:02:43,530 --> 00:02:46,590
Compute projects remote machine

40
00:02:46,590 --> 00:02:50,370
management requirement and it's billed

41
00:02:50,370 --> 00:02:55,579
as a replacement for IPMI 20 year old

42
00:02:55,579 --> 00:02:58,560
standard which as discussed yesterday

43
00:02:58,560 --> 00:03:05,160
has some problems and there's a new red

44
00:03:05,160 --> 00:03:09,060
fish back every four months and red fish

45
00:03:09,060 --> 00:03:10,709
is working with several other

46
00:03:10,709 --> 00:03:15,680
organizations to further expand the spec

47
00:03:15,680 --> 00:03:21,239
and although the first red fish spec was

48
00:03:21,239 --> 00:03:25,769
focused on servers it's grown it now

49
00:03:25,769 --> 00:03:30,500
includes schemas for BIOS and disk and

50
00:03:30,500 --> 00:03:41,280
volume and PCI device zones so red fish

51
00:03:41,280 --> 00:03:46,350
is a REST API representational state

52
00:03:46,350 --> 00:03:53,639
transfer it uses HTTP the web protocol a

53
00:03:53,639 --> 00:03:59,790
safe protocol it uses JSON with its

54
00:03:59,790 --> 00:04:03,540
modern language support and all of these

55
00:04:03,540 --> 00:04:08,010
are are well known widely used so your

56
00:04:08,010 --> 00:04:14,310
system management then can be performed

57
00:04:14,310 --> 00:04:16,529
using the same skills in the same tool

58
00:04:16,529 --> 00:04:23,010
chain as other IT tasks red fish uses

59
00:04:23,010 --> 00:04:27,870
the crud operations from rest HTTP

60
00:04:27,870 --> 00:04:32,070
methods so posts for create it also uses

61
00:04:32,070 --> 00:04:35,370
post for action I'll talk more about

62
00:04:35,370 --> 00:04:38,729
that later get four read put in patch

63
00:04:38,729 --> 00:04:41,220
for update and delete to delete a

64
00:04:41,220 --> 00:04:47,310
resource redfish uses the open data

65
00:04:47,310 --> 00:04:52,380
protocol and it's usable by apps gooeys

66
00:04:52,380 --> 00:04:56,130
browser plugins and scripts extendable

67
00:04:56,130 --> 00:05:00,620
secure and redfish has 80 plus schemas

68
00:05:00,620 --> 00:05:04,169
2,000 plus properties most are optional

69
00:05:04,169 --> 00:05:08,460
so there's the Open Compute Project

70
00:05:08,460 --> 00:05:11,460
server and baseline management device

71
00:05:11,460 --> 00:05:13,860
profiles you can target these for an

72
00:05:13,860 --> 00:05:15,479
implementation and there's tooling

73
00:05:15,479 --> 00:05:20,280
around this and there's many open source

74
00:05:20,280 --> 00:05:22,500
tools around redfish there's redfish

75
00:05:22,500 --> 00:05:26,130
tool it's a command-line tool for

76
00:05:26,130 --> 00:05:29,940
interacting with a redfish API and then

77
00:05:29,940 --> 00:05:32,100
there's the redfish service validator

78
00:05:32,100 --> 00:05:37,229
it's for checking redfish implementation

79
00:05:37,229 --> 00:05:45,889
against the schemas and so this is a

80
00:05:45,889 --> 00:05:54,750
redfish validator run it's a recent open

81
00:05:54,750 --> 00:05:59,039
BMC master build our current master in

82
00:05:59,039 --> 00:06:02,160
open BMC passes with no redfish

83
00:06:02,160 --> 00:06:05,639
validator errors and we run the redfish

84
00:06:05,639 --> 00:06:09,570
service validator in CI against an IBM

85
00:06:09,570 --> 00:06:13,800
power systems Witherspoon and James was

86
00:06:13,800 --> 00:06:20,270
saying at the apts we were the only

87
00:06:20,270 --> 00:06:22,789
implementation of redfish to pass

88
00:06:22,789 --> 00:06:25,320
completely without any redfish validator

89
00:06:25,320 --> 00:06:30,500
airs what Oh

90
00:06:38,580 --> 00:06:40,259
I've included some links for getting

91
00:06:40,259 --> 00:06:43,379
started with redfish the first is the

92
00:06:43,379 --> 00:06:46,139
redfish standard and if your company's

93
00:06:46,139 --> 00:06:52,169
one of the redfish forum members you can

94
00:06:52,169 --> 00:06:53,909
sign up here

95
00:06:53,909 --> 00:06:56,999
the second link is to the developer hub

96
00:06:56,999 --> 00:06:58,979
here you'll find things like the

97
00:06:58,979 --> 00:07:02,550
mock-ups and the schemas the third link

98
00:07:02,550 --> 00:07:05,759
is the github private repo for redfish

99
00:07:05,759 --> 00:07:08,939
to get access to this you have to be

100
00:07:08,939 --> 00:07:10,710
part of the redfish forum so you'd use

101
00:07:10,710 --> 00:07:14,610
the first link to sign up and then the

102
00:07:14,610 --> 00:07:18,419
last link is a link to one of the

103
00:07:18,419 --> 00:07:20,610
mock-ups it's the simple rack-mounted

104
00:07:20,610 --> 00:07:26,999
server this is just a few of the schemas

105
00:07:26,999 --> 00:07:40,110
for redfish BIOS certificate this is a

106
00:07:40,110 --> 00:07:44,009
screenshot of the simple rack-mounted

107
00:07:44,009 --> 00:07:49,770
server make up its of the processor

108
00:07:49,770 --> 00:07:53,849
resource and you see properties in here

109
00:07:53,849 --> 00:07:55,620
that you would expect with a processor

110
00:07:55,620 --> 00:07:59,599
data model a processor architecture

111
00:07:59,599 --> 00:08:10,409
instruction set manufacturer model open

112
00:08:10,409 --> 00:08:14,430
vm sees redfish implementation BMC is

113
00:08:14,430 --> 00:08:16,919
our web server and it's where the

114
00:08:16,919 --> 00:08:24,120
support for redfish is being added intel

115
00:08:24,120 --> 00:08:29,719
maintains BMC web james add an e d

116
00:08:29,719 --> 00:08:33,078
described BMC web as a do-everything

117
00:08:33,078 --> 00:08:35,309
embedded web server

118
00:08:35,309 --> 00:08:42,389
BMC web is configurable authentication

119
00:08:42,389 --> 00:08:46,350
middleware virtual media caveum over

120
00:08:46,350 --> 00:08:49,510
WebSockets it exposes the

121
00:08:49,510 --> 00:08:53,200
phoebus interfaces to rest for now I

122
00:08:53,200 --> 00:08:55,390
kind of talked about this more later but

123
00:08:55,390 --> 00:08:58,780
will eventually move away from that and

124
00:08:58,780 --> 00:09:01,780
it's static file hosting for the the web

125
00:09:01,780 --> 00:09:03,220
interface

126
00:09:03,220 --> 00:09:07,510
BMC web is async and it replaces foster

127
00:09:07,510 --> 00:09:12,160
arrest server Python based web server

128
00:09:12,160 --> 00:09:17,340
BMC web uses boost beast and with

129
00:09:17,340 --> 00:09:22,090
redfish we're adding a translation layer

130
00:09:22,090 --> 00:09:27,880
so it means that changes to our internal

131
00:09:27,880 --> 00:09:40,870
d-bus api's don't impact end users and

132
00:09:40,870 --> 00:09:44,740
so open BMC is a collection of micro

133
00:09:44,740 --> 00:09:46,870
services that talk to each other through

134
00:09:46,870 --> 00:09:54,910
d-bus and so which micro services

135
00:09:54,910 --> 00:09:58,990
different companies use vary so for

136
00:09:58,990 --> 00:10:03,940
example IBM uses inventory manager while

137
00:10:03,940 --> 00:10:09,760
Intel uses entitymanager and so the

138
00:10:09,760 --> 00:10:12,910
object mapper does a few other things

139
00:10:12,910 --> 00:10:17,950
but it is used to discover the service

140
00:10:17,950 --> 00:10:19,990
that implements a certain interface or a

141
00:10:19,990 --> 00:10:25,120
certain object path and so BMC web will

142
00:10:25,120 --> 00:10:29,050
first call mapper to find the service

143
00:10:29,050 --> 00:10:31,330
that implements a certain interface in

144
00:10:31,330 --> 00:10:35,890
this example BMC webs calling a mapper

145
00:10:35,890 --> 00:10:39,580
looking for the inventory item CPU

146
00:10:39,580 --> 00:10:41,740
interface and then the mapper would

147
00:10:41,740 --> 00:10:44,740
return the service that is implementing

148
00:10:44,740 --> 00:10:48,070
that interface and then BMC web would

149
00:10:48,070 --> 00:10:51,220
then call that service and get back all

150
00:10:51,220 --> 00:10:57,990
the properties so with this we can use

151
00:10:57,990 --> 00:11:02,650
inventory manager and other companies

152
00:11:02,650 --> 00:11:03,370
can use

153
00:11:03,370 --> 00:11:08,339
entity manager in BMC web works for both

154
00:11:10,320 --> 00:11:15,370
and so this is a an example on a real

155
00:11:15,370 --> 00:11:19,420
system of calling get subtree to return

156
00:11:19,420 --> 00:11:21,970
the service that implements this

157
00:11:21,970 --> 00:11:28,660
inventory item that CPU interface and

158
00:11:28,660 --> 00:11:36,600
then this is calling the inventory

159
00:11:36,600 --> 00:11:41,140
manager directly with a get all to

160
00:11:41,140 --> 00:11:45,600
return all the properties of that path

161
00:11:51,900 --> 00:11:56,500
B&C produces inventory correct yes so

162
00:11:56,500 --> 00:11:58,660
are there models that we are thinking

163
00:11:58,660 --> 00:12:02,230
that a excellent entity could basically

164
00:12:02,230 --> 00:12:05,380
program the inventory inside the BMC I

165
00:12:05,380 --> 00:12:07,600
can't repeat that so so envisioning the

166
00:12:07,600 --> 00:12:09,160
model we are like you could you could

167
00:12:09,160 --> 00:12:11,800
create a vanilla kind of a flavor BMC

168
00:12:11,800 --> 00:12:14,170
and now if you want to give a flavor to

169
00:12:14,170 --> 00:12:16,300
the BMC like you know it could run for

170
00:12:16,300 --> 00:12:17,910
processor it could run eight processors

171
00:12:17,910 --> 00:12:20,680
or it could run three accelerators going

172
00:12:20,680 --> 00:12:22,690
to accelerators how does the BMC know

173
00:12:22,690 --> 00:12:26,200
what the platform entry is so are you I

174
00:12:26,200 --> 00:12:28,779
mean is there any thought that inventory

175
00:12:28,779 --> 00:12:31,480
can be programmed inside BMC using

176
00:12:31,480 --> 00:12:32,890
external entity I mean what are the

177
00:12:32,890 --> 00:12:38,290
thoughts behind that uh so there are D

178
00:12:38,290 --> 00:12:42,430
bus interfaces have interfaces for

179
00:12:42,430 --> 00:12:46,300
things CPUs for dims for everything and

180
00:12:46,300 --> 00:12:48,720
so as long as you implement those

181
00:12:48,720 --> 00:12:54,190
interfaces for every single for every

182
00:12:54,190 --> 00:12:56,200
processor if you implement the processor

183
00:12:56,200 --> 00:12:59,410
interface BMC web will then expose all

184
00:12:59,410 --> 00:13:06,130
those processors on redfish this was I

185
00:13:06,130 --> 00:13:07,860
was trying to understand more from like

186
00:13:07,860 --> 00:13:10,810
from system perspective I mean this

187
00:13:10,810 --> 00:13:12,790
inventory model the redfish inventory

188
00:13:12,790 --> 00:13:15,490
model that we have can it be consumed by

189
00:13:15,490 --> 00:13:16,600
BMC rather be

190
00:13:16,600 --> 00:13:22,420
produced by VNC not currently

191
00:13:22,420 --> 00:13:24,880
I guess white why do you want so suits

192
00:13:24,880 --> 00:13:26,860
commissioning is - right like no you

193
00:13:26,860 --> 00:13:29,170
could you could take inventory from one

194
00:13:29,170 --> 00:13:31,180
machine and you can apply that inventory

195
00:13:31,180 --> 00:13:34,420
another machine to kind of cross-check

196
00:13:34,420 --> 00:13:39,009
the profiles like like I could I could

197
00:13:39,009 --> 00:13:43,149
build a a plain kind of vanilla BMC and

198
00:13:43,149 --> 00:13:45,850
I could tell that the BMC should produce

199
00:13:45,850 --> 00:13:47,790
inventory based on this profile

200
00:13:47,790 --> 00:13:50,079
basically it should render to processors

201
00:13:50,079 --> 00:13:52,269
it should rendered it should render two

202
00:13:52,269 --> 00:13:54,790
GPUs it should render like a you know

203
00:13:54,790 --> 00:13:58,180
that storage kind of profile so in state

204
00:13:58,180 --> 00:14:01,329
BMC producing it I'm asking like are

205
00:14:01,329 --> 00:14:03,250
they mean tarts where BMC would consume

206
00:14:03,250 --> 00:14:05,410
this inventory because what is happening

207
00:14:05,410 --> 00:14:06,880
is right now there are like custom

208
00:14:06,880 --> 00:14:08,920
models that everybody's producing or at

209
00:14:08,920 --> 00:14:12,009
ease like we are producing then we are

210
00:14:12,009 --> 00:14:14,529
let be a man we are kind of know where

211
00:14:14,529 --> 00:14:16,870
we are defining this to be consumed by

212
00:14:16,870 --> 00:14:21,399
BMC but that's like all om models so are

213
00:14:21,399 --> 00:14:23,319
there any thoughts in open BMC to kind

214
00:14:23,319 --> 00:14:24,639
of consume the standard red fish

215
00:14:24,639 --> 00:14:27,550
inventory models so that the BNC can

216
00:14:27,550 --> 00:14:29,350
consume that and can tailor it and in

217
00:14:29,350 --> 00:14:33,399
producer there's no plans on our end to

218
00:14:33,399 --> 00:14:37,529
do that and I haven't heard of anything

219
00:14:56,009 --> 00:15:00,130
so normally what happens like we read it

220
00:15:00,130 --> 00:15:02,079
from the mrw say it's a machine readable

221
00:15:02,079 --> 00:15:04,899
book and then we generate the full

222
00:15:04,899 --> 00:15:10,300
inventory so this is like in the form of

223
00:15:10,300 --> 00:15:14,290
my ml it is there in which kind of

224
00:15:14,290 --> 00:16:39,309
complication pile yes I want to add

225
00:16:39,309 --> 00:16:41,740
something that this can be divided into

226
00:16:41,740 --> 00:16:46,240
two parts one is for the EMT to crazyman

227
00:16:46,240 --> 00:16:49,779
who is from like from a metal machine

228
00:16:49,779 --> 00:16:52,870
workbook or from the powers that is for

229
00:16:52,870 --> 00:16:55,630
mbm secret still inventory on us

230
00:16:55,630 --> 00:16:58,569
the PM's you consume use information to

231
00:16:58,569 --> 00:17:01,979
credit red fish objects

232
00:17:08,910 --> 00:17:12,750
Opeth BMC community releases so Kurt

233
00:17:12,750 --> 00:17:15,119
Taylor runs the release planning

234
00:17:15,119 --> 00:17:21,809
workgroup it's a biweekly meeting 2.6

235
00:17:21,809 --> 00:17:25,260
which came out in February of 2019 was

236
00:17:25,260 --> 00:17:26,939
our first release is a Linux Foundation

237
00:17:26,939 --> 00:17:30,840
community in 2.7 which came out last

238
00:17:30,840 --> 00:17:37,550
month was red fish was a big part of and

239
00:17:37,550 --> 00:17:41,510
2.8 is scheduled for February of 2020

240
00:17:41,510 --> 00:17:47,540
and the releases follow Yocto releases

241
00:17:47,540 --> 00:17:50,940
to a year and it lags the Yocto released

242
00:17:50,940 --> 00:17:53,700
by like a month or two and this is a

243
00:17:53,700 --> 00:17:59,490
screenshot of the 2.70 tag from last

244
00:17:59,490 --> 00:18:10,440
month and so in the 2.7 release was the

245
00:18:10,440 --> 00:18:12,870
following redfish functionality a

246
00:18:12,870 --> 00:18:17,030
firmware update inventory logging

247
00:18:17,030 --> 00:18:20,250
Network partial certificates power

248
00:18:20,250 --> 00:18:25,470
thermal state management so this is the

249
00:18:25,470 --> 00:18:33,030
power operations power on reboot and

250
00:18:33,030 --> 00:18:36,540
then also BMC reboot which isn't on here

251
00:18:36,540 --> 00:18:39,390
and then time management and user

252
00:18:39,390 --> 00:18:44,670
management and this is a screenshot of

253
00:18:44,670 --> 00:18:51,120
the recently merged SSL certificate page

254
00:18:51,120 --> 00:18:55,050
on the web interface using the redfish

255
00:18:55,050 --> 00:19:07,610
api this certificate schema and 42.8

256
00:19:08,390 --> 00:19:11,040
working on getting the rest of the

257
00:19:11,040 --> 00:19:13,440
sensor so that the sensor page on the

258
00:19:13,440 --> 00:19:17,130
GUI can be moved over to redfish working

259
00:19:17,130 --> 00:19:18,270
on

260
00:19:18,270 --> 00:19:21,890
the rest of certificate management LDAP

261
00:19:21,890 --> 00:19:28,020
led multiple firmware support so that

262
00:19:28,020 --> 00:19:31,230
the firmware panel on the on the web

263
00:19:31,230 --> 00:19:34,170
interface can also be moved over and

264
00:19:34,170 --> 00:19:40,320
some of these certificates LDAP led it's

265
00:19:40,320 --> 00:19:42,750
either merge and master up for review

266
00:19:42,750 --> 00:19:46,290
now and those are all things IBM's

267
00:19:46,290 --> 00:19:47,460
working on

268
00:19:47,460 --> 00:19:50,670
I know Intel is planning on or is

269
00:19:50,670 --> 00:19:54,990
working on event service telemetry

270
00:19:54,990 --> 00:19:56,940
service description collection and

271
00:19:56,940 --> 00:20:12,059
virtual media the telemetry yes there's

272
00:20:12,059 --> 00:20:14,850
several telemetry models out there okay

273
00:20:14,850 --> 00:20:17,820
so you're not using wreckfish the

274
00:20:17,820 --> 00:20:19,140
proposals that we talked about yesterday

275
00:20:19,140 --> 00:20:24,660
I'm I'm not sure if you so so basically

276
00:20:24,660 --> 00:20:27,300
meta definitions and report definitions

277
00:20:27,300 --> 00:20:29,010
are you following the standard redfish

278
00:20:29,010 --> 00:20:31,620
schema or yes okay this is standard

279
00:20:31,620 --> 00:20:33,720
redfish and what is your back-end

280
00:20:33,720 --> 00:20:39,809
service for this I James can you speak

281
00:20:39,809 --> 00:20:45,300
more this came from Ed I yeah I'm not

282
00:20:45,300 --> 00:20:53,550
sure what Ed's plans are for it and so

283
00:20:53,550 --> 00:21:00,870
this is the LDAP web interface page this

284
00:21:00,870 --> 00:21:02,730
is up for review now and this is using

285
00:21:02,730 --> 00:21:07,200
the LDAP redfish schema which most of

286
00:21:07,200 --> 00:21:16,370
the support is merged in the BMC one the

287
00:21:16,370 --> 00:21:23,220
2.7 release its was mainly properties

288
00:21:23,220 --> 00:21:25,920
that were already in the redfish schema

289
00:21:25,920 --> 00:21:29,730
so today the the web interface and open

290
00:21:29,730 --> 00:21:31,890
BMC tool used

291
00:21:31,890 --> 00:21:38,460
both the dbest rest api and redfish and

292
00:21:38,460 --> 00:21:43,170
we need a few things added to the the

293
00:21:43,170 --> 00:21:47,190
redfish schema so that we could move the

294
00:21:47,190 --> 00:21:50,280
web interface completely over to redfish

295
00:21:50,280 --> 00:21:53,960
which is what we plan to do things like

296
00:21:53,960 --> 00:21:57,150
SNMP which is not in the spec currently

297
00:21:57,150 --> 00:22:01,230
and then multiple firmware image redfish

298
00:22:01,230 --> 00:22:03,030
support which we were able to get into

299
00:22:03,030 --> 00:22:08,580
the spec and is in that 29 19.2 spec and

300
00:22:08,580 --> 00:22:12,150
will continue to upstream properties to

301
00:22:12,150 --> 00:22:18,450
redfish and eventually will move away

302
00:22:18,450 --> 00:22:23,280
from exposing the the d-bus API directly

303
00:22:23,280 --> 00:22:26,520
to customers and the the web interface

304
00:22:26,520 --> 00:22:35,430
will be completely redfish this is the

305
00:22:35,430 --> 00:22:39,630
redfish data model you can see the

306
00:22:39,630 --> 00:22:42,800
service route at slash redfish slash b1

307
00:22:42,800 --> 00:22:47,780
and route can be read unauthenticated

308
00:22:47,780 --> 00:22:53,600
this is a hyper media API so all

309
00:22:53,600 --> 00:22:56,280
resources are are linked from the

310
00:22:56,280 --> 00:23:00,390
service route you can see that the

311
00:23:00,390 --> 00:23:02,430
service route you can see sessions and

312
00:23:02,430 --> 00:23:05,990
accounts schemas there would also be a

313
00:23:05,990 --> 00:23:11,100
certificate service update service and

314
00:23:11,100 --> 00:23:16,550
then from the service route you can see

315
00:23:16,550 --> 00:23:22,310
links to the three major collections in

316
00:23:22,310 --> 00:23:27,270
redfish computer system which is think

317
00:23:27,270 --> 00:23:30,120
of it as the logical view of the system

318
00:23:30,120 --> 00:23:32,990
as seen from the OS so this is memory

319
00:23:32,990 --> 00:23:38,580
processors chassis which is the physical

320
00:23:38,580 --> 00:23:41,400
view of the box the the sheet metal its

321
00:23:41,400 --> 00:23:44,730
fans power supply sensors power and

322
00:23:44,730 --> 00:23:45,389
thermal

323
00:23:45,389 --> 00:23:52,219
and then system managers are in our case

324
00:23:52,219 --> 00:23:57,209
BMC's and it's kind of hard to see but

325
00:23:57,209 --> 00:24:00,479
these there's links from all these

326
00:24:00,479 --> 00:24:10,589
different resources so there's a managed

327
00:24:10,589 --> 00:24:13,499
by link from the the computer system to

328
00:24:13,499 --> 00:24:15,599
the manager and then there would be one

329
00:24:15,599 --> 00:24:18,379
the other way as well

330
00:24:24,389 --> 00:24:28,799
redfish and BMC web support both token

331
00:24:28,799 --> 00:24:32,279
based authorization and basic

332
00:24:32,279 --> 00:24:36,419
authorization and this is a witherspoon

333
00:24:36,419 --> 00:24:40,499
system I'm using postman here

334
00:24:40,499 --> 00:24:46,339
it's a API development environment and

335
00:24:46,339 --> 00:24:52,979
basic authorizations fine for a quick

336
00:24:52,979 --> 00:24:57,419
crow command where latency is not an

337
00:24:57,419 --> 00:25:01,009
issue but since the new sessions created

338
00:25:01,009 --> 00:25:04,499
every time it's not ideal for multiple

339
00:25:04,499 --> 00:25:08,099
calls and so this is basic authorization

340
00:25:08,099 --> 00:25:12,929
using postman and then basic

341
00:25:12,929 --> 00:25:17,999
authorization using curls basic

342
00:25:17,999 --> 00:25:20,519
authorization and you can also do this

343
00:25:20,519 --> 00:25:23,129
by passing the username and password as

344
00:25:23,129 --> 00:25:29,570
part of the URI token based

345
00:25:29,570 --> 00:25:31,950
authorization this is recommended if

346
00:25:31,950 --> 00:25:35,339
you're going to do multiple calls and it

347
00:25:35,339 --> 00:25:38,879
this requires that the client post to

348
00:25:38,879 --> 00:25:41,879
the sessions collection with their

349
00:25:41,879 --> 00:25:46,009
username and password to get the token

350
00:25:46,009 --> 00:25:49,950
you can post to the sessions collection

351
00:25:49,950 --> 00:25:54,029
slash redfish /v 1 slash service slash

352
00:25:54,029 --> 00:25:59,110
sessions unauthorized and get the

353
00:25:59,110 --> 00:26:02,110
the token if you pass a correct username

354
00:26:02,110 --> 00:26:05,950
and password and this is using the the

355
00:26:05,950 --> 00:26:14,350
token to do a get to the power schema

356
00:26:14,350 --> 00:26:17,730
and you can see things like power limit

357
00:26:17,730 --> 00:26:28,989
and power consumed watts to see what

358
00:26:28,989 --> 00:26:33,489
sessions slash redfish /v 1 slash

359
00:26:33,489 --> 00:26:36,669
session service slash sessions and this

360
00:26:36,669 --> 00:26:41,499
is the this session I'm using and you

361
00:26:41,499 --> 00:26:45,759
can see the user and if you wanted to

362
00:26:45,759 --> 00:26:49,109
delete this session or logout you would

363
00:26:49,109 --> 00:26:55,059
do a delete to the URI listed in the

364
00:26:55,059 --> 00:27:04,389
OData ID so how simple is rest using

365
00:27:04,389 --> 00:27:09,249
JSON this is a Python 3 example five

366
00:27:09,249 --> 00:27:13,029
lines of code using token authorization

367
00:27:13,029 --> 00:27:18,059
and this is getting the system model and

368
00:27:18,059 --> 00:27:20,379
this isn't much different than calling

369
00:27:20,379 --> 00:27:23,440
the Google Maps or Twitter or Facebook

370
00:27:23,440 --> 00:27:33,220
API common redfish properties all

371
00:27:33,220 --> 00:27:37,119
resources have the schema and version

372
00:27:37,119 --> 00:27:42,850
and this is in the OData type OData ID

373
00:27:42,850 --> 00:27:49,149
is the URI of the resource ID is a

374
00:27:49,149 --> 00:27:55,119
unique ID names a human friendly name

375
00:27:55,119 --> 00:28:03,269
and then status has three properties

376
00:28:03,269 --> 00:28:07,600
state this can be one of ten different

377
00:28:07,600 --> 00:28:12,830
states disabled enabled updating

378
00:28:12,830 --> 00:28:18,560
health can be three different values

379
00:28:18,560 --> 00:28:21,380
okay critical warning and then health

380
00:28:21,380 --> 00:28:24,170
roll-up which represents the health of

381
00:28:24,170 --> 00:28:29,830
the resource and all its children links

382
00:28:29,830 --> 00:28:33,290
they contain references to related

383
00:28:33,290 --> 00:28:36,800
resources so kind of mentioned from BMC

384
00:28:36,800 --> 00:28:40,160
there's a manager for chassis linked to

385
00:28:40,160 --> 00:28:41,810
the chassis and then from the chassis

386
00:28:41,810 --> 00:28:48,470
there's a managed by link to the BMC and

387
00:28:48,470 --> 00:28:53,030
actions actions are used for things like

388
00:28:53,030 --> 00:29:03,790
booting the system rebooting the BMC and

389
00:29:03,790 --> 00:29:08,450
OAM is used to separate vendor

390
00:29:08,450 --> 00:29:16,760
extensions from the standard this is the

391
00:29:16,760 --> 00:29:23,390
the service route you can see the OData

392
00:29:23,390 --> 00:29:26,140
type which tells you that it's the

393
00:29:26,140 --> 00:29:29,860
service route schema it's version 1.5

394
00:29:29,860 --> 00:29:33,710
and you see links to the account service

395
00:29:33,710 --> 00:29:36,170
certificate service links to the chassis

396
00:29:36,170 --> 00:29:41,470
and manager collection and red fish

397
00:29:41,470 --> 00:29:46,310
separated the protocol from the data

398
00:29:46,310 --> 00:29:52,720
model and this red fish version is the

399
00:29:52,720 --> 00:29:59,900
protocol of red fish being used this is

400
00:29:59,900 --> 00:30:06,710
the system resource open BMC hard-coded

401
00:30:06,710 --> 00:30:11,300
the system and manager IDs and we

402
00:30:11,300 --> 00:30:13,850
currently only support one system and

403
00:30:13,850 --> 00:30:20,410
one manager power state is not a

404
00:30:20,410 --> 00:30:27,070
writable property so you would use the

405
00:30:28,240 --> 00:30:32,679
computer system dot reset to boot or

406
00:30:32,679 --> 00:30:38,690
reboot the system you would do a post to

407
00:30:38,690 --> 00:30:44,600
that action and that's what this slide

408
00:30:44,600 --> 00:30:50,600
is showing doing a post to the system

409
00:30:50,600 --> 00:30:54,520
resource actions computer system reset

410
00:30:54,520 --> 00:31:08,559
and reset type on the third major

411
00:31:08,559 --> 00:31:12,340
collection type is chassis this is the

412
00:31:12,340 --> 00:31:16,549
chassis resource in here you can see

413
00:31:16,549 --> 00:31:19,880
links to the this computer system links

414
00:31:19,880 --> 00:31:25,610
to the manager you can see the links to

415
00:31:25,610 --> 00:31:28,610
power and thermal and you can see the

416
00:31:28,610 --> 00:31:31,010
the status with its health health

417
00:31:31,010 --> 00:31:37,250
roll-up state and the diagram on the

418
00:31:37,250 --> 00:31:41,240
left kind of shows that power in thermal

419
00:31:41,240 --> 00:31:44,570
are both under chassis and fans and

420
00:31:44,570 --> 00:31:45,830
temperatures are part of thermal

421
00:31:45,830 --> 00:31:47,750
voltages power supplies are part of

422
00:31:47,750 --> 00:31:56,570
power manager on the left is the manager

423
00:31:56,570 --> 00:32:00,610
collection as you can see there's only

424
00:32:00,610 --> 00:32:07,940
one member manager / BMC again manager

425
00:32:07,940 --> 00:32:11,779
and system IDs are hard-coded and then

426
00:32:11,779 --> 00:32:14,840
on the right is the manager resource you

427
00:32:14,840 --> 00:32:19,429
can see links to the Ethernet interfaces

428
00:32:19,429 --> 00:32:24,440
an action to reboot the BMC you can see

429
00:32:24,440 --> 00:32:33,070
the firmware version date and time I

430
00:32:33,070 --> 00:32:38,360
only skim the surface of what's out

431
00:32:38,360 --> 00:32:39,799
there for redfish I

432
00:32:39,799 --> 00:32:42,890
really encourage you to look at the

433
00:32:42,890 --> 00:32:45,890
documentation and play around with open

434
00:32:45,890 --> 00:32:52,669
VMC's redfish implementation any

435
00:32:52,669 --> 00:33:01,610
questions you just mentioned there TMC

436
00:33:01,610 --> 00:33:05,690
web who you buy or use the redfish api

437
00:33:05,690 --> 00:33:09,590
that means other web data are reading

438
00:33:09,590 --> 00:33:12,820
and the right data with the redfish you

439
00:33:12,820 --> 00:33:17,630
wanna see so the web interfaces uses

440
00:33:17,630 --> 00:33:24,200
both the externally exposed d-bus API as

441
00:33:24,200 --> 00:33:28,630
well as the redfish api depending on

442
00:33:28,630 --> 00:33:32,899
which panel so for example user

443
00:33:32,899 --> 00:33:38,919
management uses the redfish api while

444
00:33:38,919 --> 00:33:41,809
things still like inventory and sensors

445
00:33:41,809 --> 00:33:45,340
are still using the exposed t bus api

446
00:33:45,340 --> 00:33:48,590
eventually we'll move the web interface

447
00:33:48,590 --> 00:33:52,360
all over to redfish but we're still

448
00:33:52,360 --> 00:33:56,179
missing some of the key schemas needed

449
00:33:56,179 --> 00:34:01,940
to do that so in future you plan to move

450
00:34:01,940 --> 00:34:06,770
more to the refuge I think in web GUI

451
00:34:06,770 --> 00:34:09,139
there are some special requirements for

452
00:34:09,139 --> 00:34:14,210
example we need a dashboard on the on

453
00:34:14,210 --> 00:34:17,330
the web on one page and this dashboard

454
00:34:17,330 --> 00:34:20,629
will need all the inventory summary or

455
00:34:20,629 --> 00:34:23,780
status from different sub component like

456
00:34:23,780 --> 00:34:27,649
storage CPU memory that does cross lots

457
00:34:27,649 --> 00:34:32,030
of redfish schema so it does efficiency

458
00:34:32,030 --> 00:34:37,668
through redfish api promised with the

459
00:34:37,668 --> 00:34:40,790
d-bus IBAs api you can use can certainly

460
00:34:40,790 --> 00:34:43,449
or rest api you can certainly send one

461
00:34:43,449 --> 00:34:46,399
request to the backend and cut all the

462
00:34:46,399 --> 00:34:52,820
data right so first

463
00:34:52,820 --> 00:34:54,620
things that aren't in the red fish

464
00:34:54,620 --> 00:34:58,390
schemas today we'll continue to upstream

465
00:34:58,390 --> 00:35:01,220
them into redfish so that we can move

466
00:35:01,220 --> 00:35:03,530
the web interface over to redfish and

467
00:35:03,530 --> 00:35:06,200
the reason we want to do that as we

468
00:35:06,200 --> 00:35:12,290
eventually want to turn off the exposing

469
00:35:12,290 --> 00:35:25,010
the Debus API is going to use the D bus

470
00:35:25,010 --> 00:35:28,520
internally right yeah red bread fish

471
00:35:28,520 --> 00:35:32,840
uses D bus using the the object mapper

472
00:35:32,840 --> 00:35:34,700
to first design where the services and

473
00:35:34,700 --> 00:35:36,890
then yeah make a call to that service to

474
00:35:36,890 --> 00:35:38,750
get the properties and then expose those

475
00:35:38,750 --> 00:35:41,000
properties on redfish so I just went to

476
00:35:41,000 --> 00:35:44,500
mostow's through that John touched on

477
00:35:44,500 --> 00:35:46,400
interfaces so be blessed want to be

478
00:35:46,400 --> 00:35:49,100
explored outside but very few still

479
00:35:49,100 --> 00:35:51,710
users yes yes so we'll just turn off

480
00:35:51,710 --> 00:35:56,090
exposing d-bus externally to users yeah

481
00:35:56,090 --> 00:36:00,430
so that'll be makes like one week yep

482
00:36:06,940 --> 00:36:10,370
did you say if bios attribution was

483
00:36:10,370 --> 00:36:12,290
included in to seven or to eight or

484
00:36:12,290 --> 00:36:16,160
where was that in the roadmap for

485
00:36:16,160 --> 00:36:18,350
redfish yeah um

486
00:36:18,350 --> 00:36:21,710
we support bios today but i don't know

487
00:36:21,710 --> 00:36:23,750
if it's the whole the we support the

488
00:36:23,750 --> 00:36:26,300
bios schema today and BMC web but i'm

489
00:36:26,300 --> 00:36:30,190
not sure it's the whole the whole this

490
00:36:30,190 --> 00:36:32,330
schema yet I think we're still missing

491
00:36:32,330 --> 00:36:34,610
some properties so that wasn't on the

492
00:36:34,610 --> 00:36:37,430
list or 2/8 either but some of its there

493
00:36:37,430 --> 00:36:39,609
today

494
00:36:51,069 --> 00:36:55,940
so in version 2.7 you mentioned firmware

495
00:36:55,940 --> 00:36:59,020
update multiple image from where update

496
00:36:59,020 --> 00:37:04,880
do you mean the cost fungus are the PMC

497
00:37:04,880 --> 00:37:10,339
it includes both and the other question

498
00:37:10,339 --> 00:37:14,299
was you had some common properties of

499
00:37:14,299 --> 00:37:17,450
redfish are those kind of mandatory are

500
00:37:17,450 --> 00:37:22,010
just auditor ID and for data type are

501
00:37:22,010 --> 00:37:26,930
mandatory but a schema yeah I think the

502
00:37:26,930 --> 00:37:31,220
only mandatory ones are the OData that

503
00:37:31,220 --> 00:37:35,140
type oh de de ID and OData dot context

504
00:37:35,140 --> 00:37:42,038
most properties in redfish are optional

505
00:37:43,180 --> 00:37:46,010
so when you disable the depot's API

506
00:37:46,010 --> 00:37:50,270
won't you not exposing it yeah yeah so

507
00:37:50,270 --> 00:37:52,670
the plan is to only use red for a pair

508
00:37:52,670 --> 00:37:57,349
correct you redfish yes or a light PMI

509
00:37:57,349 --> 00:37:59,930
so my question is Emily when you want to

510
00:37:59,930 --> 00:38:02,240
add something new to open BMC but it's

511
00:38:02,240 --> 00:38:03,770
not part of the standard will you have

512
00:38:03,770 --> 00:38:05,450
to wait until it's been approved by the

513
00:38:05,450 --> 00:38:10,420
standard Elmar what's the pond there yes

514
00:38:10,420 --> 00:38:13,730
so if you want to add something new to

515
00:38:13,730 --> 00:38:17,150
to open me up see that's not in the the

516
00:38:17,150 --> 00:38:20,119
redfish standard it would be creating

517
00:38:20,119 --> 00:38:23,150
that that interface in open BMC working

518
00:38:23,150 --> 00:38:25,160
with the redfish group to get that

519
00:38:25,160 --> 00:38:29,119
interface or something similar added to

520
00:38:29,119 --> 00:38:32,829
redfish okay thanks

521
00:38:32,839 --> 00:38:36,559
this still a ways away could we use

522
00:38:36,559 --> 00:38:37,940
vendor extensions in the meantime though

523
00:38:37,940 --> 00:38:43,329
to resolve that um there is

524
00:38:54,190 --> 00:38:56,420
yeah I think a lot of this still needs

525
00:38:56,420 --> 00:39:06,830
to be worked out into the standard then

526
00:39:06,830 --> 00:39:09,740
then they'll submit a proposal to suck

527
00:39:09,740 --> 00:39:11,900
it into the standard yeah it just gets

528
00:39:11,900 --> 00:39:15,170
tricky because you support that Oh II am

529
00:39:15,170 --> 00:39:17,390
yeah it's hard to ever get really all we

530
00:39:17,390 --> 00:39:19,700
em interface to ya is the downside of

531
00:39:19,700 --> 00:39:21,640
doing that

532
00:39:21,640 --> 00:39:25,180
so I think we definitely want to first

533
00:39:25,180 --> 00:39:28,520
upstream and start working through that

534
00:39:28,520 --> 00:39:32,380
process yeah it's always better

535
00:39:39,820 --> 00:39:42,580
so we were recently at a red fish

536
00:39:42,580 --> 00:39:45,130
workshop with jeff otter and a couple of

537
00:39:45,130 --> 00:39:47,200
other the redfish folks and this

538
00:39:47,200 --> 00:39:50,950
question did come up they suggested they

539
00:39:50,950 --> 00:39:52,930
do like to see some things be proposed

540
00:39:52,930 --> 00:39:55,660
as om first and then when they see that

541
00:39:55,660 --> 00:39:57,490
it's useful then they will suck it into

542
00:39:57,490 --> 00:40:00,480
the standard but they're also happy to

543
00:40:00,480 --> 00:40:03,340
you know for us to propose something for

544
00:40:03,340 --> 00:40:05,320
open DMC propose something and to work

545
00:40:05,320 --> 00:40:07,600
together to to bring that feature into

546
00:40:07,600 --> 00:40:10,750
the specification but the goal of open

547
00:40:10,750 --> 00:40:15,780
BMC is to adhere to to the specification

548
00:40:24,509 --> 00:40:29,859
so in your 2.8 release you means that

549
00:40:29,859 --> 00:40:32,319
multiple firmware update can explain

550
00:40:32,319 --> 00:40:34,359
what are the multiple firmware update

551
00:40:34,359 --> 00:40:36,220
would be supported like a BIOS upgrade

552
00:40:36,220 --> 00:40:39,309
or PSU firmware create or so currently

553
00:40:39,309 --> 00:40:48,069
in redfish you can update the both the

554
00:40:48,069 --> 00:40:51,609
the host firmware as well as the the BMC

555
00:40:51,609 --> 00:40:55,650
firmware but you cannot for example

556
00:40:55,650 --> 00:40:59,410
switch to your backup image and so those

557
00:40:59,410 --> 00:41:00,549
are things that are going to be

558
00:41:00,549 --> 00:41:03,430
supported in the 2.8 so redfish in that

559
00:41:03,430 --> 00:41:07,539
20 19.2 spec that's up for review now

560
00:41:07,539 --> 00:41:10,920
and includes support for multiple

561
00:41:10,920 --> 00:41:13,960
firmware images so things like you can

562
00:41:13,960 --> 00:41:17,619
change which image is the primary you

563
00:41:17,619 --> 00:41:19,269
can move it to the backup and things

564
00:41:19,269 --> 00:41:21,880
like that so that should be supported by

565
00:41:21,880 --> 00:41:25,450
BMC as well in the back end right yeah

566
00:41:25,450 --> 00:41:28,299
it's supported it's supported now in the

567
00:41:28,299 --> 00:41:31,749
back end or so this is this is using the

568
00:41:31,749 --> 00:41:36,180
new redfish spec to support this in in

569
00:41:36,180 --> 00:41:40,749
BMC web and when you do the BMC update

570
00:41:40,749 --> 00:41:42,579
do we do the whole image started to make

571
00:41:42,579 --> 00:41:46,299
or like we can do the partly read a

572
00:41:46,299 --> 00:41:50,410
read-only file system a whole image

573
00:41:50,410 --> 00:41:51,700
whole image

574
00:41:51,700 --> 00:41:54,099
yep said wipe off my persistent data as

575
00:41:54,099 --> 00:41:57,369
well we have a way to process data

576
00:41:57,369 --> 00:42:01,150
across firmware updates

577
00:42:01,150 --> 00:42:05,550
[Music]

578
00:42:05,550 --> 00:42:07,610
you

