1
00:00:00,000 --> 00:00:04,520
[Music]

2
00:00:04,520 --> 00:00:08,490
unike 2018 a security round up big round

3
00:00:08,490 --> 00:00:15,269
of applause for Maggie well welcome back

4
00:00:15,269 --> 00:00:17,730
I'll do my best not to put your sleep

5
00:00:17,730 --> 00:00:20,670
after lunch my name is Maggie how do I

6
00:00:20,670 --> 00:00:22,260
work for Intel for a team called

7
00:00:22,260 --> 00:00:24,930
platform armoring and resiliency today

8
00:00:24,930 --> 00:00:26,430
we're going to talk a little bit about

9
00:00:26,430 --> 00:00:28,949
some of the features included in UDK

10
00:00:28,949 --> 00:00:33,000
2018 a few disclaimers this isn't an

11
00:00:33,000 --> 00:00:34,829
exhaustive list it's just some some of

12
00:00:34,829 --> 00:00:36,899
the ones we want to highlight or bring

13
00:00:36,899 --> 00:00:38,750
attention to not all of these were

14
00:00:38,750 --> 00:00:41,430
released this year specifically but but

15
00:00:41,430 --> 00:00:44,579
are included in this release as well one

16
00:00:44,579 --> 00:00:46,289
of my favorite quotes is there's no such

17
00:00:46,289 --> 00:00:48,120
thing as security only varying degrees

18
00:00:48,120 --> 00:00:51,239
of insecurity so none of these features

19
00:00:51,239 --> 00:00:54,559
are meant to be one-size-fits-all or

20
00:00:54,559 --> 00:00:58,770
claim to be unhackable this is part of

21
00:00:58,770 --> 00:01:01,199
our continuous effort to improve T an

22
00:01:01,199 --> 00:01:07,890
accord all right so far we are an

23
00:01:07,890 --> 00:01:10,500
interesting team at Intel because we are

24
00:01:10,500 --> 00:01:12,659
part of the team that develops the core

25
00:01:12,659 --> 00:01:14,520
we're in the same extended team as

26
00:01:14,520 --> 00:01:16,979
Vincent for example we're also the team

27
00:01:16,979 --> 00:01:19,799
that supports chip sec Erik over here is

28
00:01:19,799 --> 00:01:25,830
the main maintainer um we we do our best

29
00:01:25,830 --> 00:01:28,110
to what we're also plugged into Intel

30
00:01:28,110 --> 00:01:30,780
bug bounty for example so some of those

31
00:01:30,780 --> 00:01:32,670
submissions may be reproduced by us

32
00:01:32,670 --> 00:01:35,520
propose proposing fixes so so the

33
00:01:35,520 --> 00:01:39,659
creation and you know we we try to do a

34
00:01:39,659 --> 00:01:41,520
little bit of protecting detecting and

35
00:01:41,520 --> 00:01:43,829
recovering you're never done doing

36
00:01:43,829 --> 00:01:45,990
security so this is a continuous process

37
00:01:45,990 --> 00:01:49,229
and these features are examples of what

38
00:01:49,229 --> 00:01:51,659
we do to protect and detect security

39
00:01:51,659 --> 00:01:56,369
vulnerabilities for our systems so why

40
00:01:56,369 --> 00:01:59,549
firmware there are some clear advantages

41
00:01:59,549 --> 00:02:02,670
to gaining persistence on over a

42
00:02:02,670 --> 00:02:04,950
platforms for a more persistent

43
00:02:04,950 --> 00:02:07,229
compromised stealth bypassing security

44
00:02:07,229 --> 00:02:09,360
features and the very obvious denial of

45
00:02:09,360 --> 00:02:13,290
service and the reason why we think this

46
00:02:13,290 --> 00:02:15,480
has been more and more thing is because

47
00:02:15,480 --> 00:02:17,489
the easier attack vectors that the

48
00:02:17,489 --> 00:02:21,359
network has been so overly saturated and

49
00:02:21,359 --> 00:02:23,400
hardened that people are now going down

50
00:02:23,400 --> 00:02:26,760
the stack to try to to do things there

51
00:02:26,760 --> 00:02:30,090
so I think we're in the age of hardening

52
00:02:30,090 --> 00:02:34,680
our our firmware building a threat model

53
00:02:34,680 --> 00:02:36,900
to me a threat model is the cornerstone

54
00:02:36,900 --> 00:02:38,010
of good security

55
00:02:38,010 --> 00:02:40,560
so really knowing what you're trying to

56
00:02:40,560 --> 00:02:42,629
protect what your claims are what you

57
00:02:42,629 --> 00:02:45,180
truly are not claiming what the attack

58
00:02:45,180 --> 00:02:49,680
vectors are who your attacker is and and

59
00:02:49,680 --> 00:02:51,389
again like security you're never done

60
00:02:51,389 --> 00:02:52,650
you're never done with your threat model

61
00:02:52,650 --> 00:02:55,109
it's it's a changing it's a living

62
00:02:55,109 --> 00:02:56,760
document that you have to maintain as

63
00:02:56,760 --> 00:02:59,790
the ecosystem changes and your attackers

64
00:02:59,790 --> 00:03:01,650
change and even your your features

65
00:03:01,650 --> 00:03:06,900
change it'll be a changing document for

66
00:03:06,900 --> 00:03:12,450
sure so now mapping the attacks to our

67
00:03:12,450 --> 00:03:14,720
platform assets we have our boot media

68
00:03:14,720 --> 00:03:17,669
runtime firmware that that we mostly

69
00:03:17,669 --> 00:03:20,159
focus on on protecting SMM the rest we

70
00:03:20,159 --> 00:03:22,169
kind of rely on the firmware to protect

71
00:03:22,169 --> 00:03:24,599
and we have our hardware configuration

72
00:03:24,599 --> 00:03:28,069
are locked registers from the core and

73
00:03:28,069 --> 00:03:35,459
PCH so talking a little bit about the

74
00:03:35,459 --> 00:03:39,299
evolution of our threat model there has

75
00:03:39,299 --> 00:03:42,479
definitely been a push or a challenge

76
00:03:42,479 --> 00:03:45,659
from the community to move that line of

77
00:03:45,659 --> 00:03:52,049
a physical attack to the left yeah so

78
00:03:52,049 --> 00:03:53,970
historically it was down the middle

79
00:03:53,970 --> 00:03:57,120
where anything went was physical we

80
00:03:57,120 --> 00:03:59,010
don't care if you have physical access

81
00:03:59,010 --> 00:04:01,979
to the system then you can explode it

82
00:04:01,979 --> 00:04:03,659
hammer it you can do worse things you

83
00:04:03,659 --> 00:04:06,810
can just steal it but but but more and

84
00:04:06,810 --> 00:04:09,150
more and like Trammell mentioned in his

85
00:04:09,150 --> 00:04:12,389
keynote for example boot guard is all

86
00:04:12,389 --> 00:04:15,299
the way down to open chassis right so

87
00:04:15,299 --> 00:04:16,858
four different features the line is in a

88
00:04:16,858 --> 00:04:19,709
different place and again everybody has

89
00:04:19,709 --> 00:04:22,560
a different threat model so this is a

90
00:04:22,560 --> 00:04:25,590
fuzzy line but the challenges seems the

91
00:04:25,590 --> 00:04:26,639
trend seems to be to

92
00:04:26,639 --> 00:04:32,150
challenge that physical access line

93
00:04:33,080 --> 00:04:36,240
here's some of our interfaces we have

94
00:04:36,240 --> 00:04:40,279
hardware and firmware we have our

95
00:04:40,279 --> 00:04:43,490
registers for processor and chipset and

96
00:04:43,490 --> 00:04:46,349
then firmware wise we have our actual

97
00:04:46,349 --> 00:04:48,599
firmware that we care to protect for

98
00:04:48,599 --> 00:04:54,090
integrity and together it's a complex

99
00:04:54,090 --> 00:04:56,249
picture of we have our assets we have

100
00:04:56,249 --> 00:05:00,810
our attacker model and and and we have

101
00:05:00,810 --> 00:05:04,919
the never-ending quest to protect detect

102
00:05:04,919 --> 00:05:08,250
and recover so this was just a small and

103
00:05:08,250 --> 00:05:11,219
true two platform security to segue into

104
00:05:11,219 --> 00:05:14,279
a few examples of attacks and features

105
00:05:14,279 --> 00:05:16,139
that we've implemented to try to protect

106
00:05:16,139 --> 00:05:17,599
against them

107
00:05:17,599 --> 00:05:22,680
starting with pretty recent attacks that

108
00:05:22,680 --> 00:05:26,060
have been presented at blackhat Def Con

109
00:05:26,060 --> 00:05:29,279
recently by eclipse and we have an

110
00:05:29,279 --> 00:05:33,629
eclipse ight on site um so this is

111
00:05:33,629 --> 00:05:34,710
interesting because for the first time

112
00:05:34,710 --> 00:05:38,279
we're seeing remote from where attacks

113
00:05:38,279 --> 00:05:41,580
where you can run arbitrary code on a

114
00:05:41,580 --> 00:05:45,629
platform remotely my favorite was the

115
00:05:45,629 --> 00:05:49,649
ASCII calc pop so yeah I go check out

116
00:05:49,649 --> 00:05:53,909
their talks basically the problem here

117
00:05:53,909 --> 00:05:57,899
is if you're doing CTP and non-https

118
00:05:57,899 --> 00:06:00,479
you're vulnerable to spoofing then in

119
00:06:00,479 --> 00:06:02,189
the middle tax or denial services

120
00:06:02,189 --> 00:06:04,889
because you can't authenticate and

121
00:06:04,889 --> 00:06:06,810
verify that you're actually connected to

122
00:06:06,810 --> 00:06:08,270
the server you think you're connected to

123
00:06:08,270 --> 00:06:13,580
so we now have HTTPS boots in Tiano core

124
00:06:13,580 --> 00:06:15,899
for all of these features we have the

125
00:06:15,899 --> 00:06:17,729
source and the white papers and this has

126
00:06:17,729 --> 00:06:19,830
the getting started guide we've

127
00:06:19,830 --> 00:06:23,699
implemented the TLS protocol and yeah

128
00:06:23,699 --> 00:06:25,649
one of the other things that we do is we

129
00:06:25,649 --> 00:06:28,860
save our secret our certificate in in

130
00:06:28,860 --> 00:06:30,899
authenticated variable which is

131
00:06:30,899 --> 00:06:32,759
protected against replay attacks with

132
00:06:32,759 --> 00:06:35,669
timestamps and monotonic counters and is

133
00:06:35,669 --> 00:06:38,310
verified with either a platform key

134
00:06:38,310 --> 00:06:45,390
kaor DBT BX buffer overflows it's funny

135
00:06:45,390 --> 00:06:46,740
to me that I even have to explain this

136
00:06:46,740 --> 00:06:52,470
but basically when you overwrite the

137
00:06:52,470 --> 00:06:54,750
bounce of a of a buffer this may be a

138
00:06:54,750 --> 00:06:57,600
problem and it may be exploitable if you

139
00:06:57,600 --> 00:07:00,330
overwrite the stack or the heap this has

140
00:07:00,330 --> 00:07:05,220
been a bug is oldest time um I just did

141
00:07:05,220 --> 00:07:07,560
a quick Google search and found like the

142
00:07:07,560 --> 00:07:10,020
first four hits on you know this has

143
00:07:10,020 --> 00:07:11,670
been a thing for a long time and will

144
00:07:11,670 --> 00:07:15,090
continue to be a thing and um it's a

145
00:07:15,090 --> 00:07:18,360
thing for you as well so we've

146
00:07:18,360 --> 00:07:20,580
implemented guard page and this works

147
00:07:20,580 --> 00:07:25,020
for stack and heap um basically how we

148
00:07:25,020 --> 00:07:28,010
do is we have a non present guard page

149
00:07:28,010 --> 00:07:32,180
that one it gets overwritten you get an

150
00:07:32,180 --> 00:07:36,810
immediate trigger a fault page fault

151
00:07:36,810 --> 00:07:40,940
exception is immediately triggered this

152
00:07:41,270 --> 00:07:47,490
is better than not having it it's it's

153
00:07:47,490 --> 00:07:50,040
it's not perfect solution it's it's it's

154
00:07:50,040 --> 00:07:52,940
there's large overhead in size

155
00:07:52,940 --> 00:07:56,910
performance it makes it slow so it's

156
00:07:56,910 --> 00:07:59,370
mainly a debug feature so making sure

157
00:07:59,370 --> 00:08:04,890
that all of your configurations run and

158
00:08:04,890 --> 00:08:08,490
this will fall flat on face but it would

159
00:08:08,490 --> 00:08:13,530
also fall flat on face if you you we

160
00:08:13,530 --> 00:08:16,320
don't have exception handling and and we

161
00:08:16,320 --> 00:08:17,880
have limited resources so this is one of

162
00:08:17,880 --> 00:08:20,850
the things that you can use to afford

163
00:08:20,850 --> 00:08:23,070
forensics and trying to figure out what

164
00:08:23,070 --> 00:08:25,080
happened if there was a problem or or

165
00:08:25,080 --> 00:08:26,820
just as a debug feature to make sure

166
00:08:26,820 --> 00:08:30,840
that your configurations don't cause

167
00:08:30,840 --> 00:08:38,190
overflows DMA attacks so crash has been

168
00:08:38,190 --> 00:08:44,970
famous ok well they calm Dima yeah so

169
00:08:44,970 --> 00:08:47,250
he's famous for think pond and and a lot

170
00:08:47,250 --> 00:08:49,980
of backdoors that he implements more

171
00:08:49,980 --> 00:08:51,010
recently enough a member

172
00:08:51,010 --> 00:08:53,470
door that he did through pre-boot DMA

173
00:08:53,470 --> 00:08:58,380
there was a few seconds after PCI

174
00:08:58,380 --> 00:09:01,570
devices were enabled and before the

175
00:09:01,570 --> 00:09:02,710
system was locked where he could

176
00:09:02,710 --> 00:09:05,590
register and that's my handler and do

177
00:09:05,590 --> 00:09:06,400
bad things

178
00:09:06,400 --> 00:09:10,720
Oh frisk also added this functionality

179
00:09:10,720 --> 00:09:16,900
to his PCI leach program and in response

180
00:09:16,900 --> 00:09:20,980
we now have item mu our implementation

181
00:09:20,980 --> 00:09:23,920
is called vtd and basically we have

182
00:09:23,920 --> 00:09:28,270
themed our tables where we specify what

183
00:09:28,270 --> 00:09:31,330
devices have access to so a device will

184
00:09:31,330 --> 00:09:33,220
by default only have access to its own

185
00:09:33,220 --> 00:09:35,980
memory you can tweak it to make sure

186
00:09:35,980 --> 00:09:41,310
that the opcodes or your devices have

187
00:09:41,310 --> 00:09:43,510
access to the things that they need

188
00:09:43,510 --> 00:09:46,420
access to for example device 1 is

189
00:09:46,420 --> 00:09:48,550
assigned to domains a and B if it tries

190
00:09:48,550 --> 00:09:51,880
to access domain C it will not be able

191
00:09:51,880 --> 00:09:57,010
to we have good white paper on it here's

192
00:09:57,010 --> 00:10:00,340
the source 2 it also has its limitations

193
00:10:00,340 --> 00:10:03,790
and it's also not straightforward to set

194
00:10:03,790 --> 00:10:05,560
up and there has to be some time for

195
00:10:05,560 --> 00:10:10,090
someone to set up all the resources

196
00:10:10,090 --> 00:10:13,930
correctly but it's there and it can be

197
00:10:13,930 --> 00:10:21,940
used so yay all right and this one is

198
00:10:21,940 --> 00:10:25,540
not a hack or an attack per se but it's

199
00:10:25,540 --> 00:10:28,920
a problem that we are trying to address

200
00:10:28,920 --> 00:10:32,040
so whenever there is a bug

201
00:10:32,040 --> 00:10:36,730
how long does it take to create report

202
00:10:36,730 --> 00:10:41,520
it get it accepted create a patch for it

203
00:10:41,520 --> 00:10:44,590
have that validated then send that to

204
00:10:44,590 --> 00:10:47,310
OEMs have them validate it and then

205
00:10:47,310 --> 00:10:50,580
actually have it available for people to

206
00:10:50,580 --> 00:10:52,870
choose whether or not they want to

207
00:10:52,870 --> 00:10:55,210
update their stuff how long does that

208
00:10:55,210 --> 00:10:58,630
take total and then we have the wanna

209
00:10:58,630 --> 00:11:01,180
crisis of the world right like this is a

210
00:11:01,180 --> 00:11:04,870
problem and we're trying to do something

211
00:11:04,870 --> 00:11:07,490
so we have capsule update and this is

212
00:11:07,490 --> 00:11:09,200
something that we're trying to champion

213
00:11:09,200 --> 00:11:12,740
across the industry it's not new that we

214
00:11:12,740 --> 00:11:14,750
do capsule updates it's not new that

215
00:11:14,750 --> 00:11:16,850
they're signed we've been doing this for

216
00:11:16,850 --> 00:11:19,370
years we actually open sourced this

217
00:11:19,370 --> 00:11:22,460
solution since 2016 part of the

218
00:11:22,460 --> 00:11:25,430
motivation but for open sourcing it was

219
00:11:25,430 --> 00:11:26,810
mint platform because we wanted to

220
00:11:26,810 --> 00:11:29,630
deliver a full open source platform

221
00:11:29,630 --> 00:11:31,930
solution and updates were missing

222
00:11:31,930 --> 00:11:34,700
there's there some new things for for

223
00:11:34,700 --> 00:11:40,240
this in a recent implementation we got

224
00:11:40,240 --> 00:11:43,970
source and a couple of papers there as

225
00:11:43,970 --> 00:11:49,400
well yes so basically what we do we have

226
00:11:49,400 --> 00:11:54,850
a capsule header that it creates an FMP

227
00:11:54,850 --> 00:12:00,280
protocol that authentic aids the payload

228
00:12:00,280 --> 00:12:04,850
does the update to the flash and if it

229
00:12:04,850 --> 00:12:08,330
succeeds it registers the grid to the es

230
00:12:08,330 --> 00:12:16,040
RT table so what's new so basically we

231
00:12:16,040 --> 00:12:19,400
tried to do it more versatile we can

232
00:12:19,400 --> 00:12:22,670
have the public keys from a vendor you

233
00:12:22,670 --> 00:12:25,150
can have your own public keys in there

234
00:12:25,150 --> 00:12:27,680
we've made it so that you can update

235
00:12:27,680 --> 00:12:30,320
only a piece of the firmware and not the

236
00:12:30,320 --> 00:12:32,300
whole thing so you could just update the

237
00:12:32,300 --> 00:12:32,630
yummy

238
00:12:32,630 --> 00:12:35,270
or you could just update a driver and oh

239
00:12:35,270 --> 00:12:36,920
and you could do multiple things

240
00:12:36,920 --> 00:12:39,050
no it's patch a driver patch and

241
00:12:39,050 --> 00:12:46,460
firmware patch bigger picture we're

242
00:12:46,460 --> 00:12:51,650
trying to make this a push model through

243
00:12:51,650 --> 00:13:01,760
LV FS and left-up FWPD so hopefully and

244
00:13:01,760 --> 00:13:03,640
and part of the motivation behind

245
00:13:03,640 --> 00:13:06,260
capsule update is that we saw people

246
00:13:06,260 --> 00:13:07,880
were implementing them in a whole bunch

247
00:13:07,880 --> 00:13:09,320
of ways so we're trying to standardize

248
00:13:09,320 --> 00:13:12,290
the way we do this as an industry so

249
00:13:12,290 --> 00:13:15,400
hopefully this helps

250
00:13:15,509 --> 00:13:17,369
a little bit of promo for the event

251
00:13:17,369 --> 00:13:20,249
later so we don't expect people to just

252
00:13:20,249 --> 00:13:24,029
take our solutions and trust it and so

253
00:13:24,029 --> 00:13:25,799
we we want to take advantage of the fact

254
00:13:25,799 --> 00:13:27,600
that this is open source and invite the

255
00:13:27,600 --> 00:13:31,049
community to challenge it to test it to

256
00:13:31,049 --> 00:13:32,339
tell us if they think we can do

257
00:13:32,339 --> 00:13:36,419
something better we will be here the

258
00:13:36,419 --> 00:13:39,419
last two days of the con and it would be

259
00:13:39,419 --> 00:13:42,749
great to see you guys there and create

260
00:13:42,749 --> 00:13:44,819
your own capsules and see if you can

261
00:13:44,819 --> 00:13:47,879
bypass the the authentication we invite

262
00:13:47,879 --> 00:13:49,889
people who submit vulnerabilities to the

263
00:13:49,889 --> 00:13:54,899
Intel bug bounty so yeah then that

264
00:13:54,899 --> 00:14:13,199
should be good I think that's all so I'm

265
00:14:13,199 --> 00:14:15,269
hoping for lots of questions since we

266
00:14:15,269 --> 00:14:19,289
still have a very large audience raise

267
00:14:19,289 --> 00:14:24,589
your hands right always the same people

268
00:14:24,649 --> 00:14:26,429
perhaps we're not scared of the

269
00:14:26,429 --> 00:14:29,489
microphone Maggie Owen on the slide

270
00:14:29,489 --> 00:14:31,289
about the firmware updates you said

271
00:14:31,289 --> 00:14:33,569
users can enroll their own public keys

272
00:14:33,569 --> 00:14:36,869
is there some intention that users or

273
00:14:36,869 --> 00:14:38,909
computer owners should be able to sign

274
00:14:38,909 --> 00:14:40,559
their own firmware updates because of

275
00:14:40,559 --> 00:14:42,779
course I would love that and I think

276
00:14:42,779 --> 00:14:45,289
many of us at a open source firmware

277
00:14:45,289 --> 00:14:48,809
conference went to be able to do so yeah

278
00:14:48,809 --> 00:14:50,909
we have that functionality as of right

279
00:14:50,909 --> 00:14:52,439
now I don't know if that this is just a

280
00:14:52,439 --> 00:14:55,849
test feature

281
00:14:57,540 --> 00:15:00,870
nope oh and part of the disclaimer too

282
00:15:00,870 --> 00:15:08,580
is I'm not the right so if you have boot

283
00:15:08,580 --> 00:15:10,800
guard you're gonna have many problems if

284
00:15:10,800 --> 00:15:12,210
you don't have boot guard you may have

285
00:15:12,210 --> 00:15:14,520
to do an initial one-time replacement of

286
00:15:14,520 --> 00:15:17,040
the firmware so that you can enroll your

287
00:15:17,040 --> 00:15:20,790
own FMP drivers and the appropriate keys

288
00:15:20,790 --> 00:15:23,640
but then once you've done that then you

289
00:15:23,640 --> 00:15:25,590
can then you've got the appropriate

290
00:15:25,590 --> 00:15:27,780
public keys in your firmware and then

291
00:15:27,780 --> 00:15:29,370
you could start doing signed updates

292
00:15:29,370 --> 00:15:33,930
from that point with your keys yes yeah

293
00:15:33,930 --> 00:15:44,510
mr. Clippy and yeah right more questions

294
00:15:44,510 --> 00:15:47,730
if we have chip sec guys here so I

295
00:15:47,730 --> 00:15:50,040
submitted issue about micro Python

296
00:15:50,040 --> 00:15:52,890
support and I would like to know what's

297
00:15:52,890 --> 00:16:00,120
your take on that you get the main

298
00:16:00,120 --> 00:16:02,970
maintainer of chips like so yeah we've

299
00:16:02,970 --> 00:16:06,570
started the port to support Python 3 3 4

300
00:16:06,570 --> 00:16:08,850
3 5 so that will get this to supporting

301
00:16:08,850 --> 00:16:10,980
micro Python so we're working on that

302
00:16:10,980 --> 00:16:13,380
this year and trying to get that worked

303
00:16:13,380 --> 00:16:14,820
out there's gonna be a number of bugs

304
00:16:14,820 --> 00:16:17,670
plus there's a lot of stupid things that

305
00:16:17,670 --> 00:16:19,380
we have to fix like you know switching

306
00:16:19,380 --> 00:16:21,960
from the old class model to the new

307
00:16:21,960 --> 00:16:23,900
class model which affects every single

308
00:16:23,900 --> 00:16:28,080
you know test in the test into those

309
00:16:28,080 --> 00:16:30,090
test Suites so needless to say there are

310
00:16:30,090 --> 00:16:31,670
a lot of opportunities for error and

311
00:16:31,670 --> 00:16:33,930
we're going to generate a lot of bugs so

312
00:16:33,930 --> 00:16:37,140
we do have a we do have a branch set up

313
00:16:37,140 --> 00:16:38,580
for that we're working on it

314
00:16:38,580 --> 00:16:40,650
we want to get that done this year and

315
00:16:40,650 --> 00:16:45,240
then micro Python will be it's Python 3

316
00:16:45,240 --> 00:16:52,650
5 correct 3 5 ish but for it for those

317
00:16:52,650 --> 00:16:55,620
of you that don't know there's been a

318
00:16:55,620 --> 00:16:58,980
Python 2 7 port for UEFI for quite some

319
00:16:58,980 --> 00:17:01,230
time and the goal of that yeah I was

320
00:17:01,230 --> 00:17:02,880
getting to that the goal of that was to

321
00:17:02,880 --> 00:17:05,040
be able to take python scripts and

322
00:17:05,040 --> 00:17:08,089
execute them at the UEFI shell because

323
00:17:08,089 --> 00:17:10,560
firmware testings obscure enough as it

324
00:17:10,560 --> 00:17:11,180
is

325
00:17:11,180 --> 00:17:12,890
reducing yet another shell script which

326
00:17:12,890 --> 00:17:14,690
we did he had another C programming

327
00:17:14,690 --> 00:17:17,119
style which we also did and the QA

328
00:17:17,119 --> 00:17:18,470
people don't really know how to do that

329
00:17:18,470 --> 00:17:20,990
but Python is really common in QA and

330
00:17:20,990 --> 00:17:22,730
automation environments so we were

331
00:17:22,730 --> 00:17:24,020
supporting that and chipset takes

332
00:17:24,020 --> 00:17:25,579
advantage of that so they can execute

333
00:17:25,579 --> 00:17:27,980
the same scripts in pre OS environment

334
00:17:27,980 --> 00:17:30,380
in OS environment it's based on Python 2

335
00:17:30,380 --> 00:17:33,860
7 all good things must die that's got an

336
00:17:33,860 --> 00:17:37,460
expiration date of 2020 so we would

337
00:17:37,460 --> 00:17:39,980
rather do this work now worked on y2k

338
00:17:39,980 --> 00:17:40,940
personally I don't want to wait to the

339
00:17:40,940 --> 00:17:42,410
last minute to do this sort of thing

340
00:17:42,410 --> 00:17:46,160
so we've instead of porting to the full

341
00:17:46,160 --> 00:17:48,590
Python 3 tree we looked at micro Python

342
00:17:48,590 --> 00:17:50,810
as an alternative because it's Python 3

343
00:17:50,810 --> 00:17:53,420
compliant but also it's better for a

344
00:17:53,420 --> 00:17:54,590
constrained environment like a firmware

345
00:17:54,590 --> 00:17:56,210
environment you're not going to be doing

346
00:17:56,210 --> 00:17:57,650
crazy multi-threading in these

347
00:17:57,650 --> 00:17:59,180
environments you really want something

348
00:17:59,180 --> 00:18:00,800
that can just get in and execute a small

349
00:18:00,800 --> 00:18:03,410
memory footprint so the micro Python

350
00:18:03,410 --> 00:18:06,020
port is available in 80k to staging

351
00:18:06,020 --> 00:18:08,240
that's where we put up branches before

352
00:18:08,240 --> 00:18:10,160
we consider them to be ready to go to

353
00:18:10,160 --> 00:18:12,770
public like full public once that branch

354
00:18:12,770 --> 00:18:14,690
has gone through it's sort of submission

355
00:18:14,690 --> 00:18:17,770
phase we're gonna take the micro Python

356
00:18:17,770 --> 00:18:19,550
submissions and put them in the main

357
00:18:19,550 --> 00:18:21,500
micro Python tree something we didn't do

358
00:18:21,500 --> 00:18:24,050
with the original Python tree so that'll

359
00:18:24,050 --> 00:18:25,580
be part of the main project we have to

360
00:18:25,580 --> 00:18:26,720
work through their process and

361
00:18:26,720 --> 00:18:28,850
submission and then everything else the

362
00:18:28,850 --> 00:18:30,440
testing framework we built around it

363
00:18:30,440 --> 00:18:32,480
that has all of the you know stuff you

364
00:18:32,480 --> 00:18:34,370
need like the excesses UEFI and hardware

365
00:18:34,370 --> 00:18:36,170
resources that will remain part of edk

366
00:18:36,170 --> 00:18:39,110
too and so during that transition this

367
00:18:39,110 --> 00:18:41,000
is when air can come and you're gonna be

368
00:18:41,000 --> 00:18:43,190
working on getting Python 3 to be the

369
00:18:43,190 --> 00:18:47,210
scripting style for the chipset examples

370
00:18:47,210 --> 00:18:48,950
because you can't just take the Python 2

371
00:18:48,950 --> 00:18:52,190
stuff and run it directly so yeah

372
00:18:52,190 --> 00:18:54,670
after we get that Python 3 support done

373
00:18:54,670 --> 00:18:57,620
we're going to go ahead and we're going

374
00:18:57,620 --> 00:18:59,180
to need we'll have to write the OS

375
00:18:59,180 --> 00:19:01,430
helpful at helper level and at that

376
00:19:01,430 --> 00:19:05,030
point it should be fairly that should be

377
00:19:05,030 --> 00:19:06,740
fairly easy because we're no longer

378
00:19:06,740 --> 00:19:08,960
having to build our own stupid version

379
00:19:08,960 --> 00:19:12,230
of Python 2 and have all of our hooks in

380
00:19:12,230 --> 00:19:13,700
that way we were actually going to be

381
00:19:13,700 --> 00:19:15,710
able to hopefully submit them so that

382
00:19:15,710 --> 00:19:18,530
they're built into micro Python and

383
00:19:18,530 --> 00:19:20,420
you'll be able to grab that and then

384
00:19:20,420 --> 00:19:23,300
just run chip sec on top of the without

385
00:19:23,300 --> 00:19:24,410
any special

386
00:19:24,410 --> 00:19:27,530
modifications so that's gonna start well

387
00:19:27,530 --> 00:19:29,630
hopefully we'll start that at the end of

388
00:19:29,630 --> 00:19:31,880
this year and depending on how hard it

389
00:19:31,880 --> 00:19:35,480
is to get the OS helper in we'll get

390
00:19:35,480 --> 00:19:36,080
that done

391
00:19:36,080 --> 00:19:38,660
hopefully you're early um q1 of next

392
00:19:38,660 --> 00:19:41,870
year and also along the lines of chips

393
00:19:41,870 --> 00:19:44,000
like there's the talk and a workshop on

394
00:19:44,000 --> 00:19:54,380
Friday so be sure to check that so are

395
00:19:54,380 --> 00:19:57,260
you willing to accept for chips like for

396
00:19:57,260 --> 00:19:59,720
example some always help a liar for I

397
00:19:59,720 --> 00:20:02,480
know beats or bare metal stuff that can

398
00:20:02,480 --> 00:20:13,370
run on - okay we have 25 minutes raise

399
00:20:13,370 --> 00:20:22,600
your hand it's too much

400
00:20:29,650 --> 00:20:31,660
I'm curious about the part where you

401
00:20:31,660 --> 00:20:34,150
mentioned the HTTP support and the

402
00:20:34,150 --> 00:20:36,340
firmware way I think you said that the

403
00:20:36,340 --> 00:20:38,020
certificate was also included in the

404
00:20:38,020 --> 00:20:40,270
firmware in that case um how do you

405
00:20:40,270 --> 00:20:42,220
handle a certificate verification in

406
00:20:42,220 --> 00:20:46,830
this case certificate replication yep

407
00:20:50,700 --> 00:20:55,390
revocation great oh yeah we use the

408
00:20:55,390 --> 00:21:00,000
authenticated variable to update it okay

409
00:21:00,570 --> 00:21:02,920
the other disclaimer was I didn't

410
00:21:02,920 --> 00:21:15,010
implement these features but so the

411
00:21:15,010 --> 00:21:16,870
questions about revocation if you look

412
00:21:16,870 --> 00:21:18,550
at the standard model for secure boot

413
00:21:18,550 --> 00:21:22,330
there is a there two databases there's a

414
00:21:22,330 --> 00:21:24,850
DB which is the list of Fallot hashes

415
00:21:24,850 --> 00:21:26,950
and then there's a DB x which you can

416
00:21:26,950 --> 00:21:29,950
use for essentially replication that's

417
00:21:29,950 --> 00:21:32,680
updated from the OS level 20 OS that has

418
00:21:32,680 --> 00:21:36,160
support and you get out oh s updates for

419
00:21:36,160 --> 00:21:40,480
has the ability to publish to DB x the

420
00:21:40,480 --> 00:21:41,590
thing that we would probably have to

421
00:21:41,590 --> 00:21:43,990
take offline to check on is if that

422
00:21:43,990 --> 00:21:46,450
revocation is also the one that works

423
00:21:46,450 --> 00:21:48,460
with HTTPS cuz that enrollment

424
00:21:48,460 --> 00:21:50,680
certificate enrollment process for HTTPS

425
00:21:50,680 --> 00:21:53,140
is a little bit different so that's

426
00:21:53,140 --> 00:21:55,090
probably one to you know throw that

427
00:21:55,090 --> 00:21:56,110
question up on the indicates you

428
00:21:56,110 --> 00:21:59,290
developer bailing list or or pass it on

429
00:21:59,290 --> 00:22:01,150
to one of us but the mailing list is

430
00:22:01,150 --> 00:22:03,490
always a good place to literally and

431
00:22:03,490 --> 00:22:06,630
figuratively hash this things out

432
00:22:10,650 --> 00:22:13,610
more questions

433
00:22:16,310 --> 00:22:20,210
I repeat astonished 30 less 1.0 and 1.1

434
00:22:20,210 --> 00:22:22,130
are still supported because they have

435
00:22:22,130 --> 00:22:24,290
severe flaws are there any plans to

436
00:22:24,290 --> 00:22:27,740
implement Chile's 1.3 because the I've

437
00:22:27,740 --> 00:22:37,250
Siva sanitized last month question for

438
00:22:37,250 --> 00:22:45,590
j1 for the developers so for anything in

439
00:22:45,590 --> 00:22:48,620
Tiana core there's a if you go to Tiana

440
00:22:48,620 --> 00:22:51,850
court org there is a link to a page on

441
00:22:51,850 --> 00:22:54,230
you know community involvement and part

442
00:22:54,230 --> 00:22:57,200
of that is reporting bugs so we use

443
00:22:57,200 --> 00:22:59,600
Bugzilla for that rather than the github

444
00:22:59,600 --> 00:23:01,220
process because it allows us to have a

445
00:23:01,220 --> 00:23:03,890
kind of a secure black box for things

446
00:23:03,890 --> 00:23:06,200
that fall into please don't 0 Deus

447
00:23:06,200 --> 00:23:08,660
categories but there's also a feature

448
00:23:08,660 --> 00:23:12,230
request category so TLS 1.3 sounds like

449
00:23:12,230 --> 00:23:14,480
a feature request so that can be thrown

450
00:23:14,480 --> 00:23:16,400
in there and then that way year that the

451
00:23:16,400 --> 00:23:17,420
advantage of doing a feature request

452
00:23:17,420 --> 00:23:19,340
through Bugzilla

453
00:23:19,340 --> 00:23:22,310
through versus emailing one of us or

454
00:23:22,310 --> 00:23:24,440
finding us at the reception tonight is

455
00:23:24,440 --> 00:23:26,000
that Bugzilla remembers things in the

456
00:23:26,000 --> 00:23:30,020
morning and also it's as long as you're

457
00:23:30,020 --> 00:23:31,670
not reporting a something that falls

458
00:23:31,670 --> 00:23:33,610
under security embargo it's public so

459
00:23:33,610 --> 00:23:36,200
it's a visible workflow and everybody

460
00:23:36,200 --> 00:23:38,660
gets a chance to talk about it and throw

461
00:23:38,660 --> 00:23:43,160
their two cents in so we all have Wi-Fi

462
00:23:43,160 --> 00:23:46,370
you know what to do right now create and

463
00:23:46,370 --> 00:23:55,220
+1 I was sort of the expected answer to

464
00:23:55,220 --> 00:23:58,310
TLS 1.3 which is absolutely okay but the

465
00:23:58,310 --> 00:23:59,390
other part of the question

466
00:23:59,390 --> 00:24:03,020
what about TLS 1.0 and 1.1 and

467
00:24:03,020 --> 00:24:04,910
especially version negotiation we have

468
00:24:04,910 --> 00:24:06,890
seen a lot of downgrade attacks to web

469
00:24:06,890 --> 00:24:08,450
servers and so on that sounds a little

470
00:24:08,450 --> 00:24:11,480
bit dangerous can you actually shed some

471
00:24:11,480 --> 00:24:13,810
light on that

472
00:24:16,850 --> 00:24:20,970
but try it if you can do it report it

473
00:24:20,970 --> 00:24:26,220
bug bounty yeah get your CV you got

474
00:24:26,220 --> 00:24:28,139
thousands of dollars yeah good idea

475
00:24:28,139 --> 00:24:31,830
I do it ok little background on me I

476
00:24:31,830 --> 00:24:34,019
studied in boham you know where the guys

477
00:24:34,019 --> 00:24:35,940
are who basically always do the

478
00:24:35,940 --> 00:24:37,710
downgrade attacks like robot recently

479
00:24:37,710 --> 00:24:42,929
and stuff got a pony award so maybe

480
00:24:42,929 --> 00:24:44,700
that's a bit of an encouragement to

481
00:24:44,700 --> 00:24:47,460
maybe create a buck request that 1.0 and

482
00:24:47,460 --> 00:25:01,980
1.1 are supported so the nice thing

483
00:25:01,980 --> 00:25:04,590
about the network stack in in Teyana

484
00:25:04,590 --> 00:25:06,059
core which you may consider a bad thing

485
00:25:06,059 --> 00:25:07,559
about it depending on how many of the

486
00:25:07,559 --> 00:25:10,940
buttons you push it's super modular so

487
00:25:10,940 --> 00:25:13,769
you could probably chuck TLS one oh and

488
00:25:13,769 --> 00:25:15,359
one one and your configuration and only

489
00:25:15,359 --> 00:25:17,989
support CLS one two

490
00:25:17,989 --> 00:25:20,220
now of course finding those buttons well

491
00:25:20,220 --> 00:25:21,480
we're having workshops on Friday and

492
00:25:21,480 --> 00:25:23,820
Saturday but we can that the network

493
00:25:23,820 --> 00:25:25,649
stack is extremely well documented I'm

494
00:25:25,649 --> 00:25:27,330
gonna give credit to jaehwan and the

495
00:25:27,330 --> 00:25:29,940
team in China that did that work there

496
00:25:29,940 --> 00:25:32,609
their wiki documentation of that is very

497
00:25:32,609 --> 00:25:34,649
very good so I probably poke down on

498
00:25:34,649 --> 00:25:36,090
that and see if you can figure out at

499
00:25:36,090 --> 00:25:37,889
least on your implementation how to to

500
00:25:37,889 --> 00:25:40,668
knock those things out

501
00:25:46,580 --> 00:25:50,010
do you know how much the OEMs keep of

502
00:25:50,010 --> 00:25:52,230
Gianna claw because you said no there

503
00:25:52,230 --> 00:25:54,360
are many buttons how many buttons do

504
00:25:54,360 --> 00:26:07,200
they push may be wrong so yeah getting

505
00:26:07,200 --> 00:26:09,659
down to the actual OEM and how much of

506
00:26:09,659 --> 00:26:11,970
you know the code that they actually

507
00:26:11,970 --> 00:26:14,640
keep and how many buttons they push that

508
00:26:14,640 --> 00:26:17,639
are incorrect it's there's a lot of

509
00:26:17,639 --> 00:26:19,260
hands to change it the code changes

510
00:26:19,260 --> 00:26:21,779
hands a number of times because in most

511
00:26:21,779 --> 00:26:24,809
cases we'll do our best to validate a

512
00:26:24,809 --> 00:26:27,000
reference platform internally and that

513
00:26:27,000 --> 00:26:30,330
code will go out to OMS and IB V's and a

514
00:26:30,330 --> 00:26:32,760
number of other people and they're all

515
00:26:32,760 --> 00:26:35,880
going to make platform decisions and it

516
00:26:35,880 --> 00:26:39,360
just moves on and on so the code changes

517
00:26:39,360 --> 00:26:42,090
hands so yeah it's very possible that

518
00:26:42,090 --> 00:26:44,850
you know someone is going to say well I

519
00:26:44,850 --> 00:26:46,710
don't like that feature I don't like the

520
00:26:46,710 --> 00:26:48,269
security feature turned on because it

521
00:26:48,269 --> 00:26:50,130
makes my life more difficult or it

522
00:26:50,130 --> 00:26:52,350
doesn't allow me to do something that

523
00:26:52,350 --> 00:26:54,630
you know I want my users to do so

524
00:26:54,630 --> 00:26:58,440
they'll turn it off and it's you know

525
00:26:58,440 --> 00:26:59,880
between that you know they're making

526
00:26:59,880 --> 00:27:01,760
feature decisions and they're making

527
00:27:01,760 --> 00:27:03,960
decisions about what their customers

528
00:27:03,960 --> 00:27:07,679
want and so yeah a lot of things can

529
00:27:07,679 --> 00:27:09,600
happen between you know at the beginning

530
00:27:09,600 --> 00:27:12,469
and the end

531
00:27:20,469 --> 00:27:23,299
while we're discussing you know pie in

532
00:27:23,299 --> 00:27:25,519
sky future features what are your

533
00:27:25,519 --> 00:27:28,609
thoughts on eliminating SMM and using

534
00:27:28,609 --> 00:27:31,700
some of these ultra so that's I suppose

535
00:27:31,700 --> 00:27:34,519
question one and two making use of some

536
00:27:34,519 --> 00:27:36,320
of these these new roots of trusts that

537
00:27:36,320 --> 00:27:40,179
the hardware vendors are starting to

538
00:27:40,179 --> 00:27:50,869
implement and proliferate okay so first

539
00:27:50,869 --> 00:27:53,419
part on eliminating SMM stand up for

540
00:27:53,419 --> 00:27:55,909
that one stare stare at me intently when

541
00:27:55,909 --> 00:28:01,519
we talk about this okay so SMM is one of

542
00:28:01,519 --> 00:28:04,849
those things that hmm you know you it's

543
00:28:04,849 --> 00:28:06,529
there in the hardware because some

544
00:28:06,529 --> 00:28:07,669
customer needs it for an interesting

545
00:28:07,669 --> 00:28:09,919
feature however we all know that it has

546
00:28:09,919 --> 00:28:13,700
it's complicated to do right and it has

547
00:28:13,700 --> 00:28:16,639
pitfalls when you do it wrong it also

548
00:28:16,639 --> 00:28:19,039
has some you know because you're

549
00:28:19,039 --> 00:28:20,869
basically stepping away from the host

550
00:28:20,869 --> 00:28:22,759
processor running in like a ring - One

551
00:28:22,759 --> 00:28:25,609
Ring - - kind of situation it's not

552
00:28:25,609 --> 00:28:28,190
ideal from a visibility standpoint start

553
00:28:28,190 --> 00:28:29,779
for the OS to audit what's going on

554
00:28:29,779 --> 00:28:32,210
which can create some problems so we

555
00:28:32,210 --> 00:28:34,009
have a lot of initiatives going on to

556
00:28:34,009 --> 00:28:36,979
try to reduce the use of or in some

557
00:28:36,979 --> 00:28:38,450
cases if you happen to work for a

558
00:28:38,450 --> 00:28:40,909
company that designs processors for a

559
00:28:40,909 --> 00:28:41,869
living

560
00:28:41,869 --> 00:28:43,940
look at different architectures that

561
00:28:43,940 --> 00:28:46,219
those are longer-term solutions because

562
00:28:46,219 --> 00:28:48,349
one day if you just say we're gonna take

563
00:28:48,349 --> 00:28:51,859
out SMM then it impacts the way that a

564
00:28:51,859 --> 00:28:53,239
lot of current OS and software

565
00:28:53,239 --> 00:28:54,649
assumptions are made and the way a lot

566
00:28:54,649 --> 00:28:56,419
of customer sumption czar made but it's

567
00:28:56,419 --> 00:28:58,269
something that we actively talk about

568
00:28:58,269 --> 00:29:00,469
we're looking more at looking at

569
00:29:00,469 --> 00:29:02,059
features like say runtime variable

570
00:29:02,059 --> 00:29:04,999
access and seeing if can we make runtime

571
00:29:04,999 --> 00:29:06,679
variable access go away or work

572
00:29:06,679 --> 00:29:08,629
differently so that it doesn't have a

573
00:29:08,629 --> 00:29:11,450
requirement to do it in SMM because you

574
00:29:11,450 --> 00:29:13,099
put so many weird requirements into it

575
00:29:13,099 --> 00:29:14,690
that the only good way to implement it

576
00:29:14,690 --> 00:29:17,599
is through something like SMM or another

577
00:29:17,599 --> 00:29:19,580
side channel or back channel same side

578
00:29:19,580 --> 00:29:20,419
channel in this room is kind of

579
00:29:20,419 --> 00:29:21,739
dangerous I wasn't talking about that

580
00:29:21,739 --> 00:29:25,190
difference I general that gets down to

581
00:29:25,190 --> 00:29:26,929
the second question where you're looking

582
00:29:26,929 --> 00:29:27,950
at different ways of doing route of

583
00:29:27,950 --> 00:29:30,710
trust and those are really compelling

584
00:29:30,710 --> 00:29:33,530
and it's I'm not sure if that's a thing

585
00:29:33,530 --> 00:29:35,030
I think Vincent's approach he was

586
00:29:35,030 --> 00:29:37,010
talking about earlier today of code for

587
00:29:37,010 --> 00:29:39,170
a standard second is probably the way to

588
00:29:39,170 --> 00:29:41,090
go with that because they there are so

589
00:29:41,090 --> 00:29:42,560
many alternatives for that right now

590
00:29:42,560 --> 00:29:43,580
that I don't

591
00:29:43,580 --> 00:29:46,550
my personal feeling I don't really think

592
00:29:46,550 --> 00:29:49,640
that we know which one works best for a

593
00:29:49,640 --> 00:29:51,950
general situation every customer that

594
00:29:51,950 --> 00:29:54,380
has put investment into coming up with a

595
00:29:54,380 --> 00:29:56,240
different way of handling route of trust

596
00:29:56,240 --> 00:29:58,280
has done so very very specific business

597
00:29:58,280 --> 00:30:00,080
reason whether those match up with

598
00:30:00,080 --> 00:30:01,760
everybody else's I think it's too early

599
00:30:01,760 --> 00:30:04,700
to tell but have it's it's obvious you

600
00:30:04,700 --> 00:30:06,200
know the way that until does boot card

601
00:30:06,200 --> 00:30:08,180
for instance that essentially is a root

602
00:30:08,180 --> 00:30:10,760
of trust preservation so there's a lot

603
00:30:10,760 --> 00:30:12,170
of interest in making sure their route

604
00:30:12,170 --> 00:30:14,330
of trust isn't compromised so I think

605
00:30:14,330 --> 00:30:15,710
looking at something that's broader than

606
00:30:15,710 --> 00:30:16,820
like what we've done in the past with

607
00:30:16,820 --> 00:30:20,360
TPM is definitely necessary well yeah I

608
00:30:20,360 --> 00:30:22,700
guess mmm probably not the best way to

609
00:30:22,700 --> 00:30:25,400
do most of what we do with it and I

610
00:30:25,400 --> 00:30:27,020
think there's a lot of concerted effort

611
00:30:27,020 --> 00:30:29,840
from folks from a specification and an

612
00:30:29,840 --> 00:30:31,520
implementation standpoint both to try to

613
00:30:31,520 --> 00:30:33,560
reduce the use so we can figure out how

614
00:30:33,560 --> 00:30:36,820
we can wean ourselves off of it

615
00:30:46,169 --> 00:30:47,999
hope that you guys actually ended a

616
00:30:47,999 --> 00:30:58,049
prison thing with me alright thanks a

617
00:30:58,049 --> 00:31:05,580
lot oh you said with the capsules for

618
00:31:05,580 --> 00:31:07,409
example you can update individual pieces

619
00:31:07,409 --> 00:31:10,080
of the firmware for example the crypto

620
00:31:10,080 --> 00:31:12,059
library if there was a patch for this

621
00:31:12,059 --> 00:31:14,009
could you because I don't think it's the

622
00:31:14,009 --> 00:31:16,499
shared library you can just swap out can

623
00:31:16,499 --> 00:31:18,960
you maybe patch the Crypt earlier but

624
00:31:18,960 --> 00:31:23,730
unit so on not by itself like big

625
00:31:23,730 --> 00:31:27,809
segments of like BIOS on its own or the

626
00:31:27,809 --> 00:31:32,850
enemy on its own but a driver but not a

627
00:31:32,850 --> 00:31:37,699
small part yeah

628
00:31:52,289 --> 00:31:54,669
all right I guess that runs up the run

629
00:31:54,669 --> 00:31:57,140
up thank you very much again

630
00:31:57,140 --> 00:32:02,449
[Applause]

631
00:32:02,860 --> 00:32:09,738
[Music]

