1
00:00:00,000 --> 00:00:04,730
[Music]

2
00:00:04,730 --> 00:00:08,309
next up we have Lehman redwood and he'll

3
00:00:08,309 --> 00:00:11,340
be talking about the challenges for the

4
00:00:11,340 --> 00:00:14,759
ecosystem and companies when it comes to

5
00:00:14,759 --> 00:00:17,570
open sourcing historically closed source

6
00:00:17,570 --> 00:00:23,070
firmware for sound some courts so give

7
00:00:23,070 --> 00:00:30,330
it up fully Ingrid woods thank you for

8
00:00:30,330 --> 00:00:33,059
coming today and as I said they're the

9
00:00:33,059 --> 00:00:37,410
same husband a journey for us and to

10
00:00:37,410 --> 00:00:41,309
take closed-source form where and how to

11
00:00:41,309 --> 00:00:46,320
open sources and so this is not forum

12
00:00:46,320 --> 00:00:49,469
where when I'm boot farm where this is

13
00:00:49,469 --> 00:00:52,230
audio DSP firmware so I'm relatively a

14
00:00:52,230 --> 00:00:55,860
firmware newbie I usually attend my net

15
00:00:55,860 --> 00:00:58,920
conferences so for me I've been

16
00:00:58,920 --> 00:01:00,899
introduced to all the different aspects

17
00:01:00,899 --> 00:01:05,010
of boot form where today so I'm gonna

18
00:01:05,010 --> 00:01:08,549
try and talk about audio formula now and

19
00:01:08,549 --> 00:01:11,010
the mission of this is just to help

20
00:01:11,010 --> 00:01:13,439
other people who are considering open

21
00:01:13,439 --> 00:01:15,990
sourcing firmware and that could be

22
00:01:15,990 --> 00:01:18,659
firmware for another audio DSP or it

23
00:01:18,659 --> 00:01:19,860
could be form where they have for their

24
00:01:19,860 --> 00:01:23,400
sensors or any particular subsystem with

25
00:01:23,400 --> 00:01:26,220
it within their hardware and I'm trying

26
00:01:26,220 --> 00:01:28,080
to inspire others and describe the

27
00:01:28,080 --> 00:01:30,299
challenge is that we had and how we've

28
00:01:30,299 --> 00:01:32,610
overcome those challenges or trying to

29
00:01:32,610 --> 00:01:34,049
overcome these challenges to me that

30
00:01:34,049 --> 00:01:37,340
make a successful open source project

31
00:01:37,340 --> 00:01:39,840
lastly I'll also be introducing the

32
00:01:39,840 --> 00:01:41,820
architecture of the forum where as well

33
00:01:41,820 --> 00:01:44,939
there may be some similar allergies to

34
00:01:44,939 --> 00:01:49,259
other firmwares or to you'll notice if

35
00:01:49,259 --> 00:01:51,600
anyone's familiar of Linux there's been

36
00:01:51,600 --> 00:01:55,369
some September lot of similarities there

37
00:01:55,430 --> 00:01:59,729
and about me I work for Intel and I'm a

38
00:01:59,729 --> 00:02:02,310
software architect there I've been using

39
00:02:02,310 --> 00:02:05,850
Linux pretty long since 94

40
00:02:05,850 --> 00:02:08,369
the developer of the Simon Says stop

41
00:02:08,369 --> 00:02:10,410
subsystem for socks of within Linux and

42
00:02:10,410 --> 00:02:12,269
also for the power management IC

43
00:02:12,269 --> 00:02:15,420
subsystem in Linux I'm relatively new to

44
00:02:15,420 --> 00:02:17,580
firmware and I've only been working on

45
00:02:17,580 --> 00:02:21,420
firmware since in 2015 with audio for me

46
00:02:21,420 --> 00:02:24,480
but before that I'm pretty much an audio

47
00:02:24,480 --> 00:02:29,819
guy and a caracal guy so what is sound

48
00:02:29,819 --> 00:02:33,360
open firmware and it's really an

49
00:02:33,360 --> 00:02:36,569
infrastructure for developing audio

50
00:02:36,569 --> 00:02:45,959
processing algorithms and on an on on an

51
00:02:45,959 --> 00:02:48,209
agnostic hardware platform so because

52
00:02:48,209 --> 00:02:50,819
Intel is the main sponsor here it

53
00:02:50,819 --> 00:02:53,310
doesn't necessarily force software on an

54
00:02:53,310 --> 00:02:54,030
Intel hardware

55
00:02:54,030 --> 00:02:56,190
one of the key decisions was to make

56
00:02:56,190 --> 00:02:58,739
this as generic as possible so that you

57
00:02:58,739 --> 00:03:00,420
could run this on arm as well or you

58
00:03:00,420 --> 00:03:03,840
could run it on a TI DSP there's nothing

59
00:03:03,840 --> 00:03:06,000
specifically within the driver or within

60
00:03:06,000 --> 00:03:10,760
the forum where that ties it to to Intel

61
00:03:13,370 --> 00:03:16,709
so the dark ages so when I say the dark

62
00:03:16,709 --> 00:03:19,620
ages here this is reference to not in

63
00:03:19,620 --> 00:03:22,049
the medieval period but you the the

64
00:03:22,049 --> 00:03:23,940
darkness within the audio landscape

65
00:03:23,940 --> 00:03:27,510
prior to having open source firmware and

66
00:03:27,510 --> 00:03:30,780
so I'll be working on do drivers a long

67
00:03:30,780 --> 00:03:32,910
time and I you know been working with

68
00:03:32,910 --> 00:03:34,859
drivers and have had to talk to a DSP

69
00:03:34,859 --> 00:03:37,319
for a long time and the biggest problem

70
00:03:37,319 --> 00:03:39,120
we all always had was that this forum

71
00:03:39,120 --> 00:03:41,250
where team was usually located in

72
00:03:41,250 --> 00:03:43,200
another country and another time zone

73
00:03:43,200 --> 00:03:46,739
and they would go and write the forum

74
00:03:46,739 --> 00:03:48,150
where and this forum we will be

75
00:03:48,150 --> 00:03:50,989
traditionally written for Windows and

76
00:03:50,989 --> 00:03:53,160
they would give you this formally

77
00:03:53,160 --> 00:03:56,639
release later on and when you had to

78
00:03:56,639 --> 00:03:58,290
write the Linux driver for this you had

79
00:03:58,290 --> 00:04:00,269
many many questions you had problems

80
00:04:00,269 --> 00:04:01,829
getting it to work your problems getting

81
00:04:01,829 --> 00:04:04,230
it to boot you had problems getting high

82
00:04:04,230 --> 00:04:06,090
quality audio playback your problems

83
00:04:06,090 --> 00:04:10,129
hitting the peaky eyes for for power and

84
00:04:10,129 --> 00:04:13,859
this usually involved us lots of email

85
00:04:13,859 --> 00:04:16,048
discussions to this other timezone and

86
00:04:16,048 --> 00:04:17,488
they would reply back

87
00:04:17,488 --> 00:04:19,470
and to fix a simple bug it would usually

88
00:04:19,470 --> 00:04:22,620
take you about three or four days and

89
00:04:22,620 --> 00:04:25,080
the they would never share their source

90
00:04:25,080 --> 00:04:26,819
code with us you know they kept it in

91
00:04:26,819 --> 00:04:30,180
hives we would ask they often provide us

92
00:04:30,180 --> 00:04:32,759
with documentation and this

93
00:04:32,759 --> 00:04:34,620
documentation obviously would never be

94
00:04:34,620 --> 00:04:37,770
as up-to-date as the source code so this

95
00:04:37,770 --> 00:04:39,150
isn't just not with Intel this is with

96
00:04:39,150 --> 00:04:41,849
my employment history before and when I

97
00:04:41,849 --> 00:04:44,250
was consulting as well you tend to

98
00:04:44,250 --> 00:04:46,020
always get a closed source audio DSP

99
00:04:46,020 --> 00:04:51,570
firmware so changing course was looking

100
00:04:51,570 --> 00:04:54,570
for why we want to change course here so

101
00:04:54,570 --> 00:04:56,250
for audio that you know that there is

102
00:04:56,250 --> 00:04:58,740
market drivers here and we're getting a

103
00:04:58,740 --> 00:05:01,199
lot of customers asking for us to open

104
00:05:01,199 --> 00:05:03,120
source the firmware we have customers we

105
00:05:03,120 --> 00:05:05,970
want to be able to use the audio DSP for

106
00:05:05,970 --> 00:05:07,590
general purpose computer as well

107
00:05:07,590 --> 00:05:09,509
we have customers we want to customize

108
00:05:09,509 --> 00:05:11,520
their audio processing processing

109
00:05:11,520 --> 00:05:14,130
algorithms alongside with the use cases

110
00:05:14,130 --> 00:05:16,710
so so when Intel does a firmware for

111
00:05:16,710 --> 00:05:18,479
audio it tends to have a set of

112
00:05:18,479 --> 00:05:21,000
requirements in mind and those

113
00:05:21,000 --> 00:05:23,280
requirements may well suit very well to

114
00:05:23,280 --> 00:05:26,130
a laptop or a PC but they might not be

115
00:05:26,130 --> 00:05:28,740
that good for a car or for a mobile

116
00:05:28,740 --> 00:05:32,759
phone so having this open allows for the

117
00:05:32,759 --> 00:05:35,300
customization by by the customer here

118
00:05:35,300 --> 00:05:38,250
there's also a lot of growth in areas I

119
00:05:38,250 --> 00:05:39,990
mean an example at the bottom here is on

120
00:05:39,990 --> 00:05:42,960
the home assistance so there's an awful

121
00:05:42,960 --> 00:05:45,659
lot of growth there so having this open

122
00:05:45,659 --> 00:05:49,050
an infrastructure provides help for the

123
00:05:49,050 --> 00:05:53,759
companies making those devices what

124
00:05:53,759 --> 00:05:56,219
another driver was well initial driver

125
00:05:56,219 --> 00:05:58,349
for for sof certainly was the the menu

126
00:05:58,349 --> 00:06:00,150
board and the family board sitting

127
00:06:00,150 --> 00:06:02,460
outside actually so the goal behind the

128
00:06:02,460 --> 00:06:03,810
menu board project was to provide a

129
00:06:03,810 --> 00:06:06,389
completely open source hardware software

130
00:06:06,389 --> 00:06:10,289
and firmware platform and the they had

131
00:06:10,289 --> 00:06:12,090
done very very well they had open source

132
00:06:12,090 --> 00:06:14,849
everything except for the audio DSP

133
00:06:14,849 --> 00:06:18,180
firmware and so when they came to me and

134
00:06:18,180 --> 00:06:20,039
asked because they came to me as I was

135
00:06:20,039 --> 00:06:21,419
the driver author they came to me and

136
00:06:21,419 --> 00:06:23,880
said Liam how can we open source

137
00:06:23,880 --> 00:06:27,389
firmware for this so my first look was

138
00:06:27,389 --> 00:06:29,630
to ask the existing forum where teams

139
00:06:29,630 --> 00:06:33,950
and those guys were traditionally from a

140
00:06:33,950 --> 00:06:35,690
closed source environment and you know

141
00:06:35,690 --> 00:06:37,250
there was a lot of pushback you know

142
00:06:37,250 --> 00:06:38,660
this cannot be open source work for

143
00:06:38,660 --> 00:06:42,020
various reasons so I figured on myself

144
00:06:42,020 --> 00:06:44,120
as a one-man project to see how

145
00:06:44,120 --> 00:06:47,180
difficult it would be to develop a form

146
00:06:47,180 --> 00:06:48,650
where for the menu board here

147
00:06:48,650 --> 00:06:50,900
and you can see that the characteristics

148
00:06:50,900 --> 00:06:54,890
of the DSP it has a very very small

149
00:06:54,890 --> 00:06:57,710
memory it's you know it doesn't have to

150
00:06:57,710 --> 00:06:59,750
gigabytes over I'm like the beta CPU

151
00:06:59,750 --> 00:07:02,600
there we're talking kilobytes of RAM and

152
00:07:02,600 --> 00:07:10,280
so the real challenge is there so this

153
00:07:10,280 --> 00:07:12,830
is the the architecture of this DSP work

154
00:07:12,830 --> 00:07:15,740
I'm targeting here you can basically see

155
00:07:15,740 --> 00:07:19,820
it's a single core DSP core and it has a

156
00:07:19,820 --> 00:07:22,250
couple of DMA engines and the SSP ports

157
00:07:22,250 --> 00:07:24,170
on the right hand side those are your

158
00:07:24,170 --> 00:07:26,060
audio interfaces so those would be for

159
00:07:26,060 --> 00:07:29,690
signing I squared s audio out and there

160
00:07:29,690 --> 00:07:32,180
is instruction cache instruction ROM and

161
00:07:32,180 --> 00:07:35,770
in total you were looking at 96 K of RAM

162
00:07:35,770 --> 00:07:40,100
so when you think about writing in a an

163
00:07:40,100 --> 00:07:41,360
application when you say that's an

164
00:07:41,360 --> 00:07:43,190
application developer you know 96 K is

165
00:07:43,190 --> 00:07:45,740
too small for them and even for Linux

166
00:07:45,740 --> 00:07:47,150
you know you're never going to get Linux

167
00:07:47,150 --> 00:07:49,670
running 196 care of instruction around

168
00:07:49,670 --> 00:07:53,420
there so it meant you know starting a

169
00:07:53,420 --> 00:07:56,690
firmware from scratch here and and also

170
00:07:56,690 --> 00:07:59,570
to fit into this 168 K data ROM and so

171
00:07:59,570 --> 00:08:01,370
you have to fit your audio buffers in

172
00:08:01,370 --> 00:08:03,830
there as well so what so that was quite

173
00:08:03,830 --> 00:08:05,660
a challenge there but I'll come to that

174
00:08:05,660 --> 00:08:08,810
later how we came to overcome that and

175
00:08:08,810 --> 00:08:11,720
the hosts so this is the DSP looks like

176
00:08:11,720 --> 00:08:15,980
but there's a this mailbox here this is

177
00:08:15,980 --> 00:08:18,050
what the host driver communicates with

178
00:08:18,050 --> 00:08:21,230
the DSP so the host driver basically

179
00:08:21,230 --> 00:08:23,720
sends IPC commands to and from this so

180
00:08:23,720 --> 00:08:25,790
as well as providing a DSP form where we

181
00:08:25,790 --> 00:08:29,470
have to provide a host driver as well

182
00:08:31,740 --> 00:08:33,330
we talked about the challenges here so

183
00:08:33,330 --> 00:08:34,919
it wasn't just the case of writing

184
00:08:34,919 --> 00:08:37,470
firmware and texting and validating it

185
00:08:37,470 --> 00:08:39,840
there was a lot more complex these

186
00:08:39,840 --> 00:08:44,520
involved number one and until being a

187
00:08:44,520 --> 00:08:46,200
larger organization and I've watched

188
00:08:46,200 --> 00:08:48,120
other large organizations before Intel

189
00:08:48,120 --> 00:08:50,280
the number one challenge of political

190
00:08:50,280 --> 00:08:55,140
challenges and we found that you know

191
00:08:55,140 --> 00:08:56,880
when you speak to colleagues most were

192
00:08:56,880 --> 00:08:58,830
the either strongly in favor of open

193
00:08:58,830 --> 00:09:02,070
sourcing audio DSP farmer or most wished

194
00:09:02,070 --> 00:09:04,350
sorry the most proportionate people were

195
00:09:04,350 --> 00:09:05,730
either strong in favor or strongly

196
00:09:05,730 --> 00:09:07,770
against there wasn't many people who

197
00:09:07,770 --> 00:09:11,160
were neutral and people who were most

198
00:09:11,160 --> 00:09:13,440
strongly against were the the current

199
00:09:13,440 --> 00:09:17,070
closed source former team and they saw

200
00:09:17,070 --> 00:09:19,860
this as a threat to their jobs they

201
00:09:19,860 --> 00:09:22,110
asked me about fears of disclosing IP

202
00:09:22,110 --> 00:09:26,460
how will we add value and but you

203
00:09:26,460 --> 00:09:29,100
generally have to be prepared for this

204
00:09:29,100 --> 00:09:31,290
and you have to be able to speak to them

205
00:09:31,290 --> 00:09:33,750
and tell them that there's no job fear

206
00:09:33,750 --> 00:09:37,380
here and you tell them the benefits of

207
00:09:37,380 --> 00:09:40,500
open source so now that you know we have

208
00:09:40,500 --> 00:09:42,570
the went down this path these are the

209
00:09:42,570 --> 00:09:43,890
same people who are developing the open

210
00:09:43,890 --> 00:09:47,040
source firmware and they're all actively

211
00:09:47,040 --> 00:09:50,300
I would say enjoying this because and

212
00:09:50,300 --> 00:09:52,440
taking them from a closed source world

213
00:09:52,440 --> 00:09:54,090
and you know they're really getting

214
00:09:54,090 --> 00:09:58,730
involved now and with firmware on github

215
00:09:58,730 --> 00:10:01,530
and the one thing I will see is that the

216
00:10:01,530 --> 00:10:02,760
court from Margaret Thatcher at the

217
00:10:02,760 --> 00:10:06,000
bottom there and it's true because you

218
00:10:06,000 --> 00:10:08,010
will have to be prepared to fight the

219
00:10:08,010 --> 00:10:10,050
same battle more than once to win it and

220
00:10:10,050 --> 00:10:12,150
I'm still having discussions with

221
00:10:12,150 --> 00:10:14,220
colleagues about the benefits of open

222
00:10:14,220 --> 00:10:15,930
source forum we are against closed

223
00:10:15,930 --> 00:10:18,870
source firmware what what did help me is

224
00:10:18,870 --> 00:10:20,880
you know certainly have some codes that

225
00:10:20,880 --> 00:10:23,790
you can share you can demo and go to

226
00:10:23,790 --> 00:10:25,650
other conferences and talk about it so I

227
00:10:25,650 --> 00:10:27,780
talked about a way by a plumbers

228
00:10:27,780 --> 00:10:32,900
conference for Linux in 2017 you know

229
00:10:32,900 --> 00:10:35,850
for me you know getting customers on

230
00:10:35,850 --> 00:10:38,010
site so you could talk about it and then

231
00:10:38,010 --> 00:10:39,500
customers would eventually ask for it

232
00:10:39,500 --> 00:10:42,450
and the sales guys and the marketing

233
00:10:42,450 --> 00:10:43,950
guys were very keen as well because they

234
00:10:43,950 --> 00:10:45,370
saw not as a way to enable

235
00:10:45,370 --> 00:10:49,440
customers mmm so it's all about you know

236
00:10:49,440 --> 00:10:51,820
get gather momentum and within your own

237
00:10:51,820 --> 00:10:55,900
organization to do this if I go into the

238
00:10:55,900 --> 00:10:57,880
technical challenges and usually when

239
00:10:57,880 --> 00:10:59,380
you're dog doing an application open

240
00:10:59,380 --> 00:11:01,960
sourcing an application the compiler is

241
00:11:01,960 --> 00:11:03,520
not a technical challenge because you

242
00:11:03,520 --> 00:11:06,010
have these compilers for x86 for arm

243
00:11:06,010 --> 00:11:10,270
they're open source already but our DSP

244
00:11:10,270 --> 00:11:13,839
runs on ten silica eyes off and the

245
00:11:13,839 --> 00:11:16,690
problem here is that the GCC compiler

246
00:11:16,690 --> 00:11:21,160
can generate ten silica code but it

247
00:11:21,160 --> 00:11:23,260
cannot do any of the same instructions

248
00:11:23,260 --> 00:11:25,300
so when I say assembly instructions it's

249
00:11:25,300 --> 00:11:27,880
a single instruction multiple data so on

250
00:11:27,880 --> 00:11:29,290
an Intel Architecture those would be

251
00:11:29,290 --> 00:11:33,100
things like X a C or a V X so the

252
00:11:33,100 --> 00:11:36,310
cadence compiler can do that but the GCC

253
00:11:36,310 --> 00:11:37,150
compiler can't

254
00:11:37,150 --> 00:11:40,300
and unfortunately the you know for an

255
00:11:40,300 --> 00:11:42,060
open source project you do need to have

256
00:11:42,060 --> 00:11:44,650
an open source compiler because you know

257
00:11:44,650 --> 00:11:45,700
you want you don't want to restrict

258
00:11:45,700 --> 00:11:47,650
anyone taking part you want to you know

259
00:11:47,650 --> 00:11:49,810
guys hackers and their bedrooms to be

260
00:11:49,810 --> 00:11:53,110
able to write code so you know cadence

261
00:11:53,110 --> 00:11:54,850
were very good they said to us ok we

262
00:11:54,850 --> 00:11:56,529
realize this is an open source project

263
00:11:56,529 --> 00:11:58,060
we realize that you want to enable

264
00:11:58,060 --> 00:12:00,010
everybody so they were very good and

265
00:12:00,010 --> 00:12:01,720
they provided a free compiler for menu

266
00:12:01,720 --> 00:12:03,220
board so you can go to the cadence

267
00:12:03,220 --> 00:12:04,660
website and you can download this

268
00:12:04,660 --> 00:12:07,360
compiler and it will generate all the

269
00:12:07,360 --> 00:12:09,160
same constructions for the many more

270
00:12:09,160 --> 00:12:12,279
target we're actively working on getting

271
00:12:12,279 --> 00:12:20,230
this support into GCC as well so after

272
00:12:20,230 --> 00:12:22,870
we've got a compiler we need to build an

273
00:12:22,870 --> 00:12:24,220
image because a compiler will generate

274
00:12:24,220 --> 00:12:26,980
an elf files and unfortunately you

275
00:12:26,980 --> 00:12:29,020
cannot send this elf file to the DSP and

276
00:12:29,020 --> 00:12:30,790
for the DSP to execute that elf file

277
00:12:30,790 --> 00:12:33,190
you've actually got to you know form a

278
00:12:33,190 --> 00:12:35,440
micelle file into an image of the the

279
00:12:35,440 --> 00:12:40,029
memory our architecture of the the DSP

280
00:12:40,029 --> 00:12:43,029
so that you know the DSP can boot it so

281
00:12:43,029 --> 00:12:44,830
we had to do that so before we can run

282
00:12:44,830 --> 00:12:47,440
any code we had to build this an image

283
00:12:47,440 --> 00:12:50,020
builder as well this is open source name

284
00:12:50,020 --> 00:12:52,470
as well this is a field called our image

285
00:12:52,470 --> 00:12:56,920
the worldís at the bottom there we have

286
00:12:56,920 --> 00:12:58,450
an unsigned image

287
00:12:58,450 --> 00:13:00,070
come to that bit later but at this point

288
00:13:00,070 --> 00:13:04,290
we should be able to run code we hope

289
00:13:04,290 --> 00:13:07,270
but when I tried to run code it didn't

290
00:13:07,270 --> 00:13:07,660
work

291
00:13:07,660 --> 00:13:09,610
now I had a lots of documentation

292
00:13:09,610 --> 00:13:11,590
because I work for Intel so I could read

293
00:13:11,590 --> 00:13:14,050
the documentation about betrayal I could

294
00:13:14,050 --> 00:13:16,060
read the documentation about the the DSP

295
00:13:16,060 --> 00:13:19,210
but the documentation didn't contain the

296
00:13:19,210 --> 00:13:21,940
the validated programming flaws for

297
00:13:21,940 --> 00:13:24,190
certain parts of the boot and for the

298
00:13:24,190 --> 00:13:26,290
the SSB ports amongst other things

299
00:13:26,290 --> 00:13:28,180
it was also no way I could connect the

300
00:13:28,180 --> 00:13:32,170
debugger or printf from this so what I

301
00:13:32,170 --> 00:13:36,010
did was and came you had basic extensive

302
00:13:36,010 --> 00:13:39,490
support so I had to extend a CEM you to

303
00:13:39,490 --> 00:13:42,070
add support for our DSP and Dikembe and

304
00:13:42,070 --> 00:13:45,060
then I could take the the close source

305
00:13:45,060 --> 00:13:48,070
DSP farmer and run it on my kami model

306
00:13:48,070 --> 00:13:50,830
and from that I could determine the

307
00:13:50,830 --> 00:13:52,570
sequence it was using to boot so I could

308
00:13:52,570 --> 00:13:55,090
validate my sequence against that so I

309
00:13:55,090 --> 00:13:57,490
knew once I had can be running or sorry

310
00:13:57,490 --> 00:13:59,230
the core source running on cam you I

311
00:13:59,230 --> 00:14:01,630
could then try and save that into the

312
00:14:01,630 --> 00:14:03,520
open source firmware and then I could

313
00:14:03,520 --> 00:14:06,070
have open source running on kami after

314
00:14:06,070 --> 00:14:07,660
open source was running on kami I could

315
00:14:07,660 --> 00:14:08,740
take it to the hardware the real

316
00:14:08,740 --> 00:14:12,130
hardware and I could boot so that was a

317
00:14:12,130 --> 00:14:14,890
big step forward so you may have to do

318
00:14:14,890 --> 00:14:17,380
this and this depends on whether I mean

319
00:14:17,380 --> 00:14:18,970
for Frenzel being such a big company the

320
00:14:18,970 --> 00:14:20,080
people who did the closed source

321
00:14:20,080 --> 00:14:22,690
firmware lots them had left Lots them

322
00:14:22,690 --> 00:14:23,890
had reorg and two different

323
00:14:23,890 --> 00:14:26,800
organizations so and lost them were

324
00:14:26,800 --> 00:14:28,840
working on other projects so I did ask

325
00:14:28,840 --> 00:14:31,090
around a lot for help but I found that

326
00:14:31,090 --> 00:14:32,800
people had left and people who were too

327
00:14:32,800 --> 00:14:34,480
busy to help me so this is this was the

328
00:14:34,480 --> 00:14:36,520
quickest route that the path of least

329
00:14:36,520 --> 00:14:38,640
resistance

330
00:14:39,600 --> 00:14:43,000
the next challenge I had was that after

331
00:14:43,000 --> 00:14:45,250
I could boot I found that Oh in a minute

332
00:14:45,250 --> 00:14:48,790
I cannot play any audio here so I also

333
00:14:48,790 --> 00:14:50,830
had to then virtualize the host site

334
00:14:50,830 --> 00:14:53,830
because I wanted to run the driver that

335
00:14:53,830 --> 00:14:55,090
was used with the closed source firmware

336
00:14:55,090 --> 00:14:56,860
on the closer farmer within a kami

337
00:14:56,860 --> 00:14:59,230
environment so I could send commands to

338
00:14:59,230 --> 00:15:01,420
the forum where and order it for its

339
00:15:01,420 --> 00:15:04,240
program the dmas and to program the SSP

340
00:15:04,240 --> 00:15:06,760
ports in the correct sequence because I

341
00:15:06,760 --> 00:15:08,140
had the documentation but the

342
00:15:08,140 --> 00:15:09,960
documentation didn't tell me the

343
00:15:09,960 --> 00:15:12,980
the exact sequence I needed to program

344
00:15:12,980 --> 00:15:15,900
so I did this and what you can see here

345
00:15:15,900 --> 00:15:18,300
is a hatch genius emulator on the left

346
00:15:18,300 --> 00:15:23,430
hand side is an x86 vm so you can run up

347
00:15:23,430 --> 00:15:27,000
into there or Chrome or even windows on

348
00:15:27,000 --> 00:15:28,740
the left hand side on the right hand

349
00:15:28,740 --> 00:15:31,860
side as your DSP emulator and you can

350
00:15:31,860 --> 00:15:33,390
run your firmware binary on that right

351
00:15:33,390 --> 00:15:35,970
hand side you can actually attach a GD

352
00:15:35,970 --> 00:15:39,120
beat them both and which is very useful

353
00:15:39,120 --> 00:15:41,280
because then you can step through I've

354
00:15:41,280 --> 00:15:43,650
got two GD B's there and I was at the

355
00:15:43,650 --> 00:15:46,140
canoe Tools cauldron on Saturday and

356
00:15:46,140 --> 00:15:48,390
Sunday and I find that there's new

357
00:15:48,390 --> 00:15:49,950
technology which means you can have one

358
00:15:49,950 --> 00:15:52,350
instance of gdb now connecting to two

359
00:15:52,350 --> 00:15:54,060
different architectures with two

360
00:15:54,060 --> 00:15:56,310
different images so this will be in the

361
00:15:56,310 --> 00:16:00,420
next G gdb release so what with this I

362
00:16:00,420 --> 00:16:02,610
was able to fully validate my sequences

363
00:16:02,610 --> 00:16:05,490
and you know once I'd seen the sequence

364
00:16:05,490 --> 00:16:06,540
issues about the closed source firmware

365
00:16:06,540 --> 00:16:12,390
I could then play audio but that was all

366
00:16:12,390 --> 00:16:15,510
good on men aboard then the next

367
00:16:15,510 --> 00:16:17,340
generation of platforms came along and

368
00:16:17,340 --> 00:16:20,430
they introduced code signing so even

369
00:16:20,430 --> 00:16:21,480
though I went through all that pain in

370
00:16:21,480 --> 00:16:22,800
an effort to be able to play audio in

371
00:16:22,800 --> 00:16:25,590
men abort the next generation for what

372
00:16:25,590 --> 00:16:27,180
this is the pollak this is on the up

373
00:16:27,180 --> 00:16:28,830
squared board and there's an up squared

374
00:16:28,830 --> 00:16:31,680
board outside for you to look at and I

375
00:16:31,680 --> 00:16:34,110
could not run any code on op squared

376
00:16:34,110 --> 00:16:37,260
because of code signing so the only

377
00:16:37,260 --> 00:16:39,720
people had the key design where the the

378
00:16:39,720 --> 00:16:41,310
closed source firmware team who by this

379
00:16:41,310 --> 00:16:45,720
time wouldn't speak to me and the OEM

380
00:16:45,720 --> 00:16:48,180
but luckily the OEM would speak to me

381
00:16:48,180 --> 00:16:49,860
so the OEM thought that was a very good

382
00:16:49,860 --> 00:16:51,600
idea the company who make up squared

383
00:16:51,600 --> 00:16:54,090
there they want to you know huh build a

384
00:16:54,090 --> 00:16:55,350
developer community around their

385
00:16:55,350 --> 00:16:55,890
hardware

386
00:16:55,890 --> 00:16:59,910
so they took our in public private

387
00:16:59,910 --> 00:17:02,190
signing key and they installed it on

388
00:17:02,190 --> 00:17:05,369
their BIOS image so you can take you can

389
00:17:05,369 --> 00:17:07,440
cite you sign with our sign-in key and

390
00:17:07,440 --> 00:17:09,839
you can run your firmware on up squared

391
00:17:09,839 --> 00:17:13,709
and signing tool we have is open source

392
00:17:13,709 --> 00:17:16,319
as well so I know Travis was talking

393
00:17:16,319 --> 00:17:18,810
earlier on about until

394
00:17:18,810 --> 00:17:23,040
signing systems well I you know this is

395
00:17:23,040 --> 00:17:25,349
one it's already open source and and

396
00:17:25,349 --> 00:17:27,300
it's using public key picked up totally

397
00:17:27,300 --> 00:17:30,950
1.5 and open SSL to do the signing and

398
00:17:30,950 --> 00:17:33,090
there was an implication his well

399
00:17:33,090 --> 00:17:37,530
because we were using GCC GCC 3 sorry

400
00:17:37,530 --> 00:17:42,900
GCC I think above 5.2 has a the GPL 3

401
00:17:42,900 --> 00:17:44,850
clause and for those that don't know

402
00:17:44,850 --> 00:17:46,440
there was a thing called the TiVo

403
00:17:46,440 --> 00:17:49,800
ization clause and this basically meant

404
00:17:49,800 --> 00:17:52,770
that GCC could not be used to build

405
00:17:52,770 --> 00:17:55,590
software that run on sign systems

406
00:17:55,590 --> 00:17:59,130
without there being a means of signing

407
00:17:59,130 --> 00:18:02,790
the code an open source means of signing

408
00:18:02,790 --> 00:18:05,790
it so you know this is we are fully

409
00:18:05,790 --> 00:18:07,770
compliant here because we have this

410
00:18:07,770 --> 00:18:09,780
system where you can sign code but we've

411
00:18:09,780 --> 00:18:11,850
also given you the tools and the key to

412
00:18:11,850 --> 00:18:17,550
be able to sign it the last challenge is

413
00:18:17,550 --> 00:18:18,900
probably something that you know

414
00:18:18,900 --> 00:18:20,160
everyone's aware of here is you know

415
00:18:20,160 --> 00:18:21,840
what to build a community behind your

416
00:18:21,840 --> 00:18:23,220
firmware and you know we've seen many

417
00:18:23,220 --> 00:18:25,500
others you know they have github repos

418
00:18:25,500 --> 00:18:28,320
they have websites mailing lists IRC

419
00:18:28,320 --> 00:18:31,740
wiki's and everything we've done that as

420
00:18:31,740 --> 00:18:34,410
well and you know we've we've moved to

421
00:18:34,410 --> 00:18:36,780
github and we found with github been

422
00:18:36,780 --> 00:18:39,390
very very helpful for us well I found

423
00:18:39,390 --> 00:18:41,400
that our team who were now what you know

424
00:18:41,400 --> 00:18:42,810
that the closed source team who

425
00:18:42,810 --> 00:18:45,180
traditionally worked on Windows they

426
00:18:45,180 --> 00:18:47,040
were very very hesitant about coming to

427
00:18:47,040 --> 00:18:49,230
work on a mailing list they did not

428
00:18:49,230 --> 00:18:50,430
really want to be involved in a project

429
00:18:50,430 --> 00:18:52,080
where they saying patches on the mailing

430
00:18:52,080 --> 00:18:55,740
list but when we said ok if we move to

431
00:18:55,740 --> 00:18:58,140
get hub would you work with us and they

432
00:18:58,140 --> 00:18:59,850
took a look at github and thought ok yes

433
00:18:59,850 --> 00:19:01,140
we can work without because it has a

434
00:19:01,140 --> 00:19:02,940
graphical interface and all our

435
00:19:02,940 --> 00:19:05,720
developers are used to that you know so

436
00:19:05,720 --> 00:19:08,580
if you need to do that I would recommend

437
00:19:08,580 --> 00:19:10,110
that because that then brings people

438
00:19:10,110 --> 00:19:11,490
within your organization here maybe not

439
00:19:11,490 --> 00:19:13,620
used to open-source it brings them

440
00:19:13,620 --> 00:19:17,790
alongside to help you I've also had to

441
00:19:17,790 --> 00:19:19,590
educate them a bit as well so that you

442
00:19:19,590 --> 00:19:21,420
know the team from the windows side that

443
00:19:21,420 --> 00:19:24,030
they're the the they're you know they're

444
00:19:24,030 --> 00:19:25,410
very new to open source so you have to

445
00:19:25,410 --> 00:19:27,150
go through the basics things about you

446
00:19:27,150 --> 00:19:29,310
know releasing early and often don't do

447
00:19:29,310 --> 00:19:30,470
abandon where you know

448
00:19:30,470 --> 00:19:33,350
do you don't do infrequent core drops

449
00:19:33,350 --> 00:19:35,630
they were very nervous about accepting

450
00:19:35,630 --> 00:19:37,610
parties from other people and because it

451
00:19:37,610 --> 00:19:39,080
wouldn't be validated and you have any

452
00:19:39,080 --> 00:19:41,090
hard to explain and how to build the CI

453
00:19:41,090 --> 00:19:43,429
system to cope with that but but what I

454
00:19:43,429 --> 00:19:44,960
found once the everything was explained

455
00:19:44,960 --> 00:19:46,669
to them you know they were very much on

456
00:19:46,669 --> 00:19:50,960
board yeah so never give the stage were

457
00:19:50,960 --> 00:19:54,440
actually running code and just showing

458
00:19:54,440 --> 00:19:56,600
the architecture here so that the driver

459
00:19:56,600 --> 00:19:59,390
again is driver is not tied to x86 if

460
00:19:59,390 --> 00:20:02,210
there's nothing x86 specific in the

461
00:20:02,210 --> 00:20:04,490
driver the driver can have multiple

462
00:20:04,490 --> 00:20:06,470
backends for sending the control data so

463
00:20:06,470 --> 00:20:08,510
that this plane here this control data

464
00:20:08,510 --> 00:20:11,480
plane here can be MMI or it can be spy

465
00:20:11,480 --> 00:20:14,450
it can be USB it doesn't have to be a

466
00:20:14,450 --> 00:20:19,370
PCI device so you know the driver can

467
00:20:19,370 --> 00:20:22,640
run on on any architecture we haven't

468
00:20:22,640 --> 00:20:24,380
got an artist in the bottom there and

469
00:20:24,380 --> 00:20:28,250
our driver is BSD license than GPL so it

470
00:20:28,250 --> 00:20:31,429
could be copy and pasted if needed so on

471
00:20:31,429 --> 00:20:33,110
the former side in the right hand side

472
00:20:33,110 --> 00:20:35,440
as well we took a decision as well to

473
00:20:35,440 --> 00:20:37,760
have some freedom with the underlying

474
00:20:37,760 --> 00:20:41,360
Arcos so at the moment we have this

475
00:20:41,360 --> 00:20:43,340
thing called X toast no X toss is

476
00:20:43,340 --> 00:20:46,100
released by cadence so that's the the

477
00:20:46,100 --> 00:20:47,929
default our torch will get with the

478
00:20:47,929 --> 00:20:51,350
extends architecture but some people

479
00:20:51,350 --> 00:20:52,700
don't want to use that they want to use

480
00:20:52,700 --> 00:20:54,470
effort or they want to use free arctos

481
00:20:54,470 --> 00:20:57,140
so we're adding support for something

482
00:20:57,140 --> 00:20:59,120
called CM cyst which allows us to

483
00:20:59,120 --> 00:21:01,250
abstract that outdoors layer very very

484
00:21:01,250 --> 00:21:03,289
cheaply so that customers can then

485
00:21:03,289 --> 00:21:07,340
decide which one they want it looks like

486
00:21:07,340 --> 00:21:09,289
a traditional firmware stack at the

487
00:21:09,289 --> 00:21:11,750
bottom as well you have the platform

488
00:21:11,750 --> 00:21:15,289
drivers at the top is our audio

489
00:21:15,289 --> 00:21:18,140
processing components now some people

490
00:21:18,140 --> 00:21:20,720
ask us how to how to add value into open

491
00:21:20,720 --> 00:21:23,480
source firmware and the box is here

492
00:21:23,480 --> 00:21:28,490
these two here are value add so because

493
00:21:28,490 --> 00:21:30,020
that we've got a permissive license on

494
00:21:30,020 --> 00:21:32,330
the firmware it allows companies to come

495
00:21:32,330 --> 00:21:33,830
along and say well I've got this great

496
00:21:33,830 --> 00:21:35,600
active noise cancellation outlook for

497
00:21:35,600 --> 00:21:36,770
them or I've got this great speaker

498
00:21:36,770 --> 00:21:37,610
protection algorithm

499
00:21:37,610 --> 00:21:40,039
I want the sale so I don't want to open

500
00:21:40,039 --> 00:21:43,460
source it is it that's fine you can then

501
00:21:43,460 --> 00:21:46,160
and integrate your algorithm or you can

502
00:21:46,160 --> 00:21:48,310
you know ship it as a binary or you can

503
00:21:48,310 --> 00:21:50,780
externally integrate it and customers

504
00:21:50,780 --> 00:21:52,820
can then pay royalties for that but but

505
00:21:52,820 --> 00:21:54,530
you're not stopping any value out from

506
00:21:54,530 --> 00:21:56,150
from you know from stakeholders who want

507
00:21:56,150 --> 00:21:58,490
to you know who live on the money they

508
00:21:58,490 --> 00:22:01,630
make from from well you aren't their

509
00:22:03,580 --> 00:22:06,950
drivers again it's a very standard

510
00:22:06,950 --> 00:22:09,290
driver architecture at the top there is

511
00:22:09,290 --> 00:22:12,710
our integration with with our soft with

512
00:22:12,710 --> 00:22:15,350
Linux and we're down at the bottom is

513
00:22:15,350 --> 00:22:18,260
our low-level parts of the driver deal

514
00:22:18,260 --> 00:22:22,310
with talking to the DSP and this part in

515
00:22:22,310 --> 00:22:23,960
the middle again it doesn't have to be

516
00:22:23,960 --> 00:22:28,430
an MMA oh it can be USB or spy or I

517
00:22:28,430 --> 00:22:30,620
squared C it's that there's the

518
00:22:30,620 --> 00:22:32,570
transport here is you know the driver is

519
00:22:32,570 --> 00:22:36,830
pretty generic they're just some history

520
00:22:36,830 --> 00:22:39,590
so so 2015's when I started working on

521
00:22:39,590 --> 00:22:41,780
the project by myself as a skunkworks

522
00:22:41,780 --> 00:22:43,790
project so I knew my manager knew and

523
00:22:43,790 --> 00:22:46,360
his manager knew pretty much nobody else

524
00:22:46,360 --> 00:22:51,230
and then you know things gathered speed

525
00:22:51,230 --> 00:22:53,690
we had working on code and betrayal then

526
00:22:53,690 --> 00:22:56,690
we had cam you support and we got chaley

527
00:22:56,690 --> 00:22:58,640
trial and Braswell supported and I've

528
00:22:58,640 --> 00:23:00,140
been at this time that the close source

529
00:23:00,140 --> 00:23:02,240
guys heard about us and they tried to

530
00:23:02,240 --> 00:23:04,670
kill us and everything like very hard to

531
00:23:04,670 --> 00:23:09,950
do that and after about 2017 this is

532
00:23:09,950 --> 00:23:12,710
when we announced to the world via the

533
00:23:12,710 --> 00:23:14,390
plumbers conference and by that time we

534
00:23:14,390 --> 00:23:17,720
had all the forum we're running on the

535
00:23:17,720 --> 00:23:20,420
non code signing platforms so you know

536
00:23:20,420 --> 00:23:23,420
everything up to a Polock after we got a

537
00:23:23,420 --> 00:23:25,910
record signing done then you know at the

538
00:23:25,910 --> 00:23:27,830
bottom here for 2018 this is when the

539
00:23:27,830 --> 00:23:29,810
closed source team joined us so we went

540
00:23:29,810 --> 00:23:31,820
from a team of one up to about you know

541
00:23:31,820 --> 00:23:34,820
20 30 people now all contributing to the

542
00:23:34,820 --> 00:23:37,790
firmware so we can see now we're

543
00:23:37,790 --> 00:23:40,460
starting to have code for next

544
00:23:40,460 --> 00:23:42,980
generation devices as well as the the

545
00:23:42,980 --> 00:23:46,160
legacy devices now so you know we're no

546
00:23:46,160 --> 00:23:48,470
longer a skunk work we're an official

547
00:23:48,470 --> 00:23:51,590
project and we have asked from customers

548
00:23:51,590 --> 00:23:53,220
as well so which is very good

549
00:23:53,220 --> 00:23:55,360
[Applause]

550
00:23:55,360 --> 00:23:57,769
the development cat looks like this so

551
00:23:57,769 --> 00:23:59,750
you know because we're leasing a firm

552
00:23:59,750 --> 00:24:00,919
where you're not just releasing a

553
00:24:00,919 --> 00:24:02,419
firmware source code you have to release

554
00:24:02,419 --> 00:24:05,809
an SDK and because the tools are quite

555
00:24:05,809 --> 00:24:09,019
customized and specialized so remember I

556
00:24:09,019 --> 00:24:12,890
talked about the compiler options here

557
00:24:12,890 --> 00:24:15,200
so we have either the GCC or the Cannes

558
00:24:15,200 --> 00:24:18,860
compiler and we have the image tool and

559
00:24:18,860 --> 00:24:21,380
we have the signing - these are all open

560
00:24:21,380 --> 00:24:23,419
source the one isn't open source is the

561
00:24:23,419 --> 00:24:26,480
Cannes compiler we have topology

562
00:24:26,480 --> 00:24:27,830
compiled up as well which is open source

563
00:24:27,830 --> 00:24:29,990
so these parts are open source so when I

564
00:24:29,990 --> 00:24:32,120
say topology you typically in audio have

565
00:24:32,120 --> 00:24:34,760
a pipeline of processing from the source

566
00:24:34,760 --> 00:24:37,639
to the sink and the topology is used to

567
00:24:37,639 --> 00:24:41,179
define that so the the team from the

568
00:24:41,179 --> 00:24:42,769
closed source world they had a GUI which

569
00:24:42,769 --> 00:24:44,360
allowed you to do that and it saved it

570
00:24:44,360 --> 00:24:47,269
as XML file so we still support that but

571
00:24:47,269 --> 00:24:48,860
we needed an open source alternative to

572
00:24:48,860 --> 00:24:50,059
allow the community to create pipelines

573
00:24:50,059 --> 00:24:53,500
as well and this was all done in aim for

574
00:24:53,500 --> 00:24:56,510
once you've signed the image then goes

575
00:24:56,510 --> 00:24:57,260
to the driver

576
00:24:57,260 --> 00:24:59,779
we've got debug facilities as well so

577
00:24:59,779 --> 00:25:03,380
we've got tracing and debug interface so

578
00:25:03,380 --> 00:25:06,559
it allows you to inspect the whole DSP

579
00:25:06,559 --> 00:25:10,639
memory the DSP trace events we got our

580
00:25:10,639 --> 00:25:12,649
emulation on this side as well you know

581
00:25:12,649 --> 00:25:15,740
our chem ly1 cadence all to do an

582
00:25:15,740 --> 00:25:18,590
emulator and but the same later again is

583
00:25:18,590 --> 00:25:21,380
something you have to pay for the

584
00:25:21,380 --> 00:25:23,690
interesting thing Google contributed

585
00:25:23,690 --> 00:25:27,350
this this docker support so we have this

586
00:25:27,350 --> 00:25:30,350
option to put most of the SDK within a

587
00:25:30,350 --> 00:25:33,590
docker container that's very very useful

588
00:25:33,590 --> 00:25:34,940
because allows you to deploy this

589
00:25:34,940 --> 00:25:37,419
container because the firmware has

590
00:25:37,419 --> 00:25:39,679
certain dependencies and libraries and

591
00:25:39,679 --> 00:25:42,409
tools and those are something was quite

592
00:25:42,409 --> 00:25:44,899
hard to deploy on your average of into

593
00:25:44,899 --> 00:25:47,299
system because a lot of the dependencies

594
00:25:47,299 --> 00:25:50,269
are leading edge for example the the

595
00:25:50,269 --> 00:25:51,799
topology compiler depends on bleeding

596
00:25:51,799 --> 00:25:54,200
edge also lab on bleeding edge also

597
00:25:54,200 --> 00:25:56,960
utils which are not yet released into a

598
00:25:56,960 --> 00:25:59,029
package which means your radar can pool

599
00:25:59,029 --> 00:26:00,769
so you generally you don't want to

600
00:26:00,769 --> 00:26:03,169
update your your desktop with a bleeding

601
00:26:03,169 --> 00:26:04,940
edge one because it might be bugging so

602
00:26:04,940 --> 00:26:06,620
you can do this all on this container

603
00:26:06,620 --> 00:26:08,659
and the container is really handy for CI

604
00:26:08,659 --> 00:26:11,179
as well because you can run this as part

605
00:26:11,179 --> 00:26:12,740
of your CI you can run the bills and

606
00:26:12,740 --> 00:26:20,630
everything again this is the the pillows

607
00:26:20,630 --> 00:26:23,390
off of building successful projects and

608
00:26:23,390 --> 00:26:24,770
we've tried to be have permissive

609
00:26:24,770 --> 00:26:27,080
license and everything we can so in

610
00:26:27,080 --> 00:26:28,789
places where we haven't got permissive

611
00:26:28,789 --> 00:26:32,090
licenses for example the our colonel is

612
00:26:32,090 --> 00:26:35,360
jus licensed so for everything else have

613
00:26:35,360 --> 00:26:38,720
tried to be BSD or MIT we try to make

614
00:26:38,720 --> 00:26:40,580
everything modular so customers can take

615
00:26:40,580 --> 00:26:42,620
out parts they don't need it would be

616
00:26:42,620 --> 00:26:45,649
modular and that respect so that we find

617
00:26:45,649 --> 00:26:47,120
that some customers have their own

618
00:26:47,120 --> 00:26:48,740
special algorithm when it can takes up

619
00:26:48,740 --> 00:26:50,690
more memory and they want to ditch some

620
00:26:50,690 --> 00:26:52,700
other algorithms or some other code that

621
00:26:52,700 --> 00:26:55,309
it's all doable portable we're not tied

622
00:26:55,309 --> 00:26:57,950
to any particular DSP architecture or

623
00:26:57,950 --> 00:26:59,720
not tied to any particular you know

624
00:26:59,720 --> 00:27:03,529
Intel product and to Rich's where we're

625
00:27:03,529 --> 00:27:05,270
trying to provide as many tools as we

626
00:27:05,270 --> 00:27:07,370
possibly can because going through the

627
00:27:07,370 --> 00:27:10,010
bring up myself I find that a lack of

628
00:27:10,010 --> 00:27:12,470
tools was a problem and I needed to you

629
00:27:12,470 --> 00:27:14,779
know write and trace tool I needed to

630
00:27:14,779 --> 00:27:16,250
write an image tool I needed to write

631
00:27:16,250 --> 00:27:19,250
the signing tool and emulation if

632
00:27:19,250 --> 00:27:22,279
emulation tools as well so it was

633
00:27:22,279 --> 00:27:24,200
because those tools were useful for me

634
00:27:24,200 --> 00:27:26,240
you know I thought they'll be useful to

635
00:27:26,240 --> 00:27:31,580
other people as well and thanks and

636
00:27:31,580 --> 00:27:33,260
please drop by the booth

637
00:27:33,260 --> 00:27:36,950
[Applause]

638
00:27:36,950 --> 00:27:45,539
[Music]

