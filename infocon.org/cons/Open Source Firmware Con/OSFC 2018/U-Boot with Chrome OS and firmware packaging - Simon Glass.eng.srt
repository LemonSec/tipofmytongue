1
00:00:00,000 --> 00:00:04,100
[Music]

2
00:00:04,100 --> 00:00:07,589
so next up will be Simon glass and he'll

3
00:00:07,589 --> 00:00:10,019
be talking about a hacking project that

4
00:00:10,019 --> 00:00:13,380
will bring heute back to be working with

5
00:00:13,380 --> 00:00:15,599
Chrome OS and he also will tell us about

6
00:00:15,599 --> 00:00:19,050
how to do firmware packaging probably

7
00:00:19,050 --> 00:00:28,109
please give it up for Simon glass hello

8
00:00:28,109 --> 00:00:34,050
everyone so let me jump straight into it

9
00:00:34,050 --> 00:00:36,890
this is what I'm going to talk about

10
00:00:36,890 --> 00:00:40,890
first of all you boot verified boot and

11
00:00:40,890 --> 00:00:43,079
limitations and how we might do it in

12
00:00:43,079 --> 00:00:44,969
Chrome OS that's the most part of this

13
00:00:44,969 --> 00:00:49,559
talk I do a little demo and then I'm

14
00:00:49,559 --> 00:00:51,449
going to talk about firmware packaging

15
00:00:51,449 --> 00:00:54,300
depending on how the time goes thing

16
00:00:54,300 --> 00:00:59,059
called Ben man so this is a bit about me

17
00:00:59,059 --> 00:01:02,960
everything you wanted to know about me

18
00:01:02,960 --> 00:01:06,510
I've mostly been interested in ARM chips

19
00:01:06,510 --> 00:01:08,760
and electronics and the next and that

20
00:01:08,760 --> 00:01:14,520
sort of thing I got into you boot seven

21
00:01:14,520 --> 00:01:17,220
years ago now in chroma when I was in

22
00:01:17,220 --> 00:01:22,470
Chrome OS the first time and I ended up

23
00:01:22,470 --> 00:01:25,680
up streaming things and then after that

24
00:01:25,680 --> 00:01:28,320
I dabbled in a fear different bits and

25
00:01:28,320 --> 00:01:30,240
pieces because basically my day job was

26
00:01:30,240 --> 00:01:32,909
kind of like a Java programmer I suppose

27
00:01:32,909 --> 00:01:35,040
except I didn't do we even do this very

28
00:01:35,040 --> 00:01:38,520
much of that so I used to go home in the

29
00:01:38,520 --> 00:01:39,990
evenings and federal wood boards and

30
00:01:39,990 --> 00:01:42,329
that sort of thing so I did quite a lot

31
00:01:42,329 --> 00:01:44,640
of stuff to keep my sanity while I was

32
00:01:44,640 --> 00:01:47,610
doing that at the moment I just maintain

33
00:01:47,610 --> 00:01:50,729
a I'm custodian of driver model in

34
00:01:50,729 --> 00:01:53,479
device tree in new boot so I don't do

35
00:01:53,479 --> 00:01:55,950
you need to be like as much as I used to

36
00:01:55,950 --> 00:02:01,350
and I'm particularly interested in

37
00:02:01,350 --> 00:02:03,450
runtime configuration and firmware which

38
00:02:03,450 --> 00:02:05,710
is something that perhaps is

39
00:02:05,710 --> 00:02:07,479
traditionally not done in film with that

40
00:02:07,479 --> 00:02:14,010
I think it has a lot of benefits so I

41
00:02:14,010 --> 00:02:16,180
guess if you've heard a viewboot you

42
00:02:16,180 --> 00:02:19,770
were here it's a very hidden bootloader

43
00:02:19,770 --> 00:02:22,180
isn't very seldom do you see a you boot

44
00:02:22,180 --> 00:02:24,400
logo on the outside of the device but a

45
00:02:24,400 --> 00:02:27,459
large number of devices that we use day

46
00:02:27,459 --> 00:02:30,040
to day lives have do use you boot under

47
00:02:30,040 --> 00:02:36,239
the hood you boot is a very flexible

48
00:02:36,239 --> 00:02:39,970
bootloader something which could almost

49
00:02:39,970 --> 00:02:41,950
be a fault there's a large number of

50
00:02:41,950 --> 00:02:43,630
features that you can enable you know

51
00:02:43,630 --> 00:02:45,630
most of the major file systems and

52
00:02:45,630 --> 00:02:48,870
networking and all this sort of thing

53
00:02:48,870 --> 00:02:53,170
so it all says a test framework based

54
00:02:53,170 --> 00:02:55,959
around a thing called sandbox which is

55
00:02:55,959 --> 00:02:59,080
basically the ability to run you boot on

56
00:02:59,080 --> 00:03:01,570
Linux this is a Linux program which

57
00:03:01,570 --> 00:03:03,670
makes it much more convenient to develop

58
00:03:03,670 --> 00:03:06,130
your software because developing it on a

59
00:03:06,130 --> 00:03:07,780
I don't know a Raspberry Pi where you

60
00:03:07,780 --> 00:03:09,790
put a slot the SD card back in and out

61
00:03:09,790 --> 00:03:16,600
there's a serious pain so at the moment

62
00:03:16,600 --> 00:03:19,239
you boot supports to verify boot

63
00:03:19,239 --> 00:03:22,269
implementations the first one is users

64
00:03:22,269 --> 00:03:24,220
first the flat image tree which is

65
00:03:24,220 --> 00:03:26,920
basically lets you select configurations

66
00:03:26,920 --> 00:03:29,350
like kernel ram disk whatever and assign

67
00:03:29,350 --> 00:03:32,430
them when you sign those they cannot be

68
00:03:32,430 --> 00:03:34,420
mixed and matched or anything like that

69
00:03:34,420 --> 00:03:37,150
and the public key in a read-only memory

70
00:03:37,150 --> 00:03:40,180
or some protected memory is used to

71
00:03:40,180 --> 00:03:42,700
verify it so you boot can boot through

72
00:03:42,700 --> 00:03:44,920
to the kernel and verify any images that

73
00:03:44,920 --> 00:03:47,140
you happen to load if PGA's or whatever

74
00:03:47,140 --> 00:03:51,280
it might be so that that implementation

75
00:03:51,280 --> 00:03:55,720
is a few years old it was it's used the

76
00:03:55,720 --> 00:03:59,799
talk last night about open BMC which is

77
00:03:59,799 --> 00:04:04,030
sort of data center system that uses

78
00:04:04,030 --> 00:04:05,980
that technology and it's built into you

79
00:04:05,980 --> 00:04:09,700
boot as a court as a core feature well

80
00:04:09,700 --> 00:04:13,540
recently reboot picked up Android

81
00:04:13,540 --> 00:04:15,880
verified boot which is sort of like

82
00:04:15,880 --> 00:04:17,480
Chrome OS

83
00:04:17,480 --> 00:04:20,870
this does things it's got an a/b boot

84
00:04:20,870 --> 00:04:23,420
and you can do one try the other a few

85
00:04:23,420 --> 00:04:26,330
fail sort of thing let's use with the

86
00:04:26,330 --> 00:04:29,000
Android things but it doesn't you boot

87
00:04:29,000 --> 00:04:30,770
doesn't actually support Chrome OS

88
00:04:30,770 --> 00:04:33,890
verified boot he used to but it it

89
00:04:33,890 --> 00:04:37,180
doesn't because basically the supporters

90
00:04:37,180 --> 00:04:40,910
atrophied so I thought what would it

91
00:04:40,910 --> 00:04:44,540
take to get it running 2018 and what

92
00:04:44,540 --> 00:04:46,040
would it look like he's very different

93
00:04:46,040 --> 00:04:51,200
from the way it was years ago why would

94
00:04:51,200 --> 00:04:55,250
I want to do this I have a day job it

95
00:04:55,250 --> 00:04:57,530
does involve embedded now so I'm not

96
00:04:57,530 --> 00:04:59,420
spinning anything like as much time on

97
00:04:59,420 --> 00:05:02,540
this stuff in my spare time but

98
00:05:02,540 --> 00:05:05,840
essentially I think Chrome OS verified

99
00:05:05,840 --> 00:05:07,790
boot Metz very well onto embedded

100
00:05:07,790 --> 00:05:09,380
devices it's it's actually reasonably

101
00:05:09,380 --> 00:05:11,770
small as it's a fairly efficient

102
00:05:11,770 --> 00:05:14,210
implementation that actually runs on the

103
00:05:14,210 --> 00:05:17,720
device it has some nice features like

104
00:05:17,720 --> 00:05:21,050
the firmware screens maybe you've never

105
00:05:21,050 --> 00:05:23,030
seen them but if something goes horribly

106
00:05:23,030 --> 00:05:25,310
wrong with your Chromebook it'll come up

107
00:05:25,310 --> 00:05:26,690
with a recovery screen and you can

108
00:05:26,690 --> 00:05:29,270
insert an SD card and recover the device

109
00:05:29,270 --> 00:05:31,420
and get it running again

110
00:05:31,420 --> 00:05:34,040
it's got auto update and rollback

111
00:05:34,040 --> 00:05:36,260
support which is actually very robust

112
00:05:36,260 --> 00:05:40,490
and it's got a good security record I've

113
00:05:40,490 --> 00:05:45,740
mentioned you boot already and the other

114
00:05:45,740 --> 00:05:47,390
thing is that the Chrome OS build system

115
00:05:47,390 --> 00:05:49,040
is a pretty big commitment for someone

116
00:05:49,040 --> 00:05:51,590
to digitally to to do you know if

117
00:05:51,590 --> 00:05:53,390
they're trying to build I just want a

118
00:05:53,390 --> 00:05:54,950
bootloader and I just want to have

119
00:05:54,950 --> 00:05:56,540
verified boot I don't want to bring in

120
00:05:56,540 --> 00:05:59,510
Chrome OS and you know all that sort of

121
00:05:59,510 --> 00:06:02,090
stuff just to get there there is a

122
00:06:02,090 --> 00:06:04,910
bootloader what's not really a

123
00:06:04,910 --> 00:06:07,010
bootloader a sort of a program I suppose

124
00:06:07,010 --> 00:06:09,500
you'd say that runs and a core boot

125
00:06:09,500 --> 00:06:12,680
called depth charge which you know it's

126
00:06:12,680 --> 00:06:15,230
what Chrome OS uses these days but it's

127
00:06:15,230 --> 00:06:19,450
not really it's not really widely

128
00:06:19,450 --> 00:06:22,450
adopted

129
00:06:22,669 --> 00:06:25,490
so my goal is just really to look at how

130
00:06:25,490 --> 00:06:27,199
it could be done and can we have it so

131
00:06:27,199 --> 00:06:28,729
that we can just say okay an able

132
00:06:28,729 --> 00:06:30,740
criminal is boot on it's a Raspberry Pi

133
00:06:30,740 --> 00:06:32,840
and it will just do it that's all you

134
00:06:32,840 --> 00:06:34,039
have to do and everything all kind of

135
00:06:34,039 --> 00:06:35,689
work that would be that would be ideal

136
00:06:35,689 --> 00:06:38,389
for me and I will say this is work in

137
00:06:38,389 --> 00:06:40,819
progress so I'm not I haven't got there

138
00:06:40,819 --> 00:06:45,249
yet this is just something that it's a

139
00:06:45,249 --> 00:06:50,960
starting point I think so here are some

140
00:06:50,960 --> 00:06:55,129
of the things that I think we want to

141
00:06:55,129 --> 00:06:57,949
use in a verified boot implementation in

142
00:06:57,949 --> 00:07:01,939
2018 you vote so first thing I mentioned

143
00:07:01,939 --> 00:07:05,750
is sandbox so actually the original

144
00:07:05,750 --> 00:07:09,020
verified boot the implementation and you

145
00:07:09,020 --> 00:07:11,569
boot was written using sandbox it was

146
00:07:11,569 --> 00:07:14,569
entirely written on a laptop with no

147
00:07:14,569 --> 00:07:19,699
devices anywhere inside you can you can

148
00:07:19,699 --> 00:07:21,050
write your algorithms you can run your

149
00:07:21,050 --> 00:07:23,120
debugger you can do all of that sort of

150
00:07:23,120 --> 00:07:25,580
stuff without any any embedded hardware

151
00:07:25,580 --> 00:07:28,129
and and you know develop everything and

152
00:07:28,129 --> 00:07:30,020
then when you get it working you can try

153
00:07:30,020 --> 00:07:31,839
it out on a device but it should work

154
00:07:31,839 --> 00:07:33,979
there's things like device drivers and

155
00:07:33,979 --> 00:07:35,270
so on but anything to do with an

156
00:07:35,270 --> 00:07:38,000
algorithm it's it's pretty much how I

157
00:07:38,000 --> 00:07:41,509
develop stuff I can in my little

158
00:07:41,509 --> 00:07:43,909
beautiful thing I push here for it

159
00:07:43,909 --> 00:07:45,919
builds it takes a couple of seconds and

160
00:07:45,919 --> 00:07:48,379
then it you know it can run it or I can

161
00:07:48,379 --> 00:07:50,389
manually run it on the command line if I

162
00:07:50,389 --> 00:07:53,349
want to use that in gdb I can do that so

163
00:07:53,349 --> 00:07:55,819
it's a nice environment

164
00:07:55,819 --> 00:07:58,430
I don't really develop anything major on

165
00:07:58,430 --> 00:08:01,909
an actual device the next thing is

166
00:08:01,909 --> 00:08:05,960
driver model driver model is something

167
00:08:05,960 --> 00:08:07,399
that's been a new boot about four years

168
00:08:07,399 --> 00:08:10,399
it's pretty much the means by which we

169
00:08:10,399 --> 00:08:13,729
get devices up a new boot so we say

170
00:08:13,729 --> 00:08:15,979
we've essentially we have a device tree

171
00:08:15,979 --> 00:08:18,469
which describes all the devices and the

172
00:08:18,469 --> 00:08:19,819
drivers that are needed through the

173
00:08:19,819 --> 00:08:23,659
compatible strings and then we you boot

174
00:08:23,659 --> 00:08:25,520
at startup will go off and bind all

175
00:08:25,520 --> 00:08:27,379
those drivers and then when they get

176
00:08:27,379 --> 00:08:30,169
used they get probed so they so

177
00:08:30,169 --> 00:08:33,110
obviously you boot it's a lazy probing

178
00:08:33,110 --> 00:08:35,740
we don't probe anything and this week

179
00:08:35,740 --> 00:08:37,419
so that's a little bit different from

180
00:08:37,419 --> 00:08:39,580
Linux we just have that probe step when

181
00:08:39,580 --> 00:08:41,799
you start when it boots up you boot has

182
00:08:41,799 --> 00:08:43,390
this extra buy and step because we

183
00:08:43,390 --> 00:08:45,820
really don't want to probe every USB and

184
00:08:45,820 --> 00:08:47,770
everything else you've got then we may

185
00:08:47,770 --> 00:08:50,500
as well run UEFI so it's very much

186
00:08:50,500 --> 00:08:54,990
trying to just be a lazy init system I

187
00:08:54,990 --> 00:08:57,430
mentioned device tree

188
00:08:57,430 --> 00:08:59,410
I believe half of you hate it and half

189
00:08:59,410 --> 00:09:02,530
of you love it is that correct this

190
00:09:02,530 --> 00:09:05,620
seems to be the this story for those of

191
00:09:05,620 --> 00:09:08,050
you who don't know what a device tree is

192
00:09:08,050 --> 00:09:11,140
think of it like a CPI or something like

193
00:09:11,140 --> 00:09:14,830
there be maybe more familiar with it's a

194
00:09:14,830 --> 00:09:17,740
little bit simpler the device for

195
00:09:17,740 --> 00:09:19,060
implementation you boot is fairly

196
00:09:19,060 --> 00:09:22,300
efficient uses roughly three K bytes of

197
00:09:22,300 --> 00:09:24,370
memory on thumb to to get the basic

198
00:09:24,370 --> 00:09:26,200
library in place so it doesn't there's

199
00:09:26,200 --> 00:09:30,730
no huge overhead and there are other

200
00:09:30,730 --> 00:09:32,290
features as well and a final one has

201
00:09:32,290 --> 00:09:33,820
been man which I'm gonna talk about

202
00:09:33,820 --> 00:09:36,790
later on assuming we get time which is

203
00:09:36,790 --> 00:09:39,490
the firmware packaging one of the things

204
00:09:39,490 --> 00:09:41,830
about verified boot is the packaging

205
00:09:41,830 --> 00:09:44,560
does become more complicated no longer

206
00:09:44,560 --> 00:09:46,630
are you just you know getting a SPL and

207
00:09:46,630 --> 00:09:48,250
a new boot or something like that in an

208
00:09:48,250 --> 00:09:49,840
image now you have to sign things

209
00:09:49,840 --> 00:09:51,670
particularly areas are signed and the

210
00:09:51,670 --> 00:09:53,260
signatures have to go somewhere and

211
00:09:53,260 --> 00:09:55,600
maybe you've got some images you want to

212
00:09:55,600 --> 00:09:57,040
display on the screen as well they have

213
00:09:57,040 --> 00:09:59,140
to go in the firmware image and so the

214
00:09:59,140 --> 00:10:01,390
firmware Packer becomes a little more a

215
00:10:01,390 --> 00:10:05,140
little less trivial then press just you

216
00:10:05,140 --> 00:10:07,180
know using DD you're getting two images

217
00:10:07,180 --> 00:10:10,480
together at the moment you've got users

218
00:10:10,480 --> 00:10:12,930
been meant for I think Tegra and x86

219
00:10:12,930 --> 00:10:19,360
maybe son X I as well okay so talk a

220
00:10:19,360 --> 00:10:23,790
little bit about sandbox I just want to

221
00:10:23,790 --> 00:10:25,780
show you I'll show you it later actually

222
00:10:25,780 --> 00:10:29,350
but essentially it allows people to run

223
00:10:29,350 --> 00:10:29,860
on Linux

224
00:10:29,860 --> 00:10:32,050
it supports most subsystems so you can

225
00:10:32,050 --> 00:10:35,440
you know you can for example type USB

226
00:10:35,440 --> 00:10:38,320
start the command line it'll go and scan

227
00:10:38,320 --> 00:10:42,030
and find a fake flash stick with I think

228
00:10:42,030 --> 00:10:45,460
1k of space on it and will go and you

229
00:10:45,460 --> 00:10:47,040
can read it and that sort of thing so

230
00:10:47,040 --> 00:10:49,690
there's quite a lot of functionality in

231
00:10:49,690 --> 00:10:52,060
there and a lot all of the testing on

232
00:10:52,060 --> 00:10:54,160
your new boot relies on sandbox it

233
00:10:54,160 --> 00:10:55,870
actually does run on any other board as

234
00:10:55,870 --> 00:10:58,870
well but the one that runs on Travis CI

235
00:10:58,870 --> 00:11:01,089
and so on is is basically using sandbox

236
00:11:01,089 --> 00:11:04,930
well in a bit of qemu most of the core

237
00:11:04,930 --> 00:11:08,680
features at least in driver model have a

238
00:11:08,680 --> 00:11:12,790
good set of tests it also supports TPL

239
00:11:12,790 --> 00:11:13,990
and SPL

240
00:11:13,990 --> 00:11:16,350
have any of you heard of those things

241
00:11:16,350 --> 00:11:18,580
yeah one of you okay

242
00:11:18,580 --> 00:11:25,720
so briefly we use TPL to load SPL DPL is

243
00:11:25,720 --> 00:11:28,390
often very small a few k and then we use

244
00:11:28,390 --> 00:11:32,230
SPL to load you boot because SPL sets up

245
00:11:32,230 --> 00:11:33,730
their memory until we have memory we

246
00:11:33,730 --> 00:11:36,400
can't load you boot in because it's too

247
00:11:36,400 --> 00:11:40,330
big and so some systems you don't have

248
00:11:40,330 --> 00:11:42,670
them some systems you only have SPL and

249
00:11:42,670 --> 00:11:45,640
a few systems you also have TPL but

250
00:11:45,640 --> 00:11:48,160
Sembach supports those and it's you it's

251
00:11:48,160 --> 00:11:50,350
you run those things it also lets you

252
00:11:50,350 --> 00:11:52,540
save state overruns so let's say you

253
00:11:52,540 --> 00:11:54,490
have a TPM driver which has some

254
00:11:54,490 --> 00:11:57,220
rollback information you can run sandbox

255
00:11:57,220 --> 00:11:59,110
you you can then run it again later

256
00:11:59,110 --> 00:12:01,210
we're going to see protests later on and

257
00:12:01,210 --> 00:12:03,339
it'll read in that state and carry on

258
00:12:03,339 --> 00:12:08,260
we're left off it even lets you persist

259
00:12:08,260 --> 00:12:10,720
the drm over across runs which is

260
00:12:10,720 --> 00:12:12,820
actually useful for testing because you

261
00:12:12,820 --> 00:12:14,620
want to set up a case and then run it

262
00:12:14,620 --> 00:12:20,920
multiple times perhaps so my obvious

263
00:12:20,920 --> 00:12:23,080
plan was to use sandbox to bring that

264
00:12:23,080 --> 00:12:25,210
verified boot Chrome OS verified boot

265
00:12:25,210 --> 00:12:29,080
and that's what I've done so

266
00:12:29,080 --> 00:12:30,210
[Music]

267
00:12:30,210 --> 00:12:34,089
driver model is pretty much based around

268
00:12:34,089 --> 00:12:36,070
the concept of a new class which is a

269
00:12:36,070 --> 00:12:38,890
like a real-time clock or USB controller

270
00:12:38,890 --> 00:12:41,830
or scuzzy or whatever each of those

271
00:12:41,830 --> 00:12:44,560
things has its own API and each of them

272
00:12:44,560 --> 00:12:46,870
each of these things have device tree

273
00:12:46,870 --> 00:12:48,690
bindings taken from Linux

274
00:12:48,690 --> 00:12:52,300
essentially to provide properties to

275
00:12:52,300 --> 00:12:53,350
those devices

276
00:12:53,350 --> 00:12:56,020
I mentioned it supports lazy in it it

277
00:12:56,020 --> 00:12:58,120
also supports the command line you can

278
00:12:58,120 --> 00:12:59,750
see the devices at the command

279
00:12:59,750 --> 00:13:01,430
so on is a talk down there that you

280
00:13:01,430 --> 00:13:03,590
might want to look at just or just

281
00:13:03,590 --> 00:13:05,150
search for you boo driver model if you

282
00:13:05,150 --> 00:13:11,380
want to know more about that device tree

283
00:13:11,380 --> 00:13:13,580
actually this is cool

284
00:13:13,580 --> 00:13:16,520
you won't bear to hear it I'm told but

285
00:13:16,520 --> 00:13:18,410
device so it was no point in doing this

286
00:13:18,410 --> 00:13:21,500
we're gonna do it anyway device tree has

287
00:13:21,500 --> 00:13:25,490
a song do you know that oh my god

288
00:13:25,490 --> 00:13:27,710
it's C that's the only configuration

289
00:13:27,710 --> 00:13:29,990
language with its own song it's sort of

290
00:13:29,990 --> 00:13:31,640
like to the tune of the Flintstones

291
00:13:31,640 --> 00:13:36,340
you need to look that up later on and

292
00:13:36,340 --> 00:13:38,420
it's basically just about runtime

293
00:13:38,420 --> 00:13:40,310
configuration you put all your

294
00:13:40,310 --> 00:13:42,200
configuration in one file in one place

295
00:13:42,200 --> 00:13:44,030
and then everything goes from there

296
00:13:44,030 --> 00:13:46,760
rather than having to put you know with

297
00:13:46,760 --> 00:13:48,380
a different configuration all different

298
00:13:48,380 --> 00:13:50,810
files and write and C code and that kind

299
00:13:50,810 --> 00:13:51,440
of thing

300
00:13:51,440 --> 00:13:53,330
the idea is that maybe you can run

301
00:13:53,330 --> 00:13:56,120
exactly the same you boots on ten

302
00:13:56,120 --> 00:13:58,010
different types of hardware and just put

303
00:13:58,010 --> 00:14:07,670
the device tree and for each one and

304
00:14:07,670 --> 00:14:09,110
there are some various other random

305
00:14:09,110 --> 00:14:11,750
things and you it seems a long time ago

306
00:14:11,750 --> 00:14:13,130
that you boot doesn't used to have K

307
00:14:13,130 --> 00:14:16,190
config so I think you know define Chrome

308
00:14:16,190 --> 00:14:17,480
OS actually should spell it correctly

309
00:14:17,480 --> 00:14:20,870
when I do that to enable the features

310
00:14:20,870 --> 00:14:24,200
automatically there's a logging system

311
00:14:24,200 --> 00:14:26,330
now which would be useful to use just so

312
00:14:26,330 --> 00:14:28,250
that you can log against different new

313
00:14:28,250 --> 00:14:30,380
classes and that kind of thing that just

314
00:14:30,380 --> 00:14:32,780
makes you say okay I'm debugging the TPM

315
00:14:32,780 --> 00:14:34,910
now show me all the TPM logging that

316
00:14:34,910 --> 00:14:39,200
kind of thing I'll mention the phases

317
00:14:39,200 --> 00:14:43,310
have you boot in a minute and in terms

318
00:14:43,310 --> 00:14:47,510
of being able to boot other stuff you've

319
00:14:47,510 --> 00:14:49,700
sort of already does that so it can run

320
00:14:49,700 --> 00:14:51,410
a lot of stuff in fact to talk after

321
00:14:51,410 --> 00:14:53,030
this I think it might be in the other

322
00:14:53,030 --> 00:14:53,390
room

323
00:14:53,390 --> 00:14:56,750
is you boot see your thigh features so

324
00:14:56,750 --> 00:14:59,060
the ability to run efi apps and they

325
00:14:59,060 --> 00:15:03,680
grab and things like that which is so

326
00:15:03,680 --> 00:15:05,570
does the other stuff if you like very

327
00:15:05,570 --> 00:15:07,670
well

328
00:15:07,670 --> 00:15:09,500
there's also boot stage which is the

329
00:15:09,500 --> 00:15:12,450
timestamp duration system

330
00:15:12,450 --> 00:15:16,060
okay so let's just talk about the boot

331
00:15:16,060 --> 00:15:18,130
stages this is a specific to Chrome OS

332
00:15:18,130 --> 00:15:22,740
so it probably looks a little confusing

333
00:15:22,740 --> 00:15:26,440
but let's just look at this bit over

334
00:15:26,440 --> 00:15:28,000
here this is the TPL the tertiary

335
00:15:28,000 --> 00:15:30,820
program loader this is what we first

336
00:15:30,820 --> 00:15:33,730
execute when the machine starts up now

337
00:15:33,730 --> 00:15:35,860
what we want to figure out here is do we

338
00:15:35,860 --> 00:15:38,020
want to do a would we want to do be one

339
00:15:38,020 --> 00:15:39,460
of them is going to work one of them may

340
00:15:39,460 --> 00:15:42,520
be broken one of them might be the new

341
00:15:42,520 --> 00:15:43,960
version one other might be the old

342
00:15:43,960 --> 00:15:46,540
version this is how we do upgrades we

343
00:15:46,540 --> 00:15:50,440
upgrade one and then boot into it so the

344
00:15:50,440 --> 00:15:53,440
firmware solution happens here that's

345
00:15:53,440 --> 00:15:55,330
actually we're a large chunk of verified

346
00:15:55,330 --> 00:15:57,730
boots going on once you do once you've

347
00:15:57,730 --> 00:15:59,830
done that you go into SPL you see that

348
00:15:59,830 --> 00:16:02,800
we were sdram because remember you it's

349
00:16:02,800 --> 00:16:04,960
not start it's not you not ready on

350
00:16:04,960 --> 00:16:10,300
startup why do we do the SDRAM after we

351
00:16:10,300 --> 00:16:15,390
do the film with selection anyone know

352
00:16:16,140 --> 00:16:21,220
you want to tell you anyway well the

353
00:16:21,220 --> 00:16:23,200
problem is the DRM setup code might be

354
00:16:23,200 --> 00:16:25,630
buggy we might have to upgrade it down

355
00:16:25,630 --> 00:16:30,130
the track which I could tell you a

356
00:16:30,130 --> 00:16:31,600
horrible story about that because it

357
00:16:31,600 --> 00:16:35,110
actually happened and we had ended up

358
00:16:35,110 --> 00:16:38,140
writing our code to checksum and correct

359
00:16:38,140 --> 00:16:40,410
the memory after resume because of that

360
00:16:40,410 --> 00:16:45,610
so listen listen that we learned once

361
00:16:45,610 --> 00:16:47,830
you see that the SDRAM you then go to

362
00:16:47,830 --> 00:16:50,800
you boot itself you bit proper again you

363
00:16:50,800 --> 00:16:52,690
have two of em an A and a B this is

364
00:16:52,690 --> 00:16:54,430
where the real coders as loads of code

365
00:16:54,430 --> 00:16:56,620
here you know we've got full UI and

366
00:16:56,620 --> 00:16:58,960
maybe we've got it you know anti-aliased

367
00:16:58,960 --> 00:17:01,300
outline fonts and images and all sorts

368
00:17:01,300 --> 00:17:05,829
of stuff we can go to town here I mean

369
00:17:05,829 --> 00:17:08,230
finally we vote until the next I or be

370
00:17:08,230 --> 00:17:10,690
again if things go horribly wrong in

371
00:17:10,690 --> 00:17:12,490
either of these systems neither of these

372
00:17:12,490 --> 00:17:15,250
things will verify and work or we die or

373
00:17:15,250 --> 00:17:17,109
crash along the way we end up in

374
00:17:17,109 --> 00:17:18,970
recovery and that's where we have a

375
00:17:18,970 --> 00:17:21,520
screw a recovery screen and we try and

376
00:17:21,520 --> 00:17:24,369
show people what's wrong and let them

377
00:17:24,369 --> 00:17:26,380
put a USB stick in or an SD card and

378
00:17:26,380 --> 00:17:29,440
recover the system so we have to have

379
00:17:29,440 --> 00:17:30,940
that as well well we have to have that

380
00:17:30,940 --> 00:17:34,270
and effectively read-only memory so that

381
00:17:34,270 --> 00:17:41,350
we can never broke the device these are

382
00:17:41,350 --> 00:17:43,330
some of the things that I wouldn't

383
00:17:43,330 --> 00:17:45,700
bother implementing and I don't intend

384
00:17:45,700 --> 00:17:48,100
to with the scrim OS thing you boot has

385
00:17:48,100 --> 00:17:50,520
a lot of other things that can be handy

386
00:17:50,520 --> 00:17:53,800
scripting and file systems Network

387
00:17:53,800 --> 00:17:55,480
booting for factory and that sort of

388
00:17:55,480 --> 00:17:57,790
thing but that's already there so just

389
00:17:57,790 --> 00:18:04,179
leave it alone so this bit of it this

390
00:18:04,179 --> 00:18:05,559
bit of the talk is just going through

391
00:18:05,559 --> 00:18:10,300
driver model and how it's used it just

392
00:18:10,300 --> 00:18:13,780
shows you what what I think is a fairly

393
00:18:13,780 --> 00:18:15,880
elegant way to put the system together

394
00:18:15,880 --> 00:18:19,240
with the device tree configuring it the

395
00:18:19,240 --> 00:18:23,140
code selecting what's done and so on so

396
00:18:23,140 --> 00:18:25,660
I'm this these are just fragments

397
00:18:25,660 --> 00:18:27,940
don't don't don't try and type this code

398
00:18:27,940 --> 00:18:29,920
and it's not going to work just

399
00:18:29,920 --> 00:18:33,250
fragments to show you how things work so

400
00:18:33,250 --> 00:18:34,780
the first thing is dessert there's au

401
00:18:34,780 --> 00:18:37,540
class and you boot called block the

402
00:18:37,540 --> 00:18:39,640
block device and lots of things have a

403
00:18:39,640 --> 00:18:41,620
block device so if you've got an

404
00:18:41,620 --> 00:18:43,870
immensely controller it's got a block

405
00:18:43,870 --> 00:18:46,960
device same with USB and insajder and so

406
00:18:46,960 --> 00:18:48,970
on so this is effectively the driver

407
00:18:48,970 --> 00:18:51,190
model free it's a tree of devices and

408
00:18:51,190 --> 00:18:52,480
you can see at the bottom we've got a

409
00:18:52,480 --> 00:18:53,770
hole every one of these things has a

410
00:18:53,770 --> 00:18:56,710
block device the one that's out on its

411
00:18:56,710 --> 00:18:57,880
own over the year is actually the

412
00:18:57,880 --> 00:19:00,130
sandbox one sandbox has a block device

413
00:19:00,130 --> 00:19:04,090
but it doesn't have a parent now we can

414
00:19:04,090 --> 00:19:05,860
iterate through those block devices we

415
00:19:05,860 --> 00:19:07,030
can just say give me all my block

416
00:19:07,030 --> 00:19:10,840
devices probe the each one and 0 USB

417
00:19:10,840 --> 00:19:11,380
scissors

418
00:19:11,380 --> 00:19:13,240
is there a file system available that I

419
00:19:13,240 --> 00:19:16,210
could recover from so for recovery we

420
00:19:16,210 --> 00:19:17,800
just simply go through and iterate those

421
00:19:17,800 --> 00:19:21,370
block devices and find find anything

422
00:19:21,370 --> 00:19:23,140
that's plugged in whether it's USB stick

423
00:19:23,140 --> 00:19:28,570
or it's D or whatever else there's also

424
00:19:28,570 --> 00:19:33,550
a reset u class and this this one just

425
00:19:33,550 --> 00:19:34,840
lets you reset the system

426
00:19:34,840 --> 00:19:38,050
find out why I reset last time this is

427
00:19:38,050 --> 00:19:41,560
the driver it's pretty much the entire

428
00:19:41,560 --> 00:19:45,880
driver for x86 sori set you can see down

429
00:19:45,880 --> 00:19:47,890
here the driver you can see the

430
00:19:47,890 --> 00:19:50,170
compatible string which matches the

431
00:19:50,170 --> 00:19:51,670
compatible string and the device tree

432
00:19:51,670 --> 00:19:54,940
over here and you can see some methods

433
00:19:54,940 --> 00:19:56,830
including this one which is request to

434
00:19:56,830 --> 00:20:00,130
reset depending on the reset type you

435
00:20:00,130 --> 00:20:02,380
send out a value about some special x86

436
00:20:02,380 --> 00:20:05,230
port to make this thing reset so it's a

437
00:20:05,230 --> 00:20:08,800
reset driver Chrome OS needs to reset so

438
00:20:08,800 --> 00:20:11,230
we'll just have it define that driver

439
00:20:11,230 --> 00:20:13,090
and pretty much any platform should be

440
00:20:13,090 --> 00:20:15,700
able to define a driver like that and

441
00:20:15,700 --> 00:20:17,410
then it sort of separated out from the

442
00:20:17,410 --> 00:20:23,620
core code the next one's a little bit

443
00:20:23,620 --> 00:20:26,800
strange but essentially we want to be

444
00:20:26,800 --> 00:20:28,540
able to read from the firmware and I

445
00:20:28,540 --> 00:20:29,710
mentioned that the film wears

446
00:20:29,710 --> 00:20:33,310
complicated the firmware images is very

447
00:20:33,310 --> 00:20:35,590
complicated actually I'm not going to

448
00:20:35,590 --> 00:20:37,990
bore you with the details but here we

449
00:20:37,990 --> 00:20:41,020
have we've actually invented our own new

450
00:20:41,020 --> 00:20:43,150
class and this new class is called a

451
00:20:43,150 --> 00:20:45,490
firmware store all it supports is

452
00:20:45,490 --> 00:20:47,410
readwrite and checking with a software

453
00:20:47,410 --> 00:20:50,170
ripe with a rye protectors enabled those

454
00:20:50,170 --> 00:20:52,810
are the three operations are supports so

455
00:20:52,810 --> 00:20:54,220
you could imagine implementing those

456
00:20:54,220 --> 00:20:56,320
operations very easily with a spy flash

457
00:20:56,320 --> 00:20:58,630
device or maybe with an MMC device or

458
00:20:58,630 --> 00:21:01,600
something like that so there's a level

459
00:21:01,600 --> 00:21:03,310
of abstraction you know between that and

460
00:21:03,310 --> 00:21:05,080
what you how you actually implement it

461
00:21:05,080 --> 00:21:07,660
here we've got you we can show that it's

462
00:21:07,660 --> 00:21:11,260
implemented by spy there's a

463
00:21:11,260 --> 00:21:13,300
configuration node up here that's saying

464
00:21:13,300 --> 00:21:16,870
ok my firmware storage is this thing and

465
00:21:16,870 --> 00:21:19,720
you follow that link to here it's a spy

466
00:21:19,720 --> 00:21:22,030
flash and so we're gonna we're going to

467
00:21:22,030 --> 00:21:23,530
have a driver which which knows

468
00:21:23,530 --> 00:21:25,690
basically is a firmware store driver

469
00:21:25,690 --> 00:21:27,370
that knows how to talk to flies expire

470
00:21:27,370 --> 00:21:29,320
flash I haven't shown you any of the

471
00:21:29,320 --> 00:21:31,660
other code that implements this but

472
00:21:31,660 --> 00:21:33,610
essentially it means that when you start

473
00:21:33,610 --> 00:21:35,650
up what you do is you say give me my

474
00:21:35,650 --> 00:21:37,630
firmware store and you can start reading

475
00:21:37,630 --> 00:21:39,370
from it you don't have to worry how

476
00:21:39,370 --> 00:21:41,380
that's provided how their comes about

477
00:21:41,380 --> 00:21:44,290
the driver model takes care of that for

478
00:21:44,290 --> 00:21:46,500
you

479
00:21:48,520 --> 00:21:52,010
similar to that is non-volatile data so

480
00:21:52,010 --> 00:21:53,660
one thing you have to do was Chrome

481
00:21:53,660 --> 00:21:57,020
obviously you have to have rollback

482
00:21:57,020 --> 00:21:59,870
information but you also have things

483
00:21:59,870 --> 00:22:02,420
like did I do I want to go into recovery

484
00:22:02,420 --> 00:22:03,140
this time

485
00:22:03,140 --> 00:22:04,940
did something happen on my did I crash

486
00:22:04,940 --> 00:22:08,390
last time that kind of thing so we have

487
00:22:08,390 --> 00:22:10,400
a couple of different things we we

488
00:22:10,400 --> 00:22:12,140
actually use the EC there's an embedded

489
00:22:12,140 --> 00:22:13,970
controller or a little cortex in three

490
00:22:13,970 --> 00:22:17,840
micro on on Chromebooks and we have we

491
00:22:17,840 --> 00:22:19,700
can send out a message and say please go

492
00:22:19,700 --> 00:22:21,770
and write some data for us 16 bytes of

493
00:22:21,770 --> 00:22:23,780
data or please bring it back that kind

494
00:22:23,780 --> 00:22:25,760
of thing and it stays around over a

495
00:22:25,760 --> 00:22:28,510
reset of the AP the maintain the main

496
00:22:28,510 --> 00:22:30,950
CPU it stays around because the EC

497
00:22:30,950 --> 00:22:34,610
doesn't get reset in that case so we

498
00:22:34,610 --> 00:22:36,080
have a driver here which basically

499
00:22:36,080 --> 00:22:39,410
implements this is this is a function

500
00:22:39,410 --> 00:22:41,600
within the driver it says you know read

501
00:22:41,600 --> 00:22:43,429
this data in this size and we just go

502
00:22:43,429 --> 00:22:45,620
off and find our parent parent device

503
00:22:45,620 --> 00:22:50,150
which is where this thing here this in

504
00:22:50,150 --> 00:22:51,530
here so our parent is up of the year

505
00:22:51,530 --> 00:22:53,960
it'll be in this could be a real-time

506
00:22:53,960 --> 00:22:55,669
clock or it could be a Chrome OS e see

507
00:22:55,669 --> 00:22:57,590
if it's a Chrome OS EC we just go off

508
00:22:57,590 --> 00:23:00,700
and make that call so we can implement

509
00:23:00,700 --> 00:23:02,630
well the way I've done this is

510
00:23:02,630 --> 00:23:04,850
implemented three different in v8 as one

511
00:23:04,850 --> 00:23:07,010
as using the real-time clock because

512
00:23:07,010 --> 00:23:09,140
some devices just use the CMOS frame for

513
00:23:09,140 --> 00:23:12,679
they're using the TPM because some data

514
00:23:12,679 --> 00:23:14,660
is what's called secure data we don't

515
00:23:14,660 --> 00:23:16,340
what we need it to be protected we can't

516
00:23:16,340 --> 00:23:18,290
have it disappear and we have to know

517
00:23:18,290 --> 00:23:20,240
that it's valid so we put that in the

518
00:23:20,240 --> 00:23:23,179
TPM and the third thing is with the EC

519
00:23:23,179 --> 00:23:26,510
so we can we can say okay please give me

520
00:23:26,510 --> 00:23:30,260
the data and I haven't shown you exactly

521
00:23:30,260 --> 00:23:31,940
how it works but give me the secure data

522
00:23:31,940 --> 00:23:33,410
please and one of the drivers will put

523
00:23:33,410 --> 00:23:34,970
its hand up and say I've got secure data

524
00:23:34,970 --> 00:23:37,790
here it is the other two will say no I

525
00:23:37,790 --> 00:23:39,590
don't know how to do that so we walk

526
00:23:39,590 --> 00:23:42,350
through we walk through the available

527
00:23:42,350 --> 00:23:44,419
drivers until we find one that puts us

528
00:23:44,419 --> 00:23:46,130
hand up and says yeah I've got that data

529
00:23:46,130 --> 00:23:48,410
for you so again it's a fairly elegant

530
00:23:48,410 --> 00:23:50,720
way to do it it's entirely configured in

531
00:23:50,720 --> 00:23:54,350
the device tree so we simply put in

532
00:23:54,350 --> 00:23:56,179
there RTC node we've got an envy data

533
00:23:56,179 --> 00:23:58,610
now here we can put a need

534
00:23:58,610 --> 00:24:00,980
we put the envy data as parent as the

535
00:24:00,980 --> 00:24:04,279
thing that it talks to to get it so it's

536
00:24:04,279 --> 00:24:06,080
again it's configured through the device

537
00:24:06,080 --> 00:24:10,700
tree it run it run time and in a single

538
00:24:10,700 --> 00:24:14,870
place the boot flag is a little bit

539
00:24:14,870 --> 00:24:16,640
similar we can you know hold we can go

540
00:24:16,640 --> 00:24:18,169
into recovery mode we have different

541
00:24:18,169 --> 00:24:19,970
weather the lid is open or not whether

542
00:24:19,970 --> 00:24:22,700
the power as you know the power button

543
00:24:22,700 --> 00:24:24,529
is pressed and so on so these are all

544
00:24:24,529 --> 00:24:26,570
just configured in different ways so

545
00:24:26,570 --> 00:24:29,240
this is a GPIO the lid open is a GPIO so

546
00:24:29,240 --> 00:24:32,029
we specify the which GPIO it is the

547
00:24:32,029 --> 00:24:33,980
power off button and sandbox is just a

548
00:24:33,980 --> 00:24:35,779
key that you hold down when you when you

549
00:24:35,779 --> 00:24:37,279
want to when you want to power off so

550
00:24:37,279 --> 00:24:39,769
it's just the key number that means a

551
00:24:39,769 --> 00:24:41,870
bit random but the developer flaggers

552
00:24:41,870 --> 00:24:46,010
just always on constant one so you can

553
00:24:46,010 --> 00:24:47,630
hack around with this configuration and

554
00:24:47,630 --> 00:24:49,880
change the way the system works and that

555
00:24:49,880 --> 00:24:52,340
information effectively gets down into

556
00:24:52,340 --> 00:24:54,919
all these different drivers that you

557
00:24:54,919 --> 00:24:56,899
have here this one here is basically

558
00:24:56,899 --> 00:24:58,909
walking through all the device all the

559
00:24:58,909 --> 00:25:01,700
reboot flag drivers that I can find and

560
00:25:01,700 --> 00:25:03,470
it's trying to find the flag that you've

561
00:25:03,470 --> 00:25:05,480
asked for the FET driver supports it

562
00:25:05,480 --> 00:25:07,669
they will call that driver to get their

563
00:25:07,669 --> 00:25:13,490
value global configuration is pretty

564
00:25:13,490 --> 00:25:17,899
simple we have just basically two ways

565
00:25:17,899 --> 00:25:20,809
one is using K config which you for we

566
00:25:20,809 --> 00:25:23,690
familiar with just defining K config and

567
00:25:23,690 --> 00:25:25,490
then check if it's enabled and do

568
00:25:25,490 --> 00:25:28,100
something and the other is to actually

569
00:25:28,100 --> 00:25:30,110
put properties in the device tree so you

570
00:25:30,110 --> 00:25:32,690
can say okay the EC takes a long time to

571
00:25:32,690 --> 00:25:35,330
update and then at runtime you say if

572
00:25:35,330 --> 00:25:38,299
it's a slow update see the flow to put

573
00:25:38,299 --> 00:25:39,980
up a big up a scary update screen

574
00:25:39,980 --> 00:25:44,029
turning a user to wait it's this it's a

575
00:25:44,029 --> 00:25:46,429
way to make configuration work notice

576
00:25:46,429 --> 00:25:48,200
that neither of these is changing the

577
00:25:48,200 --> 00:25:50,090
build I can use that exactly the same

578
00:25:50,090 --> 00:25:51,919
you boot image here just put on a

579
00:25:51,919 --> 00:25:53,539
different device tree to make it make it

580
00:25:53,539 --> 00:25:58,760
behave differently I won't go into why

581
00:25:58,760 --> 00:26:00,559
it's useful to have smaller number of

582
00:26:00,559 --> 00:26:02,480
builds probably figure it out for

583
00:26:02,480 --> 00:26:03,620
yourself and probably many of you have

584
00:26:03,620 --> 00:26:05,870
had this problem as every time you have

585
00:26:05,870 --> 00:26:08,150
something new you have to test it

586
00:26:08,150 --> 00:26:10,430
so what's the current status with all

587
00:26:10,430 --> 00:26:11,830
this messing about

588
00:26:11,830 --> 00:26:14,750
well sandbox boots to the colonel and

589
00:26:14,750 --> 00:26:16,460
kind of everything works reasonably well

590
00:26:16,460 --> 00:26:19,490
as you might expect because that's the

591
00:26:19,490 --> 00:26:21,920
way that's what I used to do it

592
00:26:21,920 --> 00:26:23,690
phobia maple I've been fiddling with

593
00:26:23,690 --> 00:26:27,170
this laptop here which sort of works and

594
00:26:27,170 --> 00:26:28,280
I'll show you in a minute

595
00:26:28,280 --> 00:26:31,250
it's basically say x86 it's the

596
00:26:31,250 --> 00:26:36,770
Chromebook pixel - and then with Corbeau

597
00:26:36,770 --> 00:26:38,960
there is actually a you boot target that

598
00:26:38,960 --> 00:26:41,150
is designed to run on top of coreboot

599
00:26:41,150 --> 00:26:45,890
for x86 platforms about Evan and that's

600
00:26:45,890 --> 00:26:47,330
actually what the support used to use

601
00:26:47,330 --> 00:26:49,310
but I haven't actually resurrected it's

602
00:26:49,310 --> 00:26:50,750
pretty it's pretty straightforward to

603
00:26:50,750 --> 00:26:53,180
think I think to be able to do that and

604
00:26:53,180 --> 00:26:56,390
then I've got a video game console at

605
00:26:56,390 --> 00:26:58,340
home that runs a Raspberry Pi 3 so I'd

606
00:26:58,340 --> 00:26:59,810
like that around Chrome OS for a

607
00:26:59,810 --> 00:27:03,260
five-day I think they'll be cool so no

608
00:27:03,260 --> 00:27:04,690
we don't get to that but we'll see

609
00:27:04,690 --> 00:27:07,160
current status is this is kind of

610
00:27:07,160 --> 00:27:10,910
working this is well it's dimmable and

611
00:27:10,910 --> 00:27:15,260
then these two not so much speaking of

612
00:27:15,260 --> 00:27:18,580
which now I'm going to try and do a demo

613
00:27:18,580 --> 00:27:23,890
please hold your laughter to the end and

614
00:27:23,890 --> 00:27:29,420
see if I can do this so here I am at a

615
00:27:29,420 --> 00:27:34,940
prompt which I hope you can see and I

616
00:27:34,940 --> 00:27:43,700
can run I can runs you boot basically so

617
00:27:43,700 --> 00:27:47,060
that's running you boot in obviously

618
00:27:47,060 --> 00:27:49,490
under Linux but it looks the same as it

619
00:27:49,490 --> 00:27:51,560
would on a board if you actually used it

620
00:27:51,560 --> 00:27:53,210
on a board that's pretty much what it

621
00:27:53,210 --> 00:27:56,090
would say and you know you've got your

622
00:27:56,090 --> 00:27:59,420
commands and you can do various things

623
00:27:59,420 --> 00:28:02,660
like reset to quit and so on but it is

624
00:28:02,660 --> 00:28:07,310
basically you boot if I type DM tree you

625
00:28:07,310 --> 00:28:09,110
can see all the devices that are in the

626
00:28:09,110 --> 00:28:11,390
system using the driver model to have a

627
00:28:11,390 --> 00:28:13,510
look at what's available

628
00:28:13,510 --> 00:28:17,980
so that's sandbox so let's just run the

629
00:28:17,980 --> 00:28:21,220
new boot

630
00:28:21,370 --> 00:28:25,010
this thing this is basically the command

631
00:28:25,010 --> 00:28:28,400
line I'm going to run which I'm going to

632
00:28:28,400 --> 00:28:32,660
explain briefly so I'm running you boots

633
00:28:32,660 --> 00:28:35,179
TPL which is if you remember the very

634
00:28:35,179 --> 00:28:37,400
first stage before SPL and before your

635
00:28:37,400 --> 00:28:39,770
big proper okay so this is just a

636
00:28:39,770 --> 00:28:41,840
program that you run that will in turn

637
00:28:41,840 --> 00:28:44,300
run SPL which will in turn run you be

638
00:28:44,300 --> 00:28:47,510
proper right I'm telling it please use

639
00:28:47,510 --> 00:28:50,000
this device tree this is something that

640
00:28:50,000 --> 00:28:52,520
been man has produced this is just a

641
00:28:52,520 --> 00:28:55,460
logging level this is the command I want

642
00:28:55,460 --> 00:28:59,420
to run I want to bind this big path

643
00:28:59,420 --> 00:29:01,130
which is a chromosome it receipts you

644
00:29:01,130 --> 00:29:04,700
that I built and then I want to say V

645
00:29:04,700 --> 00:29:07,280
boot go Auto which just means V boot

646
00:29:07,280 --> 00:29:09,710
however you want to be verified boot

647
00:29:09,710 --> 00:29:12,200
just do it for do the correct thing for

648
00:29:12,200 --> 00:29:15,500
whatever stage for at this basically

649
00:29:15,500 --> 00:29:16,970
what I'm going to run so let's do that

650
00:29:16,970 --> 00:29:20,270
and we get a whole lot of stuff so let

651
00:29:20,270 --> 00:29:23,000
me just take you up a little bit so you

652
00:29:23,000 --> 00:29:28,760
can see this so the first thing is that

653
00:29:28,760 --> 00:29:33,530
we are starting up here where are we

654
00:29:33,530 --> 00:29:35,179
there's quite a lot of stuff

655
00:29:35,179 --> 00:29:38,120
unfortunately with with we're starting

656
00:29:38,120 --> 00:29:46,760
up in TPL UV t PL here and we we first

657
00:29:46,760 --> 00:29:49,490
of all run this version this init stage

658
00:29:49,490 --> 00:29:51,350
which we're trying to verify that

659
00:29:51,350 --> 00:29:54,110
everything is ok we read the flesh to

660
00:29:54,110 --> 00:29:55,340
figure out what's in the flesh we've

661
00:29:55,340 --> 00:29:57,470
found these things in the flesh

662
00:29:57,470 --> 00:30:00,170
and now we're going to go and duel the

663
00:30:00,170 --> 00:30:03,290
initial verification and this basically

664
00:30:03,290 --> 00:30:06,530
ends up with us saying ok we're going to

665
00:30:06,530 --> 00:30:08,900
we're going to boot from slot a we

666
00:30:08,900 --> 00:30:12,040
decided that's what we want to be from

667
00:30:12,040 --> 00:30:14,750
and once we decide that we figure out

668
00:30:14,750 --> 00:30:16,580
where it is we hash the firmware and

669
00:30:16,580 --> 00:30:18,620
check that the hash verifies as it

670
00:30:18,620 --> 00:30:21,950
should we have some unimplemented ec

671
00:30:21,950 --> 00:30:23,780
commands as an emulation of a khromov

672
00:30:23,780 --> 00:30:26,830
sec a new boot i doesn't do everything

673
00:30:26,830 --> 00:30:29,160
but it probably should

674
00:30:29,160 --> 00:30:30,750
I don't know what those commands do

675
00:30:30,750 --> 00:30:33,810
hopefully they're not important and then

676
00:30:33,810 --> 00:30:35,370
we have a thing called a blob list which

677
00:30:35,370 --> 00:30:37,410
is relatively new it's not really in

678
00:30:37,410 --> 00:30:39,390
mainline yet and that one that

679
00:30:39,390 --> 00:30:42,960
essentially lets you pass information

680
00:30:42,960 --> 00:30:46,820
between the stages is TPL SPL and so on

681
00:30:46,820 --> 00:30:50,010
we then go into SPL all that really does

682
00:30:50,010 --> 00:30:52,860
is set up SDM which doesn't happen in

683
00:30:52,860 --> 00:30:54,540
sandbox and then she jumps into you boot

684
00:30:54,540 --> 00:30:56,340
and then we do a similar sort of stuff

685
00:30:56,340 --> 00:30:57,930
again and then we end up in this loop

686
00:30:57,930 --> 00:31:00,840
where we're pretty much gonna try and

687
00:31:00,840 --> 00:31:02,910
boot the kernel and in fact it does as

688
00:31:02,910 --> 00:31:05,250
you can see boot the kernel on sandbox

689
00:31:05,250 --> 00:31:07,230
all it does is find the kernel and exit

690
00:31:07,230 --> 00:31:09,150
that on a real system that would

691
00:31:09,150 --> 00:31:12,030
actually boot it if we if we run it with

692
00:31:12,030 --> 00:31:14,940
the LCD on you can actually see what's

693
00:31:14,940 --> 00:31:18,180
going on this is obviously the the

694
00:31:18,180 --> 00:31:20,100
recovery was sorry it's a developer mode

695
00:31:20,100 --> 00:31:22,170
screen you can change your language and

696
00:31:22,170 --> 00:31:26,340
you can you can go out of you can decide

697
00:31:26,340 --> 00:31:28,020
that you want to go to new verification

698
00:31:28,020 --> 00:31:29,280
on and that sort of thing so all the

699
00:31:29,280 --> 00:31:32,310
screens work you sandbox has a pretty

700
00:31:32,310 --> 00:31:37,410
good pretty good system for displaying

701
00:31:37,410 --> 00:31:39,030
this off so that's basically a demo of

702
00:31:39,030 --> 00:31:41,970
it running and I'll just show you a demo

703
00:31:41,970 --> 00:31:44,600
on this device which is going to be

704
00:31:44,600 --> 00:31:46,650
interesting to see if how I can do this

705
00:31:46,650 --> 00:31:51,180
but let's just try it so this is a ghena

706
00:31:51,180 --> 00:31:54,000
traning and I just wanted to show you

707
00:31:54,000 --> 00:31:57,120
the lazy init thing that I was talking

708
00:31:57,120 --> 00:31:58,620
about one of the problems in

709
00:31:58,620 --> 00:32:01,170
criminalists primeras has is that when

710
00:32:01,170 --> 00:32:02,700
you start up you don't normally want the

711
00:32:02,700 --> 00:32:05,430
display on in firmware it takes about a

712
00:32:05,430 --> 00:32:07,440
second turn the display on run the boot

713
00:32:07,440 --> 00:32:09,090
ROM and everything else on this device

714
00:32:09,090 --> 00:32:11,130
so we don't want to do it most of the

715
00:32:11,130 --> 00:32:15,570
time so the way you bit works is that if

716
00:32:15,570 --> 00:32:17,760
you if you don't need it then it doesn't

717
00:32:17,760 --> 00:32:20,580
get doesn't get an owner said but if I

718
00:32:20,580 --> 00:32:25,950
type a command then it will actually you

719
00:32:25,950 --> 00:32:27,150
can't really see it but there's a little

720
00:32:27,150 --> 00:32:28,800
cursor now it's init of the display all

721
00:32:28,800 --> 00:32:30,510
they did was tell it please see your

722
00:32:30,510 --> 00:32:32,460
standard out to the vid console and that

723
00:32:32,460 --> 00:32:35,010
caused that to probe oh yeah I need the

724
00:32:35,010 --> 00:32:36,750
video console okay no problem now I need

725
00:32:36,750 --> 00:32:39,330
to run the PCI boot ROM it's sorry Oprah

726
00:32:39,330 --> 00:32:40,980
option ROM and all that sort of stuff

727
00:32:40,980 --> 00:32:41,929
happens laser

728
00:32:41,929 --> 00:32:46,080
so the end result is that when I when I

729
00:32:46,080 --> 00:32:49,500
boot the machine it it has to normally

730
00:32:49,500 --> 00:32:51,030
wouldn't do it but if it sees that it

731
00:32:51,030 --> 00:32:53,220
has to it will go off in another display

732
00:32:53,220 --> 00:32:54,870
automatically so that's a nice thing

733
00:32:54,870 --> 00:33:01,470
about driver model if you want to see

734
00:33:01,470 --> 00:33:03,059
that better you can perhaps you're

735
00:33:03,059 --> 00:33:06,750
welcome to come up at the end so that's

736
00:33:06,750 --> 00:33:14,490
my demo and then I just want to talk a

737
00:33:14,490 --> 00:33:17,309
little bit about what what the plan is a

738
00:33:17,309 --> 00:33:21,750
lot of the stuff will land in the next

739
00:33:21,750 --> 00:33:26,280
two releases and when I say stuff I mean

740
00:33:26,280 --> 00:33:28,530
the non Chrome OS stuff access to the

741
00:33:28,530 --> 00:33:30,450
Chrome OS stuff itself I'm not sure

742
00:33:30,450 --> 00:33:33,330
there's a smudge code I'm not too sure

743
00:33:33,330 --> 00:33:35,039
what the best thing to do is we'll just

744
00:33:35,039 --> 00:33:36,690
have to see and how much interest there

745
00:33:36,690 --> 00:33:38,490
is in that sort of thing but I'll take

746
00:33:38,490 --> 00:33:44,220
it that far okay so by my count I've got

747
00:33:44,220 --> 00:33:47,850
two minutes left and so I'm not going to

748
00:33:47,850 --> 00:33:50,309
go into this in any great detail but let

749
00:33:50,309 --> 00:33:51,929
me just let me just go through this

750
00:33:51,929 --> 00:33:54,419
quickly and talk a little bit about then

751
00:33:54,419 --> 00:33:58,020
men I didn't I don't mind if we don't

752
00:33:58,020 --> 00:33:59,880
talk about it at all but I just mention

753
00:33:59,880 --> 00:34:03,240
it at least so this is my motivation

754
00:34:03,240 --> 00:34:05,669
obviously firmware packaging is becoming

755
00:34:05,669 --> 00:34:08,668
more and more complicated bin man does

756
00:34:08,668 --> 00:34:11,879
all of these things essentially you

757
00:34:11,879 --> 00:34:13,560
create an image with a lot of list of

758
00:34:13,560 --> 00:34:17,070
entries it packs them together it does

759
00:34:17,070 --> 00:34:18,570
whatever needs to be done to them and

760
00:34:18,570 --> 00:34:21,750
then you end up with a final image and

761
00:34:21,750 --> 00:34:23,668
the image that I was running in sandbox

762
00:34:23,668 --> 00:34:25,800
before and on this device they were

763
00:34:25,800 --> 00:34:29,159
produced by Ben men here's an example of

764
00:34:29,159 --> 00:34:32,369
an image we have SPL here we have some

765
00:34:32,369 --> 00:34:35,550
padding 232 K and then we have you boot

766
00:34:35,550 --> 00:34:38,340
very very simple image here's what how

767
00:34:38,340 --> 00:34:39,960
you described it and Ben man you say

768
00:34:39,960 --> 00:34:42,418
okay here's my image size here's my pad

769
00:34:42,418 --> 00:34:45,899
by I want SPL then I want that's you

770
00:34:45,899 --> 00:34:50,489
boot at this episode associate will

771
00:34:50,489 --> 00:34:52,300
automatically put padding on that kind

772
00:34:52,300 --> 00:34:54,668
so that's it it's very simple to put

773
00:34:54,668 --> 00:34:57,390
things together unless you're on x86

774
00:34:57,390 --> 00:35:01,000
where it's a total disaster because

775
00:35:01,000 --> 00:35:03,850
there are so many binary blobs and so

776
00:35:03,850 --> 00:35:05,440
many bits and pieces that have to go in

777
00:35:05,440 --> 00:35:07,570
there in fact the way it works is this

778
00:35:07,570 --> 00:35:14,080
only a single x86 file which does

779
00:35:14,080 --> 00:35:15,400
everything and you can see that's why

780
00:35:15,400 --> 00:35:16,930
it's got these if it is if we've got an

781
00:35:16,930 --> 00:35:19,210
E and an entire leaf is P then we shove

782
00:35:19,210 --> 00:35:22,900
it in here if we don't then we don't I'm

783
00:35:22,900 --> 00:35:26,520
being told to go to the end here so

784
00:35:26,520 --> 00:35:29,440
basically my objection main teaching was

785
00:35:29,440 --> 00:35:31,240
been managed to make it be able to build

786
00:35:31,240 --> 00:35:33,250
a Chrome OS image which it can but I

787
00:35:33,250 --> 00:35:37,570
think it needs a little more work and

788
00:35:37,570 --> 00:35:40,320
there's a little few lengths there to

789
00:35:40,320 --> 00:35:42,970
tube in man if you want to read the

790
00:35:42,970 --> 00:35:45,160
documentation and the entry types it's

791
00:35:45,160 --> 00:35:46,930
pretty easy to extend in heck if you

792
00:35:46,930 --> 00:35:51,970
want to try it out and I won't play this

793
00:35:51,970 --> 00:35:52,420
video

794
00:35:52,420 --> 00:35:55,180
and unfortunately I'm very sad I wanted

795
00:35:55,180 --> 00:35:57,070
to play the video but there's no sound

796
00:35:57,070 --> 00:36:00,490
there's no point please buy your family

797
00:36:00,490 --> 00:36:05,590
Chromebooks helps keep me employed thank

798
00:36:05,590 --> 00:36:08,380
you any questions thanks give her an

799
00:36:08,380 --> 00:36:10,740
applause

800
00:36:15,140 --> 00:36:17,880
whoo I'm so glad I don't have to tackle

801
00:36:17,880 --> 00:36:20,100
you tackle me promise to tackle anyone

802
00:36:20,100 --> 00:36:22,980
whom x-max all the time so you just

803
00:36:22,980 --> 00:36:26,220
happy I didn't take 10 minutes no it's

804
00:36:26,220 --> 00:36:27,260
fine

805
00:36:27,260 --> 00:36:35,870
so yeah any questions oh oh they're okay

806
00:36:41,420 --> 00:36:45,660
so doing your sandbox demo I saw some

807
00:36:45,660 --> 00:36:48,390
line scrolling by that said something

808
00:36:48,390 --> 00:36:52,230
about CV GFX did you host hi stannie

809
00:36:52,230 --> 00:36:53,790
code from the payload until you go to

810
00:36:53,790 --> 00:36:55,500
support the graphics so how does that

811
00:36:55,500 --> 00:36:56,550
come from

812
00:36:56,550 --> 00:37:00,050
oh yes it should be on the to-do list

813
00:37:00,050 --> 00:37:04,830
the graphics so all gubec provides is a

814
00:37:04,830 --> 00:37:07,620
frame buffer anybody in a convent it was

815
00:37:07,620 --> 00:37:11,490
called a text console which has you know

816
00:37:11,490 --> 00:37:15,320
nice fonts and things but no actual

817
00:37:15,320 --> 00:37:17,760
graphics so yes that code is simply

818
00:37:17,760 --> 00:37:21,450
brought in and needs to be removed or

819
00:37:21,450 --> 00:37:24,270
something because it's but there is no

820
00:37:24,270 --> 00:37:25,860
u-boot equivalent I don't think at the

821
00:37:25,860 --> 00:37:28,680
moment you can draw bitmaps and you boot

822
00:37:28,680 --> 00:37:32,430
but I think I think it's does scaling of

823
00:37:32,430 --> 00:37:34,650
bitmaps as well it does at the moment

824
00:37:34,650 --> 00:37:37,860
yes good well so you're not considering

825
00:37:37,860 --> 00:37:40,170
putting that over or sorry are you

826
00:37:40,170 --> 00:37:41,460
considering actually putting that over

827
00:37:41,460 --> 00:37:43,170
to you boot or just replacing it with

828
00:37:43,170 --> 00:37:43,680
something else

829
00:37:43,680 --> 00:37:47,820
ah I don't know it's hard to say yeah

830
00:37:47,820 --> 00:37:49,020
this is one of the weird things about

831
00:37:49,020 --> 00:37:53,360
Chrome OS it has all these features and

832
00:37:53,360 --> 00:37:55,800
sometimes you know you boot is a

833
00:37:55,800 --> 00:37:59,160
bootloader right I suspect is that

834
00:37:59,160 --> 00:38:01,320
there's value in it actually because

835
00:38:01,320 --> 00:38:03,000
anything that has a display you probably

836
00:38:03,000 --> 00:38:05,250
want to be able to show something on the

837
00:38:05,250 --> 00:38:08,040
display and say yeah I can't boot or

838
00:38:08,040 --> 00:38:10,710
whatever okay cool

839
00:38:10,710 --> 00:38:15,710
we'll see any more questions

840
00:38:22,299 --> 00:38:24,489
to quickly piggyback on a graphic stuff

841
00:38:24,489 --> 00:38:26,499
we were sort of having a same question

842
00:38:26,499 --> 00:38:29,529
about particularly ER and alex graph be

843
00:38:29,529 --> 00:38:30,969
here because it's presenting downstairs

844
00:38:30,969 --> 00:38:31,660
in five minutes

845
00:38:31,660 --> 00:38:33,549
mentioned there is a library here you

846
00:38:33,549 --> 00:38:35,170
might want to look at so I talked to

847
00:38:35,170 --> 00:38:37,349
Alex maybe say something out there that

848
00:38:37,349 --> 00:38:42,189
he says is interesting regard we got in

849
00:38:42,189 --> 00:38:45,239
your talk I will thank you first and I

850
00:38:45,239 --> 00:38:48,309
noticed you took some liberties with the

851
00:38:48,309 --> 00:38:51,969
device tree I took some liberties with

852
00:38:51,969 --> 00:38:53,729
how you put things in the device tree oh

853
00:38:53,729 --> 00:38:55,269
absolutely

854
00:38:55,269 --> 00:38:58,420
and I used on the matter I assume you

855
00:38:58,420 --> 00:38:59,920
have no intent to get that through any

856
00:38:59,920 --> 00:39:02,890
binding document to what through any of

857
00:39:02,890 --> 00:39:07,359
the binding definition process there is

858
00:39:07,359 --> 00:39:09,219
an open question and it's something I

859
00:39:09,219 --> 00:39:11,920
think is worth some of us thinking about

860
00:39:11,920 --> 00:39:14,739
is this whole concept of having those

861
00:39:14,739 --> 00:39:17,109
pillar devices in me that I effectively

862
00:39:17,109 --> 00:39:20,559
use as a way to group various lot of

863
00:39:20,559 --> 00:39:23,890
functionalities into a virtual so the

864
00:39:23,890 --> 00:39:27,130
device and in some cases you've been

865
00:39:27,130 --> 00:39:28,839
sticking things in your slash commerce

866
00:39:28,839 --> 00:39:30,429
in some cases you have been putting

867
00:39:30,429 --> 00:39:33,969
things as children of the device

868
00:39:33,969 --> 00:39:36,929
providing the apparent functionality

869
00:39:36,929 --> 00:39:41,799
back and forth do you have any

870
00:39:41,799 --> 00:39:45,369
particular reason why you prefer one way

871
00:39:45,369 --> 00:39:55,209
or another so there is a way to say

872
00:39:55,209 --> 00:39:57,519
here's a device tree that I want you to

873
00:39:57,519 --> 00:40:01,049
merge with my normal one the the x86

874
00:40:01,049 --> 00:40:04,989
tree has a you boot DT si and that just

875
00:40:04,989 --> 00:40:08,559
gets attached to any x86 thing so you

876
00:40:08,559 --> 00:40:11,650
can put overrides and things like that

877
00:40:11,650 --> 00:40:15,039
in a separate place so it's not like we

878
00:40:15,039 --> 00:40:17,259
have to pollute the you know pristine

879
00:40:17,259 --> 00:40:19,029
Linux kernel device tree or anything

880
00:40:19,029 --> 00:40:19,779
like that

881
00:40:19,779 --> 00:40:22,660
necessarily so I don't have a

882
00:40:22,660 --> 00:40:24,519
particularly strong point of view the

883
00:40:24,519 --> 00:40:25,959
advantage of having it in a conflict

884
00:40:25,959 --> 00:40:28,239
block as you saw is by an example it's

885
00:40:28,239 --> 00:40:30,039
all in one place and you can go here's

886
00:40:30,039 --> 00:40:31,450
my pee handle to this

887
00:40:31,450 --> 00:40:34,330
no but when you're writing a driver it's

888
00:40:34,330 --> 00:40:36,910
a pain to go and find all that stuff the

889
00:40:36,910 --> 00:40:38,440
driver just once it's easier for the

890
00:40:38,440 --> 00:40:40,630
driver to just say where's my parent my

891
00:40:40,630 --> 00:40:42,430
parent is my parent if my parent is

892
00:40:42,430 --> 00:40:44,590
spied in I know it's fire I can talk to

893
00:40:44,590 --> 00:40:47,440
it so I think I probably prefer the

894
00:40:47,440 --> 00:40:51,940
latter but I don't know I will point out

895
00:40:51,940 --> 00:40:53,740
on the device tree side you vote doesn't

896
00:40:53,740 --> 00:40:58,060
have user space you know Linux has

897
00:40:58,060 --> 00:41:00,610
attitude as well you know you put all

898
00:41:00,610 --> 00:41:04,000
your information in all your product all

899
00:41:04,000 --> 00:41:05,680
your decisions and so on a common user

900
00:41:05,680 --> 00:41:08,260
space you boot doesn't actually have a

901
00:41:08,260 --> 00:41:10,690
user space so that's one justification

902
00:41:10,690 --> 00:41:14,670
for putting config and device tree

903
00:41:15,930 --> 00:41:17,980
unfortunately that's all for questions

904
00:41:17,980 --> 00:41:20,170
now so thank you very much give a round

905
00:41:20,170 --> 00:41:21,180
of applause

906
00:41:21,180 --> 00:41:25,089
[Applause]

907
00:41:26,180 --> 00:41:33,058
[Music]

