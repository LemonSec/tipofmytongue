1
00:00:00,000 --> 00:00:04,160
[Music]

2
00:00:04,160 --> 00:00:07,500
so our next talk will be helped by side

3
00:00:07,500 --> 00:00:11,340
as Arie and he'll be talking about BMC

4
00:00:11,340 --> 00:00:15,230
hardware and the open BMC software so

5
00:00:15,230 --> 00:00:22,670
give an applause for SIA sorry thank you

6
00:00:22,699 --> 00:00:26,000
can you hear me

7
00:00:26,000 --> 00:00:28,289
yeah welcome to the last session of

8
00:00:28,289 --> 00:00:31,430
today which is open BMC my name is Sai

9
00:00:31,430 --> 00:00:34,200
open BMC is the open-source system

10
00:00:34,200 --> 00:00:37,800
management firmware stack how many of

11
00:00:37,800 --> 00:00:42,210
you have heard of BMC Wow that makes my

12
00:00:42,210 --> 00:00:42,809
life easy

13
00:00:42,809 --> 00:00:45,390
I have prepared a lot for the people who

14
00:00:45,390 --> 00:00:46,770
doesn't know about BMC so I just

15
00:00:46,770 --> 00:00:49,350
repaired some use cases but anyway I am

16
00:00:49,350 --> 00:00:56,910
going to go over them so we have why BMC

17
00:00:56,910 --> 00:00:58,739
and what it helps in the data center is

18
00:00:58,739 --> 00:01:01,020
my first half of the talk and then we

19
00:01:01,020 --> 00:01:03,149
look at how do we implement the BMC

20
00:01:03,149 --> 00:01:05,099
firmware stack what has been happening

21
00:01:05,099 --> 00:01:06,570
in the last 20 years and then what we

22
00:01:06,570 --> 00:01:13,110
did in the last 4 years so when you look

23
00:01:13,110 --> 00:01:15,330
at this scale out data centers so they

24
00:01:15,330 --> 00:01:16,920
have they look like this on the picture

25
00:01:16,920 --> 00:01:19,920
just one aisle that has bunch of racks

26
00:01:19,920 --> 00:01:22,409
each eric has made that computer servers

27
00:01:22,409 --> 00:01:25,170
storage systems and the top of the racks

28
00:01:25,170 --> 00:01:28,020
which all of these are systems and you

29
00:01:28,020 --> 00:01:30,810
can imagine these kind of rows being in

30
00:01:30,810 --> 00:01:33,689
the data center about like a football

31
00:01:33,689 --> 00:01:35,070
field is what they call like each

32
00:01:35,070 --> 00:01:36,930
buildings that kind of buildings are

33
00:01:36,930 --> 00:01:39,930
about like 4 per each site and this kind

34
00:01:39,930 --> 00:01:42,659
of data centers are across there are you

35
00:01:42,659 --> 00:01:45,299
know across world pretty much like

36
00:01:45,299 --> 00:01:49,799
remote so why should we manage them you

37
00:01:49,799 --> 00:01:53,100
know continuously so one reason is like

38
00:01:53,100 --> 00:01:54,840
say these are all running 24 by 7

39
00:01:54,840 --> 00:01:57,210
services so means like not unlike like

40
00:01:57,210 --> 00:01:59,460
interpreter systems where you have

41
00:01:59,460 --> 00:02:03,149
monitor evening and then you have less

42
00:02:03,149 --> 00:02:05,790
loaded time this is services are running

43
00:02:05,790 --> 00:02:09,449
like 24/7 and we need any kind of

44
00:02:09,449 --> 00:02:11,038
failure that happens that this care is

45
00:02:11,038 --> 00:02:12,160
going to be like an earring

46
00:02:12,160 --> 00:02:14,770
people to run our own fix them so we'd

47
00:02:14,770 --> 00:02:16,350
like to kind of do lot of autonomous

48
00:02:16,350 --> 00:02:18,880
remediation autonomously to be able to

49
00:02:18,880 --> 00:02:21,400
fix issues detect issues and then fix

50
00:02:21,400 --> 00:02:23,800
them so that's the goal for managing

51
00:02:23,800 --> 00:02:31,120
systems at remote so I show you some use

52
00:02:31,120 --> 00:02:33,610
cases actually why what do you mean by

53
00:02:33,610 --> 00:02:35,830
system management what kind of use cases

54
00:02:35,830 --> 00:02:38,890
exist for this it for the scale of data

55
00:02:38,890 --> 00:02:42,040
centers because this concept is not new

56
00:02:42,040 --> 00:02:44,350
it has been there for last 20 years but

57
00:02:44,350 --> 00:02:46,780
most typically they emphasize like a

58
00:02:46,780 --> 00:02:48,760
single system management versus let's

59
00:02:48,760 --> 00:02:50,710
say what kind of use cases are there for

60
00:02:50,710 --> 00:02:54,010
a bigger larger scale systems the first

61
00:02:54,010 --> 00:02:55,480
use case I take is the inventory

62
00:02:55,480 --> 00:02:58,330
information so this base the complex

63
00:02:58,330 --> 00:02:59,680
systems are not like built as a

64
00:02:59,680 --> 00:03:02,410
monolithic one system so it is built out

65
00:03:02,410 --> 00:03:04,630
of like multiple components so that we

66
00:03:04,630 --> 00:03:06,550
can easy to replace so if something goes

67
00:03:06,550 --> 00:03:08,710
wrong for one component it's called

68
00:03:08,710 --> 00:03:11,050
through field replaceable units so we

69
00:03:11,050 --> 00:03:12,430
can replace that component with another

70
00:03:12,430 --> 00:03:15,010
one so what's the problem here so when

71
00:03:15,010 --> 00:03:17,380
we build our assemble the systems we

72
00:03:17,380 --> 00:03:19,209
have we scan all those serial numbers

73
00:03:19,209 --> 00:03:21,790
part numbers etc put it in the database

74
00:03:21,790 --> 00:03:24,340
and when somebody has to kind of replace

75
00:03:24,340 --> 00:03:26,709
a component they go there take out the

76
00:03:26,709 --> 00:03:29,800
bed through put the new one scan the new

77
00:03:29,800 --> 00:03:32,860
entry that updates the database but

78
00:03:32,860 --> 00:03:35,290
since there are human errors always

79
00:03:35,290 --> 00:03:37,420
things go wrong sometimes people forget

80
00:03:37,420 --> 00:03:39,700
to kind of do that as part of the repair

81
00:03:39,700 --> 00:03:42,670
process or in other cases as part of

82
00:03:42,670 --> 00:03:44,650
debugging people swab the components and

83
00:03:44,650 --> 00:03:46,750
then you know it's not considered as a

84
00:03:46,750 --> 00:03:49,540
repair process so we have wrong data in

85
00:03:49,540 --> 00:03:51,070
the database so when somebody looks at

86
00:03:51,070 --> 00:03:54,220
the database they see a flu which is not

87
00:03:54,220 --> 00:03:56,020
supposed to be there are they still

88
00:03:56,020 --> 00:03:58,930
think that so it's bad so this is one

89
00:03:58,930 --> 00:04:00,580
use case where we would like to kind of

90
00:04:00,580 --> 00:04:02,739
audit entire data center and find out

91
00:04:02,739 --> 00:04:04,000
like say what components are we using

92
00:04:04,000 --> 00:04:05,620
what kind of rules are there really

93
00:04:05,620 --> 00:04:07,900
operational in the field so this is one

94
00:04:07,900 --> 00:04:09,820
use case I would like to bring saying

95
00:04:09,820 --> 00:04:12,130
that having that information real-time

96
00:04:12,130 --> 00:04:18,279
and accurate is very important power so

97
00:04:18,279 --> 00:04:19,600
you can pay a lot of money but you don't

98
00:04:19,600 --> 00:04:21,700
get power for the rare dissenters so we

99
00:04:21,700 --> 00:04:24,610
have a very tight limit or a budget on

100
00:04:24,610 --> 00:04:26,139
data centers

101
00:04:26,139 --> 00:04:28,509
much power we can use so anytime any

102
00:04:28,509 --> 00:04:30,159
savings that we can do in the power is

103
00:04:30,159 --> 00:04:31,749
automatically translated into their

104
00:04:31,749 --> 00:04:34,749
money and then this way we would like to

105
00:04:34,749 --> 00:04:36,939
kind of have the power arm system that

106
00:04:36,939 --> 00:04:39,340
we clearly want to hear them and if you

107
00:04:39,340 --> 00:04:41,349
don't use them just pull it off shut it

108
00:04:41,349 --> 00:04:43,659
down that capability we need remotely

109
00:04:43,659 --> 00:04:45,930
and the other thing is the new modern

110
00:04:45,930 --> 00:04:48,400
CPUs they can operate it wide range of

111
00:04:48,400 --> 00:04:51,159
powers like they can start with 20 watts

112
00:04:51,159 --> 00:04:53,439
power with a less performance all the

113
00:04:53,439 --> 00:04:55,599
way 200 watts in some cases beyond that

114
00:04:55,599 --> 00:04:58,509
so we have ability to kind of tune that

115
00:04:58,509 --> 00:05:01,389
power need based on the workload so this

116
00:05:01,389 --> 00:05:02,740
is another feature that we would like to

117
00:05:02,740 --> 00:05:08,169
have from remotely the third one is

118
00:05:08,169 --> 00:05:09,939
system monitoring so nowadays the

119
00:05:09,939 --> 00:05:11,500
hardware is pretty stable and a very

120
00:05:11,500 --> 00:05:13,300
reliable compared to the hardware that

121
00:05:13,300 --> 00:05:15,610
we used to have 20 years back but still

122
00:05:15,610 --> 00:05:17,770
things go wrong once in a while like the

123
00:05:17,770 --> 00:05:20,529
voltage is going out of fluctuation like

124
00:05:20,529 --> 00:05:23,020
temperature's going out of the range

125
00:05:23,020 --> 00:05:25,900
operating range so we need a way to kind

126
00:05:25,900 --> 00:05:28,270
of monitor them continuously 24 by 7 all

127
00:05:28,270 --> 00:05:30,159
the signals like voltages power

128
00:05:30,159 --> 00:05:34,569
temperature or you know etcetera so our

129
00:05:34,569 --> 00:05:37,419
critical signals using GPS and in some

130
00:05:37,419 --> 00:05:38,830
cases when we see something going wrong

131
00:05:38,830 --> 00:05:41,020
or like a wrong direction like

132
00:05:41,020 --> 00:05:42,580
temperature for example we can control

133
00:05:42,580 --> 00:05:45,009
fans and then make sure they just cool

134
00:05:45,009 --> 00:05:47,860
down in some other cases the failure

135
00:05:47,860 --> 00:05:50,020
could be fatter in that case all we can

136
00:05:50,020 --> 00:05:52,300
do is log them and then send it out for

137
00:05:52,300 --> 00:05:55,210
the technician to kind of debug it so

138
00:05:55,210 --> 00:05:58,479
this is the other two use cases that we

139
00:05:58,479 --> 00:06:00,580
have for monitoring systems continuously

140
00:06:00,580 --> 00:06:03,370
so we need a kind of autonomous system

141
00:06:03,370 --> 00:06:04,539
to kind of monitor the hardware

142
00:06:04,539 --> 00:06:10,990
continuously debug so when things go

143
00:06:10,990 --> 00:06:13,539
wrong in the server's the way we debug

144
00:06:13,539 --> 00:06:15,460
is typically if it is accessible the

145
00:06:15,460 --> 00:06:17,020
system is accessible you log into the

146
00:06:17,020 --> 00:06:18,849
system look at the logs from the

147
00:06:18,849 --> 00:06:20,620
application or the operating system and

148
00:06:20,620 --> 00:06:22,689
find out what happened actually what is

149
00:06:22,689 --> 00:06:24,310
a problem with that particular

150
00:06:24,310 --> 00:06:26,560
application or the operating system but

151
00:06:26,560 --> 00:06:28,810
in some cases the whole kernel is hung

152
00:06:28,810 --> 00:06:31,569
in that case other than serial console

153
00:06:31,569 --> 00:06:33,069
we don't have any other way to debug it

154
00:06:33,069 --> 00:06:35,560
so this is one reason why we want to

155
00:06:35,560 --> 00:06:37,659
have a remote way to connect to the host

156
00:06:37,659 --> 00:06:39,910
and get the serial console and see

157
00:06:39,910 --> 00:06:42,220
what happens in some cases like say if

158
00:06:42,220 --> 00:06:44,110
Colonel is hung even if you connect to

159
00:06:44,110 --> 00:06:45,640
the console you cannot get any

160
00:06:45,640 --> 00:06:48,130
information on that so in that case we

161
00:06:48,130 --> 00:06:49,750
would like to see what happened before

162
00:06:49,750 --> 00:06:51,910
no before the failure maybe there is a

163
00:06:51,910 --> 00:06:53,560
stack trace that I can take a look and

164
00:06:53,560 --> 00:06:55,600
then identify the bug so we need to kind

165
00:06:55,600 --> 00:06:59,880
of have a history of the remote console

166
00:07:03,420 --> 00:07:05,590
firmware update so we have a lot of

167
00:07:05,590 --> 00:07:07,840
former components like these systems are

168
00:07:07,840 --> 00:07:10,090
so sophisticated over it is yesterday

169
00:07:10,090 --> 00:07:11,290
morning somebody was saying other than

170
00:07:11,290 --> 00:07:12,520
the sister everything else is like

171
00:07:12,520 --> 00:07:14,290
programmable you can see here the

172
00:07:14,290 --> 00:07:15,940
program will component that we used

173
00:07:15,940 --> 00:07:18,940
today the CPLDs voltage regulators the

174
00:07:18,940 --> 00:07:22,330
bias BMC Network NIC cards he said ah

175
00:07:22,330 --> 00:07:25,570
you name any component it's updatable so

176
00:07:25,570 --> 00:07:27,580
we would like to upgrade them remotely

177
00:07:27,580 --> 00:07:29,440
so this is another use case we have for

178
00:07:29,440 --> 00:07:34,270
managing systems remotely so for all of

179
00:07:34,270 --> 00:07:36,490
these like what solution this is nothing

180
00:07:36,490 --> 00:07:37,840
new actually it's a it has been there

181
00:07:37,840 --> 00:07:39,970
for 20 years so we add a autonomous

182
00:07:39,970 --> 00:07:42,430
system called BMC so BMC is the base

183
00:07:42,430 --> 00:07:43,570
board management controller

184
00:07:43,570 --> 00:07:46,000
it's a autonomous means it has its own

185
00:07:46,000 --> 00:07:49,690
CPU its own memory ddr4 and its own

186
00:07:49,690 --> 00:07:52,120
storage means like we can store locks

187
00:07:52,120 --> 00:07:54,850
and it is totally isolated from the

188
00:07:54,850 --> 00:07:56,350
power point of view so that way it's

189
00:07:56,350 --> 00:07:58,570
always running even if you want to save

190
00:07:58,570 --> 00:08:00,730
power it can power of entire system but

191
00:08:00,730 --> 00:08:03,220
you still run VM self so it provides you

192
00:08:03,220 --> 00:08:06,130
remote access to that so that's why I

193
00:08:06,130 --> 00:08:08,290
think the bottom highlighted part is the

194
00:08:08,290 --> 00:08:10,480
BMC a small subsystem it doesn't take

195
00:08:10,480 --> 00:08:11,919
any power like compared to the regular

196
00:08:11,919 --> 00:08:15,220
power that we mentioned before some 1

197
00:08:15,220 --> 00:08:18,790
watt and then the cost of adding it also

198
00:08:18,790 --> 00:08:20,350
pretty low compared to any typical

199
00:08:20,350 --> 00:08:23,290
server Orlick storage system so overhead

200
00:08:23,290 --> 00:08:25,000
wise it's not much but the benefits it

201
00:08:25,000 --> 00:08:27,010
gives us is having all this access to

202
00:08:27,010 --> 00:08:29,110
this remote services remote control

203
00:08:29,110 --> 00:08:34,390
services so the previous slide shows

204
00:08:34,390 --> 00:08:37,090
like how a BMC can help us manage one

205
00:08:37,090 --> 00:08:39,820
system at a time so in this use case we

206
00:08:39,820 --> 00:08:41,919
have the outside you can see a and our

207
00:08:41,919 --> 00:08:44,860
both there's a four servers in a single

208
00:08:44,860 --> 00:08:47,320
chassis we call it is a sled that has

209
00:08:47,320 --> 00:08:49,660
four independent servers and they are

210
00:08:49,660 --> 00:08:51,880
all controlled by one BMC so we call it

211
00:08:51,880 --> 00:08:53,260
as a multi-core system

212
00:08:53,260 --> 00:08:55,570
so here you can see like the network

213
00:08:55,570 --> 00:08:57,730
card is shared with all the four servers

214
00:08:57,730 --> 00:09:00,220
and the power is shared so it's it looks

215
00:09:00,220 --> 00:09:01,810
like a single box but it has four

216
00:09:01,810 --> 00:09:07,390
independent servers in it and the back

217
00:09:07,390 --> 00:09:09,700
in the days like the BMC itself used to

218
00:09:09,700 --> 00:09:11,470
be very small like 8-bit microcontroller

219
00:09:11,470 --> 00:09:15,190
and then like renesis is one of the

220
00:09:15,190 --> 00:09:17,650
famous like we used to use it and then

221
00:09:17,650 --> 00:09:19,780
the code used to be like a pretty much

222
00:09:19,780 --> 00:09:23,920
like metal you know metal code no

223
00:09:23,920 --> 00:09:26,320
operating system nothing but in the last

224
00:09:26,320 --> 00:09:28,450
decade I think the BMC became so

225
00:09:28,450 --> 00:09:30,130
sophisticated I think we started running

226
00:09:30,130 --> 00:09:32,230
real-time operating systems like we Xbox

227
00:09:32,230 --> 00:09:35,530
chorus and other real-time OSS free

228
00:09:35,530 --> 00:09:38,620
artists and now if you look at the bmc's

229
00:09:38,620 --> 00:09:41,080
they're like running arm core at 800

230
00:09:41,080 --> 00:09:43,390
megahertz and it has ddr4 controllers

231
00:09:43,390 --> 00:09:45,910
and then bunch of other I was it looks

232
00:09:45,910 --> 00:09:47,890
to me like a decade back if you take a

233
00:09:47,890 --> 00:09:50,320
laptop specs it looks exactly like this

234
00:09:50,320 --> 00:09:52,930
so I think BMC I become so you know

235
00:09:52,930 --> 00:09:54,550
sophisticated that we can run Linux on

236
00:09:54,550 --> 00:09:59,290
it so this is another standard

237
00:09:59,290 --> 00:10:01,900
controller like a pilot for this used to

238
00:10:01,900 --> 00:10:04,030
be a company called mlx and now it is

239
00:10:04,030 --> 00:10:06,910
owned by a speed so this also you can

240
00:10:06,910 --> 00:10:10,180
see it has GL arm core running at 500

241
00:10:10,180 --> 00:10:12,280
megahertz it's a pretty much like a NN

242
00:10:12,280 --> 00:10:14,080
processor so you can see the

243
00:10:14,080 --> 00:10:17,820
sophistication of the BMC chip itself

244
00:10:17,940 --> 00:10:21,790
this is one more from in Overtown again

245
00:10:21,790 --> 00:10:28,360
dual core ni so with this powerful BMC's

246
00:10:28,360 --> 00:10:31,300
now we can address some of the advanced

247
00:10:31,300 --> 00:10:33,550
use cases so I will go like a couple of

248
00:10:33,550 --> 00:10:34,990
them what are the advanced to use cases

249
00:10:34,990 --> 00:10:38,830
in this case the first one is like LCD

250
00:10:38,830 --> 00:10:41,140
Burkhard so typically when there is a

251
00:10:41,140 --> 00:10:43,360
problem with the system we used to have

252
00:10:43,360 --> 00:10:45,820
a small debug card that prints out that

253
00:10:45,820 --> 00:10:49,300
we can see the eight segment LED code so

254
00:10:49,300 --> 00:10:51,150
when system gets stuck in that place

255
00:10:51,150 --> 00:10:53,200
operator can understand okay what is

256
00:10:53,200 --> 00:10:55,360
this code a nine means they might know

257
00:10:55,360 --> 00:10:57,550
it's a Domitian they can go and replace

258
00:10:57,550 --> 00:11:01,180
it but now that scale it's become very

259
00:11:01,180 --> 00:11:02,530
difficult actually because now people

260
00:11:02,530 --> 00:11:04,270
have to remember like what the post code

261
00:11:04,270 --> 00:11:05,379
means

262
00:11:05,379 --> 00:11:07,569
action to take so instead of that I

263
00:11:07,569 --> 00:11:09,639
think we came up with this LCD Burkhardt

264
00:11:09,639 --> 00:11:12,879
and then that has a user-friendly format

265
00:11:12,879 --> 00:11:15,669
you can pinch strings so instead of just

266
00:11:15,669 --> 00:11:17,289
having access to the code now they know

267
00:11:17,289 --> 00:11:20,349
what has the real failure or what kind

268
00:11:20,349 --> 00:11:23,649
of logs what is the temperature so all

269
00:11:23,649 --> 00:11:25,629
the sensors fringe out all the sensors I

270
00:11:25,629 --> 00:11:27,879
have some slides to show here just a

271
00:11:27,879 --> 00:11:29,919
asterisk for the OCP so just a plug in

272
00:11:29,919 --> 00:11:32,289
for the Open Compute Project so some of

273
00:11:32,289 --> 00:11:34,149
you might know and then this is a Open

274
00:11:34,149 --> 00:11:36,129
Compute Project he's open source

275
00:11:36,129 --> 00:11:38,559
hardware just like Linux if treated as

276
00:11:38,559 --> 00:11:39,220
an open source

277
00:11:39,220 --> 00:11:41,259
kernel so there is a community working

278
00:11:41,259 --> 00:11:43,989
on open source hardware so that has

279
00:11:43,989 --> 00:11:47,529
networking kernel compute storage telco

280
00:11:47,529 --> 00:11:49,209
I think that lot of subgroups working on

281
00:11:49,209 --> 00:11:50,529
different aspects of data center

282
00:11:50,529 --> 00:11:54,339
hardware and this cart is also like open

283
00:11:54,339 --> 00:11:55,989
source under that so you can find the

284
00:11:55,989 --> 00:11:58,059
schematics for this and then you know

285
00:11:58,059 --> 00:12:02,439
build it for your use case why why this

286
00:12:02,439 --> 00:12:05,049
is complicated so the debug card itself

287
00:12:05,049 --> 00:12:07,319
has a small microcontroller in that and

288
00:12:07,319 --> 00:12:10,379
then that is connected to the main board

289
00:12:10,379 --> 00:12:13,299
using USB signalling and then that has

290
00:12:13,299 --> 00:12:15,789
much of GPIO access and also the I

291
00:12:15,789 --> 00:12:18,850
square C so we're an IP MB protocol to

292
00:12:18,850 --> 00:12:20,439
kind of talk between BMC and the

293
00:12:20,439 --> 00:12:21,899
microcontroller to exchange information

294
00:12:21,899 --> 00:12:25,059
like the locks sensors everything is

295
00:12:25,059 --> 00:12:27,429
printed on the LCD debug card using the

296
00:12:27,429 --> 00:12:30,988
BMC so this is the communication path

297
00:12:31,859 --> 00:12:34,449
some example debug pictures on the left

298
00:12:34,449 --> 00:12:37,419
side you can see the post code and on

299
00:12:37,419 --> 00:12:38,619
the left side you can see previously we

300
00:12:38,619 --> 00:12:40,329
used to have just the post code like 67

301
00:12:40,329 --> 00:12:42,850
but now we can on the right side you can

302
00:12:42,850 --> 00:12:45,069
see the LCD card that printing like what

303
00:12:45,069 --> 00:12:48,279
is the actual code means in a user

304
00:12:48,279 --> 00:12:50,559
readable format as well as the what

305
00:12:50,559 --> 00:12:52,689
happened before actually so you might

306
00:12:52,689 --> 00:12:55,119
miss the previous post code so now we

307
00:12:55,119 --> 00:12:56,379
have a chance to look at like what

308
00:12:56,379 --> 00:12:57,819
happened in the previous last four or

309
00:12:57,819 --> 00:13:00,549
five post codes or more than that

310
00:13:00,549 --> 00:13:02,889
actually we store about 16 post codes in

311
00:13:02,889 --> 00:13:05,619
single single page and we can go back

312
00:13:05,619 --> 00:13:08,109
and forth between pages the button that

313
00:13:08,109 --> 00:13:09,519
allows you to kind of go back and forth

314
00:13:09,519 --> 00:13:10,959
between various information you want to

315
00:13:10,959 --> 00:13:12,759
get so on the left side you can see post

316
00:13:12,759 --> 00:13:14,199
code on the right side you can see GPA

317
00:13:14,199 --> 00:13:16,089
was status likes a proc hard kind of

318
00:13:16,089 --> 00:13:17,079
critical signals

319
00:13:17,079 --> 00:13:18,460
is there anything is wrong

320
00:13:18,460 --> 00:13:22,480
with the system so on the left side you

321
00:13:22,480 --> 00:13:24,370
can see critical sensors like what is

322
00:13:24,370 --> 00:13:25,750
the temperature sensors are showing what

323
00:13:25,750 --> 00:13:27,490
is the current status on the right side

324
00:13:27,490 --> 00:13:29,110
you can see the system information all

325
00:13:29,110 --> 00:13:30,339
of this screens you can just use the

326
00:13:30,339 --> 00:13:32,710
button go to the next page back and

327
00:13:32,710 --> 00:13:37,810
forth the next second major feature that

328
00:13:37,810 --> 00:13:40,360
I would like to enhance is the at scale

329
00:13:40,360 --> 00:13:42,190
debug so on the left side you can see

330
00:13:42,190 --> 00:13:44,860
what how we use debug before when there

331
00:13:44,860 --> 00:13:48,370
is a issue at the CPU level if you

332
00:13:48,370 --> 00:13:51,160
identify the benchtop who used to

333
00:13:51,160 --> 00:13:52,930
connect this kind of blue box we call it

334
00:13:52,930 --> 00:13:55,839
as an Intel IDP box and using a laptop

335
00:13:55,839 --> 00:13:59,290
we can debug that code and understand

336
00:13:59,290 --> 00:14:02,620
what's happening this model works kind

337
00:14:02,620 --> 00:14:04,450
of from the lab side when bringing up

338
00:14:04,450 --> 00:14:06,459
but if the same issue happens at the

339
00:14:06,459 --> 00:14:08,770
scale like one system out of a hundred

340
00:14:08,770 --> 00:14:09,760
thousand systems are showing this

341
00:14:09,760 --> 00:14:11,380
problem it's pretty hard to kind of

342
00:14:11,380 --> 00:14:13,720
debug that issue so we cannot reproduce

343
00:14:13,720 --> 00:14:16,390
it we cannot you know connect any debug

344
00:14:16,390 --> 00:14:17,890
cables for all of the systems of today

345
00:14:17,890 --> 00:14:19,990
so the feature that Intel thanks to

346
00:14:19,990 --> 00:14:21,220
Intel I think they came up with this at

347
00:14:21,220 --> 00:14:23,860
scale debug feature so we're BMC is used

348
00:14:23,860 --> 00:14:26,770
as a proxy and then over the network you

349
00:14:26,770 --> 00:14:28,330
send all the debug commands and then

350
00:14:28,330 --> 00:14:30,130
briam see converts them into JTAG and

351
00:14:30,130 --> 00:14:32,950
then run them so now we have ability to

352
00:14:32,950 --> 00:14:35,830
kind of debug remotely using BMC as a

353
00:14:35,830 --> 00:14:41,920
proxy the last one is about NIC card so

354
00:14:41,920 --> 00:14:46,959
OCP in the car so if you look at our

355
00:14:46,959 --> 00:14:48,730
system that is done display so there is

356
00:14:48,730 --> 00:14:50,620
this is a multi host or somebody system

357
00:14:50,620 --> 00:14:52,600
which has four individual servers and

358
00:14:52,600 --> 00:14:56,410
the BMC sharing one one NIC so the NIC

359
00:14:56,410 --> 00:14:58,420
supports multiple PCIe links so that

360
00:14:58,420 --> 00:14:59,980
each of them think they have their own

361
00:14:59,980 --> 00:15:02,020
NIC but physically there's one cable

362
00:15:02,020 --> 00:15:04,000
that goes out of the box and provides

363
00:15:04,000 --> 00:15:05,890
connectivity to all five independent

364
00:15:05,890 --> 00:15:10,540
controllers on this side so this is the

365
00:15:10,540 --> 00:15:11,560
same picture that I have shown before

366
00:15:11,560 --> 00:15:14,589
but highlighting the OSI PV to the multi

367
00:15:14,589 --> 00:15:19,750
host Nick measurement card so it has

368
00:15:19,750 --> 00:15:22,149
evolved a little bit over the last few

369
00:15:22,149 --> 00:15:24,550
years the Russian one used to support

370
00:15:24,550 --> 00:15:26,950
ten gig and then it has the i2c as a

371
00:15:26,950 --> 00:15:28,000
side band for the BMC

372
00:15:28,000 --> 00:15:30,490
it's kind of a cabinet hundred kbps link

373
00:15:30,490 --> 00:15:33,250
for the network connectivity for BMC but

374
00:15:33,250 --> 00:15:34,630
in there are two ortho spec I think we

375
00:15:34,630 --> 00:15:36,670
have bumped up up to one hundred geek

376
00:15:36,670 --> 00:15:39,490
support for the host and for BMC it goes

377
00:15:39,490 --> 00:15:42,040
up two hundred Meg we do know we support

378
00:15:42,040 --> 00:15:46,270
NCSI over RMI signals and three ATO is

379
00:15:46,270 --> 00:15:47,740
under currently under review and then it

380
00:15:47,740 --> 00:15:49,779
is going through active discussions in

381
00:15:49,779 --> 00:15:52,750
the OSI P and it's not just Facebook

382
00:15:52,750 --> 00:15:54,670
that is using it but this industry where

383
00:15:54,670 --> 00:15:56,140
there's a lot of companies that support

384
00:15:56,140 --> 00:15:58,839
this form factor and then it can you

385
00:15:58,839 --> 00:16:00,430
know buy it from any of these companies

386
00:16:00,430 --> 00:16:05,260
actually so I won't go into each

387
00:16:05,260 --> 00:16:07,209
individual detail but pretty much like

388
00:16:07,209 --> 00:16:08,470
says since the NIC is going to be the

389
00:16:08,470 --> 00:16:10,360
heart of connectivity into the system

390
00:16:10,360 --> 00:16:13,089
and it can impact all four servers plus

391
00:16:13,089 --> 00:16:16,510
BMC it's very important for us to

392
00:16:16,510 --> 00:16:18,640
monitor it continuously if something

393
00:16:18,640 --> 00:16:20,050
goes wrong in the snick it's going to

394
00:16:20,050 --> 00:16:22,630
impact all the four servers so as will

395
00:16:22,630 --> 00:16:25,270
last like four servers in the fleet so

396
00:16:25,270 --> 00:16:26,709
we would like to monitor it like

397
00:16:26,709 --> 00:16:29,470
temperature and then control and also

398
00:16:29,470 --> 00:16:31,270
update the firmware if some corruption

399
00:16:31,270 --> 00:16:37,410
happens and then inventory etcetera and

400
00:16:37,410 --> 00:16:40,150
thanks to the DMT F so we don't need to

401
00:16:40,150 --> 00:16:42,070
invent the protocols to talk between the

402
00:16:42,070 --> 00:16:46,420
BMC and Nick Nick is kind of made by so

403
00:16:46,420 --> 00:16:48,100
many vendors actually so it's better to

404
00:16:48,100 --> 00:16:50,050
kind of have standards so in this case D

405
00:16:50,050 --> 00:16:52,570
MDF came up with the PM CI standard that

406
00:16:52,570 --> 00:16:55,180
has multiple protocols that allows us to

407
00:16:55,180 --> 00:16:57,520
kind of monitor it update the form where

408
00:16:57,520 --> 00:16:59,800
all these protocols are well understood

409
00:16:59,800 --> 00:17:02,560
by the industry so it's easy for BMC to

410
00:17:02,560 --> 00:17:08,109
kind of adapt to this so with that I

411
00:17:08,109 --> 00:17:10,510
think this is a use case for BMC s and

412
00:17:10,510 --> 00:17:11,349
why we need it

413
00:17:11,349 --> 00:17:13,419
what kind of advanced use cases we can

414
00:17:13,419 --> 00:17:15,849
do with the advanced chips that we are

415
00:17:15,849 --> 00:17:19,449
getting for the BMC and now we jump into

416
00:17:19,449 --> 00:17:24,550
the software part of it the open BMC as

417
00:17:24,550 --> 00:17:26,589
there is little bit of history on this

418
00:17:26,589 --> 00:17:28,840
so as I mentioned before BMC has been

419
00:17:28,840 --> 00:17:31,210
there for 20 years and every company has

420
00:17:31,210 --> 00:17:33,340
their own BMC team developing VMC's are

421
00:17:33,340 --> 00:17:35,140
like used third-party companies to kind

422
00:17:35,140 --> 00:17:37,929
of buy the software just modify it but

423
00:17:37,929 --> 00:17:40,440
the four years back when we looked at

424
00:17:40,440 --> 00:17:43,929
BMC software for the timing sake I think

425
00:17:43,929 --> 00:17:46,540
the existing solution where we go to the

426
00:17:46,540 --> 00:17:48,010
third-party BMC and then get the

427
00:17:48,010 --> 00:17:49,840
solution was kind of time consuming so

428
00:17:49,840 --> 00:17:52,960
it was not suiting our bring up needs so

429
00:17:52,960 --> 00:17:54,820
we looked at let's say is there any open

430
00:17:54,820 --> 00:17:57,190
source alternative we thought it's like

431
00:17:57,190 --> 00:17:58,360
20 years I think there should be

432
00:17:58,360 --> 00:18:00,010
somebody might be having open source

433
00:18:00,010 --> 00:18:02,230
solution but guess what we couldn't find

434
00:18:02,230 --> 00:18:04,290
any single open source solution for this

435
00:18:04,290 --> 00:18:07,179
so we took an approach of why don't we

436
00:18:07,179 --> 00:18:10,590
do it ourself so we took the BMC vendors

437
00:18:10,590 --> 00:18:13,870
sdk and then used the act or linux big

438
00:18:13,870 --> 00:18:16,090
break as the build system and then try

439
00:18:16,090 --> 00:18:20,070
to create this BMC firmware open BMC

440
00:18:20,070 --> 00:18:22,390
independently like IBM at the same time

441
00:18:22,390 --> 00:18:24,070
they were trying to do the power 9

442
00:18:24,070 --> 00:18:26,169
servers and then they have entire form

443
00:18:26,169 --> 00:18:28,120
various open source except BMC

444
00:18:28,120 --> 00:18:30,490
so now they were looking at is there any

445
00:18:30,490 --> 00:18:32,800
solution so they found Facebook open BMC

446
00:18:32,800 --> 00:18:35,740
we worked together and then they started

447
00:18:35,740 --> 00:18:39,400
open BMC project this happened about two

448
00:18:39,400 --> 00:18:41,380
to three years in the last years so last

449
00:18:41,380 --> 00:18:42,610
year when we talked to other people like

450
00:18:42,610 --> 00:18:45,429
Intel Microsoft Google everybody has

451
00:18:45,429 --> 00:18:48,159
their own need for open BMC but

452
00:18:48,159 --> 00:18:49,780
everybody has their own efforts going in

453
00:18:49,780 --> 00:18:52,750
parallel so we sat together for about

454
00:18:52,750 --> 00:18:54,550
six months and then thought why don't we

455
00:18:54,550 --> 00:18:56,050
make it as a kind of community project

456
00:18:56,050 --> 00:18:58,270
instead of each of us kind of spending

457
00:18:58,270 --> 00:19:00,220
effort independently why don't we come

458
00:19:00,220 --> 00:19:02,590
together create one project under Linux

459
00:19:02,590 --> 00:19:05,470
Foundation and then work together so

460
00:19:05,470 --> 00:19:06,640
that's what happened in the last one

461
00:19:06,640 --> 00:19:08,980
year actually this March is when we

462
00:19:08,980 --> 00:19:10,800
created this Linux Foundation project

463
00:19:10,800 --> 00:19:18,040
with these partners so open BMC is like

464
00:19:18,040 --> 00:19:19,870
open source system management it's a

465
00:19:19,870 --> 00:19:22,270
Linux distribution and then it's a

466
00:19:22,270 --> 00:19:25,270
community project and one of the goal is

467
00:19:25,270 --> 00:19:27,220
to kind of have a software and tooling

468
00:19:27,220 --> 00:19:29,679
to kind of use C open BMC with a

469
00:19:29,679 --> 00:19:32,560
standard interfaces so like red fish is

470
00:19:32,560 --> 00:19:34,179
one of the emerging standard where we

471
00:19:34,179 --> 00:19:37,090
can you know always manage the systems

472
00:19:37,090 --> 00:19:40,179
seamlessly and the last bullet talks

473
00:19:40,179 --> 00:19:40,990
about heterogeneous

474
00:19:40,990 --> 00:19:42,940
so here heterogeneous means like type of

475
00:19:42,940 --> 00:19:45,220
systems so in our case we use like a

476
00:19:45,220 --> 00:19:47,530
network switches storage systems

477
00:19:47,530 --> 00:19:49,960
computer servers everybody uses open vm

478
00:19:49,960 --> 00:19:51,760
say it's nothing special

479
00:19:51,760 --> 00:19:54,610
specific to a type of system and other

480
00:19:54,610 --> 00:19:56,130
case like we have BMC

481
00:19:56,130 --> 00:19:58,500
which are supported the system-on-chip

482
00:19:58,500 --> 00:20:01,320
so one is a speed the other one is a

483
00:20:01,320 --> 00:20:02,970
keynote on they are also adding their

484
00:20:02,970 --> 00:20:05,039
stuff into the open BMC so now we had

485
00:20:05,039 --> 00:20:07,140
two types of BMC controllers supported

486
00:20:07,140 --> 00:20:09,960
in the open BMC and other heterogeneous

487
00:20:09,960 --> 00:20:12,270
parties like say x86 processors vs power

488
00:20:12,270 --> 00:20:12,690
nine

489
00:20:12,690 --> 00:20:15,480
I think the IBM systems they use the

490
00:20:15,480 --> 00:20:17,820
power line systems and they are managed

491
00:20:17,820 --> 00:20:20,370
by open BMC whereas other companies use

492
00:20:20,370 --> 00:20:24,210
x86 and it's heterogeneous again so just

493
00:20:24,210 --> 00:20:26,429
want highlight the fact that open BMC

494
00:20:26,429 --> 00:20:27,870
can support any type of heterogeneous

495
00:20:27,870 --> 00:20:32,370
management from the development model

496
00:20:32,370 --> 00:20:34,110
point of view the left side is what we

497
00:20:34,110 --> 00:20:36,000
have been doing before so we have the

498
00:20:36,000 --> 00:20:38,400
hardware vendors like SP giving you the

499
00:20:38,400 --> 00:20:40,559
BMC chip or like other hardware snick

500
00:20:40,559 --> 00:20:42,600
and power supplies from other companies

501
00:20:42,600 --> 00:20:45,210
so they give the SDK and then we work

502
00:20:45,210 --> 00:20:47,400
with the third-party vendor and then odm

503
00:20:47,400 --> 00:20:50,580
and it's kind of flows through in a

504
00:20:50,580 --> 00:20:52,140
different ecosystem there is no real

505
00:20:52,140 --> 00:20:54,240
ecosystem in the in the previous case

506
00:20:54,240 --> 00:20:56,850
there is the open BMC we would like to

507
00:20:56,850 --> 00:20:58,620
create that kind of ecosystem where all

508
00:20:58,620 --> 00:21:00,480
the people come together like all the

509
00:21:00,480 --> 00:21:02,400
vendors like BMC vendors hardware

510
00:21:02,400 --> 00:21:07,440
vendors the audience and even x86 our

511
00:21:07,440 --> 00:21:08,970
powerline vendors coming together and

512
00:21:08,970 --> 00:21:12,650
then be part of this open BMC system and

513
00:21:12,650 --> 00:21:15,539
support for all types of hardware that

514
00:21:15,539 --> 00:21:18,080
is possible

515
00:21:19,909 --> 00:21:22,080
ARCA digitally I just simplified this

516
00:21:22,080 --> 00:21:23,909
diagram but I think you can get a flavor

517
00:21:23,909 --> 00:21:26,159
of it so it just has the hardware at the

518
00:21:26,159 --> 00:21:28,020
bottom like we have BMC system-on-chip

519
00:21:28,020 --> 00:21:30,900
and then the you boot is a boot loader

520
00:21:30,900 --> 00:21:35,130
then octo Linux and the applications use

521
00:21:35,130 --> 00:21:37,530
the D bus as the IPC mechanisms so this

522
00:21:37,530 --> 00:21:39,480
gives was a kind of namespace where we

523
00:21:39,480 --> 00:21:40,980
have multiple applications talk to each

524
00:21:40,980 --> 00:21:43,950
other using one single bus and then

525
00:21:43,950 --> 00:21:48,440
there is no collision between namespaces

526
00:21:51,049 --> 00:21:53,280
so getting started is pretty easy

527
00:21:53,280 --> 00:21:55,860
actually there is a build setup is on

528
00:21:55,860 --> 00:21:56,340
the github

529
00:21:56,340 --> 00:21:58,799
fan page and there is continuous

530
00:21:58,799 --> 00:22:00,299
integration testing happening on for

531
00:22:00,299 --> 00:22:03,030
subset of reference platforms we are

532
00:22:03,030 --> 00:22:04,500
still working on a track to kind of add

533
00:22:04,500 --> 00:22:06,870
multiple platforms and you can

534
00:22:06,870 --> 00:22:08,610
contribute in the design specs or the

535
00:22:08,610 --> 00:22:09,430
code

536
00:22:09,430 --> 00:22:11,230
and Garrard is the place we use for code

537
00:22:11,230 --> 00:22:14,140
reviews and any bugs can be reported to

538
00:22:14,140 --> 00:22:19,090
the github so this is where it shows

539
00:22:19,090 --> 00:22:21,670
like the beauty of dr. Lennox where you

540
00:22:21,670 --> 00:22:23,470
have multiple repos we just have the

541
00:22:23,470 --> 00:22:24,820
kernel Depot and then acto and

542
00:22:24,820 --> 00:22:25,420
openembedded

543
00:22:25,420 --> 00:22:27,550
and are the Open Williams repos which is

544
00:22:27,550 --> 00:22:29,680
split into multiple repos based on the

545
00:22:29,680 --> 00:22:32,950
features and we use a simple bit vague

546
00:22:32,950 --> 00:22:35,470
file to put them together find to the

547
00:22:35,470 --> 00:22:38,140
actual target supported target and then

548
00:22:38,140 --> 00:22:43,600
create the binary so until like last

549
00:22:43,600 --> 00:22:46,090
couple of months back every company used

550
00:22:46,090 --> 00:22:47,860
to kind of add features based on their

551
00:22:47,860 --> 00:22:50,680
need so after we created this Linux

552
00:22:50,680 --> 00:22:52,060
Foundation project now we have a

553
00:22:52,060 --> 00:22:54,400
planning subgroup where we kind of come

554
00:22:54,400 --> 00:22:56,020
up with our first planning for the next

555
00:22:56,020 --> 00:22:59,020
February 19 so we kind of try to say

556
00:22:59,020 --> 00:23:01,420
like what all the features we can get by

557
00:23:01,420 --> 00:23:03,940
the timeframe and then we are working on

558
00:23:03,940 --> 00:23:05,470
the milestones like say what kind of

559
00:23:05,470 --> 00:23:07,570
code goes into like each milestone and

560
00:23:07,570 --> 00:23:09,340
track it so this becomes like a little

561
00:23:09,340 --> 00:23:11,830
bit more formal but with so many

562
00:23:11,830 --> 00:23:13,360
companies participating in the community

563
00:23:13,360 --> 00:23:15,250
I think it's one way we can get things

564
00:23:15,250 --> 00:23:17,530
moving faster and then reduce like

565
00:23:17,530 --> 00:23:18,940
multiple you know people working on the

566
00:23:18,940 --> 00:23:23,320
same thing I'm not going to go over all

567
00:23:23,320 --> 00:23:25,390
the features so we identified some of

568
00:23:25,390 --> 00:23:26,770
these features have the higher priority

569
00:23:26,770 --> 00:23:29,050
for the next release and some of them

570
00:23:29,050 --> 00:23:31,630
are like already in the github in the in

571
00:23:31,630 --> 00:23:33,220
the repo some of them are like in the

572
00:23:33,220 --> 00:23:34,840
design phase some of them are like

573
00:23:34,840 --> 00:23:36,820
almost getting done in the code review

574
00:23:36,820 --> 00:23:41,920
phase and this is a backlog so these

575
00:23:41,920 --> 00:23:43,630
features are like there's nobody to work

576
00:23:43,630 --> 00:23:46,240
on it there is no resources so we put

577
00:23:46,240 --> 00:23:48,040
them as backlog for the next year so it

578
00:23:48,040 --> 00:23:50,200
doesn't mean that somebody here who are

579
00:23:50,200 --> 00:23:52,810
interested in this feature can get

580
00:23:52,810 --> 00:23:57,190
started working on now so there's a

581
00:23:57,190 --> 00:23:59,530
hackathon upcoming intel is hosting our

582
00:23:59,530 --> 00:24:01,990
second hackathon there are details I

583
00:24:01,990 --> 00:24:03,730
just put it up in case if some of you

584
00:24:03,730 --> 00:24:10,150
are planning to attend that these are

585
00:24:10,150 --> 00:24:12,250
hackathon topics again it's not limited

586
00:24:12,250 --> 00:24:15,400
spread image like community driven so

587
00:24:15,400 --> 00:24:17,380
the mailing list has all the details

588
00:24:17,380 --> 00:24:19,540
like if you want to add a new hackathon

589
00:24:19,540 --> 00:24:23,129
topic I think it's very welcome

590
00:24:24,210 --> 00:24:26,920
and a bunch of for community counts like

591
00:24:26,920 --> 00:24:28,510
one is for the project the others are

592
00:24:28,510 --> 00:24:31,120
for a project specific our line focus

593
00:24:31,120 --> 00:24:33,970
area working on the planning or testing

594
00:24:33,970 --> 00:24:37,270
are on red fish so there is a sub groups

595
00:24:37,270 --> 00:24:38,950
working on each of these independent

596
00:24:38,950 --> 00:24:40,990
ones so they meet once weekly to kind of

597
00:24:40,990 --> 00:24:44,650
share their status and then plan for the

598
00:24:44,650 --> 00:24:48,940
next event there are much of additional

599
00:24:48,940 --> 00:24:51,580
resources here where is the source code

600
00:24:51,580 --> 00:24:53,530
where where does this continuous

601
00:24:53,530 --> 00:24:55,800
integration test happens code reviews

602
00:24:55,800 --> 00:24:59,500
contact information IRC channels the

603
00:24:59,500 --> 00:25:00,970
main web page that connects all of them

604
00:25:00,970 --> 00:25:05,170
together there's the last slide I would

605
00:25:05,170 --> 00:25:07,300
like to show how does open BMC fit into

606
00:25:07,300 --> 00:25:11,410
this ecosystem like OCP ecosystem so CP

607
00:25:11,410 --> 00:25:12,670
is where I think people are coming

608
00:25:12,670 --> 00:25:14,140
together and then sharing their hardware

609
00:25:14,140 --> 00:25:17,320
designs hardware designs and then the

610
00:25:17,320 --> 00:25:19,780
designs have today like when you look at

611
00:25:19,780 --> 00:25:21,640
the OCP design collateral you have the

612
00:25:21,640 --> 00:25:23,770
schematics specifications presentations

613
00:25:23,770 --> 00:25:26,650
you know even 3d CAD models which allows

614
00:25:26,650 --> 00:25:29,140
you to kind of build entire server or

615
00:25:29,140 --> 00:25:31,990
storage system that we open source but

616
00:25:31,990 --> 00:25:33,820
what it doesn't give today is like the

617
00:25:33,820 --> 00:25:35,710
firmware so without the firmware you

618
00:25:35,710 --> 00:25:37,600
cannot even buddha-like say there will

619
00:25:37,600 --> 00:25:38,920
be a get manic from where where did I

620
00:25:38,920 --> 00:25:41,680
get my BMC you really get a bias so that

621
00:25:41,680 --> 00:25:43,780
part is like kind of I know blanked

622
00:25:43,780 --> 00:25:45,610
today it's like nobody knows where to

623
00:25:45,610 --> 00:25:48,220
get it people can build the hardware but

624
00:25:48,220 --> 00:25:50,170
they don't have a way to get the

625
00:25:50,170 --> 00:25:52,390
software so this is some active area

626
00:25:52,390 --> 00:25:54,460
that OCP is looking into and we are

627
00:25:54,460 --> 00:25:55,840
trying to create kind of create a

628
00:25:55,840 --> 00:25:57,940
firmware as one of the design collateral

629
00:25:57,940 --> 00:26:01,210
so what it means is like it will be

630
00:26:01,210 --> 00:26:03,100
having a metadata to kind of either

631
00:26:03,100 --> 00:26:05,650
build firmware from sources or like

632
00:26:05,650 --> 00:26:07,750
download at least in cases where the

633
00:26:07,750 --> 00:26:09,790
open source is not available so the

634
00:26:09,790 --> 00:26:11,050
bunch of option on the lights where it

635
00:26:11,050 --> 00:26:12,610
said that I have shown like one is could

636
00:26:12,610 --> 00:26:14,620
be like a binary block FS peak would be

637
00:26:14,620 --> 00:26:16,810
a good good example where since we

638
00:26:16,810 --> 00:26:18,520
cannot open source the code itself today

639
00:26:18,520 --> 00:26:21,280
we can point to the FSB and say this is

640
00:26:21,280 --> 00:26:23,170
where you can download or it could be a

641
00:26:23,170 --> 00:26:25,360
bit of rebuild binary as a binary blob

642
00:26:25,360 --> 00:26:27,430
or the other option is like say if

643
00:26:27,430 --> 00:26:29,410
somebody doesn't want to open source but

644
00:26:29,410 --> 00:26:31,630
they still have the code in the

645
00:26:31,630 --> 00:26:34,000
companies specifically for we can still

646
00:26:34,000 --> 00:26:34,570
have em

647
00:26:34,570 --> 00:26:36,970
that goes there pick it up and build it

648
00:26:36,970 --> 00:26:38,860
for that source and then create a binary

649
00:26:38,860 --> 00:26:41,080
for that third option is which is

650
00:26:41,080 --> 00:26:42,730
preferred is kind of core boot Linux

651
00:26:42,730 --> 00:26:44,980
boot and open BMC kind of projects where

652
00:26:44,980 --> 00:26:47,919
you point to the platform and say use

653
00:26:47,919 --> 00:26:50,470
this make file to kind of you know get

654
00:26:50,470 --> 00:26:54,220
this repo build it for this platform the

655
00:26:54,220 --> 00:26:56,380
last option is like say OCP itself could

656
00:26:56,380 --> 00:26:58,870
host its own github repo specific to the

657
00:26:58,870 --> 00:27:00,370
projects are the features that are

658
00:27:00,370 --> 00:27:04,389
specific to OCP along which could not be

659
00:27:04,389 --> 00:27:06,279
many actually but there are like say LED

660
00:27:06,279 --> 00:27:09,129
profiles are OCP redfish profiles so

661
00:27:09,129 --> 00:27:10,269
they're very specific to us if we

662
00:27:10,269 --> 00:27:12,190
hardware so in that case I think it's

663
00:27:12,190 --> 00:27:14,860
better to kind of keep that under OCP

664
00:27:14,860 --> 00:27:16,509
because it might not be fitting into

665
00:27:16,509 --> 00:27:19,659
like general open source projects but

666
00:27:19,659 --> 00:27:21,549
again it does not prevent us to go only

667
00:27:21,549 --> 00:27:23,169
one route there could be a cases where

668
00:27:23,169 --> 00:27:25,269
we want to build a form where from a set

669
00:27:25,269 --> 00:27:27,279
of binary blobs plus some company

670
00:27:27,279 --> 00:27:29,379
specific source code plus some open

671
00:27:29,379 --> 00:27:31,029
source project so you can build all

672
00:27:31,029 --> 00:27:32,919
there all of them together but the idea

673
00:27:32,919 --> 00:27:35,019
is from somebody coming to the OCP they

674
00:27:35,019 --> 00:27:36,250
should be able to kind of build the form

675
00:27:36,250 --> 00:27:37,990
where they need find the firmware for

676
00:27:37,990 --> 00:27:43,720
the product with that and open up for

677
00:27:43,720 --> 00:27:44,789
questions

678
00:27:44,789 --> 00:27:46,690
thank you very much give round of

679
00:27:46,690 --> 00:27:50,340
applause for Seidel sorry

680
00:27:52,830 --> 00:27:56,190
Wow everyone finishes up on time today

681
00:27:56,190 --> 00:27:58,690
yeah we have time enough for questions a

682
00:27:58,690 --> 00:28:02,230
lot of time actually okay there are a

683
00:28:02,230 --> 00:28:06,790
lot of questions hey my name is Demi and

684
00:28:06,790 --> 00:28:08,680
I'm actually really glad to hear

685
00:28:08,680 --> 00:28:11,410
firsthand that the open BMC project is

686
00:28:11,410 --> 00:28:13,720
picking up the pace was going a bit slow

687
00:28:13,720 --> 00:28:15,310
so actually you're bringing some nice

688
00:28:15,310 --> 00:28:18,430
news and I have two questions the one is

689
00:28:18,430 --> 00:28:20,650
about how can we get involved and I

690
00:28:20,650 --> 00:28:22,780
heard from the guys outside from the

691
00:28:22,780 --> 00:28:25,000
booth that of course we can get some day

692
00:28:25,000 --> 00:28:27,370
Commission Facebook servers but that's

693
00:28:27,370 --> 00:28:28,180
not that easy

694
00:28:28,180 --> 00:28:30,870
so could you was a delete on the project

695
00:28:30,870 --> 00:28:35,440
say few words other plans actually to be

696
00:28:35,440 --> 00:28:37,300
able to access the hardware to get

697
00:28:37,300 --> 00:28:38,950
actual hardware that is compatible with

698
00:28:38,950 --> 00:28:40,810
what's in the wrapper so we can just get

699
00:28:40,810 --> 00:28:42,310
the hardware get the red one start

700
00:28:42,310 --> 00:28:44,350
cracked start hacking start developing

701
00:28:44,350 --> 00:28:46,420
because this is a really a blocker you

702
00:28:46,420 --> 00:28:47,830
know this is a barrier that we cannot

703
00:28:47,830 --> 00:28:50,320
jump over we to get the hardware that is

704
00:28:50,320 --> 00:28:52,780
currently supported and after that I've

705
00:28:52,780 --> 00:28:53,890
asked my second question about the

706
00:28:53,890 --> 00:28:56,890
hackathon okay yeah the first question

707
00:28:56,890 --> 00:28:58,960
that's a pretty good point actually so

708
00:28:58,960 --> 00:29:00,340
if somebody wants to kind of get

709
00:29:00,340 --> 00:29:02,020
hardware today I think we have this

710
00:29:02,020 --> 00:29:04,630
hardware at Facebook that is building it

711
00:29:04,630 --> 00:29:04,960
right

712
00:29:04,960 --> 00:29:07,570
yeah the user might yeah yeah but the

713
00:29:07,570 --> 00:29:09,360
hardware that we wanted to kind of

714
00:29:09,360 --> 00:29:11,980
that's supported in the open BMC is also

715
00:29:11,980 --> 00:29:13,840
like multiple companies making their own

716
00:29:13,840 --> 00:29:16,300
contributions like IBM has their own

717
00:29:16,300 --> 00:29:18,160
servers couple of them they support this

718
00:29:18,160 --> 00:29:20,590
open BMC but there is nothing like

719
00:29:20,590 --> 00:29:24,370
raspberry pi equivalent of course this

720
00:29:24,370 --> 00:29:27,130
is a business-class hardware but see we

721
00:29:27,130 --> 00:29:28,900
need a third so we're not Google we're

722
00:29:28,900 --> 00:29:30,550
not Facebook but you want other

723
00:29:30,550 --> 00:29:33,430
contributors right so if it's a Linux

724
00:29:33,430 --> 00:29:34,870
Foundation project and you want

725
00:29:34,870 --> 00:29:36,910
contributors you need to make a way for

726
00:29:36,910 --> 00:29:38,770
us to get the hardware so we can work

727
00:29:38,770 --> 00:29:42,660
there are two others to directly

728
00:29:50,170 --> 00:29:52,850
yeah we already got we already got one

729
00:29:52,850 --> 00:29:55,370
so we're looking yeah so we're looking

730
00:29:55,370 --> 00:29:57,770
for what can we get on the 886 site and

731
00:29:57,770 --> 00:30:00,890
that's a decommissioned Facebook but

732
00:30:00,890 --> 00:30:02,600
whatever what is coming but there are

733
00:30:02,600 --> 00:30:04,340
accessible two different routes we are

734
00:30:04,340 --> 00:30:06,170
looking at it the first one is like say

735
00:30:06,170 --> 00:30:08,000
Kiwi some kind of raspberry pie equal

736
00:30:08,000 --> 00:30:10,040
length for Oakland BMC so we are working

737
00:30:10,040 --> 00:30:12,500
on the report well is the company yeah

738
00:30:12,500 --> 00:30:15,170
duck has a evaluation board okay that

739
00:30:15,170 --> 00:30:17,810
has bmc's and a comm you port so you can

740
00:30:17,810 --> 00:30:19,370
plug in a comedy book you know right

741
00:30:19,370 --> 00:30:21,500
after shelf so that gives you kind of a

742
00:30:21,500 --> 00:30:24,170
virtual server kind of environment where

743
00:30:24,170 --> 00:30:25,460
you can exercise all the BMC

744
00:30:25,460 --> 00:30:27,770
functionalities so there will be

745
00:30:27,770 --> 00:30:29,420
accessible color that we can just order

746
00:30:29,420 --> 00:30:32,030
a few thousand dollars but we can order

747
00:30:32,030 --> 00:30:33,380
an action or receive it I think it will

748
00:30:33,380 --> 00:30:34,880
be pretty cheap actually I think the

749
00:30:34,880 --> 00:30:36,320
price point we are looking at for that

750
00:30:36,320 --> 00:30:38,450
particular okay because that's a barrier

751
00:30:38,450 --> 00:30:39,980
you know you said it's a Linux

752
00:30:39,980 --> 00:30:41,420
Foundation project we want others to

753
00:30:41,420 --> 00:30:44,960
participate but we need to have so

754
00:30:44,960 --> 00:30:46,940
that's one thought we are doing actually

755
00:30:46,940 --> 00:30:48,500
working with this kind of companies

756
00:30:48,500 --> 00:30:50,000
where they can have a valuation board

757
00:30:50,000 --> 00:30:51,890
that supports this open VM sounds great

758
00:30:51,890 --> 00:30:53,480
which is about 199 dollars is what I

759
00:30:53,480 --> 00:30:55,340
think price point we are thinking so

760
00:30:55,340 --> 00:30:57,560
that's one one aspect the second one is

761
00:30:57,560 --> 00:30:59,570
like say how do I get access to this OCP

762
00:30:59,570 --> 00:31:01,670
servers itself so we are working with

763
00:31:01,670 --> 00:31:03,740
the audience too and creating a OCP

764
00:31:03,740 --> 00:31:06,200
marketplace typically think they build

765
00:31:06,200 --> 00:31:08,300
servers for the big companies value like

766
00:31:08,300 --> 00:31:10,850
hundreds of thousands of servers and we

767
00:31:10,850 --> 00:31:13,580
are asking can they sell it to the OCP

768
00:31:13,580 --> 00:31:15,560
marketplace where individuals like say

769
00:31:15,560 --> 00:31:17,900
students and other enthusiasts can order

770
00:31:17,900 --> 00:31:20,030
like one two three systems people are

771
00:31:20,030 --> 00:31:21,830
not at volume but they want to kind of

772
00:31:21,830 --> 00:31:24,140
harder so that part is still being

773
00:31:24,140 --> 00:31:26,120
worked out in the CP but that's very

774
00:31:26,120 --> 00:31:28,160
active discussion right now is how do I

775
00:31:28,160 --> 00:31:30,500
get access to the hardware but not at

776
00:31:30,500 --> 00:31:32,270
volume not being a Facebook not being

777
00:31:32,270 --> 00:31:33,800
good developments kind of volume

778
00:31:33,800 --> 00:31:35,720
development you know Aaron the type of

779
00:31:35,720 --> 00:31:37,610
marketplace you want to watch for I

780
00:31:37,610 --> 00:31:38,810
think there is a lot of activity going

781
00:31:38,810 --> 00:31:41,540
on there that sounds great thanks thanks

782
00:31:41,540 --> 00:31:43,190
I'll definitely keep a close watch and

783
00:31:43,190 --> 00:31:44,900
my question about the hackathon this is

784
00:31:44,900 --> 00:31:46,340
a really short notice it sounds great

785
00:31:46,340 --> 00:31:48,050
few of the topics are very interesting

786
00:31:48,050 --> 00:31:50,450
but it's very short notice in its in the

787
00:31:50,450 --> 00:31:53,360
US so can you tell us maybe what's your

788
00:31:53,360 --> 00:31:54,290
estimate went

789
00:31:54,290 --> 00:31:56,300
get the open BMC hackathon in Europe

790
00:31:56,300 --> 00:31:58,700
maybe next year maybe this year I think

791
00:31:58,700 --> 00:32:00,650
if anybody's hosting it I think it would

792
00:32:00,650 --> 00:32:04,580
be I think it can be done yeah today the

793
00:32:04,580 --> 00:32:06,410
problem is with the hosting so there are

794
00:32:06,410 --> 00:32:09,170
companies like Facebook and we want to

795
00:32:09,170 --> 00:32:11,060
host it but you cannot host it due to

796
00:32:11,060 --> 00:32:12,650
lack of space I can tell you there's

797
00:32:12,650 --> 00:32:14,060
definitely an interest so please think

798
00:32:14,060 --> 00:32:16,970
about it I travel so Europe I think you

799
00:32:16,970 --> 00:32:18,320
want to innovate all the people in you

800
00:32:18,320 --> 00:32:20,150
yes the participation is another thing

801
00:32:20,150 --> 00:32:22,010
so we need to kind of locate it so today

802
00:32:22,010 --> 00:32:24,230
there are about companies in Australia

803
00:32:24,230 --> 00:32:27,860
and compares in Asia they are traveling

804
00:32:27,860 --> 00:32:29,300
to us to kind of attend this hackathon

805
00:32:29,300 --> 00:32:32,030
but it's pretty good suggestion to kind

806
00:32:32,030 --> 00:32:34,130
of say yeah if you have enough people in

807
00:32:34,130 --> 00:32:35,720
Europe why don't we do it next time in

808
00:32:35,720 --> 00:32:37,820
you know okay sounds great thanks man

809
00:32:37,820 --> 00:32:45,800
sure given that the BMC is so tightly

810
00:32:45,800 --> 00:32:47,480
integrated into so many bits of the

811
00:32:47,480 --> 00:32:50,360
system it really seems that this is

812
00:32:50,360 --> 00:32:52,730
where we need to put a lot of our trust

813
00:32:52,730 --> 00:32:55,100
and you know it needs to be involved in

814
00:32:55,100 --> 00:32:57,530
our Harbor to trust what's the open BMC

815
00:32:57,530 --> 00:33:01,220
story for TPM or other root of trust

816
00:33:01,220 --> 00:33:04,190
integration and attestation that's a

817
00:33:04,190 --> 00:33:07,940
good question so we spend a lot of time

818
00:33:07,940 --> 00:33:10,250
almost I would say two years on making

819
00:33:10,250 --> 00:33:13,210
sure open BMC itself is verified boot

820
00:33:13,210 --> 00:33:16,040
because it needs a lot of hardware

821
00:33:16,040 --> 00:33:18,710
changes so within Facebook open CP

822
00:33:18,710 --> 00:33:20,960
hardware we added execute to kind of

823
00:33:20,960 --> 00:33:24,020
have the TPM and DL spy flash with

824
00:33:24,020 --> 00:33:26,390
read-only so to enable the verified boot

825
00:33:26,390 --> 00:33:29,330
on the open BMC itself but again we are

826
00:33:29,330 --> 00:33:31,340
not authenticating the BIOS firmware

827
00:33:31,340 --> 00:33:33,410
but it's only within the BMC itself and

828
00:33:33,410 --> 00:33:35,390
it boots up are we right I mean is

829
00:33:35,390 --> 00:33:37,760
anybody hacked into the BMC so we have a

830
00:33:37,760 --> 00:33:39,710
kind of mechanism to kind of ensure that

831
00:33:39,710 --> 00:33:41,180
we are booting the right form where it's

832
00:33:41,180 --> 00:33:42,890
signed for wear but again this is only

833
00:33:42,890 --> 00:33:45,080
specific to Facebook hardware now

834
00:33:45,080 --> 00:33:47,690
company are talking about open BMC with

835
00:33:47,690 --> 00:33:50,690
IBM Google and Intel Microsoft

836
00:33:50,690 --> 00:33:52,070
everybody has their own individual

837
00:33:52,070 --> 00:33:55,400
solutions for the secure boot part of it

838
00:33:55,400 --> 00:33:58,250
so example is like Microsoft is looking

839
00:33:58,250 --> 00:34:04,320
more towards project what is it sorry

840
00:34:04,320 --> 00:34:06,390
serve with us yeah they're looking at

841
00:34:06,390 --> 00:34:08,219
that Google has tightened to kind of

842
00:34:08,219 --> 00:34:11,010
make sure that third-party chip is going

843
00:34:11,010 --> 00:34:14,730
to do the security check before even it

844
00:34:14,730 --> 00:34:15,239
boots

845
00:34:15,239 --> 00:34:18,540
BMC are like BMC route BMC boot actually

846
00:34:18,540 --> 00:34:21,120
so in our case I think the solution we

847
00:34:21,120 --> 00:34:23,130
took is like a verified boot so we have

848
00:34:23,130 --> 00:34:25,469
a read-only flash which has that golden

849
00:34:25,469 --> 00:34:28,530
image which is not reachable and it

850
00:34:28,530 --> 00:34:29,880
authenticates the read rates from where

851
00:34:29,880 --> 00:34:32,340
partition and then boots there if it

852
00:34:32,340 --> 00:34:33,860
fails it will just fall back to the

853
00:34:33,860 --> 00:34:36,480
read-only all the go to the image so

854
00:34:36,480 --> 00:34:37,710
that's the kind of security that we have

855
00:34:37,710 --> 00:34:40,860
today so open BMC itself is we have that

856
00:34:40,860 --> 00:34:44,159
is a next topic in our team to kind of

857
00:34:44,159 --> 00:34:45,780
discuss and see how we can have one

858
00:34:45,780 --> 00:34:47,760
unified mechanism across all the

859
00:34:47,760 --> 00:34:49,590
platforms that's going to take a lot of

860
00:34:49,590 --> 00:34:50,730
challenges because of the hardware

861
00:34:50,730 --> 00:34:53,820
dependency with the TPM and hardware spy

862
00:34:53,820 --> 00:34:56,040
flash layout so it's going to be

863
00:34:56,040 --> 00:35:00,410
challenging for us but there is good

864
00:35:00,410 --> 00:35:05,160
discussion among the community question

865
00:35:05,160 --> 00:35:16,280
yeah ok there are more questions thanks

866
00:35:16,280 --> 00:35:19,470
so you just talked about the boot time

867
00:35:19,470 --> 00:35:21,360
security and ensuring the Buddha Rajyam

868
00:35:21,360 --> 00:35:23,040
we're of course part of the problem with

869
00:35:23,040 --> 00:35:26,700
the BMC is it has a very wide attack

870
00:35:26,700 --> 00:35:28,950
surface because it is connected to the

871
00:35:28,950 --> 00:35:33,510
host with no PCI and PC USB i2c you name

872
00:35:33,510 --> 00:35:34,800
it and every single of this thing is an

873
00:35:34,800 --> 00:35:37,620
attack surface you and I both know that

874
00:35:37,620 --> 00:35:43,800
there are issues in the hard way the nor

875
00:35:43,800 --> 00:35:44,960
long run

876
00:35:44,960 --> 00:35:50,330
do we have started thinking about how we

877
00:35:50,330 --> 00:35:54,000
more practically ensure that we have a

878
00:35:54,000 --> 00:35:57,960
way to verify test harden all those

879
00:35:57,960 --> 00:36:00,510
various surfaces into the BMC including

880
00:36:00,510 --> 00:36:05,880
USB gadget stack Linux etc etc I think

881
00:36:05,880 --> 00:36:07,630
security is

882
00:36:07,630 --> 00:36:09,790
I would say one of the highest priority

883
00:36:09,790 --> 00:36:12,280
but always gets low priority when it

884
00:36:12,280 --> 00:36:14,350
comes to implementation because after

885
00:36:14,350 --> 00:36:16,540
details of how each hardware is laid out

886
00:36:16,540 --> 00:36:19,300
like as you mentioned like PCIe is one

887
00:36:19,300 --> 00:36:22,570
of the easiest way to get into BMC and

888
00:36:22,570 --> 00:36:24,670
then therapod get the data from the host

889
00:36:24,670 --> 00:36:26,920
so in our cases we just disabled that

890
00:36:26,920 --> 00:36:28,510
part actually so PCIe we didn't

891
00:36:28,510 --> 00:36:30,310
connected it to the host at all

892
00:36:30,310 --> 00:36:32,020
but that USB for example is a gadget

893
00:36:32,020 --> 00:36:34,300
device so we communicate with USB and

894
00:36:34,300 --> 00:36:36,430
you know with your host I need to make

895
00:36:36,430 --> 00:36:37,960
sure there is no exploitable buffer

896
00:36:37,960 --> 00:36:39,670
overflow in the USB get your drivers

897
00:36:39,670 --> 00:36:43,060
yeah yeah yeah so definitely this is one

898
00:36:43,060 --> 00:36:45,160
sub workgroup actually within the open

899
00:36:45,160 --> 00:36:47,440
BMC team that is kind of looking at all

900
00:36:47,440 --> 00:36:49,210
these subsurface attacks and that way we

901
00:36:49,210 --> 00:36:51,460
can make it more tighten up security

902
00:36:51,460 --> 00:36:53,500
actually I just to give example of a

903
00:36:53,500 --> 00:36:55,180
verified boot and secure that just one

904
00:36:55,180 --> 00:36:57,130
part of it but each of the applications

905
00:36:57,130 --> 00:37:01,450
have to be more secure have somewhat

906
00:37:01,450 --> 00:37:04,450
segue question I've been wondering for a

907
00:37:04,450 --> 00:37:06,400
long time I know if anybody's here the

908
00:37:06,400 --> 00:37:08,860
answer is there any reason why NCS is

909
00:37:08,860 --> 00:37:12,160
limited to our MI 100 megabit and why we

910
00:37:12,160 --> 00:37:14,040
couldn't just spin the rev of the spec

911
00:37:14,040 --> 00:37:18,130
simply allowing our GMI gigabit to be

912
00:37:18,130 --> 00:37:19,990
used because we've had all sort of

913
00:37:19,990 --> 00:37:21,490
interesting issues with flow control

914
00:37:21,490 --> 00:37:23,140
when your management network running at

915
00:37:23,140 --> 00:37:26,890
yeah bit and and you're in CSI run at

916
00:37:26,890 --> 00:37:29,080
100 megabit and thing can go very very

917
00:37:29,080 --> 00:37:33,580
wrong on a large scale but sorry maybe I

918
00:37:33,580 --> 00:37:35,650
didn't understand the question is it in

919
00:37:35,650 --> 00:37:39,070
CSI why it is not decide by spec by spec

920
00:37:39,070 --> 00:37:42,190
can only be implemented on our MRI at

921
00:37:42,190 --> 00:37:44,800
100 megabit right is there any reason

922
00:37:44,800 --> 00:37:47,410
why the spec can't be amended so we can

923
00:37:47,410 --> 00:37:49,870
authorize running it at a gigabit on our

924
00:37:49,870 --> 00:37:53,410
GM III I've been wondering for a long

925
00:37:53,410 --> 00:37:55,030
time because we have a lot of problems

926
00:37:55,030 --> 00:37:57,850
caused by that speed difference no

927
00:37:57,850 --> 00:38:00,700
buffer bloat in the chip flow control

928
00:38:00,700 --> 00:38:02,560
problems post frame going all over the

929
00:38:02,560 --> 00:38:05,350
place is a try cetera I think that's a

930
00:38:05,350 --> 00:38:09,160
good question for probably the MTF the

931
00:38:09,160 --> 00:38:10,960
MTF on the spec yeah d MTF is the one

932
00:38:10,960 --> 00:38:12,760
that wrote the spec and then if there is

933
00:38:12,760 --> 00:38:14,260
a good use case for this our GM III

934
00:38:14,260 --> 00:38:16,300
think it's easy to bring it up and see

935
00:38:16,300 --> 00:38:17,400
like phase

936
00:38:17,400 --> 00:38:20,290
yeah but I myself don't have the answer

937
00:38:20,290 --> 00:38:22,500
for that

938
00:38:29,260 --> 00:38:33,190
for experimenting with open BMC on x86

939
00:38:33,190 --> 00:38:36,130
platform up to engineering ported it on

940
00:38:36,130 --> 00:38:41,620
the Asus kg p ue d 16 but the passionate

941
00:38:41,620 --> 00:38:45,760
upstream so I hope this helps the more

942
00:38:45,760 --> 00:38:47,980
information can be found on the old

943
00:38:47,980 --> 00:38:49,570
coreboot wiki code

944
00:38:49,570 --> 00:38:56,170
okay out of the handful of vendors that

945
00:38:56,170 --> 00:38:59,800
have been kept repeating here I would

946
00:38:59,800 --> 00:39:01,990
classify IBM as the only real server

947
00:39:01,990 --> 00:39:04,300
vendor in that list so is there any

948
00:39:04,300 --> 00:39:07,240
activities ongoing to get some of the

949
00:39:07,240 --> 00:39:10,030
traditional firmware vendors and in

950
00:39:10,030 --> 00:39:12,520
particular also server OMS to sign up

951
00:39:12,520 --> 00:39:17,530
for open BMC it's a great question how

952
00:39:17,530 --> 00:39:19,150
do we make sure this ecosystem is more

953
00:39:19,150 --> 00:39:21,160
healthy and invite a lot of partners

954
00:39:21,160 --> 00:39:23,440
into this and then there is our

955
00:39:23,440 --> 00:39:25,720
philosophy is like today we started from

956
00:39:25,720 --> 00:39:27,940
the service and users point of view like

957
00:39:27,940 --> 00:39:29,050
Michael you can see the companies

958
00:39:29,050 --> 00:39:33,820
Microsoft Intel Google IBM so we are ala

959
00:39:33,820 --> 00:39:35,290
kind of kind of getting together to see

960
00:39:35,290 --> 00:39:37,480
there is a need for having open-source

961
00:39:37,480 --> 00:39:39,940
version for this BMC software but at the

962
00:39:39,940 --> 00:39:41,470
same time that company's third-party

963
00:39:41,470 --> 00:39:43,780
companies they are participating then

964
00:39:43,780 --> 00:39:45,850
companies I can name already is like say

965
00:39:45,850 --> 00:39:48,640
the SP the company which sells EMC chips

966
00:39:48,640 --> 00:39:51,370
so they are involved in that Norton is

967
00:39:51,370 --> 00:39:53,140
another company EMC very involved in

968
00:39:53,140 --> 00:39:56,140
this Mellanox who supplies the switch

969
00:39:56,140 --> 00:39:59,050
did they are in this the other companies

970
00:39:59,050 --> 00:40:00,640
they are still evaluating actually but

971
00:40:00,640 --> 00:40:02,440
they're not Dell is another company that

972
00:40:02,440 --> 00:40:06,400
is part of open BMC HP is also yeah

973
00:40:06,400 --> 00:40:07,840
all the companies I think pretty much

974
00:40:07,840 --> 00:40:09,280
like say big companies they are there

975
00:40:09,280 --> 00:40:11,710
but how to make sure this is healthy

976
00:40:11,710 --> 00:40:13,540
going forward like say down the line

977
00:40:13,540 --> 00:40:15,370
like two years down the line do I see

978
00:40:15,370 --> 00:40:18,100
this as Linux for the kernel so I see

979
00:40:18,100 --> 00:40:19,990
this open BMC has one place where I can

980
00:40:19,990 --> 00:40:22,720
go download the source code build my

981
00:40:22,720 --> 00:40:24,970
firmware that's the vision for the

982
00:40:24,970 --> 00:40:28,360
entire team but to answer a question

983
00:40:28,360 --> 00:40:30,160
like the third party the vendors OD Em's

984
00:40:30,160 --> 00:40:31,990
they will join when there is a good

985
00:40:31,990 --> 00:40:33,550
moment I'm like a lot of people keep

986
00:40:33,550 --> 00:40:34,660
asking about open beams

987
00:40:34,660 --> 00:40:37,569
on even regular servers that's when the

988
00:40:37,569 --> 00:40:40,000
OEMs and audience will kind of jump in

989
00:40:40,000 --> 00:40:41,259
and then probably they can make it

990
00:40:41,259 --> 00:40:43,329
happen but again at this time we are

991
00:40:43,329 --> 00:40:45,430
like as you can see the lot of pending

992
00:40:45,430 --> 00:40:46,900
features that we are still working on

993
00:40:46,900 --> 00:40:49,390
this is a great time to kind of have om

994
00:40:49,390 --> 00:40:53,129
sodium's come together and then help us

995
00:40:54,420 --> 00:40:59,140
also specially respond to you top a

996
00:40:59,140 --> 00:41:00,819
couple of facts and I'll let you put the

997
00:41:00,819 --> 00:41:04,930
link between them one is historically

998
00:41:04,930 --> 00:41:06,730
open-source I've tended to create

999
00:41:06,730 --> 00:41:09,009
infrastructure and then a buddy realized

1000
00:41:09,009 --> 00:41:10,480
that they value ideas on what they put

1001
00:41:10,480 --> 00:41:12,369
on top and the digital proprietor

1002
00:41:12,369 --> 00:41:14,529
infrastructure and use it and then do

1003
00:41:14,529 --> 00:41:18,069
the value add on top second fact is the

1004
00:41:18,069 --> 00:41:21,400
traditional BMC software vendors are

1005
00:41:21,400 --> 00:41:23,859
looking at open BMC very very very

1006
00:41:23,859 --> 00:41:28,779
closely things may or may not happen but

1007
00:41:28,779 --> 00:41:30,880
the point is it is quite possible that

1008
00:41:30,880 --> 00:41:33,220
some people will have enough reinventing

1009
00:41:33,220 --> 00:41:35,680
the wheel and doing GPL validations with

1010
00:41:35,680 --> 00:41:38,200
their own BMC implementations and start

1011
00:41:38,200 --> 00:41:41,410
building on top of open BMC using it as

1012
00:41:41,410 --> 00:41:42,759
in fact I don't know if it will happen

1013
00:41:42,759 --> 00:41:45,069
but it will be a logical step and it

1014
00:41:45,069 --> 00:41:46,539
will correspond to how things that

1015
00:41:46,539 --> 00:41:48,880
happen in other markets and we know that

1016
00:41:48,880 --> 00:41:50,140
they are looking and asking questions

1017
00:41:50,140 --> 00:41:54,910
and playing with it so could either of

1018
00:41:54,910 --> 00:41:56,710
the two of you comment on what the

1019
00:41:56,710 --> 00:41:58,420
current status is with regards to the

1020
00:41:58,420 --> 00:42:00,519
model that was shown on slide 29

1021
00:42:00,519 --> 00:42:03,058
uh-huh

1022
00:42:09,470 --> 00:42:11,690
so that was like this transformation

1023
00:42:11,690 --> 00:42:13,910
about with a third-party firmware vendor

1024
00:42:13,910 --> 00:42:16,160
to having the single repository that was

1025
00:42:16,160 --> 00:42:18,740
one too far yes with with the ODMs

1026
00:42:18,740 --> 00:42:20,750
contributing to to all that is that

1027
00:42:20,750 --> 00:42:23,000
already happening today or is that still

1028
00:42:23,000 --> 00:42:25,040
a wish for going this is in the flight

1029
00:42:25,040 --> 00:42:26,960
today so the audience they have shown

1030
00:42:26,960 --> 00:42:29,569
interest there is only 100 DM so that

1031
00:42:29,569 --> 00:42:31,400
would create speed in that case now

1032
00:42:31,400 --> 00:42:35,150
SPD's like BMC stock vendor but we are

1033
00:42:35,150 --> 00:42:36,829
talking about ODMs like who build the

1034
00:42:36,829 --> 00:42:39,079
system's okay so one of the odium is

1035
00:42:39,079 --> 00:42:42,349
signed up for this open BMC so frankly

1036
00:42:42,349 --> 00:42:44,750
when you are knows on the driving trying

1037
00:42:44,750 --> 00:42:46,280
to get your server out of the door it's

1038
00:42:46,280 --> 00:42:51,740
difficult they they have even as IBM we

1039
00:42:51,740 --> 00:42:54,380
have our own practical tree you use to

1040
00:42:54,380 --> 00:42:56,839
to do or our own bills

1041
00:42:56,839 --> 00:42:59,869
it's a evolutionary process we want

1042
00:42:59,869 --> 00:43:02,359
everybody wants to get there and it's

1043
00:43:02,359 --> 00:43:04,180
gonna take time maybe a couple of

1044
00:43:04,180 --> 00:43:08,170
iterations of our systems we don't know

1045
00:43:08,170 --> 00:43:11,060
to get there also because we have a lot

1046
00:43:11,060 --> 00:43:13,339
of legacy stuff running an op previous

1047
00:43:13,339 --> 00:43:15,950
tax that we want to move over but it's

1048
00:43:15,950 --> 00:43:18,349
it's gonna take another time when it

1049
00:43:18,349 --> 00:43:20,300
comes with the BMC hundred vendors who

1050
00:43:20,300 --> 00:43:23,050
is a really simple go upstream so

1051
00:43:23,050 --> 00:43:25,220
because it's very difficult we try to

1052
00:43:25,220 --> 00:43:27,410
teach them Joel and Andrew went to

1053
00:43:27,410 --> 00:43:29,690
Taiwan to talk to a speed a speed a

1054
00:43:29,690 --> 00:43:31,910
couple of times try to teach them to

1055
00:43:31,910 --> 00:43:33,890
extreme the stuff we rewrote half of the

1056
00:43:33,890 --> 00:43:39,230
drivers and put them upstream the it's a

1057
00:43:39,230 --> 00:43:42,140
classical story of arms SOC vendors

1058
00:43:42,140 --> 00:43:44,260
there is nothing new Under the Sun here

1059
00:43:44,260 --> 00:43:47,690
and again it takes time but we are

1060
00:43:47,690 --> 00:43:49,819
getting there and a new version is

1061
00:43:49,819 --> 00:43:52,640
starting to a swab from the stuff so I

1062
00:43:52,640 --> 00:43:56,270
think we are in the middle of that

1063
00:43:56,270 --> 00:43:59,900
process yeah especially previously a

1064
00:43:59,900 --> 00:44:02,349
speed used to kind of give us DK and

1065
00:44:02,349 --> 00:44:06,010
that's it a debug a lot actually

1066
00:44:06,010 --> 00:44:09,349
so now I think what our ask is to for

1067
00:44:09,349 --> 00:44:10,849
the next chip they should directly

1068
00:44:10,849 --> 00:44:11,960
contribute to the Linux

1069
00:44:11,960 --> 00:44:14,450
instead of giving us a SDK so the driver

1070
00:44:14,450 --> 00:44:16,040
part of it will be kind of directly

1071
00:44:16,040 --> 00:44:18,260
contributed to the open source kernel so

1072
00:44:18,260 --> 00:44:19,849
that way the quality of the drivers goes

1073
00:44:19,849 --> 00:44:20,770
up and then

1074
00:44:20,770 --> 00:44:23,170
goes through a lot of iterations we can

1075
00:44:23,170 --> 00:44:24,850
reuse the code so right now what is

1076
00:44:24,850 --> 00:44:26,980
happening is everybody gets these SDKs

1077
00:44:26,980 --> 00:44:28,990
all the companies they debug

1078
00:44:28,990 --> 00:44:30,880
independently you know I have the same

1079
00:44:30,880 --> 00:44:32,620
issue and then there is another engineer

1080
00:44:32,620 --> 00:44:33,760
working in a different company and the

1081
00:44:33,760 --> 00:44:35,620
same exact same problem another three

1082
00:44:35,620 --> 00:44:37,270
weeks is gone just for the same problem

1083
00:44:37,270 --> 00:44:39,370
so now with the open BMC the idea is as

1084
00:44:39,370 --> 00:44:42,820
we use you share your learnings you get

1085
00:44:42,820 --> 00:44:46,570
the quality out okay thank you

1086
00:44:46,570 --> 00:44:48,610
unfortunately that's it for questions

1087
00:44:48,610 --> 00:44:53,190
give a round of applause for deciding

1088
00:44:53,380 --> 00:44:54,150
[Applause]

1089
00:44:54,150 --> 00:45:02,699
[Music]

