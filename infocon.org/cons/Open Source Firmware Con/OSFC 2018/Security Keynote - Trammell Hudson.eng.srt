1
00:00:00,000 --> 00:00:04,520
[Music]

2
00:00:04,520 --> 00:00:07,680
I'm really excited to be here today to

3
00:00:07,680 --> 00:00:10,080
talk with so many other people who are

4
00:00:10,080 --> 00:00:12,240
interested in open source firmware and

5
00:00:12,240 --> 00:00:15,210
security because this is a hugely

6
00:00:15,210 --> 00:00:18,740
important topic and yeah I think the

7
00:00:18,740 --> 00:00:24,000
what we don't if we have Bluetooth there

8
00:00:24,000 --> 00:00:27,330
we go in order to have security we need

9
00:00:27,330 --> 00:00:30,570
open firmware that if we can't read and

10
00:00:30,570 --> 00:00:33,870
audit and build our own versions of our

11
00:00:33,870 --> 00:00:37,590
firmware we can't have security I also

12
00:00:37,590 --> 00:00:40,739
think open firmware will eventually win

13
00:00:40,739 --> 00:00:43,710
if we can install our own firmware we

14
00:00:43,710 --> 00:00:46,559
can out innovate close source systems

15
00:00:46,559 --> 00:00:49,110
and we can make things that customers

16
00:00:49,110 --> 00:00:51,449
and users will want to use and want to

17
00:00:51,449 --> 00:00:55,469
install in a lot of ways this is

18
00:00:55,469 --> 00:00:58,559
analogous to the UNIX Wars of the 80s

19
00:00:58,559 --> 00:01:01,800
and 90s there used to be so many unix's

20
00:01:01,800 --> 00:01:05,549
out there that were closed source and

21
00:01:05,549 --> 00:01:08,700
proprietary but there aren't very many

22
00:01:08,700 --> 00:01:13,710
of them left the Linux and other open

23
00:01:13,710 --> 00:01:17,400
firmware which in the open unix's were

24
00:01:17,400 --> 00:01:19,530
able to be customized and tailored to

25
00:01:19,530 --> 00:01:22,500
what people needed and that became what

26
00:01:22,500 --> 00:01:24,570
they demanded on their servers and as a

27
00:01:24,570 --> 00:01:26,850
result it became the dominant server

28
00:01:26,850 --> 00:01:28,020
operating system

29
00:01:28,020 --> 00:01:32,130
I think this same dynamic is in play in

30
00:01:32,130 --> 00:01:34,259
our firmware as well

31
00:01:34,259 --> 00:01:37,470
as I mentioned in the Linux boot talk at

32
00:01:37,470 --> 00:01:42,060
CCC earlier this year that we can use

33
00:01:42,060 --> 00:01:44,880
Linux and its device drivers to build

34
00:01:44,880 --> 00:01:47,520
more secure more flexible and more

35
00:01:47,520 --> 00:01:51,450
resilient firmware and that in turn

36
00:01:51,450 --> 00:01:54,770
allows us to have more innovation and

37
00:01:54,770 --> 00:01:57,930
faster iteration and add-on and

38
00:01:57,930 --> 00:02:04,439
hopefully better adoption but as when

39
00:02:04,439 --> 00:02:06,210
window schneider said in her hack in the

40
00:02:06,210 --> 00:02:09,628
box talk last year no matter how much we

41
00:02:09,628 --> 00:02:12,870
try to reduce our risk there are

42
00:02:12,870 --> 00:02:13,650
dependencies

43
00:02:13,650 --> 00:02:16,709
we cannot get rid of and nobody does

44
00:02:16,709 --> 00:02:18,780
this alone we are all in this together

45
00:02:18,780 --> 00:02:22,409
and we depend on our hardware vendors

46
00:02:22,409 --> 00:02:26,310
and our OEMs to make it possible for us

47
00:02:26,310 --> 00:02:30,689
to build these open systems and there's

48
00:02:30,689 --> 00:02:32,579
a lot of good news on that front

49
00:02:32,579 --> 00:02:34,950
you know these vendors are really

50
00:02:34,950 --> 00:02:36,840
starting to engage with this open source

51
00:02:36,840 --> 00:02:39,510
community companies like Intel are

52
00:02:39,510 --> 00:02:55,290
sending their people to you yeah I'm so

53
00:02:55,290 --> 00:02:57,690
glad that Vincent and so many people

54
00:02:57,690 --> 00:02:59,370
from Intel are here at this conference

55
00:02:59,370 --> 00:03:01,980
to engage with the community and work

56
00:03:01,980 --> 00:03:06,079
with us on building open source firmware

57
00:03:06,079 --> 00:03:10,019
because they're a key partner in in this

58
00:03:10,019 --> 00:03:14,870
with us they've also been responding to

59
00:03:14,870 --> 00:03:17,810
community pressure as Vincent mentioned

60
00:03:17,810 --> 00:03:20,930
they've relicensed a lot of things the

61
00:03:20,930 --> 00:03:24,120
microcode updates had a license that was

62
00:03:24,120 --> 00:03:27,510
incompatible with free software so they

63
00:03:27,510 --> 00:03:29,370
rolled out a change and when they've

64
00:03:29,370 --> 00:03:30,959
rolled out that license change they also

65
00:03:30,959 --> 00:03:34,079
updated the FSP and again we really need

66
00:03:34,079 --> 00:03:35,970
to thank Vincent and his team for

67
00:03:35,970 --> 00:03:39,540
pushing this through because this is the

68
00:03:39,540 --> 00:03:42,510
new FSP license it was ten pages of

69
00:03:42,510 --> 00:03:45,900
legalese and now it's three bullet

70
00:03:45,900 --> 00:03:49,199
points of Debian approved language that

71
00:03:49,199 --> 00:03:52,949
allows us to bundle the FSP binaries

72
00:03:52,949 --> 00:03:56,729
into our free software and redistribute

73
00:03:56,729 --> 00:03:59,959
them as part of products as part of

74
00:03:59,959 --> 00:04:03,000
images as things so that we can continue

75
00:04:03,000 --> 00:04:07,849
to have to build our open firmware and

76
00:04:07,849 --> 00:04:10,139
you know as part of Intel's engagement

77
00:04:10,139 --> 00:04:12,959
they have talked about using FSP here

78
00:04:12,959 --> 00:04:15,750
they also have a workshop later this

79
00:04:15,750 --> 00:04:18,779
week on built in open source on top of

80
00:04:18,779 --> 00:04:21,870
UEFI and again Intel thank you so much

81
00:04:21,870 --> 00:04:25,580
for coming to this conference

82
00:04:25,910 --> 00:04:29,380
other cpu vendors are also engaging IBM

83
00:04:29,380 --> 00:04:31,850
listened to the community and released

84
00:04:31,850 --> 00:04:35,600
documentation on the power nine bring up

85
00:04:35,600 --> 00:04:40,450
which allows a lot of the firmware to be

86
00:04:40,450 --> 00:04:43,220
written an open source and they're using

87
00:04:43,220 --> 00:04:45,470
something called a petty boot which is a

88
00:04:45,470 --> 00:04:49,420
Linux kernel in the bootloader path to

89
00:04:49,420 --> 00:04:53,480
select what's going to run and that sort

90
00:04:53,480 --> 00:04:57,920
of capability is what we want all of our

91
00:04:57,920 --> 00:05:01,310
systems to have there will be a talk on

92
00:05:01,310 --> 00:05:04,640
petty boot here at the conference so I'm

93
00:05:04,640 --> 00:05:06,590
excited to to hear more about that

94
00:05:06,590 --> 00:05:09,260
because we share a lot of similar ideas

95
00:05:09,260 --> 00:05:13,850
and in Linux boot project the risk 5

96
00:05:13,850 --> 00:05:15,710
CPUs are also really exciting because

97
00:05:15,710 --> 00:05:18,710
this is a chance to have free Hardware

98
00:05:18,710 --> 00:05:21,770
along with our free firmware and the

99
00:05:21,770 --> 00:05:24,530
sci-fi company has released a linux

100
00:05:24,530 --> 00:05:27,800
capable SOC along with all the source

101
00:05:27,800 --> 00:05:30,410
for their boot loader they've also

102
00:05:30,410 --> 00:05:32,270
worked with their silicon vendors to be

103
00:05:32,270 --> 00:05:33,770
able to release a lot of the

104
00:05:33,770 --> 00:05:36,770
documentation and to for the memory

105
00:05:36,770 --> 00:05:38,390
controllers allowing them to have a blob

106
00:05:38,390 --> 00:05:42,350
free boot and this is really exciting

107
00:05:42,350 --> 00:05:44,750
and there are two talks on this topic

108
00:05:44,750 --> 00:05:47,570
later later this week one on the memory

109
00:05:47,570 --> 00:05:51,940
and one on using core boot with risk 5

110
00:05:51,940 --> 00:05:55,850
we also have larger consortiums starting

111
00:05:55,850 --> 00:05:58,130
to get involved the Linux Foundation has

112
00:05:58,130 --> 00:06:00,800
adopted Linux boot as has the Open

113
00:06:00,800 --> 00:06:06,230
Compute Project at the recent Open

114
00:06:06,230 --> 00:06:09,470
Compute summit they introduced the open

115
00:06:09,470 --> 00:06:11,450
system firmware project and Linux boot

116
00:06:11,450 --> 00:06:14,720
is a key part of making this open

117
00:06:14,720 --> 00:06:19,340
hardware also have open firmware we have

118
00:06:19,340 --> 00:06:22,040
two talks actually have a few more talks

119
00:06:22,040 --> 00:06:24,380
so on on Linux boot one immediately

120
00:06:24,380 --> 00:06:25,940
following this one and then another one

121
00:06:25,940 --> 00:06:30,230
about deploying it at at at Facebook and

122
00:06:30,230 --> 00:06:32,300
this is really exciting that open

123
00:06:32,300 --> 00:06:34,669
firmware is actually getting deployed in

124
00:06:34,669 --> 00:06:38,770
real world systems

125
00:06:39,140 --> 00:06:41,180
the other part that really excites me is

126
00:06:41,180 --> 00:06:42,920
that the BMC's are finally getting

127
00:06:42,920 --> 00:06:45,530
attention a few years ago

128
00:06:45,530 --> 00:06:47,480
BMC vendor told me they thought it

129
00:06:47,480 --> 00:06:49,850
wasn't sporting to go after BMC

130
00:06:49,850 --> 00:06:51,290
vulnerabilities because everybody knew

131
00:06:51,290 --> 00:06:55,030
they were insecure and that's really bad

132
00:06:55,030 --> 00:06:57,830
when you consider how tightly couple at

133
00:06:57,830 --> 00:07:00,050
the BMC is into everything in the system

134
00:07:00,050 --> 00:07:02,540
it has connections and to basically

135
00:07:02,540 --> 00:07:06,890
every security critical component there

136
00:07:06,890 --> 00:07:09,620
have there are projects to replace the

137
00:07:09,620 --> 00:07:13,670
close source affinity BMC firmware with

138
00:07:13,670 --> 00:07:16,280
open source and there are not one not

139
00:07:16,280 --> 00:07:19,430
two but three talks on doing that this

140
00:07:19,430 --> 00:07:22,250
week and this is really exciting that

141
00:07:22,250 --> 00:07:24,170
finally that piece is going to get it

142
00:07:24,170 --> 00:07:27,710
opened as well companies are also

143
00:07:27,710 --> 00:07:30,170
starting to look at how do we move our

144
00:07:30,170 --> 00:07:32,600
our roots of trust into hardware for

145
00:07:32,600 --> 00:07:35,360
more protection google has their Titan

146
00:07:35,360 --> 00:07:38,590
project my Microsoft has their service

147
00:07:38,590 --> 00:07:42,200
Apple has their t2 HP has SureStart and

148
00:07:42,200 --> 00:07:44,990
in the free firmware case pure isms

149
00:07:44,990 --> 00:07:48,500
working with nitro key to make Linux

150
00:07:48,500 --> 00:07:52,760
boot or heads root of trust Chromebooks

151
00:07:52,760 --> 00:07:54,620
have been a place that have been also

152
00:07:54,620 --> 00:07:56,600
innovating in in the roots of trust and

153
00:07:56,600 --> 00:07:58,400
there's a talk coming up later this

154
00:07:58,400 --> 00:08:03,290
afternoon about how the the root of

155
00:08:03,290 --> 00:08:06,860
trust is also used for for debugging and

156
00:08:06,860 --> 00:08:09,500
which is great for being able to develop

157
00:08:09,500 --> 00:08:15,620
your free firmware as someone who does a

158
00:08:15,620 --> 00:08:19,250
lot of vulnerability research I'm also

159
00:08:19,250 --> 00:08:21,110
really excited that hardware attacks are

160
00:08:21,110 --> 00:08:24,440
finally in scope that this means that if

161
00:08:24,440 --> 00:08:26,870
you have to you know hook something up

162
00:08:26,870 --> 00:08:29,260
to unused test points in a machine or

163
00:08:29,260 --> 00:08:31,690
like scan lime does go through and

164
00:08:31,690 --> 00:08:34,549
voltage glitch them vendors are finally

165
00:08:34,549 --> 00:08:38,079
paying attention to this sort of thing

166
00:08:38,140 --> 00:08:41,510
also old-fashioned attacks of rewriting

167
00:08:41,510 --> 00:08:45,800
different the host firmware are being

168
00:08:45,800 --> 00:08:47,270
dealt with by things like Intel boot

169
00:08:47,270 --> 00:08:51,620
guard which allows the the system to

170
00:08:51,620 --> 00:08:52,480
ensure that

171
00:08:52,480 --> 00:08:55,600
the firmware is unmodified before

172
00:08:55,600 --> 00:08:59,020
starting the CPU and I love the idea of

173
00:08:59,020 --> 00:09:02,470
being able to trust that only the

174
00:09:02,470 --> 00:09:04,950
desired firmware is going to be running

175
00:09:04,950 --> 00:09:09,400
but this moves us to the bad news that

176
00:09:09,400 --> 00:09:13,480
capability can be used by the vendors to

177
00:09:13,480 --> 00:09:15,520
lock down the machines and prevent us

178
00:09:15,520 --> 00:09:20,040
from installing our own firmware this is

179
00:09:20,040 --> 00:09:22,720
this is not a new problem this was first

180
00:09:22,720 --> 00:09:26,800
notice back in 2015 when something pants

181
00:09:26,800 --> 00:09:29,800
wouldn't I could no longer support tech

182
00:09:29,800 --> 00:09:33,790
or boot and it's really unfortunate that

183
00:09:33,790 --> 00:09:36,070
the best documentation we have on boot

184
00:09:36,070 --> 00:09:39,820
guard comes from Alex metro vez Metro

185
00:09:39,820 --> 00:09:43,080
serves a reverse-engineered work on it

186
00:09:43,080 --> 00:09:46,270
we really need documentation on how this

187
00:09:46,270 --> 00:09:49,660
works we need to be able to write our

188
00:09:49,660 --> 00:09:53,380
own boot guard components we need to be

189
00:09:53,380 --> 00:09:56,920
able to sign our own boot guard firmware

190
00:09:56,920 --> 00:10:01,540
on systems that support it we can use

191
00:10:01,540 --> 00:10:04,240
various things to jailbreak to get

192
00:10:04,240 --> 00:10:05,440
around boot card

193
00:10:05,440 --> 00:10:07,960
hopefully the details on this will be

194
00:10:07,960 --> 00:10:10,240
coming out sometime soon

195
00:10:10,240 --> 00:10:13,240
but you know like most things boo kart

196
00:10:13,240 --> 00:10:16,960
has has not had a perfect roll out there

197
00:10:16,960 --> 00:10:18,910
have been vulnerabilities but we

198
00:10:18,910 --> 00:10:21,250
shouldn't have to jailbreak our systems

199
00:10:21,250 --> 00:10:23,020
to make use of this this is something

200
00:10:23,020 --> 00:10:24,970
where the vendors should be able to work

201
00:10:24,970 --> 00:10:29,340
with us to let us secure our own systems

202
00:10:29,340 --> 00:10:33,610
and it's not just the host firmware has

203
00:10:33,610 --> 00:10:35,590
vincent mentioned there are lots of

204
00:10:35,590 --> 00:10:37,600
other things inside the system that we

205
00:10:37,600 --> 00:10:39,490
need to be worried about the management

206
00:10:39,490 --> 00:10:42,640
engine is you know again a very over

207
00:10:42,640 --> 00:10:46,870
privileged Ron Minich he'll be talking

208
00:10:46,870 --> 00:10:49,540
later gave a talk about you know how

209
00:10:49,540 --> 00:10:51,580
it's an entire OS in there and that

210
00:10:51,580 --> 00:10:55,360
means it has potentially network

211
00:10:55,360 --> 00:10:57,430
accessible vulnerabilities there was one

212
00:10:57,430 --> 00:11:02,410
found last year there also folks at a PT

213
00:11:02,410 --> 00:11:05,320
Research found that a local attacker was

214
00:11:05,320 --> 00:11:06,250
able to get codex

215
00:11:06,250 --> 00:11:08,140
Kishen in the Emmy and this allowed them

216
00:11:08,140 --> 00:11:11,320
to bypass things like boot guard because

217
00:11:11,320 --> 00:11:13,390
they were able to circumvent that route

218
00:11:13,390 --> 00:11:18,070
of trust we can again sort of jailbreak

219
00:11:18,070 --> 00:11:21,220
the Emmy we can use Nicola Coronas Emmy

220
00:11:21,220 --> 00:11:24,580
cleaner to reduce the attack surface but

221
00:11:24,580 --> 00:11:26,860
again we shouldn't have to use these

222
00:11:26,860 --> 00:11:30,160
sorts of workarounds there shouldn't be

223
00:11:30,160 --> 00:11:33,730
any secrets in the Emmy

224
00:11:33,730 --> 00:11:35,560
there can be cryptographic keys there

225
00:11:35,560 --> 00:11:37,660
can be things that it uses for

226
00:11:37,660 --> 00:11:40,450
attestation but the code that goes with

227
00:11:40,450 --> 00:11:43,150
that has no reason to be secret

228
00:11:43,150 --> 00:11:45,910
you know there's we need to understand

229
00:11:45,910 --> 00:11:48,610
what these things are doing and we need

230
00:11:48,610 --> 00:11:51,010
to be able to install our own firmware

231
00:11:51,010 --> 00:11:55,540
there as well and also as Vincent

232
00:11:55,540 --> 00:11:56,950
mentioned there are a lot of

233
00:11:56,950 --> 00:12:01,680
programmable systems inside our systems

234
00:12:01,710 --> 00:12:04,510
Shahana burtowski pointed out in her

235
00:12:04,510 --> 00:12:08,080
talk you know that state this mutable

236
00:12:08,080 --> 00:12:11,470
state is really the enemy and creates a

237
00:12:11,470 --> 00:12:13,180
huge amount of complications for

238
00:12:13,180 --> 00:12:16,360
building secure systems you know it's

239
00:12:16,360 --> 00:12:18,760
not just our NICs it's our GPUs it's our

240
00:12:18,760 --> 00:12:20,589
storage it's our power supplies

241
00:12:20,589 --> 00:12:22,810
it's our fan controllers it's the front

242
00:12:22,810 --> 00:12:25,000
panels it's basically anything more

243
00:12:25,000 --> 00:12:27,339
complicated than a resistor probably has

244
00:12:27,339 --> 00:12:30,780
programmable firmware in these machines

245
00:12:30,780 --> 00:12:34,330
you know as white quark put it our pcs

246
00:12:34,330 --> 00:12:36,070
are really just several embedded devices

247
00:12:36,070 --> 00:12:40,600
in a trench coat you know this is we and

248
00:12:40,600 --> 00:12:43,030
we need to treat them like a distributed

249
00:12:43,030 --> 00:12:46,990
system NIST has published some

250
00:12:46,990 --> 00:12:50,589
guidelines for how we can start to think

251
00:12:50,589 --> 00:12:52,660
about having these devices a test and

252
00:12:52,660 --> 00:12:55,839
verify what they're running and most of

253
00:12:55,839 --> 00:12:58,180
these solutions end up depending on the

254
00:12:58,180 --> 00:13:03,339
TPM and we depend on the TPM for a lot

255
00:13:03,339 --> 00:13:05,740
of our security but it does mean we're

256
00:13:05,740 --> 00:13:09,220
put in a lot of eggs in that basket in

257
00:13:09,220 --> 00:13:12,070
some cases as folks from the Korean

258
00:13:12,070 --> 00:13:13,930
National Security Research Institute

259
00:13:13,930 --> 00:13:17,530
found we can circumvent that because

260
00:13:17,530 --> 00:13:19,270
we're not we're not interacting with it

261
00:13:19,270 --> 00:13:21,640
right when we come out of when we come

262
00:13:21,640 --> 00:13:24,340
out of sleep folks we've also known

263
00:13:24,340 --> 00:13:27,670
since 2011 that is possible too

264
00:13:27,670 --> 00:13:31,350
for a hardware attacker to insert

265
00:13:31,350 --> 00:13:33,820
locality overrides and circumvent things

266
00:13:33,820 --> 00:13:36,400
like boot guard there have also been

267
00:13:36,400 --> 00:13:39,540
recent developments in terms of building

268
00:13:39,540 --> 00:13:41,830
man-in-the-middle attacks on the TPM

269
00:13:41,830 --> 00:13:46,000
hardware and the TPM is yet another

270
00:13:46,000 --> 00:13:48,610
programmable micro controller and it has

271
00:13:48,610 --> 00:13:52,120
had firmware vulnerabilities that have

272
00:13:52,120 --> 00:13:56,310
weakened our our security guarantees and

273
00:13:56,310 --> 00:13:59,260
this is worrisome that we can't see

274
00:13:59,260 --> 00:14:01,660
what's going on inside of it you know we

275
00:14:01,660 --> 00:14:05,140
can't debug this sort of thing because

276
00:14:05,140 --> 00:14:07,360
it's closed it is this closed source

277
00:14:07,360 --> 00:14:10,900
system and it's really hard to trust

278
00:14:10,900 --> 00:14:13,750
closed source roots of trust you know if

279
00:14:13,750 --> 00:14:15,670
your Google or Microsoft working on on

280
00:14:15,670 --> 00:14:17,800
Titan or Cerberus you probably have a

281
00:14:17,800 --> 00:14:20,050
pretty good level of faith in what's

282
00:14:20,050 --> 00:14:22,660
going on inside of it but for the rest

283
00:14:22,660 --> 00:14:24,370
of us you know what are we going to do D

284
00:14:24,370 --> 00:14:26,950
capture chips and try to read out the

285
00:14:26,950 --> 00:14:30,700
what's going on you know we need these

286
00:14:30,700 --> 00:14:32,920
vendors to work with us as a community

287
00:14:32,920 --> 00:14:35,620
to help help us help them secure the

288
00:14:35,620 --> 00:14:37,810
system help us understand what they're

289
00:14:37,810 --> 00:14:41,560
doing inside of there and yeah we own

290
00:14:41,560 --> 00:14:43,660
this hardware we should be able to also

291
00:14:43,660 --> 00:14:47,920
own the own the firmware you know

292
00:14:47,920 --> 00:14:50,350
there's a lot of reasons that we want to

293
00:14:50,350 --> 00:14:53,080
be able to change it out and we want to

294
00:14:53,080 --> 00:14:54,900
be able to adjust the attack surface

295
00:14:54,900 --> 00:14:57,820
Steph gives a wonderful security

296
00:14:57,820 --> 00:15:00,070
training in which she points out that

297
00:15:00,070 --> 00:15:02,380
your threat model is not my threat model

298
00:15:02,380 --> 00:15:03,970
but you know your threat model is

299
00:15:03,970 --> 00:15:06,730
probably okay we all need to be able to

300
00:15:06,730 --> 00:15:09,490
tailor our systems to the specific

301
00:15:09,490 --> 00:15:12,250
threats that we face and the specific

302
00:15:12,250 --> 00:15:14,200
responses that we want to be able to do

303
00:15:14,200 --> 00:15:16,900
it's very different if you have you know

304
00:15:16,900 --> 00:15:19,450
high touch low touch or no touch system

305
00:15:19,450 --> 00:15:21,280
the responses are going to be different

306
00:15:21,280 --> 00:15:23,500
your laptop is going to need a different

307
00:15:23,500 --> 00:15:27,550
response than a lights-out server and we

308
00:15:27,550 --> 00:15:28,690
need to be able to tailor the firmware

309
00:15:28,690 --> 00:15:32,130
to our specific threats

310
00:15:32,130 --> 00:15:33,990
I really like what the Chromebooks have

311
00:15:33,990 --> 00:15:36,810
done where they've found a nice balance

312
00:15:36,810 --> 00:15:38,760
with user freedom that if you physically

313
00:15:38,760 --> 00:15:40,500
disassemble it you can remove a

314
00:15:40,500 --> 00:15:42,360
write-protect screw and overwrite the

315
00:15:42,360 --> 00:15:45,570
firmware Android has a similar thing

316
00:15:45,570 --> 00:15:47,850
where you can unlock the boot rom and it

317
00:15:47,850 --> 00:15:51,450
on some devices and it it notifies you

318
00:15:51,450 --> 00:15:54,810
that hey this machine is unlocked but it

319
00:15:54,810 --> 00:15:57,450
gives you the user freedom to to explore

320
00:15:57,450 --> 00:15:59,810
and and try out different things and

321
00:15:59,810 --> 00:16:03,210
that freedom to innovate is really one

322
00:16:03,210 --> 00:16:05,130
of the core things that we want to be

323
00:16:05,130 --> 00:16:07,680
able to do in this community you know so

324
00:16:07,680 --> 00:16:08,910
we can take an idea like Matthew

325
00:16:08,910 --> 00:16:12,090
Garrett's TPM top P and turn that into a

326
00:16:12,090 --> 00:16:14,820
piece of firmware that gets recommended

327
00:16:14,820 --> 00:16:18,120
for crossing international borders in

328
00:16:18,120 --> 00:16:19,940
you know a fairly short period of time

329
00:16:19,940 --> 00:16:23,370
we can take a Adrienne Porter felt

330
00:16:23,370 --> 00:16:26,640
suggestion and actually do experiments

331
00:16:26,640 --> 00:16:28,200
and try to figure out how do we make the

332
00:16:28,200 --> 00:16:34,140
security usable and this really goes

333
00:16:34,140 --> 00:16:37,860
back to the first freedom you know as

334
00:16:37,860 --> 00:16:39,780
Solomon defined it yet this is the

335
00:16:39,780 --> 00:16:42,420
freedom to change the firmware so that

336
00:16:42,420 --> 00:16:45,330
our computers compute the way we want

337
00:16:45,330 --> 00:16:48,270
them to and in order to do that we need

338
00:16:48,270 --> 00:16:51,660
documentation we need to be able to

339
00:16:51,660 --> 00:16:53,790
control certain keys we need to be able

340
00:16:53,790 --> 00:16:56,400
to work with our hardware vendors to be

341
00:16:56,400 --> 00:16:59,760
able to make this these systems compute

342
00:16:59,760 --> 00:17:03,750
the way we want them to and I really

343
00:17:03,750 --> 00:17:05,339
want to thank you know so many of the

344
00:17:05,339 --> 00:17:06,960
folks who are helping to sponsor the

345
00:17:06,960 --> 00:17:09,210
conference that it's really exciting to

346
00:17:09,210 --> 00:17:11,040
see so many of the big vendors

347
00:17:11,040 --> 00:17:13,619
especially the CPU vendors as well as

348
00:17:13,619 --> 00:17:17,700
some of the folks who are deploying open

349
00:17:17,700 --> 00:17:19,470
source firmware at sort of the hyper

350
00:17:19,470 --> 00:17:22,349
scale because I think together if we can

351
00:17:22,349 --> 00:17:25,140
really build a much better system we can

352
00:17:25,140 --> 00:17:27,060
build a more secure system more flexible

353
00:17:27,060 --> 00:17:30,570
and a more resilient one and again I'm

354
00:17:30,570 --> 00:17:32,850
really glad that so many people are here

355
00:17:32,850 --> 00:17:36,480
to and interested in this and I'd love

356
00:17:36,480 --> 00:17:39,210
to either take any questions or also

357
00:17:39,210 --> 00:17:42,210
chat with you during the week so thanks

358
00:17:42,210 --> 00:17:44,590
so much and hope you all have a great

359
00:17:44,590 --> 00:17:46,560
SFC

360
00:17:46,560 --> 00:17:49,980
[Applause]

361
00:17:54,080 --> 00:17:55,950
okay we have a little more time before

362
00:17:55,950 --> 00:17:58,380
the next talk so we are yeah you

363
00:17:58,380 --> 00:18:04,400
actually can take questions are they

364
00:18:06,500 --> 00:18:13,050
okay hey my name is Demeter Toma and

365
00:18:13,050 --> 00:18:14,460
actually maybe the question is more

366
00:18:14,460 --> 00:18:16,920
toward Vincent Zimmer but I think you

367
00:18:16,920 --> 00:18:19,740
can answer it as well because I see you

368
00:18:19,740 --> 00:18:22,530
both made the case of usability Vincent

369
00:18:22,530 --> 00:18:24,150
mentioned hey let's have the source code

370
00:18:24,150 --> 00:18:26,460
let's keep it simple let's have the API

371
00:18:26,460 --> 00:18:29,130
and let's have the build tools let us

372
00:18:29,130 --> 00:18:31,170
allow you to build your firmware that

373
00:18:31,170 --> 00:18:33,000
you're going to run on your system you

374
00:18:33,000 --> 00:18:34,650
know that's basically not sure what

375
00:18:34,650 --> 00:18:35,780
you're saying allow us to have the

376
00:18:35,780 --> 00:18:38,220
designing procedures the keys and all

377
00:18:38,220 --> 00:18:39,990
that allow us to have the documentation

378
00:18:39,990 --> 00:18:42,720
and I think this is really the first

379
00:18:42,720 --> 00:18:44,520
step but what I would like to hear about

380
00:18:44,520 --> 00:18:46,680
is how do you feel about making the case

381
00:18:46,680 --> 00:18:49,800
of hey we actually want customization

382
00:18:49,800 --> 00:18:52,110
let's not just focus on usability have

383
00:18:52,110 --> 00:18:54,180
the tools have the API let's actually

384
00:18:54,180 --> 00:18:57,090
say we want open source former because

385
00:18:57,090 --> 00:18:58,800
we want to customize before because we

386
00:18:58,800 --> 00:19:02,450
want to innovate and I also think that

387
00:19:02,450 --> 00:19:05,940
what you also found out that open source

388
00:19:05,940 --> 00:19:07,770
root of trust that's really the key to

389
00:19:07,770 --> 00:19:09,720
security because how can you be secure

390
00:19:09,720 --> 00:19:12,030
if it's hidden it's closed need to have

391
00:19:12,030 --> 00:19:13,620
transparency so what do you think about

392
00:19:13,620 --> 00:19:15,600
going in that direction which is

393
00:19:15,600 --> 00:19:17,790
definitely harder let's talk about

394
00:19:17,790 --> 00:19:19,560
customization let's not just talk about

395
00:19:19,560 --> 00:19:21,660
usability we want to build our own

396
00:19:21,660 --> 00:19:23,730
former we actually want to customize the

397
00:19:23,730 --> 00:19:25,800
process how we boot how our machines

398
00:19:25,800 --> 00:19:26,370
work

399
00:19:26,370 --> 00:19:28,890
thanks yeah that's a great question

400
00:19:28,890 --> 00:19:32,610
that's very much why we want that first

401
00:19:32,610 --> 00:19:34,860
freedom we want to be able to tailor it

402
00:19:34,860 --> 00:19:37,620
to our needs that your needs are

403
00:19:37,620 --> 00:19:38,850
different from mine

404
00:19:38,850 --> 00:19:40,020
Google's needs are different from

405
00:19:40,020 --> 00:19:41,820
Facebook's which are different from a

406
00:19:41,820 --> 00:19:44,550
home user which are different from some

407
00:19:44,550 --> 00:19:48,420
other cloud provider near the capability

408
00:19:48,420 --> 00:19:51,300
to build our own firmware lets us do

409
00:19:51,300 --> 00:19:57,630
that and you know I've seen in the Linux

410
00:19:57,630 --> 00:20:00,570
boot community there's we have two

411
00:20:00,570 --> 00:20:03,870
different runtimes Google has a go based

412
00:20:03,870 --> 00:20:05,750
runtime that suits their needs

413
00:20:05,750 --> 00:20:07,130
the heads

414
00:20:07,130 --> 00:20:09,590
community has a/c and Bosch based

415
00:20:09,590 --> 00:20:12,950
runtime that suits their needs and we

416
00:20:12,950 --> 00:20:16,160
can work together because what we what

417
00:20:16,160 --> 00:20:19,100
we need is support from the vendors to

418
00:20:19,100 --> 00:20:21,140
get the Linux kernel run in and once the

419
00:20:21,140 --> 00:20:23,210
Linux kernel is run in we can tailor it

420
00:20:23,210 --> 00:20:27,500
to exactly what what we need so I think

421
00:20:27,500 --> 00:20:29,750
I think that the focus on customized

422
00:20:29,750 --> 00:20:32,740
ability is very much at the forefront of

423
00:20:32,740 --> 00:20:39,790
of this movement ok any more questions

424
00:20:44,170 --> 00:20:47,390
hi it was just a quick comment on

425
00:20:47,390 --> 00:20:51,410
Android in most smartphone boot ROM

426
00:20:51,410 --> 00:20:53,510
we'll check the signature of the

427
00:20:53,510 --> 00:20:55,700
bootloader and what you were referring

428
00:20:55,700 --> 00:20:58,880
to was when the bootloader checked the

429
00:20:58,880 --> 00:21:02,560
signature of the OS user can usually

430
00:21:02,560 --> 00:21:05,540
talk to the bootloader to disable that

431
00:21:05,540 --> 00:21:08,000
so to load your own voice but you

432
00:21:08,000 --> 00:21:10,600
usually cannot replace the bootloader

433
00:21:10,600 --> 00:21:13,250
this really did the the code that's

434
00:21:13,250 --> 00:21:15,680
displaying that message obviously is

435
00:21:15,680 --> 00:21:19,640
much more difficult to replace on some

436
00:21:19,640 --> 00:21:21,050
phones you can do it but yeah a lot of

437
00:21:21,050 --> 00:21:22,730
roms you're you're stuck with the

438
00:21:22,730 --> 00:21:30,260
original so kind of as a follow up on

439
00:21:30,260 --> 00:21:32,300
that the reason why on Android we

440
00:21:32,300 --> 00:21:34,910
usually have those lockdown boot loaders

441
00:21:34,910 --> 00:21:36,530
because of the boot ROM checking the

442
00:21:36,530 --> 00:21:39,020
signatures is because they want to

443
00:21:39,020 --> 00:21:42,200
implement erm so they want to have a

444
00:21:42,200 --> 00:21:43,670
root of trust that the user cannot

445
00:21:43,670 --> 00:21:45,710
control so that they can provide the key

446
00:21:45,710 --> 00:21:48,380
to decode the encrypted media how do you

447
00:21:48,380 --> 00:21:50,210
think we can walk around in this

448
00:21:50,210 --> 00:21:52,280
situation because it's very unlikely

449
00:21:52,280 --> 00:21:55,160
that the majors are going to be fine

450
00:21:55,160 --> 00:21:58,160
with allowing this this use case for

451
00:21:58,160 --> 00:22:00,440
users if it means that they can no

452
00:22:00,440 --> 00:22:03,820
longer you know lock down the the media

453
00:22:03,820 --> 00:22:07,580
so there's a great question about how do

454
00:22:07,580 --> 00:22:11,330
we work with folks that want to know

455
00:22:11,330 --> 00:22:13,430
that the software that's running is

456
00:22:13,430 --> 00:22:15,560
unmodified that you know that they can

457
00:22:15,560 --> 00:22:18,020
trust it in some way and I think

458
00:22:18,020 --> 00:22:19,399
attestation

459
00:22:19,399 --> 00:22:22,460
has had somewhat of a bad reputation in

460
00:22:22,460 --> 00:22:24,619
in the free software community because

461
00:22:24,619 --> 00:22:27,320
it typically gets associated with with

462
00:22:27,320 --> 00:22:30,830
DRM but I think it we can use

463
00:22:30,830 --> 00:22:34,759
attestation for good like TPM top P is

464
00:22:34,759 --> 00:22:36,950
basically having the the firmware attest

465
00:22:36,950 --> 00:22:41,450
to us that it has been unmodified and I

466
00:22:41,450 --> 00:22:42,669
don't think there's a problem with

467
00:22:42,669 --> 00:22:48,559
having having a movie studio say they

468
00:22:48,559 --> 00:22:50,929
only want to run on an to stream their

469
00:22:50,929 --> 00:22:54,710
content to an unmodified player and with

470
00:22:54,710 --> 00:22:56,690
a good root of trust you should be able

471
00:22:56,690 --> 00:22:59,029
to do that sort of attestation it should

472
00:22:59,029 --> 00:23:04,159
be able to to tell the the server this

473
00:23:04,159 --> 00:23:06,919
is what is running you know and

474
00:23:06,919 --> 00:23:10,749
cryptographically sign sign that quote

475
00:23:10,869 --> 00:23:13,159
using something like blue card in

476
00:23:13,159 --> 00:23:15,379
measured boot mode has a similar sort of

477
00:23:15,379 --> 00:23:17,119
effect that as long as the system knows

478
00:23:17,119 --> 00:23:20,960
that the hash of the firmware that was

479
00:23:20,960 --> 00:23:24,529
that was executed you can make later

480
00:23:24,529 --> 00:23:26,479
decisions about do you trust that hash

481
00:23:26,479 --> 00:23:30,019
or do you not trust that hash so I think

482
00:23:30,019 --> 00:23:33,320
I think it is it's compatible we can

483
00:23:33,320 --> 00:23:36,019
have both attestation and free software

484
00:23:36,019 --> 00:23:40,999
and you know if if we need to lock

485
00:23:40,999 --> 00:23:43,940
things down for media companies that's a

486
00:23:43,940 --> 00:23:47,119
choice they that the users can make you

487
00:23:47,119 --> 00:23:49,580
know it's as long as it's in the hands

488
00:23:49,580 --> 00:23:53,450
of the user that's fine any more

489
00:23:53,450 --> 00:23:58,690
questions over there

490
00:23:58,690 --> 00:24:01,040
just hit the spot there with that the

491
00:24:01,040 --> 00:24:03,290
station topic about what you said that

492
00:24:03,290 --> 00:24:05,809
it is connected to DRM and that it can

493
00:24:05,809 --> 00:24:07,850
be useful good and that it can be open

494
00:24:07,850 --> 00:24:09,590
sourcing at the station can go hand to

495
00:24:09,590 --> 00:24:11,990
hand actually the problem with that was

496
00:24:11,990 --> 00:24:14,000
only exactly that we had a lot of closed

497
00:24:14,000 --> 00:24:16,790
components but there is now a

498
00:24:16,790 --> 00:24:20,330
common-sense gathering that online at

499
00:24:20,330 --> 00:24:22,570
the station system that is open-source

500
00:24:22,570 --> 00:24:26,120
can provide these kind of features so

501
00:24:26,120 --> 00:24:27,740
the only thing we need actually is to

502
00:24:27,740 --> 00:24:30,110
only understand how the system works

503
00:24:30,110 --> 00:24:33,290
exactly what I mentioned about you know

504
00:24:33,290 --> 00:24:35,570
we need access not only to be able to

505
00:24:35,570 --> 00:24:37,610
build the system see the source code and

506
00:24:37,610 --> 00:24:39,110
modify that we need to understand

507
00:24:39,110 --> 00:24:42,050
documentation how it actually works once

508
00:24:42,050 --> 00:24:44,390
we can do that online at the station

509
00:24:44,390 --> 00:24:45,920
system that is based on open source

510
00:24:45,920 --> 00:24:47,750
components both hardware and firmware

511
00:24:47,750 --> 00:24:51,020
can achieve what you said just wanted to

512
00:24:51,020 --> 00:24:52,340
mention that because it's really a topic

513
00:24:52,340 --> 00:24:54,830
yeah that's exactly right that if open

514
00:24:54,830 --> 00:24:57,080
source attestation systems you know are

515
00:24:57,080 --> 00:25:01,400
a thing for good MIT and Boston

516
00:25:01,400 --> 00:25:03,460
University's massive open cloud project

517
00:25:03,460 --> 00:25:07,010
is using that test station to be able to

518
00:25:07,010 --> 00:25:09,710
attest that the firmware in a cloud node

519
00:25:09,710 --> 00:25:11,450
is unmodified the configuration is

520
00:25:11,450 --> 00:25:13,490
unmodified so when they hand it over to

521
00:25:13,490 --> 00:25:17,390
a tenant the tenant can verify that that

522
00:25:17,390 --> 00:25:20,059
the cloud provider is not trying to

523
00:25:20,059 --> 00:25:23,660
subvert the security guarantees and do

524
00:25:23,660 --> 00:25:26,059
that exact same sort of guarantee can

525
00:25:26,059 --> 00:25:27,770
then be extended to the users of that

526
00:25:27,770 --> 00:25:32,420
system so I think attestation built on

527
00:25:32,420 --> 00:25:34,309
open components where we know what's

528
00:25:34,309 --> 00:25:36,920
going into it where we know what we are

529
00:25:36,920 --> 00:25:38,980
trusting and why we're trusting it is

530
00:25:38,980 --> 00:25:43,790
absolutely a good thing to have ok we

531
00:25:43,790 --> 00:25:46,809
have time for two more questions

532
00:25:51,340 --> 00:25:53,260
it's just a follow-up your data station

533
00:25:53,260 --> 00:25:54,669
topic actually I would like to put

534
00:25:54,669 --> 00:25:57,070
another use case on the table besides

535
00:25:57,070 --> 00:25:59,679
that the DRM which is probably bit more

536
00:25:59,679 --> 00:26:02,350
debatable from industry point of view

537
00:26:02,350 --> 00:26:04,270
you have devices in the field which

538
00:26:04,270 --> 00:26:06,549
fulfill security or safety relevant

539
00:26:06,549 --> 00:26:08,140
topics as well so they went through a

540
00:26:08,140 --> 00:26:11,350
certain certification process to prove

541
00:26:11,350 --> 00:26:13,330
that they do what they should do and you

542
00:26:13,330 --> 00:26:16,120
as maybe as a trained rider would like

543
00:26:16,120 --> 00:26:17,679
to ensure that it's actually the case

544
00:26:17,679 --> 00:26:21,279
and so we also need to rely on the

545
00:26:21,279 --> 00:26:24,789
authenticity or the integrity of the

546
00:26:24,789 --> 00:26:27,520
firmware being run why we still like as

547
00:26:27,520 --> 00:26:29,590
a open source we distribute Elektra

548
00:26:29,590 --> 00:26:31,000
fulfill the license compliance so that

549
00:26:31,000 --> 00:26:33,370
the challenge is actually to be able to

550
00:26:33,370 --> 00:26:35,169
lock down the device to a specific

551
00:26:35,169 --> 00:26:37,539
function without locking down the

552
00:26:37,539 --> 00:26:40,360
software on the device to take the users

553
00:26:40,360 --> 00:26:42,070
away the freedom to change it I mean

554
00:26:42,070 --> 00:26:43,630
normally our users won't change the

555
00:26:43,630 --> 00:26:45,070
firmware because they have different

556
00:26:45,070 --> 00:26:48,100
things to do like running a train then

557
00:26:48,100 --> 00:26:50,049
changing the hardware but still the

558
00:26:50,049 --> 00:26:51,940
license has to be fulfilled so this is

559
00:26:51,940 --> 00:26:53,409
just another use case where it's also

560
00:26:53,409 --> 00:26:56,740
been usable for the good while it's

561
00:26:56,740 --> 00:26:58,570
still a challenge to implement a good

562
00:26:58,570 --> 00:27:01,240
pattern and to fulfill the licenses of

563
00:27:01,240 --> 00:27:03,190
open source and specific also of GPL

564
00:27:03,190 --> 00:27:07,000
from there yeah in the right way yeah

565
00:27:07,000 --> 00:27:08,049
absolutely

566
00:27:08,049 --> 00:27:10,720
the be able for safety critical devices

567
00:27:10,720 --> 00:27:13,539
to attest that they are running a known

568
00:27:13,539 --> 00:27:15,070
version of the firmware before they are

569
00:27:15,070 --> 00:27:17,770
allowed to perform their safety critical

570
00:27:17,770 --> 00:27:20,169
function it is a wonderful use case for

571
00:27:20,169 --> 00:27:23,289
this sort of attestation especially if

572
00:27:23,289 --> 00:27:25,270
it's built an open source where you can

573
00:27:25,270 --> 00:27:29,980
verify the fur on reproducibly built

574
00:27:29,980 --> 00:27:31,929
open source so you can verify yes this

575
00:27:31,929 --> 00:27:33,669
is exactly the code and the

576
00:27:33,669 --> 00:27:35,980
configuration that was installed on the

577
00:27:35,980 --> 00:27:40,029
system is yeah it's definitely a way to

578
00:27:40,029 --> 00:27:46,470
improve the this safety critical systems

579
00:27:46,470 --> 00:27:53,669
okay one last question okay

580
00:27:53,940 --> 00:27:57,730
if if user have different security needs

581
00:27:57,730 --> 00:28:00,400
maybe we also need to be able to tailor

582
00:28:00,400 --> 00:28:03,820
on the attestation process to use our

583
00:28:03,820 --> 00:28:09,600
use case basically I'm Charlie Adriana

584
00:28:09,600 --> 00:28:13,690
if you jur have like different security

585
00:28:13,690 --> 00:28:15,850
needs different street models and so on

586
00:28:15,850 --> 00:28:18,220
maybe we also need to be able to

587
00:28:18,220 --> 00:28:21,429
customize the last station process like

588
00:28:21,429 --> 00:28:23,530
what is displayed to the user how it

589
00:28:23,530 --> 00:28:27,490
works and so on right right and being

590
00:28:27,490 --> 00:28:30,820
able to trust the what's being displayed

591
00:28:30,820 --> 00:28:32,380
on the computer screen is is very

592
00:28:32,380 --> 00:28:35,740
difficult in introducing TPM toppy

593
00:28:35,740 --> 00:28:39,460
Mathew Garrett showed a mock-up where it

594
00:28:39,460 --> 00:28:42,429
the system asked for a password you

595
00:28:42,429 --> 00:28:43,900
typed in the password and then it

596
00:28:43,900 --> 00:28:47,020
displayed a fake kernel panic and he

597
00:28:47,020 --> 00:28:48,940
pointed out that you know malware that

598
00:28:48,940 --> 00:28:51,190
does this would be almost undetectable

599
00:28:51,190 --> 00:28:53,080
because we've all seen random kernel

600
00:28:53,080 --> 00:28:56,910
panics trying to mount disks so having

601
00:28:56,910 --> 00:28:59,620
protected displays or some way to to

602
00:28:59,620 --> 00:29:01,870
know that you could trust it becomes a

603
00:29:01,870 --> 00:29:09,000
key key part Dino from from square

604
00:29:09,000 --> 00:29:10,720
suggested that you know our phones

605
00:29:10,720 --> 00:29:13,150
actually are you know should start to

606
00:29:13,150 --> 00:29:14,320
serve more as these sort of trusted

607
00:29:14,320 --> 00:29:16,000
display terminals for a lot of this and

608
00:29:16,000 --> 00:29:20,880
TPM top P who takes that to uses that

609
00:29:20,880 --> 00:29:23,230
okay thank you very much giving them up

610
00:29:23,230 --> 00:29:24,670
once again for Emma Watson

611
00:29:24,670 --> 00:29:27,280
[Applause]

612
00:29:27,280 --> 00:29:35,869
[Music]

