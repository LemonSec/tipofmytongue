1
00:00:00,000 --> 00:00:04,160
[Music]

2
00:00:04,160 --> 00:00:08,340
so to get started porting the UDK to

3
00:00:08,340 --> 00:00:11,370
different platforms is a real headache

4
00:00:11,370 --> 00:00:15,480
sometimes right so our next speaker is

5
00:00:15,480 --> 00:00:18,710
about to make our lives way way easier

6
00:00:18,710 --> 00:00:22,859
so please give a warm welcome to even

7
00:00:22,859 --> 00:00:24,130
Lloyd

8
00:00:24,130 --> 00:00:28,500
[Applause]

9
00:00:29,039 --> 00:00:33,480
okay so just some background we studied

10
00:00:33,480 --> 00:00:37,260
a Windows on arm team in about seven

11
00:00:37,260 --> 00:00:39,690
years ago and it's kept us busy ever

12
00:00:39,690 --> 00:00:43,079
since most of that work you can guess at

13
00:00:43,079 --> 00:00:45,629
in that my job title is now tech lead

14
00:00:45,629 --> 00:00:50,100
for UEFI not Windows alarm we put a lot

15
00:00:50,100 --> 00:00:55,860
of effort into the firmware and I think

16
00:00:55,860 --> 00:00:59,250
we should reduce that so I'm going to go

17
00:00:59,250 --> 00:01:02,100
through this introduction tell you

18
00:01:02,100 --> 00:01:03,750
something about the framework we have

19
00:01:03,750 --> 00:01:08,640
already produced the plans and some

20
00:01:08,640 --> 00:01:16,110
links and discussion so background if we

21
00:01:16,110 --> 00:01:18,810
took just a single arm platform we found

22
00:01:18,810 --> 00:01:21,060
we were producing a lot of versions of

23
00:01:21,060 --> 00:01:23,420
film where we have this big little setup

24
00:01:23,420 --> 00:01:26,159
but for various reasons we wanted to

25
00:01:26,159 --> 00:01:28,259
have firmware builds that only use the

26
00:01:28,259 --> 00:01:31,590
big only is the little it meant we had a

27
00:01:31,590 --> 00:01:36,409
lot of variants on the ACPI tables but

28
00:01:36,409 --> 00:01:39,540
minor changes but the minor changes you

29
00:01:39,540 --> 00:01:43,560
have to maintain and test and it can be

30
00:01:43,560 --> 00:01:46,619
a difficult to get it right so we found

31
00:01:46,619 --> 00:01:50,040
it was expensive on top of that for a

32
00:01:50,040 --> 00:01:53,060
lot of other platforms many more

33
00:01:53,060 --> 00:01:56,579
hardware variants appear so the cost can

34
00:01:56,579 --> 00:01:59,130
be quite significant particularly in

35
00:01:59,130 --> 00:02:03,570
terms of managing the binaries so what

36
00:02:03,570 --> 00:02:05,969
we wanted to do was make the film more

37
00:02:05,969 --> 00:02:10,410
configurable not have different builds

38
00:02:10,410 --> 00:02:14,000
for slightly different platforms

39
00:02:14,000 --> 00:02:17,340
eliminate the the bugs you get when you

40
00:02:17,340 --> 00:02:21,000
copy paste and forget I did a number and

41
00:02:21,000 --> 00:02:23,569
just to be able to validate that it

42
00:02:23,569 --> 00:02:31,170
works so so for simplicity we wanted to

43
00:02:31,170 --> 00:02:33,629
be able to say which a CPI tables we

44
00:02:33,629 --> 00:02:35,670
cared about provide the hardware

45
00:02:35,670 --> 00:02:37,829
information that was necessary for those

46
00:02:37,829 --> 00:02:41,780
tables and nothing else

47
00:02:41,870 --> 00:02:46,169
generate the tables and as an option

48
00:02:46,169 --> 00:02:48,840
allowing the normal built tables to be

49
00:02:48,840 --> 00:02:52,230
used if you wanted to do that in

50
00:02:52,230 --> 00:02:54,000
particular particular what we found is

51
00:02:54,000 --> 00:02:55,409
we could generate a table through the

52
00:02:55,409 --> 00:02:58,620
framework and then feed the binary back

53
00:02:58,620 --> 00:03:00,569
in as a raw binary which was an

54
00:03:00,569 --> 00:03:06,319
optimization so the framework itself

55
00:03:06,769 --> 00:03:09,299
it's split into two the table manager

56
00:03:09,299 --> 00:03:13,079
which is the static part of the code and

57
00:03:13,079 --> 00:03:15,120
the configuration manager which holds

58
00:03:15,120 --> 00:03:18,180
the platform information this is very

59
00:03:18,180 --> 00:03:20,459
design specific I should explain this

60
00:03:20,459 --> 00:03:24,239
talk was aimed at the ufi plugfest but

61
00:03:24,239 --> 00:03:25,620
we'd like more people to know about it

62
00:03:25,620 --> 00:03:30,870
so we're here the idea is that we we

63
00:03:30,870 --> 00:03:33,510
know how to build an EM ADT we just

64
00:03:33,510 --> 00:03:35,819
don't always know some of the

65
00:03:35,819 --> 00:03:37,549
information that goes into that table

66
00:03:37,549 --> 00:03:41,400
and so if we have the common code the

67
00:03:41,400 --> 00:03:44,639
common generation in in standard

68
00:03:44,639 --> 00:03:46,409
firmware we can just pull in the

69
00:03:46,409 --> 00:03:48,979
information and plug it into the table

70
00:03:48,979 --> 00:03:55,349
so the figuration manager right now is a

71
00:03:55,349 --> 00:03:57,859
prototype it's very platform specific

72
00:03:57,859 --> 00:04:04,970
our intent is to pass a text file or a

73
00:04:04,970 --> 00:04:09,930
similar binary spec generated by the

74
00:04:09,930 --> 00:04:13,729
sock design software so instead of

75
00:04:13,729 --> 00:04:16,829
looking at a spec and handed it in code

76
00:04:16,829 --> 00:04:19,649
we should be able to just pass it

77
00:04:19,649 --> 00:04:22,880
through some scripts and generate the

78
00:04:22,880 --> 00:04:24,840
configuration information for the

79
00:04:24,840 --> 00:04:25,470
platform

80
00:04:25,470 --> 00:04:28,830
which lets us not worry about debugging

81
00:04:28,830 --> 00:04:31,260
because it should be right from the

82
00:04:31,260 --> 00:04:37,500
start and because we provide a

83
00:04:37,500 --> 00:04:40,470
configurable list of tables we can fit

84
00:04:40,470 --> 00:04:43,590
the the firmware to whatever platform

85
00:04:43,590 --> 00:04:46,290
requirements there are the obvious

86
00:04:46,290 --> 00:04:48,680
example being for Windows you need

87
00:04:48,680 --> 00:04:51,120
rather more tables than you do for other

88
00:04:51,120 --> 00:04:59,660
things so the term manager does all the

89
00:04:59,660 --> 00:05:02,250
generation I've really I've just covered

90
00:05:02,250 --> 00:05:07,320
that the detail is is more down to the

91
00:05:07,320 --> 00:05:12,090
co.design this is a prototype and proof

92
00:05:12,090 --> 00:05:13,920
of concept it works we can make

93
00:05:13,920 --> 00:05:16,350
operating systems boot from generated

94
00:05:16,350 --> 00:05:25,080
tables the table Factory is the the

95
00:05:25,080 --> 00:05:29,130
framework that takes the spec and

96
00:05:29,130 --> 00:05:32,640
generates the appropriate tables missing

97
00:05:32,640 --> 00:05:35,340
from here in theory we could generate a

98
00:05:35,340 --> 00:05:37,950
device tree I'll talk a little about

99
00:05:37,950 --> 00:05:42,810
that later on so the the several

100
00:05:42,810 --> 00:05:46,800
generator for each table code even in

101
00:05:46,800 --> 00:05:49,380
the factory we know what information we

102
00:05:49,380 --> 00:05:52,010
need from the configuration manager

103
00:05:52,010 --> 00:05:55,850
therefore a simple to go and perhaps get

104
00:05:55,850 --> 00:05:57,470
[Music]

105
00:05:57,470 --> 00:06:00,840
as a trivial example for a DB g2 table

106
00:06:00,840 --> 00:06:03,750
all you need to know is the actual

107
00:06:03,750 --> 00:06:09,320
address of the the console the UART and

108
00:06:09,320 --> 00:06:12,600
you can go and ask the system generator

109
00:06:12,600 --> 00:06:14,490
where I put the UART and feed that

110
00:06:14,490 --> 00:06:21,210
straight into your table so for

111
00:06:21,210 --> 00:06:23,760
flexibility we have the what we call the

112
00:06:23,760 --> 00:06:25,890
generic implementation which knows about

113
00:06:25,890 --> 00:06:30,240
the table but we also allow a raw we've

114
00:06:30,240 --> 00:06:32,210
got one of those you can have it

115
00:06:32,210 --> 00:06:36,000
option so you just feed existing tables

116
00:06:36,000 --> 00:06:39,150
in or as an optimization you can

117
00:06:39,150 --> 00:06:41,400
feedback the generated table that you've

118
00:06:41,400 --> 00:06:46,350
dumped into the the the factory as I use

119
00:06:46,350 --> 00:06:51,720
this one it's cookies a boot so the

120
00:06:51,720 --> 00:06:55,920
sequence it's very simple we start off

121
00:06:55,920 --> 00:06:57,780
by asking the convict manager what it

122
00:06:57,780 --> 00:07:00,330
was it wants to build and then for each

123
00:07:00,330 --> 00:07:06,270
table we ask for a generator and get the

124
00:07:06,270 --> 00:07:12,540
hardware information having generated

125
00:07:12,540 --> 00:07:15,840
the table we pass it to the indicated

126
00:07:15,840 --> 00:07:17,370
framework to give to the operating

127
00:07:17,370 --> 00:07:27,500
system so that might vary could be so

128
00:07:28,160 --> 00:07:32,180
for the current states and plans in

129
00:07:32,180 --> 00:07:35,370
edk two platforms we have examples for

130
00:07:35,370 --> 00:07:40,650
Juno and the FTP models its business epi

131
00:07:40,650 --> 00:07:43,310
six one two there's a list of the tables

132
00:07:43,310 --> 00:07:46,350
currently catered for we need to update

133
00:07:46,350 --> 00:07:48,870
that with one or two new tables that are

134
00:07:48,870 --> 00:07:52,140
coming out but but it will successfully

135
00:07:52,140 --> 00:07:59,820
boot Linux and windows so to do that

136
00:07:59,820 --> 00:08:03,570
this is slightly out of date we propose

137
00:08:03,570 --> 00:08:06,600
to change to the ICP I see a tools and

138
00:08:06,600 --> 00:08:14,160
that is now released so that please hit

139
00:08:14,160 --> 00:08:18,330
minus TC option will build the tables we

140
00:08:18,330 --> 00:08:24,720
need so future plans add more tables we

141
00:08:24,720 --> 00:08:26,670
would like to add s Empire support

142
00:08:26,670 --> 00:08:31,500
because it would just be try them then

143
00:08:31,500 --> 00:08:35,010
hand rolling tables and what we really

144
00:08:35,010 --> 00:08:38,190
want to do still outstanding is to pass

145
00:08:38,190 --> 00:08:42,770
the information generated by a two

146
00:08:42,770 --> 00:08:45,720
depends on on the partner which tools

147
00:08:45,720 --> 00:08:49,510
they use for sock layout but

148
00:08:49,510 --> 00:08:53,890
in current terms we're looking to use

149
00:08:53,890 --> 00:09:00,000
the IP exact output to generate tables

150
00:09:01,650 --> 00:09:04,260
those of you who are at the trusty

151
00:09:04,260 --> 00:09:07,060
firmware talk yesterday will have heard

152
00:09:07,060 --> 00:09:09,640
that there's a move to use device tree

153
00:09:09,640 --> 00:09:12,340
as the system description for trusted

154
00:09:12,340 --> 00:09:15,970
firmware and one interesting option we

155
00:09:15,970 --> 00:09:19,300
have is to pass a device tree like

156
00:09:19,300 --> 00:09:22,450
structure and I'm I'm emphasizing like

157
00:09:22,450 --> 00:09:25,960
because in certain areas like server

158
00:09:25,960 --> 00:09:30,610
device tree is is not a welcome term but

159
00:09:30,610 --> 00:09:32,650
we believe we can take a device tree

160
00:09:32,650 --> 00:09:35,290
dislike description and generate the a

161
00:09:35,290 --> 00:09:38,380
CPI tables from that and that's on our

162
00:09:38,380 --> 00:09:44,950
next step from here so this hardware

163
00:09:44,950 --> 00:09:45,790
information parser

164
00:09:45,790 --> 00:09:51,060
right now we don't know exactly what

165
00:09:51,060 --> 00:09:54,220
have moved on to an IP exact view of the

166
00:09:54,220 --> 00:09:56,770
world only because that's the - we we

167
00:09:56,770 --> 00:10:00,040
have internally so but we're very open

168
00:10:00,040 --> 00:10:05,590
to other system descriptions the the

169
00:10:05,590 --> 00:10:08,680
real point being that you eliminate a

170
00:10:08,680 --> 00:10:10,720
whole range of human error possibilities

171
00:10:10,720 --> 00:10:18,460
from your fill my generation so right

172
00:10:18,460 --> 00:10:23,620
now we have a set of branches on edk -

173
00:10:23,620 --> 00:10:26,620
staging and and UK 2 platforms with

174
00:10:26,620 --> 00:10:30,760
example code we are very keen and are

175
00:10:30,760 --> 00:10:33,670
getting some partner pressure to move

176
00:10:33,670 --> 00:10:38,530
that into e TK 2 itself and would like

177
00:10:38,530 --> 00:10:40,600
support for that from anybody who can

178
00:10:40,600 --> 00:10:45,210
see the value of what we're doing so

179
00:10:47,990 --> 00:10:50,390
guess so

180
00:10:50,390 --> 00:10:54,300
as an aside we submitted an ACP eye view

181
00:10:54,300 --> 00:10:57,660
tool to indicate ooh it sort of

182
00:10:57,660 --> 00:11:00,540
duplicates the ACP ICA functionality but

183
00:11:00,540 --> 00:11:02,940
it's it's with any decay to shell and

184
00:11:02,940 --> 00:11:05,640
lets you dump your platform at that

185
00:11:05,640 --> 00:11:10,350
point where the the operating system may

186
00:11:10,350 --> 00:11:12,420
not be happy with your ACPI tables and

187
00:11:12,420 --> 00:11:15,330
so it's quite helpful when you're

188
00:11:15,330 --> 00:11:18,810
debugging a new system the important

189
00:11:18,810 --> 00:11:22,440
point is that it will also generate the

190
00:11:22,440 --> 00:11:25,350
dump that can be fed back into the the

191
00:11:25,350 --> 00:11:30,360
shell as of raw table so right so

192
00:11:30,360 --> 00:11:35,130
passions got some obvious questions

193
00:11:35,130 --> 00:11:38,910
there there is a small cost in memory

194
00:11:38,910 --> 00:11:41,430
footprint we've been more generic the

195
00:11:41,430 --> 00:11:45,000
the main cost is that runtime services

196
00:11:45,000 --> 00:11:48,540
not good services so it's not really

197
00:11:48,540 --> 00:11:50,630
relevant

198
00:11:50,630 --> 00:11:55,080
like wise image size it may be slightly

199
00:11:55,080 --> 00:12:00,120
bigger on the other hand you have fewer

200
00:12:00,120 --> 00:12:08,760
images to manage is our hope so so in

201
00:12:08,760 --> 00:12:11,310
the light of the earlier presentation

202
00:12:11,310 --> 00:12:18,300
boot time might be a concern and we have

203
00:12:18,300 --> 00:12:20,130
allowed for optimizing with a cached

204
00:12:20,130 --> 00:12:23,850
view of the tables so there may still be

205
00:12:23,850 --> 00:12:27,090
a small cost but I estimate it's very

206
00:12:27,090 --> 00:12:36,000
small right any other questions I think

207
00:12:36,000 --> 00:12:40,730
we okay we've lost our microphone

208
00:12:41,080 --> 00:12:46,300
right yes thank you

209
00:12:55,130 --> 00:12:56,900
I'm sorry what's to tell you Claire care

210
00:12:56,900 --> 00:13:00,440
off the leaf blower outside so so we

211
00:13:00,440 --> 00:13:02,570
have questions well yeah sorry that was

212
00:13:02,570 --> 00:13:04,640
much quicker than I submitted yeah there

213
00:13:04,640 --> 00:13:06,620
was much quicker like 10 minutes we ever

214
00:13:06,620 --> 00:13:09,500
have an hour off questions okay yeah

215
00:13:09,500 --> 00:13:10,970
well let's do this let's fill this half

216
00:13:10,970 --> 00:13:21,170
an hour hi thank you a couple of things

217
00:13:21,170 --> 00:13:25,670
one is the we've done power we we don't

218
00:13:25,670 --> 00:13:28,400
use this if you I wouldn't do you fi but

219
00:13:28,400 --> 00:13:30,230
we've gone through sort of a similar

220
00:13:30,230 --> 00:13:34,130
exercise for generating various FEMA

221
00:13:34,130 --> 00:13:35,480
configuration stuff from mission

222
00:13:35,480 --> 00:13:37,850
descriptions it's not dynamic static but

223
00:13:37,850 --> 00:13:41,540
sort of similar in spirit experience is

224
00:13:41,540 --> 00:13:45,950
the real devil is in the origin hardware

225
00:13:45,950 --> 00:13:47,750
description and it's false that is

226
00:13:47,750 --> 00:13:50,510
really where all the horror comes from

227
00:13:50,510 --> 00:13:57,200
and so and I not real question in the

228
00:13:57,200 --> 00:13:58,280
way but I think there's a lot of

229
00:13:58,280 --> 00:14:00,110
emphasis to be done in getting that one

230
00:14:00,110 --> 00:14:03,650
thing right because it will really

231
00:14:03,650 --> 00:14:06,950
define a long run how usable and and

232
00:14:06,950 --> 00:14:10,700
generate that thing is going to be so

233
00:14:10,700 --> 00:14:12,970
what sort of more for comment um

234
00:14:12,970 --> 00:14:15,170
secondly I'm interested in what you mean

235
00:14:15,170 --> 00:14:20,390
by the problem or or or misperception of

236
00:14:20,390 --> 00:14:22,070
device three in the server world I mean

237
00:14:22,070 --> 00:14:26,260
I suppose you mean the x86 server world

238
00:14:26,260 --> 00:14:29,750
all or do you mean I'm sorry I'm not

239
00:14:29,750 --> 00:14:32,720
sure have political acceptability to to

240
00:14:32,720 --> 00:14:36,410
go into detail but I know within on the

241
00:14:36,410 --> 00:14:40,430
the server side of the world will hoc

242
00:14:40,430 --> 00:14:41,990
inspect for any mentioned device tree

243
00:14:41,990 --> 00:14:45,820
yes for that we all know that but

244
00:14:45,820 --> 00:14:48,950
despite all of his interesting work John

245
00:14:48,950 --> 00:14:52,400
hasn't completely killed it that I would

246
00:14:52,400 --> 00:14:53,720
like to point out that they have been

247
00:14:53,720 --> 00:14:55,700
some efforts in the past and I will very

248
00:14:55,700 --> 00:14:58,220
very much like to see that revived if I

249
00:14:58,220 --> 00:15:01,820
if I can help - on the contrary get

250
00:15:01,820 --> 00:15:04,490
those two a bit more a bit closer again

251
00:15:04,490 --> 00:15:06,710
so one other thing that was done

252
00:15:06,710 --> 00:15:10,970
years back was to add to a CPI some get

253
00:15:10,970 --> 00:15:12,530
property mechanism for arbitrary

254
00:15:12,530 --> 00:15:14,810
properties to match the ability of the

255
00:15:14,810 --> 00:15:15,860
diverse tree to provide up with

256
00:15:15,860 --> 00:15:20,060
properties and provide consistent

257
00:15:20,060 --> 00:15:23,780
interfaces to device drivers this is an

258
00:15:23,780 --> 00:15:26,360
example of a step where if we call the

259
00:15:26,360 --> 00:15:28,370
work toward a direction where we can

260
00:15:28,370 --> 00:15:31,640
effectively almost have a bio ejection

261
00:15:31,640 --> 00:15:33,740
between a CPI table and device tree and

262
00:15:33,740 --> 00:15:36,650
go back and forth between them the the

263
00:15:36,650 --> 00:15:40,640
world will be a better place so I think

264
00:15:40,640 --> 00:15:43,310
that don't have to be tubed to be

265
00:15:43,310 --> 00:15:46,880
opposed and it would make a lot of sense

266
00:15:46,880 --> 00:15:48,080
when you say device tree like to

267
00:15:48,080 --> 00:15:50,180
actually do an activity and not give us

268
00:15:50,180 --> 00:15:52,760
your like on a catch very specifically

269
00:15:52,760 --> 00:15:55,850
because it will help everybody go and

270
00:15:55,850 --> 00:15:59,210
step toward that the direction where we

271
00:15:59,210 --> 00:16:02,720
we remove the arbitrary difference as a

272
00:16:02,720 --> 00:16:04,790
most possible turn them purely into a

273
00:16:04,790 --> 00:16:06,470
syntactic representational difference

274
00:16:06,470 --> 00:16:09,470
rather than a fundamental conceptual

275
00:16:09,470 --> 00:16:12,980
difference in what gets represented and

276
00:16:12,980 --> 00:16:14,900
and that would be make everything easier

277
00:16:14,900 --> 00:16:17,810
for everybody basically I would not

278
00:16:17,810 --> 00:16:20,480
argue with your case I will probably

279
00:16:20,480 --> 00:16:22,970
find out that from where I stand it's

280
00:16:22,970 --> 00:16:26,690
politically easier to get an update into

281
00:16:26,690 --> 00:16:27,290
a dk2

282
00:16:27,290 --> 00:16:29,240
that's not been opposed because it's

283
00:16:29,240 --> 00:16:32,270
based on device tree okay what we

284
00:16:32,270 --> 00:16:35,480
difficult in themselves through then try

285
00:16:35,480 --> 00:16:37,970
to obscure in my power port - okay -

286
00:16:37,970 --> 00:16:39,350
which is until the device tree based

287
00:16:39,350 --> 00:16:46,760
yeah that would be interesting indeed

288
00:16:46,760 --> 00:16:50,260
it's not something we've addressed I

289
00:16:50,260 --> 00:16:52,790
think I don't need to go into reasons

290
00:16:52,790 --> 00:16:56,990
why no no no I probably worth mentioning

291
00:16:56,990 --> 00:17:01,640
and because it's just a waste of time at

292
00:17:01,640 --> 00:17:07,720
the end of the day okay more questions

293
00:17:07,720 --> 00:17:12,970
over there have a good run

294
00:17:15,150 --> 00:17:18,910
thank you so first of all to respond to

295
00:17:18,910 --> 00:17:24,369
Ben I think the HPI versus DT debate in

296
00:17:24,369 --> 00:17:26,679
the art world is only about what the

297
00:17:26,679 --> 00:17:29,410
firm were exposed to the OS that's what

298
00:17:29,410 --> 00:17:31,929
we do internally that's that's an

299
00:17:31,929 --> 00:17:33,640
implementation detail and if we can use

300
00:17:33,640 --> 00:17:34,270
DTS

301
00:17:34,270 --> 00:17:36,880
to describe the platform from one

302
00:17:36,880 --> 00:17:38,950
firmware phase to the other phase I

303
00:17:38,950 --> 00:17:40,270
think that's perfectly fine and I don't

304
00:17:40,270 --> 00:17:42,010
think there are any political issues

305
00:17:42,010 --> 00:17:46,630
with that at all about the table

306
00:17:46,630 --> 00:17:48,940
generation I was wondering so you

307
00:17:48,940 --> 00:17:52,299
mentioned the dsdt SSD tables as raw

308
00:17:52,299 --> 00:17:54,419
tables doesn't mean that they're not

309
00:17:54,419 --> 00:17:58,510
generated currently so yeah we've used

310
00:17:58,510 --> 00:18:01,780
raw base P as if you've written some ASL

311
00:18:01,780 --> 00:18:05,830
and generated an AML binary you can then

312
00:18:05,830 --> 00:18:07,330
give that to the framework and say use

313
00:18:07,330 --> 00:18:10,210
this table okay so we're now you

314
00:18:10,210 --> 00:18:12,549
generate the SD T as well from can you

315
00:18:12,549 --> 00:18:16,720
generate the BSD T from more abstract we

316
00:18:16,720 --> 00:18:18,549
have some techniques we've played with

317
00:18:18,549 --> 00:18:22,990
and you have trouble doing the whole

318
00:18:22,990 --> 00:18:26,980
thing but by splitting individual

319
00:18:26,980 --> 00:18:29,620
components out into SSD T's you can can

320
00:18:29,620 --> 00:18:31,530
generate customizable components that

321
00:18:31,530 --> 00:18:34,960
are fairly easy to to plug back in in

322
00:18:34,960 --> 00:18:38,169
particular the ACPI CI tools and now

323
00:18:38,169 --> 00:18:41,049
giving this the option of labeling

324
00:18:41,049 --> 00:18:44,799
offsets and that allows us to to

325
00:18:44,799 --> 00:18:47,980
customize small tables rather rather

326
00:18:47,980 --> 00:18:53,230
than generating ten descriptions of a

327
00:18:53,230 --> 00:18:56,200
very similar processes use one and just

328
00:18:56,200 --> 00:19:00,270
change the numbers so that's a viable

329
00:19:00,270 --> 00:19:04,809
yeah and then the for instance the IRT

330
00:19:04,809 --> 00:19:08,230
and PPT tables are fairly well they're

331
00:19:08,230 --> 00:19:10,590
fairly dense in the sense that they

332
00:19:10,590 --> 00:19:17,459
contain a lot of non-trivial information

333
00:19:18,240 --> 00:19:22,080
is can you really have you really have

334
00:19:22,080 --> 00:19:25,400
the coverage to to generate non-trivial

335
00:19:25,400 --> 00:19:28,500
IOT apologies or non-trivial cash and

336
00:19:28,500 --> 00:19:31,200
ship you to Paula G's using this

337
00:19:31,200 --> 00:19:35,130
framework um certainly we using exactly

338
00:19:35,130 --> 00:19:37,490
the technique I've just mentioned of

339
00:19:37,490 --> 00:19:41,309
using lots of small SST T's you can

340
00:19:41,309 --> 00:19:45,059
describe the the caption processor

341
00:19:45,059 --> 00:19:50,790
topologies fairly clearly it's as long

342
00:19:50,790 --> 00:19:52,679
as the base information is there

343
00:19:52,679 --> 00:19:55,080
we obviously Juneau is a fairly trivial

344
00:19:55,080 --> 00:19:57,360
case but there's no reason it couldn't

345
00:19:57,360 --> 00:20:06,570
be extended to a server type system any

346
00:20:06,570 --> 00:20:13,070
more questions yeah okay over there

347
00:20:15,290 --> 00:20:20,220
sorry if this is a terrible question are

348
00:20:20,220 --> 00:20:23,100
you trying to subset the data to avoid

349
00:20:23,100 --> 00:20:27,260
having unused information in the tables

350
00:20:27,260 --> 00:20:30,750
is that basically it because I just

351
00:20:30,750 --> 00:20:33,990
wonder does it really matter if you have

352
00:20:33,990 --> 00:20:36,900
extra stuff on the tables have my how

353
00:20:36,900 --> 00:20:40,140
inefficient is it and can you have some

354
00:20:40,140 --> 00:20:42,080
sort of you know runtime configuration

355
00:20:42,080 --> 00:20:46,590
to say what what you're gonna need and

356
00:20:46,590 --> 00:20:49,320
then reduce your you know the

357
00:20:49,320 --> 00:20:51,630
multiplicative effect you mentioned that

358
00:20:51,630 --> 00:20:57,600
way um so yeah I'll make a stab at what

359
00:20:57,600 --> 00:20:59,550
I think you means you tell me if I'm

360
00:20:59,550 --> 00:21:02,550
wrong technique I've seen used on some

361
00:21:02,550 --> 00:21:05,280
platforms is to pre generate a number of

362
00:21:05,280 --> 00:21:09,300
a CPI tables and use the book menu to

363
00:21:09,300 --> 00:21:11,100
select effectively to select which one

364
00:21:11,100 --> 00:21:18,030
you want to use we we have a problem

365
00:21:18,030 --> 00:21:19,320
with the amount of work it takes to

366
00:21:19,320 --> 00:21:21,900
generate and manage the various views of

367
00:21:21,900 --> 00:21:24,750
different of different views at the same

368
00:21:24,750 --> 00:21:27,570
table and so we're trying to not have

369
00:21:27,570 --> 00:21:28,610
that

370
00:21:28,610 --> 00:21:32,510
the process of selecting between various

371
00:21:32,510 --> 00:21:35,510
tables instead driving the table

372
00:21:35,510 --> 00:21:38,330
generation from the boot option or

373
00:21:38,330 --> 00:21:40,120
whatever

374
00:21:40,120 --> 00:21:46,220
does that answer your question put it

375
00:21:46,220 --> 00:21:47,900
another way if you put all the data in

376
00:21:47,900 --> 00:21:51,530
there if you put all the data in there

377
00:21:51,530 --> 00:21:54,110
yeah and just every platform head all of

378
00:21:54,110 --> 00:21:58,940
it yeah would that work depending on

379
00:21:58,940 --> 00:22:02,570
what the data was a as a for instance if

380
00:22:02,570 --> 00:22:06,040
we tell the operating system it's got a

381
00:22:06,040 --> 00:22:09,760
UART that isn't there

382
00:22:09,850 --> 00:22:12,080
we're not always sure that the operating

383
00:22:12,080 --> 00:22:18,169
system won't crash so I know that's an

384
00:22:18,169 --> 00:22:22,010
unlikely case but take it more no it's a

385
00:22:22,010 --> 00:22:25,130
wider range it's possible to tell the

386
00:22:25,130 --> 00:22:27,740
operating system it's got things that it

387
00:22:27,740 --> 00:22:31,690
would be unhappy to find missing right

388
00:22:31,690 --> 00:22:38,200
okay thank you any more questions

389
00:22:38,200 --> 00:22:44,660
[Applause]

390
00:22:44,660 --> 00:22:51,539
[Music]

