1
00:00:00,000 --> 00:00:04,370
[Music]

2
00:00:04,370 --> 00:00:07,840
give it up for a minute

3
00:00:07,840 --> 00:00:11,630
[Applause]

4
00:00:11,630 --> 00:00:14,580
so I got a little jealous of trammels

5
00:00:14,580 --> 00:00:18,119
picture of Vincent so I was trying her

6
00:00:18,119 --> 00:00:19,740
to this recursion thing and it didn't

7
00:00:19,740 --> 00:00:21,300
quite work as you can see with the

8
00:00:21,300 --> 00:00:26,939
banding yeah so anyway Ram payloads so

9
00:00:26,939 --> 00:00:29,189
they always tell you if you do a talk

10
00:00:29,189 --> 00:00:31,080
you need to have an outline so I did an

11
00:00:31,080 --> 00:00:36,090
outline there so and then I thought

12
00:00:36,090 --> 00:00:38,340
that's not very very informative so you

13
00:00:38,340 --> 00:00:41,219
know I did a slightly more of an outline

14
00:00:41,219 --> 00:00:43,680
so I'm gonna talk about what a Ram

15
00:00:43,680 --> 00:00:45,809
payload is and why you would do it and

16
00:00:45,809 --> 00:00:50,700
how it is done so I am NOT trying to

17
00:00:50,700 --> 00:00:52,110
claim here that this is something you

18
00:00:52,110 --> 00:00:55,379
would do on every platform mainly I'm

19
00:00:55,379 --> 00:00:56,430
trying to say it's something that might

20
00:00:56,430 --> 00:01:00,570
be useful on some platforms so what's

21
00:01:00,570 --> 00:01:01,890
the random payload I mean it's kind of

22
00:01:01,890 --> 00:01:03,719
simple it's just a payload loaded from

23
00:01:03,719 --> 00:01:05,159
the ROM stage instead of loading a Ram

24
00:01:05,159 --> 00:01:06,960
stage you just load the payload from the

25
00:01:06,960 --> 00:01:09,960
rom stage and then that begs the

26
00:01:09,960 --> 00:01:11,400
question because well what is a ram

27
00:01:11,400 --> 00:01:15,150
stage and a bunch of you in here know

28
00:01:15,150 --> 00:01:17,340
more about what it is than I do but I'm

29
00:01:17,340 --> 00:01:20,070
just gonna do my simple definition the

30
00:01:20,070 --> 00:01:21,720
function of the RAM stage is to discover

31
00:01:21,720 --> 00:01:23,939
allocate configure and enable resources

32
00:01:23,939 --> 00:01:27,930
roughly before booting I left one thing

33
00:01:27,930 --> 00:01:31,619
out have some means of communicating the

34
00:01:31,619 --> 00:01:35,070
information to the payload it can and

35
00:01:35,070 --> 00:01:37,140
this is more recent right so the first

36
00:01:37,140 --> 00:01:39,060
eight years this wasn't a thing but

37
00:01:39,060 --> 00:01:41,970
since 2007 or so it's been a thing which

38
00:01:41,970 --> 00:01:44,280
is implementer untimed firmware SMM or

39
00:01:44,280 --> 00:01:47,850
s3 Linux files would speak this began as

40
00:01:47,850 --> 00:01:50,310
originally didn't do that because it ran

41
00:01:50,310 --> 00:01:51,899
on supercomputers and I run on

42
00:01:51,899 --> 00:01:53,640
supercomputers in places that we

43
00:01:53,640 --> 00:01:55,799
absolutely did not ever want to have SMM

44
00:01:55,799 --> 00:01:59,340
running I think even as early as 2000 we

45
00:01:59,340 --> 00:02:04,079
kind of knew SMM was a very bad thing to

46
00:02:04,079 --> 00:02:06,689
put it lightly a the RAM stage is small

47
00:02:06,689 --> 00:02:08,818
in some systems and large on others and

48
00:02:08,818 --> 00:02:10,860
so then you know some people say to me

49
00:02:10,860 --> 00:02:12,780
sometimes oh wait a minute Linux does

50
00:02:12,780 --> 00:02:13,590
that right

51
00:02:13,590 --> 00:02:15,480
next us all that discover blah blah blah

52
00:02:15,480 --> 00:02:17,400
stuff so why aren't you doing it with

53
00:02:17,400 --> 00:02:20,160
Linux and that kind of gets back to the

54
00:02:20,160 --> 00:02:22,110
beginning and we actually never planned

55
00:02:22,110 --> 00:02:24,090
on a ramp stage in the beginning in the

56
00:02:24,090 --> 00:02:26,190
beginning actually Linux was the thing

57
00:02:26,190 --> 00:02:29,580
we loaded so here's the original ROM

58
00:02:29,580 --> 00:02:33,690
stage for Linux BIOS which was actually

59
00:02:33,690 --> 00:02:35,910
completely wrong because between the

60
00:02:35,910 --> 00:02:37,950
time I stopped working with PCI card

61
00:02:37,950 --> 00:02:39,840
design and I got back in the pcs again

62
00:02:39,840 --> 00:02:42,390
this thing called SDRAM happened which

63
00:02:42,390 --> 00:02:45,269
you know I had not a clue about so for

64
00:02:45,269 --> 00:02:46,500
what it's worth when I started this

65
00:02:46,500 --> 00:02:47,940
project I didn't have the faintest idea

66
00:02:47,940 --> 00:02:50,489
what I was doing and it somehow worked

67
00:02:50,489 --> 00:02:52,260
out so anyway so that's the first

68
00:02:52,260 --> 00:02:54,239
totally ridiculous rom stage that didn't

69
00:02:54,239 --> 00:02:57,959
work but you know okay fine that's the

70
00:02:57,959 --> 00:02:59,760
wrong stage let's pretend we got SDRAM

71
00:02:59,760 --> 00:03:01,349
working why don't we do Linux is the RAM

72
00:03:01,349 --> 00:03:03,060
stage in the first place well it

73
00:03:03,060 --> 00:03:06,510
actually turns out we did in 1999 I did

74
00:03:06,510 --> 00:03:09,329
it with Linux 2.2 didn't work get into

75
00:03:09,329 --> 00:03:11,250
that in a second interesting thing I

76
00:03:11,250 --> 00:03:12,780
clicked looked at all the binaries so

77
00:03:12,780 --> 00:03:15,629
the FS Peas on github and the average

78
00:03:15,629 --> 00:03:19,109
the 450k roughly which is bigger than

79
00:03:19,109 --> 00:03:20,609
the Linux kernel that we were putting in

80
00:03:20,609 --> 00:03:24,170
flash back then kind of a surprise

81
00:03:24,170 --> 00:03:27,239
so here's the problem I kind of stumbled

82
00:03:27,239 --> 00:03:28,980
my way through the SDRAM in it and

83
00:03:28,980 --> 00:03:30,569
finally got that working and stumbled my

84
00:03:30,569 --> 00:03:31,920
way through a bunch of early linux

85
00:03:31,920 --> 00:03:34,260
startup and now I plugged in and ie the

86
00:03:34,260 --> 00:03:36,209
IDE device and I got this far and then

87
00:03:36,209 --> 00:03:39,930
it said device disabled BIOS and I

88
00:03:39,930 --> 00:03:41,910
thought I can't be right I am the BIOS

89
00:03:41,910 --> 00:03:43,739
what did I do that I didn't know about

90
00:03:43,739 --> 00:03:45,510
did I kick myself in the back or

91
00:03:45,510 --> 00:03:47,880
something and and the answer was no we

92
00:03:47,880 --> 00:03:49,380
didn't do something behind her back we

93
00:03:49,380 --> 00:03:51,780
failed to do something and Linux back

94
00:03:51,780 --> 00:03:54,419
then interpreted not enabled as disabled

95
00:03:54,419 --> 00:03:58,019
in critical places so and here's the

96
00:03:58,019 --> 00:04:01,530
critical place in tune I to ID PCI type

97
00:04:01,530 --> 00:04:03,389
see there's this loop across the base

98
00:04:03,389 --> 00:04:05,669
address registers and if any one of them

99
00:04:05,669 --> 00:04:08,250
was 0 would just say oh dear me the BIOS

100
00:04:08,250 --> 00:04:10,410
has just disabled the IDE PCI device

101
00:04:10,410 --> 00:04:12,090
which of course we haven't done but we

102
00:04:12,090 --> 00:04:14,069
hadn't enabled it and then it all just

103
00:04:14,069 --> 00:04:19,139
you know it went south at that point so

104
00:04:19,139 --> 00:04:23,430
Linux 2.2 couldn't do it in 2000 and so

105
00:04:23,430 --> 00:04:25,080
I kind of we were really staring to

106
00:04:25,080 --> 00:04:26,910
options in the face

107
00:04:26,910 --> 00:04:29,160
one day option was fixed Linux right fix

108
00:04:29,160 --> 00:04:31,440
Linux is PCI and probing and all that

109
00:04:31,440 --> 00:04:33,390
stuff to work correctly when there

110
00:04:33,390 --> 00:04:37,320
wasn't a BIOS I kind of ping some

111
00:04:37,320 --> 00:04:38,700
friends so binding the Linux community

112
00:04:38,700 --> 00:04:40,290
and they kind of came back with oh

113
00:04:40,290 --> 00:04:43,170
you're just weird so there's no need to

114
00:04:43,170 --> 00:04:44,700
fix this because it works for us you're

115
00:04:44,700 --> 00:04:46,140
the only person and it was literally

116
00:04:46,140 --> 00:04:47,640
true I was the only person on the world

117
00:04:47,640 --> 00:04:49,320
with that problem but you know

118
00:04:49,320 --> 00:04:51,930
nevertheless I was having it and in 1998

119
00:04:51,930 --> 00:04:54,510
I tried to get the ninety subsystem into

120
00:04:54,510 --> 00:04:57,060
Linux and that took eight years and I

121
00:04:57,060 --> 00:05:00,120
didn't know that in 1999 but they

122
00:05:00,120 --> 00:05:01,500
weren't quite as open as they are today

123
00:05:01,500 --> 00:05:03,090
and remember this is free get free bit

124
00:05:03,090 --> 00:05:05,520
get keep bit keeper right this is kind

125
00:05:05,520 --> 00:05:06,540
of like I think there were still

126
00:05:06,540 --> 00:05:08,990
shuffling tar files around I'm not sure

127
00:05:08,990 --> 00:05:11,850
so the second option was fix Linux files

128
00:05:11,850 --> 00:05:14,910
and I went was Plan B I grabbed the

129
00:05:14,910 --> 00:05:17,370
Linux file Linux PCI enumeration code

130
00:05:17,370 --> 00:05:19,050
and jammed it into Linux and things kind

131
00:05:19,050 --> 00:05:20,550
of worked and that became the ROM stage

132
00:05:20,550 --> 00:05:22,740
and the thing we know as a device model

133
00:05:22,740 --> 00:05:29,160
came in kind of envy v2 so well the work

134
00:05:29,160 --> 00:05:30,900
on Linux files started in the second

135
00:05:30,900 --> 00:05:32,250
millennium announced the third

136
00:05:32,250 --> 00:05:34,320
millennium so now we've been around for

137
00:05:34,320 --> 00:05:36,630
like a millennium it seems like a good

138
00:05:36,630 --> 00:05:38,220
time to think this through a little and

139
00:05:38,220 --> 00:05:40,050
and you know the RAM stage has grown

140
00:05:40,050 --> 00:05:41,790
over time from this simple PCI

141
00:05:41,790 --> 00:05:43,980
configurator to a lot more stuff but

142
00:05:43,980 --> 00:05:46,290
Linux has similarly grown in in

143
00:05:46,290 --> 00:05:47,910
capability and they can do a lot more of

144
00:05:47,910 --> 00:05:51,240
what the RAM stage does so the question

145
00:05:51,240 --> 00:05:52,620
is there you can think of an

146
00:05:52,620 --> 00:05:54,150
intersection pointing capabilities

147
00:05:54,150 --> 00:05:55,620
between what Linux knows how to do it

148
00:05:55,620 --> 00:05:58,830
the RAM stage does and a question is you

149
00:05:58,830 --> 00:06:00,930
know do we need the RAM stage it's the

150
00:06:00,930 --> 00:06:02,640
intersection of capabilities at a point

151
00:06:02,640 --> 00:06:05,040
where Linux could just do what the rain

152
00:06:05,040 --> 00:06:09,120
stage does today and part of what drove

153
00:06:09,120 --> 00:06:11,040
this is the FIR early risk five ports

154
00:06:11,040 --> 00:06:13,170
there was no RAM stage I mean the only

155
00:06:13,170 --> 00:06:14,220
thing the RAM stage showed in the

156
00:06:14,220 --> 00:06:15,960
earlier wrist fight for its is loads

157
00:06:15,960 --> 00:06:19,290
payload and I get a little worried

158
00:06:19,290 --> 00:06:21,540
sometimes because I see the risk five

159
00:06:21,540 --> 00:06:23,100
RAM stage and I got to talk to Jonathan

160
00:06:23,100 --> 00:06:25,680
and Phillip about this but I see things

161
00:06:25,680 --> 00:06:27,630
growing in a risk five RAM stage almost

162
00:06:27,630 --> 00:06:30,090
because they're looking at the x86 as a

163
00:06:30,090 --> 00:06:32,700
model and that's not really convincing

164
00:06:32,700 --> 00:06:35,550
reason to do that right so I kind of

165
00:06:35,550 --> 00:06:36,690
worry a little bit about what I see

166
00:06:36,690 --> 00:06:38,880
happening because I saw this happen in a

167
00:06:38,880 --> 00:06:40,920
risk five community well if the x86

168
00:06:40,920 --> 00:06:42,870
does this we should do that so the x86

169
00:06:42,870 --> 00:06:45,210
has SMM well we'd better extend the

170
00:06:45,210 --> 00:06:46,620
privilege mode so we can make sure we

171
00:06:46,620 --> 00:06:48,990
can do a thing like s mm so you know

172
00:06:48,990 --> 00:06:51,450
sort of jumping into the mud pond there

173
00:06:51,450 --> 00:06:53,370
which is not always something you want

174
00:06:53,370 --> 00:06:56,010
to do and further in a lot of cases we

175
00:06:56,010 --> 00:06:57,630
don't want the things the RAM stage can

176
00:06:57,630 --> 00:06:59,490
do for us we don't want s mm we don't

177
00:06:59,490 --> 00:07:01,650
want s3 resume and we don't want to run

178
00:07:01,650 --> 00:07:05,490
times services at all on a lot of

179
00:07:05,490 --> 00:07:06,780
assistants we don't need the RAM stage

180
00:07:06,780 --> 00:07:09,240
to enumerate resources they're simple

181
00:07:09,240 --> 00:07:10,980
and hard-coded or they're PCI and we

182
00:07:10,980 --> 00:07:13,410
know how to enumerate PCI and you know

183
00:07:13,410 --> 00:07:15,270
SMP setup actually in the earliest days

184
00:07:15,270 --> 00:07:17,280
of Linux BIOS we did it in a kernel we

185
00:07:17,280 --> 00:07:19,500
did know SMP setup in Linux files until

186
00:07:19,500 --> 00:07:22,440
about I don't know a 2001 or two when we

187
00:07:22,440 --> 00:07:24,210
had to deal with the k7 which had a very

188
00:07:24,210 --> 00:07:28,950
odd style of SMP setup and we have other

189
00:07:28,950 --> 00:07:31,320
ways to provision things like API so you

190
00:07:31,320 --> 00:07:32,730
know if you look at the RAM stage a lot

191
00:07:32,730 --> 00:07:34,170
of the RAM stage is kind of there in

192
00:07:34,170 --> 00:07:35,790
some places arguably to support other

193
00:07:35,790 --> 00:07:38,400
parts of the RAM stage so that that's

194
00:07:38,400 --> 00:07:40,520
kind of the reason for looking at this

195
00:07:40,520 --> 00:07:42,990
so can we go right through the payload I

196
00:07:42,990 --> 00:07:44,880
did the experiment at the coreboot

197
00:07:44,880 --> 00:07:47,520
conference in Denver in 2015 and kind of

198
00:07:47,520 --> 00:07:49,260
convince myself that well Linux and

199
00:07:49,260 --> 00:07:51,120
Harvey actually could be loaded directly

200
00:07:51,120 --> 00:07:53,700
from the ROM stage the code wasn't great

201
00:07:53,700 --> 00:07:55,590
but it did the job and convinced me and

202
00:07:55,590 --> 00:07:57,210
this is actually what we're hoping to do

203
00:07:57,210 --> 00:08:03,540
in UEFI so here's UEFI today that's a

204
00:08:03,540 --> 00:08:05,850
lot of binary blobs right and and and

205
00:08:05,850 --> 00:08:08,640
there's scary stuff like there's this

206
00:08:08,640 --> 00:08:10,650
stuff right this happens when Linux is

207
00:08:10,650 --> 00:08:13,560
running what does it do the OS present a

208
00:08:13,560 --> 00:08:15,000
fact what does that do

209
00:08:15,000 --> 00:08:17,460
I don't know and there's just a lot of

210
00:08:17,460 --> 00:08:19,640
stuff in there that's read right for me

211
00:08:19,640 --> 00:08:23,220
blood-red and this is what we're working

212
00:08:23,220 --> 00:08:26,520
to we're not there but if we look at the

213
00:08:26,520 --> 00:08:29,850
SCC and PCI footprint in ROM it's about

214
00:08:29,850 --> 00:08:33,210
10% and what we want to do is go right

215
00:08:33,210 --> 00:08:35,159
from that last step which is the board

216
00:08:35,159 --> 00:08:38,610
in it right into Linux and flash and you

217
00:08:38,610 --> 00:08:40,140
saw your route this morning we won't

218
00:08:40,140 --> 00:08:42,479
have an init Ram FS containing you route

219
00:08:42,479 --> 00:08:45,510
with a net food or local boot and if we

220
00:08:45,510 --> 00:08:47,700
desperately need to run some UEFI driver

221
00:08:47,700 --> 00:08:50,910
we're gonna run that out of Linux so the

222
00:08:50,910 --> 00:08:52,860
big big red mess in the middle is gone

223
00:08:52,860 --> 00:08:54,540
completely

224
00:08:54,540 --> 00:08:58,079
and further we're doing we're putting in

225
00:08:58,079 --> 00:09:00,329
this concept of this air gap okay

226
00:09:00,329 --> 00:09:02,880
any idea is like we used to do in Linux

227
00:09:02,880 --> 00:09:06,470
BIOS that thing loads that thing and

228
00:09:06,470 --> 00:09:09,810
this thing never talks back and the

229
00:09:09,810 --> 00:09:11,250
reason is simple we don't trust firmware

230
00:09:11,250 --> 00:09:13,980
so that's a reasonable thing to not

231
00:09:13,980 --> 00:09:15,839
trust right they still in the last two

232
00:09:15,839 --> 00:09:17,819
years so the runtime is gone the OS

233
00:09:17,819 --> 00:09:19,980
president app is gone and this thing

234
00:09:19,980 --> 00:09:22,230
just runs and that's what we're trying

235
00:09:22,230 --> 00:09:27,269
to work to so it's simple rule if you

236
00:09:27,269 --> 00:09:28,620
don't underwear then you'll be owned by

237
00:09:28,620 --> 00:09:32,250
the firmware and we'd rather not be

238
00:09:32,250 --> 00:09:40,470
owned so by the way little digression

239
00:09:40,470 --> 00:09:42,899
the Linux BIOS Linux boot community is

240
00:09:42,899 --> 00:09:45,360
pretty big as Ryan showed we've had a

241
00:09:45,360 --> 00:09:49,259
lot of discussions about signing now

242
00:09:49,259 --> 00:09:51,089
we're stumbling right we're getting

243
00:09:51,089 --> 00:09:52,230
right close to the edge of my lack of

244
00:09:52,230 --> 00:09:53,610
understanding of some of these things

245
00:09:53,610 --> 00:09:55,529
but basically as I understand that the

246
00:09:55,529 --> 00:09:57,660
current model is that vendor keys get

247
00:09:57,660 --> 00:10:02,550
fused in to these fuses and then you can

248
00:10:02,550 --> 00:10:04,829
lock out any further attempts to change

249
00:10:04,829 --> 00:10:08,100
them that's just got to stop so that's

250
00:10:08,100 --> 00:10:10,740
got to get fixed the current model is

251
00:10:10,740 --> 00:10:12,269
just not acceptable and here's the

252
00:10:12,269 --> 00:10:14,760
simple reason one simple reason let's

253
00:10:14,760 --> 00:10:17,699
just say the odium sets the fuses and

254
00:10:17,699 --> 00:10:19,980
then here's a customer let's just i'll

255
00:10:19,980 --> 00:10:22,130
pick on facebook facebook is a customer

256
00:10:22,130 --> 00:10:24,240
if they want to do anything and get it

257
00:10:24,240 --> 00:10:25,500
signed they have to go back to the OEM

258
00:10:25,500 --> 00:10:28,440
okay fine now facebook sells nodes to

259
00:10:28,440 --> 00:10:30,199
john reese company for him to resell

260
00:10:30,199 --> 00:10:32,819
he's got to kind of go back around

261
00:10:32,819 --> 00:10:34,889
facebook to this company then this

262
00:10:34,889 --> 00:10:36,389
company buys them from john murray

263
00:10:36,389 --> 00:10:38,250
they've got to go back to that company

264
00:10:38,250 --> 00:10:39,870
if they ever change the firmware this is

265
00:10:39,870 --> 00:10:42,149
just not an acceptable situation this is

266
00:10:42,149 --> 00:10:43,560
one of those cases where I think chrome

267
00:10:43,560 --> 00:10:46,410
really completely got it right you get a

268
00:10:46,410 --> 00:10:47,850
Chromebook you want to change the keys

269
00:10:47,850 --> 00:10:49,920
you change the keys right cuz it's your

270
00:10:49,920 --> 00:10:52,709
you are the owner so I'm not even

271
00:10:52,709 --> 00:10:55,019
arguing here for open up all the source

272
00:10:55,019 --> 00:10:57,089
give us all the source GPL your source

273
00:10:57,089 --> 00:10:59,009
I'm really just arguing for give us

274
00:10:59,009 --> 00:11:00,600
control of the machine we paid money for

275
00:11:00,600 --> 00:11:05,490
that's a simple argument so if anybody's

276
00:11:05,490 --> 00:11:06,810
interested in having this discussion

277
00:11:06,810 --> 00:11:08,400
Friday or Saturday May

278
00:11:08,400 --> 00:11:10,380
we can sit down and talk about it but

279
00:11:10,380 --> 00:11:12,810
this has really got to change another

280
00:11:12,810 --> 00:11:14,610
thing that we keep getting into for the

281
00:11:14,610 --> 00:11:16,800
last 18 months on this project we've got

282
00:11:16,800 --> 00:11:18,720
to get from a point where we're doing

283
00:11:18,720 --> 00:11:22,020
docks by reverse engineering to docks

284
00:11:22,020 --> 00:11:24,900
and you may hear that theme a few more

285
00:11:24,900 --> 00:11:28,350
times in the next day anyway that air

286
00:11:28,350 --> 00:11:29,910
cough I mentioned is essential because

287
00:11:29,910 --> 00:11:31,680
it breaks this connection between you

288
00:11:31,680 --> 00:11:34,140
and the firm where you don't trust now

289
00:11:34,140 --> 00:11:38,340
it's not that people are bad or people

290
00:11:38,340 --> 00:11:40,170
are dumb it's that people make mistakes

291
00:11:40,170 --> 00:11:42,210
we all make mistakes right I make lots

292
00:11:42,210 --> 00:11:44,640
of mistakes and if you have a model

293
00:11:44,640 --> 00:11:46,140
where someone is going to create a blob

294
00:11:46,140 --> 00:11:48,420
and that blob will be bug free forever

295
00:11:48,420 --> 00:11:50,610
and they're gonna put it in this thing

296
00:11:50,610 --> 00:11:52,500
and are gonna sign it and you are stuck

297
00:11:52,500 --> 00:11:54,420
with that blob it's not a workable model

298
00:11:54,420 --> 00:11:57,540
right and and if that is the model and

299
00:11:57,540 --> 00:11:59,760
that is the model today then your best

300
00:11:59,760 --> 00:12:01,470
decision you can make is simply not to

301
00:12:01,470 --> 00:12:04,620
trust that once you're booted and that

302
00:12:04,620 --> 00:12:06,210
was the model from Linux files right we

303
00:12:06,210 --> 00:12:09,120
locked out SMN we heard a lot of stuff

304
00:12:09,120 --> 00:12:10,860
about it was impossible to create a

305
00:12:10,860 --> 00:12:12,830
server platform that didn't have SMM

306
00:12:12,830 --> 00:12:14,940
Linux Network shipped well over a

307
00:12:14,940 --> 00:12:16,800
hundred thousand nodes with no SMM they

308
00:12:16,800 --> 00:12:21,270
worked fine so um you know in 2000 the

309
00:12:21,270 --> 00:12:23,370
plan was no SMM and actually no acti

310
00:12:23,370 --> 00:12:25,200
because we knew a guy from AMD who had

311
00:12:25,200 --> 00:12:27,810
resigned from the ACPI committee because

312
00:12:27,810 --> 00:12:29,340
he told us it was just the exploit

313
00:12:29,340 --> 00:12:30,780
heaven and he didn't want anything to do

314
00:12:30,780 --> 00:12:31,680
with it

315
00:12:31,680 --> 00:12:33,720
we're not sure what to do about acne but

316
00:12:33,720 --> 00:12:36,390
oh well we did keep the air-gap for the

317
00:12:36,390 --> 00:12:38,010
first eight years of linux fast until

318
00:12:38,010 --> 00:12:40,800
laptops and you know i think we all know

319
00:12:40,800 --> 00:12:42,030
the story there if you're gonna do a

320
00:12:42,030 --> 00:12:43,410
laptop you're gonna do power management

321
00:12:43,410 --> 00:12:45,510
and the only model you've got there is

322
00:12:45,510 --> 00:12:50,580
SMM and act ii but what is it BIOS and I

323
00:12:50,580 --> 00:12:51,990
got to thinking about this and part of

324
00:12:51,990 --> 00:12:54,090
the reason is almost embarrassing I

325
00:12:54,090 --> 00:12:56,070
wrote my first firmware 40 years ago

326
00:12:56,070 --> 00:13:00,570
this year and it gives you some

327
00:13:00,570 --> 00:13:03,840
perspective so in 75 Garry killed well

328
00:13:03,840 --> 00:13:05,010
he's kind of the guy who invented the

329
00:13:05,010 --> 00:13:07,590
term BIOS for CPM you know you let it

330
00:13:07,590 --> 00:13:09,270
seep yet from a floppy and then in your

331
00:13:09,270 --> 00:13:12,840
1 kilo byte a EEPROM on your inside or

332
00:13:12,840 --> 00:13:15,060
out there right you had this little

333
00:13:15,060 --> 00:13:19,080
library any idea is CPM set the rules

334
00:13:19,080 --> 00:13:19,950
right

335
00:13:19,950 --> 00:13:21,780
CPM said if you're gonna run me

336
00:13:21,780 --> 00:13:24,330
you're gonna implement this to our

337
00:13:24,330 --> 00:13:27,600
specification so CPM ruled the roost

338
00:13:27,600 --> 00:13:29,430
right they they defined what that

339
00:13:29,430 --> 00:13:35,670
interface was then comes 1980 and it got

340
00:13:35,670 --> 00:13:37,350
a little weird because IBM released the

341
00:13:37,350 --> 00:13:38,940
PC and they actually released the source

342
00:13:38,940 --> 00:13:40,830
code to the BIOS but it was copyrighted

343
00:13:40,830 --> 00:13:43,200
but but this weird thing happened that

344
00:13:43,200 --> 00:13:44,880
it flipped right it's like the boat

345
00:13:44,880 --> 00:13:48,360
flipped over all of a sudden the thing

346
00:13:48,360 --> 00:13:50,070
that set the rules was the BIOS not some

347
00:13:50,070 --> 00:13:52,560
kernel and if that's the initial

348
00:13:52,560 --> 00:13:54,960
condition to where we are today where

349
00:13:54,960 --> 00:13:56,820
BIOS is set rules and we have to conform

350
00:13:56,820 --> 00:13:58,380
to those rules it wasn't that way in the

351
00:13:58,380 --> 00:14:01,410
first couple of years so where we are

352
00:14:01,410 --> 00:14:04,050
today is the firmware it's a 81 92 times

353
00:14:04,050 --> 00:14:06,720
larger it's a hardware adaptation layer

354
00:14:06,720 --> 00:14:08,940
it's a vendor lock-in tool I mean you

355
00:14:08,940 --> 00:14:10,380
can take your choice of these I tend to

356
00:14:10,380 --> 00:14:12,630
pick them all it's a complex operating

357
00:14:12,630 --> 00:14:14,220
system it's a large collection to build

358
00:14:14,220 --> 00:14:15,570
in Valle 'nor abilities and exploits

359
00:14:15,570 --> 00:14:17,820
it's a very inefficient way to access to

360
00:14:17,820 --> 00:14:20,280
services and in my opinion is something

361
00:14:20,280 --> 00:14:21,660
and everyone to use once you're booted

362
00:14:21,660 --> 00:14:23,760
that's the reason for what we're doing

363
00:14:23,760 --> 00:14:29,070
here and yet it keeps recurring so the

364
00:14:29,070 --> 00:14:31,530
risk 5 model is we've got the super end

365
00:14:31,530 --> 00:14:33,420
user modes and there's this thing called

366
00:14:33,420 --> 00:14:36,630
machine mode and machine mode is

367
00:14:36,630 --> 00:14:39,480
provided by the firmware vendor ok and

368
00:14:39,480 --> 00:14:41,610
you know do we have to do that actually

369
00:14:41,610 --> 00:14:44,460
we don't in the risk 5 this the one

370
00:14:44,460 --> 00:14:46,260
privileged mode the kernel could load M

371
00:14:46,260 --> 00:14:47,820
mode but we're all kind of working

372
00:14:47,820 --> 00:14:49,710
toward this model and you can see the

373
00:14:49,710 --> 00:14:52,140
patch is coming into coreboot where the

374
00:14:52,140 --> 00:14:54,000
firmware is going to provide the M mode

375
00:14:54,000 --> 00:14:55,680
and it's going to lock out the kernel

376
00:14:55,680 --> 00:14:57,870
from changing it that's called security

377
00:14:57,870 --> 00:15:00,720
and some planet or universe but it

378
00:15:00,720 --> 00:15:02,370
really doesn't have to be that way it's

379
00:15:02,370 --> 00:15:04,410
just the way we think about it because

380
00:15:04,410 --> 00:15:05,610
that's how we think about everything

381
00:15:05,610 --> 00:15:09,089
right firmware is permanent it has a

382
00:15:09,089 --> 00:15:11,250
higher privilege in anything it's the

383
00:15:11,250 --> 00:15:12,780
route of trust and the only problem with

384
00:15:12,780 --> 00:15:14,910
all that is this wrong because we can't

385
00:15:14,910 --> 00:15:17,190
trust it so we have an untrustable route

386
00:15:17,190 --> 00:15:20,610
of trust now I'm talking to one risk 5

387
00:15:20,610 --> 00:15:23,070
company that's working with someone I

388
00:15:23,070 --> 00:15:25,200
know in do-e they're not going to do

389
00:15:25,200 --> 00:15:27,960
that in their in their risk 5

390
00:15:27,960 --> 00:15:30,480
implementation the M mode code will be

391
00:15:30,480 --> 00:15:34,400
supplied by the kernel not the firmware

392
00:15:34,840 --> 00:15:36,640
so what's wrong with em mode firmware

393
00:15:36,640 --> 00:15:38,680
libraries well why would you trust it

394
00:15:38,680 --> 00:15:40,750
right it's gonna be written by the same

395
00:15:40,750 --> 00:15:43,600
people you know at these vendors off

396
00:15:43,600 --> 00:15:45,910
somewhere I'm not playing fingers that

397
00:15:45,910 --> 00:15:48,279
even the chipset guys somebody is gonna

398
00:15:48,279 --> 00:15:49,870
hack this thing up because we're trying

399
00:15:49,870 --> 00:15:51,550
to get a board out in schedule and

400
00:15:51,550 --> 00:15:53,350
they're gonna insert bugs that's what

401
00:15:53,350 --> 00:15:56,020
keeps happening so why on earth would

402
00:15:56,020 --> 00:15:58,450
you want to trust em mode stuff supplied

403
00:15:58,450 --> 00:16:00,070
by the kernel like I mean that firmware

404
00:16:00,070 --> 00:16:02,080
I can't think of a reason you know and

405
00:16:02,080 --> 00:16:03,880
how and when do you update if you if you

406
00:16:03,880 --> 00:16:05,260
have a bug in M mode you've got to

407
00:16:05,260 --> 00:16:06,550
reflash the firmware and all your

408
00:16:06,550 --> 00:16:08,920
machines if you supply the end mode with

409
00:16:08,920 --> 00:16:11,170
the kernel you reboot and you have the

410
00:16:11,170 --> 00:16:14,589
fixed end mode code so you know if you

411
00:16:14,589 --> 00:16:15,910
have an M mode security fix and the

412
00:16:15,910 --> 00:16:17,740
kernel supplies the code you reboot done

413
00:16:17,740 --> 00:16:19,810
you've you've updated your M mode code

414
00:16:19,810 --> 00:16:24,180
you didn't have to reflash for formants

415
00:16:24,180 --> 00:16:26,710
you know what's the API for these things

416
00:16:26,710 --> 00:16:30,670
it's always maximally paranoid okay if

417
00:16:30,670 --> 00:16:32,680
you write firmware that's going to be

418
00:16:32,680 --> 00:16:34,720
called by something you'd better assume

419
00:16:34,720 --> 00:16:37,630
the thing calling you is bug-ridden you

420
00:16:37,630 --> 00:16:40,450
can't trust it at all okay so you've got

421
00:16:40,450 --> 00:16:42,820
to do this a maximal saving of state to

422
00:16:42,820 --> 00:16:46,260
make sure that you don't get hurt and

423
00:16:46,260 --> 00:16:48,640
you know I've been here before on the

424
00:16:48,640 --> 00:16:51,370
IBM Blue Gene one of the last series in

425
00:16:51,370 --> 00:16:53,560
order to sort of preserve this IP layer

426
00:16:53,560 --> 00:16:55,210
they created this giant blob of a

427
00:16:55,210 --> 00:16:56,830
firmware if you wanted to send a packet

428
00:16:56,830 --> 00:16:59,320
on the IBM Blue Gene Taurus the idea was

429
00:16:59,320 --> 00:17:01,360
let's call this thing in firmware to

430
00:17:01,360 --> 00:17:03,970
send the packet for us okay well when

431
00:17:03,970 --> 00:17:05,380
you called that firmware on Blue Gene

432
00:17:05,380 --> 00:17:07,300
headed to a full TLB and cache flush and

433
00:17:07,300 --> 00:17:08,740
change the page table route so it was

434
00:17:08,740 --> 00:17:10,660
incredibly horrendously inefficient and

435
00:17:10,660 --> 00:17:12,760
you know all the guys who did kernels on

436
00:17:12,760 --> 00:17:14,530
Blue Gene including me we just ignored

437
00:17:14,530 --> 00:17:15,849
the firmware and we wrote our own code

438
00:17:15,849 --> 00:17:17,890
to send packets on the torus because we

439
00:17:17,890 --> 00:17:20,349
couldn't take that performance hit so

440
00:17:20,349 --> 00:17:22,480
you know I'm just not a big fan of you

441
00:17:22,480 --> 00:17:25,300
know firmware I call because it hasn't

442
00:17:25,300 --> 00:17:28,359
proved to really be a great idea and

443
00:17:28,359 --> 00:17:30,160
where is on risk 5 if the kernel is the

444
00:17:30,160 --> 00:17:32,910
end mode it can optimize calls to the

445
00:17:32,910 --> 00:17:38,290
end mode code so here's the slightly I I

446
00:17:38,290 --> 00:17:40,060
think this is the thing I expect to get

447
00:17:40,060 --> 00:17:43,360
beat up about kernel should should PI

448
00:17:43,360 --> 00:17:45,100
firmware services they need and this is

449
00:17:45,100 --> 00:17:46,780
kind of building on last year or I was

450
00:17:46,780 --> 00:17:47,580
showing that

451
00:17:47,580 --> 00:17:50,040
a Linux kernel could supply the SMM code

452
00:17:50,040 --> 00:17:51,300
and use it instead of the firmware

453
00:17:51,300 --> 00:17:53,550
supplied code if there's a firmware

454
00:17:53,550 --> 00:17:56,580
service mode in the CPU then let the

455
00:17:56,580 --> 00:17:58,500
kernel supply the code it runs that's

456
00:17:58,500 --> 00:18:00,360
real easy to do on risk 5 most of that

457
00:18:00,360 --> 00:18:02,010
stuff's to find in the core boot arch

458
00:18:02,010 --> 00:18:04,380
directories very easy to add that to

459
00:18:04,380 --> 00:18:07,410
Linux and have Linux set it up and you

460
00:18:07,410 --> 00:18:09,540
know this this policy though act 10

461
00:18:09,540 --> 00:18:12,090
sacks against this tendency people have

462
00:18:12,090 --> 00:18:14,280
like m-mode code or whatever code you

463
00:18:14,280 --> 00:18:16,500
want to call it you know people say oh

464
00:18:16,500 --> 00:18:18,480
we need this extra thing I know we'll

465
00:18:18,480 --> 00:18:20,190
just add another function mo then it

466
00:18:20,190 --> 00:18:21,750
grows without bound that's what we've

467
00:18:21,750 --> 00:18:24,210
seen happen that's why you know BIOS is

468
00:18:24,210 --> 00:18:26,040
on PCs or now eight megabytes of runtime

469
00:18:26,040 --> 00:18:29,130
stuff so I also think it would force a

470
00:18:29,130 --> 00:18:31,440
degree of your strength and what gets

471
00:18:31,440 --> 00:18:35,040
foot into n mode and it would also this

472
00:18:35,040 --> 00:18:37,800
one's important you know this stuff is

473
00:18:37,800 --> 00:18:41,040
always a lock in it's always a chance to

474
00:18:41,040 --> 00:18:42,450
lock you in to a given vendor because

475
00:18:42,450 --> 00:18:44,910
they supply some firmware library and

476
00:18:44,910 --> 00:18:46,470
the equivalent of M mode no one else

477
00:18:46,470 --> 00:18:47,730
supplies and now you've discovered

478
00:18:47,730 --> 00:18:48,990
you're dependent on it and you can't

479
00:18:48,990 --> 00:18:51,420
change vendors anyway back to the RAM

480
00:18:51,420 --> 00:18:55,530
payload that's my rant there's a ram

481
00:18:55,530 --> 00:18:58,890
payload for Concord org the rom stage

482
00:18:58,890 --> 00:19:01,620
loads the RAM payload if that fails goes

483
00:19:01,620 --> 00:19:03,690
directly to the RAM stage that's very

484
00:19:03,690 --> 00:19:07,110
handy for when things go wrong aside I

485
00:19:07,110 --> 00:19:09,450
think we need to I keep running across

486
00:19:09,450 --> 00:19:12,060
calls to run Ram stage that are followed

487
00:19:12,060 --> 00:19:14,580
by a die but Renton Ram stage never

488
00:19:14,580 --> 00:19:16,500
returns or didn't used to because it's

489
00:19:16,500 --> 00:19:18,750
got a die in and if it fails so we've

490
00:19:18,750 --> 00:19:20,400
got some kind of weirdness in the way we

491
00:19:20,400 --> 00:19:22,260
call Ram stage a lot of its historical

492
00:19:22,260 --> 00:19:23,790
and goes back I know some of that code

493
00:19:23,790 --> 00:19:25,290
is 10-15 years old

494
00:19:25,290 --> 00:19:27,930
anyway if the RAM payload works you get

495
00:19:27,930 --> 00:19:30,930
a prompt Brian talked about Linux kernel

496
00:19:30,930 --> 00:19:32,160
and you root this morning that's what

497
00:19:32,160 --> 00:19:33,720
the test I'm doing does which I'm going

498
00:19:33,720 --> 00:19:37,770
to show you in a minute so it changes 13

499
00:19:37,770 --> 00:19:40,040
files

500
00:19:40,170 --> 00:19:41,670
I added into the payload called Linux

501
00:19:41,670 --> 00:19:44,720
check which made my life way way easier

502
00:19:44,720 --> 00:19:47,250
Linux check is is intended to be a

503
00:19:47,250 --> 00:19:48,960
regression test that may grow over time

504
00:19:48,960 --> 00:19:51,060
and all NX check does is grovel just

505
00:19:51,060 --> 00:19:52,440
hunts around the machine looking for

506
00:19:52,440 --> 00:19:53,490
things that might cause trouble for

507
00:19:53,490 --> 00:19:56,430
Linux so it's a nice small piece of code

508
00:19:56,430 --> 00:19:58,620
it makes sure you have a console that

509
00:19:58,620 --> 00:20:00,600
the serial is set up that a number of

510
00:20:00,600 --> 00:20:01,799
memories is in the 8

511
00:20:01,799 --> 00:20:03,330
a table is greater than zero that's

512
00:20:03,330 --> 00:20:05,789
always nice Linux will panicked and

513
00:20:05,789 --> 00:20:08,789
visibly if that is zero so you know

514
00:20:08,789 --> 00:20:11,190
Linux jet gets handy for finding things

515
00:20:11,190 --> 00:20:13,679
that Linux will not tell you have

516
00:20:13,679 --> 00:20:15,710
happened

517
00:20:15,710 --> 00:20:17,700
and the only problem I've found so far

518
00:20:17,700 --> 00:20:19,470
once I got through some of this is that

519
00:20:19,470 --> 00:20:21,059
core boot ROM stage praying at least for

520
00:20:21,059 --> 00:20:23,009
me doesn't actually work in qmu anymore

521
00:20:23,009 --> 00:20:28,649
don't know why yet I added a ramp a load

522
00:20:28,649 --> 00:20:31,529
config bearable in CDF as in Ryan I've

523
00:20:31,529 --> 00:20:33,480
caught a call to run ramp rogue this is

524
00:20:33,480 --> 00:20:34,950
kind of boring stuff and I'm just quick

525
00:20:34,950 --> 00:20:38,489
on a quick run through it in the yard

526
00:20:38,489 --> 00:20:41,159
8250 i/o if config ramp payload is set

527
00:20:41,159 --> 00:20:43,379
then I call your fill lb which adds a

528
00:20:43,379 --> 00:20:47,549
table entry for the serial port and then

529
00:20:47,549 --> 00:20:49,619
in the you know I created this function

530
00:20:49,619 --> 00:20:51,690
run ramp rogue and that changes program

531
00:20:51,690 --> 00:20:54,600
loading todd h one weird thing i added

532
00:20:54,600 --> 00:20:57,149
my own compact boot mem write memory

533
00:20:57,149 --> 00:20:59,820
table because calling the standard one

534
00:20:59,820 --> 00:21:01,649
that runs on the ram staged rings in a

535
00:21:01,649 --> 00:21:02,940
lot of dependencies on tables that we

536
00:21:02,940 --> 00:21:04,580
don't actually create in the rom stage

537
00:21:04,580 --> 00:21:07,109
so it proved to be a lot simpler just to

538
00:21:07,109 --> 00:21:12,109
have a real truncated write memory table

539
00:21:13,609 --> 00:21:16,769
in the source leadcore boot table i just

540
00:21:16,769 --> 00:21:19,379
disabled a few things I enable CBM list

541
00:21:19,379 --> 00:21:20,549
and here's the one that's been a little

542
00:21:20,549 --> 00:21:22,440
controversial since I started doing this

543
00:21:22,440 --> 00:21:25,049
I've got a self loader for the ROM stage

544
00:21:25,049 --> 00:21:26,309
and it actually looks a lot like the

545
00:21:26,309 --> 00:21:28,859
Linux BIOS cv3 self loader it's a lot

546
00:21:28,859 --> 00:21:30,090
simpler than the RAM stage version

547
00:21:30,090 --> 00:21:32,129
because I don't have anything in RAM

548
00:21:32,129 --> 00:21:34,769
more or less right so I just called and

549
00:21:34,769 --> 00:21:37,859
and move it all to memory the push fact

550
00:21:37,859 --> 00:21:39,720
I got is we should only have one self

551
00:21:39,720 --> 00:21:42,259
loader my pushback on the pushback is

552
00:21:42,259 --> 00:21:46,619
self is a data structure format self

553
00:21:46,619 --> 00:21:47,879
loaders walked that data structure

554
00:21:47,879 --> 00:21:50,399
format and take certain actions similar

555
00:21:50,399 --> 00:21:52,049
to elf I don't see a problem with having

556
00:21:52,049 --> 00:21:54,059
to self loaders one being very complex

557
00:21:54,059 --> 00:21:56,129
and one being very simple so we can

558
00:21:56,129 --> 00:21:57,570
argue about that in the next few days

559
00:21:57,570 --> 00:21:59,779
when we're here I'm sure we will but

560
00:21:59,779 --> 00:22:05,039
that's my take on self loaders so that's

561
00:22:05,039 --> 00:22:07,109
it so far what about acti yeah what

562
00:22:07,109 --> 00:22:08,669
about efi we're not sure of that act ii

563
00:22:08,669 --> 00:22:11,639
Trammell's work on heads he actually was

564
00:22:11,639 --> 00:22:13,289
talking about loading a key from a file

565
00:22:13,289 --> 00:22:15,210
in unit ram FS rather than you

566
00:22:15,210 --> 00:22:16,770
one in the firmware because guess what

567
00:22:16,770 --> 00:22:19,169
we don't trust firmware so we're not

568
00:22:19,169 --> 00:22:22,399
quite sure what we want to do a lot acti

569
00:22:22,399 --> 00:22:24,990
it's just there have been issues in

570
00:22:24,990 --> 00:22:27,539
these active tables over the years and

571
00:22:27,539 --> 00:22:30,299
so I I don't think we'll want to quite

572
00:22:30,299 --> 00:22:32,159
do the full air gap with coreboot but

573
00:22:32,159 --> 00:22:37,409
never know so summary is random payloads

574
00:22:37,409 --> 00:22:40,559
were the original Linux files design the

575
00:22:40,559 --> 00:22:42,360
RAM stage was created to cover for these

576
00:22:42,360 --> 00:22:45,600
Linux limitations and they just haven't

577
00:22:45,600 --> 00:22:47,370
proven to be needed in all cases and

578
00:22:47,370 --> 00:22:48,840
this began when I was looking at the

579
00:22:48,840 --> 00:22:50,909
risk 5 and it continued when I was and

580
00:22:50,909 --> 00:22:52,440
then looking at UEFI when we were

581
00:22:52,440 --> 00:22:54,000
throwing away everything after the PGI

582
00:22:54,000 --> 00:22:56,340
and it seemed worth going back and

583
00:22:56,340 --> 00:22:59,809
taking a look at what we do in coreboot

584
00:22:59,809 --> 00:23:02,880
we don't want to use run time firmware

585
00:23:02,880 --> 00:23:04,500
services because we keep getting burned

586
00:23:04,500 --> 00:23:06,570
by them and that then makes the payloads

587
00:23:06,570 --> 00:23:09,270
look more sensible than ever and we're

588
00:23:09,270 --> 00:23:10,980
looking at developing them for a ufi

589
00:23:10,980 --> 00:23:13,110
that's of course just about well

590
00:23:13,110 --> 00:23:14,789
work-in-progress coreboot going to demo

591
00:23:14,789 --> 00:23:16,980
it and you boot on those processor

592
00:23:16,980 --> 00:23:19,380
architectures and I've forgotten I left

593
00:23:19,380 --> 00:23:23,149
off power because this works on power

594
00:23:23,149 --> 00:23:30,179
alright so let me do the demo so this is

595
00:23:30,179 --> 00:23:34,620
qmu you know normal dot rom you know

596
00:23:34,620 --> 00:23:36,210
standard Ram stage with the Linux

597
00:23:36,210 --> 00:23:39,350
payload and as I mentioned this is a

598
00:23:39,350 --> 00:23:41,909
basically this is the kernel that Ryan

599
00:23:41,909 --> 00:23:43,380
was talking about this morning along

600
00:23:43,380 --> 00:23:47,549
with you root as unit ram FS so way we

601
00:23:47,549 --> 00:23:49,730
go

602
00:23:51,140 --> 00:23:53,610
okay now ruff that prompt is the root

603
00:23:53,610 --> 00:23:56,159
shell prompt so you know this this

604
00:23:56,159 --> 00:23:57,960
varies and and I haven't done enough

605
00:23:57,960 --> 00:24:00,450
runs because I'm not a statistician but

606
00:24:00,450 --> 00:24:02,850
it kind of is like in above 5 type

607
00:24:02,850 --> 00:24:06,690
territory most of the time you can

608
00:24:06,690 --> 00:24:08,429
hammer me on my lack of statistical

609
00:24:08,429 --> 00:24:11,399
rigor that's fine and here's the RAM

610
00:24:11,399 --> 00:24:16,320
payload I mean even in queue of you you

611
00:24:16,320 --> 00:24:21,690
can see well same time don't like anyway

612
00:24:21,690 --> 00:24:23,370
generally this seems to be faster and

613
00:24:23,370 --> 00:24:24,960
it's not surprising because no way about

614
00:24:24,960 --> 00:24:27,610
it if you load the RAM if you load the

615
00:24:27,610 --> 00:24:30,280
colonel from the rum stage that's hard

616
00:24:30,280 --> 00:24:31,690
to see it being much slower than loading

617
00:24:31,690 --> 00:24:33,429
the RAM stage from the rum stage and

618
00:24:33,429 --> 00:24:34,660
then loading the colonel from the RAM

619
00:24:34,660 --> 00:24:38,679
stage so it actually works though and

620
00:24:38,679 --> 00:24:41,290
after i po the pci thing we have a

621
00:24:41,290 --> 00:24:43,840
command in your route called pci just

622
00:24:43,840 --> 00:24:45,910
prints the pci bus and you know you can

623
00:24:45,910 --> 00:24:47,950
do stuff like well show me your config

624
00:24:47,950 --> 00:24:52,150
space and the thing i notice here is if

625
00:24:52,150 --> 00:24:54,100
for those of you who really know pci

626
00:24:54,100 --> 00:24:57,970
well if you look at sort of config space

627
00:24:57,970 --> 00:24:59,110
for i don't think i've actually

628
00:24:59,110 --> 00:25:01,240
correctly configured that command

629
00:25:01,240 --> 00:25:04,360
register but it's and I don't think well

630
00:25:04,360 --> 00:25:05,770
I think that might be a bar there I'm

631
00:25:05,770 --> 00:25:07,870
not sure so I'm not entirely convinced

632
00:25:07,870 --> 00:25:09,669
that the PCI configuration is correct

633
00:25:09,669 --> 00:25:13,090
yet but I think it's fairly easy to deal

634
00:25:13,090 --> 00:25:18,910
with that kind of issue yeah so that's

635
00:25:18,910 --> 00:25:24,880
kind of it work in progress I think we

636
00:25:24,880 --> 00:25:26,740
could make this go and I think we can

637
00:25:26,740 --> 00:25:28,720
sort of dispense with what the RAM stage

638
00:25:28,720 --> 00:25:31,390
does and more importantly we're trying

639
00:25:31,390 --> 00:25:33,070
you know I'd kind of actually like this

640
00:25:33,070 --> 00:25:36,220
to be sort of competitive I you're gonna

641
00:25:36,220 --> 00:25:37,570
be surprised to hear me say this with

642
00:25:37,570 --> 00:25:40,480
UEFI boot and one way to get there is is

643
00:25:40,480 --> 00:25:43,780
not run the ramp stage and boy am i I'm

644
00:25:43,780 --> 00:25:45,309
also finishing really early so you're

645
00:25:45,309 --> 00:25:46,510
getting oh five minutes left

646
00:25:46,510 --> 00:25:48,910
oh I'm not finishing early it's time for

647
00:25:48,910 --> 00:25:52,570
questions yeah thank you very much yeah

648
00:25:52,570 --> 00:25:56,549
the round of applause thank you

649
00:25:56,790 --> 00:25:58,300
[Applause]

650
00:25:58,300 --> 00:26:00,590
so it's question-and-answer time so

651
00:26:00,590 --> 00:26:03,950
you're supplying the questions supplying

652
00:26:03,950 --> 00:26:06,320
the answers or so I've heard

653
00:26:06,320 --> 00:26:08,780
what's it who survives questions that's

654
00:26:08,780 --> 00:26:16,240
such a new thing for me here so bright

655
00:26:17,080 --> 00:26:21,590
so what do you need from other users who

656
00:26:21,590 --> 00:26:24,830
are interested in coreboot you know rom

657
00:26:24,830 --> 00:26:27,830
stage do you need tests already yes do

658
00:26:27,830 --> 00:26:31,429
you think it would work on real boards

659
00:26:31,429 --> 00:26:34,910
or would you be interested in tests or

660
00:26:34,910 --> 00:26:36,830
the Theresa I'm glad I'm here is because

661
00:26:36,830 --> 00:26:38,510
of the two-day hackathon I'm hoping

662
00:26:38,510 --> 00:26:39,800
someone comes up to me and says I

663
00:26:39,800 --> 00:26:42,110
brought in x86 with coreboot let's give

664
00:26:42,110 --> 00:26:43,790
it a shot okay

665
00:26:43,790 --> 00:26:47,390
and further yes anyone who wants to jump

666
00:26:47,390 --> 00:26:49,640
in and give me a hand the more we

667
00:26:49,640 --> 00:26:51,679
learned a better right maybe this will

668
00:26:51,679 --> 00:26:53,690
never work mate I'm actually pretty sure

669
00:26:53,690 --> 00:26:56,440
on wrist five it will work very well

670
00:26:56,440 --> 00:27:01,280
depending x86 not sure yet we'll see

671
00:27:01,280 --> 00:27:04,070
but yeah I'd anything anyone wants to do

672
00:27:04,070 --> 00:27:05,780
it love to have the help including code

673
00:27:05,780 --> 00:27:12,550
reviews of course so any more questions

674
00:27:12,550 --> 00:27:16,340
all right okay thanks thank you have

675
00:27:16,340 --> 00:27:18,560
another round of applause for one

676
00:27:18,560 --> 00:27:22,180
[Applause]

677
00:27:22,180 --> 00:27:29,059
[Music]

