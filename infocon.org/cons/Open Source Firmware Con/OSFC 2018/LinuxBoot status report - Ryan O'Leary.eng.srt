1
00:00:00,000 --> 00:00:04,730
[Music]

2
00:00:04,730 --> 00:00:08,940
so I'm Mannie Larry from Google I came

3
00:00:08,940 --> 00:00:11,400
here today to talk about Linux boot so

4
00:00:11,400 --> 00:00:13,710
the next boot is the in clinics boot is

5
00:00:13,710 --> 00:00:16,920
to a place large portions of proprietary

6
00:00:16,920 --> 00:00:19,439
familiar with a Linux kernel so this

7
00:00:19,439 --> 00:00:21,510
project isn't from like a single team or

8
00:00:21,510 --> 00:00:24,570
a single company it's a large large

9
00:00:24,570 --> 00:00:27,689
collaboration between many people as you

10
00:00:27,689 --> 00:00:29,720
see here

11
00:00:29,720 --> 00:00:31,830
I'll still begin the talk by talking

12
00:00:31,830 --> 00:00:36,260
about the existing UEFI booting system

13
00:00:36,260 --> 00:00:39,719
so I'll give an overview of it and how

14
00:00:39,719 --> 00:00:43,020
will fit Linux boot into it following

15
00:00:43,020 --> 00:00:44,850
that I'll discuss how you can take your

16
00:00:44,850 --> 00:00:48,840
own firmware image extract the pieces

17
00:00:48,840 --> 00:00:52,260
from it and replace the necessary

18
00:00:52,260 --> 00:00:55,350
components to use Linux as premier then

19
00:00:55,350 --> 00:00:57,420
I'll talk about the init VMFS that we

20
00:00:57,420 --> 00:01:00,660
use at Google called you root finally

21
00:01:00,660 --> 00:01:03,390
I'll talk about future goals and the

22
00:01:03,390 --> 00:01:07,320
people involved in the project so some

23
00:01:07,320 --> 00:01:11,159
of you may have only seen this image so

24
00:01:11,159 --> 00:01:15,450
it's a it's the phasing of you UEFI and

25
00:01:15,450 --> 00:01:18,869
so it starts at security PII and then it

26
00:01:18,869 --> 00:01:21,270
vents drivers and then it selects

27
00:01:21,270 --> 00:01:24,900
boot device to use which essentially

28
00:01:24,900 --> 00:01:28,490
continues to be grabbed and Linux and so

29
00:01:28,490 --> 00:01:32,610
UEFI has many OS like features it has

30
00:01:32,610 --> 00:01:35,430
scheduling it has events it has a file

31
00:01:35,430 --> 00:01:37,890
system applications an entire network

32
00:01:37,890 --> 00:01:41,759
stack it has drivers for disk drivers

33
00:01:41,759 --> 00:01:46,860
for USB and the general idea is why do

34
00:01:46,860 --> 00:01:49,280
we want an opt-in system to run before

35
00:01:49,280 --> 00:01:52,470
an offering system like why can't we go

36
00:01:52,470 --> 00:01:54,390
directly to Linux and use all the

37
00:01:54,390 --> 00:01:57,990
existing drivers that it has um so I'll

38
00:01:57,990 --> 00:02:01,049
talk about some good parts of ufi and

39
00:02:01,049 --> 00:02:04,020
some issues that it has so the good

40
00:02:04,020 --> 00:02:07,489
parts it has well-defined phasing it

41
00:02:07,489 --> 00:02:10,020
definitely architecture independent is a

42
00:02:10,020 --> 00:02:11,730
lot more than the previous invitation a

43
00:02:11,730 --> 00:02:13,440
lot more than

44
00:02:13,440 --> 00:02:17,880
PC vias it's modular we're peaceable has

45
00:02:17,880 --> 00:02:19,260
its file system you can replace

46
00:02:19,260 --> 00:02:23,280
individual files with other files it has

47
00:02:23,280 --> 00:02:25,080
support for backwards compatibility and

48
00:02:25,080 --> 00:02:27,090
how it definitely has a very very wide

49
00:02:27,090 --> 00:02:31,130
adoption especially among x86 it has

50
00:02:31,130 --> 00:02:36,420
pretty much any laptop server or x86

51
00:02:36,420 --> 00:02:39,300
system will use UEFI on the bad the

52
00:02:39,300 --> 00:02:42,150
issues that it has is a lot of the

53
00:02:42,150 --> 00:02:44,610
implementations it doesn't have to be

54
00:02:44,610 --> 00:02:45,560
this way but a lot of the

55
00:02:45,560 --> 00:02:48,060
implementations are close to us so you

56
00:02:48,060 --> 00:02:49,260
cannot view the source code and know

57
00:02:49,260 --> 00:02:51,540
what you're running it could be hard to

58
00:02:51,540 --> 00:02:54,960
update without vendors of what if you

59
00:02:54,960 --> 00:02:56,490
want to learn if you want to make

60
00:02:56,490 --> 00:02:58,710
drivers for it you first have to learn

61
00:02:58,710 --> 00:03:02,940
how to yep to learn the ufi libraries

62
00:03:02,940 --> 00:03:06,030
and how to implement in a certain way if

63
00:03:06,030 --> 00:03:07,410
you only have knowledge of reading Linux

64
00:03:07,410 --> 00:03:10,050
drivers it doesn't transfer too easily

65
00:03:10,050 --> 00:03:14,460
to any new efi drivers and there's a lot

66
00:03:14,460 --> 00:03:21,630
of legacy code okay so what we want to

67
00:03:21,630 --> 00:03:25,160
do is you want to end at the Dixie phase

68
00:03:25,160 --> 00:03:27,780
the drivers we want to remove some of

69
00:03:27,780 --> 00:03:30,000
those drivers from that phase as much as

70
00:03:30,000 --> 00:03:32,640
we can and replace those drivers with

71
00:03:32,640 --> 00:03:36,840
our drivers are found in Linux and also

72
00:03:36,840 --> 00:03:41,239
the Dixie coy we at the current moment

73
00:03:41,239 --> 00:03:43,739
we have to keep the Dixie quo because it

74
00:03:43,739 --> 00:03:46,230
sets up some octi tables and other

75
00:03:46,230 --> 00:03:48,510
driver initialization but in the future

76
00:03:48,510 --> 00:03:52,440
we plan to drive it back all the way to

77
00:03:52,440 --> 00:03:56,370
P I home so how do we do this how do we

78
00:03:56,370 --> 00:04:03,209
get from here with all of Dixie phase

79
00:04:03,209 --> 00:04:07,860
and all food services to here how do we

80
00:04:07,860 --> 00:04:14,580
place it with Linux so this five sat

81
00:04:14,580 --> 00:04:16,680
five steps you have to follow to do that

82
00:04:16,680 --> 00:04:20,238
surface you have to get you existing

83
00:04:20,238 --> 00:04:23,400
firm a image from somewhere and then you

84
00:04:23,400 --> 00:04:25,110
can list all the Dixie's all the drivers

85
00:04:25,110 --> 00:04:27,180
are the contains then you remove

86
00:04:27,180 --> 00:04:31,020
as many drivers that you can dabeh mean

87
00:04:31,020 --> 00:04:32,430
you've done in by Linux for example you

88
00:04:32,430 --> 00:04:35,190
can remove the USB drivers the network

89
00:04:35,190 --> 00:04:39,030
stack then you add Linux to the firmware

90
00:04:39,030 --> 00:04:41,820
like inside the flash pot as an EFI

91
00:04:41,820 --> 00:04:46,139
application and then finally any meaning

92
00:04:46,139 --> 00:04:47,880
Dixie's you could attempt to replace

93
00:04:47,880 --> 00:04:51,060
them with open-source drivers that you

94
00:04:51,060 --> 00:04:56,009
find an indicator so how many how many

95
00:04:56,009 --> 00:04:59,509
of you have seen or use one of these I

96
00:04:59,509 --> 00:05:01,340
love your hands up

97
00:05:01,340 --> 00:05:05,220
so so if you crack crack open the

98
00:05:05,220 --> 00:05:07,560
desktop you'll find a flash pot and

99
00:05:07,560 --> 00:05:09,960
these are the tools you need to read off

100
00:05:09,960 --> 00:05:11,759
the firmware image so you need a

101
00:05:11,759 --> 00:05:15,270
programmer like a reader you don't

102
00:05:15,270 --> 00:05:17,009
necessarily have to use a Daddy Prague

103
00:05:17,009 --> 00:05:20,070
there are many cheaper varieties you'll

104
00:05:20,070 --> 00:05:22,729
need some sort of connector a lot of

105
00:05:22,729 --> 00:05:26,009
motherboards might have had is if not

106
00:05:26,009 --> 00:05:27,210
you have to use one of these pomona

107
00:05:27,210 --> 00:05:30,150
clips and flash arm is probably one of

108
00:05:30,150 --> 00:05:33,090
the best tools you can use to software

109
00:05:33,090 --> 00:05:36,530
to read the image off

110
00:05:36,530 --> 00:05:38,909
so these are some that exists that we

111
00:05:38,909 --> 00:05:39,900
found in Winterfell

112
00:05:39,900 --> 00:05:41,370
this is like a small selection of them I

113
00:05:41,370 --> 00:05:45,300
think there's over a hundred but you can

114
00:05:45,300 --> 00:05:49,039
see here on this Dixie is related to USB

115
00:05:49,039 --> 00:05:53,460
there's some network stack taxis there's

116
00:05:53,460 --> 00:05:59,340
some old this Dixie's is a bus there

117
00:05:59,340 --> 00:06:01,280
Dixie's which I've missed out a

118
00:06:01,280 --> 00:06:05,400
thermometer so a lot of these taxis

119
00:06:05,400 --> 00:06:08,720
aren't uh audited like for security

120
00:06:08,720 --> 00:06:11,550
network stack you may not have access to

121
00:06:11,550 --> 00:06:13,650
the source code so you don't know how

122
00:06:13,650 --> 00:06:16,979
secure it is um so our aim is to remove

123
00:06:16,979 --> 00:06:19,139
as many sees as far as many of these as

124
00:06:19,139 --> 00:06:22,880
possible and it's kind of like removing

125
00:06:22,880 --> 00:06:28,020
blocks from a Jenga stack if you remove

126
00:06:28,020 --> 00:06:29,789
the wrong taxi it will all collapse or

127
00:06:29,789 --> 00:06:31,759
fall apart the system you no longer boot

128
00:06:31,759 --> 00:06:35,219
but when you move the wait drivers the

129
00:06:35,219 --> 00:06:36,960
system is still built and then you could

130
00:06:36,960 --> 00:06:39,300
use the drivers have available mimics a

131
00:06:39,300 --> 00:06:41,020
lot of these drivers are just

132
00:06:41,020 --> 00:06:43,410
to move you just simply delete them and

133
00:06:43,410 --> 00:06:44,800
they're gone

134
00:06:44,800 --> 00:06:46,960
some of them you need to do some careful

135
00:06:46,960 --> 00:06:50,289
massaging some careful working around in

136
00:06:50,289 --> 00:06:54,940
the ufi code to understand so a

137
00:06:54,940 --> 00:06:58,330
comparison on Winterfell is we started

138
00:06:58,330 --> 00:07:00,789
with over a hundred Dixie's and we do

139
00:07:00,789 --> 00:07:03,460
reduce it to thirty one files which is a

140
00:07:03,460 --> 00:07:06,520
huge improvement so the remainder of

141
00:07:06,520 --> 00:07:12,729
these Dixie's which load acti SMN SMI in

142
00:07:12,729 --> 00:07:15,909
the future we want to try to remove

143
00:07:15,909 --> 00:07:17,740
these as well and push it all into links

144
00:07:17,740 --> 00:07:20,620
colonel and at the moment that would

145
00:07:20,620 --> 00:07:24,069
require a bit of work um so to remove

146
00:07:24,069 --> 00:07:27,009
these drivers that's where the to

147
00:07:27,009 --> 00:07:28,720
Lincoln's in and so we have to be able

148
00:07:28,720 --> 00:07:32,620
to extract a firmware image and view the

149
00:07:32,620 --> 00:07:33,940
files within it so you can think of a

150
00:07:33,940 --> 00:07:37,539
familiar image as a sort of like a file

151
00:07:37,539 --> 00:07:40,780
system that you could sort of mount and

152
00:07:40,780 --> 00:07:45,280
view the files within but the um there's

153
00:07:45,280 --> 00:07:46,770
a few tools that you can use to do that

154
00:07:46,770 --> 00:07:50,169
so part of um the easiest to use is a

155
00:07:50,169 --> 00:07:51,719
Linux boot

156
00:07:51,719 --> 00:07:54,580
essentially for Linux boot you could

157
00:07:54,580 --> 00:07:58,569
clone it you read the FME image Uttam

158
00:07:58,569 --> 00:08:00,430
Piaf image image into the correct

159
00:08:00,430 --> 00:08:02,800
directory and you man make your boy

160
00:08:02,800 --> 00:08:05,289
named the kernel the NIT member fast you

161
00:08:05,289 --> 00:08:06,940
want to print into it and we justwhen

162
00:08:06,940 --> 00:08:10,779
make when that will update your firmware

163
00:08:10,779 --> 00:08:13,870
image by deleting unnecessary taxis and

164
00:08:13,870 --> 00:08:16,419
inserting the kernel into it um so this

165
00:08:16,419 --> 00:08:18,880
only works on select boards as listed

166
00:08:18,880 --> 00:08:23,560
here and that requires in the kernel to

167
00:08:23,560 --> 00:08:25,870
have these config set so if I start

168
00:08:25,870 --> 00:08:31,960
makes it readable from UEFI the efi BDS

169
00:08:31,960 --> 00:08:34,120
means that could be used as a it's a

170
00:08:34,120 --> 00:08:37,599
patch which allows it to be used as from

171
00:08:37,599 --> 00:08:43,328
the boot the selector another tool which

172
00:08:43,328 --> 00:08:45,940
is has a GUI interface which is easy to

173
00:08:45,940 --> 00:08:48,760
use if not as automated but lets you

174
00:08:48,760 --> 00:08:50,350
list all the files and you could select

175
00:08:50,350 --> 00:08:52,740
individual ones that you want to delete

176
00:08:52,740 --> 00:08:54,760
so for example

177
00:08:54,760 --> 00:08:56,650
if you wanted to delete that file that's

178
00:08:56,650 --> 00:08:58,570
selected there I could just wait click

179
00:08:58,570 --> 00:09:00,820
delete it on this tool spinning me on

180
00:09:00,820 --> 00:09:05,800
for from sorry for quite some time it's

181
00:09:05,800 --> 00:09:07,660
a bit inconvenient if it's great for

182
00:09:07,660 --> 00:09:09,490
playing around with but if you want to

183
00:09:09,490 --> 00:09:11,380
have automated system you need a command

184
00:09:11,380 --> 00:09:13,540
line and this to command lines for this

185
00:09:13,540 --> 00:09:15,070
tool there's you fi have a place and

186
00:09:15,070 --> 00:09:19,930
UEFI patch so they let you access the

187
00:09:19,930 --> 00:09:21,400
familiar image from the command line and

188
00:09:21,400 --> 00:09:24,010
automate your process if you check it

189
00:09:24,010 --> 00:09:26,500
out from this repository make sure you

190
00:09:26,500 --> 00:09:28,780
check out the new engine branch that

191
00:09:28,780 --> 00:09:31,060
contains a lot of new features which

192
00:09:31,060 --> 00:09:34,570
aren't on the map master branch finally

193
00:09:34,570 --> 00:09:36,610
run the tooling that I've been working

194
00:09:36,610 --> 00:09:41,920
on recently is UEFI toolkit so it is a

195
00:09:41,920 --> 00:09:45,820
purely on a command-line interface has

196
00:09:45,820 --> 00:09:47,680
different command various commands for

197
00:09:47,680 --> 00:09:50,080
for example the table command which

198
00:09:50,080 --> 00:09:53,140
lists all out in a table the degrees the

199
00:09:53,140 --> 00:09:56,500
types the sizes does remove command from

200
00:09:56,500 --> 00:09:59,080
removing the specified file you can

201
00:09:59,080 --> 00:10:02,350
combine commands inside of a pipeline so

202
00:10:02,350 --> 00:10:03,880
for example you could take the image you

203
00:10:03,880 --> 00:10:06,460
first load it you remove everything that

204
00:10:06,460 --> 00:10:09,370
contains USB I can move a Dixie by its

205
00:10:09,370 --> 00:10:12,610
grid you have a place on the shelf with

206
00:10:12,610 --> 00:10:15,580
your Linux kernel and then we save it

207
00:10:15,580 --> 00:10:19,680
back out to another file there's also

208
00:10:19,680 --> 00:10:22,450
other communes here do we have cat which

209
00:10:22,450 --> 00:10:26,230
dumps a file to miss file system find

210
00:10:26,230 --> 00:10:28,630
which outputs on JSON of metadata about

211
00:10:28,630 --> 00:10:33,340
the file and it's fairly easy to add

212
00:10:33,340 --> 00:10:34,780
more commands to it so it's about 80

213
00:10:34,780 --> 00:10:37,210
lines of golang we're planning on

214
00:10:37,210 --> 00:10:44,010
getting some n analyzers for you fi so

215
00:10:44,010 --> 00:10:48,640
so once you delete the the drivers which

216
00:10:48,640 --> 00:10:50,800
you don't need and you've inserted the

217
00:10:50,800 --> 00:10:55,470
links kernel into the efi image it will

218
00:10:55,470 --> 00:10:59,500
the next step is from your kernel you

219
00:10:59,500 --> 00:11:01,750
want to kick so the kernel the boot

220
00:11:01,750 --> 00:11:04,030
kernel vents inside it's stored inside

221
00:11:04,030 --> 00:11:06,850
of the flash image so from there you

222
00:11:06,850 --> 00:11:08,140
want to

223
00:11:08,140 --> 00:11:11,140
find the van time panel the one you'll

224
00:11:11,140 --> 00:11:13,510
be actually using on your machine like

225
00:11:13,510 --> 00:11:16,240
it will have all applications like it's

226
00:11:16,240 --> 00:11:18,700
the final destination like the final

227
00:11:18,700 --> 00:11:21,370
cannoli will be running now so the idea

228
00:11:21,370 --> 00:11:23,710
of the boot kernel is we go fetch the

229
00:11:23,710 --> 00:11:27,280
final kernel from the network or I could

230
00:11:27,280 --> 00:11:29,380
fetch it from the local disk or I could

231
00:11:29,380 --> 00:11:32,380
fetch it from pretty much anywhere it

232
00:11:32,380 --> 00:11:33,880
would them check to make sure the

233
00:11:33,880 --> 00:11:35,920
signature is correct and then perform

234
00:11:35,920 --> 00:11:38,080
operation a key exact which is

235
00:11:38,080 --> 00:11:41,290
essentially a it switches from the

236
00:11:41,290 --> 00:11:44,520
current many kernel to another kernel

237
00:11:44,520 --> 00:11:48,430
and it will essentially clear all the

238
00:11:48,430 --> 00:11:51,610
memory or all information of where the

239
00:11:51,610 --> 00:12:00,940
previous kernel was so so what have we

240
00:12:00,940 --> 00:12:05,830
gained by doing this what what why have

241
00:12:05,830 --> 00:12:08,860
we had perform Linux boot on the

242
00:12:08,860 --> 00:12:11,790
firmware what the benefits also give us

243
00:12:11,790 --> 00:12:14,560
so we've first we've removed all the

244
00:12:14,560 --> 00:12:17,620
duplicate drivers from the system which

245
00:12:17,620 --> 00:12:22,480
has benefits in for example we don't

246
00:12:22,480 --> 00:12:24,340
have to care whether or not those

247
00:12:24,340 --> 00:12:27,370
drivers are close to us it gives which

248
00:12:27,370 --> 00:12:31,800
gives great security implications

249
00:12:31,950 --> 00:12:37,300
secondly we no longer need so we no

250
00:12:37,300 --> 00:12:41,980
longer need have to have a sorry Linux

251
00:12:41,980 --> 00:12:43,330
kernel engineers can now have eight

252
00:12:43,330 --> 00:12:45,520
drivers for the firmware they no longer

253
00:12:45,520 --> 00:12:49,600
have to understand the ufi stack and the

254
00:12:49,600 --> 00:12:53,400
interfaces it contains thirdly um

255
00:12:53,400 --> 00:12:55,450
there's a great improvement in speed

256
00:12:55,450 --> 00:12:58,810
also for example winterfell we noticed

257
00:12:58,810 --> 00:13:00,910
as a huge improvement from eight minutes

258
00:13:00,910 --> 00:13:02,850
to 20 seconds pretty much every platform

259
00:13:02,850 --> 00:13:06,760
we've installed we perform the next boot

260
00:13:06,760 --> 00:13:08,980
to we've seen at least a 10 times

261
00:13:08,980 --> 00:13:12,880
improvement in speed so some two common

262
00:13:12,880 --> 00:13:14,440
questions that come up in these talks is

263
00:13:14,440 --> 00:13:18,100
are we simply with placing grab no we

264
00:13:18,100 --> 00:13:19,560
were placing what runs

265
00:13:19,560 --> 00:13:23,819
so grab typically guns at least in unify

266
00:13:23,819 --> 00:13:28,819
friends as a boot device that the ufi

267
00:13:28,819 --> 00:13:31,290
that means after you fi but we were

268
00:13:31,290 --> 00:13:35,610
placing is you fi itself and then the

269
00:13:35,610 --> 00:13:37,790
second question often comes up is why

270
00:13:37,790 --> 00:13:40,559
why should Linux be another Linux isn't

271
00:13:40,559 --> 00:13:46,649
that slow or like why can't why can't

272
00:13:46,649 --> 00:13:49,410
the first Linux be the the final mix on

273
00:13:49,410 --> 00:13:53,999
the system and the farming issue is the

274
00:13:53,999 --> 00:13:56,759
flash size is so small that you weren't

275
00:13:56,759 --> 00:13:58,889
able to only be able to fit all the

276
00:13:58,889 --> 00:14:02,519
drivers necessary but you could do this

277
00:14:02,519 --> 00:14:04,350
if if the flash player is large enough

278
00:14:04,350 --> 00:14:08,189
or if you're booting from something it's

279
00:14:08,189 --> 00:14:09,749
not a flash part which has sufficient

280
00:14:09,749 --> 00:14:12,180
size you could run it in what we call a

281
00:14:12,180 --> 00:14:15,389
kiosk mode which means the feminine X is

282
00:14:15,389 --> 00:14:21,660
the final Linux and also this this

283
00:14:21,660 --> 00:14:25,500
process doesn't only apply to UEFI I can

284
00:14:25,500 --> 00:14:31,129
also be applied to co-op it and you boot

285
00:14:31,129 --> 00:14:37,709
and it's also not a new idea so it's

286
00:14:37,709 --> 00:14:41,750
probably over 20 years old so Linux boot

287
00:14:41,750 --> 00:14:44,970
but whisper for boot originally used

288
00:14:44,970 --> 00:14:49,680
this system opal uses this some on

289
00:14:49,680 --> 00:14:56,610
devices use it it's fairly well known so

290
00:14:56,610 --> 00:14:59,040
the question now is read incident in the

291
00:14:59,040 --> 00:15:02,550
next kernel and it will K exactly

292
00:15:02,550 --> 00:15:05,550
another kernel but what you use as the

293
00:15:05,550 --> 00:15:08,699
innate VMFS in the boot kernel and the

294
00:15:08,699 --> 00:15:10,980
answer is anything you want we don't

295
00:15:10,980 --> 00:15:15,420
provide tools we only provide so you've

296
00:15:15,420 --> 00:15:17,639
tried cool tools around but not the

297
00:15:17,639 --> 00:15:20,069
policy so you can use busybox

298
00:15:20,069 --> 00:15:25,500
you could use system D you can use pity

299
00:15:25,500 --> 00:15:27,149
you could bite something on your own you

300
00:15:27,149 --> 00:15:28,800
could use anything in the EMFs that you

301
00:15:28,800 --> 00:15:32,310
want for example Tremmel he uses heads

302
00:15:32,310 --> 00:15:35,399
how much is a security focused version

303
00:15:35,399 --> 00:15:38,940
of busybox but the important thing that

304
00:15:38,940 --> 00:15:42,120
has to do is what if you implement has

305
00:15:42,120 --> 00:15:45,480
to provide all the correct drivers that

306
00:15:45,480 --> 00:15:47,639
you were placed in unify as well as the

307
00:15:47,639 --> 00:15:51,139
boot low good boot loaders and if you

308
00:15:51,139 --> 00:15:55,879
need a it should also provide a shell

309
00:15:56,600 --> 00:16:02,939
I'm so cool and I had ITV knew they use

310
00:16:02,939 --> 00:16:06,439
you boot which is a universal boot

311
00:16:06,439 --> 00:16:11,879
written in go lengths so in the big

312
00:16:11,879 --> 00:16:15,300
advantage of go is its architecture

313
00:16:15,300 --> 00:16:18,420
independent you make go code you could

314
00:16:18,420 --> 00:16:21,620
easily very very easily compel it to arm

315
00:16:21,620 --> 00:16:28,279
to x86 at the PowerPC the tool chain is

316
00:16:28,279 --> 00:16:31,050
set up for that to do extremely easily

317
00:16:31,050 --> 00:16:33,480
you just set an environment variable you

318
00:16:33,480 --> 00:16:34,860
don't have to demo a separate compiler

319
00:16:34,860 --> 00:16:40,649
it's much much easier to use in C and it

320
00:16:40,649 --> 00:16:43,019
is also incredibly small if you use the

321
00:16:43,019 --> 00:16:46,860
correct techniques so for you we set up

322
00:16:46,860 --> 00:16:53,250
a we've set up many commands we have at

323
00:16:53,250 --> 00:16:55,050
the current moment we have many nine

324
00:16:55,050 --> 00:16:57,839
commands part with some most important

325
00:16:57,839 --> 00:17:01,740
ones are K exact which executes some

326
00:17:01,740 --> 00:17:06,390
external we have pixie boot which is

327
00:17:06,390 --> 00:17:09,589
implementation for the pixie boot

328
00:17:09,589 --> 00:17:14,270
Network routing protocol we have W gap

329
00:17:14,270 --> 00:17:16,980
which if you can you should put her to

330
00:17:16,980 --> 00:17:22,589
use W get over a pixie boot we have GPG

331
00:17:22,589 --> 00:17:27,510
V which signs keys or checks that the

332
00:17:27,510 --> 00:17:30,750
signature is correct for assigned key so

333
00:17:30,750 --> 00:17:32,100
everything is here everything

334
00:17:32,100 --> 00:17:34,679
necessaries here for booting an image

335
00:17:34,679 --> 00:17:37,440
and we also have

336
00:17:37,440 --> 00:17:41,220
other formulated commands for example CB

337
00:17:41,220 --> 00:17:46,280
men which is able to access our Corbeau

338
00:17:48,590 --> 00:17:53,130
so so what other advantages does go give

339
00:17:53,130 --> 00:17:56,850
us infamy and also go has a lot of

340
00:17:56,850 --> 00:17:58,410
built-in static analysis tools so

341
00:17:58,410 --> 00:18:02,940
example go that goal int go format in F

342
00:18:02,940 --> 00:18:06,300
assign so these help you find bugs in

343
00:18:06,300 --> 00:18:08,730
your source code from the very easy to

344
00:18:08,730 --> 00:18:10,500
use you can set them up to man

345
00:18:10,500 --> 00:18:13,200
automatically when you make a change it

346
00:18:13,200 --> 00:18:16,320
has a built in visa detector when memory

347
00:18:16,320 --> 00:18:18,929
sanitizer it's almost impossible to

348
00:18:18,929 --> 00:18:23,010
write a buffer overflow and go it will

349
00:18:23,010 --> 00:18:26,220
simply panic if you catch the panic and

350
00:18:26,220 --> 00:18:32,010
recover the documentation we go is all

351
00:18:32,010 --> 00:18:34,260
open if you go to the good doctor or

352
00:18:34,260 --> 00:18:36,030
website it has documentation for every

353
00:18:36,030 --> 00:18:40,830
signal project which is on github the

354
00:18:40,830 --> 00:18:43,170
language is very type safe especially

355
00:18:43,170 --> 00:18:45,809
compared to shell scripts one of the big

356
00:18:45,809 --> 00:18:48,179
aims is to no longer wait shell scripts

357
00:18:48,179 --> 00:18:51,300
but today Oliver what we would have

358
00:18:51,300 --> 00:18:55,159
written as a shell script in go

359
00:18:56,150 --> 00:18:58,320
additionally the language has a huge

360
00:18:58,320 --> 00:19:03,600
library for example has a network stack

361
00:19:03,600 --> 00:19:07,260
it has a libraries for reading reading

362
00:19:07,260 --> 00:19:10,530
to JSON pretty much anything that you

363
00:19:10,530 --> 00:19:12,600
need is supplied in the library and the

364
00:19:12,600 --> 00:19:15,120
library itself is of high standard and

365
00:19:15,120 --> 00:19:22,770
it is also very secure and one final

366
00:19:22,770 --> 00:19:25,710
thing is it allows it is very fast to

367
00:19:25,710 --> 00:19:29,480
compile as you'll see in a bit

368
00:19:29,480 --> 00:19:32,490
it could compile all fast source code in

369
00:19:32,490 --> 00:19:36,390
about eight to ten seconds I believe it

370
00:19:36,390 --> 00:19:37,920
depends on your system of course but

371
00:19:37,920 --> 00:19:41,309
it's very very very fast those two ways

372
00:19:41,309 --> 00:19:44,650
we use you the first word is source mode

373
00:19:44,650 --> 00:19:48,790
so in this mode we store all the source

374
00:19:48,790 --> 00:19:51,490
code so now we don't compile it on your

375
00:19:51,490 --> 00:19:52,840
development machine we store all the

376
00:19:52,840 --> 00:19:57,870
source code in the firmware and then

377
00:19:57,870 --> 00:20:00,940
when it runs when you boot your machine

378
00:20:00,940 --> 00:20:04,360
it will compile the source code on the

379
00:20:04,360 --> 00:20:09,450
fly and then run it and also in your

380
00:20:09,450 --> 00:20:11,680
unit me I'm a fast you would have four

381
00:20:11,680 --> 00:20:14,200
binaries and you'd have the go compiler

382
00:20:14,200 --> 00:20:16,780
assembly linker and then you'd also have

383
00:20:16,780 --> 00:20:19,809
the go command which also acts as I mean

384
00:20:19,809 --> 00:20:24,730
it an it command so this is very

385
00:20:24,730 --> 00:20:26,040
versatile

386
00:20:26,040 --> 00:20:29,590
it means all the source code is any FME

387
00:20:29,590 --> 00:20:32,760
image which makes it a lot easier to

388
00:20:32,760 --> 00:20:36,340
like add it and understand if you have

389
00:20:36,340 --> 00:20:39,010
to have to open it up again it's also

390
00:20:39,010 --> 00:20:41,890
very small so we found that about I

391
00:20:41,890 --> 00:20:43,630
guess depending on how many commands you

392
00:20:43,630 --> 00:20:45,760
include you can it's about four to eight

393
00:20:45,760 --> 00:20:53,530
megabytes and it's also architecture

394
00:20:53,530 --> 00:20:54,970
independent except for those four

395
00:20:54,970 --> 00:20:58,540
commands you could supply different

396
00:20:58,540 --> 00:21:00,400
commands for different architectures but

397
00:21:00,400 --> 00:21:02,559
all the source code in the fermion image

398
00:21:02,559 --> 00:21:05,860
doesn't change between builds on the

399
00:21:05,860 --> 00:21:07,210
second mode which is partly the more

400
00:21:07,210 --> 00:21:09,640
popular one is a busy box mode so in

401
00:21:09,640 --> 00:21:12,760
this mode we compile it from only

402
00:21:12,760 --> 00:21:14,920
development machine before we put it

403
00:21:14,920 --> 00:21:19,720
into the firmware so this is the main

404
00:21:19,720 --> 00:21:21,370
advantage of this one over sauce mode is

405
00:21:21,370 --> 00:21:24,309
it is much smaller less about half the

406
00:21:24,309 --> 00:21:30,040
size so the idea behind this if you've

407
00:21:30,040 --> 00:21:31,750
heard of busy box before the new busy

408
00:21:31,750 --> 00:21:34,780
box is a similar idea we compile all the

409
00:21:34,780 --> 00:21:36,610
commands together into one binary and

410
00:21:36,610 --> 00:21:40,330
when the binding gets executed it will

411
00:21:40,330 --> 00:21:44,470
look at odd v-0 and depending on the

412
00:21:44,470 --> 00:21:48,220
value of odd v-0 it will multiplex to a

413
00:21:48,220 --> 00:21:51,850
certain main function so for example if

414
00:21:51,850 --> 00:21:53,770
you have the LS command and cap command

415
00:21:53,770 --> 00:21:56,470
you compel them together and you when

416
00:21:56,470 --> 00:21:58,150
you execute that binary you

417
00:21:58,150 --> 00:22:01,450
you set the arc v02 cat and then it'll

418
00:22:01,450 --> 00:22:03,310
execute the cat's main function and you

419
00:22:03,310 --> 00:22:05,890
said LS and will exit the Alice's main

420
00:22:05,890 --> 00:22:09,040
function and they set up aquaszero

421
00:22:09,040 --> 00:22:14,890
conveniently use symbolic links so the

422
00:22:14,890 --> 00:22:17,310
reason this is a lot smaller is because

423
00:22:17,310 --> 00:22:21,160
it shares a lot of the binary code

424
00:22:21,160 --> 00:22:23,170
between all the commands so all the

425
00:22:23,170 --> 00:22:32,230
commands are in one 1:1 binary so they

426
00:22:32,230 --> 00:22:34,300
few implications of this

427
00:22:34,300 --> 00:22:37,960
so pixie boot in golang it's an isolated

428
00:22:37,960 --> 00:22:41,020
process unlike in ufi it's isolated if

429
00:22:41,020 --> 00:22:45,160
there's a memory issue it won't it won't

430
00:22:45,160 --> 00:22:47,080
for example won't you have any access or

431
00:22:47,080 --> 00:22:52,030
other processes it's a lot faster as we

432
00:22:52,030 --> 00:22:53,740
saw previously it's about 10 times fast

433
00:22:53,740 --> 00:22:57,490
reboot speed reasons for this is the

434
00:22:57,490 --> 00:22:58,780
Lynx kernels pre-emptive if you could

435
00:22:58,780 --> 00:23:00,480
load multiple drivers at the same time

436
00:23:00,480 --> 00:23:02,830
the Lynx kernels also been very well

437
00:23:02,830 --> 00:23:06,040
optimized for boot time and congestion

438
00:23:06,040 --> 00:23:08,860
control so the network network access is

439
00:23:08,860 --> 00:23:14,980
often lot faster so to continue we're

440
00:23:14,980 --> 00:23:17,380
going on to the people who involved in

441
00:23:17,380 --> 00:23:19,600
you sorry in you go to em Enix boot as

442
00:23:19,600 --> 00:23:21,400
well as some philosophies behind the

443
00:23:21,400 --> 00:23:25,030
project so as I mentioned we have users

444
00:23:25,030 --> 00:23:28,270
from Facebook who are testing switches

445
00:23:28,270 --> 00:23:31,510
service in bed systems from ITV new we

446
00:23:31,510 --> 00:23:34,480
have Joe Murphy who resells be

447
00:23:34,480 --> 00:23:36,430
commissioned service from the open

448
00:23:36,430 --> 00:23:39,340
compute compute platform and he's

449
00:23:39,340 --> 00:23:42,220
shaping up Linux boot we also have some

450
00:23:42,220 --> 00:23:45,660
other experimental projects for example

451
00:23:45,660 --> 00:23:49,330
eQuest service the tan boards and

452
00:23:49,330 --> 00:23:53,380
various system on chips so some of the

453
00:23:53,380 --> 00:23:56,140
philosophies is like I mentioned earlier

454
00:23:56,140 --> 00:23:59,470
is tools map policy so we develop lots

455
00:23:59,470 --> 00:24:02,230
of tools but up to you exactly how you

456
00:24:02,230 --> 00:24:05,020
use these tools and which commands and

457
00:24:05,020 --> 00:24:09,310
how you give a your own boot process so

458
00:24:09,310 --> 00:24:11,489
security and user freedom

459
00:24:11,489 --> 00:24:17,820
so it's it's both so security features

460
00:24:17,820 --> 00:24:20,159
should allow change ownership we put

461
00:24:20,159 --> 00:24:21,929
visioning Hardware with your own keys

462
00:24:21,929 --> 00:24:26,219
and finally how we have tools for boots

463
00:24:26,219 --> 00:24:33,690
not packs okay so oh and the something

464
00:24:33,690 --> 00:24:35,669
major that happened in January as we

465
00:24:35,669 --> 00:24:37,349
join the Linux Foundation as one of the

466
00:24:37,349 --> 00:24:41,389
projects so we have I think the three

467
00:24:41,389 --> 00:24:43,649
members of steering committee are here

468
00:24:43,649 --> 00:24:45,419
today so we have one minik we have

469
00:24:45,419 --> 00:24:52,190
geometry and Philip from 9 9 elements

470
00:24:53,960 --> 00:25:03,259
and lastly our last user or our last

471
00:25:03,259 --> 00:25:05,909
involvement is with the open system

472
00:25:05,909 --> 00:25:08,129
framer group so we have weekly calls

473
00:25:08,129 --> 00:25:11,909
with this project where we are working

474
00:25:11,909 --> 00:25:14,909
with the engineers to incorporate Linux

475
00:25:14,909 --> 00:25:18,089
boot and open edk into the Open Compute

476
00:25:18,089 --> 00:25:22,049
Project so this is some of the future

477
00:25:22,049 --> 00:25:24,960
for Linux boot so one thing we're

478
00:25:24,960 --> 00:25:26,879
working on right now is canina a Linux

479
00:25:26,879 --> 00:25:29,820
boot book set up so the idea behind this

480
00:25:29,820 --> 00:25:32,099
is anyone could contribute to the book

481
00:25:32,099 --> 00:25:35,489
you could read it and we'll have all the

482
00:25:35,489 --> 00:25:37,320
documentation necessary on several

483
00:25:37,320 --> 00:25:40,259
different platforms will help I'm also

484
00:25:40,259 --> 00:25:42,359
looking into helping vendors support

485
00:25:42,359 --> 00:25:44,789
Linux boot and we want more Hardware to

486
00:25:44,789 --> 00:25:46,679
ship with Linux boot rather than putting

487
00:25:46,679 --> 00:25:50,940
it on as afterthought we are working

488
00:25:50,940 --> 00:25:53,070
like on these two projects like I

489
00:25:53,070 --> 00:25:57,029
mentioned earlier as a man possibly the

490
00:25:57,029 --> 00:25:59,399
ideas SMM free so we'd use no SMM mode

491
00:25:59,399 --> 00:26:02,489
for x86 as well as Dixie free we

492
00:26:02,489 --> 00:26:05,039
completely remove all the drivers from e

493
00:26:05,039 --> 00:26:10,169
fi and take a taxi tables which would

494
00:26:10,169 --> 00:26:12,389
require creating the acme tables in the

495
00:26:12,389 --> 00:26:15,049
start of criminal finally for you boot

496
00:26:15,049 --> 00:26:18,119
we're trying to put it to a Basel build

497
00:26:18,119 --> 00:26:19,859
system incorporate the Basel build

498
00:26:19,859 --> 00:26:21,690
system as well as the girl modules build

499
00:26:21,690 --> 00:26:25,280
system so here's some ways you

500
00:26:25,280 --> 00:26:27,200
get involved we could join the slack

501
00:26:27,200 --> 00:26:30,260
channel you could read our website you

502
00:26:30,260 --> 00:26:32,240
could try you vote that's a command that

503
00:26:32,240 --> 00:26:34,280
will pretty much two lines you get a set

504
00:26:34,280 --> 00:26:37,880
up on me machine you could read you

505
00:26:37,880 --> 00:26:38,990
could contribute to the book we don't

506
00:26:38,990 --> 00:26:41,360
have many chapters at this point and if

507
00:26:41,360 --> 00:26:43,820
you're interested in having if you're

508
00:26:43,820 --> 00:26:45,440
interested in running Linux on a your

509
00:26:45,440 --> 00:26:48,230
own hardware get in contact with us or

510
00:26:48,230 --> 00:26:49,760
ask on the slack channel and we'd be

511
00:26:49,760 --> 00:26:50,840
more than happy to help

512
00:26:50,840 --> 00:26:58,130
okay any questions yes one I was not

513
00:26:58,130 --> 00:27:03,830
prepared for that it's definitely a very

514
00:27:03,830 --> 00:27:05,570
interesting project and and the idea to

515
00:27:05,570 --> 00:27:07,460
make use of Linux and all of its

516
00:27:07,460 --> 00:27:09,440
capabilities is definitely good idea I

517
00:27:09,440 --> 00:27:11,150
mean just the fact that most network

518
00:27:11,150 --> 00:27:12,910
cards have a special pixie boot mode to

519
00:27:12,910 --> 00:27:15,740
basically reduce your 500 Q's to only a

520
00:27:15,740 --> 00:27:17,960
single one to tolpec as one-on-one for

521
00:27:17,960 --> 00:27:19,610
me from the network already helps you

522
00:27:19,610 --> 00:27:23,030
have ridiculous filmways these days the

523
00:27:23,030 --> 00:27:26,000
problem is from from I work for Susan

524
00:27:26,000 --> 00:27:27,080
from a distribution point of view from

525
00:27:27,080 --> 00:27:29,540
the west point of view what we really

526
00:27:29,540 --> 00:27:34,280
need is a a single not 500 a single way

527
00:27:34,280 --> 00:27:36,950
to boot we want one interface we don't

528
00:27:36,950 --> 00:27:39,290
want five we want one interface to work

529
00:27:39,290 --> 00:27:41,630
against so what we standardized on these

530
00:27:41,630 --> 00:27:44,510
days mostly on the x86 and arm world as

531
00:27:44,510 --> 00:27:48,530
UEFI which then again gets me back to

532
00:27:48,530 --> 00:27:51,710
the extra question how far are you along

533
00:27:51,710 --> 00:27:54,260
with implementing UEFI boot time and

534
00:27:54,260 --> 00:27:57,650
runtime services inside of the Linux

535
00:27:57,650 --> 00:27:59,810
boot environment so how how far are you

536
00:27:59,810 --> 00:28:02,930
along with getting the payload you're

537
00:28:02,930 --> 00:28:04,760
running after Linux boot to actually

538
00:28:04,760 --> 00:28:06,920
just see something that would look like

539
00:28:06,920 --> 00:28:10,400
uu5 from the front um I don't think

540
00:28:10,400 --> 00:28:12,470
we've had much progress of that I

541
00:28:12,470 --> 00:28:16,880
believe iBM has been working don't quote

542
00:28:16,880 --> 00:28:18,560
me on this but I believe some people

543
00:28:18,560 --> 00:28:21,980
have been working to van EFI our drivers

544
00:28:21,980 --> 00:28:27,020
within Linux also I believe you could

545
00:28:27,020 --> 00:28:32,530
get the van time kernel to be take

546
00:28:32,530 --> 00:28:34,790
believe that's been executed directly

547
00:28:34,790 --> 00:28:35,330
from

548
00:28:35,330 --> 00:28:38,550
EFI if you don't

549
00:28:38,550 --> 00:28:41,580
buuut services inside of the boot kernel

550
00:28:41,580 --> 00:28:43,560
so if you leave boot services enabled

551
00:28:43,560 --> 00:28:45,930
throughout the boot kernel it should be

552
00:28:45,930 --> 00:28:50,070
possible to pass on boot services to the

553
00:28:50,070 --> 00:28:52,440
van time kernel in which it could exit

554
00:28:52,440 --> 00:28:55,260
them there and then would have access to

555
00:28:55,260 --> 00:29:02,010
all of the EFI protocols and whatnot any

556
00:29:02,010 --> 00:29:14,370
more questions oh hi I guess you may not

557
00:29:14,370 --> 00:29:16,860
care but I'm absolutely astounded that

558
00:29:16,860 --> 00:29:19,920
it takes 20 minutes to boot any platform

559
00:29:19,920 --> 00:29:23,850
through the firmware can you I did once

560
00:29:23,850 --> 00:29:27,360
see this on a UEFI platform I had serial

561
00:29:27,360 --> 00:29:29,040
enabled and it out put it about eight

562
00:29:29,040 --> 00:29:30,990
minutes with a serial the board rate I

563
00:29:30,990 --> 00:29:33,870
was using but apart from that I can't

564
00:29:33,870 --> 00:29:35,550
understand it can you do have any in

565
00:29:35,550 --> 00:29:38,100
silent earth is going on what on earth

566
00:29:38,100 --> 00:29:40,410
is going on so this is mostly for

567
00:29:40,410 --> 00:29:42,630
service this really long extended boot

568
00:29:42,630 --> 00:29:44,610
time is mostly for service specific if

569
00:29:44,610 --> 00:29:46,410
we just have a consumer hardware known

570
00:29:46,410 --> 00:29:48,660
out of a bio laptop or desktop machine

571
00:29:48,660 --> 00:29:50,040
for themselves which would take 20

572
00:29:50,040 --> 00:29:51,930
minutes to boot so this is nothing issue

573
00:29:51,930 --> 00:29:55,440
on service where you could sort big

574
00:29:55,440 --> 00:29:57,390
people can sort of wait that long for

575
00:29:57,390 --> 00:30:01,100
the server to boot but it's not fun so

576
00:30:01,100 --> 00:30:07,460
and mostly what's doing is first ufi is

577
00:30:07,460 --> 00:30:10,590
mostly non pre-emptive so for example if

578
00:30:10,590 --> 00:30:13,250
you have multiple disk drives connected

579
00:30:13,250 --> 00:30:16,050
typically it initializes each disk drive

580
00:30:16,050 --> 00:30:18,330
one at a time it's difficult to

581
00:30:18,330 --> 00:30:22,280
initialize them all in parallel secondly

582
00:30:22,280 --> 00:30:25,670
there are many issues with the

583
00:30:25,670 --> 00:30:29,550
dispatcher so for example it might try

584
00:30:29,550 --> 00:30:33,960
to reinitialize something that has been

585
00:30:33,960 --> 00:30:35,730
initialized before it could jump back

586
00:30:35,730 --> 00:30:37,890
and forth between initializing different

587
00:30:37,890 --> 00:30:39,450
things because something depends on

588
00:30:39,450 --> 00:30:41,220
something else but since it's already

589
00:30:41,220 --> 00:30:43,920
been initialized it it doesn't have to

590
00:30:43,920 --> 00:30:46,890
be initialized again but it tries

591
00:30:46,890 --> 00:30:49,290
initialize it again because it doesn't

592
00:30:49,290 --> 00:30:51,610
remember some reason

593
00:30:51,610 --> 00:30:54,489
so the dispatcher behaves in strange

594
00:30:54,489 --> 00:30:56,950
ways sometimes which leads to these very

595
00:30:56,950 --> 00:31:02,669
long boot times any more questions

596
00:31:02,669 --> 00:31:07,090
well there you're letting me get some

597
00:31:07,090 --> 00:31:12,220
work out here thanks brother from Intel

598
00:31:12,220 --> 00:31:14,889
I have a question regarding your removal

599
00:31:14,889 --> 00:31:17,499
of Dixie yeah why don't we use FSP is

600
00:31:17,499 --> 00:31:20,529
any restriction there because uh what

601
00:31:20,529 --> 00:31:22,090
you want the platform core the platform

602
00:31:22,090 --> 00:31:24,159
initialization right the eventually

603
00:31:24,159 --> 00:31:25,779
because a removal of Dixie might need

604
00:31:25,779 --> 00:31:27,549
two deals with all your dependency for

605
00:31:27,549 --> 00:31:29,139
example you were showing the pixie boot

606
00:31:29,139 --> 00:31:31,450
right pixie boot has around 10 to 15

607
00:31:31,450 --> 00:31:33,759
module like a recursive dependency or

608
00:31:33,759 --> 00:31:35,590
not so just wondering what's your plan

609
00:31:35,590 --> 00:31:40,840
to use the FSB I think the plan is not

610
00:31:40,840 --> 00:31:45,100
to use FSB the pain is mostly to remove

611
00:31:45,100 --> 00:31:47,379
as many taxes as possible preferably

612
00:31:47,379 --> 00:31:48,700
until the all done

613
00:31:48,700 --> 00:31:51,429
so we boot directly from doing a boot

614
00:31:51,429 --> 00:31:54,519
phase we boot from GI the PI phase

615
00:31:54,519 --> 00:31:58,389
directly to Linux my bleed this is for

616
00:31:58,389 --> 00:32:02,070
machines without an FSB

617
00:32:06,990 --> 00:32:12,460
the one thing I have heard from just one

618
00:32:12,460 --> 00:32:14,980
company that did have SFSP servers is

619
00:32:14,980 --> 00:32:17,860
they were going to use Corbett to go to

620
00:32:17,860 --> 00:32:20,830
Linux boot and my talk this afternoon I

621
00:32:20,830 --> 00:32:22,750
may touch on some of that because that's

622
00:32:22,750 --> 00:32:28,240
a corporate talk so thank you so any

623
00:32:28,240 --> 00:32:35,590
more questions yeah I am so what did you

624
00:32:35,590 --> 00:32:37,600
settle on now on the naming for the

625
00:32:37,600 --> 00:32:40,960
different kernels so runtime and boot

626
00:32:40,960 --> 00:32:44,320
kernel or kernels so what's you okay so

627
00:32:44,320 --> 00:32:45,400
I think it's a solution

628
00:32:45,400 --> 00:32:47,260
the official naming naming that we

629
00:32:47,260 --> 00:32:49,900
agreed on is the boot kernel and then

630
00:32:49,900 --> 00:32:53,890
the event on kernel but sometimes the

631
00:32:53,890 --> 00:32:55,690
boot kernels also the vent I'm kernel

632
00:32:55,690 --> 00:32:58,270
because it doesn't pay exact into

633
00:32:58,270 --> 00:32:59,799
another Kuna looks like the final kernel

634
00:32:59,799 --> 00:33:04,090
in that case we call it kiosk mode so

635
00:33:04,090 --> 00:33:06,730
the naming could get a bit confusing so

636
00:33:06,730 --> 00:33:09,549
yeah but mainly if if you're doing the k

637
00:33:09,549 --> 00:33:11,950
exact we have the boot kernel and then

638
00:33:11,950 --> 00:33:14,799
we have the done time kernel if the the

639
00:33:14,799 --> 00:33:17,140
naming sort of mimics afi's naming of

640
00:33:17,140 --> 00:33:20,160
boot services and runtime services so

641
00:33:20,160 --> 00:33:21,809
yeah

642
00:33:21,809 --> 00:33:24,520
are there any more questions yes there

643
00:33:24,520 --> 00:33:31,000
are how small were you able to make your

644
00:33:31,000 --> 00:33:33,340
boot kernel and do you publish your cake

645
00:33:33,340 --> 00:33:35,230
config options for pairing the Linux

646
00:33:35,230 --> 00:33:37,510
kernel down because it has traditionally

647
00:33:37,510 --> 00:33:39,790
been kept getting bigger and bigger and

648
00:33:39,790 --> 00:33:40,150
bigger

649
00:33:40,150 --> 00:33:43,270
yep so at least for x86 the easiest way

650
00:33:43,270 --> 00:33:45,580
to make a like a small kernel is you

651
00:33:45,580 --> 00:33:48,940
type make tiny config and it will use

652
00:33:48,940 --> 00:33:50,799
the small of the minimum number of make

653
00:33:50,799 --> 00:33:53,020
options as possible and then we have

654
00:33:53,020 --> 00:33:55,120
published a list of the minimum config

655
00:33:55,120 --> 00:33:57,490
options you have to enable for go to

656
00:33:57,490 --> 00:33:59,679
event and this is about 20 can take

657
00:33:59,679 --> 00:34:01,660
options you have to enable things like

658
00:34:01,660 --> 00:34:04,120
like the terminal along you have to

659
00:34:04,120 --> 00:34:08,980
enable some few few taxes and some other

660
00:34:08,980 --> 00:34:12,429
things and that's published on the if

661
00:34:12,429 --> 00:34:15,489
you go to github /eu / you good it's in

662
00:34:15,489 --> 00:34:18,989
one of the VD files there

663
00:34:19,059 --> 00:34:22,668
how big does it get you make it an x86

664
00:34:22,668 --> 00:34:26,899
kernel as small as probably nine hundred

665
00:34:26,899 --> 00:34:29,569
kilobytes better has almost nothing

666
00:34:29,569 --> 00:34:31,089
inside of it

667
00:34:31,089 --> 00:34:33,500
but it's very small but you don't have

668
00:34:33,500 --> 00:34:35,409
any networking you may not even have

669
00:34:35,409 --> 00:34:38,599
like the block layer at all so it's

670
00:34:38,599 --> 00:34:40,940
that's almost nothing but it's very

671
00:34:40,940 --> 00:34:43,099
small and then when you add networking

672
00:34:43,099 --> 00:34:47,960
the block layer like it gets up to

673
00:34:47,960 --> 00:34:50,809
around like one party two megabytes at

674
00:34:50,809 --> 00:34:59,079
that point okay any more questions yeah

675
00:35:02,230 --> 00:35:04,940
hi I'm wondering about the ice cozy

676
00:35:04,940 --> 00:35:08,420
boots scenario during the boot caramel

677
00:35:08,420 --> 00:35:11,420
phase the customers we have in Dell HP

678
00:35:11,420 --> 00:35:16,280
are using the BIOS configuration mini

679
00:35:16,280 --> 00:35:18,460
knee for ice kazakh configuration

680
00:35:18,460 --> 00:35:21,200
basically I'm wondering how it's going

681
00:35:21,200 --> 00:35:24,230
to be solved in the boot kernel to pass

682
00:35:24,230 --> 00:35:28,670
through the data they're giving to the

683
00:35:28,670 --> 00:35:31,640
to the boot general to say Ozzy booty

684
00:35:31,640 --> 00:35:32,030
yeah

685
00:35:32,030 --> 00:35:34,400
so how data can be passed from the boot

686
00:35:34,400 --> 00:35:36,440
kernel to you because the phantom kernel

687
00:35:36,440 --> 00:35:39,640
because basically it would require

688
00:35:39,640 --> 00:35:42,829
probably defining several protocols or

689
00:35:42,829 --> 00:35:45,230
at least one into your face back right

690
00:35:45,230 --> 00:35:50,900
yeah yeah I think currently I think

691
00:35:50,900 --> 00:35:52,309
that's a few ways of passing information

692
00:35:52,309 --> 00:35:53,720
from the boot kernel to the van time

693
00:35:53,720 --> 00:35:55,849
kernel so for example you could pass

694
00:35:55,849 --> 00:36:00,440
things as crammed like Linux parameters

695
00:36:00,440 --> 00:36:02,359
you could save stuff to the filesystem

696
00:36:02,359 --> 00:36:05,089
load it back up there's a Linux patch

697
00:36:05,089 --> 00:36:07,640
it's not in upstream but there's a open

698
00:36:07,640 --> 00:36:11,000
source makes patch called helium which

699
00:36:11,000 --> 00:36:14,000
lets you save a file system to memory

700
00:36:14,000 --> 00:36:17,869
and then you can remount it in the grant

701
00:36:17,869 --> 00:36:19,940
I'm colonel so it's a few different ways

702
00:36:19,940 --> 00:36:22,010
of transferring information from the

703
00:36:22,010 --> 00:36:23,390
boot kernel to the runtime kernel I'm

704
00:36:23,390 --> 00:36:25,280
not too sure about the specifics of ice

705
00:36:25,280 --> 00:36:29,440
Kazi but one of those might work

706
00:36:29,530 --> 00:36:35,150
in the bias or used by the good colonel

707
00:36:35,150 --> 00:36:37,520
not by Durant and caramel press a

708
00:36:37,520 --> 00:36:41,470
because if we are actually trying to

709
00:36:41,470 --> 00:36:44,750
boost the run time colonel from ice

710
00:36:44,750 --> 00:36:48,020
causing for example like or PC booting

711
00:36:48,020 --> 00:36:51,260
right yeah how that configuration from

712
00:36:51,260 --> 00:36:55,580
Tobias will be postured to boot colonel

713
00:36:55,580 --> 00:36:58,610
yeah so you just wait um so I'm in that

714
00:36:58,610 --> 00:37:00,200
case you I guess you'd implement I

715
00:37:00,200 --> 00:37:02,240
scuzzy I guess if there's a kernel

716
00:37:02,240 --> 00:37:04,820
driver use that or you could use you

717
00:37:04,820 --> 00:37:06,620
could use something in user mode and

718
00:37:06,620 --> 00:37:08,600
then you just pass like any information

719
00:37:08,600 --> 00:37:13,940
you need to it okay great that's it for

720
00:37:13,940 --> 00:37:15,380
questions please give a round of

721
00:37:15,380 --> 00:37:17,410
applause for Arnie

722
00:37:17,410 --> 00:37:21,340
[Applause]

723
00:37:21,340 --> 00:37:28,219
[Music]

