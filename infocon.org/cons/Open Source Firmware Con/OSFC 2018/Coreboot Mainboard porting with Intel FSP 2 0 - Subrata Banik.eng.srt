1
00:00:00,000 --> 00:00:04,700
[Music]

2
00:00:04,700 --> 00:00:09,870
so our next talk is help I su I'm hope I

3
00:00:09,870 --> 00:00:12,500
hope I don't get this wrong a super

4
00:00:12,500 --> 00:00:13,830
attic

5
00:00:13,830 --> 00:00:18,090
okay very very well so he's telling us a

6
00:00:18,090 --> 00:00:20,670
little something about how to get from a

7
00:00:20,670 --> 00:00:23,279
fairly complex schematic to a solid

8
00:00:23,279 --> 00:00:25,529
coreboot firmware and I'm really excited

9
00:00:25,529 --> 00:00:27,930
about this talk so please give a warm

10
00:00:27,930 --> 00:00:30,510
round of applause for the Proctor Banach

11
00:00:30,510 --> 00:00:35,510
thanks thank you

12
00:00:35,510 --> 00:00:38,910
hello everyone my name is Xu beretta

13
00:00:38,910 --> 00:00:40,860
Bannock I'm part of interquartile up

14
00:00:40,860 --> 00:00:43,350
Minh team today I'm here to talk about

15
00:00:43,350 --> 00:00:45,629
coreboot I am in boat porting and within

16
00:00:45,629 --> 00:00:48,660
telophase veto I hope you find this

17
00:00:48,660 --> 00:00:50,309
vision interesting and by at the end of

18
00:00:50,309 --> 00:00:50,879
the session

19
00:00:50,879 --> 00:00:52,260
you got to know something more about

20
00:00:52,260 --> 00:00:56,309
Intel FSP and its interface with code

21
00:00:56,309 --> 00:00:58,920
boot and most importantly this might

22
00:00:58,920 --> 00:01:00,930
decision might help you to ease your

23
00:01:00,930 --> 00:01:01,980
main good protein

24
00:01:01,980 --> 00:01:05,760
job from now onwards so before going to

25
00:01:05,760 --> 00:01:08,070
my first slide I just try to label set

26
00:01:08,070 --> 00:01:10,200
the expectation from this session we

27
00:01:10,200 --> 00:01:12,540
will try to achieve here the core boot

28
00:01:12,540 --> 00:01:14,820
and FSB interfacing part in order to

29
00:01:14,820 --> 00:01:16,530
initialize your main board from your

30
00:01:16,530 --> 00:01:19,619
schematics I assume you are having your

31
00:01:19,619 --> 00:01:21,540
reference thematics based on certain

32
00:01:21,540 --> 00:01:23,490
intellectually and here we'll talk about

33
00:01:23,490 --> 00:01:25,020
what are the different configuration

34
00:01:25,020 --> 00:01:27,630
table you need to configure in order to

35
00:01:27,630 --> 00:01:32,250
initialize your platform so before going

36
00:01:32,250 --> 00:01:34,979
there this is my email id you can send

37
00:01:34,979 --> 00:01:36,570
me an email if you have some feedback

38
00:01:36,570 --> 00:01:38,820
about the current code boot design and

39
00:01:38,820 --> 00:01:41,490
all or something is to be done I'll try

40
00:01:41,490 --> 00:01:47,640
to reach you on so this is a high level

41
00:01:47,640 --> 00:01:49,500
code boot architecture that we maintain

42
00:01:49,500 --> 00:01:54,240
today at Intel FSB then SOC then men

43
00:01:54,240 --> 00:01:56,280
boots what is ever see I will come later

44
00:01:56,280 --> 00:01:58,860
so if you see that SOC and the main mode

45
00:01:58,860 --> 00:02:01,110
layer right so the SOC layer it

46
00:02:01,110 --> 00:02:03,390
typically like skylake heavy leg and

47
00:02:03,390 --> 00:02:06,270
followed by all associates and at Intel

48
00:02:06,270 --> 00:02:08,669
in last one year we tried to really take

49
00:02:08,669 --> 00:02:11,038
the code boot pieces and try to make a

50
00:02:11,038 --> 00:02:13,200
common code out of that and create a

51
00:02:13,200 --> 00:02:13,920
layer called

52
00:02:13,920 --> 00:02:16,560
intercom encode we're also common in is

53
00:02:16,560 --> 00:02:18,600
initialization reside there these

54
00:02:18,600 --> 00:02:20,880
basically help us to minimize our a so

55
00:02:20,880 --> 00:02:22,710
supporting time over generation to

56
00:02:22,710 --> 00:02:25,140
generation and using that a social layer

57
00:02:25,140 --> 00:02:28,140
we have created our first reference

58
00:02:28,140 --> 00:02:30,060
design like for an example in turn come

59
00:02:30,060 --> 00:02:32,160
up with a SOC take example of skylake

60
00:02:32,160 --> 00:02:34,110
and cabling Intel also responsible to

61
00:02:34,110 --> 00:02:37,080
provide the first reference code for a

62
00:02:37,080 --> 00:02:39,330
boat like for an example KB llegar VB or

63
00:02:39,330 --> 00:02:42,120
Scylla god vp we provided the code so

64
00:02:42,120 --> 00:02:45,270
that when next time when om comes and do

65
00:02:45,270 --> 00:02:47,640
the copy exact model they can they can

66
00:02:47,640 --> 00:02:50,310
use those code in the firmware the board

67
00:02:50,310 --> 00:02:52,170
code and create their own designs

68
00:02:52,170 --> 00:02:54,930
so over all so this is the code boots

69
00:02:54,930 --> 00:02:58,200
tag today at Intel so what is F is being

70
00:02:58,200 --> 00:03:01,590
I'll just come to the name next file so

71
00:03:01,590 --> 00:03:04,770
if SP is a piece where it does the

72
00:03:04,770 --> 00:03:08,640
entire Association it combines your CP

73
00:03:08,640 --> 00:03:11,310
initialization your pcs initialization

74
00:03:11,310 --> 00:03:13,140
your immerse initialization had not

75
00:03:13,140 --> 00:03:15,510
thought it's a it's a it's a binary

76
00:03:15,510 --> 00:03:17,970
block with having certain entry and exit

77
00:03:17,970 --> 00:03:19,709
point what those points are all just

78
00:03:19,709 --> 00:03:20,220
Combinator

79
00:03:20,220 --> 00:03:24,090
but today the purpose of FSP is to jail

80
00:03:24,090 --> 00:03:27,360
with any bootloader today our talk scope

81
00:03:27,360 --> 00:03:29,370
will be with core boot code Buddha's

82
00:03:29,370 --> 00:03:31,140
bootloader how it feels gelling with and

83
00:03:31,140 --> 00:03:32,459
what are those configuration parameter

84
00:03:32,459 --> 00:03:35,760
and we need to provide that so when we

85
00:03:35,760 --> 00:03:39,180
start in 2014 timeframe every Vincent

86
00:03:39,180 --> 00:03:42,390
can rectify that the spec was like AFS

87
00:03:42,390 --> 00:03:45,570
p1 dot o spec and over the time with our

88
00:03:45,570 --> 00:03:47,850
community feedback specifically like

89
00:03:47,850 --> 00:03:49,620
feedback from Googlers like Erin and

90
00:03:49,620 --> 00:03:51,780
Duncan it helped to change a lot in the

91
00:03:51,780 --> 00:03:54,750
spec and today we are with FSB to Tardos

92
00:03:54,750 --> 00:03:56,790
back what the specs provide it's

93
00:03:56,790 --> 00:03:58,980
provided several entry and exit point so

94
00:03:58,980 --> 00:04:01,769
as you can see the journey here earlier

95
00:04:01,769 --> 00:04:04,019
we used to have couple of undefined

96
00:04:04,019 --> 00:04:05,970
entry and exit point now we have

97
00:04:05,970 --> 00:04:07,830
categorized those into the three primary

98
00:04:07,830 --> 00:04:10,680
part as if SBT which does your FSB tamp

99
00:04:10,680 --> 00:04:13,230
rap in it and then we have if SPM which

100
00:04:13,230 --> 00:04:15,090
does your MRC like your

101
00:04:15,090 --> 00:04:17,399
FSB memory in it and the last is that if

102
00:04:17,399 --> 00:04:20,370
SP silicon in it apart from that there

103
00:04:20,370 --> 00:04:21,930
are certain notified phases and all

104
00:04:21,930 --> 00:04:23,910
where the bootloader transfer the call

105
00:04:23,910 --> 00:04:25,650
to the FSB and if SP does certain kind

106
00:04:25,650 --> 00:04:26,730
of locking for your P

107
00:04:26,730 --> 00:04:31,680
ch and CPU registers so how the f SP

108
00:04:31,680 --> 00:04:33,660
works as you understand this is a binary

109
00:04:33,660 --> 00:04:35,850
blob and it works with bootloader based

110
00:04:35,850 --> 00:04:37,800
on certain inputs or configuration

111
00:04:37,800 --> 00:04:39,540
because boot load is the master of the

112
00:04:39,540 --> 00:04:43,650
platform it no my platform very well so

113
00:04:43,650 --> 00:04:45,210
those inputs are basically the

114
00:04:45,210 --> 00:04:47,430
configuration data that we call as a UPD

115
00:04:47,430 --> 00:04:50,640
so if to understand that each FSP blobs

116
00:04:50,640 --> 00:04:53,280
right that you are crisp a.m. it has B T

117
00:04:53,280 --> 00:04:55,800
or s those are containing some kind of

118
00:04:55,800 --> 00:04:58,370
configuration data that we call as a UPD

119
00:04:58,370 --> 00:05:00,690
so those are like basically your inputs

120
00:05:00,690 --> 00:05:05,700
to the to the FS p itself so your

121
00:05:05,700 --> 00:05:08,100
bootloader owns that input it provides

122
00:05:08,100 --> 00:05:10,080
based on your associate design on main

123
00:05:10,080 --> 00:05:11,490
board design and then never speak go and

124
00:05:11,490 --> 00:05:13,920
execute those so now this input can be

125
00:05:13,920 --> 00:05:16,440
broadly categorized into two part one is

126
00:05:16,440 --> 00:05:18,810
the statically configured UPD the second

127
00:05:18,810 --> 00:05:20,220
is that dynamic configure you pity

128
00:05:20,220 --> 00:05:22,170
statically configure you put that as a

129
00:05:22,170 --> 00:05:25,680
name suggest that might be based on like

130
00:05:25,680 --> 00:05:28,080
certain Delta between your different

131
00:05:28,080 --> 00:05:30,210
associate where the other associate or

132
00:05:30,210 --> 00:05:31,650
the requirements are changed from a

133
00:05:31,650 --> 00:05:33,480
different always to another OS where

134
00:05:33,480 --> 00:05:34,710
your bootloader no need to take any

135
00:05:34,710 --> 00:05:37,890
decision and whereas the dynamic UPD

136
00:05:37,890 --> 00:05:39,540
where you boot on it to process certain

137
00:05:39,540 --> 00:05:42,540
data to get certain decisions and update

138
00:05:42,540 --> 00:05:44,490
those you theories and then if I further

139
00:05:44,490 --> 00:05:46,230
classified those you pd's I will

140
00:05:46,230 --> 00:05:48,600
classify in transit two part one is your

141
00:05:48,600 --> 00:05:50,430
SOC you pd's another is your main mode

142
00:05:50,430 --> 00:05:54,150
you pity so SOC you pd's that with a

143
00:05:54,150 --> 00:05:56,640
generation of a sociis we may try to

144
00:05:56,640 --> 00:05:58,860
change those UPD ver variable like for

145
00:05:58,860 --> 00:06:02,670
example your i GD size and all those

146
00:06:02,670 --> 00:06:03,090
things

147
00:06:03,090 --> 00:06:06,870
your MMI your size and all but the the

148
00:06:06,870 --> 00:06:08,520
most important part is your main board

149
00:06:08,520 --> 00:06:11,130
configuration that within a SOC based on

150
00:06:11,130 --> 00:06:12,780
your men boat to men board like for an

151
00:06:12,780 --> 00:06:15,120
example om X versus Y my to design two

152
00:06:15,120 --> 00:06:16,380
different men board and the schematic

153
00:06:16,380 --> 00:06:17,760
will be different based on that then we

154
00:06:17,760 --> 00:06:19,590
need to change this parameter as a scope

155
00:06:19,590 --> 00:06:21,120
of today's talk will just focusing on

156
00:06:21,120 --> 00:06:24,750
the main board part of the FS pvd's okay

157
00:06:24,750 --> 00:06:26,610
so here are the sample of the FSB

158
00:06:26,610 --> 00:06:28,710
on the UPD headers if you go to the

159
00:06:28,710 --> 00:06:30,890
vendor code you may find those there

160
00:06:30,890 --> 00:06:34,440
just make sure that you are having F is

161
00:06:34,440 --> 00:06:36,510
free binary with a similar or the

162
00:06:36,510 --> 00:06:38,670
odd-looking compatible version there is

163
00:06:38,670 --> 00:06:40,180
PU PD as well because

164
00:06:40,180 --> 00:06:41,640
binary has to be compatible with your

165
00:06:41,640 --> 00:06:47,350
nasty header now assume that we have

166
00:06:47,350 --> 00:06:49,690
your FSB binary you have also have your

167
00:06:49,690 --> 00:06:52,030
FSB header and you have your bootloader

168
00:06:52,030 --> 00:06:53,560
configured with all the policy

169
00:06:53,560 --> 00:06:55,030
requirement that will come to the next

170
00:06:55,030 --> 00:06:57,400
files so this is how your typically your

171
00:06:57,400 --> 00:06:59,410
code boot an FSB interface works you

172
00:06:59,410 --> 00:07:01,030
stitch it together you flash your code

173
00:07:01,030 --> 00:07:03,010
boot ROM into the system your research

174
00:07:03,010 --> 00:07:05,350
vector holds by your code boot then

175
00:07:05,350 --> 00:07:07,390
coreboot does your real motor protected

176
00:07:07,390 --> 00:07:09,310
mode switching for ie platform then

177
00:07:09,310 --> 00:07:10,840
followed by it comes when you do not

178
00:07:10,840 --> 00:07:11,950
have a real memory you need to

179
00:07:11,950 --> 00:07:14,350
initialize your cache of RAM so caches

180
00:07:14,350 --> 00:07:16,270
Ram initialization can be done in two

181
00:07:16,270 --> 00:07:21,040
way one you can use FSB T or majority of

182
00:07:21,040 --> 00:07:22,840
the chrome side of the code boot story

183
00:07:22,840 --> 00:07:25,540
where we do not use FS PT we use the

184
00:07:25,540 --> 00:07:27,280
native coding good boot which does the

185
00:07:27,280 --> 00:07:29,590
caches can set up so now you have your

186
00:07:29,590 --> 00:07:32,650
FSB t call or native code boot code call

187
00:07:32,650 --> 00:07:34,950
which initializes your caches ram and

188
00:07:34,950 --> 00:07:37,780
now you are again control back to the

189
00:07:37,780 --> 00:07:39,640
bootloader you can your boot order to

190
00:07:39,640 --> 00:07:42,430
fill in all your FSB M related DVDs to

191
00:07:42,430 --> 00:07:44,200
call your MRC initialization memory

192
00:07:44,200 --> 00:07:48,280
training and all and once it again exit

193
00:07:48,280 --> 00:07:51,970
from that name if s p.m. your code would

194
00:07:51,970 --> 00:07:53,890
need to tear down your cache because now

195
00:07:53,890 --> 00:07:55,990
we have switched everything to the main

196
00:07:55,990 --> 00:07:59,080
memory and before according to the FSB s

197
00:07:59,080 --> 00:08:02,080
we might need to fill in all the FSB s

198
00:08:02,080 --> 00:08:03,730
related you P DS which will be based on

199
00:08:03,730 --> 00:08:05,350
your controller the controller you want

200
00:08:05,350 --> 00:08:06,820
to enable like for an example I want to

201
00:08:06,820 --> 00:08:10,770
have a different USB stack on your mind

202
00:08:10,770 --> 00:08:13,750
platform I want to initialize certain

203
00:08:13,750 --> 00:08:17,440
i2c of vs. G spy interface and all so

204
00:08:17,440 --> 00:08:19,960
finally when the FSB is exit the

205
00:08:19,960 --> 00:08:22,810
bootloader does the PC enumeration and

206
00:08:22,810 --> 00:08:25,000
finally it handed over the control to

207
00:08:25,000 --> 00:08:27,160
the payload after it locked down certain

208
00:08:27,160 --> 00:08:29,320
registers PCs register and all in a

209
00:08:29,320 --> 00:08:31,750
notified phase so these are overall

210
00:08:31,750 --> 00:08:33,370
typical scenario between code boot and

211
00:08:33,370 --> 00:08:36,400
your FSB anytime if SP think that he

212
00:08:36,400 --> 00:08:38,260
need to reset a platform for certain

213
00:08:38,260 --> 00:08:40,059
configuration change he transferred the

214
00:08:40,059 --> 00:08:41,650
call to the bootloader and boot load and

215
00:08:41,650 --> 00:08:43,270
know what kind of platform he said it

216
00:08:43,270 --> 00:08:45,130
could be warm vs. cold or global

217
00:08:45,130 --> 00:08:50,820
research and it handles in that way so

218
00:08:50,820 --> 00:08:53,950
with coming here we we understand the

219
00:08:53,950 --> 00:08:54,160
code

220
00:08:54,160 --> 00:08:56,019
would an FSB interface and all so now I

221
00:08:56,019 --> 00:08:57,670
have taken a sample example of a

222
00:08:57,670 --> 00:08:59,680
intel-based mainboard so this is a

223
00:08:59,680 --> 00:09:01,360
typically a folder structure looks like

224
00:09:01,360 --> 00:09:03,009
in your mainboard directory where you

225
00:09:03,009 --> 00:09:05,459
are having roughly around 30 to 35 files

226
00:09:05,459 --> 00:09:09,100
here so all the configuration for your

227
00:09:09,100 --> 00:09:11,170
main boards to support your main boards

228
00:09:11,170 --> 00:09:13,449
and to provide all those UPD to the FSB

229
00:09:13,449 --> 00:09:15,449
so the FSB can initialize your platform

230
00:09:15,449 --> 00:09:17,860
should be should be done here

231
00:09:17,860 --> 00:09:21,930
so all those files are 1 is K config

232
00:09:21,930 --> 00:09:24,490
I'll come there what we do in the source

233
00:09:24,490 --> 00:09:26,350
files and all second will be a ROM state

234
00:09:26,350 --> 00:09:28,300
dot C where typically we just fill in

235
00:09:28,300 --> 00:09:31,139
all the IFSP m related policies and all

236
00:09:31,139 --> 00:09:33,730
third will be ram stitch where mostly we

237
00:09:33,730 --> 00:09:35,949
go and update the it was PS relativities

238
00:09:35,949 --> 00:09:38,319
and the device q dot c be as though all

239
00:09:38,319 --> 00:09:39,759
the coreboot people know that device

240
00:09:39,759 --> 00:09:42,310
leader cv is basically a place where all

241
00:09:42,310 --> 00:09:44,170
the configuration data exists in in

242
00:09:44,170 --> 00:09:47,310
terms of the better readability and all

243
00:09:47,310 --> 00:09:50,709
so as a developer or a user we major

244
00:09:50,709 --> 00:09:52,720
need to focus on those four files to

245
00:09:52,720 --> 00:09:54,939
port a new main board and to change the

246
00:09:54,939 --> 00:09:58,689
fSV configuration parameter and all so

247
00:09:58,689 --> 00:10:00,610
will go one by one or to those files

248
00:10:00,610 --> 00:10:03,490
right so first is the key config so here

249
00:10:03,490 --> 00:10:05,680
we comes and tell what kind of issues

250
00:10:05,680 --> 00:10:07,240
take your main board support for an

251
00:10:07,240 --> 00:10:08,980
example here we are going to tell that

252
00:10:08,980 --> 00:10:11,769
if SB 2.0 the latest back our cable

253
00:10:11,769 --> 00:10:15,939
legacy support the FSB 2.0 ii will be

254
00:10:15,939 --> 00:10:18,550
your f SP m digital DVDs so now it is

255
00:10:18,550 --> 00:10:20,019
the emitter to do p DS can be

256
00:10:20,019 --> 00:10:21,540
categorized into two parts one is your

257
00:10:21,540 --> 00:10:23,920
MRC training rooted OOP it is second

258
00:10:23,920 --> 00:10:25,209
will be your device configuration editor

259
00:10:25,209 --> 00:10:28,509
DVDs so a modulated DVDs can be again

260
00:10:28,509 --> 00:10:30,579
further classified based on your memory

261
00:10:30,579 --> 00:10:32,110
design you have for an example you are

262
00:10:32,110 --> 00:10:34,120
having memory down solution where you

263
00:10:34,120 --> 00:10:36,370
may need to have your a spirit data from

264
00:10:36,370 --> 00:10:38,230
your vendor so you just get the data

265
00:10:38,230 --> 00:10:40,209
from your vendor or if you have a a

266
00:10:40,209 --> 00:10:41,559
sodium kind of configuration that you

267
00:10:41,559 --> 00:10:43,779
typically find in Intel RGB channels

268
00:10:43,779 --> 00:10:46,449
where you can read the SPD via SMS

269
00:10:46,449 --> 00:10:51,670
interface so why not we go to the sample

270
00:10:51,670 --> 00:10:54,160
you P DS so these are the like pretty

271
00:10:54,160 --> 00:10:56,949
used or like in most usee V DS we have

272
00:10:56,949 --> 00:11:00,670
in FS PM right so as I mentioned that

273
00:11:00,670 --> 00:11:02,920
based on your MRC design the shoulder

274
00:11:02,920 --> 00:11:05,860
down or deserves a sodium configuration

275
00:11:05,860 --> 00:11:07,689
you have to choose from where to get the

276
00:11:07,689 --> 00:11:07,990
speed

277
00:11:07,990 --> 00:11:10,270
parameters and in and then next it comes

278
00:11:10,270 --> 00:11:13,480
in your dick you map your dick us byte

279
00:11:13,480 --> 00:11:15,700
mapping between DRAM and CPU and then

280
00:11:15,700 --> 00:11:17,500
followed by our command our comm target

281
00:11:17,500 --> 00:11:19,779
so those are typical values that change

282
00:11:19,779 --> 00:11:22,990
between your DRAM type and CPU types to

283
00:11:22,990 --> 00:11:25,570
get those values so those value will be

284
00:11:25,570 --> 00:11:26,860
changed based on your schematics to

285
00:11:26,860 --> 00:11:29,020
schematics what kind of dim you are

286
00:11:29,020 --> 00:11:30,760
using what kind of CPU you are using and

287
00:11:30,760 --> 00:11:35,140
all right so as as I worked with while

288
00:11:35,140 --> 00:11:36,459
preparing this foil I work with the

289
00:11:36,459 --> 00:11:38,589
Intel MRC team and the advice made to

290
00:11:38,589 --> 00:11:39,910
send this message clearly to the

291
00:11:39,910 --> 00:11:41,709
community that you people feel free to

292
00:11:41,709 --> 00:11:43,480
reach the Intel MRC enabling team and

293
00:11:43,480 --> 00:11:45,160
they'll be happy to provide you this

294
00:11:45,160 --> 00:11:47,740
kind of detail and we are also planning

295
00:11:47,740 --> 00:11:49,480
to get certain tool into the open source

296
00:11:49,480 --> 00:11:51,430
where those data can be freed in base

297
00:11:51,430 --> 00:11:53,050
your new schematics and you get all

298
00:11:53,050 --> 00:11:55,000
those parameters the FSB configure

299
00:11:55,000 --> 00:11:57,550
parameter by your own so that that may

300
00:11:57,550 --> 00:11:59,080
take little time because the tool they

301
00:11:59,080 --> 00:12:00,160
are started creating based on our

302
00:12:00,160 --> 00:12:03,640
feedback so right now the best approach

303
00:12:03,640 --> 00:12:06,730
you go and approach to our Intel MRC in

304
00:12:06,730 --> 00:12:09,130
blinking membrane building they will

305
00:12:09,130 --> 00:12:12,100
help you out apart from that if you see

306
00:12:12,100 --> 00:12:13,930
that device side of the parameter that

307
00:12:13,930 --> 00:12:16,750
might be PCI root port configuration you

308
00:12:16,750 --> 00:12:18,190
may have different route ports in your

309
00:12:18,190 --> 00:12:20,050
SOC capabilities and one of the route

310
00:12:20,050 --> 00:12:22,000
put your actual device is connected for

311
00:12:22,000 --> 00:12:24,279
example you are having a Wi-Fi or nvme

312
00:12:24,279 --> 00:12:26,950
connected on PCI root 4 9 and 10 you

313
00:12:26,950 --> 00:12:28,600
only need to provide those kinds of port

314
00:12:28,600 --> 00:12:31,839
mapping and last is that your serial

315
00:12:31,839 --> 00:12:33,730
port like for an example you want to get

316
00:12:33,730 --> 00:12:35,649
a debug lock of the FSB

317
00:12:35,649 --> 00:12:37,779
you know to specify which port we want

318
00:12:37,779 --> 00:12:39,459
to get a lock so for an example

319
00:12:39,459 --> 00:12:41,440
typically what we do we use a config

320
00:12:41,440 --> 00:12:43,240
that Co same config we are using in core

321
00:12:43,240 --> 00:12:45,190
good to get serial law we just busy for

322
00:12:45,190 --> 00:12:46,750
the same config to get the HSP debug log

323
00:12:46,750 --> 00:12:51,279
as well so we have covered the FS p.m.

324
00:12:51,279 --> 00:12:53,170
part so learn now let's come to the FSB

325
00:12:53,170 --> 00:12:55,000
s configuration as I mentioned if it's

326
00:12:55,000 --> 00:12:56,529
base configuration is totally depend on

327
00:12:56,529 --> 00:12:58,180
your schematic design your main board

328
00:12:58,180 --> 00:13:00,070
design you may decide to have a

329
00:13:00,070 --> 00:13:01,870
different USB connected to the different

330
00:13:01,870 --> 00:13:03,970
controller right you may not have all

331
00:13:03,970 --> 00:13:06,550
the USB port used in your main mode

332
00:13:06,550 --> 00:13:08,950
design it explicitly come and tell what

333
00:13:08,950 --> 00:13:10,540
all the USB port you want to use it

334
00:13:10,540 --> 00:13:13,060
versus whether it is USB 2.0 is it is V

335
00:13:13,060 --> 00:13:16,900
3.0 type C but not and also like your

336
00:13:16,900 --> 00:13:19,810
configuration for your Wi-Fi or your BT

337
00:13:19,810 --> 00:13:21,040
configuration

338
00:13:21,040 --> 00:13:22,900
and your storage you mean you may not

339
00:13:22,900 --> 00:13:24,970
have thought a for an example let me go

340
00:13:24,970 --> 00:13:26,170
to the most-used

341
00:13:26,170 --> 00:13:29,650
you biddies so these are pretty widely

342
00:13:29,650 --> 00:13:31,780
use you pity that we use for our our

343
00:13:31,780 --> 00:13:34,030
main mode to mainboard porting part for

344
00:13:34,030 --> 00:13:35,320
an example take a look into the SATA

345
00:13:35,320 --> 00:13:37,420
inable if you do not have SATA in your

346
00:13:37,420 --> 00:13:39,280
final design you don't need to set that

347
00:13:39,280 --> 00:13:42,520
you pities for an example the PCH LAN

348
00:13:42,520 --> 00:13:44,830
you don't want to have your onboard LAN

349
00:13:44,830 --> 00:13:48,040
you just go and disable that or Weathers

350
00:13:48,040 --> 00:13:51,070
you want to have the MMC enable with H

351
00:13:51,070 --> 00:13:52,870
is 400 we just need to go and enable

352
00:13:52,870 --> 00:13:55,090
those you P DS so it does all the MMC

353
00:13:55,090 --> 00:13:58,710
tuning parameter by its own right and as

354
00:13:58,710 --> 00:14:03,060
this foil suggested so most of the your

355
00:14:03,060 --> 00:14:05,920
configuration data against the SOC what

356
00:14:05,920 --> 00:14:07,420
are the capabilities he provide and what

357
00:14:07,420 --> 00:14:08,740
are the capability on mainboard want to

358
00:14:08,740 --> 00:14:10,630
explore from the SOC based on that you

359
00:14:10,630 --> 00:14:11,890
just providing those configuration

360
00:14:11,890 --> 00:14:18,700
parameters okay and see the sample

361
00:14:18,700 --> 00:14:20,440
example of our device free everybody

362
00:14:20,440 --> 00:14:22,480
knows that this is the place where we go

363
00:14:22,480 --> 00:14:23,980
and tells okay this is my root port

364
00:14:23,980 --> 00:14:26,500
number we want to enable this is my

365
00:14:26,500 --> 00:14:27,940
clock source programming and all and

366
00:14:27,940 --> 00:14:30,460
these are my USB port that we want to

367
00:14:30,460 --> 00:14:31,960
enable verse is not enable with

368
00:14:31,960 --> 00:14:37,270
different configurations so let me go to

369
00:14:37,270 --> 00:14:40,780
a sample mainboard pooting work right

370
00:14:40,780 --> 00:14:42,970
there's a real hands-on kind of thing so

371
00:14:42,970 --> 00:14:45,370
I have designed as a reference key

372
00:14:45,370 --> 00:14:47,740
matting's here so in the schematics we

373
00:14:47,740 --> 00:14:50,940
have a cable like a sushi with our

374
00:14:50,940 --> 00:14:55,300
lpddr3 with dual channel memory on your

375
00:14:55,300 --> 00:14:57,730
and then you have your display over EDP

376
00:14:57,730 --> 00:15:00,910
and you have bunch of USB device and

377
00:15:00,910 --> 00:15:03,100
from storage site you are having n MC

378
00:15:03,100 --> 00:15:05,920
and SD controller and for connectivity

379
00:15:05,920 --> 00:15:09,160
we're having BT and Wi-Fi over PCI

380
00:15:09,160 --> 00:15:11,050
Express would put nine so all this data

381
00:15:11,050 --> 00:15:16,060
can be derived from your schematics so

382
00:15:16,060 --> 00:15:19,210
as we know that first thing is that we

383
00:15:19,210 --> 00:15:21,610
have to go and select the K config to

384
00:15:21,610 --> 00:15:23,980
scale okay this is my FSB 2.0 spec

385
00:15:23,980 --> 00:15:25,570
supports I didn't capture that

386
00:15:25,570 --> 00:15:27,430
intentionally because normally we do

387
00:15:27,430 --> 00:15:30,250
that so now as a step one first we need

388
00:15:30,250 --> 00:15:33,340
to provide IFSP M rated DVD updates as I

389
00:15:33,340 --> 00:15:34,840
mentioned there we are having our

390
00:15:34,840 --> 00:15:36,670
memory down solution so I need to

391
00:15:36,670 --> 00:15:39,370
approach my vendor on the memory vendor

392
00:15:39,370 --> 00:15:42,370
to get my spirit data if it is a Sode

393
00:15:42,370 --> 00:15:44,380
you don't need to go to your memory

394
00:15:44,380 --> 00:15:45,850
vendor rather than you just provides a

395
00:15:45,850 --> 00:15:48,340
simple address that referring to the

396
00:15:48,340 --> 00:15:51,490
earlier reference of your uvd list so

397
00:15:51,490 --> 00:15:53,020
once you have that these are sample code

398
00:15:53,020 --> 00:15:54,970
pieces from the code boot that you've

399
00:15:54,970 --> 00:15:56,620
got your SP data you assign to the

400
00:15:56,620 --> 00:16:00,100
respective SPD pointer there will be two

401
00:16:00,100 --> 00:16:02,410
channel we told that we channel 0 dim 0

402
00:16:02,410 --> 00:16:04,839
channel wand in zero and then comes to

403
00:16:04,839 --> 00:16:08,320
your bunch of RUP DS that will be change

404
00:16:08,320 --> 00:16:10,510
that has to modify based on your

405
00:16:10,510 --> 00:16:12,970
reference schematics for example your DQ

406
00:16:12,970 --> 00:16:15,010
and the you guide map and then on our

407
00:16:15,010 --> 00:16:16,870
comm and our comm target as I already

408
00:16:16,870 --> 00:16:19,240
explained that this will be changed

409
00:16:19,240 --> 00:16:20,920
based on the memory type and they so see

410
00:16:20,920 --> 00:16:22,839
you are using I try to capture here the

411
00:16:22,839 --> 00:16:25,000
Kubelik reference values if you

412
00:16:25,000 --> 00:16:27,460
associate something other than cable you

413
00:16:27,460 --> 00:16:29,339
please get the same same value from our

414
00:16:29,339 --> 00:16:33,279
Intel memory enabling team and for the

415
00:16:33,279 --> 00:16:35,740
serial debug if you have a FSB debug

416
00:16:35,740 --> 00:16:38,529
binary available in your code base you

417
00:16:38,529 --> 00:16:40,420
can try to set this UPD to get the log

418
00:16:40,420 --> 00:16:43,420
from the that the FSB for the lock from

419
00:16:43,420 --> 00:16:48,160
the same you add port we have and then

420
00:16:48,160 --> 00:16:51,670
this is the FSB su p DS so this page is

421
00:16:51,670 --> 00:16:54,339
all about referring your schematics so

422
00:16:54,339 --> 00:16:56,110
first is that USB configuration USB

423
00:16:56,110 --> 00:16:57,670
configurations depend on your board

424
00:16:57,670 --> 00:16:59,320
design you have you you might have a

425
00:16:59,320 --> 00:17:00,580
convertible design you might have a

426
00:17:00,580 --> 00:17:02,500
two-in-one design you may have your USB

427
00:17:02,500 --> 00:17:04,660
device over your daughter card versus

428
00:17:04,660 --> 00:17:06,040
you are having USB on your main boards

429
00:17:06,040 --> 00:17:09,220
my my to be right so this is like your

430
00:17:09,220 --> 00:17:11,500
macros those are like USB 2 port long

431
00:17:11,500 --> 00:17:14,560
and all those are macros those macros

432
00:17:14,560 --> 00:17:16,480
internally handle all those different

433
00:17:16,480 --> 00:17:18,819
file settings for the USB and alright so

434
00:17:18,819 --> 00:17:20,050
you don't need to bothered about those

435
00:17:20,050 --> 00:17:21,910
because there are ample amount of macros

436
00:17:21,910 --> 00:17:23,740
been given and those values are assigned

437
00:17:23,740 --> 00:17:25,990
to the HP UPD internally only thing you

438
00:17:25,990 --> 00:17:27,579
need to bother to provide the OC pin

439
00:17:27,579 --> 00:17:29,440
programming and OCP in programming again

440
00:17:29,440 --> 00:17:31,090
something that if you look at your

441
00:17:31,090 --> 00:17:32,890
schematics they will got to know what is

442
00:17:32,890 --> 00:17:34,540
the Aussie pin for a certain USB port

443
00:17:34,540 --> 00:17:37,450
you have you provide those details and a

444
00:17:37,450 --> 00:17:38,980
certain a certain port where you no need

445
00:17:38,980 --> 00:17:40,390
to have our C pin programming for

446
00:17:40,390 --> 00:17:42,280
example I think for BT we don't need to

447
00:17:42,280 --> 00:17:44,080
provide those 16 programming you go and

448
00:17:44,080 --> 00:17:47,560
skip that one for the LPS is one so

449
00:17:47,560 --> 00:17:48,700
LPS's we call it

450
00:17:48,700 --> 00:17:52,570
any your eye to see and your g-spot or

451
00:17:52,570 --> 00:17:54,610
your spy or that you what we call LPS's

452
00:17:54,610 --> 00:17:57,940
so here this depends on your the

453
00:17:57,940 --> 00:18:01,240
different so here like like different

454
00:18:01,240 --> 00:18:03,700
touchscreen the trackpad or whatnot you

455
00:18:03,700 --> 00:18:05,980
have right so based on those so where

456
00:18:05,980 --> 00:18:09,370
you use your I to say interface or where

457
00:18:09,370 --> 00:18:12,820
you use your TPM and all so in maturity

458
00:18:12,820 --> 00:18:14,500
cases we want to configure those in a

459
00:18:14,500 --> 00:18:16,780
PCI mode is ill it's akin a requiring

460
00:18:16,780 --> 00:18:18,520
from the kernel in in which mode kernel

461
00:18:18,520 --> 00:18:20,530
wants to have this you may find one

462
00:18:20,530 --> 00:18:22,290
interesting one that is that you are -

463
00:18:22,290 --> 00:18:25,780
it's a I use keep in it this is because

464
00:18:25,780 --> 00:18:27,340
typically in the chrome side of this

465
00:18:27,340 --> 00:18:30,550
world we try to use you are to fora of

466
00:18:30,550 --> 00:18:32,350
our serial debug and all like to get a

467
00:18:32,350 --> 00:18:34,420
serial log and we we have already

468
00:18:34,420 --> 00:18:36,460
initialized that in code board before

469
00:18:36,460 --> 00:18:38,230
giving a control to FSB so we are

470
00:18:38,230 --> 00:18:40,150
telling FSP don't try to reinitialize it

471
00:18:40,150 --> 00:18:42,070
because it involved lots of GPIO

472
00:18:42,070 --> 00:18:44,860
programming and all so this is the way

473
00:18:44,860 --> 00:18:46,870
you can tell FSB to skip certain

474
00:18:46,870 --> 00:18:49,600
controller initialization then come to

475
00:18:49,600 --> 00:18:50,980
your storage part it is pretty straight

476
00:18:50,980 --> 00:18:52,780
and simple that you have your Eames

477
00:18:52,780 --> 00:18:54,610
controller on to enable with a different

478
00:18:54,610 --> 00:18:56,980
configuration mode and same with the SD

479
00:18:56,980 --> 00:19:00,040
card sort the connectivity again its

480
00:19:00,040 --> 00:19:01,780
refer to your schematics you may have

481
00:19:01,780 --> 00:19:03,640
your schematics clearly mentioned which

482
00:19:03,640 --> 00:19:05,500
clocks was numbered this device is

483
00:19:05,500 --> 00:19:07,090
mapped to and what will be the PC a

484
00:19:07,090 --> 00:19:08,470
route for where this device is connected

485
00:19:08,470 --> 00:19:12,580
so you so here for example it's a root

486
00:19:12,580 --> 00:19:15,010
port 9 where you have your wipe on the

487
00:19:15,010 --> 00:19:16,810
Wi-Fi module sits on so it's a

488
00:19:16,810 --> 00:19:18,490
zero-based map so we provide like a

489
00:19:18,490 --> 00:19:20,950
offset at 8 you have your Wi-Fi

490
00:19:20,950 --> 00:19:22,840
connected and clock so the number is 2

491
00:19:22,840 --> 00:19:25,470
where we just map those connections for

492
00:19:25,470 --> 00:19:27,760
the graphics initialization you need to

493
00:19:27,760 --> 00:19:30,160
prepare a V V T that we prepare based on

494
00:19:30,160 --> 00:19:31,870
the panel specification you have your

495
00:19:31,870 --> 00:19:34,330
panels are given using that we try to

496
00:19:34,330 --> 00:19:37,000
create the view VT point your VT data

497
00:19:37,000 --> 00:19:39,010
table then and that data table you need

498
00:19:39,010 --> 00:19:40,630
to locate from your C BFS that is how

499
00:19:40,630 --> 00:19:42,970
today we do in code boot and assign the

500
00:19:42,970 --> 00:19:44,410
same into your graphics configuration

501
00:19:44,410 --> 00:19:46,570
pointer if SP takes care of the panel

502
00:19:46,570 --> 00:19:49,780
installation so so here mostly whatever

503
00:19:49,780 --> 00:19:51,940
the device I have mentioned in my early

504
00:19:51,940 --> 00:19:53,770
schematics design we try to cover

505
00:19:53,770 --> 00:19:55,630
majority of the initialization there

506
00:19:55,630 --> 00:19:57,310
might be one or two configuration for

507
00:19:57,310 --> 00:19:59,770
example you may have your nvme over a

508
00:19:59,770 --> 00:20:01,960
PCI Express so then you need to go

509
00:20:01,960 --> 00:20:05,230
enable those here so certain thing can

510
00:20:05,230 --> 00:20:07,210
be added or deleted so this is a

511
00:20:07,210 --> 00:20:09,429
typically from the the reference board

512
00:20:09,429 --> 00:20:12,009
design that I mentioned having said that

513
00:20:12,009 --> 00:20:15,279
it's a pretty much done but yeah there

514
00:20:15,279 --> 00:20:17,230
are certain things for an example your

515
00:20:17,230 --> 00:20:19,480
GPA programming your a CPI programming

516
00:20:19,480 --> 00:20:20,860
and all those would be like your

517
00:20:20,860 --> 00:20:22,869
mainboard porting part and when you do a

518
00:20:22,869 --> 00:20:24,820
copy exact model you basically leverage

519
00:20:24,820 --> 00:20:26,980
from one design to other design but

520
00:20:26,980 --> 00:20:29,549
nothing too specific to the FSP as such

521
00:20:29,549 --> 00:20:33,129
so I'm just ending here and open for the

522
00:20:33,129 --> 00:20:35,169
question answer please let me know if

523
00:20:35,169 --> 00:20:43,269
you have so okay wastes time to take

524
00:20:43,269 --> 00:20:49,950
questions there are questions beautiful

525
00:20:53,630 --> 00:20:56,580
so if we wanted to play around with some

526
00:20:56,580 --> 00:20:57,720
of this KP like stuff that you're

527
00:20:57,720 --> 00:20:58,740
talking about specifically the

528
00:20:58,740 --> 00:21:00,090
configuration for the kernel is there a

529
00:21:00,090 --> 00:21:03,140
place where we could go maybe on Intel's

530
00:21:03,140 --> 00:21:06,029
kernel on github where there's a branch

531
00:21:06,029 --> 00:21:07,169
where we could check out some of this

532
00:21:07,169 --> 00:21:09,929
configuration yes so actually all of our

533
00:21:09,929 --> 00:21:12,210
cable encoder are there in the open

534
00:21:12,210 --> 00:21:14,070
source right we just go to coreboot or

535
00:21:14,070 --> 00:21:16,230
over G so computer to what she having

536
00:21:16,230 --> 00:21:18,450
all the cabling Atsushi and there might

537
00:21:18,450 --> 00:21:20,070
be today adding there and more than 10

538
00:21:20,070 --> 00:21:22,500
sample platform including the our our

539
00:21:22,500 --> 00:21:25,380
VP's that quoted there so all the code

540
00:21:25,380 --> 00:21:26,820
base that i just copied some code

541
00:21:26,820 --> 00:21:28,350
snippet or not all from the open source

542
00:21:28,350 --> 00:21:30,690
code base and i think some places i was

543
00:21:30,690 --> 00:21:33,870
referring to the file names might be

544
00:21:33,870 --> 00:21:37,289
like this like you can you can go and

545
00:21:37,289 --> 00:21:41,450
rather forget those from there yeah

546
00:21:41,450 --> 00:21:43,919
ok I have to say I wasn't prepared for

547
00:21:43,919 --> 00:21:46,350
this and so early so we have liked until

548
00:21:46,350 --> 00:21:50,520
3 p.m. for questions so we can just

549
00:21:50,520 --> 00:21:52,679
write quick quickly write a book with

550
00:21:52,679 --> 00:21:54,390
all the questions in it so and then

551
00:21:54,390 --> 00:21:56,520
handed to you and yeah we can go over it

552
00:21:56,520 --> 00:21:58,770
like we have so much time oh is it so I

553
00:21:58,770 --> 00:21:59,909
should I should rewrite this in one more

554
00:21:59,909 --> 00:22:04,169
time like a second talk you can hold

555
00:22:04,169 --> 00:22:06,630
like a small one like an anecdote or

556
00:22:06,630 --> 00:22:09,990
something no really I can take questions

557
00:22:09,990 --> 00:22:11,730
a lot of questions ok one two

558
00:22:11,730 --> 00:22:19,620
I am one question do you plan in any way

559
00:22:19,620 --> 00:22:23,700
or have you heard of the there's a

560
00:22:23,700 --> 00:22:27,059
utility for all internal devices and

561
00:22:27,059 --> 00:22:31,590
Sandy Bridge and Ivy Bridge

562
00:22:31,590 --> 00:22:35,340
I forget the name which Wladimir out of

563
00:22:35,340 --> 00:22:38,220
pot and which he wrote and go which

564
00:22:38,220 --> 00:22:40,350
makes a port kind of easy and which

565
00:22:40,350 --> 00:22:43,020
collects certain data from the running

566
00:22:43,020 --> 00:22:45,149
system ok then more or less creates

567
00:22:45,149 --> 00:22:47,549
already a template for coreboot which

568
00:22:47,549 --> 00:22:51,530
only has to be minimally be adapted

569
00:22:51,530 --> 00:22:52,710
[Music]

570
00:22:52,710 --> 00:22:54,210
are you planning something like this to

571
00:22:54,210 --> 00:22:57,570
make porting even more easy for new

572
00:22:57,570 --> 00:22:58,409
Intel BOTS

573
00:22:58,409 --> 00:23:00,140
let me try to

574
00:23:00,140 --> 00:23:03,170
ask you again right so you mean that you

575
00:23:03,170 --> 00:23:05,690
have flashed or you have your duty up

576
00:23:05,690 --> 00:23:08,360
and running you try to extract the the

577
00:23:08,360 --> 00:23:13,040
spy yeah I have the vendor yeah yes and

578
00:23:13,040 --> 00:23:15,830
and then you want to add certain code

579
00:23:15,830 --> 00:23:18,680
pieces and all I need to reteach and

580
00:23:18,680 --> 00:23:21,620
rerun it like like this well then there

581
00:23:21,620 --> 00:23:23,840
is like until tool which gets the GPIO

582
00:23:23,840 --> 00:23:25,370
configuration or something like this

583
00:23:25,370 --> 00:23:28,280
dumb okay this is converted into

584
00:23:28,280 --> 00:23:30,530
coreboot source code more or less okay

585
00:23:30,530 --> 00:23:32,540
so yeah I think I think is something

586
00:23:32,540 --> 00:23:35,150
that talked we have early of this year

587
00:23:35,150 --> 00:23:38,900
with Duncan that we were thinking that

588
00:23:38,900 --> 00:23:40,840
there might be some kind of tool that

589
00:23:40,840 --> 00:23:44,240
today we have with Windows platforms not

590
00:23:44,240 --> 00:23:46,010
on the chrome side right where it is

591
00:23:46,010 --> 00:23:48,230
pretty easy to configure your GPIO s and

592
00:23:48,230 --> 00:23:50,780
all right so there could be two way to

593
00:23:50,780 --> 00:23:52,370
work on that either you run on the same

594
00:23:52,370 --> 00:23:54,500
on the on your duty itself when it is

595
00:23:54,500 --> 00:23:56,690
booted and all or me or you halt it

596
00:23:56,690 --> 00:23:58,580
somewhere you basically overwrite those

597
00:23:58,580 --> 00:24:02,150
memory data and by some mean by some to

598
00:24:02,150 --> 00:24:03,830
land on so ultimately when system boot

599
00:24:03,830 --> 00:24:05,210
system boots with your own configuration

600
00:24:05,210 --> 00:24:07,340
not that what your BIOS has been

601
00:24:07,340 --> 00:24:09,380
reprogram and all right

602
00:24:09,380 --> 00:24:11,810
so so to do that we are already talking

603
00:24:11,810 --> 00:24:14,270
we're like internally right to increase

604
00:24:14,270 --> 00:24:15,830
a more deeper capability in poor boot

605
00:24:15,830 --> 00:24:18,320
and to help that developer community to

606
00:24:18,320 --> 00:24:20,780
have certain pieces and in a good mean

607
00:24:20,780 --> 00:24:22,730
to configure them back and to boot it

608
00:24:22,730 --> 00:24:25,790
you can't write like me maybe your GP I

609
00:24:25,790 --> 00:24:27,170
or a CPA could be a good example of

610
00:24:27,170 --> 00:24:29,990
doing that just to change your a CPI or

611
00:24:29,990 --> 00:24:32,090
GPIO you know need to stitch your entire

612
00:24:32,090 --> 00:24:34,100
BIOS image it matter you might be halt

613
00:24:34,100 --> 00:24:36,200
at some like any given console or

614
00:24:36,200 --> 00:24:38,120
somewhere and you update those data and

615
00:24:38,120 --> 00:24:40,700
simply boot over a second if if that is

616
00:24:40,700 --> 00:24:44,020
the question we are working on it

617
00:24:48,070 --> 00:24:52,750
so can you explain how intel decides

618
00:24:52,750 --> 00:24:54,910
which chipsets are going to be supported

619
00:24:54,910 --> 00:24:57,700
through FSP or how we can like how a

620
00:24:57,700 --> 00:25:00,610
potential customer might ask for

621
00:25:00,610 --> 00:25:03,070
specific support for a particular chip

622
00:25:03,070 --> 00:25:06,580
okay so yeah I will I would like to add

623
00:25:06,580 --> 00:25:08,860
a vignette also to answer this quick

624
00:25:08,860 --> 00:25:10,360
question let me try to provide what

625
00:25:10,360 --> 00:25:12,100
story I have from my side right

626
00:25:12,100 --> 00:25:14,560
so typically now the plan that we have

627
00:25:14,560 --> 00:25:16,870
all the new SOC is right should be

628
00:25:16,870 --> 00:25:19,450
having the FSB support right and from

629
00:25:19,450 --> 00:25:21,250
the generation like like a little bit

630
00:25:21,250 --> 00:25:23,290
old generation I love you Vincent no the

631
00:25:23,290 --> 00:25:25,840
answer might be what are the like from

632
00:25:25,840 --> 00:25:29,909
where we decided to have a HP support

633
00:25:34,260 --> 00:25:36,600
your workout today

634
00:25:36,600 --> 00:25:40,810
so yes Brad said we have FSP 204 the

635
00:25:40,810 --> 00:25:44,590
latest client SOC Zappala like skylight

636
00:25:44,590 --> 00:25:48,040
cabby leg and going forward we really

637
00:25:48,040 --> 00:25:50,820
want to have a unified roadmap so

638
00:25:50,820 --> 00:25:53,440
upcoming working with the Zeon teams

639
00:25:53,440 --> 00:25:55,930
about having it for core we have it for

640
00:25:55,930 --> 00:25:59,140
some microserver x' so yeah don't have a

641
00:25:59,140 --> 00:26:01,720
let's don't have a forward-looking Intel

642
00:26:01,720 --> 00:26:03,670
roadmap to share but we're working with

643
00:26:03,670 --> 00:26:05,440
all the product teams such that we can

644
00:26:05,440 --> 00:26:08,650
have FSP - oh so that when different

645
00:26:08,650 --> 00:26:11,310
divisions produce whether it's our IOT

646
00:26:11,310 --> 00:26:14,020
client where subrata is representing or

647
00:26:14,020 --> 00:26:17,170
server as we work with the upstream open

648
00:26:17,170 --> 00:26:18,580
source communities it can be the same

649
00:26:18,580 --> 00:26:20,950
experience but today it isn't consistent

650
00:26:20,950 --> 00:26:22,450
if you look at github we don't have the

651
00:26:22,450 --> 00:26:25,090
best coverage and we're really trying to

652
00:26:25,090 --> 00:26:28,210
get FSP - so the workflow you brought a

653
00:26:28,210 --> 00:26:29,830
showed for like a Chromebook you could

654
00:26:29,830 --> 00:26:32,020
do in the future for servers rather

655
00:26:32,020 --> 00:26:33,280
micro server or

656
00:26:33,280 --> 00:26:36,430
Xeon but we're not there yet and a lot

657
00:26:36,430 --> 00:26:37,900
of feedback from folks in the room here

658
00:26:37,900 --> 00:26:41,500
of helped motivate us to accelerate some

659
00:26:41,500 --> 00:26:45,160
of that on a roadmap alignment thanks

660
00:26:45,160 --> 00:26:50,200
Vincent so any more questions yeah it on

661
00:26:50,200 --> 00:26:52,920
her so keep them coming

662
00:26:54,720 --> 00:26:57,270
so the one question I get a lot is I get

663
00:26:57,270 --> 00:27:01,380
it today too does fSV for chipset and

664
00:27:01,380 --> 00:27:04,710
ply UEFI then is not there anymore right

665
00:27:04,710 --> 00:27:09,090
so does the UEFI partitioning of SCC the

666
00:27:09,090 --> 00:27:11,520
PDI to DXE does that go away and become

667
00:27:11,520 --> 00:27:13,620
FSP and does it get replaced or how's

668
00:27:13,620 --> 00:27:16,770
that all supposed to work um maybe you

669
00:27:16,770 --> 00:27:18,360
can outlast Co we've been said to give

670
00:27:18,360 --> 00:27:23,640
the answer but yeah yes so the question

671
00:27:23,640 --> 00:27:30,270
was SE CPI Dixie vs. FSP so the FSP as

672
00:27:30,270 --> 00:27:34,670
described by subrata is really the

673
00:27:34,670 --> 00:27:37,140
potentially a subset of the pei phase

674
00:27:37,140 --> 00:27:40,710
memory initialization system agent but

675
00:27:40,710 --> 00:27:43,710
the sec equivalents typically done by

676
00:27:43,710 --> 00:27:45,990
your core mainboard vendor is one of the

677
00:27:45,990 --> 00:27:47,910
things FSP doesn't do is state

678
00:27:47,910 --> 00:27:50,370
management it's really stateless so the

679
00:27:50,370 --> 00:27:53,910
platform codes responsible for you know

680
00:27:53,910 --> 00:27:56,130
securing the FSP as part of its overall

681
00:27:56,130 --> 00:27:58,380
update say you're booting and you want

682
00:27:58,380 --> 00:28:01,080
to save the memory settings the platform

683
00:28:01,080 --> 00:28:05,820
code has to do that the server work we

684
00:28:05,820 --> 00:28:08,640
opened is actually a couple firmware

685
00:28:08,640 --> 00:28:11,430
volumes which is more than an F SP and

686
00:28:11,430 --> 00:28:14,040
then as I described in the keynote this

687
00:28:14,040 --> 00:28:16,740
distinction between FS PE and firmer

688
00:28:16,740 --> 00:28:19,080
volumes like your use case we want to

689
00:28:19,080 --> 00:28:21,030
kind of break that down and sort of have

690
00:28:21,030 --> 00:28:24,210
the silicon firmer volumes that expose

691
00:28:24,210 --> 00:28:26,370
the f SP interface if you want to do

692
00:28:26,370 --> 00:28:28,950
this style of usage or maybe a fatter

693
00:28:28,950 --> 00:28:32,250
one to do the kind of usage you're doing

694
00:28:32,250 --> 00:28:34,140
with Linux baby the challenge with just

695
00:28:34,140 --> 00:28:35,760
having sort of the boot block as a

696
00:28:35,760 --> 00:28:38,580
binary a fat binary is the richness of

697
00:28:38,580 --> 00:28:40,320
configuration may need to do for your

698
00:28:40,320 --> 00:28:41,100
system board

699
00:28:41,100 --> 00:28:43,620
so in variability variably some of the

700
00:28:43,620 --> 00:28:46,830
complexity of FSP these you PD's are

701
00:28:46,830 --> 00:28:49,530
really driven by board layout

702
00:28:49,530 --> 00:28:51,570
variability right and so you sort of

703
00:28:51,570 --> 00:28:54,770
need that anyway but we want to make the

704
00:28:54,770 --> 00:28:58,170
silicon Fe and FSP sort of one in the

705
00:28:58,170 --> 00:28:59,130
same and

706
00:28:59,130 --> 00:29:01,170
have a more consistent roadmap so if

707
00:29:01,170 --> 00:29:02,670
you're doing this workflow or you're

708
00:29:02,670 --> 00:29:05,340
dropping it into a sort of boot block

709
00:29:05,340 --> 00:29:08,610
style thing Linux boot needs it's just a

710
00:29:08,610 --> 00:29:12,030
different flavor but yeah the work the

711
00:29:12,030 --> 00:29:14,040
thing you're doing does more than FSB

712
00:29:14,040 --> 00:29:15,810
but it's very much specific to some of

713
00:29:15,810 --> 00:29:18,360
your main board targets if you tried to

714
00:29:18,360 --> 00:29:20,610
drop that into another main board you

715
00:29:20,610 --> 00:29:23,220
have some things baked in whereas FSP

716
00:29:23,220 --> 00:29:26,490
purposely is esos be only specific so it

717
00:29:26,490 --> 00:29:28,110
has to expose more port specific

718
00:29:28,110 --> 00:29:30,000
configuration and that drives some of

719
00:29:30,000 --> 00:29:42,060
the complexity no I don't want to stop

720
00:29:42,060 --> 00:29:49,800
here really high and so I understand

721
00:29:49,800 --> 00:29:52,500
that Intel is not willing to liberate

722
00:29:52,500 --> 00:29:55,170
the FSB at this time but other things

723
00:29:55,170 --> 00:29:58,140
that could be done to a source code even

724
00:29:58,140 --> 00:30:01,500
source code like a binary blob no okay

725
00:30:01,500 --> 00:30:03,420
to liberate it innocently become mostly

726
00:30:03,420 --> 00:30:06,000
software yeah so other things that could

727
00:30:06,000 --> 00:30:08,190
be done to simplify the communities work

728
00:30:08,190 --> 00:30:10,500
in replacing the FSB with like native

729
00:30:10,500 --> 00:30:12,390
free code so for instance providing more

730
00:30:12,390 --> 00:30:15,540
entry points so that some just parts of

731
00:30:15,540 --> 00:30:17,520
these FSP could be replaced one after

732
00:30:17,520 --> 00:30:19,320
the other so that eventually could get

733
00:30:19,320 --> 00:30:21,150
rid of the whole thing and have native

734
00:30:21,150 --> 00:30:23,640
code like on the old Intel platforms

735
00:30:23,640 --> 00:30:27,200
mm-hmm yeah so yeah I'll come there so

736
00:30:27,200 --> 00:30:30,210
initiation I'll have us not containing

737
00:30:30,210 --> 00:30:33,120
any matches saying that Intel is not

738
00:30:33,120 --> 00:30:34,950
willing to give the FSB source code I

739
00:30:34,950 --> 00:30:38,400
didn't mention that right so I think

740
00:30:38,400 --> 00:30:40,770
about Intel team Vincent can add me

741
00:30:40,770 --> 00:30:43,440
there so we were looking forward right

742
00:30:43,440 --> 00:30:45,900
now a binary support model but slowly we

743
00:30:45,900 --> 00:30:48,420
are also planning to see how we can make

744
00:30:48,420 --> 00:30:50,910
a big chunk of the Krispy code a value

745
00:30:50,910 --> 00:30:53,220
in the open source or why not having our

746
00:30:53,220 --> 00:30:55,830
if you speak toolkit or like a we have

747
00:30:55,830 --> 00:30:59,190
the SDK right something like an FSB DK

748
00:30:59,190 --> 00:31:01,080
or like a software development kit where

749
00:31:01,080 --> 00:31:03,210
you can create your own binary out of

750
00:31:03,210 --> 00:31:05,220
that kit right so we were working on

751
00:31:05,220 --> 00:31:06,870
that and in that those cases your

752
00:31:06,870 --> 00:31:08,880
feedback will be valuable right and and

753
00:31:08,880 --> 00:31:10,590
let me put the value addition for the

754
00:31:10,590 --> 00:31:11,010
FSB

755
00:31:11,010 --> 00:31:12,419
because form

756
00:31:12,419 --> 00:31:14,369
me from 2015 I was working in coreboot

757
00:31:14,369 --> 00:31:16,440
team and have done several power on with

758
00:31:16,440 --> 00:31:19,139
that if SP right if you can ask me to do

759
00:31:19,139 --> 00:31:21,570
a new associate power on it is very very

760
00:31:21,570 --> 00:31:25,230
easy with fSV because as in session we

761
00:31:25,230 --> 00:31:27,570
try to capture to support your main

762
00:31:27,570 --> 00:31:29,429
board you you only need to bothered

763
00:31:29,429 --> 00:31:31,619
about those you P DS alone and a

764
00:31:31,619 --> 00:31:33,899
firmware guy who has a closer knowledge

765
00:31:33,899 --> 00:31:35,850
about your schematics can map all those

766
00:31:35,850 --> 00:31:37,889
you PD perfect there is no way system

767
00:31:37,889 --> 00:31:40,649
can halt system can boot very fast and

768
00:31:40,649 --> 00:31:42,149
in the power on right when you go to the

769
00:31:42,149 --> 00:31:43,980
IBV or we go to the OEM and all right

770
00:31:43,980 --> 00:31:45,929
for a power on the booting is very

771
00:31:45,929 --> 00:31:48,359
important to us maybe once you go and

772
00:31:48,359 --> 00:31:49,619
all right we figure out more

773
00:31:49,619 --> 00:31:52,080
configurable options and I think from

774
00:31:52,080 --> 00:31:53,940
cabling onwards we try to add more

775
00:31:53,940 --> 00:31:56,639
configurable parameter there so you may

776
00:31:56,639 --> 00:31:58,919
find nowadays you may find there are

777
00:31:58,919 --> 00:32:00,690
more configuration parameter then you

778
00:32:00,690 --> 00:32:03,889
need actually for all the possible

779
00:32:03,889 --> 00:32:06,149
configuration in SOC we may have a you

780
00:32:06,149 --> 00:32:08,129
PDF say to that so might not we need to

781
00:32:08,129 --> 00:32:09,749
bother about all those SOC parameter

782
00:32:09,749 --> 00:32:11,549
because to do a new associate man but

783
00:32:11,549 --> 00:32:13,320
porting Intel might absorb that work

784
00:32:13,320 --> 00:32:14,820
that is the reason I didn't capture the

785
00:32:14,820 --> 00:32:17,190
SOC men but the FZ side of the porting

786
00:32:17,190 --> 00:32:18,989
if I get opportunity to do that I see

787
00:32:18,989 --> 00:32:20,369
men were putting I'll try to capture

788
00:32:20,369 --> 00:32:23,700
that as well in some session how we do

789
00:32:23,700 --> 00:32:25,499
the S was reporting from one generation

790
00:32:25,499 --> 00:32:27,779
to another generation using FSB no hope

791
00:32:27,779 --> 00:32:29,840
that answered your question

792
00:32:29,840 --> 00:32:37,649
ok ok I can still take questions but if

793
00:32:37,649 --> 00:32:39,899
there aren't any we can get a small

794
00:32:39,899 --> 00:32:42,419
break till 3 p.m. where the next talk

795
00:32:42,419 --> 00:32:44,159
starts hey thanks everyone

796
00:32:44,159 --> 00:32:46,350
yeah yeah and give a big round of

797
00:32:46,350 --> 00:32:50,959
applause thank you so much all right

798
00:32:52,180 --> 00:32:59,059
[Music]

