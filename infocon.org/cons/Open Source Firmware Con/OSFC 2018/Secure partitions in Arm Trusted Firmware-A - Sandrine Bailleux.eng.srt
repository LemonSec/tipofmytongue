1
00:00:00,000 --> 00:00:04,430
[Music]

2
00:00:04,430 --> 00:00:08,580
good morning everyone welcome to the

3
00:00:08,580 --> 00:00:11,880
security track down here today we will

4
00:00:11,880 --> 00:00:13,769
hear a lot about different platforms

5
00:00:13,769 --> 00:00:16,770
different architectures are starting

6
00:00:16,770 --> 00:00:20,430
with arm and Sandrine give a big round

7
00:00:20,430 --> 00:00:22,710
of applause for her she will be speaking

8
00:00:22,710 --> 00:00:30,000
about secure partitions thank you

9
00:00:30,000 --> 00:00:32,579
hi everyone thank you for joining me

10
00:00:32,579 --> 00:00:36,090
today so I'm Sandrine Bayou I work at

11
00:00:36,090 --> 00:00:39,660
our most specifically in the trusted

12
00:00:39,660 --> 00:00:42,210
from my 80 and today I would like to

13
00:00:42,210 --> 00:00:46,829
talk about secure partitions but before

14
00:00:46,829 --> 00:00:48,660
I do that I'd like to give you a brief

15
00:00:48,660 --> 00:00:53,670
overview of what the project is so the

16
00:00:53,670 --> 00:00:55,440
the aim of the project is really to

17
00:00:55,440 --> 00:00:58,230
provide a reference human implementation

18
00:00:58,230 --> 00:01:01,230
of a firmware for the um v88 platforms

19
00:01:01,230 --> 00:01:05,489
yeah so as I was saying the traces from

20
00:01:05,489 --> 00:01:07,439
where a project is a about providing

21
00:01:07,439 --> 00:01:10,860
reference code for the firmware on a v8

22
00:01:10,860 --> 00:01:13,260
platforms so on the right you've got a

23
00:01:13,260 --> 00:01:17,460
picture of how typical software stack

24
00:01:17,460 --> 00:01:20,280
might look like on on on an arm v88

25
00:01:20,280 --> 00:01:24,479
platforms so this is showing a device

26
00:01:24,479 --> 00:01:26,400
that will have the trust loom technology

27
00:01:26,400 --> 00:01:28,530
where the world is divided into two

28
00:01:28,530 --> 00:01:31,590
parts you've got the normal world that

29
00:01:31,590 --> 00:01:36,020
on the left which is running or your

30
00:01:36,020 --> 00:01:39,479
normal applications your operating

31
00:01:39,479 --> 00:01:41,310
system like Linux and potentially your

32
00:01:41,310 --> 00:01:44,610
hypervisor and on the other side side

33
00:01:44,610 --> 00:01:47,430
you have the trusted world where you run

34
00:01:47,430 --> 00:01:49,710
all your secure payload so you might

35
00:01:49,710 --> 00:01:51,810
have some trusted applications running

36
00:01:51,810 --> 00:01:54,990
on top of trusted OS and at the very

37
00:01:54,990 --> 00:01:58,049
bottom we have trusted my a which is

38
00:01:58,049 --> 00:02:00,960
running at ef3 that's the most prevalent

39
00:02:00,960 --> 00:02:04,439
the highest level of privileged on on a

40
00:02:04,439 --> 00:02:10,110
on an arm v8 platform and so the DM is

41
00:02:10,110 --> 00:02:12,090
ready to provide a foundation for people

42
00:02:12,090 --> 00:02:13,410
to for people

43
00:02:13,410 --> 00:02:15,840
to build such a trusted execution

44
00:02:15,840 --> 00:02:18,900
environment the project the code is

45
00:02:18,900 --> 00:02:22,350
designed as much as possible to be to be

46
00:02:22,350 --> 00:02:25,770
reused and to be easily ported to new

47
00:02:25,770 --> 00:02:28,500
platforms it's an open-source project

48
00:02:28,500 --> 00:02:30,570
otherwise wouldn't be there

49
00:02:30,570 --> 00:02:33,120
it's available on on github and

50
00:02:33,120 --> 00:02:35,640
distributed under BSD three closed

51
00:02:35,640 --> 00:02:38,640
license and the project was created

52
00:02:38,640 --> 00:02:42,000
about five years ago I believe it's the

53
00:02:42,000 --> 00:02:45,240
anniversary this month and so over the

54
00:02:45,240 --> 00:02:47,310
years it's got some some tracks options

55
00:02:47,310 --> 00:02:49,620
from partners we've got about 30

56
00:02:49,620 --> 00:02:51,750
platform ports available today in the

57
00:02:51,750 --> 00:02:56,010
upstream so I wanted to list some of the

58
00:02:56,010 --> 00:03:00,060
main features of the 34 my eighth so

59
00:03:00,060 --> 00:03:02,730
obviously being the most the first piece

60
00:03:02,730 --> 00:03:04,290
of software that runs on your platform

61
00:03:04,290 --> 00:03:06,660
in the trusted world it has to boot

62
00:03:06,660 --> 00:03:08,430
everything and to initialize your secure

63
00:03:08,430 --> 00:03:11,130
devices it's got a modular boot flow

64
00:03:11,130 --> 00:03:14,460
where the form is divided into several

65
00:03:14,460 --> 00:03:20,250
images the ROM from where I'm from a

66
00:03:20,250 --> 00:03:22,800
persistent ramp firmware that provides

67
00:03:22,800 --> 00:03:25,110
some some runtime services so you don't

68
00:03:25,110 --> 00:03:26,700
have to use all of these images you can

69
00:03:26,700 --> 00:03:28,890
pick some of them only and potentially

70
00:03:28,890 --> 00:03:31,500
replace others by your own

71
00:03:31,500 --> 00:03:32,880
implementation if you have different

72
00:03:32,880 --> 00:03:34,050
needs

73
00:03:34,050 --> 00:03:37,410
it supports trusted boot where every

74
00:03:37,410 --> 00:03:39,690
firmware image authenticates the next

75
00:03:39,690 --> 00:03:41,640
one before executing it so you build a

76
00:03:41,640 --> 00:03:44,220
chain of trust from the very first piece

77
00:03:44,220 --> 00:03:48,720
of firmware also it's since we have this

78
00:03:48,720 --> 00:03:51,530
concept of normal world and secure world

79
00:03:51,530 --> 00:03:53,520
sometimes you've got to do some

80
00:03:53,520 --> 00:03:55,370
transition between the two so that's

81
00:03:55,370 --> 00:03:58,470
that's the trusted family handling this

82
00:03:58,470 --> 00:04:01,290
world switch you can integrate the

83
00:04:01,290 --> 00:04:03,930
trusted families with a trusted West

84
00:04:03,930 --> 00:04:05,760
with support a number of popular ones

85
00:04:05,760 --> 00:04:09,260
this is done by implementing a piece of

86
00:04:09,260 --> 00:04:11,880
code in the in the form where you

87
00:04:11,880 --> 00:04:14,190
basically intercept all the requests

88
00:04:14,190 --> 00:04:16,620
that are targeted to this trust us and

89
00:04:16,620 --> 00:04:19,890
and forward them and to the trusted OS

90
00:04:19,890 --> 00:04:23,250
it supports a recovery mode in case your

91
00:04:23,250 --> 00:04:25,370
device is braked and you need to

92
00:04:25,370 --> 00:04:28,820
updated firmware and also much like UEFI

93
00:04:28,820 --> 00:04:31,040
it provides some runtime services so

94
00:04:31,040 --> 00:04:33,650
it's it stays in in memory at one time

95
00:04:33,650 --> 00:04:36,620
once your OS is booted and the US can

96
00:04:36,620 --> 00:04:39,470
make some calls into the firmware one of

97
00:04:39,470 --> 00:04:41,419
these services is for example power

98
00:04:41,419 --> 00:04:45,979
management so I said that the code is

99
00:04:45,979 --> 00:04:48,860
available on github I wanted to take

100
00:04:48,860 --> 00:04:50,990
this opportunity to introduce Tracy from

101
00:04:50,990 --> 00:04:54,169
on that org which is which in a couple

102
00:04:54,169 --> 00:04:55,910
of months will be the place where the

103
00:04:55,910 --> 00:04:58,580
code will be available just about where

104
00:04:58,580 --> 00:05:00,260
the code is available it's a kind of a

105
00:05:00,260 --> 00:05:03,169
new era for us because the project is is

106
00:05:03,169 --> 00:05:06,350
will become soon a leaner Oh community

107
00:05:06,350 --> 00:05:09,710
project that will host both the trusted

108
00:05:09,710 --> 00:05:12,350
for my a but also its counterpart for

109
00:05:12,350 --> 00:05:15,260
m-class devices the trusted former Emma

110
00:05:15,260 --> 00:05:18,110
the m-class devices our microcontroller

111
00:05:18,110 --> 00:05:22,010
space and this project will be operated

112
00:05:22,010 --> 00:05:23,840
independently from the main in our

113
00:05:23,840 --> 00:05:26,510
organization there will be a board of

114
00:05:26,510 --> 00:05:28,789
members so any one religion join the the

115
00:05:28,789 --> 00:05:32,960
the board and whether they are Allen

116
00:05:32,960 --> 00:05:35,660
arrow member or not and the benefits to

117
00:05:35,660 --> 00:05:38,539
being a member is that you'll be able to

118
00:05:38,539 --> 00:05:40,970
piggyback on the infrastructure provided

119
00:05:40,970 --> 00:05:43,070
by the narrow for example to you to get

120
00:05:43,070 --> 00:05:44,660
your board integrated into their boat

121
00:05:44,660 --> 00:05:47,030
farm so that it's so that the firmware

122
00:05:47,030 --> 00:05:50,090
is continuously tested against

123
00:05:50,090 --> 00:05:54,770
regulation and and potentially also

124
00:05:54,770 --> 00:05:57,110
influence the direction of the projects

125
00:05:57,110 --> 00:05:59,330
or the new features and everything so if

126
00:05:59,330 --> 00:06:01,460
you want to know more about that please

127
00:06:01,460 --> 00:06:03,770
go to transfer mode at all or contacts a

128
00:06:03,770 --> 00:06:04,490
board

129
00:06:04,490 --> 00:06:09,560
trusted from analog so now let's delve

130
00:06:09,560 --> 00:06:12,349
into the the heart of the subject so

131
00:06:12,349 --> 00:06:15,440
what I want to talk about is very much

132
00:06:15,440 --> 00:06:16,940
related to the challenges that people

133
00:06:16,940 --> 00:06:21,349
face today into the trusted world before

134
00:06:21,349 --> 00:06:24,020
I start just before I start just as a

135
00:06:24,020 --> 00:06:27,139
disclaimer this is kind of a hot topic

136
00:06:27,139 --> 00:06:29,300
it's something we are currently working

137
00:06:29,300 --> 00:06:31,280
on that we've been working on for some

138
00:06:31,280 --> 00:06:35,180
time so it's still nothing is that set

139
00:06:35,180 --> 00:06:38,990
in stone yet things might evolve

140
00:06:38,990 --> 00:06:42,229
both on the specification side of it and

141
00:06:42,229 --> 00:06:44,870
also in on the implementation side of it

142
00:06:44,870 --> 00:06:48,410
but hopefully I can give you an overview

143
00:06:48,410 --> 00:06:51,080
of the concepts and why we are doing

144
00:06:51,080 --> 00:06:55,580
that and how we are going to do it so

145
00:06:55,580 --> 00:06:57,889
one of the challenges that people face

146
00:06:57,889 --> 00:07:01,699
today in the trusted world stack is that

147
00:07:01,699 --> 00:07:05,509
the UM v8 architecture I mentioned

148
00:07:05,509 --> 00:07:07,100
trusts own that provides you the

149
00:07:07,100 --> 00:07:08,780
separation between normal world and

150
00:07:08,780 --> 00:07:10,850
trusted world and the concept is really

151
00:07:10,850 --> 00:07:13,009
that the software running in normal

152
00:07:13,009 --> 00:07:17,090
world cannot cannot interfere with the

153
00:07:17,090 --> 00:07:20,389
the software in interested world so it

154
00:07:20,389 --> 00:07:22,430
cannot force Apple it cannot access

155
00:07:22,430 --> 00:07:25,520
secure memory secure devices so there is

156
00:07:25,520 --> 00:07:28,039
a nice separation there but beyond that

157
00:07:28,039 --> 00:07:31,910
we don't really get any isolation in

158
00:07:31,910 --> 00:07:35,660
particular so here on this diagram we

159
00:07:35,660 --> 00:07:37,910
see the Tracie drama a running at the

160
00:07:37,910 --> 00:07:41,750
highest privilege in l3 and the trusted

161
00:07:41,750 --> 00:07:44,530
OS is typically running at Sakura l1 and

162
00:07:44,530 --> 00:07:47,659
there is no proper isolation between

163
00:07:47,659 --> 00:07:51,110
year three and secured one between the

164
00:07:51,110 --> 00:07:54,020
firmware and between the the trusted OS

165
00:07:54,020 --> 00:07:57,139
so that means that year three and Sakura

166
00:07:57,139 --> 00:07:59,479
one both have basically the same level

167
00:07:59,479 --> 00:08:01,760
of access to the memory memory space

168
00:08:01,760 --> 00:08:04,280
they can access any memory they want and

169
00:08:04,280 --> 00:08:06,590
they also get direct access to the

170
00:08:06,590 --> 00:08:10,880
physical interrupts so as a consequence

171
00:08:10,880 --> 00:08:14,150
you have the these orange arrows that I

172
00:08:14,150 --> 00:08:17,090
drawn is the interactions that can

173
00:08:17,090 --> 00:08:20,240
happen so the farmer in year three is

174
00:08:20,240 --> 00:08:23,030
not is named never really isolated from

175
00:08:23,030 --> 00:08:25,970
the trusted OS if you've got several

176
00:08:25,970 --> 00:08:27,800
components inside your firmware they are

177
00:08:27,800 --> 00:08:30,199
not isolated from each other and the

178
00:08:30,199 --> 00:08:32,958
also the normal world cannot be

179
00:08:32,958 --> 00:08:35,510
protected from the trusted OS insecure

180
00:08:35,510 --> 00:08:38,299
one and there have been some attacks in

181
00:08:38,299 --> 00:08:40,099
the past where people would leverage

182
00:08:40,099 --> 00:08:42,860
some bug in some trusted OS

183
00:08:42,860 --> 00:08:44,990
implementation in order to access the

184
00:08:44,990 --> 00:08:46,339
normal world and do some privilege

185
00:08:46,339 --> 00:08:49,490
escalation attacks so that is a real

186
00:08:49,490 --> 00:08:51,660
primer

187
00:08:51,660 --> 00:08:55,860
second channel and that the software

188
00:08:55,860 --> 00:08:59,580
stack is very much fragmented so here

189
00:08:59,580 --> 00:09:02,120
the we have a picture again of the same

190
00:09:02,120 --> 00:09:04,620
software stack I've just put some colors

191
00:09:04,620 --> 00:09:08,610
to identify who provides the code and

192
00:09:08,610 --> 00:09:12,090
the dependencies so let's start first

193
00:09:12,090 --> 00:09:16,230
with the green boxes so these are these

194
00:09:16,230 --> 00:09:19,740
are all the trusted OS specific things

195
00:09:19,740 --> 00:09:24,210
so unfortunately the when you have a

196
00:09:24,210 --> 00:09:29,960
user particular platform that some

197
00:09:29,960 --> 00:09:32,100
dependencies on other software

198
00:09:32,100 --> 00:09:34,890
components although there are some some

199
00:09:34,890 --> 00:09:37,140
some standardization at the application

200
00:09:37,140 --> 00:09:40,710
level to communicate with the operating

201
00:09:40,710 --> 00:09:42,930
system the standardization doesn't go

202
00:09:42,930 --> 00:09:46,350
beyond that so if you have if you've got

203
00:09:46,350 --> 00:09:48,630
a particular trusted OS you've got to

204
00:09:48,630 --> 00:09:51,720
have the corresponding trusted OS driver

205
00:09:51,720 --> 00:09:54,300
in your operating system and potentially

206
00:09:54,300 --> 00:09:56,040
in your hypervisor as well if you have

207
00:09:56,040 --> 00:09:58,170
one in order to be able to communicate

208
00:09:58,170 --> 00:10:02,250
with this trusted OS and the same goes

209
00:10:02,250 --> 00:10:04,950
also in the USB firmware you've got to

210
00:10:04,950 --> 00:10:06,930
have some kind of dispatcher that will

211
00:10:06,930 --> 00:10:07,760
basically

212
00:10:07,760 --> 00:10:11,520
interest-rate all the requests for this

213
00:10:11,520 --> 00:10:14,460
particular seed OS and forward them in a

214
00:10:14,460 --> 00:10:17,430
trusted OS specific manner to secure l1

215
00:10:17,430 --> 00:10:23,870
so so yeah the the other thing is that

216
00:10:23,870 --> 00:10:26,100
the code is coming from different

217
00:10:26,100 --> 00:10:28,680
vendors so obviously there's the trusted

218
00:10:28,680 --> 00:10:32,210
OS vendor like I just explained but

219
00:10:32,210 --> 00:10:34,440
potentially there is also some code

220
00:10:34,440 --> 00:10:38,520
provided by the silicon vendor if if you

221
00:10:38,520 --> 00:10:42,120
need to access to some particular Traci

222
00:10:42,120 --> 00:10:43,170
the hardware resources

223
00:10:43,170 --> 00:10:45,870
you must most probably will need some

224
00:10:45,870 --> 00:10:48,270
driver into the el3 firmware and into

225
00:10:48,270 --> 00:10:51,600
the trusted OS and the fact that there

226
00:10:51,600 --> 00:10:53,700
is no proper isolation between the

227
00:10:53,700 --> 00:10:57,510
trusted OS and the firmware and that and

228
00:10:57,510 --> 00:10:59,430
that it's provided by different vendors

229
00:10:59,430 --> 00:11:02,850
means that these people have to trust

230
00:11:02,850 --> 00:11:03,540
each other

231
00:11:03,540 --> 00:11:05,220
these software images has to

232
00:11:05,220 --> 00:11:10,100
right to some degree and that's an issue

233
00:11:10,100 --> 00:11:13,560
so the solution that I'm proposes is to

234
00:11:13,560 --> 00:11:16,170
introduce virtualization in the trusted

235
00:11:16,170 --> 00:11:18,600
world so maybe you've heard that there's

236
00:11:18,600 --> 00:11:20,459
a new version of the architecture coming

237
00:11:20,459 --> 00:11:24,269
MV 8.4 and that will give us secure

238
00:11:24,269 --> 00:11:27,629
virtualization extensions with a new

239
00:11:27,629 --> 00:11:30,300
exception level which is secure

240
00:11:30,300 --> 00:11:33,569
l2 and that will allow us to run some

241
00:11:33,569 --> 00:11:35,970
firmware code at this exception level

242
00:11:35,970 --> 00:11:39,500
and it will be very similar to the

243
00:11:39,500 --> 00:11:42,209
counterpart I mean the EO 2 in the

244
00:11:42,209 --> 00:11:46,160
normal world where you people use a

245
00:11:46,160 --> 00:11:48,899
hypervisor at the moment so that means

246
00:11:48,899 --> 00:11:52,019
that the hypervisor will I mean sorry

247
00:11:52,019 --> 00:11:55,079
the security l2 firmware will be able to

248
00:11:55,079 --> 00:11:58,069
restrain access to the physical memory

249
00:11:58,069 --> 00:12:02,819
for the trace addresses because Tracy

250
00:12:02,819 --> 00:12:04,769
devices will no longer access directly

251
00:12:04,769 --> 00:12:06,569
to physical memory instead they will

252
00:12:06,569 --> 00:12:08,189
access to intermediate physical

253
00:12:08,189 --> 00:12:11,819
addresses that are then translated by a

254
00:12:11,819 --> 00:12:15,329
second stage of the MMU by the security

255
00:12:15,329 --> 00:12:16,709
or to Farmer so you've got two stages

256
00:12:16,709 --> 00:12:19,620
like that and and so the secure yacht's

257
00:12:19,620 --> 00:12:21,329
who firmware can control like that

258
00:12:21,329 --> 00:12:23,670
exactly what physical memory is accessed

259
00:12:23,670 --> 00:12:27,389
by the trusted OS and the same for the

260
00:12:27,389 --> 00:12:29,610
physical interrupts they will be routed

261
00:12:29,610 --> 00:12:32,939
to secure your - instead of the security

262
00:12:32,939 --> 00:12:35,670
l1 so that means that the situation for

263
00:12:35,670 --> 00:12:37,829
my controls them and if it deems that

264
00:12:37,829 --> 00:12:41,009
it's it's a it's a in interrupt that it

265
00:12:41,009 --> 00:12:44,540
would that it need to forward to the

266
00:12:44,540 --> 00:12:47,459
trusted OS it can reenact it as a

267
00:12:47,459 --> 00:12:51,899
virtual interrupt into the trusted OS so

268
00:12:51,899 --> 00:12:53,879
these are all the hardware feature that

269
00:12:53,879 --> 00:12:56,579
we'll get with MV 8.4 but of course we

270
00:12:56,579 --> 00:12:58,199
also need a software architecture to

271
00:12:58,199 --> 00:13:02,550
leverage all of this and that's where

272
00:13:02,550 --> 00:13:06,269
the secure partitions would would would

273
00:13:06,269 --> 00:13:09,870
play a role so a secure partition in

274
00:13:09,870 --> 00:13:13,949
this context is a software sandbox that

275
00:13:13,949 --> 00:13:16,649
friends interested world so it's a

276
00:13:16,649 --> 00:13:18,509
sandbox that means that its isolated

277
00:13:18,509 --> 00:13:19,230
from

278
00:13:19,230 --> 00:13:20,940
other secure partitions in the system

279
00:13:20,940 --> 00:13:24,180
and from from all other software

280
00:13:24,180 --> 00:13:27,450
entities and it's iterance at the low

281
00:13:27,450 --> 00:13:29,700
privileged exception level under the

282
00:13:29,700 --> 00:13:32,310
control of higher privilege software and

283
00:13:32,310 --> 00:13:35,280
the aim is really to for a secure

284
00:13:35,280 --> 00:13:37,860
partition to provide secure services so

285
00:13:37,860 --> 00:13:40,020
just to illustrate give you a better

286
00:13:40,020 --> 00:13:43,110
idea what a secure service is you may

287
00:13:43,110 --> 00:13:46,290
think about platform specific services

288
00:13:46,290 --> 00:13:50,090
think about Russ or O'Hanlon so that

289
00:13:50,090 --> 00:13:54,030
when you you've got a hardware error

290
00:13:54,030 --> 00:13:58,200
like a memory corruption something it

291
00:13:58,200 --> 00:13:59,310
might be fatal

292
00:13:59,310 --> 00:14:01,230
you might not be able to recover from

293
00:14:01,230 --> 00:14:04,200
this from this error but you might at

294
00:14:04,200 --> 00:14:07,140
least be able to read some platform

295
00:14:07,140 --> 00:14:08,730
specific register that will give you a

296
00:14:08,730 --> 00:14:12,030
bit more information about how this

297
00:14:12,030 --> 00:14:15,150
error occurred in what circumstances and

298
00:14:15,150 --> 00:14:17,340
build a narrow report a report so that's

299
00:14:17,340 --> 00:14:18,630
something you could do you could

300
00:14:18,630 --> 00:14:21,030
implement in a secure service you could

301
00:14:21,030 --> 00:14:24,120
also have device specific services if

302
00:14:24,120 --> 00:14:26,490
you if you've got some cryptographic

303
00:14:26,490 --> 00:14:29,130
Hardware on your platform you might want

304
00:14:29,130 --> 00:14:31,610
to have a dedicated secure service that

305
00:14:31,610 --> 00:14:35,330
controls this cryptographic Hardware and

306
00:14:35,330 --> 00:14:37,620
although the rest of the software type

307
00:14:37,620 --> 00:14:39,690
would have to interface with the secure

308
00:14:39,690 --> 00:14:41,850
service to access the cryptographic

309
00:14:41,850 --> 00:14:44,730
Hardware behind it so there are two

310
00:14:44,730 --> 00:14:48,570
examples of quite Hardware related the

311
00:14:48,570 --> 00:14:51,060
secure services but you can also have of

312
00:14:51,060 --> 00:14:54,290
some higher level services to implement

313
00:14:54,290 --> 00:14:58,260
protocols like secure storage secure

314
00:14:58,260 --> 00:15:00,750
payment or secure firmware on the

315
00:15:00,750 --> 00:15:05,250
updates and all of these secure services

316
00:15:05,250 --> 00:15:07,760
and secure partitions are meant to be

317
00:15:07,760 --> 00:15:10,830
independent of any operating system

318
00:15:10,830 --> 00:15:12,930
because remember one of the challenges

319
00:15:12,930 --> 00:15:14,820
in the Transvaal is really that we have

320
00:15:14,820 --> 00:15:16,740
this dependency on the trusted OS

321
00:15:16,740 --> 00:15:19,950
so by standardizing the communication

322
00:15:19,950 --> 00:15:22,590
interfaces between the city of partition

323
00:15:22,590 --> 00:15:24,570
and the rest of the world we we would

324
00:15:24,570 --> 00:15:30,270
remove this this dependency now so this

325
00:15:30,270 --> 00:15:32,850
is how the world would look like we

326
00:15:32,850 --> 00:15:36,050
sit your partitions so in the greenboxes

327
00:15:36,050 --> 00:15:38,279
you've got two example of secure

328
00:15:38,279 --> 00:15:41,009
partitions so the first one is let's say

329
00:15:41,009 --> 00:15:43,709
it's a simple one that would run both in

330
00:15:43,709 --> 00:15:48,300
security l0 and secure l1 but you can

331
00:15:48,300 --> 00:15:51,290
also have more complex

332
00:15:51,290 --> 00:15:54,540
secure partition that encapsulate a

333
00:15:54,540 --> 00:15:57,329
whole trusted OS and it's trusted

334
00:15:57,329 --> 00:15:59,990
applications so and you may have as many

335
00:15:59,990 --> 00:16:03,209
secure partitions as you want in your

336
00:16:03,209 --> 00:16:05,759
system so obviously you need some kind

337
00:16:05,759 --> 00:16:08,759
of entity that manages all of them so

338
00:16:08,759 --> 00:16:12,029
that's the in the yellow box the secure

339
00:16:12,029 --> 00:16:14,130
partition manager so that's the bit of

340
00:16:14,130 --> 00:16:17,149
code that would run at secure l2 and

341
00:16:17,149 --> 00:16:20,100
conceptually it's very similar to a

342
00:16:20,100 --> 00:16:23,220
hypervisor that would manage its guest

343
00:16:23,220 --> 00:16:27,300
operating systems and the secure

344
00:16:27,300 --> 00:16:29,519
partition manager is provided by the

345
00:16:29,519 --> 00:16:34,470
trusted for my a project and the project

346
00:16:34,470 --> 00:16:36,660
will continue to ship the year 3

347
00:16:36,660 --> 00:16:40,980
firmware as well obviously now this is

348
00:16:40,980 --> 00:16:43,439
so unfortunately I'm here Todd for is

349
00:16:43,439 --> 00:16:46,709
not there yet so for the time being we

350
00:16:46,709 --> 00:16:48,449
don't have any security l2 we don't have

351
00:16:48,449 --> 00:16:51,930
any secure virtualization so that's

352
00:16:51,930 --> 00:16:54,959
that's how the software side currently

353
00:16:54,959 --> 00:16:55,889
looks like

354
00:16:55,889 --> 00:17:00,060
so we since there is no secure to the

355
00:17:00,060 --> 00:17:02,130
city of partition manager currently runs

356
00:17:02,130 --> 00:17:05,579
at l3 and it's part of the really the

357
00:17:05,579 --> 00:17:07,859
same binary as the trace the rest of the

358
00:17:07,859 --> 00:17:11,699
trace is from 1a and the secure

359
00:17:11,699 --> 00:17:14,280
partition run at secure Year Zero

360
00:17:14,280 --> 00:17:16,619
because as I say there is no proper

361
00:17:16,619 --> 00:17:19,079
isolation between year 3 and secure year

362
00:17:19,079 --> 00:17:21,209
1 so we don't want to put secure

363
00:17:21,209 --> 00:17:22,799
partition that secure l1 other way that

364
00:17:22,799 --> 00:17:24,359
kind of defeat the purpose of set your

365
00:17:24,359 --> 00:17:28,169
partitions so and we just have a bit of

366
00:17:28,169 --> 00:17:32,340
glue code a disorder yellow box it's

367
00:17:32,340 --> 00:17:35,309
just because architectural II it's not

368
00:17:35,309 --> 00:17:38,130
possible for secure zero code to call

369
00:17:38,130 --> 00:17:42,419
directly into year 3 code the way you do

370
00:17:42,419 --> 00:17:44,340
that usually is by executing an SMC

371
00:17:44,340 --> 00:17:46,620
instruction secure monitor call

372
00:17:46,620 --> 00:17:49,289
that's that's an undefined instruction

373
00:17:49,289 --> 00:17:51,299
for security zero so we've just got a

374
00:17:51,299 --> 00:17:55,409
bit of glue cut that relay as we seize

375
00:17:55,409 --> 00:17:58,770
that sorry secure your zero code can

376
00:17:58,770 --> 00:18:01,559
make a supervisor call in to secure one

377
00:18:01,559 --> 00:18:03,450
so we just have a bit of glue code that

378
00:18:03,450 --> 00:18:08,179
we relay as visas into SMC's and that

379
00:18:08,179 --> 00:18:10,950
that software architecture enables that

380
00:18:10,950 --> 00:18:14,820
to start implementing SPM with the

381
00:18:14,820 --> 00:18:19,830
current architecture now I just wanted

382
00:18:19,830 --> 00:18:21,960
to give a bit more detail about some of

383
00:18:21,960 --> 00:18:24,480
the implementation details of secure

384
00:18:24,480 --> 00:18:26,669
partition mostly around their runtime

385
00:18:26,669 --> 00:18:31,169
model so obviously a secure partition

386
00:18:31,169 --> 00:18:33,750
provides some secure services so we need

387
00:18:33,750 --> 00:18:36,330
a way for the other pieces of software

388
00:18:36,330 --> 00:18:39,029
to request these services so we need

389
00:18:39,029 --> 00:18:41,970
some kind of communication model so

390
00:18:41,970 --> 00:18:43,679
we've implemented a client-server model

391
00:18:43,679 --> 00:18:46,890
where in this context the server is a

392
00:18:46,890 --> 00:18:50,039
secure service and the client can be

393
00:18:50,039 --> 00:18:52,860
either running in the normal world so it

394
00:18:52,860 --> 00:18:55,440
could be your bootloader or your

395
00:18:55,440 --> 00:18:57,870
operating system but it can also be

396
00:18:57,870 --> 00:18:59,880
another secure service in case you have

397
00:18:59,880 --> 00:19:02,190
some dependencies between secure

398
00:19:02,190 --> 00:19:04,620
partition earlier I was talking about a

399
00:19:04,620 --> 00:19:06,120
secure service that food tried your

400
00:19:06,120 --> 00:19:08,250
cryptographic Hardware in this case that

401
00:19:08,250 --> 00:19:12,029
will probably that may involve a

402
00:19:12,029 --> 00:19:14,730
dependency on another secure partition

403
00:19:14,730 --> 00:19:16,559
that would like to implement a secure

404
00:19:16,559 --> 00:19:21,630
storage pit for example and so in terms

405
00:19:21,630 --> 00:19:24,510
of implementation a secure service

406
00:19:24,510 --> 00:19:28,590
service is really just a passive bit of

407
00:19:28,590 --> 00:19:30,809
code that waits for something to do so

408
00:19:30,809 --> 00:19:32,640
it's just a loop that waits for some

409
00:19:32,640 --> 00:19:35,070
input and when it receives some some

410
00:19:35,070 --> 00:19:36,960
some work to do it just processes it and

411
00:19:36,960 --> 00:19:40,890
and then Tessa forever and for every

412
00:19:40,890 --> 00:19:42,990
communication between a client and a

413
00:19:42,990 --> 00:19:45,240
secure partition everything goes through

414
00:19:45,240 --> 00:19:49,350
the secure partition manager and one

415
00:19:49,350 --> 00:19:54,149
important thing also is that we want we

416
00:19:54,149 --> 00:19:56,669
we want as much as possible that the

417
00:19:56,669 --> 00:19:59,909
normal world software stays in charge of

418
00:19:59,909 --> 00:20:01,469
scheduling what I mean by that is that

419
00:20:01,469 --> 00:20:07,259
we we don't want the teacher service for

420
00:20:07,259 --> 00:20:09,629
execute to execute for a very long

421
00:20:09,629 --> 00:20:11,940
period of time because that would result

422
00:20:11,940 --> 00:20:14,309
in a blackout from the point of view of

423
00:20:14,309 --> 00:20:17,219
the offshore Linux kernel for example so

424
00:20:17,219 --> 00:20:19,019
if you've got your scheduler in Linux

425
00:20:19,019 --> 00:20:20,249
that he trained to take the best

426
00:20:20,249 --> 00:20:23,369
decisions you know on what what

427
00:20:23,369 --> 00:20:28,139
applications to schedule having the

428
00:20:28,139 --> 00:20:30,869
secure box then in all the sikhism sorry

429
00:20:30,869 --> 00:20:33,449
having the trusted world stealing all

430
00:20:33,449 --> 00:20:35,639
the cpu cycles like that would mess up

431
00:20:35,639 --> 00:20:36,229
everything

432
00:20:36,229 --> 00:20:39,059
so it's really for the if the normal

433
00:20:39,059 --> 00:20:42,539
world thinks that some service is taking

434
00:20:42,539 --> 00:20:46,079
too long to to complete it can always

435
00:20:46,079 --> 00:20:48,029
interrupt it that might not be the case

436
00:20:48,029 --> 00:20:51,629
in all it's not the only model that we

437
00:20:51,629 --> 00:20:54,649
will support but that we see that as the

438
00:20:54,649 --> 00:21:00,539
the main one so as I said at the

439
00:21:00,539 --> 00:21:04,079
beginning one of the issue is really one

440
00:21:04,079 --> 00:21:05,789
of the issues in the trusted world is

441
00:21:05,789 --> 00:21:08,149
really that we don't have any standard

442
00:21:08,149 --> 00:21:12,149
so the one of our aims is to standardize

443
00:21:12,149 --> 00:21:15,449
all these communication interfaces so

444
00:21:15,449 --> 00:21:16,759
arm is introducing two new

445
00:21:16,759 --> 00:21:20,999
specifications which one for the clients

446
00:21:20,999 --> 00:21:23,940
to request some services so that's the

447
00:21:23,940 --> 00:21:27,239
secure partition client interface or SPC

448
00:21:27,239 --> 00:21:31,139
I and for an another standard a standard

449
00:21:31,139 --> 00:21:34,859
is for secure partitions to actually

450
00:21:34,859 --> 00:21:37,499
handle the requests they receive from

451
00:21:37,499 --> 00:21:40,649
clients so that would be standard ID by

452
00:21:40,649 --> 00:21:42,899
standardized by the secure partition

453
00:21:42,899 --> 00:21:48,749
runtime or SPRT so this specification

454
00:21:48,749 --> 00:21:50,669
are still under development at the

455
00:21:50,669 --> 00:21:53,489
moment and the aim is for the trusted

456
00:21:53,489 --> 00:21:55,769
former project to provide a reference

457
00:21:55,769 --> 00:21:58,169
movement ation of this of these

458
00:21:58,169 --> 00:22:00,149
standards and this is still under

459
00:22:00,149 --> 00:22:02,299
development as well

460
00:22:02,299 --> 00:22:05,879
so the the s PCI is really just a

461
00:22:05,879 --> 00:22:12,139
collection of a B is for clients to to

462
00:22:12,139 --> 00:22:14,969
to discover the secure services that are

463
00:22:14,969 --> 00:22:18,089
available on your platform each service

464
00:22:18,089 --> 00:22:20,989
basically has a unique ID so the clients

465
00:22:20,989 --> 00:22:24,509
that's how they refer to as secure

466
00:22:24,509 --> 00:22:27,329
service the secure partition manager

467
00:22:27,329 --> 00:22:31,499
basically keeps a kind of registry or a

468
00:22:31,499 --> 00:22:33,779
database of all the city of partition

469
00:22:33,779 --> 00:22:36,959
IDs in the system and in which partition

470
00:22:36,959 --> 00:22:39,859
this is implemented so that it can

471
00:22:39,859 --> 00:22:42,209
forward the request to the right

472
00:22:42,209 --> 00:22:48,569
partition the especia also obviously

473
00:22:48,569 --> 00:22:50,339
allow clients to establish a

474
00:22:50,339 --> 00:22:53,279
communication channel with a given

475
00:22:53,279 --> 00:22:55,589
secure service when it's been identified

476
00:22:55,589 --> 00:22:58,529
and eastern messages with the secure

477
00:22:58,529 --> 00:23:01,469
service and if there is a kind of big

478
00:23:01,469 --> 00:23:03,929
payload to attach to this request there

479
00:23:03,929 --> 00:23:06,419
is a possibility to share some memory

480
00:23:06,419 --> 00:23:09,049
between the client and the secure

481
00:23:09,049 --> 00:23:13,919
partition to put the payload inside and

482
00:23:13,919 --> 00:23:17,999
on the other hand the SPRT is a again a

483
00:23:17,999 --> 00:23:20,249
collection of a B is for the design

484
00:23:20,249 --> 00:23:22,949
provided to secure partitions that's

485
00:23:22,949 --> 00:23:26,129
implemented by the SPM again and it

486
00:23:26,129 --> 00:23:28,649
allows secure partitions to retrieve

487
00:23:28,649 --> 00:23:31,559
client request to send responses back to

488
00:23:31,559 --> 00:23:34,259
them and to receive to receive any

489
00:23:34,259 --> 00:23:36,119
interrupts that would be targeted to

490
00:23:36,119 --> 00:23:38,849
this secure partition either some-some

491
00:23:38,849 --> 00:23:41,729
interrupts potentially you might have a

492
00:23:41,729 --> 00:23:43,409
secure service that handles the device

493
00:23:43,409 --> 00:23:45,419
so it would own all the interrupts of

494
00:23:45,419 --> 00:23:47,789
this device or it can also be some inter

495
00:23:47,789 --> 00:23:49,379
process communication between those

496
00:23:49,379 --> 00:23:51,029
secure partitions if they want to send

497
00:23:51,029 --> 00:23:55,349
interest to each other and the the SPRT

498
00:23:55,349 --> 00:23:57,779
this runtime model is really there to

499
00:23:57,779 --> 00:24:00,929
provide a frame for people to to

500
00:24:00,929 --> 00:24:03,839
implement secure services on top so it

501
00:24:03,839 --> 00:24:05,940
is the development of secure services

502
00:24:05,940 --> 00:24:08,659
and it also improves the robustness and

503
00:24:08,659 --> 00:24:11,729
security of secure services since people

504
00:24:11,729 --> 00:24:13,979
don't have to reinvent the wheel from

505
00:24:13,979 --> 00:24:16,409
the beginning every time so remove some

506
00:24:16,409 --> 00:24:18,389
of the usual mistake that they could

507
00:24:18,389 --> 00:24:22,340
made make in the implementation

508
00:24:22,340 --> 00:24:26,830
so hopefully this gives you an idea of

509
00:24:26,830 --> 00:24:31,280
why we are working on that and what we

510
00:24:31,280 --> 00:24:33,080
are trying to achieve and how we are

511
00:24:33,080 --> 00:24:35,090
going going to implement that I put a

512
00:24:35,090 --> 00:24:38,120
few links to have a look at your leisure

513
00:24:38,120 --> 00:24:41,560
me to the Tracy from our a code and also

514
00:24:41,560 --> 00:24:44,750
the last link is a white paper from from

515
00:24:44,750 --> 00:24:49,160
arm that basically talks about what I

516
00:24:49,160 --> 00:24:52,430
just presented in more details so if you

517
00:24:52,430 --> 00:24:54,110
want to know more I invite you to have a

518
00:24:54,110 --> 00:24:56,260
look at this one

519
00:24:56,260 --> 00:25:17,630
do you have any questions hi so my main

520
00:25:17,630 --> 00:25:19,760
question about this architecture is

521
00:25:19,760 --> 00:25:22,960
tension with the securio to is

522
00:25:22,960 --> 00:25:25,730
essentially why don't you just have the

523
00:25:25,730 --> 00:25:27,440
Secours because there's already a

524
00:25:27,440 --> 00:25:29,360
separation between secure ear 0 and the

525
00:25:29,360 --> 00:25:30,530
other one right so why can't you just

526
00:25:30,530 --> 00:25:33,440
only have the secure services in year 0

527
00:25:33,440 --> 00:25:35,930
and have a common implementation of

528
00:25:35,930 --> 00:25:37,970
secure year one that could be part of

529
00:25:37,970 --> 00:25:39,530
trusted firm you could be another arm

530
00:25:39,530 --> 00:25:41,780
project and then have your common ABI

531
00:25:41,780 --> 00:25:44,390
between 0 and the other one and then you

532
00:25:44,390 --> 00:25:45,620
would like right now you essentially

533
00:25:45,620 --> 00:25:47,780
have two layers of isolation where I

534
00:25:47,780 --> 00:25:50,140
think you only want one right right yeah

535
00:25:50,140 --> 00:25:53,960
so the main issue is that yeah I should

536
00:25:53,960 --> 00:25:57,200
have said it so people were at the

537
00:25:57,200 --> 00:26:01,760
moment so I should correct one of the

538
00:26:01,760 --> 00:26:05,630
diagrams just to illustrate that so at

539
00:26:05,630 --> 00:26:06,700
the moment

540
00:26:06,700 --> 00:26:13,780
oops this one yeah most of the time

541
00:26:13,780 --> 00:26:17,570
people only put one trusted OS into

542
00:26:17,570 --> 00:26:20,090
their software stack because it is

543
00:26:20,090 --> 00:26:22,250
possible to have multiple trusted oasis

544
00:26:22,250 --> 00:26:24,380
but it's kind of difficult they they

545
00:26:24,380 --> 00:26:26,960
have to cooperate with each other and so

546
00:26:26,960 --> 00:26:29,960
if you if if we were to implement it the

547
00:26:29,960 --> 00:26:32,240
way you said basically so we would need

548
00:26:32,240 --> 00:26:35,120
to have some one of the if you have two

549
00:26:35,120 --> 00:26:36,140
trusted oasis you will

550
00:26:36,140 --> 00:26:37,940
need to have one of them that implement

551
00:26:37,940 --> 00:26:41,360
the the standard for for the for the

552
00:26:41,360 --> 00:26:44,390
rest and so it wouldn't be very scalable

553
00:26:44,390 --> 00:26:47,630
because it will again introduce the this

554
00:26:47,630 --> 00:26:53,150
this prime of of standardization so yeah

555
00:26:53,150 --> 00:26:55,700
this is DM is ready to have a more

556
00:26:55,700 --> 00:26:57,830
scalable software stack in the trusted

557
00:26:57,830 --> 00:26:59,840
world where you can have multiple

558
00:26:59,840 --> 00:27:05,240
trusted oasis sitting alongside secure

559
00:27:05,240 --> 00:27:07,100
partition that that do not have anything

560
00:27:07,100 --> 00:27:09,380
to do with trusted oasis so that's why

561
00:27:09,380 --> 00:27:11,720
you have to kind of have something at a

562
00:27:11,720 --> 00:27:16,880
higher exception privilege that manages

563
00:27:16,880 --> 00:27:21,890
everyone basically just but sorry so

564
00:27:21,890 --> 00:27:24,590
right now is there anything you actually

565
00:27:24,590 --> 00:27:26,540
gain from having more than one trusted

566
00:27:26,540 --> 00:27:27,980
OS because couldn't you just have one

567
00:27:27,980 --> 00:27:30,110
trusted assets maybe develop from arm

568
00:27:30,110 --> 00:27:33,680
that all vendors could use so um don't

569
00:27:33,680 --> 00:27:38,410
develop any interest us and we will not

570
00:27:38,410 --> 00:27:43,370
that yeah I mean people want to be able

571
00:27:43,370 --> 00:27:46,610
to have several trusted devices on the

572
00:27:46,610 --> 00:27:51,260
same platforms I mean I mean they've

573
00:27:51,260 --> 00:27:54,710
said it to us it's mainly for audience

574
00:27:54,710 --> 00:27:57,410
when they integrate all the software on

575
00:27:57,410 --> 00:27:59,960
they start on their stack they may be

576
00:27:59,960 --> 00:28:04,960
interested in having several devices

577
00:28:12,720 --> 00:28:15,360
I thanks for the talk I have two

578
00:28:15,360 --> 00:28:18,810
questions like first is can you tell

579
00:28:18,810 --> 00:28:20,970
like what are the top business cases for

580
00:28:20,970 --> 00:28:25,890
having multiple trusted devices or top

581
00:28:25,890 --> 00:28:29,460
cases for trust leads and last year

582
00:28:29,460 --> 00:28:31,830
Google zero project announced problems

583
00:28:31,830 --> 00:28:34,650
with revocation of trust LEDs can you

584
00:28:34,650 --> 00:28:37,050
let us know what would be the procedure

585
00:28:37,050 --> 00:28:41,100
for revocation in new cases and how it

586
00:28:41,100 --> 00:28:41,490
works

587
00:28:41,490 --> 00:28:45,360
from our perspective right so for the

588
00:28:45,360 --> 00:28:48,030
first part of the question about having

589
00:28:48,030 --> 00:28:51,000
multiple trusted devices to be honest I

590
00:28:51,000 --> 00:28:55,200
don't I don't very I don't know because

591
00:28:55,200 --> 00:28:57,750
I would imagine that different trusted

592
00:28:57,750 --> 00:29:00,300
oases provide different services but

593
00:29:00,300 --> 00:29:02,820
I've never really looked at what kind of

594
00:29:02,820 --> 00:29:05,310
services I know that trusty devices are

595
00:29:05,310 --> 00:29:08,460
mainly used on mobile devices it's not

596
00:29:08,460 --> 00:29:11,340
so much to target it towards the server

597
00:29:11,340 --> 00:29:17,970
market for example so yeah so trust us

598
00:29:17,970 --> 00:29:19,950
that so do you mean trust application

599
00:29:19,950 --> 00:29:22,640
rain is running on right so about

600
00:29:22,640 --> 00:29:26,400
relocating that is like you mean if one

601
00:29:26,400 --> 00:29:30,840
of them is a has a vulnerability inside

602
00:29:30,840 --> 00:29:35,640
it right but in this case as long as you

603
00:29:35,640 --> 00:29:37,560
don't have any variety in your trusted

604
00:29:37,560 --> 00:29:40,920
OS if you've got one in the trusted

605
00:29:40,920 --> 00:29:42,510
application that shouldn't do much

606
00:29:42,510 --> 00:29:45,360
damage right I mean if they they because

607
00:29:45,360 --> 00:29:48,050
the trusted OS controls all the

608
00:29:48,050 --> 00:29:51,150
resources that every application can can

609
00:29:51,150 --> 00:29:59,480
access so I I'm not too sure about the

610
00:30:04,610 --> 00:30:07,710
yeah okay so if the trusted OS is where

611
00:30:07,710 --> 00:30:11,150
I will yeah that that's another issue so

612
00:30:11,150 --> 00:30:13,740
so we stick Uriel to again we would have

613
00:30:13,740 --> 00:30:16,290
a higher privilege exception level that

614
00:30:16,290 --> 00:30:18,480
can control that but again you can have

615
00:30:18,480 --> 00:30:21,840
a bug insecure a little bit but then you

616
00:30:21,840 --> 00:30:24,240
can make a case for of that for for for

617
00:30:24,240 --> 00:30:27,920
every piece of software

618
00:30:45,590 --> 00:30:51,120
so which have to cooperate with Vargas

619
00:30:51,120 --> 00:30:54,660
justices so so still the question is

620
00:30:54,660 --> 00:30:56,790
open like how you revoke applications

621
00:30:56,790 --> 00:31:01,140
which are inside phone and and in the

622
00:31:01,140 --> 00:31:03,120
field like we have like millions forms

623
00:31:03,120 --> 00:31:05,880
there and what's them so I think it's

624
00:31:05,880 --> 00:31:08,610
more of them this is an issue I would

625
00:31:08,610 --> 00:31:11,520
say that the trusted OS itself would

626
00:31:11,520 --> 00:31:15,240
have to handle in any case it's really

627
00:31:15,240 --> 00:31:18,570
implementation specific I guess I'm just

628
00:31:18,570 --> 00:31:22,440
giving you my I mean I don't know for

629
00:31:22,440 --> 00:31:23,460
sure okay

630
00:31:23,460 --> 00:31:27,750
I'm just extrapolating I think that if

631
00:31:27,750 --> 00:31:29,130
you if you want to be able to revoke

632
00:31:29,130 --> 00:31:30,570
your applications you need to implement

633
00:31:30,570 --> 00:31:33,450
some kind of of signature in your

634
00:31:33,450 --> 00:31:37,340
application and perhaps having a

635
00:31:37,340 --> 00:31:39,930
resister registering your trusted ways

636
00:31:39,930 --> 00:31:42,270
of what application you trust and which

637
00:31:42,270 --> 00:31:43,800
one you don't and and you can always

638
00:31:43,800 --> 00:31:47,040
revoke applications there but I don't

639
00:31:47,040 --> 00:31:49,050
think it's a it's something that

640
00:31:49,050 --> 00:31:51,900
concerns secure your two or three former

641
00:31:51,900 --> 00:31:56,180
I think it would be handle I'd hire

642
00:31:56,180 --> 00:32:04,440
stacks inventors of of trust addresses

643
00:32:04,440 --> 00:32:07,710
just don't have the path for that hmm so

644
00:32:07,710 --> 00:32:09,240
that's the case and that's what Google

645
00:32:09,240 --> 00:32:16,580
zero project pointed like July 2017 okay

646
00:32:21,440 --> 00:32:25,920
yes you can replace it yeah absolutely i

647
00:32:25,920 --> 00:32:29,480
mean it's it's loaded anyway by by the

648
00:32:29,480 --> 00:32:32,520
by the firmware so yeah you can always

649
00:32:32,520 --> 00:32:37,260
have a to have the firmware enter some

650
00:32:37,260 --> 00:32:39,420
recovery mode where it would

651
00:32:39,420 --> 00:32:43,710
update the the the trusted OS on secure

652
00:32:43,710 --> 00:32:46,640
storage yeah

653
00:32:53,280 --> 00:32:54,870
so you were talking about scheduling

654
00:32:54,870 --> 00:33:00,150
blackouts before can explain maybe if it

655
00:33:00,150 --> 00:33:02,040
does take too much time how that works

656
00:33:02,040 --> 00:33:05,910
actually for instance if you do want to

657
00:33:05,910 --> 00:33:08,580
appear a secure partition from a guest

658
00:33:08,580 --> 00:33:11,430
OS on a non secure site mm-hmm and it's

659
00:33:11,430 --> 00:33:14,670
time slice runs out how does that get

660
00:33:14,670 --> 00:33:16,770
scheduled out and back on again because

661
00:33:16,770 --> 00:33:19,170
it's kind of inverted from the from the

662
00:33:19,170 --> 00:33:21,990
normal scheduling case so the idea is

663
00:33:21,990 --> 00:33:24,920
for is that secure partitions are

664
00:33:24,920 --> 00:33:28,560
interruptible by normal world in terms

665
00:33:28,560 --> 00:33:32,100
so you can have you can have your

666
00:33:32,100 --> 00:33:35,130
operating system programming some kind

667
00:33:35,130 --> 00:33:39,600
of timer interrupts and which make sure

668
00:33:39,600 --> 00:33:43,230
that it fires every every fixed amount

669
00:33:43,230 --> 00:33:46,200
of time so if if if secure service is

670
00:33:46,200 --> 00:33:48,750
taking too long to run it would just get

671
00:33:48,750 --> 00:33:52,560
interrupted by the timer and that would

672
00:33:52,560 --> 00:33:55,290
that would I mean the interrupt would be

673
00:33:55,290 --> 00:33:59,880
targeted to your operating system which

674
00:33:59,880 --> 00:34:04,160
would then choose or not to choose

675
00:34:04,160 --> 00:34:08,699
resuming the request of the secure

676
00:34:08,699 --> 00:34:11,550
service or if it doesn't want to then it

677
00:34:11,550 --> 00:34:17,130
doesn't have to Joe's so the hypervisor

678
00:34:17,130 --> 00:34:19,320
reschedules it doesn't mean that the

679
00:34:19,320 --> 00:34:21,389
call from the secure petition has to

680
00:34:21,389 --> 00:34:23,969
return first then it gets rescheduled

681
00:34:23,969 --> 00:34:26,969
and then the call is like restarted or

682
00:34:26,969 --> 00:34:32,790
well so the so the your secure service

683
00:34:32,790 --> 00:34:36,239
would be running okay and at this time

684
00:34:36,239 --> 00:34:38,870
you've got a timer interrupt that fires

685
00:34:38,870 --> 00:34:41,580
automatically because we've configured

686
00:34:41,580 --> 00:34:44,130
the right routing model inside the the

687
00:34:44,130 --> 00:34:47,159
general general interrupt controller the

688
00:34:47,159 --> 00:34:48,219
geek

689
00:34:48,219 --> 00:34:51,280
this interrup would automatically stop

690
00:34:51,280 --> 00:34:55,090
execution of the secure service and and

691
00:34:55,090 --> 00:34:57,730
then because the interrupt is targeted

692
00:34:57,730 --> 00:35:01,359
towards the operating system that's

693
00:35:01,359 --> 00:35:03,099
where it would be delivered and you

694
00:35:03,099 --> 00:35:04,510
would basically enter your vector

695
00:35:04,510 --> 00:35:07,920
interrupts in inside your sick yoram

696
00:35:07,920 --> 00:35:10,990
operating system so then the operating

697
00:35:10,990 --> 00:35:14,320
system can figure out that the it had

698
00:35:14,320 --> 00:35:19,480
made a request to to secure service and

699
00:35:19,480 --> 00:35:22,359
it can figure out that has been

700
00:35:22,359 --> 00:35:26,580
interrupted and so it is free then to

701
00:35:26,580 --> 00:35:30,760
resumed this request later on or do some

702
00:35:30,760 --> 00:35:35,170
urgent work first and and and do it much

703
00:35:35,170 --> 00:35:38,560
later just answer your question so you

704
00:35:38,560 --> 00:35:40,330
don't actually contacts which the state

705
00:35:40,330 --> 00:35:42,220
inside the secure partition so you don't

706
00:35:42,220 --> 00:35:43,750
have reentrant calls into the secure

707
00:35:43,750 --> 00:35:46,180
partition you know we don't have any

708
00:35:46,180 --> 00:35:48,070
real interest see but we would still I

709
00:35:48,070 --> 00:35:50,170
mean yeah there's a step that I forgot

710
00:35:50,170 --> 00:35:52,510
yeah y'all ready you've got to at least

711
00:35:52,510 --> 00:35:55,900
save the the state of the secure

712
00:35:55,900 --> 00:35:58,470
partition you know enable to resume it

713
00:35:58,470 --> 00:36:00,880
that would be done by the er3 farmer

714
00:36:00,880 --> 00:36:04,869
just before forwarding the interrupts

715
00:36:04,869 --> 00:36:16,240
the no more yeah if you run a septic

716
00:36:16,240 --> 00:36:18,099
correctly that requires new hardware

717
00:36:18,099 --> 00:36:21,369
features mm-hmm what in what will they

718
00:36:21,369 --> 00:36:24,400
be available so it will be in the in the

719
00:36:24,400 --> 00:36:27,280
core arm v8 architecture so all course

720
00:36:27,280 --> 00:36:30,910
but I the only thing I'm not sure about

721
00:36:30,910 --> 00:36:33,849
is whether these Hardware extensions

722
00:36:33,849 --> 00:36:37,210
will be optional or not they probably

723
00:36:37,210 --> 00:36:40,619
will you know in the Army I texted sure

724
00:36:40,619 --> 00:36:44,109
so we we often have new revisions and

725
00:36:44,109 --> 00:36:45,490
every time they introduce new features

726
00:36:45,490 --> 00:36:48,099
and some of them are mandatory to

727
00:36:48,099 --> 00:36:50,589
implement so if you want to have a v8

728
00:36:50,589 --> 00:36:52,930
point for architecture then that means

729
00:36:52,930 --> 00:36:56,349
you implement these features and that

730
00:36:56,349 --> 00:36:57,790
gives some some guarantee to the

731
00:36:57,790 --> 00:36:59,870
software that they are here

732
00:36:59,870 --> 00:37:03,260
and some of them are optional so I'm

733
00:37:03,260 --> 00:37:05,360
provide some guidance about how to

734
00:37:05,360 --> 00:37:08,090
implement them but people don't have to

735
00:37:08,090 --> 00:37:09,860
actually implement them to claim that

736
00:37:09,860 --> 00:37:13,550
they are v 8.4 so I'm not entirely sure

737
00:37:13,550 --> 00:37:16,490
whether the situation are mandatory or

738
00:37:16,490 --> 00:37:19,670
optional but in any case that would

739
00:37:19,670 --> 00:37:24,650
concern any mv8 core so all the cortex a

740
00:37:24,650 --> 00:37:30,140
that that our army 8.4 compliant cortex

741
00:37:30,140 --> 00:37:35,060
a 72 is not 8.4 whatever

742
00:37:35,060 --> 00:37:38,240
yeah so when we have an eight point four

743
00:37:38,240 --> 00:37:44,320
ah okay core from arm okay so the

744
00:37:44,320 --> 00:37:46,700
extensions I mean the MV 8.4

745
00:37:46,700 --> 00:37:48,950
specification so I mean the the document

746
00:37:48,950 --> 00:37:51,770
published by arm that should be

747
00:37:51,770 --> 00:37:54,140
available sometime around October but

748
00:37:54,140 --> 00:37:58,580
then um doesn't deployment any emulated

749
00:37:58,580 --> 00:38:02,690
core um v 8.4 course itself

750
00:38:02,690 --> 00:38:05,570
some people might in the future but I

751
00:38:05,570 --> 00:38:17,630
don't know exactly yeah a dot for design

752
00:38:17,630 --> 00:38:20,660
about secure partition manager which is

753
00:38:20,660 --> 00:38:23,840
running secure year one where does just

754
00:38:23,840 --> 00:38:26,570
trust you device is turning to so I can

755
00:38:26,570 --> 00:38:29,690
just go back to this for you yeah yeah

756
00:38:29,690 --> 00:38:32,300
young this one so whether whether is

757
00:38:32,300 --> 00:38:34,880
your trusty device is sitting on right

758
00:38:34,880 --> 00:38:39,320
yeah so in in this model you can't

759
00:38:39,320 --> 00:38:42,740
really have any Tracy device that's the

760
00:38:42,740 --> 00:38:45,050
thing I'm recommendation is to not have

761
00:38:45,050 --> 00:38:46,490
been interested OS on the current

762
00:38:46,490 --> 00:38:50,000
context a well if you want you cannot

763
00:38:50,000 --> 00:38:52,390
have in in the current active

764
00:38:52,390 --> 00:38:55,360
architectures or you cannot have

765
00:38:55,360 --> 00:38:57,740
partitions running at secure years your

766
00:38:57,740 --> 00:39:01,790
alongside with some trusted OS because

767
00:39:01,790 --> 00:39:04,850
you you don't have the T isolation like

768
00:39:04,850 --> 00:39:07,190
I said between secure one and yes we so

769
00:39:07,190 --> 00:39:09,560
that's I mean it's possible but then you

770
00:39:09,560 --> 00:39:11,720
you don't have a it's kind of a fake

771
00:39:11,720 --> 00:39:14,119
right because

772
00:39:14,119 --> 00:39:16,670
because you cannot defeat the purpose so

773
00:39:16,670 --> 00:39:19,160
yeah that's why there is no truth us

774
00:39:19,160 --> 00:39:23,719
there yeah but yeah with the 8.4 just to

775
00:39:23,719 --> 00:39:27,499
you all of that becomes a person quick

776
00:39:27,499 --> 00:39:30,170
question about I'm Tracy I'm a dog

777
00:39:30,170 --> 00:39:32,479
you mentioned the card we move to to the

778
00:39:32,479 --> 00:39:33,979
website mm-hmm

779
00:39:33,979 --> 00:39:36,499
that it means it will I don't get have

780
00:39:36,499 --> 00:39:39,829
anymore so I believe the plan is really

781
00:39:39,829 --> 00:39:41,960
yeah that it won't be available on

782
00:39:41,960 --> 00:39:42,829
github anymore

783
00:39:42,829 --> 00:39:46,039
moment we've got the main code on github

784
00:39:46,039 --> 00:39:48,259
and we've already got a mirror of that

785
00:39:48,259 --> 00:39:50,089
entre stood firm on that so you can

786
00:39:50,089 --> 00:39:51,799
already go there and there's the cod

787
00:39:51,799 --> 00:39:54,259
both for the receiver my a and the

788
00:39:54,259 --> 00:39:58,579
trustee for my m but in the in the

789
00:39:58,579 --> 00:40:02,210
coming month every single the plan is

790
00:40:02,210 --> 00:40:04,729
ready to move everything there the

791
00:40:04,729 --> 00:40:07,940
review the code everything that the

792
00:40:07,940 --> 00:40:11,809
having our build infrastructure open as

793
00:40:11,809 --> 00:40:15,979
well yeah but to be as open source as

794
00:40:15,979 --> 00:40:19,180
now yeah

795
00:40:24,790 --> 00:40:29,540
um just as with just this oh sorry as we

796
00:40:29,540 --> 00:40:30,320
just discussed

797
00:40:30,320 --> 00:40:34,940
um b84 is quite some time to go we are

798
00:40:34,940 --> 00:40:37,190
currently at armed v8 - that are they

799
00:40:37,190 --> 00:40:39,200
are implementations out you started out

800
00:40:39,200 --> 00:40:41,630
at the first slide of your old slide

801
00:40:41,630 --> 00:40:45,320
deck talk and also including our v7 mom

802
00:40:45,320 --> 00:40:49,010
is trusted firmware a only about um v8

803
00:40:49,010 --> 00:40:51,680
or is there a version or kind of somehow

804
00:40:51,680 --> 00:40:55,100
copilot for arm v7 II yeah it also it's

805
00:40:55,100 --> 00:40:58,340
also it also supports mv7 platform yeah

806
00:40:58,340 --> 00:41:03,280
it does yeah I mean he talked about a v8

807
00:41:03,280 --> 00:41:06,260
MV 8 platforms because that that is our

808
00:41:06,260 --> 00:41:08,450
main focus but there was some traction

809
00:41:08,450 --> 00:41:11,450
from from people to have it for MV 7 as

810
00:41:11,450 --> 00:41:22,270
well so yeah yeah it is yeah yeah

811
00:41:25,250 --> 00:41:29,230
all right so uh thanks Undine

812
00:41:30,230 --> 00:41:33,420
[Applause]

813
00:41:33,420 --> 00:41:40,309
[Music]

