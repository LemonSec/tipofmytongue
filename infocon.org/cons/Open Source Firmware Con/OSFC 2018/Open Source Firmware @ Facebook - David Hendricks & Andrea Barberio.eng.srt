1
00:00:00,000 --> 00:00:04,220
[Music]

2
00:00:04,220 --> 00:00:06,690
hi everyone I'm David Hendricks and this

3
00:00:06,690 --> 00:00:08,700
is my colleague Andre Barbaria or both

4
00:00:08,700 --> 00:00:11,219
on engineers over at Facebook I am

5
00:00:11,219 --> 00:00:13,170
primarily working on firmware these days

6
00:00:13,170 --> 00:00:16,160
and under is a production engineer and

7
00:00:16,160 --> 00:00:20,310
let's get started so we're gonna cover a

8
00:00:20,310 --> 00:00:22,439
few topics today I'll be covering some

9
00:00:22,439 --> 00:00:23,910
kind of high-level items and Andre is

10
00:00:23,910 --> 00:00:26,220
going to dive into the details so we're

11
00:00:26,220 --> 00:00:27,119
going to start with some open source

12
00:00:27,119 --> 00:00:28,890
initiatives the problems we're facing

13
00:00:28,890 --> 00:00:31,230
with firmware and how we're using Linux

14
00:00:31,230 --> 00:00:33,600
boot at Facebook Andre is going to go

15
00:00:33,600 --> 00:00:34,980
into a lot more details about system

16
00:00:34,980 --> 00:00:36,570
boot which is something that we're

17
00:00:36,570 --> 00:00:39,690
adding onto Linux boot and also we'll

18
00:00:39,690 --> 00:00:40,920
talk about some of our collaborations

19
00:00:40,920 --> 00:00:45,260
and partnerships so first things first

20
00:00:45,260 --> 00:00:48,030
open source is pretty huge at Facebook

21
00:00:48,030 --> 00:00:50,010
we have a strong community of open

22
00:00:50,010 --> 00:00:51,420
source software developers within the

23
00:00:51,420 --> 00:00:53,100
company and we're actively promoting

24
00:00:53,100 --> 00:00:54,600
open source software outside the company

25
00:00:54,600 --> 00:00:57,239
we use and contribute back to software

26
00:00:57,239 --> 00:00:58,710
projects such as the Linux kernel and

27
00:00:58,710 --> 00:01:00,120
sent to us so we already have a pretty

28
00:01:00,120 --> 00:01:03,690
strong systems software development team

29
00:01:03,690 --> 00:01:05,790
going on there we create projects and

30
00:01:05,790 --> 00:01:07,260
release them to the open source

31
00:01:07,260 --> 00:01:10,170
community actually our moderator was

32
00:01:10,170 --> 00:01:13,049
commenting on how he uses react j/s at

33
00:01:13,049 --> 00:01:14,280
his company so that's a very popular

34
00:01:14,280 --> 00:01:16,590
example but of course Facebook isn't

35
00:01:16,590 --> 00:01:21,540
just high-level web applications we're

36
00:01:21,540 --> 00:01:22,770
also one of the top contributors on

37
00:01:22,770 --> 00:01:25,500
github and we founded what we've

38
00:01:25,500 --> 00:01:27,090
actually found it a few initiatives

39
00:01:27,090 --> 00:01:29,400
within the industry the Open Compute

40
00:01:29,400 --> 00:01:31,619
Project is a very well known example but

41
00:01:31,619 --> 00:01:33,509
also the telecom infrastructure projects

42
00:01:33,509 --> 00:01:35,520
which were cooperating with a lot of

43
00:01:35,520 --> 00:01:37,350
telecom companies to improve

44
00:01:37,350 --> 00:01:38,670
connectivity throughout the world

45
00:01:38,670 --> 00:01:41,820
OCP today is over 100 members strong and

46
00:01:41,820 --> 00:01:44,939
tip is over 500 members strong so we've

47
00:01:44,939 --> 00:01:46,619
built these really robust communities

48
00:01:46,619 --> 00:01:49,649
towards opening up data center hardware

49
00:01:49,649 --> 00:01:54,060
and access throughout the world but

50
00:01:54,060 --> 00:01:55,470
there is an important part that's been

51
00:01:55,470 --> 00:01:57,479
missing from this story I mean we have

52
00:01:57,479 --> 00:01:59,490
these great open source hardware

53
00:01:59,490 --> 00:02:01,950
initiatives and we have these open

54
00:02:01,950 --> 00:02:03,570
source software initiatives but there's

55
00:02:03,570 --> 00:02:06,119
something in between and if you were to

56
00:02:06,119 --> 00:02:07,740
jump and say oh firm worse than this

57
00:02:07,740 --> 00:02:09,090
thing piece you'd only be half right

58
00:02:09,090 --> 00:02:13,740
because in 2015 we released open BMC

59
00:02:13,740 --> 00:02:15,150
you may have heard sight talked about

60
00:02:15,150 --> 00:02:19,050
earlier well yesterday and we've learned

61
00:02:19,050 --> 00:02:20,310
a few things along the way about

62
00:02:20,310 --> 00:02:22,860
deploying open source firmware in our

63
00:02:22,860 --> 00:02:24,840
fleet and Chris and Samantha will talk

64
00:02:24,840 --> 00:02:28,050
more about that later today so after

65
00:02:28,050 --> 00:02:30,780
open BMC even and you know with the

66
00:02:30,780 --> 00:02:33,660
lessons that we've learned we believe

67
00:02:33,660 --> 00:02:36,510
it's been a big win for us and opening

68
00:02:36,510 --> 00:02:37,710
up the system firmware is the next

69
00:02:37,710 --> 00:02:39,230
logical step

70
00:02:39,230 --> 00:02:43,170
so why open source firmware well first

71
00:02:43,170 --> 00:02:45,710
let's scope out the problem a little bit

72
00:02:45,710 --> 00:02:48,390
so a lot of people when they think of a

73
00:02:48,390 --> 00:02:50,430
company like Facebook or even Google or

74
00:02:50,430 --> 00:02:53,010
these other companies when they think of

75
00:02:53,010 --> 00:02:54,390
the infrastructure they might think of a

76
00:02:54,390 --> 00:02:55,950
you know a closet with some servers in

77
00:02:55,950 --> 00:02:58,920
it and of course if you saw the social

78
00:02:58,920 --> 00:03:00,450
network movie a few years back you might

79
00:03:00,450 --> 00:03:01,920
have the impression that Facebook is run

80
00:03:01,920 --> 00:03:03,450
off the Mark Zuckerberg computer and as

81
00:03:03,450 --> 00:03:05,430
a dorm room or something but this is how

82
00:03:05,430 --> 00:03:07,980
Facebook's infrastructure looks actually

83
00:03:07,980 --> 00:03:10,440
this is an outdated picture but this

84
00:03:10,440 --> 00:03:11,520
will give you a better idea there's

85
00:03:11,520 --> 00:03:13,740
actually one more data center in Newton

86
00:03:13,740 --> 00:03:15,630
Georgia that's not pictured there and we

87
00:03:15,630 --> 00:03:17,010
just announced that we're building an

88
00:03:17,010 --> 00:03:19,680
11-story tall datacenter in Singapore so

89
00:03:19,680 --> 00:03:22,140
our infrastructure has grown quite a bit

90
00:03:22,140 --> 00:03:25,110
from Mark Zuckerberg computer in his

91
00:03:25,110 --> 00:03:27,900
dorm room to a geographically diverse

92
00:03:27,900 --> 00:03:32,900
system of network of data centers so

93
00:03:32,900 --> 00:03:35,850
that's a lot of servers and it's a lot

94
00:03:35,850 --> 00:03:37,290
of switches and a lot of networking gear

95
00:03:37,290 --> 00:03:42,570
and it doesn't stop there so this is a

96
00:03:42,570 --> 00:03:44,820
picture of our first version of the open

97
00:03:44,820 --> 00:03:51,000
cellular the the product and so we're

98
00:03:51,000 --> 00:03:52,170
working with our partners to build out

99
00:03:52,170 --> 00:03:53,880
new communications infrastructure and

100
00:03:53,880 --> 00:03:55,440
improved exhibit improve existing

101
00:03:55,440 --> 00:03:57,510
communications infrastructure throughout

102
00:03:57,510 --> 00:03:59,190
the world our mission is to give people

103
00:03:59,190 --> 00:04:01,500
the power to build community and bring

104
00:04:01,500 --> 00:04:03,720
the world closer together and that's

105
00:04:03,720 --> 00:04:05,580
exactly what we're aiming to do with

106
00:04:05,580 --> 00:04:09,570
open cellular only about half or

107
00:04:09,570 --> 00:04:10,890
actually less than a half the world's

108
00:04:10,890 --> 00:04:13,080
population has internet access and we're

109
00:04:13,080 --> 00:04:14,490
working to get more online so they can

110
00:04:14,490 --> 00:04:16,320
participate in the community economies

111
00:04:16,320 --> 00:04:20,220
and you know be part of a larger

112
00:04:20,220 --> 00:04:22,830
community so

113
00:04:22,830 --> 00:04:25,889
with all that said we have a lot of

114
00:04:25,889 --> 00:04:27,389
hardware that we're supporting multiple

115
00:04:27,389 --> 00:04:29,009
generations of servers and switches in

116
00:04:29,009 --> 00:04:30,720
our data centers we have these external

117
00:04:30,720 --> 00:04:33,810
projects going on too and if you're

118
00:04:33,810 --> 00:04:36,030
looking at just one server or one

119
00:04:36,030 --> 00:04:37,979
product you might think you know booting

120
00:04:37,979 --> 00:04:39,599
is not such a big problem but when

121
00:04:39,599 --> 00:04:40,740
you're looking at it in the broader

122
00:04:40,740 --> 00:04:42,509
scope it turns out booting is pretty

123
00:04:42,509 --> 00:04:44,460
hard for one thing we have the

124
00:04:44,460 --> 00:04:46,080
ever-increasing amount of hardware that

125
00:04:46,080 --> 00:04:48,210
we have to support across all of these

126
00:04:48,210 --> 00:04:51,960
products so even things like local

127
00:04:51,960 --> 00:04:54,240
booting you know just loading your OS

128
00:04:54,240 --> 00:04:57,020
image off of some local media device

129
00:04:57,020 --> 00:04:59,099
again when you're looking at it from one

130
00:04:59,099 --> 00:05:00,629
product perspective doesn't seem like

131
00:05:00,629 --> 00:05:02,520
such a big deal but when you want to do

132
00:05:02,520 --> 00:05:04,289
it across a whole range of products you

133
00:05:04,289 --> 00:05:06,180
might have you know might be booting up

134
00:05:06,180 --> 00:05:10,349
an emmc drive a SATA drive nvme over PCI

135
00:05:10,349 --> 00:05:13,289
Express you might have complex setup you

136
00:05:13,289 --> 00:05:14,729
have you know you might have to set up

137
00:05:14,729 --> 00:05:16,740
clock trees you might have to enumerate

138
00:05:16,740 --> 00:05:18,810
buses allocate memory resources it's

139
00:05:18,810 --> 00:05:21,409
just all this stuff and all these

140
00:05:21,409 --> 00:05:24,389
devices have multiple generations many

141
00:05:24,389 --> 00:05:27,060
chip vendors many protocols and getting

142
00:05:27,060 --> 00:05:32,090
it all right is a big job so as a result

143
00:05:32,090 --> 00:05:34,919
firmware has kind of become an operating

144
00:05:34,919 --> 00:05:36,860
system in its own right

145
00:05:36,860 --> 00:05:39,360
firmware these days it's no longer just

146
00:05:39,360 --> 00:05:41,039
a monolithic blob that does one thing

147
00:05:41,039 --> 00:05:43,289
it's it's an operating system with

148
00:05:43,289 --> 00:05:47,039
drivers protocols crypto libraries all

149
00:05:47,039 --> 00:05:50,789
kinds of stuff and and because it's

150
00:05:50,789 --> 00:05:53,069
grown it's also become a much more

151
00:05:53,069 --> 00:05:55,409
valuable target for attackers so there's

152
00:05:55,409 --> 00:05:57,150
a lot more demands on firmware security

153
00:05:57,150 --> 00:06:02,400
so so in addition to all this complex

154
00:06:02,400 --> 00:06:04,229
hardware support we also need to take

155
00:06:04,229 --> 00:06:05,819
into consideration things like verified

156
00:06:05,819 --> 00:06:07,949
or secure boot measured or trusted boot

157
00:06:07,949 --> 00:06:14,250
and attestation and and and even just

158
00:06:14,250 --> 00:06:15,870
provisioning a system so installing

159
00:06:15,870 --> 00:06:17,310
Linux on one machine is pretty easy

160
00:06:17,310 --> 00:06:19,379
doing it across all those machines in

161
00:06:19,379 --> 00:06:20,969
the data centers and then on machines

162
00:06:20,969 --> 00:06:22,860
out in the field sometimes in rural

163
00:06:22,860 --> 00:06:24,330
places where if something goes wrong

164
00:06:24,330 --> 00:06:25,800
you're not going to have a technician

165
00:06:25,800 --> 00:06:27,719
out there for days to be able to fix it

166
00:06:27,719 --> 00:06:29,879
so turns out provisioning is hard and we

167
00:06:29,879 --> 00:06:32,130
need something very robust and very

168
00:06:32,130 --> 00:06:34,080
reliable that we have total control over

169
00:06:34,080 --> 00:06:35,940
and we can debug it

170
00:06:35,940 --> 00:06:40,260
and so that's what we're going with this

171
00:06:40,260 --> 00:06:42,240
so a few problems with the closed former

172
00:06:42,240 --> 00:06:44,960
that we've noticed is its archaic

173
00:06:44,960 --> 00:06:48,990
complex often quite buggy this isn't

174
00:06:48,990 --> 00:06:50,670
necessarily unique to closed-source

175
00:06:50,670 --> 00:06:52,700
firmwares even some of the open from our

176
00:06:52,700 --> 00:06:55,290
implementations out there are often

177
00:06:55,290 --> 00:06:58,140
unfamiliar to ordinary developers and it

178
00:06:58,140 --> 00:07:00,660
can be difficult to extend we want to be

179
00:07:00,660 --> 00:07:03,300
reactive instead of I'm sorry we want to

180
00:07:03,300 --> 00:07:05,340
be proactive instead of reactive when

181
00:07:05,340 --> 00:07:07,020
we're debugging so one of the main

182
00:07:07,020 --> 00:07:08,430
problems with closed source firmware is

183
00:07:08,430 --> 00:07:09,930
oftentimes you wait for a problem to

184
00:07:09,930 --> 00:07:12,450
happen and then you react to it and

185
00:07:12,450 --> 00:07:14,010
usually that reaction entails a lot of

186
00:07:14,010 --> 00:07:16,260
back-and-forth with the vendor trying to

187
00:07:16,260 --> 00:07:17,520
describe the problem hoping they

188
00:07:17,520 --> 00:07:19,560
understand maybe they have a magical fix

189
00:07:19,560 --> 00:07:21,300
maybe they don't but there's not a whole

190
00:07:21,300 --> 00:07:23,760
lot you can do so from our standpoint we

191
00:07:23,760 --> 00:07:25,800
want to be able to be proactive we want

192
00:07:25,800 --> 00:07:27,300
to be able to get in there look at the

193
00:07:27,300 --> 00:07:29,820
code identify exactly what's wrong build

194
00:07:29,820 --> 00:07:32,670
it and deploy closed source firmware

195
00:07:32,670 --> 00:07:33,930
tends to be hard to maintain we've

196
00:07:33,930 --> 00:07:37,290
noticed you oftentimes end up especially

197
00:07:37,290 --> 00:07:39,060
in an infrastructure like ours with many

198
00:07:39,060 --> 00:07:40,950
generations of servers they don't all

199
00:07:40,950 --> 00:07:43,520
have the same features

200
00:07:43,520 --> 00:07:46,380
you can't forward or back port features

201
00:07:46,380 --> 00:07:49,500
easily and even if it's supposed to be

202
00:07:49,500 --> 00:07:51,030
the same specification we found that

203
00:07:51,030 --> 00:07:53,010
sometimes the vendors implement things

204
00:07:53,010 --> 00:07:55,050
differently I mean you know you have

205
00:07:55,050 --> 00:07:56,190
multiple vendors and you have one

206
00:07:56,190 --> 00:07:58,140
specification and there's it's supposed

207
00:07:58,140 --> 00:07:59,400
to be uniform but they end up

208
00:07:59,400 --> 00:08:00,900
implementing it differently and that

209
00:08:00,900 --> 00:08:04,560
causes issues with the closed source

210
00:08:04,560 --> 00:08:05,820
firmware we have to deal with vendor

211
00:08:05,820 --> 00:08:09,180
specific tools so machine coming from

212
00:08:09,180 --> 00:08:10,440
one vendor and a machine coming from

213
00:08:10,440 --> 00:08:12,060
another vendor might have totally

214
00:08:12,060 --> 00:08:16,440
different like repair manuals and that

215
00:08:16,440 --> 00:08:18,150
there are of course many dimensions of

216
00:08:18,150 --> 00:08:20,640
supporting firmware at scale that put a

217
00:08:20,640 --> 00:08:22,230
huge demand on the robustness

218
00:08:22,230 --> 00:08:24,870
flexibility and debug ability of a DES

219
00:08:24,870 --> 00:08:29,010
firmware so at Facebook a lot of this

220
00:08:29,010 --> 00:08:31,020
stuff falls on the sustaining team

221
00:08:31,020 --> 00:08:33,630
that's the team that I'm in and we

222
00:08:33,630 --> 00:08:34,950
recognize that firmware has an impact

223
00:08:34,950 --> 00:08:37,229
across the entire product lifecycle so

224
00:08:37,229 --> 00:08:38,940
of course you need to design your

225
00:08:38,940 --> 00:08:40,830
firmware to actually boot your device

226
00:08:40,830 --> 00:08:42,510
and you might need to make necessary

227
00:08:42,510 --> 00:08:44,910
changes based on various stages of

228
00:08:44,910 --> 00:08:46,200
production or at maybe you decide that

229
00:08:46,200 --> 00:08:48,420
you want to swap out an IC you want to

230
00:08:48,420 --> 00:08:49,130
set

231
00:08:49,130 --> 00:08:51,370
you're GPIO is a little bit differently

232
00:08:51,370 --> 00:08:54,590
and so on and being able to modify the

233
00:08:54,590 --> 00:08:57,920
code and rapidly release it again helps

234
00:08:57,920 --> 00:08:59,690
out without a lot of course you need to

235
00:08:59,690 --> 00:09:00,920
build the thing and you need to make

236
00:09:00,920 --> 00:09:02,330
sure your tools work with whatever the

237
00:09:02,330 --> 00:09:06,020
vendors that the manufacturers tooling

238
00:09:06,020 --> 00:09:09,710
is set up for you need to test it to

239
00:09:09,710 --> 00:09:11,660
what ability to what extent can you test

240
00:09:11,660 --> 00:09:12,830
is a big problem for us because

241
00:09:12,830 --> 00:09:16,250
oftentimes it's just blackbox testing we

242
00:09:16,250 --> 00:09:17,780
really want to get more into the white

243
00:09:17,780 --> 00:09:20,540
box testing new firmware you have to be

244
00:09:20,540 --> 00:09:22,460
able to deploy it so firmware may need

245
00:09:22,460 --> 00:09:24,800
to be updated after initial deployment

246
00:09:24,800 --> 00:09:26,840
to address bugs that come up you need to

247
00:09:26,840 --> 00:09:27,920
have reliable tools that do not

248
00:09:27,920 --> 00:09:30,620
negatively impact operation and you may

249
00:09:30,620 --> 00:09:32,150
also need security mechanisms in place

250
00:09:32,150 --> 00:09:33,680
such as signed updates and a fallback

251
00:09:33,680 --> 00:09:36,410
path in case the update fails we want to

252
00:09:36,410 --> 00:09:37,940
be able to design this to work in our

253
00:09:37,940 --> 00:09:40,730
infrastructure and are in the open

254
00:09:40,730 --> 00:09:42,350
seller in this case in our partners

255
00:09:42,350 --> 00:09:44,000
infrastructures and we need a lot of

256
00:09:44,000 --> 00:09:45,770
flexibility to do that we can't just

257
00:09:45,770 --> 00:09:48,140
take something that you know some vendor

258
00:09:48,140 --> 00:09:52,850
you know dictates to us and when things

259
00:09:52,850 --> 00:09:54,620
go wrong what do you do open source

260
00:09:54,620 --> 00:09:55,820
firmware enables us to be proactive

261
00:09:55,820 --> 00:09:57,110
rather than reactive

262
00:09:57,110 --> 00:09:59,330
again discovering and prioritizing

263
00:09:59,330 --> 00:10:01,010
issues quickly so we can put necessary

264
00:10:01,010 --> 00:10:03,100
resources toward fixing the issue and

265
00:10:03,100 --> 00:10:05,060
finally when you have a big

266
00:10:05,060 --> 00:10:06,770
infrastructure like ours you tend to

267
00:10:06,770 --> 00:10:08,300
have a lot of machines cycling through

268
00:10:08,300 --> 00:10:10,490
like there are power and space

269
00:10:10,490 --> 00:10:12,550
constraints so often times we'll have to

270
00:10:12,550 --> 00:10:14,780
decommission you know many many

271
00:10:14,780 --> 00:10:17,120
thousands of machines that are older

272
00:10:17,120 --> 00:10:19,520
just to make room for newer ones and the

273
00:10:19,520 --> 00:10:20,840
old machines might still be perfectly

274
00:10:20,840 --> 00:10:22,490
fine and it might still run perfectly

275
00:10:22,490 --> 00:10:25,340
well so those machines get bought by

276
00:10:25,340 --> 00:10:28,670
companies like IT renew who have to also

277
00:10:28,670 --> 00:10:32,660
test deploy and sustain for their

278
00:10:32,660 --> 00:10:36,500
customers as well so we want to support

279
00:10:36,500 --> 00:10:38,150
many generations of equipment we want

280
00:10:38,150 --> 00:10:40,010
feature parity we want a unified

281
00:10:40,010 --> 00:10:43,340
adaptable toolkit and we want to support

282
00:10:43,340 --> 00:10:44,810
many different use cases not just data

283
00:10:44,810 --> 00:10:47,630
centers and we need to be familiar and

284
00:10:47,630 --> 00:10:50,780
have a low barrier to entry so here's

285
00:10:50,780 --> 00:10:51,980
how we're addressing the problem this is

286
00:10:51,980 --> 00:10:55,100
a diagram we came up with for the Linux

287
00:10:55,100 --> 00:10:59,150
boot project and so we're targeting use

288
00:10:59,150 --> 00:11:01,640
of core boot with Linux boot Linux boot

289
00:11:01,640 --> 00:11:02,660
will contain an inner Ram

290
00:11:02,660 --> 00:11:04,639
fess with you root which Ryan talked

291
00:11:04,639 --> 00:11:07,850
about and from there it's pretty easy

292
00:11:07,850 --> 00:11:09,560
once you have that Linux kernel up and

293
00:11:09,560 --> 00:11:10,610
running it's pretty easy to download

294
00:11:10,610 --> 00:11:12,350
your kernel from the cloud or the

295
00:11:12,350 --> 00:11:14,930
network or get it from a local storage

296
00:11:14,930 --> 00:11:17,569
system Network booting used to mean

297
00:11:17,569 --> 00:11:19,610
loading a machine loading an operating

298
00:11:19,610 --> 00:11:20,990
system from the machine across the room

299
00:11:20,990 --> 00:11:22,550
these days we need to think of it on a

300
00:11:22,550 --> 00:11:24,680
global infrastructure particularly with

301
00:11:24,680 --> 00:11:26,300
systems out in the field like with open

302
00:11:26,300 --> 00:11:30,680
cellular so we use Linux a lot we want

303
00:11:30,680 --> 00:11:32,149
production quality drivers networking

304
00:11:32,149 --> 00:11:34,160
capabilities in cryptography we want the

305
00:11:34,160 --> 00:11:36,470
versatility the Linux brings I mean you

306
00:11:36,470 --> 00:11:38,839
can run Linux on anything from high-end

307
00:11:38,839 --> 00:11:40,819
servers to toasters so it's perfect for

308
00:11:40,819 --> 00:11:42,980
us and we have engineering teams who

309
00:11:42,980 --> 00:11:46,040
understand Linux very well and so we

310
00:11:46,040 --> 00:11:47,209
want to leverage that talent that we

311
00:11:47,209 --> 00:11:53,930
already have so so it enables us to

312
00:11:53,930 --> 00:11:55,759
simplify our sustaining operations

313
00:11:55,759 --> 00:11:58,759
maximize code reuse share tools apply

314
00:11:58,759 --> 00:12:00,709
processes and best practices uniformly

315
00:12:00,709 --> 00:12:02,360
and just in general have a higher

316
00:12:02,360 --> 00:12:06,949
eyeballed to code ratio so for us Linux

317
00:12:06,949 --> 00:12:08,630
boot makes a lot of sense and more

318
00:12:08,630 --> 00:12:10,339
generally open source firmware enables

319
00:12:10,339 --> 00:12:11,600
our organization to have much better

320
00:12:11,600 --> 00:12:13,720
insight and control over our firmware

321
00:12:13,720 --> 00:12:16,579
and utilize our engineering resources

322
00:12:16,579 --> 00:12:19,250
much more effectively here are some of

323
00:12:19,250 --> 00:12:20,540
the current projects that you can find

324
00:12:20,540 --> 00:12:23,689
over at our booth these are all so the

325
00:12:23,689 --> 00:12:25,610
open seller or an OTP platforms listed

326
00:12:25,610 --> 00:12:29,089
are in upstream coreboot already so open

327
00:12:29,089 --> 00:12:31,189
cellular the route into and Elgon boards

328
00:12:31,189 --> 00:12:34,550
named after mountains of kenya are under

329
00:12:34,550 --> 00:12:36,470
source mainboard open cellular and the

330
00:12:36,470 --> 00:12:38,870
Mono Lake and wedge 100s platforms are

331
00:12:38,870 --> 00:12:43,220
under source mainboard OCP and our Linux

332
00:12:43,220 --> 00:12:45,230
boot distribution uses Yoruba system

333
00:12:45,230 --> 00:12:49,930
boot and aundrea we'll talk about that

334
00:12:49,930 --> 00:12:53,540
all right thank you David so my name is

335
00:12:53,540 --> 00:12:55,250
Indra Burberry oh I am NOT a filmer

336
00:12:55,250 --> 00:12:58,040
engineer not a hardware engineer but I

337
00:12:58,040 --> 00:13:00,290
am a production engineer which of this

338
00:13:00,290 --> 00:13:01,759
book means that I take care of

339
00:13:01,759 --> 00:13:03,199
scalability and reliability and

340
00:13:03,199 --> 00:13:04,699
performances of the Facebook

341
00:13:04,699 --> 00:13:06,470
infrastructure so let's see how does it

342
00:13:06,470 --> 00:13:11,480
fit into firmers my team is responsible

343
00:13:11,480 --> 00:13:13,250
for the provisioning of the operating

344
00:13:13,250 --> 00:13:15,410
systems on the bare metal at Facebook

345
00:13:15,410 --> 00:13:16,520
which means it's

346
00:13:16,520 --> 00:13:18,980
installing configuring and automating

347
00:13:18,980 --> 00:13:20,270
all the process around this so we don't

348
00:13:20,270 --> 00:13:23,630
do operations manually the installation

349
00:13:23,630 --> 00:13:25,910
of a single operating system on a single

350
00:13:25,910 --> 00:13:28,880
machine is a pretty simple task while

351
00:13:28,880 --> 00:13:30,440
doing the same thing that killed it's

352
00:13:30,440 --> 00:13:32,300
pretty complex there are a lot of moving

353
00:13:32,300 --> 00:13:34,100
parts that are involved there are a lot

354
00:13:34,100 --> 00:13:36,620
of network services components etc and

355
00:13:36,620 --> 00:13:39,950
the network itself can introduce a lot

356
00:13:39,950 --> 00:13:43,910
of noise to give you an idea what this

357
00:13:43,910 --> 00:13:46,220
looks like from my perspective I will

358
00:13:46,220 --> 00:13:48,020
tell you very quickly what happens from

359
00:13:48,020 --> 00:13:50,900
a host side when we try to provision any

360
00:13:50,900 --> 00:13:53,150
machine the machine powers on either

361
00:13:53,150 --> 00:13:56,360
from a cold boot or from a reboot then

362
00:13:56,360 --> 00:13:59,210
the firmer runs the dhcpv6 client our

363
00:13:59,210 --> 00:14:01,730
infrastructure internally ipv6 so that

364
00:14:01,730 --> 00:14:05,510
we use the HTTP v6 the server responds

365
00:14:05,510 --> 00:14:08,240
with a network boot program with a URL

366
00:14:08,240 --> 00:14:10,040
that says this is what you need to

367
00:14:10,040 --> 00:14:12,260
download to do your job then the

368
00:14:12,260 --> 00:14:14,330
download is done by at FTP and again we

369
00:14:14,330 --> 00:14:16,910
are still in firmer space once the

370
00:14:16,910 --> 00:14:19,280
network boot program is downloaded the

371
00:14:19,280 --> 00:14:21,770
firmer will execute the network network

372
00:14:21,770 --> 00:14:23,900
network boot program and the

373
00:14:23,900 --> 00:14:25,490
installation will start and we are in

374
00:14:25,490 --> 00:14:26,990
software space at this point we don't

375
00:14:26,990 --> 00:14:29,570
care about it what's wrong with this

376
00:14:29,570 --> 00:14:32,480
well it works most of the time but as

377
00:14:32,480 --> 00:14:34,520
David said different implementation of

378
00:14:34,520 --> 00:14:36,560
closets or sphere more can have bugs the

379
00:14:36,560 --> 00:14:38,450
HTTP implementations can be buggy to FTP

380
00:14:38,450 --> 00:14:41,510
can be buggy and so on and since we also

381
00:14:41,510 --> 00:14:45,380
depend on different vendors we also have

382
00:14:45,380 --> 00:14:47,330
different thermal versions which means

383
00:14:47,330 --> 00:14:49,460
we have different standards in quality

384
00:14:49,460 --> 00:14:52,370
in time to respond in fixing bugs and

385
00:14:52,370 --> 00:14:55,790
and so on and as I said most of the

386
00:14:55,790 --> 00:14:57,350
times this work but at a large scale

387
00:14:57,350 --> 00:14:59,870
even a small fraction 1% less than 1%

388
00:14:59,870 --> 00:15:01,940
can translate into a lot of operations

389
00:15:01,940 --> 00:15:04,310
for our teams so what we need in this

390
00:15:04,310 --> 00:15:06,710
case to make our life better is having

391
00:15:06,710 --> 00:15:08,660
reliable clients having better protocols

392
00:15:08,660 --> 00:15:11,180
for example TFTP is not necessarily the

393
00:15:11,180 --> 00:15:13,550
best protocol it's quite old

394
00:15:13,550 --> 00:15:17,240
literally my say my age and it's very

395
00:15:17,240 --> 00:15:19,970
slow and unreliable so we have HTTP and

396
00:15:19,970 --> 00:15:23,420
HTTPS why not using them and above all

397
00:15:23,420 --> 00:15:24,950
we want to control the implementation

398
00:15:24,950 --> 00:15:26,570
because we run on our servers with a lot

399
00:15:26,570 --> 00:15:28,220
of data we want to know what we run we

400
00:15:28,220 --> 00:15:29,699
don't want to depend on somebody else's

401
00:15:29,699 --> 00:15:31,980
code we don't know what's inside and so

402
00:15:31,980 --> 00:15:33,480
on and we want to be able to find bugs

403
00:15:33,480 --> 00:15:36,389
and ourselves fix them and deploy as

404
00:15:36,389 --> 00:15:39,169
soon as possible

405
00:15:39,290 --> 00:15:42,569
as I said I work in provisioning so

406
00:15:42,569 --> 00:15:44,429
let's see how does Linux boot fit into

407
00:15:44,429 --> 00:15:47,939
provisioning for us it can simplify our

408
00:15:47,939 --> 00:15:50,129
workflow a lot because we use limits

409
00:15:50,129 --> 00:15:52,049
kernel with a very stable network stack

410
00:15:52,049 --> 00:15:53,790
it's battle tested and tested by many

411
00:15:53,790 --> 00:15:58,319
more eyes and we can have inside inside

412
00:15:58,319 --> 00:16:01,489
one company we have better DHCP and TFTP

413
00:16:01,489 --> 00:16:04,799
implementations than what we can find in

414
00:16:04,799 --> 00:16:06,660
other closet source proprietary rumors

415
00:16:06,660 --> 00:16:09,089
but even better we can implement

416
00:16:09,089 --> 00:16:12,359
whatever protocol we need for example in

417
00:16:12,359 --> 00:16:15,179
this case we use HTTPS instead of FTP

418
00:16:15,179 --> 00:16:16,949
which means we have a lot more bandwidth

419
00:16:16,949 --> 00:16:18,989
we can download bigger images with less

420
00:16:18,989 --> 00:16:22,529
more reliability in less time but we can

421
00:16:22,529 --> 00:16:24,449
also use high-speed links and distant

422
00:16:24,449 --> 00:16:29,100
links efficiently the other big benefit

423
00:16:29,100 --> 00:16:31,049
is that we can run consistent filmers

424
00:16:31,049 --> 00:16:34,589
across the fleet if you have one harder

425
00:16:34,589 --> 00:16:36,989
type you will probably run one firmer

426
00:16:36,989 --> 00:16:39,239
from one vendor then you have upgrades

427
00:16:39,239 --> 00:16:41,189
and multiply this by all the number of

428
00:16:41,189 --> 00:16:44,069
hardware types that you have in your in

429
00:16:44,069 --> 00:16:46,199
your fleet with Linux boot we can

430
00:16:46,199 --> 00:16:47,759
consolidate everything under one single

431
00:16:47,759 --> 00:16:49,619
firmer and have only one single code

432
00:16:49,619 --> 00:16:52,319
base that runs on a row fleet so we will

433
00:16:52,319 --> 00:16:53,999
never duplicate the bugs across

434
00:16:53,999 --> 00:16:56,910
different Hardware types and as I

435
00:16:56,910 --> 00:16:59,009
already said above all that's the most

436
00:16:59,009 --> 00:17:00,989
important part for me it's that we

437
00:17:00,989 --> 00:17:03,929
control what we run on are harder again

438
00:17:03,929 --> 00:17:06,089
from the provisioning perspective thanks

439
00:17:06,089 --> 00:17:07,829
to the use of Linux boot we expect to

440
00:17:07,829 --> 00:17:09,510
largely reduce net putting failures

441
00:17:09,510 --> 00:17:11,760
which for my team means a lot less

442
00:17:11,760 --> 00:17:13,500
separations a lot more reliability other

443
00:17:13,500 --> 00:17:16,289
teams will be in able to do more things

444
00:17:16,289 --> 00:17:20,220
faster and so on Linux boot is open

445
00:17:20,220 --> 00:17:22,019
source of course and it's entirely

446
00:17:22,019 --> 00:17:23,669
developed open source first and then

447
00:17:23,669 --> 00:17:27,148
used internally and open source as you

448
00:17:27,148 --> 00:17:29,789
of course know means that auditability

449
00:17:29,789 --> 00:17:31,740
the bug ability we can look into the

450
00:17:31,740 --> 00:17:33,029
code we can actually run proper

451
00:17:33,029 --> 00:17:34,769
troubleshooting tools for example you

452
00:17:34,769 --> 00:17:38,970
can run TCP dump in in your former we

453
00:17:38,970 --> 00:17:40,260
know the security model it's the

454
00:17:40,260 --> 00:17:41,610
security mode develop Linux and other

455
00:17:41,610 --> 00:17:43,500
open-source components so

456
00:17:43,500 --> 00:17:45,330
we have insight into how things are

457
00:17:45,330 --> 00:17:48,000
actually debugged and developed and

458
00:17:48,000 --> 00:17:53,090
fixed but also portability is a big

459
00:17:53,090 --> 00:17:56,190
important element because Linux can run

460
00:17:56,190 --> 00:17:58,290
on many of the architectures which means

461
00:17:58,290 --> 00:18:00,120
that the same codebase with just

462
00:18:00,120 --> 00:18:01,860
different configurations and builds can

463
00:18:01,860 --> 00:18:03,240
run on different harder for example

464
00:18:03,240 --> 00:18:07,260
David mentioned that open cellar is an

465
00:18:07,260 --> 00:18:09,420
example of the same code that runs on a

466
00:18:09,420 --> 00:18:11,190
completely different architecture for a

467
00:18:11,190 --> 00:18:12,600
completely different use from data

468
00:18:12,600 --> 00:18:15,720
center harder and of course we can apply

469
00:18:15,720 --> 00:18:19,560
since Linux boot moves the the needle

470
00:18:19,560 --> 00:18:21,030
from thermal developer to software

471
00:18:21,030 --> 00:18:23,190
developer this means we can apply we can

472
00:18:23,190 --> 00:18:25,010
use our software developers which are

473
00:18:25,010 --> 00:18:27,330
largely available compared to thermal

474
00:18:27,330 --> 00:18:30,510
developers we can have more ice more

475
00:18:30,510 --> 00:18:33,050
people with expertise in that space and

476
00:18:33,050 --> 00:18:36,810
we can also leverage the collaboration

477
00:18:36,810 --> 00:18:40,320
from the external community so all of

478
00:18:40,320 --> 00:18:42,030
these are great advantages but let's see

479
00:18:42,030 --> 00:18:45,990
Linux boot is really versatile we can do

480
00:18:45,990 --> 00:18:48,240
more than just running in firmers so we

481
00:18:48,240 --> 00:18:51,960
had this idea a few months back Linux

482
00:18:51,960 --> 00:18:54,330
boot at Facebook is made by core boot

483
00:18:54,330 --> 00:18:58,140
Linux kernel you root and system boot so

484
00:18:58,140 --> 00:19:00,300
why don't we reuse all of this goodness

485
00:19:00,300 --> 00:19:02,340
for other purposes it's not just firmer

486
00:19:02,340 --> 00:19:05,130
and as I said I work in the provisioning

487
00:19:05,130 --> 00:19:07,290
team so I said why don't you use this

488
00:19:07,290 --> 00:19:09,690
for starting the provision to doing the

489
00:19:09,690 --> 00:19:12,300
to handle the whole provisioning so we

490
00:19:12,300 --> 00:19:14,340
have one single code base for both our

491
00:19:14,340 --> 00:19:17,210
farmers and our provisioning workflows

492
00:19:17,210 --> 00:19:19,620
benefits of this of course are that we

493
00:19:19,620 --> 00:19:21,840
have one code base we fix bugs ones but

494
00:19:21,840 --> 00:19:23,880
we also the people that are familiar

495
00:19:23,880 --> 00:19:25,530
without freedom are also familiar with

496
00:19:25,530 --> 00:19:26,910
provisioning infrastructure and vice

497
00:19:26,910 --> 00:19:30,050
versa and so we started experimenting

498
00:19:30,050 --> 00:19:32,700
multiple projects based on top of your

499
00:19:32,700 --> 00:19:36,390
routine Linux kernel in this lies I

500
00:19:36,390 --> 00:19:37,920
mentioned two of them one is called

501
00:19:37,920 --> 00:19:39,990
probe launcher developed by one of our

502
00:19:39,990 --> 00:19:42,540
interns it's actually finishing right

503
00:19:42,540 --> 00:19:44,190
now and the other one is called yard

504
00:19:44,190 --> 00:19:46,380
which is a network installer the first

505
00:19:46,380 --> 00:19:50,160
one is a kernel and RAM FS based the

506
00:19:50,160 --> 00:19:53,790
only root which is pre provision on

507
00:19:53,790 --> 00:19:56,550
every machine and

508
00:19:56,550 --> 00:19:58,350
this means that you can use this as a

509
00:19:58,350 --> 00:20:01,050
primary boot entry in your machine so

510
00:20:01,050 --> 00:20:03,240
when your machine starts it does not try

511
00:20:03,240 --> 00:20:05,970
anymore to use the firmer DHCP and TFTP

512
00:20:05,970 --> 00:20:08,280
client but it will look for a binary on

513
00:20:08,280 --> 00:20:10,470
the disk and this binary with stable

514
00:20:10,470 --> 00:20:12,929
tools with the proper Linux environment

515
00:20:12,929 --> 00:20:16,020
etc will provision the machine in a more

516
00:20:16,020 --> 00:20:16,710
reliable manner

517
00:20:16,710 --> 00:20:18,090
this is already improving the

518
00:20:18,090 --> 00:20:21,420
reliability of our infra on the other

519
00:20:21,420 --> 00:20:24,150
side we also have in case we can

520
00:20:24,150 --> 00:20:25,740
provision the image we still need to be

521
00:20:25,740 --> 00:20:27,840
able to boot from the regular framer and

522
00:20:27,840 --> 00:20:30,300
so we created yard which stands for yet

523
00:20:30,300 --> 00:20:34,110
another Ram disk names are hard and so

524
00:20:34,110 --> 00:20:36,270
this Ram disk is basically very similar

525
00:20:36,270 --> 00:20:39,179
to the launcher it just serves a

526
00:20:39,179 --> 00:20:40,320
slightly different purpose it's

527
00:20:40,320 --> 00:20:41,790
downloaded over the network by the

528
00:20:41,790 --> 00:20:44,550
favorites intentionally very small so it

529
00:20:44,550 --> 00:20:47,640
can be downloaded even by at FTP in a

530
00:20:47,640 --> 00:20:49,860
decent amount of time still talking

531
00:20:49,860 --> 00:20:53,250
about minutes in the worst case and this

532
00:20:53,250 --> 00:20:55,770
10 will trigger the installation of the

533
00:20:55,770 --> 00:21:00,990
machine with a proper environment system

534
00:21:00,990 --> 00:21:02,610
boot I mentioned system boot several

535
00:21:02,610 --> 00:21:05,160
times I guess it's time to explain what

536
00:21:05,160 --> 00:21:06,240
it is exactly

537
00:21:06,240 --> 00:21:08,490
it's a as I like to call it it's the

538
00:21:08,490 --> 00:21:10,350
distribution for it's a Linux

539
00:21:10,350 --> 00:21:11,670
distribution that implements a boot

540
00:21:11,670 --> 00:21:14,850
loader it's done on top of the work of

541
00:21:14,850 --> 00:21:18,300
many other people there is Corp sorry

542
00:21:18,300 --> 00:21:20,070
there's no core boot not necessary but

543
00:21:20,070 --> 00:21:22,100
system boot aggregates many components

544
00:21:22,100 --> 00:21:24,840
from Linux boot which can be ufi or per

545
00:21:24,840 --> 00:21:27,500
boot which then we have the Linux kernel

546
00:21:27,500 --> 00:21:30,330
but above all it's based on the route

547
00:21:30,330 --> 00:21:33,780
which Ryan talked about you root for who

548
00:21:33,780 --> 00:21:35,970
didn't follow Ryan's talk is very high

549
00:21:35,970 --> 00:21:37,800
level it's Rama fest and Rama fest

550
00:21:37,800 --> 00:21:40,860
builder written in that lingo system

551
00:21:40,860 --> 00:21:44,130
boot adds more components that basically

552
00:21:44,130 --> 00:21:47,460
give our distribution or system the

553
00:21:47,460 --> 00:21:51,390
personality of a boot loader Y system

554
00:21:51,390 --> 00:21:53,010
which is different from your root well

555
00:21:53,010 --> 00:21:54,210
it's not really different it's based on

556
00:21:54,210 --> 00:21:55,530
top of it and not some more components

557
00:21:55,530 --> 00:21:58,320
the idea is that we created it to give

558
00:21:58,320 --> 00:22:00,679
it this boot loader personality plus

559
00:22:00,679 --> 00:22:02,910
implementing tools that not necessarily

560
00:22:02,910 --> 00:22:04,500
fit into the more generic you route

561
00:22:04,500 --> 00:22:06,179
whatever we implemented its generic

562
00:22:06,179 --> 00:22:09,419
enough in stable enough will go back to

563
00:22:09,419 --> 00:22:10,150
you root all

564
00:22:10,150 --> 00:22:15,180
rest will stay in the inn system but

565
00:22:15,180 --> 00:22:17,620
what's inside the package this is a this

566
00:22:17,620 --> 00:22:19,900
light has a basically the laundry list

567
00:22:19,900 --> 00:22:21,160
of components that are present at the

568
00:22:21,160 --> 00:22:22,450
moment I will go very quickly through it

569
00:22:22,450 --> 00:22:24,940
but then more details in the next slides

570
00:22:24,940 --> 00:22:27,400
the first two components are net put in

571
00:22:27,400 --> 00:22:29,230
local boots these are programs that run

572
00:22:29,230 --> 00:22:33,670
inside drama fest and their task is to

573
00:22:33,670 --> 00:22:35,320
boot the machine either from the network

574
00:22:35,320 --> 00:22:36,820
or from local disk we will see more in

575
00:22:36,820 --> 00:22:40,480
detail how we have what we call a Linux

576
00:22:40,480 --> 00:22:43,350
boot VPD library which is used for

577
00:22:43,350 --> 00:22:46,180
non-volatile local storage similar to

578
00:22:46,180 --> 00:22:49,320
what you fi variables do another unify

579
00:22:49,320 --> 00:22:52,450
then we have a Buddhist interface the

580
00:22:52,450 --> 00:22:54,280
Buddhist interface is a way to describe

581
00:22:54,280 --> 00:22:55,780
the way you want to boot your machine so

582
00:22:55,780 --> 00:22:59,020
basically how you want to this lets you

583
00:22:59,020 --> 00:23:01,660
add more features and more methods to

584
00:23:01,660 --> 00:23:05,170
your boot to your bootloader we also

585
00:23:05,170 --> 00:23:07,240
have a TPM library developed by Philip

586
00:23:07,240 --> 00:23:10,030
and TPM tool which wraps on top of this

587
00:23:10,030 --> 00:23:13,600
library and eventually a binary code

588
00:23:13,600 --> 00:23:15,880
unit this is a naming use by root

589
00:23:15,880 --> 00:23:17,940
requires a binary that with this name

590
00:23:17,940 --> 00:23:21,190
which perhaps all logic above and gives

591
00:23:21,190 --> 00:23:25,570
this personality of a bootloader more in

592
00:23:25,570 --> 00:23:28,510
detail net boot is a regular UNIX

593
00:23:28,510 --> 00:23:30,430
program you can run it even on your

594
00:23:30,430 --> 00:23:34,720
Linux machine and in firmer it will be

595
00:23:34,720 --> 00:23:37,600
called anytime your bootloader wants to

596
00:23:37,600 --> 00:23:39,220
boot from the network what it does in

597
00:23:39,220 --> 00:23:40,990
short is it will try to acquire the

598
00:23:40,990 --> 00:23:42,850
network configuration via DHCP v6 or

599
00:23:42,850 --> 00:23:46,090
slack this GP 4 is coming soon

600
00:23:46,090 --> 00:23:50,080
then DHCP will return us a URL HTTP or

601
00:23:50,080 --> 00:23:51,730
HTTPS and this can be downloaded be the

602
00:23:51,730 --> 00:23:53,980
property HTTP client sorry we the proper

603
00:23:53,980 --> 00:23:57,940
HTTP client like w8 or gold goes HTTP

604
00:23:57,940 --> 00:23:59,980
libraries once this program is

605
00:23:59,980 --> 00:24:01,900
downloaded we use key exact to actually

606
00:24:01,900 --> 00:24:05,230
run the kernel local boot is very

607
00:24:05,230 --> 00:24:07,270
similar to net boot in the sense that it

608
00:24:07,270 --> 00:24:10,360
boots a program by a key exact the

609
00:24:10,360 --> 00:24:12,340
difference is where it looks for the

610
00:24:12,340 --> 00:24:14,380
program for it will scan in its default

611
00:24:14,380 --> 00:24:16,960
behavior it will scan all the locally

612
00:24:16,960 --> 00:24:18,640
attached disks which means whatever you

613
00:24:18,640 --> 00:24:20,980
configure your kernel to be able to to

614
00:24:20,980 --> 00:24:24,370
see it will look for grub configuration

615
00:24:24,370 --> 00:24:26,049
it's kind of a compatibility mode but

616
00:24:26,049 --> 00:24:28,030
it's not necessary I will look for rough

617
00:24:28,030 --> 00:24:30,419
configurations will scan them and find

618
00:24:30,419 --> 00:24:32,650
valid boot interest and it will try from

619
00:24:32,650 --> 00:24:35,049
the first one until it finds one one

620
00:24:35,049 --> 00:24:37,030
that works and eventually will kick sack

621
00:24:37,030 --> 00:24:38,350
into the kernel with the Prophet Rama

622
00:24:38,350 --> 00:24:41,740
fest in parameters alternatively it's

623
00:24:41,740 --> 00:24:43,270
probably a better method you can specify

624
00:24:43,270 --> 00:24:45,250
exactly what you want to boot from where

625
00:24:45,250 --> 00:24:48,309
and which with which come online more

626
00:24:48,309 --> 00:24:49,870
about this in the next couple of slides

627
00:24:49,870 --> 00:24:55,360
so the library VPD stands for vital

628
00:24:55,360 --> 00:24:56,679
product data I was originally developed

629
00:24:56,679 --> 00:24:58,750
at IBM and it's used for Chrome OS and

630
00:24:58,750 --> 00:25:01,540
it basically we use it as a key value

631
00:25:01,540 --> 00:25:04,809
store on the flash chip it's used for a

632
00:25:04,809 --> 00:25:05,919
number a lot of storage in a way similar

633
00:25:05,919 --> 00:25:08,410
to how you fi boot manager and boot

634
00:25:08,410 --> 00:25:10,750
variables are used we also use some

635
00:25:10,750 --> 00:25:12,669
similar naming for people to be familiar

636
00:25:12,669 --> 00:25:15,910
with it it can be extended since its

637
00:25:15,910 --> 00:25:18,340
generic key value store for us and if

638
00:25:18,340 --> 00:25:19,780
you don't like VPD for example because

639
00:25:19,780 --> 00:25:21,309
you want to use MV rom to store your

640
00:25:21,309 --> 00:25:23,350
variables you can very easily swap it

641
00:25:23,350 --> 00:25:24,900
out to the interface it's very simple

642
00:25:24,900 --> 00:25:28,990
and it's intentionally easy to swap now

643
00:25:28,990 --> 00:25:30,460
let's put these three things together

644
00:25:30,460 --> 00:25:33,340
netboot local boot and VPD how do we

645
00:25:33,340 --> 00:25:35,950
tell our bootloader hey this is what you

646
00:25:35,950 --> 00:25:38,049
have to do we use VPD to store a

647
00:25:38,049 --> 00:25:40,030
configuration which as you can see is

648
00:25:40,030 --> 00:25:42,850
just a key in a value like for example

649
00:25:42,850 --> 00:25:44,530
the first entry is boots zero zero zero

650
00:25:44,530 --> 00:25:47,230
zero familiar name for you fi but the

651
00:25:47,230 --> 00:25:49,270
content is different from other

652
00:25:49,270 --> 00:25:51,190
implementations we decided to use Jason

653
00:25:51,190 --> 00:25:53,530
because it's easy to read for humans and

654
00:25:53,530 --> 00:25:55,390
it's easy to parse for machines in most

655
00:25:55,390 --> 00:25:58,960
languages already can speak Jason and we

656
00:25:58,960 --> 00:26:00,820
define a very simple structure you

657
00:26:00,820 --> 00:26:03,100
basically have to define just your type

658
00:26:03,100 --> 00:26:06,700
name and whatever custom logic you want

659
00:26:06,700 --> 00:26:08,350
to implement on top of it the first

660
00:26:08,350 --> 00:26:11,260
Center on the left is what you have to

661
00:26:11,260 --> 00:26:13,210
store in your flash to say I want to

662
00:26:13,210 --> 00:26:15,340
boot from the network using DHCP v6 and

663
00:26:15,340 --> 00:26:17,559
please do the HCP on the interface with

664
00:26:17,559 --> 00:26:20,470
this MAC address on the right you can

665
00:26:20,470 --> 00:26:21,820
see the local boot entries

666
00:26:21,820 --> 00:26:24,190
those are the same thing they will just

667
00:26:24,190 --> 00:26:26,429
use a different program local boot and

668
00:26:26,429 --> 00:26:28,929
you can use them either in grub mode or

669
00:26:28,929 --> 00:26:32,679
to specify a device UID and path to a

670
00:26:32,679 --> 00:26:36,280
kernel that you want to boot from and

671
00:26:36,280 --> 00:26:37,450
all

672
00:26:37,450 --> 00:26:40,090
I said above is how to boot from a

673
00:26:40,090 --> 00:26:41,710
machine and how to specify your boot

674
00:26:41,710 --> 00:26:44,380
order now let's see how to implement

675
00:26:44,380 --> 00:26:47,080
your own booters you may want to do

676
00:26:47,080 --> 00:26:48,700
something more than just net booting or

677
00:26:48,700 --> 00:26:50,440
local bullying with the simple methods

678
00:26:50,440 --> 00:26:52,480
you will want to even have a policy to

679
00:26:52,480 --> 00:26:54,490
decide how to recover from a failed boot

680
00:26:54,490 --> 00:26:56,769
or how to verify an image with secure

681
00:26:56,769 --> 00:26:59,769
boot measured boot and so on

682
00:26:59,769 --> 00:27:01,659
so the we created also the Buddhist

683
00:27:01,659 --> 00:27:04,000
interface which is very simple again

684
00:27:04,000 --> 00:27:06,760
intentionally you only need to define a

685
00:27:06,760 --> 00:27:08,740
type name for your boot or like net boot

686
00:27:08,740 --> 00:27:11,250
or local boot or whatever boot and

687
00:27:11,250 --> 00:27:13,960
define a boot function with your custom

688
00:27:13,960 --> 00:27:15,970
logic and this custom logic will be

689
00:27:15,970 --> 00:27:18,909
picked up once registered into system

690
00:27:18,909 --> 00:27:22,750
boot in order for system boot to pick it

691
00:27:22,750 --> 00:27:25,360
up you have to register it but yourself

692
00:27:25,360 --> 00:27:26,649
to define a JSON format so that your

693
00:27:26,649 --> 00:27:29,110
program will be able to parse it how

694
00:27:29,110 --> 00:27:32,428
this is done is entirely up to you

695
00:27:32,490 --> 00:27:34,690
another important component in system

696
00:27:34,690 --> 00:27:38,649
boot is the TPM library in TPM - and

697
00:27:38,649 --> 00:27:41,970
this is meant to simplify the

698
00:27:41,970 --> 00:27:44,019
interfacing from the user perspective

699
00:27:44,019 --> 00:27:47,049
from program perspective to TPM 1.2 and

700
00:27:47,049 --> 00:27:49,600
2.0 so this high-level library basically

701
00:27:49,600 --> 00:27:54,210
lets you interface to both versions in a

702
00:27:54,210 --> 00:27:56,799
quite consistent manner as in they are

703
00:27:56,799 --> 00:27:58,389
different of course but most of the

704
00:27:58,389 --> 00:28:00,159
features are implementing the same way

705
00:28:00,159 --> 00:28:02,440
and you will transparently speak to TPM

706
00:28:02,440 --> 00:28:06,159
1.2 or to final Philip is the main

707
00:28:06,159 --> 00:28:07,899
developer this library is already merged

708
00:28:07,899 --> 00:28:10,269
part of the code into the Google's go

709
00:28:10,269 --> 00:28:13,960
TPM and some of the features that this

710
00:28:13,960 --> 00:28:16,120
library implements are handling the

711
00:28:16,120 --> 00:28:18,539
ownership of TPMS stealing and stealing

712
00:28:18,539 --> 00:28:20,919
precalculate in pc arts which is very

713
00:28:20,919 --> 00:28:22,690
interesting but also something that I

714
00:28:22,690 --> 00:28:24,760
find very interesting is the dumping the

715
00:28:24,760 --> 00:28:26,799
TPM event log so you know what's going

716
00:28:26,799 --> 00:28:30,399
on on your machine TPM tool is just to

717
00:28:30,399 --> 00:28:31,659
see a lie that wraps on top of this

718
00:28:31,659 --> 00:28:33,940
library if you want to see more just go

719
00:28:33,940 --> 00:28:38,470
to TPM to load order so system boot how

720
00:28:38,470 --> 00:28:40,630
does it look like I prepared the

721
00:28:40,630 --> 00:28:42,730
screenshot in the video I will use the

722
00:28:42,730 --> 00:28:43,690
screenshot in case the video doesn't

723
00:28:43,690 --> 00:28:46,889
work you know what it is

724
00:28:50,460 --> 00:28:53,950
okay all right hopefully it's enough

725
00:28:53,950 --> 00:28:57,750
it's a video okay so this is a open B&C

726
00:28:57,750 --> 00:29:01,360
machine that is resetting a wedge 100's

727
00:29:01,360 --> 00:29:03,250
the same machine that is outside at our

728
00:29:03,250 --> 00:29:04,090
booth

729
00:29:04,090 --> 00:29:05,410
this machine has been rebooted

730
00:29:05,410 --> 00:29:07,690
electrically and then we attached to the

731
00:29:07,690 --> 00:29:10,330
serial console as soon as the machine

732
00:29:10,330 --> 00:29:12,910
goes on coreboot will start we are using

733
00:29:12,910 --> 00:29:14,740
coreboot for silicon initialization as

734
00:29:14,740 --> 00:29:17,080
David said so we see all the coreboot

735
00:29:17,080 --> 00:29:20,020
messages at some point you will see the

736
00:29:20,020 --> 00:29:26,590
Linux kernel messages and once it starts

737
00:29:26,590 --> 00:29:28,510
we see you root and then the

738
00:29:28,510 --> 00:29:30,160
customization that we call system boot

739
00:29:30,160 --> 00:29:31,720
system boot will try to boot the machine

740
00:29:31,720 --> 00:29:34,270
unless you stop it within a few seconds

741
00:29:34,270 --> 00:29:37,870
which I did here the machine is trying

742
00:29:37,870 --> 00:29:39,730
to net put but then I press control-c to

743
00:29:39,730 --> 00:29:41,560
stop the boot and in this case we have a

744
00:29:41,560 --> 00:29:42,850
familiar environment for example here

745
00:29:42,850 --> 00:29:45,550
around LS and IP to see files in network

746
00:29:45,550 --> 00:29:48,040
configuration eventually I use local

747
00:29:48,040 --> 00:29:49,390
boot the program that I showed you and

748
00:29:49,390 --> 00:29:51,070
this program will scan through the disks

749
00:29:51,070 --> 00:29:53,670
and then eventually exact internal

750
00:29:53,670 --> 00:29:55,450
fast-forward because machine takes

751
00:29:55,450 --> 00:29:57,330
awhile to boot and you don't want to see

752
00:29:57,330 --> 00:30:05,200
system D especially wrong and there it

753
00:30:05,200 --> 00:30:07,840
is the machine as booting is ready to be

754
00:30:07,840 --> 00:30:11,220
used almost there

755
00:30:20,610 --> 00:30:23,039
okay what's gonna happen in the future

756
00:30:23,039 --> 00:30:24,990
we will implement different security

757
00:30:24,990 --> 00:30:27,600
models we want to give you the ability

758
00:30:27,600 --> 00:30:30,149
to verify your code to use the

759
00:30:30,149 --> 00:30:32,220
signatures for example there is the GP

760
00:30:32,220 --> 00:30:33,870
GV implementation in your route that can

761
00:30:33,870 --> 00:30:35,909
be used for this some of these features

762
00:30:35,909 --> 00:30:38,309
are already partially implemented we

763
00:30:38,309 --> 00:30:42,120
also want to have a more consistent way

764
00:30:42,120 --> 00:30:43,769
of configuring boot configurations so

765
00:30:43,769 --> 00:30:45,179
you can have more information and more

766
00:30:45,179 --> 00:30:47,490
customized to your needs but we also

767
00:30:47,490 --> 00:30:49,409
want to be able to boot efi binaries and

768
00:30:49,409 --> 00:30:53,070
this is also partially implemented and I

769
00:30:53,070 --> 00:30:58,789
guess Thank You Andre

770
00:30:58,789 --> 00:31:03,630
so in conclusion Facebook is going big

771
00:31:03,630 --> 00:31:05,789
on open source firmware we believe it's

772
00:31:05,789 --> 00:31:09,120
going to improve our boot flow by making

773
00:31:09,120 --> 00:31:11,190
it much more robust and using well

774
00:31:11,190 --> 00:31:14,669
tested well supported drivers we're

775
00:31:14,669 --> 00:31:16,980
simplifying our boot flow by reusing all

776
00:31:16,980 --> 00:31:20,100
these common open source components and

777
00:31:20,100 --> 00:31:21,450
at the same time we're enabling

778
00:31:21,450 --> 00:31:23,639
collaboration inside a Facebook across a

779
00:31:23,639 --> 00:31:26,090
variety of teams firmware engineers

780
00:31:26,090 --> 00:31:30,380
provisioning engineers kernel engineers

781
00:31:30,380 --> 00:31:33,840
many many teams and we're also enabling

782
00:31:33,840 --> 00:31:35,850
more collaboration with our external

783
00:31:35,850 --> 00:31:39,600
partners especially those in OCP such as

784
00:31:39,600 --> 00:31:42,899
Google and nine element cybersecurity

785
00:31:42,899 --> 00:31:47,039
and to Sigma and IT renew and we're even

786
00:31:47,039 --> 00:31:48,840
working with Microsoft on the parts of

787
00:31:48,840 --> 00:31:50,610
the open source firmware stack that

788
00:31:50,610 --> 00:31:53,220
aren't specific to Linux boot so

789
00:31:53,220 --> 00:31:54,720
definitely get involved with the OCP

790
00:31:54,720 --> 00:31:57,690
open system firmware effort whether or

791
00:31:57,690 --> 00:31:59,760
not you use linux as your bootloader

792
00:31:59,760 --> 00:32:02,370
we're also working to improve the state

793
00:32:02,370 --> 00:32:05,429
of efi UEFI booting along with vincent

794
00:32:05,429 --> 00:32:10,110
zimmer back there and lastly so so for

795
00:32:10,110 --> 00:32:11,760
us this approach enables us to open up

796
00:32:11,760 --> 00:32:12,960
the firmware development to a large

797
00:32:12,960 --> 00:32:14,490
group of engineers who eat sleep and

798
00:32:14,490 --> 00:32:16,470
breathe legs so so Linux boot makes a

799
00:32:16,470 --> 00:32:18,360
lot of sense for us and in short

800
00:32:18,360 --> 00:32:19,710
returning our large pool of Linux

801
00:32:19,710 --> 00:32:21,269
engineering talent into firmware

802
00:32:21,269 --> 00:32:23,399
engineering talent thanks to the power

803
00:32:23,399 --> 00:32:26,179
of open source software in firmware

804
00:32:26,179 --> 00:32:29,299
thank you

805
00:32:29,360 --> 00:32:35,720
[Applause]

806
00:32:35,720 --> 00:32:38,100
beautiful we have a lot of time for

807
00:32:38,100 --> 00:32:41,010
questions so like 15 minutes for

808
00:32:41,010 --> 00:32:41,900
questions

809
00:32:41,900 --> 00:32:51,810
who's first okay hi um it sounds like

810
00:32:51,810 --> 00:32:53,520
you basically trading exactly the right

811
00:32:53,520 --> 00:32:56,430
path there sounds really go cool to to

812
00:32:56,430 --> 00:32:59,100
see basically you were taken along the

813
00:32:59,100 --> 00:33:01,800
right side I'm mostly interested in the

814
00:33:01,800 --> 00:33:04,020
EFI implementation part that you

815
00:33:04,020 --> 00:33:05,700
mentioned because from an OS point of

816
00:33:05,700 --> 00:33:08,280
view the last thing we can we could use

817
00:33:08,280 --> 00:33:10,200
is as somebody who thinks they can pass

818
00:33:10,200 --> 00:33:13,260
about config files and does it wrong so

819
00:33:13,260 --> 00:33:15,150
what what we want is we basically want

820
00:33:15,150 --> 00:33:17,790
to have EFI interfaces as the the

821
00:33:17,790 --> 00:33:19,590
handover point from film with you to the

822
00:33:19,590 --> 00:33:21,720
US and you said that's partly

823
00:33:21,720 --> 00:33:23,280
implemented can you get into detail on

824
00:33:23,280 --> 00:33:25,230
what partly means and how far your along

825
00:33:25,230 --> 00:33:29,790
and whether you need help so if I

826
00:33:29,790 --> 00:33:30,870
understood the question you're

827
00:33:30,870 --> 00:33:33,210
interested about the UEFI interface

828
00:33:33,210 --> 00:33:35,190
interface is exposed to the Linux kernel

829
00:33:35,190 --> 00:33:38,010
of not the other way around the UEFI

830
00:33:38,010 --> 00:33:40,230
interface is that you expose inside our

831
00:33:40,230 --> 00:33:44,280
system boot so it sounded a new

832
00:33:44,280 --> 00:33:45,600
presentation it sounded as if you were

833
00:33:45,600 --> 00:33:48,120
working on making efi payloads run in

834
00:33:48,120 --> 00:33:54,300
system boot ah work in progress yeah we

835
00:33:54,300 --> 00:33:56,400
currently don't have a good solution to

836
00:33:56,400 --> 00:33:58,770
that this is a relatively new effort but

837
00:33:58,770 --> 00:34:00,870
we do want to expand that ecosystem and

838
00:34:00,870 --> 00:34:04,200
try to be more compliant and open and

839
00:34:04,200 --> 00:34:08,520
inclusive of you know people don't want

840
00:34:08,520 --> 00:34:13,350
these EFI interfaces okay so basically

841
00:34:13,350 --> 00:34:15,389
what I well I can I mean we should

842
00:34:15,389 --> 00:34:17,340
probably chat offline about this a bit

843
00:34:17,340 --> 00:34:20,790
but it it should be reasonably simple to

844
00:34:20,790 --> 00:34:22,409
actually implement it to essentially

845
00:34:22,409 --> 00:34:24,960
take my code that's gonna I'm going to

846
00:34:24,960 --> 00:34:27,300
talk about that in a couple hours but

847
00:34:27,300 --> 00:34:28,710
Leslie take my code put them into a

848
00:34:28,710 --> 00:34:30,360
library and use that as a wrapper as a

849
00:34:30,360 --> 00:34:32,310
user space binary and essentially just

850
00:34:32,310 --> 00:34:34,290
run efi binaries as linux user based

851
00:34:34,290 --> 00:34:36,420
applications then that you can then push

852
00:34:36,420 --> 00:34:39,750
into a special KX ik interface that

853
00:34:39,750 --> 00:34:41,310
would allow you to just run arbitrary

854
00:34:41,310 --> 00:34:44,190
linux or every fiber needs as Linux

855
00:34:44,190 --> 00:34:46,409
application including the full boot time

856
00:34:46,409 --> 00:34:47,420
service state

857
00:34:47,420 --> 00:34:49,800
pushing pushing back into Linux drivers

858
00:34:49,800 --> 00:34:51,300
which really is at the end of the what

859
00:34:51,300 --> 00:34:53,219
you want for big service because that

860
00:34:53,219 --> 00:34:54,540
gets you all the speed benefits all the

861
00:34:54,540 --> 00:34:56,520
open source nodes that you want but the

862
00:34:56,520 --> 00:34:58,580
same interfaces as anybody else has them

863
00:34:58,580 --> 00:35:04,670
that sounds awesome we should they don't

864
00:35:06,620 --> 00:35:19,080
any more questions or their I'm curious

865
00:35:19,080 --> 00:35:20,910
about the part where you said that you

866
00:35:20,910 --> 00:35:23,310
have HTTP support for the net boot

867
00:35:23,310 --> 00:35:25,830
because usually when we say you think of

868
00:35:25,830 --> 00:35:27,870
my net boot we think of doing it in a

869
00:35:27,870 --> 00:35:29,640
local subnet where that you control

870
00:35:29,640 --> 00:35:32,580
anyway so you wouldn't need the security

871
00:35:32,580 --> 00:35:34,620
part are you actually net booting

872
00:35:34,620 --> 00:35:36,810
payloads off the internet how are you

873
00:35:36,810 --> 00:35:40,680
doing it so for the HTTPS part I guess

874
00:35:40,680 --> 00:35:42,140
if I understand the question correctly

875
00:35:42,140 --> 00:35:43,830
you want to know how do we handle

876
00:35:43,830 --> 00:35:49,440
security for certificates first so I'm

877
00:35:49,440 --> 00:35:51,720
asking if you are booting your netboot

878
00:35:51,720 --> 00:35:55,770
payloads off the internet or local

879
00:35:55,770 --> 00:35:57,990
network okay so why do you need HTTPS

880
00:35:57,990 --> 00:35:59,310
and why not just a tree because it's

881
00:35:59,310 --> 00:36:01,560
always good to encrypt as much as

882
00:36:01,560 --> 00:36:04,410
possible as in we can trust our internal

883
00:36:04,410 --> 00:36:09,000
network but I think it's reasonable not

884
00:36:09,000 --> 00:36:11,220
to to minimize the surface of attack as

885
00:36:11,220 --> 00:36:14,120
much as possible and HTTPS is not a big

886
00:36:14,120 --> 00:36:17,690
problem to deploy even on firmer and

887
00:36:17,690 --> 00:36:20,370
actually for some products like the open

888
00:36:20,370 --> 00:36:23,280
cellular boards they might actually that

889
00:36:23,280 --> 00:36:25,890
might be a valid use case is you have a

890
00:36:25,890 --> 00:36:28,560
provider or someone hosting a bootable

891
00:36:28,560 --> 00:36:30,480
image on the Internet and we want to be

892
00:36:30,480 --> 00:36:31,940
able to download it securely to the

893
00:36:31,940 --> 00:36:37,160
device okay thanks

894
00:36:37,340 --> 00:36:41,000
so are there any more questions

895
00:36:44,630 --> 00:36:48,380
yeah thanks for the talk so on how many

896
00:36:48,380 --> 00:36:51,510
percent of his systems or service do you

897
00:36:51,510 --> 00:36:54,030
run this currently so it's used active

898
00:36:54,030 --> 00:36:56,220
in production on all servers already or

899
00:36:56,220 --> 00:36:59,400
I still rolling this out what's the

900
00:36:59,400 --> 00:37:03,090
status so so for open cellular the

901
00:37:03,090 --> 00:37:05,400
answer is a hundred percent we don't

902
00:37:05,400 --> 00:37:06,750
have many boards for open seller vilya

903
00:37:06,750 --> 00:37:10,500
right now I have the two generations on

904
00:37:10,500 --> 00:37:14,070
the at our booth and both of those use

905
00:37:14,070 --> 00:37:17,010
coreboot and well the first version uses

906
00:37:17,010 --> 00:37:18,360
see BIOS but we're also experimenting

907
00:37:18,360 --> 00:37:20,580
with Linux boot on it with modified

908
00:37:20,580 --> 00:37:22,980
larger ROM but the second generation

909
00:37:22,980 --> 00:37:26,940
uses Linux boot for our infrastructure

910
00:37:26,940 --> 00:37:29,820
or service we don't have a broad

911
00:37:29,820 --> 00:37:32,040
deployment yet but that's the what we

912
00:37:32,040 --> 00:37:34,410
are experimenting and that's what

913
00:37:34,410 --> 00:37:36,990
ideally we would like to go to yeah

914
00:37:36,990 --> 00:37:38,580
we're still polishing up some rough

915
00:37:38,580 --> 00:37:41,520
edges and the plan is to slow roll it is

916
00:37:41,520 --> 00:37:43,980
what we call um wait obviously we have a

917
00:37:43,980 --> 00:37:45,270
huge infrastructure and we're not just

918
00:37:45,270 --> 00:37:46,950
kind of switch it over all at once that

919
00:37:46,950 --> 00:37:50,250
has to be staged and that tends to take

920
00:37:50,250 --> 00:37:54,450
some time okay we have time for two more

921
00:37:54,450 --> 00:37:56,689
questions

922
00:37:57,020 --> 00:38:04,920
Ron thank you I was really interested in

923
00:38:04,920 --> 00:38:07,350
your comment that your reliability had

924
00:38:07,350 --> 00:38:10,770
gotten better with your system do do you

925
00:38:10,770 --> 00:38:12,540
have numbers on there because I'd really

926
00:38:12,540 --> 00:38:14,640
like to hear them if you do so I don't

927
00:38:14,640 --> 00:38:17,150
have our numbers because we don't have a

928
00:38:17,150 --> 00:38:20,340
broad enough deployment to give you to

929
00:38:20,340 --> 00:38:22,230
make a fair comparison but what we see

930
00:38:22,230 --> 00:38:25,740
is that so far it never failed unless it

931
00:38:25,740 --> 00:38:27,930
was an actual service failure on the

932
00:38:27,930 --> 00:38:30,150
other side all the attempts that we've

933
00:38:30,150 --> 00:38:32,520
done failed only not for the former but

934
00:38:32,520 --> 00:38:38,850
always for the service side before so

935
00:38:38,850 --> 00:38:40,740
the percentage is still small but the

936
00:38:40,740 --> 00:38:42,780
number of machines the actual number of

937
00:38:42,780 --> 00:38:45,270
machines is can be really high in terms

938
00:38:45,270 --> 00:38:49,170
of hundreds of thousands that came fail

939
00:38:49,170 --> 00:38:52,530
and of course this is not something you

940
00:38:52,530 --> 00:38:54,770
want to tackle manually

941
00:38:54,770 --> 00:38:57,770
and retries can help and alleviate but

942
00:38:57,770 --> 00:38:59,420
of course if you can eliminate the

943
00:38:59,420 --> 00:39:01,790
problem at its roots it's where we're

944
00:39:01,790 --> 00:39:06,680
going to be ok we have time for one more

945
00:39:06,680 --> 00:39:15,470
question our questions ok oh ok so do

946
00:39:15,470 --> 00:39:17,480
you have any thing you can say about in

947
00:39:17,480 --> 00:39:19,820
terms of scaling for example typically a

948
00:39:19,820 --> 00:39:22,670
single TFTP server can actually support

949
00:39:22,670 --> 00:39:24,380
that many clients come in because it's

950
00:39:24,380 --> 00:39:26,780
TFTP do you have a number for like how

951
00:39:26,780 --> 00:39:31,280
many simultaneous HTTP clients you can

952
00:39:31,280 --> 00:39:35,270
support so TFTP scaling is not an issue

953
00:39:35,270 --> 00:39:38,570
at least for us and we have our own BT

954
00:39:38,570 --> 00:39:40,880
FTP implementation that handle handles

955
00:39:40,880 --> 00:39:44,660
traffic quite easily so even with a

956
00:39:44,660 --> 00:39:46,880
large number of machines we can scale it

957
00:39:46,880 --> 00:39:49,369
a lot but of course when you have HTTP

958
00:39:49,369 --> 00:39:52,730
you have a shorter bursts with a lot

959
00:39:52,730 --> 00:39:56,210
more traffic I don't have hard numbers

960
00:39:56,210 --> 00:39:58,610
on how much these pressure this we put

961
00:39:58,610 --> 00:40:01,520
on HTTP servers for us but HTTP servers

962
00:40:01,520 --> 00:40:04,940
are the easy thing to scale so even if

963
00:40:04,940 --> 00:40:07,369
we don't expect to be worse than what we

964
00:40:07,369 --> 00:40:10,250
have currently have and web servers are

965
00:40:10,250 --> 00:40:16,720
something that Facebook does Bailey yeah

966
00:40:16,720 --> 00:40:19,280
ok thank you please have another round

967
00:40:19,280 --> 00:40:21,230
of applause for David and Andrea

968
00:40:21,230 --> 00:40:25,740
[Applause]

969
00:40:25,740 --> 00:40:28,000
[Music]

970
00:40:28,000 --> 00:40:30,060
you

