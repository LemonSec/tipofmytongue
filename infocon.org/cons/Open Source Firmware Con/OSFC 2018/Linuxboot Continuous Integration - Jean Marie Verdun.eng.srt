1
00:00:00,000 --> 00:00:04,310
[Music]

2
00:00:04,310 --> 00:00:07,259
except we'll be geometry he will talking

3
00:00:07,259 --> 00:00:10,019
about a project that aims to be the

4
00:00:10,019 --> 00:00:14,040
backbone for automated testing for Linux

5
00:00:14,040 --> 00:00:17,490
boot store give it up for Normandy thank

6
00:00:17,490 --> 00:00:19,260
you

7
00:00:19,260 --> 00:00:20,390
[Applause]

8
00:00:20,390 --> 00:00:23,010
so first of all thank you for staying

9
00:00:23,010 --> 00:00:24,960
for this last talk so I was a little bit

10
00:00:24,960 --> 00:00:27,359
worried when I've seen the timing but

11
00:00:27,359 --> 00:00:29,880
the room is still pretty crowded so

12
00:00:29,880 --> 00:00:32,070
thank you very much so my name is jean

13
00:00:32,070 --> 00:00:35,219
marie fada as you can imagine I'm French

14
00:00:35,219 --> 00:00:38,070
I'm working for a us-based company now

15
00:00:38,070 --> 00:00:40,469
and I am part of the Linux book

16
00:00:40,469 --> 00:00:42,059
technical steering committee with Ron

17
00:00:42,059 --> 00:00:44,460
Minich and Phillip who is part of nine

18
00:00:44,460 --> 00:00:46,320
elements but I don't I don't think that

19
00:00:46,320 --> 00:00:48,989
Phillip is in the room but it's fine so

20
00:00:48,989 --> 00:00:51,739
I'm going to speak about a super boring

21
00:00:51,739 --> 00:00:54,180
subject which is testing so most of the

22
00:00:54,180 --> 00:00:56,010
time engineers doesn't like to hear

23
00:00:56,010 --> 00:00:58,829
about testing but what I like to say is

24
00:00:58,829 --> 00:01:01,469
that before calling it anything we must

25
00:01:01,469 --> 00:01:04,140
be able to define how we are going to

26
00:01:04,140 --> 00:01:07,290
test so I think it's really key and you

27
00:01:07,290 --> 00:01:10,500
will understand why so I started to work

28
00:01:10,500 --> 00:01:12,210
on the Linux with project about 18

29
00:01:12,210 --> 00:01:16,920
months years ago when I initiated a

30
00:01:16,920 --> 00:01:20,729
shift into my company which was to move

31
00:01:20,729 --> 00:01:23,220
from a linear economy Merlin or circular

32
00:01:23,220 --> 00:01:25,320
economy manner so how many of you have

33
00:01:25,320 --> 00:01:29,250
ever heard about circular economy one so

34
00:01:29,250 --> 00:01:32,090
that's still the beginning so okay so

35
00:01:32,090 --> 00:01:34,829
that's that's pretty good to be there

36
00:01:34,829 --> 00:01:37,020
then so let me try to explain you what

37
00:01:37,020 --> 00:01:40,409
is the citroen economy mono so you are

38
00:01:40,409 --> 00:01:42,390
probably aware about the fact that we

39
00:01:42,390 --> 00:01:43,890
are producing every year around 8

40
00:01:43,890 --> 00:01:48,090
million servers plus some regarding

41
00:01:48,090 --> 00:01:52,200
these 8 million servers about 2.5

42
00:01:52,200 --> 00:01:55,860
minions are trashed every year so that's

43
00:01:55,860 --> 00:01:58,640
a lot of trash that's a lot of scrap and

44
00:01:58,640 --> 00:02:01,170
when we started to look at the raw

45
00:02:01,170 --> 00:02:04,740
performances of this crap we estimate

46
00:02:04,740 --> 00:02:06,810
that these performances were still far

47
00:02:06,810 --> 00:02:08,310
good enough to

48
00:02:08,310 --> 00:02:10,889
some good applications and there is a

49
00:02:10,889 --> 00:02:12,420
lot of people while still lighting in

50
00:02:12,420 --> 00:02:15,330
computers resources access and we say

51
00:02:15,330 --> 00:02:18,209
perhaps we can reuse this stuff but

52
00:02:18,209 --> 00:02:20,760
reusing them requires to upgrade them

53
00:02:20,760 --> 00:02:24,140
keep them in good operation world and

54
00:02:24,140 --> 00:02:26,520
roughly the circular economy modern

55
00:02:26,520 --> 00:02:28,319
introduced something which is Knightly

56
00:02:28,319 --> 00:02:31,790
different than the produce consume and

57
00:02:31,790 --> 00:02:34,440
recycle so we call that recycle so

58
00:02:34,440 --> 00:02:36,750
that's just to have a positive image but

59
00:02:36,750 --> 00:02:40,140
in the end this is generating trash to a

60
00:02:40,140 --> 00:02:43,560
produce use recycle and update so

61
00:02:43,560 --> 00:02:45,690
roughly and whole system is going to

62
00:02:45,690 --> 00:02:49,140
have three to four next time so from the

63
00:02:49,140 --> 00:02:51,480
compute servers we can counter that to a

64
00:02:51,480 --> 00:02:53,670
storage box then to networking box and

65
00:02:53,670 --> 00:02:55,260
something which is going to end up into

66
00:02:55,260 --> 00:02:57,480
edge computing and then we can generate

67
00:02:57,480 --> 00:03:00,780
trash so we studied that project with

68
00:03:00,780 --> 00:03:03,900
some OCP I press carrier members so you

69
00:03:03,900 --> 00:03:06,239
can see there bunch of racks so this is

70
00:03:06,239 --> 00:03:08,760
racks that were currently processing so

71
00:03:08,760 --> 00:03:11,220
roughly that he come from - scanner data

72
00:03:11,220 --> 00:03:14,130
centers and before we started that

73
00:03:14,130 --> 00:03:17,100
project they were fully scrapped except

74
00:03:17,100 --> 00:03:18,959
the CPU and the memory so everything

75
00:03:18,959 --> 00:03:22,019
else was going to scrap and generating

76
00:03:22,019 --> 00:03:28,170
Lanciano we we we quickly identified a

77
00:03:28,170 --> 00:03:30,510
massive issue even if they were running

78
00:03:30,510 --> 00:03:33,120
in production so the film well that that

79
00:03:33,120 --> 00:03:36,329
they were coming with was really updated

80
00:03:36,329 --> 00:03:40,049
and full of bugs and was not able to

81
00:03:40,049 --> 00:03:43,350
support latest technology like boring on

82
00:03:43,350 --> 00:03:46,859
nvme drives or anything else so the key

83
00:03:46,859 --> 00:03:49,680
question was how can we get rid of the

84
00:03:49,680 --> 00:03:52,019
EMI system bios which really sucks on

85
00:03:52,019 --> 00:03:56,579
these machines so we we started to think

86
00:03:56,579 --> 00:03:58,650
about it and I went to a car boot

87
00:03:58,650 --> 00:04:00,690
developer meeting I think this was in

88
00:04:00,690 --> 00:04:05,190
Denver about 15 months ago yeah in 2017

89
00:04:05,190 --> 00:04:07,890
and started discussion with Ron who had

90
00:04:07,890 --> 00:04:11,820
some idea about how to boot on a Linux

91
00:04:11,820 --> 00:04:15,349
kernel quickly after on the PEI and

92
00:04:15,349 --> 00:04:18,870
stage within the Wi-Fi stack and we

93
00:04:18,870 --> 00:04:20,889
started to work together and

94
00:04:20,889 --> 00:04:23,469
ran a POC a proof-of-concept on the

95
00:04:23,469 --> 00:04:25,780
winter fun machine just to see if it

96
00:04:25,780 --> 00:04:28,449
could work and I think it quickly worked

97
00:04:28,449 --> 00:04:30,460
so in the end we we met first in

98
00:04:30,460 --> 00:04:32,680
February and we were able to boot the

99
00:04:32,680 --> 00:04:34,599
system in some somewhere in June

100
00:04:34,599 --> 00:04:37,300
timeframe something like that when I

101
00:04:37,300 --> 00:04:39,159
said boots we got something on the soil

102
00:04:39,159 --> 00:04:43,180
pot so let's be reasonable the thing

103
00:04:43,180 --> 00:04:45,849
else when we are we sniffing we're

104
00:04:45,849 --> 00:04:47,650
certifying this machine they are not

105
00:04:47,650 --> 00:04:49,689
handing up to a single customers so they

106
00:04:49,689 --> 00:04:52,090
are really spreading everywhere around

107
00:04:52,090 --> 00:04:54,789
the world and and what is key to us is

108
00:04:54,789 --> 00:04:57,129
Swedish system variability and being

109
00:04:57,129 --> 00:04:59,590
able to great machine during the the

110
00:04:59,590 --> 00:05:02,699
next generation of this lifecycle and

111
00:05:02,699 --> 00:05:05,699
and we went extremely worried about

112
00:05:05,699 --> 00:05:08,500
using new technology for system balance

113
00:05:08,500 --> 00:05:11,590
especially bullying booting the Machine

114
00:05:11,590 --> 00:05:12,789
because this is the first things that

115
00:05:12,789 --> 00:05:14,889
the machine is doing so if it doesn't

116
00:05:14,889 --> 00:05:16,569
works you cannot use the machine and

117
00:05:16,569 --> 00:05:19,479
that's why quickly we discovered that we

118
00:05:19,479 --> 00:05:22,330
needed to put in place a CI which which

119
00:05:22,330 --> 00:05:24,849
was going to stress the system's

120
00:05:24,849 --> 00:05:27,009
validate that Linux boot works properly

121
00:05:27,009 --> 00:05:30,099
and that that we could run regression

122
00:05:30,099 --> 00:05:31,990
testing so this is the main goal of the

123
00:05:31,990 --> 00:05:35,710
of the current CI project so what we

124
00:05:35,710 --> 00:05:37,240
want absolutely to avoid I think you

125
00:05:37,240 --> 00:05:40,300
know that that image who knows it nobody

126
00:05:40,300 --> 00:05:43,449
okay that's good so you are well that

127
00:05:43,449 --> 00:05:44,770
fixing a bug in production is a

128
00:05:44,770 --> 00:05:46,690
dangerous thing so then that dance on

129
00:05:46,690 --> 00:05:48,969
some why I'm really caring about testing

130
00:05:48,969 --> 00:05:51,039
before entering production or before

131
00:05:51,039 --> 00:05:53,710
shipping product so that the promise

132
00:05:53,710 --> 00:05:55,900
that we do to our end-users that is they

133
00:05:55,900 --> 00:05:57,909
are using a wonderful system running

134
00:05:57,909 --> 00:06:01,180
Linux built so they are able to deploy

135
00:06:01,180 --> 00:06:03,250
it in production and we soon have system

136
00:06:03,250 --> 00:06:05,349
introduction at customer sites running

137
00:06:05,349 --> 00:06:08,199
in a free system for for managing

138
00:06:08,199 --> 00:06:10,990
invoicing or managing purchase orders

139
00:06:10,990 --> 00:06:13,089
and hold these things while managing a

140
00:06:13,089 --> 00:06:16,180
car manufacturer plan so that's the

141
00:06:16,180 --> 00:06:18,099
other that's the other challenge that we

142
00:06:18,099 --> 00:06:21,009
faced so we couldn't build and rely on

143
00:06:21,009 --> 00:06:23,580
testing with a basic art we're set up

144
00:06:23,580 --> 00:06:26,080
with a technician in a lab which was

145
00:06:26,080 --> 00:06:28,659
running a test plan I've seen that many

146
00:06:28,659 --> 00:06:31,000
time at odium sites where the guy was

147
00:06:31,000 --> 00:06:33,190
testing the my firmware image which

148
00:06:33,190 --> 00:06:35,230
has been built by one of its Connie it's

149
00:06:35,230 --> 00:06:36,880
just in front of a keyboard and run a

150
00:06:36,880 --> 00:06:40,210
bunch of tests following a test process

151
00:06:40,210 --> 00:06:42,100
you're on on the piece of paper and

152
00:06:42,100 --> 00:06:44,320
running checkmarks that's okay that's

153
00:06:44,320 --> 00:06:47,080
okay that's not good and so on it

154
00:06:47,080 --> 00:06:49,780
happens many times and this this does

155
00:06:49,780 --> 00:06:52,240
explain why also in some cases the EMI

156
00:06:52,240 --> 00:06:55,030
image which are provided are not really

157
00:06:55,030 --> 00:06:57,910
good so EMI source code in some way can

158
00:06:57,910 --> 00:07:00,730
work pretty well but it has to be set up

159
00:07:00,730 --> 00:07:03,460
properly so that's the thing and and and

160
00:07:03,460 --> 00:07:05,320
roughly what happened in many times is

161
00:07:05,320 --> 00:07:07,840
that the person who is saying up is

162
00:07:07,840 --> 00:07:10,660
under rush is producing an image and it

163
00:07:10,660 --> 00:07:12,730
goes in the in the film without having

164
00:07:12,730 --> 00:07:15,970
properly tested so what is the goal of

165
00:07:15,970 --> 00:07:18,220
the project the goal of the project is

166
00:07:18,220 --> 00:07:22,200
to be able to build a repeatable

167
00:07:22,200 --> 00:07:24,520
environment to generate Linux boot

168
00:07:24,520 --> 00:07:26,860
images so let's imagine than in one year

169
00:07:26,860 --> 00:07:28,810
somebody's coming back to us standing

170
00:07:28,810 --> 00:07:31,030
gasps I got a bag so this is the version

171
00:07:31,030 --> 00:07:33,820
I'm running can you fix it so if we are

172
00:07:33,820 --> 00:07:36,490
unable to rebuild that version that's an

173
00:07:36,490 --> 00:07:36,850
issue

174
00:07:36,850 --> 00:07:39,430
so right now Linux boot is fully managed

175
00:07:39,430 --> 00:07:42,580
using github so we can use the tagging

176
00:07:42,580 --> 00:07:44,350
we can use all the github features to

177
00:07:44,350 --> 00:07:47,710
keep track of storing but the thing is

178
00:07:47,710 --> 00:07:51,400
we still need to be able to we'll build

179
00:07:51,400 --> 00:07:55,000
without while being sure that the binary

180
00:07:55,000 --> 00:07:57,340
that we generate is exactly the same so

181
00:07:57,340 --> 00:07:59,669
that's that's one of the god of the sign

182
00:07:59,669 --> 00:08:02,590
then we we have to fully automatized

183
00:08:02,590 --> 00:08:05,200
attached I don't want a human in the

184
00:08:05,200 --> 00:08:07,900
middle on just running tests and telling

185
00:08:07,900 --> 00:08:11,169
me it works and if the guy is is tired

186
00:08:11,169 --> 00:08:13,930
is going to go fast and is going to make

187
00:08:13,930 --> 00:08:16,120
mistakes and you will tell me it works

188
00:08:16,120 --> 00:08:19,080
so I've seen that many time either so

189
00:08:19,080 --> 00:08:23,530
and if it is automated so we can we can

190
00:08:23,530 --> 00:08:25,380
rely on something which is replicable

191
00:08:25,380 --> 00:08:28,330
the other thing if you automatize the

192
00:08:28,330 --> 00:08:30,370
testing of the fume where we think that

193
00:08:30,370 --> 00:08:33,070
we can scan without any issue so if you

194
00:08:33,070 --> 00:08:35,740
have one guy ten guys 100 person which

195
00:08:35,740 --> 00:08:38,049
are testings so you are still limited by

196
00:08:38,049 --> 00:08:40,000
your human resources so if you have

197
00:08:40,000 --> 00:08:42,969
automated systems so the only one limit

198
00:08:42,969 --> 00:08:44,710
is the capacity of your data center to

199
00:08:44,710 --> 00:08:45,850
accept you

200
00:08:45,850 --> 00:08:47,380
Justino so that's the that's the thing

201
00:08:47,380 --> 00:08:51,160
and the last links else we need to be

202
00:08:51,160 --> 00:08:52,630
able to support the cheaper hardware

203
00:08:52,630 --> 00:08:55,060
generation so right now we are getting

204
00:08:55,060 --> 00:08:58,959
xeon d1 d2 d3 d4 and even skylake as

205
00:08:58,959 --> 00:09:02,170
decom system so which means that that's

206
00:09:02,170 --> 00:09:05,110
that's a very wide range of systems and

207
00:09:05,110 --> 00:09:08,740
and if we do that by hand

208
00:09:08,740 --> 00:09:10,779
this is just going to be a nightmare so

209
00:09:10,779 --> 00:09:13,089
I don't remember exactly how many commit

210
00:09:13,089 --> 00:09:15,610
happened on Linux boot but I think this

211
00:09:15,610 --> 00:09:18,370
was a higher than 300 or 400 something

212
00:09:18,370 --> 00:09:20,290
like that so each time we gotta commit

213
00:09:20,290 --> 00:09:22,839
we have to run testing on ten different

214
00:09:22,839 --> 00:09:24,360
platform with different revisions

215
00:09:24,360 --> 00:09:27,100
different test environment so that that

216
00:09:27,100 --> 00:09:27,790
doesn't work

217
00:09:27,790 --> 00:09:31,600
so either we we selected the options to

218
00:09:31,600 --> 00:09:33,880
test only on one single systems hoping

219
00:09:33,880 --> 00:09:36,220
that it will works on the others or we

220
00:09:36,220 --> 00:09:38,620
we use a brute force approach which is

221
00:09:38,620 --> 00:09:40,750
let's put online a bunch of servers and

222
00:09:40,750 --> 00:09:43,000
test every time we get a new commit on

223
00:09:43,000 --> 00:09:44,769
these machines and get feedback from the

224
00:09:44,769 --> 00:09:47,139
machines so that's that's really the

225
00:09:47,139 --> 00:09:50,589
goal of the other platform so we started

226
00:09:50,589 --> 00:09:54,009
the development about I think in January

227
00:09:54,009 --> 00:09:55,899
so we are in September of nine months

228
00:09:55,899 --> 00:09:59,290
years ago so that's working progress we

229
00:09:59,290 --> 00:10:01,689
still have a lot of things to do but

230
00:10:01,689 --> 00:10:04,360
quickly we decided to run the

231
00:10:04,360 --> 00:10:06,430
development through a Web API so we can

232
00:10:06,430 --> 00:10:09,220
get connected pretty easily to github so

233
00:10:09,220 --> 00:10:11,620
what we want is is roughly that a few

234
00:10:11,620 --> 00:10:13,420
well developers who is going to push for

235
00:10:13,420 --> 00:10:15,730
new commits on github doesn't have to

236
00:10:15,730 --> 00:10:18,100
know anything about what's going on to

237
00:10:18,100 --> 00:10:21,670
get a testing result so if we just get a

238
00:10:21,670 --> 00:10:24,310
green light or red light and if this is

239
00:10:24,310 --> 00:10:26,649
a red light you can get access to a log

240
00:10:26,649 --> 00:10:28,300
file turning him what what went wrong

241
00:10:28,300 --> 00:10:34,720
and we even do scheduled to offer women

242
00:10:34,720 --> 00:10:36,819
access to machines which which went

243
00:10:36,819 --> 00:10:39,639
wrong for debugging photos like that the

244
00:10:39,639 --> 00:10:43,120
end users will be able to to identify

245
00:10:43,120 --> 00:10:45,250
from where the issue can come from so

246
00:10:45,250 --> 00:10:47,649
this is not happening really often on CI

247
00:10:47,649 --> 00:10:49,720
testing platform clear and free so you

248
00:10:49,720 --> 00:10:51,790
just get a log most of the time and you

249
00:10:51,790 --> 00:10:53,889
have to rerun your test so we thought

250
00:10:53,889 --> 00:10:56,110
that for firmware testing it might be

251
00:10:56,110 --> 00:10:57,579
useful to get access to machine

252
00:10:57,579 --> 00:10:59,340
especially if

253
00:10:59,340 --> 00:11:02,970
to test features like those new mice in

254
00:11:02,970 --> 00:11:04,050
a bird or not

255
00:11:04,050 --> 00:11:06,450
so Linux boot is about to provide you a

256
00:11:06,450 --> 00:11:08,640
chance on getting access to the

257
00:11:08,640 --> 00:11:10,470
interactive sunlight we are pretty

258
00:11:10,470 --> 00:11:13,620
useful so the first things is the Web

259
00:11:13,620 --> 00:11:16,770
API then we have a job controllers which

260
00:11:16,770 --> 00:11:19,290
is just scheduling tasks in a

261
00:11:19,290 --> 00:11:21,660
step-by-step approach we will build an

262
00:11:21,660 --> 00:11:24,330
image then we validate that it that this

263
00:11:24,330 --> 00:11:26,700
image is not going to break the node so

264
00:11:26,700 --> 00:11:29,220
this is a live testing on real hardware

265
00:11:29,220 --> 00:11:31,500
and then we have some basic feature of

266
00:11:31,500 --> 00:11:34,290
validations so the node is up and

267
00:11:34,290 --> 00:11:36,330
running so we check that the SCP ID

268
00:11:36,330 --> 00:11:39,060
server is properly set up and decoded we

269
00:11:39,060 --> 00:11:41,250
check that Numa works so we check that

270
00:11:41,250 --> 00:11:45,300
we can detect the PCI and and that it

271
00:11:45,300 --> 00:11:46,440
matched the system configuration

272
00:11:46,440 --> 00:11:49,050
expected and then we goes up to do

273
00:11:49,050 --> 00:11:50,970
the operating system stability and

274
00:11:50,970 --> 00:11:52,560
stress test so we want to boot the

275
00:11:52,560 --> 00:11:54,810
operating systems and right now we are

276
00:11:54,810 --> 00:11:58,440
testing with Ubuntu and center us and we

277
00:11:58,440 --> 00:12:01,380
we are checking that this OS feels

278
00:12:01,380 --> 00:12:03,660
comfortable on top of Linux boot so

279
00:12:03,660 --> 00:12:05,490
that's that's something which is also

280
00:12:05,490 --> 00:12:07,680
key because our end users are running an

281
00:12:07,680 --> 00:12:09,360
operating system so they are not running

282
00:12:09,360 --> 00:12:11,820
a few more and we must be shown that the

283
00:12:11,820 --> 00:12:13,230
operating system is able to work

284
00:12:13,230 --> 00:12:15,810
properly I get some requests to support

285
00:12:15,810 --> 00:12:21,360
Windows so up to now we say no but I

286
00:12:21,360 --> 00:12:23,220
don't know I don't know what will be the

287
00:12:23,220 --> 00:12:24,930
future so roughly web just supporting

288
00:12:24,930 --> 00:12:28,730
Linux on top of Linux boot up to now I

289
00:12:28,730 --> 00:12:31,080
should have said at the early stage that

290
00:12:31,080 --> 00:12:32,790
everything that we are doing is open

291
00:12:32,790 --> 00:12:34,470
source so you can participate to this

292
00:12:34,470 --> 00:12:36,660
project either on the other side on the

293
00:12:36,660 --> 00:12:39,230
software side so feel free to contribute

294
00:12:39,230 --> 00:12:43,260
so the current implementation is is

295
00:12:43,260 --> 00:12:47,010
based on popular open source project so

296
00:12:47,010 --> 00:12:51,000
as done as the infrastructure has to

297
00:12:51,000 --> 00:12:54,300
scale with the upcoming new hardware so

298
00:12:54,300 --> 00:12:56,580
we used NC bond just to be able to

299
00:12:56,580 --> 00:12:59,730
handle to have new capacity to the

300
00:12:59,730 --> 00:13:02,280
infrastructures so everything which is

301
00:13:02,280 --> 00:13:05,160
related to deployment of build machines

302
00:13:05,160 --> 00:13:09,390
or test machines is is implemented using

303
00:13:09,390 --> 00:13:10,130
ansible

304
00:13:10,130 --> 00:13:12,440
so we are well

305
00:13:12,440 --> 00:13:14,180
using also a lot of hardware so we are

306
00:13:14,180 --> 00:13:16,100
trying to have more than one node for

307
00:13:16,100 --> 00:13:18,410
each generation of platforms because we

308
00:13:18,410 --> 00:13:19,820
are expecting that some of them are

309
00:13:19,820 --> 00:13:22,700
going to break whatever happen and we

310
00:13:22,700 --> 00:13:24,920
are scaling in batch with firms which is

311
00:13:24,920 --> 00:13:29,600
a well-known scheduler in HPC and for

312
00:13:29,600 --> 00:13:31,940
the beyond we are using KVM so

313
00:13:31,940 --> 00:13:34,280
everything is virtualized so we can we

314
00:13:34,280 --> 00:13:36,770
can beyond on a well-known system

315
00:13:36,770 --> 00:13:39,560
environment and if we have to support

316
00:13:39,560 --> 00:13:41,540
something new so we are pretty flexible

317
00:13:41,540 --> 00:13:44,840
on that approach and roughly to set up

318
00:13:44,840 --> 00:13:47,600
your own CI you just you just need to

319
00:13:47,600 --> 00:13:50,210
have an ANSI born a standard aslam

320
00:13:50,210 --> 00:13:53,000
control and batch nodes and then after a

321
00:13:53,000 --> 00:13:55,730
couple of testing notes on that stuff

322
00:13:55,730 --> 00:13:58,850
and that's it one of the goal is to

323
00:13:58,850 --> 00:14:02,270
offer the capacity to audience and OMS

324
00:14:02,270 --> 00:14:05,000
just to pick up that testing environment

325
00:14:05,000 --> 00:14:07,550
deploy it in in-house in their own

326
00:14:07,550 --> 00:14:10,820
infrastructures and being able to run

327
00:14:10,820 --> 00:14:13,340
their own tests and even submit their

328
00:14:13,340 --> 00:14:17,090
results so we we know that for upcoming

329
00:14:17,090 --> 00:14:19,550
platforms so there is a lot of NDA's

330
00:14:19,550 --> 00:14:22,850
from chip vendors on whatever's and we

331
00:14:22,850 --> 00:14:25,220
cannot go against that but we want them

332
00:14:25,220 --> 00:14:28,610
to be able to test Linux boot on top of

333
00:14:28,610 --> 00:14:31,010
this new generation of platforms and

334
00:14:31,010 --> 00:14:34,280
provide feedback to the community and if

335
00:14:34,280 --> 00:14:37,220
an end-user ends up to purchase this

336
00:14:37,220 --> 00:14:39,560
product it will be able to know straight

337
00:14:39,560 --> 00:14:41,330
from one if the product has been

338
00:14:41,330 --> 00:14:42,830
officially tested on that so that's

339
00:14:42,830 --> 00:14:45,890
that's part of the goal and we are going

340
00:14:45,890 --> 00:14:48,950
to put in place a dashboard to check

341
00:14:48,950 --> 00:14:52,130
what has been tested on that so the Web

342
00:14:52,130 --> 00:14:55,460
API so is something which is pretty

343
00:14:55,460 --> 00:14:57,290
simple and so right now it does provide

344
00:14:57,290 --> 00:14:59,360
job controls so you can launch a job you

345
00:14:59,360 --> 00:15:01,070
can feel it you can list it you can have

346
00:15:01,070 --> 00:15:03,530
a look to the log files so when is key

347
00:15:03,530 --> 00:15:06,560
is if you want to contribute you have to

348
00:15:06,560 --> 00:15:08,420
know go or you have to learn go or

349
00:15:08,420 --> 00:15:12,800
accept the idea to use go that's that's

350
00:15:12,800 --> 00:15:14,570
a trendy language so I was not knowing

351
00:15:14,570 --> 00:15:16,820
knowing go before starting that project

352
00:15:16,820 --> 00:15:19,040
so the guys from Google told me if you

353
00:15:19,040 --> 00:15:20,420
wants to work on that stuff you have to

354
00:15:20,420 --> 00:15:23,810
work on go so let's do go I honestly do

355
00:15:23,810 --> 00:15:25,640
not care about the language selection as

356
00:15:25,640 --> 00:15:26,160
long as the

357
00:15:26,160 --> 00:15:28,230
is a high-level language it could have

358
00:15:28,230 --> 00:15:30,870
been go patent or any anything gone so

359
00:15:30,870 --> 00:15:33,209
that that that is doing the jobs of

360
00:15:33,209 --> 00:15:36,089
which is key so right now everything

361
00:15:36,089 --> 00:15:39,810
which is on this slide is available so

362
00:15:39,810 --> 00:15:41,970
the controller is also available so we

363
00:15:41,970 --> 00:15:43,829
can't reset beiongs we can store job

364
00:15:43,829 --> 00:15:46,829
status and and you can launch jobs

365
00:15:46,829 --> 00:15:51,420
without without any issue the the

366
00:15:51,420 --> 00:15:54,839
controller is is relying on on stram so

367
00:15:54,839 --> 00:15:56,490
that's something which was important to

368
00:15:56,490 --> 00:16:01,470
us which was to save run time so most of

369
00:16:01,470 --> 00:16:04,019
the jobs are run in memory so if your

370
00:16:04,019 --> 00:16:06,389
job doesn't require more than 40 gig of

371
00:16:06,389 --> 00:16:09,120
storage space so we allocate that stuff

372
00:16:09,120 --> 00:16:12,149
in memory and and the job is fully run

373
00:16:12,149 --> 00:16:14,310
in memory so we do not care about saving

374
00:16:14,310 --> 00:16:16,649
the results so if you wants to save the

375
00:16:16,649 --> 00:16:18,899
results of your executions you have to

376
00:16:18,899 --> 00:16:21,720
take care about that things and run a

377
00:16:21,720 --> 00:16:23,790
copy command and the end of the job so

378
00:16:23,790 --> 00:16:27,089
that's the that's the key things all of

379
00:16:27,089 --> 00:16:29,310
our V arms which are used within the

380
00:16:29,310 --> 00:16:30,660
infrastructure have access to the

381
00:16:30,660 --> 00:16:33,810
Internet and we have a local proxy cash

382
00:16:33,810 --> 00:16:37,199
for package for the distribution so

383
00:16:37,199 --> 00:16:39,509
either you go to the internet and you

384
00:16:39,509 --> 00:16:41,100
upload the latest versions because you

385
00:16:41,100 --> 00:16:42,779
want to test with latest versions of

386
00:16:42,779 --> 00:16:46,410
some packages or you wants to rebuild

387
00:16:46,410 --> 00:16:48,149
something that you know and you can use

388
00:16:48,149 --> 00:16:50,579
on a proxy cache that's the that's new

389
00:16:50,579 --> 00:16:54,630
idea so we set up the remote access to

390
00:16:54,630 --> 00:16:57,060
the VM to this room which we thought

391
00:16:57,060 --> 00:16:59,759
that the only stage would be easy and it

392
00:16:59,759 --> 00:17:01,350
ended up to be a very complex things

393
00:17:01,350 --> 00:17:03,420
because we had some port forwarding and

394
00:17:03,420 --> 00:17:05,789
a lot of firewalls rumors which were

395
00:17:05,789 --> 00:17:07,709
much more complicated than we were

396
00:17:07,709 --> 00:17:10,199
expecting and then we can initiate the

397
00:17:10,199 --> 00:17:14,099
job execution so the builder has two

398
00:17:14,099 --> 00:17:17,609
main goals one is either to build a

399
00:17:17,609 --> 00:17:21,510
Linux distro kernel for a Linux good

400
00:17:21,510 --> 00:17:24,419
support and for specific hardware

401
00:17:24,419 --> 00:17:26,130
support so just to give you an example

402
00:17:26,130 --> 00:17:30,539
there is a specific TTY for the cell

403
00:17:30,539 --> 00:17:33,710
your concern on all CP nodes which is a

404
00:17:33,710 --> 00:17:37,289
salon for don't ask me why so zero is

405
00:17:37,289 --> 00:17:39,240
not is not rooted so you have to

406
00:17:39,240 --> 00:17:44,190
four and zero zero is a zero SDLP ni + 4

407
00:17:44,190 --> 00:17:46,470
is the salient so the one which is

408
00:17:46,470 --> 00:17:49,289
useful for a bias Lapras is mostly the

409
00:17:49,289 --> 00:17:53,039
rio-são not the IPMI one because most of

410
00:17:53,039 --> 00:17:54,840
the time you are tuning the NPA and

411
00:17:54,840 --> 00:17:57,270
that's the that's the issue so we need

412
00:17:57,270 --> 00:17:59,730
to add that the channel and you can use

413
00:17:59,730 --> 00:18:02,610
the Builder to just to rebuild a counter

414
00:18:02,610 --> 00:18:06,659
for your distro but the thing else we we

415
00:18:06,659 --> 00:18:08,730
run an initial implementation based on

416
00:18:08,730 --> 00:18:13,140
Tran odds-on works so we rely to run

417
00:18:13,140 --> 00:18:16,950
free on our switched on th ground so we

418
00:18:16,950 --> 00:18:20,730
use the scripts which are there so run

419
00:18:20,730 --> 00:18:24,630
is nothing but the thing is the last

420
00:18:24,630 --> 00:18:26,370
sentence I think so that that's that

421
00:18:26,370 --> 00:18:30,270
stuff is using make fine so who is more

422
00:18:30,270 --> 00:18:33,360
than 40 in that room or and we

423
00:18:33,360 --> 00:18:37,740
owned all run you should raise your hand

424
00:18:37,740 --> 00:18:47,480
so you are more than 40 so the thing is

425
00:18:47,480 --> 00:18:50,399
the makefile works properly but there

426
00:18:50,399 --> 00:18:51,899
are in somewhere little bit complex

427
00:18:51,899 --> 00:18:55,080
let's let's say that that that would

428
00:18:55,080 --> 00:18:57,659
poach so I don't want to get run upset

429
00:18:57,659 --> 00:19:01,409
about his work so that's the thing and a

430
00:19:01,409 --> 00:19:02,909
lot of people are complaining about the

431
00:19:02,909 --> 00:19:05,370
fact that they are not that easy to

432
00:19:05,370 --> 00:19:08,669
understand or maintain I honestly like

433
00:19:08,669 --> 00:19:11,429
them but I'm more than 40 so I grew up

434
00:19:11,429 --> 00:19:15,720
with my voyage so that's the thing and

435
00:19:15,720 --> 00:19:18,390
and that's that's why we're thinking

436
00:19:18,390 --> 00:19:23,279
about either improving that or changing

437
00:19:23,279 --> 00:19:24,990
the way we are building but right now

438
00:19:24,990 --> 00:19:26,760
it's working like a Tron you can build

439
00:19:26,760 --> 00:19:28,860
everything from scratch in less than 10

440
00:19:28,860 --> 00:19:32,520
minutes on that infrastructures so which

441
00:19:32,520 --> 00:19:34,320
is which is pretty good even even

442
00:19:34,320 --> 00:19:37,289
including the kernel build so that's so

443
00:19:37,289 --> 00:19:39,000
that's a flat Beyond and that's good

444
00:19:39,000 --> 00:19:43,070
enough for CI infrastructure so we are

445
00:19:43,070 --> 00:19:44,220
userspace

446
00:19:44,220 --> 00:19:47,429
agnostic so we run so we build there and

447
00:19:47,429 --> 00:19:51,480
well being able to build also heat so

448
00:19:51,480 --> 00:19:53,049
just a quick feedback

449
00:19:53,049 --> 00:19:56,110
bird is a Linux kernel plus some user

450
00:19:56,110 --> 00:19:59,470
space environment which is providing and

451
00:19:59,470 --> 00:20:02,769
user basic commands for the film where

452
00:20:02,769 --> 00:20:05,289
so there is a there is one which is

453
00:20:05,289 --> 00:20:08,110
corner it's based on you root and this

454
00:20:08,110 --> 00:20:10,330
is with an Ingo and there is one which

455
00:20:10,330 --> 00:20:13,659
is called hate it's based on C library

456
00:20:13,659 --> 00:20:17,429
and the buzzy box if I'm not wrong

457
00:20:17,429 --> 00:20:22,869
didn't get upset so I'm right and both

458
00:20:22,869 --> 00:20:26,739
of them are tested and supporting within

459
00:20:26,739 --> 00:20:28,659
the CI infrastructures and we are able

460
00:20:28,659 --> 00:20:32,309
to validate that it works properly

461
00:20:32,440 --> 00:20:34,989
so the node brick validation is probably

462
00:20:34,989 --> 00:20:37,210
the most interesting one or at least for

463
00:20:37,210 --> 00:20:40,239
us so because up to now the currency I

464
00:20:40,239 --> 00:20:42,580
within the github is just validating

465
00:20:42,580 --> 00:20:44,470
that we can properly confine a film

466
00:20:44,470 --> 00:20:46,629
where an image so and we get a few more

467
00:20:46,629 --> 00:20:48,850
image we are super happy about that and

468
00:20:48,850 --> 00:20:51,039
and that's the this is where the

469
00:20:51,039 --> 00:20:52,840
engineers is telling me it works and

470
00:20:52,840 --> 00:20:55,539
this is where I told him no you have to

471
00:20:55,539 --> 00:20:58,299
test it and and he's answering me

472
00:20:58,299 --> 00:21:01,619
it does compile this is go so it works

473
00:21:01,619 --> 00:21:05,499
and and always trusting things that I

474
00:21:05,499 --> 00:21:07,480
can see working so that's that's really

475
00:21:07,480 --> 00:21:10,899
key so the first step is to launch the

476
00:21:10,899 --> 00:21:14,200
image for qmu when we can but the last

477
00:21:14,200 --> 00:21:18,039
step is really to use real hardware so

478
00:21:18,039 --> 00:21:20,080
we set up this system environment for

479
00:21:20,080 --> 00:21:21,820
the winter unknown so just to give you a

480
00:21:21,820 --> 00:21:23,440
quick background a Winterfell is just a

481
00:21:23,440 --> 00:21:27,059
basic two cpu-z only one v2

482
00:21:27,059 --> 00:21:30,639
infrastructure it doesn't have any BMC

483
00:21:30,639 --> 00:21:32,679
support so the BMC features are

484
00:21:32,679 --> 00:21:35,669
supported through the intern in II and

485
00:21:35,669 --> 00:21:40,149
we we we scanned the CI infrastructure

486
00:21:40,149 --> 00:21:42,429
through a deadly program 100 Pro

487
00:21:42,429 --> 00:21:45,519
flashing we know I know that stuff cost

488
00:21:45,519 --> 00:21:47,499
money but it was readily available on

489
00:21:47,499 --> 00:21:50,139
the market and we we can upload as many

490
00:21:50,139 --> 00:21:51,940
image as we want so that's pretty

491
00:21:51,940 --> 00:21:54,369
variable and we connect the emulator to

492
00:21:54,369 --> 00:21:57,159
the speed to the SPI interface from the

493
00:21:57,159 --> 00:21:58,960
wind often machine so we had to run some

494
00:21:58,960 --> 00:22:02,019
hardware hacks because even if this is

495
00:22:02,019 --> 00:22:03,759
an open hardware platform there is no

496
00:22:03,759 --> 00:22:06,290
spy heater on this machine

497
00:22:06,290 --> 00:22:11,090
so we removed the flash socket and we

498
00:22:11,090 --> 00:22:14,750
sold out down some cables in place of

499
00:22:14,750 --> 00:22:17,690
the flash so cut so I bet it works and

500
00:22:17,690 --> 00:22:20,360
then we got the console which is sent

501
00:22:20,360 --> 00:22:23,330
back to a controller and we have a USB

502
00:22:23,330 --> 00:22:25,850
switch a lot of people are asking me why

503
00:22:25,850 --> 00:22:28,220
do we have this USB switch that's

504
00:22:28,220 --> 00:22:30,260
because the goal of the C is to validate

505
00:22:30,260 --> 00:22:32,930
that everything works and when I mean

506
00:22:32,930 --> 00:22:34,910
everything we must be able to boot on

507
00:22:34,910 --> 00:22:37,790
USB it could looks like crazy but we

508
00:22:37,790 --> 00:22:39,500
still have some customers who are boring

509
00:22:39,500 --> 00:22:41,480
servers on USB especially if you are an

510
00:22:41,480 --> 00:22:43,880
SMB company so you don't have that many

511
00:22:43,880 --> 00:22:47,360
servers than IPO scanners you just run

512
00:22:47,360 --> 00:22:50,600
20 servers and you don't deploy complex

513
00:22:50,600 --> 00:22:53,870
infrastructures just for booting and you

514
00:22:53,870 --> 00:22:56,420
rely on your USB stick so well testing

515
00:22:56,420 --> 00:22:58,310
that we can boot on USB we can do it on

516
00:22:58,310 --> 00:23:02,360
a 345 SFP+ which is a Mellanox card with

517
00:23:02,360 --> 00:23:04,250
I pick C which is something which really

518
00:23:04,250 --> 00:23:07,520
sucks and and and that's why I really

519
00:23:07,520 --> 00:23:10,400
enjoy Andre works regarding the the boot

520
00:23:10,400 --> 00:23:13,670
nod and we are also testing that we can

521
00:23:13,670 --> 00:23:16,190
boot an nvme just to give you a feedback

522
00:23:16,190 --> 00:23:18,350
and this is where I like and I love a

523
00:23:18,350 --> 00:23:20,960
Linux boot so winter found stock

524
00:23:20,960 --> 00:23:25,850
firmware image is totally incapable of

525
00:23:25,850 --> 00:23:28,220
wedding with nvm advice so it doesn't

526
00:23:28,220 --> 00:23:30,770
know how to boot from nvme so with Linux

527
00:23:30,770 --> 00:23:33,830
boot we can have the nvme driver fitted

528
00:23:33,830 --> 00:23:35,990
within the Linux boot kernel and we can

529
00:23:35,990 --> 00:23:38,120
care exact on you canon which is sitting

530
00:23:38,120 --> 00:23:41,450
on nvm advice and this is really giving

531
00:23:41,450 --> 00:23:43,220
new opportunities and new market access

532
00:23:43,220 --> 00:23:45,290
to the Windows Phone mushrooms so

533
00:23:45,290 --> 00:23:48,200
especially for local VMs so which are

534
00:23:48,200 --> 00:23:50,270
looking for fast storage local flash

535
00:23:50,270 --> 00:23:52,520
storage so we do have customers also

536
00:23:52,520 --> 00:23:54,640
which deployed that with the

537
00:23:54,640 --> 00:23:57,140
hyper-converged system configuration

538
00:23:57,140 --> 00:23:59,510
under Altan stack so that that's that's

539
00:23:59,510 --> 00:24:01,760
really different way to use this machine

540
00:24:01,760 --> 00:24:06,650
so and roughly we call that a CI compute

541
00:24:06,650 --> 00:24:09,200
resources so the compute resources is

542
00:24:09,200 --> 00:24:11,420
the whole infrastructures so that's two

543
00:24:11,420 --> 00:24:13,730
servers one which is taking care about a

544
00:24:13,730 --> 00:24:16,580
test node and looking at sending the

545
00:24:16,580 --> 00:24:18,750
RIKEN and validate that the

546
00:24:18,750 --> 00:24:20,700
image is able to boot and while doing

547
00:24:20,700 --> 00:24:22,740
that for all of CP platforms so either

548
00:24:22,740 --> 00:24:26,490
winter fun or do porn or try go pass or

549
00:24:26,490 --> 00:24:32,940
all the upcoming hardware so why do we

550
00:24:32,940 --> 00:24:36,540
change the OS why was funny at the on

551
00:24:36,540 --> 00:24:38,310
stage is we thought that everything

552
00:24:38,310 --> 00:24:40,680
would be working Freddie one when we

553
00:24:40,680 --> 00:24:44,100
started Linux boot and after the guy

554
00:24:44,100 --> 00:24:46,500
exact but we quickly discover that some

555
00:24:46,500 --> 00:24:49,380
basic features are not that easy to set

556
00:24:49,380 --> 00:24:52,100
up with Linux boots like virtualization

557
00:24:52,100 --> 00:24:59,690
so the actualization requires some pei

558
00:24:59,690 --> 00:25:03,720
ufi viable setups which are extremely

559
00:25:03,720 --> 00:25:06,540
complex to do because they are not

560
00:25:06,540 --> 00:25:08,250
documented so that's the key things you

561
00:25:08,250 --> 00:25:09,750
need you really need to try to

562
00:25:09,750 --> 00:25:12,090
understand what's going on and matching

563
00:25:12,090 --> 00:25:15,600
the values image then we get some Numa

564
00:25:15,600 --> 00:25:18,420
features support which were quite

565
00:25:18,420 --> 00:25:21,180
complex the iom a move mmm you set up

566
00:25:21,180 --> 00:25:23,340
was not that easy and the only way to

567
00:25:23,340 --> 00:25:25,230
detect all of these minor issues was

568
00:25:25,230 --> 00:25:27,270
really to boot up the environments under

569
00:25:27,270 --> 00:25:29,790
the operating systems and try to deploy

570
00:25:29,790 --> 00:25:31,890
what our end users are going to deploy

571
00:25:31,890 --> 00:25:34,770
on top on that their instance something

572
00:25:34,770 --> 00:25:37,050
which doesn't work right now on these

573
00:25:37,050 --> 00:25:37,710
machines

574
00:25:37,710 --> 00:25:41,340
that's GPU support so each time we plug

575
00:25:41,340 --> 00:25:44,340
a GPU on a Linux good machine which is

576
00:25:44,340 --> 00:25:47,370
under CP nerds we're unable to start so

577
00:25:47,370 --> 00:25:49,170
that's that's work in progress

578
00:25:49,170 --> 00:25:50,790
it's not even work in progress that's a

579
00:25:50,790 --> 00:25:54,890
bug but we will try to fix that later on

580
00:25:54,890 --> 00:25:58,890
so why don't we able to support so we're

581
00:25:58,890 --> 00:26:00,930
able to support all of this thing so

582
00:26:00,930 --> 00:26:03,240
right now most of the operating systems

583
00:26:03,240 --> 00:26:04,740
that we are shipping with a machine are

584
00:26:04,740 --> 00:26:08,100
based on Ubuntu xenon so we get the net

585
00:26:08,100 --> 00:26:10,500
installers we get the starter system

586
00:26:10,500 --> 00:26:12,720
which works so the only one tricky

587
00:26:12,720 --> 00:26:14,910
things is really to select the science

588
00:26:14,910 --> 00:26:18,110
pot to the right to the right

589
00:26:18,110 --> 00:26:23,460
ttyl so when are we testing I do a stove

590
00:26:23,460 --> 00:26:25,560
incising spoke a lot about it but all of

591
00:26:25,560 --> 00:26:29,310
this is testing right now so that's the

592
00:26:29,310 --> 00:26:31,640
basic yeah CPU frequency

593
00:26:31,640 --> 00:26:33,380
management was also a little bit

594
00:26:33,380 --> 00:26:34,580
challenging I don't know I don't

595
00:26:34,580 --> 00:26:36,590
remember remember exactly what was the

596
00:26:36,590 --> 00:26:39,140
issue but all of this is currently

597
00:26:39,140 --> 00:26:41,750
tested under the CIE so we boot with the

598
00:26:41,750 --> 00:26:43,670
conan and we have some basic testing

599
00:26:43,670 --> 00:26:45,550
which says it works it doesn't works or

600
00:26:45,550 --> 00:26:48,770
we get the information that we are

601
00:26:48,770 --> 00:26:51,950
really looking for so we test also

602
00:26:51,950 --> 00:26:54,940
network adapters sa iove when it works

603
00:26:54,940 --> 00:26:58,550
because i just reported a couple of bugs

604
00:26:58,550 --> 00:27:00,590
with this iov and Mellanox console

605
00:27:00,590 --> 00:27:02,750
that's the that's the things and we are

606
00:27:02,750 --> 00:27:05,360
running performance benchmarks or like

607
00:27:05,360 --> 00:27:08,930
Linpack and pine stone so by Stone is

608
00:27:08,930 --> 00:27:10,490
really strange benchmark to me so either

609
00:27:10,490 --> 00:27:13,220
that's that's a real strange computation

610
00:27:13,220 --> 00:27:15,170
I don't know if you know that benchmark

611
00:27:15,170 --> 00:27:17,390
but if somebody can explain me later on

612
00:27:17,390 --> 00:27:19,730
but what it is really doing so on that's

613
00:27:19,730 --> 00:27:21,530
a very interesting

614
00:27:21,530 --> 00:27:24,200
so the impact zone is a very basic

615
00:27:24,200 --> 00:27:29,840
benchmark so this is just a solver which

616
00:27:29,840 --> 00:27:33,560
is inverting a matrix and take for

617
00:27:33,560 --> 00:27:34,910
benchmark are your benchmark and

618
00:27:34,910 --> 00:27:39,380
multiple VM so so scanning the public CI

619
00:27:39,380 --> 00:27:42,470
so we have all of this we still have a

620
00:27:42,470 --> 00:27:44,990
small company and one of our interns is

621
00:27:44,990 --> 00:27:47,360
is to see Linux boot being a success and

622
00:27:47,360 --> 00:27:50,000
we think that there is something which

623
00:27:50,000 --> 00:27:54,070
is slow down adoptions of free software

624
00:27:54,070 --> 00:27:57,650
like film where within corporations and

625
00:27:57,650 --> 00:27:58,760
this is what happened when I'm

626
00:27:58,760 --> 00:28:00,080
discussing with the end users

627
00:28:00,080 --> 00:28:03,080
potentially end users is is it really

628
00:28:03,080 --> 00:28:05,630
safe is it really renewable I know all

629
00:28:05,630 --> 00:28:07,400
of you will tell me yes it is

630
00:28:07,400 --> 00:28:09,980
but the only one way to prove that it is

631
00:28:09,980 --> 00:28:12,710
safe and viable is willing to go through

632
00:28:12,710 --> 00:28:14,750
an automated process publish reports

633
00:28:14,750 --> 00:28:17,450
training this has been tested and if it

634
00:28:17,450 --> 00:28:20,270
doesn't work you can report a bug and if

635
00:28:20,270 --> 00:28:22,250
we have the proper way to report the

636
00:28:22,250 --> 00:28:25,610
bugs then it looks professional and and

637
00:28:25,610 --> 00:28:27,470
people are far much more comfortable at

638
00:28:27,470 --> 00:28:30,440
adopting the technology so and and who

639
00:28:30,440 --> 00:28:33,260
as Linux boot successes vinicky same

640
00:28:33,260 --> 00:28:35,570
thing for open BMC an order of M website

641
00:28:35,570 --> 00:28:38,570
that's funny because we cannot rely on

642
00:28:38,570 --> 00:28:39,950
the firmware which is no longer

643
00:28:39,950 --> 00:28:41,669
supported by audience

644
00:28:41,669 --> 00:28:44,429
and which are not properly set up for

645
00:28:44,429 --> 00:28:47,339
general purpose usage and that's that's

646
00:28:47,339 --> 00:28:50,309
something which is which is important so

647
00:28:50,309 --> 00:28:52,469
the Cuban class of the public CI why do

648
00:28:52,469 --> 00:28:55,259
I speak about money so the the key

649
00:28:55,259 --> 00:28:58,289
things is that's a community project and

650
00:28:58,289 --> 00:29:01,349
even if it is a community project we we

651
00:29:01,349 --> 00:29:03,119
are facing one basic issue we speak

652
00:29:03,119 --> 00:29:05,669
about hardware hosting hardware scanning

653
00:29:05,669 --> 00:29:09,299
that stuff so my company is one sponsor

654
00:29:09,299 --> 00:29:12,269
that things but I don't think we can

655
00:29:12,269 --> 00:29:14,119
sustain the growth and the needs of

656
00:29:14,119 --> 00:29:17,639
everybody alone so that's that's really

657
00:29:17,639 --> 00:29:21,089
key and and right now this is what we

658
00:29:21,089 --> 00:29:23,700
have allocated to the project so twenty

659
00:29:23,700 --> 00:29:26,669
servers and and this is roughly the cost

660
00:29:26,669 --> 00:29:28,829
of the servers that's not that expensive

661
00:29:28,829 --> 00:29:30,539
there are recertify service second-hand

662
00:29:30,539 --> 00:29:35,009
machines so but if we had the checker

663
00:29:35,009 --> 00:29:37,409
pass if we had an airport if you had all

664
00:29:37,409 --> 00:29:39,209
the only infrastructures that we wants

665
00:29:39,209 --> 00:29:42,059
to have our even servers which are not

666
00:29:42,059 --> 00:29:44,940
from OCP that's that's going to become

667
00:29:44,940 --> 00:29:48,659
complex and while we are trying to do

668
00:29:48,659 --> 00:29:50,099
right now is to secure long-term

669
00:29:50,099 --> 00:29:50,940
Hosting's

670
00:29:50,940 --> 00:29:54,869
and we have an estimation of 10k u.s.

671
00:29:54,869 --> 00:29:57,149
dollars cows permanence so this is

672
00:29:57,149 --> 00:29:58,859
including the racks this is including

673
00:29:58,859 --> 00:30:00,839
the hosting facility and the people to

674
00:30:00,839 --> 00:30:03,209
manage the racks and all these things so

675
00:30:03,209 --> 00:30:05,190
as being part of the technical steering

676
00:30:05,190 --> 00:30:07,919
committee of the project we we are

677
00:30:07,919 --> 00:30:10,619
exploring those options just to find

678
00:30:10,619 --> 00:30:14,099
sponsorship and one of the intent is not

679
00:30:14,099 --> 00:30:16,889
that my company dried that project in

680
00:30:16,889 --> 00:30:19,049
the long term so we really wants to

681
00:30:19,049 --> 00:30:21,059
bring that project to the community and

682
00:30:21,059 --> 00:30:23,159
and this is going to be transferred

683
00:30:23,159 --> 00:30:25,950
either to the Linux foundations where

684
00:30:25,950 --> 00:30:28,709
Linux boot is currently hosted or to any

685
00:30:28,709 --> 00:30:31,229
other uh nonprofit foundations when we

686
00:30:31,229 --> 00:30:33,329
estimate that we have fixed most of the

687
00:30:33,329 --> 00:30:36,269
issues and one of the core issues is how

688
00:30:36,269 --> 00:30:39,809
can we run that CI short term midterm

689
00:30:39,809 --> 00:30:42,089
and long term so we need to fix the

690
00:30:42,089 --> 00:30:43,919
business model issues and find the right

691
00:30:43,919 --> 00:30:48,110
sponsorship model so

692
00:30:48,110 --> 00:30:51,320
as this is working progress what is key

693
00:30:51,320 --> 00:30:55,400
is to collaborate and as I told you

694
00:30:55,400 --> 00:30:57,380
everything is public so you can go on

695
00:30:57,380 --> 00:31:00,710
Linux but github and you can commit code

696
00:31:00,710 --> 00:31:03,429
and you can test the CI you can complain

697
00:31:03,429 --> 00:31:05,840
don't hesitate to complain we're French

698
00:31:05,840 --> 00:31:07,940
and French people are yelling like crazy

699
00:31:07,940 --> 00:31:10,340
so we are used to complain so that's

700
00:31:10,340 --> 00:31:12,830
that's that that's fine with the team

701
00:31:12,830 --> 00:31:17,660
currently and and we want you we want to

702
00:31:17,660 --> 00:31:19,910
see you testing your your commit and

703
00:31:19,910 --> 00:31:21,530
testing your code that's that's really

704
00:31:21,530 --> 00:31:24,470
key I I really love the idea of open

705
00:31:24,470 --> 00:31:27,530
source firmware and I'm more worried

706
00:31:27,530 --> 00:31:29,960
about the adoption rate and and my job

707
00:31:29,960 --> 00:31:31,460
is really to be sure that we are

708
00:31:31,460 --> 00:31:33,710
providing in the high quality software

709
00:31:33,710 --> 00:31:36,110
I'm pretty optimistic and regarding

710
00:31:36,110 --> 00:31:38,510
Linux boot so we shipped about 700

711
00:31:38,510 --> 00:31:42,080
servers running Linux boot right now so

712
00:31:42,080 --> 00:31:44,540
that's a good reasonable numbers and

713
00:31:44,540 --> 00:31:46,190
they I use for many different

714
00:31:46,190 --> 00:31:50,120
applications and stability is great so

715
00:31:50,120 --> 00:31:52,700
that's that's the key things and and the

716
00:31:52,700 --> 00:31:54,049
only feedback that we got from the

717
00:31:54,049 --> 00:31:55,610
customers is that they don't see any

718
00:31:55,610 --> 00:31:58,429
difference with the other VMware which

719
00:31:58,429 --> 00:32:01,580
is good and and they are super happy

720
00:32:01,580 --> 00:32:03,710
about the idea that we can hand hence

721
00:32:03,710 --> 00:32:07,070
our dwell support like the nvme trick I

722
00:32:07,070 --> 00:32:09,950
shared with you I'm done with the slide

723
00:32:09,950 --> 00:32:12,260
thank you to come to the conference and

724
00:32:12,260 --> 00:32:14,870
staying up to now I don't know if you

725
00:32:14,870 --> 00:32:17,500
have any question

726
00:32:22,590 --> 00:32:26,700
you earned that applause last law is

727
00:32:26,700 --> 00:32:30,390
always the hardest so we have some time

728
00:32:30,390 --> 00:32:33,810
for questions so does anybody have a

729
00:32:33,810 --> 00:32:39,330
question about the project now everybody

730
00:32:39,330 --> 00:32:42,870
wants to hold rink no 102

731
00:32:42,870 --> 00:32:49,200
3 oh I just have to wait so what's first

732
00:32:49,200 --> 00:32:52,890
I'm a lost treasure as your hand I think

733
00:32:52,890 --> 00:32:54,780
we don't remember who had a question so

734
00:32:54,780 --> 00:32:59,070
that's definitely I'm so did you look at

735
00:32:59,070 --> 00:33:03,210
existing solutions for this testing like

736
00:33:03,210 --> 00:33:05,970
the lava stuff I think the lead novel

737
00:33:05,970 --> 00:33:10,230
guys have and yeah and integrated with

738
00:33:10,230 --> 00:33:14,340
Jenkins or whatever we we didn't went up

739
00:33:14,340 --> 00:33:16,890
to up to the framework level so right

740
00:33:16,890 --> 00:33:20,550
now we really worked on the basic

741
00:33:20,550 --> 00:33:24,690
low-level features like how can we put a

742
00:33:24,690 --> 00:33:27,240
no subpoenas within our CI systems what

743
00:33:27,240 --> 00:33:29,430
what are the other requirements what do

744
00:33:29,430 --> 00:33:31,050
we need to change on the on the hardware

745
00:33:31,050 --> 00:33:33,600
platform and then what kind of

746
00:33:33,600 --> 00:33:35,130
infrastructure do we need to build

747
00:33:35,130 --> 00:33:37,200
everything so that's why we set up the

748
00:33:37,200 --> 00:33:40,280
VMs and and what we thought was that

749
00:33:40,280 --> 00:33:45,300
getting the frameworks is more something

750
00:33:45,300 --> 00:33:47,460
which is dependent on the community who

751
00:33:47,460 --> 00:33:49,350
is going to use that stuff so we're

752
00:33:49,350 --> 00:33:52,140
trying to find a way to to get the

753
00:33:52,140 --> 00:33:54,420
options that people can select the

754
00:33:54,420 --> 00:33:56,070
framework they want to use on top of the

755
00:33:56,070 --> 00:33:58,890
infrastructure so that's why when you

756
00:33:58,890 --> 00:34:00,360
are an end-user you can get access to

757
00:34:00,360 --> 00:34:02,400
the VM so that's the that's the key

758
00:34:02,400 --> 00:34:04,590
things that's slightly different from

759
00:34:04,590 --> 00:34:10,889
what you know within traditional CI they

760
00:34:10,889 --> 00:34:13,159
also want to pick on this topic actually

761
00:34:13,159 --> 00:34:16,168
so I will specify specifically the topic

762
00:34:16,168 --> 00:34:19,168
of the build part and you see that there

763
00:34:19,168 --> 00:34:20,730
are a lot of public Builders out there

764
00:34:20,730 --> 00:34:23,010
we could like Travis CI we can just use

765
00:34:23,010 --> 00:34:25,260
so basically if you give your users the

766
00:34:25,260 --> 00:34:27,690
the description file they built it for

767
00:34:27,690 --> 00:34:29,969
you know they can build on their own and

768
00:34:29,969 --> 00:34:32,219
you just need to manage basically the

769
00:34:32,219 --> 00:34:33,840
deployment of the artifacts afterwards

770
00:34:33,840 --> 00:34:35,850
to your test system so you don't have to

771
00:34:35,850 --> 00:34:36,219
implement

772
00:34:36,219 --> 00:34:38,949
and the infrastructure for these kind of

773
00:34:38,949 --> 00:34:40,690
things there are also things you can

774
00:34:40,690 --> 00:34:42,460
host on your own Travis is a public

775
00:34:42,460 --> 00:34:44,440
service but they're also on-premise

776
00:34:44,440 --> 00:34:46,119
solutions for this but just the idea is

777
00:34:46,119 --> 00:34:48,609
that you enable your your users to reuse

778
00:34:48,609 --> 00:34:53,859
it at least for the build yeah I am used

779
00:34:53,859 --> 00:34:56,949
to use Travis for another project so I

780
00:34:56,949 --> 00:34:59,260
am one of the big contributor of a

781
00:34:59,260 --> 00:35:00,700
project called free CAD I don't know if

782
00:35:00,700 --> 00:35:04,410
you know that tool so that's a catch-all

783
00:35:04,410 --> 00:35:07,960
one of the issue we face with Travis was

784
00:35:07,960 --> 00:35:10,359
the flexibility that we have regarding

785
00:35:10,359 --> 00:35:11,260
build time

786
00:35:11,260 --> 00:35:13,540
so free cat is a cation so if you wants

787
00:35:13,540 --> 00:35:16,119
to build a global troll it requires

788
00:35:16,119 --> 00:35:19,060
something like seven offs on Travis so

789
00:35:19,060 --> 00:35:21,220
which is extremely long and you have a

790
00:35:21,220 --> 00:35:23,170
time limit for your beyond which is

791
00:35:23,170 --> 00:35:26,320
about 30 minutes when it's free so when

792
00:35:26,320 --> 00:35:28,660
we face that issue we discussed a lot

793
00:35:28,660 --> 00:35:30,490
with Travis people and all these things

794
00:35:30,490 --> 00:35:32,830
this has been a playing I say okay on

795
00:35:32,830 --> 00:35:35,560
Linux but we need to be beyond kernels

796
00:35:35,560 --> 00:35:37,510
and all that stuff I don't want I didn't

797
00:35:37,510 --> 00:35:39,160
want you to restart the discussion with

798
00:35:39,160 --> 00:35:41,710
the Travis Falls or others and keeping

799
00:35:41,710 --> 00:35:44,430
our independence

800
00:35:51,910 --> 00:35:55,329
from all sorrow to build time from all

801
00:35:55,329 --> 00:35:58,000
source for you to create an in it Ram FS

802
00:35:58,000 --> 00:35:59,230
is about 20 seconds

803
00:35:59,230 --> 00:36:01,390
yeah that's net that's pretty fast 20

804
00:36:01,390 --> 00:36:03,309
seconds it includes rewriting all the

805
00:36:03,309 --> 00:36:06,190
programs there it's a 99 separate

806
00:36:06,190 --> 00:36:08,799
programs they're all rewritten in to go

807
00:36:08,799 --> 00:36:10,660
packages and then s compiled into one

808
00:36:10,660 --> 00:36:13,359
binary then it's 20 seconds so the thing

809
00:36:13,359 --> 00:36:15,339
about this kind of building is you know

810
00:36:15,339 --> 00:36:17,769
internally in our heads we think well we

811
00:36:17,769 --> 00:36:19,599
need some kind of heavy-duty great CI

812
00:36:19,599 --> 00:36:21,789
because it's a really big deal but the

813
00:36:21,789 --> 00:36:23,799
the building of the unit manifests in

814
00:36:23,799 --> 00:36:27,640
this model is essentially zero cost so

815
00:36:27,640 --> 00:36:29,769
and the other things we wanted to

816
00:36:29,769 --> 00:36:32,710
provide the freedom to the developers to

817
00:36:32,710 --> 00:36:35,490
bring their firmware image on top of the

818
00:36:35,490 --> 00:36:38,160
software infrastructure they wanted to

819
00:36:38,160 --> 00:36:43,299
design by themselves I'd ever been to

820
00:36:43,299 --> 00:36:45,849
Santos or whatever something which they

821
00:36:45,849 --> 00:36:48,849
can be fine so we basically have two

822
00:36:48,849 --> 00:36:50,890
contradicting statements now one was on

823
00:36:50,890 --> 00:36:52,539
your slides you were saying that in

824
00:36:52,539 --> 00:36:54,609
order to support different systems you

825
00:36:54,609 --> 00:36:57,099
need two more service system pro

826
00:36:57,099 --> 00:36:58,960
platform in order to do the build and

827
00:36:58,960 --> 00:37:00,730
now you're saying that the build is at

828
00:37:00,730 --> 00:37:03,910
zero cost yeah that's the software

829
00:37:03,910 --> 00:37:05,829
beyond so you need two servers for

830
00:37:05,829 --> 00:37:09,309
testing on real hardware so there is two

831
00:37:09,309 --> 00:37:11,019
step within the CI so building the

832
00:37:11,019 --> 00:37:13,240
software image the the film where and

833
00:37:13,240 --> 00:37:15,400
when you get that film where image then

834
00:37:15,400 --> 00:37:17,829
we are loading that on real hardware we

835
00:37:17,829 --> 00:37:19,869
turn on the ad where and we test if the

836
00:37:19,869 --> 00:37:22,599
go compiler has made a good work so if

837
00:37:22,599 --> 00:37:25,349
you can boot up the machine and

838
00:37:25,349 --> 00:37:27,579
understand it was just about like you

839
00:37:27,579 --> 00:37:29,799
could think about splitting the built

840
00:37:29,799 --> 00:37:32,650
from from you're actually testing CI and

841
00:37:32,650 --> 00:37:34,599
you know my suggestion would have been

842
00:37:34,599 --> 00:37:36,910
OBS I don't know how many you know like

843
00:37:36,910 --> 00:37:39,009
build time exactly are the packages I've

844
00:37:39,009 --> 00:37:41,140
been how many combinations that could be

845
00:37:41,140 --> 00:37:43,150
to just have something that gives you

846
00:37:43,150 --> 00:37:44,799
the binary results that you can then

847
00:37:44,799 --> 00:37:46,599
once it's complete feed into your CI

848
00:37:46,599 --> 00:37:47,079
system

849
00:37:47,079 --> 00:37:50,170
yeah that's we we have that debating

850
00:37:50,170 --> 00:37:53,950
within the the community so which is do

851
00:37:53,950 --> 00:37:55,539
we use the controller or not to build up

852
00:37:55,539 --> 00:37:57,339
everything do we keep track of what has

853
00:37:57,339 --> 00:38:00,430
been previewed to accelerate things so

854
00:38:00,430 --> 00:38:02,589
right now this is a very basic

855
00:38:02,589 --> 00:38:04,810
implementation so each time a new job

856
00:38:04,810 --> 00:38:06,970
coming up we are recombining everything

857
00:38:06,970 --> 00:38:09,370
from scratch we know that it's not

858
00:38:09,370 --> 00:38:11,590
optimal but that's not that many

859
00:38:11,590 --> 00:38:13,330
developers on that project so that's the

860
00:38:13,330 --> 00:38:15,340
other thing so we we need more time to

861
00:38:15,340 --> 00:38:19,120
accelerate the developments and improve

862
00:38:19,120 --> 00:38:27,010
the features from the CI so you

863
00:38:27,010 --> 00:38:29,170
mentioned some hardware that you could

864
00:38:29,170 --> 00:38:31,330
also get access to the schematics I

865
00:38:31,330 --> 00:38:36,190
assume and Gerber files was that sorry

866
00:38:36,190 --> 00:38:38,740
so you mentioned some hardware that is

867
00:38:38,740 --> 00:38:40,330
also open source that has to do with the

868
00:38:40,330 --> 00:38:44,050
project yeah we could you guys we are

869
00:38:44,050 --> 00:38:47,740
part of the Open Compute Project so one

870
00:38:47,740 --> 00:38:48,970
of the goal of the Open Compute Project

871
00:38:48,970 --> 00:38:52,170
is to try to design open source hardware

872
00:38:52,170 --> 00:38:54,550
so that project has been launched in

873
00:38:54,550 --> 00:38:57,730
2011 or 2012 by Facebook and a couple of

874
00:38:57,730 --> 00:39:00,430
industry own and since the beginning a

875
00:39:00,430 --> 00:39:01,900
lot of people are complaining that this

876
00:39:01,900 --> 00:39:03,820
is not we all open hardware because it's

877
00:39:03,820 --> 00:39:05,980
lacking informations and technical

878
00:39:05,980 --> 00:39:09,640
informations that is true so I am really

879
00:39:09,640 --> 00:39:11,920
an open hardware guy so my team is

880
00:39:11,920 --> 00:39:14,410
designing on free software like I can

881
00:39:14,410 --> 00:39:17,410
and freaking and we everything that we

882
00:39:17,410 --> 00:39:19,630
do is open and we are using and we are

883
00:39:19,630 --> 00:39:22,300
building the tools that we need to do to

884
00:39:22,300 --> 00:39:24,930
design the artwork the thing you know

885
00:39:24,930 --> 00:39:28,240
it's always better to to to work with

886
00:39:28,240 --> 00:39:29,830
people who are trying to do something

887
00:39:29,830 --> 00:39:33,310
instead of ignoring them and and just

888
00:39:33,310 --> 00:39:35,320
try to do something else on a team so

889
00:39:35,320 --> 00:39:37,120
that's that's the thing so that's why we

890
00:39:37,120 --> 00:39:38,770
entered the Open Compute Project and we

891
00:39:38,770 --> 00:39:41,080
are quite happy about that and and the

892
00:39:41,080 --> 00:39:43,030
direction that the project is currently

893
00:39:43,030 --> 00:39:45,400
taking is on is a positive one we can

894
00:39:45,400 --> 00:39:47,110
see more and more schematic coming up

895
00:39:47,110 --> 00:39:50,590
more unlock the other points so make

896
00:39:50,590 --> 00:39:53,590
your own fight isn't is about the eeprom

897
00:39:53,590 --> 00:39:56,050
content so because if you do not know

898
00:39:56,050 --> 00:39:58,210
how the chipset is set up somewhere

899
00:39:58,210 --> 00:40:00,940
that's you cannot reproduce the hardware

900
00:40:00,940 --> 00:40:03,550
so my ideal goal is that you get access

901
00:40:03,550 --> 00:40:06,670
to all the information to manufacture

902
00:40:06,670 --> 00:40:09,970
and all CP model bought from the files

903
00:40:09,970 --> 00:40:13,420
that are sticking on the LCP website you

904
00:40:13,420 --> 00:40:15,310
are still not able to do that because we

905
00:40:15,310 --> 00:40:16,600
are still lacking a few things

906
00:40:16,600 --> 00:40:21,280
but let's keep working to improve that

907
00:40:21,280 --> 00:40:23,800
so by the way there is a no CP summit in

908
00:40:23,800 --> 00:40:26,590
Amsterdam on October 1st on signals and

909
00:40:26,590 --> 00:40:30,760
we do have an open source firmware track

910
00:40:30,760 --> 00:40:34,920
during that event run is not there so

911
00:40:34,920 --> 00:40:39,250
it's version home before but feel free

912
00:40:39,250 --> 00:40:41,740
to join us and you can complain about

913
00:40:41,740 --> 00:40:43,750
the lack of technical information this

914
00:40:43,750 --> 00:40:45,430
is the place where you have to complain

915
00:40:45,430 --> 00:40:47,650
because the people who are managing most

916
00:40:47,650 --> 00:40:49,300
of the hardware project will be there

917
00:40:49,300 --> 00:40:51,550
and and this is doing this description

918
00:40:51,550 --> 00:40:53,890
we can improve things awesome thank you

919
00:40:53,890 --> 00:40:56,370
appreciate it

920
00:40:56,370 --> 00:41:01,660
any more questions doesn't seem like it

921
00:41:01,660 --> 00:41:04,390
so thank you very much thank you please

922
00:41:04,390 --> 00:41:08,370
give a big round of applause

923
00:41:10,090 --> 00:41:12,180
[Applause]

924
00:41:12,180 --> 00:41:19,058
[Music]

