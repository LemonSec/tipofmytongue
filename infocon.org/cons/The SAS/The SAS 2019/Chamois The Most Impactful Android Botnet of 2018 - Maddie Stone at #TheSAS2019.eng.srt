1
00:00:00,050 --> 00:00:08,940
[Music]

2
00:00:05,509 --> 00:00:11,280
hi as he said my name is Matty stone and

3
00:00:08,940 --> 00:00:13,739
this is Shinhwa and what I'm claiming to

4
00:00:11,280 --> 00:00:17,279
be androids most impactful botnet of

5
00:00:13,740 --> 00:00:20,009
2018 so basically all this says is

6
00:00:17,279 --> 00:00:21,810
currently I'm focused on Android apps

7
00:00:20,010 --> 00:00:23,939
but I basically like to break and

8
00:00:21,810 --> 00:00:27,710
understand how anything from chips to

9
00:00:23,939 --> 00:00:31,009
applications works so what is Shinhwa

10
00:00:27,710 --> 00:00:33,899
it's a sophisticated Android botnet that

11
00:00:31,009 --> 00:00:37,800
backdoors Android applications in order

12
00:00:33,899 --> 00:00:43,770
to do ad fraud SMS fraud an installation

13
00:00:37,800 --> 00:00:45,300
fraud blitz level set first and just

14
00:00:43,770 --> 00:00:48,090
make sure we all understand the Android

15
00:00:45,300 --> 00:00:50,879
application ecosystem so there's a lot

16
00:00:48,090 --> 00:00:53,610
of different ways that users can get

17
00:00:50,879 --> 00:00:55,199
Android apps on their devices so in

18
00:00:53,610 --> 00:00:56,610
North America and Western Europe that

19
00:00:55,199 --> 00:00:59,789
tends to be through the Google Play

20
00:00:56,610 --> 00:01:01,680
Store but outside of those areas users

21
00:00:59,789 --> 00:01:04,049
generally sideload applications which

22
00:01:01,680 --> 00:01:06,810
can be you know downloading from

23
00:01:04,049 --> 00:01:09,780
websites peer-to-peer third-party app

24
00:01:06,810 --> 00:01:11,090
stores and then of course every device

25
00:01:09,780 --> 00:01:13,439
comes with some applications

26
00:01:11,090 --> 00:01:16,229
pre-installed in each set of those

27
00:01:13,439 --> 00:01:18,689
applications is going to differ based on

28
00:01:16,229 --> 00:01:20,429
the device you have there's also a

29
00:01:18,689 --> 00:01:21,899
couple of different acronyms that I'm

30
00:01:20,430 --> 00:01:24,780
going to be using throughout this

31
00:01:21,900 --> 00:01:27,540
presentation the first PHA or

32
00:01:24,780 --> 00:01:29,640
potentially harmful application that's

33
00:01:27,540 --> 00:01:31,860
basically our Google Android term for

34
00:01:29,640 --> 00:01:34,650
malware or something that could be

35
00:01:31,860 --> 00:01:37,049
harmful to a user and thus when

36
00:01:34,650 --> 00:01:40,200
something meets the bar of PHA that's

37
00:01:37,049 --> 00:01:44,670
when we use Google Play protect or GPP

38
00:01:40,200 --> 00:01:46,500
the built-in security functionality and

39
00:01:44,670 --> 00:01:49,200
that's in all its certified Android

40
00:01:46,500 --> 00:01:51,570
devices to protect users and lastly

41
00:01:49,200 --> 00:01:53,610
sometimes I call Android apps apks

42
00:01:51,570 --> 00:01:57,779
because that is the file format that

43
00:01:53,610 --> 00:02:00,990
Android apps are in but let's get an

44
00:01:57,780 --> 00:02:05,430
overview of what is chinois so first off

45
00:02:00,990 --> 00:02:07,199
it's pH a category that we use in Google

46
00:02:05,430 --> 00:02:09,569
Play protect and what we classify it as

47
00:02:07,200 --> 00:02:12,450
is a backdoor and the reasoning is

48
00:02:09,568 --> 00:02:14,549
because it can be remotely commanded and

49
00:02:12,450 --> 00:02:17,069
rolled to do different malicious

50
00:02:14,550 --> 00:02:18,629
behaviors and those malicious behaviors

51
00:02:17,069 --> 00:02:20,579
are a couple of different things but can

52
00:02:18,629 --> 00:02:22,230
generally be get categorized into three

53
00:02:20,580 --> 00:02:25,830
different types of fraud

54
00:02:22,230 --> 00:02:27,840
the first is premium SMS fraud so it's

55
00:02:25,830 --> 00:02:29,670
not as common again in North America or

56
00:02:27,840 --> 00:02:32,010
Western Europe but in a lot of areas

57
00:02:29,670 --> 00:02:35,579
around the globe people pay for services

58
00:02:32,010 --> 00:02:36,959
in items by sending a text message to a

59
00:02:35,580 --> 00:02:39,989
shortcode and then it immediately

60
00:02:36,959 --> 00:02:42,269
charges their bill in the Western world

61
00:02:39,989 --> 00:02:44,549
this might be it's the same as when

62
00:02:42,269 --> 00:02:47,370
they're like text five five five five

63
00:02:44,549 --> 00:02:50,220
and you will donate five dollars to

64
00:02:47,370 --> 00:02:51,390
hurricane relief so it becomes fraud

65
00:02:50,220 --> 00:02:54,120
when the user doesn't know this is

66
00:02:51,390 --> 00:02:55,828
happening or consent to it but because

67
00:02:54,120 --> 00:02:57,810
it's a backdoor although these are the

68
00:02:55,829 --> 00:03:00,239
three types of payloads we've generally

69
00:02:57,810 --> 00:03:02,190
seen from Shinhwa they could at any time

70
00:03:00,239 --> 00:03:03,930
develop a new type of malicious payload

71
00:03:02,190 --> 00:03:07,049
and distribute it to every device that

72
00:03:03,930 --> 00:03:09,150
is running Shinhwa but taking a step

73
00:03:07,049 --> 00:03:11,459
back the way that it was distributed is

74
00:03:09,150 --> 00:03:14,760
it's an SDK that third-party app

75
00:03:11,459 --> 00:03:16,650
developers unknowingly include in their

76
00:03:14,760 --> 00:03:19,048
applications thinking that it's

77
00:03:16,650 --> 00:03:22,170
providing some feature or advertising

78
00:03:19,049 --> 00:03:24,810
library or monetization SDK when it's

79
00:03:22,170 --> 00:03:26,720
actually a backdoor for a botnet so

80
00:03:24,810 --> 00:03:29,040
we're gonna cover four distinct variants

81
00:03:26,720 --> 00:03:31,079
some of those boundaries can be a little

82
00:03:29,040 --> 00:03:33,750
fuzzy sometimes there can be counted as

83
00:03:31,079 --> 00:03:35,459
more of them but in general based on the

84
00:03:33,750 --> 00:03:37,859
functionality coming from the actor

85
00:03:35,459 --> 00:03:40,049
behind Shinhwa I classify them as four

86
00:03:37,859 --> 00:03:43,799
and each one of those contains four to

87
00:03:40,049 --> 00:03:46,170
six different stages let's set the stage

88
00:03:43,799 --> 00:03:48,630
for how did Shinhwa get here what's the

89
00:03:46,170 --> 00:03:50,880
background and things like that so as I

90
00:03:48,630 --> 00:03:54,150
said Jamal was first detected in

91
00:03:50,880 --> 00:03:56,489
mid-2016 that was variant 1 and at that

92
00:03:54,150 --> 00:04:00,239
time chinoise was perma primarily

93
00:03:56,489 --> 00:04:03,000
distributed through Google Play then in

94
00:04:00,239 --> 00:04:05,310
November 2016 a few months later we saw

95
00:04:03,000 --> 00:04:08,160
variant 2 the distinction between

96
00:04:05,310 --> 00:04:11,069
variant 1 and variant 2 was variant 1

97
00:04:08,160 --> 00:04:13,739
only did ad fraud and then variant 2

98
00:04:11,069 --> 00:04:16,978
added this new premium SMS fraud payload

99
00:04:13,739 --> 00:04:21,180
to the botnet variant 2 also was on

100
00:04:16,978 --> 00:04:23,880
Google Play last then in March 2017

101
00:04:21,180 --> 00:04:24,910
Google posted a blog post saying hey we

102
00:04:23,880 --> 00:04:27,400
eradicated

103
00:04:24,910 --> 00:04:29,800
while from google play but here i am

104
00:04:27,400 --> 00:04:31,599
standing in front of you in April 2019

105
00:04:29,800 --> 00:04:34,320
two years later so what's happened since

106
00:04:31,600 --> 00:04:37,560
that so the claim that we eradicated

107
00:04:34,320 --> 00:04:40,659
Shum well from Google Play still stands

108
00:04:37,560 --> 00:04:43,450
come March 2017 Shamu it quiet

109
00:04:40,660 --> 00:04:45,850
there was no sea to traffic no testing

110
00:04:43,450 --> 00:04:49,240
infrastructures traffic no new samples

111
00:04:45,850 --> 00:04:51,400
or anything so you know you get

112
00:04:49,240 --> 00:04:53,800
comfortable you keep looking but come

113
00:04:51,400 --> 00:04:57,150
November 2017 new samples started

114
00:04:53,800 --> 00:04:59,410
popping up I am a team member each

115
00:04:57,150 --> 00:05:02,859
independently identified Shinhwa had

116
00:04:59,410 --> 00:05:05,800
come back in January 2018 so I was

117
00:05:02,860 --> 00:05:10,120
working one of my jobs is that my team

118
00:05:05,800 --> 00:05:12,130
and I we review all of our OEM images

119
00:05:10,120 --> 00:05:15,310
prior to launch for security issues

120
00:05:12,130 --> 00:05:18,760
within them and an app have been surface

121
00:05:15,310 --> 00:05:22,390
for human review it was super obfuscated

122
00:05:18,760 --> 00:05:25,030
had no icon was named sales tracker and

123
00:05:22,390 --> 00:05:28,300
just had nothing that looked obvious in

124
00:05:25,030 --> 00:05:30,280
it so I started reversing at the same

125
00:05:28,300 --> 00:05:32,740
time one of my co-workers from the

126
00:05:30,280 --> 00:05:36,820
anti-abuse research team had started

127
00:05:32,740 --> 00:05:39,550
noticing really weird ad traffic coming

128
00:05:36,820 --> 00:05:41,890
in clearly suspicious but not identified

129
00:05:39,550 --> 00:05:44,500
as anything else we both continued

130
00:05:41,890 --> 00:05:46,780
hunting and were able to say whoa

131
00:05:44,500 --> 00:05:49,600
Shinhwa is back and it's way more

132
00:05:46,780 --> 00:05:52,210
sophisticated than before that was very

133
00:05:49,600 --> 00:05:55,240
ansari so variant 3 was much more

134
00:05:52,210 --> 00:05:58,210
sophisticated at did 2 more stages to

135
00:05:55,240 --> 00:05:59,830
the original Shinhwa and v2 but still

136
00:05:58,210 --> 00:06:02,469
tended to keep to the same types of

137
00:05:59,830 --> 00:06:05,919
payloads just more sophisticated in

138
00:06:02,470 --> 00:06:07,660
summer 2018 we had to be really honest

139
00:06:05,919 --> 00:06:10,030
and take a look at it and realize that

140
00:06:07,660 --> 00:06:12,610
us working independently was not

141
00:06:10,030 --> 00:06:16,359
sufficient to tame some wall it had come

142
00:06:12,610 --> 00:06:18,910
back as a smart sophisticated deliberate

143
00:06:16,360 --> 00:06:20,290
and very effective threat so we joined

144
00:06:18,910 --> 00:06:22,600
together create a multi team

145
00:06:20,290 --> 00:06:25,150
investigation at the same time variant

146
00:06:22,600 --> 00:06:27,430
for popped up which removed much of the

147
00:06:25,150 --> 00:06:29,830
signals that we were signature but by

148
00:06:27,430 --> 00:06:32,169
December 2018 we were able to put it in

149
00:06:29,830 --> 00:06:35,289
a monitoring and maintenance mode saying

150
00:06:32,169 --> 00:06:36,729
that we have this controlled and four

151
00:06:35,289 --> 00:06:38,099
months later I can still say it's

152
00:06:36,729 --> 00:06:40,930
controlled

153
00:06:38,100 --> 00:06:43,509
but me is claiming that this is the most

154
00:06:40,930 --> 00:06:46,060
impactful botnet in Android and 2018 is

155
00:06:43,509 --> 00:06:48,460
a pretty bold claim so why did I say

156
00:06:46,060 --> 00:06:51,130
that one technical complexity which

157
00:06:48,460 --> 00:06:53,349
we'll get into all those fun details to

158
00:06:51,130 --> 00:06:55,150
in one that's really interesting is they

159
00:06:53,350 --> 00:06:56,530
used a lot of different multiple or they

160
00:06:55,150 --> 00:06:59,710
used a lot of different distribution

161
00:06:56,530 --> 00:07:02,500
techniques so one of the ways that we

162
00:06:59,710 --> 00:07:05,948
staunch flow of malware into different

163
00:07:02,500 --> 00:07:07,570
ecosystems is stem the supply just track

164
00:07:05,949 --> 00:07:09,580
it back to how is it getting there how

165
00:07:07,570 --> 00:07:12,610
is it spreading gem what it was smart

166
00:07:09,580 --> 00:07:14,469
and they distributed so that if you

167
00:07:12,610 --> 00:07:16,389
stemmed one of the supplies they had a

168
00:07:14,470 --> 00:07:21,820
lot of backups and a lot of different

169
00:07:16,389 --> 00:07:23,590
ways to spread so beyond that this is an

170
00:07:21,820 --> 00:07:25,690
engineering product that a team of

171
00:07:23,590 --> 00:07:28,539
engineers are building they have rapid

172
00:07:25,690 --> 00:07:30,430
and matured test release processes with

173
00:07:28,539 --> 00:07:32,620
testing infrastructures and the after

174
00:07:30,430 --> 00:07:34,000
behind them has funding has engineers on

175
00:07:32,620 --> 00:07:36,580
staff and a very sophisticated

176
00:07:34,000 --> 00:07:39,370
infrastructure to deploy their testing

177
00:07:36,580 --> 00:07:41,258
and releases and lastly they're using a

178
00:07:39,370 --> 00:07:43,690
lot of different types of ad fraud

179
00:07:41,259 --> 00:07:46,210
techniques and they're burying it across

180
00:07:43,690 --> 00:07:47,740
the ecosystem so that if one gets burned

181
00:07:46,210 --> 00:07:51,070
it does not take down the whole

182
00:07:47,740 --> 00:07:53,020
monetization of the botnet so let's get

183
00:07:51,070 --> 00:07:55,510
in the fun of stem this is the overview

184
00:07:53,020 --> 00:07:56,948
I've mentioned four different types of

185
00:07:55,510 --> 00:07:58,539
variants we're gonna focus on the

186
00:07:56,949 --> 00:07:59,229
current ones variant three invariant

187
00:07:58,539 --> 00:08:01,240
four because they're the most

188
00:07:59,229 --> 00:08:04,750
technically sophisticated and the most

189
00:08:01,240 --> 00:08:07,539
current but let's take a step back to

190
00:08:04,750 --> 00:08:09,400
understand this evolution so this is the

191
00:08:07,539 --> 00:08:13,360
sort of flow of the different stages

192
00:08:09,400 --> 00:08:15,250
from variants one and two back in 2016

193
00:08:13,360 --> 00:08:16,930
they were already this sophisticated if

194
00:08:15,250 --> 00:08:20,530
you think back to what Android security

195
00:08:16,930 --> 00:08:22,659
looked like in 2016 this is not you know

196
00:08:20,530 --> 00:08:26,169
looking for the low-hanging fruit they

197
00:08:22,659 --> 00:08:28,210
combined apks unpacked from a custom

198
00:08:26,169 --> 00:08:31,719
encryption and archive format different

199
00:08:28,210 --> 00:08:34,649
jars as well as using native code in

200
00:08:31,720 --> 00:08:37,630
order to do some of their behaviors and

201
00:08:34,649 --> 00:08:39,219
when they after that hiatus they came

202
00:08:37,630 --> 00:08:42,820
back four variants three and four and

203
00:08:39,219 --> 00:08:47,140
moved from a four stage botnet to a

204
00:08:42,820 --> 00:08:49,710
sixth stage effort so if we talk about

205
00:08:47,140 --> 00:08:52,620
this in terms of anti-malware

206
00:08:49,710 --> 00:08:55,320
we generally all see as AV companies as

207
00:08:52,620 --> 00:08:57,870
well as ourselves the apk is that first

208
00:08:55,320 --> 00:09:02,270
thing you see in what most signature and

209
00:08:57,870 --> 00:09:04,950
type of detections will use however in

210
00:09:02,270 --> 00:09:07,890
Shinhwa stage one has almost no

211
00:09:04,950 --> 00:09:11,040
functionality in it it just unpacks from

212
00:09:07,890 --> 00:09:13,410
itself Stage two and so every stage

213
00:09:11,040 --> 00:09:15,810
after stage one can sort of be grouped

214
00:09:13,410 --> 00:09:17,610
into these three categories the shumwald

215
00:09:15,810 --> 00:09:19,979
loader which includes super

216
00:09:17,610 --> 00:09:23,070
sophisticated anti analysis obfuscation

217
00:09:19,980 --> 00:09:25,500
techniques then the shamah framework

218
00:09:23,070 --> 00:09:27,930
which that's sort of the backdoor area

219
00:09:25,500 --> 00:09:30,870
of this it's able to be self updatable

220
00:09:27,930 --> 00:09:33,870
so that's where stage 4 comes in of it

221
00:09:30,870 --> 00:09:35,730
will call home to the botnets situ

222
00:09:33,870 --> 00:09:39,149
infrastructure for the framework and say

223
00:09:35,730 --> 00:09:43,140
hey does our framework need a update if

224
00:09:39,149 --> 00:09:45,270
so stage 5 is updated otherwise it will

225
00:09:43,140 --> 00:09:49,560
use the one that it can unpack from a

226
00:09:45,270 --> 00:09:51,480
special archive format that it has Stage

227
00:09:49,560 --> 00:09:54,060
five is been responsible for the

228
00:09:51,480 --> 00:09:56,610
different payloads we can see here that

229
00:09:54,060 --> 00:10:01,859
we break the payloads in stages 6 up to

230
00:09:56,610 --> 00:10:04,830
6a 6b and 6e 6b is what we consider the

231
00:10:01,860 --> 00:10:06,150
malicious payload there are more than 15

232
00:10:04,830 --> 00:10:08,070
different malicious payloads that we

233
00:10:06,150 --> 00:10:12,029
know of thus far and they're still being

234
00:10:08,070 --> 00:10:14,700
developed stage 6a and stages 6c exists

235
00:10:12,029 --> 00:10:17,900
to support 6b and doing malicious

236
00:10:14,700 --> 00:10:20,279
behavior so they know that you know

237
00:10:17,900 --> 00:10:21,870
while we may be able to do the malicious

238
00:10:20,279 --> 00:10:25,320
hey behavior in the jar

239
00:10:21,870 --> 00:10:27,690
we may need native code to support us to

240
00:10:25,320 --> 00:10:30,810
be able to do that so for example 6a

241
00:10:27,690 --> 00:10:32,100
will do J&I webview modification to

242
00:10:30,810 --> 00:10:36,000
support some of their add front

243
00:10:32,100 --> 00:10:38,220
behaviors so I talked a few things about

244
00:10:36,000 --> 00:10:41,370
the custom archive format that's where

245
00:10:38,220 --> 00:10:45,000
most stages 3 plus come from and are

246
00:10:41,370 --> 00:10:48,990
unpacked from by each stage previously

247
00:10:45,000 --> 00:10:51,240
so the custom archive format is the most

248
00:10:48,990 --> 00:10:55,829
stable aspect of trim wall all the way

249
00:10:51,240 --> 00:10:58,470
from variant 1 down to variant for and

250
00:10:55,829 --> 00:11:01,199
it's sort of similar to a zip if

251
00:10:58,470 --> 00:11:03,490
everything about a zip was changed so

252
00:11:01,200 --> 00:11:06,970
they created this custom file format

253
00:11:03,490 --> 00:11:08,889
that can have sort of like Inception

254
00:11:06,970 --> 00:11:11,769
more of the custom archive formats

255
00:11:08,889 --> 00:11:13,749
included but one of the really quite

256
00:11:11,769 --> 00:11:16,779
frankly smart engineering moves they

257
00:11:13,749 --> 00:11:18,220
made was that if you have a copy of the

258
00:11:16,779 --> 00:11:21,220
custom archive format

259
00:11:18,220 --> 00:11:24,819
you cannot unpack it unless you also

260
00:11:21,220 --> 00:11:28,089
have the apk that it belonged to and you

261
00:11:24,819 --> 00:11:30,910
also cannot unpack or figure out what

262
00:11:28,089 --> 00:11:33,009
stages three-plus were if you don't if

263
00:11:30,910 --> 00:11:36,009
you have the apk and you don't have the

264
00:11:33,009 --> 00:11:39,189
custom archive format so by doing this

265
00:11:36,009 --> 00:11:41,649
and that each different sample of

266
00:11:39,189 --> 00:11:45,219
chinois was independently generated it

267
00:11:41,649 --> 00:11:49,319
made it that much harder for detection

268
00:11:45,220 --> 00:11:49,319
and defenders to understand what's in it

269
00:11:50,129 --> 00:11:54,550
but one of the toughest aspects of

270
00:11:52,779 --> 00:11:57,220
chinois is this really sophisticated

271
00:11:54,550 --> 00:11:59,859
anti detection techniques and they do

272
00:11:57,220 --> 00:12:04,119
some sort of debugging or obfuscation at

273
00:11:59,860 --> 00:12:07,480
every single stage of so all six stages

274
00:12:04,119 --> 00:12:08,279
and variants three and four so stages

275
00:12:07,480 --> 00:12:12,519
one and two

276
00:12:08,279 --> 00:12:14,529
every samples strings class names file

277
00:12:12,519 --> 00:12:16,920
names everything is randomized and

278
00:12:14,529 --> 00:12:19,540
difference for different for each sample

279
00:12:16,920 --> 00:12:21,490
so there is not really much you can do

280
00:12:19,540 --> 00:12:24,209
in terms of sim signature in there

281
00:12:21,490 --> 00:12:26,799
because it's not like they used the same

282
00:12:24,209 --> 00:12:28,628
lengths of strings for the class names

283
00:12:26,799 --> 00:12:32,769
and package names they changed it at

284
00:12:28,629 --> 00:12:35,470
each time and then stage 3s purpose is

285
00:12:32,769 --> 00:12:38,829
to do anti debugging if we go back to

286
00:12:35,470 --> 00:12:41,619
that flow chart I showed you stage three

287
00:12:38,829 --> 00:12:44,559
was the last part of the ShamWow loader

288
00:12:41,619 --> 00:12:47,410
before the framework is loaded and so it

289
00:12:44,559 --> 00:12:49,899
will only complete if it is very

290
00:12:47,410 --> 00:12:54,069
confident that there it is not being

291
00:12:49,899 --> 00:12:56,350
analyzed debug or emulated so I talked

292
00:12:54,069 --> 00:12:58,089
about this at black hat and Virus

293
00:12:56,350 --> 00:12:59,709
Bulletin last year and unpacking the

294
00:12:58,089 --> 00:13:02,170
packed up packer so if you're looking

295
00:12:59,709 --> 00:13:04,089
for I have season a detailed walkthrough

296
00:13:02,170 --> 00:13:06,549
of how to unpack these types of things

297
00:13:04,089 --> 00:13:08,889
but basically what it comes down to is

298
00:13:06,549 --> 00:13:12,549
that this elf that made up stage three

299
00:13:08,889 --> 00:13:15,040
had in place decryption anti reverse

300
00:13:12,549 --> 00:13:16,449
engineering anti emulation which

301
00:13:15,040 --> 00:13:18,490
included 37 different

302
00:13:16,450 --> 00:13:20,290
system property checks checking of the

303
00:13:18,490 --> 00:13:22,389
system architecture by reading different

304
00:13:20,290 --> 00:13:23,949
system files on it as well as doing

305
00:13:22,389 --> 00:13:26,860
checks for the xposed framework or

306
00:13:23,950 --> 00:13:29,139
monkey and that's the only way they

307
00:13:26,860 --> 00:13:31,510
would continue so they were willing to

308
00:13:29,139 --> 00:13:34,209
not operate and load their payloads that

309
00:13:31,510 --> 00:13:37,019
they thought there was any chance that

310
00:13:34,209 --> 00:13:38,979
they were being analyzed

311
00:13:37,019 --> 00:13:42,850
so the payloads that they ultimately

312
00:13:38,980 --> 00:13:45,760
load it on the left yeah the left side

313
00:13:42,850 --> 00:13:47,920
on the left side of the screen they had

314
00:13:45,760 --> 00:13:50,529
what we consider benign payloads

315
00:13:47,920 --> 00:13:53,529
so one of the stories in the way that

316
00:13:50,529 --> 00:13:56,230
they tricked developers into including

317
00:13:53,529 --> 00:13:58,360
chinois in their applications was saying

318
00:13:56,230 --> 00:14:00,279
we provide you in mobile payment

319
00:13:58,360 --> 00:14:02,050
solution so they have these different

320
00:14:00,279 --> 00:14:04,240
payloads that support these different

321
00:14:02,050 --> 00:14:05,560
types of payload payments and that was

322
00:14:04,240 --> 00:14:09,040
one of the ways that they were able to

323
00:14:05,560 --> 00:14:12,760
sort of grow a reputation or you know

324
00:14:09,040 --> 00:14:15,550
have some credence to themselves as an

325
00:14:12,760 --> 00:14:17,310
organization but those mobile payment

326
00:14:15,550 --> 00:14:20,139
solution payloads never actually

327
00:14:17,310 --> 00:14:22,239
operated that often generally they

328
00:14:20,139 --> 00:14:24,640
supported all the malicious payloads

329
00:14:22,240 --> 00:14:26,560
which were add fraud and lots of

330
00:14:24,640 --> 00:14:30,300
different types of it the app installs

331
00:14:26,560 --> 00:14:32,739
traffic pumping and sending premium SMS

332
00:14:30,300 --> 00:14:35,140
so one of the most interesting parts

333
00:14:32,740 --> 00:14:37,660
that I think really showcases the

334
00:14:35,140 --> 00:14:39,850
forethought in the deliberateness if

335
00:14:37,660 --> 00:14:42,189
that's a word of the actors behind

336
00:14:39,850 --> 00:14:44,370
chinois is that when they decided to

337
00:14:42,190 --> 00:14:47,110
launch their premium SMS fraud payload

338
00:14:44,370 --> 00:14:49,120
they understood the Android platform in

339
00:14:47,110 --> 00:14:51,610
that the Android platform will generally

340
00:14:49,120 --> 00:14:54,160
show this warning and notification if it

341
00:14:51,610 --> 00:14:57,040
believes you might be sending an SMS to

342
00:14:54,160 --> 00:15:00,610
a short code which will cause charges to

343
00:14:57,040 --> 00:15:02,620
your bill so the sha-1 actors decided

344
00:15:00,610 --> 00:15:05,709
that that's not okay and it might give

345
00:15:02,620 --> 00:15:09,519
them away so what they did is they if

346
00:15:05,709 --> 00:15:11,649
the phone was routed meaning it has just

347
00:15:09,519 --> 00:15:13,899
about every access they were able to

348
00:15:11,649 --> 00:15:16,269
access and chose to access an internal

349
00:15:13,899 --> 00:15:19,420
permission that usually no one can

350
00:15:16,269 --> 00:15:22,930
access what that permission does is it

351
00:15:19,420 --> 00:15:25,120
sets the property that makes it look

352
00:15:22,930 --> 00:15:27,370
like the user checked remember my choice

353
00:15:25,120 --> 00:15:29,360
and sent so they sent that

354
00:15:27,370 --> 00:15:31,670
programmatically in the background

355
00:15:29,360 --> 00:15:34,639
or ever sending a premium SMS so the

356
00:15:31,670 --> 00:15:37,579
user wouldn't see these warnings if it

357
00:15:34,639 --> 00:15:39,949
wasn't routed that was okay they chose

358
00:15:37,579 --> 00:15:43,099
to use accessibility services to very

359
00:15:39,949 --> 00:15:44,748
quickly check the box and click send so

360
00:15:43,100 --> 00:15:46,579
fast that often the user wouldn't have

361
00:15:44,749 --> 00:15:48,769
seen it so they were really thinking

362
00:15:46,579 --> 00:15:53,089
about how can we be most effective and

363
00:15:48,769 --> 00:15:54,980
not detected but they didn't just deploy

364
00:15:53,089 --> 00:15:56,899
all these things throw some spaghetti at

365
00:15:54,980 --> 00:15:59,480
the wall and hope it all stuck and

366
00:15:56,899 --> 00:16:02,509
monetized they were very smart and very

367
00:15:59,480 --> 00:16:05,329
thoughtful in how they were testing

368
00:16:02,509 --> 00:16:07,519
before actually deployed so one of the

369
00:16:05,329 --> 00:16:10,339
first things they do is that as we've

370
00:16:07,519 --> 00:16:13,369
talked about before most AV engines will

371
00:16:10,339 --> 00:16:14,869
only see stage one and before they when

372
00:16:13,369 --> 00:16:19,429
they have to make their decision of is

373
00:16:14,869 --> 00:16:22,220
this bad or not and so the actors behind

374
00:16:19,429 --> 00:16:23,959
chinois would iterate through all the

375
00:16:22,220 --> 00:16:26,540
different files that they include in the

376
00:16:23,959 --> 00:16:29,689
apk all of the different factors all of

377
00:16:26,540 --> 00:16:32,089
the strings things like that to see what

378
00:16:29,689 --> 00:16:34,939
our AV is catching us on and we were

379
00:16:32,089 --> 00:16:36,470
able to watch them system systematically

380
00:16:34,939 --> 00:16:39,169
go through each of the different

381
00:16:36,470 --> 00:16:40,339
properties even icons names different

382
00:16:39,169 --> 00:16:43,610
things like that and they were

383
00:16:40,339 --> 00:16:47,329
monitoring to see who catches us with

384
00:16:43,610 --> 00:16:50,419
what changes they also use staging and

385
00:16:47,329 --> 00:16:53,089
production servers so that they don't

386
00:16:50,419 --> 00:16:55,279
release everything and just like any you

387
00:16:53,089 --> 00:16:57,709
know more mature engineering operation

388
00:16:55,279 --> 00:17:00,049
they use feature flags so they will

389
00:16:57,709 --> 00:17:02,359
deployed only they we chose to deploy

390
00:17:00,049 --> 00:17:04,668
only certain features to certain

391
00:17:02,360 --> 00:17:07,189
populations so sometimes this was based

392
00:17:04,669 --> 00:17:09,319
on your geographic location what device

393
00:17:07,189 --> 00:17:11,389
you're running on what carrier you were

394
00:17:09,319 --> 00:17:13,879
using so it was a much more controlled

395
00:17:11,388 --> 00:17:16,668
flow and if something didn't work they

396
00:17:13,880 --> 00:17:18,860
could stop cut it remove it from the

397
00:17:16,669 --> 00:17:24,559
botnet before they got detected and

398
00:17:18,859 --> 00:17:28,158
caught they also have a pretty big

399
00:17:24,559 --> 00:17:30,529
network infrastructure so when I'm

400
00:17:28,159 --> 00:17:32,330
talking about AP I see two domains those

401
00:17:30,529 --> 00:17:34,820
are those c2s that are associated with

402
00:17:32,330 --> 00:17:37,428
the chinois framework so how does it

403
00:17:34,820 --> 00:17:39,490
operate how does it update when does it

404
00:17:37,429 --> 00:17:41,440
choose which payloads it wants

405
00:17:39,490 --> 00:17:45,280
to use and there are 10 plus different

406
00:17:41,440 --> 00:17:47,380
ones of those for the module specific SI

407
00:17:45,280 --> 00:17:48,490
toos those are the payloads so I

408
00:17:47,380 --> 00:17:51,100
mentioned there's tons of different

409
00:17:48,490 --> 00:17:53,710
payloads out there that we're currently

410
00:17:51,100 --> 00:17:56,740
tracking and so far we've caught or

411
00:17:53,710 --> 00:17:59,559
we've tracked 20 plus module specific

412
00:17:56,740 --> 00:18:02,590
situ domains and then for just their ad

413
00:17:59,559 --> 00:18:05,860
productivity in those payloads they use

414
00:18:02,590 --> 00:18:07,870
150 different domains but I think what's

415
00:18:05,860 --> 00:18:09,340
more interesting about this is that they

416
00:18:07,870 --> 00:18:12,389
don't manually generate any of these

417
00:18:09,340 --> 00:18:15,580
they work with large cloud providers and

418
00:18:12,390 --> 00:18:19,420
they use automated cloud deployment to

419
00:18:15,580 --> 00:18:21,760
keep creating new ones using depth being

420
00:18:19,420 --> 00:18:26,410
able to rotate different ones and it is

421
00:18:21,760 --> 00:18:28,240
an engineering operation but one of the

422
00:18:26,410 --> 00:18:31,059
most interesting facts is what happens

423
00:18:28,240 --> 00:18:33,850
if you're in China so before they ever

424
00:18:31,059 --> 00:18:35,590
load a payload do any checks there's a

425
00:18:33,850 --> 00:18:38,500
lot of different places and then they

426
00:18:35,590 --> 00:18:40,750
cook the code they try to see am I in

427
00:18:38,500 --> 00:18:43,390
China am i operating in China and if

428
00:18:40,750 --> 00:18:45,790
they see that they immediately shut up

429
00:18:43,390 --> 00:18:50,400
operations down no network connections

430
00:18:45,790 --> 00:18:50,399
nothing so just a little fun fact but

431
00:18:51,150 --> 00:18:57,130
obviously all this doesn't really matter

432
00:18:54,400 --> 00:18:58,270
if you can't distribute if you can't get

433
00:18:57,130 --> 00:19:01,750
BOTS in your botnets

434
00:18:58,270 --> 00:19:03,309
it's all kind of for nothing so one of

435
00:19:01,750 --> 00:19:06,240
the biggest ways they were able to

436
00:19:03,309 --> 00:19:09,399
distribute was through preinstalled

437
00:19:06,240 --> 00:19:11,140
going after o diems and ODMs

438
00:19:09,400 --> 00:19:13,300
and we've talked a lot about the supply

439
00:19:11,140 --> 00:19:16,090
chain today and this is one way in the

440
00:19:13,300 --> 00:19:19,000
Android ecosystem they did it so they

441
00:19:16,090 --> 00:19:22,419
continued to convince OMS and O diems

442
00:19:19,000 --> 00:19:24,460
that hey we have a feature we have a

443
00:19:22,420 --> 00:19:27,280
sales tracker to support your analytics

444
00:19:24,460 --> 00:19:28,960
especially on those lower profit margin

445
00:19:27,280 --> 00:19:31,480
devices they said we have a mobile

446
00:19:28,960 --> 00:19:34,990
payment solution that's going to support

447
00:19:31,480 --> 00:19:38,020
X Y & Z we have an advertising SDK or

448
00:19:34,990 --> 00:19:39,850
it's just a monetization SDK and so they

449
00:19:38,020 --> 00:19:40,420
were able to convince each of these OMS

450
00:19:39,850 --> 00:19:43,240
and o diems

451
00:19:40,420 --> 00:19:45,790
to include this pre-installed they also

452
00:19:43,240 --> 00:19:49,450
distributed it as a static SDK which

453
00:19:45,790 --> 00:19:51,700
means to developers and so a lot of

454
00:19:49,450 --> 00:19:54,880
developers unknowingly did this but

455
00:19:51,700 --> 00:19:56,590
it's bad and spot that but one of the

456
00:19:54,880 --> 00:19:58,090
interesting things we hadn't seen at

457
00:19:56,590 --> 00:20:00,399
scale before and why the number of

458
00:19:58,090 --> 00:20:01,840
variants is kind of fuzzy is it seems

459
00:20:00,400 --> 00:20:05,320
they partnered with other malicious

460
00:20:01,840 --> 00:20:07,720
actors in the Android ecosystem to be

461
00:20:05,320 --> 00:20:10,600
distributed as well as as plugins and

462
00:20:07,720 --> 00:20:12,490
what that means is that other apps and

463
00:20:10,600 --> 00:20:14,770
other malicious SDKs would download

464
00:20:12,490 --> 00:20:17,290
chinois plugins and run it in the app

465
00:20:14,770 --> 00:20:19,780
context and that was developed by other

466
00:20:17,290 --> 00:20:22,270
developers they were also partnered with

467
00:20:19,780 --> 00:20:24,220
known harmful downloading families to

468
00:20:22,270 --> 00:20:27,160
get in those inventories of those

469
00:20:24,220 --> 00:20:30,100
harmful downloaders so this is why it

470
00:20:27,160 --> 00:20:32,260
was tough to battle Shinhwa because they

471
00:20:30,100 --> 00:20:37,090
distributed in a lot of different ways

472
00:20:32,260 --> 00:20:39,010
but one of the scariest in going into

473
00:20:37,090 --> 00:20:42,070
the supply chain was something we've

474
00:20:39,010 --> 00:20:44,620
named eager fonts so eater fonts is a

475
00:20:42,070 --> 00:20:47,230
fonts application that was included in

476
00:20:44,620 --> 00:20:50,350
one of the sock platforms and this sock

477
00:20:47,230 --> 00:20:52,360
platform was convinced that hey I'm a

478
00:20:50,350 --> 00:20:55,570
third-party app developer I've come I

479
00:20:52,360 --> 00:20:57,790
developed this fonts app and it's going

480
00:20:55,570 --> 00:21:01,060
to provide your users with so many more

481
00:20:57,790 --> 00:21:04,270
different options to see fonts clear in

482
00:21:01,060 --> 00:21:06,580
their each different languages turns out

483
00:21:04,270 --> 00:21:09,280
that third-party developer then included

484
00:21:06,580 --> 00:21:13,210
also an advertising SDK from I guess a

485
00:21:09,280 --> 00:21:17,020
poor party developer that advertising

486
00:21:13,210 --> 00:21:19,690
SDK called out to remote servers and did

487
00:21:17,020 --> 00:21:21,850
dynamic code loading or DCL to download

488
00:21:19,690 --> 00:21:24,460
many different types of plugins and run

489
00:21:21,850 --> 00:21:27,310
them within the app context so some of

490
00:21:24,460 --> 00:21:29,200
these plugins included Shinhwa another

491
00:21:27,310 --> 00:21:31,419
family known as snow fox as well as

492
00:21:29,200 --> 00:21:34,060
others and this is hard to track because

493
00:21:31,420 --> 00:21:37,000
it downloaded different things in each

494
00:21:34,060 --> 00:21:39,070
different instance but because this has

495
00:21:37,000 --> 00:21:42,070
infiltrated the supply chain at the sock

496
00:21:39,070 --> 00:21:45,159
platform level it affected 250 different

497
00:21:42,070 --> 00:21:47,950
OEMs in our ecosystem across 1,000

498
00:21:45,160 --> 00:21:50,230
different built fingerprints so yeah a

499
00:21:47,950 --> 00:21:52,510
big scale but to the stock platforms

500
00:21:50,230 --> 00:21:54,670
credit as soon as we contacted them

501
00:21:52,510 --> 00:21:57,010
within that day they did pull the app

502
00:21:54,670 --> 00:21:59,860
they contacted every one of their OAM

503
00:21:57,010 --> 00:22:02,350
customers who had used variants of that

504
00:21:59,860 --> 00:22:04,129
platform and they worked with us to

505
00:22:02,350 --> 00:22:05,780
create a plan to ensure this one

506
00:22:04,130 --> 00:22:07,970
happen again such that they are no

507
00:22:05,780 --> 00:22:12,139
longer including any third party code

508
00:22:07,970 --> 00:22:13,670
within the platform so how do we fight

509
00:22:12,140 --> 00:22:14,270
it we've talked a lot about why it was

510
00:22:13,670 --> 00:22:15,710
hard

511
00:22:14,270 --> 00:22:18,379
why was impactful why it was

512
00:22:15,710 --> 00:22:21,320
sophisticated so we teamed up on this

513
00:22:18,380 --> 00:22:24,470
multiple team investigation and sort of

514
00:22:21,320 --> 00:22:26,510
took a three prong approach starting

515
00:22:24,470 --> 00:22:29,000
with the OEM outreach in terms of

516
00:22:26,510 --> 00:22:31,070
staunch and stemming the supply and

517
00:22:29,000 --> 00:22:33,190
distribution ending with ad fraud

518
00:22:31,070 --> 00:22:35,899
defenses to try and prevent it from

519
00:22:33,190 --> 00:22:38,030
monetizing and in the middle we used

520
00:22:35,900 --> 00:22:40,430
Google Play protect to try and prevent

521
00:22:38,030 --> 00:22:43,970
any new installs on users devices as

522
00:22:40,430 --> 00:22:46,490
well as block existing infections so

523
00:22:43,970 --> 00:22:48,500
this is what the OEM outreach looked

524
00:22:46,490 --> 00:22:51,250
like a lot of different steps made

525
00:22:48,500 --> 00:22:54,380
mandatory OTAs post-mortems

526
00:22:51,250 --> 00:22:57,380
education and thankfully through the BTS

527
00:22:54,380 --> 00:22:59,120
program all the OEM builds come through

528
00:22:57,380 --> 00:23:00,680
my team prior to launch and so that was

529
00:22:59,120 --> 00:23:03,169
super helpful too because we were able

530
00:23:00,680 --> 00:23:06,280
to block them before they go out and

531
00:23:03,170 --> 00:23:10,100
Google Play protect as you can imagine

532
00:23:06,280 --> 00:23:11,300
signature weren't quite sufficient that

533
00:23:10,100 --> 00:23:13,280
was one of the reasons we decided to

534
00:23:11,300 --> 00:23:15,080
create the investigation team so we

535
00:23:13,280 --> 00:23:17,300
hadn't moved to creating behavioral

536
00:23:15,080 --> 00:23:20,379
detection networks code similarity

537
00:23:17,300 --> 00:23:23,030
machine learning models and do the more

538
00:23:20,380 --> 00:23:26,450
severe enforcement's that we have at our

539
00:23:23,030 --> 00:23:28,820
disposal which immediately alerts users

540
00:23:26,450 --> 00:23:32,900
and say hey we've blocked and disabled

541
00:23:28,820 --> 00:23:36,110
this application so why was it hard

542
00:23:32,900 --> 00:23:38,180
super sophisticated actor they have an

543
00:23:36,110 --> 00:23:40,879
industry presence they have a reputation

544
00:23:38,180 --> 00:23:44,390
a website they have this legitimate

545
00:23:40,880 --> 00:23:46,520
project I put that in quotes obviously

546
00:23:44,390 --> 00:23:48,890
but they're able to show these benign

547
00:23:46,520 --> 00:23:50,810
payloads that they use they also have

548
00:23:48,890 --> 00:23:52,790
very smart and deliberate engineering

549
00:23:50,810 --> 00:23:54,500
practices and release practices they

550
00:23:52,790 --> 00:23:56,090
don't make a lot of mistakes and they're

551
00:23:54,500 --> 00:23:58,250
not just looking for low-hanging fruit

552
00:23:56,090 --> 00:24:02,030
they're they're looking to be very

553
00:23:58,250 --> 00:24:03,740
system systematic they come up with

554
00:24:02,030 --> 00:24:06,080
sophisticated technical solutions

555
00:24:03,740 --> 00:24:08,300
Stage three of the anti analysis library

556
00:24:06,080 --> 00:24:11,149
was definitely one of the is still the

557
00:24:08,300 --> 00:24:12,830
most sophisticated layering of anti

558
00:24:11,150 --> 00:24:14,049
analysis and obfuscation techniques I

559
00:24:12,830 --> 00:24:15,178
have seen

560
00:24:14,049 --> 00:24:17,230
and they have a really mature

561
00:24:15,179 --> 00:24:19,509
infrastructure when it comes to situ

562
00:24:17,230 --> 00:24:22,029
able to automatically deploy with their

563
00:24:19,509 --> 00:24:27,029
configurations on different loud large

564
00:24:22,029 --> 00:24:30,220
cloud providers but they're stealthy

565
00:24:27,029 --> 00:24:32,980
they use asymmetrically encrypted

566
00:24:30,220 --> 00:24:35,139
network traffic all their malicious

567
00:24:32,980 --> 00:24:37,809
payloads are dynamically downloaded as

568
00:24:35,139 --> 00:24:41,350
soon as they do any unpacking of a stage

569
00:24:37,809 --> 00:24:47,080
they immediately delete it so just very

570
00:24:41,350 --> 00:24:48,908
smart but I think one of the most

571
00:24:47,080 --> 00:24:51,610
interesting anecdotes at least for me is

572
00:24:48,909 --> 00:24:53,830
how quickly they responded to each of

573
00:24:51,610 --> 00:24:57,070
our different enforcement's so I talked

574
00:24:53,830 --> 00:24:59,080
about how they would continue to iterate

575
00:24:57,070 --> 00:25:02,590
through each of the different factors of

576
00:24:59,080 --> 00:25:04,360
the stage one apk to see which AVS and

577
00:25:02,590 --> 00:25:07,899
things like that were detecting which

578
00:25:04,360 --> 00:25:11,229
different aspects but one of the things

579
00:25:07,899 --> 00:25:14,498
is so last year at blackhat I presented

580
00:25:11,230 --> 00:25:16,929
on what I had named wedding cake as an

581
00:25:14,499 --> 00:25:19,389
anti analysis library which is their

582
00:25:16,929 --> 00:25:22,269
stage 3 and at that time I hadn't even

583
00:25:19,389 --> 00:25:25,809
claimed this is developed by Shamwari

584
00:25:22,269 --> 00:25:27,789
actors but within 72 hours of me doing

585
00:25:25,809 --> 00:25:29,830
that presentation before the video had

586
00:25:27,789 --> 00:25:32,379
been released or anything like that they

587
00:25:29,830 --> 00:25:36,850
had begin modifying every single IOC I

588
00:25:32,379 --> 00:25:41,168
discussed in that presentation so that

589
00:25:36,850 --> 00:25:42,730
was definitely interesting also in their

590
00:25:41,169 --> 00:25:45,360
stages of anti analysis they

591
00:25:42,730 --> 00:25:47,169
fingerprinted exactly some of Google's

592
00:25:45,360 --> 00:25:49,119
customizations to our analysis

593
00:25:47,169 --> 00:25:51,009
environment so things we had come up

594
00:25:49,119 --> 00:25:52,360
with names for the order with which we

595
00:25:51,009 --> 00:25:58,419
deploy certain settings and properties

596
00:25:52,360 --> 00:26:00,519
and so they are smart but I am very

597
00:25:58,419 --> 00:26:02,559
happy to say that we do consider some

598
00:26:00,519 --> 00:26:04,059
wall a controlled threat and it's

599
00:26:02,559 --> 00:26:06,190
currently in maintenance and operation

600
00:26:04,059 --> 00:26:09,039
and here are the numbers

601
00:26:06,190 --> 00:26:11,860
so even when I submitted this abstract I

602
00:26:09,039 --> 00:26:15,249
said 14 million turns out it actually

603
00:26:11,860 --> 00:26:16,330
it's peak was 20 0.35 million in March

604
00:26:15,249 --> 00:26:20,200
2018

605
00:26:16,330 --> 00:26:24,369
however by March 2019 we have gotten it

606
00:26:20,200 --> 00:26:26,590
down to 1.8 1 million devices in the

607
00:26:24,369 --> 00:26:27,439
Android ecosystem with an active ShamWow

608
00:26:26,590 --> 00:26:30,049
application

609
00:26:27,440 --> 00:26:34,669
on it and as of today that's down to

610
00:26:30,049 --> 00:26:37,610
less than 1.6 but it's not like they had

611
00:26:34,669 --> 00:26:41,000
slowed down and made it easy on us to do

612
00:26:37,610 --> 00:26:44,120
that work in that same time period they

613
00:26:41,000 --> 00:26:47,210
deployed twelve point eight thousand new

614
00:26:44,120 --> 00:26:50,168
Shinhwa samples into the ecosystem so as

615
00:26:47,210 --> 00:26:53,179
of now there are twenty eight point one

616
00:26:50,169 --> 00:26:55,730
different Shinhwa samples in the

617
00:26:53,179 --> 00:26:59,029
ecosystem and each of those are

618
00:26:55,730 --> 00:27:01,129
different different rotations of each of

619
00:26:59,029 --> 00:27:05,559
the file names each of the strings and

620
00:27:01,129 --> 00:27:08,360
signatures but we have had a 91 percent

621
00:27:05,559 --> 00:27:10,629
decrease down from the twenty point

622
00:27:08,360 --> 00:27:13,519
three three five million in March 2018

623
00:27:10,629 --> 00:27:16,189
so that's sort of why I will claim that

624
00:27:13,519 --> 00:27:20,330
Shinhwa is the biggest botnet probably

625
00:27:16,190 --> 00:27:22,039
never heard of in the Android but we all

626
00:27:20,330 --> 00:27:24,199
know it didn't really happen if there's

627
00:27:22,039 --> 00:27:26,720
not hashes so here's a bunch of samples

628
00:27:24,200 --> 00:27:28,639
that are up currently on virus total

629
00:27:26,720 --> 00:27:30,470
covering a lot of the different variants

630
00:27:28,639 --> 00:27:31,790
I talked about here and so with that

631
00:27:30,470 --> 00:27:35,040
thank you

632
00:27:31,790 --> 00:27:35,040
[Applause]

