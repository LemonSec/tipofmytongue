1
00:00:03,580 --> 00:00:17,340
[Music]

2
00:00:14,240 --> 00:00:19,560
<font color="#E5E5E5">all right welcome to my talk</font><font color="#CCCCCC"> so in the</font>

3
00:00:17,340 --> 00:00:21,509
upcoming<font color="#E5E5E5"> six minutes you will</font><font color="#CCCCCC"> see a lot</font>

4
00:00:19,560 --> 00:00:23,939
<font color="#CCCCCC">of assembly</font><font color="#E5E5E5"> in a lot of</font><font color="#CCCCCC"> up codes because</font>

5
00:00:21,510 --> 00:00:26,700
<font color="#E5E5E5">I will teach you</font><font color="#CCCCCC"> guys how to write a</font>

6
00:00:23,939 --> 00:00:29,130
<font color="#E5E5E5">reverse</font><font color="#CCCCCC"> shell in arm assembly and you</font>

7
00:00:26,700 --> 00:00:32,850
<font color="#CCCCCC">will see some examples of</font><font color="#E5E5E5"> how to detect</font>

8
00:00:29,130 --> 00:00:35,339
the corresponding<font color="#E5E5E5"> up codes with Yaga</font><font color="#CCCCCC"> so</font>

9
00:00:32,850 --> 00:00:37,650
since we cannot possibly cover all the

10
00:00:35,340 --> 00:00:39,540
<font color="#E5E5E5">details of arm assembly in six minutes</font><font color="#CCCCCC"> I</font>

11
00:00:37,650 --> 00:00:41,940
will only give a very very brief

12
00:00:39,540 --> 00:00:44,850
introduction<font color="#CCCCCC"> into arm assembly</font><font color="#E5E5E5"> and only</font>

13
00:00:41,940 --> 00:00:47,400
cover<font color="#E5E5E5"> the most important instructions in</font>

14
00:00:44,850 --> 00:00:49,590
order<font color="#CCCCCC"> to write the</font><font color="#E5E5E5"> shell code</font><font color="#CCCCCC"> and I need</font>

15
00:00:47,400 --> 00:00:51,180
you to be fully focused<font color="#E5E5E5"> in the upcoming</font>

16
00:00:49,590 --> 00:00:52,860
six minutes because<font color="#E5E5E5"> this will be intense</font>

17
00:00:51,180 --> 00:00:57,480
you better<font color="#E5E5E5"> look at the slides not on me</font>

18
00:00:52,860 --> 00:00:59,910
just<font color="#E5E5E5"> a hinge so we will start with the</font>

19
00:00:57,480 --> 00:01:02,400
first<font color="#E5E5E5"> four instructions which should</font>

20
00:00:59,910 --> 00:01:05,580
actually<font color="#E5E5E5"> sound a look familiar from x86</font>

21
00:01:02,400 --> 00:01:08,340
<font color="#CCCCCC">and the important</font><font color="#E5E5E5"> part here</font><font color="#CCCCCC"> is that in</font>

22
00:01:05,580 --> 00:01:11,220
arm<font color="#E5E5E5"> you have</font><font color="#CCCCCC"> either 32-bit</font><font color="#E5E5E5"> instructions</font>

23
00:01:08,340 --> 00:01:13,110
<font color="#E5E5E5">or 16-bit instructions in thumb mode</font>

24
00:01:11,220 --> 00:01:16,650
which is important<font color="#E5E5E5"> because we will use</font>

25
00:01:13,110 --> 00:01:19,590
thumb mode for our<font color="#E5E5E5"> shellcode the next</font>

26
00:01:16,650 --> 00:01:21,570
four instructions are less trivial<font color="#E5E5E5"> the</font>

27
00:01:19,590 --> 00:01:24,330
first one puts the address of a label

28
00:01:21,570 --> 00:01:27,389
<font color="#E5E5E5">into a register</font><font color="#CCCCCC"> to store by it</font><font color="#E5E5E5"> stores a</font>

29
00:01:24,330 --> 00:01:32,150
<font color="#CCCCCC">byte to the address found in our</font><font color="#E5E5E5"> zero at</font>

30
00:01:27,390 --> 00:01:35,790
offset<font color="#CCCCCC"> 3f BX is like a jump in x86</font><font color="#E5E5E5"> and</font>

31
00:01:32,150 --> 00:01:37,950
SVC is<font color="#E5E5E5"> a security</font><font color="#CCCCCC"> vacation club</font><font color="#E5E5E5"> okay</font>

32
00:01:35,790 --> 00:01:39,750
that's a lie but<font color="#E5E5E5"> the rest is true so</font>

33
00:01:37,950 --> 00:01:43,260
it's actually<font color="#CCCCCC"> used to invoke system</font>

34
00:01:39,750 --> 00:01:44,700
functions<font color="#CCCCCC"> and regarding the registers we</font>

35
00:01:43,260 --> 00:01:47,610
only need to cover the<font color="#CCCCCC"> general-purpose</font>

36
00:01:44,700 --> 00:01:50,549
<font color="#CCCCCC">registers because we will</font><font color="#E5E5E5"> need them for</font>

37
00:01:47,610 --> 00:01:53,700
our arguments and our<font color="#E5E5E5"> seven will contain</font>

38
00:01:50,549 --> 00:02:01,260
our sisk whole number<font color="#E5E5E5"> and</font><font color="#CCCCCC"> pc is like</font><font color="#E5E5E5"> VIP</font>

39
00:01:53,700 --> 00:02:03,600
and x86 so<font color="#CCCCCC"> okay so since we want our</font>

40
00:02:01,260 --> 00:02:06,360
shellcode to be free<font color="#CCCCCC"> of any now bytes we</font>

41
00:02:03,600 --> 00:02:08,459
need to avoid instructions<font color="#E5E5E5"> that cause</font>

42
00:02:06,360 --> 00:02:10,919
now bytes<font color="#E5E5E5"> therefore in order</font><font color="#CCCCCC"> to clear</font>

43
00:02:08,459 --> 00:02:13,080
out a register we will just stop and the

44
00:02:10,919 --> 00:02:14,819
register or store it and instead<font color="#E5E5E5"> of</font>

45
00:02:13,080 --> 00:02:17,040
<font color="#CCCCCC">nonterminating</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> pin aside string we</font>

46
00:02:14,819 --> 00:02:19,290
will put a placeholder<font color="#E5E5E5"> and replace the</font>

47
00:02:17,040 --> 00:02:22,620
placeholder<font color="#E5E5E5"> during runtime using a store</font>

48
00:02:19,290 --> 00:02:25,019
byte instruction<font color="#CCCCCC"> and another way to</font>

49
00:02:22,620 --> 00:02:26,480
greatly<font color="#CCCCCC"> reduce the possibility of having</font>

50
00:02:25,020 --> 00:02:28,340
now bytes is using

51
00:02:26,480 --> 00:02:31,310
some instructions<font color="#CCCCCC"> because there are only</font>

52
00:02:28,340 --> 00:02:32,540
<font color="#E5E5E5">two bytes</font><font color="#CCCCCC"> wide</font><font color="#E5E5E5"> right so we just</font><font color="#CCCCCC"> set the</font>

53
00:02:31,310 --> 00:02:35,269
least significant bit of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> next</font>

54
00:02:32,540 --> 00:02:38,090
<font color="#CCCCCC">instruction to 1 and then we</font><font color="#E5E5E5"> branch to</font>

55
00:02:35,269 --> 00:02:42,170
that instruction<font color="#E5E5E5"> to that</font><font color="#CCCCCC"> address</font><font color="#E5E5E5"> with</font><font color="#CCCCCC"> BX</font>

56
00:02:38,090 --> 00:02:45,319
branch and exchange so since this<font color="#CCCCCC"> is a</font>

57
00:02:42,170 --> 00:02:47,390
common technique<font color="#E5E5E5"> for reducing</font><font color="#CCCCCC"> now bytes</font>

58
00:02:45,319 --> 00:02:50,208
in<font color="#E5E5E5"> shellcode we can use this lipid for</font>

59
00:02:47,390 --> 00:02:53,238
our<font color="#CCCCCC"> Jana rule</font><font color="#E5E5E5"> and the only variable part</font>

60
00:02:50,209 --> 00:02:55,069
in this<font color="#E5E5E5"> case is the register because it</font>

61
00:02:53,239 --> 00:02:57,890
can be any general purpose register you

62
00:02:55,069 --> 00:02:59,899
can<font color="#E5E5E5"> say r1 r2 r3 it doesn't really</font>

63
00:02:57,890 --> 00:03:01,399
matter<font color="#E5E5E5"> we will replace</font><font color="#CCCCCC"> it with a</font>

64
00:02:59,900 --> 00:03:05,030
question<font color="#CCCCCC"> mark</font><font color="#E5E5E5"> so this is the</font><font color="#CCCCCC"> Yaga</font>

65
00:03:01,400 --> 00:03:07,610
snippet<font color="#CCCCCC"> the first one we will write a</font>

66
00:03:05,030 --> 00:03:09,470
reverse<font color="#CCCCCC"> shell which means that in blue</font>

67
00:03:07,610 --> 00:03:11,390
you see<font color="#CCCCCC"> the system functions that we</font>

68
00:03:09,470 --> 00:03:14,690
will translate<font color="#E5E5E5"> and represent an assembly</font>

69
00:03:11,390 --> 00:03:16,910
and in red you see<font color="#E5E5E5"> the arguments that we</font>

70
00:03:14,690 --> 00:03:19,370
will pass<font color="#E5E5E5"> these functions via registers</font>

71
00:03:16,910 --> 00:03:23,780
<font color="#E5E5E5">so in this case we</font><font color="#CCCCCC"> will cover</font><font color="#E5E5E5"> a socket</font>

72
00:03:19,370 --> 00:03:25,849
connect up<font color="#CCCCCC"> to and exit via functions so</font>

73
00:03:23,780 --> 00:03:28,579
this<font color="#E5E5E5"> is a template that we will use</font><font color="#CCCCCC"> to</font>

74
00:03:25,849 --> 00:03:30,470
<font color="#E5E5E5">understand</font><font color="#CCCCCC"> how a function is represented</font>

75
00:03:28,579 --> 00:03:33,230
<font color="#CCCCCC">in assembly first</font><font color="#E5E5E5"> you see the function</font>

76
00:03:30,470 --> 00:03:35,840
<font color="#CCCCCC">its arguments and the Sisqo number in</font>

77
00:03:33,230 --> 00:03:37,548
the<font color="#E5E5E5"> middle you see the registers</font><font color="#CCCCCC"> and the</font>

78
00:03:35,840 --> 00:03:41,380
arguments<font color="#E5E5E5"> and on the right you see the</font>

79
00:03:37,549 --> 00:03:44,810
instructions and which we<font color="#E5E5E5"> will need to</font>

80
00:03:41,380 --> 00:03:46,940
yeah<font color="#CCCCCC"> in order to to pass the arguments</font>

81
00:03:44,810 --> 00:03:48,590
into the register<font color="#CCCCCC"> so the first function</font>

82
00:03:46,940 --> 00:03:52,519
<font color="#E5E5E5">is the socket function with the</font>

83
00:03:48,590 --> 00:03:54,920
parameters<font color="#CCCCCC"> - 1 and 0</font><font color="#E5E5E5"> the first two</font>

84
00:03:52,519 --> 00:03:58,190
arguments<font color="#CCCCCC"> we just passed via move and</font>

85
00:03:54,920 --> 00:04:00,108
the third we just clear out with<font color="#CCCCCC"> sup to</font>

86
00:03:58,190 --> 00:04:03,170
avoid null<font color="#CCCCCC"> bites</font><font color="#E5E5E5"> we put the Syst call</font>

87
00:04:00,109 --> 00:04:06,709
number into<font color="#E5E5E5"> our</font><font color="#CCCCCC"> 7 and we invoke with SVC</font>

88
00:04:03,170 --> 00:04:08,839
<font color="#E5E5E5">and</font><font color="#CCCCCC"> we save the result in our for this</font>

89
00:04:06,709 --> 00:04:11,299
snippet<font color="#E5E5E5"> we can also use for our Yaga</font>

90
00:04:08,840 --> 00:04:14,180
rule which means that the first two

91
00:04:11,299 --> 00:04:18,079
instructions are<font color="#E5E5E5"> rather static</font><font color="#CCCCCC"> and in</font>

92
00:04:14,180 --> 00:04:20,030
red you<font color="#CCCCCC"> see the variable parts and the</font>

93
00:04:18,079 --> 00:04:22,729
blue instruction means<font color="#E5E5E5"> that it can also</font>

94
00:04:20,029 --> 00:04:24,830
<font color="#E5E5E5">be split into two instructions to</font>

95
00:04:22,729 --> 00:04:27,770
achieve the same result<font color="#CCCCCC"> so as you can</font>

96
00:04:24,830 --> 00:04:30,590
<font color="#CCCCCC">see on the bottom left there</font><font color="#E5E5E5"> are three</font>

97
00:04:27,770 --> 00:04:33,049
ways of<font color="#E5E5E5"> how to zero out</font><font color="#CCCCCC"> a clear out</font><font color="#E5E5E5"> a</font>

98
00:04:30,590 --> 00:04:34,789
register<font color="#CCCCCC"> and</font><font color="#E5E5E5"> on the right you see two</font>

99
00:04:33,050 --> 00:04:36,830
<font color="#CCCCCC">different</font><font color="#E5E5E5"> ways of how to put an</font>

100
00:04:34,789 --> 00:04:39,169
<font color="#CCCCCC">immediate value</font><font color="#E5E5E5"> into a register because</font>

101
00:04:36,830 --> 00:04:39,889
<font color="#E5E5E5">all the ARM processors don't allow you</font>

102
00:04:39,169 --> 00:04:41,830
<font color="#E5E5E5">to pull</font>

103
00:04:39,889 --> 00:04:44,180
<font color="#E5E5E5">a large immediate value into register</font>

104
00:04:41,830 --> 00:04:46,639
<font color="#CCCCCC">therefore it needs</font><font color="#E5E5E5"> to be split so we</font>

105
00:04:44,180 --> 00:04:50,960
need to be on the safe side<font color="#E5E5E5"> and just say</font>

106
00:04:46,639 --> 00:04:53,029
<font color="#CCCCCC">alright the connect function</font><font color="#E5E5E5"> has the</font>

107
00:04:50,960 --> 00:04:55,039
following<font color="#E5E5E5"> arguments and the</font><font color="#CCCCCC"> only thing</font>

108
00:04:53,029 --> 00:04:59,029
we need<font color="#CCCCCC"> to do</font><font color="#E5E5E5"> here is to reference our</font>

109
00:04:55,039 --> 00:05:03,409
structs in<font color="#CCCCCC"> r1</font><font color="#E5E5E5"> then we distract length in</font>

110
00:04:59,029 --> 00:05:05,389
r2<font color="#E5E5E5"> again we just increase our</font><font color="#CCCCCC"> seven and</font>

111
00:05:03,409 --> 00:05:07,699
we invoke and we also replace<font color="#CCCCCC"> the</font>

112
00:05:05,389 --> 00:05:10,969
placeholder<font color="#E5E5E5"> FF with zero</font><font color="#CCCCCC"> byte</font>

113
00:05:07,699 --> 00:05:14,150
dynamically add the<font color="#CCCCCC"> 3dep to calls</font><font color="#E5E5E5"> and</font>

114
00:05:10,969 --> 00:05:16,729
here again<font color="#E5E5E5"> every time we invoke</font><font color="#CCCCCC"> adaptive</font>

115
00:05:14,150 --> 00:05:19,580
function<font color="#E5E5E5"> we need to put the</font><font color="#CCCCCC"> saved sock</font>

116
00:05:16,729 --> 00:05:23,419
ID back into r0<font color="#E5E5E5"> and the second parameter</font>

117
00:05:19,580 --> 00:05:26,210
is just<font color="#E5E5E5"> first</font><font color="#CCCCCC"> 0 then 1 then 2 and</font><font color="#E5E5E5"> again</font>

118
00:05:23,419 --> 00:05:29,810
this is call number<font color="#E5E5E5"> into our 7 then we</font>

119
00:05:26,210 --> 00:05:33,378
<font color="#E5E5E5">invoke each time and this snippet can</font>

120
00:05:29,810 --> 00:05:36,259
also be represented<font color="#CCCCCC"> in Java in Java</font>

121
00:05:33,379 --> 00:05:39,499
so yeah in this<font color="#E5E5E5"> case</font><font color="#CCCCCC"> this app can be</font>

122
00:05:36,259 --> 00:05:42,379
<font color="#E5E5E5">either X or or or a move and the move</font>

123
00:05:39,499 --> 00:05:45,110
can also be an<font color="#CCCCCC"> add</font><font color="#E5E5E5"> and as you can see</font><font color="#CCCCCC"> in</font>

124
00:05:42,379 --> 00:05:47,870
red<font color="#E5E5E5"> the</font><font color="#CCCCCC"> r4 can be any general purpose</font>

125
00:05:45,110 --> 00:05:50,629
register which is<font color="#CCCCCC"> also variable</font><font color="#E5E5E5"> and SVC</font>

126
00:05:47,870 --> 00:05:53,210
can also be SVC<font color="#E5E5E5"> 0 therefore it's also</font>

127
00:05:50,629 --> 00:05:55,699
<font color="#E5E5E5">variable and last but not least we also</font>

128
00:05:53,210 --> 00:05:57,739
<font color="#E5E5E5">need to spawn a shell and</font><font color="#CCCCCC"> we just</font>

129
00:05:55,699 --> 00:06:02,719
reference<font color="#CCCCCC"> the address of our business a</font>

130
00:05:57,740 --> 00:06:05,569
string into<font color="#CCCCCC"> r0 r1 and r2 are</font><font color="#E5E5E5"> 0 then we</font>

131
00:06:02,719 --> 00:06:07,479
<font color="#E5E5E5">replace the X placeholder with a</font><font color="#CCCCCC"> 0</font><font color="#E5E5E5"> byte</font>

132
00:06:05,569 --> 00:06:10,789
during runtime using<font color="#CCCCCC"> a storage function</font>

133
00:06:07,479 --> 00:06:13,699
<font color="#CCCCCC">instruction sorry and 11 as a syscall</font>

134
00:06:10,789 --> 00:06:17,599
number and this<font color="#E5E5E5"> is a very cheap rule of</font>

135
00:06:13,699 --> 00:06:20,029
how to detect<font color="#E5E5E5"> the exact ve invocation in</font>

136
00:06:17,599 --> 00:06:22,310
the<font color="#E5E5E5"> bin aside string and again SVC can</font>

137
00:06:20,029 --> 00:06:26,539
also be SVC<font color="#CCCCCC"> 0 because if you</font><font color="#E5E5E5"> don't care</font>

138
00:06:22,310 --> 00:06:28,099
about<font color="#CCCCCC"> 0 bytes</font><font color="#E5E5E5"> and the</font><font color="#CCCCCC"> bin SH placeholder</font>

139
00:06:26,539 --> 00:06:30,560
can be any placeholder that's why it's

140
00:06:28,099 --> 00:06:33,860
also variable in this represented with

141
00:06:30,560 --> 00:06:36,439
question marks<font color="#E5E5E5"> and that sums up here is</font>

142
00:06:33,860 --> 00:06:38,779
your reverse shell<font color="#E5E5E5"> so it's easier than</font>

143
00:06:36,439 --> 00:06:41,689
<font color="#E5E5E5">you thought isn't it and in blue you</font><font color="#CCCCCC"> see</font>

144
00:06:38,779 --> 00:06:44,839
the the<font color="#E5E5E5"> system functions and in red you</font>

145
00:06:41,689 --> 00:06:47,599
<font color="#CCCCCC">see the arguments that we just passed</font><font color="#E5E5E5"> to</font>

146
00:06:44,839 --> 00:06:50,180
the registers and this is our reverse

147
00:06:47,599 --> 00:06:53,240
<font color="#E5E5E5">real free of now bytes in some modes</font>

148
00:06:50,180 --> 00:06:57,710
and the corresponding<font color="#CCCCCC"> Yaga rule looks</font>

149
00:06:53,240 --> 00:07:00,560
<font color="#E5E5E5">like this</font><font color="#CCCCCC"> I also</font><font color="#E5E5E5"> included the the</font><font color="#CCCCCC"> armed</font>

150
00:06:57,710 --> 00:07:03,710
versions of these<font color="#E5E5E5"> snippets because</font><font color="#CCCCCC"> we</font>

151
00:07:00,560 --> 00:07:06,560
only<font color="#CCCCCC"> cover the</font><font color="#E5E5E5"> thumb versions and yeah I</font>

152
00:07:03,710 --> 00:07:09,320
hope<font color="#E5E5E5"> you learned something and will now</font>

153
00:07:06,560 --> 00:07:15,970
write<font color="#CCCCCC"> your own</font><font color="#E5E5E5"> reverse shells and write</font>

154
00:07:09,320 --> 00:07:19,909
your<font color="#E5E5E5"> own</font><font color="#CCCCCC"> ya</font><font color="#E5E5E5"> detection rules</font><font color="#CCCCCC"> Thanks</font>

155
00:07:15,970 --> 00:07:23,769
[Applause]

156
00:07:19,910 --> 00:07:23,769
[Music]

157
00:07:26,110 --> 00:07:37,769
[Music]

