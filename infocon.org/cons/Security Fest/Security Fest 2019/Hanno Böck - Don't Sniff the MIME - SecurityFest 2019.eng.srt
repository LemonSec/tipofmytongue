1
00:00:00,030 --> 00:00:03,920
I want to talk about cross-site

2
00:00:01,589 --> 00:00:06,390
scripting today which is kind of this

3
00:00:03,920 --> 00:00:09,269
it's probably the vulnerability most

4
00:00:06,390 --> 00:00:13,049
people started with and it's been known

5
00:00:09,269 --> 00:00:16,170
for I don't know since for aters but

6
00:00:13,049 --> 00:00:21,930
they're still kind of new issues coming

7
00:00:16,170 --> 00:00:24,359
up so I guess I hope everyone knows what

8
00:00:21,930 --> 00:00:27,720
cross-site scripting is like the general

9
00:00:24,359 --> 00:00:31,890
idea is we're it's we're somehow able as

10
00:00:27,720 --> 00:00:35,360
an attacker to execute JavaScript on a

11
00:00:31,890 --> 00:00:41,399
webpage that is not our own in the

12
00:00:35,360 --> 00:00:42,930
browser of the victim I'm technically

13
00:00:41,399 --> 00:00:49,860
that's called the origin of another

14
00:00:42,930 --> 00:00:52,980
webpage one thing to how to think about

15
00:00:49,860 --> 00:00:56,250
this is that a JavaScript in a browser

16
00:00:52,980 --> 00:00:59,250
always comes via HTML so we cannot

17
00:00:56,250 --> 00:01:02,670
execute pure JavaScript the browser will

18
00:00:59,250 --> 00:01:05,820
not do anything with it so there are

19
00:01:02,670 --> 00:01:07,799
different ways how to do this like we

20
00:01:05,820 --> 00:01:10,048
can have a script tag and execute

21
00:01:07,799 --> 00:01:11,010
something we can load a script from

22
00:01:10,049 --> 00:01:13,890
somewhere else

23
00:01:11,010 --> 00:01:15,420
or we can have these event handlers but

24
00:01:13,890 --> 00:01:18,840
what all of this has in common is we

25
00:01:15,420 --> 00:01:21,990
have some HTML code that is either

26
00:01:18,840 --> 00:01:25,380
including or reference in JavaScript so

27
00:01:21,990 --> 00:01:26,990
really the way to think about XSS is not

28
00:01:25,380 --> 00:01:30,960
JavaScript interaction its HTML

29
00:01:26,990 --> 00:01:33,810
injection javascript is essentially just

30
00:01:30,960 --> 00:01:36,089
the thing we use later to make this a

31
00:01:33,810 --> 00:01:38,130
security vulnerability to exploit things

32
00:01:36,090 --> 00:01:45,180
but really what we're talking about is

33
00:01:38,130 --> 00:01:47,329
HTML interaction so and usually how this

34
00:01:45,180 --> 00:01:51,390
happens is that we have an HTML document

35
00:01:47,329 --> 00:01:54,649
which has some dynamic content that we

36
00:01:51,390 --> 00:01:59,579
control so this is a very simple example

37
00:01:54,649 --> 00:02:02,729
we have some HTML and then we have some

38
00:01:59,579 --> 00:02:04,469
PHP code in there that is echoing a

39
00:02:02,729 --> 00:02:07,140
variable and that variable is a get

40
00:02:04,469 --> 00:02:10,019
variable this is attacker controlled so

41
00:02:07,140 --> 00:02:14,450
that's a basically the textbook example

42
00:02:10,020 --> 00:02:14,450
of reflected cross-site scripting

43
00:02:14,930 --> 00:02:21,290
so that is kind of the common cross-site

44
00:02:18,890 --> 00:02:23,988
scripting where we haven't an HTML

45
00:02:21,290 --> 00:02:26,030
document and then there's some data in

46
00:02:23,989 --> 00:02:30,470
it that's dynamically included that the

47
00:02:26,030 --> 00:02:32,629
attacker can control but there's another

48
00:02:30,470 --> 00:02:34,849
way how to do cross-site scripting and

49
00:02:32,629 --> 00:02:39,409
that is if we can convince the server to

50
00:02:34,849 --> 00:02:41,179
deliver a whole document as HTML then we

51
00:02:39,409 --> 00:02:43,099
also have cross-site scripting because

52
00:02:41,180 --> 00:02:47,590
the document is delivered from the so we

53
00:02:43,099 --> 00:02:47,589
want to attack so it's in its origin

54
00:02:48,940 --> 00:02:54,639
which I'd like to call file upload XSS

55
00:02:55,510 --> 00:03:00,500
what's important here is how does the

56
00:02:58,250 --> 00:03:03,260
browser actually decide what's an HTML

57
00:03:00,500 --> 00:03:08,840
document like when does it render HTML

58
00:03:03,260 --> 00:03:12,048
and the way the browser you read does

59
00:03:08,840 --> 00:03:14,120
this is that there's a header sent if

60
00:03:12,049 --> 00:03:17,120
you do HTTP request it sends a header

61
00:03:14,120 --> 00:03:21,560
says content type and this has to be

62
00:03:17,120 --> 00:03:23,090
text HTML or can also be text XML but it

63
00:03:21,560 --> 00:03:27,699
has to be a header that where the

64
00:03:23,090 --> 00:03:31,849
browser knows this can contain HTML code

65
00:03:27,699 --> 00:03:34,459
so if we look at this content type

66
00:03:31,849 --> 00:03:36,440
header content types

67
00:03:34,459 --> 00:03:40,359
that can lead to cross-site scripting

68
00:03:36,440 --> 00:03:44,449
our text HTML text XML application XML

69
00:03:40,359 --> 00:03:46,489
XML because like awhile ago people had

70
00:03:44,449 --> 00:03:51,680
this idea we should have kind of strict

71
00:03:46,489 --> 00:03:54,319
XML for HTML it didn't really succeed

72
00:03:51,680 --> 00:03:57,199
but that kind of means you can still

73
00:03:54,319 --> 00:03:59,659
render HTML within an XML document and

74
00:03:57,199 --> 00:04:03,519
then we have these other content types

75
00:03:59,659 --> 00:04:06,798
like text plane or image JPEG

76
00:04:03,519 --> 00:04:08,989
application/octet-stream or also we can

77
00:04:06,799 --> 00:04:11,690
have some bogus content type like which

78
00:04:08,989 --> 00:04:13,669
makes no sense at all but all of these

79
00:04:11,690 --> 00:04:17,449
the browser will usually not render as

80
00:04:13,669 --> 00:04:22,329
HTML usually there are some exceptions

81
00:04:17,449 --> 00:04:22,329
but I'll get to that later

82
00:04:23,510 --> 00:04:31,460
so now let's look at an attack this is

83
00:04:26,830 --> 00:04:33,140
something that that wasn't found by me

84
00:04:31,460 --> 00:04:35,330
that was found by France wasn't I guess

85
00:04:33,140 --> 00:04:38,450
many of you know him

86
00:04:35,330 --> 00:04:41,419
he found an cross-site scripting in an

87
00:04:38,450 --> 00:04:43,580
implementation of Acme Acme is the

88
00:04:41,420 --> 00:04:45,560
protocol used by let's encrypt to

89
00:04:43,580 --> 00:04:50,750
validate that you own a domain when you

90
00:04:45,560 --> 00:04:53,930
want to get a certificate and one step

91
00:04:50,750 --> 00:04:58,340
in that validation is that on your

92
00:04:53,930 --> 00:05:02,510
server you have to put a file that's

93
00:04:58,340 --> 00:05:06,229
named after token so it's basically a

94
00:05:02,510 --> 00:05:09,650
hex number and then the response must be

95
00:05:06,230 --> 00:05:11,510
that token plus another token what these

96
00:05:09,650 --> 00:05:15,280
tokens are doesn't matter for us right

97
00:05:11,510 --> 00:05:18,289
now it's some cryptographic thing

98
00:05:15,280 --> 00:05:20,090
but what you can see here is that okay

99
00:05:18,290 --> 00:05:23,300
we have something in the request that

100
00:05:20,090 --> 00:05:25,909
ends up in the response and there are

101
00:05:23,300 --> 00:05:29,720
some implementations that implement this

102
00:05:25,910 --> 00:05:31,700
is simply reflecting that there's from

103
00:05:29,720 --> 00:05:33,650
the protocol side a reason why this is

104
00:05:31,700 --> 00:05:37,610
in some situations simpler you can kind

105
00:05:33,650 --> 00:05:39,590
of implement this in a stateless way so

106
00:05:37,610 --> 00:05:42,370
there are some server implementations

107
00:05:39,590 --> 00:05:46,010
that if you send a request to this URL

108
00:05:42,370 --> 00:05:51,310
you will get back what's in that part of

109
00:05:46,010 --> 00:05:54,440
the URL so yeah this looks like a

110
00:05:51,310 --> 00:05:57,920
classic reflected cross-site scripting

111
00:05:54,440 --> 00:05:59,719
attack except that this what comes back

112
00:05:57,920 --> 00:06:03,170
there is not really an HTML document

113
00:05:59,720 --> 00:06:07,480
it's a text document so it shouldn't

114
00:06:03,170 --> 00:06:07,480
have this content type HTML header

115
00:06:07,780 --> 00:06:12,739
however this is a quote from the blog

116
00:06:11,540 --> 00:06:15,800
post I showed you earlier

117
00:06:12,740 --> 00:06:18,140
it says yeah there's an old mod to

118
00:06:15,800 --> 00:06:20,120
Apache called magic mind that tries to

119
00:06:18,140 --> 00:06:22,550
figure out the content type depending on

120
00:06:20,120 --> 00:06:24,620
the first bytes of the response for

121
00:06:22,550 --> 00:06:29,560
example B would lead to content type

122
00:06:24,620 --> 00:06:32,930
text HTML what that means is like if you

123
00:06:29,560 --> 00:06:36,569
put some HTML in there then the server

124
00:06:32,930 --> 00:06:39,589
will guess the type based on the content

125
00:06:36,569 --> 00:06:45,240
and send it as a content-type takes HTML

126
00:06:39,589 --> 00:06:47,610
so this doesn't sound good and when I

127
00:06:45,240 --> 00:06:49,349
read this is basically this was the

128
00:06:47,610 --> 00:06:52,619
starting point where I started looking

129
00:06:49,349 --> 00:06:55,378
into this and thought okay there are

130
00:06:52,619 --> 00:07:00,990
probably more problems with that than

131
00:06:55,379 --> 00:07:03,869
just this single vulnerability so what's

132
00:07:00,990 --> 00:07:05,759
this Apache module Apache mod my metric

133
00:07:03,869 --> 00:07:10,529
I'd like to call it a module that

134
00:07:05,759 --> 00:07:14,550
enables XSS attacks it introduces mine

135
00:07:10,529 --> 00:07:18,389
sniffing so what it does is here's the

136
00:07:14,550 --> 00:07:20,309
documentation this module determines the

137
00:07:18,389 --> 00:07:22,379
mime type of files in the same way the

138
00:07:20,309 --> 00:07:26,580
UNIX file command works it looks at the

139
00:07:22,379 --> 00:07:29,580
first few bytes of the file so it checks

140
00:07:26,580 --> 00:07:32,308
what's in that file and if something

141
00:07:29,580 --> 00:07:37,709
looks familiar it tries to kind of guess

142
00:07:32,309 --> 00:07:40,439
what kind of file that is it already

143
00:07:37,709 --> 00:07:44,159
mentions the UNIX file comment here so

144
00:07:40,439 --> 00:07:48,749
the code is an old fork of this file

145
00:07:44,159 --> 00:07:53,099
utility that happens somewhere in the

146
00:07:48,749 --> 00:07:56,419
90s if you read okay some 90 C code is

147
00:07:53,099 --> 00:08:01,349
parsing files it's very complex parsing

148
00:07:56,419 --> 00:08:02,758
doesn't sound good yes they you think

149
00:08:01,349 --> 00:08:04,529
yeah that's probably they're probably

150
00:08:02,759 --> 00:08:08,339
buffer overflows in their memory

151
00:08:04,529 --> 00:08:10,800
corruption vulnerabilities I haven't

152
00:08:08,339 --> 00:08:13,259
found any but also the code was not very

153
00:08:10,800 --> 00:08:16,999
friendly to testing if someone wants to

154
00:08:13,259 --> 00:08:19,409
look into this I can only encourage that

155
00:08:16,999 --> 00:08:26,009
but also we have other problems with

156
00:08:19,409 --> 00:08:29,129
that yeah so if we have an Apache server

157
00:08:26,009 --> 00:08:32,399
with this mod my metric module what it

158
00:08:29,129 --> 00:08:34,709
does actually is if if it serves the

159
00:08:32,399 --> 00:08:39,089
file it first checks the file extension

160
00:08:34,708 --> 00:08:41,909
if that file extension is in the et Cie

161
00:08:39,089 --> 00:08:44,360
mime types file and has a content type

162
00:08:41,909 --> 00:08:47,490
register there then it will use net and

163
00:08:44,360 --> 00:08:50,089
if not it will try to guess it based on

164
00:08:47,490 --> 00:08:50,089
its content

165
00:08:51,280 --> 00:08:58,420
so what that means is if we have a web

166
00:08:56,270 --> 00:09:02,840
application that allows us to upload

167
00:08:58,420 --> 00:09:03,860
files with a file type that's kind of

168
00:09:02,840 --> 00:09:06,530
unusual

169
00:09:03,860 --> 00:09:09,620
that's not registered in this global

170
00:09:06,530 --> 00:09:11,870
mime types configuration then this leads

171
00:09:09,620 --> 00:09:14,690
to a cross-site scripting attack because

172
00:09:11,870 --> 00:09:17,300
we can upload HTML with this unusual

173
00:09:14,690 --> 00:09:19,550
extension Apache will not be able to

174
00:09:17,300 --> 00:09:22,400
determine the content type based on the

175
00:09:19,550 --> 00:09:24,199
extension will try to auto detect it

176
00:09:22,400 --> 00:09:30,319
with this mode my magic and we'll set

177
00:09:24,200 --> 00:09:33,920
the HTML content type what's this

178
00:09:30,320 --> 00:09:38,290
ATC mime types file so that's basically

179
00:09:33,920 --> 00:09:42,560
a standard thing under all UNIX systems

180
00:09:38,290 --> 00:09:45,349
so it's a simple text file which has a

181
00:09:42,560 --> 00:09:49,369
mime type on the Left file extensions on

182
00:09:45,350 --> 00:09:53,540
the right so these are for HTML let's

183
00:09:49,370 --> 00:09:56,420
looks like okay dot HTM dot HTML and dot

184
00:09:53,540 --> 00:09:59,209
s HTML I don't know what that is but

185
00:09:56,420 --> 00:10:03,589
they all should get served with the text

186
00:09:59,210 --> 00:10:06,140
HTML mime type similar for jpg but also

187
00:10:03,590 --> 00:10:09,890
we have all kinds of very unusual file

188
00:10:06,140 --> 00:10:13,510
types I don't know what IG s is but it

189
00:10:09,890 --> 00:10:13,510
also has a mime type register there

190
00:10:14,920 --> 00:10:20,390
what's unfortunate about this file is

191
00:10:18,260 --> 00:10:21,980
it's not standardized at all so

192
00:10:20,390 --> 00:10:24,380
basically every Linux distribution

193
00:10:21,980 --> 00:10:26,330
maintains their own copy of that file

194
00:10:24,380 --> 00:10:28,570
and when they think ok we need a new

195
00:10:26,330 --> 00:10:31,190
mime type we add it to that file but

196
00:10:28,570 --> 00:10:33,740
it's not standardized so you cannot

197
00:10:31,190 --> 00:10:35,540
really rely on anything in there they

198
00:10:33,740 --> 00:10:38,560
are completely different among different

199
00:10:35,540 --> 00:10:38,560
Linux distributions

200
00:10:40,650 --> 00:10:47,340
okay so this what my magic module is

201
00:10:44,270 --> 00:10:53,550
dangerous so probably we should just

202
00:10:47,340 --> 00:10:55,620
disable it good idea but if you're in

203
00:10:53,550 --> 00:10:59,069
shared hosting you cannot really do that

204
00:10:55,620 --> 00:11:00,540
because it's because I'm not possible to

205
00:10:59,070 --> 00:11:02,850
disable this in an HTTP access

206
00:11:00,540 --> 00:11:04,709
configuration file or per virtual host

207
00:11:02,850 --> 00:11:07,950
you can only disable it for the whole

208
00:11:04,710 --> 00:11:11,610
web server it's kind of either on or off

209
00:11:07,950 --> 00:11:13,140
so if you're a customer of a shared

210
00:11:11,610 --> 00:11:18,660
hosting provider and they have it

211
00:11:13,140 --> 00:11:21,540
enabled there's nothing you can do but

212
00:11:18,660 --> 00:11:29,370
if we disable it then we're kind of good

213
00:11:21,540 --> 00:11:31,620
right well unfortunately not because

214
00:11:29,370 --> 00:11:34,170
what happens if the web server cannot

215
00:11:31,620 --> 00:11:36,450
identify the mime type like it cannot

216
00:11:34,170 --> 00:11:38,670
identify it based on the mime types file

217
00:11:36,450 --> 00:11:41,970
and we have disabled my magic so it

218
00:11:38,670 --> 00:11:43,709
doesn't try to guess it it will just

219
00:11:41,970 --> 00:11:49,680
send the file without the content type

220
00:11:43,710 --> 00:11:51,390
header and then there's the browser and

221
00:11:49,680 --> 00:11:54,449
browsers also do my I'm sniffing and

222
00:11:51,390 --> 00:11:56,490
there's even a stand out for that but

223
00:11:54,450 --> 00:11:58,260
that the SS standard doesn't mean that

224
00:11:56,490 --> 00:12:02,070
browsers do what's written in the

225
00:11:58,260 --> 00:12:06,300
standard or that it's consistent but

226
00:12:02,070 --> 00:12:08,430
still they the browser will also do mime

227
00:12:06,300 --> 00:12:11,040
sniffing if the browser sees a file

228
00:12:08,430 --> 00:12:13,319
without a type without a content type it

229
00:12:11,040 --> 00:12:16,469
will try to guess based on its content

230
00:12:13,320 --> 00:12:23,010
what it is and if there's HTML code in

231
00:12:16,470 --> 00:12:27,530
it it will try to render it yeah so if

232
00:12:23,010 --> 00:12:30,930
you send HTML that's for a trusted so

233
00:12:27,530 --> 00:12:36,260
basically the same attack works just as

234
00:12:30,930 --> 00:12:36,260
well without this mod my magic module

235
00:12:37,160 --> 00:12:42,270
but some of you might say yeah but

236
00:12:39,840 --> 00:12:43,770
there's this Security header like there

237
00:12:42,270 --> 00:12:45,390
I don't know there are these web pages

238
00:12:43,770 --> 00:12:47,430
where you can check if your website

239
00:12:45,390 --> 00:12:49,480
sends all these fancy security headers

240
00:12:47,430 --> 00:12:51,670
and then you get a nice screen

241
00:12:49,480 --> 00:12:54,279
and one of them is this X content type

242
00:12:51,670 --> 00:12:57,899
options no sniff with this we can

243
00:12:54,279 --> 00:12:57,899
disable mime sniffing in the browser

244
00:12:58,209 --> 00:13:03,910
yes documentation from Mozilla developer

245
00:13:00,820 --> 00:13:06,310
Network sis yeah the X content type

246
00:13:03,910 --> 00:13:08,290
options response HTTP header is a marker

247
00:13:06,310 --> 00:13:10,089
used by the server to indicate that the

248
00:13:08,290 --> 00:13:12,610
mime types advertised in the contact

249
00:13:10,089 --> 00:13:15,459
type errors should not be changed and be

250
00:13:12,610 --> 00:13:17,560
followed this allows to opt out of mime

251
00:13:15,459 --> 00:13:19,660
type sniffing sounds good right exactly

252
00:13:17,560 --> 00:13:22,630
what we want we don't want to have these

253
00:13:19,660 --> 00:13:24,189
risks from mime sniffing or in other

254
00:13:22,630 --> 00:13:28,810
words it's a way to say that the

255
00:13:24,190 --> 00:13:30,040
webmaster knew what they were doing okay

256
00:13:28,810 --> 00:13:32,619
sounds good

257
00:13:30,040 --> 00:13:34,719
we can set this X content type options

258
00:13:32,620 --> 00:13:38,830
no sniff and then we are safe from these

259
00:13:34,720 --> 00:13:42,450
attacks wait no not so fast

260
00:13:38,830 --> 00:13:44,980
we we have to read the fine print here

261
00:13:42,450 --> 00:13:49,209
if we continue reading on that web page

262
00:13:44,980 --> 00:13:52,750
at some point it says note no sniff only

263
00:13:49,209 --> 00:13:54,579
applies to script and stereotypes also

264
00:13:52,750 --> 00:13:56,440
applying no sniff to images turned out

265
00:13:54,579 --> 00:14:01,779
to be incompatible with existing

266
00:13:56,440 --> 00:14:04,360
websites so okay it tells us it applies

267
00:14:01,779 --> 00:14:06,850
to script and snare files it doesn't

268
00:14:04,360 --> 00:14:08,770
apply to images but it doesn't say

269
00:14:06,850 --> 00:14:10,899
anything about the direct navigation

270
00:14:08,770 --> 00:14:17,610
like if we're directly opening that file

271
00:14:10,899 --> 00:14:17,610
it doesn't say anything about HTML M and

272
00:14:17,730 --> 00:14:22,930
it's actually wildly inconsistent

273
00:14:20,079 --> 00:14:26,560
between prowess how this behaves if you

274
00:14:22,930 --> 00:14:30,250
have a direct navigation in chrome it

275
00:14:26,560 --> 00:14:32,649
will display a file as text in Safari it

276
00:14:30,250 --> 00:14:35,170
will try to download it and in both

277
00:14:32,649 --> 00:14:37,300
Firefox and edge it will sniff the mime

278
00:14:35,170 --> 00:14:41,880
type and it will render HTML if there's

279
00:14:37,300 --> 00:14:41,880
HTML in it despite the no sniff error

280
00:14:42,149 --> 00:14:47,200
then I found very interesting because

281
00:14:44,529 --> 00:14:49,839
this seems to be the most dangerous form

282
00:14:47,200 --> 00:14:51,850
of mime sniffing but then they asked

283
00:14:49,839 --> 00:14:54,100
this header whichever many people are

284
00:14:51,850 --> 00:14:56,950
using and think that this disables mind

285
00:14:54,100 --> 00:15:01,199
sniffing but at least in two browsers it

286
00:14:56,950 --> 00:15:01,199
it doesn't do what you expect it to do

287
00:15:02,220 --> 00:15:07,810
yeah so in both Firefox and etched HTML

288
00:15:05,620 --> 00:15:13,240
will be sniffed despite content type

289
00:15:07,810 --> 00:15:15,550
options no sniff Mozilla they kind of

290
00:15:13,240 --> 00:15:19,480
accept that this should be considered a

291
00:15:15,550 --> 00:15:21,250
back they said they wanted to fix it but

292
00:15:19,480 --> 00:15:26,800
it hasn't happened yet so there's an

293
00:15:21,250 --> 00:15:29,380
open box but yeah Microsoft when I

294
00:15:26,800 --> 00:15:31,120
reported this they told me yeah we have

295
00:15:29,380 --> 00:15:33,130
completed our investigation and the

296
00:15:31,120 --> 00:15:35,230
behavior that we reported has minimal

297
00:15:33,130 --> 00:15:38,500
impact and therefore does not meet our

298
00:15:35,230 --> 00:15:40,180
buffer servicing at this time I guess

299
00:15:38,500 --> 00:15:46,230
this is a friendly way of saying we

300
00:15:40,180 --> 00:15:49,150
don't care what I assume is I mean

301
00:15:46,230 --> 00:15:51,850
Microsoft edge is kind of dead they want

302
00:15:49,150 --> 00:15:54,579
to move to the chrome codebase and then

303
00:15:51,850 --> 00:16:00,700
it will probably be fixed by that so

304
00:15:54,580 --> 00:16:03,550
maybe it's fine yeah okay but if we take

305
00:16:00,700 --> 00:16:06,550
this together that means if we have a

306
00:16:03,550 --> 00:16:09,040
web application that allows uploads

307
00:16:06,550 --> 00:16:12,280
of annual file types that are not in the

308
00:16:09,040 --> 00:16:14,650
mime types file and the web server has

309
00:16:12,280 --> 00:16:17,319
is not my metric or is another web

310
00:16:14,650 --> 00:16:19,630
server that does the same thing or if

311
00:16:17,320 --> 00:16:22,360
the web application is not setting this

312
00:16:19,630 --> 00:16:25,540
content type options no sniff header or

313
00:16:22,360 --> 00:16:32,020
if all browser is Firefox aah then we

314
00:16:25,540 --> 00:16:33,969
have core site scripting okay and so

315
00:16:32,020 --> 00:16:35,470
that you believe me that I just didn't

316
00:16:33,970 --> 00:16:38,740
just make that up and it never happens

317
00:16:35,470 --> 00:16:43,600
for real here's an example WordPress the

318
00:16:38,740 --> 00:16:46,060
most famous content management system if

319
00:16:43,600 --> 00:16:47,770
you have an author permission in

320
00:16:46,060 --> 00:16:51,550
WordPress which kind of means you're

321
00:16:47,770 --> 00:16:54,189
allowed to to write stuff on the web

322
00:16:51,550 --> 00:16:56,260
page it shouldn't mean that you're

323
00:16:54,190 --> 00:17:00,400
allowed to execute JavaScript and steal

324
00:16:56,260 --> 00:17:03,790
the administrators account then you can

325
00:17:00,400 --> 00:17:07,990
upload media files and what's the media

326
00:17:03,790 --> 00:17:09,879
file in WordPress looking at the code

327
00:17:07,990 --> 00:17:12,790
this this is all what WordPress

328
00:17:09,880 --> 00:17:14,550
considers to be a media file plenty of

329
00:17:12,790 --> 00:17:17,409
file extensions

330
00:17:14,550 --> 00:17:20,948
the one that I figured out was most

331
00:17:17,410 --> 00:17:23,650
interesting for us was the 3G to file

332
00:17:20,949 --> 00:17:27,640
extension it seems to be some ancient

333
00:17:23,650 --> 00:17:31,090
video format that was used by mobile

334
00:17:27,640 --> 00:17:33,670
phones in the past I think I've never

335
00:17:31,090 --> 00:17:39,370
seen such a file in the wild but you can

336
00:17:33,670 --> 00:17:42,430
upload it to a web press blog the nice

337
00:17:39,370 --> 00:17:44,649
thing about this 3G too is that on

338
00:17:42,430 --> 00:17:48,160
Debian and Ubuntu which is very common

339
00:17:44,650 --> 00:17:55,690
on servers for hosting this extension is

340
00:17:48,160 --> 00:17:57,490
not in the mime types file so there's

341
00:17:55,690 --> 00:18:01,000
another barrier we need here so

342
00:17:57,490 --> 00:18:04,090
WordPress is trying to be smart it is by

343
00:18:01,000 --> 00:18:07,060
itself trying to detect the type of a

344
00:18:04,090 --> 00:18:09,580
file you upload and if it doesn't match

345
00:18:07,060 --> 00:18:12,879
what it expects then it will not be

346
00:18:09,580 --> 00:18:18,909
accepted but if it cannot detect the

347
00:18:12,880 --> 00:18:21,160
file type then it will be accepted so so

348
00:18:18,910 --> 00:18:23,770
we need to create a file that lip magic

349
00:18:21,160 --> 00:18:26,890
which is kind of the backend library to

350
00:18:23,770 --> 00:18:29,710
detect file types used by PHP and then

351
00:18:26,890 --> 00:18:31,690
used by WordPress will not identify as a

352
00:18:29,710 --> 00:18:36,970
valid file type but the browser will

353
00:18:31,690 --> 00:18:40,150
identify it as HTML I haven't managed to

354
00:18:36,970 --> 00:18:43,960
do it for chrome but this works in

355
00:18:40,150 --> 00:18:47,800
Firefox so we have a simple cross side

356
00:18:43,960 --> 00:18:49,360
scripting vector so if you haven't seen

357
00:18:47,800 --> 00:18:51,879
this before this basically we're loading

358
00:18:49,360 --> 00:18:54,280
an image but we put some garbage value

359
00:18:51,880 --> 00:18:56,680
in there and then we have a handler on

360
00:18:54,280 --> 00:18:59,649
arrow where we can put our code and

361
00:18:56,680 --> 00:19:01,240
because this is not a valid image it

362
00:18:59,650 --> 00:19:06,430
cannot be loaded so the code will be

363
00:19:01,240 --> 00:19:10,630
executed and then this bracket

364
00:19:06,430 --> 00:19:13,210
exclamation mark - thing that is an HTML

365
00:19:10,630 --> 00:19:14,710
comment and that is one of the ways how

366
00:19:13,210 --> 00:19:17,140
you can convince the browser that this

367
00:19:14,710 --> 00:19:19,210
is HTML so this is just there so the

368
00:19:17,140 --> 00:19:21,520
browser will see that this is HTML code

369
00:19:19,210 --> 00:19:25,090
and then we put some binary garbage

370
00:19:21,520 --> 00:19:26,030
there the reason for that is if we don't

371
00:19:25,090 --> 00:19:27,919
do that

372
00:19:26,030 --> 00:19:30,649
lip magic will think this is a text

373
00:19:27,920 --> 00:19:32,570
document or an sgml document I played

374
00:19:30,650 --> 00:19:34,850
around with it a while and if you put

375
00:19:32,570 --> 00:19:37,280
some binary garbage there then it will

376
00:19:34,850 --> 00:19:42,020
not identify it as anything but the

377
00:19:37,280 --> 00:19:48,500
browser will add in Firefox will so I

378
00:19:42,020 --> 00:19:53,300
have a demo for that so so here's our

379
00:19:48,500 --> 00:19:55,160
exploit that what you just saw plus some

380
00:19:53,300 --> 00:20:02,240
deaths just output of the a few random

381
00:19:55,160 --> 00:20:05,930
and we have WordPress block here and we

382
00:20:02,240 --> 00:20:08,870
have a user Alice and Alice is an author

383
00:20:05,930 --> 00:20:13,490
on this block so she's allowed to create

384
00:20:08,870 --> 00:20:15,739
posts and she's allowed to add media

385
00:20:13,490 --> 00:20:21,320
files so unfortunately I have forgotten

386
00:20:15,740 --> 00:20:25,760
to delete the previous test okay so we

387
00:20:21,320 --> 00:20:30,860
add a new file this is our exploit with

388
00:20:25,760 --> 00:20:37,610
extension 3e g2o

389
00:20:30,860 --> 00:20:41,240
match okay and here it tells us where it

390
00:20:37,610 --> 00:20:45,090
got uploaded the URL and if we open that

391
00:20:41,240 --> 00:20:51,510
we can execute JavaScript

392
00:20:45,090 --> 00:20:59,350
[Applause]

393
00:20:51,510 --> 00:21:02,460
yep I reported this in September last

394
00:20:59,350 --> 00:21:08,860
year it's still not fixed

395
00:21:02,460 --> 00:21:13,060
yeah yeah I know I amount that I will

396
00:21:08,860 --> 00:21:16,360
disclose it so yeah next example is

397
00:21:13,060 --> 00:21:18,669
mailman and Piper Mayer so mailman is

398
00:21:16,360 --> 00:21:21,040
kind of the standard software for

399
00:21:18,670 --> 00:21:23,710
mailing lists I mean I know mailing

400
00:21:21,040 --> 00:21:25,540
lists are kind of 90s thing and but they

401
00:21:23,710 --> 00:21:29,710
are still people using mailing lists not

402
00:21:25,540 --> 00:21:32,350
everyone has moved to slack and mailman

403
00:21:29,710 --> 00:21:33,910
- like mailman - is the version that

404
00:21:32,350 --> 00:21:36,790
everyone's using there's also a mailman

405
00:21:33,910 --> 00:21:39,430
three but I think almost nobody's using

406
00:21:36,790 --> 00:21:41,620
that so merriment - it comes with the

407
00:21:39,430 --> 00:21:45,300
tool called Piper mail that is used to

408
00:21:41,620 --> 00:21:49,600
create the mailing list archives and

409
00:21:45,300 --> 00:21:50,860
what does this do with attachments if

410
00:21:49,600 --> 00:21:55,300
you have a mail with an unknown

411
00:21:50,860 --> 00:21:58,740
extension or with no extension it it

412
00:21:55,300 --> 00:22:01,740
will rename it to attachment dot obj

413
00:21:58,740 --> 00:22:01,740
okay

414
00:22:02,490 --> 00:22:09,520
maven also tries to detect if there's

415
00:22:05,230 --> 00:22:11,470
HTML in it and will not do that will

416
00:22:09,520 --> 00:22:13,360
remove the attachment but the same

417
00:22:11,470 --> 00:22:17,260
bypass that worked for WordPress works

418
00:22:13,360 --> 00:22:21,429
here as well it's it's using the same

419
00:22:17,260 --> 00:22:24,580
code in the back end ok what's an obj

420
00:22:21,430 --> 00:22:29,530
extension it's not in the mime types

421
00:22:24,580 --> 00:22:32,350
file on any major distribution interim -

422
00:22:29,530 --> 00:22:34,930
it isn't the mime types file it's

423
00:22:32,350 --> 00:22:40,659
actually a TG file which seems to be

424
00:22:34,930 --> 00:22:44,290
some image format but so if you're using

425
00:22:40,660 --> 00:22:45,910
Gentle you're safe from this but on all

426
00:22:44,290 --> 00:22:49,930
the other I actually have a madman

427
00:22:45,910 --> 00:22:51,520
installation on a trencher server so but

428
00:22:49,930 --> 00:22:56,720
on all the mainstream Linux

429
00:22:51,520 --> 00:22:58,910
distributions this is dangerous

430
00:22:56,720 --> 00:23:00,800
so this means we have a cross-site

431
00:22:58,910 --> 00:23:06,890
scripting for pretty much all mailman

432
00:23:00,800 --> 00:23:09,230
mailing lists with a public archive they

433
00:23:06,890 --> 00:23:11,210
changed the default extension from obj

434
00:23:09,230 --> 00:23:13,100
to bin so in the past this was kind of

435
00:23:11,210 --> 00:23:15,440
configurable you could have either or

436
00:23:13,100 --> 00:23:18,199
but obj was the default they change the

437
00:23:15,440 --> 00:23:23,000
default but they have not made a release

438
00:23:18,200 --> 00:23:29,240
with that fix yet and we also have a

439
00:23:23,000 --> 00:23:33,440
demo here so so we have a mailing list

440
00:23:29,240 --> 00:23:38,570
here which is called happy list and it

441
00:23:33,440 --> 00:23:41,990
has a public archive and we have a list

442
00:23:38,570 --> 00:23:47,929
again and Ellis is a member of that

443
00:23:41,990 --> 00:23:57,670
mailing list and we'll send an email to

444
00:23:47,930 --> 00:23:57,670
that list yep hello from security fest

445
00:23:58,270 --> 00:24:11,900
it's really nice and awesome and we add

446
00:24:07,280 --> 00:24:13,520
an attachment the the content of that

447
00:24:11,900 --> 00:24:15,920
attachment is the same as we had before

448
00:24:13,520 --> 00:24:19,100
with WordPress but now we have one with

449
00:24:15,920 --> 00:24:23,600
without an extension it's just a file

450
00:24:19,100 --> 00:24:35,899
it's called Explorer extension upload

451
00:24:23,600 --> 00:24:38,600
and sent yeah here is the public archive

452
00:24:35,900 --> 00:24:42,640
hello from security fest and here's an

453
00:24:38,600 --> 00:24:45,759
attachment to that mail and it will exit

454
00:24:42,640 --> 00:24:45,759
[Music]

455
00:24:48,060 --> 00:24:56,020
okay so I found more vulnerable

456
00:24:52,420 --> 00:24:59,200
applications in Joomla they it worked

457
00:24:56,020 --> 00:25:00,910
with xcf files on fedora I mean SEC it's

458
00:24:59,200 --> 00:25:02,730
always kind of dependent on the Linux

459
00:25:00,910 --> 00:25:06,490
distribution whether it's vulnerable

460
00:25:02,730 --> 00:25:08,860
they somewhat mitigated that although it

461
00:25:06,490 --> 00:25:11,230
only works on new installations

462
00:25:08,860 --> 00:25:13,810
otherwise you have to copy some stuff in

463
00:25:11,230 --> 00:25:15,940
your HT excess file so how they try to

464
00:25:13,810 --> 00:25:20,200
fix it is that for all the file types

465
00:25:15,940 --> 00:25:22,780
they have allowed by default they will

466
00:25:20,200 --> 00:25:25,990
force the mime type by setting it in the

467
00:25:22,780 --> 00:25:29,230
HT excess configuration and they also

468
00:25:25,990 --> 00:25:30,940
changed it they will set a default mime

469
00:25:29,230 --> 00:25:32,890
type for all the other file extensions

470
00:25:30,940 --> 00:25:35,410
and they also said the notion of header

471
00:25:32,890 --> 00:25:39,010
which only works in some browsers as we

472
00:25:35,410 --> 00:25:42,310
learned earlier and also a software

473
00:25:39,010 --> 00:25:45,129
called Val in vanilla form disallowed

474
00:25:42,310 --> 00:25:48,190
uploading of Fla files and they are not

475
00:25:45,130 --> 00:25:54,700
in any distributions mime types also

476
00:25:48,190 --> 00:25:57,760
still on unfixed okay what can we do

477
00:25:54,700 --> 00:26:00,790
about this you might think can we

478
00:25:57,760 --> 00:26:03,510
prevent these attacks if we always send

479
00:26:00,790 --> 00:26:08,020
a mime type so if we tell our web server

480
00:26:03,510 --> 00:26:09,970
if you cannot identify the type of that

481
00:26:08,020 --> 00:26:12,940
file based on the extension maybe just

482
00:26:09,970 --> 00:26:19,150
send it as text plain because that

483
00:26:12,940 --> 00:26:22,350
should be safe so yeah let's set a safe

484
00:26:19,150 --> 00:26:25,480
mime type for all the unknown files

485
00:26:22,350 --> 00:26:27,219
Apache if you go for that for Apache a

486
00:26:25,480 --> 00:26:29,010
you will find that there's a directive

487
00:26:27,220 --> 00:26:31,690
default type for the configuration

488
00:26:29,010 --> 00:26:37,060
however it has been removed in Apache

489
00:26:31,690 --> 00:26:38,830
2.4 so why is that I thought like yeah

490
00:26:37,060 --> 00:26:41,379
that's exactly the option I need then

491
00:26:38,830 --> 00:26:48,159
I'm safe from this attack and it's been

492
00:26:41,380 --> 00:26:51,370
removed there's a document called w3c

493
00:26:48,160 --> 00:26:52,990
standard authoritative metadata which I

494
00:26:51,370 --> 00:26:56,010
would like to call a standard to enable

495
00:26:52,990 --> 00:26:59,080
cross-site scripting attacks

496
00:26:56,010 --> 00:27:01,679
so it says yeah server software

497
00:26:59,080 --> 00:27:04,330
designers should not specify default

498
00:27:01,679 --> 00:27:06,549
representation meet metadata such as

499
00:27:04,330 --> 00:27:08,020
media type character encoding or content

500
00:27:06,549 --> 00:27:10,470
language within the standard

501
00:27:08,020 --> 00:27:13,179
configuration ship with the server

502
00:27:10,470 --> 00:27:15,340
instead of specifying a default for

503
00:27:13,179 --> 00:27:17,860
metadata it's better for representations

504
00:27:15,340 --> 00:27:19,870
to be sent without that metadata this

505
00:27:17,860 --> 00:27:22,870
allows the recipient to guess the

506
00:27:19,870 --> 00:27:24,669
metadata instead of theme first I like

507
00:27:22,870 --> 00:27:27,580
certain which are being tempted so it's

508
00:27:24,670 --> 00:27:29,559
basically saying you should do exactly

509
00:27:27,580 --> 00:27:33,280
that which will lead to the cross-site

510
00:27:29,559 --> 00:27:35,860
scripting attack and the same thing yes

511
00:27:33,280 --> 00:27:37,299
if you if your so the first thing

512
00:27:35,860 --> 00:27:38,830
basically said it shouldn't be the

513
00:27:37,299 --> 00:27:40,809
default and the second thing is if

514
00:27:38,830 --> 00:27:47,639
you're administering a server you

515
00:27:40,809 --> 00:27:50,530
shouldn't do that it gets even crazier

516
00:27:47,640 --> 00:27:52,900
earlier versions of Apache did send the

517
00:27:50,530 --> 00:27:55,480
default content-type

518
00:27:52,900 --> 00:27:57,640
they sent text plane and the mime

519
00:27:55,480 --> 00:27:59,799
sniffing standard for browser says that

520
00:27:57,640 --> 00:28:01,720
browsers should try to detect if this is

521
00:27:59,799 --> 00:28:06,030
an Apache server sending the default

522
00:28:01,720 --> 00:28:06,030
mine type and then they should ignore it

523
00:28:09,000 --> 00:28:13,059
so yeah setting a default mime type

524
00:28:11,350 --> 00:28:14,590
would prevent these attacks but it seems

525
00:28:13,059 --> 00:28:21,730
people writing standards really don't

526
00:28:14,590 --> 00:28:24,220
like it nginx does send a default mime

527
00:28:21,730 --> 00:28:26,799
type it's application/octet-stream which

528
00:28:24,220 --> 00:28:31,270
basically just says binary data and it

529
00:28:26,799 --> 00:28:37,480
will be downloaded yeah this is secure

530
00:28:31,270 --> 00:28:43,389
but it's against the standards so then a

531
00:28:37,480 --> 00:28:45,460
few more things file extensions so we

532
00:28:43,390 --> 00:28:47,500
learned earlier usually a web server

533
00:28:45,460 --> 00:28:52,720
decides based on the file extension what

534
00:28:47,500 --> 00:28:54,790
mime type to use here's some PHP code

535
00:28:52,720 --> 00:28:56,290
and I'd like to ask you if you think

536
00:28:54,790 --> 00:29:00,159
that this is safe from cross-site

537
00:28:56,290 --> 00:29:01,659
scripting so and specifically cross-site

538
00:29:00,160 --> 00:29:03,910
scripting because I know there could be

539
00:29:01,660 --> 00:29:05,740
directory traversal due to the file name

540
00:29:03,910 --> 00:29:08,440
that's not what I'm looking at but what

541
00:29:05,740 --> 00:29:09,730
we're doing here is we're using

542
00:29:08,440 --> 00:29:12,790
we're basically checking the file

543
00:29:09,730 --> 00:29:17,710
extension if it's jpg PNG or jiff then

544
00:29:12,790 --> 00:29:19,840
it's okay if not we set an error and if

545
00:29:17,710 --> 00:29:23,290
it's okay we will move this file to the

546
00:29:19,840 --> 00:29:28,510
uploaded files directory so who thinks

547
00:29:23,290 --> 00:29:39,909
this is not safe can anyone tell me why

548
00:29:28,510 --> 00:29:42,480
it's not safe yeah okay so what about if

549
00:29:39,910 --> 00:29:46,390
we have a file that's named dot JPEG

550
00:29:42,480 --> 00:29:52,270
without anything in front it's kind of

551
00:29:46,390 --> 00:29:59,440
just a file extension what is the file

552
00:29:52,270 --> 00:30:03,250
extension here opinions no file

553
00:29:59,440 --> 00:30:07,350
extension says so on so the interesting

554
00:30:03,250 --> 00:30:07,350
thing is PHP and Apache disagree on that

555
00:30:07,710 --> 00:30:14,200
so PHP is in the documentation if the

556
00:30:12,310 --> 00:30:16,000
base name of the past dot is the dot the

557
00:30:14,200 --> 00:30:18,240
following characters are interpreted as

558
00:30:16,000 --> 00:30:21,730
extension and the file name is empty

559
00:30:18,240 --> 00:30:26,320
okay so it says it's a empty filename

560
00:30:21,730 --> 00:30:28,600
with the extension dot jpg Apache says

561
00:30:26,320 --> 00:30:31,780
leading dogs are considered to be part

562
00:30:28,600 --> 00:30:34,540
of the base name a file name dot PNG is

563
00:30:31,780 --> 00:30:38,139
likely not a PNG file but just a file

564
00:30:34,540 --> 00:30:40,899
called PNG so what that means is if you

565
00:30:38,140 --> 00:30:42,850
have a code like before then PHP will

566
00:30:40,900 --> 00:30:44,890
think it's a JPEG file so it's fine but

567
00:30:42,850 --> 00:30:46,870
Apache will think it's just a file

568
00:30:44,890 --> 00:30:51,060
without a type and it will send it

569
00:30:46,870 --> 00:30:54,040
without a content type or or it will

570
00:30:51,060 --> 00:31:00,970
guess the type if it has this mod my

571
00:30:54,040 --> 00:31:03,909
metric so this is not safe yeah so file

572
00:31:00,970 --> 00:31:06,520
name dot jpg we passed the track in PHP

573
00:31:03,910 --> 00:31:08,290
but Apache will serve it without a mime

574
00:31:06,520 --> 00:31:12,879
type and we have cross-site scripting

575
00:31:08,290 --> 00:31:16,120
again and then I thought okay what other

576
00:31:12,880 --> 00:31:18,040
applications think so I checked a few so

577
00:31:16,120 --> 00:31:20,800
and it seems it's wildly different like

578
00:31:18,040 --> 00:31:23,860
there seems to be no agreement

579
00:31:20,800 --> 00:31:27,610
how to handle a file which is called dot

580
00:31:23,860 --> 00:31:30,100
jpg so it's been roughly even right if

581
00:31:27,610 --> 00:31:32,860
you if we make a vote from different

582
00:31:30,100 --> 00:31:34,929
programming languages in web service so

583
00:31:32,860 --> 00:31:38,770
you cannot really rely on what it isn't

584
00:31:34,930 --> 00:31:40,480
I mean as you well know that it's very

585
00:31:38,770 --> 00:31:42,520
often if we have something where

586
00:31:40,480 --> 00:31:44,170
different applications cannot agree on

587
00:31:42,520 --> 00:31:46,770
something this very often leads to

588
00:31:44,170 --> 00:31:46,770
security problems

589
00:31:49,060 --> 00:31:58,389
Internet Explorer anyone still using

590
00:31:51,160 --> 00:32:01,060
Internet Explorer yeah okay so you may

591
00:31:58,390 --> 00:32:04,210
wonder ok this mime sniffing also not

592
00:32:01,060 --> 00:32:07,000
bad but if the web server set the file

593
00:32:04,210 --> 00:32:09,580
type like takes plane can we managed to

594
00:32:07,000 --> 00:32:13,510
convince a browser to still sniff the

595
00:32:09,580 --> 00:32:16,570
mime type and in Internet Explorer yes

596
00:32:13,510 --> 00:32:21,670
we can do that there's been a blog post

597
00:32:16,570 --> 00:32:24,790
on that and actually Internet Explorer

598
00:32:21,670 --> 00:32:30,040
supports displaying emails emails can

599
00:32:24,790 --> 00:32:33,460
contain HTML in RFC eight to two

600
00:32:30,040 --> 00:32:36,280
specified so if you have file dot EML

601
00:32:33,460 --> 00:32:38,830
which will then served I I don't know

602
00:32:36,280 --> 00:32:42,220
what the mime type there is but yeah it

603
00:32:38,830 --> 00:32:44,620
will be displayed and it turns out if

604
00:32:42,220 --> 00:32:47,530
you put if you have such an email file

605
00:32:44,620 --> 00:32:49,179
and you put an iframe in it then

606
00:32:47,530 --> 00:32:51,700
Internet Explorer will load what's in

607
00:32:49,180 --> 00:32:54,690
that iframe and it will ignore the

608
00:32:51,700 --> 00:33:00,550
content type and will do mime sniffing

609
00:32:54,690 --> 00:33:03,550
this is just kind of a curiosity this

610
00:33:00,550 --> 00:33:05,409
blog post is from 2017 and it still

611
00:33:03,550 --> 00:33:09,639
works in the very latest version of

612
00:33:05,410 --> 00:33:11,410
Internet Explorer so yeah so because

613
00:33:09,640 --> 00:33:14,020
like I mean this is a bug in Internet

614
00:33:11,410 --> 00:33:17,500
Explorer this is and I'm not really sure

615
00:33:14,020 --> 00:33:19,060
if if as a web application developer you

616
00:33:17,500 --> 00:33:21,190
should defend against this because

617
00:33:19,060 --> 00:33:26,020
there's no real good way to defend

618
00:33:21,190 --> 00:33:27,790
against this music code from Microsoft

619
00:33:26,020 --> 00:33:29,320
on the support status of Internet

620
00:33:27,790 --> 00:33:31,030
Explorer where they say Internet

621
00:33:29,320 --> 00:33:32,500
Explorer 11 is the last version of

622
00:33:31,030 --> 00:33:34,178
Internet Explorer

623
00:33:32,500 --> 00:33:36,429
and it will continue to reefs acure

624
00:33:34,179 --> 00:33:40,270
ative updates compatibility fixes and

625
00:33:36,429 --> 00:33:48,520
technical support yeah I don't think

626
00:33:40,270 --> 00:33:50,590
that's true so I guess it was really

627
00:33:48,520 --> 00:33:54,879
hard to find one of these 90s style

628
00:33:50,590 --> 00:33:56,620
internet explorer keys so if you're

629
00:33:54,880 --> 00:33:58,840
still using an explorer you should just

630
00:33:56,620 --> 00:34:00,850
stop doing that and maybe if you have a

631
00:33:58,840 --> 00:34:02,500
web page and your developers are

632
00:34:00,850 --> 00:34:04,480
complaining that are we have all these

633
00:34:02,500 --> 00:34:06,460
polyfills to support Internet Explorer

634
00:34:04,480 --> 00:34:09,429
tell them to stop like just don't

635
00:34:06,460 --> 00:34:11,679
support that anymore true to give your

636
00:34:09,429 --> 00:34:18,429
users an incentive to switch to a more

637
00:34:11,679 --> 00:34:21,010
modern browser yeah another thing is you

638
00:34:18,429 --> 00:34:26,649
can also specify a mime type this your

639
00:34:21,010 --> 00:34:31,750
file upload so this the browser

640
00:34:26,649 --> 00:34:34,899
basically does this it's kind of obvious

641
00:34:31,750 --> 00:34:38,080
that this is user supplied data and you

642
00:34:34,899 --> 00:34:40,149
cannot trust it right so if I can just

643
00:34:38,080 --> 00:34:44,859
change my browser to send any mime type

644
00:34:40,149 --> 00:34:46,899
I want or use persuade or whatever but

645
00:34:44,859 --> 00:34:48,520
it's possible that you might find web

646
00:34:46,899 --> 00:34:50,589
applications that will trust this

647
00:34:48,520 --> 00:34:55,210
uploaded mime type and use that to

648
00:34:50,589 --> 00:34:57,400
decide whether file is safe the PHP

649
00:34:55,210 --> 00:34:59,080
documentation has a specific warning for

650
00:34:57,400 --> 00:35:01,240
that here where it says yeah this mime

651
00:34:59,080 --> 00:35:03,670
type is however not checked on the PHP

652
00:35:01,240 --> 00:35:11,560
side and and therefore don't take this

653
00:35:03,670 --> 00:35:16,330
value for granted yeah the Cadi web

654
00:35:11,560 --> 00:35:19,060
server anyone using caddy a few yeah so

655
00:35:16,330 --> 00:35:23,080
caddy is one of these modern really hip

656
00:35:19,060 --> 00:35:24,910
web servers quote from the web page

657
00:35:23,080 --> 00:35:27,040
kelly is praised by researchers and

658
00:35:24,910 --> 00:35:30,730
industry experts for a security default

659
00:35:27,040 --> 00:35:32,650
and unparalleled usability its main

660
00:35:30,730 --> 00:35:35,650
feature rather it's written in go so

661
00:35:32,650 --> 00:35:38,380
it's a memory safe language and it

662
00:35:35,650 --> 00:35:40,570
supports HTTP by default and

663
00:35:38,380 --> 00:35:43,109
automatically can get a certificate from

664
00:35:40,570 --> 00:35:43,109
the same group

665
00:35:44,059 --> 00:35:49,260
so I was very surprised that this modern

666
00:35:47,069 --> 00:35:51,599
new secure web server also does mime

667
00:35:49,260 --> 00:35:59,550
sniffing by default and there's also no

668
00:35:51,599 --> 00:36:02,309
option to switch it off I reported this

669
00:35:59,550 --> 00:36:05,099
to the main developer from Kelly and he

670
00:36:02,309 --> 00:36:08,849
told me yeah they just using basically a

671
00:36:05,099 --> 00:36:11,640
function from go here so this is ghost

672
00:36:08,849 --> 00:36:15,119
HTTP module it has a function surf

673
00:36:11,640 --> 00:36:17,040
content and this year server content

674
00:36:15,119 --> 00:36:19,500
tries to deduce the type from names file

675
00:36:17,040 --> 00:36:20,730
extension and if that fails falls back

676
00:36:19,500 --> 00:36:22,890
to reading the first block of the

677
00:36:20,730 --> 00:36:25,650
content and passing it to detect content

678
00:36:22,890 --> 00:36:34,170
type so it's doing the same thing as

679
00:36:25,650 --> 00:36:38,760
this 90s area Apache module so how can

680
00:36:34,170 --> 00:36:40,710
we defend against these attacks and I

681
00:36:38,760 --> 00:36:42,480
mean a big challenge here is that we

682
00:36:40,710 --> 00:36:44,130
kind of have an interaction between many

683
00:36:42,480 --> 00:36:45,630
different components we have a browser

684
00:36:44,130 --> 00:36:48,079
we have web server we have an

685
00:36:45,630 --> 00:36:53,970
application and we have operating system

686
00:36:48,079 --> 00:36:55,619
so yeah for browsers please fix X

687
00:36:53,970 --> 00:36:57,689
content I've options no sniff I don't

688
00:36:55,619 --> 00:37:02,040
think well it's currently doing is what

689
00:36:57,690 --> 00:37:04,770
people expect it to do but as I said I

690
00:37:02,040 --> 00:37:07,319
hope Mozilla will fix it and Microsoft

691
00:37:04,770 --> 00:37:10,049
will hopefully deprecated the current

692
00:37:07,319 --> 00:37:12,299
edge and in the future they will just

693
00:37:10,049 --> 00:37:17,609
inherit the behavior from chrome which

694
00:37:12,299 --> 00:37:19,680
is okay this is a bit more controversial

695
00:37:17,609 --> 00:37:21,480
but I think browsers should make a plan

696
00:37:19,680 --> 00:37:24,839
to deprecated my I'm sniffing because

697
00:37:21,480 --> 00:37:27,750
this is kind of a it's a real Tech that

698
00:37:24,839 --> 00:37:30,240
causes weird behavior and it's basically

699
00:37:27,750 --> 00:37:33,869
just to support web servers that don't

700
00:37:30,240 --> 00:37:34,290
suit off correct content I know it's

701
00:37:33,869 --> 00:37:37,319
hard

702
00:37:34,290 --> 00:37:38,630
we have many compatibility issues but

703
00:37:37,319 --> 00:37:41,220
maybe there could be things like

704
00:37:38,630 --> 00:37:43,559
incentivizing that if your site is okay

705
00:37:41,220 --> 00:37:45,390
then maybe you can use some new features

706
00:37:43,559 --> 00:37:50,630
or something like that they've been

707
00:37:45,390 --> 00:37:54,220
doing this in other areas a web service

708
00:37:50,630 --> 00:37:59,260
please don't do so aside mime sniffing

709
00:37:54,220 --> 00:38:02,740
um it just creates problems if you run

710
00:37:59,260 --> 00:38:06,670
Apache web server please disable not my

711
00:38:02,740 --> 00:38:10,890
magic I don't think it serves any useful

712
00:38:06,670 --> 00:38:10,890
purpose will also slow down your system

713
00:38:12,180 --> 00:38:18,970
for operating system vendors and Linux

714
00:38:15,070 --> 00:38:21,369
distributions consider just adding more

715
00:38:18,970 --> 00:38:22,899
file types to the mime types file I mean

716
00:38:21,369 --> 00:38:25,900
the more complete it is the less likely

717
00:38:22,900 --> 00:38:29,650
it is that you serve a file without a

718
00:38:25,900 --> 00:38:31,869
mime type and also please standardize

719
00:38:29,650 --> 00:38:34,599
this like it would be really nice if you

720
00:38:31,869 --> 00:38:36,820
just had one centrally maintained mime

721
00:38:34,599 --> 00:38:39,430
types file and everyone's using that so

722
00:38:36,820 --> 00:38:41,109
we can rely on saying yet this file type

723
00:38:39,430 --> 00:38:47,310
will be detected with the correct mime

724
00:38:41,109 --> 00:38:51,069
type for web applications and webmasters

725
00:38:47,310 --> 00:38:52,960
so there's one option that kind of kills

726
00:38:51,070 --> 00:38:54,760
all of these vulnerabilities and that is

727
00:38:52,960 --> 00:38:57,340
to use the sandbox domain for uploads

728
00:38:54,760 --> 00:38:59,349
that is focused on what some big pages

729
00:38:57,340 --> 00:39:01,869
do for example if you look at github

730
00:38:59,349 --> 00:39:03,609
this is I think it's raw github user

731
00:39:01,869 --> 00:39:04,780
content or something like that where you

732
00:39:03,609 --> 00:39:07,270
can download all the files from

733
00:39:04,780 --> 00:39:10,570
repositories and that's just a separate

734
00:39:07,270 --> 00:39:11,980
domain with no accounts or anything so

735
00:39:10,570 --> 00:39:13,780
if you have cross-site scripting there

736
00:39:11,980 --> 00:39:16,450
it doesn't matter

737
00:39:13,780 --> 00:39:18,670
however for smaller projects that's

738
00:39:16,450 --> 00:39:21,399
often impractical like something like

739
00:39:18,670 --> 00:39:24,310
WordPress you usually have in a hosting

740
00:39:21,400 --> 00:39:26,890
environment configuring a separate

741
00:39:24,310 --> 00:39:28,299
domain it's complicated so that doesn't

742
00:39:26,890 --> 00:39:32,980
always work but that's kind of the

743
00:39:28,300 --> 00:39:35,740
safest option I recommend all the

744
00:39:32,980 --> 00:39:38,650
setting expanded options no sniff it's

745
00:39:35,740 --> 00:39:40,720
not perfect as I told you but it still

746
00:39:38,650 --> 00:39:41,740
like makes your browser behave behave

747
00:39:40,720 --> 00:39:45,790
more sanely

748
00:39:41,740 --> 00:39:52,060
and hopefully in the future it will do

749
00:39:45,790 --> 00:39:54,310
what it actually supposed to do and if

750
00:39:52,060 --> 00:39:56,740
you support any kind of uploads for

751
00:39:54,310 --> 00:39:58,839
unusual file types I don't know if

752
00:39:56,740 --> 00:40:04,000
you're some kind of literal forum that

753
00:39:58,839 --> 00:40:05,529
shares pictures from nineteen from 90s

754
00:40:04,000 --> 00:40:07,630
graphics programs or something like that

755
00:40:05,530 --> 00:40:10,000
you should consider

756
00:40:07,630 --> 00:40:11,680
forcing the mime type like configuring

757
00:40:10,000 --> 00:40:17,230
your web server that these files are

758
00:40:11,680 --> 00:40:19,779
over sent with the correct type reject

759
00:40:17,230 --> 00:40:22,390
upload starting with a dot because then

760
00:40:19,780 --> 00:40:23,920
you may run into this issue where web

761
00:40:22,390 --> 00:40:30,629
server and application cannot agree

762
00:40:23,920 --> 00:40:30,630
whether that's an extension or not hmm

763
00:40:32,400 --> 00:40:37,720
sorry I can we make this in the question

764
00:40:35,560 --> 00:40:43,630
session yeah sorry I didn't understand

765
00:40:37,720 --> 00:40:45,910
what your yeah so yeah and summary mime

766
00:40:43,630 --> 00:40:54,960
sniffing is dangerous and needs to go

767
00:40:45,910 --> 00:40:54,960
away yeah that was it any questions

768
00:41:02,180 --> 00:41:08,669
let's see is this on this on good my

769
00:41:05,549 --> 00:41:09,989
voice is so slowly dying now so do we

770
00:41:08,670 --> 00:41:13,009
have any questions we have one in the

771
00:41:09,989 --> 00:41:17,190
back for sure

772
00:41:13,009 --> 00:41:26,069
let's see raise your hand again are

773
00:41:17,190 --> 00:41:28,549
there I was just saying that you should

774
00:41:26,069 --> 00:41:31,319
also avoid fights starting with a dot

775
00:41:28,549 --> 00:41:32,759
because they may end up being - so that

776
00:41:31,319 --> 00:41:34,819
Minister ater will not be able to see

777
00:41:32,759 --> 00:41:38,369
them and they may not even be back it up

778
00:41:34,819 --> 00:41:39,839
between one folder and a backup of that

779
00:41:38,369 --> 00:41:45,720
folder that you might want to restore

780
00:41:39,839 --> 00:41:48,170
afterwards mmm okay anyone else

781
00:41:45,720 --> 00:41:48,169
yep

782
00:41:49,549 --> 00:41:59,819
could we pass the mic down I thank you

783
00:41:56,519 --> 00:42:05,339
very much is that have you explored this

784
00:41:59,819 --> 00:42:07,288
behavior on iis yeah so I asked if it

785
00:42:05,339 --> 00:42:10,710
cannot determine the file type it will

786
00:42:07,289 --> 00:42:12,779
just not solve the file at all I'm not

787
00:42:10,710 --> 00:42:16,019
sure if this is configurable behavior

788
00:42:12,779 --> 00:42:18,839
but this at least the default setting

789
00:42:16,019 --> 00:42:20,430
seems to be safe like if there's the

790
00:42:18,839 --> 00:42:24,710
file type it cannot identify it will

791
00:42:20,430 --> 00:42:24,710
just you cannot download it at all

792
00:42:35,690 --> 00:42:41,359
wouldn't forcing file downloads work as

793
00:42:39,109 --> 00:42:44,299
a good mitigation as well you could

794
00:42:41,359 --> 00:42:48,319
probably still use image tags with

795
00:42:44,300 --> 00:42:49,849
things that have forcing downloads okay

796
00:42:48,320 --> 00:42:51,470
I'm not sure about the letter yeah

797
00:42:49,849 --> 00:42:53,480
that's true like you can set this

798
00:42:51,470 --> 00:42:55,868
content-disposition header which will

799
00:42:53,480 --> 00:42:59,900
force the browser to download a file

800
00:42:55,869 --> 00:43:02,300
that should also be safe I'm not sure if

801
00:42:59,900 --> 00:43:04,400
but as like if you have something where

802
00:43:02,300 --> 00:43:06,680
you actually want to use the file like

803
00:43:04,400 --> 00:43:09,619
if you have images and that then you

804
00:43:06,680 --> 00:43:11,930
would have to distinguish depending on

805
00:43:09,619 --> 00:43:14,750
if it's a file you might want to use in

806
00:43:11,930 --> 00:43:18,848
the browser or not but yeah if you force

807
00:43:14,750 --> 00:43:18,849
the download that should also prevent it

808
00:43:24,880 --> 00:43:29,780
have you looked at have you looked into

809
00:43:27,230 --> 00:43:32,780
whether applications are consistent in

810
00:43:29,780 --> 00:43:36,230
using a centrally managed mime types

811
00:43:32,780 --> 00:43:38,930
file because I checked and in Arch Linux

812
00:43:36,230 --> 00:43:46,400
there were 22 packages providing a file

813
00:43:38,930 --> 00:43:48,379
called mime types yeah I mean so I also

814
00:43:46,400 --> 00:43:50,630
learned that on FreeBSD there's no

815
00:43:48,380 --> 00:43:52,400
system-wide mime types file it seems

816
00:43:50,630 --> 00:43:55,070
that some applications have their own

817
00:43:52,400 --> 00:43:58,609
and use that but yeah it's more in

818
00:43:55,070 --> 00:44:08,420
consistency so I wish we just had a mime

819
00:43:58,609 --> 00:44:11,029
types project yeah it's the real thing

820
00:44:08,420 --> 00:44:13,970
we can do as users to protect ourselves

821
00:44:11,030 --> 00:44:18,410
from this even if we can't do it on on

822
00:44:13,970 --> 00:44:20,359
the server side I mean I hate to say

823
00:44:18,410 --> 00:44:26,270
this but right now Chrome is safer than

824
00:44:20,359 --> 00:44:31,160
Firefox or at I'm using Firefox because

825
00:44:26,270 --> 00:44:32,990
I feel monopoly is not healthy yeah you

826
00:44:31,160 --> 00:44:38,049
can ask the Mozilla developers to fix

827
00:44:32,990 --> 00:44:42,529
this back thank you for a great talk

828
00:44:38,050 --> 00:44:46,530
very interesting line of business

829
00:44:42,530 --> 00:44:48,390
applications that's an issue an old code

830
00:44:46,530 --> 00:44:51,810
but when it comes to Internet Explorer

831
00:44:48,390 --> 00:44:54,420
and edge I think there is the default

832
00:44:51,810 --> 00:44:57,060
value is that it detects and blocks

833
00:44:54,420 --> 00:44:59,970
cross-site scripting per default seems

834
00:44:57,060 --> 00:45:02,100
like I am eight or something now the

835
00:44:59,970 --> 00:45:04,439
what you mean is this cross-site

836
00:45:02,100 --> 00:45:06,779
scripting filter yeah but this is only

837
00:45:04,440 --> 00:45:11,040
for reflected cross-site scripting so

838
00:45:06,780 --> 00:45:14,670
this does not apply to uploads it it

839
00:45:11,040 --> 00:45:16,830
would prove it might prevent the text

840
00:45:14,670 --> 00:45:19,080
like the Acme thing that I showed

841
00:45:16,830 --> 00:45:25,980
earlier but for uploads this is not

842
00:45:19,080 --> 00:45:28,009
relevant okay thanks anyone else one

843
00:45:25,980 --> 00:45:34,260
last question

844
00:45:28,010 --> 00:45:42,389
No well okay then thank you

845
00:45:34,260 --> 00:45:42,389
[Applause]

