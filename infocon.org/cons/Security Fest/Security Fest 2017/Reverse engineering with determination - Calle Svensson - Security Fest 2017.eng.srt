1
00:00:00,890 --> 00:00:06,508
hello everyone my name is<font color="#CCCCCC"> Karl</font><font color="#E5E5E5"> and I'm</font>

2
00:00:04,440 --> 00:00:09,150
going<font color="#CCCCCC"> to talk a little</font><font color="#E5E5E5"> bit about reverse</font>

3
00:00:06,509 --> 00:00:11,969
<font color="#CCCCCC">engineering some standard techniques and</font>

4
00:00:09,150 --> 00:00:14,490
what happens when those<font color="#E5E5E5"> fails and some</font>

5
00:00:11,969 --> 00:00:16,800
<font color="#E5E5E5">tricks you</font><font color="#CCCCCC"> can try instead and I'm going</font>

6
00:00:14,490 --> 00:00:18,750
to<font color="#E5E5E5"> do this in the context of some</font>

7
00:00:16,800 --> 00:00:23,310
competitive challenges<font color="#E5E5E5"> that I've</font>

8
00:00:18,750 --> 00:00:26,340
encountered and<font color="#E5E5E5"> sold</font><font color="#CCCCCC"> but before we dive</font>

9
00:00:23,310 --> 00:00:29,848
in I'm<font color="#CCCCCC"> just going</font><font color="#E5E5E5"> to do a quick</font>

10
00:00:26,340 --> 00:00:32,189
presentation<font color="#E5E5E5"> myself my name is</font><font color="#CCCCCC"> Karl I'm</font>

11
00:00:29,849 --> 00:00:34,860
26 years old<font color="#E5E5E5"> and I studied engineering</font>

12
00:00:32,189 --> 00:00:36,140
physics and computer science at kth<font color="#E5E5E5"> in</font>

13
00:00:34,860 --> 00:00:38,610
Stockholm

14
00:00:36,140 --> 00:00:41,360
since<font color="#E5E5E5"> about a month back</font>

15
00:00:38,610 --> 00:00:46,590
I work<font color="#CCCCCC"> as the</font><font color="#E5E5E5"> head of security</font><font color="#CCCCCC"> at screen</font>

16
00:00:41,360 --> 00:00:49,559
<font color="#CCCCCC">we're</font><font color="#E5E5E5"> creating a modern healthcare and I</font>

17
00:00:46,590 --> 00:00:52,879
also compete in<font color="#CCCCCC"> a hacking competition</font>

18
00:00:49,559 --> 00:00:58,170
<font color="#E5E5E5">with our team hacking for sodium and</font>

19
00:00:52,879 --> 00:01:00,780
this is going to be relevant for some

20
00:00:58,170 --> 00:01:05,040
parts of<font color="#E5E5E5"> this code and yeah you can</font>

21
00:01:00,780 --> 00:01:09,080
reach me<font color="#E5E5E5"> by these</font><font color="#CCCCCC"> means or whatever</font>

22
00:01:05,040 --> 00:01:14,250
social<font color="#E5E5E5"> media you prefer so anyway let's</font>

23
00:01:09,080 --> 00:01:15,390
dive into it<font color="#E5E5E5"> um first I</font><font color="#CCCCCC"> just want</font><font color="#E5E5E5"> to</font>

24
00:01:14,250 --> 00:01:18,290
talk<font color="#CCCCCC"> a</font><font color="#E5E5E5"> little bit</font><font color="#CCCCCC"> about reverse</font>

25
00:01:15,390 --> 00:01:21,979
<font color="#CCCCCC">engineering in general as a concept so</font>

26
00:01:18,290 --> 00:01:26,310
the purpose of reverse engineering<font color="#CCCCCC"> arm</font>

27
00:01:21,979 --> 00:01:30,079
<font color="#E5E5E5">is usually to take something</font><font color="#CCCCCC"> apart it</font>

28
00:01:26,310 --> 00:01:33,659
might be<font color="#CCCCCC"> software hardware</font><font color="#E5E5E5"> anything to</font>

29
00:01:30,079 --> 00:01:36,119
understand how it<font color="#E5E5E5"> works</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> while</font>

30
00:01:33,659 --> 00:01:39,630
viewing<font color="#E5E5E5"> this you can have several</font>

31
00:01:36,119 --> 00:01:41,460
<font color="#CCCCCC">different specific goals in</font><font color="#E5E5E5"> mind for</font>

32
00:01:39,630 --> 00:01:44,970
<font color="#E5E5E5">example if your reverse engineering and</font>

33
00:01:41,460 --> 00:01:48,329
malware<font color="#E5E5E5"> say around somewhere</font><font color="#CCCCCC"> you might</font>

34
00:01:44,970 --> 00:01:51,149
wonder how<font color="#CCCCCC"> the encryption</font><font color="#E5E5E5"> works can we</font>

35
00:01:48,329 --> 00:01:53,789
break it<font color="#CCCCCC"> or something like</font><font color="#E5E5E5"> that or</font><font color="#CCCCCC"> maybe</font>

36
00:01:51,149 --> 00:01:55,829
<font color="#E5E5E5">you're auditing some third party</font>

37
00:01:53,790 --> 00:01:59,790
<font color="#CCCCCC">closed-source</font><font color="#E5E5E5"> component and you want to</font>

38
00:01:55,829 --> 00:02:04,289
know if it is secure or<font color="#E5E5E5"> how it handles</font>

39
00:01:59,790 --> 00:02:06,630
<font color="#CCCCCC">the specific case or and so on and very</font>

40
00:02:04,290 --> 00:02:08,849
very roughly you<font color="#CCCCCC"> can divide the</font>

41
00:02:06,630 --> 00:02:10,970
techniques you use in reverse

42
00:02:08,848 --> 00:02:13,000
engineering<font color="#E5E5E5"> into two broad</font><font color="#CCCCCC"> categories</font>

43
00:02:10,970 --> 00:02:18,430
<font color="#CCCCCC">static analysis and</font>

44
00:02:13,000 --> 00:02:20,230
analysis so<font color="#E5E5E5"> static analysis is very</font>

45
00:02:18,430 --> 00:02:22,330
<font color="#E5E5E5">roughly speaking basically when you like</font>

46
00:02:20,230 --> 00:02:25,090
you take the thing<font color="#E5E5E5"> and you look at it</font>

47
00:02:22,330 --> 00:02:27,430
and you try to figure<font color="#E5E5E5"> out what it is</font>

48
00:02:25,090 --> 00:02:30,400
so for<font color="#CCCCCC"> example in software</font><font color="#E5E5E5"> you look at</font>

49
00:02:27,430 --> 00:02:32,680
the code and<font color="#CCCCCC"> you try to decide what</font>

50
00:02:30,400 --> 00:02:37,060
<font color="#E5E5E5">could cool code would do if you were to</font>

51
00:02:32,680 --> 00:02:39,100
run<font color="#E5E5E5"> it and</font><font color="#CCCCCC"> the positive thing about this</font>

52
00:02:37,060 --> 00:02:40,570
is<font color="#E5E5E5"> that in some sense like</font><font color="#CCCCCC"> you have all</font>

53
00:02:39,100 --> 00:02:43,540
the<font color="#CCCCCC"> information it's all there</font><font color="#E5E5E5"> you just</font>

54
00:02:40,570 --> 00:02:46,720
have to read it and interpret<font color="#CCCCCC"> it in</font>

55
00:02:43,540 --> 00:02:50,560
practice though<font color="#E5E5E5"> it might be like an</font>

56
00:02:46,720 --> 00:02:52,830
overwhelmingly huge task and too big to

57
00:02:50,560 --> 00:02:55,300
complete in a reasonable<font color="#CCCCCC"> amount of time</font>

58
00:02:52,830 --> 00:02:58,390
dynamic analysis on the hand<font color="#E5E5E5"> on the</font>

59
00:02:55,300 --> 00:03:01,510
<font color="#E5E5E5">other hand is</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> very nice because you</font>

60
00:02:58,390 --> 00:03:04,750
can<font color="#CCCCCC"> you can run the code</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> just see</font>

61
00:03:01,510 --> 00:03:06,700
what<font color="#E5E5E5"> it does in</font><font color="#CCCCCC"> some some parts</font><font color="#E5E5E5"> so you</font>

62
00:03:04,750 --> 00:03:09,160
<font color="#CCCCCC">just maybe look at like the input and</font>

63
00:03:06,700 --> 00:03:11,170
<font color="#CCCCCC">output of</font><font color="#E5E5E5"> some kind of function and you</font>

64
00:03:09,160 --> 00:03:14,890
really realize what it is<font color="#E5E5E5"> and you can</font>

65
00:03:11,170 --> 00:03:18,220
move<font color="#E5E5E5"> on downside</font><font color="#CCCCCC"> is that the program</font>

66
00:03:14,890 --> 00:03:19,809
might not behave in the way you<font color="#E5E5E5"> want it</font>

67
00:03:18,220 --> 00:03:21,970
might not reach the state you are

68
00:03:19,810 --> 00:03:28,239
interested in and so<font color="#CCCCCC"> on so</font><font color="#E5E5E5"> you might not</font>

69
00:03:21,970 --> 00:03:30,970
get into<font color="#E5E5E5"> full picture</font><font color="#CCCCCC"> so I'm</font><font color="#E5E5E5"> going</font><font color="#CCCCCC"> to</font>

70
00:03:28,239 --> 00:03:35,470
talk<font color="#CCCCCC"> about these reverse engineering</font>

71
00:03:30,970 --> 00:03:39,239
challenges<font color="#E5E5E5"> I've sold two</font><font color="#CCCCCC"> of them and ten</font>

72
00:03:35,470 --> 00:03:43,299
of the motivation for doing<font color="#E5E5E5"> this is to</font>

73
00:03:39,239 --> 00:03:46,540
push yourself<font color="#E5E5E5"> and find these strange</font>

74
00:03:43,299 --> 00:03:48,220
challenges to improve yourself<font color="#E5E5E5"> in</font>

75
00:03:46,540 --> 00:03:51,160
reverse<font color="#E5E5E5"> engineering so that when</font>

76
00:03:48,220 --> 00:03:56,530
something<font color="#E5E5E5"> really comes along you</font><font color="#CCCCCC"> are</font>

77
00:03:51,160 --> 00:03:58,660
prepared<font color="#E5E5E5"> so this thing came along the</font>

78
00:03:56,530 --> 00:04:02,860
mob<font color="#CCCCCC"> this Gator so I don't know if you</font>

79
00:03:58,660 --> 00:04:05,829
know about<font color="#CCCCCC"> it but um someone wrote a</font>

80
00:04:02,860 --> 00:04:08,620
paper where they explained that<font color="#E5E5E5"> the x86</font>

81
00:04:05,829 --> 00:04:10,299
move instruction is<font color="#CCCCCC"> Turing complete</font>

82
00:04:08,620 --> 00:04:13,600
which means that with<font color="#E5E5E5"> this instruction</font>

83
00:04:10,299 --> 00:04:17,260
<font color="#E5E5E5">you</font><font color="#CCCCCC"> can create basically</font><font color="#E5E5E5"> any program so</font>

84
00:04:13,600 --> 00:04:19,478
this<font color="#E5E5E5"> guy Chris Tomas he took this</font><font color="#CCCCCC"> maybe</font>

85
00:04:17,260 --> 00:04:22,390
a little<font color="#E5E5E5"> bit too far and created a</font>

86
00:04:19,478 --> 00:04:24,870
compiler<font color="#E5E5E5"> which takes C code and compile</font>

87
00:04:22,390 --> 00:04:25,990
<font color="#CCCCCC">it</font><font color="#E5E5E5"> into a</font><font color="#CCCCCC"> program consisting of only</font>

88
00:04:24,870 --> 00:04:30,639
<font color="#E5E5E5">exit</font>

89
00:04:25,990 --> 00:04:31,720
<font color="#E5E5E5">six movies directions</font><font color="#CCCCCC"> so the top image</font><font color="#E5E5E5"> I</font>

90
00:04:30,639 --> 00:04:34,599
<font color="#E5E5E5">think it's kind</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> hard to see but</font>

91
00:04:31,720 --> 00:04:37,360
<font color="#CCCCCC">that's like</font><font color="#E5E5E5"> the output of a function</font>

92
00:04:34,599 --> 00:04:40,479
which checks<font color="#E5E5E5"> if a number is</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> prime</font>

93
00:04:37,360 --> 00:04:45,220
number<font color="#E5E5E5"> the main thing here</font><font color="#CCCCCC"> that is is</font>

94
00:04:40,479 --> 00:04:47,440
<font color="#CCCCCC">that it's reasonably short</font><font color="#E5E5E5"> the image at</font>

95
00:04:45,220 --> 00:04:50,800
the<font color="#CCCCCC"> bottom it's definitely not readable</font>

96
00:04:47,440 --> 00:04:52,360
but what it is is the same<font color="#E5E5E5"> code</font><font color="#CCCCCC"> ran</font>

97
00:04:50,800 --> 00:04:54,430
<font color="#CCCCCC">through the multivator</font><font color="#E5E5E5"> so it's just a</font>

98
00:04:52,360 --> 00:04:57,389
long series of move instruction and this

99
00:04:54,430 --> 00:04:58,960
does the<font color="#CCCCCC"> same thing</font><font color="#E5E5E5"> so the problem when</font>

100
00:04:57,389 --> 00:05:02,380
<font color="#CCCCCC">reverse-engineering something like this</font>

101
00:04:58,960 --> 00:05:04,750
<font color="#E5E5E5">is that you</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> no</font><font color="#CCCCCC"> branches in the code</font>

102
00:05:02,380 --> 00:05:08,800
there<font color="#E5E5E5"> are no functions</font><font color="#CCCCCC"> it's just one</font>

103
00:05:04,750 --> 00:05:10,990
sequential flow<font color="#E5E5E5"> which makes it very very</font>

104
00:05:08,800 --> 00:05:13,569
<font color="#CCCCCC">hard to understand what's going on</font><font color="#E5E5E5"> so</font>

105
00:05:10,990 --> 00:05:15,069
the way this works<font color="#E5E5E5"> is that sometimes the</font>

106
00:05:13,569 --> 00:05:17,289
instructions operate<font color="#CCCCCC"> on</font><font color="#E5E5E5"> real data</font><font color="#CCCCCC"> and</font>

107
00:05:15,069 --> 00:05:21,099
sometimes<font color="#CCCCCC"> on dummy</font><font color="#E5E5E5"> data a little</font><font color="#CCCCCC"> bit</font>

108
00:05:17,289 --> 00:05:23,469
<font color="#E5E5E5">like in arm you have</font><font color="#CCCCCC"> these conditional</font>

109
00:05:21,099 --> 00:05:29,860
instructions which only actually execute

110
00:05:23,470 --> 00:05:31,570
if certain flag is set so<font color="#CCCCCC"> we</font><font color="#E5E5E5"> set up this</font>

111
00:05:29,860 --> 00:05:33,099
competitive said that was a classic

112
00:05:31,570 --> 00:05:34,810
<font color="#CCCCCC">thing call</font><font color="#E5E5E5"> that attract me which is</font>

113
00:05:33,099 --> 00:05:36,699
basically a program<font color="#E5E5E5"> that takes an input</font>

114
00:05:34,810 --> 00:05:39,430
and then says if it's the right input or

115
00:05:36,699 --> 00:05:40,930
not and by looking<font color="#E5E5E5"> at the validation</font>

116
00:05:39,430 --> 00:05:44,740
function<font color="#E5E5E5"> you're supposed to</font><font color="#CCCCCC"> figure out</font>

117
00:05:40,930 --> 00:05:48,070
what the correct<font color="#E5E5E5"> input is arm</font><font color="#CCCCCC"> so I start</font>

118
00:05:44,740 --> 00:05:50,020
<font color="#E5E5E5">out</font><font color="#CCCCCC"> with like how I</font><font color="#E5E5E5"> would look at the</font>

119
00:05:48,070 --> 00:05:52,659
reverse<font color="#CCCCCC"> init engineering challenge</font><font color="#E5E5E5"> so</font>

120
00:05:50,020 --> 00:05:55,090
like are there<font color="#E5E5E5"> any function</font><font color="#CCCCCC"> can I can</font><font color="#E5E5E5"> i</font>

121
00:05:52,659 --> 00:05:58,270
look<font color="#E5E5E5"> and maybe give them sensible names</font>

122
00:05:55,090 --> 00:06:00,250
<font color="#CCCCCC">to like</font><font color="#E5E5E5"> abstract</font><font color="#CCCCCC"> the way those and study</font>

123
00:05:58,270 --> 00:06:01,448
the branches but as<font color="#E5E5E5"> I said</font><font color="#CCCCCC"> earlier</font><font color="#E5E5E5"> there</font>

124
00:06:00,250 --> 00:06:04,060
are<font color="#E5E5E5"> no functions there</font><font color="#CCCCCC"> are no branches</font>

125
00:06:01,449 --> 00:06:09,550
<font color="#CCCCCC">so these like static analysis</font><font color="#E5E5E5"> methods</font>

126
00:06:04,060 --> 00:06:13,990
<font color="#E5E5E5">didn't work at all what I would</font><font color="#CCCCCC"> then</font>

127
00:06:09,550 --> 00:06:17,650
move<font color="#E5E5E5"> on to</font><font color="#CCCCCC"> ah is to do an execution</font>

128
00:06:13,990 --> 00:06:18,969
trace<font color="#E5E5E5"> you could use this</font><font color="#CCCCCC"> to like you run</font>

129
00:06:17,650 --> 00:06:21,520
the<font color="#E5E5E5"> program and you record the</font>

130
00:06:18,969 --> 00:06:24,490
instructions executed to see if<font color="#E5E5E5"> maybe if</font>

131
00:06:21,520 --> 00:06:26,080
you change the input maybe the execution

132
00:06:24,490 --> 00:06:28,719
trace<font color="#E5E5E5"> changes and maybe you can gain</font>

133
00:06:26,080 --> 00:06:31,359
some<font color="#CCCCCC"> insights from that problem is here</font>

134
00:06:28,719 --> 00:06:33,699
that like I<font color="#E5E5E5"> said earlier we</font><font color="#CCCCCC"> have no</font>

135
00:06:31,360 --> 00:06:35,240
branches<font color="#CCCCCC"> no nothing so it's always the</font>

136
00:06:33,699 --> 00:06:36,889
same instructions

137
00:06:35,240 --> 00:06:41,030
executed<font color="#E5E5E5"> so the execution trace would</font>

138
00:06:36,889 --> 00:06:43,069
always look the<font color="#CCCCCC"> same</font><font color="#E5E5E5"> and an even simpler</font>

139
00:06:41,030 --> 00:06:45,948
method that<font color="#CCCCCC"> also can give very good</font>

140
00:06:43,069 --> 00:06:47,599
<font color="#E5E5E5">insight is just execution or instruction</font>

141
00:06:45,949 --> 00:06:48,770
counting so you run<font color="#E5E5E5"> the program</font><font color="#CCCCCC"> you</font>

142
00:06:47,599 --> 00:06:50,930
count how many<font color="#E5E5E5"> instructions were</font>

143
00:06:48,770 --> 00:06:53,750
executed and<font color="#CCCCCC"> you try to deduce something</font>

144
00:06:50,930 --> 00:06:55,639
<font color="#E5E5E5">from</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> when changing the input</font><font color="#CCCCCC"> the</font>

145
00:06:53,750 --> 00:06:57,500
same problem<font color="#CCCCCC"> here</font><font color="#E5E5E5"> it's just the same</font>

146
00:06:55,639 --> 00:07:00,889
amount<font color="#CCCCCC"> the exact same set of</font>

147
00:06:57,500 --> 00:07:03,830
<font color="#E5E5E5">instructions are executed every time so</font>

148
00:07:00,889 --> 00:07:06,319
at this point<font color="#E5E5E5"> I had</font><font color="#CCCCCC"> to like step back</font>

149
00:07:03,830 --> 00:07:09,530
take<font color="#CCCCCC"> taken can break and think like okay</font>

150
00:07:06,319 --> 00:07:12,860
<font color="#CCCCCC">so</font><font color="#E5E5E5"> what</font><font color="#CCCCCC"> am I actually</font><font color="#E5E5E5"> looking at so in</font>

151
00:07:09,530 --> 00:07:16,489
some sense what would I<font color="#CCCCCC"> expect to differ</font>

152
00:07:12,860 --> 00:07:17,930
<font color="#CCCCCC">and this kind of</font><font color="#E5E5E5"> like got me thinking</font>

153
00:07:16,490 --> 00:07:21,849
about<font color="#E5E5E5"> a little bit like what is a</font>

154
00:07:17,930 --> 00:07:24,110
program so most interesting programs

155
00:07:21,849 --> 00:07:25,789
<font color="#CCCCCC">they take some kind</font><font color="#E5E5E5"> of input they</font>

156
00:07:24,110 --> 00:07:27,979
perform some kind<font color="#E5E5E5"> of calculation</font><font color="#CCCCCC"> and</font>

157
00:07:25,789 --> 00:07:30,349
then they affect the world<font color="#E5E5E5"> somehow it</font>

158
00:07:27,979 --> 00:07:35,000
might be some<font color="#E5E5E5"> kind of output</font><font color="#CCCCCC"> reading</font>

159
00:07:30,349 --> 00:07:37,580
<font color="#CCCCCC">writing to memory</font><font color="#E5E5E5"> and so on so at some</font>

160
00:07:35,000 --> 00:07:39,169
point<font color="#E5E5E5"> if this program</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> going to be</font>

161
00:07:37,580 --> 00:07:43,130
interesting at some point it has<font color="#CCCCCC"> to do</font>

162
00:07:39,169 --> 00:07:45,560
<font color="#E5E5E5">something differently than another run</font>

163
00:07:43,130 --> 00:07:46,909
otherwise<font color="#E5E5E5"> this program would always do</font>

164
00:07:45,560 --> 00:07:49,550
exactly<font color="#CCCCCC"> the same</font><font color="#E5E5E5"> thing</font><font color="#CCCCCC"> and that would</font>

165
00:07:46,909 --> 00:07:51,199
<font color="#E5E5E5">not be interesting so if the</font>

166
00:07:49,550 --> 00:07:53,000
instructions don't change<font color="#E5E5E5"> which we know</font>

167
00:07:51,199 --> 00:07:57,289
they don't<font color="#E5E5E5"> then the memory has</font><font color="#CCCCCC"> to change</font>

168
00:07:53,000 --> 00:08:00,259
at some point so I realized<font color="#CCCCCC"> then but by</font>

169
00:07:57,289 --> 00:08:03,590
just doing a memory<font color="#E5E5E5"> trace instead so</font><font color="#CCCCCC"> we</font>

170
00:08:00,259 --> 00:08:06,590
could record<font color="#CCCCCC"> all the memory address that</font>

171
00:08:03,590 --> 00:08:10,400
were read from and written to and we

172
00:08:06,590 --> 00:08:13,429
could then<font color="#E5E5E5"> like compare these</font><font color="#CCCCCC"> different</font>

173
00:08:10,400 --> 00:08:16,940
recordings and see which one differed

174
00:08:13,430 --> 00:08:19,729
the most so<font color="#E5E5E5"> I started out by doing</font><font color="#CCCCCC"> like</font>

175
00:08:16,940 --> 00:08:23,060
a<font color="#E5E5E5"> one character input for every</font>

176
00:08:19,729 --> 00:08:24,830
different<font color="#E5E5E5"> character and did these memory</font>

177
00:08:23,060 --> 00:08:27,110
recordings<font color="#E5E5E5"> see which one differed the</font>

178
00:08:24,830 --> 00:08:29,539
most and there was one like really

179
00:08:27,110 --> 00:08:31,880
<font color="#E5E5E5">sticking out and so the guess was</font><font color="#CCCCCC"> that</font>

180
00:08:29,539 --> 00:08:35,029
this was<font color="#E5E5E5"> the first correct character and</font>

181
00:08:31,880 --> 00:08:38,750
then by just<font color="#E5E5E5"> putting this in a nice</font>

182
00:08:35,029 --> 00:08:44,059
ugly<font color="#E5E5E5"> scripting loop</font><font color="#CCCCCC"> eventually the</font>

183
00:08:38,750 --> 00:08:46,160
password<font color="#E5E5E5"> would appear so</font><font color="#CCCCCC"> that's some</font>

184
00:08:44,059 --> 00:08:48,949
dynamic analysis used to solve a

185
00:08:46,160 --> 00:08:51,260
software problem another

186
00:08:48,950 --> 00:08:54,190
<font color="#CCCCCC">Challenge I</font><font color="#E5E5E5"> sold was a hardware</font>

187
00:08:51,260 --> 00:08:59,210
<font color="#E5E5E5">challenge or simulated</font><font color="#CCCCCC"> hardware at least</font>

188
00:08:54,190 --> 00:09:01,520
so<font color="#E5E5E5"> in electronics you have these boom</font>

189
00:08:59,210 --> 00:09:04,220
iam<font color="#E5E5E5"> circuits so you have signals</font><font color="#CCCCCC"> they</font>

190
00:09:01,520 --> 00:09:04,730
<font color="#E5E5E5">are like 1 or</font><font color="#CCCCCC"> 0</font><font color="#E5E5E5"> through or</font><font color="#CCCCCC"> false high or</font>

191
00:09:04,220 --> 00:09:08,450
low

192
00:09:04,730 --> 00:09:11,330
same<font color="#E5E5E5"> thing different names</font><font color="#CCCCCC"> and you have</font>

193
00:09:08,450 --> 00:09:12,710
these gates<font color="#E5E5E5"> so it can be simple</font><font color="#CCCCCC"> booming</font>

194
00:09:11,330 --> 00:09:15,020
gates<font color="#E5E5E5"> like an or function and an</font>

195
00:09:12,710 --> 00:09:16,580
function X or so on<font color="#E5E5E5"> and then you can</font>

196
00:09:15,020 --> 00:09:20,030
combine these together into more

197
00:09:16,580 --> 00:09:23,510
complicated gates<font color="#CCCCCC"> so this bottom image</font>

198
00:09:20,030 --> 00:09:26,300
is if you<font color="#CCCCCC"> combine</font><font color="#E5E5E5"> four different gates</font>

199
00:09:23,510 --> 00:09:29,330
in this feedback manner you get a D

200
00:09:26,300 --> 00:09:33,109
latch<font color="#E5E5E5"> which is kind of like one bit in a</font>

201
00:09:29,330 --> 00:09:35,780
memory cell and an interesting<font color="#CCCCCC"> thing</font>

202
00:09:33,110 --> 00:09:40,690
here is<font color="#E5E5E5"> that some</font><font color="#CCCCCC"> of these gates</font><font color="#E5E5E5"> for</font>

203
00:09:35,780 --> 00:09:44,689
example<font color="#E5E5E5"> a NAND gate it is what you call</font>

204
00:09:40,690 --> 00:09:45,980
functionally<font color="#E5E5E5"> complete which</font><font color="#CCCCCC"> is kind of</font>

205
00:09:44,690 --> 00:09:48,410
like<font color="#CCCCCC"> a turing-complete</font>

206
00:09:45,980 --> 00:09:50,420
so basically any boolean<font color="#CCCCCC"> circuit that</font>

207
00:09:48,410 --> 00:09:55,610
you can create<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can create</font><font color="#E5E5E5"> from only</font>

208
00:09:50,420 --> 00:09:59,719
<font color="#E5E5E5">using a whole bunch of NAND gates um so</font>

209
00:09:55,610 --> 00:10:01,150
in this setting<font color="#CCCCCC"> we were given a</font>

210
00:09:59,720 --> 00:10:05,090
[Music]

211
00:10:01,150 --> 00:10:09,100
schematic of a circuit so to the right

212
00:10:05,090 --> 00:10:12,470
is a keypad<font color="#CCCCCC"> like a regular digits</font><font color="#E5E5E5"> keypad</font>

213
00:10:09,100 --> 00:10:14,900
to the left is an<font color="#E5E5E5"> is an integrated</font>

214
00:10:12,470 --> 00:10:18,260
circuit<font color="#E5E5E5"> and one of the pins is then</font>

215
00:10:14,900 --> 00:10:20,870
<font color="#E5E5E5">connected to a lock so the goal is</font><font color="#CCCCCC"> to</font>

216
00:10:18,260 --> 00:10:23,569
find<font color="#CCCCCC"> out what key combination opens the</font>

217
00:10:20,870 --> 00:10:26,720
lock so for the integrated<font color="#E5E5E5"> circuit we</font>

218
00:10:23,570 --> 00:10:28,940
were<font color="#CCCCCC"> also</font><font color="#E5E5E5"> given a list of 248 NAND gates</font>

219
00:10:26,720 --> 00:10:33,890
<font color="#E5E5E5">so basically someone had taken like the</font>

220
00:10:28,940 --> 00:10:36,050
original sensible circuit and did kind

221
00:10:33,890 --> 00:10:38,480
of like<font color="#E5E5E5"> the same thing</font><font color="#CCCCCC"> as with</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> mova</font>

222
00:10:36,050 --> 00:10:40,790
<font color="#CCCCCC">skater it had been like compiled down to</font>

223
00:10:38,480 --> 00:10:42,650
only<font color="#E5E5E5"> using NAND</font><font color="#CCCCCC"> gate</font><font color="#E5E5E5"> so there were two</font>

224
00:10:40,790 --> 00:10:47,709
<font color="#CCCCCC">hundred forty</font><font color="#E5E5E5"> eight nine gates and how</font>

225
00:10:42,650 --> 00:10:50,360
they were connected<font color="#CCCCCC"> to each</font><font color="#E5E5E5"> other</font><font color="#CCCCCC"> so the</font>

226
00:10:47,710 --> 00:10:52,310
intended way to solve this<font color="#E5E5E5"> was to like</font>

227
00:10:50,360 --> 00:10:56,810
simulate this and<font color="#CCCCCC"> brute force</font><font color="#E5E5E5"> different</font>

228
00:10:52,310 --> 00:11:01,219
key combinations<font color="#E5E5E5"> and stuff but that's</font>

229
00:10:56,810 --> 00:11:02,040
not as fun<font color="#E5E5E5"> also</font><font color="#CCCCCC"> I didn't manage</font><font color="#E5E5E5"> to do</font>

230
00:11:01,220 --> 00:11:06,180
<font color="#CCCCCC">that when I tried</font>

231
00:11:02,040 --> 00:11:09,569
so I went down this other rabbit hole<font color="#CCCCCC"> so</font>

232
00:11:06,180 --> 00:11:12,359
the I general idea was to kind<font color="#E5E5E5"> of in</font><font color="#CCCCCC"> the</font>

233
00:11:09,570 --> 00:11:16,649
<font color="#E5E5E5">sense sense that like when you reverse</font>

234
00:11:12,360 --> 00:11:22,050
engineer<font color="#E5E5E5"> software</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> find patterns to</font>

235
00:11:16,649 --> 00:11:25,529
find repetitions<font color="#E5E5E5"> in this huge graph</font><font color="#CCCCCC"> so I</font>

236
00:11:22,050 --> 00:11:28,349
started<font color="#E5E5E5"> by just plotting up the whole</font>

237
00:11:25,529 --> 00:11:30,180
circuit graph and this looks<font color="#E5E5E5"> really</font>

238
00:11:28,350 --> 00:11:33,089
horrible and this is just like one third

239
00:11:30,180 --> 00:11:36,449
of the image or<font color="#E5E5E5"> something and at least</font>

240
00:11:33,089 --> 00:11:38,550
this tells<font color="#E5E5E5"> me absolutely nothing</font><font color="#CCCCCC"> the</font>

241
00:11:36,449 --> 00:11:40,859
only<font color="#E5E5E5"> thing I did here was to replace so</font>

242
00:11:38,550 --> 00:11:42,930
if you have a NAND<font color="#CCCCCC"> gate with</font><font color="#E5E5E5"> the same</font>

243
00:11:40,860 --> 00:11:46,199
inputs<font color="#CCCCCC"> to both</font><font color="#E5E5E5"> of the</font><font color="#CCCCCC"> inputs</font><font color="#E5E5E5"> that's just</font>

244
00:11:42,930 --> 00:11:47,758
a<font color="#CCCCCC"> knot gauge so I replace those with the</font>

245
00:11:46,199 --> 00:11:50,008
blue<font color="#E5E5E5"> node so you have the red NAND gates</font>

246
00:11:47,759 --> 00:11:51,930
and the blue<font color="#E5E5E5"> not gates this didn't tell</font>

247
00:11:50,009 --> 00:11:55,290
me anything at all<font color="#E5E5E5"> but</font><font color="#CCCCCC"> I started looking</font>

248
00:11:51,930 --> 00:11:56,939
<font color="#CCCCCC">for some repetitions</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> for example if</font>

249
00:11:55,290 --> 00:11:59,370
you haven't NAND<font color="#E5E5E5"> gates directly followed</font>

250
00:11:56,940 --> 00:12:01,560
by a not gate that's a NAND gate<font color="#CCCCCC"> and so</font>

251
00:11:59,370 --> 00:12:09,089
on so I started grouping these together

252
00:12:01,560 --> 00:12:11,849
<font color="#E5E5E5">and you can see that this reveals some</font>

253
00:12:09,089 --> 00:12:16,319
kind of structure in the circuit<font color="#E5E5E5"> but</font><font color="#CCCCCC"> if</font>

254
00:12:11,850 --> 00:12:19,529
<font color="#CCCCCC">they were still too verbose</font><font color="#E5E5E5"> to like be</font>

255
00:12:16,319 --> 00:12:23,339
able<font color="#CCCCCC"> to work with this in a nice and</font>

256
00:12:19,529 --> 00:12:27,089
smooth way<font color="#CCCCCC"> so what I did was then to</font>

257
00:12:23,339 --> 00:12:30,839
start collapsing<font color="#CCCCCC"> these groups replacing</font>

258
00:12:27,089 --> 00:12:32,069
multiple nodes with a single node<font color="#CCCCCC"> kind</font>

259
00:12:30,839 --> 00:12:35,760
<font color="#E5E5E5">of like the same way you would do in</font>

260
00:12:32,069 --> 00:12:37,949
<font color="#CCCCCC">software</font><font color="#E5E5E5"> if you find some function</font><font color="#CCCCCC"> that</font>

261
00:12:35,760 --> 00:12:39,779
does something<font color="#CCCCCC"> you would just</font><font color="#E5E5E5"> think that</font>

262
00:12:37,949 --> 00:12:42,180
this function performs maybe I don't

263
00:12:39,779 --> 00:12:43,260
know a base64<font color="#CCCCCC"> conversion or something</font>

264
00:12:42,180 --> 00:12:45,899
and you would<font color="#CCCCCC"> just</font><font color="#E5E5E5"> leave it at that</font>

265
00:12:43,260 --> 00:12:52,649
<font color="#E5E5E5">and don't go into the details on how</font>

266
00:12:45,899 --> 00:12:54,810
that's accomplished<font color="#E5E5E5"> so by doing this in</font>

267
00:12:52,649 --> 00:12:57,600
a sense this<font color="#E5E5E5"> was like two steps</font><font color="#CCCCCC"> forward</font>

268
00:12:54,810 --> 00:13:00,180
<font color="#CCCCCC">one step backward</font><font color="#E5E5E5"> again we caná-- lost</font>

269
00:12:57,600 --> 00:13:03,959
some kind<font color="#E5E5E5"> of structure but I had a lot</font>

270
00:13:00,180 --> 00:13:08,008
of different types of nodes<font color="#CCCCCC"> so now I</font>

271
00:13:03,959 --> 00:13:10,069
have these light<font color="#E5E5E5"> blue and gates and</font>

272
00:13:08,009 --> 00:13:13,640
these yellow

273
00:13:10,070 --> 00:13:16,700
one bit<font color="#E5E5E5"> memory cells</font><font color="#CCCCCC"> and then I started</font>

274
00:13:13,640 --> 00:13:18,740
grouping these together<font color="#CCCCCC"> to like find</font>

275
00:13:16,700 --> 00:13:20,410
some kind of structure and eventually

276
00:13:18,740 --> 00:13:23,350
ended up with<font color="#E5E5E5"> something like this and</font>

277
00:13:20,410 --> 00:13:28,280
<font color="#CCCCCC">it's a</font><font color="#E5E5E5"> little bit</font><font color="#CCCCCC"> difficult to</font><font color="#E5E5E5"> see but</font>

278
00:13:23,350 --> 00:13:31,190
<font color="#E5E5E5">in the top right you</font><font color="#CCCCCC"> have a group which</font>

279
00:13:28,280 --> 00:13:34,520
<font color="#E5E5E5">is a 4-bit counter so I realized that</font>

280
00:13:31,190 --> 00:13:38,240
this was<font color="#E5E5E5"> the state machine of the digit</font>

281
00:13:34,520 --> 00:13:41,930
<font color="#E5E5E5">the key log so when you press the digits</font>

282
00:13:38,240 --> 00:13:44,150
<font color="#E5E5E5">on a keypad basically if you press the</font>

283
00:13:41,930 --> 00:13:46,189
correct<font color="#E5E5E5"> next digit you advance the state</font>

284
00:13:44,150 --> 00:13:48,020
machine by one<font color="#E5E5E5"> and if you press an</font>

285
00:13:46,190 --> 00:13:52,010
incorrect<font color="#E5E5E5"> digit you will return it</font><font color="#CCCCCC"> to</font>

286
00:13:48,020 --> 00:13:55,490
the initial<font color="#CCCCCC"> state so this counter kept</font>

287
00:13:52,010 --> 00:14:00,080
track of how far<font color="#CCCCCC"> along you have come in</font>

288
00:13:55,490 --> 00:14:04,840
entering<font color="#E5E5E5"> the combination and then in the</font>

289
00:14:00,080 --> 00:14:08,230
top left there are three<font color="#CCCCCC"> regions</font><font color="#E5E5E5"> with</font>

290
00:14:04,840 --> 00:14:11,540
one<font color="#E5E5E5"> of them containing a counter as well</font>

291
00:14:08,230 --> 00:14:14,860
<font color="#E5E5E5">which</font><font color="#CCCCCC"> is a</font><font color="#E5E5E5"> scanline counter so basically</font>

292
00:14:11,540 --> 00:14:17,270
the way<font color="#E5E5E5"> a keypad works is that you have</font>

293
00:14:14,860 --> 00:14:19,070
<font color="#E5E5E5">outputs going into each row of the</font>

294
00:14:17,270 --> 00:14:22,370
<font color="#E5E5E5">keypad</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> then you have inputs going</font>

295
00:14:19,070 --> 00:14:24,620
<font color="#E5E5E5">out from each column so you will in a</font>

296
00:14:22,370 --> 00:14:26,360
quick succession<font color="#CCCCCC"> you will put the output</font>

297
00:14:24,620 --> 00:14:28,940
<font color="#CCCCCC">at one row at a time</font>

298
00:14:26,360 --> 00:14:30,680
<font color="#E5E5E5">too high and then we'll check you will</font>

299
00:14:28,940 --> 00:14:34,070
check for input in the column so for

300
00:14:30,680 --> 00:14:36,109
<font color="#E5E5E5">example if row number</font><font color="#CCCCCC"> two is active</font><font color="#E5E5E5"> and</font>

301
00:14:34,070 --> 00:14:39,590
<font color="#E5E5E5">you get an input on column number three</font>

302
00:14:36,110 --> 00:14:42,160
that<font color="#E5E5E5"> means someone is pressing the digit</font>

303
00:14:39,590 --> 00:14:45,350
six<font color="#E5E5E5"> because that will connect Row two</font>

304
00:14:42,160 --> 00:14:47,990
with column<font color="#E5E5E5"> three so this is just</font>

305
00:14:45,350 --> 00:14:52,640
looping<font color="#E5E5E5"> over and over again to find</font>

306
00:14:47,990 --> 00:14:54,620
which digit is being pressed<font color="#CCCCCC"> and then</font>

307
00:14:52,640 --> 00:14:56,900
the<font color="#CCCCCC"> actually interesting part</font><font color="#E5E5E5"> becomes</font>

308
00:14:54,620 --> 00:14:59,750
because by<font color="#CCCCCC"> just moving</font><font color="#E5E5E5"> these things to</font>

309
00:14:56,900 --> 00:15:01,550
size and<font color="#E5E5E5"> like abstracting them away</font><font color="#CCCCCC"> we</font>

310
00:14:59,750 --> 00:15:03,380
would have these<font color="#E5E5E5"> two rows in the middle</font>

311
00:15:01,550 --> 00:15:06,109
the lights of the<font color="#E5E5E5"> row</font><font color="#CCCCCC"> and the red row in</font>

312
00:15:03,380 --> 00:15:09,410
the very middle of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> image which were</font>

313
00:15:06,110 --> 00:15:10,970
nodes that took like one<font color="#E5E5E5"> input from the</font>

314
00:15:09,410 --> 00:15:15,110
keypad<font color="#CCCCCC"> and one</font><font color="#E5E5E5"> input from the state</font>

315
00:15:10,970 --> 00:15:18,440
machine<font color="#E5E5E5"> so by just</font><font color="#CCCCCC"> naming them according</font>

316
00:15:15,110 --> 00:15:20,600
to what<font color="#CCCCCC"> state they represented so this</font>

317
00:15:18,440 --> 00:15:23,110
node will<font color="#CCCCCC"> be active for</font><font color="#E5E5E5"> example when the</font>

318
00:15:20,600 --> 00:15:27,080
state machine is in state eight

319
00:15:23,110 --> 00:15:28,730
<font color="#CCCCCC">keys 5 is pressed</font><font color="#E5E5E5"> so basically by just</font>

320
00:15:27,080 --> 00:15:30,800
naming<font color="#E5E5E5"> them in this way you could</font>

321
00:15:28,730 --> 00:15:33,740
<font color="#E5E5E5">basically read a combination straight</font>

322
00:15:30,800 --> 00:15:38,540
off the names of these<font color="#E5E5E5"> nodes in the</font>

323
00:15:33,740 --> 00:15:43,100
<font color="#CCCCCC">middle and that way</font><font color="#E5E5E5"> this challenge was</font>

324
00:15:38,540 --> 00:15:46,610
solved so again why am<font color="#CCCCCC"> I telling</font><font color="#E5E5E5"> you</font>

325
00:15:43,100 --> 00:15:49,760
<font color="#E5E5E5">this because</font><font color="#CCCCCC"> I mean you</font><font color="#E5E5E5"> probably won't</font>

326
00:15:46,610 --> 00:15:53,240
<font color="#E5E5E5">encounter these two</font><font color="#CCCCCC"> examples</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> your day</font>

327
00:15:49,760 --> 00:15:55,700
<font color="#E5E5E5">to day</font><font color="#CCCCCC"> work</font><font color="#E5E5E5"> but the idea is that if</font><font color="#CCCCCC"> you</font>

328
00:15:53,240 --> 00:15:58,220
are practice on these like<font color="#E5E5E5"> difficult and</font>

329
00:15:55,700 --> 00:16:00,950
strange challenges<font color="#E5E5E5"> you will work up this</font>

330
00:15:58,220 --> 00:16:03,010
expertise in reverse engineering<font color="#E5E5E5"> so</font><font color="#CCCCCC"> that</font>

331
00:16:00,950 --> 00:16:05,600
like when<font color="#CCCCCC"> you encounter these things</font>

332
00:16:03,010 --> 00:16:09,230
it's easy and<font color="#CCCCCC"> you don't get frustrated</font>

333
00:16:05,600 --> 00:16:12,080
<font color="#E5E5E5">or make mistakes that cost you time and</font>

334
00:16:09,230 --> 00:16:14,390
so so it's kind of like going<font color="#E5E5E5"> to the gym</font>

335
00:16:12,080 --> 00:16:17,150
<font color="#CCCCCC">like a</font><font color="#E5E5E5"> professional</font><font color="#CCCCCC"> football player</font><font color="#E5E5E5"> it</font>

336
00:16:14,390 --> 00:16:19,730
would maybe go to the gym<font color="#E5E5E5"> to work in the</font>

337
00:16:17,150 --> 00:16:21,560
rowing machine<font color="#E5E5E5"> but he or she wouldn't go</font>

338
00:16:19,730 --> 00:16:25,850
out on the<font color="#E5E5E5"> football field</font><font color="#CCCCCC"> sit down and</font>

339
00:16:21,560 --> 00:16:28,520
start rowing<font color="#E5E5E5"> that's not what</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> do so I'm</font>

340
00:16:25,850 --> 00:16:30,710
just<font color="#E5E5E5"> encouraging you</font><font color="#CCCCCC"> to do</font><font color="#E5E5E5"> these kind of</font>

341
00:16:28,520 --> 00:16:32,960
challenges<font color="#CCCCCC"> push your limits and</font><font color="#E5E5E5"> have fun</font>

342
00:16:30,710 --> 00:16:35,150
and if you are interested in reverse

343
00:16:32,960 --> 00:16:36,920
<font color="#CCCCCC">engineering</font><font color="#E5E5E5"> there is a competition</font>

344
00:16:35,150 --> 00:16:38,420
starting next weekend<font color="#E5E5E5"> called labyrinth</font>

345
00:16:36,920 --> 00:16:41,930
<font color="#CCCCCC">they're doing this for the second year</font>

346
00:16:38,420 --> 00:16:43,640
it's organized by<font color="#E5E5E5"> Palo Alto Networks</font><font color="#CCCCCC"> so</font>

347
00:16:41,930 --> 00:16:45,829
it's a reverse engineering challenge

348
00:16:43,640 --> 00:16:50,090
that<font color="#E5E5E5"> was run for what's that like five</font>

349
00:16:45,830 --> 00:16:51,980
or six<font color="#E5E5E5"> weeks seven maybe and it was</font>

350
00:16:50,090 --> 00:16:53,300
really<font color="#E5E5E5"> really fun and educational last</font>

351
00:16:51,980 --> 00:16:54,830
year so there's a lot of<font color="#E5E5E5"> different</font>

352
00:16:53,300 --> 00:16:57,770
tracks with reverse engineering

353
00:16:54,830 --> 00:16:59,600
challenges in Windows<font color="#E5E5E5"> UNIX mobile so on</font>

354
00:16:57,770 --> 00:17:01,010
and there's a lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> prize</font><font color="#CCCCCC"> money as well</font>

355
00:16:59,600 --> 00:17:06,940
so I really<font color="#CCCCCC"> encourage</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> to check that</font>

356
00:17:01,010 --> 00:17:06,940
<font color="#CCCCCC">out and with that thanks for listening</font>

357
00:17:11,599 --> 00:17:17,719
thank you so<font color="#E5E5E5"> much</font><font color="#CCCCCC"> do we have</font><font color="#E5E5E5"> any</font>

358
00:17:14,339 --> 00:17:21,750
questions<font color="#CCCCCC"> that totally clear to</font><font color="#E5E5E5"> everyone</font>

359
00:17:17,720 --> 00:17:23,280
yes<font color="#E5E5E5"> cool I</font><font color="#CCCCCC"> hope</font><font color="#E5E5E5"> to see all of you guys</font>

360
00:17:21,750 --> 00:17:26,839
when all that<font color="#E5E5E5"> prize money</font><font color="#CCCCCC"> in leveraged</font>

361
00:17:23,280 --> 00:17:28,250
them<font color="#CCCCCC"> alright</font><font color="#E5E5E5"> thank you once again come</font>

362
00:17:26,839 --> 00:17:33,629
<font color="#CCCCCC">thank you</font>

363
00:17:28,250 --> 00:17:33,630
[Applause]

