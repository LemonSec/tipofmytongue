1
00:00:50,060 --> 00:00:53,149
[Music]

2
00:08:03,680 --> 00:08:07,199
we're starting bright and early

3
00:08:07,199 --> 00:08:10,400
everyone feels okay

4
00:08:10,560 --> 00:08:12,800
how many are uh

5
00:08:12,800 --> 00:08:14,960
super excited to be here everyone is

6
00:08:14,960 --> 00:08:17,840
right yeah

7
00:08:17,840 --> 00:08:21,919
how many of you are hangover be honest

8
00:08:22,080 --> 00:08:22,960
one

9
00:08:22,960 --> 00:08:26,080
that's not true everyone else is lying

10
00:08:26,080 --> 00:08:28,560
tired

11
00:08:29,840 --> 00:08:32,479
happy that's good

12
00:08:32,479 --> 00:08:35,039
so um

13
00:08:35,039 --> 00:08:37,120
is everyone having a

14
00:08:37,120 --> 00:08:40,479
nice day so far

15
00:08:40,479 --> 00:08:42,640
nice

16
00:08:42,640 --> 00:08:44,880
so we have a bit we're gonna we're gonna

17
00:08:44,880 --> 00:08:47,120
everyone have to find their seats

18
00:08:47,120 --> 00:08:49,120
so everyone in the venue and in the

19
00:08:49,120 --> 00:08:50,959
sponsor area if you want to find your

20
00:08:50,959 --> 00:08:53,959
seats

21
00:08:55,760 --> 00:08:58,720
is there anyone who has a special day

22
00:08:58,720 --> 00:09:01,040
today

23
00:09:01,040 --> 00:09:02,959
anyone

24
00:09:02,959 --> 00:09:05,920
who want to confess

25
00:09:06,160 --> 00:09:09,160
no

26
00:09:09,760 --> 00:09:12,080
i heard from a friend

27
00:09:12,080 --> 00:09:13,920
that someone is having a very special

28
00:09:13,920 --> 00:09:16,000
day today

29
00:09:16,000 --> 00:09:17,680
i'm not sure whether where that friend

30
00:09:17,680 --> 00:09:19,440
is though i can't really see him if you

31
00:09:19,440 --> 00:09:21,200
if you're here and you're my special

32
00:09:21,200 --> 00:09:22,480
friend

33
00:09:22,480 --> 00:09:24,000
raise your hand

34
00:09:24,000 --> 00:09:26,880
because i have a spotlight in my face

35
00:09:26,880 --> 00:09:29,200
let's see

36
00:09:29,200 --> 00:09:32,320
now i can see him either

37
00:09:33,440 --> 00:09:35,360
maybe we should go and check

38
00:09:35,360 --> 00:09:36,959
can you go and check if you find my

39
00:09:36,959 --> 00:09:39,040
friend

40
00:09:39,040 --> 00:09:40,160
yeah

41
00:09:40,160 --> 00:09:42,080
so yesterday no one died

42
00:09:42,080 --> 00:09:43,120
i heard

43
00:09:43,120 --> 00:09:45,839
which was awesome did you like the fire

44
00:09:45,839 --> 00:09:47,760
it was pretty cool eh

45
00:09:47,760 --> 00:09:49,279
to be honest they actually dialed it

46
00:09:49,279 --> 00:09:51,120
down a bit

47
00:09:51,120 --> 00:09:53,519
did you notice the lamps

48
00:09:53,519 --> 00:09:55,680
yeah one is dead

49
00:09:55,680 --> 00:09:56,959
that's the only thing that i think we

50
00:09:56,959 --> 00:09:59,680
lost now it was actually pretty cool eh

51
00:09:59,680 --> 00:10:01,519
and all the heat and stuff

52
00:10:01,519 --> 00:10:04,399
a lot of a lot of our like the girl like

53
00:10:04,399 --> 00:10:06,000
the nerd community here were shell

54
00:10:06,000 --> 00:10:07,839
shocked everyone's learning like

55
00:10:07,839 --> 00:10:09,279
what's going on but it was i think it

56
00:10:09,279 --> 00:10:11,920
was really good it was a good addition

57
00:10:11,920 --> 00:10:13,680
so that was pretty cool

58
00:10:13,680 --> 00:10:16,079
now let's see do we have

59
00:10:16,079 --> 00:10:17,760
not really i have to wait a little bit

60
00:10:17,760 --> 00:10:18,959
more

61
00:10:18,959 --> 00:10:20,640
a little bit more

62
00:10:20,640 --> 00:10:22,560
it will be worth the wait

63
00:10:22,560 --> 00:10:25,360
we're gonna hear jossey speak it will be

64
00:10:25,360 --> 00:10:27,200
the opening act we have to have

65
00:10:27,200 --> 00:10:28,800
something very interesting during the

66
00:10:28,800 --> 00:10:32,079
morning otherwise people tend to sleep

67
00:10:32,079 --> 00:10:34,079
that's like a thing

68
00:10:34,079 --> 00:10:36,959
or just watch the stream

69
00:10:36,959 --> 00:10:39,360
so this is pretty cool because now i

70
00:10:39,360 --> 00:10:40,480
think

71
00:10:40,480 --> 00:10:43,600
we're getting here right

72
00:10:46,079 --> 00:10:48,000
so i have one thing that i would like to

73
00:10:48,000 --> 00:10:49,120
say

74
00:10:49,120 --> 00:10:50,800
uh yawn

75
00:10:50,800 --> 00:10:53,839
don't hide come over here come

76
00:10:53,839 --> 00:10:57,120
i want to speak with you a little bit

77
00:10:57,120 --> 00:10:58,839
everyone this is

78
00:10:58,839 --> 00:11:02,880
john he's one of our sponsors

79
00:11:02,880 --> 00:11:04,399
give him an applause he's making this

80
00:11:04,399 --> 00:11:05,560
happen

81
00:11:05,560 --> 00:11:08,000
[Applause]

82
00:11:08,000 --> 00:11:10,560
come up here

83
00:11:11,600 --> 00:11:13,200
and this is a funny thing because this

84
00:11:13,200 --> 00:11:16,880
is a young special day it's his birthday

85
00:11:16,880 --> 00:11:19,920
[Music]

86
00:11:19,920 --> 00:11:22,480
so i thought that we should do the only

87
00:11:22,480 --> 00:11:24,079
right thing right

88
00:11:24,079 --> 00:11:26,959
and that is to sing for you

89
00:11:26,959 --> 00:11:30,880
so can everyone please help me stand up

90
00:11:31,120 --> 00:11:32,720
and let's do this we i think we should

91
00:11:32,720 --> 00:11:34,240
do it in english right otherwise it

92
00:11:34,240 --> 00:11:37,200
would be very weird okay

93
00:11:37,200 --> 00:11:39,519
let's you want anyone who wants to start

94
00:11:39,519 --> 00:11:41,040
this okay so

95
00:11:41,040 --> 00:11:44,839
one two three

96
00:11:58,850 --> 00:12:02,159
[Music]

97
00:12:03,839 --> 00:12:05,760
yeah you may leave that

98
00:12:05,760 --> 00:12:07,760
thank you john you had to have that

99
00:12:07,760 --> 00:12:09,040
anyone else

100
00:12:09,040 --> 00:12:10,480
no

101
00:12:10,480 --> 00:12:13,200
okay so without further ado

102
00:12:13,200 --> 00:12:16,000
let's kick day number two off

103
00:12:16,000 --> 00:12:19,360
with josie is gonna teach us everything

104
00:12:19,360 --> 00:12:23,399
about microsoft mainframes

105
00:12:24,320 --> 00:12:26,320
all right good morning thank you

106
00:12:26,320 --> 00:12:27,920
everybody uh

107
00:12:27,920 --> 00:12:29,600
the only thing you can't say about this

108
00:12:29,600 --> 00:12:32,639
conference that uh is that no lamps died

109
00:12:32,639 --> 00:12:36,800
while making this conference sadly

110
00:12:36,800 --> 00:12:38,959
very happy to be here uh very happy to

111
00:12:38,959 --> 00:12:40,639
see all of you in the morning slot

112
00:12:40,639 --> 00:12:43,040
always a challenging one maybe not as

113
00:12:43,040 --> 00:12:45,600
much as the lunch one but still

114
00:12:45,600 --> 00:12:48,079
and today i'm going uh to talk to you

115
00:12:48,079 --> 00:12:51,040
uh quite a bit about active directory uh

116
00:12:51,040 --> 00:12:53,279
forensics active directory in general

117
00:12:53,279 --> 00:12:55,279
and forensics active directory is a

118
00:12:55,279 --> 00:12:57,920
phrase i sort of coined back in rsa like

119
00:12:57,920 --> 00:13:00,079
five or six years ago

120
00:13:00,079 --> 00:13:02,399
uh when i was part of javelin networks a

121
00:13:02,399 --> 00:13:05,519
startup that we sold to symantec

122
00:13:05,519 --> 00:13:07,600
2018

123
00:13:07,600 --> 00:13:10,320
i'm essentially a red teamer in mind

124
00:13:10,320 --> 00:13:12,480
with the heart of a blue teamer i really

125
00:13:12,480 --> 00:13:15,279
care about blue teamers

126
00:13:15,279 --> 00:13:17,440
and that's what we'll talk about today

127
00:13:17,440 --> 00:13:20,240
so a little bit or bit about myself i

128
00:13:20,240 --> 00:13:22,560
love to play guitars on the world's

129
00:13:22,560 --> 00:13:24,160
largest stages what i really do

130
00:13:24,160 --> 00:13:26,160
professionally

131
00:13:26,160 --> 00:13:29,600
in parallel to the infosec is music

132
00:13:29,600 --> 00:13:31,600
and also fly planes so that's that's my

133
00:13:31,600 --> 00:13:34,079
main passions but still i do a lot of

134
00:13:34,079 --> 00:13:37,200
hours uh coding and on the computer

135
00:13:37,200 --> 00:13:39,519
uh with my my own firm my own company 10

136
00:13:39,519 --> 00:13:42,560
root cyber security in israel

137
00:13:42,560 --> 00:13:44,000
i've been around with computers for a

138
00:13:44,000 --> 00:13:46,720
while i'm essentially a hacker a modern

139
00:13:46,720 --> 00:13:49,600
kid hacker from the 80s who grew up with

140
00:13:49,600 --> 00:13:51,680
the different technologies openvms etc

141
00:13:51,680 --> 00:13:54,320
and discovered microsoft got to work for

142
00:13:54,320 --> 00:13:57,279
microsoft for nearly a decade from the

143
00:13:57,279 --> 00:14:00,079
90s 98 to 2007

144
00:14:00,079 --> 00:14:02,079
pretty much the only security guy there

145
00:14:02,079 --> 00:14:03,680
pretty much the only guy with the linux

146
00:14:03,680 --> 00:14:05,600
machine with the dual boot in his

147
00:14:05,600 --> 00:14:07,440
machine i sat there when steve balmer

148
00:14:07,440 --> 00:14:09,360
called linux a cancer and i had linux on

149
00:14:09,360 --> 00:14:12,240
my laptop that was frightening

150
00:14:12,240 --> 00:14:14,959
but other than this adventure

151
00:14:14,959 --> 00:14:16,639
all my life more was more of a

152
00:14:16,639 --> 00:14:18,800
freelancer including like i said

153
00:14:18,800 --> 00:14:21,920
uh javelin networks uh me and a bunch of

154
00:14:21,920 --> 00:14:24,240
ex-israeli air force officers and

155
00:14:24,240 --> 00:14:26,000
intelligence corps which we

156
00:14:26,000 --> 00:14:28,560
uh developed a deception solution

157
00:14:28,560 --> 00:14:32,079
in memory unload the driver creating a

158
00:14:32,079 --> 00:14:34,880
a really unique uh deception solution in

159
00:14:34,880 --> 00:14:37,279
memory for microsoft networks

160
00:14:37,279 --> 00:14:39,760
um so what we'll talk about we'll begin

161
00:14:39,760 --> 00:14:42,240
with understanding uh what is active

162
00:14:42,240 --> 00:14:44,720
directory why is it so hackable and why

163
00:14:44,720 --> 00:14:47,600
is it that in its third decades

164
00:14:47,600 --> 00:14:49,040
this uh

165
00:14:49,040 --> 00:14:51,199
technology this identity central

166
00:14:51,199 --> 00:14:53,519
management authentication authorization

167
00:14:53,519 --> 00:14:54,880
in 95

168
00:14:54,880 --> 00:14:57,120
of all organizations in the world

169
00:14:57,120 --> 00:14:59,519
why is it still so easy to do

170
00:14:59,519 --> 00:15:00,880
reconnaissance lateral movement

171
00:15:00,880 --> 00:15:02,959
credential theft and essentially uh

172
00:15:02,959 --> 00:15:04,320
privileged persistence in those

173
00:15:04,320 --> 00:15:05,600
environments

174
00:15:05,600 --> 00:15:08,000
then we'll talk about the main part will

175
00:15:08,000 --> 00:15:09,920
be how you

176
00:15:09,920 --> 00:15:11,839
investigate and build a timeline in

177
00:15:11,839 --> 00:15:14,959
terms of forensics and incident response

178
00:15:14,959 --> 00:15:17,279
understanding who did what

179
00:15:17,279 --> 00:15:18,639
when you don't have

180
00:15:18,639 --> 00:15:20,560
your logs all your security logs got

181
00:15:20,560 --> 00:15:22,560
wiped maybe ransomware most of your

182
00:15:22,560 --> 00:15:24,079
domain controllers are encrypted you

183
00:15:24,079 --> 00:15:26,480
only have some backups quite recent how

184
00:15:26,480 --> 00:15:29,120
do you build all that happened in your

185
00:15:29,120 --> 00:15:31,839
network only from this bunch of files

186
00:15:31,839 --> 00:15:33,440
and i'll share with you some open source

187
00:15:33,440 --> 00:15:35,440
tools and scripts uh that i wrote for

188
00:15:35,440 --> 00:15:38,480
that and will uh wrap up the candy will

189
00:15:38,480 --> 00:15:39,440
be

190
00:15:39,440 --> 00:15:41,920
a tool i'm working on quite ready to be

191
00:15:41,920 --> 00:15:43,040
released

192
00:15:43,040 --> 00:15:45,519
which detects no agent nothing to the

193
00:15:45,519 --> 00:15:47,279
network detects past the hash and golden

194
00:15:47,279 --> 00:15:48,720
ticket attacks

195
00:15:48,720 --> 00:15:50,639
so active directory is a database

196
00:15:50,639 --> 00:15:52,560
essentially a distributed database holds

197
00:15:52,560 --> 00:15:54,399
all the users passwords

198
00:15:54,399 --> 00:15:55,120
uh

199
00:15:55,120 --> 00:15:56,880
applications services and it is the

200
00:15:56,880 --> 00:15:59,360
access control model for microsoft

201
00:15:59,360 --> 00:16:01,199
domain networks but it's also a

202
00:16:01,199 --> 00:16:03,120
technology that as much as system and

203
00:16:03,120 --> 00:16:05,360
means it folks love there is a

204
00:16:05,360 --> 00:16:07,440
population that loves it more and these

205
00:16:07,440 --> 00:16:11,199
are attackers adversaries hackers

206
00:16:11,199 --> 00:16:12,480
it's really

207
00:16:12,480 --> 00:16:15,680
easy silly easy to hack your way into an

208
00:16:15,680 --> 00:16:17,040
active directory domain and from there

209
00:16:17,040 --> 00:16:18,560
to get access

210
00:16:18,560 --> 00:16:20,959
privileged access to any application or

211
00:16:20,959 --> 00:16:22,480
service in the network

212
00:16:22,480 --> 00:16:24,079
and even

213
00:16:24,079 --> 00:16:27,040
in its uh third decade

214
00:16:27,040 --> 00:16:29,920
active directory continues to be a very

215
00:16:29,920 --> 00:16:32,160
highly trending risk

216
00:16:32,160 --> 00:16:34,079
in environment so gartner keeps on

217
00:16:34,079 --> 00:16:36,560
having that every year also from this

218
00:16:36,560 --> 00:16:38,720
year's top risks identity first security

219
00:16:38,720 --> 00:16:40,240
nation states are targeting active

220
00:16:40,240 --> 00:16:43,199
directory with phenomenal success

221
00:16:43,199 --> 00:16:45,279
uh i love the smell of the main admin in

222
00:16:45,279 --> 00:16:46,880
the morning and me and my team we have a

223
00:16:46,880 --> 00:16:49,519
statistic our average is around seven

224
00:16:49,519 --> 00:16:52,399
minutes from norman non-privileged not

225
00:16:52,399 --> 00:16:54,399
even a local admin user

226
00:16:54,399 --> 00:16:56,320
through a set of dozens of techniques

227
00:16:56,320 --> 00:16:57,759
that we use locally and through the

228
00:16:57,759 --> 00:17:00,079
network to reaching a highly privileged

229
00:17:00,079 --> 00:17:01,680
user getting a shell on your domain

230
00:17:01,680 --> 00:17:03,759
controller

231
00:17:03,759 --> 00:17:05,199
it's it's really is

232
00:17:05,199 --> 00:17:08,000
it strikes me all the time that uh even

233
00:17:08,000 --> 00:17:09,760
today we find

234
00:17:09,760 --> 00:17:12,319
uh vulnerabilities cvs in active

235
00:17:12,319 --> 00:17:14,799
directory that allow you like this one

236
00:17:14,799 --> 00:17:18,079
for instance in late 2020 uh circle the

237
00:17:18,079 --> 00:17:19,839
time of solar winds

238
00:17:19,839 --> 00:17:21,919
uh which also by the way solarwinds also

239
00:17:21,919 --> 00:17:23,679
used active directory domains as part of

240
00:17:23,679 --> 00:17:24,959
its algorithm

241
00:17:24,959 --> 00:17:27,520
uh this one allowed you zero logon

242
00:17:27,520 --> 00:17:29,200
probably if you know your active

243
00:17:29,200 --> 00:17:30,960
directory you know zero logon allowed

244
00:17:30,960 --> 00:17:33,120
you to become from unauthenticated just

245
00:17:33,120 --> 00:17:35,200
having the domain controller ip

246
00:17:35,200 --> 00:17:37,520
to a fully domain admin fully privileged

247
00:17:37,520 --> 00:17:39,600
shell in about five

248
00:17:39,600 --> 00:17:40,720
seconds

249
00:17:40,720 --> 00:17:43,679
and that was uh quite a unique one and

250
00:17:43,679 --> 00:17:45,840
this is from recent weeks or months you

251
00:17:45,840 --> 00:17:46,640
know

252
00:17:46,640 --> 00:17:48,960
same account name spoofing uh if you can

253
00:17:48,960 --> 00:17:51,600
add a computer account hint by default

254
00:17:51,600 --> 00:17:53,200
every user can add your

255
00:17:53,200 --> 00:17:54,960
computer account you can become a domain

256
00:17:54,960 --> 00:17:58,640
admin uh curb relay app just from two

257
00:17:58,640 --> 00:18:01,760
last two three weeks uh universal non no

258
00:18:01,760 --> 00:18:03,440
fix so it's really cannot be fixed with

259
00:18:03,440 --> 00:18:05,200
the default configuration

260
00:18:05,200 --> 00:18:07,200
and active directory vulnerabilities are

261
00:18:07,200 --> 00:18:08,559
there in every patch tuesday by

262
00:18:08,559 --> 00:18:10,480
microsoft including the last one just

263
00:18:10,480 --> 00:18:13,520
from now this last may june

264
00:18:13,520 --> 00:18:16,559
so why is idea hackable so i argue it is

265
00:18:16,559 --> 00:18:20,559
a bit like tcp i think active directory

266
00:18:20,559 --> 00:18:22,880
as much as tcpap didn't plan to be that

267
00:18:22,880 --> 00:18:25,360
popular you see tcpap when it was

268
00:18:25,360 --> 00:18:28,880
developed late 60s early 70s it was uh

269
00:18:28,880 --> 00:18:30,480
because of the cold war between the

270
00:18:30,480 --> 00:18:32,880
russians and america and the states they

271
00:18:32,880 --> 00:18:35,200
they needed something to survive

272
00:18:35,200 --> 00:18:36,880
essentially the whole thing was

273
00:18:36,880 --> 00:18:39,360
availability and disaster

274
00:18:39,360 --> 00:18:42,000
recovery to survive like some physical

275
00:18:42,000 --> 00:18:45,200
damage etc security was never uh in the

276
00:18:45,200 --> 00:18:48,080
goals or the mindset of tcp ip to begin

277
00:18:48,080 --> 00:18:50,559
with and this is a bit the same of like

278
00:18:50,559 --> 00:18:52,320
active directory those both technologies

279
00:18:52,320 --> 00:18:55,919
got super uh popular super common

280
00:18:55,919 --> 00:18:58,640
but they are very far from the threat

281
00:18:58,640 --> 00:19:00,400
landscape that they have to deal with

282
00:19:00,400 --> 00:19:02,640
active directory was developed conceived

283
00:19:02,640 --> 00:19:05,440
designed in in somewhere in the 90s

284
00:19:05,440 --> 00:19:08,000
early mid 90s already the coding

285
00:19:08,000 --> 00:19:09,520
happened so everything was locked in the

286
00:19:09,520 --> 00:19:10,480
design

287
00:19:10,480 --> 00:19:12,880
this was before this was early internet

288
00:19:12,880 --> 00:19:15,600
this was before uh cloud of course

289
00:19:15,600 --> 00:19:16,640
before

290
00:19:16,640 --> 00:19:19,440
virtualization even vmware uh did not

291
00:19:19,440 --> 00:19:22,240
exist back then not to mention uh all a

292
00:19:22,240 --> 00:19:24,559
bunch of other technologies and it is

293
00:19:24,559 --> 00:19:26,320
involved in every huge breach and it is

294
00:19:26,320 --> 00:19:29,840
the microsoft mainframe to say

295
00:19:29,840 --> 00:19:31,919
because uh it is here to last i

296
00:19:31,919 --> 00:19:34,000
sometimes read uh

297
00:19:34,000 --> 00:19:36,880
some tweets etc saying you know azure id

298
00:19:36,880 --> 00:19:38,640
etc so azure id by the way it's a

299
00:19:38,640 --> 00:19:40,799
marketing phrase the azure id is not

300
00:19:40,799 --> 00:19:43,440
really ad nothing kerberos held up about

301
00:19:43,440 --> 00:19:44,160
it

302
00:19:44,160 --> 00:19:45,520
and

303
00:19:45,520 --> 00:19:47,600
the microsoft mainframe active directory

304
00:19:47,600 --> 00:19:49,679
is here to stay even if some workloads

305
00:19:49,679 --> 00:19:51,760
will go to the cloud

306
00:19:51,760 --> 00:19:54,240
on the on-prem it is by far the

307
00:19:54,240 --> 00:19:56,480
centralized identity management solution

308
00:19:56,480 --> 00:19:58,799
here to stay and last for several more

309
00:19:58,799 --> 00:20:01,120
decades and compromising grid really

310
00:20:01,120 --> 00:20:03,200
means game over

311
00:20:03,200 --> 00:20:05,840
i think the problem begins with people

312
00:20:05,840 --> 00:20:06,880
having

313
00:20:06,880 --> 00:20:09,679
much less in-depth knowledge about id

314
00:20:09,679 --> 00:20:10,400
than

315
00:20:10,400 --> 00:20:12,080
they think they have

316
00:20:12,080 --> 00:20:14,320
because it is very popular to say yeah

317
00:20:14,320 --> 00:20:15,360
sure

318
00:20:15,360 --> 00:20:17,520
i know a bunch of tools and i downloaded

319
00:20:17,520 --> 00:20:19,280
rubios mimikets and a bunch of other

320
00:20:19,280 --> 00:20:20,400
stuff and

321
00:20:20,400 --> 00:20:22,640
bloodhound and and this makes

322
00:20:22,640 --> 00:20:25,440
me understand how active directory works

323
00:20:25,440 --> 00:20:27,679
and i'm mainly saying it also not only

324
00:20:27,679 --> 00:20:29,440
for retainers but also for blue teamers

325
00:20:29,440 --> 00:20:31,520
that think they understand their active

326
00:20:31,520 --> 00:20:33,200
directory and i'll give you an example

327
00:20:33,200 --> 00:20:35,280
in a minute what i'm talking about so i

328
00:20:35,280 --> 00:20:37,600
think at minimum before you can actually

329
00:20:37,600 --> 00:20:38,559
address

330
00:20:38,559 --> 00:20:40,880
some advanced topics such as ad

331
00:20:40,880 --> 00:20:43,200
forensics which we'll we'll discuss now

332
00:20:43,200 --> 00:20:44,880
uh you should really understand and get

333
00:20:44,880 --> 00:20:46,960
a good grasp about how identities

334
00:20:46,960 --> 00:20:48,640
authentication authorization

335
00:20:48,640 --> 00:20:50,960
and the auditing mechanisms work

336
00:20:50,960 --> 00:20:53,919
uh realized that ad can authenticate you

337
00:20:53,919 --> 00:20:56,240
not only in kerbos obviously ntlm is

338
00:20:56,240 --> 00:20:58,880
there and ldap or ldap s

339
00:20:58,880 --> 00:21:01,440
meaning ldap over tls is there

340
00:21:01,440 --> 00:21:03,360
logons versus authentications the

341
00:21:03,360 --> 00:21:05,360
different logon types that's really a

342
00:21:05,360 --> 00:21:07,520
basic basic thing to get your head

343
00:21:07,520 --> 00:21:08,400
around

344
00:21:08,400 --> 00:21:11,360
understanding that uh not only users can

345
00:21:11,360 --> 00:21:13,360
log in and authenticate but also

346
00:21:13,360 --> 00:21:15,360
computers computers in active directory

347
00:21:15,360 --> 00:21:17,520
are accounts

348
00:21:17,520 --> 00:21:19,200
by all means they have passwords they

349
00:21:19,200 --> 00:21:22,080
can login to other computers

350
00:21:22,080 --> 00:21:23,760
exactly computers can login to other

351
00:21:23,760 --> 00:21:24,799
computers

352
00:21:24,799 --> 00:21:26,559
and if that's something you're missing

353
00:21:26,559 --> 00:21:29,280
then you can be hacked through computer

354
00:21:29,280 --> 00:21:30,880
accounts and of course security

355
00:21:30,880 --> 00:21:33,280
principles essentially accounts that

356
00:21:33,280 --> 00:21:34,880
objects that can have

357
00:21:34,880 --> 00:21:37,120
see the security identifier that goes to

358
00:21:37,120 --> 00:21:38,960
user computers and groups and

359
00:21:38,960 --> 00:21:41,600
authorization is a tricky thing because

360
00:21:41,600 --> 00:21:43,360
normally people would look mainly on

361
00:21:43,360 --> 00:21:45,919
group memberships like is this user a

362
00:21:45,919 --> 00:21:47,520
member of domain admins enterprise

363
00:21:47,520 --> 00:21:50,000
admins etc but they will miss out the

364
00:21:50,000 --> 00:21:51,760
real thing which is the access control

365
00:21:51,760 --> 00:21:54,880
list and authorization is all about uh

366
00:21:54,880 --> 00:21:56,720
your token essentially your access

367
00:21:56,720 --> 00:21:58,400
control list uh

368
00:21:58,400 --> 00:22:00,640
or if you want to be specific in kerbos

369
00:22:00,640 --> 00:22:02,480
it's the pac it's the privilege

370
00:22:02,480 --> 00:22:04,320
attribute certificate which is the

371
00:22:04,320 --> 00:22:06,159
collection cumulative collection of

372
00:22:06,159 --> 00:22:08,640
security identifiers in your security

373
00:22:08,640 --> 00:22:11,360
token that you present to the network

374
00:22:11,360 --> 00:22:13,120
and you can see where this goes so you

375
00:22:13,120 --> 00:22:14,960
can have direct says assignment and you

376
00:22:14,960 --> 00:22:17,360
have all kinds of object access types to

377
00:22:17,360 --> 00:22:19,840
do different things like

378
00:22:19,840 --> 00:22:22,720
reset passwords install a ds replica

379
00:22:22,720 --> 00:22:23,919
which allows you to add a domain

380
00:22:23,919 --> 00:22:25,440
controller so even if you have zero

381
00:22:25,440 --> 00:22:26,960
other permissions

382
00:22:26,960 --> 00:22:28,960
that you will never notice this very

383
00:22:28,960 --> 00:22:30,400
delicate permission is enough to take

384
00:22:30,400 --> 00:22:32,640
control of the entire organization

385
00:22:32,640 --> 00:22:34,720
and of course it doesn't hurt to have

386
00:22:34,720 --> 00:22:36,400
some good knowledge of windows internals

387
00:22:36,400 --> 00:22:38,960
so how processes threads handle security

388
00:22:38,960 --> 00:22:41,039
talks and test or works that's that's a

389
00:22:41,039 --> 00:22:42,480
basic thing

390
00:22:42,480 --> 00:22:44,400
a few quick examples about what it means

391
00:22:44,400 --> 00:22:46,640
to know your active directory so in this

392
00:22:46,640 --> 00:22:49,440
example we have a user laura and this

393
00:22:49,440 --> 00:22:52,559
user as you can see is a member of

394
00:22:52,559 --> 00:22:54,400
essentially one group marketing

395
00:22:54,400 --> 00:22:56,960
domain users is a primary group it

396
00:22:56,960 --> 00:22:59,760
doesn't really count but uh

397
00:22:59,760 --> 00:23:02,080
so and also if you will run the your

398
00:23:02,080 --> 00:23:04,320
default tools coming from microsoft so

399
00:23:04,320 --> 00:23:05,840
you will get the principal group

400
00:23:05,840 --> 00:23:07,200
membership will only contain domain

401
00:23:07,200 --> 00:23:09,280
users and marketing right

402
00:23:09,280 --> 00:23:11,039
and then many admins will work by the

403
00:23:11,039 --> 00:23:12,640
assumptions that that's what this user

404
00:23:12,640 --> 00:23:15,120
can do anything that you granted to this

405
00:23:15,120 --> 00:23:17,440
user specifically or to the marketing

406
00:23:17,440 --> 00:23:19,679
group but as you would see this this

407
00:23:19,679 --> 00:23:23,360
quick parser script i i provided for you

408
00:23:23,360 --> 00:23:24,159
so

409
00:23:24,159 --> 00:23:26,000
when you will run this script which

410
00:23:26,000 --> 00:23:28,240
essentially enumerates the privileged

411
00:23:28,240 --> 00:23:29,919
attribute certificate

412
00:23:29,919 --> 00:23:30,960
uh so

413
00:23:30,960 --> 00:23:33,120
this this by the way you can do for any

414
00:23:33,120 --> 00:23:34,720
user in the domain so you will see you

415
00:23:34,720 --> 00:23:36,880
got four groups back marketing managers

416
00:23:36,880 --> 00:23:38,320
and development where the where did

417
00:23:38,320 --> 00:23:40,000
those groups come from they weren't in

418
00:23:40,000 --> 00:23:42,000
the gui they are not in my other

419
00:23:42,000 --> 00:23:43,600
management tools

420
00:23:43,600 --> 00:23:45,360
um

421
00:23:45,360 --> 00:23:48,720
and what you would see if you will

422
00:23:48,720 --> 00:23:51,360
dive a bit more closely and you will

423
00:23:51,360 --> 00:23:52,320
consider

424
00:23:52,320 --> 00:23:54,240
perhaps the concept of nested group

425
00:23:54,240 --> 00:23:56,880
membership so you will see that the

426
00:23:56,880 --> 00:23:59,120
effective group membership really also

427
00:23:59,120 --> 00:24:01,840
includes groups that you are part of

428
00:24:01,840 --> 00:24:04,080
up there in the hierarchy so this really

429
00:24:04,080 --> 00:24:05,919
means that some permissions that are

430
00:24:05,919 --> 00:24:07,840
granted to other groups that this user

431
00:24:07,840 --> 00:24:10,880
does not have directly can affect the

432
00:24:10,880 --> 00:24:12,080
de facto

433
00:24:12,080 --> 00:24:13,200
access

434
00:24:13,200 --> 00:24:15,279
permissions that this user will get

435
00:24:15,279 --> 00:24:16,880
another interesting case is the case of

436
00:24:16,880 --> 00:24:18,960
admin sd holder so the administrative

437
00:24:18,960 --> 00:24:20,320
security descriptor holder is

438
00:24:20,320 --> 00:24:22,080
essentially a container

439
00:24:22,080 --> 00:24:24,240
in active directory in your domain and

440
00:24:24,240 --> 00:24:26,240
if you look at this user in this example

441
00:24:26,240 --> 00:24:28,880
here a user called chi so this user does

442
00:24:28,880 --> 00:24:31,600
not have any group membership right so

443
00:24:31,600 --> 00:24:33,279
it just has the primary group domain

444
00:24:33,279 --> 00:24:35,120
user very simple one doesn't grant you

445
00:24:35,120 --> 00:24:37,279
any specific uh

446
00:24:37,279 --> 00:24:38,960
special privileges

447
00:24:38,960 --> 00:24:41,279
of course he cannot access the

448
00:24:41,279 --> 00:24:43,120
the c dollar drive of a domain

449
00:24:43,120 --> 00:24:44,480
controller that's not something he would

450
00:24:44,480 --> 00:24:47,360
be able to do so for your average blue

451
00:24:47,360 --> 00:24:50,400
teamer this user is essentially not a

452
00:24:50,400 --> 00:24:52,799
risk is useless you know you can't do

453
00:24:52,799 --> 00:24:53,760
anything

454
00:24:53,760 --> 00:24:56,240
but watch out what i can do with this

455
00:24:56,240 --> 00:24:58,640
user i can go ahead and look at

456
00:24:58,640 --> 00:25:00,480
enterprise admins

457
00:25:00,480 --> 00:25:02,799
non-arguably one of the most privileged

458
00:25:02,799 --> 00:25:04,640
groups in an active directory domain in

459
00:25:04,640 --> 00:25:07,919
kerberos realm and this group gives you

460
00:25:07,919 --> 00:25:10,559
forest wide permissions so in a way it's

461
00:25:10,559 --> 00:25:13,679
a bit even more privileged than a domain

462
00:25:13,679 --> 00:25:15,679
admin and i can go ahead and add other

463
00:25:15,679 --> 00:25:18,559
users so i just went ahead and added

464
00:25:18,559 --> 00:25:22,559
ashley some other user how can i do that

465
00:25:22,559 --> 00:25:24,720
is it even possible

466
00:25:24,720 --> 00:25:27,679
given you saw my group membership so i i

467
00:25:27,679 --> 00:25:29,520
don't have it in my sids there is no

468
00:25:29,520 --> 00:25:31,440
direct seed assignment that allows me to

469
00:25:31,440 --> 00:25:32,480
do that

470
00:25:32,480 --> 00:25:34,480
and still i am able to do that so just

471
00:25:34,480 --> 00:25:35,919
think about that

472
00:25:35,919 --> 00:25:37,440
and understand that active directory has

473
00:25:37,440 --> 00:25:39,840
a set of permissions per object per

474
00:25:39,840 --> 00:25:41,919
property read write at the property

475
00:25:41,919 --> 00:25:43,279
level

476
00:25:43,279 --> 00:25:45,840
and you should really be aware of that

477
00:25:45,840 --> 00:25:48,000
i love this quote from ernest hemingway

478
00:25:48,000 --> 00:25:49,919
the best way to find out if you can

479
00:25:49,919 --> 00:25:51,919
trust somebody is to trust them

480
00:25:51,919 --> 00:25:55,279
and oh boy does active directory trust

481
00:25:55,279 --> 00:25:57,919
any authenticated user or computer

482
00:25:57,919 --> 00:26:00,240
you see i guess back in the 90s it

483
00:26:00,240 --> 00:26:01,919
didn't matter much that after you got

484
00:26:01,919 --> 00:26:04,159
authenticated you proved your

485
00:26:04,159 --> 00:26:07,200
claim that you are decent that user then

486
00:26:07,200 --> 00:26:08,799
you could

487
00:26:08,799 --> 00:26:11,039
for example do full reconnaissance uh

488
00:26:11,039 --> 00:26:13,760
dump the entire dns zones of your domain

489
00:26:13,760 --> 00:26:16,000
uh see get all the privileged users

490
00:26:16,000 --> 00:26:17,919
where are they logged on from from which

491
00:26:17,919 --> 00:26:20,320
ip addresses what was the last time they

492
00:26:20,320 --> 00:26:21,840
changed their passwords what was the

493
00:26:21,840 --> 00:26:23,840
last logon of each and every user and

494
00:26:23,840 --> 00:26:25,679
from which ap it happened so all this

495
00:26:25,679 --> 00:26:27,279
information

496
00:26:27,279 --> 00:26:29,840
essentially with the with some code

497
00:26:29,840 --> 00:26:31,840
you can get all this information freely

498
00:26:31,840 --> 00:26:33,520
and the second point is that not only

499
00:26:33,520 --> 00:26:35,919
this information is available with full

500
00:26:35,919 --> 00:26:37,679
reconnaissance of your assets to every

501
00:26:37,679 --> 00:26:40,240
user it is also available in a bunch of

502
00:26:40,240 --> 00:26:43,440
dozens protocols and apis so ldap dns

503
00:26:43,440 --> 00:26:46,880
cables wmi rpc dcom oledb

504
00:26:46,880 --> 00:26:50,640
adsi system directory services adws id

505
00:26:50,640 --> 00:26:53,760
web services these are all just a tiny

506
00:26:53,760 --> 00:26:56,640
bit of apis and protocols you can access

507
00:26:56,640 --> 00:26:58,799
active directory to query for this

508
00:26:58,799 --> 00:27:01,679
information so there is no surprise

509
00:27:01,679 --> 00:27:04,080
that is it is a part of any advanced

510
00:27:04,080 --> 00:27:06,400
persistent threat any big apt by nation

511
00:27:06,400 --> 00:27:08,080
states

512
00:27:08,080 --> 00:27:09,520
and you can also see it in every

513
00:27:09,520 --> 00:27:12,080
ransomware that respects itself and just

514
00:27:12,080 --> 00:27:13,919
have a look at the ports

515
00:27:13,919 --> 00:27:16,080
on your active directory obviously web

516
00:27:16,080 --> 00:27:19,360
services were not invented back then

517
00:27:19,360 --> 00:27:21,520
and nobody thought you could or would

518
00:27:21,520 --> 00:27:23,600
want to tunnel uh

519
00:27:23,600 --> 00:27:26,159
something on a single port uh one way

520
00:27:26,159 --> 00:27:29,039
god forbid uh so the ones on the yellow

521
00:27:29,039 --> 00:27:31,440
are the sort of mandatory ones that you

522
00:27:31,440 --> 00:27:33,440
would expect to see the blue is also

523
00:27:33,440 --> 00:27:36,000
mandatory but not from every uh

524
00:27:36,000 --> 00:27:37,679
endpoint on the network but you need it

525
00:27:37,679 --> 00:27:39,120
to manage active directory from your

526
00:27:39,120 --> 00:27:40,159
partial

527
00:27:40,159 --> 00:27:42,399
ad module and the last ones of course

528
00:27:42,399 --> 00:27:44,559
are also very important you can maybe

529
00:27:44,559 --> 00:27:47,120
minimize this range of

530
00:27:47,120 --> 00:27:50,240
ephemeral ports the high range ports

531
00:27:50,240 --> 00:27:53,039
up from four nine one five two to six

532
00:27:53,039 --> 00:27:55,200
five five three five but still you need

533
00:27:55,200 --> 00:27:56,320
them

534
00:27:56,320 --> 00:27:58,480
as if this is not enough

535
00:27:58,480 --> 00:28:01,440
microsoft kept us confused all the time

536
00:28:01,440 --> 00:28:03,600
us architects bluetooth emails his

537
00:28:03,600 --> 00:28:06,240
admins etc they had a chance to change

538
00:28:06,240 --> 00:28:07,840
their mind about what is the best

539
00:28:07,840 --> 00:28:09,840
practice architecture

540
00:28:09,840 --> 00:28:12,480
security architecture for a.d in roughly

541
00:28:12,480 --> 00:28:14,399
20 years they changed it like five

542
00:28:14,399 --> 00:28:17,039
almost six times so back in the 90s in

543
00:28:17,039 --> 00:28:19,679
the nt4 good old days the message was

544
00:28:19,679 --> 00:28:22,320
the more domains the merrier they didn't

545
00:28:22,320 --> 00:28:24,159
convey this message because they thought

546
00:28:24,159 --> 00:28:26,399
it is good for you to distribute your

547
00:28:26,399 --> 00:28:28,080
domains just because they had a

548
00:28:28,080 --> 00:28:30,320
hardcoded limit in their sam database

549
00:28:30,320 --> 00:28:32,960
not many are aware it helps to work

550
00:28:32,960 --> 00:28:35,679
inside microsoft to see it in the code

551
00:28:35,679 --> 00:28:37,760
that there is a hard-coded limit of 40

552
00:28:37,760 --> 00:28:40,799
000 objects that this semi-account

553
00:28:40,799 --> 00:28:42,720
database security account management

554
00:28:42,720 --> 00:28:45,440
database could go to so the they didn't

555
00:28:45,440 --> 00:28:47,520
want customers to uh get the denial of

556
00:28:47,520 --> 00:28:49,760
service on creating new objects but then

557
00:28:49,760 --> 00:28:51,919
came nt5

558
00:28:51,919 --> 00:28:54,399
today is known as windows 2000 and that

559
00:28:54,399 --> 00:28:55,840
was the opportunity to consolidate

560
00:28:55,840 --> 00:28:57,520
domain so they pushed all the customers

561
00:28:57,520 --> 00:28:58,799
to get

562
00:28:58,799 --> 00:29:00,720
all the domains into a single domain so

563
00:29:00,720 --> 00:29:02,320
many geographical domains became

564
00:29:02,320 --> 00:29:04,480
headquarters just one domain but then

565
00:29:04,480 --> 00:29:05,840
they realized

566
00:29:05,840 --> 00:29:08,320
quite a lot uh due to folks like me and

567
00:29:08,320 --> 00:29:11,440
others that we said guys every uh inside

568
00:29:11,440 --> 00:29:13,760
the forest inside domain is not a

569
00:29:13,760 --> 00:29:15,440
security boundary it's an administrative

570
00:29:15,440 --> 00:29:16,880
boundary you maybe can manage your

571
00:29:16,880 --> 00:29:18,880
policies password policies but

572
00:29:18,880 --> 00:29:21,200
uh all domains in the same forest share

573
00:29:21,200 --> 00:29:23,200
transitive kerbal strusts that's how

574
00:29:23,200 --> 00:29:24,320
kerberos

575
00:29:24,320 --> 00:29:27,120
mit version 5 kerberos in linux mac etc

576
00:29:27,120 --> 00:29:29,679
works so now that microsoft adopted it

577
00:29:29,679 --> 00:29:31,679
it was not really sure how kerbers

578
00:29:31,679 --> 00:29:33,919
worked so in a way they implemented

579
00:29:33,919 --> 00:29:37,120
a mature authentication protocol

580
00:29:37,120 --> 00:29:38,880
with a lot of other vulnerabilities but

581
00:29:38,880 --> 00:29:41,200
still without understanding how it works

582
00:29:41,200 --> 00:29:43,279
and then trusts are bad as well seed

583
00:29:43,279 --> 00:29:45,760
filtering

584
00:29:45,760 --> 00:29:48,000
city history etc then came the red

585
00:29:48,000 --> 00:29:50,159
forest model which was very hard to

586
00:29:50,159 --> 00:29:52,080
implement as ver and very costly and it

587
00:29:52,080 --> 00:29:54,000
doesn't play a lot along with cloud

588
00:29:54,000 --> 00:29:56,399
these days admin tier models survived

589
00:29:56,399 --> 00:29:57,440
quite a lot

590
00:29:57,440 --> 00:29:58,960
quite some years and now they're

591
00:29:58,960 --> 00:30:01,440
speaking about privileged access so

592
00:30:01,440 --> 00:30:02,640
imagine

593
00:30:02,640 --> 00:30:04,640
customers having to change two every two

594
00:30:04,640 --> 00:30:07,440
three years their entire

595
00:30:07,440 --> 00:30:09,520
architecture of the of their directory

596
00:30:09,520 --> 00:30:11,360
services that's obviously not something

597
00:30:11,360 --> 00:30:13,200
that you can do and that's how we hack

598
00:30:13,200 --> 00:30:14,480
organizations

599
00:30:14,480 --> 00:30:16,799
we just use the bad architecture that

600
00:30:16,799 --> 00:30:19,840
they implemented like 10 or or 15 years

601
00:30:19,840 --> 00:30:21,520
ago and they didn't move from that

602
00:30:21,520 --> 00:30:24,080
that's how easy we go from dmz to

603
00:30:24,080 --> 00:30:26,399
internal network etc

604
00:30:26,399 --> 00:30:28,559
and of course to add on top of it we

605
00:30:28,559 --> 00:30:31,600
have the users users as the weak link in

606
00:30:31,600 --> 00:30:34,000
this chain you can give them amazing

607
00:30:34,000 --> 00:30:36,880
features you know no ntlm you don't get

608
00:30:36,880 --> 00:30:39,440
your password in elsa's

609
00:30:39,440 --> 00:30:41,520
just enough administration which is a

610
00:30:41,520 --> 00:30:44,320
constrained delegated sort of windows

611
00:30:44,320 --> 00:30:47,520
ssh built-in and they don't use it they

612
00:30:47,520 --> 00:30:50,640
prefer to use rdp they prefer to use

613
00:30:50,640 --> 00:30:52,320
to cache their tgts they'll take a

614
00:30:52,320 --> 00:30:54,320
grunting ticket everywhere

615
00:30:54,320 --> 00:30:55,200
and just

616
00:30:55,200 --> 00:30:57,840
go all the way so

617
00:30:57,840 --> 00:31:00,399
now handing over to forensics so how do

618
00:31:00,399 --> 00:31:02,880
you get your hints about understanding

619
00:31:02,880 --> 00:31:04,559
what happened in your domain

620
00:31:04,559 --> 00:31:06,640
when your domain was hit pretty bad and

621
00:31:06,640 --> 00:31:09,279
i saw it in dozens of uh incident

622
00:31:09,279 --> 00:31:11,200
response cases in the field

623
00:31:11,200 --> 00:31:13,840
and uh unlike goldilocks you know

624
00:31:13,840 --> 00:31:16,880
attackers don't leave you deliberately

625
00:31:16,880 --> 00:31:19,679
hints you know in in your bed and in the

626
00:31:19,679 --> 00:31:22,480
soup they drank or the chairs uh you

627
00:31:22,480 --> 00:31:24,960
just have to grab those by yourself

628
00:31:24,960 --> 00:31:27,279
so in active directory forensics uh we

629
00:31:27,279 --> 00:31:29,519
realized that we're facing a centralized

630
00:31:29,519 --> 00:31:31,039
identity management authentication

631
00:31:31,039 --> 00:31:32,799
authorization system

632
00:31:32,799 --> 00:31:34,559
which by design has a set of

633
00:31:34,559 --> 00:31:36,480
misconfigurations excessive permissions

634
00:31:36,480 --> 00:31:38,480
that we have to deal with but we still

635
00:31:38,480 --> 00:31:40,080
want to build a timeline who did what

636
00:31:40,080 --> 00:31:41,360
and when

637
00:31:41,360 --> 00:31:43,120
and understand the entire reconnaissance

638
00:31:43,120 --> 00:31:44,840
credential theft group membership

639
00:31:44,840 --> 00:31:47,919
changes and the sources of truth really

640
00:31:47,919 --> 00:31:50,399
boil down to like three areas one is a

641
00:31:50,399 --> 00:31:53,440
bunch of files sysvol is one of the

642
00:31:53,440 --> 00:31:54,480
more

643
00:31:54,480 --> 00:31:58,159
known one holding not only the go policy

644
00:31:58,159 --> 00:32:00,080
settings but also other files logon

645
00:32:00,080 --> 00:32:03,120
scripts etc the etw event tracing for

646
00:32:03,120 --> 00:32:05,200
windows essentially the event logs of

647
00:32:05,200 --> 00:32:07,039
the windows operating systems and and

648
00:32:07,039 --> 00:32:08,559
there's a bunch of them

649
00:32:08,559 --> 00:32:10,000
and pure

650
00:32:10,000 --> 00:32:12,559
packet packet capturing right so if you

651
00:32:12,559 --> 00:32:14,799
would prepare in advance and you would

652
00:32:14,799 --> 00:32:17,039
run sort of pick up on your domain

653
00:32:17,039 --> 00:32:19,039
controllers you can either respond in

654
00:32:19,039 --> 00:32:22,080
real time to some specific patterns in

655
00:32:22,080 --> 00:32:24,240
in your pickup or you can

656
00:32:24,240 --> 00:32:26,880
in retrospect pick up the pieces pick up

657
00:32:26,880 --> 00:32:28,720
the pickup and you can

658
00:32:28,720 --> 00:32:30,320
get those pieces

659
00:32:30,320 --> 00:32:32,960
but there are two files that uh

660
00:32:32,960 --> 00:32:35,120
i encourage you to look more deep into

661
00:32:35,120 --> 00:32:37,440
and those are the ntds dit essentially

662
00:32:37,440 --> 00:32:39,840
the nt new technology director services

663
00:32:39,840 --> 00:32:41,279
director information tree that's the

664
00:32:41,279 --> 00:32:42,399
database

665
00:32:42,399 --> 00:32:45,440
file of active directory and a property

666
00:32:45,440 --> 00:32:47,760
that exists on each and every object in

667
00:32:47,760 --> 00:32:49,200
the domain which is apple property

668
00:32:49,200 --> 00:32:50,720
metadata

669
00:32:50,720 --> 00:32:53,039
and we're going to speak about those two

670
00:32:53,039 --> 00:32:56,640
so ntds did is it is the id database uh

671
00:32:56,640 --> 00:32:58,720
based on a jetblue database extensible

672
00:32:58,720 --> 00:33:00,880
storage engine just like wins exchange

673
00:33:00,880 --> 00:33:03,519
and some other applications uh it comes

674
00:33:03,519 --> 00:33:05,919
with a bunch of other files log files

675
00:33:05,919 --> 00:33:08,320
checkpoint file etc

676
00:33:08,320 --> 00:33:10,720
and it is managed by a bunch of tools

677
00:33:10,720 --> 00:33:13,600
the most notably one is ntds util a

678
00:33:13,600 --> 00:33:15,919
command line interface tool that uh

679
00:33:15,919 --> 00:33:18,240
essentially can get snapshots uh from

680
00:33:18,240 --> 00:33:20,640
the database repair it do uh

681
00:33:20,640 --> 00:33:24,559
defragmentation etc so the database file

682
00:33:24,559 --> 00:33:27,200
uh unlike it's not a relational database

683
00:33:27,200 --> 00:33:28,320
right it's

684
00:33:28,320 --> 00:33:30,000
essentially a flat file it works with

685
00:33:30,000 --> 00:33:33,519
pages internally uh and these entries

686
00:33:33,519 --> 00:33:35,200
that you have there you can actually

687
00:33:35,200 --> 00:33:36,640
access them and see them through a bunch

688
00:33:36,640 --> 00:33:38,559
of apis

689
00:33:38,559 --> 00:33:40,080
if you want to begin to code to that

690
00:33:40,080 --> 00:33:42,159
show i encourage you to begin with esc

691
00:33:42,159 --> 00:33:46,000
nt dll or if you're already into

692
00:33:46,000 --> 00:33:47,600
some known frameworks so you have ds

693
00:33:47,600 --> 00:33:50,320
internals which is essentially c-sharp

694
00:33:50,320 --> 00:33:51,919
wrap that you can also utilize through

695
00:33:51,919 --> 00:33:54,960
powershell and stuff like that

696
00:33:54,960 --> 00:33:57,840
but it all boils down to the ntdsa the

697
00:33:57,840 --> 00:34:00,480
directory service agent which exposes

698
00:34:00,480 --> 00:34:03,200
the database through several apis

699
00:34:03,200 --> 00:34:04,640
that you can query

700
00:34:04,640 --> 00:34:05,840
the thing you have to really pay

701
00:34:05,840 --> 00:34:08,399
attention to is the database state that

702
00:34:08,399 --> 00:34:10,719
you the database file that you picked up

703
00:34:10,719 --> 00:34:12,879
because you will see here for example i

704
00:34:12,879 --> 00:34:14,560
have two different databases from two

705
00:34:14,560 --> 00:34:17,040
different organizations different

706
00:34:17,040 --> 00:34:18,320
everything

707
00:34:18,320 --> 00:34:19,918
and the first thing would be to run

708
00:34:19,918 --> 00:34:23,520
escnt utils let's slash mh on the dit

709
00:34:23,520 --> 00:34:27,280
file and and just uh get a dump and some

710
00:34:27,280 --> 00:34:29,839
statistics on on the header the checksum

711
00:34:29,839 --> 00:34:32,320
and the state of the database was it

712
00:34:32,320 --> 00:34:35,199
shut down clearly in a clean state or a

713
00:34:35,199 --> 00:34:37,520
dirty shutdown because if you will have

714
00:34:37,520 --> 00:34:38,480
a

715
00:34:38,480 --> 00:34:40,800
non-clean shutdown on the database it

716
00:34:40,800 --> 00:34:43,119
will be very hard to perform

717
00:34:43,119 --> 00:34:46,480
many actions you have to recover pages

718
00:34:46,480 --> 00:34:48,719
with a hex editor and that's not fun but

719
00:34:48,719 --> 00:34:50,399
here you can see i have a very

720
00:34:50,399 --> 00:34:52,239
consistent uh

721
00:34:52,239 --> 00:34:55,119
database file this this file is obtained

722
00:34:55,119 --> 00:34:57,839
by backups by uh

723
00:34:57,839 --> 00:35:00,480
taking a snapshot in a tds util etc but

724
00:35:00,480 --> 00:35:03,119
let's say you took a snapshot of the

725
00:35:03,119 --> 00:35:05,599
database using for example volume shadow

726
00:35:05,599 --> 00:35:08,640
copies vs admin etc many times if you

727
00:35:08,640 --> 00:35:10,800
took this type of snapshot which would

728
00:35:10,800 --> 00:35:11,760
happen

729
00:35:11,760 --> 00:35:13,760
during an incident response so the

730
00:35:13,760 --> 00:35:15,119
database you will get will look

731
00:35:15,119 --> 00:35:16,640
something like this it will be in a

732
00:35:16,640 --> 00:35:18,960
dirty shutdown state and you can see

733
00:35:18,960 --> 00:35:19,760
that

734
00:35:19,760 --> 00:35:21,599
the logs were not fully committed the

735
00:35:21,599 --> 00:35:24,079
last consistent log is is like five

736
00:35:24,079 --> 00:35:25,599
pages difference

737
00:35:25,599 --> 00:35:27,760
five transactions different and what

738
00:35:27,760 --> 00:35:29,839
does this mean the way that active

739
00:35:29,839 --> 00:35:31,839
directory database works is that changes

740
00:35:31,839 --> 00:35:34,160
are written to memory into your domain

741
00:35:34,160 --> 00:35:35,520
controller ram

742
00:35:35,520 --> 00:35:36,640
and then

743
00:35:36,640 --> 00:35:39,040
they are written to the disk cache if

744
00:35:39,040 --> 00:35:41,520
there is a disk cache in some

745
00:35:41,520 --> 00:35:44,160
disk not ssd and then it's written to a

746
00:35:44,160 --> 00:35:47,200
log file and then the log file when it

747
00:35:47,200 --> 00:35:49,440
fills it's ready writes it to the entity

748
00:35:49,440 --> 00:35:52,320
as did and then the file is consistent

749
00:35:52,320 --> 00:35:54,560
so while this can happen in a matter of

750
00:35:54,560 --> 00:35:55,839
milliseconds

751
00:35:55,839 --> 00:35:59,040
still this can create you a

752
00:35:59,040 --> 00:36:01,119
a dirty shutdown

753
00:36:01,119 --> 00:36:03,119
and a dsd file

754
00:36:03,119 --> 00:36:05,520
and speaking about replica property

755
00:36:05,520 --> 00:36:07,599
metadata so this attribute essentially

756
00:36:07,599 --> 00:36:09,599
as you can see just a hex

757
00:36:09,599 --> 00:36:12,079
decimal it's just a bunch of bytes on on

758
00:36:12,079 --> 00:36:14,240
an attribute on each and every object in

759
00:36:14,240 --> 00:36:15,599
active directory

760
00:36:15,599 --> 00:36:18,720
but it is also represented logically in

761
00:36:18,720 --> 00:36:20,160
two different properties msds

762
00:36:20,160 --> 00:36:22,320
replication attribute metadata nmds

763
00:36:22,320 --> 00:36:24,839
replication value

764
00:36:24,839 --> 00:36:28,000
metadata as a multi-valued attribute for

765
00:36:28,000 --> 00:36:29,440
multi-valued

766
00:36:29,440 --> 00:36:31,440
objects for example group membership is

767
00:36:31,440 --> 00:36:33,440
a multi-valued attribute and how do i

768
00:36:33,440 --> 00:36:36,320
see where in the bit is this msds apple

769
00:36:36,320 --> 00:36:39,520
whatever so you can see that

770
00:36:39,520 --> 00:36:41,200
in this case you don't find this

771
00:36:41,200 --> 00:36:43,200
attribute it's like yours is making it

772
00:36:43,200 --> 00:36:45,760
up you know it's you also won't find it

773
00:36:45,760 --> 00:36:48,320
in msdn either

774
00:36:48,320 --> 00:36:50,720
but if i look essentially if i pick up

775
00:36:50,720 --> 00:36:52,839
the specific property repo property

776
00:36:52,839 --> 00:36:56,320
metadata so you see i get back

777
00:36:56,320 --> 00:36:58,160
a bunch of bytes right

778
00:36:58,160 --> 00:37:00,240
so something is really there it's just

779
00:37:00,240 --> 00:37:01,040
not

780
00:37:01,040 --> 00:37:02,640
by default it's not

781
00:37:02,640 --> 00:37:03,599
showing

782
00:37:03,599 --> 00:37:05,440
uh on the

783
00:37:05,440 --> 00:37:07,359
on the object it's not exposed on the

784
00:37:07,359 --> 00:37:08,560
properties

785
00:37:08,560 --> 00:37:10,560
by the object that is getting returned

786
00:37:10,560 --> 00:37:12,880
but i uh promise you that if you

787
00:37:12,880 --> 00:37:15,040
specifically ask for this attribute

788
00:37:15,040 --> 00:37:17,200
without knowing that it exists

789
00:37:17,200 --> 00:37:19,920
voila we get back an xml and keep in

790
00:37:19,920 --> 00:37:21,440
mind that when active directory was

791
00:37:21,440 --> 00:37:23,839
conceived json did not exist so don't

792
00:37:23,839 --> 00:37:26,720
cry because you have to pass xml but

793
00:37:26,720 --> 00:37:28,480
wouldn't it be nice that nobody would

794
00:37:28,480 --> 00:37:29,440
have to

795
00:37:29,440 --> 00:37:32,240
convert bytes or pass xml wouldn't it be

796
00:37:32,240 --> 00:37:34,400
nice if you had a command line that just

797
00:37:34,400 --> 00:37:36,720
passes it all to a grid and you can

798
00:37:36,720 --> 00:37:38,480
filter that grid and see all the changes

799
00:37:38,480 --> 00:37:40,240
that happened in your domain

800
00:37:40,240 --> 00:37:41,040
well

801
00:37:41,040 --> 00:37:43,440
that's exactly what i did so in this

802
00:37:43,440 --> 00:37:44,640
scenario we're going to search for

803
00:37:44,640 --> 00:37:46,400
strings in id objects just do a quick

804
00:37:46,400 --> 00:37:49,280
scenario find some renamed accounts that

805
00:37:49,280 --> 00:37:51,520
allows us to understand that some user

806
00:37:51,520 --> 00:37:53,200
has been renamed since the malicious

807
00:37:53,200 --> 00:37:55,920
access actions happened with that user

808
00:37:55,920 --> 00:37:58,079
only to discover all logs were wiped we

809
00:37:58,079 --> 00:38:00,640
don't have any logs to work with and

810
00:38:00,640 --> 00:38:03,839
then ad replication metadata will come

811
00:38:03,839 --> 00:38:05,760
to the rescue

812
00:38:05,760 --> 00:38:07,760
so first things first we got some

813
00:38:07,760 --> 00:38:10,800
evidence that a user named annette did

814
00:38:10,800 --> 00:38:12,640
some malicious stuff so we want to get

815
00:38:12,640 --> 00:38:14,800
the user and oops we don't even find

816
00:38:14,800 --> 00:38:16,640
this user under the domain we're working

817
00:38:16,640 --> 00:38:17,359
at

818
00:38:17,359 --> 00:38:19,920
interesting maybe it got deleted so

819
00:38:19,920 --> 00:38:22,079
uh keep in mind that in order to have a

820
00:38:22,079 --> 00:38:24,000
recycle bin sort of feature in active

821
00:38:24,000 --> 00:38:25,520
directory you have to enable it it's an

822
00:38:25,520 --> 00:38:27,599
optional feature and not enabled by

823
00:38:27,599 --> 00:38:30,000
default that if you want to

824
00:38:30,000 --> 00:38:32,560
reanimate or recover

825
00:38:32,560 --> 00:38:34,320
objects

826
00:38:34,320 --> 00:38:35,839
so that's something you have to do it in

827
00:38:35,839 --> 00:38:38,160
advance so that's a prior to the

828
00:38:38,160 --> 00:38:39,520
incident

829
00:38:39,520 --> 00:38:40,240
but

830
00:38:40,240 --> 00:38:42,720
one of the scripts here is a script that

831
00:38:42,720 --> 00:38:45,040
finds strings in ad objects it just goes

832
00:38:45,040 --> 00:38:47,119
recursively on all the properties of all

833
00:38:47,119 --> 00:38:49,920
the objects in the entire id structure

834
00:38:49,920 --> 00:38:52,320
and it just finds some matches in this

835
00:38:52,320 --> 00:38:54,400
case i looked for some beverly hills

836
00:38:54,400 --> 00:38:56,000
address but i found

837
00:38:56,000 --> 00:38:58,880
just this time format

838
00:38:58,880 --> 00:39:01,680
file time format of uh

839
00:39:01,680 --> 00:39:03,680
on some attributes of password last

840
00:39:03,680 --> 00:39:06,160
change attributes and if i look for a

841
00:39:06,160 --> 00:39:08,720
certain string uh for example password i

842
00:39:08,720 --> 00:39:10,720
found a bunch of stuff all the password

843
00:39:10,720 --> 00:39:14,079
application isn't interesting really

844
00:39:14,079 --> 00:39:16,320
but at the end maybe you could see there

845
00:39:16,320 --> 00:39:17,839
it we had uh

846
00:39:17,839 --> 00:39:19,839
uh

847
00:39:19,839 --> 00:39:21,440
and evidence that the password reset

848
00:39:21,440 --> 00:39:22,400
happened

849
00:39:22,400 --> 00:39:25,040
by uh this user annette you know at some

850
00:39:25,040 --> 00:39:27,680
point in june 2021 so a user named

851
00:39:27,680 --> 00:39:29,599
annette did exist in our environment so

852
00:39:29,599 --> 00:39:32,560
we know that so maybe it's it's time to

853
00:39:32,560 --> 00:39:35,839
uh look for uh possibly this account got

854
00:39:35,839 --> 00:39:40,078
renamed at some point if it didn't get

855
00:39:40,320 --> 00:39:43,040
deleted and it is still there so we will

856
00:39:43,040 --> 00:39:43,839
uh

857
00:39:43,839 --> 00:39:46,240
find it by looking for renamed accounts

858
00:39:46,240 --> 00:39:47,520
so that's the next command we're going

859
00:39:47,520 --> 00:39:49,599
to run we're going to look for whatever

860
00:39:49,599 --> 00:39:52,320
is remained from our logs and maybe we

861
00:39:52,320 --> 00:39:54,720
still have the set for a renamed account

862
00:39:54,720 --> 00:39:58,880
so we see two renamed actions event 4781

863
00:39:58,880 --> 00:40:00,800
one is not relevant to our case and the

864
00:40:00,800 --> 00:40:03,200
other is very relevant we see that

865
00:40:03,200 --> 00:40:05,359
it was renamed by some administrative

866
00:40:05,359 --> 00:40:07,839
account from annette to jnd and this

867
00:40:07,839 --> 00:40:09,520
jane doe is essentially the user that

868
00:40:09,520 --> 00:40:12,240
did the actions only it's uh

869
00:40:12,240 --> 00:40:14,720
now under a different name

870
00:40:14,720 --> 00:40:17,040
right so we have this uh

871
00:40:17,040 --> 00:40:19,359
this event

872
00:40:19,359 --> 00:40:21,119
i'll just

873
00:40:21,119 --> 00:40:25,280
go a bit more into this here okay so the

874
00:40:25,280 --> 00:40:26,319
next uh

875
00:40:26,319 --> 00:40:28,160
tool we want to run is essentially

876
00:40:28,160 --> 00:40:29,839
looking into the replication metadata

877
00:40:29,839 --> 00:40:32,319
history and popping it up to a grid and

878
00:40:32,319 --> 00:40:35,040
this quick script you can

879
00:40:35,040 --> 00:40:36,319
just

880
00:40:36,319 --> 00:40:38,480
give it a bunch of accounts computers or

881
00:40:38,480 --> 00:40:40,319
users and it will give you all the

882
00:40:40,319 --> 00:40:42,800
changes that happened since they were

883
00:40:42,800 --> 00:40:44,560
the beginning of your active directory

884
00:40:44,560 --> 00:40:45,920
and you don't need any logs for that

885
00:40:45,920 --> 00:40:47,520
just the database file you can also do

886
00:40:47,520 --> 00:40:49,440
it offline descript supports offline and

887
00:40:49,440 --> 00:40:51,920
offline online modes you can see it was

888
00:40:51,920 --> 00:40:55,359
created in 2016 this user jnd

889
00:40:55,359 --> 00:40:57,359
you can see when it got renamed you can

890
00:40:57,359 --> 00:40:59,520
see the

891
00:40:59,520 --> 00:41:03,200
that at some point in 2020

892
00:41:03,200 --> 00:41:05,520
it became an administrative a privileged

893
00:41:05,520 --> 00:41:07,599
account because it got the admin count

894
00:41:07,599 --> 00:41:10,000
bit flipped to one

895
00:41:10,000 --> 00:41:11,280
essentially this happens when you are

896
00:41:11,280 --> 00:41:14,079
added to one of the known privileged

897
00:41:14,079 --> 00:41:14,960
groups

898
00:41:14,960 --> 00:41:16,319
backup operators several operators

899
00:41:16,319 --> 00:41:18,640
account operators enterprise admins etc

900
00:41:18,640 --> 00:41:20,319
and another thing interesting that

901
00:41:20,319 --> 00:41:22,640
happened last change was it got the seed

902
00:41:22,640 --> 00:41:24,640
history populated with a

903
00:41:24,640 --> 00:41:27,359
relative id of 500 meaning that

904
00:41:27,359 --> 00:41:30,400
it has a seed history populated with

905
00:41:30,400 --> 00:41:32,480
an administrator account from a

906
00:41:32,480 --> 00:41:34,240
different domain this is really not

907
00:41:34,240 --> 00:41:36,079
usual that's something that you should

908
00:41:36,079 --> 00:41:38,079
really pay attention uh when you see

909
00:41:38,079 --> 00:41:41,040
that in your 80 forensics so the next

910
00:41:41,040 --> 00:41:44,079
script we're gonna uh launch is get id

911
00:41:44,079 --> 00:41:45,359
group changes

912
00:41:45,359 --> 00:41:47,440
and what this does is allows us to look

913
00:41:47,440 --> 00:41:49,760
for group changes in any scope a sense

914
00:41:49,760 --> 00:41:52,880
the dawn of your domain controllers

915
00:41:52,880 --> 00:41:55,599
again either online or offline now i'm

916
00:41:55,599 --> 00:41:57,280
using it online

917
00:41:57,280 --> 00:41:58,880
versus a direct the domain controller

918
00:41:58,880 --> 00:42:00,720
that is still on

919
00:42:00,720 --> 00:42:02,640
and you can see here the

920
00:42:02,640 --> 00:42:05,599
the actual change date and the group

921
00:42:05,599 --> 00:42:07,359
that uh belonged to

922
00:42:07,359 --> 00:42:09,040
when it was uh

923
00:42:09,040 --> 00:42:10,880
the last change was it was removed from

924
00:42:10,880 --> 00:42:12,400
backup operators

925
00:42:12,400 --> 00:42:14,640
uh at this time so this is the time

926
00:42:14,640 --> 00:42:17,280
added and removed so you can see for two

927
00:42:17,280 --> 00:42:18,800
minutes

928
00:42:18,800 --> 00:42:21,119
right for two minutes this account was a

929
00:42:21,119 --> 00:42:22,720
member of backup operators and then

930
00:42:22,720 --> 00:42:24,640
removed backup operators essentially is

931
00:42:24,640 --> 00:42:26,480
local administrator on domain

932
00:42:26,480 --> 00:42:29,359
controllers this means it can do

933
00:42:29,359 --> 00:42:30,960
a lot uh

934
00:42:30,960 --> 00:42:33,680
quite quite uh get you to domain game

935
00:42:33,680 --> 00:42:34,720
over

936
00:42:34,720 --> 00:42:35,680
uh

937
00:42:35,680 --> 00:42:37,760
we can also pop up changes for specific

938
00:42:37,760 --> 00:42:39,200
groups obviously

939
00:42:39,200 --> 00:42:41,040
these are all the group membership

940
00:42:41,040 --> 00:42:42,880
changes since the dawn of the domain to

941
00:42:42,880 --> 00:42:45,119
the domain admins group and again i

942
00:42:45,119 --> 00:42:48,079
don't need logs even if now i come to a

943
00:42:48,079 --> 00:42:51,280
domain of a customer that

944
00:42:51,280 --> 00:42:52,800
is running active directory for more

945
00:42:52,800 --> 00:42:55,200
than 20 years and he has no sim he

946
00:42:55,200 --> 00:42:57,440
didn't do any syslog forwarding

947
00:42:57,440 --> 00:42:59,520
i can still get this data from parsing

948
00:42:59,520 --> 00:43:00,640
the raw

949
00:43:00,640 --> 00:43:02,880
database file because it is kept in the

950
00:43:02,880 --> 00:43:05,119
replication metadata

951
00:43:05,119 --> 00:43:07,359
inside this flat file

952
00:43:07,359 --> 00:43:08,960
i just have to know to parse it and so

953
00:43:08,960 --> 00:43:10,880
you see here the changes

954
00:43:10,880 --> 00:43:13,440
for this user and

955
00:43:13,440 --> 00:43:15,440
lastly the thing i want to show you is

956
00:43:15,440 --> 00:43:17,440
that this also works

957
00:43:17,440 --> 00:43:19,760
uh in an offline environment so up till

958
00:43:19,760 --> 00:43:22,240
now everything is showing you here was

959
00:43:22,240 --> 00:43:23,920
on a live domain controller you can see

960
00:43:23,920 --> 00:43:26,240
my ad service interface is responding to

961
00:43:26,240 --> 00:43:28,480
a live domain controller but now i'm

962
00:43:28,480 --> 00:43:31,599
flipping over to a workstation

963
00:43:31,599 --> 00:43:33,280
that is not connected to a domain

964
00:43:33,280 --> 00:43:34,880
obviously

965
00:43:34,880 --> 00:43:37,520
and but also here i can run this command

966
00:43:37,520 --> 00:43:39,440
get ad group changes but this time i'm

967
00:43:39,440 --> 00:43:40,720
going to use an

968
00:43:40,720 --> 00:43:43,119
offline backup essentially a snapshot

969
00:43:43,119 --> 00:43:45,440
taken with ntdsutil

970
00:43:45,440 --> 00:43:47,440
of the active directory database

971
00:43:47,440 --> 00:43:50,240
note that you don't need any other file

972
00:43:50,240 --> 00:43:52,000
except maybe the log files if you're in

973
00:43:52,000 --> 00:43:54,079
a dirty shutdown state but you don't

974
00:43:54,079 --> 00:43:56,000
need the system hive the for this you

975
00:43:56,000 --> 00:43:58,319
the registry system have a key you only

976
00:43:58,319 --> 00:44:00,640
need if you want to grab ntlm hashes

977
00:44:00,640 --> 00:44:02,800
passwords from that file

978
00:44:02,800 --> 00:44:05,280
so you need the decryption key

979
00:44:05,280 --> 00:44:07,520
but then let's run it now offline

980
00:44:07,520 --> 00:44:08,480
so we're going to use an offline

981
00:44:08,480 --> 00:44:10,720
database backup

982
00:44:10,720 --> 00:44:12,000
and

983
00:44:12,000 --> 00:44:15,520
just point it into the ntds database dit

984
00:44:15,520 --> 00:44:17,040
file right

985
00:44:17,040 --> 00:44:19,839
and we're going to ask for the user adam

986
00:44:19,839 --> 00:44:22,319
what this will do essentially it will

987
00:44:22,319 --> 00:44:26,400
load up it will it is an ldap server

988
00:44:26,400 --> 00:44:28,400
as to say it will load up the database

989
00:44:28,400 --> 00:44:31,040
in memory through some random available

990
00:44:31,040 --> 00:44:33,599
high port and now this instance is

991
00:44:33,599 --> 00:44:37,520
loaded uh on your normal machine or your

992
00:44:37,520 --> 00:44:38,560
endpoint

993
00:44:38,560 --> 00:44:41,359
and you you can get the information all

994
00:44:41,359 --> 00:44:42,720
the changes

995
00:44:42,720 --> 00:44:45,359
uh also the replication metadata all the

996
00:44:45,359 --> 00:44:46,880
changes in this case i'm showing you the

997
00:44:46,880 --> 00:44:48,480
group membership changes those are two

998
00:44:48,480 --> 00:44:49,920
different scripts that work with the

999
00:44:49,920 --> 00:44:52,240
same mechanism of

1000
00:44:52,240 --> 00:44:55,119
locally loading an ldap server exposing

1001
00:44:55,119 --> 00:44:58,400
you the entire dit file in memory and

1002
00:44:58,400 --> 00:45:00,319
obviously you can also use one of the

1003
00:45:00,319 --> 00:45:02,319
fun options is

1004
00:45:02,319 --> 00:45:05,520
you know just generate a full uh

1005
00:45:05,520 --> 00:45:08,960
report of all groups uh to a csv file or

1006
00:45:08,960 --> 00:45:10,160
to a grid

1007
00:45:10,160 --> 00:45:12,079
and this will just dump all the changes

1008
00:45:12,079 --> 00:45:14,400
that happened in your domain uh since it

1009
00:45:14,400 --> 00:45:17,520
was installed uh into a nice grid that

1010
00:45:17,520 --> 00:45:19,520
you can search into

1011
00:45:19,520 --> 00:45:20,960
um

1012
00:45:20,960 --> 00:45:22,240
and and of course show you when the

1013
00:45:22,240 --> 00:45:23,520
change was made and if it's an

1014
00:45:23,520 --> 00:45:25,839
administrative user it also gets this

1015
00:45:25,839 --> 00:45:28,480
bit of information from the database etc

1016
00:45:28,480 --> 00:45:30,000
and here you can filter by anything you

1017
00:45:30,000 --> 00:45:33,000
want

1018
00:45:34,000 --> 00:45:35,839
that was a forensic one

1019
00:45:35,839 --> 00:45:37,760
so now

1020
00:45:37,760 --> 00:45:40,480
uh you know us hackers red emails we

1021
00:45:40,480 --> 00:45:42,319
keep on searching for this

1022
00:45:42,319 --> 00:45:44,240
ticket of gold i don't know

1023
00:45:44,240 --> 00:45:46,480
whether you are a neil young fan or not

1024
00:45:46,480 --> 00:45:47,680
uh the curb

1025
00:45:47,680 --> 00:45:49,119
tgt hash

1026
00:45:49,119 --> 00:45:50,400
is uh

1027
00:45:50,400 --> 00:45:52,480
something that we are looking for quite

1028
00:45:52,480 --> 00:45:54,720
extensively and obviously even if you

1029
00:45:54,720 --> 00:45:56,400
you don't know uh much about active

1030
00:45:56,400 --> 00:45:58,960
director you probably heard about golden

1031
00:45:58,960 --> 00:46:01,440
ticket attacks golden ticket essentially

1032
00:46:01,440 --> 00:46:03,359
means game over

1033
00:46:03,359 --> 00:46:06,640
for the organization it is uh

1034
00:46:06,640 --> 00:46:08,960
relying on obtaining that the attacker

1035
00:46:08,960 --> 00:46:11,920
obtains the curb tgt essentially the

1036
00:46:11,920 --> 00:46:13,520
master password the

1037
00:46:13,520 --> 00:46:15,839
main symmetric key responsible of

1038
00:46:15,839 --> 00:46:17,839
integrity of all ticket operations

1039
00:46:17,839 --> 00:46:20,000
authentication and authorization in

1040
00:46:20,000 --> 00:46:21,920
active directory

1041
00:46:21,920 --> 00:46:23,920
and compromising this hash whether in

1042
00:46:23,920 --> 00:46:27,119
ntlmrc4 or aes formats means game over

1043
00:46:27,119 --> 00:46:29,839
because you can do offline uh

1044
00:46:29,839 --> 00:46:32,560
authentication tokens forging offline

1045
00:46:32,560 --> 00:46:36,160
tgt forging and then you effectively get

1046
00:46:36,160 --> 00:46:37,280
privileged

1047
00:46:37,280 --> 00:46:40,720
access persistence uh so this kerptgt

1048
00:46:40,720 --> 00:46:43,760
hash can be obtained in several ways

1049
00:46:43,760 --> 00:46:45,520
obviously not trivial ones but to a

1050
00:46:45,520 --> 00:46:47,359
seasoned attacker

1051
00:46:47,359 --> 00:46:49,520
they are quite trivial you can get it

1052
00:46:49,520 --> 00:46:51,680
through any unauthorized active

1053
00:46:51,680 --> 00:46:54,079
directory application interface dc sync

1054
00:46:54,079 --> 00:46:56,160
and dc shadow are the known ones not the

1055
00:46:56,160 --> 00:46:57,520
only ones

1056
00:46:57,520 --> 00:46:59,680
but this really relies on a specific

1057
00:46:59,680 --> 00:47:02,560
delicate object access permission type

1058
00:47:02,560 --> 00:47:04,319
called replicate changes replicate

1059
00:47:04,319 --> 00:47:05,440
chains as well

1060
00:47:05,440 --> 00:47:07,359
the other one is obtaining a copy of

1061
00:47:07,359 --> 00:47:09,359
your ad database the customer id

1062
00:47:09,359 --> 00:47:11,520
database or a backup

1063
00:47:11,520 --> 00:47:13,359
you would be surprised in how many

1064
00:47:13,359 --> 00:47:16,240
engagements we got a copy of that file

1065
00:47:16,240 --> 00:47:17,920
from a hidden

1066
00:47:17,920 --> 00:47:20,400
dollar share of some backup old backup

1067
00:47:20,400 --> 00:47:21,580
files

1068
00:47:21,580 --> 00:47:22,960
[Music]

1069
00:47:22,960 --> 00:47:25,839
that it thought nobody will see but

1070
00:47:25,839 --> 00:47:29,119
obviously you can easily enumerate smb

1071
00:47:29,119 --> 00:47:31,440
shares in microsoft environment in read

1072
00:47:31,440 --> 00:47:34,079
only access so everyone read aloud to

1073
00:47:34,079 --> 00:47:35,359
read permission

1074
00:47:35,359 --> 00:47:37,040
and but you can also

1075
00:47:37,040 --> 00:47:39,680
it is already a game over

1076
00:47:39,680 --> 00:47:41,119
move but

1077
00:47:41,119 --> 00:47:42,880
the third option is to steal it directly

1078
00:47:42,880 --> 00:47:44,559
from the domain controller memory so

1079
00:47:44,559 --> 00:47:47,040
obviously if you're on the dc

1080
00:47:47,040 --> 00:47:48,480
any read write domain controller will

1081
00:47:48,480 --> 00:47:50,880
give you the curb tgt hash read only

1082
00:47:50,880 --> 00:47:53,440
domain controllers uh unfortunately for

1083
00:47:53,440 --> 00:47:55,200
an attacker and fortunately for blue

1084
00:47:55,200 --> 00:47:57,599
teamers uh they don't hold the same

1085
00:47:57,599 --> 00:47:59,280
curve tgt value they have different kept

1086
00:47:59,280 --> 00:48:01,520
dgt users with different hashes and the

1087
00:48:01,520 --> 00:48:03,760
attack can really be utilized uh and

1088
00:48:03,760 --> 00:48:07,040
exercised with a set of

1089
00:48:07,040 --> 00:48:09,599
parameters and tools most notoriously

1090
00:48:09,599 --> 00:48:12,079
known is of obviously mimi cats with

1091
00:48:12,079 --> 00:48:14,240
you can do it with a bunch of

1092
00:48:14,240 --> 00:48:16,160
different hashes you can also create it

1093
00:48:16,160 --> 00:48:18,720
to walk like a duck look like a duck etc

1094
00:48:18,720 --> 00:48:21,680
so today i'm announcing uh a tool uh

1095
00:48:21,680 --> 00:48:23,839
called going goldfinger which is

1096
00:48:23,839 --> 00:48:26,240
essentially a script uh

1097
00:48:26,240 --> 00:48:28,079
it's it's a partial script

1098
00:48:28,079 --> 00:48:29,839
uh which is powershell is probably the

1099
00:48:29,839 --> 00:48:31,359
best thing that happened to microsoft i

1100
00:48:31,359 --> 00:48:33,440
was beginning to give up on that company

1101
00:48:33,440 --> 00:48:35,520
and then they came up with powershell

1102
00:48:35,520 --> 00:48:36,800
which is a

1103
00:48:36,800 --> 00:48:38,880
you know the closest you can get to

1104
00:48:38,880 --> 00:48:41,119
feeling like you're in a normal cli

1105
00:48:41,119 --> 00:48:43,040
environment

1106
00:48:43,040 --> 00:48:44,800
it works with it's like for me partial

1107
00:48:44,800 --> 00:48:47,520
it's like if python pearl uh

1108
00:48:47,520 --> 00:48:49,839
shell scripts bash and all went into

1109
00:48:49,839 --> 00:48:52,880
a.net went to a motel room whatever

1110
00:48:52,880 --> 00:48:55,440
happened this blue shell came up running

1111
00:48:55,440 --> 00:48:57,200
the other day that's that's what

1112
00:48:57,200 --> 00:48:58,079
happened

1113
00:48:58,079 --> 00:48:59,119
so

1114
00:48:59,119 --> 00:49:01,359
it has uh everything you would expect

1115
00:49:01,359 --> 00:49:04,800
all the grabs and awks of of uh

1116
00:49:04,800 --> 00:49:07,359
that you can uh pipe in and out and it's

1117
00:49:07,359 --> 00:49:09,680
also based on objects so it's the power

1118
00:49:09,680 --> 00:49:13,119
of objects and the easiness of bash like

1119
00:49:13,119 --> 00:49:17,040
uh commands lsps everything goes so uh

1120
00:49:17,040 --> 00:49:18,800
it's a powershell script uh

1121
00:49:18,800 --> 00:49:20,880
unfortunately i wasn't able to finalize

1122
00:49:20,880 --> 00:49:23,280
it for security fest but it should be

1123
00:49:23,280 --> 00:49:25,839
ready i have a bunch of other

1124
00:49:25,839 --> 00:49:27,040
last minute

1125
00:49:27,040 --> 00:49:29,200
checks to fix

1126
00:49:29,200 --> 00:49:31,440
but it will detect past the hash and

1127
00:49:31,440 --> 00:49:34,000
golden ticket in real time no agent no

1128
00:49:34,000 --> 00:49:36,880
dependencies no modules

1129
00:49:36,880 --> 00:49:38,800
it works with either winram a partial

1130
00:49:38,800 --> 00:49:40,160
remoting

1131
00:49:40,160 --> 00:49:42,720
essentially web services management or

1132
00:49:42,720 --> 00:49:43,760
smb

1133
00:49:43,760 --> 00:49:45,680
utilizing the non-commercial pa exec

1134
00:49:45,680 --> 00:49:48,319
tool uh the research really handled a

1135
00:49:48,319 --> 00:49:51,359
multiple a bench of anomalies to cover

1136
00:49:51,359 --> 00:49:52,640
all types of

1137
00:49:52,640 --> 00:49:54,319
suspicious digits suspicious

1138
00:49:54,319 --> 00:49:56,000
authentication tickets

1139
00:49:56,000 --> 00:49:57,599
uh it supports running as different

1140
00:49:57,599 --> 00:49:59,280
domains supports running the entire

1141
00:49:59,280 --> 00:50:01,680
domain or specific computers uh you can

1142
00:50:01,680 --> 00:50:04,480
also optionally enable uh winram if you

1143
00:50:04,480 --> 00:50:06,559
want to especially if you're in a live

1144
00:50:06,559 --> 00:50:08,880
incident this can be very helpful

1145
00:50:08,880 --> 00:50:11,280
because by default winram is a service

1146
00:50:11,280 --> 00:50:14,079
protocol uh does not

1147
00:50:14,079 --> 00:50:15,839
is not enabled on end points on

1148
00:50:15,839 --> 00:50:17,599
workstations only on servers from

1149
00:50:17,599 --> 00:50:20,960
windows 2008 r2 and above it it also i

1150
00:50:20,960 --> 00:50:22,960
also go ahead and fix some clock skew

1151
00:50:22,960 --> 00:50:24,319
issues that will

1152
00:50:24,319 --> 00:50:26,880
give you rpc not available at all this

1153
00:50:26,880 --> 00:50:28,640
sometimes happens when the clocks uh

1154
00:50:28,640 --> 00:50:29,760
between the endpoint and domain

1155
00:50:29,760 --> 00:50:32,559
controller gets a skew over uh five

1156
00:50:32,559 --> 00:50:34,880
minutes so i fix that and then i get the

1157
00:50:34,880 --> 00:50:37,119
data and much more so it analyzes the

1158
00:50:37,119 --> 00:50:39,200
tickets finds the anomalies and

1159
00:50:39,200 --> 00:50:40,559
hopefully it will be ready for hack in

1160
00:50:40,559 --> 00:50:42,480
paris that's the next convention i'm

1161
00:50:42,480 --> 00:50:44,720
speaking at uh later this month

1162
00:50:44,720 --> 00:50:47,040
uh and just a quick preview a quick

1163
00:50:47,040 --> 00:50:49,119
demonstration so in this environment i

1164
00:50:49,119 --> 00:50:50,400
have uh

1165
00:50:50,400 --> 00:50:52,559
on this machine three uh virtual

1166
00:50:52,559 --> 00:50:54,000
machines controller and other two

1167
00:50:54,000 --> 00:50:56,319
workstations first off i'm going to run

1168
00:50:56,319 --> 00:50:58,880
just run the script with the default

1169
00:50:58,880 --> 00:51:01,680
options no parameters

1170
00:51:01,680 --> 00:51:04,640
given and as you can see it ran

1171
00:51:04,640 --> 00:51:07,040
using the default collection methods of

1172
00:51:07,040 --> 00:51:08,400
winner am it found three potential

1173
00:51:08,400 --> 00:51:10,000
computers two of them responded through

1174
00:51:10,000 --> 00:51:12,480
winram no suspicious entries found but

1175
00:51:12,480 --> 00:51:14,400
it did collect uh 10

1176
00:51:14,400 --> 00:51:16,160
kerberos tickets and it did save them to

1177
00:51:16,160 --> 00:51:19,280
csv so we're just just going to have a

1178
00:51:19,280 --> 00:51:21,280
quick look at that csv and pop it to a

1179
00:51:21,280 --> 00:51:24,880
grid and as you can see

1180
00:51:24,880 --> 00:51:25,839
so

1181
00:51:25,839 --> 00:51:27,520
it is essentially even before the

1182
00:51:27,520 --> 00:51:29,440
detection it does

1183
00:51:29,440 --> 00:51:31,520
as a free open source tool doing

1184
00:51:31,520 --> 00:51:33,599
something that many commercial products

1185
00:51:33,599 --> 00:51:35,599
fail to do until today

1186
00:51:35,599 --> 00:51:38,640
it is also essentially a tgt collector

1187
00:51:38,640 --> 00:51:40,079
so you can collect all your

1188
00:51:40,079 --> 00:51:41,839
authentication active authentication

1189
00:51:41,839 --> 00:51:44,480
sessions combo sessions uh in your

1190
00:51:44,480 --> 00:51:47,040
domain and just parse them or

1191
00:51:47,040 --> 00:51:48,400
look through them

1192
00:51:48,400 --> 00:51:50,160
even on on a daily thing even if you're

1193
00:51:50,160 --> 00:51:51,119
not

1194
00:51:51,119 --> 00:51:53,119
under fire and under stress so let's go

1195
00:51:53,119 --> 00:51:55,119
ahead and do something nice uh let's go

1196
00:51:55,119 --> 00:51:57,200
and hunt for a pass the hash

1197
00:51:57,200 --> 00:51:59,599
session and for that i'm gonna switch

1198
00:51:59,599 --> 00:52:01,200
over to another vm

1199
00:52:01,200 --> 00:52:03,280
this this would be the windows 10

1200
00:52:03,280 --> 00:52:05,680
vm here i'm logged on as a user named

1201
00:52:05,680 --> 00:52:08,319
adam and adam

1202
00:52:08,319 --> 00:52:11,680
prepared in advance the anti-lm hash of

1203
00:52:11,680 --> 00:52:14,000
an administrative user of a

1204
00:52:14,000 --> 00:52:15,920
c500

1205
00:52:15,920 --> 00:52:19,040
administrative user and it's going to

1206
00:52:19,040 --> 00:52:21,119
just run mimikatz uh

1207
00:52:21,119 --> 00:52:23,280
with past the hash so many of you

1208
00:52:23,280 --> 00:52:26,319
obviously know this securi secure lsa by

1209
00:52:26,319 --> 00:52:28,800
venturing delphi and mimikatz and what

1210
00:52:28,800 --> 00:52:30,319
is past the hash it's essentially an

1211
00:52:30,319 --> 00:52:32,240
impersonation token that is has a

1212
00:52:32,240 --> 00:52:34,079
different ntlm hash

1213
00:52:34,079 --> 00:52:36,640
than the primary token of the process

1214
00:52:36,640 --> 00:52:37,440
right

1215
00:52:37,440 --> 00:52:39,280
this is the definition

1216
00:52:39,280 --> 00:52:43,119
so my primary token is adam but the

1217
00:52:43,119 --> 00:52:44,800
impersonation talker is you can see the

1218
00:52:44,800 --> 00:52:46,640
k-list the kerbos tickets i'm coming out

1219
00:52:46,640 --> 00:52:48,240
to the network

1220
00:52:48,240 --> 00:52:51,520
as user administrator this is uh

1221
00:52:51,520 --> 00:52:53,680
how past the hash looks like on the end

1222
00:52:53,680 --> 00:52:56,480
point itself the compromise the endpoint

1223
00:52:56,480 --> 00:52:57,920
and of course you can

1224
00:52:57,920 --> 00:53:00,559
go and look for and pass events collect

1225
00:53:00,559 --> 00:53:03,680
events from the domain etc but this is

1226
00:53:03,680 --> 00:53:04,559
very

1227
00:53:04,559 --> 00:53:06,720
easier and quicker so as you can see now

1228
00:53:06,720 --> 00:53:08,720
i ran the tool again and

1229
00:53:08,720 --> 00:53:10,720
the whole tree lit up

1230
00:53:10,720 --> 00:53:13,200
so i found a suspicious ticket

1231
00:53:13,200 --> 00:53:14,960
you can also see it in the cli in the

1232
00:53:14,960 --> 00:53:16,319
back but

1233
00:53:16,319 --> 00:53:18,559
it also opens up in the grid

1234
00:53:18,559 --> 00:53:20,640
you see there is a potential past the

1235
00:53:20,640 --> 00:53:23,280
hash ticket suspicious ticket

1236
00:53:23,280 --> 00:53:25,599
and you can see the machine it's on and

1237
00:53:25,599 --> 00:53:27,520
here you can respond right now you can

1238
00:53:27,520 --> 00:53:30,480
do some remediation isolate this machine

1239
00:53:30,480 --> 00:53:32,960
whatever you want and it also keeps

1240
00:53:32,960 --> 00:53:34,559
a separate report

1241
00:53:34,559 --> 00:53:36,480
of all the tgts but also a separate

1242
00:53:36,480 --> 00:53:39,280
report for the ones that matched the

1243
00:53:39,280 --> 00:53:40,720
anomalous

1244
00:53:40,720 --> 00:53:43,599
suspicious tickets uh now we're gonna

1245
00:53:43,599 --> 00:53:45,920
create a golden ticket

1246
00:53:45,920 --> 00:53:47,599
also by using mimikatz we're gonna go

1247
00:53:47,599 --> 00:53:50,319
back to that same machine

1248
00:53:50,319 --> 00:53:51,839
and

1249
00:53:51,839 --> 00:53:53,359
we're gonna run it but this time with a

1250
00:53:53,359 --> 00:53:55,280
with a different syntax

1251
00:53:55,280 --> 00:53:57,359
the golden ticket syntax

1252
00:53:57,359 --> 00:54:00,079
which we pre-prepared

1253
00:54:00,079 --> 00:54:01,760
and

1254
00:54:01,760 --> 00:54:03,440
and in this case this really means we're

1255
00:54:03,440 --> 00:54:06,240
going to use the curved tgt hash

1256
00:54:06,240 --> 00:54:08,720
the ntlm hash and run it

1257
00:54:08,720 --> 00:54:10,480
this this type of syntax you will see in

1258
00:54:10,480 --> 00:54:12,000
many articles

1259
00:54:12,000 --> 00:54:13,520
that's very common

1260
00:54:13,520 --> 00:54:15,920
for uh and we're going to use the

1261
00:54:15,920 --> 00:54:18,160
ptt option essentially

1262
00:54:18,160 --> 00:54:20,480
past the ticket so we injected as you

1263
00:54:20,480 --> 00:54:23,040
can see in k list we have the

1264
00:54:23,040 --> 00:54:26,640
administrator uh ticket in memory

1265
00:54:26,640 --> 00:54:30,559
injected to this uh to this session

1266
00:54:30,559 --> 00:54:33,200
and now when we run again the tool this

1267
00:54:33,200 --> 00:54:34,720
time we're gonna run it with the we're

1268
00:54:34,720 --> 00:54:35,920
gonna run with the parameters we're

1269
00:54:35,920 --> 00:54:36,799
gonna run it with the different

1270
00:54:36,799 --> 00:54:39,520
collection methods using smb smb is a

1271
00:54:39,520 --> 00:54:42,400
bit slower because it it has to it works

1272
00:54:42,400 --> 00:54:45,200
with the admin dollar shell uh same as

1273
00:54:45,200 --> 00:54:46,960
ps exec right

1274
00:54:46,960 --> 00:54:49,200
and it has to copy over some files to

1275
00:54:49,200 --> 00:54:51,200
the temp directory but now it it got us

1276
00:54:51,200 --> 00:54:53,440
back to two tickets to suspicious

1277
00:54:53,440 --> 00:54:55,440
tickets obviously the first one is the

1278
00:54:55,440 --> 00:54:58,079
one we still have on that machine

1279
00:54:58,079 --> 00:55:01,359
uh from uh previous uh past the hash

1280
00:55:01,359 --> 00:55:03,040
attempt and the other is the golden

1281
00:55:03,040 --> 00:55:04,799
ticket you can see the the list of

1282
00:55:04,799 --> 00:55:06,400
anomalies it found

1283
00:55:06,400 --> 00:55:09,520
uh on the golden ticket right so

1284
00:55:09,520 --> 00:55:11,040
everything is wrong

1285
00:55:11,040 --> 00:55:13,440
uh the encoder ticket size the session

1286
00:55:13,440 --> 00:55:14,559
uh

1287
00:55:14,559 --> 00:55:16,640
is not session name is not matching the

1288
00:55:16,640 --> 00:55:17,920
client name

1289
00:55:17,920 --> 00:55:20,079
uh the time difference the default of

1290
00:55:20,079 --> 00:55:22,480
mimikatz is creating for persistence

1291
00:55:22,480 --> 00:55:25,280
creating uh tgt uh not for 10 hours the

1292
00:55:25,280 --> 00:55:26,720
default uh

1293
00:55:26,720 --> 00:55:28,720
they work in kerberos but to create it

1294
00:55:28,720 --> 00:55:30,000
for 10 years

1295
00:55:30,000 --> 00:55:32,400
uh and now the for the last thing we're

1296
00:55:32,400 --> 00:55:36,720
gonna create a really stealthy advanced

1297
00:55:36,720 --> 00:55:39,040
golden ticket this means we're going to

1298
00:55:39,040 --> 00:55:41,440
walk like a duck look like a duck behave

1299
00:55:41,440 --> 00:55:43,599
like a duck so this is the closest you

1300
00:55:43,599 --> 00:55:44,720
get to

1301
00:55:44,720 --> 00:55:46,079
fooling

1302
00:55:46,079 --> 00:55:49,920
some network anomalies uh pickups etc

1303
00:55:49,920 --> 00:55:51,359
even if you collect them through the

1304
00:55:51,359 --> 00:55:54,880
network with some wireshark or whatever

1305
00:55:54,880 --> 00:55:56,559
and let's go ahead and do that so we

1306
00:55:56,559 --> 00:55:58,640
have our special

1307
00:55:58,640 --> 00:56:00,000
syntax

1308
00:56:00,000 --> 00:56:01,599
on another machine i switched now to a

1309
00:56:01,599 --> 00:56:04,480
different machine different vm windows 8

1310
00:56:04,480 --> 00:56:06,480
dash pc

1311
00:56:06,480 --> 00:56:08,960
and on this machine i'm going to run the

1312
00:56:08,960 --> 00:56:12,240
more advanced syntax of of this command

1313
00:56:12,240 --> 00:56:14,000
and in this machine i'm running with a

1314
00:56:14,000 --> 00:56:15,200
different user

1315
00:56:15,200 --> 00:56:17,680
but also a normal user now i'm going to

1316
00:56:17,680 --> 00:56:21,280
run it with these specific options that

1317
00:56:21,280 --> 00:56:24,160
mess around with the time

1318
00:56:24,160 --> 00:56:26,559
beginning and and renew

1319
00:56:26,559 --> 00:56:27,520
so

1320
00:56:27,520 --> 00:56:30,880
this will be a really a ticket that

1321
00:56:30,880 --> 00:56:33,119
impersonates a real ticket that was

1322
00:56:33,119 --> 00:56:35,440
given to you by a domain controller with

1323
00:56:35,440 --> 00:56:36,880
all the rules of the domain you are

1324
00:56:36,880 --> 00:56:39,839
living at so so we're really in making

1325
00:56:39,839 --> 00:56:42,160
some efforts running the parameters to

1326
00:56:42,160 --> 00:56:44,160
make this look

1327
00:56:44,160 --> 00:56:45,359
very

1328
00:56:45,359 --> 00:56:47,440
normal right

1329
00:56:47,440 --> 00:56:51,680
for an offline forged tgt

1330
00:56:51,680 --> 00:56:55,040
but even in this case when we run again

1331
00:56:55,040 --> 00:56:57,440
the script

1332
00:56:57,440 --> 00:56:59,200
we can play with a bunch of other uh

1333
00:56:59,200 --> 00:57:00,799
options just to show you that there are

1334
00:57:00,799 --> 00:57:03,040
other options uh but we run it on

1335
00:57:03,040 --> 00:57:05,760
workstations only and some verbose uh

1336
00:57:05,760 --> 00:57:07,839
that gives us some and some logging

1337
00:57:07,839 --> 00:57:09,440
level okay so we'll

1338
00:57:09,440 --> 00:57:12,720
also do some extra logging

1339
00:57:12,720 --> 00:57:14,559
and as you can see it found this third

1340
00:57:14,559 --> 00:57:16,400
suspicious ticket now we have two

1341
00:57:16,400 --> 00:57:18,880
distinct workstations in the red in the

1342
00:57:18,880 --> 00:57:20,480
back there

1343
00:57:20,480 --> 00:57:22,799
that have anomalous tickets and the

1344
00:57:22,799 --> 00:57:24,960
second ticket in the list on the windows

1345
00:57:24,960 --> 00:57:27,920
8-pc machine you can see it has a logon

1346
00:57:27,920 --> 00:57:30,000
server everything is great it has an as

1347
00:57:30,000 --> 00:57:31,760
256-bit

1348
00:57:31,760 --> 00:57:34,319
encryption key it has a time difference

1349
00:57:34,319 --> 00:57:36,880
of 10 and all everything looks okay but

1350
00:57:36,880 --> 00:57:40,160
still the session name could never match

1351
00:57:40,160 --> 00:57:44,240
the client name on the kerberos

1352
00:57:44,240 --> 00:57:46,640
and have an integrity level of of the

1353
00:57:46,640 --> 00:57:48,480
ticket because you cannot have the

1354
00:57:48,480 --> 00:57:50,880
primary token and the impersonation

1355
00:57:50,880 --> 00:57:52,559
token on and the kerberos ticket at the

1356
00:57:52,559 --> 00:57:55,440
same time and of course there is the log

1357
00:57:55,440 --> 00:57:57,200
so you you get uh

1358
00:57:57,200 --> 00:57:58,880
to see uh

1359
00:57:58,880 --> 00:58:01,280
how it ran so all those uh bunch of

1360
00:58:01,280 --> 00:58:03,599
tools and scripts uh they are ready for

1361
00:58:03,599 --> 00:58:04,880
you you can either pick them up from my

1362
00:58:04,880 --> 00:58:06,839
git github page or from

1363
00:58:06,839 --> 00:58:08,960
activedirectory.com and now keep on

1364
00:58:08,960 --> 00:58:10,319
editing this

1365
00:58:10,319 --> 00:58:12,960
uh so to wrap up obviously i gave you a

1366
00:58:12,960 --> 00:58:14,960
chance to see there are many forensic

1367
00:58:14,960 --> 00:58:17,200
artifacts that you you can get which are

1368
00:58:17,200 --> 00:58:19,359
very far from being out of the box but

1369
00:58:19,359 --> 00:58:21,440
if you pay attention to them in advance

1370
00:58:21,440 --> 00:58:23,440
you can uh really grab them with the

1371
00:58:23,440 --> 00:58:25,680
right knowledge and open source tools

1372
00:58:25,680 --> 00:58:27,040
keep in mind that active directory

1373
00:58:27,040 --> 00:58:29,200
forensics is a part of a wider picture

1374
00:58:29,200 --> 00:58:31,119
right there are signals coming from the

1375
00:58:31,119 --> 00:58:33,359
endpoints and some logs in other places

1376
00:58:33,359 --> 00:58:36,640
in the network and and firewall logs etc

1377
00:58:36,640 --> 00:58:37,599
so

1378
00:58:37,599 --> 00:58:39,520
adopting an event correlation sort of

1379
00:58:39,520 --> 00:58:42,720
threat hunting mindset xdrs etc can

1380
00:58:42,720 --> 00:58:44,640
really help to search for high fidelity

1381
00:58:44,640 --> 00:58:46,559
alerts rather the false positives i

1382
00:58:46,559 --> 00:58:48,400
encourage you to practice uh before

1383
00:58:48,400 --> 00:58:50,880
during and after approach meaning

1384
00:58:50,880 --> 00:58:52,240
essentially before doing and after an

1385
00:58:52,240 --> 00:58:54,480
incident before an incident turn on the

1386
00:58:54,480 --> 00:58:56,640
events that you want run those tools get

1387
00:58:56,640 --> 00:58:58,319
familiar with them during of course you

1388
00:58:58,319 --> 00:59:00,880
can use them and in a post ayah

1389
00:59:00,880 --> 00:59:02,720
you can understand what are the changes

1390
00:59:02,720 --> 00:59:04,319
even if you are missing a lot of

1391
00:59:04,319 --> 00:59:06,880
information and files and do check out

1392
00:59:06,880 --> 00:59:09,359
the the pages and the scripts use them

1393
00:59:09,359 --> 00:59:11,119
give me comments tell me what can be

1394
00:59:11,119 --> 00:59:13,760
improved uh and hopefully that the last

1395
00:59:13,760 --> 00:59:15,119
tool i showed you goldfinger should be

1396
00:59:15,119 --> 00:59:18,559
ready by hacking paris this month so

1397
00:59:18,559 --> 00:59:21,359
thank you very much

1398
00:59:27,200 --> 00:59:29,040
we have time for questions yeah we have

1399
00:59:29,040 --> 00:59:31,760
uh we have time for some questions i i'm

1400
00:59:31,760 --> 00:59:33,760
sure there are some questions right

1401
00:59:33,760 --> 00:59:36,160
anyone

1402
00:59:36,400 --> 00:59:39,720
good yeah

1403
00:59:48,720 --> 00:59:51,280
the question was why is uh this random

1404
00:59:51,280 --> 00:59:53,040
guy from israel uh

1405
00:59:53,040 --> 00:59:55,440
provided the script uh that detects the

1406
00:59:55,440 --> 00:59:57,839
script this uh anomalous tickets and why

1407
00:59:57,839 --> 00:59:59,359
is microsoft not doing it for the last

1408
00:59:59,359 --> 01:00:00,640
30 years

1409
01:00:00,640 --> 01:00:01,599
i i've

1410
01:00:01,599 --> 01:00:03,040
phrased your question with your

1411
01:00:03,040 --> 01:00:04,480
permission

1412
01:00:04,480 --> 01:00:05,839
the question is

1413
01:00:05,839 --> 01:00:07,760
i would assume because

1414
01:00:07,760 --> 01:00:10,319
this doesn't bring microsoft money

1415
01:00:10,319 --> 01:00:11,280
uh

1416
01:00:11,280 --> 01:00:12,559
fair enough

1417
01:00:12,559 --> 01:00:14,559
you know to be honest uh if you buy

1418
01:00:14,559 --> 01:00:17,839
licenses e5 whatever azure and you you

1419
01:00:17,839 --> 01:00:19,839
put everything in the cloud you are

1420
01:00:19,839 --> 01:00:22,079
signing up to the biggest

1421
01:00:22,079 --> 01:00:23,920
you know vendor lockdown in history

1422
01:00:23,920 --> 01:00:24,960
obviously

1423
01:00:24,960 --> 01:00:26,319
uh

1424
01:00:26,319 --> 01:00:28,319
but uh you know there are reasons to do

1425
01:00:28,319 --> 01:00:30,160
that it's not all black and white in the

1426
01:00:30,160 --> 01:00:32,400
world i respect that but yeah to be

1427
01:00:32,400 --> 01:00:33,839
honest i think it's just not in the

1428
01:00:33,839 --> 01:00:35,440
mindset to

1429
01:00:35,440 --> 01:00:38,960
provide free tools of of an on-prem

1430
01:00:38,960 --> 01:00:41,920
technology that customers already bought

1431
01:00:41,920 --> 01:00:44,799
so they already you already pay for that

1432
01:00:44,799 --> 01:00:46,880
they want to build tools that are for

1433
01:00:46,880 --> 01:00:48,480
things that you pay in the future

1434
01:00:48,480 --> 01:00:50,880
i'm sorry to be blunt but i think that's

1435
01:00:50,880 --> 01:00:52,480
that the answer i i don't think they

1436
01:00:52,480 --> 01:00:55,040
lack the knowledge to do what i do which

1437
01:00:55,040 --> 01:00:57,359
is essentially pop up a system shell

1438
01:00:57,359 --> 01:01:00,000
losing multiples multiple protocols and

1439
01:01:00,000 --> 01:01:01,680
from this system shall enumerate kerbal

1440
01:01:01,680 --> 01:01:04,480
sessions uh dump them parse them analyze

1441
01:01:04,480 --> 01:01:06,240
them and do some research to see the

1442
01:01:06,240 --> 01:01:07,760
anomalies in the different fields of the

1443
01:01:07,760 --> 01:01:10,480
tickets it's not rocket science right

1444
01:01:10,480 --> 01:01:12,720
flying planes is uh it's also not hard

1445
01:01:12,720 --> 01:01:14,960
when you get used to it but it's harder

1446
01:01:14,960 --> 01:01:16,960
than writing the script probably on the

1447
01:01:16,960 --> 01:01:18,640
time it takes

1448
01:01:18,640 --> 01:01:20,960
anyone else

1449
01:01:20,960 --> 01:01:23,040
some additional questions

1450
01:01:23,040 --> 01:01:24,480
come on don't be shy

1451
01:01:24,480 --> 01:01:26,799
don't be shy it's always that in the

1452
01:01:26,799 --> 01:01:28,160
first talk of the morning it's like

1453
01:01:28,160 --> 01:01:29,839
everyone has to sort of get in the mode

1454
01:01:29,839 --> 01:01:31,359
to actually

1455
01:01:31,359 --> 01:01:33,359
dare to say something

1456
01:01:33,359 --> 01:01:38,119
anyone else yeah sure hi

1457
01:01:45,599 --> 01:01:49,119
if they are false positive in what

1458
01:01:51,440 --> 01:01:54,079
so do you script find false positives

1459
01:01:54,079 --> 01:01:56,079
yeah does it happen yeah that's a good

1460
01:01:56,079 --> 01:01:57,839
question actually there are cases where

1461
01:01:57,839 --> 01:02:00,480
you would get false positives that's uh

1462
01:02:00,480 --> 01:02:02,240
why the script is not yet released

1463
01:02:02,240 --> 01:02:04,880
because i'm adding an exclusion

1464
01:02:04,880 --> 01:02:07,440
some features i want to add some more uh

1465
01:02:07,440 --> 01:02:09,440
arguments to the script is

1466
01:02:09,440 --> 01:02:11,839
to exclude certain pc certain machines

1467
01:02:11,839 --> 01:02:14,880
for example if you run it against

1468
01:02:14,880 --> 01:02:17,280
an sccm machine

1469
01:02:17,280 --> 01:02:18,720
you will get a lot of false positive

1470
01:02:18,720 --> 01:02:20,720
past the hash because

1471
01:02:20,720 --> 01:02:22,960
manage engine sccm exchange those type

1472
01:02:22,960 --> 01:02:25,839
of machines they actually perform

1473
01:02:25,839 --> 01:02:28,400
past the hash

1474
01:02:28,400 --> 01:02:31,119
internally they pop up shells that are

1475
01:02:31,119 --> 01:02:32,640
impersonating other users and the

1476
01:02:32,640 --> 01:02:34,400
primary token is different than the

1477
01:02:34,400 --> 01:02:37,280
impersonation token so i want to give

1478
01:02:37,280 --> 01:02:38,640
you those options in the tool and

1479
01:02:38,640 --> 01:02:40,240
minimize false positive as much as

1480
01:02:40,240 --> 01:02:42,000
possible but to be honest if you just

1481
01:02:42,000 --> 01:02:44,079
run it on all your workstations and

1482
01:02:44,079 --> 01:02:46,240
points uh the chances for false

1483
01:02:46,240 --> 01:02:48,720
positives are very very rare it will

1484
01:02:48,720 --> 01:02:51,200
mainly happen in certain task specific

1485
01:02:51,200 --> 01:02:54,240
servers in a in an average 80 domain but

1486
01:02:54,240 --> 01:02:55,599
i still want to give you this option

1487
01:02:55,599 --> 01:02:57,599
that's why i'm not releasing it yet so i

1488
01:02:57,599 --> 01:02:58,720
want to be as

1489
01:02:58,720 --> 01:02:59,680
as

1490
01:02:59,680 --> 01:03:01,440
customer ready

1491
01:03:01,440 --> 01:03:02,720
when it is out

1492
01:03:02,720 --> 01:03:07,000
but that's a very good question yep

1493
01:03:18,880 --> 01:03:21,119
right so the question is is this a tool

1494
01:03:21,119 --> 01:03:23,839
that red teamers could also use or or uh

1495
01:03:23,839 --> 01:03:25,680
is it like a chicken and an egg question

1496
01:03:25,680 --> 01:03:26,880
like uh

1497
01:03:26,880 --> 01:03:28,640
you need already the permissions in

1498
01:03:28,640 --> 01:03:30,559
order to enumerate the kerberos tickets

1499
01:03:30,559 --> 01:03:32,640
from each and every endpoint so

1500
01:03:32,640 --> 01:03:34,960
it is true essentially every admin tool

1501
01:03:34,960 --> 01:03:37,359
is an attack tool right it all changes

1502
01:03:37,359 --> 01:03:39,680
in the concept in the context that it is

1503
01:03:39,680 --> 01:03:40,559
ran

1504
01:03:40,559 --> 01:03:42,559
uh it's like any other tool like a knife

1505
01:03:42,559 --> 01:03:44,640
you know you could prepare salad you can

1506
01:03:44,640 --> 01:03:47,119
uh stab someone so you you can stab

1507
01:03:47,119 --> 01:03:48,960
someone with the scripts and obviously

1508
01:03:48,960 --> 01:03:50,720
use it for reconnaissance but you would

1509
01:03:50,720 --> 01:03:52,400
need the permissions first

1510
01:03:52,400 --> 01:03:55,039
so uh obviously you need this script to

1511
01:03:55,039 --> 01:03:57,039
run with a privileged account that is

1512
01:03:57,039 --> 01:03:58,799
essentially a local admin on the

1513
01:03:58,799 --> 01:04:00,400
endpoints because you need to enumerate

1514
01:04:00,400 --> 01:04:03,359
all the kerberos sessions from all the

1515
01:04:03,359 --> 01:04:05,520
logon sessions on that machine so in

1516
01:04:05,520 --> 01:04:09,039
order to do that you need a token

1517
01:04:09,039 --> 01:04:11,119
as a system account

1518
01:04:11,119 --> 01:04:12,559
uh and if you already have this

1519
01:04:12,559 --> 01:04:14,960
permission you can do a bunch of other

1520
01:04:14,960 --> 01:04:17,599
things so uh running this script as a as

1521
01:04:17,599 --> 01:04:19,039
an attacker is

1522
01:04:19,039 --> 01:04:22,319
less uh frightening or less worrying and

1523
01:04:22,319 --> 01:04:24,400
but running it as a blue teamer that has

1524
01:04:24,400 --> 01:04:27,440
a lot of value uh one of the options is

1525
01:04:27,440 --> 01:04:29,920
to add also a lapse support but i'm not

1526
01:04:29,920 --> 01:04:32,240
sure this will be ready by the end of uh

1527
01:04:32,240 --> 01:04:35,520
of the month but i will do my best

1528
01:04:35,520 --> 01:04:37,599
one more over there first which one

1529
01:04:37,599 --> 01:04:40,400
sorry oh same question

1530
01:04:40,400 --> 01:04:42,720
yep same uh chicken and then a question

1531
01:04:42,720 --> 01:04:46,759
thank you go ahead

1532
01:04:54,640 --> 01:04:56,640
right so you're relating to the last

1533
01:04:56,640 --> 01:04:58,160
tool the

1534
01:04:58,160 --> 01:05:03,078
tickets the detect suspicious ticket one

1535
01:05:13,039 --> 01:05:15,520
right so the

1536
01:05:15,520 --> 01:05:17,599
so the question is if my tool is uh

1537
01:05:17,599 --> 01:05:19,760
collecting some information from the kdc

1538
01:05:19,760 --> 01:05:21,039
essentially is it

1539
01:05:21,039 --> 01:05:22,720
grabbing some settings from the domain

1540
01:05:22,720 --> 01:05:24,240
controller

1541
01:05:24,240 --> 01:05:26,559
the only setting i'm picking uh taking

1542
01:05:26,559 --> 01:05:28,480
from the domain controller essentially

1543
01:05:28,480 --> 01:05:30,880
in in a simple ldap query or grabbing it

1544
01:05:30,880 --> 01:05:32,160
from the sysvol

1545
01:05:32,160 --> 01:05:33,520
is the

1546
01:05:33,520 --> 01:05:35,520
password the kerberos policy of the

1547
01:05:35,520 --> 01:05:38,160
domain to know what is the default uh

1548
01:05:38,160 --> 01:05:39,039
time

1549
01:05:39,039 --> 01:05:41,760
for uh tgt and ul uh

1550
01:05:41,760 --> 01:05:43,839
and uh how long will be renewed like the

1551
01:05:43,839 --> 01:05:45,920
default 10 hours seven days

1552
01:05:45,920 --> 01:05:47,359
that's the only thing i pick up from the

1553
01:05:47,359 --> 01:05:49,440
domain controller the script runs only

1554
01:05:49,440 --> 01:05:50,960
on the end points

1555
01:05:50,960 --> 01:05:52,880
so i really don't need anything from the

1556
01:05:52,880 --> 01:05:54,880
domain controller on the suspicious

1557
01:05:54,880 --> 01:05:57,839
tickets detection uh on the forensic

1558
01:05:57,839 --> 01:05:59,520
side of scripts the replication method

1559
01:05:59,520 --> 01:06:02,720
data whole all history and get ad group

1560
01:06:02,720 --> 01:06:04,400
changes all those

1561
01:06:04,400 --> 01:06:05,920
parts of demonstration that we had in

1562
01:06:05,920 --> 01:06:06,960
the middle

1563
01:06:06,960 --> 01:06:09,680
those require either an online active

1564
01:06:09,680 --> 01:06:12,720
domain controller any domain controller

1565
01:06:12,720 --> 01:06:13,920
and

1566
01:06:13,920 --> 01:06:14,960
or either

1567
01:06:14,960 --> 01:06:17,599
an offline copy backup of the database

1568
01:06:17,599 --> 01:06:19,440
just the database

1569
01:06:19,440 --> 01:06:21,760
no special permissions

1570
01:06:21,760 --> 01:06:23,440
so for an attacker

1571
01:06:23,440 --> 01:06:25,839
coming back to dan's question here

1572
01:06:25,839 --> 01:06:28,319
that would actually be quite useful

1573
01:06:28,319 --> 01:06:30,640
because i'm just using a normal

1574
01:06:30,640 --> 01:06:33,599
user with ldap queries so anyone can

1575
01:06:33,599 --> 01:06:35,359
grab this information

1576
01:06:35,359 --> 01:06:37,520
remember trust

1577
01:06:37,520 --> 01:06:38,960
is a

1578
01:06:38,960 --> 01:06:40,960
slippery thing

1579
01:06:40,960 --> 01:06:43,119
nice i think we have to break there

1580
01:06:43,119 --> 01:06:44,799
because we uh

1581
01:06:44,799 --> 01:06:47,119
yeah anyway i'll be available later i'll

1582
01:06:47,119 --> 01:06:48,880
be here uh throughout the day don't be

1583
01:06:48,880 --> 01:06:51,119
shy yeah don't be shy yeah so uh hand

1584
01:06:51,119 --> 01:06:54,559
over pause again thank you thank you

1585
01:06:57,280 --> 01:07:00,960
and uh before we jump to the clouds with

1586
01:07:00,960 --> 01:07:02,880
matria and

1587
01:07:02,880 --> 01:07:05,920
krishna right yeah we

1588
01:07:05,920 --> 01:07:07,760
i think everyone deserves a little bit

1589
01:07:07,760 --> 01:07:10,319
of water and coffee

1590
01:07:10,319 --> 01:07:12,720
so we will start in 15 minutes so if you

1591
01:07:12,720 --> 01:07:14,799
want to grab a quick coffee and maybe

1592
01:07:14,799 --> 01:07:17,799
some

1593
01:21:13,600 --> 01:21:15,840
everyone in the sponsor area find your

1594
01:21:15,840 --> 01:21:18,159
seats

1595
01:21:18,400 --> 01:21:20,000
they're very slow

1596
01:21:20,000 --> 01:21:22,639
run charge

1597
01:21:22,639 --> 01:21:25,760
yeah so we will begin in two minutes

1598
01:21:25,760 --> 01:21:29,480
find your seats please

1599
01:24:03,440 --> 01:24:04,560
a warm

1600
01:24:04,560 --> 01:24:06,400
applause to

1601
01:24:06,400 --> 01:24:11,440
matri and krishna almost right right yep

1602
01:24:13,760 --> 01:24:17,840
so now we're gonna visit the clouds

1603
01:24:17,840 --> 01:24:19,600
thank you so much

1604
01:24:19,600 --> 01:24:22,320
uh good morning all i am

1605
01:24:22,320 --> 01:24:24,880
here i have krishna shinwas my

1606
01:24:24,880 --> 01:24:26,639
co-presenter along with me on this

1607
01:24:26,639 --> 01:24:30,159
podium so today we will be talking about

1608
01:24:30,159 --> 01:24:33,840
exploitation and automated detection of

1609
01:24:33,840 --> 01:24:35,920
threats present in our modern cloud

1610
01:24:35,920 --> 01:24:37,360
infrastructure

1611
01:24:37,360 --> 01:24:40,239
a brief introduction to ourselves uh

1612
01:24:40,239 --> 01:24:42,000
krishna and i are

1613
01:24:42,000 --> 01:24:44,239
just a bunch of students we are

1614
01:24:44,239 --> 01:24:46,960
bacheloring in computer science

1615
01:24:46,960 --> 01:24:49,679
along with our co-author mahima we are

1616
01:24:49,679 --> 01:24:52,639
interning at a company called deep armor

1617
01:24:52,639 --> 01:24:54,960
uh it is a security consulting firm

1618
01:24:54,960 --> 01:24:56,159
which

1619
01:24:56,159 --> 01:24:58,719
is making some noise and like we also

1620
01:24:58,719 --> 01:25:01,040
won one of the most scalable startup

1621
01:25:01,040 --> 01:25:02,480
recently

1622
01:25:02,480 --> 01:25:05,440
uh so for today's agenda we will be

1623
01:25:05,440 --> 01:25:07,760
looking in an overview about uh web

1624
01:25:07,760 --> 01:25:10,239
application security and cloud

1625
01:25:10,239 --> 01:25:12,719
infrastructure security we will also

1626
01:25:12,719 --> 01:25:14,800
look into the different standards that

1627
01:25:14,800 --> 01:25:18,159
are there and why we will be going above

1628
01:25:18,159 --> 01:25:21,120
and beyond certain industry standards we

1629
01:25:21,120 --> 01:25:23,600
will also demonstrate few practical

1630
01:25:23,600 --> 01:25:26,080
attacks for more understanding finally

1631
01:25:26,080 --> 01:25:28,000
we'll be wrapping up our presentation by

1632
01:25:28,000 --> 01:25:30,560
looking into our proof of concept

1633
01:25:30,560 --> 01:25:33,360
uh for today and uh the solution for

1634
01:25:33,360 --> 01:25:35,360
this

1635
01:25:35,360 --> 01:25:38,719
uh so we all know that web application

1636
01:25:38,719 --> 01:25:42,159
security is the center for any web-based

1637
01:25:42,159 --> 01:25:45,360
organization that means you need to

1638
01:25:45,360 --> 01:25:47,760
secure your web application

1639
01:25:47,760 --> 01:25:52,080
by securing your apis portals consoles

1640
01:25:52,080 --> 01:25:55,120
the cloud infrastructure and many more

1641
01:25:55,120 --> 01:25:58,560
so all of these can be majorly divided

1642
01:25:58,560 --> 01:26:02,000
into three sections one uh the console

1643
01:26:02,000 --> 01:26:04,080
portals web pages

1644
01:26:04,080 --> 01:26:07,600
the second is the apis and the third

1645
01:26:07,600 --> 01:26:10,239
being the cloud infrastructure

1646
01:26:10,239 --> 01:26:12,480
so the first two sections are majorly

1647
01:26:12,480 --> 01:26:15,440
taken care by the developers using the

1648
01:26:15,440 --> 01:26:18,000
security development life cycle and the

1649
01:26:18,000 --> 01:26:19,920
ci cd for scrum

1650
01:26:19,920 --> 01:26:21,199
the third

1651
01:26:21,199 --> 01:26:23,440
cloud infrastructure requires you to

1652
01:26:23,440 --> 01:26:26,080
continuously monitor your cloud and

1653
01:26:26,080 --> 01:26:29,679
fraud usually developers tend to forget

1654
01:26:29,679 --> 01:26:32,719
or neglect this thinking that your cloud

1655
01:26:32,719 --> 01:26:36,000
service providers are responsible for it

1656
01:26:36,000 --> 01:26:38,560
we'll get back to it in a while

1657
01:26:38,560 --> 01:26:42,080
focusing on web application security we

1658
01:26:42,080 --> 01:26:44,880
have a five step approach for this that

1659
01:26:44,880 --> 01:26:48,000
is from s1 to s5 and we recommend you to

1660
01:26:48,000 --> 01:26:50,639
start it in the earlier stages of your

1661
01:26:50,639 --> 01:26:52,960
web application development that is as

1662
01:26:52,960 --> 01:26:55,040
soon as your program por has been

1663
01:26:55,040 --> 01:26:57,600
initiated till the deployment and the

1664
01:26:57,600 --> 01:27:00,159
maintenance part of it

1665
01:27:00,159 --> 01:27:03,520
so the s1 that looks into your security

1666
01:27:03,520 --> 01:27:04,800
architecture

1667
01:27:04,800 --> 01:27:07,679
key security attributes and the security

1668
01:27:07,679 --> 01:27:10,480
objectives is done usually during the

1669
01:27:10,480 --> 01:27:13,520
program pure stage the second or the

1670
01:27:13,520 --> 01:27:16,560
step two looks into the attack trace

1671
01:27:16,560 --> 01:27:19,199
that is done during the design phase of

1672
01:27:19,199 --> 01:27:23,360
your web application the third is the

1673
01:27:23,360 --> 01:27:26,320
uh looks into your focus security core

1674
01:27:26,320 --> 01:27:30,159
review that uh is done usually uh during

1675
01:27:30,159 --> 01:27:32,400
the implementation phase of your web

1676
01:27:32,400 --> 01:27:34,080
application

1677
01:27:34,080 --> 01:27:37,040
the fourth step looks into fuzzing and

1678
01:27:37,040 --> 01:27:39,280
pen testing that is during the

1679
01:27:39,280 --> 01:27:42,639
pre-launch phase of your web application

1680
01:27:42,639 --> 01:27:45,199
and it also gives you a vulnerability

1681
01:27:45,199 --> 01:27:47,920
report on where you should be focusing

1682
01:27:47,920 --> 01:27:49,360
your efforts on

1683
01:27:49,360 --> 01:27:52,239
the fifth or the final step looks into

1684
01:27:52,239 --> 01:27:54,719
incident response planning that is

1685
01:27:54,719 --> 01:27:57,520
during the maintenance or the deployment

1686
01:27:57,520 --> 01:28:00,800
stage of your web application so this is

1687
01:28:00,800 --> 01:28:03,520
our five step approach along with this

1688
01:28:03,520 --> 01:28:06,159
we also have an additional steps for

1689
01:28:06,159 --> 01:28:09,360
that is called as uh ci cd for scrum

1690
01:28:09,360 --> 01:28:12,560
that majorly focuses your efforts on the

1691
01:28:12,560 --> 01:28:15,840
any new feature that you can add it on

1692
01:28:15,840 --> 01:28:17,920
to your web application

1693
01:28:17,920 --> 01:28:20,320
along with these we also look into

1694
01:28:20,320 --> 01:28:23,520
certain industry standards such as ovaps

1695
01:28:23,520 --> 01:28:24,560
sans

1696
01:28:24,560 --> 01:28:26,320
and dog nist

1697
01:28:26,320 --> 01:28:27,120
now

1698
01:28:27,120 --> 01:28:29,120
let's look into cloud infrastructure

1699
01:28:29,120 --> 01:28:31,440
security i would like krishna to take

1700
01:28:31,440 --> 01:28:33,040
over from here

1701
01:28:33,040 --> 01:28:34,480
hi guys

1702
01:28:34,480 --> 01:28:36,960
so cloud infrastructure security

1703
01:28:36,960 --> 01:28:39,600
basically securing all your resources

1704
01:28:39,600 --> 01:28:40,800
and your

1705
01:28:40,800 --> 01:28:42,560
services that are deployed into your

1706
01:28:42,560 --> 01:28:45,120
cloud platform so the essentials that

1707
01:28:45,120 --> 01:28:46,639
are required in your security

1708
01:28:46,639 --> 01:28:48,880
perspective is to provide data

1709
01:28:48,880 --> 01:28:51,440
encryption so the data should be uh

1710
01:28:51,440 --> 01:28:53,920
encrypted in rest as well as when it's

1711
01:28:53,920 --> 01:28:56,320
in transit we should also provide high

1712
01:28:56,320 --> 01:28:59,440
availability so any resource should be

1713
01:28:59,440 --> 01:29:01,360
or the services should be available at

1714
01:29:01,360 --> 01:29:04,000
any point of time we should also provide

1715
01:29:04,000 --> 01:29:06,560
with strong authentication by allowing

1716
01:29:06,560 --> 01:29:09,440
the users to give by giving the users

1717
01:29:09,440 --> 01:29:10,400
only the

1718
01:29:10,400 --> 01:29:12,560
certain permissions and providing with

1719
01:29:12,560 --> 01:29:14,239
strong password policies and

1720
01:29:14,239 --> 01:29:16,719
multi-factor authentications we should

1721
01:29:16,719 --> 01:29:19,440
provide customer isolation so the

1722
01:29:19,440 --> 01:29:21,760
customers virtual machine cannot be

1723
01:29:21,760 --> 01:29:23,920
accessed in the private network from

1724
01:29:23,920 --> 01:29:25,199
found

1725
01:29:25,199 --> 01:29:27,199
and we can use hybrid cloud as it

1726
01:29:27,199 --> 01:29:28,400
provides

1727
01:29:28,400 --> 01:29:30,560
the scalability of the public cloud

1728
01:29:30,560 --> 01:29:32,639
while the control that the private cloud

1729
01:29:32,639 --> 01:29:35,120
offers by having these essentials in

1730
01:29:35,120 --> 01:29:38,000
your cloud infrastructure it is easy to

1731
01:29:38,000 --> 01:29:40,560
securely configure and monitor

1732
01:29:40,560 --> 01:29:42,480
cloud platform and provide threat

1733
01:29:42,480 --> 01:29:45,600
intelligence as well as forensics if any

1734
01:29:45,600 --> 01:29:48,800
vulnerabilities are found

1735
01:29:48,800 --> 01:29:51,199
so when we talk about cloud security the

1736
01:29:51,199 --> 01:29:53,360
shared responsibility model comes into

1737
01:29:53,360 --> 01:29:56,320
picture it's a security framework that's

1738
01:29:56,320 --> 01:29:59,120
followed by many cloud platforms like

1739
01:29:59,120 --> 01:30:02,480
amazon web service microsoft azure

1740
01:30:02,480 --> 01:30:04,719
google cloud platform and other such

1741
01:30:04,719 --> 01:30:07,600
cloud platforms so this framework

1742
01:30:07,600 --> 01:30:09,600
basically states that it's not just a

1743
01:30:09,600 --> 01:30:11,679
cloud service provider's

1744
01:30:11,679 --> 01:30:14,159
responsibility to secure the cloud it's

1745
01:30:14,159 --> 01:30:16,480
also the customer's responsibility to

1746
01:30:16,480 --> 01:30:18,159
make sure all your resources and your

1747
01:30:18,159 --> 01:30:21,360
data is secured in your cloud

1748
01:30:21,360 --> 01:30:23,360
so the amazon web

1749
01:30:23,360 --> 01:30:26,639
amazon web service is mainly used and

1750
01:30:26,639 --> 01:30:29,679
widely used across the globe and it

1751
01:30:29,679 --> 01:30:31,760
also provides more services compared to

1752
01:30:31,760 --> 01:30:34,400
other cloud platforms therefore we'll be

1753
01:30:34,400 --> 01:30:37,360
using aws that's your amazon web service

1754
01:30:37,360 --> 01:30:39,440
as our proof of concept for this

1755
01:30:39,440 --> 01:30:41,360
research as well as our

1756
01:30:41,360 --> 01:30:42,639
presentation

1757
01:30:42,639 --> 01:30:45,440
so the shared responsibility for aws has

1758
01:30:45,440 --> 01:30:47,440
been divided into two parts that's your

1759
01:30:47,440 --> 01:30:50,320
security in the cloud and security of

1760
01:30:50,320 --> 01:30:52,320
the cloud

1761
01:30:52,320 --> 01:30:54,960
so security of the cloud is provided by

1762
01:30:54,960 --> 01:30:58,400
the cloud service provider here your aws

1763
01:30:58,400 --> 01:31:00,239
so it provides security to your

1764
01:31:00,239 --> 01:31:02,320
infrastructure your hardware your

1765
01:31:02,320 --> 01:31:03,600
software

1766
01:31:03,600 --> 01:31:06,960
networking so the aws make sure all your

1767
01:31:06,960 --> 01:31:10,400
services like your s3 or rds are secure

1768
01:31:10,400 --> 01:31:12,560
the second part is the security in the

1769
01:31:12,560 --> 01:31:14,000
cloud that's the customer's

1770
01:31:14,000 --> 01:31:16,639
responsibility so the customer has to

1771
01:31:16,639 --> 01:31:18,800
make sure they securely configure the

1772
01:31:18,800 --> 01:31:20,880
data that they are going to add into

1773
01:31:20,880 --> 01:31:23,520
these resources so they have to

1774
01:31:23,520 --> 01:31:24,719
configure

1775
01:31:24,719 --> 01:31:27,760
specified permissions for your iam users

1776
01:31:27,760 --> 01:31:29,280
provide strong

1777
01:31:29,280 --> 01:31:30,719
passwords and multi-factor

1778
01:31:30,719 --> 01:31:33,040
authentication when it comes to data

1779
01:31:33,040 --> 01:31:34,880
they should configure that your data is

1780
01:31:34,880 --> 01:31:36,880
always encrypted and not publicly

1781
01:31:36,880 --> 01:31:38,000
accessible

1782
01:31:38,000 --> 01:31:40,480
if we take one example for the shared

1783
01:31:40,480 --> 01:31:43,280
responsibility model in aws so if a

1784
01:31:43,280 --> 01:31:45,760
customer wants their rds that's their

1785
01:31:45,760 --> 01:31:47,760
relational database service to be only

1786
01:31:47,760 --> 01:31:50,159
connected to one vpc your virtual

1787
01:31:50,159 --> 01:31:52,400
private cloud so the customer should

1788
01:31:52,400 --> 01:31:54,800
configure this and the cloud service

1789
01:31:54,800 --> 01:31:57,520
provider will make sure that this rds is

1790
01:31:57,520 --> 01:31:59,600
always connected to only that particular

1791
01:31:59,600 --> 01:32:01,840
vpc

1792
01:32:01,840 --> 01:32:04,639
so when we speak about security there

1793
01:32:04,639 --> 01:32:06,719
there have been a lot of cases that have

1794
01:32:06,719 --> 01:32:08,800
come up in the headlines about cloud

1795
01:32:08,800 --> 01:32:10,560
security attacks

1796
01:32:10,560 --> 01:32:13,120
few of them are stated above so it is

1797
01:32:13,120 --> 01:32:16,560
found out that almost facebook lost 540

1798
01:32:16,560 --> 01:32:18,159
million records

1799
01:32:18,159 --> 01:32:20,080
this has happened because their s3

1800
01:32:20,080 --> 01:32:22,880
buckets were made public it is also seen

1801
01:32:22,880 --> 01:32:24,719
that whenever there's a cloud breach

1802
01:32:24,719 --> 01:32:27,600
happening almost 15 million us dollars

1803
01:32:27,600 --> 01:32:29,760
have been lost

1804
01:32:29,760 --> 01:32:32,080
there's one particular case that created

1805
01:32:32,080 --> 01:32:34,239
a lot of buzz and that especially piqued

1806
01:32:34,239 --> 01:32:35,440
our interest

1807
01:32:35,440 --> 01:32:36,639
it's of the

1808
01:32:36,639 --> 01:32:39,600
capital one's data breach it is found to

1809
01:32:39,600 --> 01:32:41,520
have been the biggest data breach till

1810
01:32:41,520 --> 01:32:43,760
date and it

1811
01:32:43,760 --> 01:32:46,400
so a hacker gained access to the bank

1812
01:32:46,400 --> 01:32:49,040
service of the capital one and he was

1813
01:32:49,040 --> 01:32:52,080
able to compromise almost 100 million

1814
01:32:52,080 --> 01:32:54,719
clients user user accounts and their

1815
01:32:54,719 --> 01:32:56,560
credit card details

1816
01:32:56,560 --> 01:32:58,719
so we'll talk about this particular

1817
01:32:58,719 --> 01:33:01,440
clear case in the next slides

1818
01:33:01,440 --> 01:33:04,320
as we saw that a lot of money as well as

1819
01:33:04,320 --> 01:33:06,239
data is being compromised because your

1820
01:33:06,239 --> 01:33:09,440
cloud is not secure we must find ways to

1821
01:33:09,440 --> 01:33:11,920
mitigate these kind of attacks

1822
01:33:11,920 --> 01:33:14,400
so the community has come up with a few

1823
01:33:14,400 --> 01:33:16,800
standards like your csa that's your

1824
01:33:16,800 --> 01:33:19,440
cloud security and alliance your iso

1825
01:33:19,440 --> 01:33:21,199
27017

1826
01:33:21,199 --> 01:33:23,440
and also says that's your center for

1827
01:33:23,440 --> 01:33:25,440
internet security

1828
01:33:25,440 --> 01:33:27,920
so we primarily use sys that's the

1829
01:33:27,920 --> 01:33:30,800
center for internet security in our

1830
01:33:30,800 --> 01:33:34,400
poc so sis is a non-profit entity that

1831
01:33:34,400 --> 01:33:36,639
provides us with best practice solutions

1832
01:33:36,639 --> 01:33:39,040
again any kind of cyber attacks

1833
01:33:39,040 --> 01:33:41,360
so sis provides us with a

1834
01:33:41,360 --> 01:33:43,600
benchmarks that are the recommendations

1835
01:33:43,600 --> 01:33:45,280
so these recommendations are the

1836
01:33:45,280 --> 01:33:48,159
baseline configurations on how to secure

1837
01:33:48,159 --> 01:33:49,600
your system

1838
01:33:49,600 --> 01:33:52,159
so the benchmarks have been divided into

1839
01:33:52,159 --> 01:33:54,320
three sections by cis that's your level

1840
01:33:54,320 --> 01:33:57,280
one level two and your stick

1841
01:33:57,280 --> 01:33:58,960
so the level one is your base

1842
01:33:58,960 --> 01:34:00,639
recommendations or the basic

1843
01:34:00,639 --> 01:34:03,199
requirements that are needed to securely

1844
01:34:03,199 --> 01:34:05,280
configures one system

1845
01:34:05,280 --> 01:34:06,320
the second

1846
01:34:06,320 --> 01:34:09,120
second level is your defense in depth so

1847
01:34:09,120 --> 01:34:10,239
these are

1848
01:34:10,239 --> 01:34:12,480
recommendations for organizations where

1849
01:34:12,480 --> 01:34:14,880
securities are paramount so if

1850
01:34:14,880 --> 01:34:17,440
compromise of security happens here

1851
01:34:17,440 --> 01:34:19,520
there will lead to a lot of adverse

1852
01:34:19,520 --> 01:34:21,920
effects in your organization

1853
01:34:21,920 --> 01:34:24,239
the third level is the stig level it's

1854
01:34:24,239 --> 01:34:26,719
basically the overlap of the both level

1855
01:34:26,719 --> 01:34:29,440
one and the level two

1856
01:34:29,440 --> 01:34:32,080
so we've primarily chosen sys as it's a

1857
01:34:32,080 --> 01:34:34,480
globally recognized entity that provides

1858
01:34:34,480 --> 01:34:36,960
us with regulated guidelines so the

1859
01:34:36,960 --> 01:34:39,760
customer finds more comfort that these

1860
01:34:39,760 --> 01:34:42,960
globally recognized entities being used

1861
01:34:42,960 --> 01:34:45,280
and it also provides

1862
01:34:45,280 --> 01:34:47,679
recommendations to many cutting-edge

1863
01:34:47,679 --> 01:34:50,719
technologies like your operating systems

1864
01:34:50,719 --> 01:34:52,159
your

1865
01:34:52,159 --> 01:34:54,320
cloud service providers and your

1866
01:34:54,320 --> 01:34:57,040
kubernetes and many more

1867
01:34:57,040 --> 01:34:59,520
so as our poc for today is about cloud

1868
01:34:59,520 --> 01:35:01,920
infrastructure we will move into sys for

1869
01:35:01,920 --> 01:35:03,760
cloud service providers

1870
01:35:03,760 --> 01:35:05,840
so cis4 cloud service providers

1871
01:35:05,840 --> 01:35:07,679
basically provides us with

1872
01:35:07,679 --> 01:35:10,080
recommendations on how to securely

1873
01:35:10,080 --> 01:35:12,320
configure a cloud account

1874
01:35:12,320 --> 01:35:15,119
it provides to many cloud platforms like

1875
01:35:15,119 --> 01:35:18,000
your microsoft azure your google cloud

1876
01:35:18,000 --> 01:35:20,400
platform and your aws that's your amazon

1877
01:35:20,400 --> 01:35:22,320
web service

1878
01:35:22,320 --> 01:35:23,199
so

1879
01:35:23,199 --> 01:35:26,960
cis for aws we let's move into cis4 aws

1880
01:35:26,960 --> 01:35:29,920
so the recommendations given by sys4 aws

1881
01:35:29,920 --> 01:35:32,159
have been divided into five sections

1882
01:35:32,159 --> 01:35:33,920
that's your identity and access

1883
01:35:33,920 --> 01:35:36,960
management storage logging monitoring

1884
01:35:36,960 --> 01:35:39,679
and the last one being networking

1885
01:35:39,679 --> 01:35:42,480
so in identity and access management

1886
01:35:42,480 --> 01:35:45,600
sys recommends you to provide strong

1887
01:35:45,600 --> 01:35:47,280
password policies multi-factor

1888
01:35:47,280 --> 01:35:48,719
authentication

1889
01:35:48,719 --> 01:35:50,320
and in your second part that's your

1890
01:35:50,320 --> 01:35:52,239
storage it recommends you to make sure

1891
01:35:52,239 --> 01:35:54,480
that your data is

1892
01:35:54,480 --> 01:35:57,040
encrypted and not publicly accessible in

1893
01:35:57,040 --> 01:35:58,960
logging and monitoring sys recommends

1894
01:35:58,960 --> 01:36:02,320
you to provide you with alarms and do

1895
01:36:02,320 --> 01:36:04,239
event tracking and also provide threat

1896
01:36:04,239 --> 01:36:05,600
intelligence

1897
01:36:05,600 --> 01:36:08,159
in the last part it's uh this recommends

1898
01:36:08,159 --> 01:36:10,960
you to on what traffic should be blocked

1899
01:36:10,960 --> 01:36:13,040
and what should be allowed into your

1900
01:36:13,040 --> 01:36:15,840
cloud environment

1901
01:36:15,840 --> 01:36:16,639
so

1902
01:36:16,639 --> 01:36:17,920
we'll take a

1903
01:36:17,920 --> 01:36:19,679
demo into practical attack into

1904
01:36:19,679 --> 01:36:22,480
consideration so we are going to take a

1905
01:36:22,480 --> 01:36:24,639
poorly configured s3 bucket as our

1906
01:36:24,639 --> 01:36:26,320
scenario here

1907
01:36:26,320 --> 01:36:29,360
so firstly s3 is the simple storage

1908
01:36:29,360 --> 01:36:31,760
service that's provided by aws to store

1909
01:36:31,760 --> 01:36:34,800
data so data or can be stored in the

1910
01:36:34,800 --> 01:36:37,199
form of files or objects in

1911
01:36:37,199 --> 01:36:40,159
files in the form of objects so these

1912
01:36:40,159 --> 01:36:43,360
objects are stored into your s3 buckets

1913
01:36:43,360 --> 01:36:45,920
so these objects can be hosted on any

1914
01:36:45,920 --> 01:36:48,560
website and the objects from the website

1915
01:36:48,560 --> 01:36:51,760
can be stored in to the object

1916
01:36:51,760 --> 01:36:54,159
files from the website can be stored as

1917
01:36:54,159 --> 01:36:56,880
objects into your s3 buckets so if you

1918
01:36:56,880 --> 01:36:59,840
poorly configure your s3 bucket a hacker

1919
01:36:59,840 --> 01:37:02,719
can gain easy access to this bucket and

1920
01:37:02,719 --> 01:37:05,199
access all your objects so let's look at

1921
01:37:05,199 --> 01:37:08,919
the demo for this

1922
01:37:20,159 --> 01:37:22,960
so i'm going to go to our deepama's demo

1923
01:37:22,960 --> 01:37:24,400
website

1924
01:37:24,400 --> 01:37:26,639
so what a layman would usually do is he

1925
01:37:26,639 --> 01:37:29,040
would just go through or the

1926
01:37:29,040 --> 01:37:30,719
website and check for the required

1927
01:37:30,719 --> 01:37:33,199
information and then close the website

1928
01:37:33,199 --> 01:37:36,000
and go but if you think from a hacker's

1929
01:37:36,000 --> 01:37:38,560
perspective he'll try to view the paid

1930
01:37:38,560 --> 01:37:41,040
source of it and try to find anything

1931
01:37:41,040 --> 01:37:42,960
interesting here so the page source

1932
01:37:42,960 --> 01:37:45,119
basically provides us with the html

1933
01:37:45,119 --> 01:37:46,960
source code

1934
01:37:46,960 --> 01:37:49,199
over here i'll try to find if any s3

1935
01:37:49,199 --> 01:37:51,679
buckets are found and bingo we seem to

1936
01:37:51,679 --> 01:37:55,199
have found an s3 bucket here

1937
01:37:55,199 --> 01:37:57,280
so when i click on this the

1938
01:37:57,280 --> 01:37:58,480
logo

1939
01:37:58,480 --> 01:38:01,280
pops up as your object here so according

1940
01:38:01,280 --> 01:38:04,239
to aws's naming convention first comes

1941
01:38:04,239 --> 01:38:06,239
the domain name

1942
01:38:06,239 --> 01:38:08,320
uh then comes your

1943
01:38:08,320 --> 01:38:10,400
bucket's name and then is your object's

1944
01:38:10,400 --> 01:38:11,840
name

1945
01:38:11,840 --> 01:38:12,880
so

1946
01:38:12,880 --> 01:38:14,560
i'll take this

1947
01:38:14,560 --> 01:38:16,480
bucket's name and see

1948
01:38:16,480 --> 01:38:20,638
if we can find something interesting

1949
01:38:24,000 --> 01:38:25,920
so over here i'm going to go into the

1950
01:38:25,920 --> 01:38:28,480
command line interface and according to

1951
01:38:28,480 --> 01:38:33,119
aws cli so aws s3 ls provides us with

1952
01:38:33,119 --> 01:38:35,119
the objects that are found in your s3

1953
01:38:35,119 --> 01:38:37,519
bucket

1954
01:38:37,679 --> 01:38:39,840
so over here we can see that it's not

1955
01:38:39,840 --> 01:38:42,639
just your logo.png that's found as the

1956
01:38:42,639 --> 01:38:45,520
object here there's also another

1957
01:38:45,520 --> 01:38:47,119
object that's your demo website

1958
01:38:47,119 --> 01:38:50,119
credentials.csv

1959
01:38:50,159 --> 01:38:51,840
so i'll just copy and

1960
01:38:51,840 --> 01:38:53,119
paste the

1961
01:38:53,119 --> 01:38:55,600
object name here and remove the logo.png

1962
01:38:55,600 --> 01:38:58,600
object

1963
01:38:58,719 --> 01:39:00,880
and it's seen that one file is getting

1964
01:39:00,880 --> 01:39:03,760
downloaded here

1965
01:39:04,719 --> 01:39:07,520
i'll just open this up csv file and see

1966
01:39:07,520 --> 01:39:10,320
what's inside

1967
01:39:11,600 --> 01:39:13,199
and it's seen that we are getting the

1968
01:39:13,199 --> 01:39:14,560
password the

1969
01:39:14,560 --> 01:39:17,360
access key secret access key here this

1970
01:39:17,360 --> 01:39:19,920
seems to have been the credentials of an

1971
01:39:19,920 --> 01:39:22,320
iam user so it's

1972
01:39:22,320 --> 01:39:24,159
it's found out that not just the s3

1973
01:39:24,159 --> 01:39:25,920
bucket but also the objects that are

1974
01:39:25,920 --> 01:39:28,080
present in your s3 bucket are

1975
01:39:28,080 --> 01:39:30,239
public here

1976
01:39:30,239 --> 01:39:32,800
just because of one per miscon

1977
01:39:32,800 --> 01:39:34,960
miss configuration

1978
01:39:34,960 --> 01:39:37,760
so sis provides us with recommendations

1979
01:39:37,760 --> 01:39:40,639
for these kind of attacks so sis

1980
01:39:40,639 --> 01:39:42,400
provides us with the recommendation by

1981
01:39:42,400 --> 01:39:45,040
providing the description rationale

1982
01:39:45,040 --> 01:39:47,679
audit and remediation so moving on to

1983
01:39:47,679 --> 01:39:49,760
the odd remediation

1984
01:39:49,760 --> 01:39:52,639
so sis wants to make wants us to make

1985
01:39:52,639 --> 01:39:54,719
sure that the block public access is

1986
01:39:54,719 --> 01:39:57,760
always enabled so by

1987
01:39:57,760 --> 01:39:59,920
enabling block public access your

1988
01:39:59,920 --> 01:40:02,320
objects as well as your s3 buckets are

1989
01:40:02,320 --> 01:40:03,360
not

1990
01:40:03,360 --> 01:40:06,480
public anymore so you move on to your

1991
01:40:06,480 --> 01:40:08,880
s3 buckets that public and go to the

1992
01:40:08,880 --> 01:40:11,520
configuration block public access and

1993
01:40:11,520 --> 01:40:14,080
over as seen in our s3 bucket it was

1994
01:40:14,080 --> 01:40:17,119
publicly access accessible

1995
01:40:17,119 --> 01:40:18,239
so

1996
01:40:18,239 --> 01:40:19,920
we move and

1997
01:40:19,920 --> 01:40:22,159
enable block public access so it's not

1998
01:40:22,159 --> 01:40:24,719
public anymore and save the changes

1999
01:40:24,719 --> 01:40:26,719
so you might ask what's the default

2000
01:40:26,719 --> 01:40:29,360
settings provided by aws for these kind

2001
01:40:29,360 --> 01:40:32,719
of cases so aws make sure by default

2002
01:40:32,719 --> 01:40:34,880
that your block public access is always

2003
01:40:34,880 --> 01:40:37,760
enabled but sometimes as we wanted to

2004
01:40:37,760 --> 01:40:38,800
show our

2005
01:40:38,800 --> 01:40:41,679
our logo.png that's our object

2006
01:40:41,679 --> 01:40:44,400
so we had to make that object public but

2007
01:40:44,400 --> 01:40:46,800
sometimes what developers do is they

2008
01:40:46,800 --> 01:40:48,800
don't just make the object public they

2009
01:40:48,800 --> 01:40:51,760
make the entire s3 bucket public so all

2010
01:40:51,760 --> 01:40:54,159
the objects that are present in that sd

2011
01:40:54,159 --> 01:40:57,759
bucket in turn becomes public

2012
01:40:59,280 --> 01:41:01,600
so now we saw

2013
01:41:01,600 --> 01:41:04,000
why it is important for us to make sure

2014
01:41:04,000 --> 01:41:06,560
your s3 bucket is private

2015
01:41:06,560 --> 01:41:09,360
let's look into few other cases such as

2016
01:41:09,360 --> 01:41:12,080
making sure your s3 bucket does not take

2017
01:41:12,080 --> 01:41:15,520
any request from http or making sure

2018
01:41:15,520 --> 01:41:18,239
your cloud tray logs are encrypted with

2019
01:41:18,239 --> 01:41:21,040
some sort of kms keys and then there are

2020
01:41:21,040 --> 01:41:23,679
around 56 plus cases that has been

2021
01:41:23,679 --> 01:41:26,400
recommended by sys which is very

2022
01:41:26,400 --> 01:41:28,320
important for you to make sure your

2023
01:41:28,320 --> 01:41:31,600
cloud infrastructure is as very secure

2024
01:41:31,600 --> 01:41:34,960
now let's look into few more cases let's

2025
01:41:34,960 --> 01:41:38,800
say your rds instance is public are your

2026
01:41:38,800 --> 01:41:42,000
security groups and ports are set open

2027
01:41:42,000 --> 01:41:45,679
are your ebs volumes snapshots are made

2028
01:41:45,679 --> 01:41:46,719
public

2029
01:41:46,719 --> 01:41:49,520
these cases are not found in your sys

2030
01:41:49,520 --> 01:41:52,639
benchmarks but are highly recommended to

2031
01:41:52,639 --> 01:41:55,760
make sure your cloud is secure this is

2032
01:41:55,760 --> 01:41:58,400
the reason why we should be going above

2033
01:41:58,400 --> 01:41:59,679
and beyond

2034
01:41:59,679 --> 01:42:02,960
standards to make sure your cloud is as

2035
01:42:02,960 --> 01:42:05,440
secure as possible

2036
01:42:05,440 --> 01:42:08,159
let's look into the capital one attack

2037
01:42:08,159 --> 01:42:10,960
and see what exactly happened there

2038
01:42:10,960 --> 01:42:14,000
so the capital one attack uh the

2039
01:42:14,000 --> 01:42:16,719
attacker was an ex-employee of capital

2040
01:42:16,719 --> 01:42:19,920
one uh they knew that this capital one

2041
01:42:19,920 --> 01:42:23,199
website was hosted on an ec2 instance

2042
01:42:23,199 --> 01:42:25,199
which had an open port

2043
01:42:25,199 --> 01:42:28,960
and the capital one website itself had a

2044
01:42:28,960 --> 01:42:32,320
ssrf vulnerability so this made the

2045
01:42:32,320 --> 01:42:36,320
attacker gain access to the ec2 metadata

2046
01:42:36,320 --> 01:42:39,199
service now this service allows you to

2047
01:42:39,199 --> 01:42:41,360
get access to the role that has been

2048
01:42:41,360 --> 01:42:43,600
attached to your ec2 instance

2049
01:42:43,600 --> 01:42:46,159
now this role can be attached to any

2050
01:42:46,159 --> 01:42:49,520
other aws service as well so in this

2051
01:42:49,520 --> 01:42:51,199
case the

2052
01:42:51,199 --> 01:42:53,679
sir the role was attached to an s3

2053
01:42:53,679 --> 01:42:56,880
bucket which allowed the attacker to get

2054
01:42:56,880 --> 01:42:59,840
access to the s3 bucket even though this

2055
01:42:59,840 --> 01:43:02,400
bucket was made private through this

2056
01:43:02,400 --> 01:43:04,400
role the attacker could get access to

2057
01:43:04,400 --> 01:43:07,679
the information which was compromised in

2058
01:43:07,679 --> 01:43:09,520
an overnight

2059
01:43:09,520 --> 01:43:12,480
let's look into another example where

2060
01:43:12,480 --> 01:43:15,119
you are you're making sure your rds

2061
01:43:15,119 --> 01:43:17,840
instance and your ec2 instance is only

2062
01:43:17,840 --> 01:43:21,280
accessible using one vpc network

2063
01:43:21,280 --> 01:43:23,199
let's say that

2064
01:43:23,199 --> 01:43:27,040
this rds instance is poorly configured

2065
01:43:27,040 --> 01:43:27,920
and

2066
01:43:27,920 --> 01:43:30,159
let's just say this uh

2067
01:43:30,159 --> 01:43:33,440
attacker knows and connection string or

2068
01:43:33,440 --> 01:43:36,880
the password for this rds instance

2069
01:43:36,880 --> 01:43:39,440
now if this ids instance is poorly

2070
01:43:39,440 --> 01:43:42,880
configured the attacker can easily get

2071
01:43:42,880 --> 01:43:44,880
access to the information or the

2072
01:43:44,880 --> 01:43:48,159
database present in your rds instance

2073
01:43:48,159 --> 01:43:51,600
let's look into this exactly how

2074
01:43:51,600 --> 01:43:54,080
this attack was actually

2075
01:43:54,080 --> 01:43:58,719
seen in a fortune 50 climb

2076
01:43:58,960 --> 01:44:00,880
i'm going to open my

2077
01:44:00,880 --> 01:44:03,040
sql server workbench

2078
01:44:03,040 --> 01:44:05,600
which allows me to connect to any rds

2079
01:44:05,600 --> 01:44:08,159
instance using a connection string

2080
01:44:08,159 --> 01:44:11,280
let's say i am the attacker here who can

2081
01:44:11,280 --> 01:44:13,199
be an x employee who knows this

2082
01:44:13,199 --> 01:44:16,480
connection string already

2083
01:44:17,440 --> 01:44:20,239
so it asks me to give a host name i'm

2084
01:44:20,239 --> 01:44:22,000
just going to copy paste the connection

2085
01:44:22,000 --> 01:44:23,840
string i already have

2086
01:44:23,840 --> 01:44:26,480
this also follows the amazon naming

2087
01:44:26,480 --> 01:44:27,760
convention

2088
01:44:27,760 --> 01:44:31,360
first being the rds instance second the

2089
01:44:31,360 --> 01:44:34,000
uh region and the third being the name

2090
01:44:34,000 --> 01:44:35,199
domain name

2091
01:44:35,199 --> 01:44:37,920
i'm going to keep this connection name

2092
01:44:37,920 --> 01:44:39,040
as

2093
01:44:39,040 --> 01:44:41,679
demo connection and try to connect to

2094
01:44:41,679 --> 01:44:43,920
this

2095
01:44:45,199 --> 01:44:47,360
it's going to ask me some

2096
01:44:47,360 --> 01:44:48,400
password

2097
01:44:48,400 --> 01:44:51,280
now if you haven't changed your password

2098
01:44:51,280 --> 01:44:54,639
or have kept it as a very predictable

2099
01:44:54,639 --> 01:44:57,920
one or a default one it is very easy to

2100
01:44:57,920 --> 01:45:01,520
get access to your rds instance

2101
01:45:01,520 --> 01:45:03,760
now you can see that

2102
01:45:03,760 --> 01:45:05,760
within seconds or minutes i'll be able

2103
01:45:05,760 --> 01:45:09,920
to get into the rds instance

2104
01:45:09,920 --> 01:45:11,440
and um

2105
01:45:11,440 --> 01:45:12,400
voila

2106
01:45:12,400 --> 01:45:15,199
you can see there is one database in

2107
01:45:15,199 --> 01:45:17,760
this rds instance now

2108
01:45:17,760 --> 01:45:21,119
if this was a connection string to an

2109
01:45:21,119 --> 01:45:23,520
multinational company organization they

2110
01:45:23,520 --> 01:45:26,639
would have had multiple databases

2111
01:45:26,639 --> 01:45:30,320
millions of tables and a lot of you

2112
01:45:30,320 --> 01:45:33,040
information in each of these tables

2113
01:45:33,040 --> 01:45:33,840
now

2114
01:45:33,840 --> 01:45:37,679
i can just click on to this database

2115
01:45:37,679 --> 01:45:40,320
and see there are few tables

2116
01:45:40,320 --> 01:45:42,239
and i'm just going to try looking to one

2117
01:45:42,239 --> 01:45:46,159
of these tables and see what it has

2118
01:45:47,520 --> 01:45:48,400
so

2119
01:45:48,400 --> 01:45:50,960
this employee table seems to have few of

2120
01:45:50,960 --> 01:45:54,320
the personal informations of employees

2121
01:45:54,320 --> 01:45:56,239
i can easily even

2122
01:45:56,239 --> 01:45:59,280
change the uh data present here

2123
01:45:59,280 --> 01:46:02,320
or i can delete this

2124
01:46:02,320 --> 01:46:05,119
or even delete the entire database for

2125
01:46:05,119 --> 01:46:08,639
an instance with just a click

2126
01:46:09,760 --> 01:46:11,840
so you can see

2127
01:46:11,840 --> 01:46:14,560
this is how easy it is

2128
01:46:14,560 --> 01:46:17,600
to make sure your rds is easily

2129
01:46:17,600 --> 01:46:18,880
detectable

2130
01:46:18,880 --> 01:46:21,119
now

2131
01:46:22,480 --> 01:46:25,360
this all could have been prevented if

2132
01:46:25,360 --> 01:46:26,400
you had

2133
01:46:26,400 --> 01:46:28,719
just gone to your radius instance and

2134
01:46:28,719 --> 01:46:31,760
make sure your connectivity settings has

2135
01:46:31,760 --> 01:46:33,600
an additional in

2136
01:46:33,600 --> 01:46:36,080
configurations called as not publicly

2137
01:46:36,080 --> 01:46:38,880
accessible now if you had turned this on

2138
01:46:38,880 --> 01:46:40,800
it wouldn't have been possible for

2139
01:46:40,800 --> 01:46:43,840
anyone to uh or access the sardius

2140
01:46:43,840 --> 01:46:45,600
instance

2141
01:46:45,600 --> 01:46:48,800
usually by default this is not publicly

2142
01:46:48,800 --> 01:46:52,560
accessible nowadays uh due to pandemic

2143
01:46:52,560 --> 01:46:54,719
most of the employees tend to work from

2144
01:46:54,719 --> 01:46:57,679
home and will not be able to access this

2145
01:46:57,679 --> 01:47:00,000
rds instance because it is not in your

2146
01:47:00,000 --> 01:47:03,040
vpc if you want it to be

2147
01:47:03,040 --> 01:47:04,000
public

2148
01:47:04,000 --> 01:47:07,360
accessed beyond the vpc network then it

2149
01:47:07,360 --> 01:47:10,320
should be publicly accessible the devops

2150
01:47:10,320 --> 01:47:12,639
engineers just make it publicly

2151
01:47:12,639 --> 01:47:16,159
accessible uh to make it make it their

2152
01:47:16,159 --> 01:47:17,440
work easy

2153
01:47:17,440 --> 01:47:18,560
and uh

2154
01:47:18,560 --> 01:47:20,840
which is not recommended

2155
01:47:20,840 --> 01:47:24,159
basically so to

2156
01:47:24,159 --> 01:47:26,960
you know tackle all of these problems

2157
01:47:26,960 --> 01:47:28,560
that we face in your cloud

2158
01:47:28,560 --> 01:47:31,040
infrastructure we have come up with our

2159
01:47:31,040 --> 01:47:33,679
own approach to create a powerful

2160
01:47:33,679 --> 01:47:36,960
monitoring tool that automated

2161
01:47:36,960 --> 01:47:38,880
automatically detects the mis

2162
01:47:38,880 --> 01:47:40,880
configurations present in your cloud

2163
01:47:40,880 --> 01:47:42,159
infrastructure

2164
01:47:42,159 --> 01:47:44,960
it only focuses on your cloud

2165
01:47:44,960 --> 01:47:47,440
infrastructure and nothing about the web

2166
01:47:47,440 --> 01:47:51,440
api or the api security part of it

2167
01:47:51,440 --> 01:47:54,719
what we have done is compiled cases that

2168
01:47:54,719 --> 01:47:57,360
are cis recommended and the cases that

2169
01:47:57,360 --> 01:48:01,199
go above and beyond cis which uh

2170
01:48:01,199 --> 01:48:03,280
we have compiled this to

2171
01:48:03,280 --> 01:48:06,080
create a monitoring tool that majorly

2172
01:48:06,080 --> 01:48:09,440
looks into five sections that is iam

2173
01:48:09,440 --> 01:48:11,760
blogging monitoring storage and

2174
01:48:11,760 --> 01:48:15,520
networking so these uh sections and it

2175
01:48:15,520 --> 01:48:18,560
produces three major solutions one being

2176
01:48:18,560 --> 01:48:21,360
a summary dashboard second a detailed

2177
01:48:21,360 --> 01:48:24,639
report and the third being a csv file so

2178
01:48:24,639 --> 01:48:26,639
the summary dashboard looks into the

2179
01:48:26,639 --> 01:48:29,920
statistical details and overall security

2180
01:48:29,920 --> 01:48:32,880
posture of your club the second the

2181
01:48:32,880 --> 01:48:35,679
detailed report will tell you why and

2182
01:48:35,679 --> 01:48:37,760
how and where exactly

2183
01:48:37,760 --> 01:48:39,719
it went wrong and pinpoints to the

2184
01:48:39,719 --> 01:48:42,560
misconfiguration present for you to

2185
01:48:42,560 --> 01:48:45,440
configure it properly easily

2186
01:48:45,440 --> 01:48:48,320
so the third is a csv file which can be

2187
01:48:48,320 --> 01:48:51,760
easily fed into other uh tools such as

2188
01:48:51,760 --> 01:48:54,639
jira or jenkins or any other tracking

2189
01:48:54,639 --> 01:48:55,840
tool

2190
01:48:55,840 --> 01:48:58,400
so this tool looks into

2191
01:48:58,400 --> 01:49:00,480
detects misconfiguration

2192
01:49:00,480 --> 01:49:04,960
in your aws services such as s3 ec2 and

2193
01:49:04,960 --> 01:49:09,040
many other services it takes boto3 sdk

2194
01:49:09,040 --> 01:49:10,159
for

2195
01:49:10,159 --> 01:49:12,880
which you used for connecting to your

2196
01:49:12,880 --> 01:49:14,400
aws account

2197
01:49:14,400 --> 01:49:17,840
and as of now we are able to scan for 60

2198
01:49:17,840 --> 01:49:20,880
plus miss configurations and

2199
01:49:20,880 --> 01:49:23,040
report the same

2200
01:49:23,040 --> 01:49:25,360
so let's look into our demo on how our

2201
01:49:25,360 --> 01:49:28,679
tool works

2202
01:49:29,520 --> 01:49:32,159
we have tried to make it as easy as

2203
01:49:32,159 --> 01:49:35,199
possible all you need to do is configure

2204
01:49:35,199 --> 01:49:36,560
to your

2205
01:49:36,560 --> 01:49:38,960
aws

2206
01:49:38,960 --> 01:49:41,679
account using aws configure

2207
01:49:41,679 --> 01:49:44,639
it's it's usually ask you to give an

2208
01:49:44,639 --> 01:49:45,760
access

2209
01:49:45,760 --> 01:49:48,480
access key id secret key id

2210
01:49:48,480 --> 01:49:49,520
and

2211
01:49:49,520 --> 01:49:51,920
other information i've already fed into

2212
01:49:51,920 --> 01:49:53,920
it so i'm just going to click away it

2213
01:49:53,920 --> 01:49:56,800
asks you to give a region name and the

2214
01:49:56,800 --> 01:49:59,280
default output option so i'm just going

2215
01:49:59,280 --> 01:50:02,080
to keep it as json now all you need to

2216
01:50:02,080 --> 01:50:04,080
do is

2217
01:50:04,080 --> 01:50:07,119
run a main python file which is in one

2218
01:50:07,119 --> 01:50:08,880
of this location i'm just going to copy

2219
01:50:08,880 --> 01:50:11,840
paste here

2220
01:50:12,880 --> 01:50:15,440
python

2221
01:50:22,080 --> 01:50:23,920
so you can see that the scan has been

2222
01:50:23,920 --> 01:50:25,440
initiated

2223
01:50:25,440 --> 01:50:28,080
it will take some time to run

2224
01:50:28,080 --> 01:50:30,320
by then we will look into the setup and

2225
01:50:30,320 --> 01:50:34,519
configurations of our tool

2226
01:50:38,239 --> 01:50:40,560
so to configure as mighty said we have

2227
01:50:40,560 --> 01:50:43,199
to do aws configure so the credentials

2228
01:50:43,199 --> 01:50:44,960
that have been taken here is the

2229
01:50:44,960 --> 01:50:48,400
security audit credentials so the audit

2230
01:50:48,400 --> 01:50:50,639
security audit credentials basically

2231
01:50:50,639 --> 01:50:52,960
means that we are only take provided

2232
01:50:52,960 --> 01:50:55,920
with permissions to scan and check the

2233
01:50:55,920 --> 01:50:58,400
aws account we have no access to the

2234
01:50:58,400 --> 01:51:01,599
data present in the client's aws account

2235
01:51:01,599 --> 01:51:03,679
so after taking the security audit

2236
01:51:03,679 --> 01:51:06,960
credentials we run this on our cloud and

2237
01:51:06,960 --> 01:51:09,040
provide you with the three output

2238
01:51:09,040 --> 01:51:10,480
results

2239
01:51:10,480 --> 01:51:13,119
so as of now we have 60 cases that have

2240
01:51:13,119 --> 01:51:16,239
been implemented and for the future we

2241
01:51:16,239 --> 01:51:18,480
want to make sure we add even more such

2242
01:51:18,480 --> 01:51:20,719
cases that provide us

2243
01:51:20,719 --> 01:51:22,440
threat intel to such

2244
01:51:22,440 --> 01:51:24,960
misconfigurations found in our aws cloud

2245
01:51:24,960 --> 01:51:27,440
environment we would also like to span

2246
01:51:27,440 --> 01:51:30,000
across other cloud platforms like google

2247
01:51:30,000 --> 01:51:32,719
cloud platform microsoft microsoft azure

2248
01:51:32,719 --> 01:51:34,639
and many more

2249
01:51:34,639 --> 01:51:36,800
so

2250
01:51:37,280 --> 01:51:40,400
let's see if our tool has run by now um

2251
01:51:40,400 --> 01:51:42,080
i think it's going to take a little bit

2252
01:51:42,080 --> 01:51:43,360
more time

2253
01:51:43,360 --> 01:51:45,440
uh in the best interest of time i

2254
01:51:45,440 --> 01:51:47,199
actually ran this before our

2255
01:51:47,199 --> 01:51:50,239
presentation to show you the outcome

2256
01:51:50,239 --> 01:51:54,280
all i need to do is

2257
01:52:07,520 --> 01:52:10,960
so this is how our dashboard looks it

2258
01:52:10,960 --> 01:52:13,920
scans and tells you the total number of

2259
01:52:13,920 --> 01:52:14,960
cases

2260
01:52:14,960 --> 01:52:18,800
that the tool has run it mentions the

2261
01:52:18,800 --> 01:52:21,360
our total failed cases that have

2262
01:52:21,360 --> 01:52:23,119
misconfigurations

2263
01:52:23,119 --> 01:52:25,679
the number of cases that passed and the

2264
01:52:25,679 --> 01:52:28,159
number of cases that couldn't be scanned

2265
01:52:28,159 --> 01:52:30,400
mainly because we don't have

2266
01:52:30,400 --> 01:52:33,199
enough authorizations to look into the

2267
01:52:33,199 --> 01:52:35,599
configurations of any service

2268
01:52:35,599 --> 01:52:39,199
it also looks into the severity or in

2269
01:52:39,199 --> 01:52:42,480
different sections that is im storage

2270
01:52:42,480 --> 01:52:45,280
logging it also mentions the total

2271
01:52:45,280 --> 01:52:47,599
number of resources that were scanned

2272
01:52:47,599 --> 01:52:49,119
from the aws

2273
01:52:49,119 --> 01:52:52,320
uh currently there were around 315 in

2274
01:52:52,320 --> 01:52:53,360
our

2275
01:52:53,360 --> 01:52:57,679
account and it looks into the iam users

2276
01:52:57,679 --> 01:53:01,599
ec2 instances or the alarms vpc and

2277
01:53:01,599 --> 01:53:05,119
other 16 other services in total

2278
01:53:05,119 --> 01:53:08,800
uh it also shows a vulnerability and

2279
01:53:08,800 --> 01:53:11,679
chart it gives you an overall uh

2280
01:53:11,679 --> 01:53:14,239
security posture view of your cloud

2281
01:53:14,239 --> 01:53:15,679
infrastructure

2282
01:53:15,679 --> 01:53:18,880
from each scan to scan it can

2283
01:53:18,880 --> 01:53:21,679
take up to last 21 scans

2284
01:53:21,679 --> 01:53:23,920
can be shown on this

2285
01:53:23,920 --> 01:53:25,520
thing

2286
01:53:25,520 --> 01:53:28,239
lastly it also shows a detailed report

2287
01:53:28,239 --> 01:53:32,320
into where uh the problem lies if it is

2288
01:53:32,320 --> 01:53:35,599
it's a failed case it shows the uh case

2289
01:53:35,599 --> 01:53:37,599
that has been scanned and the service

2290
01:53:37,599 --> 01:53:40,639
for it if this has been a fail case it

2291
01:53:40,639 --> 01:53:43,599
also gives you a small notes on where

2292
01:53:43,599 --> 01:53:45,679
exactly it went wrong and

2293
01:53:45,679 --> 01:53:50,000
where you should focus your efforts on

2294
01:53:52,159 --> 01:53:55,199
so this was just our uh backup slides

2295
01:53:55,199 --> 01:53:58,879
for now just in case it didn't run

2296
01:53:59,520 --> 01:54:02,080
so to summarize our entire presentation

2297
01:54:02,080 --> 01:54:04,800
today we first spoke about web

2298
01:54:04,800 --> 01:54:07,040
application securities for the web apps

2299
01:54:07,040 --> 01:54:08,560
that are deployed into our cloud

2300
01:54:08,560 --> 01:54:09,760
environment

2301
01:54:09,760 --> 01:54:12,000
we saw how the web apps

2302
01:54:12,000 --> 01:54:14,320
api and the portals are securely

2303
01:54:14,320 --> 01:54:17,199
configured using sdlc and

2304
01:54:17,199 --> 01:54:18,719
secure scrum

2305
01:54:18,719 --> 01:54:20,239
but we saw how

2306
01:54:20,239 --> 01:54:22,320
cloud infrastructure security is an

2307
01:54:22,320 --> 01:54:25,360
after neglected topic and how it has a

2308
01:54:25,360 --> 01:54:28,080
larger threat surface for exploitation

2309
01:54:28,080 --> 01:54:30,880
exploitation especially in mid-size and

2310
01:54:30,880 --> 01:54:33,280
small size businesses as

2311
01:54:33,280 --> 01:54:35,760
more workforce cannot be

2312
01:54:35,760 --> 01:54:37,679
employed for this reason

2313
01:54:37,679 --> 01:54:40,320
we saw that manual evaluation is not

2314
01:54:40,320 --> 01:54:42,800
practical for such kind of

2315
01:54:42,800 --> 01:54:45,920
scenarios hence we need automation

2316
01:54:45,920 --> 01:54:48,080
we saw the different uh industry

2317
01:54:48,080 --> 01:54:50,880
standards like cis benchmarks your csas

2318
01:54:50,880 --> 01:54:53,040
that can be used and we also saw how we

2319
01:54:53,040 --> 01:54:55,360
have to go above and beyond this

2320
01:54:55,360 --> 01:54:57,360
benchmarks and

2321
01:54:57,360 --> 01:54:59,840
we also showed our tool that that was

2322
01:54:59,840 --> 01:55:03,360
taken for aws as our poc and we showed

2323
01:55:03,360 --> 01:55:05,520
you the three output files

2324
01:55:05,520 --> 01:55:07,280
so thank you and

2325
01:55:07,280 --> 01:55:11,119
the floor is now open for questions

2326
01:55:16,719 --> 01:55:19,840
okay do we have any questions

2327
01:55:20,400 --> 01:55:21,760
maybe

2328
01:55:21,760 --> 01:55:23,520
come on

2329
01:55:23,520 --> 01:55:25,679
someone has to be first

2330
01:55:25,679 --> 01:55:27,679
charge

2331
01:55:27,679 --> 01:55:28,800
no

2332
01:55:28,800 --> 01:55:31,199
are you sure are you tired

2333
01:55:31,199 --> 01:55:33,199
are you guys tired

2334
01:55:33,199 --> 01:55:34,880
everybody's silent

2335
01:55:34,880 --> 01:55:38,560
okay no questions

2336
01:55:38,880 --> 01:55:40,400
yeah everything was crystal clear then

2337
01:55:40,400 --> 01:55:41,920
yet again thank you so much for your

2338
01:55:41,920 --> 01:55:44,920
presentation

2339
01:55:46,960 --> 01:55:49,920
okay so i have uh have a few uh

2340
01:55:49,920 --> 01:55:51,520
things to announce we're gonna have

2341
01:55:51,520 --> 01:55:53,440
lunch that's good uh but we have one

2342
01:55:53,440 --> 01:55:55,199
more talk before lunch as you guys know

2343
01:55:55,199 --> 01:55:57,760
in the schedule this should be updated

2344
01:55:57,760 --> 01:56:00,320
so um but we have a problem we need more

2345
01:56:00,320 --> 01:56:01,920
answers to the

2346
01:56:01,920 --> 01:56:04,320
wrong answers panel

2347
01:56:04,320 --> 01:56:06,159
so you have to

2348
01:56:06,159 --> 01:56:07,360
help us out

2349
01:56:07,360 --> 01:56:09,920
otherwise it will be a very short panel

2350
01:56:09,920 --> 01:56:10,800
so

2351
01:56:10,800 --> 01:56:12,719
you have to go and

2352
01:56:12,719 --> 01:56:14,480
ask your question

2353
01:56:14,480 --> 01:56:16,320
under the hashtag

2354
01:56:16,320 --> 01:56:18,480
securityfest panel

2355
01:56:18,480 --> 01:56:20,639
so that we can sort of

2356
01:56:20,639 --> 01:56:22,960
compile a list of them and do them on

2357
01:56:22,960 --> 01:56:26,239
the actual panel so you use twitter use

2358
01:56:26,239 --> 01:56:27,360
the

2359
01:56:27,360 --> 01:56:28,960
securitypanel

2360
01:56:28,960 --> 01:56:31,599
ask your question like

2361
01:56:31,599 --> 01:56:33,360
denial of service is always the best

2362
01:56:33,360 --> 01:56:34,400
thing why

2363
01:56:34,400 --> 01:56:36,320
or something and we will we will come up

2364
01:56:36,320 --> 01:56:38,320
with the most ridiculous answer

2365
01:56:38,320 --> 01:56:40,000
ever it's pretty fun

2366
01:56:40,000 --> 01:56:42,400
uh we will um yeah this is actually

2367
01:56:42,400 --> 01:56:44,800
shortened down now cool so um the panel

2368
01:56:44,800 --> 01:56:46,560
will be the last thing that we do and

2369
01:56:46,560 --> 01:56:48,400
then we will have the ctf awards and

2370
01:56:48,400 --> 01:56:50,480
then wrap up the conference

2371
01:56:50,480 --> 01:56:53,360
um yeah and we do have some time now

2372
01:56:53,360 --> 01:56:55,360
before the next talk so if you want to

2373
01:56:55,360 --> 01:56:56,880
grab a coffee or something you can do

2374
01:56:56,880 --> 01:56:58,800
that as well

2375
01:56:58,800 --> 01:57:01,800
charge

2376
01:57:15,200 --> 01:58:22,639
[Music]

2377
01:58:26,080 --> 01:58:29,080
so

2378
01:58:32,640 --> 01:58:39,040
[Music]

2379
01:58:39,040 --> 01:58:42,040
so

2380
01:58:44,980 --> 01:58:48,089
[Music]

2381
01:58:51,210 --> 01:58:56,420
[Music]

2382
01:59:07,450 --> 01:59:10,599
[Music]

2383
01:59:11,360 --> 01:59:14,360
so

2384
01:59:15,690 --> 01:59:21,110
[Music]

2385
02:38:14,240 --> 02:38:16,720
solutions to different problems

2386
02:38:16,720 --> 02:38:18,960
i also organize a bug bounty meetup in

2387
02:38:18,960 --> 02:38:20,160
israel

2388
02:38:20,160 --> 02:38:22,000
so it's fun it's uh

2389
02:38:22,000 --> 02:38:24,000
collaborating all day hackers and

2390
02:38:24,000 --> 02:38:26,000
security engineers from all different

2391
02:38:26,000 --> 02:38:28,640
companies have the way to communicate

2392
02:38:28,640 --> 02:38:31,040
together and find a common target and

2393
02:38:31,040 --> 02:38:32,720
this is a very good way of knowledge

2394
02:38:32,720 --> 02:38:34,000
sharing

2395
02:38:34,000 --> 02:38:36,399
and i'm just like since 2002 hacking

2396
02:38:36,399 --> 02:38:38,319
stuff building

2397
02:38:38,319 --> 02:38:40,640
from production plants vehicles web

2398
02:38:40,640 --> 02:38:41,680
banks

2399
02:38:41,680 --> 02:38:44,319
whatever you need to hack i can hack i

2400
02:38:44,319 --> 02:38:46,720
don't do physical one time i was asked

2401
02:38:46,720 --> 02:38:50,720
to do physical i didn't go well

2402
02:38:50,720 --> 02:38:52,160
so today i will talk about package

2403
02:38:52,160 --> 02:38:55,920
managers like package runners are fun

2404
02:38:55,920 --> 02:38:58,319
interesting but i want to go into old

2405
02:38:58,319 --> 02:38:59,280
school

2406
02:38:59,280 --> 02:39:00,560
before i want to go into old school i

2407
02:39:00,560 --> 02:39:02,560
want to under to explain about a bit

2408
02:39:02,560 --> 02:39:04,800
what package managers is and package

2409
02:39:04,800 --> 02:39:06,720
managers from wikipedia

2410
02:39:06,720 --> 02:39:08,720
you can see it's a collection of

2411
02:39:08,720 --> 02:39:10,560
software tools that automate the

2412
02:39:10,560 --> 02:39:14,479
installing and upgrading uh software but

2413
02:39:14,479 --> 02:39:16,479
as you can see wikipedia says it's a

2414
02:39:16,479 --> 02:39:18,160
consistent model and this is what's

2415
02:39:18,160 --> 02:39:19,760
important over here because the

2416
02:39:19,760 --> 02:39:22,000
definition of wikipedia is always right

2417
02:39:22,000 --> 02:39:24,800
or they always tend to be they want to

2418
02:39:24,800 --> 02:39:27,359
be right but sometimes the fact is that

2419
02:39:27,359 --> 02:39:30,160
it doesn't so i want to show you if it

2420
02:39:30,160 --> 02:39:31,760
is really consistent or not in this

2421
02:39:31,760 --> 02:39:33,359
presentation

2422
02:39:33,359 --> 02:39:36,319
so in the old days i used get right this

2423
02:39:36,319 --> 02:39:38,640
was a download manager not a package

2424
02:39:38,640 --> 02:39:40,720
manager it downloaded files and it was

2425
02:39:40,720 --> 02:39:41,760
very

2426
02:39:41,760 --> 02:39:44,319
easy to use it just like whatever i

2427
02:39:44,319 --> 02:39:46,720
wanted to download it to my computer and

2428
02:39:46,720 --> 02:39:49,359
then i had different options to

2429
02:39:49,359 --> 02:39:51,280
shut down to disconnect from the

2430
02:39:51,280 --> 02:39:52,880
internet because i was built by the

2431
02:39:52,880 --> 02:39:53,920
minute

2432
02:39:53,920 --> 02:39:56,080
and different like options uh

2433
02:39:56,080 --> 02:39:58,640
that in the past i don't know who now

2434
02:39:58,640 --> 02:40:01,040
disconnects from the internet

2435
02:40:01,040 --> 02:40:02,399
but today

2436
02:40:02,399 --> 02:40:04,319
most of the systems you have like you

2437
02:40:04,319 --> 02:40:07,200
want to install uh let's say a dragon's

2438
02:40:07,200 --> 02:40:09,520
package you just paper install dragons

2439
02:40:09,520 --> 02:40:11,600
or you do just npm install and you don't

2440
02:40:11,600 --> 02:40:13,760
know what's happening behind the package

2441
02:40:13,760 --> 02:40:15,840
managers do lots of stuff they download

2442
02:40:15,840 --> 02:40:17,439
they install they

2443
02:40:17,439 --> 02:40:20,080
run different types of scripts and this

2444
02:40:20,080 --> 02:40:22,800
is why package managers are very easy to

2445
02:40:22,800 --> 02:40:24,880
use as a developer but very hard to

2446
02:40:24,880 --> 02:40:27,040
secure as a security engineer

2447
02:40:27,040 --> 02:40:29,120
and this is like if i want to install

2448
02:40:29,120 --> 02:40:31,920
one package but when i download a repo

2449
02:40:31,920 --> 02:40:34,399
from the internet or a repo from

2450
02:40:34,399 --> 02:40:36,000
my developer

2451
02:40:36,000 --> 02:40:38,720
source code i just run paper install dot

2452
02:40:38,720 --> 02:40:41,040
or npm install or bundle install and

2453
02:40:41,040 --> 02:40:42,960
everything happens automatically it

2454
02:40:42,960 --> 02:40:45,680
downloads everything is that is needed

2455
02:40:45,680 --> 02:40:47,279
and

2456
02:40:47,279 --> 02:40:49,200
i don't really know what's happening

2457
02:40:49,200 --> 02:40:50,399
over there

2458
02:40:50,399 --> 02:40:52,080
but first of all how does a package look

2459
02:40:52,080 --> 02:40:53,120
like

2460
02:40:53,120 --> 02:40:56,000
so i took a very basic package and

2461
02:40:56,000 --> 02:40:57,840
actually i looked in google search for

2462
02:40:57,840 --> 02:41:00,479
most useless packages

2463
02:41:00,479 --> 02:41:03,200
in the world so i found is number and

2464
02:41:03,200 --> 02:41:06,319
this number is a package that has 250

2465
02:41:06,319 --> 02:41:07,279
million

2466
02:41:07,279 --> 02:41:09,359
downloads per month

2467
02:41:09,359 --> 02:41:10,080
and

2468
02:41:10,080 --> 02:41:12,399
3.9 giga downloads i don't know what's a

2469
02:41:12,399 --> 02:41:13,920
 download but

2470
02:41:13,920 --> 02:41:16,160
it has and github but they say it's uh i

2471
02:41:16,160 --> 02:41:17,439
think they

2472
02:41:17,439 --> 02:41:19,600
had a mistake in civilians

2473
02:41:19,600 --> 02:41:21,600
and this is the code of the package it

2474
02:41:21,600 --> 02:41:22,960
does

2475
02:41:22,960 --> 02:41:25,040
actually nothing like it just checks if

2476
02:41:25,040 --> 02:41:28,240
is a number but most packages

2477
02:41:28,240 --> 02:41:30,240
and if it's a direct dependencies or

2478
02:41:30,240 --> 02:41:32,640
transitive dependency use

2479
02:41:32,640 --> 02:41:35,279
these kind of packages which are

2480
02:41:35,279 --> 02:41:36,800
maintained by

2481
02:41:36,800 --> 02:41:39,359
someone they are maintained by someone

2482
02:41:39,359 --> 02:41:40,399
out there

2483
02:41:40,399 --> 02:41:42,640
we don't know him and this is why the

2484
02:41:42,640 --> 02:41:46,240
openssf created like a project to

2485
02:41:46,240 --> 02:41:48,640
see how secure is that package

2486
02:41:48,640 --> 02:41:51,600
and if you can see it got a scope 4.8

2487
02:41:51,600 --> 02:41:54,000
it's not maintained nobody touched this

2488
02:41:54,000 --> 02:41:56,640
package for five years now

2489
02:41:56,640 --> 02:41:58,319
there's no code review there's no best

2490
02:41:58,319 --> 02:42:01,200
practices there's no branch protection

2491
02:42:01,200 --> 02:42:03,920
there is different like pin dependencies

2492
02:42:03,920 --> 02:42:05,200
and license

2493
02:42:05,200 --> 02:42:08,000
and the binary artifacts there are but

2494
02:42:08,000 --> 02:42:09,520
as for

2495
02:42:09,520 --> 02:42:11,840
if this package is maintained nobody

2496
02:42:11,840 --> 02:42:14,160
knows and it's some random guy

2497
02:42:14,160 --> 02:42:16,479
out there and i don't know who maintains

2498
02:42:16,479 --> 02:42:20,080
this even but usually i think my package

2499
02:42:20,080 --> 02:42:21,200
my my

2500
02:42:21,200 --> 02:42:23,520
service will use it

2501
02:42:23,520 --> 02:42:25,920
so the question is if this maintainer or

2502
02:42:25,920 --> 02:42:28,800
if someone will change this package

2503
02:42:28,800 --> 02:42:32,640
and just add this two lines like a spawn

2504
02:42:32,640 --> 02:42:34,160
hack system and everybody knows that

2505
02:42:34,160 --> 02:42:37,439
hack system hacks the system so

2506
02:42:37,439 --> 02:42:39,840
if it just changes it what will happen

2507
02:42:39,840 --> 02:42:40,800
is

2508
02:42:40,800 --> 02:42:43,120
my packages will start like

2509
02:42:43,120 --> 02:42:45,200
packages that rely on it and other

2510
02:42:45,200 --> 02:42:46,880
services the line it will start getting

2511
02:42:46,880 --> 02:42:48,319
hacked

2512
02:42:48,319 --> 02:42:50,479
and i can show you who can change this

2513
02:42:50,479 --> 02:42:53,200
package so first of all the maintainer

2514
02:42:53,200 --> 02:42:55,840
and we saw there was

2515
02:42:55,840 --> 02:42:58,160
an open source maintainer they

2516
02:42:58,160 --> 02:43:00,399
had colors and he

2517
02:43:00,399 --> 02:43:02,399
got mad at someone i don't remember what

2518
02:43:02,399 --> 02:43:04,160
happened and he just like pulled the

2519
02:43:04,160 --> 02:43:07,680
plug and the colors deleted it or just

2520
02:43:07,680 --> 02:43:08,880
upgraded it to something that doesn't

2521
02:43:08,880 --> 02:43:11,040
happen and do you start seeing builds

2522
02:43:11,040 --> 02:43:13,040
all over the world starting getting

2523
02:43:13,040 --> 02:43:15,439
failed just because this one maintainer

2524
02:43:15,439 --> 02:43:16,800
changed something

2525
02:43:16,800 --> 02:43:19,279
another we have hackers if someone hacks

2526
02:43:19,279 --> 02:43:22,800
into core rc or ua parks or js that

2527
02:43:22,800 --> 02:43:24,319
happened

2528
02:43:24,319 --> 02:43:27,040
and had crypto mining then

2529
02:43:27,040 --> 02:43:29,200
you can they can hack they can if

2530
02:43:29,200 --> 02:43:31,520
there's no 2fa for this user they can

2531
02:43:31,520 --> 02:43:33,120
just hack their password usually you can

2532
02:43:33,120 --> 02:43:35,120
get the maintainer email and then find

2533
02:43:35,120 --> 02:43:36,880
it on

2534
02:43:36,880 --> 02:43:38,000
was this

2535
02:43:38,000 --> 02:43:40,800
have i been owned and just like go and

2536
02:43:40,800 --> 02:43:42,800
get the passwords from them

2537
02:43:42,800 --> 02:43:45,760
so now npm started like enforcing 2fa

2538
02:43:45,760 --> 02:43:48,479
for popular packages so it won't happen

2539
02:43:48,479 --> 02:43:50,479
but still

2540
02:43:50,479 --> 02:43:52,399
and i'm giving a lot of examples from

2541
02:43:52,399 --> 02:43:54,720
npm but it happens also on

2542
02:43:54,720 --> 02:43:56,880
python repositories and maven it happens

2543
02:43:56,880 --> 02:43:59,040
everywhere just like npm was in focus

2544
02:43:59,040 --> 02:44:01,279
this year and this is why most of the

2545
02:44:01,279 --> 02:44:03,040
examples are from this

2546
02:44:03,040 --> 02:44:05,279
and we have confusion attacks this is

2547
02:44:05,279 --> 02:44:07,760
alex wilson made this year uh i don't

2548
02:44:07,760 --> 02:44:08,800
know if

2549
02:44:08,800 --> 02:44:10,880
how many people talked about confusion

2550
02:44:10,880 --> 02:44:13,040
tax

2551
02:44:13,040 --> 02:44:16,160
okay about like one third so i will

2552
02:44:16,160 --> 02:44:18,160
explain a bit the confusion attacks is

2553
02:44:18,160 --> 02:44:19,680
one there's two

2554
02:44:19,680 --> 02:44:20,880
packages

2555
02:44:20,880 --> 02:44:23,359
one private and one public

2556
02:44:23,359 --> 02:44:24,720
then the

2557
02:44:24,720 --> 02:44:27,120
package manager just decides to take the

2558
02:44:27,120 --> 02:44:28,479
most recent

2559
02:44:28,479 --> 02:44:31,840
version so if you have a private package

2560
02:44:31,840 --> 02:44:35,040
that you're using let's say rollton123

2561
02:44:35,040 --> 02:44:35,920
and

2562
02:44:35,920 --> 02:44:38,800
someone has uploaded a public package

2563
02:44:38,800 --> 02:44:41,359
named rotten123 but with version nine

2564
02:44:41,359 --> 02:44:43,040
and my version is eight the package

2565
02:44:43,040 --> 02:44:44,319
manager will automatically take the

2566
02:44:44,319 --> 02:44:46,240
public one and add the private one and

2567
02:44:46,240 --> 02:44:49,200
then you can just like upload a

2568
02:44:49,200 --> 02:44:51,520
package over to the public and steal all

2569
02:44:51,520 --> 02:44:54,319
the data from a private repositories

2570
02:44:54,319 --> 02:44:55,439
so

2571
02:44:55,439 --> 02:44:57,760
he hacked and he did like a lot of noise

2572
02:44:57,760 --> 02:44:59,439
and a lot of

2573
02:44:59,439 --> 02:45:00,880
money

2574
02:45:00,880 --> 02:45:02,560
so

2575
02:45:02,560 --> 02:45:03,760
and the question is why is this

2576
02:45:03,760 --> 02:45:05,040
happening

2577
02:45:05,040 --> 02:45:06,800
it's usually

2578
02:45:06,800 --> 02:45:09,279
like if i would want to get a specific

2579
02:45:09,279 --> 02:45:10,240
version

2580
02:45:10,240 --> 02:45:11,600
of a package

2581
02:45:11,600 --> 02:45:13,920
i would want to ask for one two three

2582
02:45:13,920 --> 02:45:16,560
like a 1.2.3 package

2583
02:45:16,560 --> 02:45:18,000
but then

2584
02:45:18,000 --> 02:45:20,080
when i want to upgrade the package it

2585
02:45:20,080 --> 02:45:21,200
takes them a lot of effort and

2586
02:45:21,200 --> 02:45:22,960
developers don't like effort because it

2587
02:45:22,960 --> 02:45:24,160
takes time

2588
02:45:24,160 --> 02:45:26,880
so there's a semantic versioning or

2589
02:45:26,880 --> 02:45:28,800
other kind of upgrading

2590
02:45:28,800 --> 02:45:31,120
versioning capabilities so you can make

2591
02:45:31,120 --> 02:45:33,439
the software automatic upgrade and tell

2592
02:45:33,439 --> 02:45:35,600
what you want and this tilde that you

2593
02:45:35,600 --> 02:45:38,399
see here says that every minor version

2594
02:45:38,399 --> 02:45:40,640
of patch version that's the two and the

2595
02:45:40,640 --> 02:45:42,479
one at the end gets upgraded

2596
02:45:42,479 --> 02:45:44,880
automatically if i install now one new

2597
02:45:44,880 --> 02:45:48,640
package so if i have a package.json that

2598
02:45:48,640 --> 02:45:51,920
has my package with uh 1.21 and now a

2599
02:45:51,920 --> 02:45:56,080
maintainer creates a new version 1.2.2

2600
02:45:56,080 --> 02:45:58,640
then automatically my package manager

2601
02:45:58,640 --> 02:46:01,359
will upgrade to this version

2602
02:46:01,359 --> 02:46:03,600
and this is not good

2603
02:46:03,600 --> 02:46:06,160
so to fix it and

2604
02:46:06,160 --> 02:46:08,319
we created like different types of log

2605
02:46:08,319 --> 02:46:11,120
files and each each package manager has

2606
02:46:11,120 --> 02:46:14,560
a different kind of log file npm has a

2607
02:46:14,560 --> 02:46:18,000
package.json lock and the pip has a pip

2608
02:46:18,000 --> 02:46:20,640
you can have all the requirements txt

2609
02:46:20,640 --> 02:46:23,760
and they freeze it or a pip file and

2610
02:46:23,760 --> 02:46:26,080
yeah you have in go you have go some and

2611
02:46:26,080 --> 02:46:27,760
different areas but at the end of the

2612
02:46:27,760 --> 02:46:29,760
day it has the version

2613
02:46:29,760 --> 02:46:30,479
that

2614
02:46:30,479 --> 02:46:32,399
it went to developer and installed the

2615
02:46:32,399 --> 02:46:35,359
package it decided at the same point to

2616
02:46:35,359 --> 02:46:36,880
download the specific version then it

2617
02:46:36,880 --> 02:46:39,600
does an integrity check and has the hash

2618
02:46:39,600 --> 02:46:42,160
so if someone in the future will let's

2619
02:46:42,160 --> 02:46:43,840
say will download from a different

2620
02:46:43,840 --> 02:46:46,880
repository or has a management attack

2621
02:46:46,880 --> 02:46:48,880
then the integrity will be changed and

2622
02:46:48,880 --> 02:46:51,200
the package manager won't install this

2623
02:46:51,200 --> 02:46:52,800
file

2624
02:46:52,800 --> 02:46:54,319
so we have these log files and they are

2625
02:46:54,319 --> 02:46:56,800
very good and if we use them properly

2626
02:46:56,800 --> 02:46:59,359
they can save our

2627
02:46:59,359 --> 02:47:01,040
nights from

2628
02:47:01,040 --> 02:47:03,279
getting hacked

2629
02:47:03,279 --> 02:47:04,640
i know sometimes it's nice sometimes

2630
02:47:04,640 --> 02:47:07,120
it's weeks depends on the problem

2631
02:47:07,120 --> 02:47:08,720
and they want to start talking about

2632
02:47:08,720 --> 02:47:11,840
what can go wrong in these areas

2633
02:47:11,840 --> 02:47:13,520
so

2634
02:47:13,520 --> 02:47:15,600
can anybody say how many problems they

2635
02:47:15,600 --> 02:47:18,240
can find here

2636
02:47:18,960 --> 02:47:23,200
this is a docker file it has a form node

2637
02:47:23,200 --> 02:47:24,399
uh

2638
02:47:24,399 --> 02:47:26,560
adding the package.json running npmi and

2639
02:47:26,560 --> 02:47:28,240
then npm start

2640
02:47:28,240 --> 02:47:32,240
can someone say if he sees a problem

2641
02:47:32,560 --> 02:47:33,520
no

2642
02:47:33,520 --> 02:47:36,399
so i i i'll get you the answers

2643
02:47:36,399 --> 02:47:38,160
so first of all

2644
02:47:38,160 --> 02:47:41,120
when i use docker file the latest

2645
02:47:41,120 --> 02:47:42,160
tells

2646
02:47:42,160 --> 02:47:45,040
take the latest docker for a file from

2647
02:47:45,040 --> 02:47:47,200
the repository so if someone just

2648
02:47:47,200 --> 02:47:48,479
upgraded

2649
02:47:48,479 --> 02:47:50,640
a new version it will just download

2650
02:47:50,640 --> 02:47:53,200
usually i would want it to be tagged to

2651
02:47:53,200 --> 02:47:55,600
a specific version or better tag to a

2652
02:47:55,600 --> 02:47:57,120
specific hash

2653
02:47:57,120 --> 02:47:59,120
so it will download the specific hash

2654
02:47:59,120 --> 02:48:01,200
that i checked and verified and not just

2655
02:48:01,200 --> 02:48:02,960
the latest thing that happens next time

2656
02:48:02,960 --> 02:48:06,319
my kubernetes will restart the pod

2657
02:48:06,319 --> 02:48:09,200
uh differently does the package json

2658
02:48:09,200 --> 02:48:11,520
what happened is in this docker file

2659
02:48:11,520 --> 02:48:14,880
before it didn't have the asterisk so it

2660
02:48:14,880 --> 02:48:17,200
copied only the package json another

2661
02:48:17,200 --> 02:48:19,279
package lock it means that in the build

2662
02:48:19,279 --> 02:48:22,240
systems inside everywhere it won't use

2663
02:48:22,240 --> 02:48:23,680
the package lock

2664
02:48:23,680 --> 02:48:25,359
so it's good because everything will

2665
02:48:25,359 --> 02:48:28,160
work seamlessly until someone upgrades a

2666
02:48:28,160 --> 02:48:29,200
bad

2667
02:48:29,200 --> 02:48:30,800
package and

2668
02:48:30,800 --> 02:48:32,800
everything will start failing

2669
02:48:32,800 --> 02:48:34,479
and at the end there's a different

2670
02:48:34,479 --> 02:48:36,399
there's a reason uh difference between

2671
02:48:36,399 --> 02:48:38,640
npm i and npm ci

2672
02:48:38,640 --> 02:48:41,200
npmci tells to

2673
02:48:41,200 --> 02:48:43,680
make sure that the log file is

2674
02:48:43,680 --> 02:48:46,080
there and is correct if you run with

2675
02:48:46,080 --> 02:48:48,720
npmi if you don't have a package lock it

2676
02:48:48,720 --> 02:48:50,640
will install and create a package lock

2677
02:48:50,640 --> 02:48:53,040
if you run it for npmci if you have a

2678
02:48:53,040 --> 02:48:55,040
package lock it will fail if you don't

2679
02:48:55,040 --> 02:48:57,040
have a package lock it will fail or if

2680
02:48:57,040 --> 02:48:59,200
there's a difference between what's in

2681
02:48:59,200 --> 02:49:01,040
the package json and the package lock it

2682
02:49:01,040 --> 02:49:03,359
will fail this is what it's supposed to

2683
02:49:03,359 --> 02:49:04,240
do

2684
02:49:04,240 --> 02:49:06,319
so this is different stuff that we need

2685
02:49:06,319 --> 02:49:08,399
to put in consideration when adding when

2686
02:49:08,399 --> 02:49:10,479
creating docker files

2687
02:49:10,479 --> 02:49:13,359
and i was playing and looking at aws

2688
02:49:13,359 --> 02:49:15,359
in the past and i saw that

2689
02:49:15,359 --> 02:49:18,319
aws the default lambda function and when

2690
02:49:18,319 --> 02:49:20,640
you create a default lambda it doesn't

2691
02:49:20,640 --> 02:49:23,840
add asterisks and doesn't do npmcr

2692
02:49:23,840 --> 02:49:26,319
so with the talking and they changed it

2693
02:49:26,319 --> 02:49:29,040
and now all the lamp does have a package

2694
02:49:29,040 --> 02:49:31,200
asterix so you it also copies the

2695
02:49:31,200 --> 02:49:33,600
package log files they didn't want to

2696
02:49:33,600 --> 02:49:36,479
put npmci because they said it's

2697
02:49:36,479 --> 02:49:38,000
not production and

2698
02:49:38,000 --> 02:49:40,960
everybody should secure themselves so we

2699
02:49:40,960 --> 02:49:43,600
just added a comment at the end to one

2700
02:49:43,600 --> 02:49:46,000
npm ci minus minus production

2701
02:49:46,000 --> 02:49:48,720
or you should also add a minus a minus a

2702
02:49:48,720 --> 02:49:50,800
scripts only i will get to it

2703
02:49:50,800 --> 02:49:52,399
but

2704
02:49:52,399 --> 02:49:54,160
like no scripts

2705
02:49:54,160 --> 02:49:55,520
so

2706
02:49:55,520 --> 02:49:57,600
it will be safe

2707
02:49:57,600 --> 02:49:59,680
so first of all i want you to make sure

2708
02:49:59,680 --> 02:50:01,920
when you go back home that you use log

2709
02:50:01,920 --> 02:50:04,399
files like make sure that everywhere if

2710
02:50:04,399 --> 02:50:08,560
it's from dockers or to npm or pip or go

2711
02:50:08,560 --> 02:50:11,040
never forget the package lock use it in

2712
02:50:11,040 --> 02:50:12,800
all the areas from the developer machine

2713
02:50:12,800 --> 02:50:14,080
to the ci

2714
02:50:14,080 --> 02:50:15,680
to

2715
02:50:15,680 --> 02:50:19,120
the production itself

2716
02:50:19,279 --> 02:50:22,479
if you want to use npm ci and like we

2717
02:50:22,479 --> 02:50:24,880
understand we need to use npmci so this

2718
02:50:24,880 --> 02:50:27,120
is the correct way in the developer

2719
02:50:27,120 --> 02:50:30,560
machine the developer adds his version

2720
02:50:30,560 --> 02:50:32,640
like he says we support axios

2721
02:50:32,640 --> 02:50:34,120
[Music]

2722
02:50:34,120 --> 02:50:36,399
0.21.0 and then

2723
02:50:36,399 --> 02:50:38,160
when the cio build it will always

2724
02:50:38,160 --> 02:50:41,760
install the version 0.21.4

2725
02:50:41,760 --> 02:50:44,240
because it this is the latest then

2726
02:50:44,240 --> 02:50:45,680
uh

2727
02:50:45,680 --> 02:50:47,439
this is what what was happened the

2728
02:50:47,439 --> 02:50:49,760
moment he did the npmri he did full

2729
02:50:49,760 --> 02:50:52,319
testing he made sure everything works he

2730
02:50:52,319 --> 02:50:54,880
wasn't hacked the ci build should also

2731
02:50:54,880 --> 02:50:57,760
not be hacked at the same time

2732
02:50:57,760 --> 02:51:00,479
now this is a game that i as a developer

2733
02:51:00,479 --> 02:51:02,319
also have

2734
02:51:02,319 --> 02:51:04,240
a lot of

2735
02:51:04,240 --> 02:51:05,359
troubles

2736
02:51:05,359 --> 02:51:06,560
and

2737
02:51:06,560 --> 02:51:08,960
i am lazy and i don't want to download

2738
02:51:08,960 --> 02:51:10,479
the repo

2739
02:51:10,479 --> 02:51:11,279
to

2740
02:51:11,279 --> 02:51:13,760
myself add an npm install or upgrade

2741
02:51:13,760 --> 02:51:15,920
some version and then

2742
02:51:15,920 --> 02:51:18,080
re-upload it so sometimes i just go to

2743
02:51:18,080 --> 02:51:21,040
github and change only the package.json

2744
02:51:21,040 --> 02:51:23,520
so in this case i'm changing the

2745
02:51:23,520 --> 02:51:26,880
package.json to 21.1 or i25 or whatever

2746
02:51:26,880 --> 02:51:29,920
i want and then when i'm running npmci

2747
02:51:29,920 --> 02:51:31,200
and i put here

2748
02:51:31,200 --> 02:51:34,240
i6 because this is an npm six

2749
02:51:34,240 --> 02:51:35,600
it's working good

2750
02:51:35,600 --> 02:51:36,640
um

2751
02:51:36,640 --> 02:51:38,800
it says yeah the inv you have an invalid

2752
02:51:38,800 --> 02:51:40,880
log file because you have a log file it

2753
02:51:40,880 --> 02:51:43,200
saved me and i don't have

2754
02:51:43,200 --> 02:51:45,200
uh you change then my package.json but

2755
02:51:45,200 --> 02:51:47,920
it expects it to change the package lock

2756
02:51:47,920 --> 02:51:49,279
uh to be

2757
02:51:49,279 --> 02:51:51,520
the same so it will know exactly what to

2758
02:51:51,520 --> 02:51:55,600
download so in this case npmcr6 failed

2759
02:51:55,600 --> 02:51:56,800
but

2760
02:51:56,800 --> 02:52:00,080
i went and checked npmc i7 and back in

2761
02:52:00,080 --> 02:52:02,720
the start of the year it was also an npm

2762
02:52:02,720 --> 02:52:05,200
8 like in the latest edition

2763
02:52:05,200 --> 02:52:06,160
and

2764
02:52:06,160 --> 02:52:07,520
you can see that

2765
02:52:07,520 --> 02:52:09,760
the same change exactly when npm 7

2766
02:52:09,760 --> 02:52:12,160
continued it say yeah there's an old log

2767
02:52:12,160 --> 02:52:13,200
file

2768
02:52:13,200 --> 02:52:16,080
and it added two packages and it went

2769
02:52:16,080 --> 02:52:19,120
over and did what i wanted to do so

2770
02:52:19,120 --> 02:52:21,520
like there was a breaking change i think

2771
02:52:21,520 --> 02:52:24,160
for one and a half years in npm

2772
02:52:24,160 --> 02:52:25,040
that

2773
02:52:25,040 --> 02:52:26,840
made npmcr

2774
02:52:26,840 --> 02:52:28,960
useless um

2775
02:52:28,960 --> 02:52:30,960
when or not not really useless but when

2776
02:52:30,960 --> 02:52:33,200
there was changes then there will be

2777
02:52:33,200 --> 02:52:35,600
there can be a drift and one package

2778
02:52:35,600 --> 02:52:36,250
when

2779
02:52:36,250 --> 02:52:37,680
[Music]

2780
02:52:37,680 --> 02:52:39,439
when developers change the package.json

2781
02:52:39,439 --> 02:52:41,359
file there can be a change and there

2782
02:52:41,359 --> 02:52:43,279
will be a change that will install a

2783
02:52:43,279 --> 02:52:46,080
different like so when i change the to

2784
02:52:46,080 --> 02:52:48,319
21.1 it went and

2785
02:52:48,319 --> 02:52:50,720
it didn't find it in the package json so

2786
02:52:50,720 --> 02:52:53,439
it went and installed 22. it installed a

2787
02:52:53,439 --> 02:52:54,399
different

2788
02:52:54,399 --> 02:52:56,479
version altogether

2789
02:52:56,479 --> 02:52:57,359
so

2790
02:52:57,359 --> 02:52:59,040
this is funny

2791
02:52:59,040 --> 02:53:01,200
but also i will continue to investigate

2792
02:53:01,200 --> 02:53:03,279
and get this and i found out that the

2793
02:53:03,279 --> 02:53:04,960
package lock doesn't need to have

2794
02:53:04,960 --> 02:53:07,439
anything at all so if i just like

2795
02:53:07,439 --> 02:53:10,319
minimize the package log file to having

2796
02:53:10,319 --> 02:53:13,279
nothing just like uh brackets it also

2797
02:53:13,279 --> 02:53:15,439
worked so it said yeah there's an

2798
02:53:15,439 --> 02:53:18,160
instant log file it's not it's ancient

2799
02:53:18,160 --> 02:53:20,160
it doesn't have nothing in it so let me

2800
02:53:20,160 --> 02:53:22,319
create it for you let me just install

2801
02:53:22,319 --> 02:53:25,520
everything for you and this is actually

2802
02:53:25,520 --> 02:53:27,200
pretty interesting because if you have

2803
02:53:27,200 --> 02:53:30,319
different audit controls and so bomb and

2804
02:53:30,319 --> 02:53:32,720
like s1 software build of materials so

2805
02:53:32,720 --> 02:53:34,319
if you have different stuff that added

2806
02:53:34,319 --> 02:53:36,160
the package lock you will see you have

2807
02:53:36,160 --> 02:53:39,040
nothing over here but you do have

2808
02:53:39,040 --> 02:53:40,240
information and the stuff in

2809
02:53:40,240 --> 02:53:42,479
package.json so you will see you will

2810
02:53:42,479 --> 02:53:44,160
see it and you won't see it in the code

2811
02:53:44,160 --> 02:53:46,560
s1 will be empty but in production you

2812
02:53:46,560 --> 02:53:48,640
will have all these

2813
02:53:48,640 --> 02:53:51,200
packages and vulnerabilities if possible

2814
02:53:51,200 --> 02:53:54,000
and nobody knows about them

2815
02:53:54,000 --> 02:53:55,920
so after one year and a bit of

2816
02:53:55,920 --> 02:53:58,640
discussions the npm files they fixed it

2817
02:53:58,640 --> 02:54:00,319
they created a cv

2818
02:54:00,319 --> 02:54:02,399
it got 9.8

2819
02:54:02,399 --> 02:54:04,479
i actually i don't agree if it's not

2820
02:54:04,479 --> 02:54:06,880
that critical but it's fun to get a

2821
02:54:06,880 --> 02:54:09,120
critical cv

2822
02:54:09,120 --> 02:54:10,160
so

2823
02:54:10,160 --> 02:54:15,240
they fixed it they fixed it in 8.1.3

2824
02:54:15,680 --> 02:54:18,240
but still we have other problems

2825
02:54:18,240 --> 02:54:20,399
floating on and if you look in there

2826
02:54:20,399 --> 02:54:22,080
it's easy you can just go to get up to

2827
02:54:22,080 --> 02:54:24,800
the issues and look for different stuff

2828
02:54:24,800 --> 02:54:27,600
we have package lock json not noticed

2829
02:54:27,600 --> 02:54:30,000
not repaired automatically by npm or

2830
02:54:30,000 --> 02:54:32,960
overrides not working correctly so in

2831
02:54:32,960 --> 02:54:35,840
the packages and you can override uh

2832
02:54:35,840 --> 02:54:38,560
packages in in inner packages to say you

2833
02:54:38,560 --> 02:54:40,240
have to have these forces

2834
02:54:40,240 --> 02:54:42,319
these versions so they are not working

2835
02:54:42,319 --> 02:54:43,439
correctly

2836
02:54:43,439 --> 02:54:45,040
it's still

2837
02:54:45,040 --> 02:54:47,840
still in charge

2838
02:54:47,840 --> 02:54:49,840
like one of the things that i want to

2839
02:54:49,840 --> 02:54:52,720
make to you to know about it that

2840
02:54:52,720 --> 02:54:54,640
the package managers do stuff and they

2841
02:54:54,640 --> 02:54:57,040
verify but don't trust them they don't

2842
02:54:57,040 --> 02:55:00,720
really verify properly sometimes

2843
02:55:00,720 --> 02:55:02,880
you always have to verify yourselves

2844
02:55:02,880 --> 02:55:05,920
with external tools because they just

2845
02:55:05,920 --> 02:55:07,920
they're not built to but they're not

2846
02:55:07,920 --> 02:55:10,479
built for security they're built for

2847
02:55:10,479 --> 02:55:12,800
development to make sure everything

2848
02:55:12,800 --> 02:55:15,680
works but security is not one of the use

2849
02:55:15,680 --> 02:55:18,720
cases they were built for

2850
02:55:18,720 --> 02:55:20,160
a bit of my

2851
02:55:20,160 --> 02:55:21,600
bug that i had

2852
02:55:21,600 --> 02:55:24,880
and last year i did a big research about

2853
02:55:24,880 --> 02:55:26,720
malicious code analysis that's how to

2854
02:55:26,720 --> 02:55:29,279
hack the scanners themselves

2855
02:55:29,279 --> 02:55:32,399
like a code scanning scanners and i did

2856
02:55:32,399 --> 02:55:34,960
it i presented in defcon about it but

2857
02:55:34,960 --> 02:55:36,800
then i wanted to continue my research

2858
02:55:36,800 --> 02:55:39,840
and i saw if scanners are

2859
02:55:39,840 --> 02:55:42,240
able to be hacked by different

2860
02:55:42,240 --> 02:55:43,520
types of

2861
02:55:43,520 --> 02:55:46,000
attacks i will show you also maybe npm

2862
02:55:46,000 --> 02:55:47,840
and maybe other package manuals can be

2863
02:55:47,840 --> 02:55:50,399
hacked in the same way

2864
02:55:50,399 --> 02:55:51,840
so

2865
02:55:51,840 --> 02:55:54,399
let's say we have npmci minus minus

2866
02:55:54,399 --> 02:55:56,560
signal scripts and minus my signal

2867
02:55:56,560 --> 02:55:58,640
scripts it makes sure that nothing will

2868
02:55:58,640 --> 02:55:59,760
be run

2869
02:55:59,760 --> 02:56:02,319
uh from the package.json so

2870
02:56:02,319 --> 02:56:04,960
if you know impact.json you can run post

2871
02:56:04,960 --> 02:56:08,080
install or pre-install and when when you

2872
02:56:08,080 --> 02:56:10,319
are adding a dependency it will run

2873
02:56:10,319 --> 02:56:12,000
scripts it will run the shell scripts

2874
02:56:12,000 --> 02:56:13,359
inside your ci

2875
02:56:13,359 --> 02:56:15,760
and we want to make sure nothing runs

2876
02:56:15,760 --> 02:56:19,600
that we are and we didn't want to to run

2877
02:56:19,600 --> 02:56:22,399
so for example if i have

2878
02:56:22,399 --> 02:56:24,720
like an npm token for my private

2879
02:56:24,720 --> 02:56:27,319
registry and i have i i'm running

2880
02:56:27,319 --> 02:56:30,240
npmcignoscripts and then i can answer

2881
02:56:30,240 --> 02:56:32,160
the npm token and run the scripts i want

2882
02:56:32,160 --> 02:56:34,640
to run this way the script doesn't have

2883
02:56:34,640 --> 02:56:37,120
access to my secret password to the

2884
02:56:37,120 --> 02:56:38,960
registry

2885
02:56:38,960 --> 02:56:42,000
um but npm specifically looks at

2886
02:56:42,000 --> 02:56:44,160
different configuration files

2887
02:56:44,160 --> 02:56:44,960
and

2888
02:56:44,960 --> 02:56:46,640
it will look up

2889
02:56:46,640 --> 02:56:49,120
in the user directory but it will also

2890
02:56:49,120 --> 02:56:51,279
look in the project directory so

2891
02:56:51,279 --> 02:56:53,439
when you when you are inside the same

2892
02:56:53,439 --> 02:56:55,840
project directory it will look and the

2893
02:56:55,840 --> 02:56:58,880
target if a if it has a dot and pmrc and

2894
02:56:58,880 --> 02:57:00,399
will load it

2895
02:57:00,399 --> 02:57:02,560
and loading it gives you different

2896
02:57:02,560 --> 02:57:04,479
options sometimes it gives you

2897
02:57:04,479 --> 02:57:07,120
the people put the password inside so

2898
02:57:07,120 --> 02:57:09,439
pass it to the registry over there

2899
02:57:09,439 --> 02:57:11,920
but i can override it with whatever i

2900
02:57:11,920 --> 02:57:12,880
want

2901
02:57:12,880 --> 02:57:13,760
so

2902
02:57:13,760 --> 02:57:16,800
i usually override it with a script

2903
02:57:16,800 --> 02:57:17,600
that

2904
02:57:17,600 --> 02:57:20,120
has a remote code execution so inside

2905
02:57:20,120 --> 02:57:23,760
my.pmlc i can load unload that script

2906
02:57:23,760 --> 02:57:24,880
that

2907
02:57:24,880 --> 02:57:26,800
tells when the

2908
02:57:26,800 --> 02:57:28,319
one npm loads

2909
02:57:28,319 --> 02:57:30,720
i run a script

2910
02:57:30,720 --> 02:57:33,200
of my own this happened in npm six and

2911
02:57:33,200 --> 02:57:34,640
npm seven

2912
02:57:34,640 --> 02:57:36,720
it did they disable the script so you

2913
02:57:36,720 --> 02:57:38,399
can add a get

2914
02:57:38,399 --> 02:57:40,720
a git script so

2915
02:57:40,720 --> 02:57:43,040
and have like a replacement to get

2916
02:57:43,040 --> 02:57:46,080
binary and then when you try to clone

2917
02:57:46,080 --> 02:57:47,200
from a git

2918
02:57:47,200 --> 02:57:50,319
repository it runs this alternative get

2919
02:57:50,319 --> 02:57:51,439
client

2920
02:57:51,439 --> 02:57:54,240
so you can just like run code

2921
02:57:54,240 --> 02:57:56,640
so whenever you have data nba and npm

2922
02:57:56,640 --> 02:57:58,319
you can just inject this file and it

2923
02:57:58,319 --> 02:58:00,560
will run the run your code

2924
02:58:00,560 --> 02:58:02,160
and the attack scenario is very simple

2925
02:58:02,160 --> 02:58:04,960
over here a developer any developer

2926
02:58:04,960 --> 02:58:06,960
let's say we have an organization with 5

2927
02:58:06,960 --> 02:58:08,960
000 developers

2928
02:58:08,960 --> 02:58:11,200
or i don't know how many different 500

2929
02:58:11,200 --> 02:58:13,680
1000 we don't trust

2930
02:58:13,680 --> 02:58:16,399
all of them equally and the moment he

2931
02:58:16,399 --> 02:58:19,279
pushes something a dot and pmrc into the

2932
02:58:19,279 --> 02:58:21,520
repository the ci

2933
02:58:21,520 --> 02:58:23,840
executes the code it starts like have

2934
02:58:23,840 --> 02:58:25,600
access to the secrets to the production

2935
02:58:25,600 --> 02:58:27,840
access network access containers and

2936
02:58:27,840 --> 02:58:31,120
whatever he wants and

2937
02:58:31,120 --> 02:58:33,200
this is a way for a developer from

2938
02:58:33,200 --> 02:58:35,600
getting very specific permissions to

2939
02:58:35,600 --> 02:58:39,840
have full per day full production access

2940
02:58:40,000 --> 02:58:40,800
say

2941
02:58:40,800 --> 02:58:42,880
full production access

2942
02:58:42,880 --> 02:58:44,960
but it happens also in python

2943
02:58:44,960 --> 02:58:48,000
so pip install usually if you install

2944
02:58:48,000 --> 02:58:48,800
pip

2945
02:58:48,800 --> 02:58:50,640
then

2946
02:58:50,640 --> 02:58:53,359
it looks for a setup py

2947
02:58:53,359 --> 02:58:55,680
setup wise python

2948
02:58:55,680 --> 02:58:58,240
i just like can import whatever i want

2949
02:58:58,240 --> 02:59:01,279
like it doesn't um

2950
02:59:01,520 --> 02:59:03,520
it's not like i have to be in the same

2951
02:59:03,520 --> 02:59:06,720
like way add the requirements out of

2952
02:59:06,720 --> 02:59:09,600
everything it's python code i just like

2953
02:59:09,600 --> 02:59:12,240
hack it i put my own system who am i

2954
02:59:12,240 --> 02:59:14,160
says exit

2955
02:59:14,160 --> 02:59:16,640
finish with doing whatever i want

2956
02:59:16,640 --> 02:59:18,240
inside the pipeline

2957
02:59:18,240 --> 02:59:19,920
same with requirements requirements is

2958
02:59:19,920 --> 02:59:21,760
not python actually it's static code

2959
02:59:21,760 --> 02:59:24,640
analysis but it has different like flags

2960
02:59:24,640 --> 02:59:29,040
so if i put a minus our etc password

2961
02:59:29,040 --> 02:59:30,080
i can

2962
02:59:30,080 --> 02:59:32,080
inside the requirements it goes and

2963
02:59:32,080 --> 02:59:34,319
fetches it tries to fetch on a different

2964
02:59:34,319 --> 02:59:36,960
requirements from atc past wd and then

2965
02:59:36,960 --> 02:59:38,800
if i have access to the logs i can see

2966
02:59:38,800 --> 02:59:42,000
it or i have a ssrf target i can add a

2967
02:59:42,000 --> 02:59:45,680
minus rsf srf target it will go and get

2968
02:59:45,680 --> 02:59:47,439
it from it

2969
02:59:47,439 --> 02:59:49,120
we have ruby

2970
02:59:49,120 --> 02:59:50,640
bundle install

2971
02:59:50,640 --> 02:59:52,880
there's a gem file the jam file is

2972
02:59:52,880 --> 02:59:56,319
actually passed by ruby so again same i

2973
02:59:56,319 --> 02:59:59,120
just system who am i whatever i want

2974
02:59:59,120 --> 03:00:01,439
all of the package managers not all of

2975
03:00:01,439 --> 03:00:04,240
them i think go i couldn't hack

2976
03:00:04,240 --> 03:00:07,040
but i don't know it was

2977
03:00:07,040 --> 03:00:08,640
but that was a

2978
03:00:08,640 --> 03:00:11,600
it's very easy and it's because they are

2979
03:00:11,600 --> 03:00:13,840
designed to be developer friendly the

2980
03:00:13,840 --> 03:00:16,560
developers want to configure the stuff

2981
03:00:16,560 --> 03:00:17,520
so

2982
03:00:17,520 --> 03:00:19,680
it's very easy to configure you just

2983
03:00:19,680 --> 03:00:21,040
have full

2984
03:00:21,040 --> 03:00:23,600
python code or full execution code so

2985
03:00:23,600 --> 03:00:25,920
package managers at the end will execute

2986
03:00:25,920 --> 03:00:27,760
code and you need to understand that

2987
03:00:27,760 --> 03:00:29,439
when running them inside different

2988
03:00:29,439 --> 03:00:30,800
environments

2989
03:00:30,800 --> 03:00:33,359
code can be executed so you need to

2990
03:00:33,359 --> 03:00:35,920
put them into the right areas with no

2991
03:00:35,920 --> 03:00:38,720
access to sensitive passwords and all

2992
03:00:38,720 --> 03:00:40,240
access to

2993
03:00:40,240 --> 03:00:42,479
file systems or network access or

2994
03:00:42,479 --> 03:00:43,439
whatever

2995
03:00:43,439 --> 03:00:47,439
just make sure treat them as viruses

2996
03:00:47,439 --> 03:00:49,040
um

2997
03:00:49,040 --> 03:00:50,880
vulnerability scanning

2998
03:00:50,880 --> 03:00:52,960
let's say we have nobody scanning inside

2999
03:00:52,960 --> 03:00:56,319
our systems and we have npm audit and we

3000
03:00:56,319 --> 03:00:59,279
have different types of

3001
03:00:59,279 --> 03:01:00,960
scanning that we want to make sure that

3002
03:01:00,960 --> 03:01:03,359
dependencies are

3003
03:01:03,359 --> 03:01:05,520
they don't have any viruses

3004
03:01:05,520 --> 03:01:07,840
so let's say i

3005
03:01:07,840 --> 03:01:09,680
have npm installed and this is npm

3006
03:01:09,680 --> 03:01:11,359
installed but it does actually np

3007
03:01:11,359 --> 03:01:13,439
install it does npm audit automatically

3008
03:01:13,439 --> 03:01:16,080
but i can also just the npm audit on the

3009
03:01:16,080 --> 03:01:19,279
packages and when pack results for a

3010
03:01:19,279 --> 03:01:21,680
version 4.2.0

3011
03:01:21,680 --> 03:01:24,080
it has one high severity vulnerability

3012
03:01:24,080 --> 03:01:27,279
and then probably the ci you should

3013
03:01:27,279 --> 03:01:30,319
block the installation and nothing can

3014
03:01:30,319 --> 03:01:33,520
go and they need to fix it

3015
03:01:33,520 --> 03:01:38,160
but if i alias the package

3016
03:01:38,160 --> 03:01:40,000
in npm six

3017
03:01:40,000 --> 03:01:43,359
then if i if i alias it i do the pack

3018
03:01:43,359 --> 03:01:46,720
resolver alias to the same version

3019
03:01:46,720 --> 03:01:48,960
then the npm ad doesn't know how to

3020
03:01:48,960 --> 03:01:51,439
behave and just passes it doesn't tell

3021
03:01:51,439 --> 03:01:54,880
me one one package was skipped or was

3022
03:01:54,880 --> 03:01:58,080
not verified it edited all the 20

3023
03:01:58,080 --> 03:02:00,319
packages and found zero vulnerabilities

3024
03:02:00,319 --> 03:02:01,840
and the same thing that

3025
03:02:01,840 --> 03:02:04,479
one second ago was vulnerable

3026
03:02:04,479 --> 03:02:05,200
so

3027
03:02:05,200 --> 03:02:07,600
if i if i is an attacker want to add a

3028
03:02:07,600 --> 03:02:10,080
vulnerable package to a dependency on

3029
03:02:10,080 --> 03:02:12,640
mine i can just like alias it

3030
03:02:12,640 --> 03:02:16,399
and if someone uses npm six now in the

3031
03:02:16,399 --> 03:02:19,040
ci i don't know how many people know

3032
03:02:19,040 --> 03:02:21,359
here what npm version they're using but

3033
03:02:21,359 --> 03:02:23,279
i'm probably like it's

3034
03:02:23,279 --> 03:02:25,760
some are using npm six some of my sevens

3035
03:02:25,760 --> 03:02:28,640
eight there's no no nobody really cares

3036
03:02:28,640 --> 03:02:31,520
about which npm version they're using

3037
03:02:31,520 --> 03:02:33,200
because it's

3038
03:02:33,200 --> 03:02:34,720
i know it's not something that people

3039
03:02:34,720 --> 03:02:36,960
know of know of just like whatever was

3040
03:02:36,960 --> 03:02:39,359
in the docker file initially when they

3041
03:02:39,359 --> 03:02:40,479
installed it

3042
03:02:40,479 --> 03:02:43,040
so usually if you have node 16 it will

3043
03:02:43,040 --> 03:02:46,160
have npm6 and i think that no new nodes

3044
03:02:46,160 --> 03:02:49,840
have npm8 um

3045
03:02:50,399 --> 03:02:54,319
so another way just like going

3046
03:02:54,319 --> 03:02:57,520
and asking um repository like this is

3047
03:02:57,520 --> 03:03:00,240
out of store for the packages so if i go

3048
03:03:00,240 --> 03:03:01,600
to github

3049
03:03:01,600 --> 03:03:04,720
and ask for a node pack resolver

3050
03:03:04,720 --> 03:03:06,960
with branch 4.2.0

3051
03:03:06,960 --> 03:03:09,279
actually this is something cool that npm

3052
03:03:09,279 --> 03:03:10,880
does it

3053
03:03:10,880 --> 03:03:13,279
does go and resolves it and finds out

3054
03:03:13,279 --> 03:03:14,120
it's a

3055
03:03:14,120 --> 03:03:16,080
4.2.0 and

3056
03:03:16,080 --> 03:03:17,520
resolves the data

3057
03:03:17,520 --> 03:03:19,439
and knows to find the way

3058
03:03:19,439 --> 03:03:21,520
the vulnerabilities this is

3059
03:03:21,520 --> 03:03:23,760
some cool things they did

3060
03:03:23,760 --> 03:03:25,439
it's pretty nice

3061
03:03:25,439 --> 03:03:29,200
but if i change a bit the syntax and i

3062
03:03:29,200 --> 03:03:30,800
put a dot

3063
03:03:30,800 --> 03:03:32,240
dot over there

3064
03:03:32,240 --> 03:03:33,680
after the dot com

3065
03:03:33,680 --> 03:03:35,520
so they think it's not from github

3066
03:03:35,520 --> 03:03:37,600
anymore and then it's out of store or i

3067
03:03:37,600 --> 03:03:39,359
can just host it in whatever server i

3068
03:03:39,359 --> 03:03:42,240
want any good server and then again it

3069
03:03:42,240 --> 03:03:44,800
that finds zero vulnerabilities

3070
03:03:44,800 --> 03:03:47,040
so it doesn't it doesn't tell me nothing

3071
03:03:47,040 --> 03:03:48,800
i c i cannot have i don't have any

3072
03:03:48,800 --> 03:03:50,720
configuration to tell it

3073
03:03:50,720 --> 03:03:54,640
if you could not audit it sk break the

3074
03:03:54,640 --> 03:03:56,640
build or tell me about it or do

3075
03:03:56,640 --> 03:03:59,120
something i added a request in dog fc to

3076
03:03:59,120 --> 03:04:01,520
do it they are still thinking about how

3077
03:04:01,520 --> 03:04:02,399
to

3078
03:04:02,399 --> 03:04:04,560
how to do this but it's

3079
03:04:04,560 --> 03:04:07,600
i would expect someone to have a flag

3080
03:04:07,600 --> 03:04:10,240
block the build if you cannot audit all

3081
03:04:10,240 --> 03:04:12,240
just tell me about it tell me there was

3082
03:04:12,240 --> 03:04:14,560
one package that didn't uh

3083
03:04:14,560 --> 03:04:16,720
wasn't i wasn't it was not able to audit

3084
03:04:16,720 --> 03:04:18,720
it properly

3085
03:04:18,720 --> 03:04:20,240
and also

3086
03:04:20,240 --> 03:04:22,479
more complex thing is

3087
03:04:22,479 --> 03:04:24,319
depends on the cursive so if i have my

3088
03:04:24,319 --> 03:04:27,359
awesome project and i have is number or

3089
03:04:27,359 --> 03:04:30,560
readable stream but is number is using a

3090
03:04:30,560 --> 03:04:33,680
sub dependency that isn't auditable

3091
03:04:33,680 --> 03:04:35,359
because it's out of store

3092
03:04:35,359 --> 03:04:37,920
dependency nobody will know about it so

3093
03:04:37,920 --> 03:04:40,720
now the question is like do you know how

3094
03:04:40,720 --> 03:04:43,359
many packages that are out of the

3095
03:04:43,359 --> 03:04:44,960
package store

3096
03:04:44,960 --> 03:04:47,520
and are skipped and it's like too much

3097
03:04:47,520 --> 03:04:50,479
work s-bomb also won't pass it and

3098
03:04:50,479 --> 03:04:52,240
nobody will know about it until it will

3099
03:04:52,240 --> 03:04:56,000
get hacked and then it will be too late

3100
03:04:56,000 --> 03:04:58,720
uh so like i think you should do your

3101
03:04:58,720 --> 03:05:00,560
own s-bomb vulnerability analysis never

3102
03:05:00,560 --> 03:05:02,720
toss the package manager to do it for

3103
03:05:02,720 --> 03:05:03,439
you

3104
03:05:03,439 --> 03:05:04,720
and

3105
03:05:04,720 --> 03:05:07,520
that's it a bit of this is i added it to

3106
03:05:07,520 --> 03:05:10,880
today actually yesterday because i saw

3107
03:05:10,880 --> 03:05:11,760
that

3108
03:05:11,760 --> 03:05:14,479
yesterday someone christian

3109
03:05:14,479 --> 03:05:18,000
added um

3110
03:05:18,000 --> 03:05:20,240
way to hack

3111
03:05:20,240 --> 03:05:22,000
dependencies at last

3112
03:05:22,000 --> 03:05:23,600
last week

3113
03:05:23,600 --> 03:05:26,399
you can look for a

3114
03:05:26,399 --> 03:05:29,200
packages that don't have

3115
03:05:29,200 --> 03:05:32,240
that the maintainer like a a uh

3116
03:05:32,240 --> 03:05:33,840
domain an email domain and the email

3117
03:05:33,840 --> 03:05:35,840
domain got deprecated or he doesn't own

3118
03:05:35,840 --> 03:05:38,160
it anymore so if you have a maintainer

3119
03:05:38,160 --> 03:05:40,160
that doesn't own the email so it's just

3120
03:05:40,160 --> 03:05:41,920
like subdomain takeover but just like

3121
03:05:41,920 --> 03:05:44,080
email domain takeover you just buy the

3122
03:05:44,080 --> 03:05:45,040
domain

3123
03:05:45,040 --> 03:05:46,399
from

3124
03:05:46,399 --> 03:05:47,760
from him

3125
03:05:47,760 --> 03:05:49,359
from godaddy or whatever and then you

3126
03:05:49,359 --> 03:05:51,520
can reset the password and they gotta

3127
03:05:51,520 --> 03:05:53,120
get

3128
03:05:53,120 --> 03:05:55,520
get the same permissions of this package

3129
03:05:55,520 --> 03:05:58,319
manager of this package and what he did

3130
03:05:58,319 --> 03:06:01,840
over here he released inside

3131
03:06:01,840 --> 03:06:04,319
he released inside a

3132
03:06:04,319 --> 03:06:06,720
github tool to just enumerate all the

3133
03:06:06,720 --> 03:06:09,840
packages whatsoever and see who has uh

3134
03:06:09,840 --> 03:06:12,160
who doesn't have a domain associated and

3135
03:06:12,160 --> 03:06:14,560
you can just like take over it

3136
03:06:14,560 --> 03:06:17,200
we see it then there's a tweet and then

3137
03:06:17,200 --> 03:06:18,240
twitter

3138
03:06:18,240 --> 03:06:20,000
they're starting to talk about yeah i

3139
03:06:20,000 --> 03:06:21,920
also created this and i also created

3140
03:06:21,920 --> 03:06:23,600
this and started people starting to talk

3141
03:06:23,600 --> 03:06:25,520
about it like

3142
03:06:25,520 --> 03:06:28,080
npm and nobody isn't doing nothing about

3143
03:06:28,080 --> 03:06:30,560
it and it's not only npm i'm just like

3144
03:06:30,560 --> 03:06:32,479
i'm taking it as an example but

3145
03:06:32,479 --> 03:06:33,600
everybody

3146
03:06:33,600 --> 03:06:37,920
if you have a maintainer somewhere

3147
03:06:37,920 --> 03:06:40,240
and this is like someone just like

3148
03:06:40,240 --> 03:06:42,479
had their best name your next task is to

3149
03:06:42,479 --> 03:06:43,520
find all applications in your

3150
03:06:43,520 --> 03:06:45,760
organization that depend on npm packages

3151
03:06:45,760 --> 03:06:47,600
that maintainers let the email domain

3152
03:06:47,600 --> 03:06:48,640
expire

3153
03:06:48,640 --> 03:06:51,040
and this is like a nightmare so i don't

3154
03:06:51,040 --> 03:06:54,160
think like anybody can do it properly or

3155
03:06:54,160 --> 03:06:56,080
it's a big problem and it's something

3156
03:06:56,080 --> 03:06:57,840
that we need to be on it and understand

3157
03:06:57,840 --> 03:07:00,800
how to do it and start like owning all

3158
03:07:00,800 --> 03:07:01,600
the

3159
03:07:01,600 --> 03:07:03,279
packages

3160
03:07:03,279 --> 03:07:05,520
a quick recap

3161
03:07:05,520 --> 03:07:07,920
package devices install what they want

3162
03:07:07,920 --> 03:07:10,560
they execute unwanted scripts

3163
03:07:10,560 --> 03:07:12,720
they have added checks that are easily

3164
03:07:12,720 --> 03:07:14,080
bypassed

3165
03:07:14,080 --> 03:07:16,319
and random people maintain packages

3166
03:07:16,319 --> 03:07:17,439
that's like

3167
03:07:17,439 --> 03:07:20,080
you you trust the world like for your

3168
03:07:20,080 --> 03:07:22,399
all your services just like i fully

3169
03:07:22,399 --> 03:07:25,279
trust everybody nobody will do no harm i

3170
03:07:25,279 --> 03:07:27,359
i cannot like

3171
03:07:27,359 --> 03:07:29,439
it's it's a problem because we i really

3172
03:07:29,439 --> 03:07:31,439
like them and i use also packaging all

3173
03:07:31,439 --> 03:07:34,640
the time but i i can't live without them

3174
03:07:34,640 --> 03:07:36,080
i know they are bad

3175
03:07:36,080 --> 03:07:37,120
and

3176
03:07:37,120 --> 03:07:38,880
we are working on

3177
03:07:38,880 --> 03:07:41,680
making the world better

3178
03:07:41,680 --> 03:07:45,040
if you do have package managers

3179
03:07:45,040 --> 03:07:47,359
so first of all make sure that

3180
03:07:47,359 --> 03:07:50,160
you verify that there are log files

3181
03:07:50,160 --> 03:07:51,920
you manage the s bomb the software

3182
03:07:51,920 --> 03:07:54,240
believe materials so you can know when

3183
03:07:54,240 --> 03:07:56,399
there's a in the future like tomorrow

3184
03:07:56,399 --> 03:07:59,279
there will be a new package uh i don't

3185
03:07:59,279 --> 03:08:02,399
know dinosaurs got hacked you can make

3186
03:08:02,399 --> 03:08:05,680
sure in five seconds one minute uh just

3187
03:08:05,680 --> 03:08:08,399
go to your swamp see do i have dinosaurs

3188
03:08:08,399 --> 03:08:09,600
uh

3189
03:08:09,600 --> 03:08:11,279
package if yes

3190
03:08:11,279 --> 03:08:14,000
go and check who what is vulnerable go

3191
03:08:14,000 --> 03:08:16,800
see which service is vulnerable and

3192
03:08:16,800 --> 03:08:19,120
if someone hacked into you already or

3193
03:08:19,120 --> 03:08:21,279
you need to just upgrade it

3194
03:08:21,279 --> 03:08:23,120
so you just like monitor everything all

3195
03:08:23,120 --> 03:08:26,080
the time but make sure because

3196
03:08:26,080 --> 03:08:28,640
if not it's just like um

3197
03:08:28,640 --> 03:08:30,080
you have to spend your night and

3198
03:08:30,080 --> 03:08:31,600
starting to

3199
03:08:31,600 --> 03:08:34,960
get all decimal data

3200
03:08:34,960 --> 03:08:36,960
don't give them permissions run them in

3201
03:08:36,960 --> 03:08:38,640
containers run them with minimum

3202
03:08:38,640 --> 03:08:41,120
permissions isolate them

3203
03:08:41,120 --> 03:08:44,399
like treat them as they should be they

3204
03:08:44,399 --> 03:08:46,960
don't need any access to nothing except

3205
03:08:46,960 --> 03:08:49,200
download the package and then give

3206
03:08:49,200 --> 03:08:52,160
someone else to install it

3207
03:08:52,160 --> 03:08:54,560
um other checks

3208
03:08:54,560 --> 03:08:56,640
if you have other checks the same just

3209
03:08:56,640 --> 03:08:58,960
run external audit checks don't use the

3210
03:08:58,960 --> 03:09:01,279
built-in other checks that they have

3211
03:09:01,279 --> 03:09:02,960
uh take

3212
03:09:02,960 --> 03:09:05,279
account of the specification file and

3213
03:09:05,279 --> 03:09:06,479
the log file

3214
03:09:06,479 --> 03:09:08,560
the log file they have different

3215
03:09:08,560 --> 03:09:11,200
purposes and different life cycles so

3216
03:09:11,200 --> 03:09:13,040
inside the developer machine

3217
03:09:13,040 --> 03:09:15,120
usually the specification file is what

3218
03:09:15,120 --> 03:09:17,359
counts inside the ci you want to make

3219
03:09:17,359 --> 03:09:19,680
sure the log file but then the log file

3220
03:09:19,680 --> 03:09:21,200
is also

3221
03:09:21,200 --> 03:09:23,920
the most like the correct source of

3222
03:09:23,920 --> 03:09:26,000
truth will be inside the container

3223
03:09:26,000 --> 03:09:28,080
inside the build itself you can see like

3224
03:09:28,080 --> 03:09:30,080
in node you have node models this is

3225
03:09:30,080 --> 03:09:32,720
what was really installed monitor it you

3226
03:09:32,720 --> 03:09:34,800
can know the package lock because you

3227
03:09:34,800 --> 03:09:37,200
want to shift left and do all the stuff

3228
03:09:37,200 --> 03:09:38,880
for the developers to fix

3229
03:09:38,880 --> 03:09:40,960
but at the end

3230
03:09:40,960 --> 03:09:42,960
i in the container itself will be the

3231
03:09:42,960 --> 03:09:44,560
source of truth

3232
03:09:44,560 --> 03:09:46,560
and verify out of store packages this is

3233
03:09:46,560 --> 03:09:48,720
all just like know which out of stock

3234
03:09:48,720 --> 03:09:50,399
packages you have

3235
03:09:50,399 --> 03:09:53,359
and make sure that nothing changes over

3236
03:09:53,359 --> 03:09:56,880
there lock them lock the hashes

3237
03:09:56,880 --> 03:09:58,800
i think that's it

3238
03:09:58,800 --> 03:10:02,080
i don't know how much time i have

3239
03:10:02,080 --> 03:10:04,640
you have plenty of time so questions so

3240
03:10:04,640 --> 03:10:07,200
i have 10 questions good

3241
03:10:07,200 --> 03:10:11,640
i got two questions yep

3242
03:10:25,279 --> 03:10:27,680
yeah so the question was

3243
03:10:27,680 --> 03:10:30,319
also the npm had

3244
03:10:30,319 --> 03:10:32,479
the domain hacks but also npm had the

3245
03:10:32,479 --> 03:10:34,960
2fa so npm did

3246
03:10:34,960 --> 03:10:37,359
they didn't force 2fa yet

3247
03:10:37,359 --> 03:10:38,399
they

3248
03:10:38,399 --> 03:10:41,200
are trying to roll out ufa they hold it

3249
03:10:41,200 --> 03:10:44,000
out to the high maintaining packages

3250
03:10:44,000 --> 03:10:47,279
but also 2fa is

3251
03:10:47,279 --> 03:10:49,920
it's it depends on how 2fa is done

3252
03:10:49,920 --> 03:10:51,840
because if 2fa is still done with the

3253
03:10:51,840 --> 03:10:53,200
email itself

3254
03:10:53,200 --> 03:10:55,279
then it's not really 2fa

3255
03:10:55,279 --> 03:10:56,399
um

3256
03:10:56,399 --> 03:10:57,120
so

3257
03:10:57,120 --> 03:10:59,760
it's just like it talks like that

3258
03:10:59,760 --> 03:11:02,000
yeah but if

3259
03:11:02,000 --> 03:11:03,760
yeah

3260
03:11:03,760 --> 03:11:07,960
just by buy all the domains

3261
03:11:15,439 --> 03:11:18,319
and no actually i didn't because blue is

3262
03:11:18,319 --> 03:11:20,560
like what i specialize in and what i'm

3263
03:11:20,560 --> 03:11:23,359
my research is a stuff in the ci cd

3264
03:11:23,359 --> 03:11:26,160
and blue isn't is more like in the start

3265
03:11:26,160 --> 03:11:28,720
of the developer line maybe one day i'll

3266
03:11:28,720 --> 03:11:30,640
get over there but it's not like in my

3267
03:11:30,640 --> 03:11:35,800
focus that i i'm looking at

3268
03:11:36,800 --> 03:11:39,358
good yes

3269
03:11:40,080 --> 03:11:41,840
what about what

3270
03:11:41,840 --> 03:11:44,239
new game gets microsoft

3271
03:11:44,239 --> 03:11:46,000
yeah i didn't play with microsoft yes

3272
03:11:46,000 --> 03:11:47,359
yet it's

3273
03:11:47,359 --> 03:11:48,560
in my plan

3274
03:11:48,560 --> 03:11:49,279
but

3275
03:11:49,279 --> 03:11:51,760
like i'm looking

3276
03:11:51,760 --> 03:11:52,800
mainly

3277
03:11:52,800 --> 03:11:55,439
i think npm is the most common package

3278
03:11:55,439 --> 03:11:57,840
manager then pip

3279
03:11:57,840 --> 03:12:00,319
we have some customers with ruby so

3280
03:12:00,319 --> 03:12:02,000
i looked at that

3281
03:12:02,000 --> 03:12:05,600
i know i don't like dotnet

3282
03:12:05,600 --> 03:12:06,980
good you got it in there

3283
03:12:06,980 --> 03:12:08,880
[Laughter]

3284
03:12:08,880 --> 03:12:12,640
so mpm install questions

3285
03:12:12,640 --> 03:12:13,359
no

3286
03:12:13,359 --> 03:12:15,680
yeah dash dash force yeah we have a

3287
03:12:15,680 --> 03:12:19,800
question yep go ahead

3288
03:12:21,439 --> 03:12:23,840
can i

3289
03:12:24,720 --> 03:12:26,880
private repository can you run can you

3290
03:12:26,880 --> 03:12:29,120
run a private repository

3291
03:12:29,120 --> 03:12:31,920
yeah yeah you can like lots of

3292
03:12:31,920 --> 03:12:32,820
companies use

3293
03:12:32,820 --> 03:12:33,920
[Music]

3294
03:12:33,920 --> 03:12:36,080
like a private repository like jfrog or

3295
03:12:36,080 --> 03:12:39,120
something uh something else the thing is

3296
03:12:39,120 --> 03:12:41,840
usually the private repository will be

3297
03:12:41,840 --> 03:12:43,680
proxied and milled by the public

3298
03:12:43,680 --> 03:12:45,600
repository actually a good

3299
03:12:45,600 --> 03:12:47,279
recommendation of mine

3300
03:12:47,279 --> 03:12:49,359
and i don't i didn't see anybody doing

3301
03:12:49,359 --> 03:12:52,640
it yet but if you can proxy the public

3302
03:12:52,640 --> 03:12:54,960
repository but give it a delay of two

3303
03:12:54,960 --> 03:12:58,640
weeks then let the hit the fan

3304
03:12:58,640 --> 03:13:01,520
for all the world and you will be

3305
03:13:01,520 --> 03:13:03,359
getting the new updates only after two

3306
03:13:03,359 --> 03:13:05,920
weeks and that way you can get protected

3307
03:13:05,920 --> 03:13:07,520
if everybody will do it then we will

3308
03:13:07,520 --> 03:13:09,359
have

3309
03:13:09,359 --> 03:13:11,920
after two weeks but

3310
03:13:11,920 --> 03:13:14,800
that's a different game

3311
03:13:14,800 --> 03:13:17,039
yes

3312
03:13:22,800 --> 03:13:24,960
you want to

3313
03:13:24,960 --> 03:13:27,760
so can you force npm to only use your

3314
03:13:27,760 --> 03:13:30,720
source of truth i think you can to use

3315
03:13:30,720 --> 03:13:32,479
only your private but then your private

3316
03:13:32,479 --> 03:13:33,600
is

3317
03:13:33,600 --> 03:13:36,080
mirrored to the public so

3318
03:13:36,080 --> 03:13:38,560
unless you're on an on-prem closed

3319
03:13:38,560 --> 03:13:41,279
solution you will always need a way

3320
03:13:41,279 --> 03:13:43,840
to get new data like your developers

3321
03:13:43,840 --> 03:13:46,080
will hate you if you don't get the

3322
03:13:46,080 --> 03:13:48,640
updated versions all the time

3323
03:13:48,640 --> 03:13:51,199
make sense

3324
03:13:55,760 --> 03:13:57,279
yeah i think two weeks is a good

3325
03:13:57,279 --> 03:13:59,760
solution

3326
03:14:04,000 --> 03:14:06,560
just if i inject a dot and pmlc and tell

3327
03:14:06,560 --> 03:14:08,319
it to go to public

3328
03:14:08,319 --> 03:14:10,160
so yeah there's a vape

3329
03:14:10,160 --> 03:14:12,239
there's a bypass

3330
03:14:12,239 --> 03:14:13,760
you just need to make sure that nobody

3331
03:14:13,760 --> 03:14:16,640
adds a dot and pmlc before you run it

3332
03:14:16,640 --> 03:14:19,120
because if you have a data and pmlc then

3333
03:14:19,120 --> 03:14:20,720
someone can just change the registry to

3334
03:14:20,720 --> 03:14:22,479
the public one back

3335
03:14:22,479 --> 03:14:25,120
or block the whole network to public and

3336
03:14:25,120 --> 03:14:27,359
get everybody walk through citrix and uh

3337
03:14:27,359 --> 03:14:28,160
like

3338
03:14:28,160 --> 03:14:30,160
in the old days

3339
03:14:30,160 --> 03:14:33,520
again the developers will hate you

3340
03:14:34,319 --> 03:14:37,720
anyone else

3341
03:14:39,040 --> 03:14:40,479
okay

3342
03:14:40,479 --> 03:14:41,760
then i guess

3343
03:14:41,760 --> 03:14:43,279
thank you very much for this very

3344
03:14:43,279 --> 03:14:44,560
interesting talk

3345
03:14:44,560 --> 03:14:46,960
thank you

3346
03:14:50,399 --> 03:14:51,520
okay

3347
03:14:51,520 --> 03:14:54,000
if you have any questions afterwards i'm

3348
03:14:54,000 --> 03:14:56,399
available here and if you mind i will

3349
03:14:56,399 --> 03:14:58,720
take a selfie with all of you

3350
03:14:58,720 --> 03:15:01,279
just for fun

3351
03:15:01,279 --> 03:15:03,439
charge

3352
03:15:03,439 --> 03:15:05,680
yay

3353
03:15:05,680 --> 03:15:07,120
great

3354
03:15:07,120 --> 03:15:09,840
so we're gonna do the human tetris again

3355
03:15:09,840 --> 03:15:11,520
because we want food no

3356
03:15:11,520 --> 03:15:13,840
everyone is hungry

3357
03:15:13,840 --> 03:15:16,080
uh

3358
03:15:16,080 --> 03:15:20,560
pretty early yeah so um that's why i'm

3359
03:15:20,560 --> 03:15:22,800
now i get something here it's like i can

3360
03:15:22,800 --> 03:15:23,600
see

3361
03:15:23,600 --> 03:15:27,040
are we ready for lunch

3362
03:15:28,880 --> 03:15:31,359
yeah right we're we're a lot of people

3363
03:15:31,359 --> 03:15:33,040
so we're gonna do this like lunch is

3364
03:15:33,040 --> 03:15:34,880
served in

3365
03:15:34,880 --> 03:15:36,640
20 minutes roughly we're gonna do it the

3366
03:15:36,640 --> 03:15:38,239
same way we did

3367
03:15:38,239 --> 03:15:40,000
uh yesterday lunch

3368
03:15:40,000 --> 03:15:42,880
so we will open those doors

3369
03:15:42,880 --> 03:15:45,040
you have to stand in the line don't kill

3370
03:15:45,040 --> 03:15:46,960
each other we worked out very good

3371
03:15:46,960 --> 03:15:48,720
yesterday no one died

3372
03:15:48,720 --> 03:15:50,399
that i'm aware of

3373
03:15:50,399 --> 03:15:52,239
and that's all that matters so if you

3374
03:15:52,239 --> 03:15:53,920
bury them deep enough i think it will be

3375
03:15:53,920 --> 03:15:54,880
safe

3376
03:15:54,880 --> 03:15:56,560
so you queue up here

3377
03:15:56,560 --> 03:15:59,279
you go through the left there will be

3378
03:15:59,279 --> 03:16:01,760
food right how many lines of food is

3379
03:16:01,760 --> 03:16:03,840
there

3380
03:16:04,080 --> 03:16:06,640
three right so there is two

3381
03:16:06,640 --> 03:16:09,200
for people that are eating meat and

3382
03:16:09,200 --> 03:16:11,200
there is one for those who does not eat

3383
03:16:11,200 --> 03:16:14,200
meat

3384
04:38:43,039 --> 04:38:45,199
everyone's been fed and watered

3385
04:38:45,199 --> 04:38:46,630
taco friday

3386
04:38:46,630 --> 04:38:46,990
[Music]

3387
04:38:46,990 --> 04:38:48,719
[Laughter]

3388
04:38:48,719 --> 04:38:50,639
uh just before we start i have a quick

3389
04:38:50,639 --> 04:38:54,160
announcement we uh we found a wallet

3390
04:38:54,160 --> 04:38:56,480
uh so uh we're putting that in the price

3391
04:38:56,480 --> 04:38:58,240
for pool for the ctf

3392
04:38:58,240 --> 04:39:01,719
now it's uh it belongs to a uh

3393
04:39:01,719 --> 04:39:05,359
materialsquist so if he's around please

3394
04:39:05,359 --> 04:39:08,080
come and find it in the streaming booth

3395
04:39:08,080 --> 04:39:11,520
and if you know him let him know

3396
04:39:11,520 --> 04:39:13,359
uh if he hasn't shown up we'll hand it

3397
04:39:13,359 --> 04:39:17,520
to the the staff here at the hotel so

3398
04:39:17,520 --> 04:39:18,879
yeah

3399
04:39:18,879 --> 04:39:21,438
okay uh without further ado please uh

3400
04:39:21,438 --> 04:39:23,199
join me in welcoming our next speaker mr

3401
04:39:23,199 --> 04:39:25,840
dan eagle

3402
04:39:27,359 --> 04:39:30,879
test test we're good

3403
04:39:30,879 --> 04:39:32,799
good afternoon everybody

3404
04:39:32,799 --> 04:39:35,759
my name is dan nagel and this is

3405
04:39:35,759 --> 04:39:39,120
hacking network apis before i

3406
04:39:39,120 --> 04:39:41,120
dive into it i want to just touch a

3407
04:39:41,120 --> 04:39:42,958
little bit about the logistics about how

3408
04:39:42,958 --> 04:39:44,320
this is going to work

3409
04:39:44,320 --> 04:39:48,638
so it is a series of three demos part

3410
04:39:48,638 --> 04:39:51,680
one part two and part three i did not

3411
04:39:51,680 --> 04:39:53,600
know how much time i would have so i

3412
04:39:53,600 --> 04:39:55,440
bought brought three demos and the

3413
04:39:55,440 --> 04:39:57,520
organizers were kind enough to say do

3414
04:39:57,520 --> 04:39:59,520
all three of them

3415
04:39:59,520 --> 04:40:01,440
so that's great

3416
04:40:01,440 --> 04:40:03,920
um so what we'll do since it's gonna be

3417
04:40:03,920 --> 04:40:06,160
kind of long is i'm gonna do part one

3418
04:40:06,160 --> 04:40:09,040
part two we'll do a quick break

3419
04:40:09,040 --> 04:40:11,440
i'll set up part three

3420
04:40:11,440 --> 04:40:13,600
and then we'll do part three

3421
04:40:13,600 --> 04:40:15,920
this also helps me because one of my

3422
04:40:15,920 --> 04:40:18,400
power adapters got tsa'd

3423
04:40:18,400 --> 04:40:20,480
if you've ever flown in america you'll

3424
04:40:20,480 --> 04:40:22,240
know what that means and your response

3425
04:40:22,240 --> 04:40:24,400
will be say no more

3426
04:40:24,400 --> 04:40:26,798
so it did not survive the trip over here

3427
04:40:26,798 --> 04:40:28,320
but that's okay

3428
04:40:28,320 --> 04:40:30,718
let's get started

3429
04:40:30,718 --> 04:40:32,320
so about me

3430
04:40:32,320 --> 04:40:34,958
i'm a senior cyber engineer doing uh vr

3431
04:40:34,958 --> 04:40:36,240
research

3432
04:40:36,240 --> 04:40:39,200
and i'm also a software engineer i've

3433
04:40:39,200 --> 04:40:42,000
written a lot of software desktop dats

3434
04:40:42,000 --> 04:40:43,360
mobile apps

3435
04:40:43,360 --> 04:40:45,840
embedded servers firmware electrical

3436
04:40:45,840 --> 04:40:48,798
engineering but my claim to fame what

3437
04:40:48,798 --> 04:40:50,160
i'll be talking about today is i'm the

3438
04:40:50,160 --> 04:40:52,160
author inventor of pakistander which

3439
04:40:52,160 --> 04:40:54,320
you'll see on full display

3440
04:40:54,320 --> 04:40:55,600
for these demos

3441
04:40:55,600 --> 04:40:58,080
it's available everywhere i think as of

3442
04:40:58,080 --> 04:41:00,798
last month it has passed 1 million

3443
04:41:00,798 --> 04:41:03,040
downloads and it's currently tracking on

3444
04:41:03,040 --> 04:41:05,440
about 400 downloads a day

3445
04:41:05,440 --> 04:41:08,000
it's being taught in universities

3446
04:41:08,000 --> 04:41:09,600
i know at least uh

3447
04:41:09,600 --> 04:41:11,120
one in france has a part of their

3448
04:41:11,120 --> 04:41:13,360
coursework in new york if you're gonna

3449
04:41:13,360 --> 04:41:14,878
take a class you'll have a three-part

3450
04:41:14,878 --> 04:41:17,040
lab series on packet center and i get

3451
04:41:17,040 --> 04:41:19,280
lots of hits for senior design students

3452
04:41:19,280 --> 04:41:21,200
you'll see plenty of that in this

3453
04:41:21,200 --> 04:41:22,480
presentation

3454
04:41:22,480 --> 04:41:24,878
i'm also the author of this book which

3455
04:41:24,878 --> 04:41:27,440
you should not buy

3456
04:41:27,440 --> 04:41:29,600
because it is at least eight years out

3457
04:41:29,600 --> 04:41:32,480
of date it's about web game development

3458
04:41:32,480 --> 04:41:34,560
and i cannot think of any technology

3459
04:41:34,560 --> 04:41:37,680
that moves faster than gaming and web

3460
04:41:37,680 --> 04:41:39,600
and i wrote a book so if you want to see

3461
04:41:39,600 --> 04:41:42,080
how that state of development was eight

3462
04:41:42,080 --> 04:41:44,240
years ago you can pick this up

3463
04:41:44,240 --> 04:41:46,798
there is one part that is still relevant

3464
04:41:46,798 --> 04:41:49,120
let me find it it's about

3465
04:41:49,120 --> 04:41:50,878
15 pages

3466
04:41:50,878 --> 04:41:53,680
where i talk about installers how to

3467
04:41:53,680 --> 04:41:55,760
build an installer on windows mac that

3468
04:41:55,760 --> 04:41:57,200
actually has not changed much in the

3469
04:41:57,200 --> 04:42:00,480
past 10 years so that is still relevant

3470
04:42:00,480 --> 04:42:02,878
i believe on apple you have to notarize

3471
04:42:02,878 --> 04:42:04,320
your app now so that's the only

3472
04:42:04,320 --> 04:42:06,160
difference so if you want to flip

3473
04:42:06,160 --> 04:42:08,480
through it i brought a copy so you don't

3474
04:42:08,480 --> 04:42:11,360
have to buy one

3475
04:42:11,600 --> 04:42:13,920
i'm the also the author of two network

3476
04:42:13,920 --> 04:42:14,958
patents

3477
04:42:14,958 --> 04:42:17,280
does sweden care about u.s patents i

3478
04:42:17,280 --> 04:42:19,680
don't know

3479
04:42:20,000 --> 04:42:21,680
perhaps they do but anyway we can talk

3480
04:42:21,680 --> 04:42:24,080
about that but i want to get into the

3481
04:42:24,080 --> 04:42:26,160
demo

3482
04:42:26,160 --> 04:42:26,958
so

3483
04:42:26,958 --> 04:42:29,280
are we all familiar with wireshark

3484
04:42:29,280 --> 04:42:30,798
yes most people

3485
04:42:30,798 --> 04:42:32,958
absolutely amazing packet sniffing tool

3486
04:42:32,958 --> 04:42:34,718
if you ever get into

3487
04:42:34,718 --> 04:42:36,480
network development troubleshooting

3488
04:42:36,480 --> 04:42:37,920
you'll become very familiar with this

3489
04:42:37,920 --> 04:42:39,680
tool and you'll you'll absolutely love

3490
04:42:39,680 --> 04:42:41,200
that it's available

3491
04:42:41,200 --> 04:42:43,280
in tandem with wireshark

3492
04:42:43,280 --> 04:42:44,160
is

3493
04:42:44,160 --> 04:42:45,200
my app

3494
04:42:45,200 --> 04:42:46,638
packet center for packet sending and

3495
04:42:46,638 --> 04:42:47,600
receiving

3496
04:42:47,600 --> 04:42:49,840
the idea behind it is you launch

3497
04:42:49,840 --> 04:42:52,320
pakistan there right here on one window

3498
04:42:52,320 --> 04:42:54,560
wireshark on the other between the two

3499
04:42:54,560 --> 04:42:56,638
of them you can troubleshoot

3500
04:42:56,638 --> 04:42:58,320
reverse engineer just about any network

3501
04:42:58,320 --> 04:43:01,760
protocol and you'll see plenty of that

3502
04:43:01,760 --> 04:43:03,680
i'm going to do just a quick

3503
04:43:03,680 --> 04:43:05,440
run through before moving on because

3504
04:43:05,440 --> 04:43:07,040
it's a whole lot easier to understand if

3505
04:43:07,040 --> 04:43:09,280
you just see it

3506
04:43:09,280 --> 04:43:12,400
so here it is launches immediately

3507
04:43:12,400 --> 04:43:15,440
that's thanks to c plus plus not

3508
04:43:15,440 --> 04:43:16,798
electron

3509
04:43:16,798 --> 04:43:18,638
desktop apps that was talked about the

3510
04:43:18,638 --> 04:43:20,080
other day

3511
04:43:20,080 --> 04:43:22,240
so it launched very fast up at the top

3512
04:43:22,240 --> 04:43:24,320
you get your ip addresses your current

3513
04:43:24,320 --> 04:43:25,920
ip addresses sometimes you just want to

3514
04:43:25,920 --> 04:43:27,920
know your ip address and

3515
04:43:27,920 --> 04:43:29,360
i don't know why but operating systems

3516
04:43:29,360 --> 04:43:31,760
like to bury that somewhere

3517
04:43:31,760 --> 04:43:33,520
but here you look at the top

3518
04:43:33,520 --> 04:43:36,080
if you want to know more the subnets

3519
04:43:36,080 --> 04:43:38,000
that's all right here

3520
04:43:38,000 --> 04:43:40,080
and then you set up your packet name the

3521
04:43:40,080 --> 04:43:41,680
ascii

3522
04:43:41,680 --> 04:43:43,680
any kind of ascii notation

3523
04:43:43,680 --> 04:43:46,240
uh supports slash codes slash r slash n

3524
04:43:46,240 --> 04:43:48,160
slash t if you've done software

3525
04:43:48,160 --> 04:43:49,760
development you'll know what that means

3526
04:43:49,760 --> 04:43:51,840
control line feed tab and it gets

3527
04:43:51,840 --> 04:43:53,920
translated to hex right here so between

3528
04:43:53,920 --> 04:43:55,440
the two of these you can define just

3529
04:43:55,440 --> 04:43:57,680
about any kind of

3530
04:43:57,680 --> 04:44:00,400
packet system that you care about

3531
04:44:00,400 --> 04:44:03,440
so any kind of format

3532
04:44:03,440 --> 04:44:06,080
this line is actually very very

3533
04:44:06,080 --> 04:44:07,760
forgiving

3534
04:44:07,760 --> 04:44:10,160
so i know a lot of places

3535
04:44:10,160 --> 04:44:12,400
they use colons

3536
04:44:12,400 --> 04:44:15,120
to separate the hex

3537
04:44:15,120 --> 04:44:17,120
so you can put colons right there

3538
04:44:17,120 --> 04:44:20,480
uh you can put you know x's you can put

3539
04:44:20,480 --> 04:44:24,000
spaces i know some tools use uh h's to

3540
04:44:24,000 --> 04:44:26,000
designate hex

3541
04:44:26,000 --> 04:44:28,480
and it'll just uh fix it

3542
04:44:28,480 --> 04:44:31,200
uh you can even have

3543
04:44:31,200 --> 04:44:31,920
just no

3544
04:44:31,920 --> 04:44:33,200
[Music]

3545
04:44:33,200 --> 04:44:35,520
deliminator

3546
04:44:35,520 --> 04:44:38,878
at all and i'll fix it so

3547
04:44:38,878 --> 04:44:40,080
you should be able to copy and paste

3548
04:44:40,080 --> 04:44:42,080
from just about anything and put it in

3549
04:44:42,080 --> 04:44:43,920
and when all else fails

3550
04:44:43,920 --> 04:44:47,520
load your file directly and toss it in

3551
04:44:47,520 --> 04:44:49,680
and you're good to go

3552
04:44:49,680 --> 04:44:52,080
once you have your data you set your ip

3553
04:44:52,080 --> 04:44:53,760
address i have one set up right here

3554
04:44:53,760 --> 04:44:56,958
your port resend this supports uh down

3555
04:44:56,958 --> 04:44:59,760
to tenths of a millisecond

3556
04:44:59,760 --> 04:45:04,320
and uh tcp udp and http protocols which

3557
04:45:04,320 --> 04:45:06,638
i will not get into today but

3558
04:45:06,638 --> 04:45:09,440
uh familiar with the tool uh postman so

3559
04:45:09,440 --> 04:45:11,120
this has kind of its own little mini

3560
04:45:11,120 --> 04:45:13,520
postman system going on

3561
04:45:13,520 --> 04:45:15,440
and down at the bottom it can listen to

3562
04:45:15,440 --> 04:45:17,920
any number of ports that you want so udp

3563
04:45:17,920 --> 04:45:21,480
tcp ssl those reports listening to

3564
04:45:21,480 --> 04:45:24,718
ipv456 we'll just do a quick test

3565
04:45:24,718 --> 04:45:26,320
so send

3566
04:45:26,320 --> 04:45:28,718
if you're familiar with the dns lookup

3567
04:45:28,718 --> 04:45:31,680
system then this packet might make sense

3568
04:45:31,680 --> 04:45:32,560
to you

3569
04:45:32,560 --> 04:45:34,878
turn on persistent tcp so you can hold a

3570
04:45:34,878 --> 04:45:36,080
connection

3571
04:45:36,080 --> 04:45:37,840
and i just did an ftp connection into

3572
04:45:37,840 --> 04:45:40,400
debian sent it and that's the response

3573
04:45:40,400 --> 04:45:42,638
from the ftp wn server

3574
04:45:42,638 --> 04:45:44,878
here's another good one

3575
04:45:44,878 --> 04:45:47,600
uh we'll move down to an ssl connection

3576
04:45:47,600 --> 04:45:52,480
so smtp for gmail there it is

3577
04:45:52,480 --> 04:45:54,000
so it did an encrypted connection

3578
04:45:54,000 --> 04:45:56,320
handled the negotiation and it sent back

3579
04:45:56,320 --> 04:45:58,560
the response so you can do encrypted

3580
04:45:58,560 --> 04:46:00,718
testing if you want with your those

3581
04:46:00,718 --> 04:46:03,120
sockets

3582
04:46:03,120 --> 04:46:07,200
this collapses if you want when it does

3583
04:46:07,200 --> 04:46:08,638
an ssl connection it gives you

3584
04:46:08,638 --> 04:46:11,040
information about the ssl itself

3585
04:46:11,040 --> 04:46:14,000
so it made the negotiation and encrypted

3586
04:46:14,000 --> 04:46:15,120
with the

3587
04:46:15,120 --> 04:46:18,160
founders or gts that's google assert

3588
04:46:18,160 --> 04:46:19,200
i'm not

3589
04:46:19,200 --> 04:46:20,878
authenticated with anybody because it's

3590
04:46:20,878 --> 04:46:22,240
a self-signed

3591
04:46:22,240 --> 04:46:27,520
and aes 256 was the encryption scheme so

3592
04:46:27,520 --> 04:46:30,080
another useful thing about this um

3593
04:46:30,080 --> 04:46:32,480
when you're developing sockets and

3594
04:46:32,480 --> 04:46:35,680
encrypted sockets your ssl may not be

3595
04:46:35,680 --> 04:46:37,680
ready yet or there's probably bugs that

3596
04:46:37,680 --> 04:46:40,560
you're trying to figure out

3597
04:46:40,560 --> 04:46:43,760
so we'll do a quick test of that

3598
04:46:43,760 --> 04:46:44,878
with

3599
04:46:44,878 --> 04:46:48,240
cert mismatch there we go right here so

3600
04:46:48,240 --> 04:46:51,040
i made a connection

3601
04:46:51,040 --> 04:46:53,200
and

3602
04:46:53,200 --> 04:46:55,600
it did not match the host

3603
04:46:55,600 --> 04:46:58,160
with this certificate so

3604
04:46:58,160 --> 04:46:59,600
there's a certificate error and it tells

3605
04:46:59,600 --> 04:47:00,718
you what it is

3606
04:47:00,718 --> 04:47:03,360
and but what it does it just connects

3607
04:47:03,360 --> 04:47:06,320
anyway so you can transfer your data

3608
04:47:06,320 --> 04:47:08,240
and then figure out later why it's not

3609
04:47:08,240 --> 04:47:10,718
working for you

3610
04:47:10,718 --> 04:47:13,520
as with every nice tool

3611
04:47:13,520 --> 04:47:15,600
there's easter eggs

3612
04:47:15,600 --> 04:47:18,560
so i'll show you right here

3613
04:47:18,560 --> 04:47:21,840
if you want to admire my two puppies

3614
04:47:21,840 --> 04:47:25,200
hold control pup

3615
04:47:25,600 --> 04:47:26,560
that

3616
04:47:26,560 --> 04:47:28,000
shipped for free with every version of

3617
04:47:28,000 --> 04:47:30,958
pakistan just for you and of course

3618
04:47:30,958 --> 04:47:35,280
there is the command line interface

3619
04:47:35,280 --> 04:47:36,798
just about everything you can do over

3620
04:47:36,798 --> 04:47:39,520
here you can do over here

3621
04:47:39,520 --> 04:47:41,200
uh one in particular that might be of

3622
04:47:41,200 --> 04:47:44,480
interest to you is this right here this

3623
04:47:44,480 --> 04:47:46,958
is the intense udp

3624
04:47:46,958 --> 04:47:48,878
traffic generator tool so you can just

3625
04:47:48,878 --> 04:47:50,320
flood your network and you get a few

3626
04:47:50,320 --> 04:47:52,400
knobs about how you want to flood it

3627
04:47:52,400 --> 04:47:54,160
i actually got an email about this the

3628
04:47:54,160 --> 04:47:55,600
other day

3629
04:47:55,600 --> 04:47:57,600
somebody was telling me it's like

3630
04:47:57,600 --> 04:47:59,920
i think someone's ddosing me with this

3631
04:47:59,920 --> 04:48:01,680
tool this uh

3632
04:48:01,680 --> 04:48:03,200
traffic generator and he sent a

3633
04:48:03,200 --> 04:48:04,878
screenshot of it

3634
04:48:04,878 --> 04:48:07,040
and my answer was

3635
04:48:07,040 --> 04:48:08,798
well that's neat

3636
04:48:08,798 --> 04:48:10,400
why would they use that when they could

3637
04:48:10,400 --> 04:48:13,520
use the command line which is faster

3638
04:48:13,520 --> 04:48:17,200
and you get more knobs to tweak it

3639
04:48:19,040 --> 04:48:21,040
alright so that's a quick run through of

3640
04:48:21,040 --> 04:48:23,040
packet cinder

3641
04:48:23,040 --> 04:48:26,080
screen shots are good

3642
04:48:26,080 --> 04:48:28,240
what i have in bold are the things i'm

3643
04:48:28,240 --> 04:48:30,240
going to cover today so we just got a

3644
04:48:30,240 --> 04:48:32,080
brief overview of pakistan we're going

3645
04:48:32,080 --> 04:48:34,320
to control devices beyond the original

3646
04:48:34,320 --> 04:48:35,200
apps

3647
04:48:35,200 --> 04:48:37,120
uh the idea being i'm gonna have i have

3648
04:48:37,120 --> 04:48:40,480
an app running on here and just say it's

3649
04:48:40,480 --> 04:48:42,560
windows only but you're a linux user you

3650
04:48:42,560 --> 04:48:43,760
want to reverse engineer there's all

3651
04:48:43,760 --> 04:48:45,280
kinds of valid reasons you want to

3652
04:48:45,280 --> 04:48:46,638
reverse engineer so we're going to

3653
04:48:46,638 --> 04:48:48,240
reverse engineer it

3654
04:48:48,240 --> 04:48:49,920
for automation

3655
04:48:49,920 --> 04:48:52,160
uh you saw the command line utility just

3656
04:48:52,160 --> 04:48:53,440
by anything you do in the command line

3657
04:48:53,440 --> 04:48:54,878
you can script

3658
04:48:54,878 --> 04:48:57,920
and then the malware analysis so let's

3659
04:48:57,920 --> 04:49:00,240
get this going

3660
04:49:00,240 --> 04:49:02,320
before i had to go further

3661
04:49:02,320 --> 04:49:03,920
does everybody know what the difference

3662
04:49:03,920 --> 04:49:06,878
between udp and tcp

3663
04:49:06,878 --> 04:49:09,200
i see half the knots

3664
04:49:09,200 --> 04:49:11,520
the way you remember is

3665
04:49:11,520 --> 04:49:13,680
tcp point to point

3666
04:49:13,680 --> 04:49:17,360
guaranteed delivery error correction udp

3667
04:49:17,360 --> 04:49:19,280
send and forget now there's all kinds of

3668
04:49:19,280 --> 04:49:21,680
reasons why you would want to use udp

3669
04:49:21,680 --> 04:49:24,160
versus tcp you'll get to see both an

3670
04:49:24,160 --> 04:49:25,440
action

3671
04:49:25,440 --> 04:49:27,440
but just keep that in mind as we go

3672
04:49:27,440 --> 04:49:29,840
through this

3673
04:49:31,760 --> 04:49:32,638
all right

3674
04:49:32,638 --> 04:49:34,878
pi player

3675
04:49:34,878 --> 04:49:37,360
i have pie player running on my

3676
04:49:37,360 --> 04:49:39,280
raspberry pi right here it is open

3677
04:49:39,280 --> 04:49:42,080
source i wrote it specifically to be

3678
04:49:42,080 --> 04:49:44,000
reverse engineered during live

3679
04:49:44,000 --> 04:49:46,320
demonstrations i didn't want to

3680
04:49:46,320 --> 04:49:47,200
um

3681
04:49:47,200 --> 04:49:48,400
hack

3682
04:49:48,400 --> 04:49:50,878
i mean one called hack i don't want to

3683
04:49:50,878 --> 04:49:52,798
reverse engineer or hack someone else's

3684
04:49:52,798 --> 04:49:54,878
tool you know live on stage so i made my

3685
04:49:54,878 --> 04:49:58,160
own tool just to hack it on stage and i

3686
04:49:58,160 --> 04:50:00,560
it's right there on pi player it has a

3687
04:50:00,560 --> 04:50:02,240
the web server

3688
04:50:02,240 --> 04:50:03,680
actually is not a web server it's

3689
04:50:03,680 --> 04:50:06,320
control server tcp raw server

3690
04:50:06,320 --> 04:50:08,878
built straight sockets it has a desktop

3691
04:50:08,878 --> 04:50:10,638
app and there is a web app if you're

3692
04:50:10,638 --> 04:50:13,440
interested in using it to make some kind

3693
04:50:13,440 --> 04:50:15,600
of music player of your own it's not a

3694
04:50:15,600 --> 04:50:18,480
very good music player but it's great

3695
04:50:18,480 --> 04:50:21,280
for live demos

3696
04:50:22,718 --> 04:50:24,798
the raspberry pi 400 it's actually

3697
04:50:24,798 --> 04:50:26,080
fairly new

3698
04:50:26,080 --> 04:50:28,958
has everybody seen one of these

3699
04:50:28,958 --> 04:50:30,000
it's

3700
04:50:30,000 --> 04:50:33,120
it's very new i think it may be like six

3701
04:50:33,120 --> 04:50:36,080
months old but this is a self-contained

3702
04:50:36,080 --> 04:50:39,440
raspberry pi 4. so it used to be you you

3703
04:50:39,440 --> 04:50:41,200
would get a box and you'd assemble it

3704
04:50:41,200 --> 04:50:43,040
you would have to like

3705
04:50:43,040 --> 04:50:46,080
glue the fan on it but if you're lazy

3706
04:50:46,080 --> 04:50:47,600
like me and you're just like well here's

3707
04:50:47,600 --> 04:50:50,400
an extra 20 bucks just do it all for me

3708
04:50:50,400 --> 04:50:53,360
you can order these guys and it's

3709
04:50:53,360 --> 04:50:55,920
so convenient i just want to make clear

3710
04:50:55,920 --> 04:50:57,600
that this is this it doesn't look like

3711
04:50:57,600 --> 04:51:01,040
one but it actually is a raspberry pi

3712
04:51:01,040 --> 04:51:03,920
all right let's do this

3713
04:51:03,920 --> 04:51:06,958
here's my setup pi switch

3714
04:51:06,958 --> 04:51:08,320
display

3715
04:51:08,320 --> 04:51:10,798
we're good

3716
04:51:13,120 --> 04:51:15,760
okay

3717
04:51:15,760 --> 04:51:18,638
this is the pie player app

3718
04:51:18,638 --> 04:51:20,320
what i'm

3719
04:51:20,320 --> 04:51:21,760
can you see that there's four buttons up

3720
04:51:21,760 --> 04:51:23,520
there it's hard to see there's actually

3721
04:51:23,520 --> 04:51:25,120
four buttons i didn't realize it's so

3722
04:51:25,120 --> 04:51:27,760
dark but at the top it's going to find

3723
04:51:27,760 --> 04:51:30,080
the raspberry pi

3724
04:51:30,080 --> 04:51:32,160
so i just found it and the other buttons

3725
04:51:32,160 --> 04:51:37,120
become enabled play next and stop

3726
04:51:37,360 --> 04:51:39,520
so

3727
04:51:40,560 --> 04:51:43,280
so i hit play the command came in and

3728
04:51:43,280 --> 04:51:44,480
now

3729
04:51:44,480 --> 04:51:46,958
my display is playing music now play the

3730
04:51:46,958 --> 04:51:48,400
next song

3731
04:51:48,400 --> 04:51:51,120
so with the next button

3732
04:51:51,120 --> 04:51:54,399
hit next here we go

3733
04:51:54,718 --> 04:51:58,160
there it goes and stop obviously so i

3734
04:51:58,160 --> 04:52:00,958
want to reverse engineer this app

3735
04:52:00,958 --> 04:52:03,440
so i need to figure out what those four

3736
04:52:03,440 --> 04:52:04,798
buttons do

3737
04:52:04,798 --> 04:52:06,480
i need to figure out how this display

3738
04:52:06,480 --> 04:52:08,798
finds the raspberry pi i need to find

3739
04:52:08,798 --> 04:52:10,958
out how it the play button works i need

3740
04:52:10,958 --> 04:52:12,320
to find out how the next button works in

3741
04:52:12,320 --> 04:52:14,878
the stop so that is my goal for this

3742
04:52:14,878 --> 04:52:16,718
demonstration

3743
04:52:16,718 --> 04:52:19,760
and if you remember our discussion that

3744
04:52:19,760 --> 04:52:21,280
i basically skipped since you're all

3745
04:52:21,280 --> 04:52:23,680
experts about the difference between udp

3746
04:52:23,680 --> 04:52:26,320
and tcp i want you to think about what

3747
04:52:26,320 --> 04:52:29,520
each button could be

3748
04:52:29,920 --> 04:52:32,638
so to get started

3749
04:52:32,638 --> 04:52:36,600
we launched good old wireshark

3750
04:52:40,878 --> 04:52:42,160
so i know

3751
04:52:42,160 --> 04:52:44,560
at least i think it was about 50 nodded

3752
04:52:44,560 --> 04:52:46,320
yes but for those

3753
04:52:46,320 --> 04:52:47,840
who were shy

3754
04:52:47,840 --> 04:52:50,080
and didn't say yes it's okay you're

3755
04:52:50,080 --> 04:52:52,080
you're learning

3756
04:52:52,080 --> 04:52:54,560
wireshark picks up packets that are

3757
04:52:54,560 --> 04:52:56,958
listening on to the wire and what i want

3758
04:52:56,958 --> 04:52:58,958
to do is

3759
04:52:58,958 --> 04:53:02,160
look here and see that i have actually

3760
04:53:02,160 --> 04:53:05,280
let me disconnect from

3761
04:53:05,280 --> 04:53:08,638
wi-fi there we go

3762
04:53:08,638 --> 04:53:10,798
whenever i do network troubleshooting i

3763
04:53:10,798 --> 04:53:13,840
highly advise you go into your settings

3764
04:53:13,840 --> 04:53:15,840
and just disable the network adapters

3765
04:53:15,840 --> 04:53:17,760
you do not care about it'll save you a

3766
04:53:17,760 --> 04:53:19,040
lot of hassle

3767
04:53:19,040 --> 04:53:20,560
then on

3768
04:53:20,560 --> 04:53:22,320
i've seen so many weirdness especially

3769
04:53:22,320 --> 04:53:25,040
with vmware if you all use vmware uh

3770
04:53:25,040 --> 04:53:27,120
what'll do vmware loves to pick up a

3771
04:53:27,120 --> 04:53:29,040
random ip address that conflicts with

3772
04:53:29,040 --> 04:53:31,280
other things their network also docker

3773
04:53:31,280 --> 04:53:33,280
is really bad about doing that docker is

3774
04:53:33,280 --> 04:53:34,560
extremely common

3775
04:53:34,560 --> 04:53:35,360
so

3776
04:53:35,360 --> 04:53:37,718
i think it defaults to

3777
04:53:37,718 --> 04:53:40,000
172.12 or something which is extremely

3778
04:53:40,000 --> 04:53:42,718
common for local networks so just go in

3779
04:53:42,718 --> 04:53:45,120
there disable all of them except

3780
04:53:45,120 --> 04:53:46,798
the one that you want it'll save you a

3781
04:53:46,798 --> 04:53:48,958
lot of troubleshooting later

3782
04:53:48,958 --> 04:53:52,000
so i'm going to listen on let me restart

3783
04:53:52,000 --> 04:53:55,040
since i confused it

3784
04:53:57,600 --> 04:54:00,240
there we go there is

3785
04:54:00,240 --> 04:54:02,240
my ethernet

3786
04:54:02,240 --> 04:54:04,480
and i'm going to listen for

3787
04:54:04,480 --> 04:54:05,680
udp

3788
04:54:05,680 --> 04:54:07,520
or tcp

3789
04:54:07,520 --> 04:54:10,958
traffic on ethernet

3790
04:54:10,958 --> 04:54:12,000
there we go

3791
04:54:12,000 --> 04:54:14,160
traffic is happening

3792
04:54:14,160 --> 04:54:14,840
we

3793
04:54:14,840 --> 04:54:19,920
start i'm going to find the raspberry pi

3794
04:54:20,000 --> 04:54:22,560
is the button is going to be udp or tcp

3795
04:54:22,560 --> 04:54:25,280
which do you think it is

3796
04:54:26,320 --> 04:54:30,200
udp we'll see

3797
04:54:30,320 --> 04:54:34,798
and you are correct we have udp

3798
04:54:34,878 --> 04:54:37,280
it can't be tcp because tcp is

3799
04:54:37,280 --> 04:54:38,878
guaranteed delivery and has no idea

3800
04:54:38,878 --> 04:54:39,920
where it is

3801
04:54:39,920 --> 04:54:42,718
so that's one way to think about it

3802
04:54:42,718 --> 04:54:46,000
and let's look at the address

3803
04:54:46,000 --> 04:54:47,680
so it's sent to two five five two five

3804
04:54:47,680 --> 04:54:49,280
five two five five

3805
04:54:49,280 --> 04:54:52,559
what's special about that address

3806
04:54:52,718 --> 04:54:55,520
it's a broadcast that's right

3807
04:54:55,520 --> 04:54:58,000
so the way it works hit the button it

3808
04:54:58,000 --> 04:54:59,600
sent the packet to the switch and it

3809
04:54:59,600 --> 04:55:01,440
relayed it to everybody and the

3810
04:55:01,440 --> 04:55:03,360
raspberry pi replied back and that's how

3811
04:55:03,360 --> 04:55:05,840
it found it now how did it

3812
04:55:05,840 --> 04:55:08,878
what did it do after that

3813
04:55:08,878 --> 04:55:12,320
we can look at the response

3814
04:55:12,320 --> 04:55:13,360
and

3815
04:55:13,360 --> 04:55:14,400
there it is

3816
04:55:14,400 --> 04:55:16,798
server address colon its own address so

3817
04:55:16,798 --> 04:55:18,320
that's how it found the raspberry pi

3818
04:55:18,320 --> 04:55:20,718
that's what i need to replicate

3819
04:55:20,718 --> 04:55:25,718
so let's launch packet sender

3820
04:55:28,240 --> 04:55:30,080
two five five two by five

3821
04:55:30,080 --> 04:55:32,560
[Music]

3822
04:55:32,560 --> 04:55:34,400
what port

3823
04:55:34,400 --> 04:55:37,680
port fifteen thousand

3824
04:55:38,000 --> 04:55:39,040
fifteen

3825
04:55:39,040 --> 04:55:40,400
thousand

3826
04:55:40,400 --> 04:55:41,840
and it did

3827
04:55:41,840 --> 04:55:44,560
fine it did

3828
04:55:44,560 --> 04:55:46,480
that was the response what did it send

3829
04:55:46,480 --> 04:55:47,680
ascent

3830
04:55:47,680 --> 04:55:48,638
find

3831
04:55:48,638 --> 04:55:51,638
units

3832
04:55:58,160 --> 04:56:00,480
all right this should work

3833
04:56:00,480 --> 04:56:02,718
then send

3834
04:56:02,718 --> 04:56:04,878
port cannot be play

3835
04:56:04,878 --> 04:56:08,280
too many zeros

3836
04:56:09,280 --> 04:56:10,958
there it is

3837
04:56:10,958 --> 04:56:12,160
so

3838
04:56:12,160 --> 04:56:13,840
i reverse engineered that button now i

3839
04:56:13,840 --> 04:56:15,040
need to reverse engineer the other

3840
04:56:15,040 --> 04:56:17,360
buttons

3841
04:56:18,400 --> 04:56:21,958
so hit play

3842
04:56:24,638 --> 04:56:26,240
there it is

3843
04:56:26,240 --> 04:56:28,560
next

3844
04:56:28,560 --> 04:56:29,680
stop

3845
04:56:29,680 --> 04:56:30,878
now

3846
04:56:30,878 --> 04:56:32,320
i want to

3847
04:56:32,320 --> 04:56:33,920
side note

3848
04:56:33,920 --> 04:56:35,840
you notice when i hit play there was

3849
04:56:35,840 --> 04:56:37,840
like a pause going on

3850
04:56:37,840 --> 04:56:39,760
or sometimes at the end i hit stop

3851
04:56:39,760 --> 04:56:41,920
there's a pause going on

3852
04:56:41,920 --> 04:56:44,160
the there's two reasons for that that

3853
04:56:44,160 --> 04:56:45,600
have nothing to do with the network

3854
04:56:45,600 --> 04:56:47,440
first of all it is a raspberry pi and

3855
04:56:47,440 --> 04:56:48,160
it's

3856
04:56:48,160 --> 04:56:51,760
it's reading up a very slow sd card

3857
04:56:51,760 --> 04:56:52,638
also

3858
04:56:52,638 --> 04:56:54,400
there are

3859
04:56:54,400 --> 04:56:56,878
serious inefficiencies in my pi player

3860
04:56:56,878 --> 04:56:59,920
code that i did not bother to fix

3861
04:56:59,920 --> 04:57:01,280
now um

3862
04:57:01,280 --> 04:57:04,560
we have been doing lots of uh asking if

3863
04:57:04,560 --> 04:57:05,920
there are any questions i'm just going

3864
04:57:05,920 --> 04:57:07,360
to see some questions throughout that

3865
04:57:07,360 --> 04:57:10,000
you can ask me you can ask me

3866
04:57:10,000 --> 04:57:12,798
why is your code slow so that's

3867
04:57:12,798 --> 04:57:14,480
something you can ask about for pi

3868
04:57:14,480 --> 04:57:15,680
player

3869
04:57:15,680 --> 04:57:18,878
because i would love to deep dive into

3870
04:57:18,878 --> 04:57:22,480
optimizations for code

3871
04:57:22,480 --> 04:57:24,878
all right so we pl we played with next

3872
04:57:24,878 --> 04:57:25,920
and we stopped let's see what those

3873
04:57:25,920 --> 04:57:27,360
commands are

3874
04:57:27,360 --> 04:57:30,160
i forgot to ask is it tcp or udp

3875
04:57:30,160 --> 04:57:33,480
it's tcp

3876
04:57:34,320 --> 04:57:37,600
let's find it so tcp

3877
04:57:37,600 --> 04:57:39,840
we found one there it is

3878
04:57:39,840 --> 04:57:40,958
play

3879
04:57:40,958 --> 04:57:42,798
that's the command

3880
04:57:42,798 --> 04:57:44,840
and it's sent to port 15

3881
04:57:44,840 --> 04:57:49,680
000. so i'm going to save this

3882
04:57:49,760 --> 04:57:51,520
zero find

3883
04:57:51,520 --> 04:57:52,320
pi

3884
04:57:52,320 --> 04:57:55,120
so let's save this guy

3885
04:57:55,120 --> 04:57:57,680
i stuck a zero so it'll sort up at the

3886
04:57:57,680 --> 04:57:59,840
front

3887
04:57:59,840 --> 04:58:01,920
we'll

3888
04:58:01,920 --> 04:58:04,480
do play

3889
04:58:04,638 --> 04:58:06,958
here

3890
04:58:07,840 --> 04:58:10,480
that's my play command and it send a

3891
04:58:10,480 --> 04:58:12,400
unicast

3892
04:58:12,400 --> 04:58:13,280
to

3893
04:58:13,280 --> 04:58:15,200
my raspberry pi

3894
04:58:15,200 --> 04:58:17,680
0.169

3895
04:58:17,680 --> 04:58:21,040
and it is tcp

3896
04:58:21,040 --> 04:58:23,520
save that

3897
04:58:23,520 --> 04:58:27,798
and let's find the next one

3898
04:58:29,520 --> 04:58:31,280
there it is

3899
04:58:31,280 --> 04:58:32,638
next

3900
04:58:32,638 --> 04:58:36,000
the next command is next how incredibly

3901
04:58:36,000 --> 04:58:38,798
original i am

3902
04:58:41,280 --> 04:58:43,520
save that guy

3903
04:58:43,520 --> 04:58:44,718
and now

3904
04:58:44,718 --> 04:58:47,920
let's see what stop is

3905
04:58:51,120 --> 04:58:52,160
there it is

3906
04:58:52,160 --> 04:58:56,280
stop is stop excellent

3907
04:58:56,718 --> 04:58:59,200
stop

3908
04:58:59,280 --> 04:59:01,760
i type

3909
04:59:01,920 --> 04:59:03,200
uh just

3910
04:59:03,200 --> 04:59:04,878
just to be different i'm going to use

3911
04:59:04,878 --> 04:59:06,878
the the dns here right here just to show

3912
04:59:06,878 --> 04:59:09,440
you that you can do that

3913
04:59:09,440 --> 04:59:11,520
i have a dns entry called raspberry pi

3914
04:59:11,520 --> 04:59:13,200
audio

3915
04:59:13,200 --> 04:59:15,040
you can follow my mouse down to the

3916
04:59:15,040 --> 04:59:16,480
bottom of the screen i'm going to tab

3917
04:59:16,480 --> 04:59:18,798
over and that's the resolution resolve

3918
04:59:18,798 --> 04:59:20,480
that dns entry

3919
04:59:20,480 --> 04:59:22,638
so i can save that

3920
04:59:22,638 --> 04:59:25,680
packet center also supports um

3921
04:59:25,680 --> 04:59:28,798
ipv6 if you want to get that going

3922
04:59:28,798 --> 04:59:31,040
you can click this and i'll go into ipv6

3923
04:59:31,040 --> 04:59:32,320
mode

3924
04:59:32,320 --> 04:59:36,000
and i have an ipv6 dns entry for that

3925
04:59:36,000 --> 04:59:38,638
and there it is down there

3926
04:59:38,638 --> 04:59:39,600
um

3927
04:59:39,600 --> 04:59:41,760
i'm not going to use that because my

3928
04:59:41,760 --> 04:59:44,878
piper code does not support ipv6 but

3929
04:59:44,878 --> 04:59:46,958
it's in there if you want um while i'm

3930
04:59:46,958 --> 04:59:49,120
here one other neat thing that you can

3931
04:59:49,120 --> 04:59:49,920
do

3932
04:59:49,920 --> 04:59:52,000
is that might be really helpful in your

3933
04:59:52,000 --> 04:59:55,040
testing is macros

3934
04:59:55,040 --> 04:59:57,760
so pack center support first of all

3935
04:59:57,760 --> 04:59:59,200
before i get ahead of myself let me save

3936
04:59:59,200 --> 04:59:59,920
this

3937
04:59:59,920 --> 05:00:02,560
oh i did save it

3938
05:00:02,560 --> 05:00:04,638
so

3939
05:00:04,638 --> 05:00:07,280
if you want to send a unique string

3940
05:00:07,280 --> 05:00:09,120
you can do

3941
05:00:09,120 --> 05:00:11,760
bracket macros

3942
05:00:11,760 --> 05:00:15,040
and i want to send the time

3943
05:00:15,040 --> 05:00:16,638
and then i'm going to just

3944
05:00:16,638 --> 05:00:18,718
send that to

3945
05:00:18,718 --> 05:00:21,200
i don't want to confuse my raspberry pi

3946
05:00:21,200 --> 05:00:24,718
so i'll just send it to myself

3947
05:00:27,040 --> 05:00:29,520
you send

3948
05:00:31,120 --> 05:00:33,600
udp

3949
05:00:33,760 --> 05:00:36,480
see there we go so like um

3950
05:00:36,480 --> 05:00:38,878
i sent a big unique string and then i

3951
05:00:38,878 --> 05:00:40,400
sent the current time so there's about

3952
05:00:40,400 --> 05:00:42,638
five or six macros in there and the idea

3953
05:00:42,638 --> 05:00:44,000
behind that is

3954
05:00:44,000 --> 05:00:45,440
you you want to

3955
05:00:45,440 --> 05:00:47,520
test something so

3956
05:00:47,520 --> 05:00:48,798
you might have a series of tests where

3957
05:00:48,798 --> 05:00:50,560
you might just want to send this like

3958
05:00:50,560 --> 05:00:51,360
every

3959
05:00:51,360 --> 05:00:53,120
half second

3960
05:00:53,120 --> 05:00:55,680
and then it just goes on and on and on

3961
05:00:55,680 --> 05:00:56,878
and

3962
05:00:56,878 --> 05:00:58,560
you can see in the logs of whatever

3963
05:00:58,560 --> 05:01:00,400
device you're testing against when it

3964
05:01:00,400 --> 05:01:02,080
fails so you know the string you know

3965
05:01:02,080 --> 05:01:03,920
the timestamp you can look at the first

3966
05:01:03,920 --> 05:01:05,840
one and the last one and compare the two

3967
05:01:05,840 --> 05:01:07,760
and that's when your device failed and

3968
05:01:07,760 --> 05:01:10,400
you can go figure out what's going on

3969
05:01:10,400 --> 05:01:12,000
all right so let's stop this and

3970
05:01:12,000 --> 05:01:14,840
actually hit the play

3971
05:01:14,840 --> 05:01:17,280
button there it is

3972
05:01:17,280 --> 05:01:18,560
so play

3973
05:01:18,560 --> 05:01:20,718
and that was the uh the response i

3974
05:01:20,718 --> 05:01:24,718
actually don't need persistent tcp

3975
05:01:24,958 --> 05:01:26,718
next

3976
05:01:26,718 --> 05:01:29,958
and stop

3977
05:01:30,240 --> 05:01:33,040
there it is all right so i did it

3978
05:01:33,040 --> 05:01:34,200
reverse engineered

3979
05:01:34,200 --> 05:01:37,840
[Applause]

3980
05:01:37,840 --> 05:01:40,718
so i can take these and i can

3981
05:01:40,718 --> 05:01:42,798
you know export them go to some other

3982
05:01:42,798 --> 05:01:44,878
device that uses

3983
05:01:44,878 --> 05:01:47,760
like on a mac or linux that maybe this

3984
05:01:47,760 --> 05:01:49,840
app does not run on

3985
05:01:49,840 --> 05:01:52,320
before i go further

3986
05:01:52,320 --> 05:01:55,120
have you ever been taken a class

3987
05:01:55,120 --> 05:01:57,520
the one that comes to mind to me that is

3988
05:01:57,520 --> 05:01:59,600
famous for this is like math class such

3989
05:01:59,600 --> 05:02:02,160
as calculus where the professor goes up

3990
05:02:02,160 --> 05:02:04,798
there and teaches you how to find the

3991
05:02:04,798 --> 05:02:05,920
derivative

3992
05:02:05,920 --> 05:02:08,320
they'll go up on the board and just do

3993
05:02:08,320 --> 05:02:10,560
this massive algebraic equation and

3994
05:02:10,560 --> 05:02:13,440
spend 40 minutes to find the derivative

3995
05:02:13,440 --> 05:02:14,878
and then at the end the class they'll

3996
05:02:14,878 --> 05:02:17,280
say oh by the way

3997
05:02:17,280 --> 05:02:19,040
there's an easier way to do this you

3998
05:02:19,040 --> 05:02:22,560
know it's it's the power rule you know

3999
05:02:22,560 --> 05:02:25,360
exponent times coefficient minus one or

4000
05:02:25,360 --> 05:02:27,520
something like that

4001
05:02:27,520 --> 05:02:29,120
there's an easier way to do what i just

4002
05:02:29,120 --> 05:02:30,240
did

4003
05:02:30,240 --> 05:02:30,958
but

4004
05:02:30,958 --> 05:02:33,280
you need to know the hard way before i

4005
05:02:33,280 --> 05:02:35,120
show you the easy way

4006
05:02:35,120 --> 05:02:36,878
so i'm going to

4007
05:02:36,878 --> 05:02:38,718
do this again and it's gonna be a whole

4008
05:02:38,718 --> 05:02:41,840
lot easier

4009
05:02:42,878 --> 05:02:44,878
so i actually

4010
05:02:44,878 --> 05:02:47,280
don't need all of this so i'm gonna

4011
05:02:47,280 --> 05:02:48,480
clear these out

4012
05:02:48,480 --> 05:02:49,840
and we're gonna reverse engineer this

4013
05:02:49,840 --> 05:02:50,798
again

4014
05:02:50,798 --> 05:02:51,840
and

4015
05:02:51,840 --> 05:02:54,400
the easy way

4016
05:02:54,400 --> 05:02:57,280
so capturing in wireshark is all well

4017
05:02:57,280 --> 05:02:59,200
and good so you can get and copy and

4018
05:02:59,200 --> 05:03:02,160
paste over but what's easier than

4019
05:03:02,160 --> 05:03:04,400
capturing a wireshark is

4020
05:03:04,400 --> 05:03:05,920
just having the app

4021
05:03:05,920 --> 05:03:08,480
tell me its command so we're going to do

4022
05:03:08,480 --> 05:03:10,080
it that way

4023
05:03:10,080 --> 05:03:13,200
all i really needed to know is the port

4024
05:03:13,200 --> 05:03:15,920
that it's running on and the protocol

4025
05:03:15,920 --> 05:03:17,840
so we know that it's running on port

4026
05:03:17,840 --> 05:03:19,680
fifteen thousand

4027
05:03:19,680 --> 05:03:21,840
so i'm gonna set packet center to listen

4028
05:03:21,840 --> 05:03:25,040
on port 15 000

4029
05:03:26,480 --> 05:03:29,200
for both of these

4030
05:03:30,160 --> 05:03:31,680
so packet center can listen on any

4031
05:03:31,680 --> 05:03:33,440
number of ports that you want so i i'm

4032
05:03:33,440 --> 05:03:34,958
interested in 15 000 but if you want to

4033
05:03:34,958 --> 05:03:37,440
listen to more you can just you know put

4034
05:03:37,440 --> 05:03:40,400
it right here just comment separate it

4035
05:03:40,400 --> 05:03:41,760
and

4036
05:03:41,760 --> 05:03:43,280
9000

4037
05:03:43,280 --> 05:03:45,200
and the same with the

4038
05:03:45,200 --> 05:03:48,480
ssl server

4039
05:03:49,600 --> 05:03:52,399
so there we go

4040
05:03:53,680 --> 05:03:56,320
no i do not have to do ranges that would

4041
05:03:56,320 --> 05:03:59,280
be useful i completely agree but

4042
05:03:59,280 --> 05:04:01,920
you can just

4043
05:04:01,920 --> 05:04:04,240
that's way too many numbers so you can

4044
05:04:04,240 --> 05:04:05,840
just keep right on

4045
05:04:05,840 --> 05:04:07,200
going

4046
05:04:07,200 --> 05:04:09,120
you know as far as many times you can

4047
05:04:09,120 --> 05:04:10,638
type but

4048
05:04:10,638 --> 05:04:12,320
it does not do ranges that would be nice

4049
05:04:12,320 --> 05:04:14,240
i agree

4050
05:04:14,240 --> 05:04:16,798
go to the github click on feature

4051
05:04:16,798 --> 05:04:19,280
request and file it

4052
05:04:19,280 --> 05:04:21,280
and then maybe a couple months from now

4053
05:04:21,280 --> 05:04:24,080
it might do ranges

4054
05:04:24,080 --> 05:04:26,320
all right so i want to send a reply so i

4055
05:04:26,320 --> 05:04:28,638
got it set up right here ready to go so

4056
05:04:28,638 --> 05:04:32,160
my address is 0.99 and i already have it

4057
05:04:32,160 --> 05:04:33,760
ready to go

4058
05:04:33,760 --> 05:04:37,039
and i'm going to hit okay

4059
05:04:37,120 --> 05:04:39,040
there we go see i'm listening to all

4060
05:04:39,040 --> 05:04:40,718
kinds of see this is listening to five

4061
05:04:40,718 --> 05:04:42,480
stuff right now and

4062
05:04:42,480 --> 05:04:45,120
anyway hopefully 15 000 got buried in

4063
05:04:45,120 --> 05:04:47,440
there somewhere

4064
05:04:47,440 --> 05:04:48,320
and

4065
05:04:48,320 --> 05:04:51,120
restart pie player

4066
05:04:51,120 --> 05:04:53,760
and i need to disconnect my raspberry pi

4067
05:04:53,760 --> 05:04:57,520
see i got it all nice and color coded

4068
05:04:57,520 --> 05:04:59,680
for you av enthusiasts i worked in the

4069
05:04:59,680 --> 05:05:01,280
av industry for like seven or eight

4070
05:05:01,280 --> 05:05:04,560
years so red means audio yellow means

4071
05:05:04,560 --> 05:05:06,958
video

4072
05:05:11,360 --> 05:05:12,878
there we go

4073
05:05:12,878 --> 05:05:15,600
i tricked it i replied i told it my

4074
05:05:15,600 --> 05:05:17,600
address was 0.99 now he's talking to

4075
05:05:17,600 --> 05:05:19,120
0.99 that's where he thinks the

4076
05:05:19,120 --> 05:05:22,000
raspberry pi is

4077
05:05:22,000 --> 05:05:25,680
so let's clear out this log right here

4078
05:05:25,680 --> 05:05:26,878
and just do

4079
05:05:26,878 --> 05:05:28,798
i don't need persistent and then i hit

4080
05:05:28,798 --> 05:05:31,760
play next stop it just told me his

4081
05:05:31,760 --> 05:05:35,519
commands that's a whole lot easier

4082
05:05:36,240 --> 05:05:38,240
and now i just need to save these off so

4083
05:05:38,240 --> 05:05:40,400
save

4084
05:05:40,400 --> 05:05:43,400
play

4085
05:05:43,520 --> 05:05:46,000
save

4086
05:05:46,798 --> 05:05:49,280
next

4087
05:05:50,000 --> 05:05:51,600
save

4088
05:05:51,600 --> 05:05:52,878
stop

4089
05:05:52,878 --> 05:05:55,200
i'm not quite done yet because

4090
05:05:55,200 --> 05:05:57,120
it's talking to me instead of the

4091
05:05:57,120 --> 05:05:58,240
raspberry pi but we know where the

4092
05:05:58,240 --> 05:06:00,240
raspberry pi is already

4093
05:06:00,240 --> 05:06:03,360
so 169

4094
05:06:06,638 --> 05:06:07,920
oops

4095
05:06:07,920 --> 05:06:11,680
i need to copy that

4096
05:06:11,680 --> 05:06:14,240
there we go

4097
05:06:15,040 --> 05:06:18,240
there we go now i need the port

4098
05:06:18,240 --> 05:06:21,360
just copy and paste copy paste

4099
05:06:21,360 --> 05:06:23,040
there we go we shouldn't need this guy

4100
05:06:23,040 --> 05:06:25,120
anymore

4101
05:06:25,120 --> 05:06:27,760
reconnect

4102
05:06:32,160 --> 05:06:33,840
this takes about

4103
05:06:33,840 --> 05:06:36,560
five or six seconds to register

4104
05:06:36,560 --> 05:06:39,280
i think it's good now

4105
05:06:39,280 --> 05:06:41,520
so

4106
05:06:46,320 --> 05:06:48,560
let's find the raspberry pi nope i don't

4107
05:06:48,560 --> 05:06:51,120
want to flood

4108
05:06:51,760 --> 05:06:54,958
turn off respond so when you send a

4109
05:06:54,958 --> 05:06:57,920
broadcast with um

4110
05:06:57,920 --> 05:07:00,080
replies auto reply enabled it warns you

4111
05:07:00,080 --> 05:07:01,360
about flooding because you could be

4112
05:07:01,360 --> 05:07:02,878
sending like to a thousand things it

4113
05:07:02,878 --> 05:07:04,400
comes back and they'll be sending back

4114
05:07:04,400 --> 05:07:08,480
out again so some a flood warning

4115
05:07:09,120 --> 05:07:12,320
so find the raspberry pi

4116
05:07:13,360 --> 05:07:15,040
my raspberry pi

4117
05:07:15,040 --> 05:07:18,440
is not connected

4118
05:07:25,680 --> 05:07:29,638
what do i have wrong here

4119
05:07:35,680 --> 05:07:38,240
all right

4120
05:07:42,878 --> 05:07:44,798
could not connect

4121
05:07:44,798 --> 05:07:46,840
i'm going to

4122
05:07:46,840 --> 05:07:51,400
remove these ports

4123
05:08:09,680 --> 05:08:12,638
my switch turned off

4124
05:08:14,878 --> 05:08:18,160
why is my switch off yeah

4125
05:08:19,280 --> 05:08:21,600
okay

4126
05:08:21,840 --> 05:08:24,080
i think my power sources have an issue

4127
05:08:24,080 --> 05:08:27,120
so what i'm going to do is

4128
05:08:27,120 --> 05:08:31,798
i'm just going to reboot my switch

4129
05:08:43,360 --> 05:08:44,958
these um

4130
05:08:44,958 --> 05:08:48,638
power sources are not super reliable

4131
05:08:48,638 --> 05:08:50,878
it can handle about

4132
05:08:50,878 --> 05:08:53,440
four amps i'm surprised the switch

4133
05:08:53,440 --> 05:08:58,958
is consuming four amps but i don't know

4134
05:08:58,958 --> 05:09:00,798
so this will hopefully

4135
05:09:00,798 --> 05:09:03,600
take too long

4136
05:09:04,080 --> 05:09:06,638
to reboot

4137
05:09:07,840 --> 05:09:09,440
while we're at it

4138
05:09:09,440 --> 05:09:10,560
i'll

4139
05:09:10,560 --> 05:09:13,200
show you

4140
05:09:13,200 --> 05:09:14,958
other tools that you can use with this

4141
05:09:14,958 --> 05:09:16,638
so

4142
05:09:16,638 --> 05:09:19,280
does anybody use multicast

4143
05:09:19,280 --> 05:09:21,680
for anything

4144
05:09:21,680 --> 05:09:24,798
i see no hands multicast is extremely

4145
05:09:24,798 --> 05:09:27,360
useful so you're all familiar with

4146
05:09:27,360 --> 05:09:30,160
broadcast packets right

4147
05:09:30,160 --> 05:09:32,000
that's when you flood the network will

4148
05:09:32,000 --> 05:09:33,280
not flood the network but you send it

4149
05:09:33,280 --> 05:09:34,718
and it just gets routed to absolutely

4150
05:09:34,718 --> 05:09:36,000
everybody

4151
05:09:36,000 --> 05:09:38,798
if you don't want to do that

4152
05:09:38,798 --> 05:09:42,798
notice that pi player used multicast to

4153
05:09:42,798 --> 05:09:45,200
find it the modern way to do that is

4154
05:09:45,200 --> 05:09:47,520
actually with multicast where you join a

4155
05:09:47,520 --> 05:09:48,480
stream

4156
05:09:48,480 --> 05:09:50,878
and then the raspberry pi or whatever

4157
05:09:50,878 --> 05:09:52,240
device you're trying to do will

4158
05:09:52,240 --> 05:09:55,040
heartbeat back and then that will get

4159
05:09:55,040 --> 05:09:56,798
captured that way you're not just

4160
05:09:56,798 --> 05:09:58,160
sending packets all over the place

4161
05:09:58,160 --> 05:10:00,080
willy-nilly that's the modern way that's

4162
05:10:00,080 --> 05:10:02,160
actually how your computer finds your

4163
05:10:02,160 --> 05:10:05,200
printers using the bonjour protocol

4164
05:10:05,200 --> 05:10:09,560
so my switch is back to life

4165
05:10:09,920 --> 05:10:10,798
and

4166
05:10:10,798 --> 05:10:14,559
there we go now hit play

4167
05:10:17,840 --> 05:10:20,400
alright now i want to do one more thing

4168
05:10:20,400 --> 05:10:23,440
so you see how this has a nice gui

4169
05:10:23,440 --> 05:10:25,840
i would like a nice gui

4170
05:10:25,840 --> 05:10:28,560
so packet cinder has built-in uh

4171
05:10:28,560 --> 05:10:30,480
paneling tool

4172
05:10:30,480 --> 05:10:33,040
so i'm going to generate a panel

4173
05:10:33,040 --> 05:10:36,440
and there we go

4174
05:10:37,850 --> 05:10:44,620
[Applause]

4175
05:10:44,958 --> 05:10:47,280
now i i don't want to just

4176
05:10:47,280 --> 05:10:49,680
beat this drum but

4177
05:10:49,680 --> 05:10:51,520
what you could do is you can go in here

4178
05:10:51,520 --> 05:10:53,120
and just start scripting you know

4179
05:10:53,120 --> 05:10:54,638
additional things so i could make

4180
05:10:54,638 --> 05:10:56,080
another button

4181
05:10:56,080 --> 05:10:58,000
that um

4182
05:10:58,000 --> 05:11:00,560
we'll just call it uh

4183
05:11:00,560 --> 05:11:01,680
yay

4184
05:11:01,680 --> 05:11:02,878
and

4185
05:11:02,878 --> 05:11:05,200
i want to send play

4186
05:11:05,200 --> 05:11:07,680
then i want to delay

4187
05:11:07,680 --> 05:11:09,840
five seconds and then i'm going to send

4188
05:11:09,840 --> 05:11:11,520
it

4189
05:11:11,520 --> 05:11:13,920
stop

4190
05:11:13,920 --> 05:11:16,160
and

4191
05:11:17,680 --> 05:11:19,600
so in about five seconds just send the

4192
05:11:19,600 --> 05:11:22,320
stop command

4193
05:11:23,440 --> 05:11:24,560
there we go

4194
05:11:24,560 --> 05:11:26,590
so

4195
05:11:26,590 --> 05:11:28,560
[Applause]

4196
05:11:28,560 --> 05:11:30,560
so you you can build this like paint you

4197
05:11:30,560 --> 05:11:32,638
know this very complex control panel

4198
05:11:32,638 --> 05:11:35,360
system you know and there's like lots of

4199
05:11:35,360 --> 05:11:37,440
you know very expensive tools that do

4200
05:11:37,440 --> 05:11:39,280
this but now you can just launch it this

4201
05:11:39,280 --> 05:11:42,160
way so anyway

4202
05:11:42,160 --> 05:11:43,760
that's all well and good but i know you

4203
05:11:43,760 --> 05:11:45,440
want to get to the mall or demo how am i

4204
05:11:45,440 --> 05:11:46,958
doing i'm doing pretty good on time

4205
05:11:46,958 --> 05:11:50,320
let's keep let's keep at it

4206
05:11:50,958 --> 05:11:55,359
so there's malware on this raspberry pi

4207
05:11:56,000 --> 05:11:57,520
i

4208
05:11:57,520 --> 05:11:59,120
don't think i have to explain what

4209
05:11:59,120 --> 05:12:03,040
malware is i have a slide just in case

4210
05:12:03,040 --> 05:12:04,160
but

4211
05:12:04,160 --> 05:12:06,958
i like i do this presentation for

4212
05:12:06,958 --> 05:12:08,798
university students

4213
05:12:08,798 --> 05:12:10,798
and what i want to stress to them is

4214
05:12:10,798 --> 05:12:12,560
that

4215
05:12:12,560 --> 05:12:15,360
malware is basically anything that's bad

4216
05:12:15,360 --> 05:12:17,440
on your computer so you know how it is

4217
05:12:17,440 --> 05:12:18,560
you

4218
05:12:18,560 --> 05:12:21,440
you get a complaint and uh someone says

4219
05:12:21,440 --> 05:12:23,600
uh there's a virus on my computer and

4220
05:12:23,600 --> 05:12:26,240
then the pedantics system and comes in

4221
05:12:26,240 --> 05:12:29,120
like oh that's not a virus that's a worm

4222
05:12:29,120 --> 05:12:30,958
and the guy's like like i don't care

4223
05:12:30,958 --> 05:12:32,798
just get rid of it

4224
05:12:32,798 --> 05:12:34,080
i mean so

4225
05:12:34,080 --> 05:12:36,320
i want to teach my students and i want

4226
05:12:36,320 --> 05:12:37,360
to teach

4227
05:12:37,360 --> 05:12:40,320
the general user to just say

4228
05:12:40,320 --> 05:12:42,638
malware and then they're correct because

4229
05:12:42,638 --> 05:12:44,000
just about everything is a subset of

4230
05:12:44,000 --> 05:12:45,760
malware there's more on my computer it's

4231
05:12:45,760 --> 05:12:47,040
like oh okay he just saved that

4232
05:12:47,040 --> 05:12:48,798
conversation because i really don't care

4233
05:12:48,798 --> 05:12:51,280
what it is they just want to go on and

4234
05:12:51,280 --> 05:12:53,360
to be fair to them i i don't blame them

4235
05:12:53,360 --> 05:12:55,280
it's like they're not paid to know those

4236
05:12:55,280 --> 05:12:57,360
differences they're paid to just not

4237
05:12:57,360 --> 05:12:59,600
click on things bad things

4238
05:12:59,600 --> 05:13:00,798
so

4239
05:13:00,798 --> 05:13:02,000
that's the only thing i want to talk

4240
05:13:02,000 --> 05:13:04,320
about so you can do that to your users

4241
05:13:04,320 --> 05:13:05,760
just

4242
05:13:05,760 --> 05:13:07,840
delete all mentions virus worm trojan

4243
05:13:07,840 --> 05:13:09,520
blah blah and just replace with malware

4244
05:13:09,520 --> 05:13:12,400
and we can simplify the language

4245
05:13:12,400 --> 05:13:13,520
so

4246
05:13:13,520 --> 05:13:15,520
here's the setup

4247
05:13:15,520 --> 05:13:17,840
i don't need this display

4248
05:13:17,840 --> 05:13:19,600
which is good because i just saved

4249
05:13:19,600 --> 05:13:22,638
myself an amp and a half

4250
05:13:22,638 --> 05:13:25,440
and all i need is my raspberry pi the

4251
05:13:25,440 --> 05:13:28,958
switch is still on so let's do this

4252
05:13:28,958 --> 05:13:30,400
all right

4253
05:13:30,400 --> 05:13:31,680
oh yes

4254
05:13:31,680 --> 05:13:33,760
this is fake malware

4255
05:13:33,760 --> 05:13:36,240
i i did not write malware and upload it

4256
05:13:36,240 --> 05:13:40,080
to github so don't report me or anything

4257
05:13:40,080 --> 05:13:42,080
the source code is

4258
05:13:42,080 --> 05:13:44,480
inside pie player you can look at it and

4259
05:13:44,480 --> 05:13:46,480
laugh about how dumb it is but this is

4260
05:13:46,480 --> 05:13:47,680
just purely

4261
05:13:47,680 --> 05:13:50,560
a simulation

4262
05:13:50,560 --> 05:13:52,480
all right let's look at it let's get

4263
05:13:52,480 --> 05:13:54,878
this going

4264
05:13:54,878 --> 05:13:58,240
to start with i'm just going to do a

4265
05:13:58,240 --> 05:14:02,240
free run capture of my ethernet and i

4266
05:14:02,240 --> 05:14:04,240
have all my other adapters disabled

4267
05:14:04,240 --> 05:14:06,560
except ethernet so this

4268
05:14:06,560 --> 05:14:09,920
and it's an isolated network

4269
05:14:10,638 --> 05:14:13,680
and let's see what happens

4270
05:14:15,040 --> 05:14:16,400
there we go already got something

4271
05:14:16,400 --> 05:14:18,798
interesting

4272
05:14:19,600 --> 05:14:24,680
my razer pie is arping for 192.168.0.1

4273
05:14:24,718 --> 05:14:26,718
the art protocol is how it finds the

4274
05:14:26,718 --> 05:14:28,240
location of uh

4275
05:14:28,240 --> 05:14:30,718
other devices so we can you know get the

4276
05:14:30,718 --> 05:14:32,798
communications going

4277
05:14:32,798 --> 05:14:34,798
why does it want to know

4278
05:14:34,798 --> 05:14:37,040
0.1 that's normally my gateway it can't

4279
05:14:37,040 --> 05:14:39,120
find it because it's an isolated network

4280
05:14:39,120 --> 05:14:42,239
why would i want my gateway

4281
05:14:43,040 --> 05:14:45,280
yes talk to the internet

4282
05:14:45,280 --> 05:14:46,638
why do you want to talk to the internet

4283
05:14:46,638 --> 05:14:49,120
well usually that's okay but in my case

4284
05:14:49,120 --> 05:14:52,638
i can promise you this is not okay

4285
05:14:52,798 --> 05:14:54,878
so what do i do

4286
05:14:54,878 --> 05:14:56,560
i'm going to

4287
05:14:56,560 --> 05:15:00,120
give him that address

4288
05:15:03,200 --> 05:15:06,080
so i'm going to network and

4289
05:15:06,080 --> 05:15:08,400
i know you can do this in powershell but

4290
05:15:08,400 --> 05:15:10,560
i'm intentionally showing you

4291
05:15:10,560 --> 05:15:14,000
this method because uh one i'm a

4292
05:15:14,000 --> 05:15:15,440
linux guy

4293
05:15:15,440 --> 05:15:17,200
i don't know the magic powershell it's

4294
05:15:17,200 --> 05:15:19,280
like net sh and plus i want you to know

4295
05:15:19,280 --> 05:15:21,360
this method in case you want to do it

4296
05:15:21,360 --> 05:15:23,280
yourselves and you're not

4297
05:15:23,280 --> 05:15:26,320
a powershell expert

4298
05:15:29,200 --> 05:15:31,840
so

4299
05:15:31,840 --> 05:15:34,560
one thing i've noticed is is not common

4300
05:15:34,560 --> 05:15:35,520
knowledge

4301
05:15:35,520 --> 05:15:36,638
is that

4302
05:15:36,638 --> 05:15:39,440
your computer ethernet cables actually

4303
05:15:39,440 --> 05:15:42,000
every network adapter can have multiple

4304
05:15:42,000 --> 05:15:44,560
ip addresses i i don't know why that's

4305
05:15:44,560 --> 05:15:46,560
just not common like they get the idea

4306
05:15:46,560 --> 05:15:48,718
like one device one ip address but you

4307
05:15:48,718 --> 05:15:50,718
can add as many ip addresses as you want

4308
05:15:50,718 --> 05:15:52,798
i think the technical term is uh

4309
05:15:52,798 --> 05:15:55,280
alias address

4310
05:15:55,280 --> 05:15:58,320
so i'm gonna add myself another address

4311
05:15:58,320 --> 05:16:00,480
i don't know why windows bears is under

4312
05:16:00,480 --> 05:16:03,600
like five advanced menus but

4313
05:16:03,600 --> 05:16:06,920
there we go

4314
05:16:12,400 --> 05:16:13,440
okay

4315
05:16:13,440 --> 05:16:15,600
and

4316
05:16:16,320 --> 05:16:18,000
you can see here it's up at the top it

4317
05:16:18,000 --> 05:16:19,760
got listed right there so it's active

4318
05:16:19,760 --> 05:16:20,878
now

4319
05:16:20,878 --> 05:16:23,920
let's uh run it again

4320
05:16:25,040 --> 05:16:26,718
so it should be able to

4321
05:16:26,718 --> 05:16:27,840
find

4322
05:16:27,840 --> 05:16:30,878
that uh ip address and continue on to

4323
05:16:30,878 --> 05:16:33,520
the next step

4324
05:16:35,200 --> 05:16:38,480
there we go i got something

4325
05:16:38,560 --> 05:16:39,920
it's probably a little dark and hard to

4326
05:16:39,920 --> 05:16:41,040
see but

4327
05:16:41,040 --> 05:16:43,440
he found he found the gateway

4328
05:16:43,440 --> 05:16:44,718
and i still on the gateway he's like i

4329
05:16:44,718 --> 05:16:46,798
want to connect to this

4330
05:16:46,798 --> 05:16:50,560
random ip address out on the internet

4331
05:16:50,560 --> 05:16:52,080
it's actually not random that's my web

4332
05:16:52,080 --> 05:16:53,520
server i'm not going to point to some

4333
05:16:53,520 --> 05:16:55,760
other guy's

4334
05:16:55,760 --> 05:16:56,718
service

4335
05:16:56,718 --> 05:16:58,320
but he's trying to talk out to the

4336
05:16:58,320 --> 05:17:00,320
internet i p address and he can't get

4337
05:17:00,320 --> 05:17:02,480
there because it's an isolated network

4338
05:17:02,480 --> 05:17:05,520
so to fix this i'm going to

4339
05:17:05,520 --> 05:17:07,280
once again

4340
05:17:07,280 --> 05:17:08,638
give myself

4341
05:17:08,638 --> 05:17:10,320
an imp address

4342
05:17:10,320 --> 05:17:13,920
this address to be specific

4343
05:17:14,160 --> 05:17:17,520
so back to ethernet

4344
05:17:21,360 --> 05:17:23,440
advanced

4345
05:17:23,440 --> 05:17:25,520
and i can't remember

4346
05:17:25,520 --> 05:17:27,200
there it is

4347
05:17:27,200 --> 05:17:31,760
add this one is 138

4348
05:17:31,760 --> 05:17:34,638
197

4349
05:17:34,638 --> 05:17:36,718
dot

4350
05:17:36,718 --> 05:17:39,718
192.94

4351
05:17:40,480 --> 05:17:43,840
no that says 84.

4352
05:17:45,360 --> 05:17:49,840
let me double check it 138 197 192 84.

4353
05:17:49,840 --> 05:17:51,680
there we go

4354
05:17:51,680 --> 05:17:52,878
add

4355
05:17:52,878 --> 05:17:56,080
add add

4356
05:17:56,080 --> 05:17:58,638
there we go

4357
05:18:00,480 --> 05:18:02,320
and there it appeared right here all

4358
05:18:02,320 --> 05:18:04,638
right it's active

4359
05:18:04,638 --> 05:18:07,120
restart

4360
05:18:07,280 --> 05:18:09,920
so now he should be able to find that

4361
05:18:09,920 --> 05:18:12,240
address and we continue on

4362
05:18:12,240 --> 05:18:14,718
chasing this uh malware see when what

4363
05:18:14,718 --> 05:18:18,200
it's trying to do

4364
05:18:20,480 --> 05:18:22,160
all right he found it

4365
05:18:22,160 --> 05:18:23,840
he tried to connect

4366
05:18:23,840 --> 05:18:26,400
and it broke

4367
05:18:26,400 --> 05:18:27,440
because

4368
05:18:27,440 --> 05:18:30,160
there's nothing there

4369
05:18:30,878 --> 05:18:33,280
so when you were

4370
05:18:33,280 --> 05:18:36,320
the way this would manifest in uh

4371
05:18:36,320 --> 05:18:37,520
your browser

4372
05:18:37,520 --> 05:18:39,120
or if you try to connect some it would

4373
05:18:39,120 --> 05:18:41,360
say like connection refused

4374
05:18:41,360 --> 05:18:42,798
because he found the ip address but the

4375
05:18:42,798 --> 05:18:44,160
connection was refused yeah i know

4376
05:18:44,160 --> 05:18:45,280
you've seen that error page in your

4377
05:18:45,280 --> 05:18:47,200
browser at times that's how that

4378
05:18:47,200 --> 05:18:48,958
manifests

4379
05:18:48,958 --> 05:18:49,920
so

4380
05:18:49,920 --> 05:18:53,280
what is he trying to connect to

4381
05:18:54,560 --> 05:18:57,040
he is trying to connect to five one two

4382
05:18:57,040 --> 05:18:58,560
three

4383
05:18:58,560 --> 05:19:01,440
so how do i continue on

4384
05:19:01,440 --> 05:19:03,840
well i'm going to have pakistander

4385
05:19:03,840 --> 05:19:05,920
listen to 5123

4386
05:19:05,920 --> 05:19:08,877
and see what's happening

4387
05:19:12,080 --> 05:19:12,878
so

4388
05:19:12,878 --> 05:19:15,360
tcp server

4389
05:19:15,360 --> 05:19:16,240
five

4390
05:19:16,240 --> 05:19:17,840
one two

4391
05:19:17,840 --> 05:19:20,160
three

4392
05:19:20,320 --> 05:19:21,200
and

4393
05:19:21,200 --> 05:19:24,000
we should be good to go

4394
05:19:24,718 --> 05:19:26,638
i'm gonna turn on persistent tcp

4395
05:19:26,638 --> 05:19:29,638
connections

4396
05:19:32,400 --> 05:19:34,958
now we wait for the capture boom there

4397
05:19:34,958 --> 05:19:38,399
it is i caught it

4398
05:19:39,440 --> 05:19:40,560
what is this

4399
05:19:40,560 --> 05:19:43,360
copy to clipboard

4400
05:19:43,360 --> 05:19:45,200
let me let's simply blow it up a little

4401
05:19:45,200 --> 05:19:48,400
bigger here for you

4402
05:19:50,000 --> 05:19:51,520
imagine half of you recognize what this

4403
05:19:51,520 --> 05:19:55,958
is already so this is an nmap scan

4404
05:19:59,120 --> 05:20:02,718
what did it find out

4405
05:20:02,718 --> 05:20:05,760
well it found out well it ran on may

4406
05:20:05,760 --> 05:20:07,920
29th so it was uh

4407
05:20:07,920 --> 05:20:10,878
several days ago when i was you know

4408
05:20:10,878 --> 05:20:13,280
checking this demo was okay

4409
05:20:13,280 --> 05:20:18,080
and then it was found i had ssh open

4410
05:20:18,080 --> 05:20:20,958
i'm running on an apple computer

4411
05:20:20,958 --> 05:20:24,320
and all kinds of interesting stuff

4412
05:20:24,320 --> 05:20:27,520
so what's going on is

4413
05:20:27,680 --> 05:20:32,080
on my home network this iot device

4414
05:20:32,080 --> 05:20:34,878
it ran an nmap scan

4415
05:20:34,878 --> 05:20:36,718
it captured it

4416
05:20:36,718 --> 05:20:39,280
and then it tried to send the report

4417
05:20:39,280 --> 05:20:42,320
back up to the mothership to await

4418
05:20:42,320 --> 05:20:44,878
further instructions

4419
05:20:44,878 --> 05:20:47,120
what those instructions are i don't

4420
05:20:47,120 --> 05:20:48,878
really know so what the next step would

4421
05:20:48,878 --> 05:20:50,160
be

4422
05:20:50,160 --> 05:20:53,040
is for me to take this

4423
05:20:53,040 --> 05:20:54,240
and then

4424
05:20:54,240 --> 05:20:56,160
send it up there myself

4425
05:20:56,160 --> 05:20:58,240
capture the response and just continue

4426
05:20:58,240 --> 05:21:00,240
chasing down this trail which i won't

4427
05:21:00,240 --> 05:21:02,320
bother to do uh

4428
05:21:02,320 --> 05:21:04,160
just so you know

4429
05:21:04,160 --> 05:21:05,040
my

4430
05:21:05,040 --> 05:21:06,718
website my servers actually does not

4431
05:21:06,718 --> 05:21:08,320
have that board open so you would get

4432
05:21:08,320 --> 05:21:10,878
connection views this is all simulations

4433
05:21:10,878 --> 05:21:12,558
i got to keep saying that

4434
05:21:12,558 --> 05:21:14,718
so

4435
05:21:16,400 --> 05:21:17,760
now

4436
05:21:17,760 --> 05:21:20,480
are there any questions about what i've

4437
05:21:20,480 --> 05:21:21,440
shown

4438
05:21:21,440 --> 05:21:24,240
this actually went a lot faster than i

4439
05:21:24,240 --> 05:21:26,160
anticipated so

4440
05:21:26,160 --> 05:21:27,760
instead of breaking i'm just going to

4441
05:21:27,760 --> 05:21:30,080
dive directly into part three but i can

4442
05:21:30,080 --> 05:21:34,440
pause right here for questions

4443
05:22:00,240 --> 05:22:01,520
like

4444
05:22:01,520 --> 05:22:02,798
yes yes

4445
05:22:02,798 --> 05:22:04,878
so so the question was can i

4446
05:22:04,878 --> 05:22:07,040
set up pakistan or to

4447
05:22:07,040 --> 05:22:09,760
respond to messages i guess in a more

4448
05:22:09,760 --> 05:22:11,120
intelligent way

4449
05:22:11,120 --> 05:22:14,000
and that the answer is yes

4450
05:22:14,000 --> 05:22:16,320
it's it's not super intelligent but

4451
05:22:16,320 --> 05:22:18,240
there is some there

4452
05:22:18,240 --> 05:22:19,760
so the first one

4453
05:22:19,760 --> 05:22:21,760
which i showed you earlier let me close

4454
05:22:21,760 --> 05:22:23,760
this out

4455
05:22:23,760 --> 05:22:25,120
actually

4456
05:22:25,120 --> 05:22:27,120
see this running just nonstop

4457
05:22:27,120 --> 05:22:28,558
um

4458
05:22:28,558 --> 05:22:30,400
you saw this already

4459
05:22:30,400 --> 05:22:32,240
send a basic response with the macro

4460
05:22:32,240 --> 05:22:34,718
support so if you wanted to you could do

4461
05:22:34,718 --> 05:22:36,400
you know

4462
05:22:36,400 --> 05:22:39,440
bracket bracket unix time

4463
05:22:39,440 --> 05:22:40,798
and you know it'll

4464
05:22:40,798 --> 05:22:42,958
do a macro response if you want to you

4465
05:22:42,958 --> 05:22:45,920
can do smart responses so enable

4466
05:22:45,920 --> 05:22:47,680
smart responses

4467
05:22:47,680 --> 05:22:50,878
and if the packet equals this then reply

4468
05:22:50,878 --> 05:22:53,280
with that so it's

4469
05:22:53,280 --> 05:22:54,798
you can say the notation of it and then

4470
05:22:54,798 --> 05:22:56,798
you can enable each one so you get five

4471
05:22:56,798 --> 05:22:59,200
slots and you can use macros if it

4472
05:22:59,200 --> 05:23:02,080
equals this reply that it's

4473
05:23:02,080 --> 05:23:04,958
it's not super smart it would be neat to

4474
05:23:04,958 --> 05:23:07,120
make it smarter uh have some kind of

4475
05:23:07,120 --> 05:23:10,638
wild card filter or something like that

4476
05:23:10,638 --> 05:23:12,878
but it's a start so maybe that will do

4477
05:23:12,878 --> 05:23:17,558
what you need to do it could be enough

4478
05:23:36,000 --> 05:23:39,360
so it supports tcp udp

4479
05:23:39,360 --> 05:23:42,160
ssl and just quick note about ssl i have

4480
05:23:42,160 --> 05:23:44,958
to make sure everybody knows us

4481
05:23:44,958 --> 05:23:47,280
ssl is the general term for encrypted

4482
05:23:47,280 --> 05:23:50,718
socket all versions of ssl are obsolete

4483
05:23:50,718 --> 05:23:51,760
they're

4484
05:23:51,760 --> 05:23:54,878
broken you should move to tls so when i

4485
05:23:54,878 --> 05:23:57,440
say ssl i'm actually mean

4486
05:23:57,440 --> 05:24:01,840
ssl or tls it just so happened that

4487
05:24:01,840 --> 05:24:03,440
all the documentation reference

4488
05:24:03,440 --> 05:24:05,840
materials still say ssl and nobody wants

4489
05:24:05,840 --> 05:24:08,160
to rewrite that stuff so underneath is

4490
05:24:08,160 --> 05:24:09,120
actually

4491
05:24:09,120 --> 05:24:12,320
ssl tls and the support for the

4492
05:24:12,320 --> 05:24:16,240
ssl tls is whatever your os supports now

4493
05:24:16,240 --> 05:24:17,680
for windows

4494
05:24:17,680 --> 05:24:19,280
i actually ship

4495
05:24:19,280 --> 05:24:21,600
openssl with the tool because i can't

4496
05:24:21,600 --> 05:24:24,400
rely on whatever windows is doing

4497
05:24:24,400 --> 05:24:26,320
and you can see what

4498
05:24:26,320 --> 05:24:28,718
opens so version it's using if you go to

4499
05:24:28,718 --> 05:24:29,680
about

4500
05:24:29,680 --> 05:24:31,200
and it's written right there so this is

4501
05:24:31,200 --> 05:24:33,200
shipped with openssl

4502
05:24:33,200 --> 05:24:34,480
1-1

4503
05:24:34,480 --> 05:24:37,760
built on april 20th on mac

4504
05:24:37,760 --> 05:24:39,920
it's whatever library is built in and on

4505
05:24:39,920 --> 05:24:43,120
linux is whatever libraries are built in

4506
05:24:43,120 --> 05:24:44,558
so whatever

4507
05:24:44,558 --> 05:24:46,558
on windows whatever that version of ssl

4508
05:24:46,558 --> 05:24:48,798
supports packet center can do

4509
05:24:48,798 --> 05:24:51,200
does that answer your question

4510
05:24:51,200 --> 05:24:53,440
okay

4511
05:24:53,760 --> 05:24:56,958
all right so i can continue on

4512
05:24:56,958 --> 05:25:01,480
or we can break for about 15 minutes

4513
05:25:17,200 --> 05:25:20,320
after the next

4514
05:25:22,240 --> 05:25:24,160
okay all right so we'll break for 15

4515
05:25:24,160 --> 05:25:25,680
minutes we'll come back

4516
05:25:25,680 --> 05:25:27,520
what you just said we'll break for 15

4517
05:25:27,520 --> 05:25:28,958
minutes we'll come back here and then

4518
05:25:28,958 --> 05:25:30,878
i'll do uh part three then we'll have a

4519
05:25:30,878 --> 05:25:32,160
nice long break before the panel

4520
05:25:32,160 --> 05:25:34,638
discussion

4521
05:25:40,080 --> 05:25:43,878
all right thank you

4522
05:25:44,990 --> 05:25:47,600
[Music]

4523
05:25:47,600 --> 05:25:50,700
the time of our lives

4524
05:25:50,700 --> 05:25:55,249
[Music]

4525
05:25:58,500 --> 05:26:03,189
[Music]

4526
05:26:06,180 --> 05:26:09,290
[Music]

4527
05:44:50,958 --> 05:44:53,958
continue

4528
05:44:58,240 --> 05:45:01,600
all right let's do it

4529
05:45:01,760 --> 05:45:03,440
next demo

4530
05:45:03,440 --> 05:45:04,718
this is a

4531
05:45:04,718 --> 05:45:07,520
bonus bonus conference

4532
05:45:07,520 --> 05:45:09,520
so i like to

4533
05:45:09,520 --> 05:45:11,600
thank them for giving me a little bit

4534
05:45:11,600 --> 05:45:14,320
extra time so i can show you this bonus

4535
05:45:14,320 --> 05:45:17,760
demo so this uh

4536
05:45:17,760 --> 05:45:21,680
this talk is about teaching uh latency

4537
05:45:21,680 --> 05:45:24,160
versus throughput which i'm sure most of

4538
05:45:24,160 --> 05:45:26,558
you already know but you can also give

4539
05:45:26,558 --> 05:45:29,200
this a subtitle

4540
05:45:29,200 --> 05:45:32,240
how to make the sysadmin angry

4541
05:45:32,240 --> 05:45:33,760
so

4542
05:45:33,760 --> 05:45:35,520
so i'm so this is going to teach you

4543
05:45:35,520 --> 05:45:38,000
network latency network throughput while

4544
05:45:38,000 --> 05:45:40,798
also making your sysadmin very mad and

4545
05:45:40,798 --> 05:45:43,440
you'll get to see that in a moment

4546
05:45:43,440 --> 05:45:46,798
so i don't think i need to define these

4547
05:45:46,798 --> 05:45:47,920
terms

4548
05:45:47,920 --> 05:45:50,400
i think most of you know it but

4549
05:45:50,400 --> 05:45:52,000
here it is anyway

4550
05:45:52,000 --> 05:45:53,920
latency's delay between pakistan the

4551
05:45:53,920 --> 05:45:55,520
packet received it's usually measured in

4552
05:45:55,520 --> 05:45:58,480
milliseconds uh just a note

4553
05:45:58,480 --> 05:46:00,400
it can act it can be measured either way

4554
05:46:00,400 --> 05:46:02,480
sometimes it's measured with

4555
05:46:02,480 --> 05:46:04,718
going from here to there sometimes it's

4556
05:46:04,718 --> 05:46:06,480
made

4557
05:46:06,480 --> 05:46:08,320
measured going from here to there and

4558
05:46:08,320 --> 05:46:10,798
back again so the complete return trip

4559
05:46:10,798 --> 05:46:12,958
i've seen it either way so if you're

4560
05:46:12,958 --> 05:46:14,958
particular about it you'll need to ask

4561
05:46:14,958 --> 05:46:16,638
to define the terms

4562
05:46:16,638 --> 05:46:18,320
uh throughput is how many bytes can be

4563
05:46:18,320 --> 05:46:20,000
sent in a certain amount of time usually

4564
05:46:20,000 --> 05:46:23,360
bytes per second or bits per second

4565
05:46:23,360 --> 05:46:24,558
so you have

4566
05:46:24,558 --> 05:46:26,878
the unit is second or on the other one

4567
05:46:26,878 --> 05:46:29,440
it's per second it's a very subtle

4568
05:46:29,440 --> 05:46:32,400
difference that can confuse

4569
05:46:32,400 --> 05:46:35,840
students a lot and always tell them when

4570
05:46:35,840 --> 05:46:38,000
you talk about your network in your

4571
05:46:38,000 --> 05:46:39,600
network performance

4572
05:46:39,600 --> 05:46:40,558
and

4573
05:46:40,558 --> 05:46:42,320
you want both because they could tell

4574
05:46:42,320 --> 05:46:43,440
you

4575
05:46:43,440 --> 05:46:46,160
this is a gigabit it's like well that's

4576
05:46:46,160 --> 05:46:48,958
great what's the latency or you can see

4577
05:46:48,958 --> 05:46:50,878
my ping is less than a millisecond well

4578
05:46:50,878 --> 05:46:52,638
that's great but what's the throughput

4579
05:46:52,638 --> 05:46:54,480
because you need both in order to be

4580
05:46:54,480 --> 05:46:57,760
able to say that your network is decent

4581
05:46:57,760 --> 05:46:59,120
and

4582
05:46:59,120 --> 05:47:01,840
quick note before i move on

4583
05:47:01,840 --> 05:47:05,840
powerpoint suggested a ping pong icon

4584
05:47:05,840 --> 05:47:07,760
right there and i just kept it because

4585
05:47:07,760 --> 05:47:10,240
why not

4586
05:47:10,240 --> 05:47:11,440
all right

4587
05:47:11,440 --> 05:47:13,600
i liked it

4588
05:47:13,600 --> 05:47:16,480
all right so let's

4589
05:47:16,558 --> 05:47:19,440
live demo late and see through but

4590
05:47:19,440 --> 05:47:22,000
i like very few slides and lots of demos

4591
05:47:22,000 --> 05:47:24,240
so if you were to add up all the slides

4592
05:47:24,240 --> 05:47:25,680
that i've been using it might come out

4593
05:47:25,680 --> 05:47:27,440
to like 15.

4594
05:47:27,440 --> 05:47:30,718
so let's get this going

4595
05:47:30,718 --> 05:47:33,840
for this i'll be using a kmax

4596
05:47:33,840 --> 05:47:34,958
device

4597
05:47:34,958 --> 05:47:37,280
right here you can you can look it up i

4598
05:47:37,280 --> 05:47:38,718
won't go into details about it but what

4599
05:47:38,718 --> 05:47:40,480
basically what it does it you put it in

4600
05:47:40,480 --> 05:47:42,558
between on your network

4601
05:47:42,558 --> 05:47:44,400
and

4602
05:47:44,400 --> 05:47:46,080
there it is so you put it in between

4603
05:47:46,080 --> 05:47:48,878
your network and it degrades the network

4604
05:47:48,878 --> 05:47:52,638
in ways that you can control in order to

4605
05:47:52,638 --> 05:47:55,120
test devices

4606
05:47:55,120 --> 05:47:58,638
i do a lot of software development and

4607
05:47:58,638 --> 05:48:01,360
i'm very concerned about

4608
05:48:01,360 --> 05:48:04,080
network performance about my tools it's

4609
05:48:04,080 --> 05:48:06,718
very common that when you have say like

4610
05:48:06,718 --> 05:48:08,080
an app

4611
05:48:08,080 --> 05:48:10,718
the app runs like garbage why does the

4612
05:48:10,718 --> 05:48:12,558
hack run like garbage because the

4613
05:48:12,558 --> 05:48:13,680
developer

4614
05:48:13,680 --> 05:48:16,080
is over here sitting at his desk with

4615
05:48:16,080 --> 05:48:19,840
like an i7 computer with 32 gigs of ram

4616
05:48:19,840 --> 05:48:22,320
and the database is either

4617
05:48:22,320 --> 05:48:24,638
one hop over or even better running at

4618
05:48:24,638 --> 05:48:26,958
localhost so of course everything works

4619
05:48:26,958 --> 05:48:28,240
perfect

4620
05:48:28,240 --> 05:48:29,280
now i don't

4621
05:48:29,280 --> 05:48:31,440
i don't fault that setup because after

4622
05:48:31,440 --> 05:48:32,400
all

4623
05:48:32,400 --> 05:48:34,638
the hardware is cheap and developer time

4624
05:48:34,638 --> 05:48:36,320
is very expensive

4625
05:48:36,320 --> 05:48:37,920
so you want that you want them to have

4626
05:48:37,920 --> 05:48:39,760
all those tools but

4627
05:48:39,760 --> 05:48:43,120
once you ship it and you give to people

4628
05:48:43,120 --> 05:48:46,718
say like me who live in alabama and have

4629
05:48:46,718 --> 05:48:48,878
to go visit relatives out in the boonies

4630
05:48:48,878 --> 05:48:51,360
i have one bar and now the app behaves

4631
05:48:51,360 --> 05:48:53,040
like trash

4632
05:48:53,040 --> 05:48:53,920
this

4633
05:48:53,920 --> 05:48:56,240
device right here as well as other

4634
05:48:56,240 --> 05:48:58,400
network degradation devices can help you

4635
05:48:58,400 --> 05:49:00,718
test this so keep that in mind during

4636
05:49:00,718 --> 05:49:02,240
your development

4637
05:49:02,240 --> 05:49:06,080
so let's get to the demo

4638
05:49:06,080 --> 05:49:09,680
now the the goal is to

4639
05:49:09,680 --> 05:49:12,400
test latency and throughput through the

4640
05:49:12,400 --> 05:49:16,878
process of network degradation

4641
05:49:16,878 --> 05:49:18,480
so i'm going to connect to my raspberry

4642
05:49:18,480 --> 05:49:21,040
pi

4643
05:49:21,040 --> 05:49:24,480
so i have a vnc connection into it this

4644
05:49:24,480 --> 05:49:28,480
saves me a monitor from stealing juice

4645
05:49:28,480 --> 05:49:30,000
right here and also lets you get to see

4646
05:49:30,000 --> 05:49:32,400
it nice and easy so let's get this going

4647
05:49:32,400 --> 05:49:35,120
i'm going to

4648
05:49:35,120 --> 05:49:38,400
launch a couple of terminal windows

4649
05:49:38,400 --> 05:49:40,958
this is just running stock

4650
05:49:40,958 --> 05:49:43,040
raspbian os

4651
05:49:43,040 --> 05:49:44,320
actually i think they rename it to

4652
05:49:44,320 --> 05:49:47,600
raspberry pi os but just running stock

4653
05:49:47,600 --> 05:49:49,520
and what i'm going to do is i'm going to

4654
05:49:49,520 --> 05:49:50,958
launch

4655
05:49:50,958 --> 05:49:52,400
a python

4656
05:49:52,400 --> 05:49:54,000
web server

4657
05:49:54,000 --> 05:49:56,638
a little technique

4658
05:49:56,638 --> 05:50:00,080
if you ever want to transfer a file from

4659
05:50:00,080 --> 05:50:04,000
one computer to another on your lan

4660
05:50:04,000 --> 05:50:05,920
that is actually surprisingly difficult

4661
05:50:05,920 --> 05:50:08,558
to do i know there's things like um

4662
05:50:08,558 --> 05:50:10,638
nearby share that windows does from

4663
05:50:10,638 --> 05:50:12,400
windows to windows but when do you cross

4664
05:50:12,400 --> 05:50:14,638
platform from say linux to windows or

4665
05:50:14,638 --> 05:50:16,638
linux to mac that's actually really

4666
05:50:16,638 --> 05:50:18,798
difficult to set up but most things now

4667
05:50:18,798 --> 05:50:21,200
have python installed so you can just

4668
05:50:21,200 --> 05:50:24,558
launch a quick python server

4669
05:50:24,558 --> 05:50:26,718
in the directory

4670
05:50:26,718 --> 05:50:31,160
that you want let me check there it is

4671
05:50:34,240 --> 05:50:35,760
python

4672
05:50:35,760 --> 05:50:37,600
there it is

4673
05:50:37,600 --> 05:50:38,480
and

4674
05:50:38,480 --> 05:50:41,040
now you have

4675
05:50:41,040 --> 05:50:44,160
a nice easy simple

4676
05:50:44,160 --> 05:50:46,480
file transfer you know

4677
05:50:46,480 --> 05:50:48,400
download

4678
05:50:48,400 --> 05:50:52,760
so let's let me launch the other one

4679
05:50:59,360 --> 05:51:01,840
there we go

4680
05:51:02,160 --> 05:51:04,638
so that's one and that's

4681
05:51:04,638 --> 05:51:06,320
two

4682
05:51:06,320 --> 05:51:08,320
so it's an easy way to just transfer

4683
05:51:08,320 --> 05:51:10,080
files just launch a quick python web

4684
05:51:10,080 --> 05:51:11,120
server

4685
05:51:11,120 --> 05:51:14,320
now i'm going to take this and we'll see

4686
05:51:14,320 --> 05:51:16,558
the

4687
05:51:16,638 --> 05:51:19,200
throughput

4688
05:51:22,160 --> 05:51:26,000
i'm going to curl

4689
05:51:26,000 --> 05:51:28,400
we go

4690
05:51:29,520 --> 05:51:31,200
it's going to run a bit slow at first

4691
05:51:31,200 --> 05:51:33,040
because it's caching

4692
05:51:33,040 --> 05:51:34,638
but you can see here it's downloading

4693
05:51:34,638 --> 05:51:37,440
about 40 40 megs uh the next time around

4694
05:51:37,440 --> 05:51:39,440
i'll probably say 90 because uh it's

4695
05:51:39,440 --> 05:51:41,200
pulling it off the sd card which is kind

4696
05:51:41,200 --> 05:51:43,360
of slow but anyway i have really good

4697
05:51:43,360 --> 05:51:45,200
throughput now the other thing i want to

4698
05:51:45,200 --> 05:51:48,798
check is latency

4699
05:51:49,360 --> 05:51:51,920
so let me

4700
05:51:52,840 --> 05:51:56,878
ping a raspi video

4701
05:51:56,878 --> 05:51:59,760
and i have less than a millisecond

4702
05:51:59,760 --> 05:52:02,320
so that's excellent i have really good

4703
05:52:02,320 --> 05:52:03,600
latency

4704
05:52:03,600 --> 05:52:06,160
well very low latency and i have really

4705
05:52:06,160 --> 05:52:09,040
good throughput

4706
05:52:09,040 --> 05:52:11,280
so

4707
05:52:15,520 --> 05:52:17,040
is that better

4708
05:52:17,040 --> 05:52:18,480
alright yeah

4709
05:52:18,480 --> 05:52:19,920
so really good throughput really good

4710
05:52:19,920 --> 05:52:22,798
latency now the next thing i want to do

4711
05:52:22,798 --> 05:52:25,200
is trash the network so we get a good

4712
05:52:25,200 --> 05:52:27,520
test

4713
05:52:27,600 --> 05:52:30,558
so to do that

4714
05:52:30,558 --> 05:52:32,558
i'm going to

4715
05:52:32,558 --> 05:52:33,760
go to

4716
05:52:33,760 --> 05:52:37,320
kmax device

4717
05:52:38,320 --> 05:52:39,840
now i'm not going to just load into

4718
05:52:39,840 --> 05:52:41,760
scenario like before i'm showing you the

4719
05:52:41,760 --> 05:52:43,120
steps in case you want to do something

4720
05:52:43,120 --> 05:52:45,440
like this on your own

4721
05:52:45,440 --> 05:52:46,718
you can see here i have data

4722
05:52:46,718 --> 05:52:48,718
transferring right here and right here

4723
05:52:48,718 --> 05:52:52,240
so i'm gonna go to the default band

4724
05:52:52,558 --> 05:52:56,160
and let's kick off the download again

4725
05:52:57,840 --> 05:53:00,400
there see it's cache so now it's topping

4726
05:53:00,400 --> 05:53:03,360
out and we can see the spike right here

4727
05:53:03,360 --> 05:53:05,840
so the traffic's happening this way

4728
05:53:05,840 --> 05:53:09,200
so i'm going to add a classifier

4729
05:53:10,558 --> 05:53:12,160
a filter

4730
05:53:12,160 --> 05:53:14,320
ipport

4731
05:53:14,320 --> 05:53:16,958
and i am pulling that from

4732
05:53:16,958 --> 05:53:20,400
port 8001

4733
05:53:20,400 --> 05:53:21,680
so

4734
05:53:21,680 --> 05:53:25,280
source port 8001

4735
05:53:25,280 --> 05:53:27,760
and this one does support ranges if you

4736
05:53:27,760 --> 05:53:30,320
want to do something like that

4737
05:53:30,320 --> 05:53:33,280
tcp

4738
05:53:33,280 --> 05:53:37,760
so pulling from 8001 tcp apply close

4739
05:53:37,760 --> 05:53:39,680
i'm going to send this to

4740
05:53:39,680 --> 05:53:41,200
flow

4741
05:53:41,200 --> 05:53:44,200
1.

4742
05:53:46,798 --> 05:53:48,160
start again

4743
05:53:48,160 --> 05:53:50,000
double check

4744
05:53:50,000 --> 05:53:52,798
there it is so i've pulled off that

4745
05:53:52,798 --> 05:53:54,638
slice and sent it to this flow so now i

4746
05:53:54,638 --> 05:53:56,080
can do all kinds of interesting stuff to

4747
05:53:56,080 --> 05:53:57,840
it

4748
05:53:57,840 --> 05:53:59,600
if you're curious where all these other

4749
05:53:59,600 --> 05:54:02,160
spikes are coming from it is my

4750
05:54:02,160 --> 05:54:04,558
dnc connection itself it's representing

4751
05:54:04,558 --> 05:54:06,160
that

4752
05:54:06,160 --> 05:54:07,680
so we are going to

4753
05:54:07,680 --> 05:54:09,280
rate limit

4754
05:54:09,280 --> 05:54:11,760
enable

4755
05:54:11,760 --> 05:54:14,760
100k

4756
05:54:15,360 --> 05:54:17,040
there we go

4757
05:54:17,040 --> 05:54:19,440
close

4758
05:54:20,000 --> 05:54:25,000
now this should behave very badly

4759
05:54:32,718 --> 05:54:35,760
there we go it's like 16 days 10 days

4760
05:54:35,760 --> 05:54:37,360
eight days

4761
05:54:37,360 --> 05:54:39,120
i think it eventually settles down to

4762
05:54:39,120 --> 05:54:41,760
around three days five days when i did

4763
05:54:41,760 --> 05:54:43,760
this before

4764
05:54:43,760 --> 05:54:45,120
so that is

4765
05:54:45,120 --> 05:54:46,798
that is horrible

4766
05:54:46,798 --> 05:54:47,840
that is

4767
05:54:47,840 --> 05:54:50,718
basically unusable beyond anything

4768
05:54:50,718 --> 05:54:52,160
except maybe

4769
05:54:52,160 --> 05:54:54,558
browsing text or

4770
05:54:54,558 --> 05:54:57,360
telnet services or whatever

4771
05:54:57,360 --> 05:55:00,320
but here's the here's the really wonky

4772
05:55:00,320 --> 05:55:03,600
part of this test

4773
05:55:05,680 --> 05:55:06,878
let me do

4774
05:55:06,878 --> 05:55:10,798
curl i'm going to do this number two and

4775
05:55:10,798 --> 05:55:12,480
then i'll make it bigger

4776
05:55:12,480 --> 05:55:14,798
again

4777
05:55:22,400 --> 05:55:25,360
let's try

4778
05:55:25,360 --> 05:55:26,798
my

4779
05:55:26,798 --> 05:55:30,480
my null command got screwed up

4780
05:55:30,878 --> 05:55:32,798
curl

4781
05:55:32,798 --> 05:55:36,120
there it goes

4782
05:55:42,080 --> 05:55:43,600
i'm going to close this out just open up

4783
05:55:43,600 --> 05:55:46,840
a new one

4784
05:55:53,520 --> 05:55:56,718
so you make it expand it

4785
05:55:56,718 --> 05:55:59,760
then i can make it bigger

4786
05:56:00,240 --> 05:56:02,958
there it goes

4787
05:56:03,920 --> 05:56:07,120
so this is going to finish in

4788
05:56:07,120 --> 05:56:09,680
about 30 seconds while this one

4789
05:56:09,680 --> 05:56:11,440
it looks like it's hitting about 88

4790
05:56:11,440 --> 05:56:13,520
hours now

4791
05:56:13,520 --> 05:56:16,160
here's the part that will

4792
05:56:16,160 --> 05:56:18,878
make the system in pull his hair out

4793
05:56:18,878 --> 05:56:23,360
because this is the same file

4794
05:56:23,360 --> 05:56:24,558
coming from

4795
05:56:24,558 --> 05:56:26,638
the same server

4796
05:56:26,638 --> 05:56:28,878
over the same network

4797
05:56:28,878 --> 05:56:29,600
with

4798
05:56:29,600 --> 05:56:32,240
vastly different results

4799
05:56:32,240 --> 05:56:33,600
can you imagine trying to troubleshoot

4800
05:56:33,600 --> 05:56:34,718
that

4801
05:56:34,718 --> 05:56:36,240
so this user over here is like this

4802
05:56:36,240 --> 05:56:37,760
download's taking absolutely forever

4803
05:56:37,760 --> 05:56:39,840
this person sitting right next to him

4804
05:56:39,840 --> 05:56:41,840
it works just fine

4805
05:56:41,840 --> 05:56:44,080
so

4806
05:56:44,400 --> 05:56:47,120
it is uh throughput versus pissing off

4807
05:56:47,120 --> 05:56:49,280
the system now i want to ask you like

4808
05:56:49,280 --> 05:56:52,399
how would you troubleshoot this

4809
05:56:54,558 --> 05:56:57,040
nobody

4810
05:56:58,638 --> 05:57:01,360
change careers

4811
05:57:01,680 --> 05:57:03,440
what

4812
05:57:03,440 --> 05:57:04,958
so like i'll go and tell you what you

4813
05:57:04,958 --> 05:57:06,718
would do is it's the standard

4814
05:57:06,718 --> 05:57:08,400
troubleshooting tool as you would

4815
05:57:08,400 --> 05:57:10,240
eliminate hops

4816
05:57:10,240 --> 05:57:12,080
just start eliminating hots till

4817
05:57:12,080 --> 05:57:13,440
eventually

4818
05:57:13,440 --> 05:57:16,160
this computer is plugged directly into

4819
05:57:16,160 --> 05:57:18,160
here and then it would start working and

4820
05:57:18,160 --> 05:57:20,240
then you'll work your way back so anyway

4821
05:57:20,240 --> 05:57:22,878
but that would be a long arduous process

4822
05:57:22,878 --> 05:57:24,638
of getting on the terminal and looking

4823
05:57:24,638 --> 05:57:26,400
at the router and all that kind of stuff

4824
05:57:26,400 --> 05:57:28,558
when the problem exists outside the

4825
05:57:28,558 --> 05:57:32,080
router completely so anyway fun stuff

4826
05:57:32,080 --> 05:57:34,480
now to drive the point home of latency

4827
05:57:34,480 --> 05:57:38,718
versus throughput i like to do this

4828
05:57:41,440 --> 05:57:45,600
razpi video and show that ping is

4829
05:57:45,600 --> 05:57:47,200
perfect because that'll probably be the

4830
05:57:47,200 --> 05:57:49,520
first test that will be shown

4831
05:57:49,520 --> 05:57:51,680
so

4832
05:57:53,280 --> 05:57:55,840
excellent latency terrible throughput

4833
05:57:55,840 --> 05:57:59,638
now let's look at the reverse

4834
05:57:59,760 --> 05:58:01,920
close that out now they've got two big

4835
05:58:01,920 --> 05:58:04,958
screens i'll leave it here

4836
05:58:06,878 --> 05:58:09,680
so i don't need my web servers anymore

4837
05:58:09,680 --> 05:58:11,760
instead i'll launch

4838
05:58:11,760 --> 05:58:14,399
vlc

4839
05:58:22,638 --> 05:58:24,480
for the

4840
05:58:24,480 --> 05:58:27,840
the latency test

4841
05:58:30,160 --> 05:58:32,080
now

4842
05:58:32,080 --> 05:58:33,920
i'm going to oh

4843
05:58:33,920 --> 05:58:36,480
someone asked me earlier

4844
05:58:36,480 --> 05:58:38,400
i want to be clear i think there was

4845
05:58:38,400 --> 05:58:40,718
confusion but packet center actually

4846
05:58:40,718 --> 05:58:43,280
runs on windows mac and linux and

4847
05:58:43,280 --> 05:58:44,958
raspberry pi it runs on all that kind of

4848
05:58:44,958 --> 05:58:47,280
stuff i don't know if that i mentioned

4849
05:58:47,280 --> 05:58:49,360
something about being windows only that

4850
05:58:49,360 --> 05:58:51,280
was the pi player app

4851
05:58:51,280 --> 05:58:53,120
but pack center runs on everything and

4852
05:58:53,120 --> 05:58:54,798
for things that it does not run on you

4853
05:58:54,798 --> 05:58:56,320
can obviously download the source code

4854
05:58:56,320 --> 05:58:58,240
and compile it so i just wanted to make

4855
05:58:58,240 --> 05:59:00,480
that clear

4856
05:59:00,480 --> 05:59:02,718
for raspberry pi itself it actually runs

4857
05:59:02,718 --> 05:59:04,400
on raspberry pi but you have to compile

4858
05:59:04,400 --> 05:59:06,080
the source code i did not build it for

4859
05:59:06,080 --> 05:59:08,320
arm processors

4860
05:59:08,320 --> 05:59:11,040
all right so i've got two vlcs and we're

4861
05:59:11,040 --> 05:59:13,280
going to do a latency test

4862
05:59:13,280 --> 05:59:15,520
by launching my own dlc

4863
05:59:15,520 --> 05:59:17,040
and

4864
05:59:17,040 --> 05:59:20,400
here is what i'm going to send

4865
05:59:20,400 --> 05:59:23,840
i'm going to open reset

4866
05:59:26,000 --> 05:59:28,080
so i'm going to send this clock video to

4867
05:59:28,080 --> 05:59:30,798
both sides

4868
05:59:31,680 --> 05:59:33,760
it's just a clock that counts to

4869
05:59:33,760 --> 05:59:38,160
one minute for 20 for 20 minutes

4870
05:59:40,240 --> 05:59:43,200
so open network stream

4871
05:59:43,200 --> 05:59:45,840
and no not no string

4872
05:59:45,840 --> 05:59:48,958
we want to stream

4873
05:59:48,958 --> 05:59:52,399
this video that guy

4874
05:59:52,638 --> 05:59:54,558
i'm showing you the steps because maybe

4875
05:59:54,558 --> 05:59:56,798
you want to set up your own ad hoc

4876
05:59:56,798 --> 05:59:58,638
streaming server this is how you could

4877
05:59:58,638 --> 06:00:00,958
do it

4878
06:00:01,360 --> 06:00:02,840
stream

4879
06:00:02,840 --> 06:00:06,240
that that file yes

4880
06:00:06,240 --> 06:00:08,798
and i i know

4881
06:00:08,798 --> 06:00:11,840
dan from yesterday is a fan of rtsp

4882
06:00:11,840 --> 06:00:13,760
but i'm going to use rtp because i want

4883
06:00:13,760 --> 06:00:17,040
to stay purely udp see the rtsp you can

4884
06:00:17,040 --> 06:00:20,400
do you does udp also if you want but

4885
06:00:20,400 --> 06:00:22,718
there's like a tcp connection at first

4886
06:00:22,718 --> 06:00:24,798
and then it sends that udp this is going

4887
06:00:24,798 --> 06:00:27,680
to be pure udp

4888
06:00:27,680 --> 06:00:29,200
so i'm going to add that

4889
06:00:29,200 --> 06:00:31,360
i'm going to pour 50 000 to five

4890
06:00:31,360 --> 06:00:32,638
thousand four

4891
06:00:32,638 --> 06:00:34,400
this is gonna be raspi

4892
06:00:34,400 --> 06:00:36,558
video it's the address i'm gonna do

4893
06:00:36,558 --> 06:00:39,120
another one

4894
06:00:40,000 --> 06:00:42,480
rise pi

4895
06:00:42,480 --> 06:00:46,558
video to the other port that i set up

4896
06:00:46,558 --> 06:00:48,320
next

4897
06:00:48,320 --> 06:00:49,360
next

4898
06:00:49,360 --> 06:00:50,958
if you want to do it on the command line

4899
06:00:50,958 --> 06:00:52,718
you could do something like that

4900
06:00:52,718 --> 06:00:55,718
stream

4901
06:01:04,320 --> 06:01:08,239
i must have did something wrong

4902
06:01:12,878 --> 06:01:15,040
stream

4903
06:01:15,040 --> 06:01:16,558
add

4904
06:01:16,558 --> 06:01:18,400
this file

4905
06:01:18,400 --> 06:01:20,638
stream

4906
06:01:20,638 --> 06:01:22,080
next

4907
06:01:22,080 --> 06:01:24,798
rtp

4908
06:01:26,000 --> 06:01:27,040
whereas

4909
06:01:27,040 --> 06:01:30,638
pi video

4910
06:01:32,080 --> 06:01:33,680
next

4911
06:01:33,680 --> 06:01:35,360
rtp

4912
06:01:35,360 --> 06:01:40,160
raz pi video 50 0005

4913
06:01:40,160 --> 06:01:42,400
next next

4914
06:01:42,400 --> 06:01:44,798
stream

4915
06:01:52,240 --> 06:01:56,280
it is not picking up the video

4916
06:02:05,280 --> 06:02:06,638
open

4917
06:02:06,638 --> 06:02:10,360
here's 50 000.

4918
06:02:10,638 --> 06:02:13,360
there's that one

4919
06:02:15,200 --> 06:02:17,520
open

4920
06:02:17,680 --> 06:02:19,440
open network stream

4921
06:02:19,440 --> 06:02:22,440
5004.

4922
06:02:27,680 --> 06:02:29,840
there it goes i don't know why

4923
06:02:29,840 --> 06:02:31,760
vlc has all kinds of quirks like if you

4924
06:02:31,760 --> 06:02:34,160
let it sit there long enough it just

4925
06:02:34,160 --> 06:02:36,240
loses its brain for some reason i don't

4926
06:02:36,240 --> 06:02:38,240
know why

4927
06:02:38,240 --> 06:02:41,200
but anyway we got it

4928
06:02:41,600 --> 06:02:44,480
let's make a little bigger

4929
06:02:51,520 --> 06:02:54,480
so you can see that these are in sync

4930
06:02:54,480 --> 06:02:56,480
they're playing the same video which is

4931
06:02:56,480 --> 06:02:58,400
what we want

4932
06:02:58,400 --> 06:03:00,080
now

4933
06:03:00,080 --> 06:03:01,520
we're going to learn

4934
06:03:01,520 --> 06:03:03,920
uh latency by making the system angry

4935
06:03:03,920 --> 06:03:05,280
again

4936
06:03:05,280 --> 06:03:08,638
so watch what we do i'm going to

4937
06:03:08,638 --> 06:03:12,557
mess with the one on the left

4938
06:03:15,280 --> 06:03:17,760
so i got to make another classifier

4939
06:03:17,760 --> 06:03:20,000
i'm headed i'm headed this direction

4940
06:03:20,000 --> 06:03:20,958
before

4941
06:03:20,958 --> 06:03:23,360
i was pulling from the raspberry now i'm

4942
06:03:23,360 --> 06:03:25,600
pushing to the raspberry pi so i have to

4943
06:03:25,600 --> 06:03:29,840
go on the left so enable the classifier

4944
06:03:29,840 --> 06:03:32,400
add a new filter

4945
06:03:32,400 --> 06:03:34,878
and i am sending it

4946
06:03:34,878 --> 06:03:37,440
enable

4947
06:03:37,680 --> 06:03:41,600
i'm sending it to 5004

4948
06:03:41,600 --> 06:03:44,399
with udp

4949
06:03:45,440 --> 06:03:48,440
apply

4950
06:03:48,480 --> 06:03:53,280
and i'm going to do another flow flow to

4951
06:03:54,240 --> 06:03:55,920
there it goes so it dropped down here

4952
06:03:55,920 --> 06:03:58,000
it's showing me the traffic right here

4953
06:03:58,000 --> 06:04:02,200
and i'm going to add a delay

4954
06:04:02,480 --> 06:04:03,360
five

4955
06:04:03,360 --> 06:04:05,840
seconds

4956
06:04:12,878 --> 06:04:15,760
there he goes five second delay

4957
06:04:15,760 --> 06:04:18,320
so once again we have

4958
06:04:18,320 --> 06:04:19,200
uh

4959
06:04:19,200 --> 06:04:20,958
same server

4960
06:04:20,958 --> 06:04:23,440
you know well same destination

4961
06:04:23,440 --> 06:04:26,400
same server sending the same data

4962
06:04:26,400 --> 06:04:28,320
to the same map

4963
06:04:28,320 --> 06:04:30,160
two things running side by side with

4964
06:04:30,160 --> 06:04:32,000
vastly different results

4965
06:04:32,000 --> 06:04:34,080
and if you're trying to troubleshoot

4966
06:04:34,080 --> 06:04:36,080
this you have all kinds of issues like i

4967
06:04:36,080 --> 06:04:37,840
said before you you would troubleshoot

4968
06:04:37,840 --> 06:04:40,000
it the same way before is you would do

4969
06:04:40,000 --> 06:04:41,760
all kinds of configs

4970
06:04:41,760 --> 06:04:43,120
tests and it wouldn't work and then

4971
06:04:43,120 --> 06:04:44,480
eventually you start

4972
06:04:44,480 --> 06:04:46,160
decreasing your hops until you actually

4973
06:04:46,160 --> 06:04:48,480
get to right here in order to figure out

4974
06:04:48,480 --> 06:04:49,920
what's going on

4975
06:04:49,920 --> 06:04:52,160
now

4976
06:04:52,958 --> 06:04:54,480
if you've had this

4977
06:04:54,480 --> 06:04:57,040
playing at home

4978
06:04:57,040 --> 06:04:58,958
it'd be intolerable now if you had just

4979
06:04:58,958 --> 06:05:00,718
one screen it'd probably be fine like

4980
06:05:00,718 --> 06:05:02,718
you start up netflix there's a five

4981
06:05:02,718 --> 06:05:04,558
second delay then you get all your data

4982
06:05:04,558 --> 06:05:06,480
no big deal but i want you to think

4983
06:05:06,480 --> 06:05:08,638
about um

4984
06:05:08,638 --> 06:05:10,798
a video stream with

4985
06:05:10,798 --> 06:05:12,638
a channel

4986
06:05:12,638 --> 06:05:15,200
of audio and video

4987
06:05:15,200 --> 06:05:17,120
so it's very common when you're

4988
06:05:17,120 --> 06:05:19,280
transcoding audio and video that you

4989
06:05:19,280 --> 06:05:21,760
separate audio in the video send them on

4990
06:05:21,760 --> 06:05:23,760
two different channels then merge the

4991
06:05:23,760 --> 06:05:25,360
two later

4992
06:05:25,360 --> 06:05:28,240
into one stream

4993
06:05:29,280 --> 06:05:31,200
what would happen if one was audio one

4994
06:05:31,200 --> 06:05:32,240
was video

4995
06:05:32,240 --> 06:05:34,878
it'd be intolerable does anybody know

4996
06:05:34,878 --> 06:05:37,760
what the tolerance actually is

4997
06:05:37,760 --> 06:05:39,680
for audio and video

4998
06:05:39,680 --> 06:05:42,000
difference like how much can the human

4999
06:05:42,000 --> 06:05:44,480
perceive

5000
06:05:45,040 --> 06:05:48,878
any guesses 100 milliseconds

5001
06:05:49,200 --> 06:05:50,320
10

5002
06:05:50,320 --> 06:05:52,160
it's actually around

5003
06:05:52,160 --> 06:05:55,040
20 to 50 like that's about all you can

5004
06:05:55,040 --> 06:05:56,638
get then the human can perceive the

5005
06:05:56,638 --> 06:05:57,920
difference they wouldn't know whether

5006
06:05:57,920 --> 06:05:59,600
it's a leading or lagging but they'll

5007
06:05:59,600 --> 06:06:01,440
know that something is wrong

5008
06:06:01,440 --> 06:06:03,920
and i have it at five seconds

5009
06:06:03,920 --> 06:06:06,798
so if i was to do ping it would work

5010
06:06:06,798 --> 06:06:09,360
but finally

5011
06:06:09,360 --> 06:06:11,760
what's the throughput

5012
06:06:11,760 --> 06:06:14,558
of that video versus the other video

5013
06:06:14,558 --> 06:06:15,840
if i was to measure the throughput what

5014
06:06:15,840 --> 06:06:18,000
would i get between the two

5015
06:06:18,000 --> 06:06:20,400
they'd be the same exactly

5016
06:06:20,400 --> 06:06:22,160
even though one is completely unusable

5017
06:06:22,160 --> 06:06:24,080
you get the same throughput so that's

5018
06:06:24,080 --> 06:06:26,558
what i tell the students like

5019
06:06:26,558 --> 06:06:27,920
same throughput that's why you need to

5020
06:06:27,920 --> 06:06:29,680
know the latency so the previous

5021
06:06:29,680 --> 06:06:31,600
demonstration

5022
06:06:31,600 --> 06:06:33,840
had a very good latency but terrible

5023
06:06:33,840 --> 06:06:35,120
throughput

5024
06:06:35,120 --> 06:06:36,480
using a download

5025
06:06:36,480 --> 06:06:38,000
this one has

5026
06:06:38,000 --> 06:06:39,440
really good throughput but terrible

5027
06:06:39,440 --> 06:06:41,840
latency so that's why you need both when

5028
06:06:41,840 --> 06:06:45,120
you measure your network performance

5029
06:06:45,600 --> 06:06:46,718
are there any questions about this

5030
06:06:46,718 --> 06:06:49,718
demonstration

5031
06:07:02,798 --> 06:07:04,638
so you would make it where the cost

5032
06:07:04,638 --> 06:07:07,920
would make it seem like it was not as

5033
06:07:07,920 --> 06:07:09,280
when it was supposed to close i wanted

5034
06:07:09,280 --> 06:07:12,320
to stay open until 7pm when it was

5035
06:07:12,320 --> 06:07:15,040
supposed to close

5036
06:07:15,360 --> 06:07:18,360
that

5037
06:07:22,080 --> 06:07:23,280
i

5038
06:07:23,280 --> 06:07:27,280
i actually don't know

5039
06:07:27,280 --> 06:07:30,000
that might work this

5040
06:07:30,000 --> 06:07:32,400
this is a this is a pretty high-end box

5041
06:07:32,400 --> 06:07:34,480
but um

5042
06:07:34,480 --> 06:07:37,280
okay so what he asked was he wanted to

5043
06:07:37,280 --> 06:07:39,200
know if he could mess with an ntp

5044
06:07:39,200 --> 06:07:41,600
service

5045
06:07:42,638 --> 06:07:45,958
but the response

5046
06:07:56,718 --> 06:07:58,958
i got it okay so

5047
06:07:58,958 --> 06:08:00,400
a command

5048
06:08:00,400 --> 06:08:02,958
to shut the door closed like say close

5049
06:08:02,958 --> 06:08:05,040
the garage door at 7 pm

5050
06:08:05,040 --> 06:08:07,200
you capture it with this thing and delay

5051
06:08:07,200 --> 06:08:09,120
it for x number of time before it

5052
06:08:09,120 --> 06:08:11,840
reaches the garage door

5053
06:08:11,840 --> 06:08:13,360
and that

5054
06:08:13,360 --> 06:08:16,798
yes you can absolutely do that

5055
06:08:18,400 --> 06:08:20,798
this this thing has a

5056
06:08:20,798 --> 06:08:24,000
really deep buffer now i'm i'm guessing

5057
06:08:24,000 --> 06:08:25,840
like that's probably just like a one-off

5058
06:08:25,840 --> 06:08:29,600
command that might be at most a kilobyte

5059
06:08:29,600 --> 06:08:31,840
and you can see here i have five seconds

5060
06:08:31,840 --> 06:08:34,080
really bad video but video nevertheless

5061
06:08:34,080 --> 06:08:35,760
five seconds you know i've drawn i've

5062
06:08:35,760 --> 06:08:37,840
dragged this up to 30 seconds so yeah it

5063
06:08:37,840 --> 06:08:39,280
could definitely hold

5064
06:08:39,280 --> 06:08:41,360
a command for however long you need no

5065
06:08:41,360 --> 06:08:43,840
biggie

5066
06:08:46,080 --> 06:08:47,520
i mean

5067
06:08:47,520 --> 06:08:49,120
i mean this thing this thing's only

5068
06:08:49,120 --> 06:08:50,878
about 8 000 euros so i mean what's the

5069
06:08:50,878 --> 06:08:53,120
big deal

5070
06:08:53,120 --> 06:08:54,558
i i don't know you'd have to search

5071
06:08:54,558 --> 06:08:55,440
around

5072
06:08:55,440 --> 06:08:58,080
but yes yes theoretically it may be

5073
06:08:58,080 --> 06:09:01,360
easier if you were to just capture it

5074
06:09:01,360 --> 06:09:02,400
and

5075
06:09:02,400 --> 06:09:04,638
you just build your own echo service

5076
06:09:04,638 --> 06:09:06,480
it's not hard to do

5077
06:09:06,480 --> 06:09:07,440
so you would have like a little

5078
06:09:07,440 --> 06:09:09,440
raspberry pi that listens for it capture

5079
06:09:09,440 --> 06:09:10,798
it and just kind of hold it in memory

5080
06:09:10,798 --> 06:09:12,718
yourself to spit back out

5081
06:09:12,718 --> 06:09:15,120
or you can buy one of these anyway yes

5082
06:09:15,120 --> 06:09:18,160
absolutely yes you can you can do that

5083
06:09:18,160 --> 06:09:19,600
it's a good question and by other

5084
06:09:19,600 --> 06:09:21,040
questions

5085
06:09:21,040 --> 06:09:24,600
ask me more questions

5086
06:09:34,480 --> 06:09:36,638
good question

5087
06:09:36,638 --> 06:09:38,958
so the reason why you hit the play

5088
06:09:38,958 --> 06:09:41,520
button and it grinds for like 10 seconds

5089
06:09:41,520 --> 06:09:42,958
or so well that tends like a while

5090
06:09:42,958 --> 06:09:45,120
before it plays or hits stop it runs

5091
06:09:45,120 --> 06:09:46,558
it's because

5092
06:09:46,558 --> 06:09:49,920
i'm doing a system call to linux to

5093
06:09:49,920 --> 06:09:52,798
launch a separate app to play it

5094
06:09:52,798 --> 06:09:55,440
until it runs out and the way the stop

5095
06:09:55,440 --> 06:09:56,718
command works

5096
06:09:56,718 --> 06:10:00,160
is i do a kill all system call to the

5097
06:10:00,160 --> 06:10:02,160
name of that to kill it so the thing is

5098
06:10:02,160 --> 06:10:03,680
just playing then it waits for like a

5099
06:10:03,680 --> 06:10:06,320
pseudo kill to kill off it's extremely

5100
06:10:06,320 --> 06:10:08,798
inefficient way to do it but i don't

5101
06:10:08,798 --> 06:10:10,080
care because i'm just trying to do a

5102
06:10:10,080 --> 06:10:11,760
demonstration

5103
06:10:11,760 --> 06:10:14,557
that's why it's low

5104
06:10:16,958 --> 06:10:18,400
anyone else

5105
06:10:18,400 --> 06:10:20,480
any more questions it's the last talk of

5106
06:10:20,480 --> 06:10:21,840
the day guys

5107
06:10:21,840 --> 06:10:23,440
last chance

5108
06:10:23,440 --> 06:10:26,399
to grill damn

5109
06:10:26,638 --> 06:10:27,520
no

5110
06:10:27,520 --> 06:10:29,920
looks like that's it all right thank you

5111
06:10:29,920 --> 06:10:34,199
so much dan thank you so much

5112
06:10:37,200 --> 06:10:39,840
so um

5113
06:10:40,160 --> 06:10:41,600
we've got about

5114
06:10:41,600 --> 06:10:43,680
let's see what time is it

5115
06:10:43,680 --> 06:10:45,840
all right so it's 3 p.m now

5116
06:10:45,840 --> 06:10:47,760
about 15 minutes

5117
06:10:47,760 --> 06:10:49,760
please join me back here

5118
06:10:49,760 --> 06:10:52,160
for uh the panel

5119
06:10:52,160 --> 06:10:53,920
i hope you guys have been submitting uh

5120
06:10:53,920 --> 06:10:55,600
good questions that will get terrible

5121
06:10:55,600 --> 06:10:56,718
answers

5122
06:10:56,718 --> 06:10:59,120
because that's the whole idea

5123
06:10:59,120 --> 06:11:01,360
i think a lot of you have and actually

5124
06:11:01,360 --> 06:11:03,920
oh someone put him up behind me

5125
06:11:03,920 --> 06:11:05,440
that's great

5126
06:11:05,440 --> 06:11:07,280
uh yeah so join me back here in about 15

5127
06:11:07,280 --> 06:11:10,000
minutes for the panel and uh

5128
06:11:10,000 --> 06:11:12,480
for the people watching at home this is

5129
06:11:12,480 --> 06:11:14,320
the end of security fest i'm waving to

5130
06:11:14,320 --> 06:11:16,718
the stream

5131
06:11:16,718 --> 06:11:19,440
so thank you guys for watching

5132
06:11:19,440 --> 06:11:21,520
and we'll see you next year but you guys

5133
06:11:21,520 --> 06:11:22,638
stick around

5134
06:11:22,638 --> 06:11:25,130
okay see you in a bit

5135
06:11:25,130 --> 06:11:29,240
[Applause]

