1
00:00:08,639 --> 00:00:12,079
hello

2
00:00:09,200 --> 00:00:12,639
everyone my name is hernan palumbo i'm a

3
00:00:12,080 --> 00:00:14,960
recent

4
00:00:12,639 --> 00:00:16,480
phd graduate from the university of

5
00:00:14,960 --> 00:00:18,560
south florida

6
00:00:16,480 --> 00:00:20,560
hello everyone my name is armin zieri

7
00:00:18,560 --> 00:00:22,479
cabaret and i'm ph candidate at the

8
00:00:20,560 --> 00:00:24,799
university of south florida

9
00:00:22,480 --> 00:00:25,920
this talk is about using an anthropology

10
00:00:24,800 --> 00:00:27,359
research method

11
00:00:25,920 --> 00:00:29,599
to understand secure software

12
00:00:27,359 --> 00:00:32,559
development beside

13
00:00:29,599 --> 00:00:34,000
meme our team includes our advisors to

14
00:00:32,558 --> 00:00:37,199
computer science professor

15
00:00:34,000 --> 00:00:37,760
shimon gu and jd gatti and also daniel

16
00:00:37,200 --> 00:00:40,480
landy

17
00:00:37,760 --> 00:00:40,960
our anthropologist professor in this

18
00:00:40,480 --> 00:00:43,680
work

19
00:00:40,960 --> 00:00:45,280
we propose a novel approach to study

20
00:00:43,680 --> 00:00:48,160
software and security

21
00:00:45,280 --> 00:00:51,680
and also introduce a full creation model

22
00:00:48,160 --> 00:00:53,519
to improve safety supportability

23
00:00:51,680 --> 00:00:55,440
ss shows the number of new software

24
00:00:53,520 --> 00:00:56,320
vulnerabilities reported every year is

25
00:00:55,440 --> 00:00:58,320
on the right

26
00:00:56,320 --> 00:01:00,160
as these graphs clearly display the

27
00:00:58,320 --> 00:01:02,640
trend is increasing

28
00:01:00,160 --> 00:01:04,158
the question here is are the developers

29
00:01:02,640 --> 00:01:05,760
to be blamed

30
00:01:04,159 --> 00:01:07,840
there have been different points of view

31
00:01:05,760 --> 00:01:09,920
on this question why some of the

32
00:01:07,840 --> 00:01:10,720
researchers think that the developer is

33
00:01:09,920 --> 00:01:13,760
enemy

34
00:01:10,720 --> 00:01:14,798
others believe otherwise during the past

35
00:01:13,760 --> 00:01:16,720
20 years

36
00:01:14,799 --> 00:01:18,320
researchers have studied the interplay

37
00:01:16,720 --> 00:01:19,920
between developers and the software

38
00:01:18,320 --> 00:01:21,600
security process

39
00:01:19,920 --> 00:01:23,119
in a more recent research two

40
00:01:21,600 --> 00:01:25,439
researchers

41
00:01:23,119 --> 00:01:27,280
and sonya shiasan brought up a new

42
00:01:25,439 --> 00:01:28,639
perspective that hadn't been closely

43
00:01:27,280 --> 00:01:30,000
looked at before by the research

44
00:01:28,640 --> 00:01:32,240
committee in the past

45
00:01:30,000 --> 00:01:34,479
they concluded in their research that

46
00:01:32,240 --> 00:01:36,479
the developers were motivated to develop

47
00:01:34,479 --> 00:01:38,960
secure coding but were often obstructed

48
00:01:36,479 --> 00:01:40,640
by a mismanaged organization process

49
00:01:38,960 --> 00:01:42,640
in their ships paper they highlighted

50
00:01:40,640 --> 00:01:44,799
rather than blaming developers

51
00:01:42,640 --> 00:01:45,920
our analysis shows that the problem

52
00:01:44,799 --> 00:01:48,240
extends up in

53
00:01:45,920 --> 00:01:50,000
company hierarchy they also recommend

54
00:01:48,240 --> 00:01:51,520
that that study should look behind the

55
00:01:50,000 --> 00:01:53,200
developers and examine broader

56
00:01:51,520 --> 00:01:55,280
organizations factor

57
00:01:53,200 --> 00:01:57,200
at chi paper they advise our work

58
00:01:55,280 --> 00:01:58,159
highlights to need to look beyond the

59
00:01:57,200 --> 00:01:59,439
individual

60
00:01:58,159 --> 00:02:01,759
and take a holistic approach to

61
00:01:59,439 --> 00:02:05,758
investigate organizational issues

62
00:02:01,759 --> 00:02:08,639
influence influencing software security

63
00:02:05,759 --> 00:02:09,598
so the question begins how do we

64
00:02:08,639 --> 00:02:13,279
understand

65
00:02:09,598 --> 00:02:14,959
developers culture how do we get into

66
00:02:13,280 --> 00:02:17,800
their minds

67
00:02:14,959 --> 00:02:20,160
how do we avoid being biased by our own

68
00:02:17,800 --> 00:02:23,239
preconceptions as researchers

69
00:02:20,160 --> 00:02:24,400
that we may have about their culture the

70
00:02:23,239 --> 00:02:27,680
anthropologist

71
00:02:24,400 --> 00:02:29,840
clifford gears arguably one of the most

72
00:02:27,680 --> 00:02:31,360
distinguished anthropologists of the

73
00:02:29,840 --> 00:02:34,640
20th century

74
00:02:31,360 --> 00:02:35,440
had an influential answer to understand

75
00:02:34,640 --> 00:02:38,559
people

76
00:02:35,440 --> 00:02:41,280
we have to look closely at their culture

77
00:02:38,560 --> 00:02:43,680
as gears described in his famous work

78
00:02:41,280 --> 00:02:46,160
about balinese fighting

79
00:02:43,680 --> 00:02:47,200
to understand human phenomena we really

80
00:02:46,160 --> 00:02:50,319
need to acquire

81
00:02:47,200 --> 00:02:52,959
a native's point of view

82
00:02:50,319 --> 00:02:53,920
thus to understand the insecurity

83
00:02:52,959 --> 00:02:56,080
problem

84
00:02:53,920 --> 00:02:58,720
we need to study the problem within the

85
00:02:56,080 --> 00:03:00,879
context of where the process happens

86
00:02:58,720 --> 00:03:02,159
in other words we need to study

87
00:03:00,879 --> 00:03:05,760
developers

88
00:03:02,159 --> 00:03:08,480
in their native habitat

89
00:03:05,760 --> 00:03:10,799
so we decided to study the process of

90
00:03:08,480 --> 00:03:13,040
developing secure software

91
00:03:10,800 --> 00:03:15,920
by becoming actual developers in a

92
00:03:13,040 --> 00:03:19,120
software security company

93
00:03:15,920 --> 00:03:21,119
the main participants of this study were

94
00:03:19,120 --> 00:03:23,280
experienced software engineers in a

95
00:03:21,120 --> 00:03:27,120
small development team

96
00:03:23,280 --> 00:03:30,319
managers support engineers and other

97
00:03:27,120 --> 00:03:32,480
company staff the main product under

98
00:03:30,319 --> 00:03:35,200
study was a solution for controlling

99
00:03:32,480 --> 00:03:37,200
network access

100
00:03:35,200 --> 00:03:38,958
the study was reviewed and approved by

101
00:03:37,200 --> 00:03:41,040
the irb

102
00:03:38,959 --> 00:03:42,799
and participants were informed and gave

103
00:03:41,040 --> 00:03:44,560
verbal consent

104
00:03:42,799 --> 00:03:46,799
field notes were anonymized and

105
00:03:44,560 --> 00:03:49,680
vulnerabilities were disclosed to the

106
00:03:46,799 --> 00:03:49,680
development team

107
00:03:50,799 --> 00:03:54,159
for our study we used participant

108
00:03:53,120 --> 00:03:56,319
observation

109
00:03:54,159 --> 00:03:58,720
which is a well established methodology

110
00:03:56,319 --> 00:04:00,560
in the social sciences

111
00:03:58,720 --> 00:04:02,159
there are five features of our

112
00:04:00,560 --> 00:04:05,840
experimental setup

113
00:04:02,159 --> 00:04:08,399
that i would like to highlight first

114
00:04:05,840 --> 00:04:09,040
participant observation is often a solo

115
00:04:08,400 --> 00:04:12,239
affair

116
00:04:09,040 --> 00:04:15,040
in the social sciences being two

117
00:04:12,239 --> 00:04:16,079
embedded researchers allowed us to study

118
00:04:15,040 --> 00:04:18,238
the company

119
00:04:16,079 --> 00:04:20,799
from two different but complementary

120
00:04:18,238 --> 00:04:23,840
perspectives

121
00:04:20,798 --> 00:04:25,599
second we had regular discussions with

122
00:04:23,840 --> 00:04:28,080
the larger research team

123
00:04:25,600 --> 00:04:30,320
that included experts in security and

124
00:04:28,080 --> 00:04:32,880
anthropology

125
00:04:30,320 --> 00:04:34,240
third we follow the general inductive

126
00:04:32,880 --> 00:04:38,960
analysis approach

127
00:04:34,240 --> 00:04:41,280
to code or analyze our field nodes

128
00:04:38,960 --> 00:04:43,440
then in addition to being trained in

129
00:04:41,280 --> 00:04:45,758
qualitative research methods

130
00:04:43,440 --> 00:04:47,919
we had security knowledge that enabled

131
00:04:45,759 --> 00:04:48,639
us to quickly get immersed into the

132
00:04:47,919 --> 00:04:51,120
company's

133
00:04:48,639 --> 00:04:53,040
software development process and start

134
00:04:51,120 --> 00:04:56,479
observing practices that could

135
00:04:53,040 --> 00:04:58,960
impact the software product security

136
00:04:56,479 --> 00:05:00,000
lastly we were not only passive of

137
00:04:58,960 --> 00:05:03,840
server

138
00:05:00,000 --> 00:05:04,960
but we also advocates of security inside

139
00:05:03,840 --> 00:05:08,840
the company

140
00:05:04,960 --> 00:05:10,799
and help developers co-create security

141
00:05:08,840 --> 00:05:13,359
solutions

142
00:05:10,800 --> 00:05:14,720
in the rest of this presentation armin

143
00:05:13,360 --> 00:05:16,960
and i will share some of

144
00:05:14,720 --> 00:05:18,240
our experiences while researching in the

145
00:05:16,960 --> 00:05:20,960
company

146
00:05:18,240 --> 00:05:23,520
for this study we worked as a team and

147
00:05:20,960 --> 00:05:26,479
in addition to performing the same tasks

148
00:05:23,520 --> 00:05:29,120
as regular developers we focused on

149
00:05:26,479 --> 00:05:31,840
different areas of security

150
00:05:29,120 --> 00:05:33,919
i spent one year working at the company

151
00:05:31,840 --> 00:05:35,119
and focused on investigating code

152
00:05:33,919 --> 00:05:37,599
repositories

153
00:05:35,120 --> 00:05:40,000
ticketing systems and internal and

154
00:05:37,600 --> 00:05:43,199
external documentation

155
00:05:40,000 --> 00:05:45,120
armin spent six months and focused on

156
00:05:43,199 --> 00:05:46,960
pen testing different areas of the

157
00:05:45,120 --> 00:05:49,120
software

158
00:05:46,960 --> 00:05:51,039
together we collected one and a half

159
00:05:49,120 --> 00:05:53,199
years data in total

160
00:05:51,039 --> 00:05:54,639
throughout this time we uncovered a

161
00:05:53,199 --> 00:05:56,800
number of vulnerabilities in the

162
00:05:54,639 --> 00:05:59,680
company's product

163
00:05:56,800 --> 00:06:01,600
some advices were taken but others were

164
00:05:59,680 --> 00:06:04,639
ignored

165
00:06:01,600 --> 00:06:06,400
through these differing reactions we

166
00:06:04,639 --> 00:06:08,639
were able to reflect

167
00:06:06,400 --> 00:06:11,359
and identify the deeper reasons behind

168
00:06:08,639 --> 00:06:13,360
these software security issues

169
00:06:11,360 --> 00:06:15,680
let me share some of our experiences

170
00:06:13,360 --> 00:06:15,680
with you

171
00:06:16,400 --> 00:06:20,080
the first issue that i found was a

172
00:06:19,039 --> 00:06:23,120
controversial

173
00:06:20,080 --> 00:06:23,840
feature or rather a security flaw that

174
00:06:23,120 --> 00:06:26,080
would allow

175
00:06:23,840 --> 00:06:28,318
access to protected resources without

176
00:06:26,080 --> 00:06:31,120
full authentication

177
00:06:28,319 --> 00:06:32,560
silently allow failed authentication was

178
00:06:31,120 --> 00:06:35,120
framed as a feature

179
00:06:32,560 --> 00:06:36,800
that alleviated network administrators

180
00:06:35,120 --> 00:06:39,919
and user complaints

181
00:06:36,800 --> 00:06:43,120
when policy changes were introduced

182
00:06:39,919 --> 00:06:45,599
in practice the use of silently allow

183
00:06:43,120 --> 00:06:46,880
had been extended to multiple failure

184
00:06:45,600 --> 00:06:49,360
scenarios

185
00:06:46,880 --> 00:06:50,560
in the next two slides i will describe

186
00:06:49,360 --> 00:06:53,520
two instances

187
00:06:50,560 --> 00:06:55,599
in which silently allow was being used

188
00:06:53,520 --> 00:06:58,400
and the contrasting results of our

189
00:06:55,599 --> 00:06:58,400
interventions

190
00:06:59,680 --> 00:07:03,520
in the first case users authenticating

191
00:07:03,039 --> 00:07:05,680
using

192
00:07:03,520 --> 00:07:08,240
summon which is a popular standard for

193
00:07:05,680 --> 00:07:10,479
authentication and authorization

194
00:07:08,240 --> 00:07:12,639
were being silently allowed because the

195
00:07:10,479 --> 00:07:16,000
response from identity providers

196
00:07:12,639 --> 00:07:16,960
was not being handled when talking to

197
00:07:16,000 --> 00:07:19,199
developers

198
00:07:16,960 --> 00:07:21,039
the impact of this issue was somewhat

199
00:07:19,199 --> 00:07:23,759
downplayed

200
00:07:21,039 --> 00:07:25,680
although some of them said that there

201
00:07:23,759 --> 00:07:27,599
were very few customers that were

202
00:07:25,680 --> 00:07:28,720
probably using summary authentication on

203
00:07:27,599 --> 00:07:31,120
their networks

204
00:07:28,720 --> 00:07:32,080
other study participants said that they

205
00:07:31,120 --> 00:07:35,520
knew of at least

206
00:07:32,080 --> 00:07:36,318
10 customers who were using it in any

207
00:07:35,520 --> 00:07:38,639
case

208
00:07:36,319 --> 00:07:40,080
the result of this intervention was

209
00:07:38,639 --> 00:07:42,160
overall positive

210
00:07:40,080 --> 00:07:45,840
because i offered to fix the issue and

211
00:07:42,160 --> 00:07:45,840
developers accepted

212
00:07:46,400 --> 00:07:49,520
the second part of the silently allowed

213
00:07:48,720 --> 00:07:52,720
story

214
00:07:49,520 --> 00:07:54,479
is about broken integrations but what

215
00:07:52,720 --> 00:07:58,319
happened in this case

216
00:07:54,479 --> 00:07:58,878
the issue was not fixed developers also

217
00:07:58,319 --> 00:08:01,440
in both

218
00:07:58,879 --> 00:08:04,000
silently allow to avoid sometimes

219
00:08:01,440 --> 00:08:06,000
unrecoverable errors in their software

220
00:08:04,000 --> 00:08:08,720
that could be caused by customers

221
00:08:06,000 --> 00:08:11,360
misconfiguration of their own systems

222
00:08:08,720 --> 00:08:12,160
for example this could be incorrectly

223
00:08:11,360 --> 00:08:14,560
configured

224
00:08:12,160 --> 00:08:17,280
active directory servers or invalid

225
00:08:14,560 --> 00:08:20,240
backend database credentials

226
00:08:17,280 --> 00:08:20,799
the one participant stated if the system

227
00:08:20,240 --> 00:08:22,319
broke

228
00:08:20,800 --> 00:08:24,560
because the software could not

229
00:08:22,319 --> 00:08:26,800
communicate with other servers

230
00:08:24,560 --> 00:08:27,599
the company was probably going to lose

231
00:08:26,800 --> 00:08:30,080
money

232
00:08:27,599 --> 00:08:32,559
so developers needed to add code to

233
00:08:30,080 --> 00:08:35,199
prevent that

234
00:08:32,559 --> 00:08:36,559
in other words the developers were in a

235
00:08:35,200 --> 00:08:38,560
dilemma

236
00:08:36,559 --> 00:08:41,838
their product might be blamed for

237
00:08:38,559 --> 00:08:41,838
customers mistakes

238
00:08:42,640 --> 00:08:47,760
thank you arnon in past i work as a

239
00:08:45,839 --> 00:08:49,680
pentester for multiple companies and i

240
00:08:47,760 --> 00:08:51,519
thought bringing this experience with me

241
00:08:49,680 --> 00:08:53,120
to this company and research would help

242
00:08:51,519 --> 00:08:55,920
to shine a spotlight

243
00:08:53,120 --> 00:08:56,959
on the uncovered issues as we know if we

244
00:08:55,920 --> 00:08:58,959
dig enough

245
00:08:56,959 --> 00:09:00,959
there's always a new volatility to find

246
00:08:58,959 --> 00:09:02,399
i use penetration testing process first

247
00:09:00,959 --> 00:09:04,160
to help the company

248
00:09:02,399 --> 00:09:06,839
and on top of that to study their

249
00:09:04,160 --> 00:09:08,560
reactions when facing new

250
00:09:06,839 --> 00:09:10,080
vulnerabilities

251
00:09:08,560 --> 00:09:13,040
exercise was the first polynomial

252
00:09:10,080 --> 00:09:14,880
myanmar discovered in this application

253
00:09:13,040 --> 00:09:16,719
both reflected and installed version of

254
00:09:14,880 --> 00:09:18,240
exercises for founder

255
00:09:16,720 --> 00:09:20,320
an adversary can utilize this

256
00:09:18,240 --> 00:09:21,519
vulnerability to hijack the end user

257
00:09:20,320 --> 00:09:23,279
credentials

258
00:09:21,519 --> 00:09:24,880
one of the developers reacted to this

259
00:09:23,279 --> 00:09:26,959
vulnerability and said

260
00:09:24,880 --> 00:09:28,320
we are using angular and i thought we

261
00:09:26,959 --> 00:09:31,199
shouldn't have the exercise

262
00:09:28,320 --> 00:09:32,560
angular should take care of these issues

263
00:09:31,200 --> 00:09:34,399
at this moment i realized the

264
00:09:32,560 --> 00:09:36,479
misunderstanding happened there

265
00:09:34,399 --> 00:09:37,920
to have an invulnerable application from

266
00:09:36,480 --> 00:09:39,760
exercises in angular

267
00:09:37,920 --> 00:09:42,479
developers need to take some certain

268
00:09:39,760 --> 00:09:44,480
steps the best way to interact with this

269
00:09:42,480 --> 00:09:44,880
problem was to propose a solution to

270
00:09:44,480 --> 00:09:49,040
them

271
00:09:44,880 --> 00:09:50,000
so i propose a fix and developers openly

272
00:09:49,040 --> 00:09:52,560
accepted and asked

273
00:09:50,000 --> 00:09:54,240
me to develop it because the fix i

274
00:09:52,560 --> 00:09:55,680
proposed fitted into the way the

275
00:09:54,240 --> 00:09:57,440
software was built

276
00:09:55,680 --> 00:09:58,959
it was willingly accepted by the

277
00:09:57,440 --> 00:10:02,480
developers

278
00:09:58,959 --> 00:10:02,479
and the vulnerability got fixed

279
00:10:02,800 --> 00:10:06,560
shell code injection was the next

280
00:10:04,160 --> 00:10:09,279
vulnerability i found in the application

281
00:10:06,560 --> 00:10:11,439
this volatility would allow users with

282
00:10:09,279 --> 00:10:13,519
privilege to jailbreak out the sandbox

283
00:10:11,440 --> 00:10:15,440
server shipped to the customer

284
00:10:13,519 --> 00:10:17,120
and access some hardcoded credentials

285
00:10:15,440 --> 00:10:19,040
store in the box which they couldn't

286
00:10:17,120 --> 00:10:20,720
have access before and jeopardize other

287
00:10:19,040 --> 00:10:21,920
customers data

288
00:10:20,720 --> 00:10:24,000
the first time i brought up the

289
00:10:21,920 --> 00:10:25,599
vulnerability to the developers team

290
00:10:24,000 --> 00:10:27,440
without the knowledge of hard-coded

291
00:10:25,600 --> 00:10:30,000
credentials one of

292
00:10:27,440 --> 00:10:32,800
the team responds with because we

293
00:10:30,000 --> 00:10:34,959
already shipped the os to the client

294
00:10:32,800 --> 00:10:36,079
with everything inside that it's kind of

295
00:10:34,959 --> 00:10:38,399
okay

296
00:10:36,079 --> 00:10:41,040
they have the box already we do not have

297
00:10:38,399 --> 00:10:43,440
any important information on it

298
00:10:41,040 --> 00:10:46,000
i asked do you have any hard-coded

299
00:10:43,440 --> 00:10:48,079
password or credentials there

300
00:10:46,000 --> 00:10:49,200
and after some thinking they realized

301
00:10:48,079 --> 00:10:51,920
that they

302
00:10:49,200 --> 00:10:52,560
had some important sort credential there

303
00:10:51,920 --> 00:10:54,880
however

304
00:10:52,560 --> 00:10:56,479
they said fixing the vulnerability has

305
00:10:54,880 --> 00:10:58,560
additional impact

306
00:10:56,480 --> 00:11:01,839
and may cause some problem for other

307
00:10:58,560 --> 00:11:04,560
part of the application or customers

308
00:11:01,839 --> 00:11:05,440
this vulnerability wasn't prioritized by

309
00:11:04,560 --> 00:11:09,680
the team

310
00:11:05,440 --> 00:11:09,680
and didn't get fixed at the end

311
00:11:09,920 --> 00:11:13,360
in other words the company appeared to

312
00:11:12,160 --> 00:11:15,760
be making a trade

313
00:11:13,360 --> 00:11:16,720
cost calculation here if they fix the

314
00:11:15,760 --> 00:11:18,240
vulnerability

315
00:11:16,720 --> 00:11:19,839
there is a chance other part of the

316
00:11:18,240 --> 00:11:22,240
software will work

317
00:11:19,839 --> 00:11:23,839
if they don't fix it they will be liable

318
00:11:22,240 --> 00:11:24,560
for having this vulnerability in their

319
00:11:23,839 --> 00:11:27,839
software

320
00:11:24,560 --> 00:11:29,359
and can blame for it however because

321
00:11:27,839 --> 00:11:30,720
exposing this vulnerability would

322
00:11:29,360 --> 00:11:33,040
require road player

323
00:11:30,720 --> 00:11:35,120
in the customer environment it seems to

324
00:11:33,040 --> 00:11:39,920
us that this responsibility might

325
00:11:35,120 --> 00:11:39,920
be somewhat mitigated in their eyes

326
00:11:41,279 --> 00:11:45,839
for both the stories silently ello and

327
00:11:43,519 --> 00:11:48,240
pentesting the lesson we learned was the

328
00:11:45,839 --> 00:11:49,360
business consideration cannot be ignored

329
00:11:48,240 --> 00:11:53,360
in implementing

330
00:11:49,360 --> 00:11:56,320
security features in both cases studies

331
00:11:53,360 --> 00:11:57,040
we heard from the developers that if we

332
00:11:56,320 --> 00:11:59,200
want to fix

333
00:11:57,040 --> 00:12:01,199
every bug in our system we will be out

334
00:11:59,200 --> 00:12:03,120
of the business very soon

335
00:12:01,200 --> 00:12:04,480
as a security researcher we wouldn't

336
00:12:03,120 --> 00:12:07,120
agree with this statement

337
00:12:04,480 --> 00:12:08,000
however as a field worker we saw

338
00:12:07,120 --> 00:12:10,560
sometimes that

339
00:12:08,000 --> 00:12:13,440
if you do the writing in security you

340
00:12:10,560 --> 00:12:15,518
may get blamed due to other people

341
00:12:13,440 --> 00:12:17,600
other people's mistakes like the second

342
00:12:15,519 --> 00:12:19,600
story in silent theater or

343
00:12:17,600 --> 00:12:20,639
you may be blamed for breaking some part

344
00:12:19,600 --> 00:12:23,040
of the application

345
00:12:20,639 --> 00:12:24,560
for example shell called injection we

346
00:12:23,040 --> 00:12:25,279
want to emphasize that the research

347
00:12:24,560 --> 00:12:27,279
community

348
00:12:25,279 --> 00:12:29,519
may want to look into it and find a way

349
00:12:27,279 --> 00:12:30,959
to help developers to reduce the cost

350
00:12:29,519 --> 00:12:34,800
associated

351
00:12:30,959 --> 00:12:34,800
with the implementation of the security

352
00:12:35,200 --> 00:12:39,600
in our study we found that there are at

353
00:12:37,279 --> 00:12:41,920
least two factors that can

354
00:12:39,600 --> 00:12:43,279
impact how much security advice can be

355
00:12:41,920 --> 00:12:45,439
taken

356
00:12:43,279 --> 00:12:47,920
first security considerations need to

357
00:12:45,440 --> 00:12:49,839
come early in the development life cycle

358
00:12:47,920 --> 00:12:51,599
for example in silently allowing code

359
00:12:49,839 --> 00:12:54,000
injection we didn't have a chance to

360
00:12:51,600 --> 00:12:56,079
peter when the features were developed

361
00:12:54,000 --> 00:12:57,120
as a result we couldn't successfully

362
00:12:56,079 --> 00:13:00,239
intervene in these

363
00:12:57,120 --> 00:13:02,320
two cases in our opinion we could have

364
00:13:00,240 --> 00:13:04,240
fixed these bugs if we were there

365
00:13:02,320 --> 00:13:06,399
at that time exactly like the other

366
00:13:04,240 --> 00:13:08,720
vulnerability we presented in our paper

367
00:13:06,399 --> 00:13:11,279
which developers successfully fixed html

368
00:13:08,720 --> 00:13:14,240
injection after i introduced it to them

369
00:13:11,279 --> 00:13:16,240
without asking me to fix it also we

370
00:13:14,240 --> 00:13:18,000
highlighted that security expert

371
00:13:16,240 --> 00:13:20,079
can be more effective when working

372
00:13:18,000 --> 00:13:21,200
inside the development team as i

373
00:13:20,079 --> 00:13:24,000
mentioned before

374
00:13:21,200 --> 00:13:25,440
before as a pen tester i work in

375
00:13:24,000 --> 00:13:27,040
multiple companies

376
00:13:25,440 --> 00:13:28,959
and in my experience the security

377
00:13:27,040 --> 00:13:30,000
experts were not incorporated into the

378
00:13:28,959 --> 00:13:33,040
development team

379
00:13:30,000 --> 00:13:34,959
however in this study when we play the

380
00:13:33,040 --> 00:13:35,680
security role inside the development

381
00:13:34,959 --> 00:13:38,239
team

382
00:13:35,680 --> 00:13:39,519
we realize that we can be more helpful

383
00:13:38,240 --> 00:13:42,480
when we intervene

384
00:13:39,519 --> 00:13:44,720
as a member as a team member there two

385
00:13:42,480 --> 00:13:46,959
successful intervention cases we had in

386
00:13:44,720 --> 00:13:50,240
silent yellow and exercise injection

387
00:13:46,959 --> 00:13:50,239
confirmed this finding

388
00:13:50,800 --> 00:13:54,800
in the end i would like to share a few

389
00:13:52,560 --> 00:13:56,319
takeaway messages with you

390
00:13:54,800 --> 00:13:58,000
developers work under comforting

391
00:13:56,320 --> 00:14:00,720
business demands and it's

392
00:13:58,000 --> 00:14:02,240
vital for security expert to understand

393
00:14:00,720 --> 00:14:04,399
this demand

394
00:14:02,240 --> 00:14:07,519
a co-creation model can be used to merge

395
00:14:04,399 --> 00:14:09,440
security in software development process

396
00:14:07,519 --> 00:14:11,839
and our research further showed that

397
00:14:09,440 --> 00:14:14,000
this co-creation model is more effective

398
00:14:11,839 --> 00:14:15,600
when it happens in the moment

399
00:14:14,000 --> 00:14:18,959
and when security experts understand

400
00:14:15,600 --> 00:14:18,959
those competing demands

401
00:14:19,279 --> 00:14:23,199
i would love thank you all for listening

402
00:14:21,440 --> 00:14:23,440
if you have any questions please reach

403
00:14:23,199 --> 00:14:31,839
out

404
00:14:23,440 --> 00:14:31,839
us to our emails thank you

405
00:14:35,440 --> 00:14:37,519
you

