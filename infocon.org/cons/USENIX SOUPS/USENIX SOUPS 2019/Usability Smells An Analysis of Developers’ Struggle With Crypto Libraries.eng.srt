1
00:00:10,880 --> 00:00:15,139
hi everyone my name is Nicola Pattanayak

2
00:00:13,130 --> 00:00:18,650
I am a PhD student from the University

3
00:00:15,139 --> 00:00:20,990
of Bristol the area of my the area of my

4
00:00:18,650 --> 00:00:23,150
research focuses on the development of

5
00:00:20,990 --> 00:00:25,598
novel programming abstractions to

6
00:00:23,150 --> 00:00:28,310
improve the usability of security api's

7
00:00:25,599 --> 00:00:30,860
however first I need to understand what

8
00:00:28,310 --> 00:00:32,629
the problem is and as a first step

9
00:00:30,860 --> 00:00:33,350
towards finding out I ran the study

10
00:00:32,630 --> 00:00:35,450
titled

11
00:00:33,350 --> 00:00:37,340
usability smells and analysis of

12
00:00:35,450 --> 00:00:39,350
developers struggle with crypto

13
00:00:37,340 --> 00:00:42,500
libraries along with Joseph Hart and a

14
00:00:39,350 --> 00:00:45,260
waste Rashid so I'm going to quickly go

15
00:00:42,500 --> 00:00:47,900
through some definitions as these terms

16
00:00:45,260 --> 00:00:49,790
are very frequently used in my study so

17
00:00:47,900 --> 00:00:52,310
firstly what is a cryptographic library

18
00:00:49,790 --> 00:00:54,860
a cryptographic library is quite simply

19
00:00:52,310 --> 00:00:57,230
a toolkit of operations that a developer

20
00:00:54,860 --> 00:01:00,310
a developer can use to implement

21
00:00:57,230 --> 00:01:04,220
cryptographic algorithms and features to

22
00:01:00,310 --> 00:01:06,979
better secure their application now what

23
00:01:04,220 --> 00:01:10,880
is a smell a smell is a structure in the

24
00:01:06,979 --> 00:01:13,880
code that indicates a violation of a

25
00:01:10,880 --> 00:01:16,520
design principle and overall it

26
00:01:13,880 --> 00:01:22,009
negatively impacts the quality of the

27
00:01:16,520 --> 00:01:23,509
design so we're going to talk about the

28
00:01:22,010 --> 00:01:27,040
differences between code smells and

29
00:01:23,510 --> 00:01:29,360
usability smells now so code smells are

30
00:01:27,040 --> 00:01:31,909
indicators that a piece of software code

31
00:01:29,360 --> 00:01:35,270
may be of a lower quality than desired

32
00:01:31,909 --> 00:01:37,490
so code SMO signifies that while a piece

33
00:01:35,270 --> 00:01:39,530
of code may not be broken it is in

34
00:01:37,490 --> 00:01:41,179
violation of a design principle and

35
00:01:39,530 --> 00:01:44,720
therefore may be fragile and prone to

36
00:01:41,180 --> 00:01:46,640
failure following the idea of code smell

37
00:01:44,720 --> 00:01:49,729
we have a usability smell so the idea

38
00:01:46,640 --> 00:01:52,280
here is that a usability smell is an

39
00:01:49,729 --> 00:01:54,350
indicator that an interface may be

40
00:01:52,280 --> 00:01:57,409
difficult to use for its intended users

41
00:01:54,350 --> 00:01:58,939
so developers struggle with programming

42
00:01:57,409 --> 00:02:04,070
interfaces in the same way that users

43
00:01:58,939 --> 00:02:06,949
may struggle with user interfaces ok so

44
00:02:04,070 --> 00:02:09,919
an example of a code smell is Fowler's

45
00:02:06,950 --> 00:02:13,040
shotgun surgery so the idea here is

46
00:02:09,919 --> 00:02:13,899
basically save a developer wants to make

47
00:02:13,040 --> 00:02:16,849
a change

48
00:02:13,900 --> 00:02:19,010
they've made the intended change to a

49
00:02:16,849 --> 00:02:20,899
certain class right but they may also

50
00:02:19,010 --> 00:02:23,629
need to make other smaller changes to

51
00:02:20,900 --> 00:02:24,560
the surrounding classes as well now the

52
00:02:23,629 --> 00:02:27,260
issue

53
00:02:24,560 --> 00:02:29,720
when they need to keep track of all

54
00:02:27,260 --> 00:02:32,420
these changes and in doing so they may

55
00:02:29,720 --> 00:02:36,080
miss out an important change so what the

56
00:02:32,420 --> 00:02:38,989
codes most signifies is that if the code

57
00:02:36,080 --> 00:02:40,610
smells of shotgun surgery the code may

58
00:02:38,990 --> 00:02:43,730
pass all the tests you run it through

59
00:02:40,610 --> 00:02:46,130
however the smell suggests that there's

60
00:02:43,730 --> 00:02:49,369
a deeper issue within the code structure

61
00:02:46,130 --> 00:02:51,680
which you need to have a look at okay so

62
00:02:49,370 --> 00:02:54,739
let's talk about what the the problem is

63
00:02:51,680 --> 00:02:56,360
so cryptographic api's are hard to use

64
00:02:54,739 --> 00:02:58,340
many studies have highlighted

65
00:02:56,360 --> 00:03:03,470
recommendations guidelines and

66
00:02:58,340 --> 00:03:08,690
principles to suggest how to improve the

67
00:03:03,470 --> 00:03:12,769
usability of crypto API s but we need to

68
00:03:08,690 --> 00:03:17,150
ask question if these usability

69
00:03:12,769 --> 00:03:20,450
recommendations we need to ask whether

70
00:03:17,150 --> 00:03:23,510
if the usability recommendations are not

71
00:03:20,450 --> 00:03:26,119
being implemented so how can you tell

72
00:03:23,510 --> 00:03:29,149
when such usability recommendations are

73
00:03:26,120 --> 00:03:31,570
not being implemented okay so the idea

74
00:03:29,150 --> 00:03:36,829
here is basically to make developers

75
00:03:31,570 --> 00:03:39,620
understand the importance of usability

76
00:03:36,829 --> 00:03:41,180
smarts and understand the mistakes they

77
00:03:39,620 --> 00:03:43,400
make while designing with the library

78
00:03:41,180 --> 00:03:45,350
what principles they may have overlooked

79
00:03:43,400 --> 00:03:48,380
and what principles they need to address

80
00:03:45,350 --> 00:03:50,000
in order to successfully address the

81
00:03:48,380 --> 00:03:53,269
usability smells that come along with it

82
00:03:50,000 --> 00:03:56,510
so developers may know the principles

83
00:03:53,269 --> 00:03:58,250
however they may not be aware of the

84
00:03:56,510 --> 00:04:00,828
usability smell that come along with it

85
00:03:58,250 --> 00:04:02,750
so in this paper we focus on 10

86
00:04:00,829 --> 00:04:05,750
usability principles defined by

87
00:04:02,750 --> 00:04:08,600
Greenland Smith and in this paper we

88
00:04:05,750 --> 00:04:11,090
focus on two key questions the first

89
00:04:08,600 --> 00:04:13,070
being what are the issues developers

90
00:04:11,090 --> 00:04:16,608
face when they use in crypto libraries

91
00:04:13,070 --> 00:04:18,560
and what are the tell-tale signs that

92
00:04:16,608 --> 00:04:19,839
one of the 10 usability principles is

93
00:04:18,560 --> 00:04:23,169
being violated

94
00:04:19,839 --> 00:04:25,729
ok so Green Smith wrote this great paper

95
00:04:23,169 --> 00:04:29,450
so basically they got a list of

96
00:04:25,729 --> 00:04:32,690
usability guidelines based off API for

97
00:04:29,450 --> 00:04:37,010
API usability and reworked it to address

98
00:04:32,690 --> 00:04:38,980
crypto API but are the green and Smith

99
00:04:37,010 --> 00:04:41,890
principles right

100
00:04:38,980 --> 00:04:45,200
okay so here are the ten green smith

101
00:04:41,890 --> 00:04:47,870
principles one important point to note

102
00:04:45,200 --> 00:04:49,969
here is that the principles themselves

103
00:04:47,870 --> 00:04:52,100
are written in a positive manner

104
00:04:49,970 --> 00:04:54,050
now what I mean by this is if we take

105
00:04:52,100 --> 00:04:56,330
abstract for example this is considered

106
00:04:54,050 --> 00:05:00,130
their golden rule so the idea here is

107
00:04:56,330 --> 00:05:02,240
that you integrate the cryptographic

108
00:05:00,130 --> 00:05:04,400
functionality with like a standard API

109
00:05:02,240 --> 00:05:07,760
so that the developer doesn't need to

110
00:05:04,400 --> 00:05:10,099
interact with the crypto cryptographic

111
00:05:07,760 --> 00:05:11,810
API in the first place now you can tell

112
00:05:10,100 --> 00:05:13,790
by the framing of that statement that

113
00:05:11,810 --> 00:05:18,230
it's it's it's written in a positive

114
00:05:13,790 --> 00:05:19,580
manner right so how can we spot when

115
00:05:18,230 --> 00:05:21,770
green and Smith principles are not being

116
00:05:19,580 --> 00:05:25,130
followed and what are the issues

117
00:05:21,770 --> 00:05:26,750
developers face and all the issues

118
00:05:25,130 --> 00:05:29,270
developers face fixable with the

119
00:05:26,750 --> 00:05:31,040
principles they suggest and how can we

120
00:05:29,270 --> 00:05:37,099
tell when developers are struggling with

121
00:05:31,040 --> 00:05:40,040
a cryptographic library ok so we started

122
00:05:37,100 --> 00:05:42,230
off with 2491 questions and we ran a

123
00:05:40,040 --> 00:05:44,170
thematic analysis on them to define the

124
00:05:42,230 --> 00:05:47,120
recurring issues developers face and

125
00:05:44,170 --> 00:05:49,880
from this we arrived at 16 usability

126
00:05:47,120 --> 00:05:53,240
issues so these issues basically

127
00:05:49,880 --> 00:05:54,770
captured the the the core issue

128
00:05:53,240 --> 00:05:57,170
developers face when they're asking

129
00:05:54,770 --> 00:06:00,140
these these questions we categorize

130
00:05:57,170 --> 00:06:03,230
these 16 usability usability issues into

131
00:06:00,140 --> 00:06:05,090
seven themes so in the paper I go into

132
00:06:03,230 --> 00:06:07,700
more detail as in the examples and how

133
00:06:05,090 --> 00:06:10,700
these these issues manifest in questions

134
00:06:07,700 --> 00:06:13,760
now the relationship between the

135
00:06:10,700 --> 00:06:15,979
usability issues and the ten green and

136
00:06:13,760 --> 00:06:18,710
Smith principles allow us to identify

137
00:06:15,980 --> 00:06:21,770
the for usability smells so the smell

138
00:06:18,710 --> 00:06:25,130
themselves are indicative of the

139
00:06:21,770 --> 00:06:30,200
principles that are not being observed

140
00:06:25,130 --> 00:06:34,370
basically okay so in order to identify

141
00:06:30,200 --> 00:06:37,580
the developer struggle we analyzed 2491

142
00:06:34,370 --> 00:06:39,020
Stack Overflow questions and we examined

143
00:06:37,580 --> 00:06:40,130
them from a range of seven different

144
00:06:39,020 --> 00:06:42,190
crypto libraries

145
00:06:40,130 --> 00:06:47,180
now these crypto libraries themselves

146
00:06:42,190 --> 00:06:51,350
cover a vast number of languages and use

147
00:06:47,180 --> 00:06:52,520
cases so open SSL lip sodium and NEC own

148
00:06:51,350 --> 00:06:55,490
they come from

149
00:06:52,520 --> 00:06:58,250
bouncy castle comes from Java s JCL

150
00:06:55,490 --> 00:07:03,770
crypto GS come from JavaScript and PI

151
00:06:58,250 --> 00:07:05,600
crypto comes some Python within that you

152
00:07:03,770 --> 00:07:08,200
can see from the chart that most of the

153
00:07:05,600 --> 00:07:11,180
questions yet they come under open ssl

154
00:07:08,200 --> 00:07:13,670
but there are other differences so for

155
00:07:11,180 --> 00:07:16,550
example open ssl is considered a low

156
00:07:13,670 --> 00:07:19,370
level crypto API what this means is it's

157
00:07:16,550 --> 00:07:21,170
very detailed and usually the developers

158
00:07:19,370 --> 00:07:23,540
use it have a high level of expertise

159
00:07:21,170 --> 00:07:24,950
when it comes to cryptography on the

160
00:07:23,540 --> 00:07:26,990
other hand you have live sodium which

161
00:07:24,950 --> 00:07:29,270
claims to be usable now when you look at

162
00:07:26,990 --> 00:07:34,070
the the way lib sodium is structured

163
00:07:29,270 --> 00:07:37,070
it's a highly abstracted crypto API so

164
00:07:34,070 --> 00:07:39,080
we go into more detail here okay so

165
00:07:37,070 --> 00:07:41,780
let's look at a few of the questions and

166
00:07:39,080 --> 00:07:47,080
see how the issue is manifest within the

167
00:07:41,780 --> 00:07:52,039
questions themselves okay yeah okay so

168
00:07:47,080 --> 00:07:53,930
the the developer states that they wish

169
00:07:52,040 --> 00:07:55,850
to use a same function which is

170
00:07:53,930 --> 00:07:58,160
supported by the library however the

171
00:07:55,850 --> 00:07:59,900
developer says that they cannot find the

172
00:07:58,160 --> 00:08:03,830
relevant information associated with

173
00:07:59,900 --> 00:08:04,909
function and therefore you know that

174
00:08:03,830 --> 00:08:08,450
they don't know what to do next

175
00:08:04,910 --> 00:08:10,870
so that's pretty much the question so so

176
00:08:08,450 --> 00:08:14,360
this type of issue

177
00:08:10,870 --> 00:08:16,490
moves on to missing documentation so so

178
00:08:14,360 --> 00:08:20,090
so this is how it it's it's classified

179
00:08:16,490 --> 00:08:22,010
right in this example the developer has

180
00:08:20,090 --> 00:08:25,520
used the library but but they failed

181
00:08:22,010 --> 00:08:29,120
right this is quite common they would

182
00:08:25,520 --> 00:08:31,520
they would post the code on Stack

183
00:08:29,120 --> 00:08:33,979
Overflow and quite simply ask what's

184
00:08:31,520 --> 00:08:37,549
gone wrong here so as a result the

185
00:08:33,979 --> 00:08:39,680
answers usually give the same code back

186
00:08:37,549 --> 00:08:41,240
but with the amendment made in the

187
00:08:39,679 --> 00:08:45,290
correction so this would come under

188
00:08:41,240 --> 00:08:46,850
what's gone wrong here ok so these types

189
00:08:45,290 --> 00:08:49,280
of questions they raise the question of

190
00:08:46,850 --> 00:08:52,460
appropriateness right so the developer

191
00:08:49,280 --> 00:08:55,160
usually has like a task or a project in

192
00:08:52,460 --> 00:08:56,930
mind right and they want to know which

193
00:08:55,160 --> 00:08:59,180
library if there's more than one library

194
00:08:56,930 --> 00:09:00,890
would be most appropriate to use for the

195
00:08:59,180 --> 00:09:03,079
project they have in mind or say if

196
00:09:00,890 --> 00:09:04,460
they've already selected library within

197
00:09:03,080 --> 00:09:04,680
that library say if there's more than

198
00:09:04,460 --> 00:09:06,290
one

199
00:09:04,680 --> 00:09:08,910
function that achieved the same output

200
00:09:06,290 --> 00:09:11,219
which function is most appropriate for

201
00:09:08,910 --> 00:09:13,050
the project they have in mind so this

202
00:09:11,220 --> 00:09:17,970
type of question comes under should I

203
00:09:13,050 --> 00:09:20,069
use this okay so okay these types of

204
00:09:17,970 --> 00:09:23,010
questions here there were many instances

205
00:09:20,070 --> 00:09:26,010
where the developers struggled with

206
00:09:23,010 --> 00:09:27,450
using functions from library quite

207
00:09:26,010 --> 00:09:29,279
simply due to the fact that they have a

208
00:09:27,450 --> 00:09:33,029
lack of knowledge of fundamental

209
00:09:29,279 --> 00:09:35,149
cryptography so here the the developer

210
00:09:33,029 --> 00:09:37,589
sets out just to create their own

211
00:09:35,149 --> 00:09:39,089
certificate however they don't

212
00:09:37,589 --> 00:09:40,830
understand the difference between a

213
00:09:39,089 --> 00:09:42,480
trusted certificate that's created by a

214
00:09:40,830 --> 00:09:45,630
certificate authority that's been

215
00:09:42,480 --> 00:09:47,880
verified versus an untrusted certificate

216
00:09:45,630 --> 00:09:52,370
which they've created themselves so this

217
00:09:47,880 --> 00:09:56,160
comes under lack of knowledge okay so

218
00:09:52,370 --> 00:09:58,920
all right these these questions also

219
00:09:56,160 --> 00:10:01,500
comment the example I think I can

220
00:09:58,920 --> 00:10:03,599
explain here is say for developers use

221
00:10:01,500 --> 00:10:05,070
openness or several years right they've

222
00:10:03,600 --> 00:10:08,040
done countless projects on it and they

223
00:10:05,070 --> 00:10:09,750
understand how open SSL works their

224
00:10:08,040 --> 00:10:14,219
mental model has now been structured to

225
00:10:09,750 --> 00:10:16,770
how open SSL has basically been

226
00:10:14,220 --> 00:10:18,089
structured right but let's say if

227
00:10:16,770 --> 00:10:20,189
they're going to start this new project

228
00:10:18,089 --> 00:10:22,950
where they're gonna have to use MTU

229
00:10:20,190 --> 00:10:26,670
crypto which is Python library right so

230
00:10:22,950 --> 00:10:28,950
basically they're they have this mental

231
00:10:26,670 --> 00:10:31,319
model of how open SSL works right and

232
00:10:28,950 --> 00:10:33,000
they're trying to recreate the same

233
00:10:31,320 --> 00:10:35,010
functionality in a different library

234
00:10:33,000 --> 00:10:38,100
empty crypto right which may have a

235
00:10:35,010 --> 00:10:41,640
different different structure different

236
00:10:38,100 --> 00:10:45,390
model right so the questions they raise

237
00:10:41,640 --> 00:10:48,600
is basically asking how they can use the

238
00:10:45,390 --> 00:10:51,270
mental model they have of open SSL the

239
00:10:48,600 --> 00:10:53,339
one they've borrowed and use it to use a

240
00:10:51,270 --> 00:10:55,880
new library so these types of issues

241
00:10:53,339 --> 00:10:59,070
come in the borrowed mental models right

242
00:10:55,880 --> 00:11:02,730
okay these types of questions so there

243
00:10:59,070 --> 00:11:04,230
are many okay so the developer is

244
00:11:02,730 --> 00:11:06,450
basically struggling to integrate the

245
00:11:04,230 --> 00:11:08,040
library with other platforms and

246
00:11:06,450 --> 00:11:10,920
possibly other libraries themselves

247
00:11:08,040 --> 00:11:12,689
right so in this example they're trying

248
00:11:10,920 --> 00:11:15,540
to encrypt using open SSL but decrypt

249
00:11:12,690 --> 00:11:18,360
using another tool so these types of

250
00:11:15,540 --> 00:11:22,209
questions come under compatibility issue

251
00:11:18,360 --> 00:11:26,350
okay there were many questions so like

252
00:11:22,210 --> 00:11:29,490
that look look like this develop a

253
00:11:26,350 --> 00:11:32,560
stroke on the very first step of using a

254
00:11:29,490 --> 00:11:34,630
crypto library and that step is quite

255
00:11:32,560 --> 00:11:37,359
simply building the crypto library and

256
00:11:34,630 --> 00:11:39,640
running the tests now these types of

257
00:11:37,360 --> 00:11:43,900
issues come in a build issue just to

258
00:11:39,640 --> 00:11:46,030
just give an example 18% of the OpenSSL

259
00:11:43,900 --> 00:11:51,970
of the questions that came under open

260
00:11:46,030 --> 00:11:54,310
ssl were attributed to build issues okay

261
00:11:51,970 --> 00:11:56,740
so here's like the overall mapping of

262
00:11:54,310 --> 00:11:58,630
basically how what the usability issues

263
00:11:56,740 --> 00:12:02,490
to developers face

264
00:11:58,630 --> 00:12:07,180
I covered like one from each category

265
00:12:02,490 --> 00:12:09,730
okay so everything highlighted in red

266
00:12:07,180 --> 00:12:12,520
are there 16 years ability issues the

267
00:12:09,730 --> 00:12:14,350
ones highlighted in blue are the themes

268
00:12:12,520 --> 00:12:17,470
the usability issues have been

269
00:12:14,350 --> 00:12:20,350
categorized into so just just to give

270
00:12:17,470 --> 00:12:22,240
overview usage issues so this is quite

271
00:12:20,350 --> 00:12:24,220
simply the developer asking questions

272
00:12:22,240 --> 00:12:26,110
about usage so they may ask questions

273
00:12:24,220 --> 00:12:28,320
without appropriateness or quite simply

274
00:12:26,110 --> 00:12:30,610
how to use this system issues this is

275
00:12:28,320 --> 00:12:33,610
this comes from Bill diffusers and

276
00:12:30,610 --> 00:12:36,460
performance issues not knowing what to

277
00:12:33,610 --> 00:12:38,470
do and this comes from maybe the develop

278
00:12:36,460 --> 00:12:41,680
having a lack of knowledge which may

279
00:12:38,470 --> 00:12:43,870
lead on to passing the buck nothing if

280
00:12:41,680 --> 00:12:47,199
it can do so this raises the question of

281
00:12:43,870 --> 00:12:48,910
the ability of the crypto library so you

282
00:12:47,200 --> 00:12:50,200
may have like an unsupported feature or

283
00:12:48,910 --> 00:12:53,110
the developer may have to use poor

284
00:12:50,200 --> 00:12:55,240
mental model missing information comes

285
00:12:53,110 --> 00:12:57,490
from missing documentation may be a lack

286
00:12:55,240 --> 00:13:00,160
of example codes or quite simply a

287
00:12:57,490 --> 00:13:02,350
clarity of documentation programming is

288
00:13:00,160 --> 00:13:04,079
hard comes from abstraction issues

289
00:13:02,350 --> 00:13:07,210
what's gone wrong here an API misuse

290
00:13:04,080 --> 00:13:08,920
issues across time and space covers

291
00:13:07,210 --> 00:13:13,690
compatibility issues and deprecated

292
00:13:08,920 --> 00:13:16,300
features okay so this table here shows

293
00:13:13,690 --> 00:13:18,670
the relationship between the usability

294
00:13:16,300 --> 00:13:20,620
issues and the ten green and Smith

295
00:13:18,670 --> 00:13:24,459
principles now if you remember earlier

296
00:13:20,620 --> 00:13:26,110
we made the point that the ten green

297
00:13:24,460 --> 00:13:29,440
Smith principles are written in a

298
00:13:26,110 --> 00:13:31,059
positive manner right so in contrast the

299
00:13:29,440 --> 00:13:33,879
usability issues are written in

300
00:13:31,059 --> 00:13:35,829
negative manner so the way you can

301
00:13:33,879 --> 00:13:38,409
understand this is safer developer fails

302
00:13:35,829 --> 00:13:40,449
to fully implement a user usability

303
00:13:38,409 --> 00:13:42,729
principle we might expect to see

304
00:13:40,449 --> 00:13:44,258
questions that show the developer

305
00:13:42,729 --> 00:13:51,099
struggling with one of the usability

306
00:13:44,259 --> 00:13:53,859
issues we identified so yeah based off

307
00:13:51,099 --> 00:13:56,469
that relationship we can we came up with

308
00:13:53,859 --> 00:13:58,239
for usability smells now three of which

309
00:13:56,469 --> 00:14:00,399
the first three are covered quite nicely

310
00:13:58,239 --> 00:14:05,259
by the grayness math principles however

311
00:14:00,399 --> 00:14:08,309
the final one not so well we're going to

312
00:14:05,259 --> 00:14:11,859
go through the usability smells and

313
00:14:08,309 --> 00:14:17,289
basically look into them more more

314
00:14:11,859 --> 00:14:20,229
detail okay neither super sleuth so

315
00:14:17,289 --> 00:14:22,059
basically the user needs to be a super

316
00:14:20,229 --> 00:14:23,949
sleuth in order to find the relevant

317
00:14:22,059 --> 00:14:30,429
resources they need to correctly use a

318
00:14:23,949 --> 00:14:32,049
function from the library confusion

319
00:14:30,429 --> 00:14:33,848
range this usually takes place before

320
00:14:32,049 --> 00:14:35,709
the tasks so the developer may be

321
00:14:33,849 --> 00:14:38,079
struggling as to how to use the library

322
00:14:35,709 --> 00:14:40,659
or again raise questions of

323
00:14:38,079 --> 00:14:43,659
appropriateness now needs postmortem

324
00:14:40,659 --> 00:14:46,718
this usually takes place after the task

325
00:14:43,659 --> 00:14:47,979
has been completed so the developers use

326
00:14:46,719 --> 00:14:49,749
the crypto library but something has

327
00:14:47,979 --> 00:14:50,769
gone wrong now the developer needs to

328
00:14:49,749 --> 00:14:53,439
figure out whether there's some type of

329
00:14:50,769 --> 00:14:57,539
issue they caused or whether the issue

330
00:14:53,439 --> 00:14:57,539
is associated with the library itself

331
00:14:58,589 --> 00:15:06,669
okay doesn't play well with others so

332
00:15:03,639 --> 00:15:08,559
this is the issue this is the usability

333
00:15:06,669 --> 00:15:10,239
smell that's not very well covered by

334
00:15:08,559 --> 00:15:11,978
the greenness principles now the issues

335
00:15:10,239 --> 00:15:14,829
that play here are build a shoe

336
00:15:11,979 --> 00:15:19,139
compatibility issue and performance

337
00:15:14,829 --> 00:15:21,368
issues now we did find a bit of a

338
00:15:19,139 --> 00:15:23,739
relationship between the builders and

339
00:15:21,369 --> 00:15:25,569
the temple in sports however performance

340
00:15:23,739 --> 00:15:28,629
issues are not covered by the ten by the

341
00:15:25,569 --> 00:15:32,108
ten years of usability principles by

342
00:15:28,629 --> 00:15:34,779
Greene and Smith okay

343
00:15:32,109 --> 00:15:37,029
so this table shows the prevalence of

344
00:15:34,779 --> 00:15:38,859
the usability issues against the crypto

345
00:15:37,029 --> 00:15:41,859
API is now I know you can see this

346
00:15:38,859 --> 00:15:43,629
there's only the three crypto libraries

347
00:15:41,859 --> 00:15:44,310
here organized to sell bounce castle and

348
00:15:43,629 --> 00:15:45,930
pipe repair

349
00:15:44,310 --> 00:15:47,638
that's quite simply because they had the

350
00:15:45,930 --> 00:15:50,670
most number of questions associated with

351
00:15:47,639 --> 00:15:54,420
them I can go into more detail if need

352
00:15:50,670 --> 00:15:58,378
be okay so in conclusion green and Smith

353
00:15:54,420 --> 00:16:00,719
principles are basically correct we

354
00:15:58,379 --> 00:16:02,399
shouldn't ignore build issues and yeah

355
00:16:00,720 --> 00:16:05,580
the next time you use a crypto library

356
00:16:02,399 --> 00:16:13,950
have a sniff thank you for your time

357
00:16:05,580 --> 00:16:13,950
[Applause]

358
00:16:19,220 --> 00:16:25,529
thank you very much for that this is

359
00:16:21,540 --> 00:16:27,180
something that's very we're consumers of

360
00:16:25,529 --> 00:16:31,680
research like this this is important

361
00:16:27,180 --> 00:16:35,309
stuff I'm a little bit if I understood

362
00:16:31,680 --> 00:16:40,859
correctly under usage you had both

363
00:16:35,309 --> 00:16:46,379
appropriateness and how to use and for

364
00:16:40,860 --> 00:16:48,209
me or at least my suspicion is that this

365
00:16:46,379 --> 00:16:51,839
is where you where you actually have

366
00:16:48,209 --> 00:16:54,029
huge problems and I'd love to see these

367
00:16:51,839 --> 00:16:59,579
teased outs so for example if somebody

368
00:16:54,029 --> 00:17:02,850
asks how do I use rot13 to encode UT

369
00:16:59,579 --> 00:17:07,619
Unicode to encrypt Unicode the correct

370
00:17:02,850 --> 00:17:09,809
answer is don't and you know I mean I

371
00:17:07,619 --> 00:17:12,479
could come up with more plausible things

372
00:17:09,809 --> 00:17:18,990
but I wanted to give an example for non

373
00:17:12,480 --> 00:17:22,679
cryptographers and so because that I

374
00:17:18,990 --> 00:17:24,890
believe is actually where I suspect the

375
00:17:22,679 --> 00:17:27,240
developers make mistakes in

376
00:17:24,890 --> 00:17:28,830
appropriateness and so I'd love to see

377
00:17:27,240 --> 00:17:31,950
that teased out and wondering if you

378
00:17:28,830 --> 00:17:34,080
have any plans to look at that yeah well

379
00:17:31,950 --> 00:17:36,750
in the paper we do talk about the future

380
00:17:34,080 --> 00:17:40,678
work and how we should probably focus on

381
00:17:36,750 --> 00:17:44,100
how the usability issues come to be and

382
00:17:40,679 --> 00:17:47,520
exactly what the issues how the

383
00:17:44,100 --> 00:17:50,610
developer gets to that stage in the

384
00:17:47,520 --> 00:17:52,559
first place so I'm sure we'll be

385
00:17:50,610 --> 00:17:55,860
covering that at some point Thanks

386
00:17:52,559 --> 00:17:57,060
question hello Thanks I'm a lobbyist hey

387
00:17:55,860 --> 00:17:58,350
thanks again for this

388
00:17:57,060 --> 00:18:00,120
presentation actually got a chance to

389
00:17:58,350 --> 00:18:01,889
read your paper on the flight in I was

390
00:18:00,120 --> 00:18:03,330
wondering and maybe I missed this I was

391
00:18:01,890 --> 00:18:04,920
wondering if you had a chance to look at

392
00:18:03,330 --> 00:18:06,360
github issues and see if there was any

393
00:18:04,920 --> 00:18:08,250
correlation between the types of

394
00:18:06,360 --> 00:18:09,810
questions and some of the issues that

395
00:18:08,250 --> 00:18:11,100
developers ran into and see if there was

396
00:18:09,810 --> 00:18:14,730
any correlation between the Stack

397
00:18:11,100 --> 00:18:17,340
Overflow questions that you analyzed no

398
00:18:14,730 --> 00:18:19,860
I mean like initially we were looking at

399
00:18:17,340 --> 00:18:23,310
where we're gonna get a scrape all these

400
00:18:19,860 --> 00:18:25,590
questions from I did suggest github at

401
00:18:23,310 --> 00:18:27,270
one point but there's like tens of

402
00:18:25,590 --> 00:18:29,730
thousands of questions to look through

403
00:18:27,270 --> 00:18:31,260
we looked at Stack Overflow because the

404
00:18:29,730 --> 00:18:35,610
questions are framed in such a way that

405
00:18:31,260 --> 00:18:37,410
the developer is asking the type of

406
00:18:35,610 --> 00:18:38,610
question where you can find like the

407
00:18:37,410 --> 00:18:41,970
issues the developers are actually

408
00:18:38,610 --> 00:18:44,909
facing with github it's the questions

409
00:18:41,970 --> 00:18:47,790
that they're of a different type they're

410
00:18:44,910 --> 00:18:49,080
structured in such a way that you you

411
00:18:47,790 --> 00:18:52,230
won't really be finding the issues

412
00:18:49,080 --> 00:18:55,830
developers have using the library they

413
00:18:52,230 --> 00:18:57,450
may point out like like generally like

414
00:18:55,830 --> 00:18:59,250
system issues or something like that

415
00:18:57,450 --> 00:19:02,310
but I guess that's that's something we

416
00:18:59,250 --> 00:19:05,340
can you know have a have a look at Becky

417
00:19:02,310 --> 00:19:07,350
thanks for your question yeah hi Chris

418
00:19:05,340 --> 00:19:08,970
long next century so you alluded to this

419
00:19:07,350 --> 00:19:12,030
in your talk so maybe there's the answer

420
00:19:08,970 --> 00:19:14,130
in the paper but one of the issues is

421
00:19:12,030 --> 00:19:15,720
you know different libraries are

422
00:19:14,130 --> 00:19:17,610
different sizes and different levels of

423
00:19:15,720 --> 00:19:19,950
detail and to cap you know debris of

424
00:19:17,610 --> 00:19:22,320
complexity so you would expect that

425
00:19:19,950 --> 00:19:25,050
libraries that are more detailed and

426
00:19:22,320 --> 00:19:26,399
powerful might be might at least require

427
00:19:25,050 --> 00:19:29,220
you to read more documentation to

428
00:19:26,400 --> 00:19:32,670
understand how to use and mean so is

429
00:19:29,220 --> 00:19:34,680
there or how do you address that or do

430
00:19:32,670 --> 00:19:36,840
you see that as an issue is like trying

431
00:19:34,680 --> 00:19:38,970
to analyze the data and maybe modulate

432
00:19:36,840 --> 00:19:42,780
for that somehow well so are you trying

433
00:19:38,970 --> 00:19:45,840
to say that safe and novel sorry a new

434
00:19:42,780 --> 00:19:47,760
developer like a novice came and started

435
00:19:45,840 --> 00:19:50,429
using these slide please how would they

436
00:19:47,760 --> 00:19:51,330
go about using it is that it's not the

437
00:19:50,430 --> 00:19:54,090
question

438
00:19:51,330 --> 00:19:57,330
sort of well if somebody has if there

439
00:19:54,090 --> 00:19:59,100
are lots of questions about a library it

440
00:19:57,330 --> 00:20:00,389
could be I guess maybe it's related to

441
00:19:59,100 --> 00:20:02,399
documentation because it could be that

442
00:20:00,390 --> 00:20:03,660
the documentation is bad or it could be

443
00:20:02,400 --> 00:20:04,660
that they just didn't read the

444
00:20:03,660 --> 00:20:07,630
documentation

445
00:20:04,660 --> 00:20:09,520
so is it I mean I don't write here you

446
00:20:07,630 --> 00:20:11,110
got to avoid blaming the user except

447
00:20:09,520 --> 00:20:14,080
that sometimes they do deserve it

448
00:20:11,110 --> 00:20:16,750
so I know you're right yeah yeah you're

449
00:20:14,080 --> 00:20:18,189
right okay so passing the book it's one

450
00:20:16,750 --> 00:20:20,470
of the issues that I I didn't cover

451
00:20:18,190 --> 00:20:26,140
during this this presentation so

452
00:20:20,470 --> 00:20:30,280
basically what this means is the user

453
00:20:26,140 --> 00:20:33,780
has asked a question right now if you do

454
00:20:30,280 --> 00:20:36,490
a simple search of what the the the

455
00:20:33,780 --> 00:20:38,590
question is in the library's

456
00:20:36,490 --> 00:20:40,510
documentation it comes up as like the

457
00:20:38,590 --> 00:20:43,679
first result right it's super easy to

458
00:20:40,510 --> 00:20:45,970
find if you can do it right so what

459
00:20:43,680 --> 00:20:47,770
results from this is basically the user

460
00:20:45,970 --> 00:20:49,480
has delegated the question into the

461
00:20:47,770 --> 00:20:51,370
Stack Overflow community instead of

462
00:20:49,480 --> 00:20:54,280
going and reading the library

463
00:20:51,370 --> 00:20:57,939
documentation so that quite that stems

464
00:20:54,280 --> 00:20:59,800
down to passing the buck basically yeah

465
00:20:57,940 --> 00:21:02,080
but in terms of documentation the

466
00:20:59,800 --> 00:21:05,649
libraries the quality of documentation

467
00:21:02,080 --> 00:21:10,600
ranges from library to library I guess

468
00:21:05,650 --> 00:21:13,870
it's more for open SSL they may they do

469
00:21:10,600 --> 00:21:16,449
cover a lot of the functions but if you

470
00:21:13,870 --> 00:21:18,729
look at s JCL for example if you

471
00:21:16,450 --> 00:21:20,200
literally go into the the library

472
00:21:18,730 --> 00:21:22,480
documentation they have the function

473
00:21:20,200 --> 00:21:25,450
then the only other resource they have

474
00:21:22,480 --> 00:21:26,950
is the source code so in terms of

475
00:21:25,450 --> 00:21:31,390
documentation there's no example codes

476
00:21:26,950 --> 00:21:34,630
there's no like actual sentences so I'm

477
00:21:31,390 --> 00:21:35,920
guessing you need to be a really you

478
00:21:34,630 --> 00:21:37,570
need to have a high level of expertise

479
00:21:35,920 --> 00:21:39,940
to use something like that

480
00:21:37,570 --> 00:21:42,429
okay thanks let's make this the final

481
00:21:39,940 --> 00:21:44,620
question thanks very much for the study

482
00:21:42,430 --> 00:21:46,810
really enjoyed the presentation this is

483
00:21:44,620 --> 00:21:50,350
a an issue that we deal with an industry

484
00:21:46,810 --> 00:21:53,350
a lot actually main question was did you

485
00:21:50,350 --> 00:21:55,600
find any correlation between say results

486
00:21:53,350 --> 00:21:58,120
of static analysis tools run on these

487
00:21:55,600 --> 00:22:01,240
libraries and the detected usability

488
00:21:58,120 --> 00:22:06,129
smells yeah thanks for the question so

489
00:22:01,240 --> 00:22:08,860
static analysis is a section I will be

490
00:22:06,130 --> 00:22:11,950
looking at in my PhD at some point for

491
00:22:08,860 --> 00:22:14,469
now III just try to answer the very

492
00:22:11,950 --> 00:22:16,090
simple question of what developers are

493
00:22:14,470 --> 00:22:17,540
struggling with when they use in crypto

494
00:22:16,090 --> 00:22:24,939
API is

495
00:22:17,540 --> 00:22:24,940
Thanks okay thanks we time everyone

496
00:22:25,170 --> 00:22:28,599
[Applause]

