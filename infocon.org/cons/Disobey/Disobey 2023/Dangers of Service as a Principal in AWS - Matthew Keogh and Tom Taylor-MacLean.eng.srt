1
00:00:00,199 --> 00:00:03,000
so hi everyone uh and thank you so much

2
00:00:03,000 --> 00:00:04,380
for coming to this presentation tonight

3
00:00:04,380 --> 00:00:06,240
appreciate it it's definitely into beer

4
00:00:06,240 --> 00:00:07,740
o'clock at this point so thank you for

5
00:00:07,740 --> 00:00:08,940
being here

6
00:00:08,940 --> 00:00:10,740
um and we've got a presentation on uh

7
00:00:10,740 --> 00:00:12,599
dangers of a service as a principal in

8
00:00:12,599 --> 00:00:16,260
Amazon web services or AWS for sure

9
00:00:16,260 --> 00:00:18,420
but before we dive in uh just a quick

10
00:00:18,420 --> 00:00:21,300
introduction so hello my name is Matt uh

11
00:00:21,300 --> 00:00:23,100
I'm a security consultant at West secure

12
00:00:23,100 --> 00:00:25,500
uh mainly focused on the cloud

13
00:00:25,500 --> 00:00:28,680
I started off about eight years ago as a

14
00:00:28,680 --> 00:00:30,900
support analyst in a sort of logistics

15
00:00:30,900 --> 00:00:33,899
IT company and I was exposed to AWS

16
00:00:33,899 --> 00:00:36,719
there and I took up a role with the

17
00:00:36,719 --> 00:00:38,700
sysops team earlier basically just fell

18
00:00:38,700 --> 00:00:41,160
in love with all things AWS and I'm

19
00:00:41,160 --> 00:00:44,160
joined by my colleague tonight Tom hi uh

20
00:00:44,160 --> 00:00:46,320
and yep I'm Thomas you see I'm mostly

21
00:00:46,320 --> 00:00:49,500
network security and also AWS Cloud

22
00:00:49,500 --> 00:00:52,620
security and I used to work in aviation

23
00:00:52,620 --> 00:00:54,899
so yeah dabbled about with the cloud but

24
00:00:54,899 --> 00:00:57,539
I've been working hard with the cure for

25
00:00:57,539 --> 00:00:59,520
sort of almost a couple of years and

26
00:00:59,520 --> 00:01:02,699
this is my main Cloud experience

27
00:01:02,699 --> 00:01:04,799
thanks Tom

28
00:01:04,799 --> 00:01:07,920
so what to expect from this talk well as

29
00:01:07,920 --> 00:01:09,479
we've kind of already discussed it's

30
00:01:09,479 --> 00:01:11,340
going to be based on AWS and

31
00:01:11,340 --> 00:01:12,479
specifically something known as

32
00:01:12,479 --> 00:01:13,979
resource-based policies and we'll dive

33
00:01:13,979 --> 00:01:16,020
into specifically what they are further

34
00:01:16,020 --> 00:01:18,780
in the in the in the deck

35
00:01:18,780 --> 00:01:21,600
um and specifically how we as web secure

36
00:01:21,600 --> 00:01:23,939
started noticing a certain pattern

37
00:01:23,939 --> 00:01:26,159
within our Cloud stage which led us to

38
00:01:26,159 --> 00:01:28,200
do some research on on resource-based

39
00:01:28,200 --> 00:01:30,720
policies and how we kind of developed um

40
00:01:30,720 --> 00:01:33,540
sort of an attack pass so to speak uh

41
00:01:33,540 --> 00:01:34,799
that yeah that we've published some

42
00:01:34,799 --> 00:01:36,479
research on

43
00:01:36,479 --> 00:01:37,799
um and yeah we're going to give a full

44
00:01:37,799 --> 00:01:39,780
demo of well of how an attacker might

45
00:01:39,780 --> 00:01:41,939
actually use this and how to defend

46
00:01:41,939 --> 00:01:44,040
against It ultimately and the good news

47
00:01:44,040 --> 00:01:46,979
is uh even if you've never seen AWS our

48
00:01:46,979 --> 00:01:49,200
resource-based policy before this

49
00:01:49,200 --> 00:01:52,939
presentation should still make sense so

50
00:01:53,820 --> 00:01:56,100
but before we dive into actually the

51
00:01:56,100 --> 00:01:57,540
attack we just need to make sure we

52
00:01:57,540 --> 00:01:59,820
understand what a policy in AWS actually

53
00:01:59,820 --> 00:02:03,060
is so policies form part of the IAM

54
00:02:03,060 --> 00:02:04,560
service which stands for identity and

55
00:02:04,560 --> 00:02:06,240
access management and this effectively

56
00:02:06,240 --> 00:02:08,940
controls everything in AWS who can and

57
00:02:08,940 --> 00:02:11,520
can't do specific actions for example

58
00:02:11,520 --> 00:02:13,620
so if we break down the example that we

59
00:02:13,620 --> 00:02:15,420
have on screen you can kind of see that

60
00:02:15,420 --> 00:02:17,819
the middle section there's an action S3

61
00:02:17,819 --> 00:02:19,920
create bucket for those that have not

62
00:02:19,920 --> 00:02:21,720
heard of S3 before it's just the medium

63
00:02:21,720 --> 00:02:25,200
of storing basically anything uh in

64
00:02:25,200 --> 00:02:26,580
within AWS

65
00:02:26,580 --> 00:02:29,760
and the effect is allow on resource star

66
00:02:29,760 --> 00:02:31,560
and the principle of star and the two

67
00:02:31,560 --> 00:02:34,560
stars are just a wild card in AWS so the

68
00:02:34,560 --> 00:02:35,819
easiest way to break down this policy

69
00:02:35,819 --> 00:02:38,040
into sort of a one-liner is it allows

70
00:02:38,040 --> 00:02:39,959
anybody to create an S3 bucket for

71
00:02:39,959 --> 00:02:41,940
example

72
00:02:41,940 --> 00:02:43,440
but how would it actually work in

73
00:02:43,440 --> 00:02:45,900
practice well let's say we have a user

74
00:02:45,900 --> 00:02:47,640
called Trophy and they want to create an

75
00:02:47,640 --> 00:02:51,360
S3 bucket so on the first screenshot on

76
00:02:51,360 --> 00:02:53,099
the left we can see that they send a

77
00:02:53,099 --> 00:02:56,459
command to the AWS apis uh saying create

78
00:02:56,459 --> 00:02:59,040
bucket the dash dash bucket flag of my

79
00:02:59,040 --> 00:03:01,620
bucket is just the name a region this is

80
00:03:01,620 --> 00:03:02,879
just defining where the bucket is going

81
00:03:02,879 --> 00:03:04,560
to live and finally the object's

82
00:03:04,560 --> 00:03:06,420
ownership flag which is just ensuring

83
00:03:06,420 --> 00:03:07,800
that anything that's uploaded to that

84
00:03:07,800 --> 00:03:10,620
bucket will be owned by Tracy in this

85
00:03:10,620 --> 00:03:11,480
case

86
00:03:11,480 --> 00:03:14,940
uh once she submits that request uh the

87
00:03:14,940 --> 00:03:16,739
AWS will evaluate the policy that we

88
00:03:16,739 --> 00:03:19,260
looked at earlier and in turn this will

89
00:03:19,260 --> 00:03:20,760
be allowed because we already know that

90
00:03:20,760 --> 00:03:22,980
the policy is allowed to create S3

91
00:03:22,980 --> 00:03:25,459
buckets

92
00:03:25,800 --> 00:03:27,780
and the API will respond with location

93
00:03:27,780 --> 00:03:29,879
by bucket and this just effectively

94
00:03:29,879 --> 00:03:31,440
means it was successful because it's

95
00:03:31,440 --> 00:03:33,239
just re-outputting the name that she

96
00:03:33,239 --> 00:03:37,099
originally requested it to be called

97
00:03:40,879 --> 00:03:43,980
okay so where are policies used in AWS

98
00:03:43,980 --> 00:03:46,019
well everywhere

99
00:03:46,019 --> 00:03:49,080
um hopefully so they can be used to be

100
00:03:49,080 --> 00:03:50,099
set against

101
00:03:50,099 --> 00:03:52,319
um users for example or any form of

102
00:03:52,319 --> 00:03:54,480
entity roles

103
00:03:54,480 --> 00:03:57,780
um resources as well such as servers or

104
00:03:57,780 --> 00:03:59,580
something like similar which is what

105
00:03:59,580 --> 00:04:01,200
we're referring to with resource-based

106
00:04:01,200 --> 00:04:02,459
policies

107
00:04:02,459 --> 00:04:04,140
um so the core thing to take away from

108
00:04:04,140 --> 00:04:06,000
this slide is just that policies are

109
00:04:06,000 --> 00:04:07,560
effectively everywhere in AWS then it's

110
00:04:07,560 --> 00:04:09,239
impossible to kind of use

111
00:04:09,239 --> 00:04:11,879
AWS without interacting with policies in

112
00:04:11,879 --> 00:04:14,179
some way

113
00:04:15,659 --> 00:04:17,760
and as we mentioned uh there's also

114
00:04:17,760 --> 00:04:19,260
something known as resource-based

115
00:04:19,260 --> 00:04:21,899
policies now these are something that

116
00:04:21,899 --> 00:04:23,880
takes a slightly different approach from

117
00:04:23,880 --> 00:04:25,380
the one that we just saw where Tracy

118
00:04:25,380 --> 00:04:27,479
wanted to create an S3 bucket whereas a

119
00:04:27,479 --> 00:04:29,520
resource a resource-based policy is

120
00:04:29,520 --> 00:04:31,800
applied against a specific Resource as

121
00:04:31,800 --> 00:04:33,600
you might expect so

122
00:04:33,600 --> 00:04:35,040
um if we were thinking about the S3

123
00:04:35,040 --> 00:04:36,800
bucket that we just created for example

124
00:04:36,800 --> 00:04:39,479
we may assign a resource-based policy to

125
00:04:39,479 --> 00:04:42,060
it that allows someone to upload a file

126
00:04:42,060 --> 00:04:44,400
or to see that bucket so the policy

127
00:04:44,400 --> 00:04:46,440
isn't actually assigned against a user

128
00:04:46,440 --> 00:04:48,479
or an entity it's assigned against the

129
00:04:48,479 --> 00:04:51,120
actual resource

130
00:04:51,120 --> 00:04:52,380
and I thought I was going to walk

131
00:04:52,380 --> 00:04:54,660
through how they're used

132
00:04:54,660 --> 00:04:57,780
yeah thanks so uh yeah resource-based

133
00:04:57,780 --> 00:04:59,400
policies then are used on lots of

134
00:04:59,400 --> 00:05:01,259
services in AWS we've listed a few of

135
00:05:01,259 --> 00:05:03,720
them there but there's 200 services or

136
00:05:03,720 --> 00:05:06,419
so in AWS and quite a lot of them use

137
00:05:06,419 --> 00:05:08,880
resource-based policies the ones we put

138
00:05:08,880 --> 00:05:10,800
up here mostly are just because they're

139
00:05:10,800 --> 00:05:11,699
going to come up later in the

140
00:05:11,699 --> 00:05:13,139
presentation not going to walk through

141
00:05:13,139 --> 00:05:15,600
all them all at this point uh we'll get

142
00:05:15,600 --> 00:05:18,360
to them as they as they come up but what

143
00:05:18,360 --> 00:05:21,000
do they have in common well it turns out

144
00:05:21,000 --> 00:05:24,180
that these resources are all deployed in

145
00:05:24,180 --> 00:05:27,660
AWS managed areas of the cloud so you

146
00:05:27,660 --> 00:05:29,160
can get to them from anywhere within the

147
00:05:29,160 --> 00:05:31,680
AWS Network

148
00:05:31,680 --> 00:05:36,120
um and whereas a user based policy or a

149
00:05:36,120 --> 00:05:38,400
service-based policy defines what a

150
00:05:38,400 --> 00:05:40,620
particular entity can do just to

151
00:05:40,620 --> 00:05:42,240
reiterate what Matt said the

152
00:05:42,240 --> 00:05:43,919
resource-based policies sort of flip

153
00:05:43,919 --> 00:05:46,199
that logic and they go okay if I take

154
00:05:46,199 --> 00:05:49,259
all of the entities in AWS who am I

155
00:05:49,259 --> 00:05:52,979
going to allow to access this

156
00:05:52,979 --> 00:05:54,840
also what happens then if you don't set

157
00:05:54,840 --> 00:05:57,840
a resource-based policy

158
00:05:57,840 --> 00:05:58,800
um

159
00:05:58,800 --> 00:06:01,500
well it is a here's a diagram from AWS

160
00:06:01,500 --> 00:06:05,820
which starts explaining it and AWS IM is

161
00:06:05,820 --> 00:06:07,259
quite difficult there's a lot of stuff

162
00:06:07,259 --> 00:06:09,000
that's involved in it so we've just

163
00:06:09,000 --> 00:06:11,220
highlighted the little bit that we are

164
00:06:11,220 --> 00:06:13,139
particularly interested in and you can

165
00:06:13,139 --> 00:06:14,940
see straight away if there is no

166
00:06:14,940 --> 00:06:16,860
resource-based policy uh it will just

167
00:06:16,860 --> 00:06:19,440
carry on and go through the rest of the

168
00:06:19,440 --> 00:06:22,199
flowchart if there is it goes into a see

169
00:06:22,199 --> 00:06:25,080
the resource policies section uh that

170
00:06:25,080 --> 00:06:26,580
gets a little bit complex but it will

171
00:06:26,580 --> 00:06:29,100
evaluate the resource-based policy and

172
00:06:29,100 --> 00:06:31,440
figure out whether your user or entity

173
00:06:31,440 --> 00:06:34,259
has the ability to do what you what you

174
00:06:34,259 --> 00:06:36,180
like what this means for us really is

175
00:06:36,180 --> 00:06:38,580
that there's no detriment really from

176
00:06:38,580 --> 00:06:40,560
not having a resource-based policy set

177
00:06:40,560 --> 00:06:43,740
but if you do set them you can improve

178
00:06:43,740 --> 00:06:45,479
your security posture further and have

179
00:06:45,479 --> 00:06:49,340
more fine-grained controls

180
00:06:50,000 --> 00:06:53,100
I'm going to look at a couple of common

181
00:06:53,100 --> 00:06:54,960
misconfigurations now these are things

182
00:06:54,960 --> 00:06:58,080
that are fairly well documented AWS

183
00:06:58,080 --> 00:07:00,539
have written a lot about them loads of

184
00:07:00,539 --> 00:07:02,100
stuff on the internet about these and

185
00:07:02,100 --> 00:07:03,600
the sort of things that people you talk

186
00:07:03,600 --> 00:07:05,220
would be aware of if they're operating

187
00:07:05,220 --> 00:07:07,020
in the cloud environment

188
00:07:07,020 --> 00:07:09,120
so this one is not adhering to the

189
00:07:09,120 --> 00:07:11,400
principle of least privilege and what's

190
00:07:11,400 --> 00:07:15,180
the problem well that action is part of

191
00:07:15,180 --> 00:07:18,780
the policy says S3 action star and again

192
00:07:18,780 --> 00:07:20,520
the star is a wild card so this is

193
00:07:20,520 --> 00:07:24,240
basically saying that the principle

194
00:07:24,240 --> 00:07:28,440
um which is that reader role has

195
00:07:28,440 --> 00:07:30,919
privileges to do anything it likes in S3

196
00:07:30,919 --> 00:07:33,900
so it can read stuff but it can also

197
00:07:33,900 --> 00:07:35,699
write stuff out of the bucket and can

198
00:07:35,699 --> 00:07:38,699
modify the bucket configuration and so

199
00:07:38,699 --> 00:07:40,139
say you've got an Insider threat who's

200
00:07:40,139 --> 00:07:41,880
been assigned this role or as an

201
00:07:41,880 --> 00:07:44,099
attacker who's laterally moved and

202
00:07:44,099 --> 00:07:46,319
assumed it they could do whatever they

203
00:07:46,319 --> 00:07:47,520
like they could make the bucket public

204
00:07:47,520 --> 00:07:50,039
they could just read all our data or add

205
00:07:50,039 --> 00:07:52,800
new and fictitious data into our bucket

206
00:07:52,800 --> 00:07:54,539
so this is bad

207
00:07:54,539 --> 00:07:57,599
uh We've also got another common

208
00:07:57,599 --> 00:07:59,940
misconfiguration which is opening access

209
00:07:59,940 --> 00:08:02,039
up too widely so here you'll see we've

210
00:08:02,039 --> 00:08:04,380
got the principle is AWS star and like

211
00:08:04,380 --> 00:08:07,199
Matt said earlier this means that anyone

212
00:08:07,199 --> 00:08:11,099
within AWS can perform the S3 get object

213
00:08:11,099 --> 00:08:15,599
Buck action on our resource

214
00:08:15,599 --> 00:08:18,840
um so this again could lead to data

215
00:08:18,840 --> 00:08:21,120
breaches and effectively here you've

216
00:08:21,120 --> 00:08:24,240
made your bucket public

217
00:08:24,240 --> 00:08:27,360
uh so I'll hand back over to Matt to

218
00:08:27,360 --> 00:08:29,240
talk about yeah what we were looking

219
00:08:29,240 --> 00:08:32,580
perfect thanks Tom uh so yeah where do

220
00:08:32,580 --> 00:08:33,899
we actually start with all this like

221
00:08:33,899 --> 00:08:36,059
where did this all begin well something

222
00:08:36,059 --> 00:08:38,219
that we do at West secure we look at um

223
00:08:38,219 --> 00:08:40,320
clients later West States and and help

224
00:08:40,320 --> 00:08:43,020
them make them more secure right and we

225
00:08:43,020 --> 00:08:44,640
started to notice an occurring pattern

226
00:08:44,640 --> 00:08:47,399
that people were sort of inherently

227
00:08:47,399 --> 00:08:50,339
trusting other AWS Services as part of

228
00:08:50,339 --> 00:08:52,380
their resource-based policy

229
00:08:52,380 --> 00:08:54,240
um which started to get us thinking well

230
00:08:54,240 --> 00:08:57,779
if it's just trusting a service that

231
00:08:57,779 --> 00:08:59,160
service is effectively available to

232
00:08:59,160 --> 00:09:02,220
everybody right so can we maybe be in a

233
00:09:02,220 --> 00:09:04,140
position where we can interact with

234
00:09:04,140 --> 00:09:07,019
something within somebody else's AWS

235
00:09:07,019 --> 00:09:08,459
account just because they've trusted

236
00:09:08,459 --> 00:09:10,500
another AWS service that we also happen

237
00:09:10,500 --> 00:09:13,399
to have access to

238
00:09:14,640 --> 00:09:16,860
and just on that point we do have to ask

239
00:09:16,860 --> 00:09:19,440
ourselves is the cloud private well you

240
00:09:19,440 --> 00:09:20,940
first think well it's a shared service

241
00:09:20,940 --> 00:09:22,980
right so of course no

242
00:09:22,980 --> 00:09:24,660
um but when you start architecting with

243
00:09:24,660 --> 00:09:27,120
the cloud you can fall into a kind of

244
00:09:27,120 --> 00:09:29,700
position and a space where you you put

245
00:09:29,700 --> 00:09:32,279
this virtual kind of block around your

246
00:09:32,279 --> 00:09:34,019
estate and you think that it's nice and

247
00:09:34,019 --> 00:09:35,399
secure just because it's yours right

248
00:09:35,399 --> 00:09:37,019
like no one else can interact with my

249
00:09:37,019 --> 00:09:39,360
resources unless I give a specific

250
00:09:39,360 --> 00:09:42,000
permission to do that

251
00:09:42,000 --> 00:09:42,600
um

252
00:09:42,600 --> 00:09:44,459
but yeah we all have to kind of take a

253
00:09:44,459 --> 00:09:46,019
step back from that and remember that

254
00:09:46,019 --> 00:09:48,120
everything is shared and at the end of

255
00:09:48,120 --> 00:09:50,519
the day we are all hitting the same apis

256
00:09:50,519 --> 00:09:52,560
of said cloud provider

257
00:09:52,560 --> 00:09:53,519
um just with a different set of

258
00:09:53,519 --> 00:09:55,940
parameters

259
00:09:56,899 --> 00:09:59,459
so what would a real world example of

260
00:09:59,459 --> 00:10:01,980
this actually look like so for this

261
00:10:01,980 --> 00:10:03,600
demonstration we're going to use S3

262
00:10:03,600 --> 00:10:05,279
which we've kind of already covered it's

263
00:10:05,279 --> 00:10:08,040
just a storage medium sending a message

264
00:10:08,040 --> 00:10:10,200
to something known as an SNS topic which

265
00:10:10,200 --> 00:10:11,700
just stands for simple notification

266
00:10:11,700 --> 00:10:14,580
service whenever a certain event happens

267
00:10:14,580 --> 00:10:17,580
so yeah so say for example like we want

268
00:10:17,580 --> 00:10:19,019
an alert to trigger when a file is

269
00:10:19,019 --> 00:10:21,839
uploaded to S3 to send an email maybe so

270
00:10:21,839 --> 00:10:23,040
that's the example we're going to go

271
00:10:23,040 --> 00:10:24,600
through

272
00:10:24,600 --> 00:10:26,399
so first we have to have a look at the

273
00:10:26,399 --> 00:10:28,260
resource-based policy that's applied to

274
00:10:28,260 --> 00:10:31,200
the SNS topic and in this case we can

275
00:10:31,200 --> 00:10:32,700
see a roundabout in the middle of the

276
00:10:32,700 --> 00:10:34,459
screen where it says principal service

277
00:10:34,459 --> 00:10:38,100
S3 Amazon aws.com and then just a little

278
00:10:38,100 --> 00:10:40,680
bit low action SNS published on resource

279
00:10:40,680 --> 00:10:43,320
star that effectively means that S3 as

280
00:10:43,320 --> 00:10:44,940
the service is being trusted with this

281
00:10:44,940 --> 00:10:47,519
specific action so S3 is allowed to

282
00:10:47,519 --> 00:10:51,620
publish a message to this SNS topic

283
00:10:55,079 --> 00:10:57,260
foreign

284
00:10:58,100 --> 00:11:01,320
has the ability to send events to SNS

285
00:11:01,320 --> 00:11:03,899
when something happens so in our case

286
00:11:03,899 --> 00:11:05,579
now we're going to configure it so that

287
00:11:05,579 --> 00:11:08,459
whenever a file is put into an S3 bucket

288
00:11:08,459 --> 00:11:10,440
in other words uploaded we want to

289
00:11:10,440 --> 00:11:11,940
trigger a message

290
00:11:11,940 --> 00:11:15,540
um out to SNS in this case

291
00:11:15,540 --> 00:11:17,339
now on the right hand side we're just

292
00:11:17,339 --> 00:11:19,740
configuring the destination of that

293
00:11:19,740 --> 00:11:22,140
event to happen and we've specified the

294
00:11:22,140 --> 00:11:25,260
arm of the SNS topic and the Arn just

295
00:11:25,260 --> 00:11:27,480
stands for Amazon resource name and

296
00:11:27,480 --> 00:11:28,860
that's something that every single

297
00:11:28,860 --> 00:11:30,839
resource within Amazon is granted so

298
00:11:30,839 --> 00:11:32,820
it's kind of a way of thinking about it

299
00:11:32,820 --> 00:11:35,279
like a URL it's kind of what it is it's

300
00:11:35,279 --> 00:11:37,800
just a way of pointing to a specific

301
00:11:37,800 --> 00:11:41,000
resource within AWS

302
00:11:45,000 --> 00:11:47,519
so now that we upload a file to the S3

303
00:11:47,519 --> 00:11:50,220
buckets this is the kind of email that

304
00:11:50,220 --> 00:11:51,480
we're going to receive and although it

305
00:11:51,480 --> 00:11:54,000
looks a bit jargony right now if you

306
00:11:54,000 --> 00:11:55,740
kind of break that down it will just

307
00:11:55,740 --> 00:11:57,839
confirm like the file that was uploaded

308
00:11:57,839 --> 00:12:00,540
who uploaded it the IP address that they

309
00:12:00,540 --> 00:12:02,279
came from all the kind of things you'd

310
00:12:02,279 --> 00:12:04,260
want in an event notification of a file

311
00:12:04,260 --> 00:12:07,140
being uploaded right so this all looks

312
00:12:07,140 --> 00:12:09,480
good everything's working

313
00:12:09,480 --> 00:12:12,000
um yeah like this is exactly how we want

314
00:12:12,000 --> 00:12:14,160
our event to work

315
00:12:14,160 --> 00:12:16,500
but now we're going to change AWS

316
00:12:16,500 --> 00:12:18,899
account so we're going to switch into an

317
00:12:18,899 --> 00:12:22,260
attacker controlled AWS account now for

318
00:12:22,260 --> 00:12:23,820
whatever means

319
00:12:23,820 --> 00:12:25,079
um this may be sort of an internal

320
00:12:25,079 --> 00:12:26,640
threat or if someone has been able to

321
00:12:26,640 --> 00:12:28,440
sort of hack into your AWS account

322
00:12:28,440 --> 00:12:30,480
someone has been able to figure out that

323
00:12:30,480 --> 00:12:32,220
that resource-based policy exists on

324
00:12:32,220 --> 00:12:34,320
that SNS topic and because of that they

325
00:12:34,320 --> 00:12:37,200
now know the Arn of such SNS topic so

326
00:12:37,200 --> 00:12:39,420
what the attacker will do now is create

327
00:12:39,420 --> 00:12:41,940
the exact same event notification

328
00:12:41,940 --> 00:12:44,040
configuration but they will now do that

329
00:12:44,040 --> 00:12:46,200
in their account and as we can see from

330
00:12:46,200 --> 00:12:47,820
the screenshot on the right it's kind of

331
00:12:47,820 --> 00:12:49,440
the exact same configuration again with

332
00:12:49,440 --> 00:12:52,560
placing the Arn of the SNS topic but now

333
00:12:52,560 --> 00:12:54,240
this is in the previous account that we

334
00:12:54,240 --> 00:12:56,660
were looking at

335
00:12:58,139 --> 00:13:00,060
and as soon as the attacker uploads a

336
00:13:00,060 --> 00:13:02,519
file to an S3 bucket that they control

337
00:13:02,519 --> 00:13:04,500
surprise surprise the event gets

338
00:13:04,500 --> 00:13:06,720
triggered which

339
00:13:06,720 --> 00:13:09,480
yeah yeah to take it how you will

340
00:13:09,480 --> 00:13:11,160
um but I'm pretty sure that the sort of

341
00:13:11,160 --> 00:13:12,720
owners of the original SNS topic

342
00:13:12,720 --> 00:13:15,000
probably didn't intend for this sort of

343
00:13:15,000 --> 00:13:17,300
notification functionality to take place

344
00:13:17,300 --> 00:13:19,560
and what's really really key from this

345
00:13:19,560 --> 00:13:21,839
is that the event actually originated

346
00:13:21,839 --> 00:13:23,579
from an attacker controlled AWS account

347
00:13:23,579 --> 00:13:26,660
that's the key thing

348
00:13:30,360 --> 00:13:33,240
foreign

349
00:13:33,240 --> 00:13:34,800
this would be a really good time for

350
00:13:34,800 --> 00:13:37,200
PowerPoint to freeze there we go okay

351
00:13:37,200 --> 00:13:38,519
sorry about that

352
00:13:38,519 --> 00:13:40,019
um so yeah you may be asking yourself

353
00:13:40,019 --> 00:13:43,019
what's the further impact of this well

354
00:13:43,019 --> 00:13:45,300
as we were kind of saying so an attacker

355
00:13:45,300 --> 00:13:46,800
has now been able to interact with the

356
00:13:46,800 --> 00:13:48,660
resource that was in a completely

357
00:13:48,660 --> 00:13:50,519
different account from theirs just by

358
00:13:50,519 --> 00:13:52,200
our badly configured resource-based

359
00:13:52,200 --> 00:13:55,320
policy and what's really key about this

360
00:13:55,320 --> 00:13:58,920
example in in particular is that SNS as

361
00:13:58,920 --> 00:14:00,779
a service there's no way to kind of put

362
00:14:00,779 --> 00:14:03,060
a network barrier around it it's just

363
00:14:03,060 --> 00:14:05,160
available as part of AWS you know

364
00:14:05,160 --> 00:14:07,500
there's no way to isolate it at all so

365
00:14:07,500 --> 00:14:09,779
as long as this misconfiguration within

366
00:14:09,779 --> 00:14:12,600
AWS exists you effectively in a way

367
00:14:12,600 --> 00:14:14,519
expose your resources to the internet

368
00:14:14,519 --> 00:14:16,019
but it may not be very clear that you're

369
00:14:16,019 --> 00:14:18,060
actually doing that

370
00:14:18,060 --> 00:14:21,899
and SNS as well doesn't just have the

371
00:14:21,899 --> 00:14:24,540
capability to send emails it can also

372
00:14:24,540 --> 00:14:27,180
send things like um HTTP messages to

373
00:14:27,180 --> 00:14:29,579
sort of web hooks or SMS messages so

374
00:14:29,579 --> 00:14:31,380
there's always the option of phishing or

375
00:14:31,380 --> 00:14:32,779
if it's involved in some kind of

376
00:14:32,779 --> 00:14:34,920
automation process you know you can

377
00:14:34,920 --> 00:14:37,380
potentially mess with it in that way

378
00:14:37,380 --> 00:14:40,139
um to cause impact

379
00:14:40,139 --> 00:14:41,519
um

380
00:14:41,519 --> 00:14:44,160
but yeah uh so Tom's going to give some

381
00:14:44,160 --> 00:14:46,320
uh examples of where else this could be

382
00:14:46,320 --> 00:14:49,380
used in AWS as well thanks so yeah

383
00:14:49,380 --> 00:14:51,300
before we move on to this second example

384
00:14:51,300 --> 00:14:52,440
uh just going to give you a little bit

385
00:14:52,440 --> 00:14:53,880
of context behind the services because

386
00:14:53,880 --> 00:14:55,019
you know we said at the beginning you

387
00:14:55,019 --> 00:14:57,480
don't need to know AWS for this so first

388
00:14:57,480 --> 00:14:59,519
up is Lambda um if you've heard of this

389
00:14:59,519 --> 00:15:00,540
it's probably one of the more

390
00:15:00,540 --> 00:15:03,180
recognizable AWS services and it'll

391
00:15:03,180 --> 00:15:04,860
allow you to write code run it in the

392
00:15:04,860 --> 00:15:06,720
cloud in one of several programming

393
00:15:06,720 --> 00:15:09,420
languages uh it's serverless to the end

394
00:15:09,420 --> 00:15:12,959
user so you can just set your code to go

395
00:15:12,959 --> 00:15:15,660
and AWS will run it for you and if two

396
00:15:15,660 --> 00:15:17,940
AWS Services exist They Don't Really

397
00:15:17,940 --> 00:15:19,860
interface how you want them to you can

398
00:15:19,860 --> 00:15:21,660
use Lambda and sort of make your own

399
00:15:21,660 --> 00:15:24,420
code to do that importantly for us here

400
00:15:24,420 --> 00:15:28,019
when you run a Lambda it runs on AWS

401
00:15:28,019 --> 00:15:30,300
managed infrastructure

402
00:15:30,300 --> 00:15:32,220
and if you've got your own little

403
00:15:32,220 --> 00:15:34,320
specific private air of the cloud known

404
00:15:34,320 --> 00:15:38,579
as a VPC you can attach that Lambda to

405
00:15:38,579 --> 00:15:41,279
your VPC and it can then access and

406
00:15:41,279 --> 00:15:43,800
interact with the resources within it

407
00:15:43,800 --> 00:15:46,139
we've also got API Gateway which is

408
00:15:46,139 --> 00:15:47,519
application programming interface

409
00:15:47,519 --> 00:15:50,880
Gateway uh and that's what AWS call it

410
00:15:50,880 --> 00:15:52,260
and there's a couple of examples here

411
00:15:52,260 --> 00:15:54,180
that we've put in

412
00:15:54,180 --> 00:15:55,800
um the one that we're going to look at

413
00:15:55,800 --> 00:15:58,320
specifically is say that second one

414
00:15:58,320 --> 00:16:00,360
where you might have an internally

415
00:16:00,360 --> 00:16:03,060
hosted Gateway and you're going to give

416
00:16:03,060 --> 00:16:06,120
developers or well let developers hit it

417
00:16:06,120 --> 00:16:08,040
and they'll get time limited credentials

418
00:16:08,040 --> 00:16:11,880
to interact with a different system

419
00:16:11,880 --> 00:16:13,500
obviously for each of the two examples

420
00:16:13,500 --> 00:16:14,880
the policies in place are going to be

421
00:16:14,880 --> 00:16:17,459
pretty different due to Unique access

422
00:16:17,459 --> 00:16:21,018
requirements for each of them

423
00:16:21,120 --> 00:16:23,579
so we took a case where we see Services

424
00:16:23,579 --> 00:16:26,100
often working together so we've got a

425
00:16:26,100 --> 00:16:29,100
Lambda function here which is invoked by

426
00:16:29,100 --> 00:16:32,040
an API Gateway so you can see again in

427
00:16:32,040 --> 00:16:33,120
the

428
00:16:33,120 --> 00:16:34,740
principal section we've got a service

429
00:16:34,740 --> 00:16:37,620
which is API Gateway and the action is

430
00:16:37,620 --> 00:16:40,980
to Lambda invoke function now you will

431
00:16:40,980 --> 00:16:42,180
probably at this point be able to see

432
00:16:42,180 --> 00:16:44,279
the problem with this that it's saying

433
00:16:44,279 --> 00:16:46,199
service API Gateway is allowed to

434
00:16:46,199 --> 00:16:48,000
interact with a Lambda but it doesn't

435
00:16:48,000 --> 00:16:52,139
specify whose API Gateway can do so

436
00:16:52,139 --> 00:16:54,360
so to quickly show how this works I've

437
00:16:54,360 --> 00:16:57,779
got our intended functionality so if we

438
00:16:57,779 --> 00:16:59,279
follow the arrows we've got API Gateway

439
00:16:59,279 --> 00:17:01,500
calls the Lambda function the Lambda

440
00:17:01,500 --> 00:17:03,120
function then goes into Secrets manager

441
00:17:03,120 --> 00:17:05,939
which is what it sounds like and gets a

442
00:17:05,939 --> 00:17:08,579
secret out say a password returns that

443
00:17:08,579 --> 00:17:10,260
to the Lambda function which then comes

444
00:17:10,260 --> 00:17:12,780
back to the API Gateway and presents it

445
00:17:12,780 --> 00:17:14,099
to the user

446
00:17:14,099 --> 00:17:16,020
so let's move on to the next slide uh

447
00:17:16,020 --> 00:17:17,400
keep an eye out on the four points on

448
00:17:17,400 --> 00:17:19,199
the right hand side of the slide to see

449
00:17:19,199 --> 00:17:20,939
how they change when we're doing our

450
00:17:20,939 --> 00:17:23,640
theoretical attack

451
00:17:23,640 --> 00:17:26,160
you see nothing has changed because this

452
00:17:26,160 --> 00:17:28,099
is intended functionality

453
00:17:28,099 --> 00:17:30,660
the only thing that's changed really is

454
00:17:30,660 --> 00:17:33,299
that we are making the API Gateway call

455
00:17:33,299 --> 00:17:36,860
from our own account

456
00:17:37,799 --> 00:17:39,299
so

457
00:17:39,299 --> 00:17:41,700
theoretically that should work but we

458
00:17:41,700 --> 00:17:43,620
wanted to test this of course so we set

459
00:17:43,620 --> 00:17:45,240
up a Lambda function with the

460
00:17:45,240 --> 00:17:47,280
resource-based policy that we showed you

461
00:17:47,280 --> 00:17:49,020
earlier and the function of this was

462
00:17:49,020 --> 00:17:50,940
just to go into Secrets manager take out

463
00:17:50,940 --> 00:17:53,580
a secret and then return it to us

464
00:17:53,580 --> 00:17:56,460
um and yeah is it an unusual scenario

465
00:17:56,460 --> 00:17:58,620
possibly not it's sort of a fairly

466
00:17:58,620 --> 00:18:01,200
standard use for API Gateway and

467
00:18:01,200 --> 00:18:03,480
interacting with Lambda

468
00:18:03,480 --> 00:18:05,940
um and what we wanted to do is show that

469
00:18:05,940 --> 00:18:08,640
it will get this secret for you but also

470
00:18:08,640 --> 00:18:11,760
that if you provided particular inputs

471
00:18:11,760 --> 00:18:13,919
to a Lambda function

472
00:18:13,919 --> 00:18:15,539
um we just added something that will

473
00:18:15,539 --> 00:18:17,039
return those inputs to you to

474
00:18:17,039 --> 00:18:19,020
demonstrate that we can do other things

475
00:18:19,020 --> 00:18:21,059
as well as just pulling out pulling out

476
00:18:21,059 --> 00:18:22,799
secrets

477
00:18:22,799 --> 00:18:24,419
so here's the attack

478
00:18:24,419 --> 00:18:25,020
um

479
00:18:25,020 --> 00:18:27,559
quite simple in the end we just go to

480
00:18:27,559 --> 00:18:31,620
the API Gateway that we've set up and

481
00:18:31,620 --> 00:18:34,200
it's interacting with a Lambda and you

482
00:18:34,200 --> 00:18:35,940
can see in there it's pulling out our

483
00:18:35,940 --> 00:18:38,640
secret data and also if you look in the

484
00:18:38,640 --> 00:18:40,080
bottom right we've got the request that

485
00:18:40,080 --> 00:18:42,419
we sent it and it's given that back to

486
00:18:42,419 --> 00:18:45,360
us in the data area so this means that

487
00:18:45,360 --> 00:18:47,280
if we've got any idea about the

488
00:18:47,280 --> 00:18:49,200
structure of the data that should be

489
00:18:49,200 --> 00:18:51,720
sent to the Target Lambda function we

490
00:18:51,720 --> 00:18:53,280
can just replicate that in our request

491
00:18:53,280 --> 00:18:55,620
and we'll interact with the Lambda in

492
00:18:55,620 --> 00:18:57,179
the way that a developer never really

493
00:18:57,179 --> 00:18:59,660
intended

494
00:18:59,900 --> 00:19:02,280
so you may ask

495
00:19:02,280 --> 00:19:04,260
you know I said earlier there's the 200

496
00:19:04,260 --> 00:19:06,660
or so Services we didn't look at all of

497
00:19:06,660 --> 00:19:08,100
these of course

498
00:19:08,100 --> 00:19:10,860
um but for those who know AWS you might

499
00:19:10,860 --> 00:19:12,840
say well okay ec2

500
00:19:12,840 --> 00:19:15,780
um you know you can control operating

501
00:19:15,780 --> 00:19:17,280
system calls on that you've got loads of

502
00:19:17,280 --> 00:19:19,140
control over it surely we can do an

503
00:19:19,140 --> 00:19:20,039
attack

504
00:19:20,039 --> 00:19:22,200
um with that and in fact the answer is

505
00:19:22,200 --> 00:19:24,360
no uh because although we have more

506
00:19:24,360 --> 00:19:27,720
control over the ec2 instance itself we

507
00:19:27,720 --> 00:19:29,460
have less control over what the ec2

508
00:19:29,460 --> 00:19:31,919
service can do and it's what the survey

509
00:19:31,919 --> 00:19:33,660
or what we can get the service to do

510
00:19:33,660 --> 00:19:36,539
which is the important thing here

511
00:19:36,539 --> 00:19:38,520
um as an example of this when you set up

512
00:19:38,520 --> 00:19:40,740
an easy to you actually have to assign

513
00:19:40,740 --> 00:19:43,140
it a particular role and we've got an

514
00:19:43,140 --> 00:19:44,820
example one on there

515
00:19:44,820 --> 00:19:47,400
and that's the thing that is then making

516
00:19:47,400 --> 00:19:49,320
all of the API calls

517
00:19:49,320 --> 00:19:52,340
this is not the service ec2 Amazon

518
00:19:52,340 --> 00:19:53,900
aws.com

519
00:19:53,900 --> 00:19:56,820
which means that any attack

520
00:19:56,820 --> 00:19:58,559
that we just demonstrated would fail

521
00:19:58,559 --> 00:20:00,480
from it so there's a very limited set of

522
00:20:00,480 --> 00:20:02,700
services that this will actually work

523
00:20:02,700 --> 00:20:03,600
from

524
00:20:03,600 --> 00:20:07,020
so yeah many many AWS Services work in

525
00:20:07,020 --> 00:20:09,840
this way API Gateway is notable and what

526
00:20:09,840 --> 00:20:11,700
we focused on because

527
00:20:11,700 --> 00:20:14,880
it doesn't and so the API Gateway

528
00:20:14,880 --> 00:20:16,500
service is the thing that's actually

529
00:20:16,500 --> 00:20:18,660
making all of the calls which is why

530
00:20:18,660 --> 00:20:20,880
they attack for us using API Gateway is

531
00:20:20,880 --> 00:20:22,919
so controllable

532
00:20:22,919 --> 00:20:24,840
uh and so yeah back to map for

533
00:20:24,840 --> 00:20:27,960
prevention perfect thanks Tom uh so yeah

534
00:20:27,960 --> 00:20:29,700
you may be looking at this and thinking

535
00:20:29,700 --> 00:20:31,140
well it's a cool attack

536
00:20:31,140 --> 00:20:32,520
um but how would I actually look about

537
00:20:32,520 --> 00:20:34,320
preventing something like this so how

538
00:20:34,320 --> 00:20:35,760
would I stop

539
00:20:35,760 --> 00:20:37,679
um this sort of abusive resource-based

540
00:20:37,679 --> 00:20:39,720
policies taking place

541
00:20:39,720 --> 00:20:41,340
um and the key is actually something

542
00:20:41,340 --> 00:20:43,320
known as Source checks and they are a

543
00:20:43,320 --> 00:20:46,320
way to effectively ensure uh who is

544
00:20:46,320 --> 00:20:48,600
making the request to interact with that

545
00:20:48,600 --> 00:20:50,700
service in some way is someone that you

546
00:20:50,700 --> 00:20:52,860
actually expect

547
00:20:52,860 --> 00:20:55,559
uh just to give an example of this so um

548
00:20:55,559 --> 00:20:57,780
this is an SNS policy that a

549
00:20:57,780 --> 00:20:59,220
resource-based policy sorry that we were

550
00:20:59,220 --> 00:21:02,460
looking at before whereas instead of it

551
00:21:02,460 --> 00:21:05,280
just being open to a specific service we

552
00:21:05,280 --> 00:21:07,260
now have a section on the bottom

553
00:21:07,260 --> 00:21:09,419
um uh the condition section where we are

554
00:21:09,419 --> 00:21:11,760
saying the string equals AWS Source

555
00:21:11,760 --> 00:21:14,220
owner and if that black box wouldn't be

556
00:21:14,220 --> 00:21:16,380
there a full sort of AWS account number

557
00:21:16,380 --> 00:21:18,660
would be there so now whenever a request

558
00:21:18,660 --> 00:21:20,760
is sent to that SNS service there's

559
00:21:20,760 --> 00:21:22,080
going to be an additional check to

560
00:21:22,080 --> 00:21:24,660
validate which AWS account is making

561
00:21:24,660 --> 00:21:27,299
that call and ensuring that it is either

562
00:21:27,299 --> 00:21:29,039
your own or at least one that you

563
00:21:29,039 --> 00:21:31,860
inherently expect to be making a call to

564
00:21:31,860 --> 00:21:34,879
this SNS topic

565
00:21:35,720 --> 00:21:37,919
uh just a quick note on the bit of the

566
00:21:37,919 --> 00:21:39,120
top as well

567
00:21:39,120 --> 00:21:41,039
um so even though the principal is AWS

568
00:21:41,039 --> 00:21:42,240
star you may be looking at this thinking

569
00:21:42,240 --> 00:21:43,919
hang on a sec doesn't that still allow

570
00:21:43,919 --> 00:21:45,600
anybody to effectively interact with

571
00:21:45,600 --> 00:21:48,000
this SNS topic uh so no the conditional

572
00:21:48,000 --> 00:21:49,559
check at the bottom will kind of take

573
00:21:49,559 --> 00:21:51,900
priority over the uh over the wild card

574
00:21:51,900 --> 00:21:54,380
at the top

575
00:21:55,380 --> 00:21:57,600
uh further reading so we do appreciate

576
00:21:57,600 --> 00:21:59,400
that this is kind of like quite a lot to

577
00:21:59,400 --> 00:22:01,440
take down in one quick talk

578
00:22:01,440 --> 00:22:03,900
um so we do have a Blog that we

579
00:22:03,900 --> 00:22:05,460
published on the web secure lab site

580
00:22:05,460 --> 00:22:07,380
about this if you want to see some more

581
00:22:07,380 --> 00:22:09,480
kind of technical details and have a

582
00:22:09,480 --> 00:22:11,039
mess with the policies yourself in in

583
00:22:11,039 --> 00:22:14,100
AWS maybe we also want to give a shout

584
00:22:14,100 --> 00:22:16,820
out to datadog as they release the paper

585
00:22:16,820 --> 00:22:19,860
which was also touching on a very

586
00:22:19,860 --> 00:22:22,260
similar uh trust-based um resource-based

587
00:22:22,260 --> 00:22:25,080
policy uh kind of issue within the AWS

588
00:22:25,080 --> 00:22:27,539
apps link service and yeah there's a

589
00:22:27,539 --> 00:22:31,460
link to that in the slides as well

590
00:22:31,860 --> 00:22:34,919
so key takeaways from this well number

591
00:22:34,919 --> 00:22:37,740
one is automated tooling isn't really

592
00:22:37,740 --> 00:22:39,659
available to kind of detect this issue

593
00:22:39,659 --> 00:22:40,919
at the minute

594
00:22:40,919 --> 00:22:42,780
um IAM is quite a hard thing to get

595
00:22:42,780 --> 00:22:45,240
right in the cloud and automation isn't

596
00:22:45,240 --> 00:22:46,140
always

597
00:22:46,140 --> 00:22:48,840
uh does a good job at that either so I

598
00:22:48,840 --> 00:22:50,520
definitely want to watch out for

599
00:22:50,520 --> 00:22:52,679
in regards to sort of documentation from

600
00:22:52,679 --> 00:22:54,240
AWS as well

601
00:22:54,240 --> 00:22:56,220
um that is also a bit inconsistent so

602
00:22:56,220 --> 00:22:57,900
depending on the service that you're

603
00:22:57,900 --> 00:22:59,220
actually looking at

604
00:22:59,220 --> 00:23:00,720
um there may be warnings about this then

605
00:23:00,720 --> 00:23:03,179
maybe not uh specifically for example if

606
00:23:03,179 --> 00:23:05,340
you try and configure this uh like

607
00:23:05,340 --> 00:23:06,960
misconfigured resource-based policy in

608
00:23:06,960 --> 00:23:09,120
the console you may get a warning in

609
00:23:09,120 --> 00:23:11,340
some screens whereas if you use the CLI

610
00:23:11,340 --> 00:23:13,260
you'll get no warning at all so don't

611
00:23:13,260 --> 00:23:14,760
rely on the documentation from the cloud

612
00:23:14,760 --> 00:23:16,440
provider

613
00:23:16,440 --> 00:23:17,880
and whenever you do create

614
00:23:17,880 --> 00:23:20,220
resource-based policies ensure you know

615
00:23:20,220 --> 00:23:21,840
who you give information to so don't

616
00:23:21,840 --> 00:23:25,140
trust any defaults and just ensure if

617
00:23:25,140 --> 00:23:26,940
you are trusting a specific service for

618
00:23:26,940 --> 00:23:28,440
example ensure that there's an extra

619
00:23:28,440 --> 00:23:30,000
check on there just to make sure that

620
00:23:30,000 --> 00:23:32,340
nobody that you don't intend to interact

621
00:23:32,340 --> 00:23:34,880
with that will be able to

622
00:23:34,880 --> 00:23:37,500
wherever possible try and think about

623
00:23:37,500 --> 00:23:39,539
this in the design phase it's obviously

624
00:23:39,539 --> 00:23:42,600
a lot easier to fix this when it comes

625
00:23:42,600 --> 00:23:45,360
up in a in a sort of pre um assessment

626
00:23:45,360 --> 00:23:47,400
phase than it is after it's already been

627
00:23:47,400 --> 00:23:48,780
deployed to production and then there's

628
00:23:48,780 --> 00:23:50,520
a hundred change requests to get through

629
00:23:50,520 --> 00:23:53,039
etc etc so always try and think about

630
00:23:53,039 --> 00:23:54,480
these things before you actually push

631
00:23:54,480 --> 00:23:56,700
stuff into AWS

632
00:23:56,700 --> 00:23:58,799
um and yeah don't also assume that AWS

633
00:23:58,799 --> 00:24:01,679
has you covered for example if you put

634
00:24:01,679 --> 00:24:04,020
this like into your account they're not

635
00:24:04,020 --> 00:24:05,460
going to do anything to kind of warn you

636
00:24:05,460 --> 00:24:08,220
about it or stop you know an attack from

637
00:24:08,220 --> 00:24:09,900
it sort of happening

638
00:24:09,900 --> 00:24:12,240
um so yeah that's kind of on you

639
00:24:12,240 --> 00:24:14,820
um and just a final note that AWS are

640
00:24:14,820 --> 00:24:16,320
actually aware of this issue internally

641
00:24:16,320 --> 00:24:18,900
and they are working on some prevention

642
00:24:18,900 --> 00:24:21,120
methods what they are going to be we

643
00:24:21,120 --> 00:24:23,159
don't really know yet but um yeah they

644
00:24:23,159 --> 00:24:24,600
are aware of it and they are working on

645
00:24:24,600 --> 00:24:26,960
a solution

646
00:24:26,960 --> 00:24:29,520
so just to know if anyone does have any

647
00:24:29,520 --> 00:24:31,200
questions uh will kind of be available

648
00:24:31,200 --> 00:24:33,360
and around after the after the

649
00:24:33,360 --> 00:24:35,100
presentation so yeah just feel free to

650
00:24:35,100 --> 00:24:36,780
grab us and ask any kind of questions

651
00:24:36,780 --> 00:24:38,880
you've got and also just to reinstate

652
00:24:38,880 --> 00:24:40,919
there is the uh we're secure Labs post

653
00:24:40,919 --> 00:24:42,600
as well but any questions do feel free

654
00:24:42,600 --> 00:24:44,340
to ask

655
00:24:44,340 --> 00:24:45,840
um and with that thank you so much for

656
00:24:45,840 --> 00:24:46,679
listening

657
00:24:46,679 --> 00:24:49,820
thank you

