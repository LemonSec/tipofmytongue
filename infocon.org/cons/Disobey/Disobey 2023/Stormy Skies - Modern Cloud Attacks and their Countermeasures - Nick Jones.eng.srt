1
00:00:00,000 --> 00:00:16,760
[Music]

2
00:00:16,760 --> 00:00:17,960
thank you

3
00:00:17,960 --> 00:00:26,730
[Music]

4
00:00:27,960 --> 00:00:29,470
thank you

5
00:00:29,470 --> 00:00:36,510
[Music]

6
00:00:36,510 --> 00:00:39,920
[Applause]

7
00:00:42,120 --> 00:00:44,040
hi everyone I hope for the mics working

8
00:00:44,040 --> 00:00:45,840
yep sounds like it good

9
00:00:45,840 --> 00:00:48,420
thanks for joining us this afternoon I'm

10
00:00:48,420 --> 00:00:51,239
here to talk about cloud in general but

11
00:00:51,239 --> 00:00:53,520
more specifically what we're seeing

12
00:00:53,520 --> 00:00:55,500
happen in the wild to some degree and

13
00:00:55,500 --> 00:00:56,940
some interesting attack paths and things

14
00:00:56,940 --> 00:00:58,620
that we've been exploiting and trying to

15
00:00:58,620 --> 00:01:00,420
defend against for a while now

16
00:01:00,420 --> 00:01:01,739
so

17
00:01:01,739 --> 00:01:03,840
um first off I'm sure why this stuff

18
00:01:03,840 --> 00:01:05,280
matters probably isn't a surprise to

19
00:01:05,280 --> 00:01:07,320
many but there's a few uh interesting

20
00:01:07,320 --> 00:01:09,840
bits there too some common weak spots

21
00:01:09,840 --> 00:01:11,760
things organizations don't think about

22
00:01:11,760 --> 00:01:14,580
and where things tend to break down

23
00:01:14,580 --> 00:01:16,740
common breach scenarios both what we're

24
00:01:16,740 --> 00:01:18,420
seeing in the wild but also a lot of the

25
00:01:18,420 --> 00:01:20,520
more uh red team style things that we

26
00:01:20,520 --> 00:01:21,659
don't think the real world attackers

27
00:01:21,659 --> 00:01:23,700
have gotten onto yet expect to see that

28
00:01:23,700 --> 00:01:24,720
coming through in the next couple of

29
00:01:24,720 --> 00:01:27,420
years some bits on detection and that's

30
00:01:27,420 --> 00:01:28,979
always been my main focus historically

31
00:01:28,979 --> 00:01:31,380
so we'll dig into that too and lastly

32
00:01:31,380 --> 00:01:33,240
some tips on a few things to take away

33
00:01:33,240 --> 00:01:35,159
uh go check out for your own

34
00:01:35,159 --> 00:01:36,360
environments and make sure that you've

35
00:01:36,360 --> 00:01:38,840
got them down

36
00:01:39,060 --> 00:01:41,820
as to why I'm here and talking I'm a

37
00:01:41,820 --> 00:01:43,140
principal consultant and the cloud

38
00:01:43,140 --> 00:01:44,820
security lead at with secure just over

39
00:01:44,820 --> 00:01:45,900
there

40
00:01:45,900 --> 00:01:47,579
um AWS Community Builder when I'm not

41
00:01:47,579 --> 00:01:49,079
doing that I do a lot of stuff with AWS

42
00:01:49,079 --> 00:01:51,659
you might also see me at citysec Mayhem

43
00:01:51,659 --> 00:01:54,240
back in 2021 or or Tita a few years back

44
00:01:54,240 --> 00:01:55,500
as well

45
00:01:55,500 --> 00:01:57,780
had a good time there it was great

46
00:01:57,780 --> 00:01:58,619
um

47
00:01:58,619 --> 00:02:01,200
so I'll do a fair amount of cloud this

48
00:02:01,200 --> 00:02:03,000
is mostly going to focus on AWS just

49
00:02:03,000 --> 00:02:04,619
because that's what I know but a lot of

50
00:02:04,619 --> 00:02:06,060
what I'm talking about will apply

51
00:02:06,060 --> 00:02:09,239
equally to your Azure Estates your gcp I

52
00:02:09,239 --> 00:02:11,099
hope no one here is using IBM or Oracle

53
00:02:11,099 --> 00:02:13,739
but if you are my condolences

54
00:02:13,739 --> 00:02:14,459
um

55
00:02:14,459 --> 00:02:16,500
actually it's a show of hands who's got

56
00:02:16,500 --> 00:02:19,140
some AWS in their environments let's see

57
00:02:19,140 --> 00:02:20,340
how much

58
00:02:20,340 --> 00:02:21,660
all right so we've got quite a few

59
00:02:21,660 --> 00:02:24,780
people have poked at that azure

60
00:02:24,780 --> 00:02:25,860
okay

61
00:02:25,860 --> 00:02:27,900
smaller show of hands probably for the

62
00:02:27,900 --> 00:02:29,220
best given their record with o days

63
00:02:29,220 --> 00:02:30,540
lately

64
00:02:30,540 --> 00:02:32,220
but let's get started

65
00:02:32,220 --> 00:02:34,560
so I don't think it's a surprise to

66
00:02:34,560 --> 00:02:36,360
anyone that obviously this Cloud stuff's

67
00:02:36,360 --> 00:02:38,160
getting pretty big and I pulled some

68
00:02:38,160 --> 00:02:39,720
stats and some predictions on where this

69
00:02:39,720 --> 00:02:40,739
is going

70
00:02:40,739 --> 00:02:42,660
um the market this year they reckon's

71
00:02:42,660 --> 00:02:45,420
worth a half a trillion dollars now AWS

72
00:02:45,420 --> 00:02:46,560
themselves are probably going to

73
00:02:46,560 --> 00:02:49,200
generate about 100 billion in Revenue

74
00:02:49,200 --> 00:02:49,920
um

75
00:02:49,920 --> 00:02:51,420
the various parts of the market are

76
00:02:51,420 --> 00:02:53,160
changing at different rates though I'm

77
00:02:53,160 --> 00:02:54,720
mostly going to be focusing in on the

78
00:02:54,720 --> 00:02:56,099
cloud infrastructure end of things

79
00:02:56,099 --> 00:02:57,360
there's going to be a little bit of the

80
00:02:57,360 --> 00:02:58,560
software as a service stuff your

81
00:02:58,560 --> 00:03:00,959
Microsoft 365 and things but that's not

82
00:03:00,959 --> 00:03:02,700
really where my interests are expertise

83
00:03:02,700 --> 00:03:03,900
lie

84
00:03:03,900 --> 00:03:04,920
um

85
00:03:04,920 --> 00:03:06,840
obviously a lot of this data is

86
00:03:06,840 --> 00:03:08,700
predictive but AWS have been hitting

87
00:03:08,700 --> 00:03:10,560
about a 30 growth rate for the last 10

88
00:03:10,560 --> 00:03:13,140
years pretty reliably so it's probably

89
00:03:13,140 --> 00:03:15,540
not far off the problem though comes

90
00:03:15,540 --> 00:03:18,239
from a security perspective right a lot

91
00:03:18,239 --> 00:03:19,860
of the old pen testers look at it like

92
00:03:19,860 --> 00:03:21,180
this right the amount of times I've

93
00:03:21,180 --> 00:03:22,800
heard oh there is no Cloud it's someone

94
00:03:22,800 --> 00:03:24,599
else's computer

95
00:03:24,599 --> 00:03:26,280
it's not wrong but it does also

96
00:03:26,280 --> 00:03:28,319
completely miss the point and most of

97
00:03:28,319 --> 00:03:30,480
the attack paths rely on Technologies

98
00:03:30,480 --> 00:03:33,360
tricks things that didn't exist back in

99
00:03:33,360 --> 00:03:35,700
the old DC world and equally the other

100
00:03:35,700 --> 00:03:36,900
entertaining one when it comes to attack

101
00:03:36,900 --> 00:03:38,519
detection

102
00:03:38,519 --> 00:03:40,440
um you get organizations rolling out

103
00:03:40,440 --> 00:03:42,959
their EDR across their virtual machines

104
00:03:42,959 --> 00:03:45,480
in the cloud and you should you

105
00:03:45,480 --> 00:03:47,580
absolutely should do that but most Cloud

106
00:03:47,580 --> 00:03:49,319
attacks are only going to touch on that

107
00:03:49,319 --> 00:03:50,700
slightly or it's going to be a component

108
00:03:50,700 --> 00:03:52,680
of the attack path and if that's all the

109
00:03:52,680 --> 00:03:54,480
data you've got you're going to miss the

110
00:03:54,480 --> 00:03:56,459
vast majority of what's going on in your

111
00:03:56,459 --> 00:03:58,019
average Cloud attack there's a lot of

112
00:03:58,019 --> 00:03:59,819
other data sources and we'll get into

113
00:03:59,819 --> 00:04:02,480
that later on

114
00:04:03,360 --> 00:04:05,580
so when I say a lot of stuff's changed

115
00:04:05,580 --> 00:04:07,379
one of the big ones really is that when

116
00:04:07,379 --> 00:04:09,060
you start getting into kubernetes and

117
00:04:09,060 --> 00:04:11,480
serverless functions like Lambda on AWS

118
00:04:11,480 --> 00:04:13,680
there's no direct operating system

119
00:04:13,680 --> 00:04:16,019
access all of the the old tricks we used

120
00:04:16,019 --> 00:04:17,880
to use for inspecting what was going on

121
00:04:17,880 --> 00:04:20,339
most of that goes away

122
00:04:20,339 --> 00:04:21,720
um a lot of the networking change is

123
00:04:21,720 --> 00:04:23,460
really quite drastically you can't ask

124
00:04:23,460 --> 00:04:26,460
spoof in AWS because there is no op and

125
00:04:26,460 --> 00:04:28,800
so you often also lose visibility from a

126
00:04:28,800 --> 00:04:30,780
logging perspective because you can't

127
00:04:30,780 --> 00:04:32,340
intercept the traffic and monitor what's

128
00:04:32,340 --> 00:04:34,199
going into an S3 bucket there are

129
00:04:34,199 --> 00:04:35,400
alternative options but you've got to

130
00:04:35,400 --> 00:04:36,660
adapt for them

131
00:04:36,660 --> 00:04:38,880
application security is broadly still

132
00:04:38,880 --> 00:04:41,040
the same but vulnerability class is sort

133
00:04:41,040 --> 00:04:43,320
of changing importance a fair bit server

134
00:04:43,320 --> 00:04:44,940
side request forgery is the big one for

135
00:04:44,940 --> 00:04:46,380
stealing credentials

136
00:04:46,380 --> 00:04:49,639
um but there's a few others as well

137
00:04:49,860 --> 00:04:52,500
and from both an offensive and defensive

138
00:04:52,500 --> 00:04:54,060
perspective the way that organizations

139
00:04:54,060 --> 00:04:56,280
work with all this technology really

140
00:04:56,280 --> 00:04:58,740
affects how we can do security on them

141
00:04:58,740 --> 00:05:00,540
both from an offensive and a defensive

142
00:05:00,540 --> 00:05:01,800
perspective right

143
00:05:01,800 --> 00:05:03,300
um if you've got an organization who's

144
00:05:03,300 --> 00:05:05,280
set up really well with uh continuous

145
00:05:05,280 --> 00:05:07,740
integration and deployment it's easy to

146
00:05:07,740 --> 00:05:10,740
deploy lots of changes very rapidly so

147
00:05:10,740 --> 00:05:12,540
Netflix say they do hundreds of

148
00:05:12,540 --> 00:05:14,340
thousands of deployments a day Amazon

149
00:05:14,340 --> 00:05:16,979
reckon they push every 11.7 seconds into

150
00:05:16,979 --> 00:05:18,840
production on average so this stuff

151
00:05:18,840 --> 00:05:21,240
changes constantly doing a point in time

152
00:05:21,240 --> 00:05:23,280
pen test sort of pointless to a large

153
00:05:23,280 --> 00:05:25,620
degree right and from a persistence

154
00:05:25,620 --> 00:05:27,840
mechanism perspective how do you persist

155
00:05:27,840 --> 00:05:29,340
in a Lambda function that's only going

156
00:05:29,340 --> 00:05:30,900
to last for 10 minutes before it dies

157
00:05:30,900 --> 00:05:33,060
you can sit there and repeatedly exploit

158
00:05:33,060 --> 00:05:34,380
it every 10 minutes but that seems a

159
00:05:34,380 --> 00:05:36,240
little pointless and very noisy what

160
00:05:36,240 --> 00:05:37,680
we're seeing people do more instead is

161
00:05:37,680 --> 00:05:39,720
you look to immediately pivot out of the

162
00:05:39,720 --> 00:05:42,000
compute into the control plane layer the

163
00:05:42,000 --> 00:05:43,340
administrative functions of the cloud

164
00:05:43,340 --> 00:05:45,900
rather than stay inside the VMS or

165
00:05:45,900 --> 00:05:48,840
inside your kubernetes clusters and on

166
00:05:48,840 --> 00:05:50,340
that note a lot of your detection

167
00:05:50,340 --> 00:05:52,440
strategies change as I say and the big

168
00:05:52,440 --> 00:05:54,479
one is um a lot of the old monitoring

169
00:05:54,479 --> 00:05:57,419
say they support kubernetes in some way

170
00:05:57,419 --> 00:05:58,740
um I'm not going to name vendors but at

171
00:05:58,740 --> 00:06:00,360
least a couple of them their kubernetes

172
00:06:00,360 --> 00:06:01,979
support is their Linux agent that's

173
00:06:01,979 --> 00:06:04,320
completely unaware of kubernetes or

174
00:06:04,320 --> 00:06:06,180
containerization or anything else and

175
00:06:06,180 --> 00:06:08,880
marketing has just re-badged it right

176
00:06:08,880 --> 00:06:11,520
um equally incident response let's say

177
00:06:11,520 --> 00:06:13,440
you've identified a bunch of data's been

178
00:06:13,440 --> 00:06:15,180
stolen you're trying to do forensics and

179
00:06:15,180 --> 00:06:17,400
work out what actually happened and the

180
00:06:17,400 --> 00:06:19,620
initial breach Point turns out to be a

181
00:06:19,620 --> 00:06:21,300
virtual machine that was destroyed in a

182
00:06:21,300 --> 00:06:24,060
new deployment two weeks ago how do you

183
00:06:24,060 --> 00:06:25,740
do any forensics on that how do you

184
00:06:25,740 --> 00:06:27,539
maintain forensic artifacts for long

185
00:06:27,539 --> 00:06:29,220
enough that they can be useful should an

186
00:06:29,220 --> 00:06:31,919
investigation be necessary right the

187
00:06:31,919 --> 00:06:33,419
industry is starting to settle on some

188
00:06:33,419 --> 00:06:34,979
of these questions EDR supports getting

189
00:06:34,979 --> 00:06:36,539
better things like that but there's a

190
00:06:36,539 --> 00:06:39,800
lot of work still to do here

191
00:06:41,819 --> 00:06:44,280
common weak spots some of these will be

192
00:06:44,280 --> 00:06:46,259
familiar some of this might be might be

193
00:06:46,259 --> 00:06:48,300
new broadly speaking though when I work

194
00:06:48,300 --> 00:06:50,160
with organizations a lot of them think

195
00:06:50,160 --> 00:06:52,319
about their Cloud security inside

196
00:06:52,319 --> 00:06:55,139
specific boxes you've got a workload

197
00:06:55,139 --> 00:06:56,100
you're deploying we've got an

198
00:06:56,100 --> 00:06:58,020
application so someone's threat models

199
00:06:58,020 --> 00:06:59,400
the little box in which that application

200
00:06:59,400 --> 00:07:02,340
lives and it's one of 150 applications

201
00:07:02,340 --> 00:07:04,860
they've got running in AWS right

202
00:07:04,860 --> 00:07:06,360
um sometimes if they're thinking about

203
00:07:06,360 --> 00:07:08,039
these things in the right way that might

204
00:07:08,039 --> 00:07:09,419
also be including things like their

205
00:07:09,419 --> 00:07:11,160
source code Management Systems whatever

206
00:07:11,160 --> 00:07:13,080
deployment pipelines they've got going

207
00:07:13,080 --> 00:07:15,479
on that's less common than I'd like but

208
00:07:15,479 --> 00:07:16,800
some do

209
00:07:16,800 --> 00:07:17,940
um but generally the bigger picture

210
00:07:17,940 --> 00:07:20,580
isn't considered and even if we're only

211
00:07:20,580 --> 00:07:22,259
talking about a single cloud provider

212
00:07:22,259 --> 00:07:24,000
there's probably a bunch of other stuff

213
00:07:24,000 --> 00:07:25,440
to think about too

214
00:07:25,440 --> 00:07:27,660
in reality I don't think I've ever

215
00:07:27,660 --> 00:07:30,060
worked with a not startup that was only

216
00:07:30,060 --> 00:07:31,979
using one cloud provider does anyone

217
00:07:31,979 --> 00:07:33,240
here think they've only got one cloud

218
00:07:33,240 --> 00:07:36,240
provider in their organization

219
00:07:36,240 --> 00:07:38,520
we got one very brave hand down the

220
00:07:38,520 --> 00:07:40,020
front here

221
00:07:40,020 --> 00:07:42,720
um I would be surprised but hopefully

222
00:07:42,720 --> 00:07:44,759
for your sake that's true it's really

223
00:07:44,759 --> 00:07:47,220
really common to see either AWS or Azure

224
00:07:47,220 --> 00:07:48,660
is the primary

225
00:07:48,660 --> 00:07:50,460
um Google Cloud often hangs around as a

226
00:07:50,460 --> 00:07:51,720
secondary one because everyone wants

227
00:07:51,720 --> 00:07:53,819
kubernetes and their kubernetes supports

228
00:07:53,819 --> 00:07:54,780
better

229
00:07:54,780 --> 00:07:56,340
um then you'll have some poor sod who's

230
00:07:56,340 --> 00:07:58,319
got to deal with China and so there's a

231
00:07:58,319 --> 00:08:00,419
an Ali cloud or Huawei or something

232
00:08:00,419 --> 00:08:01,740
sitting in the corner that no one really

233
00:08:01,740 --> 00:08:04,139
knows what to do with and then your

234
00:08:04,139 --> 00:08:05,520
source code lives in GitHub you're

235
00:08:05,520 --> 00:08:07,800
pulling images down from Docker Hub uh

236
00:08:07,800 --> 00:08:09,720
all your stuff lives on Slack

237
00:08:09,720 --> 00:08:12,360
trying to adequately strap model and

238
00:08:12,360 --> 00:08:13,979
secure all of this stuff

239
00:08:13,979 --> 00:08:15,900
most organizations don't have the budget

240
00:08:15,900 --> 00:08:16,979
so you have to get better at

241
00:08:16,979 --> 00:08:19,500
prioritizing and the prioritization

242
00:08:19,500 --> 00:08:21,599
decisions I often see people make

243
00:08:21,599 --> 00:08:23,879
make some degree of sense but probably

244
00:08:23,879 --> 00:08:25,139
aren't the best ones they could be

245
00:08:25,139 --> 00:08:27,780
making they often Focus very heavily on

246
00:08:27,780 --> 00:08:30,060
the internet-facing public presence of

247
00:08:30,060 --> 00:08:32,339
the organization and not on all the

248
00:08:32,339 --> 00:08:33,479
places where the important stuff

249
00:08:33,479 --> 00:08:35,399
actually lives

250
00:08:35,399 --> 00:08:37,620
and to go along with that I'm sure this

251
00:08:37,620 --> 00:08:39,599
mostly won't be news to people but it's

252
00:08:39,599 --> 00:08:41,099
really common to see attackers pivoting

253
00:08:41,099 --> 00:08:43,679
around between environments right so

254
00:08:43,679 --> 00:08:45,600
um particularly common you start off

255
00:08:45,600 --> 00:08:47,459
with a phishing email to steal some

256
00:08:47,459 --> 00:08:49,440
credentials or to land some some malware

257
00:08:49,440 --> 00:08:51,480
as a foothold on an endpoint and then

258
00:08:51,480 --> 00:08:52,920
use that to Pivot up and compromise

259
00:08:52,920 --> 00:08:54,959
Cloud assets loads of people use active

260
00:08:54,959 --> 00:08:56,459
directory to authenticate to the cloud

261
00:08:56,459 --> 00:08:58,560
most people's active directory Estates

262
00:08:58,560 --> 00:09:00,300
probably aren't as well hardened as

263
00:09:00,300 --> 00:09:03,120
they'd like and so ad admin means Cloud

264
00:09:03,120 --> 00:09:06,300
admin off we go from there equally

265
00:09:06,300 --> 00:09:08,399
people put stupid stuff in S3 buckets

266
00:09:08,399 --> 00:09:10,260
and we did actually find a bunch of SSH

267
00:09:10,260 --> 00:09:12,480
private keys in in one bucket on an

268
00:09:12,480 --> 00:09:14,700
assessment and we use that to then jump

269
00:09:14,700 --> 00:09:16,800
into a bunch of servers in the cloud and

270
00:09:16,800 --> 00:09:18,420
then also actually

271
00:09:18,420 --> 00:09:20,700
um that allowed us to SSH into a box on

272
00:09:20,700 --> 00:09:22,380
their perimeter which then got us back

273
00:09:22,380 --> 00:09:25,080
down into their on-premises estate too

274
00:09:25,080 --> 00:09:27,000
um so attackers will try and pivot

275
00:09:27,000 --> 00:09:28,800
between environments like that and we're

276
00:09:28,800 --> 00:09:30,779
not seeing as much of it going from the

277
00:09:30,779 --> 00:09:33,000
cloud to on-premise the other way around

278
00:09:33,000 --> 00:09:34,740
um but that I expect to increase over

279
00:09:34,740 --> 00:09:37,399
the next few years

280
00:09:37,560 --> 00:09:40,500
so then common breach scenarios

281
00:09:40,500 --> 00:09:43,080
what are attackers really doing

282
00:09:43,080 --> 00:09:46,080
um good question and the blunt answer is

283
00:09:46,080 --> 00:09:48,180
I'm not convinced we know

284
00:09:48,180 --> 00:09:49,800
there are various breaches that get

285
00:09:49,800 --> 00:09:52,019
reported in the news but that's reliant

286
00:09:52,019 --> 00:09:54,360
on the attackers being noisy enough or

287
00:09:54,360 --> 00:09:55,860
the impact being severe enough that it

288
00:09:55,860 --> 00:09:57,779
gets reported and the organization

289
00:09:57,779 --> 00:09:59,700
wanting to report it or having to

290
00:09:59,700 --> 00:10:02,160
because gdpr or what have you and the

291
00:10:02,160 --> 00:10:04,080
providers hate talking about it with a

292
00:10:04,080 --> 00:10:06,779
passion if you go back to about 18

293
00:10:06,779 --> 00:10:09,000
months ago you wouldn't find a single

294
00:10:09,000 --> 00:10:11,160
mention of the word security incident in

295
00:10:11,160 --> 00:10:13,380
the AWS documentation or blog posts or

296
00:10:13,380 --> 00:10:15,060
anything because they were banned from

297
00:10:15,060 --> 00:10:16,440
using that expression

298
00:10:16,440 --> 00:10:18,000
thankfully they've gotten on board with

299
00:10:18,000 --> 00:10:19,260
it and you know things are changing

300
00:10:19,260 --> 00:10:21,180
attitudes are improving but it doesn't

301
00:10:21,180 --> 00:10:23,339
benefit the providers to publicize

302
00:10:23,339 --> 00:10:25,440
security incidents or to help people

303
00:10:25,440 --> 00:10:27,360
learn from them because it risks them

304
00:10:27,360 --> 00:10:29,339
scaring less mature organizations that

305
00:10:29,339 --> 00:10:30,839
oh you know hackers are breaking into

306
00:10:30,839 --> 00:10:32,820
the cloud it's all bad

307
00:10:32,820 --> 00:10:34,620
um equally there's a big focus on

308
00:10:34,620 --> 00:10:36,959
low-hanging fruit organizations look for

309
00:10:36,959 --> 00:10:38,339
the lowest common denominator the easy

310
00:10:38,339 --> 00:10:41,459
stuff to spot and so my expectation is

311
00:10:41,459 --> 00:10:43,800
that what we see is biased towards the

312
00:10:43,800 --> 00:10:45,540
simpler end of the spectrum and a lot of

313
00:10:45,540 --> 00:10:47,040
the cool stuff the interesting attacks

314
00:10:47,040 --> 00:10:49,680
isn't being spotted at present

315
00:10:49,680 --> 00:10:52,140
speaking of cool stuff though Cloud zero

316
00:10:52,140 --> 00:10:54,240
days this has really taken off over the

317
00:10:54,240 --> 00:10:56,579
last probably 12 months or so maybe 18

318
00:10:56,579 --> 00:10:57,899
months

319
00:10:57,899 --> 00:10:59,820
um there's a vulnerability database

320
00:10:59,820 --> 00:11:01,620
specifically for vulnerabilities in the

321
00:11:01,620 --> 00:11:03,839
cloud service providers AWS is here and

322
00:11:03,839 --> 00:11:04,800
the like

323
00:11:04,800 --> 00:11:06,839
um they're tracking over 120 that have

324
00:11:06,839 --> 00:11:09,180
been found of that that I'm aware of

325
00:11:09,180 --> 00:11:12,300
one's been exploited in the wild and no

326
00:11:12,300 --> 00:11:14,040
actual breaches or significant impact

327
00:11:14,040 --> 00:11:16,380
has been reported off that

328
00:11:16,380 --> 00:11:18,600
um you'll see the Israeli firms being

329
00:11:18,600 --> 00:11:20,459
the big names in this space whiz in

330
00:11:20,459 --> 00:11:21,959
particular are the 800 pound gorilla

331
00:11:21,959 --> 00:11:24,000
they've got a team of about 15 really

332
00:11:24,000 --> 00:11:25,800
really good researchers doing very

333
00:11:25,800 --> 00:11:27,779
interesting stuff and but like Spin and

334
00:11:27,779 --> 00:11:29,040
awkward have got some great people too

335
00:11:29,040 --> 00:11:31,019
and if this is a space you're interested

336
00:11:31,019 --> 00:11:32,279
in if you want to learn more about

337
00:11:32,279 --> 00:11:34,200
breaking Cloud providers

338
00:11:34,200 --> 00:11:36,420
um forward Cloud SEC 2022 the keynote

339
00:11:36,420 --> 00:11:39,360
from whiz there is all about how they go

340
00:11:39,360 --> 00:11:41,399
find all these o days and given their

341
00:11:41,399 --> 00:11:43,320
processes been producing probably one or

342
00:11:43,320 --> 00:11:45,360
two a month for about the last 12 months

343
00:11:45,360 --> 00:11:46,920
worth a watch

344
00:11:46,920 --> 00:11:48,480
that said

345
00:11:48,480 --> 00:11:50,519
not worth worrying about a present I

346
00:11:50,519 --> 00:11:51,839
expect that to change now that people

347
00:11:51,839 --> 00:11:53,040
are looking

348
00:11:53,040 --> 00:11:54,540
um but I just wouldn't worry about it

349
00:11:54,540 --> 00:11:55,860
really it's not worth including in the

350
00:11:55,860 --> 00:11:56,700
threat model for your average

351
00:11:56,700 --> 00:11:58,800
organization

352
00:11:58,800 --> 00:12:01,980
equally I'm not gonna spend any time

353
00:12:01,980 --> 00:12:03,540
talking about this really we've all seen

354
00:12:03,540 --> 00:12:04,980
all the news about all the open S3

355
00:12:04,980 --> 00:12:07,320
buckets over the years AWS is doing a

356
00:12:07,320 --> 00:12:09,300
lot to improve this situation things are

357
00:12:09,300 --> 00:12:11,279
private by default there's nice switches

358
00:12:11,279 --> 00:12:13,380
to turn on uh you know block Public

359
00:12:13,380 --> 00:12:16,019
Access for for all buckets in an account

360
00:12:16,019 --> 00:12:18,120
um if you're working in AWS double check

361
00:12:18,120 --> 00:12:19,320
that

362
00:12:19,320 --> 00:12:21,180
um block public bucket setting is turned

363
00:12:21,180 --> 00:12:23,519
on uh and then forget about this and

364
00:12:23,519 --> 00:12:26,160
move on to the interesting stuff really

365
00:12:26,160 --> 00:12:28,800
uh Rami McCarthy out in the US did a

366
00:12:28,800 --> 00:12:30,240
really interesting talk at Bayside San

367
00:12:30,240 --> 00:12:32,040
Francisco where he pulled together all

368
00:12:32,040 --> 00:12:34,620
the data he could from AWS based

369
00:12:34,620 --> 00:12:36,000
security incidents over the last 10

370
00:12:36,000 --> 00:12:37,079
years

371
00:12:37,079 --> 00:12:38,700
um and I'm going to shamelessly steal a

372
00:12:38,700 --> 00:12:40,260
bunch of his data and in fact his uh his

373
00:12:40,260 --> 00:12:42,720
graph here to talk about this

374
00:12:42,720 --> 00:12:45,240
um what we're seeing is uh so abusive

375
00:12:45,240 --> 00:12:47,100
stolen abuse of valid is referring to

376
00:12:47,100 --> 00:12:49,920
credentials the majority of attacks are

377
00:12:49,920 --> 00:12:51,600
somehow tied into credentials that have

378
00:12:51,600 --> 00:12:53,579
been compromised or abused in some

379
00:12:53,579 --> 00:12:55,380
fashion there's a reasonable amount of

380
00:12:55,380 --> 00:12:57,779
application exploitation going on

381
00:12:57,779 --> 00:13:00,300
um the other interesting one there is S3

382
00:13:00,300 --> 00:13:02,639
Global right access

383
00:13:02,639 --> 00:13:04,800
um so this is being used for major cart

384
00:13:04,800 --> 00:13:06,660
style attacks to embed malicious

385
00:13:06,660 --> 00:13:08,339
JavaScript into websites to either

386
00:13:08,339 --> 00:13:10,560
crypto mine or steal credit card info or

387
00:13:10,560 --> 00:13:12,240
all these kinds of things

388
00:13:12,240 --> 00:13:13,680
that's happening more than I would

389
00:13:13,680 --> 00:13:15,240
expect you've got to screw things up

390
00:13:15,240 --> 00:13:16,980
quite bad before you have Global right

391
00:13:16,980 --> 00:13:18,839
on an S3 bucket

392
00:13:18,839 --> 00:13:20,700
um so yeah that's a bit of an

393
00:13:20,700 --> 00:13:23,160
achievement in in some ways

394
00:13:23,160 --> 00:13:24,660
but then in terms of what we've been

395
00:13:24,660 --> 00:13:26,760
doing on our engagements um what I'm

396
00:13:26,760 --> 00:13:27,959
starting to hear some of the red teams

397
00:13:27,959 --> 00:13:29,459
doing this sort of thing

398
00:13:29,459 --> 00:13:31,500
um credential abuse much like real world

399
00:13:31,500 --> 00:13:33,839
attackers that's the the big one

400
00:13:33,839 --> 00:13:35,519
um pivoting in from on-premises as I

401
00:13:35,519 --> 00:13:37,560
talked about if you're working in an

402
00:13:37,560 --> 00:13:38,940
organization that's still very hybrid

403
00:13:38,940 --> 00:13:40,560
there's a lot of Legacy windows and

404
00:13:40,560 --> 00:13:42,480
active directory and things

405
00:13:42,480 --> 00:13:45,000
um the usual play on a red team is do

406
00:13:45,000 --> 00:13:47,339
all of the old stuff on premises steal

407
00:13:47,339 --> 00:13:48,959
the administrative access and then pivot

408
00:13:48,959 --> 00:13:50,880
into the cloud from there

409
00:13:50,880 --> 00:13:52,740
um source code management GitHub Etc

410
00:13:52,740 --> 00:13:54,540
continuous delivery

411
00:13:54,540 --> 00:13:56,519
um that is my personal favorite and what

412
00:13:56,519 --> 00:13:57,720
I'll be spending a bunch of time talking

413
00:13:57,720 --> 00:13:58,920
about

414
00:13:58,920 --> 00:14:01,019
um and then people still build

415
00:14:01,019 --> 00:14:03,060
vulnerable applications those still get

416
00:14:03,060 --> 00:14:04,440
popped people still exploit

417
00:14:04,440 --> 00:14:05,639
infrastructure in much the same way

418
00:14:05,639 --> 00:14:07,380
there

419
00:14:07,380 --> 00:14:10,200
so then for those who are perhaps less

420
00:14:10,200 --> 00:14:11,880
familiar with um the source code

421
00:14:11,880 --> 00:14:13,320
management and continuous delivery

422
00:14:13,320 --> 00:14:15,720
attack path the core of this is you have

423
00:14:15,720 --> 00:14:18,180
a setup where you've got some production

424
00:14:18,180 --> 00:14:19,620
workloads in the cloud or maybe

425
00:14:19,620 --> 00:14:21,240
on-premises even

426
00:14:21,240 --> 00:14:23,519
um and we have something storing all the

427
00:14:23,519 --> 00:14:24,959
source code and then automatically

428
00:14:24,959 --> 00:14:27,120
building and deploying changes out into

429
00:14:27,120 --> 00:14:29,639
production as developers make them now

430
00:14:29,639 --> 00:14:31,740
the key thing here is as an attacker if

431
00:14:31,740 --> 00:14:33,000
I have right access to your code

432
00:14:33,000 --> 00:14:35,279
repositories or I can manipulate what's

433
00:14:35,279 --> 00:14:36,959
going on in those pipelines or in fact

434
00:14:36,959 --> 00:14:38,339
just steal the credentials straight out

435
00:14:38,339 --> 00:14:40,740
of them then it doesn't matter what

436
00:14:40,740 --> 00:14:42,000
you've got in production doesn't matter

437
00:14:42,000 --> 00:14:43,980
how well hardened that is because if I

438
00:14:43,980 --> 00:14:45,240
can compromise everything that's

439
00:14:45,240 --> 00:14:47,519
deploying to production then it's

440
00:14:47,519 --> 00:14:49,019
usually game over those pipelines

441
00:14:49,019 --> 00:14:50,459
usually have an incredible level of

442
00:14:50,459 --> 00:14:52,440
privilege and so if I can get in there

443
00:14:52,440 --> 00:14:55,040
that's it

444
00:14:56,940 --> 00:14:59,040
so

445
00:14:59,040 --> 00:15:00,959
example attack pass and some tips and

446
00:15:00,959 --> 00:15:02,160
tricks the tips and tricks I'm mostly

447
00:15:02,160 --> 00:15:04,440
going to focus on on AWS but these broad

448
00:15:04,440 --> 00:15:06,360
attack paths apply everywhere pretty

449
00:15:06,360 --> 00:15:08,160
equally and most of what we're talking

450
00:15:08,160 --> 00:15:10,500
about here will apply in some fashion

451
00:15:10,500 --> 00:15:14,220
tweet to Azure just as well right so as

452
00:15:14,220 --> 00:15:16,500
I say credential theft's the big one

453
00:15:16,500 --> 00:15:18,420
um Verizon's data breach reports for the

454
00:15:18,420 --> 00:15:19,620
last several years have been guessing

455
00:15:19,620 --> 00:15:22,139
about the sort of 70 Mark and so that

456
00:15:22,139 --> 00:15:24,600
backs up ramy's data from before

457
00:15:24,600 --> 00:15:27,000
um the usual options here credentials in

458
00:15:27,000 --> 00:15:29,040
public repositories if you're pushing

459
00:15:29,040 --> 00:15:31,440
stuff up to GitHub with credentials in

460
00:15:31,440 --> 00:15:33,779
GitHub actually had to introduce a delay

461
00:15:33,779 --> 00:15:36,000
on the open source fire hose feed where

462
00:15:36,000 --> 00:15:37,320
you see all the the public commits

463
00:15:37,320 --> 00:15:39,600
because a lot of crypto mining

464
00:15:39,600 --> 00:15:42,600
organizations were monitoring that feed

465
00:15:42,600 --> 00:15:44,459
scanning every single commit that was

466
00:15:44,459 --> 00:15:46,019
being made into repositories for things

467
00:15:46,019 --> 00:15:48,240
that looked like AWS Keys then they had

468
00:15:48,240 --> 00:15:50,399
their own cicd pipelines that took those

469
00:15:50,399 --> 00:15:52,079
keys and immediately deployed crypto

470
00:15:52,079 --> 00:15:54,000
miners so the time between those

471
00:15:54,000 --> 00:15:55,920
credentials being spotted and an active

472
00:15:55,920 --> 00:15:58,019
crypto Miner being put in an account in

473
00:15:58,019 --> 00:15:59,459
a lot of cases was down to under a

474
00:15:59,459 --> 00:16:00,240
minute

475
00:16:00,240 --> 00:16:02,519
so GitHub now have a five minute delay

476
00:16:02,519 --> 00:16:04,079
on that feed and they've also worked

477
00:16:04,079 --> 00:16:05,820
with AWS to build a bunch of AWS

478
00:16:05,820 --> 00:16:07,740
specific tooling so that AWS Auto

479
00:16:07,740 --> 00:16:09,300
revoked credentials that are found in

480
00:16:09,300 --> 00:16:11,100
public GitHub repositories you get a

481
00:16:11,100 --> 00:16:12,660
nice email saying please don't do that

482
00:16:12,660 --> 00:16:15,360
again but

483
00:16:15,360 --> 00:16:17,699
that's only for AWS right um a lot of

484
00:16:17,699 --> 00:16:18,839
other credential types aren't being

485
00:16:18,839 --> 00:16:20,760
monitored for like that

486
00:16:20,760 --> 00:16:23,040
um if you can break a web app and start

487
00:16:23,040 --> 00:16:24,300
sealing the credentials that that's

488
00:16:24,300 --> 00:16:25,680
using to talk to all the other Cloud

489
00:16:25,680 --> 00:16:27,480
assets that's a great way to get some

490
00:16:27,480 --> 00:16:29,220
credentials too pretty much everything

491
00:16:29,220 --> 00:16:30,959
you run in the cloud as an application

492
00:16:30,959 --> 00:16:34,560
is somehow talking to S3 buckets or some

493
00:16:34,560 --> 00:16:36,180
managed queue somewhere or a managed

494
00:16:36,180 --> 00:16:38,699
database server and those credential

495
00:16:38,699 --> 00:16:40,500
Management systems are pretty well built

496
00:16:40,500 --> 00:16:42,300
by the cloud providers but obviously if

497
00:16:42,300 --> 00:16:43,740
the application can get to them and you

498
00:16:43,740 --> 00:16:45,540
compromise the application you've got

499
00:16:45,540 --> 00:16:49,259
them to and lastly obviously phishing

500
00:16:49,259 --> 00:16:51,600
still happens it still works I'll get

501
00:16:51,600 --> 00:16:53,220
into some interesting more Cloud native

502
00:16:53,220 --> 00:16:56,899
phishing stuff a little bit later on

503
00:16:57,060 --> 00:16:57,779
um

504
00:16:57,779 --> 00:16:59,339
all of these attack paths I'm going to

505
00:16:59,339 --> 00:17:00,959
talk about they're Composites of things

506
00:17:00,959 --> 00:17:03,060
we've done for specific clients are very

507
00:17:03,060 --> 00:17:04,199
deliberately chopped and changed and

508
00:17:04,199 --> 00:17:05,760
move things around so that we're not um

509
00:17:05,760 --> 00:17:07,199
you know not releasing anything we

510
00:17:07,199 --> 00:17:08,760
shouldn't be and but this is all stuff

511
00:17:08,760 --> 00:17:10,980
from The Real World right so

512
00:17:10,980 --> 00:17:12,299
some kind of initial credential

513
00:17:12,299 --> 00:17:14,579
compromise let's say access keys in this

514
00:17:14,579 --> 00:17:16,559
case from a GitHub repository

515
00:17:16,559 --> 00:17:17,400
um but there are a lot of different

516
00:17:17,400 --> 00:17:19,380
things that would work here

517
00:17:19,380 --> 00:17:20,760
um

518
00:17:20,760 --> 00:17:22,199
from there obviously we've got some

519
00:17:22,199 --> 00:17:23,939
creds what are they what do they work

520
00:17:23,939 --> 00:17:25,980
with uh how do we work out what we can

521
00:17:25,980 --> 00:17:27,419
do with them ideally without getting

522
00:17:27,419 --> 00:17:29,640
spotted by the sock

523
00:17:29,640 --> 00:17:31,919
from that then a reconnaissance

524
00:17:31,919 --> 00:17:33,540
perspective there's a lot of things you

525
00:17:33,540 --> 00:17:36,059
can do a lot of it's quite noisy

526
00:17:36,059 --> 00:17:37,679
um by default or other Cloud stuff's

527
00:17:37,679 --> 00:17:39,120
quite locked down

528
00:17:39,120 --> 00:17:40,620
um so a lot of the old school Recon

529
00:17:40,620 --> 00:17:42,179
techniques don't really apply Much

530
00:17:42,179 --> 00:17:43,559
Anymore

531
00:17:43,559 --> 00:17:46,740
um but there's then a bunch of ways to

532
00:17:46,740 --> 00:17:48,419
use those Cloud credentials to start

533
00:17:48,419 --> 00:17:50,940
running your shells on on Virtual

534
00:17:50,940 --> 00:17:53,220
machines and at that point let's say for

535
00:17:53,220 --> 00:17:54,660
the sake of this

536
00:17:54,660 --> 00:17:56,940
um our end of our attack pass is uh

537
00:17:56,940 --> 00:17:58,980
route on an ec2 instance that's uh

538
00:17:58,980 --> 00:18:00,419
running some kind of database full of

539
00:18:00,419 --> 00:18:02,220
sensitive data Etc

540
00:18:02,220 --> 00:18:05,220
so we've got these access keys

541
00:18:05,220 --> 00:18:08,280
first off which AWS account are we in

542
00:18:08,280 --> 00:18:09,539
now

543
00:18:09,539 --> 00:18:11,640
my favorite way of doing this is with

544
00:18:11,640 --> 00:18:14,460
the STS get access key info command if

545
00:18:14,460 --> 00:18:16,320
you have your own AWS account configured

546
00:18:16,320 --> 00:18:18,240
and you pass it the ID of another access

547
00:18:18,240 --> 00:18:20,880
key AWS will tell you what account that

548
00:18:20,880 --> 00:18:23,220
belongs to in a way that doesn't record

549
00:18:23,220 --> 00:18:25,260
that to the account you're asking about

550
00:18:25,260 --> 00:18:28,320
right it logs into your cloudtrail which

551
00:18:28,320 --> 00:18:31,020
is the AWS audit logging system not the

552
00:18:31,020 --> 00:18:32,280
target accounts

553
00:18:32,280 --> 00:18:35,160
so there are a number of public lists on

554
00:18:35,160 --> 00:18:37,440
the internet as to what account IDs are

555
00:18:37,440 --> 00:18:39,900
owned by what organization it's unlikely

556
00:18:39,900 --> 00:18:41,880
you'll find the account ID in there but

557
00:18:41,880 --> 00:18:43,200
at least if you're on a security

558
00:18:43,200 --> 00:18:44,940
engagement where you're testing this

559
00:18:44,940 --> 00:18:46,440
stuff you've got an idea if you're still

560
00:18:46,440 --> 00:18:48,059
in scope or not right it allows us to

561
00:18:48,059 --> 00:18:50,340
rule things out

562
00:18:50,340 --> 00:18:52,500
then what are the credentials or who are

563
00:18:52,500 --> 00:18:54,360
the credentials for rather and the

564
00:18:54,360 --> 00:18:56,160
classic one with this is AWS STS get

565
00:18:56,160 --> 00:18:58,440
caller identity you can't block this

566
00:18:58,440 --> 00:19:00,900
it's a inherently granted permission

567
00:19:00,900 --> 00:19:03,840
effectively uh inside AWS so this will

568
00:19:03,840 --> 00:19:05,100
always work

569
00:19:05,100 --> 00:19:08,340
and what you get back is uh the user's

570
00:19:08,340 --> 00:19:11,419
ID the account in AWS that it's tied to

571
00:19:11,419 --> 00:19:14,840
and uh the arm the Amazon resource name

572
00:19:14,840 --> 00:19:19,140
uh for the user but

573
00:19:19,140 --> 00:19:21,120
this might well get you caught it logs

574
00:19:21,120 --> 00:19:23,100
to their cloud trail it's pretty noisy

575
00:19:23,100 --> 00:19:24,900
just purely monitoring on this so a lot

576
00:19:24,900 --> 00:19:26,340
of organizations discard all those

577
00:19:26,340 --> 00:19:28,860
events by default but depending on the

578
00:19:28,860 --> 00:19:30,240
nature of your environment it's often

579
00:19:30,240 --> 00:19:32,220
possible to whitelist out the noisy ones

580
00:19:32,220 --> 00:19:33,480
so that actually you can get a

581
00:19:33,480 --> 00:19:35,059
reasonable amount of fidelity off this

582
00:19:35,059 --> 00:19:37,860
and this is the classic like you know

583
00:19:37,860 --> 00:19:39,660
hackerel security consultant gets his

584
00:19:39,660 --> 00:19:41,580
hands on some keys what do we do we run

585
00:19:41,580 --> 00:19:42,840
that

586
00:19:42,840 --> 00:19:45,419
the better option is

587
00:19:45,419 --> 00:19:48,360
AWS by default with cloudtrail logs

588
00:19:48,360 --> 00:19:50,340
management events so

589
00:19:50,340 --> 00:19:52,440
um create red destroy that sort of thing

590
00:19:52,440 --> 00:19:55,200
on the resources themselves it doesn't

591
00:19:55,200 --> 00:19:57,480
monitor for data level events where

592
00:19:57,480 --> 00:19:58,799
you're reading and writing to and from

593
00:19:58,799 --> 00:20:00,840
S3 buckets or cues or things like that

594
00:20:00,840 --> 00:20:02,520
you have to specifically enable those

595
00:20:02,520 --> 00:20:05,640
and as of December last year at least

596
00:20:05,640 --> 00:20:09,299
um the publish uh command for SNS didn't

597
00:20:09,299 --> 00:20:10,679
actually log to Cloud trial if it didn't

598
00:20:10,679 --> 00:20:14,940
work so what you can do is you can write

599
00:20:14,940 --> 00:20:17,940
to a topic that doesn't exist with the

600
00:20:17,940 --> 00:20:19,500
credentials that you've just found and

601
00:20:19,500 --> 00:20:23,820
what AWS gives you back is the on from

602
00:20:23,820 --> 00:20:25,799
the previous screen of the credentials

603
00:20:25,799 --> 00:20:27,120
that you've got tells you that you're

604
00:20:27,120 --> 00:20:28,860
not authorized to perform it and so that

605
00:20:28,860 --> 00:20:30,780
tells you who you are but in a way that

606
00:20:30,780 --> 00:20:33,299
isn't logged anywhere so that's my

607
00:20:33,299 --> 00:20:34,799
preferred go-to for that it's a nice

608
00:20:34,799 --> 00:20:36,360
little trick there

609
00:20:36,360 --> 00:20:38,820
and so now we've got some credentials we

610
00:20:38,820 --> 00:20:40,440
think they work because it's tied into

611
00:20:40,440 --> 00:20:42,600
something we've not got a a message back

612
00:20:42,600 --> 00:20:44,700
saying these creds aren't valid anymore

613
00:20:44,700 --> 00:20:46,559
um what do we do next we could start

614
00:20:46,559 --> 00:20:48,120
poking around from the perspective of

615
00:20:48,120 --> 00:20:49,620
those credentials but it's usually

616
00:20:49,620 --> 00:20:51,419
something I avoid doing and the main

617
00:20:51,419 --> 00:20:52,980
reason for that is anything you do from

618
00:20:52,980 --> 00:20:54,539
that point forward if the blue team is

619
00:20:54,539 --> 00:20:55,799
paying attention to their cloud trail

620
00:20:55,799 --> 00:20:58,140
logs they're going to see it any get

621
00:20:58,140 --> 00:21:00,179
list described you know what S3 buckets

622
00:21:00,179 --> 00:21:01,740
have I got what ec2 instances are

623
00:21:01,740 --> 00:21:03,539
running that all gets logged and if

624
00:21:03,539 --> 00:21:04,799
someone's paying attention could get you

625
00:21:04,799 --> 00:21:07,799
spotted so to start with

626
00:21:07,799 --> 00:21:09,299
we want to do what we can from an

627
00:21:09,299 --> 00:21:10,980
unauthenticated perspective so that it

628
00:21:10,980 --> 00:21:12,780
doesn't turn up in their logs

629
00:21:12,780 --> 00:21:14,700
it turns out there are actually some

630
00:21:14,700 --> 00:21:17,100
ways to find

631
00:21:17,100 --> 00:21:19,559
AWS users and roles in ways that don't

632
00:21:19,559 --> 00:21:20,880
log

633
00:21:20,880 --> 00:21:22,860
um you can do that without any AWS

634
00:21:22,860 --> 00:21:25,140
credentials at all quite often but in

635
00:21:25,140 --> 00:21:26,460
this particular case the trick is

636
00:21:26,460 --> 00:21:29,539
basically when you try and save an AWS

637
00:21:29,539 --> 00:21:32,760
policy of some sort on a resource or on

638
00:21:32,760 --> 00:21:34,740
an iron entity and you have that

639
00:21:34,740 --> 00:21:36,299
principle field you can see there in the

640
00:21:36,299 --> 00:21:36,900
middle

641
00:21:36,900 --> 00:21:39,059
AWS won't let you save it if the

642
00:21:39,059 --> 00:21:40,620
principal is invalid so you can

643
00:21:40,620 --> 00:21:42,659
essentially Brute Force the AWS apis

644
00:21:42,659 --> 00:21:44,580
brute forcing a bunch of different role

645
00:21:44,580 --> 00:21:46,980
names and usernames and see what comes

646
00:21:46,980 --> 00:21:50,039
back as uh you know a successful save

647
00:21:50,039 --> 00:21:51,480
obviously doing that manually is pretty

648
00:21:51,480 --> 00:21:54,419
bloody tedious so instead um Quiet Riot

649
00:21:54,419 --> 00:21:55,799
is something that someone built to do

650
00:21:55,799 --> 00:21:57,179
that at scale with a ton of threads

651
00:21:57,179 --> 00:21:58,740
against a bunch of different AWS

652
00:21:58,740 --> 00:22:00,419
services at once

653
00:22:00,419 --> 00:22:03,000
um and equally paku which is sort of the

654
00:22:03,000 --> 00:22:05,820
Metasploit ish for AWS has some modules

655
00:22:05,820 --> 00:22:07,980
for doing it too that said both of these

656
00:22:07,980 --> 00:22:10,320
take forever generally

657
00:22:10,320 --> 00:22:12,240
um it's not somewhere I'd usually start

658
00:22:12,240 --> 00:22:13,440
or I'd leave it running in the

659
00:22:13,440 --> 00:22:15,240
background while I went poking around in

660
00:22:15,240 --> 00:22:16,500
whatever code repositories I've got

661
00:22:16,500 --> 00:22:18,720
access to to look at the infrastructure

662
00:22:18,720 --> 00:22:20,580
as code definitions that have built all

663
00:22:20,580 --> 00:22:22,080
this Cloud stuff it'll have loads of

664
00:22:22,080 --> 00:22:23,820
role names and things in probably so you

665
00:22:23,820 --> 00:22:25,860
can get an idea of of what you might be

666
00:22:25,860 --> 00:22:27,360
looking at

667
00:22:27,360 --> 00:22:30,539
the other trick with AWS here is that

668
00:22:30,539 --> 00:22:32,520
while it's really hard for us to work

669
00:22:32,520 --> 00:22:34,919
out what resources specifically belong

670
00:22:34,919 --> 00:22:36,659
to which accounts from the outside right

671
00:22:36,659 --> 00:22:37,980
you can't do that with S3 buckets

672
00:22:37,980 --> 00:22:40,679
unauthenticated and we can work out

673
00:22:40,679 --> 00:22:42,780
probably what services are being run in

674
00:22:42,780 --> 00:22:44,940
the account because the role names from

675
00:22:44,940 --> 00:22:47,100
the previous step a lot of AWS Services

676
00:22:47,100 --> 00:22:48,900
have what's called a service link role

677
00:22:48,900 --> 00:22:51,120
which is created when you create the

678
00:22:51,120 --> 00:22:53,700
first resource in that service so if you

679
00:22:53,700 --> 00:22:55,500
brute force for the list of AWS service

680
00:22:55,500 --> 00:22:57,600
link role names you can get an idea of

681
00:22:57,600 --> 00:22:59,039
what services are deployed in a given

682
00:22:59,039 --> 00:23:01,220
account

683
00:23:01,380 --> 00:23:02,880
um so that's that's often how we we

684
00:23:02,880 --> 00:23:04,320
guess this stuff right

685
00:23:04,320 --> 00:23:05,940
for Azure you don't actually have to

686
00:23:05,940 --> 00:23:07,860
worry about any of this sneaky sneaky

687
00:23:07,860 --> 00:23:09,720
stuff because they don't currently log

688
00:23:09,720 --> 00:23:12,179
read-only events to their audit logs

689
00:23:12,179 --> 00:23:13,919
it's only things that change stuff or at

690
00:23:13,919 --> 00:23:15,539
least last silence

691
00:23:15,539 --> 00:23:17,220
um so we know they've got the data at

692
00:23:17,220 --> 00:23:18,299
least a couple of my clients have seen

693
00:23:18,299 --> 00:23:19,919
them working with it internally but they

694
00:23:19,919 --> 00:23:21,539
don't expose it through their audit logs

695
00:23:21,539 --> 00:23:23,820
certainly didn't last I looked

696
00:23:23,820 --> 00:23:25,919
um so more of a problem in AWS than

697
00:23:25,919 --> 00:23:27,419
azure

698
00:23:27,419 --> 00:23:29,039
but in the case of this particular

699
00:23:29,039 --> 00:23:30,179
attack path

700
00:23:30,179 --> 00:23:31,380
um one of the service link roles that

701
00:23:31,380 --> 00:23:33,659
we're going to discover is for AWS

702
00:23:33,659 --> 00:23:36,659
systems manager which is an agent-based

703
00:23:36,659 --> 00:23:38,280
thing that runs on your virtual machines

704
00:23:38,280 --> 00:23:41,580
in AWS and allows you to do things like

705
00:23:41,580 --> 00:23:43,919
um automated patching Inventory

706
00:23:43,919 --> 00:23:46,380
management all of these good things so

707
00:23:46,380 --> 00:23:48,600
it's pretty common to see it used it

708
00:23:48,600 --> 00:23:50,940
also provides the wonderfully named AWS

709
00:23:50,940 --> 00:23:53,159
systems manager session manager that are

710
00:23:53,159 --> 00:23:54,059
what they were drinking when they came

711
00:23:54,059 --> 00:23:55,980
up with that one that allows you to

712
00:23:55,980 --> 00:23:58,020
execute commands directly on the box

713
00:23:58,020 --> 00:24:01,020
through the agent this is actually quite

714
00:24:01,020 --> 00:24:02,520
common to see these days because it

715
00:24:02,520 --> 00:24:04,440
allows you to execute commands through

716
00:24:04,440 --> 00:24:06,600
the AWS apis without having to expose a

717
00:24:06,600 --> 00:24:07,980
jump box or anything like that to the

718
00:24:07,980 --> 00:24:10,500
outside world downside is obviously if

719
00:24:10,500 --> 00:24:12,179
you get AWS creds that have got these

720
00:24:12,179 --> 00:24:13,919
rights you've got code exec everywhere

721
00:24:13,919 --> 00:24:16,380
so you can either execute arbitrary

722
00:24:16,380 --> 00:24:19,200
commands through it or there's a start

723
00:24:19,200 --> 00:24:20,760
session command and you give it the

724
00:24:20,760 --> 00:24:23,220
instance you want to talk to and and you

725
00:24:23,220 --> 00:24:24,960
get a usually a root Shell through that

726
00:24:24,960 --> 00:24:27,419
by by default I think you've got to have

727
00:24:27,419 --> 00:24:29,940
certain roles configured on the ec2

728
00:24:29,940 --> 00:24:31,919
instances in order for all of this to

729
00:24:31,919 --> 00:24:34,020
work but if an administrator's gone to

730
00:24:34,020 --> 00:24:35,400
the trouble of deploying the agents and

731
00:24:35,400 --> 00:24:37,260
is using this service you've got about a

732
00:24:37,260 --> 00:24:39,600
95 chance that these commands are going

733
00:24:39,600 --> 00:24:42,080
to work for you

734
00:24:42,179 --> 00:24:44,100
so that's the first one

735
00:24:44,100 --> 00:24:46,919
um now looking more at the sort of

736
00:24:46,919 --> 00:24:48,900
devops tooling end of things

737
00:24:48,900 --> 00:24:49,740
um

738
00:24:49,740 --> 00:24:51,960
for this one we're going to say that we

739
00:24:51,960 --> 00:24:53,580
fish the developer

740
00:24:53,580 --> 00:24:55,740
um and we're in a position to steal the

741
00:24:55,740 --> 00:24:57,299
single sign-on cookie that they've got

742
00:24:57,299 --> 00:24:59,039
saved in their browser right

743
00:24:59,039 --> 00:25:00,780
um from there that gives us default

744
00:25:00,780 --> 00:25:02,340
developer access to their GitHub

745
00:25:02,340 --> 00:25:04,080
repositories obviously developers are

746
00:25:04,080 --> 00:25:05,100
going to do their work they're going to

747
00:25:05,100 --> 00:25:06,840
have some access here

748
00:25:06,840 --> 00:25:09,840
um we open a malicious pull request from

749
00:25:09,840 --> 00:25:11,100
that point

750
00:25:11,100 --> 00:25:12,539
um because a lot of the tools used with

751
00:25:12,539 --> 00:25:14,340
terraform in particular which is a

752
00:25:14,340 --> 00:25:15,659
really popular infrastructure as code

753
00:25:15,659 --> 00:25:17,700
language for those not familiar

754
00:25:17,700 --> 00:25:20,220
um they work in a way that allows us to

755
00:25:20,220 --> 00:25:22,020
essentially gain code execution without

756
00:25:22,020 --> 00:25:24,179
anything ever being approved or merged

757
00:25:24,179 --> 00:25:26,220
in and we'll get to how that works in a

758
00:25:26,220 --> 00:25:28,500
second and so from there that gets us a

759
00:25:28,500 --> 00:25:30,000
bunch of credentials

760
00:25:30,000 --> 00:25:31,679
um and in the case of the client

761
00:25:31,679 --> 00:25:33,059
engagement the last time I pulled this

762
00:25:33,059 --> 00:25:33,960
off

763
00:25:33,960 --> 00:25:35,159
um we ended up with administrative

764
00:25:35,159 --> 00:25:36,960
access over their production AWS account

765
00:25:36,960 --> 00:25:39,299
uh sort of almost by accident I'd ask

766
00:25:39,299 --> 00:25:42,179
them what this uh AWS account ID was for

767
00:25:42,179 --> 00:25:45,480
and got some very nervous responses back

768
00:25:45,480 --> 00:25:48,419
um so first up Cloud native phishing

769
00:25:48,419 --> 00:25:50,700
for a lot of smaller organizations or

770
00:25:50,700 --> 00:25:52,799
newer organizations there's no active

771
00:25:52,799 --> 00:25:54,360
director anymore right there's no point

772
00:25:54,360 --> 00:25:55,799
in running all of that if you don't need

773
00:25:55,799 --> 00:25:58,140
to and these days sometimes you'll see a

774
00:25:58,140 --> 00:25:59,880
zero ad because people want Microsoft

775
00:25:59,880 --> 00:26:02,760
365. it's really common to see people

776
00:26:02,760 --> 00:26:06,059
using OCTA or ping or One login or all

777
00:26:06,059 --> 00:26:08,220
xero or one of these other Cloud native

778
00:26:08,220 --> 00:26:10,080
identity management single sign-on

779
00:26:10,080 --> 00:26:11,100
platforms

780
00:26:11,100 --> 00:26:12,900
they're usually a single point of access

781
00:26:12,900 --> 00:26:15,539
into everything that the organization

782
00:26:15,539 --> 00:26:18,179
works with from their HR systems to

783
00:26:18,179 --> 00:26:20,400
GitHub to their emails to everything

784
00:26:20,400 --> 00:26:21,539
right

785
00:26:21,539 --> 00:26:23,760
um interesting supply chain risk there

786
00:26:23,760 --> 00:26:25,200
really you know we all saw OCTA get

787
00:26:25,200 --> 00:26:26,940
breached a while back thankfully it

788
00:26:26,940 --> 00:26:28,260
turned out not very much came of it but

789
00:26:28,260 --> 00:26:29,640
I think a lot of people woke up to the

790
00:26:29,640 --> 00:26:31,559
idea that if Octor did get breached

791
00:26:31,559 --> 00:26:33,179
their organizations were going to be in

792
00:26:33,179 --> 00:26:35,640
for a world of pain

793
00:26:35,640 --> 00:26:37,080
a lot of these have quite interesting

794
00:26:37,080 --> 00:26:38,880
security properties too though when you

795
00:26:38,880 --> 00:26:40,860
first authenticate they'll enforce

796
00:26:40,860 --> 00:26:42,720
multi-factor authentication they'll have

797
00:26:42,720 --> 00:26:44,279
a bunch of risk-based modeling that

798
00:26:44,279 --> 00:26:45,480
decides whether or not you're actually

799
00:26:45,480 --> 00:26:47,279
allowed to authenticate based on the

800
00:26:47,279 --> 00:26:49,140
devices that you're logging in from and

801
00:26:49,140 --> 00:26:51,299
the IP ranges you're connecting from and

802
00:26:51,299 --> 00:26:53,039
all of these other things right

803
00:26:53,039 --> 00:26:56,100
but in many cases once you have that

804
00:26:56,100 --> 00:26:57,779
initial authentication and a session

805
00:26:57,779 --> 00:26:59,700
token's been issued you can use that

806
00:26:59,700 --> 00:27:01,919
session token from everywhere uh we were

807
00:27:01,919 --> 00:27:03,120
messing around with this with One log in

808
00:27:03,120 --> 00:27:05,100
a while back and once you have that

809
00:27:05,100 --> 00:27:07,080
session token you can spin up a box in

810
00:27:07,080 --> 00:27:08,400
digital ocean and start doing things

811
00:27:08,400 --> 00:27:10,440
Against One log in with it and it all

812
00:27:10,440 --> 00:27:13,080
just works fine and so once you've got

813
00:27:13,080 --> 00:27:15,419
that session token you've got all the

814
00:27:15,419 --> 00:27:17,640
access that that user has to all the

815
00:27:17,640 --> 00:27:19,860
corporate systems basically

816
00:27:19,860 --> 00:27:22,380
and so from there we can usually get

817
00:27:22,380 --> 00:27:25,200
into your GitHub or gitlab or whatever

818
00:27:25,200 --> 00:27:27,120
else it is that you're working with and

819
00:27:27,120 --> 00:27:29,340
some kind of authentication into well

820
00:27:29,340 --> 00:27:31,020
hopefully not Jenkins but probably

821
00:27:31,020 --> 00:27:32,460
Jenkins

822
00:27:32,460 --> 00:27:34,799
um or some other CI CD system

823
00:27:34,799 --> 00:27:36,900
all this stuff is built with the idea of

824
00:27:36,900 --> 00:27:38,400
allowing developers to do their work

825
00:27:38,400 --> 00:27:40,679
efficiently and quickly less attention

826
00:27:40,679 --> 00:27:43,200
than I'd like often gets paid to these

827
00:27:43,200 --> 00:27:45,059
security models around all of these

828
00:27:45,059 --> 00:27:48,419
tools and in a lot of cases once some

829
00:27:48,419 --> 00:27:49,740
changes have been approved they're

830
00:27:49,740 --> 00:27:51,240
automatically merged in and deployed

831
00:27:51,240 --> 00:27:53,100
straight out into production and that's

832
00:27:53,100 --> 00:27:55,020
all done with a variety of tooling and

833
00:27:55,020 --> 00:27:56,100
things that people have built for this

834
00:27:56,100 --> 00:27:57,960
there's a few standard models and we're

835
00:27:57,960 --> 00:27:59,580
going to look at terraform's usual one

836
00:27:59,580 --> 00:28:01,080
here and you'll either see it with

837
00:28:01,080 --> 00:28:02,580
terraform cloud or there's an open

838
00:28:02,580 --> 00:28:04,620
source tool called Atlantis it operates

839
00:28:04,620 --> 00:28:06,779
on pretty much the same principle

840
00:28:06,779 --> 00:28:10,140
right so in this case uh we are a

841
00:28:10,140 --> 00:28:12,059
developer we've stolen the the session

842
00:28:12,059 --> 00:28:14,039
token we got into GitHub

843
00:28:14,039 --> 00:28:15,600
um we are now in a position to start

844
00:28:15,600 --> 00:28:17,100
looking at their infrastructure as code

845
00:28:17,100 --> 00:28:20,340
repositories uh and maybe we can't make

846
00:28:20,340 --> 00:28:21,960
direct edits to the repository that's

847
00:28:21,960 --> 00:28:24,779
fine I've been smart enough to require

848
00:28:24,779 --> 00:28:26,279
um a second set of eyes for all merge

849
00:28:26,279 --> 00:28:28,020
requests that are going in or or pull

850
00:28:28,020 --> 00:28:30,600
requests but if you're using terraform

851
00:28:30,600 --> 00:28:32,820
Cloud on Atlantis the model they work on

852
00:28:32,820 --> 00:28:35,159
is that they review the merge request

853
00:28:35,159 --> 00:28:37,860
they run terraform in it and terraform

854
00:28:37,860 --> 00:28:40,500
plan to understand what's changed versus

855
00:28:40,500 --> 00:28:42,600
what's currently in the cloud and then

856
00:28:42,600 --> 00:28:45,360
they post back to the original GitHub

857
00:28:45,360 --> 00:28:48,240
pull request thread saying here's what's

858
00:28:48,240 --> 00:28:49,980
going to change helps the developers

859
00:28:49,980 --> 00:28:52,500
understand what a given merge request is

860
00:28:52,500 --> 00:28:54,120
going to change in their environment

861
00:28:54,120 --> 00:28:55,860
brilliant idea in theory makes the

862
00:28:55,860 --> 00:28:57,779
developers lives a lot easier but when

863
00:28:57,779 --> 00:29:00,360
you execute terraform plan it executes

864
00:29:00,360 --> 00:29:01,679
every single line of terraform that

865
00:29:01,679 --> 00:29:03,360
you've got in order to compare it to

866
00:29:03,360 --> 00:29:04,860
what's going on in the cloud

867
00:29:04,860 --> 00:29:07,080
now there's two or three different ways

868
00:29:07,080 --> 00:29:09,179
of doing this you can have a custom

869
00:29:09,179 --> 00:29:10,679
terraform

870
00:29:10,679 --> 00:29:12,659
um provider they call it like you have

871
00:29:12,659 --> 00:29:14,400
the AWS provider and the Azure provider

872
00:29:14,400 --> 00:29:15,600
you can write your own and get code

873
00:29:15,600 --> 00:29:18,059
exactly that way or my usual favorite

874
00:29:18,059 --> 00:29:19,860
because it's much easier there's an

875
00:29:19,860 --> 00:29:21,539
external resource type that essentially

876
00:29:21,539 --> 00:29:23,820
allows you to supply A bash script uh

877
00:29:23,820 --> 00:29:25,980
that runs as part of the terraform

878
00:29:25,980 --> 00:29:28,860
so terraform Cloud will take your merge

879
00:29:28,860 --> 00:29:29,880
request there's been no other

880
00:29:29,880 --> 00:29:31,919
interaction required on the developers

881
00:29:31,919 --> 00:29:33,360
part here we've opened this merge

882
00:29:33,360 --> 00:29:35,279
request and terraform Cloud goes and

883
00:29:35,279 --> 00:29:36,899
executes all of this stuff

884
00:29:36,899 --> 00:29:38,820
and in order for it to go into the cloud

885
00:29:38,820 --> 00:29:40,020
and understand what's currently there

886
00:29:40,020 --> 00:29:41,220
and be able to do the right diffs

887
00:29:41,220 --> 00:29:43,080
there's usually some credentials in

888
00:29:43,080 --> 00:29:44,880
there and it's very rare that I see

889
00:29:44,880 --> 00:29:46,799
people try and differentiate the

890
00:29:46,799 --> 00:29:48,120
credentials that are used for terraform

891
00:29:48,120 --> 00:29:49,980
plan versus what's used to actually

892
00:29:49,980 --> 00:29:51,659
deploy all the stuff so these

893
00:29:51,659 --> 00:29:52,860
credentials that your script is

894
00:29:52,860 --> 00:29:54,840
executing in the context of are almost

895
00:29:54,840 --> 00:29:55,980
certainly going to have administrative

896
00:29:55,980 --> 00:29:58,380
access over whatever AWS or Azure

897
00:29:58,380 --> 00:30:01,620
workloads they're working on so usually

898
00:30:01,620 --> 00:30:03,539
you'll find some environment variables

899
00:30:03,539 --> 00:30:05,399
or if they're deploying custom Runners

900
00:30:05,399 --> 00:30:07,500
it'll be the instance metadata service

901
00:30:07,500 --> 00:30:09,539
in AWS or Azure and you can just pull

902
00:30:09,539 --> 00:30:10,799
these credentials they're using straight

903
00:30:10,799 --> 00:30:14,460
out uh very very rarely do I see people

904
00:30:14,460 --> 00:30:16,200
properly lock down where those

905
00:30:16,200 --> 00:30:18,179
credentials can be used from it's often

906
00:30:18,179 --> 00:30:19,919
a pretty manual process so you grab

907
00:30:19,919 --> 00:30:21,960
those you put them on your laptop off we

908
00:30:21,960 --> 00:30:24,140
go

909
00:30:25,559 --> 00:30:27,299
this is quite a hard thing to harden

910
00:30:27,299 --> 00:30:28,980
against though people are still trying

911
00:30:28,980 --> 00:30:31,020
to work out how to do it for this

912
00:30:31,020 --> 00:30:32,760
specific thing with terraform the best

913
00:30:32,760 --> 00:30:34,380
thing to do is basically be scanning

914
00:30:34,380 --> 00:30:36,659
terraform as part of that merge request

915
00:30:36,659 --> 00:30:39,240
to look for the two or three types of

916
00:30:39,240 --> 00:30:41,220
resources or the custom providers that

917
00:30:41,220 --> 00:30:43,980
allow you to do that attack path right

918
00:30:43,980 --> 00:30:45,600
and even just some simple bash scripts

919
00:30:45,600 --> 00:30:47,100
grappling for the right stuff is an

920
00:30:47,100 --> 00:30:49,140
improvement and you can set that as part

921
00:30:49,140 --> 00:30:51,299
of the merge request workflow to trigger

922
00:30:51,299 --> 00:30:53,700
before all of the terraform stuff and

923
00:30:53,700 --> 00:30:55,200
then basically not proceed any further

924
00:30:55,200 --> 00:30:56,760
if you find stuff that looks like it

925
00:30:56,760 --> 00:30:58,020
might be nasty

926
00:30:58,020 --> 00:31:00,419
in a broader sense I don't see a lot of

927
00:31:00,419 --> 00:31:02,340
organizations actually doing proper Four

928
00:31:02,340 --> 00:31:03,600
Eyes checks on their their merge

929
00:31:03,600 --> 00:31:05,820
requests so you definitely want to make

930
00:31:05,820 --> 00:31:07,200
sure that whatever's getting merged in

931
00:31:07,200 --> 00:31:10,140
requires two people to be bad before

932
00:31:10,140 --> 00:31:11,159
um

933
00:31:11,159 --> 00:31:12,960
before we accept any of those merges

934
00:31:12,960 --> 00:31:14,520
it's not going to stop all attackers

935
00:31:14,520 --> 00:31:16,200
obviously but it's a step in the right

936
00:31:16,200 --> 00:31:17,640
direction

937
00:31:17,640 --> 00:31:19,200
um a lot of people don't treat their

938
00:31:19,200 --> 00:31:21,960
pipelines as a core part of their

939
00:31:21,960 --> 00:31:23,940
security model it's seen as a supporting

940
00:31:23,940 --> 00:31:26,039
system as something that we can think

941
00:31:26,039 --> 00:31:28,440
about but not necessarily uh work too

942
00:31:28,440 --> 00:31:29,820
hard with right

943
00:31:29,820 --> 00:31:31,559
um we focus on the production workloads

944
00:31:31,559 --> 00:31:33,539
instead that is a big mistake in my

945
00:31:33,539 --> 00:31:36,179
opinion the more Cloud native you get so

946
00:31:36,179 --> 00:31:37,980
threat model Forum pen test them all the

947
00:31:37,980 --> 00:31:39,539
rest of it give them a good hard kicking

948
00:31:39,539 --> 00:31:40,740
and you'll be surprised at what falls

949
00:31:40,740 --> 00:31:42,419
out I bet

950
00:31:42,419 --> 00:31:43,980
um and equally a lot of organizations

951
00:31:43,980 --> 00:31:46,440
it's seen as a benefit to the developers

952
00:31:46,440 --> 00:31:48,059
to allow them to use whatever tooling

953
00:31:48,059 --> 00:31:49,200
they want and do whatever kinds of

954
00:31:49,200 --> 00:31:51,299
things they want however they want the

955
00:31:51,299 --> 00:31:53,039
more you can do to reduce down the

956
00:31:53,039 --> 00:31:55,020
number of CI CD systems and the number

957
00:31:55,020 --> 00:31:56,460
of tools and things people are using as

958
00:31:56,460 --> 00:31:58,740
part of that pipeline uh the better a

959
00:31:58,740 --> 00:32:00,299
time you'll have as a security team

960
00:32:00,299 --> 00:32:02,580
trying to keep all of this secure

961
00:32:02,580 --> 00:32:05,039
um Jenkins is a bit of a dumpster fire

962
00:32:05,039 --> 00:32:06,779
here and unfortunately there's not

963
00:32:06,779 --> 00:32:09,059
really a huge amount you can do to

964
00:32:09,059 --> 00:32:10,260
prevent most of the common issues with

965
00:32:10,260 --> 00:32:11,940
Jenkins like all the old plugins that no

966
00:32:11,940 --> 00:32:13,679
one maintains anymore

967
00:32:13,679 --> 00:32:16,320
um but for most of the good CI CD

968
00:32:16,320 --> 00:32:18,600
platforms you can also disable at an

969
00:32:18,600 --> 00:32:20,460
administrative level what components of

970
00:32:20,460 --> 00:32:21,600
the tool are available to your

971
00:32:21,600 --> 00:32:23,279
developers all of these kinds of things

972
00:32:23,279 --> 00:32:25,140
so well worth looking at that the less

973
00:32:25,140 --> 00:32:26,820
there is there to abuse you know the

974
00:32:26,820 --> 00:32:29,700
harder time an attacker is going to have

975
00:32:29,700 --> 00:32:32,640
so that gets us to the end of the attack

976
00:32:32,640 --> 00:32:34,799
paths I wanted to talk about

977
00:32:34,799 --> 00:32:35,460
um

978
00:32:35,460 --> 00:32:37,799
from a detection perspective the Cloud's

979
00:32:37,799 --> 00:32:39,720
a bit of an interesting Beast

980
00:32:39,720 --> 00:32:40,740
um I've been talking about this now

981
00:32:40,740 --> 00:32:43,080
since T2 in 2019

982
00:32:43,080 --> 00:32:44,700
um but a lot of things are still being

983
00:32:44,700 --> 00:32:46,380
worked out right

984
00:32:46,380 --> 00:32:47,100
um

985
00:32:47,100 --> 00:32:49,320
there's a few key places where it

986
00:32:49,320 --> 00:32:51,059
differs from what we're used to dealing

987
00:32:51,059 --> 00:32:53,820
with on premises one of the big ones is

988
00:32:53,820 --> 00:32:55,679
what we've taken to calling uncertainty

989
00:32:55,679 --> 00:32:57,720
of malicious intent there are very few

990
00:32:57,720 --> 00:33:00,000
things in the cloud that scream

991
00:33:00,000 --> 00:33:01,799
someone's trying to hack you like mini

992
00:33:01,799 --> 00:33:03,899
cat's executing on a box right there's

993
00:33:03,899 --> 00:33:05,460
not really much of an equivalent for

994
00:33:05,460 --> 00:33:07,380
that in the cloud space

995
00:33:07,380 --> 00:33:09,240
um in a lot of workloads you'll find

996
00:33:09,240 --> 00:33:11,700
that something that is very obviously

997
00:33:11,700 --> 00:33:14,880
bad in most places is perfectly normal

998
00:33:14,880 --> 00:33:16,740
that might even differ between workloads

999
00:33:16,740 --> 00:33:18,059
and the same application same

1000
00:33:18,059 --> 00:33:21,240
organization sorry depending on how much

1001
00:33:21,240 --> 00:33:23,220
Freedom developers get so everything

1002
00:33:23,220 --> 00:33:25,740
becomes about context is this thing

1003
00:33:25,740 --> 00:33:27,840
normal in the context of this workload

1004
00:33:27,840 --> 00:33:29,519
is this something this developer usually

1005
00:33:29,519 --> 00:33:31,500
does

1006
00:33:31,500 --> 00:33:33,480
we're getting better at that and

1007
00:33:33,480 --> 00:33:34,919
obviously everyone's trying to apply as

1008
00:33:34,919 --> 00:33:37,320
much ml and Ai and probably chat GPT

1009
00:33:37,320 --> 00:33:39,419
this week too to trying to work out how

1010
00:33:39,419 --> 00:33:41,100
to do that better

1011
00:33:41,100 --> 00:33:42,779
I still think we're a long way away from

1012
00:33:42,779 --> 00:33:43,919
that being good

1013
00:33:43,919 --> 00:33:45,600
on the plus side

1014
00:33:45,600 --> 00:33:48,419
visibility is generally easier to get

1015
00:33:48,419 --> 00:33:50,640
you can turn on most data sources and

1016
00:33:50,640 --> 00:33:52,919
have it automatically apply to a hundred

1017
00:33:52,919 --> 00:33:54,299
percent of what is in that bit of the

1018
00:33:54,299 --> 00:33:56,220
cloud we've moved away from the old

1019
00:33:56,220 --> 00:33:58,200
problem of oh we've got 10 boxes in the

1020
00:33:58,200 --> 00:34:00,120
corner that our crowdstrike deployments

1021
00:34:00,120 --> 00:34:01,620
don't support and so we've got no EDR

1022
00:34:01,620 --> 00:34:03,539
coverage there or boxes that you weren't

1023
00:34:03,539 --> 00:34:05,940
aware on your network because we can

1024
00:34:05,940 --> 00:34:07,980
just query AWS or Azure and get a

1025
00:34:07,980 --> 00:34:09,119
complete list of everything we've got

1026
00:34:09,119 --> 00:34:10,560
make sure everything's deployed properly

1027
00:34:10,560 --> 00:34:12,060
right

1028
00:34:12,060 --> 00:34:14,219
now on the flip side I mentioned earlier

1029
00:34:14,219 --> 00:34:16,139
on about attackers stealing keys and

1030
00:34:16,139 --> 00:34:18,000
auto deploying crypto miners

1031
00:34:18,000 --> 00:34:20,040
we've not seen them do much more of that

1032
00:34:20,040 --> 00:34:22,500
in the automation space yet but my

1033
00:34:22,500 --> 00:34:24,480
expectation is with how easy it is to

1034
00:34:24,480 --> 00:34:26,280
automate things in the cloud we're going

1035
00:34:26,280 --> 00:34:28,080
to start seeing more and more automated

1036
00:34:28,080 --> 00:34:29,940
Smash and grab

1037
00:34:29,940 --> 00:34:32,219
um so that's easier to do in the cloud

1038
00:34:32,219 --> 00:34:34,320
world than it was on premises so I'm

1039
00:34:34,320 --> 00:34:36,239
expecting to see a lot more of that

1040
00:34:36,239 --> 00:34:37,980
we're starting to see targeted attacks

1041
00:34:37,980 --> 00:34:40,080
against uh S3 buckets in particular

1042
00:34:40,080 --> 00:34:42,599
looking to ransomware the Daylight's out

1043
00:34:42,599 --> 00:34:44,219
of them basically there's a lot of that

1044
00:34:44,219 --> 00:34:45,960
going on now to the point where AWS have

1045
00:34:45,960 --> 00:34:48,359
finally had to admit it's a problem

1046
00:34:48,359 --> 00:34:50,940
um so for that S3 bucket versioning is

1047
00:34:50,940 --> 00:34:52,020
your best friend for now because you can

1048
00:34:52,020 --> 00:34:53,580
then just roll back

1049
00:34:53,580 --> 00:34:56,159
um but watch this space I expect we'll

1050
00:34:56,159 --> 00:34:57,720
see more automated attacks coming in the

1051
00:34:57,720 --> 00:34:59,580
future

1052
00:34:59,580 --> 00:35:01,080
then

1053
00:35:01,080 --> 00:35:03,720
when we think about Cloud we've got a

1054
00:35:03,720 --> 00:35:05,640
pretty good idea of what sort of log

1055
00:35:05,640 --> 00:35:07,740
sources apply at the infrastructure as a

1056
00:35:07,740 --> 00:35:10,140
service end of things this is your uh

1057
00:35:10,140 --> 00:35:11,640
sort of virtual machines your old school

1058
00:35:11,640 --> 00:35:13,079
networks all of that in the cloud right

1059
00:35:13,079 --> 00:35:15,660
and we run EDR on our virtual machines

1060
00:35:15,660 --> 00:35:19,200
we grab VPC flow logs or NSG flow logs

1061
00:35:19,200 --> 00:35:20,880
and Azure and that gives us the network

1062
00:35:20,880 --> 00:35:23,099
visibility you can have cloudtrail or

1063
00:35:23,099 --> 00:35:24,240
audit log to get a lot of the

1064
00:35:24,240 --> 00:35:26,040
administrative actions out between all

1065
00:35:26,040 --> 00:35:27,119
of that you get a pretty good picture

1066
00:35:27,119 --> 00:35:29,099
maybe some of your application logs are

1067
00:35:29,099 --> 00:35:30,540
useful too

1068
00:35:30,540 --> 00:35:32,339
once you start working up towards the

1069
00:35:32,339 --> 00:35:34,020
platform as the service workloads manage

1070
00:35:34,020 --> 00:35:36,660
databases Lambda functions S3 all that

1071
00:35:36,660 --> 00:35:38,400
sort of thing we lose a bunch of the

1072
00:35:38,400 --> 00:35:40,859
visibility that you had with the

1073
00:35:40,859 --> 00:35:42,780
infrastructure as a service the further

1074
00:35:42,780 --> 00:35:44,579
to the top you get on this pyramid the

1075
00:35:44,579 --> 00:35:46,380
the worse that gets

1076
00:35:46,380 --> 00:35:48,480
um we still have pretty good visibility

1077
00:35:48,480 --> 00:35:50,040
cloudtrail does a lot of stuff as

1078
00:35:50,040 --> 00:35:51,720
there's Azure audit logs

1079
00:35:51,720 --> 00:35:54,300
um Amazon lets you do object level data

1080
00:35:54,300 --> 00:35:55,740
events as they call it so you can see

1081
00:35:55,740 --> 00:35:58,619
when a KMS encryption key has been used

1082
00:35:58,619 --> 00:36:00,540
or who's reading and writing from your

1083
00:36:00,540 --> 00:36:03,420
S3 buckets if you really want it

1084
00:36:03,420 --> 00:36:04,980
um once we get to the top though your

1085
00:36:04,980 --> 00:36:07,200
GitHub boxer you have CI platforms these

1086
00:36:07,200 --> 00:36:08,579
kinds of things

1087
00:36:08,579 --> 00:36:11,280
well yeah we're still really working out

1088
00:36:11,280 --> 00:36:13,560
what that looks like the quality of the

1089
00:36:13,560 --> 00:36:14,820
logs you get out of those platforms

1090
00:36:14,820 --> 00:36:17,099
varies enormously some of them are

1091
00:36:17,099 --> 00:36:19,079
really quite good if you pay enough for

1092
00:36:19,079 --> 00:36:20,280
GitHub and you can actually ship the

1093
00:36:20,280 --> 00:36:22,380
logs out of it they're pretty effective

1094
00:36:22,380 --> 00:36:24,359
um oxal likewise fairly decent the

1095
00:36:24,359 --> 00:36:26,700
closer you get to Niche sash platforms

1096
00:36:26,700 --> 00:36:28,980
that often becomes more of a problem in

1097
00:36:28,980 --> 00:36:30,960
smaller countries running like specific

1098
00:36:30,960 --> 00:36:32,940
tax or HR systems and that that sort of

1099
00:36:32,940 --> 00:36:35,760
thing and the worse that problem gets

1100
00:36:35,760 --> 00:36:38,220
um and we tend to find that no one's

1101
00:36:38,220 --> 00:36:39,420
really worked out what to do with those

1102
00:36:39,420 --> 00:36:41,280
logs what to be hunting around for so

1103
00:36:41,280 --> 00:36:43,260
every organization who's trying to do

1104
00:36:43,260 --> 00:36:45,420
effective detection at that end of the

1105
00:36:45,420 --> 00:36:46,980
spectrum with all their SAS platforms

1106
00:36:46,980 --> 00:36:49,619
outside of Microsoft 365 they're all

1107
00:36:49,619 --> 00:36:52,920
working out for themselves as they go

1108
00:36:52,920 --> 00:36:55,320
the infrastructure end of things I would

1109
00:36:55,320 --> 00:36:57,839
say the two big ones to go for are your

1110
00:36:57,839 --> 00:36:59,880
control plane audit logs so Cloud trial

1111
00:36:59,880 --> 00:37:02,099
audit log the things that log the

1112
00:37:02,099 --> 00:37:04,020
administrative actions

1113
00:37:04,020 --> 00:37:05,880
um if you have only got one Cloud log

1114
00:37:05,880 --> 00:37:08,760
Source go turn that one on now the

1115
00:37:08,760 --> 00:37:10,140
providers make it fairly easy to do

1116
00:37:10,140 --> 00:37:11,820
across your entire organization so

1117
00:37:11,820 --> 00:37:15,000
that's priority number one and then you

1118
00:37:15,000 --> 00:37:16,500
have the service specific logs so if

1119
00:37:16,500 --> 00:37:19,020
you're doing a lot of like uh serverless

1120
00:37:19,020 --> 00:37:20,220
development with Lambda for instance

1121
00:37:20,220 --> 00:37:21,540
it's probably worth looking at the

1122
00:37:21,540 --> 00:37:23,700
Lambda specific logs likewise if you've

1123
00:37:23,700 --> 00:37:25,140
got a lot of stuff that's encrypted with

1124
00:37:25,140 --> 00:37:27,359
specific KMS keys that might be a good

1125
00:37:27,359 --> 00:37:28,980
option too

1126
00:37:28,980 --> 00:37:30,839
I got yelled at a few conference talks

1127
00:37:30,839 --> 00:37:32,460
ago for calling some of the cloud native

1128
00:37:32,460 --> 00:37:34,619
detection Services essentially antivirus

1129
00:37:34,619 --> 00:37:35,579
for cloud

1130
00:37:35,579 --> 00:37:37,859
but it's not really a inaccurate

1131
00:37:37,859 --> 00:37:39,540
description at this stage they're pretty

1132
00:37:39,540 --> 00:37:41,940
good for catching really obvious bad

1133
00:37:41,940 --> 00:37:43,440
stuff right

1134
00:37:43,440 --> 00:37:45,420
um for instance don't ever use Kali

1135
00:37:45,420 --> 00:37:46,920
Linux if you're pen testing an AWS

1136
00:37:46,920 --> 00:37:48,839
environment guard Duty lights up like a

1137
00:37:48,839 --> 00:37:50,460
Christmas tree but it's specifically

1138
00:37:50,460 --> 00:37:52,020
signaturing on the user agent that

1139
00:37:52,020 --> 00:37:53,520
Cali's using for its requests right

1140
00:37:53,520 --> 00:37:56,400
really easy thing to bypass equally um

1141
00:37:56,400 --> 00:37:57,900
it's Port scanning detection is pretty

1142
00:37:57,900 --> 00:38:00,000
bad in my experience too a lot of this

1143
00:38:00,000 --> 00:38:02,040
stuff is improving and guard duty is a

1144
00:38:02,040 --> 00:38:03,060
hell of a lot better than it was the

1145
00:38:03,060 --> 00:38:05,339
first time I put this up on on screen at

1146
00:38:05,339 --> 00:38:08,099
T2 I still wouldn't rely on it it's a

1147
00:38:08,099 --> 00:38:09,599
lot better than nothing but if you want

1148
00:38:09,599 --> 00:38:11,220
an effective detective capability in the

1149
00:38:11,220 --> 00:38:12,900
cloud you need your own logs you need to

1150
00:38:12,900 --> 00:38:14,220
be doing your own analysis and your own

1151
00:38:14,220 --> 00:38:16,619
alerting

1152
00:38:16,619 --> 00:38:19,020
then the closer we get to the sus end of

1153
00:38:19,020 --> 00:38:20,579
the spectrum the worse the format

1154
00:38:20,579 --> 00:38:22,320
variations get

1155
00:38:22,320 --> 00:38:24,180
all the SAS providers have their own log

1156
00:38:24,180 --> 00:38:27,240
formats totally unstandardized a lot of

1157
00:38:27,240 --> 00:38:29,339
the scene providers will have ingesters

1158
00:38:29,339 --> 00:38:31,859
for your Microsoft 365 and Google

1159
00:38:31,859 --> 00:38:34,320
workspaces Salesforce things like that

1160
00:38:34,320 --> 00:38:36,060
but the closer you get to weird Niche

1161
00:38:36,060 --> 00:38:37,440
SAS platforms the more you're on your

1162
00:38:37,440 --> 00:38:38,579
own

1163
00:38:38,579 --> 00:38:39,420
um

1164
00:38:39,420 --> 00:38:40,980
in theory there's this great thing

1165
00:38:40,980 --> 00:38:42,540
called the opening open cyber security

1166
00:38:42,540 --> 00:38:45,000
schema framework that a loaded the scene

1167
00:38:45,000 --> 00:38:46,560
vendors and Cloud providers are getting

1168
00:38:46,560 --> 00:38:48,540
behind but I think they only announced

1169
00:38:48,540 --> 00:38:49,920
that about six months back so it's going

1170
00:38:49,920 --> 00:38:51,480
to be a solid two or three years I think

1171
00:38:51,480 --> 00:38:53,099
probably before we're in a position

1172
00:38:53,099 --> 00:38:54,420
where SAS providers are really

1173
00:38:54,420 --> 00:38:56,940
standardizing their formats

1174
00:38:56,940 --> 00:38:58,560
the other Silver Lining from a detection

1175
00:38:58,560 --> 00:39:01,020
point of view

1176
00:39:01,020 --> 00:39:02,339
patient infrastructures in the cloud

1177
00:39:02,339 --> 00:39:05,520
tend to be very micro service based lots

1178
00:39:05,520 --> 00:39:08,700
of small pieces and so any given request

1179
00:39:08,700 --> 00:39:11,160
from a user is probably going to hit a

1180
00:39:11,160 --> 00:39:12,780
whole bunch of different points where

1181
00:39:12,780 --> 00:39:15,180
you have a way to monitor for it in some

1182
00:39:15,180 --> 00:39:17,720
fashion so your average attackers

1183
00:39:17,720 --> 00:39:20,099
requests and whatever they're doing is

1184
00:39:20,099 --> 00:39:21,119
going to pass through a bunch of

1185
00:39:21,119 --> 00:39:22,440
different places where you can pull log

1186
00:39:22,440 --> 00:39:24,780
sources out and put it in your scene the

1187
00:39:24,780 --> 00:39:26,280
problem ends up being a problem of cost

1188
00:39:26,280 --> 00:39:28,560
uh you know if you're running Splunk for

1189
00:39:28,560 --> 00:39:30,119
instance my condolences to your credit

1190
00:39:30,119 --> 00:39:31,680
card because this will utterly ruin it

1191
00:39:31,680 --> 00:39:34,320
but it's worth Gathering up a few bits

1192
00:39:34,320 --> 00:39:37,079
of uh the key bits especially uh

1193
00:39:37,079 --> 00:39:40,619
wafflogs maybe probably not but things

1194
00:39:40,619 --> 00:39:42,359
inside the the containers in your

1195
00:39:42,359 --> 00:39:43,680
kubernetes clusters like we've got going

1196
00:39:43,680 --> 00:39:44,880
on here

1197
00:39:44,880 --> 00:39:46,920
um or like the kubernetes API server

1198
00:39:46,920 --> 00:39:48,599
audit logs

1199
00:39:48,599 --> 00:39:50,940
um there's a number of places where

1200
00:39:50,940 --> 00:39:52,920
depending on your specific workloads and

1201
00:39:52,920 --> 00:39:54,540
how you've built them you can pull out

1202
00:39:54,540 --> 00:39:56,280
some quite interesting uh Telemetry

1203
00:39:56,280 --> 00:39:58,320
there

1204
00:39:58,320 --> 00:40:00,000
all right so lastly key security

1205
00:40:00,000 --> 00:40:01,740
controls

1206
00:40:01,740 --> 00:40:03,480
um what are the big things to put on uh

1207
00:40:03,480 --> 00:40:05,339
to try and stop the worst of uh the

1208
00:40:05,339 --> 00:40:07,920
attacks in the cloud these days right no

1209
00:40:07,920 --> 00:40:10,260
surprise number one multi-factor

1210
00:40:10,260 --> 00:40:12,240
authentication preaching to the crowd

1211
00:40:12,240 --> 00:40:13,859
I'm sure but you'd be amazed at how

1212
00:40:13,859 --> 00:40:15,480
often I still don't see that in use in

1213
00:40:15,480 --> 00:40:17,820
all the places it probably should be

1214
00:40:17,820 --> 00:40:19,500
the industry's been banging on about

1215
00:40:19,500 --> 00:40:21,180
principle of least privilege for I don't

1216
00:40:21,180 --> 00:40:22,800
know how long I see that in about half

1217
00:40:22,800 --> 00:40:25,140
the pen test reports that people write

1218
00:40:25,140 --> 00:40:27,119
realistically no one's ever going to get

1219
00:40:27,119 --> 00:40:29,220
there but you can probably get about 80

1220
00:40:29,220 --> 00:40:32,099
of the way with 20 of the effort work

1221
00:40:32,099 --> 00:40:34,440
out where the key resources the key

1222
00:40:34,440 --> 00:40:36,599
administrative users those kinds of

1223
00:40:36,599 --> 00:40:38,099
things are make sure they're nicely

1224
00:40:38,099 --> 00:40:40,020
locked down and try and standardize

1225
00:40:40,020 --> 00:40:41,400
where you can so your developers aren't

1226
00:40:41,400 --> 00:40:42,900
trying to write their own ion policies

1227
00:40:42,900 --> 00:40:44,760
all the time as a reasonable amount you

1228
00:40:44,760 --> 00:40:46,260
can do there

1229
00:40:46,260 --> 00:40:47,760
equally

1230
00:40:47,760 --> 00:40:49,740
um reducing or eliminating long-lived

1231
00:40:49,740 --> 00:40:51,540
credentials I've got a bit of a personal

1232
00:40:51,540 --> 00:40:53,880
Crusade against AWS I am users because

1233
00:40:53,880 --> 00:40:55,980
you generate the API Keys once and they

1234
00:40:55,980 --> 00:40:57,900
live forever until you delete them and

1235
00:40:57,900 --> 00:40:59,400
inevitably they get checked into GitHub

1236
00:40:59,400 --> 00:41:01,020
or uploaded to paste bin or something

1237
00:41:01,020 --> 00:41:03,720
about how bad happens with them so

1238
00:41:03,720 --> 00:41:06,240
single sign-on temporary credentials you

1239
00:41:06,240 --> 00:41:08,700
know AWS is single sign-on workflows

1240
00:41:08,700 --> 00:41:10,020
give you credits for a maximum of 12

1241
00:41:10,020 --> 00:41:12,119
hours at a time so that's a much safer

1242
00:41:12,119 --> 00:41:13,320
way of doing things than having these

1243
00:41:13,320 --> 00:41:14,640
credentials Live Forever on your hard

1244
00:41:14,640 --> 00:41:16,740
drive

1245
00:41:16,740 --> 00:41:19,260
provide a back to authentication so what

1246
00:41:19,260 --> 00:41:21,839
I mean by this is if you're running a

1247
00:41:21,839 --> 00:41:24,359
Lambda function you can assign a role to

1248
00:41:24,359 --> 00:41:26,760
it and then AWS handles all the

1249
00:41:26,760 --> 00:41:29,040
credential rotation and supply to the

1250
00:41:29,040 --> 00:41:31,560
function for you the sdks know how all

1251
00:41:31,560 --> 00:41:32,700
that works you don't have to do anything

1252
00:41:32,700 --> 00:41:34,380
you just give it the right permissions

1253
00:41:34,380 --> 00:41:37,920
and off it goes right so don't be hard

1254
00:41:37,920 --> 00:41:39,420
coding credentials into things in the

1255
00:41:39,420 --> 00:41:41,520
cloud where you don't have to they've

1256
00:41:41,520 --> 00:41:42,900
deliberately put a lot of engineering

1257
00:41:42,900 --> 00:41:45,300
effort into making it fairly easy for

1258
00:41:45,300 --> 00:41:47,339
you to supply the right access to your

1259
00:41:47,339 --> 00:41:48,660
workloads without having to actually

1260
00:41:48,660 --> 00:41:50,339
manage the credentials yourself

1261
00:41:50,339 --> 00:41:52,440
obviously that doesn't apply for things

1262
00:41:52,440 --> 00:41:53,880
like your workstations and your virtual

1263
00:41:53,880 --> 00:41:54,960
machines

1264
00:41:54,960 --> 00:41:57,480
um you know vdi is often a classic issue

1265
00:41:57,480 --> 00:42:00,300
here for for this where you can automate

1266
00:42:00,300 --> 00:42:02,040
credential management and rotation you

1267
00:42:02,040 --> 00:42:03,540
know a bunch of the

1268
00:42:03,540 --> 00:42:05,099
um privileged access Management

1269
00:42:05,099 --> 00:42:06,599
Solutions and things like that will

1270
00:42:06,599 --> 00:42:08,460
provide means for doing some of this

1271
00:42:08,460 --> 00:42:10,500
that said there's a reason it's at the

1272
00:42:10,500 --> 00:42:12,300
bottom of the list it's generally a lot

1273
00:42:12,300 --> 00:42:15,839
of effort and comparatively low uh low

1274
00:42:15,839 --> 00:42:17,820
value in the grand scheme of things so

1275
00:42:17,820 --> 00:42:19,500
I'd get to that once you've done all the

1276
00:42:19,500 --> 00:42:21,540
rest

1277
00:42:21,540 --> 00:42:24,119
avoiding people in production

1278
00:42:24,119 --> 00:42:25,740
um this one usually pisses the devs off

1279
00:42:25,740 --> 00:42:27,480
pretty bad they don't want to be told

1280
00:42:27,480 --> 00:42:28,560
that they can't have access to

1281
00:42:28,560 --> 00:42:29,820
production anymore

1282
00:42:29,820 --> 00:42:31,260
so what you have to do is get to the

1283
00:42:31,260 --> 00:42:33,839
point where they don't need access right

1284
00:42:33,839 --> 00:42:35,640
um robust logging for an operational

1285
00:42:35,640 --> 00:42:37,380
level for everything that's going on in

1286
00:42:37,380 --> 00:42:39,000
their production accounts

1287
00:42:39,000 --> 00:42:41,520
um having a CI CD system that allows

1288
00:42:41,520 --> 00:42:43,859
them to push changes so fast that if

1289
00:42:43,859 --> 00:42:45,060
there's an incident they can just follow

1290
00:42:45,060 --> 00:42:46,980
the proper workflows instead of having

1291
00:42:46,980 --> 00:42:49,619
to go poke around manually that said

1292
00:42:49,619 --> 00:42:51,180
most places are never going to get there

1293
00:42:51,180 --> 00:42:52,800
so you need some kind of production

1294
00:42:52,800 --> 00:42:55,140
Access Control mechanism I've seen quite

1295
00:42:55,140 --> 00:42:57,480
a few organizations now building things

1296
00:42:57,480 --> 00:43:00,480
that provide a jump box on a per use

1297
00:43:00,480 --> 00:43:02,640
case basis uh with you know a single-use

1298
00:43:02,640 --> 00:43:04,740
user and the requests for those are then

1299
00:43:04,740 --> 00:43:06,119
logged and audited and the security

1300
00:43:06,119 --> 00:43:08,700
people can pay attention to that

1301
00:43:08,700 --> 00:43:10,740
if you get to that stage and you've

1302
00:43:10,740 --> 00:43:12,000
still got some budget left this year

1303
00:43:12,000 --> 00:43:15,119
then the logs from your production

1304
00:43:15,119 --> 00:43:17,460
access control system feed all of those

1305
00:43:17,460 --> 00:43:19,740
straight into your scene so that your

1306
00:43:19,740 --> 00:43:21,420
security teams can monitor what the devs

1307
00:43:21,420 --> 00:43:22,500
are doing once they do get into

1308
00:43:22,500 --> 00:43:24,839
production right most of your devs

1309
00:43:24,839 --> 00:43:25,859
aren't going to be doing anything bad

1310
00:43:25,859 --> 00:43:28,200
but if something should happen or if a

1311
00:43:28,200 --> 00:43:30,119
Dev gets compromised what have you being

1312
00:43:30,119 --> 00:43:31,440
able to see exactly what they did in

1313
00:43:31,440 --> 00:43:32,640
production because you've got the bash

1314
00:43:32,640 --> 00:43:34,140
logs from what they did in the jump box

1315
00:43:34,140 --> 00:43:37,640
is really really useful

1316
00:43:38,760 --> 00:43:41,040
blast radius is a bit of a pithy term

1317
00:43:41,040 --> 00:43:44,040
but what I mean by this is break out

1318
00:43:44,040 --> 00:43:46,140
your Cloud infrastructure please for the

1319
00:43:46,140 --> 00:43:47,339
love of God don't just shove everything

1320
00:43:47,339 --> 00:43:49,740
in the same AWS account I still see

1321
00:43:49,740 --> 00:43:51,119
people doing that occasionally but

1322
00:43:51,119 --> 00:43:52,920
thankfully it's happening less have

1323
00:43:52,920 --> 00:43:55,380
separate AWS accounts or Google Cloud

1324
00:43:55,380 --> 00:43:57,359
projects or I can't remember what Azure

1325
00:43:57,359 --> 00:43:59,579
calls them for each of your workloads

1326
00:43:59,579 --> 00:44:01,020
ideally

1327
00:44:01,020 --> 00:44:03,000
um even if you can't get that far even

1328
00:44:03,000 --> 00:44:04,859
just having Devon prod in separate

1329
00:44:04,859 --> 00:44:06,420
things is a is a pretty good starting

1330
00:44:06,420 --> 00:44:07,920
point

1331
00:44:07,920 --> 00:44:10,319
um that applies at the network level two

1332
00:44:10,319 --> 00:44:12,720
I still see a lot of people like joining

1333
00:44:12,720 --> 00:44:14,220
things at the network level with their

1334
00:44:14,220 --> 00:44:16,500
their vpcs VPC peering

1335
00:44:16,500 --> 00:44:18,960
um even saw one case where a client was

1336
00:44:18,960 --> 00:44:21,540
VPC peering with a network owned by a

1337
00:44:21,540 --> 00:44:24,240
third-party provider uh who they had no

1338
00:44:24,240 --> 00:44:26,640
visibility into whatever and they just

1339
00:44:26,640 --> 00:44:28,380
open the open the gates right up at the

1340
00:44:28,380 --> 00:44:31,140
network level the other common problem

1341
00:44:31,140 --> 00:44:33,359
Point here is what I'm calling shared

1342
00:44:33,359 --> 00:44:36,060
services so it's common to see a single

1343
00:44:36,060 --> 00:44:37,380
Jenkins box that deploys everything

1344
00:44:37,380 --> 00:44:39,680
across an organizations in entire estate

1345
00:44:39,680 --> 00:44:42,000
or having a single Secrets management

1346
00:44:42,000 --> 00:44:43,920
box somewhere that everything connects

1347
00:44:43,920 --> 00:44:45,240
back to

1348
00:44:45,240 --> 00:44:47,099
um if that's not handled properly then

1349
00:44:47,099 --> 00:44:48,839
that's a key pivot point that attackers

1350
00:44:48,839 --> 00:44:50,819
will use to bounce around

1351
00:44:50,819 --> 00:44:54,599
um where you can use separate pipelines

1352
00:44:54,599 --> 00:44:57,300
and all that sort of thing at least one

1353
00:44:57,300 --> 00:44:59,280
for Devon one for prod ideally per

1354
00:44:59,280 --> 00:45:01,500
environment

1355
00:45:01,500 --> 00:45:03,900
and to the surprise of absolutely no one

1356
00:45:03,900 --> 00:45:05,760
I'm sure Secrets management is still one

1357
00:45:05,760 --> 00:45:07,619
of the big problems in the cloud

1358
00:45:07,619 --> 00:45:09,540
um so it's well worth paying very close

1359
00:45:09,540 --> 00:45:12,660
attention to where are the application

1360
00:45:12,660 --> 00:45:13,920
teams storing the secrets their

1361
00:45:13,920 --> 00:45:15,720
application use are they hard coding

1362
00:45:15,720 --> 00:45:17,280
those in are they fetching them from

1363
00:45:17,280 --> 00:45:19,200
somewhere sensible the providers give

1364
00:45:19,200 --> 00:45:20,520
you a lot of good options on that front

1365
00:45:20,520 --> 00:45:23,099
you've got Secrets manager you've got a

1366
00:45:23,099 --> 00:45:24,660
key Vault for Azure there's a there's a

1367
00:45:24,660 --> 00:45:26,339
few good options there

1368
00:45:26,339 --> 00:45:28,020
um checking in on how they're shared and

1369
00:45:28,020 --> 00:45:29,760
rotated you know it's no good having

1370
00:45:29,760 --> 00:45:32,160
them up there and in theory secure but

1371
00:45:32,160 --> 00:45:33,180
the devs have still got them on their

1372
00:45:33,180 --> 00:45:34,560
laptop and they don't ever get rotated

1373
00:45:34,560 --> 00:45:35,640
and

1374
00:45:35,640 --> 00:45:38,040
um lastly how do you know when secrets

1375
00:45:38,040 --> 00:45:41,280
are leaked right one of the really

1376
00:45:41,280 --> 00:45:42,420
valuable things I've seen a few

1377
00:45:42,420 --> 00:45:44,280
organizations do now is just have a

1378
00:45:44,280 --> 00:45:46,200
security guy run truffle hog or one of

1379
00:45:46,200 --> 00:45:48,119
these other secret scanners over all of

1380
00:45:48,119 --> 00:45:49,980
our repositories are like a quarterly

1381
00:45:49,980 --> 00:45:51,480
basis just to make sure nothing's been

1382
00:45:51,480 --> 00:45:52,980
checked in that they've uh they've not

1383
00:45:52,980 --> 00:45:54,960
spotted you'd be amazed at how much

1384
00:45:54,960 --> 00:45:56,819
stuff that turns up especially in larger

1385
00:45:56,819 --> 00:45:58,980
organizations and that at least then

1386
00:45:58,980 --> 00:46:00,359
means you know that you've got to rotate

1387
00:46:00,359 --> 00:46:02,160
all this stuff right Better to Know Than

1388
00:46:02,160 --> 00:46:03,660
not

1389
00:46:03,660 --> 00:46:05,460
and lastly

1390
00:46:05,460 --> 00:46:08,099
with the amount of cloud stuff that's

1391
00:46:08,099 --> 00:46:10,619
going on in most organizations this idea

1392
00:46:10,619 --> 00:46:11,940
that you had a Central Security team

1393
00:46:11,940 --> 00:46:14,099
that did security and and uh you know

1394
00:46:14,099 --> 00:46:15,240
that was that

1395
00:46:15,240 --> 00:46:17,700
that has to go we don't have enough

1396
00:46:17,700 --> 00:46:19,980
people who know what they're doing uh

1397
00:46:19,980 --> 00:46:21,180
there's a general lack of knowledge and

1398
00:46:21,180 --> 00:46:22,619
skills and all this stuff still in the

1399
00:46:22,619 --> 00:46:25,560
security world and so those people who

1400
00:46:25,560 --> 00:46:27,839
do know about it tend to cost quite a

1401
00:46:27,839 --> 00:46:30,540
lot so if you want to Career trajectory

1402
00:46:30,540 --> 00:46:32,819
this is quite uh quite a profitable one

1403
00:46:32,819 --> 00:46:33,960
right now

1404
00:46:33,960 --> 00:46:35,760
um and there's usually two wider spread

1405
00:46:35,760 --> 00:46:37,319
of Technologies you know multiple Cloud

1406
00:46:37,319 --> 00:46:39,420
providers a whole lot different stack of

1407
00:46:39,420 --> 00:46:42,480
devops tooling uh kubernetes is his own

1408
00:46:42,480 --> 00:46:44,099
Beast that I don't even want to touch

1409
00:46:44,099 --> 00:46:45,599
really

1410
00:46:45,599 --> 00:46:47,040
um you have to push all this down into

1411
00:46:47,040 --> 00:46:48,900
the engineering teams right we've been

1412
00:46:48,900 --> 00:46:50,339
trying to get them threat modeling and

1413
00:46:50,339 --> 00:46:52,859
shifting left and devsecops and all the

1414
00:46:52,859 --> 00:46:54,480
rest of it for a while now

1415
00:46:54,480 --> 00:46:56,099
um but at the concrete end of things

1416
00:46:56,099 --> 00:46:57,960
having them do some of their own threat

1417
00:46:57,960 --> 00:46:59,400
modeling helps them get better at

1418
00:46:59,400 --> 00:47:01,200
security anyway so definitely try and

1419
00:47:01,200 --> 00:47:02,640
help them out with that

1420
00:47:02,640 --> 00:47:04,200
um leaning on them to build a lot of

1421
00:47:04,200 --> 00:47:05,700
your security automation for the cloud

1422
00:47:05,700 --> 00:47:07,560
is a really good idea they're generally

1423
00:47:07,560 --> 00:47:08,880
better devs than the people in security

1424
00:47:08,880 --> 00:47:11,880
teams for a start and the carrot you can

1425
00:47:11,880 --> 00:47:13,560
use is we're going to build all this

1426
00:47:13,560 --> 00:47:15,660
security tooling anyway it's in your

1427
00:47:15,660 --> 00:47:17,579
interest to help us build it so that it

1428
00:47:17,579 --> 00:47:19,079
works in a way that you actually can

1429
00:47:19,079 --> 00:47:20,400
live with and that you don't hate

1430
00:47:20,400 --> 00:47:22,920
yourself for right it's also a really

1431
00:47:22,920 --> 00:47:25,980
really good place to hire people from or

1432
00:47:25,980 --> 00:47:28,440
poach into your own teams uh to help

1433
00:47:28,440 --> 00:47:30,720
with the cloud security stuff I found it

1434
00:47:30,720 --> 00:47:33,359
much much easier generally to hire a

1435
00:47:33,359 --> 00:47:35,700
x-cloud engineer and teach them to do

1436
00:47:35,700 --> 00:47:37,560
Cloud security then to take someone

1437
00:47:37,560 --> 00:47:39,119
who's been doing like old school

1438
00:47:39,119 --> 00:47:40,980
networks and Mainframe stuff for 20

1439
00:47:40,980 --> 00:47:42,960
years and and get them thinking in the

1440
00:47:42,960 --> 00:47:43,859
cloud

1441
00:47:43,859 --> 00:47:45,480
so well worth thinking about that if

1442
00:47:45,480 --> 00:47:47,040
you're struggling to hire for these

1443
00:47:47,040 --> 00:47:48,780
sorts of security roles

1444
00:47:48,780 --> 00:47:51,000
um and obviously the sooner you fix

1445
00:47:51,000 --> 00:47:52,980
security issues the cheaper it is and

1446
00:47:52,980 --> 00:47:54,240
the more you can automate the more you

1447
00:47:54,240 --> 00:47:55,859
can do so all the stuff everyone's been

1448
00:47:55,859 --> 00:47:57,660
saying for ages about um putting stuff

1449
00:47:57,660 --> 00:47:59,339
in your pipelines to

1450
00:47:59,339 --> 00:48:01,079
um scan for bad things in your your

1451
00:48:01,079 --> 00:48:03,720
source code all that still applies

1452
00:48:03,720 --> 00:48:05,819
um check off worth checking out for

1453
00:48:05,819 --> 00:48:08,040
infrastructure as code uh really

1454
00:48:08,040 --> 00:48:09,960
powerful open source just take it and

1455
00:48:09,960 --> 00:48:11,760
put it in your Jenkins pipelines and it

1456
00:48:11,760 --> 00:48:13,140
will find a lot of the more common Cloud

1457
00:48:13,140 --> 00:48:16,220
security problems for you

1458
00:48:16,680 --> 00:48:18,240
so

1459
00:48:18,240 --> 00:48:21,119
to wrap things up

1460
00:48:21,119 --> 00:48:23,460
well Cloud's a bit of a different ball

1461
00:48:23,460 --> 00:48:25,260
game the broad security principles that

1462
00:48:25,260 --> 00:48:27,300
we've all used for years all still

1463
00:48:27,300 --> 00:48:30,540
applies uh the way that it works and the

1464
00:48:30,540 --> 00:48:32,220
way the organizations are building and

1465
00:48:32,220 --> 00:48:34,260
maintaining this stuff means that the

1466
00:48:34,260 --> 00:48:35,760
Practical applications of a lot of the

1467
00:48:35,760 --> 00:48:37,380
security stuff we used to do change

1468
00:48:37,380 --> 00:48:39,839
quite significantly in many cases right

1469
00:48:39,839 --> 00:48:42,480
in theory if you know what you're doing

1470
00:48:42,480 --> 00:48:44,220
I would argue the Cloud's probably

1471
00:48:44,220 --> 00:48:46,260
easier to defend and monitor than a lot

1472
00:48:46,260 --> 00:48:48,240
of our old school on-premises stuff in

1473
00:48:48,240 --> 00:48:50,040
theory it's built for it in practice

1474
00:48:50,040 --> 00:48:51,960
most organizations are struggling to get

1475
00:48:51,960 --> 00:48:53,460
a handle on how much of it they've got

1476
00:48:53,460 --> 00:48:55,319
and where it is and who knows about it

1477
00:48:55,319 --> 00:48:57,000
and having enough people who understand

1478
00:48:57,000 --> 00:48:59,220
it well enough so I don't think we're

1479
00:48:59,220 --> 00:49:00,180
going to get to that for most

1480
00:49:00,180 --> 00:49:02,520
organizations for a while yet but I

1481
00:49:02,520 --> 00:49:03,359
think we're moving in the right

1482
00:49:03,359 --> 00:49:05,160
direction

1483
00:49:05,160 --> 00:49:07,560
key security controls to take away no

1484
00:49:07,560 --> 00:49:09,540
surprise as I say MFA all the things is

1485
00:49:09,540 --> 00:49:10,740
the first thing you want to check for

1486
00:49:10,740 --> 00:49:12,960
and segregating and hardening your

1487
00:49:12,960 --> 00:49:14,460
individual environments so that it's

1488
00:49:14,460 --> 00:49:15,900
hard for an attacker to jump from one to

1489
00:49:15,900 --> 00:49:18,000
another it's really valuable

1490
00:49:18,000 --> 00:49:19,440
um given that the cloud is by default

1491
00:49:19,440 --> 00:49:21,720
obviously out on the internet

1492
00:49:21,720 --> 00:49:24,240
um and put a particular focus in on your

1493
00:49:24,240 --> 00:49:26,460
your code management platforms your CI

1494
00:49:26,460 --> 00:49:28,560
CD pipelines these sorts of things and

1495
00:49:28,560 --> 00:49:31,020
treat them as the crown jewels that they

1496
00:49:31,020 --> 00:49:32,579
really are actually for your your Cloud

1497
00:49:32,579 --> 00:49:34,880
security

1498
00:49:35,460 --> 00:49:38,099
and with that I think we've got time for

1499
00:49:38,099 --> 00:49:40,140
some questions

1500
00:49:40,140 --> 00:49:42,420
potentially and we've got a microphone

1501
00:49:42,420 --> 00:49:44,700
there if we've got a got any questions

1502
00:49:44,700 --> 00:49:46,319
or I just stunned the whole room into

1503
00:49:46,319 --> 00:49:47,520
silence because it can't have been that

1504
00:49:47,520 --> 00:49:48,780
good there we go we've got one down the

1505
00:49:48,780 --> 00:49:50,700
front here

1506
00:49:50,700 --> 00:49:52,140
sorry there's a microphone just just

1507
00:49:52,140 --> 00:49:54,980
coming okay

1508
00:49:55,700 --> 00:49:59,099
should be separated but uh in a sense

1509
00:49:59,099 --> 00:50:03,480
student therapy one concrete quality a

1510
00:50:03,480 --> 00:50:06,060
sermon pipeline that goes through the

1511
00:50:06,060 --> 00:50:07,980
development anti-guality assurance and

1512
00:50:07,980 --> 00:50:10,200
the products and so how do you how would

1513
00:50:10,200 --> 00:50:12,540
you separate them from Etc

1514
00:50:12,540 --> 00:50:14,400
right so the question is how do you

1515
00:50:14,400 --> 00:50:16,980
separate separate Dev and production

1516
00:50:16,980 --> 00:50:18,780
when really you should have a single

1517
00:50:18,780 --> 00:50:20,339
pipeline for the lot

1518
00:50:20,339 --> 00:50:22,319
I would run both off the same source

1519
00:50:22,319 --> 00:50:24,119
code repositories it's just that you

1520
00:50:24,119 --> 00:50:25,319
want to make sure that whatever's doing

1521
00:50:25,319 --> 00:50:27,240
the deployment that particular step

1522
00:50:27,240 --> 00:50:29,819
there is separated for your Dev accounts

1523
00:50:29,819 --> 00:50:31,440
from your production so that if an

1524
00:50:31,440 --> 00:50:33,300
attacker gets into one they don't also

1525
00:50:33,300 --> 00:50:35,880
have the other and so the way that I've

1526
00:50:35,880 --> 00:50:38,040
seen organizations do this so far is as

1527
00:50:38,040 --> 00:50:39,240
I say you run it all off the same

1528
00:50:39,240 --> 00:50:40,859
repository and then once it's been

1529
00:50:40,859 --> 00:50:42,359
promoted out of the development stages

1530
00:50:42,359 --> 00:50:44,400
and all that pipelines run fine it's

1531
00:50:44,400 --> 00:50:46,260
then merged into a branch that is

1532
00:50:46,260 --> 00:50:48,059
approved to go run through production so

1533
00:50:48,059 --> 00:50:49,619
all the steps that happen in the dev

1534
00:50:49,619 --> 00:50:51,780
pipeline are all assured before it gets

1535
00:50:51,780 --> 00:50:53,220
merged into the branch that then runs

1536
00:50:53,220 --> 00:50:54,720
down the second one hopefully that makes

1537
00:50:54,720 --> 00:50:56,700
sense

1538
00:50:56,700 --> 00:50:57,839
good

1539
00:50:57,839 --> 00:51:00,980
any other questions

1540
00:51:01,680 --> 00:51:03,540
all right in which case I'll be around

1541
00:51:03,540 --> 00:51:05,280
for a while down here and if not and

1542
00:51:05,280 --> 00:51:06,720
you'll probably see me elsewhere in the

1543
00:51:06,720 --> 00:51:08,160
conference the rest of the day thank you

1544
00:51:08,160 --> 00:51:09,480
for joining me today I hope you've

1545
00:51:09,480 --> 00:51:10,680
enjoyed it

1546
00:51:10,680 --> 00:51:14,000
um and I'll see you all over a beer

