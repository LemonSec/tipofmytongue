1
00:00:00,000 --> 00:00:10,820
[Music]

2
00:00:10,820 --> 00:00:11,990
thank you

3
00:00:11,990 --> 00:00:32,780
[Music]

4
00:00:32,780 --> 00:00:35,780
thank you

5
00:00:44,460 --> 00:00:46,020
hello

6
00:00:46,020 --> 00:00:48,180
can you hear me okay

7
00:00:48,180 --> 00:00:50,280
great

8
00:00:50,280 --> 00:00:53,280
uh it's nice to be here

9
00:00:53,280 --> 00:00:57,360
exciting times exploding beer kegs and I

10
00:00:57,360 --> 00:00:58,260
don't know

11
00:00:58,260 --> 00:01:00,120
it's fun

12
00:01:00,120 --> 00:01:02,280
and I just want to say that I love that

13
00:01:02,280 --> 00:01:04,938
this conference is named disobey because

14
00:01:04,938 --> 00:01:07,560
questioning things is kind of the

15
00:01:07,560 --> 00:01:09,080
foundation of

16
00:01:09,080 --> 00:01:12,619
uh the hiker mindset in my book

17
00:01:12,619 --> 00:01:15,299
questioning documentation questioning

18
00:01:15,299 --> 00:01:17,760
protocols questioning security models

19
00:01:17,760 --> 00:01:19,380
and most important questioning

20
00:01:19,380 --> 00:01:21,920
assumptions

21
00:01:22,920 --> 00:01:26,880
all right my name is Jonas I'm a

22
00:01:26,880 --> 00:01:30,119
community consultant for centaur which

23
00:01:30,119 --> 00:01:32,220
is a Swedish company I've been there for

24
00:01:32,220 --> 00:01:34,680
the last 10 years been doing what I do

25
00:01:34,680 --> 00:01:36,060
for the last

26
00:01:36,060 --> 00:01:38,400
13 years I think

27
00:01:38,400 --> 00:01:40,680
I've been hacking everything from web

28
00:01:40,680 --> 00:01:44,280
apps to active directory to as400 talk

29
00:01:44,280 --> 00:01:46,920
to me later if you have an as400 I love

30
00:01:46,920 --> 00:01:48,380
them

31
00:01:48,380 --> 00:01:51,360
nowadays I tend to

32
00:01:51,360 --> 00:01:54,180
focus more more on Windows security and

33
00:01:54,180 --> 00:01:55,860
active directory

34
00:01:55,860 --> 00:01:59,119
do a bit of red teaming

35
00:01:59,119 --> 00:02:03,720
that's fun messing with the blue teams I

36
00:02:03,720 --> 00:02:05,820
do code but I'm not good at it

37
00:02:05,820 --> 00:02:08,539
so what up

38
00:02:08,758 --> 00:02:10,440
um

39
00:02:10,440 --> 00:02:12,900
the scenario I'm talking about today

40
00:02:12,900 --> 00:02:14,700
is

41
00:02:14,700 --> 00:02:18,900
a scenario where an attacker

42
00:02:18,900 --> 00:02:21,480
has unprivileged

43
00:02:21,480 --> 00:02:24,840
access or foothold within an environment

44
00:02:24,840 --> 00:02:26,900
and we're a user

45
00:02:26,900 --> 00:02:28,640
of

46
00:02:28,640 --> 00:02:30,900
aerofensive tool sets

47
00:02:30,900 --> 00:02:34,800
is using that against a Target

48
00:02:34,800 --> 00:02:37,140
and we also have the victim which is in

49
00:02:37,140 --> 00:02:39,000
this case the user of the system that

50
00:02:39,000 --> 00:02:41,280
both the pen tester and attacker is is

51
00:02:41,280 --> 00:02:43,819
targeting

52
00:02:44,220 --> 00:02:45,060
um

53
00:02:45,060 --> 00:02:47,340
I'm going to focus on

54
00:02:47,340 --> 00:02:51,540
the impacted example scripts today

55
00:02:51,540 --> 00:02:53,340
um

56
00:02:53,340 --> 00:02:54,900
it's kind of lame because they're just

57
00:02:54,900 --> 00:02:56,400
examples

58
00:02:56,400 --> 00:02:58,140
but

59
00:02:58,140 --> 00:02:59,160
um

60
00:02:59,160 --> 00:03:02,099
they are good enough for the sake of

61
00:03:02,099 --> 00:03:04,860
this discussion of trust in offensive

62
00:03:04,860 --> 00:03:07,379
security tooling

63
00:03:07,379 --> 00:03:10,019
and also impacted tools are still used

64
00:03:10,019 --> 00:03:12,120
by both pen testers and attackers today

65
00:03:12,120 --> 00:03:14,040
so

66
00:03:14,040 --> 00:03:16,800
it's even more relevant

67
00:03:16,800 --> 00:03:18,780
and I noticed that some of these

68
00:03:18,780 --> 00:03:20,099
examples have imported to other

69
00:03:20,099 --> 00:03:23,720
platforms and languages as well

70
00:03:24,140 --> 00:03:27,840
a little disclaimer this this is

71
00:03:27,840 --> 00:03:29,400
basically what the maintainer said when

72
00:03:29,400 --> 00:03:32,340
I contacted them in November these are

73
00:03:32,340 --> 00:03:34,800
just examples they're not made for

74
00:03:34,800 --> 00:03:36,659
production

75
00:03:36,659 --> 00:03:38,640
um

76
00:03:38,640 --> 00:03:41,459
all vulnerabilities have not been fixed

77
00:03:41,459 --> 00:03:44,519
and there's no CVS but uh I will you

78
00:03:44,519 --> 00:03:48,360
know Supply the projects with the with

79
00:03:48,360 --> 00:03:50,600
changes

80
00:03:50,600 --> 00:03:50,879
[Music]

81
00:03:50,879 --> 00:03:51,959
um

82
00:03:51,959 --> 00:03:56,099
wow that went back right sorry

83
00:03:56,099 --> 00:03:59,280
and of course the code that I'm that I

84
00:03:59,280 --> 00:04:01,920
wrote to exploit these these issues will

85
00:04:01,920 --> 00:04:04,440
be released once the peers are done and

86
00:04:04,440 --> 00:04:06,120
this talk is not about detection I think

87
00:04:06,120 --> 00:04:07,739
that's important because even though I

88
00:04:07,739 --> 00:04:10,739
love bypassing AV and edrs

89
00:04:10,739 --> 00:04:12,659
um I mean the impacted tools that is

90
00:04:12,659 --> 00:04:13,500
pretty

91
00:04:13,500 --> 00:04:16,199
pretty known there are a lot of iocs and

92
00:04:16,199 --> 00:04:17,820
they will be killed right away if they

93
00:04:17,820 --> 00:04:21,358
have an IV running on the system

94
00:04:21,358 --> 00:04:23,940
um so if you want to be sneaky don't use

95
00:04:23,940 --> 00:04:25,440
the default examples without

96
00:04:25,440 --> 00:04:28,139
modifications

97
00:04:28,139 --> 00:04:29,940
and of course I believe in responsible

98
00:04:29,940 --> 00:04:32,460
disclosure so I you know contacted all

99
00:04:32,460 --> 00:04:34,500
the projects two days ago so they have

100
00:04:34,500 --> 00:04:37,040
what they need

101
00:04:37,740 --> 00:04:39,180
all right

102
00:04:39,180 --> 00:04:42,300
so what's in packets how many of you are

103
00:04:42,300 --> 00:04:44,699
pen testers using in packet in your like

104
00:04:44,699 --> 00:04:46,740
daily life I see

105
00:04:46,740 --> 00:04:48,600
a few hands

106
00:04:48,600 --> 00:04:52,560
I personally use them sometimes

107
00:04:52,560 --> 00:04:53,580
um

108
00:04:53,580 --> 00:04:55,259
they're pretty good they're a collection

109
00:04:55,259 --> 00:04:57,900
of python classes and you know protocol

110
00:04:57,900 --> 00:04:59,340
implementations

111
00:04:59,340 --> 00:05:03,120
of mainly protocols that's specific for

112
00:05:03,120 --> 00:05:06,479
for Windows and active directory uh they

113
00:05:06,479 --> 00:05:07,740
were pretty early with this there

114
00:05:07,740 --> 00:05:11,520
weren't that many other implementations

115
00:05:11,520 --> 00:05:13,740
um out there there's just you know

116
00:05:13,740 --> 00:05:15,720
window systems and it's

117
00:05:15,720 --> 00:05:17,220
sometimes you want to hack from a

118
00:05:17,220 --> 00:05:19,080
different platform

119
00:05:19,080 --> 00:05:20,040
um

120
00:05:20,040 --> 00:05:22,860
so they implemented SMB RPC in every you

121
00:05:22,860 --> 00:05:26,340
know RPC service on top of that which is

122
00:05:26,340 --> 00:05:29,520
pretty awesome if you think about it

123
00:05:29,520 --> 00:05:33,360
um you can also use different sorts of

124
00:05:33,360 --> 00:05:35,639
authentication like you can log in with

125
00:05:35,639 --> 00:05:37,740
a password you can log in with a empty

126
00:05:37,740 --> 00:05:39,180
hash that is stole or you can log in

127
00:05:39,180 --> 00:05:41,039
with a ticket that you found on a

128
00:05:41,039 --> 00:05:44,220
compromise box which gives you as a pen

129
00:05:44,220 --> 00:05:47,520
tester attacker a lot more flexibility

130
00:05:47,520 --> 00:05:49,139
the example scripts that I will be

131
00:05:49,139 --> 00:05:51,860
talking about today are Seekers dump

132
00:05:51,860 --> 00:05:55,639
smbxsec and PSX

133
00:05:57,600 --> 00:06:00,419
so let's start with with Seekers dump

134
00:06:00,419 --> 00:06:01,259
um

135
00:06:01,259 --> 00:06:03,120
this is a description from the project

136
00:06:03,120 --> 00:06:06,780
itself it performs various techniques to

137
00:06:06,780 --> 00:06:10,259
dump hashes from remote machines without

138
00:06:10,259 --> 00:06:12,479
executing any code so it basically only

139
00:06:12,479 --> 00:06:14,520
use remote registry and

140
00:06:14,520 --> 00:06:15,960
stuff like that

141
00:06:15,960 --> 00:06:18,479
uh it's used for post exploitation if

142
00:06:18,479 --> 00:06:20,100
you haven't used this tool before it's

143
00:06:20,100 --> 00:06:22,500
what you use when you already compromise

144
00:06:22,500 --> 00:06:25,740
an account which has admin privileges on

145
00:06:25,740 --> 00:06:28,199
the box and use it over the network to

146
00:06:28,199 --> 00:06:30,600
dump Seekers that store in within the

147
00:06:30,600 --> 00:06:33,020
registry

148
00:06:33,840 --> 00:06:35,940
um and here's a few examples of what you

149
00:06:35,940 --> 00:06:37,860
get from running this you get service

150
00:06:37,860 --> 00:06:39,720
credentials because if you configure a

151
00:06:39,720 --> 00:06:43,380
service with another account then you

152
00:06:43,380 --> 00:06:45,000
know the built-in system accounts or

153
00:06:45,000 --> 00:06:48,539
service counts uh you need the clear

154
00:06:48,539 --> 00:06:50,340
text password for that account and

155
00:06:50,340 --> 00:06:53,539
that's stored within the registry

156
00:06:53,880 --> 00:06:55,440
you of course get the local password

157
00:06:55,440 --> 00:06:57,479
hashes or password hashes for local

158
00:06:57,479 --> 00:07:01,259
users you can try to crack them if for

159
00:07:01,259 --> 00:07:03,660
example the local administrator is has

160
00:07:03,660 --> 00:07:05,520
the same password everywhere which is

161
00:07:05,520 --> 00:07:08,580
not that common anymore when since Labs

162
00:07:08,580 --> 00:07:09,900
came around

163
00:07:09,900 --> 00:07:12,539
but you can also just pass the hash over

164
00:07:12,539 --> 00:07:14,960
the network

165
00:07:15,120 --> 00:07:16,560
um the computer account is pretty

166
00:07:16,560 --> 00:07:18,240
interesting if you're on a domain join

167
00:07:18,240 --> 00:07:19,860
box because you can use that to create

168
00:07:19,860 --> 00:07:22,919
like silver tickets and act as the

169
00:07:22,919 --> 00:07:25,319
computer account and do Shadow creds and

170
00:07:25,319 --> 00:07:27,900
stuff like that cash credentials or

171
00:07:27,900 --> 00:07:31,440
interactive logons that's cached in a

172
00:07:31,440 --> 00:07:33,539
bit better format than just the plain

173
00:07:33,539 --> 00:07:36,120
antihash so you can if you have a

174
00:07:36,120 --> 00:07:38,699
compromise server and you want to

175
00:07:38,699 --> 00:07:42,000
uh compromise the cast login credentials

176
00:07:42,000 --> 00:07:44,220
for admin users that been logging on

177
00:07:44,220 --> 00:07:45,960
that box earlier you can you can try to

178
00:07:45,960 --> 00:07:47,099
crack this one

179
00:07:47,099 --> 00:07:49,080
so this is a result from running the

180
00:07:49,080 --> 00:07:51,720
script so this is kind of how you use it

181
00:07:51,720 --> 00:07:54,060
if you're on a calling box

182
00:07:54,060 --> 00:07:54,780
um

183
00:07:54,780 --> 00:07:57,660
and this is how it works it start off by

184
00:07:57,660 --> 00:08:00,539
enabling the remote registry

185
00:08:00,539 --> 00:08:03,660
and get the boot key from the system

186
00:08:03,660 --> 00:08:07,500
Hive and the boot key is the encryption

187
00:08:07,500 --> 00:08:09,419
key that all the other secrets are

188
00:08:09,419 --> 00:08:11,340
obfuscated with

189
00:08:11,340 --> 00:08:14,340
and that's not really restricted anyone

190
00:08:14,340 --> 00:08:16,440
on the box or with the access remote

191
00:08:16,440 --> 00:08:18,319
address you can access that

192
00:08:18,319 --> 00:08:20,099
then

193
00:08:20,099 --> 00:08:24,479
in packet will save the registry Hive to

194
00:08:24,479 --> 00:08:26,819
Temp file and this is necessary because

195
00:08:26,819 --> 00:08:29,879
the ACL the access control on the

196
00:08:29,879 --> 00:08:31,620
somehive is pretty restricted it's only

197
00:08:31,620 --> 00:08:33,958
system that can actually read the

198
00:08:33,958 --> 00:08:37,500
information there so by storing it as a

199
00:08:37,500 --> 00:08:40,140
file and that's an RPC function to do

200
00:08:40,140 --> 00:08:42,899
that it can then

201
00:08:42,899 --> 00:08:45,360
access that file or an admin share and

202
00:08:45,360 --> 00:08:48,180
then parse that file offline to get the

203
00:08:48,180 --> 00:08:50,100
the secret information or the sensitive

204
00:08:50,100 --> 00:08:51,720
information and the same thing with the

205
00:08:51,720 --> 00:08:54,779
system high where all the LSR LSA

206
00:08:54,779 --> 00:08:56,700
secrets are like service counts and

207
00:08:56,700 --> 00:08:58,800
stuff like that

208
00:08:58,800 --> 00:09:01,019
then it removes the temporary files and

209
00:09:01,019 --> 00:09:03,300
disables remote registry that's how it

210
00:09:03,300 --> 00:09:04,320
works

211
00:09:04,320 --> 00:09:07,800
so a little demo in this case

212
00:09:07,800 --> 00:09:10,860
we have a standard an attacker with only

213
00:09:10,860 --> 00:09:13,140
standard user privileges on the box

214
00:09:13,140 --> 00:09:16,320
running tools and we have a pen tester

215
00:09:16,320 --> 00:09:18,000
that runs secret stump against the

216
00:09:18,000 --> 00:09:20,180
target

217
00:09:20,760 --> 00:09:24,660
so to the left we have the attacker to

218
00:09:24,660 --> 00:09:27,980
the right we have a low producer

219
00:09:27,980 --> 00:09:32,360
that runs a tool that I wrote

220
00:09:38,459 --> 00:09:40,800
so enables remote registry it dumps the

221
00:09:40,800 --> 00:09:43,140
ashes and as you can see

222
00:09:43,140 --> 00:09:45,120
the temporary files that's stored in

223
00:09:45,120 --> 00:09:47,459
season 32 that's actually the system and

224
00:09:47,459 --> 00:09:50,459
Sam Hive all right sorry the Sam and the

225
00:09:50,459 --> 00:09:52,980
and the security hype and that's all you

226
00:09:52,980 --> 00:09:55,800
need to do the exact same thing as a

227
00:09:55,800 --> 00:09:59,240
that's a pen tester in this case

228
00:09:59,820 --> 00:10:02,700
so to demonstrate this I could have

229
00:10:02,700 --> 00:10:04,260
wrote a tool that did this on the box

230
00:10:04,260 --> 00:10:06,899
itself and then you know continue with

231
00:10:06,899 --> 00:10:09,180
the steps to to escalate privileges

232
00:10:09,180 --> 00:10:11,519
using that information

233
00:10:11,519 --> 00:10:12,260
um

234
00:10:12,260 --> 00:10:15,180
but I could in this case a rather just

235
00:10:15,180 --> 00:10:18,420
copy the registry hives of of the books

236
00:10:18,420 --> 00:10:20,940
and use the same in packet scripts but

237
00:10:20,940 --> 00:10:25,440
locally on the on the registry files

238
00:10:25,440 --> 00:10:27,839
just to prove that uh the same

239
00:10:27,839 --> 00:10:29,640
information what you need there is the

240
00:10:29,640 --> 00:10:33,360
boot key which is accessible from

241
00:10:33,360 --> 00:10:35,339
a standard user perspective in this case

242
00:10:35,339 --> 00:10:38,100
using a Powershell script

243
00:10:38,100 --> 00:10:42,320
and using that we get the same info

244
00:10:43,440 --> 00:10:45,180
all right so

245
00:10:45,180 --> 00:10:47,399
this is actually a local previous

246
00:10:47,399 --> 00:10:50,279
in a packet and what happened here is

247
00:10:50,279 --> 00:10:51,120
that

248
00:10:51,120 --> 00:10:53,579
the tool that I wrote just waits for the

249
00:10:53,579 --> 00:10:56,700
temp files to be created in season 32.

250
00:10:56,700 --> 00:10:58,800
copies those two different place before

251
00:10:58,800 --> 00:11:00,720
they were removed by the secret snap

252
00:11:00,720 --> 00:11:03,300
script get the boot key of course you

253
00:11:03,300 --> 00:11:04,440
need that

254
00:11:04,440 --> 00:11:07,140
and then dump the local hashes and

255
00:11:07,140 --> 00:11:09,959
secrets and then you can pass the hash

256
00:11:09,959 --> 00:11:12,240
of the local admin administrator or if

257
00:11:12,240 --> 00:11:13,740
it's a domain during machine you can do

258
00:11:13,740 --> 00:11:16,140
the you know silver ticket attack to

259
00:11:16,140 --> 00:11:19,939
impersonate any user on the box

260
00:11:21,360 --> 00:11:23,760
and after discovering this I noticed

261
00:11:23,760 --> 00:11:24,720
that

262
00:11:24,720 --> 00:11:27,180
pretty much this exact same behavior and

263
00:11:27,180 --> 00:11:28,440
exact same

264
00:11:28,440 --> 00:11:32,579
code is ported to different tools crap

265
00:11:32,579 --> 00:11:35,279
map exec actually just bundles in

266
00:11:35,279 --> 00:11:37,380
packets because it's also a python tool

267
00:11:37,380 --> 00:11:39,540
Metasploit of course it's it's written

268
00:11:39,540 --> 00:11:42,600
in Ruby so it's they copy the the code

269
00:11:42,600 --> 00:11:45,180
row by row uh exactly the same behavior

270
00:11:45,180 --> 00:11:48,360
sharp SEC dump is a net port of these

271
00:11:48,360 --> 00:11:50,220
tools a little bit different Behavior

272
00:11:50,220 --> 00:11:52,980
different fire extension and so on so my

273
00:11:52,980 --> 00:11:56,640
tool won't work directly

274
00:11:56,640 --> 00:11:58,560
this is how the code looks for

275
00:11:58,560 --> 00:11:59,820
seekerstorm

276
00:11:59,820 --> 00:12:03,060
when it retrieves a register hive

277
00:12:03,060 --> 00:12:05,940
it creates a random file name with that

278
00:12:05,940 --> 00:12:08,459
TMP extension

279
00:12:08,459 --> 00:12:12,720
and it proceeds by calling

280
00:12:12,720 --> 00:12:17,279
let me see here calling the save key

281
00:12:17,279 --> 00:12:20,160
to that thumb file and then since this

282
00:12:20,160 --> 00:12:22,740
code is run on the client it retrieves

283
00:12:22,740 --> 00:12:27,600
the term file through the admin chair

284
00:12:27,600 --> 00:12:29,519
um

285
00:12:29,519 --> 00:12:31,260
the interesting thing is that

286
00:12:31,260 --> 00:12:34,200
documentation in the script says that

287
00:12:34,200 --> 00:12:35,820
it's supposed to be saving it in the

288
00:12:35,820 --> 00:12:39,300
temp file but I try to look as far back

289
00:12:39,300 --> 00:12:41,160
as I could in the repo and I couldn't

290
00:12:41,160 --> 00:12:42,660
find any implementation that actually

291
00:12:42,660 --> 00:12:45,300
did that but at least I kind of had the

292
00:12:45,300 --> 00:12:48,139
right thoughts from the beginning

293
00:12:48,360 --> 00:12:50,459
all right so this is the shop SEC dump

294
00:12:50,459 --> 00:12:52,019
they just have a different file

295
00:12:52,019 --> 00:12:55,079
extension and store it directly in the

296
00:12:55,079 --> 00:12:56,820
windows directory but that's also

297
00:12:56,820 --> 00:12:58,800
accessible for standard users so it's no

298
00:12:58,800 --> 00:13:00,620
difference

299
00:13:00,620 --> 00:13:04,260
manosploits use TMP

300
00:13:04,260 --> 00:13:07,740
and system 32 and this is here to you

301
00:13:07,740 --> 00:13:08,579
know

302
00:13:08,579 --> 00:13:11,459
a quick demo that it works with with the

303
00:13:11,459 --> 00:13:14,420
manuscript as well

304
00:13:16,440 --> 00:13:18,680
they actually fixed this yesterday

305
00:13:18,680 --> 00:13:22,200
merged the pr in the repo so it's fixed

306
00:13:22,200 --> 00:13:24,380
now

307
00:13:28,560 --> 00:13:31,399
hmm

308
00:13:32,880 --> 00:13:34,680
all right so the solution is pretty

309
00:13:34,680 --> 00:13:38,100
simple just put the register hives in

310
00:13:38,100 --> 00:13:40,320
the temp director instead because the

311
00:13:40,320 --> 00:13:42,720
term temp directory is kind of a special

312
00:13:42,720 --> 00:13:44,639
directory it's

313
00:13:44,639 --> 00:13:47,959
allows users to create files

314
00:13:47,959 --> 00:13:51,360
owners of files have full access

315
00:13:51,360 --> 00:13:54,420
but standard users can't list files so

316
00:13:54,420 --> 00:13:55,740
if you have like a random file name

317
00:13:55,740 --> 00:13:58,980
there will be really hard for a standard

318
00:13:58,980 --> 00:14:02,459
user to Guess that file name

319
00:14:02,459 --> 00:14:04,800
um that's also a good tip if you're like

320
00:14:04,800 --> 00:14:06,839
a red team or doing pen test stuff that

321
00:14:06,839 --> 00:14:11,279
you put in in Windows tnp or temp file

322
00:14:11,279 --> 00:14:15,660
is fairly well well protected

323
00:14:15,660 --> 00:14:17,940
all right so this is how the vulnerable

324
00:14:17,940 --> 00:14:19,500
version Look if you look at it in

325
00:14:19,500 --> 00:14:22,800
process monitor you can see that like

326
00:14:22,800 --> 00:14:25,100
this is the original vulnerable version

327
00:14:25,100 --> 00:14:27,899
putting the temp files in the system32

328
00:14:27,899 --> 00:14:30,480
and the fixed version put put them in

329
00:14:30,480 --> 00:14:32,040
the temp directory instead pretty simple

330
00:14:32,040 --> 00:14:34,339
fix

331
00:14:35,880 --> 00:14:37,740
all right

332
00:14:37,740 --> 00:14:41,279
moving on to the SMB exec this is a

333
00:14:41,279 --> 00:14:45,540
different tool is described as a similar

334
00:14:45,540 --> 00:14:47,760
approach to PSX which is the next tool

335
00:14:47,760 --> 00:14:49,440
I'll be talking about but basically what

336
00:14:49,440 --> 00:14:51,540
it's what does its latter movement you

337
00:14:51,540 --> 00:14:52,980
already compromise the machine and you

338
00:14:52,980 --> 00:14:56,040
want to execute code uh prefer layer

339
00:14:56,040 --> 00:14:56,820
system

340
00:14:56,820 --> 00:14:59,940
it does so by creating a service at the

341
00:14:59,940 --> 00:15:02,060
Target

342
00:15:02,699 --> 00:15:04,740
in this case the service has a fixed

343
00:15:04,740 --> 00:15:10,279
name so not that sneaky

344
00:15:10,380 --> 00:15:11,459
um

345
00:15:11,459 --> 00:15:15,420
it writes the it creates a service and

346
00:15:15,420 --> 00:15:18,240
then sets the binary path to the command

347
00:15:18,240 --> 00:15:21,060
or a specific command line

348
00:15:21,060 --> 00:15:23,519
um the command line actually takes the

349
00:15:23,519 --> 00:15:26,040
command that you want to execute and

350
00:15:26,040 --> 00:15:31,139
then redirects that to execute.batch

351
00:15:31,440 --> 00:15:33,959
and then it executes that batch file

352
00:15:33,959 --> 00:15:35,399
and

353
00:15:35,399 --> 00:15:37,440
the output from the command is

354
00:15:37,440 --> 00:15:39,600
redirected to

355
00:15:39,600 --> 00:15:42,899
um an output file this is something that

356
00:15:42,899 --> 00:15:46,199
I like to call a poor man's pipe you

357
00:15:46,199 --> 00:15:48,060
redirect output to a file and then you

358
00:15:48,060 --> 00:15:51,300
read the file of the admin share

359
00:15:51,300 --> 00:15:53,100
so this is kind of a simplification of

360
00:15:53,100 --> 00:15:56,220
how the service binary path is set up it

361
00:15:56,220 --> 00:16:00,320
echoes the path with some escaping

362
00:16:01,019 --> 00:16:03,420
to the execute batch file and then it

363
00:16:03,420 --> 00:16:05,100
executes that in the same command line

364
00:16:05,100 --> 00:16:09,139
and deletes it in the same command line

365
00:16:10,079 --> 00:16:12,779
all right in this scenario it is exact

366
00:16:12,779 --> 00:16:15,180
same as as for Seekers dump we have an

367
00:16:15,180 --> 00:16:18,720
attacker with standard permissions like

368
00:16:18,720 --> 00:16:21,320
standard user on the box

369
00:16:21,320 --> 00:16:25,139
and a penetration tester launching SMB

370
00:16:25,139 --> 00:16:27,899
exec towards the target

371
00:16:27,899 --> 00:16:31,980
I want to see to the right is a process

372
00:16:31,980 --> 00:16:33,240
Explorer

373
00:16:33,240 --> 00:16:37,019
and then the attackers running the tool

374
00:16:37,019 --> 00:16:38,940
and to the left we have

375
00:16:38,940 --> 00:16:42,320
the pen tester

376
00:16:44,339 --> 00:16:45,720
so

377
00:16:45,720 --> 00:16:48,060
the commands executed by the Panthers so

378
00:16:48,060 --> 00:16:50,339
it's executed our system

379
00:16:50,339 --> 00:16:52,680
when you run the tool and try to launch

380
00:16:52,680 --> 00:16:55,199
commands

381
00:16:55,199 --> 00:16:57,839
you won't get any output what you see is

382
00:16:57,839 --> 00:16:59,279
that the

383
00:16:59,279 --> 00:17:03,000
uh the payload or the command that the

384
00:17:03,000 --> 00:17:05,459
attacker wants to run spawns the notepad

385
00:17:05,459 --> 00:17:10,280
which is a child process of a few cmds

386
00:17:10,679 --> 00:17:12,839
so what happened here well this is a

387
00:17:12,839 --> 00:17:14,640
kind of a local previous escalation as

388
00:17:14,640 --> 00:17:15,980
well

389
00:17:15,980 --> 00:17:18,720
the commands are temporary stored in

390
00:17:18,720 --> 00:17:20,939
execute batch

391
00:17:20,939 --> 00:17:22,799
it's in the temp directory and as you

392
00:17:22,799 --> 00:17:25,559
remember I said before anyone can

393
00:17:25,559 --> 00:17:30,439
create files in the temp directory

394
00:17:30,540 --> 00:17:32,460
um owners have full permissions so in

395
00:17:32,460 --> 00:17:34,200
this case a kind of a race condition

396
00:17:34,200 --> 00:17:36,620
since the path is fixed

397
00:17:36,620 --> 00:17:40,440
the attacker can just

398
00:17:40,440 --> 00:17:43,640
create the file

399
00:17:45,059 --> 00:17:46,980
if I do this as a standard user the

400
00:17:46,980 --> 00:17:49,919
standard user is the owner of the file

401
00:17:49,919 --> 00:17:52,860
it creates some opportunistic lock on

402
00:17:52,860 --> 00:17:55,500
the file and this is just to

403
00:17:55,500 --> 00:17:58,440
get kind of a callback on when the

404
00:17:58,440 --> 00:18:00,960
actual script the privilege service is

405
00:18:00,960 --> 00:18:03,179
trying to write to that file

406
00:18:03,179 --> 00:18:05,520
because we want to get into the in

407
00:18:05,520 --> 00:18:08,100
between the service right in the command

408
00:18:08,100 --> 00:18:12,000
to the file and executing the file

409
00:18:12,000 --> 00:18:13,740
so the op block will be released when

410
00:18:13,740 --> 00:18:15,260
SMB exec

411
00:18:15,260 --> 00:18:20,039
writes the the command to execute batch

412
00:18:20,039 --> 00:18:21,900
and then just replace the content with

413
00:18:21,900 --> 00:18:23,340
the payload that the attacker wants to

414
00:18:23,340 --> 00:18:25,320
run

415
00:18:25,320 --> 00:18:27,660
and that's wrong with the Privileges of

416
00:18:27,660 --> 00:18:31,039
the of the service which is system

417
00:18:31,620 --> 00:18:33,299
and we're good

418
00:18:33,299 --> 00:18:35,580
so I can demonstrate this in a few

419
00:18:35,580 --> 00:18:39,780
simple steps in this case it's a an

420
00:18:39,780 --> 00:18:42,059
admin user that creates a file within

421
00:18:42,059 --> 00:18:44,580
the TMP within the temp file directory

422
00:18:44,580 --> 00:18:47,340
sorry and as you can see

423
00:18:47,340 --> 00:18:50,940
only system and administrators group are

424
00:18:50,940 --> 00:18:54,600
have full permissions on that file

425
00:18:54,600 --> 00:18:58,820
if you do the same with a standard user

426
00:18:58,820 --> 00:19:00,900
the standard user will have full

427
00:19:00,900 --> 00:19:01,980
permissions

428
00:19:01,980 --> 00:19:05,480
and even though the admin in this case

429
00:19:05,480 --> 00:19:08,160
redirects output to the file

430
00:19:08,160 --> 00:19:11,039
the owner is still the standard user and

431
00:19:11,039 --> 00:19:13,799
that's exactly how this little trick

432
00:19:13,799 --> 00:19:17,179
exploits smbxx

433
00:19:17,940 --> 00:19:20,340
the solution in this case is also fairly

434
00:19:20,340 --> 00:19:22,080
simple just create the batch file

435
00:19:22,080 --> 00:19:24,240
somewhere where standard users can't

436
00:19:24,240 --> 00:19:25,559
write

437
00:19:25,559 --> 00:19:28,500
and it's also I think it's it's good to

438
00:19:28,500 --> 00:19:31,200
use a random file name because it solves

439
00:19:31,200 --> 00:19:33,240
other issues but

440
00:19:33,240 --> 00:19:36,860
it's not really a fix on its own

441
00:19:37,260 --> 00:19:39,120
this is how it looks when the vulnerable

442
00:19:39,120 --> 00:19:41,960
code is is executed

443
00:19:41,960 --> 00:19:44,220
just a bunch of read and write

444
00:19:44,220 --> 00:19:48,679
operations to a fixed path

445
00:19:52,620 --> 00:19:56,940
and the fixed version use random file

446
00:19:56,940 --> 00:20:00,660
names in in the windows path

447
00:20:00,660 --> 00:20:02,660
um

448
00:20:04,740 --> 00:20:05,880
all right

449
00:20:05,880 --> 00:20:10,140
moving on to ps6 this

450
00:20:10,140 --> 00:20:13,919
is described as a piece exact like

451
00:20:13,919 --> 00:20:15,660
uh

452
00:20:15,660 --> 00:20:18,840
functionality using a ramcom service

453
00:20:18,840 --> 00:20:21,960
and the ramcom service is a different

454
00:20:21,960 --> 00:20:24,720
open source project which is

455
00:20:24,720 --> 00:20:27,299
about 10 or 13 years old something like

456
00:20:27,299 --> 00:20:29,480
that

457
00:20:30,360 --> 00:20:32,760
this tool is used for lateral movements

458
00:20:32,760 --> 00:20:35,520
it's kind of like SMB exact but you

459
00:20:35,520 --> 00:20:38,280
actually copy binary to the to the

460
00:20:38,280 --> 00:20:41,418
Target and execute it

461
00:20:42,840 --> 00:20:47,039
this is how the original version of PSX

462
00:20:47,039 --> 00:20:50,039
looks like it's it's Francis internals

463
00:20:50,039 --> 00:20:53,220
now Microsoft's so this is like a sign

464
00:20:53,220 --> 00:20:56,220
binary it's been used for ages at

465
00:20:56,220 --> 00:20:57,840
different organizations

466
00:20:57,840 --> 00:21:00,179
so it's pretty handy even if you just

467
00:21:00,179 --> 00:21:03,000
want to escalate to like local system on

468
00:21:03,000 --> 00:21:06,740
a box it's pretty handy

469
00:21:06,900 --> 00:21:10,080
it starts off with extracting a service

470
00:21:10,080 --> 00:21:11,360
binary

471
00:21:11,360 --> 00:21:15,660
that's stored as a resource within the p

472
00:21:15,660 --> 00:21:18,960
e executable

473
00:21:19,380 --> 00:21:22,260
uh it then copies that file to the

474
00:21:22,260 --> 00:21:26,360
Target using admin shares

475
00:21:28,740 --> 00:21:30,659
it creates a new service

476
00:21:30,659 --> 00:21:34,520
which is called PSX service

477
00:21:35,400 --> 00:21:37,320
it creates a name pipe with the same

478
00:21:37,320 --> 00:21:38,580
name

479
00:21:38,580 --> 00:21:42,000
pipes in in Windows is kind of like a

480
00:21:42,000 --> 00:21:43,320
yeah

481
00:21:43,320 --> 00:21:45,960
I know what the equivalent of in Linux

482
00:21:45,960 --> 00:21:49,080
is but it's a fairly generic type of

483
00:21:49,080 --> 00:21:50,820
object that's accessible over the

484
00:21:50,820 --> 00:21:53,220
network as well

485
00:21:53,220 --> 00:21:55,820
and it's kind of integrated within the

486
00:21:55,820 --> 00:21:58,500
security system of windows so you can

487
00:21:58,500 --> 00:22:02,100
set access control on name pipe and so

488
00:22:02,100 --> 00:22:03,960
on

489
00:22:03,960 --> 00:22:07,280
it then proceeds with copying a

490
00:22:07,280 --> 00:22:09,059
encryption key

491
00:22:09,059 --> 00:22:11,460
to the assistance to the windows

492
00:22:11,460 --> 00:22:13,620
directory and this is actually a pretty

493
00:22:13,620 --> 00:22:17,340
new it used to have like a I think a

494
00:22:17,340 --> 00:22:19,740
fixed encryption but it was a guy from

495
00:22:19,740 --> 00:22:22,980
turnable a few years ago that found a

496
00:22:22,980 --> 00:22:25,380
really interesting vulnerabilities in

497
00:22:25,380 --> 00:22:28,799
in peace exec and I think this was the

498
00:22:28,799 --> 00:22:30,720
solution because this is what's the key

499
00:22:30,720 --> 00:22:32,520
that's actually used to kind of encrypt

500
00:22:32,520 --> 00:22:35,039
the traffic that sent over the name pipe

501
00:22:35,039 --> 00:22:38,000
nowadays

502
00:22:39,120 --> 00:22:42,299
it continues to like the client portal

503
00:22:42,299 --> 00:22:44,400
piece exact connects to the name pipe

504
00:22:44,400 --> 00:22:47,580
and this is like the command pipe

505
00:22:47,580 --> 00:22:49,679
it sends commands

506
00:22:49,679 --> 00:22:52,440
um I know that piece exec have more

507
00:22:52,440 --> 00:22:54,659
features than just running code as a

508
00:22:54,659 --> 00:22:56,340
system but

509
00:22:56,340 --> 00:22:58,440
uh

510
00:22:58,440 --> 00:23:01,440
it then creates a

511
00:23:01,440 --> 00:23:03,600
separate pipe or three separate pipes

512
00:23:03,600 --> 00:23:05,400
one for standard in one for standard out

513
00:23:05,400 --> 00:23:07,200
and one for standard error

514
00:23:07,200 --> 00:23:09,600
that's used to like redirect all the

515
00:23:09,600 --> 00:23:13,580
streams to to the Target

516
00:23:15,179 --> 00:23:17,700
what the hell

517
00:23:17,700 --> 00:23:19,559
interesting jump there

518
00:23:19,559 --> 00:23:22,460
not sure what happened

519
00:23:35,039 --> 00:23:37,940
sorry about that

520
00:23:43,679 --> 00:23:46,700
right where were we

521
00:23:47,520 --> 00:23:50,220
yeah so now the process has three

522
00:23:50,220 --> 00:23:51,600
separate pipes

523
00:23:51,600 --> 00:23:53,880
um the client waits for

524
00:23:53,880 --> 00:23:56,940
uh for the process to exit

525
00:23:56,940 --> 00:23:59,400
and stops the service

526
00:23:59,400 --> 00:24:01,200
removes the service and removes the

527
00:24:01,200 --> 00:24:02,940
service binary

528
00:24:02,940 --> 00:24:06,960
okay so the impacted version of this uh

529
00:24:06,960 --> 00:24:09,299
I think we could safely say that it was

530
00:24:09,299 --> 00:24:12,480
written a very long time ago

531
00:24:12,480 --> 00:24:15,000
um it doesn't may make the exact

532
00:24:15,000 --> 00:24:16,620
Behavior nowadays

533
00:24:16,620 --> 00:24:19,799
it uses a third-party binary that's

534
00:24:19,799 --> 00:24:21,600
called remcom

535
00:24:21,600 --> 00:24:23,760
um it's a property called remcom

536
00:24:23,760 --> 00:24:27,299
and it used the remcon service part

537
00:24:27,299 --> 00:24:30,000
and just like PSX it bundles that as a

538
00:24:30,000 --> 00:24:33,000
resource it writes that to the Target

539
00:24:33,000 --> 00:24:37,280
over the admin share

540
00:24:37,500 --> 00:24:40,559
it creates a new service

541
00:24:40,559 --> 00:24:43,080
with a random name

542
00:24:43,080 --> 00:24:45,360
because that's apparently what hackers

543
00:24:45,360 --> 00:24:46,620
do

544
00:24:46,620 --> 00:24:49,880
um then it creates a name pipe

545
00:24:49,880 --> 00:24:53,760
and it's misspelled originally 13 years

546
00:24:53,760 --> 00:24:55,440
ago so it's not

547
00:24:55,440 --> 00:24:58,520
it's not my mistake

548
00:24:59,760 --> 00:25:02,340
it then proceeds just like the original

549
00:25:02,340 --> 00:25:04,860
connected to the name pipe sends

550
00:25:04,860 --> 00:25:06,960
commands over the name pipe

551
00:25:06,960 --> 00:25:10,200
creates a separate pipe for each stream

552
00:25:10,200 --> 00:25:11,880
to read the the output and forward

553
00:25:11,880 --> 00:25:15,360
inputs it waits for the process to exit

554
00:25:15,360 --> 00:25:18,720
stops the service leads the service

555
00:25:18,720 --> 00:25:20,940
and remote SRS binary

556
00:25:20,940 --> 00:25:22,559
the interesting thing here is that it's

557
00:25:22,559 --> 00:25:24,720
a client that's responsible for all the

558
00:25:24,720 --> 00:25:25,620
cleanup

559
00:25:25,620 --> 00:25:28,740
so if you interrupt somewhere in in the

560
00:25:28,740 --> 00:25:29,520
middle

561
00:25:29,520 --> 00:25:31,320
the service with the random name and

562
00:25:31,320 --> 00:25:33,000
around the binary will still be there

563
00:25:33,000 --> 00:25:37,760
until the the boxes restarted

564
00:25:39,360 --> 00:25:43,260
right on to the next demo

565
00:25:43,260 --> 00:25:45,380
in this situation it's a bit different

566
00:25:45,380 --> 00:25:48,900
we still have the pen tester using the

567
00:25:48,900 --> 00:25:51,539
tool with local admin privs against the

568
00:25:51,539 --> 00:25:53,880
target the attacker in this case is not

569
00:25:53,880 --> 00:25:55,820
on the box

570
00:25:55,820 --> 00:25:58,740
but it's on the same network it has user

571
00:25:58,740 --> 00:26:00,900
credentials not admin credentials for

572
00:26:00,900 --> 00:26:01,860
the Box

573
00:26:01,860 --> 00:26:05,400
but it it can you know connect to the uh

574
00:26:05,400 --> 00:26:08,120
to the Target

575
00:26:08,820 --> 00:26:13,260
so to the left we have the attacker

576
00:26:13,260 --> 00:26:15,659
uh no to the left we have the pen tester

577
00:26:15,659 --> 00:26:19,320
uh to the right we have the attacker

578
00:26:19,320 --> 00:26:22,559
so first uh I'm just showing that the

579
00:26:22,559 --> 00:26:25,620
low preview user can't run the tool

580
00:26:25,620 --> 00:26:28,380
itself because it don't have admin

581
00:26:28,380 --> 00:26:30,840
credentials on the box

582
00:26:30,840 --> 00:26:33,840
when running as a local admin you get a

583
00:26:33,840 --> 00:26:34,919
shell

584
00:26:34,919 --> 00:26:37,559
you can execute code a system and do all

585
00:26:37,559 --> 00:26:40,039
the fun stuff

586
00:26:41,400 --> 00:26:43,020
what happens if you run a modified

587
00:26:43,020 --> 00:26:45,720
version of the client

588
00:26:45,720 --> 00:26:47,340
that you can just connect to the same

589
00:26:47,340 --> 00:26:48,659
pipe

590
00:26:48,659 --> 00:26:50,760
as a standard user

591
00:26:50,760 --> 00:26:54,179
while the pen testers own in the Box you

592
00:26:54,179 --> 00:26:56,720
can own the Box

593
00:26:59,039 --> 00:27:00,240
and

594
00:27:00,240 --> 00:27:02,760
of course then you need to like

595
00:27:02,760 --> 00:27:04,640
connect to that pipe

596
00:27:04,640 --> 00:27:09,080
at the same time as a pen tester

597
00:27:09,179 --> 00:27:11,159
but then again

598
00:27:11,159 --> 00:27:14,520
if a pen tester is disconnected right in

599
00:27:14,520 --> 00:27:17,460
the middle of a piece exec session like

600
00:27:17,460 --> 00:27:18,419
this

601
00:27:18,419 --> 00:27:20,820
the service still be there running the

602
00:27:20,820 --> 00:27:23,279
pipe is accessible until the box is

603
00:27:23,279 --> 00:27:24,480
restarted

604
00:27:24,480 --> 00:27:27,120
and this is actually pretty bad

605
00:27:27,120 --> 00:27:29,779
I'd say

606
00:27:30,059 --> 00:27:32,279
and even though you do a you know

607
00:27:32,279 --> 00:27:34,500
different connection the service will be

608
00:27:34,500 --> 00:27:36,419
named differently the binaries will be

609
00:27:36,419 --> 00:27:38,880
differently will be different and the

610
00:27:38,880 --> 00:27:40,799
pipe the old pipe the whole service will

611
00:27:40,799 --> 00:27:43,559
still be there functioning exposing the

612
00:27:43,559 --> 00:27:44,400
the

613
00:27:44,400 --> 00:27:46,799
uh the box to

614
00:27:46,799 --> 00:27:51,620
any user within the domain of them

615
00:27:52,140 --> 00:27:54,120
right so

616
00:27:54,120 --> 00:27:57,360
this is what went wrong the remcon

617
00:27:57,360 --> 00:27:59,880
service surprised the 10 year old

618
00:27:59,880 --> 00:28:04,039
service it's not up to key with security

619
00:28:04,039 --> 00:28:08,100
it actually sets allows everyone to read

620
00:28:08,100 --> 00:28:11,179
write to the name pipe the command pipe

621
00:28:11,179 --> 00:28:15,299
and this means that the pipe is exposed

622
00:28:15,299 --> 00:28:17,220
to authenticated users

623
00:28:17,220 --> 00:28:19,620
and if you manage to configure a Windows

624
00:28:19,620 --> 00:28:21,840
box to allow Anonymous access that will

625
00:28:21,840 --> 00:28:24,120
also be covered but it's not that common

626
00:28:24,120 --> 00:28:25,640
anymore

627
00:28:25,640 --> 00:28:29,659
during an active session and after

628
00:28:29,659 --> 00:28:33,020
interrupted sessions

629
00:28:34,860 --> 00:28:37,919
so this is what the access control list

630
00:28:37,919 --> 00:28:40,799
looks on the on the pipe if you use

631
00:28:40,799 --> 00:28:43,679
access check from from sys internals you

632
00:28:43,679 --> 00:28:45,179
can clearly see that everyone has read

633
00:28:45,179 --> 00:28:47,640
write access

634
00:28:47,640 --> 00:28:50,059
if you compare that to

635
00:28:50,059 --> 00:28:53,820
P is exact from system tunnels they only

636
00:28:53,820 --> 00:28:56,460
allow administrators to connect

637
00:28:56,460 --> 00:28:59,520
and if you just create a name pipe and

638
00:28:59,520 --> 00:29:00,380
listen

639
00:29:00,380 --> 00:29:03,240
the default ACL

640
00:29:03,240 --> 00:29:06,020
allows administrators to write

641
00:29:06,020 --> 00:29:10,380
and I think users to to read and list so

642
00:29:10,380 --> 00:29:15,380
this is actually worse than the defaults

643
00:29:16,559 --> 00:29:18,779
there's another scenario of course if

644
00:29:18,779 --> 00:29:22,380
you expose a the name pipe to

645
00:29:22,380 --> 00:29:24,779
to remote clients you're also expose it

646
00:29:24,779 --> 00:29:27,240
to the local machines or any attacker

647
00:29:27,240 --> 00:29:30,299
with the local on privileged access to

648
00:29:30,299 --> 00:29:32,820
the system in this case I just rewrote

649
00:29:32,820 --> 00:29:37,039
the original REM com client port

650
00:29:37,760 --> 00:29:40,500
to exploit the same

651
00:29:40,500 --> 00:29:42,960
scenario

652
00:29:42,960 --> 00:29:45,080
with standard user rights you can't

653
00:29:45,080 --> 00:29:49,320
store any service or do anything with

654
00:29:49,320 --> 00:29:51,600
a PS exec

655
00:29:51,600 --> 00:29:54,440
session running

656
00:29:54,440 --> 00:29:58,200
you can escalate beverages as well

657
00:29:58,200 --> 00:30:01,399
not very surprising

658
00:30:01,500 --> 00:30:02,880
all right

659
00:30:02,880 --> 00:30:05,179
so if we look at

660
00:30:05,179 --> 00:30:08,279
the code of PS exec

661
00:30:08,279 --> 00:30:13,020
you have a large chunk of hex binary

662
00:30:13,020 --> 00:30:16,500
which is the binary representation of of

663
00:30:16,500 --> 00:30:18,419
the ramcom service

664
00:30:18,419 --> 00:30:22,140
that's actually just decoded and written

665
00:30:22,140 --> 00:30:25,399
to the to the Target

666
00:30:25,440 --> 00:30:28,799
if you look at the ramcon service itself

667
00:30:28,799 --> 00:30:30,600
you can see this call which actually

668
00:30:30,600 --> 00:30:32,640
sets the security descriptor for the

669
00:30:32,640 --> 00:30:37,140
pipe it's it uses a null for the for the

670
00:30:37,140 --> 00:30:39,720
discretionary access list

671
00:30:39,720 --> 00:30:41,940
you check the documentation

672
00:30:41,940 --> 00:30:44,700
we can see that null means

673
00:30:44,700 --> 00:30:48,419
allows all access to the objects

674
00:30:48,419 --> 00:30:49,860
so

675
00:30:49,860 --> 00:30:52,320
it's probably a pretty easy fix even

676
00:30:52,320 --> 00:30:53,820
though I don't know it's it's you know

677
00:30:53,820 --> 00:30:56,940
worth fixing 10 year old code but if you

678
00:30:56,940 --> 00:30:58,620
just commented this code out it wouldn't

679
00:30:58,620 --> 00:31:00,899
be vulnerable if you rewrote it to

680
00:31:00,899 --> 00:31:04,220
actually just add local administrators

681
00:31:04,220 --> 00:31:07,500
to the to the pipe then it will be the

682
00:31:07,500 --> 00:31:09,179
equivalent of

683
00:31:09,179 --> 00:31:11,340
of the Season Turner's version of BS

684
00:31:11,340 --> 00:31:13,639
exec

685
00:31:14,279 --> 00:31:17,580
so the solution is pretty simple just

686
00:31:17,580 --> 00:31:19,440
lock down write access to the command

687
00:31:19,440 --> 00:31:22,820
pipe and we're good

688
00:31:26,460 --> 00:31:29,820
okay so impact it was vulnerable this

689
00:31:29,820 --> 00:31:33,779
way what went wrong well let's just

690
00:31:33,779 --> 00:31:35,640
take a step back

691
00:31:35,640 --> 00:31:38,340
and look what this means

692
00:31:38,340 --> 00:31:41,460
it's basically a question about about

693
00:31:41,460 --> 00:31:45,899
trust and you know operational security

694
00:31:45,899 --> 00:31:48,419
for when you

695
00:31:48,419 --> 00:31:52,440
compromise your customer systems you

696
00:31:52,440 --> 00:31:53,460
don't want to introduce new

697
00:31:53,460 --> 00:31:54,740
vulnerabilities

698
00:31:54,740 --> 00:31:57,899
you don't want an attacker with access

699
00:31:57,899 --> 00:32:00,419
to the system to be able to exploit your

700
00:32:00,419 --> 00:32:03,840
behavior in your tools for their benefit

701
00:32:03,840 --> 00:32:05,760
and

702
00:32:05,760 --> 00:32:08,179
this is kind of this is not an academic

703
00:32:08,179 --> 00:32:10,559
Viewpoint of this this is kind of just

704
00:32:10,559 --> 00:32:11,700
uh

705
00:32:11,700 --> 00:32:13,440
how we discuss it

706
00:32:13,440 --> 00:32:15,980
in my team

707
00:32:15,980 --> 00:32:18,779
we're being playing around with doing

708
00:32:18,779 --> 00:32:22,140
code reviews of public tools doing

709
00:32:22,140 --> 00:32:25,100
custom builds and so on

710
00:32:25,100 --> 00:32:27,960
and it gets pretty

711
00:32:27,960 --> 00:32:30,179
pretty messy pretty fast it takes a lot

712
00:32:30,179 --> 00:32:32,220
of time to do this even though it's your

713
00:32:32,220 --> 00:32:34,080
responsibility to you know keep your

714
00:32:34,080 --> 00:32:37,620
tool sets up to date and secure

715
00:32:37,620 --> 00:32:39,360
if you look at code reviews what are you

716
00:32:39,360 --> 00:32:41,120
looking at when you're actually

717
00:32:41,120 --> 00:32:44,100
reviewing code of your offensive tools

718
00:32:44,100 --> 00:32:46,380
well first of all

719
00:32:46,380 --> 00:32:48,899
you don't want back doors in your tools

720
00:32:48,899 --> 00:32:51,480
if you're talking about exploits it's

721
00:32:51,480 --> 00:32:52,440
pretty

722
00:32:52,440 --> 00:32:55,140
it's not uncommon that someone kind of

723
00:32:55,140 --> 00:32:57,240
social Engineers security researchers to

724
00:32:57,240 --> 00:32:58,260
run code

725
00:32:58,260 --> 00:33:00,380
on their boxes

726
00:33:00,380 --> 00:33:02,940
I wouldn't say that backdoors is like

727
00:33:02,940 --> 00:33:04,200
that the

728
00:33:04,200 --> 00:33:06,960
the largest threat when you work with

729
00:33:06,960 --> 00:33:08,940
tools

730
00:33:08,940 --> 00:33:10,320
um

731
00:33:10,320 --> 00:33:12,240
there are external dependencies I mean

732
00:33:12,240 --> 00:33:14,340
if you see a python script that just

733
00:33:14,340 --> 00:33:16,320
downloads stuff from from GitHub and

734
00:33:16,320 --> 00:33:18,840
runs it that behavior can of course

735
00:33:18,840 --> 00:33:21,480
change at any time so that's not really

736
00:33:21,480 --> 00:33:24,360
a behavior that you want in your tools

737
00:33:24,360 --> 00:33:26,940
uh same thing with binary artifacts you

738
00:33:26,940 --> 00:33:30,000
if you like bundle a.net dll or

739
00:33:30,000 --> 00:33:31,140
something like that

740
00:33:31,140 --> 00:33:34,019
it's hard for you to audit it you can

741
00:33:34,019 --> 00:33:36,059
find out what the level is audit the

742
00:33:36,059 --> 00:33:38,640
source and then rebuild it yourself

743
00:33:38,640 --> 00:33:40,200
and of course when you're talking about

744
00:33:40,200 --> 00:33:42,720
you know communication uh it's always

745
00:33:42,720 --> 00:33:46,019
the matter of bad opsec practices are we

746
00:33:46,019 --> 00:33:48,419
doing this securely are we leaving any

747
00:33:48,419 --> 00:33:50,399
sensitive information behind are we

748
00:33:50,399 --> 00:33:52,740
connecting to the C2 server in the

749
00:33:52,740 --> 00:33:54,419
secure way and so on

750
00:33:54,419 --> 00:33:56,039
and of course vulnerabilities as well

751
00:33:56,039 --> 00:33:58,320
this is just software as anything else

752
00:33:58,320 --> 00:34:03,080
and of course software will be insecure

753
00:34:03,960 --> 00:34:06,260
um within packets

754
00:34:06,260 --> 00:34:09,540
it's basically three of these that went

755
00:34:09,540 --> 00:34:10,320
wrong

756
00:34:10,320 --> 00:34:12,719
they had binary artifacts

757
00:34:12,719 --> 00:34:15,020
embedded in the python codes

758
00:34:15,020 --> 00:34:17,399
even though they

759
00:34:17,399 --> 00:34:19,500
I mean you can of course rebuild the the

760
00:34:19,500 --> 00:34:22,020
ramcom service yourself and and bundle

761
00:34:22,020 --> 00:34:23,339
that

762
00:34:23,339 --> 00:34:27,119
but it's still hard for people to audit

763
00:34:27,119 --> 00:34:30,659
uh I don't know if the behavior of

764
00:34:30,659 --> 00:34:33,719
Secrets dump and piece exec

765
00:34:33,719 --> 00:34:37,199
or SMB exec goes under bad optic

766
00:34:37,199 --> 00:34:39,139
practices or vulnerabilities

767
00:34:39,139 --> 00:34:42,480
probably somewhere in in between

768
00:34:42,480 --> 00:34:45,780
the PS exec the name pipe issue is

769
00:34:45,780 --> 00:34:48,919
definitely a vulnerability

770
00:34:52,320 --> 00:34:54,359
what about

771
00:34:54,359 --> 00:34:57,300
you know how how can you how should you

772
00:34:57,300 --> 00:34:59,520
build your tools uh you should obviously

773
00:34:59,520 --> 00:35:01,920
not just download and run from the

774
00:35:01,920 --> 00:35:03,420
internet because that's

775
00:35:03,420 --> 00:35:05,940
that's not responsible if you work as a

776
00:35:05,940 --> 00:35:08,160
pen tester

777
00:35:08,160 --> 00:35:10,380
um if you go one step further and

778
00:35:10,380 --> 00:35:12,839
download the source and build it

779
00:35:12,839 --> 00:35:14,280
yourself

780
00:35:14,280 --> 00:35:16,740
it's not much better you still need to

781
00:35:16,740 --> 00:35:18,540
audit the code so you know what what

782
00:35:18,540 --> 00:35:19,619
it's doing

783
00:35:19,619 --> 00:35:21,540
uh

784
00:35:21,540 --> 00:35:24,240
you can also I mean I mean if you talk

785
00:35:24,240 --> 00:35:26,099
about audit every version of every

786
00:35:26,099 --> 00:35:28,320
update of the public tooling that's

787
00:35:28,320 --> 00:35:30,119
that's out there it gets

788
00:35:30,119 --> 00:35:32,280
it gets pretty

789
00:35:32,280 --> 00:35:34,440
pretty messy pretty fast it's a lot of

790
00:35:34,440 --> 00:35:36,359
updates it's a lot of code

791
00:35:36,359 --> 00:35:38,040
um

792
00:35:38,040 --> 00:35:40,800
so that's kind of where we got stuck in

793
00:35:40,800 --> 00:35:43,920
my team uh we have some some audited

794
00:35:43,920 --> 00:35:46,440
code but it's still a lot of updates to

795
00:35:46,440 --> 00:35:48,119
go through if you want to be really safe

796
00:35:48,119 --> 00:35:51,480
you can also go one step further like

797
00:35:51,480 --> 00:35:53,700
from the public tool sets just share

798
00:35:53,700 --> 00:35:55,680
pick the functions and features that you

799
00:35:55,680 --> 00:35:58,380
want and then you know

800
00:35:58,380 --> 00:36:01,260
you don't have to audit the entire tool

801
00:36:01,260 --> 00:36:02,700
set Maybe

802
00:36:02,700 --> 00:36:04,800
that would be one way of doing it or

803
00:36:04,800 --> 00:36:05,640
just

804
00:36:05,640 --> 00:36:08,160
you know rewrite everything yourself

805
00:36:08,160 --> 00:36:10,220
well

806
00:36:10,220 --> 00:36:14,660
if you have the time and resources

807
00:36:15,960 --> 00:36:18,300
one thing that I think it's

808
00:36:18,300 --> 00:36:20,820
just as important as looking at the code

809
00:36:20,820 --> 00:36:23,520
is just running it in a lab environment

810
00:36:23,520 --> 00:36:25,740
first of all learn the tool set so you

811
00:36:25,740 --> 00:36:29,460
know how to use it and how not to use it

812
00:36:29,460 --> 00:36:31,260
you can monitor your behavior in your

813
00:36:31,260 --> 00:36:34,920
lab to see like with process monitor to

814
00:36:34,920 --> 00:36:37,440
see how it actually works and what what

815
00:36:37,440 --> 00:36:39,420
it leaves behind in in the form of

816
00:36:39,420 --> 00:36:41,880
artifacts I know that there are some

817
00:36:41,880 --> 00:36:44,880
libraries that are used by you know

818
00:36:44,880 --> 00:36:46,560
short pound and other tools that

819
00:36:46,560 --> 00:36:49,440
actually leave some artifacts behind

820
00:36:49,440 --> 00:36:51,420
that's not that obvious

821
00:36:51,420 --> 00:36:53,460
so if you do red teaming and want to be

822
00:36:53,460 --> 00:36:55,320
really sneaky this is something that's

823
00:36:55,320 --> 00:36:57,000
pretty good

824
00:36:57,000 --> 00:36:58,859
and if you do this you also get the

825
00:36:58,859 --> 00:37:01,020
chance to collect indicators and

826
00:37:01,020 --> 00:37:02,880
compromise for your customers in the

827
00:37:02,880 --> 00:37:06,660
report or for your blue team if you have

828
00:37:06,660 --> 00:37:07,859
one of those too

829
00:37:07,859 --> 00:37:11,299
to cooperate with

830
00:37:12,540 --> 00:37:14,700
of course you can Outsource this to a

831
00:37:14,700 --> 00:37:16,740
vendor

832
00:37:16,740 --> 00:37:18,359
like for

833
00:37:18,359 --> 00:37:20,579
Kobe strike

834
00:37:20,579 --> 00:37:23,880
um it's pretty nice tool just Outsource

835
00:37:23,880 --> 00:37:26,760
all the work of doing a you know fairly

836
00:37:26,760 --> 00:37:28,680
Advanced C2 framework to someone else

837
00:37:28,680 --> 00:37:30,480
and pay them money

838
00:37:30,480 --> 00:37:33,780
what you get from that of course is

839
00:37:33,780 --> 00:37:37,140
um supported software and liability if

840
00:37:37,140 --> 00:37:38,880
something will you know if the ship hits

841
00:37:38,880 --> 00:37:41,300
the fan

842
00:37:41,520 --> 00:37:43,440
they're of course not immune to

843
00:37:43,440 --> 00:37:45,119
vulnerabilities I think we've seen that

844
00:37:45,119 --> 00:37:47,579
in the last year where there were some

845
00:37:47,579 --> 00:37:50,220
interesting vulnerabilities in the cobal

846
00:37:50,220 --> 00:37:52,380
strike console

847
00:37:52,380 --> 00:37:54,240
and of course you're still left with a

848
00:37:54,240 --> 00:37:56,880
question of do you trust the vendor to

849
00:37:56,880 --> 00:37:59,400
do all this and do we test the vendor to

850
00:37:59,400 --> 00:38:02,599
to write secure code

851
00:38:03,720 --> 00:38:05,660
and I don't think

852
00:38:05,660 --> 00:38:08,339
there's no

853
00:38:08,339 --> 00:38:11,760
answer that you know fits all here it's

854
00:38:11,760 --> 00:38:14,820
basically about risk management

855
00:38:14,820 --> 00:38:19,020
but you know for offensive operations

856
00:38:19,020 --> 00:38:21,599
um it's probably something that you want

857
00:38:21,599 --> 00:38:23,280
to discuss with management and maybe

858
00:38:23,280 --> 00:38:25,920
your legal team as well if you do

859
00:38:25,920 --> 00:38:27,480
if you work with

860
00:38:27,480 --> 00:38:31,460
customers with illegal teams

861
00:38:32,040 --> 00:38:34,800
it's recommended to establish some sort

862
00:38:34,800 --> 00:38:36,900
of Rules of Engagement when you work

863
00:38:36,900 --> 00:38:38,160
with customers

864
00:38:38,160 --> 00:38:40,440
because some customers don't really care

865
00:38:40,440 --> 00:38:43,020
how what you do or how you do it

866
00:38:43,020 --> 00:38:46,260
but some are really picky and I think

867
00:38:46,260 --> 00:38:50,339
it's not uncommon that you see signs of

868
00:38:50,339 --> 00:38:53,760
you know compromise from other actors

869
00:38:53,760 --> 00:38:55,859
when you're in a customer environment

870
00:38:55,859 --> 00:38:57,859
and then

871
00:38:57,859 --> 00:39:01,800
it's good to have a jerusal engagements

872
00:39:01,800 --> 00:39:03,740
and your you know

873
00:39:03,740 --> 00:39:07,020
your agreements in place so you can

874
00:39:07,020 --> 00:39:10,079
actually tell the customer that we did

875
00:39:10,079 --> 00:39:12,060
this and we didn't do this

876
00:39:12,060 --> 00:39:14,700
I think that's important

877
00:39:14,700 --> 00:39:17,599
and if you're talking about the effort

878
00:39:17,599 --> 00:39:20,700
that it that you put in auditing your

879
00:39:20,700 --> 00:39:21,900
own tools

880
00:39:21,900 --> 00:39:24,480
I think in my team We'll add it

881
00:39:24,480 --> 00:39:26,940
somewhere that way we we have a standard

882
00:39:26,940 --> 00:39:29,640
tool set that we use some pretty much

883
00:39:29,640 --> 00:39:31,800
every Windows assessment that we do

884
00:39:31,800 --> 00:39:34,020
already assessment and we we want to

885
00:39:34,020 --> 00:39:36,900
have that tool set audited to some

886
00:39:36,900 --> 00:39:41,579
extent and a repository of binaries that

887
00:39:41,579 --> 00:39:42,660
we can trust

888
00:39:42,660 --> 00:39:44,660
but then

889
00:39:44,660 --> 00:39:48,359
you also you kind of save time and you

890
00:39:48,359 --> 00:39:51,900
can focus on doing ad hoc analysis and

891
00:39:51,900 --> 00:39:53,820
audits all the new stuff that you need

892
00:39:53,820 --> 00:39:55,560
to use maybe it's a new tool that you

893
00:39:55,560 --> 00:39:57,660
haven't looked at before and you know

894
00:39:57,660 --> 00:39:59,400
spend a little more time and and

895
00:39:59,400 --> 00:40:01,079
research on that

896
00:40:01,079 --> 00:40:03,420
and I think we'll add that in a

897
00:40:03,420 --> 00:40:05,339
in a combination of

898
00:40:05,339 --> 00:40:08,520
auditing the tools if it's open source

899
00:40:08,520 --> 00:40:11,940
which is always is building it ourselves

900
00:40:11,940 --> 00:40:14,820
and um of course testing it in the lab

901
00:40:14,820 --> 00:40:17,240
as well

902
00:40:18,900 --> 00:40:21,119
there's a few things that I think could

903
00:40:21,119 --> 00:40:22,740
uh you know

904
00:40:22,740 --> 00:40:25,740
benefit and extend This research

905
00:40:25,740 --> 00:40:29,000
I have a colleague that

906
00:40:29,000 --> 00:40:32,940
yeah I think he found a way to do what

907
00:40:32,940 --> 00:40:34,680
secret stump is doing without actually

908
00:40:34,680 --> 00:40:38,220
touching disk this is on an ID stage at

909
00:40:38,220 --> 00:40:40,380
this at this point we don't have a you

910
00:40:40,380 --> 00:40:42,900
know tool set to do this but

911
00:40:42,900 --> 00:40:44,520
it's interesting what you can find when

912
00:40:44,520 --> 00:40:47,160
you like poke around and Implement your

913
00:40:47,160 --> 00:40:49,759
own tools

914
00:40:52,020 --> 00:40:55,260
I think the pen testing Community will

915
00:40:55,260 --> 00:40:57,420
definitely benefit from someone writing

916
00:40:57,420 --> 00:41:00,300
a python client maybe with a packet for

917
00:41:00,300 --> 00:41:03,680
the real psxx service part

918
00:41:03,680 --> 00:41:07,440
uh it plays a lot better with edrs and

919
00:41:07,440 --> 00:41:10,079
Antivirus because it's signed and

920
00:41:10,079 --> 00:41:14,579
trusted to some extent by customers

921
00:41:14,579 --> 00:41:15,359
um

922
00:41:15,359 --> 00:41:17,820
the remcon service definitely sticks out

923
00:41:17,820 --> 00:41:20,280
as malicious

924
00:41:20,280 --> 00:41:22,320
um yeah it's it's pretty much considered

925
00:41:22,320 --> 00:41:26,280
a Lobby in in many organizations

926
00:41:26,280 --> 00:41:28,200
but then

927
00:41:28,200 --> 00:41:30,540
I plan to release an nmap script to find

928
00:41:30,540 --> 00:41:33,420
the remcon service because if you're a

929
00:41:33,420 --> 00:41:35,220
large organization and you have a lot of

930
00:41:35,220 --> 00:41:37,140
you know pen tests going on

931
00:41:37,140 --> 00:41:39,420
I think there could be some you know

932
00:41:39,420 --> 00:41:42,119
free shells running in your environment

933
00:41:42,119 --> 00:41:43,560
the only thing you have to do is

934
00:41:43,560 --> 00:41:46,200
basically scan for a specific name pipe

935
00:41:46,200 --> 00:41:47,820
with a no name

936
00:41:47,820 --> 00:41:51,740
it could be kind of fun

937
00:41:52,440 --> 00:41:55,820
all right that went fast

938
00:41:55,859 --> 00:41:58,560
there is time for questions just you

939
00:41:58,560 --> 00:42:00,460
know stand up and wave

940
00:42:00,460 --> 00:42:05,460
[Applause]

