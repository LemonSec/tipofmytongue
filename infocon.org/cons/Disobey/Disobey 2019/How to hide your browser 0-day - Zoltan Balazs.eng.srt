1
00:00:08,100 --> 00:00:23,488
[Music]

2
00:00:25,520 --> 00:00:32,780
[Music]

3
00:00:28,810 --> 00:00:35,180
hi everyone thanks for having me

4
00:00:32,780 --> 00:00:38,840
this is my first time being here at

5
00:00:35,180 --> 00:00:40,010
disobey and Helsinki and I love it so

6
00:00:38,840 --> 00:00:43,640
far

7
00:00:40,010 --> 00:00:46,160
so my name is Zoltan balázs and today

8
00:00:43,640 --> 00:00:51,830
I'm going to talk about how to hide your

9
00:00:46,160 --> 00:00:54,949
browser zero-day but first just a quick

10
00:00:51,830 --> 00:00:57,949
introduction about me I do a lot of

11
00:00:54,949 --> 00:00:59,960
offensive research for example some

12
00:00:57,949 --> 00:01:03,410
years ago I've wrote a tool called

13
00:00:59,960 --> 00:01:06,229
zombie browser toolkit which has some

14
00:01:03,410 --> 00:01:09,830
measures browser extensions in it which

15
00:01:06,229 --> 00:01:14,119
we you can use in Chrome Firefox ie

16
00:01:09,830 --> 00:01:17,090
or Safari to add some extra funky

17
00:01:14,119 --> 00:01:19,729
functionality to your browser I also

18
00:01:17,090 --> 00:01:22,280
created the so called hardware firewall

19
00:01:19,729 --> 00:01:26,539
bypass tool which is basically a kernel

20
00:01:22,280 --> 00:01:29,240
driver in Windows and you can use it to

21
00:01:26,539 --> 00:01:31,880
mess with hardware firewalls

22
00:01:29,240 --> 00:01:34,699
I created the malware which you can

23
00:01:31,880 --> 00:01:38,449
upload to some mavar analyzes sandboxes

24
00:01:34,700 --> 00:01:41,360
and it will leak a lot of interesting

25
00:01:38,450 --> 00:01:45,080
and unique data from that my very own

26
00:01:41,360 --> 00:01:48,110
Isis sandbox so later on you will know

27
00:01:45,080 --> 00:01:51,048
that if you see this data in an

28
00:01:48,110 --> 00:01:55,280
environment and your code is running

29
00:01:51,049 --> 00:01:58,280
inside of never analyzes sandbox I also

30
00:01:55,280 --> 00:02:03,650
did play a little bit with some crappy

31
00:01:58,280 --> 00:02:07,310
IOT devices and I published some code

32
00:02:03,650 --> 00:02:11,090
which was a remote code execution code

33
00:02:07,310 --> 00:02:14,180
and turned out it was integrated by the

34
00:02:11,090 --> 00:02:16,130
bad guys and my code was running inside

35
00:02:14,180 --> 00:02:18,650
the tarsier botnet

36
00:02:16,130 --> 00:02:27,489
so actually I wrote a code which was

37
00:02:18,650 --> 00:02:30,560
running on 600,000 cameras yay and I

38
00:02:27,489 --> 00:02:32,390
also invented the idea of encrypted

39
00:02:30,560 --> 00:02:35,720
exploit delivery which is going to be

40
00:02:32,390 --> 00:02:38,179
the topic of this talk I'm the co

41
00:02:35,720 --> 00:02:39,730
organizer of the so-called hacker surely

42
00:02:38,180 --> 00:02:42,099
beat up in blah

43
00:02:39,730 --> 00:02:45,369
and I'm the program committee of the

44
00:02:42,099 --> 00:02:48,790
activity conference so what I'm going to

45
00:02:45,370 --> 00:02:52,299
talk about today first I will give you a

46
00:02:48,790 --> 00:02:54,909
little bit of introduction of elliptic

47
00:02:52,299 --> 00:02:57,700
curve diffie-hellman and my encrypted

48
00:02:54,909 --> 00:03:01,120
exploit delivery project I will talk

49
00:02:57,700 --> 00:03:03,790
about my attacker model I will talk

50
00:03:01,120 --> 00:03:07,780
about why this is different all right

51
00:03:03,790 --> 00:03:10,750
this is new and I will play a little bit

52
00:03:07,780 --> 00:03:14,250
of cat and mouse game with offense and

53
00:03:10,750 --> 00:03:17,260
defense all right so let's start with

54
00:03:14,250 --> 00:03:20,200
how did this story begin because I

55
00:03:17,260 --> 00:03:25,179
believe every research project has a

56
00:03:20,200 --> 00:03:28,089
story so I had a discussion with some of

57
00:03:25,180 --> 00:03:32,469
these next-generation or bridge

58
00:03:28,090 --> 00:03:36,969
detection vendors and I told them that

59
00:03:32,469 --> 00:03:40,540
I'm sure that there is a way how I can

60
00:03:36,969 --> 00:03:43,060
deliver my exploit to an endpoint so

61
00:03:40,540 --> 00:03:45,280
their network detection too won't be

62
00:03:43,060 --> 00:03:47,500
able to see that there is an exploit

63
00:03:45,280 --> 00:03:49,150
here and they not worth detection to

64
00:03:47,500 --> 00:03:51,959
won't be able to see that there was also

65
00:03:49,150 --> 00:03:55,840
any mother delivered to the endpoint

66
00:03:51,959 --> 00:03:58,120
they told me that's impossible so

67
00:03:55,840 --> 00:04:03,069
whenever someone tells me something is

68
00:03:58,120 --> 00:04:07,750
impossible this is what happens so I

69
00:04:03,069 --> 00:04:11,728
went home and I started to code but

70
00:04:07,750 --> 00:04:16,779
before going into the details I want to

71
00:04:11,729 --> 00:04:19,590
ask you guys why are you here and what

72
00:04:16,779 --> 00:04:23,679
might be interesting in my talk for you

73
00:04:19,589 --> 00:04:28,020
so if you are an exploit broker or you

74
00:04:23,680 --> 00:04:32,110
are working for law enforcement ends up

75
00:04:28,020 --> 00:04:35,500
okay one guy one guy that's cool usually

76
00:04:32,110 --> 00:04:39,490
zero but once I was at the conference

77
00:04:35,500 --> 00:04:41,139
then there was like four guys over

78
00:04:39,490 --> 00:04:44,800
exploited brokers but at different

79
00:04:41,139 --> 00:04:46,750
companies so that was pretty nice so for

80
00:04:44,800 --> 00:04:50,050
you guys I can show you a way how you

81
00:04:46,750 --> 00:04:52,600
can prevent your offensive 0 they

82
00:04:50,050 --> 00:04:55,540
exploit code being leaked

83
00:04:52,600 --> 00:05:00,640
if you are a pen tester or red teamer

84
00:04:55,540 --> 00:05:02,740
hands up okay a lot more so for you guys

85
00:05:00,640 --> 00:05:06,400
I'm going to show you a technique which

86
00:05:02,740 --> 00:05:09,400
you can use to bypass perimeter defenses

87
00:05:06,400 --> 00:05:11,440
if you are using exploit and it might be

88
00:05:09,400 --> 00:05:15,520
able to also bypass some host based

89
00:05:11,440 --> 00:05:18,310
ideas systems if you are in blue team

90
00:05:15,520 --> 00:05:22,390
forensic investigation exploit lead

91
00:05:18,310 --> 00:05:24,910
research or hands up okay so for you

92
00:05:22,390 --> 00:05:28,510
guys I'm going to show you how your

93
00:05:24,910 --> 00:05:31,330
current defenses might be bypassed with

94
00:05:28,510 --> 00:05:33,700
my tool and what you might be actually

95
00:05:31,330 --> 00:05:37,330
looking for if you are searching for

96
00:05:33,700 --> 00:05:39,159
advanced that occurs and for the rest of

97
00:05:37,330 --> 00:05:43,060
you I think learning about elliptic

98
00:05:39,160 --> 00:05:46,390
curve cryptography is always fun so

99
00:05:43,060 --> 00:05:48,660
let's start with the introductions I'm

100
00:05:46,390 --> 00:05:51,219
going to talk about exploit kids and

101
00:05:48,660 --> 00:05:53,320
targeted attacks with the new days I

102
00:05:51,220 --> 00:05:55,870
will talk about the diffie-hellman key

103
00:05:53,320 --> 00:05:58,840
agreement elliptic curve diffie-hellman

104
00:05:55,870 --> 00:06:02,020
key agreement and encrypted browser

105
00:05:58,840 --> 00:06:04,150
exploit delivery and how my idea was

106
00:06:02,020 --> 00:06:07,990
implemented by the bad guys at the end

107
00:06:04,150 --> 00:06:12,789
of day so an exploit kit is a software

108
00:06:07,990 --> 00:06:16,210
which exploits vulnerabilities okay we

109
00:06:12,790 --> 00:06:19,720
know that so what happens if you have a

110
00:06:16,210 --> 00:06:23,109
browser zero-day for example and you

111
00:06:19,720 --> 00:06:29,260
lose your browser zero-day there was

112
00:06:23,110 --> 00:06:34,360
this story in 2016 that a journalist in

113
00:06:29,260 --> 00:06:40,590
the UAE was targeted by special Safari

114
00:06:34,360 --> 00:06:46,210
Browser zero-day and luckily the guy do

115
00:06:40,590 --> 00:06:49,719
that he was targeted and when he read

116
00:06:46,210 --> 00:06:52,690
this actual piece of text message he

117
00:06:49,720 --> 00:06:56,740
knew that something fishy is going on so

118
00:06:52,690 --> 00:06:59,590
he didn't click on the link but he

119
00:06:56,740 --> 00:07:04,480
forwarded this message to some guys in

120
00:06:59,590 --> 00:07:06,440
citizen lab and these guys went to a

121
00:07:04,480 --> 00:07:10,180
shop bought a new iPhone

122
00:07:06,440 --> 00:07:14,990
and they did set up a lab environment

123
00:07:10,180 --> 00:07:17,120
where they dumped all the network

124
00:07:14,990 --> 00:07:20,360
traffic and when everything was set up

125
00:07:17,120 --> 00:07:22,670
they just clicked on the link analyzed

126
00:07:20,360 --> 00:07:26,030
the vinyl shark dump they were able to

127
00:07:22,670 --> 00:07:28,640
see that yeah there's a safari zero-day

128
00:07:26,030 --> 00:07:33,739
in the Wireshark dump they sent it to

129
00:07:28,640 --> 00:07:36,620
Apple Apple patched the zero day and now

130
00:07:33,740 --> 00:07:39,410
the zero day was lost so there were

131
00:07:36,620 --> 00:07:43,580
someone was losing a lot of money due to

132
00:07:39,410 --> 00:07:47,330
this pool of SAC and there was this

133
00:07:43,580 --> 00:07:50,900
other attack where probably law

134
00:07:47,330 --> 00:07:53,510
enforcement was targeting some pedophile

135
00:07:50,900 --> 00:07:57,940
site and usually what they do is that

136
00:07:53,510 --> 00:08:02,330
they seize control of a web server and

137
00:07:57,940 --> 00:08:06,170
they put additional scripts to the web

138
00:08:02,330 --> 00:08:10,010
server so whenever someone with it the

139
00:08:06,170 --> 00:08:13,490
web site usually after login they will

140
00:08:10,010 --> 00:08:16,670
deliver the exploit code to the visitors

141
00:08:13,490 --> 00:08:20,570
and usually this exploit code is not a

142
00:08:16,670 --> 00:08:24,800
fully fledged mother it's just an info

143
00:08:20,570 --> 00:08:27,710
League code in this case it leaked the

144
00:08:24,800 --> 00:08:30,260
IP address the original IP address of

145
00:08:27,710 --> 00:08:33,710
the visitor so it was not hidden by tor

146
00:08:30,260 --> 00:08:36,260
anymore and it was so leaked the machine

147
00:08:33,710 --> 00:08:40,690
name machine name and the MAC address of

148
00:08:36,260 --> 00:08:44,930
the Machine and what happened in this

149
00:08:40,690 --> 00:08:47,990
scenario was that someone quickly

150
00:08:44,930 --> 00:08:51,670
realized that there is an exploit code

151
00:08:47,990 --> 00:08:55,760
on this website he posted it on

152
00:08:51,670 --> 00:08:58,760
four-room Mozilla and the tor browser

153
00:08:55,760 --> 00:09:01,400
guys quickly realized that there is a

154
00:08:58,760 --> 00:09:06,010
zero-day going on so they reverse

155
00:09:01,400 --> 00:09:06,010
engineered the code they patched it and

156
00:09:06,070 --> 00:09:12,200
basically because of this happens so

157
00:09:09,410 --> 00:09:16,689
fast the law-enforcement guys they were

158
00:09:12,200 --> 00:09:16,690
not able to catch so many bad guys

159
00:09:17,400 --> 00:09:24,930
so in both cases the exploits were

160
00:09:21,630 --> 00:09:29,130
burned pretty quickly and someone lost a

161
00:09:24,930 --> 00:09:32,819
lot of money now let's talk a little bit

162
00:09:29,130 --> 00:09:35,460
about diffie-hellman key agreement there

163
00:09:32,820 --> 00:09:37,380
is a very nice explanation on Wikipedia

164
00:09:35,460 --> 00:09:40,980
how defeat among key agreement works

165
00:09:37,380 --> 00:09:45,150
with colors and I really like this

166
00:09:40,980 --> 00:09:48,120
approach so let's say that Alice and Bob

167
00:09:45,150 --> 00:09:51,209
they want to communicate securely so

168
00:09:48,120 --> 00:09:54,120
they want to agree on a shared common

169
00:09:51,210 --> 00:09:58,710
secret on a shared secret they both know

170
00:09:54,120 --> 00:10:01,140
but no one else knows and meanwhile they

171
00:09:58,710 --> 00:10:05,670
have public channels they can

172
00:10:01,140 --> 00:10:09,180
communicate with and they have to come

173
00:10:05,670 --> 00:10:12,630
up with an idea how they can agree on

174
00:10:09,180 --> 00:10:16,949
the same short secret so let's say that

175
00:10:12,630 --> 00:10:18,810
they both start with a common color they

176
00:10:16,950 --> 00:10:21,570
both agree on so let's say this is the

177
00:10:18,810 --> 00:10:24,869
yellow one and now they both of them

178
00:10:21,570 --> 00:10:27,330
they choose their secret color which no

179
00:10:24,870 --> 00:10:31,589
one knows except them so Alice chooses

180
00:10:27,330 --> 00:10:34,820
some oranges and Bob chooses some I

181
00:10:31,589 --> 00:10:38,400
don't know it's green or something now

182
00:10:34,820 --> 00:10:41,580
they can mix the common color and their

183
00:10:38,400 --> 00:10:44,910
secret color together and they will get

184
00:10:41,580 --> 00:10:48,300
different colors for sure and they will

185
00:10:44,910 --> 00:10:53,069
send this new color on the public

186
00:10:48,300 --> 00:10:58,459
channel to the other party and in

187
00:10:53,070 --> 00:11:02,760
reality of course it's it is easy to you

188
00:10:58,459 --> 00:11:05,430
subtract colors from each other but for

189
00:11:02,760 --> 00:11:08,160
this example just let's pretend that it

190
00:11:05,430 --> 00:11:10,020
is not that easy to do for example for

191
00:11:08,160 --> 00:11:10,949
me from the top of my head I don't I

192
00:11:10,020 --> 00:11:14,880
cannot do that

193
00:11:10,950 --> 00:11:17,970
so let's just say that if you see this

194
00:11:14,880 --> 00:11:20,040
brown color and this blue color and you

195
00:11:17,970 --> 00:11:22,140
know that yellow is the common secret

196
00:11:20,040 --> 00:11:26,579
you have no idea what the secret colors

197
00:11:22,140 --> 00:11:30,439
were and now if both Alice and Bob they

198
00:11:26,579 --> 00:11:34,880
add their own secret color

199
00:11:30,440 --> 00:11:38,240
to this mix they will see the same color

200
00:11:34,880 --> 00:11:40,340
which is brown in this example and this

201
00:11:38,240 --> 00:11:46,910
is a color which they can use as a

202
00:11:40,340 --> 00:11:50,390
common secret from now on right in bath

203
00:11:46,910 --> 00:11:55,640
word defeat among key agreement uses

204
00:11:50,390 --> 00:12:00,650
modular arithmetic so let's say that we

205
00:11:55,640 --> 00:12:05,540
use the number 14 in this case and we

206
00:12:00,650 --> 00:12:09,980
multiply 2 with itself and at the

207
00:12:05,540 --> 00:12:13,969
beginning it's easy to see how two is

208
00:12:09,980 --> 00:12:17,410
moving around the clock but after some

209
00:12:13,970 --> 00:12:20,510
multiplication it just seems random and

210
00:12:17,410 --> 00:12:23,329
this is a very basic and easy example

211
00:12:20,510 --> 00:12:25,189
but in diffie-hellman key agreement we

212
00:12:23,330 --> 00:12:30,340
are usually using very very large

213
00:12:25,190 --> 00:12:33,230
numbers and what there is one very nice

214
00:12:30,340 --> 00:12:35,930
characteristic of this mathematical

215
00:12:33,230 --> 00:12:38,930
problem is that it is very easy to

216
00:12:35,930 --> 00:12:41,839
calculate it in one way but it is very

217
00:12:38,930 --> 00:12:44,540
hard to calculate the other way so if we

218
00:12:41,840 --> 00:12:48,710
are looking at this clock it is very

219
00:12:44,540 --> 00:12:51,949
easy to find out how we get here so if I

220
00:12:48,710 --> 00:12:55,280
choose random number and the clock you

221
00:12:51,950 --> 00:12:57,650
won't be able to know how I was able to

222
00:12:55,280 --> 00:13:01,400
get there and you have to basically

223
00:12:57,650 --> 00:13:03,410
almost try all the combinations to see I

224
00:13:01,400 --> 00:13:05,689
got there and that's that's a nice

225
00:13:03,410 --> 00:13:11,000
property of this different monkey

226
00:13:05,690 --> 00:13:13,400
agreement what's a bit different from

227
00:13:11,000 --> 00:13:14,900
the traditional diffie-hellman in the

228
00:13:13,400 --> 00:13:19,130
elliptic curve diffie-hellman key

229
00:13:14,900 --> 00:13:23,449
agreement that it is much faster which

230
00:13:19,130 --> 00:13:26,060
is very nice in my case and when I

231
00:13:23,450 --> 00:13:28,820
started creating my proof of concept

232
00:13:26,060 --> 00:13:31,219
code with diffie-hellman it turned out

233
00:13:28,820 --> 00:13:34,970
it is just too slow for JavaScript and

234
00:13:31,220 --> 00:13:41,210
it's not feasible to do that with

235
00:13:34,970 --> 00:13:44,170
practical key lengths and I really don't

236
00:13:41,210 --> 00:13:46,389
want to go into the very deep details

237
00:13:44,170 --> 00:13:50,199
how elliptic curve diffie-hellman works

238
00:13:46,389 --> 00:13:54,399
just think about like this is a billiard

239
00:13:50,200 --> 00:13:57,820
ball on the table and if you know the

240
00:13:54,399 --> 00:14:02,019
starting position of the ball and you

241
00:13:57,820 --> 00:14:06,570
know the force and you know the vector

242
00:14:02,019 --> 00:14:10,510
how you basically hit the ball you can

243
00:14:06,570 --> 00:14:12,730
basically calculate where the ball will

244
00:14:10,510 --> 00:14:16,660
end up on the table from a mathematical

245
00:14:12,730 --> 00:14:20,769
perspective but if I ask you that the

246
00:14:16,660 --> 00:14:26,649
ball was here and it get there it's very

247
00:14:20,769 --> 00:14:28,870
hard to come up with a long path how you

248
00:14:26,649 --> 00:14:33,160
can get the ball from one point to the

249
00:14:28,870 --> 00:14:34,959
other point right so this is a very very

250
00:14:33,160 --> 00:14:39,279
high level overview of how elliptic

251
00:14:34,959 --> 00:14:43,630
curve diffie-hellman works now this

252
00:14:39,279 --> 00:14:46,570
slide is pretty important it's a bit

253
00:14:43,630 --> 00:14:48,880
complicated but bear with bear with me I

254
00:14:46,570 --> 00:14:53,140
am sure I will be able to explain it to

255
00:14:48,880 --> 00:14:56,470
you so this is basically how my idea

256
00:14:53,140 --> 00:15:00,100
works and how it was implemented on the

257
00:14:56,470 --> 00:15:02,589
left side you can see the victim user

258
00:15:00,100 --> 00:15:04,870
who is browsing the internet with a

259
00:15:02,589 --> 00:15:07,860
vulnerable web browser and the right

260
00:15:04,870 --> 00:15:10,690
side you can see the ethical server

261
00:15:07,860 --> 00:15:16,199
delivering the exploit code and the

262
00:15:10,690 --> 00:15:19,029
mother so as it is with every web

263
00:15:16,199 --> 00:15:22,089
communication first the client has to

264
00:15:19,029 --> 00:15:25,300
start communication with the web server

265
00:15:22,089 --> 00:15:29,050
so it sends an HTTP request to the

266
00:15:25,300 --> 00:15:32,529
server now the server will generate the

267
00:15:29,050 --> 00:15:37,599
elliptic curve diffie-hellman keys and

268
00:15:32,529 --> 00:15:40,449
it will send these the elliptic curve

269
00:15:37,600 --> 00:15:43,839
diffie-hellman parameters and the public

270
00:15:40,449 --> 00:15:47,410
key part of what he just generated

271
00:15:43,839 --> 00:15:51,160
together with some crypto libraries to

272
00:15:47,410 --> 00:15:53,800
the user victim browser now the browser

273
00:15:51,160 --> 00:15:57,430
will execute all this bunch of

274
00:15:53,800 --> 00:15:58,000
JavaScript code and now it will generate

275
00:15:57,430 --> 00:16:02,339
its

276
00:15:58,000 --> 00:16:05,200
own secret diffie-hellman key and

277
00:16:02,340 --> 00:16:08,170
because now it already has the public

278
00:16:05,200 --> 00:16:11,770
key from the server it can generate the

279
00:16:08,170 --> 00:16:14,800
common secret in memory now the client

280
00:16:11,770 --> 00:16:17,290
will send its public key to the server

281
00:16:14,800 --> 00:16:20,969
now the server can calculate the common

282
00:16:17,290 --> 00:16:24,730
secret now that they both have the same

283
00:16:20,970 --> 00:16:28,270
common secret in memory the server can

284
00:16:24,730 --> 00:16:32,200
actually encrypt diff or the following

285
00:16:28,270 --> 00:16:36,520
traffic in my example I'm using AES but

286
00:16:32,200 --> 00:16:39,480
you can use whatever you want so now the

287
00:16:36,520 --> 00:16:43,480
exploit actual exploit code will be sent

288
00:16:39,480 --> 00:16:46,780
in an encrypted fashion to the victim

289
00:16:43,480 --> 00:16:50,740
browser the victim browser will decrypt

290
00:16:46,780 --> 00:16:53,140
the exploit code in memory and run it in

291
00:16:50,740 --> 00:16:56,440
memory and if the browser is really

292
00:16:53,140 --> 00:17:01,090
vulnerable then the exploit code will be

293
00:16:56,440 --> 00:17:03,760
able to take over in the code path of

294
00:17:01,090 --> 00:17:08,020
the victim browser so for example if

295
00:17:03,760 --> 00:17:11,230
your check code is about downloading a

296
00:17:08,020 --> 00:17:14,650
piece of mother from the exploit server

297
00:17:11,230 --> 00:17:18,640
then the browser will download this

298
00:17:14,650 --> 00:17:22,360
mother and execute it and of course you

299
00:17:18,640 --> 00:17:25,110
can use encryption in this stage as well

300
00:17:22,359 --> 00:17:29,560
which is again nice if you want to

301
00:17:25,109 --> 00:17:34,360
bypass some protections so this is

302
00:17:29,560 --> 00:17:37,899
basically what I did but let's see this

303
00:17:34,360 --> 00:17:41,050
in action in this example I won't use

304
00:17:37,900 --> 00:17:44,590
any exploit code it's just now you can

305
00:17:41,050 --> 00:17:48,480
see how it really looks on the wire and

306
00:17:44,590 --> 00:17:48,480
in the memory what I'm doing

307
00:17:54,530 --> 00:18:00,690
so here is Chrome I'm opening the

308
00:17:57,270 --> 00:18:07,770
exploit server you can see JavaScript

309
00:18:00,690 --> 00:18:11,190
was able to run but if you look at the

310
00:18:07,770 --> 00:18:14,820
document object model of the browser you

311
00:18:11,190 --> 00:18:17,910
can just see some encrypted strings and

312
00:18:14,820 --> 00:18:22,110
some crypto parameters but you cannot

313
00:18:17,910 --> 00:18:25,620
see the actual JavaScript code because

314
00:18:22,110 --> 00:18:28,379
this is just a demo application the

315
00:18:25,620 --> 00:18:32,969
common secret which you can use to

316
00:18:28,380 --> 00:18:37,250
decrypt this code is still left in the

317
00:18:32,970 --> 00:18:39,930
memory so if I go to the browser console

318
00:18:37,250 --> 00:18:43,610
here I'm just showing that you can see

319
00:18:39,930 --> 00:18:48,960
the same on the wire so if I decrypt

320
00:18:43,610 --> 00:18:53,330
this code in memory because the session

321
00:18:48,960 --> 00:18:53,330
key is still in the memory I am able to

322
00:18:53,630 --> 00:19:03,000
decipher what was the actual JavaScript

323
00:18:57,930 --> 00:19:07,490
running in the browser but without the

324
00:19:03,000 --> 00:19:07,490
key in memory you cannot really do that

325
00:19:10,550 --> 00:19:19,409
so my very first proof of concept was

326
00:19:15,450 --> 00:19:22,470
created more than three years ago and I

327
00:19:19,410 --> 00:19:29,210
chose nodejs for the implementation

328
00:19:22,470 --> 00:19:34,290
actually it was a nice language or

329
00:19:29,210 --> 00:19:36,660
framework to do this because what's

330
00:19:34,290 --> 00:19:39,210
really cool in node.js that you can use

331
00:19:36,660 --> 00:19:42,630
the same crypto libraries on the server

332
00:19:39,210 --> 00:19:44,790
side and the client side and this made

333
00:19:42,630 --> 00:19:48,810
the whole proof-of-concept process

334
00:19:44,790 --> 00:19:51,389
pretty fast I think I spent like one day

335
00:19:48,810 --> 00:19:54,600
creating this proof of concept even

336
00:19:51,390 --> 00:19:57,380
though I had no any no experience with

337
00:19:54,600 --> 00:19:58,500
nodejs at all so this was my very first

338
00:19:57,380 --> 00:20:02,760
nodejs

339
00:19:58,500 --> 00:20:05,740
application I wrote but after a while I

340
00:20:02,760 --> 00:20:08,379
thought it's time to read

341
00:20:05,740 --> 00:20:12,220
right my proof of concept so I chose

342
00:20:08,380 --> 00:20:16,690
Ruby to do that actually it took me like

343
00:20:12,220 --> 00:20:19,330
five days to port this whole stuff into

344
00:20:16,690 --> 00:20:24,429
Ruby just because of the different

345
00:20:19,330 --> 00:20:26,949
crypto libraries used and now my Ruby

346
00:20:24,429 --> 00:20:29,920
code is compatible with all the

347
00:20:26,950 --> 00:20:34,540
mainstream browsers like it's working

348
00:20:29,920 --> 00:20:38,130
with edge I 11 it doesn't work with item

349
00:20:34,540 --> 00:20:42,010
because elliptic curve cryptography

350
00:20:38,130 --> 00:20:45,400
libraries do not really work with item

351
00:20:42,010 --> 00:20:48,040
or older so that's it

352
00:20:45,400 --> 00:20:50,530
it works for sure with Firefox it works

353
00:20:48,040 --> 00:20:53,830
with tor browser Chrome Opera Mobile

354
00:20:50,530 --> 00:20:56,649
Safari mobile Chrome Android built-in

355
00:20:53,830 --> 00:21:00,909
browsers so basically it's compatible

356
00:20:56,650 --> 00:21:03,970
with all the browsers you use now and I

357
00:21:00,910 --> 00:21:04,900
was very very excited of what I have

358
00:21:03,970 --> 00:21:09,010
created

359
00:21:04,900 --> 00:21:13,480
so I created a blog post and I tweeted

360
00:21:09,010 --> 00:21:16,720
about my idea and it was very very

361
00:21:13,480 --> 00:21:23,110
popular on Twitter I got three likes and

362
00:21:16,720 --> 00:21:26,290
three retweets yes and at that time I

363
00:21:23,110 --> 00:21:30,520
didn't truly know what what what is

364
00:21:26,290 --> 00:21:36,899
really going on but someone's later I

365
00:21:30,520 --> 00:21:43,690
realized that my idea was actually

366
00:21:36,900 --> 00:21:46,690
noticed by some faults so like two

367
00:21:43,690 --> 00:21:50,679
months later I read the fire I analyzes

368
00:21:46,690 --> 00:21:54,250
where they analyzed the latest angular

369
00:21:50,679 --> 00:21:58,150
exploit kit and it was the first

370
00:21:54,250 --> 00:22:01,300
documented in divided encrypted exploit

371
00:21:58,150 --> 00:22:03,400
kit they were the guys were using just

372
00:22:01,300 --> 00:22:08,020
the plain diffie-hellman encryption at

373
00:22:03,400 --> 00:22:12,220
the elliptic curve one and they didn't

374
00:22:08,020 --> 00:22:17,740
use any zero-day in this exploit but

375
00:22:12,220 --> 00:22:18,710
they did hide their char code with the

376
00:22:17,740 --> 00:22:21,140
encryption

377
00:22:18,710 --> 00:22:23,630
and actually it really makes sense in

378
00:22:21,140 --> 00:22:26,600
this case that they don't want to

379
00:22:23,630 --> 00:22:28,549
encrypt everything because all the other

380
00:22:26,600 --> 00:22:32,059
parts of the exploits are already known

381
00:22:28,549 --> 00:22:36,918
and documented but they really want to

382
00:22:32,059 --> 00:22:39,649
hide the CNC for example where they what

383
00:22:36,919 --> 00:22:41,750
they use to download the additional

384
00:22:39,649 --> 00:22:43,850
mover for their attacks so that's why

385
00:22:41,750 --> 00:22:50,870
they were using encryption to protect

386
00:22:43,850 --> 00:22:54,949
their shot code so I'm not sure 100%

387
00:22:50,870 --> 00:22:58,340
that they disguise the angular

388
00:22:54,950 --> 00:23:01,760
developers read my blog post or not but

389
00:22:58,340 --> 00:23:08,629
I think it's quite close in time that

390
00:23:01,760 --> 00:23:13,730
they might have been I did had some chat

391
00:23:08,630 --> 00:23:17,120
with some exploited researchers and they

392
00:23:13,730 --> 00:23:20,720
told me that Thank You Zoli you just

393
00:23:17,120 --> 00:23:25,870
made my life a lot harder because now I

394
00:23:20,720 --> 00:23:29,870
am as an analyst I cannot decrypt these

395
00:23:25,870 --> 00:23:35,559
exploit cause I cannot decrypt a word

396
00:23:29,870 --> 00:23:40,399
the CNC is so yeah thank you but

397
00:23:35,559 --> 00:23:44,090
actually turned out that because these

398
00:23:40,399 --> 00:23:47,080
guys in the angular exploit kit they

399
00:23:44,090 --> 00:23:54,500
were using if you have on encryption

400
00:23:47,080 --> 00:23:58,399
they were using some short keys and the

401
00:23:54,500 --> 00:24:01,850
guys from Kaspersky Lab they use clever

402
00:23:58,399 --> 00:24:06,799
math and they were basically able to

403
00:24:01,850 --> 00:24:09,980
find the discrete logarithm for used in

404
00:24:06,799 --> 00:24:15,760
these exploit kits so they were able to

405
00:24:09,980 --> 00:24:19,990
crack it and some months later other

406
00:24:15,760 --> 00:24:24,520
exploit kits also started to implement

407
00:24:19,990 --> 00:24:24,520
encrypted exploit deliveries

408
00:24:25,280 --> 00:24:33,590
I think the main reason these angular

409
00:24:29,720 --> 00:24:35,510
xwiki developers used differ Hammond was

410
00:24:33,590 --> 00:24:39,550
because they were targeting older

411
00:24:35,510 --> 00:24:42,559
versions of Internet Explorer so they

412
00:24:39,550 --> 00:24:45,980
couldn't really use a lefty curve

413
00:24:42,559 --> 00:24:49,010
diffie-hellman so they were like oh I'm

414
00:24:45,980 --> 00:24:54,320
a sad panda I cannot use proper crypto

415
00:24:49,010 --> 00:24:57,050
so my crypto was broken all right so now

416
00:24:54,320 --> 00:25:00,800
let's just talk a little bit about the

417
00:24:57,050 --> 00:25:03,919
attacker model because as I already

418
00:25:00,800 --> 00:25:07,639
mentioned the title of my talk is about

419
00:25:03,920 --> 00:25:12,140
hiding your zero-day and I started my

420
00:25:07,640 --> 00:25:14,690
research about bypassing these network

421
00:25:12,140 --> 00:25:17,179
intrusion detection systems so let's

422
00:25:14,690 --> 00:25:20,420
let's see how these different things

423
00:25:17,179 --> 00:25:23,809
come together so I will talk about who

424
00:25:20,420 --> 00:25:25,610
my attacker is and in my case now my

425
00:25:23,809 --> 00:25:28,370
attacker is the reverse engineer who

426
00:25:25,610 --> 00:25:32,870
tries to reverse the pressures zero-day

427
00:25:28,370 --> 00:25:36,830
exploit also my attacker is this next

428
00:25:32,870 --> 00:25:41,659
generation which detection system and I

429
00:25:36,830 --> 00:25:47,120
will also talk about what these guys can

430
00:25:41,660 --> 00:25:51,110
do to reverse engineer my code first of

431
00:25:47,120 --> 00:25:54,678
all clearly they can record and they can

432
00:25:51,110 --> 00:25:57,620
replay network traffic as it was the

433
00:25:54,679 --> 00:26:01,929
case for example with the Safari browser

434
00:25:57,620 --> 00:26:06,260
zero-day in the ahmed mansour case

435
00:26:01,929 --> 00:26:10,120
reverse engineer can also debug the

436
00:26:06,260 --> 00:26:15,170
javascript code in the browser itself

437
00:26:10,120 --> 00:26:18,050
like we did with my first demo reverse

438
00:26:15,170 --> 00:26:21,200
engineer can also debug the browser at

439
00:26:18,050 --> 00:26:25,159
the assembly level when we are talking

440
00:26:21,200 --> 00:26:27,309
about windows but this is not a fairly

441
00:26:25,160 --> 00:26:31,460
trivial task if we are talking about

442
00:26:27,309 --> 00:26:36,110
closed part forms like iOS because on

443
00:26:31,460 --> 00:26:41,179
iOS if you are not working for Apple

444
00:26:36,110 --> 00:26:44,090
and your iOS version is pretty updated

445
00:26:41,179 --> 00:26:46,700
then probably you don't have a jailbreak

446
00:26:44,090 --> 00:26:50,029
for that and without the jailbreak you

447
00:26:46,700 --> 00:26:56,750
cannot run assembly level debuggers on

448
00:26:50,029 --> 00:26:58,760
your iOS system so let's have a look at

449
00:26:56,750 --> 00:27:02,080
these encrypted exploit they're very

450
00:26:58,760 --> 00:27:04,700
from the network forensics point of view

451
00:27:02,080 --> 00:27:08,178
whenever you look at the wire you will

452
00:27:04,700 --> 00:27:11,330
see a bunch of critter libraries public

453
00:27:08,179 --> 00:27:15,760
key exchange and some encrypted blobs

454
00:27:11,330 --> 00:27:19,210
and if you don't have the shared key

455
00:27:15,760 --> 00:27:25,279
then you cannot really do much with

456
00:27:19,210 --> 00:27:27,230
decrypting these blocks and you might

457
00:27:25,279 --> 00:27:30,169
ask why is this different why is this

458
00:27:27,230 --> 00:27:33,730
new because in the past you might have

459
00:27:30,169 --> 00:27:38,090
heard that exploit kids were using

460
00:27:33,730 --> 00:27:41,679
encryption to protect their code but in

461
00:27:38,090 --> 00:27:47,320
the past it was just some static keys

462
00:27:41,679 --> 00:27:52,250
and it was because the static key was

463
00:27:47,320 --> 00:27:55,279
delivered to the browser in a static and

464
00:27:52,250 --> 00:27:58,100
plain text fashion it just meant that

465
00:27:55,279 --> 00:28:02,240
the reverse engineer has just run

466
00:27:58,100 --> 00:28:05,449
through the deciphering with the static

467
00:28:02,240 --> 00:28:08,929
key and he can do that anytime

468
00:28:05,450 --> 00:28:11,630
he or she wants so it's not really a

469
00:28:08,929 --> 00:28:17,870
real encryption if you provide the keys

470
00:28:11,630 --> 00:28:21,679
to everyone and it is also a bit

471
00:28:17,870 --> 00:28:24,678
different compared to SSL or TLS and I

472
00:28:21,679 --> 00:28:29,000
will talk about this very soon and I

473
00:28:24,679 --> 00:28:32,659
will talk about how this whole encrypted

474
00:28:29,000 --> 00:28:35,510
exploit delivery really effects the so

475
00:28:32,659 --> 00:28:41,480
called exploit replay technique which is

476
00:28:35,510 --> 00:28:46,610
mostly used by exploited researchers so

477
00:28:41,480 --> 00:28:49,010
let's talk about SSL TLS I'm sure you

478
00:28:46,610 --> 00:28:50,020
guys know that if you control your

479
00:28:49,010 --> 00:28:52,900
environment

480
00:28:50,020 --> 00:28:56,410
and if you control your browser then

481
00:28:52,900 --> 00:28:59,800
doing any man in the middle in the TLS

482
00:28:56,410 --> 00:29:04,450
layer is very easy you just have to use

483
00:28:59,800 --> 00:29:06,820
any intercepting proxy and then you

484
00:29:04,450 --> 00:29:09,160
install the root certificate of the

485
00:29:06,820 --> 00:29:12,280
intercepting proxy in your browser and

486
00:29:09,160 --> 00:29:16,120
then you can easily run in the middle

487
00:29:12,280 --> 00:29:21,040
the SSL or TLS encrypted traffic that's

488
00:29:16,120 --> 00:29:23,469
fairly easy and straightforward but when

489
00:29:21,040 --> 00:29:27,720
it comes to you

490
00:29:23,470 --> 00:29:30,550
mundo meddling the errand squirrel

491
00:29:27,720 --> 00:29:32,650
encrypted exploit anyway it's a bit

492
00:29:30,550 --> 00:29:35,080
different because ssl/tls is

493
00:29:32,650 --> 00:29:37,990
standardized right so there are

494
00:29:35,080 --> 00:29:40,060
standardized ways to do that but if

495
00:29:37,990 --> 00:29:42,730
someone is changing the islands put a

496
00:29:40,060 --> 00:29:44,800
code every time then there is no

497
00:29:42,730 --> 00:29:51,400
standard way you can man in the middle

498
00:29:44,800 --> 00:29:55,780
it so let's talk about this technique

499
00:29:51,400 --> 00:30:00,390
called exploit replace which is very

500
00:29:55,780 --> 00:30:00,389
commonly used by exploited researchers

501
00:30:02,550 --> 00:30:12,070
the main advantage of this iron school

502
00:30:08,650 --> 00:30:15,400
encrypted exploit delivery is that the

503
00:30:12,070 --> 00:30:19,510
encrypted exploit traffic cannot be

504
00:30:15,400 --> 00:30:22,420
replayed once it was running in the

505
00:30:19,510 --> 00:30:25,560
environment and you have a network dump

506
00:30:22,420 --> 00:30:28,390
from that exploit you cannot replay it

507
00:30:25,560 --> 00:30:31,360
because the client will generate a

508
00:30:28,390 --> 00:30:34,570
different private key and the different

509
00:30:31,360 --> 00:30:38,350
public key and now the client will send

510
00:30:34,570 --> 00:30:42,730
this different public key to the replay

511
00:30:38,350 --> 00:30:46,120
server and now the common secret will be

512
00:30:42,730 --> 00:30:48,580
different from the first round when the

513
00:30:46,120 --> 00:30:50,739
client was infected and is the second

514
00:30:48,580 --> 00:30:54,129
run when you try to reverse engineer the

515
00:30:50,740 --> 00:30:57,490
code so in this case the replays ever

516
00:30:54,130 --> 00:31:01,060
either sends the encrypted data back to

517
00:30:57,490 --> 00:31:02,870
the client which it cannot decrypt or it

518
00:31:01,060 --> 00:31:04,909
just just stops

519
00:31:02,870 --> 00:31:06,949
the whole explosive play because from

520
00:31:04,910 --> 00:31:10,340
this point of view there is nothing you

521
00:31:06,950 --> 00:31:13,010
can do but again let's see this in

522
00:31:10,340 --> 00:31:15,310
action how this exploit replay really

523
00:31:13,010 --> 00:31:15,310
works

524
00:31:24,800 --> 00:31:38,780
so here you can see fiddler and first I

525
00:31:30,800 --> 00:31:43,220
am using the plane exploit without any

526
00:31:38,780 --> 00:31:48,960
encryption used and as you can see in

527
00:31:43,220 --> 00:31:54,990
fiddler it was just one plain and simple

528
00:31:48,960 --> 00:31:57,420
request and it was a bit quick which was

529
00:31:54,990 --> 00:32:01,500
really nice with fiddler that whenever

530
00:31:57,420 --> 00:32:04,740
it intercepted a request you can add it

531
00:32:01,500 --> 00:32:08,730
to the autoresponder module of fiddler

532
00:32:04,740 --> 00:32:12,720
and from now on not the exploit server

533
00:32:08,730 --> 00:32:15,030
will respond with these requests but

534
00:32:12,720 --> 00:32:17,300
fiddler so it basically recorded the

535
00:32:15,030 --> 00:32:21,050
traffic and from now on it will be

536
00:32:17,300 --> 00:32:25,440
replaying back so as you might expect

537
00:32:21,050 --> 00:32:28,970
because this is just a static exploit if

538
00:32:25,440 --> 00:32:32,520
I use the same exploit from the browser

539
00:32:28,970 --> 00:32:37,350
the exploit will succeed as you would

540
00:32:32,520 --> 00:32:39,389
expect and here you can see the with

541
00:32:37,350 --> 00:32:42,389
there are different colors used in

542
00:32:39,390 --> 00:32:46,080
fiddler that this request has been

543
00:32:42,390 --> 00:32:48,030
delivered by the fiddler proxy and it

544
00:32:46,080 --> 00:32:54,240
was not delivered by the original

545
00:32:48,030 --> 00:32:56,310
exploit server but now let's see what

546
00:32:54,240 --> 00:32:59,960
happens if I'm using the iris grow

547
00:32:56,310 --> 00:32:59,960
encrypted exploit delivery

548
00:33:07,540 --> 00:33:12,790
so as you can see the exploit still

549
00:33:10,630 --> 00:33:15,850
worked which is nice

550
00:33:12,790 --> 00:33:20,020
now there are a bunch of different

551
00:33:15,850 --> 00:33:22,600
requests because of the key exchange and

552
00:33:20,020 --> 00:33:25,200
the crypto libraries and all of the

553
00:33:22,600 --> 00:33:30,010
different things but now if I try to

554
00:33:25,200 --> 00:33:33,790
replay this traffic it will just it

555
00:33:30,010 --> 00:33:37,600
won't work right because the client will

556
00:33:33,790 --> 00:33:42,820
send a totally different public key to

557
00:33:37,600 --> 00:33:45,639
the server and by default fiddler is

558
00:33:42,820 --> 00:33:47,710
looking for the exact same request

559
00:33:45,640 --> 00:33:49,620
and now the request was totally

560
00:33:47,710 --> 00:33:53,980
different because of the different

561
00:33:49,620 --> 00:33:55,929
public key used so Fiedler said I don't

562
00:33:53,980 --> 00:33:58,750
know what to do with this request I have

563
00:33:55,930 --> 00:34:03,870
never seen some requests like this so I

564
00:33:58,750 --> 00:34:07,420
will just serve 404 to this client of

565
00:34:03,870 --> 00:34:10,659
course you can try to hack fiddler that

566
00:34:07,420 --> 00:34:14,649
ok let's just say that you should serve

567
00:34:10,659 --> 00:34:19,649
back the very same response to the

568
00:34:14,649 --> 00:34:22,839
client no matter what public key is used

569
00:34:19,649 --> 00:34:27,270
but it just won't work because the share

570
00:34:22,840 --> 00:34:27,270
secret will be totally different right

571
00:34:28,168 --> 00:34:38,620
as you can see the exploit is not

572
00:34:32,830 --> 00:34:45,370
working anymore so the researcher either

573
00:34:38,620 --> 00:34:50,668
has one shot caching the exploit or or

574
00:34:45,370 --> 00:34:50,668
he cannot properly reverse-engineer it

575
00:35:00,200 --> 00:35:10,520
who is watching Archer all right

576
00:35:04,040 --> 00:35:13,910
so most of you guys you don't deal with

577
00:35:10,520 --> 00:35:17,570
exploit kids and exploit replace a lot I

578
00:35:13,910 --> 00:35:21,649
guess but if you do and this is your

579
00:35:17,570 --> 00:35:25,630
life then you can see how either awesome

580
00:35:21,650 --> 00:35:29,480
or how terrifying this thing could be

581
00:35:25,630 --> 00:35:34,280
and it's just not me stating that

582
00:35:29,480 --> 00:35:36,710
exploit replay is very hard when the

583
00:35:34,280 --> 00:35:39,920
exploit is encrypted with diffie-hellman

584
00:35:36,710 --> 00:35:41,630
or something like that there is a blog

585
00:35:39,920 --> 00:35:44,450
post by Trend Micro where they are

586
00:35:41,630 --> 00:35:48,260
analyzing the Ostrom exploit kit and

587
00:35:44,450 --> 00:35:51,350
they go into deep details why they are

588
00:35:48,260 --> 00:35:54,980
not able to replay the exploit traffic

589
00:35:51,350 --> 00:35:57,259
anymore and there is a fun fact that it

590
00:35:54,980 --> 00:36:00,170
turns out everyone is using this

591
00:35:57,260 --> 00:36:03,560
encrypted exploit every for different

592
00:36:00,170 --> 00:36:06,290
reasons or for different purposes as I

593
00:36:03,560 --> 00:36:09,710
mentioned the angular guys they used it

594
00:36:06,290 --> 00:36:12,950
to hide their Shack codes so their CNC

595
00:36:09,710 --> 00:36:16,460
server address is not leaked for

596
00:36:12,950 --> 00:36:19,399
restroom they were actually protecting

597
00:36:16,460 --> 00:36:21,950
the whole exploit code and even though

598
00:36:19,400 --> 00:36:25,580
it was not a zero day at the time they

599
00:36:21,950 --> 00:36:28,250
were using it because the vulnerability

600
00:36:25,580 --> 00:36:31,940
was already known and there were patches

601
00:36:28,250 --> 00:36:36,860
against it but they were basically the

602
00:36:31,940 --> 00:36:40,310
only team in the world who can were able

603
00:36:36,860 --> 00:36:44,180
to create a real proper working exploit

604
00:36:40,310 --> 00:36:47,080
code to exploit that vulnerability which

605
00:36:44,180 --> 00:36:51,040
means that if they protect it with

606
00:36:47,080 --> 00:36:54,890
encrypted exploit delivery the other

607
00:36:51,040 --> 00:36:57,580
exploited creators cannot reverse

608
00:36:54,890 --> 00:37:02,330
engineer it so they have a competitive

609
00:36:57,580 --> 00:37:05,299
advantage that they can exploit all the

610
00:37:02,330 --> 00:37:11,360
users with this very nice exploit by the

611
00:37:05,300 --> 00:37:14,180
others cannot ok so in the following

612
00:37:11,360 --> 00:37:19,069
slides I will

613
00:37:14,180 --> 00:37:21,379
talk about defense and offense most of

614
00:37:19,069 --> 00:37:23,089
the times it's just mixed on all the

615
00:37:21,380 --> 00:37:25,220
slides whether I'm talking about defense

616
00:37:23,089 --> 00:37:28,220
and defense but I'm really sure that you

617
00:37:25,220 --> 00:37:33,980
guys will be able to follow so I will

618
00:37:28,220 --> 00:37:37,160
talk about how we can create some

619
00:37:33,980 --> 00:37:39,170
Prevention's against encrypted exploit

620
00:37:37,160 --> 00:37:43,670
delivery when it comes to the network

621
00:37:39,170 --> 00:37:47,450
level and how we can detect it I will

622
00:37:43,670 --> 00:37:51,380
talk about some ways to analyze it on

623
00:37:47,450 --> 00:37:53,808
the endpoint and from an offensive side

624
00:37:51,380 --> 00:37:58,069
I will also talk about how you what you

625
00:37:53,809 --> 00:38:03,109
can do to make blue teamers our life

626
00:37:58,069 --> 00:38:05,630
even harder so from an offensive point

627
00:38:03,109 --> 00:38:09,410
of view it's very very important that

628
00:38:05,630 --> 00:38:13,059
you use one-time URLs which means that

629
00:38:09,410 --> 00:38:17,299
you deliver your exploit only once

630
00:38:13,059 --> 00:38:20,299
because now that the exploit cannot be

631
00:38:17,299 --> 00:38:24,710
replayed as many times as the

632
00:38:20,299 --> 00:38:26,029
researchers want if you deliver your

633
00:38:24,710 --> 00:38:29,390
exploit only once

634
00:38:26,029 --> 00:38:32,450
that means the reverse engineer has only

635
00:38:29,390 --> 00:38:39,589
one chance to catch the exploit which is

636
00:38:32,450 --> 00:38:42,319
hard this is implemented in my tool one

637
00:38:39,589 --> 00:38:44,960
time you are as are very easy and

638
00:38:42,319 --> 00:38:48,759
straightforward if you are attacking one

639
00:38:44,960 --> 00:38:51,619
targeted person but as it's the case

640
00:38:48,760 --> 00:38:55,039
with law enforcement whenever they

641
00:38:51,619 --> 00:38:57,650
seized large website and they want to

642
00:38:55,039 --> 00:39:00,470
target all the users of the website one

643
00:38:57,650 --> 00:39:03,520
times URLs just won't work for you in

644
00:39:00,470 --> 00:39:07,250
that case what I can recommend is that

645
00:39:03,520 --> 00:39:10,210
you keep a state of users who you

646
00:39:07,250 --> 00:39:14,119
already infected or try to infect and

647
00:39:10,210 --> 00:39:18,950
you only try to infect one logged in

648
00:39:14,119 --> 00:39:23,270
user only once again this makes analyzes

649
00:39:18,950 --> 00:39:27,740
a lot harder one can also put time

650
00:39:23,270 --> 00:39:30,860
limits between the JavaScript code

651
00:39:27,740 --> 00:39:34,459
you prevent manual debugging it's fairly

652
00:39:30,860 --> 00:39:38,030
easy to implement it so I did that for

653
00:39:34,460 --> 00:39:40,400
sure it might make sense to remove the

654
00:39:38,030 --> 00:39:43,010
whole document object model after the

655
00:39:40,400 --> 00:39:46,370
exploit was able to run again this is

656
00:39:43,010 --> 00:39:49,820
implemented and I'm going to show you

657
00:39:46,370 --> 00:39:52,600
with the tor browser exploit how this

658
00:39:49,820 --> 00:39:52,600
really works

659
00:40:03,330 --> 00:40:13,950
so here I have fire shark on port 80 and

660
00:40:08,250 --> 00:40:17,130
I will use via shark to monitor when the

661
00:40:13,950 --> 00:40:20,609
exploit was able to run on the endpoint

662
00:40:17,130 --> 00:40:23,850
and it's leaking the IP address and

663
00:40:20,610 --> 00:40:27,090
machine name and MAC address of the

664
00:40:23,850 --> 00:40:35,180
victim browser in the clear text to a

665
00:40:27,090 --> 00:40:39,560
server so here I'm visiting the

666
00:40:35,180 --> 00:40:46,440
encrypted exploit every site which is

667
00:40:39,560 --> 00:40:51,000
delivering the exploit code and here we

668
00:40:46,440 --> 00:40:54,630
can see all the encrypted code but now

669
00:40:51,000 --> 00:40:59,190
the browser is hanging this is very

670
00:40:54,630 --> 00:41:07,230
common with exploit codes and BOM is

671
00:40:59,190 --> 00:41:12,510
done so now you can see still what was

672
00:41:07,230 --> 00:41:15,030
sent to the client but because the

673
00:41:12,510 --> 00:41:17,970
crypto keys are already cleared from the

674
00:41:15,030 --> 00:41:21,390
memory you cannot decrypt it and you

675
00:41:17,970 --> 00:41:25,109
have no idea what was running inside the

676
00:41:21,390 --> 00:41:28,470
browser so you cannot reverse engineer

677
00:41:25,110 --> 00:41:32,430
the exploit code anymore as you can see

678
00:41:28,470 --> 00:41:35,100
this this variable this session storage

679
00:41:32,430 --> 00:41:37,080
as key be 64 was storing the keys and I

680
00:41:35,100 --> 00:41:37,860
already cleared it it's not there

681
00:41:37,080 --> 00:41:41,009
anymore

682
00:41:37,860 --> 00:41:45,120
so unless you catch the exploit in time

683
00:41:41,010 --> 00:41:47,550
it's just gone and here you can see that

684
00:41:45,120 --> 00:41:50,279
the exploit worked the share code was

685
00:41:47,550 --> 00:41:54,780
able to run and it contacted the

686
00:41:50,280 --> 00:41:58,760
webserver and leaked some information

687
00:41:54,780 --> 00:41:58,760
about the client

688
00:42:05,640 --> 00:42:15,339
all right so as you might expect because

689
00:42:11,860 --> 00:42:20,970
my code is published on the Internet

690
00:42:15,340 --> 00:42:24,670
you can write signatures to detect the

691
00:42:20,970 --> 00:42:29,500
actual implementation of my iron screw

692
00:42:24,670 --> 00:42:32,140
framework but I haven't spent too much

693
00:42:29,500 --> 00:42:35,110
time trying to bypass these signatures

694
00:42:32,140 --> 00:42:37,810
but it I'm sure it won't be really hard

695
00:42:35,110 --> 00:42:42,250
to do that

696
00:42:37,810 --> 00:42:47,860
besides signatures surely you can try to

697
00:42:42,250 --> 00:42:50,440
detect encrypted traffic on the wire but

698
00:42:47,860 --> 00:42:54,220
turns out there are other legitimate

699
00:42:50,440 --> 00:42:57,430
applications which use encryption on the

700
00:42:54,220 --> 00:43:05,379
JavaScript layer so you will end up

701
00:42:57,430 --> 00:43:09,310
blocking those as well and as is the

702
00:43:05,380 --> 00:43:12,400
case with any Enterprise environment for

703
00:43:09,310 --> 00:43:14,950
example if you are trying to protect

704
00:43:12,400 --> 00:43:18,220
your enterprise against encrypted

705
00:43:14,950 --> 00:43:21,759
exploit delivery there are some plain

706
00:43:18,220 --> 00:43:24,580
methods which you can use to make the

707
00:43:21,760 --> 00:43:27,730
attackers life harder for example if you

708
00:43:24,580 --> 00:43:31,120
are running a web proxy you might have

709
00:43:27,730 --> 00:43:35,350
the option to you block Uncategorized or

710
00:43:31,120 --> 00:43:38,740
new domains or you can just use domain

711
00:43:35,350 --> 00:43:41,290
invite listing but again this is a trade

712
00:43:38,740 --> 00:43:43,629
off against usability and some users

713
00:43:41,290 --> 00:43:48,670
might complain that they cannot access

714
00:43:43,630 --> 00:43:54,330
the websites they want actually there is

715
00:43:48,670 --> 00:43:58,000
one enterprise solution which can help

716
00:43:54,330 --> 00:44:01,509
protecting against both encrypted

717
00:43:58,000 --> 00:44:04,300
exploit delivery and exploit delivery as

718
00:44:01,510 --> 00:44:09,040
well and this technology is called web

719
00:44:04,300 --> 00:44:13,240
isolation web isolation works a little

720
00:44:09,040 --> 00:44:17,259
bit similar like web proxy but all the

721
00:44:13,240 --> 00:44:18,640
content with what is sent to the client

722
00:44:17,260 --> 00:44:22,390
browser

723
00:44:18,640 --> 00:44:28,990
is basically rendered on this proxy

724
00:44:22,390 --> 00:44:32,859
server and after its rendered is just

725
00:44:28,990 --> 00:44:37,750
basically screens what is sent back to

726
00:44:32,859 --> 00:44:42,549
the client and this means that whenever

727
00:44:37,750 --> 00:44:44,950
someone tries to exploit the browser's

728
00:44:42,549 --> 00:44:48,069
in the enterprise environment their

729
00:44:44,950 --> 00:44:53,549
exploit code will run on this web

730
00:44:48,069 --> 00:44:57,160
isolation proxy server and usually these

731
00:44:53,549 --> 00:45:00,490
web isolation servers they are not ie11

732
00:44:57,160 --> 00:45:07,058
or whatever so it might be a lot harder

733
00:45:00,490 --> 00:45:11,430
to find working exploits against that as

734
00:45:07,059 --> 00:45:15,690
I mentioned blue teamers might implement

735
00:45:11,430 --> 00:45:19,710
blocking Uncategorized or new domains or

736
00:45:15,690 --> 00:45:22,779
they can implement white listing as

737
00:45:19,710 --> 00:45:27,220
always these techniques can be bypassed

738
00:45:22,779 --> 00:45:29,170
like one can infect any web site which

739
00:45:27,220 --> 00:45:33,308
is already on the whitelist this

740
00:45:29,170 --> 00:45:36,609
technique is called watering hole or if

741
00:45:33,309 --> 00:45:39,309
you are a three-letter agency you might

742
00:45:36,609 --> 00:45:41,259
have the capability to do quantum insert

743
00:45:39,309 --> 00:45:47,289
techniques and you can deliver your

744
00:45:41,259 --> 00:45:49,119
exploits that way all right now let's

745
00:45:47,289 --> 00:45:52,450
talk a little bit about how you can

746
00:45:49,119 --> 00:45:57,190
analyze the iron scroll exploits on the

747
00:45:52,450 --> 00:46:01,390
Android you can try to log the shared

748
00:45:57,190 --> 00:46:03,819
key or the client private key you can

749
00:46:01,390 --> 00:46:07,000
try to fix the random generator

750
00:46:03,819 --> 00:46:09,900
so whenever the code runs it will

751
00:46:07,000 --> 00:46:13,420
generate the same client private keys

752
00:46:09,900 --> 00:46:17,049
you can also try to do that by hooking

753
00:46:13,420 --> 00:46:20,789
the JavaScript code so it will return

754
00:46:17,049 --> 00:46:24,190
the same client secret key every time

755
00:46:20,789 --> 00:46:28,660
there is also this tool called remote

756
00:46:24,190 --> 00:46:32,049
debugging on iOS Safari which might help

757
00:46:28,660 --> 00:46:35,979
if you are analyzing iOS

758
00:46:32,049 --> 00:46:38,650
browser zero days and you can also run

759
00:46:35,979 --> 00:46:42,399
something called detailed JavaScript

760
00:46:38,650 --> 00:46:46,959
execution trace log and there is a very

761
00:46:42,400 --> 00:47:03,130
awesome project for that and I'm going

762
00:46:46,959 --> 00:47:06,239
to show you that one how that works I'm

763
00:47:03,130 --> 00:47:08,979
using the same exploit as previously and

764
00:47:06,239 --> 00:47:14,910
here I'm using this called

765
00:47:08,979 --> 00:47:21,279
evil eyes er and it's basically debugger

766
00:47:14,910 --> 00:47:24,759
and it is hooking some important

767
00:47:21,279 --> 00:47:28,539
JavaScript functions inside Internet

768
00:47:24,759 --> 00:47:32,709
Explorer in this case it's hooking evil

769
00:47:28,539 --> 00:47:37,539
and document.write which is mostly used

770
00:47:32,709 --> 00:47:41,078
in my irons clearer framework and now

771
00:47:37,539 --> 00:47:51,039
the debugger is attaching itself to the

772
00:47:41,079 --> 00:47:54,819
browser and now if I visit the encrypted

773
00:47:51,039 --> 00:48:01,049
exploit delivery website the debugger

774
00:47:54,819 --> 00:48:01,049
just will split out basically the

775
00:48:01,799 --> 00:48:08,739
parameters which were used in a wall or

776
00:48:05,439 --> 00:48:12,848
document right and now you have access

777
00:48:08,739 --> 00:48:17,559
to the original exploit code which is

778
00:48:12,849 --> 00:48:21,910
very very nice so this is one way how

779
00:48:17,559 --> 00:48:26,549
you might be able to catch the actual

780
00:48:21,910 --> 00:48:32,828
exploit code on the endpoint once

781
00:48:26,549 --> 00:48:35,499
actually again from an offensive point

782
00:48:32,829 --> 00:48:39,969
of view if you want to make blue teamers

783
00:48:35,499 --> 00:48:43,770
life even more harder you can try to

784
00:48:39,969 --> 00:48:46,620
detect whenever the debug window is

785
00:48:43,770 --> 00:48:53,060
open in the browser I didn't implement

786
00:48:46,620 --> 00:48:55,859
this again if you are doing real

787
00:48:53,060 --> 00:48:58,470
offensive security you should really do

788
00:48:55,860 --> 00:49:02,220
proper fingerprinting of the target

789
00:48:58,470 --> 00:49:05,279
before you deliver your precious zero

790
00:49:02,220 --> 00:49:07,410
they exploit but this is target

791
00:49:05,280 --> 00:49:12,120
specifics of course I didn't implement

792
00:49:07,410 --> 00:49:17,040
this if you do code obfuscation a lot

793
00:49:12,120 --> 00:49:19,650
and you add a lot of junk code to your

794
00:49:17,040 --> 00:49:26,029
encrypted exploit every again that can

795
00:49:19,650 --> 00:49:26,030
make analyzes a little bit harder and

796
00:49:26,390 --> 00:49:34,700
also as I mentioned what you can do on

797
00:49:30,540 --> 00:49:38,460
your analyzes environment that you trick

798
00:49:34,700 --> 00:49:41,790
somehow the browser that it we generate

799
00:49:38,460 --> 00:49:46,260
the same same private case every time so

800
00:49:41,790 --> 00:49:50,190
you can do an exploit replay but it is

801
00:49:46,260 --> 00:49:51,900
very easy to detect this from the

802
00:49:50,190 --> 00:49:55,320
attackers point of view

803
00:49:51,900 --> 00:49:57,600
I just have to generate Keys twice and I

804
00:49:55,320 --> 00:50:00,110
check if they are the same I know I'm

805
00:49:57,600 --> 00:50:06,630
running inside and analyzes environment

806
00:50:00,110 --> 00:50:11,130
this is implemented as well what's

807
00:50:06,630 --> 00:50:15,780
really fun in JavaScript is there are

808
00:50:11,130 --> 00:50:20,030
many many ways how you can execute code

809
00:50:15,780 --> 00:50:24,240
which is similar to evil or

810
00:50:20,030 --> 00:50:28,260
document.write on this slide you can see

811
00:50:24,240 --> 00:50:32,520
I don't know like 40 different ways how

812
00:50:28,260 --> 00:50:35,550
you can run code in JavaScript and from

813
00:50:32,520 --> 00:50:38,730
a defensive point of view that's bad

814
00:50:35,550 --> 00:50:43,020
because the tool the evil Iser tool I

815
00:50:38,730 --> 00:50:46,860
showed you it can only use fixed

816
00:50:43,020 --> 00:50:50,700
functions like I know that the attacker

817
00:50:46,860 --> 00:50:55,350
will use evil so I hook on evil and then

818
00:50:50,700 --> 00:50:57,629
I can log the cause of evil but if the

819
00:50:55,350 --> 00:51:00,029
attacker uses any other

820
00:50:57,630 --> 00:51:06,720
with function call then they will just

821
00:51:00,029 --> 00:51:11,099
miss the exploit code so I'm not stating

822
00:51:06,720 --> 00:51:15,230
that it is impossible for a determined

823
00:51:11,099 --> 00:51:21,059
reverse engineer to you reverse engineer

824
00:51:15,230 --> 00:51:24,559
encrypted exploit delivery but I'm

825
00:51:21,059 --> 00:51:30,660
fairly sure that at the end of the day

826
00:51:24,559 --> 00:51:34,319
it can increase the time since someone

827
00:51:30,660 --> 00:51:38,098
first uses the browser zero day until it

828
00:51:34,319 --> 00:51:41,308
is patched it can delay that time with

829
00:51:38,099 --> 00:51:44,700
weeks or even months a reverse engineer

830
00:51:41,309 --> 00:51:47,099
can surely restore the exploit code from

831
00:51:44,700 --> 00:51:52,019
a memory dump but that can take a lot of

832
00:51:47,099 --> 00:51:57,660
time on Windows you can put breakpoints

833
00:51:52,019 --> 00:52:00,959
on typical exploit functions like

834
00:51:57,660 --> 00:52:02,848
whenever someone tries to bypass depth

835
00:52:00,960 --> 00:52:06,839
than they might use for example virtual

836
00:52:02,849 --> 00:52:09,569
Protex so you might try to put a

837
00:52:06,839 --> 00:52:14,430
breakpoint there or use some guard pages

838
00:52:09,569 --> 00:52:16,460
but again this is getting harder and

839
00:52:14,430 --> 00:52:20,970
harder

840
00:52:16,460 --> 00:52:25,130
all right at the beginning of my talk I

841
00:52:20,970 --> 00:52:29,279
mentioned that it is possible to deliver

842
00:52:25,130 --> 00:52:33,029
the mother in an encrypted way now that

843
00:52:29,279 --> 00:52:36,420
the client browser and the server share

844
00:52:33,029 --> 00:52:41,119
the same secret and in my proof of

845
00:52:36,420 --> 00:52:45,569
concept code I implemented the same so

846
00:52:41,119 --> 00:52:48,029
and it's not just that the mother cannot

847
00:52:45,569 --> 00:52:51,660
be seen on the wire because it is

848
00:52:48,029 --> 00:52:55,349
encrypted but this mother itself I'm

849
00:52:51,660 --> 00:53:00,118
using is a so-called target ever mother

850
00:52:55,349 --> 00:53:05,609
which means that it has some parameters

851
00:53:00,119 --> 00:53:08,220
built in inside and the whole mother is

852
00:53:05,609 --> 00:53:10,960
encrypted basically with this parameter

853
00:53:08,220 --> 00:53:14,288
and if it cannot found

854
00:53:10,960 --> 00:53:17,230
this parameter on the machine it is

855
00:53:14,289 --> 00:53:22,599
running on it wants able to decrypt

856
00:53:17,230 --> 00:53:27,789
itself and there was a very great mother

857
00:53:22,599 --> 00:53:31,420
written by some unknown guys cold goes

858
00:53:27,789 --> 00:53:37,960
and goes was using the same method

859
00:53:31,420 --> 00:53:42,940
it used the path variable in Windows to

860
00:53:37,960 --> 00:53:45,849
encrypt its mother and as far as I know

861
00:53:42,940 --> 00:53:49,029
still no one was able to decrypt the

862
00:53:45,849 --> 00:53:51,819
mother payload itself because no one

863
00:53:49,029 --> 00:53:57,160
knows what is the correct path parameter

864
00:53:51,819 --> 00:54:00,308
where it will be able to run but there

865
00:53:57,160 --> 00:54:01,270
is a very nice open source project

866
00:54:00,309 --> 00:54:05,710
called

867
00:54:01,270 --> 00:54:11,200
Ebola and they are also using this

868
00:54:05,710 --> 00:54:14,650
target of ever more payload and I just

869
00:54:11,200 --> 00:54:19,439
integrated the encrypted exploit

870
00:54:14,650 --> 00:54:23,410
delivery with this mother so now it's

871
00:54:19,440 --> 00:54:29,529
more safe basically for attackers to

872
00:54:23,410 --> 00:54:31,629
deliver their mother as I mentioned in

873
00:54:29,529 --> 00:54:34,000
the very beginning I implemented my code

874
00:54:31,630 --> 00:54:38,349
in node.js then I ported it to rabbit

875
00:54:34,000 --> 00:54:40,690
and the main idea was that after it's

876
00:54:38,349 --> 00:54:44,319
written in Ruby I can integrate into

877
00:54:40,690 --> 00:54:47,500
math exploit unfortunately it turned out

878
00:54:44,319 --> 00:54:51,460
it's a lot harder than I thought I

879
00:54:47,500 --> 00:54:54,039
really tried to do that and failed issue

880
00:54:51,460 --> 00:54:56,109
is that if you are trying to write a new

881
00:54:54,039 --> 00:55:01,089
module for Metasploit it is pretty easy

882
00:54:56,109 --> 00:55:03,759
but this is really messing with the core

883
00:55:01,089 --> 00:55:07,058
of Metasploit height work so it's a lot

884
00:55:03,760 --> 00:55:10,150
more complex task to you implement it so

885
00:55:07,059 --> 00:55:12,339
now what you can do is that if you have

886
00:55:10,150 --> 00:55:16,450
an exploit in Metasploit

887
00:55:12,339 --> 00:55:20,500
you just run it against the target you

888
00:55:16,450 --> 00:55:23,500
extract the static HTML file from the

889
00:55:20,500 --> 00:55:24,670
exploit you put this file into the

890
00:55:23,500 --> 00:55:27,430
exploit further or

891
00:55:24,670 --> 00:55:33,190
Aaron school and he ran errands go visit

892
00:55:27,430 --> 00:55:37,180
HTML file I think one important message

893
00:55:33,190 --> 00:55:41,890
of my talk is that perimeter security is

894
00:55:37,180 --> 00:55:46,058
dying and more and more stuff gets

895
00:55:41,890 --> 00:55:49,660
encrypted and more and more mobile

896
00:55:46,059 --> 00:55:52,540
devices are used everywhere so you

897
00:55:49,660 --> 00:55:56,649
should not depend on perimeter security

898
00:55:52,540 --> 00:56:00,730
as much you depended on it like 10 or 20

899
00:55:56,650 --> 00:56:04,930
years ago since the initial publication

900
00:56:00,730 --> 00:56:08,950
of my proof of concept code as I already

901
00:56:04,930 --> 00:56:11,710
mentioned it was implemented by some bad

902
00:56:08,950 --> 00:56:16,960
guys like the angular instrument nuclear

903
00:56:11,710 --> 00:56:21,010
exploit key developers just last week I

904
00:56:16,960 --> 00:56:23,650
saw that white hat guys also started to

905
00:56:21,010 --> 00:56:28,290
use encrypted exploit delivery in proof

906
00:56:23,650 --> 00:56:31,720
of concept codes and if you check this

907
00:56:28,290 --> 00:56:34,299
chrome zero-day bug you can see that the

908
00:56:31,720 --> 00:56:37,000
guys were using diffie-hellman

909
00:56:34,299 --> 00:56:39,849
encryption in that as well

910
00:56:37,000 --> 00:56:43,119
I still don't know what was the main

911
00:56:39,849 --> 00:56:48,960
reason they were using it hopefully they

912
00:56:43,119 --> 00:56:54,220
will answer me soon and turns out that

913
00:56:48,960 --> 00:56:58,240
some exploit brokers also so my research

914
00:56:54,220 --> 00:57:00,118
and they liked the idea that they can

915
00:56:58,240 --> 00:57:06,490
protect the precious

916
00:57:00,119 --> 00:57:10,510
zero-days for a longer time as you might

917
00:57:06,490 --> 00:57:14,680
imagine I did have some ethical dilemmas

918
00:57:10,510 --> 00:57:19,030
with this research like why am i helping

919
00:57:14,680 --> 00:57:19,480
the bad guys but actually it's not that

920
00:57:19,030 --> 00:57:22,390
easy

921
00:57:19,480 --> 00:57:26,079
and we should really ask who are the bad

922
00:57:22,390 --> 00:57:31,000
guys like neither orphans nor defense

923
00:57:26,079 --> 00:57:35,049
can is bad by itself like whenever the

924
00:57:31,000 --> 00:57:37,420
FBI is using zero days to catch

925
00:57:35,049 --> 00:57:38,410
pedophiles on the internet and the only

926
00:57:37,420 --> 00:57:41,369
way they can do

927
00:57:38,410 --> 00:57:44,558
that is through tor browser zero days

928
00:57:41,369 --> 00:57:48,700
then I'm fine with it that I'm helping

929
00:57:44,559 --> 00:57:52,119
them right and I also do believe in

930
00:57:48,700 --> 00:57:55,629
evolution so if you have better defense

931
00:57:52,119 --> 00:58:00,539
or offense than the others then you are

932
00:57:55,630 --> 00:58:03,670
the one who will survive right and I

933
00:58:00,539 --> 00:58:07,390
really really agree that the current

934
00:58:03,670 --> 00:58:10,299
laws are not really prepared for law

935
00:58:07,390 --> 00:58:14,920
enforcement hacking of tor users that's

936
00:58:10,299 --> 00:58:17,288
a totally different topic and you should

937
00:58:14,920 --> 00:58:19,990
really ask what happens if you don't

938
00:58:17,289 --> 00:58:24,150
prepare your defenses against this kind

939
00:58:19,990 --> 00:58:27,220
of attacks so as a conclusion

940
00:58:24,150 --> 00:58:31,900
Ana's group could have prevented the

941
00:58:27,220 --> 00:58:37,390
League of the iOS Safari zero day which

942
00:58:31,900 --> 00:58:40,960
was a lot of money lost for the guys who

943
00:58:37,390 --> 00:58:42,879
owned these zero day exploit it could

944
00:58:40,960 --> 00:58:47,049
have prevented the League of the tor

945
00:58:42,880 --> 00:58:49,150
browser zero day if someone is using

946
00:58:47,049 --> 00:58:53,319
one-time exploits it can make reverse

947
00:58:49,150 --> 00:58:56,349
engineering a nightmare but as you might

948
00:58:53,319 --> 00:58:58,240
imagine this whole encrypted exploit

949
00:58:56,349 --> 00:59:02,079
that were it doesn't really deal with

950
00:58:58,240 --> 00:59:04,390
any end point exploit protections that's

951
00:59:02,079 --> 00:59:06,339
a totally totally different topic so you

952
00:59:04,390 --> 00:59:08,308
shouldn't expect anything from that and

953
00:59:06,339 --> 00:59:11,740
as always

954
00:59:08,309 --> 00:59:13,930
OPSEC is very important either or you

955
00:59:11,740 --> 00:59:16,558
are on a defensive side or an offensive

956
00:59:13,930 --> 00:59:20,348
side you should always think about that

957
00:59:16,559 --> 00:59:24,849
so that's all folks you can download my

958
00:59:20,349 --> 00:59:26,109
code from github that's all I wanted to

959
00:59:24,849 --> 00:59:28,380
share with you thank you for your

960
00:59:26,109 --> 00:59:28,380
attention

961
00:59:34,619 --> 00:59:37,619
questions

962
00:59:46,339 --> 00:59:54,859
all right I guess there are no questions

963
00:59:48,439 --> 00:59:57,199
if you do have just find me I will be

964
00:59:54,859 --> 01:00:00,430
here and I'm happy to answer your

965
00:59:57,199 --> 01:00:00,430
questions thank you

