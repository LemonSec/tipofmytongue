1
00:00:08,270 --> 00:00:23,660
[Music]

2
00:00:25,680 --> 00:00:29,939
[Music]

3
00:00:27,529 --> 00:00:33,870
good afternoon everybody

4
00:00:29,939 --> 00:00:37,140
I let's see what we can take this how to

5
00:00:33,870 --> 00:00:40,919
scale your auditing events so oftentimes

6
00:00:37,140 --> 00:00:43,440
this is us and well everything is fine

7
00:00:40,920 --> 00:00:45,660
right until not everything is fine

8
00:00:43,440 --> 00:00:47,760
anymore kind of the worst case scenario

9
00:00:45,660 --> 00:00:49,890
probably you might run into is if you

10
00:00:47,760 --> 00:00:51,239
learn about the breach from the press or

11
00:00:49,890 --> 00:00:53,670
from your users and they complain

12
00:00:51,239 --> 00:00:57,288
mightily if you're a bit more lucky

13
00:00:53,670 --> 00:00:59,520
maybe somebody's just asking for ransom

14
00:00:57,289 --> 00:01:01,289
especially for your data stores this has

15
00:00:59,520 --> 00:01:03,629
been more or less common that people

16
00:01:01,289 --> 00:01:05,430
take your data ransom and maybe they

17
00:01:03,629 --> 00:01:06,990
have a backup and you can buy that back

18
00:01:05,430 --> 00:01:10,530
or maybe they have just lead you data

19
00:01:06,990 --> 00:01:12,300
nobody knows sometimes you just see it

20
00:01:10,530 --> 00:01:14,369
on your cloud providers bill when

21
00:01:12,300 --> 00:01:16,910
somebody got your ex's credentials and

22
00:01:14,369 --> 00:01:19,740
started mining some cryptocurrency and

23
00:01:16,910 --> 00:01:21,360
well it's not very efficient but as long

24
00:01:19,740 --> 00:01:24,360
as it's not your own bill you can just

25
00:01:21,360 --> 00:01:27,179
do that sometimes you just learn about

26
00:01:24,360 --> 00:01:29,340
the breach after the fact and well not

27
00:01:27,179 --> 00:01:31,920
nice but still better than most of the

28
00:01:29,340 --> 00:01:34,560
other cases or ideally you can prove

29
00:01:31,920 --> 00:01:36,270
that there was no harm done like there

30
00:01:34,560 --> 00:01:38,189
was a breach but nothing actually

31
00:01:36,270 --> 00:01:40,320
happened that would be the ideal case

32
00:01:38,189 --> 00:01:42,899
and we want to figure out how can we

33
00:01:40,320 --> 00:01:45,570
prove what has happened to our system or

34
00:01:42,900 --> 00:01:48,240
what hasn't happened to our system and

35
00:01:45,570 --> 00:01:50,939
yeah basically what we want to avoid is

36
00:01:48,240 --> 00:01:52,649
the bottom half here where everything is

37
00:01:50,939 --> 00:01:54,839
on fire and you just scream what is my

38
00:01:52,650 --> 00:01:59,040
problem that is the part we don't want

39
00:01:54,840 --> 00:02:02,460
to get into so unfortunately there are

40
00:01:59,040 --> 00:02:04,530
no silver bullets or luckily there are

41
00:02:02,460 --> 00:02:06,658
no silver bullets otherwise we wouldn't

42
00:02:04,530 --> 00:02:10,739
need to be here or we wouldn't have a

43
00:02:06,659 --> 00:02:13,230
good or a well-paying job so no silver

44
00:02:10,739 --> 00:02:14,489
bullets but that's not the end of the

45
00:02:13,230 --> 00:02:18,090
world that's actually more or less a

46
00:02:14,489 --> 00:02:20,610
feature so for the rest of the talk if

47
00:02:18,090 --> 00:02:22,530
you have any questions just ask them

48
00:02:20,610 --> 00:02:23,880
either online or at the end we'll

49
00:02:22,530 --> 00:02:26,280
probably have enough time at the end for

50
00:02:23,880 --> 00:02:27,750
questions if I run out of time or if

51
00:02:26,280 --> 00:02:30,060
there are too many questions I will just

52
00:02:27,750 --> 00:02:32,040
tweet out the answers as well so if you

53
00:02:30,060 --> 00:02:32,790
had to slider you can just ask your

54
00:02:32,040 --> 00:02:34,500
questions there

55
00:02:32,790 --> 00:02:36,448
if you forget them or if you're too shy

56
00:02:34,500 --> 00:02:38,560
to ask in person just post your

57
00:02:36,449 --> 00:02:41,050
questions and we'll get to them at the

58
00:02:38,560 --> 00:02:43,209
and by the way does anybody her has

59
00:02:41,050 --> 00:02:45,099
anybody figured out why I'm using that

60
00:02:43,209 --> 00:02:49,239
handle for Twitter and slider and

61
00:02:45,099 --> 00:02:53,560
everything it has something to do you

62
00:02:49,239 --> 00:02:55,150
have it on the first slide as well it

63
00:02:53,560 --> 00:03:02,590
has something to do with my name any

64
00:02:55,150 --> 00:03:07,019
guesses any guesses something with my

65
00:03:02,590 --> 00:03:09,420
last name who is old enough to remember

66
00:03:07,019 --> 00:03:12,670
anybody remembers rot13

67
00:03:09,420 --> 00:03:16,390
where you rotate the letters by 13 and

68
00:03:12,670 --> 00:03:18,609
so if you take my last name which in

69
00:03:16,390 --> 00:03:20,230
German basically or in Austrian German

70
00:03:18,610 --> 00:03:23,380
where I'm from basically means

71
00:03:20,230 --> 00:03:25,090
horseradish but with one n then this is

72
00:03:23,380 --> 00:03:28,359
what you get and the nice thing about

73
00:03:25,090 --> 00:03:30,400
rot13 is if you encrypt something again

74
00:03:28,360 --> 00:03:33,610
then you're back at the original because

75
00:03:30,400 --> 00:03:36,580
well 26 letters in the alphabet 13 times

76
00:03:33,610 --> 00:03:42,900
2 you get back to the original so that's

77
00:03:36,580 --> 00:03:42,900
why I'm using that for any questions so

78
00:03:42,959 --> 00:03:48,790
how can we actually figure out what is

79
00:03:46,299 --> 00:03:52,180
happening in our system one very nice

80
00:03:48,790 --> 00:03:54,489
way to do that is audit D and who is

81
00:03:52,180 --> 00:03:57,130
actually using already actively and I

82
00:03:54,489 --> 00:03:58,660
not sure I can see anybody okay I think

83
00:03:57,130 --> 00:04:01,299
you can see a couple of hands but not

84
00:03:58,660 --> 00:04:04,480
very many so oddity is the Linux

85
00:04:01,299 --> 00:04:07,660
auditing daemon this is the description

86
00:04:04,480 --> 00:04:10,000
from the main page generally you have a

87
00:04:07,660 --> 00:04:12,970
user space component to the auditing

88
00:04:10,000 --> 00:04:15,730
subsystem to actually report or show you

89
00:04:12,970 --> 00:04:18,880
what has been happening and you can

90
00:04:15,730 --> 00:04:22,360
check that out with either or report to

91
00:04:18,880 --> 00:04:24,900
get a report or or search to see all the

92
00:04:22,360 --> 00:04:27,580
raw logs or you can filter them down

93
00:04:24,900 --> 00:04:30,070
what you can do is you can generally see

94
00:04:27,580 --> 00:04:32,289
what files have been accessed what

95
00:04:30,070 --> 00:04:34,389
network connections have been made have

96
00:04:32,289 --> 00:04:36,550
to answer been any system calls which

97
00:04:34,389 --> 00:04:38,500
commands were ran by which users or

98
00:04:36,550 --> 00:04:40,660
which security events have been

99
00:04:38,500 --> 00:04:45,039
triggered stuff like that can all be

100
00:04:40,660 --> 00:04:47,140
collected by Oddity and the general idea

101
00:04:45,039 --> 00:04:50,500
is you have you use a space program and

102
00:04:47,140 --> 00:04:52,510
the user space program is running some

103
00:04:50,500 --> 00:04:55,210
action like op

104
00:04:52,510 --> 00:04:57,430
a file or running a program and then you

105
00:04:55,210 --> 00:05:02,020
have the system called processes for

106
00:04:57,430 --> 00:05:05,050
user task and exit and at any one of

107
00:05:02,020 --> 00:05:07,570
these when you run them there can be an

108
00:05:05,050 --> 00:05:10,810
exclude rule and once you pass through

109
00:05:07,570 --> 00:05:13,750
that exclude rule then that action will

110
00:05:10,810 --> 00:05:15,430
be collected by the audit daemon so

111
00:05:13,750 --> 00:05:18,040
basically you have some rules and

112
00:05:15,430 --> 00:05:20,500
whatever passes through those rules will

113
00:05:18,040 --> 00:05:24,100
then be collected and you can later on

114
00:05:20,500 --> 00:05:26,920
checkout these security events what this

115
00:05:24,100 --> 00:05:32,980
actually looks like is let's assume

116
00:05:26,920 --> 00:05:36,210
we're locked in here let's say know that

117
00:05:32,980 --> 00:05:36,210
my session just died okay

118
00:05:36,840 --> 00:05:40,650
let's start fresh

119
00:05:48,999 --> 00:05:54,549
so let's say we want to run the the the

120
00:05:52,569 --> 00:05:58,149
report here and for example here you can

121
00:05:54,549 --> 00:06:00,638
see we have collected in some timeframe

122
00:05:58,149 --> 00:06:03,399
here we have collected a bunch of things

123
00:06:00,639 --> 00:06:05,949
on our system for example we had 76

124
00:06:03,399 --> 00:06:07,839
logins into our system we have lots of

125
00:06:05,949 --> 00:06:09,879
failed login attempts

126
00:06:07,839 --> 00:06:13,209
we'll see what has been happening there

127
00:06:09,879 --> 00:06:14,259
a bit later on you can see which or how

128
00:06:13,209 --> 00:06:16,839
many users have been able to

129
00:06:14,259 --> 00:06:18,969
authenticate how many uses we have in

130
00:06:16,839 --> 00:06:21,189
our system so this is just the general

131
00:06:18,969 --> 00:06:23,799
overview of all the security related

132
00:06:21,189 --> 00:06:27,579
events that we have in our system where

133
00:06:23,799 --> 00:06:32,229
are those coming from so as we already

134
00:06:27,579 --> 00:06:34,149
mentioned our search and let's start

135
00:06:32,229 --> 00:06:36,308
with rod these are just the raw events

136
00:06:34,149 --> 00:06:38,019
um this will keep scrolling for a while

137
00:06:36,309 --> 00:06:39,849
and you can see these are all the

138
00:06:38,019 --> 00:06:44,709
relevant events that we have been

139
00:06:39,849 --> 00:06:46,839
collecting over time and how they are

140
00:06:44,709 --> 00:06:50,429
structured once we're done scrolling

141
00:06:46,839 --> 00:06:50,429
through them because there's so many

142
00:06:51,059 --> 00:06:55,629
after some time we'll be done you can

143
00:06:53,439 --> 00:06:58,719
use all search of course to filter down

144
00:06:55,629 --> 00:07:00,669
or search what you're seeing there

145
00:06:58,719 --> 00:07:03,459
once you're done here you can for

146
00:07:00,669 --> 00:07:05,529
example see here this would be one entry

147
00:07:03,459 --> 00:07:07,179
and you always have a type the type is

148
00:07:05,529 --> 00:07:09,489
basically telling you what kind of event

149
00:07:07,179 --> 00:07:11,679
do you have it could be you change

150
00:07:09,489 --> 00:07:13,688
directory or you open the file or you

151
00:07:11,679 --> 00:07:16,239
run a process or here we are aborting a

152
00:07:13,689 --> 00:07:19,119
daemon and then you have the message the

153
00:07:16,239 --> 00:07:21,039
message consists of two parts here you

154
00:07:19,119 --> 00:07:24,819
can see this is a UNIX timestamp and

155
00:07:21,039 --> 00:07:27,399
this is a unique ID sometimes you have

156
00:07:24,819 --> 00:07:29,949
unique timestamps or you have IDs and

157
00:07:27,399 --> 00:07:32,889
timestamps and they are duplicated this

158
00:07:29,949 --> 00:07:35,199
is then normally when you have one call

159
00:07:32,889 --> 00:07:37,599
that is logging multiple actions for

160
00:07:35,199 --> 00:07:40,029
example if you open a program and it

161
00:07:37,599 --> 00:07:42,009
also takes some other actions or open

162
00:07:40,029 --> 00:07:43,808
support you might have multiple actions

163
00:07:42,009 --> 00:07:45,999
that you're logging and they have done

164
00:07:43,809 --> 00:07:48,159
the same timestamp and then same ID and

165
00:07:45,999 --> 00:07:50,110
then depending on whatever action you

166
00:07:48,159 --> 00:07:53,169
have here you might have different

167
00:07:50,110 --> 00:07:55,899
things that are being collected so for

168
00:07:53,169 --> 00:07:57,789
example you see that here this thing

169
00:07:55,899 --> 00:08:00,039
failed and you have a process city and a

170
00:07:57,789 --> 00:08:01,839
user ID but not everything has a process

171
00:08:00,039 --> 00:08:03,240
or user ID depends a bit on what call

172
00:08:01,839 --> 00:08:07,300
you're running

173
00:08:03,240 --> 00:08:10,210
you could for example also say we are

174
00:08:07,300 --> 00:08:21,639
running an or search and we run this

175
00:08:10,210 --> 00:08:26,948
against success No so only our search

176
00:08:21,639 --> 00:08:28,720
six if you can type English correctly

177
00:08:26,949 --> 00:08:30,970
then it will even show you what it's

178
00:08:28,720 --> 00:08:35,080
doing so these are all the things that

179
00:08:30,970 --> 00:08:37,479
failed in our audit D logs this is still

180
00:08:35,080 --> 00:08:39,580
a lot of events and also oftentimes you

181
00:08:37,479 --> 00:08:42,969
don't have just a single system that you

182
00:08:39,580 --> 00:08:45,190
want to monitor and generally whatever

183
00:08:42,969 --> 00:08:46,630
you have here it's kind of very hard to

184
00:08:45,190 --> 00:08:49,180
read and figure out what is really going

185
00:08:46,630 --> 00:08:51,820
on with my system so this is where the

186
00:08:49,180 --> 00:08:53,650
scaling parts comes into play so oddity

187
00:08:51,820 --> 00:08:56,470
is a great tool to collect a lot of low

188
00:08:53,650 --> 00:08:59,199
level system events but what do you make

189
00:08:56,470 --> 00:09:01,870
out of that mess of all the events that

190
00:08:59,200 --> 00:09:05,080
you have collected here so let's see

191
00:09:01,870 --> 00:09:07,839
what we have here so before we go any

192
00:09:05,080 --> 00:09:09,580
further one thing in case you're kind of

193
00:09:07,839 --> 00:09:11,770
confused what do I even have in all my

194
00:09:09,580 --> 00:09:13,990
logs here for example the rented

195
00:09:11,770 --> 00:09:16,709
documentation on those is pretty good if

196
00:09:13,990 --> 00:09:19,570
you had over to the Red Hat Enterprise

197
00:09:16,709 --> 00:09:21,579
documentation it will explain to you for

198
00:09:19,570 --> 00:09:23,290
example it has full examples of these

199
00:09:21,580 --> 00:09:24,940
are some example calls they have and

200
00:09:23,290 --> 00:09:26,980
they were just describing what all the

201
00:09:24,940 --> 00:09:29,260
different pieces and parts in there are

202
00:09:26,980 --> 00:09:31,120
but we don't want to dive too much into

203
00:09:29,260 --> 00:09:33,370
the low-level details let's just say

204
00:09:31,120 --> 00:09:34,930
like it's collecting a lot of stuff but

205
00:09:33,370 --> 00:09:37,209
it's kind of hard to read and it's a bit

206
00:09:34,930 --> 00:09:39,189
complicated and it's very hard to parse

207
00:09:37,209 --> 00:09:40,750
as well and often times you want to

208
00:09:39,190 --> 00:09:42,370
centralize the information especially if

209
00:09:40,750 --> 00:09:43,839
you have lots of systems you don't just

210
00:09:42,370 --> 00:09:45,339
want to have that sitting around on one

211
00:09:43,839 --> 00:09:47,800
disc you want to kind of centralize and

212
00:09:45,339 --> 00:09:53,529
figure out what overall is going on in

213
00:09:47,800 --> 00:09:55,660
my system and if you want to look at

214
00:09:53,529 --> 00:09:58,180
more rules because you want to fine tune

215
00:09:55,660 --> 00:10:00,730
your system a bit more in the github

216
00:09:58,180 --> 00:10:02,620
repository of Oddity you have actually a

217
00:10:00,730 --> 00:10:04,350
lot of rules that you can look at for

218
00:10:02,620 --> 00:10:07,570
example here you have the base

219
00:10:04,350 --> 00:10:10,690
configured by default normally is you

220
00:10:07,570 --> 00:10:13,390
don't have any rules you set some

221
00:10:10,690 --> 00:10:15,260
buffers and then you set some failure

222
00:10:13,390 --> 00:10:17,330
modes to collect stuff

223
00:10:15,260 --> 00:10:19,700
but you have lots of other rules here

224
00:10:17,330 --> 00:10:21,950
for example to say like oh I want to see

225
00:10:19,700 --> 00:10:25,280
what is happening on the network here in

226
00:10:21,950 --> 00:10:27,130
case it is readable you can see this is

227
00:10:25,280 --> 00:10:30,709
what the configuration would look like

228
00:10:27,130 --> 00:10:35,960
to collect anything that is happening on

229
00:10:30,710 --> 00:10:39,320
the network so always on exit run on a

230
00:10:35,960 --> 00:10:41,930
64-bit architecture when you have accept

231
00:10:39,320 --> 00:10:44,630
or connect one of these two actions and

232
00:10:41,930 --> 00:10:46,880
lock that thing under a key that we call

233
00:10:44,630 --> 00:10:49,040
external access and afterwards you could

234
00:10:46,880 --> 00:10:50,840
search for everything under external

235
00:10:49,040 --> 00:10:53,750
access because that has passed through

236
00:10:50,840 --> 00:10:55,310
that rule there are lots of examples in

237
00:10:53,750 --> 00:10:57,200
that repository where you can see

238
00:10:55,310 --> 00:10:59,449
different things that you might want to

239
00:10:57,200 --> 00:11:01,280
collect for example power abuse when

240
00:10:59,450 --> 00:11:03,380
somebody abuses their sudo privileges

241
00:11:01,280 --> 00:11:05,780
we'll get back to that example a little

242
00:11:03,380 --> 00:11:07,580
later on if you have any container

243
00:11:05,780 --> 00:11:10,760
actions like somebody starts a container

244
00:11:07,580 --> 00:11:12,710
and lots of other things here are the

245
00:11:10,760 --> 00:11:17,810
examples this is what you can try out

246
00:11:12,710 --> 00:11:19,610
and run then okay so speaking of

247
00:11:17,810 --> 00:11:21,500
namespaces by the way those are still a

248
00:11:19,610 --> 00:11:24,740
bit work in progress this has been split

249
00:11:21,500 --> 00:11:26,960
up into multiple subtasks figuring out

250
00:11:24,740 --> 00:11:29,090
which user has been doing what in what

251
00:11:26,960 --> 00:11:31,550
container is still a bit tricky but

252
00:11:29,090 --> 00:11:34,490
oddities in the process of adding all

253
00:11:31,550 --> 00:11:36,319
the enrichment and figuring out which

254
00:11:34,490 --> 00:11:38,780
container or namespace has been doing

255
00:11:36,320 --> 00:11:41,510
what but that's still a bit of a work in

256
00:11:38,780 --> 00:11:44,000
progress okay so we want to collect all

257
00:11:41,510 --> 00:11:46,670
the things basically and ideally we also

258
00:11:44,000 --> 00:11:51,440
want to centralize them no how do we do

259
00:11:46,670 --> 00:11:53,180
that yeah how do I collect that well we

260
00:11:51,440 --> 00:11:54,710
could just take the files and collect

261
00:11:53,180 --> 00:11:58,449
all the files and then try to parse the

262
00:11:54,710 --> 00:12:00,770
files but that still sometimes painful

263
00:11:58,450 --> 00:12:02,720
by the way why am I talking about that

264
00:12:00,770 --> 00:12:04,689
so I work for elastic the company behind

265
00:12:02,720 --> 00:12:07,550
the elastic search lock search Cubana

266
00:12:04,690 --> 00:12:09,470
some of you might use us for various use

267
00:12:07,550 --> 00:12:12,290
cases either logs or also security

268
00:12:09,470 --> 00:12:14,410
related events and I generally just talk

269
00:12:12,290 --> 00:12:17,990
about the stuff that we do in that area

270
00:12:14,410 --> 00:12:21,199
so this is highly monitored like hello

271
00:12:17,990 --> 00:12:23,300
world application of oddity that we want

272
00:12:21,200 --> 00:12:26,710
to walk through to see how that is all

273
00:12:23,300 --> 00:12:28,569
fitting together so

274
00:12:26,710 --> 00:12:31,230
lots of you are probably familiar with

275
00:12:28,570 --> 00:12:33,520
that one called elk or elastic stack

276
00:12:31,230 --> 00:12:34,960
nowadays we try to call it the elastic

277
00:12:33,520 --> 00:12:36,730
stack because well we have added a bit

278
00:12:34,960 --> 00:12:38,950
more because we have elastic search to

279
00:12:36,730 --> 00:12:41,800
store everything log stitch to get and

280
00:12:38,950 --> 00:12:45,850
parse the data and enrich it by the way

281
00:12:41,800 --> 00:12:47,589
any idea what enrichment could be like

282
00:12:45,850 --> 00:12:49,270
for example you have an IP address and

283
00:12:47,589 --> 00:12:51,279
you want to get a geolocation of an IP

284
00:12:49,270 --> 00:12:53,709
address that could be enrichment that

285
00:12:51,279 --> 00:12:55,600
normally we do that that ingestion time

286
00:12:53,709 --> 00:12:57,489
when we store something so the queries

287
00:12:55,600 --> 00:12:59,320
will be faster afterwards and then we

288
00:12:57,490 --> 00:13:01,209
have for example Cabana to visualize

289
00:12:59,320 --> 00:13:04,480
what is going on or what we have

290
00:13:01,209 --> 00:13:07,239
collected here the only thing is log

291
00:13:04,480 --> 00:13:09,010
stash is sometimes a bit heavy because

292
00:13:07,240 --> 00:13:11,980
well it started off as Ruby and is now

293
00:13:09,010 --> 00:13:13,930
JRuby and I know just to collect events

294
00:13:11,980 --> 00:13:16,120
normally people don't like the JVM to

295
00:13:13,930 --> 00:13:18,219
collect their events so we figured that

296
00:13:16,120 --> 00:13:19,149
out and at some point we added another

297
00:13:18,220 --> 00:13:22,060
components called

298
00:13:19,149 --> 00:13:24,850
beads and well then we tried to come up

299
00:13:22,060 --> 00:13:27,489
with this new acronym called ELQ B or

300
00:13:24,850 --> 00:13:30,550
Belk which could have looked something

301
00:13:27,490 --> 00:13:31,839
like this but we didn't really stick

302
00:13:30,550 --> 00:13:33,310
with that because we're always about

303
00:13:31,839 --> 00:13:35,380
scaling and this is not very scalable

304
00:13:33,310 --> 00:13:37,479
because what happens if we add another

305
00:13:35,380 --> 00:13:39,160
open-source component to it then we'll

306
00:13:37,480 --> 00:13:40,959
get another letter and it will get very

307
00:13:39,160 --> 00:13:42,640
hard to make up another animal whatever

308
00:13:40,959 --> 00:13:44,439
the next letter will be it will be very

309
00:13:42,640 --> 00:13:47,260
hard to figure out some other animal

310
00:13:44,440 --> 00:13:50,200
even though the LP that the B with the

311
00:13:47,260 --> 00:13:53,500
elk owns is kind of cute we got rid of

312
00:13:50,200 --> 00:13:55,270
that and now we just call it elastic

313
00:13:53,500 --> 00:13:57,430
stack because that's scalable whatever

314
00:13:55,270 --> 00:13:59,410
you have just stick it in there whatever

315
00:13:57,430 --> 00:14:00,910
new products we add and this is the

316
00:13:59,410 --> 00:14:03,100
general architecture that you can use

317
00:14:00,910 --> 00:14:04,990
there however we only need three

318
00:14:03,100 --> 00:14:06,490
components for today we'll use the beats

319
00:14:04,990 --> 00:14:08,500
which is like a lightweight H in the

320
00:14:06,490 --> 00:14:10,540
shipper written in goes you use so you

321
00:14:08,500 --> 00:14:12,670
have native binaries so you can forward

322
00:14:10,540 --> 00:14:14,740
your data then we put it into elastic

323
00:14:12,670 --> 00:14:16,689
search to centralize it and then we have

324
00:14:14,740 --> 00:14:19,360
Kabbalah to do some visualizations on

325
00:14:16,690 --> 00:14:21,279
top of that and all the stuff that I'm

326
00:14:19,360 --> 00:14:23,589
showing you now is open source and

327
00:14:21,279 --> 00:14:26,079
Apache 2 license so you can just take it

328
00:14:23,589 --> 00:14:29,620
and do whatever you want with that so

329
00:14:26,079 --> 00:14:31,989
the first thing that we tried and I

330
00:14:29,620 --> 00:14:33,820
wouldn't say we failed but it has severe

331
00:14:31,990 --> 00:14:35,709
limitations as you'll see the first

332
00:14:33,820 --> 00:14:38,260
thing that we try this we try to build a

333
00:14:35,709 --> 00:14:39,939
so-called file bit module and the file

334
00:14:38,260 --> 00:14:40,480
bit module is basically taking whatever

335
00:14:39,940 --> 00:14:44,440
all the

336
00:14:40,480 --> 00:14:47,230
the the log file is creating so when you

337
00:14:44,440 --> 00:14:51,130
look at the raw log file those are also

338
00:14:47,230 --> 00:14:56,950
stored in the log and that's var log

339
00:14:51,130 --> 00:14:59,380
audit or audit or the log if I remember

340
00:14:56,950 --> 00:15:01,120
correctly so these are the raw events

341
00:14:59,380 --> 00:15:05,380
like it's the same thing as if you were

342
00:15:01,120 --> 00:15:08,290
doing all all search raw you have the

343
00:15:05,380 --> 00:15:11,050
same thing in a log file and we try to

344
00:15:08,290 --> 00:15:13,420
collect those and this is kind of kind

345
00:15:11,050 --> 00:15:16,300
of working but parsing this file is a

346
00:15:13,420 --> 00:15:18,550
pain in the ass because every line is

347
00:15:16,300 --> 00:15:20,380
looking different like depending on

348
00:15:18,550 --> 00:15:22,209
whatever type you have you need to make

349
00:15:20,380 --> 00:15:24,400
sure like how many attributes are coming

350
00:15:22,210 --> 00:15:26,830
afterwards and how to split those up you

351
00:15:24,400 --> 00:15:28,329
can do that and we have done that so I

352
00:15:26,830 --> 00:15:31,390
can quickly show you what this looks

353
00:15:28,330 --> 00:15:34,900
like if you've never seen Cubana this is

354
00:15:31,390 --> 00:15:38,710
Cubana I'll just stick to the pre-built

355
00:15:34,900 --> 00:15:41,829
dashboards I'm lazy I didn't build those

356
00:15:38,710 --> 00:15:45,700
myself you can be lazy too so what I'm

357
00:15:41,830 --> 00:15:48,070
interested in is file bit is basically

358
00:15:45,700 --> 00:15:50,020
file bit is the thing that tail is log

359
00:15:48,070 --> 00:15:52,840
files and it just collects log files and

360
00:15:50,020 --> 00:15:55,120
at some point we figured out maybe there

361
00:15:52,840 --> 00:15:56,680
should be modules to collect common

362
00:15:55,120 --> 00:15:58,960
things and we call those file bit

363
00:15:56,680 --> 00:16:02,020
modules and basically those are for

364
00:15:58,960 --> 00:16:03,760
nginx or Oddity or Apache or my sequel

365
00:16:02,020 --> 00:16:06,100
and lots of other formats we basically

366
00:16:03,760 --> 00:16:09,490
know no on this operating system which

367
00:16:06,100 --> 00:16:12,580
I'm using Ubuntu the log file for Oddity

368
00:16:09,490 --> 00:16:13,960
is in vogue order it oddity dot log and

369
00:16:12,580 --> 00:16:16,480
then we know approximately what the

370
00:16:13,960 --> 00:16:17,860
standard log format looks like if you

371
00:16:16,480 --> 00:16:21,010
change that log format you will

372
00:16:17,860 --> 00:16:23,650
obviously need to customize that but we

373
00:16:21,010 --> 00:16:25,689
try to figure out what you have

374
00:16:23,650 --> 00:16:30,189
basically you just say like I want the

375
00:16:25,690 --> 00:16:31,780
audit the events and then the beat will

376
00:16:30,190 --> 00:16:32,890
figure out okay this is where the file

377
00:16:31,780 --> 00:16:34,930
is this is what the file should look

378
00:16:32,890 --> 00:16:38,160
like I will try to take that parse it

379
00:16:34,930 --> 00:16:40,750
and just store and centralize it well

380
00:16:38,160 --> 00:16:44,620
the auditing events that we have parsed

381
00:16:40,750 --> 00:16:46,410
look something like this so we didn't I

382
00:16:44,620 --> 00:16:48,790
didn't collect any from the file

383
00:16:46,410 --> 00:16:52,780
recently but for example if I head over

384
00:16:48,790 --> 00:16:54,589
to the last 24 hours you can see these

385
00:16:52,780 --> 00:16:56,689
were all the event types

386
00:16:54,590 --> 00:16:58,970
you have seen some before for example

387
00:16:56,690 --> 00:17:01,280
we're changing a directory or we're

388
00:16:58,970 --> 00:17:03,590
running a system call or something is

389
00:17:01,280 --> 00:17:05,660
happening on a path so we have the event

390
00:17:03,590 --> 00:17:07,970
types we can see which users have been

391
00:17:05,660 --> 00:17:10,459
doing something and you can for example

392
00:17:07,970 --> 00:17:12,560
see okay this is how many events were

393
00:17:10,459 --> 00:17:13,820
successful or unsuccessful over time and

394
00:17:12,560 --> 00:17:17,270
you can also see where they have been

395
00:17:13,819 --> 00:17:20,240
coming from so surprisingly a lot of

396
00:17:17,270 --> 00:17:25,099
those are from China and it guesses what

397
00:17:20,240 --> 00:17:27,770
those events are yeah doesn't read to

398
00:17:25,099 --> 00:17:31,399
say so ssh authentication login attempts

399
00:17:27,770 --> 00:17:35,090
which failed so for example here if i

400
00:17:31,400 --> 00:17:36,950
look in that list of users i've never

401
00:17:35,090 --> 00:17:38,360
heard of that user and i would really be

402
00:17:36,950 --> 00:17:40,640
curious what somebody has been doing

403
00:17:38,360 --> 00:17:42,919
here so if i filter down on that one you

404
00:17:40,640 --> 00:17:45,890
can see okay it was just authentic ation

405
00:17:42,920 --> 00:17:48,560
tries that somebody tried and there was

406
00:17:45,890 --> 00:17:50,540
a pretty much spike here when somebody

407
00:17:48,560 --> 00:17:52,610
tried to use that user and you can see

408
00:17:50,540 --> 00:17:54,860
some from solvent somebody from china

409
00:17:52,610 --> 00:17:57,260
tried to login with that user six times

410
00:17:54,860 --> 00:18:02,629
in a specific timeframe and you can see

411
00:17:57,260 --> 00:18:04,940
here where and when so this is all kind

412
00:18:02,630 --> 00:18:07,520
of nice but it's also slightly limited

413
00:18:04,940 --> 00:18:11,710
by the way some other stuff that the

414
00:18:07,520 --> 00:18:13,780
file bit modules can collect for you is

415
00:18:11,710 --> 00:18:16,640
when did somebody run a sudo command

416
00:18:13,780 --> 00:18:19,250
that might also be interesting so in the

417
00:18:16,640 --> 00:18:22,010
last 24 hours you can see on which files

418
00:18:19,250 --> 00:18:24,710
did which user run sudo commands how

419
00:18:22,010 --> 00:18:27,950
many times and you could for example see

420
00:18:24,710 --> 00:18:29,780
over time which users we're running the

421
00:18:27,950 --> 00:18:32,090
pseudo commands and for example when a

422
00:18:29,780 --> 00:18:34,220
user ran something that was not in the

423
00:18:32,090 --> 00:18:35,480
sudoers list and well they shouldn't

424
00:18:34,220 --> 00:18:37,220
have been doing that and then you can

425
00:18:35,480 --> 00:18:39,560
dive into what has been happening here

426
00:18:37,220 --> 00:18:42,460
or you could for example take a look at

427
00:18:39,560 --> 00:18:44,480
well what was in the system logs

428
00:18:42,460 --> 00:18:45,890
obviously there is a lot of stuff

429
00:18:44,480 --> 00:18:47,570
happening in the system logs but we have

430
00:18:45,890 --> 00:18:49,430
collected those as well and you can also

431
00:18:47,570 --> 00:18:50,840
see for example which users or groups

432
00:18:49,430 --> 00:18:53,170
were added over time

433
00:18:50,840 --> 00:18:55,459
so that could also be kind of handy that

434
00:18:53,170 --> 00:18:56,990
somebody created a new user here that

435
00:18:55,460 --> 00:18:59,090
might be kind of suspicious if you

436
00:18:56,990 --> 00:19:01,970
didn't expect that and you can also see

437
00:18:59,090 --> 00:19:04,610
like which users have a shell or which

438
00:19:01,970 --> 00:19:06,350
have a no login set and you can just

439
00:19:04,610 --> 00:19:08,070
start up it down into those details and

440
00:19:06,350 --> 00:19:10,320
if somebody breaks into

441
00:19:08,070 --> 00:19:12,149
system those are all valuable things to

442
00:19:10,320 --> 00:19:15,000
figure out what has actually happened

443
00:19:12,150 --> 00:19:17,490
over time like has a user actually been

444
00:19:15,000 --> 00:19:18,810
able to create new users and how did

445
00:19:17,490 --> 00:19:22,980
that spread out through your entire

446
00:19:18,810 --> 00:19:25,200
system in my example here okay I

447
00:19:22,980 --> 00:19:27,690
remember that I've been doing that okay

448
00:19:25,200 --> 00:19:30,570
I created an NTP user and I created a

449
00:19:27,690 --> 00:19:33,300
group developers so that was me nobody

450
00:19:30,570 --> 00:19:35,189
else has been creating groups but you

451
00:19:33,300 --> 00:19:37,320
never sure what happened on your system

452
00:19:35,190 --> 00:19:40,200
you can also see for example the SSH

453
00:19:37,320 --> 00:19:42,540
login attempts over the last 24 hours

454
00:19:40,200 --> 00:19:45,060
filter down on those you can see most of

455
00:19:42,540 --> 00:19:46,889
them actually failed and you can see

456
00:19:45,060 --> 00:19:49,200
this was me when I was doing some stuff

457
00:19:46,890 --> 00:19:51,660
today myself you can see which users

458
00:19:49,200 --> 00:19:57,540
were most popular to try to log in and

459
00:19:51,660 --> 00:19:59,700
when you zoom out you can see okay China

460
00:19:57,540 --> 00:20:02,850
was definitely leading normally I either

461
00:19:59,700 --> 00:20:04,620
see Russia or China first but today that

462
00:20:02,850 --> 00:20:08,310
the Russians seem to be taking the day

463
00:20:04,620 --> 00:20:09,600
off only China active I'm by the way

464
00:20:08,310 --> 00:20:16,950
very disappointed that we don't have

465
00:20:09,600 --> 00:20:18,659
more login to attempts from Finland this

466
00:20:16,950 --> 00:20:20,190
is an online system you could just try

467
00:20:18,660 --> 00:20:21,690
to do stuff by the way and we'll

468
00:20:20,190 --> 00:20:24,270
hopefully figure out what is happening

469
00:20:21,690 --> 00:20:25,920
but please don't run a denial of service

470
00:20:24,270 --> 00:20:28,410
attack against it otherwise the demo

471
00:20:25,920 --> 00:20:31,590
will kind of um be not so much fun

472
00:20:28,410 --> 00:20:32,940
anymore but yeah let's see if later on

473
00:20:31,590 --> 00:20:35,610
we will have more login attempts from

474
00:20:32,940 --> 00:20:38,220
Finland okay so this is what we have

475
00:20:35,610 --> 00:20:40,350
been extracting however it turned out

476
00:20:38,220 --> 00:20:43,530
over time that this is kind of a pain to

477
00:20:40,350 --> 00:20:47,429
parse like I said and we also have this

478
00:20:43,530 --> 00:20:50,490
thing where we need to talk food or eat

479
00:20:47,430 --> 00:20:52,740
our own dog food though most people

480
00:20:50,490 --> 00:20:54,540
don't like that dog food thing we

481
00:20:52,740 --> 00:20:56,040
normally prefer to say like drink your

482
00:20:54,540 --> 00:20:59,280
own champagne because it sounds much

483
00:20:56,040 --> 00:21:00,780
fancier we had that moment where we had

484
00:20:59,280 --> 00:21:02,639
to drink our own champagne a bit because

485
00:21:00,780 --> 00:21:06,149
we have a cloud service where we provide

486
00:21:02,640 --> 00:21:08,370
our services as a service and they said

487
00:21:06,150 --> 00:21:10,110
well we want to get all these security

488
00:21:08,370 --> 00:21:12,479
vents and well we have the right stack

489
00:21:10,110 --> 00:21:15,149
why are we not collecting that and that

490
00:21:12,480 --> 00:21:17,520
basically led us to reconsider how are

491
00:21:15,150 --> 00:21:20,010
we interacting with Oddity and what we

492
00:21:17,520 --> 00:21:21,270
could do with Oddity and basically what

493
00:21:20,010 --> 00:21:23,820
we did is we

494
00:21:21,270 --> 00:21:25,830
another beat because beats are basically

495
00:21:23,820 --> 00:21:28,309
a framework and it's called the audit

496
00:21:25,830 --> 00:21:31,949
beat so what we're doing is we're

497
00:21:28,309 --> 00:21:34,049
reusing what audit D is doing and we're

498
00:21:31,950 --> 00:21:36,779
using the same syntax we are just

499
00:21:34,049 --> 00:21:39,690
collecting that directly and we make it

500
00:21:36,779 --> 00:21:41,789
easier to correlate events the resell

501
00:21:39,690 --> 00:21:43,620
resolve the user IDs and the user names

502
00:21:41,789 --> 00:21:45,600
we have a native integration into

503
00:21:43,620 --> 00:21:47,549
elasticsearch so we don't write out that

504
00:21:45,600 --> 00:21:50,039
weird file that is a pain in the ass to

505
00:21:47,549 --> 00:21:52,020
parse back but we're sending stuff in a

506
00:21:50,039 --> 00:21:57,120
structured format off the machine right

507
00:21:52,020 --> 00:21:59,100
away we were considering e BPF for some

508
00:21:57,120 --> 00:22:01,379
time the problem was we have a lot of

509
00:21:59,100 --> 00:22:03,750
users and also internal use cases which

510
00:22:01,380 --> 00:22:05,250
had all the kernels and e BPF didn't

511
00:22:03,750 --> 00:22:07,710
give us all the stuff that we wanted on

512
00:22:05,250 --> 00:22:09,510
those so all it D is kind of like a

513
00:22:07,710 --> 00:22:12,240
stopgap and giving us a lot of the

514
00:22:09,510 --> 00:22:14,340
features that audit is it the DB PF is

515
00:22:12,240 --> 00:22:16,890
also providing it's just that oddity

516
00:22:14,340 --> 00:22:19,260
works with all the kernels and well we

517
00:22:16,890 --> 00:22:21,149
wanted to use those we think that only

518
00:22:19,260 --> 00:22:23,158
configuration is a bit easier and well

519
00:22:21,149 --> 00:22:25,770
you have go binaries so it makes your

520
00:22:23,159 --> 00:22:29,220
life a bit easier for that as well so

521
00:22:25,770 --> 00:22:31,110
and it also does full documented data

522
00:22:29,220 --> 00:22:33,600
enrichment so basically whenever you run

523
00:22:31,110 --> 00:22:35,668
a command it comes from a namespace we

524
00:22:33,600 --> 00:22:37,980
will run look up against the talker

525
00:22:35,669 --> 00:22:39,720
socket if you have access to the doctor

526
00:22:37,980 --> 00:22:41,399
socket obviously if you have access to

527
00:22:39,720 --> 00:22:43,590
the doctor socket we will then resolve

528
00:22:41,399 --> 00:22:46,320
what a specific container was doing and

529
00:22:43,590 --> 00:22:48,928
we can enrich that with docker like base

530
00:22:46,320 --> 00:22:51,059
images labels anything that you have on

531
00:22:48,929 --> 00:22:55,440
that ecosystem we can enrichen on that

532
00:22:51,059 --> 00:22:58,860
as well so what is already doing let's

533
00:22:55,440 --> 00:23:00,840
take a look here we take a look at the

534
00:22:58,860 --> 00:23:03,809
configuration file maybe that's the

535
00:23:00,840 --> 00:23:09,330
right point in time to do that so like

536
00:23:03,809 --> 00:23:11,428
all our beats audit speed is well repeat

537
00:23:09,330 --> 00:23:14,760
or repeated game L is where the

538
00:23:11,429 --> 00:23:16,710
configuration file lives let's jump to

539
00:23:14,760 --> 00:23:19,110
the beginning of the file basically what

540
00:23:16,710 --> 00:23:21,029
we have here is we have an audit team

541
00:23:19,110 --> 00:23:22,678
module we are setting pretty much the

542
00:23:21,029 --> 00:23:24,480
same settings that we have in the

543
00:23:22,679 --> 00:23:26,370
default settings or I've supplied the

544
00:23:24,480 --> 00:23:28,559
same settings where you see I have a

545
00:23:26,370 --> 00:23:29,879
backlog limit I have I didn't set the

546
00:23:28,559 --> 00:23:31,320
rate limit but you could set the rate

547
00:23:29,880 --> 00:23:32,760
limit if there are too many requests

548
00:23:31,320 --> 00:23:34,990
coming in for example as well I'm

549
00:23:32,760 --> 00:23:38,320
getting rid of the raw vents

550
00:23:34,990 --> 00:23:41,350
it's just unnecessary storage and I want

551
00:23:38,320 --> 00:23:44,710
to keep the lipid slimmer and then after

552
00:23:41,350 --> 00:23:46,659
that pipe which is everybody loves him

553
00:23:44,710 --> 00:23:49,990
oh that's the way to just pass in a

554
00:23:46,660 --> 00:23:52,000
random message first to remind myself

555
00:23:49,990 --> 00:23:55,330
how that all the decent works always

556
00:23:52,000 --> 00:23:59,110
works I have a comment to say that first

557
00:23:55,330 --> 00:24:01,870
either you watch a file with - W or you

558
00:23:59,110 --> 00:24:05,620
may monitor a system call with - a and

559
00:24:01,870 --> 00:24:07,389
then action and the filter and then we

560
00:24:05,620 --> 00:24:09,820
basically dive into that so for example

561
00:24:07,390 --> 00:24:12,309
here we're watching a file here we would

562
00:24:09,820 --> 00:24:14,620
for example watch the et Cie passwd file

563
00:24:12,309 --> 00:24:17,940
and we tag the entire thing with

564
00:24:14,620 --> 00:24:22,030
identity and if I scroll further down

565
00:24:17,940 --> 00:24:26,620
here for example I watch the read access

566
00:24:22,030 --> 00:24:28,660
to et Cie passwd from a user in a

567
00:24:26,620 --> 00:24:31,270
specific group we'll come back to this

568
00:24:28,660 --> 00:24:33,190
rule in a few moments but this is just

569
00:24:31,270 --> 00:24:35,290
what the general oddity configuration

570
00:24:33,190 --> 00:24:37,240
syntax looks like and so if you have

571
00:24:35,290 --> 00:24:38,830
oddity running you can just take the

572
00:24:37,240 --> 00:24:40,770
same rules and stick them in to audit

573
00:24:38,830 --> 00:24:44,710
beat and it's doing the exact same thing

574
00:24:40,770 --> 00:24:48,790
so what you get from that what I have

575
00:24:44,710 --> 00:24:50,460
extracted here is do you want to see the

576
00:24:48,790 --> 00:24:58,330
raw events first of the dashboard first

577
00:24:50,460 --> 00:25:01,330
where do we go dashboards okay let's see

578
00:24:58,330 --> 00:25:02,860
we have an overview and here this looks

579
00:25:01,330 --> 00:25:04,659
pretty familiar to what we have seen

580
00:25:02,860 --> 00:25:07,090
before let's switch tech back to the

581
00:25:04,660 --> 00:25:09,070
last 15 minutes or so so it's not too

582
00:25:07,090 --> 00:25:10,840
much you can see like which actions have

583
00:25:09,070 --> 00:25:12,730
been running here somebody executed

584
00:25:10,840 --> 00:25:14,559
something somebody locked in you

585
00:25:12,730 --> 00:25:16,510
basically see over time how many of

586
00:25:14,559 --> 00:25:17,230
these events have been happening you can

587
00:25:16,510 --> 00:25:19,450
see

588
00:25:17,230 --> 00:25:22,270
yeah which event categories you have

589
00:25:19,450 --> 00:25:24,309
been collecting here and you see the raw

590
00:25:22,270 --> 00:25:26,740
events down here but this is just

591
00:25:24,309 --> 00:25:28,420
combined - put view of the raw events

592
00:25:26,740 --> 00:25:31,090
that you have so if I had over to

593
00:25:28,420 --> 00:25:32,650
discover these are basically the raw

594
00:25:31,090 --> 00:25:35,290
events that we have collected and for

595
00:25:32,650 --> 00:25:36,820
example for audit beat here these are

596
00:25:35,290 --> 00:25:39,370
all the things I'm collecting here with

597
00:25:36,820 --> 00:25:41,530
audit beat I see that in the last 15

598
00:25:39,370 --> 00:25:43,870
minutes so the last fifteen minutes this

599
00:25:41,530 --> 00:25:47,080
is that one here I have collected

600
00:25:43,870 --> 00:25:48,120
approximately eight hundred events on my

601
00:25:47,080 --> 00:25:51,210
system

602
00:25:48,120 --> 00:25:54,330
and if I unfold one of these you can see

603
00:25:51,210 --> 00:25:59,910
okay somebody seems to have tried to

604
00:25:54,330 --> 00:26:03,780
login with an invalid user from that IP

605
00:25:59,910 --> 00:26:05,430
address and you can also see some other

606
00:26:03,780 --> 00:26:06,930
nice information here for example it's

607
00:26:05,430 --> 00:26:09,210
something that we automatically can

608
00:26:06,930 --> 00:26:11,730
enrich is the host information so I'm

609
00:26:09,210 --> 00:26:13,830
right now enriching every event that I'm

610
00:26:11,730 --> 00:26:15,570
collecting with the operating system so

611
00:26:13,830 --> 00:26:19,350
you can see here I'm running on the

612
00:26:15,570 --> 00:26:21,929
latest LT s of Ubuntu you can see some

613
00:26:19,350 --> 00:26:23,669
internal IP address the host ID so you

614
00:26:21,930 --> 00:26:25,440
can back-trace that to the instance or

615
00:26:23,670 --> 00:26:27,540
for example if you know that some

616
00:26:25,440 --> 00:26:29,640
specific security issue is just

617
00:26:27,540 --> 00:26:31,500
affecting one specific operating system

618
00:26:29,640 --> 00:26:33,570
or one specific version of the operating

619
00:26:31,500 --> 00:26:34,890
system you could just fill the down on

620
00:26:33,570 --> 00:26:37,320
that here so for example if I would

621
00:26:34,890 --> 00:26:40,590
click on that plus I would only filter

622
00:26:37,320 --> 00:26:43,169
down to my open to 18:04 dot one

623
00:26:40,590 --> 00:26:45,060
instances however since this is the only

624
00:26:43,170 --> 00:26:48,450
operating system I'm running here in my

625
00:26:45,060 --> 00:26:50,340
example we have all the events collected

626
00:26:48,450 --> 00:26:52,020
here as well so we're not really

627
00:26:50,340 --> 00:26:54,000
filtering down on much but if you have a

628
00:26:52,020 --> 00:26:55,620
fleet of operating systems this would be

629
00:26:54,000 --> 00:26:56,970
the easiest way to filter down what

630
00:26:55,620 --> 00:27:01,439
operating systems do you even have

631
00:26:56,970 --> 00:27:04,410
running and then I'm also enriching the

632
00:27:01,440 --> 00:27:09,120
cloud meta data so you can see my stuff

633
00:27:04,410 --> 00:27:11,550
is running here on AWS in EU West 1a so

634
00:27:09,120 --> 00:27:13,350
you West should be Ireland in the one

635
00:27:11,550 --> 00:27:15,750
availability zone you can see the

636
00:27:13,350 --> 00:27:19,800
instance ID you can see this is running

637
00:27:15,750 --> 00:27:22,110
one of the cheap t2 micro instances so

638
00:27:19,800 --> 00:27:23,730
you can filter is down easily on the

639
00:27:22,110 --> 00:27:25,800
region or the cloud provider or the

640
00:27:23,730 --> 00:27:27,720
instance ID and you can just see where

641
00:27:25,800 --> 00:27:29,730
stuff is happening in your system this

642
00:27:27,720 --> 00:27:32,850
is just things that we haven't reached

643
00:27:29,730 --> 00:27:36,990
and you can see is here some something

644
00:27:32,850 --> 00:27:39,179
has been happening with SSH and somebody

645
00:27:36,990 --> 00:27:42,150
an unknown user seems to have tried to

646
00:27:39,180 --> 00:27:46,890
log into our system so these are the raw

647
00:27:42,150 --> 00:27:50,190
events ok let's see what else we can do

648
00:27:46,890 --> 00:27:54,840
here so these are my configuration rules

649
00:27:50,190 --> 00:27:59,390
let's log in with another user let's

650
00:27:54,840 --> 00:27:59,389
take the elastic user first

651
00:28:00,390 --> 00:28:10,049
so the first thing is if you if you fail

652
00:28:06,630 --> 00:28:11,790
to login like I'm doing right now we

653
00:28:10,049 --> 00:28:13,590
should be able to very easily tracked it

654
00:28:11,790 --> 00:28:17,010
down what did we find that information

655
00:28:13,590 --> 00:28:19,020
again we had a dashboard with the ssh

656
00:28:17,010 --> 00:28:22,080
user so let's first let's try to find

657
00:28:19,020 --> 00:28:27,929
that user again so if i had over to ssh

658
00:28:22,080 --> 00:28:29,040
I know which user I'm looking for so we

659
00:28:27,929 --> 00:28:32,100
didn't have any successful login

660
00:28:29,040 --> 00:28:34,950
attempts but I'm trying to log in

661
00:28:32,100 --> 00:28:37,830
okay the usernames are getting a little

662
00:28:34,950 --> 00:28:40,679
more colorful now but I'm interested in

663
00:28:37,830 --> 00:28:41,970
my elastic user and well that has only

664
00:28:40,679 --> 00:28:44,880
been happening from that IP address

665
00:28:41,970 --> 00:28:47,370
let's quickly check with my VPN yeah

666
00:28:44,880 --> 00:28:48,390
that that was me I failed to login

667
00:28:47,370 --> 00:28:51,000
that's correct

668
00:28:48,390 --> 00:28:53,520
and since I'm roaming through my phone

669
00:28:51,000 --> 00:28:57,030
and have the VPN on it does looks like

670
00:28:53,520 --> 00:28:58,980
it's coming from home and not Finland ok

671
00:28:57,030 --> 00:29:02,100
so let's try it again

672
00:28:58,980 --> 00:29:05,580
and this time I'm logging in with the

673
00:29:02,100 --> 00:29:07,559
right password and now let's let's see

674
00:29:05,580 --> 00:29:10,949
what my user could be doing so for

675
00:29:07,559 --> 00:29:14,820
example let's say I have nginx running

676
00:29:10,950 --> 00:29:16,470
and I want to restart nginx and well

677
00:29:14,820 --> 00:29:18,720
since I don't have sudo privileges I

678
00:29:16,470 --> 00:29:24,240
will need to pick a user and actually

679
00:29:18,720 --> 00:29:26,360
run a stead user and I hope I remember

680
00:29:24,240 --> 00:29:31,440
that correctly and we have just

681
00:29:26,360 --> 00:29:35,059
restarted the user the nginx process so

682
00:29:31,440 --> 00:29:38,370
let's see if we can actually trace that

683
00:29:35,059 --> 00:29:42,928
in our processes so we have another

684
00:29:38,370 --> 00:29:46,260
dashboard here with for audit audit if I

685
00:29:42,929 --> 00:29:49,740
could type audit speed where we have

686
00:29:46,260 --> 00:29:51,390
executions and in the executions I know

687
00:29:49,740 --> 00:29:52,919
that the elastic user has been doing

688
00:29:51,390 --> 00:29:55,110
something so I will filter down on that

689
00:29:52,919 --> 00:29:56,309
user you can see overall these were all

690
00:29:55,110 --> 00:29:58,949
the commands that that user has been

691
00:29:56,309 --> 00:30:01,290
running in the last 15 minutes and if I

692
00:29:58,950 --> 00:30:03,540
look here you can actually see ah this

693
00:30:01,290 --> 00:30:05,070
is what the user has been doing there

694
00:30:03,540 --> 00:30:07,470
have been some other things been run

695
00:30:05,070 --> 00:30:09,270
under that user but this is the event

696
00:30:07,470 --> 00:30:12,030
that I'm interested in so if you open

697
00:30:09,270 --> 00:30:13,379
that one up you can see okay this was

698
00:30:12,030 --> 00:30:16,950
the actual event and

699
00:30:13,380 --> 00:30:21,690
you can see the elastic user started

700
00:30:16,950 --> 00:30:23,670
this command and was running that then

701
00:30:21,690 --> 00:30:26,250
you can see all the other information

702
00:30:23,670 --> 00:30:28,950
about the operating system and what is

703
00:30:26,250 --> 00:30:30,660
more relevant is okay this was the

704
00:30:28,950 --> 00:30:33,120
elastic user who has been running that

705
00:30:30,660 --> 00:30:35,010
and you can see the user groups and you

706
00:30:33,120 --> 00:30:37,590
could even just find the raw events

707
00:30:35,010 --> 00:30:39,720
around that for example if you would

708
00:30:37,590 --> 00:30:41,280
have too many events here if you have

709
00:30:39,720 --> 00:30:44,040
lots of things going on in your system

710
00:30:41,280 --> 00:30:45,270
maybe just running on the user itself is

711
00:30:44,040 --> 00:30:47,159
not enough but we could for example

712
00:30:45,270 --> 00:30:48,930
filter that down just with the regular

713
00:30:47,160 --> 00:30:50,490
full-text search and then you would have

714
00:30:48,930 --> 00:30:53,370
a single event and then you can see okay

715
00:30:50,490 --> 00:30:56,400
this is what my user has been up to and

716
00:30:53,370 --> 00:30:58,409
this is the actual event or the stuff

717
00:30:56,400 --> 00:31:00,180
that that user has been triggering here

718
00:30:58,410 --> 00:31:03,090
and it was actually a successful event

719
00:31:00,180 --> 00:31:07,260
so we have been able to restart nginx or

720
00:31:03,090 --> 00:31:08,939
for example we could say my user is just

721
00:31:07,260 --> 00:31:12,480
trying to poke around the system for

722
00:31:08,940 --> 00:31:14,220
example we could say e to see passwd I

723
00:31:12,480 --> 00:31:16,770
just want to take a look at which users

724
00:31:14,220 --> 00:31:19,350
do I have in my system and for that for

725
00:31:16,770 --> 00:31:21,330
example we have created a dedicated rule

726
00:31:19,350 --> 00:31:23,340
that we have mentioned before so this is

727
00:31:21,330 --> 00:31:26,699
the rule here so basically what I'm

728
00:31:23,340 --> 00:31:31,020
saying is if somebody is reading the HC

729
00:31:26,700 --> 00:31:34,860
passwd file and it is the user is from

730
00:31:31,020 --> 00:31:37,980
the group with the ID e 1001 which that

731
00:31:34,860 --> 00:31:41,179
specific user is from then we want to

732
00:31:37,980 --> 00:31:45,420
lock that with the tag developers passwd

733
00:31:41,180 --> 00:31:47,340
read and the thing and to find that

734
00:31:45,420 --> 00:31:51,500
actual event what we need to do is well

735
00:31:47,340 --> 00:31:54,389
we can head over to the raw event and

736
00:31:51,500 --> 00:31:59,100
then we could for example say we have

737
00:31:54,390 --> 00:32:01,050
the tags is and then we have exactly

738
00:31:59,100 --> 00:32:03,689
that tag that we have just specified and

739
00:32:01,050 --> 00:32:06,629
that way we could filter down down for

740
00:32:03,690 --> 00:32:08,550
my mm something events we would seen

741
00:32:06,630 --> 00:32:11,700
last 15 minutes these were the events

742
00:32:08,550 --> 00:32:13,409
with that tag that have been caused and

743
00:32:11,700 --> 00:32:14,970
if you scroll further down you can

744
00:32:13,410 --> 00:32:17,580
actually see what has been happening so

745
00:32:14,970 --> 00:32:20,790
you can see here pin cat has been called

746
00:32:17,580 --> 00:32:22,350
on that file so the object primary

747
00:32:20,790 --> 00:32:24,810
that's always kind of like the target on

748
00:32:22,350 --> 00:32:27,240
which you run something you can see we

749
00:32:24,810 --> 00:32:28,889
have opened a file and you can see we

750
00:32:27,240 --> 00:32:31,650
user has been running that and you can

751
00:32:28,890 --> 00:32:33,210
see all the attributes of that user and

752
00:32:31,650 --> 00:32:37,550
you can see well it was the elastic user

753
00:32:33,210 --> 00:32:37,550
and you can see that was the group ID

754
00:32:38,000 --> 00:32:43,020
which we have been filtering on so that

755
00:32:40,920 --> 00:32:47,700
has that is what that user has been up

756
00:32:43,020 --> 00:32:50,970
to let's try something else let's say

757
00:32:47,700 --> 00:32:55,679
this user is logging out and we have the

758
00:32:50,970 --> 00:33:00,510
admin user now and we kind of have a

759
00:32:55,679 --> 00:33:02,190
curious we have a curious admin user and

760
00:33:00,510 --> 00:33:04,320
that admin user is just poking around

761
00:33:02,190 --> 00:33:06,929
the system abusing their privileges so

762
00:33:04,320 --> 00:33:09,059
for example we take a look at home and

763
00:33:06,929 --> 00:33:11,250
then we see okay we have our own home

764
00:33:09,059 --> 00:33:14,399
directory but we also have the elastic

765
00:33:11,250 --> 00:33:16,110
user directory and we'll just start

766
00:33:14,400 --> 00:33:18,750
looking around and then we see oh we

767
00:33:16,110 --> 00:33:20,729
have a file called secret txt and

768
00:33:18,750 --> 00:33:26,330
obviously we want to look at what that

769
00:33:20,730 --> 00:33:26,330
secret txt is doing so let's have a look

770
00:33:27,230 --> 00:33:39,320
will this work obviously no because we

771
00:33:31,890 --> 00:33:39,320
miss the privileges so if you could type

772
00:33:41,690 --> 00:33:49,380
and you can see the file contains my

773
00:33:44,520 --> 00:33:51,389
secret now this is clearly an abuse of

774
00:33:49,380 --> 00:33:53,040
the privileges of sudo like that user

775
00:33:51,390 --> 00:33:55,500
shouldn't be poking into the private

776
00:33:53,040 --> 00:33:59,190
directory of any user so how can we

777
00:33:55,500 --> 00:34:02,640
collect that with audit d so let's look

778
00:33:59,190 --> 00:34:04,290
luckily we have created a rule and this

779
00:34:02,640 --> 00:34:08,159
is the rule we're interested in here

780
00:34:04,290 --> 00:34:12,659
which we have called the power abuse so

781
00:34:08,159 --> 00:34:15,929
if we have a user ID for a root user who

782
00:34:12,659 --> 00:34:17,850
is looking into stuff from non-root

783
00:34:15,929 --> 00:34:21,359
users so these are the regular users

784
00:34:17,850 --> 00:34:24,810
like my elastic user which has the group

785
00:34:21,359 --> 00:34:27,869
ID 1001 so this is clean in that rule

786
00:34:24,810 --> 00:34:30,659
and basically we want to lock that when

787
00:34:27,869 --> 00:34:34,500
you try to access a file on by user of

788
00:34:30,659 --> 00:34:37,770
that 1000 plus group we want to lock

789
00:34:34,500 --> 00:34:40,290
that under power abuse so if I log head

790
00:34:37,770 --> 00:34:43,739
over to my raw events again

791
00:34:40,290 --> 00:34:48,329
I want to edit this and this should be

792
00:34:43,739 --> 00:34:50,219
called power abuse now and if you're

793
00:34:48,329 --> 00:34:52,530
lucky it was the very latest event that

794
00:34:50,219 --> 00:34:55,770
we have here and you can actually see

795
00:34:52,530 --> 00:34:58,770
okay the elastic admin user has been

796
00:34:55,770 --> 00:35:01,230
running cat on the home directory or the

797
00:34:58,770 --> 00:35:04,440
specific secret txt file of that user

798
00:35:01,230 --> 00:35:06,240
and then you could ask the user was it

799
00:35:04,440 --> 00:35:09,030
really necessary or are you may be

800
00:35:06,240 --> 00:35:10,020
abusing your sudo privileges and there

801
00:35:09,030 --> 00:35:12,150
are some other things here not

802
00:35:10,020 --> 00:35:14,940
everything is really a security security

803
00:35:12,150 --> 00:35:17,160
thing or some active power abuse but of

804
00:35:14,940 --> 00:35:19,440
some of them might make sense to look

805
00:35:17,160 --> 00:35:21,529
more into them but I mean landscape sue

806
00:35:19,440 --> 00:35:24,930
saying okay this is probably less

807
00:35:21,530 --> 00:35:26,490
harmful but for example everything in

808
00:35:24,930 --> 00:35:28,230
the home directory that is something

809
00:35:26,490 --> 00:35:30,569
where you might want to take a better

810
00:35:28,230 --> 00:35:32,700
look at so for example you could just

811
00:35:30,570 --> 00:35:34,650
filter down on the home directory and

812
00:35:32,700 --> 00:35:37,379
just find all the events where somebody

813
00:35:34,650 --> 00:35:42,150
use their sudo privileges to look into

814
00:35:37,380 --> 00:35:47,750
stuff into the home directory so that

815
00:35:42,150 --> 00:35:47,750
would be possible as well um okay

816
00:35:51,120 --> 00:35:55,839
one other thing that we have added to

817
00:35:53,680 --> 00:35:57,700
that is not part of oddity but we have

818
00:35:55,840 --> 00:36:01,330
added that to audit beat is we have

819
00:35:57,700 --> 00:36:02,950
added a file integrity check while the

820
00:36:01,330 --> 00:36:05,140
audit these stuff will only work on

821
00:36:02,950 --> 00:36:07,689
Linux because well it depends on the

822
00:36:05,140 --> 00:36:09,160
kernel features the file integrity works

823
00:36:07,690 --> 00:36:10,630
on other operating systems as well

824
00:36:09,160 --> 00:36:13,149
depending on what operating system

825
00:36:10,630 --> 00:36:15,580
you're using we will use different

826
00:36:13,150 --> 00:36:17,890
mechanisms to check that if a file has

827
00:36:15,580 --> 00:36:20,380
changed so for example on Linux every

828
00:36:17,890 --> 00:36:23,080
time a file changed we you can do that

829
00:36:20,380 --> 00:36:25,690
with inotify on Mac OS it's FS events

830
00:36:23,080 --> 00:36:28,330
and on Windows it's redirect URI changes

831
00:36:25,690 --> 00:36:31,390
W and with those we basically can

832
00:36:28,330 --> 00:36:34,319
monitor one directory to see that if

833
00:36:31,390 --> 00:36:36,790
something has changed so for example

834
00:36:34,320 --> 00:36:45,220
let's take a very simple example let's

835
00:36:36,790 --> 00:36:48,190
say we have we have our website and this

836
00:36:45,220 --> 00:36:56,370
is working fine and somebody might be

837
00:36:48,190 --> 00:37:08,640
abusing your website and add a file HTML

838
00:36:56,370 --> 00:37:08,640
index no not like this

839
00:37:10,710 --> 00:37:18,490
that's much better so here we have a

840
00:37:13,960 --> 00:37:25,779
very simple website and if I would see

841
00:37:18,490 --> 00:37:28,538
my cursor let's say somebody is changing

842
00:37:25,779 --> 00:37:32,589
your website and let's do something like

843
00:37:28,539 --> 00:37:34,480
this which is maybe not what you want on

844
00:37:32,589 --> 00:37:38,710
your actual website so if somebody comes

845
00:37:34,480 --> 00:37:39,819
to your site they will now see if this

846
00:37:38,710 --> 00:37:41,980
is happening on your company website

847
00:37:39,819 --> 00:37:43,779
you're probably not too happy and maybe

848
00:37:41,980 --> 00:37:47,170
you want to figure out like how did that

849
00:37:43,779 --> 00:37:48,970
change happen to my site and that's what

850
00:37:47,170 --> 00:37:52,029
the file integrity module or where that

851
00:37:48,970 --> 00:37:53,230
comes into play so let's see what we

852
00:37:52,029 --> 00:37:56,140
have configured in the file integrity

853
00:37:53,230 --> 00:37:59,170
module so if I scroll further down a bit

854
00:37:56,140 --> 00:38:01,058
here besides the ODT module we have this

855
00:37:59,170 --> 00:38:03,309
file integrity module and I can

856
00:38:01,059 --> 00:38:06,579
configure which files or paths

857
00:38:03,309 --> 00:38:09,940
I want to monitor so VAR w w HTML is

858
00:38:06,579 --> 00:38:11,890
what i want to scan you can define like

859
00:38:09,940 --> 00:38:13,630
how much data you want to scan or what

860
00:38:11,890 --> 00:38:15,578
is the maximum file size that is mainly

861
00:38:13,630 --> 00:38:16,269
not to take up too many resources on

862
00:38:15,579 --> 00:38:18,970
your system

863
00:38:16,269 --> 00:38:20,890
and you can also say like which hashing

864
00:38:18,970 --> 00:38:23,529
algorithm do you want to use to figure

865
00:38:20,890 --> 00:38:25,210
out which files have changed sha-1 is

866
00:38:23,529 --> 00:38:27,490
the default we have a couple of others

867
00:38:25,210 --> 00:38:29,529
I'll have those in the next slide so you

868
00:38:27,490 --> 00:38:34,269
can figure out what is happening there

869
00:38:29,529 --> 00:38:36,940
and then we can actually head back to

870
00:38:34,269 --> 00:38:40,868
the dashboards to see if we can find

871
00:38:36,940 --> 00:38:45,460
what has been happening here so here we

872
00:38:40,869 --> 00:38:49,059
are interested in audit feed and we are

873
00:38:45,460 --> 00:38:52,299
interested in the file integrity and we

874
00:38:49,059 --> 00:38:54,849
can see okay three files were created

875
00:38:52,299 --> 00:38:57,369
updated and changed you can see when

876
00:38:54,849 --> 00:39:00,339
that happened you can see which user was

877
00:38:57,369 --> 00:39:03,339
responsible for that change and here you

878
00:39:00,339 --> 00:39:06,609
can see which files were most edited or

879
00:39:03,339 --> 00:39:08,619
changed and since I was using VI well we

880
00:39:06,609 --> 00:39:10,058
have the swap file and that's why we

881
00:39:08,619 --> 00:39:11,769
don't have just one file but we have

882
00:39:10,059 --> 00:39:14,829
multiple files being edited but that's

883
00:39:11,769 --> 00:39:16,419
just how VI is handling files but this

884
00:39:14,829 --> 00:39:18,640
is basically tracking everything will

885
00:39:16,420 --> 00:39:21,250
change that we do to that directory and

886
00:39:18,640 --> 00:39:24,310
it's hashing the files and thanks to

887
00:39:21,250 --> 00:39:27,370
that hash we can just figure out who has

888
00:39:24,310 --> 00:39:29,200
been doing what to a file and then you

889
00:39:27,370 --> 00:39:32,290
will probably see why suddenly your

890
00:39:29,200 --> 00:39:34,120
website has hearty emojis on it rather

891
00:39:32,290 --> 00:39:36,040
than the actual content that you want to

892
00:39:34,120 --> 00:39:39,870
have or probably stuff that is worse

893
00:39:36,040 --> 00:39:43,779
than hearty emojis and you can see okay

894
00:39:39,870 --> 00:39:45,460
on which host how many change events

895
00:39:43,780 --> 00:39:47,260
happened this will be useful if you have

896
00:39:45,460 --> 00:39:49,150
more than one host and you can see which

897
00:39:47,260 --> 00:39:51,670
files what or what happened to the files

898
00:39:49,150 --> 00:39:53,140
like where they move deleted updated

899
00:39:51,670 --> 00:39:55,240
like all the operations that we are

900
00:39:53,140 --> 00:40:01,509
being run on your files you can get the

901
00:39:55,240 --> 00:40:03,430
idea of that year okay yeah this we are

902
00:40:01,510 --> 00:40:06,220
the hash types that I promised you so

903
00:40:03,430 --> 00:40:08,529
sha-1 is the default which is we think a

904
00:40:06,220 --> 00:40:10,600
decent trade-off between speed and like

905
00:40:08,530 --> 00:40:12,220
a good hashing function to get the most

906
00:40:10,600 --> 00:40:16,230
performant hashing function that we have

907
00:40:12,220 --> 00:40:18,640
is the last one that's as XS aged 64

908
00:40:16,230 --> 00:40:20,700
that is the most performant hashing

909
00:40:18,640 --> 00:40:26,379
function that is part of the file

910
00:40:20,700 --> 00:40:28,390
integrity check okay since we have some

911
00:40:26,380 --> 00:40:35,890
time left let's let's try something else

912
00:40:28,390 --> 00:40:38,220
as well let's let's talk that's a net

913
00:40:35,890 --> 00:40:38,220
cat

914
00:40:41,229 --> 00:40:48,549
anybody wants to send me a message or do

915
00:40:46,009 --> 00:40:57,890
I have to talk to myself

916
00:40:48,549 --> 00:41:00,769
let's see telnet and ideally here our

917
00:40:57,890 --> 00:41:03,890
messages will appear so if anybody is

918
00:41:00,769 --> 00:41:07,999
quick enough telnet or anything else

919
00:41:03,890 --> 00:41:09,920
will work to send messages how can I

920
00:41:07,999 --> 00:41:12,410
find that I've opened another port or

921
00:41:09,920 --> 00:41:13,849
been running a program to figure out

922
00:41:12,410 --> 00:41:15,170
that somebody has been opening something

923
00:41:13,849 --> 00:41:16,430
and maybe they should have been doing

924
00:41:15,170 --> 00:41:23,690
that or shouldn't have been doing that

925
00:41:16,430 --> 00:41:27,379
any guesses where to start let's head

926
00:41:23,690 --> 00:41:32,660
over to the raw events again get rid of

927
00:41:27,380 --> 00:41:35,539
the the filter you can see we have 1600

928
00:41:32,660 --> 00:41:37,819
events in the last 15 minutes let's say

929
00:41:35,539 --> 00:41:40,009
you know that something happened on a

930
00:41:37,819 --> 00:41:42,079
specific port and well we have no idea

931
00:41:40,009 --> 00:41:43,849
of where to start so actually I will

932
00:41:42,079 --> 00:41:47,660
just start with the full-text search and

933
00:41:43,849 --> 00:41:50,449
if I just start with 1025 since we are

934
00:41:47,660 --> 00:41:51,949
logging all the system calls every time

935
00:41:50,449 --> 00:41:54,289
the program has been running we can

936
00:41:51,949 --> 00:41:57,170
actually very easily see okay which user

937
00:41:54,289 --> 00:41:59,799
has been running what program and and

938
00:41:57,170 --> 00:42:02,420
what has been happening so you can see

939
00:41:59,799 --> 00:42:05,150
this was the user that has been running

940
00:42:02,420 --> 00:42:06,709
the process so the elastic admin has

941
00:42:05,150 --> 00:42:08,089
been running that and this was the

942
00:42:06,709 --> 00:42:12,198
actual command that we have been running

943
00:42:08,089 --> 00:42:15,380
so netcat l thousand 25 so people can

944
00:42:12,199 --> 00:42:19,160
actually chat with me and nobody wants

945
00:42:15,380 --> 00:42:24,729
to talk to me which is very sad but this

946
00:42:19,160 --> 00:42:24,729
is just how to get started on that okay

947
00:42:25,989 --> 00:42:30,799
we have seen the file integrity by the

948
00:42:29,089 --> 00:42:32,630
way if you have lots of events something

949
00:42:30,799 --> 00:42:34,999
that might be very useful is that you

950
00:42:32,630 --> 00:42:36,319
don't just have static filters but then

951
00:42:34,999 --> 00:42:37,669
you have something that learns

952
00:42:36,319 --> 00:42:39,558
automatically kind of what is happening

953
00:42:37,670 --> 00:42:41,119
on your system which might look

954
00:42:39,559 --> 00:42:43,489
something like this for example these

955
00:42:41,119 --> 00:42:45,289
are let's assume the unique IP address

956
00:42:43,489 --> 00:42:47,209
is connected to your system or the users

957
00:42:45,289 --> 00:42:49,219
locked into your system or whatever you

958
00:42:47,209 --> 00:42:51,259
have and you probably have some pattern

959
00:42:49,219 --> 00:42:52,190
where you see five weekdays

960
00:42:51,260 --> 00:42:54,590
and then you have the weekend where

961
00:42:52,190 --> 00:42:57,280
there's less activity and you want to

962
00:42:54,590 --> 00:42:59,960
find anomalies like when something

963
00:42:57,280 --> 00:43:01,790
unexpected is happening like here which

964
00:42:59,960 --> 00:43:04,160
is kind of hard to see but if you zoom

965
00:43:01,790 --> 00:43:06,020
into that you can actually see here the

966
00:43:04,160 --> 00:43:08,899
blue band this is kind of the expected

967
00:43:06,020 --> 00:43:11,180
baseline and here's something unexpected

968
00:43:08,900 --> 00:43:13,340
happened and this is from our own

969
00:43:11,180 --> 00:43:15,200
website the unique users on our website

970
00:43:13,340 --> 00:43:17,810
and that was one and a half years ago or

971
00:43:15,200 --> 00:43:20,330
almost two years ago when Amazon s3 went

972
00:43:17,810 --> 00:43:22,040
down but this is just how to figure out

973
00:43:20,330 --> 00:43:24,230
when unexpected stuff happens on your

974
00:43:22,040 --> 00:43:26,180
system and especially with oddity which

975
00:43:24,230 --> 00:43:28,760
can be a bit noisy and creates a lot of

976
00:43:26,180 --> 00:43:30,680
events creating rules manual is often

977
00:43:28,760 --> 00:43:32,480
the pain in the ass and having some

978
00:43:30,680 --> 00:43:35,390
machine learning to actually learn what

979
00:43:32,480 --> 00:43:38,540
is happening on your system normally can

980
00:43:35,390 --> 00:43:40,160
be very beneficial on that end okay so

981
00:43:38,540 --> 00:43:43,580
to wrap up and have some time for

982
00:43:40,160 --> 00:43:45,470
questions I always compare this entire

983
00:43:43,580 --> 00:43:47,120
thing a bit to Lego you have all these

984
00:43:45,470 --> 00:43:49,279
building blocks but you need to stick

985
00:43:47,120 --> 00:43:51,380
them together so you need to start with

986
00:43:49,280 --> 00:43:54,410
the oddity rules like which oddity rules

987
00:43:51,380 --> 00:43:57,050
make sense if you need inspiration like

988
00:43:54,410 --> 00:43:59,359
I've mentioned before here you have a

989
00:43:57,050 --> 00:44:01,670
lot of rules that you might want to take

990
00:43:59,360 --> 00:44:06,200
a look at and which can teach you what

991
00:44:01,670 --> 00:44:07,910
is possible or what might make sense and

992
00:44:06,200 --> 00:44:11,240
then you need to figure out how do I get

993
00:44:07,910 --> 00:44:12,740
or centralize those events we tried to

994
00:44:11,240 --> 00:44:14,959
provide a solution for that but you can

995
00:44:12,740 --> 00:44:17,060
also try to manually collect it then use

996
00:44:14,960 --> 00:44:21,170
or report for example to see what is

997
00:44:17,060 --> 00:44:23,600
happening in your system yeah and we've

998
00:44:21,170 --> 00:44:25,700
basically seen going from oddity to the

999
00:44:23,600 --> 00:44:27,560
audit pit and then integrating that with

1000
00:44:25,700 --> 00:44:29,540
logs and other dashboards and just

1001
00:44:27,560 --> 00:44:33,710
seeing what is happening to that system

1002
00:44:29,540 --> 00:44:38,090
overall that's the general idea if you

1003
00:44:33,710 --> 00:44:40,910
want to try that out yourself you can go

1004
00:44:38,090 --> 00:44:42,200
to dashboard and used I think you should

1005
00:44:40,910 --> 00:44:44,540
be logged in automatically with

1006
00:44:42,200 --> 00:44:46,490
dashboard only user so you will not be

1007
00:44:44,540 --> 00:44:48,830
able to delete any data you will not be

1008
00:44:46,490 --> 00:44:53,049
able to create any new visualizations

1009
00:44:48,830 --> 00:44:55,819
but you get to the default dashboards

1010
00:44:53,050 --> 00:44:59,890
let me actually try that out if that

1011
00:44:55,820 --> 00:44:59,890
works as I'm expecting it to work

1012
00:45:07,980 --> 00:45:10,820
hopefully

1013
00:45:13,340 --> 00:45:17,720
so you should be locked in with a user

1014
00:45:15,920 --> 00:45:25,100
automatically that doesn't have too many

1015
00:45:17,720 --> 00:45:28,930
permissions if you load this is not a

1016
00:45:25,100 --> 00:45:28,930
demo effect come on

1017
00:45:33,549 --> 00:45:36,239
No

1018
00:45:37,220 --> 00:45:42,319
No okay I will check if I have

1019
00:45:39,970 --> 00:45:45,470
misconfigured my dashboard user know

1020
00:45:42,319 --> 00:45:47,599
it's working it's just slow and if you

1021
00:45:45,470 --> 00:45:49,399
log into that you will not be able to

1022
00:45:47,599 --> 00:45:51,560
create any new visualization so you can

1023
00:45:49,400 --> 00:45:54,940
see I have a lot of more buttons here

1024
00:45:51,560 --> 00:45:59,630
but you will be able to for example to

1025
00:45:54,940 --> 00:46:01,849
here see which executions have been

1026
00:45:59,630 --> 00:46:05,089
running or which SSH users have tried to

1027
00:46:01,849 --> 00:46:07,579
log in and I'm not giving you the root

1028
00:46:05,089 --> 00:46:10,069
user but if you want to play around with

1029
00:46:07,579 --> 00:46:12,109
it this is the password and the user for

1030
00:46:10,069 --> 00:46:15,560
the regular access so you can just log

1031
00:46:12,109 --> 00:46:17,750
in and try some random stuff and see if

1032
00:46:15,560 --> 00:46:20,690
you can find that in the in the events

1033
00:46:17,750 --> 00:46:24,920
and I will delete that instance tomorrow

1034
00:46:20,690 --> 00:46:27,920
morning so yeah there shouldn't be too

1035
00:46:24,920 --> 00:46:30,230
much harm you can do but please don't

1036
00:46:27,920 --> 00:46:31,730
abuse the instance too much and by the

1037
00:46:30,230 --> 00:46:33,440
way I wanted to check to do it do we

1038
00:46:31,730 --> 00:46:44,180
have more ssh logging attempts from

1039
00:46:33,440 --> 00:46:46,490
finland now let's see and let's see how

1040
00:46:44,180 --> 00:46:55,640
good our geoip lookup is today because

1041
00:46:46,490 --> 00:46:58,419
that's always the question seems to be

1042
00:46:55,640 --> 00:46:58,420
pretty decent here

1043
00:47:00,580 --> 00:47:05,690
okay more or less you generally get the

1044
00:47:03,500 --> 00:47:09,470
idea if I'm not mistaken I think we were

1045
00:47:05,690 --> 00:47:13,400
about here or so we're slightly off but

1046
00:47:09,470 --> 00:47:16,910
at least this looks generally correct

1047
00:47:13,400 --> 00:47:22,160
I'm curious that was the wrong button

1048
00:47:16,910 --> 00:47:33,470
that's not what I wanted them come to me

1049
00:47:22,160 --> 00:47:35,240
I was curious which that's let's say

1050
00:47:33,470 --> 00:47:37,490
this this is where we what we're

1051
00:47:35,240 --> 00:47:41,359
interested in let's filter down on that

1052
00:47:37,490 --> 00:47:43,910
area and then I can see which usernames

1053
00:47:41,360 --> 00:47:46,100
you try it okay

1054
00:47:43,910 --> 00:47:49,790
and rocky seems to be in the house as

1055
00:47:46,100 --> 00:47:51,410
well so these are the ones the 27

1056
00:47:49,790 --> 00:47:54,140
locking attempts that you have tried

1057
00:47:51,410 --> 00:48:01,670
from this area and whatever your IP

1058
00:47:54,140 --> 00:48:03,740
addresses are okay if you want to take a

1059
00:48:01,670 --> 00:48:05,360
look at the code I mean this entire set

1060
00:48:03,740 --> 00:48:07,759
up is automated there is the terraform

1061
00:48:05,360 --> 00:48:09,470
stuff and the ansible configuration and

1062
00:48:07,760 --> 00:48:11,570
then the configuration files the thing

1063
00:48:09,470 --> 00:48:15,980
that you're probably most interested in

1064
00:48:11,570 --> 00:48:18,620
is the audit beat configuration which I

1065
00:48:15,980 --> 00:48:20,510
have in there as well so this is all

1066
00:48:18,620 --> 00:48:22,160
part of the repository you can just head

1067
00:48:20,510 --> 00:48:24,830
to the repository and check it out if

1068
00:48:22,160 --> 00:48:26,330
you want to give it a spin and this

1069
00:48:24,830 --> 00:48:28,000
should be pretty easy to reproduce on

1070
00:48:26,330 --> 00:48:31,730
any other system that you have as well

1071
00:48:28,000 --> 00:48:34,340
so that's the URL for that so if you

1072
00:48:31,730 --> 00:48:37,580
take the code from there you should get

1073
00:48:34,340 --> 00:48:41,480
this up and running in pretty much no

1074
00:48:37,580 --> 00:48:42,370
time and with that we have like 11

1075
00:48:41,480 --> 00:48:44,810
minutes left

1076
00:48:42,370 --> 00:48:46,160
time for questions also I have a bunch

1077
00:48:44,810 --> 00:48:48,740
of stickers over there if you want to

1078
00:48:46,160 --> 00:48:51,290
grab stickers be quick there might not

1079
00:48:48,740 --> 00:48:52,330
be enough for everybody any questions in

1080
00:48:51,290 --> 00:48:54,800
the room

1081
00:48:52,330 --> 00:48:56,420
otherwise I will had to slide off and I

1082
00:48:54,800 --> 00:48:59,930
have a very hard time seeing if anybody

1083
00:48:56,420 --> 00:49:03,770
has questions I think we have a question

1084
00:48:59,930 --> 00:49:05,000
over there thank you and while you're

1085
00:49:03,770 --> 00:49:06,950
getting while you're getting the

1086
00:49:05,000 --> 00:49:10,750
microphone let me have two slide oh as

1087
00:49:06,950 --> 00:49:13,210
well so we are not overlooking anybody

1088
00:49:10,750 --> 00:49:15,160
it's great to see some more

1089
00:49:13,210 --> 00:49:16,630
versions of this sort of technology but

1090
00:49:15,160 --> 00:49:18,368
there's a lot of commercial software

1091
00:49:16,630 --> 00:49:19,750
doing the same sort of things about a

1092
00:49:18,369 --> 00:49:21,220
lot of people who work in security

1093
00:49:19,750 --> 00:49:24,010
operation centers will be familiar with

1094
00:49:21,220 --> 00:49:25,540
things like carbon black Trend Micro

1095
00:49:24,010 --> 00:49:27,520
have deep inspect that there's quite a

1096
00:49:25,540 --> 00:49:29,440
lot how do you feel that this currently

1097
00:49:27,520 --> 00:49:35,770
compares with what's on the market from

1098
00:49:29,440 --> 00:49:41,400
from those commercial vendors so we

1099
00:49:35,770 --> 00:49:44,290
generally let's see what I can say now

1100
00:49:41,400 --> 00:49:46,780
let's let's just say like security will

1101
00:49:44,290 --> 00:49:49,630
be a big topic for us and we see that as

1102
00:49:46,780 --> 00:49:52,599
an opportunity to dive into lots of

1103
00:49:49,630 --> 00:49:56,250
other things I know that we are being

1104
00:49:52,599 --> 00:49:58,930
used for seem like use cases already

1105
00:49:56,250 --> 00:50:00,430
we'll probably try to get a bit more

1106
00:49:58,930 --> 00:50:02,500
into that space but it's a very wide

1107
00:50:00,430 --> 00:50:04,180
ecosystem and obviously there are a lot

1108
00:50:02,500 --> 00:50:05,920
of other vendors and a lot of commercial

1109
00:50:04,180 --> 00:50:08,500
vendors which have quite a head start on

1110
00:50:05,920 --> 00:50:09,309
us so we'll have to do some catching up

1111
00:50:08,500 --> 00:50:11,650
to do

1112
00:50:09,309 --> 00:50:13,180
but we'll try to do our best and we're

1113
00:50:11,650 --> 00:50:16,150
also trying to integrate with some other

1114
00:50:13,180 --> 00:50:19,540
tools for example if you had over to the

1115
00:50:16,150 --> 00:50:22,329
very first start page here you can see

1116
00:50:19,540 --> 00:50:24,160
we we are trying to get more security

1117
00:50:22,329 --> 00:50:27,309
analytics and this very things that we

1118
00:50:24,160 --> 00:50:30,009
are advertising here is generally we can

1119
00:50:27,309 --> 00:50:32,230
get net flow data for your firm then

1120
00:50:30,010 --> 00:50:35,079
your networking devices we tie into oils

1121
00:50:32,230 --> 00:50:36,880
query dope probably we will have some

1122
00:50:35,079 --> 00:50:39,400
native stuff that is very similar to

1123
00:50:36,880 --> 00:50:42,010
always query in beats as well soon and

1124
00:50:39,400 --> 00:50:43,869
we're playing around with the story

1125
00:50:42,010 --> 00:50:47,410
catalogs as well and try to integrate

1126
00:50:43,869 --> 00:50:49,059
into those as well and generally I mean

1127
00:50:47,410 --> 00:50:50,379
this is always the nice position that

1128
00:50:49,059 --> 00:50:52,990
you can take in open source is that

1129
00:50:50,380 --> 00:50:54,970
whatever you want to build you can do it

1130
00:50:52,990 --> 00:50:59,169
yourself because you have all the code

1131
00:50:54,970 --> 00:51:01,299
and you can just integrate into that but

1132
00:50:59,170 --> 00:51:03,010
like I said with the Lego bricks it's

1133
00:51:01,299 --> 00:51:05,079
more like stuff that you need to put

1134
00:51:03,010 --> 00:51:06,430
together we're not like this solution

1135
00:51:05,079 --> 00:51:08,049
that you buy and that's kind of the

1136
00:51:06,430 --> 00:51:10,149
final thing and it just works out of the

1137
00:51:08,049 --> 00:51:11,680
box it's giving you a much wider range

1138
00:51:10,150 --> 00:51:13,770
and you can integrate it in various

1139
00:51:11,680 --> 00:51:16,750
directions but it's probably a bit more

1140
00:51:13,770 --> 00:51:17,890
plumbing necessary but I would assume

1141
00:51:16,750 --> 00:51:20,500
that you're the right audience for

1142
00:51:17,890 --> 00:51:21,490
plumbing it don't get me wrong it's

1143
00:51:20,500 --> 00:51:23,280
better than some of the commercial

1144
00:51:21,490 --> 00:51:25,490
solutions I've seen by a big stretch

1145
00:51:23,280 --> 00:51:32,119
thanks a lot

1146
00:51:25,490 --> 00:51:33,979
any other questions okay while you can

1147
00:51:32,119 --> 00:51:37,000
think about that let let me head over to

1148
00:51:33,980 --> 00:51:39,980
questions I have seen here

1149
00:51:37,000 --> 00:51:49,099
okay bottom one is very good thank you

1150
00:51:39,980 --> 00:51:51,230
so yeah we have we have a file beet

1151
00:51:49,099 --> 00:51:54,380
module for always curious so if you have

1152
00:51:51,230 --> 00:51:56,450
always query installed you can collect

1153
00:51:54,380 --> 00:52:07,220
that so let me just quickly show that

1154
00:51:56,450 --> 00:52:09,799
file bit module OS query basically when

1155
00:52:07,220 --> 00:52:11,598
you run OS query it can create the logs

1156
00:52:09,800 --> 00:52:13,460
and then we have the file beet module

1157
00:52:11,599 --> 00:52:16,460
which can automatically collect that log

1158
00:52:13,460 --> 00:52:18,200
file so depending on what you have

1159
00:52:16,460 --> 00:52:19,609
activated here it will look something

1160
00:52:18,200 --> 00:52:20,990
like that where you see okay these are

1161
00:52:19,609 --> 00:52:22,640
my operating systems these are the

1162
00:52:20,990 --> 00:52:28,060
kernel versions these are all that the

1163
00:52:22,640 --> 00:52:30,920
packages that we have but we will also

1164
00:52:28,060 --> 00:52:33,020
soon enough have something where this

1165
00:52:30,920 --> 00:52:34,369
will be built into the beets directly so

1166
00:52:33,020 --> 00:52:36,109
you don't need to run always clear

1167
00:52:34,369 --> 00:52:38,030
yourself but if you want to run always

1168
00:52:36,109 --> 00:52:39,619
query you can totally do that just

1169
00:52:38,030 --> 00:52:41,390
generate the right logs with always

1170
00:52:39,619 --> 00:52:42,560
query and we will happily collect those

1171
00:52:41,390 --> 00:52:46,129
and we have even the pre-built

1172
00:52:42,560 --> 00:52:47,869
dashboards for you so you can just keep

1173
00:52:46,130 --> 00:52:49,339
using that and get an overview of what

1174
00:52:47,869 --> 00:52:54,130
you have running on your entire fleet of

1175
00:52:49,339 --> 00:52:54,130
machines based on the oil's query data I

1176
00:52:54,190 --> 00:53:01,280
think that was it for the questioners

1177
00:52:56,540 --> 00:53:05,839
here any other questions in the room we

1178
00:53:01,280 --> 00:53:09,500
have still seven minutes left I have a

1179
00:53:05,839 --> 00:53:11,779
very hard time seeing unfortunately for

1180
00:53:09,500 --> 00:53:13,640
multi-threading applications what's your

1181
00:53:11,780 --> 00:53:15,740
ability to distinguish between

1182
00:53:13,640 --> 00:53:21,680
multi-threaded applications and monitor

1183
00:53:15,740 --> 00:53:25,240
those you mean to distinguish the threat

1184
00:53:21,680 --> 00:53:25,240
would be a threading injection attack

1185
00:53:27,160 --> 00:53:32,930
I'm honestly not sure how well we would

1186
00:53:29,510 --> 00:53:36,140
handle that at the moment we I've never

1187
00:53:32,930 --> 00:53:39,350
seen how we would handle that to be

1188
00:53:36,140 --> 00:53:40,790
honest I'm not sure

1189
00:53:39,350 --> 00:53:42,410
maybe a quick search will give you

1190
00:53:40,790 --> 00:53:44,529
something or nothing at all then we

1191
00:53:42,410 --> 00:53:46,790
would be curious how that actually works

1192
00:53:44,530 --> 00:53:50,510
but I I don't know from the top of my

1193
00:53:46,790 --> 00:53:51,860
head to be honest well if there are no

1194
00:53:50,510 --> 00:53:54,140
other questions if you have any other

1195
00:53:51,860 --> 00:53:55,910
questions um also if you have like

1196
00:53:54,140 --> 00:53:58,310
general questions about our stack I'm

1197
00:53:55,910 --> 00:54:01,310
here happy to help with anything

1198
00:53:58,310 --> 00:54:03,529
I just find me afterwards and thanks a

1199
00:54:01,310 --> 00:54:05,779
lot oh by the way before you run out I'm

1200
00:54:03,530 --> 00:54:07,790
not sure if that will work out I try to

1201
00:54:05,780 --> 00:54:08,990
take a picture with you normally so I

1202
00:54:07,790 --> 00:54:11,270
can prove to my colleagues that I've

1203
00:54:08,990 --> 00:54:13,399
been working because they normally don't

1204
00:54:11,270 --> 00:54:14,180
know where I am I'm not sure if you will

1205
00:54:13,400 --> 00:54:18,980
be visible

1206
00:54:14,180 --> 00:54:24,160
let's see smile or not smile you don't

1207
00:54:18,980 --> 00:54:26,330
see me anyway that's better thank you

1208
00:54:24,160 --> 00:54:29,799
thanks now I can prove to my colleagues

1209
00:54:26,330 --> 00:54:29,799
that I've been working thanks a lot

1210
00:54:30,520 --> 00:54:35,719
[Music]

