1
00:00:04,320 --> 00:00:23,749
[Music]

2
00:00:29,360 --> 00:00:35,840
I love disobey my name is sayo frisk and

3
00:00:34,130 --> 00:00:38,570
today I'm going to show you live memory

4
00:00:35,840 --> 00:00:40,820
attacks and forensics I'm going to start

5
00:00:38,570 --> 00:00:43,580
with some line memory DMA direct memory

6
00:00:40,820 --> 00:00:47,120
access attacks with PC Ilyitch we are

7
00:00:43,580 --> 00:00:48,650
going to pen Linux and windows with DMA

8
00:00:47,120 --> 00:00:51,050
code injection we are going to mount

9
00:00:48,650 --> 00:00:53,480
their live file systems and spawn a

10
00:00:51,050 --> 00:00:55,669
system shell I will show you a live

11
00:00:53,480 --> 00:00:57,140
memory forensics with man proc FS and

12
00:00:55,670 --> 00:00:59,300
we'll have a look about what the man

13
00:00:57,140 --> 00:01:01,400
proc FS is and we'll go a little bit

14
00:00:59,300 --> 00:01:03,470
more in depth look at its capabilities

15
00:01:01,400 --> 00:01:05,390
it's designed the API and plug-in

16
00:01:03,470 --> 00:01:07,820
functionality throughout the

17
00:01:05,390 --> 00:01:09,320
presentation I will do demos live demos

18
00:01:07,820 --> 00:01:14,649
lots of live demos so let's hope

19
00:01:09,320 --> 00:01:17,780
everything is working they usually do um

20
00:01:14,650 --> 00:01:20,540
my name is Sol frisk I'm working as a

21
00:01:17,780 --> 00:01:22,700
pentose birthday and since couple of

22
00:01:20,540 --> 00:01:24,680
months ago I started working for

23
00:01:22,700 --> 00:01:27,530
internal IT at police in in Stockholm

24
00:01:24,680 --> 00:01:30,080
Sweden and I tried to do some security

25
00:01:27,530 --> 00:01:32,299
research by night as well I'm the author

26
00:01:30,080 --> 00:01:34,820
of the PCL each direct memory access

27
00:01:32,299 --> 00:01:36,710
attack toolkit which are presented at

28
00:01:34,820 --> 00:01:39,279
quite a few different cons before

29
00:01:36,710 --> 00:01:41,210
including Def Con blue hat and the CCC

30
00:01:39,280 --> 00:01:44,270
everything that I've been doing I've

31
00:01:41,210 --> 00:01:47,300
been doing as 100% open source and it

32
00:01:44,270 --> 00:01:49,250
really started back in 2016 when I found

33
00:01:47,300 --> 00:01:54,020
this really low-cost piece of hardware

34
00:01:49,250 --> 00:01:56,390
the USB 3380 and it had one side that

35
00:01:54,020 --> 00:01:58,250
was able to do the PCI Express and PCI

36
00:01:56,390 --> 00:02:00,440
Express is capable of direct memory

37
00:01:58,250 --> 00:02:02,870
access DMA that is reading and writing

38
00:02:00,440 --> 00:02:05,960
the memory of a target or if you want to

39
00:02:02,870 --> 00:02:08,300
call it the victim system and it also at

40
00:02:05,960 --> 00:02:10,128
the side that was able to do USB 3 that

41
00:02:08,300 --> 00:02:12,170
allowed me to control this device from a

42
00:02:10,128 --> 00:02:14,599
controlling computer and with this

43
00:02:12,170 --> 00:02:17,390
device I was able to do around 100

44
00:02:14,599 --> 00:02:20,238
megabytes per second DNA from the victim

45
00:02:17,390 --> 00:02:22,849
computer unfortunately if this device

46
00:02:20,239 --> 00:02:25,010
was only capable of addressing 32 bits

47
00:02:22,849 --> 00:02:27,018
and this meant that it was only able to

48
00:02:25,010 --> 00:02:29,030
read memorable or four gigs that was

49
00:02:27,019 --> 00:02:31,069
kind of boring but at that point in time

50
00:02:29,030 --> 00:02:33,349
back in 2016 that it didn't really

51
00:02:31,069 --> 00:02:35,450
matter because it was sufficiently per

52
00:02:33,349 --> 00:02:38,989
in most major operating systems anyway

53
00:02:35,450 --> 00:02:40,790
and but things change and computers that

54
00:02:38,990 --> 00:02:42,650
usually do have more than four gigs of

55
00:02:40,790 --> 00:02:43,160
memory so that's why I introduced a

56
00:02:42,650 --> 00:02:46,130
little bit

57
00:02:43,160 --> 00:02:48,859
two years ago public fpga-based DMA

58
00:02:46,130 --> 00:02:51,079
attacking at the CCC and now we're able

59
00:02:48,860 --> 00:02:53,390
to attack the whole memory space and

60
00:02:51,080 --> 00:02:57,380
read all memory of the computer pretty

61
00:02:53,390 --> 00:02:59,480
much so this is how my two tools that I

62
00:02:57,380 --> 00:03:01,640
will be talking here today about will

63
00:02:59,480 --> 00:03:04,130
relate to each other we have the PCI

64
00:03:01,640 --> 00:03:07,880
leech which is really focused on attacks

65
00:03:04,130 --> 00:03:10,340
and redeeming work and and we have the

66
00:03:07,880 --> 00:03:13,280
memory FS which is high-speed memory

67
00:03:10,340 --> 00:03:15,920
analysis and forensics they both use the

68
00:03:13,280 --> 00:03:18,290
same back-end library which allows me to

69
00:03:15,920 --> 00:03:21,410
capture physical memory from various

70
00:03:18,290 --> 00:03:23,870
kinds of memory sources and the hardware

71
00:03:21,410 --> 00:03:26,270
sources I can also use wimpy member

72
00:03:23,870 --> 00:03:29,000
ivorandkate your live memory from a

73
00:03:26,270 --> 00:03:32,170
running system or use various read

74
00:03:29,000 --> 00:03:35,380
various dump file formats memory dumps

75
00:03:32,170 --> 00:03:37,910
so let's do our first demo for today

76
00:03:35,380 --> 00:03:40,609
before we start getting into the

77
00:03:37,910 --> 00:03:43,609
specifics and let's have a look at Linux

78
00:03:40,610 --> 00:03:45,830
I'm going to use a hard word the

79
00:03:43,610 --> 00:03:49,220
screamer m2 board which is really a

80
00:03:45,830 --> 00:03:52,430
really small fpga board it's in the m

81
00:03:49,220 --> 00:03:54,950
2km form factor and there's one side

82
00:03:52,430 --> 00:03:59,660
that is PCI Express on one side as USB 3

83
00:03:54,950 --> 00:04:03,019
search allows me to do DMA and let's in

84
00:03:59,660 --> 00:04:05,720
Linux let's implant a kernel module into

85
00:04:03,020 --> 00:04:07,760
running kernel with the help of DMA and

86
00:04:05,720 --> 00:04:10,040
let's mount the filesystem and be at the

87
00:04:07,760 --> 00:04:14,230
mounted filesystem we're going to try to

88
00:04:10,040 --> 00:04:17,750
unlock the computer if you switch to the

89
00:04:14,230 --> 00:04:19,909
computer the other yeah there it is and

90
00:04:17,750 --> 00:04:21,769
this computer it's like a Kali Linux

91
00:04:19,910 --> 00:04:24,770
it's fairly recent it's not the most

92
00:04:21,769 --> 00:04:27,349
recent it's the 2019 4 version so we

93
00:04:24,770 --> 00:04:30,109
still have the routine Kali and it was a

94
00:04:27,350 --> 00:04:31,790
root and tour so but we pretend we don't

95
00:04:30,110 --> 00:04:36,550
know that the password restores which

96
00:04:31,790 --> 00:04:39,290
try to single a here press that button

97
00:04:36,550 --> 00:04:41,870
and as you can see we cannot or go to

98
00:04:39,290 --> 00:04:43,340
this computer this is very boring if you

99
00:04:41,870 --> 00:04:45,860
don't know the password it might be a

100
00:04:43,340 --> 00:04:50,090
better password and tour and so that's

101
00:04:45,860 --> 00:04:51,620
why we are inserting our FPGA device the

102
00:04:50,090 --> 00:04:54,169
one I showed you I'm going to use

103
00:04:51,620 --> 00:04:55,880
Express card here today for convenience

104
00:04:54,169 --> 00:04:56,870
I mean certainly in this distorted

105
00:04:55,880 --> 00:05:00,490
system and

106
00:04:56,870 --> 00:05:00,490
if you switch to my presenting computer

107
00:05:00,700 --> 00:05:05,210
awesome I'm going to load a kernel

108
00:05:03,350 --> 00:05:07,100
module into running Linux system if

109
00:05:05,210 --> 00:05:08,719
everything is working this is to have

110
00:05:07,100 --> 00:05:11,510
being able to read some memory at least

111
00:05:08,720 --> 00:05:13,220
third execution successfully inverted

112
00:05:11,510 --> 00:05:16,039
kernel module at this address and now I

113
00:05:13,220 --> 00:05:18,350
inserted a piece of turd into this

114
00:05:16,040 --> 00:05:20,480
running Linux system while the computer

115
00:05:18,350 --> 00:05:22,520
is locked and this is pretty much the

116
00:05:20,480 --> 00:05:24,230
default configuration for Kali by the

117
00:05:22,520 --> 00:05:27,409
way that this is possible if you do have

118
00:05:24,230 --> 00:05:30,740
this Express access so let's use this

119
00:05:27,410 --> 00:05:33,560
tournament oh in order to yeah mount

120
00:05:30,740 --> 00:05:35,060
live filesystem I'm going to specify in

121
00:05:33,560 --> 00:05:37,160
the mount command the address of this

122
00:05:35,060 --> 00:05:39,290
physical address of this kernel module

123
00:05:37,160 --> 00:05:42,980
that is loaded it says status mounted a

124
00:05:39,290 --> 00:05:47,750
Strad k so let's click into and do some

125
00:05:42,980 --> 00:05:49,640
point-and-click attacking and here in

126
00:05:47,750 --> 00:05:52,220
the root I do have a live Ram here

127
00:05:49,640 --> 00:05:54,229
mounted as files and and if you do you

128
00:05:52,220 --> 00:05:55,730
can just copy the files in Windows

129
00:05:54,230 --> 00:05:58,880
Explorer and you have a complete memory

130
00:05:55,730 --> 00:06:00,800
dump of this Kali Linux computer and in

131
00:05:58,880 --> 00:06:02,930
the files folder we see the root folder

132
00:06:00,800 --> 00:06:05,360
of the Linux system mounted and if since

133
00:06:02,930 --> 00:06:07,250
is the root folder I mean everything in

134
00:06:05,360 --> 00:06:09,410
Linux is pretty much a file so so you

135
00:06:07,250 --> 00:06:11,390
can actually copy the destroy if you do

136
00:06:09,410 --> 00:06:14,060
a cop in Windows Explorer of their best

137
00:06:11,390 --> 00:06:17,120
B for example and but let's not do that

138
00:06:14,060 --> 00:06:20,000
to you today let's go into you know it's

139
00:06:17,120 --> 00:06:22,280
not in this dev folder the etc' folder

140
00:06:20,000 --> 00:06:24,290
has some really interesting files and

141
00:06:22,280 --> 00:06:27,400
for example if we want to change the

142
00:06:24,290 --> 00:06:30,170
password we have the shadow file that's

143
00:06:27,400 --> 00:06:33,260
really special file in Linux and since

144
00:06:30,170 --> 00:06:35,180
we're running as kernel we do have like

145
00:06:33,260 --> 00:06:37,400
the highest privileges we have more

146
00:06:35,180 --> 00:06:41,020
privileges than root even here search

147
00:06:37,400 --> 00:06:52,280
and so we can read pretty much any file

148
00:06:41,020 --> 00:06:56,000
so let's open it in in notepad and here

149
00:06:52,280 --> 00:06:58,580
you see the root password and for for

150
00:06:56,000 --> 00:07:00,980
the root user or the root root hash it

151
00:06:58,580 --> 00:07:03,020
to be correct and you can take this hash

152
00:07:00,980 --> 00:07:05,120
and try to crack it in a hash cat for

153
00:07:03,020 --> 00:07:06,979
example and if you do have a really good

154
00:07:05,120 --> 00:07:09,890
password I mean you won't be able to

155
00:07:06,980 --> 00:07:10,129
crack it probably but it's much easier

156
00:07:09,890 --> 00:07:13,610
to

157
00:07:10,129 --> 00:07:16,099
just replaced the password hash of the

158
00:07:13,610 --> 00:07:18,139
password hash of the password of single

159
00:07:16,099 --> 00:07:21,739
ace let's do that it's a really long

160
00:07:18,139 --> 00:07:26,029
password hash but let's hit save here

161
00:07:21,739 --> 00:07:28,099
and let's close this notepad and

162
00:07:26,029 --> 00:07:30,379
actually I'm going to close this one as

163
00:07:28,099 --> 00:07:32,539
well and if switch back to the Linux

164
00:07:30,379 --> 00:07:32,959
computer to the computer yeah we have it

165
00:07:32,539 --> 00:07:35,119
on-screen

166
00:07:32,959 --> 00:07:37,729
it's the screen saver that's running

167
00:07:35,119 --> 00:07:39,679
here and you see if we have the password

168
00:07:37,729 --> 00:07:49,068
hash of single-a here if it's working

169
00:07:39,679 --> 00:07:55,089
every pass for us to do so if it's

170
00:07:49,069 --> 00:07:58,429
respect to representing computer also

171
00:07:55,089 --> 00:08:00,800
Linux security it can be really good or

172
00:07:58,429 --> 00:08:02,779
it can be really bad it's like totally

173
00:08:00,800 --> 00:08:07,069
dependent on this destroy your running

174
00:08:02,779 --> 00:08:09,110
and in most cases like more privacy

175
00:08:07,069 --> 00:08:11,089
focused destroys like cubes they're

176
00:08:09,110 --> 00:08:14,209
going to be by default totally secure

177
00:08:11,089 --> 00:08:19,039
against this other vanilla Linux distros

178
00:08:14,209 --> 00:08:21,699
might not always be and if you're like

179
00:08:19,039 --> 00:08:23,688
concerned I would still recommend like

180
00:08:21,699 --> 00:08:26,629
using hardware we're out there and the

181
00:08:23,689 --> 00:08:28,610
DMA porch like the easily accessible and

182
00:08:26,629 --> 00:08:31,069
always is always good to set the BIOS

183
00:08:28,610 --> 00:08:34,130
password you lock down your DMA portion

184
00:08:31,069 --> 00:08:36,849
DMA in bias or ufi if you're not using

185
00:08:34,130 --> 00:08:39,559
them and also having addy encrypt the

186
00:08:36,849 --> 00:08:41,479
phosphorus is always nice to have for

187
00:08:39,559 --> 00:08:43,399
security but really the long-term

188
00:08:41,479 --> 00:08:45,769
solution is to actually use some

189
00:08:43,399 --> 00:08:49,040
hardware in that is already existing

190
00:08:45,769 --> 00:08:51,560
within your computer it's like that immu

191
00:08:49,040 --> 00:08:53,389
and DVD which is a virtualization based

192
00:08:51,560 --> 00:08:55,609
security that what the operating system

193
00:08:53,389 --> 00:08:58,939
will start to use this and cubes do for

194
00:08:55,610 --> 00:09:03,610
example what makes this possible is the

195
00:08:58,939 --> 00:09:06,500
PCI Express direct memory access DMA and

196
00:09:03,610 --> 00:09:09,380
traditionally devices PC Express devices

197
00:09:06,500 --> 00:09:11,029
have been able to access the physical

198
00:09:09,380 --> 00:09:13,160
memory straight out without any

199
00:09:11,029 --> 00:09:14,120
restrictions and that since a really

200
00:09:13,160 --> 00:09:16,880
long time ago

201
00:09:14,120 --> 00:09:18,889
and that's really unlike code that

202
00:09:16,880 --> 00:09:19,990
you're executing on your CPU which

203
00:09:18,889 --> 00:09:22,639
usually

204
00:09:19,990 --> 00:09:23,160
executing virtual address space and in

205
00:09:22,639 --> 00:09:25,019
the border

206
00:09:23,160 --> 00:09:26,339
in virtual address space in physical

207
00:09:25,019 --> 00:09:28,529
address space you have a memory

208
00:09:26,339 --> 00:09:30,959
management unit that is doing the

209
00:09:28,529 --> 00:09:34,319
translation from virtual addresses into

210
00:09:30,959 --> 00:09:37,378
physical addresses and this is pretty

211
00:09:34,319 --> 00:09:39,479
much what upholds the security on all

212
00:09:37,379 --> 00:09:41,550
modern-day computing systems is this

213
00:09:39,480 --> 00:09:43,709
memory management unit you wouldn't be

214
00:09:41,550 --> 00:09:46,189
able to do like process isolation or

215
00:09:43,709 --> 00:09:49,109
hypervisors and things without this one

216
00:09:46,189 --> 00:09:51,599
but since around ten years ago there

217
00:09:49,110 --> 00:09:54,660
exists a memory management unit for

218
00:09:51,600 --> 00:09:58,019
devices as well in the hard work on most

219
00:09:54,660 --> 00:10:00,209
new CPUs but the operating systems and

220
00:09:58,019 --> 00:10:03,089
the firmer haven't really been using

221
00:10:00,209 --> 00:10:07,018
this iommu t's full extent in order to

222
00:10:03,089 --> 00:10:09,750
protect against a DMA attacks so if it's

223
00:10:07,019 --> 00:10:11,339
not used we can still do that text this

224
00:10:09,750 --> 00:10:13,560
Xpress comes in quite a few different

225
00:10:11,339 --> 00:10:15,480
form factors you have the standard PCI

226
00:10:13,560 --> 00:10:17,250
Express one to the lower left you have

227
00:10:15,480 --> 00:10:18,779
the mini PCI Express Express card for

228
00:10:17,250 --> 00:10:21,480
example that is starting to get a little

229
00:10:18,779 --> 00:10:23,550
bit of old nowadays Thunderbolt is

230
00:10:21,480 --> 00:10:26,129
pretty much external PCI Express and you

231
00:10:23,550 --> 00:10:28,319
do have the m2 Yuuki form factors which

232
00:10:26,129 --> 00:10:30,720
is more common nowadays you have the m2

233
00:10:28,319 --> 00:10:33,060
TM form factor for example which my

234
00:10:30,720 --> 00:10:35,279
attacking device has that form factor

235
00:10:33,060 --> 00:10:38,910
but also and then he drives it's really

236
00:10:35,279 --> 00:10:41,069
common so this is how it works on my

237
00:10:38,910 --> 00:10:43,199
analysis computer I do in software

238
00:10:41,069 --> 00:10:47,430
create a PCI Express transaction layer

239
00:10:43,199 --> 00:10:49,050
packet PCI Express is packet based so I

240
00:10:47,430 --> 00:10:51,388
create a memory read pack in this

241
00:10:49,050 --> 00:10:53,069
example I wrap it in some extra metadata

242
00:10:51,389 --> 00:10:57,329
fluff which allows me to transmit to

243
00:10:53,069 --> 00:11:00,089
over USB 3 onto word FPGA board once the

244
00:10:57,329 --> 00:11:02,219
PCI Express TLP reaches the FPGA board

245
00:11:00,089 --> 00:11:04,259
existed here comes a TLP let's put it on

246
00:11:02,220 --> 00:11:06,720
the PCI Express of the target system

247
00:11:04,259 --> 00:11:09,420
Express card in this example and once

248
00:11:06,720 --> 00:11:11,459
the TLP packet reaches the PCI Express

249
00:11:09,420 --> 00:11:13,439
route complex of the target victim

250
00:11:11,459 --> 00:11:15,329
system it's going to see that we want to

251
00:11:13,439 --> 00:11:17,040
do a memory read here so it will read

252
00:11:15,329 --> 00:11:18,779
the main memory and respond with the

253
00:11:17,040 --> 00:11:20,730
memory read in a completion packet

254
00:11:18,779 --> 00:11:23,610
containing the data which is transmitted

255
00:11:20,730 --> 00:11:27,420
back to the FPGA and that 2d analysis

256
00:11:23,610 --> 00:11:32,839
computer so let's have a look at windows

257
00:11:27,420 --> 00:11:35,670
as well let's execute some code and

258
00:11:32,839 --> 00:11:36,250
hopefully amount the target file system

259
00:11:35,670 --> 00:11:38,500
and

260
00:11:36,250 --> 00:11:43,080
that's if everything goes well it's all

261
00:11:38,500 --> 00:11:44,380
nice system shot as well so I'm going to

262
00:11:43,080 --> 00:11:46,720
yes

263
00:11:44,380 --> 00:11:50,260
switch to the attacker computer edit to

264
00:11:46,720 --> 00:11:53,650
Dave also and here I have a Windows

265
00:11:50,260 --> 00:11:56,260
running and shouldn't be and we tied to

266
00:11:53,650 --> 00:11:59,680
single password of a here again as you

267
00:11:56,260 --> 00:12:01,569
can see and we cannot log on on this

268
00:11:59,680 --> 00:12:03,609
user account on this Windows computer

269
00:12:01,570 --> 00:12:06,310
and this is the most recent Windows

270
00:12:03,610 --> 00:12:08,440
Windows 10 1909 unlike a pretty old

271
00:12:06,310 --> 00:12:10,569
laptop but I haven't been configure

272
00:12:08,440 --> 00:12:12,700
anything special so it's like a pretty

273
00:12:10,570 --> 00:12:15,450
much default install I had a bit Locker

274
00:12:12,700 --> 00:12:20,590
to it so just like but that's about it

275
00:12:15,450 --> 00:12:24,460
and let's change that so let's insert

276
00:12:20,590 --> 00:12:28,900
our FPGA device once again and switch

277
00:12:24,460 --> 00:12:32,770
back to representing computer and see if

278
00:12:28,900 --> 00:12:36,699
we can load a kernel module into running

279
00:12:32,770 --> 00:12:39,310
Windows System oh that was fast

280
00:12:36,700 --> 00:12:41,670
and the computer actually seems to be

281
00:12:39,310 --> 00:12:44,410
working still so that's kind of nice and

282
00:12:41,670 --> 00:12:46,990
so let's mount the filesystem of the

283
00:12:44,410 --> 00:12:48,760
Windows system and as we are using the

284
00:12:46,990 --> 00:12:51,970
kernel module we are running as kernel

285
00:12:48,760 --> 00:12:55,060
here so we should be able to see quite a

286
00:12:51,970 --> 00:12:56,610
lot in this windows file system you have

287
00:12:55,060 --> 00:12:59,829
a look at the root folder we see the

288
00:12:56,610 --> 00:13:01,720
memory as files as well if we here again

289
00:12:59,830 --> 00:13:04,120
if we want to copy but we can also click

290
00:13:01,720 --> 00:13:06,700
into the files folder and in the files

291
00:13:04,120 --> 00:13:08,589
folder we are able to click around here

292
00:13:06,700 --> 00:13:10,930
with the privileges file system

293
00:13:08,589 --> 00:13:12,310
privileges of kernel so we have a really

294
00:13:10,930 --> 00:13:15,640
high privilege so we can click into the

295
00:13:12,310 --> 00:13:17,650
users folder for example and we can spy

296
00:13:15,640 --> 00:13:19,420
on these files and with some interesting

297
00:13:17,650 --> 00:13:21,630
files here on the desktop or something

298
00:13:19,420 --> 00:13:21,630
like that

299
00:13:24,010 --> 00:13:32,000
and since I can also save the files I

300
00:13:29,300 --> 00:13:34,939
can obviously I can get execution by

301
00:13:32,000 --> 00:13:38,150
editing some files or or do other evil

302
00:13:34,940 --> 00:13:39,950
things here but it's more fun to spawn I

303
00:13:38,150 --> 00:13:42,770
system shell so let's do that to study

304
00:13:39,950 --> 00:13:45,710
testing this down and let's born as

305
00:13:42,770 --> 00:13:50,260
system shell instead so let's check who

306
00:13:45,710 --> 00:13:50,260
we are and your system here

307
00:13:52,090 --> 00:14:01,360
we're PC Express and this is a little

308
00:13:55,850 --> 00:14:04,910
bit unstable but let's try again yeah

309
00:14:01,360 --> 00:14:07,040
user user a is going to change the

310
00:14:04,910 --> 00:14:08,689
password net user and then I'm

311
00:14:07,040 --> 00:14:12,290
specifying the user account and then you

312
00:14:08,690 --> 00:14:15,470
password so copying that and starting

313
00:14:12,290 --> 00:14:24,020
the shell here all right sounds like me

314
00:14:15,470 --> 00:14:28,040
here today and switch to the Windows

315
00:14:24,020 --> 00:14:33,880
computer now and I'm trying to log on

316
00:14:28,040 --> 00:14:33,880
here let's see a password single a enter

317
00:14:39,970 --> 00:14:44,560
as respect to the presenting computer

318
00:14:44,920 --> 00:14:51,079
windows security in Windows 10 it's

319
00:14:47,570 --> 00:14:53,360
really dependent on your settings and

320
00:14:51,080 --> 00:14:55,580
your hardware and the configurations

321
00:14:53,360 --> 00:14:58,160
between the bat and I'm not going to go

322
00:14:55,580 --> 00:15:00,800
into detail here but windows can be made

323
00:14:58,160 --> 00:15:03,560
quite secure as well Microsoft in is

324
00:15:00,800 --> 00:15:06,079
investing a lot in virtualization based

325
00:15:03,560 --> 00:15:08,030
security and that includes the IO menu

326
00:15:06,080 --> 00:15:10,580
and the BTD we talked about earlier on

327
00:15:08,030 --> 00:15:12,980
and they also do things like on some

328
00:15:10,580 --> 00:15:15,250
piece express buses they disabled new

329
00:15:12,980 --> 00:15:17,300
DMA devices when the computer is locked

330
00:15:15,250 --> 00:15:20,780
and they also have things like

331
00:15:17,300 --> 00:15:22,790
hypervisor assisted code integrity that

332
00:15:20,780 --> 00:15:25,100
in some cases it will only allow me to

333
00:15:22,790 --> 00:15:27,230
read executable pages within the kernel

334
00:15:25,100 --> 00:15:29,210
but not bright to them which makes it a

335
00:15:27,230 --> 00:15:32,090
lot harder you also have like

336
00:15:29,210 --> 00:15:34,910
initiatives like secure core PC just

337
00:15:32,090 --> 00:15:36,760
released some months ago I think I

338
00:15:34,910 --> 00:15:39,579
haven't been able to take a look

339
00:15:36,760 --> 00:15:41,950
yeah but still if you're running Windows

340
00:15:39,580 --> 00:15:44,920
I would recommend you that you use a

341
00:15:41,950 --> 00:15:46,780
BitLocker pin and yes not only relying

342
00:15:44,920 --> 00:15:49,270
on the TPM in a water booting

343
00:15:46,780 --> 00:15:52,650
configuration having a pin there really

344
00:15:49,270 --> 00:15:55,270
makes a huge difference for an attacker

345
00:15:52,650 --> 00:15:57,819
let's talk about memory forensics as

346
00:15:55,270 --> 00:16:00,280
well let's talk about mem proc FS which

347
00:15:57,820 --> 00:16:02,320
is the memory process file system which

348
00:16:00,280 --> 00:16:04,990
is really memory forensics done in a

349
00:16:02,320 --> 00:16:07,330
completely new different way it's

350
00:16:04,990 --> 00:16:09,730
Windows we are heavily focused on

351
00:16:07,330 --> 00:16:12,010
windows it allows you to visualize in

352
00:16:09,730 --> 00:16:13,750
memory windows objects as files and

353
00:16:12,010 --> 00:16:16,150
folders in a virtual file systems

354
00:16:13,750 --> 00:16:18,070
it's multi-threaded it comes with a

355
00:16:16,150 --> 00:16:20,230
sequel and it has some really

356
00:16:18,070 --> 00:16:24,580
intelligent parsing in there which makes

357
00:16:20,230 --> 00:16:27,040
it super fast you can use both hardware

358
00:16:24,580 --> 00:16:29,320
based memory acquisition we just showed

359
00:16:27,040 --> 00:16:31,839
you but you can also analyze memory dump

360
00:16:29,320 --> 00:16:35,920
files for example or a choir live memory

361
00:16:31,840 --> 00:16:39,130
using drivers so why do you want to do

362
00:16:35,920 --> 00:16:39,459
memory forensics I mean this is my take

363
00:16:39,130 --> 00:16:42,490
on it

364
00:16:39,460 --> 00:16:44,530
in a real a few sentences here you might

365
00:16:42,490 --> 00:16:46,720
want to capture the running state of a

366
00:16:44,530 --> 00:16:49,209
system that includes like running

367
00:16:46,720 --> 00:16:51,330
processes to open network connections to

368
00:16:49,210 --> 00:16:54,510
like C&C servers and things like that

369
00:16:51,330 --> 00:16:56,890
because not everything resides on disk

370
00:16:54,510 --> 00:16:59,530
examples of things like that this might

371
00:16:56,890 --> 00:17:01,480
be like in memory malware in them are

372
00:16:59,530 --> 00:17:03,400
only malware that might not reside on

373
00:17:01,480 --> 00:17:05,709
this and you also have like crypto case

374
00:17:03,400 --> 00:17:07,329
for example BitLocker AES keys and

375
00:17:05,709 --> 00:17:10,780
things like that they're floating around

376
00:17:07,329 --> 00:17:12,790
in my memory so let's do a demo on the

377
00:17:10,780 --> 00:17:15,879
memory process filesystem and pro canvas

378
00:17:12,790 --> 00:17:16,780
we are going to mount 128 gigabytes in

379
00:17:15,880 --> 00:17:22,720
just a second

380
00:17:16,780 --> 00:17:24,730
or a few seconds so have a folder with

381
00:17:22,720 --> 00:17:28,089
dump files I have an umbrella

382
00:17:24,730 --> 00:17:30,550
corporation computer here just like 128

383
00:17:28,089 --> 00:17:31,990
gigabytes big here it's a quite big

384
00:17:30,550 --> 00:17:34,570
memory file if you don't memory

385
00:17:31,990 --> 00:17:36,610
forensics before you know that this

386
00:17:34,570 --> 00:17:39,149
might be a challenge to analyze so let's

387
00:17:36,610 --> 00:17:43,750
open it by double-clicking on it and

388
00:17:39,150 --> 00:17:46,240
it's just it's initialized and now I

389
00:17:43,750 --> 00:17:49,470
mounted the memory dump as files and

390
00:17:46,240 --> 00:17:49,470
folders in a virtual file system

391
00:17:50,730 --> 00:17:56,170
in the root folder you do see the

392
00:17:53,429 --> 00:17:57,610
physical memory it's really

393
00:17:56,170 --> 00:17:59,350
uninteresting in this case since we

394
00:17:57,610 --> 00:18:01,090
mounted the physical memory or a memory

395
00:17:59,350 --> 00:18:03,040
dump file so this file is going to be

396
00:18:01,090 --> 00:18:05,230
totally equal but if you're acquiring

397
00:18:03,040 --> 00:18:07,330
live memory from FPGA devices this might

398
00:18:05,230 --> 00:18:09,070
be super interesting also do

399
00:18:07,330 --> 00:18:11,020
automatically create win the bag

400
00:18:09,070 --> 00:18:15,760
compatible memory dump files so you can

401
00:18:11,020 --> 00:18:17,830
actually do win debugging on the raw

402
00:18:15,760 --> 00:18:19,629
memory RAM files or live memory as well

403
00:18:17,830 --> 00:18:25,030
if you do like that so let's try to run

404
00:18:19,630 --> 00:18:27,160
a command see if it's working yeah so

405
00:18:25,030 --> 00:18:30,460
it's like looking through a lot of

406
00:18:27,160 --> 00:18:31,780
things here you have a folder it's

407
00:18:30,460 --> 00:18:33,910
called system file which contains

408
00:18:31,780 --> 00:18:35,290
various kinds of information about the

409
00:18:33,910 --> 00:18:36,700
system for example the version

410
00:18:35,290 --> 00:18:39,340
information of the running Windows

411
00:18:36,700 --> 00:18:42,670
system we have a proc folder which

412
00:18:39,340 --> 00:18:45,220
contains like a process 3 information of

413
00:18:42,670 --> 00:18:48,010
the process they've repaired and the

414
00:18:45,220 --> 00:18:50,350
parent page and also which user is

415
00:18:48,010 --> 00:18:52,750
running this process and you see if he's

416
00:18:50,350 --> 00:18:55,120
learning like a local service system or

417
00:18:52,750 --> 00:18:58,080
or the use it since literally be like a

418
00:18:55,120 --> 00:19:01,330
John Smith the user on this system and

419
00:18:58,080 --> 00:19:03,159
we also have a berbils new view that

420
00:19:01,330 --> 00:19:05,260
contains a little bit more information

421
00:19:03,160 --> 00:19:07,300
we have like the path to the executable

422
00:19:05,260 --> 00:19:08,679
that the kernel sees and this is really

423
00:19:07,300 --> 00:19:11,379
interesting if you're doing like malware

424
00:19:08,679 --> 00:19:13,630
analysis because user mode malware

425
00:19:11,380 --> 00:19:16,600
cannot modify this because it's in the

426
00:19:13,630 --> 00:19:18,460
kernel and these two values below which

427
00:19:16,600 --> 00:19:20,949
might be some instances contain the

428
00:19:18,460 --> 00:19:23,100
command-line arguments that you smell so

429
00:19:20,950 --> 00:19:24,820
they might be a little bit more

430
00:19:23,100 --> 00:19:27,490
untrustworthy you have the network

431
00:19:24,820 --> 00:19:29,770
connections like a net stat view of

432
00:19:27,490 --> 00:19:32,260
things and you also see the process

433
00:19:29,770 --> 00:19:36,910
which is like having this network

434
00:19:32,260 --> 00:19:38,830
connection registry it's a huge part of

435
00:19:36,910 --> 00:19:41,050
Window System all all applications to

436
00:19:38,830 --> 00:19:43,780
order confirmations in there I do

437
00:19:41,050 --> 00:19:46,389
reconstruct the hive files it's like not

438
00:19:43,780 --> 00:19:48,580
going to be like a complete hive because

439
00:19:46,390 --> 00:19:51,100
not everything is actually residing in

440
00:19:48,580 --> 00:19:52,659
memory and some things might reside on

441
00:19:51,100 --> 00:19:55,449
disk but it's like I'm doing a

442
00:19:52,660 --> 00:19:58,240
best-effort reconstruction so it's

443
00:19:55,450 --> 00:20:00,880
pretty good that she'll if you can go

444
00:19:58,240 --> 00:20:02,260
into breach I've you can click into and

445
00:20:00,880 --> 00:20:03,100
they have a look at it in a file system

446
00:20:02,260 --> 00:20:04,509
but

447
00:20:03,100 --> 00:20:06,928
let's go into the machine hi and

448
00:20:04,509 --> 00:20:11,380
software and I think we have like

449
00:20:06,929 --> 00:20:13,720
microsoft windows currentversion run

450
00:20:11,380 --> 00:20:18,549
there's usually some interesting stuff

451
00:20:13,720 --> 00:20:20,230
in there and and and had the some value

452
00:20:18,549 --> 00:20:22,149
here that's called the security health

453
00:20:20,230 --> 00:20:24,130
that's going to be running when the

454
00:20:22,149 --> 00:20:25,719
computer starting is normal I had to

455
00:20:24,130 --> 00:20:28,929
rule of you that it's in the registry

456
00:20:25,720 --> 00:20:32,500
but I also have like text view for the

457
00:20:28,929 --> 00:20:34,000
UT to view in the easy way so it's like

458
00:20:32,500 --> 00:20:37,600
point-and-click memorize four and six

459
00:20:34,000 --> 00:20:39,759
and we can also go into like the users

460
00:20:37,600 --> 00:20:44,049
and we have the don't Smith user here

461
00:20:39,759 --> 00:20:45,370
and no we have in here in yeah we can

462
00:20:44,049 --> 00:20:47,080
click around the users we have the

463
00:20:45,370 --> 00:20:49,629
volatile environment for example which

464
00:20:47,080 --> 00:20:52,090
is going to be registered case that only

465
00:20:49,629 --> 00:20:54,850
exists in memory thinks that you will

466
00:20:52,090 --> 00:20:57,789
never find on disk things that are like

467
00:20:54,850 --> 00:21:00,100
virtual keys in memory only so you can

468
00:20:57,789 --> 00:21:03,179
analyze those ones as well you can see

469
00:21:00,100 --> 00:21:05,918
like things like user name and then

470
00:21:03,179 --> 00:21:09,100
logon server and things like this in in

471
00:21:05,919 --> 00:21:11,379
this case if you're more on the

472
00:21:09,100 --> 00:21:14,529
offensive side and want to do evil

473
00:21:11,379 --> 00:21:17,080
things and there's some good news I've

474
00:21:14,529 --> 00:21:19,389
got some awesome contributions from guy

475
00:21:17,080 --> 00:21:23,080
called scale sec which is making an

476
00:21:19,389 --> 00:21:27,158
open-source version of naming cats in

477
00:21:23,080 --> 00:21:29,889
python as a library and so you can

478
00:21:27,159 --> 00:21:32,230
actually use this pepper caste and its

479
00:21:29,889 --> 00:21:34,000
included as modules within this memory

480
00:21:32,230 --> 00:21:37,299
process file system as you need to

481
00:21:34,000 --> 00:21:38,980
download them separately but you can now

482
00:21:37,299 --> 00:21:40,418
this is a standalone computer so it

483
00:21:38,980 --> 00:21:42,309
won't have like the ticket granting

484
00:21:40,419 --> 00:21:45,639
ticket here but it will show up as files

485
00:21:42,309 --> 00:21:48,240
to your scope and we can do we can go in

486
00:21:45,639 --> 00:21:51,340
and have a look at other accounts and

487
00:21:48,240 --> 00:21:53,049
password hashes in some instances we can

488
00:21:51,340 --> 00:21:54,850
go into the reg secrets folder which

489
00:21:53,049 --> 00:21:57,970
contains more like the password hashes

490
00:21:54,850 --> 00:22:00,129
of the user stored in unlikely is in the

491
00:21:57,970 --> 00:22:02,259
standard format if you want to crack

492
00:22:00,129 --> 00:22:06,100
windows password hashes from the sand

493
00:22:02,259 --> 00:22:09,159
for example but most interestingly we do

494
00:22:06,100 --> 00:22:12,750
have a folder for each process as well

495
00:22:09,159 --> 00:22:16,900
it's all sorted by pit or sorted by name

496
00:22:12,750 --> 00:22:18,430
so let's click into the 7-zip process

497
00:22:16,900 --> 00:22:23,920
for example and do some analyzing of

498
00:22:18,430 --> 00:22:26,020
this one we have the total virtual

499
00:22:23,920 --> 00:22:27,520
memory as a file it's going to be syrup

500
00:22:26,020 --> 00:22:29,050
added if there is no virtual memory in

501
00:22:27,520 --> 00:22:31,570
that place but you can actually edit the

502
00:22:29,050 --> 00:22:33,909
virtual the virtual memory in your

503
00:22:31,570 --> 00:22:35,350
favorite text editor if you change stuff

504
00:22:33,910 --> 00:22:37,060
it's not going to work if you run

505
00:22:35,350 --> 00:22:38,379
against like a memory dump file which is

506
00:22:37,060 --> 00:22:40,030
going to be read only but if you're

507
00:22:38,380 --> 00:22:41,890
running against like live memory with

508
00:22:40,030 --> 00:22:42,520
the PCH for example you can write to it

509
00:22:41,890 --> 00:22:45,910
as well

510
00:22:42,520 --> 00:22:47,620
and for each memory segment we show you

511
00:22:45,910 --> 00:22:52,060
there's a separate file as well if you

512
00:22:47,620 --> 00:22:53,949
prefer that view and user information we

513
00:22:52,060 --> 00:22:55,600
have this seems to be John Smith is

514
00:22:53,950 --> 00:22:58,360
running this 7-zip

515
00:22:55,600 --> 00:22:59,820
we had said done a few other information

516
00:22:58,360 --> 00:23:02,290
about this one as well

517
00:22:59,820 --> 00:23:04,600
information about the threads and we

518
00:23:02,290 --> 00:23:06,010
have the stacks as far as both the

519
00:23:04,600 --> 00:23:07,719
current view of the stack and using a

520
00:23:06,010 --> 00:23:11,460
view of stacking you can edit these ones

521
00:23:07,720 --> 00:23:15,550
in your favorite tools as well and

522
00:23:11,460 --> 00:23:18,280
Python plugins as well and modules like

523
00:23:15,550 --> 00:23:20,110
every loaded dll you have in each

524
00:23:18,280 --> 00:23:21,639
process here you can click into it in

525
00:23:20,110 --> 00:23:25,419
the file system for example you can

526
00:23:21,640 --> 00:23:27,190
click into the executable the exe and we

527
00:23:25,420 --> 00:23:29,530
are going to see exported functions

528
00:23:27,190 --> 00:23:31,270
important functions we can actually have

529
00:23:29,530 --> 00:23:34,420
a look at text important functions you

530
00:23:31,270 --> 00:23:36,430
see which function read verses from

531
00:23:34,420 --> 00:23:39,360
which dll they are imported from and so

532
00:23:36,430 --> 00:23:42,790
on and we also can edit different

533
00:23:39,360 --> 00:23:46,469
sections in the loaded dll's in the

534
00:23:42,790 --> 00:23:49,450
y-axis and this is writable as well

535
00:23:46,470 --> 00:23:52,570
memory maps can be reconstructed by

536
00:23:49,450 --> 00:23:55,240
either this is by either something

537
00:23:52,570 --> 00:23:57,820
called virtual address descriptors VADs

538
00:23:55,240 --> 00:24:00,040
and it contains a lot of information

539
00:23:57,820 --> 00:24:02,439
it's like how Windows keeps track of it

540
00:24:00,040 --> 00:24:05,770
or we can work the actual page tables

541
00:24:02,440 --> 00:24:07,960
that the CPU uses when it's executing

542
00:24:05,770 --> 00:24:09,910
code or reading memory and this is

543
00:24:07,960 --> 00:24:11,710
interesting because malware has a really

544
00:24:09,910 --> 00:24:14,680
hard time of spoofing this so if it's

545
00:24:11,710 --> 00:24:17,170
malware wants to execute on the CPU it

546
00:24:14,680 --> 00:24:19,570
really needs to have an executable page

547
00:24:17,170 --> 00:24:21,670
within memory there's really no way of

548
00:24:19,570 --> 00:24:26,220
hiding from this because then the CPU

549
00:24:21,670 --> 00:24:26,220
wouldn't execute that piece of code

550
00:24:26,280 --> 00:24:30,149
handles is like whenever you open a

551
00:24:28,990 --> 00:24:33,300
thread process

552
00:24:30,150 --> 00:24:35,250
whatever registered key file windows is

553
00:24:33,300 --> 00:24:37,500
going to open handle you usually use

554
00:24:35,250 --> 00:24:40,020
like closed handle API call to close the

555
00:24:37,500 --> 00:24:42,810
handles information about those ones and

556
00:24:40,020 --> 00:24:48,120
various files constructed either from

557
00:24:42,810 --> 00:24:52,080
the handles or modules or buds and

558
00:24:48,120 --> 00:24:54,540
whatever and and it's this 7-zip is not

559
00:24:52,080 --> 00:24:57,030
really interesting but to be let's have

560
00:24:54,540 --> 00:25:02,460
a look at some other process we know

561
00:24:57,030 --> 00:25:13,200
that for example some of the SVC hosts

562
00:25:02,460 --> 00:25:15,360
are going to have let's yeah we are

563
00:25:13,200 --> 00:25:17,280
going to mount the drive in Ubuntu and

564
00:25:15,360 --> 00:25:21,300
Windows Linux is really nice by the way

565
00:25:17,280 --> 00:25:23,250
if you're going to do some stuff here we

566
00:25:21,300 --> 00:25:25,620
know that the SVC host and one of the

567
00:25:23,250 --> 00:25:29,420
SVC host is going to contain the event

568
00:25:25,620 --> 00:25:32,340
log files let's do like LS in Linux

569
00:25:29,420 --> 00:25:35,330
command prompt for this ones it seems to

570
00:25:32,340 --> 00:25:41,639
have some event files in process 1696

571
00:25:35,330 --> 00:25:48,169
so let's see if we go into names folder

572
00:25:41,640 --> 00:25:50,580
as we see Hurst 1696 it was files

573
00:25:48,170 --> 00:25:55,470
handles and here we see lots of event

574
00:25:50,580 --> 00:25:57,000
log files now I can't open this in event

575
00:25:55,470 --> 00:25:58,710
log viewer straight away since this

576
00:25:57,000 --> 00:26:01,710
wants to create the temp file but you

577
00:25:58,710 --> 00:26:04,950
can copy the file and now we can try to

578
00:26:01,710 --> 00:26:06,480
open it might take a short while we see

579
00:26:04,950 --> 00:26:08,040
that there seems to be some number of

580
00:26:06,480 --> 00:26:09,750
events in here for example and this is

581
00:26:08,040 --> 00:26:12,480
really interesting if doing memory

582
00:26:09,750 --> 00:26:15,120
forensics and it's usually not the whole

583
00:26:12,480 --> 00:26:16,980
event log file since it's only going to

584
00:26:15,120 --> 00:26:19,560
be partially in memory but the positive

585
00:26:16,980 --> 00:26:21,570
news is that the most recent data is

586
00:26:19,560 --> 00:26:22,860
actually going to be in memory so you

587
00:26:21,570 --> 00:26:25,290
can click around and have a look at the

588
00:26:22,860 --> 00:26:31,469
events here and this is acquired from

589
00:26:25,290 --> 00:26:33,770
the RAM of the target computer so how is

590
00:26:31,470 --> 00:26:33,770
it done

591
00:26:33,990 --> 00:26:37,740
first I want to say my overall design

592
00:26:35,910 --> 00:26:39,630
girls when I created this I wanted to

593
00:26:37,740 --> 00:26:43,419
have something that was super easy for

594
00:26:39,630 --> 00:26:45,579
everyone to use that I could use myself

595
00:26:43,419 --> 00:26:48,129
but I wanted it to be powerful still I

596
00:26:45,579 --> 00:26:50,168
wanted to have the design modular and

597
00:26:48,129 --> 00:26:52,748
have plug-in functionality to allow

598
00:26:50,169 --> 00:26:54,579
others to contribute plugins and other

599
00:26:52,749 --> 00:26:58,719
awesome functionality to this project

600
00:26:54,579 --> 00:27:01,539
and I wanted to add api's and since its

601
00:26:58,719 --> 00:27:03,820
candidacy it's going to be a capi and

602
00:27:01,539 --> 00:27:05,889
that's quite portable and but also

603
00:27:03,820 --> 00:27:07,658
Python is really popular within the

604
00:27:05,889 --> 00:27:09,668
security community but also the memory

605
00:27:07,659 --> 00:27:12,039
forensics community the other Python API

606
00:27:09,669 --> 00:27:14,109
as well and performance is super

607
00:27:12,039 --> 00:27:15,190
important and because when you're

608
00:27:14,109 --> 00:27:18,639
clicking around with the file system

609
00:27:15,190 --> 00:27:21,099
like this you really want to add this

610
00:27:18,639 --> 00:27:23,498
habit to feel like really quicken and

611
00:27:21,099 --> 00:27:25,029
nice like that so you don't have to wait

612
00:27:23,499 --> 00:27:29,529
for a couple of minutes for things to

613
00:27:25,029 --> 00:27:32,440
happen so how is it done I for the file

614
00:27:29,529 --> 00:27:35,169
system part I use a third-party library

615
00:27:32,440 --> 00:27:38,950
which is called dokkan it's like a super

616
00:27:35,169 --> 00:27:41,619
awesome user mode file system component

617
00:27:38,950 --> 00:27:44,499
for Windows that's able available as

618
00:27:41,619 --> 00:27:46,178
open source on github it takes care of

619
00:27:44,499 --> 00:27:49,299
the hard part shutters having like a

620
00:27:46,179 --> 00:27:51,309
file system driver in the kernel and all

621
00:27:49,299 --> 00:27:54,190
I need to do is to implement some really

622
00:27:51,309 --> 00:27:56,589
simple user mode callbacks in my memory

623
00:27:54,190 --> 00:27:58,690
process file system executable which is

624
00:27:56,589 --> 00:28:00,999
just a very thin wrapper around the main

625
00:27:58,690 --> 00:28:03,459
analysis library which is where all the

626
00:28:00,999 --> 00:28:06,129
memory analysis is taking place

627
00:28:03,459 --> 00:28:09,190
I do have plugins in both C and Python

628
00:28:06,129 --> 00:28:12,488
connected to this and also a Python API

629
00:28:09,190 --> 00:28:14,379
and in the backend side I use the leech

630
00:28:12,489 --> 00:28:16,479
core library in order to do physical

631
00:28:14,379 --> 00:28:19,509
memory acquisition from various range of

632
00:28:16,479 --> 00:28:21,549
devices so this is how they analysis

633
00:28:19,509 --> 00:28:24,190
libraries built on the very top I do

634
00:28:21,549 --> 00:28:26,739
have the API that all applications that

635
00:28:24,190 --> 00:28:28,719
want to use this is calling into and Inc

636
00:28:26,739 --> 00:28:31,509
that's including my memory process file

637
00:28:28,719 --> 00:28:34,629
system executable on the very bottom I

638
00:28:31,509 --> 00:28:36,909
do have a very simple layer of an object

639
00:28:34,629 --> 00:28:38,498
manager which allows me to keep track of

640
00:28:36,909 --> 00:28:41,379
things like object reference counting

641
00:28:38,499 --> 00:28:44,739
and this will allow me to do more easily

642
00:28:41,379 --> 00:28:46,570
be doing like multi-threading on top of

643
00:28:44,739 --> 00:28:48,759
that I have a layer of caches have a

644
00:28:46,570 --> 00:28:50,799
separate cache for physical memory and a

645
00:28:48,759 --> 00:28:52,809
separate cache for page tables and

646
00:28:50,799 --> 00:28:54,969
caching even the memory accesses might

647
00:28:52,809 --> 00:28:57,250
be really quick like below 1 millisecond

648
00:28:54,969 --> 00:28:59,620
for each access if I'm using this

649
00:28:57,250 --> 00:29:02,200
da for example if I'm doing thousands

650
00:28:59,620 --> 00:29:03,639
upon thousands upon thousands requests

651
00:29:02,200 --> 00:29:06,400
it's going to be really slow without

652
00:29:03,640 --> 00:29:10,000
that memory cache on right on top of

653
00:29:06,400 --> 00:29:13,000
that I have a virtual memory to physical

654
00:29:10,000 --> 00:29:15,400
memory translation layer which is going

655
00:29:13,000 --> 00:29:17,559
to be able to translate the different

656
00:29:15,400 --> 00:29:20,590
memory models that windows do supported

657
00:29:17,559 --> 00:29:23,350
32-bit once and a 64-bit one and also I

658
00:29:20,590 --> 00:29:25,658
do include like support for Windows 10

659
00:29:23,350 --> 00:29:28,510
compressed memory in here which is a

660
00:29:25,659 --> 00:29:30,760
nice thing to have and then I have the

661
00:29:28,510 --> 00:29:33,158
main analysis part I do various kinds of

662
00:29:30,760 --> 00:29:35,049
analysis in here I do have the notion of

663
00:29:33,159 --> 00:29:37,809
each process is going to be an object

664
00:29:35,049 --> 00:29:40,270
and each process is going to contain

665
00:29:37,809 --> 00:29:42,070
like what I call them Maps Israeli

666
00:29:40,270 --> 00:29:46,210
collections of other objects for example

667
00:29:42,070 --> 00:29:49,210
memory segments these Bad's dll's like

668
00:29:46,210 --> 00:29:52,030
loaded modules also have the plug-in

669
00:29:49,210 --> 00:29:54,250
manager external plugins we already

670
00:29:52,030 --> 00:29:56,970
talked a little bit about them and also

671
00:29:54,250 --> 00:30:00,070
I do have like internal built-in plugins

672
00:29:56,970 --> 00:30:01,870
which allows me to abstract some things

673
00:30:00,070 --> 00:30:03,850
in a nice way and also have some

674
00:30:01,870 --> 00:30:06,309
background threads in here that's doing

675
00:30:03,850 --> 00:30:10,120
like housekeeping tasks like refreshing

676
00:30:06,309 --> 00:30:12,789
the cache and things like that the leech

677
00:30:10,120 --> 00:30:15,459
core library it's used by both

678
00:30:12,789 --> 00:30:17,740
physiology and my octopus and its focus

679
00:30:15,460 --> 00:30:19,330
is physical memory reads and writes and

680
00:30:17,740 --> 00:30:21,010
it allows me to separate memory

681
00:30:19,330 --> 00:30:23,949
acquisition from analysis in a really

682
00:30:21,010 --> 00:30:27,158
nice way it used support B or Anil USB

683
00:30:23,950 --> 00:30:30,610
33a to debug the device that I used the

684
00:30:27,159 --> 00:30:33,280
FPGA devices you can acquire live memory

685
00:30:30,610 --> 00:30:35,649
using drivers from a running system

686
00:30:33,280 --> 00:30:39,520
I do support wimpy mem and dump it at

687
00:30:35,650 --> 00:30:41,289
the moment I do support acquiring memory

688
00:30:39,520 --> 00:30:43,059
were like reading memory from various

689
00:30:41,289 --> 00:30:45,400
dump files for example

690
00:30:43,059 --> 00:30:47,678
fulcrum files which is created by dump

691
00:30:45,400 --> 00:30:53,950
it for example but also raw memory dump

692
00:30:47,679 --> 00:30:55,450
files and hi to be save files about the

693
00:30:53,950 --> 00:30:58,059
year ago also got a really awesome

694
00:30:55,450 --> 00:31:00,220
contribution from sin active turns out

695
00:30:58,059 --> 00:31:03,220
if you have a really old HP ILO

696
00:31:00,220 --> 00:31:06,340
you might be vulnerable for some remote

697
00:31:03,220 --> 00:31:09,039
exploits against this HP ILO and if you

698
00:31:06,340 --> 00:31:09,419
run some old exploits against this you

699
00:31:09,039 --> 00:31:12,810
can

700
00:31:09,420 --> 00:31:15,330
implement or add likes in actives DMA

701
00:31:12,810 --> 00:31:18,810
backdoor into this HP ILO and then you

702
00:31:15,330 --> 00:31:20,189
can use delete for library in order to

703
00:31:18,810 --> 00:31:23,700
read and write memory of the target

704
00:31:20,190 --> 00:31:26,430
operating systems in there also I do

705
00:31:23,700 --> 00:31:28,620
support connecting to a remote leach for

706
00:31:26,430 --> 00:31:31,380
instance running as a service on a

707
00:31:28,620 --> 00:31:33,540
remote computer and if I'm doing that

708
00:31:31,380 --> 00:31:36,360
connections it by default is going to be

709
00:31:33,540 --> 00:31:38,430
secured by active directory by Kerberos

710
00:31:36,360 --> 00:31:41,370
it's going to be mutually authenticated

711
00:31:38,430 --> 00:31:44,070
connection which is encrypted and also

712
00:31:41,370 --> 00:31:45,810
compressed and once connected to this

713
00:31:44,070 --> 00:31:47,550
remote leased for instance I'm going to

714
00:31:45,810 --> 00:31:49,379
be able to use all the above EMA

715
00:31:47,550 --> 00:31:52,110
requisition methods but on the remote

716
00:31:49,380 --> 00:31:53,970
computer in most practices like I think

717
00:31:52,110 --> 00:31:57,000
they dump it and being pmm and purchase

718
00:31:53,970 --> 00:31:59,340
most interesting in the earth so let's

719
00:31:57,000 --> 00:32:02,130
do another demo let's do some light

720
00:31:59,340 --> 00:32:05,550
memory analysis and also alter the

721
00:32:02,130 --> 00:32:07,260
memory of a running system let's hunt

722
00:32:05,550 --> 00:32:09,659
for some data in the processing and

723
00:32:07,260 --> 00:32:16,080
that's over brought that data in the

724
00:32:09,660 --> 00:32:25,740
memory so yes if you switch back to the

725
00:32:16,080 --> 00:32:28,590
other computer here also and here I have

726
00:32:25,740 --> 00:32:30,360
this computer I don't have with the

727
00:32:28,590 --> 00:32:34,740
notepad started here or anything let's

728
00:32:30,360 --> 00:32:38,090
insert our video board into this one and

729
00:32:34,740 --> 00:32:43,910
switch back to representing computer

730
00:32:38,090 --> 00:32:50,970
let's mount the filesystem again

731
00:32:43,910 --> 00:32:52,920
so it's mounted switch awesome and here

732
00:32:50,970 --> 00:32:54,990
we have it in the names folder let's see

733
00:32:52,920 --> 00:32:57,300
if you have the notepad started we don't

734
00:32:54,990 --> 00:32:59,010
have a notepad here because we never

735
00:32:57,300 --> 00:33:01,490
started it so if we switch back to the

736
00:32:59,010 --> 00:33:04,740
windows the other computer awesome and

737
00:33:01,490 --> 00:33:07,080
we are going to start file here so hello

738
00:33:04,740 --> 00:33:10,530
this about switch back to the presenting

739
00:33:07,080 --> 00:33:13,710
computer and I'm going to do a refresh

740
00:33:10,530 --> 00:33:17,879
here and see if we notepad it's aperture

741
00:33:13,710 --> 00:33:19,560
and we think that the data hello disobey

742
00:33:17,880 --> 00:33:21,360
is going to be in the heap somewhere we

743
00:33:19,560 --> 00:33:23,460
have like stacks and hips in this the

744
00:33:21,360 --> 00:33:27,959
mem deed subdirectory

745
00:33:23,460 --> 00:33:30,720
so let's have a look at this so let's

746
00:33:27,960 --> 00:33:36,020
mount that in the Windows Linux and go

747
00:33:30,720 --> 00:33:39,180
into the VM MD folder of the notepad and

748
00:33:36,020 --> 00:33:40,710
have a look if you can find some heaps

749
00:33:39,180 --> 00:33:42,960
in there we can find a couple of heaps

750
00:33:40,710 --> 00:33:44,580
in there and we suspect the text is

751
00:33:42,960 --> 00:33:46,980
going to be on one of them so let's do

752
00:33:44,580 --> 00:33:51,330
string Sandeep's and we have one

753
00:33:46,980 --> 00:33:56,700
candidate so let's open that heap file

754
00:33:51,330 --> 00:33:59,010
in our hex editor and let's see if we

755
00:33:56,700 --> 00:34:01,350
can find that data and I'm going to

756
00:33:59,010 --> 00:34:03,540
search for the text in hex ASCII and

757
00:34:01,350 --> 00:34:05,879
it's going to be syrup added every

758
00:34:03,540 --> 00:34:07,860
second byte because of little utf-16

759
00:34:05,880 --> 00:34:11,160
little engine but we seems to have some

760
00:34:07,860 --> 00:34:14,060
texture hello this turbine so let's try

761
00:34:11,159 --> 00:34:14,060
to change that text

762
00:34:19,589 --> 00:34:25,248
to Helsinki and we're going to hit same

763
00:34:22,609 --> 00:34:28,649
want to save changes yes

764
00:34:25,248 --> 00:34:30,538
switch back to the other computer and it

765
00:34:28,649 --> 00:34:33,118
didn't change the texture that's a

766
00:34:30,539 --> 00:34:34,829
little bit boring but it's just because

767
00:34:33,119 --> 00:34:42,779
we need to click somewhere to update

768
00:34:34,829 --> 00:34:44,639
your frame buffer sir and and you can of

769
00:34:42,779 --> 00:34:46,649
course do this on like executable code

770
00:34:44,639 --> 00:34:50,389
as well and change it on the fly and and

771
00:34:46,649 --> 00:34:50,388
do interesting things like that

772
00:34:51,438 --> 00:34:57,779
so you can also use this for basic

773
00:34:55,469 --> 00:34:59,939
incident response with this remote agent

774
00:34:57,779 --> 00:35:01,499
I was talking about imagine if you do

775
00:34:59,939 --> 00:35:03,058
have a suspicious process on some

776
00:35:01,499 --> 00:35:06,180
computer and you might have warranted

777
00:35:03,059 --> 00:35:07,890
this computer to a quarantine VLAN but

778
00:35:06,180 --> 00:35:10,348
you might have really limited bandwidth

779
00:35:07,890 --> 00:35:12,479
and high latency to that remote network

780
00:35:10,349 --> 00:35:14,789
and a full memory dam might just take

781
00:35:12,479 --> 00:35:16,769
for ages the solution might be to

782
00:35:14,789 --> 00:35:19,829
retrieve only the memory actually need

783
00:35:16,769 --> 00:35:22,169
and analyze it with man proc FS or even

784
00:35:19,829 --> 00:35:24,150
better you can actually run the analysis

785
00:35:22,170 --> 00:35:27,150
on the remote computer by submitting a

786
00:35:24,150 --> 00:35:29,880
tiny Python script we have the Python

787
00:35:27,150 --> 00:35:31,319
API functionality you can do pretty much

788
00:35:29,880 --> 00:35:32,939
everything in this you can read them

789
00:35:31,319 --> 00:35:36,179
write memory both virtual memory and

790
00:35:32,939 --> 00:35:40,049
physical memory various process and

791
00:35:36,179 --> 00:35:42,479
modules information information about

792
00:35:40,049 --> 00:35:44,729
the registry and if you want to use like

793
00:35:42,479 --> 00:35:47,968
PDB files from Microsoft symbol servers

794
00:35:44,729 --> 00:35:50,669
you can do that as well and also you can

795
00:35:47,969 --> 00:35:52,499
read and write and list files in this

796
00:35:50,670 --> 00:35:54,269
virtual file system even the virtual

797
00:35:52,499 --> 00:35:56,399
file system is not mounted it would

798
00:35:54,269 --> 00:35:58,288
still reside within this analysis

799
00:35:56,400 --> 00:36:00,420
library and you can use the API to list

800
00:35:58,289 --> 00:36:03,390
files in these virtual directories read

801
00:36:00,420 --> 00:36:05,729
the files and write the files so let's

802
00:36:03,390 --> 00:36:07,379
do some remote malware analysis and

803
00:36:05,729 --> 00:36:09,419
analyze the live memory from a remotely

804
00:36:07,380 --> 00:36:14,189
infected system by clicking on files and

805
00:36:09,420 --> 00:36:16,170
using the Python the API so here I have

806
00:36:14,189 --> 00:36:18,868
a remote system it's like in the evil

807
00:36:16,170 --> 00:36:20,999
Corp it's it's in Active Directory

808
00:36:18,869 --> 00:36:24,779
domain here it's running on my computer

809
00:36:20,999 --> 00:36:27,629
I have a domain controller here but this

810
00:36:24,779 --> 00:36:29,279
this infected computer is really sad we

811
00:36:27,630 --> 00:36:31,199
suspected something wrong with this so

812
00:36:29,279 --> 00:36:32,950
and it's not going to be all the

813
00:36:31,199 --> 00:36:37,510
toolbars the user install

814
00:36:32,950 --> 00:36:39,879
here so but but we don't know if we have

815
00:36:37,510 --> 00:36:42,250
a blue team computer as well the blue

816
00:36:39,880 --> 00:36:50,050
team user that is logged on is actually

817
00:36:42,250 --> 00:36:53,740
an admin on this remote system so so

818
00:36:50,050 --> 00:36:55,720
let's try to install this remote agent

819
00:36:53,740 --> 00:36:57,459
to this remote systems I'm going to do a

820
00:36:55,720 --> 00:36:59,259
remote install and it's going to connect

821
00:36:57,460 --> 00:37:01,030
to the service manager and since I'm

822
00:36:59,260 --> 00:37:02,530
admin on that computer it will allow me

823
00:37:01,030 --> 00:37:04,780
to install a service in this computer

824
00:37:02,530 --> 00:37:07,510
and it's going to start like a listening

825
00:37:04,780 --> 00:37:09,550
on incoming TCP connections and this

826
00:37:07,510 --> 00:37:11,410
connection is going to be secured by

827
00:37:09,550 --> 00:37:13,420
Active Directory Kerberos and only

828
00:37:11,410 --> 00:37:17,618
administrators are allowed by default to

829
00:37:13,420 --> 00:37:19,089
connect to it now it can start the

830
00:37:17,619 --> 00:37:20,950
memory process file system against this

831
00:37:19,089 --> 00:37:23,170
remote computer and they're going to use

832
00:37:20,950 --> 00:37:28,450
the PMM driver wind PMON driver to do

833
00:37:23,170 --> 00:37:30,369
that so now we can click in there do

834
00:37:28,450 --> 00:37:33,009
memoryless is on the fly it's only going

835
00:37:30,369 --> 00:37:36,790
to acquire small amounts of memory from

836
00:37:33,010 --> 00:37:38,740
this remote computer as we go and we

837
00:37:36,790 --> 00:37:40,450
have an evil processor I know it since

838
00:37:38,740 --> 00:37:42,759
before this is not a friendly person

839
00:37:40,450 --> 00:37:47,078
system malware that I happened to infect

840
00:37:42,760 --> 00:37:49,960
this computer with on purpose and yeah

841
00:37:47,079 --> 00:37:51,849
but and we can do things like running

842
00:37:49,960 --> 00:37:53,710
typicals against this remote computer as

843
00:37:51,849 --> 00:38:00,599
well of course but let's have a look at

844
00:37:53,710 --> 00:38:00,599
the Python API instead let's open Python

845
00:38:05,600 --> 00:38:12,430
helps if I'm spelling it correctly so we

846
00:38:08,720 --> 00:38:15,109
are going to import the library and

847
00:38:12,430 --> 00:38:18,169
let's have a look at the funds tell the

848
00:38:15,110 --> 00:38:21,350
API calls we have quite a few of them

849
00:38:18,170 --> 00:38:22,640
here but we need first to initialize and

850
00:38:21,350 --> 00:38:26,029
now we are connecting to this remote

851
00:38:22,640 --> 00:38:27,980
agent and this remote agent is going to

852
00:38:26,030 --> 00:38:29,780
take like simultaneous connections so

853
00:38:27,980 --> 00:38:31,640
that's not really a problem the sisters

854
00:38:29,780 --> 00:38:34,040
we initialize the Windows system here

855
00:38:31,640 --> 00:38:36,379
select register train for example a pet

856
00:38:34,040 --> 00:38:40,460
of the explore dot exe and printed on

857
00:38:36,380 --> 00:38:42,080
the screen it seems to be this pit we

858
00:38:40,460 --> 00:38:44,660
can really press this information as

859
00:38:42,080 --> 00:38:46,490
well and for the for all processes and

860
00:38:44,660 --> 00:38:48,680
let's have a look at it for the Explorer

861
00:38:46,490 --> 00:38:51,200
pit we have some useful information here

862
00:38:48,680 --> 00:38:52,640
from this live memory that we are

863
00:38:51,200 --> 00:38:56,450
analyzing and you can analyze

864
00:38:52,640 --> 00:38:58,250
memorandums as well of course and if you

865
00:38:56,450 --> 00:38:59,660
want to have it look at all process

866
00:38:58,250 --> 00:39:03,500
information that's going to be a lot of

867
00:38:59,660 --> 00:39:05,060
information of course but now we can do

868
00:39:03,500 --> 00:39:07,820
with this information we can do a

869
00:39:05,060 --> 00:39:13,790
process listing of the processes in the

870
00:39:07,820 --> 00:39:17,330
active system yeah quite easily by

871
00:39:13,790 --> 00:39:19,310
coding a small Python line we can have a

872
00:39:17,330 --> 00:39:21,710
look at the memory map we are going to

873
00:39:19,310 --> 00:39:23,090
have a look at the Explorer memory map I

874
00:39:21,710 --> 00:39:25,160
mean going to have a look at entry

875
00:39:23,090 --> 00:39:27,740
number 300 since it was quite a few

876
00:39:25,160 --> 00:39:29,960
enforcing this memoir map so this seems

877
00:39:27,740 --> 00:39:32,060
to be like some entry it doesn't have

878
00:39:29,960 --> 00:39:35,360
like a special module assigned to it

879
00:39:32,060 --> 00:39:38,120
this is to be a read-only memory and we

880
00:39:35,360 --> 00:39:40,790
have the virtual address and some things

881
00:39:38,120 --> 00:39:44,750
like that but now we can write our small

882
00:39:40,790 --> 00:39:46,970
Python program so for each process we

883
00:39:44,750 --> 00:39:50,030
are going to iterate over the pit and

884
00:39:46,970 --> 00:39:51,740
the process information and for each

885
00:39:50,030 --> 00:39:53,450
process we are going to retrieve the

886
00:39:51,740 --> 00:39:54,950
memory map and for each entry in your

887
00:39:53,450 --> 00:39:58,730
memory map we're going to check if is

888
00:39:54,950 --> 00:40:00,230
read write execute memory and they're

889
00:39:58,730 --> 00:40:02,780
going to print it on the screen together

890
00:40:00,230 --> 00:40:05,630
with the pit and they're going to only

891
00:40:02,780 --> 00:40:06,980
be printing to an CRISPR process maximum

892
00:40:05,630 --> 00:40:09,230
since it would block the screen

893
00:40:06,980 --> 00:40:11,030
otherwise so now we are retrieving

894
00:40:09,230 --> 00:40:13,370
memory on the fly from the remote

895
00:40:11,030 --> 00:40:15,860
computer as we go and we were walking

896
00:40:13,370 --> 00:40:17,630
through all the page tables of all the

897
00:40:15,860 --> 00:40:19,190
processes in that target system and more

898
00:40:17,630 --> 00:40:21,140
orally completed

899
00:40:19,190 --> 00:40:23,150
and we cease to have some

900
00:40:21,140 --> 00:40:25,540
read/write/execute memory in our evil

901
00:40:23,150 --> 00:40:29,750
process here that you know for example

902
00:40:25,540 --> 00:40:31,490
and we can do things like retrieve a

903
00:40:29,750 --> 00:40:33,890
physical memory here as well

904
00:40:31,490 --> 00:40:40,549
virtual memory read memory if you want

905
00:40:33,890 --> 00:40:43,368
to do that so but imagine if this

906
00:40:40,550 --> 00:40:45,349
connection is it might be really slow

907
00:40:43,369 --> 00:40:47,180
and reading from this remote system

908
00:40:45,349 --> 00:40:49,910
latency issues it might be a problematic

909
00:40:47,180 --> 00:40:53,359
still even if we try retrieve like tiny

910
00:40:49,910 --> 00:40:55,790
tiny amount of data we might want to

911
00:40:53,359 --> 00:40:58,940
submit this analysis script to the

912
00:40:55,790 --> 00:41:02,480
remote computer instead so he's here it

913
00:40:58,940 --> 00:41:05,420
how it looks like and we can use the PCL

914
00:41:02,480 --> 00:41:07,720
each agent exit Python command in order

915
00:41:05,420 --> 00:41:12,410
to submit this to you this remote

916
00:41:07,720 --> 00:41:14,598
instance so now we sent the script

917
00:41:12,410 --> 00:41:16,160
remote toast and we are analyzing on to

918
00:41:14,599 --> 00:41:18,500
the remote toast it's going to spawn a

919
00:41:16,160 --> 00:41:20,000
child process do the memory analysis in

920
00:41:18,500 --> 00:41:22,160
there and simply have a local connection

921
00:41:20,000 --> 00:41:23,810
on that remote computer the infected

922
00:41:22,160 --> 00:41:32,509
computer is going to be super super fast

923
00:41:23,810 --> 00:41:35,390
and we already see the result here so

924
00:41:32,510 --> 00:41:37,510
another use case for my tools is

925
00:41:35,390 --> 00:41:39,828
something that I never anticipated

926
00:41:37,510 --> 00:41:44,569
myself I think it's a little bit funny

927
00:41:39,829 --> 00:41:46,069
but it's Hardware cheating in games it

928
00:41:44,569 --> 00:41:48,589
turns out that Auntie sheets are really

929
00:41:46,069 --> 00:41:50,690
powerful pieces of software that's tech

930
00:41:48,589 --> 00:41:52,970
most if not all software based sheets

931
00:41:50,690 --> 00:41:54,859
and a hardware sheet might only be seen

932
00:41:52,970 --> 00:41:56,720
as a PC Express device in the target

933
00:41:54,859 --> 00:41:58,369
system and you can you need to have PCI

934
00:41:56,720 --> 00:42:00,109
Express devices in order to do serious

935
00:41:58,369 --> 00:42:02,869
gaming you need to have graphics cards

936
00:42:00,109 --> 00:42:06,380
and things like that you can do things

937
00:42:02,869 --> 00:42:08,810
like the read-only tax like wall hex

938
00:42:06,380 --> 00:42:10,339
radar matta-clark sacks or if you're

939
00:42:08,810 --> 00:42:14,029
doing writing it might be a little bit

940
00:42:10,339 --> 00:42:16,549
more easily detectable and this is how

941
00:42:14,030 --> 00:42:18,560
it looked like back in 2018 when it was

942
00:42:16,550 --> 00:42:20,960
really popular it was like touted as

943
00:42:18,560 --> 00:42:23,180
undetectable sheeting within the gaming

944
00:42:20,960 --> 00:42:25,940
community for a short while at least and

945
00:42:23,180 --> 00:42:31,040
this is the PCI Express agreement device

946
00:42:25,940 --> 00:42:32,570
inserted in my gaming PC but it it's not

947
00:42:31,040 --> 00:42:34,160
really under testable it's

948
00:42:32,570 --> 00:42:37,130
was initially really easy to detect

949
00:42:34,160 --> 00:42:38,870
actually it took a while for the anti

950
00:42:37,130 --> 00:42:40,580
sheets to catch up but it's here which

951
00:42:38,870 --> 00:42:42,259
has a really really good anti sheet they

952
00:42:40,580 --> 00:42:45,020
catch it up kinda quickly and when they

953
00:42:42,260 --> 00:42:47,600
did and they started banning players of

954
00:42:45,020 --> 00:42:49,040
course they claimed that the prices for

955
00:42:47,600 --> 00:42:51,049
these sheets had been selling in around

956
00:42:49,040 --> 00:42:53,840
fifteen hundred to five thousand dollars

957
00:42:51,050 --> 00:42:58,940
my stuff is open source and I never saw

958
00:42:53,840 --> 00:43:00,470
a cent of this money but anyway and of

959
00:42:58,940 --> 00:43:02,330
course it resulted in a band rave about

960
00:43:00,470 --> 00:43:04,580
sheet customers and developers and

961
00:43:02,330 --> 00:43:06,920
initially it was really easy to detect

962
00:43:04,580 --> 00:43:09,650
because most of the was producing

963
00:43:06,920 --> 00:43:11,720
my standard FPGA bitstream switch has

964
00:43:09,650 --> 00:43:13,880
some like hard-coded device IDs in there

965
00:43:11,720 --> 00:43:15,680
which is really unique and if you have

966
00:43:13,880 --> 00:43:18,260
this device when you're playing C's

967
00:43:15,680 --> 00:43:19,940
there for example I mean you're 100

968
00:43:18,260 --> 00:43:22,730
percent cheater pretty much so it's like

969
00:43:19,940 --> 00:43:24,290
of course they got banned but they also

970
00:43:22,730 --> 00:43:25,880
claim that they're able to detect

971
00:43:24,290 --> 00:43:27,500
hardware-based sheets even then

972
00:43:25,880 --> 00:43:29,240
disguising the hardware sheet as a

973
00:43:27,500 --> 00:43:31,400
legitimate device I don't know if that's

974
00:43:29,240 --> 00:43:34,759
true in all cases but it certainly makes

975
00:43:31,400 --> 00:43:38,360
things a lot harder when I'm looking

976
00:43:34,760 --> 00:43:41,060
forward I won't add more functionality

977
00:43:38,360 --> 00:43:43,760
for the member ok FS I want to add more

978
00:43:41,060 --> 00:43:45,830
plugins and there's a local plug-in API

979
00:43:43,760 --> 00:43:47,930
there so if someone wants to help have

980
00:43:45,830 --> 00:43:50,600
an awesome idea for a plug-in it's like

981
00:43:47,930 --> 00:43:54,379
I would really like really really

982
00:43:50,600 --> 00:43:57,200
welcome plugins and but my prioritize I

983
00:43:54,380 --> 00:43:59,180
want to add like process mini dump files

984
00:43:57,200 --> 00:44:02,720
kind of soon I already had a full

985
00:43:59,180 --> 00:44:04,069
colonel crash dump file but I want to

986
00:44:02,720 --> 00:44:05,899
add like me to dump file for each

987
00:44:04,070 --> 00:44:06,770
process as well and I wanted to be

988
00:44:05,900 --> 00:44:09,770
analyzable

989
00:44:06,770 --> 00:44:12,020
in like window bag also add some better

990
00:44:09,770 --> 00:44:13,640
networking support like UDP connections

991
00:44:12,020 --> 00:44:18,980
I don't see them at the moment it's only

992
00:44:13,640 --> 00:44:20,690
TCP and also I think I need to add like

993
00:44:18,980 --> 00:44:23,090
background scanning of memory damn files

994
00:44:20,690 --> 00:44:24,590
because now I read memory as I go and

995
00:44:23,090 --> 00:44:28,850
live because that match is really quick

996
00:44:24,590 --> 00:44:30,170
but I will miss some things and if I'm

997
00:44:28,850 --> 00:44:32,089
doing like background scanning it

998
00:44:30,170 --> 00:44:36,170
shouldn't be affecting the user too much

999
00:44:32,090 --> 00:44:40,160
and if we're doing one pass and it could

1000
00:44:36,170 --> 00:44:41,780
run in the background and yeah and I

1001
00:44:40,160 --> 00:44:43,279
want to do things like page hashing

1002
00:44:41,780 --> 00:44:45,770
which would allow me to look up things

1003
00:44:43,280 --> 00:44:46,460
against an online database and also

1004
00:44:45,770 --> 00:44:48,650
recover up

1005
00:44:46,460 --> 00:44:51,109
artifacts that are missing I want to add

1006
00:44:48,650 --> 00:44:53,300
time lining and also try to recover

1007
00:44:51,109 --> 00:44:55,609
files from the master file table and

1008
00:44:53,300 --> 00:44:58,790
also add that API sort power shell and

1009
00:44:55,609 --> 00:45:00,230
c-sharp so when I'm looking as people

1010
00:44:58,790 --> 00:45:02,779
have been asking me about this one I

1011
00:45:00,230 --> 00:45:06,290
don't really like comparing my tools to

1012
00:45:02,780 --> 00:45:08,270
other tools and I think but people have

1013
00:45:06,290 --> 00:45:10,460
been asking so much about it so I think

1014
00:45:08,270 --> 00:45:12,410
volatility is really also memory

1015
00:45:10,460 --> 00:45:16,099
forensics is the industry standard for

1016
00:45:12,410 --> 00:45:17,660
it and I think my tools at the moment it

1017
00:45:16,099 --> 00:45:20,060
might be a compliment if you want to

1018
00:45:17,660 --> 00:45:22,910
take a quick look at things this is

1019
00:45:20,060 --> 00:45:25,220
quite fast obviously doing memory

1020
00:45:22,910 --> 00:45:26,920
forensics on other operating systems and

1021
00:45:25,220 --> 00:45:31,459
Windows my stuff is not an alternative

1022
00:45:26,920 --> 00:45:33,410
so and I tried to focus on an

1023
00:45:31,460 --> 00:45:35,240
easy-to-use file system that allows

1024
00:45:33,410 --> 00:45:38,359
pretty much everyone to click around in

1025
00:45:35,240 --> 00:45:39,799
it and you shouldn't be now be a happy

1026
00:45:38,359 --> 00:45:42,140
to know a lot about my more friend

1027
00:45:39,800 --> 00:45:45,250
16-bit wanted to do memory forensics but

1028
00:45:42,140 --> 00:45:47,270
I also have a C API and a Python API

1029
00:45:45,250 --> 00:45:51,140
volatility is more like come online

1030
00:45:47,270 --> 00:45:53,509
approach and but they coded in Python so

1031
00:45:51,140 --> 00:45:56,210
you can do a lot of stuff in Python as

1032
00:45:53,510 --> 00:45:59,080
well I do rely on fast efficient in

1033
00:45:56,210 --> 00:46:01,580
memory objects and parsing a lot

1034
00:45:59,080 --> 00:46:03,799
volatility it's it's the lift bit slower

1035
00:46:01,580 --> 00:46:06,950
but it's also more comprehensive in some

1036
00:46:03,800 --> 00:46:09,080
ways a memory scanning approaches but

1037
00:46:06,950 --> 00:46:11,180
it's like they catch a lot of things

1038
00:46:09,080 --> 00:46:14,180
that I miss and I catch actually catch

1039
00:46:11,180 --> 00:46:18,740
some things that they miss may be useful

1040
00:46:14,180 --> 00:46:20,899
tools and really what makes vamp rock F

1041
00:46:18,740 --> 00:46:23,598
is China I think is the integration with

1042
00:46:20,900 --> 00:46:27,920
the the PCL each live memory capture

1043
00:46:23,599 --> 00:46:29,570
with the FPGA devices and also that it

1044
00:46:27,920 --> 00:46:32,330
has like really transparent Windows 10

1045
00:46:29,570 --> 00:46:34,280
memory compression support volatility I

1046
00:46:32,330 --> 00:46:36,319
mean they have a huge support for a lot

1047
00:46:34,280 --> 00:46:40,730
of lots of plugins and functionality

1048
00:46:36,320 --> 00:46:43,420
that I will never so so like it's really

1049
00:46:40,730 --> 00:46:46,700
awesome to continue using that as well

1050
00:46:43,420 --> 00:46:47,390
but in order to sum everything up man

1051
00:46:46,700 --> 00:46:50,240
Proteus

1052
00:46:47,390 --> 00:46:52,279
is fast it's super fast it's easy to use

1053
00:46:50,240 --> 00:46:54,979
it's really point-and-click memory

1054
00:46:52,280 --> 00:46:58,010
forensics and acquisition you can't

1055
00:46:54,980 --> 00:46:59,800
capture memory using the memory dump

1056
00:46:58,010 --> 00:47:02,560
files you can actually and

1057
00:46:59,800 --> 00:47:04,780
memory dump files you can use the driver

1058
00:47:02,560 --> 00:47:05,470
approach with women being P mammogram

1059
00:47:04,780 --> 00:47:08,110
dump it

1060
00:47:05,470 --> 00:47:11,890
the FPGAs that I showed here today or

1061
00:47:08,110 --> 00:47:14,440
the remote agent plugins an API roll

1062
00:47:11,890 --> 00:47:16,210
your own plugins in C C++ or Python at

1063
00:47:14,440 --> 00:47:20,880
the moment and everything is 1/2 percent

1064
00:47:16,210 --> 00:47:29,699
open source and thank you

1065
00:47:20,880 --> 00:47:29,699
[Applause]

