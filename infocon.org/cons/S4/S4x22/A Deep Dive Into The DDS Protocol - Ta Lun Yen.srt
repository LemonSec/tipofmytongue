1
00:00:06,560 --> 00:00:09,599
uh hello everyone welcome to our talk

2
00:00:09,599 --> 00:00:10,800
um

3
00:00:10,800 --> 00:00:13,120
our talk is about a security divide into

4
00:00:13,120 --> 00:00:16,000
the dds security protocol

5
00:00:16,000 --> 00:00:18,720
we're here to show you how we break most

6
00:00:18,720 --> 00:00:21,039
of the major implementations and how we

7
00:00:21,039 --> 00:00:24,000
also break this back

8
00:00:24,320 --> 00:00:26,560
so our research team actually consists

9
00:00:26,560 --> 00:00:29,039
of tx people from gx1 networks and try

10
00:00:29,039 --> 00:00:31,519
micro research and also we have vendor

11
00:00:31,519 --> 00:00:34,800
corporations from editing ads

12
00:00:34,800 --> 00:00:38,399
so let's go through our slides

13
00:00:38,840 --> 00:00:42,149
[Music]

14
00:00:42,320 --> 00:00:43,040
so

15
00:00:43,040 --> 00:00:44,960
some of you might already know what is

16
00:00:44,960 --> 00:00:46,079
dds

17
00:00:46,079 --> 00:00:48,719
and in case some don't let's give you a

18
00:00:48,719 --> 00:00:50,960
quick overview of what is dds

19
00:00:50,960 --> 00:00:53,039
dds is basically a protocol with

20
00:00:53,039 --> 00:00:55,520
publisher and subscriber model

21
00:00:55,520 --> 00:00:57,280
and it's been used in numerous

22
00:00:57,280 --> 00:00:59,760
applications and you might as well

23
00:00:59,760 --> 00:01:02,239
already been using it

24
00:01:02,239 --> 00:01:04,879
without your knowledge

25
00:01:04,879 --> 00:01:07,040
for example there's an operating system

26
00:01:07,040 --> 00:01:09,280
used by robots called rust2 it runs on

27
00:01:09,280 --> 00:01:12,840
dds by default

28
00:01:12,960 --> 00:01:15,040
and where is it being used

29
00:01:15,040 --> 00:01:17,200
well dds is being used in multiple

30
00:01:17,200 --> 00:01:19,119
applications such as

31
00:01:19,119 --> 00:01:21,280
transportation

32
00:01:21,280 --> 00:01:23,360
and autonomous vehicles for

33
00:01:23,360 --> 00:01:25,680
transportation

34
00:01:25,680 --> 00:01:27,119
as an example

35
00:01:27,119 --> 00:01:28,960
we've seen many autonomous vehicles

36
00:01:28,960 --> 00:01:33,119
using dds for ecu inter communications

37
00:01:33,119 --> 00:01:36,159
and some vendors have been selling it to

38
00:01:36,159 --> 00:01:39,040
some high-speed trains

39
00:01:39,040 --> 00:01:42,000
and for robots like i said before

40
00:01:42,000 --> 00:01:44,720
ross2 uses dds by default

41
00:01:44,720 --> 00:01:47,439
and it's being used in aerospace

42
00:01:47,439 --> 00:01:49,680
and also healthcare is better within

43
00:01:49,680 --> 00:01:52,079
usage from ge healthcare

44
00:01:52,079 --> 00:01:55,119
and defense sector for example

45
00:01:55,119 --> 00:01:58,079
the cf c4 isr from a particular military

46
00:01:58,079 --> 00:01:59,600
uses dds

47
00:01:59,600 --> 00:02:01,920
and we've seen usage in missile silos

48
00:02:01,920 --> 00:02:04,320
almond aerial vehicles

49
00:02:04,320 --> 00:02:05,119
and

50
00:02:05,119 --> 00:02:08,160
missile launchers

51
00:02:08,160 --> 00:02:11,280
above naval muscles

52
00:02:12,400 --> 00:02:15,040
and let's have a quick overview

53
00:02:15,040 --> 00:02:18,480
about how to talk into each other in dds

54
00:02:18,480 --> 00:02:20,239
this is an example

55
00:02:20,239 --> 00:02:22,480
maybe in a factory like you're having a

56
00:02:22,480 --> 00:02:24,560
sensor and you want to talk to a control

57
00:02:24,560 --> 00:02:25,840
app

58
00:02:25,840 --> 00:02:27,840
so you want to implement a publisher on

59
00:02:27,840 --> 00:02:29,840
the sensor and a subscriber on the

60
00:02:29,840 --> 00:02:31,360
controller

61
00:02:31,360 --> 00:02:33,280
then you should define something called

62
00:02:33,280 --> 00:02:34,480
a topic

63
00:02:34,480 --> 00:02:36,560
to define the message types

64
00:02:36,560 --> 00:02:38,319
and the message types can be very

65
00:02:38,319 --> 00:02:40,800
complex and can even contain binary data

66
00:02:40,800 --> 00:02:43,200
like this

67
00:02:44,879 --> 00:02:48,000
and most of dds implementations they are

68
00:02:48,000 --> 00:02:52,239
configurated with xml files

69
00:02:55,440 --> 00:02:58,239
if you like more code than just talk

70
00:02:58,239 --> 00:03:00,400
then this page will be for you this is

71
00:03:00,400 --> 00:03:03,680
an example for how you're using dds

72
00:03:03,680 --> 00:03:06,640
as a publisher

73
00:03:06,640 --> 00:03:08,560
for subscribers you're doing the things

74
00:03:08,560 --> 00:03:10,800
up the opposite way but the general idea

75
00:03:10,800 --> 00:03:11,840
is still

76
00:03:11,840 --> 00:03:14,640
is still the same

77
00:03:16,000 --> 00:03:18,879
so we can say dds is a simple protocol

78
00:03:18,879 --> 00:03:23,040
it has publisher and subscriber models

79
00:03:25,120 --> 00:03:28,080
and our focus our research focus on ddsi

80
00:03:28,080 --> 00:03:29,360
rtps

81
00:03:29,360 --> 00:03:32,159
i emphasize on the word rtps is because

82
00:03:32,159 --> 00:03:35,280
dds can work over many mediums such as

83
00:03:35,280 --> 00:03:38,000
using dds over cambus

84
00:03:38,000 --> 00:03:40,400
as long as the underlying protocols

85
00:03:40,400 --> 00:03:42,400
underlying layers are provided you can

86
00:03:42,400 --> 00:03:46,280
use dds on it

87
00:03:47,440 --> 00:03:49,440
so let's go through the journey of our

88
00:03:49,440 --> 00:03:52,079
analysis

89
00:03:52,640 --> 00:03:53,840
well

90
00:03:53,840 --> 00:03:56,480
what's wrong with dds i must say that

91
00:03:56,480 --> 00:03:58,720
something must have gone wrong otherwise

92
00:03:58,720 --> 00:04:00,879
i wouldn't be here and

93
00:04:00,879 --> 00:04:02,799
talking to you

94
00:04:02,799 --> 00:04:05,599
so in this research we actually

95
00:04:05,599 --> 00:04:07,840
evaluated against six major dds

96
00:04:07,840 --> 00:04:09,599
implementations

97
00:04:09,599 --> 00:04:13,040
and we somehow broke them all and we

98
00:04:13,040 --> 00:04:15,360
also broke the specification in a

99
00:04:15,360 --> 00:04:17,840
process

100
00:04:20,238 --> 00:04:23,040
and in the beginning of our research

101
00:04:23,040 --> 00:04:25,280
we actually thinking about what we want

102
00:04:25,280 --> 00:04:27,600
to see and what we want to find in this

103
00:04:27,600 --> 00:04:28,800
research

104
00:04:28,800 --> 00:04:30,560
so we're looking for protocol

105
00:04:30,560 --> 00:04:33,440
specification box it's because when you

106
00:04:33,440 --> 00:04:35,120
broke this back you broke all the

107
00:04:35,120 --> 00:04:37,280
implementations

108
00:04:37,280 --> 00:04:40,639
and for remote executions it's pretty

109
00:04:40,639 --> 00:04:42,400
obvious because you can take over

110
00:04:42,400 --> 00:04:44,800
devices remotely using this

111
00:04:44,800 --> 00:04:46,320
and for denial of service

112
00:04:46,320 --> 00:04:48,960
vulnerabilities well because dds is

113
00:04:48,960 --> 00:04:50,880
mostly used in time

114
00:04:50,880 --> 00:04:52,240
sensitive

115
00:04:52,240 --> 00:04:55,280
applications so any breakage will result

116
00:04:55,280 --> 00:04:58,720
in great impact

117
00:04:58,720 --> 00:05:01,280
for leakage for key materials we're

118
00:05:01,280 --> 00:05:02,720
looking for something similar to

119
00:05:02,720 --> 00:05:04,080
heartbleed

120
00:05:04,080 --> 00:05:06,000
because that would enable us to extract

121
00:05:06,000 --> 00:05:08,320
secrets from the other side

122
00:05:08,320 --> 00:05:11,759
and for outdated dependencies

123
00:05:11,759 --> 00:05:14,240
because we already know that ics people

124
00:05:14,240 --> 00:05:16,479
they really don't like to patch

125
00:05:16,479 --> 00:05:17,840
so there's a

126
00:05:17,840 --> 00:05:19,440
great possibility that they will use

127
00:05:19,440 --> 00:05:21,440
something very old and allows us to

128
00:05:21,440 --> 00:05:24,919
exploit it

129
00:05:25,919 --> 00:05:28,160
and for our impact we actually found

130
00:05:28,160 --> 00:05:29,840
multiple vulnerabilities across these

131
00:05:29,840 --> 00:05:32,080
six major implementations such as buffer

132
00:05:32,080 --> 00:05:34,479
overall attacks resource exhaustion and

133
00:05:34,479 --> 00:05:36,479
denial of service

134
00:05:36,479 --> 00:05:38,560
and our research actually made a pretty

135
00:05:38,560 --> 00:05:41,039
large ban a pretty loud beam even before

136
00:05:41,039 --> 00:05:42,880
we gave a talk first time in black hat

137
00:05:42,880 --> 00:05:44,400
because we have a

138
00:05:44,400 --> 00:05:45,680
advisory

139
00:05:45,680 --> 00:05:48,880
from ics cert thanks to them that we

140
00:05:48,880 --> 00:05:50,400
have a

141
00:05:50,400 --> 00:05:52,320
chance to remind people to update their

142
00:05:52,320 --> 00:05:53,680
systems

143
00:05:53,680 --> 00:05:55,919
and also we found one network refreshing

144
00:05:55,919 --> 00:05:58,240
attack in the specification

145
00:05:58,240 --> 00:06:01,360
this vulnerability has been reported to

146
00:06:01,360 --> 00:06:04,000
the dds consortium and might be fixed in

147
00:06:04,000 --> 00:06:07,080
the future

148
00:06:07,919 --> 00:06:09,280
so

149
00:06:09,280 --> 00:06:12,240
we go on and tell you how about we broke

150
00:06:12,240 --> 00:06:15,199
all the targets

151
00:06:16,000 --> 00:06:18,000
despite the title of this diet it's

152
00:06:18,000 --> 00:06:20,720
called foster universe but we did code

153
00:06:20,720 --> 00:06:22,400
review in parallel

154
00:06:22,400 --> 00:06:23,520
well

155
00:06:23,520 --> 00:06:26,000
but that dds implementation they tend to

156
00:06:26,000 --> 00:06:28,880
be very big and complex so

157
00:06:28,880 --> 00:06:30,639
we initially thought that code review

158
00:06:30,639 --> 00:06:32,800
would be pretty useless but if

159
00:06:32,800 --> 00:06:35,840
it has proven otherwise

160
00:06:36,080 --> 00:06:37,840
in our first attempt we actually use

161
00:06:37,840 --> 00:06:39,759
airflow plusbox in conjunction with

162
00:06:39,759 --> 00:06:42,639
unicorn engine

163
00:06:42,720 --> 00:06:46,479
and this is very useful because

164
00:06:46,639 --> 00:06:48,800
in before we will assume that frozen

165
00:06:48,800 --> 00:06:51,600
binaries are very inefficient and kind

166
00:06:51,600 --> 00:06:53,199
of impossible

167
00:06:53,199 --> 00:06:55,120
but with this combination we can fix

168
00:06:55,120 --> 00:06:58,160
even coastal binaries and retain control

169
00:06:58,160 --> 00:06:59,919
over program state

170
00:06:59,919 --> 00:07:01,520
while returning retaining

171
00:07:01,520 --> 00:07:04,319
instrumentation abilities so we can

172
00:07:04,319 --> 00:07:08,000
complete the files and binary program

173
00:07:08,000 --> 00:07:10,240
and in our frozen campaign we focus on

174
00:07:10,240 --> 00:07:13,120
network issues because network stack is

175
00:07:13,120 --> 00:07:15,840
the first place any network data goes in

176
00:07:15,840 --> 00:07:18,000
and it's coming from an untrusted source

177
00:07:18,000 --> 00:07:20,960
making it as great fusing target

178
00:07:20,960 --> 00:07:23,280
and it's pretty obvious for deserializer

179
00:07:23,280 --> 00:07:25,759
and serializers because we already know

180
00:07:25,759 --> 00:07:28,319
that humanity always failed to build a

181
00:07:28,319 --> 00:07:31,800
secure serializer

182
00:07:32,639 --> 00:07:35,599
and for our fuzzing platform

183
00:07:35,599 --> 00:07:37,440
in the process of this research we

184
00:07:37,440 --> 00:07:39,440
unscientifically found out that using

185
00:07:39,440 --> 00:07:42,400
amd machines can greatly save your time

186
00:07:42,400 --> 00:07:43,680
and your money

187
00:07:43,680 --> 00:07:45,599
we somehow find out that using amd

188
00:07:45,599 --> 00:07:47,039
machines are

189
00:07:47,039 --> 00:07:49,919
having like two times faster performance

190
00:07:49,919 --> 00:07:52,479
than fuzzy intel machines

191
00:07:52,479 --> 00:07:54,879
however we did not go deeper

192
00:07:54,879 --> 00:07:57,199
about the reason behind this in this

193
00:07:57,199 --> 00:07:59,840
research

194
00:08:00,879 --> 00:08:03,360
and how do you find serializer targets

195
00:08:03,360 --> 00:08:04,720
well

196
00:08:04,720 --> 00:08:07,280
you can use dynamic analysis to find out

197
00:08:07,280 --> 00:08:10,080
that how the function is being called

198
00:08:10,080 --> 00:08:12,560
and trying to mimic the functionality in

199
00:08:12,560 --> 00:08:15,120
your file in your files in campaign

200
00:08:15,120 --> 00:08:18,319
or you can use that you can use static

201
00:08:18,319 --> 00:08:21,039
analysis and to manually find for

202
00:08:21,039 --> 00:08:23,680
a couple of gimmicks while parsing the

203
00:08:23,680 --> 00:08:25,360
headers from

204
00:08:25,360 --> 00:08:27,840
dds

205
00:08:28,800 --> 00:08:30,639
and how to find a file how to find a

206
00:08:30,639 --> 00:08:32,799
parser well

207
00:08:32,799 --> 00:08:35,200
because dds is a

208
00:08:35,200 --> 00:08:37,519
protocol and it has numerous type and

209
00:08:37,519 --> 00:08:40,880
fields so it means that there must be a

210
00:08:40,880 --> 00:08:42,080
parser

211
00:08:42,080 --> 00:08:44,800
and because a parser is usually complex

212
00:08:44,800 --> 00:08:46,800
and big

213
00:08:46,800 --> 00:08:51,040
it makes it a very good fusing target

214
00:08:52,959 --> 00:08:56,160
so very early on into our fuzzing

215
00:08:56,160 --> 00:08:58,560
campaign we actually found out numerous

216
00:08:58,560 --> 00:09:00,080
vulnerabilities

217
00:09:00,080 --> 00:09:03,920
so as shown here is actually one cvs

218
00:09:03,920 --> 00:09:06,240
we reported to the vendor this is a

219
00:09:06,240 --> 00:09:09,600
denial of service vulnerability

220
00:09:09,600 --> 00:09:12,720
this is actually caused by this specific

221
00:09:12,720 --> 00:09:16,320
vendor which failed to implement

222
00:09:16,320 --> 00:09:19,279
input sanitization and also failed to

223
00:09:19,279 --> 00:09:21,120
implement a proper

224
00:09:21,120 --> 00:09:23,200
error handling scheme

225
00:09:23,200 --> 00:09:26,880
so when you send this

226
00:09:27,040 --> 00:09:29,120
junk looking material to this

227
00:09:29,120 --> 00:09:30,880
implementation it will crash it

228
00:09:30,880 --> 00:09:33,600
immediately

229
00:09:34,720 --> 00:09:37,920
and deeper into our fuzzing campaign

230
00:09:37,920 --> 00:09:40,399
well because we already know so much

231
00:09:40,399 --> 00:09:43,360
from the spec at that point so sometimes

232
00:09:43,360 --> 00:09:45,839
you will just develop an instinct that

233
00:09:45,839 --> 00:09:47,920
you know you can break something by

234
00:09:47,920 --> 00:09:51,360
manually changing something

235
00:09:51,360 --> 00:09:53,760
so in this case we unfortunately broke

236
00:09:53,760 --> 00:09:55,120
this back by

237
00:09:55,120 --> 00:09:56,800
changing this one

238
00:09:56,800 --> 00:09:59,360
we did something very funny such as

239
00:09:59,360 --> 00:10:02,720
changing id around changing bit fields

240
00:10:02,720 --> 00:10:05,360
around changing length and port

241
00:10:05,360 --> 00:10:08,959
and what we did is we

242
00:10:08,959 --> 00:10:11,519
one time that we just turn on the

243
00:10:11,519 --> 00:10:12,880
dissector

244
00:10:12,880 --> 00:10:15,760
and see there's an ip address field so

245
00:10:15,760 --> 00:10:18,480
we decided to change ib address to some

246
00:10:18,480 --> 00:10:20,079
random victims

247
00:10:20,079 --> 00:10:22,079
such as

248
00:10:22,079 --> 00:10:24,959
using google dns as a victim

249
00:10:24,959 --> 00:10:27,440
then it turns out that we actually found

250
00:10:27,440 --> 00:10:28,240
a

251
00:10:28,240 --> 00:10:30,240
reflected attack

252
00:10:30,240 --> 00:10:32,880
it kind of scared us because we're using

253
00:10:32,880 --> 00:10:35,760
google dns as a test target at that time

254
00:10:35,760 --> 00:10:38,640
this is a very bad practice

255
00:10:38,640 --> 00:10:41,200
so please don't do so

256
00:10:41,200 --> 00:10:45,440
but the result is pretty scary because

257
00:10:45,440 --> 00:10:47,920
we're thinking that we're

258
00:10:47,920 --> 00:10:51,120
we actually found an

259
00:10:51,600 --> 00:10:54,880
amplification attack

260
00:10:55,920 --> 00:10:58,240
but however after some precise

261
00:10:58,240 --> 00:11:00,160
measurements

262
00:11:00,160 --> 00:11:02,480
we decided to not call it amplification

263
00:11:02,480 --> 00:11:05,279
attack because our amplification factor

264
00:11:05,279 --> 00:11:07,360
is pretty low compared to something like

265
00:11:07,360 --> 00:11:09,600
main crash and redis

266
00:11:09,600 --> 00:11:13,040
so we call it network refraction attack

267
00:11:13,040 --> 00:11:16,640
and how do we how did we find it we

268
00:11:16,640 --> 00:11:18,720
just grabbed an embedded payload from

269
00:11:18,720 --> 00:11:22,399
the network and pasted it to vim as

270
00:11:22,399 --> 00:11:24,640
change a couple of fields sending back

271
00:11:24,640 --> 00:11:27,360
using pawn tools then we somehow broke

272
00:11:27,360 --> 00:11:29,279
this back

273
00:11:29,279 --> 00:11:32,560
so at that point we did we know that we

274
00:11:32,560 --> 00:11:34,000
somehow

275
00:11:34,000 --> 00:11:36,800
find a found an issue across

276
00:11:36,800 --> 00:11:39,360
implementations because the spec

277
00:11:39,360 --> 00:11:41,200
doesn't call for any white listing in

278
00:11:41,200 --> 00:11:42,399
that field

279
00:11:42,399 --> 00:11:45,440
thus it allows arbitrary ip to be filled

280
00:11:45,440 --> 00:11:48,079
in that field

281
00:11:48,560 --> 00:11:50,959
so here's a list of results from our

282
00:11:50,959 --> 00:11:53,440
fuzzing campaign and fortunately most

283
00:11:53,440 --> 00:11:57,600
mentors have fixed it by now

284
00:11:57,600 --> 00:11:59,920
and our another approach in finding

285
00:11:59,920 --> 00:12:01,680
vulnerabilities is that we want to look

286
00:12:01,680 --> 00:12:04,160
for outdated dependencies

287
00:12:04,160 --> 00:12:05,920
like we said before many dds

288
00:12:05,920 --> 00:12:08,399
implementations they use they use xml

289
00:12:08,399 --> 00:12:10,959
files for configuration

290
00:12:10,959 --> 00:12:12,160
well

291
00:12:12,160 --> 00:12:14,079
the best way

292
00:12:14,079 --> 00:12:16,720
that you should use a well-tested xml

293
00:12:16,720 --> 00:12:17,839
libraries

294
00:12:17,839 --> 00:12:20,399
the okay way is that if your company

295
00:12:20,399 --> 00:12:22,480
maybe your company name is google or

296
00:12:22,480 --> 00:12:24,959
apple you have enough engineers then you

297
00:12:24,959 --> 00:12:27,600
can re-implement your own excel library

298
00:12:27,600 --> 00:12:29,519
and test it very often

299
00:12:29,519 --> 00:12:32,240
but the bad way is you should not

300
00:12:32,240 --> 00:12:34,320
use any unmaintained libraries because

301
00:12:34,320 --> 00:12:38,240
they often contain vulnerabilities

302
00:12:38,240 --> 00:12:39,279
so

303
00:12:39,279 --> 00:12:41,440
it's pretty contrary to our thoughts

304
00:12:41,440 --> 00:12:43,440
because we find we we thought the

305
00:12:43,440 --> 00:12:45,360
products shouldn't be doing something

306
00:12:45,360 --> 00:12:47,360
like using very old dependent disease or

307
00:12:47,360 --> 00:12:49,279
even something like this

308
00:12:49,279 --> 00:12:51,440
so for example a vendor actually use a

309
00:12:51,440 --> 00:12:54,160
very old version of xml library

310
00:12:54,160 --> 00:12:55,920
then change the version number to

311
00:12:55,920 --> 00:12:58,639
something newer to make it more

312
00:12:58,639 --> 00:13:00,240
legit

313
00:13:00,240 --> 00:13:02,560
we don't know the reason behind this but

314
00:13:02,560 --> 00:13:03,920
it's pretty

315
00:13:03,920 --> 00:13:06,560
funny

316
00:13:06,560 --> 00:13:07,440
so

317
00:13:07,440 --> 00:13:09,360
the results

318
00:13:09,360 --> 00:13:10,160
we

319
00:13:10,160 --> 00:13:12,800
threw the xml files through the ramdasa

320
00:13:12,800 --> 00:13:14,160
file and broke one of the

321
00:13:14,160 --> 00:13:16,880
implementations

322
00:13:16,880 --> 00:13:20,000
and we achieved local code execution

323
00:13:20,000 --> 00:13:21,279
well

324
00:13:21,279 --> 00:13:24,000
we said it is local but in some cases

325
00:13:24,000 --> 00:13:26,000
that you will use dds to implement some

326
00:13:26,000 --> 00:13:29,279
kind of configuration updating mechanism

327
00:13:29,279 --> 00:13:31,839
when you do this then we have a chance

328
00:13:31,839 --> 00:13:34,079
to update your configuration files from

329
00:13:34,079 --> 00:13:36,720
the remote and what if we are updating

330
00:13:36,720 --> 00:13:38,240
your dds

331
00:13:38,240 --> 00:13:40,480
implementation using this functionality

332
00:13:40,480 --> 00:13:43,279
and with this file then we can take over

333
00:13:43,279 --> 00:13:45,920
your systems

334
00:13:46,959 --> 00:13:50,000
so here's a list of results from our xml

335
00:13:50,000 --> 00:13:51,519
files in campaign

336
00:13:51,519 --> 00:13:53,920
and fortunately that most matters

337
00:13:53,920 --> 00:13:57,599
sorry all vendors have fixed them

338
00:13:58,240 --> 00:14:00,480
so let's quickly go through our

339
00:14:00,480 --> 00:14:02,399
conclusions

340
00:14:02,399 --> 00:14:04,560
some people might ask that

341
00:14:04,560 --> 00:14:08,480
most of the issues found are dos and

342
00:14:08,480 --> 00:14:11,360
code local code executions

343
00:14:11,360 --> 00:14:12,880
is because

344
00:14:12,880 --> 00:14:15,040
some some of the implementations we

345
00:14:15,040 --> 00:14:17,680
actually tested our modern linux but we

346
00:14:17,680 --> 00:14:19,600
know that some implementations they

347
00:14:19,600 --> 00:14:22,639
might be run on embedded systems

348
00:14:22,639 --> 00:14:24,399
that will make our

349
00:14:24,399 --> 00:14:27,440
vulnerabilities exploitable

350
00:14:27,440 --> 00:14:31,720
and also we can have a demo

351
00:14:38,399 --> 00:14:40,240
i think the page

352
00:14:40,240 --> 00:14:44,120
back button isn't working

353
00:14:45,360 --> 00:14:47,360
and also my video is missing from the

354
00:14:47,360 --> 00:14:48,320
slide

355
00:14:48,320 --> 00:14:50,399
so unfortunately i will have to release

356
00:14:50,399 --> 00:14:52,959
the video later

357
00:14:52,959 --> 00:14:56,480
so let's skip a video because i i

358
00:14:56,480 --> 00:14:58,560
i was having a video demonstrating that

359
00:14:58,560 --> 00:15:00,320
we use a

360
00:15:00,320 --> 00:15:02,240
denial of service attack against a

361
00:15:02,240 --> 00:15:03,920
turtle bot and run

362
00:15:03,920 --> 00:15:06,800
and ram it against some cuddly

363
00:15:06,800 --> 00:15:09,199
dogs

364
00:15:11,440 --> 00:15:13,680
so anyway

365
00:15:13,680 --> 00:15:17,120
how our finding makes impact well

366
00:15:17,120 --> 00:15:19,680
uh because of our missing demo one of

367
00:15:19,680 --> 00:15:23,040
the things missed it its point

368
00:15:23,040 --> 00:15:25,760
but however in dds networks controlling

369
00:15:25,760 --> 00:15:28,240
one endpoint is enough to impact other

370
00:15:28,240 --> 00:15:30,000
endpoints

371
00:15:30,000 --> 00:15:32,079
you can see this from the reflection or

372
00:15:32,079 --> 00:15:34,399
our missing demo

373
00:15:34,399 --> 00:15:38,480
and two dds is usually deployed in local

374
00:15:38,480 --> 00:15:42,320
and deep in the control network so

375
00:15:42,320 --> 00:15:44,000
some people would say don't expect to

376
00:15:44,000 --> 00:15:46,000
find exposed endpoints

377
00:15:46,000 --> 00:15:48,000
for exposed

378
00:15:48,000 --> 00:15:51,040
rost2 instances well we've seen lots of

379
00:15:51,040 --> 00:15:53,360
people expose their roster instances on

380
00:15:53,360 --> 00:15:55,519
the internet

381
00:15:55,519 --> 00:15:57,759
and we can say that dds created new

382
00:15:57,759 --> 00:16:00,800
opportunities for discovery and natural

383
00:16:00,800 --> 00:16:03,680
movement and cnc this is very useful for

384
00:16:03,680 --> 00:16:05,279
apt actors

385
00:16:05,279 --> 00:16:07,040
because there's a built-in network

386
00:16:07,040 --> 00:16:09,440
discovery ability for the dds you can

387
00:16:09,440 --> 00:16:11,600
use it to find out every node in the

388
00:16:11,600 --> 00:16:14,240
internet in that network

389
00:16:14,240 --> 00:16:16,880
and because dds allows

390
00:16:16,880 --> 00:16:18,639
complex data

391
00:16:18,639 --> 00:16:21,600
to be attached to the network payloads

392
00:16:21,600 --> 00:16:24,160
and dds is usually white listed in local

393
00:16:24,160 --> 00:16:29,199
networks you can use it as a form of cpu

394
00:16:30,639 --> 00:16:32,880
and some people will argue that you

395
00:16:32,880 --> 00:16:36,399
won't expose dds on the outside so we

396
00:16:36,399 --> 00:16:38,399
did something unthinkable we actually

397
00:16:38,399 --> 00:16:40,800
created an internet scanner

398
00:16:40,800 --> 00:16:43,440
this actually cost us a bit of mayhem in

399
00:16:43,440 --> 00:16:45,680
the beginning because

400
00:16:45,680 --> 00:16:48,399
it's pretty difficult to do so

401
00:16:48,399 --> 00:16:51,360
one is because dds can be configurated

402
00:16:51,360 --> 00:16:54,399
dynamically and it has a very large port

403
00:16:54,399 --> 00:16:55,759
range like

404
00:16:55,759 --> 00:16:57,440
10 000

405
00:16:57,440 --> 00:17:00,480
and also bds has very strict latency

406
00:17:00,480 --> 00:17:02,880
requirements such as you have to make a

407
00:17:02,880 --> 00:17:05,119
response to the other side in 50

408
00:17:05,119 --> 00:17:06,400
milliseconds

409
00:17:06,400 --> 00:17:09,039
but as our scanners are located on the

410
00:17:09,039 --> 00:17:11,039
other side of earth

411
00:17:11,039 --> 00:17:13,520
it will be pretty difficult

412
00:17:13,520 --> 00:17:16,400
ndds itself is connectionless that makes

413
00:17:16,400 --> 00:17:20,160
the issue much worse however we

414
00:17:20,160 --> 00:17:22,720
overcome all of these issues and found

415
00:17:22,720 --> 00:17:26,319
out that there's actually around 23

416
00:17:26,319 --> 00:17:30,160
2300 exposed endpoints in the internet

417
00:17:30,160 --> 00:17:32,960
and a great great percentage of them are

418
00:17:32,960 --> 00:17:37,280
running on outdated dds versions

419
00:17:38,000 --> 00:17:39,120
so

420
00:17:39,120 --> 00:17:42,000
let's go to our remarks

421
00:17:42,000 --> 00:17:42,799
well

422
00:17:42,799 --> 00:17:45,600
in this research we must say that

423
00:17:45,600 --> 00:17:47,919
mitigation goes hand-to-hand with good

424
00:17:47,919 --> 00:17:51,120
disclosure we will go deeper about this

425
00:17:51,120 --> 00:17:53,360
on the later slides

426
00:17:53,360 --> 00:17:55,760
and we know that specs can contain

427
00:17:55,760 --> 00:17:58,559
loopholes for exploitation in sometimes

428
00:17:58,559 --> 00:17:59,760
for example

429
00:17:59,760 --> 00:18:02,799
the speculative execute execution bug

430
00:18:02,799 --> 00:18:04,640
affecting processors

431
00:18:04,640 --> 00:18:06,320
in this decade

432
00:18:06,320 --> 00:18:09,039
the issue can can actually be found

433
00:18:09,039 --> 00:18:11,760
while reading a spec

434
00:18:11,760 --> 00:18:12,880
and

435
00:18:12,880 --> 00:18:14,720
we would recommend using proper network

436
00:18:14,720 --> 00:18:17,120
segmentation or using ips to defend

437
00:18:17,120 --> 00:18:19,840
unpatchable systems or the ones that you

438
00:18:19,840 --> 00:18:23,600
couldn't patch but wanted to patch

439
00:18:25,440 --> 00:18:26,720
so

440
00:18:26,720 --> 00:18:28,960
let's go through a page well

441
00:18:28,960 --> 00:18:31,600
i must say that this page is for

442
00:18:31,600 --> 00:18:33,600
audiences of s4

443
00:18:33,600 --> 00:18:36,799
given how the audience demographic looks

444
00:18:36,799 --> 00:18:38,080
like

445
00:18:38,080 --> 00:18:40,160
in the beginning of this research we

446
00:18:40,160 --> 00:18:42,720
actually approach vendors in a very

447
00:18:42,720 --> 00:18:44,559
friendly way when starting working on

448
00:18:44,559 --> 00:18:46,559
this project we

449
00:18:46,559 --> 00:18:48,720
send emails and even

450
00:18:48,720 --> 00:18:51,679
try to talk to them in person and ask if

451
00:18:51,679 --> 00:18:52,480
you

452
00:18:52,480 --> 00:18:54,400
want to start a security research

453
00:18:54,400 --> 00:18:57,360
project on your product

454
00:18:57,360 --> 00:18:58,640
so in the beginning we actually

455
00:18:58,640 --> 00:19:01,039
explained to vendors that we're not here

456
00:19:01,039 --> 00:19:03,200
to do harm to them and this will

457
00:19:03,200 --> 00:19:05,440
actually make them better in the long

458
00:19:05,440 --> 00:19:06,400
term

459
00:19:06,400 --> 00:19:10,400
and how's that transparency paid back

460
00:19:10,400 --> 00:19:13,200
so i must say that some implementations

461
00:19:13,200 --> 00:19:15,919
some vendors they are very friendly

462
00:19:15,919 --> 00:19:17,280
and even

463
00:19:17,280 --> 00:19:20,000
jump out jump on the wagon and help us

464
00:19:20,000 --> 00:19:22,480
to break their own products

465
00:19:22,480 --> 00:19:24,559
so i must say one of the vendors is

466
00:19:24,559 --> 00:19:27,039
called adlink and we must given a very

467
00:19:27,039 --> 00:19:30,160
large applause

468
00:19:32,280 --> 00:19:34,240
[Applause]

469
00:19:34,240 --> 00:19:37,039
and some of the vendors they never

470
00:19:37,039 --> 00:19:38,720
responded

471
00:19:38,720 --> 00:19:41,360
they either never respond or they

472
00:19:41,360 --> 00:19:44,000
responded in a very

473
00:19:44,000 --> 00:19:46,720
very bad way which make up makes us very

474
00:19:46,720 --> 00:19:48,160
uncomfortable

475
00:19:48,160 --> 00:19:49,919
for example some of the vendors

476
00:19:49,919 --> 00:19:54,160
threatened us with legal actions

477
00:19:54,160 --> 00:19:56,559
and some never responded

478
00:19:56,559 --> 00:19:58,960
even when we found vulnerabilities in

479
00:19:58,960 --> 00:20:01,600
their products and reported them through

480
00:20:01,600 --> 00:20:04,400
our vendor for our vulnerability broker

481
00:20:04,400 --> 00:20:07,840
and even with ics assert

482
00:20:07,840 --> 00:20:11,200
and some vendors they assume that

483
00:20:11,200 --> 00:20:13,600
by remaining their products in closed

484
00:20:13,600 --> 00:20:15,520
source binaries

485
00:20:15,520 --> 00:20:18,400
they are sending out a black boss

486
00:20:18,400 --> 00:20:20,400
and they think that

487
00:20:20,400 --> 00:20:22,880
i'm only sending out binaries so you

488
00:20:22,880 --> 00:20:25,200
couldn't do any something funny to it

489
00:20:25,200 --> 00:20:27,440
thus my product is secure

490
00:20:27,440 --> 00:20:31,440
i call this hiding in the cave

491
00:20:31,840 --> 00:20:34,960
but i say that as a researcher we tend

492
00:20:34,960 --> 00:20:37,280
to think like hackers do

493
00:20:37,280 --> 00:20:40,320
so we will eventually find a way to

494
00:20:40,320 --> 00:20:42,480
crack that cave and still break your

495
00:20:42,480 --> 00:20:44,880
product

496
00:20:44,880 --> 00:20:47,440
so i must say vendors we need more

497
00:20:47,440 --> 00:20:51,280
cooperative security assessments

498
00:20:52,799 --> 00:20:55,760
so that will conclude our talk

499
00:20:55,760 --> 00:20:58,000
if you have any questions please raise

500
00:20:58,000 --> 00:21:01,600
your hand or send email to this address

501
00:21:01,600 --> 00:21:03,039
oh hello

502
00:21:03,039 --> 00:21:06,080
you take question yeah sure so dds it

503
00:21:06,080 --> 00:21:08,480
stands for data definition services

504
00:21:08,480 --> 00:21:11,440
right yes okay

505
00:21:11,440 --> 00:21:13,440
i guess my question would be you know i

506
00:21:13,440 --> 00:21:14,960
haven't done a lot of fuzz testing but

507
00:21:14,960 --> 00:21:16,880
chris systrunk and adam crane and these

508
00:21:16,880 --> 00:21:18,799
guys years ago they

509
00:21:18,799 --> 00:21:21,360
they focused on d and p3 and they hacked

510
00:21:21,360 --> 00:21:23,919
it up pretty good you know and exposed a

511
00:21:23,919 --> 00:21:25,919
lot of stuff on it and

512
00:21:25,919 --> 00:21:27,440
i'm personally i'm in love with the

513
00:21:27,440 --> 00:21:29,520
publish and subscribe model i think it's

514
00:21:29,520 --> 00:21:31,840
the right thing for control systems

515
00:21:31,840 --> 00:21:34,080
i'm discouraged to hear that dds has

516
00:21:34,080 --> 00:21:36,720
these kinds of problems so i guess my

517
00:21:36,720 --> 00:21:38,000
question would be

518
00:21:38,000 --> 00:21:39,440
out of all the protocols you've looked

519
00:21:39,440 --> 00:21:41,440
at which one would you say is the most

520
00:21:41,440 --> 00:21:43,840
secure because dds out of the pub sub

521
00:21:43,840 --> 00:21:45,600
world they are the first ones that i

522
00:21:45,600 --> 00:21:47,919
know of that actually wrote a security

523
00:21:47,919 --> 00:21:50,000
spec called dds secure right that's

524
00:21:50,000 --> 00:21:51,200
probably the one that you found some

525
00:21:51,200 --> 00:21:53,280
holes in maybe right

526
00:21:53,280 --> 00:21:55,840
so i guess my question is um

527
00:21:55,840 --> 00:21:57,360
what's the what's the best protocol out

528
00:21:57,360 --> 00:21:59,120
there https

529
00:21:59,120 --> 00:22:00,880
you know which one has been beat on the

530
00:22:00,880 --> 00:22:03,600
most and what will it take to make dds

531
00:22:03,600 --> 00:22:07,039
um a more secure product in your opinion

532
00:22:07,039 --> 00:22:09,280
so i think that's a very good question

533
00:22:09,280 --> 00:22:10,960
but i must say that

534
00:22:10,960 --> 00:22:12,880
we should not be thinking this way we

535
00:22:12,880 --> 00:22:14,400
should be thinking about how do you

536
00:22:14,400 --> 00:22:16,559
protect the unprotectable you should

537
00:22:16,559 --> 00:22:18,240
assume that

538
00:22:18,240 --> 00:22:20,159
your infrastructures

539
00:22:20,159 --> 00:22:22,880
will somehow come under attack in one

540
00:22:22,880 --> 00:22:25,919
day so how would you against it so

541
00:22:25,919 --> 00:22:29,039
instead by blocking the fire outside

542
00:22:29,039 --> 00:22:32,000
your forest you actually allows the fire

543
00:22:32,000 --> 00:22:34,240
to get into your forest but you still

544
00:22:34,240 --> 00:22:36,720
retain a control of how big the fire

545
00:22:36,720 --> 00:22:38,159
will go

546
00:22:38,159 --> 00:22:41,120
this would be my suggestion

547
00:22:41,120 --> 00:22:43,039
well but even i thought they were one of

548
00:22:43,039 --> 00:22:44,720
the first ones that did what you would

549
00:22:44,720 --> 00:22:45,600
call

550
00:22:45,600 --> 00:22:48,799
uh kind of a zero trust model mtls

551
00:22:48,799 --> 00:22:50,480
and so if that if they really

552
00:22:50,480 --> 00:22:52,799
implemented that well how

553
00:22:52,799 --> 00:22:55,280
you know you you approve identity you um

554
00:22:55,280 --> 00:22:59,120
do encrypted traffic along your topics

555
00:22:59,120 --> 00:23:01,280
uh but it's still broken but were you

556
00:23:01,280 --> 00:23:04,240
testing clear text protocol dds or not

557
00:23:04,240 --> 00:23:05,760
you know or

558
00:23:05,760 --> 00:23:08,159
so our research is actually not against

559
00:23:08,159 --> 00:23:10,320
the dds security protocol but because

560
00:23:10,320 --> 00:23:12,240
dda security requires you to do a

561
00:23:12,240 --> 00:23:14,240
handshake with ordinary dds in the first

562
00:23:14,240 --> 00:23:15,120
place

563
00:23:15,120 --> 00:23:18,640
so our research will still somehow break

564
00:23:18,640 --> 00:23:22,960
dds security but not directly okay

565
00:23:22,960 --> 00:23:25,840
excellent thank you

566
00:23:26,000 --> 00:23:29,120
so any more questions yeah

567
00:23:29,120 --> 00:23:30,000
so

568
00:23:30,000 --> 00:23:32,320
my question is when you broke the spec

569
00:23:32,320 --> 00:23:33,840
uh thanks for not cutting off my head

570
00:23:33,840 --> 00:23:37,360
there um when you broke the spec um

571
00:23:37,360 --> 00:23:40,559
is there a way the library vendors can

572
00:23:40,559 --> 00:23:43,120
take action now to prevent that

573
00:23:43,120 --> 00:23:45,120
vulnerability from being used or does it

574
00:23:45,120 --> 00:23:47,600
require changes to the standard in order

575
00:23:47,600 --> 00:23:48,880
to fix

576
00:23:48,880 --> 00:23:51,760
oh that's another very good question so

577
00:23:51,760 --> 00:23:53,200
for the first one

578
00:23:53,200 --> 00:23:55,280
the spec will actually be fixed in the

579
00:23:55,280 --> 00:23:56,559
next version

580
00:23:56,559 --> 00:23:57,840
and

581
00:23:57,840 --> 00:24:00,400
as our assessments goes that some

582
00:24:00,400 --> 00:24:03,120
implementations they are more resilient

583
00:24:03,120 --> 00:24:04,480
to this

584
00:24:04,480 --> 00:24:07,280
spec attack because they're

585
00:24:07,280 --> 00:24:08,720
maybe they're

586
00:24:08,720 --> 00:24:11,120
more cautious in creating their own

587
00:24:11,120 --> 00:24:12,960
implementations

588
00:24:12,960 --> 00:24:14,559
and

589
00:24:14,559 --> 00:24:16,480
but for now because the spec hasn't been

590
00:24:16,480 --> 00:24:19,440
up hasn't been updated yet so most

591
00:24:19,440 --> 00:24:21,919
vendors they have to actually

592
00:24:21,919 --> 00:24:22,720
not

593
00:24:22,720 --> 00:24:25,279
adhere to the spec in order to fix this

594
00:24:25,279 --> 00:24:26,720
issue

595
00:24:26,720 --> 00:24:29,360
okay thank you

596
00:24:29,360 --> 00:24:31,600
one last question can you describe your

597
00:24:31,600 --> 00:24:33,760
demo because was it a robot

598
00:24:33,760 --> 00:24:36,159
uh yeah so yeah so what did the robot do

599
00:24:36,159 --> 00:24:38,400
i'd like to hear what happened oh so uh

600
00:24:38,400 --> 00:24:40,880
we're actually simulating a scenario

601
00:24:40,880 --> 00:24:42,480
that you have a car

602
00:24:42,480 --> 00:24:44,880
and you have a lidar on it and the lidar

603
00:24:44,880 --> 00:24:48,799
will detect obstacles in the front

604
00:24:48,799 --> 00:24:52,000
and when it detects obstacles in the

605
00:24:52,000 --> 00:24:54,000
front it will send

606
00:24:54,000 --> 00:24:55,520
it will send the pedal telling the

607
00:24:55,520 --> 00:24:57,039
wheels to stop

608
00:24:57,039 --> 00:24:58,240
but we

609
00:24:58,240 --> 00:25:00,880
take out this path in the process so the

610
00:25:00,880 --> 00:25:03,679
car will fail to stop and ram into

611
00:25:03,679 --> 00:25:07,520
maybe other human beings

612
00:25:12,559 --> 00:25:15,840
okay thank you

