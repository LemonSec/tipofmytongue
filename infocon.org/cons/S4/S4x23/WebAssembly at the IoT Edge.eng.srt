1
00:00:00,179 --> 00:00:03,179
foreign

2
00:00:06,660 --> 00:00:08,460
before I begin just a note that this

3
00:00:08,460 --> 00:00:10,200
presentation represents my personal

4
00:00:10,200 --> 00:00:12,120
experiences and opinions and not

5
00:00:12,120 --> 00:00:15,059
necessarily those of my employer Pastor

6
00:00:15,059 --> 00:00:17,400
present I'm currently employed at Tesla

7
00:00:17,400 --> 00:00:19,140
working on software systems for

8
00:00:19,140 --> 00:00:21,720
renewable energy generation battery

9
00:00:21,720 --> 00:00:24,359
storage electric vehicle charging and

10
00:00:24,359 --> 00:00:27,660
energy Market participation

11
00:00:27,660 --> 00:00:28,800
I'm going to talk today about

12
00:00:28,800 --> 00:00:31,260
webassembly a technology that I think is

13
00:00:31,260 --> 00:00:33,059
just maturing right now to the point

14
00:00:33,059 --> 00:00:34,620
where we should start considering it

15
00:00:34,620 --> 00:00:38,520
seriously in iot as well as ICS

16
00:00:38,520 --> 00:00:40,739
giving us a cleaner separation between

17
00:00:40,739 --> 00:00:42,899
firmware and software allowing us to

18
00:00:42,899 --> 00:00:45,360
iterate faster respond faster and also

19
00:00:45,360 --> 00:00:47,219
do so more securely

20
00:00:47,219 --> 00:00:48,539
so I'm going to begin the presentation

21
00:00:48,539 --> 00:00:50,820
by kind of motivating my interest in

22
00:00:50,820 --> 00:00:52,379
webassembly through some of the problems

23
00:00:52,379 --> 00:00:54,899
I'm facing at the iot edge as well as in

24
00:00:54,899 --> 00:00:56,699
the cloud that'll provide an

25
00:00:56,699 --> 00:00:58,680
introduction to webassembly

26
00:00:58,680 --> 00:01:00,719
then through a motivating example I'll

27
00:01:00,719 --> 00:01:02,280
describe what it would be like to be an

28
00:01:02,280 --> 00:01:04,799
application developer using webassembly

29
00:01:04,799 --> 00:01:06,540
and finally I'll conclude with some

30
00:01:06,540 --> 00:01:08,520
challenges

31
00:01:08,520 --> 00:01:10,439
so let's start by looking at some

32
00:01:10,439 --> 00:01:12,119
challenges in Edge Computing

33
00:01:12,119 --> 00:01:13,740
environments that I think webassembly

34
00:01:13,740 --> 00:01:15,600
can help address

35
00:01:15,600 --> 00:01:18,060
and what I mean about Edge what my

36
00:01:18,060 --> 00:01:19,680
definition of edge Computing I guess I'm

37
00:01:19,680 --> 00:01:20,580
going to talk throughout the

38
00:01:20,580 --> 00:01:22,740
presentation about the edge or the iot

39
00:01:22,740 --> 00:01:25,619
edge really what I mean is software or

40
00:01:25,619 --> 00:01:27,900
firmware controlling Hardware performing

41
00:01:27,900 --> 00:01:29,820
critical functions so I think what I'm

42
00:01:29,820 --> 00:01:31,500
going to talk about here equally applies

43
00:01:31,500 --> 00:01:34,500
to ICS to manufacturing or any kind of

44
00:01:34,500 --> 00:01:38,479
software in critical infrastructure

45
00:01:38,939 --> 00:01:41,340
okay so let's take a look first at what

46
00:01:41,340 --> 00:01:43,619
it takes to get software deployed to an

47
00:01:43,619 --> 00:01:45,840
iot edge device so first you need to

48
00:01:45,840 --> 00:01:48,600
write that software compile it test it

49
00:01:48,600 --> 00:01:50,939
do static analysis

50
00:01:50,939 --> 00:01:52,380
then you need to package it for a

51
00:01:52,380 --> 00:01:54,720
deployment including signing go through

52
00:01:54,720 --> 00:01:57,780
component testing integration testing

53
00:01:57,780 --> 00:02:00,119
you often have procedures for Regulatory

54
00:02:00,119 --> 00:02:01,740
Compliance or customer acceptance

55
00:02:01,740 --> 00:02:03,899
testing and then finally you get to the

56
00:02:03,899 --> 00:02:05,460
stage where you can distribute it to

57
00:02:05,460 --> 00:02:07,560
those iot Edge devices

58
00:02:07,560 --> 00:02:09,780
and the distribution is often phased

59
00:02:09,780 --> 00:02:12,660
around the world in order to monitor it

60
00:02:12,660 --> 00:02:14,940
and protect against regressions and

61
00:02:14,940 --> 00:02:16,560
often in these environments you need to

62
00:02:16,560 --> 00:02:18,660
you need to um

63
00:02:18,660 --> 00:02:20,160
you need to obey some kind of

64
00:02:20,160 --> 00:02:21,900
maintenance schedule that's dictated by

65
00:02:21,900 --> 00:02:22,980
the customer

66
00:02:22,980 --> 00:02:25,140
and some of these Edge iot devices are

67
00:02:25,140 --> 00:02:26,640
air gapped in some of their

68
00:02:26,640 --> 00:02:28,739
functionality so they may be able to

69
00:02:28,739 --> 00:02:31,080
send Telemetry to the cloud but you

70
00:02:31,080 --> 00:02:33,540
can't actually update firmware or or do

71
00:02:33,540 --> 00:02:35,040
control against them so they're they're

72
00:02:35,040 --> 00:02:37,260
actually updated quite infrequently

73
00:02:37,260 --> 00:02:38,819
and what this means is this whole

74
00:02:38,819 --> 00:02:40,680
process can take weeks months or years

75
00:02:40,680 --> 00:02:43,519
to deploy new code to Edge iot devices

76
00:02:43,519 --> 00:02:46,739
and because this process is not executed

77
00:02:46,739 --> 00:02:48,420
very frequently we don't get very good

78
00:02:48,420 --> 00:02:50,580
at it as an industry and because we're

79
00:02:50,580 --> 00:02:53,519
not good at it people sense risk and

80
00:02:53,519 --> 00:02:55,800
they don't want to change

81
00:02:55,800 --> 00:02:58,860
so I think webassembly is an opportunity

82
00:02:58,860 --> 00:03:01,200
perhaps to to iterate more quickly here

83
00:03:01,200 --> 00:03:04,860
but also do so more securely

84
00:03:04,860 --> 00:03:06,840
okay there's three problems I'm facing

85
00:03:06,840 --> 00:03:09,060
in the cloud that I think webassembly

86
00:03:09,060 --> 00:03:10,980
may help address

87
00:03:10,980 --> 00:03:13,379
the first is hosting untrusted code for

88
00:03:13,379 --> 00:03:15,420
me that's usually empirical models that

89
00:03:15,420 --> 00:03:17,400
are developed by other teams that I that

90
00:03:17,400 --> 00:03:19,739
I need to host in my infrastructure so

91
00:03:19,739 --> 00:03:21,300
there are some service providers that

92
00:03:21,300 --> 00:03:22,500
are kind of on The Cutting Edge of

93
00:03:22,500 --> 00:03:24,980
webassembly usage

94
00:03:24,980 --> 00:03:27,420
cloudflare and fastly are both hosting

95
00:03:27,420 --> 00:03:29,220
untrusted code from their customers and

96
00:03:29,220 --> 00:03:30,780
then moving it around their Global

97
00:03:30,780 --> 00:03:33,000
networks to operate closer to their

98
00:03:33,000 --> 00:03:36,780
customers and red panda allows the

99
00:03:36,780 --> 00:03:39,840
opportunity to host uh like data

100
00:03:39,840 --> 00:03:41,159
Transformations and streaming

101
00:03:41,159 --> 00:03:44,159
calculations using webassembly

102
00:03:44,159 --> 00:03:46,319
the second problem that I'm facing in

103
00:03:46,319 --> 00:03:47,519
the cloud

104
00:03:47,519 --> 00:03:49,920
the the relationship between Edge iot

105
00:03:49,920 --> 00:03:52,040
devices and cloud services

106
00:03:52,040 --> 00:03:54,900
to date is a fairly simple one so Edge

107
00:03:54,900 --> 00:03:57,239
iot devices send Telemetry and alerts to

108
00:03:57,239 --> 00:03:58,440
the cloud and they fetch their

109
00:03:58,440 --> 00:04:00,480
configuration and that's about it and

110
00:04:00,480 --> 00:04:02,400
then really rich services for Asset

111
00:04:02,400 --> 00:04:04,560
Management stream data processing

112
00:04:04,560 --> 00:04:07,080
historian capabilities data Lake

113
00:04:07,080 --> 00:04:09,659
security really only exists in the cloud

114
00:04:09,659 --> 00:04:12,200
environment

115
00:04:12,720 --> 00:04:13,920
so in order to build really

116
00:04:13,920 --> 00:04:15,780
sophisticated Services I think we need

117
00:04:15,780 --> 00:04:17,459
to start blurring the distinction

118
00:04:17,459 --> 00:04:19,199
between Edge and cloud and having some

119
00:04:19,199 --> 00:04:21,000
of those sophisticated Services move

120
00:04:21,000 --> 00:04:22,919
closer to the edge there's a few

121
00:04:22,919 --> 00:04:25,080
advantages in doing this There's an

122
00:04:25,080 --> 00:04:26,580
opportunity to save a lot of money

123
00:04:26,580 --> 00:04:28,259
because you can take advantage of this

124
00:04:28,259 --> 00:04:29,699
Edge Computing environment that's

125
00:04:29,699 --> 00:04:31,139
essentially free

126
00:04:31,139 --> 00:04:33,419
The Edge usually has all of the context

127
00:04:33,419 --> 00:04:35,699
that it needs we're in the cloud if you

128
00:04:35,699 --> 00:04:37,800
try and recreate context you often have

129
00:04:37,800 --> 00:04:40,280
to join data streams and when those are

130
00:04:40,280 --> 00:04:43,380
eventually consistent data streams that

131
00:04:43,380 --> 00:04:45,360
can lead to a lot of problems

132
00:04:45,360 --> 00:04:47,460
and then the edge

133
00:04:47,460 --> 00:04:49,560
if you can deliver these services on the

134
00:04:49,560 --> 00:04:51,300
edge The Edge can operate autonomously

135
00:04:51,300 --> 00:04:53,520
even without its connection to the cloud

136
00:04:53,520 --> 00:04:55,259
and you can offer much richer Services

137
00:04:55,259 --> 00:04:57,479
doing this

138
00:04:57,479 --> 00:04:59,460
this problem for me also goes the other

139
00:04:59,460 --> 00:05:01,380
way I want to take code that's running

140
00:05:01,380 --> 00:05:03,540
on the iot edge and run it in the cloud

141
00:05:03,540 --> 00:05:05,660
so that I can say run a state machine

142
00:05:05,660 --> 00:05:08,160
representing you know a digital twin in

143
00:05:08,160 --> 00:05:09,840
the cloud running the same code that's

144
00:05:09,840 --> 00:05:11,940
on the edge or perhaps I want to back

145
00:05:11,940 --> 00:05:14,759
test models like a pricing model against

146
00:05:14,759 --> 00:05:17,160
historical data where the same code is

147
00:05:17,160 --> 00:05:19,500
being used for that back testing and I

148
00:05:19,500 --> 00:05:21,600
see webassembly is starting to blur the

149
00:05:21,600 --> 00:05:23,100
distinction between Edge and Cloud

150
00:05:23,100 --> 00:05:25,259
allowing us to move code from the cloud

151
00:05:25,259 --> 00:05:27,720
to the edge or from the edge back to the

152
00:05:27,720 --> 00:05:29,340
cloud

153
00:05:29,340 --> 00:05:31,560
okay and the third problem that I'm

154
00:05:31,560 --> 00:05:33,180
facing in the cloud that has motivated

155
00:05:33,180 --> 00:05:36,240
my interest in webassembly

156
00:05:36,240 --> 00:05:38,699
so this you know maybe 10 years ago or

157
00:05:38,699 --> 00:05:40,919
so we're managing everything in the

158
00:05:40,919 --> 00:05:42,660
stack all the way from Hardware to the

159
00:05:42,660 --> 00:05:45,479
operating system up into the application

160
00:05:45,479 --> 00:05:47,220
and then we virtualized the hardware

161
00:05:47,220 --> 00:05:49,500
allowing us to run multiple operating

162
00:05:49,500 --> 00:05:51,780
systems on top of it and then came

163
00:05:51,780 --> 00:05:54,020
containers declarative deployments

164
00:05:54,020 --> 00:05:55,979
orchestration and so on and this is

165
00:05:55,979 --> 00:05:57,780
where most companies operating the cloud

166
00:05:57,780 --> 00:05:59,699
are today

167
00:05:59,699 --> 00:06:01,440
and it's a model that works quite well

168
00:06:01,440 --> 00:06:03,840
but there are some problems if we look

169
00:06:03,840 --> 00:06:06,479
inside those containers

170
00:06:06,479 --> 00:06:08,220
so if we look at a container it's

171
00:06:08,220 --> 00:06:10,560
probably pinned to some kind of Docker

172
00:06:10,560 --> 00:06:11,340
image

173
00:06:11,340 --> 00:06:13,560
you've probably installed some root CA

174
00:06:13,560 --> 00:06:16,620
certificates along with some tooling

175
00:06:16,620 --> 00:06:18,000
and then you finally get to the

176
00:06:18,000 --> 00:06:19,740
application binary itself that's

177
00:06:19,740 --> 00:06:21,660
embedded in this container

178
00:06:21,660 --> 00:06:23,520
and let's say that that application has

179
00:06:23,520 --> 00:06:25,500
an HTTP server

180
00:06:25,500 --> 00:06:27,600
which also means it has a library for

181
00:06:27,600 --> 00:06:30,539
parsing Json and serializing Json

182
00:06:30,539 --> 00:06:32,819
perhaps the application also exposes a

183
00:06:32,819 --> 00:06:35,340
grpc endpoint

184
00:06:35,340 --> 00:06:37,560
this application May publish event data

185
00:06:37,560 --> 00:06:39,419
to some kind of message bus like Kafka

186
00:06:39,419 --> 00:06:41,039
so it's going to have a client for doing

187
00:06:41,039 --> 00:06:42,060
that

188
00:06:42,060 --> 00:06:43,560
of course you want to monitor the health

189
00:06:43,560 --> 00:06:45,900
of this application so it's going to

190
00:06:45,900 --> 00:06:48,479
have some kind of library and endpoint

191
00:06:48,479 --> 00:06:50,340
or you can do that

192
00:06:50,340 --> 00:06:52,919
if this application persists state it

193
00:06:52,919 --> 00:06:54,539
may be deployed alongside another

194
00:06:54,539 --> 00:06:57,240
container that has a database in it

195
00:06:57,240 --> 00:06:59,100
which also means you then have a client

196
00:06:59,100 --> 00:07:01,080
for interacting with the database

197
00:07:01,080 --> 00:07:02,880
and once we've laid all of this

198
00:07:02,880 --> 00:07:05,280
Foundation we finally get to the piece

199
00:07:05,280 --> 00:07:07,020
of business logic that we wanted to

200
00:07:07,020 --> 00:07:10,259
write called the application

201
00:07:10,259 --> 00:07:12,120
now this isn't so bad when you have a

202
00:07:12,120 --> 00:07:13,979
handful of applications

203
00:07:13,979 --> 00:07:15,840
but it gets really difficult to manage

204
00:07:15,840 --> 00:07:17,940
when you have hundreds of services like

205
00:07:17,940 --> 00:07:19,979
this and these Services might some of

206
00:07:19,979 --> 00:07:21,900
them might be inherited from from other

207
00:07:21,900 --> 00:07:24,120
teams some of them might include Legacy

208
00:07:24,120 --> 00:07:27,120
code they often have a mix of

209
00:07:27,120 --> 00:07:29,400
programming languages a mix of libraries

210
00:07:29,400 --> 00:07:31,319
and so if there's a security

211
00:07:31,319 --> 00:07:33,599
vulnerability in a certain version of

212
00:07:33,599 --> 00:07:35,699
the HTTP server used by some

213
00:07:35,699 --> 00:07:38,280
applications you know which applications

214
00:07:38,280 --> 00:07:40,979
need to be patched rebuilt redeployed

215
00:07:40,979 --> 00:07:42,479
answering that question can be quite

216
00:07:42,479 --> 00:07:44,400
difficult for most organizations this

217
00:07:44,400 --> 00:07:46,440
was the problem many people faced with

218
00:07:46,440 --> 00:07:50,219
the log for J vulnerability

219
00:07:50,280 --> 00:07:51,720
so this is really a problem of

220
00:07:51,720 --> 00:07:53,639
concordance where we want to provide

221
00:07:53,639 --> 00:07:56,759
consistency but also allow diversity but

222
00:07:56,759 --> 00:07:58,800
still understand what's where and have

223
00:07:58,800 --> 00:08:01,259
teams operate in a decoupled manner

224
00:08:01,259 --> 00:08:03,180
so in order to address this concordance

225
00:08:03,180 --> 00:08:05,580
problem I expect this trend to continue

226
00:08:05,580 --> 00:08:07,919
with more and more application code

227
00:08:07,919 --> 00:08:10,620
moving down into the infrastructure so

228
00:08:10,620 --> 00:08:12,599
what this would look like is say the

229
00:08:12,599 --> 00:08:14,940
HTTP server or that Library that's

230
00:08:14,940 --> 00:08:17,280
parsing Json moving down into the

231
00:08:17,280 --> 00:08:19,560
infrastructure and being managed there

232
00:08:19,560 --> 00:08:21,780
so that it can be consistent and so that

233
00:08:21,780 --> 00:08:23,759
it can be patched without involving

234
00:08:23,759 --> 00:08:25,440
application developers this is very

235
00:08:25,440 --> 00:08:27,060
similar today if you if you operate a

236
00:08:27,060 --> 00:08:29,160
kubernetes cluster you can you can patch

237
00:08:29,160 --> 00:08:30,720
the machines underneath the kubernetes

238
00:08:30,720 --> 00:08:32,640
cluster without involving application

239
00:08:32,640 --> 00:08:34,440
development teams it's really kind of a

240
00:08:34,440 --> 00:08:37,320
continuation of that this was kind of

241
00:08:37,320 --> 00:08:39,120
the promise of server lists and

242
00:08:39,120 --> 00:08:41,279
functions as a service

243
00:08:41,279 --> 00:08:44,039
I don't think it quite got there yet and

244
00:08:44,039 --> 00:08:45,600
we need to move more and more code

245
00:08:45,600 --> 00:08:47,100
that's that's embedded in there down

246
00:08:47,100 --> 00:08:49,560
into the infrastructure

247
00:08:49,560 --> 00:08:50,940
and if you're I don't have time to go

248
00:08:50,940 --> 00:08:52,200
into it here but if you're kind of

249
00:08:52,200 --> 00:08:54,779
intrigued by this model This wasm Cloud

250
00:08:54,779 --> 00:08:56,519
project is really leading the way here

251
00:08:56,519 --> 00:08:58,980
in terms of the the model uh the

252
00:08:58,980 --> 00:09:03,000
functionality and Security in this space

253
00:09:03,000 --> 00:09:04,920
okay so I've kind of motivated why I'm

254
00:09:04,920 --> 00:09:07,800
interested in webassembly at the edge

255
00:09:07,800 --> 00:09:09,540
it's it's this problem of being able to

256
00:09:09,540 --> 00:09:11,700
iterate quickly but also do so securely

257
00:09:11,700 --> 00:09:14,339
and in the cloud hosting untrusted code

258
00:09:14,339 --> 00:09:16,920
having more and more of the application

259
00:09:16,920 --> 00:09:18,600
code moved down into the infrastructure

260
00:09:18,600 --> 00:09:20,459
so that it's more manageable and then

261
00:09:20,459 --> 00:09:22,560
this blurring of Edge and Cloud where I

262
00:09:22,560 --> 00:09:25,680
can move Services between the two

263
00:09:25,680 --> 00:09:27,180
so now that we've done that let's look

264
00:09:27,180 --> 00:09:29,880
at what webassembly is

265
00:09:29,880 --> 00:09:32,040
so webassembly is a portable binary

266
00:09:32,040 --> 00:09:34,019
Intermediate Language that can be

267
00:09:34,019 --> 00:09:35,519
targeted from various programming

268
00:09:35,519 --> 00:09:37,560
languages and execute on different

269
00:09:37,560 --> 00:09:40,019
platforms meaning it's portable in a

270
00:09:40,019 --> 00:09:42,240
virtual machine

271
00:09:42,240 --> 00:09:44,519
webassembly was first released in 2017

272
00:09:44,519 --> 00:09:46,260
and it is supported by all of the

273
00:09:46,260 --> 00:09:48,540
popular web browsers it was originally

274
00:09:48,540 --> 00:09:50,339
developed to enable high performance

275
00:09:50,339 --> 00:09:53,040
applications in the browser so that

276
00:09:53,040 --> 00:09:54,480
meant you could write really efficient

277
00:09:54,480 --> 00:09:56,760
code in C plus rather than in JavaScript

278
00:09:56,760 --> 00:09:58,680
and still executed in the browser

279
00:09:58,680 --> 00:10:00,720
there's also some

280
00:10:00,720 --> 00:10:03,060
kind of famous examples of Legacy code

281
00:10:03,060 --> 00:10:04,860
being ported to the browser like Google

282
00:10:04,860 --> 00:10:08,040
Earth using webassembly now I am not

283
00:10:08,040 --> 00:10:09,420
interested in web development at all

284
00:10:09,420 --> 00:10:11,640
I've never written a line of code of

285
00:10:11,640 --> 00:10:14,399
JavaScript my interest in webassembly

286
00:10:14,399 --> 00:10:16,680
has come in the evolution of webassembly

287
00:10:16,680 --> 00:10:18,180
to now be interesting in Cloud

288
00:10:18,180 --> 00:10:20,160
environments as well as Edge iot

289
00:10:20,160 --> 00:10:22,980
Computing environments

290
00:10:22,980 --> 00:10:24,720
there's a number of systems programming

291
00:10:24,720 --> 00:10:27,000
languages that can Target webassembly so

292
00:10:27,000 --> 00:10:30,779
c c plus c sharp rust go Swift and

293
00:10:30,779 --> 00:10:33,060
python can all can be compiled to

294
00:10:33,060 --> 00:10:35,399
webassembly

295
00:10:35,399 --> 00:10:37,620
and the way the way it works is you you

296
00:10:37,620 --> 00:10:39,000
write code in the programming language

297
00:10:39,000 --> 00:10:40,800
of your choice

298
00:10:40,800 --> 00:10:44,040
you compile that to a webassembly binary

299
00:10:44,040 --> 00:10:45,899
and then you host that webassembly

300
00:10:45,899 --> 00:10:48,720
binary in your application binary and

301
00:10:48,720 --> 00:10:51,060
the web assembly itself executes in a

302
00:10:51,060 --> 00:10:52,380
sandbox

303
00:10:52,380 --> 00:10:54,540
and the host application here is in full

304
00:10:54,540 --> 00:10:56,940
control so it's a deny by default model

305
00:10:56,940 --> 00:10:59,339
where the application has to Grant

306
00:10:59,339 --> 00:11:02,100
access rather than restrict access and

307
00:11:02,100 --> 00:11:04,200
the basic instruction set of webassembly

308
00:11:04,200 --> 00:11:05,820
doesn't allow anything more than pure

309
00:11:05,820 --> 00:11:08,459
functions so just math on memory that's

310
00:11:08,459 --> 00:11:11,100
basically all you can do so that means

311
00:11:11,100 --> 00:11:12,720
that the the web assembly that's running

312
00:11:12,720 --> 00:11:15,180
in that sandbox it can't open ports it

313
00:11:15,180 --> 00:11:16,920
can't read or write files it can't read

314
00:11:16,920 --> 00:11:19,320
or write shared memory the application

315
00:11:19,320 --> 00:11:21,839
can also budget the number of

316
00:11:21,839 --> 00:11:23,820
instructions that the web assembly can

317
00:11:23,820 --> 00:11:25,380
execute or limit the amount of memory

318
00:11:25,380 --> 00:11:26,640
that can be used

319
00:11:26,640 --> 00:11:29,339
and just before I move on there's been a

320
00:11:29,339 --> 00:11:31,380
lot of work that many have done to to

321
00:11:31,380 --> 00:11:33,720
sandbox applications already right like

322
00:11:33,720 --> 00:11:36,839
secure boot app armor profiles c groups

323
00:11:36,839 --> 00:11:39,060
your Docker environment all these kind

324
00:11:39,060 --> 00:11:41,700
of things that remains complementary to

325
00:11:41,700 --> 00:11:43,860
the webassembly sandbox webassembly is

326
00:11:43,860 --> 00:11:46,260
really a Sandbox even further inside the

327
00:11:46,260 --> 00:11:48,120
application that's you know right around

328
00:11:48,120 --> 00:11:51,300
the web assembly itself

329
00:11:51,300 --> 00:11:54,240
so VA is the web assembly execution

330
00:11:54,240 --> 00:11:56,519
engine and sandbox that runs both in

331
00:11:56,519 --> 00:11:58,920
node.js and in Chrome

332
00:11:58,920 --> 00:12:01,620
there have been attempts to move V8 into

333
00:12:01,620 --> 00:12:03,060
other environments although what's

334
00:12:03,060 --> 00:12:05,339
become more popular recently are these

335
00:12:05,339 --> 00:12:07,260
client runtimes that you can use as a

336
00:12:07,260 --> 00:12:09,779
library and this there's been an

337
00:12:09,779 --> 00:12:10,860
explosion of these there's probably

338
00:12:10,860 --> 00:12:13,860
between 10 and 30 of them and there's a

339
00:12:13,860 --> 00:12:15,300
lot of innovation happening here they're

340
00:12:15,300 --> 00:12:16,860
evolving very quickly and I'll show an

341
00:12:16,860 --> 00:12:19,440
example later in the presentation

342
00:12:19,440 --> 00:12:20,700
there's two other things worth

343
00:12:20,700 --> 00:12:22,740
mentioning about webassembly the first

344
00:12:22,740 --> 00:12:25,800
is this webassembly systems interface or

345
00:12:25,800 --> 00:12:28,620
Wazi so with such a limited instruction

346
00:12:28,620 --> 00:12:32,880
set in in basic web assembly this is an

347
00:12:32,880 --> 00:12:34,380
extension where you can do things like

348
00:12:34,380 --> 00:12:36,899
open ports or do file i o I'm not

349
00:12:36,899 --> 00:12:39,120
interested in Wazi at all I'm really

350
00:12:39,120 --> 00:12:40,980
only interested in webassembly for Pure

351
00:12:40,980 --> 00:12:43,560
functions as I'll show later

352
00:12:43,560 --> 00:12:46,019
another thing I am interested in is this

353
00:12:46,019 --> 00:12:47,820
component model so this is the idea of

354
00:12:47,820 --> 00:12:50,220
declarity declaratively composing

355
00:12:50,220 --> 00:12:52,440
webassembly modules in order to make

356
00:12:52,440 --> 00:12:55,139
useful services or applications so an

357
00:12:55,139 --> 00:12:56,760
application may need

358
00:12:56,760 --> 00:12:58,860
um a key value store in order to spare

359
00:12:58,860 --> 00:13:00,839
store state so it would just declare

360
00:13:00,839 --> 00:13:02,519
that and that could be provided in the

361
00:13:02,519 --> 00:13:04,920
infrastructure without the application

362
00:13:04,920 --> 00:13:07,139
developer carrying how it's implemented

363
00:13:07,139 --> 00:13:09,720
I think there's also some wins here

364
00:13:09,720 --> 00:13:11,700
potentially for s-bombs so that we could

365
00:13:11,700 --> 00:13:13,440
develop them around application

366
00:13:13,440 --> 00:13:16,200
capabilities not just around the library

367
00:13:16,200 --> 00:13:18,720
versions that they're using and it would

368
00:13:18,720 --> 00:13:20,100
it would work well with machine

369
00:13:20,100 --> 00:13:22,019
automation

370
00:13:22,019 --> 00:13:24,420
okay changing gears a little bit I want

371
00:13:24,420 --> 00:13:26,160
to demonstrate now through some source

372
00:13:26,160 --> 00:13:27,540
code what it would be like to be an

373
00:13:27,540 --> 00:13:29,040
application developer or service

374
00:13:29,040 --> 00:13:31,260
provider using webassembly and some of

375
00:13:31,260 --> 00:13:33,360
the advantages that come from it

376
00:13:33,360 --> 00:13:35,940
so in order to do that I'm going to use

377
00:13:35,940 --> 00:13:37,800
a motivating example of this point of

378
00:13:37,800 --> 00:13:39,959
sale terminal where it calculates the

379
00:13:39,959 --> 00:13:41,880
the total price for a number of items

380
00:13:41,880 --> 00:13:43,980
displays that to the customer before

381
00:13:43,980 --> 00:13:46,380
accepting payment and the example is a

382
00:13:46,380 --> 00:13:47,760
little bit contrived but I wanted

383
00:13:47,760 --> 00:13:49,740
something that's fairly easy to digest

384
00:13:49,740 --> 00:13:52,139
as as part of this presentation

385
00:13:52,139 --> 00:13:54,240
and I'm going to begin using a kind of

386
00:13:54,240 --> 00:13:55,560
traditional approach to software

387
00:13:55,560 --> 00:13:57,660
development and the programming language

388
00:13:57,660 --> 00:14:00,420
I'm using here is rust

389
00:14:00,420 --> 00:14:02,579
so here's the function that calculates

390
00:14:02,579 --> 00:14:04,380
the price and it's quite simple it just

391
00:14:04,380 --> 00:14:06,600
takes the count of items and multiplies

392
00:14:06,600 --> 00:14:08,279
by the unit price

393
00:14:08,279 --> 00:14:10,200
and then here's how it's used so here

394
00:14:10,200 --> 00:14:11,700
the count and the unit price are

395
00:14:11,700 --> 00:14:13,260
hard-coded but you know in the real

396
00:14:13,260 --> 00:14:15,600
world those would be external inputs it

397
00:14:15,600 --> 00:14:17,880
calls the price function to calculate

398
00:14:17,880 --> 00:14:19,800
the total price

399
00:14:19,800 --> 00:14:21,540
then it puts some restrictions around

400
00:14:21,540 --> 00:14:23,940
nonsensical prices what I'm doing here

401
00:14:23,940 --> 00:14:27,120
is kind of hinting it a firmware code

402
00:14:27,120 --> 00:14:29,000
that would protect against Bad inputs

403
00:14:29,000 --> 00:14:31,260
and this would be code that I would not

404
00:14:31,260 --> 00:14:33,180
be iterating on

405
00:14:33,180 --> 00:14:36,240
and then finally it Returns the price

406
00:14:36,240 --> 00:14:37,980
okay so now that we've kind of laid the

407
00:14:37,980 --> 00:14:39,420
foundation let's take a look at what it

408
00:14:39,420 --> 00:14:41,880
would be like to make a code change

409
00:14:41,880 --> 00:14:43,320
so let's say we want to introduce

410
00:14:43,320 --> 00:14:45,779
off-peak pricing so from 11 at night to

411
00:14:45,779 --> 00:14:47,160
11 in the morning we'll charge a

412
00:14:47,160 --> 00:14:49,199
different price so we go back to the

413
00:14:49,199 --> 00:14:50,699
price function

414
00:14:50,699 --> 00:14:52,620
and we're going to modify it now to

415
00:14:52,620 --> 00:14:55,019
charge the peak price during these hours

416
00:14:55,019 --> 00:14:57,300
and then discount the price by half

417
00:14:57,300 --> 00:14:59,579
outside of those hours

418
00:14:59,579 --> 00:15:02,519
and then we need to pass in now that the

419
00:15:02,519 --> 00:15:04,440
hour of the day into our price function

420
00:15:04,440 --> 00:15:06,600
but otherwise calculating the price is

421
00:15:06,600 --> 00:15:09,060
roughly unchanged

422
00:15:09,060 --> 00:15:11,100
and now in order to deploy this to the

423
00:15:11,100 --> 00:15:12,480
point of sale terminal we need to go

424
00:15:12,480 --> 00:15:14,100
through this long process that could

425
00:15:14,100 --> 00:15:16,260
take weeks months or years for this very

426
00:15:16,260 --> 00:15:18,000
very tiny code change to reach our

427
00:15:18,000 --> 00:15:20,279
customers

428
00:15:20,279 --> 00:15:21,959
now let's take a look at this motivating

429
00:15:21,959 --> 00:15:25,500
example if we were using webassembly

430
00:15:25,500 --> 00:15:29,279
so the first step to use webassembly in

431
00:15:29,279 --> 00:15:31,139
this motivating example is to extract

432
00:15:31,139 --> 00:15:33,720
the price function into a library and

433
00:15:33,720 --> 00:15:35,459
the way we do that is just adding this

434
00:15:35,459 --> 00:15:38,160
no mangle and extern C around the

435
00:15:38,160 --> 00:15:40,440
function and this just allows the the

436
00:15:40,440 --> 00:15:42,300
library to be called from programming

437
00:15:42,300 --> 00:15:44,459
languages other than rust

438
00:15:44,459 --> 00:15:46,860
and once we've done that we compile that

439
00:15:46,860 --> 00:15:50,959
rust code into a webassembly binary

440
00:15:51,060 --> 00:15:52,560
and then we need to load that

441
00:15:52,560 --> 00:15:55,620
webassembly binary into our firmware and

442
00:15:55,620 --> 00:15:59,339
here I'm using the wasm time client

443
00:15:59,339 --> 00:16:02,040
so that that's the webassembly binary

444
00:16:02,040 --> 00:16:04,440
there in a file being loaded

445
00:16:04,440 --> 00:16:07,320
and then we're creating an instance of a

446
00:16:07,320 --> 00:16:09,600
Sandbox in which that webassembly code

447
00:16:09,600 --> 00:16:12,000
will be hosted and executed

448
00:16:12,000 --> 00:16:14,339
and then we're exporting from that

449
00:16:14,339 --> 00:16:16,740
sandbox to price function and this is an

450
00:16:16,740 --> 00:16:18,959
example of how the host application is

451
00:16:18,959 --> 00:16:21,420
in full control of what is exported from

452
00:16:21,420 --> 00:16:24,540
the webassembly module

453
00:16:24,540 --> 00:16:27,320
then finally we need to to call that

454
00:16:27,320 --> 00:16:29,940
webassembly price function so it program

455
00:16:29,940 --> 00:16:31,320
looks pretty much the same as before

456
00:16:31,320 --> 00:16:32,940
just with slightly different calling

457
00:16:32,940 --> 00:16:34,860
conventions around the price function

458
00:16:34,860 --> 00:16:36,480
because it's being executed in that

459
00:16:36,480 --> 00:16:38,160
webassembly sandbox

460
00:16:38,160 --> 00:16:40,740
and a bit easier to compare side by side

461
00:16:40,740 --> 00:16:43,019
this is our program before and after so

462
00:16:43,019 --> 00:16:44,579
we do need to load that web assembly

463
00:16:44,579 --> 00:16:47,699
into the firmware but otherwise the only

464
00:16:47,699 --> 00:16:49,139
difference is really just this slightly

465
00:16:49,139 --> 00:16:51,420
different calling convention

466
00:16:51,420 --> 00:16:53,519
okay now that we're using webassembly

467
00:16:53,519 --> 00:16:55,079
let's take a look at what it would be

468
00:16:55,079 --> 00:16:57,000
like to make a small code change

469
00:16:57,000 --> 00:16:59,220
so in addition to that off-peak pricing

470
00:16:59,220 --> 00:17:01,199
let's also do happy hour pricing between

471
00:17:01,199 --> 00:17:02,940
2 and 5 PM

472
00:17:02,940 --> 00:17:05,220
so we go back to our price function and

473
00:17:05,220 --> 00:17:08,220
we modify it again to return the full

474
00:17:08,220 --> 00:17:10,140
price during a more restricted set of

475
00:17:10,140 --> 00:17:12,119
hours and then discount the price by

476
00:17:12,119 --> 00:17:14,520
half outside of those hours

477
00:17:14,520 --> 00:17:16,859
because we changed the price function we

478
00:17:16,859 --> 00:17:19,980
need to rebuild that webassembly binary

479
00:17:19,980 --> 00:17:21,599
but then when we go look at the firmware

480
00:17:21,599 --> 00:17:23,819
we don't need to make any changes and

481
00:17:23,819 --> 00:17:25,199
this is really the the kind of the key

482
00:17:25,199 --> 00:17:27,660
point of the presentation is that I'm

483
00:17:27,660 --> 00:17:30,419
able to iterate on my price function

484
00:17:30,419 --> 00:17:32,340
and make changes to it without having to

485
00:17:32,340 --> 00:17:34,260
make changes to Firmware and I can do so

486
00:17:34,260 --> 00:17:37,820
safely and securely

487
00:17:38,039 --> 00:17:41,580
that's the point no firmware changes

488
00:17:41,580 --> 00:17:43,260
um okay so this rages raises some

489
00:17:43,260 --> 00:17:45,360
questions how do we distribute that new

490
00:17:45,360 --> 00:17:48,360
code to the that edge iot device now the

491
00:17:48,360 --> 00:17:50,460
web assembly is only about 300 bytes

492
00:17:50,460 --> 00:17:53,220
base64 encoded and it's pretty common

493
00:17:53,220 --> 00:17:55,919
that edge iot devices are are managed

494
00:17:55,919 --> 00:17:57,360
through some kind of desired State

495
00:17:57,360 --> 00:17:59,220
configuration so why not just take

496
00:17:59,220 --> 00:18:01,679
advantage of that so it's not uncommon

497
00:18:01,679 --> 00:18:03,240
to have some kind of Json document

498
00:18:03,240 --> 00:18:05,400
describing the desired state in this

499
00:18:05,400 --> 00:18:07,559
case it might have the the language and

500
00:18:07,559 --> 00:18:08,940
the tax rate and those kind of things

501
00:18:08,940 --> 00:18:11,100
for the point of sale terminal so we can

502
00:18:11,100 --> 00:18:13,380
just include the price function as sine

503
00:18:13,380 --> 00:18:16,799
base64 encoded string in order to

504
00:18:16,799 --> 00:18:18,299
distribute it

505
00:18:18,299 --> 00:18:19,980
and we can take this process that used

506
00:18:19,980 --> 00:18:22,200
to take weeks months or years for a very

507
00:18:22,200 --> 00:18:23,820
small code change to reach our customers

508
00:18:23,820 --> 00:18:26,160
and we can choose to Short Circuit it at

509
00:18:26,160 --> 00:18:28,020
any point and I would make the argument

510
00:18:28,020 --> 00:18:30,299
here that since the price function is a

511
00:18:30,299 --> 00:18:32,280
pure function it can be entirely unit

512
00:18:32,280 --> 00:18:34,860
tested that we could make that code

513
00:18:34,860 --> 00:18:37,380
change repackage it and redeploy it

514
00:18:37,380 --> 00:18:39,120
without going through component testing

515
00:18:39,120 --> 00:18:42,539
integration testing and the rest

516
00:18:42,539 --> 00:18:45,900
okay before I conclude some challenges

517
00:18:45,900 --> 00:18:48,720
and a bit of caution

518
00:18:48,720 --> 00:18:50,640
some people are going to object to

519
00:18:50,640 --> 00:18:54,360
changing run you know code at runtime

520
00:18:54,360 --> 00:18:56,940
the first objection I hear to that is

521
00:18:56,940 --> 00:18:59,039
security but remember here we are using

522
00:18:59,039 --> 00:19:01,260
webassembly so it's running first of all

523
00:19:01,260 --> 00:19:03,240
the webassembly is signed it's running

524
00:19:03,240 --> 00:19:04,980
in a sandbox with a very limited

525
00:19:04,980 --> 00:19:07,200
instruction set and I'm also assuming

526
00:19:07,200 --> 00:19:08,820
that the firmware is already protecting

527
00:19:08,820 --> 00:19:11,820
against Bad input and bad output

528
00:19:11,820 --> 00:19:13,200
the next objection is around

529
00:19:13,200 --> 00:19:15,780
combinatorial testing if so if you can

530
00:19:15,780 --> 00:19:17,160
change code at runtime how are you going

531
00:19:17,160 --> 00:19:18,539
to test all these different combinations

532
00:19:18,539 --> 00:19:20,400
I think this is a problem that already

533
00:19:20,400 --> 00:19:22,620
exists that sometimes gets ignored often

534
00:19:22,620 --> 00:19:24,720
Edge iot devices have a large number of

535
00:19:24,720 --> 00:19:26,520
configuration parameters that change

536
00:19:26,520 --> 00:19:28,919
behavior and you already have a

537
00:19:28,919 --> 00:19:30,539
combinatorial testing problem so it

538
00:19:30,539 --> 00:19:32,640
doesn't really make it any worse

539
00:19:32,640 --> 00:19:34,440
and then the third objection is tracking

540
00:19:34,440 --> 00:19:36,059
version so someone calls your customer

541
00:19:36,059 --> 00:19:37,559
support line how are you even going to

542
00:19:37,559 --> 00:19:38,700
know what kind of code they're running

543
00:19:38,700 --> 00:19:41,039
if it can change again I think this is

544
00:19:41,039 --> 00:19:43,020
really just back to the having a large

545
00:19:43,020 --> 00:19:44,820
number of configuration parameters that

546
00:19:44,820 --> 00:19:46,559
change Behavior you need to be able to

547
00:19:46,559 --> 00:19:48,480
track that well over time and it's just

548
00:19:48,480 --> 00:19:50,220
motivating doing a good job at these

549
00:19:50,220 --> 00:19:52,080
things

550
00:19:52,080 --> 00:19:53,820
okay picking a language can be

551
00:19:53,820 --> 00:19:54,900
challenging

552
00:19:54,900 --> 00:19:57,900
so in systems programming I really don't

553
00:19:57,900 --> 00:19:59,580
think we should be using C or C plus

554
00:19:59,580 --> 00:20:01,380
plus anymore those languages are just

555
00:20:01,380 --> 00:20:03,539
too dangerous so if we're doing new

556
00:20:03,539 --> 00:20:05,280
develop developing you know Greenfield

557
00:20:05,280 --> 00:20:06,960
applications I think we should stay away

558
00:20:06,960 --> 00:20:09,120
from those languages as an industry

559
00:20:09,120 --> 00:20:11,160
python is kind of awkward with

560
00:20:11,160 --> 00:20:12,960
webassembly because it's an interpreted

561
00:20:12,960 --> 00:20:15,000
language The Interpreter itself needs to

562
00:20:15,000 --> 00:20:16,740
go in the web assembly kind of awkward

563
00:20:16,740 --> 00:20:19,260
go is a garbage collected language so

564
00:20:19,260 --> 00:20:20,340
you need to deal with the garbage

565
00:20:20,340 --> 00:20:22,440
collection inside the web assembly I

566
00:20:22,440 --> 00:20:24,660
think the clear winner is is rust for

567
00:20:24,660 --> 00:20:25,980
new development

568
00:20:25,980 --> 00:20:28,140
um you know Russ is a great has really

569
00:20:28,140 --> 00:20:29,820
really great tooling for web assembly

570
00:20:29,820 --> 00:20:31,380
it's also you know functional

571
00:20:31,380 --> 00:20:33,000
programming language has lots of other

572
00:20:33,000 --> 00:20:34,740
benefits

573
00:20:34,740 --> 00:20:35,460
um

574
00:20:35,460 --> 00:20:37,320
if you're moving Legacy code into

575
00:20:37,320 --> 00:20:38,940
webassembly especially if you're hosting

576
00:20:38,940 --> 00:20:40,260
it in different environments it may make

577
00:20:40,260 --> 00:20:41,280
sense to look at these other

578
00:20:41,280 --> 00:20:43,440
applications targeting it but for new

579
00:20:43,440 --> 00:20:46,140
development definitely look at rust of

580
00:20:46,140 --> 00:20:47,460
course there's lots of reasons to use

581
00:20:47,460 --> 00:20:50,820
rust in ICS in iot environments if

582
00:20:50,820 --> 00:20:51,960
you're not familiar with those

583
00:20:51,960 --> 00:20:53,640
motivations I would recommend watching

584
00:20:53,640 --> 00:20:55,440
this talk from this conference from a

585
00:20:55,440 --> 00:20:58,080
couple of years ago

586
00:20:58,080 --> 00:21:00,600
okay picking a runtime is actually quite

587
00:21:00,600 --> 00:21:01,860
challenging

588
00:21:01,860 --> 00:21:04,020
as I mentioned there's these whole

589
00:21:04,020 --> 00:21:06,539
number of client runtimes that you use

590
00:21:06,539 --> 00:21:09,360
as a library the key here you want a

591
00:21:09,360 --> 00:21:10,980
nice development experience for your

592
00:21:10,980 --> 00:21:12,660
developers so nice interfaces good

593
00:21:12,660 --> 00:21:14,100
documentation those kind of things but

594
00:21:14,100 --> 00:21:15,539
really key is that this is what

595
00:21:15,539 --> 00:21:17,940
implements the sandbox so the Integrity

596
00:21:17,940 --> 00:21:20,340
of this approach really comes from the

597
00:21:20,340 --> 00:21:22,260
Integrity of that sandbox

598
00:21:22,260 --> 00:21:25,320
and you know the reason we trust V8 in

599
00:21:25,320 --> 00:21:27,660
the browser is because of the scrutiny

600
00:21:27,660 --> 00:21:29,520
it's had over the years and these

601
00:21:29,520 --> 00:21:31,260
runtimes have not had that level of

602
00:21:31,260 --> 00:21:33,539
scrutiny yet I think the leader here is

603
00:21:33,539 --> 00:21:34,980
wasn't time

604
00:21:34,980 --> 00:21:37,020
wasn't time is written in Rust rather

605
00:21:37,020 --> 00:21:38,940
than C or C plus plus like some of the

606
00:21:38,940 --> 00:21:40,740
other ones and they've also been very

607
00:21:40,740 --> 00:21:43,799
very uh open about their vulnerability

608
00:21:43,799 --> 00:21:47,039
disclosure policy their use of cargo vet

609
00:21:47,039 --> 00:21:49,980
which is a in the rust tool chain for

610
00:21:49,980 --> 00:21:52,039
um for securing their supply chain

611
00:21:52,039 --> 00:21:55,080
limiting the use of insecure or unsafe

612
00:21:55,080 --> 00:21:58,559
rust fuzz testing use of formal methods

613
00:21:58,559 --> 00:22:01,140
and I think if these other run times are

614
00:22:01,140 --> 00:22:02,640
going to remain relevant they're going

615
00:22:02,640 --> 00:22:04,380
to need to follow suit and with this

616
00:22:04,380 --> 00:22:07,140
kind of open approach

617
00:22:07,140 --> 00:22:09,539
okay and the final uh kind of objection

618
00:22:09,539 --> 00:22:11,400
or piece of caution I get is why not

619
00:22:11,400 --> 00:22:12,960
just use Docker to solve this problem or

620
00:22:12,960 --> 00:22:14,700
why not just you know distribute a

621
00:22:14,700 --> 00:22:16,980
binary to the edge

622
00:22:16,980 --> 00:22:19,020
so at this conference last year if you

623
00:22:19,020 --> 00:22:21,419
didn't see the solar winds Sunburst

624
00:22:21,419 --> 00:22:22,980
presentation I highly recommend watching

625
00:22:22,980 --> 00:22:25,020
it very very interesting talk and and

626
00:22:25,020 --> 00:22:26,940
really that's teaching us that you know

627
00:22:26,940 --> 00:22:29,520
even trusted code can be vulnerable so

628
00:22:29,520 --> 00:22:30,720
one of the real advantages with

629
00:22:30,720 --> 00:22:33,000
webassembly is it's a very very limited

630
00:22:33,000 --> 00:22:35,159
instruction set so it limits what you

631
00:22:35,159 --> 00:22:37,940
can do it you can't do much of anything

632
00:22:37,940 --> 00:22:40,980
I think that is reason alone to be

633
00:22:40,980 --> 00:22:42,780
interested in webassembly for solving

634
00:22:42,780 --> 00:22:44,880
these problems but even if even if

635
00:22:44,880 --> 00:22:47,220
that's you know not your cup of tea if

636
00:22:47,220 --> 00:22:49,039
you have to deal with multiple

637
00:22:49,039 --> 00:22:50,640
environments you're going to have to

638
00:22:50,640 --> 00:22:52,380
deal with portability you might end up

639
00:22:52,380 --> 00:22:54,659
with pretty large containers or binaries

640
00:22:54,659 --> 00:22:56,400
you need to deal with that problem when

641
00:22:56,400 --> 00:22:58,140
the sub webassembly binaries are

642
00:22:58,140 --> 00:22:59,580
extremely small they start really

643
00:22:59,580 --> 00:23:00,960
quickly

644
00:23:00,960 --> 00:23:01,919
um

645
00:23:01,919 --> 00:23:04,919
and if you're if you're dealing with um

646
00:23:04,919 --> 00:23:07,919
Docker updates and depending on how you

647
00:23:07,919 --> 00:23:09,900
have your secure boot implemented it can

648
00:23:09,900 --> 00:23:11,760
be really problematic to mix those two

649
00:23:11,760 --> 00:23:13,620
things together so I think in the limit

650
00:23:13,620 --> 00:23:15,179
if you're going to go and address these

651
00:23:15,179 --> 00:23:16,880
problems on your own you're kind of

652
00:23:16,880 --> 00:23:19,080
Reinventing webassembly and all the

653
00:23:19,080 --> 00:23:20,940
problems it's solving so why not

654
00:23:20,940 --> 00:23:24,059
investigate webassembly first I think

655
00:23:24,059 --> 00:23:25,799
probably also doing these things on your

656
00:23:25,799 --> 00:23:27,240
own rather than in a broader Community

657
00:23:27,240 --> 00:23:28,860
you're probably not going to do a better

658
00:23:28,860 --> 00:23:30,840
job

659
00:23:30,840 --> 00:23:33,299
okay summing up

660
00:23:33,299 --> 00:23:35,700
I think webassembly is really

661
00:23:35,700 --> 00:23:38,159
interesting because of its sandboxed

662
00:23:38,159 --> 00:23:41,159
deny by default security model that puts

663
00:23:41,159 --> 00:23:43,860
the host application in full control as

664
00:23:43,860 --> 00:23:45,360
well as its really limited instruction

665
00:23:45,360 --> 00:23:47,039
set

666
00:23:47,039 --> 00:23:48,780
um that's that's an advantage in terms

667
00:23:48,780 --> 00:23:50,039
of its security

668
00:23:50,039 --> 00:23:52,200
it also has portability so I can run the

669
00:23:52,200 --> 00:23:54,240
same code in the cloud on the edge in

670
00:23:54,240 --> 00:23:56,460
the browser in a mobile environment and

671
00:23:56,460 --> 00:23:57,780
it can do all that at near native

672
00:23:57,780 --> 00:24:00,360
execution

673
00:24:00,360 --> 00:24:02,159
webassembly is really interesting in the

674
00:24:02,159 --> 00:24:03,780
cloud in order to take more and more

675
00:24:03,780 --> 00:24:05,760
application code and move it down into

676
00:24:05,760 --> 00:24:07,320
the infrastructure to make that more

677
00:24:07,320 --> 00:24:10,080
manageable easier to patch

678
00:24:10,080 --> 00:24:12,000
and I think it's very very interesting

679
00:24:12,000 --> 00:24:13,620
and blurring the distinction between

680
00:24:13,620 --> 00:24:15,539
Edge and cloud and allowing us to

681
00:24:15,539 --> 00:24:17,940
develop more sophistic sophisticated

682
00:24:17,940 --> 00:24:20,600
applications

683
00:24:20,940 --> 00:24:23,039
okay so this is a bit of a food for

684
00:24:23,039 --> 00:24:25,020
thought presentation I'm not actually

685
00:24:25,020 --> 00:24:27,059
using webassembly like this in any

686
00:24:27,059 --> 00:24:28,380
production environments although I've

687
00:24:28,380 --> 00:24:30,539
been doing a lot of prototyping and

688
00:24:30,539 --> 00:24:32,280
proof of concept work around it lately

689
00:24:32,280 --> 00:24:34,500
so if if you're interested in this

690
00:24:34,500 --> 00:24:36,059
please come talk to me if you think the

691
00:24:36,059 --> 00:24:38,059
idea is crazy please come talk to me

692
00:24:38,059 --> 00:24:40,620
there's links in these two articles on

693
00:24:40,620 --> 00:24:42,179
my blog to about everything I talked

694
00:24:42,179 --> 00:24:43,440
about here today if you want some

695
00:24:43,440 --> 00:24:44,880
references

696
00:24:44,880 --> 00:24:47,760
so you were for Tesla and just wondering

697
00:24:47,760 --> 00:24:51,000
where does webassembly fit within Tesla

698
00:24:51,000 --> 00:24:54,440
or is this a side project

699
00:24:55,440 --> 00:24:56,820
this is definitely a personal

700
00:24:56,820 --> 00:24:58,740
presentation I'm not representing my

701
00:24:58,740 --> 00:25:01,679
work here I mean Tesla clearly operates

702
00:25:01,679 --> 00:25:04,980
a lot of edge iot devices that's what I

703
00:25:04,980 --> 00:25:06,900
work on day to day that's motivating my

704
00:25:06,900 --> 00:25:09,419
interest in webassembly not actually

705
00:25:09,419 --> 00:25:13,460
using it in any of the systems I build

706
00:25:14,340 --> 00:25:17,360
okay thank you

707
00:25:18,179 --> 00:25:20,460
so uh

708
00:25:20,460 --> 00:25:24,480
given given the limitations around Tesla

709
00:25:24,480 --> 00:25:26,880
um what who is going to be the first

710
00:25:26,880 --> 00:25:29,940
mover on these iot Edge use cases or who

711
00:25:29,940 --> 00:25:32,340
is like where where can we see examples

712
00:25:32,340 --> 00:25:34,679
of this being deployed

713
00:25:34,679 --> 00:25:36,960
I would go look at those those run times

714
00:25:36,960 --> 00:25:40,279
so you know wasm time wasmer

715
00:25:40,279 --> 00:25:43,260
wasm Edge go look at the companies that

716
00:25:43,260 --> 00:25:44,700
are using those

717
00:25:44,700 --> 00:25:47,220
um there's wasn't times being used in a

718
00:25:47,220 --> 00:25:48,659
lot of plays that's what's fastly is

719
00:25:48,659 --> 00:25:50,220
using

720
00:25:50,220 --> 00:25:52,980
um and also look at the wasm cloud

721
00:25:52,980 --> 00:25:55,980
project that's very very interesting

722
00:25:55,980 --> 00:25:56,880
um

723
00:25:56,880 --> 00:25:58,440
yeah trying to I'm trying to think of

724
00:25:58,440 --> 00:26:01,500
some examples that are in Edge iot Edge

725
00:26:01,500 --> 00:26:04,980
iot is really yeah really really new

726
00:26:04,980 --> 00:26:06,900
um there I think one of those runtimes

727
00:26:06,900 --> 00:26:08,940
is coming out of IBM and they're the

728
00:26:08,940 --> 00:26:10,799
plot The Edge platform that they

729
00:26:10,799 --> 00:26:12,360
developed

730
00:26:12,360 --> 00:26:14,820
um it I can't say that they're like a

731
00:26:14,820 --> 00:26:17,820
canonical example of success there yet I

732
00:26:17,820 --> 00:26:19,620
would say that this is very very new

733
00:26:19,620 --> 00:26:22,620
very very promising but I wouldn't say

734
00:26:22,620 --> 00:26:25,740
yeah there's not a canonical you know

735
00:26:25,740 --> 00:26:28,260
here we did it

736
00:26:28,260 --> 00:26:29,940
or at least a company being open about

737
00:26:29,940 --> 00:26:32,240
that

738
00:26:33,779 --> 00:26:37,020
I keep wondering if iot Edge is really

739
00:26:37,020 --> 00:26:39,380
really going to be short-lived

740
00:26:39,380 --> 00:26:43,200
as just Cloud adoption you know takes

741
00:26:43,200 --> 00:26:45,740
you know the uptick is significant right

742
00:26:45,740 --> 00:26:48,360
so I mean do you think this is something

743
00:26:48,360 --> 00:26:50,460
that ultimately webassembly would move

744
00:26:50,460 --> 00:26:53,220
us you know more toward the cloud and

745
00:26:53,220 --> 00:26:56,100
just like iot Edge kind of dying off or

746
00:26:56,100 --> 00:26:57,840
any thoughts on the trend around that no

747
00:26:57,840 --> 00:26:59,340
I think the trends actually going the

748
00:26:59,340 --> 00:27:01,320
other way or the iot edge is becoming

749
00:27:01,320 --> 00:27:03,960
more iot when I think iot Edge I'm

750
00:27:03,960 --> 00:27:05,960
really talking critical infrastructure

751
00:27:05,960 --> 00:27:08,520
electric vehicle Chargers virtual power

752
00:27:08,520 --> 00:27:10,140
plants I mean these are critical

753
00:27:10,140 --> 00:27:13,140
infrastructure now those things need to

754
00:27:13,140 --> 00:27:15,539
be able to operate autonomously so you

755
00:27:15,539 --> 00:27:17,880
can you know charge your car without the

756
00:27:17,880 --> 00:27:20,159
cloud so I think it's going the other

757
00:27:20,159 --> 00:27:22,080
way the other thing driving it it's a

758
00:27:22,080 --> 00:27:23,640
You Know Rich services at the edge

759
00:27:23,640 --> 00:27:25,980
operating autonomously is is driving it

760
00:27:25,980 --> 00:27:27,440
towards the edge

761
00:27:27,440 --> 00:27:30,659
the other the other thing is cost the

762
00:27:30,659 --> 00:27:33,059
Cloud's expensive so if you if you can

763
00:27:33,059 --> 00:27:36,240
take advantage of even constrained

764
00:27:36,240 --> 00:27:38,279
Computing environments to run some of

765
00:27:38,279 --> 00:27:41,460
that code it's essentially free and you

766
00:27:41,460 --> 00:27:43,200
can you could deliver even more

767
00:27:43,200 --> 00:27:45,840
sophisticated services at very low cost

768
00:27:45,840 --> 00:27:48,600
so looking at EVs and eventually we're

769
00:27:48,600 --> 00:27:50,159
going to have to report a lot of data

770
00:27:50,159 --> 00:27:51,779
out of them for the life cycle

771
00:27:51,779 --> 00:27:54,240
management of the batteries right uh do

772
00:27:54,240 --> 00:27:56,220
you see this web assembly helping with

773
00:27:56,220 --> 00:27:57,779
that with iot devices you're talking

774
00:27:57,779 --> 00:27:59,460
about any Edge because then it can

775
00:27:59,460 --> 00:28:01,320
quickly pull that data once you get a

776
00:28:01,320 --> 00:28:02,820
charge and tell you what type of charge

777
00:28:02,820 --> 00:28:04,799
it was so you can figure out you know

778
00:28:04,799 --> 00:28:06,720
how that the hard charging and things

779
00:28:06,720 --> 00:28:08,159
yeah well they're commenting too much

780
00:28:08,159 --> 00:28:10,740
about EVS or anything like that uh yeah

781
00:28:10,740 --> 00:28:12,480
it's gonna what is webassembly would

782
00:28:12,480 --> 00:28:14,520
allow us to do there is imagine you

783
00:28:14,520 --> 00:28:16,679
could deliver richer services at the

784
00:28:16,679 --> 00:28:18,600
edge to you know look through data do

785
00:28:18,600 --> 00:28:20,159
anomaly detection those kind of things

786
00:28:20,159 --> 00:28:21,960
and then only report what's of interest

787
00:28:21,960 --> 00:28:24,659
to the cloud versus reporting all of the

788
00:28:24,659 --> 00:28:25,799
data of the cloud which is quite

789
00:28:25,799 --> 00:28:27,440
expensive

790
00:28:27,440 --> 00:28:30,000
the problem there is is really the

791
00:28:30,000 --> 00:28:32,340
iteration cycle so you can report all

792
00:28:32,340 --> 00:28:34,440
the data to the cloud people can iterate

793
00:28:34,440 --> 00:28:37,799
very very quickly with low friction but

794
00:28:37,799 --> 00:28:39,179
if you want to do that at the edge how

795
00:28:39,179 --> 00:28:40,200
are you going to do that if you have

796
00:28:40,200 --> 00:28:41,880
these kind of long firmware release

797
00:28:41,880 --> 00:28:43,620
cycles and with and with people that are

798
00:28:43,620 --> 00:28:44,940
kind of risk adverse they don't want

799
00:28:44,940 --> 00:28:46,080
change because you might have

800
00:28:46,080 --> 00:28:48,240
malfunction so I think that's where

801
00:28:48,240 --> 00:28:49,980
webassembly might allow this better

802
00:28:49,980 --> 00:28:52,200
separation between firmware and software

803
00:28:52,200 --> 00:28:55,200
better interfaces more security better

804
00:28:55,200 --> 00:28:57,179
testability those kind of things so we

805
00:28:57,179 --> 00:28:59,220
can be more sophisticated about running

806
00:28:59,220 --> 00:29:01,020
those things at the edge

807
00:29:01,020 --> 00:29:02,050
thank you

808
00:29:02,050 --> 00:29:06,169
[Applause]

