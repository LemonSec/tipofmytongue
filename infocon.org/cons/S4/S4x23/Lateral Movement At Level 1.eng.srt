1
00:00:00,179 --> 00:00:03,179
foreign

2
00:00:04,740 --> 00:00:07,140
welcome everybody today I want to talk

3
00:00:07,140 --> 00:00:10,260
about lateral movement at level one and

4
00:00:10,260 --> 00:00:11,700
that's because there's quite a few

5
00:00:11,700 --> 00:00:14,219
devices at level one that sit at the

6
00:00:14,219 --> 00:00:16,619
intersection of different mixed networks

7
00:00:16,619 --> 00:00:19,080
they might be connected to an RF modem

8
00:00:19,080 --> 00:00:20,939
which talks to a wireless hard Network

9
00:00:20,939 --> 00:00:24,600
or to a Tetra Network where you can have

10
00:00:24,600 --> 00:00:26,820
scada communications or there might be

11
00:00:26,820 --> 00:00:29,160
field bus networks nested behind this

12
00:00:29,160 --> 00:00:31,439
device and even connections to

13
00:00:31,439 --> 00:00:33,719
third-party packaged units maintained by

14
00:00:33,719 --> 00:00:36,180
external parties and while there has

15
00:00:36,180 --> 00:00:37,980
been some research in the past on

16
00:00:37,980 --> 00:00:40,680
Upstream hacking from level one for

17
00:00:40,680 --> 00:00:43,020
example from an rtu all the way up to a

18
00:00:43,020 --> 00:00:44,640
scada there has been very little

19
00:00:44,640 --> 00:00:46,620
attention to arbitrary East-West

20
00:00:46,620 --> 00:00:48,899
movement at this level as well as deep

21
00:00:48,899 --> 00:00:51,420
Downstream movement

22
00:00:51,420 --> 00:00:54,059
so a question you might ask is why

23
00:00:54,059 --> 00:00:55,620
bother with this this is all stuff

24
00:00:55,620 --> 00:00:57,420
that's very deep down in the soft

25
00:00:57,420 --> 00:01:00,780
underbelly of OT you know why why care

26
00:01:00,780 --> 00:01:03,480
about this well because I might want to

27
00:01:03,480 --> 00:01:05,700
cross certain security perimeters that

28
00:01:05,700 --> 00:01:08,760
do exist at these levels after all if a

29
00:01:08,760 --> 00:01:10,979
device is multi-homed between different

30
00:01:10,979 --> 00:01:12,960
zones with different security profiles

31
00:01:12,960 --> 00:01:15,360
it is a perimeter device and it should

32
00:01:15,360 --> 00:01:17,340
be hardened accordingly in the same way

33
00:01:17,340 --> 00:01:19,740
that you would harden a workstation that

34
00:01:19,740 --> 00:01:22,799
sits between different security segments

35
00:01:22,799 --> 00:01:25,259
one example of this is something you can

36
00:01:25,259 --> 00:01:26,880
find in the interaction between the

37
00:01:26,880 --> 00:01:29,159
basic process control system and safety

38
00:01:29,159 --> 00:01:30,659
instrumented system architectures

39
00:01:30,659 --> 00:01:33,180
obviously this can be generalized to any

40
00:01:33,180 --> 00:01:35,159
set of distinct but interacting control

41
00:01:35,159 --> 00:01:38,040
systems but we take the bpcs sis

42
00:01:38,040 --> 00:01:40,979
interfacing as an example on the left of

43
00:01:40,979 --> 00:01:42,780
the slide you can see an increasingly

44
00:01:42,780 --> 00:01:45,240
common architecture where the bpcs and

45
00:01:45,240 --> 00:01:47,640
the sis basically interact at a level

46
00:01:47,640 --> 00:01:50,040
above level one and this segmentation is

47
00:01:50,040 --> 00:01:51,600
typically drawn through regular

48
00:01:51,600 --> 00:01:54,180
firewalling but another architecture you

49
00:01:54,180 --> 00:01:56,040
sometimes encounter is the so-called

50
00:01:56,040 --> 00:01:58,320
interfaced architecture where the

51
00:01:58,320 --> 00:02:00,659
controller in the bpcs has a direct

52
00:02:00,659 --> 00:02:02,820
point-to-point link to the safety

53
00:02:02,820 --> 00:02:04,740
controller and this can be a Serial link

54
00:02:04,740 --> 00:02:06,840
this can be an Ethernet link but what

55
00:02:06,840 --> 00:02:08,940
matters is that it is a very restricted

56
00:02:08,940 --> 00:02:11,280
point-to-point link

57
00:02:11,280 --> 00:02:13,500
now why would an attacker want to cross

58
00:02:13,500 --> 00:02:15,300
into these Safety Systems there are many

59
00:02:15,300 --> 00:02:17,700
obvious reasons for this but one of the

60
00:02:17,700 --> 00:02:20,520
reasons our so-called sis bypasses and

61
00:02:20,520 --> 00:02:22,020
for the people unfamiliar with this

62
00:02:22,020 --> 00:02:25,140
concept there's various good reasons why

63
00:02:25,140 --> 00:02:26,940
you might want to bypass safety

64
00:02:26,940 --> 00:02:29,099
functions for example as part of process

65
00:02:29,099 --> 00:02:31,140
startup as part of process transitions

66
00:02:31,140 --> 00:02:34,020
or regular scheduled maintenance and as

67
00:02:34,020 --> 00:02:35,400
you can see Illustrated in the

68
00:02:35,400 --> 00:02:38,520
simplified block on the slide a bypass

69
00:02:38,520 --> 00:02:41,160
allows you to bypass a single actuator a

70
00:02:41,160 --> 00:02:43,200
sensor or entire safety instrumented

71
00:02:43,200 --> 00:02:46,140
function within the sis but before you

72
00:02:46,140 --> 00:02:48,300
can activate a bypass it needs to be

73
00:02:48,300 --> 00:02:51,060
explicitly enabled now historically all

74
00:02:51,060 --> 00:02:52,920
of this stuff used to be hardwired but

75
00:02:52,920 --> 00:02:55,980
increasingly activation of bypasses is

76
00:02:55,980 --> 00:02:58,080
done through software signals including

77
00:02:58,080 --> 00:03:00,780
software signals sent from the bpcs to

78
00:03:00,780 --> 00:03:03,840
the sis however what you sometimes see

79
00:03:03,840 --> 00:03:05,640
is that the enabling of a specific

80
00:03:05,640 --> 00:03:08,400
bypass will require a Hardware switch to

81
00:03:08,400 --> 00:03:09,840
be turned and this Hardware switch might

82
00:03:09,840 --> 00:03:11,940
not be hooked up or reachable from the

83
00:03:11,940 --> 00:03:14,760
bbcs at all and will require you to have

84
00:03:14,760 --> 00:03:17,760
a sort of foothold within the sis in

85
00:03:17,760 --> 00:03:19,680
addition these bypasses might have

86
00:03:19,680 --> 00:03:21,000
certain constraints they might have

87
00:03:21,000 --> 00:03:23,519
timeouts on how long they are active and

88
00:03:23,519 --> 00:03:25,080
there might be limits on the numbers of

89
00:03:25,080 --> 00:03:27,599
simultaneously active bypasses that an

90
00:03:27,599 --> 00:03:29,640
attacker might want to disable

91
00:03:29,640 --> 00:03:31,500
so these are all reasons why you might

92
00:03:31,500 --> 00:03:35,099
want to move very deeply into the sis

93
00:03:35,099 --> 00:03:37,500
another aspect of perimeters that exist

94
00:03:37,500 --> 00:03:39,599
at level one are through so-called field

95
00:03:39,599 --> 00:03:41,700
bus couplers and so for those unfamiliar

96
00:03:41,700 --> 00:03:43,980
with the concept A field bus coupler is

97
00:03:43,980 --> 00:03:45,599
essentially a sort of limited Gateway

98
00:03:45,599 --> 00:03:47,700
that sits between different fieldbus

99
00:03:47,700 --> 00:03:49,500
networks that might hook up a profibus

100
00:03:49,500 --> 00:03:52,500
DP Network to a profinet network and

101
00:03:52,500 --> 00:03:54,299
essentially what it does is it moves a

102
00:03:54,299 --> 00:03:56,400
limited set of i o values between

103
00:03:56,400 --> 00:03:58,739
different Masters on these buses now

104
00:03:58,739 --> 00:04:00,540
this is not necessarily a perimeter but

105
00:04:00,540 --> 00:04:03,000
what you see quite frequently is that

106
00:04:03,000 --> 00:04:04,980
when you're dealing with packaged units

107
00:04:04,980 --> 00:04:07,799
for example HVAC or for example entire

108
00:04:07,799 --> 00:04:11,099
gas turbine some asset owners opt to put

109
00:04:11,099 --> 00:04:13,019
a field bus coupler in between that

110
00:04:13,019 --> 00:04:14,819
packaged unit where a vendor might have

111
00:04:14,819 --> 00:04:17,399
remote maintenance access and their own

112
00:04:17,399 --> 00:04:19,738
basic process control system and because

113
00:04:19,738 --> 00:04:22,079
essentially only a few i o values are

114
00:04:22,079 --> 00:04:24,000
moved up and down and these devices used

115
00:04:24,000 --> 00:04:26,040
to be historically dumb there used to be

116
00:04:26,040 --> 00:04:29,040
a reduced attack surface and these kind

117
00:04:29,040 --> 00:04:30,960
of couplers are seen as sufficient

118
00:04:30,960 --> 00:04:33,600
perimeter by themselves but as these

119
00:04:33,600 --> 00:04:35,820
devices have gotten smart with all the

120
00:04:35,820 --> 00:04:38,160
stuff that entails that is typically no

121
00:04:38,160 --> 00:04:40,500
longer the case

122
00:04:40,500 --> 00:04:42,600
the second reason why you might want to

123
00:04:42,600 --> 00:04:44,400
bother with lateral movement at level

124
00:04:44,400 --> 00:04:46,620
one is because you need a certain sort

125
00:04:46,620 --> 00:04:48,660
of granular control over these systems

126
00:04:48,660 --> 00:04:50,880
if you look for example at this slide

127
00:04:50,880 --> 00:04:52,320
you have an attacker and he's able to

128
00:04:52,320 --> 00:04:54,720
reach out to the top level Master PLC

129
00:04:54,720 --> 00:04:56,880
and behind the PLC there are different

130
00:04:56,880 --> 00:04:59,400
nested networks of other plcs and field

131
00:04:59,400 --> 00:05:03,000
devices and they expose their own set

132
00:05:03,000 --> 00:05:05,419
points process variables configuration

133
00:05:05,419 --> 00:05:08,699
interfaces to this PLC but obviously not

134
00:05:08,699 --> 00:05:10,979
all of that is exposed at the level of

135
00:05:10,979 --> 00:05:12,780
the master PLC so if I want to

136
00:05:12,780 --> 00:05:14,520
manipulate what is going on in that

137
00:05:14,520 --> 00:05:17,160
system I cannot immediately influence

138
00:05:17,160 --> 00:05:19,440
what is lying behind that Master PLC now

139
00:05:19,440 --> 00:05:21,240
in some cases traffic might be routable

140
00:05:21,240 --> 00:05:24,840
over sip or S7 to these plcs but in

141
00:05:24,840 --> 00:05:26,280
other cases there might be non-routable

142
00:05:26,280 --> 00:05:28,320
links behind it and even if the traffic

143
00:05:28,320 --> 00:05:30,960
is routable that means that I often

144
00:05:30,960 --> 00:05:33,120
cannot send malformed packets over those

145
00:05:33,120 --> 00:05:35,759
routable links and I can also not reach

146
00:05:35,759 --> 00:05:37,320
out all the interfaces that might

147
00:05:37,320 --> 00:05:39,360
otherwise be exposed so that means that

148
00:05:39,360 --> 00:05:41,400
I might need to in initially get code

149
00:05:41,400 --> 00:05:43,860
execution on this master PLC before it

150
00:05:43,860 --> 00:05:45,720
can move to this other plcs in order to

151
00:05:45,720 --> 00:05:48,000
bypass any sort of functional or safety

152
00:05:48,000 --> 00:05:50,460
limits within them

153
00:05:50,460 --> 00:05:53,100
now this kind of thinking is very common

154
00:05:53,100 --> 00:05:55,259
in automotive exploitation which you see

155
00:05:55,259 --> 00:05:56,759
a lot there is that attackers they

156
00:05:56,759 --> 00:05:58,680
initially get code execution on some

157
00:05:58,680 --> 00:06:00,720
sort of a multimedia unit but it doesn't

158
00:06:00,720 --> 00:06:03,120
Grant you deep access to the canvas you

159
00:06:03,120 --> 00:06:05,160
need access to so initially they first

160
00:06:05,160 --> 00:06:06,960
will need to bypass some sort of a cam

161
00:06:06,960 --> 00:06:09,000
command filter that exists within the

162
00:06:09,000 --> 00:06:10,560
can controller and then they will need

163
00:06:10,560 --> 00:06:12,419
to Pivot to a Gateway in order to access

164
00:06:12,419 --> 00:06:15,780
the exact kind of canbus to achieve the

165
00:06:15,780 --> 00:06:17,400
kind of effects they want so that's

166
00:06:17,400 --> 00:06:18,960
essentially what we're trying to do here

167
00:06:18,960 --> 00:06:21,600
as well for OT Networks

168
00:06:21,600 --> 00:06:23,699
so what do vendors and standards say

169
00:06:23,699 --> 00:06:25,680
about this kind of lateral movement and

170
00:06:25,680 --> 00:06:27,720
these kind of connections so it seems

171
00:06:27,720 --> 00:06:29,699
that over the past years there has been

172
00:06:29,699 --> 00:06:31,680
a general acceptance of the integrated

173
00:06:31,680 --> 00:06:33,720
interfaced and common architecture for

174
00:06:33,720 --> 00:06:37,440
bpcs and sys integration that comes with

175
00:06:37,440 --> 00:06:39,539
the typical segmentation advice

176
00:06:39,539 --> 00:06:42,419
however there does seem to be quite a

177
00:06:42,419 --> 00:06:44,940
few pieces of guidance out there that

178
00:06:44,940 --> 00:06:46,800
say that non-routeable or serial

179
00:06:46,800 --> 00:06:48,960
point-to-point links are sufficiently

180
00:06:48,960 --> 00:06:51,060
segmented of themselves and that is

181
00:06:51,060 --> 00:06:52,740
something that is definitely not true in

182
00:06:52,740 --> 00:06:54,780
my opinion not all the guidance says

183
00:06:54,780 --> 00:06:57,600
this but there's some guidance out there

184
00:06:57,600 --> 00:06:59,699
and to illustrate this a little bit in

185
00:06:59,699 --> 00:07:01,860
more in more depth we built a little

186
00:07:01,860 --> 00:07:03,960
proof of concept scenario to Showcase

187
00:07:03,960 --> 00:07:07,080
how this looks like in practice

188
00:07:07,080 --> 00:07:09,539
so we based our scenario on the scenario

189
00:07:09,539 --> 00:07:11,880
of movable Bridges so as you can see on

190
00:07:11,880 --> 00:07:14,220
the slide you have a bascule bridge and

191
00:07:14,220 --> 00:07:16,259
the Basco Bridge Leaf opens as the

192
00:07:16,259 --> 00:07:19,020
counterweight moves into the pit and as

193
00:07:19,020 --> 00:07:21,660
the leaf closes it will hit a limit

194
00:07:21,660 --> 00:07:23,520
switch that essentially says you're

195
00:07:23,520 --> 00:07:26,039
about to close decelerate to creep speed

196
00:07:26,039 --> 00:07:27,599
so you know you don't hit the bearings

197
00:07:27,599 --> 00:07:29,880
too hard and once it's fully closed it

198
00:07:29,880 --> 00:07:32,340
will allow the lock bar to unlock and

199
00:07:32,340 --> 00:07:34,139
then essentially close and put you know

200
00:07:34,139 --> 00:07:36,419
the leave in in a sturdy place now

201
00:07:36,419 --> 00:07:37,860
there's many ways in which an attacker

202
00:07:37,860 --> 00:07:40,080
can seek to attack a bridge structure

203
00:07:40,080 --> 00:07:42,479
like this but one scenario obviously is

204
00:07:42,479 --> 00:07:44,460
attempting to close the bridge Leaf at

205
00:07:44,460 --> 00:07:46,699
full speed and hit the bearings possibly

206
00:07:46,699 --> 00:07:50,099
with the log bar driven now this is not

207
00:07:50,099 --> 00:07:52,259
something you you can do from the scada

208
00:07:52,259 --> 00:07:55,080
interface you will need to bypass a lot

209
00:07:55,080 --> 00:07:56,639
of functionality for this you'll need to

210
00:07:56,639 --> 00:07:58,380
make sure that the deceleration to creep

211
00:07:58,380 --> 00:08:00,000
speed doesn't happen you will need to

212
00:08:00,000 --> 00:08:01,440
bypass the leave and the lock limit

213
00:08:01,440 --> 00:08:04,560
switches and the second scenario has

214
00:08:04,560 --> 00:08:06,780
similar constraints so for example if we

215
00:08:06,780 --> 00:08:09,780
want to close at maximum velocity and

216
00:08:09,780 --> 00:08:12,180
then trigger an emergency stop which is

217
00:08:12,180 --> 00:08:14,099
not graceful and will cause the inertia

218
00:08:14,099 --> 00:08:15,780
of the counterweight to have large

219
00:08:15,780 --> 00:08:17,819
forces move throughout the bridge leaf

220
00:08:17,819 --> 00:08:20,039
and we will need to bypass creep speed

221
00:08:20,039 --> 00:08:22,319
as well as well as have an ability to

222
00:08:22,319 --> 00:08:24,300
trigger this emergency stop from our

223
00:08:24,300 --> 00:08:26,819
position Point as an attacker

224
00:08:26,819 --> 00:08:28,680
now we sketched out this little

225
00:08:28,680 --> 00:08:30,479
architecture to come with these

226
00:08:30,479 --> 00:08:32,458
scenarios it's based on several real

227
00:08:32,458 --> 00:08:34,260
world Bridge management systems that we

228
00:08:34,260 --> 00:08:36,599
uh that we saw and what you essentially

229
00:08:36,599 --> 00:08:38,760
have here is that each of the individual

230
00:08:38,760 --> 00:08:41,580
bridges are delivered as packaged units

231
00:08:41,580 --> 00:08:43,979
managed by a local municipality for

232
00:08:43,979 --> 00:08:45,779
example well the overall Bridge

233
00:08:45,779 --> 00:08:47,820
management system is maintained by a

234
00:08:47,820 --> 00:08:50,519
regional or a central government agency

235
00:08:50,519 --> 00:08:53,040
now what happens is that from the scada

236
00:08:53,040 --> 00:08:56,279
interface they talk to a coupler device

237
00:08:56,279 --> 00:08:57,959
and this has a very limited interface

238
00:08:57,959 --> 00:08:59,459
that doesn't allow you to talk to the

239
00:08:59,459 --> 00:09:01,920
bridges directly you just are able to

240
00:09:01,920 --> 00:09:03,839
manipulate some values that are Exposed

241
00:09:03,839 --> 00:09:06,180
on part of this coupler that say open or

242
00:09:06,180 --> 00:09:08,519
close this particular bridge and the

243
00:09:08,519 --> 00:09:10,500
coupler then talks to the individual

244
00:09:10,500 --> 00:09:12,480
Bridges and each of these individual

245
00:09:12,480 --> 00:09:14,519
Bridges is controlled by an object PLC

246
00:09:14,519 --> 00:09:16,800
that exposes again a limited set of

247
00:09:16,800 --> 00:09:18,660
values for example something that allows

248
00:09:18,660 --> 00:09:21,180
you to initiate an opening or a closing

249
00:09:21,180 --> 00:09:23,519
sequence but definitely nothing granular

250
00:09:23,519 --> 00:09:25,380
that allows you to bypass this creep

251
00:09:25,380 --> 00:09:29,339
speed or manipulate these these um limit

252
00:09:29,339 --> 00:09:32,040
switches so an attacker who wishes to

253
00:09:32,040 --> 00:09:34,140
achieve a scenario like we just sketched

254
00:09:34,140 --> 00:09:36,180
we'll first need to get code execution

255
00:09:36,180 --> 00:09:38,339
on the coupler and then from there hop

256
00:09:38,339 --> 00:09:40,860
on to the object PLC and from the object

257
00:09:40,860 --> 00:09:42,959
PLC maybe manipulate these detailed

258
00:09:42,959 --> 00:09:45,839
Bridge systems over the field bus in

259
00:09:45,839 --> 00:09:47,459
this case it can open field bus we

260
00:09:47,459 --> 00:09:49,560
picked for this scenario and if they

261
00:09:49,560 --> 00:09:51,300
want to bypass any sort of safety

262
00:09:51,300 --> 00:09:53,040
constraints they will need to hop across

263
00:09:53,040 --> 00:09:55,140
the restricted point-to-point link to

264
00:09:55,140 --> 00:09:57,180
the safety controller and achieve their

265
00:09:57,180 --> 00:09:59,580
effects there

266
00:09:59,580 --> 00:10:02,459
so in our scenario we used as a coupler

267
00:10:02,459 --> 00:10:04,980
device we use the Wago 750 series but

268
00:10:04,980 --> 00:10:07,260
really could be any sort of coupler and

269
00:10:07,260 --> 00:10:09,180
this talks to the object PLC controlling

270
00:10:09,180 --> 00:10:10,620
the bridge which is a Snyder Electric

271
00:10:10,620 --> 00:10:13,500
and 340. we can't talk directly to the

272
00:10:13,500 --> 00:10:16,019
m340 so first we want to be able to

273
00:10:16,019 --> 00:10:18,480
bypass that sort of limit by hopping

274
00:10:18,480 --> 00:10:21,120
onto the the Wago and the way we do this

275
00:10:21,120 --> 00:10:23,459
is we exploit a more formed FTP packet

276
00:10:23,459 --> 00:10:24,800
so we get code execution

277
00:10:24,800 --> 00:10:27,180
pre-authentication by exploiting one of

278
00:10:27,180 --> 00:10:29,040
the nucleus 13 vulnerabilities that we

279
00:10:29,040 --> 00:10:30,899
covered a couple of years ago in our

280
00:10:30,899 --> 00:10:33,360
research once we have code execution on

281
00:10:33,360 --> 00:10:35,399
the Wago coupler what we do is we hook

282
00:10:35,399 --> 00:10:38,040
its modbus Handler to effectively become

283
00:10:38,040 --> 00:10:41,519
a proxy Handler that allows me to speak

284
00:10:41,519 --> 00:10:44,399
the UMass protocol which is a protocol

285
00:10:44,399 --> 00:10:47,040
proprietary to Schneider Electric under

286
00:10:47,040 --> 00:10:48,140
function

287
00:10:48,140 --> 00:10:53,220
code065a to the m340 plc

288
00:10:53,220 --> 00:10:54,300
oh

289
00:10:54,300 --> 00:10:56,700
it's one too far so

290
00:10:56,700 --> 00:10:58,200
um yeah once I can talk to the object

291
00:10:58,200 --> 00:11:00,959
PLC um I can speak the Schneider UMass

292
00:11:00,959 --> 00:11:02,880
protocol and this is one of the best

293
00:11:02,880 --> 00:11:04,380
understood and reverse Engineers

294
00:11:04,380 --> 00:11:06,260
proprietary protocols out there

295
00:11:06,260 --> 00:11:08,399
historically it used to be

296
00:11:08,399 --> 00:11:10,980
unauthenticated but Schneider introduced

297
00:11:10,980 --> 00:11:12,839
an application password at a certain

298
00:11:12,839 --> 00:11:15,720
point to restrict the ability to start

299
00:11:15,720 --> 00:11:17,820
and stop the PLC and download the logic

300
00:11:17,820 --> 00:11:20,300
and all that sort of stuff

301
00:11:20,300 --> 00:11:22,860
vulnerability was discovered in this by

302
00:11:22,860 --> 00:11:25,560
multiple independent parties because of

303
00:11:25,560 --> 00:11:27,420
the way it works as outlined in this

304
00:11:27,420 --> 00:11:28,860
slide so the first thing you you

305
00:11:28,860 --> 00:11:30,959
effectively do is you read a memory

306
00:11:30,959 --> 00:11:33,360
block that holds a hash over the salt

307
00:11:33,360 --> 00:11:35,700
and password then you do a nuns exchange

308
00:11:35,700 --> 00:11:37,980
with the PLC then you do a take

309
00:11:37,980 --> 00:11:39,839
reservation request where you use this

310
00:11:39,839 --> 00:11:41,760
secret and the nonsense and then you

311
00:11:41,760 --> 00:11:44,160
send authenticated messages essentially

312
00:11:44,160 --> 00:11:47,519
to this PLC with these nonsense now

313
00:11:47,519 --> 00:11:49,260
obviously if I can read this memory

314
00:11:49,260 --> 00:11:51,360
block with the secret then essentially

315
00:11:51,360 --> 00:11:53,519
it's it's client based authentication so

316
00:11:53,519 --> 00:11:56,760
Schneider to fix this this secret is no

317
00:11:56,760 --> 00:11:59,519
longer in the memory block but there

318
00:11:59,519 --> 00:12:01,440
were a few other ways to bypass this

319
00:12:01,440 --> 00:12:02,940
authentication that we did not see

320
00:12:02,940 --> 00:12:04,980
covered before in which we reported to

321
00:12:04,980 --> 00:12:06,180
Schneider

322
00:12:06,180 --> 00:12:08,399
um in the advisories that you can see on

323
00:12:08,399 --> 00:12:10,320
the bottom of the slide so one of them

324
00:12:10,320 --> 00:12:12,300
is the ability to do a reservation

325
00:12:12,300 --> 00:12:15,180
replay what I can do as an attacker is I

326
00:12:15,180 --> 00:12:17,220
can sniff a legitimate authentication

327
00:12:17,220 --> 00:12:19,620
hash and then I can Replay that because

328
00:12:19,620 --> 00:12:22,380
the nonsense are globals held by the PLC

329
00:12:22,380 --> 00:12:24,480
in memory they're not tied to any

330
00:12:24,480 --> 00:12:27,060
specific section session or any specific

331
00:12:27,060 --> 00:12:30,360
IP and they don't refresh automatically

332
00:12:30,360 --> 00:12:32,459
so if someone legitimately authenticates

333
00:12:32,459 --> 00:12:35,700
to the PLC and I sniffed that particular

334
00:12:35,700 --> 00:12:37,440
authentication hash and I don't do my

335
00:12:37,440 --> 00:12:39,660
own non's exchange those old monsters

336
00:12:39,660 --> 00:12:41,940
will still be valid and I can use those

337
00:12:41,940 --> 00:12:45,720
as part of my replay authentication hash

338
00:12:45,720 --> 00:12:49,260
a little bit of a more a convenient way

339
00:12:49,260 --> 00:12:51,720
to bypass this for an attacker is to

340
00:12:51,720 --> 00:12:54,720
forge authenticated requests I can sniff

341
00:12:54,720 --> 00:12:56,700
nonsense and the reservation ID and

342
00:12:56,700 --> 00:12:59,399
because essentially these reservation

343
00:12:59,399 --> 00:13:02,399
IDs are not tied to any particular IP or

344
00:13:02,399 --> 00:13:04,800
session and because as you can see in

345
00:13:04,800 --> 00:13:06,540
the previous slide on the bottom there's

346
00:13:06,540 --> 00:13:08,579
no actual secret in the authenticated

347
00:13:08,579 --> 00:13:11,160
request as long as I know the nonsense I

348
00:13:11,160 --> 00:13:13,200
can just forge arbitrary requests and

349
00:13:13,200 --> 00:13:15,600
inject them in that section

350
00:13:15,600 --> 00:13:17,639
so once I'm able to bypass the

351
00:13:17,639 --> 00:13:19,260
authentication I want to get code

352
00:13:19,260 --> 00:13:21,720
execution on the m340 PLC now there's

353
00:13:21,720 --> 00:13:23,820
different approaches in Prior work some

354
00:13:23,820 --> 00:13:25,920
of them include downloading logic to the

355
00:13:25,920 --> 00:13:29,880
PLC um for example vulnerable messages

356
00:13:29,880 --> 00:13:31,620
as part of UMass which have been

357
00:13:31,620 --> 00:13:34,620
exploited vulnerable TCP stacks on some

358
00:13:34,620 --> 00:13:37,560
of the modicon family plcs but what we

359
00:13:37,560 --> 00:13:40,079
wanted was an approach that works on a

360
00:13:40,079 --> 00:13:42,660
fully updated PLC and that allows for

361
00:13:42,660 --> 00:13:44,760
hot batching so we don't want the logic

362
00:13:44,760 --> 00:13:47,220
to restart which might cause process

363
00:13:47,220 --> 00:13:49,500
upsets or alarms to go off we don't want

364
00:13:49,500 --> 00:13:51,120
any of that disruption that comes with

365
00:13:51,120 --> 00:13:53,339
the logic download we also want it to be

366
00:13:53,339 --> 00:13:55,620
a little bit hostile to forensic so you

367
00:13:55,620 --> 00:13:57,540
know no project Jacksons that chains and

368
00:13:57,540 --> 00:13:59,760
so on and use an obscure protocol

369
00:13:59,760 --> 00:14:03,120
feature that evades most IDs

370
00:14:03,120 --> 00:14:05,040
and before we can delve into how we did

371
00:14:05,040 --> 00:14:06,480
that you need a little bit of background

372
00:14:06,480 --> 00:14:08,940
about the emoticon internal organization

373
00:14:08,940 --> 00:14:12,360
so the emoticon family of plcs uses

374
00:14:12,360 --> 00:14:14,040
something called the application binary

375
00:14:14,040 --> 00:14:16,800
file format the apx format and that

376
00:14:16,800 --> 00:14:18,839
format is a part of its project files

377
00:14:18,839 --> 00:14:21,120
and that essentially organizes the PLC

378
00:14:21,120 --> 00:14:23,459
memory into different areas and each of

379
00:14:23,459 --> 00:14:25,320
these areas is organized into different

380
00:14:25,320 --> 00:14:27,300
sections and each of these sections

381
00:14:27,300 --> 00:14:29,160
holds a bunch of blocks and these can be

382
00:14:29,160 --> 00:14:30,720
data blocks these can be code blocks

383
00:14:30,720 --> 00:14:33,060
these can be Source blocks whatever and

384
00:14:33,060 --> 00:14:35,100
each of these blocks is linked to an

385
00:14:35,100 --> 00:14:37,860
entry in the relocation table we have an

386
00:14:37,860 --> 00:14:40,440
RTE number that basically describes this

387
00:14:40,440 --> 00:14:42,600
is where the block is located and these

388
00:14:42,600 --> 00:14:44,459
are its attributes and permissions and

389
00:14:44,459 --> 00:14:45,480
so on

390
00:14:45,480 --> 00:14:47,639
and this is what the PLC essentially

391
00:14:47,639 --> 00:14:49,740
loads and how it organizes all of the

392
00:14:49,740 --> 00:14:52,139
project in its memory

393
00:14:52,139 --> 00:14:54,480
so what we found is that there is a

394
00:14:54,480 --> 00:14:56,459
previously unexplored sub-function

395
00:14:56,459 --> 00:14:59,579
within UMass called the CSA request with

396
00:14:59,579 --> 00:15:02,220
function code 0x50 that allows you to

397
00:15:02,220 --> 00:15:05,459
make these virtual pages on the PLC and

398
00:15:05,459 --> 00:15:07,079
you can read and write to them and

399
00:15:07,079 --> 00:15:09,360
schedule them for execution and you can

400
00:15:09,360 --> 00:15:12,180
fill these Pages up with a proprietary

401
00:15:12,180 --> 00:15:14,279
command set that allows you to read

402
00:15:14,279 --> 00:15:16,500
write and copy and so on from these

403
00:15:16,500 --> 00:15:18,420
different blocks so you can directly

404
00:15:18,420 --> 00:15:20,760
manipulate these blocks as they reside

405
00:15:20,760 --> 00:15:23,459
in memory and this is from an attacker

406
00:15:23,459 --> 00:15:25,019
point of view very interesting because

407
00:15:25,019 --> 00:15:26,699
it happens live I don't need to restart

408
00:15:26,699 --> 00:15:29,760
logic I don't change these typical

409
00:15:29,760 --> 00:15:31,380
forensic indicators like the project

410
00:15:31,380 --> 00:15:33,899
checksum and any modifications to

411
00:15:33,899 --> 00:15:36,060
executable blocks don't show up in the

412
00:15:36,060 --> 00:15:38,220
source code when I upload the project

413
00:15:38,220 --> 00:15:40,980
again to my ews

414
00:15:40,980 --> 00:15:43,980
now initially it seems a little bit hard

415
00:15:43,980 --> 00:15:45,420
to exploit because you can't write

416
00:15:45,420 --> 00:15:47,760
directly to these code blocks but we

417
00:15:47,760 --> 00:15:49,440
found another issue which we reported to

418
00:15:49,440 --> 00:15:52,199
Schneider and that essentially meant

419
00:15:52,199 --> 00:15:54,720
that we could write to a data block and

420
00:15:54,720 --> 00:15:56,579
then copy from the data block to an

421
00:15:56,579 --> 00:15:58,620
executable block because that copy

422
00:15:58,620 --> 00:16:00,240
operation did not have the permission

423
00:16:00,240 --> 00:16:02,880
check that the right operation did have

424
00:16:02,880 --> 00:16:04,800
so what we then can do is we can

425
00:16:04,800 --> 00:16:07,199
essentially copy to that code block and

426
00:16:07,199 --> 00:16:09,240
when it executes as part of the regular

427
00:16:09,240 --> 00:16:12,360
logic our malicious payload will execute

428
00:16:12,360 --> 00:16:14,279
and what we did with that is essentially

429
00:16:14,279 --> 00:16:17,100
this our code is executed as part of the

430
00:16:17,100 --> 00:16:19,139
regular scan cycle but we want to get

431
00:16:19,139 --> 00:16:20,880
out of the runtime executive because we

432
00:16:20,880 --> 00:16:22,199
have to deal with Watch Dogs and all

433
00:16:22,199 --> 00:16:23,940
kinds of restrictions so initially

434
00:16:23,940 --> 00:16:26,339
inject a Stager payload and that Stager

435
00:16:26,339 --> 00:16:27,959
payload allows us to move to a different

436
00:16:27,959 --> 00:16:30,839
area of the m340 firmware where we have

437
00:16:30,839 --> 00:16:32,760
arbitrary access to talking to the

438
00:16:32,760 --> 00:16:34,500
backplane device driver the can open

439
00:16:34,500 --> 00:16:36,899
device driver the vxworks socket library

440
00:16:36,899 --> 00:16:40,019
and so on and that allows us to have

441
00:16:40,019 --> 00:16:41,759
this detailed manipulation of the field

442
00:16:41,759 --> 00:16:43,560
devices that are connected to its can

443
00:16:43,560 --> 00:16:46,199
open bus that otherwise would not have

444
00:16:46,199 --> 00:16:47,940
been possible so we can now talk to the

445
00:16:47,940 --> 00:16:51,540
m340 can open API and use these standard

446
00:16:51,540 --> 00:16:53,579
functions that are part of can in

447
00:16:53,579 --> 00:16:55,320
automation where you have different

448
00:16:55,320 --> 00:16:57,839
service data objects that allow you to

449
00:16:57,839 --> 00:17:00,000
get code execution on the field devices

450
00:17:00,000 --> 00:17:03,000
themselves for example to indent code

451
00:17:03,000 --> 00:17:04,740
downloads that allow you to download

452
00:17:04,740 --> 00:17:07,079
application logic or firmware to these

453
00:17:07,079 --> 00:17:09,900
field devices or in some cases just have

454
00:17:09,900 --> 00:17:12,240
arbitrary read and write do the memory

455
00:17:12,240 --> 00:17:14,880
of these field devices to debugger

456
00:17:14,880 --> 00:17:16,859
functionality that's exposed to a

457
00:17:16,859 --> 00:17:19,020
different sdl and we looked through

458
00:17:19,020 --> 00:17:21,299
various can open device manuals and

459
00:17:21,299 --> 00:17:22,439
found that if there was any

460
00:17:22,439 --> 00:17:24,240
authentication for this at all what

461
00:17:24,240 --> 00:17:26,160
typically happened is that you just had

462
00:17:26,160 --> 00:17:28,199
a 32-bit value that was written to a

463
00:17:28,199 --> 00:17:30,120
different SEO and that was typically a

464
00:17:30,120 --> 00:17:32,520
static failure so to prevent engineering

465
00:17:32,520 --> 00:17:34,919
errors rather than security

466
00:17:34,919 --> 00:17:37,020
now the second objective after we have

467
00:17:37,020 --> 00:17:40,080
code execution on the m340 was to

468
00:17:40,080 --> 00:17:42,240
essentially move through the safety

469
00:17:42,240 --> 00:17:44,760
system in our case in our little demo we

470
00:17:44,760 --> 00:17:47,280
had a Allen Bradley guard Logics as the

471
00:17:47,280 --> 00:17:49,440
safety PLC and that had an Ethernet

472
00:17:49,440 --> 00:17:51,539
module that was hooked up to the m340

473
00:17:51,539 --> 00:17:53,640
over a non-routable point-to-point link

474
00:17:53,640 --> 00:17:55,559
so we can just send zip messages to it

475
00:17:55,559 --> 00:17:58,020
we can just download logic we we have a

476
00:17:58,020 --> 00:18:00,000
very restricted interface here so in

477
00:18:00,000 --> 00:18:01,440
order to be able to cross this little

478
00:18:01,440 --> 00:18:04,200
Bridge what we do is we use the vxworks

479
00:18:04,200 --> 00:18:07,080
raw sockets API to send more formed IP

480
00:18:07,080 --> 00:18:09,840
options to this ethernet module in order

481
00:18:09,840 --> 00:18:11,419
to exploit one of the Urgent 11

482
00:18:11,419 --> 00:18:13,500
pre-authentication remote code execution

483
00:18:13,500 --> 00:18:15,240
vulnerabilities

484
00:18:15,240 --> 00:18:19,559
on the um on the ethernet module now on

485
00:18:19,559 --> 00:18:21,120
this ethernet module you have no need

486
00:18:21,120 --> 00:18:23,460
for further privilege escalation because

487
00:18:23,460 --> 00:18:25,080
you're already running in supervisor

488
00:18:25,080 --> 00:18:26,580
mode and there's no task separation

489
00:18:26,580 --> 00:18:27,660
there

490
00:18:27,660 --> 00:18:30,360
now once I am on the ethernet module I'm

491
00:18:30,360 --> 00:18:32,220
no longer bothered by the restrictions

492
00:18:32,220 --> 00:18:33,780
of this point to point link and

493
00:18:33,780 --> 00:18:35,640
everything that's there because it can

494
00:18:35,640 --> 00:18:37,559
talk directly to the backplane device

495
00:18:37,559 --> 00:18:40,200
driver of this ethernet module that

496
00:18:40,200 --> 00:18:42,660
allows me to talk to an Asic which is

497
00:18:42,660 --> 00:18:44,460
called the Apex 2 Asic which is the

498
00:18:44,460 --> 00:18:47,160
backplane Asic for uh for the Logix uh

499
00:18:47,160 --> 00:18:49,919
backplane bus and this is essentially a

500
00:18:49,919 --> 00:18:51,360
sip based bus so now I can send

501
00:18:51,360 --> 00:18:53,280
arbitrary sip messages to the remote

502
00:18:53,280 --> 00:18:55,980
dios to the CPU module and manipulate

503
00:18:55,980 --> 00:18:58,320
any of these tags that might be related

504
00:18:58,320 --> 00:19:01,679
to the safety bypasses so to illustrate

505
00:19:01,679 --> 00:19:03,179
this a little bit more I have a little

506
00:19:03,179 --> 00:19:04,740
video that should start playing great

507
00:19:04,740 --> 00:19:07,200
how to move laterally through OT systems

508
00:19:07,200 --> 00:19:09,539
at level one in order to gain deep

509
00:19:09,539 --> 00:19:11,940
access to nested control systems and

510
00:19:11,940 --> 00:19:13,919
cross-restricted perimeters between

511
00:19:13,919 --> 00:19:16,140
different security zones

512
00:19:16,140 --> 00:19:18,900
the demo setup shown consists of a Wago

513
00:19:18,900 --> 00:19:21,900
750 ethernet coupler offering a limited

514
00:19:21,900 --> 00:19:24,080
Gateway interface to a nested Snyder

515
00:19:24,080 --> 00:19:26,460
m340 plc

516
00:19:26,460 --> 00:19:30,299
the m340 PLC is in turn connected to it

517
00:19:30,299 --> 00:19:33,780
Allen Bradley guard logic safety PLC via

518
00:19:33,780 --> 00:19:36,240
a restricted point-to-point link to its

519
00:19:36,240 --> 00:19:39,600
ethernet module none of these plcs are

520
00:19:39,600 --> 00:19:41,400
conventionally reachable from the

521
00:19:41,400 --> 00:19:44,640
attacker's initial point of access the

522
00:19:44,640 --> 00:19:47,039
attacker starts by exploiting a nucleus

523
00:19:47,039 --> 00:19:49,380
13 vulnerability for remote code

524
00:19:49,380 --> 00:19:52,860
execution on the Wago coupler Gateway

525
00:19:52,860 --> 00:19:55,200
once the implant is in place the

526
00:19:55,200 --> 00:19:57,179
attacker can move beyond the coupler's

527
00:19:57,179 --> 00:19:59,220
restricted interface into the nested

528
00:19:59,220 --> 00:20:00,900
networks behind it

529
00:20:00,900 --> 00:20:03,960
in order to reach the nested Snyder m340

530
00:20:03,960 --> 00:20:06,539
PLC the attacker will instruct the

531
00:20:06,539 --> 00:20:08,700
implant to forward their Snyder UMass

532
00:20:08,700 --> 00:20:09,840
traffic

533
00:20:09,840 --> 00:20:12,240
in addition the attacker will instruct

534
00:20:12,240 --> 00:20:14,460
the implant to sniff Snyder UMass

535
00:20:14,460 --> 00:20:17,520
authentication traffic meanwhile an

536
00:20:17,520 --> 00:20:19,919
unsuspecting engineer authenticates to

537
00:20:19,919 --> 00:20:22,799
the m340 PLC as part of regular

538
00:20:22,799 --> 00:20:24,600
operations

539
00:20:24,600 --> 00:20:27,480
having sniffed the engineer's nonses the

540
00:20:27,480 --> 00:20:29,820
attacker will now reuse them to send

541
00:20:29,820 --> 00:20:32,940
forged but seemingly authenticated UMass

542
00:20:32,940 --> 00:20:36,780
traffic to the nested m340 PLC the

543
00:20:36,780 --> 00:20:39,059
attacker now forges requests containing

544
00:20:39,059 --> 00:20:41,820
the undocumented CSA commands in order

545
00:20:41,820 --> 00:20:45,059
to gain code execution on the PLC itself

546
00:20:45,059 --> 00:20:48,299
without disrupting its logic meanwhile

547
00:20:48,299 --> 00:20:50,760
the engineering workstation cannot tell

548
00:20:50,760 --> 00:20:53,100
that anything's changed as the software

549
00:20:53,100 --> 00:20:55,740
shows everything's still okay granting

550
00:20:55,740 --> 00:20:58,559
the attacker a high degree of stealth

551
00:20:58,559 --> 00:21:01,559
once their implant resides on the m340

552
00:21:01,559 --> 00:21:04,020
PLC the attacker can Now launch

553
00:21:04,020 --> 00:21:06,299
additional exploits on previously

554
00:21:06,299 --> 00:21:09,059
unreachable interfaces such as the

555
00:21:09,059 --> 00:21:11,039
restricted point-to-point link between

556
00:21:11,039 --> 00:21:14,760
the m340 PLC and the guard logic safety

557
00:21:14,760 --> 00:21:18,000
PLC in order to gain full control over

558
00:21:18,000 --> 00:21:21,179
the safety PLC the attacker launches one

559
00:21:21,179 --> 00:21:23,580
of the Urgent 11 exploits from its

560
00:21:23,580 --> 00:21:27,000
implant on the m340 PLC once the

561
00:21:27,000 --> 00:21:29,280
attacker has code execution on the

562
00:21:29,280 --> 00:21:32,520
safety PLC ethernet module they can talk

563
00:21:32,520 --> 00:21:34,679
directly to device drivers offering

564
00:21:34,679 --> 00:21:37,740
access to the PLC backplane and module

565
00:21:37,740 --> 00:21:40,200
peripherals as shown by manipulating the

566
00:21:40,200 --> 00:21:42,480
module's display in wider controller

567
00:21:42,480 --> 00:21:45,659
LEDs similarly the attacker's

568
00:21:45,659 --> 00:21:48,840
unconstrained access to the m340 plc's

569
00:21:48,840 --> 00:21:51,179
internals as shown by manipulating the

570
00:21:51,179 --> 00:21:54,480
CPU modules LEDs allows them granular

571
00:21:54,480 --> 00:21:56,940
access to local and remote field devices

572
00:21:56,940 --> 00:21:59,820
connected to the can bus or backplane

573
00:21:59,820 --> 00:22:02,280
demonstrating how lateral movement at

574
00:22:02,280 --> 00:22:05,340
level 1 grants attackers deep access to

575
00:22:05,340 --> 00:22:08,840
complex control systems

576
00:22:11,520 --> 00:22:13,020
all right so a little bit about

577
00:22:13,020 --> 00:22:15,179
disclosure we coordinated the disclosure

578
00:22:15,179 --> 00:22:16,980
of this with Schneider Electric reported

579
00:22:16,980 --> 00:22:18,960
these issues in April and July of last

580
00:22:18,960 --> 00:22:21,299
year advisories were recently released

581
00:22:21,299 --> 00:22:22,919
their mitigations for now but

582
00:22:22,919 --> 00:22:25,559
remediation plans are forthcoming we

583
00:22:25,559 --> 00:22:28,559
suggested a retrofittable authentication

584
00:22:28,559 --> 00:22:30,840
fix by using the secure remote password

585
00:22:30,840 --> 00:22:33,299
protocol together with hmax to

586
00:22:33,299 --> 00:22:34,799
essentially tie these authenticated

587
00:22:34,799 --> 00:22:37,679
messages to the initial Mutual

588
00:22:37,679 --> 00:22:40,020
authentication session so that that is

589
00:22:40,020 --> 00:22:41,700
something that could be radio fitted on

590
00:22:41,700 --> 00:22:44,220
the protocol luckily

591
00:22:44,220 --> 00:22:47,280
um in conclusion there's likely a lot of

592
00:22:47,280 --> 00:22:49,320
network crawl space that's not on your

593
00:22:49,320 --> 00:22:52,620
radar like at the level one uh there

594
00:22:52,620 --> 00:22:54,179
might still be perimeters that you

595
00:22:54,179 --> 00:22:56,640
haven't looked into to external systems

596
00:22:56,640 --> 00:22:58,140
and even systems that are you know

597
00:22:58,140 --> 00:23:00,539
remotely maintainable so look into that

598
00:23:00,539 --> 00:23:02,400
if a level one device sits between

599
00:23:02,400 --> 00:23:04,799
different segments it needs a perimeter

600
00:23:04,799 --> 00:23:06,720
security profile

601
00:23:06,720 --> 00:23:08,700
um stop treating certain links like

602
00:23:08,700 --> 00:23:10,320
serial links point-to-point links

603
00:23:10,320 --> 00:23:12,419
non-routable links as if they're immune

604
00:23:12,419 --> 00:23:14,340
to all of these issues because they're

605
00:23:14,340 --> 00:23:17,460
not the impact of a compromise is not

606
00:23:17,460 --> 00:23:19,620
limited to the explicit capabilities of

607
00:23:19,620 --> 00:23:21,240
that link or just its first order

608
00:23:21,240 --> 00:23:23,159
connectivity just because I have a

609
00:23:23,159 --> 00:23:25,020
vulnerability in an Ethernet module

610
00:23:25,020 --> 00:23:26,760
doesn't mean the impact is limited to

611
00:23:26,760 --> 00:23:28,620
Communications I might use that as a

612
00:23:28,620 --> 00:23:30,960
Stager to get for example to the um the

613
00:23:30,960 --> 00:23:33,539
actual CPU and with deep access Things

614
00:23:33,539 --> 00:23:35,400
become possible which change potential

615
00:23:35,400 --> 00:23:37,500
impact so you might have been relying on

616
00:23:37,500 --> 00:23:39,539
functional and safety limits within the

617
00:23:39,539 --> 00:23:41,280
field devices that could be bypassed

618
00:23:41,280 --> 00:23:42,900
through an attacker taking this sort of

619
00:23:42,900 --> 00:23:43,940
route

620
00:23:43,940 --> 00:23:46,440
there's a full report with way more

621
00:23:46,440 --> 00:23:48,720
detail than I could go into including

622
00:23:48,720 --> 00:23:50,640
some some mitigation and detection and

623
00:23:50,640 --> 00:23:52,919
forensics advice I urge you to check

624
00:23:52,919 --> 00:23:55,260
that out and if there's any questions I

625
00:23:55,260 --> 00:23:57,240
take them now so move up to the

626
00:23:57,240 --> 00:23:59,600
microphone

627
00:24:00,480 --> 00:24:02,640
question the problem you were talking

628
00:24:02,640 --> 00:24:04,620
about now with attacks coming from L1

629
00:24:04,620 --> 00:24:06,840
would you say it would be even worse if

630
00:24:06,840 --> 00:24:09,900
it's not wired if it's wireless that you

631
00:24:09,900 --> 00:24:13,380
actually expose your L1 L2 stuff over

632
00:24:13,380 --> 00:24:15,419
wired Wireless

633
00:24:15,419 --> 00:24:17,159
yeah definitely

634
00:24:17,159 --> 00:24:19,559
um I've seen some environments where for

635
00:24:19,559 --> 00:24:21,539
example you have wide area scada

636
00:24:21,539 --> 00:24:24,240
networks over something like Tetra or

637
00:24:24,240 --> 00:24:26,580
DMR and there you have your

638
00:24:26,580 --> 00:24:29,280
Communications for level one all in in

639
00:24:29,280 --> 00:24:31,260
the open I mean obviously you have way

640
00:24:31,260 --> 00:24:34,679
other issues uh if that is your case but

641
00:24:34,679 --> 00:24:36,539
yeah that makes it a lot easier to get

642
00:24:36,539 --> 00:24:38,580
already to level one obviously if you

643
00:24:38,580 --> 00:24:41,400
can just jump on there

644
00:24:41,400 --> 00:24:43,679
there's I had a question about the

645
00:24:43,679 --> 00:24:45,539
monitoring piece I know you had

646
00:24:45,539 --> 00:24:46,799
mentioned that it's that's in the report

647
00:24:46,799 --> 00:24:48,240
and I know that there's only a couple

648
00:24:48,240 --> 00:24:49,320
minutes but I was wondering if you could

649
00:24:49,320 --> 00:24:52,860
give any sort of tldr on the monitoring

650
00:24:52,860 --> 00:24:54,600
strategy for for something like that

651
00:24:54,600 --> 00:24:56,340
very briefly

652
00:24:56,340 --> 00:24:58,140
um in the case of this specific attack

653
00:24:58,140 --> 00:25:00,120
chain being able to spot these ride

654
00:25:00,120 --> 00:25:02,460
messages that are part of UMass as well

655
00:25:02,460 --> 00:25:03,960
as certain things like for example

656
00:25:03,960 --> 00:25:06,240
Watchdog failures on top of the PLC if

657
00:25:06,240 --> 00:25:07,740
the attacker's not careful you're going

658
00:25:07,740 --> 00:25:09,240
to trip up the Watchdog with this and

659
00:25:09,240 --> 00:25:10,799
you can monitor that

660
00:25:10,799 --> 00:25:12,360
um and in case of for example the Allen

661
00:25:12,360 --> 00:25:14,520
Bradley guard Logics you have a web page

662
00:25:14,520 --> 00:25:16,740
that shows you what tasks are being run

663
00:25:16,740 --> 00:25:18,960
by vxworks so you could put a monitor

664
00:25:18,960 --> 00:25:21,000
there that says you know I did someone

665
00:25:21,000 --> 00:25:23,400
spawn a malicious task what resources

666
00:25:23,400 --> 00:25:25,080
are being consumed and we mentioned some

667
00:25:25,080 --> 00:25:26,880
of that kind of stuff in the report so

668
00:25:26,880 --> 00:25:28,559
is that modern capability something we

669
00:25:28,559 --> 00:25:31,020
could do with I inspect

670
00:25:31,020 --> 00:25:33,720
yeah so so for example this these these

671
00:25:33,720 --> 00:25:35,580
attacks um and the protocol level

672
00:25:35,580 --> 00:25:37,020
attacks that's definitely something that

673
00:25:37,020 --> 00:25:38,640
I inspect is able to do excellent thank

674
00:25:38,640 --> 00:25:40,760
you

675
00:25:40,799 --> 00:25:42,419
my question is kind of similar to his

676
00:25:42,419 --> 00:25:44,460
about detections and so one of the top

677
00:25:44,460 --> 00:25:46,320
20 secure PLC cutting practices is

678
00:25:46,320 --> 00:25:48,299
monitoring the scan cycle time could you

679
00:25:48,299 --> 00:25:50,460
comment on how this kind of attack would

680
00:25:50,460 --> 00:25:52,880
potentially affect scan cycle time

681
00:25:52,880 --> 00:25:55,980
so initially the if you look at what we

682
00:25:55,980 --> 00:25:57,600
did with the m340 that'll have some

683
00:25:57,600 --> 00:26:00,240
impact on scan cycle time because for a

684
00:26:00,240 --> 00:26:01,799
little bit you're in that particular

685
00:26:01,799 --> 00:26:04,500
task but once you break out and you you

686
00:26:04,500 --> 00:26:08,039
know you schedule a new rtos stock for

687
00:26:08,039 --> 00:26:09,779
your militia task for your malicious

688
00:26:09,779 --> 00:26:12,240
code then I don't think it it affects

689
00:26:12,240 --> 00:26:14,940
that as much anymore so it's for a

690
00:26:14,940 --> 00:26:16,740
little bit but there's other resources

691
00:26:16,740 --> 00:26:19,140
you can monitor uh yeah on the side yeah

692
00:26:19,140 --> 00:26:21,559
thanks so much

693
00:26:25,559 --> 00:26:27,539
hi I'd like to know

694
00:26:27,539 --> 00:26:29,760
um is it possible to implement something

695
00:26:29,760 --> 00:26:32,220
like a SMB signing in this environment

696
00:26:32,220 --> 00:26:34,679
that would have a the ability to block

697
00:26:34,679 --> 00:26:36,840
that replay attack that you did to get

698
00:26:36,840 --> 00:26:38,100
the Authentication

699
00:26:38,100 --> 00:26:40,140
yeah I mean I

700
00:26:40,140 --> 00:26:43,679
hard to retrofit in you know Security on

701
00:26:43,679 --> 00:26:45,779
protocols that were originally insecured

702
00:26:45,779 --> 00:26:47,220
by Design and you know even though this

703
00:26:47,220 --> 00:26:49,860
is broken uh at least the modicon family

704
00:26:49,860 --> 00:26:52,980
took the the the attempt to put

705
00:26:52,980 --> 00:26:54,720
authentication on there which a lot of

706
00:26:54,720 --> 00:26:56,220
level one devices still have to do so

707
00:26:56,220 --> 00:26:57,299
that's good

708
00:26:57,299 --> 00:26:58,620
um and one of the suggestions we

709
00:26:58,620 --> 00:27:00,299
describe in the report is to use the

710
00:27:00,299 --> 00:27:02,159
secure remote password protocol for

711
00:27:02,159 --> 00:27:04,740
initial Mutual authentication derive a

712
00:27:04,740 --> 00:27:07,919
key from that and then use an hmac to

713
00:27:07,919 --> 00:27:10,080
sign all of these messages and tie that

714
00:27:10,080 --> 00:27:12,600
to the initial Mutual authentication and

715
00:27:12,600 --> 00:27:15,000
you could in my opinion retrofit fit

716
00:27:15,000 --> 00:27:17,279
that on the UMass protocol but whether

717
00:27:17,279 --> 00:27:18,840
you know that's going to happen or not

718
00:27:18,840 --> 00:27:21,179
that's that's not up to me but I I think

719
00:27:21,179 --> 00:27:23,159
there's possibilities there yeah

720
00:27:23,159 --> 00:27:25,820
thank you

721
00:27:27,480 --> 00:27:29,350
all right thank you

722
00:27:29,350 --> 00:27:31,080
[Applause]

723
00:27:31,080 --> 00:27:34,080
foreign

