1
00:00:00,350 --> 00:00:09,230
[Music]

2
00:00:09,230 --> 00:00:12,660
our next speakers on on the stage - are

3
00:00:12,660 --> 00:00:15,089
gonna talk about sticks and stones and

4
00:00:15,089 --> 00:00:17,490
your security controls think you find

5
00:00:17,490 --> 00:00:19,080
this very interesting we actually have

6
00:00:19,080 --> 00:00:21,660
two speakers Stephen Chinetti

7
00:00:21,660 --> 00:00:25,189
is the CEO and founder of attack IQ and

8
00:00:25,189 --> 00:00:28,980
Daniel michaud's saucy I should have

9
00:00:28,980 --> 00:00:30,900
asked how he pronounces his last name

10
00:00:30,900 --> 00:00:34,020
let me show sue say I need to work on my

11
00:00:34,020 --> 00:00:37,469
French he is an engineer working as a

12
00:00:37,469 --> 00:00:41,309
cyber security researcher so we'll

13
00:00:41,309 --> 00:00:43,079
welcome them here in a minute to the s

14
00:00:43,079 --> 00:00:47,520
for stage - okay guys come on up please

15
00:00:47,520 --> 00:00:59,789
welcome them take it away all right I'm

16
00:00:59,789 --> 00:01:03,300
stuff Internet and I'm Daniel Misha Luci

17
00:01:03,300 --> 00:01:05,040
and today we're here to talk to you guys

18
00:01:05,040 --> 00:01:07,619
about sticks and your security controls

19
00:01:07,619 --> 00:01:11,909
oh we didn't get a cooker so on today's

20
00:01:11,909 --> 00:01:14,100
agenda we're gonna kick it off with our

21
00:01:14,100 --> 00:01:15,780
problem statement essentially the

22
00:01:15,780 --> 00:01:17,520
question that frame our little project

23
00:01:17,520 --> 00:01:19,500
here and then we'll go through an

24
00:01:19,500 --> 00:01:21,270
overview of sticks just to set the level

25
00:01:21,270 --> 00:01:22,920
of the room make sure has a good

26
00:01:22,920 --> 00:01:25,259
everybody has a good idea of what sticks

27
00:01:25,259 --> 00:01:27,689
is about and how it helps us and then

28
00:01:27,689 --> 00:01:29,100
we'll talk about the sticks replay

29
00:01:29,100 --> 00:01:31,140
project which was the core component of

30
00:01:31,140 --> 00:01:33,270
our of our project in our presentation

31
00:01:33,270 --> 00:01:34,530
so we'll give you guys an overview and

32
00:01:34,530 --> 00:01:37,259
then we'll dive into some details and

33
00:01:37,259 --> 00:01:39,000
hopefully have a little bit of time for

34
00:01:39,000 --> 00:01:42,119
some Q&A at the end and the timer is not

35
00:01:42,119 --> 00:01:45,600
working up front so we'll just go with

36
00:01:45,600 --> 00:01:46,009
it

37
00:01:46,009 --> 00:01:50,220
so the problem statement Stefan and I

38
00:01:50,220 --> 00:01:52,979
asked ourselves and through you know our

39
00:01:52,979 --> 00:01:56,969
daily jobs realized that we received a

40
00:01:56,969 --> 00:01:58,799
lot of threat intelligence from a lot of

41
00:01:58,799 --> 00:01:59,759
different fees from a lot of different

42
00:01:59,759 --> 00:02:01,710
sources some of some of them are are

43
00:02:01,710 --> 00:02:03,299
paid sources some of them are free

44
00:02:03,299 --> 00:02:06,390
sources but the common theme across all

45
00:02:06,390 --> 00:02:07,590
of them is really that there's a ton of

46
00:02:07,590 --> 00:02:08,970
noise and the information that we

47
00:02:08,970 --> 00:02:11,220
receive so really we were looking for a

48
00:02:11,220 --> 00:02:12,319
way to

49
00:02:12,319 --> 00:02:13,790
to take this information that we receive

50
00:02:13,790 --> 00:02:17,150
into leverets tattoo to do a couple

51
00:02:17,150 --> 00:02:20,209
things essentially how can we use this

52
00:02:20,209 --> 00:02:22,430
information to validate our security

53
00:02:22,430 --> 00:02:24,980
controls and how can we also validate in

54
00:02:24,980 --> 00:02:27,200
the first place that the this threat

55
00:02:27,200 --> 00:02:28,370
intelligence that we're receiving is

56
00:02:28,370 --> 00:02:30,469
relevant to our to our organization or

57
00:02:30,469 --> 00:02:33,709
to our systems so we want to see okay

58
00:02:33,709 --> 00:02:36,319
how can we take this information and and

59
00:02:36,319 --> 00:02:37,790
how can we take these indicators that

60
00:02:37,790 --> 00:02:39,650
that are part of this threat

61
00:02:39,650 --> 00:02:41,269
intelligence package that we receive and

62
00:02:41,269 --> 00:02:42,829
how can we programmatically

63
00:02:42,829 --> 00:02:45,500
a replay this information within our

64
00:02:45,500 --> 00:02:48,049
environment to validate our detection

65
00:02:48,049 --> 00:02:51,139
capabilities or our security controls so

66
00:02:51,139 --> 00:02:54,260
enter the Styx replay project you know

67
00:02:54,260 --> 00:02:55,969
switch with me

68
00:02:55,969 --> 00:02:58,819
enter the Styx replay project so our

69
00:02:58,819 --> 00:03:01,250
goal really was to programmatically

70
00:03:01,250 --> 00:03:03,769
replay Styx indicators to validate of

71
00:03:03,769 --> 00:03:06,530
security controls and when we first sat

72
00:03:06,530 --> 00:03:07,790
down initially started talking about

73
00:03:07,790 --> 00:03:09,469
this we came out with some challenges we

74
00:03:09,469 --> 00:03:10,639
came up with some questions that we

75
00:03:10,639 --> 00:03:13,540
wanted to answer and those questions are

76
00:03:13,540 --> 00:03:17,780
so taking sticks to how do we describe

77
00:03:17,780 --> 00:03:20,120
the things that we care about in the ICS

78
00:03:20,120 --> 00:03:22,069
security space and then how do we

79
00:03:22,069 --> 00:03:24,709
describe that within sticks to X how do

80
00:03:24,709 --> 00:03:26,629
we describe you know things like IP

81
00:03:26,629 --> 00:03:30,229
addresses or URLs file hashes but also

82
00:03:30,229 --> 00:03:32,060
how do we describe the mp3 commands or

83
00:03:32,060 --> 00:03:34,639
things that are very specific to ICS so

84
00:03:34,639 --> 00:03:36,709
that was our first challenge or a first

85
00:03:36,709 --> 00:03:39,290
question and then we said okay so if we

86
00:03:39,290 --> 00:03:41,509
have a way to describe these indicators

87
00:03:41,509 --> 00:03:43,609
within sticks within a standardised you

88
00:03:43,609 --> 00:03:46,849
know mechanism how can we replay these

89
00:03:46,849 --> 00:03:49,209
indicators within our environment to to

90
00:03:49,209 --> 00:03:51,560
assess you know whether or not our

91
00:03:51,560 --> 00:03:52,879
security controls are doing what we

92
00:03:52,879 --> 00:03:54,859
think they're supposed to be doing and

93
00:03:54,859 --> 00:03:57,400
the last question we asked ourselves is

94
00:03:57,400 --> 00:04:00,620
okay how can we take a look at the

95
00:04:00,620 --> 00:04:02,090
security controls how can we tie all

96
00:04:02,090 --> 00:04:03,009
that together

97
00:04:03,009 --> 00:04:05,629
receiving the information in and

98
00:04:05,629 --> 00:04:07,519
describing it accordingly you know in

99
00:04:07,519 --> 00:04:09,739
sticks replaying that information and

100
00:04:09,739 --> 00:04:11,959
then can we use that information to

101
00:04:11,959 --> 00:04:16,399
validate our security controls so I'll

102
00:04:16,399 --> 00:04:18,798
hand it over to Stefan for a overview of

103
00:04:18,798 --> 00:04:22,340
sticks big green play oh yeah I'm gonna

104
00:04:22,340 --> 00:04:24,349
give a for those of you who are not

105
00:04:24,349 --> 00:04:25,820
familiar with sticks I'm gonna give it

106
00:04:25,820 --> 00:04:28,310
overview and how it was beneficial to

107
00:04:28,310 --> 00:04:31,160
our project so Styx is really good when

108
00:04:31,160 --> 00:04:33,860
you want to describe in as little or as

109
00:04:33,860 --> 00:04:36,620
much detail an attack campaign and it's

110
00:04:36,620 --> 00:04:39,740
all about the context and so today when

111
00:04:39,740 --> 00:04:42,890
we talk about when we talk about sticks

112
00:04:42,890 --> 00:04:46,550
in general and we look well when we talk

113
00:04:46,550 --> 00:04:47,750
about threat intelligence

114
00:04:47,750 --> 00:04:50,510
we're mainly sharing flat files it could

115
00:04:50,510 --> 00:04:53,090
be Yara Yara files text addresses with

116
00:04:53,090 --> 00:04:55,490
one two three columns IP addresses URLs

117
00:04:55,490 --> 00:04:57,560
domains but we needed something more

118
00:04:57,560 --> 00:04:59,090
extensible than that especially because

119
00:04:59,090 --> 00:05:01,250
we wanted to talk about particular

120
00:05:01,250 --> 00:05:04,690
activity in an ICS environment so sticks

121
00:05:04,690 --> 00:05:06,770
which stands for a structure threatened

122
00:05:06,770 --> 00:05:09,080
information expression is a very

123
00:05:09,080 --> 00:05:12,820
extensible language to describe actions

124
00:05:12,820 --> 00:05:15,890
campaigns threat actors something that's

125
00:05:15,890 --> 00:05:18,590
an incident or an indicator an incident

126
00:05:18,590 --> 00:05:19,730
being something that's happened and

127
00:05:19,730 --> 00:05:20,630
indicate or something that you're

128
00:05:20,630 --> 00:05:23,660
looking for and so the fact that it's

129
00:05:23,660 --> 00:05:26,000
expressive flexible extensive and

130
00:05:26,000 --> 00:05:27,620
automatable is the reason that we looked

131
00:05:27,620 --> 00:05:29,800
at using sticks for a particular project

132
00:05:29,800 --> 00:05:32,480
versus creating our own you know

133
00:05:32,480 --> 00:05:35,120
standard language or using yar or

134
00:05:35,120 --> 00:05:37,240
something out other than that

135
00:05:37,240 --> 00:05:40,970
so there's nine components that we

136
00:05:40,970 --> 00:05:44,780
typically look at in sticks from a full

137
00:05:44,780 --> 00:05:46,550
campaign and that could be dealing with

138
00:05:46,550 --> 00:05:50,210
the threat actors the indicators the

139
00:05:50,210 --> 00:05:52,430
incidents so today when we when we think

140
00:05:52,430 --> 00:05:55,040
about sticks in general when we think

141
00:05:55,040 --> 00:05:59,120
about threat intelligence feeds and you

142
00:05:59,120 --> 00:06:00,680
know one second have a go let's see you

143
00:06:00,680 --> 00:06:02,890
back

144
00:06:06,780 --> 00:06:09,870
I think there's one slide that I had

145
00:06:09,870 --> 00:06:11,670
that was actually missing so today when

146
00:06:11,670 --> 00:06:12,990
we actually look in an attack and you

147
00:06:12,990 --> 00:06:16,760
look at a full range from exploitation

148
00:06:16,760 --> 00:06:18,750
whether it's a spear phishing attack

149
00:06:18,750 --> 00:06:21,389
into into an organization whether it's

150
00:06:21,389 --> 00:06:24,240
gaining a foothold and you're looking at

151
00:06:24,240 --> 00:06:26,520
sharing threat intelligence feeds when

152
00:06:26,520 --> 00:06:29,300
we think about IP addresses domains URLs

153
00:06:29,300 --> 00:06:31,830
registry keys I can share that

154
00:06:31,830 --> 00:06:33,410
information very easily in a flat file

155
00:06:33,410 --> 00:06:36,720
now when we go up the stack it gets a

156
00:06:36,720 --> 00:06:38,070
little bit more difficult from an

157
00:06:38,070 --> 00:06:40,800
attacker perspective as to what we're

158
00:06:40,800 --> 00:06:43,350
detecting or what we're trying to

159
00:06:43,350 --> 00:06:45,630
prevent those IP address is very easy

160
00:06:45,630 --> 00:06:48,360
for us to share domain names very easy

161
00:06:48,360 --> 00:06:49,919
for us to share at the same time it's

162
00:06:49,919 --> 00:06:52,080
very easy for an attacker to say I'm

163
00:06:52,080 --> 00:06:53,970
gonna change my c2 address I'm gonna

164
00:06:53,970 --> 00:06:55,350
change the IP addresses that I'm gonna

165
00:06:55,350 --> 00:06:57,450
use I'm going to change and repackage

166
00:06:57,450 --> 00:06:59,220
the file hash that we have in a flat

167
00:06:59,220 --> 00:07:02,060
file that were that we're sharing now

168
00:07:02,060 --> 00:07:04,650
when we look at the patterns and we want

169
00:07:04,650 --> 00:07:06,630
to have more context to say you know

170
00:07:06,630 --> 00:07:08,610
what's not going to change over time

171
00:07:08,610 --> 00:07:11,700
what are what's the the tech you know

172
00:07:11,700 --> 00:07:13,890
TTP's the techniques tactics and

173
00:07:13,890 --> 00:07:15,000
procedures they're going to be used

174
00:07:15,000 --> 00:07:17,100
again and again once an attacker does

175
00:07:17,100 --> 00:07:19,470
gain access into our environment whether

176
00:07:19,470 --> 00:07:20,970
it be the commands that are issued the

177
00:07:20,970 --> 00:07:22,919
tools and the arguments that are issued

178
00:07:22,919 --> 00:07:25,320
within within that tool how do we

179
00:07:25,320 --> 00:07:27,210
describe that because that's more likely

180
00:07:27,210 --> 00:07:29,280
of a pattern if we're sharing

181
00:07:29,280 --> 00:07:31,710
information to find again and again and

182
00:07:31,710 --> 00:07:34,440
again then the IP addresses which form

183
00:07:34,440 --> 00:07:36,030
or perspective it's credibly easier to

184
00:07:36,030 --> 00:07:38,850
share in flat files but from an attacker

185
00:07:38,850 --> 00:07:41,160
perspective very easy to share and

186
00:07:41,160 --> 00:07:43,229
something that might not be likely to

187
00:07:43,229 --> 00:07:45,539
see again so it becomes very very static

188
00:07:45,539 --> 00:07:47,490
and so one of the reasons dan and I

189
00:07:47,490 --> 00:07:49,710
looked at using sticks is because it

190
00:07:49,710 --> 00:07:53,640
gave us so much more flexibility into

191
00:07:53,640 --> 00:07:55,860
the context of extending it into some of

192
00:07:55,860 --> 00:07:58,800
the areas we wanted to look at ICS and

193
00:07:58,800 --> 00:08:00,030
some of the activities that were gonna

194
00:08:00,030 --> 00:08:05,400
happen so how many of you use sticks

195
00:08:05,400 --> 00:08:07,560
today okay good

196
00:08:07,560 --> 00:08:09,090
very very few of you but I'm guessing

197
00:08:09,090 --> 00:08:12,960
many of you exchanged or are familiar

198
00:08:12,960 --> 00:08:16,489
with just using threat Intel

199
00:08:16,489 --> 00:08:20,269
in in your NSM environment so when we

200
00:08:20,269 --> 00:08:22,279
look at sticks today we're looking at

201
00:08:22,279 --> 00:08:24,829
maybe the exploit target you know what

202
00:08:24,829 --> 00:08:27,049
was exploit 'add in the environment when

203
00:08:27,049 --> 00:08:28,849
we look at the full campaign how do we

204
00:08:28,849 --> 00:08:30,799
describe the actor whether it's a

205
00:08:30,799 --> 00:08:32,568
private naming schema that you might use

206
00:08:32,568 --> 00:08:35,448
internally whether it's the public

207
00:08:35,448 --> 00:08:37,039
naming schema that's used from Dell

208
00:08:37,039 --> 00:08:40,309
SecureWorks or ground strike how do we

209
00:08:40,309 --> 00:08:42,469
describe who the actor and the actor

210
00:08:42,469 --> 00:08:46,370
group was that actually was executing

211
00:08:46,370 --> 00:08:48,680
some of these commands the indicators

212
00:08:48,680 --> 00:08:53,779
that typically are used to pay attention

213
00:08:53,779 --> 00:08:54,980
to whether the patterns in this

214
00:08:54,980 --> 00:08:57,410
environment so typically you'll find in

215
00:08:57,410 --> 00:08:59,000
the six pattern all of this information

216
00:08:59,000 --> 00:09:01,459
versus just the IP addresses just the

217
00:09:01,459 --> 00:09:03,740
domains it's the who what where when

218
00:09:03,740 --> 00:09:05,509
everything that you'll need to describe

219
00:09:05,509 --> 00:09:07,399
the actual attack campaign from start to

220
00:09:07,399 --> 00:09:09,290
finish and that's why it's got so much

221
00:09:09,290 --> 00:09:11,779
more rich context in describing what

222
00:09:11,779 --> 00:09:14,480
happens in environment so you know six

223
00:09:14,480 --> 00:09:16,839
has gone through a number of transforms

224
00:09:16,839 --> 00:09:21,019
we decided to use sticks 2x which right

225
00:09:21,019 --> 00:09:24,649
now is still not at agreed-upon standard

226
00:09:24,649 --> 00:09:27,920
they're still I think reviewing and

227
00:09:27,920 --> 00:09:29,689
there's a few different mailing lists

228
00:09:29,689 --> 00:09:31,639
that will will let you know how to pay

229
00:09:31,639 --> 00:09:34,699
attention to it but we use 6 to 2x

230
00:09:34,699 --> 00:09:36,800
because it was Jason bass simplified

231
00:09:36,800 --> 00:09:39,949
more intuitive and it was just easier to

232
00:09:39,949 --> 00:09:41,839
get responses when we were talking to

233
00:09:41,839 --> 00:09:45,079
members of the Oasis committee who who

234
00:09:45,079 --> 00:09:47,120
is the committee the standards body

235
00:09:47,120 --> 00:09:50,420
that's made up of a number of companies

236
00:09:50,420 --> 00:09:53,329
and standards bodies finalizing the the

237
00:09:53,329 --> 00:09:55,339
standard right now and so when Dan and I

238
00:09:55,339 --> 00:09:57,230
were talking about how are we gonna use

239
00:09:57,230 --> 00:10:00,259
sticks in an ICS environment to extend

240
00:10:00,259 --> 00:10:02,930
it to describe say at the mp3 command we

241
00:10:02,930 --> 00:10:04,250
had a lot more feedback because that

242
00:10:04,250 --> 00:10:07,730
everybody's - thinking about 2.0 not 100

243
00:10:07,730 --> 00:10:13,309
anymore so looking at an example of

244
00:10:13,309 --> 00:10:16,490
sticks on the left hand side there's

245
00:10:16,490 --> 00:10:19,009
maybe a flat file of how we would share

246
00:10:19,009 --> 00:10:20,600
IP addresses if we're talking about

247
00:10:20,600 --> 00:10:23,420
thread information when was it seen

248
00:10:23,420 --> 00:10:25,459
maybe the the bot name that's associated

249
00:10:25,459 --> 00:10:28,279
with but there might be a lot more

250
00:10:28,279 --> 00:10:29,750
information that we

251
00:10:29,750 --> 00:10:31,490
want to bring into context when we're

252
00:10:31,490 --> 00:10:32,990
sharing this information so on the right

253
00:10:32,990 --> 00:10:34,850
hand side it's how it would be described

254
00:10:34,850 --> 00:10:38,630
in and sticks to X and so a bundle is

255
00:10:38,630 --> 00:10:40,640
how you typically share some type of

256
00:10:40,640 --> 00:10:43,100
customizable information the indicator

257
00:10:43,100 --> 00:10:44,990
is the type of information within the

258
00:10:44,990 --> 00:10:46,280
sticks file

259
00:10:46,280 --> 00:10:49,610
there's the attribution ID that Dan and

260
00:10:49,610 --> 00:10:51,230
I created it of the indicator so you

261
00:10:51,230 --> 00:10:54,440
know where it came from the name being

262
00:10:54,440 --> 00:10:57,560
Zbot the pattern being a cybox pattern

263
00:10:57,560 --> 00:10:59,570
to the IP address that you're looking

264
00:10:59,570 --> 00:11:02,150
for and then you can start adding to it

265
00:11:02,150 --> 00:11:03,920
a lot more information that's very

266
00:11:03,920 --> 00:11:06,710
common in a sticks file as far as the

267
00:11:06,710 --> 00:11:08,180
the kill chain face that's associated

268
00:11:08,180 --> 00:11:11,570
with so was this IP address used at what

269
00:11:11,570 --> 00:11:13,250
point in the kill chain was it used in

270
00:11:13,250 --> 00:11:15,830
the exfiltration phase in this

271
00:11:15,830 --> 00:11:17,630
particular case it's described that it

272
00:11:17,630 --> 00:11:19,970
was actually used when the attacker was

273
00:11:19,970 --> 00:11:21,140
inside the network gaining a foothold

274
00:11:21,140 --> 00:11:23,030
and this is when the IP address was

275
00:11:23,030 --> 00:11:25,280
being used so the timing aspect is

276
00:11:25,280 --> 00:11:29,240
another reason that is very beneficial

277
00:11:29,240 --> 00:11:32,750
to sticks to X I think versus 1 X is the

278
00:11:32,750 --> 00:11:35,300
temporal aspect you can describe when

279
00:11:35,300 --> 00:11:37,970
particular IP addresses are used whether

280
00:11:37,970 --> 00:11:40,190
in the kill kill chain phase or just

281
00:11:40,190 --> 00:11:42,740
within this IP address was first seen

282
00:11:42,740 --> 00:11:44,839
and then this event and then this event

283
00:11:44,839 --> 00:11:47,030
so it's very beneficial to subscribe at

284
00:11:47,030 --> 00:11:48,500
versus just a flat list of IP addresses

285
00:11:48,500 --> 00:11:51,280
it doesn't have as much information and

286
00:11:51,280 --> 00:11:53,660
additionally one of the cool things that

287
00:11:53,660 --> 00:11:56,839
some that's new in sticks 2x is that

288
00:11:56,839 --> 00:11:58,700
like Stefan mentioned there's a temporal

289
00:11:58,700 --> 00:12:02,300
component to describing indicators so

290
00:12:02,300 --> 00:12:04,790
whereas in sticks one you could say okay

291
00:12:04,790 --> 00:12:06,500
well this is the command that they're

292
00:12:06,500 --> 00:12:08,480
going to send well in sticks do you can

293
00:12:08,480 --> 00:12:10,190
see something like well if they send

294
00:12:10,190 --> 00:12:12,650
this command 15 times within a minute

295
00:12:12,650 --> 00:12:15,650
then you proceed with coarse faction 1

296
00:12:15,650 --> 00:12:18,800
and whereas if you know if that specific

297
00:12:18,800 --> 00:12:20,450
event only happens once in a blue moon

298
00:12:20,450 --> 00:12:23,720
then you would treat that differently so

299
00:12:23,720 --> 00:12:26,030
having a temporal component 2 describing

300
00:12:26,030 --> 00:12:28,550
these threats we think is another good

301
00:12:28,550 --> 00:12:32,050
reason to use sticks 2 versus sticks 1

302
00:12:32,050 --> 00:12:35,210
so again you know the point being how

303
00:12:35,210 --> 00:12:37,790
are we you know if the the theme of the

304
00:12:37,790 --> 00:12:39,800
the converse exists this year is coming

305
00:12:39,800 --> 00:12:41,750
together how how are we going to

306
00:12:41,750 --> 00:12:43,279
continue to share

307
00:12:43,279 --> 00:12:45,230
third information you know we all have

308
00:12:45,230 --> 00:12:48,019
private environments that especially

309
00:12:48,019 --> 00:12:49,759
during an incident that where we hold

310
00:12:49,759 --> 00:12:52,100
very tight to our chest as to what

311
00:12:52,100 --> 00:12:53,600
information we do we don't want to share

312
00:12:53,600 --> 00:12:56,029
but doing that in a standardized format

313
00:12:56,029 --> 00:12:57,319
it's going to make it incredibly easy

314
00:12:57,319 --> 00:13:00,350
for either the commercial product the

315
00:13:00,350 --> 00:13:03,379
open-source projects or the projects

316
00:13:03,379 --> 00:13:06,319
being used internally can consume and

317
00:13:06,319 --> 00:13:07,879
either be used for detection or

318
00:13:07,879 --> 00:13:11,149
prevention or monitoring capabilities so

319
00:13:11,149 --> 00:13:13,069
another example of a sticks file is just

320
00:13:13,069 --> 00:13:15,100
how do I describe a file in general that

321
00:13:15,100 --> 00:13:19,309
might be an indicator of maliciousness

322
00:13:19,309 --> 00:13:21,319
inside the environment so type file

323
00:13:21,319 --> 00:13:24,800
looking at the hashes this is md5 hash

324
00:13:24,800 --> 00:13:28,040
some of the the file size and then the

325
00:13:28,040 --> 00:13:29,899
name of the file so it's easily

326
00:13:29,899 --> 00:13:32,540
described what's nice about sticks

327
00:13:32,540 --> 00:13:35,120
though is it's very extensible so if I

328
00:13:35,120 --> 00:13:38,420
wanted to then describe say a PDF file

329
00:13:38,420 --> 00:13:41,029
I'd have that same notion it's type file

330
00:13:41,029 --> 00:13:43,189
with a hash but then I can start

331
00:13:43,189 --> 00:13:46,850
describing the attributes of the PDF

332
00:13:46,850 --> 00:13:49,399
file itself so for those of you that are

333
00:13:49,399 --> 00:13:52,579
familiar with Yarra signatures you can

334
00:13:52,579 --> 00:13:54,139
translate a lot of Yarra signatures

335
00:13:54,139 --> 00:13:56,809
directly to a sticks format and describe

336
00:13:56,809 --> 00:13:59,180
it as if you're looking for your own

337
00:13:59,180 --> 00:14:02,029
signature for a particular file and the

338
00:14:02,029 --> 00:14:05,569
contents within that file now when we

339
00:14:05,569 --> 00:14:08,209
bring that to network traffic the same

340
00:14:08,209 --> 00:14:11,029
same rules apply so there's types within

341
00:14:11,029 --> 00:14:13,519
sticks and you can create custom types

342
00:14:13,519 --> 00:14:14,750
as well as but they're standardized

343
00:14:14,750 --> 00:14:17,899
types and that allows us to agree on a

344
00:14:17,899 --> 00:14:20,000
format agree on a type so that we can

345
00:14:20,000 --> 00:14:22,040
consume it within either the projects

346
00:14:22,040 --> 00:14:23,959
that we've created or the commercial

347
00:14:23,959 --> 00:14:26,540
products that we're using so type being

348
00:14:26,540 --> 00:14:30,350
ipv4 address you can have several in

349
00:14:30,350 --> 00:14:32,959
enumeration and then you can start and

350
00:14:32,959 --> 00:14:35,240
say well I want to describe not just the

351
00:14:35,240 --> 00:14:37,939
ipv4 address to look out for or the set

352
00:14:37,939 --> 00:14:40,329
of addresses to look out for but

353
00:14:40,329 --> 00:14:43,839
particular attributes within say the TCP

354
00:14:43,839 --> 00:14:47,329
header on the transport layer and so

355
00:14:47,329 --> 00:14:50,300
then there's extension for the tcp

356
00:14:50,300 --> 00:14:52,719
transpose

357
00:14:54,110 --> 00:14:57,850
all right so the sticks replay project

358
00:14:57,850 --> 00:15:00,080
now that we've set up a level in the

359
00:15:00,080 --> 00:15:01,970
room for what sticks is and how to use

360
00:15:01,970 --> 00:15:05,210
it and how it's beneficial to us let's

361
00:15:05,210 --> 00:15:07,190
talk a little bit about specific things

362
00:15:07,190 --> 00:15:08,660
that we've been working on for this

363
00:15:08,660 --> 00:15:10,839
project

364
00:15:11,980 --> 00:15:17,420
great um so to kind of give a little bit

365
00:15:17,420 --> 00:15:19,730
of background of what what the

366
00:15:19,730 --> 00:15:21,290
components are within the Stix replay

367
00:15:21,290 --> 00:15:23,360
project we've put together a very simple

368
00:15:23,360 --> 00:15:26,000
architecture slide here so two separate

369
00:15:26,000 --> 00:15:27,440
networks the control center network and

370
00:15:27,440 --> 00:15:28,880
then a substation network separated by a

371
00:15:28,880 --> 00:15:31,340
firewall and within the control center

372
00:15:31,340 --> 00:15:33,220
network we have the following components

373
00:15:33,220 --> 00:15:36,350
we have an NS M or networks of Chronicle

374
00:15:36,350 --> 00:15:38,840
security monitoring appliance we have a

375
00:15:38,840 --> 00:15:42,220
sim which gathered us all of our events

376
00:15:42,220 --> 00:15:44,750
then we have our SCADA master as well as

377
00:15:44,750 --> 00:15:46,610
the attack IQ fire drill platform and

378
00:15:46,610 --> 00:15:54,340
agent so we used a free free framework

379
00:15:54,340 --> 00:15:57,080
called the tach IQ there's a version

380
00:15:57,080 --> 00:15:59,300
that's a community version and that was

381
00:15:59,300 --> 00:16:01,580
what we use from the replay perspective

382
00:16:01,580 --> 00:16:04,130
so once we we knew that we wanted to

383
00:16:04,130 --> 00:16:07,160
replay dnp3 commands the point was well

384
00:16:07,160 --> 00:16:09,320
if you had a rogue device inside of a

385
00:16:09,320 --> 00:16:12,440
various network segment that you wanted

386
00:16:12,440 --> 00:16:17,300
to help test the validity or the ability

387
00:16:17,300 --> 00:16:19,340
and the readiness of the NSM in the

388
00:16:19,340 --> 00:16:22,460
monitoring mode or detection mode how do

389
00:16:22,460 --> 00:16:24,560
we do that and so we used a framework

390
00:16:24,560 --> 00:16:27,200
there's a community version of attack IQ

391
00:16:27,200 --> 00:16:30,860
for us to put various agents in

392
00:16:30,860 --> 00:16:33,500
different network segments Linux Windows

393
00:16:33,500 --> 00:16:35,630
Mac agents and they just sit there as

394
00:16:35,630 --> 00:16:37,430
services or demons and essentially you

395
00:16:37,430 --> 00:16:40,310
have an internal command and control so

396
00:16:40,310 --> 00:16:42,050
you have a console various agents

397
00:16:42,050 --> 00:16:43,820
scattered around and at that point you

398
00:16:43,820 --> 00:16:47,030
can run scenarios to those agents which

399
00:16:47,030 --> 00:16:48,830
is what we built for the Stix replay

400
00:16:48,830 --> 00:16:52,460
project so essentially the agent acts as

401
00:16:52,460 --> 00:16:55,790
you know a malicious actor within your

402
00:16:55,790 --> 00:16:58,040
environment and this in this case you

403
00:16:58,040 --> 00:17:00,110
can just though this is a simple

404
00:17:00,110 --> 00:17:01,400
architecture you could assume that you

405
00:17:01,400 --> 00:17:05,540
would deploy various agents in various

406
00:17:05,540 --> 00:17:06,970
different substation environment

407
00:17:06,970 --> 00:17:10,970
and then the other component here that

408
00:17:10,970 --> 00:17:13,099
we have is we have our NSM sensor which

409
00:17:13,099 --> 00:17:15,170
you would pair you know in every one of

410
00:17:15,170 --> 00:17:17,209
those different substation environments

411
00:17:17,209 --> 00:17:19,089
to gather information and the

412
00:17:19,089 --> 00:17:24,290
distributed um you know I guess design

413
00:17:24,290 --> 00:17:26,480
of the attack IQ platform would allow

414
00:17:26,480 --> 00:17:30,020
you to you know put agents and all sorts

415
00:17:30,020 --> 00:17:31,190
of different places where you would like

416
00:17:31,190 --> 00:17:33,140
to validate your security controls or

417
00:17:33,140 --> 00:17:36,110
your NSM to see how it's performing so

418
00:17:36,110 --> 00:17:38,600
you can use that to you know a schedule

419
00:17:38,600 --> 00:17:40,610
it and then send send different dnp3

420
00:17:40,610 --> 00:17:44,390
commands in different different network

421
00:17:44,390 --> 00:17:49,730
segments in your environment so the

422
00:17:49,730 --> 00:17:54,140
sticks replay project indicators so if

423
00:17:54,140 --> 00:17:55,370
you remember our first question was how

424
00:17:55,370 --> 00:17:57,020
do we represent the information that we

425
00:17:57,020 --> 00:17:58,340
care about that helps us describe

426
00:17:58,340 --> 00:18:02,810
threats and in in sticks 2x and and one

427
00:18:02,810 --> 00:18:04,640
of the things that we wanted to focus on

428
00:18:04,640 --> 00:18:06,800
specifically it was how do we describe

429
00:18:06,800 --> 00:18:10,010
it the mp3 command and sticks so we

430
00:18:10,010 --> 00:18:11,360
ended up doing this in two different

431
00:18:11,360 --> 00:18:11,780
ways

432
00:18:11,780 --> 00:18:14,750
we created a dnp3 extension indicator

433
00:18:14,750 --> 00:18:18,110
and we created a dnp3 extension to the

434
00:18:18,110 --> 00:18:21,380
cybox object network traffic and we'll

435
00:18:21,380 --> 00:18:22,550
show you what we'll show you guys

436
00:18:22,550 --> 00:18:24,860
examples of both of these in the coming

437
00:18:24,860 --> 00:18:30,170
slides but first things first

438
00:18:30,170 --> 00:18:36,800
oh yeah so this is actually this is the

439
00:18:36,800 --> 00:18:38,540
draft version of our slides yeah I

440
00:18:38,540 --> 00:18:40,340
realize that a few slides ago but in any

441
00:18:40,340 --> 00:18:41,860
case I suppose we'll just wing it

442
00:18:41,860 --> 00:18:44,270
obviously this to do here has been done

443
00:18:44,270 --> 00:18:47,860
but it's in a previous slide deck so

444
00:18:47,860 --> 00:18:51,290
this G mp3 package structure so we said

445
00:18:51,290 --> 00:18:52,820
okay so what information do we care

446
00:18:52,820 --> 00:18:55,460
about within the mp3 packet and and what

447
00:18:55,460 --> 00:18:56,840
do we want to be able to represent with

448
00:18:56,840 --> 00:19:00,140
on sticks and and and truly um you know

449
00:19:00,140 --> 00:19:01,370
we could have focused on the entire

450
00:19:01,370 --> 00:19:02,900
thing including the link layer and the

451
00:19:02,900 --> 00:19:05,120
transport layer but we really chose to

452
00:19:05,120 --> 00:19:07,400
focus on the application layer of the

453
00:19:07,400 --> 00:19:12,470
dnp3 packet I you know certainly if you

454
00:19:12,470 --> 00:19:14,540
wanted to you could start as has been

455
00:19:14,540 --> 00:19:16,370
done before you could start fuzzing and

456
00:19:16,370 --> 00:19:19,010
sending malicious you know or malformed

457
00:19:19,010 --> 00:19:20,630
link clearing transport layer but

458
00:19:20,630 --> 00:19:22,910
we thought that you know in the context

459
00:19:22,910 --> 00:19:25,610
of an describing a threat or an attack

460
00:19:25,610 --> 00:19:27,800
that most of the juicy stuff would

461
00:19:27,800 --> 00:19:29,630
really happen at the application layer

462
00:19:29,630 --> 00:19:32,450
so it was that and as well the the whole

463
00:19:32,450 --> 00:19:33,830
exercise that we were trying to go

464
00:19:33,830 --> 00:19:35,900
through was if you had a rogue device

465
00:19:35,900 --> 00:19:39,500
sending dnp3 commands and testing the

466
00:19:39,500 --> 00:19:42,680
NSM and that was really the the the the

467
00:19:42,680 --> 00:19:44,210
project kind of scoped that we were

468
00:19:44,210 --> 00:19:46,040
looking at versus actually fuzzing the

469
00:19:46,040 --> 00:19:50,330
stack absolutely so within the

470
00:19:50,330 --> 00:19:52,610
application layer we wanted to describe

471
00:19:52,610 --> 00:19:56,360
the headers of the dnp3 objects we

472
00:19:56,360 --> 00:19:57,620
wanted to describe of course the

473
00:19:57,620 --> 00:19:59,960
function code and we wanted to describe

474
00:19:59,960 --> 00:20:02,630
the application sequence a lot of the

475
00:20:02,630 --> 00:20:04,700
other things here are either not

476
00:20:04,700 --> 00:20:06,710
applicable in the context of you know a

477
00:20:06,710 --> 00:20:10,100
rogue master sending a command to a an

478
00:20:10,100 --> 00:20:13,070
outstation or simply a um static and in

479
00:20:13,070 --> 00:20:16,010
this case so that was our focus and

480
00:20:16,010 --> 00:20:17,600
these are the things within the dnp3

481
00:20:17,600 --> 00:20:19,340
packet that we wanted to represent in

482
00:20:19,340 --> 00:20:25,370
sticks so we created a DMP three sticks

483
00:20:25,370 --> 00:20:28,070
extension essentially where you know

484
00:20:28,070 --> 00:20:30,170
this is something that exists within

485
00:20:30,170 --> 00:20:32,030
sticks that allows you to describe you

486
00:20:32,030 --> 00:20:35,360
know the network layer the source

487
00:20:35,360 --> 00:20:36,710
address the destination address the

488
00:20:36,710 --> 00:20:39,050
source port destination port and then

489
00:20:39,050 --> 00:20:40,790
what we create is essentially the part

490
00:20:40,790 --> 00:20:42,770
that's highlighted in yellow so we

491
00:20:42,770 --> 00:20:44,540
created a dnp3 extension that allows us

492
00:20:44,540 --> 00:20:46,280
to describe the application sequence

493
00:20:46,280 --> 00:20:49,640
from 0 to 15 the function code as well

494
00:20:49,640 --> 00:20:51,770
as the headers so this is really the

495
00:20:51,770 --> 00:20:53,690
information that we wanted to be able to

496
00:20:53,690 --> 00:20:56,090
represent within sticks and we did it

497
00:20:56,090 --> 00:20:58,040
this way here I think this is a

498
00:20:58,040 --> 00:20:59,720
relatively elegant way of representing

499
00:20:59,720 --> 00:21:02,000
it I think it it looks good and all the

500
00:21:02,000 --> 00:21:03,980
information is contained here but we

501
00:21:03,980 --> 00:21:07,430
also created a cybox pattern that allows

502
00:21:07,430 --> 00:21:09,440
us to do or represent the exact same

503
00:21:09,440 --> 00:21:11,570
information it's a little bit more

504
00:21:11,570 --> 00:21:14,660
cluttered but keeping in mind that this

505
00:21:14,660 --> 00:21:18,200
languages or standard is supposed to be

506
00:21:18,200 --> 00:21:19,940
interpreted you know or machine readable

507
00:21:19,940 --> 00:21:22,400
so most of the time it will be created

508
00:21:22,400 --> 00:21:25,160
by a machine and it will be read by a

509
00:21:25,160 --> 00:21:27,080
machine so the fact that it looks a

510
00:21:27,080 --> 00:21:28,430
little bit uglier than the other ones

511
00:21:28,430 --> 00:21:31,280
not too too relevant in this context but

512
00:21:31,280 --> 00:21:33,720
but all the information is there as well

513
00:21:33,720 --> 00:21:35,160
a function object an application

514
00:21:35,160 --> 00:21:37,500
sequence object and then a headers

515
00:21:37,500 --> 00:21:39,540
object as well so because you know

516
00:21:39,540 --> 00:21:41,640
sticks being the language itself the the

517
00:21:41,640 --> 00:21:44,760
idea is its extensible so we hadn't seen

518
00:21:44,760 --> 00:21:47,550
a lot of sticks files especially in like

519
00:21:47,550 --> 00:21:50,880
the 2x as its you know being

520
00:21:50,880 --> 00:21:53,990
standardized we hadn't seen really any

521
00:21:53,990 --> 00:21:57,510
sticks files that were describing you

522
00:21:57,510 --> 00:21:59,630
know whether it be Modbus or dnp3

523
00:21:59,630 --> 00:22:02,340
commands and so you know what we started

524
00:22:02,340 --> 00:22:06,150
doing was a project that focused on well

525
00:22:06,150 --> 00:22:07,440
if we're gonna start sharing is this

526
00:22:07,440 --> 00:22:10,260
acceptable we found it very useful and

527
00:22:10,260 --> 00:22:13,170
you know part of the the next few days

528
00:22:13,170 --> 00:22:15,150
is hopefully having some conversations

529
00:22:15,150 --> 00:22:17,580
for those of you that that deal with

530
00:22:17,580 --> 00:22:18,930
threat intelligence especially in the

531
00:22:18,930 --> 00:22:22,890
ICS world and are looking at the mp3 or

532
00:22:22,890 --> 00:22:25,500
Modbus and you know having your NSM have

533
00:22:25,500 --> 00:22:26,970
a list of you know it's it's white

534
00:22:26,970 --> 00:22:28,680
listed as far as what commands are

535
00:22:28,680 --> 00:22:31,590
acceptable in certain environments and

536
00:22:31,590 --> 00:22:34,350
then testing the NSM to say hey you know

537
00:22:34,350 --> 00:22:37,140
I've actually replayed a dnp3 command we

538
00:22:37,140 --> 00:22:38,970
were able to detect that and we are

539
00:22:38,970 --> 00:22:42,510
using you know sticks files to to input

540
00:22:42,510 --> 00:22:45,780
as far as acceptability criteria there's

541
00:22:45,780 --> 00:22:47,100
a lot of different ways because this is

542
00:22:47,100 --> 00:22:49,260
a language it is extensible to describe

543
00:22:49,260 --> 00:22:51,360
that and then as we start sharing as a

544
00:22:51,360 --> 00:22:53,700
community more what are we gonna see in

545
00:22:53,700 --> 00:22:55,170
terms of the format's because it's a

546
00:22:55,170 --> 00:22:57,510
language that has a lot of flexibility

547
00:22:57,510 --> 00:22:59,490
so what's going to become the norm in

548
00:22:59,490 --> 00:23:03,470
the industry to share with one another

549
00:23:03,470 --> 00:23:05,730
so I'll hand it over to Stefan Oh

550
00:23:05,730 --> 00:23:07,680
actually yeah I'm gonna take this one

551
00:23:07,680 --> 00:23:12,960
yeah be a surprise we'll see what

552
00:23:12,960 --> 00:23:15,750
happens so the first component of our

553
00:23:15,750 --> 00:23:17,910
sticks replay project is you know as

554
00:23:17,910 --> 00:23:19,950
good engineers we we thought that it

555
00:23:19,950 --> 00:23:22,530
would be great to reuse somebody else's

556
00:23:22,530 --> 00:23:25,230
excellent work no need to reinvent the

557
00:23:25,230 --> 00:23:28,010
wheel so thanks to Adam

558
00:23:28,010 --> 00:23:31,530
we took a slice of the aegis framework

559
00:23:31,530 --> 00:23:35,400
and and we have a np3 console which

560
00:23:35,400 --> 00:23:37,670
allows us to given a set of parameters

561
00:23:37,670 --> 00:23:40,710
creates a dnp3 frame and send that over

562
00:23:40,710 --> 00:23:45,570
to an outstation so within the dnp3

563
00:23:45,570 --> 00:23:47,440
console given you know

564
00:23:47,440 --> 00:23:51,220
Oh wrong button given a host IP address

565
00:23:51,220 --> 00:23:54,040
or the address of the outstation the

566
00:23:54,040 --> 00:23:57,610
dnp3 port and use the master address and

567
00:23:57,610 --> 00:24:00,520
the outstation address given a function

568
00:24:00,520 --> 00:24:03,100
code and a set of headers and as well as

569
00:24:03,100 --> 00:24:05,350
the application sequence the DNP three

570
00:24:05,350 --> 00:24:07,440
console packages all that within a needs

571
00:24:07,440 --> 00:24:10,540
you know transport and link layer

572
00:24:10,540 --> 00:24:13,120
information and then sends that over to

573
00:24:13,120 --> 00:24:16,450
our out station so that was the the

574
00:24:16,450 --> 00:24:18,850
components of our TMP 3-play project

575
00:24:18,850 --> 00:24:21,130
which allows us to create that frame and

576
00:24:21,130 --> 00:24:25,060
send it over to the out station so

577
00:24:25,060 --> 00:24:29,530
thanks Adam for your excellent work so

578
00:24:29,530 --> 00:24:31,450
the the point again that the project

579
00:24:31,450 --> 00:24:34,120
wasn't just to send a dnp3 command we

580
00:24:34,120 --> 00:24:36,160
wanted to do this in an automated

581
00:24:36,160 --> 00:24:41,700
fashion inputting parsing in a Stix file

582
00:24:41,700 --> 00:24:44,820
then sending it to the D mp3 console

583
00:24:44,820 --> 00:24:48,960
that out of cranes project had had

584
00:24:48,960 --> 00:24:51,430
nicely kind of wrapped up and allowed us

585
00:24:51,430 --> 00:24:56,470
to use and then at that point we wrote a

586
00:24:56,470 --> 00:24:59,740
connector that would allow us to connect

587
00:24:59,740 --> 00:25:02,620
to in this case we used Splunk but we

588
00:25:02,620 --> 00:25:04,630
could use dark side or alienvault or cue

589
00:25:04,630 --> 00:25:07,810
radar that looked at the logs at the NSM

590
00:25:07,810 --> 00:25:09,160
would actually generate and then

591
00:25:09,160 --> 00:25:12,310
determine when we actually send using

592
00:25:12,310 --> 00:25:16,570
the attack IQ framework when we send it

593
00:25:16,570 --> 00:25:18,880
and then spun off from the agent and the

594
00:25:18,880 --> 00:25:23,320
the mp3 console the mp3 command does the

595
00:25:23,320 --> 00:25:26,890
NSM send a log to Splunk so from end to

596
00:25:26,890 --> 00:25:27,400
end

597
00:25:27,400 --> 00:25:29,470
we had scenario that we built and at the

598
00:25:29,470 --> 00:25:31,090
end we'll show you where to download all

599
00:25:31,090 --> 00:25:34,120
this code but we built the scenario and

600
00:25:34,120 --> 00:25:36,070
this is meant for automation and real

601
00:25:36,070 --> 00:25:38,410
ease of use to parse the sticks file

602
00:25:38,410 --> 00:25:40,540
replay the DMP through command and then

603
00:25:40,540 --> 00:25:42,550
we built a connector that as that

604
00:25:42,550 --> 00:25:44,170
happens and that process gets

605
00:25:44,170 --> 00:25:47,140
instantiated immediately on a timely

606
00:25:47,140 --> 00:25:49,530
basis you know we can specify the time

607
00:25:49,530 --> 00:25:50,980
constantly checks

608
00:25:50,980 --> 00:25:54,970
Splunk for a particular query that's

609
00:25:54,970 --> 00:25:56,620
going to be looked for and in a regex

610
00:25:56,620 --> 00:25:59,440
pattern and again you could use and

611
00:25:59,440 --> 00:26:01,190
build any kind

612
00:26:01,190 --> 00:26:02,660
it's just really a difference in the

613
00:26:02,660 --> 00:26:05,300
rest API that's used between any sim

614
00:26:05,300 --> 00:26:07,070
that you might have in place and you

615
00:26:07,070 --> 00:26:09,740
could use a number of different NSF's to

616
00:26:09,740 --> 00:26:13,400
then look at different query but the the

617
00:26:13,400 --> 00:26:15,620
point of actually building it from a

618
00:26:15,620 --> 00:26:16,970
scenario was to look at it in a

619
00:26:16,970 --> 00:26:19,340
distributed kind of manner as opposed to

620
00:26:19,340 --> 00:26:22,610
it was just in a test lab and sending a

621
00:26:22,610 --> 00:26:24,740
dp3 command and Inter terming that we

622
00:26:24,740 --> 00:26:26,450
wanted a full framework so there might

623
00:26:26,450 --> 00:26:28,190
be different network segments each

624
00:26:28,190 --> 00:26:30,680
having different an SMS different

625
00:26:30,680 --> 00:26:31,250
whitelist

626
00:26:31,250 --> 00:26:34,490
that might have acceptability criteria

627
00:26:34,490 --> 00:26:37,070
and so at any point in time almost

628
00:26:37,070 --> 00:26:40,820
having this constant validation of the

629
00:26:40,820 --> 00:26:42,290
whitelist that's been put in place and

630
00:26:42,290 --> 00:26:43,790
every network segment might be a little

631
00:26:43,790 --> 00:26:47,360
bit different so in building the

632
00:26:47,360 --> 00:26:50,570
scenario the the scenario itself is

633
00:26:50,570 --> 00:26:55,700
built in Python the scenarios expose an

634
00:26:55,700 --> 00:26:59,450
interface using angular Jason schema and

635
00:26:59,450 --> 00:27:02,900
and so you can describe in this case you

636
00:27:02,900 --> 00:27:04,250
could have you know we added a file

637
00:27:04,250 --> 00:27:07,610
upload button the the mp3 host the mp3

638
00:27:07,610 --> 00:27:10,850
port source and destination one of the

639
00:27:10,850 --> 00:27:12,200
things that day and I were talking about

640
00:27:12,200 --> 00:27:14,330
doing instead of just having a file

641
00:27:14,330 --> 00:27:17,030
upload button so you could just upload a

642
00:27:17,030 --> 00:27:19,580
single Styx file is you could also

643
00:27:19,580 --> 00:27:23,240
specify a taxi server so taxi being a

644
00:27:23,240 --> 00:27:25,550
point-to-point communication to exchange

645
00:27:25,550 --> 00:27:28,700
you know sticks and other threat

646
00:27:28,700 --> 00:27:30,800
information that you could actually just

647
00:27:30,800 --> 00:27:33,140
point it to a taxi server and so you

648
00:27:33,140 --> 00:27:39,110
could automatically hook into a 6-feet

649
00:27:39,110 --> 00:27:42,160
so once we're we're sharing more

650
00:27:42,160 --> 00:27:44,750
hopefully that would be through taxi if

651
00:27:44,750 --> 00:27:46,570
we're actually sharing it through sticks

652
00:27:46,570 --> 00:27:48,920
and then this particular scenario would

653
00:27:48,920 --> 00:27:52,990
just be reading via the the taxi server

654
00:27:52,990 --> 00:27:55,820
and so for this purpose of this exercise

655
00:27:55,820 --> 00:27:57,860
and this project we just had a file

656
00:27:57,860 --> 00:28:00,110
upload button and this is how how we did

657
00:28:00,110 --> 00:28:02,750
it we just built JSON code that

658
00:28:02,750 --> 00:28:06,260
describes the interface so when the

659
00:28:06,260 --> 00:28:08,240
scenario is actually running and this is

660
00:28:08,240 --> 00:28:10,690
the interface to

661
00:28:10,690 --> 00:28:13,150
the fire drill console which is the the

662
00:28:13,150 --> 00:28:16,690
framework that we used with a parse the

663
00:28:16,690 --> 00:28:19,840
sticks file look for the various

664
00:28:19,840 --> 00:28:22,270
arguments one being core to it which is

665
00:28:22,270 --> 00:28:26,800
the function code and then instantiate

666
00:28:26,800 --> 00:28:29,980
the dnp3 console send the command so if

667
00:28:29,980 --> 00:28:32,500
you have five agents it'll send you know

668
00:28:32,500 --> 00:28:34,150
from those five agents if you have a

669
00:28:34,150 --> 00:28:36,870
thousand it'll send from the thousand so

670
00:28:36,870 --> 00:28:39,730
send the DMP three command then it'll

671
00:28:39,730 --> 00:28:41,410
actually hook into the connector and

672
00:28:41,410 --> 00:28:44,320
then determine automatically given a

673
00:28:44,320 --> 00:28:46,090
certain sequence of time or amount of

674
00:28:46,090 --> 00:28:48,190
time that could be incremental of every

675
00:28:48,190 --> 00:28:50,980
five minutes for two hours how long

676
00:28:50,980 --> 00:28:54,750
it'll actually take to log to the sim

677
00:28:55,650 --> 00:28:59,560
and so when it does you know when the

678
00:28:59,560 --> 00:29:02,680
NSM logs just to Splunk what the

679
00:29:02,680 --> 00:29:04,270
connectors doing is it's got a

680
00:29:04,270 --> 00:29:07,750
particular list of scenarios or DMP

681
00:29:07,750 --> 00:29:10,480
through commands and a config file to a

682
00:29:10,480 --> 00:29:13,810
regular expression that's being observed

683
00:29:13,810 --> 00:29:15,820
and we're using the REST API within

684
00:29:15,820 --> 00:29:19,690
Splunk again we could use any sim to

685
00:29:19,690 --> 00:29:21,610
determine if it's actually found within

686
00:29:21,610 --> 00:29:29,500
the the logging mechanism okay so the

687
00:29:29,500 --> 00:29:31,990
future of the Stix replay project on the

688
00:29:31,990 --> 00:29:34,450
way that we see it is um we think this

689
00:29:34,450 --> 00:29:36,130
is a great first approach to describing

690
00:29:36,130 --> 00:29:38,460
I see a specific threat information

691
00:29:38,460 --> 00:29:40,900
within um you know a standardized

692
00:29:40,900 --> 00:29:43,180
language but we would like to add other

693
00:29:43,180 --> 00:29:46,120
you know ICS related pieces of

694
00:29:46,120 --> 00:29:47,860
information whether that's you know

695
00:29:47,860 --> 00:29:50,680
support for describing a new different

696
00:29:50,680 --> 00:29:53,440
protocol like Modbus or any other you

697
00:29:53,440 --> 00:29:56,320
know elements of communicating threat

698
00:29:56,320 --> 00:29:57,610
intelligence that that you guys might

699
00:29:57,610 --> 00:30:01,390
have you know in mind things you think

700
00:30:01,390 --> 00:30:03,790
might be useful we'd like to keep

701
00:30:03,790 --> 00:30:08,170
consulting with Oasis to you know help

702
00:30:08,170 --> 00:30:10,840
you know help them come up with you know

703
00:30:10,840 --> 00:30:13,240
the proper standardized way and continue

704
00:30:13,240 --> 00:30:16,060
to do that and then what would be really

705
00:30:16,060 --> 00:30:18,850
great is to build a repository of

706
00:30:18,850 --> 00:30:21,700
different sticks files that contain you

707
00:30:21,700 --> 00:30:23,840
know known threats

708
00:30:23,840 --> 00:30:27,410
within that standardized language and

709
00:30:27,410 --> 00:30:30,110
actually this is not a bullet it would

710
00:30:30,110 --> 00:30:32,810
be it would be great also to be able to

711
00:30:32,810 --> 00:30:36,020
share beer with sticks so we might add

712
00:30:36,020 --> 00:30:39,100
some support for the beer I sack group

713
00:30:39,100 --> 00:30:44,330
to describe that as well so how you can

714
00:30:44,330 --> 00:30:48,350
get involved we set up a platform free

715
00:30:48,350 --> 00:30:50,090
community platform and we've got to

716
00:30:50,090 --> 00:30:51,470
github repos that contains the

717
00:30:51,470 --> 00:30:52,850
information you know that make up the

718
00:30:52,850 --> 00:30:57,110
sticks replay project please ask us for

719
00:30:57,110 --> 00:30:59,960
an invite we'd be very happy to to be

720
00:30:59,960 --> 00:31:03,110
able to share that with you once you

721
00:31:03,110 --> 00:31:04,760
have access of course you know running

722
00:31:04,760 --> 00:31:07,340
the sticks replay scenario improving the

723
00:31:07,340 --> 00:31:08,690
code of the sticks replay scenario would

724
00:31:08,690 --> 00:31:11,930
be great as well all that you know under

725
00:31:11,930 --> 00:31:18,820
BSD license is free to contribute to we

726
00:31:19,240 --> 00:31:22,190
please yeah also if you feel like there

727
00:31:22,190 --> 00:31:23,300
are there are things that we missed you

728
00:31:23,300 --> 00:31:24,740
know like I mentioned previously we

729
00:31:24,740 --> 00:31:26,480
would like to add you know link layer

730
00:31:26,480 --> 00:31:28,250
and transport layer information as well

731
00:31:28,250 --> 00:31:31,100
within that package or if you can come

732
00:31:31,100 --> 00:31:32,180
up with other ways that we can improve

733
00:31:32,180 --> 00:31:36,680
that that'd be great if you can think of

734
00:31:36,680 --> 00:31:38,450
other indicators other protocols that

735
00:31:38,450 --> 00:31:39,620
you think are relevant that we should

736
00:31:39,620 --> 00:31:41,540
describe within sticks that's something

737
00:31:41,540 --> 00:31:43,580
that we're looking for as well and and

738
00:31:43,580 --> 00:31:45,770
if you find you know a way to improve

739
00:31:45,770 --> 00:31:47,360
the dnp3 console that's part of it as

740
00:31:47,360 --> 00:31:50,260
well and the last bullet which was

741
00:31:50,260 --> 00:31:55,010
probably I mean a key one to take away

742
00:31:55,010 --> 00:31:57,770
is really to contribute sticks files to

743
00:31:57,770 --> 00:32:00,950
the community I think that you know when

744
00:32:00,950 --> 00:32:02,240
we sat down and we looked at this we

745
00:32:02,240 --> 00:32:04,340
said okay well who's got sticks files

746
00:32:04,340 --> 00:32:06,500
for ICS and really the answer was um I

747
00:32:06,500 --> 00:32:08,960
mean we couldn't really find any yeah we

748
00:32:08,960 --> 00:32:11,960
found a lot I mean IP IP addresses and

749
00:32:11,960 --> 00:32:13,820
domains and you know as I said though in

750
00:32:13,820 --> 00:32:15,740
the beginning that's what is from the

751
00:32:15,740 --> 00:32:17,330
attacker perspective if you look at a

752
00:32:17,330 --> 00:32:20,330
situ or if you're looking at you know

753
00:32:20,330 --> 00:32:23,030
DJ's dynamically generated algorithms

754
00:32:23,030 --> 00:32:25,220
for contacting the domains that's the

755
00:32:25,220 --> 00:32:26,990
easiest from an attacker perspective to

756
00:32:26,990 --> 00:32:29,420
change out so we we did find you know if

757
00:32:29,420 --> 00:32:30,680
anything when we were looking at sticks

758
00:32:30,680 --> 00:32:33,470
files from a URL perspective IP hash

759
00:32:33,470 --> 00:32:36,320
listing its there but when we start to

760
00:32:36,320 --> 00:32:37,490
describe

761
00:32:37,490 --> 00:32:39,110
of the patterns that we're going to see

762
00:32:39,110 --> 00:32:40,670
in our environments again and again and

763
00:32:40,670 --> 00:32:43,309
again sticks really has that strength to

764
00:32:43,309 --> 00:32:45,980
described in a lot more context the full

765
00:32:45,980 --> 00:32:50,030
attack campaign and you know not just

766
00:32:50,030 --> 00:32:52,190
the dnp3 command but the attacker maybe

767
00:32:52,190 --> 00:32:54,950
that was involved and other context

768
00:32:54,950 --> 00:32:57,559
around that and it's can be done without

769
00:32:57,559 --> 00:32:59,360
sharing too much context of our own

770
00:32:59,360 --> 00:33:02,420
environments that not might not be able

771
00:33:02,420 --> 00:33:05,690
to be shared so and you know as an

772
00:33:05,690 --> 00:33:07,280
example I think it'd be it'd be great

773
00:33:07,280 --> 00:33:10,160
for you know just as an exercise I

774
00:33:10,160 --> 00:33:12,770
suppose to describe threats that we have

775
00:33:12,770 --> 00:33:14,690
seen in the past within you know the

776
00:33:14,690 --> 00:33:16,760
sticks format sticks to decks format

777
00:33:16,760 --> 00:33:19,670
things like you know the or attack or or

778
00:33:19,670 --> 00:33:24,320
or others so here are a couple links to

779
00:33:24,320 --> 00:33:27,620
download the code we have set up a git

780
00:33:27,620 --> 00:33:31,070
lab is that the right address or yeah

781
00:33:31,070 --> 00:33:34,309
yeah okay so we have set up a git lab

782
00:33:34,309 --> 00:33:35,960
that contains you know the Splunk

783
00:33:35,960 --> 00:33:38,059
connector right now the connector works

784
00:33:38,059 --> 00:33:40,910
with Splunk but we could work you know

785
00:33:40,910 --> 00:33:43,100
with various other sims yeah the only

786
00:33:43,100 --> 00:33:44,900
difference again is that we're using the

787
00:33:44,900 --> 00:33:47,720
REST API for Splunk so whether if the

788
00:33:47,720 --> 00:33:51,679
sim has as more sims do a different you

789
00:33:51,679 --> 00:33:53,450
know it'll have a different REST API and

790
00:33:53,450 --> 00:33:55,730
so you'll change open up the code it's

791
00:33:55,730 --> 00:33:57,350
all Python for this one connector open

792
00:33:57,350 --> 00:33:59,120
it up and use the REST API that's

793
00:33:59,120 --> 00:34:01,610
associated with that sim to connect to

794
00:34:01,610 --> 00:34:03,559
it and then the difference also would be

795
00:34:03,559 --> 00:34:05,540
the configuration file how does the

796
00:34:05,540 --> 00:34:08,780
query that you're looking for for an or

797
00:34:08,780 --> 00:34:10,310
example the DNP through command how do

798
00:34:10,310 --> 00:34:12,440
you expect it to show up in the log

799
00:34:12,440 --> 00:34:14,600
files of the sim and so you'll have the

800
00:34:14,600 --> 00:34:17,659
configuration file - we've also

801
00:34:17,659 --> 00:34:19,280
obviously included this scenario code

802
00:34:19,280 --> 00:34:21,109
that parses the Stix file and that

803
00:34:21,109 --> 00:34:23,149
provides you know the required arguments

804
00:34:23,149 --> 00:34:26,570
to the dnp3 console and then we've also

805
00:34:26,570 --> 00:34:29,840
included example Stix files and then

806
00:34:29,840 --> 00:34:31,730
here's a link as well to the dnp3

807
00:34:31,730 --> 00:34:36,260
console that Adam provided us so with

808
00:34:36,260 --> 00:34:38,629
that thank you very much for listening

809
00:34:38,629 --> 00:34:39,980
we hope you found this presentation

810
00:34:39,980 --> 00:34:43,820
interesting and dill let's let's get

811
00:34:43,820 --> 00:34:46,460
some questions okay so we we do have

812
00:34:46,460 --> 00:34:48,168
time for play

813
00:34:48,168 --> 00:34:56,429
who any questions for Daniel or I don't

814
00:34:56,429 --> 00:35:05,130
have control so can we put up the last

815
00:35:05,130 --> 00:35:07,830
slide with their email addresses okay do

816
00:35:07,830 --> 00:35:10,349
I have access now no and they can handle

817
00:35:10,349 --> 00:35:15,740
it in back if you don't yeah okay I

818
00:35:15,740 --> 00:35:18,810
guess while other people are thinking of

819
00:35:18,810 --> 00:35:21,060
questions and everyone getting your

820
00:35:21,060 --> 00:35:24,720
email address it was interesting I mean

821
00:35:24,720 --> 00:35:26,460
whenever we've seen these projects we

822
00:35:26,460 --> 00:35:30,330
see Modbus and dnp3 as the protocols

823
00:35:30,330 --> 00:35:32,520
everyone does their testing on and I'm

824
00:35:32,520 --> 00:35:34,170
not throwing stones we did the same

825
00:35:34,170 --> 00:35:36,540
thing you know a decade ago with our ICS

826
00:35:36,540 --> 00:35:38,160
signatures because they're the easy ones

827
00:35:38,160 --> 00:35:41,190
right but I remember when we were doing

828
00:35:41,190 --> 00:35:43,770
the ICS signatures to do something like

829
00:35:43,770 --> 00:35:45,660
Ethernet IP we had to create a

830
00:35:45,660 --> 00:35:46,770
preprocessor

831
00:35:46,770 --> 00:35:50,310
and that was a real bear how easy or

832
00:35:50,310 --> 00:35:53,550
hard do you think it will be to use this

833
00:35:53,550 --> 00:35:56,099
and to build in extensions for the more

834
00:35:56,099 --> 00:35:58,710
complex multi layer protocols where you

835
00:35:58,710 --> 00:36:00,900
have to really decode at each layer to

836
00:36:00,900 --> 00:36:04,320
get the stuff that you want to use to

837
00:36:04,320 --> 00:36:06,869
alert on something yeah I mean I would

838
00:36:06,869 --> 00:36:08,609
say that the sticks was meant to

839
00:36:08,609 --> 00:36:10,380
describe not only a host base event but

840
00:36:10,380 --> 00:36:13,800
networks on the whole OSI stack so and

841
00:36:13,800 --> 00:36:15,540
that could be a customized stack as well

842
00:36:15,540 --> 00:36:17,369
and that's the nice aspect of its

843
00:36:17,369 --> 00:36:19,680
extensibility so if there's a completely

844
00:36:19,680 --> 00:36:21,450
custom stack you can start to describe

845
00:36:21,450 --> 00:36:23,310
it I mean the hope though is that you

846
00:36:23,310 --> 00:36:24,750
can describe it in such a way that it

847
00:36:24,750 --> 00:36:27,869
translates to some type of mechanism

848
00:36:27,869 --> 00:36:29,460
that also can interpret it you know oh

849
00:36:29,460 --> 00:36:32,060
yeah

850
00:36:33,339 --> 00:36:35,989
so protocols that have reference to

851
00:36:35,989 --> 00:36:37,489
previous state and therefore you have to

852
00:36:37,489 --> 00:36:38,929
have a branching tree that's the kind of

853
00:36:38,929 --> 00:36:41,329
thing you yeah it seems that those

854
00:36:41,329 --> 00:36:43,429
parsers contain is but as far as sticks

855
00:36:43,429 --> 00:36:44,989
all this the definition of the sticks

856
00:36:44,989 --> 00:36:46,459
profile is if I'm going to build one for

857
00:36:46,459 --> 00:36:47,779
you have to be done by hand and then

858
00:36:47,779 --> 00:36:51,439
validated send back correct no so the I

859
00:36:51,439 --> 00:36:53,630
mean that's what Dan and I did for in

860
00:36:53,630 --> 00:36:56,269
this particular case but as you know

861
00:36:56,269 --> 00:36:58,819
more of commercial products are coming

862
00:36:58,819 --> 00:37:00,769
onto the market or open source products

863
00:37:00,769 --> 00:37:02,900
you can you know you can do this in

864
00:37:02,900 --> 00:37:04,189
Wireshark right now but you can imagine

865
00:37:04,189 --> 00:37:07,849
there's a lot of various ir type

866
00:37:07,849 --> 00:37:10,219
commercial products that you can look at

867
00:37:10,219 --> 00:37:11,599
an incident and actually say you know

868
00:37:11,599 --> 00:37:13,459
that's something of interest save add

869
00:37:13,459 --> 00:37:15,439
sticks file and so we're already seeing

870
00:37:15,439 --> 00:37:19,519
a lot of products do that now and so

871
00:37:19,519 --> 00:37:22,339
when you see a lot more ICS related

872
00:37:22,339 --> 00:37:25,249
events these these particular whether

873
00:37:25,249 --> 00:37:26,749
it's commercial or open source products

874
00:37:26,749 --> 00:37:29,619
should be able to parse that and then if

875
00:37:29,619 --> 00:37:31,130
obviously there'll be a lot of

876
00:37:31,130 --> 00:37:33,679
customized extensions but if there's

877
00:37:33,679 --> 00:37:36,499
enough of an agreed-upon sense of

878
00:37:36,499 --> 00:37:38,779
extensions then I'm sure these products

879
00:37:38,779 --> 00:37:40,489
will start to conform to understand

880
00:37:40,489 --> 00:37:43,069
those extensions and then be able to you

881
00:37:43,069 --> 00:37:44,329
know view it and then save it

882
00:37:44,329 --> 00:37:47,569
automatically but we have to agree we

883
00:37:47,569 --> 00:37:49,130
have to agree on what what what make

884
00:37:49,130 --> 00:37:51,009
sense

885
00:37:51,009 --> 00:37:54,609
I'm Jeff Wiley with the noblesse NSP

886
00:37:54,609 --> 00:37:58,039
great work and I you probably covered it

887
00:37:58,039 --> 00:38:01,819
but did you find that creating both the

888
00:38:01,819 --> 00:38:04,900
sticks definition and also the cybox

889
00:38:04,900 --> 00:38:09,140
object were equally expressive and then

890
00:38:09,140 --> 00:38:11,779
if you've if this is the first group

891
00:38:11,779 --> 00:38:13,880
than the questions move but if you

892
00:38:13,880 --> 00:38:16,489
shared this with other I guess other

893
00:38:16,489 --> 00:38:19,219
partners did they find one one was more

894
00:38:19,219 --> 00:38:22,130
useful than the other well you know what

895
00:38:22,130 --> 00:38:23,479
was interesting since we're dealing with

896
00:38:23,479 --> 00:38:25,699
sticks 2x and we had showed this to some

897
00:38:25,699 --> 00:38:27,529
members at oasis they said yeah that's

898
00:38:27,529 --> 00:38:30,559
how you express the I think the pattern

899
00:38:30,559 --> 00:38:32,299
last week but we haven't we haven't

900
00:38:32,299 --> 00:38:33,859
formalized it yet so next week it'll be

901
00:38:33,859 --> 00:38:36,979
different so I I think from a

902
00:38:36,979 --> 00:38:39,829
perspective of a plow you know any any

903
00:38:39,829 --> 00:38:42,019
type of automation when you're parsing

904
00:38:42,019 --> 00:38:45,420
it's it's the same I mean you know

905
00:38:45,420 --> 00:38:48,239
there's enough whether it be XML when

906
00:38:48,239 --> 00:38:50,459
you're using sticks 1x or Jason that's

907
00:38:50,459 --> 00:38:53,609
with with sticks 2x as long as the the

908
00:38:53,609 --> 00:38:55,619
format is well document and well

909
00:38:55,619 --> 00:38:58,109
understood I think it's quite easy to

910
00:38:58,109 --> 00:39:00,959
parse either way from a real more human

911
00:39:00,959 --> 00:39:02,819
readable format we found off the

912
00:39:02,819 --> 00:39:04,709
extension obviously to be just easy from

913
00:39:04,709 --> 00:39:06,660
a dnp3 perspective but then when you

914
00:39:06,660 --> 00:39:08,069
start talking about custom protocol

915
00:39:08,069 --> 00:39:10,469
stacks you're not gonna want to read any

916
00:39:10,469 --> 00:39:11,789
of that it's gonna you're gonna want a

917
00:39:11,789 --> 00:39:16,219
lot of different tooling around it so

918
00:39:18,790 --> 00:39:21,929
[Music]

