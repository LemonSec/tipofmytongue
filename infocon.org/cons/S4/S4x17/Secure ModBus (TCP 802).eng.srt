1
00:00:00,350 --> 00:00:08,660
[Music]

2
00:00:08,660 --> 00:00:12,269
so our our next speaker is Daniel Clark

3
00:00:12,269 --> 00:00:14,610
he's a security architect with Schneider

4
00:00:14,610 --> 00:00:16,890
Electric and he is going to be talking

5
00:00:16,890 --> 00:00:19,170
about secure Modbus I just love that

6
00:00:19,170 --> 00:00:21,480
secure Modbus with role-based

7
00:00:21,480 --> 00:00:25,240
authorization please welcome Daniel

8
00:00:25,240 --> 00:00:29,450
[Applause]

9
00:00:29,450 --> 00:00:32,539
[Music]

10
00:00:36,260 --> 00:00:40,590
thank you everybody welcome to our idea

11
00:00:40,590 --> 00:00:44,309
for secure Modbus as many of us know

12
00:00:44,309 --> 00:00:46,680
Modbus was invented about 20 years ago

13
00:00:46,680 --> 00:00:50,039
by a company called maricon which became

14
00:00:50,039 --> 00:00:53,160
part of Schneider Electric and thanks to

15
00:00:53,160 --> 00:00:54,390
its simplicity

16
00:00:54,390 --> 00:00:56,940
Modbus became one of the most widely

17
00:00:56,940 --> 00:00:59,550
used protocols in manufacturing

18
00:00:59,550 --> 00:01:03,090
environments and today it's implemented

19
00:01:03,090 --> 00:01:04,970
by hundreds of different vendors and

20
00:01:04,970 --> 00:01:07,590
it's on thousands of thousands of

21
00:01:07,590 --> 00:01:11,670
devices and the main use of Modbus it's

22
00:01:11,670 --> 00:01:14,250
to exchange data between different parts

23
00:01:14,250 --> 00:01:16,380
of the industrial process between

24
00:01:16,380 --> 00:01:19,590
between PLC's and devices but also

25
00:01:19,590 --> 00:01:23,580
between PLC's and skater's and what's

26
00:01:23,580 --> 00:01:25,500
been missing from Modbus up until now

27
00:01:25,500 --> 00:01:29,009
has been the security so in Schneider

28
00:01:29,009 --> 00:01:30,780
Electric we've been working on ways that

29
00:01:30,780 --> 00:01:33,420
we cannot secure security internal

30
00:01:33,420 --> 00:01:36,810
Modbus protocol but without breaking the

31
00:01:36,810 --> 00:01:38,640
simplicity which has made Modbus so

32
00:01:38,640 --> 00:01:43,259
important in the first place and while

33
00:01:43,259 --> 00:01:45,149
retaining the simplicity we also have to

34
00:01:45,149 --> 00:01:46,259
make sure that we retain the

35
00:01:46,259 --> 00:01:47,939
compatibility we don't want to break the

36
00:01:47,939 --> 00:01:50,490
large ecosystem which is present and we

37
00:01:50,490 --> 00:01:52,110
also have to do it in a way that lets

38
00:01:52,110 --> 00:01:55,049
people adopt secure Modbus in a

39
00:01:55,049 --> 00:01:56,399
progressive manner it's not an

40
00:01:56,399 --> 00:01:58,380
all-or-nothing proposition we can

41
00:01:58,380 --> 00:02:00,299
prioritize the data flows that are most

42
00:02:00,299 --> 00:02:03,960
at risk and do they do the other data

43
00:02:03,960 --> 00:02:07,799
data flows in a later step so did this

44
00:02:07,799 --> 00:02:11,068
is where Modbus gets used the

45
00:02:11,068 --> 00:02:14,159
on the right hand side we see a process

46
00:02:14,159 --> 00:02:16,260
diagram on the left hand side the

47
00:02:16,260 --> 00:02:18,719
control infrastructure and the inside

48
00:02:18,719 --> 00:02:21,870
the process in this example we have we

49
00:02:21,870 --> 00:02:23,609
have sensors we have like for example

50
00:02:23,609 --> 00:02:26,430
pressure sensors we have pumps which are

51
00:02:26,430 --> 00:02:28,829
used to move liquids around we have

52
00:02:28,829 --> 00:02:32,400
tanks and we have valves and these these

53
00:02:32,400 --> 00:02:34,500
physical elements are sending

54
00:02:34,500 --> 00:02:37,200
information back to the PLC's using

55
00:02:37,200 --> 00:02:39,689
Modbus and the PLC is then pushing that

56
00:02:39,689 --> 00:02:43,290
information up to SCADA so we can

57
00:02:43,290 --> 00:02:44,819
imagine there are some things that can

58
00:02:44,819 --> 00:02:45,689
go wrong here

59
00:02:45,689 --> 00:02:48,299
like if a PLC thinks that the pressure

60
00:02:48,299 --> 00:02:51,239
is low when actually it's high then that

61
00:02:51,239 --> 00:02:53,250
could result in the PLC sending an

62
00:02:53,250 --> 00:02:55,079
inappropriate command to one of the

63
00:02:55,079 --> 00:02:58,950
valves if the operator at the SCADA

64
00:02:58,950 --> 00:03:01,260
console he has visibility of the process

65
00:03:01,260 --> 00:03:03,329
and what he's seeing is not actually

66
00:03:03,329 --> 00:03:06,659
reflected in the physical state that we

67
00:03:06,659 --> 00:03:08,430
can imagine problems will also result

68
00:03:08,430 --> 00:03:11,970
and when we try to add security into

69
00:03:11,970 --> 00:03:15,299
this we're gonna see there's going to be

70
00:03:15,299 --> 00:03:18,389
some changes and the main change that we

71
00:03:18,389 --> 00:03:21,209
see here is the we have a new function

72
00:03:21,209 --> 00:03:22,799
in the Supervisory layer of the network

73
00:03:22,799 --> 00:03:26,250
this is the PKI function this is going

74
00:03:26,250 --> 00:03:28,319
to play a big part in the commissioning

75
00:03:28,319 --> 00:03:32,549
of plants now what we have to be careful

76
00:03:32,549 --> 00:03:34,680
about is this is not changing the

77
00:03:34,680 --> 00:03:36,959
operations of the plant it's part of the

78
00:03:36,959 --> 00:03:40,470
setup if we want devices to do secure

79
00:03:40,470 --> 00:03:42,299
protocols we have to be able to give

80
00:03:42,299 --> 00:03:46,650
devices secure identities and today when

81
00:03:46,650 --> 00:03:49,650
we do commissioning we we configure the

82
00:03:49,650 --> 00:03:53,760
devices we we give them a program we set

83
00:03:53,760 --> 00:03:55,879
up the data flows that they participated

84
00:03:55,879 --> 00:03:58,379
when we do secure industrial

85
00:03:58,379 --> 00:04:00,299
communications this will be the same but

86
00:04:00,299 --> 00:04:01,439
there be an extra element in that

87
00:04:01,439 --> 00:04:02,879
commissioning which is this secure

88
00:04:02,879 --> 00:04:06,000
identity and all of the elements in the

89
00:04:06,000 --> 00:04:08,639
system that want to do secure secure

90
00:04:08,639 --> 00:04:11,099
communications will will figure in that

91
00:04:11,099 --> 00:04:14,579
step and once we do that step what it

92
00:04:14,579 --> 00:04:18,060
enables us to do is to have these secure

93
00:04:18,060 --> 00:04:21,120
data flows so for previous leader was

94
00:04:21,120 --> 00:04:23,550
normal Modbus with very little security

95
00:04:23,550 --> 00:04:24,580
we

96
00:04:24,580 --> 00:04:26,500
secure Modbus and we're going to show

97
00:04:26,500 --> 00:04:32,470
what that means so the first thing the

98
00:04:32,470 --> 00:04:33,639
dangers like when we do have these

99
00:04:33,639 --> 00:04:35,500
insecure protocols in our industrial

100
00:04:35,500 --> 00:04:39,490
process we have situations for operators

101
00:04:39,490 --> 00:04:41,530
might not really know what's going on in

102
00:04:41,530 --> 00:04:43,960
the process this could result in damage

103
00:04:43,960 --> 00:04:46,719
to equipment maybe some danger for the

104
00:04:46,719 --> 00:04:49,210
people on the factory floor or you know

105
00:04:49,210 --> 00:04:51,039
economic costs like downtime and

106
00:04:51,039 --> 00:04:53,560
unusable output and obviously these are

107
00:04:53,560 --> 00:04:55,719
not things to get accepted and people

108
00:04:55,719 --> 00:04:58,090
deploy countermeasures additional layers

109
00:04:58,090 --> 00:05:00,370
of security like network segmentations

110
00:05:00,370 --> 00:05:02,500
of firewalls and these are all good

111
00:05:02,500 --> 00:05:05,139
things you know we're gonna retain but

112
00:05:05,139 --> 00:05:07,870
by having protocols with native security

113
00:05:07,870 --> 00:05:10,539
features we get extra security value

114
00:05:10,539 --> 00:05:12,370
from these from these layers and we get

115
00:05:12,370 --> 00:05:16,210
an additional layer of protection and we

116
00:05:16,210 --> 00:05:17,889
probably have to start with us again

117
00:05:17,889 --> 00:05:19,840
just a robust protocol something that's

118
00:05:19,840 --> 00:05:22,569
resistant to replay it's resistant to

119
00:05:22,569 --> 00:05:24,729
man-in-the-middle and it doesn't allow

120
00:05:24,729 --> 00:05:26,110
for downgrading there's not going to be

121
00:05:26,110 --> 00:05:28,090
a way to strip the security of the

122
00:05:28,090 --> 00:05:30,460
protocol but we're also going to need

123
00:05:30,460 --> 00:05:33,789
the attenti keishon PLC's have to know

124
00:05:33,789 --> 00:05:34,930
what they're talking to they have to

125
00:05:34,930 --> 00:05:38,440
know that the the pressure sensor that

126
00:05:38,440 --> 00:05:39,909
they think they're reading is the real

127
00:05:39,909 --> 00:05:42,250
pressure center and that the information

128
00:05:42,250 --> 00:05:43,449
that's getting sent back is protected

129
00:05:43,449 --> 00:05:45,639
for integrity it can't be modified on

130
00:05:45,639 --> 00:05:48,190
the wire there's also got to be a

131
00:05:48,190 --> 00:05:50,349
concept of authorization this is missing

132
00:05:50,349 --> 00:05:52,629
from Modbus now and what authorization

133
00:05:52,629 --> 00:05:55,449
does is it gives us containment if

134
00:05:55,449 --> 00:05:57,279
something is compromised on the network

135
00:05:57,279 --> 00:05:59,469
it can only damage things that it's

136
00:05:59,469 --> 00:06:00,789
supposed to be talking to anyway it

137
00:06:00,789 --> 00:06:02,740
can't start standing commands around the

138
00:06:02,740 --> 00:06:06,009
plants and we can do encryption if we

139
00:06:06,009 --> 00:06:08,020
think it's needed it's a lot of the time

140
00:06:08,020 --> 00:06:10,300
it's not needed this like these pressure

141
00:06:10,300 --> 00:06:11,800
readings and commands are not

142
00:06:11,800 --> 00:06:13,839
particularly confidential but if a user

143
00:06:13,839 --> 00:06:16,990
wants to do it they can and so this is

144
00:06:16,990 --> 00:06:19,690
what we're looking for in a protocol and

145
00:06:19,690 --> 00:06:22,300
the way we want to do it is by using the

146
00:06:22,300 --> 00:06:24,069
best practices and taking something that

147
00:06:24,069 --> 00:06:27,310
we know works and what works in IT is

148
00:06:27,310 --> 00:06:31,060
TRS it's the we all notice already TLS

149
00:06:31,060 --> 00:06:37,270
is the s in HTTP and it's it's trusted

150
00:06:37,270 --> 00:06:38,500
by the major IT play

151
00:06:38,500 --> 00:06:40,900
this is what the Microsoft's the

152
00:06:40,900 --> 00:06:43,180
Google's the Amazon's are using it's

153
00:06:43,180 --> 00:06:45,250
what's used to secure online banking and

154
00:06:45,250 --> 00:06:50,140
e-commerce it's an internet standard and

155
00:06:50,140 --> 00:06:53,110
it's also it's an evolving standard TLS

156
00:06:53,110 --> 00:06:55,570
started out about 20 years ago and it's

157
00:06:55,570 --> 00:06:56,950
been true a significant number of

158
00:06:56,950 --> 00:06:59,890
revisions a lot of people are looking at

159
00:06:59,890 --> 00:07:02,350
is very smart people under finding

160
00:07:02,350 --> 00:07:04,300
problems with it but the problems they

161
00:07:04,300 --> 00:07:06,310
get addressed and sometimes in the early

162
00:07:06,310 --> 00:07:07,900
years there were mostly protocol

163
00:07:07,900 --> 00:07:09,670
problems like these were security holes

164
00:07:09,670 --> 00:07:12,010
at the actual protocol level and new

165
00:07:12,010 --> 00:07:14,169
versions of TLS were created to to

166
00:07:14,169 --> 00:07:16,960
counter this today we sometimes get bugs

167
00:07:16,960 --> 00:07:18,580
and implementations like some of the

168
00:07:18,580 --> 00:07:21,430
high profile open SSL bugs but they also

169
00:07:21,430 --> 00:07:23,440
get found and they get they get

170
00:07:23,440 --> 00:07:29,650
corrected so by leveraging this we we

171
00:07:29,650 --> 00:07:31,690
can take what what works and we don't

172
00:07:31,690 --> 00:07:33,640
have to reinvent the wheel and our

173
00:07:33,640 --> 00:07:35,770
problem becomes how do we combine this

174
00:07:35,770 --> 00:07:40,240
from Modbus now the good news here is

175
00:07:40,240 --> 00:07:45,100
that TLS can protect any TCP based

176
00:07:45,100 --> 00:07:48,570
protocol just by encapsulating it and

177
00:07:48,570 --> 00:07:51,250
what that will already give us gives us

178
00:07:51,250 --> 00:07:53,470
is the the foundation of communication

179
00:07:53,470 --> 00:07:55,930
security we will get mitigation for

180
00:07:55,930 --> 00:07:58,720
replay will get mitigation for man in

181
00:07:58,720 --> 00:08:00,729
the middle and we'll get integrity

182
00:08:00,729 --> 00:08:03,370
protection and if we want to have

183
00:08:03,370 --> 00:08:05,410
authentication we will have to do a bit

184
00:08:05,410 --> 00:08:06,640
more and we'll see how that will work

185
00:08:06,640 --> 00:08:08,860
but the other important thing from TLS

186
00:08:08,860 --> 00:08:12,070
is we get cryptographic agility so we

187
00:08:12,070 --> 00:08:13,900
all know that the algorithms improve

188
00:08:13,900 --> 00:08:15,990
over time the attacks improve over time

189
00:08:15,990 --> 00:08:18,850
TLS has a built-in mechanism of cipher

190
00:08:18,850 --> 00:08:20,710
suites for the two endpoints they

191
00:08:20,710 --> 00:08:23,740
negotiate what security algorithms they

192
00:08:23,740 --> 00:08:25,690
want to use what key sizes do you want

193
00:08:25,690 --> 00:08:28,900
to use and these these algorithms can

194
00:08:28,900 --> 00:08:30,640
actually change without changing the

195
00:08:30,640 --> 00:08:33,099
underlining underlying protocol so by

196
00:08:33,099 --> 00:08:35,289
using TLS for secure Modbus we get that

197
00:08:35,289 --> 00:08:39,549
level of flexibility and future proof in

198
00:08:39,549 --> 00:08:42,250
terms of how this will change how Modbus

199
00:08:42,250 --> 00:08:46,089
looks under wire so from others tcp

200
00:08:46,089 --> 00:08:47,320
which is what we're all familiar with

201
00:08:47,320 --> 00:08:49,260
it's a very straightforward

202
00:08:49,260 --> 00:08:51,640
encapsulation of Modbus entities

203
00:08:51,640 --> 00:08:53,920
data structure the unprotected Modbus

204
00:08:53,920 --> 00:08:56,740
data it goes into the TCP payload and

205
00:08:56,740 --> 00:08:58,990
there's just a checksum value which

206
00:08:58,990 --> 00:09:03,279
protects against ours when we go to

207
00:09:03,279 --> 00:09:06,160
secure Modbus that picture does change a

208
00:09:06,160 --> 00:09:08,890
little bit because the the application

209
00:09:08,890 --> 00:09:11,350
data that goes into TCP packet it also

210
00:09:11,350 --> 00:09:14,050
has to contain TLS data so that the

211
00:09:14,050 --> 00:09:15,790
packets will look a little bit different

212
00:09:15,790 --> 00:09:19,149
the good news is the titie application

213
00:09:19,149 --> 00:09:21,760
to the Modbus protocol handler that's

214
00:09:21,760 --> 00:09:23,649
actually transparent do you want the

215
00:09:23,649 --> 00:09:25,329
only difference to the protocol handler

216
00:09:25,329 --> 00:09:28,149
is that instead of a doing a TCP reader

217
00:09:28,149 --> 00:09:30,310
right it's doing a TLS reader right and

218
00:09:30,310 --> 00:09:34,510
the the management of this TLS metadata

219
00:09:34,510 --> 00:09:36,310
that goes around Modbus data is

220
00:09:36,310 --> 00:09:38,470
completely transparent so it's it's a

221
00:09:38,470 --> 00:09:40,990
very minor code change inside the the

222
00:09:40,990 --> 00:09:44,200
protocol handler and if we look at how

223
00:09:44,200 --> 00:09:46,120
that integrity protection actually works

224
00:09:46,120 --> 00:09:51,040
this is so one thing to know is TLS has

225
00:09:51,040 --> 00:09:55,329
a lot of different modes there's there's

226
00:09:55,329 --> 00:09:59,860
a mode of TLS which it can be with no

227
00:09:59,860 --> 00:10:01,360
authentication server authentication

228
00:10:01,360 --> 00:10:04,390
mutual authentication what we want to do

229
00:10:04,390 --> 00:10:06,670
in secure Modbus is mutual

230
00:10:06,670 --> 00:10:08,920
authentication the PLC has to know which

231
00:10:08,920 --> 00:10:11,140
device is talking to you but the device

232
00:10:11,140 --> 00:10:13,029
also has to know which PLC it's talking

233
00:10:13,029 --> 00:10:14,980
to you because an attacker shouldn't be

234
00:10:14,980 --> 00:10:17,399
able to spoof either of those endpoints

235
00:10:17,399 --> 00:10:22,180
the when we do this we the integrity

236
00:10:22,180 --> 00:10:23,769
protection property is coming from this

237
00:10:23,769 --> 00:10:25,660
message authentication code value which

238
00:10:25,660 --> 00:10:29,140
is here during the TLS setup phase a

239
00:10:29,140 --> 00:10:32,260
number of keys get negotiated and one of

240
00:10:32,260 --> 00:10:34,990
these keys is a Mac key so it's a secret

241
00:10:34,990 --> 00:10:36,480
value it's known to the two endpoints

242
00:10:36,480 --> 00:10:38,949
but it's not known to anybody who

243
00:10:38,949 --> 00:10:42,360
observes the de set of procedure and

244
00:10:42,360 --> 00:10:45,880
this mark is a calculation using a key

245
00:10:45,880 --> 00:10:47,740
cryptographic digest it's using a char

246
00:10:47,740 --> 00:10:49,899
to and it's combined with this secret

247
00:10:49,899 --> 00:10:52,149
key and the digest it covers the

248
00:10:52,149 --> 00:10:54,459
sequence number and it covers the Modbus

249
00:10:54,459 --> 00:10:58,120
data so the window receiver it gets that

250
00:10:58,120 --> 00:11:00,520
message it performs the reverse

251
00:11:00,520 --> 00:11:02,770
calculation and it checks does this

252
00:11:02,770 --> 00:11:04,970
correspond with the Mac in the message

253
00:11:04,970 --> 00:11:07,550
an attacker who tries to to change that

254
00:11:07,550 --> 00:11:10,009
data he won't succeed because he doesn't

255
00:11:10,009 --> 00:11:12,350
know the Mac key if he changes the

256
00:11:12,350 --> 00:11:16,339
Modbus data the the dahle just will give

257
00:11:16,339 --> 00:11:18,259
a different value and the macro

258
00:11:18,259 --> 00:11:21,230
invalidate the receiver can detect us in

259
00:11:21,230 --> 00:11:24,439
addition the attacker is not able to

260
00:11:24,439 --> 00:11:26,810
inject an old message because we can see

261
00:11:26,810 --> 00:11:28,939
that the MAC value it includes the

262
00:11:28,939 --> 00:11:32,000
sequence number so if the receiver he

263
00:11:32,000 --> 00:11:34,310
sees the same sequence number one the

264
00:11:34,310 --> 00:11:35,990
same sequence number more than once he

265
00:11:35,990 --> 00:11:38,509
can reject it as a duplicate message if

266
00:11:38,509 --> 00:11:40,699
we did have encryption enabled it would

267
00:11:40,699 --> 00:11:43,519
work in a similar way the de payload the

268
00:11:43,519 --> 00:11:45,350
Modbus payload will be encrypted inside

269
00:11:45,350 --> 00:11:48,050
the TLS record instead of just being

270
00:11:48,050 --> 00:11:49,759
integrity protected otherwise it's the

271
00:11:49,759 --> 00:11:54,439
same idea the toe tread and mutual

272
00:11:54,439 --> 00:11:56,649
authentication this is what we meant the

273
00:11:56,649 --> 00:11:59,480
at an earlier point we mentioned that we

274
00:11:59,480 --> 00:12:01,430
were giving every element of the control

275
00:12:01,430 --> 00:12:03,860
system a secure identity this secure

276
00:12:03,860 --> 00:12:06,649
identity is an x.509 certificate and

277
00:12:06,649 --> 00:12:10,459
what the certificate does is it's a it's

278
00:12:10,459 --> 00:12:15,529
a binding of our name to a public key so

279
00:12:15,529 --> 00:12:17,240
when you present your certificate to

280
00:12:17,240 --> 00:12:18,709
somebody that person he knows who you

281
00:12:18,709 --> 00:12:18,949
are

282
00:12:18,949 --> 00:12:21,110
and he knows what your public key is and

283
00:12:21,110 --> 00:12:23,300
that's attested to by the PKI function

284
00:12:23,300 --> 00:12:24,620
which is a trusted function on our

285
00:12:24,620 --> 00:12:28,759
network the each of the endpoints they

286
00:12:28,759 --> 00:12:30,740
verify each other certificates so that

287
00:12:30,740 --> 00:12:32,689
PLC knows exactly what it's talking to

288
00:12:32,689 --> 00:12:35,870
and the way that works in the TLS

289
00:12:35,870 --> 00:12:38,899
handshake procedure is there's a number

290
00:12:38,899 --> 00:12:41,389
of messages to get exchanged the client

291
00:12:41,389 --> 00:12:43,220
who wants to open the connection he

292
00:12:43,220 --> 00:12:45,319
starts by saying hello and sending some

293
00:12:45,319 --> 00:12:47,569
random numbers the server he'll send

294
00:12:47,569 --> 00:12:49,639
back some some other random numbers the

295
00:12:49,639 --> 00:12:51,230
client he will verify the server

296
00:12:51,230 --> 00:12:55,939
certificate and he will also do there's

297
00:12:55,939 --> 00:12:57,379
some cryptography at this part where the

298
00:12:57,379 --> 00:12:59,209
client he chooses an additional random

299
00:12:59,209 --> 00:13:00,920
number and he encrypts it with the

300
00:13:00,920 --> 00:13:03,079
server public key and did this is

301
00:13:03,079 --> 00:13:04,790
important for two reasons it's important

302
00:13:04,790 --> 00:13:06,829
because the the servers are actually

303
00:13:06,829 --> 00:13:09,559
found in points so the you don't want

304
00:13:09,559 --> 00:13:11,389
the server to start doing work before

305
00:13:11,389 --> 00:13:12,740
the client does work because it could

306
00:13:12,740 --> 00:13:14,480
lead to like a denial of service attack

307
00:13:14,480 --> 00:13:16,399
and it's also important because an

308
00:13:16,399 --> 00:13:18,209
attacker who's observing this

309
00:13:18,209 --> 00:13:20,249
this communication he doesn't know what

310
00:13:20,249 --> 00:13:23,100
that premaster secret is and because he

311
00:13:23,100 --> 00:13:25,379
doesn't know that at a later step he's

312
00:13:25,379 --> 00:13:27,269
not able to determine what the master

313
00:13:27,269 --> 00:13:29,459
secret is and that's what derives the

314
00:13:29,459 --> 00:13:31,319
keys which give us this communication

315
00:13:31,319 --> 00:13:34,649
security and once once this connection

316
00:13:34,649 --> 00:13:39,689
is set up the the the two end points are

317
00:13:39,689 --> 00:13:42,269
able to to exchange secure Modbus as

318
00:13:42,269 --> 00:13:44,220
they would be today with normal about

319
00:13:44,220 --> 00:13:47,839
bus except that Modbus is now protected

320
00:13:47,839 --> 00:13:51,660
for authorization the we have the

321
00:13:51,660 --> 00:13:53,730
problem that the Modbus protocol it does

322
00:13:53,730 --> 00:13:55,829
not have any provision to to transmit a

323
00:13:55,829 --> 00:13:58,679
role and we're not able to change the

324
00:13:58,679 --> 00:14:00,480
Modbus protocol because if we do that

325
00:14:00,480 --> 00:14:03,089
then all of the existing Modbus systems

326
00:14:03,089 --> 00:14:06,089
they would no longer we would have

327
00:14:06,089 --> 00:14:07,519
incompatibility

328
00:14:07,519 --> 00:14:11,699
so what there is inside of the x.509

329
00:14:11,699 --> 00:14:13,529
certificates which we need for a secure

330
00:14:13,529 --> 00:14:15,300
identity anyway there's there's an

331
00:14:15,300 --> 00:14:17,339
extension mechanism and we've registered

332
00:14:17,339 --> 00:14:22,709
an OID to allow us to to encode the

333
00:14:22,709 --> 00:14:24,540
industrial role into the extension

334
00:14:24,540 --> 00:14:28,259
attributes of x.509 so as long as the

335
00:14:28,259 --> 00:14:31,049
different vendors of secure Modbus we we

336
00:14:31,049 --> 00:14:33,600
have a convention we use this OID for to

337
00:14:33,600 --> 00:14:34,970
transmit the role around the system

338
00:14:34,970 --> 00:14:37,019
we're able to get this property of

339
00:14:37,019 --> 00:14:40,249
containment and the the TLS handshake

340
00:14:40,249 --> 00:14:42,990
process actually provides for a place

341
00:14:42,990 --> 00:14:45,839
where this can be checked and it's a

342
00:14:45,839 --> 00:14:47,850
multi-level check the first level can be

343
00:14:47,850 --> 00:14:50,220
is this end point supposed to connect to

344
00:14:50,220 --> 00:14:52,319
me and we can already do something there

345
00:14:52,319 --> 00:14:55,949
a second level can be is this end point

346
00:14:55,949 --> 00:14:57,449
supposed to be sending me this type of

347
00:14:57,449 --> 00:14:59,399
my bus and that would be in the protocol

348
00:14:59,399 --> 00:15:04,110
handler when we want to talk about

349
00:15:04,110 --> 00:15:06,089
interoperability with existing Modbus

350
00:15:06,089 --> 00:15:08,970
devices some Modbus it's on its on port

351
00:15:08,970 --> 00:15:11,189
five or two and we know that there's

352
00:15:11,189 --> 00:15:15,149
already a large number of devices out

353
00:15:15,149 --> 00:15:18,839
there with different ages and we're not

354
00:15:18,839 --> 00:15:20,279
really we're not sure we can update all

355
00:15:20,279 --> 00:15:22,319
of them so the last thing what we want

356
00:15:22,319 --> 00:15:25,049
to do is to start sending TLS handshakes

357
00:15:25,049 --> 00:15:27,600
to these devices because at least in

358
00:15:27,600 --> 00:15:29,879
some cases the behavior could be

359
00:15:29,879 --> 00:15:32,110
unpredictable so what we've

360
00:15:32,110 --> 00:15:34,269
as we've we've registered a new port for

361
00:15:34,269 --> 00:15:37,329
secure Modbus its port 802 and it's

362
00:15:37,329 --> 00:15:42,100
reserved what I annum so the as long as

363
00:15:42,100 --> 00:15:44,160
everybody uses this port number for

364
00:15:44,160 --> 00:15:46,570
first secure Modbus will get the same

365
00:15:46,570 --> 00:15:48,519
interoperability between vendors of

366
00:15:48,519 --> 00:15:51,070
devices enabled for secure Modbus that

367
00:15:51,070 --> 00:15:54,810
we enjoy today with with normal Modbus

368
00:15:54,810 --> 00:15:58,660
the so up until now we've talked a lot

369
00:15:58,660 --> 00:16:01,329
about certificates and the the role they

370
00:16:01,329 --> 00:16:03,220
play in secure Modbus but we haven't

371
00:16:03,220 --> 00:16:06,190
said very much about where these

372
00:16:06,190 --> 00:16:08,790
certificates are going to come from and

373
00:16:08,790 --> 00:16:11,079
what we have to do in order to get these

374
00:16:11,079 --> 00:16:13,870
certificates as enrollment so devices in

375
00:16:13,870 --> 00:16:16,570
the commissioning phase they they will

376
00:16:16,570 --> 00:16:18,519
need to generate this public private key

377
00:16:18,519 --> 00:16:20,500
keeper the private key has to be

378
00:16:20,500 --> 00:16:22,240
generated under device because it's

379
00:16:22,240 --> 00:16:23,890
important that it's only the endpoint

380
00:16:23,890 --> 00:16:26,470
that knows what it is but in order to

381
00:16:26,470 --> 00:16:29,380
get the certificate we've got a we've

382
00:16:29,380 --> 00:16:31,269
got to send a public key and the

383
00:16:31,269 --> 00:16:33,399
identity to this PKI function that we've

384
00:16:33,399 --> 00:16:37,449
put on the network and inside that PKI

385
00:16:37,449 --> 00:16:39,910
there's got to be a verification of that

386
00:16:39,910 --> 00:16:41,769
identity is this something that's

387
00:16:41,769 --> 00:16:43,810
supposed to be in my control system and

388
00:16:43,810 --> 00:16:46,329
that verification it can be based on the

389
00:16:46,329 --> 00:16:48,130
it could be based on a Mac addressed it

390
00:16:48,130 --> 00:16:50,680
could be based on on any other decision

391
00:16:50,680 --> 00:16:52,570
but it's it's got to be present we can't

392
00:16:52,570 --> 00:16:53,890
just let anything have a certificate

393
00:16:53,890 --> 00:16:56,230
because otherwise the attacker also will

394
00:16:56,230 --> 00:16:58,240
be able to get a certificate and once

395
00:16:58,240 --> 00:17:01,510
that verification is satisfied then a

396
00:17:01,510 --> 00:17:03,610
certificate will be issued and it will

397
00:17:03,610 --> 00:17:07,059
be pushed back to the device but this is

398
00:17:07,059 --> 00:17:08,799
only one side of the problem because

399
00:17:08,799 --> 00:17:11,619
once we have these certificates we need

400
00:17:11,619 --> 00:17:13,329
a way to determine certificate status

401
00:17:13,329 --> 00:17:19,140
because devices will have lifetimes and

402
00:17:19,140 --> 00:17:21,699
once the device is taken out of service

403
00:17:21,699 --> 00:17:23,859
it still got this certificate in its

404
00:17:23,859 --> 00:17:25,660
memory somewhere unless unless it's like

405
00:17:25,660 --> 00:17:28,179
disposed of in a very safe way so we

406
00:17:28,179 --> 00:17:31,330
need a way for the the other elements of

407
00:17:31,330 --> 00:17:32,890
the system to know that that certificate

408
00:17:32,890 --> 00:17:34,900
while it does have a valid signature

409
00:17:34,900 --> 00:17:37,390
while it is within its validity period

410
00:17:37,390 --> 00:17:39,940
that it should no longer be accepted for

411
00:17:39,940 --> 00:17:43,870
secure communications and the way this

412
00:17:43,870 --> 00:17:44,980
has worked in PKI

413
00:17:44,980 --> 00:17:45,910
has been

414
00:17:45,910 --> 00:17:48,070
to have certificate revocation lists

415
00:17:48,070 --> 00:17:49,780
which are maintained by the PKI

416
00:17:49,780 --> 00:17:52,510
and as certificates are invalidated

417
00:17:52,510 --> 00:17:55,990
they're entered onto this list and this

418
00:17:55,990 --> 00:17:58,120
list is not without problems because it

419
00:17:58,120 --> 00:18:00,370
can grow to be quite long and that can

420
00:18:00,370 --> 00:18:02,140
be cumbersome and we don't necessarily

421
00:18:02,140 --> 00:18:03,880
want industrial devices dealing with

422
00:18:03,880 --> 00:18:06,370
that all the time but the good news is

423
00:18:06,370 --> 00:18:08,410
this is also a problem that was faced in

424
00:18:08,410 --> 00:18:11,740
in the IT world and in IT they've just

425
00:18:11,740 --> 00:18:13,810
been a number of developments i/o CSP

426
00:18:13,810 --> 00:18:15,940
has been around for a long time which

427
00:18:15,940 --> 00:18:18,370
it's a way to instead of dealing with

428
00:18:18,370 --> 00:18:20,140
these crl objects you can say to a

429
00:18:20,140 --> 00:18:22,390
server tell me is the certificate valid

430
00:18:22,390 --> 00:18:26,140
and did this is a simpler approach but

431
00:18:26,140 --> 00:18:28,150
we still have a situation where we don't

432
00:18:28,150 --> 00:18:30,460
want devices as they receive connections

433
00:18:30,460 --> 00:18:32,200
to have to go off talking to another

434
00:18:32,200 --> 00:18:35,350
server in order to say yes or no so

435
00:18:35,350 --> 00:18:39,040
what's becoming popular in in browser

436
00:18:39,040 --> 00:18:41,140
world now is like to do this but to do

437
00:18:41,140 --> 00:18:42,610
it in the other direction where we put

438
00:18:42,610 --> 00:18:44,680
the obligation on the client to obtain

439
00:18:44,680 --> 00:18:46,750
their certificate status in advance and

440
00:18:46,750 --> 00:18:49,300
to staple that certificate status on to

441
00:18:49,300 --> 00:18:51,490
the connection request and the the

442
00:18:51,490 --> 00:18:53,020
endpoint can trust that certificate

443
00:18:53,020 --> 00:18:54,670
status because it's signed in the same

444
00:18:54,670 --> 00:18:57,580
way that everything else is signed so

445
00:18:57,580 --> 00:18:59,050
these are some of the different options

446
00:18:59,050 --> 00:19:00,400
and depending on the exact scenario

447
00:19:00,400 --> 00:19:02,200
there will be different constraints and

448
00:19:02,200 --> 00:19:04,510
sometimes one or other option would work

449
00:19:04,510 --> 00:19:07,150
better but based on these options we

450
00:19:07,150 --> 00:19:08,830
have we have some valid approaches to

451
00:19:08,830 --> 00:19:13,600
that problem we also get interesting

452
00:19:13,600 --> 00:19:16,930
possibilities when we start to to have

453
00:19:16,930 --> 00:19:20,650
PKI based solutions so we're in a world

454
00:19:20,650 --> 00:19:22,570
where companies collaborate together and

455
00:19:22,570 --> 00:19:24,940
each company will will want to manage

456
00:19:24,940 --> 00:19:26,410
your own trust because that's a core

457
00:19:26,410 --> 00:19:29,230
part of their of their business so if we

458
00:19:29,230 --> 00:19:31,090
if we imagine like a pipeline scenario

459
00:19:31,090 --> 00:19:32,080
which is we have some major

460
00:19:32,080 --> 00:19:34,930
infrastructure one company could own the

461
00:19:34,930 --> 00:19:36,970
pumps and other company could own the

462
00:19:36,970 --> 00:19:38,530
actual pipes a further company a

463
00:19:38,530 --> 00:19:41,590
refinery but all of their assets have to

464
00:19:41,590 --> 00:19:43,540
be able to interoperate

465
00:19:43,540 --> 00:19:45,880
in order to make the gas flow so how

466
00:19:45,880 --> 00:19:47,560
come one of their assets trust another

467
00:19:47,560 --> 00:19:49,090
trust an asset from a different company

468
00:19:49,090 --> 00:19:53,470
and what PKI lets us do is that one of

469
00:19:53,470 --> 00:19:55,840
the companies can cross certify the

470
00:19:55,840 --> 00:19:58,020
route of trust of another company and

471
00:19:58,020 --> 00:19:59,770
automatically what's

472
00:19:59,770 --> 00:20:02,020
the other company's infrastructure is

473
00:20:02,020 --> 00:20:04,210
trusted in your infrastructure and that

474
00:20:04,210 --> 00:20:06,460
cross certificate can be maintained for

475
00:20:06,460 --> 00:20:08,170
as long as the business relationship is

476
00:20:08,170 --> 00:20:10,570
there so it gives us a very flexible way

477
00:20:10,570 --> 00:20:15,600
to address this kind of a problem so

478
00:20:15,600 --> 00:20:18,400
when we we start to think about the

479
00:20:18,400 --> 00:20:22,570
performance of this we can we can expect

480
00:20:22,570 --> 00:20:25,090
to have some changes but primarily at

481
00:20:25,090 --> 00:20:27,820
the connection setup time because when

482
00:20:27,820 --> 00:20:30,700
we're doing TLS or indeed anything with

483
00:20:30,700 --> 00:20:32,590
public key cryptography the public key

484
00:20:32,590 --> 00:20:35,440
operations are what is computationally

485
00:20:35,440 --> 00:20:39,550
intensive so we we we know there will be

486
00:20:39,550 --> 00:20:42,070
some extra computational overhead a

487
00:20:42,070 --> 00:20:45,520
connection set up but the good news is

488
00:20:45,520 --> 00:20:48,580
that for the actual session data did

489
00:20:48,580 --> 00:20:50,380
this these are linear algorithms and

490
00:20:50,380 --> 00:20:52,420
there's not a huge amount of data which

491
00:20:52,420 --> 00:20:54,360
needs to be exchanged

492
00:20:54,360 --> 00:20:56,800
so the during the actual session data

493
00:20:56,800 --> 00:20:59,200
the exchange of secure Modbus compared

494
00:20:59,200 --> 00:21:01,360
to Modbus there will be a marginal

495
00:21:01,360 --> 00:21:04,690
performance cost and in addition to this

496
00:21:04,690 --> 00:21:07,030
we have ways to manage this performance

497
00:21:07,030 --> 00:21:10,120
question in that we don't have to

498
00:21:10,120 --> 00:21:12,910
migrate every day to flow from Modbus to

499
00:21:12,910 --> 00:21:15,310
secure Modbus we can choose to high risk

500
00:21:15,310 --> 00:21:19,150
data flows and migrate only those and if

501
00:21:19,150 --> 00:21:20,320
that keeps us within the performance

502
00:21:20,320 --> 00:21:22,210
constraint of the device then we can

503
00:21:22,210 --> 00:21:24,790
stop there and this is a constraint that

504
00:21:24,790 --> 00:21:26,530
will it will get smaller over time

505
00:21:26,530 --> 00:21:30,820
because as we all know the capacity of

506
00:21:30,820 --> 00:21:32,890
these devices is improving all the time

507
00:21:32,890 --> 00:21:34,360
we're getting more and more native

508
00:21:34,360 --> 00:21:38,350
crypto accelerators so you know it's it

509
00:21:38,350 --> 00:21:40,090
might be concern today because we have a

510
00:21:40,090 --> 00:21:42,010
mix of these older and newer devices but

511
00:21:42,010 --> 00:21:45,400
over time this concern will evaporate in

512
00:21:45,400 --> 00:21:47,290
terms of how we can make this available

513
00:21:47,290 --> 00:21:49,480
and when we can make it available so

514
00:21:49,480 --> 00:21:52,210
today this is we're working on this with

515
00:21:52,210 --> 00:21:54,610
some of the some of the bigger Modbus

516
00:21:54,610 --> 00:21:57,550
vendors and we're moving to to create a

517
00:21:57,550 --> 00:21:59,890
final proposal that we can we can bring

518
00:21:59,890 --> 00:22:02,860
to Modbus organization and we hope that

519
00:22:02,860 --> 00:22:04,810
after that we can make it available to

520
00:22:04,810 --> 00:22:08,920
the community so the this is the this is

521
00:22:08,920 --> 00:22:10,450
where we are with our with the secure

522
00:22:10,450 --> 00:22:11,290
Modbus idea

523
00:22:11,290 --> 00:22:13,690
so at yeah it said we are dead

524
00:22:13,690 --> 00:22:15,129
a fight we had a number of things we

525
00:22:15,129 --> 00:22:17,049
wanted to make sure we could do so we

526
00:22:17,049 --> 00:22:20,490
had the authentication authorization

527
00:22:20,490 --> 00:22:23,409
definitely integrity protection and we

528
00:22:23,409 --> 00:22:26,080
wanted to have the to make sure that we

529
00:22:26,080 --> 00:22:28,330
had a good way to ensure compatibility

530
00:22:28,330 --> 00:22:31,179
with legacy Modbus and across different

531
00:22:31,179 --> 00:22:32,740
vendors and we've seen how we can do

532
00:22:32,740 --> 00:22:35,320
this with this the new port number and

533
00:22:35,320 --> 00:22:38,889
the the x.509 extension based on a

534
00:22:38,889 --> 00:22:41,679
standard OID that's registered and we've

535
00:22:41,679 --> 00:22:44,080
also seen we have we have ways to do

536
00:22:44,080 --> 00:22:48,690
migration in that we're not obliging the

537
00:22:48,690 --> 00:22:51,789
the use of secure Modbus doesn't exclude

538
00:22:51,789 --> 00:22:54,039
normal Modbus people can do this in a

539
00:22:54,039 --> 00:22:57,460
step-by-step way so so that's what we

540
00:22:57,460 --> 00:22:58,830
are

541
00:22:58,830 --> 00:23:02,169
if anybody has any questions or happy to

542
00:23:02,169 --> 00:23:06,429
try to answer them sure okay so we'll go

543
00:23:06,429 --> 00:23:07,629
to question answer please introduce

544
00:23:07,629 --> 00:23:10,450
yourself hi this is rich Corrigan with

545
00:23:10,450 --> 00:23:12,190
San Diego Gas and Electric I work for a

546
00:23:12,190 --> 00:23:14,860
utility the majority of our SCADA

547
00:23:14,860 --> 00:23:16,240
signaling is done over serial

548
00:23:16,240 --> 00:23:18,940
communications how would this work in a

549
00:23:18,940 --> 00:23:21,059
in that kind of environment

550
00:23:21,059 --> 00:23:24,940
yesterday the parts were we're using TLS

551
00:23:24,940 --> 00:23:28,840
would be between the DPL s the PLC and a

552
00:23:28,840 --> 00:23:32,799
serial gateway and the the part where we

553
00:23:32,799 --> 00:23:34,779
do authorization it could be a function

554
00:23:34,779 --> 00:23:38,259
on the serial gateway where we the

555
00:23:38,259 --> 00:23:40,120
serial gateway is able to tell what sort

556
00:23:40,120 --> 00:23:41,799
of roles and what sort of identities are

557
00:23:41,799 --> 00:23:43,210
supposed to be able to bridge from that

558
00:23:43,210 --> 00:23:45,970
Ethernet to the serial and make a

559
00:23:45,970 --> 00:23:47,230
decision as to whether to allow that

560
00:23:47,230 --> 00:23:49,870
traffic to go forward or to to just drop

561
00:23:49,870 --> 00:23:56,440
it does that answer your question okay

562
00:23:56,440 --> 00:23:58,240
okay but you're gonna have like the

563
00:23:58,240 --> 00:24:01,330
secure Modbus endpoints and the concept

564
00:24:01,330 --> 00:24:03,460
will be the same the main thing is that

565
00:24:03,460 --> 00:24:06,850
we have this Ethernet the serial gateway

566
00:24:06,850 --> 00:24:09,159
which has the capacity to the first e to

567
00:24:09,159 --> 00:24:11,559
be a secure models endpoint and secondly

568
00:24:11,559 --> 00:24:13,539
to to enforce that authorization

569
00:24:13,539 --> 00:24:15,759
decision as to whether it will converge

570
00:24:15,759 --> 00:24:17,679
immediate yeah we have to comply with

571
00:24:17,679 --> 00:24:20,259
Newark sip yeah and as soon as we put IP

572
00:24:20,259 --> 00:24:22,779
in the communications path it's known as

573
00:24:22,779 --> 00:24:25,480
a external routable communications and

574
00:24:25,480 --> 00:24:27,100
it opens up a whole lot of

575
00:24:27,100 --> 00:24:28,450
Newark sip requirements then that we

576
00:24:28,450 --> 00:24:30,190
have to meet so we try to avoid that

577
00:24:30,190 --> 00:24:34,570
okay that's interesting so they the like

578
00:24:34,570 --> 00:24:37,149
we have focused on on the TCP part of

579
00:24:37,149 --> 00:24:40,690
this the the same protection

580
00:24:40,690 --> 00:24:44,679
architecture it could work outside of a

581
00:24:44,679 --> 00:24:46,809
TCP as long as well as long as there's a

582
00:24:46,809 --> 00:24:48,669
transport which provides the primitives

583
00:24:48,669 --> 00:24:51,159
which which TLS needs so it'd be

584
00:24:51,159 --> 00:24:53,429
interesting to discuss that further

585
00:24:53,429 --> 00:24:57,460
other questions a quick one

586
00:24:57,460 --> 00:25:00,190
you had that kind of timeline showing

587
00:25:00,190 --> 00:25:01,750
the things that have to happen do you

588
00:25:01,750 --> 00:25:03,580
have any sort of target date for

589
00:25:03,580 --> 00:25:08,830
submitting this to Modbus org so I don't

590
00:25:08,830 --> 00:25:10,450
I think it's something that we would

591
00:25:10,450 --> 00:25:13,029
want to move as quickly as possible but

592
00:25:13,029 --> 00:25:16,090
we're working with the with partners but

593
00:25:16,090 --> 00:25:17,860
like the major Modbus vendors to make

594
00:25:17,860 --> 00:25:19,210
sure that it's something that everybody

595
00:25:19,210 --> 00:25:19,990
is happy with

596
00:25:19,990 --> 00:25:22,269
so the it's important to finalize the

597
00:25:22,269 --> 00:25:24,220
proposal and then to bring it to my

598
00:25:24,220 --> 00:25:28,000
poster dog okay and and I guess another

599
00:25:28,000 --> 00:25:30,220
question okay there's one over here but

600
00:25:30,220 --> 00:25:33,389
while I'm walking over there OPC UA

601
00:25:33,389 --> 00:25:37,240
struggled with this issue of secure by

602
00:25:37,240 --> 00:25:40,450
default or just always work and let them

603
00:25:40,450 --> 00:25:42,309
secure it later so in their case with

604
00:25:42,309 --> 00:25:45,149
certificates the default is typically

605
00:25:45,149 --> 00:25:48,779
accept any certificate you're presented

606
00:25:48,779 --> 00:25:52,090
regardless of you know any certificate

607
00:25:52,090 --> 00:25:54,159
authority you just basically accept it

608
00:25:54,159 --> 00:25:55,600
and then you have to actually make

609
00:25:55,600 --> 00:25:57,519
changes from that default to add

610
00:25:57,519 --> 00:26:00,399
security are you going to be proposing

611
00:26:00,399 --> 00:26:03,220
something like that to Modbus or are you

612
00:26:03,220 --> 00:26:05,889
gonna propose no you actually have to

613
00:26:05,889 --> 00:26:08,200
have a CA in place and be able to

614
00:26:08,200 --> 00:26:12,460
validate the certificate well I think

615
00:26:12,460 --> 00:26:15,100
the ability to do secure Modbus it's it

616
00:26:15,100 --> 00:26:16,960
just requires you to have a certificate

617
00:26:16,960 --> 00:26:20,610
and like we're the architectures were

618
00:26:20,610 --> 00:26:23,710
preparing they have this PKI function on

619
00:26:23,710 --> 00:26:26,200
the network if a different vendor or

620
00:26:26,200 --> 00:26:28,059
user wants to do it in a different way

621
00:26:28,059 --> 00:26:30,610
that you know it's almost a certificate

622
00:26:30,610 --> 00:26:32,559
is there and they're conscious of the

623
00:26:32,559 --> 00:26:34,600
risk that they're taking then you know

624
00:26:34,600 --> 00:26:36,669
it's their choice but what it's also

625
00:26:36,669 --> 00:26:39,010
possible to do is to to have a

626
00:26:39,010 --> 00:26:40,450
downgraded version

627
00:26:40,450 --> 00:26:42,880
of authorization so you can say that on

628
00:26:42,880 --> 00:26:47,230
the endpoints okay the the connections

629
00:26:47,230 --> 00:26:48,670
being established your certificates

630
00:26:48,670 --> 00:26:50,620
validator the change back to a root of

631
00:26:50,620 --> 00:26:53,920
trust I know but there's something funky

632
00:26:53,920 --> 00:26:56,950
about it so I'm downgrading what you can

633
00:26:56,950 --> 00:26:58,540
normally do so from now you can only do

634
00:26:58,540 --> 00:27:00,130
read operations you can't do write

635
00:27:00,130 --> 00:27:02,200
operations so so we can have a

636
00:27:02,200 --> 00:27:04,200
multi-leveled approach to dealing with

637
00:27:04,200 --> 00:27:07,090
some of the the edge cases in these

638
00:27:07,090 --> 00:27:09,640
scenarios yeah I guess what we always

639
00:27:09,640 --> 00:27:12,640
worry about is a false sense of security

640
00:27:12,640 --> 00:27:14,980
yeah so you could like if you have an

641
00:27:14,980 --> 00:27:17,560
OPC UA setup and each side creates a

642
00:27:17,560 --> 00:27:20,740
self-signed certificate and then the

643
00:27:20,740 --> 00:27:23,140
exchanges and they think oh now I'm I've

644
00:27:23,140 --> 00:27:25,290
got authentication authorization

645
00:27:25,290 --> 00:27:27,400
encryption well basically you have no

646
00:27:27,400 --> 00:27:28,720
idea who you're talking to because

647
00:27:28,720 --> 00:27:31,540
you'll accept any certificate as valid

648
00:27:31,540 --> 00:27:33,700
you know but on the flip side of that

649
00:27:33,700 --> 00:27:35,230
they said well if we don't do that a lot

650
00:27:35,230 --> 00:27:36,310
of people are going to plug this thing

651
00:27:36,310 --> 00:27:37,810
in and it's just not going to work

652
00:27:37,810 --> 00:27:40,120
because they don't understand how to put

653
00:27:40,120 --> 00:27:42,460
in a CA in an architecture so it's kind

654
00:27:42,460 --> 00:27:45,400
of that balancing and what what you

655
00:27:45,400 --> 00:27:47,560
propose is kind of the default do you

656
00:27:47,560 --> 00:27:49,210
start secure and say you can make it

657
00:27:49,210 --> 00:27:51,640
less secure do you start less secure and

658
00:27:51,640 --> 00:27:55,390
require them to up the ante yeah and I

659
00:27:55,390 --> 00:27:57,370
think as well there be like if you are

660
00:27:57,370 --> 00:27:58,780
doing self-signed certificates so

661
00:27:58,780 --> 00:28:00,760
firstly we need to make it visible that

662
00:28:00,760 --> 00:28:03,160
that isn't authentication but it's also

663
00:28:03,160 --> 00:28:05,800
going to be probably more expensive to

664
00:28:05,800 --> 00:28:08,080
doing a proper certificate hierarchy a

665
00:28:08,080 --> 00:28:11,320
proper PK function because every self

666
00:28:11,320 --> 00:28:13,060
signed certificate is in effect its own

667
00:28:13,060 --> 00:28:15,130
read of trust so the organization is

668
00:28:15,130 --> 00:28:16,990
going to end up dealing with is you know

669
00:28:16,990 --> 00:28:19,060
the number of the number of trust

670
00:28:19,060 --> 00:28:20,680
relationships will be the number of

671
00:28:20,680 --> 00:28:23,050
assets squared and every assets gonna

672
00:28:23,050 --> 00:28:24,370
have to be configured with this

673
00:28:24,370 --> 00:28:25,810
different rate of trust so it will get

674
00:28:25,810 --> 00:28:27,550
messy pretty fast I think for a company

675
00:28:27,550 --> 00:28:29,140
that does that maybe on a very small

676
00:28:29,140 --> 00:28:32,050
scale it can work but okay there there

677
00:28:32,050 --> 00:28:34,680
was a question over here

678
00:28:34,920 --> 00:28:38,440
penny and Najafi from fire right so with

679
00:28:38,440 --> 00:28:40,720
the new personal are you planning to

680
00:28:40,720 --> 00:28:42,520
give some recommendations so that they

681
00:28:42,520 --> 00:28:44,500
can change the hardware in a way that

682
00:28:44,500 --> 00:28:46,870
they can keep the private key secure

683
00:28:46,870 --> 00:28:50,980
yeah as well

684
00:28:50,980 --> 00:28:52,360
you know we're not gonna be telling

685
00:28:52,360 --> 00:28:54,070
other vendors had to make their products

686
00:28:54,070 --> 00:28:57,070
and we have our architectures for how we

687
00:28:57,070 --> 00:29:00,280
protect private keys and we we actually

688
00:29:00,280 --> 00:29:02,380
present it on battle nests for about six

689
00:29:02,380 --> 00:29:03,970
months ago as well so it's it's things

690
00:29:03,970 --> 00:29:05,679
that we share but it's up to other

691
00:29:05,679 --> 00:29:07,630
vendors to decide what they want to want

692
00:29:07,630 --> 00:29:10,030
what they want to use and you know we'll

693
00:29:10,030 --> 00:29:12,460
we'll do it the ways that we're

694
00:29:12,460 --> 00:29:14,049
satisfied that our hardware meets our

695
00:29:14,049 --> 00:29:17,919
security requirements and does that help

696
00:29:17,919 --> 00:29:29,140
does that answer yeah yeah it did start

697
00:29:29,140 --> 00:29:32,169
an appropriate use of public private

698
00:29:32,169 --> 00:29:33,820
keys if you have no security what's

699
00:29:33,820 --> 00:29:36,070
whatsoever for your private key so it

700
00:29:36,070 --> 00:29:39,220
would they should be doing and what they

701
00:29:39,220 --> 00:29:40,690
shouldn't be making claims which aren't

702
00:29:40,690 --> 00:29:42,040
appropriate either like we have the

703
00:29:42,040 --> 00:29:44,919
security levels of 64 for trees so a

704
00:29:44,919 --> 00:29:46,960
device which is doing very basic

705
00:29:46,960 --> 00:29:49,809
security for firts private keys that

706
00:29:49,809 --> 00:29:52,090
should that should be visible based on

707
00:29:52,090 --> 00:29:54,760
the security devices that the security

708
00:29:54,760 --> 00:29:56,200
level that device is claiming so

709
00:29:56,200 --> 00:29:57,160
something that with it

710
00:29:57,160 --> 00:29:59,290
that has a hardware key security will be

711
00:29:59,290 --> 00:30:01,360
able to claim like an SL tree where is

712
00:30:01,360 --> 00:30:04,649
something that doesn't might only be

713
00:30:06,780 --> 00:30:10,780
yeah Matt matkal with ultra 3 TI you

714
00:30:10,780 --> 00:30:13,299
explained the situation for a greenfield

715
00:30:13,299 --> 00:30:15,309
site you know brand-new configurations

716
00:30:15,309 --> 00:30:16,960
everything's going to be the initialize

717
00:30:16,960 --> 00:30:19,480
or the the keys are gonna be handle the

718
00:30:19,480 --> 00:30:22,059
very configuration can you walk through

719
00:30:22,059 --> 00:30:23,890
in reality there's gonna be some

720
00:30:23,890 --> 00:30:25,090
brownfield installations where it's

721
00:30:25,090 --> 00:30:27,100
gonna be a hybrid of as they migrate to

722
00:30:27,100 --> 00:30:28,660
a secure Modbus with the existing can

723
00:30:28,660 --> 00:30:30,250
you talk about the coexistence aspects

724
00:30:30,250 --> 00:30:31,870
and how you envision those two

725
00:30:31,870 --> 00:30:38,559
mechanisms are work sure so d so we

726
00:30:38,559 --> 00:30:41,020
would expect that the there be some kind

727
00:30:41,020 --> 00:30:43,750
of analysis that you know the the owner

728
00:30:43,750 --> 00:30:45,220
of that infrastructure they will know

729
00:30:45,220 --> 00:30:47,290
where their risks are and they'll be

730
00:30:47,290 --> 00:30:49,240
able to prioritize which data flows that

731
00:30:49,240 --> 00:30:51,490
they want to move to to secure Modbus

732
00:30:51,490 --> 00:30:59,110
first then they can they'll have they'll

733
00:30:59,110 --> 00:31:00,820
have a number of choices about how to go

734
00:31:00,820 --> 00:31:02,500
about it I think I tried to separate it

735
00:31:02,500 --> 00:31:04,039
based on two onto different

736
00:31:04,039 --> 00:31:05,840
Network controllers on the back plain of

737
00:31:05,840 --> 00:31:08,119
the PLC or they could leave everything

738
00:31:08,119 --> 00:31:10,729
as it is today and just enforce it fee

739
00:31:10,729 --> 00:31:12,289
is some kind of a whitelist on the PLC

740
00:31:12,289 --> 00:31:14,629
that would stop you know downgrading of

741
00:31:14,629 --> 00:31:16,369
a data flow that's supposed to be secure

742
00:31:16,369 --> 00:31:19,789
mob goes down to normal Modbus the the

743
00:31:19,789 --> 00:31:21,769
fact that they're both TCP protocols and

744
00:31:21,769 --> 00:31:22,879
the difference is a different port

745
00:31:22,879 --> 00:31:24,950
number it it doesn't create a problem to

746
00:31:24,950 --> 00:31:26,299
have them both on the same network at

747
00:31:26,299 --> 00:31:28,660
the same time

748
00:31:28,660 --> 00:31:31,739
[Music]

