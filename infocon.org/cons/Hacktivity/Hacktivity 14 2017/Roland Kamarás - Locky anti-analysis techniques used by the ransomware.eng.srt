1
00:00:00,030 --> 00:00:02,310
I also vacuum everybody my name is Ron

2
00:00:02,310 --> 00:00:04,200
Kumaresh and the topic of this

3
00:00:04,200 --> 00:00:06,750
presentation will be the Lockheed

4
00:00:06,750 --> 00:00:08,940
ransomware and this talk is about the

5
00:00:08,940 --> 00:00:10,980
unti analyzes techniques used by the

6
00:00:10,980 --> 00:00:14,940
ransomware but before we go into the

7
00:00:14,940 --> 00:00:16,350
technical details of the difference

8
00:00:16,350 --> 00:00:18,439
methods used by the ransomware I want to

9
00:00:18,439 --> 00:00:21,480
tell a few words about me again I

10
00:00:21,480 --> 00:00:23,189
graduated from the Budapest University

11
00:00:23,189 --> 00:00:26,070
of Technology and economics few years

12
00:00:26,070 --> 00:00:28,050
ago in software engineering department

13
00:00:28,050 --> 00:00:30,330
and at the MSC in the university I

14
00:00:30,330 --> 00:00:32,130
joined to the creases lab and its

15
00:00:32,130 --> 00:00:34,739
student core and to the respondent has

16
00:00:34,739 --> 00:00:37,700
captured the fact the city of steam and

17
00:00:37,700 --> 00:00:41,100
now I work at the academy technologies

18
00:00:41,100 --> 00:00:45,710
cafe as an IT security specialist and

19
00:00:45,710 --> 00:00:49,800
first of all in this presentation I want

20
00:00:49,800 --> 00:00:52,469
to speak about the low key ransomware

21
00:00:52,469 --> 00:00:55,079
and I want to answer an answer this

22
00:00:55,079 --> 00:00:56,789
question that what the lucky ones are

23
00:00:56,789 --> 00:01:00,149
very easy and I want to tell a few words

24
00:01:00,149 --> 00:01:02,670
about it's probably about it spreading

25
00:01:02,670 --> 00:01:05,129
method its distribution technique and

26
00:01:05,129 --> 00:01:07,350
short summary about its working method

27
00:01:07,350 --> 00:01:10,350
and after that I want to focus and the

28
00:01:10,350 --> 00:01:12,600
anti analysis techniques used within the

29
00:01:12,600 --> 00:01:14,970
runs number and I want to focus on our

30
00:01:14,970 --> 00:01:20,070
analysis results and add remaining part

31
00:01:20,070 --> 00:01:22,890
of this presentation I want to talk I'll

32
00:01:22,890 --> 00:01:24,900
talk about a Hungarian ransomware called

33
00:01:24,900 --> 00:01:28,799
a key which is a short for the Hungarian

34
00:01:28,799 --> 00:01:33,450
loci and I want to highlight the

35
00:01:33,450 --> 00:01:35,610
similarities and mainly the most

36
00:01:35,610 --> 00:01:37,860
different season and most significant

37
00:01:37,860 --> 00:01:40,229
differences between the low key and the

38
00:01:40,229 --> 00:01:42,840
hockey runs number because hockey looks

39
00:01:42,840 --> 00:01:46,020
like as the low key runs number but

40
00:01:46,020 --> 00:01:48,899
there are huge differences between the

41
00:01:48,899 --> 00:01:51,600
two brands of our families and at the

42
00:01:51,600 --> 00:01:54,180
end of this presentation I want to

43
00:01:54,180 --> 00:01:57,770
conclude the results of our examination

44
00:01:57,770 --> 00:02:01,649
so let's start with a short introduction

45
00:02:01,649 --> 00:02:03,930
to the low key ransomware the low key

46
00:02:03,930 --> 00:02:06,119
runs on Paris is a rentable marker that

47
00:02:06,119 --> 00:02:08,598
is released in the February

48
00:02:08,598 --> 00:02:13,099
in the February of 2016 and the road

49
00:02:13,099 --> 00:02:15,290
number itself is delivered by a phishing

50
00:02:15,290 --> 00:02:17,719
campaign using some kind of social

51
00:02:17,719 --> 00:02:20,090
engineering technique and ransomware

52
00:02:20,090 --> 00:02:23,150
itself using an email in an attempt to

53
00:02:23,150 --> 00:02:26,030
Microsoft Office document that contains

54
00:02:26,030 --> 00:02:28,639
malicious macros so if the user opens

55
00:02:28,639 --> 00:02:30,829
the document and enables the macros

56
00:02:30,829 --> 00:02:34,549
within the document the macros will then

57
00:02:34,549 --> 00:02:38,030
save and lounge around somewhere

58
00:02:38,030 --> 00:02:41,569
sorry downloader adulterer binary and

59
00:02:41,569 --> 00:02:44,450
this will be the first phase of the

60
00:02:44,450 --> 00:02:46,400
infection and this Dell other binary

61
00:02:46,400 --> 00:02:48,049
will download the actual encryption

62
00:02:48,049 --> 00:02:50,120
payload that if the runs over itself

63
00:02:50,120 --> 00:02:52,459
from a command and control server a C&C

64
00:02:52,459 --> 00:02:53,959
server that is controlled by the

65
00:02:53,959 --> 00:02:56,919
attackers and after that the payload is

66
00:02:56,919 --> 00:02:59,870
loaded into the memory of the user

67
00:02:59,870 --> 00:03:03,169
system and encrypts all files that make

68
00:03:03,169 --> 00:03:05,299
particular extensions on the victim

69
00:03:05,299 --> 00:03:09,319
computer it is important to note that

70
00:03:09,319 --> 00:03:11,989
there are numerous versions numerous

71
00:03:11,989 --> 00:03:14,750
variants of the low key ransomware that

72
00:03:14,750 --> 00:03:16,759
are using different file extensions for

73
00:03:16,759 --> 00:03:19,579
the encrypted files and the name of

74
00:03:19,579 --> 00:03:21,739
these versions will be the name of the

75
00:03:21,739 --> 00:03:25,519
extension that the that runs over uses

76
00:03:25,519 --> 00:03:30,199
when encrypting files so for example

77
00:03:30,199 --> 00:03:33,019
Loki Odin Thor and so on and it

78
00:03:33,019 --> 00:03:34,519
important that in this presentation I

79
00:03:34,519 --> 00:03:36,859
want to talk about the tour variant of

80
00:03:36,859 --> 00:03:39,169
the runs over that is originally

81
00:03:39,169 --> 00:03:42,199
delivered by J as JavaScript or VBS

82
00:03:42,199 --> 00:03:46,069
visual basic script attachment and the

83
00:03:46,069 --> 00:03:50,180
ransomware itself is also active in 2017

84
00:03:50,180 --> 00:03:52,430
and the most recent version of the

85
00:03:52,430 --> 00:03:54,680
ransomware is the Aussie riff

86
00:03:54,680 --> 00:03:57,409
so the the most of the name of the most

87
00:03:57,409 --> 00:03:58,729
recent version of the razzleberry so

88
00:03:58,729 --> 00:04:02,870
series it was released in the in the end

89
00:04:02,870 --> 00:04:07,609
of the last year so so a few words about

90
00:04:07,609 --> 00:04:09,379
the working method of the reservoir as I

91
00:04:09,379 --> 00:04:12,639
mentioned the runs over itself

92
00:04:12,639 --> 00:04:15,500
encrypts all files on the user's

93
00:04:15,500 --> 00:04:18,738
computer with a specific estate

94
00:04:18,738 --> 00:04:21,370
extension and other encryption

95
00:04:21,370 --> 00:04:24,060
it is displayed on the user the next tab

96
00:04:24,060 --> 00:04:27,210
here you can see an example for this

97
00:04:27,210 --> 00:04:30,400
ransom note for this message and this

98
00:04:30,400 --> 00:04:32,770
message instructs the victim user to

99
00:04:32,770 --> 00:04:34,990
download a specific browser at all

100
00:04:34,990 --> 00:04:38,320
browser and to visit a specific cyber

101
00:04:38,320 --> 00:04:40,780
criminal operated web site where the

102
00:04:40,780 --> 00:04:44,139
victim can found can find useful

103
00:04:44,139 --> 00:04:49,620
information to decrypt his or her file

104
00:04:49,620 --> 00:04:53,979
ok the reservoir itself is a 32-bit

105
00:04:53,979 --> 00:04:56,680
Windows executable that contains the

106
00:04:56,680 --> 00:04:59,380
malicious core pegged and encrypted and

107
00:04:59,380 --> 00:05:03,400
of course office gated and within the

108
00:05:03,400 --> 00:05:06,850
outer executable the reason an encrypted

109
00:05:06,850 --> 00:05:09,699
DLL so the ultra executable ample

110
00:05:09,699 --> 00:05:11,380
employees and encrypted the 11 stellar

111
00:05:11,380 --> 00:05:14,199
and after unpacking the internal

112
00:05:14,199 --> 00:05:17,590
encrypted DLL the executable dropper

113
00:05:17,590 --> 00:05:19,690
creates a new process from itself spawns

114
00:05:19,690 --> 00:05:22,360
a new process from itself and injects

115
00:05:22,360 --> 00:05:24,789
and loads the extracted already

116
00:05:24,789 --> 00:05:27,010
extracted dll into the newly created

117
00:05:27,010 --> 00:05:28,419
process it to the address space of the

118
00:05:28,419 --> 00:05:30,849
newly created process and finally passes

119
00:05:30,849 --> 00:05:32,860
the control flow to the entry point of

120
00:05:32,860 --> 00:05:37,960
the DLL so after deployment transparency

121
00:05:37,960 --> 00:05:40,990
drop copy usually from the actual user

122
00:05:40,990 --> 00:05:43,900
stamp folder and encrypts all files that

123
00:05:43,900 --> 00:05:46,000
have the specified extensions as I

124
00:05:46,000 --> 00:05:48,010
mentioned earlier the encryption is

125
00:05:48,010 --> 00:05:50,110
performed using strong cryptography

126
00:05:50,110 --> 00:05:53,889
algorithms such as the RSA a symmetric

127
00:05:53,889 --> 00:05:56,710
key crypto algorithm or the AES as a

128
00:05:56,710 --> 00:06:01,889
symmetric key crypto so and because the

129
00:06:01,889 --> 00:06:05,620
attackers poses the private key pair of

130
00:06:05,620 --> 00:06:10,410
the RSA key it is practically impossible

131
00:06:10,410 --> 00:06:16,740
to decrypt the encrypted files manually

132
00:06:16,740 --> 00:06:19,360
the sample communicates with the C&C

133
00:06:19,360 --> 00:06:21,729
server with its remote C&C server with a

134
00:06:21,729 --> 00:06:25,630
custom HTTP based protocol using HTTP

135
00:06:25,630 --> 00:06:30,159
post requests and the full communication

136
00:06:30,159 --> 00:06:33,039
over this channel is encrypted and it is

137
00:06:33,039 --> 00:06:34,879
important to note that

138
00:06:34,879 --> 00:06:39,770
the public RSA key that is needed by

139
00:06:39,770 --> 00:06:41,419
general somewhere to encrypt the files

140
00:06:41,419 --> 00:06:45,229
and the ransom note and some other

141
00:06:45,229 --> 00:06:47,479
information are also fetched from this

142
00:06:47,479 --> 00:06:52,429
remote C&C server by the internal of the

143
00:06:52,429 --> 00:06:55,639
reservoir but in the focus of this

144
00:06:55,639 --> 00:06:59,990
presentation using the the antenna is

145
00:06:59,990 --> 00:07:06,050
techniques of the ransomware and here

146
00:07:06,050 --> 00:07:08,689
you can see the unique hash fingerprint

147
00:07:08,689 --> 00:07:11,269
of the samples that we have like the

148
00:07:11,269 --> 00:07:15,800
mind during our analysis and in this

149
00:07:15,800 --> 00:07:18,589
presentation I want to focus of the

150
00:07:18,589 --> 00:07:21,969
results of the analyse of these samples

151
00:07:21,969 --> 00:07:25,550
you can see the md5 sha-1 and share 256

152
00:07:25,550 --> 00:07:31,360
fingerprints of be examined samples so

153
00:07:31,360 --> 00:07:35,089
it's important to note that the outer

154
00:07:35,089 --> 00:07:37,669
executable the outer 32-bit executable

155
00:07:37,669 --> 00:07:42,469
of the ransomware itself uses multi

156
00:07:42,469 --> 00:07:45,319
layer difference method and the first

157
00:07:45,319 --> 00:07:48,349
layer of its different method is a new

158
00:07:48,349 --> 00:07:51,050
soft installer package so the Rosenberg

159
00:07:51,050 --> 00:07:53,599
binary and this outer executable binary

160
00:07:53,599 --> 00:07:56,899
is packed into a new soft special a

161
00:07:56,899 --> 00:07:59,749
specific news of installer package so

162
00:07:59,749 --> 00:08:01,849
the installer package is used as a

163
00:08:01,849 --> 00:08:04,939
packing method but has an affiliation

164
00:08:04,939 --> 00:08:08,689
layer and the loaders to you an obvious

165
00:08:08,689 --> 00:08:12,529
example for some an obvious examples for

166
00:08:12,529 --> 00:08:14,269
some strings in the binary that

167
00:08:14,269 --> 00:08:18,559
indicates that the runs over uses the

168
00:08:18,559 --> 00:08:20,449
nodes of this data package can be seen

169
00:08:20,449 --> 00:08:23,419
here for example the new soft in string

170
00:08:23,419 --> 00:08:25,639
winning the binary the presence of the

171
00:08:25,639 --> 00:08:28,059
string in the binary the presence of

172
00:08:28,059 --> 00:08:32,589
these strings in the binary of course

173
00:08:33,309 --> 00:08:37,130
the unpacking process of the binary is a

174
00:08:37,130 --> 00:08:40,880
very simple exercise you can extract the

175
00:08:40,880 --> 00:08:43,669
binary using for example some kind of

176
00:08:43,669 --> 00:08:47,350
zip application that can extract nsis

177
00:08:47,350 --> 00:08:48,960
packages and

178
00:08:48,960 --> 00:08:51,210
to extraction we get the following list

179
00:08:51,210 --> 00:08:53,910
of Pfizer you see a plug into your

180
00:08:53,910 --> 00:08:57,600
directory and some other files the

181
00:08:57,600 --> 00:08:59,880
important thing is that the most of

182
00:08:59,880 --> 00:09:02,220
these files are not important or not

183
00:09:02,220 --> 00:09:03,930
relevant for us they are just some

184
00:09:03,930 --> 00:09:06,300
component files of the installer package

185
00:09:06,300 --> 00:09:10,320
there are two important files for us is

186
00:09:10,320 --> 00:09:14,250
the NSA s dot NSA file that contains

187
00:09:14,250 --> 00:09:16,590
script code and another file that

188
00:09:16,590 --> 00:09:19,920
contains encrypted content which has a

189
00:09:19,920 --> 00:09:24,210
random name in this example and if we go

190
00:09:24,210 --> 00:09:25,890
it in the plugins directory there are

191
00:09:25,890 --> 00:09:29,160
further files the the only relevant file

192
00:09:29,160 --> 00:09:33,060
for us here is the system DLL file which

193
00:09:33,060 --> 00:09:36,750
is a which is a plugin of the of the

194
00:09:36,750 --> 00:09:39,750
NSIC stellar package and this module

195
00:09:39,750 --> 00:09:43,190
this plug-in enables for the developers

196
00:09:43,190 --> 00:09:47,670
to invoke directly windows API calls

197
00:09:47,670 --> 00:09:50,490
from the prayers mentioned anise is not

198
00:09:50,490 --> 00:09:52,830
an SI script the purpose of the unifier

199
00:09:52,830 --> 00:09:57,120
NSI a script is to is to describe the

200
00:09:57,120 --> 00:10:02,280
necessary steps the necessary process to

201
00:10:02,280 --> 00:10:08,970
install the binary itself and if we if

202
00:10:08,970 --> 00:10:12,360
we look into the look into the look into

203
00:10:12,360 --> 00:10:16,350
this file into the script file we can

204
00:10:16,350 --> 00:10:18,960
see the unit function at the top of the

205
00:10:18,960 --> 00:10:21,510
slide this function is automatically

206
00:10:21,510 --> 00:10:24,150
called within the script file when the

207
00:10:24,150 --> 00:10:26,400
anasazi installer package is executed

208
00:10:26,400 --> 00:10:29,670
and the number is a very simple of whose

209
00:10:29,670 --> 00:10:31,530
Kashin technique as the first layer of

210
00:10:31,530 --> 00:10:36,810
device of its defense it only includes a

211
00:10:36,810 --> 00:10:39,570
lot of junk code within the within the

212
00:10:39,570 --> 00:10:42,480
script code and if we remove the

213
00:10:42,480 --> 00:10:45,210
instructions or the lines that is

214
00:10:45,210 --> 00:10:50,780
starting with the in top instruction the

215
00:10:50,780 --> 00:10:54,660
code of the script can be more read can

216
00:10:54,660 --> 00:10:56,940
be more readable and another important

217
00:10:56,940 --> 00:11:01,440
thing is the system call

218
00:11:01,440 --> 00:11:06,029
inside the script the call function is

219
00:11:06,029 --> 00:11:08,190
implemented in the mentioned system but

220
00:11:08,190 --> 00:11:11,870
DLL plugin and using this call function

221
00:11:11,870 --> 00:11:15,000
within the script the script can invoke

222
00:11:15,000 --> 00:11:18,510
the windows api calls directly the only

223
00:11:18,510 --> 00:11:20,820
parameter of the call function is the

224
00:11:20,820 --> 00:11:23,670
name of the windows api call and another

225
00:11:23,670 --> 00:11:26,300
of vocation technique that is presented

226
00:11:26,300 --> 00:11:29,399
within the script is that at the full

227
00:11:29,399 --> 00:11:33,540
name of this of this module windows api

228
00:11:33,540 --> 00:11:35,040
at the funny but this windows api

229
00:11:35,040 --> 00:11:38,550
function or call is built up from

230
00:11:38,550 --> 00:11:42,240
substring is an example you can see an

231
00:11:42,240 --> 00:11:46,019
example for this yes if you see the SDR

232
00:11:46,019 --> 00:11:48,450
CPI function in the third line of the

233
00:11:48,450 --> 00:11:54,029
script and after be manually will tap

234
00:11:54,029 --> 00:11:56,880
the from these sub strings the name of

235
00:11:56,880 --> 00:12:01,769
the of the of the windows API call after

236
00:12:01,769 --> 00:12:05,160
that the decoded - is instructions will

237
00:12:05,160 --> 00:12:08,510
be the following so we get the following

238
00:12:08,510 --> 00:12:12,510
code snippet at the in the first line

239
00:12:12,510 --> 00:12:18,240
the ransomware tries to retrieve the

240
00:12:18,240 --> 00:12:20,660
address of the cannister kernel32.dll

241
00:12:20,660 --> 00:12:25,019
library because when the when the

242
00:12:25,019 --> 00:12:27,720
process is running the chemistry - dll

243
00:12:27,720 --> 00:12:29,070
is already loaded into the address space

244
00:12:29,070 --> 00:12:33,060
of the of the runs over so the the only

245
00:12:33,060 --> 00:12:35,640
purpose of this function invocation is

246
00:12:35,640 --> 00:12:38,550
to retrieve the address of the 2d

247
00:12:38,550 --> 00:12:43,140
actually loaded medulla and after that

248
00:12:43,140 --> 00:12:47,100
right after death the script uses the

249
00:12:47,100 --> 00:12:49,920
cat + address windows api function with

250
00:12:49,920 --> 00:12:54,199
this which is again in the kernel32.dll

251
00:12:54,199 --> 00:12:58,190
module and tries to do try to retrieve

252
00:12:58,190 --> 00:13:04,079
the starting address of some karna 32

253
00:13:04,079 --> 00:13:06,510
the dll functions for example create

254
00:13:06,510 --> 00:13:08,399
file virtual agreed file and close

255
00:13:08,399 --> 00:13:12,199
handle and the addresses of these

256
00:13:12,199 --> 00:13:14,250
functions of the starting addresses of

257
00:13:14,250 --> 00:13:14,970
these functions we

258
00:13:14,970 --> 00:13:20,490
restored in r2 r3 r4 and r5 variables or

259
00:13:20,490 --> 00:13:23,009
or registers if we use the terminology

260
00:13:23,009 --> 00:13:27,240
of the NSF's in stellar okay and if we

261
00:13:27,240 --> 00:13:31,560
look at the second half of the script

262
00:13:31,560 --> 00:13:36,389
snippet and if we replace the register

263
00:13:36,389 --> 00:13:40,709
names with their values we can get the

264
00:13:40,709 --> 00:13:45,480
following script snippet and here we see

265
00:13:45,480 --> 00:13:47,819
that the that the ransomware

266
00:13:47,819 --> 00:13:50,699
tries to not not that tries to create

267
00:13:50,699 --> 00:13:55,819
but tries to open the already mentioned

268
00:13:55,819 --> 00:14:00,449
five with random name from the root

269
00:14:00,449 --> 00:14:03,529
directory of the installer package and

270
00:14:03,529 --> 00:14:07,319
then using the read file windows API

271
00:14:07,319 --> 00:14:11,009
call it simply reads the content of this

272
00:14:11,009 --> 00:14:14,490
encrypted binary into the newly

273
00:14:14,490 --> 00:14:17,009
allocated memory area that is allocated

274
00:14:17,009 --> 00:14:19,680
by the virtual I'll log in those API

275
00:14:19,680 --> 00:14:22,079
Cola and then close closes the handle of

276
00:14:22,079 --> 00:14:24,709
the file it is not important for us and

277
00:14:24,709 --> 00:14:29,279
the important for us is the last line of

278
00:14:29,279 --> 00:14:33,360
this code in the last line of the code

279
00:14:33,360 --> 00:14:37,759
the runs over invokes a specific address

280
00:14:37,759 --> 00:14:42,779
within the already loaded encrypted

281
00:14:42,779 --> 00:14:45,209
binary because the starting address of

282
00:14:45,209 --> 00:14:47,850
the this binary will be in the r0

283
00:14:47,850 --> 00:14:50,850
register and you can see an and offset

284
00:14:50,850 --> 00:14:53,939
value after the name of this register

285
00:14:53,939 --> 00:14:59,540
and it passes a single parameter to this

286
00:14:59,540 --> 00:15:04,050
to this code which will be the name of

287
00:15:04,050 --> 00:15:07,139
this encrypted binary within the NSA

288
00:15:07,139 --> 00:15:14,339
installer package okay so the from here

289
00:15:14,339 --> 00:15:17,220
in the focus of this presentation will

290
00:15:17,220 --> 00:15:20,850
be the encrypted binary payload and

291
00:15:20,850 --> 00:15:23,130
within the end encrypted binary payload

292
00:15:23,130 --> 00:15:26,009
our multi-level ixora encryption is

293
00:15:26,009 --> 00:15:27,730
performed

294
00:15:27,730 --> 00:15:29,950
as I mentioned in the previous slide the

295
00:15:29,950 --> 00:15:33,580
NSI script passed this control flow to

296
00:15:33,580 --> 00:15:36,790
the next security code snippet we didn't

297
00:15:36,790 --> 00:15:38,980
be encrypted binary because not the

298
00:15:38,980 --> 00:15:41,910
whole binaries encrypted but there is a

299
00:15:41,910 --> 00:15:47,110
few lines of code that is clear and here

300
00:15:47,110 --> 00:15:50,380
you can see the code that is not

301
00:15:50,380 --> 00:15:53,770
encrypted within the within the

302
00:15:53,770 --> 00:15:57,070
mentioned file and here you can see an

303
00:15:57,070 --> 00:15:59,320
assembly trace an assembly instruction

304
00:15:59,320 --> 00:16:02,320
trace and if you look at to the first

305
00:16:02,320 --> 00:16:04,420
instruction the first assembly

306
00:16:04,420 --> 00:16:08,050
extraction yeah you see a move

307
00:16:08,050 --> 00:16:10,870
instruction this move extraction moves

308
00:16:10,870 --> 00:16:16,570
the 0 XC 3 value into the DL register of

309
00:16:16,570 --> 00:16:19,390
the CPU it's important that the 0 axis

310
00:16:19,390 --> 00:16:22,120
real value is the hexa that in a

311
00:16:22,120 --> 00:16:25,630
representation of the assembly read

312
00:16:25,630 --> 00:16:30,040
instruction so here the purpose of the

313
00:16:30,040 --> 00:16:34,030
assembly trace is to find within this

314
00:16:34,030 --> 00:16:38,020
trace the first read instruction and

315
00:16:38,020 --> 00:16:43,170
after it finds the read instruction it

316
00:16:43,170 --> 00:16:48,760
it pops up from the binary the next to 4

317
00:16:48,760 --> 00:16:51,460
byte values the first 4 byte value will

318
00:16:51,460 --> 00:16:54,280
be the length the length parameter and

319
00:16:54,280 --> 00:16:57,820
the next 4 byte value will be on XOR key

320
00:16:57,820 --> 00:17:00,640
and this XOR key will be used to decrypt

321
00:17:00,640 --> 00:17:04,119
the the remaining part of the binary the

322
00:17:04,119 --> 00:17:07,739
remaining encrypted part of the binary

323
00:17:09,150 --> 00:17:13,270
ok and after the decryption of the

324
00:17:13,270 --> 00:17:15,940
remaining part of the binary the next

325
00:17:15,940 --> 00:17:17,680
instruction the decrypted instructions

326
00:17:17,680 --> 00:17:20,200
assembly instructions after after the

327
00:17:20,200 --> 00:17:23,710
length and an Excel key parameter will

328
00:17:23,710 --> 00:17:26,020
be this will be the second stage of the

329
00:17:26,020 --> 00:17:28,840
decryption routine and it is important

330
00:17:28,840 --> 00:17:33,880
at the second stage of the decryption is

331
00:17:33,880 --> 00:17:36,480
the same totally the same instructions

332
00:17:36,480 --> 00:17:42,220
that were in the in the first stage and

333
00:17:42,220 --> 00:17:47,550
the bad news is that the runs over

334
00:17:47,550 --> 00:17:53,350
employs further six layers of decryption

335
00:17:53,350 --> 00:17:58,330
but the but the good news is that that

336
00:17:58,330 --> 00:17:59,950
all the crucial layers contains the same

337
00:17:59,950 --> 00:18:02,530
instructions so the binary performs a

338
00:18:02,530 --> 00:18:04,380
total of eight layers of decryption and

339
00:18:04,380 --> 00:18:06,640
the only difference between the stages

340
00:18:06,640 --> 00:18:08,830
is the value of the decryption langston

341
00:18:08,830 --> 00:18:12,760
and the value of the XOR key parameter

342
00:18:12,760 --> 00:18:15,520
and after the last layer of decryption

343
00:18:15,520 --> 00:18:17,890
the control flow continues at the

344
00:18:17,890 --> 00:18:20,860
beginning of a C function after a jump

345
00:18:20,860 --> 00:18:24,300
instruction but is not necessary as okay

346
00:18:24,300 --> 00:18:29,050
so as I mentioned the final malicious

347
00:18:29,050 --> 00:18:31,990
payload is an and that didn't encrypted

348
00:18:31,990 --> 00:18:34,300
dll inside the executable

349
00:18:34,300 --> 00:18:38,080
but this DL ADIZ is encrypted now and

350
00:18:38,080 --> 00:18:41,650
this DLL is inside this encrypted binary

351
00:18:41,650 --> 00:18:43,660
blob at the start of this angry

352
00:18:43,660 --> 00:18:46,330
encrypted binary blob and right after

353
00:18:46,330 --> 00:18:49,470
this encrypted binary blob will be the

354
00:18:49,470 --> 00:18:57,600
LVDS and retrace Nitai that is so okay

355
00:18:57,600 --> 00:19:04,990
and the next layer of the the next layer

356
00:19:04,990 --> 00:19:08,530
of the novice difference method for the

357
00:19:08,530 --> 00:19:10,420
roughest kavia there will be further

358
00:19:10,420 --> 00:19:13,060
verification and encryption in the

359
00:19:13,060 --> 00:19:17,440
executable binary and the malware

360
00:19:17,440 --> 00:19:23,110
after this after the after this assembly

361
00:19:23,110 --> 00:19:25,660
trace essentially performs the following

362
00:19:25,660 --> 00:19:28,570
tasks with some kind of import address

363
00:19:28,570 --> 00:19:31,180
table that is used to refer the

364
00:19:31,180 --> 00:19:34,140
necessary external library functions

365
00:19:34,140 --> 00:19:39,130
primary for from Canada 32 DLL and from

366
00:19:39,130 --> 00:19:43,330
a DVI API 32 the DLL and the binary

367
00:19:43,330 --> 00:19:47,350
tries to find the specified functions

368
00:19:47,350 --> 00:19:49,900
within these modules within these loaded

369
00:19:49,900 --> 00:19:51,760
modules

370
00:19:51,760 --> 00:19:56,440
based on their export export table as

371
00:19:56,440 --> 00:19:59,350
biggest and based on the functions

372
00:19:59,350 --> 00:20:03,150
specific checksum value and the

373
00:20:03,150 --> 00:20:06,190
reservoir tries to find the appropriate

374
00:20:06,190 --> 00:20:10,570
function based on the checksum value the

375
00:20:10,570 --> 00:20:11,980
ransomware it is important that the

376
00:20:11,980 --> 00:20:14,740
ransomware uses a modified version of

377
00:20:14,740 --> 00:20:18,130
the crc32 checksum calculation algorithm

378
00:20:18,130 --> 00:20:24,100
and after it finds the necessary import

379
00:20:24,100 --> 00:20:26,080
functions from the kernel 32 dot

380
00:20:26,080 --> 00:20:30,630
dialogue and the db-api 32 dll modules

381
00:20:30,630 --> 00:20:34,630
then first the already mentioned import

382
00:20:34,630 --> 00:20:40,110
address table here you can see the

383
00:20:40,110 --> 00:20:42,700
manually imported the manually imported

384
00:20:42,700 --> 00:20:45,040
functions of the runs over itself from

385
00:20:45,040 --> 00:20:48,600
the kernel32.dll and ADV api 32 the dll

386
00:20:48,600 --> 00:20:56,620
modules ok and the last and the next

387
00:20:56,620 --> 00:21:01,540
step of the of the the of the unpacking

388
00:21:01,540 --> 00:21:03,880
method that is applied within the

389
00:21:03,880 --> 00:21:09,070
ransomware is to is to extract the dll

390
00:21:09,070 --> 00:21:14,500
and decrypt the DLL from the encrypted

391
00:21:14,500 --> 00:21:17,230
binary so the on process of the

392
00:21:17,230 --> 00:21:20,290
executable that is the NS is a stellar

393
00:21:20,290 --> 00:21:22,960
package and its process was the

394
00:21:22,960 --> 00:21:25,770
originally encrypted binary image of the

395
00:21:25,770 --> 00:21:29,470
ransomware this will be the file that I

396
00:21:29,470 --> 00:21:33,580
mentioned with random name and this file

397
00:21:33,580 --> 00:21:36,790
and that malicious encrypted the allele

398
00:21:36,790 --> 00:21:43,990
at offset 0 X 0 X 11 and from this

399
00:21:43,990 --> 00:21:48,669
offset the the encrypted the Olalla

400
00:21:48,669 --> 00:21:51,820
we replaced the encrypted binary robot

401
00:21:51,820 --> 00:21:55,059
the DLL will be placed within the binary

402
00:21:55,059 --> 00:21:59,470
and the DLL is extraordinary

403
00:21:59,470 --> 00:22:01,750
so the DLL is decrypted using a simple

404
00:22:01,750 --> 00:22:04,380
xor xor algorithm that we

405
00:22:04,380 --> 00:22:07,740
see in the next slide and the length of

406
00:22:07,740 --> 00:22:11,850
the decryption and xor key is stored

407
00:22:11,850 --> 00:22:13,800
right before the encrypted binary blood

408
00:22:13,800 --> 00:22:25,310
of the dll okay oh sorry

409
00:22:25,310 --> 00:22:28,080
the XOR key is not stored right before

410
00:22:28,080 --> 00:22:29,430
the encrypted binary by the Unicode

411
00:22:29,430 --> 00:22:32,880
string of the fine name serve as the XOR

412
00:22:32,880 --> 00:22:36,450
key of the decryption it's correct okay

413
00:22:36,450 --> 00:22:41,670
and here you can see the X or decryption

414
00:22:41,670 --> 00:22:44,180
routine it's a simple it's a simple

415
00:22:44,180 --> 00:22:50,130
Excel decryption the the algorithm goes

416
00:22:50,130 --> 00:22:53,670
through the embedded and encrypted

417
00:22:53,670 --> 00:22:57,960
binary blob and and and and and the

418
00:22:57,960 --> 00:23:01,500
actual for by it four bytes of the

419
00:23:01,500 --> 00:23:05,400
binary blob is ex-ored with the 4x6 or

420
00:23:05,400 --> 00:23:11,250
key and the resulting key is further and

421
00:23:11,250 --> 00:23:14,220
the resulting values further exhort with

422
00:23:14,220 --> 00:23:16,920
an offset parameter that will be the

423
00:23:16,920 --> 00:23:20,540
value of the index parameter in our case

424
00:23:20,540 --> 00:23:24,560
okay and as the last step of the

425
00:23:24,560 --> 00:23:29,040
unpacking process the original process

426
00:23:29,040 --> 00:23:32,070
spawns a new process from itself using

427
00:23:32,070 --> 00:23:35,940
the NSIC installer package and expose

428
00:23:35,940 --> 00:23:39,330
the process in suspended state and then

429
00:23:39,330 --> 00:23:43,470
the embedded dll is manually loaded and

430
00:23:43,470 --> 00:23:45,210
relocated it is important that the

431
00:23:45,210 --> 00:23:46,890
binary contains relocation of

432
00:23:46,890 --> 00:23:50,220
instructions using the standard windows

433
00:23:50,220 --> 00:23:54,150
p relocation table format and then the

434
00:23:54,150 --> 00:23:57,060
dll is injected into the address space

435
00:23:57,060 --> 00:23:59,460
of the newly created process using a

436
00:23:59,460 --> 00:24:02,190
shared memory between the original

437
00:24:02,190 --> 00:24:04,350
process and visit and between the newly

438
00:24:04,350 --> 00:24:08,280
created process using two entity Lidl

439
00:24:08,280 --> 00:24:10,620
functions namely the anti create section

440
00:24:10,620 --> 00:24:15,630
and anti method of section functions so

441
00:24:15,630 --> 00:24:17,610
the mother

442
00:24:17,610 --> 00:24:22,350
create an allocated memory within the

443
00:24:22,350 --> 00:24:25,159
original process using the ante create

444
00:24:25,159 --> 00:24:28,590
section and using the ante Matthew of

445
00:24:28,590 --> 00:24:32,129
section the runs on verb Maps this

446
00:24:32,129 --> 00:24:34,649
memory area to the into the address

447
00:24:34,649 --> 00:24:37,169
space of the newly created process and

448
00:24:37,169 --> 00:24:40,379
then simply copies the content of the

449
00:24:40,379 --> 00:24:42,149
decrypted DNA into the address space of

450
00:24:42,149 --> 00:24:46,230
the target process okay an interesting

451
00:24:46,230 --> 00:24:49,049
feature within the ransomware that the

452
00:24:49,049 --> 00:24:51,629
anti DLL functions as I mentioned a nut

453
00:24:51,629 --> 00:24:54,210
code directly from the entity ID of the

454
00:24:54,210 --> 00:24:56,879
other module the binary directly invoke

455
00:24:56,879 --> 00:24:59,039
the appropriate system calls that are

456
00:24:59,039 --> 00:25:01,590
related to the actual anti DLL functions

457
00:25:01,590 --> 00:25:06,869
and to achieve this it runs on birth

458
00:25:06,869 --> 00:25:09,179
determines the appropriate system call

459
00:25:09,179 --> 00:25:13,350
numbers based on the code based on the

460
00:25:13,350 --> 00:25:15,960
instructions of the mentioned anti DLL

461
00:25:15,960 --> 00:25:19,289
functions and this is done most likely

462
00:25:19,289 --> 00:25:21,029
to make it difficult difficult the

463
00:25:21,029 --> 00:25:22,649
automatic in the automatic analysis of

464
00:25:22,649 --> 00:25:24,600
the runs over and maybe to be hidden

465
00:25:24,600 --> 00:25:32,249
from detection and the last data so in

466
00:25:32,249 --> 00:25:36,269
this in this phase of the injection the

467
00:25:36,269 --> 00:25:39,119
DLL is injected into the address space

468
00:25:39,119 --> 00:25:41,639
of the target process but the control

469
00:25:41,639 --> 00:25:45,600
flow is not passed yet the entry point

470
00:25:45,600 --> 00:25:48,149
of the Diyala so the last step of the

471
00:25:48,149 --> 00:25:50,519
injection is to hijack the control flow

472
00:25:50,519 --> 00:25:54,749
and in order to do this the original

473
00:25:54,749 --> 00:25:56,909
process modifies the value of the image

474
00:25:56,909 --> 00:26:00,629
base address matter some kind of metal

475
00:26:00,629 --> 00:26:03,090
into information within the suspended

476
00:26:03,090 --> 00:26:05,669
process to the base address of the

477
00:26:05,669 --> 00:26:06,659
injected Dayla

478
00:26:06,659 --> 00:26:09,809
and then hijack the control flow of the

479
00:26:09,809 --> 00:26:12,119
suspended process to the entry point of

480
00:26:12,119 --> 00:26:14,399
the DLL

481
00:26:14,399 --> 00:26:17,159
by exchanging the value in register AIX

482
00:26:17,159 --> 00:26:20,279
of the CPU because this register right

483
00:26:20,279 --> 00:26:25,289
after loading right after the loaded the

484
00:26:25,289 --> 00:26:28,080
binary the register AIX contains the

485
00:26:28,080 --> 00:26:30,480
address of the entry point of the

486
00:26:30,480 --> 00:26:34,980
suitable but it is important that it can

487
00:26:34,980 --> 00:26:37,830
be done directly in modern operating

488
00:26:37,830 --> 00:26:42,530
systems so so a process can't directly

489
00:26:42,530 --> 00:26:45,240
exchange the value in any of the

490
00:26:45,240 --> 00:26:49,740
register is in another CPU in another

491
00:26:49,740 --> 00:26:53,640
thread context in another process so the

492
00:26:53,640 --> 00:26:56,820
runs over itself uses a simple trick

493
00:26:56,820 --> 00:27:01,350
risk standard method the original CPU

494
00:27:01,350 --> 00:27:04,380
context is saved by the runs over and

495
00:27:04,380 --> 00:27:08,299
then it exchanged the value within the

496
00:27:08,299 --> 00:27:13,200
AIX register to point to the entry point

497
00:27:13,200 --> 00:27:16,350
of the dll and then restores the CPU

498
00:27:16,350 --> 00:27:19,080
context within the within the target

499
00:27:19,080 --> 00:27:21,270
process using standard windows api casa

500
00:27:21,270 --> 00:27:23,460
and then reserves the newly created

501
00:27:23,460 --> 00:27:28,320
process so it will execute after its

502
00:27:28,320 --> 00:27:34,799
suspended state ok and as i promised at

503
00:27:34,799 --> 00:27:37,650
the start of this presentation i want to

504
00:27:37,650 --> 00:27:40,320
talk a short about the hungarian run

505
00:27:40,320 --> 00:27:42,570
somewhere called hockey which is the

506
00:27:42,570 --> 00:27:47,160
abbreviation of hungarian loki and at

507
00:27:47,160 --> 00:27:50,280
the first glance this ransomware family

508
00:27:50,280 --> 00:27:54,840
looks like loki looks like too low-key

509
00:27:54,840 --> 00:27:58,740
but if we if we look at the runs over

510
00:27:58,740 --> 00:28:01,770
closer we can see that there are huge

511
00:28:01,770 --> 00:28:04,290
differences between the two runs of our

512
00:28:04,290 --> 00:28:10,080
families so here you can see d the only

513
00:28:10,080 --> 00:28:12,929
cash fingerprints of D of the eczema in

514
00:28:12,929 --> 00:28:17,640
samples share one fingerprint okay here

515
00:28:17,640 --> 00:28:21,900
are the similarities between the two

516
00:28:21,900 --> 00:28:24,630
runs on four samples but ransom verse

517
00:28:24,630 --> 00:28:28,530
aim is to encrypt valuable files and to

518
00:28:28,530 --> 00:28:31,080
demand money for the decryption the

519
00:28:31,080 --> 00:28:33,059
encryption process is quite similar in

520
00:28:33,059 --> 00:28:37,049
both cases a s Keys randomly generated a

521
00:28:37,049 --> 00:28:39,419
s key is used for file encryption in

522
00:28:39,419 --> 00:28:41,460
both cases and this random randomly

523
00:28:41,460 --> 00:28:42,190
generated

524
00:28:42,190 --> 00:28:46,960
Heskey is done further encrypted by a

525
00:28:46,960 --> 00:28:50,259
public RSA key and at the end of the

526
00:28:50,259 --> 00:28:52,600
encryption process the victim machine

527
00:28:52,600 --> 00:28:56,320
looks similar in both cases in this

528
00:28:56,320 --> 00:29:00,340
picture you can see an example for the

529
00:29:00,340 --> 00:29:08,110
case of the Acura number okay and the

530
00:29:08,110 --> 00:29:10,509
differences between the two runs over

531
00:29:10,509 --> 00:29:13,029
samples the main and most significant

532
00:29:13,029 --> 00:29:17,919
bit differences that indicate that that

533
00:29:17,919 --> 00:29:20,830
that hockey that the hacker on soccer

534
00:29:20,830 --> 00:29:24,309
fan family can be created by the same

535
00:29:24,309 --> 00:29:31,320
threat actors at loci okay so the most

536
00:29:31,320 --> 00:29:33,850
the most significant difference between

537
00:29:33,850 --> 00:29:35,909
the two runs over samples is the

538
00:29:35,909 --> 00:29:39,639
programming language Loki is implemented

539
00:29:39,639 --> 00:29:42,970
in C language by a hockey uses and based

540
00:29:42,970 --> 00:29:46,480
on Microsoft visual basic.net so it uses

541
00:29:46,480 --> 00:29:48,970
managed code and it is implemented in

542
00:29:48,970 --> 00:29:52,600
visual basic script a kiss code uses

543
00:29:52,600 --> 00:29:55,750
Hungarian words as namespace and not a

544
00:29:55,750 --> 00:29:58,149
variable name is a' another difference

545
00:29:58,149 --> 00:30:00,870
is the public encryption key loki

546
00:30:00,870 --> 00:30:03,850
retrieves and retrieving method at the

547
00:30:03,850 --> 00:30:06,429
time of the public encryption key loki

548
00:30:06,429 --> 00:30:10,629
retrieves the public RSA key from a

549
00:30:10,629 --> 00:30:13,179
remote C&C server that is controlled by

550
00:30:13,179 --> 00:30:18,309
the attackers in the case of hockey the

551
00:30:18,309 --> 00:30:21,820
public RSA key is hard-coded sarkodie in

552
00:30:21,820 --> 00:30:28,990
XML format and an interesting thing in

553
00:30:28,990 --> 00:30:31,389
the background somewhere is that all the

554
00:30:31,389 --> 00:30:34,029
examined samples contained the same

555
00:30:34,029 --> 00:30:38,470
hard-coded RSA public key a key displays

556
00:30:38,470 --> 00:30:40,179
a dummy word document while encrypting

557
00:30:40,179 --> 00:30:44,529
files and after that perform the system

558
00:30:44,529 --> 00:30:48,220
restart in case of Loki these activities

559
00:30:48,220 --> 00:30:50,889
at in the binary and not implemented in

560
00:30:50,889 --> 00:30:52,600
the binary

561
00:30:52,600 --> 00:30:53,800
another difference is the payment

562
00:30:53,800 --> 00:30:57,400
requesting metalder loki instructs the

563
00:30:57,400 --> 00:31:02,860
user to visit tor pages in case of a key

564
00:31:02,860 --> 00:31:05,950
actually requires victims to send an

565
00:31:05,950 --> 00:31:11,800
email to the given major address here

566
00:31:11,800 --> 00:31:15,100
you can see a code snippet from the

567
00:31:15,100 --> 00:31:18,760
decomp I'd source code of the hockey the

568
00:31:18,760 --> 00:31:21,010
recommend the comments are placed by us

569
00:31:21,010 --> 00:31:27,250
and here you can see the Hungarian words

570
00:31:27,250 --> 00:31:32,380
in variable names in object names and in

571
00:31:32,380 --> 00:31:39,310
the names of the functions so as the

572
00:31:39,310 --> 00:31:41,620
conclusion of this presentation I want

573
00:31:41,620 --> 00:31:45,460
to tell that in case of the documents on

574
00:31:45,460 --> 00:31:49,480
where we see we saw that that this

575
00:31:49,480 --> 00:31:51,670
random value is not using any new

576
00:31:51,670 --> 00:31:54,880
technique any any new trick rather it's

577
00:31:54,880 --> 00:31:57,580
using well-known for the standard

578
00:31:57,580 --> 00:32:00,700
techniques but the quantity of the

579
00:32:00,700 --> 00:32:03,700
techniques used in tourism when applied

580
00:32:03,700 --> 00:32:06,100
in the ransomware indicates that the

581
00:32:06,100 --> 00:32:08,860
author's invested sufficient and

582
00:32:08,860 --> 00:32:12,130
significant effort to hide the internal

583
00:32:12,130 --> 00:32:13,780
side the internal working and internal

584
00:32:13,780 --> 00:32:16,510
malicious functionality of the runs over

585
00:32:16,510 --> 00:32:21,220
itself maybe this is done in order to

586
00:32:21,220 --> 00:32:23,980
make difficult static analysis of these

587
00:32:23,980 --> 00:32:25,600
samples and the reverse engineering of

588
00:32:25,600 --> 00:32:28,210
the samples and also to hurt them the

589
00:32:28,210 --> 00:32:31,450
analysis in automated sandbox

590
00:32:31,450 --> 00:32:35,680
environment and we saw from the example

591
00:32:35,680 --> 00:32:37,870
of the hacker runs over that other

592
00:32:37,870 --> 00:32:41,680
threat actors usually try to copy the

593
00:32:41,680 --> 00:32:43,450
behavior of successful run long bars

594
00:32:43,450 --> 00:32:45,820
maybe in order to increase their chances

595
00:32:45,820 --> 00:32:48,390
of getting ransom payments from victims

596
00:32:48,390 --> 00:32:52,500
so that's it thank you

597
00:32:52,500 --> 00:32:56,279
[Applause]

