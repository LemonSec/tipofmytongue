1
00:00:00,030 --> 00:00:02,190
so yes so my name is Jehan Toma and

2
00:00:02,190 --> 00:00:04,790
today I will present a subject called

3
00:00:04,790 --> 00:00:06,420
limitations of Android permissions

4
00:00:06,420 --> 00:00:09,389
system packages processes and user

5
00:00:09,389 --> 00:00:12,900
privacy so I think just a precision by

6
00:00:12,900 --> 00:00:14,519
limitation I didn't want to save inner

7
00:00:14,519 --> 00:00:16,680
abilities or whatever I will let you

8
00:00:16,680 --> 00:00:19,320
judge easy to vulnerability or not so

9
00:00:19,320 --> 00:00:21,000
that's what we used imitation so to that

10
00:00:21,000 --> 00:00:24,420
and of you you get your own version of

11
00:00:24,420 --> 00:00:27,000
that so this work is men and does the

12
00:00:27,000 --> 00:00:28,800
project we project that we started in

13
00:00:28,800 --> 00:00:31,439
the company in now nearly two years ago

14
00:00:31,439 --> 00:00:34,170
and if you're more interesting about the

15
00:00:34,170 --> 00:00:35,520
approach they protect with I'm very

16
00:00:35,520 --> 00:00:39,000
happy to talk about that one too so the

17
00:00:39,000 --> 00:00:41,399
plantation would be quite structured in

18
00:00:41,399 --> 00:00:43,710
six paths so a quick introduction to

19
00:00:43,710 --> 00:00:45,750
remind very briefly what's permission

20
00:00:45,750 --> 00:00:47,879
how it works and it will hand that with

21
00:00:47,879 --> 00:00:51,960
a demo if everything is okay and then I

22
00:00:51,960 --> 00:00:54,030
will go more into details about three

23
00:00:54,030 --> 00:00:56,789
subjects which is a whole vision of how

24
00:00:56,789 --> 00:00:59,640
permission can be modeled and then what

25
00:00:59,640 --> 00:01:01,170
can we deduce from that in terms of the

26
00:01:01,170 --> 00:01:02,370
limitation of the algorithm that

27
00:01:02,370 --> 00:01:04,890
implements this model and in more

28
00:01:04,890 --> 00:01:06,540
general way about the limitation of this

29
00:01:06,540 --> 00:01:08,610
UID based security that is implemented

30
00:01:08,610 --> 00:01:12,390
in android for user privacy mainly in

31
00:01:12,390 --> 00:01:14,700
the fifth step I will produce an

32
00:01:14,700 --> 00:01:16,409
analysis or the feedback we got from

33
00:01:16,409 --> 00:01:18,390
Google the feedback from the market and

34
00:01:18,390 --> 00:01:19,979
also software that exists and I would

35
00:01:19,979 --> 00:01:23,340
finish with the conclusion so first of

36
00:01:23,340 --> 00:01:24,900
all the object of this talk because

37
00:01:24,900 --> 00:01:26,280
things are always very important to

38
00:01:26,280 --> 00:01:28,920
explain why do we talk so the objectives

39
00:01:28,920 --> 00:01:30,630
to explain obviously how permission

40
00:01:30,630 --> 00:01:32,280
works in our implemented and Android

41
00:01:32,280 --> 00:01:34,170
because it's very interesting subject

42
00:01:34,170 --> 00:01:36,390
it's also to explain where vulnerability

43
00:01:36,390 --> 00:01:37,920
was fun so what kind of vulnerability

44
00:01:37,920 --> 00:01:40,290
and where was the fund because when we

45
00:01:40,290 --> 00:01:42,210
explain that well it's also leave the

46
00:01:42,210 --> 00:01:44,070
audience with something after the talk

47
00:01:44,070 --> 00:01:46,860
which is what can they do to extend the

48
00:01:46,860 --> 00:01:49,770
present its subject so we're also

49
00:01:49,770 --> 00:01:52,979
obviously also it is rate the limitation

50
00:01:52,979 --> 00:01:55,290
of the UID based security model in

51
00:01:55,290 --> 00:01:58,530
Android one not very important is that

52
00:01:58,530 --> 00:02:00,960
we stick in the presentation to what was

53
00:02:00,960 --> 00:02:03,210
flagged by as Google as overdue or

54
00:02:03,210 --> 00:02:05,850
working as intended or fixed all the

55
00:02:05,850 --> 00:02:07,409
others that are still pending we will

56
00:02:07,409 --> 00:02:09,209
not get into details for quite obvious

57
00:02:09,209 --> 00:02:12,959
reasons and does not so as I say it

58
00:02:12,959 --> 00:02:13,890
wasn't the project

59
00:02:13,890 --> 00:02:18,360
posit that we made some study and just

60
00:02:18,360 --> 00:02:20,100
like to explain where the authors till

61
00:02:20,100 --> 00:02:20,940
he come from

62
00:02:20,940 --> 00:02:22,860
it was just like not security at all

63
00:02:22,860 --> 00:02:24,630
problem it was like we wanted to provide

64
00:02:24,630 --> 00:02:26,459
a VPN at the software level of the

65
00:02:26,459 --> 00:02:29,040
project and we get a very big problem

66
00:02:29,040 --> 00:02:31,860
which was the disability to say which

67
00:02:31,860 --> 00:02:33,030
application wants to connect to internet

68
00:02:33,030 --> 00:02:35,040
when one know that and you ad must

69
00:02:35,040 --> 00:02:37,410
connect to internet so based on this

70
00:02:37,410 --> 00:02:39,570
invisibility I would say it would be

71
00:02:39,570 --> 00:02:41,459
good to understand what we cannot say

72
00:02:41,459 --> 00:02:44,100
which application and then we deduce

73
00:02:44,100 --> 00:02:46,790
from the UID and all the security

74
00:02:46,790 --> 00:02:50,840
limitation of the algorithm and Android

75
00:02:50,840 --> 00:02:54,239
so that what was the objective so a very

76
00:02:54,239 --> 00:02:55,590
brief introduction about permission on

77
00:02:55,590 --> 00:02:58,019
Android so a very important thing is

78
00:02:58,019 --> 00:03:00,239
what you had before and after

79
00:03:00,239 --> 00:03:01,860
marshmallow because marshmallow we start

80
00:03:01,860 --> 00:03:03,269
will have what we call the dangerous

81
00:03:03,269 --> 00:03:06,630
permission which are now requesting to

82
00:03:06,630 --> 00:03:08,910
the user so you the user have to approve

83
00:03:08,910 --> 00:03:10,500
an application for the bed to access

84
00:03:10,500 --> 00:03:12,150
your contact to access your calendar

85
00:03:12,150 --> 00:03:14,340
before it was done at install so you had

86
00:03:14,340 --> 00:03:16,620
repaired in before which was when we

87
00:03:16,620 --> 00:03:18,810
said in Habs you have as all the

88
00:03:18,810 --> 00:03:21,150
permission is requested and now well

89
00:03:21,150 --> 00:03:24,360
that's not the case anymore so you have

90
00:03:24,360 --> 00:03:26,610
let's say three or four level of

91
00:03:26,610 --> 00:03:28,019
permissions you have the novel normal

92
00:03:28,019 --> 00:03:29,730
permission which are 29 installed so

93
00:03:29,730 --> 00:03:31,410
that still remain then you have

94
00:03:31,410 --> 00:03:32,910
dangerous permission which are granted

95
00:03:32,910 --> 00:03:35,280
unusual request only so normally it's

96
00:03:35,280 --> 00:03:36,690
impossible to get in dangerous

97
00:03:36,690 --> 00:03:39,090
permissions such as contact without the

98
00:03:39,090 --> 00:03:42,510
user consent but we'll see that and then

99
00:03:42,510 --> 00:03:44,850
you have signature permissions that are

100
00:03:44,850 --> 00:03:47,519
granted on a very specific conditions as

101
00:03:47,519 --> 00:03:49,140
a signature match so it's kind of a

102
00:03:49,140 --> 00:03:51,209
normal mission because granted uninstall

103
00:03:51,209 --> 00:03:52,920
but under conditions at the still nature

104
00:03:52,920 --> 00:03:55,200
of the application we request permission

105
00:03:55,200 --> 00:03:57,510
is the same as when we defined it so it

106
00:03:57,510 --> 00:04:02,700
files and perused on system level for

107
00:04:02,700 --> 00:04:05,519
people who already know hundred model

108
00:04:05,519 --> 00:04:08,220
and security so this talk will invoke

109
00:04:08,220 --> 00:04:11,489
the concept of shared user ID so it's

110
00:04:11,489 --> 00:04:12,840
already known I mean like it's not new

111
00:04:12,840 --> 00:04:17,220
so the concept is just to say that if I

112
00:04:17,220 --> 00:04:20,100
put here yeah you have this shared user

113
00:04:20,100 --> 00:04:22,229
ID which says that ok so this

114
00:04:22,229 --> 00:04:24,750
application we share the ID with other

115
00:04:24,750 --> 00:04:28,240
application that defines the same user

116
00:04:28,240 --> 00:04:30,860
so it's a very one on issue that

117
00:04:30,860 --> 00:04:32,690
sometimes for the system you could do

118
00:04:32,690 --> 00:04:34,550
the same so we not talk about this one

119
00:04:34,550 --> 00:04:36,410
an issue but we'll talk how we can use

120
00:04:36,410 --> 00:04:41,120
the shed user ID to make new attack or

121
00:04:41,120 --> 00:04:44,780
exploit new limitations we will not talk

122
00:04:44,780 --> 00:04:47,390
neither about the concept of one in wins

123
00:04:47,390 --> 00:04:48,890
meaning that before marshmallow and

124
00:04:48,890 --> 00:04:50,180
that's what we lost so stick to two

125
00:04:50,180 --> 00:04:51,470
marshmallow I said before marshmallow

126
00:04:51,470 --> 00:04:53,030
well you could say that if you define

127
00:04:53,030 --> 00:04:54,920
the permission first you own it if

128
00:04:54,920 --> 00:04:56,840
another application try to define it

129
00:04:56,840 --> 00:04:59,630
well she will not own it but she will

130
00:04:59,630 --> 00:05:00,830
not know it she would think that she

131
00:05:00,830 --> 00:05:02,990
knows she owns it so you had this kind

132
00:05:02,990 --> 00:05:04,400
of country that was ample if you were

133
00:05:04,400 --> 00:05:06,440
the first to put on the system and

134
00:05:06,440 --> 00:05:08,290
applications that require that define

135
00:05:08,290 --> 00:05:10,670
banking permission or whatever was

136
00:05:10,670 --> 00:05:12,650
banking application with still install

137
00:05:12,650 --> 00:05:15,260
and she will not own its own commission

138
00:05:15,260 --> 00:05:17,990
and the malware could basically grant

139
00:05:17,990 --> 00:05:19,130
instead the permission to access the

140
00:05:19,130 --> 00:05:22,310
banking services so that's been solved

141
00:05:22,310 --> 00:05:27,140
in in lollipop so as I said we'll talk

142
00:05:27,140 --> 00:05:31,490
about all of that but in a new way and a

143
00:05:31,490 --> 00:05:35,990
quick demo just to illustrate what I

144
00:05:35,990 --> 00:05:39,620
mean by limitation so what I will just

145
00:05:39,620 --> 00:05:41,630
do is I will pop up on the screen my

146
00:05:41,630 --> 00:05:44,690
Android phone so we just have to wait a

147
00:05:44,690 --> 00:05:47,000
few second and I hope you will take two

148
00:05:47,000 --> 00:05:54,130
second yes so if we are so what we'll do

149
00:05:55,720 --> 00:05:58,400
that's better so I will just install

150
00:05:58,400 --> 00:06:00,200
application and we'll see what the

151
00:06:00,200 --> 00:06:04,250
result is so I will start first in

152
00:06:04,250 --> 00:06:08,200
applications that request nothing

153
00:06:12,910 --> 00:06:16,420
so just two to precise this soft this

154
00:06:16,420 --> 00:06:19,360
phone is running on a nougat

155
00:06:19,360 --> 00:06:21,730
so it's follows the same rule as as

156
00:06:21,730 --> 00:06:26,410
marshmallow about the permission so just

157
00:06:26,410 --> 00:06:29,440
yes so just a very quick explanation

158
00:06:29,440 --> 00:06:31,630
about the screen so what we see that we

159
00:06:31,630 --> 00:06:33,940
can try to request a mission and at the

160
00:06:33,940 --> 00:06:36,250
top we have two things very important Z

161
00:06:36,250 --> 00:06:39,340
what's green on this on the screen this

162
00:06:39,340 --> 00:06:43,060
green zone says what we can say that the

163
00:06:43,060 --> 00:06:45,310
damage is the application app and if I

164
00:06:45,310 --> 00:06:47,500
click on check system permission I will

165
00:06:47,500 --> 00:06:48,880
say that this application basically

166
00:06:48,880 --> 00:06:53,230
requested nothing we cannot see because

167
00:06:53,230 --> 00:06:54,940
that's what it means the request nothing

168
00:06:54,940 --> 00:06:58,930
if we go here but its grace is not

169
00:06:58,930 --> 00:07:02,020
visible so I will just now install

170
00:07:02,020 --> 00:07:06,480
because because I can I will install

171
00:07:06,480 --> 00:07:15,070
other application so we installed to

172
00:07:15,070 --> 00:07:17,950
application I mean here again I will

173
00:07:17,950 --> 00:07:19,330
spin later that means that multiple

174
00:07:19,330 --> 00:07:20,500
applications just for the sake of the

175
00:07:20,500 --> 00:07:21,820
demo but you don't have to result that

176
00:07:21,820 --> 00:07:24,340
many we can just use that 189 still

177
00:07:24,340 --> 00:07:26,980
works so I will assign applications that

178
00:07:26,980 --> 00:07:32,470
request nothing ok I will install the

179
00:07:32,470 --> 00:07:37,920
second one that requires nothing neither

180
00:07:42,910 --> 00:07:45,760
and now this the trick is to update

181
00:07:45,760 --> 00:07:49,270
these applications so I will update the

182
00:07:49,270 --> 00:07:52,810
first application after see what you

183
00:07:52,810 --> 00:07:53,740
like so I would like

184
00:07:53,740 --> 00:07:55,450
so we'll update the first application as

185
00:07:55,450 --> 00:07:59,670
you can see it requests still nothing

186
00:08:03,060 --> 00:08:08,710
and I will open it so what you can see

187
00:08:08,710 --> 00:08:10,750
here is that it requests Internet but as

188
00:08:10,750 --> 00:08:12,910
a normal permission so it's granted

189
00:08:12,910 --> 00:08:15,340
uninstall and define its own permission

190
00:08:15,340 --> 00:08:16,660
because we can do that with differents

191
00:08:16,660 --> 00:08:21,220
permission called deadly activity 1 so I

192
00:08:21,220 --> 00:08:22,990
will now do the same thing with some

193
00:08:22,990 --> 00:08:24,610
application I will install it to the

194
00:08:24,610 --> 00:08:34,210
update request in nothing and I will

195
00:08:34,210 --> 00:08:34,599
open it

196
00:08:34,599 --> 00:08:48,850
so what we can see is that she okay so

197
00:08:48,850 --> 00:08:50,440
basically does the same thing but I

198
00:08:50,440 --> 00:08:52,900
don't know why the screen is locked like

199
00:08:52,900 --> 00:08:59,250
for the demo I will restart the screen

200
00:08:59,250 --> 00:09:01,630
so basically this app does the same

201
00:09:01,630 --> 00:09:03,070
thing just define its own permission

202
00:09:03,070 --> 00:09:06,300
called every activity to

203
00:09:11,300 --> 00:09:14,830
okay so I just closed all the

204
00:09:14,830 --> 00:09:17,060
application and now I will open the

205
00:09:17,060 --> 00:09:20,360
first one so which is the applications

206
00:09:20,360 --> 00:09:23,120
that define nothing requesting nothing

207
00:09:23,120 --> 00:09:25,610
okay so as we see we open it again it's

208
00:09:25,610 --> 00:09:27,530
on the on the green zone we have nothing

209
00:09:27,530 --> 00:09:29,450
displayed if we try to see the

210
00:09:29,450 --> 00:09:31,130
permission of the system layer listed

211
00:09:31,130 --> 00:09:33,020
grey meaning well it has nothing called

212
00:09:33,020 --> 00:09:35,450
eagle wanting nothing so now what we

213
00:09:35,450 --> 00:09:37,550
will do is that we try to access user

214
00:09:37,550 --> 00:09:39,910
contact

215
00:09:42,070 --> 00:09:44,360
normally this would have crashed because

216
00:09:44,360 --> 00:09:46,580
we don't define the permission and we do

217
00:09:46,580 --> 00:09:48,680
not request it as the user so two reason

218
00:09:48,680 --> 00:09:50,780
to fail well we see that we can access

219
00:09:50,780 --> 00:09:53,630
contact MCI's we have one contact Lisa

220
00:09:53,630 --> 00:09:55,520
demo phone I will do something with

221
00:09:55,520 --> 00:09:57,980
calendar what is the same thing we did

222
00:09:57,980 --> 00:09:59,150
not have the we didn't defines a

223
00:09:59,150 --> 00:10:01,850
permission on the manifest of the

224
00:10:01,850 --> 00:10:03,980
application we do not has user to

225
00:10:03,980 --> 00:10:06,020
approve to give us access to the

226
00:10:06,020 --> 00:10:08,870
calendar the system say is that we don't

227
00:10:08,870 --> 00:10:10,610
request anything well granted nothing

228
00:10:10,610 --> 00:10:12,950
the API level which I will explain also

229
00:10:12,950 --> 00:10:15,200
later says nothing well we can access

230
00:10:15,200 --> 00:10:18,230
everything so the goal of these

231
00:10:18,230 --> 00:10:21,920
plantations to say how is that possible

232
00:10:21,920 --> 00:10:27,069
in marshmallow oneplus to have that I

233
00:10:28,450 --> 00:10:30,320
mean I if someone wanted me to

234
00:10:30,320 --> 00:10:31,940
re-explain because seems very important

235
00:10:31,940 --> 00:10:32,720
to understand like what's the

236
00:10:32,720 --> 00:10:34,670
implication of that so it's clear for

237
00:10:34,670 --> 00:10:36,100
everyone

238
00:10:36,100 --> 00:10:41,360
self question can still later so

239
00:10:41,360 --> 00:10:44,870
modeling of the permission so if we talk

240
00:10:44,870 --> 00:10:46,850
first about like I was saying I was to

241
00:10:46,850 --> 00:10:48,470
talk about user privacy so once you very

242
00:10:48,470 --> 00:10:49,730
important this resource is I mean like

243
00:10:49,730 --> 00:10:54,110
we protect resources so on Linux because

244
00:10:54,110 --> 00:10:55,880
Android is based on Linux we have two

245
00:10:55,880 --> 00:10:58,820
concepts you ID and GID on androids are

246
00:10:58,820 --> 00:11:00,770
set by the Z code which folk and

247
00:11:00,770 --> 00:11:02,390
applications who create the process so

248
00:11:02,390 --> 00:11:03,530
an application can decrees from

249
00:11:03,530 --> 00:11:05,840
processes a manager could do Co that

250
00:11:05,840 --> 00:11:08,450
does that and it does two things when

251
00:11:08,450 --> 00:11:10,040
you instant application is UID is

252
00:11:10,040 --> 00:11:11,690
defined set and cannot be changed and

253
00:11:11,690 --> 00:11:13,550
when you launch the application while

254
00:11:13,550 --> 00:11:15,410
you got granted group IDs based on the

255
00:11:15,410 --> 00:11:18,310
permission tips has

256
00:11:18,340 --> 00:11:21,170
generally UID is made for protecting

257
00:11:21,170 --> 00:11:23,390
files so the application directory is

258
00:11:23,390 --> 00:11:25,400
protected on the user ID of the

259
00:11:25,400 --> 00:11:28,250
application and the external directory

260
00:11:28,250 --> 00:11:31,220
is protected and the user ID and the

261
00:11:31,220 --> 00:11:36,350
group ID call SD card rewrite when talk

262
00:11:36,350 --> 00:11:38,630
about GID so for resources that are not

263
00:11:38,630 --> 00:11:42,260
files you have the for the party of the

264
00:11:42,260 --> 00:11:45,080
protection for the network access so

265
00:11:45,080 --> 00:11:47,120
what we have in and risk of the paranoid

266
00:11:47,120 --> 00:11:49,220
networking which states all the codes

267
00:11:49,220 --> 00:11:52,220
that you have to to have the good groups

268
00:11:52,220 --> 00:11:56,360
and on the software level API well you

269
00:11:56,360 --> 00:11:58,250
have what we call server itself is based

270
00:11:58,250 --> 00:12:00,110
a PC preconditioning which means that if

271
00:12:00,110 --> 00:12:01,580
you want to make an EPC call to a

272
00:12:01,580 --> 00:12:03,680
service it will check that you are

273
00:12:03,680 --> 00:12:05,000
granted the correct groups all the

274
00:12:05,000 --> 00:12:09,230
correct permissions so if we summarize

275
00:12:09,230 --> 00:12:11,960
very quickly what does that means is

276
00:12:11,960 --> 00:12:13,820
that here we have the local file system

277
00:12:13,820 --> 00:12:17,690
that is protected by UID level here you

278
00:12:17,690 --> 00:12:19,490
have what we call the services that are

279
00:12:19,490 --> 00:12:21,110
called three pcs that can access

280
00:12:21,110 --> 00:12:24,410
resources through permission

281
00:12:24,410 --> 00:12:26,090
conditioning so that's implemented by

282
00:12:26,090 --> 00:12:29,480
the services all by group so that's

283
00:12:29,480 --> 00:12:35,150
implemented at the kernel level so that

284
00:12:35,150 --> 00:12:37,820
was for how resources are let's say

285
00:12:37,820 --> 00:12:41,840
protected in a very general way so now

286
00:12:41,840 --> 00:12:43,430
the question is like okay so we have

287
00:12:43,430 --> 00:12:45,800
permission that we defines manifest well

288
00:12:45,800 --> 00:12:47,540
what does that means how does that works

289
00:12:47,540 --> 00:12:50,210
so when you have an application defined

290
00:12:50,210 --> 00:12:52,280
we call permission I mean you define

291
00:12:52,280 --> 00:12:53,540
that you wants to use permission by the

292
00:12:53,540 --> 00:12:56,210
type called permission uses that says

293
00:12:56,210 --> 00:12:57,890
that you want to use as a system

294
00:12:57,890 --> 00:13:00,380
permissions or also app permissions that

295
00:13:00,380 --> 00:13:03,710
are already there you can also define

296
00:13:03,710 --> 00:13:05,810
your own permissions as I shouldn't say

297
00:13:05,810 --> 00:13:08,120
demo and you can put them in whatever

298
00:13:08,120 --> 00:13:09,620
you want wherever they want the way you

299
00:13:09,620 --> 00:13:12,730
want so we are very free on that

300
00:13:12,730 --> 00:13:14,960
so when you assign an application what

301
00:13:14,960 --> 00:13:16,370
happened is that based on the condition

302
00:13:16,370 --> 00:13:18,200
of the manifest the app will be set to

303
00:13:18,200 --> 00:13:20,210
you ID so that's why we call about the

304
00:13:20,210 --> 00:13:22,730
security of the local file system you

305
00:13:22,730 --> 00:13:24,920
will allow custom permissions that are

306
00:13:24,920 --> 00:13:27,400
normal I mean that are yes normal and

307
00:13:27,400 --> 00:13:30,020
you will stock all of that in a rural

308
00:13:30,020 --> 00:13:31,430
written way on what we could

309
00:13:31,430 --> 00:13:34,550
package with anesthetics amazed at

310
00:13:34,550 --> 00:13:36,770
defined all the application installed on

311
00:13:36,770 --> 00:13:39,850
the software I mean on the young device

312
00:13:39,850 --> 00:13:42,230
when you are the system permissions are

313
00:13:42,230 --> 00:13:44,300
predefined so it will depend on the

314
00:13:44,300 --> 00:13:47,030
manufacturer if we just stick to the on

315
00:13:47,030 --> 00:13:48,800
on read open source project you have

316
00:13:48,800 --> 00:13:51,590
main permissions such as internet that

317
00:13:51,590 --> 00:13:53,720
are associated to group ID so all of

318
00:13:53,720 --> 00:13:56,930
that is predefined when you have your

319
00:13:56,930 --> 00:14:00,170
device shipped to you and basically what

320
00:14:00,170 --> 00:14:01,160
happens that when you launch an

321
00:14:01,160 --> 00:14:04,160
application well based on the definition

322
00:14:04,160 --> 00:14:05,420
you had that installed you will get a

323
00:14:05,420 --> 00:14:07,970
UID and then the ziget will use all of

324
00:14:07,970 --> 00:14:11,540
that together to grant the G IDs and

325
00:14:11,540 --> 00:14:15,230
permissions so basically that's the

326
00:14:15,230 --> 00:14:16,970
model and what we can see here is that

327
00:14:16,970 --> 00:14:18,710
we start with something complicated is

328
00:14:18,710 --> 00:14:20,000
that it would be easy if we have one

329
00:14:20,000 --> 00:14:22,790
application that use system permission

330
00:14:22,790 --> 00:14:24,680
that is grantee that process well

331
00:14:24,680 --> 00:14:26,630
because of the shared user ID you can

332
00:14:26,630 --> 00:14:30,370
have multiple applications that somehow

333
00:14:30,370 --> 00:14:34,550
interoperate together and use system

334
00:14:34,550 --> 00:14:35,750
permission together because they share

335
00:14:35,750 --> 00:14:38,510
the same user ID and are granted

336
00:14:38,510 --> 00:14:40,220
permission so here's ought to be much

337
00:14:40,220 --> 00:14:41,630
more complex that's a simple application

338
00:14:41,630 --> 00:14:44,480
at install or applause guaranteed

339
00:14:44,480 --> 00:14:46,070
something like it's like you have to

340
00:14:46,070 --> 00:14:47,990
first work on the in terrible inter mean

341
00:14:47,990 --> 00:14:49,310
on the cooperation between the

342
00:14:49,310 --> 00:14:51,520
definition of multiple applications and

343
00:14:51,520 --> 00:14:55,270
we will see that's not that easy

344
00:14:55,270 --> 00:14:57,110
another important things in the world

345
00:14:57,110 --> 00:14:59,360
will venerability will come from is that

346
00:14:59,360 --> 00:15:01,460
when we lost the system everything start

347
00:15:01,460 --> 00:15:03,800
to be built up so we have what we call

348
00:15:03,800 --> 00:15:05,090
the package manager service has just

349
00:15:05,090 --> 00:15:09,590
load everything into memory and that up

350
00:15:09,590 --> 00:15:11,090
loans were basically use what is

351
00:15:11,090 --> 00:15:14,590
predefined the memory to assign to the

352
00:15:14,590 --> 00:15:17,720
process so obviously if you preload on

353
00:15:17,720 --> 00:15:19,610
memory everything at a system load for

354
00:15:19,610 --> 00:15:21,650
performance reasons well you have to be

355
00:15:21,650 --> 00:15:23,630
safe about how you handle the evolution

356
00:15:23,630 --> 00:15:25,340
of the model meaning when you update an

357
00:15:25,340 --> 00:15:26,900
application when you remove an

358
00:15:26,900 --> 00:15:29,240
application you have to be sure that the

359
00:15:29,240 --> 00:15:31,970
package manager service update the model

360
00:15:31,970 --> 00:15:35,690
memory accordingly and one of the

361
00:15:35,690 --> 00:15:37,670
question we we have there is that is its

362
00:15:37,670 --> 00:15:40,130
and meaningless compared to reboot an

363
00:15:40,130 --> 00:15:42,770
epoch device or compared to instant and

364
00:15:42,770 --> 00:15:45,059
application with a new version so with

365
00:15:45,059 --> 00:15:48,299
the update pass is it the same thing as

366
00:15:48,299 --> 00:15:50,609
keeping your device powered up and

367
00:15:50,609 --> 00:15:53,579
updating an application as we'll see the

368
00:15:53,579 --> 00:15:57,059
answer is no another thing very

369
00:15:57,059 --> 00:15:59,159
important is that as said before and

370
00:15:59,159 --> 00:16:01,319
after marshmallow I mean like for

371
00:16:01,319 --> 00:16:02,819
everybody would build software you know

372
00:16:02,819 --> 00:16:03,899
that you have a very problematic

373
00:16:03,899 --> 00:16:06,209
solution when you make a very big update

374
00:16:06,209 --> 00:16:08,039
on the software definition which we call

375
00:16:08,039 --> 00:16:10,229
that word compatibility which means that

376
00:16:10,229 --> 00:16:12,929
you have to be able to still make all

377
00:16:12,929 --> 00:16:14,639
the application works with the old

378
00:16:14,639 --> 00:16:17,999
security model wise new applications

379
00:16:17,999 --> 00:16:20,369
that relies on a marshmallow API well

380
00:16:20,369 --> 00:16:22,619
are not granted by default permissions

381
00:16:22,619 --> 00:16:26,189
that are dangerous and this means a lot

382
00:16:26,189 --> 00:16:28,049
of implications like you have to update

383
00:16:28,049 --> 00:16:30,119
the algorithm correctly when you display

384
00:16:30,119 --> 00:16:31,889
to the user you have to take it why

385
00:16:31,889 --> 00:16:33,299
can't ease this application old

386
00:16:33,299 --> 00:16:35,519
application or new application and the

387
00:16:35,519 --> 00:16:38,039
question is like what happened with when

388
00:16:38,039 --> 00:16:41,069
with a single user ID we have two

389
00:16:41,069 --> 00:16:42,659
applications that do not follow the same

390
00:16:42,659 --> 00:16:45,269
API level you have an application that

391
00:16:45,269 --> 00:16:46,859
is supposed to be granted everything by

392
00:16:46,859 --> 00:16:48,479
default and an application that's

393
00:16:48,479 --> 00:16:50,009
supposed to be granted only normal

394
00:16:50,009 --> 00:16:52,619
permission by default but they are all

395
00:16:52,619 --> 00:16:54,209
the same user ID so they are going to

396
00:16:54,209 --> 00:17:00,269
the same permission so there's a

397
00:17:00,269 --> 00:17:02,999
question here again how do we enter that

398
00:17:02,999 --> 00:17:04,618
I mean how was the vision of Android

399
00:17:04,618 --> 00:17:07,980
compared to a strong security which is

400
00:17:07,980 --> 00:17:09,959
you have to as user and a weaker one

401
00:17:09,959 --> 00:17:11,099
which is everything is going to the

402
00:17:11,099 --> 00:17:14,898
uninstall and one of the interesting

403
00:17:14,898 --> 00:17:17,249
feedback we get from Google and I will

404
00:17:17,249 --> 00:17:19,259
let you judge is that they say well no

405
00:17:19,259 --> 00:17:21,449
we chose and it is not sent but this is

406
00:17:21,449 --> 00:17:28,378
Luke yes but we never promised I will

407
00:17:28,378 --> 00:17:31,139
explain that so that's a very broad

408
00:17:31,139 --> 00:17:33,749
model here again is that so when you

409
00:17:33,749 --> 00:17:35,850
launch the system everything is granted

410
00:17:35,850 --> 00:17:38,940
you have the memory and the user action

411
00:17:38,940 --> 00:17:40,889
instead updates or grant permissions

412
00:17:40,889 --> 00:17:43,830
impact another service and they all of

413
00:17:43,830 --> 00:17:49,289
that cooperate together finally let's

414
00:17:49,289 --> 00:17:50,999
part of the models and we'll go more

415
00:17:50,999 --> 00:17:54,000
deeper into the venerable 'ti mutation

416
00:17:54,000 --> 00:17:56,399
explanation okay so we know how is

417
00:17:56,399 --> 00:17:58,620
defined we know how its computed

418
00:17:58,620 --> 00:18:00,539
whether the questions how is displayed

419
00:18:00,539 --> 00:18:03,480
to the user so we have what we call the

420
00:18:03,480 --> 00:18:06,720
system info so basically it display

421
00:18:06,720 --> 00:18:08,429
package permission based on package

422
00:18:08,429 --> 00:18:14,309
information okay and there's a very

423
00:18:14,309 --> 00:18:15,809
important thing is that is display

424
00:18:15,809 --> 00:18:18,390
status while not from the package in

425
00:18:18,390 --> 00:18:19,529
form but directly from the system

426
00:18:19,529 --> 00:18:21,510
because the system and possibly access

427
00:18:21,510 --> 00:18:26,070
to the system allocating memory you have

428
00:18:26,070 --> 00:18:28,950
another level of display which is used

429
00:18:28,950 --> 00:18:31,140
by any security application which is

430
00:18:31,140 --> 00:18:33,330
what we can call the API of the package

431
00:18:33,330 --> 00:18:35,610
manager with display pack information

432
00:18:35,610 --> 00:18:37,919
here the same well as above so Basil's a

433
00:18:37,919 --> 00:18:41,490
package info but as this is an ApS that

434
00:18:41,490 --> 00:18:44,730
is run at the application level it

435
00:18:44,730 --> 00:18:46,320
doesn't have access to the system memory

436
00:18:46,320 --> 00:18:49,950
so it has to use another way to access

437
00:18:49,950 --> 00:18:51,390
the permission so it's not when the

438
00:18:51,390 --> 00:18:54,960
person the same thing here's the very

439
00:18:54,960 --> 00:18:57,090
big model I mean I will explain step by

440
00:18:57,090 --> 00:19:00,480
step so here we have the memory the

441
00:19:00,480 --> 00:19:03,360
definition here we have the display here

442
00:19:03,360 --> 00:19:05,490
we have world at impact and here we have

443
00:19:05,490 --> 00:19:07,710
some kind of the memory logic so we see

444
00:19:07,710 --> 00:19:11,549
this not that easy is good because it's

445
00:19:11,549 --> 00:19:13,350
not easy which means it's likely that

446
00:19:13,350 --> 00:19:17,990
you have things to do on that so subject

447
00:19:17,990 --> 00:19:20,580
that's basically the limitation I will I

448
00:19:20,580 --> 00:19:24,059
would present I will just go back to

449
00:19:24,059 --> 00:19:26,220
that after I'd basically on the system

450
00:19:26,220 --> 00:19:28,409
on the model explained I try to put some

451
00:19:28,409 --> 00:19:30,120
colors to say the world is good way

452
00:19:30,120 --> 00:19:32,669
isn't that good well it's debatable so

453
00:19:32,669 --> 00:19:37,370
Green is good pink is not ripping here

454
00:19:37,370 --> 00:19:41,820
pink is debatable and red is bad so we

455
00:19:41,820 --> 00:19:43,559
see that we have quite a lot of places

456
00:19:43,559 --> 00:19:44,970
and a lot of things that we can play

457
00:19:44,970 --> 00:19:50,970
with and since interesting so issues we

458
00:19:50,970 --> 00:19:53,100
can I will explain for issues how can

459
00:19:53,100 --> 00:19:54,570
you hide permissions from Android

460
00:19:54,570 --> 00:19:56,309
meaning like you you care granting

461
00:19:56,309 --> 00:19:57,750
permission but you don't display that

462
00:19:57,750 --> 00:20:00,690
because it's cool how can you hide

463
00:20:00,690 --> 00:20:02,789
states how can you say that the

464
00:20:02,789 --> 00:20:04,470
permission is not granted it is granted

465
00:20:04,470 --> 00:20:06,419
nobody knows nobody's know that you have

466
00:20:06,419 --> 00:20:08,039
contact you see that the application

467
00:20:08,039 --> 00:20:09,090
request is contact

468
00:20:09,090 --> 00:20:11,370
it says not granted yet is granted

469
00:20:11,370 --> 00:20:15,000
I mean like why is that possible how to

470
00:20:15,000 --> 00:20:16,680
keep unrequested permission

471
00:20:16,680 --> 00:20:18,120
you didn't request permission you are

472
00:20:18,120 --> 00:20:19,740
granted by another application you

473
00:20:19,740 --> 00:20:21,690
remove the other application while you

474
00:20:21,690 --> 00:20:24,180
still have it well you can do that too

475
00:20:24,180 --> 00:20:27,060
and I think the last part which I will s

476
00:20:27,060 --> 00:20:28,560
explain because it's still not pass by

477
00:20:28,560 --> 00:20:31,220
Google is that how you can auto grant

478
00:20:31,220 --> 00:20:33,660
dangerous permissions as contact so

479
00:20:33,660 --> 00:20:34,920
basically that's what I showed in the

480
00:20:34,920 --> 00:20:39,090
demo agian so first how can you hide

481
00:20:39,090 --> 00:20:42,300
omission from Android as I said before

482
00:20:42,300 --> 00:20:44,270
when you go to the system information

483
00:20:44,270 --> 00:20:46,530
you display the permissions that are

484
00:20:46,530 --> 00:20:48,900
defined on the package info

485
00:20:48,900 --> 00:20:50,580
meaning you put on your manifest that

486
00:20:50,580 --> 00:20:52,860
you want to access contact even if they

487
00:20:52,860 --> 00:20:54,570
are granting something else it will

488
00:20:54,570 --> 00:20:57,600
never be shown because the display

489
00:20:57,600 --> 00:20:59,400
relies on what you have AMOLED on what

490
00:20:59,400 --> 00:21:01,800
you define so the thing is how you can

491
00:21:01,800 --> 00:21:04,050
make the system go into something that

492
00:21:04,050 --> 00:21:05,400
you did not request and that would be

493
00:21:05,400 --> 00:21:09,750
never shown to the user at any level I

494
00:21:09,750 --> 00:21:12,780
put some source code very quickly and

495
00:21:12,780 --> 00:21:15,030
and basically what does it say is that

496
00:21:15,030 --> 00:21:16,680
on the Left we are what we have

497
00:21:16,680 --> 00:21:18,450
marshmallow and on the right where what

498
00:21:18,450 --> 00:21:19,860
one KitKat I mean kicad post-money

499
00:21:19,860 --> 00:21:21,840
displayed everything not marshmallow and

500
00:21:21,840 --> 00:21:24,270
the big issue is that on marshmallow we

501
00:21:24,270 --> 00:21:29,820
stick to just be sure we stick to the

502
00:21:29,820 --> 00:21:32,880
package definition on kicad we say ok so

503
00:21:32,880 --> 00:21:34,830
we have one definition we may have a

504
00:21:34,830 --> 00:21:36,900
said user ID let's get all of the

505
00:21:36,900 --> 00:21:38,580
package and sell share the same user ID

506
00:21:38,580 --> 00:21:41,520
then federated together and display when

507
00:21:41,520 --> 00:21:43,200
marshmallows is decided well no we don't

508
00:21:43,200 --> 00:21:44,550
want to do that anymore we just want to

509
00:21:44,550 --> 00:21:47,160
display what we asked well it's me that

510
00:21:47,160 --> 00:21:49,260
if you use a said ID concept another

511
00:21:49,260 --> 00:21:52,080
application we had for contact by by

512
00:21:52,080 --> 00:21:53,940
user IDs that is shared you will access

513
00:21:53,940 --> 00:21:55,680
contact too but it will never be

514
00:21:55,680 --> 00:21:57,210
displayed because the decision to stick

515
00:21:57,210 --> 00:22:03,300
to the package definition so as I said

516
00:22:03,300 --> 00:22:04,770
in the demo basically just have to sell

517
00:22:04,770 --> 00:22:06,960
to application and say we shared

518
00:22:06,960 --> 00:22:10,860
everything one of the feedback from

519
00:22:10,860 --> 00:22:12,060
Google from that is that assay is not a

520
00:22:12,060 --> 00:22:14,270
security issue in and intended behavior

521
00:22:14,270 --> 00:22:16,350
because everybody should know that you

522
00:22:16,350 --> 00:22:21,050
can share permission across application

523
00:22:21,290 --> 00:22:24,330
I promise I will not make any comments

524
00:22:24,330 --> 00:22:24,909
just let

525
00:22:24,909 --> 00:22:29,379
you make your own decision so another

526
00:22:29,379 --> 00:22:31,210
interesting thing is how can you make an

527
00:22:31,210 --> 00:22:34,149
application flag does not enabled yet

528
00:22:34,149 --> 00:22:37,840
enabled so here's a little more complex

529
00:22:37,840 --> 00:22:40,029
because because we talked about the code

530
00:22:40,029 --> 00:22:42,099
compatibility with up up concept in

531
00:22:42,099 --> 00:22:46,989
KitKat meaning that here when you revoke

532
00:22:46,989 --> 00:22:49,960
a permission let's try to start to deal

533
00:22:49,960 --> 00:22:54,729
with so is it a new application is it an

534
00:22:54,729 --> 00:22:56,289
old application if it's another

535
00:22:56,289 --> 00:22:57,729
application do you have a problem you

536
00:22:57,729 --> 00:23:00,580
see the logic is very complicated and

537
00:23:00,580 --> 00:23:03,070
what we have here is a basically and

538
00:23:03,070 --> 00:23:06,849
this very specific case which is like if

539
00:23:06,849 --> 00:23:10,299
you are not a new application - you

540
00:23:10,299 --> 00:23:13,269
follow the old model of KitKat well you

541
00:23:13,269 --> 00:23:16,359
would try to update the app up cammy

542
00:23:16,359 --> 00:23:18,729
that was before but basically just just

543
00:23:18,729 --> 00:23:21,249
didn't say that we will not grant the

544
00:23:21,249 --> 00:23:23,139
permission anymore so basically the

545
00:23:23,139 --> 00:23:27,549
permission still here still granted but

546
00:23:27,549 --> 00:23:29,499
only the app up flag which were before

547
00:23:29,499 --> 00:23:35,470
is set at as denied okay so what does it

548
00:23:35,470 --> 00:23:38,320
means I mean it's not that easy to

549
00:23:38,320 --> 00:23:40,779
understand the consequences because it's

550
00:23:40,779 --> 00:23:42,309
kind of weird behavior in the end

551
00:23:42,309 --> 00:23:44,259
because basically what you can do is

552
00:23:44,259 --> 00:23:45,460
that you can start you haven't made

553
00:23:45,460 --> 00:23:47,200
 cat vomit for marshmallow and an

554
00:23:47,200 --> 00:23:50,440
Engram can get from KitKat and what will

555
00:23:50,440 --> 00:23:52,989
happen is that here we have a lot of

556
00:23:52,989 --> 00:23:55,090
very weird results if you stick to

557
00:23:55,090 --> 00:23:57,609
compact well the application on

558
00:23:57,609 --> 00:23:59,320
marshmallow we say that it has contact

559
00:23:59,320 --> 00:24:00,999
access but when you try to access

560
00:24:00,999 --> 00:24:03,249
contact if we say zero no matter how

561
00:24:03,249 --> 00:24:05,979
many you have if you try to access from

562
00:24:05,979 --> 00:24:08,169
the KitKat application to assess denied

563
00:24:08,169 --> 00:24:10,029
and it with the zero so that's normal

564
00:24:10,029 --> 00:24:13,029
behavior but the interesting stuff that

565
00:24:13,029 --> 00:24:15,159
we in fact discovered yesterday which is

566
00:24:15,159 --> 00:24:16,869
what happened if it fat is not a system

567
00:24:16,869 --> 00:24:18,909
permission but if it's not a system

568
00:24:18,909 --> 00:24:21,429
permission you have much more underneath

569
00:24:21,429 --> 00:24:23,679
logic of the app app concept which says

570
00:24:23,679 --> 00:24:25,119
that basically they don't have a pop

571
00:24:25,119 --> 00:24:27,669
mapping so they will do nothing so we'll

572
00:24:27,669 --> 00:24:31,269
say and grant I will still be here so

573
00:24:31,269 --> 00:24:33,009
which method in fact the system will

574
00:24:33,009 --> 00:24:35,019
believe is not granted we're still going

575
00:24:35,019 --> 00:24:38,820
in and and you cannot prevent that

576
00:24:40,260 --> 00:24:43,180
okay so another another issue which is

577
00:24:43,180 --> 00:24:45,640
how to keep an unrequested permission

578
00:24:45,640 --> 00:24:48,430
even after the permission on application

579
00:24:48,430 --> 00:24:49,720
I mean the time into the application we

580
00:24:49,720 --> 00:24:52,150
define it is removed so here again we

581
00:24:52,150 --> 00:24:53,740
have what happened if we have two

582
00:24:53,740 --> 00:24:57,310
application on marshmallow here we don't

583
00:24:57,310 --> 00:24:59,980
care about the api compatibility that

584
00:24:59,980 --> 00:25:03,160
says that they want to access internet

585
00:25:03,160 --> 00:25:08,140
bluetooth and contact in canada so here

586
00:25:08,140 --> 00:25:09,630
I put the suit concern I will explain

587
00:25:09,630 --> 00:25:12,760
the case that here we have an

588
00:25:12,760 --> 00:25:15,250
interesting things which says so this

589
00:25:15,250 --> 00:25:16,930
routine is called that's called the um

590
00:25:16,930 --> 00:25:19,480
the update shared user permission so

591
00:25:19,480 --> 00:25:21,430
basically they have no that is shared

592
00:25:21,430 --> 00:25:25,540
emissions we try to correctly remove the

593
00:25:25,540 --> 00:25:29,230
permission from other applications that

594
00:25:29,230 --> 00:25:31,690
share the same user ID and we have

595
00:25:31,690 --> 00:25:32,890
something very interesting when you look

596
00:25:32,890 --> 00:25:35,020
here it's a very big loop so basically

597
00:25:35,020 --> 00:25:37,000
we try to get all the permissions at the

598
00:25:37,000 --> 00:25:38,590
application that is going to be removed

599
00:25:38,590 --> 00:25:41,200
requested and we will see do other

600
00:25:41,200 --> 00:25:44,980
application required it or not if we do

601
00:25:44,980 --> 00:25:48,250
not required well normally we'll remove

602
00:25:48,250 --> 00:25:52,510
the permission from the user ID set but

603
00:25:52,510 --> 00:25:54,190
we have one issue which is what happened

604
00:25:54,190 --> 00:25:56,950
when we have group ID for example when

605
00:25:56,950 --> 00:25:58,840
you access when you require internet or

606
00:25:58,840 --> 00:26:00,820
you will call your Bluetooth you have

607
00:26:00,820 --> 00:26:03,730
group IDs at the process level and when

608
00:26:03,730 --> 00:26:05,740
you do not request internet anymore when

609
00:26:05,740 --> 00:26:07,930
nobody requests internet the group ID

610
00:26:07,930 --> 00:26:09,880
has to be removed from the process also

611
00:26:09,880 --> 00:26:12,310
wisemen you can directly physically

612
00:26:12,310 --> 00:26:15,550
access by the can at the kernel level

613
00:26:15,550 --> 00:26:17,260
because it would be granted the correct

614
00:26:17,260 --> 00:26:20,770
groups so what they say I mean the logic

615
00:26:20,770 --> 00:26:22,690
here is good does the implementation is

616
00:26:22,690 --> 00:26:25,540
not it says okay so if you do not access

617
00:26:25,540 --> 00:26:28,300
a permission that requires a group well

618
00:26:28,300 --> 00:26:32,230
exit and then grant the group what is

619
00:26:32,230 --> 00:26:35,380
good is the only issue is that you

620
00:26:35,380 --> 00:26:37,480
should not exist exit like you should

621
00:26:37,480 --> 00:26:39,460
flag the fact that you need to reboot

622
00:26:39,460 --> 00:26:41,740
the application all the application of

623
00:26:41,740 --> 00:26:44,230
the scheduler ID after you removed all

624
00:26:44,230 --> 00:26:45,580
the permission to have the group ID

625
00:26:45,580 --> 00:26:47,800
correctly mapped but if you stopped as a

626
00:26:47,800 --> 00:26:49,930
middle of the loop well what will happen

627
00:26:49,930 --> 00:26:51,049
is that the first

628
00:26:51,049 --> 00:26:55,070
you see a permission that has to that

629
00:26:55,070 --> 00:26:57,049
request a reboot of all the application

630
00:26:57,049 --> 00:26:59,720
because of that well it stops here all

631
00:26:59,720 --> 00:27:02,029
the residues there's a permission that

632
00:27:02,029 --> 00:27:05,860
should have been removed are still here

633
00:27:05,860 --> 00:27:09,860
so an example so I said here instead of

634
00:27:09,860 --> 00:27:11,330
kid hat applications that way we don't

635
00:27:11,330 --> 00:27:12,590
have to know anything with certificate

636
00:27:12,590 --> 00:27:13,850
application everything is granted by

637
00:27:13,850 --> 00:27:15,679
default so you has four blue tools

638
00:27:15,679 --> 00:27:18,559
internet contact calendar and then you

639
00:27:18,559 --> 00:27:19,940
sell another application that I asked

640
00:27:19,940 --> 00:27:22,940
nothing and you remove KitKat and

641
00:27:22,940 --> 00:27:25,100
what will happen is depending on how the

642
00:27:25,100 --> 00:27:27,049
other you define so if you instead

643
00:27:27,049 --> 00:27:29,899
define blue tools first well you will

644
00:27:29,899 --> 00:27:32,809
use the application package manager will

645
00:27:32,809 --> 00:27:34,789
see that boot was not requested anymore

646
00:27:34,789 --> 00:27:37,999
it will stop it will remove I mean after

647
00:27:37,999 --> 00:27:39,830
I've been having removed the brutus

648
00:27:39,830 --> 00:27:40,820
permission if we stop

649
00:27:40,820 --> 00:27:42,679
if the has causes the permission of the

650
00:27:42,679 --> 00:27:44,779
other sorry applications of processes

651
00:27:44,779 --> 00:27:46,639
that shared the same user ID to restart

652
00:27:46,639 --> 00:27:48,980
but all the other permission such as

653
00:27:48,980 --> 00:27:50,629
internet contact and calendar would be

654
00:27:50,629 --> 00:27:52,909
kept which means as the new the other

655
00:27:52,909 --> 00:27:55,190
application we have nothing now o is

656
00:27:55,190 --> 00:27:56,899
capable of sending contact and Kannada

657
00:27:56,899 --> 00:27:59,570
to Internet while normally you should

658
00:27:59,570 --> 00:28:03,139
not have at all so that one isn't a

659
00:28:03,139 --> 00:28:06,859
review and the next part which I said I

660
00:28:06,859 --> 00:28:08,330
will not go into details because I think

661
00:28:08,330 --> 00:28:11,359
it's too much sensitive because is very

662
00:28:11,359 --> 00:28:14,269
easy to do which deals with the concept

663
00:28:14,269 --> 00:28:18,499
of how the update of a permission

664
00:28:18,499 --> 00:28:22,279
definition is handled on on xeandra

665
00:28:22,279 --> 00:28:24,529
level meaning what's the difference

666
00:28:24,529 --> 00:28:26,119
between grunting an application a

667
00:28:26,119 --> 00:28:27,230
granting you permission to an

668
00:28:27,230 --> 00:28:29,570
application and then updating the

669
00:28:29,570 --> 00:28:30,999
definition of this permission

670
00:28:30,999 --> 00:28:34,009
compared to grant the permission with

671
00:28:34,009 --> 00:28:35,889
the latest version of his definition

672
00:28:35,889 --> 00:28:38,929
it's not the same unfortunately and it's

673
00:28:38,929 --> 00:28:40,580
me that if you define correctly the good

674
00:28:40,580 --> 00:28:43,039
permission I mean if you find a good way

675
00:28:43,039 --> 00:28:45,350
the permission it will not be requested

676
00:28:45,350 --> 00:28:49,129
anything and if you update it well it

677
00:28:49,129 --> 00:28:50,809
will has contact or whatever you want I

678
00:28:50,809 --> 00:28:52,820
mean it will get contact without asking

679
00:28:52,820 --> 00:28:57,200
you so just to say the truth we are

680
00:28:57,200 --> 00:28:59,539
another we reported this bug two months

681
00:28:59,539 --> 00:29:00,950
after the first one who report is that

682
00:29:00,950 --> 00:29:03,320
but like it was eight months ago and

683
00:29:03,320 --> 00:29:05,918
still attached

684
00:29:06,670 --> 00:29:08,810
okay so we're not going to details of

685
00:29:08,810 --> 00:29:10,370
others because you can do quite a lot of

686
00:29:10,370 --> 00:29:11,930
scenes how we can keep their mission on

687
00:29:11,930 --> 00:29:14,000
the grade how we can prevent HAP I'm

688
00:29:14,000 --> 00:29:15,980
okay how can you prevent permission from

689
00:29:15,980 --> 00:29:18,620
being and granted like the user says and

690
00:29:18,620 --> 00:29:20,990
grant it seems he's and granted based

691
00:29:20,990 --> 00:29:23,720
you here we have quite a few stuff like

692
00:29:23,720 --> 00:29:26,030
that can do and you can do also vary use

693
00:29:26,030 --> 00:29:29,150
not useful so use less one so sad how

694
00:29:29,150 --> 00:29:30,440
can you prevent someone from granting

695
00:29:30,440 --> 00:29:34,070
you permission you can do that so that's

696
00:29:34,070 --> 00:29:41,270
quite interesting time so the other

697
00:29:41,270 --> 00:29:43,880
thing important is like I explained it

698
00:29:43,880 --> 00:29:45,500
very deeply is the limitation of the

699
00:29:45,500 --> 00:29:46,580
algorithm about permission

700
00:29:46,580 --> 00:29:48,950
implementation so okay so now we see a

701
00:29:48,950 --> 00:29:50,510
freaking confirmations and we can do

702
00:29:50,510 --> 00:29:53,120
stuff but they also subject I think in

703
00:29:53,120 --> 00:29:55,430
Android that is not well enough debated

704
00:29:55,430 --> 00:29:57,170
is like the implication of the UID based

705
00:29:57,170 --> 00:30:00,590
model in general an Android and what it

706
00:30:00,590 --> 00:30:02,780
means for user privacy and how the files

707
00:30:02,780 --> 00:30:06,320
are really protecting on the system so

708
00:30:06,320 --> 00:30:07,640
what kind of limitation I want to talk

709
00:30:07,640 --> 00:30:08,870
about here I don't want to talk about

710
00:30:08,870 --> 00:30:11,450
the UID versus lattice role model so

711
00:30:11,450 --> 00:30:13,700
it's not a general presentation but Bob

712
00:30:13,700 --> 00:30:16,070
versus doc this is whatever it's much

713
00:30:16,070 --> 00:30:17,840
more about like how can you trick the

714
00:30:17,840 --> 00:30:19,400
user because you just don't know

715
00:30:19,400 --> 00:30:21,110
anything about the quasi consequence of

716
00:30:21,110 --> 00:30:23,030
UID what doesn't mean like it knows

717
00:30:23,030 --> 00:30:24,860
nothing I mean like even the policy of

718
00:30:24,860 --> 00:30:25,850
Google is that the users who know

719
00:30:25,850 --> 00:30:27,020
nothing and everything should work fine

720
00:30:27,020 --> 00:30:30,110
so how can you trick the user so that in

721
00:30:30,110 --> 00:30:31,280
fact he doesn't know what he's doing you

722
00:30:31,280 --> 00:30:32,630
think everything is safe because it

723
00:30:32,630 --> 00:30:34,820
trust Google well you should not so that

724
00:30:34,820 --> 00:30:36,200
does the conflit asian i want to talk

725
00:30:36,200 --> 00:30:39,890
about in and three example which is how

726
00:30:39,890 --> 00:30:43,070
can you bypass the concept of jail by

727
00:30:43,070 --> 00:30:43,790
shady ID

728
00:30:43,790 --> 00:30:46,730
how can you bypass the concept of UID

729
00:30:46,730 --> 00:30:49,940
security by in a virtualization and ab

730
00:30:49,940 --> 00:30:53,360
security by innovator is asian so what

731
00:30:53,360 --> 00:30:55,130
you ID is in fact less is very

732
00:30:55,130 --> 00:30:56,420
complicated so like an Android because

733
00:30:56,420 --> 00:30:58,670
UID is not associated to nap because

734
00:30:58,670 --> 00:31:01,070
shadow ID it's not associated to

735
00:31:01,070 --> 00:31:03,040
publisher key because you may have

736
00:31:03,040 --> 00:31:06,130
multiple application made by the same

737
00:31:06,130 --> 00:31:08,600
developer that don't have the same UID I

738
00:31:08,600 --> 00:31:09,800
mean if they don't have the same shadow

739
00:31:09,800 --> 00:31:13,040
ID each application has its own UID but

740
00:31:13,040 --> 00:31:16,070
the set of application but I mean like

741
00:31:16,070 --> 00:31:17,840
the set of UID is

742
00:31:17,840 --> 00:31:19,490
included within the set of application

743
00:31:19,490 --> 00:31:22,490
so it kind of mix between like a set of

744
00:31:22,490 --> 00:31:24,289
UID balloons to provision on the a

745
00:31:24,289 --> 00:31:26,110
publisher based not pair application

746
00:31:26,110 --> 00:31:29,390
meaning like if we're going to a

747
00:31:29,390 --> 00:31:31,309
permission to to an app what you don't

748
00:31:31,309 --> 00:31:32,299
want to permission to nap you want

749
00:31:32,299 --> 00:31:34,580
attention to you ID but you don't know

750
00:31:34,580 --> 00:31:36,799
if this grant is to an app or to a

751
00:31:36,799 --> 00:31:38,840
certain app and that's impossible to

752
00:31:38,840 --> 00:31:41,240
know without any security application

753
00:31:41,240 --> 00:31:44,049
because Google do not show you that and

754
00:31:44,049 --> 00:31:46,520
it's by design I mean other things that

755
00:31:46,520 --> 00:31:47,720
seems very important is that by design

756
00:31:47,720 --> 00:31:51,020
designs they decided to do that and and

757
00:31:51,020 --> 00:31:53,120
by design you also have permissions that

758
00:31:53,120 --> 00:31:55,250
under display you have system

759
00:31:55,250 --> 00:31:57,500
applications that will do not show that

760
00:31:57,500 --> 00:32:00,020
the has contacted there has contact so

761
00:32:00,020 --> 00:32:02,240
you can have a set of a configuration

762
00:32:02,240 --> 00:32:03,890
when nobody's knows that contactus has

763
00:32:03,890 --> 00:32:06,049
set is shared so like this concept of

764
00:32:06,049 --> 00:32:09,110
UID doesn't makes any sense really when

765
00:32:09,110 --> 00:32:11,929
you have this kind of shadow idea and so

766
00:32:11,929 --> 00:32:14,929
is to hide stuff and if one want to go

767
00:32:14,929 --> 00:32:16,399
to external storage definition that's

768
00:32:16,399 --> 00:32:18,200
even worse because you have UID on the

769
00:32:18,200 --> 00:32:20,510
external storage but it's more

770
00:32:20,510 --> 00:32:23,840
controlled by remote services so the UID

771
00:32:23,840 --> 00:32:25,460
doesn't make any sense neither so like

772
00:32:25,460 --> 00:32:28,549
it's very not clear for the user what's

773
00:32:28,549 --> 00:32:30,230
the consequences of security of the

774
00:32:30,230 --> 00:32:35,779
filesystem on on Android so it was like

775
00:32:35,779 --> 00:32:39,880
a very quick a party but like the UID

776
00:32:39,880 --> 00:32:42,080
definition limitation because of this

777
00:32:42,080 --> 00:32:45,860
all decision and shadow ad another thing

778
00:32:45,860 --> 00:32:47,240
very interesting is what we could in a

779
00:32:47,240 --> 00:32:49,250
Viet realization so I flagged something

780
00:32:49,250 --> 00:32:51,080
a previous relation which was what he

781
00:32:51,080 --> 00:32:52,340
had before which is what we call

782
00:32:52,340 --> 00:32:54,890
dynamically loaded executable code so

783
00:32:54,890 --> 00:32:57,730
the goal for that is was to hide

784
00:32:57,730 --> 00:33:01,700
automated analysis to make the code not

785
00:33:01,700 --> 00:33:03,350
the exit to the malware payload

786
00:33:03,350 --> 00:33:06,320
encrypted and whatever and then that's

787
00:33:06,320 --> 00:33:08,510
how that was good good again so and then

788
00:33:08,510 --> 00:33:12,559
now you have quite very stable open

789
00:33:12,559 --> 00:33:15,500
source libraries that allows you to do

790
00:33:15,500 --> 00:33:17,240
what we could in up virtualization

791
00:33:17,240 --> 00:33:19,399
meaning like you have an app that powers

792
00:33:19,399 --> 00:33:22,190
within you have a via tool as Android

793
00:33:22,190 --> 00:33:25,640
system that in which you can run with

794
00:33:25,640 --> 00:33:28,490
like really run other applications so

795
00:33:28,490 --> 00:33:30,680
it's a lot of very good features

796
00:33:30,680 --> 00:33:33,620
but it's kind of here again the users

797
00:33:33,620 --> 00:33:34,910
don't know that I mean that the user

798
00:33:34,910 --> 00:33:36,380
will never know that if we instead a

799
00:33:36,380 --> 00:33:39,640
game it has a capacity to open Facebook

800
00:33:39,640 --> 00:33:43,190
we see in the game and con controls the

801
00:33:43,190 --> 00:33:44,810
game I mean like before you can load

802
00:33:44,810 --> 00:33:47,150
code but you cannot load application so

803
00:33:47,150 --> 00:33:48,320
now you can have very interesting

804
00:33:48,320 --> 00:33:50,060
attacks and we see that with plumbing

805
00:33:50,060 --> 00:33:51,890
phantom anything bad but icky what they

806
00:33:51,890 --> 00:33:53,870
do is that they load up within their own

807
00:33:53,870 --> 00:33:57,550
environment and they can control it and

808
00:33:57,550 --> 00:34:00,350
by that you can do quite a lot of very

809
00:34:00,350 --> 00:34:03,770
good stuff because as you share the same

810
00:34:03,770 --> 00:34:07,010
UID I mean as everything the same

811
00:34:07,010 --> 00:34:09,110
process is very hard to detect because

812
00:34:09,110 --> 00:34:10,668
if you have a very good theater ization

813
00:34:10,668 --> 00:34:12,830
implementation even produces a G&T

814
00:34:12,830 --> 00:34:15,080
plug-in project are limited because if

815
00:34:15,080 --> 00:34:17,330
you make the application that is virtual

816
00:34:17,330 --> 00:34:19,610
also hosted not capable of detecting

817
00:34:19,610 --> 00:34:23,000
that she is visualized well she cannot

818
00:34:23,000 --> 00:34:25,550
know but what she will know is a robot

819
00:34:25,550 --> 00:34:27,469
you will not know that the data she has

820
00:34:27,469 --> 00:34:31,909
is owned by the host and I will show

821
00:34:31,909 --> 00:34:35,300
that later and as I said right now is

822
00:34:35,300 --> 00:34:37,159
poorly implemented is already there it's

823
00:34:37,159 --> 00:34:39,139
fully implemented because it's it's not

824
00:34:39,139 --> 00:34:42,260
real stable and we can do a lot of other

825
00:34:42,260 --> 00:34:43,909
stuff that's not seen yet on the market

826
00:34:43,909 --> 00:34:46,370
which is memories to rewrite so a very

827
00:34:46,370 --> 00:34:48,590
quick question that I had some to attack

828
00:34:48,590 --> 00:34:50,139
another the security conference which is

829
00:34:50,139 --> 00:34:52,399
who knows the concept of multi space

830
00:34:52,399 --> 00:34:54,830
like like parallel apps and all these

831
00:34:54,830 --> 00:34:56,239
concepts that allows you to run multiple

832
00:34:56,239 --> 00:35:00,100
Facebook in instance of the same device

833
00:35:00,100 --> 00:35:04,430
and will use that I'm like you should

834
00:35:04,430 --> 00:35:07,220
not because well I mean like a lot of

835
00:35:07,220 --> 00:35:08,780
users did a miracle so I want to mention

836
00:35:08,780 --> 00:35:10,130
use a misjudgment

837
00:35:10,130 --> 00:35:11,870
nobody knows the consequences of using

838
00:35:11,870 --> 00:35:14,240
parallel space and other apps but what

839
00:35:14,240 --> 00:35:17,420
you have here is that here when you try

840
00:35:17,420 --> 00:35:19,580
to grab the Facebook concept I mean you

841
00:35:19,580 --> 00:35:21,290
would see that Facebook is run by two

842
00:35:21,290 --> 00:35:25,340
different UID that UID which is a one

843
00:35:25,340 --> 00:35:28,250
one three but the host which is the ID

844
00:35:28,250 --> 00:35:31,250
one four six also run Facebook within

845
00:35:31,250 --> 00:35:34,640
its own ID so its own process so it

846
00:35:34,640 --> 00:35:37,250
controls it when talk about files that's

847
00:35:37,250 --> 00:35:38,810
the same thing that's the expected

848
00:35:38,810 --> 00:35:41,300
location of Facebook data when on the

849
00:35:41,300 --> 00:35:41,960
visualizer

850
00:35:41,960 --> 00:35:44,420
is stored on the

851
00:35:44,420 --> 00:35:47,000
virtualizer data meaning the visualizer

852
00:35:47,000 --> 00:35:49,910
can access all the data that Facebook

853
00:35:49,910 --> 00:35:51,500
store contact database

854
00:35:51,500 --> 00:35:54,079
everything is owned and accessed without

855
00:35:54,079 --> 00:36:02,420
any request by the host so I will go

856
00:36:02,420 --> 00:36:03,500
very quickly on that because I really

857
00:36:03,500 --> 00:36:06,910
finish other stuff in a five minute so

858
00:36:06,910 --> 00:36:09,140
question was impact of new security

859
00:36:09,140 --> 00:36:11,029
mechanism on Android so I don't know if

860
00:36:11,029 --> 00:36:12,380
you have heard about protect play

861
00:36:12,380 --> 00:36:15,650
protect and travel I think it would be

862
00:36:15,650 --> 00:36:17,599
very hard for protect to detect advanced

863
00:36:17,599 --> 00:36:20,380
virtualization capabilities because like

864
00:36:20,380 --> 00:36:23,150
it's not hidden behaviors expected

865
00:36:23,150 --> 00:36:24,950
behavior the goal of play protect is did

866
00:36:24,950 --> 00:36:27,950
I bad behavior but if you have is

867
00:36:27,950 --> 00:36:31,309
defined as virtualizer well it's not bad

868
00:36:31,309 --> 00:36:33,079
just nobody understand what does that

869
00:36:33,079 --> 00:36:34,789
means was he I mean like no user

870
00:36:34,789 --> 00:36:36,609
understand the consequences of that and

871
00:36:36,609 --> 00:36:41,210
we struggle here again was the impact it

872
00:36:41,210 --> 00:36:42,319
would be very good question to see in

873
00:36:42,319 --> 00:36:45,680
the future so I will just go very

874
00:36:45,680 --> 00:36:47,210
quickly here's as all the bug we

875
00:36:47,210 --> 00:36:49,119
submitted to Google so we had one

876
00:36:49,119 --> 00:36:51,529
walking as intended so we decided to

877
00:36:51,529 --> 00:36:53,869
split it in 13 and I were discussing

878
00:36:53,869 --> 00:36:55,400
with Google is much more interesting

879
00:36:55,400 --> 00:36:59,349
than anyone we may run on multiple apps

880
00:36:59,349 --> 00:37:01,460
and what we can see is that on the

881
00:37:01,460 --> 00:37:02,059
market

882
00:37:02,059 --> 00:37:04,069
everybody is nearly fine like nobody's

883
00:37:04,069 --> 00:37:05,809
expecting anything when you compared to

884
00:37:05,809 --> 00:37:07,789
various ISM databases nobody is trying

885
00:37:07,789 --> 00:37:11,890
to do this kind of advanced algorithm

886
00:37:11,890 --> 00:37:14,990
shags and the question is what what will

887
00:37:14,990 --> 00:37:16,400
happen when we start to have that I mean

888
00:37:16,400 --> 00:37:17,690
like Android is already known for

889
00:37:17,690 --> 00:37:19,519
malware but it's kind of the same I

890
00:37:19,519 --> 00:37:21,470
wasn't ask permission well I mean they

891
00:37:21,470 --> 00:37:25,190
can a lot not even ask so what will

892
00:37:25,190 --> 00:37:29,990
happen we start to have that when we

893
00:37:29,990 --> 00:37:31,880
touch compare security

894
00:37:31,880 --> 00:37:34,549
ads that exist on the market I will say

895
00:37:34,549 --> 00:37:36,230
that even the security hub do not take

896
00:37:36,230 --> 00:37:37,970
that into account they will sometimes

897
00:37:37,970 --> 00:37:39,920
some some of them would display the

898
00:37:39,920 --> 00:37:41,450
stages of the permission but not all of

899
00:37:41,450 --> 00:37:43,160
them so basically we not move an

900
00:37:43,160 --> 00:37:44,599
application access contact or not

901
00:37:44,599 --> 00:37:47,630
because yes the app says yes it defined

902
00:37:47,630 --> 00:37:49,369
it which you don't if it asked or not

903
00:37:49,369 --> 00:37:52,220
you don't if is granted or not so like

904
00:37:52,220 --> 00:37:54,319
you again the security hubs have a lot

905
00:37:54,319 --> 00:37:57,019
to do to be able to cope with this new

906
00:37:57,019 --> 00:37:58,490
application of marshmallow

907
00:37:58,490 --> 00:38:03,560
Plus permission model and a very quick

908
00:38:03,560 --> 00:38:07,880
conclusion I think I'm on time even if a

909
00:38:07,880 --> 00:38:10,340
criticize a lots an imitation of model I

910
00:38:10,340 --> 00:38:11,470
mean like once is to know is that

911
00:38:11,470 --> 00:38:13,220
basically I was talking about the

912
00:38:13,220 --> 00:38:15,830
limitation of the update pass but like

913
00:38:15,830 --> 00:38:17,510
you have all the underneath security

914
00:38:17,510 --> 00:38:20,390
which is which is like Zia permission

915
00:38:20,390 --> 00:38:22,400
protection that EPC Cole which is very

916
00:38:22,400 --> 00:38:24,140
robust very well implemented I mean I we

917
00:38:24,140 --> 00:38:26,150
spend months trying to see what we could

918
00:38:26,150 --> 00:38:28,820
do stuff and it's like it's very hard to

919
00:38:28,820 --> 00:38:33,410
hack and rebooting the device fix the

920
00:38:33,410 --> 00:38:35,690
problem but like what's the harder to

921
00:38:35,690 --> 00:38:37,130
rubble the device after each application

922
00:38:37,130 --> 00:38:41,570
mister update no security application

923
00:38:41,570 --> 00:38:43,940
are still needed I believe because prep

924
00:38:43,940 --> 00:38:46,730
rotate and travel projects are good but

925
00:38:46,730 --> 00:38:49,100
do not cope with some limitation and we

926
00:38:49,100 --> 00:38:50,300
not because I thought the goal and

927
00:38:50,300 --> 00:38:52,040
what's important is the security

928
00:38:52,040 --> 00:38:55,880
applications should really focus on what

929
00:38:55,880 --> 00:38:57,350
they do you need to provide security

930
00:38:57,350 --> 00:38:58,730
they don't provide display to the user

931
00:38:58,730 --> 00:39:01,130
so they should understand that in fact

932
00:39:01,130 --> 00:39:03,470
what does the display seems correctly or

933
00:39:03,470 --> 00:39:05,690
not much more work to do here about like

934
00:39:05,690 --> 00:39:08,869
not only using Android package manager

935
00:39:08,869 --> 00:39:10,609
function also understands the

936
00:39:10,609 --> 00:39:12,080
application of that would be very good

937
00:39:12,080 --> 00:39:14,920
to have better security solution and

938
00:39:14,920 --> 00:39:16,790
obviously we have a lot of new

939
00:39:16,790 --> 00:39:19,580
challenges like instant Habs Probab

940
00:39:19,580 --> 00:39:21,109
projects are started to be available to

941
00:39:21,109 --> 00:39:23,840
develop tribal as I mentioned Viet

942
00:39:23,840 --> 00:39:25,940
realization capability which me that we

943
00:39:25,940 --> 00:39:28,160
still have a lot of things to see in the

944
00:39:28,160 --> 00:39:30,859
future and thank you for listening to me

945
00:39:30,859 --> 00:39:36,460
for an equation I'm free after also to

946
00:39:36,760 --> 00:39:41,629
[Applause]

