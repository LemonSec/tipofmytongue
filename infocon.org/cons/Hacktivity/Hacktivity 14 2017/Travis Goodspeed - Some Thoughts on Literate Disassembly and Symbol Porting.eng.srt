1
00:00:00,000 --> 00:00:02,520
I said today I'm going to talk to you

2
00:00:02,520 --> 00:00:07,109
about literate reverse engineering this

3
00:00:07,109 --> 00:00:09,360
is a bit of a technical lecture but I

4
00:00:09,360 --> 00:00:12,210
will not be doing a NIDA demo or that

5
00:00:12,210 --> 00:00:14,940
sort of stuff specifically I want to I

6
00:00:14,940 --> 00:00:16,590
want to talk about what to do with a

7
00:00:16,590 --> 00:00:20,279
reverse engineering project after you've

8
00:00:20,279 --> 00:00:24,449
done the easy part after you've gotten

9
00:00:24,449 --> 00:00:28,529
your your feet on the ground after you

10
00:00:28,529 --> 00:00:31,590
know what your target binary does you've

11
00:00:31,590 --> 00:00:33,930
identified some of the functions in it

12
00:00:33,930 --> 00:00:36,300
and now you want to start reverse

13
00:00:36,300 --> 00:00:40,500
engineering at scale you want to begin

14
00:00:40,500 --> 00:00:42,540
targeting more than one version of a

15
00:00:42,540 --> 00:00:45,000
given application or you want to do

16
00:00:45,000 --> 00:00:47,129
reverse engineering as a team rather

17
00:00:47,129 --> 00:00:52,230
than as an individual the workflow that

18
00:00:52,230 --> 00:00:56,129
Ida Pro teaches you to sit down to begin

19
00:00:56,129 --> 00:00:58,199
identifying and naming functions to

20
00:00:58,199 --> 00:01:00,719
begin commenting the code that works

21
00:01:00,719 --> 00:01:05,250
very well for small samples that works

22
00:01:05,250 --> 00:01:07,770
well when you have a little bit of code

23
00:01:07,770 --> 00:01:11,100
that you need to work with but you don't

24
00:01:11,100 --> 00:01:14,189
have mounds of code you don't have lots

25
00:01:14,189 --> 00:01:15,509
of different versions you don't have

26
00:01:15,509 --> 00:01:18,270
things moving beneath your feet and you

27
00:01:18,270 --> 00:01:21,479
don't collaborate with people as soon as

28
00:01:21,479 --> 00:01:22,890
you want to start working with someone

29
00:01:22,890 --> 00:01:23,780
else

30
00:01:23,780 --> 00:01:26,430
Ida's workflow becomes

31
00:01:26,430 --> 00:01:30,240
strangling the databases don't support

32
00:01:30,240 --> 00:01:34,500
dipping so as you make changes you lose

33
00:01:34,500 --> 00:01:37,860
track of what the old versions did you

34
00:01:37,860 --> 00:01:39,659
can save backup snapshots of your

35
00:01:39,659 --> 00:01:43,070
database which is almost as good as as

36
00:01:43,070 --> 00:01:48,509
undo but it's not really the same thing

37
00:01:48,509 --> 00:01:50,399
and then when you share your I to Pro

38
00:01:50,399 --> 00:01:53,790
database at someone like let's say

39
00:01:53,790 --> 00:01:55,680
you're working on a project and you

40
00:01:55,680 --> 00:01:58,680
invite me to join you on it and you send

41
00:01:58,680 --> 00:02:00,630
me your ID database and I open up that

42
00:02:00,630 --> 00:02:05,159
database if I'm lucky I get a couple of

43
00:02:05,159 --> 00:02:07,860
named functions and you can verbally

44
00:02:07,860 --> 00:02:09,399
tell me which

45
00:02:09,399 --> 00:02:12,459
I should care about if I'm unlucky I get

46
00:02:12,459 --> 00:02:14,349
an error message telling me that the

47
00:02:14,349 --> 00:02:16,599
jerk who made it never bought a

48
00:02:16,599 --> 00:02:18,909
legitimate copy of Ida and that the

49
00:02:18,909 --> 00:02:21,189
database is blacklisted because of the

50
00:02:21,189 --> 00:02:25,239
serial number that authored it we can do

51
00:02:25,239 --> 00:02:28,180
a lot better than this we can build

52
00:02:28,180 --> 00:02:30,430
reverse engineering projects in the same

53
00:02:30,430 --> 00:02:33,730
way that we build software projects we

54
00:02:33,730 --> 00:02:35,230
can do it with text files instead of

55
00:02:35,230 --> 00:02:38,409
databases so that we can do dips between

56
00:02:38,409 --> 00:02:40,900
them we can manage these in version

57
00:02:40,900 --> 00:02:44,620
control so that the version control will

58
00:02:44,620 --> 00:02:47,139
allow us to have changes between

59
00:02:47,139 --> 00:02:49,780
multiple authors without stepping on

60
00:02:49,780 --> 00:02:53,260
each other's feet through emulation and

61
00:02:53,260 --> 00:02:58,389
unit testing we can make sure that we

62
00:02:58,389 --> 00:03:00,209
don't break things or that we don't

63
00:03:00,209 --> 00:03:03,579
regress and break things that used to be

64
00:03:03,579 --> 00:03:05,500
working in our patches or in our

65
00:03:05,500 --> 00:03:07,659
understanding of a program through

66
00:03:07,659 --> 00:03:09,370
emulation we can do this even for

67
00:03:09,370 --> 00:03:11,019
embedded systems hardware without having

68
00:03:11,019 --> 00:03:12,939
to physically tie that Hardware into the

69
00:03:12,939 --> 00:03:18,849
loop this also allows us to do

70
00:03:18,849 --> 00:03:22,209
significant things like use different

71
00:03:22,209 --> 00:03:25,239
tools because once you're using proper

72
00:03:25,239 --> 00:03:27,129
text files to record what you understand

73
00:03:27,129 --> 00:03:30,040
about a binary you can write a script in

74
00:03:30,040 --> 00:03:31,810
half an hour to add support to your

75
00:03:31,810 --> 00:03:33,159
favorite reverse engineering tool for

76
00:03:33,159 --> 00:03:36,819
this so if you use Ida and I use binary

77
00:03:36,819 --> 00:03:40,120
ninja and he uses hopper and she uses

78
00:03:40,120 --> 00:03:42,549
Vdara too we can all work on that

79
00:03:42,549 --> 00:03:46,959
project together without conflicts if a

80
00:03:46,959 --> 00:03:51,959
couple of if a couple of tricks are used

81
00:03:51,959 --> 00:03:56,229
now some of what I'm telling you today

82
00:03:56,229 --> 00:03:58,359
is something there are things that I've

83
00:03:58,359 --> 00:04:01,209
successfully implemented in projects a

84
00:04:01,209 --> 00:04:02,409
few of the other things are things that

85
00:04:02,409 --> 00:04:04,030
I wish I had implemented and would have

86
00:04:04,030 --> 00:04:05,829
saved me a lot of time if I'd done them

87
00:04:05,829 --> 00:04:08,199
right from the beginning as much of this

88
00:04:08,199 --> 00:04:12,329
they do as I say and not as I do

89
00:04:13,090 --> 00:04:16,149
and there will be no Ida demos in this

90
00:04:16,149 --> 00:04:17,798
entire lecture so if you're already

91
00:04:17,798 --> 00:04:19,630
looking for the exit you'll be fine

92
00:04:19,630 --> 00:04:22,290
I'm not going to be moving the mouse

93
00:04:22,290 --> 00:04:26,530
and this cat's name is me mean Julien

94
00:04:26,530 --> 00:04:29,260
van egg stole her from me if you could

95
00:04:29,260 --> 00:04:31,000
please get in your cell phone and if you

96
00:04:31,000 --> 00:04:32,680
know Julien if you could tweet like at

97
00:04:32,680 --> 00:04:34,480
Julien van egg please give Travis his

98
00:04:34,480 --> 00:04:37,810
cat back she'll be in in plenty more

99
00:04:37,810 --> 00:04:39,550
slides you can like do it repeatedly

100
00:04:39,550 --> 00:04:41,320
every time she comes onto the screen and

101
00:04:41,320 --> 00:04:47,680
then I'll get my cat back okay so before

102
00:04:47,680 --> 00:04:49,840
we talk about how things should work

103
00:04:49,840 --> 00:04:52,060
let's take a moment to think about how

104
00:04:52,060 --> 00:04:55,420
they do work we'll have a fictional

105
00:04:55,420 --> 00:04:58,420
reverse engineer named Bob and Bob is

106
00:04:58,420 --> 00:05:01,240
reverse engineering something and he

107
00:05:01,240 --> 00:05:02,890
opens it up in Ida and he gets this

108
00:05:02,890 --> 00:05:04,270
handy little screen that's going to help

109
00:05:04,270 --> 00:05:08,710
him do the day and have any of you done

110
00:05:08,710 --> 00:05:12,810
programming with Visual Basic 6 or with

111
00:05:12,810 --> 00:05:15,460
like a Java integrated development

112
00:05:15,460 --> 00:05:18,760
environment and you've noticed that it

113
00:05:18,760 --> 00:05:21,820
kind of like puts a stranglehold on you

114
00:05:21,820 --> 00:05:24,880
like you don't you don't remember the

115
00:05:24,880 --> 00:05:26,380
names of your functions because the

116
00:05:26,380 --> 00:05:27,910
audio complete will take care of it for

117
00:05:27,910 --> 00:05:31,800
you you don't worry so much about

118
00:05:31,800 --> 00:05:33,640
ensuring that everything will build from

119
00:05:33,640 --> 00:05:35,230
the command line because it builds fine

120
00:05:35,230 --> 00:05:40,300
from the GUI Ida and other CAD programs

121
00:05:40,300 --> 00:05:43,780
and integrated development environment

122
00:05:43,780 --> 00:05:48,040
they sort of do this by necessity

123
00:05:48,040 --> 00:05:50,200
because that makes it a lot easier to

124
00:05:50,200 --> 00:05:53,140
begin using them if Ida did not have the

125
00:05:53,140 --> 00:05:54,550
startup screen that would allow you to

126
00:05:54,550 --> 00:05:57,160
select your opening document if it

127
00:05:57,160 --> 00:05:59,740
didn't automatically recognize the the

128
00:05:59,740 --> 00:06:01,150
functions for you by running the auto

129
00:06:01,150 --> 00:06:03,700
analyzer first it would be a lot harder

130
00:06:03,700 --> 00:06:07,300
to begin using it but these same things

131
00:06:07,300 --> 00:06:09,490
that make it easy to start can sort of

132
00:06:09,490 --> 00:06:13,870
work against us later on so bob is

133
00:06:13,870 --> 00:06:17,380
reversing a loan he has one machine he's

134
00:06:17,380 --> 00:06:19,030
bouncing between different functions and

135
00:06:19,030 --> 00:06:20,890
he's giving them names and he's adding

136
00:06:20,890 --> 00:06:24,400
comments and he's naming variables but

137
00:06:24,400 --> 00:06:26,140
all this information is wrapped up in

138
00:06:26,140 --> 00:06:27,010
his own Ida

139
00:06:27,010 --> 00:06:29,490
database

140
00:06:30,240 --> 00:06:33,760
it begins sort of like this he has

141
00:06:33,760 --> 00:06:36,190
a bunch of bytes he has a bunch of

142
00:06:36,190 --> 00:06:38,140
addresses and then he slowly begins

143
00:06:38,140 --> 00:06:40,410
giving the structure to this he begins

144
00:06:40,410 --> 00:06:43,030
naming things he begins figuring out

145
00:06:43,030 --> 00:06:48,990
which functions call which others and

146
00:06:48,990 --> 00:06:51,220
early on you have to do it this way

147
00:06:51,220 --> 00:06:52,900
because early on you're completely lost

148
00:06:52,900 --> 00:06:57,070
as to what your target program does you

149
00:06:57,070 --> 00:06:58,980
need to figure it out for the first time

150
00:06:58,980 --> 00:07:02,530
before you begin to to try and make your

151
00:07:02,530 --> 00:07:09,460
reversing cleaner and and throughout all

152
00:07:09,460 --> 00:07:11,200
of this there's an end goal to do

153
00:07:11,200 --> 00:07:12,490
something with the program

154
00:07:12,490 --> 00:07:14,260
you don't reverse-engineer programs

155
00:07:14,260 --> 00:07:16,480
because C compilers generate good

156
00:07:16,480 --> 00:07:19,270
literature if you did we'd all buy them

157
00:07:19,270 --> 00:07:21,280
as paperback novels and Sudoku would be

158
00:07:21,280 --> 00:07:24,310
out of business instead you're trying to

159
00:07:24,310 --> 00:07:26,650
do something with it you're trying to

160
00:07:26,650 --> 00:07:28,240
patch it or you're trying to write an

161
00:07:28,240 --> 00:07:31,260
exploit for it or you're trying to

162
00:07:31,260 --> 00:07:33,100
reverse-engineer something that it

163
00:07:33,100 --> 00:07:38,560
interacts with so as Bob goes through it

164
00:07:38,560 --> 00:07:41,560
he's aware of this and he'll focus on

165
00:07:41,560 --> 00:07:43,120
the pieces of the code that he cares

166
00:07:43,120 --> 00:07:46,900
most about for example if he's trying to

167
00:07:46,900 --> 00:07:50,980
break the copy protection on a video

168
00:07:50,980 --> 00:07:53,830
game he'll begin looking for the code

169
00:07:53,830 --> 00:07:55,300
that actually validates the serial

170
00:07:55,300 --> 00:07:57,100
number and that might be the only thing

171
00:07:57,100 --> 00:07:59,530
in megabytes upon megabytes of code that

172
00:07:59,530 --> 00:08:04,060
he actually cares about now

173
00:08:04,060 --> 00:08:06,160
collaboration sucks in this environment

174
00:08:06,160 --> 00:08:08,320
because he's making notes for his own

175
00:08:08,320 --> 00:08:11,890
use the function names that he gives

176
00:08:11,890 --> 00:08:13,350
make sense only to him

177
00:08:13,350 --> 00:08:15,700
there is nothing when you open an IDE a

178
00:08:15,700 --> 00:08:17,350
project that tells you which function

179
00:08:17,350 --> 00:08:19,570
you should read first there is nothing

180
00:08:19,570 --> 00:08:21,280
that tells you which ones are more

181
00:08:21,280 --> 00:08:23,710
important than others they might have

182
00:08:23,710 --> 00:08:25,480
comments they might have color codes but

183
00:08:25,480 --> 00:08:29,830
there is nothing higher level and if he

184
00:08:29,830 --> 00:08:32,500
passes you this file well you get

185
00:08:32,500 --> 00:08:33,729
something that looks like this

186
00:08:33,729 --> 00:08:35,679
you have a bunch of functions on the

187
00:08:35,679 --> 00:08:37,000
left you've got the code in the middle

188
00:08:37,000 --> 00:08:40,120
you have no idea which piece of this is

189
00:08:40,120 --> 00:08:43,599
valuable or relevant and you won't have

190
00:08:43,599 --> 00:08:46,540
it unless he documented elsewhere

191
00:08:46,540 --> 00:08:50,420
and then you get this delightful error

192
00:08:50,420 --> 00:08:52,490
message telling you that Bob never paid

193
00:08:52,490 --> 00:08:53,750
for his license of ayodhya and ripped

194
00:08:53,750 --> 00:08:55,940
off an older version and you get this

195
00:08:55,940 --> 00:08:59,030
even if you pay for Ida so even those of

196
00:08:59,030 --> 00:09:01,970
us who purchase it and you should

197
00:09:01,970 --> 00:09:03,910
purchase your tools if you're using them

198
00:09:03,910 --> 00:09:08,660
professionally have to maintain like

199
00:09:08,660 --> 00:09:11,810
archives of old ripped off Ida versions

200
00:09:11,810 --> 00:09:13,640
or little scripts to patch out the

201
00:09:13,640 --> 00:09:15,260
serial number in order to bless a

202
00:09:15,260 --> 00:09:17,660
library or a database to make it legal

203
00:09:17,660 --> 00:09:21,890
to open this is ridiculous there's no

204
00:09:21,890 --> 00:09:23,900
reason that we should be communicating

205
00:09:23,900 --> 00:09:26,900
our reverse engineering in such a

206
00:09:26,900 --> 00:09:31,970
primitive way so and again right to

207
00:09:31,970 --> 00:09:33,140
julienne phonetic and tell him to give

208
00:09:33,140 --> 00:09:38,030
me my cap back so what are things that

209
00:09:38,030 --> 00:09:41,000
we can do better well the first stage is

210
00:09:41,000 --> 00:09:44,450
the triage stage when Bob is initially

211
00:09:44,450 --> 00:09:45,350
reverse-engineering

212
00:09:45,350 --> 00:09:47,540
his target he needs to figure out which

213
00:09:47,540 --> 00:09:49,730
functions are worth caring about and

214
00:09:49,730 --> 00:09:53,630
which are not and he'll begin by giving

215
00:09:53,630 --> 00:09:57,470
things names that are guesses and he

216
00:09:57,470 --> 00:10:01,330
also gives things names that are facts

217
00:10:01,330 --> 00:10:03,620
one of the problems with IDA is that it

218
00:10:03,620 --> 00:10:06,140
doesn't allow you to cleanly distinguish

219
00:10:06,140 --> 00:10:09,830
between guesses and facts so as he gives

220
00:10:09,830 --> 00:10:13,310
everything in the in the the target a

221
00:10:13,310 --> 00:10:16,850
name when I try to look at his own notes

222
00:10:16,850 --> 00:10:20,510
and compare them to mine there's no

223
00:10:20,510 --> 00:10:22,310
standard way for me to know that he

224
00:10:22,310 --> 00:10:24,440
absolutely recognized the printf

225
00:10:24,440 --> 00:10:26,930
function here but he just thinks that

226
00:10:26,930 --> 00:10:29,840
like math thingy number 25 has something

227
00:10:29,840 --> 00:10:33,080
to do with math by explicitly labeling

228
00:10:33,080 --> 00:10:38,240
these you can better combine that you

229
00:10:38,240 --> 00:10:39,860
can better strip out your guesses in

230
00:10:39,860 --> 00:10:43,100
order to only share our facts with

231
00:10:43,100 --> 00:10:43,760
someone else

232
00:10:43,760 --> 00:10:46,850
or at least share them separately so

233
00:10:46,850 --> 00:10:49,550
that the collaborating reverse engineer

234
00:10:49,550 --> 00:10:55,120
can view the hints but never trust them

235
00:10:58,499 --> 00:11:02,199
there's there's also this this concept

236
00:11:02,199 --> 00:11:06,249
that you can sort of automatically label

237
00:11:06,249 --> 00:11:11,109
things by scripts so in this image if

238
00:11:11,109 --> 00:11:12,459
you have excellent eyesight you can see

239
00:11:12,459 --> 00:11:14,769
in the top left the functions in this

240
00:11:14,769 --> 00:11:17,799
image haven't been named yet by manual

241
00:11:17,799 --> 00:11:19,419
reverse engineering but they've been

242
00:11:19,419 --> 00:11:24,309
categorized by what they do so functions

243
00:11:24,309 --> 00:11:27,489
which have been identified through as

244
00:11:27,489 --> 00:11:29,859
like parents that are not found by the

245
00:11:29,859 --> 00:11:32,769
auto analyzer but that were found by a

246
00:11:32,769 --> 00:11:34,929
secondary strip to have been named with

247
00:11:34,929 --> 00:11:38,139
the name parent interrupts handlers have

248
00:11:38,139 --> 00:11:40,929
been named with the prefix BEC because

249
00:11:40,929 --> 00:11:43,978
they're in the interrupt vector table

250
00:11:44,369 --> 00:11:47,649
once you begin to keep your guesses

251
00:11:47,649 --> 00:11:50,259
separate from your facts you're free to

252
00:11:50,259 --> 00:11:52,479
automatically label everything with a

253
00:11:52,479 --> 00:11:55,179
guess and then overlay your facts on top

254
00:11:55,179 --> 00:11:57,729
of it in order to have somewhat

255
00:11:57,729 --> 00:12:00,099
meaningful names for everything right

256
00:12:00,099 --> 00:12:04,449
from the beginning so for each symbol

257
00:12:04,449 --> 00:12:06,819
that you identify you should keep

258
00:12:06,819 --> 00:12:08,679
straight in your own head and also in

259
00:12:08,679 --> 00:12:10,809
the symbol name whether it's a guess or

260
00:12:10,809 --> 00:12:13,749
just a fact put underscore G before the

261
00:12:13,749 --> 00:12:15,159
end of every symbol that's a guess and

262
00:12:15,159 --> 00:12:17,739
then you can grep to remove all of them

263
00:12:17,739 --> 00:12:24,429
leaving just your facts because when I'm

264
00:12:24,429 --> 00:12:26,499
when I'm receiving reverse engineering

265
00:12:26,499 --> 00:12:28,389
work from someone else you know I want

266
00:12:28,389 --> 00:12:32,589
to see all of that person's hunches all

267
00:12:32,589 --> 00:12:34,569
of his guesses but I don't want to link

268
00:12:34,569 --> 00:12:36,339
against them I don't want to trust them

269
00:12:36,339 --> 00:12:40,029
or make them a functional part of my

270
00:12:40,029 --> 00:12:42,459
program or my patches or my exploit

271
00:12:42,459 --> 00:12:46,659
until after I verify them and again

272
00:12:46,659 --> 00:12:48,609
Julien vinagrette give me mean back to

273
00:12:48,609 --> 00:12:54,969
me so another trouble is that comments

274
00:12:54,969 --> 00:12:59,139
are not documentation when you're in Ida

275
00:12:59,139 --> 00:13:00,789
and your reverse engineering a function

276
00:13:00,789 --> 00:13:03,869
you can apply comments to individual

277
00:13:03,869 --> 00:13:06,639
instructions but you're not able to

278
00:13:06,639 --> 00:13:09,850
provide higher-level documentation

279
00:13:09,850 --> 00:13:12,850
it's common as working reverse-engineer

280
00:13:12,850 --> 00:13:14,830
to be prejudiced against the

281
00:13:14,830 --> 00:13:17,380
higher-level documentation because at

282
00:13:17,380 --> 00:13:20,140
the low level you get things done that's

283
00:13:20,140 --> 00:13:22,120
how you to see how a function works so

284
00:13:22,120 --> 00:13:23,770
some examples of high-level observations

285
00:13:23,770 --> 00:13:26,860
that are of immediate practical value

286
00:13:26,860 --> 00:13:28,780
for reverse engineering from a specific

287
00:13:28,780 --> 00:13:37,990
project so when you have a function

288
00:13:37,990 --> 00:13:39,370
that's produced by when you have a

289
00:13:39,370 --> 00:13:42,000
binary that's produced by a C compiler

290
00:13:42,000 --> 00:13:45,790
generally a C compiler the C program

291
00:13:45,790 --> 00:13:47,740
will be built up with separate modules

292
00:13:47,740 --> 00:13:51,100
which are then linked together so this

293
00:13:51,100 --> 00:13:54,430
organization of which module contains

294
00:13:54,430 --> 00:13:57,430
which functions will actually survive

295
00:13:57,430 --> 00:14:04,300
into the target application so in the

296
00:14:04,300 --> 00:14:06,220
case of the md380 firmware the entire

297
00:14:06,220 --> 00:14:09,610
graphics library is held between a start

298
00:14:09,610 --> 00:14:11,680
address and an end address and every

299
00:14:11,680 --> 00:14:14,470
function in that region is a graphics

300
00:14:14,470 --> 00:14:20,560
function once you begin to separate your

301
00:14:20,560 --> 00:14:23,140
guesses from your facts you can run

302
00:14:23,140 --> 00:14:24,700
through and you can automatically label

303
00:14:24,700 --> 00:14:27,190
every function in that range with the

304
00:14:27,190 --> 00:14:30,820
prefix GFX you don't know what it does

305
00:14:30,820 --> 00:14:32,140
but you know that it does something

306
00:14:32,140 --> 00:14:35,530
involving graphics then later when you

307
00:14:35,530 --> 00:14:37,660
see another function that calls a

308
00:14:37,660 --> 00:14:41,380
function beginning with GFX you can then

309
00:14:41,380 --> 00:14:42,970
know that it's displaying something on

310
00:14:42,970 --> 00:14:44,200
the screen maybe it's drawing a box

311
00:14:44,200 --> 00:14:46,420
maybe it's displaying text maybe it's an

312
00:14:46,420 --> 00:14:49,690
icon you don't know what yet but of all

313
00:14:49,690 --> 00:14:51,310
the child functions that you might care

314
00:14:51,310 --> 00:14:53,050
about you can immediately separate out

315
00:14:53,050 --> 00:14:57,310
the ones that involve graphics in the

316
00:14:57,310 --> 00:15:00,370
same former image the only function

317
00:15:00,370 --> 00:15:02,830
pointers that are ever used for any

318
00:15:02,830 --> 00:15:05,470
reason at all in the entire program are

319
00:15:05,470 --> 00:15:08,950
in the callbacks from the USB stack and

320
00:15:08,950 --> 00:15:12,790
the callbacks from the menus so wherever

321
00:15:12,790 --> 00:15:15,190
you find a function pointer for any

322
00:15:15,190 --> 00:15:16,540
reason you know that you're dealing

323
00:15:16,540 --> 00:15:18,760
either with USB code or with the menu

324
00:15:18,760 --> 00:15:21,790
code you can automatically label

325
00:15:21,790 --> 00:15:23,500
functions that involve those two

326
00:15:23,500 --> 00:15:25,990
and then separate them out into regions

327
00:15:25,990 --> 00:15:29,140
and label entire chunks of the firmware

328
00:15:29,140 --> 00:15:31,960
with a rough guess until you go back and

329
00:15:31,960 --> 00:15:34,630
then find the absolute facts of which

330
00:15:34,630 --> 00:15:37,240
function handles an incoming USB packet

331
00:15:37,240 --> 00:15:39,220
or which function draws texts to the

332
00:15:39,220 --> 00:15:45,160
screen there's also this feature that on

333
00:15:45,160 --> 00:15:49,240
thumb any function which both calls a

334
00:15:49,240 --> 00:15:54,700
child function and also returns begins

335
00:15:54,700 --> 00:15:56,620
by pushing the link register onto the

336
00:15:56,620 --> 00:16:02,770
stack at the same time all functions

337
00:16:02,770 --> 00:16:06,760
that are called directly as in not by a

338
00:16:06,760 --> 00:16:10,060
function pointer they all are accessed

339
00:16:10,060 --> 00:16:12,580
by the same instruction which is BL or

340
00:16:12,580 --> 00:16:15,700
branch and Link so if you run through

341
00:16:15,700 --> 00:16:17,290
the firmer image and you look for

342
00:16:17,290 --> 00:16:19,030
anything that pushes the link register

343
00:16:19,030 --> 00:16:23,280
onto the stack you get all you get many

344
00:16:23,280 --> 00:16:25,810
many locations that are legitimate

345
00:16:25,810 --> 00:16:29,470
entries to functions but you also get

346
00:16:29,470 --> 00:16:33,040
false positives in data they just

347
00:16:33,040 --> 00:16:35,830
coincidentally look like look like

348
00:16:35,830 --> 00:16:37,150
they're pushing the link register to the

349
00:16:37,150 --> 00:16:40,540
stack similarly if you look for all

350
00:16:40,540 --> 00:16:43,090
branch and link instructions you'll find

351
00:16:43,090 --> 00:16:44,560
many that are real and many that are

352
00:16:44,560 --> 00:16:47,590
false positives but if you know that

353
00:16:47,590 --> 00:16:50,760
almost every target of a branch and Link

354
00:16:50,760 --> 00:16:53,410
begins by pushing the link register to

355
00:16:53,410 --> 00:16:57,940
the stack you can look for branches that

356
00:16:57,940 --> 00:17:02,170
go to a relative address that begins

357
00:17:02,170 --> 00:17:03,610
with the instruction that function ought

358
00:17:03,610 --> 00:17:05,800
to begin with and this allows you to

359
00:17:05,800 --> 00:17:08,530
automatically identify 95% of the

360
00:17:08,530 --> 00:17:11,859
functions in a large thumb to program in

361
00:17:11,859 --> 00:17:14,440
a single sweep to immediately throw them

362
00:17:14,440 --> 00:17:17,170
into the auto analyzer to recognize all

363
00:17:17,170 --> 00:17:22,569
of their children and these high-level

364
00:17:22,569 --> 00:17:25,240
observations are not true for every

365
00:17:25,240 --> 00:17:26,950
program they won't be true for

366
00:17:26,950 --> 00:17:29,140
obfuscated programs they won't be true

367
00:17:29,140 --> 00:17:32,050
for heavily inline programs or for

368
00:17:32,050 --> 00:17:33,910
programs where the programmer was lazy

369
00:17:33,910 --> 00:17:35,470
and threw everything into a single C

370
00:17:35,470 --> 00:17:36,350
file

371
00:17:36,350 --> 00:17:38,690
but they are true for a lot of programs

372
00:17:38,690 --> 00:17:41,419
and by verifying that they're true on

373
00:17:41,419 --> 00:17:43,669
your individual target and then

374
00:17:43,669 --> 00:17:47,140
scripting them you will be able to

375
00:17:47,140 --> 00:17:49,789
automatically label large chunks of your

376
00:17:49,789 --> 00:17:53,240
program and to reduce the labor of

377
00:17:53,240 --> 00:17:58,340
reverse engineering it and you should

378
00:17:58,340 --> 00:18:01,160
write up these discoveries so for the MD

379
00:18:01,160 --> 00:18:03,770
3d tools project which is a ham radio

380
00:18:03,770 --> 00:18:06,860
that we reverse engineer we have a wiki

381
00:18:06,860 --> 00:18:08,299
that describes how these things work

382
00:18:08,299 --> 00:18:10,490
there's a wiki that describes how to

383
00:18:10,490 --> 00:18:12,080
load all of the symbols up into Ida

384
00:18:12,080 --> 00:18:13,640
there's another one that tells you how

385
00:18:13,640 --> 00:18:16,610
to load everything into wrodar a two and

386
00:18:16,610 --> 00:18:17,630
a third that tells you how to load

387
00:18:17,630 --> 00:18:21,559
everything into binary ninja by having

388
00:18:21,559 --> 00:18:24,020
this document by writing it down you

389
00:18:24,020 --> 00:18:26,570
then understand it better even if you're

390
00:18:26,570 --> 00:18:28,070
not sharing it with anyone even if it's

391
00:18:28,070 --> 00:18:33,409
only for your own benefit and in

392
00:18:33,409 --> 00:18:35,960
addition to writing these things as text

393
00:18:35,960 --> 00:18:38,210
which a human being should read you

394
00:18:38,210 --> 00:18:39,590
should also write them up as scripts

395
00:18:39,590 --> 00:18:42,350
which are to be run and you should run

396
00:18:42,350 --> 00:18:45,909
these scripts by continuous integration

397
00:18:45,909 --> 00:18:50,929
you can have a Jenkins or Travis CI

398
00:18:50,929 --> 00:18:53,600
server that will run through to verify

399
00:18:53,600 --> 00:18:55,309
that your results work for multiple

400
00:18:55,309 --> 00:19:00,620
images from multiple targets and again

401
00:19:00,620 --> 00:19:02,510
Julianne should give me mean back to me

402
00:19:02,510 --> 00:19:05,840
because she's my cat an audio save seat

403
00:19:05,840 --> 00:19:11,299
so fun now getting back to collaboration

404
00:19:11,299 --> 00:19:14,360
for a minute and I don't mean teamwork

405
00:19:14,360 --> 00:19:15,890
is in like we're gonna do trust fall

406
00:19:15,890 --> 00:19:18,110
exercises and we're going to hug each

407
00:19:18,110 --> 00:19:19,460
other at the end we're gonna do the

408
00:19:19,460 --> 00:19:20,990
corporate retreat stuff

409
00:19:20,990 --> 00:19:23,000
teamwork is just that you need multiple

410
00:19:23,000 --> 00:19:24,770
reverse engineers working on a single

411
00:19:24,770 --> 00:19:26,960
target image without pissing each other

412
00:19:26,960 --> 00:19:28,580
off and without stepping on each other's

413
00:19:28,580 --> 00:19:33,350
shoes it doesn't have to be a kumbaya

414
00:19:33,350 --> 00:19:39,080
thing so much as not actively undoing

415
00:19:39,080 --> 00:19:42,350
each other's work if you try to do a

416
00:19:42,350 --> 00:19:44,659
reverse engineering project between many

417
00:19:44,659 --> 00:19:48,470
people with Ida by sharing an ID B

418
00:19:48,470 --> 00:19:49,400
database

419
00:19:49,400 --> 00:19:54,380
very quickly one IDB fork will become

420
00:19:54,380 --> 00:19:55,970
the best one and all of the others will

421
00:19:55,970 --> 00:19:58,520
be thrown away and you'll have excellent

422
00:19:58,520 --> 00:20:00,530
records for the USB stack and you will

423
00:20:00,530 --> 00:20:02,360
have completely lost all of the graphics

424
00:20:02,360 --> 00:20:07,460
code so the key to doing this properly

425
00:20:07,460 --> 00:20:10,370
is to use text files and scripts in

426
00:20:10,370 --> 00:20:12,170
version control with continuous

427
00:20:12,170 --> 00:20:15,800
integration by having text files that

428
00:20:15,800 --> 00:20:18,520
describe your symbols their addresses

429
00:20:18,520 --> 00:20:21,140
that can be grabbed two separate whether

430
00:20:21,140 --> 00:20:23,690
they're a guess or a fact to have

431
00:20:23,690 --> 00:20:26,179
comments to indicate who added that

432
00:20:26,179 --> 00:20:28,940
symbol or who last modified it so that

433
00:20:28,940 --> 00:20:31,280
you can then know which member of your

434
00:20:31,280 --> 00:20:33,710
team is most familiar with a particular

435
00:20:33,710 --> 00:20:37,400
function who gave it that name and then

436
00:20:37,400 --> 00:20:41,690
CI tests to verify that this works for

437
00:20:41,690 --> 00:20:44,360
more than one version of your target so

438
00:20:44,360 --> 00:20:48,130
that you can port your code

439
00:20:48,130 --> 00:20:51,200
automatically when I'm reverse

440
00:20:51,200 --> 00:20:53,059
engineering the md380 and I identify a

441
00:20:53,059 --> 00:20:55,670
new function I'm not going to repeat

442
00:20:55,670 --> 00:20:58,400
that work for nine separate versions of

443
00:20:58,400 --> 00:21:01,610
the radio firmware instead I wrote a

444
00:21:01,610 --> 00:21:04,040
symbol porting tool that automatically

445
00:21:04,040 --> 00:21:07,280
converts the symbol for me and a

446
00:21:07,280 --> 00:21:09,110
continuous integration script that will

447
00:21:09,110 --> 00:21:11,780
verify that the important functions are

448
00:21:11,780 --> 00:21:13,280
available in all of the versions that I

449
00:21:13,280 --> 00:21:20,059
care about now the best thing about text

450
00:21:20,059 --> 00:21:22,309
files is that they're already supported

451
00:21:22,309 --> 00:21:24,140
by all of the major reverse engineering

452
00:21:24,140 --> 00:21:26,510
tools and you can convert them by shell

453
00:21:26,510 --> 00:21:30,440
script goona LD is nice because it can

454
00:21:30,440 --> 00:21:33,530
be directly used by the linker so as

455
00:21:33,530 --> 00:21:35,179
you're patching code you can

456
00:21:35,179 --> 00:21:37,070
automatically throw all of those symbols

457
00:21:37,070 --> 00:21:39,320
in and then call the function as if it

458
00:21:39,320 --> 00:21:43,520
were a regular function Ida Pro and road

459
00:21:43,520 --> 00:21:45,920
ara to have their own formats what I

460
00:21:45,920 --> 00:21:49,429
particularly like about about radar twos

461
00:21:49,429 --> 00:21:51,559
is that you know because they're the

462
00:21:51,559 --> 00:21:53,630
same as the command line you can just

463
00:21:53,630 --> 00:21:55,730
paste them into an active session and

464
00:21:55,730 --> 00:21:58,040
then immediately have the symbols

465
00:21:58,040 --> 00:22:01,010
available you should pick one file

466
00:22:01,010 --> 00:22:02,610
format

467
00:22:02,610 --> 00:22:04,350
and you should give it good file names

468
00:22:04,350 --> 00:22:06,210
from the very beginning in the same way

469
00:22:06,210 --> 00:22:08,250
that you would organize a programming

470
00:22:08,250 --> 00:22:12,900
project so that you can then import only

471
00:22:12,900 --> 00:22:14,070
the symbols from the region that you

472
00:22:14,070 --> 00:22:17,940
care about if you are working with with

473
00:22:17,940 --> 00:22:19,800
a very large program and your

474
00:22:19,800 --> 00:22:21,360
reverse-engineering a piece of the USB

475
00:22:21,360 --> 00:22:24,360
code it's sometimes very handy to only

476
00:22:24,360 --> 00:22:27,200
import the symbols for the USB stack and

477
00:22:27,200 --> 00:22:30,120
for like the one crypto library that it

478
00:22:30,120 --> 00:22:32,190
calls that you care about because then

479
00:22:32,190 --> 00:22:34,080
all of the labeled functions are related

480
00:22:34,080 --> 00:22:36,780
to your immediate target and your call

481
00:22:36,780 --> 00:22:40,470
graphs are small you don't have lots of

482
00:22:40,470 --> 00:22:42,240
noise that interferes with your effort

483
00:22:42,240 --> 00:22:47,540
and you should have example scripts for

484
00:22:47,540 --> 00:22:51,060
importing these files into each of the

485
00:22:51,060 --> 00:22:54,780
major reverse engineering tools there is

486
00:22:54,780 --> 00:22:57,180
no reason why we should all have to use

487
00:22:57,180 --> 00:22:59,310
the same reverse engineering tool even

488
00:22:59,310 --> 00:23:01,080
if we're working on the same target

489
00:23:01,080 --> 00:23:07,110
project this is also like a good way to

490
00:23:07,110 --> 00:23:09,690
get the your money's worth for the ida

491
00:23:09,690 --> 00:23:12,920
pro license without excluding teammates

492
00:23:12,920 --> 00:23:22,920
who who use different software these are

493
00:23:22,920 --> 00:23:27,620
real symbol entries for items in ram

494
00:23:27,620 --> 00:23:31,170
from one version of the Tutera md380

495
00:23:31,170 --> 00:23:34,260
firmware so these match into a core dump

496
00:23:34,260 --> 00:23:36,390
and then by by loading them up you are

497
00:23:36,390 --> 00:23:38,400
able to view what the values were at

498
00:23:38,400 --> 00:23:41,130
those addresses or to recognize any

499
00:23:41,130 --> 00:23:42,750
function that interacts with the data at

500
00:23:42,750 --> 00:23:45,720
that address this is in radar a twos

501
00:23:45,720 --> 00:23:47,880
format but these were originally found

502
00:23:47,880 --> 00:23:51,270
in Ida and it's really simple you just

503
00:23:51,270 --> 00:23:53,850
have an F and then you have the symbol

504
00:23:53,850 --> 00:23:55,380
name and then you have an at and then

505
00:23:55,380 --> 00:23:59,310
you have the address anyone who has been

506
00:23:59,310 --> 00:24:01,830
programming at six months for a couple

507
00:24:01,830 --> 00:24:03,840
of months who can do string processing

508
00:24:03,840 --> 00:24:08,490
who can do said and grab can work with

509
00:24:08,490 --> 00:24:11,910
these sorts of files quick little python

510
00:24:11,910 --> 00:24:13,980
script will import them into any of the

511
00:24:13,980 --> 00:24:15,040
modern reverse engine

512
00:24:15,040 --> 00:24:17,830
toolkits and then it doesn't matter

513
00:24:17,830 --> 00:24:19,810
whether you're using hopper or Ida or

514
00:24:19,810 --> 00:24:20,610
vidura

515
00:24:20,610 --> 00:24:24,900
you can load it and you can work with it

516
00:24:24,900 --> 00:24:28,810
these are new LD symbols which is

517
00:24:28,810 --> 00:24:31,630
another format you just have the name an

518
00:24:31,630 --> 00:24:33,850
equal sign the address and then a

519
00:24:33,850 --> 00:24:37,720
semicolon it doesn't get much simpler

520
00:24:37,720 --> 00:24:39,640
than this but by keeping them in this

521
00:24:39,640 --> 00:24:43,950
format you can then parse these files so

522
00:24:43,950 --> 00:24:46,300
as we'll see later I have a tool that

523
00:24:46,300 --> 00:24:49,270
runs through and identifies from the

524
00:24:49,270 --> 00:24:50,920
known address in one version of the

525
00:24:50,920 --> 00:24:52,780
firmware it will convert that address

526
00:24:52,780 --> 00:24:54,520
and then find the equivalent to dress in

527
00:24:54,520 --> 00:24:56,350
a different version of the firmware in

528
00:24:56,350 --> 00:24:58,180
order to automatically port my linking

529
00:24:58,180 --> 00:25:02,500
symbols this way I only load the one

530
00:25:02,500 --> 00:25:05,560
version that I'm most familiar with into

531
00:25:05,560 --> 00:25:07,570
my reverse engineering tool and never

532
00:25:07,570 --> 00:25:10,650
the other versions that I still target

533
00:25:10,650 --> 00:25:12,910
because I'm working with it at a

534
00:25:12,910 --> 00:25:14,440
function level rather than an

535
00:25:14,440 --> 00:25:18,910
instruction level so we don't need or

536
00:25:18,910 --> 00:25:21,790
even want to share database there's no

537
00:25:21,790 --> 00:25:24,010
reason why I should have every one of

538
00:25:24,010 --> 00:25:27,100
your Ida objects as I'm editing the same

539
00:25:27,100 --> 00:25:30,400
project instead I should only see the

540
00:25:30,400 --> 00:25:32,380
pieces that I need to see at that moment

541
00:25:32,380 --> 00:25:35,890
I can load in all of your guesses if I

542
00:25:35,890 --> 00:25:39,460
want to to find something new but I

543
00:25:39,460 --> 00:25:41,620
should only link against your facts so

544
00:25:41,620 --> 00:25:45,610
the linking file and the guess files can

545
00:25:45,610 --> 00:25:50,380
be held separately in this way we don't

546
00:25:50,380 --> 00:25:51,700
have to interfere with each other as

547
00:25:51,700 --> 00:25:56,230
we're working on the same project we'll

548
00:25:56,230 --> 00:25:59,590
then need test cases to keep us sane you

549
00:25:59,590 --> 00:26:01,450
need to make sure that the addresses are

550
00:26:01,450 --> 00:26:04,050
unique especially in your facts database

551
00:26:04,050 --> 00:26:06,430
there's no reason why we should ever

552
00:26:06,430 --> 00:26:08,530
have the same function referred to by

553
00:26:08,530 --> 00:26:11,950
multiple names and test cases can run

554
00:26:11,950 --> 00:26:14,410
through and identify that stuff for us

555
00:26:14,410 --> 00:26:16,690
binary ninja has an excellent headless

556
00:26:16,690 --> 00:26:19,120
mode where in your Python script you can

557
00:26:19,120 --> 00:26:21,580
just import binary ninja and then have

558
00:26:21,580 --> 00:26:24,340
access to all of the different features

559
00:26:24,340 --> 00:26:26,710
that it supports you can load up to

560
00:26:26,710 --> 00:26:28,330
firmware images you can

561
00:26:28,330 --> 00:26:30,159
and import symbols to them and then

562
00:26:30,159 --> 00:26:34,149
compare them all from an offline script

563
00:26:34,149 --> 00:26:38,320
that's run by a CI server and never by

564
00:26:38,320 --> 00:26:40,779
an individual human so that you never

565
00:26:40,779 --> 00:26:43,450
have to open the GUI to validate that

566
00:26:43,450 --> 00:26:45,250
someone else's work is safe to import

567
00:26:45,250 --> 00:26:48,390
into the main branch of the project and

568
00:26:48,390 --> 00:26:55,059
again my mean is my cat say pizza now

569
00:26:55,059 --> 00:26:57,279
portability matters and it matters a lot

570
00:26:57,279 --> 00:27:00,639
in the same way that we cared about

571
00:27:00,639 --> 00:27:04,059
teamwork not for like fuzzy feel good

572
00:27:04,059 --> 00:27:05,500
reasons but because that allows more

573
00:27:05,500 --> 00:27:06,909
than one reverse engineer to work on the

574
00:27:06,909 --> 00:27:09,669
same project portability allows one

575
00:27:09,669 --> 00:27:11,860
reverse engineer to work toward multiple

576
00:27:11,860 --> 00:27:14,130
targets

577
00:27:14,130 --> 00:27:16,720
whatever your reverse engineering unless

578
00:27:16,720 --> 00:27:18,460
its historical there will be new

579
00:27:18,460 --> 00:27:21,309
versions of it the radio firmware that

580
00:27:21,309 --> 00:27:23,139
we patch is under active development

581
00:27:23,139 --> 00:27:29,100
they keep releasing new versions so

582
00:27:29,909 --> 00:27:32,620
workflow it's particularly effective is

583
00:27:32,620 --> 00:27:34,809
to work on one concrete target so you

584
00:27:34,809 --> 00:27:36,220
have the one version that you're going

585
00:27:36,220 --> 00:27:38,139
to learn everything about that's the

586
00:27:38,139 --> 00:27:39,909
version that you maintain your guesses

587
00:27:39,909 --> 00:27:42,039
for that's the version that you become

588
00:27:42,039 --> 00:27:44,740
familiar with and then as much as

589
00:27:44,740 --> 00:27:48,659
possible you automatically port that to

590
00:27:48,659 --> 00:27:51,610
two different targets and you use

591
00:27:51,610 --> 00:27:53,440
continuous integration tools you use

592
00:27:53,440 --> 00:27:55,899
unit tests to verify that this is

593
00:27:55,899 --> 00:28:00,549
working some symbols cannot easily be

594
00:28:00,549 --> 00:28:03,820
ported over automatically but the vast

595
00:28:03,820 --> 00:28:06,370
majority can be automatically ported if

596
00:28:06,370 --> 00:28:10,330
they haven't significantly changed so

597
00:28:10,330 --> 00:28:12,519
rather than having the effort to like

598
00:28:12,519 --> 00:28:14,019
manually go through and identify all of

599
00:28:14,019 --> 00:28:17,740
these you can then only identify the

600
00:28:17,740 --> 00:28:19,750
ones that the automated tool was

601
00:28:19,750 --> 00:28:25,779
incapable of handling so this is a set

602
00:28:25,779 --> 00:28:29,950
of symbols for version 2.0 3/4 of the

603
00:28:29,950 --> 00:28:34,330
Tutera md380 firmware and you note at

604
00:28:34,330 --> 00:28:36,190
the end that there are these comments

605
00:28:36,190 --> 00:28:37,960
saying that there's so many bytes of a

606
00:28:37,960 --> 00:28:42,130
match this comes from a very simple

607
00:28:42,130 --> 00:28:45,250
see program that I wrote it's only two

608
00:28:45,250 --> 00:28:48,310
or three pages in source code but it's

609
00:28:48,310 --> 00:28:50,950
able to ignore the linker relocations in

610
00:28:50,950 --> 00:28:53,470
a thumb binary in order to identify

611
00:28:53,470 --> 00:28:55,060
which functions are identical to each

612
00:28:55,060 --> 00:29:02,830
other it's nothing like bin Navi or

613
00:29:02,830 --> 00:29:06,420
related tools it's not able to identify

614
00:29:06,420 --> 00:29:09,490
the individual blocks within the image

615
00:29:09,490 --> 00:29:11,950
but it doesn't need to all it needs to

616
00:29:11,950 --> 00:29:13,690
do is identify functions that are

617
00:29:13,690 --> 00:29:16,510
identical because that's enough to port

618
00:29:16,510 --> 00:29:19,060
the symbols over and the few that it

619
00:29:19,060 --> 00:29:20,560
misses the functions that have

620
00:29:20,560 --> 00:29:24,520
behaviorally changed those can be filled

621
00:29:24,520 --> 00:29:26,890
in manually and purporting an entire

622
00:29:26,890 --> 00:29:29,020
version it might be as few as three or

623
00:29:29,020 --> 00:29:30,490
four functions that need to be manually

624
00:29:30,490 --> 00:29:33,250
identified so that I can then take the

625
00:29:33,250 --> 00:29:37,150
symbols for version 2 out of 3 4 and my

626
00:29:37,150 --> 00:29:38,980
tool will automatically have them for

627
00:29:38,980 --> 00:29:42,970
300 200 all with very little code with

628
00:29:42,970 --> 00:29:45,370
very little time and most importantly

629
00:29:45,370 --> 00:29:48,310
with no manual intervention this runs

630
00:29:48,310 --> 00:29:51,730
entirely through shell scripts Python

631
00:29:51,730 --> 00:29:55,570
and custom C with no reliance upon any

632
00:29:55,570 --> 00:29:58,180
commercial software at all it was

633
00:29:58,180 --> 00:30:00,220
written just for this one project it's

634
00:30:00,220 --> 00:30:02,470
not portable to every target you might

635
00:30:02,470 --> 00:30:04,960
ever have but a tool doesn't need to be

636
00:30:04,960 --> 00:30:07,060
that generic it can be part of the build

637
00:30:07,060 --> 00:30:09,150
chain for your individual target

638
00:30:09,150 --> 00:30:11,280
especially if you're trying to

639
00:30:11,280 --> 00:30:17,080
collaborate with others or two to build

640
00:30:17,080 --> 00:30:20,740
up a reverse engineering result that can

641
00:30:20,740 --> 00:30:22,420
be read by other people or read by other

642
00:30:22,420 --> 00:30:27,010
machines or built by other people so not

643
00:30:27,010 --> 00:30:30,190
all targets have full coverage but unit

644
00:30:30,190 --> 00:30:31,630
testing will show you the gaps between

645
00:30:31,630 --> 00:30:34,600
them and if you don't link against a

646
00:30:34,600 --> 00:30:36,700
symbol you might not care that it's

647
00:30:36,700 --> 00:30:38,740
missing there are plenty of functions

648
00:30:38,740 --> 00:30:40,810
that I knew the location of a long time

649
00:30:40,810 --> 00:30:43,300
ago in older versions that I've lost in

650
00:30:43,300 --> 00:30:45,310
the new versions but if I'm not actually

651
00:30:45,310 --> 00:30:47,860
linking against that symbol hooking it

652
00:30:47,860 --> 00:30:50,800
or replacing it I don't care I can skip

653
00:30:50,800 --> 00:30:55,180
by it and again mean is my cat let's eat

654
00:30:55,180 --> 00:30:55,970
some fun

655
00:30:55,970 --> 00:31:01,580
is that correct now you also need to

656
00:31:01,580 --> 00:31:06,230
care about completeness and scope this

657
00:31:06,230 --> 00:31:08,600
scope is always controlled by your end

658
00:31:08,600 --> 00:31:11,830
goal are you trying to patch your target

659
00:31:11,830 --> 00:31:15,410
in which case you know you need a few

660
00:31:15,410 --> 00:31:16,820
symbols but you really need those

661
00:31:16,820 --> 00:31:18,920
symbols are you trying to copy it in

662
00:31:18,920 --> 00:31:20,150
which case you might need to know all of

663
00:31:20,150 --> 00:31:23,960
the behavior of the target but only the

664
00:31:23,960 --> 00:31:25,970
things that are difficult to reproduce

665
00:31:25,970 --> 00:31:28,940
like the central algorithm of it are you

666
00:31:28,940 --> 00:31:29,870
doing this for a capture the flag

667
00:31:29,870 --> 00:31:31,520
competition in which case you might have

668
00:31:31,520 --> 00:31:33,530
very little code but also very little

669
00:31:33,530 --> 00:31:35,750
time or are you doing this for

670
00:31:35,750 --> 00:31:38,060
preservation in which case popping the

671
00:31:38,060 --> 00:31:40,640
copy protection and allowing the old

672
00:31:40,640 --> 00:31:42,350
game to run in a modern emulator might

673
00:31:42,350 --> 00:31:48,530
be the only goal you should also be

674
00:31:48,530 --> 00:31:52,430
clean in everything that relates to your

675
00:31:52,430 --> 00:31:55,720
final your final goal you should

676
00:31:55,720 --> 00:31:59,680
maintain a clean environment so that

677
00:31:59,680 --> 00:32:02,180
anyone else who wants to get involved is

678
00:32:02,180 --> 00:32:06,590
able to without undue effort the the

679
00:32:06,590 --> 00:32:09,050
standard that I use is if a smart friend

680
00:32:09,050 --> 00:32:11,900
of mine wishes to join my project how

681
00:32:11,900 --> 00:32:14,630
long does it take him to catch up and to

682
00:32:14,630 --> 00:32:16,910
be able to productively contribute to

683
00:32:16,910 --> 00:32:20,330
the project if it's an hour it might be

684
00:32:20,330 --> 00:32:22,520
very easy to trick a friend of mine into

685
00:32:22,520 --> 00:32:25,400
helping out if it's a month it's

686
00:32:25,400 --> 00:32:27,020
probably too hard unless he's being paid

687
00:32:27,020 --> 00:32:30,740
for the trouble and this matters this

688
00:32:30,740 --> 00:32:32,930
matters a lot if you want a project to

689
00:32:32,930 --> 00:32:36,920
continue and every reverse engineer is

690
00:32:36,920 --> 00:32:38,510
sort of starts with a mess and then has

691
00:32:38,510 --> 00:32:40,910
to clean it up there's no reason for you

692
00:32:40,910 --> 00:32:44,240
to make this worse for yourself or to do

693
00:32:44,240 --> 00:32:45,710
your work in a way that cannot be

694
00:32:45,710 --> 00:32:48,400
maintained or ported to a new target and

695
00:32:48,400 --> 00:32:54,200
again the mean is my cat so you should

696
00:32:54,200 --> 00:32:55,820
treat reverse-engineering like a

697
00:32:55,820 --> 00:32:59,240
development project rather than like a

698
00:32:59,240 --> 00:33:02,270
NIDA puzzle or a Sudoku puzzle it's not

699
00:33:02,270 --> 00:33:03,470
something that you're going to throw

700
00:33:03,470 --> 00:33:05,840
away at the end so you shouldn't treat

701
00:33:05,840 --> 00:33:07,520
it like that instead you should build it

702
00:33:07,520 --> 00:33:09,650
as something that could be maintained

703
00:33:09,650 --> 00:33:12,540
use text files and scripts for

704
00:33:12,540 --> 00:33:15,810
everything there's a reason why even in

705
00:33:15,810 --> 00:33:17,460
commercial software development they've

706
00:33:17,460 --> 00:33:22,110
completely abandoned the idea of like an

707
00:33:22,110 --> 00:33:25,680
impossible to parse project file you

708
00:33:25,680 --> 00:33:27,540
know you want your code to be as simple

709
00:33:27,540 --> 00:33:31,770
as configure may call you you don't want

710
00:33:31,770 --> 00:33:33,930
to have to find the exact version of

711
00:33:33,930 --> 00:33:36,810
Visual Studio and then change the icons

712
00:33:36,810 --> 00:33:38,340
to no longer be in the my documents

713
00:33:38,340 --> 00:33:40,650
directory you should make it easy on

714
00:33:40,650 --> 00:33:45,000
yourself and the ability to do this team

715
00:33:45,000 --> 00:33:47,520
work comes from version control not from

716
00:33:47,520 --> 00:33:50,430
magic plugins there have been plenty of

717
00:33:50,430 --> 00:33:53,100
attempts at allowing Ida to be

718
00:33:53,100 --> 00:33:55,500
collaborative and none of them have

719
00:33:55,500 --> 00:33:59,040
really worked out and I think the reason

720
00:33:59,040 --> 00:34:00,630
for that is that the tool is

721
00:34:00,630 --> 00:34:02,960
fundamentally designed for one Operator

722
00:34:02,960 --> 00:34:04,800
anything that you want to make

723
00:34:04,800 --> 00:34:06,450
collaborative needs to be outside of

724
00:34:06,450 --> 00:34:08,699
that tool as something that you can

725
00:34:08,699 --> 00:34:11,159
maintain and that the developers of your

726
00:34:11,159 --> 00:34:14,060
project can individually understand and

727
00:34:14,060 --> 00:34:16,380
through portability and testing you can

728
00:34:16,380 --> 00:34:18,090
keep from fooling yourself you can make

729
00:34:18,090 --> 00:34:21,239
sure that things don't break and that

730
00:34:21,239 --> 00:34:23,668
the pieces that you understood yesterday

731
00:34:23,668 --> 00:34:28,020
you continue to understand tomorrow and

732
00:34:28,020 --> 00:34:30,330
if it can't be tested if you think that

733
00:34:30,330 --> 00:34:31,949
it can't be tested the truth is that

734
00:34:31,949 --> 00:34:33,540
you're just to raise it lazy to write an

735
00:34:33,540 --> 00:34:36,719
emulator if you're going to all the

736
00:34:36,719 --> 00:34:38,100
trouble to reverse engineer something

737
00:34:38,100 --> 00:34:40,860
you can go to the trouble to get pieces

738
00:34:40,860 --> 00:34:43,260
of it running in simulation there are

739
00:34:43,260 --> 00:34:45,300
simple Python scripts that will emulate

740
00:34:45,300 --> 00:34:48,810
any microcontroller qmo can handle all

741
00:34:48,810 --> 00:34:51,750
modern high end architectures anything

742
00:34:51,750 --> 00:34:53,668
that Linux can run on you can just

743
00:34:53,668 --> 00:34:56,070
compile an executable for that and then

744
00:34:56,070 --> 00:34:58,650
run it locally in emulation is if that

745
00:34:58,650 --> 00:35:01,530
were your main machine embedded arm code

746
00:35:01,530 --> 00:35:04,170
runs fine in an arm Linux process inside

747
00:35:04,170 --> 00:35:08,150
of Colima on a modern and x86 laptop

748
00:35:08,360 --> 00:35:10,830
cleanliness really is next to godliness

749
00:35:10,830 --> 00:35:14,340
like keep your scripts clean have

750
00:35:14,340 --> 00:35:16,650
scripts to parse all of your data and

751
00:35:16,650 --> 00:35:19,320
keep everything in flat text files that

752
00:35:19,320 --> 00:35:20,790
you can rebuild it in a new reverse

753
00:35:20,790 --> 00:35:21,859
engineering tomorrow if

754
00:35:21,859 --> 00:35:26,059
have to I'm out of time so I will end

755
00:35:26,059 --> 00:35:28,279
with a picture of a cat thank you kindly

756
00:35:28,279 --> 00:35:30,170
for your time and attention and I'll be

757
00:35:30,170 --> 00:35:31,279
around the conference if you have any

758
00:35:31,279 --> 00:35:32,330
questions

759
00:35:32,330 --> 00:35:37,660
[Applause]

