1
00:00:00,140 --> 00:00:03,449
so we've been researching my critique

2
00:00:03,449 --> 00:00:07,170
routers for basically the call of 2017

3
00:00:07,170 --> 00:00:12,630
and 2017 is coming to an end so we have

4
00:00:12,630 --> 00:00:14,130
a couple presentations lined up one of

5
00:00:14,130 --> 00:00:15,839
them is here and this specific

6
00:00:15,839 --> 00:00:18,779
presentation is going to be about the

7
00:00:18,779 --> 00:00:20,550
tools that we've created the tools that

8
00:00:20,550 --> 00:00:23,580
we found and that we use to work with

9
00:00:23,580 --> 00:00:28,080
micro tech routers and we invite

10
00:00:28,080 --> 00:00:30,570
everybody to to use them to research

11
00:00:30,570 --> 00:00:33,960
their security to achieve

12
00:00:33,960 --> 00:00:35,610
interoperability with some other tools

13
00:00:35,610 --> 00:00:37,879
that you like to install on your routers

14
00:00:37,879 --> 00:00:44,250
so yeah let's go right ahead so first of

15
00:00:44,250 --> 00:00:46,860
all any of you heard of micro tech

16
00:00:46,860 --> 00:00:51,539
before ok so the we have approximately

17
00:00:51,539 --> 00:00:55,800
30 percent off of the auditorium field

18
00:00:55,800 --> 00:00:57,090
here so I guess the other ones just

19
00:00:57,090 --> 00:00:58,890
aren't here everyone has heard of micro

20
00:00:58,890 --> 00:01:02,550
tech anyway as you know micro tech is is

21
00:01:02,550 --> 00:01:04,019
actually used quite widely it's of

22
00:01:04,019 --> 00:01:06,479
course not juniper or Cisco yet but

23
00:01:06,479 --> 00:01:08,610
they're growing quite fast so it's used

24
00:01:08,610 --> 00:01:12,960
all over the world and router s is is

25
00:01:12,960 --> 00:01:16,619
their operating system that they use on

26
00:01:16,619 --> 00:01:22,140
their routers it is basically Linux it

27
00:01:22,140 --> 00:01:25,979
has a Linux kernel by the way the Linux

28
00:01:25,979 --> 00:01:27,840
kernel in the current mikrotik is quite

29
00:01:27,840 --> 00:01:30,000
an old one so it's it's more than five

30
00:01:30,000 --> 00:01:33,150
years old a good question to ask here is

31
00:01:33,150 --> 00:01:37,350
do they actually apply the patches for

32
00:01:37,350 --> 00:01:39,659
the Linux kernel the ones that come out

33
00:01:39,659 --> 00:01:42,299
have came have come out through these

34
00:01:42,299 --> 00:01:44,850
five years right it's not only Linux of

35
00:01:44,850 --> 00:01:46,920
course it also include includes startup

36
00:01:46,920 --> 00:01:48,990
scripts normal binaries and your

37
00:01:48,990 --> 00:01:51,540
configuration now the middle two of

38
00:01:51,540 --> 00:01:53,040
those the startup scripts and binaries

39
00:01:53,040 --> 00:01:55,619
those are completely proprietary which

40
00:01:55,619 --> 00:01:57,299
means that router s is of course not

41
00:01:57,299 --> 00:01:59,130
only Linux but it's also a closed source

42
00:01:59,130 --> 00:02:05,009
and closed ecosystem so closed source we

43
00:02:05,009 --> 00:02:06,719
can deal with that we've been there

44
00:02:06,719 --> 00:02:09,270
before but closed ecosystem not unlike

45
00:02:09,270 --> 00:02:11,610
Apple we need the jailbreak to be able

46
00:02:11,610 --> 00:02:11,910
to

47
00:02:11,910 --> 00:02:14,070
properly work with these devices and to

48
00:02:14,070 --> 00:02:17,760
research them so luckily for us 12 years

49
00:02:17,760 --> 00:02:20,160
ago when a router s to point nine point

50
00:02:20,160 --> 00:02:22,860
eight came out they included a built-in

51
00:02:22,860 --> 00:02:26,670
backdoor which was very nice of them it

52
00:02:26,670 --> 00:02:28,440
works like that

53
00:02:28,440 --> 00:02:31,410
so in slash novice slash bin slash login

54
00:02:31,410 --> 00:02:32,870
which is one of the boundaries there

55
00:02:32,870 --> 00:02:36,660
there is a string it appeared in at the

56
00:02:36,660 --> 00:02:37,650
end of 2005

57
00:02:37,650 --> 00:02:39,480
nobody TC devil login so it actually

58
00:02:39,480 --> 00:02:44,460
happens if you create a file and an

59
00:02:44,460 --> 00:02:45,840
inode to be precise

60
00:02:45,840 --> 00:02:50,670
at that location then this is what

61
00:02:50,670 --> 00:02:55,530
happens upon login so the login binder

62
00:02:55,530 --> 00:02:58,560
actually checks if there's this file not

63
00:02:58,560 --> 00:03:00,330
wait if you have a login and if you're

64
00:03:00,330 --> 00:03:02,610
logging in with username devil and the

65
00:03:02,610 --> 00:03:04,740
password matches admin password you get

66
00:03:04,740 --> 00:03:07,710
been executed and given to you instead

67
00:03:07,710 --> 00:03:11,910
of your standard very limited shell the

68
00:03:11,910 --> 00:03:14,940
answer we're all sorry so the question

69
00:03:14,940 --> 00:03:20,760
of course is how do we make the file

70
00:03:20,760 --> 00:03:23,790
there so it's quite easy so my one of my

71
00:03:23,790 --> 00:03:25,200
favorite favorite comedians and

72
00:03:25,200 --> 00:03:27,900
musicians jewelry can talk and study

73
00:03:27,900 --> 00:03:30,870
here so we're all together staring us

74
00:03:30,870 --> 00:03:33,319
right in the face

75
00:03:33,319 --> 00:03:37,999
all we got to do with all we got to do

76
00:03:37,999 --> 00:03:48,650
we'll all we got to do is so basically

77
00:03:48,650 --> 00:03:50,090
it's as easy as creating the file then

78
00:03:50,090 --> 00:03:51,650
you tell them it on you and you got and

79
00:03:51,650 --> 00:03:56,230
you got your shell right well nowadays

80
00:03:56,230 --> 00:03:58,400
they don't really have car drives in

81
00:03:58,400 --> 00:04:00,409
these they have flash chips so you can

82
00:04:00,409 --> 00:04:02,389
take it apart you can easily mount it

83
00:04:02,389 --> 00:04:03,829
but it's it's a bit too complicated and

84
00:04:03,829 --> 00:04:06,620
there are easier ways to do it after you

85
00:04:06,620 --> 00:04:09,079
get the shell of course you can't really

86
00:04:09,079 --> 00:04:11,419
do too much because there's no allies

87
00:04:11,419 --> 00:04:13,750
command but it's it's well known that

88
00:04:13,750 --> 00:04:16,039
they have somehow managed to enable

89
00:04:16,039 --> 00:04:18,949
batch completion there so if you press

90
00:04:18,949 --> 00:04:21,529
tab for example type cat space tap tab

91
00:04:21,529 --> 00:04:23,690
you get the list of the files in the

92
00:04:23,690 --> 00:04:26,539
folder or you can actually upload that

93
00:04:26,539 --> 00:04:28,509
your own busybox after you routed that

94
00:04:28,509 --> 00:04:33,620
machine the question of course is how do

95
00:04:33,620 --> 00:04:40,039
you do that we presented a way to do it

96
00:04:40,039 --> 00:04:43,430
a couple of months ago now in this

97
00:04:43,430 --> 00:04:44,770
presentation I called the old way

98
00:04:44,770 --> 00:04:48,190
because well we we made the better way

99
00:04:48,190 --> 00:04:50,509
okay let me let me show you a quick demo

100
00:04:50,509 --> 00:04:57,979
of how the old way looks it's VirtualBox

101
00:04:57,979 --> 00:05:01,690
appliance I will start it up

102
00:05:11,529 --> 00:05:15,289
okay so it is quite quite easy to use

103
00:05:15,289 --> 00:05:18,999
relatively to reflashing your your chips

104
00:05:18,999 --> 00:05:22,300
basically you answer the questions right

105
00:05:22,300 --> 00:05:26,180
in this case we can say yes the cool

106
00:05:26,180 --> 00:05:27,589
thing about about the appliance is if

107
00:05:27,589 --> 00:05:28,849
you say no it actually shows you the

108
00:05:28,849 --> 00:05:33,169
password you can you can download that

109
00:05:33,169 --> 00:05:38,930
online okay so then you plug in it to

110
00:05:38,930 --> 00:05:41,120
port 2 you make sure that your virtual

111
00:05:41,120 --> 00:05:43,300
machine is connected to the right port

112
00:05:43,300 --> 00:05:48,919
and given through the parameters I do

113
00:05:48,919 --> 00:05:50,509
hope that the password was empty for

114
00:05:50,509 --> 00:05:59,379
this one oh yeah it was ok cool so now

115
00:05:59,379 --> 00:06:02,270
it will get an IP address now we have to

116
00:06:02,270 --> 00:06:04,370
re plug at the port one so a bit of

117
00:06:04,370 --> 00:06:08,689
fiddling there and to actually use open

118
00:06:08,689 --> 00:06:13,069
wrt image to boot it via net boot and

119
00:06:13,069 --> 00:06:15,499
then do all the magic so it works is

120
00:06:15,499 --> 00:06:19,189
doable but it's slow and turns out it's

121
00:06:19,189 --> 00:06:20,749
not that easy because there is an easier

122
00:06:20,749 --> 00:06:25,969
way by the way this presentation I said

123
00:06:25,969 --> 00:06:27,979
it up so that I start with the demos the

124
00:06:27,979 --> 00:06:29,330
fun demos there will be more demos later

125
00:06:29,330 --> 00:06:30,800
on but the fun demos in the beginning

126
00:06:30,800 --> 00:06:33,620
and then I in the end I you get to hear

127
00:06:33,620 --> 00:06:36,159
how it works

128
00:06:40,659 --> 00:06:45,080
okay so there's open wrt now running on

129
00:06:45,080 --> 00:06:47,229
the device

130
00:06:51,980 --> 00:06:54,570
and now when we switch back to port two

131
00:06:54,570 --> 00:06:58,160
it will actually try to fetch a script

132
00:06:58,160 --> 00:07:01,620
from the appliance the virtual appliance

133
00:07:01,620 --> 00:07:04,920
that will create the file and the devil

134
00:07:04,920 --> 00:07:06,300
login file and of course upload the busy

135
00:07:06,300 --> 00:07:09,060
books for us sometimes it takes some

136
00:07:09,060 --> 00:07:10,950
time to connect but usually and then it

137
00:07:10,950 --> 00:07:12,780
always does

138
00:07:12,780 --> 00:07:17,580
ok while it's happening let me I will

139
00:07:17,580 --> 00:07:25,710
get back to that when it's done so the

140
00:07:25,710 --> 00:07:27,810
problem is VirtualBox appliance is that

141
00:07:27,810 --> 00:07:29,910
the current version works only with a

142
00:07:29,910 --> 00:07:31,770
very limited set of devices the CPU has

143
00:07:31,770 --> 00:07:35,640
to be a r9 3 4 4 and you have to have at

144
00:07:35,640 --> 00:07:37,320
least two either and ports it is in

145
00:07:37,320 --> 00:07:39,060
principle possible to overcome those

146
00:07:39,060 --> 00:07:40,680
both of those obstacles and we will

147
00:07:40,680 --> 00:07:42,780
probably do that in the future when the

148
00:07:42,780 --> 00:07:44,790
new way doesn't work anymore oh I guess

149
00:07:44,790 --> 00:07:47,700
it's done yes

150
00:07:47,700 --> 00:07:49,440
as we can see everything is done we got

151
00:07:49,440 --> 00:07:52,410
our busybox we got our double access and

152
00:07:52,410 --> 00:07:53,910
and that's it and router is now

153
00:07:53,910 --> 00:07:57,660
rebooting so that's basically it it took

154
00:07:57,660 --> 00:07:59,760
like I think 2 2 minutes at least try to

155
00:07:59,760 --> 00:08:02,160
take some time but now after we've done

156
00:08:02,160 --> 00:08:06,770
that I think we can connect to it

157
00:08:15,710 --> 00:08:21,750
okay and there we are right we have a

158
00:08:21,750 --> 00:08:26,430
life scent and everything works but if I

159
00:08:26,430 --> 00:08:27,900
would try it on this device for example

160
00:08:27,900 --> 00:08:29,970
it would not work because the city is

161
00:08:29,970 --> 00:08:31,760
different and we couldn't be bothered to

162
00:08:31,760 --> 00:08:35,059
compile the damn colonel correctly

163
00:08:35,059 --> 00:08:37,880
there's a new way

164
00:08:37,880 --> 00:08:40,890
it's a bash and Python script

165
00:08:40,890 --> 00:08:42,779
combination you don't need the virtual

166
00:08:42,779 --> 00:08:46,200
appliance you can use any Linux device

167
00:08:46,200 --> 00:08:48,420
it will work regardless of architecture

168
00:08:48,420 --> 00:08:50,100
so it will work even on the more more

169
00:08:50,100 --> 00:08:53,880
obscure versions of router s it's very

170
00:08:53,880 --> 00:08:56,310
fast in comparison and you can do remote

171
00:08:56,310 --> 00:08:58,020
jail or remote jailbreak you don't

172
00:08:58,020 --> 00:08:59,400
actually have to have the device with

173
00:08:59,400 --> 00:09:02,910
you you can you can jailbreak your

174
00:09:02,910 --> 00:09:05,160
device at home by the way if anyone has

175
00:09:05,160 --> 00:09:06,750
my product routers I want jailbroke and

176
00:09:06,750 --> 00:09:08,430
I'm gonna do a demo right now you can

177
00:09:08,430 --> 00:09:10,260
bring it up and I can jailbreak yours or

178
00:09:10,260 --> 00:09:12,930
if not that will Kjellberg this one so

179
00:09:12,930 --> 00:09:15,630
minuses are those that it will not help

180
00:09:15,630 --> 00:09:18,060
you recover lost passwords and it will

181
00:09:18,060 --> 00:09:19,140
probably get patched to another

182
00:09:19,140 --> 00:09:21,089
presentation but for all versions it

183
00:09:21,089 --> 00:09:29,610
will work so demo just plug into a port

184
00:09:29,610 --> 00:09:32,160
that's a local network port we could

185
00:09:32,160 --> 00:09:34,170
plug on the internet word but there is a

186
00:09:34,170 --> 00:09:37,140
firewall to connect I connect my laptop

187
00:09:37,140 --> 00:09:41,660
not the virtual appliance to the network

188
00:09:45,140 --> 00:09:49,410
larger font or is it good good font is

189
00:09:49,410 --> 00:09:53,959
good yeah okay so

190
00:10:10,990 --> 00:10:13,540
we have exploit underscore fooled at

191
00:10:13,540 --> 00:10:15,430
this age in a similar fashion as the

192
00:10:15,430 --> 00:10:17,620
virtual appliance we need to specify the

193
00:10:17,620 --> 00:10:27,130
IP address I would guess is this one you

194
00:10:27,130 --> 00:10:29,260
know user name in the password now this

195
00:10:29,260 --> 00:10:32,080
will not allow you to get the password

196
00:10:32,080 --> 00:10:34,090
because of course it's doing with our

197
00:10:34,090 --> 00:10:35,740
network this would be a huge hack if if

198
00:10:35,740 --> 00:10:39,490
we did that right and then it because

199
00:10:39,490 --> 00:10:42,730
jailbreak process and it's done so now

200
00:10:42,730 --> 00:10:47,950
this device is jailbroken and that's it

201
00:10:47,950 --> 00:10:50,440
now it also reboot the device in order

202
00:10:50,440 --> 00:10:52,960
to reconnect it again and upload the

203
00:10:52,960 --> 00:10:56,440
busybox binary and so that we can use a

204
00:10:56,440 --> 00:10:58,810
less and their sales but jailbreak

205
00:10:58,810 --> 00:11:02,500
itself is that quick if you take a look

206
00:11:02,500 --> 00:11:04,900
at the output here you can already guess

207
00:11:04,900 --> 00:11:07,240
what what's the vector here this we're

208
00:11:07,240 --> 00:11:11,610
using okay now while it finishes again I

209
00:11:11,610 --> 00:11:22,330
will proceed with the presentation which

210
00:11:22,330 --> 00:11:25,150
are the tools so the tools that we

211
00:11:25,150 --> 00:11:27,520
actually are presenting and that will be

212
00:11:27,520 --> 00:11:29,800
made available on github after the

213
00:11:29,800 --> 00:11:31,630
presentation some of them already are

214
00:11:31,630 --> 00:11:33,970
available by the way but those have been

215
00:11:33,970 --> 00:11:39,630
there for months or two so for sourcing

216
00:11:39,630 --> 00:11:44,410
the package files from the internet so

217
00:11:44,410 --> 00:11:45,910
that you don't have to actually dump a

218
00:11:45,910 --> 00:11:48,730
router or by router you can actually get

219
00:11:48,730 --> 00:11:50,740
those files positioned of course very

220
00:11:50,740 --> 00:11:57,030
simple script let me demo those to you

221
00:11:58,500 --> 00:12:00,550
alright it's recollected here it's

222
00:12:00,550 --> 00:12:03,250
offering additional utilities which is

223
00:12:03,250 --> 00:12:05,700
busybox

224
00:12:15,790 --> 00:12:20,720
so for getting the packages we can we

225
00:12:20,720 --> 00:12:24,010
have this shield script

226
00:12:35,330 --> 00:12:37,640
okay so first of all it it ended here we

227
00:12:37,640 --> 00:12:46,490
can connect to it of course if we type

228
00:12:46,490 --> 00:12:50,660
the user incorrectly we have a list and

229
00:12:50,660 --> 00:12:51,950
we have we have everything everything's

230
00:12:51,950 --> 00:13:01,430
working here right now for getting NP

231
00:13:01,430 --> 00:13:02,660
case you can basically just go to the

232
00:13:02,660 --> 00:13:04,370
web page and download them but somehow

233
00:13:04,370 --> 00:13:06,740
they deny access to some of the old

234
00:13:06,740 --> 00:13:08,540
files basically you can get about 20% of

235
00:13:08,540 --> 00:13:10,760
the versions only so of course what I

236
00:13:10,760 --> 00:13:12,860
did is did a bit of Google cracking or

237
00:13:12,860 --> 00:13:16,490
googled or chemicals called and that is

238
00:13:16,490 --> 00:13:18,079
some URLs and it just tests all of them

239
00:13:18,079 --> 00:13:19,700
well I well I get of course I can get

240
00:13:19,700 --> 00:13:22,100
malware that way quite easily but now

241
00:13:22,100 --> 00:13:23,959
it's not like I'm running it anyway I'm

242
00:13:23,959 --> 00:13:28,700
just reversing them so I would like to

243
00:13:28,700 --> 00:13:31,700
get some obscure version like six point

244
00:13:31,700 --> 00:13:39,790
three point four let's hope it exists

245
00:13:47,660 --> 00:13:50,450
it will go through all the all the URLs

246
00:13:50,450 --> 00:13:52,460
and try to download it and as soon as it

247
00:13:52,460 --> 00:13:56,420
gets it it will stop okay it didn't find

248
00:13:56,420 --> 00:14:04,460
it all right here 633 - for example

249
00:14:04,460 --> 00:14:08,720
exists and now we have it as a file but

250
00:14:08,720 --> 00:14:10,760
it's back it's our proprietary format so

251
00:14:10,760 --> 00:14:14,230
the other script that you can use is

252
00:14:18,010 --> 00:14:22,150
reverse NTK we specify the package file

253
00:14:22,150 --> 00:14:24,440
it depends on two things

254
00:14:24,440 --> 00:14:26,750
Olympic a script and a squash the script

255
00:14:26,750 --> 00:14:29,420
and basically what we get is a folder

256
00:14:29,420 --> 00:14:30,860
with everything it's inside the file

257
00:14:30,860 --> 00:14:33,520
system basically

258
00:14:44,990 --> 00:14:47,810
here are all the fun boundaries they are

259
00:14:47,810 --> 00:14:50,839
quite small in size so reversing them is

260
00:14:50,839 --> 00:15:07,160
not really a huge issue okay so next

261
00:15:07,160 --> 00:15:09,680
thing the kernel patches if we want to

262
00:15:09,680 --> 00:15:11,180
go the other way and if we don't want

263
00:15:11,180 --> 00:15:12,860
reverse their boundaries but if we want

264
00:15:12,860 --> 00:15:16,130
to look at the real source code they use

265
00:15:16,130 --> 00:15:21,020
line Linux so it is GPL thingy so they

266
00:15:21,020 --> 00:15:23,620
should be giving you out kernel passes

267
00:15:23,620 --> 00:15:25,940
even though the license says that you

268
00:15:25,940 --> 00:15:29,330
have to contact them by post and send

269
00:15:29,330 --> 00:15:31,339
them 20 or 30 dollars and then we'll

270
00:15:31,339 --> 00:15:34,370
send the CD out to you in actuality if

271
00:15:34,370 --> 00:15:36,140
you send them an email they send you the

272
00:15:36,140 --> 00:15:38,959
link to download those patches but those

273
00:15:38,959 --> 00:15:41,560
are quite old patches then again there's

274
00:15:41,560 --> 00:15:45,800
one guy up on github who managed to get

275
00:15:45,800 --> 00:15:49,040
new patches from them and you can you

276
00:15:49,040 --> 00:15:51,350
can go there and you can you can work

277
00:15:51,350 --> 00:15:53,029
with those and they also have config

278
00:15:53,029 --> 00:15:54,260
files for different architectures which

279
00:15:54,260 --> 00:15:58,550
is super good because it allows you to

280
00:15:58,550 --> 00:16:01,310
not to more easily compile the kernel

281
00:16:01,310 --> 00:16:04,839
let's let's put it this way Oh

282
00:16:06,670 --> 00:16:09,230
Annamarie of the boot process of the

283
00:16:09,230 --> 00:16:11,870
route of router s it's important to

284
00:16:11,870 --> 00:16:14,690
understand this so that you can so you

285
00:16:14,690 --> 00:16:15,920
know where to put your custom

286
00:16:15,920 --> 00:16:17,839
executables if you want to achieve

287
00:16:17,839 --> 00:16:20,240
interoperability with similar to the NS

288
00:16:20,240 --> 00:16:22,250
mask for example it doesn't support it

289
00:16:22,250 --> 00:16:27,529
right now so it's basically a Linux run

290
00:16:27,529 --> 00:16:29,660
process right we have kernel it runs the

291
00:16:29,660 --> 00:16:32,029
init file and then it runs file called

292
00:16:32,029 --> 00:16:35,329
et Cie or our CD RC start in case of

293
00:16:35,329 --> 00:16:38,810
rotor S which then goes to e TC r CD R

294
00:16:38,810 --> 00:16:41,570
and E and all the startup scripts are

295
00:16:41,570 --> 00:16:45,620
are running it's a standard process nava

296
00:16:45,620 --> 00:16:48,140
bit louder is the main executable that

297
00:16:48,140 --> 00:16:49,850
loads everything else it also monitors

298
00:16:49,850 --> 00:16:53,510
all those reputable so in case one of

299
00:16:53,510 --> 00:16:57,199
the vegetable dyes Nobilo development we

300
00:16:57,199 --> 00:16:58,340
restarted

301
00:16:58,340 --> 00:17:01,880
there is also watchdog watchdogs get

302
00:17:01,880 --> 00:17:04,069
police started by the loader executable

303
00:17:04,069 --> 00:17:08,140
and it monitors the loader and

304
00:17:08,140 --> 00:17:10,849
everything else so if the loader is

305
00:17:10,849 --> 00:17:12,949
unable to restart the process either

306
00:17:12,949 --> 00:17:16,010
because it just fails or you actually

307
00:17:16,010 --> 00:17:16,939
killed the loader

308
00:17:16,939 --> 00:17:18,560
what's that will detect it and reboot

309
00:17:18,560 --> 00:17:20,390
the router which is cool compared to

310
00:17:20,390 --> 00:17:24,740
smother manufacturers now the question

311
00:17:24,740 --> 00:17:26,089
of course is when you put your custom

312
00:17:26,089 --> 00:17:29,560
binary on which folder do you put it in

313
00:17:29,560 --> 00:17:33,370
luckily for us you can put almost

314
00:17:33,370 --> 00:17:36,290
anywhere if you take a look at this path

315
00:17:36,290 --> 00:17:37,010
variable

316
00:17:37,010 --> 00:17:40,610
it adds the output of binary called path

317
00:17:40,610 --> 00:17:45,110
to the pass and what this binary does is

318
00:17:45,110 --> 00:17:47,360
it looks for specified pass in prefix

319
00:17:47,360 --> 00:17:49,660
directories so if we go back one slide

320
00:17:49,660 --> 00:17:54,260
this searches for slash bin and slash

321
00:17:54,260 --> 00:17:56,750
has been directory so if you make a

322
00:17:56,750 --> 00:17:58,220
directory anywhere in the file system

323
00:17:58,220 --> 00:18:00,050
that's called boehner has been it will

324
00:18:00,050 --> 00:18:02,060
be added as a path here we can see how

325
00:18:02,060 --> 00:18:05,929
that binary works now this is a

326
00:18:05,929 --> 00:18:07,580
high-level overview of the router

327
00:18:07,580 --> 00:18:10,460
ecosystem this slide have been a part of

328
00:18:10,460 --> 00:18:13,429
every presentation we've done so far but

329
00:18:13,429 --> 00:18:21,950
there is a change so back up now is not

330
00:18:21,950 --> 00:18:24,020
only the access target meaning the

331
00:18:24,020 --> 00:18:26,929
things that we might and that an

332
00:18:26,929 --> 00:18:28,429
attacker might want to get out of our

333
00:18:28,429 --> 00:18:30,380
system but it's also the access vector

334
00:18:30,380 --> 00:18:33,470
meaning it's a way for an attacker to

335
00:18:33,470 --> 00:18:35,480
get into the system which is the exploit

336
00:18:35,480 --> 00:18:40,270
that we that I showed at the beginning a

337
00:18:40,750 --> 00:18:44,080
quick overview of the ntk format itself

338
00:18:44,080 --> 00:18:46,310
we've discussed this in more detail in

339
00:18:46,310 --> 00:18:48,140
other presentations but since we are

340
00:18:48,140 --> 00:18:50,330
talking here about all the tools I think

341
00:18:50,330 --> 00:18:52,130
it's important to include it in the

342
00:18:52,130 --> 00:18:56,120
areal so it's binary format it consists

343
00:18:56,120 --> 00:18:57,530
of what you see here the header in red

344
00:18:57,530 --> 00:19:00,860
file size in green then there are parts

345
00:19:00,860 --> 00:19:06,050
and footer each each part consists of

346
00:19:06,050 --> 00:19:08,240
the part type which is of length short

347
00:19:08,240 --> 00:19:10,710
and the payload size which is long or

348
00:19:10,710 --> 00:19:12,570
bites and then the payload of the

349
00:19:12,570 --> 00:19:14,669
specified length you can see the example

350
00:19:14,669 --> 00:19:18,720
there in the image the orange part is a

351
00:19:18,720 --> 00:19:22,350
checksum so you can't really go and

352
00:19:22,350 --> 00:19:24,090
create your own NPK files at this point

353
00:19:24,090 --> 00:19:26,340
so you can't extend Rudra's that way

354
00:19:26,340 --> 00:19:27,960
that's why we have to look at other

355
00:19:27,960 --> 00:19:32,220
options we've identified at least two

356
00:19:32,220 --> 00:19:33,779
types of current and vacation use

357
00:19:33,779 --> 00:19:35,580
there's a package entik and restriction

358
00:19:35,580 --> 00:19:38,190
and peeking and header and footer is

359
00:19:38,190 --> 00:19:40,169
different for those in previous slide we

360
00:19:40,169 --> 00:19:42,809
saw back gently came restriction PK is

361
00:19:42,809 --> 00:19:46,140
used for resellers to limit the devices

362
00:19:46,140 --> 00:19:48,120
for example if I wanted to sell this

363
00:19:48,120 --> 00:19:49,710
router in the United States legally I

364
00:19:49,710 --> 00:19:51,600
would need to install a restriction and

365
00:19:51,600 --> 00:19:53,429
PK that would limit the frequencies and

366
00:19:53,429 --> 00:19:57,080
the power used for the radios and

367
00:19:57,080 --> 00:19:59,549
therefore it's logical that restriction

368
00:19:59,549 --> 00:20:01,080
packages after installed are invisible

369
00:20:01,080 --> 00:20:04,590
they don't show up to the user one

370
00:20:04,590 --> 00:20:06,960
attack that we can do but I will not

371
00:20:06,960 --> 00:20:08,880
demo it because we haven't found any

372
00:20:08,880 --> 00:20:10,740
good use for it but we can actually swap

373
00:20:10,740 --> 00:20:13,380
out the header and the footer to the

374
00:20:13,380 --> 00:20:14,580
different type and we can install a

375
00:20:14,580 --> 00:20:17,220
classical package as a restriction or we

376
00:20:17,220 --> 00:20:18,539
can SL restriction visible as a

377
00:20:18,539 --> 00:20:20,700
classical package it works but it

378
00:20:20,700 --> 00:20:22,200
doesn't really produce anything

379
00:20:22,200 --> 00:20:25,799
interesting oh yeah here here's an

380
00:20:25,799 --> 00:20:27,510
example of a restriction being installed

381
00:20:27,510 --> 00:20:32,909
visibly as a classical package these are

382
00:20:32,909 --> 00:20:35,279
all the part types that we've identified

383
00:20:35,279 --> 00:20:40,380
for ntk files if we look closely we can

384
00:20:40,380 --> 00:20:44,700
see that part types from 0a up to 0f are

385
00:20:44,700 --> 00:20:49,470
unused my guess that my guess here is

386
00:20:49,470 --> 00:20:52,140
that's because the guy or girl

387
00:20:52,140 --> 00:20:55,080
responsible for actually creating new

388
00:20:55,080 --> 00:20:57,390
part types forgot that there were in hex

389
00:20:57,390 --> 00:20:59,669
and they were just going decimal and and

390
00:20:59,669 --> 00:21:01,919
that's why we don't have those 0a up to

391
00:21:01,919 --> 00:21:08,220
0f stop out rip that's an interesting

392
00:21:08,220 --> 00:21:10,169
access target and that's why we looked

393
00:21:10,169 --> 00:21:12,120
at it and try to find out found it--

394
00:21:12,120 --> 00:21:14,750
sorry and try to find out what's inside

395
00:21:14,750 --> 00:21:18,929
so support rip itself stop out stands

396
00:21:18,929 --> 00:21:21,090
for support output that's a file that

397
00:21:21,090 --> 00:21:23,250
they're official support will

398
00:21:23,250 --> 00:21:25,560
ask you to send them in case you're

399
00:21:25,560 --> 00:21:26,910
having some difficulties that they want

400
00:21:26,910 --> 00:21:29,750
to debug and that's how you create it

401
00:21:29,750 --> 00:21:33,300
now dot rip stands either for

402
00:21:33,300 --> 00:21:34,980
ridiculously intricate format as we will

403
00:21:34,980 --> 00:21:37,710
see in the future slides or router s

404
00:21:37,710 --> 00:21:39,870
information file there relax enough

405
00:21:39,870 --> 00:21:41,520
little documentation on either of those

406
00:21:41,520 --> 00:21:43,290
what's up out or it means that those are

407
00:21:43,290 --> 00:21:46,580
just our guesses now from outside

408
00:21:46,580 --> 00:21:49,980
support ship looks as looks as follows

409
00:21:49,980 --> 00:21:52,770
it contains multiple router s support

410
00:21:52,770 --> 00:21:55,500
sections then ASCII file actually and

411
00:21:55,500 --> 00:21:56,790
then we have something that looks like

412
00:21:56,790 --> 00:22:00,630
base64 well if we try to decode the

413
00:22:00,630 --> 00:22:04,470
basics before we get garbage what it

414
00:22:04,470 --> 00:22:10,190
actually is they swapped bits around

415
00:22:10,190 --> 00:22:13,200
into three bytes in three sequential

416
00:22:13,200 --> 00:22:16,680
byte here's a map that we found a couple

417
00:22:16,680 --> 00:22:20,310
years ago already I think and if we swap

418
00:22:20,310 --> 00:22:22,470
the bits around first and then the

419
00:22:22,470 --> 00:22:25,590
basics for decoding what we get for each

420
00:22:25,590 --> 00:22:28,620
section is an ASCII string that is the

421
00:22:28,620 --> 00:22:30,630
name of the section as zero byte and

422
00:22:30,630 --> 00:22:32,730
then content that's compressed using

423
00:22:32,730 --> 00:22:35,310
zealand so support trip decoder is

424
00:22:35,310 --> 00:22:38,160
actually online it's available so it has

425
00:22:38,160 --> 00:22:39,690
been for some time already in the

426
00:22:39,690 --> 00:22:44,670
repository now if we do the code it here

427
00:22:44,670 --> 00:22:47,610
is what we see inside there's your call

428
00:22:47,610 --> 00:22:49,950
configuration there's a /proc folder of

429
00:22:49,950 --> 00:22:52,440
your system memory addresses your log

430
00:22:52,440 --> 00:22:54,810
files and much much more

431
00:22:54,810 --> 00:22:57,060
I said let me show you two quick demos

432
00:22:57,060 --> 00:22:59,450
here

433
00:23:12,230 --> 00:23:18,950
this is a pout decoder I think we have

434
00:23:18,950 --> 00:23:23,989
some files yeah okay here is a brief

435
00:23:23,989 --> 00:23:33,169
file and it decodes it folder is created

436
00:23:33,169 --> 00:23:36,850
and we have all the files in there

437
00:23:44,020 --> 00:23:46,570
these five files file five sections that

438
00:23:46,570 --> 00:23:48,280
begin with a dot our hidden sections and

439
00:23:48,280 --> 00:23:50,410
those don't show up in their official

440
00:23:50,410 --> 00:23:52,360
tools that they make available to third

441
00:23:52,360 --> 00:23:55,660
parties let's hope you take a look at

442
00:23:55,660 --> 00:24:01,030
this there's a debug look for example

443
00:24:01,030 --> 00:24:03,280
everything is in there as I said the

444
00:24:03,280 --> 00:24:06,450
other thing I want to show you is an

445
00:24:06,450 --> 00:24:10,480
exploit that we created the using SAP

446
00:24:10,480 --> 00:24:13,900
Arif encoder and that is fixed very

447
00:24:13,900 --> 00:24:16,930
quickly they fixed it I think in I think

448
00:24:16,930 --> 00:24:19,090
it took them less than 24 hours to fix

449
00:24:19,090 --> 00:24:25,180
this very very responsive and so what we

450
00:24:25,180 --> 00:24:27,220
see here attacker is in top on top right

451
00:24:27,220 --> 00:24:30,670
victim is on bottom left victim has been

452
00:24:30,670 --> 00:24:33,640
sent a bad supportive file by an

453
00:24:33,640 --> 00:24:35,830
attacker and the victim is about to

454
00:24:35,830 --> 00:24:41,500
upload it in his account and the type of

455
00:24:41,500 --> 00:24:43,360
computer monitors web server that

456
00:24:43,360 --> 00:24:45,520
expects a session cookie as soon as it's

457
00:24:45,520 --> 00:24:47,980
uploaded XSS gets executed an attacker

458
00:24:47,980 --> 00:24:48,970
gets a session cookie

459
00:24:48,970 --> 00:24:50,740
so if victim wouldn't press logout

460
00:24:50,740 --> 00:24:54,280
victim the attacker gets access to the

461
00:24:54,280 --> 00:24:55,690
credit card information of the victim

462
00:24:55,690 --> 00:24:57,160
all the license keys that the victim has

463
00:24:57,160 --> 00:24:58,810
paid for and of course order linear

464
00:24:58,810 --> 00:25:03,790
devices order new license keys that's

465
00:25:03,790 --> 00:25:11,920
intact we did in the middle of 2017 now

466
00:25:11,920 --> 00:25:17,950
the config files configuration for your

467
00:25:17,950 --> 00:25:21,220
micro device is stored in /rv slash

468
00:25:21,220 --> 00:25:24,250
store as pairs of files each

469
00:25:24,250 --> 00:25:26,710
configuration set consists of an index

470
00:25:26,710 --> 00:25:31,480
and data dot idiqs is an index dot dot

471
00:25:31,480 --> 00:25:36,240
that is data and there's also Batman

472
00:25:36,870 --> 00:25:43,260
idiqs the index format consists of three

473
00:25:43,260 --> 00:25:47,800
entries per per record

474
00:25:47,800 --> 00:25:49,960
so that 12 bytes here because all of

475
00:25:49,960 --> 00:25:53,590
those are long it's important to parse

476
00:25:53,590 --> 00:25:56,500
that eeks format - because that format

477
00:25:56,500 --> 00:25:59,830
actually does not deprive mint itself

478
00:25:59,830 --> 00:26:03,280
automatically meaning that that format

479
00:26:03,280 --> 00:26:05,710
may contain previous data like old

480
00:26:05,710 --> 00:26:10,620
passwords for example that format is

481
00:26:10,620 --> 00:26:12,070
quite easy

482
00:26:12,070 --> 00:26:16,830
so there's length of the section and

483
00:26:16,830 --> 00:26:19,690
there's a record contains complicating

484
00:26:19,690 --> 00:26:23,470
and type I will I will talk a bit about

485
00:26:23,470 --> 00:26:25,300
it a bit more when I show you the tool

486
00:26:25,300 --> 00:26:29,520
to actually parse those files

487
00:26:30,330 --> 00:26:33,760
peculiarities of this format is that

488
00:26:33,760 --> 00:26:37,990
field IDs are shared with web it's

489
00:26:37,990 --> 00:26:40,180
binary format you don't get like text

490
00:26:40,180 --> 00:26:41,680
saying IP address and then they appear

491
00:26:41,680 --> 00:26:44,290
dress you get you get an entry saying

492
00:26:44,290 --> 00:26:47,920
this is field number one a5 and you have

493
00:26:47,920 --> 00:26:49,300
to understand that it contains the IP

494
00:26:49,300 --> 00:26:52,420
address and the other interesting thing

495
00:26:52,420 --> 00:26:53,800
is that in box protocol which is used

496
00:26:53,800 --> 00:26:55,900
for administering these devices from

497
00:26:55,900 --> 00:26:58,960
Windows machines seem to be derived from

498
00:26:58,960 --> 00:27:01,450
that format which suggests to us that

499
00:27:01,450 --> 00:27:03,700
maybe they are actually writing that

500
00:27:03,700 --> 00:27:06,070
file directly from wind box which is

501
00:27:06,070 --> 00:27:12,100
quite dangerous so demo of empty dub

502
00:27:12,100 --> 00:27:14,459
decoder

503
00:27:30,930 --> 00:27:36,810
empty that the counter is a file that

504
00:27:36,810 --> 00:27:39,030
you can include in your you can import

505
00:27:39,030 --> 00:27:40,710
in your Python project and will

506
00:27:40,710 --> 00:27:42,480
automatically deal with all all the

507
00:27:42,480 --> 00:27:44,960
craziness of idiqs and that file for you

508
00:27:44,960 --> 00:27:48,680
let me show you what I mean

509
00:27:55,750 --> 00:27:58,360
so this is a script that uses the

510
00:27:58,360 --> 00:28:04,270
decoder and it's quite easy to use

511
00:28:04,270 --> 00:28:06,760
actually we define some variables here

512
00:28:06,760 --> 00:28:09,850
and this is where we invoke the decoder

513
00:28:09,850 --> 00:28:11,590
we specify the DAT file and the index

514
00:28:11,590 --> 00:28:13,840
file and we don't need anything else

515
00:28:13,840 --> 00:28:19,210
basically we can already print it so

516
00:28:19,210 --> 00:28:25,330
even if I deleted all that I could run

517
00:28:25,330 --> 00:28:30,970
this and we get we get their IDs and we

518
00:28:30,970 --> 00:28:34,020
get the values but it's not too readable

519
00:28:34,020 --> 00:28:37,090
so what we can do is we can in easy way

520
00:28:37,090 --> 00:28:42,159
actually map the names to understandable

521
00:28:42,159 --> 00:28:46,900
labels and we can add filters which say

522
00:28:46,900 --> 00:28:49,630
that 0 for example should be always now

523
00:28:49,630 --> 00:28:51,909
and 1 should be yes we can add filters

524
00:28:51,909 --> 00:28:54,669
that modify the content here the

525
00:28:54,669 --> 00:28:57,280
function I defined it will only print

526
00:28:57,280 --> 00:28:59,260
out a string on the screen if it

527
00:28:59,260 --> 00:29:00,820
actually contains only printable

528
00:29:00,820 --> 00:29:04,510
characters and we can for example print

529
00:29:04,510 --> 00:29:06,520
some of the values in text and so on if

530
00:29:06,520 --> 00:29:11,200
you run this now we see that it is much

531
00:29:11,200 --> 00:29:21,070
more understandable now and actually we

532
00:29:21,070 --> 00:29:24,130
can get these mappings from dot j

533
00:29:24,130 --> 00:29:27,700
jiggy-jiggy files let me show you what I

534
00:29:27,700 --> 00:29:29,940
mean

535
00:29:34,630 --> 00:29:38,760
I will launch my browser

536
00:29:45,870 --> 00:29:49,750
now that fig contains some files that

537
00:29:49,750 --> 00:29:58,150
are used by the interface let me look up

538
00:29:58,150 --> 00:30:01,060
a name of the file quickly pop-tart

539
00:30:01,060 --> 00:30:12,520
memory memory okay so for example there

540
00:30:12,520 --> 00:30:18,510
is a file called NTP dot not here

541
00:30:29,230 --> 00:30:32,240
so we can't find them in a moment I will

542
00:30:32,240 --> 00:30:36,710
show you a locker local copy then but

543
00:30:36,710 --> 00:30:43,549
they are there believe me okay so this

544
00:30:43,549 --> 00:30:45,470
is how it looks those are JK files you

545
00:30:45,470 --> 00:30:50,179
can download them from your or anyone's

546
00:30:50,179 --> 00:30:51,499
router you don't need the password

547
00:30:51,499 --> 00:30:53,870
download them and those are a bit

548
00:30:53,870 --> 00:31:01,669
similar to JSON format and in there we

549
00:31:01,669 --> 00:31:06,649
have mappings between IDs and the names

550
00:31:06,649 --> 00:31:09,379
of the fields so we can parse those and

551
00:31:09,379 --> 00:31:11,389
we can easily use them unfortunately we

552
00:31:11,389 --> 00:31:12,889
are not including than JK files in the

553
00:31:12,889 --> 00:31:14,450
repository of course because we don't

554
00:31:14,450 --> 00:31:16,639
own them we don't have the right to do

555
00:31:16,639 --> 00:31:18,668
that

556
00:31:19,149 --> 00:31:23,169
so the password of course it saw is also

557
00:31:23,169 --> 00:31:30,080
inside the folder user that and user IDs

558
00:31:30,080 --> 00:31:33,080
and it's even encrypted so it's actually

559
00:31:33,080 --> 00:31:35,200
cached

560
00:31:35,200 --> 00:31:41,779
salted it's 75 but actually that's not

561
00:31:41,779 --> 00:31:43,279
the password that's that's just the key

562
00:31:43,279 --> 00:31:47,240
so that they derive the key by salting

563
00:31:47,240 --> 00:31:49,429
and hashing your username and then

564
00:31:49,429 --> 00:31:53,929
applying md5 so here is the algorithm

565
00:31:53,929 --> 00:31:58,970
I want to let this sink in so the K is

566
00:31:58,970 --> 00:32:00,499
derived from the username which is

567
00:32:00,499 --> 00:32:04,070
usually admin or you can just look at

568
00:32:04,070 --> 00:32:06,440
what a person is typing and the password

569
00:32:06,440 --> 00:32:09,169
is the password stored in the file for

570
00:32:09,169 --> 00:32:13,249
the derived key meaning that it's

571
00:32:13,249 --> 00:32:15,830
actually very very much reversible as

572
00:32:15,830 --> 00:32:18,909
soon as you get the files you can easily

573
00:32:18,909 --> 00:32:22,460
deduce the password now for this

574
00:32:22,460 --> 00:32:28,610
presentation I tried and took a look at

575
00:32:28,610 --> 00:32:31,070
how did they derive that static part

576
00:32:31,070 --> 00:32:34,549
where did that static part come from so

577
00:32:34,549 --> 00:32:38,269
I made a heat map of a keyboard it looks

578
00:32:38,269 --> 00:32:39,740
like someone just took two hands and

579
00:32:39,740 --> 00:32:42,460
mashed it on the keyboard to earth

580
00:32:42,460 --> 00:32:45,910
times and and that's that's how we got

581
00:32:45,910 --> 00:32:55,720
it okay so as the password - what's the

582
00:32:55,720 --> 00:32:59,020
password - let's let's get rid of all

583
00:32:59,020 --> 00:33:05,670
that now force password tool we will use

584
00:33:06,330 --> 00:33:09,910
this it's also on github already it's

585
00:33:09,910 --> 00:33:11,110
been there

586
00:33:11,110 --> 00:33:15,510
now this Python file has a hard-coded

587
00:33:15,510 --> 00:33:19,360
paths to the files but obviously the

588
00:33:19,360 --> 00:33:23,230
model github doesn't and and this is how

589
00:33:23,230 --> 00:33:24,580
it looks it basically outputs you in a

590
00:33:24,580 --> 00:33:26,470
need format comparable to the one actual

591
00:33:26,470 --> 00:33:28,090
use bar address and you get the

592
00:33:28,090 --> 00:33:31,990
passwords of course decrypted and and

593
00:33:31,990 --> 00:33:33,370
everything else that's in there in that

594
00:33:33,370 --> 00:33:41,080
file and it uses it uses the same Python

595
00:33:41,080 --> 00:33:45,419
library that I showed you previously

596
00:33:52,179 --> 00:33:55,100
finally last thing I want to talk about

597
00:33:55,100 --> 00:33:59,419
our backup files turns out we can

598
00:33:59,419 --> 00:34:00,799
actually use backup files to get into

599
00:34:00,799 --> 00:34:04,299
the system it's not a bowler building

600
00:34:04,299 --> 00:34:07,309
it's just a bug because we do need to

601
00:34:07,309 --> 00:34:09,639
know the username and the password of

602
00:34:09,639 --> 00:34:12,579
the admin user to be able to upload

603
00:34:12,579 --> 00:34:15,679
crafted backup files so we can't hack

604
00:34:15,679 --> 00:34:17,480
anyone with it but we can liberate our

605
00:34:17,480 --> 00:34:19,879
own devices using that and I already

606
00:34:19,879 --> 00:34:23,359
showed you the demo so a backup file

607
00:34:23,359 --> 00:34:27,230
layout is as follows backup al consists

608
00:34:27,230 --> 00:34:30,530
of a header of 4 bytes depending on if

609
00:34:30,530 --> 00:34:32,589
it's a normal backup or encrypted backup

610
00:34:32,589 --> 00:34:35,569
if it's encrypted backup then everything

611
00:34:35,569 --> 00:34:38,149
else is encrypted and it's like a backup

612
00:34:38,149 --> 00:34:40,909
inside a backup but if it's not and not

613
00:34:40,909 --> 00:34:42,649
encrypted then what follows is the

614
00:34:42,649 --> 00:34:44,540
length of the whole file which is

615
00:34:44,540 --> 00:34:47,000
different than for all other files they

616
00:34:47,000 --> 00:34:49,010
actually usually only include the length

617
00:34:49,010 --> 00:34:50,510
of the remainder of the file here the

618
00:34:50,510 --> 00:34:52,969
length is called backup file and then we

619
00:34:52,969 --> 00:34:58,579
have a bunch of records we have past

620
00:34:58,579 --> 00:35:00,740
name we have idiqs contents and that

621
00:35:00,740 --> 00:35:04,520
contents and those go around around as

622
00:35:04,520 --> 00:35:07,310
much as we like each of those records

623
00:35:07,310 --> 00:35:11,119
consists of the length 4 bytes and

624
00:35:11,119 --> 00:35:15,980
binary data so for example if we wanted

625
00:35:15,980 --> 00:35:19,400
to save our user data in the backup it

626
00:35:19,400 --> 00:35:25,280
would say for user 5 the contents and

627
00:35:25,280 --> 00:35:27,050
some of the lengths and the contents of

628
00:35:27,050 --> 00:35:28,579
the other file what happens actually

629
00:35:28,579 --> 00:35:33,260
when the router loads the backup is this

630
00:35:33,260 --> 00:35:35,750
it doesn't use as for that of course it

631
00:35:35,750 --> 00:35:38,750
uses it uses their own binary but this

632
00:35:38,750 --> 00:35:43,130
is what happens it creates all the

633
00:35:43,130 --> 00:35:44,750
required folders because as you saw

634
00:35:44,750 --> 00:35:48,410
there are subfolders employed then it

635
00:35:48,410 --> 00:35:51,260
writes idiqs file to that location and

636
00:35:51,260 --> 00:35:53,210
then writes the data file to that

637
00:35:53,210 --> 00:35:57,650
location and that's basically its novel

638
00:35:57,650 --> 00:36:01,730
or ability lies within the fact that you

639
00:36:01,730 --> 00:36:05,760
can actually specify the file name

640
00:36:05,760 --> 00:36:08,950
however you want so for example you can

641
00:36:08,950 --> 00:36:12,790
include some special or not so special

642
00:36:12,790 --> 00:36:14,340
characters let me show you what I mean

643
00:36:14,340 --> 00:36:16,900
so we'll also be publishing the code

644
00:36:16,900 --> 00:36:19,960
back up the pie today it allows you to

645
00:36:19,960 --> 00:36:20,950
decode the back of files without

646
00:36:20,950 --> 00:36:23,700
uploading them

647
00:36:31,599 --> 00:36:36,049
so it looks at all the parts of the

648
00:36:36,049 --> 00:36:39,190
backup file and creates them in a folder

649
00:36:39,190 --> 00:36:44,900
right here now it does replace these

650
00:36:44,900 --> 00:36:46,519
with underscore so so that you don't

651
00:36:46,519 --> 00:36:49,130
wreck your system but the actual router

652
00:36:49,130 --> 00:36:52,369
doesn't so that's how that part works

653
00:36:52,369 --> 00:36:56,839
and luckily Toth allows devil logging to

654
00:36:56,839 --> 00:36:58,609
be a folder because we couldn't get it

655
00:36:58,609 --> 00:37:00,230
to be a file we can't inject zero bytes

656
00:37:00,230 --> 00:37:06,700
or anything like that in there right and

657
00:37:06,700 --> 00:37:08,089
that's it

658
00:37:08,089 --> 00:37:10,640
that's the presentation or all the tools

659
00:37:10,640 --> 00:37:13,220
and jailbreak are available there the

660
00:37:13,220 --> 00:37:14,660
new jailbreaking new tools will be

661
00:37:14,660 --> 00:37:16,039
pushed shortly as soon as I get back

662
00:37:16,039 --> 00:37:18,289
home I can push them up if you want to

663
00:37:18,289 --> 00:37:19,519
play around with the appliance I showed

664
00:37:19,519 --> 00:37:21,680
you the latest one is available in that

665
00:37:21,680 --> 00:37:24,019
URL it's already there if you've

666
00:37:24,019 --> 00:37:26,210
forgotten your password you can you can

667
00:37:26,210 --> 00:37:27,859
use that unfortunately only works on

668
00:37:27,859 --> 00:37:33,049
devices of special city specific CPU so

669
00:37:33,049 --> 00:37:34,579
yeah I'm not sure if you have time for

670
00:37:34,579 --> 00:37:37,190
questions but that's all for me thank

671
00:37:37,190 --> 00:37:38,680
you so much

672
00:37:38,680 --> 00:37:42,529
[Applause]

