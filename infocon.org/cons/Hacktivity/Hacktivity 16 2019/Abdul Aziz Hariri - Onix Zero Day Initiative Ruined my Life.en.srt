1
00:00:00,089 --> 00:00:05,790
thank you everyone for attending my talk

2
00:00:02,730 --> 00:00:06,898
I know it's right before lunch so I'll

3
00:00:05,790 --> 00:00:08,790
try to keep it a little bit more

4
00:00:06,899 --> 00:00:11,969
entertaining give a little bit of

5
00:00:08,790 --> 00:00:15,540
stories add some context to it and try

6
00:00:11,969 --> 00:00:19,439
as much as I can not make it dry so my

7
00:00:15,540 --> 00:00:22,590
title my talks title is onyx zero day

8
00:00:19,439 --> 00:00:24,840
initiative ruin my life actually zero

9
00:00:22,590 --> 00:00:27,840
day initiative did not ruin my life

10
00:00:24,840 --> 00:00:29,660
we ruined some codes life or some

11
00:00:27,840 --> 00:00:33,750
components life and I'll get to that

12
00:00:29,660 --> 00:00:36,540
after so a quick introduction

13
00:00:33,750 --> 00:00:37,860
you guys know my name already so I used

14
00:00:36,540 --> 00:00:40,170
to be a researcher a couple of months

15
00:00:37,860 --> 00:00:44,309
ago and then I switched to management

16
00:00:40,170 --> 00:00:46,170
role basically now I'm getting to be an

17
00:00:44,309 --> 00:00:47,579
expert in office excel and stuff like

18
00:00:46,170 --> 00:00:50,129
that

19
00:00:47,579 --> 00:00:53,820
currently I manage the vulnerability

20
00:00:50,129 --> 00:00:55,949
analysis team so basically my tasks are

21
00:00:53,820 --> 00:00:57,090
mostly dividing the cases just making

22
00:00:55,949 --> 00:00:59,699
sure they actually go through the

23
00:00:57,090 --> 00:01:02,600
program do you guys have have you guys

24
00:00:59,699 --> 00:01:05,158
heard of the z-intercept before CDI

25
00:01:02,600 --> 00:01:07,979
excellent so Xia is just a bounty

26
00:01:05,159 --> 00:01:09,960
program Hey a bounty program where we

27
00:01:07,979 --> 00:01:12,030
buy vulnerabilities from external

28
00:01:09,960 --> 00:01:14,339
researchers and we check if that

29
00:01:12,030 --> 00:01:16,650
exploitable or not if they are then we

30
00:01:14,340 --> 00:01:20,280
basically just offer money on it we

31
00:01:16,650 --> 00:01:21,780
generate guidance or signatures for

32
00:01:20,280 --> 00:01:24,030
those vulnerabilities and then we roll

33
00:01:21,780 --> 00:01:26,659
into the Trend Micro product

34
00:01:24,030 --> 00:01:28,710
specifically the IPS and other products

35
00:01:26,659 --> 00:01:30,000
so currently I just managed the

36
00:01:28,710 --> 00:01:32,309
vulnerability analysis team and

37
00:01:30,000 --> 00:01:35,400
basically I just mostly I just make sure

38
00:01:32,310 --> 00:01:39,240
that the cases flow you know nicely and

39
00:01:35,400 --> 00:01:40,799
there isn't any delays I do a lot of the

40
00:01:39,240 --> 00:01:43,408
Ponto on actually that the hacking

41
00:01:40,799 --> 00:01:45,720
contest preparations and judging and sup

42
00:01:43,409 --> 00:01:47,700
like that and I'm also responsible for

43
00:01:45,720 --> 00:01:49,460
you know pricing most of these cases so

44
00:01:47,700 --> 00:01:52,500
if you guys have any questions about

45
00:01:49,460 --> 00:01:55,470
pricing or selling from the ability to

46
00:01:52,500 --> 00:01:58,409
CDI or anything like that please feel

47
00:01:55,470 --> 00:02:03,298
free to reach out after the talk and I

48
00:01:58,409 --> 00:02:07,320
would love to talk to you so let me ask

49
00:02:03,299 --> 00:02:10,670
this question who uses Acrobat Reader or

50
00:02:07,320 --> 00:02:13,769
Pro here

51
00:02:10,669 --> 00:02:16,489
alright so there's a lot of hands reason

52
00:02:13,770 --> 00:02:19,560
so is it a safe assumption to say that

53
00:02:16,490 --> 00:02:24,420
whoever did not raise his hand use Foxit

54
00:02:19,560 --> 00:02:27,240
reader Foxit it Wow okay I did

55
00:02:24,420 --> 00:02:32,579
not expect that I personally use Adobe

56
00:02:27,240 --> 00:02:36,990
Acrobat and reader inside the VM just

57
00:02:32,580 --> 00:02:39,240
saying okay so it's it's relatively an

58
00:02:36,990 --> 00:02:43,020
old software old piece of software it

59
00:02:39,240 --> 00:02:46,650
dates back to 1993 and probably the most

60
00:02:43,020 --> 00:02:48,780
widely use PDF theater out there you

61
00:02:46,650 --> 00:02:53,280
know it's you can you can run it on

62
00:02:48,780 --> 00:02:55,200
almost all platforms which is awesome it

63
00:02:53,280 --> 00:02:59,000
has been improved over the line over the

64
00:02:55,200 --> 00:02:59,000
time and basically Adobe started

65
00:02:59,690 --> 00:03:05,280
impecunious improvement just making it

66
00:03:02,570 --> 00:03:08,070
pretty nice huge software it's it's

67
00:03:05,280 --> 00:03:09,810
really nice to use but you know with all

68
00:03:08,070 --> 00:03:11,940
the development efforts and stuff like

69
00:03:09,810 --> 00:03:16,190
that that Acrobat added to it it came

70
00:03:11,940 --> 00:03:18,420
with a huge and large attack surface

71
00:03:16,190 --> 00:03:20,850
which makes it a really interesting

72
00:03:18,420 --> 00:03:22,410
target for interesting targets for

73
00:03:20,850 --> 00:03:25,859
researchers and Explorer development and

74
00:03:22,410 --> 00:03:28,019
developers specifically the architecture

75
00:03:25,860 --> 00:03:30,840
has not changed in time it so it kind of

76
00:03:28,019 --> 00:03:32,640
maintained its architecture and

77
00:03:30,840 --> 00:03:35,640
basically I divided the architecture of

78
00:03:32,640 --> 00:03:38,458
Acrobat or reader into three components

79
00:03:35,640 --> 00:03:42,179
which is the core and technically that's

80
00:03:38,459 --> 00:03:44,940
Acrobat or aqua Rd so Acrobat is the

81
00:03:42,180 --> 00:03:46,860
paid version of you know Acrobat the PDF

82
00:03:44,940 --> 00:03:50,370
Reader which is Acrobat Pro Acrobat Pro

83
00:03:46,860 --> 00:03:52,260
DC it comes with a lot more components

84
00:03:50,370 --> 00:03:54,989
and that basically allows you to do a

85
00:03:52,260 --> 00:03:56,190
lot of creation editing adding forms and

86
00:03:54,989 --> 00:03:58,620
all that kind of stuff inside the PDF

87
00:03:56,190 --> 00:04:01,280
and there's a free version of it which

88
00:03:58,620 --> 00:04:04,049
is the reader which is aqua Rd 32 and

89
00:04:01,280 --> 00:04:07,920
that's what most people actually run on

90
00:04:04,049 --> 00:04:11,340
their you know computers so the core is

91
00:04:07,920 --> 00:04:12,720
Acrobat or acro Rd dll and exe so

92
00:04:11,340 --> 00:04:16,048
basically that's that's where the core

93
00:04:12,720 --> 00:04:18,060
application is and then Acrobat supports

94
00:04:16,048 --> 00:04:20,450
something called plugins so if you go

95
00:04:18,060 --> 00:04:21,500
inside you know your Program Files

96
00:04:20,450 --> 00:04:23,450
Acrobat

97
00:04:21,500 --> 00:04:26,810
directory then you're gonna see directly

98
00:04:23,450 --> 00:04:28,729
called plugins and basically plugins are

99
00:04:26,810 --> 00:04:30,860
just simple dll's but they don't have

100
00:04:28,730 --> 00:04:34,490
that extension they have that API

101
00:04:30,860 --> 00:04:36,740
extension right and every plugin

102
00:04:34,490 --> 00:04:39,320
represents a different component so for

103
00:04:36,740 --> 00:04:41,120
example a script a plug-in is

104
00:04:39,320 --> 00:04:42,650
responsible for all the JavaScript stuff

105
00:04:41,120 --> 00:04:46,760
which is what we're going to talk about

106
00:04:42,650 --> 00:04:49,880
in a minute catalog is a component that

107
00:04:46,760 --> 00:04:51,770
deals with you know combining PDFs

108
00:04:49,880 --> 00:04:55,000
together and creating indexes for them

109
00:04:51,770 --> 00:04:58,969
for for searching purposes and whatnot

110
00:04:55,000 --> 00:05:02,290
HTML to PDF is a component that converts

111
00:04:58,970 --> 00:05:06,040
HTML file to a PDF file and

112
00:05:02,290 --> 00:05:10,640
interestingly that component relies on

113
00:05:06,040 --> 00:05:13,370
WebKit AG which is a WebKit engine

114
00:05:10,640 --> 00:05:15,140
that's inside Acrobat and as you can

115
00:05:13,370 --> 00:05:17,570
guess it's an old WebKit engine so

116
00:05:15,140 --> 00:05:20,659
basically it's still vulnerable to a lot

117
00:05:17,570 --> 00:05:24,200
of the old WebKit bugs or anything of

118
00:05:20,660 --> 00:05:26,540
that sort I mean there's a lot of

119
00:05:24,200 --> 00:05:28,130
plugins one at one of another program

120
00:05:26,540 --> 00:05:29,390
that actually want to mention is actual

121
00:05:28,130 --> 00:05:31,640
form and we've seen a lot of

122
00:05:29,390 --> 00:05:33,620
vulnerabilities inside that plug-in and

123
00:05:31,640 --> 00:05:37,310
that's specifically responsible for xfa

124
00:05:33,620 --> 00:05:39,800
xf8 parsing and stuff like that the back

125
00:05:37,310 --> 00:05:42,800
end is just the dll's that does all the

126
00:05:39,800 --> 00:05:45,140
processing for example ax s le e is a

127
00:05:42,800 --> 00:05:49,600
dll that's responsible for XSLT parsing

128
00:05:45,140 --> 00:05:52,820
and a fun fact is that that dll is

129
00:05:49,600 --> 00:05:54,830
basically a spin of an open source

130
00:05:52,820 --> 00:05:57,860
project called servlet run have you guys

131
00:05:54,830 --> 00:06:00,500
heard of sublet run before it's an XSLT

132
00:05:57,860 --> 00:06:03,080
parser open source it hasn't been

133
00:06:00,500 --> 00:06:04,850
maintained in 2010 so basically acrobat

134
00:06:03,080 --> 00:06:08,930
grabbed that project compiled it threw

135
00:06:04,850 --> 00:06:11,810
it there and we've seen a lot of bugs in

136
00:06:08,930 --> 00:06:13,970
it over the years so what we've actually

137
00:06:11,810 --> 00:06:16,070
started seeing as well as people going

138
00:06:13,970 --> 00:06:18,860
back to sublet ron auditing that code

139
00:06:16,070 --> 00:06:20,360
because it's open source and then just

140
00:06:18,860 --> 00:06:22,010
you know if they trigger a bug in sublet

141
00:06:20,360 --> 00:06:23,600
ron it's automatically a bug in Acrobat

142
00:06:22,010 --> 00:06:25,580
which which was quite fascinating

143
00:06:23,600 --> 00:06:26,870
because accurate I did not touch the

144
00:06:25,580 --> 00:06:29,180
code they did not actually audit the

145
00:06:26,870 --> 00:06:31,760
code is a compiled through it they're

146
00:06:29,180 --> 00:06:33,229
run it and even they added a JavaScript

147
00:06:31,760 --> 00:06:36,210
API for it so you can hit it from

148
00:06:33,229 --> 00:06:39,389
JavaScript which is sweet

149
00:06:36,210 --> 00:06:41,130
cool type is responsible for the font

150
00:06:39,389 --> 00:06:43,949
parsing so all the font parsing that you

151
00:06:41,130 --> 00:06:49,050
see inside the PDF is goes inside cool

152
00:06:43,949 --> 00:06:51,300
type JP t JP to Caleb it does is

153
00:06:49,050 --> 00:06:54,990
basically responsible for all the JPAC

154
00:06:51,300 --> 00:06:57,240
mm parsing and which is quite

155
00:06:54,990 --> 00:06:59,780
interesting because you can actually hit

156
00:06:57,240 --> 00:07:01,860
that code through JavaScript and

157
00:06:59,780 --> 00:07:03,929
basically if you want to just want to do

158
00:07:01,860 --> 00:07:06,960
like file parsing just drag and drop or

159
00:07:03,930 --> 00:07:08,250
convert a JPEG 2000 image to a PDF then

160
00:07:06,960 --> 00:07:09,630
you can actually trigger that code so

161
00:07:08,250 --> 00:07:12,570
basically you have multiple ways to

162
00:07:09,630 --> 00:07:18,570
trigger vulnerabilities inside you know

163
00:07:12,570 --> 00:07:24,020
the JP tuk lived and we're gonna talk

164
00:07:18,570 --> 00:07:26,539
about this guy after all right so

165
00:07:24,020 --> 00:07:30,690
vulnerability is through zdi so back in

166
00:07:26,539 --> 00:07:32,159
December 2014 we were kind of having a

167
00:07:30,690 --> 00:07:33,630
meeting inside the CBI and we were like

168
00:07:32,160 --> 00:07:35,910
well we're not actually seeing a lot of

169
00:07:33,630 --> 00:07:39,630
vulnerabilities in it'll be at Acrobat

170
00:07:35,910 --> 00:07:42,990
and it seems once Adobe rolled in their

171
00:07:39,630 --> 00:07:45,900
sandbox I think it was like 2010 a

172
00:07:42,990 --> 00:07:49,139
little bit after that and we started

173
00:07:45,900 --> 00:07:50,549
seeing you know the the vulnerabilities

174
00:07:49,139 --> 00:07:52,229
in Acrobat getting like we start we

175
00:07:50,550 --> 00:07:54,840
didn't actually see much vulnerabilities

176
00:07:52,229 --> 00:07:56,340
getting in the program the target Adobe

177
00:07:54,840 --> 00:07:58,109
products specifically Acrobat and

178
00:07:56,340 --> 00:08:00,570
readers so we wanted to actually start

179
00:07:58,110 --> 00:08:03,330
have a look at that for that see how

180
00:08:00,570 --> 00:08:06,479
strong it is so we launched an internal

181
00:08:03,330 --> 00:08:08,820
project which was specifically targeted

182
00:08:06,479 --> 00:08:10,919
at Acrobat and Reader and basically to

183
00:08:08,820 --> 00:08:14,400
find as much vomit abilities as we can

184
00:08:10,919 --> 00:08:16,289
in that application so first I started

185
00:08:14,400 --> 00:08:18,929
targeting JavaScript which was the

186
00:08:16,289 --> 00:08:20,280
easiest you know entry point for it so

187
00:08:18,930 --> 00:08:23,550
you can you can just like go through the

188
00:08:20,280 --> 00:08:24,989
JavaScript API they have and start you

189
00:08:23,550 --> 00:08:28,700
know writing your own targeted fuzzer

190
00:08:24,990 --> 00:08:31,860
start you know calling random API and

191
00:08:28,700 --> 00:08:34,468
frankly I was super surprised that we

192
00:08:31,860 --> 00:08:36,930
found a whole bunch of you know

193
00:08:34,469 --> 00:08:38,550
vulnerabilities every freaking

194
00:08:36,929 --> 00:08:42,059
vulnerability type that you guys can

195
00:08:38,549 --> 00:08:44,339
think can think of use after freeze heap

196
00:08:42,059 --> 00:08:47,699
overflow type confusions all the

197
00:08:44,339 --> 00:08:48,810
freaking vulnerabilities then we

198
00:08:47,700 --> 00:08:51,960
published a whole

199
00:08:48,810 --> 00:08:54,020
vulnerabilities back in 2015 and ever

200
00:08:51,960 --> 00:08:56,880
since we published those vulnerabilities

201
00:08:54,020 --> 00:09:00,930
just blossomed like everyone started

202
00:08:56,880 --> 00:09:02,790
looking at that application and as you

203
00:09:00,930 --> 00:09:05,520
guys can see it's in a steady increase

204
00:09:02,790 --> 00:09:07,199
steady increase and every year we see

205
00:09:05,520 --> 00:09:10,020
more vulnerabilities targeting more

206
00:09:07,200 --> 00:09:11,580
components inside Adobe like even

207
00:09:10,020 --> 00:09:12,900
components that you would never think of

208
00:09:11,580 --> 00:09:16,700
and they would they would actually

209
00:09:12,900 --> 00:09:19,079
target it which was quite fascinating

210
00:09:16,700 --> 00:09:21,750
actually one thing I want to add is that

211
00:09:19,080 --> 00:09:24,150
in 2019 things got a little bit slower

212
00:09:21,750 --> 00:09:27,690
so now we published 110 vulnerabilities

213
00:09:24,150 --> 00:09:30,000
in so far in 2019 that targets Acrobat

214
00:09:27,690 --> 00:09:31,920
we still have a lot more in the queue

215
00:09:30,000 --> 00:09:34,320
waiting to be patched but I'm expecting

216
00:09:31,920 --> 00:09:37,020
it to be a little bit lower than 2018

217
00:09:34,320 --> 00:09:39,620
this year which which is an

218
00:09:37,020 --> 00:09:42,270
accomplishment to be honest for Adobe so

219
00:09:39,620 --> 00:09:46,190
all right so let's talk about that tack

220
00:09:42,270 --> 00:09:48,569
surfaces and a JavaScript specifically

221
00:09:46,190 --> 00:09:50,010
JavaScript has has a really sweet spot

222
00:09:48,570 --> 00:09:54,360
in my heart so I always have to start

223
00:09:50,010 --> 00:09:57,810
with it so basically it's let's go back

224
00:09:54,360 --> 00:10:00,480
to the architecture from the core the

225
00:09:57,810 --> 00:10:02,069
plug-in responsible for part doing the

226
00:10:00,480 --> 00:10:05,250
older JavaScript

227
00:10:02,070 --> 00:10:06,930
you know parsing is e script and through

228
00:10:05,250 --> 00:10:10,200
a script you can actually hit every

229
00:10:06,930 --> 00:10:12,569
single DLL so this one is technically

230
00:10:10,200 --> 00:10:14,610
not true it's you can still hit it

231
00:10:12,570 --> 00:10:17,510
through a script but it requires a

232
00:10:14,610 --> 00:10:19,260
little bit of work

233
00:10:17,510 --> 00:10:21,180
specifically with that with the way you

234
00:10:19,260 --> 00:10:22,589
actually call the JavaScript API is

235
00:10:21,180 --> 00:10:27,890
which I'm going to get to the privileges

236
00:10:22,589 --> 00:10:30,480
after so a little bit of an overview

237
00:10:27,890 --> 00:10:32,600
adobe has or Acrobat has a JavaScript

238
00:10:30,480 --> 00:10:35,130
engine inside it which is a spin off

239
00:10:32,600 --> 00:10:37,980
SpiderMonkey Mozilla SpiderMonkey it's

240
00:10:35,130 --> 00:10:39,480
an old version of it and they kind of

241
00:10:37,980 --> 00:10:41,130
maintained their own spin every time

242
00:10:39,480 --> 00:10:43,650
every time they get bugs they basically

243
00:10:41,130 --> 00:10:45,480
patch their own engine they don't rely

244
00:10:43,650 --> 00:10:48,870
on Mozilla to pass their bugs they patch

245
00:10:45,480 --> 00:10:52,110
their own things so basically a lot of

246
00:10:48,870 --> 00:10:54,870
the API is that you guys can are exposed

247
00:10:52,110 --> 00:10:57,360
in the pro version do not exist in the

248
00:10:54,870 --> 00:10:59,300
reader and some of the ones in reader

249
00:10:57,360 --> 00:11:01,519
basically do not exist in

250
00:10:59,300 --> 00:11:03,050
the perversion so so basically it's you

251
00:11:01,519 --> 00:11:04,790
have if you have to pick your battles

252
00:11:03,050 --> 00:11:08,990
here if you want to audit Acrobat and or

253
00:11:04,790 --> 00:11:13,750
if you want to audit feeder so most of

254
00:11:08,990 --> 00:11:16,370
the api's are technically documented and

255
00:11:13,750 --> 00:11:19,160
speaking of documentation there's a

256
00:11:16,370 --> 00:11:23,440
website that adobe has basically called

257
00:11:19,160 --> 00:11:26,149
the adobe sdk a backrub at DC sdk

258
00:11:23,440 --> 00:11:28,820
basically you can go and check what

259
00:11:26,149 --> 00:11:31,310
every object inside Acrobat exposes like

260
00:11:28,820 --> 00:11:33,620
methods and properties so this has been

261
00:11:31,310 --> 00:11:34,880
known for it for some time so if you

262
00:11:33,620 --> 00:11:37,160
guys are familiar with the collab

263
00:11:34,880 --> 00:11:39,860
basically it deals with collaborations

264
00:11:37,160 --> 00:11:41,089
so if you want to send a PDF if you have

265
00:11:39,860 --> 00:11:42,800
like a group and if you want to send

266
00:11:41,089 --> 00:11:44,600
your PDF with other people to kind of

267
00:11:42,800 --> 00:11:46,130
add their comments and stuff like that

268
00:11:44,600 --> 00:11:48,140
that's called cult collaboration and

269
00:11:46,130 --> 00:11:53,089
that's what that object is responsible

270
00:11:48,140 --> 00:11:56,329
for in the documentation they documented

271
00:11:53,089 --> 00:11:59,209
three methods only of collab with a

272
00:11:56,329 --> 00:12:02,170
little bit of fact-checking basically

273
00:11:59,209 --> 00:12:04,550
collab contains 128 functions and

274
00:12:02,170 --> 00:12:06,560
basically they only documented three out

275
00:12:04,550 --> 00:12:07,699
of hundred twenty-eight don't get me

276
00:12:06,560 --> 00:12:12,319
wrong they actually got better it was

277
00:12:07,700 --> 00:12:15,040
137 so and a lot of those hundreds and

278
00:12:12,320 --> 00:12:17,570
the ones that he actually killed we're

279
00:12:15,040 --> 00:12:19,490
super devastating that they allowed you

280
00:12:17,570 --> 00:12:21,529
to actually drop files delete files and

281
00:12:19,490 --> 00:12:23,510
stuff like that so they ended up cutting

282
00:12:21,529 --> 00:12:27,110
all the rest of the other functions

283
00:12:23,510 --> 00:12:32,209
which are undocumented as well and now

284
00:12:27,110 --> 00:12:35,779
end up with under 28 functions so let's

285
00:12:32,209 --> 00:12:37,670
talk a little bit about privileges so

286
00:12:35,779 --> 00:12:39,350
javascript api is they're not going to

287
00:12:37,670 --> 00:12:41,479
allow you to actually run every freakin

288
00:12:39,350 --> 00:12:43,880
api you want right it's it's a little

289
00:12:41,480 --> 00:12:45,440
bit dangerous some of the api is allow

290
00:12:43,880 --> 00:12:48,050
you to do things like interesting things

291
00:12:45,440 --> 00:12:50,000
right like open a web page possibly drop

292
00:12:48,050 --> 00:12:52,459
a file save a file i don't know like a

293
00:12:50,000 --> 00:12:55,730
bunch of stuff so they created this kind

294
00:12:52,459 --> 00:12:59,209
of privilege separation and or contexts

295
00:12:55,730 --> 00:13:03,500
and now you end up with functions that

296
00:12:59,209 --> 00:13:05,540
are privileged or i don't have that here

297
00:13:03,500 --> 00:13:08,390
so basically in the api documentation if

298
00:13:05,540 --> 00:13:10,709
you see a method that has a red ass next

299
00:13:08,390 --> 00:13:12,630
to it it means it's privileged

300
00:13:10,710 --> 00:13:14,130
and by that it means you need to

301
00:13:12,630 --> 00:13:16,470
increase your privileges when you want

302
00:13:14,130 --> 00:13:18,720
to execute that API normally when you

303
00:13:16,470 --> 00:13:21,690
open a PDF document and it has

304
00:13:18,720 --> 00:13:23,820
JavaScript inside it that JavaScript are

305
00:13:21,690 --> 00:13:25,560
being executed under the dock privileges

306
00:13:23,820 --> 00:13:27,810
which is the current document they have

307
00:13:25,560 --> 00:13:30,660
open but if you want to increase your

308
00:13:27,810 --> 00:13:33,270
privileges you have to execute your API

309
00:13:30,660 --> 00:13:34,680
from their root privileges which is

310
00:13:33,270 --> 00:13:36,900
basically you have to bypass API

311
00:13:34,680 --> 00:13:39,599
privileges and it has to be a trusted

312
00:13:36,900 --> 00:13:41,490
function by trusted function basically

313
00:13:39,600 --> 00:13:43,230
if it's a if it's a trusted function

314
00:13:41,490 --> 00:13:46,230
then it increases the privileges that it

315
00:13:43,230 --> 00:13:48,360
has and if it's a privileged API then it

316
00:13:46,230 --> 00:13:52,710
has to be wrapped between big improv and

317
00:13:48,360 --> 00:13:54,600
mproof so in a nutshell you have two

318
00:13:52,710 --> 00:13:57,740
types of API privileges and non

319
00:13:54,600 --> 00:13:59,700
privileged right the privilege API is

320
00:13:57,740 --> 00:14:00,990
technically allows you to do more

321
00:13:59,700 --> 00:14:02,940
interesting things and unprivileged

322
00:14:00,990 --> 00:14:04,500
are just like normal ones and this is

323
00:14:02,940 --> 00:14:06,630
pretty interesting because a lot of

324
00:14:04,500 --> 00:14:09,030
people actually audited the JavaScript

325
00:14:06,630 --> 00:14:11,010
API but they audited and unprivileged

326
00:14:09,030 --> 00:14:14,189
javascript api is they did not actually

327
00:14:11,010 --> 00:14:16,100
touch the privilege javascript api is to

328
00:14:14,190 --> 00:14:21,270
do that you actually in the bypass and

329
00:14:16,100 --> 00:14:23,880
we published like a huge you know

330
00:14:21,270 --> 00:14:26,579
research about what you can actually

331
00:14:23,880 --> 00:14:29,610
accomplish if you bypass you know

332
00:14:26,580 --> 00:14:31,380
privileges in certain api's it turns out

333
00:14:29,610 --> 00:14:33,600
that if you actually can do that then

334
00:14:31,380 --> 00:14:35,730
you basically can technically get code

335
00:14:33,600 --> 00:14:40,260
execution in a logical ways so if you if

336
00:14:35,730 --> 00:14:42,780
you can chain an API bypass and call

337
00:14:40,260 --> 00:14:44,819
certain functions in a certain way then

338
00:14:42,780 --> 00:14:47,400
you can technically gain code execution

339
00:14:44,820 --> 00:14:49,020
through a logical chain which is very

340
00:14:47,400 --> 00:14:51,630
devastating when it comes to you know

341
00:14:49,020 --> 00:14:53,910
products like Adobe or even we're joking

342
00:14:51,630 --> 00:14:56,460
around back when we found you know the

343
00:14:53,910 --> 00:14:58,740
bypasses in 2015-2016 I we were like

344
00:14:56,460 --> 00:15:00,870
whoever was actually writing exploits

345
00:14:58,740 --> 00:15:03,390
memory corruption exploits for Adobe

346
00:15:00,870 --> 00:15:04,800
before the render before the before the

347
00:15:03,390 --> 00:15:06,810
actual sandbox was introduced was

348
00:15:04,800 --> 00:15:09,089
wasting his time because you can

349
00:15:06,810 --> 00:15:12,410
actually get code execution just through

350
00:15:09,090 --> 00:15:15,990
logical chains which was quite amazing

351
00:15:12,410 --> 00:15:19,260
so that's about let's talk about new

352
00:15:15,990 --> 00:15:20,910
attack surfaces so everything that I

353
00:15:19,260 --> 00:15:23,370
talked about when it comes to JavaScript

354
00:15:20,910 --> 00:15:24,699
is a known attack surface but for me

355
00:15:23,370 --> 00:15:27,010
from an attacker if I want to

356
00:15:24,700 --> 00:15:30,100
something a new attack surface then I

357
00:15:27,010 --> 00:15:32,740
actually want that code that I'm

358
00:15:30,100 --> 00:15:34,840
actually reaching or I want a hit to be

359
00:15:32,740 --> 00:15:38,500
triggered through JavaScript and that's

360
00:15:34,840 --> 00:15:40,330
for multiple reasons well from an

361
00:15:38,500 --> 00:15:42,550
exploitation perspective if you want to

362
00:15:40,330 --> 00:15:44,590
control a certain he overflow and out of

363
00:15:42,550 --> 00:15:46,839
bound right and if you have access to

364
00:15:44,590 --> 00:15:48,850
JavaScript then it's game over right you

365
00:15:46,840 --> 00:15:51,280
can you can control how the memory is

366
00:15:48,850 --> 00:15:55,120
being laid out heap sprays and all all

367
00:15:51,280 --> 00:15:56,620
that kind of stuff that said most of the

368
00:15:55,120 --> 00:15:58,810
attack surfaces that we've seen where

369
00:15:56,620 --> 00:16:00,670
well recently we've been getting through

370
00:15:58,810 --> 00:16:05,949
the program are basically file parsing

371
00:16:00,670 --> 00:16:07,959
issues well you know JPEGs whatever HTML

372
00:16:05,950 --> 00:16:10,750
to to PDF and all the kinda don't get me

373
00:16:07,960 --> 00:16:12,400
wrong it's good it's nice I remember

374
00:16:10,750 --> 00:16:14,920
back in 2017

375
00:16:12,400 --> 00:16:18,430
it was geo 360 they were participating

376
00:16:14,920 --> 00:16:21,459
in Ponte on and basically they they

377
00:16:18,430 --> 00:16:23,290
hacked Adobe Acrobat through a JPEG 2000

378
00:16:21,460 --> 00:16:25,840
he overflow and basically it was an

379
00:16:23,290 --> 00:16:27,130
image that was embedded inside the PDF

380
00:16:25,840 --> 00:16:28,840
and they were able to trigger the

381
00:16:27,130 --> 00:16:31,510
parsing of the images with JavaScript

382
00:16:28,840 --> 00:16:34,990
which is ideal because basically you can

383
00:16:31,510 --> 00:16:36,970
trigger the bug whenever you want which

384
00:16:34,990 --> 00:16:38,710
is different from font parsing because

385
00:16:36,970 --> 00:16:40,900
font parsing is a little bit you know

386
00:16:38,710 --> 00:16:44,080
tricky because if you embed a better

387
00:16:40,900 --> 00:16:46,840
font inside a PDF then whenever the the

388
00:16:44,080 --> 00:16:49,570
document shows up then the font parsing

389
00:16:46,840 --> 00:16:52,540
basically happens so you cannot per say

390
00:16:49,570 --> 00:16:54,460
hunt like always control when to trigger

391
00:16:52,540 --> 00:16:56,620
the font parsing but you can control

392
00:16:54,460 --> 00:17:01,890
when the image parsing happens which is

393
00:16:56,620 --> 00:17:04,750
quite useful for an attacker right so

394
00:17:01,890 --> 00:17:07,450
it's a little bit of background so I was

395
00:17:04,750 --> 00:17:10,780
I think in 2018 I was preparing for pone

396
00:17:07,450 --> 00:17:12,220
two own usually I go to Austin for the

397
00:17:10,780 --> 00:17:14,319
preparation before the contest and I

398
00:17:12,220 --> 00:17:16,180
start setting up the laptops and I was

399
00:17:14,319 --> 00:17:18,639
like okay so there's a lot of idling

400
00:17:16,180 --> 00:17:21,340
when setting up the laptop so basically

401
00:17:18,640 --> 00:17:23,380
have 10 15 laptops just sitting there

402
00:17:21,339 --> 00:17:25,780
waiting them to install Windows or

403
00:17:23,380 --> 00:17:27,340
whatever so I was looking at Acrobat and

404
00:17:25,780 --> 00:17:30,490
I was like okay let me see if I can find

405
00:17:27,339 --> 00:17:32,260
a new attack surface and one of the

406
00:17:30,490 --> 00:17:34,210
things that that brought you know that

407
00:17:32,260 --> 00:17:38,820
brought my attention was there was a lot

408
00:17:34,210 --> 00:17:38,820
of old dll's in the Acrobat

409
00:17:39,309 --> 00:17:46,010
so this guy got my attention

410
00:17:42,980 --> 00:17:47,990
it's called onyx 32 wll and if she can

411
00:17:46,010 --> 00:17:51,169
check that timestamp back then I was

412
00:17:47,990 --> 00:17:53,500
when I saw this was last year 2018 and I

413
00:17:51,169 --> 00:17:57,080
was like what the heck is that it's been

414
00:17:53,500 --> 00:18:00,020
hasn't been touched since 2015 so I did

415
00:17:57,080 --> 00:18:01,520
a little bit of you know checked the

416
00:18:00,020 --> 00:18:03,918
properties and it turns out that

417
00:18:01,520 --> 00:18:07,240
basically it's from Lex tech

418
00:18:03,919 --> 00:18:11,179
international so what's that

419
00:18:07,240 --> 00:18:13,039
so basically Lex stack is a company that

420
00:18:11,179 --> 00:18:14,630
speaks all the states and basically they

421
00:18:13,039 --> 00:18:17,929
offer different solutions multiple

422
00:18:14,630 --> 00:18:19,940
solutions and one of the solutions is an

423
00:18:17,929 --> 00:18:24,980
indexing solution which is called onyx

424
00:18:19,940 --> 00:18:27,110
and surprisingly Acrobat acquired that

425
00:18:24,980 --> 00:18:29,750
solution and integrated that solution

426
00:18:27,110 --> 00:18:33,529
inside their product since Acrobat six

427
00:18:29,750 --> 00:18:36,980
and if I'm not mistaken Acrobat six was

428
00:18:33,529 --> 00:18:39,049
released back in 2003 so that makes it

429
00:18:36,980 --> 00:18:42,740
like it's been sitting there for 15

430
00:18:39,049 --> 00:18:44,809
years basically right and when I saw

431
00:18:42,740 --> 00:18:46,309
that I was like holy crap so this is

432
00:18:44,809 --> 00:18:48,289
something I've never seen bugs in it

433
00:18:46,309 --> 00:18:50,690
before I searched the internet no one

434
00:18:48,289 --> 00:18:54,500
has touched it so it's it's technically

435
00:18:50,690 --> 00:18:58,100
an untouched attack surface which is

436
00:18:54,500 --> 00:18:59,570
awesome so how does the indexing this is

437
00:18:58,100 --> 00:19:01,939
this is bait this is by the way from

438
00:18:59,570 --> 00:19:04,010
their website and basically the way they

439
00:19:01,940 --> 00:19:07,340
divide the text they divide text into

440
00:19:04,010 --> 00:19:09,379
records just like a book right and

441
00:19:07,340 --> 00:19:11,149
basically if you wanna when you search

442
00:19:09,380 --> 00:19:13,539
for something it's going to return the

443
00:19:11,149 --> 00:19:15,739
record that the word that you search for

444
00:19:13,539 --> 00:19:17,179
technically technically appeared then

445
00:19:15,740 --> 00:19:19,250
just like just like how the book works

446
00:19:17,179 --> 00:19:25,309
it's it's pretty simple concept for

447
00:19:19,250 --> 00:19:27,080
indexing but it's pretty fast so when I

448
00:19:25,309 --> 00:19:29,720
saw that I was like so how would I

449
00:19:27,080 --> 00:19:31,699
actually reach that code like okay

450
00:19:29,720 --> 00:19:34,909
awesome you have you have an old library

451
00:19:31,700 --> 00:19:37,039
over there but if you cannot touch it if

452
00:19:34,909 --> 00:19:41,149
you cannot actually trigger the parsing

453
00:19:37,039 --> 00:19:43,879
then basically it's it's useless so I

454
00:19:41,149 --> 00:19:46,850
stumbled across catalog which is as I

455
00:19:43,880 --> 00:19:49,309
mentioned before it's basically a plugin

456
00:19:46,850 --> 00:19:51,740
that allows you to it takes

457
00:19:49,309 --> 00:19:55,428
collection of PDFs and it creates an

458
00:19:51,740 --> 00:19:57,740
index for the PDFs for searching via for

459
00:19:55,429 --> 00:19:59,779
searching purposes and I was like okay

460
00:19:57,740 --> 00:20:01,549
so let me have a look at that and and

461
00:19:59,779 --> 00:20:03,379
May and basically let's see if I can

462
00:20:01,549 --> 00:20:04,999
actually trigger that and the nice thing

463
00:20:03,379 --> 00:20:07,820
about it is that it has a JavaScript API

464
00:20:04,999 --> 00:20:09,529
that plug-in so I can load that plugin

465
00:20:07,820 --> 00:20:13,428
from JavaScript and I can trigger the

466
00:20:09,529 --> 00:20:15,830
build or everything else from from it so

467
00:20:13,429 --> 00:20:18,139
you have to basically have a multiple

468
00:20:15,830 --> 00:20:20,658
ways to create indexes what I did is

469
00:20:18,139 --> 00:20:23,539
basically I did for testing purposes I

470
00:20:20,659 --> 00:20:27,049
created an index through the actual GUI

471
00:20:23,539 --> 00:20:30,230
of catalog basically I just gave it a

472
00:20:27,049 --> 00:20:32,929
directory it contains a bunch of PDFs

473
00:20:30,230 --> 00:20:37,690
and I just like built and basically just

474
00:20:32,929 --> 00:20:39,679
generated a nice index file for me but

475
00:20:37,690 --> 00:20:41,539
there's there's something off here

476
00:20:39,679 --> 00:20:46,190
basically what it does what it did is

477
00:20:41,539 --> 00:20:48,889
created a file called a format that PDX

478
00:20:46,190 --> 00:20:52,700
and it created a directory with the same

479
00:20:48,889 --> 00:20:59,600
name of the actual index and it had two

480
00:20:52,700 --> 00:21:01,970
index files the PDX file is technically

481
00:20:59,600 --> 00:21:05,119
just it's very similar to a PDF file

482
00:21:01,970 --> 00:21:06,860
format right it's Adobe so they they

483
00:21:05,119 --> 00:21:10,100
kind of have everything similar to a PDF

484
00:21:06,860 --> 00:21:13,789
format and the index file is what was

485
00:21:10,100 --> 00:21:16,279
interesting it's binary ish kind of file

486
00:21:13,789 --> 00:21:17,990
format so which made it quite

487
00:21:16,279 --> 00:21:19,820
interesting for me at least because I

488
00:21:17,990 --> 00:21:23,330
can just like try to fuzz it and stuff

489
00:21:19,820 --> 00:21:26,658
like that so now since I actually have

490
00:21:23,330 --> 00:21:28,249
all the information that I needed then

491
00:21:26,659 --> 00:21:30,710
it was time for me to start finding

492
00:21:28,249 --> 00:21:34,129
vulnerabilities right so two ways

493
00:21:30,710 --> 00:21:35,419
basically statically and that's the

494
00:21:34,129 --> 00:21:38,090
first way that I actually approached it

495
00:21:35,419 --> 00:21:41,210
I went to catalogue that API I reversed

496
00:21:38,090 --> 00:21:43,639
it I tried to understand how it was

497
00:21:41,210 --> 00:21:46,850
interfacing it was calling the Onix you

498
00:21:43,639 --> 00:21:49,070
know api's and in the end I found out

499
00:21:46,850 --> 00:21:51,850
that all the index parsing happens

500
00:21:49,070 --> 00:21:54,799
inside one function one giant function

501
00:21:51,850 --> 00:21:56,539
one thing I want to note is that there

502
00:21:54,799 --> 00:21:59,418
are two types of vulnerabilities the

503
00:21:56,539 --> 00:22:01,910
first one is in catalog basically the

504
00:21:59,419 --> 00:22:04,580
way it's handling Onix

505
00:22:01,910 --> 00:22:08,930
ap is and the other type is basically

506
00:22:04,580 --> 00:22:10,580
core onyx API vulnerabilities and I was

507
00:22:08,930 --> 00:22:15,260
successful in finding both and I'll

508
00:22:10,580 --> 00:22:17,860
explain how it was found one notable bug

509
00:22:15,260 --> 00:22:26,420
is this guy

510
00:22:17,860 --> 00:22:34,459
can you guys spud the bug Yes No

511
00:22:26,420 --> 00:22:36,440
any takers okay so basically just this

512
00:22:34,460 --> 00:22:38,450
guy wraps so you end up allocating a

513
00:22:36,440 --> 00:22:40,940
small buffer and then you get and then

514
00:22:38,450 --> 00:22:42,830
then you use data buff size to copy

515
00:22:40,940 --> 00:22:45,860
basically it's just like a standard

516
00:22:42,830 --> 00:22:47,899
overflow and by the way this code if you

517
00:22:45,860 --> 00:22:49,729
search for variants it's all or the

518
00:22:47,900 --> 00:22:52,250
ringing place in catalog so it's it's

519
00:22:49,730 --> 00:22:55,460
just like kind of copy paste all over so

520
00:22:52,250 --> 00:22:59,860
this is the original file you know very

521
00:22:55,460 --> 00:23:02,420
hard right this is the POC

522
00:22:59,860 --> 00:23:05,810
so this was the first actually actual

523
00:23:02,420 --> 00:23:06,770
way that I kind of approached you know

524
00:23:05,810 --> 00:23:08,750
the problem and finding vulnerabilities

525
00:23:06,770 --> 00:23:11,090
I was able to find two vulnerabilities

526
00:23:08,750 --> 00:23:12,380
through static analysis then I was like

527
00:23:11,090 --> 00:23:14,419
okay so this is gonna take a little bit

528
00:23:12,380 --> 00:23:16,490
of time I don't have time for reversing

529
00:23:14,420 --> 00:23:19,910
the whole thing let me just go to

530
00:23:16,490 --> 00:23:25,040
fuzzing and how many guys of you

531
00:23:19,910 --> 00:23:26,330
actually have first Acrobat no one yeah

532
00:23:25,040 --> 00:23:28,610
I would not recommend you doing that

533
00:23:26,330 --> 00:23:30,800
it's it's a pain in the ass frankly

534
00:23:28,610 --> 00:23:33,949
especially if you have page deep enabled

535
00:23:30,800 --> 00:23:37,190
it's such a huge application that it's

536
00:23:33,950 --> 00:23:39,050
so annoying to fuzz in a fast way

537
00:23:37,190 --> 00:23:41,570
don't get me wrong you can you can fuzz

538
00:23:39,050 --> 00:23:43,550
it you can you know feel at the file

539
00:23:41,570 --> 00:23:46,070
kill it feel at the file killed it's

540
00:23:43,550 --> 00:23:48,730
very slow but if you want to do it right

541
00:23:46,070 --> 00:23:51,050
then basically you have to break down

542
00:23:48,730 --> 00:23:53,930
things into components like fuzz

543
00:23:51,050 --> 00:23:56,750
components separately and that's

544
00:23:53,930 --> 00:23:58,910
something I actually you know I figured

545
00:23:56,750 --> 00:24:01,070
out after trying to do all the crazy

546
00:23:58,910 --> 00:24:03,410
things like well how about fuzzing the

547
00:24:01,070 --> 00:24:05,510
plug-in no it doesn't work

548
00:24:03,410 --> 00:24:07,790
how about fuzzing the application very

549
00:24:05,510 --> 00:24:10,730
slow then I was like okay so let me do

550
00:24:07,790 --> 00:24:13,100
the onyx 30 to kind of wrap it up right

551
00:24:10,730 --> 00:24:15,200
a small harness for it and see if I can

552
00:24:13,100 --> 00:24:17,159
fuzz it you know directly

553
00:24:15,200 --> 00:24:19,770
in order to do that we have to

554
00:24:17,160 --> 00:24:23,580
understand how the API works right but

555
00:24:19,770 --> 00:24:24,389
luckily Lex tech had you know sample

556
00:24:23,580 --> 00:24:27,030
code there

557
00:24:24,390 --> 00:24:29,280
they even had proper documentation of

558
00:24:27,030 --> 00:24:31,050
every freaking API there so I didn't

559
00:24:29,280 --> 00:24:32,970
even need to go reverse how it was

560
00:24:31,050 --> 00:24:35,610
actually how the functions were being

561
00:24:32,970 --> 00:24:38,790
used inside the catalog API rather than

562
00:24:35,610 --> 00:24:40,949
just go to the website and simply just

563
00:24:38,790 --> 00:24:43,200
understand the code samples that they

564
00:24:40,950 --> 00:24:45,930
have and basically just write my own my

565
00:24:43,200 --> 00:24:48,780
own harness so this is this is basically

566
00:24:45,930 --> 00:24:51,480
the documentation for example this API

567
00:24:48,780 --> 00:24:53,340
just you know documents the arguments

568
00:24:51,480 --> 00:24:57,390
they they're even nicer and they

569
00:24:53,340 --> 00:24:59,189
basically provided the Onix type and you

570
00:24:57,390 --> 00:25:00,660
know the actual C type so basically if

571
00:24:59,190 --> 00:25:03,570
you want to write your own harness you

572
00:25:00,660 --> 00:25:04,860
have all the ingredients over there so

573
00:25:03,570 --> 00:25:05,850
what I did is basically I have my own

574
00:25:04,860 --> 00:25:08,010
fuzzing framework

575
00:25:05,850 --> 00:25:12,800
I wrote the small harness and then boom

576
00:25:08,010 --> 00:25:14,790
start fuzzing so this is an example of

577
00:25:12,800 --> 00:25:17,730
my fuzzing framework

578
00:25:14,790 --> 00:25:21,300
I call it Ben fuzz and it's just like a

579
00:25:17,730 --> 00:25:22,680
dumb fuzzy let's just check the speed

580
00:25:21,300 --> 00:25:27,000
compared to actually just spinning

581
00:25:22,680 --> 00:25:30,030
Acrobat room so every one of those is

582
00:25:27,000 --> 00:25:32,250
just like a test case and then you get

583
00:25:30,030 --> 00:25:34,440
it you got a crash actually this is the

584
00:25:32,250 --> 00:25:38,550
first crash that I got and I was super

585
00:25:34,440 --> 00:25:41,910
freakin excited when I got that this is

586
00:25:38,550 --> 00:25:44,220
this is the actual bug so the bug is

587
00:25:41,910 --> 00:25:46,650
specifically interesting because it's a

588
00:25:44,220 --> 00:25:49,580
very rare type of books right so it was

589
00:25:46,650 --> 00:25:53,610
an internal overflow inside an object I

590
00:25:49,580 --> 00:25:56,189
found that and then once we disclosed

591
00:25:53,610 --> 00:25:58,830
the the bugs in probably the catalog

592
00:25:56,190 --> 00:26:00,840
ones in public Sebastian a pelt who

593
00:25:58,830 --> 00:26:02,730
who's a who's a frequent submitted to us

594
00:26:00,840 --> 00:26:04,350
actually submitted this is the same

595
00:26:02,730 --> 00:26:06,090
vulnerability but he found it through an

596
00:26:04,350 --> 00:26:07,350
AFL and he was taking a different

597
00:26:06,090 --> 00:26:10,980
approach which I'm gonna talk about

598
00:26:07,350 --> 00:26:13,250
which was quite funny so specifically

599
00:26:10,980 --> 00:26:16,500
that vulnerability is an overflow

600
00:26:13,250 --> 00:26:19,350
basically overflow an object with a

601
00:26:16,500 --> 00:26:21,180
counter initially when I when I found

602
00:26:19,350 --> 00:26:23,879
this one I built it was always crashing

603
00:26:21,180 --> 00:26:26,610
in the same place you know dereferencing

604
00:26:23,880 --> 00:26:28,090
the same you know value and I was like

605
00:26:26,610 --> 00:26:30,370
is this exploitable or not

606
00:26:28,090 --> 00:26:34,750
then I figured out that if I actually

607
00:26:30,370 --> 00:26:38,350
replicate the object then I can actually

608
00:26:34,750 --> 00:26:40,690
influence that counter and I kept

609
00:26:38,350 --> 00:26:43,810
replicating that object again and again

610
00:26:40,690 --> 00:26:47,980
and again and basically I ended up with

611
00:26:43,810 --> 00:26:50,050
this nice crash but frankly the index

612
00:26:47,980 --> 00:26:52,360
file was like freaking 10 and B it was

613
00:26:50,050 --> 00:26:54,610
so freaking huge but I was actually able

614
00:26:52,360 --> 00:26:59,229
to demonstrate exploit ability or

615
00:26:54,610 --> 00:27:00,669
control of that bug so I'll talk a

616
00:26:59,230 --> 00:27:05,770
little bit about the patch because it's

617
00:27:00,670 --> 00:27:09,070
it's quite funny so basically we send

618
00:27:05,770 --> 00:27:10,090
that to Adobe and I'm not gonna talk

619
00:27:09,070 --> 00:27:11,409
about it I'm not gonna burn the

620
00:27:10,090 --> 00:27:13,810
disclosure story because it's awesome

621
00:27:11,410 --> 00:27:15,760
talk about it after but what they did is

622
00:27:13,810 --> 00:27:20,230
basically they added a small magic value

623
00:27:15,760 --> 00:27:20,980
and just check small check and when it

624
00:27:20,230 --> 00:27:22,900
was released

625
00:27:20,980 --> 00:27:24,550
sebastien sent me a message he was like

626
00:27:22,900 --> 00:27:25,840
well I have a bypass for this

627
00:27:24,550 --> 00:27:26,290
vulnerability I was like holy crap

628
00:27:25,840 --> 00:27:28,959
really

629
00:27:26,290 --> 00:27:31,780
and it basically took him a couple of

630
00:27:28,960 --> 00:27:34,420
minutes to run another fuzz you know

631
00:27:31,780 --> 00:27:36,100
fathers run and that basically he was

632
00:27:34,420 --> 00:27:37,530
able to trigger the bug again which was

633
00:27:36,100 --> 00:27:39,429
awesome

634
00:27:37,530 --> 00:27:41,530
all right so let's talk about this

635
00:27:39,430 --> 00:27:44,340
closure which is I think for me it's

636
00:27:41,530 --> 00:27:48,389
it's one of the most interesting things

637
00:27:44,340 --> 00:27:51,929
so when I found all the catalog

638
00:27:48,390 --> 00:27:54,310
vulnerabilities I also found that bug in

639
00:27:51,930 --> 00:27:56,650
through fuzzing and it was in the core

640
00:27:54,310 --> 00:27:58,179
Onix API I actually found two

641
00:27:56,650 --> 00:28:00,340
vulnerabilities the first one was a heap

642
00:27:58,180 --> 00:28:03,190
overflow was that and they use after

643
00:28:00,340 --> 00:28:06,459
free so we sent all the vulnerabilities

644
00:28:03,190 --> 00:28:10,360
to Adobe at one point at once right and

645
00:28:06,460 --> 00:28:13,930
it happens that they managed to patch

646
00:28:10,360 --> 00:28:15,820
all the catalog vulnerabilities and they

647
00:28:13,930 --> 00:28:18,790
also got back to us they were like well

648
00:28:15,820 --> 00:28:21,429
we also patched the onyx vulnerability

649
00:28:18,790 --> 00:28:23,950
that you sent us which is they though we

650
00:28:21,430 --> 00:28:26,520
could not trigger the use after free and

651
00:28:23,950 --> 00:28:29,860
I was like okay let me check and

652
00:28:26,520 --> 00:28:32,050
basically what they did they disabled

653
00:28:29,860 --> 00:28:34,090
the build API which I was using to

654
00:28:32,050 --> 00:28:35,940
trigger the parsing but they did not

655
00:28:34,090 --> 00:28:38,770
actually patch the onyx 30 to the other

656
00:28:35,940 --> 00:28:40,470
vulnerability the reason for that is

657
00:28:38,770 --> 00:28:42,540
that they don't really own

658
00:28:40,470 --> 00:28:45,300
the code so basically the only own the

659
00:28:42,540 --> 00:28:47,670
code of catalog so it was easier for

660
00:28:45,300 --> 00:28:51,000
them to roll a patch and they were like

661
00:28:47,670 --> 00:28:53,790
okay let's try to mitigate this and just

662
00:28:51,000 --> 00:28:58,500
kill the build API now he cannot trigger

663
00:28:53,790 --> 00:28:59,700
the parsing code I was like okay then it

664
00:28:58,500 --> 00:29:01,950
turns out they actually just skidded

665
00:28:59,700 --> 00:29:05,640
through JavaScript but if you do it

666
00:29:01,950 --> 00:29:07,170
through the GUI basically the ID that I

667
00:29:05,640 --> 00:29:09,480
show that you can build then you can

668
00:29:07,170 --> 00:29:11,430
actually trigger the bugs again so I

669
00:29:09,480 --> 00:29:13,110
sent a bug again I was like well this is

670
00:29:11,430 --> 00:29:14,820
not true you can you can trigger it

671
00:29:13,110 --> 00:29:16,500
through one two three and they were like

672
00:29:14,820 --> 00:29:20,639
oops okay so we're gonna have to send it

673
00:29:16,500 --> 00:29:22,500
to like stack right they sent it to like

674
00:29:20,640 --> 00:29:26,880
stack and they got back to us

675
00:29:22,500 --> 00:29:27,900
they were like listen this is you cannot

676
00:29:26,880 --> 00:29:29,610
you cannot actually trigger the

677
00:29:27,900 --> 00:29:31,920
vulnerabilities anymore only through the

678
00:29:29,610 --> 00:29:35,459
GUI which is fine but we don't really

679
00:29:31,920 --> 00:29:37,890
consider that a high priority so would

680
00:29:35,460 --> 00:29:40,070
you guys stop looking at that component

681
00:29:37,890 --> 00:29:42,240
and stop sending us vulnerabilities I

682
00:29:40,070 --> 00:29:44,399
remember we actually had a call with

683
00:29:42,240 --> 00:29:47,490
Adobe and they were like we're gonna

684
00:29:44,400 --> 00:29:48,570
send you an email documenting every way

685
00:29:47,490 --> 00:29:52,740
that you can actually trigger the

686
00:29:48,570 --> 00:29:55,080
parsing and I was like fine so they sent

687
00:29:52,740 --> 00:29:57,660
us this big-ass email and they

688
00:29:55,080 --> 00:30:00,419
documented everything like okay so

689
00:29:57,660 --> 00:30:02,550
catalog you cannot do it search API you

690
00:30:00,420 --> 00:30:03,930
cannot do it I was like okay but I

691
00:30:02,550 --> 00:30:06,300
haven't been looking at the Search API

692
00:30:03,930 --> 00:30:09,270
but it turns out that this guy actually

693
00:30:06,300 --> 00:30:12,930
was looking at the Search API funny

694
00:30:09,270 --> 00:30:16,230
enough they documented every single case

695
00:30:12,930 --> 00:30:18,060
that you can hit that the the parsing

696
00:30:16,230 --> 00:30:20,760
code through query but they actually

697
00:30:18,060 --> 00:30:22,770
forgot or I don't know if they actually

698
00:30:20,760 --> 00:30:25,890
you know that you can trigger the

699
00:30:22,770 --> 00:30:28,830
parsing code even from a non privileged

700
00:30:25,890 --> 00:30:31,200
context if you add an active doc and an

701
00:30:28,830 --> 00:30:33,780
active doc is basically if you have that

702
00:30:31,200 --> 00:30:36,750
index file embedded inside the PDF and

703
00:30:33,780 --> 00:30:38,700
if you run a search acrobat active doc

704
00:30:36,750 --> 00:30:42,030
then you can definitely trigger the the

705
00:30:38,700 --> 00:30:46,080
whole code again so basically whatever

706
00:30:42,030 --> 00:30:47,910
they tell you not true not true so this

707
00:30:46,080 --> 00:30:49,710
is what what what Sebastian did

708
00:30:47,910 --> 00:30:51,450
basically he was approaching the whole

709
00:30:49,710 --> 00:30:53,830
research from the search plugin in

710
00:30:51,450 --> 00:30:55,989
reader and I was approaching

711
00:30:53,830 --> 00:30:58,269
research from the catalogue plugin from

712
00:30:55,989 --> 00:31:00,039
acrobat he even did it better right

713
00:30:58,269 --> 00:31:02,169
because he he was able to hit reader

714
00:31:00,039 --> 00:31:05,158
which is more valuable from an affirm

715
00:31:02,169 --> 00:31:09,190
from an attackers perspective that said

716
00:31:05,159 --> 00:31:11,590
he was like well Abdul I have I have

717
00:31:09,190 --> 00:31:12,970
like a bunch of vulnerabilities I was

718
00:31:11,590 --> 00:31:15,279
like do you have a bypass for that he's

719
00:31:12,970 --> 00:31:18,450
like yeah I have a bypass like yet send

720
00:31:15,279 --> 00:31:22,570
it so we sent everything to to Adobe and

721
00:31:18,450 --> 00:31:24,159
we ended up with a bunch of you know

722
00:31:22,570 --> 00:31:25,689
vulnerabilities he even found they use

723
00:31:24,159 --> 00:31:27,999
after free that they couldn't trigger

724
00:31:25,690 --> 00:31:30,570
and he got he sent them a better test

725
00:31:27,999 --> 00:31:34,200
case than mine which was awesome ie I

726
00:31:30,570 --> 00:31:38,230
admit defeat on this one which is fine

727
00:31:34,200 --> 00:31:40,200
so in the end adobe we had a call with

728
00:31:38,230 --> 00:31:42,369
adobe again and they were like listen we

729
00:31:40,200 --> 00:31:45,039
sent those vulnerability to like stack

730
00:31:42,369 --> 00:31:45,970
and lex tag got back to us and we think

731
00:31:45,039 --> 00:31:48,489
that they're gonna take a little bit

732
00:31:45,970 --> 00:31:52,200
more time to patch them i was like okay

733
00:31:48,489 --> 00:31:55,869
so they're like well we decided to just

734
00:31:52,200 --> 00:31:59,019
kill the whole thing and basically what

735
00:31:55,869 --> 00:32:01,559
they did they ended up disabling it from

736
00:31:59,019 --> 00:32:04,840
the registry so if you want to enable

737
00:32:01,559 --> 00:32:06,190
the onyx 32 parsing index parsing then

738
00:32:04,840 --> 00:32:09,759
you have to enabled from the registry

739
00:32:06,190 --> 00:32:11,169
which was you know which was nice and

740
00:32:09,759 --> 00:32:13,179
not nice at the same time because you

741
00:32:11,169 --> 00:32:14,559
actually have a vulnerable component

742
00:32:13,179 --> 00:32:18,999
sitting in your software if you actually

743
00:32:14,559 --> 00:32:20,918
enable that from their industry so to

744
00:32:18,999 --> 00:32:24,039
wrap things up i actually added this

745
00:32:20,919 --> 00:32:27,580
slide this morning so honestly i don't

746
00:32:24,039 --> 00:32:30,639
be doing a good job and you know being

747
00:32:27,580 --> 00:32:33,249
more proactive with security matters I

748
00:32:30,639 --> 00:32:35,799
mean they added CFG right they compiled

749
00:32:33,249 --> 00:32:37,480
everything with CFG but there are a

750
00:32:35,799 --> 00:32:38,440
couple of modules that are still not

751
00:32:37,480 --> 00:32:40,330
compile the CFG

752
00:32:38,440 --> 00:32:45,460
so I don't know if that really counts or

753
00:32:40,330 --> 00:32:47,889
not Acrobat by itself is a huge software

754
00:32:45,460 --> 00:32:49,720
a lot of components and Adobe keeps

755
00:32:47,889 --> 00:32:52,330
adding more components to it more

756
00:32:49,720 --> 00:32:57,159
components to it so it makes it a really

757
00:32:52,330 --> 00:32:58,570
interesting software to audit if you

758
00:32:57,159 --> 00:33:01,600
want to add third-party components to

759
00:32:58,570 --> 00:33:03,189
your software I mean yeah it's awesome

760
00:33:01,600 --> 00:33:05,559
third-party components can make your

761
00:33:03,190 --> 00:33:07,600
life easier but yeah they come with a

762
00:33:05,559 --> 00:33:15,690
heavy heavy security price

763
00:33:07,600 --> 00:33:15,689
and with that any questions don't crap

764
00:33:16,050 --> 00:33:19,050
yeah

765
00:33:20,700 --> 00:33:29,140
don't embarrass me so much so one of the

766
00:33:26,230 --> 00:33:31,180
arguments against Bob bounty programs

767
00:33:29,140 --> 00:33:33,160
and vulnerability disclosure is that the

768
00:33:31,180 --> 00:33:34,750
vendors kind of lay back on the QA

769
00:33:33,160 --> 00:33:37,090
trusting in other people to fix their

770
00:33:34,750 --> 00:33:39,070
bugs I would like to add that to the

771
00:33:37,090 --> 00:33:41,230
fact that adobe has been around for a

772
00:33:39,070 --> 00:33:42,730
very long time and there's a every time

773
00:33:41,230 --> 00:33:45,190
they send out the patch it's like 80

774
00:33:42,730 --> 00:33:48,010
vulnerabilities yep so I kind of if you

775
00:33:45,190 --> 00:33:49,810
can go one slide back I was wondering if

776
00:33:48,010 --> 00:33:52,000
I could challenge your first sentence

777
00:33:49,810 --> 00:33:53,950
that said that they're doing a good job

778
00:33:52,000 --> 00:33:55,990
in security their products because one

779
00:33:53,950 --> 00:33:58,600
could argue that what they should have

780
00:33:55,990 --> 00:34:01,510
done a long time ago is do a complete

781
00:33:58,600 --> 00:34:03,399
code review at the very least right so

782
00:34:01,510 --> 00:34:06,220
one thing I want to mention is that the

783
00:34:03,400 --> 00:34:08,170
reason why you would see a TiVo nobility

784
00:34:06,220 --> 00:34:09,940
is that they patch quarterly so

785
00:34:08,170 --> 00:34:11,740
basically every 3-4 months they release

786
00:34:09,940 --> 00:34:13,570
a patch so they don't do it like

787
00:34:11,739 --> 00:34:15,639
Microsoft every two we every that the

788
00:34:13,570 --> 00:34:18,640
second week of every month this is the

789
00:34:15,639 --> 00:34:20,710
first thing the second thing when I say

790
00:34:18,639 --> 00:34:23,770
about welding there being more proactive

791
00:34:20,710 --> 00:34:25,360
about you know security you would be

792
00:34:23,770 --> 00:34:29,469
surprised how many components a actually

793
00:34:25,360 --> 00:34:31,210
disabled HTML to PDF is still there XPS

794
00:34:29,469 --> 00:34:33,370
to PDF they disable that they killed

795
00:34:31,210 --> 00:34:35,020
that anything that actually has a lot of

796
00:34:33,370 --> 00:34:36,130
vulnerabilities and it's not so pretty

797
00:34:35,020 --> 00:34:38,679
critical for them they're actually

798
00:34:36,130 --> 00:34:41,230
killing the whole thing and plus they're

799
00:34:38,679 --> 00:34:45,040
trying to add mitigations okay so it's

800
00:34:41,230 --> 00:34:46,840
not you know it's not ideal mitigations

801
00:34:45,040 --> 00:34:48,400
for example CFG they did not enable for

802
00:34:46,840 --> 00:34:50,920
all the modules so you can still bypass

803
00:34:48,400 --> 00:34:53,650
it somehow but they're trying and I've

804
00:34:50,920 --> 00:34:55,210
heard they're actually trying to roll

805
00:34:53,650 --> 00:34:56,740
more medications like you know hip

806
00:34:55,210 --> 00:34:59,230
isolations and stuff like that so they

807
00:34:56,739 --> 00:35:00,970
can minimize the exploitation of use

808
00:34:59,230 --> 00:35:03,310
after freeze and stuff like that so I

809
00:35:00,970 --> 00:35:05,950
would give it to them but they still

810
00:35:03,310 --> 00:35:08,200
have a lot of old or old code rewriting

811
00:35:05,950 --> 00:35:10,000
that as not the easiest so it definitely

812
00:35:08,200 --> 00:35:11,049
requires rewriting the whole application

813
00:35:10,000 --> 00:35:13,630
and I don't know if they actually want

814
00:35:11,050 --> 00:35:15,810
to do that right so this is my take on

815
00:35:13,630 --> 00:35:15,810
it

816
00:35:16,070 --> 00:35:28,430
trying to be positive okay we have

817
00:35:18,380 --> 00:35:30,310
another question over here it's this

818
00:35:28,430 --> 00:35:33,169
more likely a question to the audience

819
00:35:30,310 --> 00:35:36,100
why there are so many users of Adobe

820
00:35:33,170 --> 00:35:38,870
Reber if you can read PDFs with wrong

821
00:35:36,100 --> 00:35:42,020
yes that's a good question actually I

822
00:35:38,870 --> 00:35:45,560
can answer that for you okay so chrome

823
00:35:42,020 --> 00:35:47,810
basic so basically if you want to create

824
00:35:45,560 --> 00:35:51,529
PDFs do PDF editing you cannot do it in

825
00:35:47,810 --> 00:35:53,750
Chrome second PDF PDF iam in chrome

826
00:35:51,530 --> 00:35:55,970
supports JavaScript as well right and

827
00:35:53,750 --> 00:36:00,170
it's a spin-off well basically it uses

828
00:35:55,970 --> 00:36:02,419
Foxit SDK initially it definitely

829
00:36:00,170 --> 00:36:04,100
disabled a lot of api's it's way more

830
00:36:02,420 --> 00:36:06,200
secure than Acrobat don't get me wrong

831
00:36:04,100 --> 00:36:07,730
when it comes to JavaScript but it

832
00:36:06,200 --> 00:36:10,910
doesn't expose a lot of attack surface

833
00:36:07,730 --> 00:36:14,510
plus you cannot do much with it you can

834
00:36:10,910 --> 00:36:16,580
only read documents for people actually

835
00:36:14,510 --> 00:36:18,080
want to edit documents and send it and

836
00:36:16,580 --> 00:36:19,430
do a little bit more automation and

837
00:36:18,080 --> 00:36:21,259
enterprises this is not a good solution

838
00:36:19,430 --> 00:36:22,850
actually it's a good solution for end

839
00:36:21,260 --> 00:36:26,300
users who don't want to do much with

840
00:36:22,850 --> 00:36:29,210
PDFs which I understand but if your

841
00:36:26,300 --> 00:36:30,740
business relies on PDF editing or stuff

842
00:36:29,210 --> 00:36:33,950
like that then you gotta find a better

843
00:36:30,740 --> 00:36:36,410
solution for that frankly I had a look

844
00:36:33,950 --> 00:36:41,480
at PDF um it's pretty nice from a

845
00:36:36,410 --> 00:36:43,299
JavaScript perspective at least any

846
00:36:41,480 --> 00:36:46,300
other questions anybody else have a

847
00:36:43,300 --> 00:36:46,300
question

848
00:36:46,900 --> 00:36:53,750
sweet oh so feel free to reach out to me

849
00:36:50,420 --> 00:36:56,890
I'll be around okay Abdul Aziz thank you

850
00:36:53,750 --> 00:36:56,890
very much thank you

851
00:36:57,550 --> 00:36:59,610
you

