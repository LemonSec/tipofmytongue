1
00:00:00,060 --> 00:00:02,190
good afternoon everyone my name is Java

2
00:00:02,190 --> 00:00:05,100
vitsin and welcome everyone to exfoliate

3
00:00:05,100 --> 00:00:08,039
generation and Java sleep and it is this

4
00:00:08,039 --> 00:00:11,700
automation with in debug a few words

5
00:00:11,700 --> 00:00:15,690
about ourselves I have way too much

6
00:00:15,690 --> 00:00:18,510
information about myself and on Google

7
00:00:18,510 --> 00:00:20,550
or on the internet so if you want to

8
00:00:20,550 --> 00:00:22,289
know anything about me just google my

9
00:00:22,289 --> 00:00:24,630
name and you will probably know my

10
00:00:24,630 --> 00:00:29,279
entire life back to school I have a wife

11
00:00:29,279 --> 00:00:33,899
and the three-year-old son and I love

12
00:00:33,899 --> 00:00:34,469
hiking

13
00:00:34,469 --> 00:00:37,980
as my number one hobby and of course the

14
00:00:37,980 --> 00:00:41,670
second one is security and I have plenty

15
00:00:41,670 --> 00:00:43,860
of certification for some reason I just

16
00:00:43,860 --> 00:00:46,160
love to do them I have plenty of

17
00:00:46,160 --> 00:00:49,500
unimportant ones and a few more useful

18
00:00:49,500 --> 00:00:52,350
ones and I the most from offensive

19
00:00:52,350 --> 00:00:57,300
security Hey hello folks

20
00:00:57,300 --> 00:01:02,000
so my name is Mike lodged aboard and as

21
00:01:02,000 --> 00:01:04,949
opposed to what trouble are saying I'm

22
00:01:04,949 --> 00:01:07,140
the dark person so I don't have too much

23
00:01:07,140 --> 00:01:09,180
information published about myself on

24
00:01:09,180 --> 00:01:11,310
the net so I challenge you to find

25
00:01:11,310 --> 00:01:14,070
anything about me probably you'll find

26
00:01:14,070 --> 00:01:16,619
something from from this week but not

27
00:01:16,619 --> 00:01:20,700
too much before that so that said I'm

28
00:01:20,700 --> 00:01:22,799
also married I have two beautiful kids

29
00:01:22,799 --> 00:01:28,619
and I'm also a hobbyist hacker but aside

30
00:01:28,619 --> 00:01:30,630
from you know spending hours before the

31
00:01:30,630 --> 00:01:32,579
screen I also do a lot of hiking and

32
00:01:32,579 --> 00:01:35,100
each year try to do a bit of you know a

33
00:01:35,100 --> 00:01:38,970
challenge to try a new sport so I have

34
00:01:38,970 --> 00:01:41,220
less lot less certificates in Shaba

35
00:01:41,220 --> 00:01:43,290
house because he's a absolute champion

36
00:01:43,290 --> 00:01:46,079
at that but the one that's probably

37
00:01:46,079 --> 00:01:48,540
relevant for today is as a diagram so

38
00:01:48,540 --> 00:01:51,899
Jack's reverse engineering model so with

39
00:01:51,899 --> 00:01:52,979
that back to choppa

40
00:01:52,979 --> 00:01:56,670
thank you so why had the first part is

41
00:01:56,670 --> 00:02:00,630
the automated exploit generation so what

42
00:02:00,630 --> 00:02:04,829
started the entire idea of it making

43
00:02:04,829 --> 00:02:08,128
exploit it kinda can be or actually it

44
00:02:08,128 --> 00:02:11,459
is really heavily manual process when

45
00:02:11,459 --> 00:02:13,650
you start it

46
00:02:13,650 --> 00:02:15,810
because basically when you load the

47
00:02:15,810 --> 00:02:18,180
application crush it for the first time

48
00:02:18,180 --> 00:02:20,430
you need to go around discover the

49
00:02:20,430 --> 00:02:22,800
memory layout check the registers but

50
00:02:22,800 --> 00:02:26,370
which of them points well and so on

51
00:02:26,370 --> 00:02:29,450
calculate offsets calculate your space

52
00:02:29,450 --> 00:02:34,080
on the buffer and so on and so on not

53
00:02:34,080 --> 00:02:36,980
speaking about when you load the

54
00:02:36,980 --> 00:02:39,360
application debugger and you start to

55
00:02:39,360 --> 00:02:41,820
develop your exploit and maybe you

56
00:02:41,820 --> 00:02:43,620
forget to set your breakpoint and the

57
00:02:43,620 --> 00:02:45,480
application just Rachel oh I forgot it

58
00:02:45,480 --> 00:02:46,890
ok let's start it over

59
00:02:46,890 --> 00:02:49,650
you start the bugger you attach the

60
00:02:49,650 --> 00:02:52,890
process you cache it again you forgot to

61
00:02:52,890 --> 00:02:55,830
set the break point again then you maybe

62
00:02:55,830 --> 00:02:59,370
make a mistake with your share code or

63
00:02:59,370 --> 00:03:02,790
with a memory address by mistake you

64
00:03:02,790 --> 00:03:05,520
make the memory address in beacon be on

65
00:03:05,520 --> 00:03:07,890
instead of little-endian and you always

66
00:03:07,890 --> 00:03:09,450
have to start the process started

67
00:03:09,450 --> 00:03:12,330
debugger attach it and and so on this is

68
00:03:12,330 --> 00:03:17,070
quite time-consuming to be too and and

69
00:03:17,070 --> 00:03:20,580
if you actually look what how you

70
00:03:20,580 --> 00:03:23,310
develop and exploit it and we are

71
00:03:23,310 --> 00:03:25,020
talking here about basic buffer

72
00:03:25,020 --> 00:03:28,550
overflows it's it's pretty standard

73
00:03:28,550 --> 00:03:31,440
basically what you do once you have the

74
00:03:31,440 --> 00:03:33,510
cache so we are not talking about the

75
00:03:33,510 --> 00:03:35,160
fuzzing part here it just when you

76
00:03:35,160 --> 00:03:37,260
already know that you can control the IP

77
00:03:37,260 --> 00:03:40,500
and then develop the exploit you need to

78
00:03:40,500 --> 00:03:42,600
find the IP overwrite location

79
00:03:42,600 --> 00:03:47,940
so find offset on your buffer then you

80
00:03:47,940 --> 00:03:50,610
will examine the memory layout for for

81
00:03:50,610 --> 00:03:53,220
all the offsets for the space the

82
00:03:53,220 --> 00:03:55,500
registers what can you play with it and

83
00:03:55,500 --> 00:03:58,410
and so on then you need to find a way to

84
00:03:58,410 --> 00:04:01,140
jump to your shellcode type weekly like

85
00:04:01,140 --> 00:04:03,870
jump ESP and so on but you can use jump

86
00:04:03,870 --> 00:04:07,710
other registers or call any of the

87
00:04:07,710 --> 00:04:10,350
registers or just put the register value

88
00:04:10,350 --> 00:04:14,070
and then return to it and then you need

89
00:04:14,070 --> 00:04:17,010
to find an address in in the memory

90
00:04:17,010 --> 00:04:20,608
which actually contains this small SM

91
00:04:20,608 --> 00:04:22,230
the instruction that you can use on your

92
00:04:22,230 --> 00:04:24,810
on your exploit and then you need to

93
00:04:24,810 --> 00:04:25,720
generate the shackle

94
00:04:25,720 --> 00:04:28,210
Metis for it topically and then put it

95
00:04:28,210 --> 00:04:31,060
all together and if all goes value you

96
00:04:31,060 --> 00:04:34,000
managed to develop an exploit but again

97
00:04:34,000 --> 00:04:37,290
this this can be a lot of time even for

98
00:04:37,290 --> 00:04:42,970
simple buffer overflows so I told that

99
00:04:42,970 --> 00:04:46,440
my task or I came up with this idea that

100
00:04:46,440 --> 00:04:48,720
why not automate the entire process

101
00:04:48,720 --> 00:04:51,990
there are tools like Mona that already

102
00:04:51,990 --> 00:04:55,960
does a great job for you for many of the

103
00:04:55,960 --> 00:04:59,620
parts but doesn't automate the end the

104
00:04:59,620 --> 00:05:03,460
entire flow and again this is for most

105
00:05:03,460 --> 00:05:05,290
of the cases of course there are corner

106
00:05:05,290 --> 00:05:07,150
cases and there will be always corner

107
00:05:07,150 --> 00:05:09,400
cases for typing a buffer overflow it's

108
00:05:09,400 --> 00:05:12,520
just again a standard process so the

109
00:05:12,520 --> 00:05:15,940
idea of both develop some tool which can

110
00:05:15,940 --> 00:05:18,190
create a working exploit from a crash

111
00:05:18,190 --> 00:05:21,610
like a proof-of-concept if possible with

112
00:05:21,610 --> 00:05:26,530
zero manual interaction so I wrote a

113
00:05:26,530 --> 00:05:31,450
module in Python which uses the PV PV ID

114
00:05:31,450 --> 00:05:35,110
library to interact with in debug this

115
00:05:35,110 --> 00:05:39,340
limits this entire tool currently to two

116
00:05:39,340 --> 00:05:44,380
windows applications py KB is a very

117
00:05:44,380 --> 00:05:47,190
powerful Python library that can

118
00:05:47,190 --> 00:05:50,710
interact with it in debug it's developed

119
00:05:50,710 --> 00:05:55,330
by a Russian team I they don't really

120
00:05:55,330 --> 00:05:57,820
have a name of the group it's a few

121
00:05:57,820 --> 00:06:00,610
developers you can just google it and

122
00:06:00,610 --> 00:06:02,700
you will find all the people

123
00:06:02,700 --> 00:06:05,650
participating in this project and

124
00:06:05,650 --> 00:06:08,410
basically it allows you to even start in

125
00:06:08,410 --> 00:06:12,030
debug from Python attach the process or

126
00:06:12,030 --> 00:06:15,430
just start the entire process in Python

127
00:06:15,430 --> 00:06:20,830
without really opening VIN debug and it

128
00:06:20,830 --> 00:06:23,320
can send and use all of the VIN debug

129
00:06:23,320 --> 00:06:27,160
commands from Python and you can get

130
00:06:27,160 --> 00:06:29,560
those output and you can use them or it

131
00:06:29,560 --> 00:06:32,380
has a very rich API which allows you to

132
00:06:32,380 --> 00:06:35,050
read register values read pointers

133
00:06:35,050 --> 00:06:37,780
search the memory and so on so again

134
00:06:37,780 --> 00:06:38,639
this

135
00:06:38,639 --> 00:06:41,949
really powerful and actually the tool is

136
00:06:41,949 --> 00:06:44,110
already released on on github and we'll

137
00:06:44,110 --> 00:06:46,330
put the link at the end of the

138
00:06:46,330 --> 00:06:50,740
presentation so what can it do again it

139
00:06:50,740 --> 00:06:53,740
at this point it only works for basic

140
00:06:53,740 --> 00:06:58,749
buffer overflows it can bypass a SLR if

141
00:06:58,749 --> 00:07:01,930
the application has a module or DLL

142
00:07:01,930 --> 00:07:06,270
which doesn't have the a SLR bit set so

143
00:07:06,270 --> 00:07:09,400
it choose one of the methods to bypass

144
00:07:09,400 --> 00:07:12,669
it and you can set it on the on the

145
00:07:12,669 --> 00:07:14,229
command line if you want to look for

146
00:07:14,229 --> 00:07:17,110
that or or not it works for network and

147
00:07:17,110 --> 00:07:20,139
firebase exploits it's important because

148
00:07:20,139 --> 00:07:23,560
the workflow it's a bit different so if

149
00:07:23,560 --> 00:07:27,990
your exploit is five days like an mp3

150
00:07:27,990 --> 00:07:30,699
list then you need to actually generate

151
00:07:30,699 --> 00:07:32,319
the file and then open the application

152
00:07:32,319 --> 00:07:35,349
open the file while with network-based

153
00:07:35,349 --> 00:07:37,060
exploits you actually need to start the

154
00:07:37,060 --> 00:07:40,289
application and then send exploit after

155
00:07:40,289 --> 00:07:43,649
and it will create a successful exploit

156
00:07:43,649 --> 00:07:47,469
from the simple cache and it automates

157
00:07:47,469 --> 00:07:50,139
the entire process unless you need to

158
00:07:50,139 --> 00:07:52,180
interact with the application for some

159
00:07:52,180 --> 00:07:55,689
reason but if not then then basically

160
00:07:55,689 --> 00:07:58,719
you don't have to touch it and you don't

161
00:07:58,719 --> 00:08:00,520
need to start in debug or anything

162
00:08:00,520 --> 00:08:03,069
because the descript feed will start the

163
00:08:03,069 --> 00:08:07,749
process inside when debug already so

164
00:08:07,749 --> 00:08:09,460
what's the logic of the application how

165
00:08:09,460 --> 00:08:13,149
does it work if you find the EIP

166
00:08:13,149 --> 00:08:16,830
overwrite location the offset for that

167
00:08:16,830 --> 00:08:19,689
it uses the pretty much the same method

168
00:08:19,689 --> 00:08:22,810
that most people usually do it will

169
00:08:22,810 --> 00:08:25,149
create a pattern and then find the

170
00:08:25,149 --> 00:08:28,300
offset for that pattern and then it you

171
00:08:28,300 --> 00:08:30,520
find registers pointing to your buffer

172
00:08:30,520 --> 00:08:33,849
and then it will find all the bad

173
00:08:33,849 --> 00:08:39,610
characters that is not who from the

174
00:08:39,610 --> 00:08:41,799
exploited point of view it will

175
00:08:41,799 --> 00:08:46,440
basically go over all the 256 options

176
00:08:46,440 --> 00:08:49,120
and then it will find a way to jump to

177
00:08:49,120 --> 00:08:50,370
your shellcode

178
00:08:50,370 --> 00:08:53,550
using maybe a jump instruction or a call

179
00:08:53,550 --> 00:08:56,580
instruction or something else it will

180
00:08:56,580 --> 00:08:58,650
generate a shock oil now for this one it

181
00:08:58,650 --> 00:09:00,360
will use Metasploit to generate the

182
00:09:00,360 --> 00:09:00,990
share code

183
00:09:00,990 --> 00:09:03,600
I didn't want it to reinvent the wheel

184
00:09:03,600 --> 00:09:07,980
here at this point the script is hard

185
00:09:07,980 --> 00:09:10,170
woody to generate a share code to start

186
00:09:10,170 --> 00:09:13,080
Clark that exe but it's basically you

187
00:09:13,080 --> 00:09:15,060
just replace one line in the script

188
00:09:15,060 --> 00:09:17,340
what kind of share code you want to to

189
00:09:17,340 --> 00:09:19,800
generate basically you have to enter the

190
00:09:19,800 --> 00:09:23,010
the Metasploit command itself and then

191
00:09:23,010 --> 00:09:25,530
it will read back the shell code put it

192
00:09:25,530 --> 00:09:28,920
all together and run the exploit and it

193
00:09:28,920 --> 00:09:31,050
will also save the exploit if you want

194
00:09:31,050 --> 00:09:33,450
in case it's a file-based then it's

195
00:09:33,450 --> 00:09:36,510
already saved if it's a network base you

196
00:09:36,510 --> 00:09:38,490
basically you need to do some writing

197
00:09:38,490 --> 00:09:42,540
but it will essentially create a Python

198
00:09:42,540 --> 00:09:46,320
script for you which will save the or

199
00:09:46,320 --> 00:09:50,070
which we will run the the exploit so I

200
00:09:50,070 --> 00:09:55,200
have a demo here and hopefully all goes

201
00:09:55,200 --> 00:09:57,530
well

202
00:10:05,780 --> 00:10:16,070
so let me delete this file okay so the

203
00:10:16,070 --> 00:10:21,320
first example is mini sure I think if

204
00:10:21,320 --> 00:10:23,660
you started with exploit development you

205
00:10:23,660 --> 00:10:26,870
probably came across security tube and

206
00:10:26,870 --> 00:10:29,450
they are using mini shudder as well as

207
00:10:29,450 --> 00:10:31,910
an example it's pretty old but I think

208
00:10:31,910 --> 00:10:36,530
it's great for for education so

209
00:10:36,530 --> 00:10:39,710
basically I just start the script here

210
00:10:39,710 --> 00:10:43,400
and I will let it run and then go back

211
00:10:43,400 --> 00:10:45,770
for the logs it will log all the

212
00:10:45,770 --> 00:10:48,890
important parts of the exploit

213
00:10:48,890 --> 00:10:52,010
development as you can see it's always

214
00:10:52,010 --> 00:10:54,590
starting mini shell and restarting it

215
00:10:54,590 --> 00:10:56,660
for all the various steps at this point

216
00:10:56,660 --> 00:11:00,200
is looking for bad characters but I will

217
00:11:00,200 --> 00:11:02,560
scroll back in a minute

218
00:11:02,560 --> 00:11:05,540
now it's generating shell code it takes

219
00:11:05,540 --> 00:11:09,320
a few seconds and at the end we see a

220
00:11:09,320 --> 00:11:11,780
 popping up oh that's great

221
00:11:11,780 --> 00:11:13,250
this is the first time I got caught

222
00:11:13,250 --> 00:11:15,350
popping up at the front and not

223
00:11:15,350 --> 00:11:20,750
somewhere in the background so let's see

224
00:11:20,750 --> 00:11:23,560
what happened here

225
00:11:27,590 --> 00:11:32,640
so is it seen good enough or you want me

226
00:11:32,640 --> 00:11:36,480
to zoom in even more maybe bit more so

227
00:11:36,480 --> 00:11:39,570
it will send in a pattern for mini chard

228
00:11:39,570 --> 00:11:44,790
and it will identify what is the pattern

229
00:11:44,790 --> 00:11:47,220
that overrode the IP it will identify

230
00:11:47,220 --> 00:11:51,450
the offset there are some exceptions

231
00:11:51,450 --> 00:11:53,820
around because maybe some of the

232
00:11:53,820 --> 00:11:56,490
registers are uninitialized or pointing

233
00:11:56,490 --> 00:12:00,560
to to an uninitialized memory space and

234
00:12:00,560 --> 00:12:04,260
they will throw an exception but it just

235
00:12:04,260 --> 00:12:08,240
ignore set that then it will calculate

236
00:12:08,240 --> 00:12:12,930
the the space you have on the buffer and

237
00:12:12,930 --> 00:12:15,000
then if you start looking for the bad

238
00:12:15,000 --> 00:12:20,280
characters identifying all of them it

239
00:12:20,280 --> 00:12:22,350
will take a list of them and based this

240
00:12:22,350 --> 00:12:23,790
will be used when generating the

241
00:12:23,790 --> 00:12:24,270
shellcode

242
00:12:24,270 --> 00:12:27,750
it matters flow it now it already knows

243
00:12:27,750 --> 00:12:29,850
which registers is pointing to your

244
00:12:29,850 --> 00:12:33,000
buffer so it will try it in case this is

245
00:12:33,000 --> 00:12:37,290
ESP and it will try to find jump ESP in

246
00:12:37,290 --> 00:12:40,620
the loaded modules so it will go through

247
00:12:40,620 --> 00:12:42,660
all the loaded modules and search

248
00:12:42,660 --> 00:12:46,590
through them and it will log how many as

249
00:12:46,590 --> 00:12:48,900
some assembly instruction is found it

250
00:12:48,900 --> 00:12:52,380
does module that you can use at the end

251
00:12:52,380 --> 00:12:56,100
it will list all of them all the memory

252
00:12:56,100 --> 00:12:58,530
addresses it will pick up the first one

253
00:12:58,530 --> 00:13:01,590
or actually it will pick up any of those

254
00:13:01,590 --> 00:13:04,320
that doesn't contain a bad character so

255
00:13:04,320 --> 00:13:08,070
this list will be filtered it will

256
00:13:08,070 --> 00:13:10,220
generate the shellcode but this is

257
00:13:10,220 --> 00:13:15,540
Metasploit at the end and it will only

258
00:13:15,540 --> 00:13:17,850
be exploited and then we have the

259
00:13:17,850 --> 00:13:21,000
in this case but what it also did it

260
00:13:21,000 --> 00:13:23,280
created a Python script which is

261
00:13:23,280 --> 00:13:27,990
basically the the actual exploit and not

262
00:13:27,990 --> 00:13:35,070
much is in here yeah some the message is

263
00:13:35,070 --> 00:13:36,399
there but

264
00:13:36,399 --> 00:13:39,050
this fight on edit or doesn't display it

265
00:13:39,050 --> 00:13:44,109
very well anyhow if I start mini share

266
00:13:44,440 --> 00:13:51,529
and I have this mini share exploit white

267
00:13:51,529 --> 00:13:53,829
on strip which was generated by this I

268
00:13:53,829 --> 00:13:57,319
started and then you have a cork in the

269
00:13:57,319 --> 00:14:02,180
background so so it works and I can show

270
00:14:02,180 --> 00:14:06,440
another demo of it with another one the

271
00:14:06,440 --> 00:14:15,529
easy RM that's a mp3 player basically it

272
00:14:15,529 --> 00:14:21,110
will do the same here this is this is a

273
00:14:21,110 --> 00:14:23,180
file based exploit so it has to create

274
00:14:23,180 --> 00:14:27,259
an m3 u file in order to crash the

275
00:14:27,259 --> 00:14:30,380
application now luckily the application

276
00:14:30,380 --> 00:14:33,380
has a command-line option to load the m3

277
00:14:33,380 --> 00:14:36,259
u file so I don't need to interact with

278
00:14:36,259 --> 00:14:38,569
it but if it didn't have I probably need

279
00:14:38,569 --> 00:14:40,430
to go every time to the application load

280
00:14:40,430 --> 00:14:42,949
the file and crash it and once the crash

281
00:14:42,949 --> 00:14:45,519
happened the script we take over again

282
00:14:45,519 --> 00:14:49,430
so basically you only need to and what

283
00:14:49,430 --> 00:14:51,350
the application then we have corrigan

284
00:14:51,350 --> 00:14:59,600
and if i open the application and load

285
00:14:59,600 --> 00:15:02,139
the file

286
00:15:05,760 --> 00:15:10,880
this list m3u generated

287
00:15:16,740 --> 00:15:21,000
okay I will skip that but basically that

288
00:15:21,000 --> 00:15:23,760
five was used to actually head the

289
00:15:23,760 --> 00:15:27,630
exploit I'm not sure might didn't do it

290
00:15:27,630 --> 00:15:31,590
properly manually anyhow let me switch

291
00:15:31,590 --> 00:15:42,000
back to the presentation so I have it

292
00:15:42,000 --> 00:15:43,800
out here just in case it didn't work but

293
00:15:43,800 --> 00:15:47,670
it works so no need to show that how to

294
00:15:47,670 --> 00:15:50,250
use it now there is some pre work that

295
00:15:50,250 --> 00:15:54,750
has to happen because we need to

296
00:15:54,750 --> 00:15:56,940
dynamically build the exploit so I

297
00:15:56,940 --> 00:15:59,340
actually need to dynamically build the

298
00:15:59,340 --> 00:16:02,100
buffer sent to the application and for

299
00:16:02,100 --> 00:16:03,900
that I need to interact with it and I

300
00:16:03,900 --> 00:16:07,920
just choose making the exploit as a as a

301
00:16:07,920 --> 00:16:10,710
class and basically you have to populate

302
00:16:10,710 --> 00:16:14,760
that class with some initial info and

303
00:16:14,760 --> 00:16:17,400
basically that's mainly the exploit

304
00:16:17,400 --> 00:16:25,170
function but let me go to my text editor

305
00:16:25,170 --> 00:16:30,260
and show it here

306
00:16:33,710 --> 00:16:39,720
let me choose this one so basically in

307
00:16:39,720 --> 00:16:42,210
the exploit function you define the

308
00:16:42,210 --> 00:16:46,470
actual crash the POC and then you have

309
00:16:46,470 --> 00:16:49,200
this buffer variable which will be a

310
00:16:49,200 --> 00:16:52,320
list of strings and you need to do a

311
00:16:52,320 --> 00:16:55,860
join on the strings what will be sent

312
00:16:55,860 --> 00:16:57,870
into what other than that if you have a

313
00:16:57,870 --> 00:17:01,770
POC Python code you basically copy it to

314
00:17:01,770 --> 00:17:04,829
this part there are some other things

315
00:17:04,829 --> 00:17:06,720
that you need to specify if it's a

316
00:17:06,720 --> 00:17:08,790
file-based or not you need to specify

317
00:17:08,790 --> 00:17:13,369
the command for the actual application

318
00:17:13,369 --> 00:17:17,160
if it's a file based exploit it's best

319
00:17:17,160 --> 00:17:19,200
to define a file name as well because we

320
00:17:19,200 --> 00:17:26,459
need to save a file and there is a save

321
00:17:26,459 --> 00:17:29,910
option as well which basically writing

322
00:17:29,910 --> 00:17:33,810
out the function you have here

323
00:17:33,810 --> 00:17:38,540
to a file and and that's all that's it

324
00:17:38,540 --> 00:17:44,280
and if it's if it's a firebase then the

325
00:17:44,280 --> 00:17:45,960
saving is just the path because the

326
00:17:45,960 --> 00:17:51,920
files should be already saved and there

327
00:17:52,460 --> 00:17:57,810
so as for the future of this application

328
00:17:57,810 --> 00:18:00,000
so I think this can be easily develop

329
00:18:00,000 --> 00:18:03,960
further for a CH based exploits to add

330
00:18:03,960 --> 00:18:06,150
some more logic around more tricky jumps

331
00:18:06,150 --> 00:18:08,910
to your share code or if your buffer is

332
00:18:08,910 --> 00:18:13,320
more tricky also possibly it's also

333
00:18:13,320 --> 00:18:15,690
possible to develop a deeply bypass with

334
00:18:15,690 --> 00:18:19,860
developing rope chains dynamically but

335
00:18:19,860 --> 00:18:21,900
at this point it doesn't know them it

336
00:18:21,900 --> 00:18:26,000
just for four basic buffer overflow

337
00:18:26,000 --> 00:18:29,150
thank you

338
00:18:30,200 --> 00:18:33,050
like life let me see if I can transfer

339
00:18:33,050 --> 00:18:37,659
the screen it's okay

340
00:18:48,249 --> 00:18:51,199
okay so funny thing is that both Java

341
00:18:51,199 --> 00:18:56,559
and I attended the very same magnificent

342
00:18:56,559 --> 00:18:59,479
exploitation training provided by my

343
00:18:59,479 --> 00:19:04,549
Cortland but we took very opposite

344
00:19:04,549 --> 00:19:06,889
angles of of looking at what's possible

345
00:19:06,889 --> 00:19:14,089
with a very same set of tools so can be

346
00:19:14,089 --> 00:19:15,859
used really can we use the very same

347
00:19:15,859 --> 00:19:18,529
technology for blue teaming or kind of

348
00:19:18,529 --> 00:19:25,190
doing reverse engineering typically when

349
00:19:25,190 --> 00:19:28,219
it comes to browser exploit reversing

350
00:19:28,219 --> 00:19:30,739
them is time-consuming you have a bunch

351
00:19:30,739 --> 00:19:33,859
of challenges any reverse engineers out

352
00:19:33,859 --> 00:19:39,289
in the room okay few hands so you

353
00:19:39,289 --> 00:19:40,940
wouldn't want to waste a time you on on

354
00:19:40,940 --> 00:19:42,409
code that is not actually malicious

355
00:19:42,409 --> 00:19:44,539
right so first the whole thing comes up

356
00:19:44,539 --> 00:19:49,329
with in automated sandbox flagging on

357
00:19:49,329 --> 00:19:52,339
suspicious behavior or the level two

358
00:19:52,339 --> 00:19:56,269
team notices something funny and then it

359
00:19:56,269 --> 00:20:00,619
the thing lands on your desk so what the

360
00:20:00,619 --> 00:20:03,919
next steps are you typically end up

361
00:20:03,919 --> 00:20:06,639
looking at an obfuscated source code

362
00:20:06,639 --> 00:20:09,469
typically a JavaScript code with the

363
00:20:09,469 --> 00:20:12,159
heavy obfuscation that eventually

364
00:20:12,159 --> 00:20:15,369
exploits some browser vulnerability

365
00:20:15,369 --> 00:20:19,009
let's just assume it's a user after free

366
00:20:19,009 --> 00:20:22,940
situation and then uses a bit of a shell

367
00:20:22,940 --> 00:20:29,149
code to to put it into a heap location

368
00:20:29,149 --> 00:20:32,329
and then run it so there are a number of

369
00:20:32,329 --> 00:20:35,059
challenges associated with this like if

370
00:20:35,059 --> 00:20:38,389
you're analyzing this inside the native

371
00:20:38,389 --> 00:20:41,719
debugger the browser is built-in

372
00:20:41,719 --> 00:20:45,169
debugger I mean you first have to spend

373
00:20:45,169 --> 00:20:46,519
a bit of time of figuring out where to

374
00:20:46,519 --> 00:20:48,979
put a breakpoints if it's possible to

375
00:20:48,979 --> 00:20:51,949
use put the breakpoints in the locations

376
00:20:51,949 --> 00:20:56,809
that you need to at all then you can

377
00:20:56,809 --> 00:20:58,160
actually

378
00:20:58,160 --> 00:21:01,190
rip the code out of the HTML page and

379
00:21:01,190 --> 00:21:02,420
have it analyzed in the external

380
00:21:02,420 --> 00:21:06,470
javascript engine but then again you are

381
00:21:06,470 --> 00:21:08,300
not not having any references any longer

382
00:21:08,300 --> 00:21:12,620
to the Dom objects so if for any if in

383
00:21:12,620 --> 00:21:15,110
any chance the JavaScript still refers

384
00:21:15,110 --> 00:21:17,510
back to certain Dom objects it will no

385
00:21:17,510 --> 00:21:22,910
longer work also a bunch of JavaScript

386
00:21:22,910 --> 00:21:25,330
code that we've seen in the in the wild

387
00:21:25,330 --> 00:21:27,710
implements some sort of anti debugging

388
00:21:27,710 --> 00:21:30,410
or anti reversing techniques so trying

389
00:21:30,410 --> 00:21:31,670
to detect whether is being debugged and

390
00:21:31,670 --> 00:21:33,320
either not working or working

391
00:21:33,320 --> 00:21:42,140
differently so the methodology really is

392
00:21:42,140 --> 00:21:46,820
to the office Kate catch the function

393
00:21:46,820 --> 00:21:48,710
before they execute set up the

394
00:21:48,710 --> 00:21:51,260
breakpoint or even the and the

395
00:21:51,260 --> 00:21:53,690
overloading of the functions if that's

396
00:21:53,690 --> 00:21:56,420
your way to do it and then locate the

397
00:21:56,420 --> 00:21:58,610
arts Lloyd and understand the the Shire

398
00:21:58,610 --> 00:22:00,790
code that happens to be behind it

399
00:22:00,790 --> 00:22:03,230
now where the forney we're not going to

400
00:22:03,230 --> 00:22:06,860
release something that will address all

401
00:22:06,860 --> 00:22:08,420
your problems that it would ever come up

402
00:22:08,420 --> 00:22:11,000
with the reverse engineering browser

403
00:22:11,000 --> 00:22:15,170
exploits but we're trying to let loose

404
00:22:15,170 --> 00:22:18,440
something of an idea on how you may want

405
00:22:18,440 --> 00:22:20,870
to do it differently than most people

406
00:22:20,870 --> 00:22:26,090
are doing so javascript Office case your

407
00:22:26,090 --> 00:22:28,310
office caters use several techniques to

408
00:22:28,310 --> 00:22:30,860
achieve their goal they use variable

409
00:22:30,860 --> 00:22:32,840
name mangling they do character

410
00:22:32,840 --> 00:22:35,990
substitutes function expressions like

411
00:22:35,990 --> 00:22:39,800
arrow functions lambdas if he's most

412
00:22:39,800 --> 00:22:43,450
often they literally go back to evals

413
00:22:43,450 --> 00:22:46,070
words of notice that gladly

414
00:22:46,070 --> 00:22:49,150
since javascript is not really a

415
00:22:49,150 --> 00:22:51,440
class-based language we don't have to

416
00:22:51,440 --> 00:22:52,790
deal with reflections because that would

417
00:22:52,790 --> 00:22:56,350
add enormous complexity to it

418
00:22:59,100 --> 00:23:01,809
now the first part is the office gating

419
00:23:01,809 --> 00:23:04,240
now there is a bunch of the obfuscators

420
00:23:04,240 --> 00:23:06,850
out there like dozens literally that's

421
00:23:06,850 --> 00:23:09,700
pretty much do their work and we don't

422
00:23:09,700 --> 00:23:13,559
really want a kind of rim and the wheel

423
00:23:13,559 --> 00:23:17,680
but we want to look at a kind of a

424
00:23:17,680 --> 00:23:20,860
different case that does reinventing the

425
00:23:20,860 --> 00:23:30,280
wheel up in a very different manner we

426
00:23:30,280 --> 00:23:33,190
want to make sure that the JavaScript

427
00:23:33,190 --> 00:23:36,640
code is impossible so make it impossible

428
00:23:36,640 --> 00:23:38,500
for the JavaScript code to realize it is

429
00:23:38,500 --> 00:23:41,590
being debugged we want to have the

430
00:23:41,590 --> 00:23:44,230
malware run it's in normal native

431
00:23:44,230 --> 00:23:46,450
natural environment the browser itself

432
00:23:46,450 --> 00:23:49,630
and if possible stop at the exploit and

433
00:23:49,630 --> 00:23:54,670
with the least amount of interaction so

434
00:23:54,670 --> 00:23:58,500
we've seen a number of cases when people

435
00:23:58,500 --> 00:24:02,950
were trying to tell us that use whatever

436
00:24:02,950 --> 00:24:06,370
tools available to rip out the code from

437
00:24:06,370 --> 00:24:08,920
the HTML page and drop it into an

438
00:24:08,920 --> 00:24:11,260
external engine that's very often fails

439
00:24:11,260 --> 00:24:13,590
so you know breaking out the of the jail

440
00:24:13,590 --> 00:24:17,020
has failed way too many times for me so

441
00:24:17,020 --> 00:24:18,790
I thought why not try to break into it

442
00:24:18,790 --> 00:24:22,000
now a lot of people shy away from from

443
00:24:22,000 --> 00:24:23,380
windy bug because you know it doesn't

444
00:24:23,380 --> 00:24:25,960
have a very nice user interface like

445
00:24:25,960 --> 00:24:29,590
much of the immunity debugger or all the

446
00:24:29,590 --> 00:24:33,910
debug has but it comes at the advantage

447
00:24:33,910 --> 00:24:37,630
of when debug that it's awesomely easy

448
00:24:37,630 --> 00:24:40,179
to to script it especially if you're

449
00:24:40,179 --> 00:24:43,270
using the Python extensions for it's a

450
00:24:43,270 --> 00:24:48,580
pike ad we are releasing the code after

451
00:24:48,580 --> 00:24:51,040
the conference but my point is not

452
00:24:51,040 --> 00:24:53,530
really so much in releasing the tool but

453
00:24:53,530 --> 00:24:55,330
rather releasing the methodology so

454
00:24:55,330 --> 00:24:59,559
we're releasing a tutorial on how to go

455
00:24:59,559 --> 00:25:01,870
about this and how to figure it out on

456
00:25:01,870 --> 00:25:05,800
yourself word of note that browser

457
00:25:05,800 --> 00:25:07,570
implementation is different differ

458
00:25:07,570 --> 00:25:10,050
significantly

459
00:25:11,320 --> 00:25:15,660
I ate versus I 10 versus I 11 versus

460
00:25:15,660 --> 00:25:18,550
edge versus chrome they all have very

461
00:25:18,550 --> 00:25:20,320
different implementations of the of the

462
00:25:20,320 --> 00:25:22,050
JavaScript engine literally each of them

463
00:25:22,050 --> 00:25:26,290
so for our tools to to work you actually

464
00:25:26,290 --> 00:25:28,960
have to figure out for each of them how

465
00:25:28,960 --> 00:25:34,270
you can do the debugging so the current

466
00:25:34,270 --> 00:25:38,050
tool that we were releasing is set for I

467
00:25:38,050 --> 00:25:43,510
11 and I ate its be obfuscating the evil

468
00:25:43,510 --> 00:25:46,750
based code and it's logging each session

469
00:25:46,750 --> 00:25:48,790
to a separate file and as much as

470
00:25:48,790 --> 00:25:50,860
possible it's automating the entire

471
00:25:50,860 --> 00:25:52,540
process there not much not sure how many

472
00:25:52,540 --> 00:25:55,300
of you have tried to debug browsers from

473
00:25:55,300 --> 00:25:58,450
from in debug one of the challenges is

474
00:25:58,450 --> 00:26:01,630
to attach it a browser to the debugger I

475
00:26:01,630 --> 00:26:03,040
mean attach the debugger to the browser

476
00:26:03,040 --> 00:26:07,930
I'm sorry typically browser processes

477
00:26:07,930 --> 00:26:10,120
have a lot of separate threads separate

478
00:26:10,120 --> 00:26:11,740
processes and you have to figure out

479
00:26:11,740 --> 00:26:13,660
which one to attach to if you want to

480
00:26:13,660 --> 00:26:17,170
attach open the windy bug session and

481
00:26:17,170 --> 00:26:19,030
try to run the browser out of it it will

482
00:26:19,030 --> 00:26:21,730
just not work the way you intended to so

483
00:26:21,730 --> 00:26:23,590
first you have to spawn the browser and

484
00:26:23,590 --> 00:26:28,050
then figure out the process that is

485
00:26:28,050 --> 00:26:30,220
related to the specific tab if you want

486
00:26:30,220 --> 00:26:32,040
to debug and then attach to that process

487
00:26:32,040 --> 00:26:34,930
so we are automating that using some bit

488
00:26:34,930 --> 00:26:39,490
of PowerShell scripting and the big

489
00:26:39,490 --> 00:26:41,380
challenge is trying to find the right

490
00:26:41,380 --> 00:26:44,560
function to to look into so locally all

491
00:26:44,560 --> 00:26:46,290
the browser's all the major browsers

492
00:26:46,290 --> 00:26:50,830
make their symbolic debugging

493
00:26:50,830 --> 00:26:52,990
information available so that is valid

494
00:26:52,990 --> 00:26:55,060
for all the different IE versions and

495
00:26:55,060 --> 00:26:58,750
also for chrome just a word of caution

496
00:26:58,750 --> 00:27:01,870
if you're trying to do chrome debugging

497
00:27:01,870 --> 00:27:04,060
the debug symbols for chrome for each

498
00:27:04,060 --> 00:27:08,910
version or like around 1.2 gigabytes so

499
00:27:08,910 --> 00:27:12,430
when debug has the nasty tendency to

500
00:27:12,430 --> 00:27:13,780
actually load all those debug

501
00:27:13,780 --> 00:27:15,130
information into memory so if you're

502
00:27:15,130 --> 00:27:17,710
running this int from a virtual machine

503
00:27:17,710 --> 00:27:19,450
you better allocate a lot of memory for

504
00:27:19,450 --> 00:27:21,640
the VM otherwise it's going to gonna

505
00:27:21,640 --> 00:27:24,100
crash the VM

506
00:27:24,100 --> 00:27:25,780
well not the VM but basically crash the

507
00:27:25,780 --> 00:27:29,380
debug session so the point is to try to

508
00:27:29,380 --> 00:27:33,060
find the right function and we're

509
00:27:33,060 --> 00:27:35,920
typically looking at evaluations so

510
00:27:35,920 --> 00:27:39,220
evaluations will be resolved by looking

511
00:27:39,220 --> 00:27:43,180
at the symbolic expressions the symbolic

512
00:27:43,180 --> 00:27:46,510
function names and I'm not going to go

513
00:27:46,510 --> 00:27:48,280
all the way through how it works because

514
00:27:48,280 --> 00:27:50,490
we're releasing the tutorial as I said

515
00:27:50,490 --> 00:27:53,530
but the point is that once you figure

516
00:27:53,530 --> 00:27:58,020
out which function implements the

517
00:27:58,020 --> 00:28:00,430
evaluation you will quickly find that

518
00:28:00,430 --> 00:28:03,100
the most logical one doesn't really

519
00:28:03,100 --> 00:28:07,720
receive immediately the string argument

520
00:28:07,720 --> 00:28:11,710
for an eval as an argument so you have

521
00:28:11,710 --> 00:28:14,730
to dig in a typically deeper because

522
00:28:14,730 --> 00:28:18,010
most engines but practically all the

523
00:28:18,010 --> 00:28:20,290
engines I've seen actually do a pre

524
00:28:20,290 --> 00:28:23,500
compilation of the eval statements so if

525
00:28:23,500 --> 00:28:26,080
they have to write it again and again

526
00:28:26,080 --> 00:28:28,060
they don't need to reparse it so

527
00:28:28,060 --> 00:28:29,800
typically there is there will be some

528
00:28:29,800 --> 00:28:32,350
sort of a cache and those cache

529
00:28:32,350 --> 00:28:34,770
functions will play a key role in

530
00:28:34,770 --> 00:28:38,650
getting your tasks done so that those

531
00:28:38,650 --> 00:28:40,660
key functions will receive the argument

532
00:28:40,660 --> 00:28:44,320
that you're after now after you found

533
00:28:44,320 --> 00:28:46,720
the the function entry point and you set

534
00:28:46,720 --> 00:28:49,510
up the breakpoint you you have to

535
00:28:49,510 --> 00:28:53,080
understand how the arguments are being

536
00:28:53,080 --> 00:28:54,480
passed to it and unfortunately for

537
00:28:54,480 --> 00:28:57,040
internet explorer although you have the

538
00:28:57,040 --> 00:28:59,350
debug symbols you don't have the private

539
00:28:59,350 --> 00:29:01,210
symbols only the public symbols so the

540
00:29:01,210 --> 00:29:03,760
function arguments are not so simple to

541
00:29:03,760 --> 00:29:06,340
figure out so while Mona does a

542
00:29:06,340 --> 00:29:08,470
fantastic job and I can only applaud the

543
00:29:08,470 --> 00:29:12,250
the creator for from making Mona and

544
00:29:12,250 --> 00:29:14,950
releasing it I for the life of me

545
00:29:14,950 --> 00:29:16,630
couldn't figure out how to figure out a

546
00:29:16,630 --> 00:29:20,050
way for a memory address that I was able

547
00:29:20,050 --> 00:29:24,250
to find to get a complete chain starting

548
00:29:24,250 --> 00:29:27,970
from either register that I have or a an

549
00:29:27,970 --> 00:29:30,430
element on the stack to put together a

550
00:29:30,430 --> 00:29:32,980
chain of pointers so for that I'm

551
00:29:32,980 --> 00:29:35,020
releasing a tool called chained at PI

552
00:29:35,020 --> 00:29:38,239
that works exactly that

553
00:29:38,239 --> 00:29:43,479
tasks starting from either a register

554
00:29:43,479 --> 00:29:46,879
like ESP there but it could be the ECX

555
00:29:46,879 --> 00:29:48,950
register typically it's it's either one

556
00:29:48,950 --> 00:29:50,479
of those so either you're starting from

557
00:29:50,479 --> 00:29:52,100
the stackers or starting from the disk

558
00:29:52,100 --> 00:29:52,700
pointer

559
00:29:52,700 --> 00:29:55,970
I think XCX is typically pointing to and

560
00:29:55,970 --> 00:29:58,519
you specify the number of D words you

561
00:29:58,519 --> 00:30:01,129
wanna you know scan the range of D words

562
00:30:01,129 --> 00:30:04,369
and the minus L is the reference count

563
00:30:04,369 --> 00:30:09,619
so how deep you want to check for for a

564
00:30:09,619 --> 00:30:10,940
pointer that are actually pointing to

565
00:30:10,940 --> 00:30:12,739
the to a target address specified in the

566
00:30:12,739 --> 00:30:15,799
- - the argument now what's a one you

567
00:30:15,799 --> 00:30:18,739
figure that out you may find multiple

568
00:30:18,739 --> 00:30:20,749
addresses just coincidentally point to

569
00:30:20,749 --> 00:30:23,299
the same point so it will take a bit of

570
00:30:23,299 --> 00:30:24,830
trial and error to figure out definitely

571
00:30:24,830 --> 00:30:26,840
the one and for this reason we're going

572
00:30:26,840 --> 00:30:28,489
to do a bit of stress testing to figure

573
00:30:28,489 --> 00:30:30,440
out that if we found the the proper

574
00:30:30,440 --> 00:30:36,349
chain of pointers okay

575
00:30:36,349 --> 00:30:39,409
so once we figure that out we need to

576
00:30:39,409 --> 00:30:42,019
automate things so we come up with a pin

577
00:30:42,019 --> 00:30:43,729
debug script file between debug script

578
00:30:43,729 --> 00:30:46,820
is going to help us deal with a lot of

579
00:30:46,820 --> 00:30:48,830
manual T that would otherwise be needed

580
00:30:48,830 --> 00:30:50,869
so set up a unique log file would be

581
00:30:50,869 --> 00:30:52,460
nice to have each session log to a

582
00:30:52,460 --> 00:30:56,419
separate file right there might be a lot

583
00:30:56,419 --> 00:30:58,179
of exceptions that occur naturally

584
00:30:58,179 --> 00:31:00,169
within the application I didn't do you

585
00:31:00,169 --> 00:31:02,269
don't want a break on those so you wanna

586
00:31:02,269 --> 00:31:04,820
you might want to ignore certain

587
00:31:04,820 --> 00:31:05,869
exceptions

588
00:31:05,869 --> 00:31:09,619
while catch other ones and I have to be

589
00:31:09,619 --> 00:31:13,700
honest this is where windy bug is

590
00:31:13,700 --> 00:31:16,820
showing its worst in terms of user

591
00:31:16,820 --> 00:31:19,070
friendliness so trying to put out the

592
00:31:19,070 --> 00:31:22,070
the four-h as something taking me

593
00:31:22,070 --> 00:31:25,220
literally hours now

594
00:31:25,220 --> 00:31:28,330
I'm going to try to do a demo here

595
00:31:28,330 --> 00:31:31,539
hopefully it will work

596
00:31:39,010 --> 00:31:42,070
okay so

597
00:31:45,770 --> 00:31:50,629
you see how can i zoom the text

598
00:31:57,220 --> 00:32:00,190
so it is as simple as this you open a

599
00:32:00,190 --> 00:32:03,310
lock file you make sure that you don't

600
00:32:03,310 --> 00:32:06,100
in catch all those unneeded exceptions

601
00:32:06,100 --> 00:32:10,200
you want to make sure that whenever and

602
00:32:10,200 --> 00:32:12,600
ultimately your goal is to catch

603
00:32:12,600 --> 00:32:15,040
exploits so when the browser is actually

604
00:32:15,040 --> 00:32:18,610
crashing you want to make sure that when

605
00:32:18,610 --> 00:32:20,140
when the application is crashing you

606
00:32:20,140 --> 00:32:21,820
close the log file you set up a

607
00:32:21,820 --> 00:32:25,290
breakpoint and you start a thing so

608
00:32:25,290 --> 00:32:28,210
starting with the most simple example a

609
00:32:28,210 --> 00:32:31,750
little bit is you only have a simple

610
00:32:31,750 --> 00:32:33,310
eval now the reason why I'm using string

611
00:32:33,310 --> 00:32:35,020
concatenation there is you don't want to

612
00:32:35,020 --> 00:32:37,930
confuse the source code with the

613
00:32:37,930 --> 00:32:42,400
argument so hunting for the egg like my

614
00:32:42,400 --> 00:32:45,190
egg equal one will not part be part of

615
00:32:45,190 --> 00:32:49,120
the source code so the next case is a

616
00:32:49,120 --> 00:32:52,810
bit more demanding one is just going to

617
00:32:52,810 --> 00:32:56,680
do a bit of a iteration with a bit of

618
00:32:56,680 --> 00:33:00,960
complexity and do one hundred evals and

619
00:33:00,960 --> 00:33:03,940
ultimately we're going to get as far as

620
00:33:03,940 --> 00:33:05,230
try to stress that state with the

621
00:33:05,230 --> 00:33:07,090
ultimate evil bomb so this is a

622
00:33:07,090 --> 00:33:09,820
recursive evaluation which will end up

623
00:33:09,820 --> 00:33:12,280
trashing the browser typically depending

624
00:33:12,280 --> 00:33:14,890
on the on the browser implementation

625
00:33:14,890 --> 00:33:16,570
sometimes it just ends up in a stack

626
00:33:16,570 --> 00:33:22,840
overflow and to come to the point of

627
00:33:22,840 --> 00:33:24,940
this whole exercise is we're trying to

628
00:33:24,940 --> 00:33:28,090
look at how the actual the obfuscation

629
00:33:28,090 --> 00:33:32,470
is happening so that said let's see how

630
00:33:32,470 --> 00:33:38,470
we can try to use this so it's as simple

631
00:33:38,470 --> 00:33:43,480
as starting up the browser opening up a

632
00:33:43,480 --> 00:33:51,300
tab and then opening up the logging

633
00:33:51,300 --> 00:33:54,880
powershell thing which starts n TSD so

634
00:33:54,880 --> 00:33:57,190
this is something I didn't mention windy

635
00:33:57,190 --> 00:33:57,580
ugh

636
00:33:57,580 --> 00:34:01,210
a has a GUI NTS D is the command line

637
00:34:01,210 --> 00:34:03,550
current counterpart of it the very same

638
00:34:03,550 --> 00:34:07,180
thing is just command like so for for

639
00:34:07,180 --> 00:34:09,020
those of you out there who work

640
00:34:09,020 --> 00:34:12,139
wondering whether you can do nasty

641
00:34:12,139 --> 00:34:14,630
things with debuggers as attackers yes

642
00:34:14,630 --> 00:34:16,760
you can you might want to watch out for

643
00:34:16,760 --> 00:34:20,840
a free NTS the executables lurking in

644
00:34:20,840 --> 00:34:22,340
your environment because they they can

645
00:34:22,340 --> 00:34:27,139
be mean as well so once it's set up you

646
00:34:27,139 --> 00:34:30,050
just you know try to navigate and the

647
00:34:30,050 --> 00:34:32,149
logging is already starting to happening

648
00:34:32,149 --> 00:34:35,929
in the in the other so here you're

649
00:34:35,929 --> 00:34:38,418
seeing the little simple evaluations now

650
00:34:38,418 --> 00:34:40,310
we're going for for the longer

651
00:34:40,310 --> 00:34:46,449
evaluation with a hundred iterations or

652
00:34:46,449 --> 00:34:51,860
we're going to do the obfuscated thing

653
00:34:51,860 --> 00:34:55,790
so it's already logging the d office

654
00:34:55,790 --> 00:34:57,200
kated string at the bottom of the screen

655
00:34:57,200 --> 00:34:58,790
I'm going to show you later on how you

656
00:34:58,790 --> 00:35:01,880
can read it easier and finally I'm going

657
00:35:01,880 --> 00:35:05,140
to show you the eval Bom

658
00:35:12,300 --> 00:35:14,970
yeah I put it in the indie in the

659
00:35:14,970 --> 00:35:15,960
background while it was running

660
00:35:15,960 --> 00:35:18,510
so you know literally thousands and

661
00:35:18,510 --> 00:35:22,410
thousands of it happening so once we'll

662
00:35:22,410 --> 00:35:24,810
look at the logs that are produced for

663
00:35:24,810 --> 00:35:28,619
each of them will see something like

664
00:35:28,619 --> 00:35:31,040
this so here are all those things that

665
00:35:31,040 --> 00:35:36,800
happened during the evaluations if we go

666
00:35:36,800 --> 00:35:43,760
down a bit probably should have done

667
00:35:43,760 --> 00:35:47,490
such a long cycle here you will see the

668
00:35:47,490 --> 00:35:49,890
simple D obfuscation that that has

669
00:35:49,890 --> 00:35:54,900
happened so this is already the office

670
00:35:54,900 --> 00:36:01,110
gated string and ok so let's move on to

671
00:36:01,110 --> 00:36:03,660
a real thing so I'm going to look at an

672
00:36:03,660 --> 00:36:07,520
actual exploit

673
00:36:14,819 --> 00:36:19,769
so this is using a an exploit on a user

674
00:36:19,769 --> 00:36:21,630
after three putting together a rope

675
00:36:21,630 --> 00:36:25,829
chain and doing a DAP evasion and this

676
00:36:25,829 --> 00:36:27,329
is the actual source code for it now I

677
00:36:27,329 --> 00:36:29,239
spent quite a bit of time to try to

678
00:36:29,239 --> 00:36:32,069
obfuscate it very heavily so I ended up

679
00:36:32,069 --> 00:36:33,869
with something like this this is a

680
00:36:33,869 --> 00:36:37,919
multi-stage obfuscation using a

681
00:36:37,919 --> 00:36:42,269
different number of techniques so this

682
00:36:42,269 --> 00:36:45,419
is completely unreadable 44 the human

683
00:36:45,419 --> 00:36:47,969
eye obviously so let's see what happens

684
00:36:47,969 --> 00:36:59,660
if you try to do this again I'm going to

685
00:37:03,619 --> 00:37:12,229
just start a browser start I log

686
00:37:30,570 --> 00:37:34,740
and that's what happens okay so two

687
00:37:34,740 --> 00:37:36,240
things you should you should notice

688
00:37:36,240 --> 00:37:39,780
let's just open up the log in a more

689
00:37:39,780 --> 00:37:51,480
readable format I can't even turn on the

690
00:37:51,480 --> 00:37:55,830
highlighting so this is already back to

691
00:37:55,830 --> 00:37:57,870
the D obfuscated string although it's

692
00:37:57,870 --> 00:37:59,970
not pretty printed but I will let leave

693
00:37:59,970 --> 00:38:01,500
this up to you to do the pre D printing

694
00:38:01,500 --> 00:38:05,400
and the more interesting thing is that

695
00:38:05,400 --> 00:38:09,330
we are all actually getting a crash here

696
00:38:09,330 --> 00:38:12,330
which is as being caught so right now we

697
00:38:12,330 --> 00:38:15,050
are in the debugger in a live session

698
00:38:15,050 --> 00:38:18,030
where as you're trying to move through

699
00:38:18,030 --> 00:38:21,000
you can see that you are right before

700
00:38:21,000 --> 00:38:24,900
the exploit happening and in a few

701
00:38:24,900 --> 00:38:28,980
moments we're going to do the virtual

702
00:38:28,980 --> 00:38:35,880
protect push ESP and this is when it's

703
00:38:35,880 --> 00:38:40,020
jumping to the heap already and probably

704
00:38:40,020 --> 00:38:41,760
you can recognize this already this I

705
00:38:41,760 --> 00:38:44,970
thought dpi wait F SDF this is already

706
00:38:44,970 --> 00:38:48,270
part of the Metasploit code so you got

707
00:38:48,270 --> 00:38:51,480
ad office gated code and you're you've

708
00:38:51,480 --> 00:38:54,960
been offered the the malware on it on a

709
00:38:54,960 --> 00:38:56,790
tray because it stops right before

710
00:38:56,790 --> 00:38:59,010
executing and actually you can directly

711
00:38:59,010 --> 00:39:00,210
look at the source code so you don't

712
00:39:00,210 --> 00:39:02,250
even have to replay the whole thing

713
00:39:02,250 --> 00:39:04,710
because you have the open debug session

714
00:39:04,710 --> 00:39:07,400
at your fingertips

715
00:39:22,080 --> 00:39:27,660
okay so for future plans we want to add

716
00:39:27,660 --> 00:39:29,190
a bit more documentation to the

717
00:39:29,190 --> 00:39:31,170
different browsers so as I said this has

718
00:39:31,170 --> 00:39:32,850
to be maintained for four very different

719
00:39:32,850 --> 00:39:34,710
browsers because the codebase is very

720
00:39:34,710 --> 00:39:36,420
different the function names are

721
00:39:36,420 --> 00:39:38,820
different for obvious reasons and even

722
00:39:38,820 --> 00:39:41,910
the the module names are different so in

723
00:39:41,910 --> 00:39:46,710
I ate the JavaScript is hosted in a

724
00:39:46,710 --> 00:39:51,690
jscript da da ll on the IE 9 plus it's

725
00:39:51,690 --> 00:39:54,270
called jscript 9 as from edge it's

726
00:39:54,270 --> 00:39:57,480
called chakra in obviously you all know

727
00:39:57,480 --> 00:40:00,300
that in chrome it's it's called v8 the

728
00:40:00,300 --> 00:40:02,580
engine it's actually in a process called

729
00:40:02,580 --> 00:40:05,040
in a dll called chrome child so I'm

730
00:40:05,040 --> 00:40:07,040
providing all these debug symbols for

731
00:40:07,040 --> 00:40:09,690
for you to lay the reference to figure

732
00:40:09,690 --> 00:40:11,940
out the different details for your own

733
00:40:11,940 --> 00:40:15,150
needs now for caching Metasploit

734
00:40:15,150 --> 00:40:16,710
shellcode this is something that we

735
00:40:16,710 --> 00:40:20,640
wanted to to try to see if we can catch

736
00:40:20,640 --> 00:40:23,370
them very easily the most predominant

737
00:40:23,370 --> 00:40:26,070
cases that we see in Metasploit code are

738
00:40:26,070 --> 00:40:29,790
not so much the the shell codes as much

739
00:40:29,790 --> 00:40:33,480
as the sheikah tagging I encoder so

740
00:40:33,480 --> 00:40:35,820
that's the probability the most

741
00:40:35,820 --> 00:40:38,010
successful one evading most eighty

742
00:40:38,010 --> 00:40:40,500
engines that this might be an

743
00:40:40,500 --> 00:40:41,400
explanation for that

744
00:40:41,400 --> 00:40:43,470
so she katakana has a very strong

745
00:40:43,470 --> 00:40:46,890
signature so once you set up a break

746
00:40:46,890 --> 00:40:50,960
point for the virtual logs and the and

747
00:40:50,960 --> 00:40:54,240
the virtual protect calls then you can

748
00:40:54,240 --> 00:40:57,330
actually sniff at the pointers to the

749
00:40:57,330 --> 00:41:01,170
memory page now the one last thing with

750
00:41:01,170 --> 00:41:02,820
the setting up calls for virtual protect

751
00:41:02,820 --> 00:41:05,670
and virtual a lock is something that I

752
00:41:05,670 --> 00:41:08,340
need to mention it has to be done very

753
00:41:08,340 --> 00:41:10,500
carefully because the browser's

754
00:41:10,500 --> 00:41:13,170
naturally do some allocations for

755
00:41:13,170 --> 00:41:15,930
obvious reasons so I'm also giving out

756
00:41:15,930 --> 00:41:18,390
some some instructions on how to filter

757
00:41:18,390 --> 00:41:20,880
out the legitimate cause versus the non

758
00:41:20,880 --> 00:41:22,860
legitimate ones it's not really rocket

759
00:41:22,860 --> 00:41:23,520
science

760
00:41:23,520 --> 00:41:25,500
so that being said the source codes are

761
00:41:25,500 --> 00:41:28,410
available at those github sites and here

762
00:41:28,410 --> 00:41:30,840
are the contacts for for both Java and

763
00:41:30,840 --> 00:41:35,550
myself so with that I guess we're

764
00:41:35,550 --> 00:41:36,030
opening up

765
00:41:36,030 --> 00:41:39,800
for questions yes

766
00:41:45,120 --> 00:41:47,900
if any

767
00:41:52,290 --> 00:41:54,810
all right so then thank you very much

768
00:41:54,810 --> 00:41:56,700
for for your patience and attention

769
00:41:56,700 --> 00:41:58,890
knowing that it's Saturday afternoon

770
00:41:58,890 --> 00:42:01,620
it's a it's a welcome thank you thank

771
00:42:01,620 --> 00:42:04,220
you thank you

