1
00:00:00,000 --> 00:00:04,710
okay let's start my name is my name is

2
00:00:04,710 --> 00:00:06,509
Manish Kish and today I tried to tell

3
00:00:06,509 --> 00:00:08,940
some words about the research that was

4
00:00:08,940 --> 00:00:14,099
made something about me I'm working as a

5
00:00:14,099 --> 00:00:16,230
security auditor at digital security

6
00:00:16,230 --> 00:00:19,609
company do some random security staff

7
00:00:19,609 --> 00:00:23,359
and so on so on so on and blah blah blah

8
00:00:23,359 --> 00:00:28,050
okay passwords one of the cornerstones

9
00:00:28,050 --> 00:00:30,769
of security they are just everywhere

10
00:00:30,769 --> 00:00:36,000
laptops banking accounts Wi-Fi even

11
00:00:36,000 --> 00:00:38,040
coffin maker may require password for

12
00:00:38,040 --> 00:00:42,780
its working every maybe months there are

13
00:00:42,780 --> 00:00:45,870
some news that some may be popular site

14
00:00:45,870 --> 00:00:49,500
are hacked and its database with users

15
00:00:49,500 --> 00:00:51,480
and password assault all over the

16
00:00:51,480 --> 00:00:55,379
internet and it always were very popular

17
00:00:55,379 --> 00:00:58,920
news so when during pen test get access

18
00:00:58,920 --> 00:01:02,309
to some passwords or user accounts it's

19
00:01:02,309 --> 00:01:08,549
all with the good sign how how they can

20
00:01:08,549 --> 00:01:11,280
be stored first of all clear text so you

21
00:01:11,280 --> 00:01:14,010
somehow get access to the database using

22
00:01:14,010 --> 00:01:17,780
SQL injection for example and that's all

23
00:01:17,780 --> 00:01:20,460
so you can use this data right

24
00:01:20,460 --> 00:01:23,580
immediately to access other servers and

25
00:01:23,580 --> 00:01:27,030
services they may be encrypted so before

26
00:01:27,030 --> 00:01:29,579
previous part you must find the key but

27
00:01:29,579 --> 00:01:33,450
in most cases all the encryption is just

28
00:01:33,450 --> 00:01:38,130
base64 and in most cases instead of

29
00:01:38,130 --> 00:01:42,048
passwords in clear text you got hashes

30
00:01:42,350 --> 00:01:45,689
so there are some features about hash

31
00:01:45,689 --> 00:01:47,790
functions first of all avalanche effect

32
00:01:47,790 --> 00:01:51,299
that if we slightly change data the

33
00:01:51,299 --> 00:01:53,299
output will change significantly and

34
00:01:53,299 --> 00:01:56,820
it's one-way functions so they can

35
00:01:56,820 --> 00:01:59,329
easily compute output from the input

36
00:01:59,329 --> 00:02:04,740
input too okay and but to get input from

37
00:02:04,740 --> 00:02:10,199
the output is nearly impossible so

38
00:02:10,199 --> 00:02:12,959
during pen test you somehow get access

39
00:02:12,959 --> 00:02:13,470
to

40
00:02:13,470 --> 00:02:16,890
credentials you think Armin and bills or

41
00:02:16,890 --> 00:02:20,430
what I was putting or get access to the

42
00:02:20,430 --> 00:02:24,540
server and got a shadow file so we got

43
00:02:24,540 --> 00:02:27,420
passwords not in clear text but in her

44
00:02:27,420 --> 00:02:29,340
shoes so you need them in clear text

45
00:02:29,340 --> 00:02:32,430
before the using on this slide you can

46
00:02:32,430 --> 00:02:35,910
see the most common hair types then can

47
00:02:35,910 --> 00:02:37,980
be measuring pen test it's different

48
00:02:37,980 --> 00:02:41,580
Creed functions for unix systems and

49
00:02:41,580 --> 00:02:44,400
tell em net and tell em even keep our

50
00:02:44,400 --> 00:02:48,320
databases can be found on file servers

51
00:02:48,320 --> 00:02:51,660
where IT administrators led them for the

52
00:02:51,660 --> 00:02:56,459
cup there are some methods that can be

53
00:02:56,459 --> 00:02:58,740
used to recover passwords I try slightly

54
00:02:58,740 --> 00:03:00,810
to describe all of them with their pros

55
00:03:00,810 --> 00:03:06,720
and cons in my own opinion first of all

56
00:03:06,720 --> 00:03:08,910
rainbow tables I used to recover

57
00:03:08,910 --> 00:03:10,709
passwords for certain lengths and

58
00:03:10,709 --> 00:03:14,250
certain charset they take less process

59
00:03:14,250 --> 00:03:16,830
of times and brute force and less disk

60
00:03:16,830 --> 00:03:20,760
space and table code but still no cell

61
00:03:20,760 --> 00:03:25,140
support and the most modern hash

62
00:03:25,140 --> 00:03:27,360
algorithms add random string for

63
00:03:27,360 --> 00:03:30,060
password before it's hashing and they

64
00:03:30,060 --> 00:03:34,010
also take pretty much time and space and

65
00:03:34,010 --> 00:03:38,370
one of the main drawback that the

66
00:03:38,370 --> 00:03:41,370
rainbow table that is coco 84 and tell

67
00:03:41,370 --> 00:03:48,450
em can be used for cracking md5 and

68
00:03:48,450 --> 00:03:49,890
other mats brute force the idea is

69
00:03:49,890 --> 00:03:52,380
rather simple i think so we take a word

70
00:03:52,380 --> 00:03:56,760
koko eh roommate compared with our input

71
00:03:56,760 --> 00:04:00,239
and if if if they are the same we got

72
00:04:00,239 --> 00:04:02,040
the goal if not we can secretly change

73
00:04:02,040 --> 00:04:05,720
one letter and do it again again again

74
00:04:05,720 --> 00:04:08,730
there are a lot of types and methods to

75
00:04:08,730 --> 00:04:11,430
do such things and one of the main

76
00:04:11,430 --> 00:04:14,090
benefits that it can be done on cpu GPU

77
00:04:14,090 --> 00:04:17,459
even using cloud computing for example

78
00:04:17,459 --> 00:04:21,570
amazon cloud and other main benefits

79
00:04:21,570 --> 00:04:24,840
that with using such methods the puzzles

80
00:04:24,840 --> 00:04:26,389
will be always find

81
00:04:26,389 --> 00:04:32,419
but the question is when so if you try

82
00:04:32,419 --> 00:04:34,490
to crack and tell em cash for passwords

83
00:04:34,490 --> 00:04:38,620
that are nearly 12 charge lengths and

84
00:04:38,620 --> 00:04:41,509
this can reduce can really take a lot of

85
00:04:41,509 --> 00:04:47,120
time using brute force another method

86
00:04:47,120 --> 00:04:51,889
popular matter is what list they may

87
00:04:51,889 --> 00:04:54,279
benefit is that they are small and have

88
00:04:54,279 --> 00:04:58,009
good efficiency so on this slide you can

89
00:04:58,009 --> 00:05:02,300
see in the graph with the result of

90
00:05:02,300 --> 00:05:04,639
cracking some hash lists with worthless

91
00:05:04,639 --> 00:05:07,960
attack and brute force as you can see

92
00:05:07,960 --> 00:05:10,550
the wordless attacks allows us to

93
00:05:10,550 --> 00:05:13,479
recover three or even five times more

94
00:05:13,479 --> 00:05:16,610
passwords for the same time than the

95
00:05:16,610 --> 00:05:20,539
brute force but the main drawback that

96
00:05:20,539 --> 00:05:23,360
if password are not in the dictionary it

97
00:05:23,360 --> 00:05:26,509
will not be recovered so yes there are

98
00:05:26,509 --> 00:05:29,839
some messes to mooch eight work but this

99
00:05:29,839 --> 00:05:35,000
is a common case so okay this was common

100
00:05:35,000 --> 00:05:37,520
masses and after that I try to do some

101
00:05:37,520 --> 00:05:41,000
tests I pick up hardware that I have

102
00:05:41,000 --> 00:05:47,560
it's typical laptop GPU card nvidia 610

103
00:05:47,560 --> 00:05:52,189
more powerful one that can be used for

104
00:05:52,189 --> 00:05:55,159
cryptocurrency mining and can run most

105
00:05:55,159 --> 00:05:57,949
modern games on high settings and two

106
00:05:57,949 --> 00:06:02,180
cpus also laptop one and more powerful

107
00:06:02,180 --> 00:06:08,330
desktop version on this slide you can

108
00:06:08,330 --> 00:06:11,360
see the speed results for brute force

109
00:06:11,360 --> 00:06:13,759
for cracking passwords that password

110
00:06:13,759 --> 00:06:17,000
that seeks charles lengths and contains

111
00:06:17,000 --> 00:06:19,580
only lower case and numbers if you can

112
00:06:19,580 --> 00:06:24,349
see only for md5 and entire LM on the

113
00:06:24,349 --> 00:06:27,439
md5 and then ntlm requires acceptable

114
00:06:27,439 --> 00:06:32,330
time for cracking but such options will

115
00:06:32,330 --> 00:06:36,019
not be met in the real life and even if

116
00:06:36,019 --> 00:06:41,589
it touch options as algorithms like

117
00:06:41,589 --> 00:06:46,369
others that have some strengths to brute

118
00:06:46,369 --> 00:06:48,379
force attacks requires a lot of time

119
00:06:48,379 --> 00:06:54,739
even using GPU and as a simple test is

120
00:06:54,739 --> 00:06:56,739
dictionary attack on a dictionary attack

121
00:06:56,739 --> 00:07:00,529
not least for this I took a rock you

122
00:07:00,529 --> 00:07:02,689
dictionary that contains about 14

123
00:07:02,689 --> 00:07:04,549
millions of password and try to do some

124
00:07:04,549 --> 00:07:07,749
tests as you can see all seems fine but

125
00:07:07,749 --> 00:07:12,019
this is right only for one hash and if

126
00:07:12,019 --> 00:07:15,919
you got if you got a bunch of them even

127
00:07:15,919 --> 00:07:19,939
powerful GPU require will require a lot

128
00:07:19,939 --> 00:07:23,449
of time for cracking and I should say

129
00:07:23,449 --> 00:07:25,999
that rocky dictionary is really good but

130
00:07:25,999 --> 00:07:32,329
not the best one so let's make some

131
00:07:32,329 --> 00:07:36,049
problems first of all during the pen

132
00:07:36,049 --> 00:07:38,839
test I for example I somehow get

133
00:07:38,839 --> 00:07:41,479
credentials and I'd like to correct them

134
00:07:41,479 --> 00:07:45,110
right now and to use the clear text

135
00:07:45,110 --> 00:07:47,449
passwords to get access to other servers

136
00:07:47,449 --> 00:07:51,019
and data and if I can do so I send them

137
00:07:51,019 --> 00:07:53,599
to powerful right station on route 4 pc

138
00:07:53,599 --> 00:07:57,909
so the time is real critical for me and

139
00:07:57,909 --> 00:08:03,409
I should pick up some methods that have

140
00:08:03,409 --> 00:08:07,009
much efficiency so and what about the

141
00:08:07,009 --> 00:08:10,189
hedges I got they all contain cells so I

142
00:08:10,189 --> 00:08:13,069
can't correct them with rainbow tables

143
00:08:13,069 --> 00:08:16,219
and also I got solid state drive and

144
00:08:16,219 --> 00:08:19,489
have no disk space for them and they

145
00:08:19,489 --> 00:08:25,689
really hard to recover and rollin this

146
00:08:25,689 --> 00:08:30,079
depends on the speed test the most

147
00:08:30,079 --> 00:08:32,409
optional way is to use the word Lisa tax

148
00:08:32,409 --> 00:08:37,159
but we make we need to pick up the word

149
00:08:37,159 --> 00:08:42,219
list that you might have some features

150
00:08:42,219 --> 00:08:45,680
like it must be small and can be

151
00:08:45,680 --> 00:08:48,050
download easily and stored on the hard

152
00:08:48,050 --> 00:08:50,990
drive is no problems it must be useful

153
00:08:50,990 --> 00:08:53,550
so with Muslim contains some

154
00:08:53,550 --> 00:08:58,230
trash or others and can be used missing

155
00:08:58,230 --> 00:09:01,080
crew based attacks there are really a

156
00:09:01,080 --> 00:09:04,730
lot of what list all over the Internet

157
00:09:04,730 --> 00:09:12,029
so how can we choose the right one first

158
00:09:12,029 --> 00:09:15,450
of all to make this we need some

159
00:09:15,450 --> 00:09:17,670
information about the dictionary what

160
00:09:17,670 --> 00:09:19,350
this information can be first of all

161
00:09:19,350 --> 00:09:23,010
what kinds of words that the dictionary

162
00:09:23,010 --> 00:09:26,279
contain maybe some length distribution

163
00:09:26,279 --> 00:09:31,440
in this passwords names or maybe

164
00:09:31,440 --> 00:09:34,470
keyboard combinations and so on is the

165
00:09:34,470 --> 00:09:36,810
junk dictionary all contains real user

166
00:09:36,810 --> 00:09:40,500
passwords like it was correct database

167
00:09:40,500 --> 00:09:45,779
like Rocio is it was it generated also

168
00:09:45,779 --> 00:09:48,839
size matters and how it can be good for

169
00:09:48,839 --> 00:09:55,140
password cracking there are a bunch of

170
00:09:55,140 --> 00:09:58,500
tools like PayPal or baseball that can

171
00:09:58,500 --> 00:10:01,709
give us some useful statistic about what

172
00:10:01,709 --> 00:10:06,260
list like length distribution top masks

173
00:10:06,260 --> 00:10:09,690
top top D just on the end of each

174
00:10:09,690 --> 00:10:12,690
dictionary and many many others but

175
00:10:12,690 --> 00:10:16,350
still not anything about is the

176
00:10:16,350 --> 00:10:18,720
dictionary good for password cracking or

177
00:10:18,720 --> 00:10:21,510
not maybe some answers some some answers

178
00:10:21,510 --> 00:10:25,230
about is it junk or not but nothing

179
00:10:25,230 --> 00:10:31,250
about it about the crack rate so so

180
00:10:31,250 --> 00:10:34,950
during my walk I tried today try to make

181
00:10:34,950 --> 00:10:38,070
my own statistics partially based on the

182
00:10:38,070 --> 00:10:40,860
information that I can get from pipe all

183
00:10:40,860 --> 00:10:43,680
of baseball but edit some new features

184
00:10:43,680 --> 00:10:48,089
like charset distribution maybe some

185
00:10:48,089 --> 00:10:50,760
samples from the wordless to see if it

186
00:10:50,760 --> 00:10:53,220
really junk or not and finally the

187
00:10:53,220 --> 00:10:57,240
correct rate how it was done so I picked

188
00:10:57,240 --> 00:10:59,940
up some hash lists from different

189
00:10:59,940 --> 00:11:03,899
sources that were about 100 of them take

190
00:11:03,899 --> 00:11:06,209
each dictionary and try to crack each

191
00:11:06,209 --> 00:11:07,170
hash list we

192
00:11:07,170 --> 00:11:09,660
it after that calculate how many

193
00:11:09,660 --> 00:11:12,329
passwords can be restored calculate

194
00:11:12,329 --> 00:11:17,639
average failure and this became some

195
00:11:17,639 --> 00:11:20,300
correct rate it's obvious to say that

196
00:11:20,300 --> 00:11:23,160
bigger dictionaries always got better

197
00:11:23,160 --> 00:11:31,350
results than the smaller ones so what if

198
00:11:31,350 --> 00:11:34,829
we try to pick up some small

199
00:11:34,829 --> 00:11:36,660
dictionaries make some combinations

200
00:11:36,660 --> 00:11:39,209
between them and to get better

201
00:11:39,209 --> 00:11:41,399
dictionary with the benefits of each

202
00:11:41,399 --> 00:11:44,430
other and it also must be a small

203
00:11:44,430 --> 00:11:48,470
dictionary so why can't we do do so

204
00:11:48,470 --> 00:11:52,709
let's make some calculations if we have

205
00:11:52,709 --> 00:11:55,079
for example 10 dictionaries and try to

206
00:11:55,079 --> 00:11:57,389
make each combination which contains

207
00:11:57,389 --> 00:12:00,120
only three of them as I will be no

208
00:12:00,120 --> 00:12:03,839
problem even if you have 50 dictionaries

209
00:12:03,839 --> 00:12:05,370
and try to make the nations with five

210
00:12:05,370 --> 00:12:09,029
them they also we can make it in our but

211
00:12:09,029 --> 00:12:11,610
if we try to increase the number of

212
00:12:11,610 --> 00:12:14,519
dictionaries or the length of the

213
00:12:14,519 --> 00:12:16,949
combinations that time we need for

214
00:12:16,949 --> 00:12:18,990
calculation will be will increase very

215
00:12:18,990 --> 00:12:27,120
very fast hmmm so it's then not an

216
00:12:27,120 --> 00:12:29,300
answer

217
00:12:33,190 --> 00:12:35,410
to solve this problem genetic algorithms

218
00:12:35,410 --> 00:12:39,940
can be used so they are good for search

219
00:12:39,940 --> 00:12:42,820
optimization and to find approximate

220
00:12:42,820 --> 00:12:45,010
solution in next few slides I try to

221
00:12:45,010 --> 00:12:48,700
describe basic concept of them and how

222
00:12:48,700 --> 00:12:51,790
can they be applied to create better or

223
00:12:51,790 --> 00:12:58,330
maybe not what list first of all some

224
00:12:58,330 --> 00:13:02,200
cereal in genetic algorithms we have

225
00:13:02,200 --> 00:13:04,660
population that contains of individual

226
00:13:04,660 --> 00:13:06,910
each individual represented by

227
00:13:06,910 --> 00:13:11,410
chromosome each chromosome contains gems

228
00:13:11,410 --> 00:13:14,050
so here you can see how it looks like on

229
00:13:14,050 --> 00:13:21,130
the paper and hear some basic process of

230
00:13:21,130 --> 00:13:23,500
the genetic algorithm so firstly we

231
00:13:23,500 --> 00:13:25,900
generate population after that evaluate

232
00:13:25,900 --> 00:13:29,710
it and try to see if you got individual

233
00:13:29,710 --> 00:13:33,600
that are best suitable to solve our case

234
00:13:33,600 --> 00:13:38,680
if not firstly we select representatives

235
00:13:38,680 --> 00:13:41,380
to generate new chair to create child

236
00:13:41,380 --> 00:13:44,200
make some crossing after that some

237
00:13:44,200 --> 00:13:47,830
mutation and evaluate the result

238
00:13:47,830 --> 00:13:50,790
children again after that we select

239
00:13:50,790 --> 00:13:54,190
children that are best suitable and

240
00:13:54,190 --> 00:13:56,880
create from them the future population

241
00:13:56,880 --> 00:14:00,640
so let's see how this information can be

242
00:14:00,640 --> 00:14:07,240
applied to dictionaries and so on first

243
00:14:07,240 --> 00:14:11,770
of all jan is a dictionary it's very

244
00:14:11,770 --> 00:14:15,370
important each gem contains some set of

245
00:14:15,370 --> 00:14:19,600
features what they are firstly I picked

246
00:14:19,600 --> 00:14:22,900
up some training set that contains about

247
00:14:22,900 --> 00:14:25,870
87 ashley's from various sources that

248
00:14:25,870 --> 00:14:28,710
can be found all over the internet and

249
00:14:28,710 --> 00:14:31,900
try to correct with each dictionary

250
00:14:31,900 --> 00:14:36,130
again again each hash list and get some

251
00:14:36,130 --> 00:14:38,730
values like the size of the dictionary

252
00:14:38,730 --> 00:14:42,520
how many passwords can't recover a total

253
00:14:42,520 --> 00:14:44,950
recovery rate total record passwords and

254
00:14:44,950 --> 00:14:46,970
the unique passwords

255
00:14:46,970 --> 00:14:49,100
the then counter the unique passwords

256
00:14:49,100 --> 00:14:51,500
that can be required using this

257
00:14:51,500 --> 00:14:57,980
dictionary so here are some sample for

258
00:14:57,980 --> 00:15:02,449
top 500 word lists on this table you can

259
00:15:02,449 --> 00:15:06,860
see how many passwords can be required

260
00:15:06,860 --> 00:15:10,600
in each hash list using this word list

261
00:15:10,600 --> 00:15:13,639
for example for the first one it's five

262
00:15:13,639 --> 00:15:16,279
passwords and rate is one percent for

263
00:15:16,279 --> 00:15:20,449
the last one is 24 and further sense it

264
00:15:20,449 --> 00:15:25,040
sizes about forty four kilobytes every

265
00:15:25,040 --> 00:15:29,480
jerk hour rate is 1.8 and total record

266
00:15:29,480 --> 00:15:35,350
pursuit is 42 and unique password is 24

267
00:15:35,920 --> 00:15:39,829
so what about the chromosome chromosome

268
00:15:39,829 --> 00:15:44,089
contains gains so as we know chromosome

269
00:15:44,089 --> 00:15:46,459
contains as because against is

270
00:15:46,459 --> 00:15:49,579
dictionaries contains dictionaries so

271
00:15:49,579 --> 00:15:51,889
should it be with the fixed number of

272
00:15:51,889 --> 00:15:55,939
what list or not on the first test I

273
00:15:55,939 --> 00:15:58,910
choose fix it lengths of the chromosome

274
00:15:58,910 --> 00:16:02,089
so let's see how it was done and what's

275
00:16:02,089 --> 00:16:06,350
results I got first of all again

276
00:16:06,350 --> 00:16:09,649
chromosome contains genes se can see on

277
00:16:09,649 --> 00:16:11,269
the slide house looked like each

278
00:16:11,269 --> 00:16:13,129
chromosome contains some set of them and

279
00:16:13,129 --> 00:16:16,910
there and be no to similar word list in

280
00:16:16,910 --> 00:16:18,680
one hora Mazzone it's also very

281
00:16:18,680 --> 00:16:22,509
important for example at this gen

282
00:16:22,509 --> 00:16:26,389
contains first dictionary 500 words

283
00:16:26,389 --> 00:16:29,660
password and the last and the end of the

284
00:16:29,660 --> 00:16:32,899
chromosome is 10 so it's packaged turn

285
00:16:32,899 --> 00:16:38,839
dansk after that the population was

286
00:16:38,839 --> 00:16:42,110
generated it contains of some sets of

287
00:16:42,110 --> 00:16:45,699
chromosomes as you can see on the slide

288
00:16:45,699 --> 00:16:49,790
so the population generates randomly so

289
00:16:49,790 --> 00:16:53,959
each new test is not the same as

290
00:16:53,959 --> 00:16:58,970
previous one selection

291
00:16:58,970 --> 00:17:02,670
there are some common patterns for

292
00:17:02,670 --> 00:17:04,709
selection first of all is roll interval

293
00:17:04,709 --> 00:17:07,140
selection where the best feet in davido

294
00:17:07,140 --> 00:17:10,500
hatch has much more chances to create

295
00:17:10,500 --> 00:17:13,470
children than the worst one and the

296
00:17:13,470 --> 00:17:15,900
tournament firstly we select four

297
00:17:15,900 --> 00:17:18,449
representatives from the palacian split

298
00:17:18,449 --> 00:17:21,720
them in the pair of two and after that

299
00:17:21,720 --> 00:17:23,849
select from the pair's representatives

300
00:17:23,849 --> 00:17:28,730
that are best and they create children

301
00:17:28,820 --> 00:17:33,330
now okay for the first test I use Rowley

302
00:17:33,330 --> 00:17:37,800
to your selection crossing there are

303
00:17:37,800 --> 00:17:41,390
also some popular crossing scams like

304
00:17:41,390 --> 00:17:45,150
one point crossover one point crossover

305
00:17:45,150 --> 00:17:47,490
and two point crossover so we select

306
00:17:47,490 --> 00:17:50,510
some border valium after that

307
00:17:50,510 --> 00:17:53,720
chromosomes exchange their against it's

308
00:17:53,720 --> 00:17:56,790
important to say that the children must

309
00:17:56,790 --> 00:17:59,670
have jens from both parents not only one

310
00:17:59,670 --> 00:18:03,690
so they must be a similar to both

311
00:18:03,690 --> 00:18:09,060
parents there also may be a RS GM where

312
00:18:09,060 --> 00:18:12,630
we can randomly exchange few games

313
00:18:12,630 --> 00:18:17,390
between each parents to create children

314
00:18:18,740 --> 00:18:24,300
so mutation each child can you change

315
00:18:24,300 --> 00:18:28,200
with probability of two per cents so how

316
00:18:28,200 --> 00:18:30,390
it looks like firstly we select child

317
00:18:30,390 --> 00:18:34,710
and select randomly select few genes to

318
00:18:34,710 --> 00:18:39,180
replace on this slide is giant 9 and 77

319
00:18:39,180 --> 00:18:43,880
and they are replaced with 78 and to

320
00:18:43,880 --> 00:18:46,440
mutation also based on the chromosome

321
00:18:46,440 --> 00:18:49,700
lengths so for the chromosome lengths

322
00:18:49,700 --> 00:18:56,880
five chance to mutate is 1 and 0 2 and 4

323
00:18:56,880 --> 00:19:04,850
26 Roma somme is 127 fitness function

324
00:19:04,850 --> 00:19:07,160
fitness function are one of the main

325
00:19:07,160 --> 00:19:11,310
part of the genetic algorithms rely on

326
00:19:11,310 --> 00:19:12,330
its value

327
00:19:12,330 --> 00:19:16,649
we decide is our goal achieved or not so

328
00:19:16,649 --> 00:19:18,630
for testing I choose two types of it

329
00:19:18,630 --> 00:19:21,000
refers to the average great rate of the

330
00:19:21,000 --> 00:19:22,919
dictionary and the total recovered

331
00:19:22,919 --> 00:19:28,019
passwords so something about them the

332
00:19:28,019 --> 00:19:30,570
idea of average correct rate is to get

333
00:19:30,570 --> 00:19:33,029
the dictionary that are best suitable

334
00:19:33,029 --> 00:19:37,080
for correcting all test cases and total

335
00:19:37,080 --> 00:19:39,750
passwords is to select individual that

336
00:19:39,750 --> 00:19:46,110
our best to get the most to get more

337
00:19:46,110 --> 00:19:49,080
passwords so house looked like on the

338
00:19:49,080 --> 00:19:52,980
paper on the left side of the table in

339
00:19:52,980 --> 00:19:58,110
the cones you can see the chromosome be

340
00:19:58,110 --> 00:20:02,549
the size of dictionaries and in the Rose

341
00:20:02,549 --> 00:20:05,789
how many each dictionary can crack from

342
00:20:05,789 --> 00:20:09,240
each hash list so we can combine this

343
00:20:09,240 --> 00:20:11,519
value and calculate that turtle

344
00:20:11,519 --> 00:20:13,769
passwords can be recovered with this

345
00:20:13,769 --> 00:20:17,429
chromosome is 81 and the average crack

346
00:20:17,429 --> 00:20:24,019
rate is about eight percent and penalty

347
00:20:24,019 --> 00:20:26,940
because I want to get as better as

348
00:20:26,940 --> 00:20:28,320
smaller dictionary there were some

349
00:20:28,320 --> 00:20:30,330
penalties based on the size of the

350
00:20:30,330 --> 00:20:33,090
dictionary so there were some borrow

351
00:20:33,090 --> 00:20:35,820
area for example 10 megabytes after that

352
00:20:35,820 --> 00:20:38,340
if the chromosome size is more than this

353
00:20:38,340 --> 00:20:41,250
value the penalty is calculated and some

354
00:20:41,250 --> 00:20:44,820
ants obstructed from the boss fitness

355
00:20:44,820 --> 00:20:48,120
failures so the main idea is to make

356
00:20:48,120 --> 00:20:51,059
population to bring me the individual

357
00:20:51,059 --> 00:20:54,740
that must be as small as small as better

358
00:20:54,740 --> 00:20:58,590
to solve my problem so other options for

359
00:20:58,590 --> 00:21:00,240
testing you can see on this slide that

360
00:21:00,240 --> 00:21:02,669
population size for this test was about

361
00:21:02,669 --> 00:21:06,389
500 I try to also to see if the

362
00:21:06,389 --> 00:21:08,909
chromosome size can have some influence

363
00:21:08,909 --> 00:21:12,870
on the result output number of Parros is

364
00:21:12,870 --> 00:21:17,750
1000 and the dictionary sound is 465

365
00:21:17,750 --> 00:21:23,430
let's see Oh take

366
00:21:23,430 --> 00:21:26,590
the genetic algorithms are best suitable

367
00:21:26,590 --> 00:21:31,660
to find some optimum local optimum and

368
00:21:31,660 --> 00:21:33,940
not the global one so they easily can

369
00:21:33,940 --> 00:21:36,780
fall down to some local well yeah and

370
00:21:36,780 --> 00:21:39,400
it's nearly impossible for them to get

371
00:21:39,400 --> 00:21:44,190
to another one that can be better so if

372
00:21:44,190 --> 00:21:47,860
population DeGraw dates and the where of

373
00:21:47,860 --> 00:21:50,470
the best representative is not changed

374
00:21:50,470 --> 00:21:55,480
for some period there was some shake it

375
00:21:55,480 --> 00:21:57,520
looked like in the next period of

376
00:21:57,520 --> 00:22:00,310
mutation instead of 2% there were thirty

377
00:22:00,310 --> 00:22:02,230
percent so the idea is rather simple to

378
00:22:02,230 --> 00:22:05,370
shake the population to get maybe a

379
00:22:05,370 --> 00:22:14,669
better optimum so some tests were done

380
00:22:15,600 --> 00:22:20,260
on this light the first test was used

381
00:22:20,260 --> 00:22:23,590
the limit is 10 megabytes and the

382
00:22:23,590 --> 00:22:25,600
fitness function is for total passwords

383
00:22:25,600 --> 00:22:28,470
so on this slide you can see that the

384
00:22:28,470 --> 00:22:30,880
population with the chromosome size of

385
00:22:30,880 --> 00:22:34,480
five dictionaries got the better results

386
00:22:34,480 --> 00:22:39,160
than the others and also you can you can

387
00:22:39,160 --> 00:22:42,910
also see some hopes for chromosome size

388
00:22:42,910 --> 00:22:46,360
20 whereas something happened and the

389
00:22:46,360 --> 00:22:48,250
party individuals become better and

390
00:22:48,250 --> 00:22:52,410
better and then the previous one so

391
00:22:52,410 --> 00:22:59,800
let's see what happened there I picked

392
00:22:59,800 --> 00:23:03,760
up two child between between the hope so

393
00:23:03,760 --> 00:23:05,890
you can see that they exchanged with few

394
00:23:05,890 --> 00:23:09,940
dictionaries but nothing important since

395
00:23:09,940 --> 00:23:13,120
only happened so if we take the last

396
00:23:13,120 --> 00:23:15,850
child you can see that some dictionaries

397
00:23:15,850 --> 00:23:19,000
remains from the first population until

398
00:23:19,000 --> 00:23:22,680
the end so there must be something

399
00:23:22,680 --> 00:23:25,960
interesting in them in them or maybe

400
00:23:25,960 --> 00:23:31,030
they really useful some chord dictionary

401
00:23:31,030 --> 00:23:34,240
some similar synergy between population

402
00:23:34,240 --> 00:23:36,110
best representatives from each people

403
00:23:36,110 --> 00:23:41,770
patients with various chromosome sighs

404
00:23:42,850 --> 00:23:46,510
all the all the individuals have some

405
00:23:46,510 --> 00:23:50,030
similar between each other some similar

406
00:23:50,030 --> 00:23:54,650
dictionaries so there will be a lot of

407
00:23:54,650 --> 00:24:00,620
tables again so what about this wordlist

408
00:24:00,620 --> 00:24:03,020
first of all they have some common in

409
00:24:03,020 --> 00:24:07,309
particular they they all have on the

410
00:24:07,309 --> 00:24:09,830
real user passwords some of them are

411
00:24:09,830 --> 00:24:16,480
corrected database like Hellfire or

412
00:24:16,480 --> 00:24:21,140
first pass so the way to achieve the

413
00:24:21,140 --> 00:24:23,270
better dictionary is to use real user

414
00:24:23,270 --> 00:24:28,640
passwords it's pretty obvious so another

415
00:24:28,640 --> 00:24:33,410
test for 100 megabytes as you can see it

416
00:24:33,410 --> 00:24:36,290
the chromosome with size to 20 grand

417
00:24:36,290 --> 00:24:39,950
better results than others it's pretty

418
00:24:39,950 --> 00:24:43,040
clear that for 100 megabytes much more

419
00:24:43,040 --> 00:24:45,080
dictionaries can be picked up and then

420
00:24:45,080 --> 00:24:51,049
for 10 megabytes some difference between

421
00:24:51,049 --> 00:24:55,190
two child's you may see that there are

422
00:24:55,190 --> 00:24:57,380
two similar dictionaries like my loud

423
00:24:57,380 --> 00:25:00,080
pass and gmail out pass so a pretty the

424
00:25:00,080 --> 00:25:04,190
same except one thing that gmail wall

425
00:25:04,190 --> 00:25:07,250
pass has much more user passwords than

426
00:25:07,250 --> 00:25:10,070
the mail all passed so they the better

427
00:25:10,070 --> 00:25:14,110
child to prefer to eat instead of other

428
00:25:15,370 --> 00:25:21,770
okay some a similarity between best

429
00:25:21,770 --> 00:25:23,690
representatives from 10 megabytes and

430
00:25:23,690 --> 00:25:27,740
100 they all have the same dictionaries

431
00:25:27,740 --> 00:25:32,059
so i may say again that the real

432
00:25:32,059 --> 00:25:34,760
passwords and such cases are make the

433
00:25:34,760 --> 00:25:41,120
deal test number three fitness failure

434
00:25:41,120 --> 00:25:44,120
will change to a crack rage that 10

435
00:25:44,120 --> 00:25:46,570
megabyte limit

436
00:25:47,060 --> 00:25:50,100
the population with chromosome size from

437
00:25:50,100 --> 00:25:52,980
five to 15 God read the similar results

438
00:25:52,980 --> 00:25:55,890
and will decides to enter the results

439
00:25:55,890 --> 00:26:00,840
are the same as in previous tests so

440
00:26:00,840 --> 00:26:03,660
again some similarity between them you

441
00:26:03,660 --> 00:26:05,370
may also notice that there are some

442
00:26:05,370 --> 00:26:08,940
dictionaries that also and that also

443
00:26:08,940 --> 00:26:12,210
exists in tests with fitness function of

444
00:26:12,210 --> 00:26:18,110
four total passwords and other test case

445
00:26:18,110 --> 00:26:21,390
is for 100 megabyte limit as you can

446
00:26:21,390 --> 00:26:23,370
also notice there are also some hopes

447
00:26:23,370 --> 00:26:28,650
after reach the father the father

448
00:26:28,650 --> 00:26:32,360
individuals become better and better so

449
00:26:32,360 --> 00:26:41,000
yes tables tables everywhere Oh tables

450
00:26:41,000 --> 00:26:44,450
okay let's make some cooperation between

451
00:26:44,450 --> 00:26:47,790
two fitness functions first of all they

452
00:26:47,790 --> 00:26:50,700
have the similar dictionaries in all the

453
00:26:50,700 --> 00:26:53,700
cases so we can say that the best

454
00:26:53,700 --> 00:26:56,990
dictionaries is about top something

455
00:26:56,990 --> 00:26:59,790
explained the office pass all of them

456
00:26:59,790 --> 00:27:03,510
contains only a real password so the

457
00:27:03,510 --> 00:27:06,540
most individuals gets some chord

458
00:27:06,540 --> 00:27:07,860
dictionary and try to add other

459
00:27:07,860 --> 00:27:11,030
dictionary generated one to create it

460
00:27:11,030 --> 00:27:16,530
thumbs in you and okay let's see some

461
00:27:16,530 --> 00:27:20,570
results first of all I picked up to

462
00:27:20,570 --> 00:27:23,910
maybe best dictionaries is top 1 million

463
00:27:23,910 --> 00:27:27,690
and each split make some another test

464
00:27:27,690 --> 00:27:31,530
case which contains about 70 ashley's

465
00:27:31,530 --> 00:27:33,750
that are not in the training set it's

466
00:27:33,750 --> 00:27:37,620
very important because testing on the

467
00:27:37,620 --> 00:27:42,270
training set it's really dull so what

468
00:27:42,270 --> 00:27:45,300
can what can we see here that the

469
00:27:45,300 --> 00:27:47,670
genetic algorithms allows us to create

470
00:27:47,670 --> 00:27:50,730
the dictionary that are better and even

471
00:27:50,730 --> 00:27:54,830
smaller and then the popular best one

472
00:27:54,830 --> 00:27:59,820
and four

473
00:27:59,820 --> 00:28:03,520
100 megabyte limit I picked up rocio

474
00:28:03,520 --> 00:28:07,360
popular rocky dictionary and using

475
00:28:07,360 --> 00:28:09,730
genetic algorithms they allows us to

476
00:28:09,730 --> 00:28:13,150
create even half size dictionary and the

477
00:28:13,150 --> 00:28:17,530
better one than the rock you it's pretty

478
00:28:17,530 --> 00:28:21,100
I think pretty good results so maybe

479
00:28:21,100 --> 00:28:24,600
concluded some conclusions for part one

480
00:28:24,600 --> 00:28:28,630
genetic algorithms allows to create some

481
00:28:28,630 --> 00:28:30,250
better dictionaries even for ten

482
00:28:30,250 --> 00:28:34,180
percents and the Dickens are always

483
00:28:34,180 --> 00:28:39,810
smaller but there are some drawbacks and

484
00:28:39,810 --> 00:28:44,020
also can this results be improved first

485
00:28:44,020 --> 00:28:48,430
of all about the drawbacks correct rate

486
00:28:48,430 --> 00:28:50,920
and total passwords are not the same as

487
00:28:50,920 --> 00:28:54,250
you can see on this slide there is test

488
00:28:54,250 --> 00:28:56,430
case file that contains only numbers and

489
00:28:56,430 --> 00:28:58,780
dictionary one that also contains only

490
00:28:58,780 --> 00:29:02,920
numbers and rely on it it can get much

491
00:29:02,920 --> 00:29:06,670
better total password right then the

492
00:29:06,670 --> 00:29:12,090
other dictionary so this means that the

493
00:29:12,090 --> 00:29:14,710
addiction research seems to be better

494
00:29:14,710 --> 00:29:20,680
because it has various words so the test

495
00:29:20,680 --> 00:29:24,150
case can really be very subjective and

496
00:29:24,150 --> 00:29:27,880
rely on only one test case that are best

497
00:29:27,880 --> 00:29:30,010
for one dictionary and are worse for

498
00:29:30,010 --> 00:29:34,260
another the results may be really wrong

499
00:29:34,680 --> 00:29:39,210
and another the chromosome size limit I

500
00:29:39,210 --> 00:29:43,390
think this it's good for population to

501
00:29:43,390 --> 00:29:47,260
decide itself the length of the best

502
00:29:47,260 --> 00:29:55,210
individual and also implant that if we

503
00:29:55,210 --> 00:29:57,670
using only one fitness function let's

504
00:29:57,670 --> 00:29:59,320
like crack rate and rural peasants we

505
00:29:59,320 --> 00:30:03,790
got the result that good in the one

506
00:30:03,790 --> 00:30:05,650
particular fitness function not in the

507
00:30:05,650 --> 00:30:09,300
other it's what it was in plan

508
00:30:09,440 --> 00:30:14,659
so some improvements first of all the

509
00:30:14,659 --> 00:30:17,210
length of the chromosome if the size is

510
00:30:17,210 --> 00:30:19,490
account of the dictionaries if we have

511
00:30:19,490 --> 00:30:22,039
10 dictionaries for testing the length

512
00:30:22,039 --> 00:30:26,090
of the chromosome is 10 if 2020 if 1000

513
00:30:26,090 --> 00:30:30,559
1000 each dictionary I represented in

514
00:30:30,559 --> 00:30:33,309
chromosome by its place as you can see

515
00:30:33,309 --> 00:30:36,019
the sermon dictionary rotor scan is

516
00:30:36,019 --> 00:30:39,110
number seven and eat in chromosome on

517
00:30:39,110 --> 00:30:45,019
the seven place after their population

518
00:30:45,019 --> 00:30:47,690
was generated so first of all the

519
00:30:47,690 --> 00:30:49,789
chromosome randomly generated so it can

520
00:30:49,789 --> 00:30:55,570
has one dictionary to 100 whatever and

521
00:30:55,570 --> 00:30:58,250
the population also generated so narrow

522
00:30:58,250 --> 00:31:01,250
there was some pros and cons first of

523
00:31:01,250 --> 00:31:05,809
all no fixing our diction no fixed

524
00:31:05,809 --> 00:31:08,320
dictionary count I think that's good but

525
00:31:08,320 --> 00:31:12,289
for testing I need really big population

526
00:31:12,289 --> 00:31:16,220
size so it's a really hard calculation

527
00:31:16,220 --> 00:31:22,509
for time and just fitness function so I

528
00:31:22,509 --> 00:31:25,730
want some Fitness functions that will

529
00:31:25,730 --> 00:31:28,580
pay respect for all the fitness values

530
00:31:28,580 --> 00:31:30,559
like greater a total passwords and

531
00:31:30,559 --> 00:31:33,529
unique passwords as they are not the

532
00:31:33,529 --> 00:31:37,549
same I think that using these functions

533
00:31:37,549 --> 00:31:41,809
I can create some polynomial sense that

534
00:31:41,809 --> 00:31:46,039
should be found the one option that the

535
00:31:46,039 --> 00:31:48,350
sum of these such evidence must be one

536
00:31:48,350 --> 00:31:52,309
that was made for make resonating more

537
00:31:52,309 --> 00:31:56,029
convenient so I need to find this

538
00:31:56,029 --> 00:32:00,559
coefficient so I choose some step 0.1

539
00:32:00,559 --> 00:32:06,139
125 and get the total numbers to the

540
00:32:06,139 --> 00:32:09,289
total result for total numbers

541
00:32:09,289 --> 00:32:13,639
operations are 42 so you can see here

542
00:32:13,639 --> 00:32:16,940
some sample how the fitness functions

543
00:32:16,940 --> 00:32:21,590
look like with these coefficients

544
00:32:21,590 --> 00:32:23,960
though for further testing I choose

545
00:32:23,960 --> 00:32:26,429
tournament selection increase slightly

546
00:32:26,429 --> 00:32:30,510
increase mutation valium and change the

547
00:32:30,510 --> 00:32:33,299
panel chip so on the previous tests the

548
00:32:33,299 --> 00:32:37,830
penalty relies on the dictionary size

549
00:32:37,830 --> 00:32:43,770
and it's not very simple that's why I

550
00:32:43,770 --> 00:32:49,200
choose as penalty to rely on the count

551
00:32:49,200 --> 00:32:52,200
of passwords it's rather simple so there

552
00:32:52,200 --> 00:32:54,809
was also some bottle area after that the

553
00:32:54,809 --> 00:32:57,120
penalty is calculated and some started

554
00:32:57,120 --> 00:33:02,669
from each fitness area so the population

555
00:33:02,669 --> 00:33:05,340
must brings me the dictionary as small

556
00:33:05,340 --> 00:33:08,580
as possible and with the best fitness

557
00:33:08,580 --> 00:33:14,460
failures also how can this cave essence

558
00:33:14,460 --> 00:33:21,500
be found for this I make near 50 tests

559
00:33:21,500 --> 00:33:25,770
for each coefficients to get the as a

560
00:33:25,770 --> 00:33:27,120
result to get a dictionary some

561
00:33:27,120 --> 00:33:28,950
dictionary after that I make some tests

562
00:33:28,950 --> 00:33:34,020
on the final test list final hash lists

563
00:33:34,020 --> 00:33:37,080
which also which also contains 17 of

564
00:33:37,080 --> 00:33:41,460
them and make calculate the various make

565
00:33:41,460 --> 00:33:46,110
some average of them to see make some

566
00:33:46,110 --> 00:33:49,290
average presented yep make some average

567
00:33:49,290 --> 00:33:53,250
values of them so this was done to see a

568
00:33:53,250 --> 00:33:56,669
two-room of some randomness so if i make

569
00:33:56,669 --> 00:34:00,690
only one test for rich keta sense i get

570
00:34:00,690 --> 00:34:04,020
for example that because the lot of

571
00:34:04,020 --> 00:34:07,710
random the valley can be cannot be right

572
00:34:07,710 --> 00:34:10,469
so be there was this way there was a

573
00:34:10,469 --> 00:34:16,949
pity of them and some final results so I

574
00:34:16,949 --> 00:34:20,550
got that you think such eating some

575
00:34:20,550 --> 00:34:22,949
occasions I can get the results that are

576
00:34:22,949 --> 00:34:25,530
best in all various like unique

577
00:34:25,530 --> 00:34:27,810
passwords total passwords and correct

578
00:34:27,810 --> 00:34:32,250
right so using them I try to create

579
00:34:32,250 --> 00:34:34,679
nearly 5 dictionaries to see what

580
00:34:34,679 --> 00:34:35,418
results I will

581
00:34:35,418 --> 00:34:41,119
yet as you can see here that populations

582
00:34:41,119 --> 00:34:43,849
after some time you graduate so there

583
00:34:43,849 --> 00:34:46,489
was global entation that try to shake

584
00:34:46,489 --> 00:34:49,040
the populations maybe to get some new

585
00:34:49,040 --> 00:34:53,480
various but it got not luck I oh it got

586
00:34:53,480 --> 00:35:00,049
no luck and some results so the chrome

587
00:35:00,049 --> 00:35:02,839
sub size lengths for the study was get

588
00:35:02,839 --> 00:35:06,170
that its optimum size is a from 18 to 12

589
00:35:06,170 --> 00:35:10,640
20 and some comparison between old

590
00:35:10,640 --> 00:35:13,970
dictionary test nu 1 so you can see here

591
00:35:13,970 --> 00:35:19,010
that they approach is the same so the

592
00:35:19,010 --> 00:35:20,630
dictionaries real passwords are

593
00:35:20,630 --> 00:35:27,319
preferred and another table I choose the

594
00:35:27,319 --> 00:35:28,970
best representatives from the previous

595
00:35:28,970 --> 00:35:32,240
tests and the word list I got its top

596
00:35:32,240 --> 00:35:34,819
million in xsplit as you can see here

597
00:35:34,819 --> 00:35:38,500
one dictionary is even better than the

598
00:35:38,500 --> 00:35:41,150
best representatives from previous tests

599
00:35:41,150 --> 00:35:44,829
and of course better than the common

600
00:35:44,829 --> 00:35:50,349
popular too common popular word list a

601
00:35:50,349 --> 00:35:54,190
slightly better but it's okay and

602
00:35:54,190 --> 00:35:57,700
another test for 10 millions passwords

603
00:35:57,700 --> 00:36:02,150
it's about 100 megabytes as you can see

604
00:36:02,150 --> 00:36:05,359
here the global mutations helps the

605
00:36:05,359 --> 00:36:08,450
palatians to jump from one local optimum

606
00:36:08,450 --> 00:36:14,649
to another and to get better results and

607
00:36:14,680 --> 00:36:18,890
here the average dictionary size is 35

608
00:36:18,890 --> 00:36:23,240
and there were the dictionary that even

609
00:36:23,240 --> 00:36:25,670
better than the best representatives

610
00:36:25,670 --> 00:36:28,730
from previous tests so and even better

611
00:36:28,730 --> 00:36:35,500
than rocio for about twenty percent and

612
00:36:35,500 --> 00:36:40,160
some little conclusion first of all the

613
00:36:40,160 --> 00:36:43,329
genetic algorithms can help to generate

614
00:36:43,329 --> 00:36:47,329
some better dictionary in some ways now

615
00:36:47,329 --> 00:36:49,190
the test case may be really

616
00:36:49,190 --> 00:36:51,530
very very subjective so that's why there

617
00:36:51,530 --> 00:36:54,980
were a lot of them the bigger dictionary

618
00:36:54,980 --> 00:36:56,569
is not always better because their

619
00:36:56,569 --> 00:36:59,980
speech is really really critical and

620
00:36:59,980 --> 00:37:02,540
real user passwords are more preferred

621
00:37:02,540 --> 00:37:06,980
then generated one and also by this link

622
00:37:06,980 --> 00:37:11,140
you can find some results that we made

623
00:37:11,140 --> 00:37:19,460
during this test I think this is the end

624
00:37:19,460 --> 00:37:22,270
if you have some questions you may ask

625
00:37:22,270 --> 00:37:26,470
you might ask yep

