1
00:00:00,060 --> 00:00:02,879
second presentation of this morning

2
00:00:02,879 --> 00:00:06,240
welcome to the stage Mr yanosh capich

3
00:00:06,240 --> 00:00:09,259
thank you

4
00:00:10,860 --> 00:00:13,980
are you awake for a second to get the

5
00:00:13,980 --> 00:00:16,400
people in

6
00:00:17,220 --> 00:00:18,779
so

7
00:00:18,779 --> 00:00:22,619
um hi everyone my name is Janus capich I

8
00:00:22,619 --> 00:00:25,199
study electrical engineering at bayama

9
00:00:25,199 --> 00:00:29,820
and I work at Bosch with a scholarship

10
00:00:29,820 --> 00:00:31,640
for which my

11
00:00:31,640 --> 00:00:35,760
project is Bluetooth energy security and

12
00:00:35,760 --> 00:00:37,579
in this talk I will

13
00:00:37,579 --> 00:00:42,780
give a presentation about this topic

14
00:00:42,780 --> 00:00:45,059
wow

15
00:00:45,059 --> 00:00:49,379
just so as you may know Bluetooth is

16
00:00:49,379 --> 00:00:53,940
every look we have smart watches smart

17
00:00:53,940 --> 00:00:56,100
locks smartphone surveillance cameras

18
00:00:56,100 --> 00:00:59,699
and but also it's not just things in the

19
00:00:59,699 --> 00:01:01,860
consumer industry

20
00:01:01,860 --> 00:01:05,880
it is also in the automotive sector and

21
00:01:05,880 --> 00:01:07,799
also in the medical industry too

22
00:01:07,799 --> 00:01:10,560
therefore the second English total

23
00:01:10,560 --> 00:01:14,180
should be very important for us

24
00:01:15,479 --> 00:01:20,659
um a quiet current attack was done

25
00:01:20,659 --> 00:01:23,820
on the Tesla

26
00:01:23,820 --> 00:01:29,280
well this was a ble key application

27
00:01:29,280 --> 00:01:31,320
um many intermediate attack so the

28
00:01:31,320 --> 00:01:34,920
attacker could perform this attack by

29
00:01:34,920 --> 00:01:37,860
exporting get messages

30
00:01:37,860 --> 00:01:40,979
sent to the Tesla

31
00:01:40,979 --> 00:01:43,500
key

32
00:01:43,500 --> 00:01:47,340
this just shows that uh stability should

33
00:01:47,340 --> 00:01:50,640
be very important for us also working in

34
00:01:50,640 --> 00:01:53,220
the automotive field

35
00:01:53,220 --> 00:01:55,860
but actually when we talk about

36
00:01:55,860 --> 00:01:59,820
Bluetooth this protocol includes two

37
00:01:59,820 --> 00:02:02,460
protocols the Bluetooth classic and

38
00:02:02,460 --> 00:02:04,200
Bluetooth slow energy

39
00:02:04,200 --> 00:02:07,200
Bluetooth slow energy has a maestro

40
00:02:07,200 --> 00:02:11,459
World slower data rate but it consumes

41
00:02:11,459 --> 00:02:14,819
much less power therefore the most iot

42
00:02:14,819 --> 00:02:19,260
devices use this protocol

43
00:02:19,920 --> 00:02:23,099
um I will give a short overview of on

44
00:02:23,099 --> 00:02:26,459
the Bluetooth device

45
00:02:26,459 --> 00:02:30,900
so application programmers so you can

46
00:02:30,900 --> 00:02:33,239
separate the stack into three sections

47
00:02:33,239 --> 00:02:36,480
the application layer the host layers

48
00:02:36,480 --> 00:02:38,340
and the controller ideas

49
00:02:38,340 --> 00:02:41,480
most Bluetooth low energy application

50
00:02:41,480 --> 00:02:43,440
programmers interact with the

51
00:02:43,440 --> 00:02:46,760
application layer and some host layers

52
00:02:46,760 --> 00:02:49,920
these are mostly the Gap the get and the

53
00:02:49,920 --> 00:02:53,099
SMP layers

54
00:02:53,099 --> 00:02:56,940
Gap generic access profile and as a

55
00:02:56,940 --> 00:03:00,360
discoverability and connectability to a

56
00:03:00,360 --> 00:03:01,260
device

57
00:03:01,260 --> 00:03:05,040
get the genetic attribute protocol

58
00:03:05,040 --> 00:03:08,099
this defines services and

59
00:03:08,099 --> 00:03:11,640
characteristics for an application so

60
00:03:11,640 --> 00:03:14,099
for example that is the heart rate

61
00:03:14,099 --> 00:03:17,459
service the HRS with the characteristics

62
00:03:17,459 --> 00:03:23,159
for the monitoring your BPM so these are

63
00:03:23,159 --> 00:03:26,220
this characteristic and service mean is

64
00:03:26,220 --> 00:03:28,099
mainly used in

65
00:03:28,099 --> 00:03:30,780
SmartWatches for example

66
00:03:30,780 --> 00:03:34,260
so that is the SMP the security manager

67
00:03:34,260 --> 00:03:38,760
layer which secures your connection

68
00:03:38,760 --> 00:03:41,720
but as you may know that that are the

69
00:03:41,720 --> 00:03:44,519
controller layers the link layer and the

70
00:03:44,519 --> 00:03:48,180
physical layer too this gets developed

71
00:03:48,180 --> 00:03:50,760
by the IC manufacturer and vendor

72
00:03:50,760 --> 00:03:55,340
supplier therefore not much attention is

73
00:03:55,340 --> 00:03:58,799
added to this these protocols by the

74
00:03:58,799 --> 00:04:01,739
application developers so that's one

75
00:04:01,739 --> 00:04:04,860
reason we should focus on this

76
00:04:04,860 --> 00:04:07,920
um it is how the link layer message

77
00:04:07,920 --> 00:04:10,980
exchange diagram looks like it's been a

78
00:04:10,980 --> 00:04:12,959
center and a peripheral device

79
00:04:12,959 --> 00:04:16,680
so first the peripheral device sends out

80
00:04:16,680 --> 00:04:18,959
an advertisement message

81
00:04:18,959 --> 00:04:22,199
and then the center device can respond

82
00:04:22,199 --> 00:04:24,240
to this with the scan request message

83
00:04:24,240 --> 00:04:26,120
therefore the

84
00:04:26,120 --> 00:04:29,880
and then the peripheral device responds

85
00:04:29,880 --> 00:04:31,979
to this with the scan response that for

86
00:04:31,979 --> 00:04:35,460
the both devices know of each other

87
00:04:35,460 --> 00:04:38,220
and if the center would like to initiate

88
00:04:38,220 --> 00:04:40,440
a connection it sends out a connection

89
00:04:40,440 --> 00:04:42,479
request message

90
00:04:42,479 --> 00:04:45,840
after that the two devices are connected

91
00:04:45,840 --> 00:04:48,720
and the center becomes the master and

92
00:04:48,720 --> 00:04:51,360
the peripheral becomes the slave

93
00:04:51,360 --> 00:04:55,220
after this the center device can change

94
00:04:55,220 --> 00:04:58,220
parameter

95
00:04:58,580 --> 00:05:00,600
instead of the connection with the

96
00:05:00,600 --> 00:05:03,600
parameter requests then the connection

97
00:05:03,600 --> 00:05:06,840
is secured with SMP messages this is

98
00:05:06,840 --> 00:05:10,740
quite batting and then get service this

99
00:05:10,740 --> 00:05:13,380
uh and get collected messages can be

100
00:05:13,380 --> 00:05:15,919
exchanged

101
00:05:16,680 --> 00:05:18,900
and we'd also like to mention that there

102
00:05:18,900 --> 00:05:20,880
are these type of attacks for the

103
00:05:20,880 --> 00:05:23,400
wireless protocols

104
00:05:23,400 --> 00:05:25,320
um if stopping man in the middle really

105
00:05:25,320 --> 00:05:28,020
they play attack and the OS so denial of

106
00:05:28,020 --> 00:05:30,180
service in this talk I won't go into

107
00:05:30,180 --> 00:05:34,639
much detail about it but I think it's

108
00:05:34,639 --> 00:05:36,840
needed to mention that there are these

109
00:05:36,840 --> 00:05:38,160
type of attacks

110
00:05:38,160 --> 00:05:39,600
for which

111
00:05:39,600 --> 00:05:40,500
um

112
00:05:40,500 --> 00:05:44,639
we should do security testing one of the

113
00:05:44,639 --> 00:05:46,860
most efficient testing methods is

114
00:05:46,860 --> 00:05:50,539
fuzzing so fast testing

115
00:05:50,720 --> 00:05:54,180
we send out random data and check for

116
00:05:54,180 --> 00:05:56,220
failures in the device

117
00:05:56,220 --> 00:06:00,180
with this test we check for the devices

118
00:06:00,180 --> 00:06:02,160
that was Nest so can you tender

119
00:06:02,160 --> 00:06:04,620
unexpected data without a crash

120
00:06:04,620 --> 00:06:07,919
and its Equity is it secured against

121
00:06:07,919 --> 00:06:10,320
buffer the workflow crashing or

122
00:06:10,320 --> 00:06:13,159
deadlocking

123
00:06:14,639 --> 00:06:18,240
passing structure looks like this

124
00:06:18,240 --> 00:06:20,400
firstly that is the message generated

125
00:06:20,400 --> 00:06:22,620
part where

126
00:06:22,620 --> 00:06:23,720
the

127
00:06:23,720 --> 00:06:26,400
random data is generated

128
00:06:26,400 --> 00:06:29,759
we use that on a fuzzing engine which I

129
00:06:29,759 --> 00:06:31,680
developed on top of a Bluetooth

130
00:06:31,680 --> 00:06:33,300
terminology framework

131
00:06:33,300 --> 00:06:36,539
and then the message the random message

132
00:06:36,539 --> 00:06:39,479
is passed the message publisher which

133
00:06:39,479 --> 00:06:42,120
sends out the data to the device under

134
00:06:42,120 --> 00:06:43,139
test

135
00:06:43,139 --> 00:06:46,080
then we monitor this device with Target

136
00:06:46,080 --> 00:06:49,740
monitor which can involve lockers keep

137
00:06:49,740 --> 00:06:53,539
live scripts or have checks

138
00:06:54,000 --> 00:06:58,139
so why would we like to First Link layer

139
00:06:58,139 --> 00:07:01,199
you are this so this link layer exchange

140
00:07:01,199 --> 00:07:02,220
diagram

141
00:07:02,220 --> 00:07:06,600
and you may have noticed that after and

142
00:07:06,600 --> 00:07:09,180
before the pairing there isn't really

143
00:07:09,180 --> 00:07:12,259
any security measure has implemented

144
00:07:12,259 --> 00:07:16,020
therefore this should be focused on by

145
00:07:16,020 --> 00:07:18,479
the by our side

146
00:07:18,479 --> 00:07:20,880
and these messages were linked to your

147
00:07:20,880 --> 00:07:21,780
messages

148
00:07:21,780 --> 00:07:24,180
also most faster tools don't go down to

149
00:07:24,180 --> 00:07:25,860
this layout because as I already

150
00:07:25,860 --> 00:07:28,319
mentioned this layer is developed by the

151
00:07:28,319 --> 00:07:30,180
manufacturer and not the application

152
00:07:30,180 --> 00:07:32,340
developer

153
00:07:32,340 --> 00:07:35,960
and the other research projects with

154
00:07:35,960 --> 00:07:39,240
successful in corrupting the link layer

155
00:07:39,240 --> 00:07:42,720
messages message exchanges

156
00:07:42,720 --> 00:07:46,440
so these are the messages I advanced

157
00:07:46,440 --> 00:07:48,960
and there is a scan request message

158
00:07:48,960 --> 00:07:51,599
connection request and other parameter

159
00:07:51,599 --> 00:07:54,380
request messages

160
00:07:54,660 --> 00:07:57,300
um this test Suite has been designed to

161
00:07:57,300 --> 00:08:00,120
act as a malicious link layer Central

162
00:08:00,120 --> 00:08:03,120
device that sends out invalid requests

163
00:08:03,120 --> 00:08:05,099
to the tested link layer particular

164
00:08:05,099 --> 00:08:08,000
device and we monitor the

165
00:08:08,000 --> 00:08:12,680
boot with Target methods

166
00:08:14,060 --> 00:08:18,360
it is so I already said that we use our

167
00:08:18,360 --> 00:08:20,780
own fuzzing tool the fuzzing engine

168
00:08:20,780 --> 00:08:23,960
which has a smart and on data generation

169
00:08:23,960 --> 00:08:27,720
this means that it has weights added to

170
00:08:27,720 --> 00:08:31,259
the different fields and it uses seating

171
00:08:31,259 --> 00:08:35,240
so we can reproduce the

172
00:08:35,240 --> 00:08:38,760
random data

173
00:08:38,760 --> 00:08:40,740
and on top of this I developed the

174
00:08:40,740 --> 00:08:44,039
skeppy framework which wraps the random

175
00:08:44,039 --> 00:08:46,320
data into a generic link layer message

176
00:08:46,320 --> 00:08:50,220
you can see it there so first it is a

177
00:08:50,220 --> 00:08:53,040
Tempo then the access address then a pdu

178
00:08:53,040 --> 00:08:54,779
and the CSC

179
00:08:54,779 --> 00:08:57,779
in the first paid you because the other

180
00:08:57,779 --> 00:09:00,839
three fields are the necessary to be

181
00:09:00,839 --> 00:09:04,940
correct to keep up the connection

182
00:09:07,820 --> 00:09:11,580
so firstly we choose what message we

183
00:09:11,580 --> 00:09:15,060
would like to fast then we choose that

184
00:09:15,060 --> 00:09:19,019
field to files and then that method then

185
00:09:19,019 --> 00:09:23,399
we can apply collection methods to this

186
00:09:23,399 --> 00:09:26,820
to illustrate this here is an example so

187
00:09:26,820 --> 00:09:28,680
here the first stage is choosing the

188
00:09:28,680 --> 00:09:29,700
message

189
00:09:29,700 --> 00:09:31,440
you can see that each message message

190
00:09:31,440 --> 00:09:35,519
has an added weight to it and

191
00:09:35,519 --> 00:09:38,580
it shows the connection request because

192
00:09:38,580 --> 00:09:41,580
it was I guess it was more likely to be

193
00:09:41,580 --> 00:09:44,339
chosen because the weight was 0.2 of

194
00:09:44,339 --> 00:09:46,620
this message the rank request for

195
00:09:46,620 --> 00:09:49,980
example had a 0.1 weight added to it

196
00:09:49,980 --> 00:09:53,760
in the second stage we the fasting tool

197
00:09:53,760 --> 00:09:56,420
chooses what field it would like to fast

198
00:09:56,420 --> 00:10:01,740
it shows the video type and then it

199
00:10:01,740 --> 00:10:04,980
chooses the method it shows the change

200
00:10:04,980 --> 00:10:09,000
value to maximum method

201
00:10:09,000 --> 00:10:13,920
and then this random data created by the

202
00:10:13,920 --> 00:10:15,240
engine is passed to the message

203
00:10:15,240 --> 00:10:19,080
publisher which was a Nordic device the

204
00:10:19,080 --> 00:10:22,279
NLF 52 dongle

205
00:10:22,279 --> 00:10:26,519
this dongle was also used by the swain2

206
00:10:26,519 --> 00:10:27,540
project

207
00:10:27,540 --> 00:10:30,660
which have the much success and they

208
00:10:30,660 --> 00:10:34,440
created a special firmware for it which

209
00:10:34,440 --> 00:10:36,420
can send out linkedly messages created

210
00:10:36,420 --> 00:10:39,260
by python code

211
00:10:39,899 --> 00:10:43,620
um then we pass this so we send this

212
00:10:43,620 --> 00:10:47,540
message to the Target and we monitor it

213
00:10:47,540 --> 00:10:51,420
I implemented the file logger and the

214
00:10:51,420 --> 00:10:53,040
terminal logo

215
00:10:53,040 --> 00:10:56,959
and in the first step of the phasing we

216
00:10:56,959 --> 00:11:01,079
initialize the doot which means tell me

217
00:11:01,079 --> 00:11:04,019
terminating connections from previous

218
00:11:04,019 --> 00:11:08,279
tests and connect to the device

219
00:11:08,279 --> 00:11:11,100
after that we create the random seed and

220
00:11:11,100 --> 00:11:13,680
start the the fuzzing process and a

221
00:11:13,680 --> 00:11:15,800
message

222
00:11:16,980 --> 00:11:20,640
then during the fasting process health

223
00:11:20,640 --> 00:11:24,660
checks and keep live scripts done a hash

224
00:11:24,660 --> 00:11:28,860
check uses the fact that in the

225
00:11:28,860 --> 00:11:32,220
specification it says that in a

226
00:11:32,220 --> 00:11:34,740
connection phase the device in the

227
00:11:34,740 --> 00:11:38,279
sleeve has to exchange empty PD wood

228
00:11:38,279 --> 00:11:40,980
data type messages periodically so we

229
00:11:40,980 --> 00:11:43,560
can monitor this message to see if the

230
00:11:43,560 --> 00:11:46,560
connection is still there

231
00:11:46,560 --> 00:11:49,620
um for the keeper like the script we

232
00:11:49,620 --> 00:11:53,579
also firstly done a half check and if

233
00:11:53,579 --> 00:11:56,940
it's the health check is passed then we

234
00:11:56,940 --> 00:11:59,279
don't have to do any Keeper Live script

235
00:11:59,279 --> 00:12:02,519
but if it is failed then we should

236
00:12:02,519 --> 00:12:05,040
reconnect to the device if it is

237
00:12:05,040 --> 00:12:07,800
reconnectable and it is it and it hasn't

238
00:12:07,800 --> 00:12:10,339
crashed yet

239
00:12:10,380 --> 00:12:13,760
um here is a demo

240
00:12:16,019 --> 00:12:19,579
I think it should be playable

241
00:12:20,880 --> 00:12:24,300
yeah so here is

242
00:12:24,300 --> 00:12:27,079
how

243
00:12:31,500 --> 00:12:35,519
okay so see it this is how the Tanya

244
00:12:35,519 --> 00:12:37,760
looks during the passing process

245
00:12:37,760 --> 00:12:41,220
with the pink you can see

246
00:12:41,220 --> 00:12:44,459
um the keeper knife scripts and with

247
00:12:44,459 --> 00:12:47,399
yellow you could see the health checks I

248
00:12:47,399 --> 00:12:51,660
think this is quite muggy but you you

249
00:12:51,660 --> 00:12:55,620
can see the main part that it is sending

250
00:12:55,620 --> 00:13:00,200
out random messages the device

251
00:13:02,459 --> 00:13:05,940
and what were the lessons during this

252
00:13:05,940 --> 00:13:09,300
phasing process we tested this fuzzing

253
00:13:09,300 --> 00:13:12,899
tool and see devices Smart Lock smart

254
00:13:12,899 --> 00:13:15,720
light bulb and itag

255
00:13:15,720 --> 00:13:19,620
two of them crashed which meant that you

256
00:13:19,620 --> 00:13:23,100
had to take out the battery and the

257
00:13:23,100 --> 00:13:26,279
insert it to be able to connect to the

258
00:13:26,279 --> 00:13:28,680
device or even advertise send

259
00:13:28,680 --> 00:13:30,540
advertisement message

260
00:13:30,540 --> 00:13:33,480
producer from the peripheral device

261
00:13:33,480 --> 00:13:36,420
and one of them that looked which meant

262
00:13:36,420 --> 00:13:39,079
that the device

263
00:13:39,079 --> 00:13:43,260
stayed in a connection state after the

264
00:13:43,260 --> 00:13:45,060
10 meeting the connection from our

265
00:13:45,060 --> 00:13:49,019
website so it couldn't recognize that

266
00:13:49,019 --> 00:13:52,920
the connection should have been

267
00:13:52,920 --> 00:13:55,500
um that at that point

268
00:13:55,500 --> 00:13:59,459
we can contact the other devices by

269
00:13:59,459 --> 00:14:01,380
adding further implemented further

270
00:14:01,380 --> 00:14:04,680
security this could mean adding a random

271
00:14:04,680 --> 00:14:07,380
Bluetooth address or circling the

272
00:14:07,380 --> 00:14:09,899
pairing process but actually these

273
00:14:09,899 --> 00:14:13,200
findings should be reported to the

274
00:14:13,200 --> 00:14:15,480
Bluetooth seek and you should talk to a

275
00:14:15,480 --> 00:14:18,180
vendor supplier because as I have said

276
00:14:18,180 --> 00:14:21,120
it is this link this link layer is

277
00:14:21,120 --> 00:14:24,079
implemented by the

278
00:14:24,079 --> 00:14:27,079
manufacturer the IC manufacturer and

279
00:14:27,079 --> 00:14:29,820
this problem is actually on their side

280
00:14:29,820 --> 00:14:32,279
mainly

281
00:14:32,279 --> 00:14:34,860
um further developments we'll be making

282
00:14:34,860 --> 00:14:39,060
a device stateful because uh due to slow

283
00:14:39,060 --> 00:14:42,060
energy is the stateful protocol and

284
00:14:42,060 --> 00:14:45,300
having more specific feedback added to

285
00:14:45,300 --> 00:14:49,019
the system will be was priority and also

286
00:14:49,019 --> 00:14:52,440
making it AI based would be cool too

287
00:14:52,440 --> 00:14:55,339
and a bonus topic is

288
00:14:55,339 --> 00:14:59,339
that in the previous my previous Topic

289
00:14:59,339 --> 00:15:04,139
at Bosch was it was a pink on Bluetooth

290
00:15:04,139 --> 00:15:06,139
low energy

291
00:15:06,139 --> 00:15:10,680
data with an SD ad which is a software

292
00:15:10,680 --> 00:15:12,300
defined radio

293
00:15:12,300 --> 00:15:16,820
this means that everything in the

294
00:15:16,820 --> 00:15:20,339
video after the receiver is implemented

295
00:15:20,339 --> 00:15:21,959
by the software

296
00:15:21,959 --> 00:15:24,500
I use the general purpose

297
00:15:24,500 --> 00:15:26,820
software defined video which you could

298
00:15:26,820 --> 00:15:30,480
get like for I think 80 dollars on the

299
00:15:30,480 --> 00:15:33,480
market it was a total SDR and I used

300
00:15:33,480 --> 00:15:38,540
upped on the advertising data on the 2.4

301
00:15:38,540 --> 00:15:42,600
gigahertz and you can see in the right

302
00:15:42,600 --> 00:15:46,519
that I could capture the packets

303
00:15:46,519 --> 00:15:49,320
distinguishable from the noise

304
00:15:49,320 --> 00:15:51,600
which I think is really interesting

305
00:15:51,600 --> 00:15:55,019
because this is a cheap device and you

306
00:15:55,019 --> 00:15:59,100
can implement the software for it in

307
00:15:59,100 --> 00:16:02,639
Google radio which is Block Base so you

308
00:16:02,639 --> 00:16:05,459
don't even have to know programming

309
00:16:05,459 --> 00:16:08,479
languages for it

310
00:16:08,579 --> 00:16:10,380
if you have any questions please ask

311
00:16:10,380 --> 00:16:14,660
them and thank you for listening

312
00:16:19,680 --> 00:16:22,199
any questions from the audience

313
00:16:22,199 --> 00:16:25,279
we have a taker

314
00:16:31,320 --> 00:16:33,360
first of all thanks for the presentation

315
00:16:33,360 --> 00:16:35,519
and my question is that you said that

316
00:16:35,519 --> 00:16:38,820
you crashed two devices and did you find

317
00:16:38,820 --> 00:16:41,759
anything that can be used to break for

318
00:16:41,759 --> 00:16:43,560
example the firmware of the device or

319
00:16:43,560 --> 00:16:46,320
something like that can you repeat it

320
00:16:46,320 --> 00:16:49,860
the last part of the question did you

321
00:16:49,860 --> 00:16:52,500
find anything uh when those device

322
00:16:52,500 --> 00:16:55,620
crashed that can be found that can be

323
00:16:55,620 --> 00:16:57,899
used to break for example the firmware

324
00:16:57,899 --> 00:17:00,120
of these devices

325
00:17:00,120 --> 00:17:04,020
um as I mentioned the feedback tool so

326
00:17:04,020 --> 00:17:06,480
this is an embodied system so making the

327
00:17:06,480 --> 00:17:08,599
feedback part of

328
00:17:08,599 --> 00:17:13,319
the fuzzing tool is not as simple as for

329
00:17:13,319 --> 00:17:15,859
example in other it general purpose

330
00:17:15,859 --> 00:17:18,839
professing tools so this is also a

331
00:17:18,839 --> 00:17:23,339
working topic to have to add more

332
00:17:23,339 --> 00:17:25,500
knowledge after we actually know that

333
00:17:25,500 --> 00:17:26,579
the

334
00:17:26,579 --> 00:17:29,220
it something is crashed we should also

335
00:17:29,220 --> 00:17:34,260
analyze the white clashed so actually we

336
00:17:34,260 --> 00:17:38,419
are now working on this and so for now

337
00:17:38,419 --> 00:17:42,240
the only thing we know that is that the

338
00:17:42,240 --> 00:17:46,320
link layer was corrupted and we are

339
00:17:46,320 --> 00:17:50,880
currently working on analyzing this

340
00:17:50,880 --> 00:17:53,280
okay thank you

341
00:17:53,280 --> 00:17:54,539
so

342
00:17:54,539 --> 00:17:57,500
anybody else

343
00:17:59,160 --> 00:18:01,740
one here

344
00:18:01,740 --> 00:18:04,799
it was the Smart Lock you mentioned

345
00:18:04,799 --> 00:18:09,900
crashed or deadlocked both both yes and

346
00:18:09,900 --> 00:18:13,440
if such a device gets crashed or

347
00:18:13,440 --> 00:18:14,760
deadlocked

348
00:18:14,760 --> 00:18:17,460
um is it possible to open it anyway

349
00:18:17,460 --> 00:18:21,059
without breaking the lock physically

350
00:18:21,059 --> 00:18:24,840
um the deadlock so the lock had a

351
00:18:24,840 --> 00:18:29,520
mechanism that if you try to so it has a

352
00:18:29,520 --> 00:18:31,080
battery and if you try to charge the

353
00:18:31,080 --> 00:18:34,320
battery the connection gets lost in that

354
00:18:34,320 --> 00:18:36,240
instantly so that was its reset

355
00:18:36,240 --> 00:18:39,539
mechanism it's a reset so we could reset

356
00:18:39,539 --> 00:18:41,820
the Smart Lock like that but otherwise

357
00:18:41,820 --> 00:18:44,940
it couldn't be uh

358
00:18:44,940 --> 00:18:46,919
unlocked

359
00:18:46,919 --> 00:18:50,660
so you had to make a hard reset to

360
00:18:50,660 --> 00:18:55,100
unlock it thank you

361
00:18:55,799 --> 00:18:58,760
time for one more

362
00:19:00,720 --> 00:19:02,280
I think that's it you're not thank you

363
00:19:02,280 --> 00:19:03,600
for your excellent presentation this

364
00:19:03,600 --> 00:19:05,400
morning if you can give him a round of

365
00:19:05,400 --> 00:19:06,220
applause

366
00:19:06,220 --> 00:19:13,000
[Applause]

