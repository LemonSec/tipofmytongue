1
00:00:00,060 --> 00:00:02,340
my name is dimitrios and I'm engaged in

2
00:00:02,340 --> 00:00:03,920
computer security since

3
00:00:03,920 --> 00:00:07,259
2002 the last couple of years I focused

4
00:00:07,259 --> 00:00:11,219
on Android security and uh about a year

5
00:00:11,219 --> 00:00:12,599
ago I joined the Microsoft Defender

6
00:00:12,599 --> 00:00:13,799
research team as senior security

7
00:00:13,799 --> 00:00:15,660
researcher

8
00:00:15,660 --> 00:00:18,060
and I'm here to talk to you about how I

9
00:00:18,060 --> 00:00:19,380
enjoy the application can drain your

10
00:00:19,380 --> 00:00:22,800
wallet and the reason that I choose this

11
00:00:22,800 --> 00:00:24,720
category is due to the fact that it has

12
00:00:24,720 --> 00:00:27,359
a very unique and very interesting flow

13
00:00:27,359 --> 00:00:29,460
from a researchers point of view

14
00:00:29,460 --> 00:00:32,520
so before I go to the details on how

15
00:00:32,520 --> 00:00:34,739
this malware actually works let me first

16
00:00:34,739 --> 00:00:37,559
go through some definitions so that

17
00:00:37,559 --> 00:00:38,700
we're going to use in the next few

18
00:00:38,700 --> 00:00:40,920
slides and let me first explain what is

19
00:00:40,920 --> 00:00:43,620
billing fraud so by billing fraud we

20
00:00:43,620 --> 00:00:47,219
refer to the uh malware category which

21
00:00:47,219 --> 00:00:49,860
contains code that can charge the user

22
00:00:49,860 --> 00:00:52,440
in an intentionally deceptive way

23
00:00:52,440 --> 00:00:54,600
and we have a couple of subcategories of

24
00:00:54,600 --> 00:00:56,460
building flow we have SMS Road call

25
00:00:56,460 --> 00:00:58,620
fraud and Dolph road with the last one

26
00:00:58,620 --> 00:01:00,539
being the most interesting one and the

27
00:01:00,539 --> 00:01:02,399
one that we're going to focus in this

28
00:01:02,399 --> 00:01:04,319
presentation

29
00:01:04,319 --> 00:01:07,619
so when it comes to toll roads we're

30
00:01:07,619 --> 00:01:09,299
talking about the Marvel family with the

31
00:01:09,299 --> 00:01:11,340
multimedia billion dollar yearly

32
00:01:11,340 --> 00:01:13,740
estimated revenue and one of the most

33
00:01:13,740 --> 00:01:16,439
prevalented malware Android malware

34
00:01:16,439 --> 00:01:17,880
categories according to the Google place

35
00:01:17,880 --> 00:01:19,439
transparency report

36
00:01:19,439 --> 00:01:22,200
uh it is also very popular I'm sure that

37
00:01:22,200 --> 00:01:24,060
most of you have heard about the Joker

38
00:01:24,060 --> 00:01:24,780
family

39
00:01:24,780 --> 00:01:27,540
and this is due to the fact that it has

40
00:01:27,540 --> 00:01:29,759
um it uses the Google Play Store as main

41
00:01:29,759 --> 00:01:32,040
distribution mean

42
00:01:32,040 --> 00:01:33,720
uh another thing that I want to talk to

43
00:01:33,720 --> 00:01:35,939
you about is uh the WAP billing

44
00:01:35,939 --> 00:01:37,500
mechanism so what is a web building

45
00:01:37,500 --> 00:01:39,720
mechanism it is a billing mechanism

46
00:01:39,720 --> 00:01:41,040
which uses the wireless application

47
00:01:41,040 --> 00:01:44,040
protocol in order to enable to let the

48
00:01:44,040 --> 00:01:46,619
users purchase Services products online

49
00:01:46,619 --> 00:01:48,960
and get charged directly in their phone

50
00:01:48,960 --> 00:01:49,740
bill

51
00:01:49,740 --> 00:01:51,600
so here on the right side they have an

52
00:01:51,600 --> 00:01:53,700
example of such a service which uses

53
00:01:53,700 --> 00:01:57,180
this uh mechanism so you see there are

54
00:01:57,180 --> 00:02:00,000
only customers are eligible for

55
00:02:00,000 --> 00:02:02,220
subscriber benefits and when we're

56
00:02:02,220 --> 00:02:03,360
talking about customers we're talking

57
00:02:03,360 --> 00:02:05,640
about users which are using a specific

58
00:02:05,640 --> 00:02:08,098
Sim operator another thing

59
00:02:08,098 --> 00:02:10,860
is that the customers can subscribe to a

60
00:02:10,860 --> 00:02:13,680
specific service by navigating to a web

61
00:02:13,680 --> 00:02:15,900
enabled website then they're going to

62
00:02:15,900 --> 00:02:17,700
receive an SMS which is going to inform

63
00:02:17,700 --> 00:02:19,980
about the billing turbo the next billing

64
00:02:19,980 --> 00:02:22,560
date and this type of info

65
00:02:22,560 --> 00:02:25,980
and finally uh the customers cannot

66
00:02:25,980 --> 00:02:28,080
subscribe to more than one service

67
00:02:28,080 --> 00:02:31,200
subscription package at the time

68
00:02:31,200 --> 00:02:33,599
so let me summarize the steps so you

69
00:02:33,599 --> 00:02:36,300
have an idea of what is the help of the

70
00:02:36,300 --> 00:02:38,819
overall process so first of all the user

71
00:02:38,819 --> 00:02:41,280
has to navigate to a web enabled website

72
00:02:41,280 --> 00:02:42,900
and by the time that the server is going

73
00:02:42,900 --> 00:02:44,400
to receive this request you're going to

74
00:02:44,400 --> 00:02:46,739
send back a subscription page so this

75
00:02:46,739 --> 00:02:48,540
subscription page usually contains a

76
00:02:48,540 --> 00:02:50,160
subscription button so the user has to

77
00:02:50,160 --> 00:02:51,120
click

78
00:02:51,120 --> 00:02:52,800
and by the time that the server is going

79
00:02:52,800 --> 00:02:54,300
to receive this request a new request

80
00:02:54,300 --> 00:02:57,840
you're going to send back a pin and OTP

81
00:02:57,840 --> 00:02:58,739
so

82
00:02:58,739 --> 00:03:01,620
this is done either using as an SMS or

83
00:03:01,620 --> 00:03:03,720
the HTTP protocol or even the ussd

84
00:03:03,720 --> 00:03:07,500
protocol in some rare cases and uh the

85
00:03:07,500 --> 00:03:09,840
user has to send back the screen to the

86
00:03:09,840 --> 00:03:11,640
server the server will receive the

87
00:03:11,640 --> 00:03:13,920
screen will verify it and finally send

88
00:03:13,920 --> 00:03:16,019
the SMS that I showed you in the

89
00:03:16,019 --> 00:03:18,060
previous slide which

90
00:03:18,060 --> 00:03:20,040
informs about the billing date and all

91
00:03:20,040 --> 00:03:22,019
this kind of information now please note

92
00:03:22,019 --> 00:03:25,080
that the steps four to six are not

93
00:03:25,080 --> 00:03:27,900
always there and depend on

94
00:03:27,900 --> 00:03:29,700
each implementation of the service

95
00:03:29,700 --> 00:03:31,379
provider

96
00:03:31,379 --> 00:03:35,159
so what is now a fraudulent subscription

97
00:03:35,159 --> 00:03:36,959
so by fraudulent we refer to a

98
00:03:36,959 --> 00:03:39,480
subscription which takes place without

99
00:03:39,480 --> 00:03:42,360
the user's consent without the user

100
00:03:42,360 --> 00:03:44,879
interaction and actually without even

101
00:03:44,879 --> 00:03:46,980
being noticeable to the user so the

102
00:03:46,980 --> 00:03:49,260
malware has to perform all these steps

103
00:03:49,260 --> 00:03:51,959
that you see here in order to achieve

104
00:03:51,959 --> 00:03:54,420
this type of subscription so it has to

105
00:03:54,420 --> 00:03:55,920
make sure first of all that the device

106
00:03:55,920 --> 00:03:58,379
is operating in a mobile network

107
00:03:58,379 --> 00:04:01,140
uh so and this is done by either wait

108
00:04:01,140 --> 00:04:02,400
for the user to switch the mobile

109
00:04:02,400 --> 00:04:04,680
network or Force the device with a

110
00:04:04,680 --> 00:04:07,319
mobile network then uh navigate to the

111
00:04:07,319 --> 00:04:10,260
subscription page simulate the user's

112
00:04:10,260 --> 00:04:12,480
click on the subscription page

113
00:04:12,480 --> 00:04:14,220
in the set the pin which is sent from

114
00:04:14,220 --> 00:04:15,180
the server

115
00:04:15,180 --> 00:04:17,699
send this uh pin back to the server and

116
00:04:17,699 --> 00:04:21,238
finally keep all this process silent in

117
00:04:21,238 --> 00:04:24,600
order not to be noticeable to the user

118
00:04:24,600 --> 00:04:28,020
so let's see how these things are taking

119
00:04:28,020 --> 00:04:30,300
place now from the malware side and

120
00:04:30,300 --> 00:04:32,340
before everything starts before this

121
00:04:32,340 --> 00:04:34,979
steps start what one one critical

122
00:04:34,979 --> 00:04:36,300
information that the malware has to

123
00:04:36,300 --> 00:04:39,120
retrieve is the Sim operator so which

124
00:04:39,120 --> 00:04:41,759
on which Sim operator the device is

125
00:04:41,759 --> 00:04:44,820
registered so this type of formation can

126
00:04:44,820 --> 00:04:46,440
be retrieved from a device by using the

127
00:04:46,440 --> 00:04:49,380
mccrm and C codes and uh the specific

128
00:04:49,380 --> 00:04:52,860
API calls which I depict here so either

129
00:04:52,860 --> 00:04:54,780
using it again get some operator API

130
00:04:54,780 --> 00:04:56,940
call of the telephone manager or the

131
00:04:56,940 --> 00:04:59,100
system uh the get method of the system

132
00:04:59,100 --> 00:05:00,540
properties class

133
00:05:00,540 --> 00:05:02,220
uh with the difference between the two

134
00:05:02,220 --> 00:05:03,780
of them that the one can be invoked

135
00:05:03,780 --> 00:05:06,360
directly because by simply importing

136
00:05:06,360 --> 00:05:08,220
this specific class while the second one

137
00:05:08,220 --> 00:05:10,919
uh has to be loaded using reflection

138
00:05:10,919 --> 00:05:13,620
because it's a marked the system API now

139
00:05:13,620 --> 00:05:15,060
on the Lower Side they have an actual

140
00:05:15,060 --> 00:05:18,180
code of uh one of the latest Joker

141
00:05:18,180 --> 00:05:21,840
payloads which as you see it checks if

142
00:05:21,840 --> 00:05:25,320
this information that retrieves from the

143
00:05:25,320 --> 00:05:27,660
device starts with 655 so this one

144
00:05:27,660 --> 00:05:29,400
actually belongs to the South Africa Sim

145
00:05:29,400 --> 00:05:32,580
operator so if it starts with this six

146
00:05:32,580 --> 00:05:34,139
by five it will proceed to the next

147
00:05:34,139 --> 00:05:35,759
steps

148
00:05:35,759 --> 00:05:38,280
and the next step is to make sure that

149
00:05:38,280 --> 00:05:39,780
the device operates on a mobile network

150
00:05:39,780 --> 00:05:42,840
and how this is done so wait for the

151
00:05:42,840 --> 00:05:45,900
user to switch the mobile network so uh

152
00:05:45,900 --> 00:05:48,960
create a connectivity manager instance

153
00:05:48,960 --> 00:05:51,539
then from this perform this API call and

154
00:05:51,539 --> 00:05:53,940
get the network information out of there

155
00:05:53,940 --> 00:05:56,580
see if the device is connected using a

156
00:05:56,580 --> 00:05:58,560
mobile network and go to the next step

157
00:05:58,560 --> 00:06:01,259
or the other way is to force the device

158
00:06:01,259 --> 00:06:03,300
to switch to a mobile network and how

159
00:06:03,300 --> 00:06:04,440
this is done

160
00:06:04,440 --> 00:06:07,340
so before SDK 29

161
00:06:07,340 --> 00:06:10,979
uh there was a method there which is

162
00:06:10,979 --> 00:06:13,320
called said Wi-Fi enabled and allows an

163
00:06:13,320 --> 00:06:16,220
application to disable the Wi-Fi so this

164
00:06:16,220 --> 00:06:18,979
uh doing this the device will switch

165
00:06:18,979 --> 00:06:21,240
automatically to a mobile network

166
00:06:21,240 --> 00:06:24,539
and this as I said was uh before SDK 29

167
00:06:24,539 --> 00:06:29,280
because in SDK 29 and after we saw a new

168
00:06:29,280 --> 00:06:30,479
technique

169
00:06:30,479 --> 00:06:33,060
so use uh the network request Builder

170
00:06:33,060 --> 00:06:34,860
and Define some specific capabilities

171
00:06:34,860 --> 00:06:38,340
there then use the connectivity manager

172
00:06:38,340 --> 00:06:40,199
in order to request this network and

173
00:06:40,199 --> 00:06:42,240
finally buy the process to the network

174
00:06:42,240 --> 00:06:46,139
and as before I have an example of this

175
00:06:46,139 --> 00:06:48,060
technique on the right side

176
00:06:48,060 --> 00:06:50,699
uh the demo code which is more easy to

177
00:06:50,699 --> 00:06:52,680
understand so create this network

178
00:06:52,680 --> 00:06:54,199
request Builder

179
00:06:54,199 --> 00:06:57,539
defined the capabilities that we need we

180
00:06:57,539 --> 00:06:59,280
actually want they actually want the

181
00:06:59,280 --> 00:07:00,539
device to be able to connect to the

182
00:07:00,539 --> 00:07:03,539
internet and use mobile connectivity

183
00:07:03,539 --> 00:07:07,740
and finally uh request this network from

184
00:07:07,740 --> 00:07:09,539
the connectivity manager

185
00:07:09,539 --> 00:07:11,819
when this network is already buying the

186
00:07:11,819 --> 00:07:14,340
approach to the network so with this in

187
00:07:14,340 --> 00:07:16,259
this way we just they just make sure

188
00:07:16,259 --> 00:07:18,360
that the device operates on a mobile

189
00:07:18,360 --> 00:07:20,340
network

190
00:07:20,340 --> 00:07:24,539
so now the next step is to get offers

191
00:07:24,539 --> 00:07:27,660
to know where exactly to navigate and

192
00:07:27,660 --> 00:07:29,699
this is done by communicating with the

193
00:07:29,699 --> 00:07:31,139
command control server the communication

194
00:07:31,139 --> 00:07:33,900
of course is either encrypted or some

195
00:07:33,900 --> 00:07:36,720
they use some kind of encoding or even a

196
00:07:36,720 --> 00:07:38,759
gun zip and

197
00:07:38,759 --> 00:07:40,680
here again on the right side you can see

198
00:07:40,680 --> 00:07:42,599
that the malware communicates with the

199
00:07:42,599 --> 00:07:44,819
command control server receives a Json

200
00:07:44,819 --> 00:07:48,120
object which has some URL some offers

201
00:07:48,120 --> 00:07:51,240
and one of these offers may lead to a

202
00:07:51,240 --> 00:07:53,819
redirection chain which will finally end

203
00:07:53,819 --> 00:07:56,880
up on the landing page so this landing

204
00:07:56,880 --> 00:07:59,940
page is a page which has the button that

205
00:07:59,940 --> 00:08:01,979
I described before it's going to be

206
00:08:01,979 --> 00:08:04,500
loaded in a webview which is not going

207
00:08:04,500 --> 00:08:07,199
to be visible to the user so so far the

208
00:08:07,199 --> 00:08:09,900
process remains silent the user can see

209
00:08:09,900 --> 00:08:11,520
anything

210
00:08:11,520 --> 00:08:14,160
so now a very important uh operating

211
00:08:14,160 --> 00:08:16,080
system uh Android operating system

212
00:08:16,080 --> 00:08:19,139
component which this malware uses is an

213
00:08:19,139 --> 00:08:21,660
uh an Android OS Handler so what this

214
00:08:21,660 --> 00:08:22,860
Handler does

215
00:08:22,860 --> 00:08:27,000
is getting info about the current

216
00:08:27,000 --> 00:08:30,379
um stage of the subscription process and

217
00:08:30,379 --> 00:08:34,080
acts according to the stage so when the

218
00:08:34,080 --> 00:08:37,320
page is finished loading or when SMS is

219
00:08:37,320 --> 00:08:39,958
received the Handler is going to receive

220
00:08:39,958 --> 00:08:41,339
a message and then it's going to act

221
00:08:41,339 --> 00:08:44,820
somehow so here's an actual code which

222
00:08:44,820 --> 00:08:46,800
shows exactly that receives this message

223
00:08:46,800 --> 00:08:50,040
depending on the uh what parameter of

224
00:08:50,040 --> 00:08:51,600
this message is going to perform some

225
00:08:51,600 --> 00:08:52,920
kind of an action

226
00:08:52,920 --> 00:08:54,660
and uh

227
00:08:54,660 --> 00:08:58,140
one critical point one critical phase

228
00:08:58,140 --> 00:09:02,040
of this process is when this page the

229
00:09:02,040 --> 00:09:05,580
blending page has been loaded so what

230
00:09:05,580 --> 00:09:07,680
has to happen right now is that the user

231
00:09:07,680 --> 00:09:09,300
has to click on the subscription button

232
00:09:09,300 --> 00:09:14,300
and this is done by using JavaScript so

233
00:09:14,300 --> 00:09:16,740
the uh

234
00:09:16,740 --> 00:09:20,940
Android OS Hunter will inject code which

235
00:09:20,940 --> 00:09:22,800
is similar to this one that you see here

236
00:09:22,800 --> 00:09:25,380
it does exactly it does something like

237
00:09:25,380 --> 00:09:27,779
the following so it will scrub the page

238
00:09:27,779 --> 00:09:30,959
and search for uh Elements which are

239
00:09:30,959 --> 00:09:32,100
clickable

240
00:09:32,100 --> 00:09:33,420
and they are relevant to the

241
00:09:33,420 --> 00:09:34,620
subscription process for example they

242
00:09:34,620 --> 00:09:37,080
are tagged like uh confirm yes click

243
00:09:37,080 --> 00:09:39,240
enter subscribe

244
00:09:39,240 --> 00:09:41,160
and all these elements are going to be

245
00:09:41,160 --> 00:09:43,620
sent to a function which is called see

246
00:09:43,620 --> 00:09:45,540
that as you see there

247
00:09:45,540 --> 00:09:47,880
and this function is going to act in two

248
00:09:47,880 --> 00:09:48,959
steps

249
00:09:48,959 --> 00:09:51,480
so the first step is to call another

250
00:09:51,480 --> 00:09:53,519
function which is called jdh and this

251
00:09:53,519 --> 00:09:54,959
function will do the following we'll

252
00:09:54,959 --> 00:09:55,800
check

253
00:09:55,800 --> 00:09:59,220
if a cookie has been set if a specific

254
00:09:59,220 --> 00:10:01,860
cookie has been set so if this cookie

255
00:10:01,860 --> 00:10:03,240
cookie has been said then it's going to

256
00:10:03,240 --> 00:10:05,220
set back false

257
00:10:05,220 --> 00:10:07,140
if this cookie hasn't been said then

258
00:10:07,140 --> 00:10:08,580
it's going to set this cookie and it's

259
00:10:08,580 --> 00:10:10,500
going to set back true now what this

260
00:10:10,500 --> 00:10:12,720
cookie is doing it's actually marking

261
00:10:12,720 --> 00:10:16,500
the page so which means that we have the

262
00:10:16,500 --> 00:10:18,899
malware has already subscribed the user

263
00:10:18,899 --> 00:10:21,060
to the service the user cannot subscribe

264
00:10:21,060 --> 00:10:22,980
to the same service more than monster

265
00:10:22,980 --> 00:10:26,760
one time so ignore this page and move to

266
00:10:26,760 --> 00:10:29,100
the next next one and exactly that's

267
00:10:29,100 --> 00:10:31,200
what uh the initial function will do

268
00:10:31,200 --> 00:10:33,060
we'll either submit click or it will

269
00:10:33,060 --> 00:10:35,880
just pass the specific element and go to

270
00:10:35,880 --> 00:10:38,760
the next page the next offer

271
00:10:38,760 --> 00:10:40,080
uh

272
00:10:40,080 --> 00:10:41,519
so we have

273
00:10:41,519 --> 00:10:43,800
seen how it uh clicks now on the

274
00:10:43,800 --> 00:10:46,320
subscription button what is next next as

275
00:10:46,320 --> 00:10:48,420
I said before the server will send back

276
00:10:48,420 --> 00:10:51,000
a pin we'll send back another p and this

277
00:10:51,000 --> 00:10:52,380
OTP has to be

278
00:10:52,380 --> 00:10:54,420
raised by the user and sent back to the

279
00:10:54,420 --> 00:10:57,420
server so how the malware does that

280
00:10:57,420 --> 00:11:00,600
either using an SMS broadcast receiver

281
00:11:00,600 --> 00:11:02,880
or binding the notification listener

282
00:11:02,880 --> 00:11:03,839
service

283
00:11:03,839 --> 00:11:07,320
or using SMS content Observer now the

284
00:11:07,320 --> 00:11:08,940
logic between all these techniques is

285
00:11:08,940 --> 00:11:10,320
about the same

286
00:11:10,320 --> 00:11:13,279
so using the first technique just

287
00:11:13,279 --> 00:11:15,660
declare the required permissions in

288
00:11:15,660 --> 00:11:17,160
order to do that

289
00:11:17,160 --> 00:11:19,320
create a class which extends the

290
00:11:19,320 --> 00:11:21,779
broadcast receiver and in the receive

291
00:11:21,779 --> 00:11:23,700
callback check the body of the message

292
00:11:23,700 --> 00:11:26,399
if it contains a specific keyword then

293
00:11:26,399 --> 00:11:30,300
extract uh what is after I mean the PIN

294
00:11:30,300 --> 00:11:33,720
and submit it back to the server now the

295
00:11:33,720 --> 00:11:35,339
submission can be either in the same

296
00:11:35,339 --> 00:11:38,220
page using HTTP protocol or even using

297
00:11:38,220 --> 00:11:40,980
an SMS for example using the send SMS

298
00:11:40,980 --> 00:11:43,160
text message

299
00:11:43,160 --> 00:11:45,959
the other way is uh by extending

300
00:11:45,959 --> 00:11:48,180
notification listener service and again

301
00:11:48,180 --> 00:11:50,579
the logic is the same like I said is

302
00:11:50,579 --> 00:11:52,920
about the same but the implementation is

303
00:11:52,920 --> 00:11:55,200
different create a class which extends

304
00:11:55,200 --> 00:11:56,880
notification listener service

305
00:11:56,880 --> 00:11:59,519
and in the notification posted callback

306
00:11:59,519 --> 00:12:02,640
just check the body of the notification

307
00:12:02,640 --> 00:12:05,399
if it contains specific keyword extract

308
00:12:05,399 --> 00:12:08,459
the message and send it back to uh

309
00:12:08,459 --> 00:12:10,740
to the service provider

310
00:12:10,740 --> 00:12:13,860
finally another way is by using content

311
00:12:13,860 --> 00:12:16,140
Observer which what the Contour Observer

312
00:12:16,140 --> 00:12:19,560
does is receiving callbacks for changes

313
00:12:19,560 --> 00:12:21,180
to specific content

314
00:12:21,180 --> 00:12:23,279
what we care about what malware cares

315
00:12:23,279 --> 00:12:25,920
about here is about the SMS content so

316
00:12:25,920 --> 00:12:27,839
if some changes happen there you're

317
00:12:27,839 --> 00:12:30,180
going to get a triggered don't change

318
00:12:30,180 --> 00:12:33,540
the unchanged callback there and will

319
00:12:33,540 --> 00:12:35,579
perform exactly the same steps which is

320
00:12:35,579 --> 00:12:37,500
uh check if there is a specific keyword

321
00:12:37,500 --> 00:12:41,100
and send the pin back to the server

322
00:12:41,100 --> 00:12:43,680
uh last but not least keep everything

323
00:12:43,680 --> 00:12:45,779
silent so all this process that you saw

324
00:12:45,779 --> 00:12:48,420
so far has to be not noticeable to the

325
00:12:48,420 --> 00:12:52,320
user so since SDK 18 a an application

326
00:12:52,320 --> 00:12:54,959
which extends the notification listener

327
00:12:54,959 --> 00:12:57,899
service can cancel the notifications of

328
00:12:57,899 --> 00:13:00,600
other apps what that means what this

329
00:13:00,600 --> 00:13:03,240
means is that uh the SMS your SMS

330
00:13:03,240 --> 00:13:05,760
application can simply cancel be

331
00:13:05,760 --> 00:13:07,200
canceled notification that will be

332
00:13:07,200 --> 00:13:08,639
receiving your device can simply be

333
00:13:08,639 --> 00:13:10,500
canceled but by an application which

334
00:13:10,500 --> 00:13:14,279
extends this specific uh service

335
00:13:14,279 --> 00:13:16,380
and this can be done by using one of

336
00:13:16,380 --> 00:13:18,060
these API calls for example cancel all

337
00:13:18,060 --> 00:13:19,740
notifications to cancel all the

338
00:13:19,740 --> 00:13:21,660
notifications so a specific one using a

339
00:13:21,660 --> 00:13:24,720
specific key or another an array of

340
00:13:24,720 --> 00:13:27,180
notification using an array of keys

341
00:13:27,180 --> 00:13:30,420
another way of doing that is is by using

342
00:13:30,420 --> 00:13:32,760
the abort broadcast in the broadcast

343
00:13:32,760 --> 00:13:34,440
receiver implementation that I showed

344
00:13:34,440 --> 00:13:36,120
you before

345
00:13:36,120 --> 00:13:38,579
all right so let me summarize what we

346
00:13:38,579 --> 00:13:39,899
have so far all the steps that we have

347
00:13:39,899 --> 00:13:41,040
so far

348
00:13:41,040 --> 00:13:43,920
so we said we have a WAP building

349
00:13:43,920 --> 00:13:45,540
mechanism which can be used to enable

350
00:13:45,540 --> 00:13:46,980
the user to purchase products and

351
00:13:46,980 --> 00:13:49,620
service online and get charged directly

352
00:13:49,620 --> 00:13:52,500
to their phone bill right then we have

353
00:13:52,500 --> 00:13:54,779
the subscription process which requires

354
00:13:54,779 --> 00:13:56,940
from the user to take some steps in

355
00:13:56,940 --> 00:13:59,100
order for you to be valid

356
00:13:59,100 --> 00:14:01,079
then we have the tall throat from the

357
00:14:01,079 --> 00:14:03,420
other side malware which uh performed

358
00:14:03,420 --> 00:14:05,399
these steps in order to simulate the

359
00:14:05,399 --> 00:14:07,740
user interaction with the service and

360
00:14:07,740 --> 00:14:09,600
perform what we call a fraudulent

361
00:14:09,600 --> 00:14:10,620
subscription

362
00:14:10,620 --> 00:14:12,480
and these steps as I said before you

363
00:14:12,480 --> 00:14:13,800
include

364
00:14:13,800 --> 00:14:15,980
navigate to the web enabled website

365
00:14:15,980 --> 00:14:18,540
simulate the user clicks

366
00:14:18,540 --> 00:14:21,420
intercept the OTP and send it back to

367
00:14:21,420 --> 00:14:23,459
the server and finally keep all this

368
00:14:23,459 --> 00:14:26,160
process silent all right

369
00:14:26,160 --> 00:14:27,420
so

370
00:14:27,420 --> 00:14:29,820
you might now think that we have a

371
00:14:29,820 --> 00:14:32,519
malware which actually is uh the

372
00:14:32,519 --> 00:14:34,680
behavior very complicated it uses a lot

373
00:14:34,680 --> 00:14:37,200
of API calls a lot of permissions so it

374
00:14:37,200 --> 00:14:39,300
can't be that hard to detect this type

375
00:14:39,300 --> 00:14:41,160
of malware the behavior is very hard

376
00:14:41,160 --> 00:14:43,860
testing you can create uh

377
00:14:43,860 --> 00:14:46,260
very very specific signatures in order

378
00:14:46,260 --> 00:14:49,019
to detect it so the answer is actually

379
00:14:49,019 --> 00:14:51,300
here is that it is very hard to detect

380
00:14:51,300 --> 00:14:53,040
this type of malware and white is very

381
00:14:53,040 --> 00:14:56,760
hard to detect because it uses a lot of

382
00:14:56,760 --> 00:14:59,459
detection evasion techniques and

383
00:14:59,459 --> 00:15:01,980
um it uses for example steganography in

384
00:15:01,980 --> 00:15:05,040
order to hide the payloads in seemingly

385
00:15:05,040 --> 00:15:07,320
Banning files like JPEG files or PNG

386
00:15:07,320 --> 00:15:09,620
files or even the assets folder

387
00:15:09,620 --> 00:15:12,660
cryptography each sample has different

388
00:15:12,660 --> 00:15:15,540
key for uh let's say it's made operating

389
00:15:15,540 --> 00:15:19,860
strings obfuscation in order to evade

390
00:15:19,860 --> 00:15:22,199
the static type signatures

391
00:15:22,199 --> 00:15:25,380
Dynamic code loading simply said the

392
00:15:25,380 --> 00:15:28,019
code is not there what you saw so far is

393
00:15:28,019 --> 00:15:30,360
not in the initial APK itself it simply

394
00:15:30,360 --> 00:15:33,060
gets downloaded and executed

395
00:15:33,060 --> 00:15:36,060
and finally you have clocking so you the

396
00:15:36,060 --> 00:15:38,420
model has to make sure that's uh certain

397
00:15:38,420 --> 00:15:41,160
condition supply in order to perform the

398
00:15:41,160 --> 00:15:44,459
steps dates a Sim operator is the Sim

399
00:15:44,459 --> 00:15:46,460
operator targeted or uh

400
00:15:46,460 --> 00:15:48,120
[Music]

401
00:15:48,120 --> 00:15:50,220
does application runs in some kind of a

402
00:15:50,220 --> 00:15:53,100
VM or something so this all these in

403
00:15:53,100 --> 00:15:55,620
combinations are used for uh from the

404
00:15:55,620 --> 00:15:57,779
malware debate detection and I have a

405
00:15:57,779 --> 00:16:00,440
showcase here I have one of the latest

406
00:16:00,440 --> 00:16:02,880
uh Joker

407
00:16:02,880 --> 00:16:06,180
malware that we traced recently so this

408
00:16:06,180 --> 00:16:08,639
actually is an SMS application which was

409
00:16:08,639 --> 00:16:11,459
published in Google Play and what is the

410
00:16:11,459 --> 00:16:13,500
first step what is doing as a first step

411
00:16:13,500 --> 00:16:16,920
is just check if it's still published or

412
00:16:16,920 --> 00:16:18,839
it got published in the Google Play so

413
00:16:18,839 --> 00:16:20,760
send the next pay request to the Play

414
00:16:20,760 --> 00:16:22,860
Store see if we are published and then

415
00:16:22,860 --> 00:16:25,620
proceed to the first stage so the first

416
00:16:25,620 --> 00:16:29,040
stage is to check the assets folder for

417
00:16:29,040 --> 00:16:31,980
a specific file if this if this file is

418
00:16:31,980 --> 00:16:35,760
there so make sure that um if we find

419
00:16:35,760 --> 00:16:37,800
the file we change with 355 then we're

420
00:16:37,800 --> 00:16:40,740
going to the next step and please notice

421
00:16:40,740 --> 00:16:43,079
that in the first versions of this APK

422
00:16:43,079 --> 00:16:44,699
this file was not there it was not

423
00:16:44,699 --> 00:16:48,540
weaponized it was clean so later this

424
00:16:48,540 --> 00:16:50,160
file was added there

425
00:16:50,160 --> 00:16:52,259
and when this file

426
00:16:52,259 --> 00:16:54,480
was found

427
00:16:54,480 --> 00:16:57,360
user is in order to decrypt it the key

428
00:16:57,360 --> 00:16:59,600
was hardcoded in the Dex file

429
00:16:59,600 --> 00:17:01,920
use the screen or to decrypt the file

430
00:17:01,920 --> 00:17:04,619
and the dropped file which is going to

431
00:17:04,619 --> 00:17:05,880
be dropped actually in the data

432
00:17:05,880 --> 00:17:07,679
directory of the applications actually

433
00:17:07,679 --> 00:17:10,140
an L file it's a library it's going to

434
00:17:10,140 --> 00:17:13,559
be loaded using the system.load and the

435
00:17:13,559 --> 00:17:15,179
next step is

436
00:17:15,179 --> 00:17:18,660
to trigger a native function which is

437
00:17:18,660 --> 00:17:21,720
inside this initial payload

438
00:17:21,720 --> 00:17:24,419
now we are moving to the stage two which

439
00:17:24,419 --> 00:17:27,119
takes place on the native layer so here

440
00:17:27,119 --> 00:17:29,160
what all the strings that we have of

441
00:17:29,160 --> 00:17:32,100
course are encrypted sold actually and

442
00:17:32,100 --> 00:17:34,380
they are sold back to the initial string

443
00:17:34,380 --> 00:17:36,780
by using a key which is which derives

444
00:17:36,780 --> 00:17:38,940
from the Java side

445
00:17:38,940 --> 00:17:41,880
so decrypting the strings you can you

446
00:17:41,880 --> 00:17:44,940
retrace calls to the Dex close loader to

447
00:17:44,940 --> 00:17:47,220
the load class and actually to the name

448
00:17:47,220 --> 00:17:49,919
of the next payload which we're going to

449
00:17:49,919 --> 00:17:52,080
see in the next stage so

450
00:17:52,080 --> 00:17:54,360
when everything is there when everything

451
00:17:54,360 --> 00:17:56,940
gets decrypted the next step is to do

452
00:17:56,940 --> 00:17:58,620
the same process but from the Native

453
00:17:58,620 --> 00:18:01,260
layer now get again the assets folder

454
00:18:01,260 --> 00:18:03,360
and search for another payload now this

455
00:18:03,360 --> 00:18:05,640
payload is the one I show here which

456
00:18:05,640 --> 00:18:08,100
ends with three zero zero and if this

457
00:18:08,100 --> 00:18:12,360
payload is there it in order to get a

458
00:18:12,360 --> 00:18:16,200
text file so whereas stage two we decide

459
00:18:16,200 --> 00:18:18,480
we extort the file and now we have a

460
00:18:18,480 --> 00:18:20,460
text file so this Dex file is going to

461
00:18:20,460 --> 00:18:22,260
be loaded using the Dex was loader and

462
00:18:22,260 --> 00:18:25,020
the load class with a specific class as

463
00:18:25,020 --> 00:18:27,299
a parameter and finally perform a call

464
00:18:27,299 --> 00:18:28,980
jni call

465
00:18:28,980 --> 00:18:31,440
to the call static void method function

466
00:18:31,440 --> 00:18:34,740
in order to call a function which is on

467
00:18:34,740 --> 00:18:36,299
the Java side

468
00:18:36,299 --> 00:18:38,940
so now we move again to the Java side we

469
00:18:38,940 --> 00:18:40,679
have the third stage which is the Dex

470
00:18:40,679 --> 00:18:42,840
file which is I talked to you about

471
00:18:42,840 --> 00:18:45,660
before so now this Dex file will

472
00:18:45,660 --> 00:18:46,980
communicate with the command control

473
00:18:46,980 --> 00:18:49,500
server this command control server is

474
00:18:49,500 --> 00:18:52,500
hard coded as you see in the file itself

475
00:18:52,500 --> 00:18:54,840
so it will communicate there it will

476
00:18:54,840 --> 00:18:57,120
download another file which file is a

477
00:18:57,120 --> 00:18:58,320
jar file

478
00:18:58,320 --> 00:19:02,059
and it will load this file by using both

479
00:19:02,059 --> 00:19:05,880
Java Reflection actually and uh and the

480
00:19:05,880 --> 00:19:08,340
text class loader in order to load it

481
00:19:08,340 --> 00:19:11,640
and finally as the last step this file

482
00:19:11,640 --> 00:19:14,220
will check if the same operator is

483
00:19:14,220 --> 00:19:17,940
compatible is targeted and

484
00:19:17,940 --> 00:19:20,460
it starts the steps that I showed you in

485
00:19:20,460 --> 00:19:24,059
the first first slides

486
00:19:24,539 --> 00:19:27,840
all right so to summarize this phase

487
00:19:27,840 --> 00:19:29,580
what we have we have actually the

488
00:19:29,580 --> 00:19:31,919
initial APK which is an SMS application

489
00:19:31,919 --> 00:19:34,440
that you might even download from Google

490
00:19:34,440 --> 00:19:38,520
Play It Was thousands of styles of uh

491
00:19:38,520 --> 00:19:40,919
regarding this app and in the first

492
00:19:40,919 --> 00:19:44,340
stage is going simply to check if it is

493
00:19:44,340 --> 00:19:45,660
published and then it's going to take

494
00:19:45,660 --> 00:19:49,140
take testified from the assets directory

495
00:19:49,140 --> 00:19:53,220
this file is an L file and then

496
00:19:53,220 --> 00:19:54,960
uh it's going to proceed to the second

497
00:19:54,960 --> 00:19:57,419
stage which is Dell file that is going

498
00:19:57,419 --> 00:20:00,179
to check again the assets folder create

499
00:20:00,179 --> 00:20:02,280
another file which is a DEX file

500
00:20:02,280 --> 00:20:05,340
this Dex file will communicate with the

501
00:20:05,340 --> 00:20:06,780
command control server and download the

502
00:20:06,780 --> 00:20:09,600
jar file a digital file will do the

503
00:20:09,600 --> 00:20:11,520
final test which is check if the Sim

504
00:20:11,520 --> 00:20:14,400
operators is targeted and do the actions

505
00:20:14,400 --> 00:20:16,380
that we should show you before

506
00:20:16,380 --> 00:20:19,500
all right now that we have a full

507
00:20:19,500 --> 00:20:23,280
overview of the how it evades detection

508
00:20:23,280 --> 00:20:26,700
how it performs this Dolph Road

509
00:20:26,700 --> 00:20:28,200
uh

510
00:20:28,200 --> 00:20:31,500
psych now let's see how it gets

511
00:20:31,500 --> 00:20:33,539
published in the Google place in the

512
00:20:33,539 --> 00:20:35,460
first place so

513
00:20:35,460 --> 00:20:37,860
what the malware developer do malware

514
00:20:37,860 --> 00:20:40,020
developers do is actually using what we

515
00:20:40,020 --> 00:20:41,820
call a penetration strategy you want to

516
00:20:41,820 --> 00:20:44,340
penetrate the Google play the play store

517
00:20:44,340 --> 00:20:47,280
in order to be able to publish these

518
00:20:47,280 --> 00:20:50,640
apps and get published as more as they

519
00:20:50,640 --> 00:20:53,280
can so what they do is use open source

520
00:20:53,280 --> 00:20:56,220
application that they belong to a very

521
00:20:56,220 --> 00:20:58,500
very popular uh category for example

522
00:20:58,500 --> 00:21:01,980
camera apps SMS apps Beauty editors

523
00:21:01,980 --> 00:21:03,720
whatever you think

524
00:21:03,720 --> 00:21:07,260
apps in general that can be can take a

525
00:21:07,260 --> 00:21:09,480
lot of installs in very short time

526
00:21:09,480 --> 00:21:11,039
and in the beginning this option

527
00:21:11,039 --> 00:21:15,120
uploaded are published and weaponized so

528
00:21:15,120 --> 00:21:17,419
wait for this apps to get a specific

529
00:21:17,419 --> 00:21:21,480
threshold amount of installs and then

530
00:21:21,480 --> 00:21:23,820
uh publish and updates create an update

531
00:21:23,820 --> 00:21:25,500
which will contain the actual payload

532
00:21:25,500 --> 00:21:28,159
the actual starting phase so

533
00:21:28,159 --> 00:21:30,900
the last actually step here as I

534
00:21:30,900 --> 00:21:33,960
mentioned here actually is that keep the

535
00:21:33,960 --> 00:21:36,299
process keep the APK as clean as you can

536
00:21:36,299 --> 00:21:38,039
right so

537
00:21:38,039 --> 00:21:41,640
as you saw just this an asset file in

538
00:21:41,640 --> 00:21:43,320
order to start everything and the rest

539
00:21:43,320 --> 00:21:46,380
can be downloaded and executed

540
00:21:46,380 --> 00:21:50,159
uh thankfully that this type of strategy

541
00:21:50,159 --> 00:21:52,080
this penetration strategy that I show

542
00:21:52,080 --> 00:21:53,820
you creates what we call secondary

543
00:21:53,820 --> 00:21:56,700
signals and what we call what what we

544
00:21:56,700 --> 00:21:59,880
what are those secondary signals so you

545
00:21:59,880 --> 00:22:01,740
might see applications which

546
00:22:01,740 --> 00:22:03,840
have excessive permissions for what

547
00:22:03,840 --> 00:22:05,400
actually they're doing so you have a

548
00:22:05,400 --> 00:22:07,919
camera app which requests you for an SMS

549
00:22:07,919 --> 00:22:11,460
uh receiver or to read your SMS or to

550
00:22:11,460 --> 00:22:13,140
bind the notification listener in

551
00:22:13,140 --> 00:22:15,299
general you have applications that what

552
00:22:15,299 --> 00:22:16,860
they request and doesn't make sense with

553
00:22:16,860 --> 00:22:19,799
with their functionality right so the

554
00:22:19,799 --> 00:22:22,260
other thing is that they have common

555
00:22:22,260 --> 00:22:24,419
user interface characteristics for

556
00:22:24,419 --> 00:22:26,100
example they have

557
00:22:26,100 --> 00:22:28,460
common icons

558
00:22:28,460 --> 00:22:32,580
uh policy Pages buttons similar packets

559
00:22:32,580 --> 00:22:33,419
names

560
00:22:33,419 --> 00:22:36,480
developer profiles and all this due to

561
00:22:36,480 --> 00:22:40,919
the fact that these apps are mass are uh

562
00:22:40,919 --> 00:22:44,280
massively Pro massive products so there

563
00:22:44,280 --> 00:22:47,100
is a an automated process which creates

564
00:22:47,100 --> 00:22:50,580
this type of uh of apps so you can

565
00:22:50,580 --> 00:22:52,440
understand that they have similar

566
00:22:52,440 --> 00:22:54,299
characteristics a lot of similarities

567
00:22:54,299 --> 00:22:57,000
another thing of course is the user

568
00:22:57,000 --> 00:23:00,179
comments although due to the fact that

569
00:23:00,179 --> 00:23:04,200
this malware is like I said before you

570
00:23:04,200 --> 00:23:07,380
it's an almost not perceivable from the

571
00:23:07,380 --> 00:23:09,960
user side you can't you can't rely on

572
00:23:09,960 --> 00:23:13,679
the comments in order to uh to to flag

573
00:23:13,679 --> 00:23:15,780
this secondary signals

574
00:23:15,780 --> 00:23:18,360
all right now let's see what chances we

575
00:23:18,360 --> 00:23:20,460
have from a detection side from the

576
00:23:20,460 --> 00:23:22,320
detection point and when we move to the

577
00:23:22,320 --> 00:23:24,059
client side let's say the application

578
00:23:24,059 --> 00:23:25,980
that that you have installed in your

579
00:23:25,980 --> 00:23:28,080
device I'll be honest with you we don't

580
00:23:28,080 --> 00:23:30,539
have many options here

581
00:23:30,539 --> 00:23:31,860
and this is due to the fact that the

582
00:23:31,860 --> 00:23:33,780
Android operating system uh imposes

583
00:23:33,780 --> 00:23:36,299
serious restrictions on what one

584
00:23:36,299 --> 00:23:38,460
application can retrieve for another

585
00:23:38,460 --> 00:23:41,820
application each app is uh trapped in

586
00:23:41,820 --> 00:23:44,340
its own sandbox

587
00:23:44,340 --> 00:23:46,200
and the information that can't retrieved

588
00:23:46,200 --> 00:23:47,280
for another

589
00:23:47,280 --> 00:23:50,460
up is a let's say control string

590
00:23:50,460 --> 00:23:51,840
strictly control from the operating

591
00:23:51,840 --> 00:23:54,299
system itself so you can't do much here

592
00:23:54,299 --> 00:23:57,120
what you can do is a simple static

593
00:23:57,120 --> 00:23:59,280
scanner again which is based on uh

594
00:23:59,280 --> 00:24:01,140
signatures you're going to retrieve from

595
00:24:01,140 --> 00:24:04,559
the cloud or uh create use some kind of

596
00:24:04,559 --> 00:24:07,500
a VPN in order to monitor the HTTP HBS

597
00:24:07,500 --> 00:24:10,260
communication and maintain some kind of

598
00:24:10,260 --> 00:24:11,700
a blacklist of command and control

599
00:24:11,700 --> 00:24:14,100
servers and Trigger some kind of an

600
00:24:14,100 --> 00:24:17,340
alarm when the device communicates with

601
00:24:17,340 --> 00:24:19,340
such a server

602
00:24:19,340 --> 00:24:22,320
when we move though to the cloud side

603
00:24:22,320 --> 00:24:24,240
there are a lot of things that we can do

604
00:24:24,240 --> 00:24:26,400
there and um

605
00:24:26,400 --> 00:24:29,580
what we are trying to achieve is have

606
00:24:29,580 --> 00:24:32,460
the best results using the less

607
00:24:32,460 --> 00:24:34,860
resources that we can so

608
00:24:34,860 --> 00:24:37,380
we this is a blueprint actually this is

609
00:24:37,380 --> 00:24:40,919
a raw blueprint of uh of what we

610
00:24:40,919 --> 00:24:42,480
suggested um

611
00:24:42,480 --> 00:24:45,960
it is a multi-phase process which starts

612
00:24:45,960 --> 00:24:48,480
with a steady feed so this feed imagine

613
00:24:48,480 --> 00:24:51,480
that we have um apps we have a pool of

614
00:24:51,480 --> 00:24:54,240
apps which can be fed stated from the

615
00:24:54,240 --> 00:24:57,000
Google Play store or off Market or even

616
00:24:57,000 --> 00:25:00,600
from the users or researchers and during

617
00:25:00,600 --> 00:25:02,700
the first stage during the first

618
00:25:02,700 --> 00:25:04,440
filtering these apps are going to be

619
00:25:04,440 --> 00:25:06,179
filtered for the secondary signals I'll

620
00:25:06,179 --> 00:25:07,740
talk to you about before

621
00:25:07,740 --> 00:25:11,059
so check for similarities for um

622
00:25:11,059 --> 00:25:14,100
uh common icons for Access permissions

623
00:25:14,100 --> 00:25:16,500
and this this type of things and the

624
00:25:16,500 --> 00:25:19,200
result is going to be either

625
00:25:19,200 --> 00:25:21,419
the app doesn't have anything doesn't

626
00:25:21,419 --> 00:25:22,980
seem to have any kind of this type of

627
00:25:22,980 --> 00:25:26,520
signal or uh it is suspicious it has

628
00:25:26,520 --> 00:25:30,059
some signals there is a specific uh but

629
00:25:30,059 --> 00:25:32,279
it didn't reach a specific threshold so

630
00:25:32,279 --> 00:25:34,080
it's going to Discount after the next X

631
00:25:34,080 --> 00:25:37,020
amount of time and finally

632
00:25:37,020 --> 00:25:40,140
suppose that it has a specific threshold

633
00:25:40,140 --> 00:25:42,299
of signals then move to the next stage

634
00:25:42,299 --> 00:25:45,120
now the next stage is a classic let's

635
00:25:45,120 --> 00:25:47,220
say a traditional static scan so what we

636
00:25:47,220 --> 00:25:50,460
do is scan uh the Manifest scan for

637
00:25:50,460 --> 00:25:52,559
specific API calls or specific

638
00:25:52,559 --> 00:25:54,600
permissions or specific strings and

639
00:25:54,600 --> 00:25:56,220
again the result is going to be as

640
00:25:56,220 --> 00:25:57,299
before

641
00:25:57,299 --> 00:25:59,760
nothing due to the fact that this

642
00:25:59,760 --> 00:26:01,380
missing critical

643
00:26:01,380 --> 00:26:04,740
um a critical let's say API call or some

644
00:26:04,740 --> 00:26:06,059
kind of a permission

645
00:26:06,059 --> 00:26:07,760
that's not there

646
00:26:07,760 --> 00:26:11,340
and uh or it has some so it's going to

647
00:26:11,340 --> 00:26:13,919
be discount or finally it reaches at our

648
00:26:13,919 --> 00:26:16,440
threshold and it's going to move to the

649
00:26:16,440 --> 00:26:18,900
next stage which is the most demanding

650
00:26:18,900 --> 00:26:23,539
from let's say a resources point of view

651
00:26:23,539 --> 00:26:25,260
so

652
00:26:25,260 --> 00:26:28,320
what we're trying to achieve here is to

653
00:26:28,320 --> 00:26:31,799
trigger as much functionality as we can

654
00:26:31,799 --> 00:26:33,840
uh and

655
00:26:33,840 --> 00:26:36,000
um so we want to expose this

656
00:26:36,000 --> 00:26:37,980
functionality as much as we can we might

657
00:26:37,980 --> 00:26:40,799
we're trying to let's say interact in a

658
00:26:40,799 --> 00:26:43,799
clever way with the malware and at the

659
00:26:43,799 --> 00:26:46,320
same time observe

660
00:26:46,320 --> 00:26:49,559
some things so what observe observe the

661
00:26:49,559 --> 00:26:52,620
https communication of the malware use

662
00:26:52,620 --> 00:26:54,779
binary instrumentation in order to log

663
00:26:54,779 --> 00:26:57,240
uh the API calls or even under set this

664
00:26:57,240 --> 00:26:59,220
API calls remember I told you that

665
00:26:59,220 --> 00:27:01,679
search for specific Sim operators so try

666
00:27:01,679 --> 00:27:02,419
to

667
00:27:02,419 --> 00:27:05,400
change the return value of this specific

668
00:27:05,400 --> 00:27:06,960
API calls

669
00:27:06,960 --> 00:27:08,460
and

670
00:27:08,460 --> 00:27:11,039
um see how it reacts or perform some

671
00:27:11,039 --> 00:27:14,460
type of uh memory dump dump the Dex

672
00:27:14,460 --> 00:27:16,320
files which might be loaded

673
00:27:16,320 --> 00:27:17,520
uh

674
00:27:17,520 --> 00:27:19,200
uh this actually can be used in order

675
00:27:19,200 --> 00:27:21,480
also to uh

676
00:27:21,480 --> 00:27:23,460
to bypass some type of protection for

677
00:27:23,460 --> 00:27:26,039
example Packers or even in some cases

678
00:27:26,039 --> 00:27:27,419
encryption

679
00:27:27,419 --> 00:27:30,120
so check for uh drops files in the data

680
00:27:30,120 --> 00:27:32,340
directory if something has been

681
00:27:32,340 --> 00:27:34,740
downloaded or has has been decrypted and

682
00:27:34,740 --> 00:27:36,299
dropped there

683
00:27:36,299 --> 00:27:39,720
take this file and finally trace the jni

684
00:27:39,720 --> 00:27:42,120
calls and of course dump the memory of

685
00:27:42,120 --> 00:27:45,179
the Native space of the app and the

686
00:27:45,179 --> 00:27:47,220
final result of this the final let's say

687
00:27:47,220 --> 00:27:49,200
product of all these processes of course

688
00:27:49,200 --> 00:27:51,120
to create signatures now these

689
00:27:51,120 --> 00:27:52,320
signatures might be behavioral

690
00:27:52,320 --> 00:27:54,840
signatures which are based on which are

691
00:27:54,840 --> 00:27:57,720
more General and based on uh let's say

692
00:27:57,720 --> 00:27:59,520
uh

693
00:27:59,520 --> 00:28:02,279
API calls or permissions that I said

694
00:28:02,279 --> 00:28:03,299
before

695
00:28:03,299 --> 00:28:07,140
can be more specific and enrich our

696
00:28:07,140 --> 00:28:08,640
database in which our signature

697
00:28:08,640 --> 00:28:11,940
signature database in order to be able

698
00:28:11,940 --> 00:28:16,320
to detect this uh malware in the early

699
00:28:16,320 --> 00:28:19,260
stages earlier stages

700
00:28:19,260 --> 00:28:24,120
so uh now uh I would say like a final

701
00:28:24,120 --> 00:28:26,640
thought in regards to this type of

702
00:28:26,640 --> 00:28:30,299
malware is prevention how what we mean

703
00:28:30,299 --> 00:28:31,919
by prevention so

704
00:28:31,919 --> 00:28:35,220
uh why does this have to be published in

705
00:28:35,220 --> 00:28:37,200
the first place in Google Play Why an

706
00:28:37,200 --> 00:28:40,320
app for example has to be enough camera

707
00:28:40,320 --> 00:28:43,020
app for example or a beauty editor needs

708
00:28:43,020 --> 00:28:45,659
this type of uh

709
00:28:45,659 --> 00:28:48,179
permissions and why Google Play itself

710
00:28:48,179 --> 00:28:51,299
allows the this application to use this

711
00:28:51,299 --> 00:28:52,919
type of permissions to get published in

712
00:28:52,919 --> 00:28:55,440
Google Play so at this point actually

713
00:28:55,440 --> 00:28:59,039
Google make uh shoot steps and students

714
00:28:59,039 --> 00:29:02,460
uh November 3rd 2021

715
00:29:02,460 --> 00:29:04,919
the developer needs to complete what we

716
00:29:04,919 --> 00:29:06,900
call a permission declaration form so if

717
00:29:06,900 --> 00:29:09,720
your application is using some high risk

718
00:29:09,720 --> 00:29:11,880
type of permissions or permissions that

719
00:29:11,880 --> 00:29:14,159
they are using their

720
00:29:14,159 --> 00:29:17,820
might be used in order to uh fetch the

721
00:29:17,820 --> 00:29:19,919
user's private for info

722
00:29:19,919 --> 00:29:23,220
so the developer has to to complete this

723
00:29:23,220 --> 00:29:25,039
declaration form

724
00:29:25,039 --> 00:29:28,860
despite that we haven't seen so far what

725
00:29:28,860 --> 00:29:32,880
uh I mean we haven't seen any move when

726
00:29:32,880 --> 00:29:34,679
it comes to notification service that I

727
00:29:34,679 --> 00:29:36,480
talked to you about before and actually

728
00:29:36,480 --> 00:29:37,580
is the one

729
00:29:37,580 --> 00:29:40,980
that remains right now in the one that

730
00:29:40,980 --> 00:29:44,340
we expect from Google to take action in

731
00:29:44,340 --> 00:29:46,380
the future

732
00:29:46,380 --> 00:29:51,240
yeah and uh yeah this was the last one

733
00:29:51,240 --> 00:29:53,880
if there are any questions that uh

734
00:29:53,880 --> 00:29:56,659
you want to ask

735
00:29:59,460 --> 00:30:02,880
does anybody have uh any question

736
00:30:02,880 --> 00:30:06,200
at this time

737
00:30:10,860 --> 00:30:12,799
up here

738
00:30:12,799 --> 00:30:15,059
Demetrius will be around and you'll be

739
00:30:15,059 --> 00:30:19,140
able to uh have access to presentation

740
00:30:19,140 --> 00:30:21,120
on the slides into your course on the

741
00:30:21,120 --> 00:30:25,260
activity website so for now dimitrios

742
00:30:25,260 --> 00:30:28,279
thank you thank you very much

743
00:30:29,290 --> 00:30:33,119
[Applause]

