1
00:00:00,299 --> 00:00:04,140
uh we have the final presentation of

2
00:00:04,140 --> 00:00:07,680
day one uh and I'll pass you straight

3
00:00:07,680 --> 00:00:12,240
across to Gregor's thoric

4
00:00:12,240 --> 00:00:14,299
thank you very much

5
00:00:14,299 --> 00:00:17,640
as you already know my name is Gregor or

6
00:00:17,640 --> 00:00:20,820
Greg you prefer I used to dig deeper and

7
00:00:20,820 --> 00:00:23,400
deeper into Windows internals this is

8
00:00:23,400 --> 00:00:26,580
what I do because I simply love it I'm

9
00:00:26,580 --> 00:00:28,140
also doing this for work and that

10
00:00:28,140 --> 00:00:29,519
someday

11
00:00:29,519 --> 00:00:31,579
I was asked about

12
00:00:31,579 --> 00:00:34,860
protecting quite huge environment with

13
00:00:34,860 --> 00:00:37,920
applocker so I started to dig deeper and

14
00:00:37,920 --> 00:00:41,160
this session is actually about things I

15
00:00:41,160 --> 00:00:44,180
have found when digging deeper into the

16
00:00:44,180 --> 00:00:46,460
app Locker

17
00:00:46,460 --> 00:00:49,620
very briefly about the agenda so what I

18
00:00:49,620 --> 00:00:51,600
want to tell you what I want to show you

19
00:00:51,600 --> 00:00:53,940
is not only about the cache however this

20
00:00:53,940 --> 00:00:55,739
is the most important and I believe most

21
00:00:55,739 --> 00:00:59,280
interesting part of the session but also

22
00:00:59,280 --> 00:01:02,399
about some other things including some

23
00:01:02,399 --> 00:01:04,920
quick introduction about the applocker

24
00:01:04,920 --> 00:01:07,860
about the idea and so on so when it

25
00:01:07,860 --> 00:01:11,220
comes to a blocker is one of three

26
00:01:11,220 --> 00:01:14,460
Microsoft approaches to application-wide

27
00:01:14,460 --> 00:01:17,820
listing application white listing is a

28
00:01:17,820 --> 00:01:20,520
change the Paradigm of protecting your

29
00:01:20,520 --> 00:01:24,780
PCS because in most cases when we want

30
00:01:24,780 --> 00:01:27,299
to protect our PCS from

31
00:01:27,299 --> 00:01:30,119
malicious applications we are using kind

32
00:01:30,119 --> 00:01:32,340
of blacklisting for example antivirus or

33
00:01:32,340 --> 00:01:35,540
anti-malware software so if the software

34
00:01:35,540 --> 00:01:39,840
knows some executable file is bad or

35
00:01:39,840 --> 00:01:42,420
simply saying unwanted it will not allow

36
00:01:42,420 --> 00:01:44,280
it to run this is the blacklisting

37
00:01:44,280 --> 00:01:46,640
approach but if someone compiles

38
00:01:46,640 --> 00:01:51,180
modifies changes whatever does and

39
00:01:51,180 --> 00:01:54,060
application is obviously malicious but

40
00:01:54,060 --> 00:01:56,340
not recognized by your antivirus it will

41
00:01:56,340 --> 00:01:57,960
be allowed to run because it's not

42
00:01:57,960 --> 00:02:01,560
recognized a white listing changes the

43
00:02:01,560 --> 00:02:04,439
approach to the opposite one so only

44
00:02:04,439 --> 00:02:08,098
allowed applications are allowed to run

45
00:02:08,098 --> 00:02:12,000
only known applications can run within

46
00:02:12,000 --> 00:02:14,280
the environment making the management

47
00:02:14,280 --> 00:02:16,860
quite harder because we have to

48
00:02:16,860 --> 00:02:19,080
whitelist every single application we

49
00:02:19,080 --> 00:02:20,879
expect within the environment at the

50
00:02:20,879 --> 00:02:21,800
same time

51
00:02:21,800 --> 00:02:24,560
improving the protection greatly because

52
00:02:24,560 --> 00:02:28,620
if some new application which we do not

53
00:02:28,620 --> 00:02:31,319
know appears within the environment it

54
00:02:31,319 --> 00:02:33,900
will simply not run so nothing Mal

55
00:02:33,900 --> 00:02:35,060
issues can

56
00:02:35,060 --> 00:02:39,060
uh be launched by malicious or just

57
00:02:39,060 --> 00:02:43,739
unaware user as I said Microsoft had had

58
00:02:43,739 --> 00:02:46,260
three different approaches to the white

59
00:02:46,260 --> 00:02:49,379
listing topic the first one appeared in

60
00:02:49,379 --> 00:02:52,800
the Windows XP it was a SRP software

61
00:02:52,800 --> 00:02:54,660
restriction policies software

62
00:02:54,660 --> 00:02:57,599
restriction policies was enforced by the

63
00:02:57,599 --> 00:03:00,000
Explorer process and the Explorer

64
00:03:00,000 --> 00:03:03,180
process is owned by the user logging

65
00:03:03,180 --> 00:03:05,220
onto the workstation so it effectively

66
00:03:05,220 --> 00:03:08,160
means a user has a full control over the

67
00:03:08,160 --> 00:03:10,500
process trying to control a user making

68
00:03:10,500 --> 00:03:13,200
the solution not that

69
00:03:13,200 --> 00:03:15,300
successful

70
00:03:15,300 --> 00:03:17,640
um one of the best known solution for

71
00:03:17,640 --> 00:03:19,920
disabling SRP software resection

72
00:03:19,920 --> 00:03:22,560
policies was an application called the

73
00:03:22,560 --> 00:03:25,319
GP disabled and the application GP

74
00:03:25,319 --> 00:03:27,300
disabled was written by Mark russinovich

75
00:03:27,300 --> 00:03:28,860
and magically disappeared from the

76
00:03:28,860 --> 00:03:30,420
internet after microsoma with Droid

77
00:03:30,420 --> 00:03:33,480
Microsoft in Windows Vista it was

78
00:03:33,480 --> 00:03:35,879
slightly changed because in Windows

79
00:03:35,879 --> 00:03:40,200
Vista if you dig deeper to newer version

80
00:03:40,200 --> 00:03:42,900
of Windows you will see something under

81
00:03:42,900 --> 00:03:46,080
registry keys and so on called SRP

82
00:03:46,080 --> 00:03:48,599
version 2. from the marketing

83
00:03:48,599 --> 00:03:49,920
perspective from the official

84
00:03:49,920 --> 00:03:52,680
documentation perspective SRP version 2

85
00:03:52,680 --> 00:03:56,879
is a blocker a blocker consists of

86
00:03:56,879 --> 00:03:58,860
couple of components I will cover them

87
00:03:58,860 --> 00:04:00,200
briefly in a moment

88
00:04:00,200 --> 00:04:02,879
in the meantime I will mention the third

89
00:04:02,879 --> 00:04:06,540
approach Microsoft made it is wdac

90
00:04:06,540 --> 00:04:08,819
Windows Defender application control

91
00:04:08,819 --> 00:04:11,239
Windows Defender application control

92
00:04:11,239 --> 00:04:13,980
relies on the deepest level of the

93
00:04:13,980 --> 00:04:15,599
protection I would say including

94
00:04:15,599 --> 00:04:17,820
hardware-based protection against

95
00:04:17,820 --> 00:04:21,959
malicious applications and

96
00:04:22,139 --> 00:04:24,720
Microsoft is trying to support in

97
00:04:24,720 --> 00:04:27,360
parallel applocker and wdac for some

98
00:04:27,360 --> 00:04:29,820
scenarios applocker is better for

99
00:04:29,820 --> 00:04:32,759
example a blocker is user aware which

100
00:04:32,759 --> 00:04:34,560
means I can allow some stuff to be run

101
00:04:34,560 --> 00:04:37,080
by a special group members and do not

102
00:04:37,080 --> 00:04:40,380
allow the same stuff to run if the user

103
00:04:40,380 --> 00:04:41,600
does not

104
00:04:41,600 --> 00:04:45,540
belong to this group for WDC it is

105
00:04:45,540 --> 00:04:46,979
absolutely impossible if something is

106
00:04:46,979 --> 00:04:48,960
not while listed it will never run on

107
00:04:48,960 --> 00:04:51,120
this particular machine there are some

108
00:04:51,120 --> 00:04:53,220
tables comparing side to side on

109
00:04:53,220 --> 00:04:56,400
Microsoft website those two solutions so

110
00:04:56,400 --> 00:04:58,860
you can easily compare them and find

111
00:04:58,860 --> 00:05:01,860
which one is better for you in my

112
00:05:01,860 --> 00:05:05,180
opinion WDC is way harder to be managed

113
00:05:05,180 --> 00:05:06,860
wdac

114
00:05:06,860 --> 00:05:09,900
provides stricter protection I would use

115
00:05:09,900 --> 00:05:13,919
WDC for some devices not being actively

116
00:05:13,919 --> 00:05:16,560
changed over time or at least not so

117
00:05:16,560 --> 00:05:19,740
often for example like ATM kiosks etc

118
00:05:19,740 --> 00:05:24,479
etc some point of sale sales Windows

119
00:05:24,479 --> 00:05:27,240
devices Etc when it comes to applocker

120
00:05:27,240 --> 00:05:29,039
we have couple of components within the

121
00:05:29,039 --> 00:05:31,919
solution to briefly end with the theory

122
00:05:31,919 --> 00:05:35,460
so we have nice graphical user interface

123
00:05:35,460 --> 00:05:37,320
for the management and we have

124
00:05:37,320 --> 00:05:38,880
Powershell command let's

125
00:05:38,880 --> 00:05:43,919
um the thing being created within the

126
00:05:43,919 --> 00:05:43,930
um

127
00:05:43,930 --> 00:05:45,300
[Music]

128
00:05:45,300 --> 00:05:47,759
a blocker management is translated to a

129
00:05:47,759 --> 00:05:50,180
kind of a database which is in turn

130
00:05:50,180 --> 00:05:52,800
translated by a special Windows Service

131
00:05:52,800 --> 00:05:56,340
app ibsbc to the version being

132
00:05:56,340 --> 00:05:58,259
acceptable by the kernel driver and the

133
00:05:58,259 --> 00:06:00,680
kernel driver is responsible for

134
00:06:00,680 --> 00:06:04,680
enforcing application or existing so as

135
00:06:04,680 --> 00:06:06,780
it is Kernel component it cannot be

136
00:06:06,780 --> 00:06:10,039
easily manipulated by a user not having

137
00:06:10,039 --> 00:06:12,360
administrative permissions of course if

138
00:06:12,360 --> 00:06:14,639
we have administrative permissions for

139
00:06:14,639 --> 00:06:17,840
any of those Solutions we can

140
00:06:17,840 --> 00:06:22,319
simply if not bypass them we can disable

141
00:06:22,319 --> 00:06:24,660
them because it is what is allowed for

142
00:06:24,660 --> 00:06:26,699
administrators so it will not protect

143
00:06:26,699 --> 00:06:28,100
you from

144
00:06:28,100 --> 00:06:30,900
someone being already an administrator

145
00:06:30,900 --> 00:06:33,660
maybe it will protect from a stupid

146
00:06:33,660 --> 00:06:36,300
administrator doing

147
00:06:36,300 --> 00:06:39,900
things which shouldn't be done but at

148
00:06:39,900 --> 00:06:42,600
the same time if an admin wants to

149
00:06:42,600 --> 00:06:44,639
disable protection it has such

150
00:06:44,639 --> 00:06:47,580
possibility for SRP for app ID I mean a

151
00:06:47,580 --> 00:06:50,340
blocker and for wdac

152
00:06:50,340 --> 00:06:53,460
if you do not trust your admin I'm

153
00:06:53,460 --> 00:06:56,280
always saying it means you should look

154
00:06:56,280 --> 00:06:58,860
at different operating system not on the

155
00:06:58,860 --> 00:07:01,199
Windows one because Windows itself

156
00:07:01,199 --> 00:07:04,500
cannot effectively defend from someone

157
00:07:04,500 --> 00:07:06,360
being already an app

158
00:07:06,360 --> 00:07:07,819
okay

159
00:07:07,819 --> 00:07:11,160
how we can write this application how we

160
00:07:11,160 --> 00:07:13,680
can show uh how we can tell to the

161
00:07:13,680 --> 00:07:15,660
solution something is allowed and

162
00:07:15,660 --> 00:07:19,800
something is not allowed in applocker I

163
00:07:19,800 --> 00:07:22,039
will demonstrate it in a moment we have

164
00:07:22,039 --> 00:07:25,979
three ways of doing this the first one

165
00:07:25,979 --> 00:07:29,340
is to specify a path to a file so if

166
00:07:29,340 --> 00:07:31,319
something has a particular path C

167
00:07:31,319 --> 00:07:34,380
program file something something.exe it

168
00:07:34,380 --> 00:07:36,720
means it is allowed if the perfect

169
00:07:36,720 --> 00:07:39,060
different this rule does not match and

170
00:07:39,060 --> 00:07:42,479
other rule must allow us to run this

171
00:07:42,479 --> 00:07:43,979
particular piece of software if you want

172
00:07:43,979 --> 00:07:44,819
it

173
00:07:44,819 --> 00:07:48,960
running another approach path is quite

174
00:07:48,960 --> 00:07:50,819
simple but at the same time if someone

175
00:07:50,819 --> 00:07:54,419
can manipulate the drive replacing the

176
00:07:54,419 --> 00:07:56,280
legitimate executable file with

177
00:07:56,280 --> 00:07:58,680
something something malicious it is

178
00:07:58,680 --> 00:08:01,080
malicious Pizza software will be will be

179
00:08:01,080 --> 00:08:03,780
allowed to run because path matches the

180
00:08:03,780 --> 00:08:08,039
row and the second approach is based on

181
00:08:08,039 --> 00:08:11,160
hashes so the hash of executable file is

182
00:08:11,160 --> 00:08:14,060
being calculated and if hash matches

183
00:08:14,060 --> 00:08:17,099
then application is allowed to run if

184
00:08:17,099 --> 00:08:19,080
hash does not match application is not

185
00:08:19,080 --> 00:08:20,240
allowed to run

186
00:08:20,240 --> 00:08:24,000
this way is definitely the most secure

187
00:08:24,000 --> 00:08:27,660
one because every single bit changed

188
00:08:27,660 --> 00:08:29,000
within the

189
00:08:29,000 --> 00:08:32,219
executable file will mean this

190
00:08:32,219 --> 00:08:33,719
application is not allowed to run

191
00:08:33,719 --> 00:08:36,120
anymore but at the same time a

192
00:08:36,120 --> 00:08:39,140
management will be a nightmare because

193
00:08:39,140 --> 00:08:41,399
try to imagine what will happen after

194
00:08:41,399 --> 00:08:44,580
patches after patching Tuesday if half

195
00:08:44,580 --> 00:08:47,519
of your executable files change so their

196
00:08:47,519 --> 00:08:51,140
hashes changed as well and you have to

197
00:08:51,140 --> 00:08:53,940
calculate new hashes and update your

198
00:08:53,940 --> 00:08:57,240
white listing solution to to reflect

199
00:08:57,240 --> 00:09:00,480
those changes the third one one relies

200
00:09:00,480 --> 00:09:02,940
on digital signatures okay let's go for

201
00:09:02,940 --> 00:09:05,399
some

202
00:09:05,399 --> 00:09:08,040
real thing so I will launch the

203
00:09:08,040 --> 00:09:09,480
management it is done through local

204
00:09:09,480 --> 00:09:10,980
security policies or through group

205
00:09:10,980 --> 00:09:13,680
policies here you can see the console

206
00:09:13,680 --> 00:09:17,459
within the console I have predefined

207
00:09:17,459 --> 00:09:19,800
rules I have a blocker up and running

208
00:09:19,800 --> 00:09:21,600
here with the service running and so on

209
00:09:21,600 --> 00:09:24,060
so it is ready to go

210
00:09:24,060 --> 00:09:24,720
um

211
00:09:24,720 --> 00:09:28,380
I'm using two default Rules by default

212
00:09:28,380 --> 00:09:31,920
we have three rows I which bigger it is

213
00:09:31,920 --> 00:09:34,500
not by default but if we do not have

214
00:09:34,500 --> 00:09:37,019
rules we can create default rules and

215
00:09:37,019 --> 00:09:38,940
we'll have three rules the third one is

216
00:09:38,940 --> 00:09:41,459
about allow everything uh for

217
00:09:41,459 --> 00:09:44,880
administrators and those two left here

218
00:09:44,880 --> 00:09:48,720
is allow everything it if it is within

219
00:09:48,720 --> 00:09:51,260
the program files and allow everything

220
00:09:51,260 --> 00:09:55,140
if it is the windows folder it is not

221
00:09:55,140 --> 00:09:57,240
perfect but at the same time is quite

222
00:09:57,240 --> 00:10:00,480
good because only administrators are

223
00:10:00,480 --> 00:10:03,899
able to drop a file into those folders

224
00:10:03,899 --> 00:10:08,160
in most cases when it comes to rules we

225
00:10:08,160 --> 00:10:10,320
can have rules for executable files we

226
00:10:10,320 --> 00:10:12,360
can have rules for installer not that

227
00:10:12,360 --> 00:10:14,459
practical for script not practical at

228
00:10:14,459 --> 00:10:16,920
all and for packaged up roles not

229
00:10:16,920 --> 00:10:18,360
practical because I never seen a

230
00:10:18,360 --> 00:10:21,980
malicious software distributed as

231
00:10:21,980 --> 00:10:25,560
packaged up within that blocker if I go

232
00:10:25,560 --> 00:10:28,140
for properties on the advanced you can

233
00:10:28,140 --> 00:10:31,940
additionally enable dlls to be monitored

234
00:10:31,940 --> 00:10:35,820
with dlls there's one thing the

235
00:10:35,820 --> 00:10:38,399
landscape of dlls on every single PC is

236
00:10:38,399 --> 00:10:40,920
way more complex and less guarded than

237
00:10:40,920 --> 00:10:43,320
the landscape of dot exe files when it

238
00:10:43,320 --> 00:10:45,140
comes to them

239
00:10:45,140 --> 00:10:47,820
content the type of the file actually

240
00:10:47,820 --> 00:10:51,660
dot xdn.dll is the same it is portable

241
00:10:51,660 --> 00:10:54,660
executable format the only difference is

242
00:10:54,660 --> 00:10:56,940
how we launch this particular type of

243
00:10:56,940 --> 00:10:59,220
file because 4.exe it is enough to

244
00:10:59,220 --> 00:11:02,279
double click on it and for dll there

245
00:11:02,279 --> 00:11:06,540
must be a process loading this dll and

246
00:11:06,540 --> 00:11:10,620
automatically or intentionally call one

247
00:11:10,620 --> 00:11:13,820
of methods being exported from the dll

248
00:11:13,820 --> 00:11:16,320
automatically I mean the special export

249
00:11:16,320 --> 00:11:18,779
from the dll It is Well documented it is

250
00:11:18,779 --> 00:11:22,680
called dll main dll main export is

251
00:11:22,680 --> 00:11:24,260
automatically

252
00:11:24,260 --> 00:11:28,260
launched a run when dll is loaded into

253
00:11:28,260 --> 00:11:30,779
any process so if we create a malicious

254
00:11:30,779 --> 00:11:34,560
dll having dll main function inside if

255
00:11:34,560 --> 00:11:37,140
any process loads this dll this

256
00:11:37,140 --> 00:11:39,480
malicious function will be executed

257
00:11:39,480 --> 00:11:45,300
and our code will execute wheeler so the

258
00:11:45,300 --> 00:11:47,820
only issue with dlls is to host them

259
00:11:47,820 --> 00:11:49,500
somehow with another process we have

260
00:11:49,500 --> 00:11:51,500
couple of legitimate and couple of

261
00:11:51,500 --> 00:11:54,720
unusual ways to mention the legitimate

262
00:11:54,720 --> 00:11:58,140
way we have run dll 32 one of those we

263
00:11:58,140 --> 00:12:03,000
have Rec svr 32 another one calling

264
00:12:03,000 --> 00:12:06,300
submitters from the dll when it comes to

265
00:12:06,300 --> 00:12:08,760
unofficial one of my findings I really

266
00:12:08,760 --> 00:12:09,680
like it

267
00:12:09,680 --> 00:12:13,320
if there is a format utility

268
00:12:13,320 --> 00:12:15,980
let's go for the format

269
00:12:15,980 --> 00:12:19,140
format and within the format parameters

270
00:12:19,140 --> 00:12:22,200
one of those being presented by The

271
00:12:22,200 --> 00:12:25,740
Format utility is a file system being

272
00:12:25,740 --> 00:12:27,120
specified by

273
00:12:27,120 --> 00:12:27,740
um

274
00:12:27,740 --> 00:12:30,600
fs and the file system and you can see

275
00:12:30,600 --> 00:12:33,060
we can specify slash FS column and then

276
00:12:33,060 --> 00:12:35,279
specify a file system it is fat farted

277
00:12:35,279 --> 00:12:39,240
32 NTFS and so on and so on and is it

278
00:12:39,240 --> 00:12:41,760
format that's smart it knows every

279
00:12:41,760 --> 00:12:44,540
single file system format not at all

280
00:12:44,540 --> 00:12:50,360
there are dlls on the drive there

281
00:12:50,360 --> 00:12:53,899
see Windows stem

282
00:12:53,899 --> 00:12:56,399
32 you

283
00:12:56,399 --> 00:13:01,560
dll you can see over here

284
00:13:01,560 --> 00:13:05,339
a couple of dlls like ufat

285
00:13:05,339 --> 00:13:09,360
ux fat untfs

286
00:13:10,279 --> 00:13:12,959
undfs is happening here and so on and so

287
00:13:12,959 --> 00:13:15,480
on what does the format utility do if

288
00:13:15,480 --> 00:13:17,880
you specify a file system it will load

289
00:13:17,880 --> 00:13:20,880
the dll name U plus the file system you

290
00:13:20,880 --> 00:13:22,980
specified and it does not check if such

291
00:13:22,980 --> 00:13:25,320
fight system make any sense or not if

292
00:13:25,320 --> 00:13:29,579
you specify format slash FS column you

293
00:13:29,579 --> 00:13:32,459
test which is not fair system at all

294
00:13:32,459 --> 00:13:35,339
format utility will load utest.dll and

295
00:13:35,339 --> 00:13:38,339
execute the dll main so please protect

296
00:13:38,339 --> 00:13:40,680
yourself from launching dlls as well

297
00:13:40,680 --> 00:13:43,620
even it is way more complex when it

298
00:13:43,620 --> 00:13:46,680
comes to a blocker another solution for

299
00:13:46,680 --> 00:13:48,540
applocker we have to check the stack box

300
00:13:48,540 --> 00:13:51,380
and new entry appears within them

301
00:13:51,380 --> 00:13:53,700
graphical interface

302
00:13:53,700 --> 00:13:58,019
what a blocker can do actually I have

303
00:13:58,019 --> 00:14:00,360
configured it only for executable files

304
00:14:00,360 --> 00:14:03,000
and for each of categories

305
00:14:03,000 --> 00:14:07,200
a blocker can do two things for us the

306
00:14:07,200 --> 00:14:09,420
first one is enforce rules which is that

307
00:14:09,420 --> 00:14:11,160
obvious one so if something does not

308
00:14:11,160 --> 00:14:13,680
match a rule it is not allowed to run

309
00:14:13,680 --> 00:14:16,920
period and and over and the second one

310
00:14:16,920 --> 00:14:21,060
is audit mode audit mode means it allows

311
00:14:21,060 --> 00:14:24,000
to run absolutely everything but there

312
00:14:24,000 --> 00:14:26,820
is an entry within even log telling us

313
00:14:26,820 --> 00:14:30,000
it would be denied if we play seriously

314
00:14:30,000 --> 00:14:33,540
which is great for polishing your rules

315
00:14:33,540 --> 00:14:36,120
before you start enforcing them because

316
00:14:36,120 --> 00:14:39,380
it's one of the main pains within the

317
00:14:39,380 --> 00:14:42,300
white listing solution how to do not

318
00:14:42,300 --> 00:14:45,019
break how to do not interrupt your

319
00:14:45,019 --> 00:14:48,000
production your system your your line of

320
00:14:48,000 --> 00:14:49,920
business applications with rules being

321
00:14:49,920 --> 00:14:52,320
too strict so you can create rules

322
00:14:52,320 --> 00:14:54,980
switch everything to audit mode and then

323
00:14:54,980 --> 00:14:57,660
observe your logs if something would be

324
00:14:57,660 --> 00:14:59,699
blocked and if yes it is your decision

325
00:14:59,699 --> 00:15:03,000
should I edit my rules or good to know I

326
00:15:03,000 --> 00:15:05,399
would I would block it anyway here I'm

327
00:15:05,399 --> 00:15:07,980
using audit only to do not block

328
00:15:07,980 --> 00:15:09,899
anything at the same time I have

329
00:15:09,899 --> 00:15:12,500
everything everything logged within the

330
00:15:12,500 --> 00:15:17,160
log as I said applocker is using its

331
00:15:17,160 --> 00:15:21,560
logs so here you have it logs for those

332
00:15:21,560 --> 00:15:26,220
particular entries and I have created a

333
00:15:26,220 --> 00:15:29,779
small view providing me a set of last

334
00:15:29,779 --> 00:15:33,660
entries here so some automatic things

335
00:15:33,660 --> 00:15:37,560
happening on my VM all the time

336
00:15:37,560 --> 00:15:41,579
are reflected over here so I can observe

337
00:15:41,579 --> 00:15:43,440
here you can see some warning probably

338
00:15:43,440 --> 00:15:46,680
something would be blocked and this

339
00:15:46,680 --> 00:15:48,600
small horse from this path would be

340
00:15:48,600 --> 00:15:52,380
blocked for a reason it is not it is

341
00:15:52,380 --> 00:15:54,660
running from my profile and not from

342
00:15:54,660 --> 00:15:58,320
program files or Windows uh so it is not

343
00:15:58,320 --> 00:16:01,260
include within my rules containing only

344
00:16:01,260 --> 00:16:04,980
program file and windows right now okay

345
00:16:04,980 --> 00:16:10,019
so I will launch

346
00:16:10,019 --> 00:16:12,079
um I will create a rule

347
00:16:12,079 --> 00:16:15,720
for an executable file I have created I

348
00:16:15,720 --> 00:16:18,440
have it on the desktop

349
00:16:18,440 --> 00:16:22,220
CLS I created a small application

350
00:16:22,220 --> 00:16:25,980
writing 100 a letters you will see in a

351
00:16:25,980 --> 00:16:26,940
moment why

352
00:16:26,940 --> 00:16:29,160
so this is what my application is doing

353
00:16:29,160 --> 00:16:32,399
not a big deal not very complex I launch

354
00:16:32,399 --> 00:16:34,740
it from the desktop so obviously if I

355
00:16:34,740 --> 00:16:37,800
refresh my log I will see what's allowed

356
00:16:37,800 --> 00:16:40,259
to run but it would be blocked if we

357
00:16:40,259 --> 00:16:42,360
play seriously obviously there is no

358
00:16:42,360 --> 00:16:45,360
rule for this particular file as the

359
00:16:45,360 --> 00:16:47,839
path does not match any of those having

360
00:16:47,839 --> 00:16:49,980
configured here

361
00:16:49,980 --> 00:16:51,839
what I will do right now I will

362
00:16:51,839 --> 00:16:54,660
configure new rule for this particular

363
00:16:54,660 --> 00:16:58,500
executable file and this rule something

364
00:16:58,500 --> 00:17:02,040
is hidden over my taskbarg so I will do

365
00:17:02,040 --> 00:17:05,400
maybe like this next it is for you to

366
00:17:05,400 --> 00:17:09,140
make characters bigger hello everyone

367
00:17:09,140 --> 00:17:11,040
file hash

368
00:17:11,040 --> 00:17:15,119
next I will browse for files I will

369
00:17:15,119 --> 00:17:16,980
specify on the desktop there is right

370
00:17:16,980 --> 00:17:19,439
AAA open

371
00:17:19,439 --> 00:17:23,000
create and new rule appears over here

372
00:17:23,000 --> 00:17:27,679
right now if I go for the same

373
00:17:27,679 --> 00:17:31,799
executable file if I launch it again

374
00:17:31,799 --> 00:17:32,760
um

375
00:17:32,760 --> 00:17:36,840
I will see in my event log F5 there is

376
00:17:36,840 --> 00:17:39,440
an information this particular executive

377
00:17:39,440 --> 00:17:42,600
Tableau file was allowed to run which is

378
00:17:42,600 --> 00:17:45,059
perfectly well

379
00:17:45,059 --> 00:17:48,720
following our ideas and how it should

380
00:17:48,720 --> 00:17:51,480
work in at least in my opinion opinion

381
00:17:51,480 --> 00:17:55,080
okay what I will do right now I will go

382
00:17:55,080 --> 00:17:57,299
for a drive management

383
00:17:57,299 --> 00:18:01,080
I will go with this again I will go for

384
00:18:01,080 --> 00:18:05,039
the drive management I will attach a

385
00:18:05,039 --> 00:18:07,500
vhdx file

386
00:18:07,500 --> 00:18:09,419
dear

387
00:18:09,419 --> 00:18:14,160
temp you can see there is xvhdx file and

388
00:18:14,160 --> 00:18:16,440
I will attach this file this will

389
00:18:16,440 --> 00:18:20,820
simulate the thing I could do having two

390
00:18:20,820 --> 00:18:24,179
laptops like plugging USB drive removing

391
00:18:24,179 --> 00:18:26,640
it plug it to other laptop manipulate it

392
00:18:26,640 --> 00:18:28,740
somehow and plug in it back it is what I

393
00:18:28,740 --> 00:18:33,240
will do with the HDX file so

394
00:18:33,240 --> 00:18:37,700
attach vhdx C temp X

395
00:18:37,700 --> 00:18:39,559
vhdx

396
00:18:39,559 --> 00:18:43,140
okay new Drive appeared here it is the

397
00:18:43,140 --> 00:18:46,280
drive of X and I will copy

398
00:18:46,280 --> 00:18:48,419
the file

399
00:18:48,419 --> 00:18:52,799
copyright IAA into the X drive if I run

400
00:18:52,799 --> 00:18:55,620
it from the X Drive

401
00:18:55,620 --> 00:18:59,400
will be will it be allowed to run it

402
00:18:59,400 --> 00:19:01,860
should be F5

403
00:19:01,860 --> 00:19:05,460
X right IAA was allowed to run because

404
00:19:05,460 --> 00:19:10,380
it hash matches our rule so

405
00:19:10,380 --> 00:19:13,620
what I will do right now I will unplug

406
00:19:13,620 --> 00:19:16,020
my drive

407
00:19:16,020 --> 00:19:19,820
offline or detach vhd even better okay

408
00:19:19,820 --> 00:19:22,860
and I will manipulate it on the lower

409
00:19:22,860 --> 00:19:24,080
level

410
00:19:24,080 --> 00:19:28,260
from the different machine in real world

411
00:19:28,260 --> 00:19:32,039
scenario here I will edit it with a

412
00:19:32,039 --> 00:19:36,360
Binary Editor so I will open my file

413
00:19:36,360 --> 00:19:38,940
Ctrl f

414
00:19:38,940 --> 00:19:41,039
this is the string it is why my

415
00:19:41,039 --> 00:19:42,600
application writes these things to make

416
00:19:42,600 --> 00:19:45,840
it easy to find on the image so this is

417
00:19:45,840 --> 00:19:47,940
the string being written and I will

418
00:19:47,940 --> 00:19:49,380
replace

419
00:19:49,380 --> 00:19:53,580
bunch of my a letters with the X letter

420
00:19:53,580 --> 00:19:58,400
so right now I will save the vhd x file

421
00:19:58,400 --> 00:20:01,559
manipulating the content of the binary

422
00:20:01,559 --> 00:20:04,380
file it is probably what all of the of

423
00:20:04,380 --> 00:20:08,039
us did in the primary school trying to

424
00:20:08,039 --> 00:20:09,900
hack some application to display my main

425
00:20:09,900 --> 00:20:11,760
name is instead of the legitimate name

426
00:20:11,760 --> 00:20:14,580
of the author uh I did exactly the same

427
00:20:14,580 --> 00:20:17,820
with the application I have created so

428
00:20:17,820 --> 00:20:20,760
again Atta ghd

429
00:20:20,760 --> 00:20:24,179
um sorry C temp

430
00:20:24,179 --> 00:20:27,600
X vhdx

431
00:20:27,600 --> 00:20:33,240
and I will run exactly the same X right

432
00:20:33,240 --> 00:20:35,880
IAA

433
00:20:35,880 --> 00:20:39,780
drive and not a big surprise

434
00:20:39,780 --> 00:20:43,860
I can observe a couple of letters within

435
00:20:43,860 --> 00:20:46,740
the executable file were changed but the

436
00:20:46,740 --> 00:20:49,620
question is what a blocker thinks about

437
00:20:49,620 --> 00:20:53,760
this and you can see it is right now 449

438
00:20:53,760 --> 00:20:56,280
it was allowed to run and the question

439
00:20:56,280 --> 00:20:57,539
is why

440
00:20:57,539 --> 00:21:01,380
how it could happen that we created hash

441
00:21:01,380 --> 00:21:04,380
based rule so if anyone changes anything

442
00:21:04,380 --> 00:21:06,960
a bit within this executable file it

443
00:21:06,960 --> 00:21:08,880
will be not allowed to run I have

444
00:21:08,880 --> 00:21:11,580
changed couple of letters so it is

445
00:21:11,580 --> 00:21:13,620
definitely different and it is allowed

446
00:21:13,620 --> 00:21:18,000
to run because of speed and because a

447
00:21:18,000 --> 00:21:19,460
blocker

448
00:21:19,460 --> 00:21:24,480
wants to have it running faster because

449
00:21:24,480 --> 00:21:27,419
some data is being hashed instead of

450
00:21:27,419 --> 00:21:29,700
calculated every single time from

451
00:21:29,700 --> 00:21:32,280
scratch so

452
00:21:32,280 --> 00:21:33,120
um

453
00:21:33,120 --> 00:21:36,120
how I can change verify this I will go

454
00:21:36,120 --> 00:21:37,980
for this console

455
00:21:37,980 --> 00:21:40,260
um when it comes to hashes powerful is

456
00:21:40,260 --> 00:21:43,320
the best one power shell

457
00:21:43,320 --> 00:21:46,919
um get file hash

458
00:21:46,919 --> 00:21:50,100
um write AAA from desktop this is the

459
00:21:50,100 --> 00:21:56,400
hash uh get file hash X right AAA this

460
00:21:56,400 --> 00:21:58,640
is the ones from the

461
00:21:58,640 --> 00:22:01,860
X drive it is significantly different

462
00:22:01,860 --> 00:22:04,940
this is the role of the hash to

463
00:22:04,940 --> 00:22:07,400
visualize this difference particularly

464
00:22:07,400 --> 00:22:11,460
and of course the file is different but

465
00:22:11,460 --> 00:22:14,100
the cache remain the same and the

466
00:22:14,100 --> 00:22:17,520
question is where is the cache and how

467
00:22:17,520 --> 00:22:19,980
it looks like within the app Locker so

468
00:22:19,980 --> 00:22:24,299
if we are within the Powershell get

469
00:22:24,299 --> 00:22:25,260
um

470
00:22:25,260 --> 00:22:28,380
uh blocker

471
00:22:28,380 --> 00:22:32,580
a blocker policy minus local

472
00:22:32,580 --> 00:22:36,380
and I will send it to XML

473
00:22:36,380 --> 00:22:39,480
and to XML

474
00:22:39,480 --> 00:22:42,600
and then policy for a blocker is

475
00:22:42,600 --> 00:22:48,240
allowing me to file hash SWAT 256 and

476
00:22:48,240 --> 00:22:51,960
you can see the hash starting from 6e38

477
00:22:51,960 --> 00:22:56,059
AF which is none of those

478
00:22:56,220 --> 00:22:58,860
what happens here

479
00:22:58,860 --> 00:23:03,659
actually a blocker lies because even if

480
00:23:03,659 --> 00:23:06,600
it says schwa256

481
00:23:06,600 --> 00:23:10,440
this hash is not sure 256 at all

482
00:23:10,440 --> 00:23:13,700
it is a blocker hash and Microsoft

483
00:23:13,700 --> 00:23:17,700
nowhere documents how it is calculated

484
00:23:17,700 --> 00:23:22,620
uh there is one thing here because it

485
00:23:22,620 --> 00:23:26,220
Microsoft does not document how the hash

486
00:23:26,220 --> 00:23:28,980
is calculated but in the totally

487
00:23:28,980 --> 00:23:30,780
different areas of Microsoft

488
00:23:30,780 --> 00:23:33,120
documentation Microsoft explained as

489
00:23:33,120 --> 00:23:36,360
so-called authentic code hash

490
00:23:36,360 --> 00:23:39,299
used for digitally signed executable

491
00:23:39,299 --> 00:23:41,340
files there is a special algorithm

492
00:23:41,340 --> 00:23:43,559
hashing only special part of the

493
00:23:43,559 --> 00:23:45,900
executable files to make it faster

494
00:23:45,900 --> 00:23:48,179
and those hashes match

495
00:23:48,179 --> 00:23:51,960
so we can guess it is authentic code

496
00:23:51,960 --> 00:23:54,539
hash even if Microsoft does not really

497
00:23:54,539 --> 00:23:56,159
say so

498
00:23:56,159 --> 00:23:58,260
um so

499
00:23:58,260 --> 00:24:01,500
we have a pretty amazing by the way I

500
00:24:01,500 --> 00:24:03,179
discovered it when I tried to

501
00:24:03,179 --> 00:24:05,520
pre-calculate hashes of like 100 of

502
00:24:05,520 --> 00:24:08,400
files and then drop into them to this

503
00:24:08,400 --> 00:24:10,140
those pre-calculated hashes into their

504
00:24:10,140 --> 00:24:12,780
blocker and none of those hashes worked

505
00:24:12,780 --> 00:24:15,900
why I freshly calculated them verified

506
00:24:15,900 --> 00:24:18,000
and it works and then I try to do this

507
00:24:18,000 --> 00:24:19,980
by importing a file through a blocker

508
00:24:19,980 --> 00:24:22,440
Wizard and I realized that this hash is

509
00:24:22,440 --> 00:24:25,220
totally different anyway

510
00:24:25,220 --> 00:24:28,580
this is how the cache is being

511
00:24:28,580 --> 00:24:32,100
calculated in practice it is using a

512
00:24:32,100 --> 00:24:34,860
blocker out in the code hash if you

513
00:24:34,860 --> 00:24:37,559
really want to use schwa256 it is yet

514
00:24:37,559 --> 00:24:40,799
another totally undocumented thing I do

515
00:24:40,799 --> 00:24:43,760
not recommend rely on it instead of

516
00:24:43,760 --> 00:24:47,900
schwa256 you can specify an algorithm

517
00:24:47,900 --> 00:24:50,360
schwa256 flat

518
00:24:50,360 --> 00:24:53,220
documented nowhere but if you use it

519
00:24:53,220 --> 00:24:56,039
then real SWAT 256 can be used and it

520
00:24:56,039 --> 00:24:59,820
will work okay by the way if I have this

521
00:24:59,820 --> 00:25:03,720
command handy I will out file I will

522
00:25:03,720 --> 00:25:05,820
save it to a file

523
00:25:05,820 --> 00:25:07,140
um

524
00:25:07,140 --> 00:25:09,659
xml.com

525
00:25:09,659 --> 00:25:12,780
okay so I have this I'll handle just for

526
00:25:12,780 --> 00:25:14,600
the future okay

527
00:25:14,600 --> 00:25:19,200
let's move two steps back I have changed

528
00:25:19,200 --> 00:25:22,140
the content of the file and it still

529
00:25:22,140 --> 00:25:24,840
runs because applocker believes it is

530
00:25:24,840 --> 00:25:27,419
the original one so at the first run

531
00:25:27,419 --> 00:25:30,120
before I detach the drive hash was

532
00:25:30,120 --> 00:25:31,080
somehow

533
00:25:31,080 --> 00:25:36,059
cached and after the manipulation no one

534
00:25:36,059 --> 00:25:40,440
realized the content changed and the

535
00:25:40,440 --> 00:25:42,419
hash remained the original and the

536
00:25:42,419 --> 00:25:45,360
applocker relies on the half on the

537
00:25:45,360 --> 00:25:48,659
cache I will mess them talking to you

538
00:25:48,659 --> 00:25:50,900
too

539
00:25:50,900 --> 00:25:56,580
quickly okay anyway how we can display

540
00:25:56,580 --> 00:25:57,779
um

541
00:25:57,779 --> 00:26:00,679
or play with those hashes

542
00:26:00,679 --> 00:26:04,740
CLS we can

543
00:26:04,740 --> 00:26:08,400
after some digging I have realized that

544
00:26:08,400 --> 00:26:12,179
the cache of hashes is being stored

545
00:26:12,179 --> 00:26:15,600
within NTFS extended attributes if you

546
00:26:15,600 --> 00:26:19,620
know the idea of alternate data stream

547
00:26:19,620 --> 00:26:22,460
this one will be very similar

548
00:26:22,460 --> 00:26:25,860
extended attribute is like alternate

549
00:26:25,860 --> 00:26:28,320
data stream on steroids

550
00:26:28,320 --> 00:26:33,360
FSU till file there is a query a command

551
00:26:33,360 --> 00:26:36,240
within built-in FS util utility FS util

552
00:26:36,240 --> 00:26:39,600
file query

553
00:26:40,220 --> 00:26:43,740
query a a query extended attribute let's

554
00:26:43,740 --> 00:26:45,720
say for the right IA from the desktop

555
00:26:45,720 --> 00:26:48,779
and you can see some data

556
00:26:48,779 --> 00:26:53,100
here you have the information and we

557
00:26:53,100 --> 00:26:55,919
have to Extended attributes this is a

558
00:26:55,919 --> 00:26:58,919
name of the first one and its content

559
00:26:58,919 --> 00:27:02,159
this is the name of the second one and

560
00:27:02,159 --> 00:27:05,580
the content is slightly bigger and those

561
00:27:05,580 --> 00:27:09,799
are identified by aid1 and Aid 3.

562
00:27:09,799 --> 00:27:13,320
here we have a thing this one is

563
00:27:13,320 --> 00:27:17,159
documented because the name starts with

564
00:27:17,159 --> 00:27:20,100
dollar kernel dot Purge what does it

565
00:27:20,100 --> 00:27:21,360
mean in practice

566
00:27:21,360 --> 00:27:25,320
if an extended attribute name starts

567
00:27:25,320 --> 00:27:28,140
with the dollar kernel it is allowed to

568
00:27:28,140 --> 00:27:30,720
be created only by the windows kernel

569
00:27:30,720 --> 00:27:32,700
this is kind of the protection as I said

570
00:27:32,700 --> 00:27:34,380
this one is documented

571
00:27:34,380 --> 00:27:39,659
so I cannot create such attribute there

572
00:27:39,659 --> 00:27:41,640
is no easy way of manipulating the

573
00:27:41,640 --> 00:27:44,460
attribute but I can read the attribute

574
00:27:44,460 --> 00:27:46,620
delete the old one and recreate a new

575
00:27:46,620 --> 00:27:49,500
one if I want to play with them anyway I

576
00:27:49,500 --> 00:27:51,240
cannot manipulate the dollar kernel

577
00:27:51,240 --> 00:27:52,980
attributes because I can delete them I

578
00:27:52,980 --> 00:27:54,900
can manipulate them I can read them but

579
00:27:54,900 --> 00:27:57,600
I cannot recreate a new one so it will

580
00:27:57,600 --> 00:27:59,940
simply not work the second part of the

581
00:27:59,940 --> 00:28:03,240
name dot Purge is even more interesting

582
00:28:03,240 --> 00:28:06,539
and it is again documented

583
00:28:06,539 --> 00:28:10,980
um if dollar perch is present within

584
00:28:10,980 --> 00:28:14,880
extended attribute name the ntfs.driver

585
00:28:14,880 --> 00:28:18,419
within the kernel must remove this

586
00:28:18,419 --> 00:28:22,380
attribute totally if any change within

587
00:28:22,380 --> 00:28:26,220
the file content happens so if I open my

588
00:28:26,220 --> 00:28:27,900
executable file

589
00:28:27,900 --> 00:28:29,940
directly from the file system with

590
00:28:29,940 --> 00:28:32,760
Binary Editor if I change it those

591
00:28:32,760 --> 00:28:35,340
extended attributes disappear because

592
00:28:35,340 --> 00:28:37,080
the content is changed and they

593
00:28:37,080 --> 00:28:40,500
disappear if I reach under the NTFS

594
00:28:40,500 --> 00:28:43,860
driver which I did by detaching the

595
00:28:43,860 --> 00:28:46,260
drive and the manipulating content no

596
00:28:46,260 --> 00:28:49,080
one was informed please invalidate the

597
00:28:49,080 --> 00:28:53,279
cache so here you can see

598
00:28:53,279 --> 00:28:54,200
um

599
00:28:54,200 --> 00:28:57,500
6e38 AF and so on as a

600
00:28:57,500 --> 00:29:00,120
content of the cache by the way it is

601
00:29:00,120 --> 00:29:03,080
exactly the hash being uh

602
00:29:03,080 --> 00:29:05,520
present within the applocker role even

603
00:29:05,520 --> 00:29:07,559
if you do not remember it I have it in

604
00:29:07,559 --> 00:29:09,779
the text file you can rewind the

605
00:29:09,779 --> 00:29:12,000
recording if you want if I do the same

606
00:29:12,000 --> 00:29:14,279
for the X Drive

607
00:29:14,279 --> 00:29:15,600
um

608
00:29:15,600 --> 00:29:19,860
X backslash the content is exactly the

609
00:29:19,860 --> 00:29:24,480
same here 6838 and so on the cached

610
00:29:24,480 --> 00:29:27,960
value is the same and a blocker relies

611
00:29:27,960 --> 00:29:31,020
on this cached value

612
00:29:31,020 --> 00:29:32,159
um

613
00:29:32,159 --> 00:29:33,899
by the way

614
00:29:33,899 --> 00:29:36,419
there is one interesting thing because

615
00:29:36,419 --> 00:29:39,240
it would be good to know if a file is

616
00:29:39,240 --> 00:29:42,179
allowed to run or not really within the

617
00:29:42,179 --> 00:29:44,240
Powershell

618
00:29:44,240 --> 00:29:48,380
Powershell we have a test

619
00:29:48,380 --> 00:29:51,860
applocker policy commandlet

620
00:29:51,860 --> 00:29:54,779
one of the parameters is XML policy

621
00:29:54,779 --> 00:29:58,860
another one is a path for the file here

622
00:29:58,860 --> 00:30:02,100
I do not have to use path directly XML

623
00:30:02,100 --> 00:30:03,539
policy

624
00:30:03,539 --> 00:30:06,539
um I save the police on the drive so it

625
00:30:06,539 --> 00:30:07,340
was

626
00:30:07,340 --> 00:30:11,039
xml.txt and the path

627
00:30:11,039 --> 00:30:14,220
I have to specify the

628
00:30:14,220 --> 00:30:17,220
file to be tested if it is allowed to

629
00:30:17,220 --> 00:30:19,860
run if I specify right IAA I will see an

630
00:30:19,860 --> 00:30:23,159
information there is a rule named Rye

631
00:30:23,159 --> 00:30:26,279
AAA which makes the file allowed to be

632
00:30:26,279 --> 00:30:28,799
run if I do the same

633
00:30:28,799 --> 00:30:32,700
within the Powershell testing how

634
00:30:32,700 --> 00:30:36,140
a blocker will evaluate the X Drive

635
00:30:36,140 --> 00:30:40,200
you'll see it will be denied

636
00:30:40,200 --> 00:30:42,659
yet another applocker Beauty

637
00:30:42,659 --> 00:30:45,659
because a blocker itself the engine of

638
00:30:45,659 --> 00:30:48,179
that blocker relies on the cache

639
00:30:48,179 --> 00:30:50,880
and the test applocker policy tool

640
00:30:50,880 --> 00:30:53,220
relies on the real content of the file

641
00:30:53,220 --> 00:30:56,399
why do not make it this way it is well

642
00:30:56,399 --> 00:31:00,000
you know Microsoft very well I built

643
00:31:00,000 --> 00:31:02,279
um okay so Tesla blocker and policy

644
00:31:02,279 --> 00:31:04,559
doesn't have to tell you truth because

645
00:31:04,559 --> 00:31:06,840
cache may tell something different and

646
00:31:06,840 --> 00:31:10,380
the test commandlet does not rely on the

647
00:31:10,380 --> 00:31:12,120
cache and the kernel driver relies on

648
00:31:12,120 --> 00:31:13,200
the cache

649
00:31:13,200 --> 00:31:14,820
and

650
00:31:14,820 --> 00:31:18,659
um another thing because what did uh we

651
00:31:18,659 --> 00:31:21,779
did over here we manipulated the content

652
00:31:21,779 --> 00:31:25,320
of the binary file under the NTFS driver

653
00:31:25,320 --> 00:31:28,080
which has some potential obviously when

654
00:31:28,080 --> 00:31:30,419
it comes to malicious action but it's

655
00:31:30,419 --> 00:31:34,380
not that great thing because you cannot

656
00:31:34,380 --> 00:31:38,279
plant your malicious file on the

657
00:31:38,279 --> 00:31:39,240
um

658
00:31:39,240 --> 00:31:42,059
removable drive and then create the

659
00:31:42,059 --> 00:31:45,240
cache so I will go this path I will copy

660
00:31:45,240 --> 00:31:47,220
copy

661
00:31:47,220 --> 00:31:48,240
um

662
00:31:48,240 --> 00:31:51,419
maybe not from Powershell exit I will

663
00:31:51,419 --> 00:31:53,159
return to my irregular unprivileged

664
00:31:53,159 --> 00:31:57,240
console see less I will hide this one

665
00:31:57,240 --> 00:32:00,200
because now it starts to be quite messy

666
00:32:00,200 --> 00:32:03,779
copy I have a special application which

667
00:32:03,779 --> 00:32:07,020
is obviously not quite listed

668
00:32:07,020 --> 00:32:09,659
um for owning the system into the X

669
00:32:09,659 --> 00:32:13,460
drive and I will detach the X Drive

670
00:32:13,460 --> 00:32:16,460
let's detach it

671
00:32:16,460 --> 00:32:19,399
I will display

672
00:32:19,399 --> 00:32:24,779
my rules by opening the XML txt file

673
00:32:24,779 --> 00:32:26,880
this is the file I have created a moment

674
00:32:26,880 --> 00:32:30,120
ago format War wrap here you can see

675
00:32:30,120 --> 00:32:31,580
that

676
00:32:31,580 --> 00:32:36,299
hash and within the file

677
00:32:36,299 --> 00:32:39,200
I have

678
00:32:39,600 --> 00:32:41,039
again

679
00:32:41,039 --> 00:32:44,940
Ctrl c i detach the drive it was too

680
00:32:44,940 --> 00:32:47,840
fast because now I cannot plant the hash

681
00:32:47,840 --> 00:32:54,899
attach vhd AC temp x v h d x

682
00:32:54,899 --> 00:32:59,120
um okay it is attached so right now dear

683
00:32:59,120 --> 00:33:02,399
X I have this file obviously this file

684
00:33:02,399 --> 00:33:05,159
has absolutely no extended attributes

685
00:33:05,159 --> 00:33:09,299
which I could we prove FSU till file a

686
00:33:09,299 --> 00:33:14,940
query a a x pwn and it has no extended

687
00:33:14,940 --> 00:33:17,760
attributes because it was not launched

688
00:33:17,760 --> 00:33:21,600
so far so cached cached hashes were not

689
00:33:21,600 --> 00:33:23,760
calculated stored and so on it will

690
00:33:23,760 --> 00:33:26,399
happen at the first use and right now I

691
00:33:26,399 --> 00:33:28,980
will plunk a cache

692
00:33:28,980 --> 00:33:30,659
over it

693
00:33:30,659 --> 00:33:33,299
um so there is a tool I'm sharing with

694
00:33:33,299 --> 00:33:34,500
my GitHub

695
00:33:34,500 --> 00:33:35,240
um

696
00:33:35,240 --> 00:33:39,419
and it is on my desktop so it is setup

697
00:33:39,419 --> 00:33:42,539
Locker hash cache you have to specify

698
00:33:42,539 --> 00:33:47,159
file name and the hash so it is X um

699
00:33:47,159 --> 00:33:50,640
pwn and a hash within my clipboard all

700
00:33:50,640 --> 00:33:54,000
the time again can I create dollar

701
00:33:54,000 --> 00:33:56,760
caramel not at all it is not allowed for

702
00:33:56,760 --> 00:33:58,919
me but I can create an extended

703
00:33:58,919 --> 00:34:03,120
attribute called hash kernel which is

704
00:34:03,120 --> 00:34:04,740
allowed because why not

705
00:34:04,740 --> 00:34:07,980
so right now I will do the same magic

706
00:34:07,980 --> 00:34:12,500
but on different level and I will open a

707
00:34:12,500 --> 00:34:15,540
Binary Editor

708
00:34:15,540 --> 00:34:18,800
my Binary Editor is still here

709
00:34:18,800 --> 00:34:23,760
reopen X the HDX control error like for

710
00:34:23,760 --> 00:34:26,639
replace dollar kernel

711
00:34:26,639 --> 00:34:28,159
Port

712
00:34:28,159 --> 00:34:31,099
let's use uppercase

713
00:34:31,099 --> 00:34:37,679
again not dollar but hash dollar kernel

714
00:34:38,699 --> 00:34:43,098
like this replace all

715
00:34:43,139 --> 00:34:44,520
it happened

716
00:34:44,520 --> 00:34:48,719
so right now it is named according to

717
00:34:48,719 --> 00:34:54,319
applocker expectation if I attach my

718
00:34:54,560 --> 00:35:00,980
vhdx drive again attach vhd C temp X

719
00:35:00,980 --> 00:35:05,760
vhdx it reappeared right now if I

720
00:35:05,760 --> 00:35:09,540
display extended attributes here you can

721
00:35:09,540 --> 00:35:12,060
see there is a perfectly legit extended

722
00:35:12,060 --> 00:35:16,560
attribute so xpwn

723
00:35:16,740 --> 00:35:20,280
will launch and when I look into the log

724
00:35:20,280 --> 00:35:23,040
not a big surprise it was allowed to run

725
00:35:23,040 --> 00:35:25,020
as the engine of the apocal relied on

726
00:35:25,020 --> 00:35:28,280
the cache I have planted Within

727
00:35:28,280 --> 00:35:31,920
the previous steps

728
00:35:31,920 --> 00:35:34,680
is it dangerous in practice

729
00:35:34,680 --> 00:35:37,560
when it comes to manipulating attaching

730
00:35:37,560 --> 00:35:40,800
the touching files not that much there

731
00:35:40,800 --> 00:35:42,660
is one trick attaching and detaching

732
00:35:42,660 --> 00:35:46,320
files virtual drives requires privileges

733
00:35:46,320 --> 00:35:48,540
allowing to you to be an admin anyway

734
00:35:48,540 --> 00:35:50,579
but when it comes to the physical Drive

735
00:35:50,579 --> 00:35:53,099
being plugged and unplugged yes it may

736
00:35:53,099 --> 00:35:56,400
be dangerous in practice we are not

737
00:35:56,400 --> 00:35:57,960
meeting

738
00:35:57,960 --> 00:35:59,579
um

739
00:35:59,579 --> 00:36:03,480
typical hash based rules so often but it

740
00:36:03,480 --> 00:36:05,700
may happen and we can just read the rule

741
00:36:05,700 --> 00:36:07,560
set and then plan the hash information

742
00:36:07,560 --> 00:36:10,740
and then manipulate the content but it

743
00:36:10,740 --> 00:36:13,560
works exactly the same way for digital

744
00:36:13,560 --> 00:36:16,740
signatures because if you remember the

745
00:36:16,740 --> 00:36:20,400
previous output here for the pwn this is

746
00:36:20,400 --> 00:36:25,200
the entry I have planted for the right

747
00:36:25,200 --> 00:36:30,000
IAA we have slightly more like this this

748
00:36:30,000 --> 00:36:34,020
is with aib tree identifier also for app

749
00:36:34,020 --> 00:36:35,720
ID

750
00:36:35,720 --> 00:36:38,700
aid3 and the signer info signering for

751
00:36:38,700 --> 00:36:41,220
this as a hint if the file is digitally

752
00:36:41,220 --> 00:36:43,440
signed the information about the signer

753
00:36:43,440 --> 00:36:46,740
is cached exactly the same way so very

754
00:36:46,740 --> 00:36:49,260
common rule we have in our applocker

755
00:36:49,260 --> 00:36:51,480
deployments let's allow everything if

756
00:36:51,480 --> 00:36:52,859
it's from Microsoft

757
00:36:52,859 --> 00:36:57,180
again if you are able to plant such ntf

758
00:36:57,180 --> 00:36:59,460
NTFS extended attribute on a

759
00:36:59,460 --> 00:37:01,920
non-microsoft file it will be allowed to

760
00:37:01,920 --> 00:37:04,200
run because applockers allows us to run

761
00:37:04,200 --> 00:37:06,000
everything being signed by Microsoft and

762
00:37:06,000 --> 00:37:08,339
reading it from the extended attributes

763
00:37:08,339 --> 00:37:10,380
couple of bytes a couple of hundreds of

764
00:37:10,380 --> 00:37:13,260
bytes is way faster than reading the

765
00:37:13,260 --> 00:37:15,680
full content of the file hashing it

766
00:37:15,680 --> 00:37:19,940
comparing it to the well verifying its

767
00:37:19,940 --> 00:37:23,760
certificate that the signing if sign

768
00:37:23,760 --> 00:37:26,040
matches verifying if the certificate is

769
00:37:26,040 --> 00:37:27,780
not expired and so on and so on every

770
00:37:27,780 --> 00:37:29,640
single launching of application would be

771
00:37:29,640 --> 00:37:32,579
I'm consuming right now is about reading

772
00:37:32,579 --> 00:37:35,520
its own cache and relying in on own

773
00:37:35,520 --> 00:37:38,160
cache not really believing it is

774
00:37:38,160 --> 00:37:40,140
possible to manipulate it

775
00:37:40,140 --> 00:37:43,020
uh by the way I will not show you you

776
00:37:43,020 --> 00:37:45,180
can try it on your own if you are using

777
00:37:45,180 --> 00:37:49,160
WDC wdac has such cache

778
00:37:49,160 --> 00:37:53,579
hashes cached a quite similar way there

779
00:37:53,579 --> 00:37:55,740
is one big difference when it's come to

780
00:37:55,740 --> 00:37:59,940
WDC the first one within the wdac policy

781
00:37:59,940 --> 00:38:03,260
we can specify one Very Special Value

782
00:38:03,260 --> 00:38:07,380
please invalidate all extended

783
00:38:07,380 --> 00:38:09,720
attributes at reboot

784
00:38:09,720 --> 00:38:13,920
so all caches will be wiped when your

785
00:38:13,920 --> 00:38:16,220
computer restarts another

786
00:38:16,220 --> 00:38:20,280
Improvement within the WDC is

787
00:38:20,280 --> 00:38:22,500
cached hashes

788
00:38:22,500 --> 00:38:23,880
are

789
00:38:23,880 --> 00:38:27,839
used only from the system Drive

790
00:38:27,839 --> 00:38:31,140
and not from the removable drive so we

791
00:38:31,140 --> 00:38:34,380
cannot attack removable drive for WDC

792
00:38:34,380 --> 00:38:37,079
using this way but at the same time we

793
00:38:37,079 --> 00:38:40,320
can use it for a blocker yet again a

794
00:38:40,320 --> 00:38:42,960
thing to consider when you try to Pick

795
00:38:42,960 --> 00:38:44,119
Your

796
00:38:44,119 --> 00:38:46,560
solution to be to be used within your

797
00:38:46,560 --> 00:38:49,320
environment because sometimes it may be

798
00:38:49,320 --> 00:38:52,500
a risk worth considering

799
00:38:52,500 --> 00:38:54,359
so

800
00:38:54,359 --> 00:38:57,359
to make it faster Microsoft decided to

801
00:38:57,359 --> 00:39:00,480
Cache some valuable data and every

802
00:39:00,480 --> 00:39:03,839
single time we have a cache involved

803
00:39:03,839 --> 00:39:06,900
somewhere into the process there is a

804
00:39:06,900 --> 00:39:08,640
possibility of doing two things to

805
00:39:08,640 --> 00:39:11,940
changes things without updating cash or

806
00:39:11,940 --> 00:39:14,400
to plan the cash entry to falsify a

807
00:39:14,400 --> 00:39:20,880
cached entry for some thing and we can

808
00:39:20,880 --> 00:39:23,400
try to manipulate a blocker this way I

809
00:39:23,400 --> 00:39:26,460
will return to my slide desk it is very

810
00:39:26,460 --> 00:39:28,980
complex slide desk as you can see like

811
00:39:28,980 --> 00:39:32,900
literally two slides shift F5

812
00:39:32,900 --> 00:39:36,119
like this here you can see couple of

813
00:39:36,119 --> 00:39:39,420
links the first two are guiding you to

814
00:39:39,420 --> 00:39:41,040
the

815
00:39:41,040 --> 00:39:42,960
um to my GitHub where I publish

816
00:39:42,960 --> 00:39:45,359
executable files and

817
00:39:45,359 --> 00:39:48,599
um source code I write in C mainly for

818
00:39:48,599 --> 00:39:51,960
tools I have presented

819
00:39:51,960 --> 00:39:54,300
um I'm providing a short write-up this

820
00:39:54,300 --> 00:39:57,000
is the third link and I also trying to

821
00:39:57,000 --> 00:39:59,280
demonstrate the full path at this

822
00:39:59,280 --> 00:40:01,800
partiality it is less complex than

823
00:40:01,800 --> 00:40:03,660
today's session but still you can follow

824
00:40:03,660 --> 00:40:07,079
the idea reaching the quick video I I'm

825
00:40:07,079 --> 00:40:09,079
referring this QR code is actually

826
00:40:09,079 --> 00:40:12,119
guiding you to

827
00:40:12,119 --> 00:40:15,660
four lines HTML page containing those

828
00:40:15,660 --> 00:40:17,940
links if if you prefer this way that's

829
00:40:17,940 --> 00:40:20,460
so that's basically it thank you very

830
00:40:20,460 --> 00:40:24,140
much and hopefully see you soon again

831
00:40:29,700 --> 00:40:33,720
do we have any questions for

832
00:40:33,720 --> 00:40:37,680
Greg after his presentation

833
00:40:37,680 --> 00:40:40,500
okay you see the information if you need

834
00:40:40,500 --> 00:40:44,599
more is there so

835
00:40:45,960 --> 00:40:49,700
so just a moment I'll bring you the mic

836
00:40:58,740 --> 00:41:00,839
I will try to repeat the question but

837
00:41:00,839 --> 00:41:04,099
first I have to hear it

838
00:41:06,599 --> 00:41:09,000
probably someone from upstairs and going

839
00:41:09,000 --> 00:41:11,339
downstairs right now sorry anyway I'm

840
00:41:11,339 --> 00:41:13,260
not running away so if you're upstairs

841
00:41:13,260 --> 00:41:15,180
just please it would be great to hear

842
00:41:15,180 --> 00:41:17,160
the question anyway and answer if I know

843
00:41:17,160 --> 00:41:19,940
the answer

844
00:41:22,079 --> 00:41:25,099
over there

845
00:41:46,020 --> 00:41:48,480
anyway I'm not running if you go to my

846
00:41:48,480 --> 00:41:50,760
GitHub you will find kind of a way of

847
00:41:50,760 --> 00:41:53,040
contacting me feel free to ask me to

848
00:41:53,040 --> 00:41:56,280
reach me I can see one hands up on the

849
00:41:56,280 --> 00:42:00,359
on the left side of the room

850
00:42:00,359 --> 00:42:04,279
a real person not just a voice

851
00:42:07,200 --> 00:42:08,880
um you mentioned that uh

852
00:42:08,880 --> 00:42:12,119
mounting vhd X Files requires elevated

853
00:42:12,119 --> 00:42:15,660
privileges what about the iso fires

854
00:42:15,660 --> 00:42:18,180
because ISO fires can be opened by users

855
00:42:18,180 --> 00:42:21,780
yep but ISO files cannot have NTFS file

856
00:42:21,780 --> 00:42:24,720
system those are cdfs and cdfs does not

857
00:42:24,720 --> 00:42:26,820
have extended attributes so it does not

858
00:42:26,820 --> 00:42:31,140
affect ISO files okay thank you

859
00:42:31,140 --> 00:42:34,140
foreign

860
00:42:36,140 --> 00:42:39,960
from upstairs no uh anybody else with a

861
00:42:39,960 --> 00:42:42,359
with a question

862
00:42:42,359 --> 00:42:45,540
no in which case thank you again thank

863
00:42:45,540 --> 00:42:48,740
you uh very much

