1
00:00:00,120 --> 00:00:02,520
okay thank you I'll hand you over now to

2
00:00:02,520 --> 00:00:05,480
alrash khabai

3
00:00:07,500 --> 00:00:09,420
okay hello everyone greetings to you

4
00:00:09,420 --> 00:00:11,580
today

5
00:00:11,580 --> 00:00:13,799
I will talk about 40 injections today

6
00:00:13,799 --> 00:00:16,800
against embedded systems

7
00:00:16,800 --> 00:00:18,779
a couple of words about the topic and

8
00:00:18,779 --> 00:00:21,900
why I was chosen this because it is

9
00:00:21,900 --> 00:00:24,960
important activity opened a dedicated

10
00:00:24,960 --> 00:00:27,539
day for embedded security which is quite

11
00:00:27,539 --> 00:00:30,240
important change and the good progress

12
00:00:30,240 --> 00:00:33,180
in a case of these Hardware security

13
00:00:33,180 --> 00:00:35,059
related areas so

14
00:00:35,059 --> 00:00:38,700
this is something that has huge impact

15
00:00:38,700 --> 00:00:41,100
on the Hardware security and embedded

16
00:00:41,100 --> 00:00:44,100
security so this is one of the key

17
00:00:44,100 --> 00:00:46,559
points why I have chosen this another

18
00:00:46,559 --> 00:00:49,800
one is that I like Hardware hacking so I

19
00:00:49,800 --> 00:00:52,079
do this at home I have my own research

20
00:00:52,079 --> 00:00:54,660
lab and the research corner at home and

21
00:00:54,660 --> 00:00:57,780
this is something that I also do at work

22
00:00:57,780 --> 00:01:00,000
so with regards to the organ though

23
00:01:00,000 --> 00:01:02,520
there will be basically three main areas

24
00:01:02,520 --> 00:01:06,240
covered we'll get a short intro but

25
00:01:06,240 --> 00:01:08,460
really just a quick summary into the

26
00:01:08,460 --> 00:01:11,220
forward injection attacks then there

27
00:01:11,220 --> 00:01:14,159
will be demonstrations with regards to

28
00:01:14,159 --> 00:01:16,740
the voltage glitching against the Tresor

29
00:01:16,740 --> 00:01:20,939
and the emfi related attack against the

30
00:01:20,939 --> 00:01:23,100
UDS diagnostic service running on an

31
00:01:23,100 --> 00:01:25,320
automotive ECU

32
00:01:25,320 --> 00:01:27,619
it's a couple of years about me

33
00:01:27,619 --> 00:01:30,540
well it turned out that I don't have too

34
00:01:30,540 --> 00:01:32,700
much funny looking pictures about myself

35
00:01:32,700 --> 00:01:35,820
so I have to choose between a suit and

36
00:01:35,820 --> 00:01:38,100
tie company profile picture or this so

37
00:01:38,100 --> 00:01:40,939
considering the event I chose this but

38
00:01:40,939 --> 00:01:43,619
trust me I'm a friendly guy despite the

39
00:01:43,619 --> 00:01:44,720
picture

40
00:01:44,720 --> 00:01:47,220
I'm a director at the sideberry services

41
00:01:47,220 --> 00:01:50,880
at the Hungarian Deloitte and I'm

42
00:01:50,880 --> 00:01:53,180
responsible for the special services

43
00:01:53,180 --> 00:01:55,799
that cover basically car hacking

44
00:01:55,799 --> 00:01:57,840
automotive security related services and

45
00:01:57,840 --> 00:01:59,820
Hardware hacking services so beside

46
00:01:59,820 --> 00:02:01,439
traditional penetration testing we do

47
00:02:01,439 --> 00:02:03,960
have a special specific and specialized

48
00:02:03,960 --> 00:02:07,259
lab equipment and a specialized team who

49
00:02:07,259 --> 00:02:09,780
are dealing with this kind of projects

50
00:02:09,780 --> 00:02:13,560
and we are delivering projects worldwide

51
00:02:13,560 --> 00:02:14,819
so

52
00:02:14,819 --> 00:02:17,879
fold injection in a nutshell what it is

53
00:02:17,879 --> 00:02:20,580
what the hell it is so electronic

54
00:02:20,580 --> 00:02:22,860
components like CPUs microcontrollers

55
00:02:22,860 --> 00:02:25,500
tend to work and expect it to work

56
00:02:25,500 --> 00:02:29,340
properly in a range of safe Zone this is

57
00:02:29,340 --> 00:02:32,400
coming from a specification it can be a

58
00:02:32,400 --> 00:02:35,099
voltage range so the typical voltage

59
00:02:35,099 --> 00:02:37,020
that is expected for example by a

60
00:02:37,020 --> 00:02:39,920
microcontroller or a CPU

61
00:02:39,920 --> 00:02:44,940
can be moved in a small range and below

62
00:02:44,940 --> 00:02:48,000
that or above that something unexpected

63
00:02:48,000 --> 00:02:51,599
or non-determined deterministic could

64
00:02:51,599 --> 00:02:52,760
happen

65
00:02:52,760 --> 00:02:55,500
or this could be something else as well

66
00:02:55,500 --> 00:02:58,760
this could be also a temperature so

67
00:02:58,760 --> 00:03:01,860
CPUs microcontrollers other components

68
00:03:01,860 --> 00:03:04,379
are qualified to work properly in a

69
00:03:04,379 --> 00:03:05,879
range of safe Zone this is the main

70
00:03:05,879 --> 00:03:09,120
message and outside of the sales Zone

71
00:03:09,120 --> 00:03:11,519
there is something magic that could

72
00:03:11,519 --> 00:03:13,680
happen and for the injection attacks are

73
00:03:13,680 --> 00:03:16,920
typically trying to bypass these borders

74
00:03:16,920 --> 00:03:20,040
and move at the sharp edge of the border

75
00:03:20,040 --> 00:03:22,860
to find the exact spot and exit

76
00:03:22,860 --> 00:03:25,800
configuration the exact environment and

77
00:03:25,800 --> 00:03:29,459
settings that is necessary to let the

78
00:03:29,459 --> 00:03:32,280
target keep up and running but to

79
00:03:32,280 --> 00:03:33,860
achieve something

80
00:03:33,860 --> 00:03:38,519
unexpected that let us the auto care to

81
00:03:38,519 --> 00:03:41,040
achieve something meaningful and bypass

82
00:03:41,040 --> 00:03:43,440
some security features

83
00:03:43,440 --> 00:03:46,500
so there are various type of faulty

84
00:03:46,500 --> 00:03:48,180
injections the typical ones are the

85
00:03:48,180 --> 00:03:49,980
wattage glitching this will be also

86
00:03:49,980 --> 00:03:52,260
covered in the demo for voltage

87
00:03:52,260 --> 00:03:54,599
glitching we are typically targeting the

88
00:03:54,599 --> 00:03:57,239
target's power source typically if

89
00:03:57,239 --> 00:04:00,180
possible we tend to go directly to the

90
00:04:00,180 --> 00:04:02,940
core voltage because that is a different

91
00:04:02,940 --> 00:04:05,340
one that is used by for example the

92
00:04:05,340 --> 00:04:08,700
external interfaces and we introduce

93
00:04:08,700 --> 00:04:12,299
glitches some shorts for example to the

94
00:04:12,299 --> 00:04:14,480
ground on the power Lane

95
00:04:14,480 --> 00:04:16,798
there is an electromagnetic fault

96
00:04:16,798 --> 00:04:21,238
injection emfi that releases big and

97
00:04:21,238 --> 00:04:24,720
powerful electromagnetic pools close to

98
00:04:24,720 --> 00:04:27,419
the chip surface and generates some

99
00:04:27,419 --> 00:04:29,520
current inside of the chip die and could

100
00:04:29,520 --> 00:04:32,580
flip for example some bits in registers

101
00:04:32,580 --> 00:04:35,759
or in memory it could fastify the

102
00:04:35,759 --> 00:04:38,639
information that is transferred on the

103
00:04:38,639 --> 00:04:41,220
bus or there are for example other

104
00:04:41,220 --> 00:04:43,740
attacks in photo injections like the

105
00:04:43,740 --> 00:04:46,199
clock bleaching then for example we

106
00:04:46,199 --> 00:04:49,680
introduce also again a glitch an

107
00:04:49,680 --> 00:04:53,460
additional unexpected clock signal in

108
00:04:53,460 --> 00:04:56,780
the external clock of the Target that

109
00:04:56,780 --> 00:05:00,900
is out of the space range and enforces

110
00:05:00,900 --> 00:05:04,259
for example the CPU to try to execute

111
00:05:04,259 --> 00:05:05,960
the next common

112
00:05:05,960 --> 00:05:09,240
why for example data between the

113
00:05:09,240 --> 00:05:12,419
registers are not yet moved

114
00:05:12,419 --> 00:05:14,639
so this is something that can be

115
00:05:14,639 --> 00:05:17,840
exploited and there these were all

116
00:05:17,840 --> 00:05:19,860
non-destructive attacks against the

117
00:05:19,860 --> 00:05:22,320
targets but for example there is one the

118
00:05:22,320 --> 00:05:25,620
optical fault injection where you have

119
00:05:25,620 --> 00:05:27,419
to perform typically

120
00:05:27,419 --> 00:05:30,479
um cheap encapsulation to have a direct

121
00:05:30,479 --> 00:05:33,539
view to the chip die and use a focused

122
00:05:33,539 --> 00:05:35,580
laser to the right point on the cheap

123
00:05:35,580 --> 00:05:38,460
diode to the silicon and introduce

124
00:05:38,460 --> 00:05:43,320
glitches and forwards to the chip with

125
00:05:43,320 --> 00:05:46,800
Optical laser

126
00:05:47,460 --> 00:05:52,219
how it looks like oh coming back to the

127
00:05:52,320 --> 00:05:56,580
main graph here so this is a very

128
00:05:56,580 --> 00:05:58,259
generic representation of the forward

129
00:05:58,259 --> 00:06:00,240
injection there is something that the

130
00:06:00,240 --> 00:06:02,580
timeline that exists in case of every

131
00:06:02,580 --> 00:06:06,060
attack and there is a trigger point that

132
00:06:06,060 --> 00:06:08,120
belongs to the given attack it could be

133
00:06:08,120 --> 00:06:11,160
authentication probe it could be a

134
00:06:11,160 --> 00:06:14,220
povertent it could be anything that you

135
00:06:14,220 --> 00:06:18,919
can use precisely or as a starting point

136
00:06:18,919 --> 00:06:22,800
to fix your attack in time and using

137
00:06:22,800 --> 00:06:26,220
this trigger you start to count

138
00:06:26,220 --> 00:06:29,520
typically precisely so there is no

139
00:06:29,520 --> 00:06:33,180
Jitter enabled here to perform a

140
00:06:33,180 --> 00:06:34,919
successful attack and you start to count

141
00:06:34,919 --> 00:06:37,500
and after a specified amount of delay

142
00:06:37,500 --> 00:06:40,740
you execute the attack and the attack is

143
00:06:40,740 --> 00:06:43,380
depends on the forward injection type in

144
00:06:43,380 --> 00:06:46,139
case of what is glitching the green line

145
00:06:46,139 --> 00:06:49,440
here is the VCC the power of the

146
00:06:49,440 --> 00:06:52,500
microcontroller or the CPU in case of

147
00:06:52,500 --> 00:06:56,160
VCC and the voltage glitching you

148
00:06:56,160 --> 00:06:58,500
somehow

149
00:06:58,500 --> 00:07:01,080
insert glitch here this could be

150
00:07:01,080 --> 00:07:04,259
injected in several ways typically a

151
00:07:04,259 --> 00:07:06,479
very fast featuring mosfet is used for

152
00:07:06,479 --> 00:07:09,600
example to short the VCC line to ground

153
00:07:09,600 --> 00:07:13,199
and then basically for a very small

154
00:07:13,199 --> 00:07:16,639
amount of time it

155
00:07:16,639 --> 00:07:20,759
reduces the available power that is

156
00:07:20,759 --> 00:07:24,060
available and can be used for the CPU

157
00:07:24,060 --> 00:07:26,460
core and because of this it could

158
00:07:26,460 --> 00:07:29,340
malfunction if it is too long data is

159
00:07:29,340 --> 00:07:31,740
too long then there are built-in

160
00:07:31,740 --> 00:07:33,419
electronics and detection that can

161
00:07:33,419 --> 00:07:36,560
detect and react to the

162
00:07:36,560 --> 00:07:39,599
unexpected voltage changes and could for

163
00:07:39,599 --> 00:07:42,599
example reset the target itself so you

164
00:07:42,599 --> 00:07:45,360
have to be fast enough to be sure that

165
00:07:45,360 --> 00:07:47,940
your attack is not detected but long

166
00:07:47,940 --> 00:07:49,099
enough

167
00:07:49,099 --> 00:07:53,160
to have the right impact on the target

168
00:07:53,160 --> 00:07:55,620
in case of emfi the attack is basically

169
00:07:55,620 --> 00:07:58,199
the same the only difference is that you

170
00:07:58,199 --> 00:08:01,500
don't Target the voltage of the talk of

171
00:08:01,500 --> 00:08:03,900
the target microcontroller or CPU but

172
00:08:03,900 --> 00:08:07,680
you introduce electromagnetic poses but

173
00:08:07,680 --> 00:08:09,240
basically you have to follow the same

174
00:08:09,240 --> 00:08:11,039
approach wait for the trigger count

175
00:08:11,039 --> 00:08:13,440
until the specific delay then execute

176
00:08:13,440 --> 00:08:15,360
the attack with the right configuration

177
00:08:15,360 --> 00:08:17,099
and we will get back to this later

178
00:08:17,099 --> 00:08:20,400
against the target

179
00:08:20,400 --> 00:08:21,960
so

180
00:08:21,960 --> 00:08:25,020
fault injection in Notch continued what

181
00:08:25,020 --> 00:08:28,259
a successful attack could result in it's

182
00:08:28,259 --> 00:08:29,879
very interesting because no one expects

183
00:08:29,879 --> 00:08:33,599
this but a successful attack against a

184
00:08:33,599 --> 00:08:36,059
microcontroller or CPU could easily

185
00:08:36,059 --> 00:08:37,640
result in skipping an instruction

186
00:08:37,640 --> 00:08:40,260
changing in data that is being processed

187
00:08:40,260 --> 00:08:43,799
by the core so for example data that is

188
00:08:43,799 --> 00:08:46,440
transferred from memory to registers or

189
00:08:46,440 --> 00:08:48,540
the next instruction that is being

190
00:08:48,540 --> 00:08:54,019
fetched before executed so these are all

191
00:08:54,019 --> 00:08:57,779
folds that could happens and that could

192
00:08:57,779 --> 00:09:01,019
turn the code and command execution to a

193
00:09:01,019 --> 00:09:03,120
direction that is valuable for another

194
00:09:03,120 --> 00:09:06,060
care so what one key what can we do

195
00:09:06,060 --> 00:09:10,080
really with this so if you check for

196
00:09:10,080 --> 00:09:13,140
example Some Loops that you introduced

197
00:09:13,140 --> 00:09:15,920
in cool sections we will see it later

198
00:09:15,920 --> 00:09:19,800
where you specify a point that what you

199
00:09:19,800 --> 00:09:21,540
would like to exclude from the common

200
00:09:21,540 --> 00:09:24,899
execution then you can turn the whole

201
00:09:24,899 --> 00:09:27,000
firmware or code execution to a total

202
00:09:27,000 --> 00:09:29,339
different Ray and May maybe because of

203
00:09:29,339 --> 00:09:32,279
this you can bypass a security check you

204
00:09:32,279 --> 00:09:34,920
can re-enable for example a log debug

205
00:09:34,920 --> 00:09:36,200
interface

206
00:09:36,200 --> 00:09:41,040
you can basically do a lot of malicious

207
00:09:41,040 --> 00:09:42,899
stuff against the target

208
00:09:42,899 --> 00:09:44,880
there are typical tools that are often

209
00:09:44,880 --> 00:09:47,899
used to execute these Autos the most

210
00:09:47,899 --> 00:09:52,860
well-knowns are the new AIS AES products

211
00:09:52,860 --> 00:09:56,399
the GPS shift shelter Pico EMP tools

212
00:09:56,399 --> 00:09:58,880
Pico EMP is a quite

213
00:09:58,880 --> 00:10:03,420
a cheap one that can be also built by

214
00:10:03,420 --> 00:10:07,740
your own at home so it is a DI DIY

215
00:10:07,740 --> 00:10:11,700
friendly tool set and affordable for a

216
00:10:11,700 --> 00:10:14,580
robust as well the others are a little

217
00:10:14,580 --> 00:10:16,220
bit expensive

218
00:10:16,220 --> 00:10:19,519
Solutions especially if you go for more

219
00:10:19,519 --> 00:10:22,740
commercial and professional tools that

220
00:10:22,740 --> 00:10:25,019
are available on the market but you can

221
00:10:25,019 --> 00:10:26,600
also build your own

222
00:10:26,600 --> 00:10:29,580
Solutions and I will show you on the

223
00:10:29,580 --> 00:10:34,260
demo videos that how quite cheap and

224
00:10:34,260 --> 00:10:36,600
affordable products available on the

225
00:10:36,600 --> 00:10:38,700
market can be turned to effective

226
00:10:38,700 --> 00:10:40,920
glitchers

227
00:10:40,920 --> 00:10:44,459
so let's see how the glitching could

228
00:10:44,459 --> 00:10:47,100
work against some sample code basis so

229
00:10:47,100 --> 00:10:51,000
here we see two very trivial code Parts

230
00:10:51,000 --> 00:10:53,579
one with regards to Firmware checking

231
00:10:53,579 --> 00:10:55,740
and one with regards to authentication

232
00:10:55,740 --> 00:10:58,800
checking before doing anything in case

233
00:10:58,800 --> 00:11:00,660
of firmware checking for example when

234
00:11:00,660 --> 00:11:03,899
the target has a second reboot and the

235
00:11:03,899 --> 00:11:05,760
only boost the firmware that is

236
00:11:05,760 --> 00:11:08,279
digitally signed and verified prior to

237
00:11:08,279 --> 00:11:10,800
executing the firmware that could be

238
00:11:10,800 --> 00:11:13,320
depending on the implementation a check

239
00:11:13,320 --> 00:11:15,899
like this at the very beginning of the

240
00:11:15,899 --> 00:11:19,380
firmware and it checks for example the

241
00:11:19,380 --> 00:11:22,740
whole content stored in the Flash before

242
00:11:22,740 --> 00:11:24,660
execution and checks the signature

243
00:11:24,660 --> 00:11:27,420
whether it is proper or not and if not

244
00:11:27,420 --> 00:11:30,899
then it gets stuck in an endless loop

245
00:11:30,899 --> 00:11:33,839
still problem solved if there is a

246
00:11:33,839 --> 00:11:37,140
unexpected custom firmware deployed to

247
00:11:37,140 --> 00:11:39,959
the Target Hardware then no one expects

248
00:11:39,959 --> 00:11:43,320
that the non-trusted firmware can be

249
00:11:43,320 --> 00:11:46,620
executed right let's see that later

250
00:11:46,620 --> 00:11:49,260
there is another solution here where

251
00:11:49,260 --> 00:11:51,240
before executing a privileged

252
00:11:51,240 --> 00:11:55,019
functionality we check whether the given

253
00:11:55,019 --> 00:11:57,180
session or user or whatever else is

254
00:11:57,180 --> 00:12:00,320
authenticated or not and only

255
00:12:00,320 --> 00:12:03,480
access to that given functionality is

256
00:12:03,480 --> 00:12:06,420
possible if the right conditions are

257
00:12:06,420 --> 00:12:08,839
present but what if

258
00:12:08,839 --> 00:12:11,640
we introduced forward injection and

259
00:12:11,640 --> 00:12:15,779
Target these codes by fi in the given

260
00:12:15,779 --> 00:12:18,540
sections so by introducing for example a

261
00:12:18,540 --> 00:12:20,240
forward injection attack at that point

262
00:12:20,240 --> 00:12:23,279
as we learned in the previous slides we

263
00:12:23,279 --> 00:12:24,540
can

264
00:12:24,540 --> 00:12:28,079
skip an instruction what happens if in

265
00:12:28,079 --> 00:12:32,220
the endless loop I skip as a result of a

266
00:12:32,220 --> 00:12:34,399
forward injection attack an instruction

267
00:12:34,399 --> 00:12:38,220
that jumps back to the beginning of the

268
00:12:38,220 --> 00:12:41,279
loop then we will break out from the

269
00:12:41,279 --> 00:12:43,200
endless loop and continue the firmware

270
00:12:43,200 --> 00:12:45,000
execution there

271
00:12:45,000 --> 00:12:46,860
or what happens here

272
00:12:46,860 --> 00:12:51,360
if the authenticated subroutine is

273
00:12:51,360 --> 00:12:53,459
forced then basically scientific

274
00:12:53,459 --> 00:12:56,880
functionality is not stored but if we

275
00:12:56,880 --> 00:12:59,880
are able to manipulate somehow the

276
00:12:59,880 --> 00:13:02,160
result of this

277
00:13:02,160 --> 00:13:04,200
Evolution and get back a different

278
00:13:04,200 --> 00:13:05,760
result because the forward injection

279
00:13:05,760 --> 00:13:08,820
attack then we can get to this

280
00:13:08,820 --> 00:13:10,800
functionality and call a previous

281
00:13:10,800 --> 00:13:12,959
function without actually being

282
00:13:12,959 --> 00:13:15,959
authenticated so this is why forward

283
00:13:15,959 --> 00:13:18,620
injection is very powerful because

284
00:13:18,620 --> 00:13:23,279
software based security can be bypassed

285
00:13:23,279 --> 00:13:27,079
by hardware-based otaks

286
00:13:27,300 --> 00:13:29,519
I have prepared two demos for you as I

287
00:13:29,519 --> 00:13:32,459
noted one will be executed against the

288
00:13:32,459 --> 00:13:34,560
threshold one Hardware crypto wallet and

289
00:13:34,560 --> 00:13:37,620
another one will be executed against the

290
00:13:37,620 --> 00:13:40,740
automotive UDS diagnostic service that

291
00:13:40,740 --> 00:13:44,519
is running on a custom ECU so the first

292
00:13:44,519 --> 00:13:47,339
one is to unlock the microcontroller

293
00:13:47,339 --> 00:13:50,459
using the treasure one to basically

294
00:13:50,459 --> 00:13:53,700
regain debug access and control over the

295
00:13:53,700 --> 00:13:56,459
microcontroller unit with the swd access

296
00:13:56,459 --> 00:13:58,980
the second one is to bypass an

297
00:13:58,980 --> 00:14:02,940
authentication that is checked before

298
00:14:02,940 --> 00:14:05,519
executing a privileged functionality to

299
00:14:05,519 --> 00:14:08,519
in such case let us open a door in a car

300
00:14:08,519 --> 00:14:11,220
uh important to note that these are not

301
00:14:11,220 --> 00:14:14,100
novel attacks and no novel hacks here

302
00:14:14,100 --> 00:14:15,779
these are just selected for

303
00:14:15,779 --> 00:14:17,700
demonstration purposes and there are

304
00:14:17,700 --> 00:14:20,160
some relevant work in this area that

305
00:14:20,160 --> 00:14:21,800
were already done and

306
00:14:21,800 --> 00:14:25,860
presented prior to this presentation but

307
00:14:25,860 --> 00:14:28,920
uh basically in this setup there is a

308
00:14:28,920 --> 00:14:30,360
total different tool set and

309
00:14:30,360 --> 00:14:32,760
implementation and other approach to

310
00:14:32,760 --> 00:14:33,959
Target this

311
00:14:33,959 --> 00:14:36,839
so let's go into the details

312
00:14:36,839 --> 00:14:38,940
I think all of you know this target this

313
00:14:38,940 --> 00:14:41,339
is a Trestle one when on crypto wallet

314
00:14:41,339 --> 00:14:43,620
open source open Hardware very nice

315
00:14:43,620 --> 00:14:46,320
stuff by the way they have a very good

316
00:14:46,320 --> 00:14:48,360
and responsive team they react to

317
00:14:48,360 --> 00:14:51,600
security issues they are quite fast and

318
00:14:51,600 --> 00:14:53,279
the development they did with the

319
00:14:53,279 --> 00:14:55,380
firmware is very good so they they have

320
00:14:55,380 --> 00:14:57,060
a quality firmware so from software

321
00:14:57,060 --> 00:14:58,820
perspective it is very nice

322
00:14:58,820 --> 00:15:02,339
uh there you can see also some security

323
00:15:02,339 --> 00:15:05,519
features and content measures they use

324
00:15:05,519 --> 00:15:07,680
for further information and details you

325
00:15:07,680 --> 00:15:09,720
can also go to the official site and

326
00:15:09,720 --> 00:15:13,199
check the details so

327
00:15:13,199 --> 00:15:18,120
it could be a secure device by by

328
00:15:18,120 --> 00:15:21,000
assuming that everything works properly

329
00:15:21,000 --> 00:15:23,519
and appropriately based on the spec and

330
00:15:23,519 --> 00:15:26,459
the definitions so let's see what kind

331
00:15:26,459 --> 00:15:28,440
of microcontrollers they have and what

332
00:15:28,440 --> 00:15:30,360
kind of security features it provides

333
00:15:30,360 --> 00:15:34,620
the sem 32205 is a generic purpose

334
00:15:34,620 --> 00:15:36,660
microcontroller basically it has a

335
00:15:36,660 --> 00:15:39,720
security feature called RDP read data

336
00:15:39,720 --> 00:15:42,120
protection read protection and it has

337
00:15:42,120 --> 00:15:44,399
basically three different levels level

338
00:15:44,399 --> 00:15:47,639
zero where there is no protection so

339
00:15:47,639 --> 00:15:49,940
everything is allowed you can connect to

340
00:15:49,940 --> 00:15:53,880
the bootron you can to the bootloader

341
00:15:53,880 --> 00:15:56,240
you can connect to the

342
00:15:56,240 --> 00:16:00,420
swd to the debug interface you can

343
00:16:00,420 --> 00:16:03,060
refresh the content you can extract the

344
00:16:03,060 --> 00:16:04,380
content and so on so there is no

345
00:16:04,380 --> 00:16:07,040
protection there is rdp1

346
00:16:07,040 --> 00:16:10,740
where the access to the debug interface

347
00:16:10,740 --> 00:16:12,720
still exist but this is quite limited so

348
00:16:12,720 --> 00:16:14,760
you still have access to the RAM for

349
00:16:14,760 --> 00:16:16,500
example but don't have access to the

350
00:16:16,500 --> 00:16:20,699
flash still you can refresh the device

351
00:16:20,699 --> 00:16:25,019
but that will for first Purge and most

352
00:16:25,019 --> 00:16:28,019
Aries the content and then you can write

353
00:16:28,019 --> 00:16:29,959
a new firmware to that

354
00:16:29,959 --> 00:16:34,500
most important info is that firmware and

355
00:16:34,500 --> 00:16:36,720
store secrets in Flash cannot be

356
00:16:36,720 --> 00:16:39,000
extracted and there is level two a

357
00:16:39,000 --> 00:16:41,279
complete lock and the hardened version

358
00:16:41,279 --> 00:16:44,699
then everything is logged and protected

359
00:16:44,699 --> 00:16:47,579
it is not possible to connect to the

360
00:16:47,579 --> 00:16:49,860
bootloader it is not possible to connect

361
00:16:49,860 --> 00:16:52,980
to the debug interface and the Flash is

362
00:16:52,980 --> 00:16:55,560
of course protected

363
00:16:55,560 --> 00:16:59,759
so beside protect it it is irreversible

364
00:16:59,759 --> 00:17:02,699
I don't know how much it is readable but

365
00:17:02,699 --> 00:17:05,280
as soon as you turn your microcontroller

366
00:17:05,280 --> 00:17:08,760
to rdp2 it is irreversible as per the

367
00:17:08,760 --> 00:17:10,020
data sheet

368
00:17:10,020 --> 00:17:12,679
another important thing is that the

369
00:17:12,679 --> 00:17:15,959
status of the RDP is coming from option

370
00:17:15,959 --> 00:17:19,319
Buys in case of option byte a a this is

371
00:17:19,319 --> 00:17:23,459
RDP level zero no protection c c that's

372
00:17:23,459 --> 00:17:25,500
level two complete lock and anything

373
00:17:25,500 --> 00:17:30,360
else but AA or CC it is level one

374
00:17:30,360 --> 00:17:33,320
so what can we do with this

375
00:17:33,320 --> 00:17:35,039
would be

376
00:17:35,039 --> 00:17:39,299
to downgrade somehow our Target to rdp1

377
00:17:39,299 --> 00:17:44,030
because a single bit change from CC

378
00:17:44,030 --> 00:17:46,559
[Music]

379
00:17:46,559 --> 00:17:49,140
anything will be changed from CC will

380
00:17:49,140 --> 00:17:52,980
let us downgrade to RDP 1 or if we are

381
00:17:52,980 --> 00:17:55,340
super lucky then

382
00:17:55,340 --> 00:17:59,940
to RDP 0 but most probably to rdp1

383
00:17:59,940 --> 00:18:03,980
so let's see what can we do with this

384
00:18:03,980 --> 00:18:07,080
this is how a booting of the

385
00:18:07,080 --> 00:18:09,299
microcontroller looks like and there is

386
00:18:09,299 --> 00:18:11,780
a bunch of information here I'm going to

387
00:18:11,780 --> 00:18:15,480
explain the details so the option bites

388
00:18:15,480 --> 00:18:17,280
in modern microcontrollers and

389
00:18:17,280 --> 00:18:20,220
configurations tend to be stored not in

390
00:18:20,220 --> 00:18:22,919
fuses that are just configured one time

391
00:18:22,919 --> 00:18:24,980
but in Flash

392
00:18:24,980 --> 00:18:28,740
so they are referring sometimes to them

393
00:18:28,740 --> 00:18:31,559
as fuses but actually they are not fuses

394
00:18:31,559 --> 00:18:34,140
they are stored in Flash that will be

395
00:18:34,140 --> 00:18:37,140
important later the boot process looks

396
00:18:37,140 --> 00:18:39,720
like this in case of a microcontroller

397
00:18:39,720 --> 00:18:42,179
whenever it receive a power it starts to

398
00:18:42,179 --> 00:18:43,919
prepare the internal peripheral

399
00:18:43,919 --> 00:18:46,860
peripherals and the whole architecture

400
00:18:46,860 --> 00:18:51,600
for be ready for execute commands as

401
00:18:51,600 --> 00:18:54,299
soon as every internal started buying

402
00:18:54,299 --> 00:18:57,900
configuration is ready the reset line

403
00:18:57,900 --> 00:19:02,520
the negated reset line from low goes to

404
00:19:02,520 --> 00:19:06,480
high and this is the point from where

405
00:19:06,480 --> 00:19:10,799
the core of the target the CPU starts to

406
00:19:10,799 --> 00:19:13,620
execute commands so the yellow line is

407
00:19:13,620 --> 00:19:16,320
the reset line that you see here the

408
00:19:16,320 --> 00:19:20,340
blue or grayish line is the voltage of

409
00:19:20,340 --> 00:19:24,059
the core of the target so as you can see

410
00:19:24,059 --> 00:19:25,860
as we

411
00:19:25,860 --> 00:19:28,500
hit this point when the microcontroller

412
00:19:28,500 --> 00:19:31,620
started it starts to process something

413
00:19:31,620 --> 00:19:37,700
and the pattern changes here and here

414
00:19:37,700 --> 00:19:41,220
basically there is a boot room burned in

415
00:19:41,220 --> 00:19:43,880
to the microcontroller so it starts to

416
00:19:43,880 --> 00:19:47,460
execute the boot run for first and after

417
00:19:47,460 --> 00:19:50,160
that it reaches a point

418
00:19:50,160 --> 00:19:54,059
here it will start to access the Flash

419
00:19:54,059 --> 00:19:57,240
and load content from The Flash and

420
00:19:57,240 --> 00:20:00,059
because accessing Flash and reading out

421
00:20:00,059 --> 00:20:02,700
information in the flash is consuming

422
00:20:02,700 --> 00:20:05,120
more power this is why you see different

423
00:20:05,120 --> 00:20:09,600
uh voltages and the bigger fluctuation

424
00:20:09,600 --> 00:20:13,080
on the voltage line it is important to

425
00:20:13,080 --> 00:20:15,480
note that to get this kind of

426
00:20:15,480 --> 00:20:18,059
information you have to remove some

427
00:20:18,059 --> 00:20:20,880
components from the board because

428
00:20:20,880 --> 00:20:24,000
decoupling capacitors usually flattened

429
00:20:24,000 --> 00:20:27,120
now decoupling capacitors have the

430
00:20:27,120 --> 00:20:30,840
target to be stable even if there is a

431
00:20:30,840 --> 00:20:34,440
small variance in the voltages but that

432
00:20:34,440 --> 00:20:36,780
is for us for analyzing and for attack

433
00:20:36,780 --> 00:20:39,660
is bad because capacitors are working

434
00:20:39,660 --> 00:20:42,179
against us so we have to remove these

435
00:20:42,179 --> 00:20:43,980
decoupling capacitors at the right point

436
00:20:43,980 --> 00:20:46,140
and now we can see something like this

437
00:20:46,140 --> 00:20:48,840
and we can perform attack effectively so

438
00:20:48,840 --> 00:20:50,820
here we know that the most probably

439
00:20:50,820 --> 00:20:54,120
Flash access is happening probably it

440
00:20:54,120 --> 00:20:56,820
reads the configuration and option buys

441
00:20:56,820 --> 00:21:00,780
here and after that if everything is up

442
00:21:00,780 --> 00:21:02,760
and running and the configured according

443
00:21:02,760 --> 00:21:04,740
to the store settings the application

444
00:21:04,740 --> 00:21:07,080
code the exother firmware is started to

445
00:21:07,080 --> 00:21:10,559
be executed so we have from the actual

446
00:21:10,559 --> 00:21:13,140
start of execution of the bootstrom to

447
00:21:13,140 --> 00:21:16,940
The Flash access about 200 microseconds

448
00:21:16,940 --> 00:21:21,960
to rate so this is probably the time we

449
00:21:21,960 --> 00:21:24,120
have to wait until we execute the attack

450
00:21:24,120 --> 00:21:27,720
then we have this amount of time which

451
00:21:27,720 --> 00:21:29,880
you can see the horizontal scale is

452
00:21:29,880 --> 00:21:32,760
about 50 microseconds and this is about

453
00:21:32,760 --> 00:21:35,640
one slot so it is about a 50 microsecond

454
00:21:35,640 --> 00:21:37,260
slot

455
00:21:37,260 --> 00:21:41,580
to execute the attack the glitch itself

456
00:21:41,580 --> 00:21:44,820
and let's see what I think what we can

457
00:21:44,820 --> 00:21:47,280
do with this and how to achieve that

458
00:21:47,280 --> 00:21:50,460
going after the details in the data

459
00:21:50,460 --> 00:21:52,740
sheet you can see how the power supply

460
00:21:52,740 --> 00:21:55,919
looks like a power supply chain look

461
00:21:55,919 --> 00:21:59,159
like and the Target and basically it can

462
00:21:59,159 --> 00:22:01,799
be figured out that there is a point V

463
00:22:01,799 --> 00:22:04,260
cap one and vcam 2 where we can

464
00:22:04,260 --> 00:22:06,600
basically have direct access to the

465
00:22:06,600 --> 00:22:10,140
internal course voltage so if we have

466
00:22:10,140 --> 00:22:12,659
access to these capacitors that are

467
00:22:12,659 --> 00:22:14,600
installed to that pins and remove those

468
00:22:14,600 --> 00:22:18,720
then we can perform glitching directly

469
00:22:18,720 --> 00:22:20,880
on the core wattage that is very

470
00:22:20,880 --> 00:22:23,840
important because other voltages

471
00:22:23,840 --> 00:22:27,600
provided from external pins other than

472
00:22:27,600 --> 00:22:31,620
these pins will be sent through the

473
00:22:31,620 --> 00:22:34,740
internal voltage regulator that will

474
00:22:34,740 --> 00:22:37,380
basically filter out kind of our attacks

475
00:22:37,380 --> 00:22:40,140
and glitches and we need to directly

476
00:22:40,140 --> 00:22:42,780
have impact with the better results and

477
00:22:42,780 --> 00:22:45,020
the better

478
00:22:45,020 --> 00:22:48,480
quality glitching directly on the canal

479
00:22:48,480 --> 00:22:49,919
the CPU

480
00:22:49,919 --> 00:22:53,460
so going after the data sheet the

481
00:22:53,460 --> 00:22:55,500
schematic and the PCV because it is Open

482
00:22:55,500 --> 00:22:57,659
Source Hardware it is quite easy to

483
00:22:57,659 --> 00:23:01,799
locate the right config right capacitors

484
00:23:01,799 --> 00:23:05,900
at the schematic figure them on the PCB

485
00:23:05,900 --> 00:23:09,080
and also identify all of those

486
00:23:09,080 --> 00:23:11,700
additional points that will be

487
00:23:11,700 --> 00:23:16,200
interesting in the autok so we need svdx

488
00:23:16,200 --> 00:23:19,380
access for the debug and we need the

489
00:23:19,380 --> 00:23:24,120
core voltage to Target basically the

490
00:23:24,120 --> 00:23:27,299
device so this is what you can see here

491
00:23:27,299 --> 00:23:29,640
the interesting points and capacitors

492
00:23:29,640 --> 00:23:32,460
that need to be removed additional ones

493
00:23:32,460 --> 00:23:34,740
for example installed to the reset line

494
00:23:34,740 --> 00:23:38,100
needs to be also removed because it has

495
00:23:38,100 --> 00:23:41,280
direct impact on the curve on the reset

496
00:23:41,280 --> 00:23:43,919
and as we are planning to trigger our

497
00:23:43,919 --> 00:23:46,679
attack to the reset the this capacitor

498
00:23:46,679 --> 00:23:50,580
also works against us so after removing

499
00:23:50,580 --> 00:23:53,240
these components a picture for the scale

500
00:23:53,240 --> 00:23:55,620
so you have to work with this kind of

501
00:23:55,620 --> 00:23:58,020
small SMD capacitors or even smaller

502
00:23:58,020 --> 00:24:01,020
ones the target is ready for being

503
00:24:01,020 --> 00:24:03,020
evaluated and

504
00:24:03,020 --> 00:24:05,820
just a pro tip because I ran into

505
00:24:05,820 --> 00:24:08,700
troubles previously sometimes I always

506
00:24:08,700 --> 00:24:11,820
use a Target device that survived your

507
00:24:11,820 --> 00:24:13,980
preparation and don't spend hours on

508
00:24:13,980 --> 00:24:16,860
debugging on why the target chip did not

509
00:24:16,860 --> 00:24:19,080
react to the attack

510
00:24:19,080 --> 00:24:20,280
so

511
00:24:20,280 --> 00:24:24,299
let's see how the test setup looked like

512
00:24:24,299 --> 00:24:26,940
and I hope you understand now why I did

513
00:24:26,940 --> 00:24:29,280
not provide you a real life attack here

514
00:24:29,280 --> 00:24:31,980
this is not that kind of setup that is

515
00:24:31,980 --> 00:24:35,000
easy to move or transfer very

516
00:24:35,000 --> 00:24:40,140
stands off to every move and uh short uh

517
00:24:40,140 --> 00:24:42,900
small changes so we have basically a

518
00:24:42,900 --> 00:24:44,700
Raspberry Pi that controls the whole

519
00:24:44,700 --> 00:24:46,620
attack it has a Jupiter notebook running

520
00:24:46,620 --> 00:24:49,260
from there with a custom python script I

521
00:24:49,260 --> 00:24:50,840
can control everything

522
00:24:50,840 --> 00:24:53,159
there is a threshold one of course which

523
00:24:53,159 --> 00:24:54,679
is the target

524
00:24:54,679 --> 00:24:58,799
fpga this is the istick development

525
00:24:58,799 --> 00:25:03,360
board where I have a custom verilog and

526
00:25:03,360 --> 00:25:07,200
a bit stream downloaded to the fpga that

527
00:25:07,200 --> 00:25:10,919
is acting as a precise timer to from the

528
00:25:10,919 --> 00:25:15,020
trigger to execute the actual glitching

529
00:25:15,020 --> 00:25:19,140
there is a duty interface that I'm

530
00:25:19,140 --> 00:25:20,220
running

531
00:25:20,220 --> 00:25:23,640
as the GDB server server this is

532
00:25:23,640 --> 00:25:26,700
connected to the treasure one it runs by

533
00:25:26,700 --> 00:25:29,700
the way at this setup Blackmagic probe

534
00:25:29,700 --> 00:25:33,659
open source firmware and this is used to

535
00:25:33,659 --> 00:25:35,940
access the debug interface once it is

536
00:25:35,940 --> 00:25:37,919
unlocked there is a glitch in

537
00:25:37,919 --> 00:25:39,900
electronics which contains the analog

538
00:25:39,900 --> 00:25:42,720
multiplexers to fast switching between

539
00:25:42,720 --> 00:25:45,900
different input voltages and antenna

540
00:25:45,900 --> 00:25:49,559
mosfets to let us short the voltage to

541
00:25:49,559 --> 00:25:50,400
ground

542
00:25:50,400 --> 00:25:52,980
and of course we have some oscilloscope

543
00:25:52,980 --> 00:25:55,440
probes connected to the right and

544
00:25:55,440 --> 00:25:57,840
interesting points to trigger to watch

545
00:25:57,840 --> 00:26:01,799
how the the setup works and how the

546
00:26:01,799 --> 00:26:03,779
process is going on

547
00:26:03,779 --> 00:26:06,120
so quick recap on on the setup and how

548
00:26:06,120 --> 00:26:08,940
it is being executed the attack the

549
00:26:08,940 --> 00:26:10,980
Raspberry Pi controls everything it is

550
00:26:10,980 --> 00:26:14,100
connected to the remote GDB service on

551
00:26:14,100 --> 00:26:18,299
the Dual board the fpga is configured by

552
00:26:18,299 --> 00:26:21,779
the Jupiter notebook as well and the

553
00:26:21,779 --> 00:26:23,940
Raspberry Pi is also responsible on the

554
00:26:23,940 --> 00:26:27,600
power cycle of the target so whenever it

555
00:26:27,600 --> 00:26:30,380
is needed after executing every attack

556
00:26:30,380 --> 00:26:33,480
it turns off and on the power to the

557
00:26:33,480 --> 00:26:34,380
Target

558
00:26:34,380 --> 00:26:38,220
and the fpga as soon as the MCU is

559
00:26:38,220 --> 00:26:41,460
recovering after power on triggered by

560
00:26:41,460 --> 00:26:43,980
the reset line starts to count and after

561
00:26:43,980 --> 00:26:46,860
hitting the garage delay right delay it

562
00:26:46,860 --> 00:26:48,960
will control the glitcher electronics

563
00:26:48,960 --> 00:26:52,500
and in their right glitch with changing

564
00:26:52,500 --> 00:26:55,140
pools lengths and changing delay to the

565
00:26:55,140 --> 00:26:56,159
Target

566
00:26:56,159 --> 00:26:59,880
so this is how it looks like

567
00:26:59,880 --> 00:27:03,020
and let's see

568
00:27:07,260 --> 00:27:10,100
the demo

569
00:27:25,679 --> 00:27:28,700
so the demo

570
00:27:33,779 --> 00:27:36,500
yep

571
00:27:41,580 --> 00:27:44,520
so this is a test setup

572
00:27:44,520 --> 00:27:47,480
does it run

573
00:27:54,120 --> 00:27:56,899
oh come on

574
00:28:01,380 --> 00:28:03,919
okay

575
00:28:04,020 --> 00:28:06,320
the test setup that contains basically

576
00:28:06,320 --> 00:28:10,400
the Jupiter notebook the external camera

577
00:28:10,400 --> 00:28:13,260
for the Target and what I do is

578
00:28:13,260 --> 00:28:14,700
basically walking through on the custom

579
00:28:14,700 --> 00:28:17,220
code I implemented here just executing

580
00:28:17,220 --> 00:28:19,140
them this is just kind of some kind of

581
00:28:19,140 --> 00:28:22,860
function supporting the target here I

582
00:28:22,860 --> 00:28:25,320
open basically a GDB session for the

583
00:28:25,320 --> 00:28:29,220
remote service and they're basically

584
00:28:29,220 --> 00:28:31,440
just checking whether SVD is available

585
00:28:31,440 --> 00:28:33,419
at the moment or not

586
00:28:33,419 --> 00:28:36,059
and hopefully it will confirm us soon

587
00:28:36,059 --> 00:28:37,679
that

588
00:28:37,679 --> 00:28:42,059
yes as we the so the debug access is not

589
00:28:42,059 --> 00:28:45,900
available so we are going forward these

590
00:28:45,900 --> 00:28:49,080
are really just supporting stuff for the

591
00:28:49,080 --> 00:28:51,659
fpga and configuration and this is the

592
00:28:51,659 --> 00:28:55,020
settings that I use in the big Loops

593
00:28:55,020 --> 00:28:57,980
that iterates over the various

594
00:28:57,980 --> 00:29:00,299
glitching settings with regards to the

595
00:29:00,299 --> 00:29:03,779
delay the repeats the pools with changes

596
00:29:03,779 --> 00:29:06,960
and so on so after executing the

597
00:29:06,960 --> 00:29:10,200
effective Auto at this point you can see

598
00:29:10,200 --> 00:29:12,840
that the scope started to change and

599
00:29:12,840 --> 00:29:14,059
update

600
00:29:14,059 --> 00:29:18,059
the waves and the treasury started to

601
00:29:18,059 --> 00:29:21,240
reboot so after every glitch attempt the

602
00:29:21,240 --> 00:29:24,480
target is rebooted and the glitch

603
00:29:24,480 --> 00:29:26,700
setting is iterated to the next one and

604
00:29:26,700 --> 00:29:30,240
the other continued continued continued

605
00:29:30,240 --> 00:29:33,539
until we finally reach the attack so our

606
00:29:33,539 --> 00:29:35,720
the center line is about 200

607
00:29:35,720 --> 00:29:38,820
microseconds from the trigger this is

608
00:29:38,820 --> 00:29:42,720
zoomed in the cold wattage unfortunately

609
00:29:42,720 --> 00:29:44,039
because of the light this is not that

610
00:29:44,039 --> 00:29:46,080
visible but there is a big drop down

611
00:29:46,080 --> 00:29:48,600
here close to ground in the course what

612
00:29:48,600 --> 00:29:50,539
if this is the glitch that we introduced

613
00:29:50,539 --> 00:29:53,360
and we are triggering on the reset line

614
00:29:53,360 --> 00:29:57,240
and basically we are continuously

615
00:29:57,240 --> 00:29:59,880
increasing the delay from the specified

616
00:29:59,880 --> 00:30:03,240
specified amount of time the width of

617
00:30:03,240 --> 00:30:05,100
the Poor's length and so on and we are

618
00:30:05,100 --> 00:30:07,919
iterating over and over and over on the

619
00:30:07,919 --> 00:30:11,279
configuration and here I am speeding up

620
00:30:11,279 --> 00:30:16,260
a bit the video because there are two

621
00:30:16,260 --> 00:30:18,179
time consuming part of the forward

622
00:30:18,179 --> 00:30:20,340
injection attacks one is the preparation

623
00:30:20,340 --> 00:30:22,500
and another one is the execution wait

624
00:30:22,500 --> 00:30:26,640
until it gets succeeded so and this is a

625
00:30:26,640 --> 00:30:28,500
very well fine-tuned people the

626
00:30:28,500 --> 00:30:30,059
environment so I made a lot of

627
00:30:30,059 --> 00:30:33,679
experience to find a sweet spots

628
00:30:33,679 --> 00:30:36,899
so usually you leave your environment

629
00:30:36,899 --> 00:30:39,299
and the equipment even four days or

630
00:30:39,299 --> 00:30:43,320
weeks to find the right configuration

631
00:30:43,320 --> 00:30:47,700
so getting closer to the

632
00:30:47,700 --> 00:30:50,100
end of the video hopefully somewhere

633
00:30:50,100 --> 00:30:51,480
here

634
00:30:51,480 --> 00:30:55,279
we will find a sweet spot where our

635
00:30:55,279 --> 00:31:01,380
Target finally found swd access on the

636
00:31:01,380 --> 00:31:05,159
target so it is now the common execution

637
00:31:05,159 --> 00:31:07,980
stopped because we attached our debugger

638
00:31:07,980 --> 00:31:11,700
to the Target so using the GDB session

639
00:31:11,700 --> 00:31:15,659
I'm now executing done binary memory

640
00:31:15,659 --> 00:31:18,779
command and basically dumps out the

641
00:31:18,779 --> 00:31:21,000
memory of the content and what you can

642
00:31:21,000 --> 00:31:25,320
see it is loaded back from the dumped

643
00:31:25,320 --> 00:31:29,100
file this is nothing else but the USB

644
00:31:29,100 --> 00:31:31,620
class memory structure that you can also

645
00:31:31,620 --> 00:31:34,620
find for example in

646
00:31:34,620 --> 00:31:38,699
the treasures code

647
00:31:43,679 --> 00:31:45,299
so what it means

648
00:31:45,299 --> 00:31:47,940
we successfully done graded rdp2 to

649
00:31:47,940 --> 00:31:50,360
rdp-1 got access to the Target

650
00:31:50,360 --> 00:31:53,460
microcontroller which provided us

651
00:31:53,460 --> 00:31:57,500
partial access to Parts like the Astron

652
00:31:57,500 --> 00:32:00,840
in such case because of the fender

653
00:32:00,840 --> 00:32:03,899
version running on the trezor was not

654
00:32:03,899 --> 00:32:06,840
vulnerable no sensitive information was

655
00:32:06,840 --> 00:32:10,559
accessible in this trezor however

656
00:32:10,559 --> 00:32:12,960
private versions of the firmware are

657
00:32:12,960 --> 00:32:14,640
suffering from different vulnerabilities

658
00:32:14,640 --> 00:32:17,640
that makes act access and extraction of

659
00:32:17,640 --> 00:32:21,419
sensitive data like the pin or the

660
00:32:21,419 --> 00:32:22,760
passphrase

661
00:32:22,760 --> 00:32:26,059
possible with this kind of access so

662
00:32:26,059 --> 00:32:29,520
unpatched Hardware unpatched resource

663
00:32:29,520 --> 00:32:32,880
are still vulnerable so with the updated

664
00:32:32,880 --> 00:32:35,100
and patched versions you might expect

665
00:32:35,100 --> 00:32:39,480
that you are safe but there is another

666
00:32:39,480 --> 00:32:43,020
way to move forward because as

667
00:32:43,020 --> 00:32:46,679
introducing an additional age and for

668
00:32:46,679 --> 00:32:49,320
example Auto King the bootloader itself

669
00:32:49,320 --> 00:32:52,620
and the bootloaders read memory command

670
00:32:52,620 --> 00:32:55,980
you can basically bypass the security

671
00:32:55,980 --> 00:32:57,899
checks applied on the read memory

672
00:32:57,899 --> 00:33:00,600
command that checks whether you are an

673
00:33:00,600 --> 00:33:04,980
RDP 0 or rdp1 and extract The Flash

674
00:33:04,980 --> 00:33:08,640
content and from that moment if you are

675
00:33:08,640 --> 00:33:11,520
not using passphrase on the treasure

676
00:33:11,520 --> 00:33:13,919
then basically it is quite easy to Brute

677
00:33:13,919 --> 00:33:15,559
Force the pin and

678
00:33:15,559 --> 00:33:19,200
access the sensitive information there

679
00:33:19,200 --> 00:33:22,200
important to note that it was just a

680
00:33:22,200 --> 00:33:24,539
good candidate the Tresor to demonstrate

681
00:33:24,539 --> 00:33:27,360
the talk and the effectiveness of such

682
00:33:27,360 --> 00:33:28,580
an attack

683
00:33:28,580 --> 00:33:32,220
but it does not directly belong to the

684
00:33:32,220 --> 00:33:33,419
treasure it belongs to the

685
00:33:33,419 --> 00:33:36,120
microcontroller and every product that

686
00:33:36,120 --> 00:33:39,240
is using this kind of microcontrollers

687
00:33:39,240 --> 00:33:41,220
or other microcontractors that are

688
00:33:41,220 --> 00:33:43,320
suffering from the same attacks

689
00:33:43,320 --> 00:33:45,059
so let's move forward and talk about

690
00:33:45,059 --> 00:33:46,940
emfi

691
00:33:46,940 --> 00:33:49,919
electromagnetic quality injections

692
00:33:49,919 --> 00:33:52,320
and I'm trying to speed up to make sure

693
00:33:52,320 --> 00:33:54,120
that we can fit into the time so we are

694
00:33:54,120 --> 00:33:56,279
targeting the ECU that is a small

695
00:33:56,279 --> 00:34:00,659
component in a car in such case to do

696
00:34:00,659 --> 00:34:03,019
not harm any vendor

697
00:34:03,019 --> 00:34:05,880
we are using our own ECU that we

698
00:34:05,880 --> 00:34:07,559
developed for our car hacking training

699
00:34:07,559 --> 00:34:10,139
environment but basically it runs a

700
00:34:10,139 --> 00:34:11,820
similar feature similar functionalities

701
00:34:11,820 --> 00:34:14,879
it has a diagnostic xtp anything else

702
00:34:14,879 --> 00:34:18,839
that are often used in automotive and we

703
00:34:18,839 --> 00:34:21,780
are trying to attack this because in

704
00:34:21,780 --> 00:34:23,580
diagnostic there are protected and

705
00:34:23,580 --> 00:34:25,980
sensitive routines and functions that

706
00:34:25,980 --> 00:34:27,599
can be called only after a successful

707
00:34:27,599 --> 00:34:30,540
authentication via security access and

708
00:34:30,540 --> 00:34:31,859
we are trying to bypass the

709
00:34:31,859 --> 00:34:34,859
authentication on this so quick security

710
00:34:34,859 --> 00:34:37,080
access one-on-one just to understand

711
00:34:37,080 --> 00:34:38,719
what you will see on the packets

712
00:34:38,719 --> 00:34:41,159
basically to the challenge response base

713
00:34:41,159 --> 00:34:43,159
the authentication

714
00:34:43,159 --> 00:34:46,800
the seed that is used for that is a 27

715
00:34:46,800 --> 00:34:49,080
so basically this is how it looks like

716
00:34:49,080 --> 00:34:51,899
the client and sends 27 plus the

717
00:34:51,899 --> 00:34:53,960
security level identifier

718
00:34:53,960 --> 00:34:58,680
like 2701 for that the server responds

719
00:34:58,680 --> 00:35:00,359
with positive response which is always

720
00:35:00,359 --> 00:35:04,140
hex 40 plus to the request instead so 27

721
00:35:04,140 --> 00:35:06,260
x 40 meaning

722
00:35:06,260 --> 00:35:12,359
67 so 67 then repeating the same value

723
00:35:12,359 --> 00:35:15,359
and something that is in such case the

724
00:35:15,359 --> 00:35:17,640
seed so this is a seed that we received

725
00:35:17,640 --> 00:35:21,540
from the remote service and the client

726
00:35:21,540 --> 00:35:24,720
then calculates the right key for the

727
00:35:24,720 --> 00:35:26,640
given seed and sends out the secret

728
00:35:26,640 --> 00:35:30,839
security access send key message with

729
00:35:30,839 --> 00:35:34,440
the right key to the Target and if the

730
00:35:34,440 --> 00:35:36,540
authentication was successful then the

731
00:35:36,540 --> 00:35:40,140
target response with 270 to otherwise

732
00:35:40,140 --> 00:35:43,079
depending on the situation an error code

733
00:35:43,079 --> 00:35:46,200
starting with 7f will be received from

734
00:35:46,200 --> 00:35:48,599
the target so this is very nice this is

735
00:35:48,599 --> 00:35:51,599
Automotive protocol uh you are almost a

736
00:35:51,599 --> 00:35:56,099
car hacker now so how to hack this what

737
00:35:56,099 --> 00:35:59,160
if we introduce a glitch here somewhere

738
00:35:59,160 --> 00:36:00,660
here because there should be after

739
00:36:00,660 --> 00:36:03,000
sending a key some kind of validation

740
00:36:03,000 --> 00:36:05,700
check against the authentication probe

741
00:36:05,700 --> 00:36:07,619
and if there is something like this and

742
00:36:07,619 --> 00:36:10,200
we try to hack this with faulty

743
00:36:10,200 --> 00:36:12,480
injection then if we successfully bypass

744
00:36:12,480 --> 00:36:16,460
that check then maybe we can

745
00:36:16,460 --> 00:36:19,980
use an authenticated session later to

746
00:36:19,980 --> 00:36:21,900
execute something interesting

747
00:36:21,900 --> 00:36:24,440
so with regards to mfi

748
00:36:24,440 --> 00:36:27,900
it needs a bit of experiment and mapping

749
00:36:27,900 --> 00:36:30,599
of the target before a valuable attack

750
00:36:30,599 --> 00:36:32,520
can be performed so usually you have

751
00:36:32,520 --> 00:36:35,820
amfi tool with a tip at the end this is

752
00:36:35,820 --> 00:36:38,400
the side view this is the top view so

753
00:36:38,400 --> 00:36:41,700
and you have to find the street spot the

754
00:36:41,700 --> 00:36:44,280
street point on the microcontroller

755
00:36:44,280 --> 00:36:47,660
surface where with the right settings

756
00:36:47,660 --> 00:36:50,700
that belongs to the voltage you use to

757
00:36:50,700 --> 00:36:53,099
generate the electromagnetic boost the

758
00:36:53,099 --> 00:36:56,460
Boost length the repeating pattern the

759
00:36:56,460 --> 00:36:59,960
length and distance from the physical

760
00:36:59,960 --> 00:37:02,000
representation of the

761
00:37:02,000 --> 00:37:06,119
microcontroller unit and and the surface

762
00:37:06,119 --> 00:37:09,540
is is all accounting and all needs to be

763
00:37:09,540 --> 00:37:13,200
considered and checked so there is a lot

764
00:37:13,200 --> 00:37:15,300
of experiment that needs to be done

765
00:37:15,300 --> 00:37:18,119
usually the best effort is to run a

766
00:37:18,119 --> 00:37:20,880
customized firmware on the same chip in

767
00:37:20,880 --> 00:37:23,820
a test setup with the automated tool

768
00:37:23,820 --> 00:37:27,359
like XYZ table on a small CNC and as

769
00:37:27,359 --> 00:37:29,099
soon as you find the right spot then you

770
00:37:29,099 --> 00:37:31,260
can use the right settings on your final

771
00:37:31,260 --> 00:37:34,140
Target by moving to the same location so

772
00:37:34,140 --> 00:37:35,640
this is the

773
00:37:35,640 --> 00:37:39,660
nice small setup how it looks like there

774
00:37:39,660 --> 00:37:43,500
is a small CNC what I noted to you the

775
00:37:43,500 --> 00:37:46,380
ECU there the Raspberry Pi that I

776
00:37:46,380 --> 00:37:48,440
already noted previously

777
00:37:48,440 --> 00:37:51,619
we have a dude can interface that is

778
00:37:51,619 --> 00:37:54,720
basically performing most authentication

779
00:37:54,720 --> 00:37:56,940
probes against the target so it performs

780
00:37:56,940 --> 00:37:58,740
the security access seed request and

781
00:37:58,740 --> 00:38:02,040
then a key send messages we have the

782
00:38:02,040 --> 00:38:04,020
fpga for the same purpose like

783
00:38:04,020 --> 00:38:06,180
previously we have

784
00:38:06,180 --> 00:38:08,180
um

785
00:38:09,720 --> 00:38:11,640
yeah

786
00:38:11,640 --> 00:38:13,800
this is the heart that triggers this

787
00:38:13,800 --> 00:38:16,920
year so as we are dealing with uh emfi

788
00:38:16,920 --> 00:38:19,560
so electromagnetic pools there is a big

789
00:38:19,560 --> 00:38:22,920
risk that something could malfunction or

790
00:38:22,920 --> 00:38:26,880
be damaged in the closed proximity of

791
00:38:26,880 --> 00:38:28,920
the device so there is just additional

792
00:38:28,920 --> 00:38:32,400
separation from the custom fpga and

793
00:38:32,400 --> 00:38:36,780
between the chip shelter emfi tool so

794
00:38:36,780 --> 00:38:38,640
even the trigger is separated with the

795
00:38:38,640 --> 00:38:40,980
additional Electronics

796
00:38:40,980 --> 00:38:44,040
uh we have the target issue as I noted

797
00:38:44,040 --> 00:38:45,900
that is coming from our car hacking

798
00:38:45,900 --> 00:38:48,720
environment there is a Servo connected

799
00:38:48,720 --> 00:38:51,619
to it so it represents now the door lock

800
00:38:51,619 --> 00:38:56,220
and the chip shoe shelter from new uh a

801
00:38:56,220 --> 00:38:59,339
AE and the USB can interface that is

802
00:38:59,339 --> 00:39:02,940
connected to the Raspberry Pi to let us

803
00:39:02,940 --> 00:39:05,160
execute Commons through the canvas

804
00:39:05,160 --> 00:39:09,000
connection if we succeeded

805
00:39:09,000 --> 00:39:10,920
so

806
00:39:10,920 --> 00:39:13,920
the overview of the setup and the

807
00:39:13,920 --> 00:39:15,300
execution flow is the following

808
00:39:15,300 --> 00:39:19,760
basically the cheap shelter the fpga

809
00:39:19,760 --> 00:39:23,220
and everything is controlled by the

810
00:39:23,220 --> 00:39:25,560
Raspberry Pi the same Jupiter that

811
00:39:25,560 --> 00:39:27,900
uploaded with a different code and

812
00:39:27,900 --> 00:39:30,720
Raspberry Pi launches basically data by

813
00:39:30,720 --> 00:39:32,880
allowing dude can to start the

814
00:39:32,880 --> 00:39:35,700
authentication after sending out the

815
00:39:35,700 --> 00:39:39,480
authentication probe to the can bus the

816
00:39:39,480 --> 00:39:40,859
dude can also release is a hardware

817
00:39:40,859 --> 00:39:43,200
trigger to the fpga the fpga start to

818
00:39:43,200 --> 00:39:45,500
count as soon as it reached the

819
00:39:45,500 --> 00:39:48,740
appropriate amount of delay it basically

820
00:39:48,740 --> 00:39:52,339
releases the chip shelter which fires uh

821
00:39:52,339 --> 00:39:54,780
electromagnetic pools and if everything

822
00:39:54,780 --> 00:39:59,599
goes well then a dude can recognize

823
00:39:59,599 --> 00:40:02,820
that the authentication was succeeded

824
00:40:02,820 --> 00:40:05,339
even if it used the same fake key every

825
00:40:05,339 --> 00:40:07,380
time and as soon as this happens it

826
00:40:07,380 --> 00:40:09,480
informs the Raspberry Pi which at the

827
00:40:09,480 --> 00:40:11,640
end of the day let us know and we can

828
00:40:11,640 --> 00:40:13,260
execute the previous attacks this is as

829
00:40:13,260 --> 00:40:16,320
easy so let's see it how it works in

830
00:40:16,320 --> 00:40:18,980
practice

831
00:40:32,160 --> 00:40:34,700
so basically the same setup

832
00:40:34,700 --> 00:40:37,560
excluding that we have a terminal here

833
00:40:37,560 --> 00:40:42,060
where I'm dumping and filtering for

834
00:40:42,060 --> 00:40:44,720
it's not

835
00:40:45,900 --> 00:40:48,480
for the cam messages and you can see

836
00:40:48,480 --> 00:40:49,920
that I'm switching to external

837
00:40:49,920 --> 00:40:53,339
diagnostic interface and try to open the

838
00:40:53,339 --> 00:40:57,839
door with the routing control but as you

839
00:40:57,839 --> 00:40:59,640
can see there is a 7f which is a good

840
00:40:59,640 --> 00:41:02,579
indicator for the error code because of

841
00:41:02,579 --> 00:41:04,800
lack of authentication it wasn't

842
00:41:04,800 --> 00:41:08,280
possible and by executing basically the

843
00:41:08,280 --> 00:41:10,560
autok you can see how the

844
00:41:10,560 --> 00:41:13,920
electromagnetic poses are injected to

845
00:41:13,920 --> 00:41:15,720
the Target we are continuously

846
00:41:15,720 --> 00:41:17,880
monitoring here what is happening on the

847
00:41:17,880 --> 00:41:19,980
canvas and as you can see the patterns

848
00:41:19,980 --> 00:41:24,660
basically 270 ones are sent out then we

849
00:41:24,660 --> 00:41:29,339
receive different seats than 2702 with a

850
00:41:29,339 --> 00:41:31,920
free key fake key one two three four is

851
00:41:31,920 --> 00:41:35,220
sent out for authentication probes and

852
00:41:35,220 --> 00:41:37,320
basically we always receive 7f error

853
00:41:37,320 --> 00:41:40,079
codes that authentication was failed

854
00:41:40,079 --> 00:41:43,040
until

855
00:41:51,480 --> 00:41:55,500
if you zoom out you you will see that

856
00:41:55,500 --> 00:41:57,920
compared to the trigger there's a lot of

857
00:41:57,920 --> 00:42:02,060
time it passes before we execute the

858
00:42:02,060 --> 00:42:05,299
actual attack

859
00:42:19,740 --> 00:42:22,700
and finding the streets point

860
00:42:22,700 --> 00:42:27,799
fee sweet spot is Just Happening Here

861
00:42:30,540 --> 00:42:32,880
where basically

862
00:42:32,880 --> 00:42:36,260
the appropriate settings

863
00:42:36,359 --> 00:42:39,359
and the Magnetic boost targeted and

864
00:42:39,359 --> 00:42:41,579
released against the microcontroller let

865
00:42:41,579 --> 00:42:43,880
us

866
00:42:44,339 --> 00:42:47,880
be authenticated as you can see we get a

867
00:42:47,880 --> 00:42:51,020
positive response there

868
00:42:51,060 --> 00:42:54,180
and having this access we can easily

869
00:42:54,180 --> 00:42:56,280
jump back here and execute the same

870
00:42:56,280 --> 00:42:58,260
command which

871
00:42:58,260 --> 00:43:01,560
opens the doors for us

872
00:43:01,560 --> 00:43:05,579
so this way we managed to bypass the

873
00:43:05,579 --> 00:43:08,700
authentication on the unified diagnostic

874
00:43:08,700 --> 00:43:10,079
service

875
00:43:10,079 --> 00:43:13,440
so as a quick recap basically both the

876
00:43:13,440 --> 00:43:17,400
emfi and voltage greeting provided us

877
00:43:17,400 --> 00:43:20,000
ways to circumvent the security

878
00:43:20,000 --> 00:43:24,060
implementations made in software by

879
00:43:24,060 --> 00:43:27,300
attacking the hardware itself there are

880
00:43:27,300 --> 00:43:32,300
ways to improve the security for example

881
00:43:32,300 --> 00:43:35,220
limit the number of atoms or security

882
00:43:35,220 --> 00:43:38,040
access and so on but UDS can be targeted

883
00:43:38,040 --> 00:43:40,500
in a different ways so for example there

884
00:43:40,500 --> 00:43:43,020
is the read memory by address where you

885
00:43:43,020 --> 00:43:45,180
can unleash the is authenticated checks

886
00:43:45,180 --> 00:43:49,079
for example to achieve this as a results

887
00:43:49,079 --> 00:43:51,619
and the final thoughts about the

888
00:43:51,619 --> 00:43:55,800
hardware hacking of these targets and

889
00:43:55,800 --> 00:43:58,280
default injections

890
00:43:58,280 --> 00:44:01,200
especially the emfi and voltage

891
00:44:01,200 --> 00:44:03,740
glitching is that these are

892
00:44:03,740 --> 00:44:06,980
attacks that are feasible and

893
00:44:06,980 --> 00:44:09,480
valuable attacks and should be

894
00:44:09,480 --> 00:44:12,420
considered by Jeffrey van door and there

895
00:44:12,420 --> 00:44:14,660
is no secular

896
00:44:14,660 --> 00:44:18,180
device no secular product with just only

897
00:44:18,180 --> 00:44:20,940
secure software you could have the best

898
00:44:20,940 --> 00:44:24,060
and the most secure firmware ever if

899
00:44:24,060 --> 00:44:26,099
you're underlying Hardware is vulnerable

900
00:44:26,099 --> 00:44:29,900
for such an attack because in such case

901
00:44:29,900 --> 00:44:33,720
fault injections are the one way to

902
00:44:33,720 --> 00:44:35,760
circumvent this kind of implementations

903
00:44:35,760 --> 00:44:39,180
in Security in software there are some

904
00:44:39,180 --> 00:44:40,619
software related mitigation

905
00:44:40,619 --> 00:44:43,200
possibilities to introduce for example

906
00:44:43,200 --> 00:44:45,599
multiple redundant checks in condition

907
00:44:45,599 --> 00:44:47,839
checks or store

908
00:44:47,839 --> 00:44:50,400
critical information with their

909
00:44:50,400 --> 00:44:52,800
compliments and always check them

910
00:44:52,800 --> 00:44:55,140
against each other then you are

911
00:44:55,140 --> 00:44:57,740
evaluating them this can pinpoint

912
00:44:57,740 --> 00:45:01,200
issues then that are introduced by

913
00:45:01,200 --> 00:45:03,240
forward injections and you can react to

914
00:45:03,240 --> 00:45:05,339
them appropriately however it is

915
00:45:05,339 --> 00:45:06,780
important to know that these kind of

916
00:45:06,780 --> 00:45:09,359
mitigation is always Target the

917
00:45:09,359 --> 00:45:12,660
application remember itself not the

918
00:45:12,660 --> 00:45:15,540
hardware software that is the beauty

919
00:45:15,540 --> 00:45:17,240
inverting

920
00:45:17,240 --> 00:45:20,359
bootron for example so you can maybe

921
00:45:20,359 --> 00:45:23,819
enhance the security of your firmware

922
00:45:23,819 --> 00:45:25,920
and it will be more resilient against

923
00:45:25,920 --> 00:45:28,200
these kind of attacks but if the

924
00:45:28,200 --> 00:45:30,599
underlying microcontroller and this boot

925
00:45:30,599 --> 00:45:31,920
room is still vulnerable to forward

926
00:45:31,920 --> 00:45:33,660
injection attacks then maybe the Auto

927
00:45:33,660 --> 00:45:35,579
Care will focus on that to get full

928
00:45:35,579 --> 00:45:37,619
control over the device even before your

929
00:45:37,619 --> 00:45:40,319
firm is getting being executed

930
00:45:40,319 --> 00:45:43,859
so that was it I think I run out a

931
00:45:43,859 --> 00:45:45,839
couple of minutes

932
00:45:45,839 --> 00:45:49,079
about my time so thank you very much for

933
00:45:49,079 --> 00:45:52,140
your attention and there should not be

934
00:45:52,140 --> 00:45:55,579
time now for questions but you can reach

935
00:45:55,579 --> 00:45:58,560
me reach out to me at the Deloitte boot

936
00:45:58,560 --> 00:46:00,000
if you have any questions later on thank

937
00:46:00,000 --> 00:46:02,420
you very much

938
00:46:02,890 --> 00:46:08,388
[Applause]

