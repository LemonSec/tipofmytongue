1
00:00:00,000 --> 00:00:02,879
next presentation is uh May introduce Mr

2
00:00:02,879 --> 00:00:04,740
ishvan Toth

3
00:00:04,740 --> 00:00:06,899
thank you

4
00:00:06,899 --> 00:00:08,940
thank you

5
00:00:08,940 --> 00:00:12,660
welcome everybody I would like to talk

6
00:00:12,660 --> 00:00:13,740
about

7
00:00:13,740 --> 00:00:16,680
practical EDR bypass

8
00:00:16,680 --> 00:00:18,539
I

9
00:00:18,539 --> 00:00:21,320
you can see that it is a 2022 Edition

10
00:00:21,320 --> 00:00:24,420
but unfortunately fortunately it could

11
00:00:24,420 --> 00:00:27,779
be 2021 because there was no huge

12
00:00:27,779 --> 00:00:33,239
difference in this year about edrs I am

13
00:00:33,239 --> 00:00:36,719
Eastern Todd I'm from Hungary Budapest

14
00:00:36,719 --> 00:00:40,739
I'm based in Budapest and

15
00:00:40,739 --> 00:00:44,059
here is a slide about me

16
00:00:44,059 --> 00:00:47,340
I work in professionality security for

17
00:00:47,340 --> 00:00:49,980
more than seven years currently I'm

18
00:00:49,980 --> 00:00:53,520
working in red team I have various

19
00:00:53,520 --> 00:00:57,239
related search and my primary interest

20
00:00:57,239 --> 00:00:59,219
is offensive security Enterprise

21
00:00:59,219 --> 00:01:02,000
networks and active directory

22
00:01:02,000 --> 00:01:06,380
this is connecting to EDR of course

23
00:01:06,380 --> 00:01:10,020
formerly I was a CDF player now I do not

24
00:01:10,020 --> 00:01:13,080
have much time for that before it

25
00:01:13,080 --> 00:01:15,420
security uh

26
00:01:15,420 --> 00:01:18,060
so I have an MSC in Applied Mathematics

27
00:01:18,060 --> 00:01:21,659
and I worked about it and I have some

28
00:01:21,659 --> 00:01:23,939
social media

29
00:01:23,939 --> 00:01:27,000
accounts if you want to reach me out I'm

30
00:01:27,000 --> 00:01:29,880
active on Twitter I also have GitHub and

31
00:01:29,880 --> 00:01:32,420
Linkedin let's go ahead

32
00:01:32,420 --> 00:01:36,500
this is a short summary about

33
00:01:36,500 --> 00:01:39,840
what would like to I'd like to talk

34
00:01:39,840 --> 00:01:42,840
about uh

35
00:01:42,840 --> 00:01:47,100
first about edrs what is EDR uh endpoint

36
00:01:47,100 --> 00:01:49,140
detection and respond response I would

37
00:01:49,140 --> 00:01:52,079
like to Define what is bypass in my

38
00:01:52,079 --> 00:01:53,180
opinion

39
00:01:53,180 --> 00:01:56,220
I would like to talk about classic but

40
00:01:56,220 --> 00:01:59,640
still working bypass methods in 2022 so

41
00:01:59,640 --> 00:02:02,700
there are some easy ones and an advanced

42
00:02:02,700 --> 00:02:05,640
one also I'd like to give some example

43
00:02:05,640 --> 00:02:08,818
uh how to how to use it in red team

44
00:02:08,818 --> 00:02:11,459
operations and how adversaries use it

45
00:02:11,459 --> 00:02:15,060
against our networks I would like to

46
00:02:15,060 --> 00:02:17,220
give an example a

47
00:02:17,220 --> 00:02:20,760
an interesting example about an

48
00:02:20,760 --> 00:02:22,500
application

49
00:02:22,500 --> 00:02:27,599
called Zoom the side door trick and at

50
00:02:27,599 --> 00:02:31,260
last my favorite uh I call it living in

51
00:02:31,260 --> 00:02:34,020
network protocols

52
00:02:34,020 --> 00:02:36,780
so about edrs

53
00:02:36,780 --> 00:02:39,239
so EDR is a

54
00:02:39,239 --> 00:02:42,060
endpoint detection and response formerly

55
00:02:42,060 --> 00:02:45,319
it was called antivirus

56
00:02:45,319 --> 00:02:51,300
now now so antivirus was based on static

57
00:02:51,300 --> 00:02:54,420
analysis antiviruses analyze your

58
00:02:54,420 --> 00:02:58,080
binaries and payloads statically and

59
00:02:58,080 --> 00:03:01,280
Android detection response systems are

60
00:03:01,280 --> 00:03:04,760
the the behavior based errors at runtime

61
00:03:04,760 --> 00:03:08,760
now this difference is blurred now the

62
00:03:08,760 --> 00:03:11,840
products we call AV do also Behavior

63
00:03:11,840 --> 00:03:15,000
Analysis and AV products also have

64
00:03:15,000 --> 00:03:18,599
Behavior visibility also and now edrs

65
00:03:18,599 --> 00:03:20,360
are defined with

66
00:03:20,360 --> 00:03:23,580
I think more with more Telemetry data

67
00:03:23,580 --> 00:03:27,599
and customizable alerts and

68
00:03:27,599 --> 00:03:30,360
and so uh

69
00:03:30,360 --> 00:03:33,420
I would I would not I wouldn't name

70
00:03:33,420 --> 00:03:36,200
specific products in this presentation

71
00:03:36,200 --> 00:03:40,500
for various reasons one of this is I do

72
00:03:40,500 --> 00:03:42,780
not want to give targeted tips for the

73
00:03:42,780 --> 00:03:43,879
bad guys

74
00:03:43,879 --> 00:03:47,400
actually but guys also know how to

75
00:03:47,400 --> 00:03:50,420
defeat edrs but I do not want to

76
00:03:50,420 --> 00:03:54,000
make an out of box Solutions here and

77
00:03:54,000 --> 00:03:56,519
and the second one I do not want to

78
00:03:56,519 --> 00:03:59,060
start framework with EDR vendors

79
00:03:59,060 --> 00:04:03,659
because if I say that some edrs products

80
00:04:03,659 --> 00:04:06,540
I name an exact EDR product with a

81
00:04:06,540 --> 00:04:11,040
bypass they will challenge it it is not

82
00:04:11,040 --> 00:04:13,260
a bypass so I do not want to start this

83
00:04:13,260 --> 00:04:16,260
framework

84
00:04:16,260 --> 00:04:20,699
so first uh let's see what could be EDR

85
00:04:20,699 --> 00:04:23,040
bypass

86
00:04:23,040 --> 00:04:26,520
it is a little bit different on red blue

87
00:04:26,520 --> 00:04:30,419
side and even different for vendors for

88
00:04:30,419 --> 00:04:33,000
me in an offensive perspective I would

89
00:04:33,000 --> 00:04:36,240
like to say that either bypasses first

90
00:04:36,240 --> 00:04:38,400
know how to prevention was triggered

91
00:04:38,400 --> 00:04:40,139
this is a Mastiff Auto prevention is

92
00:04:40,139 --> 00:04:42,860
triggered and our payload is burned and

93
00:04:42,860 --> 00:04:46,199
there is no uh we can we cannot speak

94
00:04:46,199 --> 00:04:48,240
about bypass but this is not enough

95
00:04:48,240 --> 00:04:52,340
because there could be other errors

96
00:04:52,340 --> 00:04:55,919
which do not trigger Auto prevention so

97
00:04:55,919 --> 00:04:59,340
second I would say that no alerts or no

98
00:04:59,340 --> 00:05:01,860
high severity errors are generated this

99
00:05:01,860 --> 00:05:04,800
is not a must but a good to have

100
00:05:04,800 --> 00:05:07,979
also note that

101
00:05:07,979 --> 00:05:10,620
everything may depend on custom rows

102
00:05:10,620 --> 00:05:14,160
being implemented so with Advanced ddrs

103
00:05:14,160 --> 00:05:16,860
and advanced using just edrs means that

104
00:05:16,860 --> 00:05:19,620
the blue teams can Define custom rules

105
00:05:19,620 --> 00:05:25,800
for deductions and it may vary between

106
00:05:25,800 --> 00:05:28,560
different EDR installations different

107
00:05:28,560 --> 00:05:31,320
different Enterprises different networks

108
00:05:31,320 --> 00:05:34,440
so if I say that this is a working

109
00:05:34,440 --> 00:05:37,800
bypass it is not a 100 solution for

110
00:05:37,800 --> 00:05:40,280
everywhere

111
00:05:40,560 --> 00:05:42,960
yeah and that's what I said in the

112
00:05:42,960 --> 00:05:44,820
previous slides sometimes vendors say

113
00:05:44,820 --> 00:05:47,820
it's not a bypass because it was uh it

114
00:05:47,820 --> 00:05:49,820
was logged in the Telemetry

115
00:05:49,820 --> 00:05:52,979
okay uh

116
00:05:52,979 --> 00:05:55,560
and I would challenge this uh but what

117
00:05:55,560 --> 00:05:57,660
if I'm ever and encrypted everything

118
00:05:57,660 --> 00:06:00,360
already who cares that there is

119
00:06:00,360 --> 00:06:03,300
something in the Telemetry so uh I think

120
00:06:03,300 --> 00:06:05,639
the auto prevention and no high severity

121
00:06:05,639 --> 00:06:09,900
alerts are enough uh for uh stating that

122
00:06:09,900 --> 00:06:12,859
I made a bypass

123
00:06:12,900 --> 00:06:14,100
uh

124
00:06:14,100 --> 00:06:16,139
how to

125
00:06:16,139 --> 00:06:18,419
how to develop how to develop either a

126
00:06:18,419 --> 00:06:21,300
bypassing in practice uh it's not easy

127
00:06:21,300 --> 00:06:24,979
because EDR products are very expensive

128
00:06:24,979 --> 00:06:27,539
and the products are not available to

129
00:06:27,539 --> 00:06:28,680
the public

130
00:06:28,680 --> 00:06:31,800
even if you want to test a demo version

131
00:06:31,800 --> 00:06:35,400
for a limited limited license it is

132
00:06:35,400 --> 00:06:37,560
usually limited to companies and you

133
00:06:37,560 --> 00:06:41,220
cannot ask for demo licenses so legal

134
00:06:41,220 --> 00:06:44,039
testing is similarly restricted there

135
00:06:44,039 --> 00:06:48,300
are two consequences I think the

136
00:06:48,300 --> 00:06:50,460
strengths comes more from obscurity

137
00:06:50,460 --> 00:06:52,460
rather than the features

138
00:06:52,460 --> 00:06:57,300
uh and uh also note that I do not want

139
00:06:57,300 --> 00:07:00,240
to mean that these EDR features uh I do

140
00:07:00,240 --> 00:07:02,400
not underestimate DDR features with this

141
00:07:02,400 --> 00:07:04,440
sentence so I would say the strands

142
00:07:04,440 --> 00:07:06,240
comes more for our security but the

143
00:07:06,240 --> 00:07:09,419
features are also uh sometimes uh

144
00:07:09,419 --> 00:07:12,600
sometimes very uh advanced

145
00:07:12,600 --> 00:07:16,440
okay and an important note uh what I

146
00:07:16,440 --> 00:07:18,539
said before just because it's successful

147
00:07:18,539 --> 00:07:20,160
bypass and this doesn't mean the

148
00:07:20,160 --> 00:07:22,620
products is not super useful in general

149
00:07:22,620 --> 00:07:27,300
uh because uh the exploitation is a long

150
00:07:27,300 --> 00:07:31,139
process with a lot of steps so if I made

151
00:07:31,139 --> 00:07:35,160
a bypass uh for an initial foothold or

152
00:07:35,160 --> 00:07:38,400
some basic steps then there could be a

153
00:07:38,400 --> 00:07:42,180
chance that one more step ahead and it

154
00:07:42,180 --> 00:07:44,940
will trigger an alert

155
00:07:44,940 --> 00:07:50,719
okay let's talk about uh EDR components

156
00:07:50,960 --> 00:07:54,900
uh we have three on the endpoint the E

157
00:07:54,900 --> 00:07:57,960
they are components uh consists of a

158
00:07:57,960 --> 00:08:00,060
kernel space EDR driver

159
00:08:00,060 --> 00:08:02,940
there is an EDR service in the user

160
00:08:02,940 --> 00:08:05,039
space but this is the service this is

161
00:08:05,039 --> 00:08:07,560
also a high privileged one and also

162
00:08:07,560 --> 00:08:10,919
there is an EDR dll attached in the user

163
00:08:10,919 --> 00:08:12,780
process

164
00:08:12,780 --> 00:08:15,720
okay this is on the endpoint and we have

165
00:08:15,720 --> 00:08:18,960
of course so these uh these components

166
00:08:18,960 --> 00:08:21,660
do some logging the logging is on a

167
00:08:21,660 --> 00:08:24,360
company repository or EDR Cloud we also

168
00:08:24,360 --> 00:08:28,319
have a console to Monitor and

169
00:08:28,319 --> 00:08:32,458
and uh and uh

170
00:08:32,458 --> 00:08:35,159
I do some uh let's do some things with

171
00:08:35,159 --> 00:08:40,039
the EDR and let's see this on a diagram

172
00:08:40,039 --> 00:08:42,240
this is a

173
00:08:42,240 --> 00:08:47,220
from sector 7 sector 7 did a very sector

174
00:08:47,220 --> 00:08:51,000
7 did a very uh interesting and useful

175
00:08:51,000 --> 00:08:53,820
course for easier bypasses

176
00:08:53,820 --> 00:08:58,140
and this is taken from this course uh

177
00:08:58,140 --> 00:09:01,260
this is the detection technique uh in a

178
00:09:01,260 --> 00:09:05,339
diagram the components uh in the lower

179
00:09:05,339 --> 00:09:11,580
part of the diagram the EDR driver and

180
00:09:12,120 --> 00:09:14,519
there is the karnia callbacks connected

181
00:09:14,519 --> 00:09:16,740
to the EDR driver the EDR driver also

182
00:09:16,740 --> 00:09:18,660
monitors the disk and network activity

183
00:09:18,660 --> 00:09:20,100
uh

184
00:09:20,100 --> 00:09:22,380
uh there is the EDR service there is the

185
00:09:22,380 --> 00:09:25,440
user process when a user approaches when

186
00:09:25,440 --> 00:09:27,839
a user process starts the idios service

187
00:09:27,839 --> 00:09:31,140
and Driver injects the edrdlr into the

188
00:09:31,140 --> 00:09:36,080
user process and the user process also

189
00:09:36,080 --> 00:09:39,360
have other DLS normal DLS loaded the

190
00:09:39,360 --> 00:09:41,580
windows DLS and the Windows device

191
00:09:41,580 --> 00:09:44,339
contains the windows API functions and

192
00:09:44,339 --> 00:09:48,620
evidence if API fractions gets hooked

193
00:09:48,899 --> 00:09:52,200
I will try to show this uh on the next

194
00:09:52,200 --> 00:09:53,339
slide

195
00:09:53,339 --> 00:09:55,380
but uh

196
00:09:55,380 --> 00:09:59,459
let's see uh how can we attack this

197
00:09:59,459 --> 00:10:01,320
detection technique

198
00:10:01,320 --> 00:10:03,480
we can attack these detection techniques

199
00:10:03,480 --> 00:10:04,980
anywhere we want

200
00:10:04,980 --> 00:10:06,360
so we can

201
00:10:06,360 --> 00:10:09,839
we can attack or the EDR driver the EDR

202
00:10:09,839 --> 00:10:13,980
service the EDR dll logging the logging

203
00:10:13,980 --> 00:10:16,940
process or anything else

204
00:10:16,940 --> 00:10:20,279
the question is what should we try to

205
00:10:20,279 --> 00:10:24,420
defeat first and in my opinion and in my

206
00:10:24,420 --> 00:10:28,019
experience I found that attacking the

207
00:10:28,019 --> 00:10:32,180
EDR dll itself or the user process and

208
00:10:32,180 --> 00:10:35,940
getting rid of the edrtlr from there is

209
00:10:35,940 --> 00:10:40,080
the best or easiest thing that we may do

210
00:10:40,080 --> 00:10:44,160
and I also found that this is this is

211
00:10:44,160 --> 00:10:48,839
almost almost the uh

212
00:10:48,839 --> 00:10:52,800
almost the best uh best thing to do Vibe

213
00:10:52,800 --> 00:10:54,540
because

214
00:10:54,540 --> 00:10:58,200
the EDR dllr uh attached to the user

215
00:10:58,200 --> 00:11:01,560
process doesn't have privileges it runs

216
00:11:01,560 --> 00:11:03,899
also with the user process Privileges

217
00:11:03,899 --> 00:11:06,060
and if the attacker only has the user

218
00:11:06,060 --> 00:11:09,300
process privileges then it is free to

219
00:11:09,300 --> 00:11:12,779
modify the user process and the edrdll

220
00:11:12,779 --> 00:11:15,200
for attacking other

221
00:11:15,200 --> 00:11:18,480
stuff in the diagram for example the

222
00:11:18,480 --> 00:11:20,339
kernel callbacks if you want to remove

223
00:11:20,339 --> 00:11:23,640
the karna callbacks you will have to you

224
00:11:23,640 --> 00:11:26,820
have attach driver in Canada space you

225
00:11:26,820 --> 00:11:30,120
have to have to have high kernel

226
00:11:30,120 --> 00:11:31,500
privileges

227
00:11:31,500 --> 00:11:33,660
but for attacking the user process you

228
00:11:33,660 --> 00:11:36,600
do not do not need to do this

229
00:11:36,600 --> 00:11:39,959
yeah so here is the EDR dll in the user

230
00:11:39,959 --> 00:11:42,319
process

231
00:11:42,420 --> 00:11:44,640
I

232
00:11:44,640 --> 00:11:48,720
told earlier uh here is a

233
00:11:48,720 --> 00:11:50,640
here is the debugger here is the

234
00:11:50,640 --> 00:11:54,540
debugger attached to a user process

235
00:11:54,540 --> 00:11:58,800
and here is the anti-dll DOT dll

236
00:11:58,800 --> 00:12:04,140
the ntdrl.dllr contains Cisco's you the

237
00:12:04,140 --> 00:12:07,079
red the red ones are the ciscos and

238
00:12:07,079 --> 00:12:08,940
there are the functions

239
00:12:08,940 --> 00:12:13,380
the windows API functions and you can

240
00:12:13,380 --> 00:12:15,540
see that some of them is a little bit

241
00:12:15,540 --> 00:12:17,880
different than the normal this is hooked

242
00:12:17,880 --> 00:12:20,579
that is the jump instruction uh at the

243
00:12:20,579 --> 00:12:22,140
first at the first instruction of the

244
00:12:22,140 --> 00:12:24,300
call and it's done if you follow the

245
00:12:24,300 --> 00:12:26,820
jump instruction it will land in the EDR

246
00:12:26,820 --> 00:12:28,560
dll itself

247
00:12:28,560 --> 00:12:31,740
and the edrd level does some checking

248
00:12:31,740 --> 00:12:35,399
and validates that the call parameters

249
00:12:35,399 --> 00:12:39,480
or analyzes memory memory regions and

250
00:12:39,480 --> 00:12:41,399
try to search for malicious activities

251
00:12:41,399 --> 00:12:43,500
and if it founds malicious activities

252
00:12:43,500 --> 00:12:47,820
then it will send the required alert to

253
00:12:47,820 --> 00:12:50,519
the EDR logging system

254
00:12:50,519 --> 00:12:53,399
and what is

255
00:12:53,399 --> 00:12:57,000
really nice for the attacker that these

256
00:12:57,000 --> 00:12:59,940
jump instructions could be overwritten

257
00:12:59,940 --> 00:13:04,740
uh by the user process privileges

258
00:13:05,940 --> 00:13:09,959
so this is uh called EDR hook bypass

259
00:13:09,959 --> 00:13:12,240
this is a classic this is a classic

260
00:13:12,240 --> 00:13:15,660
attack against ddrs and I in my

261
00:13:15,660 --> 00:13:19,260
experience it is still working now in

262
00:13:19,260 --> 00:13:23,160
2022 so this is called the alarm cooking

263
00:13:23,160 --> 00:13:26,220
actually this eliminates edrd level

264
00:13:26,220 --> 00:13:29,700
activities in user process I do not want

265
00:13:29,700 --> 00:13:32,100
to say that this blinds the whole EDR

266
00:13:32,100 --> 00:13:35,399
but reduces the visibility seriously

267
00:13:35,399 --> 00:13:38,040
uh

268
00:13:38,040 --> 00:13:41,700
and this uh visibility reduction is

269
00:13:41,700 --> 00:13:45,060
enough for a lot of for a lot of

270
00:13:45,060 --> 00:13:47,399
offensive operations

271
00:13:47,399 --> 00:13:49,680
if you want to do these unhooking in

272
00:13:49,680 --> 00:13:53,060
Easy Mode this is called DLR refreshing

273
00:13:53,060 --> 00:13:56,519
you do not have to search for every dll

274
00:13:56,519 --> 00:14:00,899
call and check for jump instructions is

275
00:14:00,899 --> 00:14:03,720
it hooked or not there is a easier

276
00:14:03,720 --> 00:14:07,700
trivial method this is what

277
00:14:07,700 --> 00:14:10,980
the bad guys do if you want to bypass

278
00:14:10,980 --> 00:14:12,380
the EDR

279
00:14:12,380 --> 00:14:15,540
overrides in memory hooked versions by

280
00:14:15,540 --> 00:14:19,200
the original disk version so if ntdl.dll

281
00:14:19,200 --> 00:14:22,200
is hooked you have to do is very easy

282
00:14:22,200 --> 00:14:25,260
stuff just read The Entity Dr from the

283
00:14:25,260 --> 00:14:26,940
disk this is original this is the

284
00:14:26,940 --> 00:14:29,459
original version this is unhooked and

285
00:14:29,459 --> 00:14:33,180
replace the code section in the user

286
00:14:33,180 --> 00:14:36,779
process with this original one

287
00:14:36,779 --> 00:14:39,139
there are other more difficult bypasses

288
00:14:39,139 --> 00:14:43,260
direct ciscoes this is called cisperse

289
00:14:43,260 --> 00:14:45,300
but we do not want to cover this in this

290
00:14:45,300 --> 00:14:48,480
presentation because in my experience I

291
00:14:48,480 --> 00:14:51,660
did not need to do this

292
00:14:51,660 --> 00:14:53,820
dll refreshing was enough

293
00:14:53,820 --> 00:14:56,760
there is reference implementation in

294
00:14:56,760 --> 00:15:02,160
this URL the ire dot team site

295
00:15:02,160 --> 00:15:05,360
by spot the planet

296
00:15:05,699 --> 00:15:08,820
so the entity on the disk with the green

297
00:15:08,820 --> 00:15:11,699
clean text section let's override the

298
00:15:11,699 --> 00:15:15,320
entity the dll in memory that's all

299
00:15:15,320 --> 00:15:18,420
in my experience I also had to do it for

300
00:15:18,420 --> 00:15:22,860
other DLS EDR products not only hook the

301
00:15:22,860 --> 00:15:27,300
entity entity is a special Dr because it

302
00:15:27,300 --> 00:15:29,220
is the last layer between the user

303
00:15:29,220 --> 00:15:33,000
processor and the kernel other DLS

304
00:15:33,000 --> 00:15:37,019
uh coal at last the NT dll functions and

305
00:15:37,019 --> 00:15:40,199
ntdll do the anti-dll do the ciscos

306
00:15:40,199 --> 00:15:43,320
which lands on the Kernel space

307
00:15:43,320 --> 00:15:49,639
so hooking entity by the edrs is uh is a

308
00:15:49,639 --> 00:15:52,320
it's very important because it is the

309
00:15:52,320 --> 00:15:55,680
last one before the kernel layer but I

310
00:15:55,680 --> 00:15:59,360
found that most edrs have a lot of

311
00:15:59,360 --> 00:16:03,839
hooking in under the uh so so if I uh

312
00:16:03,839 --> 00:16:06,959
included the unhooking or the refreshing

313
00:16:06,959 --> 00:16:08,699
process included the kernel based the

314
00:16:08,699 --> 00:16:12,899
drn cns32 the dll it was enough to

315
00:16:12,899 --> 00:16:16,199
bypass a lot of things

316
00:16:16,199 --> 00:16:20,519
okay so this was the refreshing uh this

317
00:16:20,519 --> 00:16:25,019
was some Behavior Analysis evasion I

318
00:16:25,019 --> 00:16:27,600
found that uh usually this is not enough

319
00:16:27,600 --> 00:16:30,139
because there are new features

320
00:16:30,139 --> 00:16:33,779
implemented uh it is rather the static

321
00:16:33,779 --> 00:16:36,300
analysis than the behavior based ones

322
00:16:36,300 --> 00:16:40,380
but this is also an important thing to

323
00:16:40,380 --> 00:16:42,079
bypass

324
00:16:42,079 --> 00:16:44,820
entropy it is based on an entropy

325
00:16:44,820 --> 00:16:47,160
anthrop that is entropy entropy is a

326
00:16:47,160 --> 00:16:49,019
measure of randomness

327
00:16:49,019 --> 00:16:51,720
it is a mathematical mathematical

328
00:16:51,720 --> 00:16:55,500
measure from information Theory there is

329
00:16:55,500 --> 00:16:59,339
a mathematical formula to calculate

330
00:16:59,339 --> 00:17:01,620
the entropy I do not want to dive into

331
00:17:01,620 --> 00:17:02,899
the details

332
00:17:02,899 --> 00:17:05,520
why is this important

333
00:17:05,520 --> 00:17:09,359
because it may maybe the entropy it may

334
00:17:09,359 --> 00:17:13,500
be an indicator of mirror how

335
00:17:13,500 --> 00:17:18,780
the binary payload is uh

336
00:17:18,780 --> 00:17:21,839
how does a binary paper look like it has

337
00:17:21,839 --> 00:17:24,660
a loader and usually it has an encrypted

338
00:17:24,660 --> 00:17:26,939
or packed share code or dll or something

339
00:17:26,939 --> 00:17:29,160
when the loader wants to load why

340
00:17:29,160 --> 00:17:33,720
because we want to want to evade easy

341
00:17:33,720 --> 00:17:37,140
static analysis and that's why we use

342
00:17:37,140 --> 00:17:39,600
encryption and the loader with

343
00:17:39,600 --> 00:17:43,500
decryption and finally some share code

344
00:17:43,500 --> 00:17:45,539
running

345
00:17:45,539 --> 00:17:48,240
uh by the encrypted or and compressed

346
00:17:48,240 --> 00:17:52,620
data uh usually seems like uh random

347
00:17:52,620 --> 00:17:55,080
bytes if you encrypt something and the

348
00:17:55,080 --> 00:17:57,120
encryption is good then the result will

349
00:17:57,120 --> 00:18:00,539
be a random sequence with high entropy

350
00:18:00,539 --> 00:18:03,780
and EDR guess is high entropy data in

351
00:18:03,780 --> 00:18:06,419
binaries uh means encryption on

352
00:18:06,419 --> 00:18:08,820
compression and if there is some

353
00:18:08,820 --> 00:18:11,760
encryption in binaries edrs Flex it is

354
00:18:11,760 --> 00:18:12,780
the smaller

355
00:18:12,780 --> 00:18:15,299
and burn is flies immediately

356
00:18:15,299 --> 00:18:16,860
so

357
00:18:16,860 --> 00:18:21,919
ah ER doesn't know how to decrypt it

358
00:18:21,919 --> 00:18:25,799
but the encrypted binaries are put in

359
00:18:25,799 --> 00:18:27,780
the set of malware

360
00:18:27,780 --> 00:18:30,480
so for bypass and if you use such

361
00:18:30,480 --> 00:18:33,960
payloads we need to lower the entropy

362
00:18:33,960 --> 00:18:35,600
somehow

363
00:18:35,600 --> 00:18:39,480
here are some entropy examples

364
00:18:39,480 --> 00:18:44,160
and to prepare section of a PE file Croc

365
00:18:44,160 --> 00:18:47,820
exit EXT this is a this is the standard

366
00:18:47,820 --> 00:18:49,760
Windows calculator

367
00:18:49,760 --> 00:18:53,580
there is the entropy graph of the of

368
00:18:53,580 --> 00:18:55,160
this binary

369
00:18:55,160 --> 00:19:00,179
and here is uh in the in the lower uh

370
00:19:00,179 --> 00:19:03,559
diagram here is a

371
00:19:03,559 --> 00:19:08,640
malicious binary Beacon this is actually

372
00:19:08,640 --> 00:19:11,340
this is a cobal strike Beacon and you

373
00:19:11,340 --> 00:19:13,740
can see that the green part is the

374
00:19:13,740 --> 00:19:17,160
loader it is the text section of the PE

375
00:19:17,160 --> 00:19:22,320
file and the other one is the encoded or

376
00:19:22,320 --> 00:19:24,299
encrypted data

377
00:19:24,299 --> 00:19:28,640
and you can see that the entropy is high

378
00:19:28,640 --> 00:19:33,240
compared to the calculator and this this

379
00:19:33,240 --> 00:19:38,240
one the beacon exe is immediately burned

380
00:19:38,240 --> 00:19:41,880
by most of the edrs based on entropy

381
00:19:41,880 --> 00:19:43,320
detection

382
00:19:43,320 --> 00:19:47,940
okay how can we lower the entropy

383
00:19:47,940 --> 00:19:50,940
this is a trivial entropy reduction here

384
00:19:50,940 --> 00:19:54,600
so this kind of detection is I think it

385
00:19:54,600 --> 00:19:58,020
is it is not a not a a good one because

386
00:19:58,020 --> 00:20:01,320
it is it is really trivial to bypass

387
00:20:01,320 --> 00:20:05,160
uh the red one is the encrypted payload

388
00:20:05,160 --> 00:20:08,100
uh let's assume that it is a random one

389
00:20:08,100 --> 00:20:11,340
and if we do nothing more

390
00:20:11,340 --> 00:20:15,600
nothing more just inject 2 a bytes

391
00:20:15,600 --> 00:20:19,020
between each encrypted byte it is a

392
00:20:19,020 --> 00:20:20,600
longer sequence

393
00:20:20,600 --> 00:20:23,940
uh three times longer

394
00:20:23,940 --> 00:20:27,900
but if you calculate the entropy for

395
00:20:27,900 --> 00:20:31,020
this one it is very low

396
00:20:31,020 --> 00:20:35,220
why because this one is not random

397
00:20:35,220 --> 00:20:38,940
because if you know nothing

398
00:20:38,940 --> 00:20:42,720
just want to predict the following byte

399
00:20:42,720 --> 00:20:47,400
in this lower segments then it is it

400
00:20:47,400 --> 00:20:49,520
will be a

401
00:20:49,520 --> 00:20:53,580
with two third probability so this is

402
00:20:53,580 --> 00:20:56,400
not random right the first one is as

403
00:20:56,400 --> 00:20:58,980
shown random because it is encrypted

404
00:20:58,980 --> 00:21:02,820
so with this very trivial trick we could

405
00:21:02,820 --> 00:21:06,000
reduce the entropy of any payload of

406
00:21:06,000 --> 00:21:08,280
course during the decryption phase you

407
00:21:08,280 --> 00:21:10,320
have to do a little bit different you

408
00:21:10,320 --> 00:21:12,240
have to you have to follow only the

409
00:21:12,240 --> 00:21:16,400
third bytes for the decryption

410
00:21:18,900 --> 00:21:24,179
okay and one other uh minor trick for

411
00:21:24,179 --> 00:21:25,760
bypassing

412
00:21:25,760 --> 00:21:31,320
bypassing static analysis of edrs

413
00:21:31,320 --> 00:21:34,080
uh

414
00:21:34,080 --> 00:21:36,840
the shackle loaders and dll loaders

415
00:21:36,840 --> 00:21:40,260
usually use Windows API core may use

416
00:21:40,260 --> 00:21:42,600
Windows API calls like virtual dialogue

417
00:21:42,600 --> 00:21:45,360
and other uh there are some other

418
00:21:45,360 --> 00:21:50,480
General uh API cores used for use for

419
00:21:50,480 --> 00:21:53,760
the share code execution and decoration

420
00:21:53,760 --> 00:21:55,820
and other phases

421
00:21:55,820 --> 00:21:59,640
and if you include your input these

422
00:21:59,640 --> 00:22:02,039
windows API calls then it is very

423
00:22:02,039 --> 00:22:04,140
trivial from an EDR to enumerate it

424
00:22:04,140 --> 00:22:06,179
because these are these are import

425
00:22:06,179 --> 00:22:09,480
functions and if you want to if you

426
00:22:09,480 --> 00:22:12,240
don't want to don't want to

427
00:22:12,240 --> 00:22:14,400
import these functions but cover these

428
00:22:14,400 --> 00:22:17,539
functions there is an easy method

429
00:22:17,539 --> 00:22:20,480
let's resolve the function addresses

430
00:22:20,480 --> 00:22:24,179
dynamically at runtime

431
00:22:24,179 --> 00:22:26,640
we did these two API calls the get

432
00:22:26,640 --> 00:22:28,520
module handle and get Products address

433
00:22:28,520 --> 00:22:33,120
you can resolve the API

434
00:22:33,120 --> 00:22:35,880
call address dynamically at runtime and

435
00:22:35,880 --> 00:22:38,280
if you do this the compile binary won't

436
00:22:38,280 --> 00:22:41,400
have the virtual import you can do this

437
00:22:41,400 --> 00:22:45,360
with every other API functions you want

438
00:22:45,360 --> 00:22:46,559
to call

439
00:22:46,559 --> 00:22:49,919
and this appears to be less harmful at

440
00:22:49,919 --> 00:22:51,380
least at First Sight

441
00:22:51,380 --> 00:22:56,640
and if these scores are not included in

442
00:22:56,640 --> 00:23:00,120
the payload then EDR will not score it

443
00:23:00,120 --> 00:23:02,640
high uh

444
00:23:02,640 --> 00:23:06,059
for treating it malicious

445
00:23:06,059 --> 00:23:09,539
there is an other little trick I usually

446
00:23:09,539 --> 00:23:12,480
use hide the function name strings also

447
00:23:12,480 --> 00:23:15,000
because okay you do not have the import

448
00:23:15,000 --> 00:23:17,880
in this but the virtual string is there

449
00:23:17,880 --> 00:23:19,340
if you want to

450
00:23:19,340 --> 00:23:23,039
not include this string there is a very

451
00:23:23,039 --> 00:23:26,340
easy very easy trick

452
00:23:26,340 --> 00:23:29,520
at the this is C code and the first line

453
00:23:29,520 --> 00:23:31,919
if you if you use the first line

454
00:23:31,919 --> 00:23:36,539
then the string will be included uh in

455
00:23:36,539 --> 00:23:38,580
the

456
00:23:38,580 --> 00:23:42,059
air data section of the compiled binary

457
00:23:42,059 --> 00:23:43,799
continuously

458
00:23:43,799 --> 00:23:46,140
but if you use the second one

459
00:23:46,140 --> 00:23:49,440
the compiler will include it with move

460
00:23:49,440 --> 00:23:51,659
instruction instructions in the text

461
00:23:51,659 --> 00:23:54,240
section and

462
00:23:54,240 --> 00:23:58,740
and there won't be the the the thing we

463
00:23:58,740 --> 00:24:01,400
are chunked

464
00:24:01,500 --> 00:24:04,200
so this is just a just a minor trick but

465
00:24:04,200 --> 00:24:07,039
very useful

466
00:24:07,039 --> 00:24:09,960
what I

467
00:24:09,960 --> 00:24:13,980
how I use this uh I wrote my own custom

468
00:24:13,980 --> 00:24:16,620
loader including these three or two

469
00:24:16,620 --> 00:24:19,980
techniques uh the dll unlocking the most

470
00:24:19,980 --> 00:24:23,940
important to for evading uh runtime

471
00:24:23,940 --> 00:24:26,580
detections and reducing runtime media

472
00:24:26,580 --> 00:24:29,220
visibility uh the second one the entrop

473
00:24:29,220 --> 00:24:33,179
reduction and third one some some static

474
00:24:33,179 --> 00:24:37,320
analysis uh evasion using the dynamic

475
00:24:37,320 --> 00:24:39,659
Windows API calls these are known

476
00:24:39,659 --> 00:24:41,820
techniques it's not new these are known

477
00:24:41,820 --> 00:24:45,179
textings but still works uh successfully

478
00:24:45,179 --> 00:24:49,020
even in 2022 so I packed all these into

479
00:24:49,020 --> 00:24:53,159
a custom loader and usually we use for

480
00:24:53,159 --> 00:24:55,020
offensive operation as the Cobra strike

481
00:24:55,020 --> 00:24:57,900
C2 framework the Cobalt strike is a

482
00:24:57,900 --> 00:24:59,880
popular or probably the most popular

483
00:24:59,880 --> 00:25:02,580
nowadays the most popular commercial C2

484
00:25:02,580 --> 00:25:05,039
framework this is used by Red Team

485
00:25:05,039 --> 00:25:08,400
operators for adversary simulations but

486
00:25:08,400 --> 00:25:10,500
it is used as well as adversaries

487
00:25:10,500 --> 00:25:12,679
illegally of course

488
00:25:12,679 --> 00:25:14,640
uh

489
00:25:14,640 --> 00:25:17,159
now the defaults if you if you used

490
00:25:17,159 --> 00:25:19,679
copper strike with the default it is

491
00:25:19,679 --> 00:25:23,100
called by edrs what wasn't the case a

492
00:25:23,100 --> 00:25:24,900
few years ago a few years ago if you use

493
00:25:24,900 --> 00:25:26,640
the Koba strike out of the box it

494
00:25:26,640 --> 00:25:29,159
bypassed everything now the defaults are

495
00:25:29,159 --> 00:25:31,440
now the defaults are called

496
00:25:31,440 --> 00:25:34,080
but it is highly malleable and

497
00:25:34,080 --> 00:25:36,240
customizable so the power of copper

498
00:25:36,240 --> 00:25:39,679
strike framework is the customization

499
00:25:39,679 --> 00:25:43,740
for example the payloads are generated

500
00:25:43,740 --> 00:25:46,799
According to some you can you can tune

501
00:25:46,799 --> 00:25:48,659
some parameters but the payload is

502
00:25:48,659 --> 00:25:51,020
generated without

503
00:25:51,020 --> 00:25:53,940
much customization but the loaders are

504
00:25:53,940 --> 00:25:56,159
templated so you can write your own

505
00:25:56,159 --> 00:25:59,640
loader and use your own loader in this

506
00:25:59,640 --> 00:26:02,340
framework and I wrote my own loader

507
00:26:02,340 --> 00:26:05,220
using these techniques this is called

508
00:26:05,220 --> 00:26:07,740
the artifact in cobal strike terminology

509
00:26:07,740 --> 00:26:11,600
this is called artifact kit

510
00:26:12,120 --> 00:26:13,080
um

511
00:26:13,080 --> 00:26:16,080
I when I included this only these three

512
00:26:16,080 --> 00:26:18,240
techniques in the artifact kit and

513
00:26:18,240 --> 00:26:20,760
generated the cover strike payload uh

514
00:26:20,760 --> 00:26:24,000
this allowed me to first run the copper

515
00:26:24,000 --> 00:26:26,539
strike Beacon without alerting so it

516
00:26:26,539 --> 00:26:31,140
connected and and I had control over the

517
00:26:31,140 --> 00:26:32,460
target computer

518
00:26:32,460 --> 00:26:36,059
I could run basic tasks even with spawn

519
00:26:36,059 --> 00:26:38,840
processes and I could drain

520
00:26:38,840 --> 00:26:40,740
malicious.net assemblies it is very

521
00:26:40,740 --> 00:26:43,200
important for offensive operations most

522
00:26:43,200 --> 00:26:45,419
of the offensive tools or a lot of

523
00:26:45,419 --> 00:26:48,440
offensive tools are written in.net

524
00:26:48,440 --> 00:26:52,580
uh something like rubles it is a very

525
00:26:52,580 --> 00:26:55,860
handy uh offensive tool for operating

526
00:26:55,860 --> 00:27:00,539
with in-memory cameras tickets uh

527
00:27:00,539 --> 00:27:02,640
you can also run mimikats and other

528
00:27:02,640 --> 00:27:06,000
things in uh in we discover strike

529
00:27:06,000 --> 00:27:08,400
Beacon if we use this unhooking

530
00:27:08,400 --> 00:27:09,860
technique

531
00:27:09,860 --> 00:27:13,159
I would say that this is not super power

532
00:27:13,159 --> 00:27:16,440
Telemetry other than dll hooks are still

533
00:27:16,440 --> 00:27:17,539
alive

534
00:27:17,539 --> 00:27:21,720
if you remember that diagram some slides

535
00:27:21,720 --> 00:27:24,600
before there were kernel callbacks there

536
00:27:24,600 --> 00:27:27,419
were RFI system or network events logged

537
00:27:27,419 --> 00:27:31,260
so other Telemetry data exists for

538
00:27:31,260 --> 00:27:34,140
example if you want to try to dump the

539
00:27:34,140 --> 00:27:36,480
NSS process

540
00:27:36,480 --> 00:27:38,179
with the

541
00:27:38,179 --> 00:27:40,980
credentials or credential hashes

542
00:27:40,980 --> 00:27:43,200
included it's most likely will end your

543
00:27:43,200 --> 00:27:46,080
operation so the EDR unhooking is not a

544
00:27:46,080 --> 00:27:49,320
superpower but and also know that

545
00:27:49,320 --> 00:27:50,400
everything may depend on custom

546
00:27:50,400 --> 00:27:54,779
detections but uh

547
00:27:54,779 --> 00:27:57,120
in a real if you if you plan your

548
00:27:57,120 --> 00:27:59,940
offensive operation well then dumping

549
00:27:59,940 --> 00:28:03,360
LSS and doing other uh

550
00:28:03,360 --> 00:28:06,480
high alerted things is not necessary

551
00:28:06,480 --> 00:28:09,419
if you want to learn more about the

552
00:28:09,419 --> 00:28:12,779
artifact kit let me let me become and

553
00:28:12,779 --> 00:28:14,760
there is an offensive calling class by

554
00:28:14,760 --> 00:28:17,820
Mr unicoder there there is the link and

555
00:28:17,820 --> 00:28:20,460
I'm present in there to our live coding

556
00:28:20,460 --> 00:28:23,700
session covering these features in this

557
00:28:23,700 --> 00:28:25,980
artifact template recording is available

558
00:28:25,980 --> 00:28:29,100
there if you want to see it

559
00:28:29,100 --> 00:28:33,539
back to the detection technique

560
00:28:34,880 --> 00:28:38,340
there are some more advanced detection

561
00:28:38,340 --> 00:28:40,740
techniques it is it requires more

562
00:28:40,740 --> 00:28:44,880
advanced staff to bypass uh the kernel

563
00:28:44,880 --> 00:28:46,260
callbacks

564
00:28:46,260 --> 00:28:48,240
I do not want to dive into the deep

565
00:28:48,240 --> 00:28:51,539
details for bypassing Canada callbacks

566
00:28:51,539 --> 00:28:54,539
is uh not easy with low privileges

567
00:28:54,539 --> 00:28:57,900
because you can not simply override it

568
00:28:57,900 --> 00:29:02,960
you have to evade the Canada course uh

569
00:29:02,960 --> 00:29:08,299
what is hooked by callbacks and

570
00:29:08,299 --> 00:29:12,179
recently I faced an issue with the load

571
00:29:12,179 --> 00:29:14,900
Library van the load Library

572
00:29:14,900 --> 00:29:19,320
Windows API call uh

573
00:29:19,320 --> 00:29:22,820
called a kernel function

574
00:29:22,820 --> 00:29:27,440
what was hooked by kernel callbacks

575
00:29:27,440 --> 00:29:32,340
and so if the situation the simple EDR

576
00:29:32,340 --> 00:29:37,100
dll hooking did not work because not the

577
00:29:37,100 --> 00:29:40,080
not the load library was not hooked at

578
00:29:40,080 --> 00:29:42,000
the reserve process level it was hooked

579
00:29:42,000 --> 00:29:45,059
at the kernel process level and there is

580
00:29:45,059 --> 00:29:47,820
a for this so for this one there is an

581
00:29:47,820 --> 00:29:49,340
easy solution

582
00:29:49,340 --> 00:29:51,720
uh because

583
00:29:51,720 --> 00:29:53,940
it was implemented earlier this is the

584
00:29:53,940 --> 00:29:56,179
dark Road Library this is a load Library

585
00:29:56,179 --> 00:29:58,320
implementation without calling load

586
00:29:58,320 --> 00:30:00,440
Library itself so

587
00:30:00,440 --> 00:30:03,899
uh betsack the author of decode Library

588
00:30:03,899 --> 00:30:06,120
implemented low Library without calling

589
00:30:06,120 --> 00:30:09,539
low library and uh

590
00:30:09,539 --> 00:30:13,020
I did some experiment with another open

591
00:30:13,020 --> 00:30:15,360
source with another C2 framework and

592
00:30:15,360 --> 00:30:19,140
open source one sliver uh which has the

593
00:30:19,140 --> 00:30:21,320
payloads As dll

594
00:30:21,320 --> 00:30:26,100
and and a default refractive loader

595
00:30:26,100 --> 00:30:28,080
using this DLS will triggered its

596
00:30:28,080 --> 00:30:30,299
scanner callback and with dark Library

597
00:30:30,299 --> 00:30:34,399
darker Library I was able to bypass it

598
00:30:34,399 --> 00:30:38,580
uh what I did this is the sleeve sliver

599
00:30:38,580 --> 00:30:42,419
C2 stage are uh I come I combined these

600
00:30:42,419 --> 00:30:45,720
techniques uh the DLR hooking uh and the

601
00:30:45,720 --> 00:30:48,360
darker Library one this made it possible

602
00:30:48,360 --> 00:30:51,299
to uh made it possible to evade the

603
00:30:51,299 --> 00:30:55,200
camera callbacks and I also uh have an

604
00:30:55,200 --> 00:30:58,320
interesting uh an interesting usage the

605
00:30:58,320 --> 00:31:00,480
deal as side loading but I want to show

606
00:31:00,480 --> 00:31:02,039
now

607
00:31:02,039 --> 00:31:05,880
uh uh I used it for zoom

608
00:31:05,880 --> 00:31:10,500
so what is DLS side loading

609
00:31:10,500 --> 00:31:14,279
DLS side loading is

610
00:31:14,279 --> 00:31:18,440
DLS side loading is a technique

611
00:31:18,440 --> 00:31:24,179
to abuse the DLS search order Plus

612
00:31:24,179 --> 00:31:26,880
weakness

613
00:31:26,880 --> 00:31:30,539
the zoom binaries live in the user

614
00:31:30,539 --> 00:31:32,580
folder app data

615
00:31:32,580 --> 00:31:36,440
backslash Zoom backslash bin the user

616
00:31:36,440 --> 00:31:39,720
the zoom binaries are installed in the

617
00:31:39,720 --> 00:31:43,679
user folder and the zoom.exe is

618
00:31:43,679 --> 00:31:46,980
vulnerable to dll hijacking

619
00:31:46,980 --> 00:31:51,080
uh which means if you place a dll

620
00:31:51,080 --> 00:31:56,520
what Zoom wants to load uh first it

621
00:31:56,520 --> 00:32:00,299
searches in this in this bin folder

622
00:32:00,299 --> 00:32:02,279
for example if it wants to load the

623
00:32:02,279 --> 00:32:04,860
system dll it won't find in the beam for

624
00:32:04,860 --> 00:32:06,960
the folder but but first it searches in

625
00:32:06,960 --> 00:32:08,640
the beam folder and then moves to the

626
00:32:08,640 --> 00:32:10,380
system 32 at last

627
00:32:10,380 --> 00:32:12,860
so if you place uh

628
00:32:12,860 --> 00:32:16,679
for example a version dll file that is

629
00:32:16,679 --> 00:32:19,860
loaded by Zoom it is a system dllr first

630
00:32:19,860 --> 00:32:22,080
it looks for the version DL in the bin

631
00:32:22,080 --> 00:32:24,360
folder and if you drop a version dll

632
00:32:24,360 --> 00:32:26,340
analysis version dealer in the beam

633
00:32:26,340 --> 00:32:28,919
folder and it will be loaded why is this

634
00:32:28,919 --> 00:32:30,179
important

635
00:32:30,179 --> 00:32:34,520
because if you if you write the malware

636
00:32:34,520 --> 00:32:40,380
what just drops uh it's payload in this

637
00:32:40,380 --> 00:32:43,200
Bim folder and doesn't do the payload

638
00:32:43,200 --> 00:32:44,700
execution

639
00:32:44,700 --> 00:32:47,940
the payload execution will follow when

640
00:32:47,940 --> 00:32:50,700
the user opens the zoom application

641
00:32:50,700 --> 00:32:54,480
so it is separated by time and method

642
00:32:54,480 --> 00:32:57,059
probably the payload was dropped

643
00:32:57,059 --> 00:33:01,260
yesterday and today user opens Zoom and

644
00:33:01,260 --> 00:33:04,399
user then the user when it opens Zoom

645
00:33:04,399 --> 00:33:07,559
these two events the paper dropping and

646
00:33:07,559 --> 00:33:11,640
the and the zoom uh execution is not

647
00:33:11,640 --> 00:33:15,299
connected and uh EDR won't connect the

648
00:33:15,299 --> 00:33:18,360
drop and exec events so for example if

649
00:33:18,360 --> 00:33:21,600
the EDR uh score threshold is for

650
00:33:21,600 --> 00:33:25,019
example let it be 100

651
00:33:25,019 --> 00:33:29,480
maybe uh maybe the malware dropping is

652
00:33:29,480 --> 00:33:34,500
uh 80 and execution is also 80. it is

653
00:33:34,500 --> 00:33:36,840
not added and it will not trigger the

654
00:33:36,840 --> 00:33:41,840
alert if the mother did the two stuff uh

655
00:33:41,840 --> 00:33:45,179
on its own then it will trigger

656
00:33:45,179 --> 00:33:49,260
so this is a this is a dangerous one

657
00:33:49,260 --> 00:33:51,299
there is a protection there is a

658
00:33:51,299 --> 00:33:54,539
protection against the DLS side loading

659
00:33:54,539 --> 00:33:59,159
in Zoom here is the protection here is a

660
00:33:59,159 --> 00:34:01,679
pop-up window zoom.exe is using version

661
00:34:01,679 --> 00:34:03,960
DLR from an unknown publisher addition

662
00:34:03,960 --> 00:34:06,240
you want to continue or want to run this

663
00:34:06,240 --> 00:34:07,200
software

664
00:34:07,200 --> 00:34:09,060
uh the problem there is there are two

665
00:34:09,060 --> 00:34:11,159
problems with this first it allows the

666
00:34:11,159 --> 00:34:14,280
user to continue why it should not and

667
00:34:14,280 --> 00:34:17,159
second this is the this is the this is

668
00:34:17,159 --> 00:34:21,239
the verse the dll the version dll gets

669
00:34:21,239 --> 00:34:25,980
executed before this pop-up shown

670
00:34:25,980 --> 00:34:30,179
so so I would like to show my dumb best

671
00:34:30,179 --> 00:34:34,020
error bypass technique here

672
00:34:34,020 --> 00:34:35,659
here it is

673
00:34:35,659 --> 00:34:40,619
uh inversion dll there is a loop for

674
00:34:40,619 --> 00:34:43,139
finding the window Zoom the zoom pop-up

675
00:34:43,139 --> 00:34:45,899
window and then send a message to this

676
00:34:45,899 --> 00:34:48,480
window yes it's clicked yes

677
00:34:48,480 --> 00:34:52,739
uh this is very very quick and this will

678
00:34:52,739 --> 00:34:56,399
this will this code will run before the

679
00:34:56,399 --> 00:34:59,700
window is rendered on the desktop

680
00:34:59,700 --> 00:35:02,280
so there is no pop-up window

681
00:35:02,280 --> 00:35:04,440
this is this is the dumbest dumbest

682
00:35:04,440 --> 00:35:08,119
bypass server but this is working

683
00:35:08,520 --> 00:35:12,420
uh it is just a screenshot I fear you

684
00:35:12,420 --> 00:35:15,359
cannot read it but this is just a

685
00:35:15,359 --> 00:35:18,780
demonstration screenshot for this that

686
00:35:18,780 --> 00:35:21,420
is the version dll uh

687
00:35:21,420 --> 00:35:25,440
Zoom opens and the silver C2 framework

688
00:35:25,440 --> 00:35:28,200
connects back and if you implemented

689
00:35:28,200 --> 00:35:30,140
this dark Road Library technique against

690
00:35:30,140 --> 00:35:34,020
EDR and also the unhooking technique and

691
00:35:34,020 --> 00:35:38,160
even after this you can you can run for

692
00:35:38,160 --> 00:35:41,339
example mimikats here so I just try to

693
00:35:41,339 --> 00:35:45,240
show this without mentioning any EDR

694
00:35:45,240 --> 00:35:46,940
products

695
00:35:46,940 --> 00:35:49,800
and okay so that was that was the zoom

696
00:35:49,800 --> 00:35:52,579
and now here is my here is my favorite

697
00:35:52,579 --> 00:35:55,320
uh the living in network protocols

698
00:35:55,320 --> 00:35:58,320
section

699
00:35:58,500 --> 00:36:00,300
this is a

700
00:36:00,300 --> 00:36:03,359
this is the best EDR bypass technique I

701
00:36:03,359 --> 00:36:06,839
think so let's say we have a C2 implant

702
00:36:06,839 --> 00:36:09,599
and an EDR protected host okay so we

703
00:36:09,599 --> 00:36:12,240
have an inch foothold we have a C2

704
00:36:12,240 --> 00:36:14,520
implant and a protected host

705
00:36:14,520 --> 00:36:16,020
uh

706
00:36:16,020 --> 00:36:19,920
and here is how to operate in the most

707
00:36:19,920 --> 00:36:23,359
salesy way I think

708
00:36:23,640 --> 00:36:28,140
the key is to not you do not have you

709
00:36:28,140 --> 00:36:31,680
must not run any malicious tools on the

710
00:36:31,680 --> 00:36:35,280
EDR protected host itself let's run your

711
00:36:35,280 --> 00:36:38,820
offensive tools outside the network how

712
00:36:38,820 --> 00:36:42,420
just fire up a socks proxy in the

713
00:36:42,420 --> 00:36:45,960
implant more c2's support it out of the

714
00:36:45,960 --> 00:36:47,880
box for example mobile strike has it

715
00:36:47,880 --> 00:36:50,760
also the open source sliver has it and

716
00:36:50,760 --> 00:36:52,680
run your tooling on your own operator

717
00:36:52,680 --> 00:36:55,020
host through that proxy

718
00:36:55,020 --> 00:36:58,859
uh so tools are outside EDR sensors EDR

719
00:36:58,859 --> 00:37:02,160
cannot attach any process only the C2

720
00:37:02,160 --> 00:37:04,500
implant if the C2 implant is bypassed

721
00:37:04,500 --> 00:37:07,140
and hopefully the socks uh

722
00:37:07,140 --> 00:37:09,359
socks process is bypassed for example

723
00:37:09,359 --> 00:37:12,480
with EDR hooking the visibility is

724
00:37:12,480 --> 00:37:15,380
nothing almost nothing in this process

725
00:37:15,380 --> 00:37:18,420
you do not have to spawn new processes

726
00:37:18,420 --> 00:37:22,560
do not have to inject processes just uh

727
00:37:22,560 --> 00:37:25,079
operates through the network so this is

728
00:37:25,079 --> 00:37:28,800
almost invisible to edrs uh I would like

729
00:37:28,800 --> 00:37:33,599
to show an example uh probably uh a

730
00:37:33,599 --> 00:37:35,339
little bit Advanced more advanced attack

731
00:37:35,339 --> 00:37:39,720
uh what could be uh what could be uh

732
00:37:39,720 --> 00:37:44,220
managed by these infrastructure uh let's

733
00:37:44,220 --> 00:37:47,220
say the Anthony van the computer

734
00:37:47,220 --> 00:37:50,579
takeover scenario shame let's say you

735
00:37:50,579 --> 00:37:52,440
have a compromised attack cover session

736
00:37:52,440 --> 00:37:55,440
running the C2 implant for the anti-alem

737
00:37:55,440 --> 00:37:57,480
relaying you have a Target computer you

738
00:37:57,480 --> 00:38:00,000
have the domain controller the ntl I'm

739
00:38:00,000 --> 00:38:02,160
relaying is uh

740
00:38:02,160 --> 00:38:04,920
a very same oversimplify overly

741
00:38:04,920 --> 00:38:06,859
simplified

742
00:38:06,859 --> 00:38:10,200
you try to course an ntlm authentication

743
00:38:10,200 --> 00:38:13,320
from the target to the uh to your

744
00:38:13,320 --> 00:38:15,900
control computer and relay it to the

745
00:38:15,900 --> 00:38:17,940
domain constitute computer and through

746
00:38:17,940 --> 00:38:20,220
this related session you make some

747
00:38:20,220 --> 00:38:23,839
object modifications on the Target and

748
00:38:23,839 --> 00:38:26,579
the last step of the local admin

749
00:38:26,579 --> 00:38:27,980
privileges on the Target

750
00:38:27,980 --> 00:38:31,579
by abusing these modified

751
00:38:31,579 --> 00:38:34,800
computer object properties via cameras

752
00:38:34,800 --> 00:38:37,140
so this is very over simplified but I

753
00:38:37,140 --> 00:38:39,839
showed this in a in this diagram so you

754
00:38:39,839 --> 00:38:41,820
have the compromised host running the

755
00:38:41,820 --> 00:38:44,160
situent the first step coercing

756
00:38:44,160 --> 00:38:46,680
authentication with some technique on

757
00:38:46,680 --> 00:38:49,800
the target computer if someone familiar

758
00:38:49,800 --> 00:38:53,040
with it it may be the printer bag or or

759
00:38:53,040 --> 00:38:55,920
that is bottom there are other there are

760
00:38:55,920 --> 00:38:57,359
a lot of there are a lot of techniques

761
00:38:57,359 --> 00:38:59,940
to cause authentication my favorite is

762
00:38:59,940 --> 00:39:03,359
printerback because it is a one fix uh

763
00:39:03,359 --> 00:39:06,420
exploit or vulnerability Microsoft says

764
00:39:06,420 --> 00:39:09,780
that this is uh this is a feature not a

765
00:39:09,780 --> 00:39:13,260
bag so you can coerce authentication

766
00:39:13,260 --> 00:39:16,380
with credentials and Target computer you

767
00:39:16,380 --> 00:39:18,839
can obtain the ntlm authentication and

768
00:39:18,839 --> 00:39:21,060
Target it to the compromised host and

769
00:39:21,060 --> 00:39:22,800
from the compromised host you can relay

770
00:39:22,800 --> 00:39:25,320
it to the domain controller uh this is

771
00:39:25,320 --> 00:39:27,300
an SMB connection from the target to do

772
00:39:27,300 --> 00:39:29,099
compromise Source but you can relate

773
00:39:29,099 --> 00:39:31,460
this to adapt to the domain controller

774
00:39:31,460 --> 00:39:34,500
and through this and now you have a

775
00:39:34,500 --> 00:39:36,780
add-up session in the context of the

776
00:39:36,780 --> 00:39:38,880
target computer and with that add up

777
00:39:38,880 --> 00:39:40,380
session you can modify the Target

778
00:39:40,380 --> 00:39:43,980
computers properties and after after

779
00:39:43,980 --> 00:39:47,040
modifying this with some techniques

780
00:39:47,040 --> 00:39:48,720
called Shadow credentials or or

781
00:39:48,720 --> 00:39:50,579
resource-based constant delegation you

782
00:39:50,579 --> 00:39:52,140
can have local admin privileges

783
00:39:52,140 --> 00:39:56,160
vocabulous so the problems with this in

784
00:39:56,160 --> 00:39:59,460
operational security perspective

785
00:39:59,460 --> 00:40:01,320
uh so there are operation security

786
00:40:01,320 --> 00:40:04,980
Concepts if you in this in this scenario

787
00:40:04,980 --> 00:40:09,780
uh sorry in this scenario uh the tools

788
00:40:09,780 --> 00:40:13,200
are running on your compromise attacker

789
00:40:13,200 --> 00:40:16,320
host it is in the EDR visibility and

790
00:40:16,320 --> 00:40:18,900
also one more because this is an SMB

791
00:40:18,900 --> 00:40:20,520
connection from the target to your

792
00:40:20,520 --> 00:40:22,859
controlled host uh what is usually

793
00:40:22,859 --> 00:40:26,160
windows and have SMB Services uh you

794
00:40:26,160 --> 00:40:29,300
have to do something to

795
00:40:29,300 --> 00:40:34,020
filter the traffic and redirect it there

796
00:40:34,020 --> 00:40:35,400
are there is there is an offensive

797
00:40:35,400 --> 00:40:38,880
tooling for this the port vendor to have

798
00:40:38,880 --> 00:40:43,079
uh to filter the SMB connection from the

799
00:40:43,079 --> 00:40:44,359
Target and

800
00:40:44,359 --> 00:40:47,000
redirected to another service

801
00:40:47,000 --> 00:40:51,380
but for this you have to you have to run

802
00:40:51,380 --> 00:40:54,240
a deploy a driver

803
00:40:54,240 --> 00:40:58,500
uh there are a lot of consonants with

804
00:40:58,500 --> 00:41:01,079
this uh deploying a driver a malicious

805
00:41:01,079 --> 00:41:04,020
driver on a on a on an EDR protected

806
00:41:04,020 --> 00:41:06,359
host so I won't say this is impossible

807
00:41:06,359 --> 00:41:08,820
but uh that may be really hard

808
00:41:08,820 --> 00:41:12,540
but there are uh solutions to

809
00:41:12,540 --> 00:41:16,020
solve this let's learn a socks and

810
00:41:16,020 --> 00:41:18,359
reverse brought forwarder inside the C2

811
00:41:18,359 --> 00:41:20,880
implant and run the tooling on The

812
00:41:20,880 --> 00:41:23,040
Operators host outside of the target

813
00:41:23,040 --> 00:41:26,820
Network so this one

814
00:41:26,820 --> 00:41:29,220
uh we have a stocks proxy on the

815
00:41:29,220 --> 00:41:32,220
compromised host which can be reached by

816
00:41:32,220 --> 00:41:35,160
the operator and let's do a reverse port

817
00:41:35,160 --> 00:41:37,200
forward from the SMB port to the

818
00:41:37,200 --> 00:41:39,960
operator host and now we can trigger the

819
00:41:39,960 --> 00:41:42,359
authentication through that sucks proxy

820
00:41:42,359 --> 00:41:44,820
so we run the printer back exploit or

821
00:41:44,820 --> 00:41:48,480
any other on our operator host

822
00:41:48,480 --> 00:41:51,300
and if we have the relayed connection

823
00:41:51,300 --> 00:41:53,700
also around the relay tool and the

824
00:41:53,700 --> 00:41:55,980
operator host through the Traverse port

825
00:41:55,980 --> 00:41:57,060
forwarding

826
00:41:57,060 --> 00:41:59,940
and again on the socks proxy let's go to

827
00:41:59,940 --> 00:42:02,460
the domain controller and finish the uh

828
00:42:02,460 --> 00:42:05,460
the exploit so almost everything is

829
00:42:05,460 --> 00:42:07,260
running on the operator Source no

830
00:42:07,260 --> 00:42:09,660
tooling on the compromised attacker host

831
00:42:09,660 --> 00:42:14,640
so this is almost very good uh

832
00:42:14,640 --> 00:42:16,800
tooling is outside either visibility

833
00:42:16,800 --> 00:42:19,740
almost all tooling still

834
00:42:19,740 --> 00:42:21,420
uh

835
00:42:21,420 --> 00:42:24,420
still a concern we also need the port

836
00:42:24,420 --> 00:42:27,839
Bender driver in this uh in this

837
00:42:27,839 --> 00:42:31,140
scenario and the last thing I wanted to

838
00:42:31,140 --> 00:42:33,500
show you we can

839
00:42:33,500 --> 00:42:37,560
solve this also so do not need to run a

840
00:42:37,560 --> 00:42:39,839
driver on the EDR monitored host for

841
00:42:39,839 --> 00:42:41,460
this attack

842
00:42:41,460 --> 00:42:44,099
let's try to find the host inside the

843
00:42:44,099 --> 00:42:47,700
network without running SMB or EDR

844
00:42:47,700 --> 00:42:51,540
visibility probably an unattended test

845
00:42:51,540 --> 00:42:55,260
box or even an iot device running Linux

846
00:42:55,260 --> 00:42:57,500
preferably could be very fine

847
00:42:57,500 --> 00:43:00,480
usually you can find this on a an

848
00:43:00,480 --> 00:43:02,460
Enterprise Network with default

849
00:43:02,460 --> 00:43:06,599
credentials or or other unprotected

850
00:43:06,599 --> 00:43:08,220
hosts

851
00:43:08,220 --> 00:43:10,260
here is the shame

852
00:43:10,260 --> 00:43:13,680
let's Let It Be an a camera with Linux

853
00:43:13,680 --> 00:43:15,359
operating system

854
00:43:15,359 --> 00:43:18,000
uh

855
00:43:18,000 --> 00:43:23,339
almost the same as the previous one but

856
00:43:23,339 --> 00:43:26,819
let's redirect the

857
00:43:26,819 --> 00:43:29,220
let's call as the authentication to the

858
00:43:29,220 --> 00:43:31,440
Target on the target computer not to the

859
00:43:31,440 --> 00:43:33,720
compromise attacker host but to the

860
00:43:33,720 --> 00:43:36,000
compromise device

861
00:43:36,000 --> 00:43:41,460
and let's run an SSH tunnel a reverse

862
00:43:41,460 --> 00:43:44,700
SSH tunnel through that sucks proxy back

863
00:43:44,700 --> 00:43:46,680
to the operator's host

864
00:43:46,680 --> 00:43:50,160
uh so let's forward the SMB port on the

865
00:43:50,160 --> 00:43:52,619
compromise device through that reverse

866
00:43:52,619 --> 00:43:55,319
tunnel to the operator's host and now if

867
00:43:55,319 --> 00:43:57,060
you trigger the authentication on the

868
00:43:57,060 --> 00:44:00,000
target computer it will land on the

869
00:44:00,000 --> 00:44:02,819
operator's host through that SSH reverse

870
00:44:02,819 --> 00:44:06,660
tunnel and now uh we bypassed the

871
00:44:06,660 --> 00:44:08,460
compromise the tech care host in this

872
00:44:08,460 --> 00:44:10,020
scenario totally

873
00:44:10,020 --> 00:44:12,900
and of course we can relay that

874
00:44:12,900 --> 00:44:14,819
authentication to the domain controller

875
00:44:14,819 --> 00:44:18,180
through this Ox proxy and modify the

876
00:44:18,180 --> 00:44:21,119
computer object properties and and the

877
00:44:21,119 --> 00:44:23,760
last step through that stocks proxy we

878
00:44:23,760 --> 00:44:26,700
can go to the computer and obtain local

879
00:44:26,700 --> 00:44:28,020
admin

880
00:44:28,020 --> 00:44:29,339
so

881
00:44:29,339 --> 00:44:31,500
that's what that was the last thing I

882
00:44:31,500 --> 00:44:35,339
wanted to show uh this is the living in

883
00:44:35,339 --> 00:44:37,319
the network but of course I think this

884
00:44:37,319 --> 00:44:40,200
is the this is the best way to buy a CDR

885
00:44:40,200 --> 00:44:43,260
uh let's try to not touch anything on

886
00:44:43,260 --> 00:44:45,660
EDR protected hosts

887
00:44:45,660 --> 00:44:48,960
okay uh a short summary

888
00:44:48,960 --> 00:44:52,200
presented some practical basic EDR

889
00:44:52,200 --> 00:44:56,099
bypass techniques uh using these uh I'm

890
00:44:56,099 --> 00:44:57,900
using these actively during engagement

891
00:44:57,900 --> 00:45:00,660
uh

892
00:45:00,660 --> 00:45:03,660
so defaults can be bypassed with effort

893
00:45:03,660 --> 00:45:07,020
not just defaults more but I do not want

894
00:45:07,020 --> 00:45:09,540
to me so this does not don't mean to say

895
00:45:09,540 --> 00:45:12,540
it is easy or easy or easier don't

896
00:45:12,540 --> 00:45:15,119
perform well so I do not want to just

897
00:45:15,119 --> 00:45:18,839
blame the EDR vendors or edrs because a

898
00:45:18,839 --> 00:45:22,680
Val configured and uh and if if you

899
00:45:22,680 --> 00:45:25,859
include some customization in edrs and

900
00:45:25,859 --> 00:45:29,880
include some Advanced detections uh then

901
00:45:29,880 --> 00:45:32,640
it will be very hard to bypass those

902
00:45:32,640 --> 00:45:37,020
detections uh even if you just one

903
00:45:37,020 --> 00:45:39,480
reason why this is very hard because you

904
00:45:39,480 --> 00:45:42,540
do not know uh which kind of detections

905
00:45:42,540 --> 00:45:45,859
are included on the Enterprise

906
00:45:45,859 --> 00:45:49,319
EDR products so defaults can be easily

907
00:45:49,319 --> 00:45:52,079
bypassed or

908
00:45:52,079 --> 00:45:54,839
bypass with effort but if there are some

909
00:45:54,839 --> 00:45:56,599
uh

910
00:45:56,599 --> 00:46:00,780
needs detections there it could it could

911
00:46:00,780 --> 00:46:04,740
be very hard to bypass and edrs are

912
00:46:04,740 --> 00:46:07,800
could be extremely useful

913
00:46:07,800 --> 00:46:11,160
okay so sorry for the overtime thanks

914
00:46:11,160 --> 00:46:14,160
for your attention if you uh have

915
00:46:14,160 --> 00:46:18,240
questions I'm here I don't go away and

916
00:46:18,240 --> 00:46:21,240
you can also reach me out at Twitter I

917
00:46:21,240 --> 00:46:24,359
actively use my Twitter account

918
00:46:24,359 --> 00:46:26,070
so thank you thank you

919
00:46:26,070 --> 00:46:34,320
[Applause]

