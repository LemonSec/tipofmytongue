1
00:00:00,120 --> 00:00:02,700
hello hello ladies and gentlemen the

2
00:00:02,700 --> 00:00:05,520
next uh presentation is Mr zeelard

3
00:00:05,520 --> 00:00:07,930
Pfeiffer

4
00:00:07,930 --> 00:00:09,720
[Applause]

5
00:00:09,720 --> 00:00:12,120
thank you can you hear me

6
00:00:12,120 --> 00:00:16,580
okay cool uh just a minute

7
00:00:17,520 --> 00:00:21,140
I try to share my presentation

8
00:00:32,880 --> 00:00:36,440
and also this terminal

9
00:00:36,600 --> 00:00:38,700
okay that's it

10
00:00:38,700 --> 00:00:41,600
I hope so

11
00:00:45,960 --> 00:00:47,940
so let's start it

12
00:00:47,940 --> 00:00:50,520
um my name is silat Pfeiffer I graduated

13
00:00:50,520 --> 00:00:52,739
as an electrical engineer your engineer

14
00:00:52,739 --> 00:00:56,640
as almost 20 years ago since then I have

15
00:00:56,640 --> 00:00:59,280
been working in I.T security I started

16
00:00:59,280 --> 00:01:01,800
my career as a software developer and I

17
00:01:01,800 --> 00:01:04,260
am I am a security engineer and

18
00:01:04,260 --> 00:01:07,159
evangelist as you can see on the slide

19
00:01:07,159 --> 00:01:10,080
I work at Ebola Society security which

20
00:01:10,080 --> 00:01:12,000
which is one of the few Hungarian United

21
00:01:12,000 --> 00:01:14,060
Security vendors

22
00:01:14,060 --> 00:01:16,380
a formerly this company was called

23
00:01:16,380 --> 00:01:18,240
balabit this was the vendor of the

24
00:01:18,240 --> 00:01:22,020
syslog NG now we are the member of an

25
00:01:22,020 --> 00:01:25,320
application of a firewall and the API

26
00:01:25,320 --> 00:01:28,200
lifecycle management platform uh the

27
00:01:28,200 --> 00:01:30,299
story has started with the measurement

28
00:01:30,299 --> 00:01:33,600
of day heat attack which is a denial of

29
00:01:33,600 --> 00:01:35,400
service attack against the DV element

30
00:01:35,400 --> 00:01:38,579
protocol I wanted to measure how

31
00:01:38,579 --> 00:01:40,320
vulnerable the different cryptographic

32
00:01:40,320 --> 00:01:42,720
libraries are against this day heat

33
00:01:42,720 --> 00:01:46,500
attack I had to realize that there are

34
00:01:46,500 --> 00:01:47,820
significant differences between

35
00:01:47,820 --> 00:01:50,939
different cryptographic libraries but I

36
00:01:50,939 --> 00:01:53,159
also realized that there are significant

37
00:01:53,159 --> 00:01:56,880
difference between the openness version

38
00:01:56,880 --> 00:02:00,360
1.1 and 3.0 which is the latest version

39
00:02:00,360 --> 00:02:03,740
of the openssl I would like to present

40
00:02:03,740 --> 00:02:06,960
uh how some default values in the

41
00:02:06,960 --> 00:02:11,520
openssl version 3.0 can multiply the

42
00:02:11,520 --> 00:02:13,560
potential of day heat attack for

43
00:02:13,560 --> 00:02:15,720
millions of servers

44
00:02:15,720 --> 00:02:18,360
before I could continue I should explain

45
00:02:18,360 --> 00:02:19,879
the day heat attack

46
00:02:19,879 --> 00:02:24,000
but it is necessary to talk about key

47
00:02:24,000 --> 00:02:26,340
exchange because the heat attack is a

48
00:02:26,340 --> 00:02:28,680
denial of service attack against the DVR

49
00:02:28,680 --> 00:02:30,180
monkey Exchange

50
00:02:30,180 --> 00:02:32,819
all cryptographic protocols have a part

51
00:02:32,819 --> 00:02:35,780
called key exchange but what is it

52
00:02:35,780 --> 00:02:38,879
parties intends to communicate with each

53
00:02:38,879 --> 00:02:41,040
other in a secular manner need a

54
00:02:41,040 --> 00:02:43,920
symmetric key a shared secret it's

55
00:02:43,920 --> 00:02:46,080
practically just some kind of random

56
00:02:46,080 --> 00:02:48,900
data which will be used to encrypt and

57
00:02:48,900 --> 00:02:51,480
deck the messages in a symmetric way

58
00:02:51,480 --> 00:02:55,200
uh why is it exploitable there are two

59
00:02:55,200 --> 00:02:57,660
reasons for that the first one is that

60
00:02:57,660 --> 00:03:00,000
the key change algorithms are more or

61
00:03:00,000 --> 00:03:03,060
less CPU intensive depending on the

62
00:03:03,060 --> 00:03:05,580
specific case change algorithm the

63
00:03:05,580 --> 00:03:08,220
second reason is uh that the key

64
00:03:08,220 --> 00:03:10,400
exchange is unauthenticated

65
00:03:10,400 --> 00:03:12,420
in the case of the cryptographic

66
00:03:12,420 --> 00:03:15,540
protocols the key exchange precedes the

67
00:03:15,540 --> 00:03:18,959
authentication so it means that an

68
00:03:18,959 --> 00:03:21,540
unlock authenticated client can enforce

69
00:03:21,540 --> 00:03:24,360
the server to do CPU intensive operation

70
00:03:24,360 --> 00:03:26,340
without Authentication

71
00:03:26,340 --> 00:03:28,739
what's the problem with the DVR monkey

72
00:03:28,739 --> 00:03:32,040
exchange the problem is that the Divya

73
00:03:32,040 --> 00:03:34,140
monkey is choosing more CPU intensive

74
00:03:34,140 --> 00:03:36,900
than the other key exchange algorithms

75
00:03:36,900 --> 00:03:40,019
such as RSA or the elliptical version of

76
00:03:40,019 --> 00:03:42,360
the DVR monkey Exchange

77
00:03:42,360 --> 00:03:44,700
the other problem is that the

78
00:03:44,700 --> 00:03:46,500
computational capacity requirement of

79
00:03:46,500 --> 00:03:49,260
the DVR monkey exchange increases along

80
00:03:49,260 --> 00:03:51,299
with the public and the private key

81
00:03:51,299 --> 00:03:53,519
sizes as DVR monkey is changing

82
00:03:53,519 --> 00:03:57,060
asymmetric algorithm

83
00:03:57,060 --> 00:04:00,299
to understand how an auto care can

84
00:04:00,299 --> 00:04:03,659
exploit this I have to talk about the

85
00:04:03,659 --> 00:04:05,819
DVR monkey Exchange

86
00:04:05,819 --> 00:04:09,840
first of all the parties have to agree

87
00:04:09,840 --> 00:04:12,239
in two numbers the first one is a

88
00:04:12,239 --> 00:04:14,599
generator the second one is a prime

89
00:04:14,599 --> 00:04:16,680
these are public parameters of the

90
00:04:16,680 --> 00:04:20,220
different key exchange and this

91
00:04:20,220 --> 00:04:23,220
agreement can be done part of the crypto

92
00:04:23,220 --> 00:04:26,639
cryptographic handshake after that a

93
00:04:26,639 --> 00:04:29,940
client picks a random number this will

94
00:04:29,940 --> 00:04:33,540
be its private scheme and computes the

95
00:04:33,540 --> 00:04:35,759
generator to the power of this private

96
00:04:35,759 --> 00:04:37,979
key mod the prime

97
00:04:37,979 --> 00:04:39,840
this operation is the modular

98
00:04:39,840 --> 00:04:42,960
exponentiation this is the CPU intensive

99
00:04:42,960 --> 00:04:45,440
part of the DVR monkey Exchange

100
00:04:45,440 --> 00:04:48,300
as a result of the modular

101
00:04:48,300 --> 00:04:51,120
exponentiation the result of the modular

102
00:04:51,120 --> 00:04:54,120
exponentiation will be the public key in

103
00:04:54,120 --> 00:04:56,639
the DVR among key exchange the client

104
00:04:56,639 --> 00:04:59,479
will send this public key to the server

105
00:04:59,479 --> 00:05:02,759
meanwhile the server does the same

106
00:05:02,759 --> 00:05:05,639
operations and the board is receiving

107
00:05:05,639 --> 00:05:09,540
each other public key can compute the

108
00:05:09,540 --> 00:05:11,940
shared secret using the same operation

109
00:05:11,940 --> 00:05:14,580
the modular exponentiation so the

110
00:05:14,580 --> 00:05:17,880
modular exponentiation is done twice

111
00:05:17,880 --> 00:05:21,000
during the DVR monkey Exchange

112
00:05:21,000 --> 00:05:24,300
most parties do the same operations

113
00:05:24,300 --> 00:05:26,880
so the computational capacity

114
00:05:26,880 --> 00:05:29,639
requirement is the same both on the

115
00:05:29,639 --> 00:05:32,100
client and the server side in a normal

116
00:05:32,100 --> 00:05:35,220
case but it is not ideal if you were to

117
00:05:35,220 --> 00:05:37,620
pair if you you are an attacker and you

118
00:05:37,620 --> 00:05:39,120
want performance denial of service

119
00:05:39,120 --> 00:05:42,240
attack so you have to cheat somehow the

120
00:05:42,240 --> 00:05:46,320
protocol to decrease the

121
00:05:46,320 --> 00:05:48,479
computation cost publicity requirement

122
00:05:48,479 --> 00:05:50,580
on the autocash side

123
00:05:50,580 --> 00:05:53,699
how and other care can do that

124
00:05:53,699 --> 00:05:57,060
key is that you have to avoid the

125
00:05:57,060 --> 00:05:59,820
modular exponentiation it can be done

126
00:05:59,820 --> 00:06:03,380
it's relatively easy uh the client

127
00:06:03,380 --> 00:06:05,759
demolishes client does not pick any

128
00:06:05,759 --> 00:06:08,880
random number as it unnecessary as you

129
00:06:08,880 --> 00:06:09,840
will see

130
00:06:09,840 --> 00:06:12,840
it does not compute the modular

131
00:06:12,840 --> 00:06:14,460
exponentiation

132
00:06:14,460 --> 00:06:18,360
instead it just speaks a number which is

133
00:06:18,360 --> 00:06:21,060
less than the prime because it is

134
00:06:21,060 --> 00:06:23,220
guaranteed that the result of the

135
00:06:23,220 --> 00:06:25,860
modular exponentiation is less than the

136
00:06:25,860 --> 00:06:27,120
prime

137
00:06:27,120 --> 00:06:30,419
so the client the malicious client can

138
00:06:30,419 --> 00:06:33,360
send this peaked value to the server but

139
00:06:33,360 --> 00:06:35,580
the server cannot distinguish it between

140
00:06:35,580 --> 00:06:38,639
the uh from from the uh from a computed

141
00:06:38,639 --> 00:06:41,639
public key because it's just a number

142
00:06:41,639 --> 00:06:44,900
the server performs the modular

143
00:06:44,900 --> 00:06:47,460
exponentiation twice

144
00:06:47,460 --> 00:06:50,460
with this mechanism a malicious client

145
00:06:50,460 --> 00:06:53,580
can force the server to perform the CPU

146
00:06:53,580 --> 00:06:56,699
perform CPU intensive operations without

147
00:06:56,699 --> 00:06:59,460
any computational requirement on the

148
00:06:59,460 --> 00:07:01,380
autocash side

149
00:07:01,380 --> 00:07:03,660
so in this way the differential monkey

150
00:07:03,660 --> 00:07:06,020
exchange can be hacked

151
00:07:06,020 --> 00:07:10,039
it it doesn't mean that it is about the

152
00:07:10,039 --> 00:07:12,479
confidentiality uh the DVR monkey

153
00:07:12,479 --> 00:07:14,819
exchange is completely secure it is

154
00:07:14,819 --> 00:07:16,680
about availability

155
00:07:16,680 --> 00:07:19,740
so you have a way to perform a denial of

156
00:07:19,740 --> 00:07:20,940
service attack

157
00:07:20,940 --> 00:07:24,360
but what's the problem with the open SSL

158
00:07:24,360 --> 00:07:26,840
version 3.0

159
00:07:26,840 --> 00:07:31,800
the issue comes from uh two reason the

160
00:07:31,800 --> 00:07:34,500
first one is that in in the openness sub

161
00:07:34,500 --> 00:07:39,120
version 3.0 they started to support the

162
00:07:39,120 --> 00:07:43,560
DVR monkey Exchange in TLS 1.3 and it is

163
00:07:43,560 --> 00:07:47,099
enabled by default using

164
00:07:47,099 --> 00:07:50,759
um the largest possible group size this

165
00:07:50,759 --> 00:07:54,120
group size is the uh it determines the

166
00:07:54,120 --> 00:07:58,259
public key size the other reason is that

167
00:07:58,259 --> 00:08:00,599
the open SSL developer is very

168
00:08:00,599 --> 00:08:02,699
implemented the DPL monkeys change in

169
00:08:02,699 --> 00:08:06,599
the version open SSL 3.0 and they use

170
00:08:06,599 --> 00:08:10,919
this they use large exponent size

171
00:08:10,919 --> 00:08:14,220
meaning that the private key will be

172
00:08:14,220 --> 00:08:15,840
large also

173
00:08:15,840 --> 00:08:19,560
in the case of the TLs 1.3 the client

174
00:08:19,560 --> 00:08:22,620
can enforce the server to use the

175
00:08:22,620 --> 00:08:24,900
largest possible public key size

176
00:08:24,900 --> 00:08:28,860
this is how the DS 1.3 works it means

177
00:08:28,860 --> 00:08:31,080
that the public key will belong

178
00:08:31,080 --> 00:08:33,719
s of the ray implementation in open SSL

179
00:08:33,719 --> 00:08:37,380
3.0 the private key size will be also

180
00:08:37,380 --> 00:08:40,620
long as I mentioned the the CPU capacity

181
00:08:40,620 --> 00:08:43,200
requirement in the case of the DVR

182
00:08:43,200 --> 00:08:45,839
monkey exchange along increases along

183
00:08:45,839 --> 00:08:49,980
with the private and public key sizes so

184
00:08:49,980 --> 00:08:52,860
the effect will be that the exposure to

185
00:08:52,860 --> 00:08:54,600
the heat attack is dramatically

186
00:08:54,600 --> 00:08:56,339
increased

187
00:08:56,339 --> 00:08:59,339
however there are two product visits the

188
00:08:59,339 --> 00:09:02,760
first one that TLS 1.3 is enabled on the

189
00:09:02,760 --> 00:09:06,420
server but this is the case in 40 more

190
00:09:06,420 --> 00:09:09,660
than 45 percent of the web servers in

191
00:09:09,660 --> 00:09:15,060
the top 150 000 domains uh this um

192
00:09:15,060 --> 00:09:19,200
this ratio was uh 45 percent one year

193
00:09:19,200 --> 00:09:22,800
ago so that was at the 10 increasement

194
00:09:22,800 --> 00:09:24,120
in the last year

195
00:09:24,120 --> 00:09:26,580
the second prerequisite is that the

196
00:09:26,580 --> 00:09:30,320
server use the default name groups

197
00:09:30,320 --> 00:09:33,540
in the case of the most popular web

198
00:09:33,540 --> 00:09:37,980
servers Apache and nginx they

199
00:09:37,980 --> 00:09:40,500
um they fall back to the open SSL

200
00:09:40,500 --> 00:09:43,019
default so if a maintainer does not

201
00:09:43,019 --> 00:09:46,620
explicitly set the named groups in the

202
00:09:46,620 --> 00:09:48,899
configuration of the verb server it will

203
00:09:48,899 --> 00:09:51,959
use the open SSL default

204
00:09:51,959 --> 00:09:55,740
so after the theoretical explanation

205
00:09:55,740 --> 00:09:59,899
let's let's see a demo

206
00:10:02,279 --> 00:10:04,459
thank you

207
00:10:06,660 --> 00:10:09,779
in the left side you can see the open

208
00:10:09,779 --> 00:10:11,600
cell version

209
00:10:11,600 --> 00:10:16,200
3.0.5 this is the last affected version

210
00:10:16,200 --> 00:10:17,399
hopefully

211
00:10:17,399 --> 00:10:19,860
and on the right side you can see the

212
00:10:19,860 --> 00:10:21,620
open version

213
00:10:21,620 --> 00:10:24,720
3.0.6 which will be in the next release

214
00:10:24,720 --> 00:10:30,180
of openssl and there will be a fix here

215
00:10:30,180 --> 00:10:33,480
I use the open SSR command line tool to

216
00:10:33,480 --> 00:10:36,600
generate diffie-hamon public keys

217
00:10:36,600 --> 00:10:38,940
as you can see

218
00:10:38,940 --> 00:10:39,660
um

219
00:10:39,660 --> 00:10:42,720
if if the key size the public key size

220
00:10:42,720 --> 00:10:47,120
is 8kb bits This Server is it's just a

221
00:10:47,120 --> 00:10:51,480
digitalization instance so not a it's a

222
00:10:51,480 --> 00:10:53,399
relatively small machine but it can

223
00:10:53,399 --> 00:10:57,360
generate only three DVM on public Keys

224
00:10:57,360 --> 00:11:01,640
per second if long exponents are used

225
00:11:01,640 --> 00:11:05,279
compared to the left side where small

226
00:11:05,279 --> 00:11:09,180
exponents are used in that case with

227
00:11:09,180 --> 00:11:13,399
8kbit public Keys almost 50

228
00:11:13,399 --> 00:11:16,079
different public keys can be generated

229
00:11:16,079 --> 00:11:19,440
so there are huge difference between the

230
00:11:19,440 --> 00:11:22,040
two versions

231
00:11:23,399 --> 00:11:27,019
go back to the presentation

232
00:11:30,899 --> 00:11:34,200
as you could see the performance of the

233
00:11:34,200 --> 00:11:38,820
DPM on public key Generation

234
00:11:38,820 --> 00:11:42,000
Um decreased significantly meaning that

235
00:11:42,000 --> 00:11:44,660
the effectiveness of the day heat attack

236
00:11:44,660 --> 00:11:47,160
increased significantly

237
00:11:47,160 --> 00:11:50,040
in the case of open SSL 1.1

238
00:11:50,040 --> 00:11:52,860
the DVR amount wasn't enabled in the

239
00:11:52,860 --> 00:11:56,399
case of TLS 1.2 and it wasn't supported

240
00:11:56,399 --> 00:11:59,459
in the case of DLS 1.3

241
00:11:59,459 --> 00:12:02,579
uh there were some elliptic curves

242
00:12:02,579 --> 00:12:05,640
enabled by default the slowest key

243
00:12:05,640 --> 00:12:07,920
exchange mayonnaise was the elliptic

244
00:12:07,920 --> 00:12:10,680
curve the DVR monkey exchange using the

245
00:12:10,680 --> 00:12:13,680
curve and istp 521

246
00:12:13,680 --> 00:12:18,420
in the case of openssl 3.0 the default

247
00:12:18,420 --> 00:12:22,279
contains the DVR monkey exchange a bit

248
00:12:22,279 --> 00:12:25,560
the same elliptic curves but the default

249
00:12:25,560 --> 00:12:28,760
also contains the finite field

250
00:12:28,760 --> 00:12:34,019
parameters from 2kbit Key size to 8 GB

251
00:12:34,019 --> 00:12:38,040
key size it means that the slowest key

252
00:12:38,040 --> 00:12:40,200
exchange melaninism will be the DVR

253
00:12:40,200 --> 00:12:43,800
monkey exchange with the 8kbit Finish

254
00:12:43,800 --> 00:12:47,060
field DVM on fmr parameter the CPU

255
00:12:47,060 --> 00:12:49,680
requirement is

256
00:12:49,680 --> 00:12:54,600
50 to 90 times higher than is it was in

257
00:12:54,600 --> 00:12:57,839
the case of openness 1.1 using the

258
00:12:57,839 --> 00:13:00,540
default settings of named groups

259
00:13:00,540 --> 00:13:03,959
the problem is that this issue cannot be

260
00:13:03,959 --> 00:13:06,979
fixed completely

261
00:13:07,740 --> 00:13:10,980
the next release of open SSL we use

262
00:13:10,980 --> 00:13:14,760
small exponents instead of long ones

263
00:13:14,760 --> 00:13:18,800
but the openssl default of named groups

264
00:13:18,800 --> 00:13:22,500
cannot be changed so it will also still

265
00:13:22,500 --> 00:13:24,839
contain a definite field if you are on

266
00:13:24,839 --> 00:13:28,920
fabera parameters with key size is from

267
00:13:28,920 --> 00:13:32,760
2kbit to 8 kbbit because they cannot

268
00:13:32,760 --> 00:13:35,639
change the default value according to

269
00:13:35,639 --> 00:13:39,600
their versioning policy

270
00:13:39,600 --> 00:13:42,360
um so the slowest uh key exchange

271
00:13:42,360 --> 00:13:44,459
algorithm will be the ddpr monkey

272
00:13:44,459 --> 00:13:47,399
exchange still with the aqbit key size

273
00:13:47,399 --> 00:13:51,420
but it will be much faster than as it is

274
00:13:51,420 --> 00:13:53,160
in the current version of the openness

275
00:13:53,160 --> 00:13:57,000
3.0 using the small exponent

276
00:13:57,000 --> 00:13:59,820
the DVR monkey is changed with 4kbit key

277
00:13:59,820 --> 00:14:02,660
size has the same performance

278
00:14:02,660 --> 00:14:06,360
as the slowest elliptic curve DVR

279
00:14:06,360 --> 00:14:10,740
monkeys change the nistp five to one

280
00:14:10,740 --> 00:14:13,380
um the performance of the DVR monkey

281
00:14:13,380 --> 00:14:17,160
exchange with 8kbit key size will will

282
00:14:17,160 --> 00:14:21,000
be almost five times slower than the

283
00:14:21,000 --> 00:14:23,579
slowest elliptic curve DVR monkey

284
00:14:23,579 --> 00:14:26,519
Exchange dni stp521

285
00:14:26,519 --> 00:14:29,040
so the effectiveness of the day at the

286
00:14:29,040 --> 00:14:31,440
attack after the fix will be five times

287
00:14:31,440 --> 00:14:33,600
higher than it was in the case of open

288
00:14:33,600 --> 00:14:37,560
SSL 1.1 independently from the fact that

289
00:14:37,560 --> 00:14:40,199
uh small exponents will be used instead

290
00:14:40,199 --> 00:14:42,120
of long ones

291
00:14:42,120 --> 00:14:45,480
what if I compare the performance of the

292
00:14:45,480 --> 00:14:47,940
different among key exchange not to the

293
00:14:47,940 --> 00:14:49,500
slowest elliptic curved if you are

294
00:14:49,500 --> 00:14:53,540
monkey exchange but the most popular one

295
00:14:53,579 --> 00:14:56,100
earlier I compared the slowest key

296
00:14:56,100 --> 00:14:59,100
exchange in open SSR 1.1 to this lowest

297
00:14:59,100 --> 00:15:02,820
key exchange in open SSL 3.0 because it

298
00:15:02,820 --> 00:15:05,760
demonstrates that what is the what what

299
00:15:05,760 --> 00:15:07,860
the result of the default changes in

300
00:15:07,860 --> 00:15:10,519
open SSR 3.0

301
00:15:10,519 --> 00:15:13,019
how it changes the effectiveness of the

302
00:15:13,019 --> 00:15:15,420
day heat attack on this slide

303
00:15:15,420 --> 00:15:18,540
uh I compare the diffie-harmon key

304
00:15:18,540 --> 00:15:22,079
exchange using three kbbit key size with

305
00:15:22,079 --> 00:15:25,820
the most popular elliptic curves the

306
00:15:25,820 --> 00:15:28,220
nistp-256 and the

307
00:15:28,220 --> 00:15:30,980
x25519 because

308
00:15:30,980 --> 00:15:34,019
these ellipticals provide the same

309
00:15:34,019 --> 00:15:36,660
security strength as the DVR monkey

310
00:15:36,660 --> 00:15:40,079
exchange with 3kbit key size as you can

311
00:15:40,079 --> 00:15:42,600
see the elliptic curved here among key

312
00:15:42,600 --> 00:15:45,540
exchanges much faster providing the same

313
00:15:45,540 --> 00:15:48,500
Securities tanked and istp

314
00:15:48,500 --> 00:15:52,260
256 almost even almost 20 times faster

315
00:15:52,260 --> 00:15:56,240
than the DVR monkey exchange

316
00:15:56,240 --> 00:16:00,899
x25519 even almost 30 times faster than

317
00:16:00,899 --> 00:16:03,420
the ddpr monkey exchange using the 3kbit

318
00:16:03,420 --> 00:16:05,639
key size

319
00:16:05,639 --> 00:16:10,500
um elliptic curve s x 449 which provides

320
00:16:10,500 --> 00:16:13,320
much more security tracks strength than

321
00:16:13,320 --> 00:16:16,880
the earlier mentioned elliptic curves

322
00:16:16,880 --> 00:16:20,699
still even almost six times faster than

323
00:16:20,699 --> 00:16:23,519
the DVR monkey Exchange

324
00:16:23,519 --> 00:16:25,560
the question arises what you should do

325
00:16:25,560 --> 00:16:29,880
to avoid the exploitation of this day

326
00:16:29,880 --> 00:16:30,899
heat attack

327
00:16:30,899 --> 00:16:35,279
in the case of the TLs 1.2 to you should

328
00:16:35,279 --> 00:16:38,699
use well-known DVR parameters for

329
00:16:38,699 --> 00:16:40,380
instance Dimension infinite field if you

330
00:16:40,380 --> 00:16:42,540
are on parameters or the mod P DPM and

331
00:16:42,540 --> 00:16:47,160
parameters because open SSL 3.0 uses

332
00:16:47,160 --> 00:16:48,899
small exponents

333
00:16:48,899 --> 00:16:53,339
uh only if you use their loan DVR amount

334
00:16:53,339 --> 00:16:54,620
parameters

335
00:16:54,620 --> 00:16:57,660
the other option is to set the private

336
00:16:57,660 --> 00:17:00,620
key length in the DPL parameter file

337
00:17:00,620 --> 00:17:03,839
which was generated by open SSR command

338
00:17:03,839 --> 00:17:07,079
line tool unfortunately the open SSR

339
00:17:07,079 --> 00:17:09,839
command line tool is not suitable either

340
00:17:09,839 --> 00:17:13,339
to generate DV hormone parameter file

341
00:17:13,339 --> 00:17:18,720
with set small exponent size or set it

342
00:17:18,720 --> 00:17:20,160
afterwards

343
00:17:20,160 --> 00:17:23,059
in the case of the TLs 1.3

344
00:17:23,059 --> 00:17:26,099
you should set the name groups

345
00:17:26,099 --> 00:17:29,640
explicitly to avoid issues like that

346
00:17:29,640 --> 00:17:34,260
which comes from uh not so correct

347
00:17:34,260 --> 00:17:36,059
default values of the cryptographic

348
00:17:36,059 --> 00:17:37,200
library

349
00:17:37,200 --> 00:17:39,900
to ensure compatibility I would suggest

350
00:17:39,900 --> 00:17:43,100
to offer the

351
00:17:43,100 --> 00:17:46,799
nistp-256 but I also just suggest to

352
00:17:46,799 --> 00:17:49,520
prefer the x29

353
00:17:49,520 --> 00:17:53,240
25519 elliptic curve because it was

354
00:17:53,240 --> 00:17:56,280
designed by an intermittent researcher

355
00:17:56,280 --> 00:17:58,620
daniaji bergerstein

356
00:17:58,620 --> 00:18:03,000
and I would uh suggest to you to not

357
00:18:03,000 --> 00:18:04,860
consider not to use the different

358
00:18:04,860 --> 00:18:07,919
exchange key exchange with larger public

359
00:18:07,919 --> 00:18:12,120
Keys sizes because the strength of the

360
00:18:12,120 --> 00:18:14,400
three key bit key size is equivalent to

361
00:18:14,400 --> 00:18:17,360
the security strength of AIS

362
00:18:17,360 --> 00:18:22,639
120 H according to the nist

363
00:18:23,340 --> 00:18:25,440
um if you are interested in the the heat

364
00:18:25,440 --> 00:18:28,500
attack you can find a comprehensive

365
00:18:28,500 --> 00:18:32,100
information on its official website this

366
00:18:32,100 --> 00:18:34,740
is the Heat attack.com and I also

367
00:18:34,740 --> 00:18:37,380
published a command line tool which can

368
00:18:37,380 --> 00:18:39,840
be used to set the private key size in a

369
00:18:39,840 --> 00:18:42,720
different parameter file I published it

370
00:18:42,720 --> 00:18:45,179
on the GitHub page of the proof of

371
00:18:45,179 --> 00:18:47,220
concept implementation of the date

372
00:18:47,220 --> 00:18:50,520
attack called day heater thank you for

373
00:18:50,520 --> 00:18:52,620
your attention

374
00:18:52,620 --> 00:18:55,620
foreign

375
00:18:59,000 --> 00:19:01,799
any questions from the audience while

376
00:19:01,799 --> 00:19:04,280
we're here right

377
00:19:06,660 --> 00:19:08,220
thanks for that

378
00:19:08,220 --> 00:19:10,380
um in terms of the research you did are

379
00:19:10,380 --> 00:19:13,200
there any other areas of interest that

380
00:19:13,200 --> 00:19:16,919
you are exploring or was this the

381
00:19:16,919 --> 00:19:18,720
this is the main outcome but are there

382
00:19:18,720 --> 00:19:20,820
any other interesting areas that you

383
00:19:20,820 --> 00:19:23,520
sort of thought that it doesn't pass the

384
00:19:23,520 --> 00:19:26,360
sniff test yeah absolutely

385
00:19:26,360 --> 00:19:31,260
but it is not not just an accident I

386
00:19:31,260 --> 00:19:34,160
haven't talked about that yet because

387
00:19:34,160 --> 00:19:36,960
there are some

388
00:19:36,960 --> 00:19:39,600
um issue investigation in progress with

389
00:19:39,600 --> 00:19:43,620
other cryptographic libraries uh but um

390
00:19:43,620 --> 00:19:46,980
but you know it's it's confidential in

391
00:19:46,980 --> 00:19:50,039
the case of the openssl it's okay to

392
00:19:50,039 --> 00:19:52,760
talk about it because they consider it

393
00:19:52,760 --> 00:19:55,860
as a performance issue not a security

394
00:19:55,860 --> 00:19:58,140
issue and the

395
00:19:58,140 --> 00:20:01,559
um fix is publicly available and the

396
00:20:01,559 --> 00:20:05,340
issue was fixed completely in public so

397
00:20:05,340 --> 00:20:09,299
it wasn't confidential ever

398
00:20:09,299 --> 00:20:11,179
yes

399
00:20:11,179 --> 00:20:16,080
so the confidential uh let's say

400
00:20:16,080 --> 00:20:20,580
research that's not related to open SSL

401
00:20:20,580 --> 00:20:22,860
yeah it's not not related to work on a

402
00:20:22,860 --> 00:20:25,500
cell okay thanks

403
00:20:25,500 --> 00:20:27,240
thank you very much uh if there are any

404
00:20:27,240 --> 00:20:28,860
further questions

405
00:20:28,860 --> 00:20:30,299
um there is one there we have time for

406
00:20:30,299 --> 00:20:32,520
one more

407
00:20:32,520 --> 00:20:36,480
thank you sir thank you uh my question

408
00:20:36,480 --> 00:20:38,760
is has this been exploited in the wild

409
00:20:38,760 --> 00:20:42,320
are there documented cases

410
00:20:42,320 --> 00:20:45,419
very good question I'm also interested

411
00:20:45,419 --> 00:20:46,460
in the answer

412
00:20:46,460 --> 00:20:50,580
because uh there were some attacks

413
00:20:50,580 --> 00:20:53,580
against Google and also the cloudflare

414
00:20:53,580 --> 00:20:56,960
and they communicated that that

415
00:20:56,960 --> 00:20:59,820
encrypted connection was used

416
00:20:59,820 --> 00:21:01,919
to perform a denial of service attack

417
00:21:01,919 --> 00:21:04,799
against us but I don't know anything

418
00:21:04,799 --> 00:21:08,880
about the details of these attacks and I

419
00:21:08,880 --> 00:21:11,520
wanted to communicate with them but it's

420
00:21:11,520 --> 00:21:13,740
not so easy you know

421
00:21:13,740 --> 00:21:17,400
because it's Google so right okay thank

422
00:21:17,400 --> 00:21:20,299
you you're welcome

423
00:21:20,700 --> 00:21:22,740
thank you zeelard that's great we um

424
00:21:22,740 --> 00:21:24,780
have to move on to the next presentation

425
00:21:24,780 --> 00:21:26,460
which will be in a few minutes uh

426
00:21:26,460 --> 00:21:28,200
zeelard will be around

427
00:21:28,200 --> 00:21:30,179
for the rest of the day if there are any

428
00:21:30,179 --> 00:21:31,980
other questions he'd be happy to talk to

429
00:21:31,980 --> 00:21:34,159
you

