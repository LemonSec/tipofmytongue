1
00:00:00,120 --> 00:00:02,520
so please give attention please to

2
00:00:02,520 --> 00:00:05,659
Jungle ferency

3
00:00:08,280 --> 00:00:09,420
hey everyone

4
00:00:09,420 --> 00:00:12,599
my name is jungle ferenzi and I'm an ID

5
00:00:12,599 --> 00:00:15,839
security specialist at ukatami

6
00:00:15,839 --> 00:00:18,420
and in this presentation I'm going to

7
00:00:18,420 --> 00:00:21,180
tell you a story about how we found a

8
00:00:21,180 --> 00:00:23,760
critical vulnerability in an industrial

9
00:00:23,760 --> 00:00:26,359
firewall

10
00:00:26,519 --> 00:00:29,880
why do we need industrial firewalls well

11
00:00:29,880 --> 00:00:32,579
a lot of industrial appliances are

12
00:00:32,579 --> 00:00:35,219
simply not made to be secure and thus

13
00:00:35,219 --> 00:00:37,079
they need protection

14
00:00:37,079 --> 00:00:41,160
however regular firewalls are not always

15
00:00:41,160 --> 00:00:43,739
suitable for this kind of job since

16
00:00:43,739 --> 00:00:46,500
industrial environments suppose uh

17
00:00:46,500 --> 00:00:48,719
special special requirements such as

18
00:00:48,719 --> 00:00:52,140
white temperature and humidity ranges or

19
00:00:52,140 --> 00:00:54,480
special protocols that needs to be

20
00:00:54,480 --> 00:00:57,980
analyzed and so on

21
00:00:58,500 --> 00:01:02,100
in one of our projects at Academy we are

22
00:01:02,100 --> 00:01:04,440
working on creating a secure industrial

23
00:01:04,440 --> 00:01:06,299
firewall with policies and the

24
00:01:06,299 --> 00:01:07,920
University of Saget

25
00:01:07,920 --> 00:01:10,260
and in order to make something better

26
00:01:10,260 --> 00:01:12,420
first we have to evaluate the security

27
00:01:12,420 --> 00:01:15,479
measures of a few existing devices

28
00:01:15,479 --> 00:01:19,320
and during this assessment we are trying

29
00:01:19,320 --> 00:01:22,140
to find vulnerabilities and our goal is

30
00:01:22,140 --> 00:01:25,500
to eventually gain root access on the

31
00:01:25,500 --> 00:01:28,619
device dump the file system and analyze

32
00:01:28,619 --> 00:01:30,920
the results

33
00:01:31,380 --> 00:01:36,000
so how are we trying to do this well we

34
00:01:36,000 --> 00:01:38,400
usually divide the penetration

35
00:01:38,400 --> 00:01:41,040
penetration test into two sections a

36
00:01:41,040 --> 00:01:44,340
hardware and the software based tests

37
00:01:44,340 --> 00:01:46,799
um during the hardware the pen test we

38
00:01:46,799 --> 00:01:49,140
try to gather information about the

39
00:01:49,140 --> 00:01:52,320
device then open it and analyze how it

40
00:01:52,320 --> 00:01:55,860
works we usually look for connectors and

41
00:01:55,860 --> 00:01:58,259
test points which can give us low level

42
00:01:58,259 --> 00:02:01,860
access to the operation system and if it

43
00:02:01,860 --> 00:02:04,020
is necessary we can also desolder the

44
00:02:04,020 --> 00:02:06,960
flash and then they or extract the

45
00:02:06,960 --> 00:02:08,880
firmware from it

46
00:02:08,880 --> 00:02:11,340
after we are finished with the hardware

47
00:02:11,340 --> 00:02:14,780
side we focus on the software components

48
00:02:14,780 --> 00:02:16,379
and

49
00:02:16,379 --> 00:02:19,080
we usually map the interfaces and the

50
00:02:19,080 --> 00:02:21,959
services and we can then perform a black

51
00:02:21,959 --> 00:02:25,920
or gray box analysis and if we have

52
00:02:25,920 --> 00:02:28,140
binaries we can also do static or

53
00:02:28,140 --> 00:02:31,640
dynamic analysis on them

54
00:02:32,040 --> 00:02:34,620
so the subject device it was made in

55
00:02:34,620 --> 00:02:38,340
2010 and why it can seem that it was a

56
00:02:38,340 --> 00:02:41,280
long time ago industrial devices have

57
00:02:41,280 --> 00:02:43,920
longer lifespan than regular ones so it

58
00:02:43,920 --> 00:02:45,560
is still not absolute

59
00:02:45,560 --> 00:02:49,800
the device can perform protocol analysis

60
00:02:49,800 --> 00:02:53,220
and packet filtering and it has a

61
00:02:53,220 --> 00:02:56,040
configurator application which can be

62
00:02:56,040 --> 00:02:59,340
used to configure the device via USB or

63
00:02:59,340 --> 00:03:01,500
wired Network

64
00:03:01,500 --> 00:03:03,840
the device is allowed to the mines

65
00:03:03,840 --> 00:03:06,420
meaning that it has a MAC address but it

66
00:03:06,420 --> 00:03:08,760
does not have an IP address and in this

67
00:03:08,760 --> 00:03:12,180
contact context it appears to be

68
00:03:12,180 --> 00:03:14,220
transparent to the rest of the network

69
00:03:14,220 --> 00:03:17,840
so it's easily Deployable

70
00:03:18,239 --> 00:03:21,780
all right so let's start off with the

71
00:03:21,780 --> 00:03:23,519
hardware side

72
00:03:23,519 --> 00:03:27,300
well let's take a look at the outside as

73
00:03:27,300 --> 00:03:29,879
you can see there are two ethernet

74
00:03:29,879 --> 00:03:32,040
connectors on the front

75
00:03:32,040 --> 00:03:35,519
a stereo connector a USB port

76
00:03:35,519 --> 00:03:38,760
uh redundant power plug some feedback in

77
00:03:38,760 --> 00:03:42,780
this and another additional port

78
00:03:42,780 --> 00:03:45,599
if we take the device apart we can see

79
00:03:45,599 --> 00:03:48,180
that there are three pcbs inside two

80
00:03:48,180 --> 00:03:51,000
holding the ethernet connector itself

81
00:03:51,000 --> 00:03:55,140
and one for the main board

82
00:03:55,140 --> 00:03:57,900
the main board has several shifts

83
00:03:57,900 --> 00:04:00,720
installed including a system on the chip

84
00:04:00,720 --> 00:04:04,159
two RAM chips a flash chip

85
00:04:04,159 --> 00:04:07,379
to ethernet transceivers a Serial

86
00:04:07,379 --> 00:04:10,200
transceiver and fpga

87
00:04:10,200 --> 00:04:13,680
the fpga is is kind of weird to see

88
00:04:13,680 --> 00:04:16,440
because it's usually a costly component

89
00:04:16,440 --> 00:04:19,680
but in this case in this case they use

90
00:04:19,680 --> 00:04:24,180
it to physically disconnect the USB port

91
00:04:24,180 --> 00:04:27,860
from the CPU

92
00:04:27,900 --> 00:04:31,080
so can you see anything interesting on

93
00:04:31,080 --> 00:04:33,840
the pictures

94
00:04:33,840 --> 00:04:37,220
if you sit close enough perhaps you can

95
00:04:37,220 --> 00:04:40,320
there is a connector on the bottom of

96
00:04:40,320 --> 00:04:42,960
the board next to the CPU

97
00:04:42,960 --> 00:04:44,699
this is this kind of connectors are

98
00:04:44,699 --> 00:04:47,280
usually used for programming the board

99
00:04:47,280 --> 00:04:50,520
via JTAG or they can provide provide low

100
00:04:50,520 --> 00:04:53,820
level debugging or sometimes even shell

101
00:04:53,820 --> 00:04:57,199
access via uart

102
00:04:57,300 --> 00:05:00,060
while we managed to figure out the JTAG

103
00:05:00,060 --> 00:05:02,880
pin out we unfortunately did not have a

104
00:05:02,880 --> 00:05:05,220
device which could communicate with this

105
00:05:05,220 --> 00:05:06,300
chipset

106
00:05:06,300 --> 00:05:09,660
and we did not find the uart or other

107
00:05:09,660 --> 00:05:12,720
protocol on these pins and since we had

108
00:05:12,720 --> 00:05:15,979
the had to keep the device operational

109
00:05:15,979 --> 00:05:18,300
disordering The Flash chip was not an

110
00:05:18,300 --> 00:05:21,840
option so we had to conclude the harder

111
00:05:21,840 --> 00:05:25,460
side of the pen test at this point

112
00:05:26,580 --> 00:05:28,800
so let's take a look at the software

113
00:05:28,800 --> 00:05:31,440
side as I mentioned before there is a

114
00:05:31,440 --> 00:05:34,680
USB port on the front of the device this

115
00:05:34,680 --> 00:05:36,780
USB port can be used to fetch some

116
00:05:36,780 --> 00:05:40,440
diagnostic data from the device most of

117
00:05:40,440 --> 00:05:43,380
the data is encrypted however there are

118
00:05:43,380 --> 00:05:45,360
a few plain text files containing

119
00:05:45,360 --> 00:05:48,180
information such as the firmware version

120
00:05:48,180 --> 00:05:53,180
or network statistics and so on

121
00:05:53,940 --> 00:05:57,180
the USB port can also be used to deploy

122
00:05:57,180 --> 00:06:00,240
a configuration by generating one using

123
00:06:00,240 --> 00:06:02,940
the configurator however the

124
00:06:02,940 --> 00:06:06,360
configuration file is encrypted so it is

125
00:06:06,360 --> 00:06:09,800
not really useful for us

126
00:06:11,100 --> 00:06:13,860
on the other hand if we configure the

127
00:06:13,860 --> 00:06:16,020
device via the network we can create a

128
00:06:16,020 --> 00:06:17,460
packet capture

129
00:06:17,460 --> 00:06:19,800
and we can see what's going on during

130
00:06:19,800 --> 00:06:22,319
the configuration

131
00:06:22,319 --> 00:06:25,620
as it turns out the configurator uses

132
00:06:25,620 --> 00:06:28,380
portnacking meaning that it sends a

133
00:06:28,380 --> 00:06:31,440
magic packet containing a payload or in

134
00:06:31,440 --> 00:06:33,900
this case an encrypted payload to the

135
00:06:33,900 --> 00:06:37,560
device which in response opens a port

136
00:06:37,560 --> 00:06:40,139
for the sender and then a secure share

137
00:06:40,139 --> 00:06:43,080
communication gets established

138
00:06:43,080 --> 00:06:46,740
but if they use SSH could it be that the

139
00:06:46,740 --> 00:06:50,699
configurator is executing just plain old

140
00:06:50,699 --> 00:06:54,900
share commands maybe maybe not

141
00:06:54,900 --> 00:06:56,520
basically at this point we have two

142
00:06:56,520 --> 00:06:58,979
options the first one is to break the

143
00:06:58,979 --> 00:07:01,979
port knocking somehow get a hold of the

144
00:07:01,979 --> 00:07:05,120
SSH private key and log in to the device

145
00:07:05,120 --> 00:07:08,940
or we can also modify the config the

146
00:07:08,940 --> 00:07:11,639
command that the configurator executes

147
00:07:11,639 --> 00:07:15,500
via the SSH

148
00:07:15,680 --> 00:07:19,440
to achieve any of these we first have to

149
00:07:19,440 --> 00:07:22,080
analyze how the configurator works

150
00:07:22,080 --> 00:07:25,199
there are two analyzation methods static

151
00:07:25,199 --> 00:07:28,800
and dynamic during static analysis we

152
00:07:28,800 --> 00:07:31,380
try to figure out how the program works

153
00:07:31,380 --> 00:07:34,380
without running it for example by

154
00:07:34,380 --> 00:07:37,139
disassembling or decompiling it and then

155
00:07:37,139 --> 00:07:40,039
looking at the instructions why during

156
00:07:40,039 --> 00:07:43,620
Dynamic analysis We Run The executable

157
00:07:43,620 --> 00:07:46,860
and analyze the contents of the memory

158
00:07:46,860 --> 00:07:50,840
or we debug it and so on

159
00:07:51,120 --> 00:07:55,139
the binary itself is 65 megabytes which

160
00:07:55,139 --> 00:07:57,780
is large but not undoable but

161
00:07:57,780 --> 00:08:00,360
unfortunately Ida was unable to process

162
00:08:00,360 --> 00:08:01,199
it

163
00:08:01,199 --> 00:08:05,160
and we dig into the configurator's files

164
00:08:05,160 --> 00:08:07,919
looking for some clues why item may have

165
00:08:07,919 --> 00:08:11,220
got stuck and we found a bunch of jar

166
00:08:11,220 --> 00:08:15,900
and other Java related files we also

167
00:08:15,900 --> 00:08:19,259
found tool called jet VM which as it

168
00:08:19,259 --> 00:08:21,479
turns out is a Java to native code

169
00:08:21,479 --> 00:08:24,199
compiler and an obfuscater

170
00:08:24,199 --> 00:08:26,879
and unfortunately there is no the

171
00:08:26,879 --> 00:08:29,819
obfuscater available for this tool so we

172
00:08:29,819 --> 00:08:33,960
had to move the dynamic analysis

173
00:08:34,260 --> 00:08:35,399
so

174
00:08:35,399 --> 00:08:37,740
during the dynamic analysis we started

175
00:08:37,740 --> 00:08:41,339
by creating a memory dump from the

176
00:08:41,339 --> 00:08:43,679
configurator while fetching the

177
00:08:43,679 --> 00:08:46,020
diagnostics from the device

178
00:08:46,020 --> 00:08:48,180
after this we analyzed the dump with

179
00:08:48,180 --> 00:08:51,540
Beam work strings and other analysis

180
00:08:51,540 --> 00:08:54,420
analysis tools

181
00:08:54,420 --> 00:08:57,779
we found an interesting text called node

182
00:08:57,779 --> 00:08:59,880
Diagnostics containing a lot more

183
00:08:59,880 --> 00:09:02,640
information than the one we fetched via

184
00:09:02,640 --> 00:09:04,680
the USB port

185
00:09:04,680 --> 00:09:09,019
it reveals the firewall rules

186
00:09:09,240 --> 00:09:12,440
the routing table

187
00:09:13,620 --> 00:09:17,420
details about the connections

188
00:09:18,200 --> 00:09:21,300
the script itself that creates the

189
00:09:21,300 --> 00:09:24,019
firewall rules

190
00:09:25,200 --> 00:09:28,200
uh list of the installed packages and

191
00:09:28,200 --> 00:09:31,320
the corresponding versions

192
00:09:31,320 --> 00:09:35,339
log messages with more details than the

193
00:09:35,339 --> 00:09:39,920
one available in the configurator itself

194
00:09:40,620 --> 00:09:43,680
a private key which got us excited but

195
00:09:43,680 --> 00:09:45,959
unfortunately it is encrypted and we

196
00:09:45,959 --> 00:09:48,720
were unsuccessful decrypting it

197
00:09:48,720 --> 00:09:51,300
and we also found as in an interesting

198
00:09:51,300 --> 00:09:54,300
past pointing to a share script called

199
00:09:54,300 --> 00:09:56,640
node Diagnostics

200
00:09:56,640 --> 00:10:00,060
could this be that this node Diagnostics

201
00:10:00,060 --> 00:10:02,820
share script is responsible for creating

202
00:10:02,820 --> 00:10:04,980
the text we are seeing

203
00:10:04,980 --> 00:10:08,100
well if we look further we find a list

204
00:10:08,100 --> 00:10:10,560
of running processes which includes an

205
00:10:10,560 --> 00:10:14,279
entry where the node Diagnostics path is

206
00:10:14,279 --> 00:10:18,000
passed to sh which executes it in a new

207
00:10:18,000 --> 00:10:21,600
shell and as you can see this new shell

208
00:10:21,600 --> 00:10:24,120
is running as root

209
00:10:24,120 --> 00:10:25,680
so

210
00:10:25,680 --> 00:10:28,260
let's search for this node Diagnostics

211
00:10:28,260 --> 00:10:30,000
path in the memory

212
00:10:30,000 --> 00:10:32,519
and if we stop the execution at the

213
00:10:32,519 --> 00:10:34,260
right moment we can find it in plain

214
00:10:34,260 --> 00:10:37,279
text as you can see

215
00:10:38,279 --> 00:10:40,880
we can also find it in another location

216
00:10:40,880 --> 00:10:44,100
saying exit executing command and the

217
00:10:44,100 --> 00:10:45,660
path itself

218
00:10:45,660 --> 00:10:47,339
so

219
00:10:47,339 --> 00:10:49,320
we change the path

220
00:10:49,320 --> 00:10:51,720
to test test which is an easily

221
00:10:51,720 --> 00:10:55,019
recognizable and searchable pattern and

222
00:10:55,019 --> 00:10:57,779
after executing after fetching the

223
00:10:57,779 --> 00:11:00,120
Diagnostics sure enough we found the

224
00:11:00,120 --> 00:11:01,980
string saying executing command test

225
00:11:01,980 --> 00:11:03,839
test

226
00:11:03,839 --> 00:11:07,200
and not just that but we also found the

227
00:11:07,200 --> 00:11:09,600
different strings saying sh test tested

228
00:11:09,600 --> 00:11:12,360
Nest Mount meaning that the device tried

229
00:11:12,360 --> 00:11:16,279
to run test test as root

230
00:11:16,920 --> 00:11:18,600
so

231
00:11:18,600 --> 00:11:21,120
at this point we have arbitrary code

232
00:11:21,120 --> 00:11:23,880
execution we can modify the node

233
00:11:23,880 --> 00:11:26,880
Diagnostics path and run anything we

234
00:11:26,880 --> 00:11:29,279
want basically there are a few

235
00:11:29,279 --> 00:11:31,740
limitations such as that only the

236
00:11:31,740 --> 00:11:34,740
standard error gets locked the length of

237
00:11:34,740 --> 00:11:37,260
the command itself is limited and the

238
00:11:37,260 --> 00:11:40,620
return length is also limited however we

239
00:11:40,620 --> 00:11:43,320
can deploy longer scripts via the USB

240
00:11:43,320 --> 00:11:45,959
port and if we need we can pipe the

241
00:11:45,959 --> 00:11:48,120
results into head or tail to get

242
00:11:48,120 --> 00:11:51,240
different segments of the output

243
00:11:51,240 --> 00:11:54,240
so that's what we did we inserted the

244
00:11:54,240 --> 00:11:57,000
pen drive and dumped the file system to

245
00:11:57,000 --> 00:11:59,220
achieve this first we had to figure out

246
00:11:59,220 --> 00:12:03,959
how the fpga isolated the USB port from

247
00:12:03,959 --> 00:12:07,200
the CPU because nothing was showing on

248
00:12:07,200 --> 00:12:10,620
in LS USB however after finding the

249
00:12:10,620 --> 00:12:13,980
relevant script and undoing the metric

250
00:12:13,980 --> 00:12:17,279
we were we had no more obstacles ahead

251
00:12:17,279 --> 00:12:19,519
of us

252
00:12:20,820 --> 00:12:24,300
what we found are scripts configuration

253
00:12:24,300 --> 00:12:27,779
files custom binaries public and private

254
00:12:27,779 --> 00:12:30,360
Keys including the config encryption

255
00:12:30,360 --> 00:12:33,120
query although it is important to

256
00:12:33,120 --> 00:12:35,160
mention that the configuration

257
00:12:35,160 --> 00:12:38,100
encryption key is unique for every

258
00:12:38,100 --> 00:12:40,019
configuration

259
00:12:40,019 --> 00:12:43,320
and of course we also found a lot of

260
00:12:43,320 --> 00:12:45,660
answers to our questions and useful

261
00:12:45,660 --> 00:12:49,819
insights for the projects

262
00:12:50,760 --> 00:12:51,959
so

263
00:12:51,959 --> 00:12:54,240
what are the key takeaways what did we

264
00:12:54,240 --> 00:12:56,940
learn well

265
00:12:56,940 --> 00:12:59,700
first of all security by obscurity is

266
00:12:59,700 --> 00:13:02,700
once again not the solution to protect

267
00:13:02,700 --> 00:13:06,660
um resources they thought that the

268
00:13:06,660 --> 00:13:09,000
device is secure and we managed to

269
00:13:09,000 --> 00:13:12,180
exploit it and remember that this device

270
00:13:12,180 --> 00:13:14,940
could be the barrier the last barrier

271
00:13:14,940 --> 00:13:18,360
between critical infrastructure and an

272
00:13:18,360 --> 00:13:20,160
attacker

273
00:13:20,160 --> 00:13:23,519
secondly it is also a good example why

274
00:13:23,519 --> 00:13:26,459
is it so important to penetration test

275
00:13:26,459 --> 00:13:29,579
your assess with experts no matter

276
00:13:29,579 --> 00:13:31,980
whether it is a hardware device or a

277
00:13:31,980 --> 00:13:34,019
software solution

278
00:13:34,019 --> 00:13:36,660
and finally this is a friendly reminder

279
00:13:36,660 --> 00:13:39,540
to fix your mistakes because we notify

280
00:13:39,540 --> 00:13:41,940
the manufacturer over a year ago and

281
00:13:41,940 --> 00:13:44,639
still got no answer from them

282
00:13:44,639 --> 00:13:48,360
yes one can say that this is an

283
00:13:48,360 --> 00:13:51,380
architectural issue that's hard to fix

284
00:13:51,380 --> 00:13:55,560
and exploiting it requires Insider

285
00:13:55,560 --> 00:13:57,420
knowledge but it is still a

286
00:13:57,420 --> 00:14:01,399
vulnerability and it needs to be fixed

287
00:14:01,800 --> 00:14:03,720
so I thank you so much for your

288
00:14:03,720 --> 00:14:07,019
attention and if if you have questions I

289
00:14:07,019 --> 00:14:09,540
can answer them now and if I have as I

290
00:14:09,540 --> 00:14:12,240
can see I have a few minutes left I can

291
00:14:12,240 --> 00:14:14,639
show you a demonstration about the

292
00:14:14,639 --> 00:14:16,200
attack in

293
00:14:16,200 --> 00:14:18,860
in work

294
00:14:19,320 --> 00:14:21,480
thank you jungle uh before the

295
00:14:21,480 --> 00:14:23,760
demonstration does anybody have any

296
00:14:23,760 --> 00:14:27,360
question uh related to

297
00:14:27,360 --> 00:14:31,339
this presentation just now

298
00:14:32,519 --> 00:14:35,220
okay if you do have anything uh chongo

299
00:14:35,220 --> 00:14:38,820
will be available uh around lunchtime or

300
00:14:38,820 --> 00:14:41,459
this afternoon so jungle please continue

301
00:14:41,459 --> 00:14:44,760
with your demo thank you all right so

302
00:14:44,760 --> 00:14:47,760
what we are going to see is the output

303
00:14:47,760 --> 00:14:50,480
of the uh the screen of the

304
00:14:50,480 --> 00:14:54,839
x64 debugger I'm going to attach to the

305
00:14:54,839 --> 00:14:56,940
configurator application

306
00:14:56,940 --> 00:15:01,019
and search for node diagnostics for the

307
00:15:01,019 --> 00:15:04,100
no dialogues string in the memory

308
00:15:04,100 --> 00:15:07,380
and after I found it

309
00:15:07,380 --> 00:15:11,060
I am going to modify it

310
00:15:11,220 --> 00:15:14,579
and the command I'm going to inject is

311
00:15:14,579 --> 00:15:18,720
LS so it is going to list the contents

312
00:15:18,720 --> 00:15:22,220
of the root folder itself

313
00:15:26,220 --> 00:15:28,560
so after the modification I go back to

314
00:15:28,560 --> 00:15:30,779
the configurator and fetch the

315
00:15:30,779 --> 00:15:33,180
Diagnostics to execute the command I

316
00:15:33,180 --> 00:15:36,199
have just modified

317
00:15:40,139 --> 00:15:41,760
and

318
00:15:41,760 --> 00:15:43,800
after it finished I go back to the

319
00:15:43,800 --> 00:15:46,680
debugger I searched for I search for the

320
00:15:46,680 --> 00:15:49,260
node Diagnostics uh sorry the exit

321
00:15:49,260 --> 00:15:51,420
status string which is always located

322
00:15:51,420 --> 00:15:56,459
before the result and if I modify the

323
00:15:56,459 --> 00:15:58,980
contents to list it in a more readable

324
00:15:58,980 --> 00:16:02,220
format you can see the contents of the

325
00:16:02,220 --> 00:16:04,820
root folder

326
00:16:08,699 --> 00:16:10,800
thank you

327
00:16:10,800 --> 00:16:13,800
foreign

328
00:16:19,220 --> 00:16:24,120
's very first Public Presentation

329
00:16:24,300 --> 00:16:26,579
um does anybody have anything to

330
00:16:26,579 --> 00:16:29,459
question or to add

331
00:16:29,459 --> 00:16:33,739
okay oh yes we do

332
00:16:34,620 --> 00:16:37,380
you said the the firmware the device was

333
00:16:37,380 --> 00:16:40,259
released in 2010 how many firmware

334
00:16:40,259 --> 00:16:42,720
releases has been since 2010

335
00:16:42,720 --> 00:16:45,360
approximately if you know

336
00:16:45,360 --> 00:16:49,320
um I cannot give you an exact number but

337
00:16:49,320 --> 00:16:53,639
um I believe there are a few years have

338
00:16:53,639 --> 00:16:56,339
passed since they last released an

339
00:16:56,339 --> 00:16:59,420
update for this device

340
00:17:01,980 --> 00:17:04,520
oh

341
00:17:04,520 --> 00:17:08,160
anybody with anything else

342
00:17:08,160 --> 00:17:10,140
no in which case

343
00:17:10,140 --> 00:17:12,000
again changa thank you and

344
00:17:12,000 --> 00:17:14,040
congratulations

345
00:17:14,040 --> 00:17:16,520
thanks

