1
00:00:00,000 --> 00:00:01,800
thanks for coming back hope you enjoyed

2
00:00:01,800 --> 00:00:05,279
your coffee next uh presentation is Mr

3
00:00:05,279 --> 00:00:07,819
Roland

4
00:00:08,220 --> 00:00:10,260
so good morning everyone

5
00:00:10,260 --> 00:00:12,660
my name is Roland night

6
00:00:12,660 --> 00:00:16,020
I'm a PhD student from the crazy slab

7
00:00:16,020 --> 00:00:19,260
the I.T security research group of the

8
00:00:19,260 --> 00:00:20,880
University

9
00:00:20,880 --> 00:00:23,279
of technology and economics Budapest

10
00:00:23,279 --> 00:00:27,060
and today I will talk about how we are

11
00:00:27,060 --> 00:00:30,240
fuzzing trusted applications via shared

12
00:00:30,240 --> 00:00:32,159
memory

13
00:00:32,159 --> 00:00:35,280
first I will talk a bit about trusted

14
00:00:35,280 --> 00:00:38,160
applications what they are how they work

15
00:00:38,160 --> 00:00:41,100
why they are good for us then little

16
00:00:41,100 --> 00:00:44,399
Basics on fuzzing in case any of you is

17
00:00:44,399 --> 00:00:46,440
not familiar with it

18
00:00:46,440 --> 00:00:49,140
then I will tell you how we emulated our

19
00:00:49,140 --> 00:00:51,239
trusted application

20
00:00:51,239 --> 00:00:53,219
and finally

21
00:00:53,219 --> 00:00:57,239
how we wrote Our custom fuzzer

22
00:00:57,239 --> 00:00:58,980
and

23
00:00:58,980 --> 00:01:01,440
before we proceed any further I must

24
00:01:01,440 --> 00:01:04,319
warn you that all that I'm going to tell

25
00:01:04,319 --> 00:01:07,680
you today is work in progress

26
00:01:07,680 --> 00:01:09,840
so

27
00:01:09,840 --> 00:01:11,460
so please tune your expectations

28
00:01:11,460 --> 00:01:14,298
accordingly

29
00:01:14,880 --> 00:01:18,000
so first trusted applications

30
00:01:18,000 --> 00:01:20,659
they are special pieces of software

31
00:01:20,659 --> 00:01:23,220
executed by trusted execution

32
00:01:23,220 --> 00:01:24,540
environments

33
00:01:24,540 --> 00:01:27,600
they are digitally signed and of course

34
00:01:27,600 --> 00:01:29,640
this signature is verified before

35
00:01:29,640 --> 00:01:31,560
execution

36
00:01:31,560 --> 00:01:34,860
and they are isolated from normal words

37
00:01:34,860 --> 00:01:36,780
applications

38
00:01:36,780 --> 00:01:40,079
usually by some Hardware feature which

39
00:01:40,079 --> 00:01:43,979
in our case will be armed trust Zone

40
00:01:43,979 --> 00:01:46,380
and their integrity protection and

41
00:01:46,380 --> 00:01:49,020
isolation make them ideal for

42
00:01:49,020 --> 00:01:50,700
implementing security critical

43
00:01:50,700 --> 00:01:53,640
applications like

44
00:01:53,640 --> 00:01:55,740
certain cryptographical functions

45
00:01:55,740 --> 00:01:58,740
Financial applications or digital Rights

46
00:01:58,740 --> 00:02:02,119
Management related stuff

47
00:02:03,720 --> 00:02:07,619
so first arm trust Zone it is a harder

48
00:02:07,619 --> 00:02:10,440
feature implemented in arm cores of

49
00:02:10,440 --> 00:02:11,459
course

50
00:02:11,459 --> 00:02:15,239
our CPUs often contain register called

51
00:02:15,239 --> 00:02:16,680
the

52
00:02:16,680 --> 00:02:19,680
security configuration register

53
00:02:19,680 --> 00:02:22,319
which includes a so-called non-secure

54
00:02:22,319 --> 00:02:25,980
bit and depending on the value of this

55
00:02:25,980 --> 00:02:26,760
bit

56
00:02:26,760 --> 00:02:29,580
certain memory regions and Hardware

57
00:02:29,580 --> 00:02:31,440
elements

58
00:02:31,440 --> 00:02:33,599
can or cannot

59
00:02:33,599 --> 00:02:37,560
be used by the CPU this is enforced by

60
00:02:37,560 --> 00:02:39,420
the system bus

61
00:02:39,420 --> 00:02:42,840
and by the value of this bit we can

62
00:02:42,840 --> 00:02:46,860
partition the execution into a so-called

63
00:02:46,860 --> 00:02:49,860
normal world where we usually have Linux

64
00:02:49,860 --> 00:02:51,420
or Android

65
00:02:51,420 --> 00:02:54,420
and the so-called secure world

66
00:02:54,420 --> 00:02:56,519
where is our trusted execution

67
00:02:56,519 --> 00:02:59,840
environment Opti

68
00:03:00,599 --> 00:03:03,840
so Opti stands for open source portable

69
00:03:03,840 --> 00:03:07,620
T it is ported to more than 50 iot

70
00:03:07,620 --> 00:03:09,480
platforms

71
00:03:09,480 --> 00:03:11,700
and

72
00:03:11,700 --> 00:03:14,159
it's mainly an operating system for the

73
00:03:14,159 --> 00:03:16,019
secure world but it has additional

74
00:03:16,019 --> 00:03:17,700
components as well

75
00:03:17,700 --> 00:03:21,959
like it has a driver for it

76
00:03:21,959 --> 00:03:24,659
the normal word in the Linux care now

77
00:03:24,659 --> 00:03:27,599
and things like that and

78
00:03:27,599 --> 00:03:29,819
Opti Works in a way that normal

79
00:03:29,819 --> 00:03:33,120
applications can request the execution

80
00:03:33,120 --> 00:03:36,420
of trusted apps by calling the library

81
00:03:36,420 --> 00:03:37,800
function

82
00:03:37,800 --> 00:03:41,459
which we'll call the T driver in the

83
00:03:41,459 --> 00:03:45,420
kernel then a so-called secure monitor

84
00:03:45,420 --> 00:03:48,599
core will be executed the context switch

85
00:03:48,599 --> 00:03:51,599
happens and from that point optivia run

86
00:03:51,599 --> 00:03:53,819
and it will execute the requested

87
00:03:53,819 --> 00:03:56,640
trusted application

88
00:03:56,640 --> 00:03:58,739
and of course as I said previously

89
00:03:58,739 --> 00:04:01,440
trusted apps are Integrity checked and

90
00:04:01,440 --> 00:04:03,420
they are loaded to those sections of the

91
00:04:03,420 --> 00:04:06,180
memory that are cannot be accessed from

92
00:04:06,180 --> 00:04:08,780
the normal word

93
00:04:08,940 --> 00:04:11,700
so when we decided to fast trust the

94
00:04:11,700 --> 00:04:13,860
applications we had a very specific one

95
00:04:13,860 --> 00:04:15,120
in mind

96
00:04:15,120 --> 00:04:18,540
which we developed a little earlier

97
00:04:18,540 --> 00:04:23,699
and we created this to perform root key

98
00:04:23,699 --> 00:04:27,419
detection checks on the Linux kernel

99
00:04:27,419 --> 00:04:30,180
it consists of several integrity and

100
00:04:30,180 --> 00:04:32,820
consistency checks it's approximately

101
00:04:32,820 --> 00:04:35,340
four thousand and five hundred lines of

102
00:04:35,340 --> 00:04:39,360
C code so it's a medium-sized project

103
00:04:39,360 --> 00:04:43,320
and it uses four Services implemented in

104
00:04:43,320 --> 00:04:46,259
The Trusted kernel think of them as

105
00:04:46,259 --> 00:04:48,540
something like loadable karna modules

106
00:04:48,540 --> 00:04:51,720
for Linux except that they are not

107
00:04:51,720 --> 00:04:54,419
loadable but they are compiled into the

108
00:04:54,419 --> 00:04:57,000
trusted care now

109
00:04:57,000 --> 00:04:59,520
and the checks executed by our

110
00:04:59,520 --> 00:05:01,979
application can be divided to three

111
00:05:01,979 --> 00:05:04,919
sections plus an initialization phase

112
00:05:04,919 --> 00:05:08,220
and we plan to fast this separately a

113
00:05:08,220 --> 00:05:11,540
bit later I will tell you why

114
00:05:12,300 --> 00:05:13,620
so

115
00:05:13,620 --> 00:05:15,060
uh

116
00:05:15,060 --> 00:05:17,100
first we have our initialization phase

117
00:05:17,100 --> 00:05:19,199
here we compute a set of reference

118
00:05:19,199 --> 00:05:22,919
hashes what we later used by the other

119
00:05:22,919 --> 00:05:25,020
sections

120
00:05:25,020 --> 00:05:27,840
then we check function pointers in the

121
00:05:27,840 --> 00:05:30,840
layer quad virtual file system of the

122
00:05:30,840 --> 00:05:33,600
Linux kernel which is responsible for

123
00:05:33,600 --> 00:05:36,180
hiding differences between file system

124
00:05:36,180 --> 00:05:38,460
drivers

125
00:05:38,460 --> 00:05:42,180
then we check data structures holding

126
00:05:42,180 --> 00:05:45,240
information about tasks tasks are

127
00:05:45,240 --> 00:05:48,180
basically how the Linux care analysis

128
00:05:48,180 --> 00:05:51,660
threads or processes

129
00:05:51,660 --> 00:05:54,419
after that we have a bunch of

130
00:05:54,419 --> 00:05:57,419
General Integrity checks like we check

131
00:05:57,419 --> 00:06:00,479
if someone modified the code of the

132
00:06:00,479 --> 00:06:02,880
kernel or any of the system was very

133
00:06:02,880 --> 00:06:06,199
replaced and things like that

134
00:06:06,240 --> 00:06:09,360
then we check files for persistent

135
00:06:09,360 --> 00:06:13,139
rootkit components and finally we have

136
00:06:13,139 --> 00:06:16,620
checks targeting various layers of the

137
00:06:16,620 --> 00:06:19,280
network stack

138
00:06:19,979 --> 00:06:22,979
so next

139
00:06:22,979 --> 00:06:26,220
next bit about fuzzing

140
00:06:26,220 --> 00:06:28,440
fuzzing is a form of automated security

141
00:06:28,440 --> 00:06:29,699
testing

142
00:06:29,699 --> 00:06:33,479
and the basic idea is to execute our

143
00:06:33,479 --> 00:06:36,600
application with random or semi-random

144
00:06:36,600 --> 00:06:38,580
test cases

145
00:06:38,580 --> 00:06:41,160
it is highly effective because it can be

146
00:06:41,160 --> 00:06:43,259
excellently parallelized

147
00:06:43,259 --> 00:06:46,220
and if we have access to the source code

148
00:06:46,220 --> 00:06:49,160
then certain compiler instrumentations

149
00:06:49,160 --> 00:06:53,340
can even further improve buzzing

150
00:06:53,340 --> 00:06:55,560
of course it has some limitations as

151
00:06:55,560 --> 00:06:59,520
well like reaching codes in many nasty

152
00:06:59,520 --> 00:07:02,960
divs for example might be complicated

153
00:07:02,960 --> 00:07:06,360
and monitoring the application to detect

154
00:07:06,360 --> 00:07:08,520
crashes

155
00:07:08,520 --> 00:07:10,979
can be problematic as well especially in

156
00:07:10,979 --> 00:07:13,880
the iot domain

157
00:07:15,000 --> 00:07:17,039
so

158
00:07:17,039 --> 00:07:19,560
I wrote this image to explain the

159
00:07:19,560 --> 00:07:22,199
general workflow of a fuzzer

160
00:07:22,199 --> 00:07:26,039
so first we have our input files they

161
00:07:26,039 --> 00:07:27,900
are placed in a queue

162
00:07:27,900 --> 00:07:33,000
then we have our executable and

163
00:07:33,000 --> 00:07:35,940
first we pick one input file from the

164
00:07:35,940 --> 00:07:39,720
queue mutate it somehow like

165
00:07:39,720 --> 00:07:42,599
replace a byte with something random

166
00:07:42,599 --> 00:07:45,660
flip a bit or append some chunk to the

167
00:07:45,660 --> 00:07:47,819
end of file things like that

168
00:07:47,819 --> 00:07:50,340
then we execute our application with

169
00:07:50,340 --> 00:07:52,560
this mutated input

170
00:07:52,560 --> 00:07:55,560
and of course we monitor it to detect if

171
00:07:55,560 --> 00:07:56,940
we could crash it

172
00:07:56,940 --> 00:07:59,940
if we could then the crashes of course

173
00:07:59,940 --> 00:08:03,599
reported to the user and the input that

174
00:08:03,599 --> 00:08:05,639
caused the crash is saved for later

175
00:08:05,639 --> 00:08:07,259
analyzes

176
00:08:07,259 --> 00:08:10,440
and if the input is considered to be

177
00:08:10,440 --> 00:08:12,120
interesting then it's placed back in the

178
00:08:12,120 --> 00:08:13,740
queue and

179
00:08:13,740 --> 00:08:16,880
it starts all over again

180
00:08:19,319 --> 00:08:22,919
so uh

181
00:08:22,919 --> 00:08:26,639
in the image I showed you it was about

182
00:08:26,639 --> 00:08:30,120
how we use input files but our

183
00:08:30,120 --> 00:08:32,099
application doesn't take its input from

184
00:08:32,099 --> 00:08:35,940
files but it reads its input directly

185
00:08:35,940 --> 00:08:37,979
from the memory

186
00:08:37,979 --> 00:08:40,559
so the question is how we fast this kind

187
00:08:40,559 --> 00:08:42,719
of application

188
00:08:42,719 --> 00:08:46,140
well we originally developed it in a

189
00:08:46,140 --> 00:08:49,279
quemo based environment

190
00:08:49,279 --> 00:08:51,720
so we can

191
00:08:51,720 --> 00:08:54,720
quite easily manipulate its memory

192
00:08:54,720 --> 00:08:58,440
and the basic idea is let's just

193
00:08:58,440 --> 00:09:01,920
mutate the memory as it is

194
00:09:01,920 --> 00:09:05,100
well the problem is that it is used by

195
00:09:05,100 --> 00:09:07,500
the Linux scanner and the kernel

196
00:09:07,500 --> 00:09:09,600
wouldn't be very happy if we just

197
00:09:09,600 --> 00:09:12,480
started to randomly overwrite things in

198
00:09:12,480 --> 00:09:14,100
its working memory

199
00:09:14,100 --> 00:09:16,380
so we would probably have a lot of

200
00:09:16,380 --> 00:09:19,019
crashes and most of them would be

201
00:09:19,019 --> 00:09:20,459
relevant

202
00:09:20,459 --> 00:09:22,740
so this is not the way

203
00:09:22,740 --> 00:09:25,800
next idea was to Let's fake everything

204
00:09:25,800 --> 00:09:28,920
else into an other unused region of

205
00:09:28,920 --> 00:09:32,040
memory like just copy everything and

206
00:09:32,040 --> 00:09:36,319
modify the application to read from that

207
00:09:36,899 --> 00:09:40,680
this is feasible but to do so we would

208
00:09:40,680 --> 00:09:44,279
need to change the application a lot

209
00:09:44,279 --> 00:09:47,279
and we would like to avoid that because

210
00:09:47,279 --> 00:09:49,860
the more we modify the application

211
00:09:49,860 --> 00:09:53,100
to be testable the less we actually test

212
00:09:53,100 --> 00:09:56,360
the application we want

213
00:09:58,080 --> 00:10:01,440
so since the kernel is the root of all

214
00:10:01,440 --> 00:10:03,660
our problems then let's get rid of the

215
00:10:03,660 --> 00:10:05,760
kernel

216
00:10:05,760 --> 00:10:09,660
well the problem is that Optus

217
00:10:09,660 --> 00:10:12,959
the T running our application uses the

218
00:10:12,959 --> 00:10:14,459
kernel as well

219
00:10:14,459 --> 00:10:17,100
so it wouldn't work without the care now

220
00:10:17,100 --> 00:10:19,260
as well

221
00:10:19,260 --> 00:10:23,100
also trusted apps cannot be executed on

222
00:10:23,100 --> 00:10:26,279
regular systems for a bunch of reason

223
00:10:26,279 --> 00:10:29,580
even if we wrote a wrapper to execute it

224
00:10:29,580 --> 00:10:33,480
and even if we executed it on an arm six

225
00:10:33,480 --> 00:10:38,399
arm 64 computer then we still have the

226
00:10:38,399 --> 00:10:40,800
problem that it uses a custom system

227
00:10:40,800 --> 00:10:43,260
quotes like the system course doesn't

228
00:10:43,260 --> 00:10:47,540
match the ones used by the Linux scanner

229
00:10:49,100 --> 00:10:53,339
and here comes Marcel's eiberts last

230
00:10:53,339 --> 00:10:55,980
year activity talk where he showed us

231
00:10:55,980 --> 00:10:59,279
that it is possible to emulate trusted

232
00:10:59,279 --> 00:11:00,600
applications

233
00:11:00,600 --> 00:11:04,440
and to do so he used an emulation

234
00:11:04,440 --> 00:11:07,440
framework called killing

235
00:11:07,440 --> 00:11:11,420
and that's what we will do as well

236
00:11:12,600 --> 00:11:14,820
so of course there are pros and cons of

237
00:11:14,820 --> 00:11:16,860
emulation

238
00:11:16,860 --> 00:11:20,220
Pros are that we can execute our trust

239
00:11:20,220 --> 00:11:24,120
step in Parts only it also gives us

240
00:11:24,120 --> 00:11:26,459
coverage information regarding what

241
00:11:26,459 --> 00:11:29,820
parts of the code we actually executed

242
00:11:29,820 --> 00:11:32,220
and it is quite trivial to identify

243
00:11:32,220 --> 00:11:35,760
crashes in this setup since if our

244
00:11:35,760 --> 00:11:38,339
trusted app does something naughty then

245
00:11:38,339 --> 00:11:40,560
the emulation Frameworks will simply

246
00:11:40,560 --> 00:11:43,320
throw us an exception

247
00:11:43,320 --> 00:11:45,079
of course there are downsides as well

248
00:11:45,079 --> 00:11:48,180
like we need to implement a bunch of

249
00:11:48,180 --> 00:11:51,540
system cores used by our application

250
00:11:51,540 --> 00:11:54,360
also there are the services I mentioned

251
00:11:54,360 --> 00:11:56,820
earlier that we use those need to be

252
00:11:56,820 --> 00:11:58,200
modded as well

253
00:11:58,200 --> 00:12:00,959
and some Library functions will require

254
00:12:00,959 --> 00:12:04,079
special attention as well

255
00:12:04,079 --> 00:12:06,920
so with system course we are quite lucky

256
00:12:06,920 --> 00:12:10,740
because in killing it is quite easy to

257
00:12:10,740 --> 00:12:13,380
hook them we just need to implement the

258
00:12:13,380 --> 00:12:15,240
desired functionality

259
00:12:15,240 --> 00:12:17,880
in a python function and by calling

260
00:12:17,880 --> 00:12:19,800
another function we can add a framework

261
00:12:19,800 --> 00:12:22,740
that when this system core happens I

262
00:12:22,740 --> 00:12:26,760
want you to execute this python function

263
00:12:26,760 --> 00:12:29,279
here you can see a list of the system

264
00:12:29,279 --> 00:12:32,880
calls we implemented so far fully or

265
00:12:32,880 --> 00:12:36,000
partially in functionality these variety

266
00:12:36,000 --> 00:12:38,820
from logging to session management up to

267
00:12:38,820 --> 00:12:40,680
Secure Storage management

268
00:12:40,680 --> 00:12:42,779
secular storage is by the way a

269
00:12:42,779 --> 00:12:46,920
mechanism provided by the T so the

270
00:12:46,920 --> 00:12:50,779
trusted apps can store data

271
00:12:50,779 --> 00:12:54,079
persistently in an Integrity protected

272
00:12:54,079 --> 00:12:57,660
encrypted and drawback protected way we

273
00:12:57,660 --> 00:12:59,760
use this to store reference issues by

274
00:12:59,760 --> 00:13:01,939
the way

275
00:13:02,940 --> 00:13:06,899
then I said we have Services used by our

276
00:13:06,899 --> 00:13:08,579
application

277
00:13:08,579 --> 00:13:11,760
well if we are not running the whole

278
00:13:11,760 --> 00:13:15,959
application but execute it in parts then

279
00:13:15,959 --> 00:13:19,200
we only need to implement two of the

280
00:13:19,200 --> 00:13:21,440
four services

281
00:13:21,440 --> 00:13:25,320
and calling these services are done by

282
00:13:25,320 --> 00:13:28,459
System codes as well

283
00:13:29,220 --> 00:13:32,760
so we had to implement four commands

284
00:13:32,760 --> 00:13:34,639
executed

285
00:13:34,639 --> 00:13:39,300
three of them are to produce hashes

286
00:13:39,300 --> 00:13:40,620
which

287
00:13:40,620 --> 00:13:42,660
didn't really require much attention

288
00:13:42,660 --> 00:13:46,260
because we need to patch these hashtags

289
00:13:46,260 --> 00:13:48,540
out of our application anyway

290
00:13:48,540 --> 00:13:50,700
I know I said earlier we don't want to

291
00:13:50,700 --> 00:13:53,220
modify our application but at this point

292
00:13:53,220 --> 00:13:55,980
we don't really have a chance if we want

293
00:13:55,980 --> 00:13:59,399
to reach code Beyond these checks

294
00:13:59,399 --> 00:14:03,660
and the fourth of these commands is to

295
00:14:03,660 --> 00:14:06,240
read physical memory the memory of the

296
00:14:06,240 --> 00:14:07,740
Linux kernel

297
00:14:07,740 --> 00:14:10,200
and a bit later I will tell you how we

298
00:14:10,200 --> 00:14:12,300
implemented this and why it was a bit

299
00:14:12,300 --> 00:14:14,519
tricky

300
00:14:14,519 --> 00:14:16,860
but first I've said there are some

301
00:14:16,860 --> 00:14:18,720
Library functions

302
00:14:18,720 --> 00:14:21,180
well luckily when trusted applications

303
00:14:21,180 --> 00:14:24,600
are compiled the functions we used in

304
00:14:24,600 --> 00:14:27,300
the codes are all compiled into the

305
00:14:27,300 --> 00:14:29,760
application so we don't need to mock any

306
00:14:29,760 --> 00:14:30,899
of them

307
00:14:30,899 --> 00:14:34,560
but some initialization needs to be done

308
00:14:34,560 --> 00:14:35,760
since

309
00:14:35,760 --> 00:14:39,120
optios is a lot different from

310
00:14:39,120 --> 00:14:41,880
other operating systems like Linux or

311
00:14:41,880 --> 00:14:42,779
Android

312
00:14:42,779 --> 00:14:45,720
the implementation of the Heap differs

313
00:14:45,720 --> 00:14:47,760
as well

314
00:14:47,760 --> 00:14:50,699
in this special case it's the Heap is

315
00:14:50,699 --> 00:14:51,899
actually

316
00:14:51,899 --> 00:14:54,959
placed into the BSS segment of our

317
00:14:54,959 --> 00:14:58,740
application which is used to store

318
00:14:58,740 --> 00:15:02,360
Global uninitialized variables

319
00:15:02,360 --> 00:15:07,920
so we so when we just simply call a

320
00:15:07,920 --> 00:15:10,860
molok for example from our application

321
00:15:10,860 --> 00:15:13,380
then it will return out of memory

322
00:15:13,380 --> 00:15:16,079
because as far as it knows there is no

323
00:15:16,079 --> 00:15:19,560
stack well no Heap so we need to test on

324
00:15:19,560 --> 00:15:21,779
how the application that yes there is a

325
00:15:21,779 --> 00:15:24,839
heap and it is there in the BSS segment

326
00:15:24,839 --> 00:15:27,920
and please use that

327
00:15:27,920 --> 00:15:31,560
we need to call this function

328
00:15:31,560 --> 00:15:35,459
to do so and here the emulation

329
00:15:35,459 --> 00:15:38,100
framework is useful again because it can

330
00:15:38,100 --> 00:15:39,720
create snapshots

331
00:15:39,720 --> 00:15:42,779
from the execution state of our

332
00:15:42,779 --> 00:15:45,420
application so we only need to perform

333
00:15:45,420 --> 00:15:48,000
this initialization once

334
00:15:48,000 --> 00:15:50,760
then we can execute our application with

335
00:15:50,760 --> 00:15:53,100
random input and then we can roll back

336
00:15:53,100 --> 00:15:55,740
to this snapshot and execute it with a

337
00:15:55,740 --> 00:15:57,839
different input so it makes our file

338
00:15:57,839 --> 00:16:00,740
sync a lot faster

339
00:16:02,279 --> 00:16:05,279
and finally how we implement it

340
00:16:05,279 --> 00:16:07,560
are faster

341
00:16:07,560 --> 00:16:10,219
so

342
00:16:11,880 --> 00:16:15,660
so fuzzers need valid example inputs to

343
00:16:15,660 --> 00:16:18,300
mutate like I showed you the files in

344
00:16:18,300 --> 00:16:19,380
the example

345
00:16:19,380 --> 00:16:23,220
like we can get a valid example inputs

346
00:16:23,220 --> 00:16:28,199
by dumping memory image from quemo but

347
00:16:28,199 --> 00:16:30,480
there are problems with it

348
00:16:30,480 --> 00:16:33,779
first of all it's too big

349
00:16:33,779 --> 00:16:35,940
fuzzers don't really like huge input

350
00:16:35,940 --> 00:16:40,920
files for example the manual of AFL the

351
00:16:40,920 --> 00:16:43,440
most well-known fuzzler states that

352
00:16:43,440 --> 00:16:45,600
please please try to keep your input

353
00:16:45,600 --> 00:16:48,120
file below one kilobyte

354
00:16:48,120 --> 00:16:50,639
well with a full memory image we can't

355
00:16:50,639 --> 00:16:52,820
do this

356
00:16:52,820 --> 00:16:57,779
and also our input file is quite sparse

357
00:16:57,779 --> 00:17:01,199
in the nature that we don't read the

358
00:17:01,199 --> 00:17:04,140
whole input file only parts of it

359
00:17:04,140 --> 00:17:08,040
and even from the parts we read we don't

360
00:17:08,040 --> 00:17:10,319
parse all of them

361
00:17:10,319 --> 00:17:13,439
so as you can see in this image if we

362
00:17:13,439 --> 00:17:16,859
for example mutate it here

363
00:17:16,859 --> 00:17:19,819
and we don't read that part of the file

364
00:17:19,819 --> 00:17:23,339
then it was useless it's like if we did

365
00:17:23,339 --> 00:17:24,419
nothing

366
00:17:24,419 --> 00:17:27,299
then again if we mutate in a part that

367
00:17:27,299 --> 00:17:30,600
we read but do not parse then again it

368
00:17:30,600 --> 00:17:33,059
was a useless mutation

369
00:17:33,059 --> 00:17:34,860
so we need to handle this problem

370
00:17:34,860 --> 00:17:40,159
somehow to avoid a lot of useless work

371
00:17:42,000 --> 00:17:45,539
so mutating the whole

372
00:17:45,539 --> 00:17:48,660
input file as one is ineffective

373
00:17:48,660 --> 00:17:51,960
so we came up with the solution to

374
00:17:51,960 --> 00:17:56,940
we take and we take a dump from cuermo

375
00:17:56,940 --> 00:17:59,100
and then we Implement our read memory

376
00:17:59,100 --> 00:18:01,860
function in a way that

377
00:18:01,860 --> 00:18:06,240
it will read the requested data from the

378
00:18:06,240 --> 00:18:09,120
unmodified input file

379
00:18:09,120 --> 00:18:13,740
and that will be mutated but first we

380
00:18:13,740 --> 00:18:17,820
apply a mask on it to guide the fuzzer

381
00:18:17,820 --> 00:18:22,100
to avoid useless mutations

382
00:18:23,039 --> 00:18:26,580
and this image is supposed to explain

383
00:18:26,580 --> 00:18:29,340
what I've just told we have our

384
00:18:29,340 --> 00:18:31,260
application

385
00:18:31,260 --> 00:18:34,020
it attempts to read this structure from

386
00:18:34,020 --> 00:18:36,120
the memory then the killing framework

387
00:18:36,120 --> 00:18:38,280
takes the execution

388
00:18:38,280 --> 00:18:41,240
reads the requested data from the dump

389
00:18:41,240 --> 00:18:43,620
then a mask

390
00:18:43,620 --> 00:18:45,419
is added to that

391
00:18:45,419 --> 00:18:48,299
and the masked data is given to the

392
00:18:48,299 --> 00:18:51,179
mutation engine which will only mutate

393
00:18:51,179 --> 00:18:54,240
those parts that are allowed to be

394
00:18:54,240 --> 00:18:58,200
mutated by our mask so this way we can

395
00:18:58,200 --> 00:19:02,240
avoid a lot of useless work

396
00:19:03,840 --> 00:19:07,860
and earlier I mentioned that

397
00:19:07,860 --> 00:19:10,380
The Killing framework can give us

398
00:19:10,380 --> 00:19:13,140
coverage information meaning that it can

399
00:19:13,140 --> 00:19:17,880
tell us which parts of our application

400
00:19:17,880 --> 00:19:20,400
were executed

401
00:19:20,400 --> 00:19:23,520
this is useful because this way we can

402
00:19:23,520 --> 00:19:26,640
Implement coverage guided fasting where

403
00:19:26,640 --> 00:19:29,760
the basic idea is that

404
00:19:29,760 --> 00:19:30,299
um

405
00:19:30,299 --> 00:19:33,900
those inputs that make more parts of the

406
00:19:33,900 --> 00:19:37,200
code executed are better because they

407
00:19:37,200 --> 00:19:40,740
have a bigger chance to

408
00:19:40,740 --> 00:19:44,059
through gear crashes

409
00:19:44,820 --> 00:19:48,059
and here you can see the basic algorithm

410
00:19:48,059 --> 00:19:51,780
to implement coverage guided fuzzing

411
00:19:51,780 --> 00:19:54,480
first we have a set

412
00:19:54,480 --> 00:19:57,360
of interesting inputs which initially

413
00:19:57,360 --> 00:20:01,679
only contains the test cases we added to

414
00:20:01,679 --> 00:20:05,120
the fuzzer we also have a set to store

415
00:20:05,120 --> 00:20:08,820
the already discovered code blocks

416
00:20:08,820 --> 00:20:13,500
and then in the loop we choose one from

417
00:20:13,500 --> 00:20:16,559
this set of interesting inputs we

418
00:20:16,559 --> 00:20:19,200
mutated somehow then execute our

419
00:20:19,200 --> 00:20:22,679
application with it and then we get

420
00:20:22,679 --> 00:20:24,600
coverage data

421
00:20:24,600 --> 00:20:27,780
and if we discover that these inputs

422
00:20:27,780 --> 00:20:29,820
could

423
00:20:29,820 --> 00:20:32,460
reach those parts of the code that we

424
00:20:32,460 --> 00:20:34,140
haven't discovered yet

425
00:20:34,140 --> 00:20:36,360
then we consider this to be an

426
00:20:36,360 --> 00:20:38,940
interesting input we add it back to the

427
00:20:38,940 --> 00:20:42,179
queue and updates the set of four

428
00:20:42,179 --> 00:20:45,120
editing code blocks

429
00:20:45,120 --> 00:20:48,480
most fathers by default know how to do

430
00:20:48,480 --> 00:20:52,260
this but due to our special needs at

431
00:20:52,260 --> 00:20:54,600
input generation we had to implement

432
00:20:54,600 --> 00:20:57,480
this for ourselves

433
00:20:57,480 --> 00:21:00,500
which we could do and which we did

434
00:21:00,500 --> 00:21:03,780
except for once more detail

435
00:21:03,780 --> 00:21:07,140
we still need to choose a strategy about

436
00:21:07,140 --> 00:21:10,799
how to choose an input from the queue of

437
00:21:10,799 --> 00:21:13,760
the interesting ones

438
00:21:15,480 --> 00:21:18,860
and finally

439
00:21:19,140 --> 00:21:22,260
I would like to summarize all this

440
00:21:22,260 --> 00:21:25,980
most importantly we didn't find any bugs

441
00:21:25,980 --> 00:21:27,600
yet

442
00:21:27,600 --> 00:21:30,360
hopefully we will

443
00:21:30,360 --> 00:21:33,419
the earlier mentioned

444
00:21:33,419 --> 00:21:35,640
five plus one sections of our

445
00:21:35,640 --> 00:21:37,860
applications are

446
00:21:37,860 --> 00:21:43,020
three of them are already implemented or

447
00:21:43,020 --> 00:21:46,860
three of them can already be executed in

448
00:21:46,860 --> 00:21:48,360
the emulator

449
00:21:48,360 --> 00:21:51,720
the other two and the init sections are

450
00:21:51,720 --> 00:21:54,419
still work in progress

451
00:21:54,419 --> 00:21:55,860
and

452
00:21:55,860 --> 00:21:59,460
we have we already have a lot of code to

453
00:21:59,460 --> 00:22:02,280
Implement some system codes and do some

454
00:22:02,280 --> 00:22:03,960
deep initialization

455
00:22:03,960 --> 00:22:07,620
when these will reach more major States

456
00:22:07,620 --> 00:22:10,679
we plan to open source this also others

457
00:22:10,679 --> 00:22:13,799
can fast their trusted applications as

458
00:22:13,799 --> 00:22:15,900
well

459
00:22:15,900 --> 00:22:19,159
as I said we almost completely

460
00:22:19,159 --> 00:22:22,500
implemented coverage guided passing

461
00:22:22,500 --> 00:22:25,260
and we found a solution to fuzz

462
00:22:25,260 --> 00:22:28,020
applications that take their inputs from

463
00:22:28,020 --> 00:22:30,960
memory even if this input is quite

464
00:22:30,960 --> 00:22:34,039
sparse in nature

465
00:22:34,500 --> 00:22:38,400
and finally I must thank to the setted

466
00:22:38,400 --> 00:22:42,059
projects which financed this work

467
00:22:42,059 --> 00:22:44,700
and that's all please feel free to ask

468
00:22:44,700 --> 00:22:47,000
questions

469
00:23:00,919 --> 00:23:04,340
thank you very much

470
00:23:05,080 --> 00:23:08,589
[Applause]

