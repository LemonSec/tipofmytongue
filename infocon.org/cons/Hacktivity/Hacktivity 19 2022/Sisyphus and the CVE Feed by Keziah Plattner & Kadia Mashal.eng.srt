1
00:00:02,340 --> 00:00:04,500
so ladies and gentlemen welcome back

2
00:00:04,500 --> 00:00:06,960
from the afternoon break uh we'll move

3
00:00:06,960 --> 00:00:07,980
on now

4
00:00:07,980 --> 00:00:11,219
with the next presentation uh we have

5
00:00:11,219 --> 00:00:15,240
Kezia platner and Katya Marshall

6
00:00:15,240 --> 00:00:18,080
these are yours

7
00:00:19,680 --> 00:00:21,060
um hello everyone

8
00:00:21,060 --> 00:00:23,538
um Welcome to our

9
00:00:25,140 --> 00:00:26,880
Church why you should be automating your

10
00:00:26,880 --> 00:00:29,039
vulnerability management work

11
00:00:29,039 --> 00:00:31,199
uh so quick legal disclaimer we are

12
00:00:31,199 --> 00:00:32,520
limited in what we're allowed to share

13
00:00:32,520 --> 00:00:34,260
whether or not

14
00:00:34,260 --> 00:00:35,700
um so feel free to definitely ask

15
00:00:35,700 --> 00:00:38,040
questions just a heads up we'll may have

16
00:00:38,040 --> 00:00:40,800
to limit but we'll try to answer as much

17
00:00:40,800 --> 00:00:43,079
as we can

18
00:00:43,079 --> 00:00:45,000
uh all right

19
00:00:45,000 --> 00:00:47,399
um introduction time uh so my name is

20
00:00:47,399 --> 00:00:49,140
kazia platner I'm a senior software

21
00:00:49,140 --> 00:00:51,000
engineer at Airbnb I've actually been

22
00:00:51,000 --> 00:00:53,460
there six years last month

23
00:00:53,460 --> 00:00:55,020
um worked on things from vulnerability

24
00:00:55,020 --> 00:00:57,660
management I am access management patch

25
00:00:57,660 --> 00:01:00,120
management uh I describe myself as more

26
00:01:00,120 --> 00:01:03,000
of a builder rather than a breaker so

27
00:01:03,000 --> 00:01:05,280
shout out there to all the hackers who

28
00:01:05,280 --> 00:01:08,659
keep my job very interesting

29
00:01:08,700 --> 00:01:11,159
um and then a fun fact about me is that

30
00:01:11,159 --> 00:01:12,840
several years ago I actually lived in

31
00:01:12,840 --> 00:01:15,180
Berlin for six months so it was very

32
00:01:15,180 --> 00:01:18,000
nostalgic to see Club mate

33
00:01:18,000 --> 00:01:20,939
okay and hi I'm Katya Marshall I'm an

34
00:01:20,939 --> 00:01:23,640
engineering manager at Airbnb I've been

35
00:01:23,640 --> 00:01:26,460
with Airbnb for over four years

36
00:01:26,460 --> 00:01:28,520
um actually born and raised in Austria

37
00:01:28,520 --> 00:01:32,280
and moved 10 years ago to San Francisco

38
00:01:32,280 --> 00:01:34,799
um yeah so I definitely used to come

39
00:01:34,799 --> 00:01:36,479
with my parents to Budapest quite often

40
00:01:36,479 --> 00:01:38,340
I definitely love the community and

41
00:01:38,340 --> 00:01:41,180
thanks for hosting us

42
00:01:41,939 --> 00:01:43,979
so full disclaimer if you're here to

43
00:01:43,979 --> 00:01:46,140
learn about Greek mythology you will be

44
00:01:46,140 --> 00:01:49,439
disappointed uh this is a fun title uh

45
00:01:49,439 --> 00:01:51,180
but if you're not familiar with the myth

46
00:01:51,180 --> 00:01:52,560
of Sisyphus

47
00:01:52,560 --> 00:01:55,259
um it's from Greek mythology a Sisyphus

48
00:01:55,259 --> 00:01:57,899
is Immortal who angered the gods by his

49
00:01:57,899 --> 00:02:00,540
constant trickery and cheating death So

50
00:02:00,540 --> 00:02:02,759
eventually they do manage to punish him

51
00:02:02,759 --> 00:02:04,920
and what they do is they force him to

52
00:02:04,920 --> 00:02:07,920
roll a boulder up a hill for eternity

53
00:02:07,920 --> 00:02:09,479
um but the moment the boulder reaches

54
00:02:09,479 --> 00:02:11,280
the top of the hill it falls right right

55
00:02:11,280 --> 00:02:13,739
back down uh he has to go back down to

56
00:02:13,739 --> 00:02:16,560
the bottom and push it back up again

57
00:02:16,560 --> 00:02:18,239
um essentially just a futile Endeavor

58
00:02:18,239 --> 00:02:21,000
that will never be completed if you're

59
00:02:21,000 --> 00:02:24,000
in the infosec industry this this might

60
00:02:24,000 --> 00:02:27,120
resonate to you a little bit uh we may

61
00:02:27,120 --> 00:02:29,160
not be in Hell pushing large rocks up

62
00:02:29,160 --> 00:02:31,080
hills but it can feel like we're

63
00:02:31,080 --> 00:02:32,520
fighting a losing battle against

64
00:02:32,520 --> 00:02:36,180
never-ending streams of cves

65
00:02:36,180 --> 00:02:39,060
so before we talk about the Automation

66
00:02:39,060 --> 00:02:41,040
and how we are dealing with the

67
00:02:41,040 --> 00:02:42,959
vulnerability life cycle

68
00:02:42,959 --> 00:02:44,220
um let's talk a little bit about the

69
00:02:44,220 --> 00:02:46,620
fundamentals of a vulnerability life

70
00:02:46,620 --> 00:02:48,060
cycle

71
00:02:48,060 --> 00:02:49,379
so

72
00:02:49,379 --> 00:02:51,720
um also quickly here we all know there

73
00:02:51,720 --> 00:02:54,900
is no such thing as secure code I mean

74
00:02:54,900 --> 00:02:56,700
of course if you delete your entire code

75
00:02:56,700 --> 00:02:59,099
base that would be a win but we

76
00:02:59,099 --> 00:03:01,739
obviously want job security we want to

77
00:03:01,739 --> 00:03:04,379
implement a process where you can design

78
00:03:04,379 --> 00:03:06,540
and Implement

79
00:03:06,540 --> 00:03:08,340
um appropriate appropriate vulnerability

80
00:03:08,340 --> 00:03:11,760
life cycle in your environment so let's

81
00:03:11,760 --> 00:03:14,580
talk a little bit how this looks like so

82
00:03:14,580 --> 00:03:17,819
all the hackers here you break all the

83
00:03:17,819 --> 00:03:20,340
things and we have to detect them and

84
00:03:20,340 --> 00:03:21,659
that's usually the first step of the

85
00:03:21,659 --> 00:03:24,840
vulnerability life cycle so you detect a

86
00:03:24,840 --> 00:03:26,220
vulnerability this can happen through

87
00:03:26,220 --> 00:03:28,980
various of sources for instance scanners

88
00:03:28,980 --> 00:03:32,519
but Bunty pentas you name it and then

89
00:03:32,519 --> 00:03:34,920
you assess the vulnerability is it

90
00:03:34,920 --> 00:03:37,620
applicable for your environment does it

91
00:03:37,620 --> 00:03:40,379
actually is it as critical as we think

92
00:03:40,379 --> 00:03:43,200
it is and then the third step in the

93
00:03:43,200 --> 00:03:44,819
vulnerability life cycle which is the

94
00:03:44,819 --> 00:03:46,799
more common one in vulnerability

95
00:03:46,799 --> 00:03:49,379
management is like metrics

96
00:03:49,379 --> 00:03:51,720
um where you attack where you showcase

97
00:03:51,720 --> 00:03:54,900
known attack surface and um and just

98
00:03:54,900 --> 00:03:56,519
share the metrics with the affected

99
00:03:56,519 --> 00:03:58,080
remediation owners

100
00:03:58,080 --> 00:04:00,780
and the last I mean one of the steps the

101
00:04:00,780 --> 00:04:02,760
four steps the most important step in

102
00:04:02,760 --> 00:04:05,340
our opinion is the remediation step

103
00:04:05,340 --> 00:04:06,959
um killing the vulnerability and making

104
00:04:06,959 --> 00:04:09,360
sure that you also uh prevent it from

105
00:04:09,360 --> 00:04:11,459
really being reintroduced again

106
00:04:11,459 --> 00:04:13,379
so this is the common vulnerability life

107
00:04:13,379 --> 00:04:14,400
cycle

108
00:04:14,400 --> 00:04:17,699
so what is our objective with this talk

109
00:04:17,699 --> 00:04:21,600
um so again we are we work for Airbnb we

110
00:04:21,600 --> 00:04:24,060
are a cloud-based company uh which means

111
00:04:24,060 --> 00:04:27,660
we have to build a system that supports

112
00:04:27,660 --> 00:04:30,600
um growing environments like any any

113
00:04:30,600 --> 00:04:32,639
time you expand your environment it

114
00:04:32,639 --> 00:04:35,699
means more assets more vulnerabilities

115
00:04:35,699 --> 00:04:38,040
um so for instance we wanted to make

116
00:04:38,040 --> 00:04:40,320
sure that we can adjust and adapt to the

117
00:04:40,320 --> 00:04:42,419
large stream of vulnerabilities that we

118
00:04:42,419 --> 00:04:44,460
constantly have to deal with

119
00:04:44,460 --> 00:04:46,560
um another objective of ours was let's

120
00:04:46,560 --> 00:04:48,660
make sure we don't just find the

121
00:04:48,660 --> 00:04:50,639
vulnerability but we also make sure that

122
00:04:50,639 --> 00:04:52,740
we are mediated and address it in a

123
00:04:52,740 --> 00:04:54,360
timely manner

124
00:04:54,360 --> 00:04:56,880
um and also prioritization all of you

125
00:04:56,880 --> 00:04:58,800
find this amazing vulnerabilities but

126
00:04:58,800 --> 00:05:01,680
where do we start what priority should

127
00:05:01,680 --> 00:05:03,780
we give each vulnerability especially we

128
00:05:03,780 --> 00:05:06,840
all know cve details I mean cves are not

129
00:05:06,840 --> 00:05:09,180
oh default scoring of CVS are not always

130
00:05:09,180 --> 00:05:12,660
applicable another objective of ours was

131
00:05:12,660 --> 00:05:16,020
it's prior um sorry the root cause so

132
00:05:16,020 --> 00:05:17,699
understanding what introduced the

133
00:05:17,699 --> 00:05:19,440
vulnerability in the first place it's

134
00:05:19,440 --> 00:05:21,780
more important than just patching it at

135
00:05:21,780 --> 00:05:23,280
the moment

136
00:05:23,280 --> 00:05:26,100
um and also we wanted to be vendor

137
00:05:26,100 --> 00:05:28,199
agnostic we wanted to build a system it

138
00:05:28,199 --> 00:05:29,880
doesn't matter which scanner you use

139
00:05:29,880 --> 00:05:32,580
which company you work with we wanted to

140
00:05:32,580 --> 00:05:34,320
build a pipeline you constantly can

141
00:05:34,320 --> 00:05:36,660
expand on regardless of the vendor

142
00:05:36,660 --> 00:05:38,220
limitations

143
00:05:38,220 --> 00:05:40,919
so this awesome slide you can tell I was

144
00:05:40,919 --> 00:05:43,320
not hired as a designer for Airbnb but I

145
00:05:43,320 --> 00:05:46,320
was trying to show a case here what

146
00:05:46,320 --> 00:05:48,840
constant traditional vulnerability

147
00:05:48,840 --> 00:05:50,940
management looks like so usually you

148
00:05:50,940 --> 00:05:53,479
have vulnerability scanners back Bounty

149
00:05:53,479 --> 00:05:56,460
subreddits all of this mess that is

150
00:05:56,460 --> 00:05:59,100
constantly dropping on your plate and

151
00:05:59,100 --> 00:06:01,259
most of the time you have one bottleneck

152
00:06:01,259 --> 00:06:05,880
security engineering team or maybe a TPM

153
00:06:05,880 --> 00:06:08,220
technical program manager who constantly

154
00:06:08,220 --> 00:06:10,380
just triages vulnerabilities and

155
00:06:10,380 --> 00:06:13,199
assesses the risk and then shares this

156
00:06:13,199 --> 00:06:15,000
with the remediation owner

157
00:06:15,000 --> 00:06:17,460
as you all can see it's usually a

158
00:06:17,460 --> 00:06:20,340
bottleneck so you are eventually either

159
00:06:20,340 --> 00:06:22,979
you are not you don't have time to um

160
00:06:22,979 --> 00:06:25,080
reassess all of the vulnerabilities or

161
00:06:25,080 --> 00:06:27,240
you're just going to be a bottleneck and

162
00:06:27,240 --> 00:06:31,639
take away from critical remediation time

163
00:06:33,780 --> 00:06:36,060
so what are the challenges as you all

164
00:06:36,060 --> 00:06:38,940
know cves drop on them I think probably

165
00:06:38,940 --> 00:06:41,460
TV is dropping right now

166
00:06:41,460 --> 00:06:44,100
um so we all who here has looked at

167
00:06:44,100 --> 00:06:46,259
scanning reports before vulnerabilities

168
00:06:46,259 --> 00:06:47,759
can reports

169
00:06:47,759 --> 00:06:52,080
okay I'm sorry but yeah so definitely we

170
00:06:52,080 --> 00:06:53,819
all know it can be very challenging to

171
00:06:53,819 --> 00:06:55,500
go through this mess

172
00:06:55,500 --> 00:06:59,660
so it can be very noisy

173
00:06:59,699 --> 00:07:02,280
so the first challenge that we faced

174
00:07:02,280 --> 00:07:03,720
when we built

175
00:07:03,720 --> 00:07:06,720
um our system our platform is risk

176
00:07:06,720 --> 00:07:07,979
assessment

177
00:07:07,979 --> 00:07:11,639
um who here is familiar with cve CBS at

178
00:07:11,639 --> 00:07:14,580
scoring security vulnerability scoring

179
00:07:14,580 --> 00:07:17,880
okay great that's the majority so for

180
00:07:17,880 --> 00:07:19,500
the folks who are not familiar with it

181
00:07:19,500 --> 00:07:22,500
each vulnerability that gets disclosed

182
00:07:22,500 --> 00:07:26,580
um gets an ID a CV ID and usually most

183
00:07:26,580 --> 00:07:28,620
of the time it also has a serious s-core

184
00:07:28,620 --> 00:07:30,720
that gives you a little bit more

185
00:07:30,720 --> 00:07:33,360
information or scoring about the attack

186
00:07:33,360 --> 00:07:35,639
type and the impact of the vulnerability

187
00:07:35,639 --> 00:07:38,280
so most of the times these are default

188
00:07:38,280 --> 00:07:39,960
scores that are not necessarily

189
00:07:39,960 --> 00:07:42,840
contextualized to your environment

190
00:07:42,840 --> 00:07:44,639
um yeah

191
00:07:44,639 --> 00:07:46,380
um yeah a quick metaphor on how to think

192
00:07:46,380 --> 00:07:48,300
about what it's like dealing with having

193
00:07:48,300 --> 00:07:50,160
a scanner scream at you the critical

194
00:07:50,160 --> 00:07:52,139
vulnerability has dropped

195
00:07:52,139 --> 00:07:54,300
so this is the Winchester Mystery House

196
00:07:54,300 --> 00:07:56,880
in San Jose California it's famous for

197
00:07:56,880 --> 00:07:58,800
having built but it's having been built

198
00:07:58,800 --> 00:08:00,599
by an eccentric woman who put a lot of

199
00:08:00,599 --> 00:08:02,340
weird features in the house

200
00:08:02,340 --> 00:08:03,660
like

201
00:08:03,660 --> 00:08:05,880
this door on the second floor that leads

202
00:08:05,880 --> 00:08:07,259
to nowhere

203
00:08:07,259 --> 00:08:09,900
uh so here we're at work

204
00:08:09,900 --> 00:08:11,520
um and we get pinged about a critical

205
00:08:11,520 --> 00:08:13,560
like look at this open door it's wide

206
00:08:13,560 --> 00:08:15,539
open to the world like go fix it right

207
00:08:15,539 --> 00:08:17,280
now

208
00:08:17,280 --> 00:08:18,660
um but then we actually go look at the

209
00:08:18,660 --> 00:08:20,639
context of our infrastructure okay yes

210
00:08:20,639 --> 00:08:22,319
it is an Open Door

211
00:08:22,319 --> 00:08:24,479
um but it's on the second floor

212
00:08:24,479 --> 00:08:25,919
um someone would have to bring a ladder

213
00:08:25,919 --> 00:08:28,139
in in order to make it in uh and we have

214
00:08:28,139 --> 00:08:29,580
different mitigations that would

215
00:08:29,580 --> 00:08:31,560
probably let us know that someone is a

216
00:08:31,560 --> 00:08:33,719
dragging a ladder into our property

217
00:08:33,719 --> 00:08:36,299
before they even make it close to there

218
00:08:36,299 --> 00:08:38,580
so this critical vulnerability when

219
00:08:38,580 --> 00:08:40,620
looked at in more detail is probably

220
00:08:40,620 --> 00:08:43,080
more like medium severity

221
00:08:43,080 --> 00:08:45,060
um but that doesn't mean it's not a

222
00:08:45,060 --> 00:08:46,620
critical for another company if that

223
00:08:46,620 --> 00:08:48,360
door is on the first floor then that is

224
00:08:48,360 --> 00:08:51,180
something you should be fixing right way

225
00:08:51,180 --> 00:08:53,220
um so imagine this constantly happening

226
00:08:53,220 --> 00:08:55,560
with never-ending cve feeds constantly

227
00:08:55,560 --> 00:08:57,779
getting pinged for criticals that are

228
00:08:57,779 --> 00:09:00,000
open doors on the second floor that you

229
00:09:00,000 --> 00:09:02,399
really can't get to

230
00:09:02,399 --> 00:09:04,320
exactly so

231
00:09:04,320 --> 00:09:05,760
um it was definitely the challenge going

232
00:09:05,760 --> 00:09:07,500
with this default scoring that weren't

233
00:09:07,500 --> 00:09:10,320
applicable for our environment another

234
00:09:10,320 --> 00:09:12,839
thing that we also dealt with a

235
00:09:12,839 --> 00:09:15,300
challenge is inflexible vendor features

236
00:09:15,300 --> 00:09:16,560
so

237
00:09:16,560 --> 00:09:18,959
we appreciate vendors of course the

238
00:09:18,959 --> 00:09:21,420
great tools out there but it's always

239
00:09:21,420 --> 00:09:23,700
such a it's always so challenging to ask

240
00:09:23,700 --> 00:09:27,839
for features and or integrate within our

241
00:09:27,839 --> 00:09:29,640
environment because again we have a

242
00:09:29,640 --> 00:09:31,320
unique environment that Airbnb so

243
00:09:31,320 --> 00:09:33,480
plugging in a new tool requires a lot of

244
00:09:33,480 --> 00:09:36,480
adjustments also most of the vendors

245
00:09:36,480 --> 00:09:39,779
like or the default ratings have scores

246
00:09:39,779 --> 00:09:41,339
that are not necessarily applicable to

247
00:09:41,339 --> 00:09:43,140
us and when you ask them whether we can

248
00:09:43,140 --> 00:09:44,940
adjust the risk scoring most of the time

249
00:09:44,940 --> 00:09:46,920
the answer says yeah open a ticket and

250
00:09:46,920 --> 00:09:48,839
we'll work on the feature but it's

251
00:09:48,839 --> 00:09:50,100
obviously a little bit of a challenge

252
00:09:50,100 --> 00:09:52,800
because it's creates operational work

253
00:09:52,800 --> 00:09:55,800
also we want to make sure that when a

254
00:09:55,800 --> 00:09:57,360
vulnerability gets dropped that it gets

255
00:09:57,360 --> 00:09:58,980
reported immediately so most of the

256
00:09:58,980 --> 00:10:00,420
vendors had limitations with their

257
00:10:00,420 --> 00:10:03,000
reporting integration as well and if you

258
00:10:03,000 --> 00:10:05,220
remember this slide earlier with all of

259
00:10:05,220 --> 00:10:07,380
the security noise think about it this

260
00:10:07,380 --> 00:10:09,300
way every time you plug in a new

261
00:10:09,300 --> 00:10:12,000
security tool or a new tool it leads to

262
00:10:12,000 --> 00:10:14,519
operational work you usually have a

263
00:10:14,519 --> 00:10:16,980
person or a team that needs to do the

264
00:10:16,980 --> 00:10:19,980
manual triage operational work was

265
00:10:19,980 --> 00:10:21,779
definitely a challenge for us

266
00:10:21,779 --> 00:10:23,880
and also

267
00:10:23,880 --> 00:10:25,860
um the last step that we had the

268
00:10:25,860 --> 00:10:28,140
challenge with was accountability how do

269
00:10:28,140 --> 00:10:30,240
you make sure that people actually fix

270
00:10:30,240 --> 00:10:32,220
the vulnerability and how do you make

271
00:10:32,220 --> 00:10:33,660
sure that they're responsible and

272
00:10:33,660 --> 00:10:35,820
engaged

273
00:10:35,820 --> 00:10:38,339
all right so with that in mind our team

274
00:10:38,339 --> 00:10:40,500
tries to stick to General guidelines we

275
00:10:40,500 --> 00:10:42,000
prioritize while approaching this

276
00:10:42,000 --> 00:10:44,399
problem uh these aren't Sandstone

277
00:10:44,399 --> 00:10:46,019
they're always exceptions and we

278
00:10:46,019 --> 00:10:47,459
definitely do not accomplish them right

279
00:10:47,459 --> 00:10:48,240
away

280
00:10:48,240 --> 00:10:49,800
um but it's kind of a North star we try

281
00:10:49,800 --> 00:10:52,279
to head in

282
00:10:52,620 --> 00:10:55,800
um so as we said earlier without context

283
00:10:55,800 --> 00:10:57,720
default severity scores can be

284
00:10:57,720 --> 00:10:59,940
inaccurate creating what I'll call here

285
00:10:59,940 --> 00:11:02,459
a false positive to be clear I'm not

286
00:11:02,459 --> 00:11:04,620
saying it's not a vulnerability but it

287
00:11:04,620 --> 00:11:06,420
might be a false positive in our context

288
00:11:06,420 --> 00:11:08,339
if it's difficult to exploit or doesn't

289
00:11:08,339 --> 00:11:09,660
apply to us

290
00:11:09,660 --> 00:11:12,300
so um just relying on something like a

291
00:11:12,300 --> 00:11:14,760
CVSs score is not sufficient to actually

292
00:11:14,760 --> 00:11:16,680
automate the risk you still need human

293
00:11:16,680 --> 00:11:19,860
intervention to figure out um the actual

294
00:11:19,860 --> 00:11:22,079
true risk in your environment

295
00:11:22,079 --> 00:11:23,940
now it can be really tempting to want to

296
00:11:23,940 --> 00:11:26,040
catch every potential vulnerability by

297
00:11:26,040 --> 00:11:27,540
just looking at every single result

298
00:11:27,540 --> 00:11:30,480
given to you marked as a high critical

299
00:11:30,480 --> 00:11:33,300
I'll call this the maximizing true

300
00:11:33,300 --> 00:11:35,880
positive solution the intention is good

301
00:11:35,880 --> 00:11:38,160
it's better safe than sorry

302
00:11:38,160 --> 00:11:41,160
um but this is a misconception humans

303
00:11:41,160 --> 00:11:43,440
manually evaluating things aren't going

304
00:11:43,440 --> 00:11:45,800
to catch 100 of true positives either

305
00:11:45,800 --> 00:11:49,019
there's alert fatigue people can easily

306
00:11:49,019 --> 00:11:51,120
misread and understand misunderstand

307
00:11:51,120 --> 00:11:53,700
things uh we're all insecurity we all

308
00:11:53,700 --> 00:11:55,980
know humans are the weak Link in a

309
00:11:55,980 --> 00:11:59,160
system and a gap that you may not even

310
00:11:59,160 --> 00:12:01,019
be thinking about is that undisclosed

311
00:12:01,019 --> 00:12:03,600
vulnerabilities exist relying on

312
00:12:03,600 --> 00:12:05,459
detection as a way to catch every true

313
00:12:05,459 --> 00:12:07,500
positive is just never going to work as

314
00:12:07,500 --> 00:12:11,100
a sole vulnerability management strategy

315
00:12:11,100 --> 00:12:13,260
um and of course not to mention half the

316
00:12:13,260 --> 00:12:15,060
time the most severe vulnerabilities are

317
00:12:15,060 --> 00:12:17,339
dropped on Twitter um with someone with

318
00:12:17,339 --> 00:12:19,560
an anime profile picture

319
00:12:19,560 --> 00:12:22,200
uh so our biggest goal here is we want

320
00:12:22,200 --> 00:12:24,120
to create a system that does not rely on

321
00:12:24,120 --> 00:12:26,880
human intervention to triage risk we

322
00:12:26,880 --> 00:12:28,560
want to focus on cutting out the human

323
00:12:28,560 --> 00:12:31,140
human element as much as possible by

324
00:12:31,140 --> 00:12:32,940
automating the risk assessment process

325
00:12:32,940 --> 00:12:35,519
with our goal to ruthlessly minimize

326
00:12:35,519 --> 00:12:38,279
false positives rather than maximize

327
00:12:38,279 --> 00:12:39,899
true positives

328
00:12:39,899 --> 00:12:42,720
this can make people feel nervous what

329
00:12:42,720 --> 00:12:44,339
if something slips through the cracks

330
00:12:44,339 --> 00:12:46,380
like is it it better to you know err on

331
00:12:46,380 --> 00:12:48,180
the side of caution

332
00:12:48,180 --> 00:12:50,880
um but as we said earlier there is no

333
00:12:50,880 --> 00:12:52,980
human or automated process that would

334
00:12:52,980 --> 00:12:56,279
ever catch 100 of vulnerabilities you

335
00:12:56,279 --> 00:12:58,260
need to accept that the futility of this

336
00:12:58,260 --> 00:13:00,600
endeavor the boulder is never going to

337
00:13:00,600 --> 00:13:02,639
stay on top of the hill

338
00:13:02,639 --> 00:13:05,339
um and since 100 accuracy isn't possible

339
00:13:05,339 --> 00:13:07,440
it's better to design a process that

340
00:13:07,440 --> 00:13:10,200
prioritizes remediation speed

341
00:13:10,200 --> 00:13:12,300
um by focusing on Automation in a low

342
00:13:12,300 --> 00:13:14,040
false positive rate even if something

343
00:13:14,040 --> 00:13:16,260
could slip through the cracks

344
00:13:16,260 --> 00:13:18,720
um like a quick exception like we do

345
00:13:18,720 --> 00:13:21,120
tend to manually triage criticals it can

346
00:13:21,120 --> 00:13:22,620
be very difficult to actually tell the

347
00:13:22,620 --> 00:13:24,600
like difference between a true critical

348
00:13:24,600 --> 00:13:27,420
and a high but the overhead for manually

349
00:13:27,420 --> 00:13:30,000
trigger uh triaging criticals is nowhere

350
00:13:30,000 --> 00:13:31,920
close to the overhead of having to

351
00:13:31,920 --> 00:13:33,839
triage everything

352
00:13:33,839 --> 00:13:36,540
so this gives brings us to our next

353
00:13:36,540 --> 00:13:38,880
Point accepting this principle means

354
00:13:38,880 --> 00:13:40,320
that you're accepting an imperfect

355
00:13:40,320 --> 00:13:42,779
detection strategy so if we're focusing

356
00:13:42,779 --> 00:13:45,000
on minimizing false positives that means

357
00:13:45,000 --> 00:13:46,800
we're going to be missing things what do

358
00:13:46,800 --> 00:13:49,639
we do about that

359
00:13:50,160 --> 00:13:52,079
definitely as kazuya mentioned it is

360
00:13:52,079 --> 00:13:54,240
impossible to address 100 of all of the

361
00:13:54,240 --> 00:13:56,040
winnabilities we all know not every

362
00:13:56,040 --> 00:13:58,500
vulnerability has has cves there are

363
00:13:58,500 --> 00:14:00,480
plenty of zero days out there that we do

364
00:14:00,480 --> 00:14:02,339
not know about so it's definitely

365
00:14:02,339 --> 00:14:05,519
important to have something in place

366
00:14:05,519 --> 00:14:07,200
that pairs towards your detection to

367
00:14:07,200 --> 00:14:09,180
balance the risk so what we call it is

368
00:14:09,180 --> 00:14:10,440
paired detection is preventative

369
00:14:10,440 --> 00:14:12,540
measures for instance

370
00:14:12,540 --> 00:14:15,200
um so what happens with potential misses

371
00:14:15,200 --> 00:14:18,660
what we try to do is don't rely on

372
00:14:18,660 --> 00:14:20,579
vulnerability reports so especially for

373
00:14:20,579 --> 00:14:22,680
the folks who here have seen or raise

374
00:14:22,680 --> 00:14:24,480
their hands and said yes we have seen

375
00:14:24,480 --> 00:14:26,120
scan reports before

376
00:14:26,120 --> 00:14:29,820
most of the time you should not need

377
00:14:29,820 --> 00:14:33,019
them to take action so you should always

378
00:14:33,019 --> 00:14:35,639
pretend or you should always pretend

379
00:14:35,639 --> 00:14:37,740
that you're at your environment is

380
00:14:37,740 --> 00:14:40,380
vulnerable so preventative measures can

381
00:14:40,380 --> 00:14:42,839
be for instance introducing a regular

382
00:14:42,839 --> 00:14:45,060
patch Cadence we I think that's a common

383
00:14:45,060 --> 00:14:49,199
strategy Patch Tuesday very known but we

384
00:14:49,199 --> 00:14:50,639
think it's even more important important

385
00:14:50,639 --> 00:14:53,699
to have frequent image deploys Harden

386
00:14:53,699 --> 00:14:55,680
the image and deploy regardless of the

387
00:14:55,680 --> 00:14:58,440
vulnerability report just make it harder

388
00:14:58,440 --> 00:15:00,959
to introduce known vulnerabilities over

389
00:15:00,959 --> 00:15:03,120
and over again build this system

390
00:15:03,120 --> 00:15:05,279
especially for the devs here make a

391
00:15:05,279 --> 00:15:07,620
system that makes the easy road to

392
00:15:07,620 --> 00:15:10,279
secure Road

393
00:15:16,860 --> 00:15:19,139
for example you do have to balance

394
00:15:19,139 --> 00:15:20,959
security with developer productivity

395
00:15:20,959 --> 00:15:23,339
trade-offs are important we don't want

396
00:15:23,339 --> 00:15:25,380
to be sacrificing the effectiveness of

397
00:15:25,380 --> 00:15:27,360
our engineering teams for low priority

398
00:15:27,360 --> 00:15:29,940
security requests

399
00:15:29,940 --> 00:15:31,920
um of course that's within reason I'm

400
00:15:31,920 --> 00:15:33,959
not saying that we are should compromise

401
00:15:33,959 --> 00:15:35,399
security

402
00:15:35,399 --> 00:15:36,600
um but I'm saying that we should pick

403
00:15:36,600 --> 00:15:38,040
our battles and think of Creative

404
00:15:38,040 --> 00:15:40,500
Solutions that work for everyone

405
00:15:40,500 --> 00:15:42,300
um and it can help build Relationships

406
00:15:42,300 --> 00:15:44,160
by trying to work to pair Security

407
00:15:44,160 --> 00:15:47,040
benefits with other engineering goals uh

408
00:15:47,040 --> 00:15:48,660
for example you may have a team that has

409
00:15:48,660 --> 00:15:50,519
an internal tool and they're tired of

410
00:15:50,519 --> 00:15:53,040
maintaining old versions of it

411
00:15:53,040 --> 00:15:54,300
um if you work with them to get a

412
00:15:54,300 --> 00:15:55,980
patching Cadence to make sure everyone

413
00:15:55,980 --> 00:15:57,839
is using up-to-date versions of that

414
00:15:57,839 --> 00:16:00,180
tool it's great for us because they're

415
00:16:00,180 --> 00:16:01,620
not using software full of

416
00:16:01,620 --> 00:16:03,060
vulnerabilities and it's great for them

417
00:16:03,060 --> 00:16:04,320
because they have less things they have

418
00:16:04,320 --> 00:16:07,440
to maintain at the same time uh so we

419
00:16:07,440 --> 00:16:10,139
made a mistake of being too top down

420
00:16:10,139 --> 00:16:11,820
um but that strategy has never been as

421
00:16:11,820 --> 00:16:13,560
effective was as when you treat other

422
00:16:13,560 --> 00:16:16,079
engineering teams as partners seek their

423
00:16:16,079 --> 00:16:17,699
input and try to make it a mutually

424
00:16:17,699 --> 00:16:20,839
beneficial process

425
00:16:21,540 --> 00:16:23,639
um before we go we will we will talk

426
00:16:23,639 --> 00:16:25,260
about implementation details in a second

427
00:16:25,260 --> 00:16:27,000
but just quickly I want to also

428
00:16:27,000 --> 00:16:28,860
highlight accountability

429
00:16:28,860 --> 00:16:32,940
um so again make sure that you have slas

430
00:16:32,940 --> 00:16:34,560
in your environment where you set

431
00:16:34,560 --> 00:16:36,600
expectations on when someone should

432
00:16:36,600 --> 00:16:38,459
remediate a vulnerability don't expect

433
00:16:38,459 --> 00:16:40,920
them to fix everything within a minute

434
00:16:40,920 --> 00:16:42,360
because that obviously doesn't make

435
00:16:42,360 --> 00:16:44,519
sense set expectations based on the risk

436
00:16:44,519 --> 00:16:45,959
if a security vulnerability is a

437
00:16:45,959 --> 00:16:47,100
critical they should be able to

438
00:16:47,100 --> 00:16:49,740
prioritize this over a low finding also

439
00:16:49,740 --> 00:16:51,360
make sure that you are flexible with

440
00:16:51,360 --> 00:16:52,980
your s Service level agreement as well

441
00:16:52,980 --> 00:16:54,959
for instance if there is a vulnerability

442
00:16:54,959 --> 00:16:58,139
like the example that kazia mentioned

443
00:16:58,139 --> 00:16:59,820
earlier if you have mitigations in place

444
00:16:59,820 --> 00:17:01,139
you should have a system that

445
00:17:01,139 --> 00:17:03,720
automatically done grades to severity of

446
00:17:03,720 --> 00:17:05,819
the vulnerability because again that

447
00:17:05,819 --> 00:17:09,059
will also help individuals maybe take

448
00:17:09,059 --> 00:17:10,799
time take more time for the SLA

449
00:17:10,799 --> 00:17:12,720
resolving the SLA

450
00:17:12,720 --> 00:17:13,980
um also another step that you should

451
00:17:13,980 --> 00:17:16,859
focus on is auto notifications so I

452
00:17:16,859 --> 00:17:18,780
built a bot that just lets people know

453
00:17:18,780 --> 00:17:20,760
when they get a vulnerability

454
00:17:20,760 --> 00:17:21,720
um

455
00:17:21,720 --> 00:17:23,699
um assigned also making sure that it

456
00:17:23,699 --> 00:17:25,079
happens quickly because the worst thing

457
00:17:25,079 --> 00:17:26,459
that would happen is you sit on a

458
00:17:26,459 --> 00:17:27,900
vulnerability and the rest of the

459
00:17:27,900 --> 00:17:29,460
company does not know about it

460
00:17:29,460 --> 00:17:32,040
especially the remediation owners

461
00:17:32,040 --> 00:17:34,799
um the last step here is metrics again I

462
00:17:34,799 --> 00:17:36,840
metrics is usually used to track

463
00:17:36,840 --> 00:17:38,520
vulnerabilities but also a lot of finger

464
00:17:38,520 --> 00:17:40,320
pointing letting people know that they

465
00:17:40,320 --> 00:17:42,179
are not performing well actually you can

466
00:17:42,179 --> 00:17:44,160
sell it better by letting them know hey

467
00:17:44,160 --> 00:17:45,900
these metrics are showing that your team

468
00:17:45,900 --> 00:17:47,820
is behind was fixing the wounds maybe

469
00:17:47,820 --> 00:17:50,520
you have resource constraints how can I

470
00:17:50,520 --> 00:17:51,840
help you how can the security team

471
00:17:51,840 --> 00:17:53,760
showcase that you actually need more

472
00:17:53,760 --> 00:17:57,120
devs or more remediation owners

473
00:17:57,120 --> 00:17:58,980
um and another sort of understated part

474
00:17:58,980 --> 00:18:01,020
of accountability is like finding the

475
00:18:01,020 --> 00:18:03,179
right owner to remediate uh it's not

476
00:18:03,179 --> 00:18:05,520
always as simple as just a single asset

477
00:18:05,520 --> 00:18:07,080
to an owner

478
00:18:07,080 --> 00:18:09,419
um for example in the case of containers

479
00:18:09,419 --> 00:18:11,039
and base images

480
00:18:11,039 --> 00:18:13,080
um it's not really helpful to tell

481
00:18:13,080 --> 00:18:14,400
someone you have a vulnerability in

482
00:18:14,400 --> 00:18:16,260
their image if it's actually from an

483
00:18:16,260 --> 00:18:18,120
inherited base image owned by someone

484
00:18:18,120 --> 00:18:20,400
else so you do want to be thoughtful

485
00:18:20,400 --> 00:18:22,440
about how you're finding remediation or

486
00:18:22,440 --> 00:18:24,140
owners and you want to give

487
00:18:24,140 --> 00:18:26,580
vulnerability reports to the person most

488
00:18:26,580 --> 00:18:29,720
empowered to fix it

489
00:18:30,059 --> 00:18:32,640
so with that all in mind

490
00:18:32,640 --> 00:18:34,860
um let's go into how we built a process

491
00:18:34,860 --> 00:18:38,700
to manage our vulnerabilities

492
00:18:38,700 --> 00:18:40,919
so first step Aggregate and process

493
00:18:40,919 --> 00:18:42,500
vulnerabilities

494
00:18:42,500 --> 00:18:44,940
depending on your setup you may have any

495
00:18:44,940 --> 00:18:46,740
number of scanners set up they probably

496
00:18:46,740 --> 00:18:48,179
have different formats or different

497
00:18:48,179 --> 00:18:51,179
levels of information provided

498
00:18:51,179 --> 00:18:53,460
um as mentioned earlier some scanners do

499
00:18:53,460 --> 00:18:55,020
have like

500
00:18:55,020 --> 00:18:57,059
um automation features like Auto

501
00:18:57,059 --> 00:18:59,160
reporting to jira

502
00:18:59,160 --> 00:19:01,200
um but they usually are inflexible

503
00:19:01,200 --> 00:19:03,720
enough or inflexible they don't let us

504
00:19:03,720 --> 00:19:06,900
adjust things and um and in addition if

505
00:19:06,900 --> 00:19:09,120
you have multiple scanners even if they

506
00:19:09,120 --> 00:19:11,160
have their own automation they don't

507
00:19:11,160 --> 00:19:12,539
know about each other

508
00:19:12,539 --> 00:19:15,120
uh so instead of just using a scanner

509
00:19:15,120 --> 00:19:17,039
out of the box with its default features

510
00:19:17,039 --> 00:19:19,140
what we do is we import it we

511
00:19:19,140 --> 00:19:20,940
standardize all the data and we track

512
00:19:20,940 --> 00:19:23,820
every unique vulnerability with a uuid

513
00:19:23,820 --> 00:19:26,220
that's a key part of how we're tracking

514
00:19:26,220 --> 00:19:27,860
a vulnerability through the life cycle

515
00:19:27,860 --> 00:19:31,020
uh our general thought is that a uuid

516
00:19:31,020 --> 00:19:33,059
should represent an asset and a

517
00:19:33,059 --> 00:19:34,140
vulnerability

518
00:19:34,140 --> 00:19:36,419
and this can be simplified for example

519
00:19:36,419 --> 00:19:38,280
it may not instead of just tracking

520
00:19:38,280 --> 00:19:41,220
every single CBE in an asset it can be

521
00:19:41,220 --> 00:19:43,260
useful to track the asset and the

522
00:19:43,260 --> 00:19:45,120
packaged version because the package

523
00:19:45,120 --> 00:19:47,640
version has as many it has multiple cves

524
00:19:47,640 --> 00:19:50,220
and just fixing that fixes all

525
00:19:50,220 --> 00:19:52,620
Associated cpes so there's no need to

526
00:19:52,620 --> 00:19:55,260
have to manage so many of them and then

527
00:19:55,260 --> 00:19:57,360
the uuid helps us even beyond the first

528
00:19:57,360 --> 00:20:00,240
fix it helps those metrics it can also

529
00:20:00,240 --> 00:20:02,760
help identify repeated violations or

530
00:20:02,760 --> 00:20:06,360
major gaps in our infrastructure

531
00:20:06,360 --> 00:20:08,460
so as I mentioned earlier risk

532
00:20:08,460 --> 00:20:09,900
assessment was a challenge for us

533
00:20:09,900 --> 00:20:12,840
because all of this default CV SS scores

534
00:20:12,840 --> 00:20:14,760
just didn't weren't necessarily

535
00:20:14,760 --> 00:20:16,080
applicable to us

536
00:20:16,080 --> 00:20:18,120
um so how did we solve it so we do have

537
00:20:18,120 --> 00:20:20,700
an internal Risk Service where we try to

538
00:20:20,700 --> 00:20:22,380
collect metadata about our environment

539
00:20:22,380 --> 00:20:24,840
as much as possible so for instance the

540
00:20:24,840 --> 00:20:26,460
data that you can collect about an asset

541
00:20:26,460 --> 00:20:28,980
to have a better risk signal is for

542
00:20:28,980 --> 00:20:30,900
instance where does the acid live is it

543
00:20:30,900 --> 00:20:33,179
Eternal facing or is it externally

544
00:20:33,179 --> 00:20:34,260
facing

545
00:20:34,260 --> 00:20:37,440
um also what are the IEM roles for

546
00:20:37,440 --> 00:20:39,059
instance what type of access controls

547
00:20:39,059 --> 00:20:41,039
does this resource have so if it gets

548
00:20:41,039 --> 00:20:44,160
exploited how far can the attacker go so

549
00:20:44,160 --> 00:20:45,840
we collect this data when we assign a

550
00:20:45,840 --> 00:20:47,880
vulnerability to have a better risk

551
00:20:47,880 --> 00:20:49,980
assessment about the vulnerability

552
00:20:49,980 --> 00:20:54,360
itself also we collect data that that

553
00:20:54,360 --> 00:20:56,640
the asset or the services handling for

554
00:20:56,640 --> 00:20:58,200
instance is it a service that is

555
00:20:58,200 --> 00:21:01,320
handling pii then should we have to

556
00:21:01,320 --> 00:21:04,320
obviously prioritize that and make sure

557
00:21:04,320 --> 00:21:07,080
that it gets prioritized and our system

558
00:21:07,080 --> 00:21:10,200
also we collect within our environment

559
00:21:10,200 --> 00:21:11,400
information about the application

560
00:21:11,400 --> 00:21:13,559
vulnerabilities for instance does the

561
00:21:13,559 --> 00:21:14,760
service have several open

562
00:21:14,760 --> 00:21:16,620
vulnerabilities that could be exploited

563
00:21:16,620 --> 00:21:18,780
as part of the attack and also

564
00:21:18,780 --> 00:21:20,700
infrastructure vulnerabilities for

565
00:21:20,700 --> 00:21:23,340
instance is it in a well or well

566
00:21:23,340 --> 00:21:25,679
protected AWS account or is this

567
00:21:25,679 --> 00:21:26,940
something that we consider a Sandbox

568
00:21:26,940 --> 00:21:29,460
account etc etc so there are a bunch of

569
00:21:29,460 --> 00:21:31,020
metadata that all of you should be

570
00:21:31,020 --> 00:21:32,460
collecting in order to have a better

571
00:21:32,460 --> 00:21:35,120
risk assessment

572
00:21:35,940 --> 00:21:38,760
so um quickly here this is how we

573
00:21:38,760 --> 00:21:41,520
implemented it so again we collect in

574
00:21:41,520 --> 00:21:43,440
our platform that we build we collect

575
00:21:43,440 --> 00:21:46,080
asset information again is it externally

576
00:21:46,080 --> 00:21:50,100
facing locally only we also collect

577
00:21:50,100 --> 00:21:52,380
um data about the attack type so we

578
00:21:52,380 --> 00:21:55,200
break down the serious s core most of

579
00:21:55,200 --> 00:21:57,600
the CVSs scores tell you whether it

580
00:21:57,600 --> 00:22:00,120
requires user interaction whether the

581
00:22:00,120 --> 00:22:02,640
vulnerability or the exploit can be

582
00:22:02,640 --> 00:22:04,860
happen through over the network do you

583
00:22:04,860 --> 00:22:07,320
need local access so so again we break

584
00:22:07,320 --> 00:22:09,299
down all of these attack types to have a

585
00:22:09,299 --> 00:22:10,080
better understanding of the

586
00:22:10,080 --> 00:22:12,900
vulnerability and then we also leverage

587
00:22:12,900 --> 00:22:15,840
external scoring systems so who here is

588
00:22:15,840 --> 00:22:18,600
familiar with nvd National vulnerability

589
00:22:18,600 --> 00:22:19,799
database

590
00:22:19,799 --> 00:22:22,860
okay sweet so for once we're not

591
00:22:22,860 --> 00:22:24,600
familiar with it it's basically a

592
00:22:24,600 --> 00:22:26,520
database centralized database with a

593
00:22:26,520 --> 00:22:28,559
bunch of vulnerability information and

594
00:22:28,559 --> 00:22:30,120
most of the time it's a good source to

595
00:22:30,120 --> 00:22:31,860
understand how bad the vulnerability

596
00:22:31,860 --> 00:22:34,320
really is and how it was exploited it

597
00:22:34,320 --> 00:22:36,360
has a default rating as well but most of

598
00:22:36,360 --> 00:22:38,700
the time again it lacks internal context

599
00:22:38,700 --> 00:22:41,059
so we try to pull more vulnerability

600
00:22:41,059 --> 00:22:44,580
data so we pull data from Red Hat we

601
00:22:44,580 --> 00:22:47,460
pulled data from nvd any type any open

602
00:22:47,460 --> 00:22:49,799
source solution or vendor open source

603
00:22:49,799 --> 00:22:52,320
solution that is out there that provides

604
00:22:52,320 --> 00:22:54,780
information about the cve we collect and

605
00:22:54,780 --> 00:22:57,539
centralize in our risk framework all of

606
00:22:57,539 --> 00:22:59,580
this data collection just makes us

607
00:22:59,580 --> 00:23:01,200
understand the vulnerability better

608
00:23:01,200 --> 00:23:03,000
instead of relying on the defaults

609
00:23:03,000 --> 00:23:06,320
course that the scanners give us

610
00:23:06,780 --> 00:23:10,679
uh third step reporting and Remediation

611
00:23:10,679 --> 00:23:12,659
um so now that all all that information

612
00:23:12,659 --> 00:23:15,360
is passed to our reporting service the

613
00:23:15,360 --> 00:23:16,919
reporting service doesn't have to care

614
00:23:16,919 --> 00:23:18,539
about the scanner Source the

615
00:23:18,539 --> 00:23:20,280
vulnerability type

616
00:23:20,280 --> 00:23:22,500
um all it needs is the uuid to create

617
00:23:22,500 --> 00:23:25,799
tickets track metrics track asset owners

618
00:23:25,799 --> 00:23:26,820
Etc

619
00:23:26,820 --> 00:23:28,799
um and in the next section I'll go into

620
00:23:28,799 --> 00:23:30,059
a lot more detail about the

621
00:23:30,059 --> 00:23:32,100
implementation details of our reporting

622
00:23:32,100 --> 00:23:33,780
service

623
00:23:33,780 --> 00:23:36,720
and then lastly verification our motto

624
00:23:36,720 --> 00:23:39,240
is trust but verify people can try to

625
00:23:39,240 --> 00:23:41,100
fix something but then make a mistake we

626
00:23:41,100 --> 00:23:42,480
want to rely on programmatic

627
00:23:42,480 --> 00:23:44,940
verification to feel really confident

628
00:23:44,940 --> 00:23:46,860
that it's actually no longer present in

629
00:23:46,860 --> 00:23:49,020
our infrastructure and here this is

630
00:23:49,020 --> 00:23:51,179
where we use the uuid again if our

631
00:23:51,179 --> 00:23:53,159
scanners aren't outputting it we can

632
00:23:53,159 --> 00:23:55,140
conclude that it's no longer present and

633
00:23:55,140 --> 00:23:58,320
we can verify it as fixed or we can use

634
00:23:58,320 --> 00:24:00,480
internal infrastructure metadata to

635
00:24:00,480 --> 00:24:02,400
write our own code determining if

636
00:24:02,400 --> 00:24:05,600
something is fixed or not

637
00:24:06,179 --> 00:24:08,940
so that's the general process

638
00:24:08,940 --> 00:24:11,700
scale to more integrate easily integrate

639
00:24:11,700 --> 00:24:14,100
even like many vulnerability sources

640
00:24:14,100 --> 00:24:15,659
into our process

641
00:24:15,659 --> 00:24:18,179
as mentioned earlier what ties this

642
00:24:18,179 --> 00:24:20,039
together is the reporting service we

643
00:24:20,039 --> 00:24:21,900
built

644
00:24:21,900 --> 00:24:25,520
so quick basic architecture for context

645
00:24:25,520 --> 00:24:28,919
we are an AWS Cloud company and we

646
00:24:28,919 --> 00:24:31,559
primarily operate on service oriented

647
00:24:31,559 --> 00:24:33,900
architecture so a big asset use case for

648
00:24:33,900 --> 00:24:36,600
us or managing microservices if you're

649
00:24:36,600 --> 00:24:37,980
interested there's a lot of different

650
00:24:37,980 --> 00:24:40,860
blog posts on our Tech blog posts

651
00:24:40,860 --> 00:24:42,960
discussing our infrastructure if you're

652
00:24:42,960 --> 00:24:44,760
curious

653
00:24:44,760 --> 00:24:46,919
a little bit also about the tax tag so

654
00:24:46,919 --> 00:24:49,020
as we told you we automated this entire

655
00:24:49,020 --> 00:24:51,240
process using the following so we

656
00:24:51,240 --> 00:24:53,940
leverage vendor apis we try to stay away

657
00:24:53,940 --> 00:24:57,480
from dashboards etc etc pulling the API

658
00:24:57,480 --> 00:24:59,039
using the data that we are most

659
00:24:59,039 --> 00:25:01,260
interested in and feeding that into our

660
00:25:01,260 --> 00:25:03,240
platform as part of our metadata

661
00:25:03,240 --> 00:25:06,059
collection uh also Apache airflow anyone

662
00:25:06,059 --> 00:25:07,620
here familiar with Apache airflow out of

663
00:25:07,620 --> 00:25:09,780
curiosity

664
00:25:09,780 --> 00:25:13,200
cool yay one person so um so actually

665
00:25:13,200 --> 00:25:15,120
Apache airflow is open source you should

666
00:25:15,120 --> 00:25:17,400
all look into it if you're interested if

667
00:25:17,400 --> 00:25:18,360
you're not familiar with it it's

668
00:25:18,360 --> 00:25:19,919
basically a data management platform

669
00:25:19,919 --> 00:25:22,159
that lets you handle large data sets of

670
00:25:22,159 --> 00:25:25,260
large data sets so especially as you

671
00:25:25,260 --> 00:25:27,360
deal with large vulnerability streams

672
00:25:27,360 --> 00:25:28,799
you need something robots that

673
00:25:28,799 --> 00:25:31,200
constantly allows you to to handle and

674
00:25:31,200 --> 00:25:33,779
manage this data and we have open

675
00:25:33,779 --> 00:25:35,340
sourced it and you should definitely

676
00:25:35,340 --> 00:25:37,620
look into it and we have also a blog

677
00:25:37,620 --> 00:25:40,260
post about it another thing that we also

678
00:25:40,260 --> 00:25:42,960
use is hype and Presto because as I said

679
00:25:42,960 --> 00:25:44,460
it's important for you to centralize

680
00:25:44,460 --> 00:25:45,840
this metadata and build your own

681
00:25:45,840 --> 00:25:48,179
vulnerability database so we use hyphen

682
00:25:48,179 --> 00:25:51,299
press to do to store our data and for

683
00:25:51,299 --> 00:25:54,179
reporting we use jira but again

684
00:25:54,179 --> 00:25:55,980
everything that you see here we really

685
00:25:55,980 --> 00:25:57,659
try to build a system that is vendor

686
00:25:57,659 --> 00:25:59,520
agnostic so you can actually build

687
00:25:59,520 --> 00:26:00,900
something that works for your

688
00:26:00,900 --> 00:26:02,880
environment with other open source

689
00:26:02,880 --> 00:26:04,260
solutions that we'll talk about in a

690
00:26:04,260 --> 00:26:05,580
little bit

691
00:26:05,580 --> 00:26:06,900
um yeah the implementation we're talking

692
00:26:06,900 --> 00:26:07,860
about

693
00:26:07,860 --> 00:26:09,720
um is not meant that this has to be at

694
00:26:09,720 --> 00:26:11,640
this Tech stock there's multiple ways to

695
00:26:11,640 --> 00:26:13,620
solve this problem

696
00:26:13,620 --> 00:26:16,740
all right so how it works um so we have

697
00:26:16,740 --> 00:26:18,960
a client um and they write code to

698
00:26:18,960 --> 00:26:20,700
standardize the vulnerabilities found

699
00:26:20,700 --> 00:26:23,460
from a scanner or otherwise and then

700
00:26:23,460 --> 00:26:26,159
calculate the adjusted risk

701
00:26:26,159 --> 00:26:28,140
um then all the client has to do is

702
00:26:28,140 --> 00:26:30,539
provide it to the reporting service in

703
00:26:30,539 --> 00:26:33,179
the expected format and after that the

704
00:26:33,179 --> 00:26:36,000
service handles all the heavy lifting so

705
00:26:36,000 --> 00:26:38,820
it unifies us it unifies shared logic

706
00:26:38,820 --> 00:26:41,100
like ticket creation finding the asset

707
00:26:41,100 --> 00:26:44,340
owner tracking metrics it can handle

708
00:26:44,340 --> 00:26:46,799
things like deduplication

709
00:26:46,799 --> 00:26:49,559
um uh asset or the vulnerability owner

710
00:26:49,559 --> 00:26:51,000
doesn't have to worry about accidentally

711
00:26:51,000 --> 00:26:53,340
reporting something twice because the

712
00:26:53,340 --> 00:26:54,779
service tracks if something has been

713
00:26:54,779 --> 00:26:56,940
reported or not and then so it's item

714
00:26:56,940 --> 00:26:58,200
potent you don't have to worry about

715
00:26:58,200 --> 00:27:01,020
duplicating tickets

716
00:27:01,020 --> 00:27:02,820
and then this makes it really easy to

717
00:27:02,820 --> 00:27:04,740
scale with any type of vulnerability you

718
00:27:04,740 --> 00:27:06,900
want to start tracking the functionality

719
00:27:06,900 --> 00:27:09,320
is modular anyone can write code

720
00:27:09,320 --> 00:27:11,940
adjusting this vulnerability data and

721
00:27:11,940 --> 00:27:13,440
then integrate with our reporting

722
00:27:13,440 --> 00:27:15,240
service to handle the rest

723
00:27:15,240 --> 00:27:17,640
this has made our process significantly

724
00:27:17,640 --> 00:27:19,679
more efficient we're no longer the

725
00:27:19,679 --> 00:27:22,140
blockers for tracking vulnerabilities we

726
00:27:22,140 --> 00:27:23,880
don't have to be responsible for every

727
00:27:23,880 --> 00:27:26,220
single scanner in use we just have to

728
00:27:26,220 --> 00:27:28,200
provide support for the reporting

729
00:27:28,200 --> 00:27:28,980
service

730
00:27:28,980 --> 00:27:31,080
this means we also don't have to make a

731
00:27:31,080 --> 00:27:33,000
bespoke flow per scanner per

732
00:27:33,000 --> 00:27:35,039
vulnerability type we don't have a

733
00:27:35,039 --> 00:27:36,419
different reporting process for

734
00:27:36,419 --> 00:27:38,880
reporting insecure configurations versus

735
00:27:38,880 --> 00:27:40,200
cves

736
00:27:40,200 --> 00:27:42,600
and once we deploy this multiple teams

737
00:27:42,600 --> 00:27:44,100
are able to start using it immediately

738
00:27:44,100 --> 00:27:46,740
and if a new vulnerability drops we can

739
00:27:46,740 --> 00:27:49,380
start tracking it right away

740
00:27:49,380 --> 00:27:52,140
so we told you about this platform and

741
00:27:52,140 --> 00:27:53,220
and

742
00:27:53,220 --> 00:27:54,539
um we obviously didn't want to make

743
00:27:54,539 --> 00:27:57,360
something up that is not true so how

744
00:27:57,360 --> 00:28:00,000
let's talk about the results this is not

745
00:28:00,000 --> 00:28:02,880
a Bitcoin chart we're just not allowed

746
00:28:02,880 --> 00:28:06,059
to talk about we our legal team didn't

747
00:28:06,059 --> 00:28:07,860
allow us to actually add numbers to the

748
00:28:07,860 --> 00:28:09,120
Chart but

749
00:28:09,120 --> 00:28:11,460
um I promise you trust this random

750
00:28:11,460 --> 00:28:13,200
person on this stage

751
00:28:13,200 --> 00:28:16,799
um we we did drive down

752
00:28:16,799 --> 00:28:19,260
um the risk I mean not the risk but we

753
00:28:19,260 --> 00:28:21,360
drove down the false positives to the

754
00:28:21,360 --> 00:28:23,460
appropriate to represent the actual risk

755
00:28:23,460 --> 00:28:25,860
and again when you look at this chart I

756
00:28:25,860 --> 00:28:28,380
just want you to remember that by

757
00:28:28,380 --> 00:28:29,580
reducing or having a better

758
00:28:29,580 --> 00:28:31,620
understanding of your risk you can focus

759
00:28:31,620 --> 00:28:33,240
on the highest priority and most

760
00:28:33,240 --> 00:28:34,620
critical vulnerabilities in your

761
00:28:34,620 --> 00:28:36,679
environment instead of bombarding

762
00:28:36,679 --> 00:28:38,760
individuals with nonsense

763
00:28:38,760 --> 00:28:40,320
vulnerabilities or vulnerabilities are

764
00:28:40,320 --> 00:28:42,059
maybe not as critical in your

765
00:28:42,059 --> 00:28:43,440
environment and have them focus on

766
00:28:43,440 --> 00:28:46,340
what's actually important

767
00:28:46,740 --> 00:28:49,140
um and so a practical use case scenario

768
00:28:49,140 --> 00:28:53,600
how we use this to tackle log for

769
00:28:53,820 --> 00:28:56,880
sure so yeah log for Shell happened as

770
00:28:56,880 --> 00:28:59,840
is holiday tradition over the break

771
00:28:59,840 --> 00:29:03,960
uh so uh what did we do first step we

772
00:29:03,960 --> 00:29:07,740
wrote an interest dag oh a dag is part

773
00:29:07,740 --> 00:29:10,559
of the airflow architecture of a task

774
00:29:10,559 --> 00:29:14,279
you do for processing data so we quickly

775
00:29:14,279 --> 00:29:16,380
wrote code to track all our Java

776
00:29:16,380 --> 00:29:20,100
microservices that needed to be patched

777
00:29:20,100 --> 00:29:21,720
um then we plug that into the reporting

778
00:29:21,720 --> 00:29:24,360
pipeline which then pulled in that list

779
00:29:24,360 --> 00:29:26,880
created tickets for all service owners

780
00:29:26,880 --> 00:29:30,899
along with remediation action items

781
00:29:30,899 --> 00:29:32,520
um then the service owners got the

782
00:29:32,520 --> 00:29:34,679
ticket and they worked to deploy the

783
00:29:34,679 --> 00:29:37,200
patch and close it as fixed

784
00:29:37,200 --> 00:29:40,380
simultaneously on our end we use deploy

785
00:29:40,380 --> 00:29:42,779
data to actually look to see if the

786
00:29:42,779 --> 00:29:44,960
patch was correctly applied to a service

787
00:29:44,960 --> 00:29:47,640
so that meant that when someone closed a

788
00:29:47,640 --> 00:29:49,620
ticket of fixed if we detected that

789
00:29:49,620 --> 00:29:51,120
there was actually a mistake in what

790
00:29:51,120 --> 00:29:53,100
they did we were able to reopen it and

791
00:29:53,100 --> 00:29:56,159
let them know what was missing or like

792
00:29:56,159 --> 00:29:58,320
help give them help on actually doing it

793
00:29:58,320 --> 00:29:59,640
correctly

794
00:29:59,640 --> 00:30:01,919
so I wanted to provide this as an

795
00:30:01,919 --> 00:30:04,799
example of how building a scalable

796
00:30:04,799 --> 00:30:07,020
vulnerability management platform allows

797
00:30:07,020 --> 00:30:09,120
you to quickly respond to new types of

798
00:30:09,120 --> 00:30:11,279
vulnerabilities and think creatively in

799
00:30:11,279 --> 00:30:14,100
your Solutions if a vault is falling

800
00:30:14,100 --> 00:30:16,080
outside of your standards standard

801
00:30:16,080 --> 00:30:18,120
scanning flow you don't have to create a

802
00:30:18,120 --> 00:30:20,520
whole new system to track it you don't

803
00:30:20,520 --> 00:30:22,260
have to rely on the default data

804
00:30:22,260 --> 00:30:24,720
provided by whatever vendor you may be

805
00:30:24,720 --> 00:30:27,059
using to scan you can use many sources

806
00:30:27,059 --> 00:30:29,460
to help you in our case it was

807
00:30:29,460 --> 00:30:31,440
significantly faster to use our internal

808
00:30:31,440 --> 00:30:33,720
metadata to find all usages of the

809
00:30:33,720 --> 00:30:36,419
library and how to know if something was

810
00:30:36,419 --> 00:30:38,820
fixed programmatically and so if we had

811
00:30:38,820 --> 00:30:41,100
only relied on a default pipeline that

812
00:30:41,100 --> 00:30:42,899
wouldn't let you customize we would had

813
00:30:42,899 --> 00:30:45,720
to have done everything manually keeping

814
00:30:45,720 --> 00:30:48,720
the vulnerability active for longer and

815
00:30:48,720 --> 00:30:50,580
so this can help you think about what

816
00:30:50,580 --> 00:30:52,320
the metadata you store already and how

817
00:30:52,320 --> 00:30:54,720
you can leverage it building a vendor

818
00:30:54,720 --> 00:30:57,000
agnostic solution allows you to think

819
00:30:57,000 --> 00:30:59,220
creatively

820
00:30:59,220 --> 00:31:01,260
uh so we've been talking a lot about

821
00:31:01,260 --> 00:31:03,659
this vendor agnostic solution here to be

822
00:31:03,659 --> 00:31:05,039
clear we're not saying that vendor

823
00:31:05,039 --> 00:31:06,600
Solutions are bad or that you should

824
00:31:06,600 --> 00:31:08,700
drop your multi-year contract with one

825
00:31:08,700 --> 00:31:11,880
but rather rethink the way vendors are

826
00:31:11,880 --> 00:31:15,000
fitting into your ecosystem

827
00:31:15,000 --> 00:31:16,320
so

828
00:31:16,320 --> 00:31:18,000
um you should design for your

829
00:31:18,000 --> 00:31:20,940
infrastructure not for a vendor so don't

830
00:31:20,940 --> 00:31:23,220
rely too much on vendors build a

831
00:31:23,220 --> 00:31:25,440
pipeline where you can easily plug in a

832
00:31:25,440 --> 00:31:27,299
new tool and remove it if necessary

833
00:31:27,299 --> 00:31:29,220
Without Really affecting your security

834
00:31:29,220 --> 00:31:32,220
so

835
00:31:32,520 --> 00:31:34,679
um make sure that you also leverage apis

836
00:31:34,679 --> 00:31:36,240
instead of using out of the box

837
00:31:36,240 --> 00:31:38,159
deployments because the worst thing that

838
00:31:38,159 --> 00:31:40,140
would happen is that you give

839
00:31:40,140 --> 00:31:42,419
um thousands of Engineers access to a

840
00:31:42,419 --> 00:31:44,399
dashboard with your most sensitive data

841
00:31:44,399 --> 00:31:46,740
so you can really just massage the data

842
00:31:46,740 --> 00:31:48,600
based on the data that you collect from

843
00:31:48,600 --> 00:31:50,480
the vendor API

844
00:31:50,480 --> 00:31:55,020
also explore non-traditional security

845
00:31:55,020 --> 00:31:56,940
solo open source Solutions or Security

846
00:31:56,940 --> 00:31:59,539
Solutions for instance I mentioned air

847
00:31:59,539 --> 00:32:03,840
Apache airflow or we use OS query so

848
00:32:03,840 --> 00:32:06,120
instead of deploying more and more tools

849
00:32:06,120 --> 00:32:08,820
we're leveraging existing Asians that

850
00:32:08,820 --> 00:32:11,159
maybe other tools other teams are using

851
00:32:11,159 --> 00:32:13,799
for instance if you have an SRE team or

852
00:32:13,799 --> 00:32:17,340
a Dev devops team look um look at their

853
00:32:17,340 --> 00:32:19,140
Asians and tools that they're using and

854
00:32:19,140 --> 00:32:20,760
maybe you can collect metadata from

855
00:32:20,760 --> 00:32:23,580
there from them and think about it this

856
00:32:23,580 --> 00:32:26,220
way every time you implement a new tool

857
00:32:26,220 --> 00:32:28,080
in your environment you increase the

858
00:32:28,080 --> 00:32:30,659
attack surface we all learned a supply

859
00:32:30,659 --> 00:32:33,059
chain vulnerabilities so leveraging

860
00:32:33,059 --> 00:32:34,620
maybe something that is already in place

861
00:32:34,620 --> 00:32:36,419
will help you minimize the risk a little

862
00:32:36,419 --> 00:32:38,159
bit also

863
00:32:38,159 --> 00:32:40,200
um pull vulnerability scoring data from

864
00:32:40,200 --> 00:32:42,960
multiple sources don't just rely on what

865
00:32:42,960 --> 00:32:45,899
nvd is telling you or the default CVS

866
00:32:45,899 --> 00:32:48,480
scores make sure that you pull as much

867
00:32:48,480 --> 00:32:50,700
information as you can in your metadata

868
00:32:50,700 --> 00:32:52,320
collection and then you will get a

869
00:32:52,320 --> 00:32:55,679
better risk score or a better signal in

870
00:32:55,679 --> 00:32:58,740
the risk score as well so as I mentioned

871
00:32:58,740 --> 00:33:00,360
we have there are a couple of Open

872
00:33:00,360 --> 00:33:03,179
Source solutions that you can use

873
00:33:03,179 --> 00:33:05,340
um in in order to do you build your own

874
00:33:05,340 --> 00:33:07,559
platform

875
00:33:07,559 --> 00:33:09,899
so these are a bunch of Open Source

876
00:33:09,899 --> 00:33:13,260
solutions that you can look into that

877
00:33:13,260 --> 00:33:16,380
again do provide an API or at least can

878
00:33:16,380 --> 00:33:18,720
help you automate your your environment

879
00:33:18,720 --> 00:33:21,360
some of them were open source by Google

880
00:33:21,360 --> 00:33:23,460
trail of bits by Airbnb definitely

881
00:33:23,460 --> 00:33:27,200
encourage you all to look into it

882
00:33:27,659 --> 00:33:29,880
so takeaways what do we want you to take

883
00:33:29,880 --> 00:33:31,799
away from this talk

884
00:33:31,799 --> 00:33:33,960
so first of all

885
00:33:33,960 --> 00:33:36,120
collect metadata everything that you

886
00:33:36,120 --> 00:33:37,980
have in your environment just just take

887
00:33:37,980 --> 00:33:40,860
it just take it it will it you can do

888
00:33:40,860 --> 00:33:43,620
something with it so or for instance if

889
00:33:43,620 --> 00:33:45,620
you don't have a robust asset inventory

890
00:33:45,620 --> 00:33:48,600
maybe make sure that you can integrate a

891
00:33:48,600 --> 00:33:51,299
system where asset owners can fill in

892
00:33:51,299 --> 00:33:53,100
their own asset information for instance

893
00:33:53,100 --> 00:33:56,340
Which business units they belong to and

894
00:33:56,340 --> 00:33:58,740
um etc etc so make them make sure that

895
00:33:58,740 --> 00:34:00,419
you require asset owners to be a little

896
00:34:00,419 --> 00:34:03,659
bit more proactive also as I mentioned

897
00:34:03,659 --> 00:34:05,640
proactively collect vulnerability risk

898
00:34:05,640 --> 00:34:09,060
data and start tracking ownership for

899
00:34:09,060 --> 00:34:10,139
instance you can also use machine

900
00:34:10,139 --> 00:34:12,659
learning to predict who the owner of the

901
00:34:12,659 --> 00:34:15,659
vulnerability could potentially be

902
00:34:15,659 --> 00:34:17,040
um also centralize all of the

903
00:34:17,040 --> 00:34:18,659
vulnerabilities

904
00:34:18,659 --> 00:34:20,879
most of the times all of the companies

905
00:34:20,879 --> 00:34:23,040
tend to use multiple

906
00:34:23,040 --> 00:34:25,379
um Solutions Security Solutions and each

907
00:34:25,379 --> 00:34:27,119
of them tend to have their own report

908
00:34:27,119 --> 00:34:29,820
their own dashboard Etc but how do you

909
00:34:29,820 --> 00:34:31,500
actually centralize all of this data to

910
00:34:31,500 --> 00:34:32,760
understand the risk in your environment

911
00:34:32,760 --> 00:34:36,000
so again Leverage The apis and feed all

912
00:34:36,000 --> 00:34:37,679
of this data in a centralized internal

913
00:34:37,679 --> 00:34:39,780
database where you can be in charge of

914
00:34:39,780 --> 00:34:41,879
their own of the data and where you can

915
00:34:41,879 --> 00:34:44,040
also standardize the format a little bit

916
00:34:44,040 --> 00:34:46,619
and standardizing the format will also

917
00:34:46,619 --> 00:34:49,020
allow you to to build on top of it and

918
00:34:49,020 --> 00:34:50,580
expand regardless of the vendor

919
00:34:50,580 --> 00:34:52,859
limitations

920
00:34:52,859 --> 00:34:56,159
um and yeah and invest in automation so

921
00:34:56,159 --> 00:34:58,680
if you remember this awesome slide with

922
00:34:58,680 --> 00:35:00,540
all of the noise in the bottleneck on

923
00:35:00,540 --> 00:35:03,240
the bottom move away from that model

924
00:35:03,240 --> 00:35:05,599
um again invest in automation because

925
00:35:05,599 --> 00:35:08,040
you you don't want to take away from

926
00:35:08,040 --> 00:35:10,440
critical remediation time

927
00:35:10,440 --> 00:35:13,980
um and focus on root cause prevention so

928
00:35:13,980 --> 00:35:15,839
instead of just putting the Band-Aid on

929
00:35:15,839 --> 00:35:18,119
and Patch the vulnerability as it goes

930
00:35:18,119 --> 00:35:22,500
no try to fix or have a system that

931
00:35:22,500 --> 00:35:24,300
understands the root cause and you

932
00:35:24,300 --> 00:35:25,619
address actually the root cause of the

933
00:35:25,619 --> 00:35:27,420
vulnerability whether that's maybe a new

934
00:35:27,420 --> 00:35:29,040
design your architecture whatever it is

935
00:35:29,040 --> 00:35:30,960
you have to be aware of what you need to

936
00:35:30,960 --> 00:35:33,180
do on the root cause level

937
00:35:33,180 --> 00:35:36,119
um yeah and then yeah move away from the

938
00:35:36,119 --> 00:35:37,320
traditional vulnerability management

939
00:35:37,320 --> 00:35:41,099
approach it does not make sense to for

940
00:35:41,099 --> 00:35:43,440
especially for companies to just rely on

941
00:35:43,440 --> 00:35:46,740
one person to triage vulnerabilities and

942
00:35:46,740 --> 00:35:48,180
pass them to remediation owners

943
00:35:48,180 --> 00:35:50,160
especially because security needs

944
00:35:50,160 --> 00:35:52,020
friends and it doesn't make sense to

945
00:35:52,020 --> 00:35:55,440
constantly just share random big noisy

946
00:35:55,440 --> 00:35:57,359
vulnerability reports with others don't

947
00:35:57,359 --> 00:36:00,380
be a bottleneck

948
00:36:00,660 --> 00:36:03,060
so a couple of acknowledgments first of

949
00:36:03,060 --> 00:36:06,119
all I want to thank Kezia which I didn't

950
00:36:06,119 --> 00:36:07,800
mention her name when I started building

951
00:36:07,800 --> 00:36:12,180
this at Airbnb I was nowhere with my

952
00:36:12,180 --> 00:36:13,800
software engineering skills like as a

953
00:36:13,800 --> 00:36:15,839
year she took it to the next level so

954
00:36:15,839 --> 00:36:19,280
thank you kazia I also want to thank

955
00:36:19,280 --> 00:36:21,660
activity in the entire team here and

956
00:36:21,660 --> 00:36:23,460
everyone who's been dropping zero days

957
00:36:23,460 --> 00:36:25,859
here and all the hackers so thanks to

958
00:36:25,859 --> 00:36:27,540
the community for letting us speak and

959
00:36:27,540 --> 00:36:30,599
quickly Deanna Derek jahway Tina Chris

960
00:36:30,599 --> 00:36:33,300
and Mark were in San Francisco thank you

961
00:36:33,300 --> 00:36:34,980
for helping us with this talk

962
00:36:34,980 --> 00:36:37,200
yeah and I also wanted to counter

963
00:36:37,200 --> 00:36:39,540
counter shout out Katya

964
00:36:39,540 --> 00:36:41,400
um because I was traditionally trained

965
00:36:41,400 --> 00:36:43,260
as a software engineer and so I've just

966
00:36:43,260 --> 00:36:44,640
been able to learn so much about

967
00:36:44,640 --> 00:36:48,900
security from her well yeah hi so um

968
00:36:48,900 --> 00:36:50,940
questions and we have some contact

969
00:36:50,940 --> 00:36:52,500
information as well if you're ever

970
00:36:52,500 --> 00:36:56,060
interested in reaching out to us

971
00:36:56,280 --> 00:36:59,099
thank you both very much uh do we have

972
00:36:59,099 --> 00:37:00,119
any

973
00:37:00,119 --> 00:37:03,660
questions for Kezia or Katya at this

974
00:37:03,660 --> 00:37:05,839
time

975
00:37:09,300 --> 00:37:12,060
okay it appear not that That's Not

976
00:37:12,060 --> 00:37:14,880
Unusual don't uh no it's great don't be

977
00:37:14,880 --> 00:37:17,339
alarmed uh the the speakers will be

978
00:37:17,339 --> 00:37:19,800
around today and tomorrow yeah yeah

979
00:37:19,800 --> 00:37:21,540
we'll be here so so you can approach

980
00:37:21,540 --> 00:37:23,640
them with questions and we also have a

981
00:37:23,640 --> 00:37:25,440
blog post if you're interested and a

982
00:37:25,440 --> 00:37:27,300
bunch of tools that are open source so I

983
00:37:27,300 --> 00:37:29,280
definitely encourage you to look into it

984
00:37:29,280 --> 00:37:32,280
okay so again cashier thank you very

985
00:37:32,280 --> 00:37:35,300
much thank you

