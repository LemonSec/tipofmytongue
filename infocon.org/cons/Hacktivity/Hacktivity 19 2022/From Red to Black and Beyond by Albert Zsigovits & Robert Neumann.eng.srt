1
00:00:03,540 --> 00:00:06,319
anything

2
00:00:19,920 --> 00:00:22,080
okay welcome everyone

3
00:00:22,080 --> 00:00:24,119
my name is Robert Neumann I'm the head

4
00:00:24,119 --> 00:00:25,320
of the Cyber protection operations

5
00:00:25,320 --> 00:00:27,840
center at acronis

6
00:00:27,840 --> 00:00:31,019
hey guys welcome everyone and I'm Albert

7
00:00:31,019 --> 00:00:33,300
I'm a cyber security researcher from

8
00:00:33,300 --> 00:00:36,019
acronyms

9
00:00:36,600 --> 00:00:39,960
and today we would like to talk about a

10
00:00:39,960 --> 00:00:42,960
specific ransomware family or should I

11
00:00:42,960 --> 00:00:46,440
say trinity that's sort of a one

12
00:00:46,440 --> 00:00:49,820
ransomware family that evolved and

13
00:00:49,820 --> 00:00:52,020
developed over time and we would like to

14
00:00:52,020 --> 00:00:55,140
present some findings around that so in

15
00:00:55,140 --> 00:00:56,579
today's presentation we'd like to talk

16
00:00:56,579 --> 00:00:59,940
about how it was delivered

17
00:00:59,940 --> 00:01:01,980
of the challenges that we faced with

18
00:01:01,980 --> 00:01:04,199
golang golang as a programming language

19
00:01:04,199 --> 00:01:07,580
used in this specific ransomware family

20
00:01:07,580 --> 00:01:10,799
how we solve these challenges what sort

21
00:01:10,799 --> 00:01:13,439
of evolution steps the ransomware took

22
00:01:13,439 --> 00:01:15,360
over its time

23
00:01:15,360 --> 00:01:18,240
uh who were the victims and basically

24
00:01:18,240 --> 00:01:21,420
how to prevent such ransomware cases in

25
00:01:21,420 --> 00:01:23,220
this current presentation we will be not

26
00:01:23,220 --> 00:01:26,340
touching on file encryption and the

27
00:01:26,340 --> 00:01:29,240
initial compromise

28
00:01:31,799 --> 00:01:35,700
so if you're looking at the big

29
00:01:35,700 --> 00:01:38,460
ransomware picture and you go over to

30
00:01:38,460 --> 00:01:41,159
Redstone db.com and look at some of the

31
00:01:41,159 --> 00:01:45,060
statistics there it's clear that the

32
00:01:45,060 --> 00:01:47,100
incident count is still high it's not

33
00:01:47,100 --> 00:01:49,439
going down so ransomware is

34
00:01:49,439 --> 00:01:52,579
staying with us for a very long time

35
00:01:52,579 --> 00:01:55,320
but obviously a lot of more people want

36
00:01:55,320 --> 00:01:57,720
want a piece of the pie

37
00:01:57,720 --> 00:02:00,960
a lot more groups joining in or even all

38
00:02:00,960 --> 00:02:02,820
the existing groups just take a

39
00:02:02,820 --> 00:02:05,939
different branding different names and

40
00:02:05,939 --> 00:02:09,419
basically continue the operation in

41
00:02:09,419 --> 00:02:11,280
similar fashion

42
00:02:11,280 --> 00:02:13,739
we also see that victims still paid the

43
00:02:13,739 --> 00:02:16,379
ransomware fee which is obviously a

44
00:02:16,379 --> 00:02:19,560
catalyst to this whole whole ransomware

45
00:02:19,560 --> 00:02:20,760
scheme

46
00:02:20,760 --> 00:02:23,459
after the colonial pipeline incident

47
00:02:23,459 --> 00:02:27,000
that took place not so long ago

48
00:02:27,000 --> 00:02:30,060
we feel it was sort of a turning point

49
00:02:30,060 --> 00:02:32,959
uh in in ransomware investigations

50
00:02:32,959 --> 00:02:35,300
because after the critical

51
00:02:35,300 --> 00:02:38,580
infrastructure was attacked we saw some

52
00:02:38,580 --> 00:02:42,120
arrests in in Russia and uh

53
00:02:42,120 --> 00:02:44,400
the the US Government tried to go after

54
00:02:44,400 --> 00:02:47,580
the the for example the r evil

55
00:02:47,580 --> 00:02:50,040
rhinestone virgin family affiliates

56
00:02:50,040 --> 00:02:52,739
and it was a turning point for for a

57
00:02:52,739 --> 00:02:54,660
ransomware cases

58
00:02:54,660 --> 00:02:56,340
and that's where our investigation

59
00:02:56,340 --> 00:02:58,800
started almost like one and a half year

60
00:02:58,800 --> 00:02:59,580
ago

61
00:02:59,580 --> 00:03:01,140
with the specific friends on their

62
00:03:01,140 --> 00:03:03,840
family called Epsilon red and over the

63
00:03:03,840 --> 00:03:06,300
course of one and a half year we kept a

64
00:03:06,300 --> 00:03:08,519
close eye on it how it evolved

65
00:03:08,519 --> 00:03:10,680
initially it seemed that it was only a

66
00:03:10,680 --> 00:03:14,400
one-off campaign but the ransomware took

67
00:03:14,400 --> 00:03:17,819
a different branding different name and

68
00:03:17,819 --> 00:03:21,319
sort of evolved over time

69
00:03:22,319 --> 00:03:24,599
here I would just like to highlight some

70
00:03:24,599 --> 00:03:26,099
of the challenges that he faced with

71
00:03:26,099 --> 00:03:29,340
this family one of them obviously was a

72
00:03:29,340 --> 00:03:31,980
Powershell obfuscation the family was

73
00:03:31,980 --> 00:03:34,500
written in golang and we also saw some

74
00:03:34,500 --> 00:03:37,800
obfuscation attempts on the binary

75
00:03:37,800 --> 00:03:40,739
uh he even had some unpacked packing

76
00:03:40,739 --> 00:03:45,180
routines on it and uh one of the new

77
00:03:45,180 --> 00:03:47,519
things to this ransomware family was the

78
00:03:47,519 --> 00:03:49,980
use of the execution Keys which would

79
00:03:49,980 --> 00:03:52,860
obviously help if you would try to run

80
00:03:52,860 --> 00:03:56,959
this in automated sandboxes for example

81
00:03:58,520 --> 00:03:59,700
[Music]

82
00:03:59,700 --> 00:04:02,459
sock or serve people here maybe the

83
00:04:02,459 --> 00:04:03,720
first picture is

84
00:04:03,720 --> 00:04:06,180
familiar to you I'm sure you've seen a

85
00:04:06,180 --> 00:04:08,760
lot of these in Frontline investigations

86
00:04:08,760 --> 00:04:11,760
so initially the ransomware is delivered

87
00:04:11,760 --> 00:04:14,900
via a Powershell script that's

88
00:04:14,900 --> 00:04:18,298
obfuscated and as you can see it used

89
00:04:18,298 --> 00:04:21,899
some interesting casings that later the

90
00:04:21,899 --> 00:04:24,360
ransomware ransomware script would try

91
00:04:24,360 --> 00:04:28,620
to replace on the second screenshot and

92
00:04:28,620 --> 00:04:31,740
basically that's how the Powershell

93
00:04:31,740 --> 00:04:35,060
script builds up

94
00:04:36,660 --> 00:04:39,060
so what sort of features these spiral

95
00:04:39,060 --> 00:04:41,820
share script had obviously the casing

96
00:04:41,820 --> 00:04:44,460
and the obfuscations it also employs

97
00:04:44,460 --> 00:04:46,440
some interesting hidden Windows style

98
00:04:46,440 --> 00:04:49,440
which would obviously hide the window

99
00:04:49,440 --> 00:04:51,380
from the user

100
00:04:51,380 --> 00:04:54,240
also we've seen some exclusion of

101
00:04:54,240 --> 00:04:56,639
interesting folders like windows program

102
00:04:56,639 --> 00:04:58,860
files obviously we don't you don't want

103
00:04:58,860 --> 00:05:01,680
to encrypt those to preserve the systems

104
00:05:01,680 --> 00:05:04,440
Integrity but it would also stop

105
00:05:04,440 --> 00:05:07,320
processes and services related to AVS

106
00:05:07,320 --> 00:05:09,600
and SQL databases

107
00:05:09,600 --> 00:05:11,880
and other comments would just simply

108
00:05:11,880 --> 00:05:15,300
clean up event logs from Windows even

109
00:05:15,300 --> 00:05:18,020
change boot options delete Shadow copies

110
00:05:18,020 --> 00:05:21,360
or even turn off Windows Defender and

111
00:05:21,360 --> 00:05:23,940
change the execution policy in in

112
00:05:23,940 --> 00:05:26,660
Powershell settings

113
00:05:28,139 --> 00:05:30,600
let's talk about the payload so after

114
00:05:30,600 --> 00:05:32,580
the Powershell script

115
00:05:32,580 --> 00:05:34,680
it would

116
00:05:34,680 --> 00:05:37,020
in our first case the Powershell script

117
00:05:37,020 --> 00:05:39,900
would create two more power share

118
00:05:39,900 --> 00:05:41,940
scripts that would later create 10 more

119
00:05:41,940 --> 00:05:44,039
power share scripts so it's kind of

120
00:05:44,039 --> 00:05:46,919
interesting to see how they did that and

121
00:05:46,919 --> 00:05:50,220
after all these steps a payload or a

122
00:05:50,220 --> 00:05:54,000
binary would be sent to the system so

123
00:05:54,000 --> 00:05:56,220
this final payload is written in C and

124
00:05:56,220 --> 00:05:57,180
golang

125
00:05:57,180 --> 00:06:00,600
compiled using the mean GW tool we've

126
00:06:00,600 --> 00:06:02,759
seen and observed some AES and RC

127
00:06:02,759 --> 00:06:06,000
encryption methods in the binary and

128
00:06:06,000 --> 00:06:08,220
initially it only had a very low

129
00:06:08,220 --> 00:06:11,400
detection rate like 7 or even 10 to

130
00:06:11,400 --> 00:06:14,820
begin with and contrary to many reports

131
00:06:14,820 --> 00:06:18,259
I shouldn't say many a few reports

132
00:06:18,259 --> 00:06:21,180
we've seen that some Reports say that it

133
00:06:21,180 --> 00:06:24,300
had some anti-vm capabilities while

134
00:06:24,300 --> 00:06:27,000
actually it didn't have any of those it

135
00:06:27,000 --> 00:06:31,080
only employed the execution key to start

136
00:06:31,080 --> 00:06:33,539
the payload and there's one interesting

137
00:06:33,539 --> 00:06:36,720
instruction called cpuid in one of the

138
00:06:36,720 --> 00:06:40,319
go functions but it was not used for any

139
00:06:40,319 --> 00:06:43,639
sort of anti-vm features

140
00:06:45,240 --> 00:06:48,060
uh so the binary employed packing as

141
00:06:48,060 --> 00:06:51,419
well and it stripped infrastripped from

142
00:06:51,419 --> 00:06:54,419
any sort of key information the

143
00:06:54,419 --> 00:06:56,580
developers even go event ahead and

144
00:06:56,580 --> 00:06:59,520
removed the famous goal building

145
00:06:59,520 --> 00:07:03,419
formation the ID from the binary we've

146
00:07:03,419 --> 00:07:06,440
seen samples video PX and back to it

147
00:07:06,440 --> 00:07:09,300
later with time idea as well

148
00:07:09,300 --> 00:07:12,180
with upx we come across an interesting

149
00:07:12,180 --> 00:07:16,620
bug which is actually not

150
00:07:16,620 --> 00:07:20,780
not a very recent but when you unpack a

151
00:07:20,780 --> 00:07:22,919
sample which is

152
00:07:22,919 --> 00:07:25,979
packed with upx with the default minus D

153
00:07:25,979 --> 00:07:29,220
option the upx packer

154
00:07:29,220 --> 00:07:32,160
basically removes The Relic section from

155
00:07:32,160 --> 00:07:33,300
the payload

156
00:07:33,300 --> 00:07:35,400
and you won't be able to run it for

157
00:07:35,400 --> 00:07:38,220
example in a VM machine so that's why

158
00:07:38,220 --> 00:07:40,580
you need to use the dash-3 products

159
00:07:40,580 --> 00:07:42,960
command to preserve that that

160
00:07:42,960 --> 00:07:45,440
information

161
00:07:48,479 --> 00:07:50,639
more interesting things about this

162
00:07:50,639 --> 00:07:54,000
payload and I would like to just give

163
00:07:54,000 --> 00:07:56,160
you guys some one-on-one or 101

164
00:07:56,160 --> 00:07:58,440
information on golang

165
00:07:58,440 --> 00:08:00,599
so golang binaries are statically linked

166
00:08:00,599 --> 00:08:03,180
which means all the necessary libraries

167
00:08:03,180 --> 00:08:05,340
are inside the binary when it is

168
00:08:05,340 --> 00:08:08,400
compiled which means it will be huge in

169
00:08:08,400 --> 00:08:10,740
size like at least three megabytes some

170
00:08:10,740 --> 00:08:13,380
cases five ten megabytes of a malicious

171
00:08:13,380 --> 00:08:15,020
binary

172
00:08:15,020 --> 00:08:18,599
obviously in goaling you can compile

173
00:08:18,599 --> 00:08:21,780
binaries to many many platforms

174
00:08:21,780 --> 00:08:24,539
and you can also embed like C or even

175
00:08:24,539 --> 00:08:26,580
assembly inside of them

176
00:08:26,580 --> 00:08:28,440
and golang has a wide range of support

177
00:08:28,440 --> 00:08:31,199
for crypto and network libraries so

178
00:08:31,199 --> 00:08:34,020
that's why it's very popular between a

179
00:08:34,020 --> 00:08:36,899
developers malware developers let's see

180
00:08:36,899 --> 00:08:40,020
and all these things come to you one

181
00:08:40,020 --> 00:08:42,120
thing that it is difficulty reverse

182
00:08:42,120 --> 00:08:44,580
engineer pulling binaries but we have

183
00:08:44,580 --> 00:08:47,399
some nice tools now that are circulated

184
00:08:47,399 --> 00:08:50,040
in the community and that can definitely

185
00:08:50,040 --> 00:08:52,800
help you reverse goal and binaries

186
00:08:52,800 --> 00:08:55,320
so what are some of the challenges with

187
00:08:55,320 --> 00:08:58,320
golang binaries obviously Street

188
00:08:58,320 --> 00:09:00,540
stripped binaries they don't have

189
00:09:00,540 --> 00:09:01,700
sometimes

190
00:09:01,700 --> 00:09:04,620
any meaningful information like symbol

191
00:09:04,620 --> 00:09:07,260
names or even function names Global

192
00:09:07,260 --> 00:09:10,080
variable names such and such

193
00:09:10,080 --> 00:09:12,180
but there's one interesting section

194
00:09:12,180 --> 00:09:14,040
called the PCL and tab

195
00:09:14,040 --> 00:09:16,980
which holds plenty useful information

196
00:09:16,980 --> 00:09:20,279
about The Golden binary and this is not

197
00:09:20,279 --> 00:09:23,640
a section that you will find in in goal

198
00:09:23,640 --> 00:09:25,560
and binaries by default but you have to

199
00:09:25,560 --> 00:09:28,080
look for the structure of it inside the

200
00:09:28,080 --> 00:09:30,540
our data section

201
00:09:30,540 --> 00:09:32,940
if you're really curious you can go to

202
00:09:32,940 --> 00:09:35,100
this link and find some information

203
00:09:35,100 --> 00:09:37,620
about that structure

204
00:09:37,620 --> 00:09:40,980
another thing go strings are not not

205
00:09:40,980 --> 00:09:44,660
terminated which makes it really hard to

206
00:09:44,660 --> 00:09:47,100
investigate and reverse

207
00:09:47,100 --> 00:09:50,700
basically there are huge large string

208
00:09:50,700 --> 00:09:54,920
blobs inside these binaries and only the

209
00:09:54,920 --> 00:10:00,140
sequence of bytes defines each strings

210
00:10:01,320 --> 00:10:02,940
so we took our favorites in this

211
00:10:02,940 --> 00:10:06,120
assembler either and looked at how we

212
00:10:06,120 --> 00:10:08,399
could start reversing obviously in the

213
00:10:08,399 --> 00:10:11,339
early versions of Ida there was no such

214
00:10:11,339 --> 00:10:13,800
support for Golden binaries and as you

215
00:10:13,800 --> 00:10:15,779
can see on the first left hand side

216
00:10:15,779 --> 00:10:17,300
screenshot

217
00:10:17,300 --> 00:10:20,339
key functions were only displayed as sub

218
00:10:20,339 --> 00:10:22,440
underscore something

219
00:10:22,440 --> 00:10:27,779
and after Ida pro version 7.7 there was

220
00:10:27,779 --> 00:10:30,600
huge improvements regarding this and you

221
00:10:30,600 --> 00:10:34,680
can find this key option in either under

222
00:10:34,680 --> 00:10:37,440
other search for PC Line tab which would

223
00:10:37,440 --> 00:10:41,100
obviously help you define and look for

224
00:10:41,100 --> 00:10:43,620
the structures and rename those key

225
00:10:43,620 --> 00:10:46,160
functions

226
00:10:47,279 --> 00:10:49,920
so you go along and reverse these golang

227
00:10:49,920 --> 00:10:52,980
binaries and you start wondering whether

228
00:10:52,980 --> 00:10:56,160
you end up in in Wonderland and you will

229
00:10:56,160 --> 00:10:58,500
feel like Alice tumbling down the rabbit

230
00:10:58,500 --> 00:11:01,320
hole starting from the entry point going

231
00:11:01,320 --> 00:11:03,779
through all these go functions

232
00:11:03,779 --> 00:11:07,100
going after main runtime RT zero Go

233
00:11:07,100 --> 00:11:09,959
runtime main units and then finally you

234
00:11:09,959 --> 00:11:12,540
end up in main main which is the real

235
00:11:12,540 --> 00:11:16,040
key go function

236
00:11:18,540 --> 00:11:20,880
after that obviously you need to

237
00:11:20,880 --> 00:11:23,100
practice some debugging set up some

238
00:11:23,100 --> 00:11:25,920
break points even do some VM snapshots

239
00:11:25,920 --> 00:11:29,279
to really understand uh how the binary

240
00:11:29,279 --> 00:11:31,980
Works what sort of encryption it employs

241
00:11:31,980 --> 00:11:34,380
or even sometimes you need to dump

242
00:11:34,380 --> 00:11:37,680
memory regions to understand the

243
00:11:37,680 --> 00:11:39,660
the planes things for example to gain

244
00:11:39,660 --> 00:11:42,319
that out

245
00:11:44,760 --> 00:11:48,240
and we come to a section that was really

246
00:11:48,240 --> 00:11:50,940
interesting to us or some findings that

247
00:11:50,940 --> 00:11:53,519
were really interesting this ransomware

248
00:11:53,519 --> 00:11:56,360
family uses something called cgo

249
00:11:56,360 --> 00:11:59,220
and basically it's a fusion of c and

250
00:11:59,220 --> 00:12:00,180
golang

251
00:12:00,180 --> 00:12:01,760
so in this case

252
00:12:01,760 --> 00:12:05,040
basically a go package can be built as a

253
00:12:05,040 --> 00:12:06,720
shared C

254
00:12:06,720 --> 00:12:11,459
library but cgo allows you to do this

255
00:12:11,459 --> 00:12:13,260
the opposite way as well

256
00:12:13,260 --> 00:12:17,160
so C libraries from go packages

257
00:12:17,160 --> 00:12:19,500
we create it so C code can actually

258
00:12:19,500 --> 00:12:21,300
reference go packages

259
00:12:21,300 --> 00:12:24,540
and you would start this by issuing this

260
00:12:24,540 --> 00:12:26,220
command here

261
00:12:26,220 --> 00:12:28,440
but obviously that's not enough because

262
00:12:28,440 --> 00:12:31,560
there's no C header and there's no C

263
00:12:31,560 --> 00:12:34,380
symbols so you also need to import those

264
00:12:34,380 --> 00:12:37,160
after that

265
00:12:38,760 --> 00:12:41,700
one other peculiar thing about this I

266
00:12:41,700 --> 00:12:43,459
think and we think

267
00:12:43,459 --> 00:12:46,260
you might wonder and ask why is this

268
00:12:46,260 --> 00:12:49,040
used in this ransomware family well

269
00:12:49,040 --> 00:12:52,260
certain boilerplate code can be written

270
00:12:52,260 --> 00:12:54,240
for example in golang

271
00:12:54,240 --> 00:12:56,519
and let's say if you go on the

272
00:12:56,519 --> 00:12:59,459
Underground forums and you start to look

273
00:12:59,459 --> 00:13:01,380
around you might see that sometimes the

274
00:13:01,380 --> 00:13:04,440
developers sell these parts of this of

275
00:13:04,440 --> 00:13:07,800
these codes and later when a new player

276
00:13:07,800 --> 00:13:09,959
joins the game the ransomware game they

277
00:13:09,959 --> 00:13:12,920
could just buy these section of codes

278
00:13:12,920 --> 00:13:15,959
and join them up and just compile the

279
00:13:15,959 --> 00:13:19,399
binary so it's really allows a low entry

280
00:13:19,399 --> 00:13:23,600
for these ransomware Developers

281
00:13:24,420 --> 00:13:27,139
so what are the implications of this

282
00:13:27,139 --> 00:13:29,820
uh in the screenshot here you can see

283
00:13:29,820 --> 00:13:32,940
how you can recognize these cgo patterns

284
00:13:32,940 --> 00:13:35,100
just looking at some of the functions or

285
00:13:35,100 --> 00:13:36,360
in the strings

286
00:13:36,360 --> 00:13:38,760
and currently we are at the stage where

287
00:13:38,760 --> 00:13:41,459
malware can use or will use multiple

288
00:13:41,459 --> 00:13:43,880
programming languages at the same time

289
00:13:43,880 --> 00:13:47,339
but if you think about this and I'm and

290
00:13:47,339 --> 00:13:50,420
I want to end my ports on a high note

291
00:13:50,420 --> 00:13:53,519
what if you have a sample that's

292
00:13:53,519 --> 00:13:57,000
employing C golang or even rust at the

293
00:13:57,000 --> 00:13:59,700
same time so that could be something

294
00:13:59,700 --> 00:14:01,800
like malware on steroids

295
00:14:01,800 --> 00:14:05,399
and if this trend continues and I'm a

296
00:14:05,399 --> 00:14:07,560
little bit prophesizing here I think

297
00:14:07,560 --> 00:14:10,740
within one year or it might be already

298
00:14:10,740 --> 00:14:13,560
that you will see malware using at least

299
00:14:13,560 --> 00:14:15,899
three programming languages and

300
00:14:15,899 --> 00:14:19,519
currently golang allows to

301
00:14:19,519 --> 00:14:22,980
call other functions from rust for

302
00:14:22,980 --> 00:14:25,500
example rust has this interface called

303
00:14:25,500 --> 00:14:28,019
foreign function interface that will

304
00:14:28,019 --> 00:14:31,860
allow you to call from rust to golang or

305
00:14:31,860 --> 00:14:35,279
from golang to rust basically

306
00:14:35,279 --> 00:14:38,839
and I'll pass it over to Robert

307
00:14:39,060 --> 00:14:42,060
so another interesting thing we find in

308
00:14:42,060 --> 00:14:44,220
the binary is that they were initially

309
00:14:44,220 --> 00:14:46,500
using something called codivolc so this

310
00:14:46,500 --> 00:14:49,440
is a directory traversal library but

311
00:14:49,440 --> 00:14:51,660
they just had to use to kind of go on

312
00:14:51,660 --> 00:14:53,339
all in all the directories and start

313
00:14:53,339 --> 00:14:56,100
encrypting there are a couple of things

314
00:14:56,100 --> 00:14:58,079
with this so initially they were using

315
00:14:58,079 --> 00:15:00,540
that but later they were changing to

316
00:15:00,540 --> 00:15:03,060
something called an internal Volk go

317
00:15:03,060 --> 00:15:05,880
Library basically the change was due to

318
00:15:05,880 --> 00:15:09,839
the the first bit earlier versions of go

319
00:15:09,839 --> 00:15:12,120
the the internal library was just not

320
00:15:12,120 --> 00:15:14,339
fast enough so they were relying on this

321
00:15:14,339 --> 00:15:17,940
external one but after like version 1.16

322
00:15:17,940 --> 00:15:20,339
there were a lot of improvements and as

323
00:15:20,339 --> 00:15:22,019
you can see on the chart on the right

324
00:15:22,019 --> 00:15:25,620
that the Cody Rock implementation from

325
00:15:25,620 --> 00:15:28,320
Carrick is actually the the slowest so

326
00:15:28,320 --> 00:15:31,440
they were adopting but I will be showing

327
00:15:31,440 --> 00:15:33,540
that with some campaigns later on how

328
00:15:33,540 --> 00:15:35,519
that adoption was actually taking in

329
00:15:35,519 --> 00:15:37,980
place the takeaway from here is that

330
00:15:37,980 --> 00:15:39,899
actually go to your world and can be a

331
00:15:39,899 --> 00:15:41,940
liability because of the speed and

332
00:15:41,940 --> 00:15:44,820
because this is a library we can detect

333
00:15:44,820 --> 00:15:48,779
in Google binaries and that might help

334
00:15:48,779 --> 00:15:50,339
some of course the library can be used

335
00:15:50,339 --> 00:15:52,680
for a lot of other features but this is

336
00:15:52,680 --> 00:15:55,199
some hint

337
00:15:55,199 --> 00:15:57,360
and they were not stopping there with

338
00:15:57,360 --> 00:15:59,519
the go binaries so there is something

339
00:15:59,519 --> 00:16:01,440
called go for skate that's an

340
00:16:01,440 --> 00:16:04,139
obfuscation package for for go binaries

341
00:16:04,139 --> 00:16:06,360
basically it can do manipulation of

342
00:16:06,360 --> 00:16:08,579
package names Global variables function

343
00:16:08,579 --> 00:16:10,440
names type names method names and

344
00:16:10,440 --> 00:16:11,399
strings

345
00:16:11,399 --> 00:16:14,100
and on the screen you see on the right

346
00:16:14,100 --> 00:16:17,160
that you would have your normal naming

347
00:16:17,160 --> 00:16:19,680
convention for your procedures and your

348
00:16:19,680 --> 00:16:22,139
data and then it's obfuscated so you

349
00:16:22,139 --> 00:16:24,720
have already that kind of garbage and

350
00:16:24,720 --> 00:16:27,600
it's just making the reversing a little

351
00:16:27,600 --> 00:16:30,240
bit more challenging

352
00:16:30,240 --> 00:16:33,660
with the string obfuscation this is the

353
00:16:33,660 --> 00:16:36,060
kind of the only one in Goku's kit but

354
00:16:36,060 --> 00:16:39,540
you can properly do and reverse there

355
00:16:39,540 --> 00:16:42,060
are two different ways for doing that

356
00:16:42,060 --> 00:16:45,079
either it's kind of stored as an array

357
00:16:45,079 --> 00:16:48,000
or you have a function calls but

358
00:16:48,000 --> 00:16:50,940
basically this is a very simplistic xor

359
00:16:50,940 --> 00:16:53,880
based encryption so just like it's being

360
00:16:53,880 --> 00:16:56,399
xor based it can be reversed you can

361
00:16:56,399 --> 00:16:59,220
have a small python script to do that

362
00:16:59,220 --> 00:17:03,000
for you so obviously the mobile routers

363
00:17:03,000 --> 00:17:04,919
are being aware of this one and they

364
00:17:04,919 --> 00:17:07,319
don't want to stop here because with

365
00:17:07,319 --> 00:17:10,319
that restoring the original internal

366
00:17:10,319 --> 00:17:12,119
strings would be just a piece of cake

367
00:17:12,119 --> 00:17:13,140
for them

368
00:17:13,140 --> 00:17:16,500
so instead of that okay go for usually

369
00:17:16,500 --> 00:17:19,439
for something else as for encryption

370
00:17:19,439 --> 00:17:22,619
so on the left you see something I'm

371
00:17:22,619 --> 00:17:25,380
calling like a friendly runs over sample

372
00:17:25,380 --> 00:17:28,079
actually that's more like just a random

373
00:17:28,079 --> 00:17:30,299
ransomware binary which was created

374
00:17:30,299 --> 00:17:33,299
in.net you can see highlighted Unicode

375
00:17:33,299 --> 00:17:35,700
strings so if you can see the screen

376
00:17:35,700 --> 00:17:38,340
there are strings about encryption about

377
00:17:38,340 --> 00:17:41,520
email address and about a ransom Note

378
00:17:41,520 --> 00:17:44,340
file name so if you have it like that in

379
00:17:44,340 --> 00:17:46,799
your binary that's pretty much easy to

380
00:17:46,799 --> 00:17:49,380
have like a simplistic URL rule

381
00:17:49,380 --> 00:17:51,840
detecting all these for hunting and

382
00:17:51,840 --> 00:17:54,419
detection it's not going to be a problem

383
00:17:54,419 --> 00:17:56,280
obviously we are dealing with something

384
00:17:56,280 --> 00:18:00,840
else here so in one of our variants this

385
00:18:00,840 --> 00:18:03,120
is what you see in the go binary so as

386
00:18:03,120 --> 00:18:05,580
Albert was explaining earlier we have

387
00:18:05,580 --> 00:18:08,340
all these kind of strings concatenated

388
00:18:08,340 --> 00:18:13,260
in a huge blob in go and if you put any

389
00:18:13,260 --> 00:18:15,780
kind of obfuscation or encoding or

390
00:18:15,780 --> 00:18:17,820
encryption on top you end up having

391
00:18:17,820 --> 00:18:20,220
something like this this is just a huge

392
00:18:20,220 --> 00:18:24,419
hex encoded like blob and you don't know

393
00:18:24,419 --> 00:18:26,880
where the information is really starting

394
00:18:26,880 --> 00:18:29,520
here what you would need to do to decode

395
00:18:29,520 --> 00:18:31,740
and variety of which are the parts

396
00:18:31,740 --> 00:18:33,660
so actually after after you are doing

397
00:18:33,660 --> 00:18:36,539
some debugging and you see how it is

398
00:18:36,539 --> 00:18:37,919
being done

399
00:18:37,919 --> 00:18:39,780
it took me a little bit of a hard time

400
00:18:39,780 --> 00:18:41,940
to find an area in the sample which is

401
00:18:41,940 --> 00:18:44,460
actually holding two separate pieces of

402
00:18:44,460 --> 00:18:47,700
strings so later these blobs will be

403
00:18:47,700 --> 00:18:51,000
used by go and just kind of cut or copy

404
00:18:51,000 --> 00:18:53,280
it from the big block and then the

405
00:18:53,280 --> 00:18:56,100
decryption will be applied on these ones

406
00:18:56,100 --> 00:18:57,740
so when we talk about

407
00:18:57,740 --> 00:19:01,980
decryption they are mainly using AES at

408
00:19:01,980 --> 00:19:04,559
least for now the the decryption I'll go

409
00:19:04,559 --> 00:19:07,980
is consisting of a couple of go specific

410
00:19:07,980 --> 00:19:10,320
goals that the strings to slice byte

411
00:19:10,320 --> 00:19:11,100
which is

412
00:19:11,100 --> 00:19:13,020
uh kind of working with the Big Blob

413
00:19:13,020 --> 00:19:15,780
then decoding the hex then calling the

414
00:19:15,780 --> 00:19:18,480
thes decryption and sometimes start

415
00:19:18,480 --> 00:19:22,020
transforming things to Strings and then

416
00:19:22,020 --> 00:19:24,900
depending on our specific variants or

417
00:19:24,900 --> 00:19:27,179
like kind of how crazy the developers

418
00:19:27,179 --> 00:19:30,360
are here they are repeating that over

419
00:19:30,360 --> 00:19:34,260
like n times and I will also showcase

420
00:19:34,260 --> 00:19:37,500
that later the more interesting part is

421
00:19:37,500 --> 00:19:39,900
on the right side like what we end up

422
00:19:39,900 --> 00:19:41,400
having us for the result of the

423
00:19:41,400 --> 00:19:42,480
decryption

424
00:19:42,480 --> 00:19:45,539
so in all the binaries we've been

425
00:19:45,539 --> 00:19:47,700
investigating in the past one and a half

426
00:19:47,700 --> 00:19:50,880
year we have seen almost exactly the the

427
00:19:50,880 --> 00:19:52,799
very same strings sometimes there were

428
00:19:52,799 --> 00:19:56,100
very minor uh differences but each of

429
00:19:56,100 --> 00:19:57,539
these samples were containing at least

430
00:19:57,539 --> 00:19:58,919
an email address

431
00:19:58,919 --> 00:20:01,260
a panel or a compound key that's

432
00:20:01,260 --> 00:20:03,900
specific to one one target they are

433
00:20:03,900 --> 00:20:06,780
attacking the there is password for

434
00:20:06,780 --> 00:20:08,700
execution for all but the very first

435
00:20:08,700 --> 00:20:11,039
sample then the extension of the

436
00:20:11,039 --> 00:20:12,419
encrypted files how they are going to

437
00:20:12,419 --> 00:20:14,460
cool down with them then the file name

438
00:20:14,460 --> 00:20:17,039
for the ransom node there are some node

439
00:20:17,039 --> 00:20:18,660
template itself

440
00:20:18,660 --> 00:20:21,480
or specific RSA key which is of course

441
00:20:21,480 --> 00:20:24,299
always changing as per sample and then

442
00:20:24,299 --> 00:20:26,760
some internal strings which are mainly

443
00:20:26,760 --> 00:20:29,580
used to to replace and build up the

444
00:20:29,580 --> 00:20:32,160
ransomware template and then the last

445
00:20:32,160 --> 00:20:35,160
three months are just another set of

446
00:20:35,160 --> 00:20:38,160
instant strings used for the

447
00:20:38,160 --> 00:20:40,559
multi-threaded encryption that runs over

448
00:20:40,559 --> 00:20:43,380
payload is utilizing but besides this

449
00:20:43,380 --> 00:20:45,840
you don't have any other meaningful

450
00:20:45,840 --> 00:20:48,900
strings in the binary they don't have a

451
00:20:48,900 --> 00:20:51,299
list of file extensions because they are

452
00:20:51,299 --> 00:20:53,160
encrypting all files on a specific knife

453
00:20:53,160 --> 00:20:56,820
more on that later so not much to to

454
00:20:56,820 --> 00:20:59,760
take and to get even these you need to

455
00:20:59,760 --> 00:21:02,760
go through usually multiple layers of

456
00:21:02,760 --> 00:21:04,799
AES encryption

457
00:21:04,799 --> 00:21:06,900
a little bit about their own some note

458
00:21:06,900 --> 00:21:08,100
templates

459
00:21:08,100 --> 00:21:10,020
we are mainly dealing with two templates

460
00:21:10,020 --> 00:21:12,660
because they were changing over time but

461
00:21:12,660 --> 00:21:16,440
here are those specific points marked

462
00:21:16,440 --> 00:21:19,080
with yellow then actually the victim

463
00:21:19,080 --> 00:21:21,179
specific information is going to insert

464
00:21:21,179 --> 00:21:22,799
it into the template and then you will

465
00:21:22,799 --> 00:21:25,679
have this this ASCA the final Ransom

466
00:21:25,679 --> 00:21:28,679
note dropped to the disk

467
00:21:28,679 --> 00:21:31,679
so how this is all looking like in in

468
00:21:31,679 --> 00:21:33,780
the timeline as we said it was an

469
00:21:33,780 --> 00:21:36,000
investigation for about a year and a

470
00:21:36,000 --> 00:21:39,840
half the initial sample was the Epsilon

471
00:21:39,840 --> 00:21:40,860
gang

472
00:21:40,860 --> 00:21:44,039
and it's a very interesting part of that

473
00:21:44,039 --> 00:21:45,840
was not just the the usage of the

474
00:21:45,840 --> 00:21:48,000
PowerShot they were using Powershell in

475
00:21:48,000 --> 00:21:51,059
ransomware before and also golang wasn't

476
00:21:51,059 --> 00:21:52,679
the kind of the first case

477
00:21:52,679 --> 00:21:54,840
but it was more interesting that after

478
00:21:54,840 --> 00:21:57,059
the very first kind of attack about

479
00:21:57,059 --> 00:21:59,460
absent with Epsilon gang or an Epsilon

480
00:21:59,460 --> 00:22:02,280
red no one really heard about that team

481
00:22:02,280 --> 00:22:04,620
anymore no one was blogging about that

482
00:22:04,620 --> 00:22:06,360
except that they were trying to link

483
00:22:06,360 --> 00:22:08,820
them to certain other campaigns so in

484
00:22:08,820 --> 00:22:10,799
the this very first one they were using

485
00:22:10,799 --> 00:22:13,200
upx and that was just one layer of AES

486
00:22:13,200 --> 00:22:15,840
they were using the go deer walk that

487
00:22:15,840 --> 00:22:19,380
was the there was no execution key so if

488
00:22:19,380 --> 00:22:21,480
you could just get the sample you could

489
00:22:21,480 --> 00:22:24,020
run it with providing like uh

490
00:22:24,020 --> 00:22:27,900
C drive argument to the main binary and

491
00:22:27,900 --> 00:22:29,700
it would start encrypting your all your

492
00:22:29,700 --> 00:22:32,700
files that was the panel key the The

493
00:22:32,700 --> 00:22:37,039
Ransom node file name and as you can see

494
00:22:37,039 --> 00:22:39,900
victims could be identified because they

495
00:22:39,900 --> 00:22:44,220
were using that as the independent URL

496
00:22:44,220 --> 00:22:46,200
so we were removing the sensitive

497
00:22:46,200 --> 00:22:48,720
information but it was pretty much Clear

498
00:22:48,720 --> 00:22:51,960
how to use or how to identify the the

499
00:22:51,960 --> 00:22:53,820
victims because that was kind of plain

500
00:22:53,820 --> 00:22:55,500
text and our kind of a company name

501
00:22:55,500 --> 00:22:58,080
without the numbers

502
00:22:58,080 --> 00:23:00,659
so after that only just a couple of

503
00:23:00,659 --> 00:23:03,659
weeks later and there was another

504
00:23:03,659 --> 00:23:06,059
Warrior but now we are not talking about

505
00:23:06,059 --> 00:23:07,679
Epsilon anymore we are talking about

506
00:23:07,679 --> 00:23:10,620
kind of a new team well some at least

507
00:23:10,620 --> 00:23:11,700
people who are believing that called

508
00:23:11,700 --> 00:23:13,140
Black cocaine

509
00:23:13,140 --> 00:23:15,500
so it was actually the the very same

510
00:23:15,500 --> 00:23:18,539
structure and very same sample so they

511
00:23:18,539 --> 00:23:21,000
were rebranding just within a couple of

512
00:23:21,000 --> 00:23:24,780
weeks not sure if the the timeline with

513
00:23:24,780 --> 00:23:28,380
the colonial pipeline accident is is the

514
00:23:28,380 --> 00:23:30,120
key here because that was also happening

515
00:23:30,120 --> 00:23:32,460
last time in May so maybe they were

516
00:23:32,460 --> 00:23:34,500
having some additional pressure maybe

517
00:23:34,500 --> 00:23:36,900
that was kind of planned all the way

518
00:23:36,900 --> 00:23:40,260
along but we haven't seen anything as

519
00:23:40,260 --> 00:23:43,500
before the Epsilon red campaign but

520
00:23:43,500 --> 00:23:45,720
surely we have seen what they were doing

521
00:23:45,720 --> 00:23:49,320
after that here the only key change was

522
00:23:49,320 --> 00:23:51,419
that they were introducing the execution

523
00:23:51,419 --> 00:23:54,059
key so while the App Store that sample

524
00:23:54,059 --> 00:23:56,400
could just run if you were running the

525
00:23:56,400 --> 00:23:59,159
new one in a VM it would do absolutely

526
00:23:59,159 --> 00:24:01,320
nothing the problem with that is that

527
00:24:01,320 --> 00:24:03,500
people if they are getting any

528
00:24:03,500 --> 00:24:06,120
ransomware sample for that investigation

529
00:24:06,120 --> 00:24:08,760
like digital forensic and verifier and

530
00:24:08,760 --> 00:24:10,380
anything like that they would be

531
00:24:10,380 --> 00:24:12,419
dropping these into sandboxes and of

532
00:24:12,419 --> 00:24:14,039
course a Sandbox wouldn't do anything

533
00:24:14,039 --> 00:24:16,500
with that it would be just one sample

534
00:24:16,500 --> 00:24:18,900
which is immediately doing nothing for

535
00:24:18,900 --> 00:24:19,919
them

536
00:24:19,919 --> 00:24:22,020
other than that it was just the branding

537
00:24:22,020 --> 00:24:24,120
so we are talking about Black cocaine

538
00:24:24,120 --> 00:24:27,120
from now on the structure is the same

539
00:24:27,120 --> 00:24:29,220
the hot recover files are kind of

540
00:24:29,220 --> 00:24:31,559
following the same platform pattern and

541
00:24:31,559 --> 00:24:34,200
then we also have victim information but

542
00:24:34,200 --> 00:24:37,260
we are redacting the email is protonmail

543
00:24:37,260 --> 00:24:38,700
here

544
00:24:38,700 --> 00:24:41,880
in uh kind of uh just within a couple of

545
00:24:41,880 --> 00:24:45,539
days in May we were also having at least

546
00:24:45,539 --> 00:24:49,080
two additional black cooking samples the

547
00:24:49,080 --> 00:24:50,520
only thing to mention about that because

548
00:24:50,520 --> 00:24:52,740
there was no big change here that they

549
00:24:52,740 --> 00:24:55,260
were reusing the same execution key at

550
00:24:55,260 --> 00:24:56,880
least like three times so they didn't

551
00:24:56,880 --> 00:24:59,460
feel that that was very important to be

552
00:24:59,460 --> 00:25:01,620
changed that's actually included in the

553
00:25:01,620 --> 00:25:03,659
original Powershell for the execution

554
00:25:03,659 --> 00:25:06,659
they were always making sure that uh

555
00:25:06,659 --> 00:25:10,140
included RSA key is always different for

556
00:25:10,140 --> 00:25:11,460
the victims

557
00:25:11,460 --> 00:25:13,740
and then there were other changes even

558
00:25:13,740 --> 00:25:16,440
within a couple of days so you could see

559
00:25:16,440 --> 00:25:18,179
in the previous side if they were using

560
00:25:18,179 --> 00:25:22,260
the cocaine.black with C2 domain but

561
00:25:22,260 --> 00:25:24,000
then they were changing also to the

562
00:25:24,000 --> 00:25:28,440
black cocaine.top and no real reason of

563
00:25:28,440 --> 00:25:30,960
why they were doing that maybe kind of

564
00:25:30,960 --> 00:25:34,140
just trying to kind of hide or moving

565
00:25:34,140 --> 00:25:35,700
away from the old one but everything

566
00:25:35,700 --> 00:25:38,100
else is pretty much the same here and we

567
00:25:38,100 --> 00:25:39,900
are still talking about that it was all

568
00:25:39,900 --> 00:25:42,299
happening in May with like four

569
00:25:42,299 --> 00:25:44,940
campaigns then there was a just a little

570
00:25:44,940 --> 00:25:47,480
bit of a bigger jump we are jumping to

571
00:25:47,480 --> 00:25:50,580
same year September and we have

572
00:25:50,580 --> 00:25:52,500
something called Colossus

573
00:25:52,500 --> 00:25:56,400
at this point almost all the security

574
00:25:56,400 --> 00:25:59,279
companies got a little bit confused The

575
00:25:59,279 --> 00:26:01,080
Ransom note was still

576
00:26:01,080 --> 00:26:03,059
pretty much the same so they were still

577
00:26:03,059 --> 00:26:06,600
trying to sometimes do the correlation

578
00:26:06,600 --> 00:26:09,539
between the previous kind of Brands and

579
00:26:09,539 --> 00:26:11,820
the previous versions

580
00:26:11,820 --> 00:26:15,779
but uh here there were a couple of also

581
00:26:15,779 --> 00:26:19,260
small but key changes the first one is

582
00:26:19,260 --> 00:26:22,320
the usage of them either so I'm not sure

583
00:26:22,320 --> 00:26:24,659
if you guys know what tamida is or the

584
00:26:24,659 --> 00:26:26,220
kind of the background with that and

585
00:26:26,220 --> 00:26:29,159
something called tagand which was on on

586
00:26:29,159 --> 00:26:30,720
exit packing

587
00:26:30,720 --> 00:26:33,779
detection capability for especially

588
00:26:33,779 --> 00:26:36,360
created for security vendors so teminder

589
00:26:36,360 --> 00:26:39,360
is a commercial exit Packer it was

590
00:26:39,360 --> 00:26:40,799
always meant to be a commercial product

591
00:26:40,799 --> 00:26:43,559
product protecting

592
00:26:43,559 --> 00:26:45,659
other commercial products so basically

593
00:26:45,659 --> 00:26:48,720
preventing the the reversing of those

594
00:26:48,720 --> 00:26:51,179
it's one of the the very best and heavy

595
00:26:51,179 --> 00:26:55,260
ones utilizing multiple VMS and I don't

596
00:26:55,260 --> 00:26:57,779
want to get into the details but we were

597
00:26:57,779 --> 00:27:00,480
obtaining the very same sample in a upx

598
00:27:00,480 --> 00:27:03,539
format so it was rather clear that they

599
00:27:03,539 --> 00:27:05,640
were trying to get onto the target

600
00:27:05,640 --> 00:27:07,799
system or they were trying to do the

601
00:27:07,799 --> 00:27:10,380
encryption and likely the original up

602
00:27:10,380 --> 00:27:13,500
example was detected there we don't know

603
00:27:13,500 --> 00:27:16,020
exactly like what vendor were they

604
00:27:16,020 --> 00:27:18,900
utilizing there but if you are looking

605
00:27:18,900 --> 00:27:21,720
at the Timeline the the same the up

606
00:27:21,720 --> 00:27:23,700
example was on the very same day so

607
00:27:23,700 --> 00:27:25,500
within just like one day they were

608
00:27:25,500 --> 00:27:27,360
repacking that with time either and they

609
00:27:27,360 --> 00:27:30,539
were deploying that to the Target we

610
00:27:30,539 --> 00:27:32,100
still have the victim information

611
00:27:32,100 --> 00:27:34,559
because they are still utilizing a C2

612
00:27:34,559 --> 00:27:36,659
this time it's also rebranded as

613
00:27:36,659 --> 00:27:39,200
Colossus

614
00:27:39,240 --> 00:27:41,760
two small additional things that they

615
00:27:41,760 --> 00:27:43,500
were changing the execution key for

616
00:27:43,500 --> 00:27:45,360
whatever reason it's not like that you

617
00:27:45,360 --> 00:27:46,799
could be guessing that the tank

618
00:27:46,799 --> 00:27:48,600
character long one but they were

619
00:27:48,600 --> 00:27:51,000
changing it to 32 so that's not even

620
00:27:51,000 --> 00:27:54,720
kind of harder guess it's still being

621
00:27:54,720 --> 00:27:57,720
encrypted encryptedly stored in the

622
00:27:57,720 --> 00:28:00,299
binary so if you know how to kind of

623
00:28:00,299 --> 00:28:02,279
reach that point and how to get it you

624
00:28:02,279 --> 00:28:04,440
can still kind of waste a couple of

625
00:28:04,440 --> 00:28:06,900
hours and just find it they are still

626
00:28:06,900 --> 00:28:09,720
using the the go to work library and

627
00:28:09,720 --> 00:28:11,880
they are having the same kind of panel

628
00:28:11,880 --> 00:28:14,880
key in the base64 format like before the

629
00:28:14,880 --> 00:28:17,159
protonmail is the same the only other

630
00:28:17,159 --> 00:28:19,860
change is that this time they were kind

631
00:28:19,860 --> 00:28:22,679
of thinking that one layer of AES is not

632
00:28:22,679 --> 00:28:24,840
going to be enough or suitable so let's

633
00:28:24,840 --> 00:28:27,900
go for two and let's start to decrypt

634
00:28:27,900 --> 00:28:30,539
and just add one more layer on the

635
00:28:30,539 --> 00:28:33,299
string and kind of just do that in in a

636
00:28:33,299 --> 00:28:36,059
loop so it's increasing the size of the

637
00:28:36,059 --> 00:28:37,740
library because of the kind of the go

638
00:28:37,740 --> 00:28:40,980
hex blobs but not really making the life

639
00:28:40,980 --> 00:28:44,039
of reversers a lot more complicated if

640
00:28:44,039 --> 00:28:45,840
you know what you are looking for

641
00:28:45,840 --> 00:28:48,720
and then we we were notifying a kind of

642
00:28:48,720 --> 00:28:50,159
a bigger jump

643
00:28:50,159 --> 00:28:51,900
actually there is something we were not

644
00:28:51,900 --> 00:28:53,940
including on the timeline because we

645
00:28:53,940 --> 00:28:56,159
were also obtaining at least one

646
00:28:56,159 --> 00:28:58,500
decryption tool from them so that's also

647
00:28:58,500 --> 00:29:01,260
justifying that people were paying at

648
00:29:01,260 --> 00:29:03,720
least there was the intention from this

649
00:29:03,720 --> 00:29:05,460
from the Epsilon gang that they are

650
00:29:05,460 --> 00:29:07,380
providing a decryption to if they pay

651
00:29:07,380 --> 00:29:09,900
the decryption tool was also written in

652
00:29:09,900 --> 00:29:11,039
golang

653
00:29:11,039 --> 00:29:13,440
it was only containing the the private

654
00:29:13,440 --> 00:29:16,980
RSA key for that specific Target and it

655
00:29:16,980 --> 00:29:19,020
would just kind of do a very damp

656
00:29:19,020 --> 00:29:21,179
decryption if you are providing an

657
00:29:21,179 --> 00:29:24,360
argument and it can find the right file

658
00:29:24,360 --> 00:29:25,919
extension then it would just try to

659
00:29:25,919 --> 00:29:27,899
decrypt and basically that's it we

660
00:29:27,899 --> 00:29:30,779
couldn't find the matching ransomware

661
00:29:30,779 --> 00:29:33,720
payload for that one so or an example

662
00:29:33,720 --> 00:29:36,240
what we were bumping into is coming from

663
00:29:36,240 --> 00:29:39,179
this year in January there were a couple

664
00:29:39,179 --> 00:29:41,580
of key changes Colossus was basically

665
00:29:41,580 --> 00:29:43,679
the last one when they were officially

666
00:29:43,679 --> 00:29:46,799
having any kind of branding and starting

667
00:29:46,799 --> 00:29:49,020
this year they were changing from the

668
00:29:49,020 --> 00:29:52,200
goody work so they were using a volk for

669
00:29:52,200 --> 00:29:54,299
the directory traversal they were

670
00:29:54,299 --> 00:29:57,120
changing from protonmail to a new mail

671
00:29:57,120 --> 00:29:59,039
it's not like that you can do a lot with

672
00:29:59,039 --> 00:30:02,159
either of these and they were changing

673
00:30:02,159 --> 00:30:03,659
the encryption now at least five times

674
00:30:03,659 --> 00:30:06,899
on AES so just having the huge hex

675
00:30:06,899 --> 00:30:08,940
blocks into executable

676
00:30:08,940 --> 00:30:11,399
and basically the more important parts

677
00:30:11,399 --> 00:30:13,980
are that panel key and the victim

678
00:30:13,980 --> 00:30:15,899
information is gone with the panel key

679
00:30:15,899 --> 00:30:19,080
so you cannot identify the victim by

680
00:30:19,080 --> 00:30:21,779
just having the sample and then there

681
00:30:21,779 --> 00:30:23,640
are some node was changing at this point

682
00:30:23,640 --> 00:30:25,620
and the template from the old template

683
00:30:25,620 --> 00:30:28,080
to the new one and also the name from

684
00:30:28,080 --> 00:30:30,480
how to recover to how to fix files so

685
00:30:30,480 --> 00:30:33,539
this was the first time they wanted to

686
00:30:33,539 --> 00:30:36,600
go like completely anonymous

687
00:30:36,600 --> 00:30:38,520
then we also had a little bit of a

688
00:30:38,520 --> 00:30:41,399
bigger jump to to dismay and that Trend

689
00:30:41,399 --> 00:30:43,620
was continuing so there were no other

690
00:30:43,620 --> 00:30:46,559
significant changes Daniel mail is the

691
00:30:46,559 --> 00:30:48,539
same the format is the same no more

692
00:30:48,539 --> 00:30:50,100
panel information or victim information

693
00:30:50,100 --> 00:30:52,919
anymore but probably they were just

694
00:30:52,919 --> 00:30:55,679
realizing one mistake they had before

695
00:30:55,679 --> 00:30:58,080
all the previous samples and campaigns

696
00:30:58,080 --> 00:31:00,659
they were encrypting all those things I

697
00:31:00,659 --> 00:31:02,279
was showing in a couple of previous

698
00:31:02,279 --> 00:31:04,559
slides but they were forgetting to do

699
00:31:04,559 --> 00:31:08,399
one interesting and wonky encryption and

700
00:31:08,399 --> 00:31:10,020
that was the file name of the ransom

701
00:31:10,020 --> 00:31:12,840
node so if you could do a search on like

702
00:31:12,840 --> 00:31:15,000
how to recover or how to fix you could

703
00:31:15,000 --> 00:31:16,980
still find some samples and you can

704
00:31:16,980 --> 00:31:19,740
still have some ioc for that one here

705
00:31:19,740 --> 00:31:21,360
they realized that that was a mistake

706
00:31:21,360 --> 00:31:24,480
and from now on they are also encrypting

707
00:31:24,480 --> 00:31:26,640
their Ensemble file name and basically

708
00:31:26,640 --> 00:31:28,799
don't have any meaningful strings

709
00:31:28,799 --> 00:31:31,020
anymore in the binary I mean in a

710
00:31:31,020 --> 00:31:32,760
clearly visible way

711
00:31:32,760 --> 00:31:35,880
then just a couple of the small jumps

712
00:31:35,880 --> 00:31:38,580
and we are already in this year in

713
00:31:38,580 --> 00:31:41,580
August also no significant changes but

714
00:31:41,580 --> 00:31:44,220
then they decide that AES they are five

715
00:31:44,220 --> 00:31:46,200
times is not enough so we want to have

716
00:31:46,200 --> 00:31:48,659
like six times because 66 is the magic

717
00:31:48,659 --> 00:31:52,799
number also you might notice I'm not

718
00:31:52,799 --> 00:31:54,419
sure if there is any kind of correlation

719
00:31:54,419 --> 00:31:57,779
between that but the number of Acts in

720
00:31:57,779 --> 00:32:00,299
the how to recover is also changing from

721
00:32:00,299 --> 00:32:02,640
five to six so that's kind of parallel

722
00:32:02,640 --> 00:32:04,740
maybe it's kind of just they are playing

723
00:32:04,740 --> 00:32:06,899
the game it's not really a meaningful

724
00:32:06,899 --> 00:32:09,000
thing but they are going on with the

725
00:32:09,000 --> 00:32:12,419
annual mail addresses and for one they

726
00:32:12,419 --> 00:32:13,860
were switching back to how to recover

727
00:32:13,860 --> 00:32:16,080
files from how to fix files but other

728
00:32:16,080 --> 00:32:19,500
than that no changes and the last sample

729
00:32:19,500 --> 00:32:21,360
we could observe was from the end of

730
00:32:21,360 --> 00:32:24,059
August just like kind of from a month

731
00:32:24,059 --> 00:32:27,120
ago everything is the same but they are

732
00:32:27,120 --> 00:32:29,700
also back to how to fix files and

733
00:32:29,700 --> 00:32:33,000
nothing else was changing at this point

734
00:32:33,000 --> 00:32:35,100
anymore and we are still hunting and

735
00:32:35,100 --> 00:32:36,840
looking for new samples here

736
00:32:36,840 --> 00:32:38,580
so let's talk about a little bit about

737
00:32:38,580 --> 00:32:40,200
detection and prevention

738
00:32:40,200 --> 00:32:43,260
on the detection side and the prevention

739
00:32:43,260 --> 00:32:46,080
side you can do kind of two things you

740
00:32:46,080 --> 00:32:47,220
can deal with the power show the

741
00:32:47,220 --> 00:32:49,440
executable for the power shell the

742
00:32:49,440 --> 00:32:51,000
DraStic way is of course disabling

743
00:32:51,000 --> 00:32:52,740
Powershell completely if you can do that

744
00:32:52,740 --> 00:32:54,779
in your organization then please go

745
00:32:54,779 --> 00:32:57,299
ahead unfortunately a lot of people can

746
00:32:57,299 --> 00:33:00,000
do that then you can look for this

747
00:33:00,000 --> 00:33:02,460
unusual way of Powershell script is

748
00:33:02,460 --> 00:33:04,860
creating new and multiple PowerShot

749
00:33:04,860 --> 00:33:06,899
scripts in our case it was at least like

750
00:33:06,899 --> 00:33:09,779
10 new files or you can also look at

751
00:33:09,779 --> 00:33:11,940
Powershell script is actually containing

752
00:33:11,940 --> 00:33:16,460
a big base64 encoded blob over like a

753
00:33:16,460 --> 00:33:19,320
500 kilobytes so that's pretty much

754
00:33:19,320 --> 00:33:21,960
unusual why would you do that in any of

755
00:33:21,960 --> 00:33:23,820
your power version scripts on the

756
00:33:23,820 --> 00:33:25,500
executable side things are a little bit

757
00:33:25,500 --> 00:33:27,659
more complicated if you want to do some

758
00:33:27,659 --> 00:33:29,399
drastic changes then you can block Alexa

759
00:33:29,399 --> 00:33:33,000
Packers including tamida and upx because

760
00:33:33,000 --> 00:33:35,700
of themida wouldn't be a big problem

761
00:33:35,700 --> 00:33:38,820
because that's not being used that

762
00:33:38,820 --> 00:33:41,460
widely as upx and you can have some kind

763
00:33:41,460 --> 00:33:44,460
of exclusions the problem is that upx is

764
00:33:44,460 --> 00:33:45,960
still being invited used on a lot of

765
00:33:45,960 --> 00:33:48,419
executables like organizations want to

766
00:33:48,419 --> 00:33:50,640
do just kind of a block like that but

767
00:33:50,640 --> 00:33:53,279
the key Point here is that from an

768
00:33:53,279 --> 00:33:54,899
execution and a behavior point of view

769
00:33:54,899 --> 00:33:58,019
this is just a ransomware payload so

770
00:33:58,019 --> 00:34:00,179
heuristic and behavior-based detections

771
00:34:00,179 --> 00:34:02,820
can still detect that and we were just

772
00:34:02,820 --> 00:34:05,039
providing one example from our product

773
00:34:05,039 --> 00:34:07,140
that we were detecting the file

774
00:34:07,140 --> 00:34:08,879
activities and we were reverting back

775
00:34:08,879 --> 00:34:11,760
the fine modifications from Cache

776
00:34:11,760 --> 00:34:14,520
if you want to do a little bit more and

777
00:34:14,520 --> 00:34:16,918
you are working on the verifier side

778
00:34:16,918 --> 00:34:18,659
then you can look for a couple of

779
00:34:18,659 --> 00:34:20,879
additional things like looking for the

780
00:34:20,879 --> 00:34:23,940
execution policy change in Powershell or

781
00:34:23,940 --> 00:34:26,099
detecting that the they are deleting the

782
00:34:26,099 --> 00:34:28,619
shadow copies or deleting catalogs and

783
00:34:28,619 --> 00:34:31,619
backups or even kind of creating up the

784
00:34:31,619 --> 00:34:34,619
event log the we will be providing also

785
00:34:34,619 --> 00:34:36,780
the decoded Powershell script so you can

786
00:34:36,780 --> 00:34:38,399
look like what

787
00:34:38,399 --> 00:34:40,800
comments they are utilizing for that but

788
00:34:40,800 --> 00:34:42,418
basically these are all the kind of

789
00:34:42,418 --> 00:34:43,859
creative takeaways that they are

790
00:34:43,859 --> 00:34:47,520
preparing the PC for the encryption

791
00:34:47,520 --> 00:34:51,359
and as to go for some hunting then you

792
00:34:51,359 --> 00:34:53,820
can also look for the provided trades

793
00:34:53,820 --> 00:34:55,199
that you have a couple of email

794
00:34:55,199 --> 00:34:57,660
addresses you can kind of do your kind

795
00:34:57,660 --> 00:34:59,280
of a spine Curry Suite the file

796
00:34:59,280 --> 00:35:02,160
extensions and also the different Ransom

797
00:35:02,160 --> 00:35:05,700
note variants it's a it's not up not too

798
00:35:05,700 --> 00:35:07,500
much but basically a kind of a good

799
00:35:07,500 --> 00:35:10,200
starting point with that

800
00:35:10,200 --> 00:35:12,540
and with that we are reaching the or

801
00:35:12,540 --> 00:35:15,660
conclusions here uh so we were dividing

802
00:35:15,660 --> 00:35:17,820
that into two parts first talking about

803
00:35:17,820 --> 00:35:20,579
mainly the the round somewheres and this

804
00:35:20,579 --> 00:35:23,339
specific gang so as stated that the

805
00:35:23,339 --> 00:35:26,400
colony I pipeline incident was a sort of

806
00:35:26,400 --> 00:35:30,359
Turning Point after that there was uh

807
00:35:30,359 --> 00:35:33,060
comparably a much bigger focus on

808
00:35:33,060 --> 00:35:35,220
ransomware gangs and the three letter

809
00:35:35,220 --> 00:35:37,920
agencies were trying a lot harder

810
00:35:37,920 --> 00:35:40,740
to find individuals and criminals

811
00:35:40,740 --> 00:35:42,119
involving with these activities

812
00:35:42,119 --> 00:35:44,400
sometimes they could only find the

813
00:35:44,400 --> 00:35:46,560
Affiliates who are kind of running the

814
00:35:46,560 --> 00:35:48,300
campaigns and executing these but not

815
00:35:48,300 --> 00:35:50,640
the developers but still that's a good

816
00:35:50,640 --> 00:35:53,520
starting point and and things are kind

817
00:35:53,520 --> 00:35:55,920
of pointing into the right direction

818
00:35:55,920 --> 00:35:58,500
so because of that there are some

819
00:35:58,500 --> 00:36:00,900
ransomware groups who were preferring

820
00:36:00,900 --> 00:36:03,180
the gain over the fame so it's why it's

821
00:36:03,180 --> 00:36:05,160
nice to have to have your Wall of Shame

822
00:36:05,160 --> 00:36:07,200
and with a lot of victims and claiming

823
00:36:07,200 --> 00:36:09,780
that you are the best ransomware gang in

824
00:36:09,780 --> 00:36:11,940
town and you were breaching that many

825
00:36:11,940 --> 00:36:14,880
organizations with the extra heat coming

826
00:36:14,880 --> 00:36:17,760
from those three letter regencies maybe

827
00:36:17,760 --> 00:36:19,140
it's not the smartest thing to do

828
00:36:19,140 --> 00:36:21,839
anymore and you can still go on and

829
00:36:21,839 --> 00:36:24,300
operate in a different fashion

830
00:36:24,300 --> 00:36:27,780
so from that it's kind of clear that for

831
00:36:27,780 --> 00:36:30,060
some that changing the name is just an

832
00:36:30,060 --> 00:36:32,240
act and it's not actually

833
00:36:32,240 --> 00:36:34,680
resulting in anything else they are just

834
00:36:34,680 --> 00:36:37,260
rebranding their product

835
00:36:37,260 --> 00:36:39,660
so I said staying under the reader is

836
00:36:39,660 --> 00:36:42,780
actually an option you can still run

837
00:36:42,780 --> 00:36:44,760
campaigns for an accident period of time

838
00:36:44,760 --> 00:36:46,680
so if you look at the Timeline we are

839
00:36:46,680 --> 00:36:48,540
talking about a year and a half since

840
00:36:48,540 --> 00:36:52,619
the first recorded attack with Epsilon

841
00:36:52,619 --> 00:36:55,619
red and we can kind of assume that since

842
00:36:55,619 --> 00:36:58,260
those last samples were from the end of

843
00:36:58,260 --> 00:36:59,820
August that they are still going on

844
00:36:59,820 --> 00:37:03,240
maybe they have only fewer targets and

845
00:37:03,240 --> 00:37:04,740
they are kind of taking those and

846
00:37:04,740 --> 00:37:06,780
picking them carefully but they can

847
00:37:06,780 --> 00:37:08,760
still operate or maybe they are just

848
00:37:08,760 --> 00:37:12,660
kind of greedy and money is never enough

849
00:37:12,660 --> 00:37:16,140
and then while it wouldn't be seemed to

850
00:37:16,140 --> 00:37:17,880
be a big thing first but there is

851
00:37:17,880 --> 00:37:20,099
actually Evolution with ransomware

852
00:37:20,099 --> 00:37:22,619
groups and Returns on their payloads

853
00:37:22,619 --> 00:37:24,780
even if it's not looking that seems to

854
00:37:24,780 --> 00:37:26,760
be significant at first

855
00:37:26,760 --> 00:37:29,820
so they do all these small changes to

856
00:37:29,820 --> 00:37:33,420
kind of try to get under the radar and

857
00:37:33,420 --> 00:37:36,599
try to disappear but also it's very

858
00:37:36,599 --> 00:37:38,339
clear that they are also browsing

859
00:37:38,339 --> 00:37:41,339
borrowing ideas from each other the use

860
00:37:41,339 --> 00:37:43,560
of that kind of seed or key or password

861
00:37:43,560 --> 00:37:46,020
is absolutely not new other families

862
00:37:46,020 --> 00:37:50,339
were using it before and also there are

863
00:37:50,339 --> 00:37:51,720
kind of a couple of things like black

864
00:37:51,720 --> 00:37:54,180
bite who were using an external file in

865
00:37:54,180 --> 00:37:56,220
a C2 and using that as part of the

866
00:37:56,220 --> 00:37:59,579
changing key generation so it goes back

867
00:37:59,579 --> 00:38:02,820
and forth between the teams but also we

868
00:38:02,820 --> 00:38:05,520
could observe other

869
00:38:05,520 --> 00:38:08,339
families which were utilizing that kind

870
00:38:08,339 --> 00:38:11,220
of key scheme in a much better way so

871
00:38:11,220 --> 00:38:13,980
here if you are trained reverser you can

872
00:38:13,980 --> 00:38:16,859
and you have enough time you can debug

873
00:38:16,859 --> 00:38:19,079
it and you can actually find the key

874
00:38:19,079 --> 00:38:21,359
because actually once it's decrypted it

875
00:38:21,359 --> 00:38:25,020
will be just a string there are better

876
00:38:25,020 --> 00:38:28,500
ways to make it happen that if you don't

877
00:38:28,500 --> 00:38:30,000
have the original payload with the

878
00:38:30,000 --> 00:38:32,160
Powershell or the full chain that you

879
00:38:32,160 --> 00:38:34,500
won't be able to execute the the final

880
00:38:34,500 --> 00:38:36,480
payload at all but we don't really want

881
00:38:36,480 --> 00:38:39,300
to give them ideas how to do that

882
00:38:39,300 --> 00:38:41,940
and for the global conclusions that

883
00:38:41,940 --> 00:38:43,859
golang is gaining even more popularity

884
00:38:43,859 --> 00:38:46,680
among cyber criminals so we could see

885
00:38:46,680 --> 00:38:48,660
that not only we Transformer samples and

886
00:38:48,660 --> 00:38:50,640
Transformer families but with malware in

887
00:38:50,640 --> 00:38:52,200
general

888
00:38:52,200 --> 00:38:54,660
the tooling was improving over the years

889
00:38:54,660 --> 00:38:57,060
but we would say that it's still being

890
00:38:57,060 --> 00:39:00,599
far from ideal for example in Ida you

891
00:39:00,599 --> 00:39:02,880
still have to do a lot of manual work

892
00:39:02,880 --> 00:39:05,339
because sometimes because of the either

893
00:39:05,339 --> 00:39:08,880
the seagull or the go detection some of

894
00:39:08,880 --> 00:39:10,680
the code sections are about part of the

895
00:39:10,680 --> 00:39:12,359
code section won't be recognized as code

896
00:39:12,359 --> 00:39:14,940
so if you kind of try to resolve that

897
00:39:14,940 --> 00:39:17,520
this alarm tab first then you might end

898
00:39:17,520 --> 00:39:20,280
up not having all the code result if you

899
00:39:20,280 --> 00:39:22,079
do that later then you have to start a

900
00:39:22,079 --> 00:39:24,359
game so there is a lot of manual work

901
00:39:24,359 --> 00:39:26,339
still needed if you want to have like

902
00:39:26,339 --> 00:39:29,099
the same quality of an idb file than you

903
00:39:29,099 --> 00:39:32,700
had before V3 VC or C plus plus

904
00:39:32,700 --> 00:39:35,099
unfortunately companies are still paying

905
00:39:35,099 --> 00:39:38,339
the ransom that's more not because of

906
00:39:38,339 --> 00:39:39,839
the encryption and the backup so we know

907
00:39:39,839 --> 00:39:42,079
that it's more about the the data itself

908
00:39:42,079 --> 00:39:45,000
excitation part because they are having

909
00:39:45,000 --> 00:39:46,619
that fear that the data is going to be

910
00:39:46,619 --> 00:39:48,540
leaked to the internet what they don't

911
00:39:48,540 --> 00:39:51,000
know is whether the the criminals are

912
00:39:51,000 --> 00:39:53,220
actually going to sell their data in a

913
00:39:53,220 --> 00:39:55,560
silent way so there is absolutely no

914
00:39:55,560 --> 00:39:58,560
guarantee and as long as they are paying

915
00:39:58,560 --> 00:40:00,660
they are still keeping the ransomware

916
00:40:00,660 --> 00:40:02,940
ecosystem very much alive

917
00:40:02,940 --> 00:40:04,680
and for the last

918
00:40:04,680 --> 00:40:07,320
basically it's all saying if something

919
00:40:07,320 --> 00:40:09,300
looks like a ransomware and acts like

920
00:40:09,300 --> 00:40:11,400
around somewhere then we can have a safe

921
00:40:11,400 --> 00:40:13,980
assumption that it's run somewhere the

922
00:40:13,980 --> 00:40:15,660
key thing here is that you shall be

923
00:40:15,660 --> 00:40:18,119
having a security solution which is

924
00:40:18,119 --> 00:40:21,119
having those two specific features with

925
00:40:21,119 --> 00:40:23,760
self-protection and 2fa self-protection

926
00:40:23,760 --> 00:40:25,920
that running a couple of Powershell

927
00:40:25,920 --> 00:40:28,320
scripts with killing processes won't be

928
00:40:28,320 --> 00:40:31,020
able to stop your security solution and

929
00:40:31,020 --> 00:40:33,359
2fa for the reason that if you have like

930
00:40:33,359 --> 00:40:35,760
a cloud-based ones no one can log in

931
00:40:35,760 --> 00:40:37,859
into it like the admin console and just

932
00:40:37,859 --> 00:40:39,900
uninstall the product because then it

933
00:40:39,900 --> 00:40:42,839
will be just as good as without having

934
00:40:42,839 --> 00:40:45,060
any protection on your PC

935
00:40:45,060 --> 00:40:47,700
and with that that's all for today

936
00:40:47,700 --> 00:40:51,078
do you have any questions

937
00:40:56,339 --> 00:40:58,500
all right then thank you everyone thank

938
00:40:58,500 --> 00:41:00,740
you guys

939
00:41:02,970 --> 00:41:06,890
[Applause]

940
00:41:07,260 --> 00:41:08,940
thank you Robert thank you Albert for

941
00:41:08,940 --> 00:41:11,579
that captivating presentation

942
00:41:11,579 --> 00:41:13,380
um we'll be starting up again in two or

943
00:41:13,380 --> 00:41:16,880
three minutes with our next

