1
00:00:00,420 --> 00:00:03,120
and without further Ado we're ready now

2
00:00:03,120 --> 00:00:06,000
for the first double Act of the day

3
00:00:06,000 --> 00:00:07,880
um let me introduce you to Mr Kurt

4
00:00:07,880 --> 00:00:13,639
Baumgartner and Georgie coutoon

5
00:00:13,700 --> 00:00:16,800
all right thank you guys

6
00:00:16,800 --> 00:00:19,440
uh first off thanks for attending our

7
00:00:19,440 --> 00:00:22,680
talk and uh thank you to activity for

8
00:00:22,680 --> 00:00:24,720
having us my name is Kurt Baumgartner

9
00:00:24,720 --> 00:00:26,880
I'm a principal security researcher with

10
00:00:26,880 --> 00:00:29,099
kaspersky's Global Research analysis

11
00:00:29,099 --> 00:00:31,140
team I've been a part of the team since

12
00:00:31,140 --> 00:00:34,320
2010 working and living out of Boulder

13
00:00:34,320 --> 00:00:36,660
Colorado and this is my friend and

14
00:00:36,660 --> 00:00:39,719
colleague Georgie kochiran

15
00:00:39,719 --> 00:00:41,640
yeah I'm also part of the Global

16
00:00:41,640 --> 00:00:44,040
Research and Analysis team but I joined

17
00:00:44,040 --> 00:00:46,860
not so long ago about two years ago when

18
00:00:46,860 --> 00:00:50,280
I became 18 and uh and great I'm working

19
00:00:50,280 --> 00:00:54,000
at analyzing complex stress I've done

20
00:00:54,000 --> 00:00:57,660
research on the solarwinds attack on the

21
00:00:57,660 --> 00:01:01,440
Phil Fisher a commercial spyware and I

22
00:01:01,440 --> 00:01:02,699
do a lot of reverse engineering of

23
00:01:02,699 --> 00:01:06,060
Target stress and uh I like my malware

24
00:01:06,060 --> 00:01:08,400
analysis a lot

25
00:01:08,400 --> 00:01:11,520
all right yeah thanks kurgi all right so

26
00:01:11,520 --> 00:01:13,560
uh today we're here to talk about uh

27
00:01:13,560 --> 00:01:15,900
particularly interesting threat group

28
00:01:15,900 --> 00:01:18,960
that we've called diceyf

29
00:01:18,960 --> 00:01:21,299
um the story here really has to do with

30
00:01:21,299 --> 00:01:23,580
the targeting of online casino

31
00:01:23,580 --> 00:01:25,860
development Studios and operations

32
00:01:25,860 --> 00:01:29,100
Studios which makes this a really a

33
00:01:29,100 --> 00:01:32,179
pretty interesting subject

34
00:01:32,400 --> 00:01:35,820
so uh first off the The Who what is the

35
00:01:35,820 --> 00:01:37,799
who the who and what so who maintains

36
00:01:37,799 --> 00:01:40,320
continuous acts unauthorized access to

37
00:01:40,320 --> 00:01:42,540
online casinos uh development

38
00:01:42,540 --> 00:01:45,000
environments and operations

39
00:01:45,000 --> 00:01:47,520
um it's a group that's that's known

40
00:01:47,520 --> 00:01:49,140
actually for quite some time they've

41
00:01:49,140 --> 00:01:52,140
been operational uh some vendors claim

42
00:01:52,140 --> 00:01:53,820
that they've been operational for almost

43
00:01:53,820 --> 00:01:55,500
a decade

44
00:01:55,500 --> 00:01:58,500
um but uh while we were performing this

45
00:01:58,500 --> 00:02:01,259
particular incident uh research Trend

46
00:02:01,259 --> 00:02:04,079
Micro came forward with uh a talk at bot

47
00:02:04,079 --> 00:02:06,060
conf and they called this particular

48
00:02:06,060 --> 00:02:09,660
group Earth berberoca or gambling puppet

49
00:02:09,660 --> 00:02:12,000
as they're also known and there's a

50
00:02:12,000 --> 00:02:13,800
previous operation from this group

51
00:02:13,800 --> 00:02:16,220
called operation drb control

52
00:02:16,220 --> 00:02:19,080
other vendors call them unknown they

53
00:02:19,080 --> 00:02:20,819
they don't have a name for this cluster

54
00:02:20,819 --> 00:02:22,739
because it's changing and it's such an

55
00:02:22,739 --> 00:02:24,300
unusual cluster of activity and

56
00:02:24,300 --> 00:02:26,400
resources but we're going to stick with

57
00:02:26,400 --> 00:02:28,440
the name diceyf

58
00:02:28,440 --> 00:02:30,720
um for reasons that we'll get to in a

59
00:02:30,720 --> 00:02:32,099
second

60
00:02:32,099 --> 00:02:34,080
uh so when you're talking about casinos

61
00:02:34,080 --> 00:02:37,200
and and targeting casinos it I have

62
00:02:37,200 --> 00:02:40,020
these Grand visions of Ocean's 11 style

63
00:02:40,020 --> 00:02:42,780
attacks and all this and uh really is

64
00:02:42,780 --> 00:02:45,080
that what we have do we have Clooney pit

65
00:02:45,080 --> 00:02:48,720
uh Duos going after casinos and the

66
00:02:48,720 --> 00:02:50,160
answer is no

67
00:02:50,160 --> 00:02:52,560
it's still really interesting stuff so

68
00:02:52,560 --> 00:02:55,379
the trend guys at bot conf they also

69
00:02:55,379 --> 00:02:56,940
said that there's no evidence of a

70
00:02:56,940 --> 00:02:59,819
financial motivation even though these

71
00:02:59,819 --> 00:03:02,400
guys have been doing this for years now

72
00:03:02,400 --> 00:03:04,440
um they've been supporting their own

73
00:03:04,440 --> 00:03:06,239
custom back doors malware families

74
00:03:06,239 --> 00:03:08,160
they've been going after casinos for

75
00:03:08,160 --> 00:03:11,099
quite some time in the incidents that

76
00:03:11,099 --> 00:03:13,739
Trend looked into they found that there

77
00:03:13,739 --> 00:03:15,959
was exfiltration they did observe some

78
00:03:15,959 --> 00:03:17,879
but it was source code and customer

79
00:03:17,879 --> 00:03:21,360
databases which might tell you about an

80
00:03:21,360 --> 00:03:25,739
interest in money moving customers in

81
00:03:25,739 --> 00:03:27,659
particular the incident we're looking at

82
00:03:27,659 --> 00:03:30,319
has to do with

83
00:03:30,319 --> 00:03:32,940
organizations in Hong Kong and Southeast

84
00:03:32,940 --> 00:03:36,540
Asia very similar to what trend saw

85
00:03:36,540 --> 00:03:38,400
so first off what sparked our interest

86
00:03:38,400 --> 00:03:41,400
in these guys it was an unusual delivery

87
00:03:41,400 --> 00:03:43,799
of plug X of all things

88
00:03:43,799 --> 00:03:46,140
um but it was signed with a what looked

89
00:03:46,140 --> 00:03:48,299
like a stolen certificate and the stolen

90
00:03:48,299 --> 00:03:50,580
certificate had to do with a secure

91
00:03:50,580 --> 00:03:52,799
messaging client a pretty obscure one

92
00:03:52,799 --> 00:03:54,780
mango

93
00:03:54,780 --> 00:03:57,239
and this is interesting because past

94
00:03:57,239 --> 00:04:00,239
operations gambling puppet according to

95
00:04:00,239 --> 00:04:02,180
trend has been using

96
00:04:02,180 --> 00:04:06,540
other clients to deliver plugx and orat

97
00:04:06,540 --> 00:04:07,819
to Mac OS

98
00:04:07,819 --> 00:04:10,620
and the other interesting thing is that

99
00:04:10,620 --> 00:04:14,580
this plugx delivery was through a

100
00:04:14,580 --> 00:04:16,798
there was an employee monitoring system

101
00:04:16,798 --> 00:04:19,260
and then there was also a security

102
00:04:19,260 --> 00:04:22,019
Center distribution so the installer

103
00:04:22,019 --> 00:04:23,699
itself was signed with this stolen

104
00:04:23,699 --> 00:04:25,500
certificate and then it was sent out

105
00:04:25,500 --> 00:04:27,900
within an organization from a security

106
00:04:27,900 --> 00:04:30,900
Center uh distribution service so they

107
00:04:30,900 --> 00:04:33,600
had access to everything

108
00:04:33,600 --> 00:04:37,139
and then finally there's a.net file that

109
00:04:37,139 --> 00:04:40,320
maybe a week after we initially saw

110
00:04:40,320 --> 00:04:41,540
plugx

111
00:04:41,540 --> 00:04:44,940
at the within this environment that had

112
00:04:44,940 --> 00:04:47,220
a bizarre pdb and

113
00:04:47,220 --> 00:04:49,460
uh it was signed with the same

114
00:04:49,460 --> 00:04:52,440
potentially stolen digital certificate

115
00:04:52,440 --> 00:04:55,740
and you'll see down here their pdbs are

116
00:04:55,740 --> 00:04:58,380
pretty explanatory as far as development

117
00:04:58,380 --> 00:05:01,320
goes and the functionality and sort of

118
00:05:01,320 --> 00:05:04,320
style of of these Developers

119
00:05:04,320 --> 00:05:06,320
so that certainly sparked our interest

120
00:05:06,320 --> 00:05:08,460
another thing that sparked our interest

121
00:05:08,460 --> 00:05:11,040
is that uh this game player framework

122
00:05:11,040 --> 00:05:13,380
downloader was calling back to the same

123
00:05:13,380 --> 00:05:16,080
command and control server as the signed

124
00:05:16,080 --> 00:05:17,180
plug X

125
00:05:17,180 --> 00:05:21,000
payload that was delivered to this

126
00:05:21,000 --> 00:05:24,180
customer maybe a week prior they were

127
00:05:24,180 --> 00:05:27,000
using mango.exe this secure messaging

128
00:05:27,000 --> 00:05:30,419
client file name they were using the

129
00:05:30,419 --> 00:05:32,520
digital certificate and they were using

130
00:05:32,520 --> 00:05:33,840
the file name so they were really trying

131
00:05:33,840 --> 00:05:36,960
to spoof this secure messaging Client

132
00:05:36,960 --> 00:05:38,220
app

133
00:05:38,220 --> 00:05:40,139
um and then finally it's interesting

134
00:05:40,139 --> 00:05:41,699
that there are all these puppet loader

135
00:05:41,699 --> 00:05:44,280
strings within the pdb pdb files

136
00:05:44,280 --> 00:05:46,080
themselves

137
00:05:46,080 --> 00:05:49,199
um so with that uh those dot net objects

138
00:05:49,199 --> 00:05:51,060
that we're talking about the game player

139
00:05:51,060 --> 00:05:53,699
framework itself will dig into uh or

140
00:05:53,699 --> 00:05:56,220
geergy will dig into technical details

141
00:05:56,220 --> 00:05:59,000
of that framework

142
00:05:59,100 --> 00:06:02,759
okay thank you good so uh uh one could

143
00:06:02,759 --> 00:06:04,440
discover those gameplay of framework

144
00:06:04,440 --> 00:06:06,300
samples he gave them to me to reverse

145
00:06:06,300 --> 00:06:10,220
engineer and so I had to

146
00:06:10,220 --> 00:06:13,080
dive into this malware framework and

147
00:06:13,080 --> 00:06:15,720
analyze it and while doing it I found

148
00:06:15,720 --> 00:06:17,280
many interesting things that I want to

149
00:06:17,280 --> 00:06:18,900
show you right now

150
00:06:18,900 --> 00:06:22,680
so first of all when you have this a

151
00:06:22,680 --> 00:06:24,660
large collection of files a large

152
00:06:24,660 --> 00:06:26,039
collection of malware samples that

153
00:06:26,039 --> 00:06:27,780
belong to the framework the first thing

154
00:06:27,780 --> 00:06:29,340
that you do is called basic static

155
00:06:29,340 --> 00:06:30,419
analysis

156
00:06:30,419 --> 00:06:34,139
you just look at the files in general to

157
00:06:34,139 --> 00:06:37,680
find some uh interesting artifacts and

158
00:06:37,680 --> 00:06:39,780
in our case such an artifact as good has

159
00:06:39,780 --> 00:06:43,020
already mentioned it was a pdb pass

160
00:06:43,020 --> 00:06:45,240
pgb paths they are important for malware

161
00:06:45,240 --> 00:06:48,360
analysis because this paths contain a

162
00:06:48,360 --> 00:06:51,240
pass to the folder where the source code

163
00:06:51,240 --> 00:06:53,280
of the malware is located

164
00:06:53,280 --> 00:06:56,100
and we can use those pdb paths for

165
00:06:56,100 --> 00:06:57,840
malware attribution

166
00:06:57,840 --> 00:07:01,440
for example so in our case the pdb pass

167
00:07:01,440 --> 00:07:03,840
contained a string called gameplay

168
00:07:03,840 --> 00:07:06,780
framework and they were also in this

169
00:07:06,780 --> 00:07:08,940
gameplay play a framework folders there

170
00:07:08,940 --> 00:07:11,280
were two subfolders they're called Tifa

171
00:07:11,280 --> 00:07:15,900
and Yuna and uh we believe that FIFA and

172
00:07:15,900 --> 00:07:18,240
Yuna are kind of a branches so there is

173
00:07:18,240 --> 00:07:19,680
a gameplay framework and there are two

174
00:07:19,680 --> 00:07:21,900
branches out of it the thief one and the

175
00:07:21,900 --> 00:07:23,400
unit one

176
00:07:23,400 --> 00:07:26,400
and when I saw the speed we pass I

177
00:07:26,400 --> 00:07:28,620
immediately wanted to know what Tifa and

178
00:07:28,620 --> 00:07:31,740
hula is as I have already said PDP pass

179
00:07:31,740 --> 00:07:33,240
can be helpful in the attribution like

180
00:07:33,240 --> 00:07:36,780
for example you can find uh the name and

181
00:07:36,780 --> 00:07:39,000
the last name of the malware developer

182
00:07:39,000 --> 00:07:41,880
if you're lucky enough so I needed to

183
00:07:41,880 --> 00:07:45,060
find what Tifa and Yoona was

184
00:07:45,060 --> 00:07:48,240
so I first suppose that it was a

185
00:07:48,240 --> 00:07:49,979
different Universe some words in the

186
00:07:49,979 --> 00:07:53,160
Marvel developers mother tongue but when

187
00:07:53,160 --> 00:07:56,580
I looked at uh something that it could

188
00:07:56,580 --> 00:07:58,440
connect different humor together I found

189
00:07:58,440 --> 00:08:03,240
the game final fantasy and Tifa and Yuna

190
00:08:03,240 --> 00:08:06,419
are female characters from this game so

191
00:08:06,419 --> 00:08:09,180
this means the presence of these folders

192
00:08:09,180 --> 00:08:11,340
could mean that

193
00:08:11,340 --> 00:08:14,400
uh the malware developer is a fan of

194
00:08:14,400 --> 00:08:18,180
Final Fantasy and he may have left those

195
00:08:18,180 --> 00:08:20,639
folders as an Easter egg for us malware

196
00:08:20,639 --> 00:08:21,720
analysts

197
00:08:21,720 --> 00:08:24,419
and as for the branches themselves the

198
00:08:24,419 --> 00:08:27,199
Tifa Branch we spotted it first in

199
00:08:27,199 --> 00:08:32,580
November 2021. but then in 2022 the euro

200
00:08:32,580 --> 00:08:33,719
is a default Branch completely

201
00:08:33,719 --> 00:08:36,719
disappeared and was replaced with the

202
00:08:36,719 --> 00:08:40,380
unit Branch so we may suppose that the

203
00:08:40,380 --> 00:08:42,299
zipper branch is just an older version

204
00:08:42,299 --> 00:08:45,480
of a gameplay framework and Euler branch

205
00:08:45,480 --> 00:08:49,399
is a new version of the framework

206
00:08:50,180 --> 00:08:55,440
so then I had to find the uh among these

207
00:08:55,440 --> 00:08:58,260
uh many files of the framework I had to

208
00:08:58,260 --> 00:09:01,560
find how the infection started I looked

209
00:09:01,560 --> 00:09:03,420
for the files I looked through our

210
00:09:03,420 --> 00:09:06,240
antivirus Telemetry and I found out

211
00:09:06,240 --> 00:09:08,700
something that looked like an installer

212
00:09:08,700 --> 00:09:11,100
of the framework

213
00:09:11,100 --> 00:09:13,380
and while browsing through Telemetry I

214
00:09:13,380 --> 00:09:16,680
found out that uh this is installer was

215
00:09:16,680 --> 00:09:18,660
distributed through the victim

216
00:09:18,660 --> 00:09:21,360
organization Network so what happened is

217
00:09:21,360 --> 00:09:23,640
that the attackers they compromise the

218
00:09:23,640 --> 00:09:26,820
victim Network and after doing that they

219
00:09:26,820 --> 00:09:29,100
started deploying the framework over the

220
00:09:29,100 --> 00:09:31,260
machine so this framework is used as a

221
00:09:31,260 --> 00:09:33,060
post exploitation framework

222
00:09:33,060 --> 00:09:35,519
and what was interesting about the

223
00:09:35,519 --> 00:09:39,000
installer is that they didn't look like

224
00:09:39,000 --> 00:09:41,279
a common targeted malware installer

225
00:09:41,279 --> 00:09:43,440
usually if you are a sophisticated

226
00:09:43,440 --> 00:09:45,300
straight actor and you want to deploy

227
00:09:45,300 --> 00:09:47,580
malware to victim machines you try to do

228
00:09:47,580 --> 00:09:50,880
it as silently as invisibly as subtly as

229
00:09:50,880 --> 00:09:54,120
possible so that no one notices anything

230
00:09:54,120 --> 00:09:57,300
but in our case everything was vice

231
00:09:57,300 --> 00:09:58,680
versa

232
00:09:58,680 --> 00:10:02,880
and uh when I open the installer in the

233
00:10:02,880 --> 00:10:06,360
decompiler I noticed that it has a

234
00:10:06,360 --> 00:10:07,920
graphical interface which is very

235
00:10:07,920 --> 00:10:11,880
uncommon so they display to the user a

236
00:10:11,880 --> 00:10:14,480
fake window and

237
00:10:14,480 --> 00:10:16,800
while that is playing it they are

238
00:10:16,800 --> 00:10:18,660
installing malware

239
00:10:18,660 --> 00:10:22,800
and if you are doing graphical uh uh

240
00:10:22,800 --> 00:10:25,080
installer malware graphical interface

241
00:10:25,080 --> 00:10:27,779
model installers there is a problem you

242
00:10:27,779 --> 00:10:29,459
need to convince the user that your

243
00:10:29,459 --> 00:10:31,500
window is legitimate so that the user

244
00:10:31,500 --> 00:10:33,120
doesn't suspect everything and go to the

245
00:10:33,120 --> 00:10:35,880
I it department and cry oh I mean

246
00:10:35,880 --> 00:10:37,200
 with malware

247
00:10:37,200 --> 00:10:39,360
in order to do that in order to do in

248
00:10:39,360 --> 00:10:41,519
order to prevent that the attackers used

249
00:10:41,519 --> 00:10:45,120
social engineering let's look at the

250
00:10:45,120 --> 00:10:48,180
window that they display in it there are

251
00:10:48,180 --> 00:10:50,339
some interesting strings let's look at

252
00:10:50,339 --> 00:10:53,640
here mango account data synchronizer

253
00:10:53,640 --> 00:10:56,339
devoted to the victim organization name

254
00:10:56,339 --> 00:11:00,180
so what they did is that they uh they

255
00:11:00,180 --> 00:11:01,560
know what victims they are compromising

256
00:11:01,560 --> 00:11:03,959
they included the victim organization

257
00:11:03,959 --> 00:11:07,620
name in this in in the strings in the

258
00:11:07,620 --> 00:11:09,120
window

259
00:11:09,120 --> 00:11:12,600
and another thing they did let's look at

260
00:11:12,600 --> 00:11:15,540
the other string employee accounts need

261
00:11:15,540 --> 00:11:18,899
to be bound with IP addresses please go

262
00:11:18,899 --> 00:11:21,480
to the 10th floor to find the IT

263
00:11:21,480 --> 00:11:24,600
department to build so they did not only

264
00:11:24,600 --> 00:11:26,700
discover the victim organization name

265
00:11:26,700 --> 00:11:30,300
they also conducted research conducted

266
00:11:30,300 --> 00:11:32,060
reconnaissance on the victim's office

267
00:11:32,060 --> 00:11:36,180
and they found out the floor where the

268
00:11:36,180 --> 00:11:38,579
ID department is located

269
00:11:38,579 --> 00:11:41,700
and when a usual user like a person who

270
00:11:41,700 --> 00:11:43,399
is not very familiar with cyber security

271
00:11:43,399 --> 00:11:46,200
when an ordinary uses sees this window

272
00:11:46,200 --> 00:11:49,920
they may simply think that uh

273
00:11:49,920 --> 00:11:51,480
oh it's something from the it

274
00:11:51,480 --> 00:11:54,660
departments they say where uh the IIT

275
00:11:54,660 --> 00:11:56,519
Department Floyd they have my

276
00:11:56,519 --> 00:11:58,800
organization name so yes that's truly

277
00:11:58,800 --> 00:12:00,839
legitimate that's not malware that's

278
00:12:00,839 --> 00:12:03,300
what an ordinary user could think

279
00:12:03,300 --> 00:12:06,300
but in my opinion such uh reconnaissance

280
00:12:06,300 --> 00:12:08,579
they research the victim organization

281
00:12:08,579 --> 00:12:10,380
floor plans they found out where the IT

282
00:12:10,380 --> 00:12:11,820
department is

283
00:12:11,820 --> 00:12:14,160
such reconnaissance is not common for

284
00:12:14,160 --> 00:12:17,220
Target malware and I think it's uh

285
00:12:17,220 --> 00:12:20,160
really amazing

286
00:12:20,160 --> 00:12:23,880
so what this installer does is that it

287
00:12:23,880 --> 00:12:26,100
writes the framework files to the

288
00:12:26,100 --> 00:12:28,380
system32 folder this is the first thing

289
00:12:28,380 --> 00:12:31,560
it does and then it for some reason

290
00:12:31,560 --> 00:12:34,079
creates copies of system dlls inside

291
00:12:34,079 --> 00:12:37,920
system inside system2 folder and after

292
00:12:37,920 --> 00:12:40,220
doing that it establishes persistence

293
00:12:40,220 --> 00:12:42,839
now writing files and establishing

294
00:12:42,839 --> 00:12:45,600
persistence are really common thing for

295
00:12:45,600 --> 00:12:47,519
malware installers but what about

296
00:12:47,519 --> 00:12:49,920
creating copies of system dlls why would

297
00:12:49,920 --> 00:12:52,620
you need to duplicate dlls

298
00:12:52,620 --> 00:12:56,160
let's look at the step in more detail

299
00:12:56,160 --> 00:12:58,200
like in system32 folder we have the

300
00:12:58,200 --> 00:13:00,839
system dlls like kernel Studio dll

301
00:13:00,839 --> 00:13:04,320
ADV API subject to dll and uses it to

302
00:13:04,320 --> 00:13:05,279
the dll

303
00:13:05,279 --> 00:13:07,680
what the malware does is it copies these

304
00:13:07,680 --> 00:13:11,459
dlls and other dlls to the same folder

305
00:13:11,459 --> 00:13:13,560
but it adds an ads to the name like

306
00:13:13,560 --> 00:13:16,019
kernel 32 dll becomes kernel Associated

307
00:13:16,019 --> 00:13:19,139
to s.dll and user32.dr becomes

308
00:13:19,139 --> 00:13:21,899
user32s.dll

309
00:13:21,899 --> 00:13:24,360
but why would you need to do that it

310
00:13:24,360 --> 00:13:26,160
turns out that the framework components

311
00:13:26,160 --> 00:13:28,079
it reference it doesn't reference the

312
00:13:28,079 --> 00:13:30,720
original dlls it references copies of

313
00:13:30,720 --> 00:13:32,760
the dlls like it Imports function from

314
00:13:32,760 --> 00:13:35,279
the S functions

315
00:13:35,279 --> 00:13:37,200
there may be two possible explanations

316
00:13:37,200 --> 00:13:40,740
about of about why they do that

317
00:13:40,740 --> 00:13:42,360
the first thing that they wanted to

318
00:13:42,360 --> 00:13:45,600
prevent is to prevent analyzing the

319
00:13:45,600 --> 00:13:48,480
malware in a sandbox let's suppose that

320
00:13:48,480 --> 00:13:51,000
you are a security operations center

321
00:13:51,000 --> 00:13:53,880
analyst and you have some suspicious

322
00:13:53,880 --> 00:13:55,260
activity going on

323
00:13:55,260 --> 00:13:59,339
you notice the uh the the files that

324
00:13:59,339 --> 00:14:01,440
belong to the malware framework but at

325
00:14:01,440 --> 00:14:02,880
this point of time you don't know

326
00:14:02,880 --> 00:14:05,279
whether they are malicious or not in

327
00:14:05,279 --> 00:14:07,139
order to find that out you want to take

328
00:14:07,139 --> 00:14:09,180
those files and plug them into the

329
00:14:09,180 --> 00:14:12,360
sandbox and see what the sandbox thinks

330
00:14:12,360 --> 00:14:14,700
and when you do that the sandbox will

331
00:14:14,700 --> 00:14:16,680
refuse to load the files because the

332
00:14:16,680 --> 00:14:18,720
sandbox if you don't have the installer

333
00:14:18,720 --> 00:14:21,500
if you have only the framework files uh

334
00:14:21,500 --> 00:14:24,000
the sandbox is going to contain only

335
00:14:24,000 --> 00:14:28,079
original dlls it won't contain sdlls and

336
00:14:28,079 --> 00:14:30,480
that is why execution on a Sandbox would

337
00:14:30,480 --> 00:14:32,660
fail and there would be

338
00:14:32,660 --> 00:14:35,820
no information about the samples

339
00:14:35,820 --> 00:14:40,380
and another thing that uh is possible is

340
00:14:40,380 --> 00:14:42,660
that they wanted to evade extended

341
00:14:42,660 --> 00:14:44,699
detection and response Solutions or

342
00:14:44,699 --> 00:14:46,560
other Security Solutions

343
00:14:46,560 --> 00:14:49,500
Security Solutions like to set hooks on

344
00:14:49,500 --> 00:14:53,459
dlls they need that in order to uh

345
00:14:53,459 --> 00:14:55,620
intercept cost of functions and to track

346
00:14:55,620 --> 00:14:59,699
which function is called and then

347
00:14:59,699 --> 00:15:02,699
correlates uh called functions with some

348
00:15:02,699 --> 00:15:04,380
rules in order to detect malicious

349
00:15:04,380 --> 00:15:05,579
activity

350
00:15:05,579 --> 00:15:10,019
but EDR solutions they may not set hooks

351
00:15:10,019 --> 00:15:12,779
on the copies they may only send hooks

352
00:15:12,779 --> 00:15:15,839
on the original functions and thus when

353
00:15:15,839 --> 00:15:18,300
the malware will call a function from

354
00:15:18,300 --> 00:15:20,339
the copy it will not get logged in the

355
00:15:20,339 --> 00:15:22,680
EDR and the malware will be able to

356
00:15:22,680 --> 00:15:26,519
perform the activity in a silent way

357
00:15:26,519 --> 00:15:29,940
so that's it for the copying and now

358
00:15:29,940 --> 00:15:32,399
it's all persistence techniques they

359
00:15:32,399 --> 00:15:34,800
always change them probably in order to

360
00:15:34,800 --> 00:15:38,760
make it harder to detect the samples

361
00:15:38,760 --> 00:15:41,699
in the very beginning 2021 we saw some

362
00:15:41,699 --> 00:15:44,459
distributes using the services they

363
00:15:44,459 --> 00:15:46,620
created the service and they configured

364
00:15:46,620 --> 00:15:49,320
it to load on Startup the service names

365
00:15:49,320 --> 00:15:51,779
were called certificate manager and

366
00:15:51,779 --> 00:15:53,820
 update

367
00:15:53,820 --> 00:15:56,399
then they switch to schedule tasks that

368
00:15:56,399 --> 00:15:58,260
had the same names certificate manager

369
00:15:58,260 --> 00:16:01,019
and update

370
00:16:01,019 --> 00:16:03,360
and after that they switch to another

371
00:16:03,360 --> 00:16:06,740
trick which involved a

372
00:16:06,740 --> 00:16:10,560
copying a dll called uh rest custom as

373
00:16:10,560 --> 00:16:13,740
the dll and then putting the passwords

374
00:16:13,740 --> 00:16:17,399
dll in a key belonging to the harassment

375
00:16:17,399 --> 00:16:19,560
service harassment service is a standard

376
00:16:19,560 --> 00:16:21,420
service that comes with Windows

377
00:16:21,420 --> 00:16:23,940
and if you specify the password custom

378
00:16:23,940 --> 00:16:26,639
as those dll the erasmine servers will

379
00:16:26,639 --> 00:16:28,079
loaded on Startup

380
00:16:28,079 --> 00:16:30,000
why so why is this strict with erasmal

381
00:16:30,000 --> 00:16:32,579
service and the same dll rest custom as

382
00:16:32,579 --> 00:16:36,120
it has been previously used by the

383
00:16:36,120 --> 00:16:39,019
manuscript Strat actor which is a Korean

384
00:16:39,019 --> 00:16:43,019
speaking threat actor but uh

385
00:16:43,019 --> 00:16:46,620
for now we think that they simply the

386
00:16:46,620 --> 00:16:49,380
dicef they simply borrow this trick from

387
00:16:49,380 --> 00:16:53,160
a manuscript and uh that is why we

388
00:16:53,160 --> 00:16:54,600
cannot perform attribution based on this

389
00:16:54,600 --> 00:16:57,180
trick but still the number of decision

390
00:16:57,180 --> 00:16:59,339
techniques is very vast they always

391
00:16:59,339 --> 00:17:01,259
change it in order to avoid being

392
00:17:01,259 --> 00:17:03,860
detected

393
00:17:04,740 --> 00:17:07,980
so when you establish persistence every

394
00:17:07,980 --> 00:17:09,660
time when the victim machine starts up

395
00:17:09,660 --> 00:17:12,419
the framework will be launched

396
00:17:12,419 --> 00:17:16,020
and earlier we saw an anti-sandbox trick

397
00:17:16,020 --> 00:17:19,799
that involved copying uh dlls but on

398
00:17:19,799 --> 00:17:22,079
Startup there are actually more such

399
00:17:22,079 --> 00:17:23,579
tricks performed

400
00:17:23,579 --> 00:17:27,000
like uh take this trick for example it's

401
00:17:27,000 --> 00:17:28,919
kind of uncommon trick

402
00:17:28,919 --> 00:17:30,900
what the malware does is that it

403
00:17:30,900 --> 00:17:34,620
allocates 10 chunks of memory and each

404
00:17:34,620 --> 00:17:38,820
of these chunks is 50 megabytes in large

405
00:17:38,820 --> 00:17:42,360
so in total the malware allocates 500

406
00:17:42,360 --> 00:17:43,799
megabytes

407
00:17:43,799 --> 00:17:47,100
and then it starts filling each of these

408
00:17:47,100 --> 00:17:48,840
chunks with data

409
00:17:48,840 --> 00:17:52,020
and after writing the data the malware

410
00:17:52,020 --> 00:17:54,419
reads it back from memory and checks

411
00:17:54,419 --> 00:17:57,480
that the data is in place now the trick

412
00:17:57,480 --> 00:18:00,240
here is the sandboxes and emulators they

413
00:18:00,240 --> 00:18:02,700
may not handle large amounts of memory

414
00:18:02,700 --> 00:18:06,720
correctly like 500 megabytes for uh for

415
00:18:06,720 --> 00:18:08,880
example a Sandbox or an emulator that

416
00:18:08,880 --> 00:18:11,340
has one gigabyte of memory is kind of

417
00:18:11,340 --> 00:18:12,179
large

418
00:18:12,179 --> 00:18:15,780
and that is why uh as a Sandbox or an

419
00:18:15,780 --> 00:18:19,260
emulator May incorrectly handle writing

420
00:18:19,260 --> 00:18:22,320
stuff to large amounts of memory and

421
00:18:22,320 --> 00:18:24,179
maybe the writing will fail or maybe

422
00:18:24,179 --> 00:18:26,280
something else will happen the malware

423
00:18:26,280 --> 00:18:29,460
tries to detect uh such exceptions and

424
00:18:29,460 --> 00:18:32,520
if it detects such an anomaly then it

425
00:18:32,520 --> 00:18:34,320
stops executing

426
00:18:34,320 --> 00:18:38,100
and another trick is it involves setting

427
00:18:38,100 --> 00:18:40,380
an error value on Windows through the

428
00:18:40,380 --> 00:18:42,960
setlist error function and then it

429
00:18:42,960 --> 00:18:44,400
retrieves it back using the get last

430
00:18:44,400 --> 00:18:46,679
error function and then it checks that

431
00:18:46,679 --> 00:18:49,020
the two values the set one and the one

432
00:18:49,020 --> 00:18:50,880
that has been retrieved from get less

433
00:18:50,880 --> 00:18:53,160
error it checks that the values are

434
00:18:53,160 --> 00:18:55,320
equal and if they are not the malware

435
00:18:55,320 --> 00:18:57,840
stops running

436
00:18:57,840 --> 00:19:02,400
so uh these are quite in my opinion uh

437
00:19:02,400 --> 00:19:04,320
cool position tricks uh cool

438
00:19:04,320 --> 00:19:07,140
anti-sandbox tricks that are not seen in

439
00:19:07,140 --> 00:19:09,480
common malware especially the one with

440
00:19:09,480 --> 00:19:11,220
the 50 megabytes maybe they wanted to

441
00:19:11,220 --> 00:19:14,760
bypass some kind of uh EDR sandbox that

442
00:19:14,760 --> 00:19:17,100
is not handling large amounts of memory

443
00:19:17,100 --> 00:19:19,380
correctly so the presence of these

444
00:19:19,380 --> 00:19:22,500
tricks it basically proves that malware

445
00:19:22,500 --> 00:19:25,260
developers are able to adapt to Security

446
00:19:25,260 --> 00:19:27,299
Solutions installed the victim machines

447
00:19:27,299 --> 00:19:31,440
and as they are able to create some

448
00:19:31,440 --> 00:19:35,179
things that would help bypass them

449
00:19:35,640 --> 00:19:38,400
so if all these anti-sandbox checks are

450
00:19:38,400 --> 00:19:41,640
complete uh the framework loads its main

451
00:19:41,640 --> 00:19:45,240
module and the main module is a.net file

452
00:19:45,240 --> 00:19:47,580
and on Startup it loads its

453
00:19:47,580 --> 00:19:50,880
configuration from a folder in C program

454
00:19:50,880 --> 00:19:53,940
data which is called Nvidia and the file

455
00:19:53,940 --> 00:19:57,059
with the config is called the config

456
00:19:57,059 --> 00:19:59,580
and once it does that it connects to the

457
00:19:59,580 --> 00:20:02,100
C to server command control server that

458
00:20:02,100 --> 00:20:04,260
is specified in the configuration

459
00:20:04,260 --> 00:20:07,620
and what's special about this C2 servers

460
00:20:07,620 --> 00:20:10,260
is that they contain the word mango in

461
00:20:10,260 --> 00:20:13,980
them as we will see later like a mango

462
00:20:13,980 --> 00:20:17,280
update something like this so uh they

463
00:20:17,280 --> 00:20:21,660
also try to masquerade uh uh the uh

464
00:20:21,660 --> 00:20:25,320
activity of uh uh as a framework as the

465
00:20:25,320 --> 00:20:28,020
activity of the secure mango messenger

466
00:20:28,020 --> 00:20:31,559
that could told you about before

467
00:20:31,559 --> 00:20:33,720
and once it does that it starts sending

468
00:20:33,720 --> 00:20:36,000
heartbeat packet packets and it receives

469
00:20:36,000 --> 00:20:37,260
commands from the command and control

470
00:20:37,260 --> 00:20:40,020
server now the packets they all sent

471
00:20:40,020 --> 00:20:43,860
through a TCP socket and it has its own

472
00:20:43,860 --> 00:20:47,120
kind of structure for uh

473
00:20:47,120 --> 00:20:50,720
for these commands and forces messages

474
00:20:50,720 --> 00:20:53,400
like it contains stuff like checksums

475
00:20:53,400 --> 00:20:56,340
and so on but what's important about

476
00:20:56,340 --> 00:20:58,679
commands is that the commands of the

477
00:20:58,679 --> 00:21:00,480
main module they can for example collect

478
00:21:00,480 --> 00:21:03,840
a lot of system information like uh uh

479
00:21:03,840 --> 00:21:06,059
the computer name the anti-virus

480
00:21:06,059 --> 00:21:08,700
installed amount of memory the processor

481
00:21:08,700 --> 00:21:10,799
this thing may be required for initial

482
00:21:10,799 --> 00:21:12,059
recorder sounds

483
00:21:12,059 --> 00:21:14,520
now it also allows to execute shell

484
00:21:14,520 --> 00:21:16,440
commands like maybe to perform some

485
00:21:16,440 --> 00:21:18,179
execution maybe to also perform some

486
00:21:18,179 --> 00:21:20,160
fingerprinting of the victim machine it

487
00:21:20,160 --> 00:21:22,080
can also be useful

488
00:21:22,080 --> 00:21:24,059
then it can be used to download and

489
00:21:24,059 --> 00:21:27,059
upload files maybe just to run some

490
00:21:27,059 --> 00:21:29,640
tools penetration testing tools on the

491
00:21:29,640 --> 00:21:30,659
victim machine

492
00:21:30,659 --> 00:21:33,240
and what's important uh here is that it

493
00:21:33,240 --> 00:21:36,179
also allows to manage plugins the C2

494
00:21:36,179 --> 00:21:37,620
server May request a framework to

495
00:21:37,620 --> 00:21:40,200
download to download the plugin and to

496
00:21:40,200 --> 00:21:41,760
install this plugin

497
00:21:41,760 --> 00:21:43,799
and let's look into the plugins in

498
00:21:43,799 --> 00:21:45,600
Greater detail

499
00:21:45,600 --> 00:21:49,440
so plugins they as you saw the main

500
00:21:49,440 --> 00:21:51,480
module it doesn't have many features

501
00:21:51,480 --> 00:21:54,179
just like basic stuff command shell file

502
00:21:54,179 --> 00:21:56,760
uploading just very basic stuff

503
00:21:56,760 --> 00:21:59,640
there's a all the activities of the

504
00:21:59,640 --> 00:22:02,640
framework are concentrated in plugins

505
00:22:02,640 --> 00:22:05,340
plugins are normal exe files that are

506
00:22:05,340 --> 00:22:06,539
downloaded from the command and control

507
00:22:06,539 --> 00:22:07,679
server

508
00:22:07,679 --> 00:22:09,840
but what's important about plugins is

509
00:22:09,840 --> 00:22:11,760
that the malware doesn't drop them on

510
00:22:11,760 --> 00:22:15,600
disk they are all kept firelessly only

511
00:22:15,600 --> 00:22:17,820
in memory and this complicates the

512
00:22:17,820 --> 00:22:20,220
overall process of retrieving plugins

513
00:22:20,220 --> 00:22:23,640
from the victim machines

514
00:22:23,640 --> 00:22:29,460
so uh uh since uh their Wireless uh

515
00:22:29,460 --> 00:22:32,100
let's look at how the main module loads

516
00:22:32,100 --> 00:22:35,100
the uh plugins

517
00:22:35,100 --> 00:22:38,039
uh so every plugin is run into a

518
00:22:38,039 --> 00:22:39,480
separate process

519
00:22:39,480 --> 00:22:41,520
please look at the screen I'll show you

520
00:22:41,520 --> 00:22:44,400
a demo about of how the gameplay

521
00:22:44,400 --> 00:22:47,340
framework loads the plugins so first of

522
00:22:47,340 --> 00:22:49,140
all right here we have our main module

523
00:22:49,140 --> 00:22:51,480
process and as I have already mentioned

524
00:22:51,480 --> 00:22:54,539
the the every plugin runs in a separate

525
00:22:54,539 --> 00:22:56,760
process and so what the main module does

526
00:22:56,760 --> 00:23:00,000
is that it creates an spouse.exe process

527
00:23:00,000 --> 00:23:03,720
and it creates it in suspended mode

528
00:23:03,720 --> 00:23:08,179
then it injects a plugin downloader

529
00:23:08,179 --> 00:23:11,880
through dll injection just like it's

530
00:23:11,880 --> 00:23:14,400
very standard dll injection message just

531
00:23:14,400 --> 00:23:17,100
virtual analog Android process memory

532
00:23:17,100 --> 00:23:22,380
and after it does that uh it so the main

533
00:23:22,380 --> 00:23:25,860
module opens a TCP port and it starts

534
00:23:25,860 --> 00:23:28,559
listening for connections on this fault

535
00:23:28,559 --> 00:23:31,140
and what's the plugin downloader does is

536
00:23:31,140 --> 00:23:32,940
that it connects to the main module

537
00:23:32,940 --> 00:23:36,720
through that Port via a socket

538
00:23:36,720 --> 00:23:40,080
and then the main module it dispatches

539
00:23:40,080 --> 00:23:43,080
the plugin body to the plugin downloader

540
00:23:43,080 --> 00:23:46,559
and once the plugin download uh loads uh

541
00:23:46,559 --> 00:23:50,820
it once it receives the plugin it starts

542
00:23:50,820 --> 00:23:53,580
launching it and as a result we have an

543
00:23:53,580 --> 00:23:57,059
SVC host process with a plugin in it and

544
00:23:57,059 --> 00:24:00,840
then a plugin into thus some stuff like

545
00:24:00,840 --> 00:24:03,360
it on its own connects to the C2 server

546
00:24:03,360 --> 00:24:05,760
requests its own commands from it and

547
00:24:05,760 --> 00:24:07,140
executes them

548
00:24:07,140 --> 00:24:09,419
now when we looked into the plugin

549
00:24:09,419 --> 00:24:11,640
launching process let's look at the

550
00:24:11,640 --> 00:24:14,039
plugins themselves

551
00:24:14,039 --> 00:24:16,980
the main module it contains a.net

552
00:24:16,980 --> 00:24:21,059
dictionary with plugin names and if you

553
00:24:21,059 --> 00:24:22,260
look attentively

554
00:24:22,260 --> 00:24:24,360
at the screen we notice that plugins

555
00:24:24,360 --> 00:24:26,940
have Chinese names and this is a very

556
00:24:26,940 --> 00:24:28,740
good clue for attribution

557
00:24:28,740 --> 00:24:30,780
by looking at that we can suggest with

558
00:24:30,780 --> 00:24:32,520
at least medium or maybe even high

559
00:24:32,520 --> 00:24:35,640
confidence even high because we noticed

560
00:24:35,640 --> 00:24:37,140
that the malware is distributed through

561
00:24:37,140 --> 00:24:40,679
plug x with which has Chinese Origins

562
00:24:40,679 --> 00:24:42,440
we can

563
00:24:42,440 --> 00:24:45,480
use that

564
00:24:45,480 --> 00:24:50,340
malware has Chinese Origins based on the

565
00:24:50,340 --> 00:24:52,440
Chinese strings that we have here

566
00:24:52,440 --> 00:24:55,260
and look let's look at the Arsenal of

567
00:24:55,260 --> 00:24:57,840
bloggers that we have here what we have

568
00:24:57,840 --> 00:24:59,100
here we have something called

569
00:24:59,100 --> 00:25:01,440
acquisition system that's what Google

570
00:25:01,440 --> 00:25:04,320
translate gave for this uh Chinese

571
00:25:04,320 --> 00:25:05,340
string

572
00:25:05,340 --> 00:25:07,500
maybe it used to collect some data from

573
00:25:07,500 --> 00:25:09,419
the victim machine

574
00:25:09,419 --> 00:25:11,280
now I have something called hidden

575
00:25:11,280 --> 00:25:14,580
process it can hide processes hide most

576
00:25:14,580 --> 00:25:18,059
processes from the uh from the user

577
00:25:18,059 --> 00:25:19,679
then it has a plugin called general

578
00:25:19,679 --> 00:25:21,059
purpose

579
00:25:21,059 --> 00:25:23,880
it can also perform port forwarding both

580
00:25:23,880 --> 00:25:25,500
following day becomes useful whenever

581
00:25:25,500 --> 00:25:27,419
you want to access an internal resource

582
00:25:27,419 --> 00:25:29,940
on the victim machine and if you if you

583
00:25:29,940 --> 00:25:31,200
want to do it from the attacker machine

584
00:25:31,200 --> 00:25:35,220
you can perform port forwarding and by

585
00:25:35,220 --> 00:25:37,080
doing that you can conveniently access

586
00:25:37,080 --> 00:25:40,020
some maybe infrared some internal

587
00:25:40,020 --> 00:25:42,960
internal websites on the organizational

588
00:25:42,960 --> 00:25:46,320
Network you can do it through the uh

589
00:25:46,320 --> 00:25:48,240
through your own computer if you are an

590
00:25:48,240 --> 00:25:49,380
attacker

591
00:25:49,380 --> 00:25:51,679
now what we have here is screen transfer

592
00:25:51,679 --> 00:25:54,679
it is able to

593
00:25:54,679 --> 00:25:58,020
send the screenshots take screenshots at

594
00:25:58,020 --> 00:26:00,600
uh periodically and then send them to

595
00:26:00,600 --> 00:26:02,640
command control server

596
00:26:02,640 --> 00:26:04,380
another thing we have is virtual desktop

597
00:26:04,380 --> 00:26:07,080
just maybe once the user is away that

598
00:26:07,080 --> 00:26:09,240
that will be able to control the mouse

599
00:26:09,240 --> 00:26:11,520
pointer and the keyboard and do whatever

600
00:26:11,520 --> 00:26:14,159
they want and then clipboard to capture

601
00:26:14,159 --> 00:26:15,179
the clipboard

602
00:26:15,179 --> 00:26:17,039
and there are also plugins that have

603
00:26:17,039 --> 00:26:20,840
English names SSH just

604
00:26:20,840 --> 00:26:25,320
a secure shell for also for execution

605
00:26:25,320 --> 00:26:28,260
commands session CMD may be also for

606
00:26:28,260 --> 00:26:31,260
executing CMD commands and then two

607
00:26:31,260 --> 00:26:33,480
plugins for stealing cookies from chrome

608
00:26:33,480 --> 00:26:36,260
and Firefox

609
00:26:37,080 --> 00:26:39,779
out of these three plugins we observed

610
00:26:39,779 --> 00:26:41,400
out of these plugins we observed three

611
00:26:41,400 --> 00:26:43,679
of them in the wild which are general

612
00:26:43,679 --> 00:26:47,039
purpose virtual desktop and clipboard

613
00:26:47,039 --> 00:26:48,720
the other plugins we haven't observed

614
00:26:48,720 --> 00:26:50,340
them in the wild but we keep looking for

615
00:26:50,340 --> 00:26:51,779
them

616
00:26:51,779 --> 00:26:54,120
as for the general purpose plugin it's

617
00:26:54,120 --> 00:26:57,419
as we as the name suggests it provides

618
00:26:57,419 --> 00:26:59,340
some miscellaneous commands to the

619
00:26:59,340 --> 00:27:01,320
attacker like create processes browse

620
00:27:01,320 --> 00:27:04,500
and modify registry create stop and

621
00:27:04,500 --> 00:27:06,840
start Services you can also turn the

622
00:27:06,840 --> 00:27:09,059
machine into a proxy server again it may

623
00:27:09,059 --> 00:27:11,100
be useful when the attacker wants to

624
00:27:11,100 --> 00:27:12,960
easily access some resources on the

625
00:27:12,960 --> 00:27:15,419
local network of the organization

626
00:27:15,419 --> 00:27:17,640
and it also contains some commands that

627
00:27:17,640 --> 00:27:19,080
allow it can be useful for performing

628
00:27:19,080 --> 00:27:21,659
lateral Movement Like listing at Active

629
00:27:21,659 --> 00:27:23,460
network connections and recent RDP

630
00:27:23,460 --> 00:27:25,200
connections by looking at these

631
00:27:25,200 --> 00:27:27,299
connections the attack may decide which

632
00:27:27,299 --> 00:27:30,500
computers to attack next

633
00:27:30,500 --> 00:27:34,140
now as for the clipboard recorder plugin

634
00:27:34,140 --> 00:27:36,539
uh its name is kind of confusing because

635
00:27:36,539 --> 00:27:38,340
clipboard recording is not only

636
00:27:38,340 --> 00:27:40,980
functionality it's also able to lock key

637
00:27:40,980 --> 00:27:43,559
stocks the method used to lock key stock

638
00:27:43,559 --> 00:27:45,960
is kinda straightforward and known for a

639
00:27:45,960 --> 00:27:48,419
long time is by using the getasync key

640
00:27:48,419 --> 00:27:49,500
State function

641
00:27:49,500 --> 00:27:51,779
and as for clipboard it locks it using

642
00:27:51,779 --> 00:27:54,000
the.net clipboard class

643
00:27:54,000 --> 00:27:57,179
and then it encrypts the data with a

644
00:27:57,179 --> 00:27:59,340
simple Excel Cipher it's very common for

645
00:27:59,340 --> 00:28:02,760
malware and then rise it to disk and it

646
00:28:02,760 --> 00:28:04,440
tries the clipboard files and the

647
00:28:04,440 --> 00:28:07,140
keyword files to separate files it

648
00:28:07,140 --> 00:28:09,419
splits them

649
00:28:09,419 --> 00:28:13,440
now as for the virtual desktop plugin

650
00:28:13,440 --> 00:28:15,779
unfortunately we have not uncovered yet

651
00:28:15,779 --> 00:28:18,840
it's dotnet binary but we have uncovered

652
00:28:18,840 --> 00:28:21,419
each configuration its configuration it

653
00:28:21,419 --> 00:28:24,179
contains two things a remote address

654
00:28:24,179 --> 00:28:27,179
which is an IP address and a port

655
00:28:27,179 --> 00:28:30,840
we can suppose that during uh uh during

656
00:28:30,840 --> 00:28:34,340
its work this plugin connects to this uh

657
00:28:34,340 --> 00:28:37,980
server and uh just maybe uh it

658
00:28:37,980 --> 00:28:40,260
implements somehow an RDP communication

659
00:28:40,260 --> 00:28:42,299
using the server

660
00:28:42,299 --> 00:28:45,600
and what's uh important about this IP

661
00:28:45,600 --> 00:28:47,880
address is that let's look at the Domain

662
00:28:47,880 --> 00:28:49,679
what named which it resolves it's called

663
00:28:49,679 --> 00:28:55,220
update to dot imango lm.com so here

664
00:28:55,220 --> 00:28:58,740
LML here is probably just they replaced

665
00:28:58,740 --> 00:29:01,200
an i i mango IM instant messenger

666
00:29:01,200 --> 00:29:04,080
they'll try to replace it as an L in

667
00:29:04,080 --> 00:29:06,419
order to masquerade the URL and as you

668
00:29:06,419 --> 00:29:08,700
can see again they try to masquerade all

669
00:29:08,700 --> 00:29:11,700
the activity as legitimate as belonging

670
00:29:11,700 --> 00:29:14,279
to this mango messenger this is probably

671
00:29:14,279 --> 00:29:18,179
installed at the victim machines

672
00:29:18,179 --> 00:29:20,360
foreign

673
00:29:21,779 --> 00:29:23,580
so what can you say about this framework

674
00:29:23,580 --> 00:29:25,559
in general first of all the

675
00:29:25,559 --> 00:29:28,679
reconnaissance part is just amazing how

676
00:29:28,679 --> 00:29:31,799
they looked for the floor plans how they

677
00:29:31,799 --> 00:29:33,539
discovered that the IT department is on

678
00:29:33,539 --> 00:29:36,200
the 10th floor and how they tailored the

679
00:29:36,200 --> 00:29:40,020
files to the victim organization

680
00:29:40,020 --> 00:29:44,039
and the fact that they used uh as a

681
00:29:44,039 --> 00:29:46,140
stolen certificate for the mango

682
00:29:46,140 --> 00:29:48,539
messenger it is probably used at the

683
00:29:48,539 --> 00:29:50,820
victim organizations that is in my

684
00:29:50,820 --> 00:29:52,500
opinion very amazing example of

685
00:29:52,500 --> 00:29:53,880
reconnaissance

686
00:29:53,880 --> 00:29:56,520
and it also contains quite rarely

687
00:29:56,520 --> 00:29:58,860
encountered anti-antivirus techniques

688
00:29:58,860 --> 00:30:01,559
like the technique with dll copying it's

689
00:30:01,559 --> 00:30:03,179
not commonly imagine targeted malware

690
00:30:03,179 --> 00:30:06,299
and then some also sandbox checks that

691
00:30:06,299 --> 00:30:07,860
are rarely used

692
00:30:07,860 --> 00:30:12,480
so in terms of uh reconnaissance and in

693
00:30:12,480 --> 00:30:15,179
terms of anti-antivirus detection this

694
00:30:15,179 --> 00:30:17,399
malware performs quite well I would say

695
00:30:17,399 --> 00:30:21,720
and it also has a vast number of

696
00:30:21,720 --> 00:30:24,539
functionalities like we saw before a lot

697
00:30:24,539 --> 00:30:26,279
of plugins with a lot of functions that

698
00:30:26,279 --> 00:30:28,799
allow the malware developers and the

699
00:30:28,799 --> 00:30:30,240
attackers to perform whatever they want

700
00:30:30,240 --> 00:30:31,500
to do

701
00:30:31,500 --> 00:30:34,140
however some things in the smell where I

702
00:30:34,140 --> 00:30:35,899
live much to be desired

703
00:30:35,899 --> 00:30:38,580
for some reason they made some operation

704
00:30:38,580 --> 00:30:41,880
security mistakes like the pdb pass

705
00:30:41,880 --> 00:30:45,059
in Target of malware you have to remove

706
00:30:45,059 --> 00:30:48,000
those PDP pass if you forget to strip

707
00:30:48,000 --> 00:30:51,240
them then it's a mistake and it allows

708
00:30:51,240 --> 00:30:52,919
as I have already said reverse Engineers

709
00:30:52,919 --> 00:30:57,240
to find something about about you and

710
00:30:57,240 --> 00:31:00,960
about your identity in some cases

711
00:31:00,960 --> 00:31:03,480
and another mistake that we saw is the

712
00:31:03,480 --> 00:31:04,919
Chinese plugin names

713
00:31:04,919 --> 00:31:06,840
in my opinions I should have removed

714
00:31:06,840 --> 00:31:08,059
that because

715
00:31:08,059 --> 00:31:11,820
it provides a hint that the malware has

716
00:31:11,820 --> 00:31:13,919
Chinese Origins maybe they didn't remove

717
00:31:13,919 --> 00:31:15,840
it because they weren't really concerned

718
00:31:15,840 --> 00:31:19,620
with uh attribution being performed

719
00:31:19,620 --> 00:31:22,399
and another thing is that there is no

720
00:31:22,399 --> 00:31:24,960
obfuscation.net binaries all the cloud

721
00:31:24,960 --> 00:31:27,720
claims like Yuna and Tifa all the method

722
00:31:27,720 --> 00:31:29,820
names are there they are not replaced

723
00:31:29,820 --> 00:31:32,940
with some some random jungle it's all

724
00:31:32,940 --> 00:31:35,640
there and uh since they forgot to add

725
00:31:35,640 --> 00:31:38,100
obfuscation this allows to easily detect

726
00:31:38,100 --> 00:31:40,260
this malware through for example Yara

727
00:31:40,260 --> 00:31:42,659
rules but the most difficult case for

728
00:31:42,659 --> 00:31:45,240
victim organizations is to find out they

729
00:31:45,240 --> 00:31:48,539
are infected and uh them once you find

730
00:31:48,539 --> 00:31:50,640
the detection is easy

731
00:31:50,640 --> 00:31:55,020
and uh overall uh the malware it's it's

732
00:31:55,020 --> 00:31:57,299
a complex complex framework it performs

733
00:31:57,299 --> 00:31:58,740
quite well it has a lot of

734
00:31:58,740 --> 00:32:02,760
functionalities and uh it's dot net uh

735
00:32:02,760 --> 00:32:04,980
it's a new rewrite of the C plus plus

736
00:32:04,980 --> 00:32:10,559
malware uh I guess uh that uh uh it's uh

737
00:32:10,559 --> 00:32:14,039
quite sophisticated and uh it's quite

738
00:32:14,039 --> 00:32:18,000
for the attackers it's quite useful

739
00:32:18,000 --> 00:32:20,940
and now uh code

740
00:32:20,940 --> 00:32:24,720
please uh oh

741
00:32:24,720 --> 00:32:27,299
all right thank you Georgie uh excellent

742
00:32:27,299 --> 00:32:28,860
analysis

743
00:32:28,860 --> 00:32:30,840
um a few other remarks or notes about

744
00:32:30,840 --> 00:32:34,320
the framework uh that we found during

745
00:32:34,320 --> 00:32:36,059
throughout this incident

746
00:32:36,059 --> 00:32:37,620
um it's interesting that these guys

747
00:32:37,620 --> 00:32:39,600
continue to develop this framework

748
00:32:39,600 --> 00:32:43,559
throughout this months-long incident so

749
00:32:43,559 --> 00:32:46,740
at the very beginning of the Tifa

750
00:32:46,740 --> 00:32:49,380
downloader deployment in those malware

751
00:32:49,380 --> 00:32:53,159
modules the custom they hand wrote Json

752
00:32:53,159 --> 00:32:57,600
uh data Json formatted data within

753
00:32:57,600 --> 00:33:00,000
um within their executables so when they

754
00:33:00,000 --> 00:33:01,799
were sending up data to command and

755
00:33:01,799 --> 00:33:03,779
control servers they were doing this all

756
00:33:03,779 --> 00:33:07,080
by hand months later in 2022 they

757
00:33:07,080 --> 00:33:10,080
started adding newtonsoft Library they

758
00:33:10,080 --> 00:33:12,059
started adding more professional support

759
00:33:12,059 --> 00:33:14,640
to their.net modules which is kind of

760
00:33:14,640 --> 00:33:17,880
interesting they made a few they added a

761
00:33:17,880 --> 00:33:20,519
few bugs actually at the beginning of of

762
00:33:20,519 --> 00:33:23,640
the development cycle so that was

763
00:33:23,640 --> 00:33:25,440
interesting they added log talking as

764
00:33:25,440 --> 00:33:27,419
time went on so I think they found more

765
00:33:27,419 --> 00:33:28,860
mistakes in their code than they

766
00:33:28,860 --> 00:33:30,899
expected they eventually added

767
00:33:30,899 --> 00:33:33,059
encryption functionality to cover up

768
00:33:33,059 --> 00:33:35,279
what it was they were stealing from

769
00:33:35,279 --> 00:33:38,100
machines and then finally throughout the

770
00:33:38,100 --> 00:33:40,799
campaign they added these incremental

771
00:33:40,799 --> 00:33:44,779
changes and they actually maintain

772
00:33:44,779 --> 00:33:48,899
date-based versioning timestamps in all

773
00:33:48,899 --> 00:33:51,179
of their modules and there were lots of

774
00:33:51,179 --> 00:33:54,120
them so they they're doing a pretty

775
00:33:54,120 --> 00:33:56,760
interesting semi-professional job of

776
00:33:56,760 --> 00:33:59,820
maintaining their code and delivering

777
00:33:59,820 --> 00:34:03,980
new new code as time goes on

778
00:34:05,159 --> 00:34:08,460
um other Oddities about uh the group is

779
00:34:08,460 --> 00:34:11,399
in in their activity is that they Mash

780
00:34:11,399 --> 00:34:13,859
all this stuff together so yeah they

781
00:34:13,859 --> 00:34:15,300
want to be stealthy and they deliver

782
00:34:15,300 --> 00:34:18,000
things and they cloak like what Georgie

783
00:34:18,000 --> 00:34:19,199
was talking about um their

784
00:34:19,199 --> 00:34:22,440
infrastructure in names that spoof mango

785
00:34:22,440 --> 00:34:27,060
uh mango.com so imangolm.com

786
00:34:27,060 --> 00:34:29,460
um but they do this with all they throw

787
00:34:29,460 --> 00:34:31,139
all this stuff together so they'll

788
00:34:31,139 --> 00:34:32,940
they'll deliver a mango executable

789
00:34:32,940 --> 00:34:35,520
that's using Nvidia strings which is

790
00:34:35,520 --> 00:34:37,440
unusual and then they throw in Final

791
00:34:37,440 --> 00:34:40,020
Fantasy strings into that and then on

792
00:34:40,020 --> 00:34:41,940
top of that they're replacing Microsoft

793
00:34:41,940 --> 00:34:46,379
VPN dlls which doesn't match any of this

794
00:34:46,379 --> 00:34:50,879
uh like that it just doesn't fit so um a

795
00:34:50,879 --> 00:34:51,899
lot of what they're doing when they

796
00:34:51,899 --> 00:34:54,599
combine it together just makes a bit of

797
00:34:54,599 --> 00:34:56,940
a mess and makes them pretty pretty

798
00:34:56,940 --> 00:34:58,740
discoverable

799
00:34:58,740 --> 00:35:02,099
um other uh artifact Oddities have to do

800
00:35:02,099 --> 00:35:04,440
with uh previous secure messaging client

801
00:35:04,440 --> 00:35:08,160
that they used they trojanized an

802
00:35:08,160 --> 00:35:11,040
installer for Mimi chat and here's a

803
00:35:11,040 --> 00:35:12,780
statement from the Trend Micro guys we

804
00:35:12,780 --> 00:35:14,640
couldn't find any public source for it

805
00:35:14,640 --> 00:35:16,740
which brings into question whether or

806
00:35:16,740 --> 00:35:18,839
not it was developed by the adversary

807
00:35:18,839 --> 00:35:22,140
themselves but we we don't have an

808
00:35:22,140 --> 00:35:24,300
answer to that that's pure speculation

809
00:35:24,300 --> 00:35:28,560
but they were delivering plug X so with

810
00:35:28,560 --> 00:35:32,280
this trojanized Mimi chat installer and

811
00:35:32,280 --> 00:35:34,980
then they were also delivering orat on

812
00:35:34,980 --> 00:35:38,099
Mac OS so they were supporting multiple

813
00:35:38,099 --> 00:35:41,520
platforms even I think we saw this stuff

814
00:35:41,520 --> 00:35:43,740
in 2018.

815
00:35:43,740 --> 00:35:47,299
in 2019.

816
00:35:47,640 --> 00:35:50,400
um I mentioned the and and Georgie

817
00:35:50,400 --> 00:35:53,579
mentioned the Nvidia Oddities uh these

818
00:35:53,579 --> 00:35:55,920
good file names are where they store the

819
00:35:55,920 --> 00:35:58,740
clipboard and the stolen keystrokes and

820
00:35:58,740 --> 00:36:00,420
then the heartbeat data is maintained in

821
00:36:00,420 --> 00:36:03,359
the stat loc file again it's unusual for

822
00:36:03,359 --> 00:36:07,140
a mango for a secure IM client to store

823
00:36:07,140 --> 00:36:10,560
stuff in these paths so it kind of kind

824
00:36:10,560 --> 00:36:14,240
of it's an odd choice

825
00:36:14,280 --> 00:36:17,339
um Georgie went over the Final Fantasy

826
00:36:17,339 --> 00:36:19,800
characters the Tifa download downloader

827
00:36:19,800 --> 00:36:22,680
was yeah fairly primitive compared to

828
00:36:22,680 --> 00:36:24,960
the Yuna code

829
00:36:24,960 --> 00:36:27,960
and and then finally the Microsoft VPN

830
00:36:27,960 --> 00:36:30,599
support and the other dlls that they

831
00:36:30,599 --> 00:36:33,599
replace in system 32 is just another odd

832
00:36:33,599 --> 00:36:37,880
choice for for a messaging client

833
00:36:38,940 --> 00:36:41,700
um and then finally uh one other fairly

834
00:36:41,700 --> 00:36:44,520
sloppy thing is that within these pdb

835
00:36:44,520 --> 00:36:46,500
strings and the other the rest of the

836
00:36:46,500 --> 00:36:49,020
code when you look back at this 2020

837
00:36:49,020 --> 00:36:51,240
Flash installer that they used as a part

838
00:36:51,240 --> 00:36:53,880
of Earth barbaroca or operation gambling

839
00:36:53,880 --> 00:36:56,280
puppet they use the string puppet loader

840
00:36:56,280 --> 00:36:59,400
puppet core release and uh sure enough

841
00:36:59,400 --> 00:37:01,859
two years later with some of their later

842
00:37:01,859 --> 00:37:04,380
Unicode they were calling it Yuna puppet

843
00:37:04,380 --> 00:37:06,660
loader guard and so they they're still

844
00:37:06,660 --> 00:37:08,099
using they're still incorporating

845
00:37:08,099 --> 00:37:10,740
strings and and names in their code base

846
00:37:10,740 --> 00:37:13,500
uh they're borrowing from older code and

847
00:37:13,500 --> 00:37:15,240
just and just rebuilding and

848
00:37:15,240 --> 00:37:17,880
reconstructing in.net which again kind

849
00:37:17,880 --> 00:37:20,040
of gives things away so uh that's

850
00:37:20,040 --> 00:37:21,660
another odd

851
00:37:21,660 --> 00:37:24,119
um odd development choice

852
00:37:24,119 --> 00:37:26,700
all right and with that um I'd just like

853
00:37:26,700 --> 00:37:28,859
to say we have more details in our

854
00:37:28,859 --> 00:37:30,660
private report

855
00:37:30,660 --> 00:37:33,240
um and we always have trial subscribers

856
00:37:33,240 --> 00:37:34,800
and that sort of thing so we have a

857
00:37:34,800 --> 00:37:37,200
two-part report about these guys in

858
00:37:37,200 --> 00:37:38,520
their activity in this particular

859
00:37:38,520 --> 00:37:40,800
incident so if you're looking for more

860
00:37:40,800 --> 00:37:42,300
details we can always get you more

861
00:37:42,300 --> 00:37:45,060
details including iocs and everything

862
00:37:45,060 --> 00:37:47,700
else with that thank you for your time

863
00:37:47,700 --> 00:37:51,359
and I think we have time for Q a

864
00:37:51,359 --> 00:37:53,400
thank you

865
00:37:53,400 --> 00:37:56,839
any questions yeah

866
00:37:59,579 --> 00:38:01,859
thanks for that very interesting

867
00:38:01,859 --> 00:38:04,079
um could you go back to the GUI

868
00:38:04,079 --> 00:38:07,099
installer please

869
00:38:07,260 --> 00:38:10,020
there was a a question and observation

870
00:38:10,020 --> 00:38:12,540
so that the question would be

871
00:38:12,540 --> 00:38:14,880
the reference to the 10th floor it

872
00:38:14,880 --> 00:38:17,579
department since the threat actor

873
00:38:17,579 --> 00:38:19,859
already had access to the environment

874
00:38:19,859 --> 00:38:23,099
it's likely they probably saw that in

875
00:38:23,099 --> 00:38:25,200
some sort of AED

876
00:38:25,200 --> 00:38:28,140
uh you know user profile right or they

877
00:38:28,140 --> 00:38:30,300
just looked on LinkedIn so they probably

878
00:38:30,300 --> 00:38:32,940
weren't looking at floor plans uh to get

879
00:38:32,940 --> 00:38:34,800
that so I would probably just be less

880
00:38:34,800 --> 00:38:37,380
impressed but it's still good right in

881
00:38:37,380 --> 00:38:39,300
terms of execution

882
00:38:39,300 --> 00:38:41,640
um and what's interesting about that

883
00:38:41,640 --> 00:38:43,800
that statement that employee accounts

884
00:38:43,800 --> 00:38:46,079
need to be bound with IP address is that

885
00:38:46,079 --> 00:38:48,300
they're not just saying

886
00:38:48,300 --> 00:38:52,760
uh you know I don't know something that

887
00:38:52,760 --> 00:38:55,320
you would receive as an employee read

888
00:38:55,320 --> 00:38:57,960
the statement and say oh okay this is

889
00:38:57,960 --> 00:38:59,880
linked to the IT department on the 10th

890
00:38:59,880 --> 00:39:02,099
floor which is the strong the strong

891
00:39:02,099 --> 00:39:04,020
part of this right but they're actually

892
00:39:04,020 --> 00:39:06,240
directing employees to go to the 10th

893
00:39:06,240 --> 00:39:07,260
floor

894
00:39:07,260 --> 00:39:09,740
so that's really curious to me because

895
00:39:09,740 --> 00:39:13,380
it's too strong yeah so they get the

896
00:39:13,380 --> 00:39:15,180
upside with the 10th floor mention but

897
00:39:15,180 --> 00:39:17,040
then they actually direct employees

898
00:39:17,040 --> 00:39:18,000
there

899
00:39:18,000 --> 00:39:20,700
yeah so it seems strange to me that they

900
00:39:20,700 --> 00:39:22,859
they do that and then the observation

901
00:39:22,859 --> 00:39:24,240
would just be

902
00:39:24,240 --> 00:39:27,300
uh from a language point of view that

903
00:39:27,300 --> 00:39:28,680
last line

904
00:39:28,680 --> 00:39:30,780
we've got you know Anglo spelling of

905
00:39:30,780 --> 00:39:33,720
synchronizer uh the others are you know

906
00:39:33,720 --> 00:39:36,420
us style so it suggests whoever added

907
00:39:36,420 --> 00:39:40,079
that last line was at least educated in

908
00:39:40,079 --> 00:39:42,900
English you know through a commonwealth

909
00:39:42,900 --> 00:39:44,460
type country

910
00:39:44,460 --> 00:39:48,000
um was was there any thoughts on that

911
00:39:48,000 --> 00:39:49,380
um are you referring to the English

912
00:39:49,380 --> 00:39:52,500
language being used or that no

913
00:39:52,500 --> 00:39:55,440
you know Chinese it's the old s and z

914
00:39:55,440 --> 00:39:59,480
s z z

915
00:40:00,780 --> 00:40:04,079
yeah so uh what you see here in English

916
00:40:04,079 --> 00:40:07,680
text uh I added this to uh the

917
00:40:07,680 --> 00:40:09,540
screenshot to Translate from Chinese

918
00:40:09,540 --> 00:40:13,200
what I think about the fact that they uh

919
00:40:13,200 --> 00:40:15,599
is a tennis ball yes it's some kind of

920
00:40:15,599 --> 00:40:17,940
gray area because uh people may go to

921
00:40:17,940 --> 00:40:19,680
the tennis floor and check what the hell

922
00:40:19,680 --> 00:40:23,339
is this uh but this thing it runs only

923
00:40:23,339 --> 00:40:27,960
for a short time so uh it's uh maybe it

924
00:40:27,960 --> 00:40:29,520
will just open they will really they

925
00:40:29,520 --> 00:40:31,160
will close it and they forget about it

926
00:40:31,160 --> 00:40:36,180
uh maybe uh that's how you do it and as

927
00:40:36,180 --> 00:40:38,099
for the mango account data synchronizer

928
00:40:38,099 --> 00:40:40,619
they probably found out that the

929
00:40:40,619 --> 00:40:43,380
organization uses mango then they use a

930
00:40:43,380 --> 00:40:46,200
certificate and then we plan this

931
00:40:46,200 --> 00:40:48,420
information so they may be just once

932
00:40:48,420 --> 00:40:49,740
they got into those organizations they

933
00:40:49,740 --> 00:40:52,800
may have searched for the electrical it

934
00:40:52,800 --> 00:40:54,540
still takes time to look at the files

935
00:40:54,540 --> 00:40:55,619
that you have for example on remote

936
00:40:55,619 --> 00:40:57,540
drives to find the floor plans some

937
00:40:57,540 --> 00:41:01,520
instructions that's what they did

938
00:41:02,640 --> 00:41:05,339
so anything else

939
00:41:05,339 --> 00:41:07,940
yeah is this working

940
00:41:07,940 --> 00:41:10,500
actually we're out of time I don't want

941
00:41:10,500 --> 00:41:13,740
to ruin everyone's uh coffee break yeah

942
00:41:13,740 --> 00:41:15,599
but um you'll have the chance to speak

943
00:41:15,599 --> 00:41:18,300
with them uh for the rest of the day

944
00:41:18,300 --> 00:41:20,760
um thank you very much uh Georgie and uh

945
00:41:20,760 --> 00:41:23,940
Kurt for a dynamic uh presentation full

946
00:41:23,940 --> 00:41:25,740
of information and can see a dedication

947
00:41:25,740 --> 00:41:27,960
to the topic so thanks very much for

948
00:41:27,960 --> 00:41:31,140
that a round of applause yeah

949
00:41:31,140 --> 00:41:32,880
if you guys have questions we can meet

950
00:41:32,880 --> 00:41:36,180
sometime during the conference

951
00:41:36,180 --> 00:41:38,040
please ask some to ask please ask us

952
00:41:38,040 --> 00:41:41,400
questions uh don't be shy

953
00:41:41,400 --> 00:41:44,300
thank you very much

