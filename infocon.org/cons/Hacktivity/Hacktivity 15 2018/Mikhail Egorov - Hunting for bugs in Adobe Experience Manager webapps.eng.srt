1
00:00:00,030 --> 00:00:05,430
hello activity thanks<font color="#E5E5E5"> for having me this</font>

2
00:00:03,060 --> 00:00:09,599
is my first activity and first visit to

3
00:00:05,430 --> 00:00:12,780
Budapest<font color="#CCCCCC"> in my</font><font color="#E5E5E5"> talk I will show you how</font>

4
00:00:09,599 --> 00:00:16,320
<font color="#E5E5E5">to hunt for security</font><font color="#CCCCCC"> vulnerabilities in</font>

5
00:00:12,780 --> 00:00:18,119
web application built with adobe

6
00:00:16,320 --> 00:00:21,029
experience manager

7
00:00:18,119 --> 00:00:24,350
it's a popular software for<font color="#E5E5E5"> making shiny</font>

8
00:00:21,029 --> 00:00:27,779
<font color="#E5E5E5">websites used by high-profile companies</font>

9
00:00:24,350 --> 00:00:30,900
web applications built with adobe

10
00:00:27,779 --> 00:00:37,559
experience manager is a long<font color="#E5E5E5"> phrase so I</font>

11
00:00:30,900 --> 00:00:40,769
will use a web apps<font color="#E5E5E5"> term instead some</font>

12
00:00:37,559 --> 00:00:43,140
words about<font color="#E5E5E5"> myself my name is</font><font color="#CCCCCC"> Mihai you</font>

13
00:00:40,770 --> 00:00:48,300
I came from Russia

14
00:00:43,140 --> 00:00:52,680
I do<font color="#CCCCCC"> bug hunting on</font><font color="#E5E5E5"> bug route and hucko</font>

15
00:00:48,300 --> 00:00:55,559
on platforms on<font color="#CCCCCC"> back road I'm in top 20</font>

16
00:00:52,680 --> 00:00:58,530
I do security research and was

17
00:00:55,559 --> 00:01:02,459
acknowledged by<font color="#E5E5E5"> many well-known</font>

18
00:00:58,530 --> 00:01:04,650
<font color="#E5E5E5">companies sometimes I present results of</font>

19
00:01:02,460 --> 00:01:08,130
my research<font color="#CCCCCC"> on different</font><font color="#E5E5E5"> security</font>

20
00:01:04,650 --> 00:01:12,060
conferences also I have a<font color="#CCCCCC"> full-time</font><font color="#E5E5E5"> job</font>

21
00:01:08,130 --> 00:01:16,199
<font color="#CCCCCC">I worked for Ingram Micro cloud as</font>

22
00:01:12,060 --> 00:01:19,290
application security<font color="#E5E5E5"> engineer but just</font>

23
00:01:16,200 --> 00:01:22,200
before the conference I decided to join

24
00:01:19,290 --> 00:01:27,990
<font color="#E5E5E5">Kronus company as senior security</font>

25
00:01:22,200 --> 00:01:30,299
researcher<font color="#E5E5E5"> so why this talk</font><font color="#CCCCCC"> as I've</font>

26
00:01:27,990 --> 00:01:33,899
mentioned<font color="#E5E5E5"> adobe experience manager is</font>

27
00:01:30,299 --> 00:01:38,130
quite popular choice among<font color="#CCCCCC"> high-profile</font>

28
00:01:33,900 --> 00:01:42,119
companies<font color="#CCCCCC"> here you can see some</font>

29
00:01:38,130 --> 00:01:44,339
<font color="#E5E5E5">well-known companies that have public</font>

30
00:01:42,119 --> 00:01:48,420
bug bounty programs or vulnerability

31
00:01:44,340 --> 00:01:50,930
disclosure<font color="#E5E5E5"> programs and that use adobe</font>

32
00:01:48,420 --> 00:01:57,659
experience manager

33
00:01:50,930 --> 00:02:01,430
<font color="#CCCCCC">I used service called what runs and that</font>

34
00:01:57,659 --> 00:02:04,590
service<font color="#CCCCCC"> gave me a list of about</font><font color="#E5E5E5"> 10,000</font>

35
00:02:01,430 --> 00:02:09,209
domains that<font color="#E5E5E5"> have adobe experience</font>

36
00:02:04,590 --> 00:02:12,210
manager<font color="#CCCCCC"> running on them for about six</font>

37
00:02:09,209 --> 00:02:16,270
<font color="#CCCCCC">thousand domains</font><font color="#E5E5E5"> main</font><font color="#CCCCCC"> site was running</font>

38
00:02:12,210 --> 00:02:22,740
adobe experience manager<font color="#E5E5E5"> on URL</font><font color="#CCCCCC"> HTTP the</font>

39
00:02:16,270 --> 00:02:26,440
main name or<font color="#E5E5E5"> HTTP</font><font color="#CCCCCC"> 3 w dot the main name</font>

40
00:02:22,740 --> 00:02:30,750
<font color="#CCCCCC">you can see here</font><font color="#E5E5E5"> that I am</font><font color="#CCCCCC"> is quite</font>

41
00:02:26,440 --> 00:02:34,420
complex<font color="#E5E5E5"> it has many layers in the</font>

42
00:02:30,750 --> 00:02:40,260
architecture and the<font color="#CCCCCC"> attacks face is</font>

43
00:02:34,420 --> 00:02:43,839
quite<font color="#E5E5E5"> big the</font><font color="#CCCCCC"> rot 26 known</font><font color="#E5E5E5"> CVS</font><font color="#CCCCCC"> exist</font>

44
00:02:40,260 --> 00:02:46,600
<font color="#CCCCCC">our</font><font color="#E5E5E5"> I want to especially outline</font><font color="#CCCCCC"> three</font>

45
00:02:43,840 --> 00:02:54,070
Apache projects<font color="#CCCCCC"> or</font><font color="#E5E5E5"> open source projects</font>

46
00:02:46,600 --> 00:02:58,480
<font color="#CCCCCC">that form a core of</font><font color="#E5E5E5"> am the Apache helix</font>

47
00:02:54,070 --> 00:03:01,959
<font color="#CCCCCC">Apaches link and Apache</font><font color="#E5E5E5"> org</font><font color="#CCCCCC"> GCR Apache</font>

48
00:02:58,480 --> 00:03:07,209
<font color="#CCCCCC">Felix is used to manage so-called</font><font color="#E5E5E5"> osj</font>

49
00:03:01,960 --> 00:03:13,330
bundles<font color="#CCCCCC"> all functionality in a is packed</font>

50
00:03:07,210 --> 00:03:18,190
inside<font color="#CCCCCC"> OSGi Apache Felix</font><font color="#E5E5E5"> gives us</font><font color="#CCCCCC"> API to</font>

51
00:03:13,330 --> 00:03:22,650
manage<font color="#E5E5E5"> content repository and also gives</font>

52
00:03:18,190 --> 00:03:25,900
the<font color="#CCCCCC"> ability to</font><font color="#E5E5E5"> expose so let's from</font><font color="#CCCCCC"> OSGi</font>

53
00:03:22,650 --> 00:03:30,280
<font color="#CCCCCC">Apache objects are is</font><font color="#E5E5E5"> a Content</font>

54
00:03:25,900 --> 00:03:34,270
repository<font color="#CCCCCC"> everything in a VM is stored</font>

55
00:03:30,280 --> 00:03:38,770
as properties for some<font color="#CCCCCC"> nodes in reserve</font>

56
00:03:34,270 --> 00:03:46,420
<font color="#E5E5E5">and all not</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> shape tree structure</font>

57
00:03:38,770 --> 00:03:48,940
starting from<font color="#E5E5E5"> GC our root node this year</font>

58
00:03:46,420 --> 00:03:52,260
<font color="#CCCCCC">I discovered</font><font color="#E5E5E5"> new exploitation techniques</font>

59
00:03:48,940 --> 00:03:55,030
and security vulnerabilities in<font color="#CCCCCC"> a.m. and</font>

60
00:03:52,260 --> 00:03:59,440
it's perfect time to share<font color="#E5E5E5"> my findings</font>

61
00:03:55,030 --> 00:04:02,980
here<font color="#CCCCCC"> I want</font><font color="#E5E5E5"> to give special</font><font color="#CCCCCC"> thanks to</font>

62
00:03:59,440 --> 00:04:06,100
Jason<font color="#E5E5E5"> Mayer who helped me with am</font>

63
00:04:02,980 --> 00:04:13,179
license and also shared some nice

64
00:04:06,100 --> 00:04:17,469
thoughts with me<font color="#CCCCCC"> I want to mention some</font>

65
00:04:13,180 --> 00:04:20,320
previous<font color="#E5E5E5"> work on this topic in 2015 I</font>

66
00:04:17,470 --> 00:04:22,100
found authenticated remote code

67
00:04:20,320 --> 00:04:25,159
execution in

68
00:04:22,100 --> 00:04:29,270
web application during<font color="#E5E5E5"> I participated in</font>

69
00:04:25,160 --> 00:04:31,750
<font color="#E5E5E5">a bug bounty program</font><font color="#CCCCCC"> same year I</font><font color="#E5E5E5"> made a</font>

70
00:04:29,270 --> 00:04:39,740
talk on<font color="#CCCCCC"> pitch</font><font color="#E5E5E5"> this conference in Moscow</font>

71
00:04:31,750 --> 00:04:42,770
<font color="#CCCCCC">that describes techniques</font><font color="#E5E5E5"> I used in 2016</font>

72
00:04:39,740 --> 00:04:46,700
<font color="#E5E5E5">Peter</font><font color="#CCCCCC"> Adkins from England made a very</font>

73
00:04:42,770 --> 00:04:50,539
nice blog post about getting our<font color="#E5E5E5"> see on</font>

74
00:04:46,700 --> 00:04:56,450
<font color="#E5E5E5">signed out</font><font color="#CCCCCC"> live comb web</font><font color="#E5E5E5"> application</font>

75
00:04:50,540 --> 00:05:00,320
that<font color="#E5E5E5"> belongs to Microsoft not long ago</font>

76
00:04:56,450 --> 00:05:03,469
a renowned<font color="#E5E5E5"> bug hunter from Sweden France</font>

77
00:05:00,320 --> 00:05:07,340
rosin on Safety conference give a talk

78
00:05:03,470 --> 00:05:10,520
<font color="#CCCCCC">about his experience with hacking AM</font><font color="#E5E5E5"> web</font>

79
00:05:07,340 --> 00:05:15,679
<font color="#E5E5E5">apps I highly recommend looking</font><font color="#CCCCCC"> into his</font>

80
00:05:10,520 --> 00:05:18,680
presentation and finally<font color="#CCCCCC"> Jonathan Bowman</font>

81
00:05:15,680 --> 00:05:22,790
wrote a very nice blog post explaining

82
00:05:18,680 --> 00:05:28,880
<font color="#E5E5E5">how he found an XSS on Philips dot and</font>

83
00:05:22,790 --> 00:05:30,860
outside<font color="#E5E5E5"> just</font><font color="#CCCCCC"> a side note all mentioned</font>

84
00:05:28,880 --> 00:05:33,350
vulnerabilities in my talk were

85
00:05:30,860 --> 00:05:36,590
responsibly reported to resource owners

86
00:05:33,350 --> 00:05:39,440
or Adobe product security<font color="#E5E5E5"> incident</font>

87
00:05:36,590 --> 00:05:44,840
<font color="#CCCCCC">response team</font><font color="#E5E5E5"> and I hope</font><font color="#CCCCCC"> they're fixed</font>

88
00:05:39,440 --> 00:05:48,320
<font color="#E5E5E5">now first I want</font><font color="#CCCCCC"> to show you how a.m. is</font>

89
00:05:44,840 --> 00:05:49,340
<font color="#E5E5E5">commonly deployed in practice what is a</font>

90
00:05:48,320 --> 00:05:51,860
dispatcher

91
00:05:49,340 --> 00:05:54,080
why is<font color="#CCCCCC"> dispatch is so important</font><font color="#E5E5E5"> for</font>

92
00:05:51,860 --> 00:05:58,310
<font color="#E5E5E5">security of a.m.</font><font color="#CCCCCC"> are web applications</font>

93
00:05:54,080 --> 00:06:04,130
<font color="#CCCCCC">and more vital</font><font color="#E5E5E5"> question how can we</font>

94
00:05:58,310 --> 00:06:06,200
bypass<font color="#CCCCCC"> a.m. dispatcher</font><font color="#E5E5E5"> in common</font><font color="#CCCCCC"> a.m.</font>

95
00:06:04,130 --> 00:06:09,050
deployment<font color="#E5E5E5"> scenarios there are three</font>

96
00:06:06,200 --> 00:06:12,380
main components<font color="#E5E5E5"> also instance publish</font>

97
00:06:09,050 --> 00:06:15,290
instance and the dispatcher<font color="#E5E5E5"> also</font>

98
00:06:12,380 --> 00:06:18,560
instance is placed deep inside<font color="#CCCCCC"> bacnet</font>

99
00:06:15,290 --> 00:06:21,260
<font color="#CCCCCC">it's not visible</font><font color="#E5E5E5"> from the internet all</font>

100
00:06:18,560 --> 00:06:25,120
content is<font color="#CCCCCC"> published on also</font><font color="#E5E5E5"> instance</font>

101
00:06:21,260 --> 00:06:30,229
and<font color="#E5E5E5"> through replication mechanisms is</font>

102
00:06:25,120 --> 00:06:33,409
propagated to to publish instances and

103
00:06:30,229 --> 00:06:38,318
the user communicates who is

104
00:06:33,409 --> 00:06:41,149
publish instance<font color="#CCCCCC"> through AM dispatcher</font>

105
00:06:38,319 --> 00:06:44,019
<font color="#CCCCCC">but there can be additional components</font>

106
00:06:41,149 --> 00:06:47,419
that sit between user and<font color="#E5E5E5"> AM dispatcher</font>

107
00:06:44,019 --> 00:06:52,399
<font color="#E5E5E5">for example of application firewalls or</font>

108
00:06:47,419 --> 00:06:54,948
Citians like Akamai<font color="#E5E5E5"> or CloudFlare em</font>

109
00:06:52,399 --> 00:07:01,969
could<font color="#CCCCCC"> be</font><font color="#E5E5E5"> deployed on-premise or in the</font>

110
00:06:54,949 --> 00:07:04,689
in the cloud like AWS physically<font color="#E5E5E5"> AM</font>

111
00:07:01,969 --> 00:07:09,679
dispatcher is a module for web<font color="#E5E5E5"> server</font>

112
00:07:04,689 --> 00:07:11,719
<font color="#CCCCCC">Apache o</font><font color="#E5E5E5"> is one of the purposes of AM</font>

113
00:07:09,679 --> 00:07:15,469
dispatcher<font color="#E5E5E5"> is providing health security</font>

114
00:07:11,719 --> 00:07:18,529
<font color="#E5E5E5">frontier</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> filters out unwanted</font>

115
00:07:15,469 --> 00:07:21,769
requests that don't fit security policy

116
00:07:18,529 --> 00:07:27,379
and prevent them from reaching publish

117
00:07:21,769 --> 00:07:31,009
instance<font color="#E5E5E5"> in theory is stated in the</font>

118
00:07:27,379 --> 00:07:34,599
<font color="#E5E5E5">official Adobe documentation</font><font color="#CCCCCC"> AM dispatch</font>

119
00:07:31,009 --> 00:07:37,429
is an extra layer<font color="#CCCCCC"> Inlet am security</font>

120
00:07:34,599 --> 00:07:41,808
however we see in practice<font color="#E5E5E5"> that it's</font>

121
00:07:37,429 --> 00:07:45,888
<font color="#E5E5E5">only one layer the truth is that</font><font color="#CCCCCC"> a.m.</font>

122
00:07:41,809 --> 00:07:47,869
admins rely on<font color="#CCCCCC"> M dispatcher heavily and</font>

123
00:07:45,889 --> 00:07:51,499
no one can figure publish instance

124
00:07:47,869 --> 00:07:56,439
securely and install updates<font color="#E5E5E5"> timely and</font>

125
00:07:51,499 --> 00:07:56,439
it's very good<font color="#E5E5E5"> for for bug hunter</font>

126
00:07:56,619 --> 00:08:03,139
<font color="#CCCCCC">bypassing AM dispatch fails to talk to</font>

127
00:07:59,869 --> 00:08:05,769
those insecure components on publish

128
00:08:03,139 --> 00:08:13,459
instance and this way upon the<font color="#CCCCCC"> whole</font>

129
00:08:05,769 --> 00:08:16,069
application in my arsenal<font color="#CCCCCC"> I have four</font>

130
00:08:13,459 --> 00:08:21,860
methods to bypass AM dispatcher

131
00:08:16,069 --> 00:08:25,209
the first one is CV<font color="#E5E5E5"> from 2016 it was</font>

132
00:08:21,860 --> 00:08:29,839
disclosed to the public in the blog post

133
00:08:25,209 --> 00:08:33,529
made<font color="#CCCCCC"> by Peter</font><font color="#E5E5E5"> Adkins it still works</font>

134
00:08:29,839 --> 00:08:35,929
quite well<font color="#E5E5E5"> because as I have said admins</font>

135
00:08:33,529 --> 00:08:39,948
are too<font color="#E5E5E5"> lazy to install security updates</font>

136
00:08:35,929 --> 00:08:42,709
and the second one was discovered by me

137
00:08:39,948 --> 00:08:46,640
this<font color="#E5E5E5"> year</font><font color="#CCCCCC"> but just</font><font color="#E5E5E5"> before</font>

138
00:08:42,710 --> 00:08:49,550
conference<font color="#E5E5E5"> Adobe reached me and asked</font>

139
00:08:46,640 --> 00:08:51,520
not<font color="#CCCCCC"> to disclose details</font><font color="#E5E5E5"> because the fix</font>

140
00:08:49,550 --> 00:08:56,089
is<font color="#CCCCCC"> not ready yet</font>

141
00:08:51,520 --> 00:08:58,280
<font color="#CCCCCC">so I'm sorry</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> that but of</font><font color="#E5E5E5"> course I</font>

142
00:08:56,090 --> 00:09:00,350
will disclose all technical details

143
00:08:58,280 --> 00:09:04,189
later

144
00:09:00,350 --> 00:09:08,180
the next method multiple slashes<font color="#E5E5E5"> works</font>

145
00:09:04,190 --> 00:09:12,650
sometimes<font color="#E5E5E5"> against Viet dysplasia</font>

146
00:09:08,180 --> 00:09:16,280
policies and final<font color="#E5E5E5"> method set aside</font>

147
00:09:12,650 --> 00:09:20,390
request forgery<font color="#E5E5E5"> is a universal weapon</font>

148
00:09:16,280 --> 00:09:26,540
for dispatch a bypass let's<font color="#E5E5E5"> discuss how</font>

149
00:09:20,390 --> 00:09:29,030
<font color="#E5E5E5">to bypass</font><font color="#CCCCCC"> the dispatcher with</font><font color="#E5E5E5"> CV here</font>

150
00:09:26,540 --> 00:09:32,270
you can see minimal<font color="#E5E5E5"> dispatcher policies</font>

151
00:09:29,030 --> 00:09:33,220
that was recommended<font color="#CCCCCC"> by Adobe before</font><font color="#E5E5E5"> CV</font>

152
00:09:32,270 --> 00:09:37,490
<font color="#E5E5E5">exists</font>

153
00:09:33,220 --> 00:09:40,280
this policy is<font color="#E5E5E5"> too restrictive</font><font color="#CCCCCC"> usually</font>

154
00:09:37,490 --> 00:09:45,290
you extend it by adding<font color="#E5E5E5"> additional rules</font>

155
00:09:40,280 --> 00:09:48,050
that allow<font color="#E5E5E5"> custom requests policy</font>

156
00:09:45,290 --> 00:09:50,990
contains rules that are<font color="#E5E5E5"> applied</font>

157
00:09:48,050 --> 00:09:54,079
sequentially to<font color="#CCCCCC"> the</font><font color="#E5E5E5"> request and what's</font>

158
00:09:50,990 --> 00:09:57,500
important<font color="#E5E5E5"> to know</font><font color="#CCCCCC"> that the last rule</font>

159
00:09:54,080 --> 00:10:01,730
that<font color="#CCCCCC"> matches the request is applied rule</font>

160
00:09:57,500 --> 00:10:04,130
can<font color="#CCCCCC"> be of type deny or allow if none of</font>

161
00:10:01,730 --> 00:10:07,010
the rules match the request default deny

162
00:10:04,130 --> 00:10:11,720
rule is applied<font color="#E5E5E5"> and blocks the</font><font color="#CCCCCC"> whole</font>

163
00:10:07,010 --> 00:10:16,069
request here we<font color="#E5E5E5"> can see is the remaining</font>

164
00:10:11,720 --> 00:10:20,420
<font color="#E5E5E5">rules of the policy and so here is</font><font color="#CCCCCC"> a</font>

165
00:10:16,070 --> 00:10:24,260
bypass<font color="#E5E5E5"> it's stupid this simple I should</font>

166
00:10:20,420 --> 00:10:27,319
say<font color="#CCCCCC"> if we try to access query builder</font>

167
00:10:24,260 --> 00:10:31,010
JSON servlet<font color="#E5E5E5"> on road</font><font color="#CCCCCC"> beam query builder</font>

168
00:10:27,320 --> 00:10:34,400
<font color="#CCCCCC">doe Jason</font><font color="#E5E5E5"> our</font><font color="#CCCCCC"> request will be blocked by</font>

169
00:10:31,010 --> 00:10:39,140
the dispatcher<font color="#E5E5E5"> but if we add slash a dot</font>

170
00:10:34,400 --> 00:10:42,709
CSS or slash a dot HTML to<font color="#CCCCCC"> the end of</font>

171
00:10:39,140 --> 00:10:45,680
the URL<font color="#E5E5E5"> we can access a query builder a</font>

172
00:10:42,710 --> 00:10:50,480
Jason servlet without problems<font color="#E5E5E5"> and what</font>

173
00:10:45,680 --> 00:10:53,810
the hell let's try to analyze the logic

174
00:10:50,480 --> 00:10:56,850
<font color="#E5E5E5">of the dispatcher</font><font color="#CCCCCC"> when we</font><font color="#E5E5E5"> are accessing</font>

175
00:10:53,810 --> 00:10:59,130
<font color="#CCCCCC">Road in query builder</font>

176
00:10:56,850 --> 00:11:02,940
we are blocked by rule zero zero nine

177
00:10:59,130 --> 00:11:05,340
<font color="#CCCCCC">zero it's as was true that matches our</font>

178
00:11:02,940 --> 00:11:10,760
<font color="#CCCCCC">quest and it blocks all incoming</font>

179
00:11:05,340 --> 00:11:15,480
requests<font color="#CCCCCC"> we're URL ends with a dot jason</font>

180
00:11:10,760 --> 00:11:18,300
when we add slash a dot CSS to the end

181
00:11:15,480 --> 00:11:22,050
of the URL last rule that<font color="#E5E5E5"> matches our</font>

182
00:11:18,300 --> 00:11:26,359
request is<font color="#CCCCCC"> zero zero forty one that has</font>

183
00:11:22,050 --> 00:11:26,359
a low type this is how it works

184
00:11:27,690 --> 00:11:34,860
of course<font color="#CCCCCC"> adobe fixed</font><font color="#E5E5E5"> this issue and</font>

185
00:11:31,020 --> 00:11:37,530
issued new minimal<font color="#E5E5E5"> dispatcher policy now</font>

186
00:11:34,860 --> 00:11:41,190
row<font color="#E5E5E5"> zero zero forty one that should</font>

187
00:11:37,530 --> 00:11:44,490
allow access to CSS or JS files is

188
00:11:41,190 --> 00:11:47,250
changed<font color="#CCCCCC"> now the dispatcher looks for the</font>

189
00:11:44,490 --> 00:11:50,070
real extension in the URL<font color="#E5E5E5"> and not for</font>

190
00:11:47,250 --> 00:11:55,680
the last singles this makes<font color="#E5E5E5"> sense of</font>

191
00:11:50,070 --> 00:12:00,540
course<font color="#CCCCCC"> morals</font><font color="#E5E5E5"> of the new policy and the</font>

192
00:11:55,680 --> 00:12:03,750
last ones now<font color="#E5E5E5"> if we are trying to access</font>

193
00:12:00,540 --> 00:12:07,770
<font color="#CCCCCC">wrote bean query builder da</font><font color="#E5E5E5"> jason all</font>

194
00:12:03,750 --> 00:12:10,170
<font color="#CCCCCC">been query builder</font><font color="#E5E5E5"> da jason a CSS the</font>

195
00:12:07,770 --> 00:12:12,439
request is blocked because<font color="#E5E5E5"> now this</font>

196
00:12:10,170 --> 00:12:16,459
patch looks<font color="#E5E5E5"> for the real extension</font>

197
00:12:12,440 --> 00:12:23,430
however found a way<font color="#CCCCCC"> to bypass the fix</font>

198
00:12:16,460 --> 00:12:26,220
but i can disclose details now sorry<font color="#CCCCCC"> in</font>

199
00:12:23,430 --> 00:12:29,099
some cases we<font color="#CCCCCC"> can bypass</font><font color="#E5E5E5"> weirdly</font>

200
00:12:26,220 --> 00:12:33,720
configured dispatcher by<font color="#CCCCCC"> aging multiple</font>

201
00:12:29,100 --> 00:12:37,170
flashes<font color="#E5E5E5"> so if access to slash</font><font color="#CCCCCC"> it's you</font>

202
00:12:33,720 --> 00:12:40,110
know<font color="#E5E5E5"> jason is blocked we can try three</font>

203
00:12:37,170 --> 00:12:45,360
slashes<font color="#E5E5E5"> at</font><font color="#CCCCCC"> cidade jason and sometimes it</font>

204
00:12:40,110 --> 00:12:48,270
works magically<font color="#E5E5E5"> and set aside request</font>

205
00:12:45,360 --> 00:12:51,560
forgery in some component on publish

206
00:12:48,270 --> 00:12:55,980
instance allows to completely bypass<font color="#CCCCCC"> the</font>

207
00:12:51,560 --> 00:12:59,459
dispatcher<font color="#E5E5E5"> and later i'll show you some</font>

208
00:12:55,980 --> 00:13:01,530
<font color="#CCCCCC">examples of Seraphin our</font><font color="#E5E5E5"> ability side</font>

209
00:12:59,460 --> 00:13:06,990
<font color="#CCCCCC">skull this year</font><font color="#E5E5E5"> that are suitable for</font>

210
00:13:01,530 --> 00:13:09,410
<font color="#CCCCCC">dispatcher bypass so to wrap up</font>

211
00:13:06,990 --> 00:13:12,680
I am dispatcher usually is the

212
00:13:09,410 --> 00:13:14,920
the security layer<font color="#E5E5E5"> and there is a</font>

213
00:13:12,680 --> 00:13:20,170
message<font color="#CCCCCC"> to bypass it and</font><font color="#E5E5E5"> access</font>

214
00:13:14,920 --> 00:13:20,170
vulnerable components on publish<font color="#E5E5E5"> server</font>

215
00:13:20,829 --> 00:13:27,709
<font color="#E5E5E5">now let's move on and discuss how we can</font>

216
00:13:24,230 --> 00:13:33,199
quickly separate<font color="#CCCCCC"> smelly am web apps from</font>

217
00:13:27,709 --> 00:13:35,899
secured ones on the first<font color="#E5E5E5"> step we can</font>

218
00:13:33,199 --> 00:13:39,889
try to access roads presented on the

219
00:13:35,899 --> 00:13:42,980
slide<font color="#E5E5E5"> if we</font><font color="#CCCCCC"> get JSON in a response that</font>

220
00:13:39,889 --> 00:13:46,250
contains properties<font color="#E5E5E5"> or values that</font><font color="#CCCCCC"> have</font>

221
00:13:42,980 --> 00:13:51,529
such words as<font color="#CCCCCC"> GCR or slink</font>

222
00:13:46,250 --> 00:13:54,439
ocq<font color="#E5E5E5"> we are</font><font color="#CCCCCC"> facing with a web app for</font>

223
00:13:51,529 --> 00:13:57,889
example<font color="#E5E5E5"> several</font><font color="#CCCCCC"> Twitter subdomains</font><font color="#E5E5E5"> are</font>

224
00:13:54,439 --> 00:14:02,029
<font color="#CCCCCC">run in</font><font color="#E5E5E5"> adobe experience manager</font><font color="#CCCCCC"> when we</font>

225
00:13:57,889 --> 00:14:04,579
access<font color="#E5E5E5"> slash dot JSON we see a JSON</font>

226
00:14:02,029 --> 00:14:08,870
response with properties like<font color="#CCCCCC"> GC are</font>

227
00:14:04,579 --> 00:14:11,239
created by when we access slash dot X

228
00:14:08,870 --> 00:14:14,720
the JSON we suggest in<font color="#E5E5E5"> the response that</font>

229
00:14:11,240 --> 00:14:17,750
contains values like<font color="#E5E5E5"> GC our content or</font>

230
00:14:14,720 --> 00:14:21,730
<font color="#CCCCCC">CQ page and</font><font color="#E5E5E5"> there's a clear indication</font>

231
00:14:17,750 --> 00:14:21,730
of<font color="#E5E5E5"> running</font><font color="#CCCCCC"> am value plication</font>

232
00:14:22,029 --> 00:14:28,240
additionally we can<font color="#E5E5E5"> try to access some</font>

233
00:14:25,130 --> 00:14:32,959
servlets that are usually<font color="#E5E5E5"> left exposed</font>

234
00:14:28,240 --> 00:14:35,180
<font color="#E5E5E5">for example we can try to access like in</font>

235
00:14:32,959 --> 00:14:40,040
state a servlet<font color="#E5E5E5"> all background</font><font color="#CCCCCC"> tests</font>

236
00:14:35,180 --> 00:14:41,870
solid so you can see that when like in

237
00:14:40,040 --> 00:14:44,630
state a servlet is exposed

238
00:14:41,870 --> 00:14:48,589
we observe authenticated equals false<font color="#CCCCCC"> a</font>

239
00:14:44,630 --> 00:14:52,389
string<font color="#E5E5E5"> and when background test servlet</font>

240
00:14:48,589 --> 00:14:57,610
is exposed it runs<font color="#CCCCCC"> ten cycles of testing</font>

241
00:14:52,389 --> 00:14:57,610
routine and outputs<font color="#E5E5E5"> the results</font>

242
00:14:58,930 --> 00:15:05,569
<font color="#CCCCCC">everything in a.m. is stored in</font><font color="#E5E5E5"> the</font>

243
00:15:02,779 --> 00:15:08,720
content<font color="#E5E5E5"> repository</font><font color="#CCCCCC"> that represents</font><font color="#E5E5E5"> a</font>

244
00:15:05,569 --> 00:15:12,349
tree structure<font color="#CCCCCC"> and that's important</font>

245
00:15:08,720 --> 00:15:14,300
and you feel<font color="#CCCCCC"> like</font><font color="#E5E5E5"> dumpster diver</font><font color="#CCCCCC"> when</font>

246
00:15:12,350 --> 00:15:18,890
<font color="#E5E5E5">you are trying</font><font color="#CCCCCC"> to find some</font>

247
00:15:14,300 --> 00:15:23,589
we'll detailed of this huge and<font color="#E5E5E5"> messy</font>

248
00:15:18,890 --> 00:15:27,080
content repository<font color="#E5E5E5"> during happen testing</font>

249
00:15:23,590 --> 00:15:30,350
<font color="#E5E5E5">what</font><font color="#CCCCCC"> gyms can</font><font color="#E5E5E5"> you find any sorts of</font>

250
00:15:27,080 --> 00:15:34,070
secrets like passwords<font color="#E5E5E5"> for databases or</font>

251
00:15:30,350 --> 00:15:39,140
online services<font color="#E5E5E5"> encryption keys secret</font>

252
00:15:34,070 --> 00:15:41,390
tokens<font color="#CCCCCC"> production configuration private</font>

253
00:15:39,140 --> 00:15:45,350
information of users like<font color="#E5E5E5"> emails</font>

254
00:15:41,390 --> 00:15:50,960
telephone numbers home addresses etc and

255
00:15:45,350 --> 00:15:54,170
also<font color="#E5E5E5"> valid logins for</font><font color="#CCCCCC"> a.m. users why</font>

256
00:15:50,960 --> 00:15:56,600
does this happen<font color="#E5E5E5"> because</font><font color="#CCCCCC"> a.m. admins</font>

257
00:15:54,170 --> 00:15:58,610
rely on a.m. dispatcher heavily and

258
00:15:56,600 --> 00:16:03,440
don't configure access controls for

259
00:15:58,610 --> 00:16:06,170
content repository I've counted<font color="#CCCCCC"> four</font>

260
00:16:03,440 --> 00:16:09,770
<font color="#E5E5E5">built-in a.m. Soviets that are suitable</font>

261
00:16:06,170 --> 00:16:12,010
for retrieving content from<font color="#CCCCCC"> this er yeah</font>

262
00:16:09,770 --> 00:16:16,280
default<font color="#E5E5E5"> gets all it a query builder</font>

263
00:16:12,010 --> 00:16:20,960
<font color="#E5E5E5">Jason and Fitz outlets and gql search</font>

264
00:16:16,280 --> 00:16:24,319
<font color="#E5E5E5">servlet the first one is the default get</font>

265
00:16:20,960 --> 00:16:27,860
servlet<font color="#E5E5E5"> it allows to get</font><font color="#CCCCCC"> user not with</font>

266
00:16:24,320 --> 00:16:30,860
its properties for your<font color="#CCCCCC"> convenience it</font>

267
00:16:27,860 --> 00:16:35,630
supports various selectors and formats

268
00:16:30,860 --> 00:16:39,650
of data<font color="#E5E5E5"> for example</font><font color="#CCCCCC"> I select</font><font color="#E5E5E5"> tidy</font>

269
00:16:35,630 --> 00:16:43,150
allowed to get formatted<font color="#E5E5E5"> output select</font>

270
00:16:39,650 --> 00:16:47,120
<font color="#E5E5E5">infinity allows to get in one request</font>

271
00:16:43,150 --> 00:16:52,010
<font color="#CCCCCC">properties of the current dresser not</font>

272
00:16:47,120 --> 00:16:55,820
and all its children<font color="#E5E5E5"> instead of infinity</font>

273
00:16:52,010 --> 00:16:59,900
we<font color="#CCCCCC"> can use some numeric value from minus</font>

274
00:16:55,820 --> 00:17:03,710
<font color="#E5E5E5">one to infinity this value determines</font>

275
00:16:59,900 --> 00:17:09,710
the the depth<font color="#E5E5E5"> minus</font><font color="#CCCCCC"> one is equivalent to</font>

276
00:17:03,710 --> 00:17:13,130
infinity format<font color="#E5E5E5"> rest allows to retrieve</font>

277
00:17:09,710 --> 00:17:16,220
files that are normally<font color="#CCCCCC"> stored inside GC</font>

278
00:17:13,130 --> 00:17:17,230
<font color="#CCCCCC">our data property of the share content</font>

279
00:17:16,220 --> 00:17:21,380
<font color="#CCCCCC">no</font>

280
00:17:17,230 --> 00:17:25,849
for example when we are<font color="#E5E5E5"> accessing wrote</font>

281
00:17:21,380 --> 00:17:28,100
<font color="#CCCCCC">slash dot I did dot thriller Jason</font><font color="#E5E5E5"> we</font>

282
00:17:25,849 --> 00:17:30,919
are<font color="#E5E5E5"> getting formatted Jason that</font>

283
00:17:28,099 --> 00:17:33,379
contains<font color="#CCCCCC"> no</font><font color="#E5E5E5"> notes or and</font><font color="#CCCCCC"> they're Pro</font>

284
00:17:30,920 --> 00:17:40,790
purchased starting from the root<font color="#E5E5E5"> note</font>

285
00:17:33,380 --> 00:17:45,500
with depth three usually I use<font color="#E5E5E5"> following</font>

286
00:17:40,790 --> 00:17:48,320
approach for grabbing data on the first

287
00:17:45,500 --> 00:17:51,440
<font color="#E5E5E5">step I get information about direct</font>

288
00:17:48,320 --> 00:17:54,460
children<font color="#CCCCCC"> of</font><font color="#E5E5E5"> of the root node and but in</font>

289
00:17:51,440 --> 00:17:59,059
some cases<font color="#E5E5E5"> listing for the</font><font color="#CCCCCC"> cell root is</font>

290
00:17:54,460 --> 00:18:02,960
prohibited<font color="#E5E5E5"> if so I try to guess well</font>

291
00:17:59,059 --> 00:18:07,220
it's not names<font color="#CCCCCC"> common names</font><font color="#E5E5E5"> are content</font>

292
00:18:02,960 --> 00:18:10,910
<font color="#CCCCCC">Etsy</font><font color="#E5E5E5"> war and whom on the second step I</font>

293
00:18:07,220 --> 00:18:14,990
start to traverse<font color="#CCCCCC"> GCR</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> dump not</font>

294
00:18:10,910 --> 00:18:17,900
properties<font color="#CCCCCC"> when that selector is a lot</font>

295
00:18:14,990 --> 00:18:22,390
we can<font color="#CCCCCC"> get the whole subtree</font><font color="#E5E5E5"> of GTR and</font>

296
00:18:17,900 --> 00:18:26,360
<font color="#CCCCCC">one get</font><font color="#E5E5E5"> request that's very convenient</font>

297
00:18:22,390 --> 00:18:29,210
some common places<font color="#CCCCCC"> to look into</font><font color="#E5E5E5"> children</font>

298
00:18:26,360 --> 00:18:32,449
not of<font color="#E5E5E5"> it see usually contain various</font>

299
00:18:29,210 --> 00:18:35,860
secrets like database connection string

300
00:18:32,450 --> 00:18:39,679
with passwords<font color="#E5E5E5"> encryption keys and so on</font>

301
00:18:35,860 --> 00:18:43,870
<font color="#E5E5E5">children not of apps system config and</font>

302
00:18:39,679 --> 00:18:48,950
<font color="#E5E5E5">apps something config usually contain</font>

303
00:18:43,870 --> 00:18:51,530
passwords<font color="#E5E5E5"> children</font><font color="#CCCCCC"> notes of</font><font color="#E5E5E5"> war may</font>

304
00:18:48,950 --> 00:18:54,860
<font color="#E5E5E5">contain private information</font><font color="#CCCCCC"> as it</font>

305
00:18:51,530 --> 00:18:56,230
<font color="#E5E5E5">belongs to users and children knots of</font>

306
00:18:54,860 --> 00:19:01,419
whom

307
00:18:56,230 --> 00:19:05,440
can contain contain profiles for<font color="#CCCCCC"> AM</font>

308
00:19:01,420 --> 00:19:08,230
users with hash pad passwords and

309
00:19:05,440 --> 00:19:10,960
normally properties like<font color="#CCCCCC"> GG are created</font>

310
00:19:08,230 --> 00:19:15,580
by<font color="#E5E5E5"> Jessie our last modified by CQ last</font>

311
00:19:10,960 --> 00:19:20,890
modified by of any not contain<font color="#CCCCCC"> login</font>

312
00:19:15,580 --> 00:19:24,490
names for<font color="#CCCCCC"> AM uses here is the real case</font>

313
00:19:20,890 --> 00:19:26,830
example from bug bounty program it was

314
00:19:24,490 --> 00:19:29,710
possible to<font color="#E5E5E5"> pull database connection</font>

315
00:19:26,830 --> 00:19:32,889
string and database password without<font color="#E5E5E5"> any</font>

316
00:19:29,710 --> 00:19:36,220
authentication this information was

317
00:19:32,890 --> 00:19:40,300
taught in child<font color="#CCCCCC"> nodes of HC reducted EPS</font>

318
00:19:36,220 --> 00:19:43,540
config node<font color="#CCCCCC"> i bypass TM dispatcher by</font>

319
00:19:40,300 --> 00:19:47,139
just painting<font color="#CCCCCC"> slash a dot HTML to the</font>

320
00:19:43,540 --> 00:19:55,180
URL and this submission<font color="#E5E5E5"> was rated as</font>

321
00:19:47,140 --> 00:19:58,000
critical the<font color="#E5E5E5"> second and third servlets</font>

322
00:19:55,180 --> 00:20:00,820
that are suitable<font color="#E5E5E5"> for the</font><font color="#CCCCCC"> CR exploration</font>

323
00:19:58,000 --> 00:20:03,790
<font color="#CCCCCC">are query builder</font><font color="#E5E5E5"> JSON servlet and query</font>

324
00:20:00,820 --> 00:20:06,520
builder<font color="#E5E5E5"> feed servlet they support</font>

325
00:20:03,790 --> 00:20:09,490
various predicates for<font color="#E5E5E5"> searching that's</font>

326
00:20:06,520 --> 00:20:12,610
very convenient<font color="#E5E5E5"> query builder</font><font color="#CCCCCC"> Jason</font>

327
00:20:09,490 --> 00:20:15,840
servlet returns<font color="#E5E5E5"> information about</font><font color="#CCCCCC"> DS</font>

328
00:20:12,610 --> 00:20:18,939
<font color="#CCCCCC">arnott and it's all its properties</font>

329
00:20:15,840 --> 00:20:21,280
<font color="#E5E5E5">however query builder</font><font color="#CCCCCC"> fit so late</font>

330
00:20:18,940 --> 00:20:25,570
returns information only<font color="#CCCCCC"> about not</font>

331
00:20:21,280 --> 00:20:28,720
<font color="#CCCCCC">a--not properties but now</font><font color="#E5E5E5"> might we can</font>

332
00:20:25,570 --> 00:20:33,639
extract properties using blind binary

333
00:20:28,720 --> 00:20:36,460
search<font color="#E5E5E5"> here you can see how to access</font>

334
00:20:33,640 --> 00:20:41,650
query builder<font color="#CCCCCC"> jason servlet and query</font>

335
00:20:36,460 --> 00:20:44,710
builder hit<font color="#E5E5E5"> solid on this white I</font>

336
00:20:41,650 --> 00:20:52,960
collected searches that often rescue me

337
00:20:44,710 --> 00:20:55,300
and<font color="#CCCCCC"> give me quickly security</font><font color="#E5E5E5"> box</font><font color="#CCCCCC"> in</font>

338
00:20:52,960 --> 00:20:57,490
private bug bounty program<font color="#E5E5E5"> I</font><font color="#CCCCCC"> a search</font>

339
00:20:55,300 --> 00:21:00,280
through<font color="#CCCCCC"> GC</font><font color="#E5E5E5"> are using a query builder</font>

340
00:20:57,490 --> 00:21:02,590
<font color="#CCCCCC">feed so late and found a.m. production</font>

341
00:21:00,280 --> 00:21:05,980
configuration in a zip archive

342
00:21:02,590 --> 00:21:09,060
<font color="#CCCCCC">full of passwords submission was rated</font>

343
00:21:05,980 --> 00:21:09,060
as critical

344
00:21:09,700 --> 00:21:17,830
in<font color="#E5E5E5"> another bug bounty program I was able</font>

345
00:21:12,940 --> 00:21:21,669
<font color="#CCCCCC">to get access to users profiles through</font>

346
00:21:17,830 --> 00:21:26,908
<font color="#E5E5E5">query builder JSON servlet and to grab</font>

347
00:21:21,669 --> 00:21:26,909
<font color="#CCCCCC">Cemil tokens</font><font color="#E5E5E5"> and hashed passwords</font>

348
00:21:30,570 --> 00:21:35,710
<font color="#E5E5E5">example from a Twitter bug bounty by</font>

349
00:21:33,610 --> 00:21:39,360
searching<font color="#E5E5E5"> with query builder Jason</font>

350
00:21:35,710 --> 00:21:43,210
servlet<font color="#CCCCCC"> I found not that was writable by</font>

351
00:21:39,360 --> 00:21:46,719
<font color="#E5E5E5">anonymous user and additionally post</font>

352
00:21:43,210 --> 00:21:50,559
requests allowed<font color="#E5E5E5"> so I was able to upload</font>

353
00:21:46,720 --> 00:21:53,409
<font color="#E5E5E5">this video file with JavaScript</font><font color="#CCCCCC"> and have</font>

354
00:21:50,559 --> 00:21:56,980
persistent XSS<font color="#E5E5E5"> on</font><font color="#CCCCCC"> Twitter subdomain that</font>

355
00:21:53,409 --> 00:22:03,159
<font color="#E5E5E5">by bypassed Twitter security content</font>

356
00:21:56,980 --> 00:22:07,090
security policy with search<font color="#E5E5E5"> shown on the</font>

357
00:22:03,159 --> 00:22:11,500
slide<font color="#CCCCCC"> you can</font><font color="#E5E5E5"> get login names for</font><font color="#CCCCCC"> AM</font>

358
00:22:07,090 --> 00:22:14,799
users having valid logins<font color="#E5E5E5"> you can try to</font>

359
00:22:11,500 --> 00:22:18,730
<font color="#E5E5E5">brute-force credentials and those extend</font>

360
00:22:14,799 --> 00:22:23,490
your access to am further<font color="#E5E5E5"> I'll show you</font>

361
00:22:18,730 --> 00:22:26,440
how<font color="#E5E5E5"> to brute passwords in a right way</font>

362
00:22:23,490 --> 00:22:29,230
when access to default gets<font color="#CCCCCC"> so</font><font color="#E5E5E5"> it is</font>

363
00:22:26,440 --> 00:22:32,950
<font color="#CCCCCC">prohibited but query builder adjacent</font>

364
00:22:29,230 --> 00:22:35,559
servlet is not locked<font color="#CCCCCC"> you can use query</font>

365
00:22:32,950 --> 00:22:39,759
builder<font color="#E5E5E5"> JSON servlet in default get</font>

366
00:22:35,559 --> 00:22:46,720
<font color="#CCCCCC">Soviet mod using presented search</font>

367
00:22:39,759 --> 00:22:50,190
<font color="#E5E5E5">strings gql is a simple full-text query</font>

368
00:22:46,720 --> 00:22:53,529
language<font color="#CCCCCC"> Shakeel search soviet allows</font>

369
00:22:50,190 --> 00:22:58,240
allows to search through<font color="#CCCCCC"> GCR using this</font>

370
00:22:53,529 --> 00:23:00,970
language<font color="#CCCCCC"> this soviet returns only</font><font color="#E5E5E5"> not</font>

371
00:22:58,240 --> 00:23:04,570
without proper<font color="#E5E5E5"> chests as it was with</font>

372
00:23:00,970 --> 00:23:07,360
query builder<font color="#E5E5E5"> json servlet however again</font>

373
00:23:04,570 --> 00:23:11,860
<font color="#CCCCCC">we can</font><font color="#E5E5E5"> retrieve properties using a blind</font>

374
00:23:07,360 --> 00:23:13,658
binary search here you can see how to

375
00:23:11,860 --> 00:23:18,879
access<font color="#E5E5E5"> a gql</font>

376
00:23:13,659 --> 00:23:20,230
search solid and one<font color="#CCCCCC"> example of the</font>

377
00:23:18,879 --> 00:23:24,939
search

378
00:23:20,230 --> 00:23:30,770
query that query allows<font color="#E5E5E5"> us to retrieve</font>

379
00:23:24,940 --> 00:23:34,130
names of child<font color="#E5E5E5"> not of its you note now</font>

380
00:23:30,770 --> 00:23:38,510
let's look how we<font color="#E5E5E5"> can access how we can</font>

381
00:23:34,130 --> 00:23:41,540
get access<font color="#CCCCCC"> to AMS some user</font><font color="#E5E5E5"> for getting</font>

382
00:23:38,510 --> 00:23:44,120
valid<font color="#CCCCCC"> usernames</font><font color="#E5E5E5"> we can use default get</font>

383
00:23:41,540 --> 00:23:47,149
servlet<font color="#E5E5E5"> or query builder</font><font color="#CCCCCC"> Jason servlet</font>

384
00:23:44,120 --> 00:23:52,219
we have already discussed<font color="#CCCCCC"> it</font><font color="#E5E5E5"> how to do</font>

385
00:23:47,150 --> 00:23:57,050
<font color="#E5E5E5">it</font><font color="#CCCCCC"> and additionally a M has default</font><font color="#E5E5E5"> uses</font>

386
00:23:52,220 --> 00:24:00,080
with name's Edmund and also user admin

387
00:23:57,050 --> 00:24:04,240
is the king of<font color="#CCCCCC"> a.m. he has</font><font color="#E5E5E5"> full access</font>

388
00:24:00,080 --> 00:24:09,320
to everything<font color="#E5E5E5"> and default password is</font>

389
00:24:04,240 --> 00:24:12,200
<font color="#E5E5E5">admin and</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> really mystery for me but</font>

390
00:24:09,320 --> 00:24:16,669
I'm<font color="#E5E5E5"> facing with many applications</font><font color="#CCCCCC"> I</font>

391
00:24:12,200 --> 00:24:21,950
built with<font color="#E5E5E5"> a that have default admin</font>

392
00:24:16,670 --> 00:24:25,310
credentials also user has<font color="#CCCCCC"> desire right</font>

393
00:24:21,950 --> 00:24:29,690
<font color="#E5E5E5">privilege for not content and has</font>

394
00:24:25,310 --> 00:24:30,560
default password<font color="#E5E5E5"> also and the good news</font>

395
00:24:29,690 --> 00:24:33,800
everyone

396
00:24:30,560 --> 00:24:36,440
<font color="#E5E5E5">am supports basic authorization</font><font color="#CCCCCC"> without</font>

397
00:24:33,800 --> 00:24:40,580
any brute force protection<font color="#E5E5E5"> that's insane</font>

398
00:24:36,440 --> 00:24:42,350
I think like in status<font color="#CCCCCC"> Soviet is a</font>

399
00:24:40,580 --> 00:24:45,470
convenient way<font color="#CCCCCC"> to brute force</font>

400
00:24:42,350 --> 00:24:48,830
credentials<font color="#E5E5E5"> here you can see that when</font>

401
00:24:45,470 --> 00:24:51,050
credentials are wrong so it returns<font color="#E5E5E5"> your</font>

402
00:24:48,830 --> 00:24:54,139
string of<font color="#CCCCCC"> chiquita</font><font color="#E5E5E5"> equals false</font>

403
00:24:51,050 --> 00:24:56,830
<font color="#CCCCCC">and it returns string</font><font color="#E5E5E5"> authenticated</font>

404
00:24:54,140 --> 00:25:02,860
equals true and credentials are valid

405
00:24:56,830 --> 00:25:02,860
and we can see how<font color="#E5E5E5"> to access this</font><font color="#CCCCCC"> Soviet</font>

406
00:25:02,950 --> 00:25:09,710
here is the example<font color="#CCCCCC"> from adobe</font>

407
00:25:06,950 --> 00:25:13,130
vulnerability disclosure program<font color="#CCCCCC"> I found</font>

408
00:25:09,710 --> 00:25:16,760
<font color="#E5E5E5">a am on subdomain of adobe.com</font>

409
00:25:13,130 --> 00:25:20,060
<font color="#E5E5E5">with default admin credentials and I was</font>

410
00:25:16,760 --> 00:25:22,820
able<font color="#E5E5E5"> to access system console from there</font>

411
00:25:20,060 --> 00:25:28,460
I<font color="#E5E5E5"> could install a backdoor OSGi bundle</font>

412
00:25:22,820 --> 00:25:31,070
and gain remote<font color="#E5E5E5"> code execution</font><font color="#CCCCCC"> another</font>

413
00:25:28,460 --> 00:25:33,799
<font color="#CCCCCC">example is a LinkedIn</font><font color="#E5E5E5"> owner ability</font>

414
00:25:31,070 --> 00:25:36,049
disclosure program<font color="#CCCCCC"> I agree</font>

415
00:25:33,799 --> 00:25:38,320
<font color="#E5E5E5">to</font><font color="#CCCCCC"> user names using</font><font color="#E5E5E5"> default get</font><font color="#CCCCCC"> Soviet</font>

416
00:25:36,049 --> 00:25:43,009
and then try to brute<font color="#CCCCCC"> host passports</font>

417
00:25:38,320 --> 00:25:46,549
with like login status so late for my

418
00:25:43,009 --> 00:25:49,179
like for my luck<font color="#E5E5E5"> I was able</font><font color="#CCCCCC"> to find</font>

419
00:25:46,549 --> 00:25:53,899
several<font color="#E5E5E5"> uses with easily guessable</font>

420
00:25:49,179 --> 00:26:00,980
passwords and I finally access sir XD

421
00:25:53,899 --> 00:26:04,399
console as<font color="#E5E5E5"> internal LinkedIn user now</font>

422
00:26:00,980 --> 00:26:09,369
I'll<font color="#E5E5E5"> show you some Universal ways to get</font>

423
00:26:04,399 --> 00:26:09,369
our<font color="#E5E5E5"> see in a double experience manager</font>

424
00:26:09,820 --> 00:26:15,549
<font color="#CCCCCC">now I know to Universal ways to get our</font>

425
00:26:12,919 --> 00:26:19,340
see the first one is by uploading

426
00:26:15,549 --> 00:26:23,119
backdoor OSGi bundle the second one is

427
00:26:19,340 --> 00:26:27,678
by uploading<font color="#E5E5E5"> backdoor GSP script to EPS</font>

428
00:26:23,119 --> 00:26:30,709
<font color="#E5E5E5">node to upload or</font><font color="#CCCCCC"> J bundle</font><font color="#E5E5E5"> you have to</font>

429
00:26:27,679 --> 00:26:34,539
be admin and have<font color="#E5E5E5"> access to wrote system</font>

430
00:26:30,710 --> 00:26:38,269
console bundle bundles<font color="#CCCCCC"> I</font><font color="#E5E5E5"> have made</font>

431
00:26:34,539 --> 00:26:42,320
<font color="#E5E5E5">backdoor</font><font color="#CCCCCC"> J prefer</font><font color="#E5E5E5"> of concept for am of</font>

432
00:26:38,269 --> 00:26:44,659
version<font color="#CCCCCC"> 6 point 2 4</font><font color="#E5E5E5"> the second way</font><font color="#CCCCCC"> you</font>

433
00:26:42,320 --> 00:26:47,509
should have<font color="#CCCCCC"> write access</font><font color="#E5E5E5"> for apps not</font>

434
00:26:44,659 --> 00:26:53,629
and the ability to create new<font color="#E5E5E5"> content</font>

435
00:26:47,509 --> 00:26:56,720
with slimport servlet my<font color="#CCCCCC"> osj</font><font color="#E5E5E5"> but door</font>

436
00:26:53,629 --> 00:27:00,049
<font color="#CCCCCC">appeal</font><font color="#E5E5E5"> she works for a in version 6</font>

437
00:26:56,720 --> 00:27:03,859
<font color="#E5E5E5">point 2 or in the newer version versions</font>

438
00:27:00,049 --> 00:27:06,168
if you need back vector bundle for<font color="#CCCCCC"> older</font>

439
00:27:03,859 --> 00:27:12,199
version you<font color="#CCCCCC"> can generate</font><font color="#E5E5E5"> skeleton</font>

440
00:27:06,169 --> 00:27:15,950
project using shown<font color="#CCCCCC"> maven commands and</font>

441
00:27:12,200 --> 00:27:18,859
then<font color="#E5E5E5"> back port back backdoor solid</font>

442
00:27:15,950 --> 00:27:25,129
across from my project<font color="#CCCCCC"> to the newly</font>

443
00:27:18,859 --> 00:27:27,439
created skeleton or<font color="#CCCCCC"> J bundle has begged</font>

444
00:27:25,129 --> 00:27:30,789
off<font color="#E5E5E5"> servlet</font><font color="#CCCCCC"> that execute arbitrary shell</font>

445
00:27:27,440 --> 00:27:33,409
commands<font color="#E5E5E5"> are passed in CMD parameter</font>

446
00:27:30,789 --> 00:27:37,369
servlet is exposed<font color="#CCCCCC"> unrolled</font>

447
00:27:33,409 --> 00:27:42,080
<font color="#CCCCCC">beam backdoor dot</font><font color="#E5E5E5"> HTML let's see a quick</font>

448
00:27:37,369 --> 00:27:45,490
demo<font color="#E5E5E5"> so we are cloning repository with</font>

449
00:27:42,080 --> 00:27:45,490
<font color="#CCCCCC">OSGi backdoor</font>

450
00:27:47,139 --> 00:27:57,689
it has<font color="#E5E5E5"> jar file with osj bundle and we</font>

451
00:27:52,809 --> 00:27:57,690
are trying<font color="#E5E5E5"> to upload and install it</font>

452
00:28:11,860 --> 00:28:21,860
so we see<font color="#E5E5E5"> that bundle is installed and</font>

453
00:28:18,980 --> 00:28:32,270
<font color="#CCCCCC">now we can run arbitrary shell commands</font>

454
00:28:21,860 --> 00:28:35,270
<font color="#E5E5E5">by navigating to</font><font color="#CCCCCC"> to URL it works</font><font color="#E5E5E5"> another</font>

455
00:28:32,270 --> 00:28:37,850
way to get our<font color="#CCCCCC"> C is to upload a gist B</font>

456
00:28:35,270 --> 00:28:40,400
script<font color="#E5E5E5"> you should take following steps</font>

457
00:28:37,850 --> 00:28:43,428
you should<font color="#CCCCCC"> create</font><font color="#E5E5E5"> note with name</font><font color="#CCCCCC"> RC not</font>

458
00:28:40,400 --> 00:28:46,460
and<font color="#CCCCCC"> the properties link resource type</font>

459
00:28:43,429 --> 00:28:50,330
with value RC type then you<font color="#E5E5E5"> should</font>

460
00:28:46,460 --> 00:28:54,530
create<font color="#E5E5E5"> note</font><font color="#CCCCCC"> ab c type and upload HTML</font>

461
00:28:50,330 --> 00:28:58,370
<font color="#CCCCCC">DOJ's</font><font color="#E5E5E5"> P script to that note finally you</font>

462
00:28:54,530 --> 00:29:00,379
are<font color="#E5E5E5"> navigate to wrote</font><font color="#CCCCCC"> RC naught dot HTML</font>

463
00:28:58,370 --> 00:29:02,000
and have the ability<font color="#CCCCCC"> to execute</font>

464
00:29:00,380 --> 00:29:05,210
arbitrary shell commands

465
00:29:02,000 --> 00:29:11,590
I created a shell script<font color="#CCCCCC"> that automate</font>

466
00:29:05,210 --> 00:29:11,590
<font color="#CCCCCC">describe steps let's ease demo</font>

467
00:29:23,880 --> 00:29:30,000
we are running script and pass three

468
00:29:27,840 --> 00:29:35,520
parameters to<font color="#E5E5E5"> it the first parameter is</font>

469
00:29:30,000 --> 00:29:38,450
URL of<font color="#CCCCCC"> am web application</font><font color="#E5E5E5"> the second one</font>

470
00:29:35,520 --> 00:29:50,690
is<font color="#CCCCCC"> username and the cert is user</font>

471
00:29:38,450 --> 00:29:54,150
password<font color="#E5E5E5"> it gives us URL and now if</font><font color="#CCCCCC"> we</font>

472
00:29:50,690 --> 00:29:57,990
open<font color="#E5E5E5"> this URL we can execute arbitrary</font>

473
00:29:54,150 --> 00:30:00,600
shell commands now<font color="#CCCCCC"> I will present you</font>

474
00:29:57,990 --> 00:30:02,580
technical details for<font color="#E5E5E5"> Sarah site request</font>

475
00:30:00,600 --> 00:30:06,030
forgery vulnerabilities I found this

476
00:30:02,580 --> 00:30:09,689
year<font color="#E5E5E5"> the</font><font color="#CCCCCC"> first one is a serif in</font>

477
00:30:06,030 --> 00:30:11,340
<font color="#E5E5E5">reporting services proxy servlet</font><font color="#CCCCCC"> adobea</font>

478
00:30:09,690 --> 00:30:14,900
sciencv ID for it

479
00:30:11,340 --> 00:30:18,780
it worked for all modern<font color="#CCCCCC"> a.m. versions</font>

480
00:30:14,900 --> 00:30:21,720
<font color="#E5E5E5">through this</font><font color="#CCCCCC"> as serif you can send get</font>

481
00:30:18,780 --> 00:30:24,389
<font color="#E5E5E5">request to arbitrary URL and what's</font>

482
00:30:21,720 --> 00:30:27,960
notable that<font color="#E5E5E5"> a serif allows you to see</font>

483
00:30:24,390 --> 00:30:31,440
<font color="#E5E5E5">the full response a serif can be used to</font>

484
00:30:27,960 --> 00:30:35,750
<font color="#CCCCCC">lick secrets from internal network</font>

485
00:30:31,440 --> 00:30:39,539
services like metadata service in AWS

486
00:30:35,750 --> 00:30:42,900
<font color="#CCCCCC">you can also use this</font><font color="#E5E5E5"> a syrup to bypass</font>

487
00:30:39,539 --> 00:30:47,120
<font color="#CCCCCC">AM dispatcher and Yuko you can always</font>

488
00:30:42,900 --> 00:30:50,549
exploit<font color="#CCCCCC"> Sara phrase as reflected XSS</font><font color="#E5E5E5"> and</font>

489
00:30:47,120 --> 00:30:54,959
you don't<font color="#E5E5E5"> need</font><font color="#CCCCCC"> to worry about</font><font color="#E5E5E5"> excess</font>

490
00:30:50,549 --> 00:30:57,870
filters in browsers this is how you can

491
00:30:54,960 --> 00:31:00,570
access vulnerable reporting services

492
00:30:57,870 --> 00:31:04,229
proxy servlet<font color="#CCCCCC"> now let's see</font><font color="#E5E5E5"> some</font>

493
00:31:00,570 --> 00:31:08,610
<font color="#CCCCCC">examples in create bug bounty I am was</font>

494
00:31:04,230 --> 00:31:12,120
deployed in AWS I was able<font color="#E5E5E5"> to leak</font>

495
00:31:08,610 --> 00:31:16,860
<font color="#CCCCCC">Amaral credentials using</font><font color="#E5E5E5"> a seraph in</font><font color="#CCCCCC"> a</font>

496
00:31:12,120 --> 00:31:19,408
reporting services proxy servlet<font color="#CCCCCC"> another</font>

497
00:31:16,860 --> 00:31:22,350
<font color="#E5E5E5">example with a seraph</font><font color="#CCCCCC"> i was able</font><font color="#E5E5E5"> to</font>

498
00:31:19,409 --> 00:31:25,909
bypass<font color="#CCCCCC"> a.m. dispatcher</font><font color="#E5E5E5"> and access</font>

499
00:31:22,350 --> 00:31:29,699
<font color="#E5E5E5">secrets from child nodes of it see not</font>

500
00:31:25,909 --> 00:31:33,150
direct access to<font color="#E5E5E5"> it</font><font color="#CCCCCC"> see was forbidden</font>

501
00:31:29,700 --> 00:31:35,120
but why a<font color="#E5E5E5"> seraph I was able to access</font>

502
00:31:33,150 --> 00:31:38,210
publish instance on

503
00:31:35,120 --> 00:31:44,030
local<font color="#E5E5E5"> host and port</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> five all three</font>

504
00:31:38,210 --> 00:31:46,250
and exfiltrate secrets from<font color="#E5E5E5"> HCM in Adobe</font>

505
00:31:44,030 --> 00:31:48,590
VDP I wasn't able<font color="#E5E5E5"> to leak anything</font>

506
00:31:46,250 --> 00:31:51,950
<font color="#E5E5E5">sensitive with the</font><font color="#CCCCCC"> Seraph</font><font color="#E5E5E5"> I just</font>

507
00:31:48,590 --> 00:31:55,129
exploded<font color="#E5E5E5"> reflected XSS here it worked</font>

508
00:31:51,950 --> 00:31:59,809
perfectly<font color="#CCCCCC"> in Chrome by passing from XSS</font>

509
00:31:55,130 --> 00:32:03,170
filter another vulnerability<font color="#CCCCCC"> reported</font><font color="#E5E5E5"> by</font>

510
00:31:59,809 --> 00:32:03,620
me is a<font color="#E5E5E5"> serif in Salesforce</font><font color="#CCCCCC"> secrets of</font>

511
00:32:03,170 --> 00:32:06,680
<font color="#CCCCCC">lat</font>

512
00:32:03,620 --> 00:32:10,729
<font color="#CCCCCC">Adobe assign CID for</font><font color="#E5E5E5"> it</font>

513
00:32:06,680 --> 00:32:13,640
this is serif allows to make post

514
00:32:10,730 --> 00:32:16,640
<font color="#E5E5E5">requests to arbitrary URL and see the</font>

515
00:32:13,640 --> 00:32:21,440
full response<font color="#CCCCCC"> it allows</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> link</font>

516
00:32:16,640 --> 00:32:25,640
<font color="#CCCCCC">information from AWS</font><font color="#E5E5E5"> from metadata</font>

517
00:32:21,440 --> 00:32:28,309
metadata<font color="#E5E5E5"> service in AWS because metadata</font>

518
00:32:25,640 --> 00:32:30,200
service<font color="#E5E5E5"> doesn't differentiate and</font>

519
00:32:28,309 --> 00:32:34,399
differentiate between get and post

520
00:32:30,200 --> 00:32:38,750
requests and of course we can explore it

521
00:32:34,400 --> 00:32:41,210
as<font color="#E5E5E5"> Sara has reflected XSS</font><font color="#CCCCCC"> which is how</font>

522
00:32:38,750 --> 00:32:44,809
we can access vulnerable<font color="#CCCCCC"> our</font><font color="#E5E5E5"> Salesforce</font>

523
00:32:41,210 --> 00:32:47,630
<font color="#CCCCCC">a secret servlet and real some real</font>

524
00:32:44,809 --> 00:32:54,580
examples<font color="#CCCCCC"> I found subdomain on adobe.com</font>

525
00:32:47,630 --> 00:32:57,380
with am deployed in AWS<font color="#E5E5E5"> this am had</font>

526
00:32:54,580 --> 00:33:01,300
vulnerable<font color="#CCCCCC"> salesforce secrets</font><font color="#E5E5E5"> outlet and</font>

527
00:32:57,380 --> 00:33:05,480
<font color="#CCCCCC">i was able</font><font color="#E5E5E5"> to lick em</font><font color="#CCCCCC"> role credentials</font>

528
00:33:01,300 --> 00:33:11,059
this is how we exploit this is<font color="#CCCCCC"> Seraph as</font>

529
00:33:05,480 --> 00:33:13,610
reflected XSS<font color="#CCCCCC"> I also found the Seraph</font>

530
00:33:11,059 --> 00:33:16,940
<font color="#E5E5E5">insight catalyst servlet that allow</font><font color="#CCCCCC"> us</font>

531
00:33:13,610 --> 00:33:20,870
<font color="#E5E5E5">to send post requests blindly to the</font>

532
00:33:16,940 --> 00:33:23,890
arbitrary URL<font color="#E5E5E5"> but</font><font color="#CCCCCC"> adobe decided not</font>

533
00:33:20,870 --> 00:33:26,928
<font color="#CCCCCC">assigned GID for</font><font color="#E5E5E5"> this vulnerability</font>

534
00:33:23,890 --> 00:33:30,559
<font color="#E5E5E5">what's interesting about this sheriff</font>

535
00:33:26,929 --> 00:33:33,770
that you can inject arbitrary headers in

536
00:33:30,559 --> 00:33:38,480
the request through your<font color="#CCCCCC"> life injection</font>

537
00:33:33,770 --> 00:33:41,600
and you can<font color="#E5E5E5"> even send get output</font><font color="#CCCCCC"> or</font>

538
00:33:38,480 --> 00:33:44,480
delete requests via<font color="#CCCCCC"> HTTP marbling</font>

539
00:33:41,600 --> 00:33:46,600
technique<font color="#CCCCCC"> I'll show you later how to</font>

540
00:33:44,480 --> 00:33:51,130
<font color="#CCCCCC">escalate this as serif</font>

541
00:33:46,600 --> 00:33:51,639
remote code execution<font color="#E5E5E5"> here is how it</font>

542
00:33:51,130 --> 00:33:55,630
<font color="#E5E5E5">works</font>

543
00:33:51,640 --> 00:33:59,140
we sent get<font color="#E5E5E5"> request parameter data</font>

544
00:33:55,630 --> 00:34:03,400
center is vulnerable to<font color="#CCCCCC"> a seraph in</font>

545
00:33:59,140 --> 00:34:08,080
parameter username<font color="#CCCCCC"> year-11 direction we</font>

546
00:34:03,400 --> 00:34:12,100
<font color="#E5E5E5">can specify additional HTTP headers with</font>

547
00:34:08,080 --> 00:34:17,679
how you can<font color="#CCCCCC"> access vulnerable side</font>

548
00:34:12,100 --> 00:34:20,618
catalyst servlet<font color="#CCCCCC"> this is another serif</font>

549
00:34:17,679 --> 00:34:23,379
that is similar<font color="#CCCCCC"> to a seraph inside</font>

550
00:34:20,619 --> 00:34:28,419
catalyst<font color="#CCCCCC"> soviet again add up decided not</font>

551
00:34:23,379 --> 00:34:30,960
to assign<font color="#CCCCCC"> cid for it</font><font color="#E5E5E5"> here's how</font><font color="#CCCCCC"> it works</font>

552
00:34:28,418 --> 00:34:33,879
we<font color="#E5E5E5"> send post request a parameter</font>

553
00:34:30,960 --> 00:34:38,230
<font color="#CCCCCC">analytics notes</font><font color="#E5E5E5"> over is vulnerable to</font><font color="#CCCCCC"> a</font>

554
00:34:33,879 --> 00:34:42,190
<font color="#E5E5E5">seraph this how you access vulnerable</font>

555
00:34:38,230 --> 00:34:44,850
also<font color="#CCCCCC"> provisioning servlet</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> it's</font>

556
00:34:42,190 --> 00:34:51,668
possible in some<font color="#CCCCCC"> cases to escalate</font>

557
00:34:44,850 --> 00:34:54,699
<font color="#CCCCCC">described blind as serifs</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> rc4 am 6.2</font>

558
00:34:51,668 --> 00:34:57,368
running on<font color="#CCCCCC"> apache GT i was able</font><font color="#E5E5E5"> to get a</font>

559
00:34:54,699 --> 00:35:00,700
remote code execution<font color="#CCCCCC"> it works if</font>

560
00:34:57,369 --> 00:35:05,320
<font color="#CCCCCC">accumulative</font><font color="#E5E5E5"> fix pack</font><font color="#CCCCCC"> seven is</font><font color="#E5E5E5"> not</font>

561
00:35:00,700 --> 00:35:12,480
installed on<font color="#E5E5E5"> am</font><font color="#CCCCCC"> if p</font><font color="#E5E5E5"> 7 was released in</font>

562
00:35:05,320 --> 00:35:15,670
mid of 2017 in a yum there is a tongue

563
00:35:12,480 --> 00:35:18,609
<font color="#E5E5E5">topology topology is used for</font>

564
00:35:15,670 --> 00:35:20,680
replication<font color="#E5E5E5"> and topology connect a</font>

565
00:35:18,609 --> 00:35:24,250
servlet<font color="#E5E5E5"> in default installation is</font>

566
00:35:20,680 --> 00:35:27,009
accessible on localhost only if we can

567
00:35:24,250 --> 00:35:29,619
send put request<font color="#E5E5E5"> to topology connector</font>

568
00:35:27,010 --> 00:35:33,670
we can join the topology of course<font color="#E5E5E5"> why a</font>

569
00:35:29,619 --> 00:35:35,830
<font color="#E5E5E5">seraph we can do it and when we reached</font>

570
00:35:33,670 --> 00:35:38,080
apology connect a servlet on publish

571
00:35:35,830 --> 00:35:41,290
instance we<font color="#E5E5E5"> joined the topology and</font>

572
00:35:38,080 --> 00:35:45,700
<font color="#E5E5E5">reverse replication</font><font color="#CCCCCC"> exit II edge agent</font>

573
00:35:41,290 --> 00:35:48,490
is created automatically<font color="#E5E5E5"> and reverse</font>

574
00:35:45,700 --> 00:35:51,350
replication<font color="#CCCCCC"> engine tries to replicate</font>

575
00:35:48,490 --> 00:35:54,830
notes from our malicious<font color="#E5E5E5"> a</font>

576
00:35:51,350 --> 00:35:57,620
<font color="#CCCCCC">so our our to publish instance</font><font color="#E5E5E5"> this way</font>

577
00:35:54,830 --> 00:36:02,029
we can<font color="#CCCCCC"> upload back doe JSP script to EPS</font>

578
00:35:57,620 --> 00:36:04,120
<font color="#CCCCCC">node from</font><font color="#E5E5E5"> malicious</font><font color="#CCCCCC"> a.m. so on publish</font>

579
00:36:02,030 --> 00:36:09,800
instance and gain remote code execution

580
00:36:04,120 --> 00:36:13,190
<font color="#CCCCCC">let's see how it works first</font><font color="#E5E5E5"> I'm trying</font>

581
00:36:09,800 --> 00:36:23,210
to check<font color="#CCCCCC"> that</font><font color="#E5E5E5"> not his name</font><font color="#CCCCCC"> RC not</font>

582
00:36:13,190 --> 00:36:27,860
doesn't exist it doesn't<font color="#E5E5E5"> exist we are</font>

583
00:36:23,210 --> 00:36:30,940
observing access lock on publish

584
00:36:27,860 --> 00:36:35,080
instance and now we navigate to<font color="#E5E5E5"> this</font>

585
00:36:30,940 --> 00:36:35,080
long<font color="#E5E5E5"> URL in the browser</font>

586
00:36:42,090 --> 00:36:52,080
in excess<font color="#CCCCCC"> log we see that put request</font>

587
00:36:46,380 --> 00:36:57,620
was made to topology connector now we

588
00:36:52,080 --> 00:37:00,150
launched our malicious<font color="#E5E5E5"> a instance and</font>

589
00:36:57,620 --> 00:37:05,900
waiting for<font color="#E5E5E5"> the connection from</font><font color="#CCCCCC"> our</font>

590
00:37:00,150 --> 00:37:05,900
publish instance we see the<font color="#E5E5E5"> connection</font>

591
00:37:16,640 --> 00:37:23,960
and now we should<font color="#E5E5E5"> see that</font><font color="#CCCCCC"> not with</font><font color="#E5E5E5"> name</font>

592
00:37:20,810 --> 00:37:30,980
<font color="#E5E5E5">RC not was created by replication</font>

593
00:37:23,960 --> 00:37:35,560
service now we can navigate to<font color="#E5E5E5"> the</font><font color="#CCCCCC"> URL</font>

594
00:37:30,980 --> 00:37:38,170
and execute arbitrary shell commands

595
00:37:35,560 --> 00:37:41,360
<font color="#E5E5E5">yeah it works</font>

596
00:37:38,170 --> 00:37:44,080
let's explore<font color="#E5E5E5"> briefly some possibilities</font>

597
00:37:41,360 --> 00:37:47,090
for<font color="#E5E5E5"> accessible abilities in am</font>

598
00:37:44,080 --> 00:37:51,560
<font color="#E5E5E5">applications there</font><font color="#CCCCCC"> are many ways to</font><font color="#E5E5E5"> get</font>

599
00:37:47,090 --> 00:37:53,990
XSS<font color="#E5E5E5"> if you have rights to create you</font>

600
00:37:51,560 --> 00:37:57,590
notes you<font color="#CCCCCC"> can create new user not and</font>

601
00:37:53,990 --> 00:38:00,439
upload this<font color="#CCCCCC"> Vigi file here to get an XSS</font>

602
00:37:57,590 --> 00:38:03,560
as I've previously demonstrated<font color="#CCCCCC"> hold to</font>

603
00:38:00,440 --> 00:38:05,900
<font color="#CCCCCC">beat a bug bounty if you have no rights</font>

604
00:38:03,560 --> 00:38:08,170
<font color="#CCCCCC">to create you notes but have an ability</font>

605
00:38:05,900 --> 00:38:12,910
<font color="#E5E5E5">to create new properties for some not</font>

606
00:38:08,170 --> 00:38:16,490
<font color="#E5E5E5">you can create</font><font color="#CCCCCC"> new property with HTML</font>

607
00:38:12,910 --> 00:38:19,640
text<font color="#CCCCCC"> and site there are</font><font color="#E5E5E5"> several</font>

608
00:38:16,490 --> 00:38:22,850
exercises in as we as we have<font color="#E5E5E5"> files</font>

609
00:38:19,640 --> 00:38:26,660
reported by<font color="#CCCCCC"> Franz Rosen</font><font color="#E5E5E5"> you can find</font>

610
00:38:22,850 --> 00:38:30,339
technical<font color="#E5E5E5"> details in his presentation</font><font color="#CCCCCC"> we</font>

611
00:38:26,660 --> 00:38:34,279
<font color="#E5E5E5">see</font><font color="#CCCCCC"> M</font><font color="#E5E5E5"> debug field was previously</font>

612
00:38:30,340 --> 00:38:37,540
vulnerable to XSS and additionally

613
00:38:34,280 --> 00:38:41,810
plenty of<font color="#CCCCCC"> built-in servlets</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> am</font>

614
00:38:37,540 --> 00:38:44,360
returns<font color="#CCCCCC"> return an escaped HTML from use</font>

615
00:38:41,810 --> 00:38:48,920
the input<font color="#CCCCCC"> in JSON response</font><font color="#E5E5E5"> and sometimes</font>

616
00:38:44,360 --> 00:38:53,510
it can result an XSS first<font color="#E5E5E5"> two variants</font>

617
00:38:48,920 --> 00:38:59,780
gives you persistent XSS the rest

618
00:38:53,510 --> 00:39:02,540
reflected XSS<font color="#CCCCCC"> but we will</font><font color="#E5E5E5"> look more</font>

619
00:38:59,780 --> 00:39:06,350
precisely at the elastic<font color="#E5E5E5"> success variant</font>

620
00:39:02,540 --> 00:39:09,680
<font color="#CCCCCC">I found suggestion handler servlet</font><font color="#E5E5E5"> it</font>

621
00:39:06,350 --> 00:39:12,860
reflects prayer input parameter in this

622
00:39:09,680 --> 00:39:15,319
<font color="#CCCCCC">new response without</font><font color="#E5E5E5"> escaping</font><font color="#CCCCCC"> it's not a</font>

623
00:39:12,860 --> 00:39:17,750
vulnerability<font color="#E5E5E5"> on its own however often</font>

624
00:39:15,320 --> 00:39:19,610
<font color="#E5E5E5">a.m. is configured in</font><font color="#CCCCCC"> such way that</font>

625
00:39:17,750 --> 00:39:23,250
content type of the response is

626
00:39:19,610 --> 00:39:27,569
<font color="#CCCCCC">determined by file</font><font color="#E5E5E5"> extension and the URL</font>

627
00:39:23,250 --> 00:39:32,280
so by aging<font color="#E5E5E5"> slash at a dot</font><font color="#CCCCCC"> html' to</font><font color="#E5E5E5"> the</font>

628
00:39:27,569 --> 00:39:35,700
URL we can get reflected<font color="#E5E5E5"> diseases so it</font>

629
00:39:32,280 --> 00:39:40,290
was<font color="#E5E5E5"> a</font><font color="#CCCCCC"> floodgate XSS submission for</font>

630
00:39:35,700 --> 00:39:42,750
private bug bounty program denial of

631
00:39:40,290 --> 00:39:45,450
service attacks are very funny<font color="#E5E5E5"> for a</font><font color="#CCCCCC"> em</font>

632
00:39:42,750 --> 00:39:49,470
<font color="#E5E5E5">web applications</font><font color="#CCCCCC"> because in practice</font>

633
00:39:45,450 --> 00:39:52,470
<font color="#E5E5E5">it's very easy to cause gos using only</font>

634
00:39:49,470 --> 00:39:56,879
<font color="#E5E5E5">several requests in a row there are</font>

635
00:39:52,470 --> 00:39:59,279
plenty of ways for<font color="#CCCCCC"> that you can see in</font>

636
00:39:56,880 --> 00:40:03,930
the<font color="#CCCCCC"> example that</font><font color="#E5E5E5"> in one request we</font>

637
00:39:59,280 --> 00:40:08,190
forced<font color="#CCCCCC"> a.m. to return same</font><font color="#E5E5E5"> 700 megabytes</font>

638
00:40:03,930 --> 00:40:13,710
JSON and formatted it took about<font color="#E5E5E5"> six</font>

639
00:40:08,190 --> 00:40:16,440
<font color="#CCCCCC">minutes from am</font><font color="#E5E5E5"> other tricks for the</font>

640
00:40:13,710 --> 00:40:18,690
sake of completeness<font color="#CCCCCC"> I used</font><font color="#E5E5E5"> them couple</font>

641
00:40:16,440 --> 00:40:21,140
years ago they will rarely work today

642
00:40:18,690 --> 00:40:24,869
but who knows

643
00:40:21,140 --> 00:40:27,839
external job<font color="#E5E5E5"> post Soviet was vulnerable</font>

644
00:40:24,869 --> 00:40:31,470
to untrusted enjoyed civilization<font color="#E5E5E5"> Bach</font>

645
00:40:27,839 --> 00:40:35,220
in all TM versions<font color="#E5E5E5"> it takes file</font>

646
00:40:31,470 --> 00:40:38,970
parameter<font color="#E5E5E5"> and passes it to object input</font>

647
00:40:35,220 --> 00:40:42,480
stream<font color="#CCCCCC"> read object call let's see how it</font>

648
00:40:38,970 --> 00:40:43,169
works<font color="#CCCCCC"> we generate gos payload with two</font>

649
00:40:42,480 --> 00:40:48,990
called

650
00:40:43,170 --> 00:40:51,240
OS<font color="#CCCCCC"> gos and sent generated</font><font color="#E5E5E5"> payload to</font>

651
00:40:48,990 --> 00:40:54,930
external job possibility in file

652
00:40:51,240 --> 00:40:57,450
<font color="#CCCCCC">parameter</font><font color="#E5E5E5"> we see the error in the</font>

653
00:40:54,930 --> 00:41:01,230
response that<font color="#E5E5E5"> tells us that there is</font><font color="#CCCCCC"> a</font>

654
00:40:57,450 --> 00:41:06,750
problem with Java heap<font color="#E5E5E5"> failure to</font>

655
00:41:01,230 --> 00:41:09,599
allocate required memory another<font color="#CCCCCC"> thing</font>

656
00:41:06,750 --> 00:41:12,839
<font color="#E5E5E5">is XML external entity a vulnerability</font>

657
00:41:09,599 --> 00:41:17,880
in web dolphin<font color="#CCCCCC"> limitation</font><font color="#E5E5E5"> I discovered</font>

658
00:41:12,839 --> 00:41:20,700
in 2015 you can<font color="#E5E5E5"> quickly spot if a web</font>

659
00:41:17,880 --> 00:41:23,369
<font color="#E5E5E5">doc is enabled by</font><font color="#CCCCCC"> said ascending options</font>

660
00:41:20,700 --> 00:41:25,040
<font color="#CCCCCC">request</font><font color="#E5E5E5"> or making get</font><font color="#CCCCCC"> requests</font><font color="#E5E5E5"> to the</font>

661
00:41:23,369 --> 00:41:31,290
<font color="#CCCCCC">roads Eric's</font>

662
00:41:25,040 --> 00:41:34,480
<font color="#E5E5E5">repository and I created a hacker tool</font>

663
00:41:31,290 --> 00:41:37,779
<font color="#E5E5E5">set to automate security testing of a</font>

664
00:41:34,480 --> 00:41:40,720
<font color="#CCCCCC">Bub's</font><font color="#E5E5E5"> toolset</font><font color="#CCCCCC"> includes several</font><font color="#E5E5E5"> scripts</font>

665
00:41:37,780 --> 00:41:46,050
<font color="#E5E5E5">it will be published on github shortly</font>

666
00:41:40,720 --> 00:41:48,250
after the conference as mean<font color="#CCCCCC"> to a hacker</font>

667
00:41:46,050 --> 00:41:52,660
implements<font color="#CCCCCC"> many checks and tries to</font>

668
00:41:48,250 --> 00:41:55,830
bypass<font color="#E5E5E5"> AM dispatcher and</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> sole folks</font>

669
00:41:52,660 --> 00:41:55,830
<font color="#E5E5E5">thanks for coming</font>

670
00:41:56,350 --> 00:42:02,679
[Applause]

