1
00:00:00,030 --> 00:00:06,089
hi I'm John<font color="#CCCCCC"> Garth Amash a student at</font>

2
00:00:03,720 --> 00:00:08,970
Beauty best University of Technology and

3
00:00:06,089 --> 00:00:12,019
economics<font color="#E5E5E5"> and a member</font><font color="#CCCCCC"> of crisis lab and</font>

4
00:00:08,970 --> 00:00:14,969
for<font color="#E5E5E5"> this research mass supervisors were</font>

5
00:00:12,019 --> 00:00:18,270
<font color="#E5E5E5">dr.</font><font color="#CCCCCC"> borish I've</font><font color="#E5E5E5"> been</font><font color="#CCCCCC"> shot and leventy</font>

6
00:00:14,969 --> 00:00:22,769
leven taboo chan right so let's<font color="#CCCCCC"> start</font>

7
00:00:18,270 --> 00:00:24,119
with<font color="#E5E5E5"> a problem statement</font><font color="#CCCCCC"> we need it</font>

8
00:00:22,769 --> 00:00:27,538
fresher<font color="#E5E5E5"> and some</font><font color="#CCCCCC"> worse for research</font>

9
00:00:24,119 --> 00:00:29,670
purposes as crisis lab and we defined

10
00:00:27,539 --> 00:00:31,320
fresh as from the last week from

11
00:00:29,670 --> 00:00:34,890
campaigns from<font color="#E5E5E5"> the last week</font><font color="#CCCCCC"> or</font><font color="#E5E5E5"> month</font>

12
00:00:31,320 --> 00:00:37,559
and<font color="#E5E5E5"> my task was to deliver this so how</font>

13
00:00:34,890 --> 00:00:42,329
do I do it first<font color="#CCCCCC"> I looked at the news</font>

14
00:00:37,559 --> 00:00:45,030
and found<font color="#E5E5E5"> that right Myers was hit by</font>

15
00:00:42,329 --> 00:00:47,700
not better and somewhere<font color="#E5E5E5"> and I thought</font>

16
00:00:45,030 --> 00:00:48,270
<font color="#CCCCCC">that damn those</font><font color="#E5E5E5"> guys have the freshest</font>

17
00:00:47,700 --> 00:00:51,449
<font color="#CCCCCC">ransomware</font>

18
00:00:48,270 --> 00:00:52,590
and yes and I don't so how<font color="#E5E5E5"> lucky they</font>

19
00:00:51,449 --> 00:00:54,930
are

20
00:00:52,590 --> 00:00:56,910
yeah so the here is a solution<font color="#E5E5E5"> for</font>

21
00:00:54,930 --> 00:01:00,809
getting<font color="#CCCCCC"> freshman</font><font color="#E5E5E5"> summers but</font>

22
00:00:56,910 --> 00:01:02,910
unfortunately I was unable to build<font color="#E5E5E5"> a 21</font>

23
00:01:00,809 --> 00:01:05,369
billion<font color="#CCCCCC"> dollar</font><font color="#E5E5E5"> shipping company during a</font>

24
00:01:02,910 --> 00:01:08,340
semester so I had to look for<font color="#CCCCCC"> other</font>

25
00:01:05,369 --> 00:01:11,130
solutions<font color="#E5E5E5"> and my concept</font><font color="#CCCCCC"> was</font><font color="#E5E5E5"> the</font>

26
00:01:08,340 --> 00:01:14,490
<font color="#E5E5E5">following what if we had a</font><font color="#CCCCCC"> collection of</font>

27
00:01:11,130 --> 00:01:18,630
<font color="#CCCCCC">alderaan somewheres and a feed of new</font>

28
00:01:14,490 --> 00:01:21,839
files from an<font color="#CCCCCC"> outsource</font><font color="#E5E5E5"> and the method</font>

29
00:01:18,630 --> 00:01:25,289
<font color="#E5E5E5">that combined these and the output would</font>

30
00:01:21,840 --> 00:01:28,259
be fresh<font color="#CCCCCC"> run summers</font><font color="#E5E5E5"> all right but we</font>

31
00:01:25,290 --> 00:01:30,479
can generalize<font color="#E5E5E5"> this net</font><font color="#CCCCCC"> foreign</font><font color="#E5E5E5"> summers</font>

32
00:01:28,259 --> 00:01:33,630
but what if we change the<font color="#CCCCCC"> the input</font>

33
00:01:30,479 --> 00:01:35,850
<font color="#CCCCCC">children somewhere corpus input to a</font>

34
00:01:33,630 --> 00:01:39,960
search corpus<font color="#E5E5E5"> then the output would be</font>

35
00:01:35,850 --> 00:01:42,619
similar samples to the<font color="#E5E5E5"> search corpus all</font>

36
00:01:39,960 --> 00:01:46,559
<font color="#E5E5E5">right this might be</font><font color="#CCCCCC"> familiar to you as</font>

37
00:01:42,619 --> 00:01:49,549
virus tofu hunting<font color="#E5E5E5"> they use</font><font color="#CCCCCC"> yara rules</font>

38
00:01:46,560 --> 00:01:54,000
<font color="#E5E5E5">and the method is your rule matching and</font>

39
00:01:49,549 --> 00:01:57,500
yeah it<font color="#E5E5E5"> is quite expensive but</font><font color="#CCCCCC"> ok the</font>

40
00:01:54,000 --> 00:02:00,210
problem<font color="#CCCCCC"> with this is that you are rules</font>

41
00:01:57,500 --> 00:02:04,140
although<font color="#CCCCCC"> they can be automatically</font>

42
00:02:00,210 --> 00:02:07,139
generated<font color="#CCCCCC"> they do not work that well and</font>

43
00:02:04,140 --> 00:02:11,470
<font color="#CCCCCC">they need a collection of very similar</font>

44
00:02:07,140 --> 00:02:14,470
files to deliver more effective rules

45
00:02:11,470 --> 00:02:17,820
and the process of<font color="#CCCCCC"> VRA rule matching is</font>

46
00:02:14,470 --> 00:02:21,430
<font color="#E5E5E5">fairly slow so it's in on the scale</font><font color="#CCCCCC"> of</font>

47
00:02:17,820 --> 00:02:26,320
0.01<font color="#E5E5E5"> seconds and this is on a fairly</font>

48
00:02:21,430 --> 00:02:31,630
<font color="#E5E5E5">simple rule on a fairly small file and I</font>

49
00:02:26,320 --> 00:02:35,560
<font color="#E5E5E5">needed a much faster method so back to</font>

50
00:02:31,630 --> 00:02:37,690
<font color="#E5E5E5">my work</font><font color="#CCCCCC"> we need three things</font>

51
00:02:35,560 --> 00:02:40,120
<font color="#CCCCCC">old</font><font color="#E5E5E5"> ransomware speed of new files and</font>

52
00:02:37,690 --> 00:02:42,579
the method<font color="#E5E5E5"> now the feet of new files</font>

53
00:02:40,120 --> 00:02:46,420
were provided to<font color="#E5E5E5"> me by</font><font color="#CCCCCC"> yukata me</font>

54
00:02:42,580 --> 00:02:50,560
technologies<font color="#CCCCCC"> the suite of new</font><font color="#E5E5E5"> files came</font>

55
00:02:46,420 --> 00:02:54,208
in every day<font color="#E5E5E5"> they were all</font><font color="#CCCCCC"> marver and a</font>

56
00:02:50,560 --> 00:02:58,170
database<font color="#E5E5E5"> was also</font><font color="#CCCCCC"> accessible to me of</font>

57
00:02:54,209 --> 00:03:00,550
roughly 300 million live more samples

58
00:02:58,170 --> 00:03:03,820
<font color="#CCCCCC">alright so we have one of the</font><font color="#E5E5E5"> three</font>

59
00:03:00,550 --> 00:03:06,580
<font color="#E5E5E5">things I need next up is the old</font>

60
00:03:03,820 --> 00:03:09,130
ransomware<font color="#E5E5E5"> corpus I collected it through</font>

61
00:03:06,580 --> 00:03:12,540
the course of two<font color="#CCCCCC"> or three</font><font color="#E5E5E5"> months</font>

62
00:03:09,130 --> 00:03:14,799
<font color="#E5E5E5">looking at the news of four campaigns</font>

63
00:03:12,540 --> 00:03:16,690
<font color="#CCCCCC">downloading</font><font color="#E5E5E5"> the hashes from</font><font color="#CCCCCC"> valid the</font>

64
00:03:14,800 --> 00:03:20,050
samples for the hashes from<font color="#E5E5E5"> virustotal</font>

65
00:03:16,690 --> 00:03:22,690
<font color="#E5E5E5">so this took a</font><font color="#CCCCCC"> while</font><font color="#E5E5E5"> and now for the</font>

66
00:03:20,050 --> 00:03:26,170
method<font color="#CCCCCC"> of course you could guess it was</font>

67
00:03:22,690 --> 00:03:29,560
<font color="#CCCCCC">Alice H</font><font color="#E5E5E5"> locality-sensitive hashing</font><font color="#CCCCCC"> now</font>

68
00:03:26,170 --> 00:03:32,049
what is<font color="#CCCCCC"> locally sensitive hashing</font><font color="#E5E5E5"> basic</font>

69
00:03:29,560 --> 00:03:35,800
the basic concept of<font color="#CCCCCC"> it is the</font><font color="#E5E5E5"> following</font>

70
00:03:32,050 --> 00:03:38,980
<font color="#CCCCCC">for similar data</font><font color="#E5E5E5"> it generates similar</font>

71
00:03:35,800 --> 00:03:40,870
hash<font color="#E5E5E5"> that's the main concept it aims to</font>

72
00:03:38,980 --> 00:03:44,350
<font color="#CCCCCC">maximize the probability</font><font color="#E5E5E5"> of a collision</font>

73
00:03:40,870 --> 00:03:46,660
for<font color="#CCCCCC"> similar items so similar items are</font>

74
00:03:44,350 --> 00:03:49,030
<font color="#CCCCCC">going to equal</font><font color="#E5E5E5"> for similar hash this</font>

75
00:03:46,660 --> 00:03:53,470
similarity<font color="#E5E5E5"> between the</font><font color="#CCCCCC"> digests the</font>

76
00:03:49,030 --> 00:03:58,500
hashes is not not sure<font color="#E5E5E5"> invisible to our</font>

77
00:03:53,470 --> 00:04:01,720
eyes but<font color="#E5E5E5"> distance</font><font color="#CCCCCC"> a distance calculate</font>

78
00:03:58,500 --> 00:04:03,630
thing algorithm is<font color="#E5E5E5"> also provided with</font>

79
00:04:01,720 --> 00:04:07,090
<font color="#E5E5E5">the</font><font color="#CCCCCC"> Lockridge</font><font color="#E5E5E5"> sensitive hashing method</font>

80
00:04:03,630 --> 00:04:12,519
<font color="#E5E5E5">that output number</font><font color="#CCCCCC"> roughly a score or</font>

81
00:04:07,090 --> 00:04:17,709
distance that displays the<font color="#E5E5E5"> similarity</font>

82
00:04:12,519 --> 00:04:20,890
<font color="#CCCCCC">between</font><font color="#E5E5E5"> the two source files</font><font color="#CCCCCC"> like let's</font>

83
00:04:17,709 --> 00:04:23,349
<font color="#E5E5E5">look at some examples so first up it's</font>

84
00:04:20,890 --> 00:04:24,969
I'm going<font color="#E5E5E5"> to talk about SS deep because</font>

85
00:04:23,349 --> 00:04:27,700
this is the

86
00:04:24,970 --> 00:04:31,120
only look at<font color="#E5E5E5"> a scientific hashing method</font>

87
00:04:27,700 --> 00:04:35,560
<font color="#E5E5E5">that is available in public mobile</font>

88
00:04:31,120 --> 00:04:38,230
databases<font color="#E5E5E5"> like in virustotal yeah and it</font>

89
00:04:35,560 --> 00:04:42,100
uses<font color="#E5E5E5"> an algorithm called context</font>

90
00:04:38,230 --> 00:04:44,170
triggered piecewise hashing<font color="#CCCCCC"> I might I</font>

91
00:04:42,100 --> 00:04:47,140
might<font color="#E5E5E5"> it depends on the time if I'm</font>

92
00:04:44,170 --> 00:04:52,570
gonna<font color="#E5E5E5"> explain what it means yeah</font>

93
00:04:47,140 --> 00:04:55,090
the next one<font color="#CCCCCC"> I looked at is SD hash</font><font color="#E5E5E5"> it</font>

94
00:04:52,570 --> 00:04:57,659
uses statistically improbable features

95
00:04:55,090 --> 00:05:01,030
<font color="#E5E5E5">the idea behind this</font><font color="#CCCCCC"> is the following if</font>

96
00:04:57,660 --> 00:05:04,510
an improbable feature is present in a

97
00:05:01,030 --> 00:05:06,640
group of files in every sample<font color="#E5E5E5"> then if a</font>

98
00:05:04,510 --> 00:05:08,950
new sample comes up and this improbable

99
00:05:06,640 --> 00:05:12,099
feature<font color="#E5E5E5"> is present in that file</font>

100
00:05:08,950 --> 00:05:14,880
then it is almost<font color="#E5E5E5"> so the probability of</font>

101
00:05:12,100 --> 00:05:20,770
this file not belonging<font color="#E5E5E5"> to the</font><font color="#CCCCCC"> group is</font>

102
00:05:14,880 --> 00:05:23,380
fairly low and I'm not gonna describe as

103
00:05:20,770 --> 00:05:25,950
<font color="#CCCCCC">the hash</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> the followings because the</font>

104
00:05:23,380 --> 00:05:28,990
tests showed that SDS was not applicable

105
00:05:25,950 --> 00:05:32,080
<font color="#E5E5E5">for this for more mobile classification</font>

106
00:05:28,990 --> 00:05:34,420
and third when I looked at is the<font color="#CCCCCC"> LSH</font>

107
00:05:32,080 --> 00:05:38,740
that stands<font color="#E5E5E5"> for Trend Micro Locker it is</font>

108
00:05:34,420 --> 00:05:41,140
sensitive<font color="#E5E5E5"> hash</font><font color="#CCCCCC"> this algorithm looks at</font>

109
00:05:38,740 --> 00:05:43,870
the input by stream in<font color="#E5E5E5"> five grams with a</font>

110
00:05:41,140 --> 00:05:46,150
sliding window<font color="#E5E5E5"> create statistics of</font>

111
00:05:43,870 --> 00:05:51,520
these<font color="#E5E5E5"> five grams and basically the hash</font>

112
00:05:46,150 --> 00:05:54,880
stores<font color="#E5E5E5"> this these statistics okay</font><font color="#CCCCCC"> so</font>

113
00:05:51,520 --> 00:05:58,570
look at let's<font color="#CCCCCC"> look at an example the top</font>

114
00:05:54,880 --> 00:06:01,450
there<font color="#CCCCCC"> are two you can see</font><font color="#E5E5E5"> two texts and</font>

115
00:05:58,570 --> 00:06:02,890
the<font color="#E5E5E5"> hashes for them the top and the</font>

116
00:06:01,450 --> 00:06:06,310
bottom<font color="#CCCCCC"> texts only differ in the</font>

117
00:06:02,890 --> 00:06:09,490
highlighted character and as we can<font color="#E5E5E5"> see</font>

118
00:06:06,310 --> 00:06:12,990
the<font color="#E5E5E5"> digest the similarity</font><font color="#CCCCCC"> between the</font>

119
00:06:09,490 --> 00:06:16,210
digest is even<font color="#CCCCCC"> visible to our</font><font color="#E5E5E5"> naked eyes</font>

120
00:06:12,990 --> 00:06:20,290
for TLS<font color="#CCCCCC"> age</font><font color="#E5E5E5"> it is not this</font>

121
00:06:16,210 --> 00:06:23,140
straightforward<font color="#CCCCCC"> so equal characters yeah</font>

122
00:06:20,290 --> 00:06:25,290
the reasons why I chose locally

123
00:06:23,140 --> 00:06:28,930
sensitive hashing<font color="#E5E5E5"> are the</font><font color="#CCCCCC"> following</font>

124
00:06:25,290 --> 00:06:31,060
first the small<font color="#E5E5E5"> data to store so for</font>

125
00:06:28,930 --> 00:06:34,300
<font color="#E5E5E5">your</font><font color="#CCCCCC"> rule matching</font><font color="#E5E5E5"> we need a whole</font>

126
00:06:31,060 --> 00:06:36,340
binary the process of removal matching

127
00:06:34,300 --> 00:06:38,150
needs to go through<font color="#E5E5E5"> the whole binary and</font>

128
00:06:36,340 --> 00:06:41,560
and

129
00:06:38,150 --> 00:06:45,880
get a rule and look at matching<font color="#E5E5E5"> while</font>

130
00:06:41,560 --> 00:06:48,620
SSD<font color="#CCCCCC"> panty LSH we only need to store like</font>

131
00:06:45,880 --> 00:06:53,449
<font color="#E5E5E5">roughly 100 bytes and this is good</font>

132
00:06:48,620 --> 00:06:56,690
<font color="#E5E5E5">because for 300 million mowers this is</font>

133
00:06:53,449 --> 00:07:01,610
only<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> equal about 30 gigabytes of</font>

134
00:06:56,690 --> 00:07:06,500
data<font color="#E5E5E5"> yeah</font><font color="#CCCCCC"> the second reason is fast</font>

135
00:07:01,610 --> 00:07:10,150
<font color="#E5E5E5">automatic generation SSD</font><font color="#CCCCCC"> Pentti LSH</font><font color="#E5E5E5"> both</font>

136
00:07:06,500 --> 00:07:15,650
generate<font color="#E5E5E5"> digest in the scale of 0.1 or</font>

137
00:07:10,150 --> 00:07:18,739
0.01<font color="#E5E5E5"> second and last first comparison</font>

138
00:07:15,650 --> 00:07:24,710
time<font color="#E5E5E5"> so for as I mentioned fairly easy</font>

139
00:07:18,740 --> 00:07:29,479
error rule and fairly<font color="#E5E5E5"> a small file 0.01</font>

140
00:07:24,710 --> 00:07:32,570
seconds to process<font color="#E5E5E5"> the process of your</font>

141
00:07:29,479 --> 00:07:35,780
room<font color="#E5E5E5"> atching took yeah and for as fresh</font>

142
00:07:32,570 --> 00:07:38,240
<font color="#CCCCCC">is deep</font><font color="#E5E5E5"> and TLS</font><font color="#CCCCCC"> h</font><font color="#E5E5E5"> it is</font><font color="#CCCCCC"> and like on a</font>

143
00:07:35,780 --> 00:07:42,469
<font color="#E5E5E5">scale</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> 1 millisecond which is like 10</font>

144
00:07:38,240 --> 00:07:44,860
times or even<font color="#E5E5E5"> 100 times</font><font color="#CCCCCC"> faster and this</font>

145
00:07:42,470 --> 00:07:48,289
does<font color="#CCCCCC"> not</font><font color="#E5E5E5"> matter on the file size because</font>

146
00:07:44,860 --> 00:07:51,289
the hash size is roughly<font color="#E5E5E5"> always the same</font>

147
00:07:48,289 --> 00:07:56,690
so for TLS<font color="#CCCCCC"> h is always 7 bytes</font><font color="#E5E5E5"> 70 bytes</font>

148
00:07:51,289 --> 00:07:59,090
so it won't change<font color="#CCCCCC"> alright</font><font color="#E5E5E5"> we've seen</font>

149
00:07:56,690 --> 00:08:02,389
the pros<font color="#E5E5E5"> for</font><font color="#CCCCCC"> our lock</font><font color="#E5E5E5"> ID sensitive</font>

150
00:07:59,090 --> 00:08:04,219
hashing<font color="#E5E5E5"> but are they applicable for our</font>

151
00:08:02,389 --> 00:08:07,789
<font color="#E5E5E5">task</font>

152
00:08:04,220 --> 00:08:11,530
I took one daily feed from this daily

153
00:08:07,789 --> 00:08:15,380
<font color="#E5E5E5">database it's contained about roughly</font>

154
00:08:11,530 --> 00:08:16,789
35,000 real<font color="#CCCCCC"> mobile binaries but they</font>

155
00:08:15,380 --> 00:08:19,130
were not<font color="#CCCCCC"> labeled they were not</font>

156
00:08:16,789 --> 00:08:22,010
classified<font color="#CCCCCC"> Saudia evaluation would</font><font color="#E5E5E5"> be</font>

157
00:08:19,130 --> 00:08:26,120
difficult<font color="#CCCCCC"> now first up I calculated the</font>

158
00:08:22,010 --> 00:08:29,240
SD hash and TLS<font color="#E5E5E5"> H now the SSD and TLS H</font>

159
00:08:26,120 --> 00:08:31,669
digest for every<font color="#E5E5E5"> sample and then the</font>

160
00:08:29,240 --> 00:08:35,570
<font color="#CCCCCC">cross-reference</font><font color="#E5E5E5"> is between every every</font>

161
00:08:31,669 --> 00:08:37,968
and every<font color="#E5E5E5"> other sample so in the</font>

162
00:08:35,570 --> 00:08:41,750
<font color="#E5E5E5">following I worked with again the</font>

163
00:08:37,969 --> 00:08:46,089
database of distances<font color="#CCCCCC"> and I implemented</font>

164
00:08:41,750 --> 00:08:48,500
<font color="#CCCCCC">3 clustering algorithms to evaluate the</font>

165
00:08:46,089 --> 00:08:50,020
usability<font color="#CCCCCC"> of locally sensitive hash</font>

166
00:08:48,500 --> 00:08:53,290
<font color="#E5E5E5">these</font><font color="#CCCCCC"> 2</font>

167
00:08:50,020 --> 00:08:56,949
the sensible caching methods<font color="#CCCCCC"> I'm not</font>

168
00:08:53,290 --> 00:08:59,410
<font color="#E5E5E5">gonna describe them because yeah so they</font>

169
00:08:56,950 --> 00:09:01,030
<font color="#E5E5E5">did all</font><font color="#CCCCCC"> right I'm gonna mention the</font>

170
00:08:59,410 --> 00:09:05,949
third one because<font color="#CCCCCC"> that was</font><font color="#E5E5E5"> the most</font>

171
00:09:01,030 --> 00:09:08,260
<font color="#E5E5E5">effective</font><font color="#CCCCCC"> I if there were some groups</font>

172
00:09:05,950 --> 00:09:12,250
already<font color="#E5E5E5"> created and a new file came up</font>

173
00:09:08,260 --> 00:09:17,170
and new<font color="#CCCCCC"> digest was generated then this</font>

174
00:09:12,250 --> 00:09:19,510
<font color="#E5E5E5">one this file was inserted in the this</font>

175
00:09:17,170 --> 00:09:22,449
group if it was close to<font color="#CCCCCC"> at least a few</font>

176
00:09:19,510 --> 00:09:25,270
members of<font color="#CCCCCC"> the</font><font color="#E5E5E5"> group so one closeness to</font>

177
00:09:22,450 --> 00:09:28,000
<font color="#CCCCCC">a</font><font color="#E5E5E5"> sample is not enough as I found out</font>

178
00:09:25,270 --> 00:09:30,370
because then<font color="#E5E5E5"> a one gigantic group was</font>

179
00:09:28,000 --> 00:09:32,920
created<font color="#CCCCCC"> with like twenty</font><font color="#E5E5E5"> thousand files</font>

180
00:09:30,370 --> 00:09:34,810
and and like another<font color="#E5E5E5"> ten to</font><font color="#CCCCCC"> twelve</font>

181
00:09:32,920 --> 00:09:38,500
<font color="#CCCCCC">twenty thousand groups with only one</font>

182
00:09:34,810 --> 00:09:42,209
<font color="#CCCCCC">sample in them yeah as for the results</font>

183
00:09:38,500 --> 00:09:44,560
<font color="#E5E5E5">as I mentioned I evaluated by hand so I</font>

184
00:09:42,210 --> 00:09:46,840
obtained groups from these three

185
00:09:44,560 --> 00:09:48,369
clustering algorithms and I've

186
00:09:46,840 --> 00:09:51,310
downloaded the binaries and looked at

187
00:09:48,370 --> 00:09:55,360
them by dam and looked at them the

188
00:09:51,310 --> 00:09:57,640
disassembly<font color="#CCCCCC"> and</font><font color="#E5E5E5"> hybrid analysis and it</font>

189
00:09:55,360 --> 00:10:02,920
showed that samples in the same group

190
00:09:57,640 --> 00:10:07,330
are similar so<font color="#E5E5E5"> this process of</font><font color="#CCCCCC"> locating</font>

191
00:10:02,920 --> 00:10:09,729
<font color="#CCCCCC">sensitive hashing</font><font color="#E5E5E5"> works</font><font color="#CCCCCC"> and I have to</font>

192
00:10:07,330 --> 00:10:11,320
mention<font color="#E5E5E5"> that so these groups contained</font>

193
00:10:09,730 --> 00:10:13,030
more<font color="#E5E5E5"> than</font><font color="#CCCCCC"> one samples because</font><font color="#E5E5E5"> of course</font>

194
00:10:11,320 --> 00:10:16,180
if a group contains one sample<font color="#CCCCCC"> that</font><font color="#E5E5E5"> is</font>

195
00:10:13,030 --> 00:10:19,480
similar<font color="#E5E5E5"> to itself</font><font color="#CCCCCC"> so there were groups</font>

196
00:10:16,180 --> 00:10:20,099
created and<font color="#E5E5E5"> files and them were similar</font>

197
00:10:19,480 --> 00:10:22,630
<font color="#CCCCCC">to each other</font>

198
00:10:20,100 --> 00:10:26,730
<font color="#CCCCCC">now as I mentioned SD has was not</font>

199
00:10:22,630 --> 00:10:30,070
applicable<font color="#E5E5E5"> so it was like totally wrong</font>

200
00:10:26,730 --> 00:10:34,120
<font color="#CCCCCC">another thing I found was that s</font><font color="#E5E5E5"> SD p--</font>

201
00:10:30,070 --> 00:10:37,260
score was badly scaled<font color="#E5E5E5"> so the distance</font>

202
00:10:34,120 --> 00:10:41,920
calculation in<font color="#E5E5E5"> SD p-- the output was</font>

203
00:10:37,260 --> 00:10:44,890
score between<font color="#CCCCCC"> 0 to 100 where 0 equal to</font>

204
00:10:41,920 --> 00:10:48,040
a per miss match and a hundred equal to

205
00:10:44,890 --> 00:10:53,199
a perfect match now<font color="#E5E5E5"> I found that the</font>

206
00:10:48,040 --> 00:10:56,849
score of<font color="#CCCCCC"> 1</font><font color="#E5E5E5"> if if a distance was</font><font color="#CCCCCC"> 1 then</font>

207
00:10:53,200 --> 00:11:00,430
we could be like<font color="#CCCCCC"> 70% sure</font><font color="#E5E5E5"> that this</font>

208
00:10:56,850 --> 00:11:03,970
<font color="#E5E5E5">similarity was correct</font><font color="#CCCCCC"> so we do not have</font>

209
00:11:00,430 --> 00:11:07,719
<font color="#CCCCCC">the</font><font color="#E5E5E5"> range to define the threshold</font>

210
00:11:03,970 --> 00:11:14,080
between 0 and 100 because<font color="#CCCCCC"> 1</font><font color="#E5E5E5"> the score of</font>

211
00:11:07,720 --> 00:11:17,170
1 means similarity in most cases<font color="#CCCCCC"> yeah</font>

212
00:11:14,080 --> 00:11:22,450
and there were similar samples in

213
00:11:17,170 --> 00:11:24,550
different groups<font color="#CCCCCC"> so</font><font color="#E5E5E5"> I and and next one</font>

214
00:11:22,450 --> 00:11:27,060
<font color="#E5E5E5">is that</font><font color="#CCCCCC"> Els H</font><font color="#E5E5E5"> appeared to be the best</font>

215
00:11:24,550 --> 00:11:31,900
yeah

216
00:11:27,060 --> 00:11:35,290
because<font color="#CCCCCC"> III</font><font color="#E5E5E5"> the threshold</font><font color="#CCCCCC"> I selected the</font>

217
00:11:31,900 --> 00:11:37,990
thresholds<font color="#CCCCCC"> to</font><font color="#E5E5E5"> obtain no false positives</font>

218
00:11:35,290 --> 00:11:42,280
<font color="#E5E5E5">so like this</font><font color="#CCCCCC"> 70 threshold and the</font>

219
00:11:37,990 --> 00:11:46,420
threshold<font color="#E5E5E5"> of</font><font color="#CCCCCC"> 1 were selected through</font>

220
00:11:42,280 --> 00:11:49,959
this measure<font color="#E5E5E5"> and with these thresholds</font>

221
00:11:46,420 --> 00:11:51,849
<font color="#E5E5E5">there were similar samples in different</font>

222
00:11:49,960 --> 00:11:53,950
<font color="#E5E5E5">groups but this is not a problem for</font><font color="#CCCCCC"> us</font>

223
00:11:51,850 --> 00:11:56,950
<font color="#CCCCCC">because we only wanted</font><font color="#E5E5E5"> to find similar</font>

224
00:11:53,950 --> 00:12:00,040
<font color="#E5E5E5">samples we did not aim to find every</font>

225
00:11:56,950 --> 00:12:04,650
similar fence sample in a database<font color="#E5E5E5"> all</font>

226
00:12:00,040 --> 00:12:08,829
right so like look at some hashes first

227
00:12:04,650 --> 00:12:11,980
<font color="#E5E5E5">this search was completed by both</font><font color="#CCCCCC"> SSD</font>

228
00:12:08,830 --> 00:12:18,520
<font color="#E5E5E5">and TLS H this was on the whole database</font>

229
00:12:11,980 --> 00:12:21,220
<font color="#CCCCCC">so not on this small corpus and the so</font>

230
00:12:18,520 --> 00:12:23,170
now we see the<font color="#E5E5E5"> SSD resolve it the the</font>

231
00:12:21,220 --> 00:12:26,740
origin of sample I<font color="#CCCCCC"> search for was this</font>

232
00:12:23,170 --> 00:12:31,329
<font color="#CCCCCC">grand grand crab sample</font><font color="#E5E5E5"> you can see the</font>

233
00:12:26,740 --> 00:12:34,240
<font color="#CCCCCC">t the SS deep hash for it and the</font>

234
00:12:31,330 --> 00:12:37,180
algorithm found the similar samples on

235
00:12:34,240 --> 00:12:41,640
the<font color="#E5E5E5"> bottom and as we can see there there</font>

236
00:12:37,180 --> 00:12:44,680
are similar characters in the hashes

237
00:12:41,640 --> 00:12:47,770
<font color="#CCCCCC">they are displayed in</font><font color="#E5E5E5"> the red boxes and</font>

238
00:12:44,680 --> 00:12:50,859
of course<font color="#E5E5E5"> they these files are not the</font>

239
00:12:47,770 --> 00:12:54,520
<font color="#E5E5E5">same so there are different</font><font color="#CCCCCC"> crack test</font>

240
00:12:50,860 --> 00:12:57,430
as<font color="#E5E5E5"> well so for</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> same search the input</font>

241
00:12:54,520 --> 00:13:01,480
is<font color="#CCCCCC"> the same sample but now it it's the</font>

242
00:12:57,430 --> 00:13:05,349
<font color="#CCCCCC">TLS h digest value and the algorithm was</font>

243
00:13:01,480 --> 00:13:07,530
unable to<font color="#E5E5E5"> find the similar sample so the</font>

244
00:13:05,350 --> 00:13:12,070
hashes you can see on the bottom<font color="#CCCCCC"> are the</font>

245
00:13:07,530 --> 00:13:14,170
<font color="#E5E5E5">TLS h hashes for the same for the</font>

246
00:13:12,070 --> 00:13:17,290
similar samples that were find by SS

247
00:13:14,170 --> 00:13:19,509
deep and as we can<font color="#CCCCCC"> see that there</font>

248
00:13:17,290 --> 00:13:23,980
<font color="#E5E5E5">are similar characters in these to</font>

249
00:13:19,509 --> 00:13:27,310
digest but with the threshold<font color="#CCCCCC"> of</font><font color="#E5E5E5"> 70 the</font>

250
00:13:23,980 --> 00:13:31,149
algorithm deemed the bottom<font color="#E5E5E5"> samples</font>

251
00:13:27,310 --> 00:13:34,420
different from the one on<font color="#E5E5E5"> top right so</font>

252
00:13:31,149 --> 00:13:39,490
yeah and next<font color="#E5E5E5"> up is the other way around</font>

253
00:13:34,420 --> 00:13:43,689
<font color="#CCCCCC">so</font><font color="#E5E5E5"> the same search</font><font color="#CCCCCC"> I took the same</font>

254
00:13:39,490 --> 00:13:46,690
search with<font color="#E5E5E5"> Saturn ransomware</font><font color="#CCCCCC"> one</font><font color="#E5E5E5"> sample</font>

255
00:13:43,690 --> 00:13:50,529
<font color="#E5E5E5">as an input and now it was still a sage</font>

256
00:13:46,690 --> 00:13:53,709
that found the similar samples<font color="#E5E5E5"> you can</font>

257
00:13:50,529 --> 00:13:58,930
<font color="#E5E5E5">see the</font><font color="#CCCCCC"> it's you are further</font><font color="#E5E5E5"> away but</font>

258
00:13:53,709 --> 00:14:00,550
you can see that the digests are visible

259
00:13:58,930 --> 00:14:05,319
the<font color="#E5E5E5"> similarity is visible</font><font color="#CCCCCC"> within them</font>

260
00:14:00,550 --> 00:14:08,319
<font color="#E5E5E5">and this time it was SS deep that was</font>

261
00:14:05,319 --> 00:14:10,479
unable to find a similarity<font color="#E5E5E5"> although for</font>

262
00:14:08,319 --> 00:14:14,319
the similar finds that<font color="#E5E5E5"> we find by</font><font color="#CCCCCC"> TL SH</font>

263
00:14:10,480 --> 00:14:17,410
the the similarity is visible<font color="#CCCCCC"> even</font>

264
00:14:14,319 --> 00:14:20,560
through SS deep hashes<font color="#E5E5E5"> but from the</font>

265
00:14:17,410 --> 00:14:23,139
original sample<font color="#E5E5E5"> it was not so then I</font>

266
00:14:20,560 --> 00:14:25,119
moved<font color="#E5E5E5"> on to the real</font><font color="#CCCCCC"> database it as I</font>

267
00:14:23,139 --> 00:14:29,529
mentioned it<font color="#CCCCCC"> call act it's contained</font>

268
00:14:25,120 --> 00:14:31,930
<font color="#E5E5E5">three hundred million more samples the</font>

269
00:14:29,529 --> 00:14:34,329
has generation<font color="#CCCCCC"> four SS deep and</font><font color="#E5E5E5"> TLS</font><font color="#CCCCCC"> H</font>

270
00:14:31,930 --> 00:14:40,599
<font color="#CCCCCC">took roughly</font><font color="#E5E5E5"> the summer so two months</font>

271
00:14:34,329 --> 00:14:43,120
and but then I so in the previous so for

272
00:14:40,600 --> 00:14:44,800
the small data set I calculated

273
00:14:43,120 --> 00:14:48,579
<font color="#E5E5E5">cross-references between every two</font>

274
00:14:44,800 --> 00:14:50,740
samples now this does not<font color="#E5E5E5"> scale well</font><font color="#CCCCCC"> so</font>

275
00:14:48,579 --> 00:14:54,040
for<font color="#CCCCCC"> 300 million samples</font><font color="#E5E5E5"> it would roughly</font>

276
00:14:50,740 --> 00:14:57,639
take<font color="#E5E5E5"> three million years but we do not</font>

277
00:14:54,040 --> 00:15:00,760
aim to to group the whole<font color="#E5E5E5"> to</font><font color="#CCCCCC"> cluster</font>

278
00:14:57,639 --> 00:15:02,829
<font color="#CCCCCC">eyes</font><font color="#E5E5E5"> the whole 300 million mobile</font>

279
00:15:00,760 --> 00:15:05,589
database<font color="#E5E5E5"> we all need to search for a</font>

280
00:15:02,829 --> 00:15:07,180
small corpus and that way<font color="#E5E5E5"> we only need</font>

281
00:15:05,589 --> 00:15:10,389
to calculate<font color="#E5E5E5"> the</font><font color="#CCCCCC"> cross-reference between</font>

282
00:15:07,180 --> 00:15:14,199
every member of the corpus and<font color="#CCCCCC"> the 300</font>

283
00:15:10,389 --> 00:15:15,339
million<font color="#E5E5E5"> movers in the database so the</font>

284
00:15:14,199 --> 00:15:17,829
<font color="#E5E5E5">runs of our corpus</font>

285
00:15:15,339 --> 00:15:21,490
<font color="#E5E5E5">I collected through the months</font><font color="#CCCCCC"> contain</font>

286
00:15:17,829 --> 00:15:23,949
<font color="#CCCCCC">now contains 477 samples from 15</font>

287
00:15:21,490 --> 00:15:28,510
different families ransomware<font color="#E5E5E5"> families</font>

288
00:15:23,949 --> 00:15:31,060
and the<font color="#E5E5E5"> my implementation currently uses</font>

289
00:15:28,510 --> 00:15:34,060
one process only<font color="#E5E5E5"> on one</font>

290
00:15:31,060 --> 00:15:37,420
and for a search<font color="#E5E5E5"> for one sample so if</font>

291
00:15:34,060 --> 00:15:40,270
the inputs<font color="#CCCCCC"> scope is only contains one</font>

292
00:15:37,420 --> 00:15:43,120
sample<font color="#E5E5E5"> then</font><font color="#CCCCCC"> SS deep search is completed</font>

293
00:15:40,270 --> 00:15:45,460
in roughly<font color="#CCCCCC"> 10 or</font><font color="#E5E5E5"> 20 minutes for 300</font>

294
00:15:43,120 --> 00:15:48,880
million files<font color="#E5E5E5"> and 40 I say -</font><font color="#CCCCCC"> it's</font>

295
00:15:45,460 --> 00:15:51,520
<font color="#E5E5E5">roughly 50 50 minutes like I think</font>

296
00:15:48,880 --> 00:15:55,210
<font color="#E5E5E5">that's incredible and for the</font><font color="#CCCCCC"> 400</font><font color="#E5E5E5"> for</font>

297
00:15:51,520 --> 00:15:57,340
only 477 samples it took like<font color="#CCCCCC"> two days</font>

298
00:15:55,210 --> 00:16:01,830
for<font color="#E5E5E5"> the both for both of the hashes</font><font color="#CCCCCC"> to</font>

299
00:15:57,340 --> 00:16:06,400
complete yeah so it<font color="#E5E5E5"> is live I'm working</font>

300
00:16:01,830 --> 00:16:06,820
so<font color="#E5E5E5"> what I completed was I had a mobile</font>

301
00:16:06,400 --> 00:16:11,290
database

302
00:16:06,820 --> 00:16:14,170
<font color="#CCCCCC">I selected search corpus and through the</font>

303
00:16:11,290 --> 00:16:17,349
method and implementation of<font color="#CCCCCC"> TL Sh I was</font>

304
00:16:14,170 --> 00:16:21,160
able to find similar samples from this

305
00:16:17,350 --> 00:16:24,960
<font color="#E5E5E5">mobile database</font><font color="#CCCCCC"> and here's the same with</font>

306
00:16:21,160 --> 00:16:28,780
the first<font color="#CCCCCC"> tasks</font><font color="#E5E5E5"> so our first problem</font>

307
00:16:24,960 --> 00:16:31,390
yeah future work<font color="#CCCCCC"> as you could</font><font color="#E5E5E5"> see I only</font>

308
00:16:28,780 --> 00:16:33,790
used one process<font color="#E5E5E5"> in one thread now</font>

309
00:16:31,390 --> 00:16:36,010
parallelization<font color="#E5E5E5"> could result in much</font>

310
00:16:33,790 --> 00:16:40,300
<font color="#E5E5E5">better</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> could provide much</font><font color="#CCCCCC"> better</font>

311
00:16:36,010 --> 00:16:44,470
<font color="#CCCCCC">results like from yeah you know what I</font>

312
00:16:40,300 --> 00:16:49,709
mean<font color="#E5E5E5"> yeah I will widen this run summer</font>

313
00:16:44,470 --> 00:16:53,410
<font color="#E5E5E5">corpus to obtain</font><font color="#CCCCCC"> mainly</font><font color="#E5E5E5"> 20 or more</font>

314
00:16:49,710 --> 00:16:56,740
families and<font color="#E5E5E5"> more</font><font color="#CCCCCC"> samples</font><font color="#E5E5E5"> now I found I</font>

315
00:16:53,410 --> 00:16:59,980
looked at the source<font color="#CCCCCC"> code of both as he</font>

316
00:16:56,740 --> 00:17:03,820
has<font color="#E5E5E5"> sent</font><font color="#CCCCCC"> ILS age and I found that we</font>

317
00:16:59,980 --> 00:17:06,220
could<font color="#E5E5E5"> develop a better</font><font color="#CCCCCC"> LSH method so</font>

318
00:17:03,820 --> 00:17:10,030
both of these<font color="#CCCCCC"> locally sensitive</font><font color="#E5E5E5"> hashes</font>

319
00:17:06,220 --> 00:17:16,030
can<font color="#E5E5E5"> be easily fooled</font><font color="#CCCCCC"> if that was</font><font color="#E5E5E5"> the</font>

320
00:17:10,030 --> 00:17:21,730
<font color="#E5E5E5">intent of</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> a PT's and but we could</font>

321
00:17:16,030 --> 00:17:23,770
develop better<font color="#CCCCCC"> TLS LSH methods that</font><font color="#E5E5E5"> was</font>

322
00:17:21,730 --> 00:17:26,650
what<font color="#E5E5E5"> I found and it's a future work and</font>

323
00:17:23,770 --> 00:17:29,920
<font color="#E5E5E5">of course there is a chance for labeling</font>

324
00:17:26,650 --> 00:17:32,860
<font color="#E5E5E5">this 300 million mobile database but not</font>

325
00:17:29,920 --> 00:17:35,500
by comparing every two samples but by

326
00:17:32,860 --> 00:17:38,379
grouping them in small groups and only

327
00:17:35,500 --> 00:17:41,930
calculating new symbols distance from

328
00:17:38,380 --> 00:17:44,700
one or two<font color="#E5E5E5"> or a few members of the group</font>

329
00:17:41,930 --> 00:17:46,440
<font color="#CCCCCC">all right so that was my work and</font>

330
00:17:44,700 --> 00:17:49,170
presentation<font color="#E5E5E5"> thank you for your</font>

331
00:17:46,440 --> 00:17:51,710
<font color="#CCCCCC">attention</font><font color="#E5E5E5"> and if you have any questions</font>

332
00:17:49,170 --> 00:17:58,920
I'm<font color="#E5E5E5"> here</font>

333
00:17:51,710 --> 00:17:58,920
[Applause]

