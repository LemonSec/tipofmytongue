1
00:00:00,040 --> 00:00:05,800
so what can we<font color="#CCCCCC"> do when we have a party</font>

2
00:00:03,939 --> 00:00:09,520
allure and compatible source<font color="#E5E5E5"> codes and</font>

3
00:00:05,800 --> 00:00:12,250
we<font color="#CCCCCC"> can not</font><font color="#E5E5E5"> use</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> compiled aside and then</font>

4
00:00:09,520 --> 00:00:15,670
<font color="#E5E5E5">live so we can either build the small</font>

5
00:00:12,250 --> 00:00:19,060
parts to object files<font color="#CCCCCC"> its</font><font color="#E5E5E5"> CPP or zip</font>

6
00:00:15,670 --> 00:00:22,240
file or<font color="#CCCCCC"> whatever and then importing them</font>

7
00:00:19,060 --> 00:00:24,430
<font color="#E5E5E5">but it's tight</font><font color="#CCCCCC"> zone and it doesn't</font>

8
00:00:22,240 --> 00:00:26,198
<font color="#CCCCCC">probably work</font><font color="#E5E5E5"> because most of the time</font>

9
00:00:24,430 --> 00:00:28,090
the files that you<font color="#E5E5E5"> cannot compile are</font>

10
00:00:26,199 --> 00:00:30,580
actually the<font color="#CCCCCC"> most interesting ones</font><font color="#E5E5E5"> or</font>

11
00:00:28,090 --> 00:00:33,219
someone writes a tool for doing it and

12
00:00:30,580 --> 00:00:35,349
we don't<font color="#CCCCCC"> have</font><font color="#E5E5E5"> to do that in</font><font color="#CCCCCC"> a bit</font>

13
00:00:33,219 --> 00:00:37,749
masochistic in the<font color="#CCCCCC"> census and it was for</font>

14
00:00:35,350 --> 00:00:45,069
<font color="#E5E5E5">me</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> very interesting computer science</font>

15
00:00:37,749 --> 00:00:48,159
problem so when I started having not

16
00:00:45,069 --> 00:00:51,579
<font color="#E5E5E5">ride the</font><font color="#CCCCCC"> US</font><font color="#E5E5E5"> when I was researching soon</font>

17
00:00:48,159 --> 00:00:53,289
and<font color="#CCCCCC"> nameís security product a navy and I</font>

18
00:00:51,579 --> 00:00:55,209
realized<font color="#E5E5E5"> that there was a big source</font>

19
00:00:53,289 --> 00:00:58,869
code leak that happened at more than<font color="#E5E5E5"> 10</font>

20
00:00:55,209 --> 00:01:01,479
years<font color="#CCCCCC"> ago so I</font><font color="#E5E5E5"> don't know this that</font><font color="#CCCCCC"> leak</font>

21
00:00:58,869 --> 00:01:04,629
source code and try it to build it there

22
00:01:01,479 --> 00:01:06,670
was no way to<font color="#E5E5E5"> build that short code also</font>

23
00:01:04,629 --> 00:01:09,010
<font color="#CCCCCC">I didn't have</font><font color="#E5E5E5"> many of the</font><font color="#CCCCCC"> headers that</font>

24
00:01:06,670 --> 00:01:11,140
<font color="#E5E5E5">were required that</font><font color="#CCCCCC"> we're fighters</font><font color="#E5E5E5"> I</font>

25
00:01:09,010 --> 00:01:14,310
didn't have many<font color="#E5E5E5"> of the libraries</font><font color="#CCCCCC"> that</font>

26
00:01:11,140 --> 00:01:18,190
were required as<font color="#E5E5E5"> the compiler views were</font>

27
00:01:14,310 --> 00:01:20,350
<font color="#CCCCCC">data's from more than 10 years ago</font><font color="#E5E5E5"> the</font>

28
00:01:18,190 --> 00:01:22,750
<font color="#E5E5E5">only files that I'd managed to compile</font>

29
00:01:20,350 --> 00:01:28,270
were very small ones the ones that I

30
00:01:22,750 --> 00:01:31,240
<font color="#E5E5E5">really didn't care so I ends up trying</font>

31
00:01:28,270 --> 00:01:34,660
to port symbols and manually<font color="#CCCCCC"> using my</font>

32
00:01:31,240 --> 00:01:37,479
brain<font color="#E5E5E5"> and that's it so things like</font><font color="#CCCCCC"> ok I</font>

33
00:01:34,660 --> 00:01:39,880
will<font color="#E5E5E5"> find that string constant in both</font>

34
00:01:37,480 --> 00:01:42,640
the source<font color="#E5E5E5"> code and in the</font><font color="#CCCCCC"> binary and if</font>

35
00:01:39,880 --> 00:01:44,800
a function match because the string is

36
00:01:42,640 --> 00:01:47,650
only<font color="#CCCCCC"> reference s in this or that</font><font color="#E5E5E5"> fancy</font>

37
00:01:44,800 --> 00:01:51,429
<font color="#E5E5E5">on I can rename</font><font color="#CCCCCC"> it myself in either</font><font color="#E5E5E5"> then</font>

38
00:01:47,650 --> 00:01:53,830
also finding nearby functions<font color="#E5E5E5"> and after</font>

39
00:01:51,430 --> 00:01:57,909
a while<font color="#CCCCCC"> I said</font><font color="#E5E5E5"> this is stupid</font><font color="#CCCCCC"> I solve</font>

40
00:01:53,830 --> 00:02:02,620
automated somehow<font color="#E5E5E5"> so I open it my to-do</font>

41
00:01:57,909 --> 00:02:05,650
list<font color="#CCCCCC"> right</font><font color="#E5E5E5"> the idea</font><font color="#CCCCCC"> and choose three</font>

42
00:02:02,620 --> 00:02:08,679
years<font color="#CCCCCC"> later I</font><font color="#E5E5E5"> started working on it so</font>

43
00:02:05,650 --> 00:02:10,959
little<font color="#E5E5E5"> cyber it was playing I started</font>

44
00:02:08,679 --> 00:02:13,330
<font color="#E5E5E5">working on</font><font color="#CCCCCC"> this tool name is Piraeus</font>

45
00:02:10,959 --> 00:02:17,430
<font color="#CCCCCC">which is Greek for</font><font color="#E5E5E5"> sources in source</font>

46
00:02:13,330 --> 00:02:20,530
<font color="#CCCCCC">in 2017 the very first with a</font><font color="#E5E5E5"> mean tiny</font>

47
00:02:17,430 --> 00:02:23,050
version or prototype of the tool<font color="#E5E5E5"> took me</font>

48
00:02:20,530 --> 00:02:26,950
around one month<font color="#E5E5E5"> to write</font><font color="#CCCCCC"> mainly because</font>

49
00:02:23,050 --> 00:02:28,990
<font color="#E5E5E5">I didn't have any tool or framework to</font>

50
00:02:26,950 --> 00:02:32,950
<font color="#CCCCCC">work probably</font><font color="#E5E5E5"> with source codes</font><font color="#CCCCCC"> as we</font>

51
00:02:28,990 --> 00:02:34,780
have<font color="#CCCCCC"> Ida for working with</font><font color="#E5E5E5"> minor ease if</font>

52
00:02:32,950 --> 00:02:37,630
the rain has<font color="#CCCCCC"> our</font><font color="#E5E5E5"> very basic</font>

53
00:02:34,780 --> 00:02:39,850
pretty pretty basic<font color="#E5E5E5"> and greedy</font><font color="#CCCCCC"> Manjari</font>

54
00:02:37,630 --> 00:02:41,950
framework for working<font color="#CCCCCC"> with source</font><font color="#E5E5E5"> code</font><font color="#CCCCCC"> I</font>

55
00:02:39,850 --> 00:02:47,380
call distract scenes from the source

56
00:02:41,950 --> 00:02:50,560
<font color="#E5E5E5">code and start comparing things okay so</font>

57
00:02:47,380 --> 00:02:53,500
how does suit tool work like the ionic

58
00:02:50,560 --> 00:02:55,450
<font color="#E5E5E5">road so basically what we need to do for</font>

59
00:02:53,500 --> 00:02:56,920
porting symbols or<font color="#E5E5E5"> define matching</font>

60
00:02:55,450 --> 00:03:00,670
<font color="#CCCCCC">functions between</font><font color="#E5E5E5"> source codes and</font>

61
00:02:56,920 --> 00:03:04,540
binaries is to parse the binaries we can

62
00:03:00,670 --> 00:03:06,549
do<font color="#E5E5E5"> it easily with</font><font color="#CCCCCC"> Ida as well as we have</font>

63
00:03:04,540 --> 00:03:08,200
to part the source code<font color="#E5E5E5"> this is a bit</font>

64
00:03:06,550 --> 00:03:10,140
more problematic<font color="#CCCCCC"> because there is no</font>

65
00:03:08,200 --> 00:03:14,079
such<font color="#E5E5E5"> a tool like Ida for source code</font>

66
00:03:10,140 --> 00:03:18,010
then we<font color="#CCCCCC"> extract sims artifacts for</font><font color="#E5E5E5"> its</font>

67
00:03:14,080 --> 00:03:21,160
<font color="#CCCCCC">phantom found</font><font color="#E5E5E5"> in its in its</font><font color="#CCCCCC"> fantail</font>

68
00:03:18,010 --> 00:03:23,230
source code we<font color="#E5E5E5"> strike the</font><font color="#CCCCCC"> same artifacts</font>

69
00:03:21,160 --> 00:03:26,079
for its function<font color="#E5E5E5"> founds in the binaries</font>

70
00:03:23,230 --> 00:03:28,720
and then with the artifacts<font color="#E5E5E5"> construct we</font>

71
00:03:26,080 --> 00:03:31,300
just match them<font color="#E5E5E5"> we compare and if the</font>

72
00:03:28,720 --> 00:03:34,030
artifacts are the same or similar<font color="#E5E5E5"> it is</font>

73
00:03:31,300 --> 00:03:36,670
a match<font color="#E5E5E5"> and then this is a part that is</font>

74
00:03:34,030 --> 00:03:39,160
not<font color="#E5E5E5"> funny because pretty hard we</font>

75
00:03:36,670 --> 00:03:43,660
calculate an accuracy ratio<font color="#E5E5E5"> that's it</font>

76
00:03:39,160 --> 00:03:46,180
how similar or<font color="#CCCCCC"> whole relators are both</font>

77
00:03:43,660 --> 00:03:48,220
<font color="#E5E5E5">phantoms</font><font color="#CCCCCC"> that we match and basically</font>

78
00:03:46,180 --> 00:03:50,200
this<font color="#CCCCCC"> is all the tool that is a bit</font><font color="#E5E5E5"> more</font>

79
00:03:48,220 --> 00:03:53,680
complex than<font color="#CCCCCC"> what</font><font color="#E5E5E5"> I say here but</font>

80
00:03:50,200 --> 00:03:56,589
basically<font color="#E5E5E5"> it's only what</font><font color="#CCCCCC"> it does so</font>

81
00:03:53,680 --> 00:04:00,030
<font color="#CCCCCC">parson as I said we</font><font color="#E5E5E5"> can easily extract</font>

82
00:03:56,590 --> 00:04:02,830
information<font color="#E5E5E5"> from binaries using</font><font color="#CCCCCC"> either</font>

83
00:04:00,030 --> 00:04:05,800
but<font color="#E5E5E5"> unfortunately there isn't anything</font>

84
00:04:02,830 --> 00:04:08,410
even remotely close<font color="#CCCCCC"> to either</font><font color="#E5E5E5"> for source</font>

85
00:04:05,800 --> 00:04:11,320
code the most similar<font color="#E5E5E5"> team parolees</font>

86
00:04:08,410 --> 00:04:13,600
acetals<font color="#E5E5E5"> understands some people here I</font>

87
00:04:11,320 --> 00:04:15,970
insert<font color="#E5E5E5"> that uses it or at</font><font color="#CCCCCC"> least know</font>

88
00:04:13,600 --> 00:04:20,769
that<font color="#E5E5E5"> you but it's not even remotely</font>

89
00:04:15,970 --> 00:04:23,289
close<font color="#E5E5E5"> to what you can get from either so</font>

90
00:04:20,769 --> 00:04:24,730
<font color="#CCCCCC">part in source code is the first problem</font>

91
00:04:23,289 --> 00:04:28,780
<font color="#CCCCCC">that</font><font color="#E5E5E5"> I had to</font>

92
00:04:24,730 --> 00:04:30,940
somehow<font color="#CCCCCC"> solve for me so some people</font>

93
00:04:28,780 --> 00:04:32,500
<font color="#E5E5E5">believe</font><font color="#CCCCCC"> that part in source</font><font color="#E5E5E5"> code is an</font>

94
00:04:30,940 --> 00:04:35,350
already<font color="#CCCCCC"> solved problem because we have</font>

95
00:04:32,500 --> 00:04:38,590
compilers<font color="#CCCCCC"> and</font><font color="#E5E5E5"> stuff but it's far from</font>

96
00:04:35,350 --> 00:04:41,320
<font color="#CCCCCC">being a solve process at all</font><font color="#E5E5E5"> so yeah we</font>

97
00:04:38,590 --> 00:04:42,940
can<font color="#E5E5E5"> parse one dialect of whatever</font>

98
00:04:41,320 --> 00:04:45,909
language we<font color="#E5E5E5"> support or we want to</font>

99
00:04:42,940 --> 00:04:48,310
<font color="#E5E5E5">support if we are</font><font color="#CCCCCC"> writing a compiler and</font>

100
00:04:45,910 --> 00:04:50,890
that's all but in your case we want to

101
00:04:48,310 --> 00:04:53,050
<font color="#E5E5E5">support any and all</font><font color="#CCCCCC"> violets of any of</font>

102
00:04:50,890 --> 00:04:56,590
all the languages<font color="#E5E5E5"> that we want to</font>

103
00:04:53,050 --> 00:04:59,080
<font color="#E5E5E5">support in my case I decided to stick to</font>

104
00:04:56,590 --> 00:05:03,460
<font color="#E5E5E5">C and all the supported C</font><font color="#CCCCCC"> language for</font>

105
00:04:59,080 --> 00:05:07,200
now but still I<font color="#E5E5E5"> mean</font><font color="#CCCCCC"> only supporting the</font>

106
00:05:03,460 --> 00:05:10,349
C<font color="#E5E5E5"> language is predict pretty hard why</font>

107
00:05:07,200 --> 00:05:13,930
it's compiler behaves<font color="#E5E5E5"> and</font><font color="#CCCCCC"> super very</font>

108
00:05:10,350 --> 00:05:16,690
different<font color="#E5E5E5"> a subset or a very different</font>

109
00:05:13,930 --> 00:05:19,450
dialect of the<font color="#CCCCCC"> C language</font><font color="#E5E5E5"> some of</font><font color="#CCCCCC"> the</font>

110
00:05:16,690 --> 00:05:21,730
scenes<font color="#E5E5E5"> that are more different between</font>

111
00:05:19,450 --> 00:05:24,310
compilers<font color="#E5E5E5"> are for example compiler</font>

112
00:05:21,730 --> 00:05:27,820
extensions<font color="#CCCCCC"> something's that came</font><font color="#E5E5E5"> to mind</font>

113
00:05:24,310 --> 00:05:29,340
<font color="#E5E5E5">quickly</font><font color="#CCCCCC"> I rotate him around</font><font color="#E5E5E5"> maybe 20</font>

114
00:05:27,820 --> 00:05:33,730
seconds or<font color="#CCCCCC"> something like</font><font color="#E5E5E5"> that</font>

115
00:05:29,340 --> 00:05:35,830
pragmas pragmas are in support by all

116
00:05:33,730 --> 00:05:38,110
compilers and<font color="#CCCCCC"> it's compiler</font><font color="#E5E5E5"> implement</font>

117
00:05:35,830 --> 00:05:40,900
them in a different<font color="#CCCCCC"> way recompile of</font>

118
00:05:38,110 --> 00:05:43,420
headers so if you<font color="#E5E5E5"> include a precompiled</font>

119
00:05:40,900 --> 00:05:45,039
header<font color="#CCCCCC"> using the microsoft compilers you</font>

120
00:05:43,420 --> 00:05:47,560
can write<font color="#E5E5E5"> do whatever you want</font><font color="#CCCCCC"> I'm into</font>

121
00:05:45,040 --> 00:05:48,580
<font color="#E5E5E5">binary</font><font color="#CCCCCC"> data before do you</font><font color="#E5E5E5"> include the</font>

122
00:05:47,560 --> 00:05:51,100
pre compilers hello

123
00:05:48,580 --> 00:05:52,780
of course it is not support with any

124
00:05:51,100 --> 00:05:55,450
other compiler but the Microsoft

125
00:05:52,780 --> 00:05:57,880
compilers<font color="#E5E5E5"> Alassane</font><font color="#CCCCCC"> omitting the middle</font>

126
00:05:55,450 --> 00:06:00,159
operands of a journaiist ratio so<font color="#CCCCCC"> we</font>

127
00:05:57,880 --> 00:06:02,620
have<font color="#E5E5E5"> X</font><font color="#CCCCCC"> integration nothing</font>

128
00:06:00,160 --> 00:06:05,800
point point<font color="#CCCCCC"> Y this</font><font color="#E5E5E5"> is an extension</font><font color="#CCCCCC"> that</font>

129
00:06:02,620 --> 00:06:08,290
this<font color="#E5E5E5"> only support I did see embedded</font>

130
00:06:05,800 --> 00:06:10,510
assembler differences<font color="#E5E5E5"> for example</font><font color="#CCCCCC"> if you</font>

131
00:06:08,290 --> 00:06:12,910
grow it<font color="#E5E5E5"> embedded assembler for the</font>

132
00:06:10,510 --> 00:06:15,880
Microsoft compilers and<font color="#E5E5E5"> for the GCC or</font>

133
00:06:12,910 --> 00:06:18,490
<font color="#E5E5E5">si</font><font color="#CCCCCC"> Lang</font><font color="#E5E5E5"> it is totally different switch</font>

134
00:06:15,880 --> 00:06:20,260
case ranges<font color="#E5E5E5"> out of class definition of</font>

135
00:06:18,490 --> 00:06:23,430
the static cons integrals for<font color="#CCCCCC"> a new</font>

136
00:06:20,260 --> 00:06:26,469
members which is only<font color="#E5E5E5"> support Microsoft</font>

137
00:06:23,430 --> 00:06:29,230
<font color="#E5E5E5">finally what we answered is writing</font>

138
00:06:26,470 --> 00:06:30,610
<font color="#CCCCCC">usually workarounds for its compiler</font>

139
00:06:29,230 --> 00:06:33,400
that<font color="#E5E5E5"> we want to support</font><font color="#CCCCCC"> when we are</font>

140
00:06:30,610 --> 00:06:35,820
calling<font color="#E5E5E5"> and when we are trying to parse</font>

141
00:06:33,400 --> 00:06:37,539
them we are actually doing<font color="#E5E5E5"> the same</font>

142
00:06:35,820 --> 00:06:40,570
<font color="#E5E5E5">using</font>

143
00:06:37,540 --> 00:06:42,730
hugly workarounds to support that<font color="#E5E5E5"> the</font>

144
00:06:40,570 --> 00:06:46,150
specific feature<font color="#E5E5E5"> of this compiler or</font>

145
00:06:42,730 --> 00:06:49,000
that compiler<font color="#E5E5E5"> and also</font><font color="#CCCCCC"> when trying</font><font color="#E5E5E5"> to</font>

146
00:06:46,150 --> 00:06:53,650
work<font color="#E5E5E5"> around compiler backs that same may</font>

147
00:06:49,000 --> 00:06:56,650
<font color="#E5E5E5">be rare or weird for you</font><font color="#CCCCCC"> but it's not if</font>

148
00:06:53,650 --> 00:06:58,750
you<font color="#CCCCCC"> don't trust me</font><font color="#E5E5E5"> try searching doing</font>

149
00:06:56,650 --> 00:07:00,909
any<font color="#CCCCCC"> of the searches for example indeed</font>

150
00:06:58,750 --> 00:07:04,210
<font color="#E5E5E5">have and you will have tons of results</font>

151
00:07:00,910 --> 00:07:08,080
<font color="#E5E5E5">of people having the</font><font color="#CCCCCC"> same problems so</font>

152
00:07:04,210 --> 00:07:10,060
how can we<font color="#E5E5E5"> parse source codes for</font>

153
00:07:08,080 --> 00:07:11,830
<font color="#E5E5E5">example</font><font color="#CCCCCC"> for my first prototype I use</font>

154
00:07:10,060 --> 00:07:15,250
spicy parser<font color="#CCCCCC"> oops</font><font color="#E5E5E5"> sorry</font>

155
00:07:11,830 --> 00:07:18,010
<font color="#E5E5E5">maybe you know maybe you know it it's a</font>

156
00:07:15,250 --> 00:07:20,380
Python library for parts<font color="#E5E5E5"> in C source</font>

157
00:07:18,010 --> 00:07:23,590
<font color="#CCCCCC">codes it is squeezed enough for a quick</font>

158
00:07:20,380 --> 00:07:25,390
prototype or for a new central tool but

159
00:07:23,590 --> 00:07:28,210
I don't recommend<font color="#E5E5E5"> you using it for</font>

160
00:07:25,390 --> 00:07:31,060
<font color="#CCCCCC">anything half serious</font><font color="#E5E5E5"> another option is</font>

161
00:07:28,210 --> 00:07:35,469
using<font color="#CCCCCC"> Flags</font><font color="#E5E5E5"> bison and TL are right or</font>

162
00:07:31,060 --> 00:07:37,750
wrong one to two parts to write a parser

163
00:07:35,470 --> 00:07:39,610
for the C language or<font color="#E5E5E5"> whatever the</font>

164
00:07:37,750 --> 00:07:41,410
<font color="#CCCCCC">language that you have to</font><font color="#E5E5E5"> support but</font>

165
00:07:39,610 --> 00:07:44,040
your project<font color="#CCCCCC"> is not whatever</font><font color="#E5E5E5"> you want to</font>

166
00:07:41,410 --> 00:07:46,900
do<font color="#E5E5E5"> anymore your project now is</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> in</font>

167
00:07:44,040 --> 00:07:49,390
<font color="#CCCCCC">parser</font><font color="#E5E5E5"> so I don't</font><font color="#CCCCCC"> recommend you doing so</font>

168
00:07:46,900 --> 00:07:51,280
another<font color="#CCCCCC"> option is like the people from</font>

169
00:07:49,390 --> 00:07:54,039
<font color="#CCCCCC">Nesta tools understands</font><font color="#E5E5E5"> or</font><font color="#CCCCCC"> Fabian</font>

170
00:07:51,280 --> 00:07:58,119
<font color="#CCCCCC">yamaguchi</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> too</font><font color="#E5E5E5"> great a fuzzy parser</font>

171
00:07:54,040 --> 00:08:00,550
like your so it's basically like<font color="#E5E5E5"> the</font>

172
00:07:58,120 --> 00:08:02,500
<font color="#E5E5E5">pre-european your</font><font color="#CCCCCC"> point is</font><font color="#E5E5E5"> not</font><font color="#CCCCCC"> anymore</font>

173
00:08:00,550 --> 00:08:05,380
<font color="#CCCCCC">right</font><font color="#E5E5E5"> in that tool that</font><font color="#CCCCCC"> you have</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> mind</font>

174
00:08:02,500 --> 00:08:08,070
but<font color="#E5E5E5"> writing a parser but with less rules</font>

175
00:08:05,380 --> 00:08:10,690
<font color="#CCCCCC">I don't recommend any</font><font color="#E5E5E5"> of these options</font>

176
00:08:08,070 --> 00:08:13,840
<font color="#E5E5E5">another one if you hate</font><font color="#CCCCCC"> yourself</font><font color="#E5E5E5"> it's</font>

177
00:08:10,690 --> 00:08:17,770
using GCC XML or<font color="#E5E5E5"> something related to</font>

178
00:08:13,840 --> 00:08:20,229
GCC<font color="#CCCCCC"> present also if you have a rich</font>

179
00:08:17,770 --> 00:08:23,890
uncle<font color="#E5E5E5"> in America or if you are in a</font>

180
00:08:20,230 --> 00:08:25,530
<font color="#CCCCCC">university you can maybe get a license</font>

181
00:08:23,890 --> 00:08:28,780
for the<font color="#CCCCCC"> Edison the sync group</font>

182
00:08:25,530 --> 00:08:31,630
<font color="#CCCCCC">C++ front-ends</font><font color="#E5E5E5"> these are the de-facto</font>

183
00:08:28,780 --> 00:08:33,429
ones actually<font color="#E5E5E5"> they support different</font>

184
00:08:31,630 --> 00:08:36,250
<font color="#E5E5E5">compilers and Emin</font>

185
00:08:33,429 --> 00:08:39,579
different compiler version backs<font color="#E5E5E5"> it is</font>

186
00:08:36,250 --> 00:08:42,309
also<font color="#E5E5E5"> but it's not simple and otherwise</font>

187
00:08:39,580 --> 00:08:44,500
if you are<font color="#E5E5E5"> poor</font><font color="#CCCCCC"> like I</font><font color="#E5E5E5"> mean like me the</font>

188
00:08:42,309 --> 00:08:47,500
only remaining choice is using si<font color="#CCCCCC"> Lang</font>

189
00:08:44,500 --> 00:08:50,980
<font color="#E5E5E5">and either the</font><font color="#CCCCCC"> bendings for Python which</font>

190
00:08:47,500 --> 00:08:51,310
is what I am<font color="#CCCCCC"> using</font><font color="#E5E5E5"> or</font><font color="#CCCCCC"> the api's 40 and</font>

191
00:08:50,980 --> 00:08:55,510
zebras

192
00:08:51,310 --> 00:08:58,180
less so the<font color="#E5E5E5"> give science of using the</font>

193
00:08:55,510 --> 00:09:02,160
<font color="#CCCCCC">ceilin peetam bindings is that you have</font>

194
00:08:58,180 --> 00:09:05,680
support<font color="#E5E5E5"> for Linux Windows Mac</font><font color="#CCCCCC"> um FreeBSD</font>

195
00:09:02,160 --> 00:09:09,100
<font color="#CCCCCC">you get a master at syntax tree</font><font color="#E5E5E5"> an ast</font>

196
00:09:05,680 --> 00:09:12,250
<font color="#E5E5E5">for its</font><font color="#CCCCCC"> Pantheon regardless of it having</font>

197
00:09:09,100 --> 00:09:15,279
<font color="#CCCCCC">errors or not</font><font color="#E5E5E5"> even</font><font color="#CCCCCC"> if it is grown the</font>

198
00:09:12,250 --> 00:09:18,790
<font color="#CCCCCC">Pantheon or du Lac</font><font color="#E5E5E5"> so instructor or so</font>

199
00:09:15,279 --> 00:09:21,220
naneun definition it will a still gives

200
00:09:18,790 --> 00:09:23,800
you an<font color="#CCCCCC"> ast this is just what I want for</font>

201
00:09:21,220 --> 00:09:25,990
<font color="#CCCCCC">the Troy yet</font><font color="#E5E5E5"> an answer you get support</font>

202
00:09:23,800 --> 00:09:28,900
<font color="#E5E5E5">for anything to the salon</font><font color="#CCCCCC"> front-end</font>

203
00:09:25,990 --> 00:09:33,000
<font color="#E5E5E5">support for example now the</font><font color="#CCCCCC"> ceiling guys</font>

204
00:09:28,900 --> 00:09:35,319
are working<font color="#E5E5E5"> on the</font><font color="#CCCCCC"> Microsoft Visual C++</font>

205
00:09:33,000 --> 00:09:37,290
extensions<font color="#CCCCCC"> that's it</font><font color="#E5E5E5"> supporting</font>

206
00:09:35,320 --> 00:09:41,410
everything<font color="#E5E5E5"> that the Microsoft compilers</font>

207
00:09:37,290 --> 00:09:43,120
support<font color="#E5E5E5"> the bastions of decency Lang is</font>

208
00:09:41,410 --> 00:09:45,459
that for<font color="#CCCCCC"> example the</font><font color="#E5E5E5"> ceiling developers</font>

209
00:09:43,120 --> 00:09:48,730
don't really care<font color="#CCCCCC"> about the</font><font color="#E5E5E5"> bindings or</font>

210
00:09:45,460 --> 00:09:51,220
the api's so every time you need<font color="#CCCCCC"> to the</font>

211
00:09:48,730 --> 00:09:53,830
<font color="#CCCCCC">sun's in forget about asking them or</font>

212
00:09:51,220 --> 00:09:56,110
taking<font color="#E5E5E5"> how to do it in a documented way</font>

213
00:09:53,830 --> 00:09:58,330
because<font color="#E5E5E5"> most of the time they</font><font color="#CCCCCC"> don't</font>

214
00:09:56,110 --> 00:09:59,770
support<font color="#E5E5E5"> it and they don't care</font><font color="#CCCCCC"> for</font>

215
00:09:58,330 --> 00:10:04,480
example<font color="#CCCCCC"> let's say that</font><font color="#E5E5E5"> we have an</font>

216
00:09:59,770 --> 00:10:06,579
assignment<font color="#E5E5E5"> like int I equal to</font><font color="#CCCCCC"> write we</font>

217
00:10:04,480 --> 00:10:10,300
expect to have a<font color="#E5E5E5"> documented way to get</font>

218
00:10:06,580 --> 00:10:12,430
that integer literal value the<font color="#CCCCCC"> to well</font>

219
00:10:10,300 --> 00:10:14,829
there is no documented<font color="#CCCCCC"> weight for doing</font>

220
00:10:12,430 --> 00:10:17,500
so and there is no as<font color="#E5E5E5"> perfect way what</font>

221
00:10:14,830 --> 00:10:20,470
we all<font color="#CCCCCC"> end doing</font><font color="#E5E5E5"> is we get that</font>

222
00:10:17,500 --> 00:10:22,900
expression we get the tokens<font color="#E5E5E5"> and we</font>

223
00:10:20,470 --> 00:10:26,850
parcel shelf the tokens which is not

224
00:10:22,900 --> 00:10:31,060
pretty but it's the best<font color="#E5E5E5"> we can do</font>

225
00:10:26,850 --> 00:10:33,550
so extracting<font color="#CCCCCC"> artifacts so as I said I'm</font>

226
00:10:31,060 --> 00:10:36,790
<font color="#CCCCCC">using the ceilin</font><font color="#E5E5E5"> Python bindings to</font>

227
00:10:33,550 --> 00:10:39,089
party source codes<font color="#CCCCCC"> we get the</font><font color="#E5E5E5"> ast</font><font color="#CCCCCC"> for</font>

228
00:10:36,790 --> 00:10:42,699
<font color="#E5E5E5">its</font><font color="#CCCCCC"> Pantheon and then we extract</font><font color="#E5E5E5"> things</font>

229
00:10:39,089 --> 00:10:44,589
also<font color="#E5E5E5"> using either Python we extract the</font>

230
00:10:42,700 --> 00:10:47,140
same artifacts the same things from<font color="#CCCCCC"> the</font>

231
00:10:44,589 --> 00:10:50,080
source code<font color="#CCCCCC"> and</font><font color="#E5E5E5"> from the binaries but</font>

232
00:10:47,140 --> 00:10:52,209
what<font color="#CCCCCC"> artifacts edges oh just one same</font>

233
00:10:50,080 --> 00:10:54,610
<font color="#E5E5E5">and you</font><font color="#CCCCCC"> see</font><font color="#E5E5E5"> neither but one can use</font>

234
00:10:52,209 --> 00:10:58,180
binary<font color="#E5E5E5"> in India or Ferrari or whatever</font>

235
00:10:54,610 --> 00:11:01,330
else as far<font color="#CCCCCC"> as you can get</font><font color="#E5E5E5"> at the</font><font color="#CCCCCC"> cert</font>

236
00:10:58,180 --> 00:11:04,030
<font color="#E5E5E5">effects so what I'm actually extracting</font>

237
00:11:01,330 --> 00:11:05,000
now is pretty pretty pretty easy which

238
00:11:04,030 --> 00:11:06,829
are strings

239
00:11:05,000 --> 00:11:09,740
<font color="#CCCCCC">from the binaries</font><font color="#E5E5E5"> and the source code</font>

240
00:11:06,830 --> 00:11:11,810
<font color="#E5E5E5">the number of loops</font><font color="#CCCCCC"> conditions something</font>

241
00:11:09,740 --> 00:11:14,570
<font color="#CCCCCC">called sister nulls and Global's that a</font>

242
00:11:11,810 --> 00:11:17,630
<font color="#E5E5E5">fountain half the number</font><font color="#CCCCCC"> of switches</font>

243
00:11:14,570 --> 00:11:19,190
under cases<font color="#E5E5E5"> for its phantom and if the</font>

244
00:11:17,630 --> 00:11:21,290
fans here<font color="#CCCCCC"> need records ship or</font><font color="#E5E5E5"> not</font>

245
00:11:19,190 --> 00:11:23,750
because not<font color="#E5E5E5"> all</font><font color="#CCCCCC"> functions are records if</font>

246
00:11:21,290 --> 00:11:26,870
so it is a good indicator<font color="#E5E5E5"> for some</font>

247
00:11:23,750 --> 00:11:29,360
matches<font color="#CCCCCC"> and also the list</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> Col is</font><font color="#E5E5E5"> not</font>

248
00:11:26,870 --> 00:11:31,550
<font color="#E5E5E5">a list of colors but the list of</font><font color="#CCCCCC"> collies</font>

249
00:11:29,360 --> 00:11:32,900
that's it defendants that<font color="#E5E5E5"> is are being</font>

250
00:11:31,550 --> 00:11:34,819
called from<font color="#E5E5E5"> the function</font><font color="#CCCCCC"> that we are</font>

251
00:11:32,900 --> 00:11:36,770
<font color="#E5E5E5">analyzing at that moment</font><font color="#CCCCCC"> i will later on</font>

252
00:11:34,820 --> 00:11:40,000
<font color="#CCCCCC">this plane</font><font color="#E5E5E5"> who</font><font color="#CCCCCC"> i'm not</font><font color="#E5E5E5"> using the colors</font>

253
00:11:36,770 --> 00:11:43,250
and yes the call is so finding<font color="#E5E5E5"> matches</font>

254
00:11:40,000 --> 00:11:44,990
basically when i extract scenes from the

255
00:11:43,250 --> 00:11:48,170
<font color="#E5E5E5">short code or from the binary what I do</font>

256
00:11:44,990 --> 00:11:50,030
is I create<font color="#CCCCCC"> and sq2</font><font color="#E5E5E5"> SQLite databases one</font>

257
00:11:48,170 --> 00:11:52,219
from the source code<font color="#CCCCCC"> and another one</font><font color="#E5E5E5"> for</font>

258
00:11:50,030 --> 00:11:54,500
<font color="#E5E5E5">the binaries and then a person SQL</font>

259
00:11:52,220 --> 00:11:56,000
queries<font color="#E5E5E5"> this is the very very very first</font>

260
00:11:54,500 --> 00:11:59,270
<font color="#E5E5E5">one SQL query</font>

261
00:11:56,000 --> 00:12:01,190
if you<font color="#CCCCCC"> check</font><font color="#E5E5E5"> here the only thing</font><font color="#CCCCCC"> that</font>

262
00:11:59,270 --> 00:12:03,680
I'm really<font color="#CCCCCC"> doing is comparing</font><font color="#E5E5E5"> the</font>

263
00:12:01,190 --> 00:12:07,130
constants<font color="#E5E5E5"> the number of concern is that</font>

264
00:12:03,680 --> 00:12:11,689
this is the string constants<font color="#E5E5E5"> in a JSON</font>

265
00:12:07,130 --> 00:12:13,520
object<font color="#E5E5E5"> I checked that it has concerns</font>

266
00:12:11,690 --> 00:12:16,100
that<font color="#CCCCCC"> the number</font><font color="#E5E5E5"> of conditions is</font><font color="#CCCCCC"> also</font>

267
00:12:13,520 --> 00:12:20,030
the same or similar that the number<font color="#E5E5E5"> of</font>

268
00:12:16,100 --> 00:12:20,800
loops<font color="#E5E5E5"> is actually the same this first</font>

269
00:12:20,030 --> 00:12:25,459
query

270
00:12:20,800 --> 00:12:28,430
produces very little results for<font color="#E5E5E5"> example</font>

271
00:12:25,460 --> 00:12:32,780
when I was<font color="#CCCCCC"> writing</font><font color="#E5E5E5"> my first prototype it</font>

272
00:12:28,430 --> 00:12:38,420
only matters<font color="#CCCCCC"> ninety functions</font><font color="#E5E5E5"> out of</font>

273
00:12:32,780 --> 00:12:40,819
more than<font color="#CCCCCC"> 4800</font><font color="#E5E5E5"> phantoms it's pretty bad</font>

274
00:12:38,420 --> 00:12:42,589
or<font color="#CCCCCC"> might look</font><font color="#E5E5E5"> like</font><font color="#CCCCCC"> pretty bad</font><font color="#E5E5E5"> but</font>

275
00:12:40,820 --> 00:12:45,740
<font color="#CCCCCC">actually it's not</font><font color="#E5E5E5"> because</font><font color="#CCCCCC"> definition</font>

276
00:12:42,590 --> 00:12:47,810
results were with<font color="#CCCCCC"> share of false</font>

277
00:12:45,740 --> 00:12:50,330
positives<font color="#E5E5E5"> which is a pretty nice to</font>

278
00:12:47,810 --> 00:12:55,520
start<font color="#E5E5E5"> and from that I can continually</font>

279
00:12:50,330 --> 00:12:58,520
<font color="#E5E5E5">dig in app so yes is</font><font color="#CCCCCC"> that when you have</font>

280
00:12:55,520 --> 00:13:01,579
near zero<font color="#E5E5E5"> false positives we can then</font>

281
00:12:58,520 --> 00:13:04,280
use this<font color="#CCCCCC"> result</font><font color="#E5E5E5"> as initial results and</font>

282
00:13:01,580 --> 00:13:12,500
from then apply some heuristics<font color="#CCCCCC"> to find</font>

283
00:13:04,280 --> 00:13:14,360
<font color="#CCCCCC">Marty another problem</font><font color="#E5E5E5"> but the same is</font>

284
00:13:12,500 --> 00:13:16,970
the initial results we know that they

285
00:13:14,360 --> 00:13:18,630
are<font color="#CCCCCC"> pretty good</font><font color="#E5E5E5"> like very good but the</font>

286
00:13:16,970 --> 00:13:21,480
next<font color="#CCCCCC"> results we are</font><font color="#E5E5E5"> finding you</font>

287
00:13:18,630 --> 00:13:24,060
heuristic<font color="#CCCCCC"> Aaron that guilt</font><font color="#E5E5E5"> so we have to</font>

288
00:13:21,480 --> 00:13:27,839
calculate a ratio<font color="#CCCCCC"> or something like that</font>

289
00:13:24,060 --> 00:13:32,459
<font color="#CCCCCC">so the reverser when is taking a look to</font>

290
00:13:27,839 --> 00:13:36,300
<font color="#E5E5E5">their issues that my tool output can</font>

291
00:13:32,459 --> 00:13:38,008
trust or not<font color="#CCCCCC"> or not try some results and</font>

292
00:13:36,300 --> 00:13:40,410
that's<font color="#E5E5E5"> not funny I will explain later</font>

293
00:13:38,009 --> 00:13:44,040
<font color="#E5E5E5">because it's actually the hardest part</font>

294
00:13:40,410 --> 00:13:47,610
<font color="#E5E5E5">in the project so let's talk first about</font>

295
00:13:44,040 --> 00:13:49,560
<font color="#CCCCCC">heuristics all juristic s--</font><font color="#E5E5E5"> but one are</font>

296
00:13:47,610 --> 00:13:52,589
based on the initial<font color="#CCCCCC"> good results that i</font>

297
00:13:49,560 --> 00:13:56,040
<font color="#E5E5E5">private explained and currently the list</font>

298
00:13:52,589 --> 00:13:58,589
of heuristic is the following one the

299
00:13:56,040 --> 00:14:01,980
colors and<font color="#E5E5E5"> the</font><font color="#CCCCCC"> collies</font><font color="#E5E5E5"> that's it</font>

300
00:13:58,589 --> 00:14:05,279
<font color="#CCCCCC">coal graph related heuristics the nearby</font>

301
00:14:01,980 --> 00:14:08,880
<font color="#CCCCCC">transients</font><font color="#E5E5E5"> a specific</font><font color="#CCCCCC"> collie shortest</font>

302
00:14:05,279 --> 00:14:11,459
and saving rare<font color="#E5E5E5"> constants</font><font color="#CCCCCC"> I will start</font>

303
00:14:08,880 --> 00:14:13,829
<font color="#CCCCCC">ou first the heuristic</font><font color="#E5E5E5"> are apply is</font>

304
00:14:11,459 --> 00:14:15,449
iteratively<font color="#CCCCCC"> what I mean with that</font><font color="#E5E5E5"> let's</font>

305
00:14:13,829 --> 00:14:17,758
say<font color="#E5E5E5"> that here you have like in</font><font color="#CCCCCC"> the</font>

306
00:14:15,449 --> 00:14:20,099
previous example<font color="#CCCCCC"> 90 phantoms that I</font>

307
00:14:17,759 --> 00:14:24,180
found first then I apply the<font color="#CCCCCC"> sadistic</font>

308
00:14:20,100 --> 00:14:26,910
and I have<font color="#E5E5E5"> five more functions 95 then</font>

309
00:14:24,180 --> 00:14:30,388
for this neophyte<font color="#CCCCCC"> phantoms that</font><font color="#E5E5E5"> I found</font>

310
00:14:26,910 --> 00:14:34,709
<font color="#CCCCCC">I apply the same heuristics until no</font>

311
00:14:30,389 --> 00:14:36,569
<font color="#CCCCCC">more new results appear okay okay so now</font>

312
00:14:34,709 --> 00:14:38,550
<font color="#E5E5E5">let's start talking about its heuristic</font>

313
00:14:36,569 --> 00:14:40,920
so the first one<font color="#CCCCCC"> coal graphs matches</font>

314
00:14:38,550 --> 00:14:43,439
either<font color="#E5E5E5"> four colors or four colors</font>

315
00:14:40,920 --> 00:14:45,810
so starting through now<font color="#CCCCCC"> one-to-one match</font>

316
00:14:43,439 --> 00:14:48,389
<font color="#CCCCCC">the</font><font color="#E5E5E5"> first</font><font color="#CCCCCC"> gives results that I have I</font>

317
00:14:45,810 --> 00:14:50,699
<font color="#E5E5E5">build the list of colors and the list of</font>

318
00:14:48,389 --> 00:14:53,610
<font color="#CCCCCC">collies I try to match each color</font><font color="#E5E5E5"> and</font>

319
00:14:50,699 --> 00:14:56,459
<font color="#E5E5E5">Kali forum both men</font><font color="#CCCCCC"> calculate some score</font>

320
00:14:53,610 --> 00:14:59,850
to determine how<font color="#CCCCCC"> good or bad the masses</font>

321
00:14:56,459 --> 00:15:03,149
are then<font color="#CCCCCC"> forgiving of</font><font color="#E5E5E5"> matters</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> sake</font>

322
00:14:59,850 --> 00:15:04,709
then in a temporal list then after<font color="#CCCCCC"> all</font>

323
00:15:03,149 --> 00:15:08,009
the colors and<font color="#E5E5E5"> colors are pussies I</font>

324
00:15:04,709 --> 00:15:09,149
removed but<font color="#CCCCCC"> matters and only the good</font>

325
00:15:08,009 --> 00:15:12,089
<font color="#E5E5E5">ones</font><font color="#CCCCCC"> are</font>

326
00:15:09,149 --> 00:15:14,790
Sables and<font color="#CCCCCC"> considered if there are</font>

327
00:15:12,089 --> 00:15:17,130
multimeters<font color="#E5E5E5"> like I have Pantheon a and</font>

328
00:15:14,790 --> 00:15:19,649
fun T on<font color="#E5E5E5"> a prime and B prime that</font>

329
00:15:17,130 --> 00:15:21,449
actually<font color="#E5E5E5"> match with the same result</font><font color="#CCCCCC"> the</font>

330
00:15:19,649 --> 00:15:26,100
first result that<font color="#E5E5E5"> I</font><font color="#CCCCCC"> had is the</font><font color="#E5E5E5"> only one</font>

331
00:15:21,449 --> 00:15:29,170
<font color="#E5E5E5">that I</font><font color="#CCCCCC"> maintain probably not correct</font><font color="#E5E5E5"> but</font>

332
00:15:26,100 --> 00:15:31,660
<font color="#CCCCCC">I don't know what to do</font><font color="#E5E5E5"> there</font>

333
00:15:29,170 --> 00:15:34,988
nearby<font color="#CCCCCC"> fountains</font><font color="#E5E5E5"> so this is another</font>

334
00:15:31,660 --> 00:15:37,509
heuristic that<font color="#E5E5E5"> is pretty is it</font><font color="#CCCCCC"> let's say</font>

335
00:15:34,989 --> 00:15:39,999
that we<font color="#E5E5E5"> met at function y and Hunton Y</font>

336
00:15:37,509 --> 00:15:42,309
Prime<font color="#E5E5E5"> in the source code</font><font color="#CCCCCC"> and in the</font>

337
00:15:39,999 --> 00:15:44,679
binary<font color="#CCCCCC"> chances are that</font><font color="#E5E5E5"> the function</font>

338
00:15:42,309 --> 00:15:47,679
that<font color="#E5E5E5"> is before the</font><font color="#CCCCCC"> phantom life fandom X</font>

339
00:15:44,679 --> 00:15:50,608
is actually<font color="#E5E5E5"> the same X Prime in the</font>

340
00:15:47,679 --> 00:15:52,829
binary<font color="#E5E5E5"> the same for the next phantoms</font><font color="#CCCCCC"> a</font>

341
00:15:50,609 --> 00:15:56,019
<font color="#E5E5E5">very easy one</font>

342
00:15:52,829 --> 00:15:57,849
it specifically shirt<font color="#CCCCCC"> so the colors of a</font>

343
00:15:56,019 --> 00:15:59,529
<font color="#CCCCCC">fancy on in a code base and the chorus</font>

344
00:15:57,850 --> 00:16:02,980
in a binary can differ a lot let's<font color="#E5E5E5"> say</font>

345
00:15:59,529 --> 00:16:05,949
that for<font color="#E5E5E5"> example we generate SQLite for</font>

346
00:16:02,980 --> 00:16:08,980
<font color="#E5E5E5">the</font><font color="#CCCCCC"> Olympics ml</font><font color="#E5E5E5"> to source code</font>

347
00:16:05,949 --> 00:16:11,290
many of the sport a sentence of<font color="#CCCCCC"> Lib</font><font color="#E5E5E5"> XML</font>

348
00:16:08,980 --> 00:16:13,419
<font color="#CCCCCC">to will have no color</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> in the binary</font>

349
00:16:11,290 --> 00:16:15,748
of<font color="#E5E5E5"> course it will</font><font color="#CCCCCC"> be called</font><font color="#E5E5E5"> because that</font>

350
00:16:13,419 --> 00:16:18,609
<font color="#E5E5E5">libraries venues so we cannot use the</font>

351
00:16:15,749 --> 00:16:20,709
number<font color="#E5E5E5"> of called the colors but</font><font color="#CCCCCC"> we can</font>

352
00:16:18,609 --> 00:16:23,259
use the<font color="#CCCCCC"> Khali's</font><font color="#E5E5E5"> because the call is is</font>

353
00:16:20,709 --> 00:16:27,399
<font color="#E5E5E5">always going to be the same or mostly</font>

354
00:16:23,259 --> 00:16:29,739
not always so<font color="#E5E5E5"> when I have a good match</font>

355
00:16:27,399 --> 00:16:32,410
between the<font color="#E5E5E5"> fancy on X and X</font><font color="#CCCCCC"> prime in</font>

356
00:16:29,739 --> 00:16:35,049
<font color="#CCCCCC">the binary I can't check the colors of</font>

357
00:16:32,410 --> 00:16:36,730
the<font color="#E5E5E5"> sorry the</font><font color="#CCCCCC"> College of</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> bought</font>

358
00:16:35,049 --> 00:16:39,519
<font color="#E5E5E5">phantoms because I know that</font><font color="#CCCCCC"> it's</font>

359
00:16:36,730 --> 00:16:44,619
<font color="#E5E5E5">already</font><font color="#CCCCCC"> a good match</font><font color="#E5E5E5"> so the Khalif</font><font color="#CCCCCC"> sol's</font>

360
00:16:39,519 --> 00:16:47,079
<font color="#E5E5E5">be the same yep another one same</font><font color="#CCCCCC"> route</font>

361
00:16:44,619 --> 00:16:49,600
constant this<font color="#E5E5E5"> is another this</font><font color="#CCCCCC"> is</font>

362
00:16:47,079 --> 00:16:51,729
probably the<font color="#E5E5E5"> only eristic that</font><font color="#CCCCCC"> i been</font>

363
00:16:49,600 --> 00:16:54,819
able<font color="#E5E5E5"> to port from the áfourá</font>

364
00:16:51,730 --> 00:16:57,279
to<font color="#E5E5E5"> Piraeus</font><font color="#CCCCCC"> which</font><font color="#E5E5E5"> is I have one string</font>

365
00:16:54,819 --> 00:16:58,689
constant which is pretty rare<font color="#CCCCCC"> it only</font>

366
00:16:57,279 --> 00:17:01,629
<font color="#E5E5E5">appears in one</font><font color="#CCCCCC"> hunter</font>

367
00:16:58,689 --> 00:17:03,639
this is an<font color="#E5E5E5"> awesome match</font><font color="#CCCCCC"> I mean if the</font>

368
00:17:01,629 --> 00:17:05,649
<font color="#CCCCCC">panthéon differ a</font><font color="#E5E5E5"> lot that string</font>

369
00:17:03,639 --> 00:17:09,039
constant<font color="#E5E5E5"> that</font><font color="#CCCCCC"> is rare enough that</font><font color="#E5E5E5"> is we</font>

370
00:17:05,648 --> 00:17:11,438
<font color="#E5E5E5">are enough makes the max that</font><font color="#CCCCCC"> we have a</font>

371
00:17:09,039 --> 00:17:13,869
pretty<font color="#E5E5E5"> good match</font><font color="#CCCCCC"> why because it doesn't</font>

372
00:17:11,439 --> 00:17:17,559
<font color="#CCCCCC">exist</font><font color="#E5E5E5"> in all the data race that's it is</font>

373
00:17:13,869 --> 00:17:20,648
very easy<font color="#CCCCCC"> so and</font><font color="#E5E5E5"> the search so far the</font>

374
00:17:17,559 --> 00:17:23,619
heuristics<font color="#CCCCCC"> that I have implemented for</font>

375
00:17:20,648 --> 00:17:25,719
this<font color="#CCCCCC"> version</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> pig is this heuristic</font>

376
00:17:23,619 --> 00:17:29,500
<font color="#CCCCCC">feels</font><font color="#E5E5E5"> many matches between source codes</font>

377
00:17:25,720 --> 00:17:32,080
<font color="#E5E5E5">and binaries but the quality of the</font>

378
00:17:29,500 --> 00:17:33,519
matters greatly<font color="#CCCCCC"> various</font><font color="#E5E5E5"> I heard this</font>

379
00:17:32,080 --> 00:17:36,789
word another problem that<font color="#CCCCCC"> I already</font>

380
00:17:33,519 --> 00:17:39,399
<font color="#CCCCCC">briefly mentions a Piercy game</font><font color="#E5E5E5"> how can</font>

381
00:17:36,789 --> 00:17:42,850
we read how<font color="#E5E5E5"> a curate or the opposite are</font>

382
00:17:39,399 --> 00:17:46,178
the masses I will take I<font color="#E5E5E5"> will talk so</font>

383
00:17:42,850 --> 00:17:46,870
<font color="#CCCCCC">navigate throw lens there are a lot of</font>

384
00:17:46,179 --> 00:17:49,830
<font color="#E5E5E5">purlins</font>

385
00:17:46,870 --> 00:17:52,260
doing things like<font color="#E5E5E5"> that so the</font><font color="#CCCCCC"> first one</font>

386
00:17:49,830 --> 00:17:55,418
<font color="#CCCCCC">porting symbols</font><font color="#E5E5E5"> from code base</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> binary</font>

387
00:17:52,260 --> 00:17:57,940
<font color="#E5E5E5">systematic surprise so some of the many</font>

388
00:17:55,419 --> 00:18:00,610
problems<font color="#E5E5E5"> that I have</font><font color="#CCCCCC"> discovered and for</font>

389
00:17:57,940 --> 00:18:03,010
example control<font color="#E5E5E5"> paragraphs</font><font color="#CCCCCC"> bases</font>

390
00:18:00,610 --> 00:18:05,229
heuristics<font color="#E5E5E5"> the ones that I use in the</font>

391
00:18:03,010 --> 00:18:07,480
áfourá and everybody<font color="#E5E5E5"> use in there with</font>

392
00:18:05,230 --> 00:18:09,520
<font color="#E5E5E5">different tools like dynamic</font><font color="#CCCCCC"> bindiya</font>

393
00:18:07,480 --> 00:18:12,280
sword<font color="#CCCCCC"> are ingredients or</font><font color="#E5E5E5"> gaddy for</font>

394
00:18:09,520 --> 00:18:14,799
whatever<font color="#CCCCCC"> most of them are</font><font color="#E5E5E5"> based on</font>

395
00:18:12,280 --> 00:18:16,809
graphs<font color="#E5E5E5"> cannot be use the compare source</font>

396
00:18:14,799 --> 00:18:20,470
codes<font color="#E5E5E5"> especially</font><font color="#CCCCCC"> from human</font><font color="#E5E5E5"> grit and</font>

397
00:18:16,809 --> 00:18:24,158
wants to binaries<font color="#E5E5E5"> why because they</font><font color="#CCCCCC"> cause</font>

398
00:18:20,470 --> 00:18:27,190
that big rise as developers is totally

399
00:18:24,159 --> 00:18:30,730
different<font color="#E5E5E5"> to what ever generates finally</font>

400
00:18:27,190 --> 00:18:33,159
the compiler<font color="#CCCCCC"> I'm not even talking when</font>

401
00:18:30,730 --> 00:18:35,640
we are not<font color="#E5E5E5"> using</font><font color="#CCCCCC"> that but aliased is</font>

402
00:18:33,159 --> 00:18:39,490
from let's say the<font color="#CCCCCC"> X rise the compiler</font>

403
00:18:35,640 --> 00:18:42,549
<font color="#E5E5E5">if we want to compare the</font><font color="#CCCCCC"> alias</font><font color="#E5E5E5"> things</font>

404
00:18:39,490 --> 00:18:45,340
<font color="#E5E5E5">they abstract syntax trees from human</font>

405
00:18:42,549 --> 00:18:48,639
Britain's codes to the<font color="#CCCCCC"> age of</font><font color="#E5E5E5"> states</font>

406
00:18:45,340 --> 00:18:50,820
<font color="#E5E5E5">that the the compiler gives out the</font>

407
00:18:48,640 --> 00:18:54,400
results are<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to be funny</font>

408
00:18:50,820 --> 00:18:57,809
<font color="#E5E5E5">another thing which I call blind</font><font color="#CCCCCC"> dipping</font>

409
00:18:54,400 --> 00:19:01,030
so in some cases<font color="#E5E5E5"> I use that the compiler</font>

410
00:18:57,809 --> 00:19:04,780
<font color="#E5E5E5">just to graphically display in either</font>

411
00:19:01,030 --> 00:19:06,309
the<font color="#E5E5E5"> mat so you can</font><font color="#CCCCCC"> kind</font><font color="#E5E5E5"> of D if the</font>

412
00:19:04,780 --> 00:19:07,690
source code from<font color="#E5E5E5"> the binary and the</font>

413
00:19:06,309 --> 00:19:12,039
source code from the proper source<font color="#E5E5E5"> code</font>

414
00:19:07,690 --> 00:19:16,210
I mean but what<font color="#E5E5E5"> we find</font><font color="#CCCCCC"> compiling</font><font color="#E5E5E5"> the</font>

415
00:19:12,039 --> 00:19:21,309
source code with an SH for binary with

416
00:19:16,210 --> 00:19:26,190
an<font color="#E5E5E5"> M 68k this part</font><font color="#CCCCCC"> I don't have the</font>

417
00:19:21,309 --> 00:19:28,840
compiler for that<font color="#E5E5E5"> so how can I give</font><font color="#CCCCCC"> that</font>

418
00:19:26,190 --> 00:19:31,030
another it<font color="#E5E5E5"> is almost impossible to</font>

419
00:19:28,840 --> 00:19:33,908
<font color="#CCCCCC">determine how much a</font><font color="#E5E5E5"> function changes</font>

420
00:19:31,030 --> 00:19:36,820
from<font color="#E5E5E5"> the source to the binary</font><font color="#CCCCCC"> like we</font>

421
00:19:33,909 --> 00:19:40,000
cannot know because it can<font color="#E5E5E5"> by an opting</font>

422
00:19:36,820 --> 00:19:43,389
a compiler optimization or a change that

423
00:19:40,000 --> 00:19:46,690
<font color="#CCCCCC">the</font><font color="#E5E5E5"> they maze is pretty hard</font><font color="#CCCCCC"> to know</font>

424
00:19:43,390 --> 00:19:51,480
<font color="#E5E5E5">this it is an easy as I said before to</font>

425
00:19:46,690 --> 00:19:53,049
determine how<font color="#CCCCCC"> good or bad match</font><font color="#E5E5E5"> is so</font>

426
00:19:51,480 --> 00:19:55,510
total<font color="#E5E5E5"> photographs</font>

427
00:19:53,049 --> 00:19:56,470
one<font color="#E5E5E5"> of my very first ideas when I have</font>

428
00:19:55,510 --> 00:19:58,870
the idea<font color="#E5E5E5"> of</font>

429
00:19:56,470 --> 00:20:02,470
great<font color="#E5E5E5"> and such a</font><font color="#CCCCCC"> to luma mine was to use</font>

430
00:19:58,870 --> 00:20:05,559
the áfourá as<font color="#CCCCCC"> to</font><font color="#E5E5E5"> port many heuristics</font>

431
00:20:02,470 --> 00:20:07,630
from the authority<font color="#E5E5E5"> is I quickly realized</font>

432
00:20:05,559 --> 00:20:09,549
that<font color="#CCCCCC"> it was a</font><font color="#E5E5E5"> very bad idea</font><font color="#CCCCCC"> because the</font>

433
00:20:07,630 --> 00:20:11,110
control programs obtain it from source

434
00:20:09,549 --> 00:20:13,809
codes<font color="#E5E5E5"> especially from human written</font>

435
00:20:11,110 --> 00:20:16,270
grants are totally<font color="#CCCCCC"> different to the</font><font color="#E5E5E5"> ones</font>

436
00:20:13,809 --> 00:20:19,678
that<font color="#CCCCCC"> a compiler</font><font color="#E5E5E5"> optimizing generates</font>

437
00:20:16,270 --> 00:20:23,820
<font color="#E5E5E5">this is an extreme an extreme example</font>

438
00:20:19,679 --> 00:20:26,289
this<font color="#CCCCCC"> cold resembles next server</font>

439
00:20:23,820 --> 00:20:29,770
vulnerability<font color="#CCCCCC"> back in the day</font><font color="#E5E5E5"> so they</font>

440
00:20:26,289 --> 00:20:32,289
call the programmer made a mistake and

441
00:20:29,770 --> 00:20:34,870
<font color="#E5E5E5">the stealth of calling get EU ID</font>

442
00:20:32,289 --> 00:20:37,390
it's simply text<font color="#E5E5E5"> if they address of get</font>

443
00:20:34,870 --> 00:20:40,658
it UID is equal to<font color="#E5E5E5"> zero so the compiler</font>

444
00:20:37,390 --> 00:20:42,370
says hey it is in<font color="#CCCCCC"> word</font><font color="#E5E5E5"> for anything I</font>

445
00:20:40,659 --> 00:20:46,240
will guess remote everything here<font color="#E5E5E5"> and</font>

446
00:20:42,370 --> 00:20:49,809
put that<font color="#E5E5E5"> I will keep the call to get</font>

447
00:20:46,240 --> 00:20:51,940
<font color="#E5E5E5">your ID and</font><font color="#CCCCCC"> the return puts ok</font><font color="#E5E5E5"> first the</font>

448
00:20:49,809 --> 00:20:54,879
<font color="#E5E5E5">Phantom's are different put some</font><font color="#CCCCCC"> printf</font>

449
00:20:51,940 --> 00:20:58,990
but<font color="#E5E5E5"> that we don't care but if we check</font>

450
00:20:54,880 --> 00:21:00,760
we<font color="#CCCCCC"> have here con</font><font color="#E5E5E5"> a control flow but here</font>

451
00:20:58,990 --> 00:21:02,770
we<font color="#E5E5E5"> don't have control flow because the</font>

452
00:21:00,760 --> 00:21:05,620
compiler<font color="#CCCCCC"> you have to remove</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> because</font>

453
00:21:02,770 --> 00:21:07,570
it<font color="#E5E5E5"> doesn't make any</font><font color="#CCCCCC"> sense</font><font color="#E5E5E5"> to check it it</font>

454
00:21:05,620 --> 00:21:10,959
knows that<font color="#CCCCCC"> is</font><font color="#E5E5E5"> not going to be</font><font color="#CCCCCC"> zero so</font>

455
00:21:07,570 --> 00:21:21,460
<font color="#E5E5E5">just removes it</font><font color="#CCCCCC"> ok I repeat this is</font><font color="#E5E5E5"> an</font>

456
00:21:10,960 --> 00:21:23,200
extreme and extreme example yeah yeah in

457
00:21:21,460 --> 00:21:26,140
<font color="#E5E5E5">this case it will be actually a good met</font>

458
00:21:23,200 --> 00:21:28,330
because let's<font color="#CCCCCC"> say that the okay is</font>

459
00:21:26,140 --> 00:21:33,970
Clemente on<font color="#E5E5E5"> only upwards</font><font color="#CCCCCC"> in one fan turn</font>

460
00:21:28,330 --> 00:21:37,449
it is a<font color="#E5E5E5"> one-to-one match for me that's</font>

461
00:21:33,970 --> 00:21:40,270
another<font color="#E5E5E5"> thing and I consider it</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> reduce</font>

462
00:21:37,450 --> 00:21:44,470
<font color="#E5E5E5">the ratio a bit I will talk a bit later</font>

463
00:21:40,270 --> 00:21:47,289
<font color="#E5E5E5">about that so I assist abstract syntax</font>

464
00:21:44,470 --> 00:21:49,240
trees so as I said<font color="#CCCCCC"> area states from</font>

465
00:21:47,289 --> 00:21:51,970
<font color="#CCCCCC">short code especially</font><font color="#E5E5E5"> from human written</font>

466
00:21:49,240 --> 00:21:54,780
<font color="#E5E5E5">ones are very</font><font color="#CCCCCC"> different</font><font color="#E5E5E5"> to a</font><font color="#CCCCCC"> STS obtain</font>

467
00:21:51,970 --> 00:21:57,760
it with an optimized and the compiler

468
00:21:54,780 --> 00:22:00,908
<font color="#E5E5E5">like every swine that</font><font color="#CCCCCC"> actually</font><font color="#E5E5E5"> tastes</font>

469
00:21:57,760 --> 00:22:03,970
already<font color="#CCCCCC"> optimizes my</font><font color="#E5E5E5"> binary machine</font>

470
00:22:00,909 --> 00:22:06,370
<font color="#E5E5E5">codes actually</font><font color="#CCCCCC"> went for trivial phantoms</font>

471
00:22:03,970 --> 00:22:08,980
<font color="#E5E5E5">trying to dip circles</font><font color="#CCCCCC"> to so the codes</font>

472
00:22:06,370 --> 00:22:10,658
<font color="#E5E5E5">probes to</font><font color="#CCCCCC"> be complex complicated</font><font color="#E5E5E5"> at</font>

473
00:22:08,980 --> 00:22:14,289
least<font color="#E5E5E5"> so this is a</font>

474
00:22:10,659 --> 00:22:16,720
- one<font color="#CCCCCC"> math the only thing that they can</font>

475
00:22:14,289 --> 00:22:20,259
match here is that call to<font color="#E5E5E5"> access</font><font color="#CCCCCC"> Philip</font>

476
00:22:16,720 --> 00:22:23,470
<font color="#E5E5E5">and</font><font color="#CCCCCC"> forest</font><font color="#E5E5E5"> if I'm not</font><font color="#CCCCCC"> wrong this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> BC</font>

477
00:22:20,259 --> 00:22:25,809
<font color="#CCCCCC">bucks</font><font color="#E5E5E5"> do you see here this is what the</font>

478
00:22:23,470 --> 00:22:27,849
heck's rise the compiler gives him it we

479
00:22:25,809 --> 00:22:29,979
have the<font color="#CCCCCC"> wall and everything</font><font color="#E5E5E5"> everything</font>

480
00:22:27,849 --> 00:22:32,950
that<font color="#E5E5E5"> is in red or pink I don't actually</font>

481
00:22:29,979 --> 00:22:36,279
know the what color is that<font color="#CCCCCC"> is what</font>

482
00:22:32,950 --> 00:22:39,899
<font color="#CCCCCC">doesn't match in the</font><font color="#E5E5E5"> whole part but</font>

483
00:22:36,279 --> 00:22:43,330
<font color="#E5E5E5">actually is the same</font><font color="#CCCCCC"> cause this is an</font>

484
00:22:39,899 --> 00:22:46,418
<font color="#CCCCCC">non extreme graphical example</font><font color="#E5E5E5"> this is</font>

485
00:22:43,330 --> 00:22:50,139
another<font color="#CCCCCC"> example I</font><font color="#E5E5E5"> need another one -</font><font color="#CCCCCC"> one</font>

486
00:22:46,419 --> 00:22:53,289
<font color="#CCCCCC">max we can see here that we cannot match</font>

487
00:22:50,139 --> 00:22:56,469
the<font color="#CCCCCC"> ast or the source or whatever</font><font color="#E5E5E5"> we</font>

488
00:22:53,289 --> 00:23:01,119
want<font color="#E5E5E5"> or I mean the control program this</font>

489
00:22:56,470 --> 00:23:04,269
is a good match<font color="#CCCCCC"> if we are comparing a</font>

490
00:23:01,119 --> 00:23:05,978
<font color="#CCCCCC">Eustis but it is pretty</font><font color="#E5E5E5"> rare that we</font>

491
00:23:04,269 --> 00:23:08,379
have matches like that and<font color="#E5E5E5"> even in that</font>

492
00:23:05,979 --> 00:23:10,389
<font color="#E5E5E5">case check to the differences between</font>

493
00:23:08,379 --> 00:23:15,099
<font color="#CCCCCC">the</font><font color="#E5E5E5"> source codes and whatever the</font>

494
00:23:10,389 --> 00:23:20,849
compiler gives to us another<font color="#E5E5E5"> problem as</font>

495
00:23:15,099 --> 00:23:24,119
I said<font color="#CCCCCC"> blinding so in the differences I</font>

496
00:23:20,849 --> 00:23:26,619
use the compiler<font color="#E5E5E5"> as you can see here</font>

497
00:23:24,119 --> 00:23:28,749
doesn't make any<font color="#E5E5E5"> sense</font><font color="#CCCCCC"> most of</font><font color="#E5E5E5"> the times</font>

498
00:23:26,619 --> 00:23:32,080
but well we<font color="#E5E5E5"> can't get to</font><font color="#CCCCCC"> see something</font>

499
00:23:28,749 --> 00:23:34,749
<font color="#CCCCCC">but</font><font color="#E5E5E5"> what can we do if we don't if the</font>

500
00:23:32,080 --> 00:23:37,779
compiler doesn't support the target

501
00:23:34,749 --> 00:23:40,690
architecture that we are working on<font color="#E5E5E5"> we</font>

502
00:23:37,779 --> 00:23:43,840
simply cannot visually deep then make

503
00:23:40,690 --> 00:23:46,119
sense what I do is simply<font color="#CCCCCC"> I saw what I</font>

504
00:23:43,840 --> 00:23:48,759
have matches from what<font color="#E5E5E5"> Pantheon's so</font>

505
00:23:46,119 --> 00:23:51,549
<font color="#CCCCCC">there</font><font color="#E5E5E5"> reverse engineer can determine or</font>

506
00:23:48,759 --> 00:23:51,820
decide if it is<font color="#E5E5E5"> good or bad this</font><font color="#CCCCCC"> is all</font>

507
00:23:51,549 --> 00:23:55,629
I do

508
00:23:51,820 --> 00:23:57,970
this is how the plug-in looks and for

509
00:23:55,629 --> 00:24:01,599
example<font color="#CCCCCC"> for this fair</font><font color="#E5E5E5"> fancy on which is</font>

510
00:23:57,970 --> 00:24:03,929
very<font color="#CCCCCC"> good</font><font color="#E5E5E5"> max I say so the that is a</font>

511
00:24:01,599 --> 00:24:06,519
similar<font color="#CCCCCC"> number of conditions and</font><font color="#E5E5E5"> the</font>

512
00:24:03,929 --> 00:24:08,440
<font color="#E5E5E5">constants the string consensus actually</font>

513
00:24:06,519 --> 00:24:11,080
are actually the same<font color="#E5E5E5"> the</font><font color="#CCCCCC"> number</font><font color="#E5E5E5"> of</font>

514
00:24:08,440 --> 00:24:14,320
<font color="#E5E5E5">switches zero is the same and the number</font>

515
00:24:11,080 --> 00:24:18,820
of calls is similar by the way look at

516
00:24:14,320 --> 00:24:21,399
how max<font color="#E5E5E5"> even for a goose</font><font color="#CCCCCC"> mat the themes</font>

517
00:24:18,820 --> 00:24:24,599
change<font color="#CCCCCC"> so in the source</font><font color="#E5E5E5"> code there are</font>

518
00:24:21,399 --> 00:24:27,309
<font color="#E5E5E5">10 codes but finally the</font>

519
00:24:24,599 --> 00:24:29,049
decided<font color="#CCCCCC"> that you don't</font><font color="#E5E5E5"> need to</font><font color="#CCCCCC"> have ten</font>

520
00:24:27,309 --> 00:24:32,109
different<font color="#E5E5E5"> calls in</font><font color="#CCCCCC"> 10 different places</font>

521
00:24:29,049 --> 00:24:35,200
<font color="#E5E5E5">but only five calls in</font><font color="#CCCCCC"> fact</font><font color="#E5E5E5"> less</font>

522
00:24:32,109 --> 00:24:37,089
specific places and<font color="#E5E5E5"> actually and also</font>

523
00:24:35,200 --> 00:24:38,830
<font color="#CCCCCC">the</font><font color="#E5E5E5"> number of his thermal sentence for</font>

524
00:24:37,089 --> 00:24:41,469
the sternal<font color="#CCCCCC"> scenes</font><font color="#E5E5E5"> references in that</font>

525
00:24:38,830 --> 00:24:45,668
<font color="#CCCCCC">Fantine is 12</font><font color="#E5E5E5"> so this is a good match</font>

526
00:24:41,469 --> 00:24:47,349
for then<font color="#E5E5E5"> I think it was a sage for fine</font>

527
00:24:45,669 --> 00:24:49,929
not wrong<font color="#CCCCCC"> and this</font><font color="#E5E5E5"> is the only thing</font>

528
00:24:47,349 --> 00:24:53,739
<font color="#E5E5E5">that we can do to solve or determine how</font>

529
00:24:49,929 --> 00:24:56,649
<font color="#CCCCCC">good or bad sitteth so calculating a</font>

530
00:24:53,739 --> 00:24:58,659
similarity<font color="#CCCCCC"> or accuracy radius</font><font color="#E5E5E5"> once we</font>

531
00:24:56,649 --> 00:25:01,839
have max<font color="#E5E5E5"> we</font><font color="#CCCCCC"> need</font><font color="#E5E5E5"> to determine how</font><font color="#CCCCCC"> good</font>

532
00:24:58,659 --> 00:25:03,789
or bad it is for<font color="#CCCCCC"> this we need to create</font>

533
00:25:01,839 --> 00:25:06,009
some<font color="#E5E5E5"> kind</font><font color="#CCCCCC"> of function that</font><font color="#E5E5E5"> takes as</font>

534
00:25:03,789 --> 00:25:08,529
input the source code<font color="#E5E5E5"> phantom and the</font>

535
00:25:06,009 --> 00:25:10,899
<font color="#CCCCCC">binary</font><font color="#E5E5E5"> phantom and</font><font color="#CCCCCC"> also</font><font color="#E5E5E5"> the ratio from 0</font>

536
00:25:08,529 --> 00:25:14,139
to<font color="#E5E5E5"> 1</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> have started</font><font color="#CCCCCC"> writing by hand</font>

537
00:25:10,899 --> 00:25:16,119
<font color="#CCCCCC">fancy</font><font color="#E5E5E5"> on compare functions</font><font color="#CCCCCC"> that the</font>

538
00:25:14,139 --> 00:25:18,189
psycnet weights to the chart if at

539
00:25:16,119 --> 00:25:21,009
<font color="#CCCCCC">Mattson as I</font><font color="#E5E5E5"> soaked it wasn't right to</font>

540
00:25:18,190 --> 00:25:24,339
<font color="#E5E5E5">me look into the whistles and</font><font color="#CCCCCC"> changing</font>

541
00:25:21,009 --> 00:25:26,229
<font color="#E5E5E5">and stuff after</font><font color="#CCCCCC"> a while I said</font><font color="#E5E5E5"> this is</font>

542
00:25:24,339 --> 00:25:28,208
<font color="#E5E5E5">horrible what I am doing I</font><font color="#CCCCCC"> shall do</font>

543
00:25:26,229 --> 00:25:33,219
something<font color="#E5E5E5"> more automated to calculate</font>

544
00:25:28,209 --> 00:25:36,969
the<font color="#CCCCCC"> weights and this is me doing machine</font>

545
00:25:33,219 --> 00:25:38,889
learning and stuff<font color="#E5E5E5"> so I started learning</font>

546
00:25:36,969 --> 00:25:40,690
a bit about machine learning deep

547
00:25:38,889 --> 00:25:42,849
learning and<font color="#E5E5E5"> all the staff that many</font>

548
00:25:40,690 --> 00:25:44,979
companies<font color="#CCCCCC"> use such</font><font color="#E5E5E5"> password for</font><font color="#CCCCCC"> saline</font>

549
00:25:42,849 --> 00:25:47,439
snake oil applications with the hope

550
00:25:44,979 --> 00:25:49,799
that maybe I called you<font color="#CCCCCC"> sunshine for</font>

551
00:25:47,440 --> 00:25:52,299
getting proper matches or a proper ratio

552
00:25:49,799 --> 00:25:54,099
after<font color="#CCCCCC"> buddy's back and forth with</font>

553
00:25:52,299 --> 00:25:56,769
different classifier<font color="#E5E5E5"> accordions</font>

554
00:25:54,099 --> 00:26:00,519
<font color="#E5E5E5">I it turns out that no single are</font><font color="#CCCCCC"> green</font>

555
00:25:56,769 --> 00:26:02,739
<font color="#CCCCCC">on</font><font color="#E5E5E5"> or even</font><font color="#CCCCCC"> a mix of our greens was using</font>

556
00:26:00,519 --> 00:26:06,759
<font color="#CCCCCC">off</font><font color="#E5E5E5"> us to replace my horrible and</font>

557
00:26:02,739 --> 00:26:12,159
handwritten<font color="#E5E5E5"> phantom my final choice</font>

558
00:26:06,759 --> 00:26:14,259
after<font color="#E5E5E5"> so many trial and errors it was to</font>

559
00:26:12,159 --> 00:26:19,539
use a multi classifier based on the

560
00:26:14,259 --> 00:26:22,959
following machine learning algorithms so

561
00:26:19,539 --> 00:26:26,139
I used a decision<font color="#E5E5E5"> tree classifier</font><font color="#CCCCCC"> maybe</font>

562
00:26:22,959 --> 00:26:28,359
bias gradient boost classifier answer

563
00:26:26,139 --> 00:26:29,619
random for this classifier<font color="#CCCCCC"> so the first</font>

564
00:26:28,359 --> 00:26:32,289
one the random for this classifier

565
00:26:29,619 --> 00:26:36,668
actually finds<font color="#E5E5E5"> many positives but</font>

566
00:26:32,289 --> 00:26:38,379
generates many false positives<font color="#E5E5E5"> but using</font>

567
00:26:36,669 --> 00:26:39,700
the decision tree classifier<font color="#CCCCCC"> more</font>

568
00:26:38,380 --> 00:26:43,150
of the fast positives that<font color="#E5E5E5"> I found</font>

569
00:26:39,700 --> 00:26:46,500
before<font color="#CCCCCC"> I</font><font color="#E5E5E5"> remove and the other ones are</font>

570
00:26:43,150 --> 00:26:51,310
mortally removed by the solar ones<font color="#E5E5E5"> okay</font>

571
00:26:46,500 --> 00:26:56,260
<font color="#E5E5E5">okay so it</font><font color="#CCCCCC"> alters ridiculous results in</font>

572
00:26:51,310 --> 00:26:59,470
my opinion as we can say for example

573
00:26:56,260 --> 00:27:04,090
<font color="#CCCCCC">talking</font><font color="#E5E5E5"> about positives in my one of my</font>

574
00:26:59,470 --> 00:27:07,270
data sets from around<font color="#CCCCCC"> 7000 phantoms it</font>

575
00:27:04,090 --> 00:27:10,209
finds more<font color="#E5E5E5"> than</font><font color="#CCCCCC"> 5000</font><font color="#E5E5E5"> which is pretty</font>

576
00:27:07,270 --> 00:27:11,920
good<font color="#CCCCCC"> gifts and the number of false</font>

577
00:27:10,210 --> 00:27:17,830
positives<font color="#CCCCCC"> is not a bad</font>

578
00:27:11,920 --> 00:27:20,860
yes 0.16<font color="#E5E5E5"> one which is very nice but</font>

579
00:27:17,830 --> 00:27:23,050
that's<font color="#CCCCCC"> not my very horrible function</font>

580
00:27:20,860 --> 00:27:25,090
that I said this is not<font color="#CCCCCC"> it and</font><font color="#E5E5E5"> I have to</font>

581
00:27:23,050 --> 00:27:30,669
drop it and replace with something more

582
00:27:25,090 --> 00:27:34,929
scientific is it still the best so now

583
00:27:30,670 --> 00:27:37,390
what I do is<font color="#E5E5E5"> I use both and I usually</font>

584
00:27:34,930 --> 00:27:39,130
yoke<font color="#CCCCCC"> like I had</font><font color="#E5E5E5"> one problem so I used</font>

585
00:27:37,390 --> 00:27:40,690
<font color="#E5E5E5">much in learning and now I have two</font>

586
00:27:39,130 --> 00:27:47,530
problems<font color="#E5E5E5"> and I don't really understand</font>

587
00:27:40,690 --> 00:27:50,920
one so<font color="#E5E5E5"> so this is but in any case I</font>

588
00:27:47,530 --> 00:27:52,810
finally others<font color="#E5E5E5"> an ml column so you</font><font color="#CCCCCC"> know</font>

589
00:27:50,920 --> 00:27:56,080
that the<font color="#E5E5E5"> results from the machine</font>

590
00:27:52,810 --> 00:27:58,270
<font color="#E5E5E5">learning algorithms are sown that here</font>

591
00:27:56,080 --> 00:28:01,990
<font color="#E5E5E5">it is that they melt and the good thing</font>

592
00:27:58,270 --> 00:28:04,060
is if<font color="#E5E5E5"> both my</font><font color="#CCCCCC"> horrible function and the</font>

593
00:28:01,990 --> 00:28:06,280
matching world in<font color="#E5E5E5"> front even tells you</font>

594
00:28:04,060 --> 00:28:09,750
it<font color="#CCCCCC"> is a good match it is actually a</font>

595
00:28:06,280 --> 00:28:16,389
<font color="#CCCCCC">pretty good match so time</font><font color="#E5E5E5"> for a</font><font color="#CCCCCC"> demo I</font>

596
00:28:09,750 --> 00:28:18,970
will<font color="#E5E5E5"> start with something easier</font><font color="#CCCCCC"> yeah</font>

597
00:28:16,390 --> 00:28:21,250
<font color="#E5E5E5">yeah yeah sure</font><font color="#CCCCCC"> I was</font><font color="#E5E5E5"> just getting to</font><font color="#CCCCCC"> the</font>

598
00:28:18,970 --> 00:28:25,630
directory better that so this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> the</font>

599
00:28:21,250 --> 00:28:29,040
source code of set Lib version 1.2 point

600
00:28:25,630 --> 00:28:36,190
11 the<font color="#CCCCCC"> two</font>

601
00:28:29,040 --> 00:28:40,990
<font color="#CCCCCC">I have two seconds</font><font color="#E5E5E5"> yeah so this</font><font color="#CCCCCC"> is my</font>

602
00:28:36,190 --> 00:28:44,230
tool in source being this I will

603
00:28:40,990 --> 00:28:46,660
probably rename it something means

604
00:28:44,230 --> 00:28:49,240
parallel<font color="#E5E5E5"> meaning support it will parse</font>

605
00:28:46,660 --> 00:28:50,669
the source codes<font color="#E5E5E5"> get the STS and</font>

606
00:28:49,240 --> 00:28:54,080
extracts from the

607
00:28:50,669 --> 00:28:58,679
<font color="#CCCCCC">Estates</font><font color="#E5E5E5"> their artifacts that</font><font color="#CCCCCC"> they want</font>

608
00:28:54,080 --> 00:29:02,039
it slanted<font color="#E5E5E5"> it is running it doesn't</font>

609
00:28:58,679 --> 00:29:04,919
matter if it doesn't<font color="#CCCCCC"> find some includes</font>

610
00:29:02,039 --> 00:29:07,019
files on had a fight or<font color="#CCCCCC"> it sends in</font>

611
00:29:04,919 --> 00:29:11,509
<font color="#CCCCCC">what's wrong for whatever</font><font color="#E5E5E5"> actually it is</font>

612
00:29:07,019 --> 00:29:14,159
so in<font color="#CCCCCC"> Sonya roars I will show you here</font>

613
00:29:11,509 --> 00:29:16,559
do you see<font color="#CCCCCC"> the flat</font><font color="#E5E5E5"> I'll because we</font>

614
00:29:14,159 --> 00:29:18,899
don't have<font color="#E5E5E5"> support for C++ and it is</font>

615
00:29:16,559 --> 00:29:21,509
trying<font color="#E5E5E5"> to include C++ headers and stuff</font>

616
00:29:18,899 --> 00:29:23,758
<font color="#CCCCCC">it</font><font color="#E5E5E5"> doesn't matter because</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> are already</font>

617
00:29:21,509 --> 00:29:25,470
<font color="#CCCCCC">struct in artifacts</font><font color="#E5E5E5"> because we have the</font>

618
00:29:23,759 --> 00:29:31,499
<font color="#CCCCCC">ages team and</font><font color="#E5E5E5"> for front ends that we</font>

619
00:29:25,470 --> 00:29:33,059
cannot compile and<font color="#E5E5E5"> then finally we can</font>

620
00:29:31,499 --> 00:29:33,570
see that it says building the<font color="#CCCCCC"> core</font>

621
00:29:33,059 --> 00:29:35,279
graphs

622
00:29:33,570 --> 00:29:38,039
believe me<font color="#E5E5E5"> constants</font><font color="#CCCCCC"> table and creating</font>

623
00:29:35,279 --> 00:29:43,129
the indexes for it<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so here we</font><font color="#CCCCCC"> have</font>

624
00:29:38,039 --> 00:29:48,600
<font color="#CCCCCC">our database which is that once at leap</font>

625
00:29:43,129 --> 00:29:54,149
<font color="#E5E5E5">0.12</font><font color="#CCCCCC"> 11</font><font color="#E5E5E5"> SQLite and</font><font color="#CCCCCC"> now we can go</font><font color="#E5E5E5"> to the</font>

626
00:29:48,600 --> 00:29:58,219
<font color="#E5E5E5">binary I will</font><font color="#CCCCCC"> open either and I will use</font>

627
00:29:54,149 --> 00:30:02,129
<font color="#E5E5E5">that one this</font><font color="#CCCCCC"> is the mini you see the</font>

628
00:29:58,220 --> 00:30:05,809
program<font color="#CCCCCC"> from set leap but</font><font color="#E5E5E5"> for an another</font>

629
00:30:02,129 --> 00:30:08,519
version<font color="#E5E5E5"> and then I will run the script</font>

630
00:30:05,809 --> 00:30:11,820
the<font color="#E5E5E5"> either script which is that one that</font>

631
00:30:08,519 --> 00:30:16,470
I<font color="#E5E5E5"> will</font><font color="#CCCCCC"> probably also</font><font color="#E5E5E5"> rename source</font><font color="#CCCCCC"> I'm</font>

632
00:30:11,820 --> 00:30:19,769
<font color="#CCCCCC">tied up okay this is the dialogue where</font>

633
00:30:16,470 --> 00:30:22,499
we<font color="#E5E5E5"> can choose database the indent</font>

634
00:30:19,769 --> 00:30:24,600
command<font color="#CCCCCC"> if we plan to be solid if things</font>

635
00:30:22,499 --> 00:30:26,700
like<font color="#CCCCCC"> a ceiling format or indent or</font>

636
00:30:24,600 --> 00:30:28,379
whatever calculation<font color="#CCCCCC"> of ratio and</font>

637
00:30:26,700 --> 00:30:29,999
display right here<font color="#E5E5E5"> it</font><font color="#CCCCCC"> is for internal</font>

638
00:30:28,379 --> 00:30:32,850
calculations to consider it disagrees

639
00:30:29,999 --> 00:30:34,799
<font color="#E5E5E5">max and for display right here it is</font>

640
00:30:32,850 --> 00:30:36,988
<font color="#E5E5E5">finally after everything is</font><font color="#CCCCCC"> calculated</font>

641
00:30:34,799 --> 00:30:40,259
what results<font color="#E5E5E5"> are going to display I am</font>

642
00:30:36,989 --> 00:30:43,320
from with level<font color="#E5E5E5"> 2 it will have</font><font color="#CCCCCC"> hit to</font><font color="#E5E5E5"> 0</font>

643
00:30:40,259 --> 00:30:47,309
the default<font color="#CCCCCC"> I will calculate myself</font><font color="#E5E5E5"> what</font>

644
00:30:43,320 --> 00:30:50,009
<font color="#E5E5E5">are the best</font><font color="#CCCCCC"> values for this one so</font>

645
00:30:47,309 --> 00:30:53,668
let's say<font color="#E5E5E5"> you know busybox know that one</font>

646
00:30:50,009 --> 00:30:56,399
<font color="#CCCCCC">settle it</font><font color="#E5E5E5"> well we don't have too many</font>

647
00:30:53,669 --> 00:30:58,769
results<font color="#E5E5E5"> but we have some results in this</font>

648
00:30:56,399 --> 00:31:01,199
case in<font color="#E5E5E5"> another case this is a very</font>

649
00:30:58,769 --> 00:31:03,850
<font color="#E5E5E5">small program</font>

650
00:31:01,200 --> 00:31:05,950
so this is the first<font color="#E5E5E5"> one and</font><font color="#CCCCCC"> here we</font>

651
00:31:03,850 --> 00:31:08,619
have for example the<font color="#CCCCCC"> Fangio</font><font color="#E5E5E5"> Angie said</font>

652
00:31:05,950 --> 00:31:11,710
<font color="#E5E5E5">red matches with the Phantom at the</font>

653
00:31:08,619 --> 00:31:14,408
<font color="#CCCCCC">terrace</font><font color="#E5E5E5"> and it says that ratios but</font>

654
00:31:11,710 --> 00:31:16,769
calculated by the dirty function and the

655
00:31:14,409 --> 00:31:20,609
<font color="#E5E5E5">ml function are one point zero zero</font>

656
00:31:16,769 --> 00:31:24,700
<font color="#E5E5E5">which is a pretty good result we can so</font>

657
00:31:20,609 --> 00:31:27,279
how it matters<font color="#E5E5E5"> and it maxes because the</font>

658
00:31:24,700 --> 00:31:29,139
number<font color="#CCCCCC"> of conditions the constants and</font>

659
00:31:27,279 --> 00:31:32,950
all<font color="#E5E5E5"> the things were actually the same so</font>

660
00:31:29,139 --> 00:31:35,109
it's<font color="#CCCCCC"> a pretty good good good match but</font>

661
00:31:32,950 --> 00:31:37,359
definite<font color="#E5E5E5"> we will probably don't see</font>

662
00:31:35,109 --> 00:31:40,590
anything<font color="#E5E5E5"> that makes any sense</font><font color="#CCCCCC"> and as you</font>

663
00:31:37,359 --> 00:31:45,849
can see<font color="#E5E5E5"> not</font><font color="#CCCCCC"> even a single</font><font color="#E5E5E5"> line matches</font>

664
00:31:40,590 --> 00:31:50,249
yeah<font color="#CCCCCC"> ok this is the first demo and now</font>

665
00:31:45,849 --> 00:31:52,899
we are going<font color="#E5E5E5"> to do another demo this is</font>

666
00:31:50,249 --> 00:31:55,179
<font color="#E5E5E5">busy box for MIT's</font>

667
00:31:52,899 --> 00:31:58,689
architecture we don't have the<font color="#E5E5E5"> compiler</font>

668
00:31:55,179 --> 00:32:01,359
or<font color="#E5E5E5"> anything and this</font><font color="#CCCCCC"> is berthsy only</font>

669
00:31:58,690 --> 00:32:04,509
<font color="#E5E5E5">find not grown one point</font><font color="#CCCCCC"> twenty or</font>

670
00:32:01,359 --> 00:32:07,330
something<font color="#E5E5E5"> like</font><font color="#CCCCCC"> that let me</font><font color="#E5E5E5"> see one point</font>

671
00:32:04,509 --> 00:32:10,739
twenty point zero I just don't<font color="#E5E5E5"> notice it</font>

672
00:32:07,330 --> 00:32:14,408
now<font color="#E5E5E5"> five minutes before the conference</font>

673
00:32:10,739 --> 00:32:21,090
<font color="#CCCCCC">and</font><font color="#E5E5E5"> now I'm going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> bills or bills</font>

674
00:32:14,409 --> 00:32:24,129
<font color="#E5E5E5">sorry to parse the visible source</font><font color="#CCCCCC"> okay</font>

675
00:32:21,090 --> 00:32:26,139
this is what I have the source<font color="#CCCCCC"> code for</font>

676
00:32:24,129 --> 00:32:29,949
<font color="#CCCCCC">busybox</font><font color="#E5E5E5"> another person one point twenty</font>

677
00:32:26,139 --> 00:32:33,699
<font color="#CCCCCC">nine point</font><font color="#E5E5E5"> three</font><font color="#CCCCCC"> I already have here</font><font color="#E5E5E5"> the</font>

678
00:32:29,950 --> 00:32:37,659
<font color="#E5E5E5">SQLite database and I'm going to just</font>

679
00:32:33,700 --> 00:32:40,929
<font color="#E5E5E5">use it</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> compare against a</font><font color="#CCCCCC"> mips binary</font>

680
00:32:37,659 --> 00:32:46,869
<font color="#E5E5E5">I have just</font><font color="#CCCCCC"> mix but one call have just</font>

681
00:32:40,929 --> 00:32:50,259
anything<font color="#E5E5E5"> else like say</font><font color="#CCCCCC"> SH for</font><font color="#E5E5E5"> or spark</font>

682
00:32:46,869 --> 00:32:53,499
or<font color="#E5E5E5"> ends and 68k it doesn't matter</font>

683
00:32:50,259 --> 00:32:55,090
it is absolutely agnostic of<font color="#E5E5E5"> the</font>

684
00:32:53,499 --> 00:32:57,609
architecture because we are not doing

685
00:32:55,090 --> 00:33:00,879
<font color="#E5E5E5">anything with the architecture we are</font>

686
00:32:57,609 --> 00:33:06,129
just doing<font color="#E5E5E5"> things with some specific</font>

687
00:33:00,879 --> 00:33:08,738
artifacts so while it is<font color="#E5E5E5"> doing things it</font>

688
00:33:06,129 --> 00:33:10,119
says that the<font color="#CCCCCC"> decision tree the ML the</font>

689
00:33:08,739 --> 00:33:12,940
machine learning<font color="#CCCCCC"> based</font><font color="#E5E5E5"> system is</font>

690
00:33:10,119 --> 00:33:14,010
<font color="#E5E5E5">available so we can you see it it finds</font>

691
00:33:12,940 --> 00:33:18,010
<font color="#E5E5E5">first</font>

692
00:33:14,010 --> 00:33:20,860
938<font color="#CCCCCC"> rows this is the first iteration</font>

693
00:33:18,010 --> 00:33:22,720
this<font color="#CCCCCC"> is what found that were twos</font>

694
00:33:20,860 --> 00:33:25,689
matches<font color="#E5E5E5"> and from the good matches it</font>

695
00:33:22,720 --> 00:33:29,580
starts<font color="#E5E5E5"> applying heuristics to find more</font>

696
00:33:25,690 --> 00:33:33,910
matches and<font color="#CCCCCC"> hopefully it finds things</font>

697
00:33:29,580 --> 00:33:38,169
fast enough so I can finance the

698
00:33:33,910 --> 00:33:41,410
presentation<font color="#E5E5E5"> but I will leave it here</font>

699
00:33:38,170 --> 00:33:44,530
<font color="#CCCCCC">and so later</font><font color="#E5E5E5"> on the results so the</font>

700
00:33:41,410 --> 00:33:46,960
future of<font color="#CCCCCC"> this tool so the current</font>

701
00:33:44,530 --> 00:33:49,270
<font color="#CCCCCC">status is</font><font color="#E5E5E5"> prediction already actually</font>

702
00:33:46,960 --> 00:33:54,090
<font color="#E5E5E5">I'm</font><font color="#CCCCCC"> using it for my</font><font color="#E5E5E5"> reverse engineering</font>

703
00:33:49,270 --> 00:33:57,850
<font color="#CCCCCC">projects so trust me it works</font><font color="#E5E5E5"> that I</font>

704
00:33:54,090 --> 00:34:00,100
<font color="#E5E5E5">haven't had time to properly I repeat</font>

705
00:33:57,850 --> 00:34:02,169
properly implement this part<font color="#E5E5E5"> important</font>

706
00:34:00,100 --> 00:34:03,129
instructors and enumerations<font color="#E5E5E5"> which is</font>

707
00:34:02,170 --> 00:34:06,010
the best part

708
00:34:03,130 --> 00:34:07,240
let's say that we've<font color="#CCCCCC"> yes matches</font><font color="#E5E5E5"> ten</font>

709
00:34:06,010 --> 00:34:09,639
hunters<font color="#E5E5E5"> or something like that</font>

710
00:34:07,240 --> 00:34:11,679
but we can<font color="#E5E5E5"> properly import all the</font>

711
00:34:09,639 --> 00:34:13,540
structures<font color="#E5E5E5"> and all the enumerations from</font>

712
00:34:11,679 --> 00:34:15,940
that source code<font color="#E5E5E5"> to the</font><font color="#CCCCCC"> Ida database and</font>

713
00:34:13,540 --> 00:34:18,190
apply the prototypes and<font color="#E5E5E5"> saves them it</font>

714
00:34:15,940 --> 00:34:20,168
is also it is<font color="#CCCCCC"> a lot of work that I don't</font>

715
00:34:18,190 --> 00:34:22,360
have to do manually because manual

716
00:34:20,168 --> 00:34:24,569
destructor reconstruction is a pain<font color="#E5E5E5"> in</font>

717
00:34:22,360 --> 00:34:24,570
the<font color="#E5E5E5"> ass</font>

718
00:34:24,668 --> 00:34:31,540
<font color="#CCCCCC">I plan to maybe support Objective C</font><font color="#E5E5E5"> and</font>

719
00:34:28,480 --> 00:34:34,780
C++<font color="#E5E5E5"> maybe partially in the future</font><font color="#CCCCCC"> why</font>

720
00:34:31,540 --> 00:34:39,310
because assigned using<font color="#E5E5E5"> si</font><font color="#CCCCCC"> Lang</font><font color="#E5E5E5"> it</font>

721
00:34:34,780 --> 00:34:42,669
already super that<font color="#E5E5E5"> also I don't</font><font color="#CCCCCC"> think</font>

722
00:34:39,310 --> 00:34:44,590
it's all<font color="#CCCCCC"> we and</font><font color="#E5E5E5"> specific project</font><font color="#CCCCCC"> I think</font>

723
00:34:42,668 --> 00:34:49,080
that<font color="#CCCCCC"> is all just integrating the áfourá</font>

724
00:34:44,590 --> 00:34:53,140
because it serves also<font color="#CCCCCC"> a lot of course</font>

725
00:34:49,080 --> 00:34:55,810
<font color="#E5E5E5">to export into SQLite database my idea</font>

726
00:34:53,139 --> 00:34:58,960
<font color="#E5E5E5">is to take a lot of open source</font><font color="#CCCCCC"> source</font>

727
00:34:55,810 --> 00:35:01,330
<font color="#CCCCCC">codes expert</font><font color="#E5E5E5"> myself the SQLite database</font>

728
00:34:58,960 --> 00:35:03,430
put them somewhere in<font color="#CCCCCC"> our</font><font color="#E5E5E5"> page so you</font>

729
00:35:01,330 --> 00:35:05,950
don't need to do that<font color="#CCCCCC"> and you only need</font>

730
00:35:03,430 --> 00:35:08,350
to<font color="#E5E5E5"> download SQLite databases for</font><font color="#CCCCCC"> unipro</font>

731
00:35:05,950 --> 00:35:10,180
<font color="#E5E5E5">yet you</font><font color="#CCCCCC"> diff</font><font color="#E5E5E5"> then you import the symbols</font>

732
00:35:08,350 --> 00:35:12,310
and<font color="#E5E5E5"> you don't have to</font><font color="#CCCCCC"> care and you can</font>

733
00:35:10,180 --> 00:35:19,060
start working<font color="#E5E5E5"> on your target and that's</font>

734
00:35:12,310 --> 00:35:21,759
<font color="#E5E5E5">it let's see if it finances not yet but</font>

735
00:35:19,060 --> 00:35:24,040
well the<font color="#E5E5E5"> project is open</font><font color="#CCCCCC"> source</font><font color="#E5E5E5"> if you</font>

736
00:35:21,760 --> 00:35:26,610
<font color="#CCCCCC">give me like two minutes</font><font color="#E5E5E5"> I will make it</font>

737
00:35:24,040 --> 00:35:26,610
public now

738
00:35:27,670 --> 00:35:35,920
<font color="#E5E5E5">to the dough make this repository public</font>

739
00:35:37,690 --> 00:35:54,950
<font color="#CCCCCC">say</font><font color="#E5E5E5"> yeah it is fine fine</font><font color="#CCCCCC"> it is public</font>

740
00:35:44,660 --> 00:36:01,460
now<font color="#CCCCCC"> so I will probably</font><font color="#E5E5E5"> have to change my</font>

741
00:35:54,950 --> 00:36:04,700
passwords but<font color="#E5E5E5"> mad well we can see here</font>

742
00:36:01,460 --> 00:36:07,520
this is busy box<font color="#CCCCCC"> displaying</font><font color="#E5E5E5"> many of the</font>

743
00:36:04,700 --> 00:36:10,580
results<font color="#CCCCCC"> that's actually found we can see</font>

744
00:36:07,520 --> 00:36:13,070
<font color="#E5E5E5">that it found here one thousands and</font>

745
00:36:10,580 --> 00:36:18,799
results which are actually pretty<font color="#E5E5E5"> pretty</font>

746
00:36:13,070 --> 00:36:21,530
good as we can see here out of<font color="#CCCCCC"> three</font>

747
00:36:18,800 --> 00:36:23,900
<font color="#CCCCCC">thousand phantoms in</font><font color="#E5E5E5"> these busy box</font>

748
00:36:21,530 --> 00:36:29,120
binary form<font color="#CCCCCC"> it's which is an</font><font color="#E5E5E5"> older</font>

749
00:36:23,900 --> 00:36:30,320
architecture<font color="#E5E5E5"> and that's it thanks for</font>

750
00:36:29,120 --> 00:36:36,249
your time

751
00:36:30,320 --> 00:36:36,249
[Applause]

