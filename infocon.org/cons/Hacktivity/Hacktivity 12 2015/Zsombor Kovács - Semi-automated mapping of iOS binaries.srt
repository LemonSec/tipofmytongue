1
00:00:00,000 --> 00:00:08,138
hello and welcome to this class will be
this would be pretty much think of it as

2
00:00:08,138 --> 00:00:14,000
a classroom exercise so that prayers you
who worked with iOS applications

3
00:00:14,000 --> 00:00:21,240
mainland a daily basis maybe maybe on a
daily basis so that it will show you

4
00:00:21,240 --> 00:00:26,009
guys some tricks that you can use up
your sleeve when it comes to recycling

5
00:00:26,010 --> 00:00:32,730
and analyzing and I was binary so the
name is kinda cryptic but I hope that it

6
00:00:32,729 --> 00:00:39,849
will make sense and it will be clear by
the end of this talk show a very short

7
00:00:39,850 --> 00:00:47,579
interest for those who haven't seen my
face yet so that's my name and then

8
00:00:47,579 --> 00:00:53,199
working as a dentist since the early I
was days so I've been working with I was

9
00:00:53,199 --> 00:00:58,320
up since I was four point though which
dates back to you as as early as 2008

10
00:00:58,320 --> 00:01:06,680
2009 and my field of interest and field
research is focused on how to map and

11
00:01:06,680 --> 00:01:14,110
analyze Objective C based applications
which actually makes most of the I was

12
00:01:14,110 --> 00:01:20,420
absolved there so they are sweatshops
which determine the technology was

13
00:01:20,420 --> 00:01:28,820
announced eight bad as things seem no
its not that were spread as Apple's

14
00:01:28,820 --> 00:01:33,329
supposed to be so most of the time when
we see swift in lies in normal Objective

15
00:01:33,329 --> 00:01:38,100
C applications that's kinda easy to
understand because most companies have

16
00:01:38,100 --> 00:01:42,869
they they are Objective C code is ready
by this time and they obviously don't

17
00:01:42,869 --> 00:01:50,880
want to replace everything they had and
which was fine for them so this talk is

18
00:01:50,880 --> 00:01:58,030
not a cent okamoto they not a frantic
about jailbreaking and as far as I

19
00:01:58,030 --> 00:02:04,509
understand I don't have any jailbreaks
poor I am I was nine point my point all

20
00:02:04,509 --> 00:02:08,190
point to which is the latest version as
of yesterday

21
00:02:08,190 --> 00:02:16,660
instead think this talk like like an
advanced course objectives clue

22
00:02:16,660 --> 00:02:22,770
screwdrivers to have you guys trying to
raise more easily around iOS

23
00:02:22,770 --> 00:02:28,960
applications when it comes to the shop
and testing so this is like a collection

24
00:02:28,960 --> 00:02:35,400
of small ideas and hence I came up or I
read somewhere else and that helped me a

25
00:02:35,400 --> 00:02:41,030
lot when it came to testing I was
applications and when it comes to actual

26
00:02:41,030 --> 00:02:45,930
penetration testing wrote most of the
time our worst enemies time so I hope

27
00:02:45,930 --> 00:02:50,940
you guys that you had some experience
with professional penetration testing

28
00:02:50,940 --> 00:02:58,240
you you will agree with me so that the
biggest burden of this job is to finish

29
00:02:58,240 --> 00:03:05,850
everything on time but unfortunately the
technology and the applications we taxed

30
00:03:05,850 --> 00:03:11,260
and will work with they do not make it
easy for us to finish our job on time

31
00:03:11,260 --> 00:03:17,590
and I hope the districts will save you
guys literally and ours and ours of

32
00:03:17,590 --> 00:03:26,380
misery so just a first a little bit of
control I'm pretty sure everyone is

33
00:03:26,380 --> 00:03:32,680
familiar with IOUs histamine Cisco IOS
and they used to mean software running

34
00:03:32,680 --> 00:03:36,170
on their routers and switches and that
will get it

35
00:03:36,170 --> 00:03:43,920
however since Steve Jobs come find this
stuff nomenclature IRS means something

36
00:03:43,920 --> 00:03:53,329
else the first US version came around in
2007 with the soap like iPhone 3 and now

37
00:03:53,330 --> 00:03:57,210
as of today it's I was nine is the

38
00:03:57,210 --> 00:04:05,520
the first is the main version and at
this point it used to be used to be

39
00:04:05,520 --> 00:04:14,630
there for hipsters I wanna run I had
this first IRS talk in 2010 2011 we said

40
00:04:14,630 --> 00:04:19,130
that a yea these devices are really cool
dialogue my eyes they also but they're

41
00:04:19,130 --> 00:04:24,040
not really designed and not really
suitable for corporate users now it's

42
00:04:24,040 --> 00:04:30,820
significantly changed so this statement
is not true anymore as I R Us is a fully

43
00:04:30,820 --> 00:04:37,310
blown and from the adoptable corporate
device platform and one MDM scheme run

44
00:04:37,310 --> 00:04:45,260
mobile device management tools and
devices came around this is more and

45
00:04:45,260 --> 00:04:52,170
more true as cooperates and that the
prices have means to control what kind

46
00:04:52,170 --> 00:04:57,860
of devices can hold their data and as
time progresses we have a whole lot of

47
00:04:57,860 --> 00:05:03,840
mobile banking applications that can run
punishment things but not so more and

48
00:05:03,840 --> 00:05:09,950
more cooperate they don't get too I was
devices as judging by the trance this

49
00:05:09,950 --> 00:05:15,170
will not turn on unless something very
bad happens around in the world so a

50
00:05:15,170 --> 00:05:22,320
little bit around I was application
testing the first face is as in or pen

51
00:05:22,320 --> 00:05:26,630
test as static mapping which there's a
whole bunch of letters understand I want

52
00:05:26,630 --> 00:05:33,880
to read everything allowed but you guys
can get crap around what this means that

53
00:05:33,880 --> 00:05:38,530
this means like having a clockwork and
taking a magnifying glass and to see

54
00:05:38,530 --> 00:05:42,960
what's inside and what kind of
components the proteases what kind of

55
00:05:42,960 --> 00:05:49,960
get it gadget cities is what kind of
API's what kind of platforms what kind

56
00:05:49,960 --> 00:05:54,510
of third-party modules and so on and so
on saudis information can be gathered

57
00:05:54,510 --> 00:05:56,230
during the first baseman

58
00:05:56,230 --> 00:06:01,600
simply take a binary and start
disassembling it and start peaking

59
00:06:01,600 --> 00:06:09,800
around within the binary so the purpose
of this whole operation is like like an

60
00:06:09,800 --> 00:06:16,810
Army Medical Sciences so another me
focuses on bodies which are not moving

61
00:06:16,810 --> 00:06:22,260
so everything is like static and they
describe what if I'm inside so this is

62
00:06:22,260 --> 00:06:27,560
kind of a similar thing we do one
performing static mapping weather here

63
00:06:27,560 --> 00:06:33,590
when we have and I was by the way we can
easily tracked across header structure

64
00:06:33,590 --> 00:06:38,859
in case the application was written in
Objective C as the Objective C runtime

65
00:06:38,860 --> 00:06:44,160
framework relies extensively reflection
therefore method names class names and

66
00:06:44,160 --> 00:06:48,630
other related info has to be completed
within the binary and it's there and it

67
00:06:48,630 --> 00:06:54,719
easily extractable as for the
nomenclature it's another interesting

68
00:06:54,720 --> 00:07:01,520
topic so if if someone with some kind of
experience with iOS apps just takes a

69
00:07:01,520 --> 00:07:06,370
look around the names of crosses number
of methods and so on and so on so they

70
00:07:06,370 --> 00:07:10,560
will get an understanding about like all
developers world how they structure

71
00:07:10,560 --> 00:07:15,170
things held a name things how they use
things and so on and so on and so on and

72
00:07:15,170 --> 00:07:15,770
the

73
00:07:15,770 --> 00:07:21,140
this information can be very useful when
it comes to later phases of assignment

74
00:07:21,140 --> 00:07:32,330
so this phase is very boring I admit so
it's it's like ours and ours of stabbing

75
00:07:32,330 --> 00:07:38,010
it I deploy and operate another December
2008 peaking around within the binary to

76
00:07:38,010 --> 00:07:43,830
hex edit or looking on the class done
and some but it's worth the hassle

77
00:07:43,830 --> 00:07:48,630
because later on when he wrote
stock-picking around run the application

78
00:07:48,630 --> 00:07:53,740
is running as in dynamic analysis or you
try to YouTube a chair by detection

79
00:07:53,740 --> 00:07:57,040
ratings are certificate billing or try
to pinpoint

80
00:07:57,040 --> 00:08:06,050
total happens so in this later phases
the effort you put into study copying

81
00:08:06,050 --> 00:08:14,530
return very wrong and when we come to
the next bit who knows what's on the

82
00:08:14,530 --> 00:08:26,690
picture of what was the name of the game
here yet it's incredible machine as it's

83
00:08:26,690 --> 00:08:30,289
an amazing game remember that was a
cadet made me a computer nerd in the

84
00:08:30,289 --> 00:08:39,069
first place so when we do that we try to
figure out what's within the boundary

85
00:08:39,070 --> 00:08:44,149
and what happens when the banner eight
is being run and won the application

86
00:08:44,149 --> 00:08:51,980
components are in motion so this phase
usually involves a jailbroken iPad which

87
00:08:51,980 --> 00:08:59,459
luckily having here with all the
necessary modifications which is

88
00:08:59,459 --> 00:09:06,000
required teaching testing we usually is
some kind of debugger which is like

89
00:09:06,000 --> 00:09:12,230
finding a needle stick within the app
and this by the end of the day gives you

90
00:09:12,230 --> 00:09:18,399
a much better understanding what's
within the binary and this is where the

91
00:09:18,399 --> 00:09:24,000
nightmare begins as obviously
application developers and especially

92
00:09:24,000 --> 00:09:30,250
security related applications developers
don't really want et easily understand

93
00:09:30,250 --> 00:09:40,450
hold a productive operate as this brings
us to a whole bunch of problems we have

94
00:09:40,450 --> 00:09:46,579
to face doing autopsies on an actual
application or doing dynamic analyzes

95
00:09:46,579 --> 00:09:52,199
the first of all as I said we need to
have a jailbroken device to run on stuff

96
00:09:52,199 --> 00:09:56,569
and most of the time when we used
security-related products they just

97
00:09:56,570 --> 00:10:02,190
simply say hey dude this is a jailbroken
device please leave me alone

98
00:10:02,190 --> 00:10:06,410
even if there are problems with press a
button and something happens like

99
00:10:06,410 --> 00:10:11,550
encryption HTTP connection is made or
somethin encryption takes place

100
00:10:11,550 --> 00:10:18,300
something is written on the keychain and
so on so long t know what happens under

101
00:10:18,300 --> 00:10:26,910
the hood was we have jumper detection
and pressure that anyone who has ever

102
00:10:26,910 --> 00:10:32,430
encountered heavy to patch a binary have
enjoyed the detection to be passed out

103
00:10:32,430 --> 00:10:33,709
of the binary

104
00:10:33,710 --> 00:10:37,190
this is one of the most frustrating
things that can happen to you so you

105
00:10:37,190 --> 00:10:42,680
spent hours trying to to find the point
where jabar detection takes place you

106
00:10:42,680 --> 00:10:49,319
patch that particular section of the
binary and you run the app again like a

107
00:10:49,320 --> 00:10:54,820
boss or a hundred and eighty and general
election kicks in again at some other

108
00:10:54,820 --> 00:11:00,260
place and you have to usually have to do
this over and over and over and over and

109
00:11:00,260 --> 00:11:06,350
over again and this is as boring as it
sounds so we want to have some kind of

110
00:11:06,350 --> 00:11:13,730
method to find each and every occasion
where Jerry detection is made and last

111
00:11:13,730 --> 00:11:19,100
but not least we have an interesting
looking method for the invite and let's

112
00:11:19,100 --> 00:11:24,740
say hey I just checked out the clock
stopped I sold at this this method of

113
00:11:24,740 --> 00:11:30,900
some kind of encryption if they still
tell me there's some kind of rights will

114
00:11:30,900 --> 00:11:37,220
push into the filesystem I want to know
where is ready to vote for the usual

115
00:11:37,220 --> 00:11:43,480
question when it comes to analyzers and
these problems are really really time

116
00:11:43,480 --> 00:11:52,630
consuming so this is the first line
which looks very scary but apparently

117
00:11:52,630 --> 00:11:59,310
it's not going to be that scary so when
it comes to buying realizes application

118
00:11:59,310 --> 00:12:06,550
developers try to make your work as hard
as it can be so I'm sure you a couple of

119
00:12:06,550 --> 00:12:07,949
things which

120
00:12:07,950 --> 00:12:15,160
are tools in the developers are so
naughty screwed up and Esther so by the

121
00:12:15,160 --> 00:12:19,219
end of the day it's still possible to
analyze by the race but it takes much

122
00:12:19,220 --> 00:12:26,110
more time and that's it so every every
every indication and they're very anti

123
00:12:26,110 --> 00:12:31,070
debugging or and I adore seeing effort
you put into your body just million

124
00:12:31,070 --> 00:12:34,460
raises the bar in terms of effort and
expertise but by the end of the day

125
00:12:34,460 --> 00:12:41,180
everyone will die so first of all this
on the road which is involved with a

126
00:12:41,180 --> 00:12:45,699
very funny very funny funny or minus F
honoring the move on the ground loops

127
00:12:45,700 --> 00:12:55,130
switch within GCC and this means that as
i indicated in the slides over there if

128
00:12:55,130 --> 00:13:01,450
you have a function and will method
instead of having optimize the 21 single

129
00:13:01,450 --> 00:13:11,620
occasion if you use this switch GCC will
copy same sequence to the regarded

130
00:13:11,620 --> 00:13:19,040
places after one after another as far
and I'm functions this as another

131
00:13:19,040 --> 00:13:24,099
obvious choice so that means instead of
having a nice and very easily packable

132
00:13:24,100 --> 00:13:29,970
and very easily met with switchable this
this word now exists because I just

133
00:13:29,970 --> 00:13:34,940
called it so if you have a very nice
function makes a point do something

134
00:13:34,940 --> 00:13:41,390
thing and in case it's simple point
where the application checks for the

135
00:13:41,390 --> 00:13:46,830
device being jailbroken on lot and it
returns a boolean value then it's pretty

136
00:13:46,830 --> 00:13:52,000
pretty true to make it returned and know
each and every time I run and this is

137
00:13:52,000 --> 00:13:55,089
pretty well known among developers so

138
00:13:55,089 --> 00:14:02,040
only rookies use similar kind of job
protection mechanisms instead they opted

139
00:14:02,040 --> 00:14:08,339
for witchcraft like inline functions so
whenever they have to invoke their

140
00:14:08,339 --> 00:14:14,069
general direction method they just copy
the corresponding month sequence to the

141
00:14:14,069 --> 00:14:19,589
appropriate places and their egos you
have two hundred times two hundred

142
00:14:19,589 --> 00:14:24,360
instances of general election returns
and you would have to patch each and

143
00:14:24,360 --> 00:14:32,199
every occasion one by one and it's about
time to time consuming other three

144
00:14:32,199 --> 00:14:38,809
features developer usually use of just
trippin here's a standard procedure te

145
00:14:38,809 --> 00:14:44,999
secured by the rise however Objective C
applications it's not that by the usable

146
00:14:44,999 --> 00:14:49,800
as as I said here on time itself needs a
whole bunch of information about the

147
00:14:49,800 --> 00:14:55,569
battery itself therefore method names
class names and other related info will

148
00:14:55,569 --> 00:15:01,759
be always there so no matter what you do
at some point if you use objective see

149
00:15:01,759 --> 00:15:07,319
you have to know the name of the method
and the objects and by the end of the

150
00:15:07,319 --> 00:15:11,019
day most of the time you will be able to
as a time-tested you will be able to

151
00:15:11,019 --> 00:15:17,009
reconstruct the header structure
reflection reflection we love reflection

152
00:15:17,009 --> 00:15:22,379
because it makes study analyzes a pain
in the butt

153
00:15:22,379 --> 00:15:29,269
that means that if you see a very nice
function which is involved somewhere but

154
00:15:29,269 --> 00:15:33,800
since its name is assembled long-time

155
00:15:33,800 --> 00:15:38,300
either pro won't be able to pinpoint
that particular location for you and

156
00:15:38,300 --> 00:15:42,758
unless you have a fesse trick up your
sleeve which I will show you later on

157
00:15:42,759 --> 00:15:44,430
you will be

158
00:15:44,430 --> 00:15:52,489
brought one trying to figure out whether
particular function is involved and last

159
00:15:52,490 --> 00:15:57,649
but not least my favorite one use plain
simple C++ instead of objects see

160
00:15:57,649 --> 00:16:03,209
objects seized a superset of C++ is
perfectly plausible unusable if you just

161
00:16:03,209 --> 00:16:09,739
put some objective see stuff within
Objective C can be very easily very

162
00:16:09,740 --> 00:16:16,410
easily operated and we saw that many
times when it comes to MDM systems and

163
00:16:16,410 --> 00:16:20,829
other security-related products they
rely heavily on similar kind of

164
00:16:20,830 --> 00:16:28,310
operations and the best thing is that
these tools can be combined so I chatted

165
00:16:28,310 --> 00:16:33,640
with a developer of cooperate and iam
solution about the holiday detector

166
00:16:33,640 --> 00:16:40,949
break jailbroken devices and why I was
literally spending days emitter a trying

167
00:16:40,950 --> 00:16:47,490
to make the damping run on algebra and
they said that they have a mutator

168
00:16:47,490 --> 00:16:56,740
engine which takes a bite sequence which
does some kind of job protection and a

169
00:16:56,740 --> 00:17:00,900
mutated it and they copy to random
places within the binary one day do the

170
00:17:00,900 --> 00:17:06,540
compilation process as assembly in nice
so that means that you have literally

171
00:17:06,540 --> 00:17:10,438
hundreds of places where job a detection
ratings are implemented and not a single

172
00:17:10,439 --> 00:17:15,059
function is called job attention which
returns a boolean yes or no and that's a

173
00:17:15,059 --> 00:17:22,639
really really hard thing to analyze into
to circumvent ok first of all before

174
00:17:22,640 --> 00:17:30,020
going to too much much much more
technical stuff let's see a problem we

175
00:17:30,020 --> 00:17:34,809
have a screen and you want to know what
happens when I press a particular button

176
00:17:34,809 --> 00:17:42,100
or switch or whatever on the screen and
find out which locations in which

177
00:17:42,100 --> 00:17:45,520
methods in the application by the way
are responsible for handling user

178
00:17:45,520 --> 00:17:48,620
interaction for a particular screen

179
00:17:48,620 --> 00:17:56,620
and there's a solution but I will show
you that in order to do this I have a

180
00:17:56,620 --> 00:18:03,780
nice I patio with this damn phone model
I was application thing which is a very

181
00:18:03,780 --> 00:18:10,860
nice thing so if you are trying to be I
was hackers or you are the people who

182
00:18:10,860 --> 00:18:17,360
make other people try to be I was
hackers so glad it's free and it's one

183
00:18:17,360 --> 00:18:23,629
of the best playgrounds are there for
learning how to hack iOS apps so we have

184
00:18:23,630 --> 00:18:29,290
this very nice koon and the jailbreak
detection button and it's jailbroken and

185
00:18:29,290 --> 00:18:34,530
want to see how the magic happens that
happens under the hood so in order to

186
00:18:34,530 --> 00:18:40,070
achieve this have a whole bunch of
options for instance when we come to the

187
00:18:40,070 --> 00:18:48,370
class them as I said this is the try to
make this bigger for you so this is the

188
00:18:48,370 --> 00:18:54,059
kind of concede so this is the kind of
structure you can distract from the

189
00:18:54,059 --> 00:18:59,928
binary itself so it's it's truly do it
so I have a very very very very detailed

190
00:18:59,929 --> 00:19:07,809
list of objects methods and interfaces
let's try to find toward jailbreak and

191
00:19:07,809 --> 00:19:12,540
blue yeah we have a jailbroken detection
BC and which happens to be the exact mom

192
00:19:12,540 --> 00:19:18,678
which we are looking for at the moment
that what if we can't do this in such as

193
00:19:18,679 --> 00:19:25,490
the easy way I mean what happens if it
just doesn't work what can we do now so

194
00:19:25,490 --> 00:19:49,170
I have here some thing for you will
first message back to my device

195
00:19:49,170 --> 00:20:02,260
ok we got and first of all I use cycle
is like Objective C manipulation

196
00:20:02,260 --> 00:20:08,950
framework and death initially created
between JavaScript and Objective C which

197
00:20:08,950 --> 00:20:13,400
is a rotary thing to say but
surprisingly it was awesome

198
00:20:13,400 --> 00:20:39,690
testing so let's try to find the
application and to see

199
00:20:39,690 --> 00:20:47,409
so this that came in tho construct shows
you how to the entire screen you see so

200
00:20:47,409 --> 00:20:54,009
when it comes to many operations on the
screen you can easily access those items

201
00:20:54,009 --> 00:21:12,870
on the screen from here and if we say we
want to see what's on the screen

202
00:21:12,870 --> 00:21:28,719
so it's not like a tree like structure
about what's on the screen and this can

203
00:21:28,720 --> 00:21:36,610
come very handy as if you look for the
titles here is like see this jumper

204
00:21:36,610 --> 00:21:42,919
detection here you have the menu item
here so everything you see on the screen

205
00:21:42,920 --> 00:21:49,440
will be industry like structure if we
look for these are like buttons and easy

206
00:21:49,440 --> 00:22:09,040
you can be formed within the tree-like
structure with this kind of

207
00:22:09,040 --> 00:22:18,060
construct we can make our way down on
the tree and by the end of the day with

208
00:22:18,060 --> 00:22:25,560
each of these you about done here and
this context obviously has target which

209
00:22:25,560 --> 00:22:32,220
tells us which object it you deserve
this I wrestle or another view

210
00:22:32,220 --> 00:22:38,480
controller terms what you see on the
screen is a view object

211
00:22:38,480 --> 00:22:44,170
who want to see the controller object to
it and this constructed this district

212
00:22:44,170 --> 00:22:50,900
can be used to pinpoint the exact exact
object in that nothing is responsible

213
00:22:50,900 --> 00:23:02,570
for user interaction ok next question we
have a very nice application and we know

214
00:23:02,570 --> 00:23:08,700
that somewhere it uses some kind of a
vehicle and you want to pinpoint where

215
00:23:08,700 --> 00:23:15,240
does it so ideally we need a we look for
a method which does not make any kind of

216
00:23:15,240 --> 00:23:20,630
modification to the binary so that means
that if we handle it like an MDM

217
00:23:20,630 --> 00:23:25,580
products or something that checks its
own integrity we don't have to match the

218
00:23:25,580 --> 00:23:29,389
integrity checking modules and we don't
have to check the modules the check the

219
00:23:29,390 --> 00:23:35,110
integrity of the integrity checking
modules done so instead we'd love to

220
00:23:35,110 --> 00:23:43,360
hear to do this without ever touching
the binary so this typical areas of

221
00:23:43,360 --> 00:23:49,469
interest are jibber detection teachings
is certainly crypto and I will show you

222
00:23:49,470 --> 00:23:54,690
guys to separate methods to pinpointing
to get those precious stack traces when

223
00:23:54,690 --> 00:24:04,120
it comes to an actual API call first of
all I'm going to use gdb which is very

224
00:24:04,120 --> 00:24:09,929
very useful sometimes even though it's
not supported by Apple any more days

225
00:24:09,930 --> 00:24:12,310
till opted for nvm as they

226
00:24:12,310 --> 00:24:23,620
new to bugger off twice so we go to this
year break detection them about the

227
00:24:23,620 --> 00:24:34,750
occasion again and we go for

228
00:24:34,750 --> 00:24:35,580
yes sir

229
00:24:35,580 --> 00:24:49,240
is simply a gdb and got into the process
itself so let's make it wrong and I'm

230
00:24:49,240 --> 00:24:55,330
really interested in for example for
goodness sake when they start function

231
00:24:55,330 --> 00:25:01,679
is used so stats is is used for
filesystem interaction it can be used

232
00:25:01,680 --> 00:25:08,250
for its actually a family of API calls
however most of the time they are used

233
00:25:08,250 --> 00:25:16,300
for the check of whether or not to file
exists or some characteristics of the

234
00:25:16,300 --> 00:25:21,149
fire or not i mean for instance you can
check whether or not file is executable

235
00:25:21,150 --> 00:25:28,410
or not and these tools are used these
commands families are used in many

236
00:25:28,410 --> 00:25:35,240
generated so we'd love to see how the
application does give a deduction in

237
00:25:35,240 --> 00:25:46,170
this case so what we'll do is simply put
a breakpoint on tax we can easily

238
00:25:46,170 --> 00:25:50,920
defined a couple of commands to be run
each time that particular break points

239
00:25:50,920 --> 00:25:58,530
hit so first of all I'd love to print
out the parameter of the first time

240
00:25:58,530 --> 00:26:03,240
either of these state function I did my
homework I checked the API reference

241
00:26:03,240 --> 00:26:09,950
page indie developer at apple.com
website and I was very happy to realize

242
00:26:09,950 --> 00:26:14,630
that there's a strange as the first
parameter and that contains defining

243
00:26:14,630 --> 00:26:20,630
itself and that's the point or two that
particular string object is handed over

244
00:26:20,630 --> 00:26:28,720
to the function in the art 0 register
which printing out here I want to see

245
00:26:28,720 --> 00:26:35,580
where we are in gdb this gives you a
nice stack trace and and that's it

246
00:26:35,580 --> 00:26:42,530
let's see so we come to the piracy
detection exercise

247
00:26:42,530 --> 00:26:49,480
again I did my homework and know that
this popular piracy detection routing

248
00:26:49,480 --> 00:26:55,880
does but it does suggest piracy
detection and it uses this show so I

249
00:26:55,880 --> 00:27:08,760
press the button and this is very
interesting this shouldn't happen and as

250
00:27:08,760 --> 00:27:19,120
we see that the actual state races are
here so whenever yeah because the gym it

251
00:27:19,120 --> 00:27:24,610
didn't refresh itself so it's still
there I can go on and to see called the

252
00:27:24,610 --> 00:27:33,320
pregnancy hit and where these state
functions from and this can be very

253
00:27:33,320 --> 00:27:39,409
easily usable many kinds applications
employ some kind of anti debugging

254
00:27:39,410 --> 00:27:49,180
aspect however that can be many times
since recommended as I said this is the

255
00:27:49,180 --> 00:27:57,920
GDP again for reference sake the
inevitable pro of using gdb is that it

256
00:27:57,920 --> 00:28:02,570
looks awesome I mean you're typing on a
black screen white letters it's so

257
00:28:02,570 --> 00:28:08,919
hecker light however we do to be there
are many problems also for instance many

258
00:28:08,920 --> 00:28:14,340
times it's not perfectly feasible either
because your device cannot run gdb or

259
00:28:14,340 --> 00:28:19,429
there is no version of GDP for your
version of iOS or the application itself

260
00:28:19,430 --> 00:28:25,910
is actively preventing being traced with
gdb and that can be again it can be

261
00:28:25,910 --> 00:28:31,540
supplemented however most of the time
it's doable but the biggest problem with

262
00:28:31,540 --> 00:28:37,409
it it's not not persistent so that means
each and every time you want to tweak

263
00:28:37,410 --> 00:28:42,450
your application you have to do this
over and over and over again and we want

264
00:28:42,450 --> 00:28:47,690
to use something more usable I mean it
looks awesome when it comes to the

265
00:28:47,690 --> 00:28:50,040
client presentations however

266
00:28:50,040 --> 00:28:56,899
when it comes to actual Pakistan work at
a time it's a waste of time

267
00:28:56,900 --> 00:29:03,720
most of the time so we want to use
something that can be used in a more

268
00:29:03,720 --> 00:29:10,910
prominent fashion show you where we're
going to compiled by the end of the day

269
00:29:10,910 --> 00:29:18,150
CBS of straight extensions see the UCS
substrate extensions it used to be

270
00:29:18,150 --> 00:29:23,930
called mobile substrate and that means
that on jailbroken devices you can use

271
00:29:23,930 --> 00:29:31,780
CDMA to dynamically load time libraries
to your application this is pretty much

272
00:29:31,780 --> 00:29:38,700
the same concept as with dealers in
Windows so that means that an

273
00:29:38,700 --> 00:29:44,120
application does not have to hold each
and every feature set in the memory so

274
00:29:44,120 --> 00:29:51,290
that it doesn't consume that much memory
and this is especially when it comes to

275
00:29:51,290 --> 00:29:57,980
mobile devices with technology is years
by a whole bunch of applications like

276
00:29:57,980 --> 00:30:03,740
the NCAA says kill switch smoke I'm
pretty sure that these names ring about

277
00:30:03,740 --> 00:30:11,250
for you guys who have some expertise in
this thing and as a result serious of

278
00:30:11,250 --> 00:30:15,870
straight extensions are the canisters
choice that means that no manual

279
00:30:15,870 --> 00:30:17,010
patching is needed

280
00:30:17,010 --> 00:30:21,060
aids basically a simple

281
00:30:21,060 --> 00:30:27,929
deleted files from the file system if
you want to disable your extension and

282
00:30:27,930 --> 00:30:33,480
they creation is as well see is
trivially scriptable if we have the

283
00:30:33,480 --> 00:30:41,180
class which I was surely this is the
part of what we going to use alternate

284
00:30:41,180 --> 00:30:47,250
choices plus there is an on-device iris
to chain and you don't have to have sex

285
00:30:47,250 --> 00:30:52,100
codes to court to develop iOS
applications you can use everything the

286
00:30:52,100 --> 00:30:57,550
ones on the device itself and besides
full blown up so you can easily compare

287
00:30:57,550 --> 00:31:00,129
substrate extensions for existing apps

288
00:31:00,130 --> 00:31:04,500
and this gives us a whole bunch of
opportunities so that this means that we

289
00:31:04,500 --> 00:31:11,080
can inject whatever we want into and I
was application this is this can bring

290
00:31:11,080 --> 00:31:17,570
very cool conclusions ok so before
moving on

291
00:31:17,570 --> 00:31:25,889
meet my really nice demo application
which is pretty much these five lines

292
00:31:25,890 --> 00:31:30,540
that those six lines of code so this
means that we check whether or not a

293
00:31:30,540 --> 00:31:36,750
particular file system exists or not and
in case it exists we involve one

294
00:31:36,750 --> 00:31:40,650
function and if not we can walk and
other and that's pretty much it even if

295
00:31:40,650 --> 00:31:46,340
you are not limited objective see is
pretty straightforward so when it comes

296
00:31:46,340 --> 00:31:52,610
to this assembly this is what it looked
like it looks like I hope you guys can I

297
00:31:52,610 --> 00:32:05,340
find the pool with you

298
00:32:05,340 --> 00:32:13,780
so I find a pro and lowered my
application into very small app so it

299
00:32:13,780 --> 00:32:27,110
takes more time to load it so this is
the try to now it's a bit better so as

300
00:32:27,110 --> 00:32:32,919
you can see that we basically implement
this kind of function so even if you're

301
00:32:32,920 --> 00:32:39,600
not fluent in this is somebody it looks
horrible however these texts make it

302
00:32:39,600 --> 00:32:45,030
quite easily understandable what's going
on so we check whether or not this city

303
00:32:45,030 --> 00:32:51,530
are filing system not in case it exists
we were wondering if not being so that's

304
00:32:51,530 --> 00:32:53,000
true beyond

305
00:32:53,000 --> 00:33:09,400
very easy to understand so bypass know
how can be see the actual the heart of

306
00:33:09,400 --> 00:33:14,970
this thing is this file exists that part
function which is a library Iowa score

307
00:33:14,970 --> 00:33:21,400
and as its name suggests that it is
simply returns the rebooting yes I know

308
00:33:21,400 --> 00:33:27,110
whether or not a particular file exists
or not and this is the actual CDR

309
00:33:27,110 --> 00:33:32,290
substrate extension Britain Objective C
we are going to utilize to pinpoint

310
00:33:32,290 --> 00:33:39,389
where this particular function is run
from just a quick overview serve this

311
00:33:39,390 --> 00:33:41,440
person or age

312
00:33:41,440 --> 00:33:48,610
construct it instructs the framework to
run the original function itself so what

313
00:33:48,610 --> 00:33:54,240
does the baby boom value we have it here
we lock some things we love this track

314
00:33:54,240 --> 00:33:59,980
days and we return what has been
returned so that's like a proxy thing so

315
00:33:59,980 --> 00:34:07,150
that we inject maybe I could be doing
something and we return what received

316
00:34:07,150 --> 00:34:33,810
and actually how this thing works in
practice

317
00:34:33,810 --> 00:35:22,580
in the first place so quickly

318
00:35:22,580 --> 00:35:34,110
from the rehearsal of these days so the
actual

319
00:35:34,110 --> 00:35:41,910
are found with indeed / library / mobile
substrate / dynamic libraries directory

320
00:35:41,910 --> 00:35:51,520
and proceeded on we compile our binary
it will end up here so that's pretty

321
00:35:51,520 --> 00:35:56,330
easy to use to delete what about it and
we need to remove or disable an

322
00:35:56,330 --> 00:36:01,680
extension we simply delete the
corresponding so how are we going to

323
00:36:01,680 --> 00:36:12,250
solve this one ok we'll have for 30th a
nice interface card NIC pls means a new

324
00:36:12,250 --> 00:36:17,310
instance creator it asks us whether or
not want to create a tweak application

325
00:36:17,310 --> 00:36:41,710
liability or anything else said I want
to create a tweak not call it that

326
00:36:41,710 --> 00:36:55,060
and what the actual name of the package
is what we want to inject into here you

327
00:36:55,060 --> 00:36:59,140
don't want to meet anything else and
then we have a new instance which does

328
00:36:59,140 --> 00:37:04,200
not anything but can become tired so
this is a very useful thing to start

329
00:37:04,200 --> 00:37:12,799
from and we look at here we have this
week that exxon which is the actual

330
00:37:12,800 --> 00:37:17,310
place what we need to capacities as the
fire we need to finish with Objective C

331
00:37:17,310 --> 00:37:27,160
cold and there's a bunch of instructions
multi feel a tremendous fun but I have

332
00:37:27,160 --> 00:37:32,569
my so straight extensions ready already

333
00:37:32,570 --> 00:37:53,470
yes

334
00:37:53,470 --> 00:37:56,368
we make

335
00:37:56,369 --> 00:38:16,359
lock screen of my iPad and which is
interesting because they compared the

336
00:38:16,359 --> 00:38:16,960
wrong thing

337
00:38:16,960 --> 00:39:27,000
ok so next year is not the wrong thing

338
00:39:27,000 --> 00:39:41,170
should be so we can see from where the
function was called and was with their

339
00:39:41,170 --> 00:39:49,160
we can easily evade detection also once
we have a control about what the actual

340
00:39:49,160 --> 00:39:56,170
file what hoc Bai ko returns then we can
use this framework to bypass the

341
00:39:56,170 --> 00:40:03,400
detection without ever touching the
binary so basically this is the choice

342
00:40:03,400 --> 00:40:07,980
this is the tool used to bypass this
very primitive

343
00:40:07,980 --> 00:40:14,200
detection method so it's pretty easy to
understand what it does in case it is

344
00:40:14,200 --> 00:40:15,839
the parameter is this

345
00:40:15,840 --> 00:40:22,410
/ applications / city editor at trial
then we return an hour unless otherwise

346
00:40:22,410 --> 00:41:19,290
wait on whatever is returned and we
continue this in a similar fashion

347
00:41:19,290 --> 00:41:55,060
earlier

348
00:41:55,060 --> 00:42:12,810
and we'll see that it's it displays a it
displays a device clean message which

349
00:42:12,810 --> 00:42:16,150
means that we essentially bypassed

350
00:42:16,150 --> 00:42:24,290
visitation with we go to the sea slugs
we see that all log-in message ended up

351
00:42:24,290 --> 00:42:32,759
here so generate detection has been
divided so this was what I wanted to say

352
00:42:32,760 --> 00:42:49,940
any questions that's a question

353
00:42:49,940 --> 00:42:54,020
so the question was what to do when it
comes to eclipsing binaries so what they

354
00:42:54,020 --> 00:42:59,880
mean by encryption like the fat lady
lamb which is applied in da IQs binaries

355
00:42:59,880 --> 00:43:06,760
yeah so the thing is that whenever you
download an application from the Apple

356
00:43:06,760 --> 00:43:12,400
App Store it's encrypted with Opera
skated with a system called fairplay

357
00:43:12,400 --> 00:43:19,329
DRAM and there are two to decrypt ordeal
to skate those fires so clutch is one of

358
00:43:19,329 --> 00:43:25,359
the projects which can be used for this
purpose but if you google it you will

359
00:43:25,359 --> 00:43:30,270
find very nicely written gdb articles
how to manually dump certain segments of

360
00:43:30,270 --> 00:43:35,460
the memory hole to occupy how to
calculate offsets to dump memories from

361
00:43:35,460 --> 00:43:40,829
the clutch is the word you're looking
for and then you have a decrypted

362
00:43:40,829 --> 00:43:51,930
honoree and you will be able to play
these games with those bindles also

363
00:43:51,930 --> 00:44:01,899
yes before anything happens because if
you try to load fair play a fair played

364
00:44:01,900 --> 00:44:09,150
by then it will explode because it will
not be able to you to figure out what's

365
00:44:09,150 --> 00:44:16,340
within the boundary and the enemy we
have time for one more question no thank

366
00:44:16,340 --> 00:44:16,690
you for your attention

