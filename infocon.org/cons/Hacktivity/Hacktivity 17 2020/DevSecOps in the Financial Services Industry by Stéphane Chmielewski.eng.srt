1
00:00:06,480 --> 00:00:08,160
hi everyone

2
00:00:08,160 --> 00:00:10,719
my name is stefan smilevsky and i'm the

3
00:00:10,719 --> 00:00:13,200
chief information security officer

4
00:00:13,200 --> 00:00:16,320
and head of operations at phenology

5
00:00:16,320 --> 00:00:19,600
luxembourgish fintech

6
00:00:23,760 --> 00:00:26,400
i would like to share with you today how

7
00:00:26,400 --> 00:00:27,359
we approach

8
00:00:27,359 --> 00:00:30,400
the issues of digital transformation

9
00:00:30,400 --> 00:00:33,280
in the financial services industry the

10
00:00:33,280 --> 00:00:35,680
devops automation principles

11
00:00:35,680 --> 00:00:38,960
and now we integrate security within our

12
00:00:38,960 --> 00:00:42,320
cicd pipelines

13
00:00:42,480 --> 00:00:45,039
i will first come back to the contextual

14
00:00:45,039 --> 00:00:45,760
elements

15
00:00:45,760 --> 00:00:48,000
that require working now in a more

16
00:00:48,000 --> 00:00:49,280
automated mode

17
00:00:49,280 --> 00:00:51,920
as well as the answer that devsecops can

18
00:00:51,920 --> 00:00:53,680
offer

19
00:00:53,680 --> 00:00:56,079
i will then talk about the devsecops

20
00:00:56,079 --> 00:00:57,280
principles

21
00:00:57,280 --> 00:01:00,879
before specifying how the implementation

22
00:01:00,879 --> 00:01:01,199
of

23
00:01:01,199 --> 00:01:04,239
depth setups can be achieved from a

24
00:01:04,239 --> 00:01:07,760
technological point of view

25
00:01:08,720 --> 00:01:11,200
i will have the opportunity to answer

26
00:01:11,200 --> 00:01:12,000
some questions

27
00:01:12,000 --> 00:01:13,840
that you may have at the end of this

28
00:01:13,840 --> 00:01:16,240
speech

29
00:01:20,000 --> 00:01:22,640
digital technologies are gradually

30
00:01:22,640 --> 00:01:24,159
transforming

31
00:01:24,159 --> 00:01:26,640
transforming all of our industries and

32
00:01:26,640 --> 00:01:28,799
the financial services industry is no

33
00:01:28,799 --> 00:01:31,119
exception

34
00:01:31,119 --> 00:01:33,439
companies are increasingly adopting

35
00:01:33,439 --> 00:01:34,799
modern ways

36
00:01:34,799 --> 00:01:36,560
of developing their solution and

37
00:01:36,560 --> 00:01:38,400
applying new software development

38
00:01:38,400 --> 00:01:39,759
practices

39
00:01:39,759 --> 00:01:43,360
like agile or devops

40
00:01:43,360 --> 00:01:45,920
these practices make it possible to

41
00:01:45,920 --> 00:01:46,880
develop

42
00:01:46,880 --> 00:01:50,240
test correct and deploy

43
00:01:50,240 --> 00:01:52,240
faster than traditional development

44
00:01:52,240 --> 00:01:53,520
methods

45
00:01:53,520 --> 00:01:57,200
and improve time to market

46
00:01:57,680 --> 00:02:00,320
however it's becoming increasingly

47
00:02:00,320 --> 00:02:01,119
difficult

48
00:02:01,119 --> 00:02:03,759
to keep up with the pace in terms of

49
00:02:03,759 --> 00:02:05,200
security

50
00:02:05,200 --> 00:02:07,520
and to guarantee the compliance of these

51
00:02:07,520 --> 00:02:08,399
practices

52
00:02:08,399 --> 00:02:11,520
with regard to regulatory framework that

53
00:02:11,520 --> 00:02:12,239
is getting

54
00:02:12,239 --> 00:02:16,239
tougher and more complex

55
00:02:16,319 --> 00:02:19,360
as you know cyber threats

56
00:02:19,360 --> 00:02:22,400
have evolved exponentially with new

57
00:02:22,400 --> 00:02:24,239
types of increasingly

58
00:02:24,239 --> 00:02:27,840
sophisticated attacks it becomes

59
00:02:27,840 --> 00:02:32,560
critical with all these elements

60
00:02:32,560 --> 00:02:34,840
to implement practices that resolve the

61
00:02:34,840 --> 00:02:36,400
tension between

62
00:02:36,400 --> 00:02:39,519
modi digitalization and

63
00:02:39,519 --> 00:02:42,879
sufficient security

64
00:02:47,200 --> 00:02:49,440
embedding security within devops

65
00:02:49,440 --> 00:02:50,879
practices

66
00:02:50,879 --> 00:02:54,720
and cicd pipelines as implications

67
00:02:54,720 --> 00:02:59,040
for company culture organization

68
00:02:59,040 --> 00:03:02,640
and tools the adoption of

69
00:03:02,640 --> 00:03:06,080
depth cyclops practices is very

70
00:03:06,080 --> 00:03:09,360
structuring for our company

71
00:03:09,360 --> 00:03:12,400
this should first lead the organization

72
00:03:12,400 --> 00:03:15,440
to reassess its compliance framework

73
00:03:15,440 --> 00:03:18,159
and now the compliance measurement is

74
00:03:18,159 --> 00:03:19,360
carried out

75
00:03:19,360 --> 00:03:22,720
in terms of kpis

76
00:03:23,120 --> 00:03:25,920
to avoid the phenomenon of silos it is

77
00:03:25,920 --> 00:03:27,200
also important

78
00:03:27,200 --> 00:03:30,159
to work with integrated teams that is to

79
00:03:30,159 --> 00:03:30,959
say

80
00:03:30,959 --> 00:03:34,480
by integrating the security of devsec of

81
00:03:34,480 --> 00:03:38,560
team within the devs devops team

82
00:03:38,560 --> 00:03:41,680
the devsecops team can thus

83
00:03:41,680 --> 00:03:46,480
coach and influence development choices

84
00:03:46,480 --> 00:03:50,480
depth setups make it make it possible to

85
00:03:50,480 --> 00:03:52,159
have a unified process

86
00:03:52,159 --> 00:03:55,040
within which the passage from

87
00:03:55,040 --> 00:03:57,200
development to testing and testing to

88
00:03:57,200 --> 00:03:59,360
deployment in production

89
00:03:59,360 --> 00:04:02,879
is automated through a cicd tool

90
00:04:02,879 --> 00:04:06,000
with the integration of also

91
00:04:06,000 --> 00:04:10,239
automated security controls

92
00:04:10,879 --> 00:04:13,920
like any change process it can take

93
00:04:13,920 --> 00:04:17,358
time and therefore integrating

94
00:04:17,358 --> 00:04:21,440
security into devops practices

95
00:04:21,440 --> 00:04:29,840
is an iterative process

96
00:04:31,040 --> 00:04:34,400
devsecops principles are built

97
00:04:34,400 --> 00:04:36,880
on devops automation principles by

98
00:04:36,880 --> 00:04:37,440
adding

99
00:04:37,440 --> 00:04:40,840
a layer of security to maintain the

100
00:04:40,840 --> 00:04:42,080
confidentiality

101
00:04:42,080 --> 00:04:44,960
integrity and availability of tatang

102
00:04:44,960 --> 00:04:47,440
systems

103
00:04:47,919 --> 00:04:51,040
as devops allows to deliver smaller and

104
00:04:51,040 --> 00:04:53,120
more frequent releases

105
00:04:53,120 --> 00:04:56,240
depth setups must allow

106
00:04:56,240 --> 00:04:59,120
to integrate into this mode of operation

107
00:04:59,120 --> 00:04:59,600
by

108
00:04:59,600 --> 00:05:03,840
following on agile methodologies

109
00:05:03,840 --> 00:05:06,880
then one of the keys to a successful

110
00:05:06,880 --> 00:05:09,520
transition to death cycles

111
00:05:09,520 --> 00:05:12,560
is obviously to be able to automate the

112
00:05:12,560 --> 00:05:14,000
security tests

113
00:05:14,000 --> 00:05:18,639
and control as much as possible

114
00:05:18,639 --> 00:05:22,160
another challenge for devsecops is to be

115
00:05:22,160 --> 00:05:23,600
able to influence

116
00:05:23,600 --> 00:05:27,199
the work of developers enough to avoid

117
00:05:27,199 --> 00:05:31,199
introducing security vulnerabilities

118
00:05:31,199 --> 00:05:34,479
this issue is as much cultural

119
00:05:34,479 --> 00:05:38,160
as it is technological from the business

120
00:05:38,160 --> 00:05:41,039
point of view the introduction of

121
00:05:41,039 --> 00:05:43,600
death's sake of style practice

122
00:05:43,600 --> 00:05:46,400
should ensure a continuous level of

123
00:05:46,400 --> 00:05:47,759
compliance

124
00:05:47,759 --> 00:05:52,000
over time finally

125
00:05:52,000 --> 00:05:55,199
the training aspect of engineers is an

126
00:05:55,199 --> 00:05:56,560
important topic

127
00:05:56,560 --> 00:05:59,360
which must continue to be addressed and

128
00:05:59,360 --> 00:06:00,560
reinforced

129
00:06:00,560 --> 00:06:03,759
in order to continue to face and adapt

130
00:06:03,759 --> 00:06:07,840
to new threats

131
00:06:11,039 --> 00:06:15,520
so how do we integrate depth circuits

132
00:06:15,520 --> 00:06:18,880
and what kind of practices should we put

133
00:06:18,880 --> 00:06:21,199
in place to automate security within

134
00:06:21,199 --> 00:06:22,000
devops

135
00:06:22,000 --> 00:06:25,280
and cicd pipelines

136
00:06:25,280 --> 00:06:28,560
we will know we will now approach

137
00:06:28,560 --> 00:06:32,960
the technology technological part of dex

138
00:06:32,960 --> 00:06:36,319
and of the implementation

139
00:06:36,319 --> 00:06:38,400
by detailing what control to put in

140
00:06:38,400 --> 00:06:40,319
place and especially

141
00:06:40,319 --> 00:06:43,919
when and in what way

142
00:06:44,160 --> 00:06:46,800
one of the first subjects that uh that

143
00:06:46,800 --> 00:06:48,560
must be addressed

144
00:06:48,560 --> 00:06:52,639
is the management of secrets to be sure

145
00:06:52,639 --> 00:06:55,919
to properly manage the passwords

146
00:06:55,919 --> 00:06:58,639
and a various certificates that will be

147
00:06:58,639 --> 00:06:59,840
used

148
00:06:59,840 --> 00:07:02,080
in the development's lifeline cycle of

149
00:07:02,080 --> 00:07:02,960
your products

150
00:07:02,960 --> 00:07:08,719
and applications and this automatically

151
00:07:09,039 --> 00:07:12,160
another important aspect will be to

152
00:07:12,160 --> 00:07:14,000
integrate

153
00:07:14,000 --> 00:07:17,919
systematic and automatic code review

154
00:07:17,919 --> 00:07:19,919
called static application security

155
00:07:19,919 --> 00:07:21,360
testing

156
00:07:21,360 --> 00:07:24,400
to detect coding errors and

157
00:07:24,400 --> 00:07:28,719
check the quality of the code

158
00:07:28,960 --> 00:07:32,639
after the code review the application

159
00:07:32,639 --> 00:07:36,160
should be evaluated after being launched

160
00:07:36,160 --> 00:07:39,199
to identify professional potential

161
00:07:39,199 --> 00:07:41,520
security vulnerabilities in the web

162
00:07:41,520 --> 00:07:42,720
application

163
00:07:42,720 --> 00:07:47,120
and architectural weaknesses

164
00:07:47,120 --> 00:07:50,240
the objective here is to check that the

165
00:07:50,240 --> 00:07:52,639
application does not present

166
00:07:52,639 --> 00:07:56,800
any vulnerability when it is running

167
00:07:57,599 --> 00:08:00,240
another important element to take into

168
00:08:00,240 --> 00:08:02,080
consideration

169
00:08:02,080 --> 00:08:05,440
is the fact of using application

170
00:08:05,440 --> 00:08:10,319
in the form of docker type containers

171
00:08:10,319 --> 00:08:13,840
it is therefore important to create out

172
00:08:13,840 --> 00:08:16,800
regular and automatic scans of these

173
00:08:16,800 --> 00:08:18,479
docker containers

174
00:08:18,479 --> 00:08:21,919
through the cicd pipelines to avoid

175
00:08:21,919 --> 00:08:27,840
deploying updated applications

176
00:08:29,759 --> 00:08:32,958
an interesting development

177
00:08:32,958 --> 00:08:36,000
brought by technology is to be able to

178
00:08:36,000 --> 00:08:37,279
manage

179
00:08:37,279 --> 00:08:41,519
the configuration

180
00:08:41,519 --> 00:08:44,800
as it was some code we call that

181
00:08:44,800 --> 00:08:47,120
compliance as code

182
00:08:47,120 --> 00:08:49,200
that is to say to generate the

183
00:08:49,200 --> 00:08:51,519
configuration of the systems

184
00:08:51,519 --> 00:08:54,959
automatically to test it

185
00:08:54,959 --> 00:08:58,240
against the security requirements and

186
00:08:58,240 --> 00:09:01,200
monitor changes automatically through

187
00:09:01,200 --> 00:09:04,640
the cict pipeline

188
00:09:05,440 --> 00:09:09,200
a last important break of a deaf psycho

189
00:09:09,200 --> 00:09:12,320
approach is to integrate an

190
00:09:12,320 --> 00:09:15,200
adapted monitoring as well as the

191
00:09:15,200 --> 00:09:17,760
ability to test

192
00:09:17,760 --> 00:09:19,839
via penetration testing that the

193
00:09:19,839 --> 00:09:20,959
application

194
00:09:20,959 --> 00:09:24,399
or the system remain secure

195
00:09:24,399 --> 00:09:28,560
and this obviously automatically

196
00:09:28,560 --> 00:09:32,240
so now let's look

197
00:09:32,240 --> 00:09:34,160
at each of these points in a more

198
00:09:34,160 --> 00:09:37,839
detailed way

199
00:09:41,519 --> 00:09:44,560
one of the first building blocks

200
00:09:44,560 --> 00:09:47,760
is obviously to ensure that secrets

201
00:09:47,760 --> 00:09:50,640
passwords and certificates are managed

202
00:09:50,640 --> 00:09:51,680
correctly

203
00:09:51,680 --> 00:09:55,040
as it is one of the main causes of cyber

204
00:09:55,040 --> 00:09:57,519
attacks

205
00:09:57,519 --> 00:10:01,279
to avoid storing password in clear files

206
00:10:01,279 --> 00:10:04,800
and also avoid multiplying password

207
00:10:04,800 --> 00:10:07,200
repositories and limiting management

208
00:10:07,200 --> 00:10:11,040
roles one of the depth segups best

209
00:10:11,040 --> 00:10:12,160
practices

210
00:10:12,160 --> 00:10:14,320
is to use an integrated secret

211
00:10:14,320 --> 00:10:16,160
management system

212
00:10:16,160 --> 00:10:18,160
to make the link with your

213
00:10:18,160 --> 00:10:19,839
infrastructure

214
00:10:19,839 --> 00:10:22,560
whether in the cloud or on-premise with

215
00:10:22,560 --> 00:10:23,680
the possibility

216
00:10:23,680 --> 00:10:27,279
of easily integrating integrating it

217
00:10:27,279 --> 00:10:30,880
into your cict pipeline

218
00:10:30,880 --> 00:10:33,839
as cyber criminals are becoming more

219
00:10:33,839 --> 00:10:34,480
adept

220
00:10:34,480 --> 00:10:36,720
at discovering the credential of end

221
00:10:36,720 --> 00:10:37,760
users

222
00:10:37,760 --> 00:10:40,720
that developers sometimes inadvertently

223
00:10:40,720 --> 00:10:41,120
live

224
00:10:41,120 --> 00:10:44,079
accessible within their applications a

225
00:10:44,079 --> 00:10:46,000
secret management tool

226
00:10:46,000 --> 00:10:49,040
like vault provide a way to manage

227
00:10:49,040 --> 00:10:52,240
and maintain application secrets

228
00:10:52,240 --> 00:10:55,120
outside of the application in a way that

229
00:10:55,120 --> 00:10:56,160
serve

230
00:10:56,160 --> 00:10:59,600
to significantly enhance your vr

231
00:10:59,600 --> 00:11:03,200
the overall application security

232
00:11:03,200 --> 00:11:07,440
a tool like vault integrates very well

233
00:11:07,440 --> 00:11:10,959
with ci cd tools we use

234
00:11:10,959 --> 00:11:14,000
a tool called harness by the way as

235
00:11:14,000 --> 00:11:16,959
in as an integrated solution for

236
00:11:16,959 --> 00:11:20,720
continuous integration and deployment

237
00:11:20,720 --> 00:11:23,920
and this kind of tool like vault will

238
00:11:23,920 --> 00:11:26,959
allow you for secure and efficient

239
00:11:26,959 --> 00:11:29,680
password management while using

240
00:11:29,680 --> 00:11:33,040
automated deployment solutions

241
00:11:33,040 --> 00:11:37,200
it's obviously also an interesting tool

242
00:11:37,200 --> 00:11:38,880
for managing the secrets of your

243
00:11:38,880 --> 00:11:39,760
infrastructure

244
00:11:39,760 --> 00:11:43,040
of any type a higher availability

245
00:11:43,040 --> 00:11:45,200
kubernetes cluster in our case

246
00:11:45,200 --> 00:11:48,320
whether it is on-premise

247
00:11:48,320 --> 00:11:56,959
or in the cloud

248
00:11:56,959 --> 00:12:00,079
web and mobile application due to their

249
00:12:00,079 --> 00:12:01,279
complexity

250
00:12:01,279 --> 00:12:03,920
and the limited budget allocated some

251
00:12:03,920 --> 00:12:06,720
time to their development

252
00:12:06,720 --> 00:12:11,279
often contain a lot of vulnerabilities

253
00:12:11,279 --> 00:12:13,920
it is therefore natural that they are

254
00:12:13,920 --> 00:12:17,600
the preferred targets of hackers

255
00:12:17,600 --> 00:12:19,600
the source code audit of your

256
00:12:19,600 --> 00:12:21,279
applications

257
00:12:21,279 --> 00:12:24,399
is important as you want to detect

258
00:12:24,399 --> 00:12:26,720
and remediate their vulnerabilities

259
00:12:26,720 --> 00:12:28,880
during the development phase

260
00:12:28,880 --> 00:12:32,240
the sooner a vulnerability is discovered

261
00:12:32,240 --> 00:12:36,639
the less expensive it will be to fix

262
00:12:36,639 --> 00:12:39,920
using a tool like sonarqu

263
00:12:39,920 --> 00:12:42,480
to edit your code is normally

264
00:12:42,480 --> 00:12:44,560
non-intrusive

265
00:12:44,560 --> 00:12:47,279
so you can safely scan your most

266
00:12:47,279 --> 00:12:49,040
critical applications

267
00:12:49,040 --> 00:12:52,160
without risking their performance such

268
00:12:52,160 --> 00:12:53,279
an audit

269
00:12:53,279 --> 00:12:56,240
allows you to detect a large number of

270
00:12:56,240 --> 00:12:57,360
vulnerabilities

271
00:12:57,360 --> 00:12:58,959
presented the source code of your

272
00:12:58,959 --> 00:13:01,680
applications

273
00:13:01,680 --> 00:13:05,040
sast tool like sonarcube

274
00:13:05,040 --> 00:13:08,480
is particularly interesting because

275
00:13:08,480 --> 00:13:11,440
it tells you the exact location of the

276
00:13:11,440 --> 00:13:15,120
vulnerability in the source code

277
00:13:15,360 --> 00:13:19,120
within the cicd pipeline you can scan

278
00:13:19,120 --> 00:13:20,079
your code

279
00:13:20,079 --> 00:13:21,680
your source code for known

280
00:13:21,680 --> 00:13:23,600
vulnerabilities

281
00:13:23,600 --> 00:13:25,839
using static application security

282
00:13:25,839 --> 00:13:27,200
testing

283
00:13:27,200 --> 00:13:31,279
the cicd tool will automatically

284
00:13:31,279 --> 00:13:35,040
check the acst report and compare

285
00:13:35,040 --> 00:13:37,360
the vulnerabilities found between the

286
00:13:37,360 --> 00:13:38,320
source

287
00:13:38,320 --> 00:13:48,639
and the target branches

288
00:13:48,639 --> 00:13:52,000
a dynamic audit consists of using a

289
00:13:52,000 --> 00:13:52,880
scanner

290
00:13:52,880 --> 00:13:55,920
to interact with the applications

291
00:13:55,920 --> 00:13:58,320
as a hacker could would do on the

292
00:13:58,320 --> 00:13:59,760
internet

293
00:13:59,760 --> 00:14:02,959
by sending a large number of malicious

294
00:14:02,959 --> 00:14:04,320
requests

295
00:14:04,320 --> 00:14:06,480
to the audited application in order to

296
00:14:06,480 --> 00:14:09,680
find vulnerabilities

297
00:14:10,079 --> 00:14:12,959
a dynamic analysis security testing

298
00:14:12,959 --> 00:14:15,760
vulnerability scanner can detect

299
00:14:15,760 --> 00:14:17,680
a number of vulnerabilities that can be

300
00:14:17,680 --> 00:14:19,519
discovered using

301
00:14:19,519 --> 00:14:23,040
a source code audit obviously

302
00:14:23,040 --> 00:14:24,800
but without achieving the same

303
00:14:24,800 --> 00:14:27,440
efficiency

304
00:14:27,440 --> 00:14:30,560
well this kind of dynamic vulnerability

305
00:14:30,560 --> 00:14:32,480
scanner stand out

306
00:14:32,480 --> 00:14:35,120
is in its ability to discover

307
00:14:35,120 --> 00:14:37,040
configuration issues

308
00:14:37,040 --> 00:14:40,320
relating to the web server

309
00:14:40,320 --> 00:14:45,839
on which the application is installed

310
00:14:46,480 --> 00:14:49,600
open source tool like

311
00:14:49,600 --> 00:14:54,800
a waps zap is instrumentally intrusive

312
00:14:54,800 --> 00:14:58,880
it can damage your application obviously

313
00:14:58,880 --> 00:15:00,880
it is therefore preferable to

314
00:15:00,880 --> 00:15:02,160
dynamically scan

315
00:15:02,160 --> 00:15:03,920
an application in a pre-production

316
00:15:03,920 --> 00:15:06,880
environment before going

317
00:15:06,880 --> 00:15:10,079
to production the advantage

318
00:15:10,079 --> 00:15:13,120
of this kind of tool is that

319
00:15:13,120 --> 00:15:16,720
it can be easily integrated into a cicd

320
00:15:16,720 --> 00:15:18,720
environment

321
00:15:18,720 --> 00:15:23,760
to automate the different tests

322
00:15:23,760 --> 00:15:25,920
and to automate tests of this type

323
00:15:25,920 --> 00:15:27,279
before going

324
00:15:27,279 --> 00:15:30,160
into production

325
00:15:35,440 --> 00:15:38,480
the presence of malware in some docker

326
00:15:38,480 --> 00:15:39,600
herb images

327
00:15:39,600 --> 00:15:42,959
is not a myth some images

328
00:15:42,959 --> 00:15:45,759
have already circulated some surely

329
00:15:45,759 --> 00:15:47,199
still circulate

330
00:15:47,199 --> 00:15:51,199
and others will come it is important

331
00:15:51,199 --> 00:15:53,800
to systematically check the presence of

332
00:15:53,800 --> 00:15:55,199
vulnerabilities

333
00:15:55,199 --> 00:15:58,959
on the images you use and furthermore

334
00:15:58,959 --> 00:16:02,079
if it is one of your creation

335
00:16:02,079 --> 00:16:04,800
looking for us there are tools to make

336
00:16:04,800 --> 00:16:06,959
our own job easier

337
00:16:06,959 --> 00:16:10,399
claire is this kind of tool

338
00:16:10,399 --> 00:16:13,519
it's a tool that scans docker images and

339
00:16:13,519 --> 00:16:14,600
reports

340
00:16:14,600 --> 00:16:18,079
non-vulnerabilities it can be used

341
00:16:18,079 --> 00:16:21,519
to prevent vulnerable docker containers

342
00:16:21,519 --> 00:16:24,880
from ever seeing the light of production

343
00:16:24,880 --> 00:16:27,920
as it can be easily integrated

344
00:16:27,920 --> 00:16:31,839
inside a cicd pipeline

345
00:16:31,839 --> 00:16:34,839
setting up securities kind is a bit

346
00:16:34,839 --> 00:16:36,399
tedious

347
00:16:36,399 --> 00:16:40,560
but its configuration in ci cd workflows

348
00:16:40,560 --> 00:16:43,279
can prevent some serious flaws without

349
00:16:43,279 --> 00:16:46,160
doing actively anything

350
00:16:46,160 --> 00:16:49,680
scanning docker images is like an entire

351
00:16:49,680 --> 00:16:51,440
virus software

352
00:16:51,440 --> 00:16:54,399
it's clearly not enough to be confident

353
00:16:54,399 --> 00:16:56,880
about security as a whole

354
00:16:56,880 --> 00:17:00,320
but it's still essential a tool like

355
00:17:00,320 --> 00:17:01,040
claire

356
00:17:01,040 --> 00:17:02,959
will tell you if there are no

357
00:17:02,959 --> 00:17:04,400
vulnerabilities

358
00:17:04,400 --> 00:17:08,799
in the software your container use

359
00:17:13,280 --> 00:17:16,319
conformance testing is a non-functional

360
00:17:16,319 --> 00:17:19,199
testing technique to determine whether a

361
00:17:19,199 --> 00:17:21,280
system meets

362
00:17:21,280 --> 00:17:24,880
prescribed standards english terms

363
00:17:24,880 --> 00:17:28,400
used are compliance testing or

364
00:17:28,400 --> 00:17:31,120
conformance testing most software

365
00:17:31,120 --> 00:17:32,400
development teams

366
00:17:32,400 --> 00:17:35,200
perform analysis to verify that

367
00:17:35,200 --> 00:17:37,200
standards are correctly applied and

368
00:17:37,200 --> 00:17:39,120
implemented

369
00:17:39,120 --> 00:17:42,160
often their members work simultaneously

370
00:17:42,160 --> 00:17:44,320
to improve standards which in turn leads

371
00:17:44,320 --> 00:17:47,120
to increased quality

372
00:17:47,120 --> 00:17:50,400
compliance testing ensure that

373
00:17:50,400 --> 00:17:52,480
the output of each phase of the

374
00:17:52,480 --> 00:17:54,320
development cycle meets

375
00:17:54,320 --> 00:17:58,320
a grade requirements a common problem

376
00:17:58,320 --> 00:18:01,760
is environments that crash when multiple

377
00:18:01,760 --> 00:18:03,360
developers apply

378
00:18:03,360 --> 00:18:06,639
incompatible changes

379
00:18:08,160 --> 00:18:11,120
one way to solve this problem is to

380
00:18:11,120 --> 00:18:11,760
define

381
00:18:11,760 --> 00:18:14,160
a resource tagging strategy for example

382
00:18:14,160 --> 00:18:16,240
with the role and creator tags

383
00:18:16,240 --> 00:18:19,440
through two-like terraform once you have

384
00:18:19,440 --> 00:18:21,200
defined the strategies

385
00:18:21,200 --> 00:18:24,400
a tool like terraform compliance can be

386
00:18:24,400 --> 00:18:25,280
used

387
00:18:25,280 --> 00:18:27,440
to automatically check that the

388
00:18:27,440 --> 00:18:28,640
strategies

389
00:18:28,640 --> 00:18:31,679
are respected and there and that

390
00:18:31,679 --> 00:18:35,200
your infrastructures

391
00:18:35,200 --> 00:18:43,840
and application are still compliant

392
00:18:44,320 --> 00:18:47,360
penetration testing has obviously become

393
00:18:47,360 --> 00:18:49,039
an important part

394
00:18:49,039 --> 00:18:52,400
of the development process

395
00:18:52,400 --> 00:18:55,520
however most developers do not know

396
00:18:55,520 --> 00:18:57,840
how to properly test their application

397
00:18:57,840 --> 00:18:59,360
for security

398
00:18:59,360 --> 00:19:02,320
or believe that their operations team

399
00:19:02,320 --> 00:19:05,280
will take care of this tedious task

400
00:19:05,280 --> 00:19:08,000
additionally checking for serious

401
00:19:08,000 --> 00:19:09,600
security issue

402
00:19:09,600 --> 00:19:12,640
should raise a red flag and prevent

403
00:19:12,640 --> 00:19:15,039
that version of the app from seeing the

404
00:19:15,039 --> 00:19:17,679
deployment

405
00:19:17,840 --> 00:19:20,559
after deployment into production

406
00:19:20,559 --> 00:19:21,760
security testing

407
00:19:21,760 --> 00:19:25,039
should continue by creating automated

408
00:19:25,039 --> 00:19:26,240
security attacks

409
00:19:26,240 --> 00:19:29,440
for pronunciation testing or api testing

410
00:19:29,440 --> 00:19:32,320
making sure your application and your

411
00:19:32,320 --> 00:19:33,679
infrastructure

412
00:19:33,679 --> 00:19:37,520
cannot be hacked for example

413
00:19:37,520 --> 00:19:40,799
a tool like ubuntu

414
00:19:40,799 --> 00:19:44,000
can search for vulnerabilities

415
00:19:44,000 --> 00:19:47,520
in kubernetes clusters using for example

416
00:19:47,520 --> 00:19:50,840
internal scan network scan and remote

417
00:19:50,840 --> 00:19:53,039
scan

418
00:19:53,039 --> 00:19:57,200
a tool like cub hunter can be used

419
00:19:57,200 --> 00:20:01,440
interactively or more importantly

420
00:20:01,440 --> 00:20:04,320
as an automated remote penetration test

421
00:20:04,320 --> 00:20:05,600
of your cluster

422
00:20:05,600 --> 00:20:11,600
integrated inside a cicd pipeline

423
00:20:14,320 --> 00:20:17,600
as we hand i want to recap a little bit

424
00:20:17,600 --> 00:20:20,799
on the key things i have shared

425
00:20:20,799 --> 00:20:23,600
in order to successfully implement dev

426
00:20:23,600 --> 00:20:24,720
setups

427
00:20:24,720 --> 00:20:26,960
you need to think heavily about

428
00:20:26,960 --> 00:20:28,880
automated testing

429
00:20:28,880 --> 00:20:32,240
this as well as empowering your team

430
00:20:32,240 --> 00:20:35,120
is fundamental to achieving your goal of

431
00:20:35,120 --> 00:20:38,320
implementing death cycles

432
00:20:38,320 --> 00:20:41,280
finally one of the principles of deaf

433
00:20:41,280 --> 00:20:42,559
secops

434
00:20:42,559 --> 00:20:46,840
is to be prepared for threats

435
00:20:46,840 --> 00:20:50,559
always thanks for your time

436
00:20:50,559 --> 00:20:52,400
and i will welcome obviously some

437
00:20:52,400 --> 00:20:54,320
questions if you have any

438
00:20:54,320 --> 00:20:59,600
thank you

