1
00:00:01,599 --> 00:00:03,360
hi and welcome everyone

2
00:00:03,360 --> 00:00:04,720
i hope you all enjoyed the online

3
00:00:04,720 --> 00:00:06,560
version of activity so far

4
00:00:06,560 --> 00:00:08,240
in the next 40 minutes with my colleague

5
00:00:08,240 --> 00:00:10,080
albert we will talk about how to reverse

6
00:00:10,080 --> 00:00:12,639
engineer gold binaries with kidra

7
00:00:12,639 --> 00:00:15,360
first let me quickly introduce ourselves

8
00:00:15,360 --> 00:00:16,800
we work at kujo ai a network

9
00:00:16,800 --> 00:00:18,320
intelligence software company

10
00:00:18,320 --> 00:00:20,240
in its fairly young security research

11
00:00:20,240 --> 00:00:21,840
team previously

12
00:00:21,840 --> 00:00:23,920
we both worked in financial and security

13
00:00:23,920 --> 00:00:25,519
companies as well where we gained

14
00:00:25,519 --> 00:00:27,279
experiences in various fields of

15
00:00:27,279 --> 00:00:29,439
security research and operations

16
00:00:29,439 --> 00:00:31,439
such as incident response memory

17
00:00:31,439 --> 00:00:33,440
forensics malva research and reverse

18
00:00:33,440 --> 00:00:34,719
engineering

19
00:00:34,719 --> 00:00:36,160
we both have some experiences with

20
00:00:36,160 --> 00:00:37,600
talking at conferences or giving

21
00:00:37,600 --> 00:00:39,360
lectures but this is the first time that

22
00:00:39,360 --> 00:00:40,320
we had to do an

23
00:00:40,320 --> 00:00:42,719
online pre-recorded version of our talk

24
00:00:42,719 --> 00:00:44,640
so please forgive us if it's not perfect

25
00:00:44,640 --> 00:00:45,200
everywhere

26
00:00:45,200 --> 00:00:47,920
but we tried her best now albert will

27
00:00:47,920 --> 00:00:49,120
start with the background of our

28
00:00:49,120 --> 00:00:50,960
research and an introduction to the

29
00:00:50,960 --> 00:00:52,640
difficulties of reverse engineering go

30
00:00:52,640 --> 00:00:54,160
binaries with kidra

31
00:00:54,160 --> 00:00:55,680
which i will follow with explaining the

32
00:00:55,680 --> 00:00:57,440
problems that we investigated and the

33
00:00:57,440 --> 00:01:00,879
solutions that we created for them

34
00:01:00,879 --> 00:01:03,280
before we jump into the nitty-gritty

35
00:01:03,280 --> 00:01:04,000
details

36
00:01:04,000 --> 00:01:06,240
we wanted to share why we had decided to

37
00:01:06,240 --> 00:01:08,000
go with this topic

38
00:01:08,000 --> 00:01:10,960
so recently we have seen a shift in

39
00:01:10,960 --> 00:01:12,320
malware development

40
00:01:12,320 --> 00:01:15,439
in terms of their programming language

41
00:01:15,439 --> 00:01:17,680
as more and more matters developed under

42
00:01:17,680 --> 00:01:19,439
golang

43
00:01:19,439 --> 00:01:21,600
we came across some issues when we

44
00:01:21,600 --> 00:01:24,640
started to analyze such binaries

45
00:01:24,640 --> 00:01:27,920
for example golem files have huge file

46
00:01:27,920 --> 00:01:29,840
sizes

47
00:01:29,840 --> 00:01:32,640
disassemblers handle goldlink strings

48
00:01:32,640 --> 00:01:34,320
unusually

49
00:01:34,320 --> 00:01:36,640
and finally no symbol names are

50
00:01:36,640 --> 00:01:37,360
available

51
00:01:37,360 --> 00:01:40,799
due to stripping ghidra

52
00:01:40,799 --> 00:01:44,560
a open source disassembler for example

53
00:01:44,560 --> 00:01:47,180
it's still in its infancy phase so

54
00:01:47,180 --> 00:01:48,799
[Music]

55
00:01:48,799 --> 00:01:51,680
basically only a few open source scripts

56
00:01:51,680 --> 00:01:52,399
have been made

57
00:01:52,399 --> 00:01:55,600
available to tackle this problem

58
00:01:55,600 --> 00:01:57,280
but none of them seemed to work

59
00:01:57,280 --> 00:01:59,759
consistently

60
00:01:59,759 --> 00:02:02,399
our goal was to make go reversing with

61
00:02:02,399 --> 00:02:04,240
gidra easier

62
00:02:04,240 --> 00:02:06,840
and in order to achieve that we had to

63
00:02:06,840 --> 00:02:08,639
understand golang

64
00:02:08,639 --> 00:02:10,239
and how it's different from other

65
00:02:10,239 --> 00:02:12,160
languages

66
00:02:12,160 --> 00:02:14,879
but also to get familiar with github as

67
00:02:14,879 --> 00:02:15,920
well

68
00:02:15,920 --> 00:02:22,319
and finally to create some scripts

69
00:02:22,319 --> 00:02:26,319
some basic information about golang

70
00:02:26,319 --> 00:02:28,640
golang is a open source programming

71
00:02:28,640 --> 00:02:29,440
language

72
00:02:29,440 --> 00:02:34,080
designed by google in 2007

73
00:02:34,080 --> 00:02:36,360
it was made available to the public in

74
00:02:36,360 --> 00:02:38,959
2012

75
00:02:38,959 --> 00:02:43,599
and its current version is 1.15

76
00:02:43,599 --> 00:02:46,879
in a recent survey on github it was

77
00:02:46,879 --> 00:02:50,080
revealed that golem comes out top of the

78
00:02:50,080 --> 00:02:51,440
languages

79
00:02:51,440 --> 00:02:55,360
most developers want to learn golank has

80
00:02:55,360 --> 00:02:57,519
a couple of advantages over other

81
00:02:57,519 --> 00:02:58,400
languages

82
00:02:58,400 --> 00:03:00,080
like it has a simple and clear

83
00:03:00,080 --> 00:03:01,680
documentation

84
00:03:01,680 --> 00:03:04,800
it's very easy to learn

85
00:03:04,800 --> 00:03:06,760
basically it supports

86
00:03:06,760 --> 00:03:08,000
multi-architectures

87
00:03:08,000 --> 00:03:11,360
like windows linux mac os

88
00:03:11,360 --> 00:03:14,000
it has good scalability and it has an

89
00:03:14,000 --> 00:03:19,519
inbuilt garbage collection system

90
00:03:19,519 --> 00:03:21,599
we wanted to quickly highlight the fact

91
00:03:21,599 --> 00:03:23,760
that there's a noticeable shift

92
00:03:23,760 --> 00:03:27,440
on the malware landscape co-binaries are

93
00:03:27,440 --> 00:03:28,640
growing by the numbers

94
00:03:28,640 --> 00:03:31,120
and this trend will eventually continue

95
00:03:31,120 --> 00:03:33,120
in the future

96
00:03:33,120 --> 00:03:35,599
the rate in which they are found

97
00:03:35,599 --> 00:03:37,519
suggests that this is only the beginning

98
00:03:37,519 --> 00:03:40,799
of the golden malware surge

99
00:03:40,799 --> 00:03:42,159
some of the more interesting gold

100
00:03:42,159 --> 00:03:44,640
malware families that have been observed

101
00:03:44,640 --> 00:03:47,440
in the past year are irc flu

102
00:03:47,440 --> 00:03:51,280
smog ransomware kaiji fritz frog

103
00:03:51,280 --> 00:03:54,560
aquariax ipstorm liquor bots

104
00:03:54,560 --> 00:04:01,840
and gobrat

105
00:04:02,000 --> 00:04:04,280
liquor but is basically a

106
00:04:04,280 --> 00:04:05,680
re-implementation

107
00:04:05,680 --> 00:04:09,360
of mirai in go it was first discovered

108
00:04:09,360 --> 00:04:10,360
in may

109
00:04:10,360 --> 00:04:13,760
2019 and basically

110
00:04:13,760 --> 00:04:15,920
it was targeting small office home

111
00:04:15,920 --> 00:04:17,839
routers

112
00:04:17,839 --> 00:04:22,160
uh one of the initial vectors uh it was

113
00:04:22,160 --> 00:04:25,840
brute forcing ssh logins

114
00:04:25,840 --> 00:04:29,120
but it was also had capability to

115
00:04:29,120 --> 00:04:33,440
install a monero mining software

116
00:04:33,440 --> 00:04:35,520
clicker but is also cross compiled for

117
00:04:35,520 --> 00:04:36,639
iram

118
00:04:36,639 --> 00:04:43,840
x86 x64 and mips architectures as well

119
00:04:45,600 --> 00:04:49,600
the next interesting matter family is

120
00:04:49,600 --> 00:04:54,479
ipstorm it was first found in june 2019

121
00:04:54,479 --> 00:04:56,560
and it is obviously also written in

122
00:04:56,560 --> 00:04:58,240
golang

123
00:04:58,240 --> 00:05:00,880
uh its first versions were basically

124
00:05:00,880 --> 00:05:02,479
targeting only the windows

125
00:05:02,479 --> 00:05:05,759
platform but later on the developers

126
00:05:05,759 --> 00:05:07,199
decided to

127
00:05:07,199 --> 00:05:09,680
include support for linux and android as

128
00:05:09,680 --> 00:05:11,360
well

129
00:05:11,360 --> 00:05:14,560
the initial attack vector again

130
00:05:14,560 --> 00:05:18,400
is ssh brute forcing of weak credentials

131
00:05:18,400 --> 00:05:21,680
and ip storm also had some ties to

132
00:05:21,680 --> 00:05:25,199
irc flu another brute forcing botnet

133
00:05:25,199 --> 00:05:27,840
so it's quite likely that the developers

134
00:05:27,840 --> 00:05:29,440
are the same for the

135
00:05:29,440 --> 00:05:32,400
both botnets

136
00:05:32,720 --> 00:05:36,160
ipfs is a peer-to-peer protocol

137
00:05:36,160 --> 00:05:39,919
and ipstorm uses the pub sub network as

138
00:05:39,919 --> 00:05:42,000
well

139
00:05:42,000 --> 00:05:45,680
the infected hosts are acting as socks 5

140
00:05:45,680 --> 00:05:47,520
proxies

141
00:05:47,520 --> 00:05:50,639
and we observed many iterations of

142
00:05:50,639 --> 00:05:52,720
versions for ipstorm

143
00:05:52,720 --> 00:05:55,120
which moved which would mean that it's

144
00:05:55,120 --> 00:05:58,160
under heavy development

145
00:05:58,160 --> 00:06:01,520
ipstorm instead of a mutex uses the

146
00:06:01,520 --> 00:06:04,560
package called single which is simply

147
00:06:04,560 --> 00:06:07,840
acting like a log file

148
00:06:09,919 --> 00:06:13,520
the next interesting family is echoex

149
00:06:13,520 --> 00:06:15,680
it's a ransomware which was first

150
00:06:15,680 --> 00:06:18,960
discovered in june 2019

151
00:06:18,960 --> 00:06:21,840
uh it is targeting specifically one type

152
00:06:21,840 --> 00:06:22,880
of devices

153
00:06:22,880 --> 00:06:26,000
it was the qnap nas devices

154
00:06:26,000 --> 00:06:28,639
and again it was using some brute

155
00:06:28,639 --> 00:06:30,240
forcing techniques

156
00:06:30,240 --> 00:06:34,400
to gain footholds on the device

157
00:06:34,400 --> 00:06:38,000
at the beginning of june 2020 a new wave

158
00:06:38,000 --> 00:06:38,240
of

159
00:06:38,240 --> 00:06:42,720
x was observed for these qnap devices

160
00:06:42,720 --> 00:06:46,080
and finally later on a decrypter was

161
00:06:46,080 --> 00:06:49,840
also released

162
00:06:53,199 --> 00:06:55,599
fritz rogue is the next interesting

163
00:06:55,599 --> 00:06:58,000
malware family

164
00:06:58,000 --> 00:07:00,479
it was first of a kind because it's a

165
00:07:00,479 --> 00:07:02,160
peer-to-peer botnet

166
00:07:02,160 --> 00:07:04,479
which was first discovered in january

167
00:07:04,479 --> 00:07:07,039
2020

168
00:07:07,039 --> 00:07:10,000
again as we have observed before these

169
00:07:10,000 --> 00:07:11,120
are mostly targeting

170
00:07:11,120 --> 00:07:13,680
ssh servers and they are trying to brute

171
00:07:13,680 --> 00:07:14,800
force the

172
00:07:14,800 --> 00:07:18,240
weak credentials it had a modular

173
00:07:18,240 --> 00:07:21,440
setup which meant it was

174
00:07:21,440 --> 00:07:23,840
easily pluggable by other plugins as

175
00:07:23,840 --> 00:07:25,039
well

176
00:07:25,039 --> 00:07:27,599
it was multi-threaded and basically a

177
00:07:27,599 --> 00:07:28,960
fileless

178
00:07:28,960 --> 00:07:33,120
malware it had used a custom

179
00:07:33,120 --> 00:07:36,240
peer-to-peer protocol

180
00:07:36,720 --> 00:07:40,960
it was also listening on port 1234

181
00:07:40,960 --> 00:07:45,120
and waiting for comments from the server

182
00:07:45,120 --> 00:07:47,840
it also included a monorail mining

183
00:07:47,840 --> 00:07:49,599
capability

184
00:07:49,599 --> 00:07:52,879
and finally it successfully breached

185
00:07:52,879 --> 00:07:55,599
more than 500 servers

186
00:07:55,599 --> 00:07:58,319
targeting government education finance

187
00:07:58,319 --> 00:07:59,039
and

188
00:07:59,039 --> 00:08:02,159
other sectors as well

189
00:08:04,479 --> 00:08:08,319
and our last interesting other family is

190
00:08:08,319 --> 00:08:09,840
kaiji

191
00:08:09,840 --> 00:08:13,280
which gained detention because it was

192
00:08:13,280 --> 00:08:14,800
named after a

193
00:08:14,800 --> 00:08:18,400
famous manga series it was fully written

194
00:08:18,400 --> 00:08:19,120
in golang

195
00:08:19,120 --> 00:08:23,199
from scratch and kaiji spreads

196
00:08:23,199 --> 00:08:26,400
again by brute forcing ssh

197
00:08:26,400 --> 00:08:29,120
login credentials on specific iot

198
00:08:29,120 --> 00:08:30,879
devices

199
00:08:30,879 --> 00:08:34,399
it had a few capability and features

200
00:08:34,399 --> 00:08:39,120
like it would get installed into

201
00:08:39,200 --> 00:08:42,559
specific linux folders under specific

202
00:08:42,559 --> 00:08:44,880
fake system process names like netstat

203
00:08:44,880 --> 00:08:47,200
ls or ps

204
00:08:47,200 --> 00:08:49,040
it also had capability to setup

205
00:08:49,040 --> 00:08:51,519
persistence under profile d

206
00:08:51,519 --> 00:08:54,640
you need the systemd and it would write

207
00:08:54,640 --> 00:08:55,360
itself

208
00:08:55,360 --> 00:09:00,000
into chrome tab 2. kg copies its rootkit

209
00:09:00,000 --> 00:09:00,640
module

210
00:09:00,640 --> 00:09:04,240
to a specific location and basically

211
00:09:04,240 --> 00:09:08,240
runs itself every 30 seconds

212
00:09:08,240 --> 00:09:11,040
attack-wise it has a couple of implants

213
00:09:11,040 --> 00:09:11,519
like

214
00:09:11,519 --> 00:09:14,560
ddos implants it had capability to

215
00:09:14,560 --> 00:09:17,680
launch tcp fluid udp fluid

216
00:09:17,680 --> 00:09:22,880
ip spoof and specific other fluid types

217
00:09:22,880 --> 00:09:26,080
it had capability to initiate a ssh

218
00:09:26,080 --> 00:09:29,120
brute cursor as well it had a list of

219
00:09:29,120 --> 00:09:30,480
hard-coded passwords

220
00:09:30,480 --> 00:09:33,839
and ip ranges to attack

221
00:09:33,839 --> 00:09:37,120
and one other interesting facet of kaiji

222
00:09:37,120 --> 00:09:40,640
was that it used a specific host rewrite

223
00:09:40,640 --> 00:09:44,240
for the quad 9 dns resolvers perhaps

224
00:09:44,240 --> 00:09:46,480
the developers were testing this

225
00:09:46,480 --> 00:09:48,160
specific feature

226
00:09:48,160 --> 00:09:51,519
because in its current state it wouldn't

227
00:09:51,519 --> 00:09:54,320
make much sense

228
00:09:58,399 --> 00:10:01,040
and now let's find some ways how we can

229
00:10:01,040 --> 00:10:02,320
identify malware

230
00:10:02,320 --> 00:10:04,800
as google binaries first you could

231
00:10:04,800 --> 00:10:06,160
simply look for the string

232
00:10:06,160 --> 00:10:10,079
go build id inside the binary

233
00:10:10,079 --> 00:10:12,320
but oftentimes you will find references

234
00:10:12,320 --> 00:10:15,120
to golang.org as well

235
00:10:15,120 --> 00:10:18,480
the pdb path usually references slash go

236
00:10:18,480 --> 00:10:19,680
slash

237
00:10:19,680 --> 00:10:23,120
source another clue is

238
00:10:23,120 --> 00:10:25,200
having symbol names starting with that

239
00:10:25,200 --> 00:10:27,120
main that runtime

240
00:10:27,120 --> 00:10:30,640
or even that os

241
00:10:31,040 --> 00:10:33,920
but also section names like go sim tab

242
00:10:33,920 --> 00:10:34,240
or

243
00:10:34,240 --> 00:10:38,959
go that build info are also seen

244
00:10:39,279 --> 00:10:41,040
you could simply use the linux tool

245
00:10:41,040 --> 00:10:43,600
called file which displays the

246
00:10:43,600 --> 00:10:47,839
go build id as well

247
00:10:50,480 --> 00:10:53,040
finding the go compiler version is not

248
00:10:53,040 --> 00:10:54,399
that easy

249
00:10:54,399 --> 00:10:56,720
the function which stores the compiler

250
00:10:56,720 --> 00:10:57,959
version is

251
00:10:57,959 --> 00:11:01,920
runtime.build version one way is to

252
00:11:01,920 --> 00:11:04,000
list the strings of the binary and then

253
00:11:04,000 --> 00:11:05,279
grab for go

254
00:11:05,279 --> 00:11:08,720
one dot but obviously this method will

255
00:11:08,720 --> 00:11:09,839
be deprecated

256
00:11:09,839 --> 00:11:12,959
as soon as the go compiler version hits

257
00:11:12,959 --> 00:11:17,680
2.0 so instead let's find the symbol

258
00:11:17,680 --> 00:11:22,320
build version using the tool nm

259
00:11:22,320 --> 00:11:25,440
the data stored at that address is not

260
00:11:25,440 --> 00:11:28,480
readable so it could be pointing to

261
00:11:28,480 --> 00:11:30,880
another address

262
00:11:30,880 --> 00:11:32,560
we are reversing the order of the hex

263
00:11:32,560 --> 00:11:34,000
values here

264
00:11:34,000 --> 00:11:37,120
and that reveals the correct address at

265
00:11:37,120 --> 00:11:38,079
which the

266
00:11:38,079 --> 00:11:43,839
compiler version is stored

267
00:11:45,920 --> 00:11:48,480
go binaries are always statically linked

268
00:11:48,480 --> 00:11:49,040
and

269
00:11:49,040 --> 00:11:51,200
all the necessary libraries are included

270
00:11:51,200 --> 00:11:54,320
in the executable

271
00:11:54,320 --> 00:11:56,800
the large size of gold binaries present

272
00:11:56,800 --> 00:11:58,240
some interesting challenges

273
00:11:58,240 --> 00:12:00,560
like uh malware distribution is

274
00:12:00,560 --> 00:12:02,320
difficult with binaries that

275
00:12:02,320 --> 00:12:06,880
are around two three or four megabytes

276
00:12:06,880 --> 00:12:09,040
anti-virus products might have issues

277
00:12:09,040 --> 00:12:10,800
scanning through the whole file

278
00:12:10,800 --> 00:12:14,240
properly and reversing such

279
00:12:14,240 --> 00:12:17,820
large files is time consuming and

280
00:12:17,820 --> 00:12:19,760
[Music]

281
00:12:19,760 --> 00:12:22,839
however go binaries present no

282
00:12:22,839 --> 00:12:25,839
dependency

283
00:12:27,360 --> 00:12:30,320
so let's compare two simple hello world

284
00:12:30,320 --> 00:12:32,000
programs

285
00:12:32,000 --> 00:12:34,240
one was written in c and the other one

286
00:12:34,240 --> 00:12:36,800
is written in golang

287
00:12:36,800 --> 00:12:39,360
and after compiling the difference in

288
00:12:39,360 --> 00:12:40,560
size is

289
00:12:40,560 --> 00:12:43,519
remarkable also note that these are

290
00:12:43,519 --> 00:12:46,639
unstripped binaries

291
00:12:49,760 --> 00:12:53,040
after our hello world programs are put

292
00:12:53,040 --> 00:12:53,440
in

293
00:12:53,440 --> 00:12:56,480
geidra the first thing we spot

294
00:12:56,480 --> 00:12:59,600
is that the c program has 18 functions

295
00:12:59,600 --> 00:13:03,120
recognized by github the go

296
00:13:03,120 --> 00:13:06,079
programs disassembly is more hectic

297
00:13:06,079 --> 00:13:07,519
almost 800

298
00:13:07,519 --> 00:13:10,639
functions i'm sorry 1800 functions are

299
00:13:10,639 --> 00:13:13,279
recognized

300
00:13:13,279 --> 00:13:15,040
fortunately this program has all the

301
00:13:15,040 --> 00:13:16,480
debug information

302
00:13:16,480 --> 00:13:18,560
and symbol names so it's easier to

303
00:13:18,560 --> 00:13:20,079
navigate through the

304
00:13:20,079 --> 00:13:22,800
mirador functions and understand what

305
00:13:22,800 --> 00:13:23,200
the

306
00:13:23,200 --> 00:13:26,240
program's purpose is

307
00:13:29,519 --> 00:13:32,160
unfortunately reversing binaries is not

308
00:13:32,160 --> 00:13:34,000
always fun

309
00:13:34,000 --> 00:13:36,160
when compiling binaries you have the

310
00:13:36,160 --> 00:13:37,120
option to

311
00:13:37,120 --> 00:13:38,720
discard symbol names and debug

312
00:13:38,720 --> 00:13:41,600
information often to spare size

313
00:13:41,600 --> 00:13:44,399
and hide valuable information to

314
00:13:44,399 --> 00:13:46,839
understand the deeper workings of the

315
00:13:46,839 --> 00:13:48,320
binary this

316
00:13:48,320 --> 00:13:51,360
presents challenges to reversers as

317
00:13:51,360 --> 00:13:53,920
function names variable names are not

318
00:13:53,920 --> 00:13:56,000
present anymore

319
00:13:56,000 --> 00:13:58,160
reversing such files requires certain

320
00:13:58,160 --> 00:14:00,320
experience creativity

321
00:14:00,320 --> 00:14:03,839
and plenty of time

322
00:14:05,680 --> 00:14:08,000
so let's see the previous scenario again

323
00:14:08,000 --> 00:14:09,120
but now it's stripped

324
00:14:09,120 --> 00:14:12,800
binaries we are using the strip

325
00:14:12,800 --> 00:14:16,079
minus s and minus ld flex parameters

326
00:14:16,079 --> 00:14:19,680
to strip any information from the binary

327
00:14:19,680 --> 00:14:23,599
the size difference again is huge

328
00:14:27,040 --> 00:14:28,959
putting those files into our favorite

329
00:14:28,959 --> 00:14:30,639
disassembler reveals that

330
00:14:30,639 --> 00:14:33,600
the c program has 15 functions

331
00:14:33,600 --> 00:14:36,079
recognized by default

332
00:14:36,079 --> 00:14:38,399
the go binary again has a large function

333
00:14:38,399 --> 00:14:39,360
count but

334
00:14:39,360 --> 00:14:42,399
this time we have no clue as to which

335
00:14:42,399 --> 00:14:45,600
function does what matter binaries are

336
00:14:45,600 --> 00:14:46,560
usually like this

337
00:14:46,560 --> 00:14:48,959
and it's always a real challenge to get

338
00:14:48,959 --> 00:14:52,638
to the bottom of their intentions

339
00:14:55,040 --> 00:14:57,519
the main function is easily located in

340
00:14:57,519 --> 00:14:58,240
unstripped

341
00:14:58,240 --> 00:15:01,120
executables this is where the program

342
00:15:01,120 --> 00:15:04,720
starts via the entry point

343
00:15:06,720 --> 00:15:09,600
however the disassembler can't identify

344
00:15:09,600 --> 00:15:10,959
the main function

345
00:15:10,959 --> 00:15:14,399
in strip c binaries and randomly assigns

346
00:15:14,399 --> 00:15:17,440
a function name to it

347
00:15:20,399 --> 00:15:22,720
unstripped and disassembled go binaries

348
00:15:22,720 --> 00:15:24,399
have the main function

349
00:15:24,399 --> 00:15:27,839
as seen on the picture here

350
00:15:29,519 --> 00:15:31,839
but note that the missing main function

351
00:15:31,839 --> 00:15:35,199
name here on the second picture

352
00:15:35,199 --> 00:15:37,600
when we try to analyze and disassemble a

353
00:15:37,600 --> 00:15:38,240
stripped

354
00:15:38,240 --> 00:15:41,519
golden binary the function name is

355
00:15:41,519 --> 00:15:42,560
random

356
00:15:42,560 --> 00:15:45,279
as kidrock cannot really identify

357
00:15:45,279 --> 00:15:47,920
without simple information

358
00:15:47,920 --> 00:15:50,240
and now i will pass the microphone to

359
00:15:50,240 --> 00:15:51,279
dorka

360
00:15:51,279 --> 00:15:53,279
who will present how we can recover

361
00:15:53,279 --> 00:15:54,320
simple information

362
00:15:54,320 --> 00:15:57,040
in google binaries in order to beat

363
00:15:57,040 --> 00:15:57,519
these

364
00:15:57,519 --> 00:16:01,120
previous issues let's see if we have any

365
00:16:01,120 --> 00:16:03,519
chance to recover the function names

366
00:16:03,519 --> 00:16:05,440
as a first step we simply checked the

367
00:16:05,440 --> 00:16:07,360
strings within the hello world binaries

368
00:16:07,360 --> 00:16:09,040
and search for the function names within

369
00:16:09,040 --> 00:16:09,759
the original

370
00:16:09,759 --> 00:16:12,240
and the strict versions as you can see

371
00:16:12,240 --> 00:16:14,320
on this slide the function name main was

372
00:16:14,320 --> 00:16:16,560
removed from the stripped version of the

373
00:16:16,560 --> 00:16:16,880
c

374
00:16:16,880 --> 00:16:20,000
helloworld binary meanwhile the

375
00:16:20,000 --> 00:16:22,160
main.main function name

376
00:16:22,160 --> 00:16:25,360
is still visible in the stripped go

377
00:16:25,360 --> 00:16:28,800
binary which is very promising

378
00:16:28,800 --> 00:16:31,680
so we looked at the same within gidra

379
00:16:31,680 --> 00:16:32,560
here

380
00:16:32,560 --> 00:16:34,720
just below the main.mainstream there is

381
00:16:34,720 --> 00:16:36,240
another function name

382
00:16:36,240 --> 00:16:38,880
which is also a very positive sign so we

383
00:16:38,880 --> 00:16:40,800
opened up the memory map

384
00:16:40,800 --> 00:16:43,839
to find out where these function names

385
00:16:43,839 --> 00:16:45,279
are exactly located

386
00:16:45,279 --> 00:16:48,320
within the binary we found this go

387
00:16:48,320 --> 00:16:51,600
specific section called go pcl and tab

388
00:16:51,600 --> 00:16:53,279
so as an obvious step we wanted to

389
00:16:53,279 --> 00:16:56,079
understand how this section is built up

390
00:16:56,079 --> 00:16:58,800
what kind of information is stored there

391
00:16:58,800 --> 00:16:59,519
so we

392
00:16:59,519 --> 00:17:02,800
simply search for it

393
00:17:02,800 --> 00:17:04,079
luckily there is a detailed

394
00:17:04,079 --> 00:17:05,919
documentation available

395
00:17:05,919 --> 00:17:08,640
about the pcl and tab structure and we

396
00:17:08,640 --> 00:17:10,400
won't go into every single

397
00:17:10,400 --> 00:17:13,679
detail of this uh pcl and tab we will

398
00:17:13,679 --> 00:17:15,520
only focus on the parts that are

399
00:17:15,520 --> 00:17:18,240
important to recover the function names

400
00:17:18,240 --> 00:17:20,400
it starts with a specific header there

401
00:17:20,400 --> 00:17:22,319
is a magic value in the very beginning

402
00:17:22,319 --> 00:17:23,359
followed by other

403
00:17:23,359 --> 00:17:26,319
important information and then there is

404
00:17:26,319 --> 00:17:29,200
the so-called function symbol table

405
00:17:29,200 --> 00:17:31,919
this symbol contains information about

406
00:17:31,919 --> 00:17:33,280
every single function

407
00:17:33,280 --> 00:17:35,760
within the binary first there is a

408
00:17:35,760 --> 00:17:36,480
pointer

409
00:17:36,480 --> 00:17:39,520
to the entry point of the function

410
00:17:39,520 --> 00:17:42,240
and then there is an offset where the

411
00:17:42,240 --> 00:17:42,799
function

412
00:17:42,799 --> 00:17:46,320
metadata table can be found just before

413
00:17:46,320 --> 00:17:48,080
we go into the details

414
00:17:48,080 --> 00:17:50,960
what can we see within the metadata

415
00:17:50,960 --> 00:17:52,080
table

416
00:17:52,080 --> 00:17:55,760
i would quickly touch on

417
00:17:55,760 --> 00:17:58,400
the case of windows executables during

418
00:17:58,400 --> 00:17:59,280
our research

419
00:17:59,280 --> 00:18:01,760
and during this presentation we used

420
00:18:01,760 --> 00:18:03,919
linux binaries

421
00:18:03,919 --> 00:18:07,520
so here i would like to highlight a

422
00:18:07,520 --> 00:18:08,559
little bit of the

423
00:18:08,559 --> 00:18:11,039
differences within the linux binaries

424
00:18:11,039 --> 00:18:13,280
and windows executables

425
00:18:13,280 --> 00:18:15,760
here as you can see there is no section

426
00:18:15,760 --> 00:18:18,320
called go pcl and tab or something

427
00:18:18,320 --> 00:18:21,440
like that rather we have to look for the

428
00:18:21,440 --> 00:18:22,400
pcl and tab

429
00:18:22,400 --> 00:18:25,760
structure which is located here in the

430
00:18:25,760 --> 00:18:29,520
our data section luckily this is not

431
00:18:29,520 --> 00:18:31,360
too difficult since we know how the

432
00:18:31,360 --> 00:18:33,200
structure is built up we know how the

433
00:18:33,200 --> 00:18:34,080
header should

434
00:18:34,080 --> 00:18:36,640
should look like what is the magic value

435
00:18:36,640 --> 00:18:37,200
so

436
00:18:37,200 --> 00:18:40,559
it just adds one extra step

437
00:18:40,559 --> 00:18:43,840
to our script

438
00:18:43,840 --> 00:18:45,600
it's easier in linux because we just

439
00:18:45,600 --> 00:18:47,360
need to look for the section name

440
00:18:47,360 --> 00:18:50,400
but it's obviously not that difficult

441
00:18:50,400 --> 00:18:52,720
for windows either

442
00:18:52,720 --> 00:18:56,080
so let's turn back to the metadata table

443
00:18:56,080 --> 00:19:00,000
it starts with the same value the

444
00:19:00,000 --> 00:19:02,720
address of the entry point of the

445
00:19:02,720 --> 00:19:03,919
function

446
00:19:03,919 --> 00:19:06,960
and then there is an offset to

447
00:19:06,960 --> 00:19:10,480
the function name which is exactly what

448
00:19:10,480 --> 00:19:11,120
we need

449
00:19:11,120 --> 00:19:12,960
we have to know where the function

450
00:19:12,960 --> 00:19:15,520
starts and then we have to find somehow

451
00:19:15,520 --> 00:19:17,039
the name of the function

452
00:19:17,039 --> 00:19:18,880
and as we can see we have all this

453
00:19:18,880 --> 00:19:20,799
information here

454
00:19:20,799 --> 00:19:22,960
so the steps of the function name

455
00:19:22,960 --> 00:19:25,760
recovery is very easy are very easy

456
00:19:25,760 --> 00:19:29,440
and this is what our scripts is doing

457
00:19:29,440 --> 00:19:31,760
we first we locate the pcl and tab

458
00:19:31,760 --> 00:19:32,559
structure

459
00:19:32,559 --> 00:19:35,520
then we extract the function addresses

460
00:19:35,520 --> 00:19:36,559
and

461
00:19:36,559 --> 00:19:39,200
finally we need to find the offsets of

462
00:19:39,200 --> 00:19:41,039
the function names if someone want to go

463
00:19:41,039 --> 00:19:42,960
through step by step how to calculate

464
00:19:42,960 --> 00:19:43,360
these

465
00:19:43,360 --> 00:19:46,240
locations you can find all the details

466
00:19:46,240 --> 00:19:46,799
on this

467
00:19:46,799 --> 00:19:50,320
slide so in case of the

468
00:19:50,320 --> 00:19:54,000
stripped hello go binary if we execute

469
00:19:54,000 --> 00:19:55,760
our script we can see that the

470
00:19:55,760 --> 00:19:59,120
functions were renamed we can even find

471
00:19:59,120 --> 00:20:00,559
the main.main

472
00:20:00,559 --> 00:20:03,520
function and as a cherry on the top

473
00:20:03,520 --> 00:20:04,320
there are even

474
00:20:04,320 --> 00:20:07,440
more functions defined after the script

475
00:20:07,440 --> 00:20:08,880
execution

476
00:20:08,880 --> 00:20:10,960
in case of a real world example this is

477
00:20:10,960 --> 00:20:12,080
the aquarics

478
00:20:12,080 --> 00:20:15,200
ransomware we can see that it's

479
00:20:15,200 --> 00:20:17,360
this very simple script can help us a

480
00:20:17,360 --> 00:20:19,520
lot during reverse engineering we have

481
00:20:19,520 --> 00:20:21,440
all the function names searching for the

482
00:20:21,440 --> 00:20:23,200
main functions we can

483
00:20:23,200 --> 00:20:26,559
quickly have some idea about the purpose

484
00:20:26,559 --> 00:20:27,520
of the mother

485
00:20:27,520 --> 00:20:30,159
which makes reverse engineering much

486
00:20:30,159 --> 00:20:32,000
more faster we don't have to go through

487
00:20:32,000 --> 00:20:33,120
one by one

488
00:20:33,120 --> 00:20:38,720
in like four 2800 800 functions rather

489
00:20:38,720 --> 00:20:40,640
we can just

490
00:20:40,640 --> 00:20:44,320
look for the interesting function names

491
00:20:44,320 --> 00:20:46,720
obviously there were some challenges

492
00:20:46,720 --> 00:20:49,200
when we created our scripts

493
00:20:49,200 --> 00:20:51,840
one of this challenge was when gidra

494
00:20:51,840 --> 00:20:53,039
couldn't

495
00:20:53,039 --> 00:20:55,360
for some reason couldn't define the

496
00:20:55,360 --> 00:20:56,640
function name string

497
00:20:56,640 --> 00:20:59,280
because in this case when we want to

498
00:20:59,280 --> 00:21:00,880
retrieve the function name

499
00:21:00,880 --> 00:21:04,720
our script won't find there any strings

500
00:21:04,720 --> 00:21:07,120
but it can be solved easily because if

501
00:21:07,120 --> 00:21:08,720
we cannot find the data that we are

502
00:21:08,720 --> 00:21:10,880
looking for first then first we try to

503
00:21:10,880 --> 00:21:12,080
create the string

504
00:21:12,080 --> 00:21:16,159
and then rename the function so it's

505
00:21:16,159 --> 00:21:20,080
not a very big deal but we still have to

506
00:21:20,080 --> 00:21:23,039
handle this issue the other challenge is

507
00:21:23,039 --> 00:21:24,559
not related to

508
00:21:24,559 --> 00:21:29,919
stripped binaries rather how gydra

509
00:21:29,919 --> 00:21:31,679
analyzing

510
00:21:31,679 --> 00:21:35,120
go linux binaries so when we load a new

511
00:21:35,120 --> 00:21:37,440
linux go binary within gitra and then

512
00:21:37,440 --> 00:21:38,640
the auto analysis

513
00:21:38,640 --> 00:21:41,760
is running then it will rename some of

514
00:21:41,760 --> 00:21:42,480
the

515
00:21:42,480 --> 00:21:44,640
functions to an incorrect name so as you

516
00:21:44,640 --> 00:21:45,760
can see here there are

517
00:21:45,760 --> 00:21:48,000
many functions called reflect dots so

518
00:21:48,000 --> 00:21:48,960
basically only

519
00:21:48,960 --> 00:21:50,720
the package name is visible and we

520
00:21:50,720 --> 00:21:52,960
cannot really see the actual function

521
00:21:52,960 --> 00:21:54,000
name

522
00:21:54,000 --> 00:21:57,760
but luckily according to the

523
00:21:57,760 --> 00:22:00,960
developers this will be this problem

524
00:22:00,960 --> 00:22:02,480
will be solved in the next

525
00:22:02,480 --> 00:22:05,679
release so now that we

526
00:22:05,679 --> 00:22:08,559
talked about uh how to recover function

527
00:22:08,559 --> 00:22:09,200
names

528
00:22:09,200 --> 00:22:12,000
let's turn to another issue that we were

529
00:22:12,000 --> 00:22:13,039
working with

530
00:22:13,039 --> 00:22:16,320
it's how the strings are defined

531
00:22:16,320 --> 00:22:19,600
within go so if we look at the hello c

532
00:22:19,600 --> 00:22:20,320
and hello

533
00:22:20,320 --> 00:22:23,600
go examples again we can

534
00:22:23,600 --> 00:22:26,640
see that there are 70 defined strings

535
00:22:26,640 --> 00:22:27,520
within the c

536
00:22:27,520 --> 00:22:30,480
binary while there are more than 6 000

537
00:22:30,480 --> 00:22:32,080
within the go binary

538
00:22:32,080 --> 00:22:34,720
on one hand if we not we don't really

539
00:22:34,720 --> 00:22:36,320
know what we are looking

540
00:22:36,320 --> 00:22:38,320
for and we just want to go through all

541
00:22:38,320 --> 00:22:40,159
the strings that can be

542
00:22:40,159 --> 00:22:41,600
more difficult to go through six

543
00:22:41,600 --> 00:22:44,400
thousand strings but

544
00:22:44,400 --> 00:22:46,480
what is even worse that if we look for

545
00:22:46,480 --> 00:22:48,480
the activity string

546
00:22:48,480 --> 00:22:51,679
it cannot be found within the defined

547
00:22:51,679 --> 00:22:52,720
strings in the go

548
00:22:52,720 --> 00:22:54,960
binary in c it's very easy we can see

549
00:22:54,960 --> 00:22:55,840
there is the hello

550
00:22:55,840 --> 00:22:59,120
activity string while in go we don't

551
00:22:59,120 --> 00:22:59,679
find

552
00:22:59,679 --> 00:23:01,600
anything there are six thousand strings

553
00:23:01,600 --> 00:23:04,000
but still no activity

554
00:23:04,000 --> 00:23:06,240
so let's see what happens if we use the

555
00:23:06,240 --> 00:23:08,960
strings utility and see this is what we

556
00:23:08,960 --> 00:23:11,280
would expect it's very easy we

557
00:23:11,280 --> 00:23:15,520
have we get our string but in case of go

558
00:23:15,520 --> 00:23:18,559
hello activity is a is the

559
00:23:18,559 --> 00:23:21,360
part of a huge string now it's not that

560
00:23:21,360 --> 00:23:22,480
difficult since the

561
00:23:22,480 --> 00:23:24,400
hello activities at the very end of this

562
00:23:24,400 --> 00:23:25,760
string but

563
00:23:25,760 --> 00:23:27,440
it can be somewhere in the middle so it

564
00:23:27,440 --> 00:23:28,799
can be difficult to

565
00:23:28,799 --> 00:23:32,799
find so why why is it happening why do

566
00:23:32,799 --> 00:23:34,400
we see these

567
00:23:34,400 --> 00:23:37,840
while we are used to the c strings that

568
00:23:37,840 --> 00:23:39,520
these are sequence of characters

569
00:23:39,520 --> 00:23:41,600
terminated with the null character

570
00:23:41,600 --> 00:23:45,120
it's very easy this is what

571
00:23:45,120 --> 00:23:48,880
the strings utility is looking for

572
00:23:48,880 --> 00:23:51,279
but in goal strings are defined in a

573
00:23:51,279 --> 00:23:52,159
different way

574
00:23:52,159 --> 00:23:54,320
these are sequence of bytes with a fixed

575
00:23:54,320 --> 00:23:55,440
length and there is no

576
00:23:55,440 --> 00:23:58,320
null terminal termination so there is a

577
00:23:58,320 --> 00:23:59,120
so-called

578
00:23:59,120 --> 00:24:02,000
string structure which consists of a

579
00:24:02,000 --> 00:24:02,880
pointer

580
00:24:02,880 --> 00:24:05,120
to the sequence of bytes which is our

581
00:24:05,120 --> 00:24:06,320
string

582
00:24:06,320 --> 00:24:08,720
and an integer which is the length of

583
00:24:08,720 --> 00:24:09,919
the strings

584
00:24:09,919 --> 00:24:13,760
string and these smaller strings are

585
00:24:13,760 --> 00:24:15,200
concatenated together

586
00:24:15,200 --> 00:24:18,400
to a huge string blob and

587
00:24:18,400 --> 00:24:20,960
there will be maybe one no termination

588
00:24:20,960 --> 00:24:22,640
character at the very end

589
00:24:22,640 --> 00:24:25,039
but between the specific strings there

590
00:24:25,039 --> 00:24:26,480
is no

591
00:24:26,480 --> 00:24:29,440
no character and gidra has a hard time

592
00:24:29,440 --> 00:24:31,600
defining these strings within

593
00:24:31,600 --> 00:24:34,880
go binaries so the idea that

594
00:24:34,880 --> 00:24:37,919
to create a script where we have video

595
00:24:37,919 --> 00:24:40,000
to find these string structures

596
00:24:40,000 --> 00:24:41,840
obviously there are many many different

597
00:24:41,840 --> 00:24:43,679
ways how these string structures can be

598
00:24:43,679 --> 00:24:45,039
created

599
00:24:45,039 --> 00:24:46,880
they can be dynamically or statically

600
00:24:46,880 --> 00:24:48,720
allocated these are different

601
00:24:48,720 --> 00:24:50,400
uh per architecture thanks to the

602
00:24:50,400 --> 00:24:52,480
different instruction sets there can be

603
00:24:52,480 --> 00:24:54,240
even within one architecture

604
00:24:54,240 --> 00:24:57,520
different solutions and we cannot forget

605
00:24:57,520 --> 00:24:59,279
about the possible changes

606
00:24:59,279 --> 00:25:02,799
per go versions we in our test to use

607
00:25:02,799 --> 00:25:04,159
the

608
00:25:04,159 --> 00:25:08,080
go version 1.11 and above

609
00:25:08,080 --> 00:25:10,720
and for those our scripts are working so

610
00:25:10,720 --> 00:25:13,039
now we will go through

611
00:25:13,039 --> 00:25:15,919
some of our solutions and let's start

612
00:25:15,919 --> 00:25:17,919
with the dynamic allocate dynamically

613
00:25:17,919 --> 00:25:18,559
allocated

614
00:25:18,559 --> 00:25:21,760
string structures there will be several

615
00:25:21,760 --> 00:25:22,640
scenarios

616
00:25:22,640 --> 00:25:26,480
that we will talk about here we can see

617
00:25:26,480 --> 00:25:29,919
hello world example of c

618
00:25:29,919 --> 00:25:33,600
just uh quickly it's very

619
00:25:33,600 --> 00:25:36,640
easy six lines there is the string it's

620
00:25:36,640 --> 00:25:37,600
visible

621
00:25:37,600 --> 00:25:41,520
and comparing this to the goal

622
00:25:41,520 --> 00:25:43,840
hello world example we can see that

623
00:25:43,840 --> 00:25:44,880
there it's

624
00:25:44,880 --> 00:25:48,640
the function looks more complicated

625
00:25:48,640 --> 00:25:50,799
we don't uh see the strings that we

626
00:25:50,799 --> 00:25:52,320
would expect

627
00:25:52,320 --> 00:25:56,159
so we have to spend some time to

628
00:25:56,159 --> 00:25:58,240
understand the structure how

629
00:25:58,240 --> 00:26:02,320
it is built up but

630
00:26:02,320 --> 00:26:04,480
luckily it's not that difficult to find

631
00:26:04,480 --> 00:26:06,080
the data that we are looking for

632
00:26:06,080 --> 00:26:10,720
so it starts with putting the address

633
00:26:10,720 --> 00:26:14,400
of the string to a register

634
00:26:14,400 --> 00:26:17,679
and then placing this in the stack

635
00:26:17,679 --> 00:26:20,880
and finally we also put the

636
00:26:20,880 --> 00:26:24,080
length to the stack

637
00:26:24,080 --> 00:26:27,200
uh what you can see on the right side is

638
00:26:27,200 --> 00:26:28,080
that

639
00:26:28,080 --> 00:26:30,480
this string is not defined this is why

640
00:26:30,480 --> 00:26:31,440
we couldn't

641
00:26:31,440 --> 00:26:35,279
find uh among the defined strings within

642
00:26:35,279 --> 00:26:36,880
git draw

643
00:26:36,880 --> 00:26:40,480
so the idea of the

644
00:26:40,480 --> 00:26:42,000
script is to search for these

645
00:26:42,000 --> 00:26:44,080
instructions and

646
00:26:44,080 --> 00:26:48,320
use this information define our strings

647
00:26:48,320 --> 00:26:52,400
we can see the 32 and 64-bit versions

648
00:26:52,400 --> 00:26:55,200
naturally different so as we already

649
00:26:55,200 --> 00:26:57,440
talked about it first the address of the

650
00:26:57,440 --> 00:26:58,000
string

651
00:26:58,000 --> 00:27:00,880
is placed into a register and then this

652
00:27:00,880 --> 00:27:01,760
is

653
00:27:01,760 --> 00:27:04,799
placed to the stack along

654
00:27:04,799 --> 00:27:09,679
with the size of the string

655
00:27:09,679 --> 00:27:13,120
so if we execute our script we can see

656
00:27:13,120 --> 00:27:13,919
that now

657
00:27:13,919 --> 00:27:17,039
activity hello activity will be defined

658
00:27:17,039 --> 00:27:20,640
and it will be much easier to read

659
00:27:20,640 --> 00:27:24,159
the assembly code because we can see the

660
00:27:24,159 --> 00:27:24,640
string

661
00:27:24,640 --> 00:27:27,919
that we are looking for

662
00:27:28,240 --> 00:27:31,279
and in case of the

663
00:27:31,279 --> 00:27:33,840
ransomware example that we have seen

664
00:27:33,840 --> 00:27:34,880
before

665
00:27:34,880 --> 00:27:37,679
you can see that from more than 9000

666
00:27:37,679 --> 00:27:38,480
strings

667
00:27:38,480 --> 00:27:41,679
after executing the script we will get

668
00:27:41,679 --> 00:27:45,200
11 000 strings and it's the same what

669
00:27:45,200 --> 00:27:46,720
you can see here that

670
00:27:46,720 --> 00:27:49,919
before the concussed string function is

671
00:27:49,919 --> 00:27:50,960
called it's much

672
00:27:50,960 --> 00:27:53,200
easier for reverse engineer to look at

673
00:27:53,200 --> 00:27:55,200
the code and right there you can

674
00:27:55,200 --> 00:27:59,120
see the script the string

675
00:27:59,120 --> 00:28:02,640
that we were just defining

676
00:28:02,640 --> 00:28:04,880
so this is very similar for other

677
00:28:04,880 --> 00:28:05,919
architectures

678
00:28:05,919 --> 00:28:09,440
let's take a quick look at the arms

679
00:28:09,440 --> 00:28:10,799
32-bit

680
00:28:10,799 --> 00:28:14,000
architecture before we execute the

681
00:28:14,000 --> 00:28:16,240
script this is how it looks like the

682
00:28:16,240 --> 00:28:18,320
difference that there is not

683
00:28:18,320 --> 00:28:21,679
uh directly the address

684
00:28:21,679 --> 00:28:23,919
of the string that we are looking for

685
00:28:23,919 --> 00:28:26,159
that is placed to the register

686
00:28:26,159 --> 00:28:29,279
rather there is a point use a pointer

687
00:28:29,279 --> 00:28:31,840
used which will point to the address of

688
00:28:31,840 --> 00:28:32,880
the string

689
00:28:32,880 --> 00:28:36,720
so there is one extra strap here

690
00:28:36,720 --> 00:28:40,640
but after that it's very similar

691
00:28:40,640 --> 00:28:42,880
then we will also place all this

692
00:28:42,880 --> 00:28:43,760
information

693
00:28:43,760 --> 00:28:46,159
onto the stack before we call the concat

694
00:28:46,159 --> 00:28:48,960
string function

695
00:28:48,960 --> 00:28:53,120
along with the length of the string

696
00:28:53,120 --> 00:28:56,080
so once we execute our script we can see

697
00:28:56,080 --> 00:28:56,559
that

698
00:28:56,559 --> 00:28:59,919
the pointer will be nicely really nicely

699
00:28:59,919 --> 00:29:01,039
renamed

700
00:29:01,039 --> 00:29:04,480
as well the string will be defined so it

701
00:29:04,480 --> 00:29:05,440
will be

702
00:29:05,440 --> 00:29:07,600
first much easier to read the assembly

703
00:29:07,600 --> 00:29:08,799
code and second

704
00:29:08,799 --> 00:29:12,320
much easier to find the strings

705
00:29:12,320 --> 00:29:16,879
through the define the string window

706
00:29:17,039 --> 00:29:19,600
and as a next step let's take a look at

707
00:29:19,600 --> 00:29:20,159
the

708
00:29:20,159 --> 00:29:23,039
64-bit versions already here we have two

709
00:29:23,039 --> 00:29:24,399
different solutions

710
00:29:24,399 --> 00:29:27,440
in the first one the instruction

711
00:29:27,440 --> 00:29:29,520
called or is used while in the second

712
00:29:29,520 --> 00:29:31,200
one move basically they are doing the

713
00:29:31,200 --> 00:29:32,159
same

714
00:29:32,159 --> 00:29:36,480
just a little bit different

715
00:29:36,480 --> 00:29:39,520
and here we also look

716
00:29:39,520 --> 00:29:43,440
for these sequence of instructions

717
00:29:43,440 --> 00:29:47,679
and after we execute our script

718
00:29:47,679 --> 00:29:50,720
we can see that these strings are nicely

719
00:29:50,720 --> 00:29:54,000
defined so reverse engineering becomes

720
00:29:54,000 --> 00:29:57,360
much more easier if someone

721
00:29:57,360 --> 00:29:59,279
is interested and want to understand it

722
00:29:59,279 --> 00:30:00,480
in more detail then

723
00:30:00,480 --> 00:30:03,679
you can use the example

724
00:30:03,679 --> 00:30:06,320
binaries that we put on every single

725
00:30:06,320 --> 00:30:08,080
slide so you can see what we

726
00:30:08,080 --> 00:30:12,559
used for that specific test

727
00:30:12,559 --> 00:30:15,600
so let's turn to the challenges here

728
00:30:15,600 --> 00:30:18,159
uh obviously the biggest challenge that

729
00:30:18,159 --> 00:30:19,679
we have to create

730
00:30:19,679 --> 00:30:22,880
for every instruction set

731
00:30:22,880 --> 00:30:26,320
a different part

732
00:30:26,320 --> 00:30:29,520
in the script and even in within one

733
00:30:29,520 --> 00:30:31,360
architecture can be implemented in many

734
00:30:31,360 --> 00:30:33,600
ways as we have seen in the previous

735
00:30:33,600 --> 00:30:34,799
slide

736
00:30:34,799 --> 00:30:37,840
and obviously if someone wants to break

737
00:30:37,840 --> 00:30:38,159
it

738
00:30:38,159 --> 00:30:41,520
it's very easy here for example

739
00:30:41,520 --> 00:30:46,480
the length was already placed onto the

740
00:30:46,480 --> 00:30:49,679
into the specific register and

741
00:30:49,679 --> 00:30:51,679
that's why the sequence of the

742
00:30:51,679 --> 00:30:53,360
instructions are not what we would

743
00:30:53,360 --> 00:30:54,799
expect so we couldn't

744
00:30:54,799 --> 00:30:57,360
uh our script couldn't define the

745
00:30:57,360 --> 00:30:58,799
strings

746
00:30:58,799 --> 00:31:01,279
so we have to keep an eye on it and

747
00:31:01,279 --> 00:31:02,320
update

748
00:31:02,320 --> 00:31:06,000
the script as we see new solutions

749
00:31:06,000 --> 00:31:09,919
coming up so now that we talked about

750
00:31:09,919 --> 00:31:11,919
the dynamically allocated string

751
00:31:11,919 --> 00:31:13,519
structures let's take a look at the

752
00:31:13,519 --> 00:31:16,159
statically allocated string structures

753
00:31:16,159 --> 00:31:18,880
basically here what we want to do is

754
00:31:18,880 --> 00:31:21,200
look for a series of

755
00:31:21,200 --> 00:31:23,919
pointers to the string followed by

756
00:31:23,919 --> 00:31:25,840
possible length value

757
00:31:25,840 --> 00:31:28,480
obviously there are many possibilities

758
00:31:28,480 --> 00:31:29,440
to have

759
00:31:29,440 --> 00:31:32,080
false positives here so we wanted to

760
00:31:32,080 --> 00:31:32,559
limit

761
00:31:32,559 --> 00:31:36,799
these so we limited the length of the

762
00:31:36,799 --> 00:31:37,360
string

763
00:31:37,360 --> 00:31:40,000
we search only for printable characters

764
00:31:40,000 --> 00:31:42,240
and check only in data sections

765
00:31:42,240 --> 00:31:44,880
this is not architecture specific

766
00:31:44,880 --> 00:31:47,279
obviously it matters if it's a 32 or

767
00:31:47,279 --> 00:31:48,880
64-bit

768
00:31:48,880 --> 00:31:51,600
binary but other than that it works the

769
00:31:51,600 --> 00:31:53,200
same for the different

770
00:31:53,200 --> 00:31:57,039
architectures so here in this example

771
00:31:57,039 --> 00:31:58,399
you can see that there are string

772
00:31:58,399 --> 00:32:00,240
pointers followed by

773
00:32:00,240 --> 00:32:03,440
string length and the first pointer was

774
00:32:03,440 --> 00:32:05,200
successfully identified

775
00:32:05,200 --> 00:32:08,720
by ghidra as this is directly referenced

776
00:32:08,720 --> 00:32:10,480
from the code

777
00:32:10,480 --> 00:32:15,760
but after executing our script we will

778
00:32:15,760 --> 00:32:18,880
define the other pointers as well and if

779
00:32:18,880 --> 00:32:19,600
we follow

780
00:32:19,600 --> 00:32:21,120
these pointers we can see that the

781
00:32:21,120 --> 00:32:23,200
strings are not defined either

782
00:32:23,200 --> 00:32:26,799
so this is what we also want to achieve

783
00:32:26,799 --> 00:32:30,080
with the script so once we execute the

784
00:32:30,080 --> 00:32:30,880
script

785
00:32:30,880 --> 00:32:34,559
it will define the pointers

786
00:32:34,559 --> 00:32:37,519
and the integers and the strings as well

787
00:32:37,519 --> 00:32:38,399
so it will

788
00:32:38,399 --> 00:32:40,960
also help a lot in reverse engineering

789
00:32:40,960 --> 00:32:42,000
fi to find

790
00:32:42,000 --> 00:32:44,399
these specific strings that are

791
00:32:44,399 --> 00:32:46,159
interesting

792
00:32:46,159 --> 00:32:49,760
during our analysis so

793
00:32:49,760 --> 00:32:52,799
what are the challenges here

794
00:32:52,799 --> 00:32:55,279
first of all as i already said in before

795
00:32:55,279 --> 00:32:57,760
we wanted to eliminate

796
00:32:57,760 --> 00:33:00,559
false positives so we only used search

797
00:33:00,559 --> 00:33:02,159
for printable characters

798
00:33:02,159 --> 00:33:04,880
but obviously it's possible that we are

799
00:33:04,880 --> 00:33:05,840
looking for

800
00:33:05,840 --> 00:33:07,840
something that contains non-printable

801
00:33:07,840 --> 00:33:10,640
characters as well it's a very

802
00:33:10,640 --> 00:33:13,279
small part of the script so if you want

803
00:33:13,279 --> 00:33:15,200
to use it just experiment with it change

804
00:33:15,200 --> 00:33:17,360
the values and

805
00:33:17,360 --> 00:33:19,519
find what is the best for your analysis

806
00:33:19,519 --> 00:33:20,559
and the same

807
00:33:20,559 --> 00:33:24,080
goes for the string length limitation so

808
00:33:24,080 --> 00:33:26,720
it can miss some of the strings if they

809
00:33:26,720 --> 00:33:28,399
are larger so

810
00:33:28,399 --> 00:33:30,320
this can also be very easily changed so

811
00:33:30,320 --> 00:33:31,919
these are not

812
00:33:31,919 --> 00:33:35,120
not very big problems

813
00:33:35,120 --> 00:33:37,600
but we have to be aware that some of

814
00:33:37,600 --> 00:33:39,440
these strings might be missing because

815
00:33:39,440 --> 00:33:41,919
of these

816
00:33:42,320 --> 00:33:45,039
limitations

817
00:33:45,679 --> 00:33:48,720
another challenge when we are

818
00:33:48,720 --> 00:33:51,600
working with the string recovery is when

819
00:33:51,600 --> 00:33:54,240
gidra is falsely defined some data types

820
00:33:54,240 --> 00:33:54,799
so what

821
00:33:54,799 --> 00:33:57,760
our scripts are doing looking for the

822
00:33:57,760 --> 00:33:59,279
string

823
00:33:59,279 --> 00:34:02,640
values along with the lengths and create

824
00:34:02,640 --> 00:34:05,679
pointers crea define the strings

825
00:34:05,679 --> 00:34:08,159
and create the integers but what happens

826
00:34:08,159 --> 00:34:10,480
if guidera for some reason

827
00:34:10,480 --> 00:34:13,119
already defined the data so for example

828
00:34:13,119 --> 00:34:14,800
here you can see

829
00:34:14,800 --> 00:34:19,359
that these values 39 13

830
00:34:19,359 --> 00:34:22,239
a that we would expect to be an integer

831
00:34:22,239 --> 00:34:23,280
to be the length

832
00:34:23,280 --> 00:34:27,599
of the string are already defined

833
00:34:27,599 --> 00:34:29,599
it's uh kind of funny that it's called

834
00:34:29,599 --> 00:34:30,719
undefined

835
00:34:30,719 --> 00:34:33,199
but it's still a defined data type so

836
00:34:33,199 --> 00:34:34,800
when we want to

837
00:34:34,800 --> 00:34:36,560
when we look for these values and we

838
00:34:36,560 --> 00:34:38,480
want to define an integer there

839
00:34:38,480 --> 00:34:41,679
we will get an error since we cannot

840
00:34:41,679 --> 00:34:44,000
create a data type where there is

841
00:34:44,000 --> 00:34:44,719
already

842
00:34:44,719 --> 00:34:48,560
a data type so what our script is doing

843
00:34:48,560 --> 00:34:51,359
first we will remove this data the

844
00:34:51,359 --> 00:34:52,719
undefined

845
00:34:52,719 --> 00:34:56,079
for and undefined eight data and then

846
00:34:56,079 --> 00:34:59,200
we will redefine it

847
00:34:59,200 --> 00:35:02,320
to create an integer data type

848
00:35:02,320 --> 00:35:05,440
so after executing the script this is

849
00:35:05,440 --> 00:35:06,320
what we will see

850
00:35:06,320 --> 00:35:08,320
the undefined will be changed to integer

851
00:35:08,320 --> 00:35:11,200
and the pointers and strings can be also

852
00:35:11,200 --> 00:35:15,359
created obviously it can happen that

853
00:35:15,359 --> 00:35:19,200
there are other data types

854
00:35:19,200 --> 00:35:23,280
created by gidra so for example

855
00:35:23,280 --> 00:35:26,560
here we can see that there is a large

856
00:35:26,560 --> 00:35:29,680
string blob defined as one string there

857
00:35:29,680 --> 00:35:30,160
are

858
00:35:30,160 --> 00:35:33,119
multiple smaller strings that are

859
00:35:33,119 --> 00:35:34,800
concatenated

860
00:35:34,800 --> 00:35:36,000
and there is somewhere the null

861
00:35:36,000 --> 00:35:38,640
termination character and

862
00:35:38,640 --> 00:35:41,760
guidra defined this as a whole

863
00:35:41,760 --> 00:35:44,640
one string and you can see here that

864
00:35:44,640 --> 00:35:46,480
there are offcut references meaning

865
00:35:46,480 --> 00:35:48,560
there are references within the code

866
00:35:48,560 --> 00:35:50,320
to some parts of the string not the

867
00:35:50,320 --> 00:35:52,800
beginning but somewhere in the middle

868
00:35:52,800 --> 00:35:57,040
so here the solution could be to and if

869
00:35:57,040 --> 00:35:58,000
undefined

870
00:35:58,000 --> 00:36:01,200
this uh string and then define

871
00:36:01,200 --> 00:36:04,400
the specific parts one by one we are

872
00:36:04,400 --> 00:36:05,200
still

873
00:36:05,200 --> 00:36:07,839
testing this it's not in the script at

874
00:36:07,839 --> 00:36:08,640
the moment

875
00:36:08,640 --> 00:36:11,440
but there is one solution that uh you

876
00:36:11,440 --> 00:36:12,800
could use

877
00:36:12,800 --> 00:36:15,920
when you look at the defined strings

878
00:36:15,920 --> 00:36:16,640
window

879
00:36:16,640 --> 00:36:19,520
there is a possibility to see first of

880
00:36:19,520 --> 00:36:21,359
all how

881
00:36:21,359 --> 00:36:23,760
long those strings are and how many

882
00:36:23,760 --> 00:36:24,400
offcut

883
00:36:24,400 --> 00:36:26,640
references are there meaning how many

884
00:36:26,640 --> 00:36:28,640
references to the middle of the string

885
00:36:28,640 --> 00:36:31,280
so if you see something like this when

886
00:36:31,280 --> 00:36:33,200
there are many references to different

887
00:36:33,200 --> 00:36:34,480
parts of the string

888
00:36:34,480 --> 00:36:37,520
then you can assume that the that

889
00:36:37,520 --> 00:36:41,440
was a falsely defined data type

890
00:36:41,440 --> 00:36:43,839
and manually it's possible to undefine

891
00:36:43,839 --> 00:36:45,280
so

892
00:36:45,280 --> 00:36:48,720
it's also not something very difficult

893
00:36:48,720 --> 00:36:51,118
to do

894
00:36:51,280 --> 00:36:54,400
and another challenge was

895
00:36:54,400 --> 00:36:57,920
the and it still is the the compiler

896
00:36:57,920 --> 00:36:58,720
view

897
00:36:58,720 --> 00:37:02,640
so so even when we could uh

898
00:37:02,640 --> 00:37:04,800
define the strings and as you can see on

899
00:37:04,800 --> 00:37:06,880
the left side this is the listing view

900
00:37:06,880 --> 00:37:08,800
in the assembly it looks very nice there

901
00:37:08,800 --> 00:37:11,119
is the string that we wanted to

902
00:37:11,119 --> 00:37:14,960
uh create readme for decrypt txt

903
00:37:14,960 --> 00:37:18,240
so it's we can read it easily on the

904
00:37:18,240 --> 00:37:18,960
other hand

905
00:37:18,960 --> 00:37:22,079
in the decompile window there is

906
00:37:22,079 --> 00:37:24,960
a huge string because it can not really

907
00:37:24,960 --> 00:37:25,599
handle

908
00:37:25,599 --> 00:37:28,000
strings with fixed length so it will

909
00:37:28,000 --> 00:37:29,040
show the string

910
00:37:29,040 --> 00:37:32,079
until it finds a new character even

911
00:37:32,079 --> 00:37:34,560
if we define the string in a way that we

912
00:37:34,560 --> 00:37:36,000
explicitly said

913
00:37:36,000 --> 00:37:40,400
the length luckily uh it will be

914
00:37:40,400 --> 00:37:44,079
solved for the

915
00:37:44,079 --> 00:37:48,240
next release so

916
00:37:48,240 --> 00:37:51,520
if you use ghidra 9.2

917
00:37:51,520 --> 00:37:54,480
then you will be you will be seeing the

918
00:37:54,480 --> 00:37:55,440
correct

919
00:37:55,440 --> 00:37:58,400
string values

920
00:37:58,880 --> 00:38:02,040
and obviously there are many more uh

921
00:38:02,040 --> 00:38:06,800
possibilities and many other

922
00:38:06,800 --> 00:38:08,480
interesting information that we can

923
00:38:08,480 --> 00:38:09,920
extract from go

924
00:38:09,920 --> 00:38:13,680
binaries and we have many plans how to

925
00:38:13,680 --> 00:38:15,440
continue our work this was

926
00:38:15,440 --> 00:38:17,520
mainly an introduction into the quick

927
00:38:17,520 --> 00:38:19,520
wins how can we recover functions how

928
00:38:19,520 --> 00:38:21,839
can we recover strings

929
00:38:21,839 --> 00:38:23,920
first of all obviously we have to work

930
00:38:23,920 --> 00:38:26,240
on the string recovery script

931
00:38:26,240 --> 00:38:28,640
including further architectures and

932
00:38:28,640 --> 00:38:30,720
keeping up with anything new is coming

933
00:38:30,720 --> 00:38:33,280
up or any change is happening

934
00:38:33,280 --> 00:38:35,680
the other interesting thing is to to

935
00:38:35,680 --> 00:38:36,880
recover function

936
00:38:36,880 --> 00:38:39,680
arguments and return values as you have

937
00:38:39,680 --> 00:38:40,880
seen before

938
00:38:40,880 --> 00:38:44,079
before a function call these

939
00:38:44,079 --> 00:38:47,119
arguments are placed onto the stack

940
00:38:47,119 --> 00:38:50,240
as and the return values are

941
00:38:50,240 --> 00:38:52,400
also moved to the stack not registers as

942
00:38:52,400 --> 00:38:54,320
we would expect so for example

943
00:38:54,320 --> 00:38:56,640
we cannot look for the eax register for

944
00:38:56,640 --> 00:38:58,160
the return very rather we have to look

945
00:38:58,160 --> 00:39:00,240
for the stack and

946
00:39:00,240 --> 00:39:04,320
gidra has a hard time identifying these

947
00:39:04,320 --> 00:39:06,400
arguments and retail values return

948
00:39:06,400 --> 00:39:07,760
values correctly

949
00:39:07,760 --> 00:39:10,400
so for example on this slide you can see

950
00:39:10,400 --> 00:39:10,800
this

951
00:39:10,800 --> 00:39:15,040
addition function which expects integers

952
00:39:15,040 --> 00:39:18,240
and the result will be obviously also an

953
00:39:18,240 --> 00:39:19,599
integer

954
00:39:19,599 --> 00:39:23,119
and these uh types

955
00:39:23,119 --> 00:39:25,599
identifying these types uh gidra has a

956
00:39:25,599 --> 00:39:27,200
hard time

957
00:39:27,200 --> 00:39:30,880
but as part of our other planned and

958
00:39:30,880 --> 00:39:34,880
enhancement we we are aiming to create a

959
00:39:34,880 --> 00:39:37,200
script which can recover types because

960
00:39:37,200 --> 00:39:38,640
descriptions

961
00:39:38,640 --> 00:39:41,280
for the different goal types are

962
00:39:41,280 --> 00:39:42,880
available within the binary

963
00:39:42,880 --> 00:39:44,880
even in the stripped binary there are

964
00:39:44,880 --> 00:39:46,079
basic types that

965
00:39:46,079 --> 00:39:48,320
you all know string bull numeric types

966
00:39:48,320 --> 00:39:50,240
and also composite types but what

967
00:39:50,240 --> 00:39:53,040
is very interesting that you can find

968
00:39:53,040 --> 00:39:53,680
the

969
00:39:53,680 --> 00:39:57,839
developer defined types

970
00:39:57,839 --> 00:40:01,040
within the go binaries so for example

971
00:40:01,040 --> 00:40:02,160
here

972
00:40:02,160 --> 00:40:06,000
the main dot info struct this is also

973
00:40:06,000 --> 00:40:06,560
from the

974
00:40:06,560 --> 00:40:09,760
acrylics ransomware this structure

975
00:40:09,760 --> 00:40:12,000
consists of the rsc public public key

976
00:40:12,000 --> 00:40:13,200
and the readme string

977
00:40:13,200 --> 00:40:15,520
which is also very helpful when we would

978
00:40:15,520 --> 00:40:17,520
like to understand and doing the reverse

979
00:40:17,520 --> 00:40:18,960
engineering what kind of

980
00:40:18,960 --> 00:40:22,839
information what kind of types are there

981
00:40:22,839 --> 00:40:24,480
structures and this

982
00:40:24,480 --> 00:40:27,599
all can be found within the binary and

983
00:40:27,599 --> 00:40:30,960
this is one of our

984
00:40:30,960 --> 00:40:35,280
future goals to recover these types

985
00:40:35,599 --> 00:40:38,000
obviously we are not the first one who

986
00:40:38,000 --> 00:40:39,760
are working with

987
00:40:39,760 --> 00:40:42,640
reverse engineering golem binaries there

988
00:40:42,640 --> 00:40:44,079
are already a lot of

989
00:40:44,079 --> 00:40:47,440
work done especially with other tools

990
00:40:47,440 --> 00:40:50,160
like ida or radar2

991
00:40:50,160 --> 00:40:53,359
also there are scripts for gidra so feel

992
00:40:53,359 --> 00:40:54,319
free to

993
00:40:54,319 --> 00:40:56,160
look at these go through these and play

994
00:40:56,160 --> 00:40:58,240
with them as well

995
00:40:58,240 --> 00:41:01,599
and here you can file find the list of

996
00:41:01,599 --> 00:41:03,040
the files that we use during our

997
00:41:03,040 --> 00:41:05,599
research and our presentation

998
00:41:05,599 --> 00:41:08,960
we will upload these um hello world

999
00:41:08,960 --> 00:41:11,040
examples to our github repositories so

1000
00:41:11,040 --> 00:41:12,960
if you would like to follow

1001
00:41:12,960 --> 00:41:15,760
the different steps or experiment with

1002
00:41:15,760 --> 00:41:16,800
the

1003
00:41:16,800 --> 00:41:19,599
scripts then you can use the same files

1004
00:41:19,599 --> 00:41:21,839
and that can help in understanding

1005
00:41:21,839 --> 00:41:25,280
how this whole string recovery or

1006
00:41:25,280 --> 00:41:26,960
function name recovery is

1007
00:41:26,960 --> 00:41:30,560
built up and there are

1008
00:41:30,560 --> 00:41:33,839
many other researchers

1009
00:41:33,839 --> 00:41:36,480
creating very good presentations and

1010
00:41:36,480 --> 00:41:38,000
write-ups about

1011
00:41:38,000 --> 00:41:41,440
the go mother research topic just

1012
00:41:41,440 --> 00:41:44,960
one month ago on the radar conference

1013
00:41:44,960 --> 00:41:47,200
there was a very interesting talk about

1014
00:41:47,200 --> 00:41:48,240
how to analyze

1015
00:41:48,240 --> 00:41:51,200
go binaries with radar 2 so i recommend

1016
00:41:51,200 --> 00:41:52,160
to

1017
00:41:52,160 --> 00:41:56,240
read through these as well and

1018
00:41:56,240 --> 00:41:58,240
thank you very much for your attention i

1019
00:41:58,240 --> 00:41:59,760
hope you all

1020
00:41:59,760 --> 00:42:01,920
enjoyed our presentation and could learn

1021
00:42:01,920 --> 00:42:03,520
something something from you

1022
00:42:03,520 --> 00:42:06,640
please feel free to ask questions we

1023
00:42:06,640 --> 00:42:09,359
are also very happy if you contribute to

1024
00:42:09,359 --> 00:42:10,319
our research

1025
00:42:10,319 --> 00:42:12,800
you can find us on twitter also our

1026
00:42:12,800 --> 00:42:13,839
research group

1027
00:42:13,839 --> 00:42:16,720
and this is where this is our github

1028
00:42:16,720 --> 00:42:18,720
repository here where you can find all

1029
00:42:18,720 --> 00:42:19,920
the scripts and

1030
00:42:19,920 --> 00:42:22,480
the presentation and the materials that

1031
00:42:22,480 --> 00:42:23,040
we

1032
00:42:23,040 --> 00:42:25,839
used so enjoy the rest of the day and

1033
00:42:25,839 --> 00:42:27,280
the rest of the conference

1034
00:42:27,280 --> 00:42:31,839
thank you

