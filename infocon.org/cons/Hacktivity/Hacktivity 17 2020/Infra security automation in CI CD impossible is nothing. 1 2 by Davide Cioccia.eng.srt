1
00:00:01,599 --> 00:00:03,919
hello everyone uh thanks for joining our

2
00:00:03,919 --> 00:00:04,640
toll today

3
00:00:04,640 --> 00:00:06,960
called infra security automation in ci

4
00:00:06,960 --> 00:00:08,800
cd impossible is nothing

5
00:00:08,800 --> 00:00:10,320
and and that's because we will share

6
00:00:10,320 --> 00:00:12,880
with you our challenges our struggles

7
00:00:12,880 --> 00:00:16,160
uh mostly our struggles but also our

8
00:00:16,160 --> 00:00:19,760
success um i'm david chocha and together

9
00:00:19,760 --> 00:00:21,359
with me today that will be

10
00:00:21,359 --> 00:00:24,240
my colleague spiros mangliss uh i

11
00:00:24,240 --> 00:00:26,160
personally come from italy but i've been

12
00:00:26,160 --> 00:00:27,760
living in the netherlands for almost

13
00:00:27,760 --> 00:00:29,039
five years now

14
00:00:29,039 --> 00:00:32,238
and i hold the security engineer

15
00:00:32,238 --> 00:00:32,880
position

16
00:00:32,880 --> 00:00:36,320
in the upset team of ing netherlands

17
00:00:36,320 --> 00:00:39,440
um personally i enjoy speaking at

18
00:00:39,440 --> 00:00:40,399
conferences

19
00:00:40,399 --> 00:00:43,360
about different topics uh giving cyber

20
00:00:43,360 --> 00:00:45,360
security trainings together with some

21
00:00:45,360 --> 00:00:46,000
friends

22
00:00:46,000 --> 00:00:49,600
at the deaf deaf uh eu

23
00:00:49,600 --> 00:00:51,360
today we want to share with you the

24
00:00:51,360 --> 00:00:53,199
challenges we constantly face when it

25
00:00:53,199 --> 00:00:54,320
comes to

26
00:00:54,320 --> 00:00:56,719
making and keeping a complex environment

27
00:00:56,719 --> 00:00:57,360
like

28
00:00:57,360 --> 00:01:00,960
the ing one secure especially

29
00:01:00,960 --> 00:01:03,600
how we moved from manual infrastructure

30
00:01:03,600 --> 00:01:05,040
security testing to

31
00:01:05,040 --> 00:01:07,760
automated testing and why we needed to

32
00:01:07,760 --> 00:01:08,799
do that

33
00:01:08,799 --> 00:01:10,320
this talk will guide you through the

34
00:01:10,320 --> 00:01:12,000
process we went through

35
00:01:12,000 --> 00:01:14,240
to reach an advanced level of automation

36
00:01:14,240 --> 00:01:15,840
using a combination of well-known

37
00:01:15,840 --> 00:01:16,960
technologies

38
00:01:16,960 --> 00:01:19,439
and industry standards and we'll also

39
00:01:19,439 --> 00:01:21,040
give you an inside of the framework we

40
00:01:21,040 --> 00:01:22,240
created

41
00:01:22,240 --> 00:01:24,080
at the end we'll also present some of

42
00:01:24,080 --> 00:01:26,720
the next steps we have

43
00:01:26,720 --> 00:01:28,880
already on our roadmap not yet

44
00:01:28,880 --> 00:01:30,000
implemented but

45
00:01:30,000 --> 00:01:32,720
will come will come soon and of course

46
00:01:32,720 --> 00:01:35,040
we really hope to have a cool q a

47
00:01:35,040 --> 00:01:35,920
session

48
00:01:35,920 --> 00:01:38,479
at the end

49
00:01:39,280 --> 00:01:42,159
when it comes to creating an application

50
00:01:42,159 --> 00:01:43,759
delivering a service or

51
00:01:43,759 --> 00:01:46,880
putting in production a new idea testing

52
00:01:46,880 --> 00:01:50,720
is a fundamental part of that

53
00:01:50,720 --> 00:01:54,240
the program or component is

54
00:01:54,240 --> 00:01:56,640
developed on a developed development

55
00:01:56,640 --> 00:01:57,680
system like

56
00:01:57,680 --> 00:02:01,040
in this case a laptop of the um

57
00:02:01,040 --> 00:02:04,560
of the developer and once the developer

58
00:02:04,560 --> 00:02:06,479
is confident enough that the product is

59
00:02:06,479 --> 00:02:09,038
ready the product is copied to a test

60
00:02:09,038 --> 00:02:10,720
environment to verify

61
00:02:10,720 --> 00:02:13,200
if it works whether it works as expected

62
00:02:13,200 --> 00:02:14,080
or not

63
00:02:14,080 --> 00:02:16,440
and this environment is supposedly

64
00:02:16,440 --> 00:02:19,280
standardized and

65
00:02:19,280 --> 00:02:21,599
in close alignment with the target

66
00:02:21,599 --> 00:02:22,319
environment

67
00:02:22,319 --> 00:02:25,120
and is mainly used for functional

68
00:02:25,120 --> 00:02:26,400
testing

69
00:02:26,400 --> 00:02:29,120
if the tests are successful then the

70
00:02:29,120 --> 00:02:31,280
product is copied to an acceptance

71
00:02:31,280 --> 00:02:33,599
environment that should be the exact

72
00:02:33,599 --> 00:02:36,000
copy of the production environment

73
00:02:36,000 --> 00:02:38,239
this environment will be used to conduct

74
00:02:38,239 --> 00:02:40,560
integration tests security tests and

75
00:02:40,560 --> 00:02:44,239
compliance tests if all of the tests

76
00:02:44,239 --> 00:02:46,800
succeeded in acceptance then the product

77
00:02:46,800 --> 00:02:48,560
is deployed to a production environment

78
00:02:48,560 --> 00:02:51,440
making it available to all users of the

79
00:02:51,440 --> 00:02:52,560
system so

80
00:02:52,560 --> 00:02:54,480
as we can see from the slide this is a

81
00:02:54,480 --> 00:02:56,959
really simple detox environment

82
00:02:56,959 --> 00:03:01,280
um that we can use from one service but

83
00:03:01,280 --> 00:03:04,239
uh now what happens when your company

84
00:03:04,239 --> 00:03:05,360
has millions

85
00:03:05,360 --> 00:03:08,640
of of users your dedup environment grows

86
00:03:08,640 --> 00:03:10,400
exponentially in complexity

87
00:03:10,400 --> 00:03:12,239
it grows in interactions with other

88
00:03:12,239 --> 00:03:14,159
systems like load balancers

89
00:03:14,159 --> 00:03:16,879
enterprise service bus databases

90
00:03:16,879 --> 00:03:18,080
microservices and

91
00:03:18,080 --> 00:03:20,400
and more um you can imagine that

92
00:03:20,400 --> 00:03:22,159
checking that all of these systems

93
00:03:22,159 --> 00:03:23,840
uh are secure enough and nothing

94
00:03:23,840 --> 00:03:25,519
vulnerable is shipped to production will

95
00:03:25,519 --> 00:03:26,000
require

96
00:03:26,000 --> 00:03:28,799
will require us years right if we do it

97
00:03:28,799 --> 00:03:29,440
manually

98
00:03:29,440 --> 00:03:33,040
but also if we could do it in few days

99
00:03:33,040 --> 00:03:35,040
the environment will be already changed

100
00:03:35,040 --> 00:03:36,640
and the previous tests will be

101
00:03:36,640 --> 00:03:37,840
invalidated

102
00:03:37,840 --> 00:03:40,640
due to the high amount of the releases

103
00:03:40,640 --> 00:03:43,280
just think that our devops teams release

104
00:03:43,280 --> 00:03:44,799
multiple times a week

105
00:03:44,799 --> 00:03:48,319
and sometimes multiple times a day

106
00:03:48,319 --> 00:03:50,959
right but to better understand what we

107
00:03:50,959 --> 00:03:52,640
are targeting here

108
00:03:52,640 --> 00:03:55,120
and introduce some terminology that we

109
00:03:55,120 --> 00:03:56,000
are going to use

110
00:03:56,000 --> 00:03:57,840
later in the presentation we can

111
00:03:57,840 --> 00:03:59,040
simplify what's

112
00:03:59,040 --> 00:04:01,360
on each server using the the stack that

113
00:04:01,360 --> 00:04:02,959
you see in the slide

114
00:04:02,959 --> 00:04:05,040
we can right away identify two different

115
00:04:05,040 --> 00:04:06,000
blocks

116
00:04:06,000 --> 00:04:08,080
the application layer and the infra

117
00:04:08,080 --> 00:04:10,879
layer the application layer is made of

118
00:04:10,879 --> 00:04:13,280
the application running on the on the

119
00:04:13,280 --> 00:04:14,080
machine

120
00:04:14,080 --> 00:04:15,760
and of course the libraries that are

121
00:04:15,760 --> 00:04:17,759
used by the application this can be

122
00:04:17,759 --> 00:04:21,199
property libraries open source libraries

123
00:04:21,199 --> 00:04:23,759
and um the third layer will be

124
00:04:23,759 --> 00:04:26,320
represented by the system calls made to

125
00:04:26,320 --> 00:04:27,759
the underlying

126
00:04:27,759 --> 00:04:31,120
operating system the infra layer

127
00:04:31,120 --> 00:04:34,240
is then made of the os

128
00:04:34,240 --> 00:04:36,720
of course the binaries that can lean the

129
00:04:36,720 --> 00:04:37,360
machine

130
00:04:37,360 --> 00:04:39,280
for example binaries for monitoring

131
00:04:39,280 --> 00:04:41,040
accessing the machine and so on

132
00:04:41,040 --> 00:04:44,880
services ports files and and more

133
00:04:44,880 --> 00:04:47,919
and like everything we could

134
00:04:47,919 --> 00:04:51,120
uh identify in a physical server or a vm

135
00:04:51,120 --> 00:04:54,320
or um or a container

136
00:04:54,320 --> 00:04:57,280
so now that we know what's our target

137
00:04:57,280 --> 00:04:59,199
what we want to understand

138
00:04:59,199 --> 00:05:02,000
is how to assess the security of this

139
00:05:02,000 --> 00:05:03,199
stack in a ci cd

140
00:05:03,199 --> 00:05:06,400
environment if we think about every time

141
00:05:06,400 --> 00:05:09,440
a developer commits code we must provide

142
00:05:09,440 --> 00:05:10,000
a feedback

143
00:05:10,000 --> 00:05:13,199
as soon as possible thus we can embed

144
00:05:13,199 --> 00:05:15,919
like sas tools directly in their ide and

145
00:05:15,919 --> 00:05:17,039
use

146
00:05:17,039 --> 00:05:19,600
or use a centralized incremental sas

147
00:05:19,600 --> 00:05:20,080
tool

148
00:05:20,080 --> 00:05:22,560
to assess the deltas when we look at

149
00:05:22,560 --> 00:05:23,520
this stack

150
00:05:23,520 --> 00:05:25,360
we are definitely targeting the first

151
00:05:25,360 --> 00:05:27,680
layer so the application

152
00:05:27,680 --> 00:05:31,680
or or the api uh using for example ess

153
00:05:31,680 --> 00:05:32,560
tools

154
00:05:32,560 --> 00:05:36,000
why am i not including the second layer

155
00:05:36,000 --> 00:05:36,880
or

156
00:05:36,880 --> 00:05:39,759
completely the second layer that's

157
00:05:39,759 --> 00:05:40,320
because

158
00:05:40,320 --> 00:05:43,360
the sas tools must be complemented by

159
00:05:43,360 --> 00:05:47,120
other tools such as sca

160
00:05:47,120 --> 00:05:49,199
scanning tools so software composition

161
00:05:49,199 --> 00:05:51,199
analysis scanners that will allow us to

162
00:05:51,199 --> 00:05:52,320
make sure

163
00:05:52,320 --> 00:05:54,560
that no vulnerable open source library

164
00:05:54,560 --> 00:05:56,080
are shipped to production so the

165
00:05:56,080 --> 00:05:57,759
combination of both

166
00:05:57,759 --> 00:06:01,600
will make us safe if we consider the

167
00:06:01,600 --> 00:06:04,400
top two top two layers okay so we can

168
00:06:04,400 --> 00:06:05,120
say that

169
00:06:05,120 --> 00:06:07,039
in the build phase we got the first two

170
00:06:07,039 --> 00:06:09,199
layers kind of covered

171
00:06:09,199 --> 00:06:14,160
okay the test phase in the cicd pipeline

172
00:06:14,160 --> 00:06:17,280
is one of the latest phases and it's

173
00:06:17,280 --> 00:06:17,600
where

174
00:06:17,600 --> 00:06:20,960
tools like dust and east can be

175
00:06:20,960 --> 00:06:23,199
embedded to automate the security

176
00:06:23,199 --> 00:06:24,160
assessment

177
00:06:24,160 --> 00:06:26,240
of the three layers we identified in the

178
00:06:26,240 --> 00:06:27,919
stack so application

179
00:06:27,919 --> 00:06:30,800
so our code libraries that are used in

180
00:06:30,800 --> 00:06:31,600
our code

181
00:06:31,600 --> 00:06:34,400
and of course the the system the system

182
00:06:34,400 --> 00:06:36,720
calls

183
00:06:36,720 --> 00:06:39,759
in a ci environment um code is not

184
00:06:39,759 --> 00:06:41,440
shipped to production directly

185
00:06:41,440 --> 00:06:44,080
but a review phase is needed this can be

186
00:06:44,080 --> 00:06:45,199
a manual

187
00:06:45,199 --> 00:06:47,199
review and this is where we actually

188
00:06:47,199 --> 00:06:49,039
kind of stuck because

189
00:06:49,039 --> 00:06:52,080
also small deltas must be checked

190
00:06:52,080 --> 00:06:54,880
manually many times developers just ship

191
00:06:54,880 --> 00:06:57,039
to production very small

192
00:06:57,039 --> 00:07:00,080
uh code that sometimes there is no

193
00:07:00,080 --> 00:07:00,800
reason

194
00:07:00,800 --> 00:07:04,240
for checking it right but

195
00:07:04,240 --> 00:07:06,160
if we could rely on the tooling we have

196
00:07:06,160 --> 00:07:08,479
in place for the first three layers so

197
00:07:08,479 --> 00:07:10,319
the application the libraries and the

198
00:07:10,319 --> 00:07:11,360
system calls

199
00:07:11,360 --> 00:07:14,720
to overcome the manual pen test

200
00:07:14,720 --> 00:07:16,479
we definitely do not have much that

201
00:07:16,479 --> 00:07:17,759
could help in

202
00:07:17,759 --> 00:07:20,560
assessing just what changed in the

203
00:07:20,560 --> 00:07:23,759
underlying layer the infrastructure so

204
00:07:23,759 --> 00:07:26,240
using the tools in a ci cd pipeline like

205
00:07:26,240 --> 00:07:28,639
sas dust just

206
00:07:28,639 --> 00:07:32,000
sca scanning or other tools to assess

207
00:07:32,000 --> 00:07:34,080
the application we will definitely cover

208
00:07:34,080 --> 00:07:36,560
the first three layers but the problem

209
00:07:36,560 --> 00:07:37,360
comes

210
00:07:37,360 --> 00:07:40,720
um when infrastructure is in the picture

211
00:07:40,720 --> 00:07:44,319
and what we did so far is just

212
00:07:44,319 --> 00:07:46,240
taking a machine where the applications

213
00:07:46,240 --> 00:07:47,440
are running and doing

214
00:07:47,440 --> 00:07:49,840
a manual pen test manual infrastructure

215
00:07:49,840 --> 00:07:51,680
pen test on it

216
00:07:51,680 --> 00:07:54,720
this introduces a big overhand for

217
00:07:54,720 --> 00:07:57,039
testers for pen testers and especially

218
00:07:57,039 --> 00:07:57,759
also

219
00:07:57,759 --> 00:08:00,080
devops that want to ship their code in

220
00:08:00,080 --> 00:08:02,240
production as soon as possible

221
00:08:02,240 --> 00:08:05,759
they have a very huge block

222
00:08:05,759 --> 00:08:07,440
at the end of their pipeline there is

223
00:08:07,440 --> 00:08:09,280
the manual pen test

224
00:08:09,280 --> 00:08:12,879
performed by um pen testers

225
00:08:12,879 --> 00:08:16,800
so this over red brings us to our

226
00:08:16,800 --> 00:08:18,240
challenge actually

227
00:08:18,240 --> 00:08:21,680
and yeah this is how we

228
00:08:21,680 --> 00:08:24,720
from the security team felt when

229
00:08:24,720 --> 00:08:27,520
someone said okay what come on you you

230
00:08:27,520 --> 00:08:29,759
can actually do it manually well

231
00:08:29,759 --> 00:08:33,360
no we can't and i want to introduce

232
00:08:33,360 --> 00:08:35,679
here our challenge because maybe it's

233
00:08:35,679 --> 00:08:36,559
not clear

234
00:08:36,559 --> 00:08:39,519
so the problem we're facing here is that

235
00:08:39,519 --> 00:08:41,519
manual infrastructure security testing

236
00:08:41,519 --> 00:08:43,839
is a big overhead for devops

237
00:08:43,839 --> 00:08:46,480
it's a big overhead because there are

238
00:08:46,480 --> 00:08:47,440
like

239
00:08:47,440 --> 00:08:49,200
two weeks time where the application is

240
00:08:49,200 --> 00:08:50,720
stuck in acceptance

241
00:08:50,720 --> 00:08:53,360
in order to be checked and you know the

242
00:08:53,360 --> 00:08:55,680
number of people in the security team

243
00:08:55,680 --> 00:08:58,399
is like 100 times less than the number

244
00:08:58,399 --> 00:09:00,399
of people in a development team

245
00:09:00,399 --> 00:09:04,240
also the machines the virtual machines

246
00:09:04,240 --> 00:09:06,880
the images the docker images are only

247
00:09:06,880 --> 00:09:09,680
assessed on provisioning so that means

248
00:09:09,680 --> 00:09:12,399
that the security of these images of the

249
00:09:12,399 --> 00:09:13,600
infrastructure

250
00:09:13,600 --> 00:09:15,680
is only checked when the machine is

251
00:09:15,680 --> 00:09:17,279
actually provisioned to the team to the

252
00:09:17,279 --> 00:09:19,200
devops teams because

253
00:09:19,200 --> 00:09:22,560
in a java working the devops teams are

254
00:09:22,560 --> 00:09:23,839
actually responsible

255
00:09:23,839 --> 00:09:27,120
for the infrastructure as well so the

256
00:09:27,120 --> 00:09:28,320
infrastructure

257
00:09:28,320 --> 00:09:31,040
the security of the infrastructure is

258
00:09:31,040 --> 00:09:32,160
not checked

259
00:09:32,160 --> 00:09:34,480
incrementally okay so the changes that

260
00:09:34,480 --> 00:09:36,080
are made to the infrastructure also

261
00:09:36,080 --> 00:09:38,160
small changes

262
00:09:38,160 --> 00:09:41,440
are are not checked because complete

263
00:09:41,440 --> 00:09:42,560
assessment must be

264
00:09:42,560 --> 00:09:45,519
performed you can say like okay but you

265
00:09:45,519 --> 00:09:46,880
why don't you use

266
00:09:46,880 --> 00:09:49,519
vulnerability assessment tools and i can

267
00:09:49,519 --> 00:09:50,080
say that

268
00:09:50,080 --> 00:09:53,040
vulnerability assessment tools are used

269
00:09:53,040 --> 00:09:54,240
in these environments

270
00:09:54,240 --> 00:09:57,680
mainly for compliance testing mainly

271
00:09:57,680 --> 00:10:01,360
uh like once a month scanning because

272
00:10:01,360 --> 00:10:03,920
uh vulnerabilities will not understand

273
00:10:03,920 --> 00:10:06,399
the changes and we scan the old machine

274
00:10:06,399 --> 00:10:09,680
every time over and over and also i mean

275
00:10:09,680 --> 00:10:12,880
having like 2000 applications more or

276
00:10:12,880 --> 00:10:13,519
less

277
00:10:13,519 --> 00:10:16,160
that means if we remember the dtop

278
00:10:16,160 --> 00:10:17,200
environment that i've

279
00:10:17,200 --> 00:10:19,360
shown before in the slides that means

280
00:10:19,360 --> 00:10:20,880
that we have

281
00:10:20,880 --> 00:10:24,000
20 000 machines at least and that

282
00:10:24,000 --> 00:10:27,279
will bring us to the uh death of uh

283
00:10:27,279 --> 00:10:30,320
of our pen testers yeah so the question

284
00:10:30,320 --> 00:10:30,720
is

285
00:10:30,720 --> 00:10:33,040
and the question that brought us to to

286
00:10:33,040 --> 00:10:34,720
this project is

287
00:10:34,720 --> 00:10:36,959
how can we check the security of the

288
00:10:36,959 --> 00:10:37,760
deltas

289
00:10:37,760 --> 00:10:41,120
on infra level every time a devops

290
00:10:41,120 --> 00:10:44,320
commits code and ships it to

291
00:10:44,320 --> 00:10:47,040
acceptance for testing so how can we

292
00:10:47,040 --> 00:10:47,680
make the

293
00:10:47,680 --> 00:10:50,800
infrastructure testing a kind of

294
00:10:50,800 --> 00:10:54,160
an integration test as part of the ci cd

295
00:10:54,160 --> 00:10:57,920
pipeline well i will pass the mic to my

296
00:10:57,920 --> 00:10:59,839
colleagues peers that will explain you

297
00:10:59,839 --> 00:11:01,760
everything about the technical details

298
00:11:01,760 --> 00:11:03,600
and the framework that we used to make

299
00:11:03,600 --> 00:11:07,600
this happen

