1
00:00:01,760 --> 00:00:03,120
hello all

2
00:00:03,120 --> 00:00:05,120
how are you hope you guys are doing

3
00:00:05,120 --> 00:00:07,040
great

4
00:00:07,040 --> 00:00:09,440
my name is handy yuzu i'm here to talk

5
00:00:09,440 --> 00:00:11,360
about first cube

6
00:00:11,360 --> 00:00:13,120
it's a neat little tool that i recently

7
00:00:13,120 --> 00:00:17,440
wrote helped with my fuzzing needs

8
00:00:17,440 --> 00:00:20,240
i am a security engineer and a developer

9
00:00:20,240 --> 00:00:20,960
and allow

10
00:00:20,960 --> 00:00:23,439
research in mobile especially android

11
00:00:23,439 --> 00:00:25,119
and ios

12
00:00:25,119 --> 00:00:28,720
i also do some research in linux and web

13
00:00:28,720 --> 00:00:31,840
and location replaced ctfs nowadays i

14
00:00:31,840 --> 00:00:35,280
play a lot more of cs go

15
00:00:35,840 --> 00:00:37,920
let's talk about distributed fuzzing

16
00:00:37,920 --> 00:00:40,640
with k8

17
00:00:41,440 --> 00:00:45,120
and to start let's start with what's

18
00:00:45,120 --> 00:00:47,360
fuzzing right so we have to understand

19
00:00:47,360 --> 00:00:49,120
the basics

20
00:00:49,120 --> 00:00:51,920
fuzzing is an automated software testing

21
00:00:51,920 --> 00:00:53,440
technique

22
00:00:53,440 --> 00:00:55,920
where we provide invalid input to a

23
00:00:55,920 --> 00:00:56,640
program

24
00:00:56,640 --> 00:01:00,079
and monitor it for crashes so

25
00:01:00,079 --> 00:01:03,280
why do we do this we write

26
00:01:03,280 --> 00:01:06,159
a lot of today's programs in memory

27
00:01:06,159 --> 00:01:07,520
unsafe languages

28
00:01:07,520 --> 00:01:11,520
like c or c and

29
00:01:11,520 --> 00:01:14,720
having and memory corruption in any of

30
00:01:14,720 --> 00:01:15,920
these programs

31
00:01:15,920 --> 00:01:20,240
can result in code execution or

32
00:01:20,240 --> 00:01:23,200
total failure of the program itself

33
00:01:23,200 --> 00:01:23,920
which can

34
00:01:23,920 --> 00:01:27,439
lead to denial of services by constantly

35
00:01:27,439 --> 00:01:29,840
crashing the program

36
00:01:29,840 --> 00:01:32,400
these are only some of the few things

37
00:01:32,400 --> 00:01:33,360
that you could do

38
00:01:33,360 --> 00:01:36,000
with memory corruption there can be a

39
00:01:36,000 --> 00:01:37,439
lot more serious damage

40
00:01:37,439 --> 00:01:40,320
done depending on the context in which

41
00:01:40,320 --> 00:01:41,040
the program

42
00:01:41,040 --> 00:01:45,119
is used so it's important to fast

43
00:01:45,119 --> 00:01:48,320
the program that you write especially if

44
00:01:48,320 --> 00:01:49,040
you are writing

45
00:01:49,040 --> 00:01:52,320
it in a memory unsafe language

46
00:01:52,320 --> 00:01:54,320
it's not just buffer overflows but

47
00:01:54,320 --> 00:01:57,600
underflows integer overflows underflows

48
00:01:57,600 --> 00:02:00,880
like off by one there is a lot

49
00:02:00,880 --> 00:02:04,719
that can go wrong right here

50
00:02:04,719 --> 00:02:08,080
so we use tools like afl

51
00:02:08,080 --> 00:02:10,878
which is the american fuzzy knob and

52
00:02:10,878 --> 00:02:12,400
live further

53
00:02:12,400 --> 00:02:15,920
to first the programs these are well

54
00:02:15,920 --> 00:02:17,120
known tools

55
00:02:17,120 --> 00:02:20,000
and they we have great write-ups if you

56
00:02:20,000 --> 00:02:21,680
want to get started

57
00:02:21,680 --> 00:02:25,200
i use afl for fuzzing binaries

58
00:02:25,200 --> 00:02:27,120
as you can see in this picture which is

59
00:02:27,120 --> 00:02:29,520
taken from the afl blog

60
00:02:29,520 --> 00:02:32,959
it's fuzzing read png file

61
00:02:32,959 --> 00:02:36,319
and this is an executable which which

62
00:02:36,319 --> 00:02:39,440
reads a png file from the desk

63
00:02:39,440 --> 00:02:42,800
and it it basically mutates

64
00:02:42,800 --> 00:02:45,840
the png file and

65
00:02:45,840 --> 00:02:49,120
ch and it checks if this binary

66
00:02:49,120 --> 00:02:52,160
which is the read png file crashes

67
00:02:52,160 --> 00:02:55,360
that is what is what it is doing so

68
00:02:55,360 --> 00:02:57,519
we as you can see we have one unique

69
00:02:57,519 --> 00:02:58,480
hand

70
00:02:58,480 --> 00:03:02,720
and it has explored 195 unique paths

71
00:03:02,720 --> 00:03:06,080
so what is

72
00:03:06,159 --> 00:03:09,280
total paths of 195 right so

73
00:03:09,280 --> 00:03:12,159
think of it as basic blocks when you

74
00:03:12,159 --> 00:03:13,519
provide

75
00:03:13,519 --> 00:03:16,959
an input to a program it goes through a

76
00:03:16,959 --> 00:03:20,640
certain steps right so if it's a file

77
00:03:20,640 --> 00:03:21,360
parser

78
00:03:21,360 --> 00:03:23,760
in this case it will try to read

79
00:03:23,760 --> 00:03:25,040
different

80
00:03:25,040 --> 00:03:28,000
parts of the byte string and try to pass

81
00:03:28,000 --> 00:03:28,319
it

82
00:03:28,319 --> 00:03:32,799
in a specific way and there's a lot

83
00:03:32,799 --> 00:03:35,680
that that can go wrong in that process

84
00:03:35,680 --> 00:03:36,879
so

85
00:03:36,879 --> 00:03:38,959
what we are trying to do with afl is

86
00:03:38,959 --> 00:03:41,519
that if you have the source code

87
00:03:41,519 --> 00:03:44,239
we compile it with the afl compiler

88
00:03:44,239 --> 00:03:44,959
which adds

89
00:03:44,959 --> 00:03:47,280
instrumentation into the binary that it

90
00:03:47,280 --> 00:03:48,560
produces

91
00:03:48,560 --> 00:03:51,840
this helps the father in

92
00:03:51,840 --> 00:03:54,640
getting some feedback while we fuss

93
00:03:54,640 --> 00:03:56,480
rather than dumb fussing

94
00:03:56,480 --> 00:04:00,000
afl uses this feedback to improve its

95
00:04:00,000 --> 00:04:03,280
input so that it can explore more

96
00:04:03,280 --> 00:04:04,400
branches

97
00:04:04,400 --> 00:04:07,760
that's a very high level and explanation

98
00:04:07,760 --> 00:04:10,640
of how afl works

99
00:04:10,640 --> 00:04:15,040
a lot can be said about lymphatic

100
00:04:15,040 --> 00:04:18,079
the same feedback is in here but

101
00:04:18,079 --> 00:04:22,240
lymphocyte does something very different

102
00:04:22,240 --> 00:04:25,360
if you want to fast a library a specific

103
00:04:25,360 --> 00:04:27,040
function in the library

104
00:04:27,040 --> 00:04:30,000
i would go for a little further the

105
00:04:30,000 --> 00:04:30,800
reason why

106
00:04:30,800 --> 00:04:33,600
is that it is really fast because it is

107
00:04:33,600 --> 00:04:34,000
in

108
00:04:34,000 --> 00:04:36,880
process execution rather than executing

109
00:04:36,880 --> 00:04:39,199
the whole program or the binary

110
00:04:39,199 --> 00:04:41,759
it executes the same function over and

111
00:04:41,759 --> 00:04:42,240
over

112
00:04:42,240 --> 00:04:45,280
with arbitrary input this is a lot more

113
00:04:45,280 --> 00:04:46,320
faster

114
00:04:46,320 --> 00:04:48,800
and in this picture you can see that

115
00:04:48,800 --> 00:04:49,840
that is what is

116
00:04:49,840 --> 00:04:53,440
going on it uses various mutation

117
00:04:53,440 --> 00:04:54,479
strategies

118
00:04:54,479 --> 00:04:57,919
and it uses that feedback to guide

119
00:04:57,919 --> 00:05:00,639
its buzzing

120
00:05:01,759 --> 00:05:04,240
so when you talk about distributed

121
00:05:04,240 --> 00:05:05,199
fuzzing

122
00:05:05,199 --> 00:05:08,800
we have to understand that there is

123
00:05:08,800 --> 00:05:12,400
storage part to it and ceph is the

124
00:05:12,400 --> 00:05:13,759
storage platform

125
00:05:13,759 --> 00:05:17,039
that we use for storing

126
00:05:17,039 --> 00:05:20,160
the crash results the fussing results

127
00:05:20,160 --> 00:05:22,800
and synchronize them between all the

128
00:05:22,800 --> 00:05:23,680
containers

129
00:05:23,680 --> 00:05:28,000
that we would use in distributed fuzzing

130
00:05:28,000 --> 00:05:31,280
and just like that we need containers

131
00:05:31,280 --> 00:05:31,840
right

132
00:05:31,840 --> 00:05:34,320
and kubernetes is an amazing

133
00:05:34,320 --> 00:05:35,360
architecture

134
00:05:35,360 --> 00:05:39,199
orchestration tool that one could use

135
00:05:39,199 --> 00:05:42,160
to manage all these containers as we

136
00:05:42,160 --> 00:05:44,240
scale the number of containers

137
00:05:44,240 --> 00:05:47,520
it becomes very difficult to manage them

138
00:05:47,520 --> 00:05:50,800
one by one so what we could do is

139
00:05:50,800 --> 00:05:54,000
leverage kubernetes to basically

140
00:05:54,000 --> 00:05:57,280
do the management for us or make it just

141
00:05:57,280 --> 00:06:01,039
easier this is

142
00:06:01,039 --> 00:06:05,039
what the yaml spec looks like to deploy

143
00:06:05,039 --> 00:06:09,280
a limb surfer into our cluster so

144
00:06:09,280 --> 00:06:11,680
i want to go back and explain this a

145
00:06:11,680 --> 00:06:13,360
little further

146
00:06:13,360 --> 00:06:16,960
so we have a lot of

147
00:06:16,960 --> 00:06:20,000
containers and they are ready

148
00:06:20,000 --> 00:06:23,199
to do the workload that we gave it

149
00:06:23,199 --> 00:06:27,039
the the way we gave our containers

150
00:06:27,039 --> 00:06:30,080
some workload is through deployments

151
00:06:30,080 --> 00:06:33,680
so in this case our deployment

152
00:06:33,680 --> 00:06:36,880
is a live fuzzer deployment and this is

153
00:06:36,880 --> 00:06:39,280
basically what you will have to write

154
00:06:39,280 --> 00:06:40,880
you don't actually you don't have to

155
00:06:40,880 --> 00:06:42,880
write it you just have to modify

156
00:06:42,880 --> 00:06:46,080
bits and pieces over here to deploy your

157
00:06:46,080 --> 00:06:47,039
own father

158
00:06:47,039 --> 00:06:50,319
you you are not limited by lip fuzzer

159
00:06:50,319 --> 00:06:53,840
or afl it's very simple so let me go

160
00:06:53,840 --> 00:06:55,520
over that

161
00:06:55,520 --> 00:06:59,039
in the first two lines it's basically

162
00:06:59,039 --> 00:07:01,520
standard kubernetes you can just copy

163
00:07:01,520 --> 00:07:02,560
paste that

164
00:07:02,560 --> 00:07:04,720
the name indicates what the name of the

165
00:07:04,720 --> 00:07:06,639
deployment is

166
00:07:06,639 --> 00:07:10,240
labels help you identify things

167
00:07:10,240 --> 00:07:14,319
and the important bit is towards

168
00:07:14,319 --> 00:07:17,680
the spec container section

169
00:07:17,680 --> 00:07:20,479
over there i am referencing an image

170
00:07:20,479 --> 00:07:21,520
it's an image

171
00:07:21,520 --> 00:07:25,520
hosted in darker hub where you can

172
00:07:25,520 --> 00:07:28,400
host images for free and my container

173
00:07:28,400 --> 00:07:29,120
images

174
00:07:29,120 --> 00:07:32,240
live there so when you deploy this yaml

175
00:07:32,240 --> 00:07:32,880
spec

176
00:07:32,880 --> 00:07:35,120
for the first time it will pull the

177
00:07:35,120 --> 00:07:36,000
image

178
00:07:36,000 --> 00:07:39,280
and you can use that image

179
00:07:39,280 --> 00:07:42,479
to start fuzzing immediately because

180
00:07:42,479 --> 00:07:43,520
that image

181
00:07:43,520 --> 00:07:46,879
has afl and lymphos are built in and

182
00:07:46,879 --> 00:07:50,800
it has i have already compiled live png

183
00:07:50,800 --> 00:07:54,479
so that you can get fuzzing immediately

184
00:07:54,479 --> 00:07:56,800
if you if you want to add your own

185
00:07:56,800 --> 00:07:57,680
programs to it

186
00:07:57,680 --> 00:08:00,080
you're more than welcome to do so just

187
00:08:00,080 --> 00:08:01,759
pull the container image

188
00:08:01,759 --> 00:08:04,960
it has all the tools you need and add

189
00:08:04,960 --> 00:08:07,520
the program that you want to first into

190
00:08:07,520 --> 00:08:08,720
the container

191
00:08:08,720 --> 00:08:10,879
you can upload it or you can just

192
00:08:10,879 --> 00:08:11,759
reference this

193
00:08:11,759 --> 00:08:15,360
image locally in your deployment

194
00:08:15,360 --> 00:08:17,840
the next line is the command line

195
00:08:17,840 --> 00:08:18,879
command

196
00:08:18,879 --> 00:08:22,080
so that is the basically the path

197
00:08:22,080 --> 00:08:25,520
to your fuzzer because

198
00:08:25,520 --> 00:08:28,560
we we start this as a container the

199
00:08:28,560 --> 00:08:30,400
container need to know

200
00:08:30,400 --> 00:08:33,919
what program it will execute so that is

201
00:08:33,919 --> 00:08:35,599
basically what it is

202
00:08:35,599 --> 00:08:37,919
and arguments basically means the

203
00:08:37,919 --> 00:08:40,719
arguments to the fuzzer

204
00:08:40,719 --> 00:08:43,839
we need its privileged context

205
00:08:43,839 --> 00:08:47,600
for this program because instrumenting

206
00:08:47,600 --> 00:08:51,200
and basically monitoring for crashes

207
00:08:51,200 --> 00:08:54,240
requires monitoring a process

208
00:08:54,240 --> 00:08:57,680
and that look requires privilege

209
00:08:57,680 --> 00:09:00,720
the volume mount basically means the

210
00:09:00,720 --> 00:09:01,920
shared

211
00:09:01,920 --> 00:09:04,959
folder that is being used

212
00:09:04,959 --> 00:09:08,399
in all the pods so if if a program

213
00:09:08,399 --> 00:09:12,160
writes to sync the ir it is available

214
00:09:12,160 --> 00:09:16,080
in all the other parts almost instantly

215
00:09:16,080 --> 00:09:19,600
and that is through self that is why

216
00:09:19,600 --> 00:09:23,279
we have a consistent volume plane

217
00:09:23,279 --> 00:09:26,720
called cfs and

218
00:09:26,720 --> 00:09:28,399
you just you don't have to change

219
00:09:28,399 --> 00:09:29,920
anything over there

220
00:09:29,920 --> 00:09:34,080
just have your puzzle use sing the ir

221
00:09:34,080 --> 00:09:37,519
which is in the root directory

222
00:09:37,519 --> 00:09:40,720
right this is an example of a debug

223
00:09:40,720 --> 00:09:43,680
pod that you could deploy which could

224
00:09:43,680 --> 00:09:44,720
which will give you

225
00:09:44,720 --> 00:09:47,440
a shell as you can see in the command

226
00:09:47,440 --> 00:09:48,000
section

227
00:09:48,000 --> 00:09:51,600
i'm executing bash so using that

228
00:09:51,600 --> 00:09:54,800
you can get a shell and inspect

229
00:09:54,800 --> 00:09:57,200
and debug any problem problems if you

230
00:09:57,200 --> 00:09:58,240
have

231
00:09:58,240 --> 00:10:01,839
any all right so we'll put this all

232
00:10:01,839 --> 00:10:02,720
together

233
00:10:02,720 --> 00:10:06,480
and we have first cube

234
00:10:06,480 --> 00:10:09,519
to iterate we use docker

235
00:10:09,519 --> 00:10:12,560
we use afl we use lyfaser use set for

236
00:10:12,560 --> 00:10:14,399
storage and we use case for

237
00:10:14,399 --> 00:10:16,160
orchestration

238
00:10:16,160 --> 00:10:17,920
if you want to monitor your first

239
00:10:17,920 --> 00:10:19,279
fuzzing workloads

240
00:10:19,279 --> 00:10:20,480
you could use something like

241
00:10:20,480 --> 00:10:22,320
elasticsearch or

242
00:10:22,320 --> 00:10:25,360
metric beats or kibana these are ready

243
00:10:25,360 --> 00:10:26,880
to go tools

244
00:10:26,880 --> 00:10:29,839
available to the kubernetes ecosystem

245
00:10:29,839 --> 00:10:31,200
and that is what

246
00:10:31,200 --> 00:10:34,160
makes this really great so you can use

247
00:10:34,160 --> 00:10:35,120
any tool

248
00:10:35,120 --> 00:10:38,240
that is available to kubernetes and

249
00:10:38,240 --> 00:10:42,399
make sense just basically make this work

250
00:10:42,399 --> 00:10:47,839
in however fashion you like

251
00:10:48,000 --> 00:10:51,600
all right let's look at some demos

252
00:10:51,600 --> 00:10:53,839
right

253
00:10:59,440 --> 00:11:02,640
okay so you can grab the program from

254
00:11:02,640 --> 00:11:06,000
that github url and it's very well

255
00:11:06,000 --> 00:11:08,000
documented

256
00:11:08,000 --> 00:11:11,120
i i have example commands

257
00:11:11,120 --> 00:11:14,800
that you can basically copy paste and

258
00:11:14,800 --> 00:11:18,720
get running so that is what i will be

259
00:11:18,720 --> 00:11:20,000
doing right now

260
00:11:20,000 --> 00:11:23,120
i'm gonna keep clone the repo

261
00:11:23,120 --> 00:11:26,160
you could follow along if you like

262
00:11:26,160 --> 00:11:29,519
it takes a while and

263
00:11:29,519 --> 00:11:33,040
once you have it you have all the pieces

264
00:11:33,040 --> 00:11:35,760
necessary to go

265
00:11:35,760 --> 00:11:39,200
it's a bunch of yaml files

266
00:11:39,200 --> 00:11:42,560
to use the mini to use this you need

267
00:11:42,560 --> 00:11:45,680
a kubernetes cluster and the easiest way

268
00:11:45,680 --> 00:11:48,640
to do this is to use mini cube if you

269
00:11:48,640 --> 00:11:49,440
are trying this

270
00:11:49,440 --> 00:11:51,760
in your own laptop that is what you

271
00:11:51,760 --> 00:11:52,880
would use

272
00:11:52,880 --> 00:11:56,320
it is available for windows and mac

273
00:11:56,320 --> 00:12:01,200
and linux if you are using aws or gcp

274
00:12:01,200 --> 00:12:03,600
feel free to use the kubernetes

275
00:12:03,600 --> 00:12:04,320
environment

276
00:12:04,320 --> 00:12:08,639
they offer this will work just fine

277
00:12:08,639 --> 00:12:11,920
kubectl is the client's cli

278
00:12:11,920 --> 00:12:14,240
that you would use to talk to the

279
00:12:14,240 --> 00:12:15,120
kubernetes

280
00:12:15,120 --> 00:12:19,360
api you can use the commands

281
00:12:19,360 --> 00:12:22,560
that you see here to view the status of

282
00:12:22,560 --> 00:12:24,079
the pods

283
00:12:24,079 --> 00:12:27,440
and deploy resources into your

284
00:12:27,440 --> 00:12:29,920
kubernetes cluster

285
00:12:29,920 --> 00:12:32,160
as you can see that is what is happening

286
00:12:32,160 --> 00:12:34,560
right now

287
00:12:35,200 --> 00:12:38,399
this might take a while it depends on

288
00:12:38,399 --> 00:12:40,399
where you are deploying it if it's a

289
00:12:40,399 --> 00:12:42,320
server it will be really fast

290
00:12:42,320 --> 00:12:45,600
if it's your macbook

291
00:12:45,600 --> 00:12:48,959
or your laptop it just depends on

292
00:12:48,959 --> 00:12:52,079
the processing power

293
00:12:52,079 --> 00:12:55,360
now that we have the deployment done

294
00:12:55,360 --> 00:12:58,160
you can see that we have a bunch of pods

295
00:12:58,160 --> 00:12:58,800
which are

296
00:12:58,800 --> 00:13:02,560
containers in our kubernetes cluster

297
00:13:02,560 --> 00:13:05,680
we just deployed dashboard the

298
00:13:05,680 --> 00:13:07,040
kubernetes dashboard

299
00:13:07,040 --> 00:13:10,240
which is a ui using which you can look

300
00:13:10,240 --> 00:13:10,720
and

301
00:13:10,720 --> 00:13:12,560
look at various resources in your

302
00:13:12,560 --> 00:13:15,040
cluster it is extremely helpful

303
00:13:15,040 --> 00:13:18,480
to debug and visualize things as you can

304
00:13:18,480 --> 00:13:18,959
see

305
00:13:18,959 --> 00:13:23,279
i just deployed afl with one click

306
00:13:23,279 --> 00:13:27,200
with one command and you can scale them

307
00:13:27,200 --> 00:13:30,639
you can make changes

308
00:13:30,639 --> 00:13:33,760
to this deployment from the ui or

309
00:13:33,760 --> 00:13:36,959
using the command line you can see that

310
00:13:36,959 --> 00:13:39,040
the command line arguments

311
00:13:39,040 --> 00:13:44,240
for the afl board is listed right there

312
00:13:44,240 --> 00:13:47,199
afl uses a master slave architecture so

313
00:13:47,199 --> 00:13:48,000
you would have one

314
00:13:48,000 --> 00:13:50,639
master and a bunch of slaves and you

315
00:13:50,639 --> 00:13:51,600
would

316
00:13:51,600 --> 00:13:56,079
scale the slaves the number of flows

317
00:13:56,079 --> 00:13:59,760
and it's so easy to do that from the ui

318
00:13:59,760 --> 00:14:03,279
or from the command line as you can see

319
00:14:03,279 --> 00:14:04,800
we have two files

320
00:14:04,800 --> 00:14:08,000
running right now and you can

321
00:14:08,000 --> 00:14:11,279
basically do an ls on the sync directory

322
00:14:11,279 --> 00:14:14,959
to see what's in there it basically

323
00:14:14,959 --> 00:14:17,839
will record all the crashes and the

324
00:14:17,839 --> 00:14:19,360
faster status

325
00:14:19,360 --> 00:14:22,000
and this can be synchronized to other

326
00:14:22,000 --> 00:14:23,199
fossils

327
00:14:23,199 --> 00:14:26,079
so that they can use this information

328
00:14:26,079 --> 00:14:27,040
and

329
00:14:27,040 --> 00:14:30,399
make furthing much more efficient

330
00:14:30,399 --> 00:14:33,839
this is an amazing use and

331
00:14:33,839 --> 00:14:38,560
just make scaling sensible

332
00:14:39,120 --> 00:14:42,959
as you can see now we have three pods

333
00:14:42,959 --> 00:14:46,079
fuzzing the program

334
00:14:46,079 --> 00:14:49,600
using afl and you can visualize that

335
00:14:49,600 --> 00:14:53,199
using the afl whatsapp command

336
00:14:53,199 --> 00:14:55,839
as you can see right there we have three

337
00:14:55,839 --> 00:14:57,360
vessels alive

338
00:14:57,360 --> 00:15:01,199
and it's working great you can look into

339
00:15:01,199 --> 00:15:03,279
the contents of the directory

340
00:15:03,279 --> 00:15:06,399
which will contain crashes and status

341
00:15:06,399 --> 00:15:10,240
information of the first plugin

342
00:15:10,480 --> 00:15:13,920
now we are deploying live fuzzer

343
00:15:13,920 --> 00:15:17,040
it it just took a second but we have the

344
00:15:17,040 --> 00:15:19,920
facility right there

345
00:15:20,160 --> 00:15:23,040
and we can scale this fuzzer just like

346
00:15:23,040 --> 00:15:24,839
we scaled

347
00:15:24,839 --> 00:15:28,720
afl it's it's really simple

348
00:15:28,720 --> 00:15:32,000
and we can look into the command

349
00:15:32,000 --> 00:15:34,959
with which it has started right there

350
00:15:34,959 --> 00:15:37,759
which is the live png fuzzer

351
00:15:37,759 --> 00:15:40,480
and it will also use the sync directory

352
00:15:40,480 --> 00:15:43,519
for synchronization

353
00:15:43,600 --> 00:15:47,040
so let's look into that

354
00:15:48,079 --> 00:15:50,639
so here we can see the logs from the

355
00:15:50,639 --> 00:15:51,680
fuzzer

356
00:15:51,680 --> 00:15:55,199
and you can see the splatter is deployed

357
00:15:55,199 --> 00:15:59,600
by the faster to find new parts

358
00:15:59,600 --> 00:16:03,759
so just by clicking through this ui

359
00:16:03,759 --> 00:16:06,800
you are able to do a lot now

360
00:16:06,800 --> 00:16:09,839
using that button you can accept into

361
00:16:09,839 --> 00:16:10,800
that

362
00:16:10,800 --> 00:16:14,480
container and you can see the data

363
00:16:14,480 --> 00:16:17,279
that is being produced by the three

364
00:16:17,279 --> 00:16:18,240
points

365
00:16:18,240 --> 00:16:22,160
which are fuzzing using

366
00:16:23,120 --> 00:16:26,480
yes command will tell you the command

367
00:16:26,480 --> 00:16:30,240
that is being run right now

368
00:16:31,600 --> 00:16:33,839
now let's look into how we can scale

369
00:16:33,839 --> 00:16:34,959
lake russell

370
00:16:34,959 --> 00:16:37,839
it is just like you would scale anything

371
00:16:37,839 --> 00:16:39,839
else on kubernetes

372
00:16:39,839 --> 00:16:42,959
you click on the scale icon and then

373
00:16:42,959 --> 00:16:45,680
you given the number of pods that you

374
00:16:45,680 --> 00:16:46,639
would like

375
00:16:46,639 --> 00:16:50,560
and it takes a while but as you can see

376
00:16:50,560 --> 00:16:54,160
you have it running this ui

377
00:16:54,160 --> 00:16:56,959
will show you the cv usage and the

378
00:16:56,959 --> 00:16:58,000
memory usage

379
00:16:58,000 --> 00:17:01,279
of the fuzzer all the fussing results

380
00:17:01,279 --> 00:17:04,319
are stored in the sync directory

381
00:17:04,319 --> 00:17:08,000
and you can take a look at it

382
00:17:08,000 --> 00:17:11,039
using any of these spots

383
00:17:11,039 --> 00:17:14,799
or you could just deploy

384
00:17:15,199 --> 00:17:19,119
a debug pod to it so that was

385
00:17:19,119 --> 00:17:22,559
the demo we have this documented

386
00:17:22,559 --> 00:17:26,079
in github if you have any issues

387
00:17:26,079 --> 00:17:32,960
feel free to reach out so that brings us

388
00:17:32,960 --> 00:17:34,960
to the end of the presentation

389
00:17:34,960 --> 00:17:37,840
if you have any questions feel free to

390
00:17:37,840 --> 00:17:38,480
ask

391
00:17:38,480 --> 00:17:42,080
us ask me any of those on twitter

392
00:17:42,080 --> 00:17:47,120
or gita thank you so much for your time

393
00:17:47,120 --> 00:17:51,120
and i'll take any questions right now

394
00:17:51,120 --> 00:17:58,080
thank you

