1
00:00:08,160 --> 00:00:08,559
hi

2
00:00:08,559 --> 00:00:10,960
welcome to activity conf we're going to

3
00:00:10,960 --> 00:00:11,840
talk about

4
00:00:11,840 --> 00:00:15,040
service mess to service mesh a journey

5
00:00:15,040 --> 00:00:16,640
around service meshes

6
00:00:16,640 --> 00:00:19,359
and in particular looking at istio and

7
00:00:19,359 --> 00:00:21,359
linker d we'll see a live demo of each

8
00:00:21,359 --> 00:00:22,160
of those

9
00:00:22,160 --> 00:00:24,960
let's dive in

10
00:00:25,840 --> 00:00:27,359
so here's the part where i tell you i'm

11
00:00:27,359 --> 00:00:28,960
definitely going to post my slides on my

12
00:00:28,960 --> 00:00:30,000
site tonight

13
00:00:30,000 --> 00:00:32,320
you're gonna go look on my site tonight

14
00:00:32,320 --> 00:00:33,680
tomorrow

15
00:00:33,680 --> 00:00:37,040
next week next month in about three

16
00:00:37,040 --> 00:00:38,399
months you're gonna get tired of waiting

17
00:00:38,399 --> 00:00:39,760
you're gonna email me

18
00:00:39,760 --> 00:00:41,760
in about six months i'll reply and say

19
00:00:41,760 --> 00:00:43,360
no i'm definitely gonna post them on my

20
00:00:43,360 --> 00:00:44,960
site tonight

21
00:00:44,960 --> 00:00:47,360
and i'll never post them at all i've

22
00:00:47,360 --> 00:00:50,000
been in this spot and i hate it too

23
00:00:50,000 --> 00:00:52,480
which is why you can go to robrich.org

24
00:00:52,480 --> 00:00:53,520
right now

25
00:00:53,520 --> 00:00:55,760
and you can pull up the slides let's go

26
00:00:55,760 --> 00:00:57,600
to robrich.org we'll click on

27
00:00:57,600 --> 00:00:58,879
presentations

28
00:00:58,879 --> 00:01:01,440
and here is service mess to service mesh

29
00:01:01,440 --> 00:01:03,199
you can see the slides

30
00:01:03,199 --> 00:01:06,159
right here while we're here on

31
00:01:06,159 --> 00:01:08,240
robrich.org let's click on about me and

32
00:01:08,240 --> 00:01:11,360
we'll look at this page

33
00:01:11,760 --> 00:01:14,640
i'm a microsoft mvp i'm a friend of red

34
00:01:14,640 --> 00:01:16,560
gate

35
00:01:16,560 --> 00:01:18,799
az gift camp is wonderful easy gift camp

36
00:01:18,799 --> 00:01:20,479
brings volunteer developers together

37
00:01:20,479 --> 00:01:22,080
with charities who otherwise couldn't

38
00:01:22,080 --> 00:01:23,759
afford software services

39
00:01:23,759 --> 00:01:25,360
we start building software for them

40
00:01:25,360 --> 00:01:27,680
friday after work sunday afternoon

41
00:01:27,680 --> 00:01:29,439
we deliver that completed software back

42
00:01:29,439 --> 00:01:31,200
to the charities sleep is optional

43
00:01:31,200 --> 00:01:32,720
caffeine provided

44
00:01:32,720 --> 00:01:34,240
if you're in phoenix come join us for

45
00:01:34,240 --> 00:01:36,320
the next a-z gift camp it is a lot of

46
00:01:36,320 --> 00:01:36,880
fun

47
00:01:36,880 --> 00:01:38,400
or if you'd like a gift camp in your

48
00:01:38,400 --> 00:01:40,479
area hit me up by email or twitter

49
00:01:40,479 --> 00:01:42,240
and let's get philanthropy installed in

50
00:01:42,240 --> 00:01:44,880
your area as well

51
00:01:44,880 --> 00:01:46,640
sql server source control basics that

52
00:01:46,640 --> 00:01:49,439
was a lot of fun uh minus chapter eight

53
00:01:49,439 --> 00:01:51,439
i was on the gulp core contributor team

54
00:01:51,439 --> 00:01:53,600
in version two and version three

55
00:01:53,600 --> 00:01:55,040
one of the things that i'm particularly

56
00:01:55,040 --> 00:01:56,960
proud of is i replied to a.net rocks

57
00:01:56,960 --> 00:01:58,240
podcast episode

58
00:01:58,240 --> 00:02:00,000
they read my comment on the air and they

59
00:02:00,000 --> 00:02:02,000
sent me a mug

60
00:02:02,000 --> 00:02:05,280
so there's my claim to fame so let's dig

61
00:02:05,280 --> 00:02:10,399
into service mess to service mesh

62
00:02:10,720 --> 00:02:13,840
when we look at a service mesh we we

63
00:02:13,840 --> 00:02:15,360
talked about this guy

64
00:02:15,360 --> 00:02:18,879
when we look at a service mesh imagine

65
00:02:18,879 --> 00:02:20,319
imagine when you were learning how to

66
00:02:20,319 --> 00:02:22,400
drive do you remember the feeling of

67
00:02:22,400 --> 00:02:23,920
that open road

68
00:02:23,920 --> 00:02:26,080
the the feeling of getting to control a

69
00:02:26,080 --> 00:02:27,680
machine

70
00:02:27,680 --> 00:02:32,400
going fast not getting caught going fast

71
00:02:32,400 --> 00:02:36,319
imagine the empty road in a country town

72
00:02:36,319 --> 00:02:40,560
how much fun that would be to drive well

73
00:02:40,560 --> 00:02:43,040
over time lots of people may come into

74
00:02:43,040 --> 00:02:43,680
town

75
00:02:43,680 --> 00:02:47,680
the town may grow up and we end up with

76
00:02:47,680 --> 00:02:51,680
traffic well now i'm not really going as

77
00:02:51,680 --> 00:02:52,879
fast as i want to

78
00:02:52,879 --> 00:02:55,680
you know there aren't any uh signs or

79
00:02:55,680 --> 00:02:56,879
control

80
00:02:56,879 --> 00:03:00,959
stations it just gets to be a mess

81
00:03:00,959 --> 00:03:02,959
i'm not getting to where i want to be as

82
00:03:02,959 --> 00:03:04,640
efficiently as possible

83
00:03:04,640 --> 00:03:07,920
so how do we solve this well in time

84
00:03:07,920 --> 00:03:10,640
we'll probably get one of these the

85
00:03:10,640 --> 00:03:12,560
officer is standing at the edge of town

86
00:03:12,560 --> 00:03:14,560
he's going to go grab all of the people

87
00:03:14,560 --> 00:03:15,760
who are speeding

88
00:03:15,760 --> 00:03:19,200
and ultimately we're now able to move

89
00:03:19,200 --> 00:03:22,560
consistently through town well

90
00:03:22,560 --> 00:03:24,879
we're moving consistently but we're not

91
00:03:24,879 --> 00:03:26,480
moving efficiently

92
00:03:26,480 --> 00:03:30,840
we've rewarded conformity over

93
00:03:30,840 --> 00:03:34,159
expedience what would be better

94
00:03:34,159 --> 00:03:35,920
is if we could do something like this if

95
00:03:35,920 --> 00:03:37,920
we had a mechanism where the cars could

96
00:03:37,920 --> 00:03:39,519
communicate with each other

97
00:03:39,519 --> 00:03:42,319
and prioritize traffic based on urgency

98
00:03:42,319 --> 00:03:43,040
or

99
00:03:43,040 --> 00:03:46,319
based on priority or just communicating

100
00:03:46,319 --> 00:03:47,920
so that we could all get there as

101
00:03:47,920 --> 00:03:49,760
quickly and as efficiently as we needed

102
00:03:49,760 --> 00:03:50,959
to

103
00:03:50,959 --> 00:03:53,599
now this doesn't say that one car going

104
00:03:53,599 --> 00:03:55,680
faster or slower is better or worse but

105
00:03:55,680 --> 00:03:56,400
rather

106
00:03:56,400 --> 00:03:58,560
that the cars can communicate together

107
00:03:58,560 --> 00:04:00,239
to make sure that everyone gets

108
00:04:00,239 --> 00:04:02,720
as fast or as slow as they need to to

109
00:04:02,720 --> 00:04:05,439
get to their destination efficiently

110
00:04:05,439 --> 00:04:07,120
we'll use this metaphor as we look at

111
00:04:07,120 --> 00:04:08,640
service meshes and

112
00:04:08,640 --> 00:04:10,560
compare that to the mechanisms around

113
00:04:10,560 --> 00:04:14,080
api gateways and other technology

114
00:04:14,080 --> 00:04:16,880
is a service mesh let's look at what is

115
00:04:16,880 --> 00:04:17,918
a service mesh

116
00:04:17,918 --> 00:04:21,600
let's look at some of the

117
00:04:21,600 --> 00:04:23,199
pardon me some of the features around

118
00:04:23,199 --> 00:04:25,600
service meshes let's compare service

119
00:04:25,600 --> 00:04:27,680
meshes to api gateways

120
00:04:27,680 --> 00:04:29,759
let's look at common service meshes

121
00:04:29,759 --> 00:04:31,520
we'll look at istio and linker d

122
00:04:31,520 --> 00:04:34,240
today and then let's do a live demo of

123
00:04:34,240 --> 00:04:34,639
both

124
00:04:34,639 --> 00:04:36,639
istio and linker d that will be really

125
00:04:36,639 --> 00:04:39,120
fun and then ultimately we'll talk about

126
00:04:39,120 --> 00:04:41,040
best practices when should i use a

127
00:04:41,040 --> 00:04:42,000
service mesh when

128
00:04:42,000 --> 00:04:45,120
should i not use a service mesh come

129
00:04:45,120 --> 00:04:47,440
join us

130
00:04:47,440 --> 00:04:50,240
so what is a service mesh well a service

131
00:04:50,240 --> 00:04:50,800
mesh

132
00:04:50,800 --> 00:04:53,520
manages network traffic between services

133
00:04:53,520 --> 00:04:54,320
in a great

134
00:04:54,320 --> 00:04:57,840
graceful and scalable way

135
00:04:57,919 --> 00:04:59,600
we could think of the service mesh as

136
00:04:59,600 --> 00:05:00,960
the answer to

137
00:05:00,960 --> 00:05:04,000
how do i observe control or secure

138
00:05:04,000 --> 00:05:07,120
communication between microservices

139
00:05:07,120 --> 00:05:09,039
we're inside of a kubernetes cluster or

140
00:05:09,039 --> 00:05:10,880
another containerized cluster

141
00:05:10,880 --> 00:05:13,039
we have all of our micro services and we

142
00:05:13,039 --> 00:05:14,400
want to control

143
00:05:14,400 --> 00:05:17,759
observe or secure that traffic between

144
00:05:17,759 --> 00:05:19,600
those services

145
00:05:19,600 --> 00:05:22,880
well how did we get here so

146
00:05:22,880 --> 00:05:25,919
observe control and secure

147
00:05:25,919 --> 00:05:28,639
we'll dig into that quite a bit as we go

148
00:05:28,639 --> 00:05:29,280
observe

149
00:05:29,280 --> 00:05:31,039
control and secure that's really what a

150
00:05:31,039 --> 00:05:32,639
service mesh does

151
00:05:32,639 --> 00:05:36,240
observe it can watch traffic as it moves

152
00:05:36,240 --> 00:05:38,880
between microservices it can see

153
00:05:38,880 --> 00:05:41,680
when one service calls another service

154
00:05:41,680 --> 00:05:42,240
and

155
00:05:42,240 --> 00:05:44,560
it can see when services shouldn't call

156
00:05:44,560 --> 00:05:45,919
other services

157
00:05:45,919 --> 00:05:48,720
control now that i've identified which

158
00:05:48,720 --> 00:05:49,600
services

159
00:05:49,600 --> 00:05:52,800
call which other services we can create

160
00:05:52,800 --> 00:05:55,120
policies around that to make sure that

161
00:05:55,120 --> 00:05:57,199
some services are able to call other

162
00:05:57,199 --> 00:05:59,039
services and some services are blocked

163
00:05:59,039 --> 00:06:00,639
from calling other services

164
00:06:00,639 --> 00:06:02,400
we don't want a rogue service starting

165
00:06:02,400 --> 00:06:04,840
up and just calling out to the

166
00:06:04,840 --> 00:06:06,160
everything

167
00:06:06,160 --> 00:06:09,759
observe control secure

168
00:06:09,759 --> 00:06:11,919
we'll do mutual tls between our

169
00:06:11,919 --> 00:06:12,960
microservices

170
00:06:12,960 --> 00:06:14,400
now the cool thing about doing this

171
00:06:14,400 --> 00:06:16,080
inside of a service mesh

172
00:06:16,080 --> 00:06:18,720
is that our code doesn't need to change

173
00:06:18,720 --> 00:06:20,240
to be able to communicate

174
00:06:20,240 --> 00:06:23,039
securely across the service mesh we'll

175
00:06:23,039 --> 00:06:25,280
have mechanisms in here for

176
00:06:25,280 --> 00:06:28,400
mutual tls for trust chains

177
00:06:28,400 --> 00:06:30,240
the service mesh can be a certificate

178
00:06:30,240 --> 00:06:31,600
authority or we can lean on a

179
00:06:31,600 --> 00:06:33,440
certificate authority from an outside

180
00:06:33,440 --> 00:06:34,720
source

181
00:06:34,720 --> 00:06:36,720
we'll communicate securely and

182
00:06:36,720 --> 00:06:38,000
efficiently

183
00:06:38,000 --> 00:06:41,280
observe control secure that's what a

184
00:06:41,280 --> 00:06:44,080
service mesh is

185
00:06:44,160 --> 00:06:47,199
so how did we get here on the left we

186
00:06:47,199 --> 00:06:48,240
have a mechanism

187
00:06:48,240 --> 00:06:51,520
of monolithic application on the right

188
00:06:51,520 --> 00:06:55,360
we have microservices

189
00:06:55,360 --> 00:06:57,520
on the left we had this monolithic

190
00:06:57,520 --> 00:06:59,680
application because deployment was hard

191
00:06:59,680 --> 00:07:01,680
it was difficult for us to be able to

192
00:07:01,680 --> 00:07:03,280
push things to production

193
00:07:03,280 --> 00:07:05,840
so we did it really infrequently we

194
00:07:05,840 --> 00:07:06,639
would bundle

195
00:07:06,639 --> 00:07:09,360
as much as we could into that one thing

196
00:07:09,360 --> 00:07:11,360
and we would push it to production

197
00:07:11,360 --> 00:07:14,160
and then we'd be done the hard part is

198
00:07:14,160 --> 00:07:15,759
over

199
00:07:15,759 --> 00:07:18,319
as we got better at deployment and in

200
00:07:18,319 --> 00:07:19,919
particular at containers

201
00:07:19,919 --> 00:07:21,599
we moved to microservices like the

202
00:07:21,599 --> 00:07:23,280
service on the right

203
00:07:23,280 --> 00:07:24,960
now each of these microservices

204
00:07:24,960 --> 00:07:26,560
accomplishes a specific

205
00:07:26,560 --> 00:07:30,479
task and we can upgrade each one when

206
00:07:30,479 --> 00:07:31,599
it's necessary

207
00:07:31,599 --> 00:07:33,840
or replace a microservice which with a

208
00:07:33,840 --> 00:07:37,440
microservice that functions better here

209
00:07:37,440 --> 00:07:39,360
we moved from monolithic applications to

210
00:07:39,360 --> 00:07:41,440
microservices because deployment was no

211
00:07:41,440 --> 00:07:42,560
longer hard

212
00:07:42,560 --> 00:07:44,560
and now we have a whole lot more options

213
00:07:44,560 --> 00:07:47,199
we can scale each service independently

214
00:07:47,199 --> 00:07:50,319
we can communicate differently

215
00:07:50,319 --> 00:07:53,520
but now each microservice is

216
00:07:53,520 --> 00:07:56,400
kind of public maybe not completely

217
00:07:56,400 --> 00:07:58,639
public but in a monolithic application

218
00:07:58,639 --> 00:08:02,479
all of our private internal methods were

219
00:08:02,479 --> 00:08:05,039
internal they weren't exposed outside of

220
00:08:05,039 --> 00:08:06,560
our executable

221
00:08:06,560 --> 00:08:08,960
in microservices each one of our private

222
00:08:08,960 --> 00:08:10,720
private methods has

223
00:08:10,720 --> 00:08:12,560
a web address it might be an internal

224
00:08:12,560 --> 00:08:14,240
web address but it's a web address and

225
00:08:14,240 --> 00:08:16,560
anything could call it

226
00:08:16,560 --> 00:08:18,400
and that's the problem that we're

227
00:08:18,400 --> 00:08:19,599
setting out to serve

228
00:08:19,599 --> 00:08:22,160
with a service mesh it's starting to

229
00:08:22,160 --> 00:08:22,879
observe

230
00:08:22,879 --> 00:08:25,520
control and secure that communication

231
00:08:25,520 --> 00:08:26,000
between

232
00:08:26,000 --> 00:08:27,759
our internal services within our

233
00:08:27,759 --> 00:08:30,319
application

234
00:08:30,639 --> 00:08:32,958
as we talk about securing communication

235
00:08:32,958 --> 00:08:33,839
we'll talk about

236
00:08:33,839 --> 00:08:36,559
north south traffic and east-west

237
00:08:36,559 --> 00:08:37,839
traffic

238
00:08:37,839 --> 00:08:40,080
just to kind of level set here north

239
00:08:40,080 --> 00:08:41,039
south traffic

240
00:08:41,039 --> 00:08:44,240
is traffic into or out of our cup our

241
00:08:44,240 --> 00:08:46,560
containerized cluster

242
00:08:46,560 --> 00:08:48,880
east-west traffic represents traffic

243
00:08:48,880 --> 00:08:51,760
going between our microservices

244
00:08:51,760 --> 00:08:53,680
so for example in this diagram here on

245
00:08:53,680 --> 00:08:54,800
the right

246
00:08:54,800 --> 00:08:57,040
a user is on top our database is on the

247
00:08:57,040 --> 00:08:59,200
bottom so north south traffic will go

248
00:08:59,200 --> 00:09:01,680
into our cluster or out of our cluster

249
00:09:01,680 --> 00:09:03,839
and east-west traffic will go between

250
00:09:03,839 --> 00:09:06,399
our micro services

251
00:09:06,399 --> 00:09:08,880
just some cool terminology what's really

252
00:09:08,880 --> 00:09:11,200
cool is that a service mesh allows us to

253
00:09:11,200 --> 00:09:11,760
control

254
00:09:11,760 --> 00:09:14,560
both north-south traffic into and out of

255
00:09:14,560 --> 00:09:15,360
our cluster

256
00:09:15,360 --> 00:09:18,000
and also east-west traffic traffic

257
00:09:18,000 --> 00:09:20,480
between services

258
00:09:20,480 --> 00:09:23,279
so what came before well we got to this

259
00:09:23,279 --> 00:09:23,839
point where

260
00:09:23,839 --> 00:09:26,959
all of our private services had ip

261
00:09:26,959 --> 00:09:28,000
addresses

262
00:09:28,000 --> 00:09:32,160
and that was interesting but now what

263
00:09:32,160 --> 00:09:34,560
we created this api gateway an api

264
00:09:34,560 --> 00:09:36,000
gateway is this boundary

265
00:09:36,000 --> 00:09:39,680
fence around our cluster for any traffic

266
00:09:39,680 --> 00:09:41,440
coming into our cluster it has to check

267
00:09:41,440 --> 00:09:43,120
in with the api gateway to make sure

268
00:09:43,120 --> 00:09:44,959
that it's allowed to proceed

269
00:09:44,959 --> 00:09:46,720
if it has the right credentials if it

270
00:09:46,720 --> 00:09:48,560
has the right keys

271
00:09:48,560 --> 00:09:50,959
if it's running on the right ports then

272
00:09:50,959 --> 00:09:53,040
the traffic can come in

273
00:09:53,040 --> 00:09:55,440
now it is just a boundary around our

274
00:09:55,440 --> 00:09:56,320
cluster

275
00:09:56,320 --> 00:09:58,160
so it's able to control north-south

276
00:09:58,160 --> 00:10:00,000
traffic really easily

277
00:10:00,000 --> 00:10:03,200
but it's not able to control east-west

278
00:10:03,200 --> 00:10:04,480
traffic

279
00:10:04,480 --> 00:10:07,200
now we see in this diagram that we have

280
00:10:07,200 --> 00:10:08,720
microservices calling other

281
00:10:08,720 --> 00:10:10,560
microservices that's perfect that's what

282
00:10:10,560 --> 00:10:11,839
we want

283
00:10:11,839 --> 00:10:14,480
but the microservices are also reaching

284
00:10:14,480 --> 00:10:17,120
into somebody else's data source

285
00:10:17,120 --> 00:10:20,399
we don't want that but the api gateway

286
00:10:20,399 --> 00:10:22,320
being this boundary fence around

287
00:10:22,320 --> 00:10:25,200
our cluster has no visibility into that

288
00:10:25,200 --> 00:10:26,640
the api gateway

289
00:10:26,640 --> 00:10:28,560
is merely the boundary around the

290
00:10:28,560 --> 00:10:31,440
cluster that traffic cop on the edge of

291
00:10:31,440 --> 00:10:32,240
town

292
00:10:32,240 --> 00:10:34,399
he couldn't patrol the content within

293
00:10:34,399 --> 00:10:36,959
town his task was only to filter the

294
00:10:36,959 --> 00:10:39,040
traffic coming into town

295
00:10:39,040 --> 00:10:40,720
the north-south traffic coming into our

296
00:10:40,720 --> 00:10:43,200
cluster the east-west traffic traffic

297
00:10:43,200 --> 00:10:47,120
between microservices

298
00:10:47,120 --> 00:10:49,839
we can't manage that with an api gateway

299
00:10:49,839 --> 00:10:51,440
and that's where we reach for a service

300
00:10:51,440 --> 00:10:52,640
mesh

301
00:10:52,640 --> 00:10:55,360
so how does a service mesh work at its

302
00:10:55,360 --> 00:10:57,040
core principle a service mesh will

303
00:10:57,040 --> 00:10:59,040
typically deploy a side car

304
00:10:59,040 --> 00:11:02,399
within each pod so in this case

305
00:11:02,399 --> 00:11:04,959
service a wants to call service b

306
00:11:04,959 --> 00:11:05,920
service a

307
00:11:05,920 --> 00:11:09,279
is a container deployed in this pod

308
00:11:09,279 --> 00:11:11,279
together with a sidecar container an

309
00:11:11,279 --> 00:11:12,640
envoy proxy

310
00:11:12,640 --> 00:11:14,240
service b is also deployed with a

311
00:11:14,240 --> 00:11:16,560
sidecar proxy so service a wants to

312
00:11:16,560 --> 00:11:18,240
reach out to service b

313
00:11:18,240 --> 00:11:20,079
without a service mesh service a would

314
00:11:20,079 --> 00:11:21,920
just directly connect to service b

315
00:11:21,920 --> 00:11:23,920
with a service mesh service a is going

316
00:11:23,920 --> 00:11:26,880
to reach out to service a's envoy proxy

317
00:11:26,880 --> 00:11:28,560
now the envoy proxy is going to go check

318
00:11:28,560 --> 00:11:30,800
in with the control plane

319
00:11:30,800 --> 00:11:33,839
for the service mesh is service a

320
00:11:33,839 --> 00:11:36,320
allowed to connect to service b

321
00:11:36,320 --> 00:11:38,079
if so then the control plane will give

322
00:11:38,079 --> 00:11:39,519
service a the

323
00:11:39,519 --> 00:11:41,600
details of how to connect to service b

324
00:11:41,600 --> 00:11:42,720
and it'll open a

325
00:11:42,720 --> 00:11:45,760
mutually tls encrypted connection

326
00:11:45,760 --> 00:11:47,680
service a's proxy then communicates with

327
00:11:47,680 --> 00:11:49,200
service b's proxy

328
00:11:49,200 --> 00:11:51,680
and service b proxy again checks in with

329
00:11:51,680 --> 00:11:52,560
the control plane

330
00:11:52,560 --> 00:11:55,440
is service a allowed to call me in this

331
00:11:55,440 --> 00:11:56,720
case the control plane is going to say

332
00:11:56,720 --> 00:11:58,320
yes and service b is going to forward

333
00:11:58,320 --> 00:11:58,639
the

334
00:11:58,639 --> 00:12:00,399
or service b's proxy is going to forward

335
00:12:00,399 --> 00:12:03,120
the traffic onto service b

336
00:12:03,120 --> 00:12:06,000
service b will reply to the proxy the

337
00:12:06,000 --> 00:12:07,760
traffic flows across that mutually

338
00:12:07,760 --> 00:12:08,880
encrypted tunnel

339
00:12:08,880 --> 00:12:11,360
back to service a's proxy and al back to

340
00:12:11,360 --> 00:12:13,680
service a

341
00:12:13,680 --> 00:12:16,079
the cool part is the pod boundary that

342
00:12:16,079 --> 00:12:17,360
network boundary

343
00:12:17,360 --> 00:12:19,600
is the only place where service a and

344
00:12:19,600 --> 00:12:21,519
service a proxy communicate

345
00:12:21,519 --> 00:12:23,839
everything outside the boundary is

346
00:12:23,839 --> 00:12:26,800
secured with mutual tls

347
00:12:26,800 --> 00:12:30,800
that's a service that's a service mesh

348
00:12:30,800 --> 00:12:32,560
service a communicates with services

349
00:12:32,560 --> 00:12:35,120
proxy services proxy checks in with the

350
00:12:35,120 --> 00:12:35,839
service mesh

351
00:12:35,839 --> 00:12:38,000
control plane communicates to service

352
00:12:38,000 --> 00:12:38,959
b's proxy

353
00:12:38,959 --> 00:12:40,880
serves b's proxy forwards it on to

354
00:12:40,880 --> 00:12:43,360
service b

355
00:12:43,360 --> 00:12:45,600
now we can switch out the implementation

356
00:12:45,600 --> 00:12:47,200
details perhaps

357
00:12:47,200 --> 00:12:50,639
service a is ingress into the cluster

358
00:12:50,639 --> 00:12:53,120
or perhaps service b is outside of the

359
00:12:53,120 --> 00:12:54,399
cluster

360
00:12:54,399 --> 00:12:56,320
so in this case we'll have traffic

361
00:12:56,320 --> 00:12:58,160
coming in to the cluster

362
00:12:58,160 --> 00:13:00,079
it will still check in with that control

363
00:13:00,079 --> 00:13:02,560
plane and if allowed it will communicate

364
00:13:02,560 --> 00:13:04,399
securely with the microservice in our

365
00:13:04,399 --> 00:13:05,360
cluster

366
00:13:05,360 --> 00:13:07,680
or for traffic leaving the cluster

367
00:13:07,680 --> 00:13:08,800
service a's

368
00:13:08,800 --> 00:13:11,680
envoy proxy will check in with the

369
00:13:11,680 --> 00:13:12,720
control plane

370
00:13:12,720 --> 00:13:14,800
and only if allowed to communicate

371
00:13:14,800 --> 00:13:15,920
outside the cluster

372
00:13:15,920 --> 00:13:18,079
will it create that encrypted tunnel

373
00:13:18,079 --> 00:13:21,600
outside the cluster to service b

374
00:13:21,600 --> 00:13:23,440
this is kind of the principle around

375
00:13:23,440 --> 00:13:25,440
service mesh and this is that

376
00:13:25,440 --> 00:13:28,480
magical piece we're standing in between

377
00:13:28,480 --> 00:13:29,839
the communication between all the

378
00:13:29,839 --> 00:13:31,200
services

379
00:13:31,200 --> 00:13:33,200
well because we're standing in between

380
00:13:33,200 --> 00:13:34,240
the traffic here

381
00:13:34,240 --> 00:13:36,240
we can do some really really interesting

382
00:13:36,240 --> 00:13:37,360
things

383
00:13:37,360 --> 00:13:39,199
we're going to start with observe secure

384
00:13:39,199 --> 00:13:40,560
and control

385
00:13:40,560 --> 00:13:43,760
but let's dig in deeper observe control

386
00:13:43,760 --> 00:13:45,680
and secure

387
00:13:45,680 --> 00:13:48,800
since we're proxying all the traffic we

388
00:13:48,800 --> 00:13:49,680
can observe

389
00:13:49,680 --> 00:13:51,600
all the communication between all of our

390
00:13:51,600 --> 00:13:53,680
services now this is interesting

391
00:13:53,680 --> 00:13:55,920
we don't just get what the developer

392
00:13:55,920 --> 00:13:57,040
thought was happening

393
00:13:57,040 --> 00:13:58,800
we get what's actually happening on the

394
00:13:58,800 --> 00:14:00,320
wire

395
00:14:00,320 --> 00:14:02,639
now we can create access policies we can

396
00:14:02,639 --> 00:14:04,639
control that traffic

397
00:14:04,639 --> 00:14:07,120
is servicea allowed to talk to service b

398
00:14:07,120 --> 00:14:09,040
or is service a a rogue service that

399
00:14:09,040 --> 00:14:10,560
just got spun up

400
00:14:10,560 --> 00:14:12,480
we can create these access policies so

401
00:14:12,480 --> 00:14:13,839
that only the traffic

402
00:14:13,839 --> 00:14:15,680
that we want flows in the directions

403
00:14:15,680 --> 00:14:17,920
that we want within our cluster

404
00:14:17,920 --> 00:14:21,279
and then mutual tls security

405
00:14:21,279 --> 00:14:23,440
we're creating this mutual tls with a

406
00:14:23,440 --> 00:14:24,639
trust chain

407
00:14:24,639 --> 00:14:26,480
without impacting the code in our

408
00:14:26,480 --> 00:14:28,160
cluster we don't need to

409
00:14:28,160 --> 00:14:30,959
change our application to be able to

410
00:14:30,959 --> 00:14:32,240
speak securely

411
00:14:32,240 --> 00:14:35,600
between our services that's really

412
00:14:35,600 --> 00:14:36,399
powerful

413
00:14:36,399 --> 00:14:39,760
observe control secure but let's not

414
00:14:39,760 --> 00:14:41,360
stop there

415
00:14:41,360 --> 00:14:44,000
because we're standing in between all of

416
00:14:44,000 --> 00:14:44,480
the

417
00:14:44,480 --> 00:14:47,440
communication in our service we can step

418
00:14:47,440 --> 00:14:49,440
up a level as well

419
00:14:49,440 --> 00:14:52,000
let's map out the network topology now

420
00:14:52,000 --> 00:14:52,800
this isn't

421
00:14:52,800 --> 00:14:54,959
what the developer thought would happen

422
00:14:54,959 --> 00:14:56,320
in our cluster

423
00:14:56,320 --> 00:14:58,320
this is what's actually happening in our

424
00:14:58,320 --> 00:15:00,639
cluster

425
00:15:00,639 --> 00:15:02,320
am i talking to the configuration

426
00:15:02,320 --> 00:15:04,160
service if i'm not

427
00:15:04,160 --> 00:15:06,000
maybe those hard-coded debug values

428
00:15:06,000 --> 00:15:07,600
accidentally got checked in

429
00:15:07,600 --> 00:15:09,519
we can check our network topology and

430
00:15:09,519 --> 00:15:12,560
make sure it is what we expect

431
00:15:12,560 --> 00:15:14,959
service health because we're standing in

432
00:15:14,959 --> 00:15:17,199
between all of the services

433
00:15:17,199 --> 00:15:19,279
is this service timing out is it

434
00:15:19,279 --> 00:15:21,040
returning 500 errors

435
00:15:21,040 --> 00:15:23,760
is it taking too long to do a request we

436
00:15:23,760 --> 00:15:24,560
can con

437
00:15:24,560 --> 00:15:27,360
we can collect all of these metrics

438
00:15:27,360 --> 00:15:27,920
around

439
00:15:27,920 --> 00:15:30,399
a particular service and understand if

440
00:15:30,399 --> 00:15:31,519
it's healthy

441
00:15:31,519 --> 00:15:34,240
is it behaving normally is it behaving

442
00:15:34,240 --> 00:15:36,320
abnormally

443
00:15:36,320 --> 00:15:38,160
let's take all of that content and set

444
00:15:38,160 --> 00:15:40,000
it in the log that log will

445
00:15:40,000 --> 00:15:42,320
allow us to collect all these metrics

446
00:15:42,320 --> 00:15:44,079
and to be able to do really interesting

447
00:15:44,079 --> 00:15:45,600
things with them

448
00:15:45,600 --> 00:15:47,120
because we're standing between the

449
00:15:47,120 --> 00:15:49,759
service we can do lots of cool things

450
00:15:49,759 --> 00:15:50,399
around

451
00:15:50,399 --> 00:15:52,880
the traffic in our cluster let's level

452
00:15:52,880 --> 00:15:54,959
up again

453
00:15:54,959 --> 00:15:57,680
so now let's start about let's start

454
00:15:57,680 --> 00:16:00,320
talking about traffic shaping

455
00:16:00,320 --> 00:16:02,560
as we're creating these control control

456
00:16:02,560 --> 00:16:03,440
policies

457
00:16:03,440 --> 00:16:07,279
we don't just want to block traffic but

458
00:16:07,279 --> 00:16:10,160
what if we create an a b test what if we

459
00:16:10,160 --> 00:16:10,560
take

460
00:16:10,560 --> 00:16:13,360
a new version and direct i don't know

461
00:16:13,360 --> 00:16:15,199
five percent of the traffic ten percent

462
00:16:15,199 --> 00:16:17,040
of the traffic towards this new service

463
00:16:17,040 --> 00:16:18,720
and see how it goes

464
00:16:18,720 --> 00:16:20,639
or do an a b test between two different

465
00:16:20,639 --> 00:16:22,639
versions and see if we can learn

466
00:16:22,639 --> 00:16:25,440
more about how our customers behave and

467
00:16:25,440 --> 00:16:26,639
optimize our site

468
00:16:26,639 --> 00:16:30,480
to create really elegant experiences

469
00:16:30,480 --> 00:16:32,320
or let's create a beta channel or a

470
00:16:32,320 --> 00:16:33,519
canary release

471
00:16:33,519 --> 00:16:36,320
and point those users who have opted in

472
00:16:36,320 --> 00:16:39,360
to that particular service

473
00:16:39,360 --> 00:16:42,320
circuit breakers are really powerful

474
00:16:42,320 --> 00:16:44,160
imagine a service is struggling

475
00:16:44,160 --> 00:16:48,319
well if the service is struggling

476
00:16:48,399 --> 00:16:51,519
we need to give it a break um if the

477
00:16:51,519 --> 00:16:53,040
service goes down the first thing all

478
00:16:53,040 --> 00:16:54,800
the clients probably do is

479
00:16:54,800 --> 00:16:58,800
um retry so now that struggling service

480
00:16:58,800 --> 00:17:00,240
that was overloaded

481
00:17:00,240 --> 00:17:02,079
that just went down now it's starting to

482
00:17:02,079 --> 00:17:03,839
come back up and suddenly it's flooded

483
00:17:03,839 --> 00:17:05,280
with requests

484
00:17:05,280 --> 00:17:07,839
and so the first thing it does is well

485
00:17:07,839 --> 00:17:09,599
go down again

486
00:17:09,599 --> 00:17:11,839
and so we'll have this kind of spike up

487
00:17:11,839 --> 00:17:13,359
and down and up and down where the

488
00:17:13,359 --> 00:17:15,439
moment the service gets a little bit of

489
00:17:15,439 --> 00:17:17,679
its feet under it again it falls over

490
00:17:17,679 --> 00:17:19,359
again with all of that traffic

491
00:17:19,359 --> 00:17:22,559
instead let's trip the circuit breaker

492
00:17:22,559 --> 00:17:24,959
like circuit breakers in electricity

493
00:17:24,959 --> 00:17:27,520
this circuit breaker is there to protect

494
00:17:27,520 --> 00:17:29,600
the equipment behind it

495
00:17:29,600 --> 00:17:33,200
rather than blowing a

496
00:17:33,200 --> 00:17:35,679
the electronics in our device we'll blow

497
00:17:35,679 --> 00:17:37,840
the fuse in our circuit breaker

498
00:17:37,840 --> 00:17:40,880
so that we can protect those electronics

499
00:17:40,880 --> 00:17:43,360
reset the circuit breaker and now we can

500
00:17:43,360 --> 00:17:44,720
try again

501
00:17:44,720 --> 00:17:47,039
similarly when the service is unhealthy

502
00:17:47,039 --> 00:17:48,480
the circuit breaker trips

503
00:17:48,480 --> 00:17:50,799
and now this the circuit breaker can

504
00:17:50,799 --> 00:17:52,480
tell calling applications

505
00:17:52,480 --> 00:17:54,960
this isn't going to work take another

506
00:17:54,960 --> 00:17:56,000
path

507
00:17:56,000 --> 00:17:57,840
perhaps it's a recommendation service

508
00:17:57,840 --> 00:17:59,760
and we can still let the user check out

509
00:17:59,760 --> 00:18:00,880
we just won't show them

510
00:18:00,880 --> 00:18:03,840
related products we haven't given them a

511
00:18:03,840 --> 00:18:04,960
poorer

512
00:18:04,960 --> 00:18:07,440
inferior experience we've just hidden

513
00:18:07,440 --> 00:18:09,200
some of the lesser

514
00:18:09,200 --> 00:18:12,240
features in our site once that service

515
00:18:12,240 --> 00:18:13,120
comes back up

516
00:18:13,120 --> 00:18:15,039
and it's healthy the circuit breaker has

517
00:18:15,039 --> 00:18:17,440
validated that the system is live

518
00:18:17,440 --> 00:18:19,280
then we can flow traffic back to it and

519
00:18:19,280 --> 00:18:20,960
that can happen automatically we don't

520
00:18:20,960 --> 00:18:22,640
need to wait for a human to go

521
00:18:22,640 --> 00:18:24,880
reset the circuit breaker in service

522
00:18:24,880 --> 00:18:26,400
mesh the circuit breaker can reset

523
00:18:26,400 --> 00:18:28,880
itself when it's ready

524
00:18:28,880 --> 00:18:30,559
all of these features are available in

525
00:18:30,559 --> 00:18:32,240
service mesh because we're standing

526
00:18:32,240 --> 00:18:34,240
between all of the communication in all

527
00:18:34,240 --> 00:18:36,559
our systems

528
00:18:36,559 --> 00:18:38,160
ultimately we're logging all of this

529
00:18:38,160 --> 00:18:40,240
content and we can start to visualize

530
00:18:40,240 --> 00:18:43,039
that in some really elegant dashboards

531
00:18:43,039 --> 00:18:45,200
on the left is a grafana dashboard where

532
00:18:45,200 --> 00:18:46,720
we see metrics around

533
00:18:46,720 --> 00:18:48,799
our service on the right is a network

534
00:18:48,799 --> 00:18:51,200
topology diagram where we can see

535
00:18:51,200 --> 00:18:54,160
how services call each other these kind

536
00:18:54,160 --> 00:18:55,440
of dashboards can give us

537
00:18:55,440 --> 00:18:57,679
great insight into our services and help

538
00:18:57,679 --> 00:19:01,679
us understand how our services are doing

539
00:19:02,799 --> 00:19:05,200
we talked about preventing unexpected

540
00:19:05,200 --> 00:19:06,320
traffic patterns

541
00:19:06,320 --> 00:19:08,400
let's dig in again because a service

542
00:19:08,400 --> 00:19:09,840
mesh is standing between

543
00:19:09,840 --> 00:19:12,960
all of the things we can see that in

544
00:19:12,960 --> 00:19:14,559
this case

545
00:19:14,559 --> 00:19:16,960
our microservices are calling each

546
00:19:16,960 --> 00:19:19,039
other's data sources we don't want to

547
00:19:19,039 --> 00:19:21,120
allow that let's create a traffic

548
00:19:21,120 --> 00:19:23,280
policy that blocks them from

549
00:19:23,280 --> 00:19:25,120
communicating with data sources that are

550
00:19:25,120 --> 00:19:26,720
not their own

551
00:19:26,720 --> 00:19:29,120
yeah we'll probably need to re-architect

552
00:19:29,120 --> 00:19:30,640
our application to do that

553
00:19:30,640 --> 00:19:33,200
but we're able to discover this we're

554
00:19:33,200 --> 00:19:34,960
able to control this

555
00:19:34,960 --> 00:19:36,880
and affect some real change see some

556
00:19:36,880 --> 00:19:39,120
status of updates in our

557
00:19:39,120 --> 00:19:42,000
cluster as we make these changes a

558
00:19:42,000 --> 00:19:42,799
service mesh

559
00:19:42,799 --> 00:19:45,360
empowers us to have this visibility and

560
00:19:45,360 --> 00:19:46,240
this control

561
00:19:46,240 --> 00:19:49,840
into our service architecture

562
00:19:50,160 --> 00:19:52,400
so what's some example service meshes we

563
00:19:52,400 --> 00:19:53,360
could look at

564
00:19:53,360 --> 00:19:55,679
istio and linker d we could look at

565
00:19:55,679 --> 00:19:57,520
console we could look at open service

566
00:19:57,520 --> 00:19:58,240
mesh

567
00:19:58,240 --> 00:20:00,160
each of these service meshes has

568
00:20:00,160 --> 00:20:02,000
features and benefits and we can start

569
00:20:02,000 --> 00:20:03,679
to talk about well which one's faster

570
00:20:03,679 --> 00:20:05,360
which one has the most

571
00:20:05,360 --> 00:20:08,159
features and they all leapfrog each

572
00:20:08,159 --> 00:20:09,840
other so for the most part

573
00:20:09,840 --> 00:20:12,240
if you wait a minute the other service

574
00:20:12,240 --> 00:20:14,000
mesh will have that feature too

575
00:20:14,000 --> 00:20:16,080
so rather than comparing their features

576
00:20:16,080 --> 00:20:18,240
or their cost or their

577
00:20:18,240 --> 00:20:20,720
complexity let's instead compare their

578
00:20:20,720 --> 00:20:22,159
methodology

579
00:20:22,159 --> 00:20:24,720
take a look at how these things are

580
00:20:24,720 --> 00:20:26,480
built and what they value

581
00:20:26,480 --> 00:20:28,320
at that point we can choose the

582
00:20:28,320 --> 00:20:29,760
methodology that best

583
00:20:29,760 --> 00:20:32,400
matches our needs and that'll lead us to

584
00:20:32,400 --> 00:20:34,400
the correct service mesh

585
00:20:34,400 --> 00:20:37,760
so for example linker d linker d focuses

586
00:20:37,760 --> 00:20:40,159
on simplicity in particular simplicity

587
00:20:40,159 --> 00:20:41,280
of getting started

588
00:20:41,280 --> 00:20:43,360
it has the bare minimum features they

589
00:20:43,360 --> 00:20:45,120
work really well together

590
00:20:45,120 --> 00:20:46,720
and they're available out of the box

591
00:20:46,720 --> 00:20:48,799
really quickly

592
00:20:48,799 --> 00:20:50,400
but if you want more complexity than

593
00:20:50,400 --> 00:20:52,559
that more features you'll pull in third

594
00:20:52,559 --> 00:20:54,960
party packages that will do that

595
00:20:54,960 --> 00:20:57,280
linker d is really good at crafting

596
00:20:57,280 --> 00:20:58,799
their own little pieces

597
00:20:58,799 --> 00:21:00,880
and they work really well they're

598
00:21:00,880 --> 00:21:02,480
contributing a lot to the

599
00:21:02,480 --> 00:21:04,400
rust networking stack because they're

600
00:21:04,400 --> 00:21:05,679
building it out in

601
00:21:05,679 --> 00:21:08,080
they're building out linker d and rust

602
00:21:08,080 --> 00:21:10,480
that's really powerful

603
00:21:10,480 --> 00:21:13,280
by comparison istio focuses on kind of

604
00:21:13,280 --> 00:21:15,600
having that kitchen sink experience

605
00:21:15,600 --> 00:21:17,520
they install all the things and you can

606
00:21:17,520 --> 00:21:19,120
turn them on and turn them off with

607
00:21:19,120 --> 00:21:19,840
flags

608
00:21:19,840 --> 00:21:22,880
a profile flag

609
00:21:22,880 --> 00:21:25,760
istio also bundles a lot of best in

610
00:21:25,760 --> 00:21:26,480
breed

611
00:21:26,480 --> 00:21:29,760
products into the service mesh so you'll

612
00:21:29,760 --> 00:21:31,520
get

613
00:21:31,520 --> 00:21:33,600
a grafana dashboard over the top of

614
00:21:33,600 --> 00:21:34,960
prometheus syncs

615
00:21:34,960 --> 00:21:38,400
all of this con other open source

616
00:21:38,400 --> 00:21:40,960
software is bundled with istio as well

617
00:21:40,960 --> 00:21:42,480
so you'll get the best of breed

618
00:21:42,480 --> 00:21:46,080
big din but it is a bulkier install

619
00:21:46,080 --> 00:21:47,840
you can turn features on and off as you

620
00:21:47,840 --> 00:21:51,600
need to and that's really cool

621
00:21:52,400 --> 00:21:54,720
so let's dig into a demo we'll start out

622
00:21:54,720 --> 00:21:56,640
with a demo of linker d

623
00:21:56,640 --> 00:22:02,080
we'll also look at a demo of istio

624
00:22:02,400 --> 00:22:06,880
so i have here a linker d cluster

625
00:22:07,280 --> 00:22:09,039
or rather i have here a kubernetes

626
00:22:09,039 --> 00:22:10,320
cluster that is

627
00:22:10,320 --> 00:22:13,440
for the most part empty

628
00:22:13,440 --> 00:22:16,480
let's spin up linker d as we

629
00:22:16,480 --> 00:22:18,720
get started with linker d linker d's

630
00:22:18,720 --> 00:22:20,960
pass getting started page is really

631
00:22:20,960 --> 00:22:21,679
elegant

632
00:22:21,679 --> 00:22:25,120
you start out by installing the

633
00:22:25,120 --> 00:22:28,080
ctl i've already the command line cli

634
00:22:28,080 --> 00:22:28,559
rather

635
00:22:28,559 --> 00:22:31,120
i've already done this you put it in

636
00:22:31,120 --> 00:22:32,159
your path

637
00:22:32,159 --> 00:22:34,640
i've done this as well and next up let's

638
00:22:34,640 --> 00:22:37,760
validate our cluster

639
00:22:39,440 --> 00:22:42,640
ah linker d check

640
00:22:42,640 --> 00:22:45,919
dash pre this will go through our

641
00:22:45,919 --> 00:22:48,000
cluster and validate that it's ready for

642
00:22:48,000 --> 00:22:48,799
kubernetes

643
00:22:48,799 --> 00:22:50,720
does it have are ready for link or d

644
00:22:50,720 --> 00:22:52,480
does it have all of the things set up is

645
00:22:52,480 --> 00:22:54,240
kubernetes functioning correctly

646
00:22:54,240 --> 00:22:57,360
in this case yes linker

647
00:22:57,360 --> 00:23:01,280
d install pipe it to cube ctl

648
00:23:01,280 --> 00:23:04,400
apply dash f dash

649
00:23:04,400 --> 00:23:06,880
and it'll pull in all of the resources

650
00:23:06,880 --> 00:23:08,080
associated with

651
00:23:08,080 --> 00:23:11,039
linker d this six this install

652
00:23:11,039 --> 00:23:12,799
experiment experience

653
00:23:12,799 --> 00:23:15,919
is really elegant it just pulls it all

654
00:23:15,919 --> 00:23:16,559
in

655
00:23:16,559 --> 00:23:19,760
and it just works

656
00:23:20,320 --> 00:23:23,520
linker nope linker d

657
00:23:23,520 --> 00:23:26,960
check we did dash dash pre before to say

658
00:23:26,960 --> 00:23:29,440
let's go see if our cluster is ready now

659
00:23:29,440 --> 00:23:30,640
without the pre

660
00:23:30,640 --> 00:23:32,559
we're going to go validate the link or d

661
00:23:32,559 --> 00:23:34,960
setup and in particular

662
00:23:34,960 --> 00:23:37,520
it will wait for those things to spin up

663
00:23:37,520 --> 00:23:39,200
as it needs to

664
00:23:39,200 --> 00:23:42,799
and that's really cool

665
00:23:43,039 --> 00:23:46,080
is it ready go go go

666
00:23:46,080 --> 00:23:50,640
go it's still spinning up

667
00:23:50,640 --> 00:23:52,640
i love watching these things spin up and

668
00:23:52,640 --> 00:23:54,480
i love how it checks to see that

669
00:23:54,480 --> 00:23:56,559
everything is running correctly

670
00:23:56,559 --> 00:23:58,080
it does take it a minute to spin up

671
00:23:58,080 --> 00:24:00,159
especially when my machine is doing lots

672
00:24:00,159 --> 00:24:01,440
of other things

673
00:24:01,440 --> 00:24:06,240
but uh there we go linker d is ready

674
00:24:06,240 --> 00:24:10,000
cube ctl dash n linker d

675
00:24:10,000 --> 00:24:13,360
get all link d

676
00:24:13,360 --> 00:24:15,919
get all and we will see all of the

677
00:24:15,919 --> 00:24:18,640
resources that linker d spun up

678
00:24:18,640 --> 00:24:22,720
the deployments the services the pods

679
00:24:22,720 --> 00:24:24,480
and there's other things there's a cron

680
00:24:24,480 --> 00:24:27,360
job that's pretty cool

681
00:24:27,679 --> 00:24:31,440
linker nope linker d

682
00:24:31,440 --> 00:24:34,240
dashboard

683
00:24:34,799 --> 00:24:37,039
now the linker d dashboard is really

684
00:24:37,039 --> 00:24:38,799
cool let's dig into the linker d

685
00:24:38,799 --> 00:24:41,679
namespace and we'll get to see all of

686
00:24:41,679 --> 00:24:43,039
the

687
00:24:43,039 --> 00:24:46,159
pods available in this namespace here's

688
00:24:46,159 --> 00:24:47,440
all those pods

689
00:24:47,440 --> 00:24:49,840
they're uptime and we can get at a

690
00:24:49,840 --> 00:24:52,080
grafana dashboard for each one

691
00:24:52,080 --> 00:24:54,640
let's take a look at i don't know this

692
00:24:54,640 --> 00:24:56,320
one

693
00:24:56,320 --> 00:24:58,799
here's that grafana dashboard explaining

694
00:24:58,799 --> 00:24:59,520
the

695
00:24:59,520 --> 00:25:01,200
service health for this particular

696
00:25:01,200 --> 00:25:03,520
service now obviously it's been up for

697
00:25:03,520 --> 00:25:06,080
you know a second so there isn't a whole

698
00:25:06,080 --> 00:25:06,799
lot of

699
00:25:06,799 --> 00:25:10,400
descriptive content but that was really

700
00:25:10,400 --> 00:25:12,240
fast to spin up

701
00:25:12,240 --> 00:25:15,600
that was really really cool

702
00:25:15,600 --> 00:25:17,760
now i'd invite you to come to linker d

703
00:25:17,760 --> 00:25:18,640
getting started

704
00:25:18,640 --> 00:25:21,600
and there's a great way to walk through

705
00:25:21,600 --> 00:25:23,840
the dashboard and walk through a demo

706
00:25:23,840 --> 00:25:24,400
app

707
00:25:24,400 --> 00:25:27,279
but for the sake of time let's show

708
00:25:27,279 --> 00:25:28,640
istio

709
00:25:28,640 --> 00:25:31,120
istio has a similar experience of

710
00:25:31,120 --> 00:25:32,240
getting started

711
00:25:32,240 --> 00:25:35,520
where you start by downloading the istio

712
00:25:35,520 --> 00:25:39,279
cli and i've already done that

713
00:25:39,279 --> 00:25:43,840
install istio set profile equals demo

714
00:25:43,840 --> 00:25:46,960
and set the namespace default istio

715
00:25:46,960 --> 00:25:49,760
injection enabled

716
00:25:49,760 --> 00:25:52,320
we're tagging a particular namespace we

717
00:25:52,320 --> 00:25:54,320
can do this in link or d as well

718
00:25:54,320 --> 00:25:56,960
and by tagging that namespace the istio

719
00:25:56,960 --> 00:25:59,200
control plane knows that any pods that

720
00:25:59,200 --> 00:26:01,440
get scheduled into that namespace

721
00:26:01,440 --> 00:26:05,039
should have that proxy

722
00:26:05,039 --> 00:26:07,760
that envoy proxy installed as a sidecar

723
00:26:07,760 --> 00:26:09,039
within it

724
00:26:09,039 --> 00:26:11,840
and so now as we start to deploy our

725
00:26:11,840 --> 00:26:12,720
application

726
00:26:12,720 --> 00:26:15,360
we can just deploy it and all those side

727
00:26:15,360 --> 00:26:17,919
cars will get pulled into place

728
00:26:17,919 --> 00:26:20,960
i've already installed this book info

729
00:26:20,960 --> 00:26:22,880
sample application and this works out

730
00:26:22,880 --> 00:26:25,200
really well we have a product page

731
00:26:25,200 --> 00:26:27,360
it will reach out to this service to get

732
00:26:27,360 --> 00:26:28,559
the product details

733
00:26:28,559 --> 00:26:30,240
and then we also have this review

734
00:26:30,240 --> 00:26:33,120
service in version one we have no stars

735
00:26:33,120 --> 00:26:35,440
in version two we have black stars and

736
00:26:35,440 --> 00:26:37,760
in version three we have red stars

737
00:26:37,760 --> 00:26:40,000
and those will actually call out to this

738
00:26:40,000 --> 00:26:42,559
other service to get the rating

739
00:26:42,559 --> 00:26:44,000
now we want to experiment between

740
00:26:44,000 --> 00:26:46,080
version 1 version 2 and version 3

741
00:26:46,080 --> 00:26:48,159
and so we'll see the stars either coming

742
00:26:48,159 --> 00:26:50,159
or going depending on what version of

743
00:26:50,159 --> 00:26:52,559
the application we're running

744
00:26:52,559 --> 00:26:54,320
i've got the application spun up right

745
00:26:54,320 --> 00:26:56,559
here and in this case we're on version

746
00:26:56,559 --> 00:26:57,120
two

747
00:26:57,120 --> 00:26:59,760
let's hit refresh and now we're on

748
00:26:59,760 --> 00:27:01,600
version one

749
00:27:01,600 --> 00:27:04,080
we don't have those stars anymore let's

750
00:27:04,080 --> 00:27:04,880
take a look at

751
00:27:04,880 --> 00:27:07,840
in istio how we would flip between them

752
00:27:07,840 --> 00:27:09,200
here's that

753
00:27:09,200 --> 00:27:12,400
istio virtual service and this virtual

754
00:27:12,400 --> 00:27:13,200
service says

755
00:27:13,200 --> 00:27:15,600
i would like to point all of the traffic

756
00:27:15,600 --> 00:27:17,120
to version one

757
00:27:17,120 --> 00:27:18,640
that's what we've got going right now

758
00:27:18,640 --> 00:27:20,880
and all of our traffic is indeed moving

759
00:27:20,880 --> 00:27:24,640
to version one let's come back to

760
00:27:24,640 --> 00:27:28,240
the thing cube ctl config

761
00:27:28,240 --> 00:27:32,399
use context istio demo

762
00:27:32,399 --> 00:27:36,799
okay so now that we're in istio

763
00:27:37,600 --> 00:27:42,399
uh let's go move the traffic

764
00:27:42,399 --> 00:27:45,440
so it's all on version one right now

765
00:27:45,440 --> 00:27:48,000
let's say we'd like i don't know let's

766
00:27:48,000 --> 00:27:48,720
put eighty

767
00:27:48,720 --> 00:27:50,720
eighty percent of our traffic on version

768
00:27:50,720 --> 00:27:53,120
one and twenty percent of our traffic on

769
00:27:53,120 --> 00:27:55,360
version two

770
00:27:55,360 --> 00:27:58,480
cube ctl apply

771
00:27:58,480 --> 00:28:02,320
dash f virtual service

772
00:28:02,320 --> 00:28:05,120
reviews

773
00:28:06,159 --> 00:28:09,440
80 20. okay

774
00:28:09,440 --> 00:28:11,360
now that we've reconfigured that virtual

775
00:28:11,360 --> 00:28:13,919
service if we come here

776
00:28:13,919 --> 00:28:15,919
the majority of the time we won't get

777
00:28:15,919 --> 00:28:17,120
reviews

778
00:28:17,120 --> 00:28:19,600
but every so often we will get the

779
00:28:19,600 --> 00:28:20,399
reviews

780
00:28:20,399 --> 00:28:22,559
and we'll start to see those stars

781
00:28:22,559 --> 00:28:24,640
that's really cool

782
00:28:24,640 --> 00:28:27,760
we did that live traffic shaping okay so

783
00:28:27,760 --> 00:28:30,159
we validated that version 2 works let's

784
00:28:30,159 --> 00:28:32,480
flip completely over to version 2.

785
00:28:32,480 --> 00:28:35,039
here in this one it's only going to

786
00:28:35,039 --> 00:28:36,000
version 2.

787
00:28:36,000 --> 00:28:41,600
cubectl apply reviews v2

788
00:28:41,840 --> 00:28:46,240
and now we will only get version 2.

789
00:28:46,480 --> 00:28:50,000
that's perfect well now we want to do

790
00:28:50,000 --> 00:28:51,279
some testing

791
00:28:51,279 --> 00:28:54,960
um for those people who dig into

792
00:28:54,960 --> 00:28:58,960
the canary channel the beta channel

793
00:28:58,960 --> 00:29:01,440
we want to be able to give them version

794
00:29:01,440 --> 00:29:02,159
three

795
00:29:02,159 --> 00:29:04,799
but for those people who don't we'll

796
00:29:04,799 --> 00:29:06,720
give them version two

797
00:29:06,720 --> 00:29:08,320
so i think that actually might be

798
00:29:08,320 --> 00:29:10,720
backwards

799
00:29:10,720 --> 00:29:12,880
so we're unauthenticated and we're

800
00:29:12,880 --> 00:29:14,240
getting version two

801
00:29:14,240 --> 00:29:16,240
let's sign in and we'll sign in with

802
00:29:16,240 --> 00:29:19,279
username jason

803
00:29:21,760 --> 00:29:26,080
now we're signed in as jason and now

804
00:29:26,080 --> 00:29:28,480
we will get oh i expected that to be

805
00:29:28,480 --> 00:29:29,520
version three

806
00:29:29,520 --> 00:29:31,360
oh we haven't applied it yet let's apply

807
00:29:31,360 --> 00:29:32,640
it

808
00:29:32,640 --> 00:29:36,880
cube ctl apply dash f

809
00:29:36,880 --> 00:29:41,840
virtual service reviews

810
00:29:42,559 --> 00:29:47,120
jason okay now we've got it

811
00:29:47,120 --> 00:29:49,440
so now that we're jason we see version

812
00:29:49,440 --> 00:29:51,120
two

813
00:29:51,120 --> 00:29:54,080
if we log out now we'll see version

814
00:29:54,080 --> 00:29:56,399
three

815
00:29:57,679 --> 00:30:00,000
that's really cool we are able to grab a

816
00:30:00,000 --> 00:30:00,880
header and

817
00:30:00,880 --> 00:30:02,960
route traffic to different places based

818
00:30:02,960 --> 00:30:04,799
on that header

819
00:30:04,799 --> 00:30:07,840
okay so maybe let's do an experiment

820
00:30:07,840 --> 00:30:09,520
let's split half the traffic between

821
00:30:09,520 --> 00:30:10,240
version two

822
00:30:10,240 --> 00:30:11,840
and half the traffic between version

823
00:30:11,840 --> 00:30:13,919
three

824
00:30:13,919 --> 00:30:18,080
cube ctl apply reviews v2

825
00:30:18,080 --> 00:30:21,279
v3 okay

826
00:30:21,279 --> 00:30:24,000
half the time we've got version two half

827
00:30:24,000 --> 00:30:26,960
the time we have version three

828
00:30:26,960 --> 00:30:29,200
and now we're able to test these two

829
00:30:29,200 --> 00:30:31,279
which one helps our users be most

830
00:30:31,279 --> 00:30:33,760
effective

831
00:30:33,919 --> 00:30:35,919
i think version two is working pretty or

832
00:30:35,919 --> 00:30:37,840
version three is working pretty well

833
00:30:37,840 --> 00:30:40,399
so let's flip everything to version

834
00:30:40,399 --> 00:30:42,000
three

835
00:30:42,000 --> 00:30:46,880
cube ctl apply v3

836
00:30:47,200 --> 00:30:50,080
there we go now everything is moved to

837
00:30:50,080 --> 00:30:52,320
version 3 and we will always get version

838
00:30:52,320 --> 00:30:54,240
3.

839
00:30:54,240 --> 00:30:56,960
we saw how easy it was to configure

840
00:30:56,960 --> 00:30:58,240
istio

841
00:30:58,240 --> 00:30:59,840
to be able to route traffic in

842
00:30:59,840 --> 00:31:01,840
interesting ways we saw how

843
00:31:01,840 --> 00:31:05,360
fast it was to get link or d spun up

844
00:31:05,360 --> 00:31:07,840
console and open service mesh are also

845
00:31:07,840 --> 00:31:09,519
great service meshes and being able to

846
00:31:09,519 --> 00:31:12,640
do interesting things

847
00:31:13,360 --> 00:31:15,679
so let's take a tour through what we saw

848
00:31:15,679 --> 00:31:18,640
with service meshes we are able to

849
00:31:18,640 --> 00:31:19,440
monitor

850
00:31:19,440 --> 00:31:22,880
log and mon do monitoring

851
00:31:22,880 --> 00:31:25,360
logging and service health observe

852
00:31:25,360 --> 00:31:26,000
control

853
00:31:26,000 --> 00:31:29,039
secure taking a step up

854
00:31:29,039 --> 00:31:31,360
we can do a tell intelligent routing

855
00:31:31,360 --> 00:31:33,200
where we can start to route traffic

856
00:31:33,200 --> 00:31:34,080
based on

857
00:31:34,080 --> 00:31:36,159
maybe a b tests or maybe circuit

858
00:31:36,159 --> 00:31:39,039
breakers or maybe beta channels

859
00:31:39,039 --> 00:31:41,440
taking a step up again we can now take a

860
00:31:41,440 --> 00:31:44,080
look at the network topology the logging

861
00:31:44,080 --> 00:31:44,720
the

862
00:31:44,720 --> 00:31:47,760
details around our system in what's

863
00:31:47,760 --> 00:31:50,240
actually happening not just what we

864
00:31:50,240 --> 00:31:51,440
assume is happening

865
00:31:51,440 --> 00:31:53,760
based on the way the developer has

866
00:31:53,760 --> 00:31:55,679
explained it to us

867
00:31:55,679 --> 00:31:58,159
if a service is misbehaving we can route

868
00:31:58,159 --> 00:32:02,799
traffic around it that's perfect

869
00:32:04,080 --> 00:32:06,640
zach butcher wrote the book on istio and

870
00:32:06,640 --> 00:32:07,200
he says

871
00:32:07,200 --> 00:32:09,279
if it doesn't have a control plane it

872
00:32:09,279 --> 00:32:11,279
ain't a service mesh

873
00:32:11,279 --> 00:32:15,039
i completely agree and to that end

874
00:32:15,039 --> 00:32:17,760
there is an implementation cost with the

875
00:32:17,760 --> 00:32:18,720
service mesh

876
00:32:18,720 --> 00:32:20,480
we have a regular kubernetes cluster

877
00:32:20,480 --> 00:32:22,720
here on the left and we're adding to it

878
00:32:22,720 --> 00:32:24,480
all the pieces of the service mesh on

879
00:32:24,480 --> 00:32:25,760
the right

880
00:32:25,760 --> 00:32:28,480
in a kubernetes cluster we have the cube

881
00:32:28,480 --> 00:32:29,200
proxy

882
00:32:29,200 --> 00:32:31,200
we have etcd we have the controller

883
00:32:31,200 --> 00:32:32,720
manager

884
00:32:32,720 --> 00:32:34,320
with the service mesh we have the

885
00:32:34,320 --> 00:32:36,000
service meshes control plane

886
00:32:36,000 --> 00:32:39,039
the uh the piece that does

887
00:32:39,039 --> 00:32:40,960
spinning up certificates the piece that

888
00:32:40,960 --> 00:32:42,320
validates the

889
00:32:42,320 --> 00:32:45,120
routing rules

890
00:32:45,840 --> 00:32:48,320
with a server with a kubernetes cluster

891
00:32:48,320 --> 00:32:49,760
we have the pods

892
00:32:49,760 --> 00:32:51,679
the containers that are running our

893
00:32:51,679 --> 00:32:53,519
particular workload

894
00:32:53,519 --> 00:32:55,440
with the service mesh we have all those

895
00:32:55,440 --> 00:32:58,640
sidecar proxy containers

896
00:32:58,640 --> 00:33:01,200
in truth we'll probably end up with

897
00:33:01,200 --> 00:33:02,240
about

898
00:33:02,240 --> 00:33:04,080
double the number of containers by

899
00:33:04,080 --> 00:33:07,039
choosing to include a service mesh

900
00:33:07,039 --> 00:33:09,919
now maybe your workload that spins up a

901
00:33:09,919 --> 00:33:11,679
java application or is

902
00:33:11,679 --> 00:33:14,799
doing intensive gpu calculations

903
00:33:14,799 --> 00:33:18,320
is bigger than the calculations involved

904
00:33:18,320 --> 00:33:19,760
in creating self-sign

905
00:33:19,760 --> 00:33:23,120
or creating trusted certificates or

906
00:33:23,120 --> 00:33:27,679
connecting two different services but

907
00:33:27,679 --> 00:33:30,240
we may expect maybe one and a half to

908
00:33:30,240 --> 00:33:31,279
two times

909
00:33:31,279 --> 00:33:33,519
the workload running in our cluster as

910
00:33:33,519 --> 00:33:35,919
we implement a service mesh

911
00:33:35,919 --> 00:33:39,200
now that can require us to create a

912
00:33:39,200 --> 00:33:39,840
bigger

913
00:33:39,840 --> 00:33:41,840
more expensive cluster to run a service

914
00:33:41,840 --> 00:33:44,320
mesh now that's okay

915
00:33:44,320 --> 00:33:46,399
but understand that there are costs

916
00:33:46,399 --> 00:33:47,919
involved in building a service mesh we

917
00:33:47,919 --> 00:33:50,159
don't just get this for free

918
00:33:50,159 --> 00:33:51,760
if those costs are worth it for the

919
00:33:51,760 --> 00:33:53,440
benefits that you need then a service

920
00:33:53,440 --> 00:33:55,120
mesh can be ideal

921
00:33:55,120 --> 00:33:57,679
but don't just pull it out just because

922
00:33:57,679 --> 00:33:58,640
it's available

923
00:33:58,640 --> 00:34:03,039
service mesh is not the check box

924
00:34:03,279 --> 00:34:05,200
towards the benefits of service mesh if

925
00:34:05,200 --> 00:34:07,120
i need that to observe

926
00:34:07,120 --> 00:34:09,918
control and secure my cluster a service

927
00:34:09,918 --> 00:34:11,040
mesh is perfect

928
00:34:11,040 --> 00:34:14,239
if i want to do that traffic shaping

929
00:34:14,239 --> 00:34:17,280
if i need to validate access policies or

930
00:34:17,280 --> 00:34:18,000
if i need

931
00:34:18,000 --> 00:34:21,199
security between my microservices then

932
00:34:21,199 --> 00:34:24,480
a service mesh is perfect

933
00:34:24,480 --> 00:34:27,040
some great rules of thumb here use a

934
00:34:27,040 --> 00:34:28,879
service mesh if you're running

935
00:34:28,879 --> 00:34:33,679
trusted workloads like pki or pci

936
00:34:33,679 --> 00:34:35,199
a service mesh if you're running

937
00:34:35,199 --> 00:34:37,679
untrusted workloads together with your

938
00:34:37,679 --> 00:34:39,520
expected workloads you don't want the

939
00:34:39,520 --> 00:34:41,520
untrusted workloads to be able to get

940
00:34:41,520 --> 00:34:42,800
into your normal work

941
00:34:42,800 --> 00:34:44,399
and you don't want your normal work to

942
00:34:44,399 --> 00:34:46,000
spill into the trusted the

943
00:34:46,000 --> 00:34:48,879
extremely sensitive information and so

944
00:34:48,879 --> 00:34:50,719
you can create a service mesh boundary

945
00:34:50,719 --> 00:34:52,639
between those

946
00:34:52,639 --> 00:34:55,040
if you're running multi-tenant workloads

947
00:34:55,040 --> 00:34:56,480
now generally we lean

948
00:34:56,480 --> 00:34:59,200
on kupernete's namespaces for this but

949
00:34:59,200 --> 00:35:01,040
kubernetes namespaces are an

950
00:35:01,040 --> 00:35:03,839
organizational boundary not a security

951
00:35:03,839 --> 00:35:04,960
boundary

952
00:35:04,960 --> 00:35:07,680
and so by creating namespaces we're not

953
00:35:07,680 --> 00:35:10,320
securing the tenants between themselves

954
00:35:10,320 --> 00:35:13,760
a service mesh can enforce that boundary

955
00:35:13,760 --> 00:35:17,680
in namespaces if we need security in

956
00:35:17,680 --> 00:35:18,320
depth

957
00:35:18,320 --> 00:35:20,640
then service mesh can be great or if we

958
00:35:20,640 --> 00:35:24,240
need that advanced routing like a b

959
00:35:24,240 --> 00:35:26,480
a b routing or a beta channel then a

960
00:35:26,480 --> 00:35:28,880
service mesh can be great

961
00:35:28,880 --> 00:35:31,200
if you have these needs then definitely

962
00:35:31,200 --> 00:35:32,720
use a service mesh

963
00:35:32,720 --> 00:35:34,320
if you don't have these needs the

964
00:35:34,320 --> 00:35:36,480
additional cost of a service mesh may be

965
00:35:36,480 --> 00:35:39,280
too burdensome

966
00:35:39,599 --> 00:35:42,160
this was a lot of fun getting to speak

967
00:35:42,160 --> 00:35:42,640
at

968
00:35:42,640 --> 00:35:45,040
activity conf if you have questions i'll

969
00:35:45,040 --> 00:35:46,880
be in the conferences

970
00:35:46,880 --> 00:35:49,359
q a channel in a minute or reach out to

971
00:35:49,359 --> 00:35:50,640
me on twitter at

972
00:35:50,640 --> 00:35:53,520
rob underscore rich or grab these slides

973
00:35:53,520 --> 00:35:56,839
right now at robrich.org

974
00:35:56,839 --> 00:35:59,839
thanks

