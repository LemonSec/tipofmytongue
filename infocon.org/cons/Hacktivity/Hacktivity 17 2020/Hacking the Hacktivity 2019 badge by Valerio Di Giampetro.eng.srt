1
00:00:00,399 --> 00:00:02,960
good morning and thank you for joining

2
00:00:02,960 --> 00:00:04,000
this presentation

3
00:00:04,000 --> 00:00:07,759
about hacking the activity 2019 badge

4
00:00:07,759 --> 00:00:10,559
or how to break the device and resurrect

5
00:00:10,559 --> 00:00:10,960
it

6
00:00:10,960 --> 00:00:14,000
with another sound i am valerio di

7
00:00:14,000 --> 00:00:15,679
giampietro i am passionate about

8
00:00:15,679 --> 00:00:18,000
electronics since when i was a child

9
00:00:18,000 --> 00:00:20,400
and for this reason i studied electronic

10
00:00:20,400 --> 00:00:21,199
engineering at

11
00:00:21,199 --> 00:00:24,160
the university on my daily job i am an

12
00:00:24,160 --> 00:00:24,480
i.t

13
00:00:24,480 --> 00:00:26,640
infrastructure manager managing service

14
00:00:26,640 --> 00:00:29,039
but on premise and on the cloud

15
00:00:29,039 --> 00:00:31,439
managing storage networking databases

16
00:00:31,439 --> 00:00:32,320
and so on

17
00:00:32,320 --> 00:00:35,120
i am also a linux enthusiast almost

18
00:00:35,120 --> 00:00:37,040
since the beginning i installed linux

19
00:00:37,040 --> 00:00:39,600
for the first time on my own pc

20
00:00:39,600 --> 00:00:42,640
in 1993. my

21
00:00:42,640 --> 00:00:45,800
personal website is valerio written

22
00:00:45,800 --> 00:00:47,200
esva.ler.io

23
00:00:47,200 --> 00:00:49,360
you will find a copy of this

24
00:00:49,360 --> 00:00:50,239
presentation

25
00:00:50,239 --> 00:00:52,800
and more important links to everything i

26
00:00:52,800 --> 00:00:55,360
will talk about today

27
00:00:55,360 --> 00:00:57,600
my email address is valerio written as

28
00:00:57,600 --> 00:00:59,440
v8ler dot io

29
00:00:59,440 --> 00:01:02,399
and my twitter handle is valerio being a

30
00:01:02,399 --> 00:01:03,120
nerd i am

31
00:01:03,120 --> 00:01:06,320
quite proud of these addresses

32
00:01:06,320 --> 00:01:08,400
i have also a youtube channel called

33
00:01:08,400 --> 00:01:09,760
makemiak

34
00:01:09,760 --> 00:01:12,960
about hard working i started this

35
00:01:12,960 --> 00:01:14,640
youtube channel during the lockdown

36
00:01:14,640 --> 00:01:16,960
period when i had much more time to

37
00:01:16,960 --> 00:01:17,920
dedicate to

38
00:01:17,920 --> 00:01:21,360
this what we will talk about today

39
00:01:21,360 --> 00:01:23,520
basic basically we'll talk about my

40
00:01:23,520 --> 00:01:25,040
journey in hacking

41
00:01:25,040 --> 00:01:27,600
the last year activity badge this is a

42
00:01:27,600 --> 00:01:29,439
lot has a lot to do with

43
00:01:29,439 --> 00:01:32,000
hacking maybe a bit less to do with the

44
00:01:32,000 --> 00:01:33,600
security also if the two

45
00:01:33,600 --> 00:01:37,040
items are very strictly related

46
00:01:37,040 --> 00:01:41,439
i will introduce the activity 2019 badge

47
00:01:41,439 --> 00:01:44,799
i explain how i bricket the page how

48
00:01:44,799 --> 00:01:47,840
i reverse engineered the pcb to

49
00:01:47,840 --> 00:01:48,720
reconstruct

50
00:01:48,720 --> 00:01:50,799
the most important part of the

51
00:01:50,799 --> 00:01:52,880
schematics

52
00:01:52,880 --> 00:01:55,840
then how i used the arduino ide to

53
00:01:55,840 --> 00:01:58,640
reprogram the main processor the s32

54
00:01:58,640 --> 00:02:01,680
processor and how i refreshed the

55
00:02:01,680 --> 00:02:04,000
coprocessor that it is the a number

56
00:02:04,000 --> 00:02:06,880
based summon d21

57
00:02:06,880 --> 00:02:10,000
the activity 2019 page was a nice school

58
00:02:10,000 --> 00:02:11,840
gadget that was distributed

59
00:02:11,840 --> 00:02:14,239
to the attendance at the last year

60
00:02:14,239 --> 00:02:15,120
physical

61
00:02:15,120 --> 00:02:18,319
conference in uh in budapest

62
00:02:18,319 --> 00:02:20,720
it is a it has a lot of interesting

63
00:02:20,720 --> 00:02:21,840
features because

64
00:02:21,840 --> 00:02:25,599
it runs micro python it has connectivity

65
00:02:25,599 --> 00:02:26,000
but

66
00:02:26,000 --> 00:02:29,280
usb wi-fi and infrared connectivity

67
00:02:29,280 --> 00:02:31,040
it is an app store where you can

68
00:02:31,040 --> 00:02:32,640
download applications

69
00:02:32,640 --> 00:02:35,440
written micro python and upload your own

70
00:02:35,440 --> 00:02:36,640
applications

71
00:02:36,640 --> 00:02:40,959
is six nice touch buttons a small

72
00:02:40,959 --> 00:02:45,680
monochrome but nice lcd screen of 128

73
00:02:45,680 --> 00:02:49,360
for 64 bits as six

74
00:02:49,360 --> 00:02:52,480
rgb leds an infrared transmitter and

75
00:02:52,480 --> 00:02:53,360
receiver

76
00:02:53,360 --> 00:02:56,480
is also a buzzer and can be powered by

77
00:02:56,480 --> 00:02:57,040
usb

78
00:02:57,040 --> 00:03:00,480
or by battery it is being designed to be

79
00:03:00,480 --> 00:03:01,680
hacked but

80
00:03:01,680 --> 00:03:04,000
there are no detailed information on

81
00:03:04,000 --> 00:03:04,879
hardware and

82
00:03:04,879 --> 00:03:08,560
firmware about this device

83
00:03:08,560 --> 00:03:11,040
it is a pretty powerful device at its

84
00:03:11,040 --> 00:03:12,480
core there is an s

85
00:03:12,480 --> 00:03:15,840
32 room 32 module that is a

86
00:03:15,840 --> 00:03:20,319
that has a 32-bit dual core extensor cpu

87
00:03:20,319 --> 00:03:23,840
is a 4 megabyte of flash memory

88
00:03:23,840 --> 00:03:27,040
520 kilobyte of static ram

89
00:03:27,040 --> 00:03:29,840
as wi-fi and bluetooth connectivity is a

90
00:03:29,840 --> 00:03:31,360
lot of digital analog

91
00:03:31,360 --> 00:03:34,560
and possibility modulated io pins

92
00:03:34,560 --> 00:03:38,319
support touch sensors can have multiple

93
00:03:38,319 --> 00:03:39,440
serial interface

94
00:03:39,440 --> 00:03:41,680
implementing multiple protocols like

95
00:03:41,680 --> 00:03:44,480
word spi i2c and so on

96
00:03:44,480 --> 00:03:48,640
is also a an ultra-low power mode

97
00:03:48,640 --> 00:03:51,200
the co-processor is also quite powerful

98
00:03:51,200 --> 00:03:53,040
the core accessories needed the mains

99
00:03:53,040 --> 00:03:54,720
the main purpose of the co-processor is

100
00:03:54,720 --> 00:03:56,480
to talk the usb

101
00:03:56,480 --> 00:03:59,760
uh interface because the esp32 doesn't

102
00:03:59,760 --> 00:04:00,879
support the usb

103
00:04:00,879 --> 00:04:05,518
interface the coprocessor is an atmel

104
00:04:05,560 --> 00:04:07,280
atsmd21g16b

105
00:04:07,280 --> 00:04:10,640
that has a powerful arm cortex

106
00:04:10,640 --> 00:04:14,720
m0 cpu as a small amount of flesh memory

107
00:04:14,720 --> 00:04:16,238
only 64 kilobytes

108
00:04:16,238 --> 00:04:19,519
and a small amount of static ram only 8

109
00:04:19,519 --> 00:04:20,639
kilobyte

110
00:04:20,639 --> 00:04:23,199
as the serial wire debug interface that

111
00:04:23,199 --> 00:04:25,360
interfaces similar to the jtag interface

112
00:04:25,360 --> 00:04:26,400
that allows

113
00:04:26,400 --> 00:04:29,759
to reprogram this chip and to also do

114
00:04:29,759 --> 00:04:30,960
in-circuited debugging

115
00:04:30,960 --> 00:04:34,000
being able to execute step-by-step a

116
00:04:34,000 --> 00:04:34,560
program

117
00:04:34,560 --> 00:04:38,000
directly on the hardware supports the

118
00:04:38,000 --> 00:04:40,880
usb interface as multiple serial

119
00:04:40,880 --> 00:04:44,160
interface implementing various protocols

120
00:04:44,160 --> 00:04:46,320
as digital analog and possibility

121
00:04:46,320 --> 00:04:48,000
modulated input output

122
00:04:48,000 --> 00:04:51,680
pins support touch sensors

123
00:04:51,680 --> 00:04:54,320
how i bricket the device after playing a

124
00:04:54,320 --> 00:04:56,639
bit with the micropython

125
00:04:56,639 --> 00:05:00,400
on this on this board i tried to use the

126
00:05:00,400 --> 00:05:01,840
arduino ide

127
00:05:01,840 --> 00:05:03,840
wrongly assuming that this board was

128
00:05:03,840 --> 00:05:04,880
similar to some

129
00:05:04,880 --> 00:05:09,440
some board for use for arduino so i

130
00:05:09,440 --> 00:05:13,039
connected my board to my arduino pc

131
00:05:13,039 --> 00:05:15,680
the badge was recognized as another

132
00:05:15,680 --> 00:05:16,479
adafruit

133
00:05:16,479 --> 00:05:19,840
playground express board i

134
00:05:19,840 --> 00:05:21,600
suppose that this was correct so i

135
00:05:21,600 --> 00:05:22,880
loaded the simple

136
00:05:22,880 --> 00:05:26,400
blink sketch that will blink a led

137
00:05:26,400 --> 00:05:28,880
the load was successful but then the

138
00:05:28,880 --> 00:05:30,720
device was bricked bricked means the

139
00:05:30,720 --> 00:05:33,440
device was dead

140
00:05:33,440 --> 00:05:35,919
and the usb was no more recognized by

141
00:05:35,919 --> 00:05:36,560
the pc

142
00:05:36,560 --> 00:05:39,199
plugging or unplugging or the usb

143
00:05:39,199 --> 00:05:40,960
needing to do any effect

144
00:05:40,960 --> 00:05:44,080
on the pc so after this

145
00:05:44,080 --> 00:05:47,280
i asked myself why

146
00:05:47,280 --> 00:05:50,960
this has been wrongly identified as

147
00:05:50,960 --> 00:05:52,240
other fruity playground

148
00:05:52,240 --> 00:05:54,960
express because this board is the one

149
00:05:54,960 --> 00:05:56,000
that you see on

150
00:05:56,000 --> 00:05:59,039
on the slide is a processor this is

151
00:05:59,039 --> 00:06:02,080
almost identical to our processor is an

152
00:06:02,080 --> 00:06:03,199
optimal

153
00:06:03,199 --> 00:06:06,400
uh some d21 g18a

154
00:06:06,400 --> 00:06:09,440
our instead is 16a it is basically

155
00:06:09,440 --> 00:06:11,840
identical to our processor the only

156
00:06:11,840 --> 00:06:13,120
difference is that

157
00:06:13,120 --> 00:06:15,280
it the underground the playground

158
00:06:15,280 --> 00:06:17,680
express is four times more flash

159
00:06:17,680 --> 00:06:20,160
and four times more studying ram

160
00:06:20,160 --> 00:06:20,960
probably

161
00:06:20,960 --> 00:06:24,240
our device our page has been

162
00:06:24,240 --> 00:06:28,240
implemented in some way copying the

163
00:06:28,240 --> 00:06:30,560
the other fruit playground express and

164
00:06:30,560 --> 00:06:31,520
so it was

165
00:06:31,520 --> 00:06:34,560
wrongly recognized but because the flesh

166
00:06:34,560 --> 00:06:37,600
and static ram are different the sketch

167
00:06:37,600 --> 00:06:38,720
that was loaded

168
00:06:38,720 --> 00:06:41,840
probably uh simply breakage the device

169
00:06:41,840 --> 00:06:44,160
and device became

170
00:06:44,160 --> 00:06:47,199
unuseful so the first step

171
00:06:47,199 --> 00:06:49,039
was okay i have to understand what's

172
00:06:49,039 --> 00:06:50,479
going on on the board

173
00:06:50,479 --> 00:06:53,680
how the chips are connected and what

174
00:06:53,680 --> 00:06:56,240
uh signals are available on the

175
00:06:56,240 --> 00:06:57,520
interface so the first step

176
00:06:57,520 --> 00:07:00,639
was to solder pin adders on

177
00:07:00,639 --> 00:07:05,840
the board that ships without pin headers

178
00:07:05,840 --> 00:07:08,160
then try to find the pin adders

179
00:07:08,160 --> 00:07:09,759
connections some connections

180
00:07:09,759 --> 00:07:11,599
were quite easy to find because the

181
00:07:11,599 --> 00:07:14,000
board is is a two layers board and you

182
00:07:14,000 --> 00:07:14,880
are able

183
00:07:14,880 --> 00:07:18,319
to see the traces on the board so

184
00:07:18,319 --> 00:07:20,319
many of them are very quite easy to

185
00:07:20,319 --> 00:07:22,160
follow

186
00:07:22,160 --> 00:07:24,720
obviously you can always confirm the

187
00:07:24,720 --> 00:07:26,720
connection using a multimeter

188
00:07:26,720 --> 00:07:28,560
i also searched on the internet and i

189
00:07:28,560 --> 00:07:30,800
was able to find easy to images that

190
00:07:30,800 --> 00:07:33,520
are images of the top and the bottom of

191
00:07:33,520 --> 00:07:35,120
the printed circuit

192
00:07:35,120 --> 00:07:36,960
also without components so it's quite

193
00:07:36,960 --> 00:07:40,560
easy to follow pcb traces

194
00:07:40,560 --> 00:07:42,479
i also search it on the internet and

195
00:07:42,479 --> 00:07:44,240
found i wasn't able to find the

196
00:07:44,240 --> 00:07:44,879
schematic

197
00:07:44,879 --> 00:07:47,039
of this badge but found i found the

198
00:07:47,039 --> 00:07:47,919
schematic

199
00:07:47,919 --> 00:07:50,720
of a different badge the disobey 2018

200
00:07:50,720 --> 00:07:51,360
badge

201
00:07:51,360 --> 00:07:54,080
that was designed by the same team so

202
00:07:54,080 --> 00:07:54,960
probably

203
00:07:54,960 --> 00:07:58,080
this schematic can be similar to our

204
00:07:58,080 --> 00:07:59,599
schematic

205
00:07:59,599 --> 00:08:02,240
i use the that is the open source i

206
00:08:02,240 --> 00:08:03,280
would say

207
00:08:03,280 --> 00:08:05,360
something similar to photoshop but open

208
00:08:05,360 --> 00:08:06,639
source to follow

209
00:08:06,639 --> 00:08:10,840
the the the image with the pcb

210
00:08:10,840 --> 00:08:14,639
layout but during this activity i

211
00:08:14,639 --> 00:08:17,440
discovered that what i found on internet

212
00:08:17,440 --> 00:08:18,400
the image of the top

213
00:08:18,400 --> 00:08:21,440
bottom of the pcb was not identical

214
00:08:21,440 --> 00:08:24,319
to our finished product for example if

215
00:08:24,319 --> 00:08:26,000
you see on the image i downloaded

216
00:08:26,000 --> 00:08:28,800
from internet i have a connector with

217
00:08:28,800 --> 00:08:29,680
four pins

218
00:08:29,680 --> 00:08:32,880
on the same position in the real board i

219
00:08:32,880 --> 00:08:34,159
have a connector with

220
00:08:34,159 --> 00:08:37,599
17 pins so probably these

221
00:08:37,599 --> 00:08:39,760
images available on internet are related

222
00:08:39,760 --> 00:08:40,958
to some prototype

223
00:08:40,958 --> 00:08:43,599
of our board and then our board was

224
00:08:43,599 --> 00:08:46,480
later modified so what i found

225
00:08:46,480 --> 00:08:49,920
on these two images must be checked

226
00:08:49,920 --> 00:08:52,880
with a multimeter so i followed the

227
00:08:52,880 --> 00:08:53,519
traces

228
00:08:53,519 --> 00:08:56,640
using putting each image

229
00:08:56,640 --> 00:08:58,720
on a separate layer and then alternating

230
00:08:58,720 --> 00:08:59,760
the visibility

231
00:08:59,760 --> 00:09:01,839
of the two layers so it was quite easy

232
00:09:01,839 --> 00:09:04,160
to follow each pcb trace

233
00:09:04,160 --> 00:09:07,360
and reconstruct the schematic but

234
00:09:07,360 --> 00:09:10,000
i also used the similar project as a

235
00:09:10,000 --> 00:09:11,360
hint what they found

236
00:09:11,360 --> 00:09:13,600
relating to the disobey 2018 page the

237
00:09:13,600 --> 00:09:14,959
schematic

238
00:09:14,959 --> 00:09:17,440
i said okay so probably connections are

239
00:09:17,440 --> 00:09:18,800
the same

240
00:09:18,800 --> 00:09:22,160
and also i used as i hint

241
00:09:22,160 --> 00:09:24,399
the data sheet because if you have

242
00:09:24,399 --> 00:09:26,640
another sheet for example a reset pin

243
00:09:26,640 --> 00:09:29,440
probably that reset pin goes to a push

244
00:09:29,440 --> 00:09:29,920
button

245
00:09:29,920 --> 00:09:33,120
to reset the board or if you found

246
00:09:33,120 --> 00:09:35,120
pins that are used to connect the usb

247
00:09:35,120 --> 00:09:37,120
interface probably these two pins will

248
00:09:37,120 --> 00:09:37,440
go

249
00:09:37,440 --> 00:09:40,720
to the usb interface so

250
00:09:40,720 --> 00:09:43,680
uh taking this information that are not

251
00:09:43,680 --> 00:09:45,200
strictly related to our

252
00:09:45,200 --> 00:09:48,399
board but or but from similar boards of

253
00:09:48,399 --> 00:09:51,600
the sheet and so on i confirmed the

254
00:09:51,600 --> 00:09:53,360
connection with the multimeter anyway

255
00:09:53,360 --> 00:09:55,200
this information were useful to speed up

256
00:09:55,200 --> 00:09:57,680
the reconstruct reconstructing of the

257
00:09:57,680 --> 00:09:59,519
schematic

258
00:09:59,519 --> 00:10:02,399
so i was able to identify each connector

259
00:10:02,399 --> 00:10:03,040
was

260
00:10:03,040 --> 00:10:06,399
which signals we have on each connector

261
00:10:06,399 --> 00:10:08,640
and i found interesting things for

262
00:10:08,640 --> 00:10:10,480
example the connector j9

263
00:10:10,480 --> 00:10:14,160
is the i2c bus i2c bus is a serial bus

264
00:10:14,160 --> 00:10:17,200
often used in electronic

265
00:10:17,200 --> 00:10:20,720
circuits it allows a master to talk

266
00:10:20,720 --> 00:10:23,680
to multiple slaves it chooses life as an

267
00:10:23,680 --> 00:10:24,880
address in this way

268
00:10:24,880 --> 00:10:27,600
we can see what's going on on the board

269
00:10:27,600 --> 00:10:28,560
monitoring

270
00:10:28,560 --> 00:10:32,560
these um i2c pins the j-10 connector

271
00:10:32,560 --> 00:10:36,079
exposes a lot of pins of the s-32 main

272
00:10:36,079 --> 00:10:38,160
processor it is can be used

273
00:10:38,160 --> 00:10:41,440
to attach sensors switches

274
00:10:41,440 --> 00:10:45,200
additional peripherals to our badge

275
00:10:45,200 --> 00:10:47,200
the j11 connector is a very interesting

276
00:10:47,200 --> 00:10:48,480
connector because it

277
00:10:48,480 --> 00:10:52,320
exposes the serial wired debug interface

278
00:10:52,320 --> 00:10:55,200
of the same d21 co-processor that is an

279
00:10:55,200 --> 00:10:56,959
armor-based compressor

280
00:10:56,959 --> 00:10:59,600
the serial wire debug interface is very

281
00:10:59,600 --> 00:11:00,079
similar

282
00:11:00,079 --> 00:11:02,880
to the jtag interface because it allows

283
00:11:02,880 --> 00:11:03,760
to reprogram

284
00:11:03,760 --> 00:11:07,040
the device and to use this interface as

285
00:11:07,040 --> 00:11:09,440
a debugging support to do in-circuit

286
00:11:09,440 --> 00:11:10,480
debugging

287
00:11:10,480 --> 00:11:12,959
here we have the two pins so this is

288
00:11:12,959 --> 00:11:14,160
these interface

289
00:11:14,160 --> 00:11:16,800
that are the data input output at the

290
00:11:16,800 --> 00:11:17,519
clock

291
00:11:17,519 --> 00:11:20,720
plus ground vcc and the reset pin

292
00:11:20,720 --> 00:11:24,160
of the co the coprocessor the pin

293
00:11:24,160 --> 00:11:27,279
adder j12 exposes other pins

294
00:11:27,279 --> 00:11:30,959
of the s-32 main processor one of these

295
00:11:30,959 --> 00:11:31,839
pins is uh

296
00:11:31,839 --> 00:11:33,600
quite interesting for our purpose

297
00:11:33,600 --> 00:11:35,279
because it's the so-called bootloader

298
00:11:35,279 --> 00:11:35,600
pin

299
00:11:35,600 --> 00:11:39,839
this means that if we reset the sp32

300
00:11:39,839 --> 00:11:42,959
and keep low this pin during the reset

301
00:11:42,959 --> 00:11:46,079
the sp32 will enter the bootloader mode

302
00:11:46,079 --> 00:11:49,040
and will allow to load a firmware

303
00:11:49,040 --> 00:11:52,240
through the serial interface

304
00:11:52,240 --> 00:11:55,360
the j13 connector is the

305
00:11:55,360 --> 00:11:58,160
circle interface of the s32 we have the

306
00:11:58,160 --> 00:11:58,720
tx

307
00:11:58,720 --> 00:12:01,760
rx and ground connection

308
00:12:01,760 --> 00:12:04,160
on the bottom of the board we have two

309
00:12:04,160 --> 00:12:05,200
switches

310
00:12:05,200 --> 00:12:07,040
we don't have the actual switches only

311
00:12:07,040 --> 00:12:08,639
the pathway the switches we can

312
00:12:08,639 --> 00:12:11,360
put by ourselves but anyway we have two

313
00:12:11,360 --> 00:12:12,560
switches one is

314
00:12:12,560 --> 00:12:16,000
to reset the co-processor the summer d21

315
00:12:16,000 --> 00:12:17,279
arm co processor

316
00:12:17,279 --> 00:12:19,200
and the other one is to put in a

317
00:12:19,200 --> 00:12:20,399
bootloader mode

318
00:12:20,399 --> 00:12:22,880
the summer d21 co processor obviously to

319
00:12:22,880 --> 00:12:25,040
put input to loader mode

320
00:12:25,040 --> 00:12:28,079
you have to reset the the coprocessor

321
00:12:28,079 --> 00:12:30,079
keeping low this pin

322
00:12:30,079 --> 00:12:33,600
but to put in bootloader mode you have

323
00:12:33,600 --> 00:12:35,279
a bootloader functioning of the

324
00:12:35,279 --> 00:12:37,279
co-processor i break the device so this

325
00:12:37,279 --> 00:12:38,079
this

326
00:12:38,079 --> 00:12:40,399
was no more functioning because i

327
00:12:40,399 --> 00:12:41,440
destroyed

328
00:12:41,440 --> 00:12:44,880
also the bootloader

329
00:12:44,880 --> 00:12:48,000
and i also found the main connections

330
00:12:48,000 --> 00:12:49,120
between

331
00:12:49,120 --> 00:12:51,680
main processor co-processor and display

332
00:12:51,680 --> 00:12:53,519
the most important connection

333
00:12:53,519 --> 00:12:56,320
is that the the co-processor used this

334
00:12:56,320 --> 00:12:58,880
uart serial interface to talk to the

335
00:12:58,880 --> 00:12:59,920
sp32

336
00:12:59,920 --> 00:13:02,720
and act as a bridge between the usb

337
00:13:02,720 --> 00:13:03,760
interface

338
00:13:03,760 --> 00:13:07,920
and the s-32 then we have the i2c

339
00:13:07,920 --> 00:13:09,519
interface the serial interface that

340
00:13:09,519 --> 00:13:10,480
connect the

341
00:13:10,480 --> 00:13:12,480
main processor the sp32 that is the

342
00:13:12,480 --> 00:13:13,760
master

343
00:13:13,760 --> 00:13:16,959
in this network the some d21 coprocessor

344
00:13:16,959 --> 00:13:18,959
is one slave and the display is the

345
00:13:18,959 --> 00:13:21,360
other slave

346
00:13:21,360 --> 00:13:23,920
and then the somebody 21 co-processor is

347
00:13:23,920 --> 00:13:25,040
the possibility

348
00:13:25,040 --> 00:13:27,760
to reset the main processor driving the

349
00:13:27,760 --> 00:13:28,240
n

350
00:13:28,240 --> 00:13:31,040
the en pin and pin is enabled is the

351
00:13:31,040 --> 00:13:32,160
reset pin

352
00:13:32,160 --> 00:13:34,560
and also being able to drive the

353
00:13:34,560 --> 00:13:37,040
bootloader pin so the co-processor can

354
00:13:37,040 --> 00:13:39,839
reset the main processor and can also

355
00:13:39,839 --> 00:13:41,279
put the main processor

356
00:13:41,279 --> 00:13:43,760
in a bootloader mode to load the

357
00:13:43,760 --> 00:13:44,320
firmware

358
00:13:44,320 --> 00:13:47,519
inside this 32

359
00:13:47,519 --> 00:13:51,120
the sum d21 co processor not only

360
00:13:51,120 --> 00:13:54,079
drives the usb interface but also all

361
00:13:54,079 --> 00:13:55,920
the touch buttons that are available on

362
00:13:55,920 --> 00:13:56,639
the board

363
00:13:56,639 --> 00:13:58,880
and all the rgb leds available on the

364
00:13:58,880 --> 00:13:59,680
bolt

365
00:13:59,680 --> 00:14:01,920
are attached to the coprocessor so this

366
00:14:01,920 --> 00:14:03,440
means that the processor will

367
00:14:03,440 --> 00:14:06,079
read the touch buttons and will switch

368
00:14:06,079 --> 00:14:07,279
on and switch off the led

369
00:14:07,279 --> 00:14:10,240
and the main processor will ask to the

370
00:14:10,240 --> 00:14:11,199
co-processor

371
00:14:11,199 --> 00:14:14,320
to do these operations on his behalf

372
00:14:14,320 --> 00:14:19,120
using the i2c serial bus

373
00:14:19,920 --> 00:14:22,880
so i my idea was to use to be able to

374
00:14:22,880 --> 00:14:23,360
use the

375
00:14:23,360 --> 00:14:26,880
s32 using the arduino ide so first step

376
00:14:26,880 --> 00:14:30,079
was okay let me check if i can use the

377
00:14:30,079 --> 00:14:31,440
sp32

378
00:14:31,440 --> 00:14:34,160
directly with the arduinoid interface

379
00:14:34,160 --> 00:14:35,360
and because

380
00:14:35,360 --> 00:14:37,839
we have exposed the serial interface on

381
00:14:37,839 --> 00:14:38,720
the board

382
00:14:38,720 --> 00:14:41,920
i could attach a ttl serial adapter

383
00:14:41,920 --> 00:14:44,399
to connect to this area interface into a

384
00:14:44,399 --> 00:14:45,120
pc

385
00:14:45,120 --> 00:14:48,639
running arduino then i can use

386
00:14:48,639 --> 00:14:52,399
a jumper to put load bootloader mode

387
00:14:52,399 --> 00:14:55,279
during reset to have a desperate to

388
00:14:55,279 --> 00:14:55,920
enter

389
00:14:55,920 --> 00:14:59,199
the bootloader mode to load the firmware

390
00:14:59,199 --> 00:15:01,360
then i can reset the board unplugging

391
00:15:01,360 --> 00:15:04,480
and replacing the power that is the usb

392
00:15:04,480 --> 00:15:07,600
connector and

393
00:15:07,600 --> 00:15:10,079
in this way the sp3 will enter

394
00:15:10,079 --> 00:15:11,199
bootloader mode

395
00:15:11,199 --> 00:15:13,920
and i will be able to the arduino ide to

396
00:15:13,920 --> 00:15:14,480
load

397
00:15:14,480 --> 00:15:18,000
a simple sketch then i can

398
00:15:18,000 --> 00:15:20,880
remove the jumper reset again the board

399
00:15:20,880 --> 00:15:21,519
i'm plugging

400
00:15:21,519 --> 00:15:24,480
replacing the power the usb interface

401
00:15:24,480 --> 00:15:25,680
and it is way

402
00:15:25,680 --> 00:15:28,800
my sketch will run

403
00:15:28,800 --> 00:15:33,199
now a simple demo of this approach

404
00:15:36,160 --> 00:15:40,720
so yeah we have our activity page

405
00:15:40,720 --> 00:15:43,360
here there is the cellular connection

406
00:15:43,360 --> 00:15:43,759
with

407
00:15:43,759 --> 00:15:46,959
a ttl serial adapter

408
00:15:46,959 --> 00:15:49,600
here there is the put rotor switch with

409
00:15:49,600 --> 00:15:50,880
the jumper

410
00:15:50,880 --> 00:15:53,360
that activate the boot rollers which

411
00:15:53,360 --> 00:15:54,720
because one is ground

412
00:15:54,720 --> 00:15:56,240
and the other pin is the bootloader

413
00:15:56,240 --> 00:15:58,480
switch and here

414
00:15:58,480 --> 00:16:01,680
i connected a led connected to

415
00:16:01,680 --> 00:16:04,720
the gpio21 it is the red

416
00:16:04,720 --> 00:16:08,079
cable and to ground it is the

417
00:16:08,079 --> 00:16:11,519
green cable now

418
00:16:11,519 --> 00:16:15,199
powering up the device the s32

419
00:16:15,199 --> 00:16:18,639
should enter the bootloader mode

420
00:16:18,639 --> 00:16:21,199
after you power up the device we also

421
00:16:21,199 --> 00:16:22,560
attach

422
00:16:22,560 --> 00:16:25,759
the usb dtl serial adapter

423
00:16:25,759 --> 00:16:28,959
to our pc

424
00:16:29,600 --> 00:16:33,040
we can check using a

425
00:16:33,040 --> 00:16:36,320
put tty terminal emulator we can check

426
00:16:36,320 --> 00:16:37,279
that it

427
00:16:37,279 --> 00:16:41,519
has really entered the bootloader mode

428
00:16:41,519 --> 00:16:45,199
to be sure we power down

429
00:16:45,199 --> 00:16:49,199
and power up again and we can see

430
00:16:49,199 --> 00:16:52,000
that on the serial console we receive

431
00:16:52,000 --> 00:16:52,800
the message

432
00:16:52,800 --> 00:16:56,560
waiting for download this means that s32

433
00:16:56,560 --> 00:16:59,680
is ready to download

434
00:16:59,680 --> 00:17:02,959
a new sketch

435
00:17:03,040 --> 00:17:06,640
so we close the youtube ui

436
00:17:06,640 --> 00:17:10,079
and download this simple

437
00:17:10,079 --> 00:17:12,720
sketch this sketch you can see basically

438
00:17:12,720 --> 00:17:13,760
print

439
00:17:13,760 --> 00:17:17,599
a let down message on the serial console

440
00:17:17,599 --> 00:17:21,359
light the lent delay alpha second

441
00:17:21,359 --> 00:17:23,839
another message to send a console with

442
00:17:23,839 --> 00:17:24,880
led off

443
00:17:24,880 --> 00:17:28,559
and then switch the led off

444
00:17:28,559 --> 00:17:31,280
wait half a second again in the cycle

445
00:17:31,280 --> 00:17:32,320
repeat

446
00:17:32,320 --> 00:17:35,679
you can see that now it is

447
00:17:35,679 --> 00:17:38,640
low the arduino ide is loading the

448
00:17:38,640 --> 00:17:39,440
sketch

449
00:17:39,440 --> 00:17:42,480
at the end it says are the setting via

450
00:17:42,480 --> 00:17:46,559
ritspin but the rf the rts pin is not

451
00:17:46,559 --> 00:17:47,200
connected

452
00:17:47,200 --> 00:17:49,840
so this means that arduino e id is not

453
00:17:49,840 --> 00:17:51,440
able to reset

454
00:17:51,440 --> 00:17:54,799
the s32 so we have to reset manually

455
00:17:54,799 --> 00:17:58,559
first of all we disconnect the jumper to

456
00:17:58,559 --> 00:18:00,080
select the bootloader so

457
00:18:00,080 --> 00:18:03,280
next time it will boot normally

458
00:18:03,280 --> 00:18:07,200
we disconnect also the usb cable

459
00:18:07,200 --> 00:18:09,440
because otherwise there is some

460
00:18:09,440 --> 00:18:11,200
possibility that the power

461
00:18:11,200 --> 00:18:13,840
goes through the usb cable to the board

462
00:18:13,840 --> 00:18:14,720
and

463
00:18:14,720 --> 00:18:18,400
it will not reset correctly we power

464
00:18:18,400 --> 00:18:20,320
down

465
00:18:20,320 --> 00:18:23,600
power up again and we can see

466
00:18:23,600 --> 00:18:25,760
that this sketch has been successfully

467
00:18:25,760 --> 00:18:27,200
loaded because

468
00:18:27,200 --> 00:18:30,799
the lead is blinking half a second on

469
00:18:30,799 --> 00:18:31,679
half a second

470
00:18:31,679 --> 00:18:35,280
off we can also see

471
00:18:35,280 --> 00:18:38,799
that something is printed on the serial

472
00:18:38,799 --> 00:18:39,520
console

473
00:18:39,520 --> 00:18:43,200
as per our sketch we execute again

474
00:18:43,200 --> 00:18:46,320
the terminal emulator select

475
00:18:46,320 --> 00:18:49,520
the comp 9 interface

476
00:18:49,520 --> 00:18:53,360
open and we can see that it is printing

477
00:18:53,360 --> 00:18:56,640
led on led off as in the

478
00:18:56,640 --> 00:18:59,200
per hour sketch so basically we have

479
00:18:59,200 --> 00:19:00,400
successfully

480
00:19:00,400 --> 00:19:03,600
loaded this sketch on and the esp

481
00:19:03,600 --> 00:19:08,320
tutu using the arduino ide

482
00:19:08,880 --> 00:19:11,360
one important thing to note is that my

483
00:19:11,360 --> 00:19:13,120
the co-processor

484
00:19:13,120 --> 00:19:15,440
was bricked brigade means that basically

485
00:19:15,440 --> 00:19:17,120
nothing was running or casual

486
00:19:17,120 --> 00:19:18,080
instructions

487
00:19:18,080 --> 00:19:20,960
were running and by default when the

488
00:19:20,960 --> 00:19:22,720
co-processor of this armor chip

489
00:19:22,720 --> 00:19:25,919
powered on by default every i o pin are

490
00:19:25,919 --> 00:19:26,720
automatically

491
00:19:26,720 --> 00:19:29,679
configured as input pin so this co

492
00:19:29,679 --> 00:19:30,559
processor was

493
00:19:30,559 --> 00:19:33,600
not driving the tx pin for this reason i

494
00:19:33,600 --> 00:19:33,919
was

495
00:19:33,919 --> 00:19:37,520
able to program the sp32 through the

496
00:19:37,520 --> 00:19:41,039
through the interface the j13 connector

497
00:19:41,039 --> 00:19:44,320
because otherwise the some d21 would

498
00:19:44,320 --> 00:19:47,520
drive the tx pin it it will win because

499
00:19:47,520 --> 00:19:48,720
we'll go directly

500
00:19:48,720 --> 00:19:51,280
to the sp32 pin instead on the interface

501
00:19:51,280 --> 00:19:52,240
we have

502
00:19:52,240 --> 00:19:55,440
a serial resistor if you have

503
00:19:55,440 --> 00:19:58,559
a functioning badge this example will

504
00:19:58,559 --> 00:20:00,480
not function to have it function you

505
00:20:00,480 --> 00:20:02,240
have auto brick

506
00:20:02,240 --> 00:20:05,280
the device or you have to put

507
00:20:05,280 --> 00:20:06,880
the somebody 21 co processor in

508
00:20:06,880 --> 00:20:08,559
bootloader mode because in bootloader

509
00:20:08,559 --> 00:20:09,760
mode

510
00:20:09,760 --> 00:20:12,720
all out input output pins are

511
00:20:12,720 --> 00:20:14,159
automatically configured as

512
00:20:14,159 --> 00:20:16,880
input pins

513
00:20:18,720 --> 00:20:21,760
once uh i i was successfully to use the

514
00:20:21,760 --> 00:20:22,640
arduino ide

515
00:20:22,640 --> 00:20:26,080
i wanted also to reflection some d21 arm

516
00:20:26,080 --> 00:20:27,520
coprocessor y

517
00:20:27,520 --> 00:20:29,760
the first reason is that i want to use

518
00:20:29,760 --> 00:20:31,120
the av label

519
00:20:31,120 --> 00:20:33,679
usb interface on the board to program

520
00:20:33,679 --> 00:20:36,159
this 32 with arduino ide without

521
00:20:36,159 --> 00:20:39,440
using additional circuitry like a ttl

522
00:20:39,440 --> 00:20:43,120
serial adapter to do solder some d21

523
00:20:43,120 --> 00:20:44,559
core processor i have to read

524
00:20:44,559 --> 00:20:47,039
from the usb cell interface and they

525
00:20:47,039 --> 00:20:48,559
have to write

526
00:20:48,559 --> 00:20:51,039
to the sp32 serial interface and vice

527
00:20:51,039 --> 00:20:51,760
versa

528
00:20:51,760 --> 00:20:55,200
making a serial bridge i also want to

529
00:20:55,200 --> 00:20:56,880
use which one is which of the leds that

530
00:20:56,880 --> 00:20:57,120
are

531
00:20:57,120 --> 00:21:00,400
attached to the to the sub d21

532
00:21:00,400 --> 00:21:03,679
and i also want to use the touch buttons

533
00:21:03,679 --> 00:21:05,919
that are attached to the summon d21 so

534
00:21:05,919 --> 00:21:07,120
for this reason i

535
00:21:07,120 --> 00:21:10,480
i want to re rewrite a simple firmware

536
00:21:10,480 --> 00:21:14,080
on this co-processor uh

537
00:21:14,080 --> 00:21:17,440
and interface it with the s32

538
00:21:17,440 --> 00:21:20,400
to do so to to reflect at least i need a

539
00:21:20,400 --> 00:21:21,840
hardware to refresh

540
00:21:21,840 --> 00:21:24,720
as some probe to reflect on the page we

541
00:21:24,720 --> 00:21:24,960
have

542
00:21:24,960 --> 00:21:27,039
the serial wire debug interface that can

543
00:21:27,039 --> 00:21:28,480
be used to refresh

544
00:21:28,480 --> 00:21:31,679
the device and we can use but

545
00:21:31,679 --> 00:21:33,840
we have to use a simple interface we can

546
00:21:33,840 --> 00:21:35,200
use a probe

547
00:21:35,200 --> 00:21:36,720
one of the problem the problem that i

548
00:21:36,720 --> 00:21:39,520
used that i strongly recommend to use is

549
00:21:39,520 --> 00:21:40,240
the segger

550
00:21:40,240 --> 00:21:42,880
j-link a domini it is a very small

551
00:21:42,880 --> 00:21:44,400
problem but very good

552
00:21:44,400 --> 00:21:47,440
prop that is very well supported by open

553
00:21:47,440 --> 00:21:47,840
source

554
00:21:47,840 --> 00:21:50,880
tools and also by proprietary tools like

555
00:21:50,880 --> 00:21:52,480
atmel studio

556
00:21:52,480 --> 00:21:55,360
it is quite cheap it is the ed versions

557
00:21:55,360 --> 00:21:57,360
and version means that you can use for

558
00:21:57,360 --> 00:21:57,840
ob

559
00:21:57,840 --> 00:22:00,159
or for educational purposes but you can

560
00:22:00,159 --> 00:22:01,120
cannot

561
00:22:01,120 --> 00:22:05,200
use it for professional use to make

562
00:22:05,200 --> 00:22:06,400
money which is to make

563
00:22:06,400 --> 00:22:08,400
to use for professional use you have to

564
00:22:08,400 --> 00:22:09,840
use a normal

565
00:22:09,840 --> 00:22:11,840
jailing probe that will cost a few

566
00:22:11,840 --> 00:22:13,600
hundreds dollars but

567
00:22:13,600 --> 00:22:15,840
has more or less the same capabilities

568
00:22:15,840 --> 00:22:17,280
over this probe

569
00:22:17,280 --> 00:22:19,440
there are also some other alternatives

570
00:22:19,440 --> 00:22:21,200
alternatives one very popular

571
00:22:21,200 --> 00:22:22,640
alternative is a breakout

572
00:22:22,640 --> 00:22:26,640
board based on the ft-22 2232 chip that

573
00:22:26,640 --> 00:22:27,120
is a chip

574
00:22:27,120 --> 00:22:29,440
that is on one side the usb interface

575
00:22:29,440 --> 00:22:30,799
and on the other side

576
00:22:30,799 --> 00:22:33,200
it has two serial interface where you

577
00:22:33,200 --> 00:22:34,960
can program multiple protocols

578
00:22:34,960 --> 00:22:38,559
including jtag swd and so on

579
00:22:38,559 --> 00:22:41,440
but is a interface you have to use with

580
00:22:41,440 --> 00:22:43,440
an open source software like

581
00:22:43,440 --> 00:22:46,640
open ocd and it's not integrated in

582
00:22:46,640 --> 00:22:49,520
make commercial software like utml

583
00:22:49,520 --> 00:22:52,159
studio a bit more complicated to use but

584
00:22:52,159 --> 00:22:54,240
a good alternatives some other

585
00:22:54,240 --> 00:22:55,760
alternatives

586
00:22:55,760 --> 00:22:57,840
were popular in the past but today are

587
00:22:57,840 --> 00:22:59,280
not more so used

588
00:22:59,280 --> 00:23:02,159
like bass blaster based on the same chip

589
00:23:02,159 --> 00:23:03,520
but more expensive

590
00:23:03,520 --> 00:23:06,880
or bus pyrate that is very versatile but

591
00:23:06,880 --> 00:23:10,320
is also slower and anyway it also more

592
00:23:10,320 --> 00:23:12,960
expensive

593
00:23:13,120 --> 00:23:15,679
once we have we know how to refresh the

594
00:23:15,679 --> 00:23:17,039
firmware we have developed

595
00:23:17,039 --> 00:23:19,039
we have to develop the simple firmware

596
00:23:19,039 --> 00:23:20,400
that does

597
00:23:20,400 --> 00:23:22,960
what we want uh to develop the firmware

598
00:23:22,960 --> 00:23:24,480
the natural choice is to use

599
00:23:24,480 --> 00:23:27,600
utml studio that is the the suite

600
00:23:27,600 --> 00:23:30,880
of tools com the integrated the id

601
00:23:30,880 --> 00:23:34,400
uh integrated tools to develop firmware

602
00:23:34,400 --> 00:23:35,280
for the

603
00:23:35,280 --> 00:23:38,240
uh for atmel chips it is freely

604
00:23:38,240 --> 00:23:39,919
available so you can download

605
00:23:39,919 --> 00:23:42,159
and install but it has some other box

606
00:23:42,159 --> 00:23:44,960
first of all is windows only

607
00:23:44,960 --> 00:23:46,960
usually i am forced to use windows

608
00:23:46,960 --> 00:23:49,200
during my daily job but outside of my

609
00:23:49,200 --> 00:23:50,960
daily job i

610
00:23:50,960 --> 00:23:53,440
try to never use windows so it is was

611
00:23:53,440 --> 00:23:54,240
not

612
00:23:54,240 --> 00:23:56,799
the best option for me but it was only

613
00:23:56,799 --> 00:23:57,840
options

614
00:23:57,840 --> 00:24:00,080
it is overblocked because it took about

615
00:24:00,080 --> 00:24:02,080
half an hour to install to install

616
00:24:02,080 --> 00:24:06,159
my old windows pc the atmosphere itself

617
00:24:06,159 --> 00:24:07,279
is more than four

618
00:24:07,279 --> 00:24:09,919
gigabytes in size more you have my

619
00:24:09,919 --> 00:24:12,000
microsoft visual studio this is another

620
00:24:12,000 --> 00:24:15,039
one 1.5 5 gigabytes and

621
00:24:15,039 --> 00:24:18,080
a lot it installed a lot of additional

622
00:24:18,080 --> 00:24:20,720
software like dotnet frameworks and so

623
00:24:20,720 --> 00:24:22,080
on

624
00:24:22,080 --> 00:24:25,279
it is a totally graphical user interface

625
00:24:25,279 --> 00:24:26,000
based

626
00:24:26,000 --> 00:24:28,799
also to do simple things like assigning

627
00:24:28,799 --> 00:24:29,840
a label to a pin

628
00:24:29,840 --> 00:24:31,760
you have to use the graphical user

629
00:24:31,760 --> 00:24:33,919
interface

630
00:24:33,919 --> 00:24:36,480
it is a really overbloaded optimal

631
00:24:36,480 --> 00:24:38,799
software framework so if you do a simple

632
00:24:38,799 --> 00:24:39,360
project

633
00:24:39,360 --> 00:24:41,600
like blinking led you use the go

634
00:24:41,600 --> 00:24:43,840
interface to generate the template

635
00:24:43,840 --> 00:24:46,559
for your project and the template for a

636
00:24:46,559 --> 00:24:48,480
simple project like blink led

637
00:24:48,480 --> 00:24:52,480
is literally hundreds of files so really

638
00:24:52,480 --> 00:24:56,000
really uh bloated environment

639
00:24:56,000 --> 00:24:57,600
the graphical user interface is very

640
00:24:57,600 --> 00:25:00,000
easy to use but allows you to create

641
00:25:00,000 --> 00:25:02,000
legal configuration so you create some

642
00:25:02,000 --> 00:25:04,799
configuration compile everything

643
00:25:04,799 --> 00:25:06,960
put the firmware on your chip but the

644
00:25:06,960 --> 00:25:08,640
the firmware will not run will not do

645
00:25:08,640 --> 00:25:10,799
anything because maybe you have

646
00:25:10,799 --> 00:25:14,400
wrongly configured a clock signal

647
00:25:14,400 --> 00:25:16,320
and the clock configuration is quite

648
00:25:16,320 --> 00:25:18,640
complex because you try to use the gui

649
00:25:18,640 --> 00:25:20,480
without reading the data sheet

650
00:25:20,480 --> 00:25:23,520
and it's very easy to to make some

651
00:25:23,520 --> 00:25:26,159
illegal configurations because it's not

652
00:25:26,159 --> 00:25:28,000
easy to understand what you can do and

653
00:25:28,000 --> 00:25:31,039
what you cannot do

654
00:25:31,279 --> 00:25:33,760
but in any way atmel studio is uh is

655
00:25:33,760 --> 00:25:34,559
also as

656
00:25:34,559 --> 00:25:36,799
also some nice features for example

657
00:25:36,799 --> 00:25:39,039
visual studio is a good implicit

658
00:25:39,039 --> 00:25:40,640
graphical user interface

659
00:25:40,640 --> 00:25:43,279
it is very well integrated with the

660
00:25:43,279 --> 00:25:45,039
jailing probe so it's very easy

661
00:25:45,039 --> 00:25:48,080
to flash the device from inside the id

662
00:25:48,080 --> 00:25:50,320
you click a menu and are able to program

663
00:25:50,320 --> 00:25:51,200
a device

664
00:25:51,200 --> 00:25:52,480
with the firmware you have just

665
00:25:52,480 --> 00:25:54,480
completed and it is

666
00:25:54,480 --> 00:25:56,720
also very easy to debug your program

667
00:25:56,720 --> 00:25:57,760
executing

668
00:25:57,760 --> 00:26:00,960
it with a debugger securing

669
00:26:00,960 --> 00:26:05,120
it step by step on the real hardware

670
00:26:05,360 --> 00:26:08,480
so i wrote a simple hello world program

671
00:26:08,480 --> 00:26:09,200
in the

672
00:26:09,200 --> 00:26:11,520
in the hardware embedded space and

673
00:26:11,520 --> 00:26:12,880
lowered means

674
00:26:12,880 --> 00:26:15,520
lighting some leds in this case i wrote

675
00:26:15,520 --> 00:26:16,240
a simple

676
00:26:16,240 --> 00:26:19,039
hello world program that basically

677
00:26:19,039 --> 00:26:20,480
alternates

678
00:26:20,480 --> 00:26:22,480
the colors read the green and blue on

679
00:26:22,480 --> 00:26:24,080
the leds and then

680
00:26:24,080 --> 00:26:26,720
toggle each one of the six leds on the

681
00:26:26,720 --> 00:26:28,880
board

682
00:26:28,880 --> 00:26:33,600
i programmed his with atmel studio and i

683
00:26:33,600 --> 00:26:37,120
wrote his firmware on the some d21

684
00:26:37,120 --> 00:26:39,919
co-processor maybe because we likes a

685
00:26:39,919 --> 00:26:41,200
lot of leds maybe is

686
00:26:41,200 --> 00:26:42,720
not any lower the program and merry

687
00:26:42,720 --> 00:26:44,559
christmas with some

688
00:26:44,559 --> 00:26:46,720
some in advance but anyway this is a

689
00:26:46,720 --> 00:26:52,080
small demo of this program

690
00:26:52,080 --> 00:26:55,360
so here we have our activity

691
00:26:55,360 --> 00:26:58,559
badge 2019 this

692
00:26:58,559 --> 00:27:02,000
is the segger j-link mini

693
00:27:02,000 --> 00:27:06,320
edu probe this is the

694
00:27:06,320 --> 00:27:09,279
simple breakout board to convert this

695
00:27:09,279 --> 00:27:09,600
this

696
00:27:09,600 --> 00:27:12,799
small cable to these bigger

697
00:27:12,799 --> 00:27:16,559
cables and these cables are attached to

698
00:27:16,559 --> 00:27:21,760
the swd interface of the same d21

699
00:27:21,760 --> 00:27:24,799
arm processor we can now

700
00:27:24,799 --> 00:27:28,880
program this processor

701
00:27:28,880 --> 00:27:31,760
using atmel studio here it is a very

702
00:27:31,760 --> 00:27:33,360
simple program

703
00:27:33,360 --> 00:27:36,880
that basically set the colors

704
00:27:36,880 --> 00:27:39,440
to blue the first time to green the

705
00:27:39,440 --> 00:27:40,399
second time

706
00:27:40,399 --> 00:27:43,600
into red at the time and then it re

707
00:27:43,600 --> 00:27:47,120
repeat again this cycle and

708
00:27:47,120 --> 00:27:50,159
switch on and off each

709
00:27:50,159 --> 00:27:52,880
one of the leds toggle the level of each

710
00:27:52,880 --> 00:27:53,200
one

711
00:27:53,200 --> 00:27:56,559
of the six leds

712
00:27:56,559 --> 00:27:59,679
so we can build this program

713
00:27:59,679 --> 00:28:02,640
with build solution the program has been

714
00:28:02,640 --> 00:28:03,440
built

715
00:28:03,440 --> 00:28:05,679
and then thanks to the integration

716
00:28:05,679 --> 00:28:07,279
between the atmel

717
00:28:07,279 --> 00:28:11,600
ide and jlink

718
00:28:11,760 --> 00:28:14,640
edu mini we can go directly to the

719
00:28:14,640 --> 00:28:16,559
device programming menu

720
00:28:16,559 --> 00:28:19,679
we have selected the correct device

721
00:28:19,679 --> 00:28:22,720
we click to apply we can

722
00:28:22,720 --> 00:28:26,080
read from the device and then we can go

723
00:28:26,080 --> 00:28:27,440
to memories

724
00:28:27,440 --> 00:28:31,440
to program the device a weekly we click

725
00:28:31,440 --> 00:28:34,640
program and then the the probe

726
00:28:34,640 --> 00:28:37,919
will program the device reset the device

727
00:28:37,919 --> 00:28:41,039
and as you can see we have

728
00:28:41,039 --> 00:28:44,240
blinking leds

729
00:28:44,240 --> 00:28:47,600
the collar or the leads switch between

730
00:28:47,600 --> 00:28:50,880
green red and blue and

731
00:28:50,880 --> 00:28:55,120
each single lead toggle is the status

732
00:28:55,120 --> 00:28:58,399
status in each cycle

733
00:28:58,399 --> 00:29:01,039
so we have built our hello world or if

734
00:29:01,039 --> 00:29:02,000
you prefer our

735
00:29:02,000 --> 00:29:07,120
merry christmas program in harvard

736
00:29:07,120 --> 00:29:10,159
but after spending few weeks with atmel

737
00:29:10,159 --> 00:29:12,480
studio i tried to write a simple

738
00:29:12,480 --> 00:29:15,039
program to read from the usb serial

739
00:29:15,039 --> 00:29:15,840
interface

740
00:29:15,840 --> 00:29:18,640
and write to the expedite issue serial

741
00:29:18,640 --> 00:29:21,440
interface making and usb bridged

742
00:29:21,440 --> 00:29:24,720
but i found very difficult to find some

743
00:29:24,720 --> 00:29:26,320
examples on the internet

744
00:29:26,320 --> 00:29:29,200
and to mix and merge these examples so

745
00:29:29,200 --> 00:29:29,440
at

746
00:29:29,440 --> 00:29:32,320
the end i understood that i should write

747
00:29:32,320 --> 00:29:32,720
by

748
00:29:32,720 --> 00:29:35,200
myself and from scratch it is a simple

749
00:29:35,200 --> 00:29:36,000
program

750
00:29:36,000 --> 00:29:38,159
to read from usb interface and write a

751
00:29:38,159 --> 00:29:40,080
desktorial interface

752
00:29:40,080 --> 00:29:42,559
but i found that i didn't succeed in

753
00:29:42,559 --> 00:29:44,080
writing this simple program

754
00:29:44,080 --> 00:29:46,080
it seemed impossible to write as a

755
00:29:46,080 --> 00:29:49,440
program without reading the 1000 plus

756
00:29:49,440 --> 00:29:52,720
data sheet pages of some d21 or without

757
00:29:52,720 --> 00:29:55,200
reading the 500 pages plus

758
00:29:55,200 --> 00:29:58,399
of the atmel studio manual so basically

759
00:29:58,399 --> 00:30:01,039
the optimal studio way was the opposite

760
00:30:01,039 --> 00:30:04,080
of the arduino way and so i

761
00:30:04,080 --> 00:30:06,640
started searching on the internet on how

762
00:30:06,640 --> 00:30:07,440
to bring

763
00:30:07,440 --> 00:30:10,559
the someday our summer d21 chip inside

764
00:30:10,559 --> 00:30:11,440
the arduino

765
00:30:11,440 --> 00:30:14,799
ide knowing that similar chips

766
00:30:14,799 --> 00:30:17,760
like the other fruity playground express

767
00:30:17,760 --> 00:30:19,120
that is a similar chip

768
00:30:19,120 --> 00:30:22,159
but with more flesh and more are

769
00:30:22,159 --> 00:30:25,520
already bringing inside the arduino ide

770
00:30:25,520 --> 00:30:27,520
because arduino d is much easier

771
00:30:27,520 --> 00:30:30,720
because the philosophy of arduino ide

772
00:30:30,720 --> 00:30:33,279
as was written by massimo banziman of

773
00:30:33,279 --> 00:30:34,159
the coauthor

774
00:30:34,159 --> 00:30:37,360
of the arduino is that the there is the

775
00:30:37,360 --> 00:30:37,919
concept

776
00:30:37,919 --> 00:30:41,520
that rewriting

777
00:30:41,520 --> 00:30:44,720
from learning how to write things

778
00:30:44,720 --> 00:30:47,600
from scratch is a waste of energy what

779
00:30:47,600 --> 00:30:49,120
you want to do is to

780
00:30:49,120 --> 00:30:51,840
reuse what other people have already

781
00:30:51,840 --> 00:30:52,640
done

782
00:30:52,640 --> 00:30:56,080
and being able to very fast

783
00:30:56,080 --> 00:30:57,840
make some prototypes and then if you

784
00:30:57,840 --> 00:31:00,799
needed you investigate more

785
00:31:00,799 --> 00:31:03,039
and i love the arduino way because it

786
00:31:03,039 --> 00:31:04,320
allow the nobis

787
00:31:04,320 --> 00:31:07,440
to very very fast start playing with

788
00:31:07,440 --> 00:31:08,320
hardware

789
00:31:08,320 --> 00:31:12,639
and the later investigate more if needed

790
00:31:13,039 --> 00:31:16,720
i was quite lucky because not only i

791
00:31:16,720 --> 00:31:18,000
found that someone

792
00:31:18,000 --> 00:31:20,720
on the internet has already ported this

793
00:31:20,720 --> 00:31:21,120
our

794
00:31:21,120 --> 00:31:24,159
co-processor inside the arduino ide

795
00:31:24,159 --> 00:31:27,279
and i should found this before trying to

796
00:31:27,279 --> 00:31:27,600
do

797
00:31:27,600 --> 00:31:30,000
things with the atmel studio but this

798
00:31:30,000 --> 00:31:30,799
was bring it

799
00:31:30,799 --> 00:31:33,600
inside the arduino ide by the same folk

800
00:31:33,600 --> 00:31:34,640
the same people

801
00:31:34,640 --> 00:31:38,159
that designed uh our

802
00:31:38,159 --> 00:31:41,120
our page and what i found on the

803
00:31:41,120 --> 00:31:41,840
internet was

804
00:31:41,840 --> 00:31:44,640
a project for another badge the disobey

805
00:31:44,640 --> 00:31:47,200
2018 page that is very similar to our

806
00:31:47,200 --> 00:31:49,840
pageant was designed by the same

807
00:31:49,840 --> 00:31:52,559
the same people

808
00:31:54,159 --> 00:31:57,600
and i also found a similar repository

809
00:31:57,600 --> 00:31:58,240
where we

810
00:31:58,240 --> 00:32:00,880
i founded escape the schematics of the

811
00:32:00,880 --> 00:32:02,799
disobey 2018 budget

812
00:32:02,799 --> 00:32:06,080
helped me to reconstruct the

813
00:32:06,080 --> 00:32:09,600
schematic of our patch

814
00:32:09,600 --> 00:32:13,039
and in the what i tried to do without

815
00:32:13,039 --> 00:32:16,240
success with atmel studio spending

816
00:32:16,240 --> 00:32:20,240
weeks of time in the

817
00:32:20,240 --> 00:32:23,840
inside the arduino ide is very very very

818
00:32:23,840 --> 00:32:24,480
easy

819
00:32:24,480 --> 00:32:27,600
so in the arduino ide usb serial to

820
00:32:27,600 --> 00:32:29,279
esp32 serial bridge

821
00:32:29,279 --> 00:32:32,559
is done with only 10 lines of code you

822
00:32:32,559 --> 00:32:34,559
read from one serial interface with

823
00:32:34,559 --> 00:32:37,600
a simple call and write to the other

824
00:32:37,600 --> 00:32:40,720
serial interface with another call and

825
00:32:40,720 --> 00:32:43,279
vice versa

826
00:32:43,279 --> 00:32:46,640
so i rewrote the bootloader on my

827
00:32:46,640 --> 00:32:49,039
some d21 co-processor the bootloader was

828
00:32:49,039 --> 00:32:50,159
available

829
00:32:50,159 --> 00:32:53,279
on this repository and

830
00:32:53,279 --> 00:32:57,039
i compiled with the arduino id

831
00:32:57,039 --> 00:32:59,039
the the firmware available this

832
00:32:59,039 --> 00:33:00,240
repository

833
00:33:00,240 --> 00:33:03,279
loaded inside some t21 using the

834
00:33:03,279 --> 00:33:05,200
procedure that is available on this

835
00:33:05,200 --> 00:33:06,159
repository using

836
00:33:06,159 --> 00:33:09,679
the futil and so i uh

837
00:33:09,679 --> 00:33:13,039
i add i should have everything really

838
00:33:13,039 --> 00:33:16,960
to use for the to use with arduino ide

839
00:33:16,960 --> 00:33:20,080
so i tried to load a sketch into the

840
00:33:20,080 --> 00:33:21,279
esp32

841
00:33:21,279 --> 00:33:23,919
using the arduino ide but with my

842
00:33:23,919 --> 00:33:24,720
surprise

843
00:33:24,720 --> 00:33:28,080
i found i cannot do i found an error

844
00:33:28,080 --> 00:33:32,320
during the loading of the sketch

845
00:33:32,320 --> 00:33:34,799
basically the problem was that the

846
00:33:34,799 --> 00:33:35,840
serial bridge

847
00:33:35,840 --> 00:33:38,960
was not fast enough the serial bridge

848
00:33:38,960 --> 00:33:41,600
was dropping bytes during the

849
00:33:41,600 --> 00:33:43,679
programming phase

850
00:33:43,679 --> 00:33:45,440
the problem is that arduino ide is

851
00:33:45,440 --> 00:33:47,840
fantastic it's very easy to use very

852
00:33:47,840 --> 00:33:48,720
simple

853
00:33:48,720 --> 00:33:52,240
but it hides complexity and sometimes

854
00:33:52,240 --> 00:33:54,399
can generate code that is quite

855
00:33:54,399 --> 00:33:55,360
inefficient

856
00:33:55,360 --> 00:33:58,880
so it is the case it wasn't able to

857
00:33:58,880 --> 00:34:01,200
read and write on two different server

858
00:34:01,200 --> 00:34:02,480
interface

859
00:34:02,480 --> 00:34:06,240
without dropping bytes

860
00:34:06,240 --> 00:34:08,239
message to solve the issue what i did

861
00:34:08,239 --> 00:34:10,000
was to increase

862
00:34:10,000 --> 00:34:13,440
the tx and rx serial buffer

863
00:34:13,440 --> 00:34:18,159
from the 64 bytes to 512 bytes

864
00:34:18,159 --> 00:34:20,079
this value probably was so low because

865
00:34:20,079 --> 00:34:21,280
our co-processor has

866
00:34:21,280 --> 00:34:24,239
very small amount of static ram so

867
00:34:24,239 --> 00:34:24,879
saving

868
00:34:24,879 --> 00:34:28,879
each bite was important in this way

869
00:34:28,879 --> 00:34:33,839
i add more room to prevent dropping of

870
00:34:33,839 --> 00:34:35,839
and another modification was that i

871
00:34:35,839 --> 00:34:36,960
rewrote

872
00:34:36,960 --> 00:34:40,079
the the serial bridge

873
00:34:40,079 --> 00:34:43,119
to be non-blocking this means

874
00:34:43,119 --> 00:34:47,040
being sure to have already

875
00:34:47,040 --> 00:34:49,839
byte available in rx buffer before

876
00:34:49,839 --> 00:34:51,599
reading from the serial interface and

877
00:34:51,599 --> 00:34:52,800
being sure

878
00:34:52,800 --> 00:34:56,079
to have free bytes available on

879
00:34:56,079 --> 00:34:59,359
tx buffer before writing

880
00:34:59,359 --> 00:35:02,400
a byte on the seller interface in this

881
00:35:02,400 --> 00:35:02,880
way

882
00:35:02,880 --> 00:35:05,520
each call will return immediately

883
00:35:05,520 --> 00:35:06,240
without

884
00:35:06,240 --> 00:35:09,119
waiting for the actual byte to be

885
00:35:09,119 --> 00:35:09,760
received

886
00:35:09,760 --> 00:35:12,640
or to be sent

887
00:35:13,280 --> 00:35:16,560
after these new modifications our serial

888
00:35:16,560 --> 00:35:18,079
interface was working

889
00:35:18,079 --> 00:35:21,440
as it is simple demo now i will show you

890
00:35:21,440 --> 00:35:22,240
that we are

891
00:35:22,240 --> 00:35:26,640
able to upload our sketch for the s32

892
00:35:26,640 --> 00:35:29,119
processor and that our sketch will be

893
00:35:29,119 --> 00:35:30,000
able to talk

894
00:35:30,000 --> 00:35:32,960
to the some d21 co-processor and will be

895
00:35:32,960 --> 00:35:33,839
able

896
00:35:33,839 --> 00:35:37,119
to switch on and off few leds

897
00:35:37,119 --> 00:35:39,839
and also to read the status of the touch

898
00:35:39,839 --> 00:35:41,760
buttons that are attached to the

899
00:35:41,760 --> 00:35:42,960
co-processor

900
00:35:42,960 --> 00:35:46,160
we can see that we have selected as our

901
00:35:46,160 --> 00:35:46,640
board

902
00:35:46,640 --> 00:35:50,800
the the esp32 development module

903
00:35:50,800 --> 00:35:54,640
basically we will try our esp32 directly

904
00:35:54,640 --> 00:35:57,440
and as part we have content that it is

905
00:35:57,440 --> 00:35:59,000
our disobey page

906
00:35:59,000 --> 00:36:02,400
2019 port so we

907
00:36:02,400 --> 00:36:05,440
can now press this button this will

908
00:36:05,440 --> 00:36:08,640
compile our our sketch

909
00:36:08,640 --> 00:36:11,760
and we'll upload this sketch

910
00:36:11,760 --> 00:36:14,960
you can see that it is driving the

911
00:36:14,960 --> 00:36:18,000
comma port and that it is uploading

912
00:36:18,000 --> 00:36:21,520
our sketch now uploading is finished

913
00:36:21,520 --> 00:36:25,119
and it started to

914
00:36:25,119 --> 00:36:28,480
to power on some leds but there is too

915
00:36:28,480 --> 00:36:31,280
light so you can see i will

916
00:36:31,280 --> 00:36:34,400
lower the light just one second now

917
00:36:34,400 --> 00:36:37,280
it's easier to see the leds lighting and

918
00:36:37,280 --> 00:36:38,400
we can also see that

919
00:36:38,400 --> 00:36:42,640
we can read the touch buttons if i press

920
00:36:42,640 --> 00:36:43,280
the

921
00:36:43,280 --> 00:36:46,480
upper button the backlight of the

922
00:36:46,480 --> 00:36:50,400
display goes on so i can press

923
00:36:50,400 --> 00:36:53,599
if i press the down button i select the

924
00:36:53,599 --> 00:36:57,280
led the red color for leds deselect the

925
00:36:57,280 --> 00:37:00,079
blue color and this one select the green

926
00:37:00,079 --> 00:37:02,160
color

927
00:37:02,160 --> 00:37:05,599
this left button will keep on

928
00:37:05,599 --> 00:37:08,560
all the leds i can combine multiple

929
00:37:08,560 --> 00:37:09,920
buttons so we have

930
00:37:09,920 --> 00:37:13,280
all leds on and red or blue

931
00:37:13,280 --> 00:37:17,200
and so on i can also drive the buzzer

932
00:37:17,200 --> 00:37:21,200
clicking the right right button

933
00:37:21,200 --> 00:37:23,359
as you can see we have successfully

934
00:37:23,359 --> 00:37:26,000
loaded the sketch on our

935
00:37:26,000 --> 00:37:29,119
board and everything is going well

936
00:37:29,119 --> 00:37:31,760
this is a very nice arduino now it is

937
00:37:31,760 --> 00:37:34,000
very nice arduino development board

938
00:37:34,000 --> 00:37:37,440
we have removed the micro python and

939
00:37:37,440 --> 00:37:39,359
a quite powerful arduino development

940
00:37:39,359 --> 00:37:41,359
board with a nice display

941
00:37:41,359 --> 00:37:45,119
leds on the board the touch buttons

942
00:37:45,119 --> 00:37:48,320
and also infrared and a lot of available

943
00:37:48,320 --> 00:37:49,760
pins

944
00:37:49,760 --> 00:37:52,480
in conclusion i was successful in

945
00:37:52,480 --> 00:37:54,640
bringing the arduino

946
00:37:54,640 --> 00:37:57,359
ide in using arduino id to program the

947
00:37:57,359 --> 00:37:58,480
esp32

948
00:37:58,480 --> 00:38:00,960
on the batch and basically this way the

949
00:38:00,960 --> 00:38:02,800
activity 2018 page

950
00:38:02,800 --> 00:38:06,079
is a nice arduino id based

951
00:38:06,079 --> 00:38:07,920
development port very nice development

952
00:38:07,920 --> 00:38:10,079
board with the touch buttons

953
00:38:10,079 --> 00:38:13,359
leds a nice display

954
00:38:13,359 --> 00:38:15,920
infrared and so on a very very nice

955
00:38:15,920 --> 00:38:18,800
development board

956
00:38:18,800 --> 00:38:21,119
there is some something still to do it

957
00:38:21,119 --> 00:38:23,280
that i am doing and that i will publish

958
00:38:23,280 --> 00:38:25,920
on my website when done

959
00:38:25,920 --> 00:38:29,760
to modify an existing library to drive

960
00:38:29,760 --> 00:38:32,560
to display the because the existing

961
00:38:32,560 --> 00:38:33,280
library

962
00:38:33,280 --> 00:38:35,040
is able to drive the display but only

963
00:38:35,040 --> 00:38:37,200
using the spi interface and

964
00:38:37,200 --> 00:38:40,880
not the i2c interface interface

965
00:38:40,880 --> 00:38:43,839
and i as in every project i learned

966
00:38:43,839 --> 00:38:46,640
something or better i reinforced

967
00:38:46,640 --> 00:38:49,760
what i already knew one of the first

968
00:38:49,760 --> 00:38:50,720
principle is that

969
00:38:50,720 --> 00:38:53,520
never to get stuck if you find a

970
00:38:53,520 --> 00:38:55,200
stumbling block

971
00:38:55,200 --> 00:38:57,760
during on your road you have to find a

972
00:38:57,760 --> 00:38:58,720
sideway

973
00:38:58,720 --> 00:39:01,920
you don't have to insist to

974
00:39:01,920 --> 00:39:05,280
go to go forward in the in the road that

975
00:39:05,280 --> 00:39:06,320
is blocked

976
00:39:06,320 --> 00:39:08,720
in this way i should have spent less

977
00:39:08,720 --> 00:39:09,440
time with

978
00:39:09,440 --> 00:39:12,720
optimal studio in trying uh trying

979
00:39:12,720 --> 00:39:15,040
to bring this co-processor inside the

980
00:39:15,040 --> 00:39:16,480
arduino ide

981
00:39:16,480 --> 00:39:19,599
before insisting with utml studio

982
00:39:19,599 --> 00:39:21,920
and another very important information

983
00:39:21,920 --> 00:39:23,119
that is always useful

984
00:39:23,119 --> 00:39:25,520
in any in every reverse engineering

985
00:39:25,520 --> 00:39:26,480
project

986
00:39:26,480 --> 00:39:30,000
is to use also partial information like

987
00:39:30,000 --> 00:39:32,000
information from a similar product

988
00:39:32,000 --> 00:39:34,640
they made by the same company because

989
00:39:34,640 --> 00:39:36,960
very often

990
00:39:36,960 --> 00:39:40,079
information from similar products can be

991
00:39:40,079 --> 00:39:42,400
very useful to speed up your reverse

992
00:39:42,400 --> 00:39:43,520
engineering process

993
00:39:43,520 --> 00:39:45,280
you have to check and verify that

994
00:39:45,280 --> 00:39:47,839
everything you find on a similar

995
00:39:47,839 --> 00:39:51,599
product will apply to your device but

996
00:39:51,599 --> 00:39:54,000
anyway will help a lot in speeding

997
00:39:54,000 --> 00:39:57,200
the reverse engineering process thank

998
00:39:57,200 --> 00:39:57,839
you for

999
00:39:57,839 --> 00:40:01,040
your time i am now available on zoom for

1000
00:40:01,040 --> 00:40:03,839
your question

