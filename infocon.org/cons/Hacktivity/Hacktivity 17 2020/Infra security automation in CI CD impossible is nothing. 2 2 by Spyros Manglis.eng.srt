1
00:00:00,880 --> 00:00:03,199
yes thank you davide

2
00:00:03,199 --> 00:00:06,319
and thanks everyone for joining our

3
00:00:06,319 --> 00:00:08,800
presentation

4
00:00:08,800 --> 00:00:12,639
my name is spirus maglis i'm a security

5
00:00:12,639 --> 00:00:13,679
engineer

6
00:00:13,679 --> 00:00:17,119
working in ing for the past

7
00:00:17,119 --> 00:00:20,320
almost three years and i'm also one of

8
00:00:20,320 --> 00:00:21,840
the main

9
00:00:21,840 --> 00:00:26,080
persons behind this project

10
00:00:26,240 --> 00:00:29,439
so in the next couple of minutes

11
00:00:29,439 --> 00:00:32,880
i will explain some technical details

12
00:00:32,880 --> 00:00:34,399
and our approach

13
00:00:34,399 --> 00:00:37,280
on infrastructure security automation

14
00:00:37,280 --> 00:00:37,760
with

15
00:00:37,760 --> 00:00:42,239
ansible but first

16
00:00:42,239 --> 00:00:44,640
let's try let's start with a simple

17
00:00:44,640 --> 00:00:45,520
question

18
00:00:45,520 --> 00:00:48,640
why ansible why

19
00:00:48,640 --> 00:00:51,680
should we use ansible stand of any other

20
00:00:51,680 --> 00:00:53,600
tools

21
00:00:53,600 --> 00:00:56,160
well ansible first of all is a is an

22
00:00:56,160 --> 00:00:57,440
agentless

23
00:00:57,440 --> 00:01:00,800
framework it doesn't require

24
00:01:00,800 --> 00:01:05,119
any client to be installed on the target

25
00:01:05,119 --> 00:01:08,159
targeted node

26
00:01:08,159 --> 00:01:12,000
it only uses ssh uh

27
00:01:12,000 --> 00:01:15,840
winram to connect to linux and windows

28
00:01:15,840 --> 00:01:21,680
servers we can use ansible to keep state

29
00:01:21,840 --> 00:01:24,960
and we will see later on how we can we

30
00:01:24,960 --> 00:01:27,119
can do that

31
00:01:27,119 --> 00:01:30,560
it's uh extensible

32
00:01:30,880 --> 00:01:34,079
we have a an operations community where

33
00:01:34,079 --> 00:01:37,920
you can find vendor modules

34
00:01:37,920 --> 00:01:40,960
which you can just download and use

35
00:01:40,960 --> 00:01:43,439
it's a really easy to scale it doesn't

36
00:01:43,439 --> 00:01:46,320
really matter if you want to run

37
00:01:46,320 --> 00:01:48,240
one single task against thousand

38
00:01:48,240 --> 00:01:49,680
machines

39
00:01:49,680 --> 00:01:52,960
or a thousand tasks again one single

40
00:01:52,960 --> 00:01:53,600
machine

41
00:01:53,600 --> 00:01:57,040
it's so it's really easy to achieve that

42
00:01:57,040 --> 00:01:59,840
and also it's running based on uh on

43
00:01:59,840 --> 00:02:00,799
facts

44
00:02:00,799 --> 00:02:03,680
and preconditions which actually means

45
00:02:03,680 --> 00:02:04,799
that

46
00:02:04,799 --> 00:02:09,119
if a condition is met then and only then

47
00:02:09,119 --> 00:02:12,879
it will execute a specific task

48
00:02:12,879 --> 00:02:14,560
so as i said before there is also an

49
00:02:14,560 --> 00:02:16,000
open source community

50
00:02:16,000 --> 00:02:19,239
uh if you go to the galaxy dot

51
00:02:19,239 --> 00:02:21,120
ansible.com portal

52
00:02:21,120 --> 00:02:24,720
you will find a playbook for almost

53
00:02:24,720 --> 00:02:27,599
everything as you see in the bottom of

54
00:02:27,599 --> 00:02:28,400
the slide

55
00:02:28,400 --> 00:02:31,840
as well playbooks are

56
00:02:31,840 --> 00:02:36,160
released from ventors or

57
00:02:36,160 --> 00:02:40,560
developers and engineers and of course

58
00:02:40,560 --> 00:02:45,599
you can share your own playbook there

59
00:02:45,840 --> 00:02:49,440
let's continue with the

60
00:02:49,440 --> 00:02:52,560
use case is unfoundable

61
00:02:52,560 --> 00:02:54,480
the most common use cases of fancy

62
00:02:54,480 --> 00:02:55,599
bullets

63
00:02:55,599 --> 00:02:59,680
of course provisioning right

64
00:02:59,680 --> 00:03:02,720
spinning and killing instances

65
00:03:02,720 --> 00:03:08,239
over cloud hyper-v or docker containers

66
00:03:08,239 --> 00:03:12,080
orchestration and configuration

67
00:03:12,080 --> 00:03:16,239
configuring multiple instances

68
00:03:16,239 --> 00:03:19,760
in the same time and of course

69
00:03:19,760 --> 00:03:22,399
deployment

70
00:03:23,519 --> 00:03:27,280
so let's see also some use cases when it

71
00:03:27,280 --> 00:03:28,239
comes to

72
00:03:28,239 --> 00:03:31,360
to security itself

73
00:03:31,440 --> 00:03:34,239
most of the times ansibilities be used

74
00:03:34,239 --> 00:03:35,360
to apply

75
00:03:35,360 --> 00:03:38,000
security standard framework frameworks

76
00:03:38,000 --> 00:03:39,519
like uh

77
00:03:39,519 --> 00:03:41,519
the stig security technical

78
00:03:41,519 --> 00:03:43,200
implementation guide or the

79
00:03:43,200 --> 00:03:45,840
pci dss the payment count industry

80
00:03:45,840 --> 00:03:47,599
standards

81
00:03:47,599 --> 00:03:50,720
of course is also been used for network

82
00:03:50,720 --> 00:03:54,959
configuration and handling and hardening

83
00:03:55,120 --> 00:03:59,120
threat handling and replicating

84
00:03:59,120 --> 00:04:03,760
zero days and cvs and of course

85
00:04:03,760 --> 00:04:08,319
to apply our internal security standards

86
00:04:09,840 --> 00:04:12,560
now uh let's have a small comparison

87
00:04:12,560 --> 00:04:14,000
with with other tools

88
00:04:14,000 --> 00:04:17,680
why ansible against

89
00:04:17,680 --> 00:04:21,120
all those other tools we have available

90
00:04:21,120 --> 00:04:24,160
kent the abc tool does

91
00:04:24,160 --> 00:04:28,160
do the xyz job

92
00:04:28,160 --> 00:04:30,080
of course you can most of the times i

93
00:04:30,080 --> 00:04:32,240
will say the difference is

94
00:04:32,240 --> 00:04:34,639
at least for us the main difference was

95
00:04:34,639 --> 00:04:35,440
that

96
00:04:35,440 --> 00:04:38,960
ansible is really easy for

97
00:04:38,960 --> 00:04:42,400
non-security people to write

98
00:04:42,400 --> 00:04:46,560
security test so it's easy for a

99
00:04:46,560 --> 00:04:49,919
option for developers to understand and

100
00:04:49,919 --> 00:04:52,960
write their own tests

101
00:04:52,960 --> 00:04:57,440
and of course for me personally

102
00:04:57,440 --> 00:05:00,320
i don't see i cannot really compare

103
00:05:00,320 --> 00:05:02,080
ansible with any other

104
00:05:02,080 --> 00:05:04,160
security tool because they are not

105
00:05:04,160 --> 00:05:06,560
really doing the same job

106
00:05:06,560 --> 00:05:10,400
ansible can actually been used

107
00:05:10,400 --> 00:05:13,919
as a wrapper around all those tool tools

108
00:05:13,919 --> 00:05:17,280
and kick those tools against our

109
00:05:17,280 --> 00:05:18,560
infrastructure

110
00:05:18,560 --> 00:05:21,440
right as you see in this slide we can

111
00:05:21,440 --> 00:05:21,759
have

112
00:05:21,759 --> 00:05:24,960
ansible and then we can have

113
00:05:24,960 --> 00:05:26,960
different playbooks that will kick a

114
00:05:26,960 --> 00:05:28,080
different

115
00:05:28,080 --> 00:05:33,359
tool against on on in our servers

116
00:05:35,280 --> 00:05:38,560
so that's pretty much uh

117
00:05:38,560 --> 00:05:42,880
summarizing the question of uh

118
00:05:42,880 --> 00:05:45,919
why ansible

119
00:05:46,320 --> 00:05:48,720
so moving on with the process that we

120
00:05:48,720 --> 00:05:50,320
follow

121
00:05:50,320 --> 00:05:54,320
and the steps we took to achieve

122
00:05:54,320 --> 00:05:57,680
such an automation and also what

123
00:05:57,680 --> 00:06:00,880
technical background it's required to

124
00:06:00,880 --> 00:06:01,440
start

125
00:06:01,440 --> 00:06:04,880
having an automation in place right

126
00:06:04,880 --> 00:06:08,080
so when we start the first thing

127
00:06:08,080 --> 00:06:11,120
we want to know is we want to understand

128
00:06:11,120 --> 00:06:14,080
our infrastructure landscape

129
00:06:14,080 --> 00:06:16,639
what services do we have in an

130
00:06:16,639 --> 00:06:19,039
infrastructure

131
00:06:19,039 --> 00:06:22,880
how they change if they change

132
00:06:22,880 --> 00:06:26,319
right and the next tip the next step is

133
00:06:26,319 --> 00:06:28,479
uh

134
00:06:28,960 --> 00:06:31,840
taking the well-known security

135
00:06:31,840 --> 00:06:33,039
frameworks

136
00:06:33,039 --> 00:06:36,319
like pci meter

137
00:06:36,319 --> 00:06:39,199
and stig

138
00:06:40,319 --> 00:06:45,520
and apply those frameworks internally

139
00:06:45,520 --> 00:06:47,520
here we don't really want to apply

140
00:06:47,520 --> 00:06:49,440
everything we want only

141
00:06:49,440 --> 00:06:52,479
to take the parts that applicable to us

142
00:06:52,479 --> 00:06:53,520
right

143
00:06:53,520 --> 00:06:57,919
and in the next step we want to define

144
00:06:57,919 --> 00:07:01,520
our windows and linux threads

145
00:07:01,520 --> 00:07:04,880
based on a stripe model

146
00:07:04,880 --> 00:07:08,880
now moving on to the step 4

147
00:07:09,199 --> 00:07:12,639
we have a list of threads which we want

148
00:07:12,639 --> 00:07:14,000
to map

149
00:07:14,000 --> 00:07:19,520
with a security frameworks

150
00:07:19,840 --> 00:07:23,280
so we have our internal threads

151
00:07:23,280 --> 00:07:27,120
and we want to map them with a

152
00:07:27,120 --> 00:07:30,960
meter framework stig and pci dss

153
00:07:30,960 --> 00:07:33,039
and the next step is where we are

154
00:07:33,039 --> 00:07:35,520
actually

155
00:07:35,520 --> 00:07:38,479
start uh working with ansible and

156
00:07:38,479 --> 00:07:39,919
playbooks where we

157
00:07:39,919 --> 00:07:44,400
we want to define the tests for

158
00:07:44,400 --> 00:07:47,440
for the threads that we have right so in

159
00:07:47,440 --> 00:07:48,479
the previous step

160
00:07:48,479 --> 00:07:53,120
we came we came with a list of threads

161
00:07:53,120 --> 00:07:58,240
which is a combination of uh

162
00:07:58,240 --> 00:08:03,199
frameworks and our internal framework

163
00:08:03,840 --> 00:08:08,319
so now is the time to start creating

164
00:08:08,319 --> 00:08:11,440
some playbooks

165
00:08:11,440 --> 00:08:14,800
and the next step is actually

166
00:08:14,800 --> 00:08:16,319
where we are going where we want to

167
00:08:16,319 --> 00:08:18,080
assess our base image

168
00:08:18,080 --> 00:08:21,360
we want to know how the

169
00:08:21,360 --> 00:08:23,520
the base image has been delivered to the

170
00:08:23,520 --> 00:08:26,000
teams what is the component that has

171
00:08:26,000 --> 00:08:26,800
been

172
00:08:26,800 --> 00:08:29,599
installed and include in the in the

173
00:08:29,599 --> 00:08:31,840
image itself

174
00:08:31,840 --> 00:08:34,159
and the next and our final step of that

175
00:08:34,159 --> 00:08:35,919
process

176
00:08:35,919 --> 00:08:37,919
which is the which will be the first

177
00:08:37,919 --> 00:08:41,039
process of our automation

178
00:08:41,039 --> 00:08:44,080
it's uh starting our incremental scan on

179
00:08:44,080 --> 00:08:47,360
on the changes so

180
00:08:47,920 --> 00:08:50,800
in the step 6 we have our base image we

181
00:08:50,800 --> 00:08:52,959
know

182
00:08:53,279 --> 00:08:56,160
what components are base image uh has

183
00:08:56,160 --> 00:08:57,680
installed

184
00:08:57,680 --> 00:09:01,920
and in the next step we just want to see

185
00:09:01,920 --> 00:09:05,360
what has been changed after the image

186
00:09:05,360 --> 00:09:09,600
has been delivered to the team

187
00:09:09,600 --> 00:09:13,760
right so when it comes to understanding

188
00:09:13,760 --> 00:09:14,720
an infrastructure

189
00:09:14,720 --> 00:09:17,760
landscape what we did it was

190
00:09:17,760 --> 00:09:20,320
going around and start asking questions

191
00:09:20,320 --> 00:09:22,560
to the devops teams

192
00:09:22,560 --> 00:09:24,880
first we start with uh with a business q

193
00:09:24,880 --> 00:09:26,240
a like

194
00:09:26,240 --> 00:09:29,680
how uh

195
00:09:29,680 --> 00:09:31,839
how those default images are changing

196
00:09:31,839 --> 00:09:34,080
and if they're changing

197
00:09:34,080 --> 00:09:37,760
how often what kind of uh

198
00:09:37,760 --> 00:09:40,240
if is there any optional packages and

199
00:09:40,240 --> 00:09:42,880
what kind of optional packages

200
00:09:42,880 --> 00:09:46,399
do things require most

201
00:09:46,399 --> 00:09:50,480
right and we can also do

202
00:09:50,480 --> 00:09:54,399
of course uh technical questions

203
00:09:54,399 --> 00:09:58,160
like uh if there is any nesu scan

204
00:09:58,160 --> 00:10:00,000
running on the server if there is any

205
00:10:00,000 --> 00:10:01,839
additional scans

206
00:10:01,839 --> 00:10:03,920
running on the server it will have

207
00:10:03,920 --> 00:10:05,519
chrome jobs

208
00:10:05,519 --> 00:10:08,880
internal artifacts if uh

209
00:10:08,880 --> 00:10:12,399
how in how we manage

210
00:10:12,399 --> 00:10:15,600
the patching right how the whole

211
00:10:15,600 --> 00:10:17,279
patching process

212
00:10:17,279 --> 00:10:20,240
looks like if there is any possible

213
00:10:20,240 --> 00:10:21,760
external threads

214
00:10:21,760 --> 00:10:26,079
if there is sema in place

215
00:10:27,360 --> 00:10:31,680
and now when it comes to the step two

216
00:10:31,680 --> 00:10:34,079
adopting interesting standards as we

217
00:10:34,079 --> 00:10:34,880
said we have

218
00:10:34,880 --> 00:10:38,720
in place pcid says stig and meter attack

219
00:10:38,720 --> 00:10:42,079
and of course the next tip is

220
00:10:42,079 --> 00:10:45,600
the next step is to build

221
00:10:45,600 --> 00:10:48,959
our internal threat model so

222
00:10:48,959 --> 00:10:52,079
in this slide you will see

223
00:10:52,320 --> 00:10:55,600
how our internal threat model looks like

224
00:10:55,600 --> 00:10:58,240
and i'm just notice a mistake on the

225
00:10:58,240 --> 00:10:59,680
slide

226
00:10:59,680 --> 00:11:03,600
but on the left where is supposed to be

227
00:11:03,600 --> 00:11:06,399
the linux thread model is actually

228
00:11:06,399 --> 00:11:10,640
the windows and on the right

229
00:11:10,640 --> 00:11:14,240
it's uh the linux one so the threat

230
00:11:14,240 --> 00:11:14,880
models

231
00:11:14,880 --> 00:11:17,680
is the other way around but let's take

232
00:11:17,680 --> 00:11:18,800
an example of the

233
00:11:18,800 --> 00:11:22,959
linux uh of a single thread of uh

234
00:11:22,959 --> 00:11:25,440
in the linuxrt model so we have the

235
00:11:25,440 --> 00:11:26,959
thread

236
00:11:26,959 --> 00:11:30,079
linux with id 2 which

237
00:11:30,079 --> 00:11:32,800
says attacker host rough application to

238
00:11:32,800 --> 00:11:33,279
the web

239
00:11:33,279 --> 00:11:36,240
app server to still credential and

240
00:11:36,240 --> 00:11:37,279
configuration

241
00:11:37,279 --> 00:11:40,640
info and the mitigation comes with sma

242
00:11:40,640 --> 00:11:43,760
right i don't think such a test

243
00:11:43,760 --> 00:11:47,440
can be easily done with the

244
00:11:47,440 --> 00:11:50,160
other tools or with the nessus for

245
00:11:50,160 --> 00:11:52,480
example and if it's applicable with the

246
00:11:52,480 --> 00:11:57,839
nesus how long that will take right

247
00:11:58,000 --> 00:12:02,000
so step four is

248
00:12:02,000 --> 00:12:05,440
we want to map our threads to a test

249
00:12:05,440 --> 00:12:09,120
this is our ing

250
00:12:09,120 --> 00:12:12,320
sdg guide you see

251
00:12:12,320 --> 00:12:15,040
for example

252
00:12:16,800 --> 00:12:19,519
we define the thread which in this case

253
00:12:19,519 --> 00:12:20,399
is uh

254
00:12:20,399 --> 00:12:22,079
the thread the thread is attacker

255
00:12:22,079 --> 00:12:24,160
extracts confidential data from

256
00:12:24,160 --> 00:12:26,000
application logs

257
00:12:26,000 --> 00:12:29,360
and we also have a possible ways of

258
00:12:29,360 --> 00:12:32,320
testing testing manual for this for this

259
00:12:32,320 --> 00:12:32,800
thread

260
00:12:32,800 --> 00:12:37,200
right and

261
00:12:37,200 --> 00:12:39,839
in step 5

262
00:12:41,040 --> 00:12:44,399
is where we start building on playbooks

263
00:12:44,399 --> 00:12:48,079
we have our threads in process we have

264
00:12:48,079 --> 00:12:50,639
everything we need and now we need to

265
00:12:50,639 --> 00:12:51,600
start writing

266
00:12:51,600 --> 00:12:54,720
ansible tests in this example

267
00:12:54,720 --> 00:12:59,279
we'll see two playbooks that

268
00:12:59,920 --> 00:13:03,440
are actually combined to

269
00:13:03,440 --> 00:13:07,839
test for a single thread

270
00:13:08,880 --> 00:13:13,040
so just to recap

271
00:13:14,399 --> 00:13:17,200
when we start the process we want to

272
00:13:17,200 --> 00:13:17,760
have

273
00:13:17,760 --> 00:13:20,720
our internal discovery and the way we

274
00:13:20,720 --> 00:13:22,800
did it is by uh

275
00:13:22,800 --> 00:13:24,800
delivering a questionnaire to the devops

276
00:13:24,800 --> 00:13:27,120
teams

277
00:13:27,120 --> 00:13:30,800
our next step was uh doing the stutter

278
00:13:30,800 --> 00:13:31,519
mapping

279
00:13:31,519 --> 00:13:34,880
taking all those well-known frameworks

280
00:13:34,880 --> 00:13:39,360
and mapping them to our threads

281
00:13:39,360 --> 00:13:42,399
and next step is building

282
00:13:42,399 --> 00:13:46,079
our internal threat model

283
00:13:46,079 --> 00:13:49,199
so define threads using the

284
00:13:49,199 --> 00:13:53,279
the strike methodology

285
00:13:54,160 --> 00:13:58,480
next is a ing htg

286
00:13:58,480 --> 00:14:02,000
which is having our internal

287
00:14:02,000 --> 00:14:05,279
threat model the external uh

288
00:14:05,279 --> 00:14:08,399
the threads that we defined from the

289
00:14:08,399 --> 00:14:10,399
external frameworks

290
00:14:10,399 --> 00:14:13,120
and now we want to be our we want to

291
00:14:13,120 --> 00:14:14,079
build our

292
00:14:14,079 --> 00:14:17,360
internal security testing guide

293
00:14:17,360 --> 00:14:21,760
and of course the last step is uh

294
00:14:21,760 --> 00:14:25,519
to start writing our own playbooks

295
00:14:25,519 --> 00:14:28,480
our own tests

296
00:14:29,360 --> 00:14:31,920
so moving on with the definition of our

297
00:14:31,920 --> 00:14:34,719
default stack

298
00:14:34,800 --> 00:14:39,199
we want to know um what is in the base

299
00:14:39,199 --> 00:14:44,160
image that we deliver to the teams

300
00:14:44,160 --> 00:14:47,279
we want to know what components what

301
00:14:47,279 --> 00:14:47,920
packages

302
00:14:47,920 --> 00:14:49,760
what kind of libraries are installed

303
00:14:49,760 --> 00:14:51,360
there right

304
00:14:51,360 --> 00:14:54,959
and it's a it's a really good practice

305
00:14:54,959 --> 00:14:59,199
when we're collecting the facts from

306
00:14:59,199 --> 00:15:01,519
from the base image to actually create

307
00:15:01,519 --> 00:15:02,959
and template out of it

308
00:15:02,959 --> 00:15:07,040
so next time when we're gonna

309
00:15:07,040 --> 00:15:10,399
run a test against

310
00:15:10,399 --> 00:15:13,040
the same stack against a similar base

311
00:15:13,040 --> 00:15:14,160
image

312
00:15:14,160 --> 00:15:16,320
and if the base image has been changed

313
00:15:16,320 --> 00:15:17,920
then we can use

314
00:15:17,920 --> 00:15:21,680
the template to to to keep the state

315
00:15:21,680 --> 00:15:24,959
to the to the one we want or we can also

316
00:15:24,959 --> 00:15:27,120
use the template for provisioning or for

317
00:15:27,120 --> 00:15:29,040
for hardening

318
00:15:29,040 --> 00:15:32,320
right now when it comes to definition of

319
00:15:32,320 --> 00:15:33,199
uh

320
00:15:33,199 --> 00:15:37,279
of the changes is we want to know as

321
00:15:37,279 --> 00:15:37,839
well

322
00:15:37,839 --> 00:15:41,360
what kind of uh libraries third-party

323
00:15:41,360 --> 00:15:43,040
tools

324
00:15:43,040 --> 00:15:46,079
packages the teams are installing on top

325
00:15:46,079 --> 00:15:48,240
of the base image

326
00:15:48,240 --> 00:15:51,839
and again here is

327
00:15:51,839 --> 00:15:54,800
also quite good to do the same as before

328
00:15:54,800 --> 00:15:55,199
take

329
00:15:55,199 --> 00:15:59,600
a creatine template out of it

330
00:15:59,600 --> 00:16:01,040
so when we're collecting the facts

331
00:16:01,040 --> 00:16:02,800
create a template with the facts

332
00:16:02,800 --> 00:16:06,480
and next time you're gonna run

333
00:16:06,480 --> 00:16:09,360
the same test against the same machine

334
00:16:09,360 --> 00:16:11,759
if you see something been changed

335
00:16:11,759 --> 00:16:15,920
and it it soon be then you can

336
00:16:15,920 --> 00:16:19,680
use the template to roll back

337
00:16:20,480 --> 00:16:23,600
right so at the moment this is

338
00:16:23,600 --> 00:16:27,199
uh how is being used pretty much

339
00:16:27,199 --> 00:16:30,480
within our environment most of the times

340
00:16:30,480 --> 00:16:32,000
pen testers

341
00:16:32,000 --> 00:16:37,199
are the ones using this role

342
00:16:37,199 --> 00:16:40,320
it's only be used when we require

343
00:16:40,320 --> 00:16:42,560
infrastructure pen testing so from from

344
00:16:42,560 --> 00:16:43,759
one side

345
00:16:43,759 --> 00:16:48,000
we have the pen testers

346
00:16:48,000 --> 00:16:50,320
we have the ansible role their one the

347
00:16:50,320 --> 00:16:51,920
ansible role against

348
00:16:51,920 --> 00:16:55,440
uh an inventory list and

349
00:16:55,440 --> 00:16:59,279
we will get a report out of it

350
00:16:59,279 --> 00:17:02,839
this this report will be used as an

351
00:17:02,839 --> 00:17:04,240
evidence

352
00:17:04,240 --> 00:17:07,679
for further manual if it's needed

353
00:17:07,679 --> 00:17:08,880
investigation

354
00:17:08,880 --> 00:17:11,360
or not

355
00:17:14,079 --> 00:17:17,599
so a few things that we are looking with

356
00:17:17,599 --> 00:17:18,880
our tests

357
00:17:18,880 --> 00:17:21,919
first of first of all we are looking for

358
00:17:21,919 --> 00:17:23,919
outdated versions and vulnerable

359
00:17:23,919 --> 00:17:26,400
binaries on the machine

360
00:17:26,400 --> 00:17:30,400
we are looking for those vulnerabilities

361
00:17:30,400 --> 00:17:33,120
privilege escalation techniques

362
00:17:33,120 --> 00:17:34,880
sensitive information

363
00:17:34,880 --> 00:17:37,840
in stored in a clear text files and

364
00:17:37,840 --> 00:17:39,039
folder permissions

365
00:17:39,039 --> 00:17:42,799
chrome jobs and

366
00:17:44,799 --> 00:17:47,840
the report

367
00:17:50,240 --> 00:17:52,960
so which security problem or problems we

368
00:17:52,960 --> 00:17:55,360
can solve with ansible

369
00:17:55,360 --> 00:17:57,520
of course we can catch the low hanging

370
00:17:57,520 --> 00:17:58,640
fluids

371
00:17:58,640 --> 00:18:02,960
we can replicate zero days and cvs

372
00:18:02,960 --> 00:18:05,440
we can enforce configuration and of

373
00:18:05,440 --> 00:18:07,919
course we can automate

374
00:18:07,919 --> 00:18:10,880
the obvious right

375
00:18:11,120 --> 00:18:14,000
so let's move with the with the live

376
00:18:14,000 --> 00:18:16,000
demo

377
00:18:16,000 --> 00:18:18,240
and uh i really hope that everything

378
00:18:18,240 --> 00:18:21,919
will uh will go smoothly

379
00:18:23,039 --> 00:18:27,120
so as you can see here i have two vms

380
00:18:27,120 --> 00:18:31,919
this is supposed to be our attacking

381
00:18:31,919 --> 00:18:35,360
our targeted machine sorry our targeted

382
00:18:35,360 --> 00:18:36,480
server

383
00:18:36,480 --> 00:18:39,760
and just for this presentation i have

384
00:18:39,760 --> 00:18:40,720
built

385
00:18:40,720 --> 00:18:43,200
we have built the demo up and all the

386
00:18:43,200 --> 00:18:43,760
tests

387
00:18:43,760 --> 00:18:47,520
are gonna be relate relative to to the

388
00:18:47,520 --> 00:18:50,080
demo app

389
00:18:50,240 --> 00:18:53,440
so here this is a consider it as the

390
00:18:53,440 --> 00:18:56,490
developers workstation or from

391
00:18:56,490 --> 00:18:58,559
[Music]

392
00:18:58,559 --> 00:19:01,520
where from which we can uh run the

393
00:19:01,520 --> 00:19:03,760
ansible role

394
00:19:03,760 --> 00:19:07,039
right few examples

395
00:19:07,039 --> 00:19:09,200
and few things that i would like to

396
00:19:09,200 --> 00:19:11,200
mention when it comes to the ansible

397
00:19:11,200 --> 00:19:12,400
itself

398
00:19:12,400 --> 00:19:14,640
for especially for uh for security

399
00:19:14,640 --> 00:19:16,880
testing

400
00:19:16,880 --> 00:19:20,480
there is uh there is ansible

401
00:19:20,480 --> 00:19:25,840
best practices you can follow but

402
00:19:26,559 --> 00:19:29,678
one thing that

403
00:19:30,640 --> 00:19:34,880
at least i had an issue with it was the

404
00:19:34,880 --> 00:19:38,000
status of the tasks

405
00:19:38,000 --> 00:19:42,400
so ansible reports a change when a task

406
00:19:42,400 --> 00:19:43,840
has been completed

407
00:19:43,840 --> 00:19:47,679
right but this is not

408
00:19:47,679 --> 00:19:51,679
what most probably a change means for us

409
00:19:51,679 --> 00:19:54,799
so in this case you will see

410
00:19:54,799 --> 00:19:58,080
that uh in this

411
00:19:58,080 --> 00:20:01,200
i'm sorry in this playbook for example

412
00:20:01,200 --> 00:20:02,640
you will see

413
00:20:02,640 --> 00:20:05,840
that i have add changed when false

414
00:20:05,840 --> 00:20:07,919
because

415
00:20:07,919 --> 00:20:11,919
i don't wanna give me a change

416
00:20:11,919 --> 00:20:15,039
status back when it's actually

417
00:20:15,039 --> 00:20:18,720
it didn't change right

418
00:20:18,720 --> 00:20:20,960
of course everything within this role

419
00:20:20,960 --> 00:20:22,480
running

420
00:20:22,480 --> 00:20:26,080
in a check mode so no actual

421
00:20:26,080 --> 00:20:28,480
uh changes are going to happen in the

422
00:20:28,480 --> 00:20:29,360
server

423
00:20:29,360 --> 00:20:33,039
even if there are mish configurations

424
00:20:33,039 --> 00:20:36,880
we don't force anything at this

425
00:20:36,880 --> 00:20:41,840
at this point at least we only confirm

426
00:20:41,840 --> 00:20:44,320
the the thread and the issue and the

427
00:20:44,320 --> 00:20:45,120
finding

428
00:20:45,120 --> 00:20:48,000
and then we apply the fixes at least

429
00:20:48,000 --> 00:20:49,840
this is how we work till now

430
00:20:49,840 --> 00:20:52,480
and there is improvements needs to be

431
00:20:52,480 --> 00:20:54,240
done

432
00:20:54,240 --> 00:20:58,080
so let's let's start uh let me first run

433
00:20:58,080 --> 00:20:58,640
this

434
00:20:58,640 --> 00:21:02,880
display book

435
00:21:02,880 --> 00:21:04,720
this role i'm sorry so what i have here

436
00:21:04,720 --> 00:21:07,360
i'm going to run

437
00:21:07,440 --> 00:21:10,559
the whole role and gaze the inventory

438
00:21:10,559 --> 00:21:11,919
file

439
00:21:11,919 --> 00:21:14,159
and i'm going to use the variable

440
00:21:14,159 --> 00:21:16,080
application the application variable and

441
00:21:16,080 --> 00:21:17,919
pass the demo up

442
00:21:17,919 --> 00:21:21,360
as an argument and the folder variable

443
00:21:21,360 --> 00:21:21,840
in my

444
00:21:21,840 --> 00:21:24,640
in this case is where i want the report

445
00:21:24,640 --> 00:21:26,799
to be installed

446
00:21:26,799 --> 00:21:29,760
and the environment variable is in which

447
00:21:29,760 --> 00:21:32,080
environment

448
00:21:32,080 --> 00:21:34,960
we are testing so in this example we are

449
00:21:34,960 --> 00:21:38,000
testing on acceptance

450
00:21:38,799 --> 00:21:41,840
the whole playbook will not take more

451
00:21:41,840 --> 00:21:42,400
than

452
00:21:42,400 --> 00:21:45,600
two minutes the whole tests and

453
00:21:45,600 --> 00:21:48,960
the warnings that you see is nothing

454
00:21:48,960 --> 00:21:50,080
really

455
00:21:50,080 --> 00:21:54,159
scary so once it will use sftp

456
00:21:54,159 --> 00:21:59,200
or sap to transfer file in the remote

457
00:21:59,200 --> 00:22:02,400
server and in this case sftp

458
00:22:02,400 --> 00:22:06,559
is failing so it's using sap instead

459
00:22:07,200 --> 00:22:11,280
okay we have one changed

460
00:22:11,280 --> 00:22:14,240
being reported back which is uh the

461
00:22:14,240 --> 00:22:15,120
correct way

462
00:22:15,120 --> 00:22:17,039
because the change is actually the

463
00:22:17,039 --> 00:22:19,039
creation of the report as you see here

464
00:22:19,039 --> 00:22:19,360
so

465
00:22:19,360 --> 00:22:23,360
let's let's move a step back and analyze

466
00:22:23,360 --> 00:22:26,080
what we have here so first of all we are

467
00:22:26,080 --> 00:22:28,159
collecting some facts what is the time

468
00:22:28,159 --> 00:22:30,559
that uh

469
00:22:30,559 --> 00:22:32,559
this rolling is being start execute

470
00:22:32,559 --> 00:22:34,080
start running uh

471
00:22:34,080 --> 00:22:37,679
we have ipv4 addresses ipv6

472
00:22:37,679 --> 00:22:41,039
hostname kernel version distribution

473
00:22:41,039 --> 00:22:44,880
distribution version cylindric status

474
00:22:44,880 --> 00:22:50,080
upper status and environment variables

475
00:22:50,080 --> 00:22:53,600
so moving on here we have the mounts

476
00:22:53,600 --> 00:22:57,600
what devices are mounted in the

477
00:22:57,600 --> 00:23:01,600
in the server and now we have the first

478
00:23:01,600 --> 00:23:04,960
security testing security test

479
00:23:04,960 --> 00:23:07,039
which is applied to the stick framework

480
00:23:07,039 --> 00:23:08,000
and

481
00:23:08,000 --> 00:23:10,080
it's looking if it's checking investor

482
00:23:10,080 --> 00:23:12,720
sage allows empty password

483
00:23:12,720 --> 00:23:15,600
an empty password is not enabled in ssh

484
00:23:15,600 --> 00:23:16,559
and we see that

485
00:23:16,559 --> 00:23:19,440
root login is also not enabling ssh

486
00:23:19,440 --> 00:23:20,480
right

487
00:23:20,480 --> 00:23:24,000
so we don't really have to go and

488
00:23:24,000 --> 00:23:27,520
check manually for those the next

489
00:23:27,520 --> 00:23:30,799
test is uh ing specific and here we'll

490
00:23:30,799 --> 00:23:32,240
checking for a readable

491
00:23:32,240 --> 00:23:35,280
or writable log files

492
00:23:35,280 --> 00:23:38,400
and you will see that

493
00:23:38,400 --> 00:23:41,760
it found one writable log file which is

494
00:23:41,760 --> 00:23:45,120
the demo app server logs

495
00:23:45,120 --> 00:23:48,320
file and it also found one readable file

496
00:23:48,320 --> 00:23:51,440
sorry three readable files which

497
00:23:51,440 --> 00:23:54,159
is the demo uploads the map server logs

498
00:23:54,159 --> 00:23:56,400
and you can read me

499
00:23:56,400 --> 00:23:59,120
uploads

500
00:24:00,480 --> 00:24:05,120
just to confirm

501
00:24:05,120 --> 00:24:08,559
just to confirm um

502
00:24:14,799 --> 00:24:18,159
so we go to the demo up and i want to do

503
00:24:18,159 --> 00:24:22,000
like just this

504
00:24:22,720 --> 00:24:24,480
to see that the permission is actually

505
00:24:24,480 --> 00:24:26,080
correct

506
00:24:26,080 --> 00:24:29,200
right so moving on

507
00:24:29,200 --> 00:24:33,919
uh the next step is uh finding

508
00:24:33,919 --> 00:24:38,000
binaries that have s uid and sg id

509
00:24:38,000 --> 00:24:42,720
uh bit enabled so from here

510
00:24:42,720 --> 00:24:44,880
it is possible that we're gonna get a

511
00:24:44,880 --> 00:24:46,480
big list

512
00:24:46,480 --> 00:24:49,919
um reporting back

513
00:24:49,919 --> 00:24:53,279
in this place in this test but then

514
00:24:53,279 --> 00:24:55,279
what is really interesting for us is

515
00:24:55,279 --> 00:24:57,360
actually this

516
00:24:57,360 --> 00:25:01,200
right which means we have a

517
00:25:01,200 --> 00:25:06,400
search script with the sui dlg uid

518
00:25:06,400 --> 00:25:10,559
gid enabled

519
00:25:10,799 --> 00:25:14,799
and also this one will be interesting

520
00:25:14,799 --> 00:25:18,640
right because uh

521
00:25:18,640 --> 00:25:22,000
it may be possible to use vim to

522
00:25:22,000 --> 00:25:25,679
sell escape and

523
00:25:25,679 --> 00:25:29,039
get a root shell right

524
00:25:29,039 --> 00:25:33,120
so moving on to the later to the uh

525
00:25:33,120 --> 00:25:35,600
later tests we're looking for sensitive

526
00:25:35,600 --> 00:25:36,960
data in the readable logs

527
00:25:36,960 --> 00:25:40,640
and we are we finding that demo uploads

528
00:25:40,640 --> 00:25:44,559
and you can read me demo uploads

529
00:25:44,559 --> 00:25:48,880
are having sensitive data so

530
00:25:48,880 --> 00:25:56,880
let's we set the demo uploads

531
00:25:56,880 --> 00:26:00,159
and we see that there is sensitive data

532
00:26:00,159 --> 00:26:01,840
there is an i button in there

533
00:26:01,840 --> 00:26:05,679
of course the files are dumb files guys

534
00:26:05,679 --> 00:26:08,880
and the other one we said was

535
00:26:08,880 --> 00:26:12,480
you can't read me

536
00:26:12,480 --> 00:26:15,520
and we see that it's actually

537
00:26:15,520 --> 00:26:18,799
is grabbing the word the string key

538
00:26:18,799 --> 00:26:21,840
from here is reporting back

539
00:26:21,840 --> 00:26:25,840
based on that

540
00:26:26,640 --> 00:26:30,159
and yeah moving on changing

541
00:26:30,159 --> 00:26:35,679
sensitive files for secrets we'll see

542
00:26:36,640 --> 00:26:40,159
that the demoapp.conf

543
00:26:40,159 --> 00:26:42,240
it's a it's a possible candidate to have

544
00:26:42,240 --> 00:26:44,320
a secrets in there

545
00:26:44,320 --> 00:26:49,840
and if we go back and if we do a cut

546
00:26:50,240 --> 00:26:52,240
to the conf we see that we found

547
00:26:52,240 --> 00:26:53,760
password username

548
00:26:53,760 --> 00:26:56,000
in there right and we're moving on

549
00:26:56,000 --> 00:26:56,960
latest

550
00:26:56,960 --> 00:27:00,159
and the last task is uh the report

551
00:27:00,159 --> 00:27:01,520
creation

552
00:27:01,520 --> 00:27:04,559
now how

553
00:27:04,559 --> 00:27:07,919
this report looks like right that will

554
00:27:07,919 --> 00:27:09,919
be

555
00:27:09,919 --> 00:27:12,559
nice to see

556
00:27:13,120 --> 00:27:16,480
so the report comes in a html

557
00:27:16,480 --> 00:27:20,799
file and within ansible we use the ginza

558
00:27:20,799 --> 00:27:21,679
templating

559
00:27:21,679 --> 00:27:25,200
to build that and this is

560
00:27:25,200 --> 00:27:28,480
kind of how the report looks like

561
00:27:28,480 --> 00:27:30,880
we have

562
00:27:31,679 --> 00:27:34,720
the results

563
00:27:34,720 --> 00:27:38,799
in one place with the status for example

564
00:27:38,799 --> 00:27:41,279
the ssh config is a test that we can

565
00:27:41,279 --> 00:27:42,080
immediately

566
00:27:42,080 --> 00:27:44,080
immediately say if it's pa if it

567
00:27:44,080 --> 00:27:45,679
password failed

568
00:27:45,679 --> 00:27:48,640
but the rest are not that's that's why

569
00:27:48,640 --> 00:27:51,120
we have a manual check there

570
00:27:51,120 --> 00:27:54,959
and if we click we can see

571
00:27:55,039 --> 00:27:57,360
uh pretty much the same the same the

572
00:27:57,360 --> 00:27:58,799
same results

573
00:27:58,799 --> 00:28:03,600
uh the way that we want the report is

574
00:28:03,600 --> 00:28:06,559
yeah for tracking and keep evidence

575
00:28:06,559 --> 00:28:08,799
right

576
00:28:11,360 --> 00:28:13,600
so

577
00:28:14,720 --> 00:28:18,240
that was pretty much our uh

578
00:28:18,240 --> 00:28:22,080
concluding a demo as well so future work

579
00:28:22,080 --> 00:28:23,520
that we have

580
00:28:23,520 --> 00:28:25,600
in place and things we want to do to

581
00:28:25,600 --> 00:28:28,000
improve

582
00:28:28,080 --> 00:28:31,919
this role first of all we want to embed

583
00:28:31,919 --> 00:28:36,000
it in a zoocia icd pipeline

584
00:28:36,000 --> 00:28:39,679
we would like to create kind of a

585
00:28:39,679 --> 00:28:43,679
risk score for the tasks and therefore

586
00:28:43,679 --> 00:28:47,039
we can way more easily automate

587
00:28:47,039 --> 00:28:50,240
the uh approval disapproval of

588
00:28:50,240 --> 00:28:53,840
of a of a pentest

589
00:28:54,240 --> 00:28:56,799
and of course uh we're planning to

590
00:28:56,799 --> 00:28:58,799
release the playbooks as

591
00:28:58,799 --> 00:29:00,720
and the threats model as a as an open

592
00:29:00,720 --> 00:29:03,039
source

593
00:29:03,279 --> 00:29:07,760
so pretty much this is how we will look

594
00:29:07,760 --> 00:29:10,480
in uh in the near future right we will

595
00:29:10,480 --> 00:29:12,720
have pen testers we will have it

596
00:29:12,720 --> 00:29:14,559
available on demand

597
00:29:14,559 --> 00:29:16,159
where pen testers are gonna use it

598
00:29:16,159 --> 00:29:17,600
pretty much in the same way

599
00:29:17,600 --> 00:29:21,440
as it is today and we also gonna have it

600
00:29:21,440 --> 00:29:24,720
we would like to have it in the pipeline

601
00:29:24,720 --> 00:29:27,520
uh where is going to have an automated

602
00:29:27,520 --> 00:29:28,880
approval or this approval of that

603
00:29:28,880 --> 00:29:29,600
release

604
00:29:29,600 --> 00:29:33,440
right and as the time pass

605
00:29:33,440 --> 00:29:37,760
and the role it get it gets

606
00:29:37,760 --> 00:29:42,559
uh more and more feedback

607
00:29:42,880 --> 00:29:46,799
when it reaches a maturity level we can

608
00:29:46,799 --> 00:29:49,919
then just sit back and

609
00:29:49,919 --> 00:29:55,600
enjoy all the outcome of it

610
00:29:55,600 --> 00:29:59,760
so that pretty much concludes

611
00:29:59,760 --> 00:30:03,120
our presentation for uh

612
00:30:03,120 --> 00:30:06,320
security automation with ansible

613
00:30:06,320 --> 00:30:09,760
thanks for joining our presentation and

614
00:30:09,760 --> 00:30:14,399
see you in the q a session

