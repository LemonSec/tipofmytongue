1
00:00:02,800 --> 00:00:03,919
hey everybody

2
00:00:03,919 --> 00:00:07,200
my name is melisha mcgregor and i am a

3
00:00:07,200 --> 00:00:08,480
developer advocate

4
00:00:08,480 --> 00:00:11,599
at conductor where we build a tool that

5
00:00:11,599 --> 00:00:12,080
helps

6
00:00:12,080 --> 00:00:14,880
developers make their ci cd pipelines

7
00:00:14,880 --> 00:00:18,320
without yaml and you can debug live

8
00:00:18,320 --> 00:00:21,439
so today i'm going to talk to you about

9
00:00:21,439 --> 00:00:22,400
working with

10
00:00:22,400 --> 00:00:25,279
pixi to communicate with the cloud so

11
00:00:25,279 --> 00:00:27,599
basically we'll talk about this

12
00:00:27,599 --> 00:00:30,560
pixie authorization flow that helps you

13
00:00:30,560 --> 00:00:33,680
get to your cloud resources like apis

14
00:00:33,680 --> 00:00:35,920
and if you're interested in more stuff

15
00:00:35,920 --> 00:00:36,880
like this

16
00:00:36,880 --> 00:00:39,399
feel free to follow me on twitter at

17
00:00:39,399 --> 00:00:41,200
flippedcoding

18
00:00:41,200 --> 00:00:44,079
so before we jump into everything i want

19
00:00:44,079 --> 00:00:44,960
to give you all

20
00:00:44,960 --> 00:00:46,640
a quick overview of what we'll be

21
00:00:46,640 --> 00:00:48,719
covering

22
00:00:48,719 --> 00:00:51,280
the first thing we'll talk about is what

23
00:00:51,280 --> 00:00:52,480
is pixi

24
00:00:52,480 --> 00:00:55,120
so we'll get into the details of what

25
00:00:55,120 --> 00:00:56,640
this off flow is

26
00:00:56,640 --> 00:00:58,719
what it does and how it's different from

27
00:00:58,719 --> 00:01:00,879
the others

28
00:01:00,879 --> 00:01:03,359
then we'll talk about why pixie has

29
00:01:03,359 --> 00:01:04,000
replaced

30
00:01:04,000 --> 00:01:06,640
the implicit flow to become the new

31
00:01:06,640 --> 00:01:10,320
standard for authorization

32
00:01:10,400 --> 00:01:13,520
we'll go over an example implementation

33
00:01:13,520 --> 00:01:14,400
of pxe

34
00:01:14,400 --> 00:01:17,520
just so y'all can see how easy it really

35
00:01:17,520 --> 00:01:18,000
is to

36
00:01:18,000 --> 00:01:19,920
implement this to protect your cloud

37
00:01:19,920 --> 00:01:21,920
resources

38
00:01:21,920 --> 00:01:24,680
and then we'll go over a few more auth

39
00:01:24,680 --> 00:01:27,119
considerations for the cloud so you make

40
00:01:27,119 --> 00:01:27,920
sure

41
00:01:27,920 --> 00:01:31,119
everything stays secure

42
00:01:31,119 --> 00:01:33,759
and we'll cover a few other offloads

43
00:01:33,759 --> 00:01:34,479
that don't

44
00:01:34,479 --> 00:01:37,119
involve web apps because we do write

45
00:01:37,119 --> 00:01:38,960
different kinds of software

46
00:01:38,960 --> 00:01:42,560
so we need to know how to authorize

47
00:01:42,560 --> 00:01:45,600
those different apps

48
00:01:45,600 --> 00:01:48,399
and lastly we will wrap up with the key

49
00:01:48,399 --> 00:01:49,759
takeaways

50
00:01:49,759 --> 00:01:53,040
so to get started we'll go over what

51
00:01:53,040 --> 00:01:56,880
is pixie so pixie stands for

52
00:01:56,880 --> 00:02:00,000
proof key for code exchange

53
00:02:00,000 --> 00:02:02,960
and it's the new standard for more

54
00:02:02,960 --> 00:02:03,600
secure

55
00:02:03,600 --> 00:02:07,280
authorization which was introduced by

56
00:02:07,280 --> 00:02:10,800
oauth 2.0

57
00:02:10,800 --> 00:02:13,760
but the main thing that this does

58
00:02:13,760 --> 00:02:14,400
differently

59
00:02:14,400 --> 00:02:17,200
from the implicit flow is that it

60
00:02:17,200 --> 00:02:18,720
establishes

61
00:02:18,720 --> 00:02:22,319
that a client actually owns their access

62
00:02:22,319 --> 00:02:25,440
token so

63
00:02:25,440 --> 00:02:28,080
what this does it helps prevent

64
00:02:28,080 --> 00:02:29,040
attackers

65
00:02:29,040 --> 00:02:31,360
from intercepting their authorization

66
00:02:31,360 --> 00:02:32,239
code

67
00:02:32,239 --> 00:02:35,599
what that means is usually when you go

68
00:02:35,599 --> 00:02:36,080
through the

69
00:02:36,080 --> 00:02:38,720
implicit flow for a web app in

70
00:02:38,720 --> 00:02:40,160
particular

71
00:02:40,160 --> 00:02:43,360
it you send the credentials the server

72
00:02:43,360 --> 00:02:44,560
validates you

73
00:02:44,560 --> 00:02:47,280
you get some kind of access token back

74
00:02:47,280 --> 00:02:48,400
and then you use

75
00:02:48,400 --> 00:02:51,519
that to make requests to the api or to

76
00:02:51,519 --> 00:02:54,239
any other cloud resources and the

77
00:02:54,239 --> 00:02:55,360
problem with that

78
00:02:55,360 --> 00:03:00,080
is anybody who can access your computer

79
00:03:00,080 --> 00:03:02,640
or even just your browser could look

80
00:03:02,640 --> 00:03:05,519
into your cookies or your local storage

81
00:03:05,519 --> 00:03:05,920
or

82
00:03:05,920 --> 00:03:09,360
any other saved session information

83
00:03:09,360 --> 00:03:12,879
and find this access token and use it to

84
00:03:12,879 --> 00:03:14,720
authenticate themselves

85
00:03:14,720 --> 00:03:17,760
into your cloud resource

86
00:03:17,760 --> 00:03:20,800
so that means you could have somebody

87
00:03:20,800 --> 00:03:21,200
with

88
00:03:21,200 --> 00:03:25,680
admin level access using your apis

89
00:03:25,680 --> 00:03:28,400
to do some kind of malicious attack for

90
00:03:28,400 --> 00:03:30,080
all of your users

91
00:03:30,080 --> 00:03:33,599
and that's what pixie is here to help

92
00:03:33,599 --> 00:03:34,720
prevent

93
00:03:34,720 --> 00:03:37,840
so this became the new oauth

94
00:03:37,840 --> 00:03:41,120
standard after a few

95
00:03:41,120 --> 00:03:43,280
really major holes were found in the

96
00:03:43,280 --> 00:03:45,519
implicit flow

97
00:03:45,519 --> 00:03:48,879
but the way that pixie handles things

98
00:03:48,879 --> 00:03:49,280
that's

99
00:03:49,280 --> 00:03:52,640
different from the implicit flow

100
00:03:52,640 --> 00:03:55,120
is first of course the user clicks on

101
00:03:55,120 --> 00:03:56,319
login link

102
00:03:56,319 --> 00:03:59,599
but the app itself generates

103
00:03:59,599 --> 00:04:02,400
this code verifier which is just a

104
00:04:02,400 --> 00:04:02,959
string

105
00:04:02,959 --> 00:04:06,319
it can be a shine coded string

106
00:04:06,319 --> 00:04:10,239
it can be a plain text string either way

107
00:04:10,239 --> 00:04:13,439
the client has this code verified which

108
00:04:13,439 --> 00:04:13,760
is

109
00:04:13,760 --> 00:04:16,880
typically a shot string and

110
00:04:16,880 --> 00:04:19,839
it is sent along with the authorization

111
00:04:19,839 --> 00:04:21,600
request

112
00:04:21,600 --> 00:04:25,199
then there's also the code challenge

113
00:04:25,199 --> 00:04:28,720
which is created from the code verifier

114
00:04:28,720 --> 00:04:31,520
and it's sent in the authorization

115
00:04:31,520 --> 00:04:32,400
request

116
00:04:32,400 --> 00:04:36,400
but it's also used to verify the code

117
00:04:36,400 --> 00:04:39,520
verifier later in this flow

118
00:04:39,520 --> 00:04:42,880
and pretty much what it does is it

119
00:04:42,880 --> 00:04:46,800
it's made by hashing the code verifier

120
00:04:46,800 --> 00:04:48,720
but if you don't want to hash the code

121
00:04:48,720 --> 00:04:51,440
verifier you can just use

122
00:04:51,440 --> 00:04:55,120
the code verifier as the code challenge

123
00:04:55,120 --> 00:04:58,479
is just a way to have the client

124
00:04:58,479 --> 00:05:01,759
with some kind of information that only

125
00:05:01,759 --> 00:05:04,240
it would know about the authorization

126
00:05:04,240 --> 00:05:06,160
request

127
00:05:06,160 --> 00:05:08,479
there's also an optional parameter

128
00:05:08,479 --> 00:05:10,880
called the code challenge method

129
00:05:10,880 --> 00:05:14,000
and this can be what's used to make the

130
00:05:14,000 --> 00:05:15,199
code challenge

131
00:05:15,199 --> 00:05:17,520
basically you can specify if the code

132
00:05:17,520 --> 00:05:18,960
challenge should be

133
00:05:18,960 --> 00:05:21,199
a shaw string or if it should just be

134
00:05:21,199 --> 00:05:22,479
plain text

135
00:05:22,479 --> 00:05:24,639
if you don't put anything in for the

136
00:05:24,639 --> 00:05:26,320
code challenge method

137
00:05:26,320 --> 00:05:28,160
then it's probably just going to be a

138
00:05:28,160 --> 00:05:30,320
plain text and that's fine

139
00:05:30,320 --> 00:05:32,960
but that's what's happening here at this

140
00:05:32,960 --> 00:05:35,360
code verifier code challenge

141
00:05:35,360 --> 00:05:38,320
phase then of course things get sent to

142
00:05:38,320 --> 00:05:38,800
your

143
00:05:38,800 --> 00:05:42,080
auth entity you get some

144
00:05:42,080 --> 00:05:44,720
login redirect sent to the user so they

145
00:05:44,720 --> 00:05:46,560
put in their credentials

146
00:05:46,560 --> 00:05:48,960
after they put in their credentials they

147
00:05:48,960 --> 00:05:51,199
either authenticate and you authorize

148
00:05:51,199 --> 00:05:52,000
them all that good

149
00:05:52,000 --> 00:05:55,360
stuff this is where the other part of

150
00:05:55,360 --> 00:05:56,479
pixie comes in

151
00:05:56,479 --> 00:05:59,440
and makes things super secure that

152
00:05:59,440 --> 00:06:00,960
authorization code

153
00:06:00,960 --> 00:06:04,800
has to have the code verifier as well

154
00:06:04,800 --> 00:06:08,080
without that code verifier the

155
00:06:08,080 --> 00:06:10,720
person trying to log in will not get

156
00:06:10,720 --> 00:06:12,560
through the off flow they'll just be

157
00:06:12,560 --> 00:06:15,120
returned to the login page or

158
00:06:15,120 --> 00:06:18,080
whatever other kind of setup you have

159
00:06:18,080 --> 00:06:19,280
for them

160
00:06:19,280 --> 00:06:22,400
but if they do have a code verifier

161
00:06:22,400 --> 00:06:23,440
included

162
00:06:23,440 --> 00:06:26,400
then you validate this code verifier and

163
00:06:26,400 --> 00:06:27,280
the challenge

164
00:06:27,280 --> 00:06:30,479
in your auth entity and if things check

165
00:06:30,479 --> 00:06:31,039
out

166
00:06:31,039 --> 00:06:34,080
you send the access token so

167
00:06:34,080 --> 00:06:36,800
basically what happens that's different

168
00:06:36,800 --> 00:06:38,720
from the implicit flow

169
00:06:38,720 --> 00:06:41,199
is that this code verifier and code

170
00:06:41,199 --> 00:06:42,080
challenge

171
00:06:42,080 --> 00:06:45,520
live on the app as well as the server

172
00:06:45,520 --> 00:06:49,280
so if somebody does intercept the access

173
00:06:49,280 --> 00:06:52,639
token anywhere in this

174
00:06:52,639 --> 00:06:56,080
then they won't be able to

175
00:06:56,080 --> 00:06:58,800
authenticate because they don't have the

176
00:06:58,800 --> 00:07:00,240
client side

177
00:07:00,240 --> 00:07:03,360
code verifier to match the server and

178
00:07:03,360 --> 00:07:04,160
that's how

179
00:07:04,160 --> 00:07:07,280
pixi makes our apps more secure

180
00:07:07,280 --> 00:07:09,759
that's how it protects all of our cloud

181
00:07:09,759 --> 00:07:10,639
resources

182
00:07:10,639 --> 00:07:14,720
api calls and everything else

183
00:07:15,039 --> 00:07:16,639
and we've talked about some of the

184
00:07:16,639 --> 00:07:18,880
reasons it has replaced implicit flow

185
00:07:18,880 --> 00:07:21,039
but it's worth reiterating

186
00:07:21,039 --> 00:07:24,720
your authorization token can be stolen

187
00:07:24,720 --> 00:07:28,080
in an interception attack and basically

188
00:07:28,080 --> 00:07:28,880
what that is

189
00:07:28,880 --> 00:07:32,639
is when an attacker comes and they get

190
00:07:32,639 --> 00:07:35,840
your access token somehow and they use

191
00:07:35,840 --> 00:07:38,000
it to log into an application

192
00:07:38,000 --> 00:07:40,880
pretending it's you without ever having

193
00:07:40,880 --> 00:07:42,880
to enter any credentials

194
00:07:42,880 --> 00:07:44,960
once you have the access token you have

195
00:07:44,960 --> 00:07:48,080
access to the cloud

196
00:07:48,639 --> 00:07:51,759
and then fix pixie fixes this

197
00:07:51,759 --> 00:07:55,440
because it adds that code verifier and

198
00:07:55,440 --> 00:07:56,560
the code challenge

199
00:07:56,560 --> 00:07:59,440
to the client as well as the

200
00:07:59,440 --> 00:08:00,639
authorization

201
00:08:00,639 --> 00:08:04,960
on the back end

202
00:08:05,440 --> 00:08:08,000
and this builds on top of the standard

203
00:08:08,000 --> 00:08:10,560
authorization code flow so that might be

204
00:08:10,560 --> 00:08:11,440
why it looks

205
00:08:11,440 --> 00:08:13,759
pretty familiar except for the few

206
00:08:13,759 --> 00:08:15,360
things that it added

207
00:08:15,360 --> 00:08:18,319
the authorization code flow is basically

208
00:08:18,319 --> 00:08:20,000
the implicit flow

209
00:08:20,000 --> 00:08:22,080
and it was the standard for a really

210
00:08:22,080 --> 00:08:23,360
long time

211
00:08:23,360 --> 00:08:26,479
and until recently it was fine but we

212
00:08:26,479 --> 00:08:28,000
found out that

213
00:08:28,000 --> 00:08:32,320
since the client session stuff is stored

214
00:08:32,320 --> 00:08:37,200
on mobile devices is stored in browsers

215
00:08:37,200 --> 00:08:40,640
so that makes it a security

216
00:08:40,640 --> 00:08:43,519
weakness and to fix that pixie has come

217
00:08:43,519 --> 00:08:43,919
through

218
00:08:43,919 --> 00:08:47,360
and replaced it and again

219
00:08:47,360 --> 00:08:50,399
remember the only difference really the

220
00:08:50,399 --> 00:08:51,920
only main difference between

221
00:08:51,920 --> 00:08:54,800
pixie and the implicit flow is adding

222
00:08:54,800 --> 00:08:55,839
that

223
00:08:55,839 --> 00:08:59,040
sha co verifier some kind of

224
00:08:59,040 --> 00:09:02,320
code challenge and then the method that

225
00:09:02,320 --> 00:09:03,279
you want to use

226
00:09:03,279 --> 00:09:06,240
to make the code challenge so remember

227
00:09:06,240 --> 00:09:09,040
the code challenge method is optional

228
00:09:09,040 --> 00:09:11,600
and if you don't include anything i

229
00:09:11,600 --> 00:09:13,839
think it's just plain text instead of

230
00:09:13,839 --> 00:09:14,560
sha

231
00:09:14,560 --> 00:09:16,240
which doesn't make a difference it's no

232
00:09:16,240 --> 00:09:19,440
big deal and then the code verifier is

233
00:09:19,440 --> 00:09:20,720
the thing that is

234
00:09:20,720 --> 00:09:24,160
on the client as well as the server

235
00:09:24,160 --> 00:09:26,320
and the code challenge is what verifies

236
00:09:26,320 --> 00:09:28,480
that those are the same things

237
00:09:28,480 --> 00:09:31,920
and that is why and how

238
00:09:31,920 --> 00:09:35,279
pixi has replaced implicit flow

239
00:09:35,279 --> 00:09:37,279
so now we'll just look at a quick

240
00:09:37,279 --> 00:09:38,320
example of

241
00:09:38,320 --> 00:09:41,440
how to implement pixie it's

242
00:09:41,440 --> 00:09:43,920
actually really easy if you're using

243
00:09:43,920 --> 00:09:45,920
some kind of auth entity like

244
00:09:45,920 --> 00:09:49,360
autho like them in particular they have

245
00:09:49,360 --> 00:09:52,320
a library that you can just use this

246
00:09:52,320 --> 00:09:53,440
hook

247
00:09:53,440 --> 00:09:56,560
and basically it will tell you if

248
00:09:56,560 --> 00:09:59,680
a user has been authenticated it'll

249
00:09:59,680 --> 00:10:03,200
automatically pop up a login so

250
00:10:03,200 --> 00:10:05,200
when somebody tries to sign into your

251
00:10:05,200 --> 00:10:07,120
app they're just

252
00:10:07,120 --> 00:10:10,480
taken to the off o login

253
00:10:10,480 --> 00:10:14,399
form and then when somebody logs out

254
00:10:14,399 --> 00:10:16,160
there's a method you call

255
00:10:16,160 --> 00:10:18,880
so that author clears out any

256
00:10:18,880 --> 00:10:20,959
credentials or cookies or

257
00:10:20,959 --> 00:10:23,440
any other session info that could

258
00:10:23,440 --> 00:10:26,480
possibly be used in an attack

259
00:10:26,480 --> 00:10:29,920
so with these three methods

260
00:10:29,920 --> 00:10:33,279
this one parameter and these two methods

261
00:10:33,279 --> 00:10:36,480
all you have to do is add

262
00:10:36,480 --> 00:10:39,600
just add them to your code so

263
00:10:39,600 --> 00:10:42,000
basically what we've set up here this is

264
00:10:42,000 --> 00:10:42,640
just

265
00:10:42,640 --> 00:10:46,000
a little budget tracker app

266
00:10:46,000 --> 00:10:49,040
that i made for this demo and what you

267
00:10:49,040 --> 00:10:49,519
have

268
00:10:49,519 --> 00:10:53,040
is just a login button so when a user

269
00:10:53,040 --> 00:10:55,440
comes to the page they click the button

270
00:10:55,440 --> 00:10:56,480
and if they have

271
00:10:56,480 --> 00:11:00,079
not been authenticated yet then the

272
00:11:00,079 --> 00:11:02,880
login popup for author will show and

273
00:11:02,880 --> 00:11:05,040
they enter their credentials

274
00:11:05,040 --> 00:11:07,600
but if they have been logged in they

275
00:11:07,600 --> 00:11:08,399
won't see

276
00:11:08,399 --> 00:11:10,480
the login button but they'll see this

277
00:11:10,480 --> 00:11:11,839
logout button

278
00:11:11,839 --> 00:11:13,760
and when you click it they should be

279
00:11:13,760 --> 00:11:17,200
returned to our local host

280
00:11:17,200 --> 00:11:20,560
so that's actually it in a react app

281
00:11:20,560 --> 00:11:21,600
that is how you

282
00:11:21,600 --> 00:11:24,880
implement pixie so basically that just

283
00:11:24,880 --> 00:11:25,600
means

284
00:11:25,600 --> 00:11:29,519
go choose the right off provider for you

285
00:11:29,519 --> 00:11:32,959
and hook into their methods or if you

286
00:11:32,959 --> 00:11:36,720
really need to make a custom

287
00:11:36,720 --> 00:11:40,160
a custom authentication flow you want to

288
00:11:40,160 --> 00:11:42,000
really consider spinning up your

289
00:11:42,000 --> 00:11:44,560
own separate service and not including

290
00:11:44,560 --> 00:11:46,959
that in the application itself

291
00:11:46,959 --> 00:11:49,040
just so that you can reuse it amongst

292
00:11:49,040 --> 00:11:51,440
other apps that you're working on

293
00:11:51,440 --> 00:11:54,480
but i'll go ahead and run this just so

294
00:11:54,480 --> 00:11:57,519
that you can have an idea of what

295
00:11:57,519 --> 00:12:00,639
this auth flow looks like which honestly

296
00:12:00,639 --> 00:12:02,160
you've seen it

297
00:12:02,160 --> 00:12:06,160
a thousand times just because

298
00:12:06,160 --> 00:12:10,880
it's an off flow so we'll wait for the

299
00:12:10,880 --> 00:12:13,839
app to come up

300
00:12:20,720 --> 00:12:22,720
just want to make sure i don't have any

301
00:12:22,720 --> 00:12:26,079
weird build errors going on

302
00:12:26,079 --> 00:12:29,120
okay so

303
00:12:29,120 --> 00:12:32,560
it automatically takes me to this autho

304
00:12:32,560 --> 00:12:34,079
login page

305
00:12:34,079 --> 00:12:36,720
and i'll just go ahead and sign in with

306
00:12:36,720 --> 00:12:40,240
one of my google accounts

307
00:12:40,240 --> 00:12:43,440
so we'll sign in and

308
00:12:43,440 --> 00:12:46,480
ta-da as you can see there is a

309
00:12:46,480 --> 00:12:48,800
logout button and so far i haven't spent

310
00:12:48,800 --> 00:12:50,079
any money this month

311
00:12:50,079 --> 00:12:53,920
that's really good but back to the code

312
00:12:53,920 --> 00:12:57,760
you see that means we have

313
00:12:57,760 --> 00:13:00,959
used this is authenticated parameter to

314
00:13:00,959 --> 00:13:03,360
determine which button to show and what

315
00:13:03,360 --> 00:13:04,959
actions to take

316
00:13:04,959 --> 00:13:08,079
we've logged in with the off

317
00:13:08,079 --> 00:13:11,680
oh pop up and we're about to use the log

318
00:13:11,680 --> 00:13:15,920
out just so that it cleans up everything

319
00:13:16,639 --> 00:13:19,680
so we log out well i guess there's

320
00:13:19,680 --> 00:13:20,959
something weird with the

321
00:13:20,959 --> 00:13:24,240
redirecting to localhost so we'll just

322
00:13:24,240 --> 00:13:25,839
skip that part but

323
00:13:25,839 --> 00:13:28,399
basically you see how it works you just

324
00:13:28,399 --> 00:13:31,519
use the methods that come from whatever

325
00:13:31,519 --> 00:13:34,560
auth provider you're using and

326
00:13:34,560 --> 00:13:37,440
it's pretty much that easy again if

327
00:13:37,440 --> 00:13:38,720
you're trying to implement

328
00:13:38,720 --> 00:13:42,480
your own pixie flow make sure you create

329
00:13:42,480 --> 00:13:44,240
a separate service

330
00:13:44,240 --> 00:13:46,959
so that not only can you use it across

331
00:13:46,959 --> 00:13:48,320
other projects but

332
00:13:48,320 --> 00:13:50,399
you can update it and keep it in

333
00:13:50,399 --> 00:13:52,880
compliance with the current web security

334
00:13:52,880 --> 00:13:55,199
standards

335
00:13:55,199 --> 00:13:57,519
so now that you know how to implement

336
00:13:57,519 --> 00:13:59,680
pixi which hopefully you see is really

337
00:13:59,680 --> 00:14:00,560
easy

338
00:14:00,560 --> 00:14:02,639
and it gives you access to cloud

339
00:14:02,639 --> 00:14:03,600
resources

340
00:14:03,600 --> 00:14:06,480
no problem it all happens behind the

341
00:14:06,480 --> 00:14:07,440
scenes

342
00:14:07,440 --> 00:14:10,959
so as long as you

343
00:14:10,959 --> 00:14:13,600
aren't trying to change it too much it's

344
00:14:13,600 --> 00:14:16,160
a really straightforward

345
00:14:16,160 --> 00:14:19,920
awful to implement but there are some

346
00:14:19,920 --> 00:14:21,440
more considerations

347
00:14:21,440 --> 00:14:24,079
for authorization in the cloud so you

348
00:14:24,079 --> 00:14:25,839
want to make sure that you're keeping

349
00:14:25,839 --> 00:14:27,279
your user permissions

350
00:14:27,279 --> 00:14:30,320
up to date there have been times where

351
00:14:30,320 --> 00:14:32,959
old employees still have admin level

352
00:14:32,959 --> 00:14:34,320
access

353
00:14:34,320 --> 00:14:37,360
to pretty much everything um

354
00:14:37,360 --> 00:14:39,440
there are times where new employees

355
00:14:39,440 --> 00:14:41,519
don't have enough access

356
00:14:41,519 --> 00:14:44,399
so make sure that your users have the

357
00:14:44,399 --> 00:14:46,240
correct permissions

358
00:14:46,240 --> 00:14:48,800
nobody should be able to access anything

359
00:14:48,800 --> 00:14:49,519
that you

360
00:14:49,519 --> 00:14:52,880
aren't expecting them to

361
00:14:53,760 --> 00:14:55,920
and then make sure that all of your

362
00:14:55,920 --> 00:14:56,800
credentials

363
00:14:56,800 --> 00:14:59,760
and secrets are encrypted and kept

364
00:14:59,760 --> 00:15:01,440
really safe

365
00:15:01,440 --> 00:15:05,040
one thing that is a common security flaw

366
00:15:05,040 --> 00:15:05,519
for

367
00:15:05,519 --> 00:15:08,880
cloud resources is that people don't

368
00:15:08,880 --> 00:15:09,519
update

369
00:15:09,519 --> 00:15:12,720
usernames and passwords or they

370
00:15:12,720 --> 00:15:16,639
leave old username and passwords that

371
00:15:16,639 --> 00:15:20,320
a lot of people know and that creates

372
00:15:20,320 --> 00:15:23,839
just really big security holes so you

373
00:15:23,839 --> 00:15:25,199
don't want to have

374
00:15:25,199 --> 00:15:27,519
some spreadsheet that you email between

375
00:15:27,519 --> 00:15:29,600
your co-workers with all of your login

376
00:15:29,600 --> 00:15:30,720
credentials

377
00:15:30,720 --> 00:15:33,920
of course but if you can

378
00:15:33,920 --> 00:15:36,560
try to store any of these things in your

379
00:15:36,560 --> 00:15:38,240
cicd pipelines

380
00:15:38,240 --> 00:15:41,839
or on your off provider

381
00:15:41,839 --> 00:15:44,959
specifically or in something like one

382
00:15:44,959 --> 00:15:45,759
pass

383
00:15:45,759 --> 00:15:48,720
whatever you're doing make sure that you

384
00:15:48,720 --> 00:15:50,880
keep all of your credentials and secrets

385
00:15:50,880 --> 00:15:51,519
for these

386
00:15:51,519 --> 00:15:54,880
cloud resources secure and hopefully

387
00:15:54,880 --> 00:15:56,079
encrypted

388
00:15:56,079 --> 00:15:57,839
i know that you can have your code

389
00:15:57,839 --> 00:15:59,440
verifier and code

390
00:15:59,440 --> 00:16:02,639
challenge as plain text but do not

391
00:16:02,639 --> 00:16:04,560
store your credentials and secrets as

392
00:16:04,560 --> 00:16:08,000
plain text ever

393
00:16:08,000 --> 00:16:10,480
and then something else to consider when

394
00:16:10,480 --> 00:16:12,240
you're working with the cloud

395
00:16:12,240 --> 00:16:14,240
make sure you know what kind of app

396
00:16:14,240 --> 00:16:15,920
you're working with

397
00:16:15,920 --> 00:16:18,959
in a lot of cases we think about things

398
00:16:18,959 --> 00:16:21,920
just from a web app perspective but

399
00:16:21,920 --> 00:16:22,639
remember

400
00:16:22,639 --> 00:16:25,519
there are other software engineers

401
00:16:25,519 --> 00:16:27,120
working on things like

402
00:16:27,120 --> 00:16:30,560
iot devices or they're working on

403
00:16:30,560 --> 00:16:33,680
software where machines just communicate

404
00:16:33,680 --> 00:16:34,880
with each other with

405
00:16:34,880 --> 00:16:38,240
no human user so

406
00:16:38,240 --> 00:16:40,480
those will have different authorization

407
00:16:40,480 --> 00:16:41,519
flows

408
00:16:41,519 --> 00:16:44,480
than a regular web app and that's why

409
00:16:44,480 --> 00:16:45,040
you need

410
00:16:45,040 --> 00:16:48,079
to make sure you know what you're

411
00:16:48,079 --> 00:16:50,000
approaching before you choose

412
00:16:50,000 --> 00:16:52,880
an offload

413
00:16:53,600 --> 00:16:56,240
and something else especially for the

414
00:16:56,240 --> 00:16:56,720
cloud

415
00:16:56,720 --> 00:16:59,440
and web apps is make sure that when you

416
00:16:59,440 --> 00:17:00,199
make these

417
00:17:00,199 --> 00:17:04,160
jwts you aren't adding unnecessary

418
00:17:04,160 --> 00:17:08,000
information so if your api response has

419
00:17:08,000 --> 00:17:08,799
changed

420
00:17:08,799 --> 00:17:12,799
or the request parameters have changed

421
00:17:12,799 --> 00:17:16,400
make sure that whatever is in

422
00:17:16,400 --> 00:17:20,000
that token is the bare minimum

423
00:17:20,000 --> 00:17:23,199
of what's needed to access

424
00:17:23,199 --> 00:17:26,880
that cloud resource so if you have some

425
00:17:26,880 --> 00:17:30,480
leftover user ids or some left

426
00:17:30,480 --> 00:17:34,160
over general user information make sure

427
00:17:34,160 --> 00:17:37,039
that you're updating that and adding

428
00:17:37,039 --> 00:17:38,720
things as you need them but

429
00:17:38,720 --> 00:17:41,280
please make sure you're removing things

430
00:17:41,280 --> 00:17:42,320
as well

431
00:17:42,320 --> 00:17:45,679
those jwts can be decrypted by free

432
00:17:45,679 --> 00:17:47,280
online websites

433
00:17:47,280 --> 00:17:50,400
so you don't want to have any plain text

434
00:17:50,400 --> 00:17:53,919
secrets or anything else you just don't

435
00:17:53,919 --> 00:17:55,440
want people to

436
00:17:55,440 --> 00:18:00,320
have access to or still have access to

437
00:18:00,320 --> 00:18:03,280
and we briefly mentioned the other off

438
00:18:03,280 --> 00:18:04,400
flows

439
00:18:04,400 --> 00:18:07,679
that software developers might face

440
00:18:07,679 --> 00:18:10,640
and one that we'll talk about real quick

441
00:18:10,640 --> 00:18:11,440
just so

442
00:18:11,440 --> 00:18:14,400
you know where pixie comes from is the

443
00:18:14,400 --> 00:18:15,520
authorization

444
00:18:15,520 --> 00:18:19,600
code flow so this is the original

445
00:18:19,600 --> 00:18:23,120
standard for verifying

446
00:18:23,120 --> 00:18:26,160
a user's access to a web app and

447
00:18:26,160 --> 00:18:27,360
basically they go

448
00:18:27,360 --> 00:18:30,240
through the same flow they click some

449
00:18:30,240 --> 00:18:31,520
login button

450
00:18:31,520 --> 00:18:34,799
they send some kind of request to

451
00:18:34,799 --> 00:18:38,240
authorize and they get

452
00:18:38,240 --> 00:18:40,799
redirected to some kind of login they

453
00:18:40,799 --> 00:18:42,640
put in their credentials

454
00:18:42,640 --> 00:18:45,919
the auth provider will either validate

455
00:18:45,919 --> 00:18:47,360
them or not

456
00:18:47,360 --> 00:18:49,840
and then they get an access token so

457
00:18:49,840 --> 00:18:52,080
once they have the access token

458
00:18:52,080 --> 00:18:54,400
they can do whatever they want with your

459
00:18:54,400 --> 00:18:55,679
api or

460
00:18:55,679 --> 00:18:57,760
with your images that are in the cloud

461
00:18:57,760 --> 00:18:59,919
whatever cloud resource you're

462
00:18:59,919 --> 00:19:03,120
giving them permission to access that's

463
00:19:03,120 --> 00:19:05,039
why pixi came along because

464
00:19:05,039 --> 00:19:08,720
this flow has just a few security holes

465
00:19:08,720 --> 00:19:10,160
that make it too easy

466
00:19:10,160 --> 00:19:12,720
for hackers to get access to those cloud

467
00:19:12,720 --> 00:19:15,360
resources

468
00:19:16,799 --> 00:19:20,160
another authorization flow

469
00:19:20,160 --> 00:19:23,360
is the client credentials flow and

470
00:19:23,360 --> 00:19:25,919
basically what this is it's a way for

471
00:19:25,919 --> 00:19:27,360
machines

472
00:19:27,360 --> 00:19:29,600
that communicate with each other to

473
00:19:29,600 --> 00:19:31,440
authenticate each other

474
00:19:31,440 --> 00:19:34,080
and make sure that it's the right device

475
00:19:34,080 --> 00:19:37,200
communicating to the right device

476
00:19:37,200 --> 00:19:39,520
and the way that these work is that each

477
00:19:39,520 --> 00:19:40,559
machine

478
00:19:40,559 --> 00:19:43,679
has their own client id and secret

479
00:19:43,679 --> 00:19:46,320
and the auth provider is going to be

480
00:19:46,320 --> 00:19:47,039
able to

481
00:19:47,039 --> 00:19:50,559
verify those before it sends

482
00:19:50,559 --> 00:19:53,440
any type of access token to the machine

483
00:19:53,440 --> 00:19:54,240
but once

484
00:19:54,240 --> 00:19:56,799
those things are verified the machine

485
00:19:56,799 --> 00:19:58,320
gets the token

486
00:19:58,320 --> 00:20:01,200
and it can communicate with the api the

487
00:20:01,200 --> 00:20:02,320
cloud

488
00:20:02,320 --> 00:20:05,360
or any of the other machines that it's

489
00:20:05,360 --> 00:20:07,440
connected to in this way

490
00:20:07,440 --> 00:20:10,720
but in most cases it'll probably get

491
00:20:10,720 --> 00:20:13,120
some kind of response from another

492
00:20:13,120 --> 00:20:13,919
machine

493
00:20:13,919 --> 00:20:18,840
or it'll send a response to another

494
00:20:18,840 --> 00:20:21,280
machine

495
00:20:21,280 --> 00:20:23,840
then another flow that you probably have

496
00:20:23,840 --> 00:20:24,960
used

497
00:20:24,960 --> 00:20:28,320
a lot this year just because of how

498
00:20:28,320 --> 00:20:31,840
2020 has been is the device flow

499
00:20:31,840 --> 00:20:35,039
so all of those iot devices your

500
00:20:35,039 --> 00:20:38,640
smart watch your ring doorbell cameras

501
00:20:38,640 --> 00:20:42,559
your thermostat

502
00:20:42,559 --> 00:20:44,960
adjusters that you have on your phone

503
00:20:44,960 --> 00:20:46,159
pretty much everything

504
00:20:46,159 --> 00:20:50,159
that you you can control via an app

505
00:20:50,159 --> 00:20:54,400
will fall under this authorization flow

506
00:20:54,400 --> 00:20:58,559
and the way it works is that a user just

507
00:20:58,559 --> 00:21:00,880
opens an app just like you would for

508
00:21:00,880 --> 00:21:02,000
like the ring app

509
00:21:02,000 --> 00:21:05,039
or something and you send

510
00:21:05,039 --> 00:21:08,240
the request to login so

511
00:21:08,240 --> 00:21:11,760
you get some kind of url

512
00:21:11,760 --> 00:21:14,400
redirection or some kind of code that

513
00:21:14,400 --> 00:21:15,679
comes to you

514
00:21:15,679 --> 00:21:18,880
and you enter that into whatever login

515
00:21:18,880 --> 00:21:20,240
screen it pops up

516
00:21:20,240 --> 00:21:23,760
so once you get past that part of the

517
00:21:23,760 --> 00:21:27,600
authorization some up like the access

518
00:21:27,600 --> 00:21:31,679
token will go back to your auth provider

519
00:21:31,679 --> 00:21:34,400
and it'll figure out if the device

520
00:21:34,400 --> 00:21:37,440
that's trying to connect to the service

521
00:21:37,440 --> 00:21:40,320
is actually authorized to connect to the

522
00:21:40,320 --> 00:21:41,360
service

523
00:21:41,360 --> 00:21:44,960
so that user code is used more as

524
00:21:44,960 --> 00:21:48,400
an indicator of hey this device can be

525
00:21:48,400 --> 00:21:51,280
used with this service

526
00:21:51,280 --> 00:21:53,760
but once it figures out if your device

527
00:21:53,760 --> 00:21:54,640
is

528
00:21:54,640 --> 00:21:58,000
good to go then you get to log

529
00:21:58,000 --> 00:22:00,240
in and this is usually through some kind

530
00:22:00,240 --> 00:22:02,080
of web browser or

531
00:22:02,080 --> 00:22:05,360
some kind of in-app pop-up something

532
00:22:05,360 --> 00:22:06,159
will show

533
00:22:06,159 --> 00:22:09,120
where you need to enter your credentials

534
00:22:09,120 --> 00:22:11,360
once you enter those credentials

535
00:22:11,360 --> 00:22:14,400
the auth provider will either verify

536
00:22:14,400 --> 00:22:14,799
them

537
00:22:14,799 --> 00:22:17,520
or reject them and if you do get

538
00:22:17,520 --> 00:22:20,159
verified you get the access token

539
00:22:20,159 --> 00:22:24,159
and you can finally use your device

540
00:22:24,159 --> 00:22:27,280
so what's happening there is

541
00:22:27,280 --> 00:22:30,240
that at the end of the process after

542
00:22:30,240 --> 00:22:31,760
you've logged in

543
00:22:31,760 --> 00:22:34,320
instead of communicating maybe with an

544
00:22:34,320 --> 00:22:35,120
api

545
00:22:35,120 --> 00:22:37,360
maybe it is an api maybe some other

546
00:22:37,360 --> 00:22:38,320
resource

547
00:22:38,320 --> 00:22:41,120
but you can send commands to the

548
00:22:41,120 --> 00:22:41,840
specific

549
00:22:41,840 --> 00:22:44,559
iot device like you can tell your light

550
00:22:44,559 --> 00:22:46,320
to turn on from your computer

551
00:22:46,320 --> 00:22:49,360
or you can turn your house alarm off

552
00:22:49,360 --> 00:22:51,360
from your phone things like that

553
00:22:51,360 --> 00:22:54,080
that's what the device authorization

554
00:22:54,080 --> 00:22:56,720
flow is for

555
00:22:56,720 --> 00:22:58,799
so now that you know about all of these

556
00:22:58,799 --> 00:23:01,039
authorization flows and you've learned a

557
00:23:01,039 --> 00:23:03,679
little bit about how to implement pixie

558
00:23:03,679 --> 00:23:05,600
there's just a few things to go over

559
00:23:05,600 --> 00:23:06,799
before we wrap up

560
00:23:06,799 --> 00:23:10,400
and you can start going to use auto for

561
00:23:10,400 --> 00:23:12,240
your pixie and react

562
00:23:12,240 --> 00:23:15,919
but basically you really want to make

563
00:23:15,919 --> 00:23:17,919
sure that you stay up to date with the

564
00:23:17,919 --> 00:23:19,840
oauth standards

565
00:23:19,840 --> 00:23:22,960
they are kind of like the governing body

566
00:23:22,960 --> 00:23:23,360
for

567
00:23:23,360 --> 00:23:26,960
web security and authorization flows so

568
00:23:26,960 --> 00:23:29,120
make sure that you know about any

569
00:23:29,120 --> 00:23:31,360
changes that they're making or any

570
00:23:31,360 --> 00:23:33,600
vulnerabilities or weaknesses that they

571
00:23:33,600 --> 00:23:34,960
found

572
00:23:34,960 --> 00:23:37,600
another resource that's good is also the

573
00:23:37,600 --> 00:23:38,320
owasp

574
00:23:38,320 --> 00:23:41,760
top 10. they showed the

575
00:23:41,760 --> 00:23:45,039
top 10 web security issues

576
00:23:45,039 --> 00:23:48,640
that are just around and you need to be

577
00:23:48,640 --> 00:23:49,440
aware of

578
00:23:49,440 --> 00:23:51,760
especially if you're working on web apps

579
00:23:51,760 --> 00:23:53,600
so make sure you know what

580
00:23:53,600 --> 00:23:58,399
the latest authorization standards are

581
00:23:58,480 --> 00:24:00,400
and then make sure that you're choosing

582
00:24:00,400 --> 00:24:02,400
the right kind of auth flow for your

583
00:24:02,400 --> 00:24:03,200
process

584
00:24:03,200 --> 00:24:06,640
so just like we discussed previously

585
00:24:06,640 --> 00:24:10,080
if you're working on an iot application

586
00:24:10,080 --> 00:24:13,039
you probably don't want to use pixie

587
00:24:13,039 --> 00:24:14,240
because

588
00:24:14,240 --> 00:24:16,240
that means somebody else is going to

589
00:24:16,240 --> 00:24:18,240
have to

590
00:24:18,240 --> 00:24:21,600
log in as a verified device

591
00:24:21,600 --> 00:24:24,799
and that's just not how it works so make

592
00:24:24,799 --> 00:24:26,000
sure that you know

593
00:24:26,000 --> 00:24:30,840
what flow is going to work best for your

594
00:24:30,840 --> 00:24:32,320
software

595
00:24:32,320 --> 00:24:35,760
and then again make sure that your users

596
00:24:35,760 --> 00:24:36,720
have the right

597
00:24:36,720 --> 00:24:40,559
authorization levels you don't want to

598
00:24:40,559 --> 00:24:41,279
give

599
00:24:41,279 --> 00:24:45,039
a customer admin level access

600
00:24:45,039 --> 00:24:46,799
if you don't want them to see certain

601
00:24:46,799 --> 00:24:48,480
features or you don't want them to be

602
00:24:48,480 --> 00:24:50,400
able to do certain things

603
00:24:50,400 --> 00:24:53,440
just make sure that you know

604
00:24:53,440 --> 00:24:56,640
who has permission to

605
00:24:56,640 --> 00:24:59,679
access which resources on the cloud who

606
00:24:59,679 --> 00:25:00,960
has permission to make

607
00:25:00,960 --> 00:25:04,159
changes and things like that because

608
00:25:04,159 --> 00:25:06,880
the cloud is where usually the heart of

609
00:25:06,880 --> 00:25:08,480
your business is

610
00:25:08,480 --> 00:25:12,000
you don't want someone to mess with that

611
00:25:12,000 --> 00:25:14,000
if they aren't supposed to you don't

612
00:25:14,000 --> 00:25:16,640
want unauthorized access

613
00:25:16,640 --> 00:25:21,279
and that's why we go through all of the

614
00:25:21,279 --> 00:25:23,919
um the complicated setup to get this

615
00:25:23,919 --> 00:25:27,200
authorization in place

616
00:25:27,200 --> 00:25:30,720
and the last thing that a lot of people

617
00:25:30,720 --> 00:25:32,640
actually leave out when they're coming

618
00:25:32,640 --> 00:25:34,880
up with the authorization flow

619
00:25:34,880 --> 00:25:38,000
is try to think about it from a hacker's

620
00:25:38,000 --> 00:25:40,080
point of view

621
00:25:40,080 --> 00:25:44,880
look at it for any weaknesses that maybe

622
00:25:44,880 --> 00:25:46,799
you would try to exploit

623
00:25:46,799 --> 00:25:49,360
or start looking at some of the hacker

624
00:25:49,360 --> 00:25:50,480
blogs to see

625
00:25:50,480 --> 00:25:53,440
what tools they're using there's so many

626
00:25:53,440 --> 00:25:54,159
ways

627
00:25:54,159 --> 00:25:57,200
to attack a user session

628
00:25:57,200 --> 00:26:00,000
that you want to make sure whatever auth

629
00:26:00,000 --> 00:26:01,039
flow you choose

630
00:26:01,039 --> 00:26:04,559
is able to handle it so we know that

631
00:26:04,559 --> 00:26:05,279
pixie

632
00:26:05,279 --> 00:26:09,240
won't let a hacker do authentic

633
00:26:09,240 --> 00:26:12,720
authentication injection like

634
00:26:12,720 --> 00:26:15,520
it won't let them do that attack it

635
00:26:15,520 --> 00:26:16,480
prevents it

636
00:26:16,480 --> 00:26:18,880
just by having that code verifier in

637
00:26:18,880 --> 00:26:20,320
that code challenge

638
00:26:20,320 --> 00:26:22,880
so you might think of other ways to try

639
00:26:22,880 --> 00:26:23,760
to hack it like

640
00:26:23,760 --> 00:26:26,880
trying to take the code verifier and

641
00:26:26,880 --> 00:26:27,360
code

642
00:26:27,360 --> 00:26:31,120
challenge and inject it some other way

643
00:26:31,120 --> 00:26:33,760
or for machine to machine communication

644
00:26:33,760 --> 00:26:35,039
you might try to

645
00:26:35,039 --> 00:26:38,159
spoof a client id and send

646
00:26:38,159 --> 00:26:40,640
a bad command to a different machine or

647
00:26:40,640 --> 00:26:41,360
maybe

648
00:26:41,360 --> 00:26:44,400
you try to hack somebody's house and

649
00:26:44,400 --> 00:26:48,480
turn up their thermostats just by

650
00:26:48,480 --> 00:26:51,600
pre by finding out what

651
00:26:51,600 --> 00:26:54,720
device ids they have authorized

652
00:26:54,720 --> 00:26:57,840
so before you even

653
00:26:57,840 --> 00:27:00,880
start to implement your off flow

654
00:27:00,880 --> 00:27:02,880
make sure you have some kind of threat

655
00:27:02,880 --> 00:27:04,720
model in place as well

656
00:27:04,720 --> 00:27:07,919
because that'll help you figure out how

657
00:27:07,919 --> 00:27:11,200
you're going to approach implementing

658
00:27:11,200 --> 00:27:15,200
that off flow so i really hope that this

659
00:27:15,200 --> 00:27:16,240
talk helped you

660
00:27:16,240 --> 00:27:19,520
figure out how pixi works and

661
00:27:19,520 --> 00:27:22,559
some more about how to include

662
00:27:22,559 --> 00:27:25,039
authorization to protect your cloud

663
00:27:25,039 --> 00:27:26,399
resources

664
00:27:26,399 --> 00:27:29,039
you never want those to get hacked

665
00:27:29,039 --> 00:27:31,840
because that's where all of your data is

666
00:27:31,840 --> 00:27:35,200
so if you want more information you can

667
00:27:35,200 --> 00:27:35,919
follow me

668
00:27:35,919 --> 00:27:38,960
on twitter at flippedcoding and i can

669
00:27:38,960 --> 00:27:39,600
send you

670
00:27:39,600 --> 00:27:43,360
more links to different oauth stuff or

671
00:27:43,360 --> 00:27:45,679
you can ask me questions about how to

672
00:27:45,679 --> 00:27:48,480
set up a custom pixi flow

673
00:27:48,480 --> 00:27:50,880
honestly setting up a custom pixi flow

674
00:27:50,880 --> 00:27:52,960
isn't as bad as you would think

675
00:27:52,960 --> 00:27:55,120
just because everything you do involves

676
00:27:55,120 --> 00:27:56,240
strings

677
00:27:56,240 --> 00:27:58,240
no matter what programming language

678
00:27:58,240 --> 00:27:59,760
you're using

679
00:27:59,760 --> 00:28:03,679
a custom pixi flow is basically just a

680
00:28:03,679 --> 00:28:05,279
string verifier

681
00:28:05,279 --> 00:28:10,000
so if you can implement that in a way

682
00:28:10,000 --> 00:28:14,080
that matches the flow you have in mind

683
00:28:14,080 --> 00:28:14,720
or

684
00:28:14,720 --> 00:28:16,960
you want to add an extra layer to the

685
00:28:16,960 --> 00:28:18,159
pixie flow

686
00:28:18,159 --> 00:28:20,640
definitely making your own custom

687
00:28:20,640 --> 00:28:23,120
authorization flow based on it is a good

688
00:28:23,120 --> 00:28:24,159
way to go

689
00:28:24,159 --> 00:28:27,760
but you definitely need to have the

690
00:28:27,760 --> 00:28:32,559
basic pixie off um

691
00:28:32,559 --> 00:28:35,039
steps in place as long as you have those

692
00:28:35,039 --> 00:28:36,640
you should be fine

693
00:28:36,640 --> 00:28:39,279
so if you have any questions feel free

694
00:28:39,279 --> 00:28:40,480
to ask me

695
00:28:40,480 --> 00:28:43,840
or you can just dm me on twitter

696
00:28:43,840 --> 00:28:45,840
thanks for listening and i really hope

697
00:28:45,840 --> 00:28:50,480
that this was useful for you

