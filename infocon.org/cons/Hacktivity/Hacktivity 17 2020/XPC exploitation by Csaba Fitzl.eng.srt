1
00:00:12,480 --> 00:00:13,920
hello everyone

2
00:00:13,920 --> 00:00:17,039
my name is job officer and welcome to my

3
00:00:17,039 --> 00:00:18,160
talk about

4
00:00:18,160 --> 00:00:22,320
xpc exploitation on mac os

5
00:00:22,320 --> 00:00:25,599
a few words about myself i'm working

6
00:00:25,599 --> 00:00:27,680
right now as a content developer at

7
00:00:27,680 --> 00:00:30,640
offensive security that's the company

8
00:00:30,640 --> 00:00:31,519
behind

9
00:00:31,519 --> 00:00:35,360
kal linux and the oscp or osce

10
00:00:35,360 --> 00:00:38,559
certifications i used to be a red

11
00:00:38,559 --> 00:00:42,000
and blue teamer before that for about

12
00:00:42,000 --> 00:00:42,960
eight years

13
00:00:42,960 --> 00:00:45,280
and recently in the past two years i

14
00:00:45,280 --> 00:00:46,239
started to

15
00:00:46,239 --> 00:00:50,879
macos vulnerability research

16
00:00:50,879 --> 00:00:54,000
i have a wife two kids i love to do

17
00:00:54,000 --> 00:00:55,600
hiking

18
00:00:55,600 --> 00:00:59,840
and also doing yoga

19
00:01:00,399 --> 00:01:03,120
so what i will talk about today is again

20
00:01:03,120 --> 00:01:05,680
xpc exploitation on mac os

21
00:01:05,680 --> 00:01:09,200
first i will introduce

22
00:01:09,200 --> 00:01:13,520
it then talk about uh what is xpc

23
00:01:13,520 --> 00:01:17,680
uh then talk about the xpc ap apis

24
00:01:17,680 --> 00:01:20,799
mac os is offering and then talk about

25
00:01:20,799 --> 00:01:22,720
all the exploit scenarios

26
00:01:22,720 --> 00:01:26,400
we can face uh and

27
00:01:26,400 --> 00:01:29,680
trying to exploit xbc services

28
00:01:29,680 --> 00:01:31,840
uh one of them is the apple assemble

29
00:01:31,840 --> 00:01:33,200
code

30
00:01:33,200 --> 00:01:34,560
and then we will look through the

31
00:01:34,560 --> 00:01:36,560
vulnerable clients

32
00:01:36,560 --> 00:01:40,479
uh incorrect client verification

33
00:01:40,479 --> 00:01:43,759
bid process id reuse attacks and

34
00:01:43,759 --> 00:01:46,479
at the very end i will also talk about

35
00:01:46,479 --> 00:01:47,759
how we can prevent

36
00:01:47,759 --> 00:01:50,640
these attacks and how we can actually

37
00:01:50,640 --> 00:01:51,360
make a

38
00:01:51,360 --> 00:01:55,840
secure xbc service

39
00:01:56,079 --> 00:01:59,360
so just a few words about how this

40
00:01:59,360 --> 00:02:03,200
entire research or topic started

41
00:02:03,200 --> 00:02:07,600
with me at least so last year i read

42
00:02:07,600 --> 00:02:09,919
an excellent article from phil stokes

43
00:02:09,919 --> 00:02:11,280
who is a

44
00:02:11,280 --> 00:02:15,040
marvel researcher at centennial

45
00:02:15,040 --> 00:02:17,440
his article was about spoofing privilege

46
00:02:17,440 --> 00:02:18,879
helpers to gain

47
00:02:18,879 --> 00:02:22,160
root and

48
00:02:22,160 --> 00:02:23,680
in the middle of the article he had a

49
00:02:23,680 --> 00:02:25,280
sentence that

50
00:02:25,280 --> 00:02:28,000
abuses of this trust mechanism between

51
00:02:28,000 --> 00:02:28,879
parent process

52
00:02:28,879 --> 00:02:31,599
and privilege helper tool are possible

53
00:02:31,599 --> 00:02:33,200
and

54
00:02:33,200 --> 00:02:36,239
for some reason this both my attention

55
00:02:36,239 --> 00:02:40,400
and i got really interested in

56
00:02:40,400 --> 00:02:43,440
these privileged hairpers what are these

57
00:02:43,440 --> 00:02:46,879
and i was like yeah please time more

58
00:02:46,879 --> 00:02:49,360
well unfortunately fears article was

59
00:02:49,360 --> 00:02:50,800
about something else but

60
00:02:50,800 --> 00:02:54,000
i started to dig up uh

61
00:02:54,000 --> 00:02:57,440
lots of stuff about xpc and actually

62
00:02:57,440 --> 00:03:01,280
xpc exploitation so that time

63
00:03:01,280 --> 00:03:06,640
last year this was about a year ago

64
00:03:08,560 --> 00:03:10,720
this is what really falls out on the

65
00:03:10,720 --> 00:03:12,239
internet so

66
00:03:12,239 --> 00:03:14,400
there was this article the story behind

67
00:03:14,400 --> 00:03:15,280
cv

68
00:03:15,280 --> 00:03:19,280
2019 13013 which was an excellent

69
00:03:19,280 --> 00:03:22,400
little snitch then was

70
00:03:22,400 --> 00:03:25,920
an excellent presentation from tyler

71
00:03:25,920 --> 00:03:28,799
pohan at offensive corn last year

72
00:03:28,799 --> 00:03:32,480
in february about accelerating xpc

73
00:03:32,480 --> 00:03:33,840
services

74
00:03:33,840 --> 00:03:36,799
uh then of course we had apples even

75
00:03:36,799 --> 00:03:38,080
better authorization

76
00:03:38,080 --> 00:03:41,519
sample code for how to make how to code

77
00:03:41,519 --> 00:03:43,599
privilege hyper tools

78
00:03:43,599 --> 00:03:46,879
um then a few talks

79
00:03:46,879 --> 00:03:49,040
at the upper developer conference about

80
00:03:49,040 --> 00:03:50,000
xbc

81
00:03:50,000 --> 00:03:53,360
but that's mostly about how to develop

82
00:03:53,360 --> 00:03:57,280
these services um

83
00:03:57,280 --> 00:03:59,680
and then and actually there are more

84
00:03:59,680 --> 00:04:00,720
resources but

85
00:04:00,720 --> 00:04:03,760
these were the ones i found that time

86
00:04:03,760 --> 00:04:06,560
and started my journey on exploitation

87
00:04:06,560 --> 00:04:07,760
and then

88
00:04:07,760 --> 00:04:13,200
uh profit like honestly these bugs

89
00:04:13,200 --> 00:04:16,880
are little everywhere like

90
00:04:16,880 --> 00:04:21,600
it's it's all around and

91
00:04:22,960 --> 00:04:26,080
you will find these xpc box on

92
00:04:26,080 --> 00:04:28,880
almost everywhere really like i think

93
00:04:28,880 --> 00:04:29,199
like

94
00:04:29,199 --> 00:04:31,199
80 90 percent of all the third party

95
00:04:31,199 --> 00:04:32,720
tools i audited

96
00:04:32,720 --> 00:04:36,000
were vulnerable uh including like

97
00:04:36,000 --> 00:04:40,240
vmware microsoft uh adobe proxy man

98
00:04:40,240 --> 00:04:44,400
f-secure and just many many more

99
00:04:45,520 --> 00:04:49,280
retailers really box everywhere

100
00:04:49,280 --> 00:04:53,360
and really this is why i wanted to

101
00:04:53,360 --> 00:04:58,720
do this talk these bugs are all over

102
00:04:58,720 --> 00:05:01,759
very few people actually exploit them

103
00:05:01,759 --> 00:05:04,960
and actually even macos research is not

104
00:05:04,960 --> 00:05:07,919
that widespread

105
00:05:08,960 --> 00:05:11,199
there is no clear guidance from apple

106
00:05:11,199 --> 00:05:14,400
how to make a secure xbc service

107
00:05:14,400 --> 00:05:18,080
and even if the fos uh

108
00:05:18,080 --> 00:05:20,080
unfortunately there is no secure public

109
00:05:20,080 --> 00:05:22,080
api from ever

110
00:05:22,080 --> 00:05:25,600
for really making a secure xbc service

111
00:05:25,600 --> 00:05:28,560
uh we see that unfortunately to use to

112
00:05:28,560 --> 00:05:30,400
make it really secure we have to use

113
00:05:30,400 --> 00:05:34,000
private apis but if we use private apis

114
00:05:34,000 --> 00:05:37,840
for example you cannot load any

115
00:05:37,840 --> 00:05:41,280
to the mac app store um

116
00:05:41,280 --> 00:05:45,520
so if that api is changes in the future

117
00:05:45,520 --> 00:05:47,280
you need to support and maintain your

118
00:05:47,280 --> 00:05:49,759
application so that's a problem

119
00:05:49,759 --> 00:05:52,000
uh it's very easy to make an error

120
00:05:52,000 --> 00:05:52,880
during

121
00:05:52,880 --> 00:05:56,160
making uh of the service and

122
00:05:56,160 --> 00:05:59,680
it's also very easy to exploit

123
00:05:59,680 --> 00:06:03,120
so and i think

124
00:06:03,120 --> 00:06:05,360
we are in the golden ages of surfboard x

125
00:06:05,360 --> 00:06:09,120
please xpc exploits i think

126
00:06:09,199 --> 00:06:11,440
it will take a while by this message

127
00:06:11,440 --> 00:06:12,240
gets to

128
00:06:12,240 --> 00:06:16,000
developers since last year there were a

129
00:06:16,000 --> 00:06:17,440
couple of other talks about

130
00:06:17,440 --> 00:06:21,039
exploiting xpc and more and more people

131
00:06:21,039 --> 00:06:24,560
try to spread the word how to make a

132
00:06:24,560 --> 00:06:27,199
secure xpc service

133
00:06:27,199 --> 00:06:30,560
but it will take time so if you want to

134
00:06:30,560 --> 00:06:31,280
do this

135
00:06:31,280 --> 00:06:33,039
go out and you will find plenty of

136
00:06:33,039 --> 00:06:35,759
vulnerable applications

137
00:06:35,759 --> 00:06:38,240
so but what is xpc i keep talking about

138
00:06:38,240 --> 00:06:39,600
xpc

139
00:06:39,600 --> 00:06:42,319
here um it's an inter process

140
00:06:42,319 --> 00:06:43,440
communication

141
00:06:43,440 --> 00:06:46,400
so mac os based ipc is based on mac

142
00:06:46,400 --> 00:06:47,759
messages

143
00:06:47,759 --> 00:06:51,039
at the core layer everything is going

144
00:06:51,039 --> 00:06:53,440
through mac messages

145
00:06:53,440 --> 00:06:56,800
including the kernel itself now xpc is

146
00:06:56,800 --> 00:07:00,240
ipc built on top of mac messages

147
00:07:00,240 --> 00:07:03,120
to make it much more simpler and it was

148
00:07:03,120 --> 00:07:05,280
introduced in 2011

149
00:07:05,280 --> 00:07:07,840
and it has a really simple easy to use

150
00:07:07,840 --> 00:07:09,680
api

151
00:07:09,680 --> 00:07:13,120
um compared to mac if you ever had to

152
00:07:13,120 --> 00:07:14,000
deal with mac

153
00:07:14,000 --> 00:07:17,120
or rivers and germac api it's

154
00:07:17,120 --> 00:07:20,160
really clean and nice and uh and easy

155
00:07:20,160 --> 00:07:22,720
and now what is xpc what it stands for

156
00:07:22,720 --> 00:07:24,319
really no one really knows

157
00:07:24,319 --> 00:07:27,120
uh the best of my knowledge ever never

158
00:07:27,120 --> 00:07:28,319
really

159
00:07:28,319 --> 00:07:30,560
uh to audit so it could be like a

160
00:07:30,560 --> 00:07:32,479
xenomorph pet symmetry or

161
00:07:32,479 --> 00:07:35,440
extended process communication probably

162
00:07:35,440 --> 00:07:37,520
the second is more likely or it could be

163
00:07:37,520 --> 00:07:40,560
cross process communication or yeah

164
00:07:40,560 --> 00:07:41,360
anything you can

165
00:07:41,360 --> 00:07:44,800
come up with

166
00:07:44,800 --> 00:07:48,560
so the core idea behind uh xpc

167
00:07:48,560 --> 00:07:52,080
uh why ever made it uh the the main idea

168
00:07:52,080 --> 00:07:53,680
was to

169
00:07:53,680 --> 00:07:56,639
have an application and divide it into

170
00:07:56,639 --> 00:07:58,560
separate components

171
00:07:58,560 --> 00:08:00,800
and each of these co components are

172
00:08:00,800 --> 00:08:01,599
running as

173
00:08:01,599 --> 00:08:05,599
uh as its own process

174
00:08:05,599 --> 00:08:07,599
which gives you better security and

175
00:08:07,599 --> 00:08:09,599
better reliability

176
00:08:09,599 --> 00:08:11,840
and all the app components talk of or

177
00:08:11,840 --> 00:08:13,919
talk over xbc

178
00:08:13,919 --> 00:08:17,199
in between them so and each of the

179
00:08:17,199 --> 00:08:19,199
components we have the least privileged

180
00:08:19,199 --> 00:08:22,560
it requires so for example safari the

181
00:08:22,560 --> 00:08:24,879
web browser

182
00:08:24,879 --> 00:08:26,960
we have a component which is the

183
00:08:26,960 --> 00:08:28,800
rendering service

184
00:08:28,800 --> 00:08:31,199
and it will not have any network access

185
00:08:31,199 --> 00:08:32,958
because it doesn't need it just need to

186
00:08:32,958 --> 00:08:36,479
transform the html page

187
00:08:36,479 --> 00:08:39,599
into a visible website

188
00:08:39,599 --> 00:08:41,519
and basically what software you can do

189
00:08:41,519 --> 00:08:44,080
the main application can

190
00:08:44,080 --> 00:08:47,920
send over all of the the website content

191
00:08:47,920 --> 00:08:50,880
the renderer will process it and send

192
00:08:50,880 --> 00:08:52,800
and display it

193
00:08:52,800 --> 00:08:54,720
it doesn't need to have network access

194
00:08:54,720 --> 00:08:56,959
uh network access so if you for example

195
00:08:56,959 --> 00:08:58,720
find an exploit in

196
00:08:58,720 --> 00:09:03,440
uh in that service uh

197
00:09:03,600 --> 00:09:06,080
the only you you are contained in inside

198
00:09:06,080 --> 00:09:06,880
the renderer

199
00:09:06,880 --> 00:09:10,800
process space which is really restricted

200
00:09:10,800 --> 00:09:13,120
and if you want to go further you need

201
00:09:13,120 --> 00:09:15,920
to break out of the sandbox

202
00:09:15,920 --> 00:09:18,560
so it's another step or if it's crashing

203
00:09:18,560 --> 00:09:20,080
for any reason

204
00:09:20,080 --> 00:09:23,200
then the application can still run it's

205
00:09:23,200 --> 00:09:26,880
enough to restart the the actual xpc

206
00:09:26,880 --> 00:09:29,040
component

207
00:09:29,040 --> 00:09:31,200
uh so crashing in one of those doesn't

208
00:09:31,200 --> 00:09:33,519
affect the the whole application

209
00:09:33,519 --> 00:09:37,200
and the same for any vulnerability

210
00:09:37,200 --> 00:09:40,320
and the components

211
00:09:40,320 --> 00:09:42,640
itself they don't have to be on

212
00:09:42,640 --> 00:09:44,080
different privilege level

213
00:09:44,080 --> 00:09:49,120
so the original idea was that

214
00:09:49,120 --> 00:09:52,160
same application uh same

215
00:09:52,160 --> 00:09:55,519
user level same privileges

216
00:09:55,519 --> 00:09:58,800
run at the same level but then we have

217
00:09:58,800 --> 00:09:59,839
this concept of

218
00:09:59,839 --> 00:10:02,079
privileged helper tools which was before

219
00:10:02,079 --> 00:10:04,399
xbc was introduced so

220
00:10:04,399 --> 00:10:07,519
let's say you have an application that

221
00:10:07,519 --> 00:10:10,880
some of its component requires root

222
00:10:10,880 --> 00:10:13,760
access to the device like installation

223
00:10:13,760 --> 00:10:16,399
updates

224
00:10:16,839 --> 00:10:19,920
accessing a location where

225
00:10:19,920 --> 00:10:22,720
only root has access or whatever really

226
00:10:22,720 --> 00:10:23,440
or changing

227
00:10:23,440 --> 00:10:25,839
system settings that only root is

228
00:10:25,839 --> 00:10:28,240
allowed to do

229
00:10:28,240 --> 00:10:32,240
you need the the idea is to have a

230
00:10:32,240 --> 00:10:35,440
privilege helper tool that's the name uh

231
00:10:35,440 --> 00:10:38,240
of these that we run as root and your

232
00:10:38,240 --> 00:10:40,160
main application can talk to this

233
00:10:40,160 --> 00:10:41,760
privilege helper tool

234
00:10:41,760 --> 00:10:44,399
now it can happen over x pc or over

235
00:10:44,399 --> 00:10:45,600
anything else like

236
00:10:45,600 --> 00:10:47,600
it can happen over mac messages or

237
00:10:47,600 --> 00:10:49,279
distributed objects or

238
00:10:49,279 --> 00:10:52,720
whatever really you want uh

239
00:10:52,720 --> 00:10:56,640
these days xpc xpc is the most common

240
00:10:56,640 --> 00:11:00,079
uh ipc for everything

241
00:11:00,079 --> 00:11:03,680
really at the top so i think

242
00:11:03,680 --> 00:11:05,600
like ninety percent of the cases if you

243
00:11:05,600 --> 00:11:07,519
have a privilege have a tool

244
00:11:07,519 --> 00:11:10,720
that we use xpc and these tools

245
00:11:10,720 --> 00:11:14,720
by design run as root

246
00:11:14,720 --> 00:11:18,320
and they advertise the actual service

247
00:11:18,320 --> 00:11:21,680
to max service names now

248
00:11:21,680 --> 00:11:25,120
the problem is that by default any known

249
00:11:25,120 --> 00:11:28,160
sandbox application can talk to these

250
00:11:28,160 --> 00:11:30,800
privilege helpers so mac os doesn't

251
00:11:30,800 --> 00:11:34,000
restrict the client

252
00:11:35,360 --> 00:11:38,399
to the same developer id

253
00:11:38,399 --> 00:11:42,160
or the same code signature by default so

254
00:11:42,160 --> 00:11:44,560
anyone can talk to them

255
00:11:44,560 --> 00:11:47,200
now actually apple or mac os does

256
00:11:47,200 --> 00:11:48,240
restrict

257
00:11:48,240 --> 00:11:51,519
if you so if if

258
00:11:51,519 --> 00:11:55,440
you are using uh application components

259
00:11:55,440 --> 00:11:57,600
which is inside the application bundle

260
00:11:57,600 --> 00:11:58,959
but those are not

261
00:11:58,959 --> 00:12:02,079
mac services uh advertised globally on

262
00:12:02,079 --> 00:12:04,240
the system

263
00:12:04,240 --> 00:12:06,959
so by default we can talk to this helper

264
00:12:06,959 --> 00:12:07,760
tools

265
00:12:07,760 --> 00:12:10,160
so and if we can talk to them we can run

266
00:12:10,160 --> 00:12:12,880
privileged actions

267
00:12:12,880 --> 00:12:15,040
and a full privilege escalation is

268
00:12:15,040 --> 00:12:16,160
really depending

269
00:12:16,160 --> 00:12:19,279
on the function offered by the privilege

270
00:12:19,279 --> 00:12:20,480
helper tool

271
00:12:20,480 --> 00:12:22,399
so because everyone can talk to these

272
00:12:22,399 --> 00:12:24,639
tools it's up to the helper to

273
00:12:24,639 --> 00:12:27,040
to actually verify who is connecting to

274
00:12:27,040 --> 00:12:27,920
it

275
00:12:27,920 --> 00:12:31,360
and who is performing the action and

276
00:12:31,360 --> 00:12:34,399
this is where all the box

277
00:12:34,399 --> 00:12:37,600
are so

278
00:12:37,600 --> 00:12:41,200
let's cover quickly the xpc apis

279
00:12:41,200 --> 00:12:45,279
that are out there and the first one

280
00:12:45,279 --> 00:12:49,200
when xpc was introduced was the c api

281
00:12:49,200 --> 00:12:52,079
this is a very short sample code on the

282
00:12:52,079 --> 00:12:54,160
screen

283
00:12:54,160 --> 00:12:57,040
from a client

284
00:12:57,839 --> 00:13:01,279
so initially we create a connection

285
00:13:01,279 --> 00:13:04,720
an xbc connection t

286
00:13:04,720 --> 00:13:08,000
variable then an xpc object d

287
00:13:08,000 --> 00:13:12,320
type variable msg which will be the

288
00:13:12,320 --> 00:13:13,760
message

289
00:13:13,760 --> 00:13:16,720
now the message in xbc is a dictionary

290
00:13:16,720 --> 00:13:19,360
it's always a dictionary

291
00:13:19,360 --> 00:13:23,040
and actually it's an ns dictionary

292
00:13:23,040 --> 00:13:26,560
so we create an empty uh dictionary

293
00:13:26,560 --> 00:13:29,760
and then we add keys and values uh

294
00:13:29,760 --> 00:13:32,800
to it in this case we add strings

295
00:13:32,800 --> 00:13:35,839
like where you and where you do but we

296
00:13:35,839 --> 00:13:38,560
can add other

297
00:13:39,519 --> 00:13:43,120
ones as well like arrays

298
00:13:43,120 --> 00:13:46,079
or integers

299
00:13:47,680 --> 00:13:51,279
strings dictionaries

300
00:13:51,279 --> 00:13:55,680
it's very uh restrictive what we can add

301
00:13:55,680 --> 00:13:57,760
and we cannot just do every type there

302
00:13:57,760 --> 00:14:00,230
are about 10 types of different

303
00:14:00,230 --> 00:14:01,680
[Music]

304
00:14:01,680 --> 00:14:06,560
objects that we can pass

305
00:14:06,880 --> 00:14:09,120
the next one is to look up the service

306
00:14:09,120 --> 00:14:11,760
with xpc connection create mac service

307
00:14:11,760 --> 00:14:14,800
uh we give it the com some helper that's

308
00:14:14,800 --> 00:14:18,160
the name of the mac service

309
00:14:18,160 --> 00:14:19,920
we are looking for and we are trying to

310
00:14:19,920 --> 00:14:21,600
connect to it

311
00:14:21,600 --> 00:14:22,959
this is where the connection is

312
00:14:22,959 --> 00:14:25,440
established so if

313
00:14:25,440 --> 00:14:28,480
the xbc service will not accept

314
00:14:28,480 --> 00:14:32,880
us as a client we will fail here

315
00:14:32,880 --> 00:14:36,399
if this goes through then everything is

316
00:14:36,399 --> 00:14:37,199
good at least

317
00:14:37,199 --> 00:14:40,800
on on the first step then we set a

318
00:14:40,800 --> 00:14:43,199
connection event handler that is

319
00:14:43,199 --> 00:14:45,519
required as per effort and then we

320
00:14:45,519 --> 00:14:48,240
resume the connection

321
00:14:48,240 --> 00:14:50,880
and basically the last step remaining is

322
00:14:50,880 --> 00:14:53,040
sending a message

323
00:14:53,040 --> 00:14:56,079
over xbc so it's really clean

324
00:14:56,079 --> 00:14:59,760
and simple and and

325
00:14:59,760 --> 00:15:03,040
the api is very very similar on the

326
00:15:03,040 --> 00:15:05,199
service side so there is like xpc

327
00:15:05,199 --> 00:15:07,440
dictionary guest string

328
00:15:07,440 --> 00:15:11,199
and uh and so on so it's really easy to

329
00:15:11,199 --> 00:15:14,480
reverse and and see the code

330
00:15:14,480 --> 00:15:18,079
now there is the nsx pc api which is

331
00:15:18,079 --> 00:15:22,800
part of the coco framework

332
00:15:22,800 --> 00:15:26,000
and it

333
00:15:26,000 --> 00:15:29,519
does it we use dc api underneath

334
00:15:29,519 --> 00:15:32,880
uh but it allows more another

335
00:15:32,880 --> 00:15:36,720
layer of abstraction so we can define

336
00:15:36,720 --> 00:15:40,160
a protocol which is an objective c

337
00:15:40,160 --> 00:15:43,199
concept basically it's uh

338
00:15:43,199 --> 00:15:45,040
it's not a class but it's a group of

339
00:15:45,040 --> 00:15:47,600
function that the class will

340
00:15:47,600 --> 00:15:51,120
can implement and the function

341
00:15:51,120 --> 00:15:54,160
uh this will have a definition

342
00:15:54,160 --> 00:15:56,480
what's the return value and what

343
00:15:56,480 --> 00:15:57,759
argument

344
00:15:57,759 --> 00:16:00,800
it expects uh in case of xbc

345
00:16:00,800 --> 00:16:04,480
the methods cannot return anything

346
00:16:04,480 --> 00:16:07,440
but they can return a reply but they

347
00:16:07,440 --> 00:16:08,959
don't have a classic

348
00:16:08,959 --> 00:16:11,758
return value

349
00:16:12,160 --> 00:16:13,920
so we define a protocol on both sides

350
00:16:13,920 --> 00:16:15,600
both the client and the

351
00:16:15,600 --> 00:16:17,680
service side the service will have a

352
00:16:17,680 --> 00:16:20,639
class which will implement the protocol

353
00:16:20,639 --> 00:16:24,160
and that class we serve the xbc

354
00:16:24,160 --> 00:16:25,360
connection on the clear

355
00:16:25,360 --> 00:16:28,320
client side we just define the protocol

356
00:16:28,320 --> 00:16:30,079
then again

357
00:16:30,079 --> 00:16:33,199
we define the service name

358
00:16:33,199 --> 00:16:36,320
then we do an nsx pc connection init

359
00:16:36,320 --> 00:16:37,680
with mock service name

360
00:16:37,680 --> 00:16:40,480
we connect to the service then we set

361
00:16:40,480 --> 00:16:42,720
the remote object interface

362
00:16:42,720 --> 00:16:47,839
and here we create an nsx pc interface

363
00:16:47,839 --> 00:16:51,839
with the protocol definition we have

364
00:16:52,079 --> 00:16:55,279
in this example it's the helper protocol

365
00:16:55,279 --> 00:16:58,480
and then we resume again

366
00:16:58,480 --> 00:17:01,279
and then we set we create a remote

367
00:17:01,279 --> 00:17:04,640
object proxy and

368
00:17:04,640 --> 00:17:06,559
and basically that's it and then we can

369
00:17:06,559 --> 00:17:07,760
call these

370
00:17:07,760 --> 00:17:11,280
uh functions over xbc so we get back

371
00:17:11,280 --> 00:17:15,039
we got back an object

372
00:17:15,359 --> 00:17:18,720
as a return value and we can basically

373
00:17:18,720 --> 00:17:20,160
simply call

374
00:17:20,160 --> 00:17:23,760
the run app method in this case

375
00:17:23,760 --> 00:17:28,480
on the object passing any arguments

376
00:17:28,720 --> 00:17:31,520
we can see we are still restricted to

377
00:17:31,520 --> 00:17:33,039
the same types

378
00:17:33,039 --> 00:17:36,160
uh what xpc can use

379
00:17:36,160 --> 00:17:39,679
but this allows

380
00:17:39,679 --> 00:17:42,240
another layer of abstraction so we can

381
00:17:42,240 --> 00:17:44,160
basically call functions

382
00:17:44,160 --> 00:17:49,360
and it's more flexible than the c api

383
00:17:49,360 --> 00:17:52,559
and it's also very easy and clean

384
00:17:52,559 --> 00:17:56,320
to reverse now what are the common

385
00:17:56,320 --> 00:17:56,960
issues

386
00:17:56,960 --> 00:18:00,160
uh with xpc again all of the issues

387
00:18:00,160 --> 00:18:03,200
are around who can talk to the actual

388
00:18:03,200 --> 00:18:03,840
service

389
00:18:03,840 --> 00:18:07,200
and who cannot so let's start with the

390
00:18:07,200 --> 00:18:09,679
even better authorization which is

391
00:18:09,679 --> 00:18:10,400
apple's

392
00:18:10,400 --> 00:18:16,240
sample code for privileged hyper tools

393
00:18:16,240 --> 00:18:19,679
it's really odd like really really old

394
00:18:19,679 --> 00:18:21,600
and it's not better it's actually the

395
00:18:21,600 --> 00:18:23,010
worse

396
00:18:23,010 --> 00:18:24,320
[Music]

397
00:18:24,320 --> 00:18:29,200
why the xbc service in this sample code

398
00:18:29,200 --> 00:18:31,039
will accept everyone

399
00:18:31,039 --> 00:18:32,720
so by default you can connect to the

400
00:18:32,720 --> 00:18:34,880
server to the privileged service

401
00:18:34,880 --> 00:18:39,360
now then the service itself try to limit

402
00:18:39,440 --> 00:18:43,840
function based on authorization

403
00:18:44,400 --> 00:18:47,840
now when you do authorization on the xpc

404
00:18:47,840 --> 00:18:48,400
service

405
00:18:48,400 --> 00:18:50,240
you need to pass an authorization

406
00:18:50,240 --> 00:18:52,799
reference from the client

407
00:18:52,799 --> 00:18:55,679
but the client at first hand it will

408
00:18:55,679 --> 00:18:56,000
only

409
00:18:56,000 --> 00:18:58,720
set up an empty authorization which

410
00:18:58,720 --> 00:19:00,799
anyone can do

411
00:19:00,799 --> 00:19:03,440
so you pass that empty authorization and

412
00:19:03,440 --> 00:19:05,679
then the previous helper tools will try

413
00:19:05,679 --> 00:19:07,280
to obtain the rights

414
00:19:07,280 --> 00:19:10,799
for the client now

415
00:19:10,799 --> 00:19:13,440
depending how the authorization right is

416
00:19:13,440 --> 00:19:14,640
set up

417
00:19:14,640 --> 00:19:17,919
uh you might be granted uh

418
00:19:17,919 --> 00:19:21,120
authorization or not there are two main

419
00:19:21,120 --> 00:19:21,679
cases

420
00:19:21,679 --> 00:19:25,280
one is the rule class hello which means

421
00:19:25,280 --> 00:19:28,480
yeah granted so it's

422
00:19:28,480 --> 00:19:30,080
it's like it's not there it will be

423
00:19:30,080 --> 00:19:31,520
granted

424
00:19:31,520 --> 00:19:33,120
and then there is another one

425
00:19:33,120 --> 00:19:35,200
authenticators admin

426
00:19:35,200 --> 00:19:38,320
which what will happen the user will get

427
00:19:38,320 --> 00:19:39,039
a prompt

428
00:19:39,039 --> 00:19:41,840
that the application that is trying to

429
00:19:41,840 --> 00:19:43,919
talk to the xbc service

430
00:19:43,919 --> 00:19:46,240
is trying to do system modification now

431
00:19:46,240 --> 00:19:47,679
if you

432
00:19:47,679 --> 00:19:50,720
make a nice econ icon or

433
00:19:50,720 --> 00:19:53,760
name your application

434
00:19:53,760 --> 00:19:57,120
look like an other one no one can tell

435
00:19:57,120 --> 00:19:58,080
that

436
00:19:58,080 --> 00:20:01,039
who is making this uh request like i

437
00:20:01,039 --> 00:20:01,760
think

438
00:20:01,760 --> 00:20:05,360
mac os users are so used to this prompts

439
00:20:05,360 --> 00:20:06,080
that

440
00:20:06,080 --> 00:20:09,039
they will happily authenticate so in my

441
00:20:09,039 --> 00:20:10,880
point of view

442
00:20:10,880 --> 00:20:13,919
this is not really a restriction like

443
00:20:13,919 --> 00:20:17,440
yes some users will stay alert and they

444
00:20:17,440 --> 00:20:18,720
will not

445
00:20:18,720 --> 00:20:21,360
type their password but i think many

446
00:20:21,360 --> 00:20:22,640
will

447
00:20:22,640 --> 00:20:25,520
so i don't really consider this as a as

448
00:20:25,520 --> 00:20:29,120
a security protection here

449
00:20:29,919 --> 00:20:32,240
and yeah these are the problems that

450
00:20:32,240 --> 00:20:33,520
what we just

451
00:20:33,520 --> 00:20:37,840
discussed now the example

452
00:20:37,840 --> 00:20:41,840
uh for this i have is proxyman

453
00:20:41,840 --> 00:20:44,350
and that's a small application

454
00:20:44,350 --> 00:20:45,600
[Music]

455
00:20:45,600 --> 00:20:49,760
monitoring network traffic

456
00:20:49,760 --> 00:20:52,080
it has a privilege helper tool to change

457
00:20:52,080 --> 00:20:54,080
the proxy settings it cannot do anything

458
00:20:54,080 --> 00:20:55,679
else so it's

459
00:20:55,679 --> 00:20:57,840
it didn't have like a full privilege

460
00:20:57,840 --> 00:21:00,080
escalation vulnerability

461
00:21:00,080 --> 00:21:03,120
it just gave you access uh to some

462
00:21:03,120 --> 00:21:05,440
system configuration and they

463
00:21:05,440 --> 00:21:08,640
the developer used for sample code for

464
00:21:08,640 --> 00:21:09,120
this

465
00:21:09,120 --> 00:21:11,520
and the authorization right was set to

466
00:21:11,520 --> 00:21:12,559
hello

467
00:21:12,559 --> 00:21:14,840
so basically you were just granted

468
00:21:14,840 --> 00:21:16,559
access uh

469
00:21:16,559 --> 00:21:19,039
now really kudos to the dev the the

470
00:21:19,039 --> 00:21:21,280
developer because when i reported it

471
00:21:21,280 --> 00:21:24,880
uh he fixed it in a few days and i think

472
00:21:24,880 --> 00:21:26,159
that was between like

473
00:21:26,159 --> 00:21:28,960
christmas and new year's eve or that

474
00:21:28,960 --> 00:21:30,960
time period so

475
00:21:30,960 --> 00:21:33,520
it was really quick responsive and

476
00:21:33,520 --> 00:21:36,159
really fix it

477
00:21:36,159 --> 00:21:40,720
really quickly so let's see a demo

478
00:21:40,720 --> 00:21:45,840
of this

479
00:21:47,440 --> 00:21:50,000
so here i have the application installed

480
00:21:50,000 --> 00:21:50,480
uh

481
00:21:50,480 --> 00:21:54,000
this is my network connection

482
00:21:54,000 --> 00:21:59,840
and the proxies ah this is set so let's

483
00:22:01,520 --> 00:22:04,799
go back and

484
00:22:08,720 --> 00:22:13,840
remove the proxy configuration

485
00:22:15,440 --> 00:22:18,799
let's flight let's just see that it was

486
00:22:18,799 --> 00:22:22,480
removed yeah it's not set

487
00:22:22,480 --> 00:22:26,080
and let's lock it so if i go back now i

488
00:22:26,080 --> 00:22:26,720
cannot

489
00:22:26,720 --> 00:22:29,679
change the proxy

490
00:22:30,799 --> 00:22:40,960
now i can just run my exploit

491
00:22:40,960 --> 00:22:44,000
and let's see it's not there is some

492
00:22:44,000 --> 00:22:45,200
race condition

493
00:22:45,200 --> 00:22:49,039
in this exploit so let me run it

494
00:22:49,039 --> 00:22:52,480
a few times

495
00:22:53,520 --> 00:22:56,640
but yeah now it's set so we have proxy

496
00:22:56,640 --> 00:22:57,679
enabled

497
00:22:57,679 --> 00:23:01,840
for localhost 333

498
00:23:04,559 --> 00:23:07,520
and again just to show we did run it as

499
00:23:07,520 --> 00:23:09,520
a regular user and not

500
00:23:09,520 --> 00:23:12,320
as root

501
00:23:15,039 --> 00:23:18,000
so this was proximate again using for

502
00:23:18,000 --> 00:23:19,440
sample code and there are many

503
00:23:19,440 --> 00:23:20,320
applications

504
00:23:20,320 --> 00:23:23,440
using apple's simple code and again

505
00:23:23,440 --> 00:23:25,919
i think this is a problem originating

506
00:23:25,919 --> 00:23:27,919
from upper side because they are

507
00:23:27,919 --> 00:23:31,039
clearly providing a really bad example

508
00:23:31,039 --> 00:23:35,120
and if i were a developer i would

509
00:23:35,120 --> 00:23:37,520
go and trust what is provided on apple's

510
00:23:37,520 --> 00:23:38,159
website

511
00:23:38,159 --> 00:23:41,679
which is actually not good

512
00:23:42,480 --> 00:23:45,520
so moving on

513
00:23:45,840 --> 00:23:49,120
vulnerable client so let's say

514
00:23:49,120 --> 00:23:52,320
the xpc service properly validates the

515
00:23:52,320 --> 00:23:53,440
client

516
00:23:53,440 --> 00:23:55,760
uh which is many times not the case as

517
00:23:55,760 --> 00:23:58,480
vbsc but let's say it does it

518
00:23:58,480 --> 00:24:01,600
if our client is vulnerable then it

519
00:24:01,600 --> 00:24:02,240
doesn't

520
00:24:02,240 --> 00:24:05,679
to code injection uh then it's worthless

521
00:24:05,679 --> 00:24:06,880
so basically when

522
00:24:06,880 --> 00:24:09,279
can we do code injection on a on a

523
00:24:09,279 --> 00:24:10,799
client

524
00:24:10,799 --> 00:24:13,600
or on an application so there is no hard

525
00:24:13,600 --> 00:24:14,640
and run time set

526
00:24:14,640 --> 00:24:17,840
there is no library validation set if

527
00:24:17,840 --> 00:24:18,240
these

528
00:24:18,240 --> 00:24:20,880
two are not set you can just inject any

529
00:24:20,880 --> 00:24:22,640
dialep

530
00:24:22,640 --> 00:24:24,640
to the application and drawn inside the

531
00:24:24,640 --> 00:24:26,880
context of the application

532
00:24:26,880 --> 00:24:29,679
and if the xpc service is restricting

533
00:24:29,679 --> 00:24:30,960
access to

534
00:24:30,960 --> 00:24:34,240
its own client as we could inject code

535
00:24:34,240 --> 00:24:36,880
it's not important but if it's time with

536
00:24:36,880 --> 00:24:38,080
hardened runtime

537
00:24:38,080 --> 00:24:40,000
which actually these days is a

538
00:24:40,000 --> 00:24:41,600
requirement because

539
00:24:41,600 --> 00:24:44,159
notarization service requires hardened

540
00:24:44,159 --> 00:24:45,440
runtime

541
00:24:45,440 --> 00:24:47,200
and if you don't authorize an

542
00:24:47,200 --> 00:24:49,120
application these days

543
00:24:49,120 --> 00:24:52,320
then gatekeeper will not like you

544
00:24:52,320 --> 00:24:54,960
but if you have hardened runtime but

545
00:24:54,960 --> 00:24:57,600
have the disabled library validation or

546
00:24:57,600 --> 00:25:01,039
have the get task allowed exception

547
00:25:01,039 --> 00:25:02,559
entitlement

548
00:25:02,559 --> 00:25:06,240
entitlements this means that

549
00:25:06,240 --> 00:25:08,159
these basically lift up some of the

550
00:25:08,159 --> 00:25:10,400
restrictions and you can again inject

551
00:25:10,400 --> 00:25:11,919
code

552
00:25:11,919 --> 00:25:13,760
into the application either through a

553
00:25:13,760 --> 00:25:14,960
die lib or

554
00:25:14,960 --> 00:25:19,279
through task force so

555
00:25:19,279 --> 00:25:22,320
when we set up an xpc service

556
00:25:22,320 --> 00:25:25,440
we need to ensure that our client

557
00:25:25,440 --> 00:25:29,840
who we are expecting to work with

558
00:25:29,840 --> 00:25:34,158
is harder than again code injections

559
00:25:34,480 --> 00:25:36,480
again if it's not done then the client

560
00:25:36,480 --> 00:25:39,039
verification is completely pointless

561
00:25:39,039 --> 00:25:43,279
and again anyone can talk to the service

562
00:25:43,279 --> 00:25:46,320
now probably one of the

563
00:25:46,320 --> 00:25:48,400
other most common issues is the

564
00:25:48,400 --> 00:25:50,640
incorrect client verifications

565
00:25:50,640 --> 00:25:54,000
uh this is that's the step

566
00:25:54,000 --> 00:25:56,000
which even if you try to get it right

567
00:25:56,000 --> 00:25:58,240
it's very easy to miss

568
00:25:58,240 --> 00:26:01,679
some small pieces so

569
00:26:01,679 --> 00:26:03,919
let's say the xbc service properly

570
00:26:03,919 --> 00:26:06,159
verifies the signature of the connecting

571
00:26:06,159 --> 00:26:09,679
client but it doesn't verify if the

572
00:26:09,679 --> 00:26:10,080
client

573
00:26:10,080 --> 00:26:15,760
is secure or hardened against injections

574
00:26:15,760 --> 00:26:19,120
and that's a problem

575
00:26:19,120 --> 00:26:21,360
why

576
00:26:22,240 --> 00:26:25,760
we see why so what should be done to

577
00:26:25,760 --> 00:26:27,440
make it properly so when

578
00:26:27,440 --> 00:26:30,480
client verification happens uh the

579
00:26:30,480 --> 00:26:31,760
service should verify

580
00:26:31,760 --> 00:26:34,720
if uh the client is signed with a valid

581
00:26:34,720 --> 00:26:37,679
code signing set

582
00:26:37,679 --> 00:26:39,360
which in which is an apple sign

583
00:26:39,360 --> 00:26:41,360
developer certification

584
00:26:41,360 --> 00:26:43,679
if it matches the expected team id

585
00:26:43,679 --> 00:26:46,080
because

586
00:26:46,880 --> 00:26:50,400
uh if if the team id is not verified i

587
00:26:50,400 --> 00:26:52,640
can just use any random application to

588
00:26:52,640 --> 00:26:56,240
again talk to the uh to the xbc service

589
00:26:56,240 --> 00:26:59,600
and then either three or four so either

590
00:26:59,600 --> 00:27:00,880
verify

591
00:27:00,880 --> 00:27:02,960
that the client is protected against

592
00:27:02,960 --> 00:27:04,400
injection

593
00:27:04,400 --> 00:27:07,760
by checking the bundle id and

594
00:27:07,760 --> 00:27:11,360
checking the minimum version of the

595
00:27:11,360 --> 00:27:12,080
client

596
00:27:12,080 --> 00:27:15,200
which the developer knows that is not

597
00:27:15,200 --> 00:27:16,159
vulnerable for

598
00:27:16,159 --> 00:27:20,000
injection or just take the entire code

599
00:27:20,000 --> 00:27:23,360
signing blob of the client and check

600
00:27:23,360 --> 00:27:26,720
all the code signing flex and all the

601
00:27:26,720 --> 00:27:30,960
entitlements that it's properly hardened

602
00:27:30,960 --> 00:27:34,720
if we do all of this then it's

603
00:27:34,720 --> 00:27:38,240
almost good but

604
00:27:38,240 --> 00:27:42,159
so why is it a problem if we miss

605
00:27:42,159 --> 00:27:45,360
to verify if the client is hardened

606
00:27:45,360 --> 00:27:47,440
if we know that our client is hardened

607
00:27:47,440 --> 00:27:48,799
because if we

608
00:27:48,799 --> 00:27:52,640
take an order client typically from

609
00:27:52,640 --> 00:27:56,000
the mojave times which wasn't

610
00:27:56,000 --> 00:28:00,960
a long time ago like a year ago

611
00:28:01,440 --> 00:28:04,080
that time hardened run time really

612
00:28:04,080 --> 00:28:05,600
wasn't the thing

613
00:28:05,600 --> 00:28:08,640
uh it falls in to use the mojave so we

614
00:28:08,640 --> 00:28:10,640
can easily find an older version of the

615
00:28:10,640 --> 00:28:11,679
client

616
00:28:11,679 --> 00:28:14,000
uh which is vulnerable for injection so

617
00:28:14,000 --> 00:28:15,760
we can take the old client

618
00:28:15,760 --> 00:28:18,559
inject into the old client which will

619
00:28:18,559 --> 00:28:20,720
satisfy the code signing requirements

620
00:28:20,720 --> 00:28:25,760
and again we can talk to the helper tool

621
00:28:26,640 --> 00:28:29,840
so an example for this is microsoft auto

622
00:28:29,840 --> 00:28:31,200
update

623
00:28:31,200 --> 00:28:34,720
uh they had a helper tool to perform

624
00:28:34,720 --> 00:28:37,039
some of the update activities

625
00:28:37,039 --> 00:28:38,960
and they really verified everything

626
00:28:38,960 --> 00:28:40,080
properly they

627
00:28:40,080 --> 00:28:43,760
checked if it's an apple signed

628
00:28:43,760 --> 00:28:46,080
certificate they verify the team id the

629
00:28:46,080 --> 00:28:48,399
bundle id

630
00:28:48,399 --> 00:28:50,640
except they didn't verify the client

631
00:28:50,640 --> 00:28:52,399
version

632
00:28:52,399 --> 00:28:55,600
which basically meant that i could find

633
00:28:55,600 --> 00:28:57,039
an earlier version

634
00:28:57,039 --> 00:29:00,159
of microsoft auto update

635
00:29:00,159 --> 00:29:04,880
inject my code into that and

636
00:29:04,880 --> 00:29:07,919
make a copy with the application so

637
00:29:07,919 --> 00:29:12,080
this service the xpc service offered

638
00:29:12,080 --> 00:29:15,279
a function called create clone from app

639
00:29:15,279 --> 00:29:18,159
which basically allowed me to copy a

640
00:29:18,159 --> 00:29:19,520
file from one place

641
00:29:19,520 --> 00:29:22,399
to another with root privileges so what

642
00:29:22,399 --> 00:29:23,279
i did

643
00:29:23,279 --> 00:29:26,559
i basically took a plist file

644
00:29:26,559 --> 00:29:29,679
and moved it moved it to the launch

645
00:29:29,679 --> 00:29:31,120
demons

646
00:29:31,120 --> 00:29:36,080
directory where if i reboot

647
00:29:36,080 --> 00:29:40,159
the mac that plist or the code

648
00:29:40,159 --> 00:29:42,240
inside the p list will be executed as

649
00:29:42,240 --> 00:29:43,520
root so

650
00:29:43,520 --> 00:29:47,679
this is like a full privilege escalation

651
00:29:47,679 --> 00:29:50,799
again how it looks

652
00:29:52,080 --> 00:29:54,320
so again we have microsoft auto update

653
00:29:54,320 --> 00:29:56,080
installed and i have

654
00:29:56,080 --> 00:30:00,799
here an old version of the client

655
00:30:00,960 --> 00:30:04,080
application as well downloaded so if i

656
00:30:04,080 --> 00:30:05,200
check the

657
00:30:05,200 --> 00:30:08,720
code signing

658
00:30:08,720 --> 00:30:11,840
properties of this app we can see that

659
00:30:11,840 --> 00:30:12,480
it's not

660
00:30:12,480 --> 00:30:15,520
hardened so i can just

661
00:30:15,520 --> 00:30:19,200
freely inject to this application

662
00:30:19,840 --> 00:30:23,840
so i will inject a

663
00:30:23,840 --> 00:30:26,000
dye lip through the the viadi insert

664
00:30:26,000 --> 00:30:26,880
libraries

665
00:30:26,880 --> 00:30:30,000
environment variables and this daily is

666
00:30:30,000 --> 00:30:31,200
basically

667
00:30:31,200 --> 00:30:35,279
we do what i said before if we copy

668
00:30:35,279 --> 00:30:38,480
a p list into the language demons

669
00:30:38,480 --> 00:30:40,640
directory but let me show you what's in

670
00:30:40,640 --> 00:30:42,960
there right now so we can see that

671
00:30:42,960 --> 00:30:45,760
uh we have the proxima vmware and

672
00:30:45,760 --> 00:30:46,880
microsoft

673
00:30:46,880 --> 00:30:50,000
helpers in launch demons and if

674
00:30:50,000 --> 00:30:53,120
i execute the

675
00:30:54,799 --> 00:30:58,640
the app the injected code

676
00:30:58,640 --> 00:31:01,679
auto update pops up yeah i don't want

677
00:31:01,679 --> 00:31:03,519
auto update

678
00:31:03,519 --> 00:31:08,240
and if i check now what's in there

679
00:31:08,240 --> 00:31:12,240
we can see that i moved a p list right

680
00:31:12,240 --> 00:31:12,640
there

681
00:31:12,640 --> 00:31:19,840
and if i print this out

682
00:31:21,519 --> 00:31:26,000
so basically it will execute this

683
00:31:26,000 --> 00:31:33,840
command upon reboot

684
00:31:34,960 --> 00:31:38,559
let's move on and

685
00:31:38,559 --> 00:31:41,919
the last typical issue

686
00:31:41,919 --> 00:31:45,519
with client verification is the use of

687
00:31:45,519 --> 00:31:49,120
process id for verifying the client

688
00:31:49,120 --> 00:31:52,320
so if we use process id that's bad

689
00:31:52,320 --> 00:31:55,440
uh why there are two problems

690
00:31:55,440 --> 00:31:58,799
the the range is really small for

691
00:31:58,799 --> 00:32:02,640
process ids so it can be easily reused

692
00:32:02,640 --> 00:32:06,159
and the other one is that

693
00:32:06,159 --> 00:32:09,840
you can spawn a new process inheriting

694
00:32:09,840 --> 00:32:14,960
and the process id of the parent

695
00:32:14,960 --> 00:32:17,840
the solution is is to use audi tokens

696
00:32:17,840 --> 00:32:19,919
for verifying the client

697
00:32:19,919 --> 00:32:24,080
but unfortunately that's private api so

698
00:32:24,080 --> 00:32:27,039
you either do

699
00:32:27,279 --> 00:32:30,399
uh an application with public apis

700
00:32:30,399 --> 00:32:33,679
or potentially running to

701
00:32:33,679 --> 00:32:36,799
box or issues

702
00:32:36,799 --> 00:32:39,840
with a later mac os updates where

703
00:32:39,840 --> 00:32:42,559
april decided decides to change the

704
00:32:42,559 --> 00:32:44,159
private apis for

705
00:32:44,159 --> 00:32:46,880
audit token

706
00:32:48,720 --> 00:32:50,960
audit token is secure to identify the

707
00:32:50,960 --> 00:32:51,760
client

708
00:32:51,760 --> 00:32:54,559
and it's not vulnerable to reuse attacks

709
00:32:54,559 --> 00:32:55,760
well since

710
00:32:55,760 --> 00:32:58,960
2017 when young beer found out that it's

711
00:32:58,960 --> 00:33:00,640
not better than

712
00:33:00,640 --> 00:33:04,640
a process id you can read up the

713
00:33:04,640 --> 00:33:07,679
the details on google's websites it's

714
00:33:07,679 --> 00:33:11,120
really nice

715
00:33:11,120 --> 00:33:14,720
again private api it's a problem

716
00:33:14,720 --> 00:33:18,320
now how the generic exploitation looks

717
00:33:18,320 --> 00:33:18,720
like

718
00:33:18,720 --> 00:33:22,080
uh in this case we send so

719
00:33:22,080 --> 00:33:26,000
v2 make a client any client

720
00:33:26,000 --> 00:33:27,919
and we start with sending a message to

721
00:33:27,919 --> 00:33:29,519
the xbc service

722
00:33:29,519 --> 00:33:32,960
then we spawn a new process

723
00:33:32,960 --> 00:33:36,159
with these flags

724
00:33:36,240 --> 00:33:40,159
and we start the real client

725
00:33:40,159 --> 00:33:42,480
with the spawning which we get the

726
00:33:42,480 --> 00:33:44,720
process id of the parent

727
00:33:44,720 --> 00:33:48,240
so uh when the xbc service gets the

728
00:33:48,240 --> 00:33:49,519
message

729
00:33:49,519 --> 00:33:52,080
and check the signature of the spawn

730
00:33:52,080 --> 00:33:53,200
process

731
00:33:53,200 --> 00:33:57,840
that time the real client will run

732
00:33:57,840 --> 00:34:02,720
and the signature will be just fine

733
00:34:02,720 --> 00:34:06,240
based on the process id and

734
00:34:06,240 --> 00:34:08,719
although it's a race condition because

735
00:34:08,719 --> 00:34:10,239
you need to spawn a new

736
00:34:10,239 --> 00:34:13,679
process faster than the xpc service to

737
00:34:13,679 --> 00:34:14,239
process

738
00:34:14,239 --> 00:34:17,359
the xpc message

739
00:34:17,359 --> 00:34:20,639
but it can be easily been

740
00:34:20,639 --> 00:34:25,199
mostly because the xbc services are

741
00:34:25,199 --> 00:34:27,760
not running by default so when you send

742
00:34:27,760 --> 00:34:29,760
a message

743
00:34:29,760 --> 00:34:33,440
mac os will start it up and then keep it

744
00:34:33,440 --> 00:34:34,320
live for a

745
00:34:34,320 --> 00:34:37,520
time period but when we first talk to it

746
00:34:37,520 --> 00:34:41,280
it needs to set it up and

747
00:34:41,280 --> 00:34:43,760
that takes slightly longer time than

748
00:34:43,760 --> 00:34:46,079
spawning a new process so again

749
00:34:46,079 --> 00:34:48,639
it's a it's an easy to win uh race

750
00:34:48,639 --> 00:34:51,119
condition

751
00:34:51,199 --> 00:34:55,520
an example for this uh vmware fusion

752
00:34:55,520 --> 00:35:00,400
had a p3 with vulnerability so you can't

753
00:35:00,400 --> 00:35:03,440
go to helper tool

754
00:35:03,440 --> 00:35:06,160
tools because all of them were affected

755
00:35:06,160 --> 00:35:06,800
uh

756
00:35:06,800 --> 00:35:10,240
with this kind of attack and you could

757
00:35:10,240 --> 00:35:14,240
do privilege extra execution

758
00:35:14,240 --> 00:35:16,960
or someone actually found the full blown

759
00:35:16,960 --> 00:35:18,480
privilege escalation

760
00:35:18,480 --> 00:35:22,160
uh using this vulnerability

761
00:35:22,320 --> 00:35:25,050
but how to do it securely

762
00:35:25,050 --> 00:35:26,320
[Music]

763
00:35:26,320 --> 00:35:29,119
hopefully i covered all the details uh

764
00:35:29,119 --> 00:35:30,560
of this

765
00:35:30,560 --> 00:35:32,240
during the talk but let's try to

766
00:35:32,240 --> 00:35:35,359
summarize it so first the client

767
00:35:35,359 --> 00:35:37,920
it has to be signed by with hardened

768
00:35:37,920 --> 00:35:39,040
runtime

769
00:35:39,040 --> 00:35:42,839
or library validation

770
00:35:42,839 --> 00:35:46,240
and it

771
00:35:46,240 --> 00:35:48,720
mustn't have any of these entitlements

772
00:35:48,720 --> 00:35:50,800
the get task allow and disable library

773
00:35:50,800 --> 00:35:52,079
validation

774
00:35:52,079 --> 00:35:54,800
if any of these two present it's game

775
00:35:54,800 --> 00:35:55,839
over

776
00:35:55,839 --> 00:35:58,320
and it also shouldn't have any script

777
00:35:58,320 --> 00:35:59,680
files

778
00:35:59,680 --> 00:36:03,599
um because

779
00:36:03,599 --> 00:36:07,040
when we start an application on mac os

780
00:36:07,040 --> 00:36:10,960
the code signature of script files

781
00:36:10,960 --> 00:36:13,119
cannot be verified

782
00:36:13,119 --> 00:36:16,320
upon every execution so you can easily

783
00:36:16,320 --> 00:36:19,359
put your own code into these street

784
00:36:19,359 --> 00:36:21,760
files so basically all electrons

785
00:36:21,760 --> 00:36:26,000
electron apps are

786
00:36:26,000 --> 00:36:29,680
bad from this point of view

787
00:36:29,839 --> 00:36:33,040
and the xpc service side

788
00:36:33,040 --> 00:36:35,040
so when we hit the should accept new

789
00:36:35,040 --> 00:36:37,599
connection

790
00:36:38,240 --> 00:36:41,520
on the xbc service which is basically

791
00:36:41,520 --> 00:36:43,280
deciding if

792
00:36:43,280 --> 00:36:44,880
the service accepts or not the

793
00:36:44,880 --> 00:36:47,440
connection it should first verify

794
00:36:47,440 --> 00:36:49,599
if if it's a valid certificate from

795
00:36:49,599 --> 00:36:50,640
apple

796
00:36:50,640 --> 00:36:53,920
if it's signed by your team id then

797
00:36:53,920 --> 00:36:56,160
potentially verify the bundle id you

798
00:36:56,160 --> 00:36:59,520
expect and either

799
00:36:59,520 --> 00:37:02,160
verify the software version beat the

800
00:37:02,160 --> 00:37:03,760
bundle id

801
00:37:03,760 --> 00:37:08,240
or verify that the client is hardened

802
00:37:08,240 --> 00:37:10,560
against injection attacks so it has the

803
00:37:10,560 --> 00:37:12,160
hard end run time

804
00:37:12,160 --> 00:37:14,560
or the library validation flag set and

805
00:37:14,560 --> 00:37:16,960
doesn't have those entitlements

806
00:37:16,960 --> 00:37:20,560
and to do all of this it has to use

807
00:37:20,560 --> 00:37:22,000
audit token

808
00:37:22,000 --> 00:37:25,040
so if all of these are met on both the

809
00:37:25,040 --> 00:37:25,599
client

810
00:37:25,599 --> 00:37:29,520
and on the service side then it's secure

811
00:37:29,520 --> 00:37:32,480
and it should be fine now if any of

812
00:37:32,480 --> 00:37:33,119
these are

813
00:37:33,119 --> 00:37:36,160
missed it's vulnerable now

814
00:37:36,160 --> 00:37:38,480
and this is why we have many many many

815
00:37:38,480 --> 00:37:40,640
vulnerable

816
00:37:40,640 --> 00:37:43,440
xpc services out there because it's

817
00:37:43,440 --> 00:37:45,599
really easy to miss

818
00:37:45,599 --> 00:37:50,480
one of these steps

819
00:37:50,480 --> 00:37:53,920
conclusion uh there are still a lot of

820
00:37:53,920 --> 00:37:56,560
bugs out there there are not many people

821
00:37:56,560 --> 00:38:01,119
uh exploiting xbc services so

822
00:38:01,599 --> 00:38:05,119
if you want to find all days

823
00:38:05,119 --> 00:38:09,440
potentially participate in bug bounties

824
00:38:09,440 --> 00:38:12,240
yeah go out

825
00:38:12,720 --> 00:38:17,040
spread the word educate app developers

826
00:38:17,040 --> 00:38:18,800
it's it's really everywhere

827
00:38:18,800 --> 00:38:21,520
unfortunately

828
00:38:22,079 --> 00:38:24,800
and questions will be answered later on

829
00:38:24,800 --> 00:38:25,440
on the

830
00:38:25,440 --> 00:38:29,040
chat and a few more resources if you are

831
00:38:29,040 --> 00:38:32,400
interested uh in

832
00:38:32,400 --> 00:38:35,520
then uh there were two talks

833
00:38:35,520 --> 00:38:38,960
at objective by the c uh this year about

834
00:38:38,960 --> 00:38:43,359
xbc then as mentioned tyler pohan

835
00:38:43,359 --> 00:38:45,920
had an xbc exploitation last year and

836
00:38:45,920 --> 00:38:47,359
then jan beer

837
00:38:47,359 --> 00:38:50,640
had an ipc exploitation talk uh

838
00:38:50,640 --> 00:38:54,800
back in 2015 and there are some numerous

839
00:38:54,800 --> 00:38:56,079
blog posts

840
00:38:56,079 --> 00:39:00,560
these days both from reggie or myself

841
00:39:00,560 --> 00:39:04,560
on the web so you can go and

842
00:39:04,560 --> 00:39:09,040
read them there are plenty of pocs and

843
00:39:09,040 --> 00:39:12,640
exploit details out there

844
00:39:12,640 --> 00:39:15,119
and if you know application mac app

845
00:39:15,119 --> 00:39:17,599
developers then

846
00:39:17,599 --> 00:39:21,680
uh point them to these slides and

847
00:39:21,680 --> 00:39:29,839
educate them thank you for listening

848
00:39:31,359 --> 00:39:33,440
you

