1
00:00:01,320 --> 00:00:06,910
welcome back from lunch hope it was

2
00:00:03,969 --> 00:00:09,129
delicious maybe some tacos I don't know

3
00:00:06,910 --> 00:00:11,440
at San Diego pretty great time you're in

4
00:00:09,130 --> 00:00:16,059
for another great talk on yet another

5
00:00:11,440 --> 00:00:18,939
IOT hack by Joshua

6
00:00:16,059 --> 00:00:20,650
by Joshua Meyer please don't give a rag

7
00:00:18,940 --> 00:00:27,940
or round of applause to Joshua and

8
00:00:20,650 --> 00:00:31,839
welcome in torque on alrighty thanks

9
00:00:27,940 --> 00:00:34,300
everyone so I guess let's dive right in

10
00:00:31,840 --> 00:00:36,579
so a little bit about me I work at

11
00:00:34,300 --> 00:00:38,858
independent security evaluators we do

12
00:00:36,579 --> 00:00:40,420
custom white box security assessments we

13
00:00:38,859 --> 00:00:42,249
look at all kinds of things and we have

14
00:00:40,420 --> 00:00:44,019
a particular focus with media

15
00:00:42,249 --> 00:00:51,729
entertainment industry and we also have

16
00:00:44,019 --> 00:00:53,199
a large research presence I guess I so I

17
00:00:51,729 --> 00:00:54,399
just have a couple sides here and

18
00:00:53,199 --> 00:00:56,049
basically we're just gonna lay the

19
00:00:54,399 --> 00:00:57,370
groundwork for what we're doing today

20
00:00:56,049 --> 00:00:59,739
and then we're gonna do a live

21
00:00:57,370 --> 00:01:10,869
demonstration of looking at this device

22
00:00:59,739 --> 00:01:27,310
here sure is this better we had to move

23
00:01:10,869 --> 00:01:29,979
it back hello better all right so we're

24
00:01:27,310 --> 00:01:31,840
looking at the tarot master f2 420 I got

25
00:01:29,979 --> 00:01:32,740
the specs here for you but it's

26
00:01:31,840 --> 00:01:34,659
basically a pretty run-of-the-mill

27
00:01:32,740 --> 00:01:37,119
network-attached storage device that you

28
00:01:34,659 --> 00:01:41,170
might find in small homes and businesses

29
00:01:37,119 --> 00:01:43,799
and that kind of thing it's got a web

30
00:01:41,170 --> 00:01:46,210
application it has a nice bird on it

31
00:01:43,799 --> 00:01:48,429
pretty typical it's it's one of those

32
00:01:46,210 --> 00:01:53,169
desktop metaphor web applications so

33
00:01:48,429 --> 00:01:54,880
they're kind of neat it's got all kinds

34
00:01:53,170 --> 00:01:57,579
of little services that can run and a

35
00:01:54,880 --> 00:01:59,380
lot of them are running by default we've

36
00:01:57,579 --> 00:02:01,509
got your file sharing stuff and we've

37
00:01:59,380 --> 00:02:05,649
got some telenet and SSH and that type

38
00:02:01,509 --> 00:02:07,030
of thing that's all I got so let's go

39
00:02:05,649 --> 00:02:08,699
ahead and roll into the actually

40
00:02:07,030 --> 00:02:15,840
checking out this device

41
00:02:08,699 --> 00:02:19,738
and I've got the login page up here so

42
00:02:15,840 --> 00:02:21,300
we'll go ahead and sign in and as as you

43
00:02:19,739 --> 00:02:23,970
saw my screenshot this kind of what you

44
00:02:21,300 --> 00:02:26,190
get so like I said it's your desktop

45
00:02:23,970 --> 00:02:31,650
metaphor you can you got your icons and

46
00:02:26,190 --> 00:02:34,760
all that good stuff yeah strange

47
00:02:31,650 --> 00:02:37,280
permission or surprise it doesn't work

48
00:02:34,760 --> 00:02:42,030
we have folders and that kind of thing

49
00:02:37,280 --> 00:02:44,010
so we've got all kinds of little neat

50
00:02:42,030 --> 00:02:45,269
little features inside the control panel

51
00:02:44,010 --> 00:02:47,069
and this is where you're you're gonna

52
00:02:45,269 --> 00:02:49,650
have your administration type functions

53
00:02:47,069 --> 00:02:51,690
you're gonna have like creating user is

54
00:02:49,650 --> 00:02:53,519
making folders groups that kind of thing

55
00:02:51,690 --> 00:02:55,019
and these are exactly the types of

56
00:02:53,519 --> 00:02:57,120
actions that we look for when we're

57
00:02:55,019 --> 00:03:00,410
assessing these embedded devices because

58
00:02:57,120 --> 00:03:02,580
they tend to just be wrappers for

59
00:03:00,410 --> 00:03:04,230
commands and functions that run on the

60
00:03:02,580 --> 00:03:08,370
operating system level so they tend to

61
00:03:04,230 --> 00:03:09,149
be burn to a command injection and we

62
00:03:08,370 --> 00:03:11,580
can go from there

63
00:03:09,150 --> 00:03:14,670
so in particular we've got something

64
00:03:11,580 --> 00:03:16,560
like creating a user so while I'm using

65
00:03:14,670 --> 00:03:21,000
this web application I'm also proxying

66
00:03:16,560 --> 00:03:27,000
this through burp suite which is a web

67
00:03:21,000 --> 00:03:29,329
proxy software and maybe I didn't proxy

68
00:03:27,000 --> 00:03:29,329
it very well

69
00:03:37,560 --> 00:03:41,980
so we can go ahead and we'll try to

70
00:03:40,510 --> 00:03:43,870
create a user and we'll see what this

71
00:03:41,980 --> 00:03:54,579
request looks like oh boy I didn't clear

72
00:03:43,870 --> 00:03:55,780
up my data shame for me thanks alright

73
00:03:54,580 --> 00:03:57,370
so that was a little sneak preview

74
00:03:55,780 --> 00:03:59,440
there's lots of vulnerabilities in this

75
00:03:57,370 --> 00:04:04,330
I guess it didn't get cleared properly

76
00:03:59,440 --> 00:04:06,579
when we reset it okay so we'll do

77
00:04:04,330 --> 00:04:08,080
something a little different I guess so

78
00:04:06,580 --> 00:04:10,480
we'll try to create a user and we'll

79
00:04:08,080 --> 00:04:14,860
give it a user name we'll call it a to

80
00:04:10,480 --> 00:04:26,010
work on and we'll give it a very secure

81
00:04:14,860 --> 00:04:26,010
password and what's wrong

82
00:04:38,570 --> 00:04:41,590
so that's done

83
00:04:44,570 --> 00:04:50,540
so of course Palin's going to go through

84
00:04:47,430 --> 00:04:50,540
I apologize for this

85
00:04:56,070 --> 00:04:59,510
it gets better hang on

86
00:05:17,750 --> 00:05:23,770
okay I apologize I said did not have the

87
00:05:20,510 --> 00:05:23,770
vlogging turned on

88
00:05:30,919 --> 00:05:35,530
fun devices all right try that again

89
00:05:55,950 --> 00:06:01,380
all right so here's the actual request

90
00:05:57,960 --> 00:06:04,440
we want to look at so when we create a

91
00:06:01,380 --> 00:06:06,950
user you guys see that okay that's

92
00:06:04,440 --> 00:06:06,950
pretty small

93
00:06:30,270 --> 00:06:35,789
all right it's that a little better

94
00:06:33,410 --> 00:06:38,190
that's a pretty typical looking HTTP

95
00:06:35,789 --> 00:06:42,568
request we can see our username and we

96
00:06:38,190 --> 00:06:45,479
can see our password we put in here so

97
00:06:42,569 --> 00:06:47,780
it turns out that when we create these

98
00:06:45,479 --> 00:06:50,130
users it's just getting passed to a

99
00:06:47,780 --> 00:06:52,559
command line argument some sort of

100
00:06:50,130 --> 00:06:54,389
utility on the operating system and this

101
00:06:52,560 --> 00:06:56,280
user input is just being passed to it

102
00:06:54,389 --> 00:06:59,330
directly there's no sanitization so we

103
00:06:56,280 --> 00:07:03,559
can do our classic exploits we can do I

104
00:06:59,330 --> 00:07:15,120
don't know let's try to create a file

105
00:07:03,560 --> 00:07:24,330
and so we'll make a file in temp and

106
00:07:15,120 --> 00:07:27,120
we'll call it tor com2 and operation is

107
00:07:24,330 --> 00:07:28,530
successful so if this attack worked then

108
00:07:27,120 --> 00:07:32,580
we should to see if a file created

109
00:07:28,530 --> 00:07:37,469
created and temp so we can switch to a

110
00:07:32,580 --> 00:07:40,740
terminal and the second big thing and I

111
00:07:37,469 --> 00:07:44,240
believe we have SSH on it so we'll use

112
00:07:40,740 --> 00:07:44,240
the admin account that we already have

113
00:07:46,699 --> 00:07:50,870
and the IP address

114
00:07:54,199 --> 00:08:01,449
action refused oh boy this is one that's

115
00:07:58,819 --> 00:08:01,449
on line two two

116
00:08:10,360 --> 00:08:21,710
okay so we have a shell now and we can

117
00:08:13,610 --> 00:08:24,460
look into such temp and our command

118
00:08:21,710 --> 00:08:24,460
didn't wrk oh boy

119
00:08:29,470 --> 00:08:35,940
Oh cuz I didn't do a bathroom

120
00:08:36,940 --> 00:08:39,659
actually

121
00:08:54,560 --> 00:08:57,459
one more time

122
00:08:58,740 --> 00:09:01,890
and there we can see the file that was

123
00:09:00,540 --> 00:09:04,230
created through the command ejection and

124
00:09:01,890 --> 00:09:05,760
using creation so this is a very typical

125
00:09:04,230 --> 00:09:08,700
endpoint that we found in our research

126
00:09:05,760 --> 00:09:10,050
on all these devices we've got devices

127
00:09:08,700 --> 00:09:14,450
of all kinds of classes and they all

128
00:09:10,050 --> 00:09:14,449
seem to have these problems in common so

129
00:09:15,080 --> 00:09:20,220
moving on from that and we can go back

130
00:09:17,880 --> 00:09:27,600
here and clear out some of these awful

131
00:09:20,220 --> 00:09:30,150
cross-site scripting payloads this can

132
00:09:27,600 --> 00:09:33,410
be a little problematic let's delete the

133
00:09:30,150 --> 00:09:33,410
old ones that's something a good idea

134
00:09:34,070 --> 00:09:38,940
but as I'm sure you were all very astute

135
00:09:37,800 --> 00:09:40,140
you can see that there's going to be

136
00:09:38,940 --> 00:09:42,150
cross-site scripting and these shared

137
00:09:40,140 --> 00:09:54,060
folder names as well so what happens

138
00:09:42,150 --> 00:09:55,560
when you make the folder name we can go

139
00:09:54,060 --> 00:09:58,880
back into burp suite and we'll see what

140
00:09:55,560 --> 00:09:58,880
kind of request was generated there

141
00:10:03,319 --> 00:10:11,368
looks like this one and again we've got

142
00:10:09,540 --> 00:10:12,899
this similar looking request where we've

143
00:10:11,369 --> 00:10:14,489
got the folder name and I didn't give it

144
00:10:12,899 --> 00:10:17,999
a description so that's blank but we got

145
00:10:14,489 --> 00:10:19,379
some various things here but we think

146
00:10:17,999 --> 00:10:24,259
there's gonna be cross-site scripting in

147
00:10:19,379 --> 00:10:24,259
here so we can try doing a payload here

148
00:10:25,549 --> 00:10:30,269
we're gonna use they I'm gonna type it

149
00:10:28,980 --> 00:10:33,239
in here so I can get the URL and create

150
00:10:30,269 --> 00:10:38,279
diversion first we're gonna do a classic

151
00:10:33,239 --> 00:10:40,859
image tag we're gonna give it a file

152
00:10:38,279 --> 00:10:43,879
name that probably isn't on the web

153
00:10:40,859 --> 00:10:48,379
directory and then when there's an error

154
00:10:43,879 --> 00:10:54,569
we're going to pop up an alert box with

155
00:10:48,379 --> 00:10:56,009
64 we're going to URL encode this so

156
00:10:54,569 --> 00:11:03,319
that way it fits in the post body of our

157
00:10:56,009 --> 00:11:03,319
request head back here

158
00:11:09,460 --> 00:11:14,200
operation successful and then if we

159
00:11:12,339 --> 00:11:16,060
refresh this page hey there we go we got

160
00:11:14,200 --> 00:11:19,649
cross-site scripting so again we've got

161
00:11:16,060 --> 00:11:22,359
these very basic web vulnerabilities and

162
00:11:19,649 --> 00:11:25,750
these device this is a fairly modern

163
00:11:22,360 --> 00:11:29,649
device I believe just your very typical

164
00:11:25,750 --> 00:11:31,360
run-of-the-mill vulnerabilities so we

165
00:11:29,649 --> 00:11:33,190
could continue going like this for hours

166
00:11:31,360 --> 00:11:34,839
of just clicking in all of these forms

167
00:11:33,190 --> 00:11:37,959
and finding wherever they they come up

168
00:11:34,839 --> 00:11:39,550
at but an easier way to expedite this

169
00:11:37,959 --> 00:11:42,250
tends to be to look at the source code

170
00:11:39,550 --> 00:11:45,339
for the application and if we notice up

171
00:11:42,250 --> 00:11:47,290
top we can see a dot PHP extension in

172
00:11:45,339 --> 00:11:53,140
the URL so it's probably a PHP

173
00:11:47,290 --> 00:11:55,569
application so we can head back to our

174
00:11:53,140 --> 00:11:59,790
shell here and we can look and try and

175
00:11:55,570 --> 00:11:59,790
find where these PHP files are

176
00:12:07,060 --> 00:12:11,170
and there's a whole lot of them but

177
00:12:20,900 --> 00:12:23,459
it looks like they're in user

178
00:12:22,710 --> 00:12:28,980
dub-dub-dub

179
00:12:23,460 --> 00:12:36,029
so something else worth mentioning here

180
00:12:28,980 --> 00:12:37,500
is that we cannot get route so we have a

181
00:12:36,029 --> 00:12:40,020
low privilege so here even though in or

182
00:12:37,500 --> 00:12:41,339
an admin so at some point we're gonna

183
00:12:40,020 --> 00:12:46,380
want to get a root shell so we can have

184
00:12:41,339 --> 00:12:52,380
full control over the thing we're

185
00:12:46,380 --> 00:12:53,730
heading back here we can see our PHP

186
00:12:52,380 --> 00:12:55,230
files this looks like a web root

187
00:12:53,730 --> 00:12:56,760
directory so we're going to want to take

188
00:12:55,230 --> 00:12:58,080
this web root directory and send it to

189
00:12:56,760 --> 00:13:00,210
our own machine so that way we can do

190
00:12:58,080 --> 00:13:03,230
our own offline analysis of of what

191
00:13:00,210 --> 00:13:03,230
these source code files are

192
00:13:08,420 --> 00:13:20,849
so I'm gonna go ahead and tore up this

193
00:13:11,030 --> 00:13:33,870
directory here we'll call it files that

194
00:13:20,850 --> 00:13:36,050
are all right and then in our home

195
00:13:33,870 --> 00:13:37,290
directory we should have this nice

196
00:13:36,050 --> 00:13:39,949
Tarbell

197
00:13:37,290 --> 00:13:39,949
tar ball here

198
00:13:51,650 --> 00:13:57,329
all right so at this point we're gonna

199
00:13:55,020 --> 00:14:00,510
head back to my my local console here

200
00:13:57,330 --> 00:14:02,900
and I think we can use SCP to get this

201
00:14:00,510 --> 00:14:02,900
thing off

202
00:14:20,150 --> 00:14:26,350
mmm-hmm let me get this full path here

203
00:14:22,760 --> 00:14:26,350
actually just to make sure it's right

204
00:15:00,860 --> 00:15:14,040
mmm does ICP take that argument maybe it

205
00:15:05,130 --> 00:15:20,240
doesn't all right well luckily I have

206
00:15:14,040 --> 00:15:22,290
this copy I've already created before so

207
00:15:20,240 --> 00:15:23,730
just so I don't have to go click through

208
00:15:22,290 --> 00:15:26,819
the web directory and try to find this

209
00:15:23,730 --> 00:15:33,720
thing save some time but I've got

210
00:15:26,819 --> 00:15:38,939
actually we can't do this nevermind what

211
00:15:33,720 --> 00:15:41,509
are you some time then so let's get back

212
00:15:38,940 --> 00:15:41,509
into this thing

213
00:15:56,770 --> 00:16:03,079
and we're going to have to find out

214
00:15:58,970 --> 00:16:27,100
where the shared folders are for this

215
00:16:03,080 --> 00:16:27,100
device so I believe they are usually I

216
00:16:30,640 --> 00:16:35,390
think that'll work so now we should be

217
00:16:33,980 --> 00:16:45,350
able to go to the file manager and find

218
00:16:35,390 --> 00:16:48,910
them I don't have permission to do this

219
00:16:45,350 --> 00:16:48,910
this is unfortunate

220
00:16:52,430 --> 00:17:00,050
is anyone offhand know what the flag for

221
00:16:55,430 --> 00:17:02,199
SCP has to use a different port capital

222
00:17:00,050 --> 00:17:02,199
P

223
00:17:08,920 --> 00:17:15,660
no good app after the : you do it

224
00:17:22,190 --> 00:17:31,840
Oh in front of it okay that sounds right

225
00:17:38,040 --> 00:17:40,040
ah

226
00:17:42,490 --> 00:17:51,620
success ten points alright so now we've

227
00:17:49,610 --> 00:17:57,530
got our art our ball here and we can

228
00:17:51,620 --> 00:18:03,379
proceed with the rest of this so now

229
00:17:57,530 --> 00:18:05,750
I've got my local copy here again we

230
00:18:03,380 --> 00:18:07,970
just took off users slash user slash

231
00:18:05,750 --> 00:18:11,480
dub-dub-dub because that's where we

232
00:18:07,970 --> 00:18:12,559
found the web application so let's go

233
00:18:11,480 --> 00:18:14,780
ahead and start taking a look at these

234
00:18:12,559 --> 00:18:23,750
files and see if there's anything good

235
00:18:14,780 --> 00:18:24,980
so includes a good choice so here we've

236
00:18:23,750 --> 00:18:29,390
got some PHP files

237
00:18:24,980 --> 00:18:43,820
let's try upload dot PHP yikes that

238
00:18:29,390 --> 00:18:45,650
doesn't look like PHP mmm well data so

239
00:18:43,820 --> 00:18:48,850
what what's going on here is it turns

240
00:18:45,650 --> 00:18:51,230
out that this these PHP files have been

241
00:18:48,850 --> 00:18:55,490
obfuscated in some way perhaps they were

242
00:18:51,230 --> 00:18:58,190
encrypted at anyway we know that PHP is

243
00:18:55,490 --> 00:19:00,289
a scripted a scripting language so it's

244
00:18:58,190 --> 00:19:04,630
interpreted so these these files should

245
00:19:00,289 --> 00:19:04,629
be in human readable form at some point

246
00:19:05,140 --> 00:19:10,270
so what so let's run with this idea that

247
00:19:07,669 --> 00:19:15,530
they're encrypted what might be

248
00:19:10,270 --> 00:19:18,940
decrypting these files about the PHP

249
00:19:15,530 --> 00:19:18,940
interpreter that seems like a good guess

250
00:19:25,650 --> 00:19:34,900
so we'll head back into our SSH session

251
00:19:29,950 --> 00:19:36,510
here and we will find out where the PHP

252
00:19:34,900 --> 00:19:39,670
interpreter lives

253
00:19:36,510 --> 00:19:41,650
looks like user s pin and then we'll go

254
00:19:39,670 --> 00:19:44,700
ahead and we'll do a similar thing and

255
00:19:41,650 --> 00:19:44,700
extract it

256
00:20:03,350 --> 00:20:09,689
all right so now we've got our PHP

257
00:20:05,309 --> 00:20:13,399
binary so at this point we have this PHP

258
00:20:09,690 --> 00:20:13,399
binary we have these encrypted files

259
00:20:15,350 --> 00:20:19,678
we're gonna take a guess and say that

260
00:20:17,850 --> 00:20:22,620
these these files are encrypted using

261
00:20:19,679 --> 00:20:24,059
symmetric encryption so that way there's

262
00:20:22,620 --> 00:20:28,830
a key that's already known and they can

263
00:20:24,059 --> 00:20:30,539
decrypt these files as needed so this

264
00:20:28,830 --> 00:20:32,070
device seems to be able to do this by

265
00:20:30,539 --> 00:20:33,539
itself so that means there's probably a

266
00:20:32,070 --> 00:20:36,720
key floating around somewhere where we

267
00:20:33,539 --> 00:20:38,639
can find this decryption key so we're

268
00:20:36,720 --> 00:20:39,929
gonna look inside the PHP binary of

269
00:20:38,639 --> 00:20:42,000
course it's a binary so we're gonna have

270
00:20:39,929 --> 00:20:43,379
to use something like binary ninja or I

271
00:20:42,000 --> 00:20:47,029
defer or something like that some

272
00:20:43,379 --> 00:20:47,029
disassembler to look inside the binary

273
00:21:12,210 --> 00:21:21,340
all right so now we've let's see if I

274
00:21:16,120 --> 00:21:23,649
can make this bigger that's not quite

275
00:21:21,340 --> 00:21:27,520
the same thing but we've got the binary

276
00:21:23,650 --> 00:21:28,570
open now in binary ninja and we think

277
00:21:27,520 --> 00:21:32,050
it's going to be a symmetric encryption

278
00:21:28,570 --> 00:21:38,889
thing so what's a standard symmetric

279
00:21:32,050 --> 00:21:39,340
encryption algorithm anyone yes good

280
00:21:38,890 --> 00:21:41,680
choice

281
00:21:39,340 --> 00:21:43,929
all right so we're gonna look for the

282
00:21:41,680 --> 00:21:46,450
AES function there's several of them

283
00:21:43,930 --> 00:21:48,760
here then most of them don't look very

284
00:21:46,450 --> 00:21:50,590
interesting and you probably can't see

285
00:21:48,760 --> 00:21:54,900
any of them but the last one is called

286
00:21:50,590 --> 00:21:54,899
screw AES which is kind of interesting

287
00:21:55,080 --> 00:22:02,649
so we've got this little function here

288
00:21:58,060 --> 00:22:04,720
and I can try to make this it's you know

289
00:22:02,650 --> 00:22:08,200
assembly so this no one really wants to

290
00:22:04,720 --> 00:22:09,790
read this but we're looking for a key so

291
00:22:08,200 --> 00:22:11,380
in theory binary ninja we'll just show

292
00:22:09,790 --> 00:22:13,360
it right next to us well we don't see

293
00:22:11,380 --> 00:22:15,210
one in this function but we do see over

294
00:22:13,360 --> 00:22:16,780
here that it is croffer ask off

295
00:22:15,210 --> 00:22:18,640
cross-referenced by another function

296
00:22:16,780 --> 00:22:21,760
which means that something is calling

297
00:22:18,640 --> 00:22:24,430
this screw AES function and it looks

298
00:22:21,760 --> 00:22:25,690
like it's in the middle of this and so

299
00:22:24,430 --> 00:22:35,470
let's go back up to where it was

300
00:22:25,690 --> 00:22:39,640
originally used and Oh what's this so is

301
00:22:35,470 --> 00:22:44,610
this our key probably but it looks like

302
00:22:39,640 --> 00:22:46,630
it's used just before an md5 function so

303
00:22:44,610 --> 00:22:48,699
we think we might have found our key

304
00:22:46,630 --> 00:22:52,320
inside this PHP binary that's using this

305
00:22:48,700 --> 00:22:52,320
thing called screw AES

306
00:22:55,880 --> 00:23:09,710
so we can head back to our terminal now

307
00:22:57,710 --> 00:23:12,710
and so at this point we need to md5 that

308
00:23:09,710 --> 00:23:14,929
key and then we need to use some sort of

309
00:23:12,710 --> 00:23:18,010
encryption routine to decrypt all these

310
00:23:14,929 --> 00:23:18,010
PHP files for us

311
00:23:50,960 --> 00:23:56,190
so with the help of some of my good

312
00:23:53,340 --> 00:23:57,929
colleagues here at ISE we came up with

313
00:23:56,190 --> 00:24:00,690
this nice command which will take this

314
00:23:57,930 --> 00:24:02,520
string that we have it'll md5sum it

315
00:24:00,690 --> 00:24:07,410
clean it up a little bit and put it

316
00:24:02,520 --> 00:24:08,580
inside a a hexadecimal encoding and the

317
00:24:07,410 --> 00:24:11,400
reason we want it and a hexadecimal

318
00:24:08,580 --> 00:24:13,470
encoding so that we can use it with the

319
00:24:11,400 --> 00:24:15,270
OpenSSL utility and then we're just

320
00:24:13,470 --> 00:24:18,750
gonna use that to go ahead and decrypt

321
00:24:15,270 --> 00:24:25,740
all these PHP files so that's the first

322
00:24:18,750 --> 00:24:29,040
step and then the second step is to use

323
00:24:25,740 --> 00:24:30,630
ooh looks like it went off by itself let

324
00:24:29,040 --> 00:24:32,490
me bring that up again but we have this

325
00:24:30,630 --> 00:24:35,280
nice fine command here I had a fun day

326
00:24:32,490 --> 00:24:37,110
learning how find works but we're going

327
00:24:35,280 --> 00:24:38,730
to look for all of the PHP files and

328
00:24:37,110 --> 00:24:43,770
then we're going to run this command

329
00:24:38,730 --> 00:24:45,450
here and we're just going to make some

330
00:24:43,770 --> 00:24:47,120
assumptions here so that's why we saw a

331
00:24:45,450 --> 00:24:49,200
bunch of decrypt errors when I ran this

332
00:24:47,120 --> 00:24:51,899
but we're assuming it's just going to be

333
00:24:49,200 --> 00:24:53,880
a yes 256 with CBC mode because that

334
00:24:51,900 --> 00:24:55,620
seems like a typical choice we're also

335
00:24:53,880 --> 00:24:58,140
assuming down here that the

336
00:24:55,620 --> 00:25:01,469
initialization initialization vector is

337
00:24:58,140 --> 00:25:06,690
0 so we're going to have some errors on

338
00:25:01,470 --> 00:25:08,160
the first block because of this but the

339
00:25:06,690 --> 00:25:12,720
good news is if we look now we have

340
00:25:08,160 --> 00:25:17,190
these files that end in dot dchp and if

341
00:25:12,720 --> 00:25:20,790
we look at uploaded again hopefully it

342
00:25:17,190 --> 00:25:22,530
will be in plain text and it is so we

343
00:25:20,790 --> 00:25:24,750
see this error at the top of the pit

344
00:25:22,530 --> 00:25:26,879
inthere this bad block at the top of the

345
00:25:24,750 --> 00:25:28,920
page but that's ok because we can see

346
00:25:26,880 --> 00:25:33,480
now that we've got all our our good old

347
00:25:28,920 --> 00:25:36,050
PHP code in here I always like the died

348
00:25:33,480 --> 00:25:39,380
function

349
00:25:36,050 --> 00:25:41,629
all right so now we've got the

350
00:25:39,380 --> 00:25:42,980
application source code and again the

351
00:25:41,630 --> 00:25:44,240
idea is we're just trying to find a

352
00:25:42,980 --> 00:25:44,660
whole bunch of vulnerabilities very

353
00:25:44,240 --> 00:25:48,980
quickly

354
00:25:44,660 --> 00:25:50,810
so what we can do from here is we're

355
00:25:48,980 --> 00:25:53,300
going to look for problematic PHP

356
00:25:50,810 --> 00:25:54,950
functions something like exec which

357
00:25:53,300 --> 00:25:57,370
calls system processes would be a good

358
00:25:54,950 --> 00:25:57,370
choice for that

359
00:26:03,770 --> 00:26:09,290
so we're gonna recursively grep through

360
00:26:05,720 --> 00:26:17,120
this web root and we're going to look

361
00:26:09,290 --> 00:26:18,889
for exam so here's a whole bunch of

362
00:26:17,120 --> 00:26:21,800
results and I've being a little loose

363
00:26:18,890 --> 00:26:32,809
here but let's try using with this

364
00:26:21,800 --> 00:26:38,450
parentheses so how many results did we

365
00:26:32,809 --> 00:26:42,379
find 724 instances of exec so that's a

366
00:26:38,450 --> 00:26:43,910
lot so potentially each and every one of

367
00:26:42,380 --> 00:26:45,620
those could be vulnerable to some sort

368
00:26:43,910 --> 00:26:47,750
of command injection vulnerability now a

369
00:26:45,620 --> 00:26:50,719
lot of them probably aren't and again

370
00:26:47,750 --> 00:26:52,070
maybe my search was not as precise as it

371
00:26:50,720 --> 00:26:53,780
could have been but just to give an

372
00:26:52,070 --> 00:26:55,760
estimate of how many times she'll come

373
00:26:53,780 --> 00:27:00,740
in to being called by this web

374
00:26:55,760 --> 00:27:05,230
application so we can go back to our

375
00:27:00,740 --> 00:27:13,400
list here and I have a head of x

376
00:27:05,230 --> 00:27:17,450
identified a problematic function and it

377
00:27:13,400 --> 00:27:26,600
is resides within include class blogs

378
00:27:17,450 --> 00:27:32,870
class so again we've got our decryption

379
00:27:26,600 --> 00:27:38,178
thing here but this is a PHP class I

380
00:27:32,870 --> 00:27:42,570
suppose plugs and we can look through

381
00:27:38,179 --> 00:27:44,820
here and go to the top

382
00:27:42,570 --> 00:27:46,168
but we do see exactly peers in here

383
00:27:44,820 --> 00:27:49,320
several times here it's making a

384
00:27:46,169 --> 00:27:52,679
directory here it's running some command

385
00:27:49,320 --> 00:27:54,740
I wonder what that could be all kinds of

386
00:27:52,679 --> 00:27:54,740
things

387
00:28:08,730 --> 00:28:12,950
but one of the interesting ones that I

388
00:28:10,559 --> 00:28:12,950
found

389
00:28:18,860 --> 00:28:24,449
which is a function called log total so

390
00:28:22,920 --> 00:28:31,560
we can take a quick look at this it's

391
00:28:24,450 --> 00:28:33,240
pretty small it looks like it takes in

392
00:28:31,560 --> 00:28:36,510
two parameters one called table and one

393
00:28:33,240 --> 00:28:38,070
called type and it looks like it's doing

394
00:28:36,510 --> 00:28:40,100
something with sequel we see here are

395
00:28:38,070 --> 00:28:45,270
some sequel statements being prepared

396
00:28:40,100 --> 00:28:48,139
and it looks like the way they choose to

397
00:28:45,270 --> 00:28:48,139
run them

398
00:29:02,550 --> 00:29:10,260
it is down here I don't think this

399
00:29:06,240 --> 00:29:18,290
decrypted correctly oh right here okay

400
00:29:10,260 --> 00:29:21,330
825 so here we see that it's calling the

401
00:29:18,290 --> 00:29:23,280
sequel a three binary on the operating

402
00:29:21,330 --> 00:29:27,179
system and it's providing it with the

403
00:29:23,280 --> 00:29:29,310
sequel command so looking at this we can

404
00:29:27,180 --> 00:29:31,680
identify that there's a possibility for

405
00:29:29,310 --> 00:29:34,560
sequel injection and there's probably a

406
00:29:31,680 --> 00:29:36,540
possibility for command injection so

407
00:29:34,560 --> 00:29:38,250
sequel injection tends to be tedious to

408
00:29:36,540 --> 00:29:40,080
test for it but we can probably find a

409
00:29:38,250 --> 00:29:44,330
command injection so let's see where

410
00:29:40,080 --> 00:29:46,260
this log total function is being used so

411
00:29:44,330 --> 00:29:48,600
again we're gonna go ahead and search

412
00:29:46,260 --> 00:29:54,570
through our files here and we're gonna

413
00:29:48,600 --> 00:30:03,300
look for underscore log total and it

414
00:29:54,570 --> 00:30:06,360
looks like it B is used by log table so

415
00:30:03,300 --> 00:30:07,980
again we'll look through here first

416
00:30:06,360 --> 00:30:10,199
thing we want to point out is right here

417
00:30:07,980 --> 00:30:12,450
on line two it looks like it's setting

418
00:30:10,200 --> 00:30:16,640
this variable called data and it's using

419
00:30:12,450 --> 00:30:19,920
the values of your post request so

420
00:30:16,640 --> 00:30:22,220
that's important to note and then we'll

421
00:30:19,920 --> 00:30:24,150
go ahead and we'll try to find out where

422
00:30:22,220 --> 00:30:26,340
log total is used

423
00:30:24,150 --> 00:30:29,700
turns out it's used way down here at the

424
00:30:26,340 --> 00:30:31,260
bottom and it looks like we're looking

425
00:30:29,700 --> 00:30:33,030
to make sure that you send a post

426
00:30:31,260 --> 00:30:35,340
request and in there there is a

427
00:30:33,030 --> 00:30:38,250
parameter called tab and it's set to get

428
00:30:35,340 --> 00:30:40,740
total and if that's the case it's going

429
00:30:38,250 --> 00:30:43,020
to use this plug function and it's going

430
00:30:40,740 --> 00:30:45,960
to run or it's going to run the log

431
00:30:43,020 --> 00:30:49,710
total function from plugs and it's going

432
00:30:45,960 --> 00:30:51,900
to provide it with the a post parameter

433
00:30:49,710 --> 00:30:53,780
called table the value of it and the

434
00:30:51,900 --> 00:30:57,960
value of a post parameter called event

435
00:30:53,780 --> 00:31:01,220
so what just happened here we just found

436
00:30:57,960 --> 00:31:03,390
a a page or it's taking user input and

437
00:31:01,220 --> 00:31:05,130
it's storing it directly into this

438
00:31:03,390 --> 00:31:06,930
function down here we didn't see any

439
00:31:05,130 --> 00:31:10,230
sort of sanitization going on here and

440
00:31:06,930 --> 00:31:11,430
we looked and plugs the PHP file earlier

441
00:31:10,230 --> 00:31:14,510
and we didn't see any sanitation

442
00:31:11,430 --> 00:31:14,510
sanitization there

443
00:31:15,460 --> 00:31:19,210
something else if you peruse through

444
00:31:17,650 --> 00:31:21,130
this file you also notice that there's

445
00:31:19,210 --> 00:31:22,480
no authentication being checked here so

446
00:31:21,130 --> 00:31:25,020
it looks like there might just be this

447
00:31:22,480 --> 00:31:35,740
end point out here that could give you

448
00:31:25,020 --> 00:31:42,700
some good results so remembering that we

449
00:31:35,740 --> 00:31:45,840
need a tab parameter we need a table and

450
00:31:42,700 --> 00:31:45,840
something else

451
00:32:11,429 --> 00:32:15,970
we can use that to build a nice little

452
00:32:14,200 --> 00:32:18,340
curl command here that'll make a post

453
00:32:15,970 --> 00:32:19,780
request for us and it'll go ahead and

454
00:32:18,340 --> 00:32:22,600
populate these parameters with some

455
00:32:19,780 --> 00:32:26,410
things that might be interesting so

456
00:32:22,600 --> 00:32:29,428
first thing I have to do is fix this IP

457
00:32:26,410 --> 00:32:29,429
address and port number

458
00:32:41,690 --> 00:32:49,200
okay going back here so for those you

459
00:32:46,860 --> 00:32:50,699
not familiar with curl what we're doing

460
00:32:49,200 --> 00:32:53,100
here is we're specifying the the post

461
00:32:50,700 --> 00:32:54,570
body's data so we're using tab and

462
00:32:53,100 --> 00:32:56,519
really supposed to be get to it also

463
00:32:54,570 --> 00:32:58,619
will set it to get total we're sending

464
00:32:56,519 --> 00:33:00,450
table and I have no idea what the

465
00:32:58,619 --> 00:33:01,709
database table names are so I'm just

466
00:33:00,450 --> 00:33:04,440
gonna try at my table and see what

467
00:33:01,710 --> 00:33:06,090
happens and then we've got this event

468
00:33:04,440 --> 00:33:08,669
parameter which is one of those that got

469
00:33:06,090 --> 00:33:12,449
passed to the long total function and

470
00:33:08,669 --> 00:33:14,309
plug stop PHP and we're going to do some

471
00:33:12,450 --> 00:33:17,249
back tics here and what we're doing here

472
00:33:14,309 --> 00:33:21,330
is we're calling user s been telnet D

473
00:33:17,249 --> 00:33:26,970
and we're giving it - L with the path of

474
00:33:21,330 --> 00:33:28,289
bein SSH bin Shore and we're giving it

475
00:33:26,970 --> 00:33:30,210
the port number one two three four five

476
00:33:28,289 --> 00:33:32,429
so what's this - this starts a telenet

477
00:33:30,210 --> 00:33:34,230
listener and if you connect to it on

478
00:33:32,429 --> 00:33:36,779
port one two three four five you should

479
00:33:34,230 --> 00:33:40,259
get a shell so let's go ahead and fire

480
00:33:36,779 --> 00:33:43,700
off this request all right we got 200

481
00:33:40,259 --> 00:33:43,700
okay did it work

482
00:33:52,400 --> 00:34:08,340
it looks like it did and we finally got

483
00:33:58,049 --> 00:34:10,679
root so just just like that thank you so

484
00:34:08,340 --> 00:34:12,659
again recraft recapping our strategy

485
00:34:10,679 --> 00:34:13,950
here we could spend all day poking

486
00:34:12,659 --> 00:34:16,050
around at the web application but

487
00:34:13,949 --> 00:34:17,668
usually the much faster way to do it is

488
00:34:16,050 --> 00:34:19,169
to look at the source code and if we've

489
00:34:17,668 --> 00:34:20,819
got something like PHP it should be

490
00:34:19,168 --> 00:34:22,168
pretty easy to look through and we know

491
00:34:20,820 --> 00:34:25,139
what problematic functions are like

492
00:34:22,168 --> 00:34:26,790
exact so this device was interesting

493
00:34:25,139 --> 00:34:28,649
because they were doing that AES thing

494
00:34:26,790 --> 00:34:31,320
but in the end it didn't matter because

495
00:34:28,649 --> 00:34:33,868
they had the key stored in the HP binary

496
00:34:31,320 --> 00:34:35,879
so we can extract that out and decrypt

497
00:34:33,869 --> 00:34:38,820
the files and then we found an endpoint

498
00:34:35,879 --> 00:34:40,319
which was vulnerable to not only command

499
00:34:38,820 --> 00:34:42,450
injection but it also didn't require

500
00:34:40,320 --> 00:34:44,149
authentication and it ended up being

501
00:34:42,449 --> 00:34:47,069
route command injection on top of that

502
00:34:44,149 --> 00:34:48,929
so at this point we have a single chrome

503
00:34:47,070 --> 00:34:50,879
and that could be applied to any of

504
00:34:48,929 --> 00:34:52,740
these Terra Master devices you don't

505
00:34:50,879 --> 00:34:54,600
need authentication you can get a root

506
00:34:52,739 --> 00:35:03,720
shell on them effectively there now your

507
00:34:54,600 --> 00:35:05,880
device so if you'll remember from that

508
00:35:03,720 --> 00:35:08,459
word countless type rented earlier there

509
00:35:05,880 --> 00:35:09,900
was over seven hundred instances of exec

510
00:35:08,460 --> 00:35:15,000
so who knows how many more of these

511
00:35:09,900 --> 00:35:17,609
kinds of endpoints are in the device so

512
00:35:15,000 --> 00:35:18,630
if you want some free CVEs I highly

513
00:35:17,609 --> 00:35:21,029
encourage you to check out those

514
00:35:18,630 --> 00:35:22,560
endpoints but that's uh

515
00:35:21,030 --> 00:35:28,680
I think that's all I have for you today

516
00:35:22,560 --> 00:35:30,860
any questions guys come on alright

517
00:35:28,680 --> 00:35:36,239
thanks for listening everyone

518
00:35:30,860 --> 00:35:36,239
[Applause]

