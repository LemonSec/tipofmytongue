1
00:00:03,859 --> 00:00:09,269
all right next up we have an awesome

2
00:00:06,690 --> 00:00:12,130
talk on smart contract honey pots by Ben

3
00:00:09,269 --> 00:00:16,460
Schmidt please give Ben a warm welcome

4
00:00:12,130 --> 00:00:16,460
[Applause]

5
00:00:16,640 --> 00:00:23,070
hi everybody I'm Ben Schmidt I'm CSO at

6
00:00:21,029 --> 00:00:25,769
Poly swarm if you want to find out more

7
00:00:23,070 --> 00:00:28,800
about us talk to me afterwards but jump

8
00:00:25,769 --> 00:00:31,500
right in because hoping we have enough

9
00:00:28,800 --> 00:00:34,440
time but today I'm gonna be talking

10
00:00:31,500 --> 00:00:37,710
about smart contract honey pots which

11
00:00:34,440 --> 00:00:39,780
are vulnerable things that look like

12
00:00:37,710 --> 00:00:42,030
vulnerable aetherium smart contracts

13
00:00:39,780 --> 00:00:44,610
that people have been deploying to the

14
00:00:42,030 --> 00:00:47,460
main net to try and trick people into

15
00:00:44,610 --> 00:00:48,899
sending aetherium to them and then

16
00:00:47,460 --> 00:00:50,399
actually failing to exploit the

17
00:00:48,899 --> 00:00:53,219
contracts so that the attacker can

18
00:00:50,399 --> 00:00:55,680
actually take all their money what we're

19
00:00:53,219 --> 00:00:58,559
not going to be talking about today are

20
00:00:55,680 --> 00:01:00,719
how to find these things scams that

21
00:00:58,559 --> 00:01:03,899
aren't really about trying to attack

22
00:01:00,719 --> 00:01:06,600
people who are exploiting smart

23
00:01:03,899 --> 00:01:07,200
contracts or whether or not that's legal

24
00:01:06,600 --> 00:01:10,470
or not

25
00:01:07,200 --> 00:01:13,290
I wouldn't recommend doing it but you

26
00:01:10,470 --> 00:01:16,860
could take that as you will so first off

27
00:01:13,290 --> 00:01:18,810
just need to go over some basics about

28
00:01:16,860 --> 00:01:21,360
etherium solidity for people haven't

29
00:01:18,810 --> 00:01:22,799
looked at it before so that you can sort

30
00:01:21,360 --> 00:01:29,570
of understand what's going on in some of

31
00:01:22,799 --> 00:01:33,360
these tricks but the etherium is a

32
00:01:29,570 --> 00:01:35,820
blockchain platform that allows you to

33
00:01:33,360 --> 00:01:38,640
not only send money but also write smart

34
00:01:35,820 --> 00:01:39,630
contracts that process money in

35
00:01:38,640 --> 00:01:42,840
interesting ways

36
00:01:39,630 --> 00:01:43,798
so there's two types of accounts that

37
00:01:42,840 --> 00:01:46,860
you can have in aetherium

38
00:01:43,799 --> 00:01:50,490
one is an external account which is what

39
00:01:46,860 --> 00:01:52,439
normal people use they send money to and

40
00:01:50,490 --> 00:01:54,658
from other people and it's pretty

41
00:01:52,439 --> 00:01:56,969
standard for cryptocurrency is the other

42
00:01:54,659 --> 00:02:00,960
is a contract account which essentially

43
00:01:56,969 --> 00:02:04,740
has associated code and data and that

44
00:02:00,960 --> 00:02:07,048
code actually manages how funds fund

45
00:02:04,740 --> 00:02:10,900
transfers work and can record things to

46
00:02:07,049 --> 00:02:13,430
the chain etc so accounts

47
00:02:10,900 --> 00:02:16,040
send and receive transactions which are

48
00:02:13,430 --> 00:02:17,600
essentially proposed changes to the

49
00:02:16,040 --> 00:02:20,989
state of the chain if they're valid a

50
00:02:17,600 --> 00:02:24,380
minor will eventually confirm them to

51
00:02:20,990 --> 00:02:26,450
the chain for fee and at that point

52
00:02:24,380 --> 00:02:30,230
they're accepted as valid and stay

53
00:02:26,450 --> 00:02:34,100
around for you know to the heat death of

54
00:02:30,230 --> 00:02:37,209
the universe the the fees for these

55
00:02:34,100 --> 00:02:41,660
transactions are paid in our Colt gas

56
00:02:37,209 --> 00:02:44,840
they're they're paid in either the or

57
00:02:41,660 --> 00:02:50,600
eath the default currency on the

58
00:02:44,840 --> 00:02:53,239
platform so these contracts all compiled

59
00:02:50,600 --> 00:02:55,310
down to a simple bytecode that runs on

60
00:02:53,239 --> 00:02:57,800
something called the EVM the theory and

61
00:02:55,310 --> 00:02:59,300
virtual machine it's documented in paper

62
00:02:57,800 --> 00:03:00,980
we won't go over it too much in this

63
00:02:59,300 --> 00:03:03,019
because most of these things don't

64
00:03:00,980 --> 00:03:06,079
actually depend on you knowing all that

65
00:03:03,019 --> 00:03:08,900
much about it because a lot of what they

66
00:03:06,080 --> 00:03:11,450
do is actually publish the source code

67
00:03:08,900 --> 00:03:15,320
to their contracts but in ways that are

68
00:03:11,450 --> 00:03:18,350
sort of deceptive that or naive

69
00:03:15,320 --> 00:03:21,859
attackers don't understand so each

70
00:03:18,350 --> 00:03:24,019
instruction has an Associated cost to it

71
00:03:21,860 --> 00:03:28,730
so so this interpreter is

72
00:03:24,019 --> 00:03:30,920
turing-complete you the the only caveat

73
00:03:28,730 --> 00:03:33,590
to that is that every single instruction

74
00:03:30,920 --> 00:03:35,570
you run costs you money so if you have

75
00:03:33,590 --> 00:03:37,220
something like an infinite loop your

76
00:03:35,570 --> 00:03:38,660
transaction will never complete because

77
00:03:37,220 --> 00:03:41,150
you don't have enough money for it to

78
00:03:38,660 --> 00:03:44,890
run for infinity so that's how they sort

79
00:03:41,150 --> 00:03:48,079
of get around the halting problem stuff

80
00:03:44,890 --> 00:03:51,290
so in general most people don't actually

81
00:03:48,079 --> 00:03:53,570
directly write a theorem bytecode they

82
00:03:51,290 --> 00:03:54,980
use a higher-level language and in this

83
00:03:53,570 --> 00:03:58,160
case by far the most popular is

84
00:03:54,980 --> 00:03:59,209
something called solidity so solidity is

85
00:03:58,160 --> 00:04:03,350
adequately typed

86
00:03:59,209 --> 00:04:06,530
it's turing-complete and it's sort of

87
00:04:03,350 --> 00:04:08,780
JavaScript life but if you try and write

88
00:04:06,530 --> 00:04:10,459
certain things like you're using

89
00:04:08,780 --> 00:04:13,640
JavaScript and things are gonna break or

90
00:04:10,459 --> 00:04:16,010
bad things are gonna happen but what

91
00:04:13,640 --> 00:04:20,269
these contracts do is they essentially

92
00:04:16,010 --> 00:04:23,780
manage the flow of money so your goal

93
00:04:20,269 --> 00:04:24,200
here is to write more complex things

94
00:04:23,780 --> 00:04:26,119
other

95
00:04:24,200 --> 00:04:29,060
just I want to send this money to this

96
00:04:26,120 --> 00:04:31,510
other person so you can have it send to

97
00:04:29,060 --> 00:04:34,400
five people or write a gambling app that

98
00:04:31,510 --> 00:04:38,450
distributes it to you know people based

99
00:04:34,400 --> 00:04:40,609
on some random number generator so every

100
00:04:38,450 --> 00:04:42,800
single contract has a constructor that

101
00:04:40,610 --> 00:04:47,600
gets run when you deploy it to the chain

102
00:04:42,800 --> 00:04:49,700
and that basically sets up the state of

103
00:04:47,600 --> 00:04:51,170
the contract so that constructor after

104
00:04:49,700 --> 00:04:53,000
it's been executed when deploying the

105
00:04:51,170 --> 00:04:55,270
contract disappears it's not actually

106
00:04:53,000 --> 00:04:59,240
stored as the code in the chain but

107
00:04:55,270 --> 00:05:02,240
basically runs the setup for whatever

108
00:04:59,240 --> 00:05:04,370
you're trying to deploy the functions in

109
00:05:02,240 --> 00:05:07,850
those contracts on the other hand are

110
00:05:04,370 --> 00:05:10,010
deployed and by default unless you mark

111
00:05:07,850 --> 00:05:11,570
them as limited anyone on the chain can

112
00:05:10,010 --> 00:05:14,180
call into these things and when you call

113
00:05:11,570 --> 00:05:16,670
into this function it goes off and can

114
00:05:14,180 --> 00:05:20,060
modify State in some way so each

115
00:05:16,670 --> 00:05:22,000
contract also has one unnamed function

116
00:05:20,060 --> 00:05:28,310
called the fallback function and

117
00:05:22,000 --> 00:05:30,440
basically it gets called if the if it

118
00:05:28,310 --> 00:05:31,790
doesn't if it's not known what function

119
00:05:30,440 --> 00:05:34,430
you were trying to call so if you send

120
00:05:31,790 --> 00:05:36,050
something without specifying what

121
00:05:34,430 --> 00:05:37,130
function you want to call or if you call

122
00:05:36,050 --> 00:05:40,190
a function that isn't actually there

123
00:05:37,130 --> 00:05:44,350
this gets executed a lot of times people

124
00:05:40,190 --> 00:05:46,760
just revert in this in this function but

125
00:05:44,350 --> 00:05:47,810
because you don't really know how much

126
00:05:46,760 --> 00:05:49,880
gas it is and it might have been a

127
00:05:47,810 --> 00:05:53,870
mistake but sometimes it will actually

128
00:05:49,880 --> 00:05:55,250
do interesting things here so the way

129
00:05:53,870 --> 00:05:56,750
that you call functions is you create a

130
00:05:55,250 --> 00:05:59,930
transaction but you also attach some

131
00:05:56,750 --> 00:06:03,020
transaction data to it so transactions a

132
00:05:59,930 --> 00:06:05,810
transaction data consists of a method ID

133
00:06:03,020 --> 00:06:11,840
followed by arguments so the method ID

134
00:06:05,810 --> 00:06:13,700
should is a 32-bit integer that should

135
00:06:11,840 --> 00:06:16,400
uniquely identify a function in the

136
00:06:13,700 --> 00:06:20,180
contract and tells tells the dispatcher

137
00:06:16,400 --> 00:06:22,070
where to which function to execute and

138
00:06:20,180 --> 00:06:25,100
then you pass along whatever arguments

139
00:06:22,070 --> 00:06:27,110
that you are going to use to call on

140
00:06:25,100 --> 00:06:31,280
this thing so in this example we're

141
00:06:27,110 --> 00:06:33,670
calling approve which is some function

142
00:06:31,280 --> 00:06:35,900
in some contract but we're attaching

143
00:06:33,670 --> 00:06:37,879
some additional data to it in this case

144
00:06:35,900 --> 00:06:41,058
and aetherium address

145
00:06:37,879 --> 00:06:44,089
so this is well-documented constructing

146
00:06:41,059 --> 00:06:45,429
data is pretty easy and it's abstracted

147
00:06:44,089 --> 00:06:48,589
away through a bunch of different api's

148
00:06:45,429 --> 00:06:51,169
but but if you wanted to code it and you

149
00:06:48,589 --> 00:06:52,699
don't have source you might have to work

150
00:06:51,169 --> 00:06:57,469
a little bit because you don't actually

151
00:06:52,699 --> 00:06:59,959
know what the function signature is so

152
00:06:57,469 --> 00:07:02,240
in addition to directly calling

153
00:06:59,959 --> 00:07:04,550
contracts contracts can actually call

154
00:07:02,240 --> 00:07:06,439
other contracts so this is done through

155
00:07:04,550 --> 00:07:08,449
something called message calls but it's

156
00:07:06,439 --> 00:07:10,939
also alternatively referred to as

157
00:07:08,449 --> 00:07:13,789
internal transactions but this allows

158
00:07:10,939 --> 00:07:15,949
for things like library contracts so you

159
00:07:13,789 --> 00:07:17,959
deploy you you want to deploy a certain

160
00:07:15,949 --> 00:07:20,149
contract a bunch of times but you don't

161
00:07:17,959 --> 00:07:21,649
want have to pay to store the code or a

162
00:07:20,149 --> 00:07:23,839
lot of the code more than once you

163
00:07:21,649 --> 00:07:25,399
deploy a library and then you deploy all

164
00:07:23,839 --> 00:07:28,729
these other contracts that refer to the

165
00:07:25,399 --> 00:07:32,689
library so you can actually build these

166
00:07:28,729 --> 00:07:34,878
nice complex sort of chains where you do

167
00:07:32,689 --> 00:07:36,469
one thing in one contract and it updates

168
00:07:34,879 --> 00:07:39,319
some other ones that are related but

169
00:07:36,469 --> 00:07:41,569
they're all standalone units it's useful

170
00:07:39,319 --> 00:07:43,009
but it also adds complexity that allows

171
00:07:41,569 --> 00:07:46,039
you to sort of hide some interesting

172
00:07:43,009 --> 00:07:47,930
stuff and this is just an example of

173
00:07:46,039 --> 00:07:51,789
something that's calling back and forth

174
00:07:47,930 --> 00:07:54,349
through through an example contract so

175
00:07:51,789 --> 00:07:58,610
talked a bit about code but there's also

176
00:07:54,349 --> 00:08:01,279
storage in aetherium which is the

177
00:07:58,610 --> 00:08:02,749
persistent storage area on the network

178
00:08:01,279 --> 00:08:04,579
so contracts need to be able to maintain

179
00:08:02,749 --> 00:08:06,829
state between each of the transactions

180
00:08:04,579 --> 00:08:09,919
on the network so there is a key value

181
00:08:06,829 --> 00:08:14,050
store that basically maps 256 bit

182
00:08:09,919 --> 00:08:18,229
integers to 256 bit integers and it

183
00:08:14,050 --> 00:08:20,539
allows you to store data directly under

184
00:08:18,229 --> 00:08:23,508
the chain and refer to it later

185
00:08:20,539 --> 00:08:26,479
so you can keep track of balances manage

186
00:08:23,509 --> 00:08:28,069
you know whatever there's two other

187
00:08:26,479 --> 00:08:31,279
places that contracts can use for data

188
00:08:28,069 --> 00:08:34,009
memory and stack these are not

189
00:08:31,279 --> 00:08:36,919
persistent but they're far cheaper use

190
00:08:34,009 --> 00:08:38,300
so oftentimes people will try and use

191
00:08:36,919 --> 00:08:40,188
those as much as possible if they don't

192
00:08:38,299 --> 00:08:42,289
actually need to store it variables

193
00:08:40,188 --> 00:08:43,789
default to using the storage as their

194
00:08:42,289 --> 00:08:46,809
backing so you have to explicitly

195
00:08:43,789 --> 00:08:50,180
declare them otherwise if if you want to

196
00:08:46,809 --> 00:08:51,439
so there's some common flaws I

197
00:08:50,180 --> 00:08:54,020
definitely recommend

198
00:08:51,440 --> 00:08:55,850
looking at my coworkers Paul Mackowski

199
00:08:54,020 --> 00:08:59,720
talk on some of these flaws more in

200
00:08:55,850 --> 00:09:01,460
depth but there these are the ones that

201
00:08:59,720 --> 00:09:04,540
are sort of most relevant to the stock

202
00:09:01,460 --> 00:09:07,490
there's unhandled reentrant control flow

203
00:09:04,540 --> 00:09:10,310
which was used to exploit the Dow

204
00:09:07,490 --> 00:09:13,160
contract and still something like 3.6

205
00:09:10,310 --> 00:09:16,729
million either but basically what it

206
00:09:13,160 --> 00:09:19,670
means is that a contract calls out to

207
00:09:16,730 --> 00:09:21,800
another attacker controlled contract but

208
00:09:19,670 --> 00:09:24,410
doesn't appropriately update its state

209
00:09:21,800 --> 00:09:27,380
before doing so so the attacker contract

210
00:09:24,410 --> 00:09:29,270
can then call back in to the original

211
00:09:27,380 --> 00:09:31,670
contract and execute the same function

212
00:09:29,270 --> 00:09:33,880
so what this allows you to do is say if

213
00:09:31,670 --> 00:09:37,240
you don't update the balance of a user

214
00:09:33,880 --> 00:09:39,620
before you do this you can call back in

215
00:09:37,240 --> 00:09:40,970
to the same function over and over and

216
00:09:39,620 --> 00:09:42,470
over again and keep withdrawing your

217
00:09:40,970 --> 00:09:45,830
money even though you shouldn't have any

218
00:09:42,470 --> 00:09:48,980
at the time a delegate call into

219
00:09:45,830 --> 00:09:53,600
vulnerable libraries so this was used in

220
00:09:48,980 --> 00:09:57,290
the parody hack which basically allowed

221
00:09:53,600 --> 00:09:59,450
someone to call in to a function that

222
00:09:57,290 --> 00:10:01,969
people thought couldn't be called in a

223
00:09:59,450 --> 00:10:04,190
library that they had that allowed them

224
00:10:01,970 --> 00:10:05,840
to reinitialize the library and declare

225
00:10:04,190 --> 00:10:07,550
themselves the sole owner of all the

226
00:10:05,840 --> 00:10:09,590
funds and this multi signature wallet

227
00:10:07,550 --> 00:10:13,310
which then allowed them to withdraw it

228
00:10:09,590 --> 00:10:14,840
to some address there's also a related

229
00:10:13,310 --> 00:10:16,130
problem of unprotected critical

230
00:10:14,840 --> 00:10:19,850
functions which came up again and

231
00:10:16,130 --> 00:10:21,740
another parody attack where you could

232
00:10:19,850 --> 00:10:24,020
still call this function if you directly

233
00:10:21,740 --> 00:10:26,810
talk to the library this allowed someone

234
00:10:24,020 --> 00:10:29,630
to actually freeze about a 150 million

235
00:10:26,810 --> 00:10:32,180
dollars worth of cryptocurrency and it's

236
00:10:29,630 --> 00:10:34,880
still unrecoverable today and the last

237
00:10:32,180 --> 00:10:37,489
one that's relevant is the improper

238
00:10:34,880 --> 00:10:38,990
handling of secrets so when you have

239
00:10:37,490 --> 00:10:42,400
gambling applications one of most

240
00:10:38,990 --> 00:10:47,480
popular things on the network right now

241
00:10:42,400 --> 00:10:49,280
it allows you so so it's sometimes very

242
00:10:47,480 --> 00:10:50,750
difficult to get random numbers in there

243
00:10:49,280 --> 00:10:53,480
that are actually secure for a gambling

244
00:10:50,750 --> 00:10:55,190
app so oftentimes people make the

245
00:10:53,480 --> 00:10:58,970
mistake of doing things like storing the

246
00:10:55,190 --> 00:11:01,250
secret on the chain and putting it into

247
00:10:58,970 --> 00:11:02,900
a private variable and they think that

248
00:11:01,250 --> 00:11:04,910
means that no one can read it but you

249
00:11:02,900 --> 00:11:08,120
actually can directly

250
00:11:04,910 --> 00:11:11,329
read that off the chain using some some

251
00:11:08,120 --> 00:11:14,180
pretty simple tools so you can obviously

252
00:11:11,330 --> 00:11:15,770
achieve these are some tools for doing

253
00:11:14,180 --> 00:11:18,170
all those things I won't go into them

254
00:11:15,770 --> 00:11:19,910
too much but definitely check out the

255
00:11:18,170 --> 00:11:22,550
awesome aetherium security stuff it's

256
00:11:19,910 --> 00:11:27,560
sort of links to everything that's of

257
00:11:22,550 --> 00:11:30,439
interest so smart contract honey pots so

258
00:11:27,560 --> 00:11:32,750
the reason this is popular is you've got

259
00:11:30,440 --> 00:11:34,730
a ton of bad code and you can send this

260
00:11:32,750 --> 00:11:36,980
money that cannot be transferred back

261
00:11:34,730 --> 00:11:38,450
you have no recourse once it's stolen so

262
00:11:36,980 --> 00:11:40,430
a lot of people think that's you know

263
00:11:38,450 --> 00:11:43,190
free money so after all these hacks

264
00:11:40,430 --> 00:11:44,420
there with huge dollar amounts lots of

265
00:11:43,190 --> 00:11:48,560
people started looking to exploit these

266
00:11:44,420 --> 00:11:50,420
contracts so some enterprising

267
00:11:48,560 --> 00:11:52,280
individuals figured out that maybe they

268
00:11:50,420 --> 00:11:54,349
could trick these attackers into giving

269
00:11:52,280 --> 00:11:55,579
them money when they think that they're

270
00:11:54,350 --> 00:11:58,820
gonna get some huge payday

271
00:11:55,580 --> 00:12:00,800
so these honey pots all without fail

272
00:11:58,820 --> 00:12:03,230
require you to send ether into the

273
00:12:00,800 --> 00:12:04,729
contract and they look like they're

274
00:12:03,230 --> 00:12:06,530
vulnerable to some of these common flaws

275
00:12:04,730 --> 00:12:10,640
but they're actually trying to exploit

276
00:12:06,530 --> 00:12:12,290
the people exploiting them so I got

277
00:12:10,640 --> 00:12:15,050
interested in this because I wrote a

278
00:12:12,290 --> 00:12:18,050
smart contract challenge for hack in the

279
00:12:15,050 --> 00:12:20,780
box where you it was a classic

280
00:12:18,050 --> 00:12:24,500
reinsurance II bug but people weren't

281
00:12:20,780 --> 00:12:27,079
actually able to exploit it unless they

282
00:12:24,500 --> 00:12:31,780
had a private key that I gave them

283
00:12:27,080 --> 00:12:35,000
so so the goal of the challenge was to

284
00:12:31,780 --> 00:12:36,319
bypass a withdrawal limit so I put about

285
00:12:35,000 --> 00:12:41,870
fifty dollars of ether in each account

286
00:12:36,320 --> 00:12:43,280
and people would by default only be able

287
00:12:41,870 --> 00:12:44,600
to withdraw three times very small

288
00:12:43,280 --> 00:12:46,880
amount of money like three bucks worth

289
00:12:44,600 --> 00:12:48,710
of ether and the goal was to try and

290
00:12:46,880 --> 00:12:50,900
withdraw way more than three times so

291
00:12:48,710 --> 00:12:53,270
you could use one of these reentrant

292
00:12:50,900 --> 00:12:58,520
this reentrant debug to actually get

293
00:12:53,270 --> 00:13:01,220
money the the interesting part about it

294
00:12:58,520 --> 00:13:02,750
though is that you could only steal the

295
00:13:01,220 --> 00:13:04,310
amount of money that was already in your

296
00:13:02,750 --> 00:13:07,100
account you couldn't steal the entire

297
00:13:04,310 --> 00:13:10,160
balance of the smart contract well just

298
00:13:07,100 --> 00:13:11,720
looking at it that's not obvious and it

299
00:13:10,160 --> 00:13:14,540
clearly wasn't obvious to someone else

300
00:13:11,720 --> 00:13:16,460
because he went less than an hour later

301
00:13:14,540 --> 00:13:18,349
someone started trying to deposit phones

302
00:13:16,460 --> 00:13:19,850
into this and exploit this bug

303
00:13:18,350 --> 00:13:22,070
so there's people were actively looking

304
00:13:19,850 --> 00:13:23,660
for these bugs clearly and also not

305
00:13:22,070 --> 00:13:25,520
really thoroughly reading the source

306
00:13:23,660 --> 00:13:28,130
code to figure out whether or not it's

307
00:13:25,520 --> 00:13:30,470
safe if I was actually trying to exploit

308
00:13:28,130 --> 00:13:32,270
this you know I basically just had to

309
00:13:30,470 --> 00:13:34,700
raise the amount of funds that someone

310
00:13:32,270 --> 00:13:39,410
needed to deposit to try and exploit the

311
00:13:34,700 --> 00:13:41,000
bug but and you know make it so that

312
00:13:39,410 --> 00:13:42,800
they couldn't withdraw any funds I

313
00:13:41,000 --> 00:13:45,710
didn't do that so the guy was

314
00:13:42,800 --> 00:13:51,229
successfully able to recover his few

315
00:13:45,710 --> 00:13:54,590
cents but it it just shows how how

316
00:13:51,230 --> 00:13:58,240
prevalent this thing is so someone did

317
00:13:54,590 --> 00:14:02,180
something very very similar in February

318
00:13:58,240 --> 00:14:04,820
currency tycoon posted on reddit about

319
00:14:02,180 --> 00:14:07,189
how he lost some money trying to exploit

320
00:14:04,820 --> 00:14:09,590
one of these one of these wallets and

321
00:14:07,190 --> 00:14:12,200
the contract was named private bank and

322
00:14:09,590 --> 00:14:14,330
was just a simple wallet contract and it

323
00:14:12,200 --> 00:14:19,300
had a very very obvious vulnerability so

324
00:14:14,330 --> 00:14:21,620
obviously looking at this code the the

325
00:14:19,300 --> 00:14:23,660
contract calls out to an external

326
00:14:21,620 --> 00:14:25,310
attacker controlled contract before it

327
00:14:23,660 --> 00:14:29,510
actually updates the balances of the

328
00:14:25,310 --> 00:14:32,439
user so in theory this should be

329
00:14:29,510 --> 00:14:36,170
exploitative and this guy was actually

330
00:14:32,440 --> 00:14:38,270
very cautious and took the source code

331
00:14:36,170 --> 00:14:41,120
that someone had uploaded to ether scan

332
00:14:38,270 --> 00:14:44,150
for this contract and ran it on a test

333
00:14:41,120 --> 00:14:45,670
net and his exploit worked however when

334
00:14:44,150 --> 00:14:48,709
he actually tried to do it in real life

335
00:14:45,670 --> 00:14:50,329
his exploit a failed it looked like it

336
00:14:48,710 --> 00:14:52,130
was successful based on some of the

337
00:14:50,330 --> 00:14:52,940
debugging information but he never

338
00:14:52,130 --> 00:14:57,290
actually got any money

339
00:14:52,940 --> 00:14:59,570
and then about so so now he had 1/8 in

340
00:14:57,290 --> 00:15:00,890
this in this contract and about 20

341
00:14:59,570 --> 00:15:02,750
minutes later someone actually

342
00:15:00,890 --> 00:15:06,470
successfully exploited the bug which was

343
00:15:02,750 --> 00:15:08,900
interesting to say the least so what's

344
00:15:06,470 --> 00:15:11,600
the problem here well it's internal

345
00:15:08,900 --> 00:15:14,569
transactions so the clever thing that

346
00:15:11,600 --> 00:15:17,750
this attacker did was when they uploaded

347
00:15:14,570 --> 00:15:20,600
this source code to either scan either

348
00:15:17,750 --> 00:15:22,070
scan will actually compile the contract

349
00:15:20,600 --> 00:15:24,200
that you upload and make sure that the

350
00:15:22,070 --> 00:15:27,650
byte code exactly matches what is on the

351
00:15:24,200 --> 00:15:29,090
chain if that works then they can they

352
00:15:27,650 --> 00:15:31,850
will mark it as verified and display

353
00:15:29,090 --> 00:15:34,100
that source is the official source

354
00:15:31,850 --> 00:15:36,319
of the contract the problem with this is

355
00:15:34,100 --> 00:15:38,000
if you call any external contracts it

356
00:15:36,319 --> 00:15:40,849
doesn't actually validate anything other

357
00:15:38,000 --> 00:15:42,079
than that the function function

358
00:15:40,850 --> 00:15:46,220
signatures that are being called

359
00:15:42,079 --> 00:15:49,519
actually match so this particular thing

360
00:15:46,220 --> 00:15:51,620
called this transfer log contract and

361
00:15:49,519 --> 00:15:55,430
called the ad message function in that

362
00:15:51,620 --> 00:15:57,649
contract and it actually called into

363
00:15:55,430 --> 00:16:00,040
something that was different than what

364
00:15:57,649 --> 00:16:02,620
was actually uploaded in the source so

365
00:16:00,040 --> 00:16:07,730
you look at the source code and it looks

366
00:16:02,620 --> 00:16:09,319
entirely innocent but in reality the

367
00:16:07,730 --> 00:16:10,910
closed source contract does something

368
00:16:09,319 --> 00:16:13,009
entirely different so it's not logging

369
00:16:10,910 --> 00:16:15,889
any messages about a transaction what it

370
00:16:13,009 --> 00:16:17,990
is actually trying to do is it will

371
00:16:15,889 --> 00:16:20,690
revert any transaction that is made by

372
00:16:17,990 --> 00:16:24,980
someone that is not the attacker so the

373
00:16:20,690 --> 00:16:28,519
attacker can exploit the bug but no one

374
00:16:24,980 --> 00:16:29,959
else can so afterwards after he saw

375
00:16:28,519 --> 00:16:31,420
people submitting stuff in there he just

376
00:16:29,959 --> 00:16:33,709
exploited the bug and stole the money

377
00:16:31,420 --> 00:16:36,139
this also means that someone testing

378
00:16:33,709 --> 00:16:39,529
with the provided source will think that

379
00:16:36,139 --> 00:16:41,089
it works but it actually doesn't so a

380
00:16:39,529 --> 00:16:44,180
much simpler approach that some people

381
00:16:41,089 --> 00:16:46,430
have taken is that still takes advantage

382
00:16:44,180 --> 00:16:50,540
of ether scan as well is they uploaded

383
00:16:46,430 --> 00:16:53,420
some source but all they did was they

384
00:16:50,540 --> 00:16:55,189
hid some code in that source by pushing

385
00:16:53,420 --> 00:16:59,360
it off to the side by adding a bunch of

386
00:16:55,189 --> 00:17:01,969
whitespace so this guy just added an

387
00:16:59,360 --> 00:17:03,800
owner dot transfer of the entire balance

388
00:17:01,970 --> 00:17:06,350
of the smart contract prior to the

389
00:17:03,800 --> 00:17:08,839
execution of sending it to the person

390
00:17:06,349 --> 00:17:10,789
who started the transaction so that

391
00:17:08,839 --> 00:17:12,559
means is the first transfer succeeds he

392
00:17:10,789 --> 00:17:17,119
gets the money and the second one fails

393
00:17:12,559 --> 00:17:20,569
and loses his money but an even simpler

394
00:17:17,119 --> 00:17:23,599
approach is as noticed by point Sherpa

395
00:17:20,569 --> 00:17:26,000
on tweet about the best scam he had ever

396
00:17:23,599 --> 00:17:27,589
seen a user started going around in

397
00:17:26,000 --> 00:17:30,830
various cryptocurrency chat channels

398
00:17:27,589 --> 00:17:32,840
asking for support so what he would do

399
00:17:30,830 --> 00:17:35,570
is he post the private key into these

400
00:17:32,840 --> 00:17:38,449
channels and of course people told him

401
00:17:35,570 --> 00:17:41,059
not to do that but would go in but some

402
00:17:38,450 --> 00:17:43,309
people would obviously go in and see

403
00:17:41,059 --> 00:17:45,889
that his balance had thousands of

404
00:17:43,309 --> 00:17:48,350
dollars in tokens that

405
00:17:45,890 --> 00:17:51,020
they could potentially steal so what it

406
00:17:48,350 --> 00:17:53,600
lacked was the currency to pay for the

407
00:17:51,020 --> 00:17:56,120
gas that was actually necessary to move

408
00:17:53,600 --> 00:17:57,620
those tokens so people would send in

409
00:17:56,120 --> 00:18:00,919
either and expect to just be able to

410
00:17:57,620 --> 00:18:03,020
move it what they didn't know was that

411
00:18:00,920 --> 00:18:05,630
there was a script monitoring that

412
00:18:03,020 --> 00:18:09,530
account that would immediately transfer

413
00:18:05,630 --> 00:18:12,980
out any currency that was put into into

414
00:18:09,530 --> 00:18:15,649
the the account so it would immediately

415
00:18:12,980 --> 00:18:17,540
create a transaction and transfer all

416
00:18:15,650 --> 00:18:19,100
the funds back out of the account to an

417
00:18:17,540 --> 00:18:22,730
attacker controlled address that no one

418
00:18:19,100 --> 00:18:24,500
knew the what they also didn't know was

419
00:18:22,730 --> 00:18:27,680
that the token that he had chosen to put

420
00:18:24,500 --> 00:18:29,920
in there actually had a quirk where just

421
00:18:27,680 --> 00:18:32,500
because the balance of the account

422
00:18:29,920 --> 00:18:35,390
showed a lot of money that was available

423
00:18:32,500 --> 00:18:37,880
the actual available balance the tokens

424
00:18:35,390 --> 00:18:42,940
could be locked so you were actually

425
00:18:37,880 --> 00:18:45,290
able to transfer the funds out of the

426
00:18:42,940 --> 00:18:47,000
you you actually weren't even able to

427
00:18:45,290 --> 00:18:49,520
transfer the tokens even if you won the

428
00:18:47,000 --> 00:18:53,810
race condition where and beat him to the

429
00:18:49,520 --> 00:18:55,100
punch transferring the funds so probably

430
00:18:53,810 --> 00:18:59,629
the most technically interesting to me

431
00:18:55,100 --> 00:19:01,189
is crypto roulette where it purports to

432
00:18:59,630 --> 00:19:02,810
be a gambling smart contract so you

433
00:19:01,190 --> 00:19:05,270
guess the right number you get you get

434
00:19:02,810 --> 00:19:07,070
money the contract had pretty poor

435
00:19:05,270 --> 00:19:09,530
secret generation but even worse it was

436
00:19:07,070 --> 00:19:12,230
actually storing the secrets on chain so

437
00:19:09,530 --> 00:19:13,940
anyone who looked at this contract would

438
00:19:12,230 --> 00:19:15,250
think oh I can see the secret number

439
00:19:13,940 --> 00:19:18,580
I'll just guess it and I'll make money

440
00:19:15,250 --> 00:19:22,070
well didn't actually work out that way

441
00:19:18,580 --> 00:19:23,929
this trick the the code actually looks

442
00:19:22,070 --> 00:19:26,000
very very innocent and like it shouldn't

443
00:19:23,930 --> 00:19:26,930
do anything but the trick was is that

444
00:19:26,000 --> 00:19:31,400
there was actually an uninitialized

445
00:19:26,930 --> 00:19:33,020
structure that you were writing to and

446
00:19:31,400 --> 00:19:35,180
by default that writes to storage

447
00:19:33,020 --> 00:19:37,220
location zero well this guy actually was

448
00:19:35,180 --> 00:19:40,820
overwriting the secret number on the

449
00:19:37,220 --> 00:19:43,010
chain whenever executed the person would

450
00:19:40,820 --> 00:19:45,169
lose and then he would set it to some

451
00:19:43,010 --> 00:19:46,490
other sort of random values so you never

452
00:19:45,170 --> 00:19:48,230
even knew that that happened and you

453
00:19:46,490 --> 00:19:51,260
wouldn't unless you stepped through the

454
00:19:48,230 --> 00:19:52,490
contract pretty carefully and the last

455
00:19:51,260 --> 00:19:55,970
one I'm gonna talk about is the

456
00:19:52,490 --> 00:19:57,890
multiplicator contract and basically

457
00:19:55,970 --> 00:19:59,120
this thing was deployed in late 2017 it

458
00:19:57,890 --> 00:20:02,240
was one of the first ones

459
00:19:59,120 --> 00:20:05,090
that was out there but the trick in this

460
00:20:02,240 --> 00:20:10,280
contract was that if people didn't know

461
00:20:05,090 --> 00:20:13,699
this top balance was correct it was

462
00:20:10,280 --> 00:20:15,440
updated as suit before this function

463
00:20:13,700 --> 00:20:17,150
started they wouldn't realize that

464
00:20:15,440 --> 00:20:18,680
message value the amount that I'm

465
00:20:17,150 --> 00:20:20,240
sitting in could never actually be

466
00:20:18,680 --> 00:20:24,440
greater than this top balance on the

467
00:20:20,240 --> 00:20:25,970
contract so you'd send in more money

468
00:20:24,440 --> 00:20:27,770
than what was in the contract expect me

469
00:20:25,970 --> 00:20:32,540
to get all your money back out and it

470
00:20:27,770 --> 00:20:34,850
wouldn't work so it's undeniably

471
00:20:32,540 --> 00:20:39,200
satisfying to watch these gamers lose

472
00:20:34,850 --> 00:20:40,820
money but you know these demonstrate

473
00:20:39,200 --> 00:20:41,990
some serious issues with the ecosystem

474
00:20:40,820 --> 00:20:44,600
that should probably be addressed number

475
00:20:41,990 --> 00:20:46,429
one there's lots of work to be done with

476
00:20:44,600 --> 00:20:50,059
solidity still to make it more intuitive

477
00:20:46,429 --> 00:20:51,440
how it behaves and Explorer tools really

478
00:20:50,059 --> 00:20:53,840
need to be more careful about how they

479
00:20:51,440 --> 00:20:56,410
present data to people because it

480
00:20:53,840 --> 00:20:59,899
obviously enables some of these scams

481
00:20:56,410 --> 00:21:02,840
but I'm interested to hear to what other

482
00:20:59,900 --> 00:21:09,280
people think about that so that's my

483
00:21:02,840 --> 00:21:09,280
talk does anyone have any questions

484
00:21:11,440 --> 00:21:16,550
know so that's actually dictated by the

485
00:21:13,760 --> 00:21:21,290
miners so it's sort of a free-market

486
00:21:16,550 --> 00:21:22,730
system based on demand yeah yeah so so

487
00:21:21,290 --> 00:21:24,950
the miners are the ones who are actually

488
00:21:22,730 --> 00:21:27,020
confirming transactions to to this

489
00:21:24,950 --> 00:21:36,140
change so it fluctuates based on how

490
00:21:27,020 --> 00:21:37,580
many people are issuing transactions so

491
00:21:36,140 --> 00:21:40,400
because the way the contract was

492
00:21:37,580 --> 00:21:42,500
designed the the guy was actually able

493
00:21:40,400 --> 00:21:44,360
to withdraw his his few pennies from the

494
00:21:42,500 --> 00:21:46,220
from the contract but it could have been

495
00:21:44,360 --> 00:21:47,510
written slightly differently and he

496
00:21:46,220 --> 00:21:56,630
wouldn't have been able to do that at

497
00:21:47,510 --> 00:21:57,950
all all right well thank you for coming

498
00:21:56,630 --> 00:22:06,509
to my talk

499
00:21:57,950 --> 00:22:06,509
[Applause]

