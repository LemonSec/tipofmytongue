1
00:00:01,010 --> 00:00:06,629
so next up we have a pretty cool talk if

2
00:00:03,720 --> 00:00:09,050
you give a container capability and this

3
00:00:06,629 --> 00:00:11,790
is a tale of container exploitation by

4
00:00:09,050 --> 00:00:12,740
Vikas Kumar and Rob Glu please give them

5
00:00:11,790 --> 00:00:17,480
a warm welcome

6
00:00:12,740 --> 00:00:21,210
[Applause]

7
00:00:17,480 --> 00:00:24,560
all right hello everyone I'm Rob glue oh

8
00:00:21,210 --> 00:00:24,560
this not go on

9
00:00:33,430 --> 00:00:39,940
all right we're good there we go all

10
00:00:37,420 --> 00:00:42,400
right so I'm Rob glue this is Vikas

11
00:00:39,940 --> 00:00:45,190
Kumar this is our talk if you give a

12
00:00:42,400 --> 00:00:47,379
container capability we are basically

13
00:00:45,190 --> 00:00:49,180
going to be going over what makes a

14
00:00:47,380 --> 00:00:50,710
container container what security

15
00:00:49,180 --> 00:00:53,920
boundaries I put in place to keep things

16
00:00:50,710 --> 00:00:56,520
separated and where that tends to break

17
00:00:53,920 --> 00:00:59,199
down in actual container deployments

18
00:00:56,520 --> 00:01:01,720
just a quick blurb about us we are both

19
00:00:59,199 --> 00:01:04,300
security consultants at NCC group and we

20
00:01:01,720 --> 00:01:08,259
do hacker things but let's just get

21
00:01:04,300 --> 00:01:10,179
right into it so this is just sort of a

22
00:01:08,259 --> 00:01:13,500
high-level overview of what we will be

23
00:01:10,180 --> 00:01:15,070
going over for this talk we're gonna go

24
00:01:13,500 --> 00:01:17,770
basically we're gonna start with a

25
00:01:15,070 --> 00:01:20,080
process that is just running completely

26
00:01:17,770 --> 00:01:22,240
uncontained and we're gonna just start

27
00:01:20,080 --> 00:01:23,770
with sudo process one sudo process two

28
00:01:22,240 --> 00:01:26,320
and then add one layer at a time and

29
00:01:23,770 --> 00:01:32,830
sort of explain what protections get put

30
00:01:26,320 --> 00:01:34,660
in place at each at each layer we're

31
00:01:32,830 --> 00:01:35,830
gonna give a high-level summary of how

32
00:01:34,660 --> 00:01:37,330
these protections are actually

33
00:01:35,830 --> 00:01:40,119
implemented in real container solutions

34
00:01:37,330 --> 00:01:42,729
and where it sort of deviates from the

35
00:01:40,119 --> 00:01:44,020
ideal then we're gonna sort of outline

36
00:01:42,729 --> 00:01:45,909
how you check for these things if you're

37
00:01:44,020 --> 00:01:47,380
just a consultant or someone who just

38
00:01:45,909 --> 00:01:49,510
gets dropped in a container and you want

39
00:01:47,380 --> 00:01:50,949
to sort of figure out how you might be

40
00:01:49,510 --> 00:01:54,130
able to get out or mess with the hosts

41
00:01:50,950 --> 00:01:57,220
and other contain processes and finally

42
00:01:54,130 --> 00:01:58,658
we are going to release a tool to sort

43
00:01:57,220 --> 00:02:02,500
of help check with all the things that

44
00:01:58,659 --> 00:02:03,939
we go over so quick intro to what a

45
00:02:02,500 --> 00:02:06,549
container is in case you're not already

46
00:02:03,939 --> 00:02:09,399
aware containers are lightweight

47
00:02:06,549 --> 00:02:11,260
alternatives to virtual machines and so

48
00:02:09,399 --> 00:02:14,370
the idea is that you have a container

49
00:02:11,260 --> 00:02:16,298
running on the shared kernel with the

50
00:02:14,370 --> 00:02:18,730
shared kernel with the hosts and other

51
00:02:16,299 --> 00:02:20,230
containers on the machine so that you

52
00:02:18,730 --> 00:02:23,920
can sort of run different flavors of

53
00:02:20,230 --> 00:02:26,109
Linux on the same host and this is done

54
00:02:23,920 --> 00:02:28,510
over using like a full virtual machine

55
00:02:26,110 --> 00:02:30,700
because for a full VM you need to run an

56
00:02:28,510 --> 00:02:32,859
entire another kernel on top of your

57
00:02:30,700 --> 00:02:35,670
host kernel which obviously has a good

58
00:02:32,860 --> 00:02:38,320
chunk of overhead now sometimes

59
00:02:35,670 --> 00:02:41,708
containers are used as a security

60
00:02:38,320 --> 00:02:43,810
boundary so for if like for example your

61
00:02:41,709 --> 00:02:45,459
cloud provider and you want to have your

62
00:02:43,810 --> 00:02:46,930
customers run arbitrary code you might

63
00:02:45,459 --> 00:02:50,230
say let's just run it in a container

64
00:02:46,930 --> 00:02:53,200
because it'll be a lot faster and it'll

65
00:02:50,230 --> 00:02:55,390
be much better and finally these

66
00:02:53,200 --> 00:02:58,119
containers will allow your processes to

67
00:02:55,390 --> 00:03:01,298
run as route or what appears as route to

68
00:02:58,120 --> 00:03:05,230
them but still be heavily restricted and

69
00:03:01,299 --> 00:03:07,239
what they can do on the host so another

70
00:03:05,230 --> 00:03:08,738
quick summary of what these protections

71
00:03:07,239 --> 00:03:11,349
that were going to be going over are we

72
00:03:08,739 --> 00:03:12,670
have basically pivot route to make these

73
00:03:11,349 --> 00:03:15,189
processes think they have their own

74
00:03:12,670 --> 00:03:16,689
dedicated file system we have

75
00:03:15,189 --> 00:03:19,629
capabilities to limit what sis calls

76
00:03:16,689 --> 00:03:22,388
someone can make set comp to limit that

77
00:03:19,629 --> 00:03:24,310
even further and then we'll add

78
00:03:22,389 --> 00:03:27,099
namespaces which sort of restrict what

79
00:03:24,310 --> 00:03:28,870
resources a process can actually access

80
00:03:27,099 --> 00:03:32,260
and then there are other random

81
00:03:28,870 --> 00:03:41,280
protections that are not as significant

82
00:03:32,260 --> 00:03:44,590
but still don't hurt so for our sort of

83
00:03:41,280 --> 00:03:45,489
theoretical situation here we are sort

84
00:03:44,590 --> 00:03:49,090
of looking at this from the perspective

85
00:03:45,489 --> 00:03:51,819
of a cloud provider who wants to run you

86
00:03:49,090 --> 00:03:53,709
know customer code and you know these

87
00:03:51,819 --> 00:03:55,119
customers need to have all the access

88
00:03:53,709 --> 00:03:56,620
possible they need to have root access

89
00:03:55,120 --> 00:03:58,870
they need to touch all the system file

90
00:03:56,620 --> 00:04:01,359
systems they need to be the only process

91
00:03:58,870 --> 00:04:03,069
running on the host well from their

92
00:04:01,359 --> 00:04:04,780
perspective they need to perform some

93
00:04:03,069 --> 00:04:08,679
sis calls that may or may not require

94
00:04:04,780 --> 00:04:10,120
root privileges and our theoretical

95
00:04:08,680 --> 00:04:11,829
cloud provider is going to say we're

96
00:04:10,120 --> 00:04:14,500
gonna use containers to sort of keep

97
00:04:11,829 --> 00:04:15,939
these things separate obviously some of

98
00:04:14,500 --> 00:04:17,829
the customers might be malicious and so

99
00:04:15,939 --> 00:04:19,810
we want to make sure that there are

100
00:04:17,829 --> 00:04:21,159
enough protections to keep one customer

101
00:04:19,810 --> 00:04:25,509
from going in and stealing all the data

102
00:04:21,159 --> 00:04:27,789
belonging to other customers so this is

103
00:04:25,509 --> 00:04:30,009
just sort of a visual representation of

104
00:04:27,789 --> 00:04:33,099
what we're working with we have two of

105
00:04:30,009 --> 00:04:35,889
our tenants and they are you know both

106
00:04:33,099 --> 00:04:37,570
have access to system resources they

107
00:04:35,889 --> 00:04:42,430
have access to the kernel CPU memory

108
00:04:37,570 --> 00:04:44,039
network file system etc and so what

109
00:04:42,430 --> 00:04:46,840
we're going to start out with is our

110
00:04:44,039 --> 00:04:49,870
naive approach where we just run sudo

111
00:04:46,840 --> 00:04:52,719
tenant one sudo tenant two obviously

112
00:04:49,870 --> 00:04:54,130
this has tons of problems they the two

113
00:04:52,720 --> 00:04:56,440
tenants have access to each other's data

114
00:04:54,130 --> 00:04:58,599
they can kill each other's processes

115
00:04:56,440 --> 00:05:00,219
they can pee trace each other they can

116
00:04:58,599 --> 00:05:00,680
access the full house file system they

117
00:05:00,219 --> 00:05:04,639
can just

118
00:05:00,680 --> 00:05:07,820
generally wreak havoc and you know so

119
00:05:04,639 --> 00:05:09,050
this is the exact opposite of what you

120
00:05:07,820 --> 00:05:12,460
want to do here because all the problems

121
00:05:09,050 --> 00:05:14,600
we worry about are a problem here

122
00:05:12,460 --> 00:05:17,090
so the first step we're going to take is

123
00:05:14,600 --> 00:05:20,150
to make these processes think they have

124
00:05:17,090 --> 00:05:22,638
their own file system so we use pivot

125
00:05:20,150 --> 00:05:25,729
route for this which is sort of very

126
00:05:22,639 --> 00:05:28,310
similar to a CH route but it basically

127
00:05:25,729 --> 00:05:31,190
provides a more separation and so the

128
00:05:28,310 --> 00:05:35,449
intent of this is to create our custom

129
00:05:31,190 --> 00:05:38,840
route file directory that will put our

130
00:05:35,449 --> 00:05:40,780
container our containing process in so

131
00:05:38,840 --> 00:05:44,419
in the example on the right here we have

132
00:05:40,780 --> 00:05:47,960
you know an example at sea SSH config

133
00:05:44,419 --> 00:05:51,349
setup so on our host we create our slash

134
00:05:47,960 --> 00:05:54,500
new route and then we put a fake let's

135
00:05:51,349 --> 00:05:56,509
see SSH SSH config into it then we call

136
00:05:54,500 --> 00:05:59,360
pivot root and then according to the

137
00:05:56,509 --> 00:06:07,010
contain process it just sees that etsy

138
00:05:59,360 --> 00:06:08,630
SSH SSH config you know at root so what

139
00:06:07,010 --> 00:06:11,150
this perfection or what this protection

140
00:06:08,630 --> 00:06:12,590
does is it lets us convince our contain

141
00:06:11,150 --> 00:06:15,650
processes that they have their own

142
00:06:12,590 --> 00:06:18,560
dedicated filesystem so when we create

143
00:06:15,650 --> 00:06:20,299
this new file system we set up all the

144
00:06:18,560 --> 00:06:22,789
system files we provide everything that

145
00:06:20,300 --> 00:06:23,810
the process needs in order to do in

146
00:06:22,789 --> 00:06:27,530
order for it to look like it's like a

147
00:06:23,810 --> 00:06:31,370
full Linux system so when it comes to

148
00:06:27,530 --> 00:06:33,500
real containers they just do this they

149
00:06:31,370 --> 00:06:36,500
use pivot root and create a new mount

150
00:06:33,500 --> 00:06:37,639
namespace and they use pivot root over

151
00:06:36,500 --> 00:06:40,610
stay true because it doesn't have as

152
00:06:37,639 --> 00:06:42,199
many security guarantees and this combo

153
00:06:40,610 --> 00:06:46,820
basically just disassociates the process

154
00:06:42,199 --> 00:06:48,229
from the hosts file system so and then

155
00:06:46,820 --> 00:06:50,090
while it sets everything up the

156
00:06:48,229 --> 00:06:53,979
container solution will copy relevant

157
00:06:50,090 --> 00:06:57,380
files into this this new new file system

158
00:06:53,979 --> 00:07:00,169
so if you are a hacker just dropped into

159
00:06:57,380 --> 00:07:02,630
a container you want to look around for

160
00:07:00,169 --> 00:07:04,190
files that were explicitly included in

161
00:07:02,630 --> 00:07:05,990
the container solution that should not

162
00:07:04,190 --> 00:07:09,500
have been in so this is things like

163
00:07:05,990 --> 00:07:10,789
access tokens SSH keys you also want to

164
00:07:09,500 --> 00:07:14,120
take a look to see if there any devices

165
00:07:10,789 --> 00:07:16,219
mounted from the host so if they mount

166
00:07:14,120 --> 00:07:17,510
like a whole file system that contains

167
00:07:16,220 --> 00:07:20,600
some sensitive files you might be able

168
00:07:17,510 --> 00:07:22,190
to modify bad things on the host and

169
00:07:20,600 --> 00:07:24,199
another thing that you want to check for

170
00:07:22,190 --> 00:07:27,650
is if you're checking out a docker

171
00:07:24,199 --> 00:07:30,110
solution you want to look to see if the

172
00:07:27,650 --> 00:07:32,299
docker socket is available anywhere

173
00:07:30,110 --> 00:07:33,800
and so the docker socket is a UNIX

174
00:07:32,300 --> 00:07:35,780
domain socket that's used to manage the

175
00:07:33,800 --> 00:07:38,030
docker daemon on the host and

176
00:07:35,780 --> 00:07:39,650
occasionally someone who's creating a

177
00:07:38,030 --> 00:07:40,789
container and running their own software

178
00:07:39,650 --> 00:07:43,760
and it wants to have their software

179
00:07:40,790 --> 00:07:45,440
communicate with the docker daemon and

180
00:07:43,760 --> 00:07:47,240
obviously the most straightforward way

181
00:07:45,440 --> 00:07:50,630
is to just include this socket within

182
00:07:47,240 --> 00:07:53,120
your container but being that this is

183
00:07:50,630 --> 00:07:55,490
the domain socket that's meant to be

184
00:07:53,120 --> 00:07:57,470
used to manage docker itself there's a

185
00:07:55,490 --> 00:07:58,940
lot of very dangerous things you can do

186
00:07:57,470 --> 00:08:02,090
with it and it's essentially just free

187
00:07:58,940 --> 00:08:04,729
root on the host and so if a developer

188
00:08:02,090 --> 00:08:07,039
provides the docker the docker socket in

189
00:08:04,729 --> 00:08:11,330
your container you can just use it to

190
00:08:07,039 --> 00:08:13,760
get a free escape so while this is a

191
00:08:11,330 --> 00:08:16,219
good start and our different processes

192
00:08:13,760 --> 00:08:18,050
can actually run on the same machine and

193
00:08:16,220 --> 00:08:20,720
not stomp on each other's files

194
00:08:18,050 --> 00:08:23,510
it really doesn't stop malicious

195
00:08:20,720 --> 00:08:25,910
processes in any way our contain process

196
00:08:23,510 --> 00:08:28,130
can still make any syscall at once and

197
00:08:25,910 --> 00:08:30,979
so there are numerous ways for it to get

198
00:08:28,130 --> 00:08:33,380
direct access back on like the direct

199
00:08:30,979 --> 00:08:35,630
access to the hosts file system which is

200
00:08:33,380 --> 00:08:37,010
obviously bad because if they get access

201
00:08:35,630 --> 00:08:38,599
to the hosts file system they can modify

202
00:08:37,010 --> 00:08:42,020
files and escape again

203
00:08:38,599 --> 00:08:43,339
and so while things run it's there's

204
00:08:42,020 --> 00:08:45,980
still a lot of things that are contained

205
00:08:43,339 --> 00:08:46,970
process can do and so the next

206
00:08:45,980 --> 00:08:49,400
protection that were going to go over

207
00:08:46,970 --> 00:08:50,690
sort of limits what sis calls a

208
00:08:49,400 --> 00:08:54,620
contained process can make and can be

209
00:08:50,690 --> 00:09:00,350
used to sort of mitigate the effects I

210
00:08:54,620 --> 00:09:02,300
guess so in Linux the root users

211
00:09:00,350 --> 00:09:05,540
permissions have been split off into

212
00:09:02,300 --> 00:09:08,150
finer grained capabilities this includes

213
00:09:05,540 --> 00:09:10,790
like the ability to bind services to

214
00:09:08,150 --> 00:09:15,020
privileged ports or perform mounts for

215
00:09:10,790 --> 00:09:17,329
example this allows you to run processes

216
00:09:15,020 --> 00:09:19,310
that need some level of root access but

217
00:09:17,330 --> 00:09:22,070
not full root access for example you

218
00:09:19,310 --> 00:09:24,229
could run TCP dump as non-root by giving

219
00:09:22,070 --> 00:09:27,200
it the capabilities net wrong net admin

220
00:09:24,230 --> 00:09:29,540
which allow it to sniff packets etc

221
00:09:27,200 --> 00:09:31,670
so if you need if there's a process that

222
00:09:29,540 --> 00:09:33,589
supposedly needs route you should find

223
00:09:31,670 --> 00:09:35,870
out what specific capabilities it needs

224
00:09:33,590 --> 00:09:38,330
and drops everything else drop

225
00:09:35,870 --> 00:09:40,460
everything else it lets you have a root

226
00:09:38,330 --> 00:09:44,360
user or root process that can't actually

227
00:09:40,460 --> 00:09:45,470
do everything root can do so how does

228
00:09:44,360 --> 00:09:47,840
this work in practice

229
00:09:45,470 --> 00:09:50,030
a real container solutions drop many

230
00:09:47,840 --> 00:09:52,910
capabilities on like during the

231
00:09:50,030 --> 00:09:54,680
initialization of the container and the

232
00:09:52,910 --> 00:09:56,120
way this works is they drop them in a

233
00:09:54,680 --> 00:09:58,790
way where they cannot be regained

234
00:09:56,120 --> 00:10:00,350
through normal means specifically

235
00:09:58,790 --> 00:10:02,569
there's this thing called the capability

236
00:10:00,350 --> 00:10:04,940
bounding set which we'll get to like

237
00:10:02,570 --> 00:10:08,090
more detail later but basically what it

238
00:10:04,940 --> 00:10:10,190
does is it says these are the max amount

239
00:10:08,090 --> 00:10:12,980
of capabilities that this process could

240
00:10:10,190 --> 00:10:16,670
ever have and let's say you run a set

241
00:10:12,980 --> 00:10:18,200
UID root binary you won't be able to get

242
00:10:16,670 --> 00:10:19,969
more capabilities than what are in your

243
00:10:18,200 --> 00:10:23,420
bounding set even though it's a set UID

244
00:10:19,970 --> 00:10:26,090
root binary um sometimes in container

245
00:10:23,420 --> 00:10:27,829
solutions like dangerous capabilities

246
00:10:26,090 --> 00:10:30,470
are granted such as decreed search

247
00:10:27,830 --> 00:10:32,570
sysadmin and others listed these are

248
00:10:30,470 --> 00:10:34,520
essentially free escapes in that they

249
00:10:32,570 --> 00:10:37,010
let you call dangerous sis calls that

250
00:10:34,520 --> 00:10:39,260
let you affect the hosts and game code

251
00:10:37,010 --> 00:10:40,819
execution or file access and there's

252
00:10:39,260 --> 00:10:42,260
other dangerous capabilities like net

253
00:10:40,820 --> 00:10:44,930
wrong net admin while they don't

254
00:10:42,260 --> 00:10:48,050
directly give you a container escape

255
00:10:44,930 --> 00:10:50,900
they let you perform network attacks and

256
00:10:48,050 --> 00:10:52,819
lastly um there's this notion of

257
00:10:50,900 --> 00:10:54,650
privileged containers such as in docker

258
00:10:52,820 --> 00:10:56,180
which essentially gives a container all

259
00:10:54,650 --> 00:10:59,470
the capabilities and these are trivial

260
00:10:56,180 --> 00:11:01,790
to escape and you shouldn't do this so

261
00:10:59,470 --> 00:11:03,920
let's walk through an example of how we

262
00:11:01,790 --> 00:11:06,140
can use one of these capabilities to

263
00:11:03,920 --> 00:11:08,420
escape a container let's say we're given

264
00:11:06,140 --> 00:11:10,130
the dock read search capability dock

265
00:11:08,420 --> 00:11:13,069
read search is a capability that lets

266
00:11:10,130 --> 00:11:15,230
you run the syscall open by handle at

267
00:11:13,070 --> 00:11:17,090
which lets you access files or

268
00:11:15,230 --> 00:11:19,340
directories by inode number instead of

269
00:11:17,090 --> 00:11:21,770
path because we're in a pivot root we

270
00:11:19,340 --> 00:11:24,440
can't actually see the hosts um root

271
00:11:21,770 --> 00:11:27,230
directory but we know it's ID no number

272
00:11:24,440 --> 00:11:29,510
is 0-2 so we can use the open by handle

273
00:11:27,230 --> 00:11:33,889
at syscall to get a file descriptor to

274
00:11:29,510 --> 00:11:36,319
the the root directory on the host and

275
00:11:33,889 --> 00:11:38,269
opened my hand a lot syscall basically

276
00:11:36,319 --> 00:11:39,920
takes three arguments first is a file

277
00:11:38,269 --> 00:11:43,160
descriptor to something on the target

278
00:11:39,920 --> 00:11:44,599
file system and the reason you need this

279
00:11:43,160 --> 00:11:46,579
is if you're referencing something by

280
00:11:44,600 --> 00:11:48,109
inode number you don't necessarily know

281
00:11:46,579 --> 00:11:49,638
which file system it's referring to

282
00:11:48,109 --> 00:11:51,410
because if you have multiple file

283
00:11:49,639 --> 00:11:54,019
systems many things should have I know

284
00:11:51,410 --> 00:11:55,459
number zero two so you have some file

285
00:11:54,019 --> 00:11:57,739
descriptor two something you know as

286
00:11:55,459 --> 00:11:59,628
from that file system and then you have

287
00:11:57,739 --> 00:12:01,579
the second argument is basically a

288
00:11:59,629 --> 00:12:03,859
struct that's a wrapper around the inode

289
00:12:01,579 --> 00:12:05,719
number and the third argument are like

290
00:12:03,859 --> 00:12:07,399
flags which is how you deal with weird

291
00:12:05,720 --> 00:12:09,769
cases such as your if you're trying to

292
00:12:07,399 --> 00:12:12,980
get a handle to something that's a

293
00:12:09,769 --> 00:12:15,259
symbolic link or something weird so once

294
00:12:12,980 --> 00:12:16,939
you call this open by hand a lot you

295
00:12:15,259 --> 00:12:19,339
have a file descriptor to the root

296
00:12:16,939 --> 00:12:20,839
directory of the host and you can just

297
00:12:19,339 --> 00:12:25,160
see eight root into it and now you have

298
00:12:20,839 --> 00:12:26,480
full file system access so let's say

299
00:12:25,160 --> 00:12:28,249
you're dropped in a mystery container

300
00:12:26,480 --> 00:12:30,799
how do you find what capabilities you

301
00:12:28,249 --> 00:12:33,499
have you can check what capabilities you

302
00:12:30,799 --> 00:12:36,108
have with the status file in like proc

303
00:12:33,499 --> 00:12:38,299
one status or proc self status this will

304
00:12:36,109 --> 00:12:40,179
have a numerical representation of a

305
00:12:38,299 --> 00:12:43,339
number of different capability sets and

306
00:12:40,179 --> 00:12:45,230
the two you really care about our cap F

307
00:12:43,339 --> 00:12:47,059
which is the effective capabilities and

308
00:12:45,230 --> 00:12:49,610
cap B and D which is the bounding set of

309
00:12:47,059 --> 00:12:51,529
capabilities the effective capabilities

310
00:12:49,610 --> 00:12:53,360
are the capabilities your process has

311
00:12:51,529 --> 00:12:55,850
right now it's what you can currently do

312
00:12:53,360 --> 00:12:57,709
and the bounding set is like the maximum

313
00:12:55,850 --> 00:12:59,929
capabilities the process could have

314
00:12:57,709 --> 00:13:02,508
through like normal privilege escalation

315
00:12:59,929 --> 00:13:07,899
means such as like running a set UID

316
00:13:02,509 --> 00:13:10,910
binary or a set cap binary so we've

317
00:13:07,899 --> 00:13:12,889
successfully limited what the root user

318
00:13:10,910 --> 00:13:16,910
can do by dropping a number of dangerous

319
00:13:12,889 --> 00:13:19,309
capabilities but let's say one of our

320
00:13:16,910 --> 00:13:20,749
tenants needs something that's just

321
00:13:19,309 --> 00:13:22,699
admin can do they need to be able to

322
00:13:20,749 --> 00:13:24,439
mount something in specific but we don't

323
00:13:22,699 --> 00:13:26,719
want to give them all of society because

324
00:13:24,439 --> 00:13:28,699
sysadmin is a capability that gates a

325
00:13:26,720 --> 00:13:31,879
large number of sis calls it grants too

326
00:13:28,699 --> 00:13:34,608
much power so we can use set comp to

327
00:13:31,879 --> 00:13:36,199
limit the syscalls even further this

328
00:13:34,609 --> 00:13:38,419
allows you to block sis calls on a

329
00:13:36,199 --> 00:13:40,519
persist call basis and you can also

330
00:13:38,419 --> 00:13:43,579
block sis calls based on the arguments

331
00:13:40,519 --> 00:13:45,019
passed to that sis call this both can

332
00:13:43,579 --> 00:13:46,758
let you like grant dangerous

333
00:13:45,019 --> 00:13:47,450
capabilities and limit what they can do

334
00:13:46,759 --> 00:13:49,400
but all

335
00:13:47,450 --> 00:13:51,230
so act as a second line of defense if

336
00:13:49,400 --> 00:13:54,680
you somehow escalate privileges and gain

337
00:13:51,230 --> 00:13:55,250
additional capabilities so how does this

338
00:13:54,680 --> 00:13:57,979
work

339
00:13:55,250 --> 00:14:01,220
at a low level this uses the pr CTL

340
00:13:57,980 --> 00:14:03,830
assist call which has like two relevant

341
00:14:01,220 --> 00:14:06,320
modes one is the strict mode which

342
00:14:03,830 --> 00:14:08,840
creates a set cop sandbox where the

343
00:14:06,320 --> 00:14:12,260
thread can only call read write and exit

344
00:14:08,840 --> 00:14:14,090
on this this is like a very good sandbox

345
00:14:12,260 --> 00:14:16,069
but this isn't what's not this is not

346
00:14:14,090 --> 00:14:17,780
what's normally used what's normally

347
00:14:16,070 --> 00:14:20,630
used is second mode filter which allows

348
00:14:17,780 --> 00:14:22,970
you to create a Berkley packet filter to

349
00:14:20,630 --> 00:14:25,310
restrict sis calls and arguments the SIS

350
00:14:22,970 --> 00:14:27,860
calls so what's the birth what's a

351
00:14:25,310 --> 00:14:31,670
Berkley packet filter a Berkley packet

352
00:14:27,860 --> 00:14:33,800
filter is basically VM inside the Linux

353
00:14:31,670 --> 00:14:35,870
kernel that runs this weird bytecode and

354
00:14:33,800 --> 00:14:38,300
it has like a number of uses and that

355
00:14:35,870 --> 00:14:40,970
could basically be its own talk but in

356
00:14:38,300 --> 00:14:43,189
short it's one of the things that

357
00:14:40,970 --> 00:14:45,830
enables is second PPF you can create

358
00:14:43,190 --> 00:14:47,450
bytecode that filters syscalls based on

359
00:14:45,830 --> 00:14:50,150
the SIS call or the arguments of the sis

360
00:14:47,450 --> 00:14:52,040
call all of this is wrapped by Lib set

361
00:14:50,150 --> 00:14:54,829
comp which allows you to create second

362
00:14:52,040 --> 00:14:59,839
policies in like a more human readable

363
00:14:54,830 --> 00:15:04,280
format and like human configurable so

364
00:14:59,840 --> 00:15:06,920
how does this work in practice a lot of

365
00:15:04,280 --> 00:15:09,170
container solutions will have a default

366
00:15:06,920 --> 00:15:12,380
set common profile that may or may not

367
00:15:09,170 --> 00:15:15,439
be actually useful for example Dockers

368
00:15:12,380 --> 00:15:18,110
defaults account policy um automatically

369
00:15:15,440 --> 00:15:21,260
grants exceptions if a capability is

370
00:15:18,110 --> 00:15:23,090
granted to the process for example if

371
00:15:21,260 --> 00:15:26,000
your if you gain the doc read search

372
00:15:23,090 --> 00:15:28,310
capability the second profile will no

373
00:15:26,000 --> 00:15:30,350
longer block the open by handle at Cisco

374
00:15:28,310 --> 00:15:32,989
which kind of defeats the purpose of

375
00:15:30,350 --> 00:15:36,290
being defense-in-depth the logic behind

376
00:15:32,990 --> 00:15:38,420
it is the doctor developers were like oh

377
00:15:36,290 --> 00:15:40,430
if they're granted this syscall we want

378
00:15:38,420 --> 00:15:42,770
it to just work by default we don't want

379
00:15:40,430 --> 00:15:44,780
like to have users struggle or

380
00:15:42,770 --> 00:15:48,170
developers struggle with creating custom

381
00:15:44,780 --> 00:15:49,579
set comp profiles but sometimes when

382
00:15:48,170 --> 00:15:50,750
you're trying to do things set comp will

383
00:15:49,580 --> 00:15:53,240
block what you're trying to do is so

384
00:15:50,750 --> 00:15:57,380
developers will write a bad custom

385
00:15:53,240 --> 00:15:58,970
profile or just turn offs comp so how do

386
00:15:57,380 --> 00:16:01,040
you check your set comp profile if you

387
00:15:58,970 --> 00:16:02,870
dropped a black box into a container

388
00:16:01,040 --> 00:16:04,670
this is difficult one thing you can do

389
00:16:02,870 --> 00:16:06,290
is just enumerate all your Siskel's and

390
00:16:04,670 --> 00:16:09,229
just like do them and see what gets

391
00:16:06,290 --> 00:16:11,540
blocked this will tell you if like a sis

392
00:16:09,230 --> 00:16:13,579
call is explicitly blocked or not but

393
00:16:11,540 --> 00:16:16,130
you won't be able to necessarily find

394
00:16:13,579 --> 00:16:18,349
rules that block sis calls based on the

395
00:16:16,130 --> 00:16:20,360
arguments because bhoot forcing all the

396
00:16:18,350 --> 00:16:22,970
potential arguments that are allowed or

397
00:16:20,360 --> 00:16:24,949
not it's difficult so ideally if you're

398
00:16:22,970 --> 00:16:27,230
pen testing a container solution you

399
00:16:24,949 --> 00:16:30,920
just ask your client really nicely to

400
00:16:27,230 --> 00:16:33,050
give you the suck-up profile another way

401
00:16:30,920 --> 00:16:34,519
you can like add defense-in-depth and

402
00:16:33,050 --> 00:16:36,560
limit what the root user can do is

403
00:16:34,519 --> 00:16:39,470
mandatory access controls this includes

404
00:16:36,560 --> 00:16:41,810
selinux or a Parmer these are both linux

405
00:16:39,470 --> 00:16:44,839
security modules and they restrict

406
00:16:41,810 --> 00:16:46,579
resource access by applying security

407
00:16:44,839 --> 00:16:50,480
context applications or processes

408
00:16:46,579 --> 00:16:53,060
programs and they can limit like very

409
00:16:50,480 --> 00:16:54,920
narrowly what files on like even the

410
00:16:53,060 --> 00:16:57,439
container file system a given process

411
00:16:54,920 --> 00:16:59,750
can access in addition like a Parmer

412
00:16:57,440 --> 00:17:02,180
could block certain or all mounts it

413
00:16:59,750 --> 00:17:04,819
could deny network access and it can

414
00:17:02,180 --> 00:17:07,069
even like redundantly restrict

415
00:17:04,819 --> 00:17:09,918
capabilities so even if a capability is

416
00:17:07,069 --> 00:17:11,990
provided to a container and app armor on

417
00:17:09,919 --> 00:17:17,089
profile could be like the backup and

418
00:17:11,990 --> 00:17:19,309
block the capability so in practice a

419
00:17:17,089 --> 00:17:21,829
lot of the times SELinux or app armor

420
00:17:19,309 --> 00:17:24,470
are not enabled it depends on kernel

421
00:17:21,829 --> 00:17:26,839
version like your container runtime

422
00:17:24,470 --> 00:17:29,299
version and there's a lot of

423
00:17:26,839 --> 00:17:32,090
inconsistencies which will cause su-

424
00:17:29,299 --> 00:17:33,710
drop Armour to just not be supported you

425
00:17:32,090 --> 00:17:36,379
can check your app armor profile from

426
00:17:33,710 --> 00:17:39,049
within your container by looking at this

427
00:17:36,380 --> 00:17:41,330
on outer current file within the proc

428
00:17:39,049 --> 00:17:43,460
file system you can also check your

429
00:17:41,330 --> 00:17:46,549
selinux profile dynamically with LS

430
00:17:43,460 --> 00:17:48,830
Capital Z or outside the container you

431
00:17:46,549 --> 00:17:54,200
could look at the selinux rule set what

432
00:17:48,830 --> 00:17:57,379
the shown path so we've greatly limited

433
00:17:54,200 --> 00:17:59,059
what the root user can do we've limited

434
00:17:57,380 --> 00:18:01,340
their capabilities what's this calls

435
00:17:59,059 --> 00:18:04,040
they can perform but there's still a few

436
00:18:01,340 --> 00:18:06,770
issues here um one is that they have

437
00:18:04,040 --> 00:18:08,270
unrestricted access to consume CPU and

438
00:18:06,770 --> 00:18:09,770
memory resources potentially be

439
00:18:08,270 --> 00:18:13,280
performing denial of service of other

440
00:18:09,770 --> 00:18:14,000
processes on the same host also because

441
00:18:13,280 --> 00:18:15,950
like

442
00:18:14,000 --> 00:18:18,740
Hauk and other system files are mounted

443
00:18:15,950 --> 00:18:21,260
or put into our pivot root fake file

444
00:18:18,740 --> 00:18:26,090
system it's possible that we could still

445
00:18:21,260 --> 00:18:29,390
influence or see or kill other like

446
00:18:26,090 --> 00:18:31,129
tenant processes in addition there's not

447
00:18:29,390 --> 00:18:33,680
really a restriction on network access

448
00:18:31,130 --> 00:18:40,160
both to the like host network interface

449
00:18:33,680 --> 00:18:41,060
and to other containers services so the

450
00:18:40,160 --> 00:18:43,100
next protection we're going to be

451
00:18:41,060 --> 00:18:44,810
putting in place will limit what

452
00:18:43,100 --> 00:18:47,360
resources are contained process can

453
00:18:44,810 --> 00:18:49,820
access so this will keep our contained

454
00:18:47,360 --> 00:18:52,250
process from interacting with the host

455
00:18:49,820 --> 00:18:54,820
processes or processes in other

456
00:18:52,250 --> 00:18:58,040
containers and this is done through

457
00:18:54,820 --> 00:18:59,689
namespaces which is a feature exposed by

458
00:18:58,040 --> 00:19:02,720
the Linux kernel that allow you to sort

459
00:18:59,690 --> 00:19:05,030
of put processes in various groups that

460
00:19:02,720 --> 00:19:07,580
will only let them access resources that

461
00:19:05,030 --> 00:19:10,490
exist in that group so for example a

462
00:19:07,580 --> 00:19:12,439
process namespace will only allow your

463
00:19:10,490 --> 00:19:14,630
if your process is put in a process name

464
00:19:12,440 --> 00:19:16,700
face you can only see other processes

465
00:19:14,630 --> 00:19:18,770
that exist within the same namespace and

466
00:19:16,700 --> 00:19:20,150
so this is what allows our contained

467
00:19:18,770 --> 00:19:23,330
process to think it's the only thing

468
00:19:20,150 --> 00:19:27,950
running on the system when it's actually

469
00:19:23,330 --> 00:19:29,810
not and so there's other namespaces that

470
00:19:27,950 --> 00:19:31,460
allow this sort of segmentation so for

471
00:19:29,810 --> 00:19:33,440
example network namespaces will only

472
00:19:31,460 --> 00:19:36,230
allow your process to access network

473
00:19:33,440 --> 00:19:38,660
interfaces that are in its own namespace

474
00:19:36,230 --> 00:19:40,520
and so this is what allows you to keep a

475
00:19:38,660 --> 00:19:44,870
contained process from interacting with

476
00:19:40,520 --> 00:19:46,520
the host machines network interface so

477
00:19:44,870 --> 00:19:49,540
you just like create a custom interface

478
00:19:46,520 --> 00:19:51,590
for your containers and you only allow

479
00:19:49,540 --> 00:19:53,720
processes in that network namespace to

480
00:19:51,590 --> 00:19:56,270
access that one interface and then you

481
00:19:53,720 --> 00:19:57,410
can have pretty good control over the

482
00:19:56,270 --> 00:19:59,420
traffic that goes through it

483
00:19:57,410 --> 00:20:00,890
there's also mountain namespaces which

484
00:19:59,420 --> 00:20:03,020
only allow you to see devices that are

485
00:20:00,890 --> 00:20:05,780
mounted in that namespace and this is

486
00:20:03,020 --> 00:20:08,120
what's combined with our pivot route to

487
00:20:05,780 --> 00:20:11,090
provide a separation from the hosts file

488
00:20:08,120 --> 00:20:13,040
system there are also user name spaces

489
00:20:11,090 --> 00:20:15,830
which are a bit more complex that we'll

490
00:20:13,040 --> 00:20:18,129
go over on the next slide here but it's

491
00:20:15,830 --> 00:20:20,240
worth noting that for all of the

492
00:20:18,130 --> 00:20:22,370
capabilities the numerated here if you

493
00:20:20,240 --> 00:20:23,510
are granted enough capabilities or sorry

494
00:20:22,370 --> 00:20:25,310
for each of the namespaces explained

495
00:20:23,510 --> 00:20:26,840
here if you are granted the right

496
00:20:25,310 --> 00:20:27,809
capabilities you can just get around

497
00:20:26,840 --> 00:20:29,820
everything

498
00:20:27,809 --> 00:20:31,320
so like processed namespaces Network

499
00:20:29,820 --> 00:20:32,609
namespaces amount namespaces don't mean

500
00:20:31,320 --> 00:20:35,789
anything if you grant the contain

501
00:20:32,609 --> 00:20:38,249
process too much privileged user names

502
00:20:35,789 --> 00:20:39,959
places however are more complicated than

503
00:20:38,249 --> 00:20:43,289
the other namespaces that we went over

504
00:20:39,959 --> 00:20:44,849
so not only do they just only allow

505
00:20:43,289 --> 00:20:47,729
users to interact with other users in

506
00:20:44,849 --> 00:20:49,499
their namespace it also drops a large

507
00:20:47,729 --> 00:20:51,629
number of capabilities and heavily

508
00:20:49,499 --> 00:20:55,159
restricts what sort of sis calls you can

509
00:20:51,629 --> 00:20:58,759
make and how you can make them so the

510
00:20:55,159 --> 00:21:01,499
goal of this is to like once you add

511
00:20:58,759 --> 00:21:03,719
process to a user namespace you can only

512
00:21:01,499 --> 00:21:06,299
exercise capabilities on resources that

513
00:21:03,719 --> 00:21:10,139
are explicitly in one of your resource

514
00:21:06,299 --> 00:21:12,509
namespaces and so for example if you are

515
00:21:10,139 --> 00:21:15,029
in a network namespace you are only

516
00:21:12,509 --> 00:21:16,859
allowed to exercise your net raw

517
00:21:15,029 --> 00:21:20,579
capability on your network two

518
00:21:16,859 --> 00:21:24,149
namespaces it also drops any

519
00:21:20,579 --> 00:21:25,889
capabilities which which are used with

520
00:21:24,149 --> 00:21:28,619
resources that are not associated with

521
00:21:25,889 --> 00:21:30,978
any namespace so for example sister IO

522
00:21:28,619 --> 00:21:34,408
which lets you directly mess with your

523
00:21:30,979 --> 00:21:36,029
the memory of the machine is just

524
00:21:34,409 --> 00:21:37,859
blocked altogether because there's no

525
00:21:36,029 --> 00:21:40,909
namespace which manages the resources

526
00:21:37,859 --> 00:21:44,309
that that capability grants access to

527
00:21:40,909 --> 00:21:48,119
and then finally user namespaces do what

528
00:21:44,309 --> 00:21:49,649
the name suggests in that map it lets

529
00:21:48,119 --> 00:21:53,699
processes running in the user name space

530
00:21:49,649 --> 00:21:54,988
only see you know makes it let's the

531
00:21:53,700 --> 00:21:56,639
process think that it's running it as

532
00:21:54,989 --> 00:21:59,519
UID zero and is the only user on the

533
00:21:56,639 --> 00:22:02,099
machine while outside of that user

534
00:21:59,519 --> 00:22:04,079
namespace the host machine is aware that

535
00:22:02,099 --> 00:22:08,279
it's running as like a higher privileged

536
00:22:04,079 --> 00:22:10,709
user sorry a higher user ID user and it

537
00:22:08,279 --> 00:22:14,249
will perform appropriate security checks

538
00:22:10,709 --> 00:22:17,159
on that so when it comes to real

539
00:22:14,249 --> 00:22:20,339
containers the best approach would be to

540
00:22:17,159 --> 00:22:23,129
just turn on all the namespaces however

541
00:22:20,339 --> 00:22:26,039
when it comes to actual how things are

542
00:22:23,129 --> 00:22:28,468
actually done the container solution may

543
00:22:26,039 --> 00:22:30,509
or may not turn on all the namespaces so

544
00:22:28,469 --> 00:22:34,409
for example docker by default doesn't

545
00:22:30,509 --> 00:22:35,399
have user name spaces enabled and as you

546
00:22:34,409 --> 00:22:36,629
know we spent all that time talking

547
00:22:35,399 --> 00:22:38,609
about all the protections that user

548
00:22:36,629 --> 00:22:40,830
namespaces provide and it you know is

549
00:22:38,609 --> 00:22:42,600
able to provide protections

550
00:22:40,830 --> 00:22:43,830
you grant too many capabilities it

551
00:22:42,600 --> 00:22:47,760
doesn't let you touch anything outside

552
00:22:43,830 --> 00:22:49,289
of your your namespaces docker just

553
00:22:47,760 --> 00:22:50,940
doesn't have it enabled by default and

554
00:22:49,289 --> 00:22:53,730
it can be kind of a pain to get set up

555
00:22:50,940 --> 00:22:55,620
if you are a developer so as a result

556
00:22:53,730 --> 00:22:58,590
developers may or may not actually do

557
00:22:55,620 --> 00:22:59,729
this and so when you are dropped in a

558
00:22:58,590 --> 00:23:01,549
container you want to sort of poke

559
00:22:59,730 --> 00:23:04,320
around and see what namespaces you have

560
00:23:01,549 --> 00:23:05,850
so another alternative for using like a

561
00:23:04,320 --> 00:23:07,139
user name space would be a developer

562
00:23:05,850 --> 00:23:09,389
might just run the process in the

563
00:23:07,140 --> 00:23:12,870
container as an unprivileged user but if

564
00:23:09,390 --> 00:23:14,639
the user gets UID 0 somehow so either

565
00:23:12,870 --> 00:23:17,010
through running a set UID binary or

566
00:23:14,639 --> 00:23:18,840
something along those lines they would

567
00:23:17,010 --> 00:23:20,669
be running as the actual root user and

568
00:23:18,840 --> 00:23:26,490
have all the capabilities that were

569
00:23:20,669 --> 00:23:28,230
granted to that contained process but if

570
00:23:26,490 --> 00:23:30,539
they do ask like to UID 0 they'd still

571
00:23:28,230 --> 00:23:33,899
be restricted by capabilities set comma

572
00:23:30,539 --> 00:23:36,960
mandatory access controls so now is a

573
00:23:33,899 --> 00:23:38,219
good time to sort of look at the what

574
00:23:36,960 --> 00:23:41,370
you can access through the network if

575
00:23:38,220 --> 00:23:43,230
your contained process so docker by

576
00:23:41,370 --> 00:23:45,658
default has all of the containers on a

577
00:23:43,230 --> 00:23:47,789
shared namespace so the containers can

578
00:23:45,659 --> 00:23:49,110
all talk to each other and if they have

579
00:23:47,789 --> 00:23:51,570
sufficient capabilities they can perform

580
00:23:49,110 --> 00:23:54,330
network attacks on each other so for

581
00:23:51,570 --> 00:23:56,519
example doctor grants net raw by default

582
00:23:54,330 --> 00:23:57,980
and so if you're on a default container

583
00:23:56,519 --> 00:24:00,450
configuration you can just sort of

584
00:23:57,980 --> 00:24:02,370
perform these some network attacks on

585
00:24:00,450 --> 00:24:04,500
the other containers that are running on

586
00:24:02,370 --> 00:24:06,330
the host if there's no name spacing you

587
00:24:04,500 --> 00:24:09,809
can just attack the host directly for

588
00:24:06,330 --> 00:24:11,428
those capabilities but you also should

589
00:24:09,809 --> 00:24:13,559
consider what your container can

590
00:24:11,429 --> 00:24:15,539
actually access on the local network so

591
00:24:13,559 --> 00:24:16,590
if you have other internal resources

592
00:24:15,539 --> 00:24:18,658
that are accessible from the server

593
00:24:16,590 --> 00:24:23,250
running the containers you can still

594
00:24:18,659 --> 00:24:25,559
dial out and hit all of those so when it

595
00:24:23,250 --> 00:24:28,740
comes to checking for all of these

596
00:24:25,559 --> 00:24:31,529
namespaces it's generally there's you

597
00:24:28,740 --> 00:24:33,120
can quickly heuristic Li check and guess

598
00:24:31,529 --> 00:24:34,590
whether you're in a namespace or not so

599
00:24:33,120 --> 00:24:36,479
for process name spacing you can just

600
00:24:34,590 --> 00:24:38,039
look in the proc directory and if you

601
00:24:36,480 --> 00:24:39,029
see a whole bunch of processes that look

602
00:24:38,039 --> 00:24:41,370
like they're running on the host you

603
00:24:39,029 --> 00:24:43,769
know process name spacing is not enabled

604
00:24:41,370 --> 00:24:45,299
and you can you know collect data about

605
00:24:43,769 --> 00:24:46,950
those processes that are running in the

606
00:24:45,299 --> 00:24:48,389
host so you can get like what

607
00:24:46,950 --> 00:24:50,730
command-line arguments are passed to

608
00:24:48,389 --> 00:24:53,520
them and that sort of thing the

609
00:24:50,730 --> 00:24:54,550
scientific way to check this is to run l

610
00:24:53,520 --> 00:24:58,120
stat on

611
00:24:54,550 --> 00:24:59,260
Proc 1ns PID and if you get a device

612
00:24:58,120 --> 00:24:59,889
number greater than four it means it's

613
00:24:59,260 --> 00:25:02,920
namespaced

614
00:24:59,890 --> 00:25:04,930
for use the namespaces you can open up a

615
00:25:02,920 --> 00:25:08,050
file which lists all the mappings that

616
00:25:04,930 --> 00:25:10,510
are used for your user name space so in

617
00:25:08,050 --> 00:25:12,790
the example here it maps user ID 0 to

618
00:25:10,510 --> 00:25:15,220
the user ID 0 which means there's no

619
00:25:12,790 --> 00:25:17,080
name spacing enabled if it is enabled

620
00:25:15,220 --> 00:25:20,140
you would see for example that the user

621
00:25:17,080 --> 00:25:23,110
ID 0 is mapped to some high number UID

622
00:25:20,140 --> 00:25:25,450
and that would be the UID if the process

623
00:25:23,110 --> 00:25:28,149
is viewed from outside of the user name

624
00:25:25,450 --> 00:25:29,650
space for network name spacing you can

625
00:25:28,150 --> 00:25:32,530
similarly do a heuristic where you just

626
00:25:29,650 --> 00:25:34,570
do ifconfig or look at this class net

627
00:25:32,530 --> 00:25:37,450
and just see if any of the interfaces

628
00:25:34,570 --> 00:25:40,330
look like it's probably on the host you

629
00:25:37,450 --> 00:25:41,950
can also L stat prop 1 and s net and if

630
00:25:40,330 --> 00:25:44,470
the device number is greater than 4

631
00:25:41,950 --> 00:25:46,120
you're in a network namespace mount

632
00:25:44,470 --> 00:25:48,370
namespaces you can here asically look at

633
00:25:46,120 --> 00:25:51,149
proc self amounts to see what devices

634
00:25:48,370 --> 00:25:53,770
are mounted from the perspective of your

635
00:25:51,150 --> 00:25:58,540
process and then you can also do the

636
00:25:53,770 --> 00:26:00,430
lsat trick on that as well so now that

637
00:25:58,540 --> 00:26:02,080
we have all these namespaces we have our

638
00:26:00,430 --> 00:26:04,660
pivot root we drop capabilities we

639
00:26:02,080 --> 00:26:08,290
implemented of SELinux profile or a

640
00:26:04,660 --> 00:26:12,160
primer profile and it's almost there and

641
00:26:08,290 --> 00:26:14,710
we more or less have our contained

642
00:26:12,160 --> 00:26:16,330
process and our contained process can't

643
00:26:14,710 --> 00:26:18,310
really hit much outside of its container

644
00:26:16,330 --> 00:26:20,980
and it's fairly limited in how it can

645
00:26:18,310 --> 00:26:22,389
attack the host so the next thing we're

646
00:26:20,980 --> 00:26:25,660
going to go over is sort of how you

647
00:26:22,390 --> 00:26:27,610
limit denial of service attacks because

648
00:26:25,660 --> 00:26:30,520
we don't want one process to just chew

649
00:26:27,610 --> 00:26:32,860
up all of the resources and sort of

650
00:26:30,520 --> 00:26:35,680
choke out the other processes so this is

651
00:26:32,860 --> 00:26:39,219
done through C groups it's a system file

652
00:26:35,680 --> 00:26:41,050
system and so you can just go in and you

653
00:26:39,220 --> 00:26:44,890
know look at how much resources you're

654
00:26:41,050 --> 00:26:46,990
allocated one thing that is sort of

655
00:26:44,890 --> 00:26:48,880
counterintuitive is C groups also limits

656
00:26:46,990 --> 00:26:53,400
what character and block devices you can

657
00:26:48,880 --> 00:26:57,700
access and so you if you you set up are

658
00:26:53,400 --> 00:27:01,390
like a C Group device whitelist so that

659
00:26:57,700 --> 00:27:02,950
any process in the C groups in the C

660
00:27:01,390 --> 00:27:04,450
group would only be able to access like

661
00:27:02,950 --> 00:27:06,910
Devi random and Devon all or something

662
00:27:04,450 --> 00:27:08,200
like that and it would it's a second

663
00:27:06,910 --> 00:27:11,740
line of defense if

664
00:27:08,200 --> 00:27:15,970
how they get a handle to dev SDA you can

665
00:27:11,740 --> 00:27:17,260
just yeah so when it comes to checking

666
00:27:15,970 --> 00:27:20,049
this out if you're dropped into a

667
00:27:17,260 --> 00:27:22,450
container you can just read files that

668
00:27:20,049 --> 00:27:25,090
will tell you whether you have your CPU

669
00:27:22,450 --> 00:27:26,470
shares limited you can also read a file

670
00:27:25,090 --> 00:27:28,240
that'll tell you your maximum memory

671
00:27:26,470 --> 00:27:31,210
that you're allowed to use and if it's

672
00:27:28,240 --> 00:27:33,070
some absurd number like 64 gigabytes you

673
00:27:31,210 --> 00:27:34,960
can probably safely assume that you're

674
00:27:33,070 --> 00:27:36,189
not limited at all and you can just

675
00:27:34,960 --> 00:27:38,440
choke out anything else that's running

676
00:27:36,190 --> 00:27:40,960
on the machine when it comes to the

677
00:27:38,440 --> 00:27:44,620
device whitelist you can go through the

678
00:27:40,960 --> 00:27:46,929
devices that list file and it will list

679
00:27:44,620 --> 00:27:49,090
like a what it's a big list of devices

680
00:27:46,929 --> 00:27:54,190
that are a device type a major number

681
00:27:49,090 --> 00:27:55,840
and a minor number and this is you can

682
00:27:54,190 --> 00:27:57,850
basically use a reference table to

683
00:27:55,840 --> 00:28:01,269
figure out what type of devices points

684
00:27:57,850 --> 00:28:03,699
to so for example Devi random has a

685
00:28:01,269 --> 00:28:05,350
specific you know it's a character

686
00:28:03,700 --> 00:28:07,240
device and a specific major number and a

687
00:28:05,350 --> 00:28:09,279
specific minor number and so if you see

688
00:28:07,240 --> 00:28:11,350
that in the white list file you know

689
00:28:09,279 --> 00:28:13,330
that it's you're allowed to use Devi

690
00:28:11,350 --> 00:28:16,000
random dev Nell has like a different

691
00:28:13,330 --> 00:28:17,230
major minor number etc and so when

692
00:28:16,000 --> 00:28:19,809
you're dropped on a container you want

693
00:28:17,230 --> 00:28:21,399
to look at this list file and see first

694
00:28:19,809 --> 00:28:22,539
if everything is allowed and then if

695
00:28:21,399 --> 00:28:24,399
it's not you can just sort of go through

696
00:28:22,539 --> 00:28:29,320
item by item and see what devices you're

697
00:28:24,399 --> 00:28:34,469
explicitly allowed to access and so this

698
00:28:29,320 --> 00:28:37,210
is pretty much there we have a very

699
00:28:34,470 --> 00:28:38,590
controlled process that thinks it's

700
00:28:37,210 --> 00:28:40,630
running his route but it can't actually

701
00:28:38,590 --> 00:28:44,110
do anything it can't access a whole lot

702
00:28:40,630 --> 00:28:45,480
outside of its own namespaces they can't

703
00:28:44,110 --> 00:28:48,600
directly interact with each other's

704
00:28:45,480 --> 00:28:51,789
processes like our tenants are you know

705
00:28:48,600 --> 00:28:54,340
separated we've limited what Network

706
00:28:51,789 --> 00:28:56,889
attacks can be performed on the host but

707
00:28:54,340 --> 00:28:58,539
there is still like a handful of attacks

708
00:28:56,889 --> 00:29:03,879
that you should consider when you set up

709
00:28:58,539 --> 00:29:07,149
your container so one thing to keep in

710
00:29:03,880 --> 00:29:09,760
mind is the core basis of containers is

711
00:29:07,149 --> 00:29:11,768
that all the containers on a host share

712
00:29:09,760 --> 00:29:13,960
the same kernel as the hosts so if you

713
00:29:11,769 --> 00:29:16,480
have a kernel exploit you can like free

714
00:29:13,960 --> 00:29:19,750
escape the container mess with the host

715
00:29:16,480 --> 00:29:21,250
to mess with other containers etc this

716
00:29:19,750 --> 00:29:21,789
is greatly limited like the attack

717
00:29:21,250 --> 00:29:23,320
surface

718
00:29:21,789 --> 00:29:26,080
the colonel is limited by mandatory

719
00:29:23,320 --> 00:29:27,879
access controls set comp like limiting

720
00:29:26,080 --> 00:29:29,470
what sis calls you can call capabilities

721
00:29:27,879 --> 00:29:31,899
again limiting what's this calls you can

722
00:29:29,470 --> 00:29:33,970
call see groups also acts as a kind of

723
00:29:31,899 --> 00:29:35,738
defense-in-depth mechanism for example

724
00:29:33,970 --> 00:29:38,109
if there's a potentially vulnerable

725
00:29:35,739 --> 00:29:40,509
device driver with some character device

726
00:29:38,109 --> 00:29:42,668
with some like vulnerable I octal

727
00:29:40,509 --> 00:29:44,559
handler see groups might limit you from

728
00:29:42,669 --> 00:29:47,169
even talking to that device driver and

729
00:29:44,559 --> 00:29:49,629
exploiting it but it's important to keep

730
00:29:47,169 --> 00:29:51,820
in mind that older kernels may not fully

731
00:29:49,629 --> 00:29:53,350
or properly implement all these security

732
00:29:51,820 --> 00:29:55,649
measures we talked about so it's

733
00:29:53,350 --> 00:29:59,080
important to keep your kernel up to date

734
00:29:55,649 --> 00:30:01,090
so let's say you find a privilege

735
00:29:59,080 --> 00:30:02,949
escalation in the kernel version that's

736
00:30:01,090 --> 00:30:05,139
running you have some way to go from a

737
00:30:02,950 --> 00:30:06,669
low privilege user to route how do you

738
00:30:05,139 --> 00:30:10,258
turn that into a container break out

739
00:30:06,669 --> 00:30:13,239
like a normal issue payload in a like

740
00:30:10,259 --> 00:30:15,190
kernel exploit will be to prepare kernel

741
00:30:13,239 --> 00:30:17,529
creds and then commit them and what this

742
00:30:15,190 --> 00:30:20,019
does is this like replaces the cred

743
00:30:17,529 --> 00:30:23,499
struct associated with your user process

744
00:30:20,019 --> 00:30:25,749
with one that gives you UID 0 gives you

745
00:30:23,499 --> 00:30:27,849
all the capabilities it disables Linux

746
00:30:25,749 --> 00:30:30,340
security modules which like turns off

747
00:30:27,849 --> 00:30:32,470
SELinux and app armor it also disables

748
00:30:30,340 --> 00:30:34,299
user namespaces but it doesn't actually

749
00:30:32,470 --> 00:30:35,889
give you full file system access

750
00:30:34,299 --> 00:30:37,570
immediately for that you need to change

751
00:30:35,889 --> 00:30:40,869
the FS struct associated with your

752
00:30:37,570 --> 00:30:43,629
process however we have the previous DAC

753
00:30:40,869 --> 00:30:45,459
read search exploit and because the

754
00:30:43,629 --> 00:30:47,978
normal exploit will give us the DAC read

755
00:30:45,460 --> 00:30:51,460
search capability we can now just use

756
00:30:47,979 --> 00:30:53,739
that exploit get the handle to the host

757
00:30:51,460 --> 00:30:56,889
file systems root directory CH root into

758
00:30:53,739 --> 00:31:00,340
it and now we have full file system

759
00:30:56,889 --> 00:31:01,719
access of for the host another thing you

760
00:31:00,340 --> 00:31:03,189
should keep in mind in a container

761
00:31:01,720 --> 00:31:06,460
solution is check if you're on

762
00:31:03,190 --> 00:31:08,229
kubernetes kubernetes runs like multiple

763
00:31:06,460 --> 00:31:11,139
different API servers to manage

764
00:31:08,229 --> 00:31:13,570
everything there's like at CD which has

765
00:31:11,139 --> 00:31:15,668
an API and its stores like the cluster

766
00:31:13,570 --> 00:31:17,590
configuration information there's a

767
00:31:15,669 --> 00:31:20,320
cubelet api which is used to like manage

768
00:31:17,590 --> 00:31:23,199
hosts and pods and the kubernetes api

769
00:31:20,320 --> 00:31:26,049
which is what kubernetes administrator

770
00:31:23,200 --> 00:31:28,019
will talk to to like actually configure

771
00:31:26,049 --> 00:31:30,879
their kubernetes cluster an environment

772
00:31:28,019 --> 00:31:32,109
each pod will have a service token which

773
00:31:30,879 --> 00:31:35,179
can be used to authenticate to the

774
00:31:32,109 --> 00:31:39,290
kubernetes api with a service account

775
00:31:35,180 --> 00:31:41,810
and sometimes the this token gives high

776
00:31:39,290 --> 00:31:43,600
privileges in the kubernetes api and you

777
00:31:41,810 --> 00:31:46,220
can use this for essentially a free

778
00:31:43,600 --> 00:31:48,320
container escape you can just tell the

779
00:31:46,220 --> 00:31:50,570
kubernetes api hey spin up a privileged

780
00:31:48,320 --> 00:31:52,879
pod which will have all the capabilities

781
00:31:50,570 --> 00:31:54,800
with the whole file system host file

782
00:31:52,880 --> 00:31:57,910
system mounted readwrite and that's just

783
00:31:54,800 --> 00:32:01,310
an easy escape another thing is that the

784
00:31:57,910 --> 00:32:04,880
cubelet api can have unauthenticated

785
00:32:01,310 --> 00:32:07,040
remote code execution this essentially

786
00:32:04,880 --> 00:32:09,680
gives you like code execution within a

787
00:32:07,040 --> 00:32:11,360
pod and you can kind of chain this with

788
00:32:09,680 --> 00:32:13,520
the previous thing gain code execution

789
00:32:11,360 --> 00:32:15,500
within another pod steal their service

790
00:32:13,520 --> 00:32:18,889
token and try to escalate privileges

791
00:32:15,500 --> 00:32:20,750
that way in addition the HCD api can

792
00:32:18,890 --> 00:32:22,360
sometimes be an unauthenticated and you

793
00:32:20,750 --> 00:32:26,050
can use that to directly modify

794
00:32:22,360 --> 00:32:28,250
kubernetes state and configuration and

795
00:32:26,050 --> 00:32:30,680
kind of related to this you should also

796
00:32:28,250 --> 00:32:32,960
check like what Cod environment you're

797
00:32:30,680 --> 00:32:37,400
in on if you're in AWS can you hit the

798
00:32:32,960 --> 00:32:41,180
AWS metadata service um if the host that

799
00:32:37,400 --> 00:32:43,010
you're on has in and like I am instance

800
00:32:41,180 --> 00:32:45,500
role like assigned to it there'll be I

801
00:32:43,010 --> 00:32:47,090
am credentials present in the AWS

802
00:32:45,500 --> 00:32:49,280
metadata service and you could steal

803
00:32:47,090 --> 00:32:51,290
those if that acts that like network

804
00:32:49,280 --> 00:32:55,149
access to the AWS metadata service is

805
00:32:51,290 --> 00:32:57,889
not limited also sometimes like um

806
00:32:55,150 --> 00:32:59,690
things like chef or puppet will put in

807
00:32:57,890 --> 00:33:01,580
its scripts or like in its certificates

808
00:32:59,690 --> 00:33:04,960
or secrets in the user data portion of

809
00:33:01,580 --> 00:33:08,090
for example AWS metadata service and

810
00:33:04,960 --> 00:33:10,040
container on a host could just steal

811
00:33:08,090 --> 00:33:14,270
that user data and steal those relevant

812
00:33:10,040 --> 00:33:17,530
secrets so we wrote a tool called Khan

813
00:33:14,270 --> 00:33:20,180
machi which is basically a go tool

814
00:33:17,530 --> 00:33:21,950
statically compiles into a binary you

815
00:33:20,180 --> 00:33:23,630
just drop it in a container and it

816
00:33:21,950 --> 00:33:25,100
collects a bunch of information for you

817
00:33:23,630 --> 00:33:27,620
it checks capabilities it Flags

818
00:33:25,100 --> 00:33:29,600
dangerous ones it looks for mounted

819
00:33:27,620 --> 00:33:31,189
volumes it looks at your see group

820
00:33:29,600 --> 00:33:34,040
policy it looks at all the namespace

821
00:33:31,190 --> 00:33:36,530
configuration it sniffs the network to

822
00:33:34,040 --> 00:33:37,940
find out the like IP addresses for other

823
00:33:36,530 --> 00:33:40,700
containers in the host so you could

824
00:33:37,940 --> 00:33:42,110
attack those and it's still in

825
00:33:40,700 --> 00:33:45,050
development we're continually adding

826
00:33:42,110 --> 00:33:47,000
features like kubernetes scanning etc to

827
00:33:45,050 --> 00:33:49,029
it we're open to feed your suggestions

828
00:33:47,000 --> 00:33:53,409
it's to be released

829
00:33:49,029 --> 00:33:55,689
TM so keep an eye out on the NCC group

830
00:33:53,409 --> 00:33:57,159
github for it we're just wrapping a few

831
00:33:55,689 --> 00:34:00,219
things up and going through like our

832
00:33:57,159 --> 00:34:06,789
internal tool release process so now for

833
00:34:00,219 --> 00:34:08,649
the demo so here we're launching a

834
00:34:06,789 --> 00:34:10,389
singularity container singularity is

835
00:34:08,649 --> 00:34:15,210
like another container runtime like

836
00:34:10,389 --> 00:34:18,669
docker and we'll run our tool here and

837
00:34:15,210 --> 00:34:20,230
it's like enumerated a bunch of

838
00:34:18,668 --> 00:34:21,788
information like the Linux kernel

839
00:34:20,230 --> 00:34:24,519
version which we can use to try to find

840
00:34:21,789 --> 00:34:27,069
exploits it detected that the runtime is

841
00:34:24,518 --> 00:34:29,469
singularity enumerated the different

842
00:34:27,069 --> 00:34:31,268
capability sets it found that oh there

843
00:34:29,469 --> 00:34:32,739
might be some potential hardware attacks

844
00:34:31,268 --> 00:34:36,339
on the host it could be vulnerable to

845
00:34:32,739 --> 00:34:38,319
meltdown inspector it's noted noted that

846
00:34:36,339 --> 00:34:40,719
set comp is disabled in this container

847
00:34:38,319 --> 00:34:45,639
and that there's not an app arm or

848
00:34:40,719 --> 00:34:48,069
profile in addition it's noticed that

849
00:34:45,639 --> 00:34:49,539
user name spacing is not enabled it's

850
00:34:48,069 --> 00:34:52,000
listed all these different things that

851
00:34:49,539 --> 00:34:54,730
are mounted from the host that could be

852
00:34:52,000 --> 00:35:00,190
potentially dangerous that we'd have to

853
00:34:54,730 --> 00:35:02,079
investigate it also like note

854
00:35:00,190 --> 00:35:03,880
specifically what capabilities in the

855
00:35:02,079 --> 00:35:06,640
bounding set that could be dangerous if

856
00:35:03,880 --> 00:35:08,109
you get UID 0 and then it notes that the

857
00:35:06,640 --> 00:35:18,368
container is not using process

858
00:35:08,109 --> 00:35:20,380
namespaces so just to sort of wrap

859
00:35:18,369 --> 00:35:22,390
things up from the perspective of a

860
00:35:20,380 --> 00:35:23,890
developer it's worth noting that

861
00:35:22,390 --> 00:35:26,230
containers are much better than nothing

862
00:35:23,890 --> 00:35:28,538
so if your choice is run your stuff in a

863
00:35:26,230 --> 00:35:30,519
container versus just run it straight on

864
00:35:28,539 --> 00:35:32,559
the machine you will want to use a

865
00:35:30,519 --> 00:35:35,229
container because it's security measures

866
00:35:32,559 --> 00:35:36,339
that you wouldn't normally have then you

867
00:35:35,230 --> 00:35:38,019
want to go in and make sure that your

868
00:35:36,339 --> 00:35:40,390
solution enables all the namespaces if

869
00:35:38,019 --> 00:35:42,640
you're using docker make sure you go in

870
00:35:40,390 --> 00:35:44,440
and explicitly enable user namespaces

871
00:35:42,640 --> 00:35:46,808
because that's sort of the big one that

872
00:35:44,440 --> 00:35:48,779
provides the most for you don't grant

873
00:35:46,809 --> 00:35:50,769
random capabilities to your container

874
00:35:48,779 --> 00:35:53,559
don't mount random things in the

875
00:35:50,769 --> 00:35:54,430
container copy stuff instead don't run a

876
00:35:53,559 --> 00:35:56,319
privilege container

877
00:35:54,430 --> 00:35:59,259
don't give your kubernetes pods service

878
00:35:56,319 --> 00:36:01,058
access container and i'll also consider

879
00:35:59,259 --> 00:36:02,290
what your container can access on your

880
00:36:01,059 --> 00:36:04,510
network so

881
00:36:02,290 --> 00:36:07,810
if you're running on a cloud provider

882
00:36:04,510 --> 00:36:09,640
make sure or at least consider that your

883
00:36:07,810 --> 00:36:11,110
docker container may be able to hit the

884
00:36:09,640 --> 00:36:13,240
metadata service and think about what

885
00:36:11,110 --> 00:36:14,860
sort of information exists in there if

886
00:36:13,240 --> 00:36:17,109
you're running it in like a data center

887
00:36:14,860 --> 00:36:19,330
or something consider what other servers

888
00:36:17,110 --> 00:36:22,150
the container might be able to hit

889
00:36:19,330 --> 00:36:23,500
if using docker dropped in at raw

890
00:36:22,150 --> 00:36:26,830
capability which is enabled by default

891
00:36:23,500 --> 00:36:29,410
and if you're using something else

892
00:36:26,830 --> 00:36:32,200
consider what capabilities it grants to

893
00:36:29,410 --> 00:36:32,890
your process and if just drop anything

894
00:36:32,200 --> 00:36:35,560
that's dangerous

895
00:36:32,890 --> 00:36:38,879
ideally drop everything if you don't

896
00:36:35,560 --> 00:36:41,350
need any sort of root permissions

897
00:36:38,880 --> 00:36:42,520
basically just be aware of all the

898
00:36:41,350 --> 00:36:44,680
security controls and make sure they're

899
00:36:42,520 --> 00:36:46,630
all flipped on but if you're a pen

900
00:36:44,680 --> 00:36:48,060
tester this is sort of a short cheat

901
00:36:46,630 --> 00:36:50,560
sheet of what you should be checking for

902
00:36:48,060 --> 00:36:52,990
look at what your you ideas are you UID

903
00:36:50,560 --> 00:36:54,100
0 what your capabilities are any of them

904
00:36:52,990 --> 00:36:57,189
dangerous

905
00:36:54,100 --> 00:36:59,589
what namespaces are enabled and be very

906
00:36:57,190 --> 00:37:01,420
aware of if user name spacing is enabled

907
00:36:59,590 --> 00:37:02,590
because that shuts down a lot of your

908
00:37:01,420 --> 00:37:06,460
attack surface even if you are

909
00:37:02,590 --> 00:37:08,200
explicitly granted capabilities check

910
00:37:06,460 --> 00:37:09,910
for anything that's hosted mounted from

911
00:37:08,200 --> 00:37:12,160
the host and see if any of them could

912
00:37:09,910 --> 00:37:13,720
potentially be system files or other

913
00:37:12,160 --> 00:37:16,299
files that might be read by processes

914
00:37:13,720 --> 00:37:17,470
outside of your container look for the

915
00:37:16,300 --> 00:37:19,660
that includes like looking for the

916
00:37:17,470 --> 00:37:22,540
docker socket look at your C group

917
00:37:19,660 --> 00:37:24,609
policy see if you can just you know chew

918
00:37:22,540 --> 00:37:28,060
up resources if you feel like it see if

919
00:37:24,610 --> 00:37:30,700
that what devices you can access look at

920
00:37:28,060 --> 00:37:32,680
your kernel version and if you have

921
00:37:30,700 --> 00:37:36,040
something super out-of-date see if there

922
00:37:32,680 --> 00:37:38,500
is just some easy pone where you just

923
00:37:36,040 --> 00:37:40,270
like drop it in run it and just get root

924
00:37:38,500 --> 00:37:42,550
because if you're running on an old

925
00:37:40,270 --> 00:37:44,710
kernel there might be some old exploit

926
00:37:42,550 --> 00:37:46,390
for you to get root and just escape from

927
00:37:44,710 --> 00:37:49,480
there although you might have to modify

928
00:37:46,390 --> 00:37:50,770
your payload to a little bit in order to

929
00:37:49,480 --> 00:37:53,740
turn into a container escape rather than

930
00:37:50,770 --> 00:37:55,330
just a privilege escalation look at what

931
00:37:53,740 --> 00:37:58,240
you can hit on the network scan things

932
00:37:55,330 --> 00:38:00,640
sniff traffic that sort of thing and

933
00:37:58,240 --> 00:38:05,620
then again just poke at your metadata

934
00:38:00,640 --> 00:38:08,190
services I think that's it if there's

935
00:38:05,620 --> 00:38:08,190
any questions

936
00:38:09,690 --> 00:38:13,640
all right thank you very much

937
00:38:13,820 --> 00:38:17,389
[Applause]

