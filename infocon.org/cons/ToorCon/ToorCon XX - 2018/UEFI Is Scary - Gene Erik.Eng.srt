1
00:00:01,250 --> 00:00:08,849
good alright next we have gene Eric

2
00:00:06,390 --> 00:00:17,850
telling us how scary you ëif are UEFI is

3
00:00:08,849 --> 00:00:21,180
please welcome gene hey guys I'm gene

4
00:00:17,850 --> 00:00:23,010
and this is as he said I talk about why

5
00:00:21,180 --> 00:00:25,948
you should be terrified of UF Kai but

6
00:00:23,010 --> 00:00:28,980
also a little bit about why it's cool

7
00:00:25,949 --> 00:00:31,369
so Who am I why do you care I'm hacker

8
00:00:28,980 --> 00:00:33,390
you haven't seen this card before today

9
00:00:31,369 --> 00:00:35,969
here it is

10
00:00:33,390 --> 00:00:38,219
I'm also an accidental enthusiast over

11
00:00:35,969 --> 00:00:40,020
UEFI I didn't mean to do any of this

12
00:00:38,219 --> 00:00:43,770
research it just kind of happened while

13
00:00:40,020 --> 00:00:46,050
I was looking at something else so what

14
00:00:43,770 --> 00:00:49,950
is you fee you guys probably heard of it

15
00:00:46,050 --> 00:00:51,930
by now it's a replacement firmware thing

16
00:00:49,950 --> 00:00:54,600
that basically replaces the old idea of

17
00:00:51,930 --> 00:00:57,390
BIOS so when your computer is trying to

18
00:00:54,600 --> 00:00:59,190
start up everything and you need some

19
00:00:57,390 --> 00:01:02,280
kind of a really basic control system

20
00:00:59,190 --> 00:01:07,020
BIOS was it it's been replaced by UEFI

21
00:01:02,280 --> 00:01:09,180
which is good and bad but it does a

22
00:01:07,020 --> 00:01:12,750
whole lot more stuff so it's basically a

23
00:01:09,180 --> 00:01:17,430
pre OS OS it has its own drivers it has

24
00:01:12,750 --> 00:01:19,380
its own more-or-less kernel that they

25
00:01:17,430 --> 00:01:23,369
call a boot loader pre boot loader

26
00:01:19,380 --> 00:01:25,920
loader but it's capable of running

27
00:01:23,369 --> 00:01:27,509
programs it's capable of doing lots of

28
00:01:25,920 --> 00:01:31,680
stuff it's got you can have network

29
00:01:27,509 --> 00:01:35,240
access from your free OS free boot

30
00:01:31,680 --> 00:01:38,240
loader loader and it's also open source

31
00:01:35,240 --> 00:01:38,240
so

32
00:01:38,610 --> 00:01:42,789
where can you find it it's kind of on

33
00:01:40,900 --> 00:01:45,430
everything these days any new device

34
00:01:42,790 --> 00:01:48,100
that you're gonna buy that's you know

35
00:01:45,430 --> 00:01:51,280
like a PC or a laptop or a server it's

36
00:01:48,100 --> 00:01:54,789
going to have UEFI on it or at least

37
00:01:51,280 --> 00:02:00,280
some kind of EFI depending on how weird

38
00:01:54,790 --> 00:02:01,810
they gotten so you can find it kind of

39
00:02:00,280 --> 00:02:05,049
everywhere it's also starting to get

40
00:02:01,810 --> 00:02:06,909
into the virtual machine space Virtual

41
00:02:05,049 --> 00:02:11,530
Box for a long time has had the ability

42
00:02:06,909 --> 00:02:12,910
to do EFI based stuff it's kind of a

43
00:02:11,530 --> 00:02:18,730
pain in the butt to use but it's on

44
00:02:12,910 --> 00:02:21,400
there and you can also do a lot of EFI

45
00:02:18,730 --> 00:02:24,399
stuff from embedded platforms now we're

46
00:02:21,400 --> 00:02:27,130
getting kind of more of that if formerly

47
00:02:24,400 --> 00:02:30,580
you boot which was kind of like a

48
00:02:27,130 --> 00:02:32,530
predecessor almost but we're getting a

49
00:02:30,580 --> 00:02:36,160
little more stuff me personally I like

50
00:02:32,530 --> 00:02:38,350
to use UEFI on my Raspberry Pi because

51
00:02:36,160 --> 00:02:42,040
I'd like to actually be able to update

52
00:02:38,350 --> 00:02:45,430
things but that's just me so there's a

53
00:02:42,040 --> 00:02:45,820
link to how to do that why is it so

54
00:02:45,430 --> 00:02:47,410
awesome

55
00:02:45,820 --> 00:02:48,670
well it's capable of doing a lot of

56
00:02:47,410 --> 00:02:51,370
stuff that the BIOS couldn't do back in

57
00:02:48,670 --> 00:02:55,140
the day one of those is loading from GPT

58
00:02:51,370 --> 00:02:58,209
instead of MBR based storage devices

59
00:02:55,140 --> 00:03:00,250
which means you can have a lot more

60
00:02:58,209 --> 00:03:03,100
partitions and crazy stuff going on

61
00:03:00,250 --> 00:03:06,670
there's a whole host of things that GPT

62
00:03:03,100 --> 00:03:08,470
can do that MBR couldn't and usually

63
00:03:06,670 --> 00:03:12,850
when you find a system that can support

64
00:03:08,470 --> 00:03:14,799
booting from GPT it's also UEFI you can

65
00:03:12,850 --> 00:03:19,870
support secure boots so it's really easy

66
00:03:14,799 --> 00:03:21,970
to do booting known signed binaries from

67
00:03:19,870 --> 00:03:23,799
a UEFI firmware as long as you've told

68
00:03:21,970 --> 00:03:26,890
it how to do that and what your key

69
00:03:23,799 --> 00:03:29,500
material is etc so that's something you

70
00:03:26,890 --> 00:03:30,970
can do from the UEFI huge file systems

71
00:03:29,500 --> 00:03:32,859
so you can boot from a two terabyte

72
00:03:30,970 --> 00:03:34,840
device that's not something you used to

73
00:03:32,859 --> 00:03:39,090
be able to do with BIOS because you know

74
00:03:34,840 --> 00:03:39,090
bit lengths thank you

75
00:03:42,370 --> 00:03:47,290
yeah so you can also build all kinds of

76
00:03:45,400 --> 00:03:49,420
weird drivers for it to boot different

77
00:03:47,290 --> 00:03:52,150
file systems you're not limited to

78
00:03:49,420 --> 00:03:54,609
something that necessarily the

79
00:03:52,150 --> 00:03:56,620
manufacturer newer understood when they

80
00:03:54,610 --> 00:04:00,519
ship the device because you can load

81
00:03:56,620 --> 00:04:01,930
drivers after the fact you can do

82
00:04:00,519 --> 00:04:05,680
scripting stuff with us so you can

83
00:04:01,930 --> 00:04:07,900
actually load scripts from the UEFI most

84
00:04:05,680 --> 00:04:10,599
manufacturers include a shell

85
00:04:07,900 --> 00:04:11,950
application with their UEFI firmware

86
00:04:10,599 --> 00:04:14,619
that's actually installed on your device

87
00:04:11,950 --> 00:04:18,039
so that's meant actually run scripts to

88
00:04:14,620 --> 00:04:20,200
do things like update your efi or do

89
00:04:18,040 --> 00:04:22,389
diagnostics so that's the thing that you

90
00:04:20,200 --> 00:04:24,520
can use to to do some weird research

91
00:04:22,389 --> 00:04:29,560
type things but it's kind of a weird

92
00:04:24,520 --> 00:04:31,719
system scripting both awesome and

93
00:04:29,560 --> 00:04:34,780
terrifying is the fact that ACPI

94
00:04:31,720 --> 00:04:38,710
stuff has been lumped into the UEFI now

95
00:04:34,780 --> 00:04:41,650
so previously all the descriptions on

96
00:04:38,710 --> 00:04:43,690
how different bits of hardware in your

97
00:04:41,650 --> 00:04:46,780
system talked to the other bits of

98
00:04:43,690 --> 00:04:49,389
hardware in your system were defined in

99
00:04:46,780 --> 00:04:50,679
like a permanent state in an ACPI thing

100
00:04:49,389 --> 00:04:53,229
you could update it but it was really

101
00:04:50,680 --> 00:04:55,960
hard in UEFI that's just like a thing

102
00:04:53,229 --> 00:04:59,139
that it does so you can replace

103
00:04:55,960 --> 00:05:02,138
functions for talking between devices in

104
00:04:59,139 --> 00:05:04,330
the ACPI and like you don't have to

105
00:05:02,139 --> 00:05:07,000
recompile anything that's just the thing

106
00:05:04,330 --> 00:05:10,419
that you can do with it which is awesome

107
00:05:07,000 --> 00:05:14,740
and insane at the same time you're not

108
00:05:10,419 --> 00:05:16,570
stuck using x86 so BIOS was very very

109
00:05:14,740 --> 00:05:19,300
customed to whatever hardware you were

110
00:05:16,570 --> 00:05:22,000
using in the UEFI world because it's

111
00:05:19,300 --> 00:05:24,340
been unified we have a similar code base

112
00:05:22,000 --> 00:05:27,460
that works on tons of different

113
00:05:24,340 --> 00:05:28,989
architectures so you can get those

114
00:05:27,460 --> 00:05:31,388
embedded platforms you can even get some

115
00:05:28,990 --> 00:05:37,060
old stuff for some new weird stuff like

116
00:05:31,389 --> 00:05:40,150
PowerPC 64 maybe alright so with all

117
00:05:37,060 --> 00:05:41,620
these things what's wrong why why are we

118
00:05:40,150 --> 00:05:44,320
afraid of this really cool new thing

119
00:05:41,620 --> 00:05:46,630
well one of them is the a CPI thing that

120
00:05:44,320 --> 00:05:48,340
I mentioned if you can change how the

121
00:05:46,630 --> 00:05:52,510
hardware is talking to other pieces of

122
00:05:48,340 --> 00:05:53,739
hardware in non compiled code from

123
00:05:52,510 --> 00:05:55,390
something you're loaded from an

124
00:05:53,740 --> 00:05:58,870
untrusted source that's not

125
00:05:55,390 --> 00:06:01,210
actually burned in the firmware you've

126
00:05:58,870 --> 00:06:02,890
got all kinds of access to do weird

127
00:06:01,210 --> 00:06:06,180
things and there are projects that make

128
00:06:02,890 --> 00:06:08,590
great use of this for good and also evil

129
00:06:06,180 --> 00:06:10,180
I'm not gonna mention what they are

130
00:06:08,590 --> 00:06:14,650
because there's some of them are

131
00:06:10,180 --> 00:06:16,900
violating copyright to do that so also

132
00:06:14,650 --> 00:06:20,229
with UEFI a lot of things are based on

133
00:06:16,900 --> 00:06:24,219
common code bases Intel kind of open

134
00:06:20,230 --> 00:06:25,840
source their spec and the edk which is

135
00:06:24,220 --> 00:06:27,910
part of a project called T on a core is

136
00:06:25,840 --> 00:06:30,159
actually something that manufacturers

137
00:06:27,910 --> 00:06:31,630
used to build their firmware and they

138
00:06:30,160 --> 00:06:36,580
actually burned that into the ROM that's

139
00:06:31,630 --> 00:06:39,219
on your machine which is awesome because

140
00:06:36,580 --> 00:06:40,960
it's open-source but it's scary cuz

141
00:06:39,220 --> 00:06:42,550
everybody's using the same thing so

142
00:06:40,960 --> 00:06:46,060
we're all kind of screwed in the same

143
00:06:42,550 --> 00:06:47,650
places and you can't really tell you can

144
00:06:46,060 --> 00:06:49,090
kind of tell what version it is some

145
00:06:47,650 --> 00:06:51,549
manufacturers actually tell you what

146
00:06:49,090 --> 00:06:53,770
version it is but it's really hard to

147
00:06:51,550 --> 00:06:54,250
tell what it's been patched in what

148
00:06:53,770 --> 00:07:00,909
hasn't

149
00:06:54,250 --> 00:07:02,260
so bootloader sighing so frequently when

150
00:07:00,910 --> 00:07:05,530
these things come out of the factory

151
00:07:02,260 --> 00:07:09,010
they're not using any kind of signing

152
00:07:05,530 --> 00:07:10,780
for the bootloader it's basically

153
00:07:09,010 --> 00:07:13,360
counting on you to provide some files on

154
00:07:10,780 --> 00:07:16,090
your filesystem to then load the OS the

155
00:07:13,360 --> 00:07:18,850
problem is that actually loads into the

156
00:07:16,090 --> 00:07:21,159
UEFI space which means you have the

157
00:07:18,850 --> 00:07:24,000
ability to do some crazy crap that maybe

158
00:07:21,160 --> 00:07:27,340
you shouldn't do with untrusted code

159
00:07:24,000 --> 00:07:29,530
back in the days maybe the bootloader

160
00:07:27,340 --> 00:07:31,450
got some access to things with BIOS you

161
00:07:29,530 --> 00:07:35,260
can make direct calls and things like

162
00:07:31,450 --> 00:07:38,310
that to memory addresses in UEFI it's

163
00:07:35,260 --> 00:07:42,039
less obscure so you can actually make

164
00:07:38,310 --> 00:07:43,690
more attacks surface of more equipment

165
00:07:42,040 --> 00:07:46,240
without knowing you know a specific

166
00:07:43,690 --> 00:07:49,120
memory address you can just ask for a

167
00:07:46,240 --> 00:07:51,340
particular piece of hardware and it'll

168
00:07:49,120 --> 00:07:56,470
respond like oh I don't know your secure

169
00:07:51,340 --> 00:07:58,299
Enclave so that's interesting there's

170
00:07:56,470 --> 00:08:01,030
not a lot of research going on in UEFI

171
00:07:58,300 --> 00:08:04,550
it's kind of like the Wild West

172
00:08:01,030 --> 00:08:06,049
people don't look at it all that often

173
00:08:04,550 --> 00:08:07,310
that's changing a little bit there are

174
00:08:06,050 --> 00:08:08,950
people that are actually looking at it

175
00:08:07,310 --> 00:08:11,540
now and trying to raise those red flags

176
00:08:08,950 --> 00:08:17,120
which is cool it's good for everybody

177
00:08:11,540 --> 00:08:18,890
and I do support that and as I mentioned

178
00:08:17,120 --> 00:08:20,780
things do kind of live on the file

179
00:08:18,890 --> 00:08:22,159
system for some of this so half of its

180
00:08:20,780 --> 00:08:24,229
actually burned in on the ROM on your

181
00:08:22,160 --> 00:08:26,750
machine and then the other half for

182
00:08:24,230 --> 00:08:28,930
three quarters that's a lot of math with

183
00:08:26,750 --> 00:08:32,090
a hundred and twenty five percent is

184
00:08:28,930 --> 00:08:33,500
actually on your desk in a file system

185
00:08:32,090 --> 00:08:35,540
that could be mounted within an

186
00:08:33,500 --> 00:08:39,919
operating system which then you're at

187
00:08:35,539 --> 00:08:42,228
the mercy of whatever that is and it's

188
00:08:39,919 --> 00:08:45,829
it's still kind of bleeding edge for the

189
00:08:42,229 --> 00:08:49,130
concept that's it is replacing you if I

190
00:08:45,830 --> 00:08:51,650
is still really young we've had BIOS for

191
00:08:49,130 --> 00:08:53,330
many decades and we've replaced the

192
00:08:51,650 --> 00:08:57,680
entire concept with something else and

193
00:08:53,330 --> 00:08:59,120
it's still a little new here's some

194
00:08:57,680 --> 00:09:03,260
example of things going horribly wrong

195
00:08:59,120 --> 00:09:06,560
with UEFI so Microsoft had an accidental

196
00:09:03,260 --> 00:09:12,080
leak of access to UEFI for basically

197
00:09:06,560 --> 00:09:14,329
anything that's not great if you have

198
00:09:12,080 --> 00:09:16,400
one x point to rule them all and you are

199
00:09:14,330 --> 00:09:21,980
suddenly in the firmware on somebody's

200
00:09:16,400 --> 00:09:24,050
machine now their own forever there was

201
00:09:21,980 --> 00:09:30,470
a cool there's been a group of people

202
00:09:24,050 --> 00:09:33,890
doing some cool talks about about how to

203
00:09:30,470 --> 00:09:35,300
attack and defend UEFI and they go into

204
00:09:33,890 --> 00:09:37,790
some of the nitty-gritty of details

205
00:09:35,300 --> 00:09:41,120
which is really cool I recommend you

206
00:09:37,790 --> 00:09:43,670
guys to look it up this is an example of

207
00:09:41,120 --> 00:09:48,710
them talking about it at Def Con Asia

208
00:09:43,670 --> 00:09:51,290
last year you should go look into it and

209
00:09:48,710 --> 00:09:55,940
Betty they give some information about

210
00:09:51,290 --> 00:09:57,680
how to actually debug real systems with

211
00:09:55,940 --> 00:10:00,650
real efi not just something that you

212
00:09:57,680 --> 00:10:04,270
compiled and what they found when they

213
00:10:00,650 --> 00:10:06,770
started doing that and it's not good so

214
00:10:04,270 --> 00:10:09,530
you should take a look at that my

215
00:10:06,770 --> 00:10:12,949
favorite one is actually the vault seven

216
00:10:09,530 --> 00:10:15,079
leaks I didn't hear about this very much

217
00:10:12,950 --> 00:10:16,520
until I went hunting for it so there is

218
00:10:15,080 --> 00:10:19,550
a UEFI set

219
00:10:16,520 --> 00:10:22,460
attacks in the vault seven drop that

220
00:10:19,550 --> 00:10:24,469
actually like tells you how to stay

221
00:10:22,460 --> 00:10:26,200
resident after you've loaded the

222
00:10:24,470 --> 00:10:28,520
bootloader and the operating system so

223
00:10:26,200 --> 00:10:30,140
you can have a program running in the

224
00:10:28,520 --> 00:10:31,880
background at ring zero that your

225
00:10:30,140 --> 00:10:35,300
operating system does not know is there

226
00:10:31,880 --> 00:10:38,060
because it's running in the UEFI that's

227
00:10:35,300 --> 00:10:41,030
awesome you want to call home that's how

228
00:10:38,060 --> 00:10:43,489
you call home so I included this because

229
00:10:41,030 --> 00:10:46,550
I love this picture this is an example

230
00:10:43,490 --> 00:10:49,580
from the same people that did the Asia

231
00:10:46,550 --> 00:10:51,859
DEFCON Asia 2017 talk and they actually

232
00:10:49,580 --> 00:10:53,810
wrote a proof of concept malware the

233
00:10:51,860 --> 00:10:58,430
change all the way through an active

234
00:10:53,810 --> 00:11:00,260
Windows installation into the UEFI using

235
00:10:58,430 --> 00:11:01,310
some of the exploits and using some of

236
00:11:00,260 --> 00:11:04,280
the stuff they learned from the vault

237
00:11:01,310 --> 00:11:06,530
seven drop and that's pretty badass they

238
00:11:04,280 --> 00:11:09,410
managed to ransomware the system in UEFI

239
00:11:06,530 --> 00:11:15,130
so you can reformat it's just gonna lock

240
00:11:09,410 --> 00:11:17,150
you again so some of the notes on

241
00:11:15,130 --> 00:11:18,560
research stuff that you might be

242
00:11:17,150 --> 00:11:23,240
interested if you want to go play with

243
00:11:18,560 --> 00:11:26,810
stings Tiano cores edk slash UDK is out

244
00:11:23,240 --> 00:11:28,130
there it's free it's on github it gives

245
00:11:26,810 --> 00:11:29,869
you some pretty cool tools to get

246
00:11:28,130 --> 00:11:33,260
started with messin with things it gives

247
00:11:29,870 --> 00:11:35,210
you code for all kinds of drivers and

248
00:11:33,260 --> 00:11:38,000
the ones that they don't include you can

249
00:11:35,210 --> 00:11:40,280
get from the grub project they actually

250
00:11:38,000 --> 00:11:41,810
have drivers for tons and tons and tons

251
00:11:40,280 --> 00:11:43,720
of file systems that you might not even

252
00:11:41,810 --> 00:11:47,660
remember exists that you can boot from

253
00:11:43,720 --> 00:11:49,430
using UEFI using the Tiano core project

254
00:11:47,660 --> 00:11:52,040
you can actually take those same drivers

255
00:11:49,430 --> 00:11:56,719
and put them on a real system it's kind

256
00:11:52,040 --> 00:12:01,069
of fun to do so being able to have a

257
00:11:56,720 --> 00:12:03,830
debugger in your pre boot firmware it's

258
00:12:01,070 --> 00:12:05,030
kind of a cool thing too so that's

259
00:12:03,830 --> 00:12:06,500
something that's included with tiana

260
00:12:05,030 --> 00:12:10,610
core that you can actually do so it'll

261
00:12:06,500 --> 00:12:14,090
fire up libvirt from qemu to actually

262
00:12:10,610 --> 00:12:16,790
give you a UEFI system in a virtualized

263
00:12:14,090 --> 00:12:18,860
space that you can mess with and that's

264
00:12:16,790 --> 00:12:20,360
that's pretty cool like just from

265
00:12:18,860 --> 00:12:22,760
research perspective being able to

266
00:12:20,360 --> 00:12:24,440
actually mess with something in a

267
00:12:22,760 --> 00:12:26,720
controlled way like a virtual machine

268
00:12:24,440 --> 00:12:32,100
that's really cool

269
00:12:26,720 --> 00:12:34,910
refined so it's cool it does some of

270
00:12:32,100 --> 00:12:37,560
that crazy ACPI stuff that I mentioned

271
00:12:34,910 --> 00:12:39,569
what it's primarily used for I'm not

272
00:12:37,560 --> 00:12:41,040
gonna mention because that's a copyright

273
00:12:39,570 --> 00:12:43,470
thing and you shouldn't do that that's

274
00:12:41,040 --> 00:12:44,610
bad but if you've heard of the project

275
00:12:43,470 --> 00:12:46,620
you know what I'm talking about

276
00:12:44,610 --> 00:12:48,470
it is cool however all on its own you

277
00:12:46,620 --> 00:12:50,970
don't have to use it for the bad purpose

278
00:12:48,470 --> 00:12:52,470
you could just use it for cool stuff

279
00:12:50,970 --> 00:12:54,089
like I use it for my machine every day

280
00:12:52,470 --> 00:12:58,110
because it's really useful I keep it on

281
00:12:54,089 --> 00:12:59,790
a USB stick you never know all right so

282
00:12:58,110 --> 00:13:02,760
what do we do about all this crazy

283
00:12:59,790 --> 00:13:05,339
terrible stuff I say we go attack it so

284
00:13:02,760 --> 00:13:08,550
just to keep doing attack research find

285
00:13:05,339 --> 00:13:10,019
new bugs and new holes that may be from

286
00:13:08,550 --> 00:13:12,060
an operating system vector it may be

287
00:13:10,019 --> 00:13:15,240
from the bottom up when you're talking

288
00:13:12,060 --> 00:13:17,489
about defeating sign code just go do the

289
00:13:15,240 --> 00:13:17,790
research find public stuff it's open

290
00:13:17,490 --> 00:13:22,200
source

291
00:13:17,790 --> 00:13:23,730
they'll probably fix it make sure you're

292
00:13:22,200 --> 00:13:25,529
actually using it so a lot of systems

293
00:13:23,730 --> 00:13:27,510
that are capable of doing UEFI for

294
00:13:25,529 --> 00:13:30,449
support reasons have actually fallen

295
00:13:27,510 --> 00:13:34,890
back to a legacy slash hybrid system

296
00:13:30,449 --> 00:13:36,540
where it's emulating BIOS within UEFI so

297
00:13:34,890 --> 00:13:39,480
you don't get some of the good features

298
00:13:36,540 --> 00:13:41,279
that you should be using with UEFI even

299
00:13:39,480 --> 00:13:44,279
though your system is somewhere under

300
00:13:41,279 --> 00:13:46,620
the hood actually using it so I would

301
00:13:44,279 --> 00:13:48,779
say make sure that you're using it keep

302
00:13:46,620 --> 00:13:51,810
everything up to date the fact that

303
00:13:48,779 --> 00:13:53,370
Giano core edk blah blah blah is open

304
00:13:51,810 --> 00:13:56,849
source means that they do actually

305
00:13:53,370 --> 00:13:58,470
change it fairly frequently and because

306
00:13:56,850 --> 00:14:01,140
they don't have to do so much work the

307
00:13:58,470 --> 00:14:02,250
manufacturers as far as I've been

308
00:14:01,140 --> 00:14:04,199
observing it have actually been

309
00:14:02,250 --> 00:14:06,390
releasing firmware for their platforms

310
00:14:04,199 --> 00:14:08,699
more frequently than they used to with

311
00:14:06,390 --> 00:14:09,930
bias because it's no longer custom they

312
00:14:08,699 --> 00:14:15,660
can just suck in the new code and

313
00:14:09,930 --> 00:14:19,170
compile it so what's what else is

314
00:14:15,660 --> 00:14:22,199
helping there are some defensive ideas

315
00:14:19,170 --> 00:14:26,280
that have been drafted

316
00:14:22,200 --> 00:14:28,530
they're still not real clear so you guys

317
00:14:26,280 --> 00:14:31,770
can take a look at that spot on github

318
00:14:28,530 --> 00:14:34,350
they talk about what attacking defense

319
00:14:31,770 --> 00:14:36,360
you might be able to do that's a good

320
00:14:34,350 --> 00:14:36,960
thing to know especially when you're a

321
00:14:36,360 --> 00:14:38,220
blue Timur

322
00:14:36,960 --> 00:14:41,190
it's good to know what you can do to

323
00:14:38,220 --> 00:14:43,530
defend platform the embedding guys as I

324
00:14:41,190 --> 00:14:45,480
said they provide a bunch of information

325
00:14:43,530 --> 00:14:48,569
on how to do debugging and are talking

326
00:14:45,480 --> 00:14:52,110
about what's bad that's active research

327
00:14:48,570 --> 00:14:54,120
that's still being done and the their

328
00:14:52,110 --> 00:14:58,020
antivirus systems they're actually

329
00:14:54,120 --> 00:15:00,120
starting to do scanning of UEFI how much

330
00:14:58,020 --> 00:15:02,189
that's gonna actually find for you it's

331
00:15:00,120 --> 00:15:05,730
hard to say if your yuffie is owned it's

332
00:15:02,190 --> 00:15:07,620
it ring zero so I don't know how much

333
00:15:05,730 --> 00:15:10,920
the scanners actually gonna find but it

334
00:15:07,620 --> 00:15:12,420
can't hurt so and they can at least look

335
00:15:10,920 --> 00:15:18,510
at the files that are in your file

336
00:15:12,420 --> 00:15:20,160
system that are being loaded into efi so

337
00:15:18,510 --> 00:15:22,080
what do i think is gonna happen next i

338
00:15:20,160 --> 00:15:24,110
think things are gonna get a lot worse

339
00:15:22,080 --> 00:15:26,370
before they get better

340
00:15:24,110 --> 00:15:28,800
something big is gonna happen we're

341
00:15:26,370 --> 00:15:35,130
gonna have a problem i think like

342
00:15:28,800 --> 00:15:36,719
cryptolocker ring or like the the big

343
00:15:35,130 --> 00:15:40,530
embedded device attacks that we've seen

344
00:15:36,720 --> 00:15:43,260
lately I feel like that's gonna happen

345
00:15:40,530 --> 00:15:44,939
with yuffie at some point the

346
00:15:43,260 --> 00:15:47,760
everything's kind of in place to

347
00:15:44,940 --> 00:15:49,500
actually allow that I think I do also

348
00:15:47,760 --> 00:15:52,110
think we're gonna hear about somebody

349
00:15:49,500 --> 00:15:54,780
doing an attack on UEFI where they're

350
00:15:52,110 --> 00:15:55,920
actually sucking out secrets from one of

351
00:15:54,780 --> 00:15:57,810
these systems with this secure Enclave

352
00:15:55,920 --> 00:16:00,030
like a Mac laptop this is supposed to

353
00:15:57,810 --> 00:16:02,489
have your fingerprint in a secure place

354
00:16:00,030 --> 00:16:04,709
that you can never get a copy if they

355
00:16:02,490 --> 00:16:07,710
can get into the efi that rule might

356
00:16:04,710 --> 00:16:11,240
just go out the window because

357
00:16:07,710 --> 00:16:11,240
somebody's got to be able to talk to it

358
00:16:11,330 --> 00:16:15,000
we're gonna see more of the efi stuff

359
00:16:13,770 --> 00:16:17,579
being done by the operating system

360
00:16:15,000 --> 00:16:20,670
manufacturers instead of the actual

361
00:16:17,580 --> 00:16:23,160
hardware manufacturers because it's

362
00:16:20,670 --> 00:16:24,959
it's more Universal that way we're gonna

363
00:16:23,160 --> 00:16:27,180
kind of dumb down what's actually living

364
00:16:24,959 --> 00:16:30,529
on the hardware at least that's what I

365
00:16:27,180 --> 00:16:32,849
think the trends are saying a little bit

366
00:16:30,529 --> 00:16:34,769
we're gonna see more secure boot stuff

367
00:16:32,850 --> 00:16:37,940
it's actually how we solve some of these

368
00:16:34,769 --> 00:16:40,649
problems it's not hard to do

369
00:16:37,940 --> 00:16:42,240
it's really not like everything's pretty

370
00:16:40,649 --> 00:16:45,209
much already in place you just have to

371
00:16:42,240 --> 00:16:48,600
start signing your boot loaders which

372
00:16:45,209 --> 00:16:50,880
you can do with grub and it's already

373
00:16:48,600 --> 00:16:54,779
sometimes done depending on your

374
00:16:50,880 --> 00:16:56,250
distribution of Windows so I think we're

375
00:16:54,779 --> 00:17:00,450
gonna see more of that and embedded

376
00:16:56,250 --> 00:17:03,300
stuff using the euphy so again I think

377
00:17:00,450 --> 00:17:06,809
that it's important to note that Yui if

378
00:17:03,300 --> 00:17:08,879
I can get you ring zero and beyond it's

379
00:17:06,809 --> 00:17:09,959
just an important key thing to keep in

380
00:17:08,880 --> 00:17:13,280
mind when you're talking about the

381
00:17:09,959 --> 00:17:17,579
security of that kind of firmware

382
00:17:13,280 --> 00:17:20,099
attackers are looking at this I mean how

383
00:17:17,579 --> 00:17:24,178
can they not this is a big juicy area to

384
00:17:20,099 --> 00:17:29,850
play in and the winds are big you know

385
00:17:24,179 --> 00:17:32,280
you own and you stay owned and when you

386
00:17:29,850 --> 00:17:35,070
make stuff with the edk it might

387
00:17:32,280 --> 00:17:36,330
actually end up in what's on the

388
00:17:35,070 --> 00:17:38,280
firmware on some of these devices so

389
00:17:36,330 --> 00:17:41,549
that's kind of a good payout

390
00:17:38,280 --> 00:17:45,470
I would encourage some development in

391
00:17:41,549 --> 00:17:48,030
the open source space against TDK and

392
00:17:45,470 --> 00:17:50,220
there's a little note here on on how you

393
00:17:48,030 --> 00:17:55,940
actually do secure boot with Linux and

394
00:17:50,220 --> 00:17:55,940
open source environment yeah that's it

395
00:18:01,410 --> 00:18:05,199
[Applause]

396
00:18:11,750 --> 00:18:17,510
would you like my a few

397
00:18:13,580 --> 00:18:19,550
questions alright anybody have any

398
00:18:17,510 --> 00:18:24,320
questions

399
00:18:19,550 --> 00:18:27,710
yeah oh what the sillies does UEFI

400
00:18:24,320 --> 00:18:29,600
furnish that make a boot kit or

401
00:18:27,710 --> 00:18:32,870
something that modifies the Carl's

402
00:18:29,600 --> 00:18:36,969
memory prior to more dangerous than just

403
00:18:32,870 --> 00:18:40,189
like an old school gr style boot kit

404
00:18:36,970 --> 00:18:42,530
right so the question is why is an

405
00:18:40,190 --> 00:18:44,870
attack in UEFI which happens before

406
00:18:42,530 --> 00:18:48,020
kernel boot more dangerous than

407
00:18:44,870 --> 00:18:51,590
something that maybe like is exists in

408
00:18:48,020 --> 00:18:55,280
the MBR so I think the answer to that is

409
00:18:51,590 --> 00:18:58,909
when you own the MBR you can run an

410
00:18:55,280 --> 00:19:00,889
application that modifies how the loaded

411
00:18:58,910 --> 00:19:02,840
operating system is going to run but you

412
00:19:00,890 --> 00:19:06,620
can kind of tell that that's happened in

413
00:19:02,840 --> 00:19:08,330
memory with UEFI you can't actually tell

414
00:19:06,620 --> 00:19:13,820
because it's living in a part that's not

415
00:19:08,330 --> 00:19:16,000
reported to the operating system anybody

416
00:19:13,820 --> 00:19:16,000
else

417
00:19:21,540 --> 00:19:27,280
yes I have and it's kind of silly so

418
00:19:25,450 --> 00:19:31,900
yeah motherboard vendors are doing

419
00:19:27,280 --> 00:19:33,490
online updates of UEFI and yeah that

420
00:19:31,900 --> 00:19:36,040
that doesn't sound like the greatest

421
00:19:33,490 --> 00:19:43,690
idea in the world they're just too many

422
00:19:36,040 --> 00:19:45,840
things that can go wrong yes you in the

423
00:19:43,690 --> 00:19:45,840
back

424
00:19:52,120 --> 00:19:56,149
yeah

425
00:19:53,270 --> 00:19:58,549
so on on my personal computers I do have

426
00:19:56,150 --> 00:20:00,380
custom EFI stuff so I've went out and

427
00:19:58,549 --> 00:20:03,460
done some of what I recommend here which

428
00:20:00,380 --> 00:20:07,910
is compiling making some of my own apps

429
00:20:03,460 --> 00:20:10,040
I have a USB stick of doom that does all

430
00:20:07,910 --> 00:20:12,230
kinds of crazy crap including loading

431
00:20:10,040 --> 00:20:14,690
some weird euphy one of the things I

432
00:20:12,230 --> 00:20:16,490
didn't mention is the the bootloader or

433
00:20:14,690 --> 00:20:19,130
not bootloader but that like one of the

434
00:20:16,490 --> 00:20:21,980
chaîne efi files programs to actually

435
00:20:19,130 --> 00:20:25,490
start the bootloader it can be defaulted

436
00:20:21,980 --> 00:20:27,140
on any device that it's supposed to try

437
00:20:25,490 --> 00:20:28,880
to boot from and I actually take

438
00:20:27,140 --> 00:20:30,169
advantage that on my USB stick and use

439
00:20:28,880 --> 00:20:34,130
the default location so just about

440
00:20:30,169 --> 00:20:39,700
anything will boot from it all right

441
00:20:34,130 --> 00:20:39,700
anyone else all right thank you

442
00:20:43,740 --> 00:20:47,109
[Applause]

