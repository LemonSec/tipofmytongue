1
00:00:00,000 --> 00:00:04,859
<font color="#CCCCCC">Eero trusts lessons</font><font color="#E5E5E5"> learn building a</font>

2
00:00:01,709 --> 00:00:15,599
beyond corp<font color="#E5E5E5"> ssh proxy please give James</font>

3
00:00:04,859 --> 00:00:19,859
<font color="#CCCCCC">Barclay a warmth or calm welcome no</font>

4
00:00:15,599 --> 00:00:22,800
<font color="#E5E5E5">problem</font><font color="#CCCCCC"> so my name is James Barclay</font>

5
00:00:19,859 --> 00:00:25,380
I'm a senior<font color="#CCCCCC"> Rd engineer at</font><font color="#E5E5E5"> dual labs</font>

6
00:00:22,800 --> 00:00:28,199
which is the security<font color="#CCCCCC"> research division</font>

7
00:00:25,380 --> 00:00:29,519
of<font color="#CCCCCC"> duos</font><font color="#E5E5E5"> security and today I'm going to</font>

8
00:00:28,199 --> 00:00:31,050
talk a little<font color="#E5E5E5"> bit</font><font color="#CCCCCC"> about some of the</font>

9
00:00:29,519 --> 00:00:37,890
<font color="#CCCCCC">lessons we learned</font><font color="#E5E5E5"> building a beyond</font>

10
00:00:31,050 --> 00:00:39,899
<font color="#E5E5E5">Corp inspired</font><font color="#CCCCCC"> ssh proxy at</font><font color="#E5E5E5"> duo so we</font>

11
00:00:37,890 --> 00:00:41,550
have quite<font color="#CCCCCC"> a few</font><font color="#E5E5E5"> slides to go over but</font>

12
00:00:39,899 --> 00:00:43,890
just<font color="#CCCCCC"> to give you a quick idea</font><font color="#E5E5E5"> of the</font>

13
00:00:41,550 --> 00:00:46,940
agenda<font color="#CCCCCC"> I'm just gonna give a really</font>

14
00:00:43,890 --> 00:00:49,950
quick<font color="#E5E5E5"> update</font><font color="#CCCCCC"> on like the beyond Corp 101</font>

15
00:00:46,940 --> 00:00:52,320
then we'll<font color="#E5E5E5"> talk about a specific aspect</font>

16
00:00:49,950 --> 00:00:55,320
of the beyond Corp vision which<font color="#CCCCCC"> is the</font>

17
00:00:52,320 --> 00:00:58,800
access proxy and then I'll talk about

18
00:00:55,320 --> 00:01:01,770
<font color="#E5E5E5">how we were</font><font color="#CCCCCC"> able to proxy ssh traffic</font>

19
00:00:58,800 --> 00:01:02,699
through the<font color="#E5E5E5"> the access proxy and then</font>

20
00:01:01,770 --> 00:01:04,589
<font color="#E5E5E5">I'll go over the client and server</font>

21
00:01:02,699 --> 00:01:09,780
implementations of<font color="#E5E5E5"> that and then I guess</font>

22
00:01:04,589 --> 00:01:12,689
if<font color="#E5E5E5"> we have time I'll take questions so</font>

23
00:01:09,780 --> 00:01:14,220
<font color="#E5E5E5">beyond Corp is like a zero trust</font>

24
00:01:12,689 --> 00:01:17,309
security model that was<font color="#CCCCCC"> developed by</font>

25
00:01:14,220 --> 00:01:19,460
<font color="#CCCCCC">Google</font><font color="#E5E5E5"> that sort of re-envisioned the</font>

26
00:01:17,310 --> 00:01:23,070
the idea of like a corporate network

27
00:01:19,460 --> 00:01:29,039
<font color="#CCCCCC">being like perimeter based for access</font>

28
00:01:23,070 --> 00:01:31,500
control<font color="#CCCCCC"> so rather</font><font color="#E5E5E5"> than you know relying</font>

29
00:01:29,040 --> 00:01:34,560
on the network perimeter<font color="#CCCCCC"> to gain access</font>

30
00:01:31,500 --> 00:01:38,189
to your<font color="#E5E5E5"> infrastructure</font><font color="#CCCCCC"> and services</font><font color="#E5E5E5"> and</font>

31
00:01:34,560 --> 00:01:43,590
<font color="#E5E5E5">so</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> they it shifted to individual</font>

32
00:01:38,189 --> 00:01:45,750
users<font color="#CCCCCC"> and</font><font color="#E5E5E5"> devices</font><font color="#CCCCCC"> and sort of at the</font>

33
00:01:43,590 --> 00:01:48,180
<font color="#CCCCCC">core of the beyond core</font><font color="#E5E5E5"> vision the</font>

34
00:01:45,750 --> 00:01:55,950
there's the idea<font color="#CCCCCC"> that you know these</font>

35
00:01:48,180 --> 00:01:57,930
perimeters or walls<font color="#E5E5E5"> don't work so yeah</font>

36
00:01:55,950 --> 00:01:59,939
like I already<font color="#CCCCCC"> mentioned</font><font color="#E5E5E5"> we you know we</font>

37
00:01:57,930 --> 00:02:04,320
<font color="#E5E5E5">replace trust in the in the network with</font>

38
00:01:59,939 --> 00:02:05,850
trust in the device<font color="#E5E5E5"> and the user so it</font>

39
00:02:04,320 --> 00:02:08,959
wouldn't matter if you were<font color="#CCCCCC"> for</font><font color="#E5E5E5"> example</font>

40
00:02:05,850 --> 00:02:11,819
<font color="#CCCCCC">working from a coffee shop</font><font color="#E5E5E5"> or a plane or</font>

41
00:02:08,959 --> 00:02:13,310
<font color="#E5E5E5">your corporate</font><font color="#CCCCCC"> headquarters you would</font>

42
00:02:11,819 --> 00:02:16,369
get the<font color="#E5E5E5"> same checks</font>

43
00:02:13,310 --> 00:02:19,430
<font color="#E5E5E5">regardless</font><font color="#CCCCCC"> so as an example</font><font color="#E5E5E5"> we'll say</font>

44
00:02:16,370 --> 00:02:21,110
<font color="#E5E5E5">like to access the company lunch menu</font>

45
00:02:19,430 --> 00:02:22,580
which we<font color="#CCCCCC"> don't really care about</font><font color="#E5E5E5"> maybe</font>

46
00:02:21,110 --> 00:02:25,010
you just have to have a managed<font color="#CCCCCC"> device</font>

47
00:02:22,580 --> 00:02:27,440
which would be determined<font color="#E5E5E5"> by maybe the</font>

48
00:02:25,010 --> 00:02:29,780
<font color="#E5E5E5">presence of a certificate</font><font color="#CCCCCC"> but to access</font>

49
00:02:27,440 --> 00:02:31,190
source code<font color="#E5E5E5"> or the crown jewels</font><font color="#CCCCCC"> you</font>

50
00:02:29,780 --> 00:02:33,140
would need more<font color="#E5E5E5"> than</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> you know not</font>

51
00:02:31,190 --> 00:02:39,250
<font color="#CCCCCC">only tap a managed device but maybe the</font>

52
00:02:33,140 --> 00:02:42,170
<font color="#E5E5E5">latest security patches and so on so</font>

53
00:02:39,250 --> 00:02:44,930
<font color="#CCCCCC">beyond</font><font color="#E5E5E5"> Corp is a complex system it's</font>

54
00:02:42,170 --> 00:02:47,480
it's been discussed at length by by

55
00:02:44,930 --> 00:02:50,570
<font color="#E5E5E5">Google most notably and their research</font>

56
00:02:47,480 --> 00:02:52,010
papers<font color="#CCCCCC"> today</font><font color="#E5E5E5"> I'm just going to be</font>

57
00:02:50,570 --> 00:02:54,019
<font color="#E5E5E5">talking about one part of it which</font><font color="#CCCCCC"> is</font>

58
00:02:52,010 --> 00:02:57,489
<font color="#CCCCCC">the access proxy</font><font color="#E5E5E5"> which is responsible</font>

59
00:02:54,019 --> 00:03:00,080
for<font color="#E5E5E5"> gaining access to applications or</font>

60
00:02:57,489 --> 00:03:09,230
<font color="#CCCCCC">services behind that and in your</font>

61
00:03:00,080 --> 00:03:11,150
corporate<font color="#E5E5E5"> network so before I get too</font>

62
00:03:09,230 --> 00:03:14,209
<font color="#CCCCCC">far into this</font><font color="#E5E5E5"> just some terminology</font>

63
00:03:11,150 --> 00:03:18,019
<font color="#CCCCCC">we'll I'll say that you know in our case</font>

64
00:03:14,209 --> 00:03:22,250
the access proxy for us was a web server

65
00:03:18,019 --> 00:03:24,380
running<font color="#CCCCCC"> nginx and it is responsible for</font>

66
00:03:22,250 --> 00:03:27,620
authorizing and then proxying those

67
00:03:24,380 --> 00:03:30,140
requests to the<font color="#CCCCCC"> back-end services and a</font>

68
00:03:27,620 --> 00:03:34,010
service<font color="#E5E5E5"> in our case is just anything</font>

69
00:03:30,140 --> 00:03:36,380
that<font color="#CCCCCC"> sits behind this access proxy</font><font color="#E5E5E5"> so</font>

70
00:03:34,010 --> 00:03:40,790
whether that's an<font color="#CCCCCC"> SSH server RDP VNC</font>

71
00:03:36,380 --> 00:03:45,230
whatever<font color="#CCCCCC"> and to give</font><font color="#E5E5E5"> you a little more</font>

72
00:03:40,790 --> 00:03:47,989
clarity on<font color="#CCCCCC"> that the access proxy is a</font>

73
00:03:45,230 --> 00:03:51,230
web application<font color="#E5E5E5"> that determines whether</font>

74
00:03:47,989 --> 00:03:55,310
a user is act authorized to access<font color="#E5E5E5"> a</font>

75
00:03:51,230 --> 00:03:59,268
service and then the<font color="#E5E5E5"> reverse proxy in</font>

76
00:03:55,310 --> 00:04:01,850
our case nginx would communicate<font color="#CCCCCC"> with</font>

77
00:03:59,269 --> 00:04:04,250
this application to<font color="#CCCCCC"> determine if that</font>

78
00:04:01,850 --> 00:04:12,230
<font color="#E5E5E5">you know if the request should be author</font>

79
00:04:04,250 --> 00:04:15,019
<font color="#E5E5E5">or allowed</font><font color="#CCCCCC"> to pass and then a service</font><font color="#E5E5E5"> in</font>

80
00:04:12,230 --> 00:04:17,810
in our case was basically a DNS name

81
00:04:15,019 --> 00:04:21,709
that's how we identify<font color="#CCCCCC"> it in in our</font>

82
00:04:17,810 --> 00:04:24,110
<font color="#CCCCCC">back-end which has both like an</font><font color="#E5E5E5"> external</font>

83
00:04:21,709 --> 00:04:26,639
name and an internal<font color="#E5E5E5"> hostname or IP and</font>

84
00:04:24,110 --> 00:04:29,310
then the access proxy<font color="#CCCCCC"> is</font><font color="#E5E5E5"> responsible</font>

85
00:04:26,639 --> 00:04:38,879
for determining what you know what

86
00:04:29,310 --> 00:04:40,379
<font color="#E5E5E5">services you have access</font><font color="#CCCCCC"> to so the the</font>

87
00:04:38,879 --> 00:04:44,669
<font color="#CCCCCC">first thing that</font><font color="#E5E5E5"> we decided to tackle</font>

88
00:04:40,379 --> 00:04:46,740
when we when we you know<font color="#CCCCCC"> when about you</font>

89
00:04:44,669 --> 00:04:51,000
know<font color="#E5E5E5"> creating our own beyond Corp sort</font>

90
00:04:46,740 --> 00:04:54,030
<font color="#E5E5E5">of inspired by by Google's was web</font>

91
00:04:51,000 --> 00:04:57,569
applications<font color="#E5E5E5"> that's arguably the</font><font color="#CCCCCC"> easiest</font>

92
00:04:54,030 --> 00:05:00,119
part<font color="#CCCCCC"> and in many cases</font><font color="#E5E5E5"> is the the most</font>

93
00:04:57,569 --> 00:05:02,430
important for for us we had a you<font color="#E5E5E5"> know</font>

94
00:05:00,120 --> 00:05:05,669
<font color="#E5E5E5">every employee needs to access</font><font color="#CCCCCC"> at least</font>

95
00:05:02,430 --> 00:05:09,090
a handful of web applications that<font color="#E5E5E5"> are</font>

96
00:05:05,669 --> 00:05:11,159
hosted on Prem<font color="#CCCCCC"> and we wanted</font><font color="#E5E5E5"> a way for</font>

97
00:05:09,090 --> 00:05:13,679
<font color="#CCCCCC">our employees</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> be able</font><font color="#E5E5E5"> to access those</font>

98
00:05:11,159 --> 00:05:18,719
web applications<font color="#CCCCCC"> without a VPN so that's</font>

99
00:05:13,680 --> 00:05:20,370
what we<font color="#CCCCCC"> sold</font><font color="#E5E5E5"> first and this is an overly</font>

100
00:05:18,719 --> 00:05:22,110
simplified diagram but I think you'll

101
00:05:20,370 --> 00:05:24,419
get<font color="#E5E5E5"> the idea</font><font color="#CCCCCC"> basically we have external</font>

102
00:05:22,110 --> 00:05:26,939
clients or you know<font color="#E5E5E5"> maybe internal in</font>

103
00:05:24,419 --> 00:05:29,039
some cases that just want to access

104
00:05:26,939 --> 00:05:36,509
on-premise stuff and the access proxy is

105
00:05:29,039 --> 00:05:38,339
what did gates that<font color="#E5E5E5"> access so</font><font color="#CCCCCC"> next I'm</font>

106
00:05:36,509 --> 00:05:42,509
<font color="#E5E5E5">going to talk</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> the authentication</font>

107
00:05:38,339 --> 00:05:45,180
<font color="#E5E5E5">flow we used to sort</font><font color="#CCCCCC"> of handle this</font>

108
00:05:42,509 --> 00:05:48,210
so nginx has a pretty<font color="#E5E5E5"> cool feature</font>

109
00:05:45,180 --> 00:05:52,379
<font color="#E5E5E5">called auth request so this off request</font>

110
00:05:48,210 --> 00:05:56,279
directive can<font color="#E5E5E5"> be used to basically like</font>

111
00:05:52,379 --> 00:05:59,250
when a request comes in to like nginx it

112
00:05:56,279 --> 00:06:02,189
is passed on<font color="#E5E5E5"> to a sub request so our web</font>

113
00:05:59,250 --> 00:06:06,300
application in our<font color="#E5E5E5"> case it's a cyclone</font>

114
00:06:02,189 --> 00:06:08,009
web app and<font color="#E5E5E5"> if that sub request</font>

115
00:06:06,300 --> 00:06:10,139
determines that the user is authorized

116
00:06:08,009 --> 00:06:12,210
to<font color="#CCCCCC"> access the service</font><font color="#E5E5E5"> so maybe they go</font>

117
00:06:10,139 --> 00:06:15,839
through an SSO flow they do<font color="#CCCCCC"> -</font><font color="#E5E5E5"> if a</font>

118
00:06:12,210 --> 00:06:19,919
whatever<font color="#CCCCCC"> then it returns a 200 and then</font>

119
00:06:15,839 --> 00:06:22,680
nginx treats that as<font color="#E5E5E5"> or</font><font color="#CCCCCC"> it treats that</font>

120
00:06:19,919 --> 00:06:26,870
<font color="#E5E5E5">request as authorized if it returns a</font>

121
00:06:22,680 --> 00:06:29,339
401 or<font color="#E5E5E5"> 403</font><font color="#CCCCCC"> it's denied</font><font color="#E5E5E5"> and any other</font>

122
00:06:26,870 --> 00:06:32,270
status code is considered an error<font color="#E5E5E5"> and</font>

123
00:06:29,339 --> 00:06:32,270
access won't be allowed

124
00:06:33,780 --> 00:06:39,510
so the the application<font color="#E5E5E5"> will check for</font>

125
00:06:37,620 --> 00:06:40,890
<font color="#E5E5E5">the</font><font color="#CCCCCC"> presence</font><font color="#E5E5E5"> of a you know</font><font color="#CCCCCC"> a valid</font>

126
00:06:39,510 --> 00:06:41,640
session cookie<font color="#E5E5E5"> for that particular</font>

127
00:06:40,890 --> 00:06:45,289
service

128
00:06:41,640 --> 00:06:48,000
so like wiki<font color="#CCCCCC"> example.com or whatever and</font>

129
00:06:45,290 --> 00:06:51,680
if the user is authorized to<font color="#CCCCCC"> access that</font>

130
00:06:48,000 --> 00:06:55,230
we return a<font color="#E5E5E5"> 200 if not we return a 401</font>

131
00:06:51,680 --> 00:06:57,210
<font color="#E5E5E5">and then tell which tells nginx to</font>

132
00:06:55,230 --> 00:06:59,190
redirect to like a<font color="#E5E5E5"> login handler for</font>

133
00:06:57,210 --> 00:07:01,260
exhibit for example like if you know

134
00:06:59,190 --> 00:07:05,460
they<font color="#CCCCCC"> just didn't have a you know</font><font color="#E5E5E5"> that</font>

135
00:07:01,260 --> 00:07:07,080
<font color="#CCCCCC">cookie</font><font color="#E5E5E5"> and then once authorized nginx</font>

136
00:07:05,460 --> 00:07:14,190
will proxy the request to the<font color="#CCCCCC"> back-end</font>

137
00:07:07,080 --> 00:07:16,169
service so this actually you know it's

138
00:07:14,190 --> 00:07:19,260
simplified<font color="#E5E5E5"> but this is basically the</font>

139
00:07:16,169 --> 00:07:22,380
<font color="#CCCCCC">gist of how you would configure nginx as</font>

140
00:07:19,260 --> 00:07:25,800
an example to work with an application

141
00:07:22,380 --> 00:07:28,490
like this we you know point the author

142
00:07:25,800 --> 00:07:33,620
request<font color="#E5E5E5"> to this slash verify handler</font>

143
00:07:28,490 --> 00:07:37,110
which is an internal<font color="#CCCCCC"> Handler and if</font><font color="#E5E5E5"> that</font>

144
00:07:33,620 --> 00:07:41,160
you know<font color="#E5E5E5"> request returns</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> 200 then its</font>

145
00:07:37,110 --> 00:07:44,070
nginx will pass along<font color="#E5E5E5"> if not then we we</font>

146
00:07:41,160 --> 00:07:46,380
<font color="#CCCCCC">actually set the value of</font><font color="#E5E5E5"> this this</font>

147
00:07:44,070 --> 00:07:50,250
variable here<font color="#E5E5E5"> for example access proxy</font>

148
00:07:46,380 --> 00:07:54,870
check to the<font color="#CCCCCC"> login URL</font><font color="#E5E5E5"> and then set the</font>

149
00:07:50,250 --> 00:07:57,540
error page<font color="#E5E5E5"> to that custom login handler</font>

150
00:07:54,870 --> 00:07:58,919
<font color="#E5E5E5">so when it gets a 401</font><font color="#CCCCCC"> s you know nginx</font>

151
00:07:57,540 --> 00:08:01,350
will say okay this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> your error page</font>

152
00:07:58,919 --> 00:08:06,060
kind<font color="#CCCCCC"> of like a custom 404</font><font color="#E5E5E5"> or something</font>

153
00:08:01,350 --> 00:08:09,270
like<font color="#E5E5E5"> that</font><font color="#CCCCCC"> but a little</font><font color="#E5E5E5"> different</font><font color="#CCCCCC"> so that</font>

154
00:08:06,060 --> 00:08:12,750
<font color="#CCCCCC">that's sort of</font><font color="#E5E5E5"> like</font><font color="#CCCCCC"> the the overall</font><font color="#E5E5E5"> like</font>

155
00:08:09,270 --> 00:08:14,490
architecture of like this how this<font color="#E5E5E5"> is</font>

156
00:08:12,750 --> 00:08:16,800
handled for<font color="#E5E5E5"> web applications but next</font>

157
00:08:14,490 --> 00:08:22,229
<font color="#CCCCCC">I'm going</font><font color="#E5E5E5"> to talk</font><font color="#CCCCCC"> about how we solve</font><font color="#E5E5E5"> for</font>

158
00:08:16,800 --> 00:08:25,169
<font color="#E5E5E5">this for with SSH and why did we care</font>

159
00:08:22,229 --> 00:08:27,539
about SSH<font color="#CCCCCC"> for us internally</font><font color="#E5E5E5"> it was</font>

160
00:08:25,169 --> 00:08:30,210
really second only to<font color="#CCCCCC"> two web</font>

161
00:08:27,540 --> 00:08:32,250
applications and we really wanted<font color="#E5E5E5"> to set</font>

162
00:08:30,210 --> 00:08:38,669
our VPN on<font color="#E5E5E5"> fire so that's what we solved</font>

163
00:08:32,250 --> 00:08:40,679
for next and<font color="#CCCCCC"> at the start</font><font color="#E5E5E5"> of this that</font>

164
00:08:38,669 --> 00:08:44,039
we you know had a few like tenants that

165
00:08:40,679 --> 00:08:46,109
we wanted<font color="#CCCCCC"> to stick to the first one I</font>

166
00:08:44,039 --> 00:08:46,970
<font color="#E5E5E5">mentioned here is that it must be easy</font>

167
00:08:46,110 --> 00:08:49,300
<font color="#E5E5E5">to add</font>

168
00:08:46,970 --> 00:08:51,080
services that<font color="#CCCCCC"> are behind the Oxus proxy</font>

169
00:08:49,300 --> 00:08:53,540
and<font color="#E5E5E5"> that's something</font><font color="#CCCCCC"> that Google</font>

170
00:08:51,080 --> 00:08:56,720
stresses is pretty important in one of

171
00:08:53,540 --> 00:08:58,430
the<font color="#E5E5E5"> beyond court papers</font><font color="#CCCCCC"> another thing is</font>

172
00:08:56,720 --> 00:09:00,440
we<font color="#E5E5E5"> we wanted we didn't want to write our</font>

173
00:08:58,430 --> 00:09:04,040
own<font color="#E5E5E5"> like SSH</font>

174
00:09:00,440 --> 00:09:06,080
you know<font color="#CCCCCC"> tooling for like Mac OS or</font>

175
00:09:04,040 --> 00:09:08,180
<font color="#CCCCCC">Windows like for anything</font><font color="#E5E5E5"> we wanted to</font>

176
00:09:06,080 --> 00:09:11,900
use the existing tooling<font color="#CCCCCC"> but then also</font>

177
00:09:08,180 --> 00:09:14,890
<font color="#E5E5E5">support chrome secure shell because we</font>

178
00:09:11,900 --> 00:09:17,390
do use<font color="#CCCCCC"> Chrome OS</font><font color="#E5E5E5"> pretty heavily at duo</font>

179
00:09:14,890 --> 00:09:20,600
and then this<font color="#E5E5E5"> last</font><font color="#CCCCCC"> one here we</font><font color="#E5E5E5"> wanted to</font>

180
00:09:17,390 --> 00:09:24,740
be able<font color="#CCCCCC"> to excuse me um keep the exact</font>

181
00:09:20,600 --> 00:09:27,440
<font color="#E5E5E5">same authentication</font><font color="#CCCCCC"> flow for both SSH</font>

182
00:09:24,740 --> 00:09:36,230
<font color="#CCCCCC">and or</font><font color="#E5E5E5"> like any any other protocol in</font>

183
00:09:27,440 --> 00:09:37,940
addition to web applications and so yeah

184
00:09:36,230 --> 00:09:40,460
<font color="#E5E5E5">so we've preferred to keep the same</font>

185
00:09:37,940 --> 00:09:42,410
authentication<font color="#E5E5E5"> flow and then what</font>

186
00:09:40,460 --> 00:09:45,670
enabled<font color="#E5E5E5"> us to do that was using</font><font color="#CCCCCC"> a</font>

187
00:09:42,410 --> 00:09:45,670
browser based authentication flow

188
00:09:46,540 --> 00:09:51,170
another<font color="#E5E5E5"> thing that we thought would be</font>

189
00:09:48,770 --> 00:09:53,540
you know that we determined to be quite

190
00:09:51,170 --> 00:09:56,949
important with this was that<font color="#E5E5E5"> the</font><font color="#CCCCCC"> the</font>

191
00:09:53,540 --> 00:10:02,030
back end like the SSH server or whatever

192
00:09:56,950 --> 00:10:03,920
<font color="#CCCCCC">shouldn't know that the you know</font><font color="#E5E5E5"> that</font>

193
00:10:02,030 --> 00:10:05,000
traffic is passing through<font color="#E5E5E5"> this access</font>

194
00:10:03,920 --> 00:10:10,520
proxy or should be<font color="#E5E5E5"> completely</font>

195
00:10:05,000 --> 00:10:13,670
transparent<font color="#CCCCCC"> and for non HTTP protocols</font>

196
00:10:10,520 --> 00:10:21,410
we were<font color="#CCCCCC"> able to use</font><font color="#E5E5E5"> WebSockets to make</font>

197
00:10:13,670 --> 00:10:23,630
this or to do this<font color="#CCCCCC"> so this is</font><font color="#E5E5E5"> from one</font>

198
00:10:21,410 --> 00:10:27,469
<font color="#CCCCCC">of</font><font color="#E5E5E5"> the beyond court papers beyond</font><font color="#CCCCCC"> core</font>

199
00:10:23,630 --> 00:10:31,730
<font color="#E5E5E5">part 3</font><font color="#CCCCCC"> google talks about wrapping ssh</font>

200
00:10:27,470 --> 00:10:33,170
traffic<font color="#E5E5E5"> in HTTP over TLS and then they</font>

201
00:10:31,730 --> 00:10:34,390
<font color="#CCCCCC">talked</font><font color="#E5E5E5"> about</font><font color="#CCCCCC"> this proxy command thing</font>

202
00:10:33,170 --> 00:10:37,099
which I'll get to in<font color="#CCCCCC"> a bit</font>

203
00:10:34,390 --> 00:10:40,850
<font color="#CCCCCC">they call it easy I generally disagree</font>

204
00:10:37,100 --> 00:10:47,390
with that but yeah<font color="#CCCCCC"> maybe</font><font color="#E5E5E5"> it is</font><font color="#CCCCCC"> for</font>

205
00:10:40,850 --> 00:10:49,130
<font color="#E5E5E5">Google so when we were like you know</font>

206
00:10:47,390 --> 00:10:52,339
trying to<font color="#E5E5E5"> figure this out we you know we</font>

207
00:10:49,130 --> 00:10:54,160
knew we wanted<font color="#E5E5E5"> to I wanted our solution</font>

208
00:10:52,339 --> 00:10:56,839
<font color="#E5E5E5">to work with</font><font color="#CCCCCC"> chrome secure shell</font>

209
00:10:54,160 --> 00:10:58,850
unfortunately chrome secure shell is is

210
00:10:56,839 --> 00:11:00,540
<font color="#E5E5E5">open source</font><font color="#CCCCCC"> we you</font><font color="#E5E5E5"> know we knew about</font>

211
00:10:58,850 --> 00:11:03,449
this like

212
00:11:00,540 --> 00:11:04,920
there's like<font color="#E5E5E5"> this relay option relay</font>

213
00:11:03,449 --> 00:11:07,649
options text field if you look at the

214
00:11:04,920 --> 00:11:10,829
chrome secure shell this this file in

215
00:11:07,649 --> 00:11:12,360
particular is responsible for for

216
00:11:10,829 --> 00:11:15,929
<font color="#E5E5E5">handling that and it and it actually</font>

217
00:11:12,360 --> 00:11:21,119
<font color="#E5E5E5">talks about Google's internal HTTP to</font>

218
00:11:15,929 --> 00:11:23,819
SSH relay<font color="#E5E5E5"> and although Google you know</font>

219
00:11:21,119 --> 00:11:25,139
they say in<font color="#E5E5E5"> this file that you know the</font>

220
00:11:23,819 --> 00:11:27,059
source code isn't<font color="#E5E5E5"> available and we don't</font>

221
00:11:25,139 --> 00:11:29,189
have any public<font color="#E5E5E5"> relays there's enough</font>

222
00:11:27,059 --> 00:11:30,809
<font color="#CCCCCC">information here</font><font color="#E5E5E5"> for you to probably you</font>

223
00:11:29,189 --> 00:11:35,429
know create one of<font color="#CCCCCC"> your own which we</font>

224
00:11:30,809 --> 00:11:37,949
wanted to yeah<font color="#CCCCCC"> that was that's an</font><font color="#E5E5E5"> actual</font>

225
00:11:35,429 --> 00:11:44,309
gift of my face when when I figured that

226
00:11:37,949 --> 00:11:46,199
out<font color="#CCCCCC"> yeah</font><font color="#E5E5E5"> so after</font><font color="#CCCCCC"> this I'm</font><font color="#E5E5E5"> gonna sort of</font>

227
00:11:44,309 --> 00:11:48,389
<font color="#E5E5E5">talk about</font><font color="#CCCCCC"> like the like behind</font><font color="#E5E5E5"> the</font>

228
00:11:46,199 --> 00:11:49,799
<font color="#E5E5E5">scenes how everything works but before</font>

229
00:11:48,389 --> 00:11:51,899
we get<font color="#E5E5E5"> there I'm just gonna give you it</font>

230
00:11:49,799 --> 00:11:54,509
<font color="#E5E5E5">like just a quick idea</font><font color="#CCCCCC"> of what it looks</font>

231
00:11:51,899 --> 00:11:57,529
<font color="#CCCCCC">like for Chrome secure shell so the user</font>

232
00:11:54,509 --> 00:11:57,529
click connect

233
00:12:03,390 --> 00:12:06,920
and the user would authenticate

234
00:12:15,590 --> 00:12:19,940
and then once we've<font color="#CCCCCC"> determined that</font><font color="#E5E5E5"> the</font>

235
00:12:17,750 --> 00:12:22,760
<font color="#CCCCCC">user is authorized to access that</font>

236
00:12:19,940 --> 00:12:26,710
resource<font color="#E5E5E5"> we just redirect back to the</font>

237
00:12:22,760 --> 00:12:30,290
Chrome extension<font color="#CCCCCC"> URI and at that point</font>

238
00:12:26,710 --> 00:12:32,660
bytes are being tunneled through the

239
00:12:30,290 --> 00:12:36,529
access proxy and then passed on<font color="#CCCCCC"> to the</font>

240
00:12:32,660 --> 00:12:38,480
to the<font color="#E5E5E5"> back-end service and all of that</font>

241
00:12:36,529 --> 00:12:44,120
nyan cat is going<font color="#E5E5E5"> through the access</font>

242
00:12:38,480 --> 00:12:46,400
proxy<font color="#CCCCCC"> all those bytes okay so for Mac OS</font>

243
00:12:44,120 --> 00:12:51,470
for example<font color="#E5E5E5"> we</font><font color="#CCCCCC"> just use you know an</font>

244
00:12:46,400 --> 00:12:54,410
<font color="#E5E5E5">existing</font><font color="#CCCCCC"> OpenSSH user types ssh user -</font>

245
00:12:51,470 --> 00:12:56,210
whatever like they normally<font color="#E5E5E5"> would we go</font>

246
00:12:54,410 --> 00:12:57,410
through<font color="#CCCCCC"> the exhaust the browser go</font>

247
00:12:56,210 --> 00:13:01,010
through the exact same authentication

248
00:12:57,410 --> 00:13:02,329
<font color="#CCCCCC">flow that we do for for any of you know</font>

249
00:13:01,010 --> 00:13:07,130
for web applications<font color="#E5E5E5"> or for chrome</font>

250
00:13:02,330 --> 00:13:12,529
secure shell<font color="#E5E5E5"> the user authenticates and</font>

251
00:13:07,130 --> 00:13:15,529
at this<font color="#E5E5E5"> point we actually redirect the</font>

252
00:13:12,529 --> 00:13:17,779
the credential back to a local HTTP

253
00:13:15,529 --> 00:13:21,080
server that<font color="#E5E5E5"> we stand up through that</font>

254
00:13:17,779 --> 00:13:23,510
that<font color="#E5E5E5"> native like on-demand proxy that</font>

255
00:13:21,080 --> 00:13:27,980
way when<font color="#E5E5E5"> we established the WebSocket</font>

256
00:13:23,510 --> 00:13:29,089
connection to that the access proxy<font color="#CCCCCC"> you</font>

257
00:13:27,980 --> 00:13:31,850
know we're able to<font color="#E5E5E5"> provide those</font>

258
00:13:29,089 --> 00:13:33,710
credentials<font color="#CCCCCC"> because unlike Chrome</font><font color="#E5E5E5"> OS it</font>

259
00:13:31,850 --> 00:13:41,120
doesn't inherit<font color="#E5E5E5"> that it's not a</font>

260
00:13:33,710 --> 00:13:45,140
browser-based application so in a

261
00:13:41,120 --> 00:13:47,360
nutshell the this is<font color="#E5E5E5"> like the the flow</font>

262
00:13:45,140 --> 00:13:50,540
for chrome chrome secure shell the

263
00:13:47,360 --> 00:13:52,250
client is a you know<font color="#E5E5E5"> WebSockets client</font>

264
00:13:50,540 --> 00:13:54,140
those bytes<font color="#E5E5E5"> flow through the access</font>

265
00:13:52,250 --> 00:13:56,960
proxy and then we have you<font color="#E5E5E5"> know the</font>

266
00:13:54,140 --> 00:13:58,160
access proxy handles<font color="#E5E5E5"> taking that data</font>

267
00:13:56,960 --> 00:14:03,440
<font color="#E5E5E5">and</font><font color="#CCCCCC"> then passing it</font><font color="#E5E5E5"> on to the</font><font color="#CCCCCC"> backend</font>

268
00:13:58,160 --> 00:14:04,790
<font color="#CCCCCC">with the native ssh tooling we you know</font>

269
00:14:03,440 --> 00:14:06,980
I mentioned<font color="#E5E5E5"> we wanted to you</font><font color="#CCCCCC"> know we</font>

270
00:14:04,790 --> 00:14:08,920
didn't want<font color="#CCCCCC"> to write our own client</font><font color="#E5E5E5"> so</font>

271
00:14:06,980 --> 00:14:13,010
<font color="#E5E5E5">we took advantage</font><font color="#CCCCCC"> of this proxy command</font>

272
00:14:08,920 --> 00:14:15,650
<font color="#E5E5E5">directive in SSH</font><font color="#CCCCCC"> and that Google also</font>

273
00:14:13,010 --> 00:14:18,080
mentions in<font color="#CCCCCC"> the beyond core papers and</font>

274
00:14:15,650 --> 00:14:21,680
then what that<font color="#CCCCCC"> does is you know for</font>

275
00:14:18,080 --> 00:14:23,959
specific hosts for example<font color="#E5E5E5"> it'll</font>

276
00:14:21,680 --> 00:14:26,270
actually launch your<font color="#CCCCCC"> on-demand binary</font>

277
00:14:23,959 --> 00:14:28,910
and then your you<font color="#CCCCCC"> know you can do</font>

278
00:14:26,270 --> 00:14:30,740
whatever you want with that<font color="#CCCCCC"> traffic</font>

279
00:14:28,910 --> 00:14:33,770
<font color="#CCCCCC">cusses</font><font color="#E5E5E5"> it as like standard input to your</font>

280
00:14:30,740 --> 00:14:36,620
program like the ssh traffic we<font color="#E5E5E5"> tunnel</font>

281
00:14:33,770 --> 00:14:40,150
<font color="#E5E5E5">that in</font><font color="#CCCCCC"> web sockets</font><font color="#E5E5E5"> and then you know it</font>

282
00:14:36,620 --> 00:14:40,150
makes its way to the<font color="#E5E5E5"> back end eventually</font>

283
00:14:43,090 --> 00:14:49,910
so this is you<font color="#CCCCCC"> know somewhat simplified</font>

284
00:14:46,910 --> 00:14:53,949
<font color="#E5E5E5">like data flow diagram for like how it</font>

285
00:14:49,910 --> 00:14:57,140
works with a chrome secure shell and

286
00:14:53,950 --> 00:15:01,820
then slightly more complicated<font color="#E5E5E5"> one but</font>

287
00:14:57,140 --> 00:15:04,550
for for<font color="#CCCCCC"> OpenSSH so as you can</font><font color="#E5E5E5"> see like</font>

288
00:15:01,820 --> 00:15:07,300
the<font color="#CCCCCC"> it all starts with the the</font><font color="#E5E5E5"> user</font>

289
00:15:04,550 --> 00:15:10,280
typing you know<font color="#E5E5E5"> ssh at whatever</font><font color="#CCCCCC"> comm</font>

290
00:15:07,300 --> 00:15:15,439
proxy command launches our<font color="#E5E5E5"> external</font>

291
00:15:10,280 --> 00:15:18,110
program<font color="#CCCCCC"> and at that point</font><font color="#E5E5E5"> we you know</font>

292
00:15:15,440 --> 00:15:20,750
launch the browser<font color="#CCCCCC"> stand</font><font color="#E5E5E5"> up that local</font>

293
00:15:18,110 --> 00:15:23,870
HTTP server<font color="#E5E5E5"> catch that authentication</font>

294
00:15:20,750 --> 00:15:26,960
cookie and then establish the<font color="#E5E5E5"> WebSocket</font>

295
00:15:23,870 --> 00:15:28,640
tunnel to the<font color="#E5E5E5"> to the access proxy and</font>

296
00:15:26,960 --> 00:15:34,040
then the access proxy just tunnels those

297
00:15:28,640 --> 00:15:36,620
bytes back to the<font color="#CCCCCC"> back-end service so</font>

298
00:15:34,040 --> 00:15:40,969
this<font color="#CCCCCC"> gnash really protocol I mentioned</font>

299
00:15:36,620 --> 00:15:47,300
the relay options in the chrome secure

300
00:15:40,970 --> 00:15:51,500
shell you know sort of<font color="#E5E5E5"> like gonna go</font>

301
00:15:47,300 --> 00:15:56,390
over<font color="#E5E5E5"> like what you know how this works</font>

302
00:15:51,500 --> 00:15:58,490
<font color="#CCCCCC">in a nutshell like what what the the</font>

303
00:15:56,390 --> 00:15:59,840
handle<font color="#E5E5E5"> is specific handlers that</font><font color="#CCCCCC"> you</font>

304
00:15:58,490 --> 00:16:03,370
would need to<font color="#E5E5E5"> implement in your access</font>

305
00:15:59,840 --> 00:16:03,370
proxy<font color="#E5E5E5"> to get something</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> this working</font>

306
00:16:06,280 --> 00:16:11,780
so like I<font color="#CCCCCC"> mentioned before like the one</font>

307
00:16:10,340 --> 00:16:15,350
of the cool things<font color="#CCCCCC"> about implementing</font>

308
00:16:11,780 --> 00:16:18,020
<font color="#E5E5E5">this through the implementing the any</font>

309
00:16:15,350 --> 00:16:21,430
SSH<font color="#CCCCCC"> relay protocol is that it</font><font color="#E5E5E5"> just works</font>

310
00:16:18,020 --> 00:16:21,430
<font color="#E5E5E5">out of</font><font color="#CCCCCC"> the box with Chrome OS so</font>

311
00:16:21,460 --> 00:16:31,190
<font color="#CCCCCC">WebSockets</font><font color="#E5E5E5"> what the hell are they</font><font color="#CCCCCC"> so</font>

312
00:16:26,020 --> 00:16:33,439
it's defined<font color="#E5E5E5"> in this</font><font color="#CCCCCC"> RFC s-64 55 it's</font>

313
00:16:31,190 --> 00:16:35,360
basic message framing layered over<font color="#CCCCCC"> TCP</font>

314
00:16:33,440 --> 00:16:37,640
and it's designed for browser-based

315
00:16:35,360 --> 00:16:40,580
applications<font color="#E5E5E5"> for opening up like a</font>

316
00:16:37,640 --> 00:16:42,590
persistent<font color="#CCCCCC"> connection from</font><font color="#E5E5E5"> you know a</font>

317
00:16:40,580 --> 00:16:44,150
web<font color="#CCCCCC"> application to</font><font color="#E5E5E5"> a back-end with</font>

318
00:16:42,590 --> 00:16:46,820
having to<font color="#CCCCCC"> open up multiple HTTP</font>

319
00:16:44,150 --> 00:16:49,130
connections<font color="#E5E5E5"> but one of the interesting</font>

320
00:16:46,820 --> 00:16:50,480
things about you<font color="#E5E5E5"> know this using</font>

321
00:16:49,130 --> 00:16:54,470
<font color="#E5E5E5">WebSockets and Google actually talks</font>

322
00:16:50,480 --> 00:16:56,980
<font color="#E5E5E5">about this in the papers with SSH in</font>

323
00:16:54,470 --> 00:17:00,130
particular the the credential is

324
00:16:56,980 --> 00:17:06,020
inherently portable<font color="#E5E5E5"> but we you know</font>

325
00:17:00,130 --> 00:17:08,359
<font color="#CCCCCC">whereas like you know something</font><font color="#E5E5E5"> like you</font>

326
00:17:06,020 --> 00:17:10,129
know we we<font color="#E5E5E5"> wouldn't be able to like for</font>

327
00:17:08,359 --> 00:17:14,659
<font color="#CCCCCC">example like tie a device identifier to</font>

328
00:17:10,130 --> 00:17:15,620
<font color="#E5E5E5">an SSH a certificate with WebSockets we</font>

329
00:17:14,660 --> 00:17:17,540
were able<font color="#CCCCCC"> to just completely like</font>

330
00:17:15,619 --> 00:17:19,909
separate the two like you<font color="#E5E5E5"> are you</font>

331
00:17:17,540 --> 00:17:21,800
authorized as your<font color="#E5E5E5"> device authorized and</font>

332
00:17:19,910 --> 00:17:23,510
then you can use you<font color="#E5E5E5"> know whatever</font>

333
00:17:21,800 --> 00:17:25,970
credential<font color="#E5E5E5"> whether it's like a password</font>

334
00:17:23,510 --> 00:17:28,810
<font color="#E5E5E5">or an SSH key or</font><font color="#CCCCCC"> if you're using an SSH</font>

335
00:17:25,970 --> 00:17:30,860
CA that that stuff all just works

336
00:17:28,810 --> 00:17:37,429
<font color="#E5E5E5">completely separately from the device</font>

337
00:17:30,860 --> 00:17:40,159
authentication so the<font color="#E5E5E5"> WebSockets</font>

338
00:17:37,430 --> 00:17:42,740
actually starts out as HTTP the the

339
00:17:40,160 --> 00:17:46,040
<font color="#E5E5E5">client handshake is an HTTP upgrade</font>

340
00:17:42,740 --> 00:17:47,930
request and then once the the<font color="#E5E5E5"> connection</font>

341
00:17:46,040 --> 00:17:50,240
<font color="#CCCCCC">is</font><font color="#E5E5E5"> established then messages are just</font>

342
00:17:47,930 --> 00:17:51,380
<font color="#E5E5E5">passed over this this persistent</font>

343
00:17:50,240 --> 00:17:55,310
connection<font color="#CCCCCC"> just like a lightweight</font>

344
00:17:51,380 --> 00:17:57,590
<font color="#E5E5E5">wrapper</font><font color="#CCCCCC"> over TCP and both the client and</font>

345
00:17:55,310 --> 00:18:00,500
<font color="#E5E5E5">server are able</font><font color="#CCCCCC"> to close the connection</font>

346
00:17:57,590 --> 00:18:02,959
<font color="#CCCCCC">by sending a close control flame frame</font>

347
00:18:00,500 --> 00:18:05,450
that you know<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> just has a specific</font>

348
00:18:02,960 --> 00:18:11,690
opcode<font color="#E5E5E5"> that is understood by by the</font>

349
00:18:05,450 --> 00:18:13,600
client so this is what NH<font color="#CCCCCC"> they're I'm</font>

350
00:18:11,690 --> 00:18:19,400
<font color="#E5E5E5">sorry a a WebSocket</font>

351
00:18:13,600 --> 00:18:21,020
client handshake looks like and then

352
00:18:19,400 --> 00:18:24,470
this<font color="#E5E5E5"> is the server responding to that</font>

353
00:18:21,020 --> 00:18:26,180
with a HTTP 101 switching protocols<font color="#E5E5E5"> and</font>

354
00:18:24,470 --> 00:18:31,550
at that<font color="#E5E5E5"> point the the</font><font color="#CCCCCC"> preceding</font>

355
00:18:26,180 --> 00:18:32,870
persistent connection is established I'm

356
00:18:31,550 --> 00:18:35,690
not going to go over<font color="#CCCCCC"> all this here but</font>

357
00:18:32,870 --> 00:18:39,320
this is like the what the WebSocket

358
00:18:35,690 --> 00:18:42,890
frame looks like<font color="#E5E5E5"> we'll talk a little bit</font>

359
00:18:39,320 --> 00:18:44,600
about like the<font color="#CCCCCC"> op codes but most</font><font color="#E5E5E5"> most of</font>

360
00:18:42,890 --> 00:18:46,010
what we care about are you know what's

361
00:18:44,600 --> 00:18:50,330
actually<font color="#E5E5E5"> in the payload which could just</font>

362
00:18:46,010 --> 00:18:54,210
<font color="#E5E5E5">be anything right and so I've mentioned</font>

363
00:18:50,330 --> 00:18:56,360
<font color="#E5E5E5">any SSH just when I like you know</font>

364
00:18:54,210 --> 00:18:59,600
go over<font color="#E5E5E5"> this here it's it's basically</font>

365
00:18:56,360 --> 00:19:03,629
<font color="#CCCCCC">synonymous with the chrome</font><font color="#E5E5E5"> secure</font><font color="#CCCCCC"> shell</font>

366
00:18:59,600 --> 00:19:05,699
if you look at the readme<font color="#E5E5E5"> it it says</font>

367
00:19:03,630 --> 00:19:08,010
that<font color="#CCCCCC"> it's a chrome app that combines</font>

368
00:19:05,700 --> 00:19:11,250
<font color="#E5E5E5">each term with</font><font color="#CCCCCC"> a Knakal build of OpenSSH</font>

369
00:19:08,010 --> 00:19:13,740
<font color="#E5E5E5">and so what's Knakal Knakal is this</font>

370
00:19:11,250 --> 00:19:16,860
<font color="#E5E5E5">Native Client</font><font color="#CCCCCC"> that is supported</font><font color="#E5E5E5"> in</font>

371
00:19:13,740 --> 00:19:19,730
<font color="#E5E5E5">Chrome</font><font color="#CCCCCC"> and that allows you to</font><font color="#E5E5E5"> run like</font>

372
00:19:16,860 --> 00:19:23,070
compiled C and C++ code in the browser

373
00:19:19,730 --> 00:19:30,240
<font color="#E5E5E5">and each term is just an HTML terminal</font>

374
00:19:23,070 --> 00:19:32,790
emulator so just sort<font color="#E5E5E5"> of an overview</font><font color="#CCCCCC"> of</font>

375
00:19:30,240 --> 00:19:36,090
<font color="#E5E5E5">the the</font><font color="#CCCCCC"> na</font><font color="#E5E5E5"> SSH relay protocol</font>

376
00:19:32,790 --> 00:19:37,550
it's an HTTP<font color="#E5E5E5"> to</font><font color="#CCCCCC"> ssh relay and it's</font>

377
00:19:36,090 --> 00:19:41,510
supported in the chrome secure shell

378
00:19:37,550 --> 00:19:44,100
defines a series of HTTP handlers<font color="#E5E5E5"> that</font>

379
00:19:41,510 --> 00:19:47,070
<font color="#CCCCCC">the if you implement</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> your access</font>

380
00:19:44,100 --> 00:19:50,040
proxy you'll be able<font color="#CCCCCC"> to you know</font><font color="#E5E5E5"> tunnel</font>

381
00:19:47,070 --> 00:19:53,700
that<font color="#E5E5E5"> do that traffic</font><font color="#CCCCCC"> and then at it's at</font>

382
00:19:50,040 --> 00:19:57,470
<font color="#E5E5E5">its core</font><font color="#CCCCCC"> it's it's</font><font color="#E5E5E5"> just the regular old</font>

383
00:19:53,700 --> 00:20:00,200
like ssh traffic with this custom<font color="#E5E5E5"> ack</font>

384
00:19:57,470 --> 00:20:02,670
prepended<font color="#CCCCCC"> to it and then it uses</font>

385
00:20:00,200 --> 00:20:06,270
WebSocket binary frames as opposed to

386
00:20:02,670 --> 00:20:10,590
<font color="#E5E5E5">UTF at utf-8 frames with the exception</font>

387
00:20:06,270 --> 00:20:12,570
of there's a an optional like AK latency

388
00:20:10,590 --> 00:20:15,149
message like<font color="#E5E5E5"> the client is able to</font>

389
00:20:12,570 --> 00:20:17,639
request a cleat and<font color="#CCCCCC"> see from the server</font>

390
00:20:15,150 --> 00:20:22,140
<font color="#CCCCCC">and if you want to do that</font><font color="#E5E5E5"> then that one</font>

391
00:20:17,640 --> 00:20:25,140
uses<font color="#E5E5E5"> the utf-8 frames so this is sort of</font>

392
00:20:22,140 --> 00:20:27,270
the the this payload<font color="#E5E5E5"> here like the</font><font color="#CCCCCC"> AK</font>

393
00:20:25,140 --> 00:20:30,270
and then whatever<font color="#E5E5E5"> you know the SSH</font>

394
00:20:27,270 --> 00:20:36,420
payload<font color="#E5E5E5"> that</font><font color="#CCCCCC"> would be contained within</font>

395
00:20:30,270 --> 00:20:39,540
the overall<font color="#CCCCCC"> WebSocket frame and then so</font>

396
00:20:36,420 --> 00:20:41,850
<font color="#E5E5E5">this</font><font color="#CCCCCC"> AK what it what is this aking thing</font>

397
00:20:39,540 --> 00:20:45,149
that we're talking<font color="#E5E5E5"> about the client and</font>

398
00:20:41,850 --> 00:20:47,610
server<font color="#CCCCCC"> keep track</font><font color="#E5E5E5"> of the bytes that</font><font color="#CCCCCC"> are</font>

399
00:20:45,150 --> 00:20:49,530
read and written and when the the

400
00:20:47,610 --> 00:20:56,689
<font color="#CCCCCC">connection the WebSocket connection is</font>

401
00:20:49,530 --> 00:21:00,420
established to the the access proxy<font color="#E5E5E5"> we</font>

402
00:20:56,690 --> 00:21:02,880
are I'm sorry<font color="#E5E5E5"> that the client reports</font>

403
00:21:00,420 --> 00:21:07,260
the the akan a query string<font color="#E5E5E5"> and then</font>

404
00:21:02,880 --> 00:21:11,370
what the server will do is trim that

405
00:21:07,260 --> 00:21:15,180
this retransmission buffer - that<font color="#E5E5E5"> AK</font>

406
00:21:11,370 --> 00:21:18,260
offset<font color="#CCCCCC"> if it's a new connection</font><font color="#E5E5E5"> the the</font>

407
00:21:15,180 --> 00:21:22,200
<font color="#E5E5E5">client would just report zero for its</font><font color="#CCCCCC"> AK</font>

408
00:21:18,260 --> 00:21:24,180
and then<font color="#E5E5E5"> this retransmission buffer this</font>

409
00:21:22,200 --> 00:21:26,030
<font color="#E5E5E5">is</font><font color="#CCCCCC"> also defined in the N assh relay</font>

410
00:21:24,180 --> 00:21:29,490
<font color="#E5E5E5">protocol</font>

411
00:21:26,030 --> 00:21:31,590
both the server needs to<font color="#E5E5E5"> keep will keep</font>

412
00:21:29,490 --> 00:21:35,030
track of the bytes received by the

413
00:21:31,590 --> 00:21:37,500
<font color="#CCCCCC">back-end service and then we trim the</font>

414
00:21:35,030 --> 00:21:39,480
<font color="#CCCCCC">that retransmission buffer whenever we</font>

415
00:21:37,500 --> 00:21:41,040
receive an updated<font color="#CCCCCC"> ACK from the client</font>

416
00:21:39,480 --> 00:21:45,300
<font color="#E5E5E5">and so when when there's a new</font>

417
00:21:41,040 --> 00:21:46,710
connection<font color="#E5E5E5"> to to this access proxy</font><font color="#CCCCCC"> it'll</font>

418
00:21:45,300 --> 00:21:49,889
be in the query string because it starts

419
00:21:46,710 --> 00:21:51,660
out as an HTTP<font color="#E5E5E5"> request</font><font color="#CCCCCC"> and then once</font>

420
00:21:49,890 --> 00:21:54,890
it's the the WebSocket connection is

421
00:21:51,660 --> 00:21:57,600
established<font color="#CCCCCC"> it's just that for byte</font>

422
00:21:54,890 --> 00:22:01,020
integer that is prepended<font color="#CCCCCC"> to the</font><font color="#E5E5E5"> ssh</font>

423
00:21:57,600 --> 00:22:07,409
payload and then we use that<font color="#E5E5E5"> to trim the</font>

424
00:22:01,020 --> 00:22:10,620
retransmission buffer so<font color="#CCCCCC"> talked a little</font>

425
00:22:07,410 --> 00:22:13,380
<font color="#CCCCCC">bit about the the server implementation</font>

426
00:22:10,620 --> 00:22:14,820
here<font color="#CCCCCC"> just real quick</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> is like these</font>

427
00:22:13,380 --> 00:22:19,050
<font color="#E5E5E5">three lines you would need to add if</font>

428
00:22:14,820 --> 00:22:21,330
you're using nginx for example<font color="#CCCCCC"> - - your</font>

429
00:22:19,050 --> 00:22:28,470
config file to support WebSocket

430
00:22:21,330 --> 00:22:30,570
connections and then I mentioned earlier

431
00:22:28,470 --> 00:22:36,540
that we<font color="#CCCCCC"> use cyclone cyclone is just a</font>

432
00:22:30,570 --> 00:22:38,490
it's a Python framework that is built on

433
00:22:36,540 --> 00:22:41,580
<font color="#E5E5E5">top of the the twisted Python framework</font>

434
00:22:38,490 --> 00:22:44,100
<font color="#CCCCCC">it had it's a web</font><font color="#E5E5E5"> application framework</font>

435
00:22:41,580 --> 00:22:46,649
and it had support<font color="#E5E5E5"> built in for using</font>

436
00:22:44,100 --> 00:22:47,550
<font color="#E5E5E5">WebSockets</font><font color="#CCCCCC"> which was nice because we</font>

437
00:22:46,650 --> 00:22:51,680
didn't<font color="#E5E5E5"> need to add any</font><font color="#CCCCCC"> additional</font>

438
00:22:47,550 --> 00:22:55,320
dependencies<font color="#CCCCCC"> to our access proxy code</font>

439
00:22:51,680 --> 00:22:57,390
there was a minor<font color="#CCCCCC"> modification that that</font>

440
00:22:55,320 --> 00:23:01,080
we needed<font color="#E5E5E5"> to make in order to get the</font>

441
00:22:57,390 --> 00:23:03,450
binary WebSocket message is working<font color="#CCCCCC"> it's</font>

442
00:23:01,080 --> 00:23:09,600
<font color="#E5E5E5">it was just like four lines of code in a</font>

443
00:23:03,450 --> 00:23:11,550
single file<font color="#CCCCCC"> so these HTTP handlers that</font>

444
00:23:09,600 --> 00:23:14,639
<font color="#CCCCCC">you would need</font><font color="#E5E5E5"> to implement in an</font><font color="#CCCCCC"> access</font>

445
00:23:11,550 --> 00:23:18,180
proxy are defined in that any as any<font color="#CCCCCC"> SSH</font>

446
00:23:14,640 --> 00:23:18,510
<font color="#CCCCCC">Google real ajs file there's five of</font>

447
00:23:18,180 --> 00:23:21,130
<font color="#E5E5E5">them</font>

448
00:23:18,510 --> 00:23:24,340
<font color="#CCCCCC">cookie proxy read/write</font><font color="#E5E5E5"> and connect</font>

449
00:23:21,130 --> 00:23:26,830
but we really<font color="#CCCCCC"> only cared about three of</font>

450
00:23:24,340 --> 00:23:29,770
them<font color="#E5E5E5"> which</font><font color="#CCCCCC"> is nice it's less work and</font>

451
00:23:26,830 --> 00:23:34,750
the reason is read and write<font color="#CCCCCC"> are HTTP</font>

452
00:23:29,770 --> 00:23:37,060
handlers<font color="#CCCCCC"> and that would be useful if for</font>

453
00:23:34,750 --> 00:23:41,650
example<font color="#CCCCCC"> read and write</font><font color="#E5E5E5"> like as in like</font>

454
00:23:37,060 --> 00:23:43,750
the when we're<font color="#E5E5E5"> reading bytes from from</font>

455
00:23:41,650 --> 00:23:46,270
the access proxy and<font color="#E5E5E5"> then</font><font color="#CCCCCC"> writing new</font>

456
00:23:43,750 --> 00:23:48,160
stuff<font color="#E5E5E5"> like from the client</font><font color="#CCCCCC"> that would be</font>

457
00:23:46,270 --> 00:23:49,540
<font color="#CCCCCC">useful if</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> example with the</font><font color="#E5E5E5"> chrome</font>

458
00:23:48,160 --> 00:23:51,130
secure shell you were<font color="#E5E5E5"> using didn't</font>

459
00:23:49,540 --> 00:23:53,430
support WebSockets or like for some

460
00:23:51,130 --> 00:23:56,200
other reason you couldn't<font color="#E5E5E5"> use WebSockets</font>

461
00:23:53,430 --> 00:23:57,460
<font color="#CCCCCC">but connect is the single WebSocket</font>

462
00:23:56,200 --> 00:24:01,630
Handler so we don't need<font color="#E5E5E5"> to implement</font>

463
00:23:57,460 --> 00:24:05,850
read or write if we're using<font color="#E5E5E5"> that so</font>

464
00:24:01,630 --> 00:24:08,020
what<font color="#CCCCCC"> does slash cookie do</font><font color="#E5E5E5"> it handles</font>

465
00:24:05,850 --> 00:24:10,780
<font color="#CCCCCC">authorization and authentication</font><font color="#E5E5E5"> and</font>

466
00:24:08,020 --> 00:24:15,700
<font color="#E5E5E5">then we'll read redirect to the Chrome</font>

467
00:24:10,780 --> 00:24:17,649
extension ID or<font color="#E5E5E5"> localhost</font><font color="#CCCCCC"> once the</font><font color="#E5E5E5"> user</font>

468
00:24:15,700 --> 00:24:19,660
has we've determined that<font color="#E5E5E5"> the</font><font color="#CCCCCC"> users</font>

469
00:24:17,650 --> 00:24:22,890
authorized<font color="#CCCCCC"> to access the resource the</font>

470
00:24:19,660 --> 00:24:22,890
user and the device<font color="#E5E5E5"> for that matter</font>

471
00:24:25,470 --> 00:24:32,410
<font color="#CCCCCC">slash proxy</font><font color="#E5E5E5"> this handler if you look at</font>

472
00:24:29,140 --> 00:24:34,180
the the protocol in that file it tells

473
00:24:32,410 --> 00:24:37,350
tells you that this is<font color="#CCCCCC"> responsible for</font>

474
00:24:34,180 --> 00:24:40,780
<font color="#CCCCCC">opening a TCP connection to the</font><font color="#E5E5E5"> back-end</font>

475
00:24:37,350 --> 00:24:43,540
<font color="#E5E5E5">service so when we you know the client</font>

476
00:24:40,780 --> 00:24:45,700
hits<font color="#E5E5E5"> slash proxy we just create a you</font>

477
00:24:43,540 --> 00:24:47,980
know open a TCP connection<font color="#CCCCCC"> to the</font>

478
00:24:45,700 --> 00:24:50,950
<font color="#CCCCCC">backend and then we keep track</font><font color="#E5E5E5"> of it by</font>

479
00:24:47,980 --> 00:24:56,820
just<font color="#E5E5E5"> generating</font><font color="#CCCCCC"> like you ID</font><font color="#E5E5E5"> and then</font>

480
00:24:50,950 --> 00:24:59,350
<font color="#E5E5E5">returning that in the response body and</font>

481
00:24:56,820 --> 00:25:02,649
slash<font color="#E5E5E5"> connect is the the actual</font>

482
00:24:59,350 --> 00:25:03,939
<font color="#E5E5E5">WebSockets handler</font><font color="#CCCCCC"> so that's what</font><font color="#E5E5E5"> we're</font>

483
00:25:02,650 --> 00:25:05,650
you know what<font color="#CCCCCC"> we'll use for</font>

484
00:25:03,940 --> 00:25:09,760
bi-directional<font color="#CCCCCC"> communication between the</font>

485
00:25:05,650 --> 00:25:11,830
<font color="#E5E5E5">client and</font><font color="#CCCCCC"> server so in the way the what</font>

486
00:25:09,760 --> 00:25:15,520
the client will do is it will<font color="#CCCCCC"> have</font>

487
00:25:11,830 --> 00:25:19,659
received the cookie<font color="#E5E5E5"> from from the access</font>

488
00:25:15,520 --> 00:25:21,280
proxy<font color="#E5E5E5"> during the the cookie step and</font>

489
00:25:19,660 --> 00:25:23,860
then<font color="#E5E5E5"> it gets that</font><font color="#CCCCCC"> gig you buy D during</font>

490
00:25:21,280 --> 00:25:25,570
<font color="#E5E5E5">the proxy step so then when it</font><font color="#CCCCCC"> actually</font>

491
00:25:23,860 --> 00:25:29,409
goes on<font color="#CCCCCC"> to</font><font color="#E5E5E5"> make the WebSocket connection</font>

492
00:25:25,570 --> 00:25:31,540
it provides both of those so<font color="#CCCCCC"> that the</font>

493
00:25:29,410 --> 00:25:33,670
access proxy is able to say like<font color="#CCCCCC"> oh</font><font color="#E5E5E5"> okay</font>

494
00:25:31,540 --> 00:25:34,330
<font color="#CCCCCC">I've</font><font color="#E5E5E5"> determined that you're authorized</font>

495
00:25:33,670 --> 00:25:36,789
to access

496
00:25:34,330 --> 00:25:39,820
this resource<font color="#E5E5E5"> and I'm you know I've kept</font>

497
00:25:36,789 --> 00:25:44,860
track<font color="#CCCCCC"> of that TCP connection on the back</font>

498
00:25:39,820 --> 00:25:48,399
<font color="#CCCCCC">end so next I'll</font><font color="#E5E5E5"> talk a little bit about</font>

499
00:25:44,860 --> 00:25:50,469
the the clients<font color="#CCCCCC"> the first one is just</font>

500
00:25:48,399 --> 00:25:53,739
<font color="#E5E5E5">the regular old</font><font color="#CCCCCC"> chrome secure shell</font>

501
00:25:50,470 --> 00:25:56,409
that's what it looks<font color="#E5E5E5"> like</font><font color="#CCCCCC"> the the bit</font>

502
00:25:53,740 --> 00:25:59,200
like below user and<font color="#E5E5E5"> example</font><font color="#CCCCCC"> comm that</font>

503
00:25:56,409 --> 00:26:01,090
that<font color="#E5E5E5"> text</font><font color="#CCCCCC"> field those are the relay</font>

504
00:25:59,200 --> 00:26:05,880
options that you can<font color="#E5E5E5"> use to configure</font>

505
00:26:01,090 --> 00:26:09,039
<font color="#CCCCCC">chrome</font><font color="#E5E5E5"> secure shell to communicate with</font>

506
00:26:05,880 --> 00:26:15,580
an any<font color="#E5E5E5"> SSH relay rather than making a</font>

507
00:26:09,039 --> 00:26:19,539
<font color="#E5E5E5">direct connection to to the server and</font>

508
00:26:15,580 --> 00:26:23,980
then with standard<font color="#CCCCCC"> ssh tooling we wrote</font>

509
00:26:19,539 --> 00:26:28,450
<font color="#E5E5E5">this local</font><font color="#CCCCCC"> on-demand</font><font color="#E5E5E5"> proxy in golang and</font>

510
00:26:23,980 --> 00:26:31,269
then we point to that<font color="#E5E5E5"> using the ssh</font>

511
00:26:28,450 --> 00:26:33,220
proxy command directive and<font color="#E5E5E5"> then the</font>

512
00:26:31,269 --> 00:26:36,190
local proxy itself understands

513
00:26:33,220 --> 00:26:38,320
<font color="#E5E5E5">WebSockets</font><font color="#CCCCCC"> so even though WebSockets was</font>

514
00:26:36,190 --> 00:26:40,419
designed for browser-based applications

515
00:26:38,320 --> 00:26:42,000
to communicate<font color="#CCCCCC"> with servers it's of</font>

516
00:26:40,419 --> 00:26:45,639
course<font color="#E5E5E5"> not limited to that</font>

517
00:26:42,000 --> 00:26:47,289
<font color="#E5E5E5">and then proxy command</font><font color="#CCCCCC"> if you look at</font>

518
00:26:45,639 --> 00:26:49,240
the like for<font color="#E5E5E5"> instance like</font><font color="#CCCCCC"> the the</font>

519
00:26:47,289 --> 00:26:53,110
documentation on it it says<font color="#E5E5E5"> that it'll</font>

520
00:26:49,240 --> 00:26:56,169
take<font color="#E5E5E5"> standard output from</font><font color="#CCCCCC"> SSH like the</font>

521
00:26:53,110 --> 00:26:58,449
those those bytes<font color="#CCCCCC"> and</font><font color="#E5E5E5"> then</font><font color="#CCCCCC"> passed that</font>

522
00:26:56,169 --> 00:27:01,120
<font color="#E5E5E5">as input to your program and then you</font>

523
00:26:58,450 --> 00:27:03,250
<font color="#E5E5E5">are</font><font color="#CCCCCC"> responsible for displaying output</font>

524
00:27:01,120 --> 00:27:10,029
back to<font color="#CCCCCC"> the terminal</font><font color="#E5E5E5"> by just writing</font><font color="#CCCCCC"> the</font>

525
00:27:03,250 --> 00:27:12,429
<font color="#E5E5E5">standard output so this is what the an</font>

526
00:27:10,029 --> 00:27:16,120
SSH config file might look like to<font color="#E5E5E5"> get</font>

527
00:27:12,429 --> 00:27:21,039
this working<font color="#CCCCCC"> you have</font><font color="#E5E5E5"> you specify a like</font>

528
00:27:16,120 --> 00:27:23,110
a host for example<font color="#CCCCCC"> and tell</font><font color="#E5E5E5"> it to use a</font>

529
00:27:21,039 --> 00:27:25,330
proxy command in which we are as we

530
00:27:23,110 --> 00:27:31,049
cleverly called<font color="#CCCCCC"> Nashville because</font><font color="#E5E5E5"> any</font>

531
00:27:25,330 --> 00:27:33,549
SSH<font color="#CCCCCC"> the host import are just the</font><font color="#E5E5E5"> SSH</font>

532
00:27:31,049 --> 00:27:37,269
host<font color="#CCCCCC"> import</font><font color="#E5E5E5"> that automatically get</font>

533
00:27:33,549 --> 00:27:39,389
passed to the proxy command and then we

534
00:27:37,269 --> 00:27:44,919
have<font color="#E5E5E5"> this relay which I'll talk about</font>

535
00:27:39,389 --> 00:27:47,428
<font color="#E5E5E5">next here so a real a host of course we</font>

536
00:27:44,919 --> 00:27:50,370
need some<font color="#CCCCCC"> way to tell</font>

537
00:27:47,429 --> 00:27:56,760
the clients<font color="#CCCCCC"> you know to</font><font color="#E5E5E5"> communicate with</font>

538
00:27:50,370 --> 00:27:58,260
a specific<font color="#E5E5E5"> access proxy</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> the way the</font>

539
00:27:56,760 --> 00:28:00,629
way<font color="#CCCCCC"> we do that</font><font color="#E5E5E5"> is by you know providing</font>

540
00:27:58,260 --> 00:28:02,280
it<font color="#E5E5E5"> in you know that switch there but</font>

541
00:28:00,630 --> 00:28:05,820
what's interesting<font color="#E5E5E5"> about it is it's</font>

542
00:28:02,280 --> 00:28:08,520
<font color="#E5E5E5">actually we have a different</font><font color="#CCCCCC"> relay hosts</font>

543
00:28:05,820 --> 00:28:10,379
<font color="#CCCCCC">or like hostname right for for every</font>

544
00:28:08,520 --> 00:28:14,670
service<font color="#CCCCCC"> that we put behind the access</font>

545
00:28:10,380 --> 00:28:17,160
proxy<font color="#CCCCCC"> and</font><font color="#E5E5E5"> the reason is it's actually</font>

546
00:28:14,670 --> 00:28:20,010
kind<font color="#CCCCCC"> of a</font><font color="#E5E5E5"> shady reason but there's a</font>

547
00:28:17,160 --> 00:28:22,440
limitation<font color="#E5E5E5"> in the the NA SSH relay</font>

548
00:28:20,010 --> 00:28:25,410
protocol where the first<font color="#E5E5E5"> thing it does</font>

549
00:28:22,440 --> 00:28:27,780
<font color="#CCCCCC">is it hits the slash cookie handler</font><font color="#E5E5E5"> and</font>

550
00:28:25,410 --> 00:28:29,070
<font color="#E5E5E5">you know you're</font><font color="#CCCCCC"> responsible for like</font>

551
00:28:27,780 --> 00:28:31,830
that's the only<font color="#CCCCCC"> time you're able to</font>

552
00:28:29,070 --> 00:28:34,760
<font color="#E5E5E5">determine if a request is authorized</font><font color="#CCCCCC"> but</font>

553
00:28:31,830 --> 00:28:37,169
<font color="#E5E5E5">we have no notion or</font><font color="#CCCCCC"> like no</font><font color="#E5E5E5"> idea what</font>

554
00:28:34,760 --> 00:28:39,650
server the<font color="#CCCCCC"> user is trying</font><font color="#E5E5E5"> to connect to</font>

555
00:28:37,170 --> 00:28:42,750
so if we wanted<font color="#CCCCCC"> to be able</font><font color="#E5E5E5"> to say like</font>

556
00:28:39,650 --> 00:28:45,120
have different<font color="#CCCCCC"> policies for different</font>

557
00:28:42,750 --> 00:28:48,559
<font color="#E5E5E5">servers not just like</font><font color="#CCCCCC"> okay you proved</font>

558
00:28:45,120 --> 00:28:50,909
that you<font color="#CCCCCC"> are</font><font color="#E5E5E5"> an employee at company X</font>

559
00:28:48,559 --> 00:28:52,379
<font color="#E5E5E5">you get</font><font color="#CCCCCC"> access to</font><font color="#E5E5E5"> everything we don't</font>

560
00:28:50,910 --> 00:28:54,720
<font color="#E5E5E5">want that we wanted to be able to say</font>

561
00:28:52,380 --> 00:28:58,050
like<font color="#CCCCCC"> ok you have access</font><font color="#E5E5E5"> to these things</font>

562
00:28:54,720 --> 00:29:01,050
<font color="#E5E5E5">right</font><font color="#CCCCCC"> so in the way we worked around</font>

563
00:28:58,050 --> 00:29:03,149
that was by you know<font color="#E5E5E5"> using a different</font>

564
00:29:01,050 --> 00:29:05,700
<font color="#E5E5E5">host name that just resolves</font><font color="#CCCCCC"> to the IP</font>

565
00:29:03,150 --> 00:29:08,370
of the access proxy<font color="#E5E5E5"> for every single</font>

566
00:29:05,700 --> 00:29:10,800
<font color="#E5E5E5">service</font><font color="#CCCCCC"> behind by you know</font><font color="#E5E5E5"> that we put</font>

567
00:29:08,370 --> 00:29:12,389
behind<font color="#E5E5E5"> to access proxy and that way</font>

568
00:29:10,800 --> 00:29:15,480
we're able<font color="#E5E5E5"> to enforce in code like</font><font color="#CCCCCC"> ok</font>

569
00:29:12,390 --> 00:29:17,610
like this<font color="#E5E5E5"> this server and port</font><font color="#CCCCCC"> MAP to</font>

570
00:29:15,480 --> 00:29:23,790
this relay host<font color="#E5E5E5"> and set policies</font>

571
00:29:17,610 --> 00:29:26,699
accordingly<font color="#CCCCCC"> I briefly mentioned a local</font>

572
00:29:23,790 --> 00:29:30,300
HTTP server again that was something

573
00:29:26,700 --> 00:29:33,090
<font color="#CCCCCC">that we we did to catch the</font>

574
00:29:30,300 --> 00:29:37,559
authentication<font color="#E5E5E5"> cookie from from the</font>

575
00:29:33,090 --> 00:29:41,370
server so when our local<font color="#E5E5E5"> on demand proxy</font>

576
00:29:37,559 --> 00:29:44,100
runs it<font color="#E5E5E5"> you know launches the browser</font>

577
00:29:41,370 --> 00:29:47,010
hits the slash cookie<font color="#CCCCCC"> Handler and then</font>

578
00:29:44,100 --> 00:29:50,250
we redirect to localhost<font color="#CCCCCC"> on some</font>

579
00:29:47,010 --> 00:29:53,400
<font color="#E5E5E5">ephemeral port and that's you know</font>

580
00:29:50,250 --> 00:29:55,880
that's used for<font color="#E5E5E5"> the remainder of the</font>

581
00:29:53,400 --> 00:29:55,880
<font color="#CCCCCC">this session</font>

582
00:29:59,320 --> 00:30:05,210
so now I'm just<font color="#E5E5E5"> I'm gonna go through</font>

583
00:30:02,440 --> 00:30:08,930
<font color="#CCCCCC">like sort of</font><font color="#E5E5E5"> a step by step</font><font color="#CCCCCC"> of how this</font>

584
00:30:05,210 --> 00:30:11,240
all works with<font color="#CCCCCC"> OpenSSH Plus this any SSH</font>

585
00:30:08,930 --> 00:30:14,150
relay or whatever this<font color="#E5E5E5"> access proxy</font>

586
00:30:11,240 --> 00:30:15,410
right<font color="#E5E5E5"> I'm not going</font><font color="#CCCCCC"> to go over how it</font>

587
00:30:14,150 --> 00:30:16,640
works with<font color="#CCCCCC"> chrome secure</font><font color="#E5E5E5"> shell because</font>

588
00:30:15,410 --> 00:30:19,040
<font color="#CCCCCC">basically if you</font><font color="#E5E5E5"> get it</font><font color="#CCCCCC"> working</font><font color="#E5E5E5"> with</font>

589
00:30:16,640 --> 00:30:21,950
both<font color="#E5E5E5"> of you know with with</font><font color="#CCCCCC"> OpenSSH it'll</font>

590
00:30:19,040 --> 00:30:23,450
it'll work with any with the the chrome

591
00:30:21,950 --> 00:30:25,040
secure shell<font color="#E5E5E5"> there's</font><font color="#CCCCCC"> not they're not</font>

592
00:30:23,450 --> 00:30:27,530
<font color="#E5E5E5">terribly different we pass it a few</font>

593
00:30:25,040 --> 00:30:31,100
<font color="#E5E5E5">different query parameters in the local</font>

594
00:30:27,530 --> 00:30:36,050
proxy<font color="#CCCCCC"> versus what</font><font color="#E5E5E5"> chrome secure shell</font>

595
00:30:31,100 --> 00:30:39,310
sends by default<font color="#E5E5E5"> so the first step the</font>

596
00:30:36,050 --> 00:30:43,550
<font color="#CCCCCC">user types their you know SSH command</font>

597
00:30:39,310 --> 00:30:45,860
<font color="#CCCCCC">proxy command</font><font color="#E5E5E5"> is going</font><font color="#CCCCCC"> to be responsible</font>

598
00:30:43,550 --> 00:30:47,750
<font color="#CCCCCC">for launching</font><font color="#E5E5E5"> our local</font><font color="#CCCCCC"> on-demand</font><font color="#E5E5E5"> proxy</font>

599
00:30:45,860 --> 00:30:51,560
so this is kind of<font color="#E5E5E5"> cool too because we</font>

600
00:30:47,750 --> 00:30:54,200
didn't want to<font color="#CCCCCC"> have a like a demon or</font>

601
00:30:51,560 --> 00:30:57,620
<font color="#CCCCCC">something running constantly</font><font color="#E5E5E5"> it's just</font>

602
00:30:54,200 --> 00:31:02,390
you know it gets run whenever a new<font color="#E5E5E5"> SSH</font>

603
00:30:57,620 --> 00:31:05,449
connection is is established<font color="#CCCCCC"> so the</font>

604
00:31:02,390 --> 00:31:08,180
local proxy<font color="#E5E5E5"> will open a</font><font color="#CCCCCC"> browser go to</font>

605
00:31:05,450 --> 00:31:11,510
this URL whatever that relay host slash

606
00:31:08,180 --> 00:31:14,480
cookie and then<font color="#CCCCCC"> we have a few query</font>

607
00:31:11,510 --> 00:31:16,910
parameters that we pass in there and

608
00:31:14,480 --> 00:31:19,160
then once<font color="#E5E5E5"> the the user is and the device</font>

609
00:31:16,910 --> 00:31:21,680
are determined<font color="#CCCCCC"> to be authorized</font><font color="#E5E5E5"> to</font>

610
00:31:19,160 --> 00:31:23,660
access<font color="#E5E5E5"> that resource we redirect to</font>

611
00:31:21,680 --> 00:31:25,670
<font color="#CCCCCC">local host so this is different than</font>

612
00:31:23,660 --> 00:31:28,280
<font color="#E5E5E5">chrome secure shell which we would</font>

613
00:31:25,670 --> 00:31:29,720
redirect<font color="#E5E5E5"> to</font><font color="#CCCCCC"> chrome</font><font color="#E5E5E5"> - extension or you</font>

614
00:31:28,280 --> 00:31:36,710
know whatever<font color="#E5E5E5"> the Chrome extension URI</font>

615
00:31:29,720 --> 00:31:42,260
scheme is<font color="#CCCCCC"> so next the the local</font><font color="#E5E5E5"> proxy</font>

616
00:31:36,710 --> 00:31:45,590
will hit this slash proxy<font color="#E5E5E5"> handler which</font>

617
00:31:42,260 --> 00:31:48,879
the server<font color="#E5E5E5"> once once it receives that</font>

618
00:31:45,590 --> 00:31:52,340
<font color="#E5E5E5">request is going to create a UID and</font>

619
00:31:48,880 --> 00:31:54,020
<font color="#CCCCCC">then tie</font><font color="#E5E5E5"> it to this you know whatever a</font>

620
00:31:52,340 --> 00:31:55,129
session<font color="#CCCCCC"> objects something</font><font color="#E5E5E5"> we can keep in</font>

621
00:31:54,020 --> 00:31:58,250
memory<font color="#E5E5E5"> to keep track</font><font color="#CCCCCC"> of these</font>

622
00:31:55,130 --> 00:32:03,080
<font color="#E5E5E5">connections and</font><font color="#CCCCCC"> then we establish the</font>

623
00:31:58,250 --> 00:32:06,050
the<font color="#E5E5E5"> TCP connection to the server so we</font>

624
00:32:03,080 --> 00:32:09,169
<font color="#E5E5E5">keep</font><font color="#CCCCCC"> track of</font><font color="#E5E5E5"> the the connection in the</font>

625
00:32:06,050 --> 00:32:10,760
session<font color="#E5E5E5"> object</font><font color="#CCCCCC"> and then we have these</font>

626
00:32:09,170 --> 00:32:11,630
callbacks<font color="#CCCCCC"> that fire</font><font color="#E5E5E5"> whenever we get new</font>

627
00:32:10,760 --> 00:32:15,260
data<font color="#E5E5E5"> from</font>

628
00:32:11,630 --> 00:32:17,120
from the server<font color="#E5E5E5"> right and once you know</font>

629
00:32:15,260 --> 00:32:20,240
<font color="#E5E5E5">you know we're done with</font><font color="#CCCCCC"> that request we</font>

630
00:32:17,120 --> 00:32:22,070
return<font color="#E5E5E5"> that session ID or UID</font><font color="#CCCCCC"> in the</font>

631
00:32:20,240 --> 00:32:27,910
response body<font color="#E5E5E5"> so</font><font color="#CCCCCC"> that the client knows</font>

632
00:32:22,070 --> 00:32:31,280
<font color="#E5E5E5">from now on when I you</font><font color="#CCCCCC"> know make these</font>

633
00:32:27,910 --> 00:32:35,930
WebSocket<font color="#E5E5E5"> requests use this this</font><font color="#CCCCCC"> session</font>

634
00:32:31,280 --> 00:32:38,840
ID to<font color="#CCCCCC"> identify myself so this</font><font color="#E5E5E5"> is just a</font>

635
00:32:35,930 --> 00:32:41,690
quick<font color="#E5E5E5"> like you know like sort</font><font color="#CCCCCC"> of</font>

636
00:32:38,840 --> 00:32:45,020
simplified example<font color="#CCCCCC"> of what that that</font>

637
00:32:41,690 --> 00:32:46,790
session<font color="#E5E5E5"> class might look like</font><font color="#CCCCCC"> sorry not</font>

638
00:32:45,020 --> 00:32:50,090
sorry if you don't know Python<font color="#E5E5E5"> or hate</font>

639
00:32:46,790 --> 00:32:54,020
<font color="#CCCCCC">it yeah but basically we need we need</font>

640
00:32:50,090 --> 00:32:55,760
<font color="#E5E5E5">some way to keep track</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the TCP</font>

641
00:32:54,020 --> 00:32:58,040
connection and then you know<font color="#E5E5E5"> to the back</font>

642
00:32:55,760 --> 00:33:00,410
end and<font color="#CCCCCC"> then the WebSocket connection to</font>

643
00:32:58,040 --> 00:33:02,420
the front<font color="#E5E5E5"> end and this is also where</font><font color="#CCCCCC"> we</font>

644
00:33:00,410 --> 00:33:04,670
store that retransmission buffer and

645
00:33:02,420 --> 00:33:10,010
then read count and write count which

646
00:33:04,670 --> 00:33:11,840
are like used<font color="#CCCCCC"> they're the acally so</font>

647
00:33:10,010 --> 00:33:14,629
sessions for example we could<font color="#CCCCCC"> just have</font>

648
00:33:11,840 --> 00:33:18,050
a global variable<font color="#E5E5E5"> and then when a client</font>

649
00:33:14,630 --> 00:33:20,570
hits<font color="#E5E5E5"> slash proxy will create a new</font>

650
00:33:18,050 --> 00:33:23,659
session object<font color="#E5E5E5"> and then just tie it to</font>

651
00:33:20,570 --> 00:33:27,020
that<font color="#CCCCCC"> UUID so we're later</font><font color="#E5E5E5"> able to look up</font>

652
00:33:23,660 --> 00:33:30,170
<font color="#E5E5E5">that connection when you know the client</font>

653
00:33:27,020 --> 00:33:32,150
will provide that<font color="#CCCCCC"> UUID</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> will you know</font>

654
00:33:30,170 --> 00:33:38,450
see<font color="#CCCCCC"> ok you know</font><font color="#E5E5E5"> this session exists or</font>

655
00:33:32,150 --> 00:33:41,180
it doesn't<font color="#E5E5E5"> so so I should connect so at</font>

656
00:33:38,450 --> 00:33:44,660
<font color="#E5E5E5">this point the once the</font><font color="#CCCCCC"> the client has</font>

657
00:33:41,180 --> 00:33:47,990
hit the HTTP handlers<font color="#E5E5E5"> and we you know we</font>

658
00:33:44,660 --> 00:33:49,300
were determined that<font color="#CCCCCC"> we're able</font><font color="#E5E5E5"> to you</font>

659
00:33:47,990 --> 00:33:52,790
know authorized to access<font color="#E5E5E5"> the resource</font>

660
00:33:49,300 --> 00:33:56,210
<font color="#CCCCCC">and we start the WebSocket connection to</font>

661
00:33:52,790 --> 00:33:57,649
the to the access proxy the server will

662
00:33:56,210 --> 00:34:01,040
respond with that<font color="#E5E5E5"> switching protocols</font>

663
00:33:57,650 --> 00:34:03,380
message<font color="#CCCCCC"> and at this point we just have</font>

664
00:34:01,040 --> 00:34:05,420
callbacks<font color="#E5E5E5"> that fire when we get new</font>

665
00:34:03,380 --> 00:34:08,030
WebSocket connections or when we receive

666
00:34:05,420 --> 00:34:10,879
WebSocket messages and<font color="#E5E5E5"> then like I</font>

667
00:34:08,030 --> 00:34:13,760
mentioned<font color="#CCCCCC"> previously the the</font><font color="#E5E5E5"> local like</font>

668
00:34:10,879 --> 00:34:16,699
<font color="#E5E5E5">on-demand proxy will take</font><font color="#CCCCCC"> standard</font><font color="#E5E5E5"> in</font>

669
00:34:13,760 --> 00:34:18,139
<font color="#E5E5E5">well it's standard input comes from SSH</font>

670
00:34:16,699 --> 00:34:20,359
and<font color="#E5E5E5"> then it passes</font><font color="#CCCCCC"> that to the access</font>

671
00:34:18,139 --> 00:34:22,820
proxy and then the data that it receives

672
00:34:20,360 --> 00:34:24,909
<font color="#E5E5E5">like the WebSocket messages that it</font>

673
00:34:22,820 --> 00:34:27,970
receives

674
00:34:24,909 --> 00:34:32,919
displayed on the terminal<font color="#CCCCCC"> we just write</font>

675
00:34:27,969 --> 00:34:35,168
<font color="#E5E5E5">those</font><font color="#CCCCCC"> two standard output so when when</font>

676
00:34:32,918 --> 00:34:37,569
new WebSocket connections are<font color="#CCCCCC"> made we</font>

677
00:34:35,168 --> 00:34:39,308
look up that session ID that was

678
00:34:37,569 --> 00:34:40,859
provided by<font color="#E5E5E5"> the client</font><font color="#CCCCCC"> so during the</font>

679
00:34:39,309 --> 00:34:44,049
proxy step they would have gotten<font color="#E5E5E5"> that</font>

680
00:34:40,859 --> 00:34:48,129
<font color="#CCCCCC">during the you know</font><font color="#E5E5E5"> when the WebSocket</font>

681
00:34:44,049 --> 00:34:49,750
connection is made<font color="#CCCCCC"> they provide that</font><font color="#E5E5E5"> so</font>

682
00:34:48,129 --> 00:34:52,149
then we point<font color="#E5E5E5"> to that</font><font color="#CCCCCC"> you know I meant I</font>

683
00:34:49,750 --> 00:34:53,609
showed the the<font color="#CCCCCC"> TC you know whatever</font><font color="#E5E5E5"> that</font>

684
00:34:52,149 --> 00:34:57,038
session<font color="#E5E5E5"> object what it might look like</font>

685
00:34:53,609 --> 00:35:03,339
<font color="#E5E5E5">we keep track of that and then we update</font>

686
00:34:57,039 --> 00:35:07,720
the read count and write count<font color="#CCCCCC"> next we</font>

687
00:35:03,339 --> 00:35:09,460
trim this retransmission buffer<font color="#CCCCCC"> we you</font>

688
00:35:07,720 --> 00:35:12,220
know the client will report<font color="#E5E5E5"> how many</font>

689
00:35:09,460 --> 00:35:15,069
bytes it's read so we can discard<font color="#E5E5E5"> those</font>

690
00:35:12,220 --> 00:35:18,399
the bytes that<font color="#E5E5E5"> it</font><font color="#CCCCCC"> is confirmed to have</font>

691
00:35:15,069 --> 00:35:20,529
read and then<font color="#E5E5E5"> we just send a WebSocket</font>

692
00:35:18,400 --> 00:35:21,970
message to the client<font color="#CCCCCC"> with the</font><font color="#E5E5E5"> contents</font>

693
00:35:20,530 --> 00:35:24,369
<font color="#E5E5E5">of the retransmission buffer which if</font>

694
00:35:21,970 --> 00:35:28,959
it's a new<font color="#CCCCCC"> connection will</font><font color="#E5E5E5"> just be an</font>

695
00:35:24,369 --> 00:35:30,970
empty payload I'm not<font color="#E5E5E5"> going to go</font><font color="#CCCCCC"> over</font>

696
00:35:28,960 --> 00:35:32,200
all<font color="#E5E5E5"> this here but just you know later if</font>

697
00:35:30,970 --> 00:35:33,399
you want<font color="#E5E5E5"> to look at these slides if</font>

698
00:35:32,200 --> 00:35:35,348
you're interested<font color="#E5E5E5"> interested in building</font>

699
00:35:33,400 --> 00:35:38,109
<font color="#E5E5E5">something that's like this yourself</font>

700
00:35:35,349 --> 00:35:39,940
<font color="#CCCCCC">maybe this will be helpful</font><font color="#E5E5E5"> but this is</font>

701
00:35:38,109 --> 00:35:42,609
what<font color="#CCCCCC"> forint for</font><font color="#E5E5E5"> example what a you know</font>

702
00:35:39,940 --> 00:35:47,049
<font color="#E5E5E5">what you could do when a new WebSocket</font>

703
00:35:42,609 --> 00:35:50,828
connection is made<font color="#CCCCCC"> so now when we</font>

704
00:35:47,049 --> 00:35:52,809
<font color="#E5E5E5">receive messages</font><font color="#CCCCCC"> what we do is we update</font>

705
00:35:50,829 --> 00:35:56,260
this bright count in that<font color="#CCCCCC"> session object</font>

706
00:35:52,809 --> 00:35:57,640
to the amount of or the length<font color="#E5E5E5"> of the</font>

707
00:35:56,260 --> 00:36:01,000
message<font color="#E5E5E5"> like how many bytes we received</font>

708
00:35:57,640 --> 00:36:03,400
<font color="#E5E5E5">- the four by ACK</font><font color="#CCCCCC"> and then we just send</font>

709
00:36:01,000 --> 00:36:05,020
the<font color="#CCCCCC"> the message that we receive which is</font>

710
00:36:03,400 --> 00:36:07,270
like the<font color="#E5E5E5"> ssh payload we just pass that</font>

711
00:36:05,020 --> 00:36:09,130
<font color="#E5E5E5">on to the</font><font color="#CCCCCC"> backend</font><font color="#E5E5E5"> but you know trim</font>

712
00:36:07,270 --> 00:36:11,589
those the<font color="#E5E5E5"> four by tax because that'll</font>

713
00:36:09,130 --> 00:36:15,460
break<font color="#E5E5E5"> the ssh protocol if we if we</font>

714
00:36:11,589 --> 00:36:18,210
<font color="#E5E5E5">include some random</font><font color="#CCCCCC"> 32-bit integer</font><font color="#E5E5E5"> at</font>

715
00:36:15,460 --> 00:36:20,289
the beginning of<font color="#E5E5E5"> all</font><font color="#CCCCCC"> of our ssh payloads</font>

716
00:36:18,210 --> 00:36:23,200
and then we'll trim the retransmission

717
00:36:20,289 --> 00:36:26,650
buffer using<font color="#E5E5E5"> that act that the client</font>

718
00:36:23,200 --> 00:36:29,319
provided either<font color="#E5E5E5"> in the well in this case</font>

719
00:36:26,650 --> 00:36:31,750
since receiving<font color="#E5E5E5"> a WebSocket message it's</font>

720
00:36:29,319 --> 00:36:33,400
contained<font color="#E5E5E5"> in the payload similar to what</font>

721
00:36:31,750 --> 00:36:36,809
we did<font color="#E5E5E5"> when we</font><font color="#CCCCCC"> got a new</font><font color="#E5E5E5"> connection and</font>

722
00:36:33,400 --> 00:36:36,809
it<font color="#E5E5E5"> was provided</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> the query</font><font color="#CCCCCC"> string</font>

723
00:36:37,900 --> 00:36:42,580
so next<font color="#E5E5E5"> yeah again not</font><font color="#CCCCCC"> gonna go over</font>

724
00:36:40,300 --> 00:36:44,380
this message received what what it might

725
00:36:42,580 --> 00:36:47,500
look like if<font color="#E5E5E5"> you wanted to implement</font>

726
00:36:44,380 --> 00:36:51,000
<font color="#E5E5E5">that this is when a new WebSocket</font>

727
00:36:47,500 --> 00:36:53,770
message is received<font color="#E5E5E5"> on</font><font color="#CCCCCC"> your access proxy</font>

728
00:36:51,000 --> 00:36:56,200
and<font color="#E5E5E5"> then data received this is just like</font>

729
00:36:53,770 --> 00:36:59,770
so when<font color="#E5E5E5"> I receive data from the the</font>

730
00:36:56,200 --> 00:37:02,109
<font color="#CCCCCC">backend service the on that TCP</font>

731
00:36:59,770 --> 00:37:04,000
connection I will update the<font color="#CCCCCC"> amount or</font>

732
00:37:02,110 --> 00:37:06,010
<font color="#CCCCCC">the read count that we're keeping track</font>

733
00:37:04,000 --> 00:37:07,510
<font color="#CCCCCC">of by the amount of data that we've</font>

734
00:37:06,010 --> 00:37:08,620
<font color="#CCCCCC">received so we're able to say like oh</font>

735
00:37:07,510 --> 00:37:12,220
I've read<font color="#E5E5E5"> this many bytes from the</font>

736
00:37:08,620 --> 00:37:14,680
server<font color="#CCCCCC"> and then we can you know</font>

737
00:37:12,220 --> 00:37:16,209
<font color="#E5E5E5">concatenate our write count with the the</font>

738
00:37:14,680 --> 00:37:18,700
data that we're receiving<font color="#E5E5E5"> and then just</font>

739
00:37:16,210 --> 00:37:22,170
send as a<font color="#E5E5E5"> WebSocket message to the the</font>

740
00:37:18,700 --> 00:37:24,730
<font color="#E5E5E5">front end or the you know to the client</font>

741
00:37:22,170 --> 00:37:26,880
and then here's what that<font color="#E5E5E5"> might look</font>

742
00:37:24,730 --> 00:37:26,880
<font color="#E5E5E5">like</font>

743
00:37:28,800 --> 00:37:36,100
so other stuff<font color="#CCCCCC"> so there were some</font>

744
00:37:32,800 --> 00:37:38,380
gotchas<font color="#E5E5E5"> one thing we noticed</font><font color="#CCCCCC"> was the the</font>

745
00:37:36,100 --> 00:37:42,310
chrome<font color="#E5E5E5"> secure show</font><font color="#CCCCCC"> when it receives a</font>

746
00:37:38,380 --> 00:37:43,360
close control<font color="#E5E5E5"> frame</font><font color="#CCCCCC"> it just</font><font color="#E5E5E5"> it doesn't</font>

747
00:37:42,310 --> 00:37:45,250
<font color="#CCCCCC">really honor it</font>

748
00:37:43,360 --> 00:37:47,320
it'll just<font color="#E5E5E5"> try to reconnect probably by</font>

749
00:37:45,250 --> 00:37:49,930
<font color="#CCCCCC">design</font><font color="#E5E5E5"> but if you want to permanently</font>

750
00:37:47,320 --> 00:37:51,550
<font color="#E5E5E5">like close the connection</font><font color="#CCCCCC"> the way you</font>

751
00:37:49,930 --> 00:37:55,629
can do<font color="#E5E5E5"> that is by sending an empty</font>

752
00:37:51,550 --> 00:37:58,350
payload with a negative<font color="#E5E5E5"> ACK or I guess</font>

753
00:37:55,630 --> 00:38:01,870
probably<font color="#E5E5E5"> any</font><font color="#CCCCCC"> payload in a negative ACK</font>

754
00:37:58,350 --> 00:38:03,730
<font color="#CCCCCC">and then the</font><font color="#E5E5E5"> the next</font><font color="#CCCCCC"> one here was one</font>

755
00:38:01,870 --> 00:38:06,580
<font color="#E5E5E5">that</font><font color="#CCCCCC"> you know caused me to bang my head</font>

756
00:38:03,730 --> 00:38:09,820
against<font color="#CCCCCC"> the wall a couple times the the</font>

757
00:38:06,580 --> 00:38:13,330
retransmission buffer<font color="#E5E5E5"> seems to be useful</font>

758
00:38:09,820 --> 00:38:16,900
<font color="#E5E5E5">mostly during new WebSocket connections</font>

759
00:38:13,330 --> 00:38:19,360
because we separate the that you know

760
00:38:16,900 --> 00:38:21,850
the<font color="#E5E5E5"> the this step of like creating</font><font color="#CCCCCC"> the</font>

761
00:38:19,360 --> 00:38:25,990
TCP connection to the<font color="#CCCCCC"> backend from</font><font color="#E5E5E5"> the</font>

762
00:38:21,850 --> 00:38:27,759
actual WebSocket<font color="#CCCCCC"> handler so if you know</font>

763
00:38:25,990 --> 00:38:30,250
<font color="#E5E5E5">if you've ever typed like telnet some</font>

764
00:38:27,760 --> 00:38:33,400
<font color="#CCCCCC">ssh server</font><font color="#E5E5E5"> 22 whatever you get back an</font>

765
00:38:30,250 --> 00:38:35,290
<font color="#E5E5E5">ssh version string that's because that</font>

766
00:38:33,400 --> 00:38:37,090
part of the<font color="#CCCCCC"> SSA you know that that's how</font>

767
00:38:35,290 --> 00:38:39,300
<font color="#CCCCCC">the</font><font color="#E5E5E5"> SSH protocol starts out the client</font>

768
00:38:37,090 --> 00:38:43,030
and server<font color="#CCCCCC"> exchanged the version string</font>

769
00:38:39,300 --> 00:38:44,950
so if we would have received that before

770
00:38:43,030 --> 00:38:48,100
the client had gotten a<font color="#E5E5E5"> chance</font><font color="#CCCCCC"> to send</font>

771
00:38:44,950 --> 00:38:49,620
<font color="#E5E5E5">that to the back end we would encounter</font>

772
00:38:48,100 --> 00:38:53,230
this<font color="#E5E5E5"> brace condition</font>

773
00:38:49,620 --> 00:38:55,089
<font color="#CCCCCC">where the client</font><font color="#E5E5E5"> would say I'm this SSH</font>

774
00:38:53,230 --> 00:38:57,460
version and then the server would say

775
00:38:55,090 --> 00:38:59,050
here's my<font color="#E5E5E5"> key exchange list or whatever</font>

776
00:38:57,460 --> 00:39:02,650
the hell it<font color="#CCCCCC"> is like the next step</font><font color="#E5E5E5"> in the</font>

777
00:38:59,050 --> 00:39:05,320
the SSH protocol<font color="#CCCCCC"> which of course broke</font>

778
00:39:02,650 --> 00:39:08,650
everything<font color="#E5E5E5"> and that only happened when</font>

779
00:39:05,320 --> 00:39:11,290
we were testing on<font color="#E5E5E5"> like local vm's like</font>

780
00:39:08,650 --> 00:39:15,760
making an<font color="#CCCCCC"> ssh connection</font><font color="#E5E5E5"> to a</font><font color="#CCCCCC"> vm running</font>

781
00:39:11,290 --> 00:39:16,960
on our<font color="#E5E5E5"> machine because you know that we</font>

782
00:39:15,760 --> 00:39:19,360
would get<font color="#E5E5E5"> response back pretty quickly</font>

783
00:39:16,960 --> 00:39:21,760
but<font color="#E5E5E5"> you know if you know for</font><font color="#CCCCCC"> example</font>

784
00:39:19,360 --> 00:39:23,350
there were a few hops in between<font color="#E5E5E5"> that</font>

785
00:39:21,760 --> 00:39:27,340
wouldn't happen<font color="#CCCCCC"> so</font><font color="#E5E5E5"> the the</font>

786
00:39:23,350 --> 00:39:29,799
retransmission buffer is useful where we

787
00:39:27,340 --> 00:39:33,250
<font color="#E5E5E5">know we</font><font color="#CCCCCC"> haven't sent</font><font color="#E5E5E5"> you know the client</font>

788
00:39:29,800 --> 00:39:34,870
hasn't<font color="#CCCCCC"> seen that</font><font color="#E5E5E5"> data so when the the</font>

789
00:39:33,250 --> 00:39:36,160
WebSocket connection is established we

790
00:39:34,870 --> 00:39:38,560
just send whatever data we've already

791
00:39:36,160 --> 00:39:44,529
received which in this case would<font color="#E5E5E5"> just</font>

792
00:39:38,560 --> 00:39:47,950
<font color="#E5E5E5">be the ssh version</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> i mentioned you</font>

793
00:39:44,530 --> 00:39:51,490
know<font color="#E5E5E5"> RDP VNC like other things we</font><font color="#CCCCCC"> might</font>

794
00:39:47,950 --> 00:39:52,899
<font color="#CCCCCC">want to</font><font color="#E5E5E5"> put behind the access proxy</font><font color="#CCCCCC"> so</font>

795
00:39:51,490 --> 00:39:56,109
how<font color="#E5E5E5"> how would we do that</font>

796
00:39:52,900 --> 00:39:57,700
so obviously RDP doesn't come with<font color="#E5E5E5"> this</font>

797
00:39:56,110 --> 00:40:00,970
cool like proxy command feature<font color="#E5E5E5"> that</font>

798
00:39:57,700 --> 00:40:06,850
allows<font color="#CCCCCC"> us to you know</font><font color="#E5E5E5"> launch an external</font>

799
00:40:00,970 --> 00:40:09,939
program<font color="#CCCCCC"> but</font><font color="#E5E5E5"> it doesn't exist</font><font color="#CCCCCC"> so what can</font>

800
00:40:06,850 --> 00:40:11,799
<font color="#E5E5E5">we do there we've already tested this so</font>

801
00:40:09,940 --> 00:40:16,450
we know that<font color="#E5E5E5"> it works if</font><font color="#CCCCCC"> we just use</font>

802
00:40:11,800 --> 00:40:17,950
like a socket<font color="#CCCCCC"> for example</font><font color="#E5E5E5"> rather you</font>

803
00:40:16,450 --> 00:40:20,410
know rather than<font color="#E5E5E5"> an RDP client</font>

804
00:40:17,950 --> 00:40:23,169
connecting to s or you<font color="#CCCCCC"> know whatever</font><font color="#E5E5E5"> RDP</font>

805
00:40:20,410 --> 00:40:25,029
<font color="#CCCCCC">example comm</font><font color="#E5E5E5"> we connect to localhost on</font>

806
00:40:23,170 --> 00:40:28,300
some<font color="#E5E5E5"> ephemeral port and then have our</font>

807
00:40:25,030 --> 00:40:30,370
<font color="#E5E5E5">proxy handle tunneling</font><font color="#CCCCCC"> that those</font><font color="#E5E5E5"> bytes</font>

808
00:40:28,300 --> 00:40:33,660
back to the or through the access proxy

809
00:40:30,370 --> 00:40:33,660
and eventually to the<font color="#CCCCCC"> back-end</font><font color="#E5E5E5"> service</font>

810
00:40:35,220 --> 00:40:39,939
so that's<font color="#E5E5E5"> that's about it these are some</font>

811
00:40:38,170 --> 00:40:41,790
references<font color="#E5E5E5"> if you're interested in</font>

812
00:40:39,940 --> 00:40:45,730
<font color="#CCCCCC">building something like this yourself</font>

813
00:40:41,790 --> 00:40:47,470
<font color="#E5E5E5">these may be helpful and then this this</font>

814
00:40:45,730 --> 00:40:50,890
link here I'm gonna<font color="#E5E5E5"> make</font><font color="#CCCCCC"> my slides</font>

815
00:40:47,470 --> 00:40:52,870
available<font color="#E5E5E5"> probably later today I haven't</font>

816
00:40:50,890 --> 00:40:57,040
<font color="#CCCCCC">done</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> yet but that bitly link is</font>

817
00:40:52,870 --> 00:40:59,290
reserved<font color="#CCCCCC"> so beyond</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> corp - this - SSH -</font>

818
00:40:57,040 --> 00:41:02,580
<font color="#E5E5E5">proxy</font>

819
00:40:59,290 --> 00:41:02,580
and that's it

820
00:41:04,100 --> 00:41:10,310
[Applause]

821
00:41:19,200 --> 00:41:31,569
more<font color="#E5E5E5"> access proxies yeah so so right now</font>

822
00:41:28,330 --> 00:41:36,730
<font color="#E5E5E5">we like</font><font color="#CCCCCC"> are we</font><font color="#E5E5E5"> just actually have one</font>

823
00:41:31,570 --> 00:41:38,830
but but like it's you know<font color="#E5E5E5"> we've thought</font>

824
00:41:36,730 --> 00:41:39,970
about<font color="#E5E5E5"> it we</font><font color="#CCCCCC"> just haven't</font><font color="#E5E5E5"> exactly like</font>

825
00:41:38,830 --> 00:41:42,150
determined how we're going to handle

826
00:41:39,970 --> 00:41:42,149
that

827
00:41:52,990 --> 00:41:56,430
any other questions

828
00:42:06,230 --> 00:42:09,980
yeah thank you

