1
00:00:22,300 --> 00:00:26,020
<font color="#E5E5E5">all right welcome to the next talk in</font>

2
00:00:25,000 --> 00:00:28,060
our series

3
00:00:26,020 --> 00:00:30,220
right now we've got<font color="#CCCCCC"> Muhammad McDowell up</font>

4
00:00:28,060 --> 00:00:31,869
here to speak<font color="#E5E5E5"> on the SPF shell framework</font>

5
00:00:30,220 --> 00:01:01,540
so please welcome him to<font color="#CCCCCC"> the torque</font><font color="#E5E5E5"> on</font>

6
00:00:31,869 --> 00:01:07,450
stage<font color="#CCCCCC"> I wanted an acronym that is three</font>

7
00:01:01,540 --> 00:01:11,440
characters minimum<font color="#CCCCCC"> yeah I came from</font>

8
00:01:07,450 --> 00:01:14,110
Toronto<font color="#E5E5E5"> Canada</font><font color="#CCCCCC"> and I</font><font color="#E5E5E5"> promised</font><font color="#CCCCCC"> I come in</font>

9
00:01:11,440 --> 00:01:17,200
peace and I'm bringing<font color="#E5E5E5"> no cold otherwise</font>

10
00:01:14,110 --> 00:01:21,479
<font color="#CCCCCC">would be</font><font color="#E5E5E5"> all frozen by</font><font color="#CCCCCC"> now so that's</font>

11
00:01:17,200 --> 00:01:21,479
that is there anyone from Canada here

12
00:01:27,959 --> 00:01:32,800
<font color="#E5E5E5">okay</font>

13
00:01:29,280 --> 00:01:34,539
bit<font color="#CCCCCC"> of information about</font><font color="#E5E5E5"> me I'm</font><font color="#CCCCCC"> security</font>

14
00:01:32,800 --> 00:01:38,729
<font color="#E5E5E5">session and Trend Micro tipping point</font>

15
00:01:34,539 --> 00:01:41,920
<font color="#E5E5E5">and a member of the digital vaccine lab</font>

16
00:01:38,729 --> 00:01:44,950
engineering<font color="#CCCCCC"> the malware</font><font color="#E5E5E5"> vulnerabilities</font>

17
00:01:41,920 --> 00:01:50,200
and right focus for the big point

18
00:01:44,950 --> 00:01:52,179
<font color="#E5E5E5">next-gen IPs I'm a</font><font color="#CCCCCC"> former senior senior</font>

19
00:01:50,200 --> 00:01:55,750
security investigator at CIBC<font color="#E5E5E5"> one of the</font>

20
00:01:52,179 --> 00:01:57,190
top five banks in Canada so I was an l-3

21
00:01:55,750 --> 00:02:02,080
<font color="#E5E5E5">I was doing an</font><font color="#CCCCCC"> investigation reverse</font>

22
00:01:57,190 --> 00:02:03,759
engineering<font color="#CCCCCC"> I also as former</font><font color="#E5E5E5"> reverse</font>

23
00:02:02,080 --> 00:02:06,130
beta code engineer and<font color="#E5E5E5"> Mallory Saoirse</font>

24
00:02:03,759 --> 00:02:06,429
<font color="#E5E5E5">telus security</font><font color="#CCCCCC"> allowed for about five</font>

25
00:02:06,130 --> 00:02:08,318
years

26
00:02:06,429 --> 00:02:09,840
I'm mainly interested in reverse

27
00:02:08,318 --> 00:02:12,010
<font color="#E5E5E5">engineering and</font><font color="#CCCCCC"> Malibu research</font>

28
00:02:09,840 --> 00:02:15,400
intrusion detection prevention systems

29
00:02:12,010 --> 00:02:16,959
and I<font color="#E5E5E5"> have a special interest in C++ as</font>

30
00:02:15,400 --> 00:02:20,920
well as compiler and software

31
00:02:16,959 --> 00:02:22,989
performance analysis and in general I'm

32
00:02:20,920 --> 00:02:26,589
<font color="#E5E5E5">interested information security and what</font>

33
00:02:22,989 --> 00:02:28,330
comes<font color="#E5E5E5"> out underneath it and as part of</font>

34
00:02:26,590 --> 00:02:30,640
my<font color="#E5E5E5"> involvement in Reverse malware</font>

35
00:02:28,330 --> 00:02:32,170
reverse engineering<font color="#E5E5E5"> I got to see a lot</font>

36
00:02:30,640 --> 00:02:34,579
<font color="#CCCCCC">of</font><font color="#E5E5E5"> interesting exotic communication</font>

37
00:02:32,170 --> 00:02:37,579
channels<font color="#E5E5E5"> calls</font>

38
00:02:34,580 --> 00:02:44,780
so that that alone worth<font color="#CCCCCC"> the separate</font>

39
00:02:37,580 --> 00:02:47,600
talk so this is the first slide in the

40
00:02:44,780 --> 00:02:50,330
talk<font color="#E5E5E5"> I promise</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> the talk is not</font>

41
00:02:47,600 --> 00:02:53,780
<font color="#CCCCCC">about why shock display filters</font><font color="#E5E5E5"> so don't</font>

42
00:02:50,330 --> 00:02:57,290
get discouraged<font color="#E5E5E5"> but</font><font color="#CCCCCC"> I just want</font><font color="#E5E5E5"> to make</font>

43
00:02:53,780 --> 00:03:00,290
sure that you know what our display

44
00:02:57,290 --> 00:03:01,519
filters in Wireshark right can<font color="#E5E5E5"> anyone</font>

45
00:03:00,290 --> 00:03:04,090
tell me what this display filter is

46
00:03:01,520 --> 00:03:04,090
supposed to do

47
00:03:15,670 --> 00:03:22,119
<font color="#E5E5E5">okay so all it does is that</font><font color="#CCCCCC"> it's</font>

48
00:03:18,349 --> 00:03:24,829
<font color="#E5E5E5">checking for actually people's</font><font color="#CCCCCC"> request</font>

49
00:03:22,120 --> 00:03:27,410
with the<font color="#E5E5E5"> fact that you have a constant</font>

50
00:03:24,830 --> 00:03:30,530
length header<font color="#E5E5E5"> and the request set to</font>

51
00:03:27,410 --> 00:03:32,480
<font color="#E5E5E5">zero yet there is a payload does it make</font>

52
00:03:30,530 --> 00:03:33,019
<font color="#E5E5E5">sense of course it</font><font color="#CCCCCC"> doesn't</font><font color="#E5E5E5"> make sense</font>

53
00:03:32,480 --> 00:03:34,280
<font color="#E5E5E5">right</font>

54
00:03:33,019 --> 00:03:38,030
it doesn't even<font color="#E5E5E5"> adhere to the RFC</font>

55
00:03:34,280 --> 00:03:40,959
specifications this is just like a bit

56
00:03:38,030 --> 00:03:45,489
of introduction<font color="#E5E5E5"> so this is the kind of</font>

57
00:03:40,959 --> 00:03:45,489
display<font color="#E5E5E5"> folders you write for Wireshark</font>

58
00:03:46,360 --> 00:03:52,500
and now we have<font color="#CCCCCC"> this shark</font><font color="#E5E5E5"> the shark is</font>

59
00:03:49,360 --> 00:03:56,200
<font color="#CCCCCC">the</font><font color="#E5E5E5"> consult version of</font><font color="#CCCCCC"> white shark</font><font color="#E5E5E5"> right</font>

60
00:03:52,500 --> 00:04:00,730
and this is<font color="#E5E5E5"> the this</font><font color="#CCCCCC"> is how you would</font>

61
00:03:56,200 --> 00:04:03,040
invoke it<font color="#CCCCCC"> our takes</font><font color="#E5E5E5"> pcap file</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> why is</font>

62
00:04:00,730 --> 00:04:07,720
where you write<font color="#CCCCCC"> your display filter as</font>

63
00:04:03,040 --> 00:04:09,160
simple as<font color="#CCCCCC"> that</font><font color="#E5E5E5"> and here remember I'm</font>

64
00:04:07,720 --> 00:04:10,780
talking about display filters<font color="#E5E5E5"> there is</font>

65
00:04:09,160 --> 00:04:16,209
difference between display filters and

66
00:04:10,780 --> 00:04:18,040
capture filters<font color="#CCCCCC"> a static pcap file that</font>

67
00:04:16,209 --> 00:04:20,320
you're ready analyzing<font color="#CCCCCC"> capture filter</font>

68
00:04:18,040 --> 00:04:23,230
works<font color="#CCCCCC"> works in real time as you're</font>

69
00:04:20,320 --> 00:04:27,969
capturing traffic you're filtering<font color="#CCCCCC"> it so</font>

70
00:04:23,230 --> 00:04:31,000
that's different<font color="#E5E5E5"> talk now that</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> know</font>

71
00:04:27,970 --> 00:04:34,360
what<font color="#CCCCCC"> is Wireshark</font><font color="#E5E5E5"> what is</font><font color="#CCCCCC"> T shark</font><font color="#E5E5E5"> let's</font>

72
00:04:31,000 --> 00:04:37,330
go to<font color="#CCCCCC"> Wanda's</font><font color="#E5E5E5"> command processor the holy</font>

73
00:04:34,360 --> 00:04:42,790
<font color="#E5E5E5">grail of who runs and controls all</font><font color="#CCCCCC"> okay</font>

74
00:04:37,330 --> 00:04:45,250
again the talk is<font color="#E5E5E5"> not</font><font color="#CCCCCC"> about CMD I just</font>

75
00:04:42,790 --> 00:04:50,260
wanted<font color="#E5E5E5"> to set</font><font color="#CCCCCC"> the stage</font><font color="#E5E5E5"> for what what's</font>

76
00:04:45,250 --> 00:04:55,780
coming next<font color="#CCCCCC"> and automate some of your</font>

77
00:04:50,260 --> 00:04:59,260
tasks<font color="#E5E5E5"> in CMD you would use what's known</font>

78
00:04:55,780 --> 00:05:02,849
as those key macros<font color="#E5E5E5"> right it's extremely</font>

79
00:04:59,260 --> 00:05:05,380
limited and it doesn't give you much<font color="#CCCCCC"> of</font>

80
00:05:02,850 --> 00:05:07,570
features<font color="#E5E5E5"> to</font><font color="#CCCCCC"> automate your test in a</font>

81
00:05:05,380 --> 00:05:13,300
generic<font color="#E5E5E5"> way right or at least in a</font>

82
00:05:07,570 --> 00:05:16,659
democratized fashion so what is the

83
00:05:13,300 --> 00:05:18,940
motivation<font color="#CCCCCC"> for this talk I know this</font>

84
00:05:16,660 --> 00:05:21,610
sounds<font color="#CCCCCC"> weird the first point but</font>

85
00:05:18,940 --> 00:05:24,490
<font color="#E5E5E5">literally I wanted to explore the new</font>

86
00:05:21,610 --> 00:05:27,520
feature in C++ 11<font color="#E5E5E5"> and 14 and what is</font>

87
00:05:24,490 --> 00:05:29,740
better than<font color="#E5E5E5"> starting a new project from</font>

88
00:05:27,520 --> 00:05:34,030
scratch<font color="#E5E5E5"> right and testing different</font>

89
00:05:29,740 --> 00:05:36,700
<font color="#E5E5E5">stuff and I had the user of Wireshark I</font>

90
00:05:34,030 --> 00:05:38,710
literally use<font color="#CCCCCC"> it on a daily</font><font color="#E5E5E5"> basis except</font>

91
00:05:36,700 --> 00:05:43,090
of course for Saturday and Sunday

92
00:05:38,710 --> 00:05:45,430
otherwise I wouldn't have<font color="#E5E5E5"> alive and I</font>

93
00:05:43,090 --> 00:05:48,310
<font color="#E5E5E5">wanted something more than add a display</font>

94
00:05:45,430 --> 00:05:50,260
filter button<font color="#E5E5E5"> I'm sure whether it's</font>

95
00:05:48,310 --> 00:05:52,000
<font color="#CCCCCC">familiar with Wireshark</font><font color="#E5E5E5"> so when you</font>

96
00:05:50,260 --> 00:05:53,110
<font color="#E5E5E5">write a display filter</font><font color="#CCCCCC"> if you want to</font>

97
00:05:52,000 --> 00:05:55,150
save<font color="#CCCCCC"> it for later</font><font color="#E5E5E5"> on</font>

98
00:05:53,110 --> 00:05:57,370
you<font color="#E5E5E5"> just have to to the right that is</font>

99
00:05:55,150 --> 00:06:00,448
plus sign where you save it under a name

100
00:05:57,370 --> 00:06:05,260
and that's how you automate your

101
00:06:00,449 --> 00:06:07,180
<font color="#E5E5E5">invocation of display filters</font><font color="#CCCCCC"> and of</font>

102
00:06:05,260 --> 00:06:10,530
course it is a pleasure<font color="#E5E5E5"> on working</font>

103
00:06:07,180 --> 00:06:13,419
<font color="#E5E5E5">something in you starting from scratch</font>

104
00:06:10,530 --> 00:06:16,179
from designing<font color="#E5E5E5"> architecting engineering</font>

105
00:06:13,419 --> 00:06:25,510
testing and documentation like the

106
00:06:16,180 --> 00:06:27,310
<font color="#E5E5E5">entire process this is project the</font>

107
00:06:25,510 --> 00:06:29,950
agenda for this talk is as follows<font color="#CCCCCC"> I'll</font>

108
00:06:27,310 --> 00:06:33,430
be introducing<font color="#E5E5E5"> the framework itself why</font>

109
00:06:29,950 --> 00:06:35,800
I created it features internals<font color="#E5E5E5"> how</font><font color="#CCCCCC"> it</font>

110
00:06:33,430 --> 00:06:37,000
<font color="#E5E5E5">works and how</font><font color="#CCCCCC"> to write constructs this</font>

111
00:06:35,800 --> 00:06:41,320
<font color="#E5E5E5">is what I call construct I will see</font>

112
00:06:37,000 --> 00:06:43,450
later on<font color="#E5E5E5"> what they mean and how</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> most</font>

113
00:06:41,320 --> 00:06:45,729
importantly how this framework<font color="#E5E5E5"> will help</font>

114
00:06:43,450 --> 00:06:48,250
<font color="#E5E5E5">you achieve the following simplification</font>

115
00:06:45,729 --> 00:06:50,700
of repetitive<font color="#CCCCCC"> tasks automation of</font>

116
00:06:48,250 --> 00:06:53,860
<font color="#E5E5E5">exploited detection well I don't provide</font>

117
00:06:50,700 --> 00:06:56,669
a solution<font color="#E5E5E5"> for</font><font color="#CCCCCC"> that it is</font><font color="#E5E5E5"> for you</font><font color="#CCCCCC"> to</font>

118
00:06:53,860 --> 00:07:00,699
come<font color="#CCCCCC"> and write different display filters</font>

119
00:06:56,669 --> 00:07:02,889
and of course the framework<font color="#CCCCCC"> itself</font><font color="#E5E5E5"> helps</font>

120
00:07:00,699 --> 00:07:04,840
you in building self-contained<font color="#CCCCCC"> and easy</font>

121
00:07:02,889 --> 00:07:14,349
to<font color="#E5E5E5"> manage</font><font color="#CCCCCC"> self explanatory</font><font color="#E5E5E5"> units</font><font color="#CCCCCC"> slash</font>

122
00:07:04,840 --> 00:07:17,799
constructs<font color="#E5E5E5"> yeah so what is SPF in a</font>

123
00:07:14,349 --> 00:07:19,810
nutshell<font color="#E5E5E5"> SPF is a shell framework that</font>

124
00:07:17,800 --> 00:07:21,430
provides<font color="#CCCCCC"> a</font><font color="#E5E5E5"> sophisticated</font>

125
00:07:19,810 --> 00:07:23,919
abstraction<font color="#E5E5E5"> layer with seamless</font>

126
00:07:21,430 --> 00:07:31,630
<font color="#E5E5E5">interaction</font><font color="#CCCCCC"> 40 shark</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> Windows command</font>

127
00:07:23,919 --> 00:07:34,990
shell interpreter<font color="#CCCCCC"> it features a new</font>

128
00:07:31,630 --> 00:07:36,900
custom developed<font color="#E5E5E5"> language it's a</font>

129
00:07:34,990 --> 00:07:40,389
declarative language called<font color="#E5E5E5"> eros that I</font>

130
00:07:36,900 --> 00:07:42,370
developed<font color="#E5E5E5"> for this framework and in case</font>

131
00:07:40,389 --> 00:07:45,430
you're<font color="#E5E5E5"> wondering what era's stands for</font>

132
00:07:42,370 --> 00:07:49,800
it's literally in reference<font color="#CCCCCC"> to the Greek</font>

133
00:07:45,430 --> 00:07:54,460
god of law procreation and sexual desire

134
00:07:49,800 --> 00:07:57,340
<font color="#CCCCCC">I just like Greek stuff history so</font>

135
00:07:54,460 --> 00:08:01,060
that's why I chose this name and<font color="#E5E5E5"> of</font>

136
00:07:57,340 --> 00:08:03,369
course you have a<font color="#E5E5E5"> framework you have a</font>

137
00:08:01,060 --> 00:08:04,750
shell and<font color="#E5E5E5"> you have a language right so</font>

138
00:08:03,370 --> 00:08:07,150
how would you want<font color="#CCCCCC"> to interact</font><font color="#E5E5E5"> with the</font>

139
00:08:04,750 --> 00:08:08,620
<font color="#E5E5E5">framework and the shell of course there</font>

140
00:08:07,150 --> 00:08:10,780
is a set<font color="#E5E5E5"> of built-in helper commands</font>

141
00:08:08,620 --> 00:08:12,550
that allows you<font color="#CCCCCC"> to</font><font color="#E5E5E5"> enter</font>

142
00:08:10,780 --> 00:08:19,840
with the language itself<font color="#E5E5E5"> in a dynamic</font>

143
00:08:12,550 --> 00:08:24,820
way so how this interaction was<font color="#CCCCCC"> tea</font>

144
00:08:19,840 --> 00:08:26,950
shark and CMD is accomplished<font color="#E5E5E5"> this is</font>

145
00:08:24,820 --> 00:08:29,830
that comes through<font color="#CCCCCC"> two unique</font><font color="#E5E5E5"> constructs</font>

146
00:08:26,950 --> 00:08:31,289
that<font color="#E5E5E5"> are part</font><font color="#CCCCCC"> of the language</font><font color="#E5E5E5"> and I</font>

147
00:08:29,830 --> 00:08:37,390
define them under the<font color="#CCCCCC"> following names</font>

148
00:08:31,289 --> 00:08:40,000
<font color="#E5E5E5">SPF is for tea shark and when you're</font>

149
00:08:37,390 --> 00:08:41,830
interacting<font color="#E5E5E5"> with CMD this will become</font>

150
00:08:40,000 --> 00:08:44,470
clear later on the slice<font color="#E5E5E5"> I know now it's</font>

151
00:08:41,830 --> 00:08:47,020
very abstract<font color="#E5E5E5"> and these constructs</font>

152
00:08:44,470 --> 00:08:49,420
constitute the knowledge base of<font color="#E5E5E5"> the</font>

153
00:08:47,020 --> 00:08:51,400
framework so the more you write of these

154
00:08:49,420 --> 00:08:53,380
constructs<font color="#E5E5E5"> the better it is the</font>

155
00:08:51,400 --> 00:08:56,170
framework<font color="#E5E5E5"> in</font><font color="#CCCCCC"> terms of what you</font><font color="#E5E5E5"> can</font>

156
00:08:53,380 --> 00:08:58,810
achieve with it so first we'll address

157
00:08:56,170 --> 00:09:03,579
the first construct that is SPF

158
00:08:58,810 --> 00:09:07,750
construct and this is the skeleton<font color="#E5E5E5"> of</font>

159
00:09:03,580 --> 00:09:09,400
<font color="#E5E5E5">the console okay SPF then you have the</font>

160
00:09:07,750 --> 00:09:11,380
name you<font color="#E5E5E5"> have</font><font color="#CCCCCC"> to give it a name right</font>

161
00:09:09,400 --> 00:09:14,970
and then followed by the logic

162
00:09:11,380 --> 00:09:19,150
definition the logic definition takes

163
00:09:14,970 --> 00:09:22,480
display filter logic so you have to be

164
00:09:19,150 --> 00:09:28,540
good at writing<font color="#E5E5E5"> tea shark display</font>

165
00:09:22,480 --> 00:09:32,200
filters the better you are the<font color="#CCCCCC"> better is</font>

166
00:09:28,540 --> 00:09:35,110
the<font color="#E5E5E5"> SPF contract don't let what's the</font>

167
00:09:32,200 --> 00:09:37,330
<font color="#E5E5E5">positive and yeah and you have to</font><font color="#CCCCCC"> write</font>

168
00:09:35,110 --> 00:09:41,950
<font color="#E5E5E5">it semantically and syntactically</font>

169
00:09:37,330 --> 00:09:45,070
correct<font color="#E5E5E5"> display filters because the</font>

170
00:09:41,950 --> 00:09:46,540
language itself does not<font color="#E5E5E5"> verify the</font>

171
00:09:45,070 --> 00:09:48,310
semantics of the<font color="#E5E5E5"> display</font><font color="#CCCCCC"> filler</font><font color="#E5E5E5"> that you</font>

172
00:09:46,540 --> 00:09:50,560
write it with<font color="#E5E5E5"> a framework it is being</font>

173
00:09:48,310 --> 00:09:53,920
verified by<font color="#CCCCCC"> tea shark</font><font color="#E5E5E5"> itself and not the</font>

174
00:09:50,560 --> 00:09:55,780
framework<font color="#E5E5E5"> info the key word info is</font>

175
00:09:53,920 --> 00:10:00,339
literally you are giving this<font color="#CCCCCC"> cons</font><font color="#E5E5E5"> right</font>

176
00:09:55,780 --> 00:10:03,370
<font color="#E5E5E5">they help</font><font color="#CCCCCC"> statement</font><font color="#E5E5E5"> that's all and for</font>

177
00:10:00,339 --> 00:10:04,720
tag<font color="#E5E5E5"> this is</font><font color="#CCCCCC"> one you want to search for a</font>

178
00:10:03,370 --> 00:10:08,380
<font color="#E5E5E5">different set of constructs in your</font>

179
00:10:04,720 --> 00:10:10,510
framework like<font color="#CCCCCC"> anywho right here</font>

180
00:10:08,380 --> 00:10:13,000
<font color="#CCCCCC">old-fashioned</font><font color="#E5E5E5"> so you just give</font><font color="#CCCCCC"> it a type</font>

181
00:10:10,510 --> 00:10:16,000
for<font color="#CCCCCC"> example you give one one constructor</font>

182
00:10:13,000 --> 00:10:20,770
HTTP the author and what's supposed<font color="#CCCCCC"> to</font>

183
00:10:16,000 --> 00:10:22,330
do<font color="#E5E5E5"> and the tag keyword is optional you</font>

184
00:10:20,770 --> 00:10:24,790
<font color="#CCCCCC">don't have</font><font color="#E5E5E5"> to have</font><font color="#CCCCCC"> it in the</font><font color="#E5E5E5"> contract</font>

185
00:10:22,330 --> 00:10:28,270
whereas the others they have<font color="#CCCCCC"> to be</font>

186
00:10:24,790 --> 00:10:29,620
<font color="#E5E5E5">present and this</font><font color="#CCCCCC"> is in a nutshell SPF</font>

187
00:10:28,270 --> 00:10:32,949
<font color="#CCCCCC">construct this as simple</font><font color="#E5E5E5"> as that</font>

188
00:10:29,620 --> 00:10:35,050
<font color="#E5E5E5">and mind you each of these</font><font color="#CCCCCC"> keywords</font><font color="#E5E5E5"> they</font>

189
00:10:32,950 --> 00:10:37,630
are<font color="#CCCCCC"> accessible from</font><font color="#E5E5E5"> the shell from SPF</font>

190
00:10:35,050 --> 00:10:40,180
shell later on you can inspect each one

191
00:10:37,630 --> 00:10:46,689
of them and you can update the logic one

192
00:10:40,180 --> 00:10:50,079
at least<font color="#E5E5E5"> dynamically sorry in memory and</font>

193
00:10:46,690 --> 00:10:54,370
therefore<font color="#CCCCCC"> when construct it is the same</font>

194
00:10:50,080 --> 00:10:57,550
as<font color="#CCCCCC"> SPS construct</font><font color="#E5E5E5"> I'm sorry I'm moving</font>

195
00:10:54,370 --> 00:11:00,340
way ahead<font color="#CCCCCC"> so this is an example of what</font>

196
00:10:57,550 --> 00:11:03,219
an SPF contract looks like right<font color="#E5E5E5"> so I</font>

197
00:11:00,340 --> 00:11:07,300
give it<font color="#E5E5E5"> a name</font><font color="#CCCCCC"> first</font><font color="#E5E5E5"> one is get your I</font>

198
00:11:03,220 --> 00:11:11,290
<font color="#E5E5E5">write the logic of this construct is the</font>

199
00:11:07,300 --> 00:11:15,219
display filter that tells it<font color="#E5E5E5"> okay check</font>

200
00:11:11,290 --> 00:11:19,589
for all HTTP request methods<font color="#E5E5E5"> but</font><font color="#CCCCCC"> then I</font>

201
00:11:15,220 --> 00:11:22,810
get and print<font color="#E5E5E5"> to the console the field</font>

202
00:11:19,590 --> 00:11:27,670
<font color="#E5E5E5">that is the request</font><font color="#CCCCCC"> URI it is as simple</font>

203
00:11:22,810 --> 00:11:29,619
<font color="#E5E5E5">as</font><font color="#CCCCCC"> that right</font><font color="#E5E5E5"> so I'm not remaining it to</font>

204
00:11:27,670 --> 00:11:31,329
do this for me<font color="#E5E5E5"> so I don't want to type</font>

205
00:11:29,620 --> 00:11:34,840
it every time I use this particular

206
00:11:31,330 --> 00:11:41,620
<font color="#CCCCCC">spatial terrain and I'm giving</font><font color="#E5E5E5"> it a help</font>

207
00:11:34,840 --> 00:11:45,150
<font color="#E5E5E5">and attack it is as</font><font color="#CCCCCC"> simple as</font><font color="#E5E5E5"> that on</font>

208
00:11:41,620 --> 00:11:50,440
the<font color="#E5E5E5"> other side for</font><font color="#CCCCCC"> the wind construct</font>

209
00:11:45,150 --> 00:11:55,740
it's the same<font color="#E5E5E5"> SPF constructs except that</font>

210
00:11:50,440 --> 00:11:59,800
at the evaluation and execution<font color="#CCCCCC"> steps</font>

211
00:11:55,740 --> 00:12:02,860
they take<font color="#E5E5E5"> different passes like</font><font color="#CCCCCC"> this is</font>

212
00:11:59,800 --> 00:12:07,780
internal speaking but there is the same

213
00:12:02,860 --> 00:12:12,370
as<font color="#E5E5E5"> SPF</font><font color="#CCCCCC"> construct and of course you</font>

214
00:12:07,780 --> 00:12:15,220
cannot write<font color="#E5E5E5"> t shark display filters in</font>

215
00:12:12,370 --> 00:12:18,070
this construct because<font color="#E5E5E5"> these gets</font>

216
00:12:15,220 --> 00:12:23,310
executed by window<font color="#CCCCCC"> C and D right</font><font color="#E5E5E5"> whereas</font>

217
00:12:18,070 --> 00:12:23,310
SPF<font color="#E5E5E5"> constructs are handled by T shark</font>

218
00:12:25,470 --> 00:12:32,070
and would<font color="#E5E5E5"> win contract you can do</font>

219
00:12:29,380 --> 00:12:36,280
whatever you want whatever<font color="#E5E5E5"> you can run</font>

220
00:12:32,070 --> 00:12:39,760
via your CMD anything<font color="#E5E5E5"> here I'm simply</font>

221
00:12:36,280 --> 00:12:42,520
calling<font color="#E5E5E5"> this wmic command which gives me</font>

222
00:12:39,760 --> 00:12:49,980
the<font color="#CCCCCC"> us architecture as</font><font color="#E5E5E5"> simple as that</font>

223
00:12:42,520 --> 00:12:52,300
<font color="#CCCCCC">ah so we have these two constructs</font><font color="#E5E5E5"> okay</font>

224
00:12:49,980 --> 00:12:55,210
you can write as many constructs as you

225
00:12:52,300 --> 00:12:59,020
want<font color="#E5E5E5"> right they are</font><font color="#CCCCCC"> available from the</font>

226
00:12:55,210 --> 00:13:02,140
shell but how can we generalize<font color="#E5E5E5"> their</font>

227
00:12:59,020 --> 00:13:04,620
use in such a way that when I call a

228
00:13:02,140 --> 00:13:08,590
given<font color="#CCCCCC"> construct I want to be able to</font>

229
00:13:04,620 --> 00:13:10,750
input<font color="#E5E5E5"> an argument</font><font color="#CCCCCC"> that would</font><font color="#E5E5E5"> influence</font>

230
00:13:08,590 --> 00:13:15,160
the output of the construct right so I

231
00:13:10,750 --> 00:13:19,240
want to<font color="#E5E5E5"> parameterize</font><font color="#CCCCCC"> it to do that here</font>

232
00:13:15,160 --> 00:13:22,650
through the power of<font color="#CCCCCC"> Eros language we</font>

233
00:13:19,240 --> 00:13:27,670
can use a set<font color="#E5E5E5"> of input operators right</font>

234
00:13:22,650 --> 00:13:29,439
so as of this<font color="#E5E5E5"> version the language</font>

235
00:13:27,670 --> 00:13:33,180
supports couple of input operators that

236
00:13:29,440 --> 00:13:36,880
allows you<font color="#E5E5E5"> to parameterize the logic of</font>

237
00:13:33,180 --> 00:13:44,020
your constructs so first I<font color="#E5E5E5"> have the</font>

238
00:13:36,880 --> 00:13:45,970
input operator<font color="#E5E5E5"> Arg Arg is simply</font><font color="#CCCCCC"> C</font><font color="#E5E5E5"> n if</font>

239
00:13:44,020 --> 00:13:48,850
you're familiar<font color="#E5E5E5"> with C</font><font color="#CCCCCC"> language</font><font color="#E5E5E5"> just a</font>

240
00:13:45,970 --> 00:13:52,960
<font color="#E5E5E5">simple</font><font color="#CCCCCC"> CN</font><font color="#E5E5E5"> and takes whatever value so</font>

241
00:13:48,850 --> 00:13:55,090
you can place this<font color="#CCCCCC"> arg operator anywhere</font>

242
00:13:52,960 --> 00:13:58,420
in the logic definition and when you

243
00:13:55,090 --> 00:14:01,600
invoke that<font color="#E5E5E5"> construct the construct the</font>

244
00:13:58,420 --> 00:14:06,790
shell itself<font color="#E5E5E5"> is expecting you to give it</font>

245
00:14:01,600 --> 00:14:07,990
a<font color="#CCCCCC"> value that will be put in place where</font>

246
00:14:06,790 --> 00:14:10,390
this<font color="#CCCCCC"> arg</font>

247
00:14:07,990 --> 00:14:13,420
operator is located in the logic

248
00:14:10,390 --> 00:14:17,680
definition this<font color="#E5E5E5"> will become clear later</font>

249
00:14:13,420 --> 00:14:21,310
on and now<font color="#CCCCCC"> I think</font><font color="#E5E5E5"> this is the most</font>

250
00:14:17,680 --> 00:14:23,650
powerful<font color="#E5E5E5"> operator so the arg1 takes only</font>

251
00:14:21,310 --> 00:14:25,750
one value right it's always<font color="#E5E5E5"> from</font><font color="#CCCCCC"> the</font>

252
00:14:23,650 --> 00:14:28,030
shell now I needed<font color="#E5E5E5"> something more</font>

253
00:14:25,750 --> 00:14:31,810
<font color="#E5E5E5">generic more powerful something that</font>

254
00:14:28,030 --> 00:14:34,300
will execute<font color="#E5E5E5"> different contents all at</font>

255
00:14:31,810 --> 00:14:36,790
once for me so<font color="#E5E5E5"> I introduced this list</font>

256
00:14:34,300 --> 00:14:37,880
<font color="#E5E5E5">operator</font><font color="#CCCCCC"> it takes the counter of a</font><font color="#E5E5E5"> text</font>

257
00:14:36,790 --> 00:14:41,329
file

258
00:14:37,880 --> 00:14:44,389
so when he used<font color="#E5E5E5"> this contract this</font>

259
00:14:41,329 --> 00:14:47,839
operator<font color="#E5E5E5"> in your contract what's gonna</font>

260
00:14:44,389 --> 00:14:50,420
<font color="#E5E5E5">happen is the following</font><font color="#CCCCCC"> first</font><font color="#E5E5E5"> you give</font>

261
00:14:47,839 --> 00:14:54,680
it a<font color="#CCCCCC"> filename</font><font color="#E5E5E5"> before your data is stored</font>

262
00:14:50,420 --> 00:14:56,029
on disk<font color="#CCCCCC"> and every time there is</font><font color="#E5E5E5"> an</font>

263
00:14:54,680 --> 00:14:58,670
<font color="#E5E5E5">execution of that contract that</font>

264
00:14:56,029 --> 00:15:00,620
<font color="#CCCCCC">references</font><font color="#E5E5E5"> this list file it's gonna</font>

265
00:14:58,670 --> 00:15:04,430
pull one<font color="#E5E5E5"> entry from</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> from the file</font>

266
00:15:00,620 --> 00:15:07,120
and<font color="#E5E5E5"> execute it one at a</font><font color="#CCCCCC"> time</font><font color="#E5E5E5"> so it's</font>

267
00:15:04,430 --> 00:15:11,120
gonna be<font color="#CCCCCC"> executed in an</font><font color="#E5E5E5"> iterative manner</font>

268
00:15:07,120 --> 00:15:12,920
<font color="#E5E5E5">and of course it is reasonable</font><font color="#CCCCCC"> to say</font>

269
00:15:11,120 --> 00:15:16,930
<font color="#CCCCCC">that they can exist</font><font color="#E5E5E5"> only one instance of</font>

270
00:15:12,920 --> 00:15:24,620
<font color="#E5E5E5">this operator to construct right</font>

271
00:15:16,930 --> 00:15:27,469
otherwise<font color="#CCCCCC"> it</font><font color="#E5E5E5"> doesn't make</font><font color="#CCCCCC"> sense and</font>

272
00:15:24,620 --> 00:15:30,649
furthermore you can<font color="#E5E5E5"> generalize it so the</font>

273
00:15:27,470 --> 00:15:32,899
<font color="#E5E5E5">file name need not be hard-coded you can</font>

274
00:15:30,649 --> 00:15:36,829
input it from the shell<font color="#E5E5E5"> should you</font>

275
00:15:32,899 --> 00:15:37,730
choose to<font color="#E5E5E5"> via the</font><font color="#CCCCCC"> arc</font><font color="#E5E5E5"> input operator so</font>

276
00:15:36,829 --> 00:15:45,550
<font color="#E5E5E5">that was a</font><font color="#CCCCCC"> natural conclusion</font>

277
00:15:37,730 --> 00:15:48,649
technically and of course<font color="#E5E5E5"> so you have</font>

278
00:15:45,550 --> 00:15:51,740
but the<font color="#E5E5E5"> data in the text</font><font color="#CCCCCC"> file</font><font color="#E5E5E5"> that</font>

279
00:15:48,649 --> 00:15:56,509
you're referencing<font color="#E5E5E5"> every time you get a</font>

280
00:15:51,740 --> 00:15:59,360
hit<font color="#CCCCCC"> on any entry in the shell in the</font>

281
00:15:56,509 --> 00:16:03,639
<font color="#E5E5E5">output</font><font color="#CCCCCC"> you need to know which one it is</font>

282
00:15:59,360 --> 00:16:06,680
<font color="#E5E5E5">heading on right so to do that you can</font>

283
00:16:03,639 --> 00:16:10,670
assign<font color="#CCCCCC"> to every entry in</font><font color="#E5E5E5"> the text file</font>

284
00:16:06,680 --> 00:16:14,870
<font color="#E5E5E5">this particular print operator with a</font>

285
00:16:10,670 --> 00:16:18,649
specific<font color="#E5E5E5"> message okay so every time you</font>

286
00:16:14,870 --> 00:16:21,319
<font color="#E5E5E5">get a hit on the data part the the</font>

287
00:16:18,649 --> 00:16:27,050
<font color="#CCCCCC">message it's gonna get printed in the</font>

288
00:16:21,319 --> 00:16:28,729
shell<font color="#E5E5E5"> and gives you the</font><font color="#CCCCCC"> output</font><font color="#E5E5E5"> so the</font>

289
00:16:27,050 --> 00:16:31,008
data<font color="#E5E5E5"> part contains the data part that</font>

290
00:16:28,730 --> 00:16:32,990
will<font color="#E5E5E5"> be put in the logic definition of</font>

291
00:16:31,009 --> 00:16:39,740
where the list<font color="#E5E5E5"> operator is referenced as</font>

292
00:16:32,990 --> 00:16:43,670
we'll see<font color="#CCCCCC"> later on so what can you do</font>

293
00:16:39,740 --> 00:16:47,019
with list operator what possibility is

294
00:16:43,670 --> 00:16:47,019
it open<font color="#E5E5E5"> for you</font>

295
00:16:48,519 --> 00:16:55,490
simply you can use it<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can store</font><font color="#E5E5E5"> list</font>

296
00:16:52,850 --> 00:16:58,430
of<font color="#E5E5E5"> suspicious or animals many user</font>

297
00:16:55,490 --> 00:17:00,620
agents because you don't wanna<font color="#E5E5E5"> in your</font>

298
00:16:58,430 --> 00:17:04,970
<font color="#E5E5E5">construct you go on a hard code and the</font>

299
00:17:00,620 --> 00:17:10,189
entire list<font color="#E5E5E5"> in the logic definition and</font>

300
00:17:04,970 --> 00:17:12,860
you can have a list<font color="#E5E5E5"> of malicious lash</font>

301
00:17:10,189 --> 00:17:14,990
suspicious SSL TLS certificates if you

302
00:17:12,859 --> 00:17:19,188
know malware that's communicating with a

303
00:17:14,990 --> 00:17:22,549
bad side<font color="#CCCCCC"> and of course in case you're</font>

304
00:17:19,189 --> 00:17:24,409
wondering<font color="#E5E5E5"> recent versions of</font><font color="#CCCCCC"> tea shark</font>

305
00:17:22,549 --> 00:17:27,049
<font color="#CCCCCC">they allow you to</font><font color="#E5E5E5"> parse the entire</font>

306
00:17:24,409 --> 00:17:28,339
certificate every field previous

307
00:17:27,049 --> 00:17:30,020
<font color="#E5E5E5">versions we weren't allowed to do that</font>

308
00:17:28,339 --> 00:17:33,020
at all<font color="#CCCCCC"> you would</font><font color="#E5E5E5"> have to extract it</font>

309
00:17:30,020 --> 00:17:35,389
<font color="#E5E5E5">manually and</font><font color="#CCCCCC"> then do</font><font color="#E5E5E5"> all the stuff and</font>

310
00:17:33,020 --> 00:17:38,809
of course<font color="#CCCCCC"> your</font><font color="#E5E5E5"> grouping so if you have a</font>

311
00:17:35,390 --> 00:17:41,690
malware family and each variant of that

312
00:17:38,809 --> 00:17:43,820
<font color="#E5E5E5">family has a different communication</font>

313
00:17:41,690 --> 00:17:46,070
protocol or they differ slightly

314
00:17:43,820 --> 00:17:47,720
so of<font color="#E5E5E5"> course why not group them in one</font>

315
00:17:46,070 --> 00:17:55,639
<font color="#E5E5E5">list file instead of creating a</font>

316
00:17:47,720 --> 00:18:01,010
construct<font color="#E5E5E5"> for each variant okay so now</font>

317
00:17:55,640 --> 00:18:04,309
<font color="#E5E5E5">we know about SPF and</font><font color="#CCCCCC"> wind construct</font><font color="#E5E5E5"> and</font>

318
00:18:01,010 --> 00:18:06,350
we have a list<font color="#CCCCCC"> of operators to interact</font>

319
00:18:04,309 --> 00:18:09,529
<font color="#CCCCCC">with these constructs</font><font color="#E5E5E5"> from the shell or</font>

320
00:18:06,350 --> 00:18:14,149
at least<font color="#E5E5E5"> to generalize they're used now</font>

321
00:18:09,529 --> 00:18:18,020
<font color="#E5E5E5">how can</font><font color="#CCCCCC"> we even make it</font><font color="#E5E5E5"> better if you</font>

322
00:18:14,149 --> 00:18:21,459
want to build<font color="#E5E5E5"> one construct on top of</font>

323
00:18:18,020 --> 00:18:23,870
the other<font color="#E5E5E5"> right</font><font color="#CCCCCC"> just like in any</font>

324
00:18:21,460 --> 00:18:25,789
functional language right you call

325
00:18:23,870 --> 00:18:28,658
functions but this is<font color="#E5E5E5"> declarative</font>

326
00:18:25,789 --> 00:18:32,960
<font color="#E5E5E5">language right so I need to introduce</font>

327
00:18:28,659 --> 00:18:36,740
more<font color="#E5E5E5"> operators this following operator</font>

328
00:18:32,960 --> 00:18:39,350
is<font color="#E5E5E5"> called the coal operator so you had a</font>

329
00:18:36,740 --> 00:18:41,299
construct<font color="#E5E5E5"> right that performs specific</font>

330
00:18:39,350 --> 00:18:46,510
function<font color="#E5E5E5"> right and you have another</font>

331
00:18:41,299 --> 00:18:49,070
construct but that construct the new one

332
00:18:46,510 --> 00:18:50,510
inherits<font color="#E5E5E5"> some of the</font><font color="#CCCCCC"> logic and the other</font>

333
00:18:49,070 --> 00:18:54,080
construct<font color="#E5E5E5"> so you don't want to write it</font>

334
00:18:50,510 --> 00:18:56,929
<font color="#CCCCCC">again so I started</font><font color="#E5E5E5"> writing it you just</font>

335
00:18:54,080 --> 00:19:00,470
call it right as simple as that<font color="#CCCCCC"> and this</font>

336
00:18:56,929 --> 00:19:02,600
<font color="#E5E5E5">is done through</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> coal operator call</font>

337
00:19:00,470 --> 00:19:07,160
and you give<font color="#CCCCCC"> it the SPS</font><font color="#E5E5E5"> construct that</font>

338
00:19:02,600 --> 00:19:09,590
<font color="#CCCCCC">you</font><font color="#E5E5E5"> already wrote and the scene it goes</font>

339
00:19:07,160 --> 00:19:13,610
with the wind construct<font color="#E5E5E5"> and mind you</font>

340
00:19:09,590 --> 00:19:15,760
from SPF<font color="#E5E5E5"> you can</font><font color="#CCCCCC"> go wind constructs but</font>

341
00:19:13,610 --> 00:19:19,310
<font color="#CCCCCC">not the other way around why is</font><font color="#E5E5E5"> that</font>

342
00:19:15,760 --> 00:19:22,280
because<font color="#CCCCCC"> wind contract</font><font color="#E5E5E5"> gets executed by</font>

343
00:19:19,310 --> 00:19:25,629
<font color="#CCCCCC">window CMD</font><font color="#E5E5E5"> whereas SPF constructs again</font>

344
00:19:22,280 --> 00:19:29,629
gets executed by<font color="#CCCCCC"> tea shark</font>

345
00:19:25,630 --> 00:19:33,650
so from execution perspective they are

346
00:19:29,630 --> 00:19:39,670
<font color="#E5E5E5">handled differently so this is the</font>

347
00:19:33,650 --> 00:19:43,370
<font color="#E5E5E5">cooperator so and again to point it out</font>

348
00:19:39,670 --> 00:19:45,680
<font color="#CCCCCC">co-operators</font><font color="#E5E5E5"> contain a fully functional</font>

349
00:19:43,370 --> 00:19:48,860
they reference<font color="#E5E5E5"> sorry they reference</font>

350
00:19:45,680 --> 00:19:51,670
fully functional constructs<font color="#E5E5E5"> by are meant</font>

351
00:19:48,860 --> 00:19:55,610
to reference fully functional construct

352
00:19:51,670 --> 00:19:59,380
that can be executed<font color="#E5E5E5"> on their own not as</font>

353
00:19:55,610 --> 00:20:03,979
macros<font color="#CCCCCC"> okay</font>

354
00:19:59,380 --> 00:20:07,760
what if you want<font color="#E5E5E5"> to have just</font><font color="#CCCCCC"> macros</font>

355
00:20:03,980 --> 00:20:11,110
that<font color="#CCCCCC"> cannot be executed</font><font color="#E5E5E5"> on their own but</font>

356
00:20:07,760 --> 00:20:15,590
<font color="#CCCCCC">just for documentation</font><font color="#E5E5E5"> clarity and</font>

357
00:20:11,110 --> 00:20:18,050
visibility<font color="#E5E5E5"> in your code you might need</font>

358
00:20:15,590 --> 00:20:21,730
<font color="#E5E5E5">something else</font><font color="#CCCCCC"> other</font><font color="#E5E5E5"> than call operators</font>

359
00:20:18,050 --> 00:20:25,909
for that<font color="#E5E5E5"> I also have what's known as</font>

360
00:20:21,730 --> 00:20:28,580
<font color="#E5E5E5">global auxiliary logic definitions so</font>

361
00:20:25,910 --> 00:20:31,190
these<font color="#CCCCCC"> definitions</font><font color="#E5E5E5"> they are global with</font>

362
00:20:28,580 --> 00:20:34,909
the universal lexical scope<font color="#E5E5E5"> they are</font>

363
00:20:31,190 --> 00:20:36,620
non-executable<font color="#E5E5E5"> named statements that can</font>

364
00:20:34,910 --> 00:20:39,860
be used of course<font color="#E5E5E5"> with SPF and when</font>

365
00:20:36,620 --> 00:20:44,120
<font color="#E5E5E5">constructs for as building</font><font color="#CCCCCC"> blocks so</font>

366
00:20:39,860 --> 00:20:46,070
again you cannot execute<font color="#E5E5E5"> these logical</font>

367
00:20:44,120 --> 00:20:49,610
definitions on their own they meant<font color="#E5E5E5"> to</font>

368
00:20:46,070 --> 00:20:51,649
<font color="#E5E5E5">be referenced by</font><font color="#CCCCCC"> other constructs they</font>

369
00:20:49,610 --> 00:20:55,280
are just macros<font color="#E5E5E5"> literally as simple as</font>

370
00:20:51,650 --> 00:20:57,740
<font color="#CCCCCC">that</font><font color="#E5E5E5"> and this is the syntax for</font><font color="#CCCCCC"> a logic</font>

371
00:20:55,280 --> 00:21:00,379
definition for example<font color="#CCCCCC"> eva it always has</font>

372
00:20:57,740 --> 00:21:03,170
to start with<font color="#CCCCCC"> an</font><font color="#E5E5E5"> L capital letter</font>

373
00:21:00,380 --> 00:21:07,160
followed by dot followed by the name of

374
00:21:03,170 --> 00:21:11,110
<font color="#E5E5E5">the auxiliary logic followed by the</font>

375
00:21:07,160 --> 00:21:14,110
logic<font color="#E5E5E5"> as that</font>

376
00:21:11,110 --> 00:21:18,019
so how would you reference this

377
00:21:14,110 --> 00:21:20,418
auxiliary logic<font color="#E5E5E5"> in your</font><font color="#CCCCCC"> contract how</font>

378
00:21:18,019 --> 00:21:26,059
<font color="#CCCCCC">would you call</font><font color="#E5E5E5"> it right so I need</font>

379
00:21:20,419 --> 00:21:29,740
<font color="#E5E5E5">another operator for that for that I use</font>

380
00:21:26,059 --> 00:21:32,509
<font color="#E5E5E5">the insert operator just like in your</font>

381
00:21:29,740 --> 00:21:36,320
SQL statements or whatever other

382
00:21:32,509 --> 00:21:39,620
declarative language so<font color="#E5E5E5"> to reference a</font>

383
00:21:36,320 --> 00:21:44,330
given<font color="#E5E5E5"> auxiliary logic definition we</font><font color="#CCCCCC"> use</font>

384
00:21:39,620 --> 00:21:48,350
the insert operator so whenever SPF

385
00:21:44,330 --> 00:21:50,570
parser finds an instance<font color="#E5E5E5"> of this insert</font>

386
00:21:48,350 --> 00:21:53,600
operator statement in the logic

387
00:21:50,570 --> 00:21:57,939
definition it's<font color="#E5E5E5"> going to be replaced</font><font color="#CCCCCC"> of</font>

388
00:21:53,600 --> 00:21:57,939
whatever<font color="#E5E5E5"> it is defined</font>

389
00:22:03,400 --> 00:22:11,710
<font color="#E5E5E5">okay so let us say you have a set of</font>

390
00:22:08,080 --> 00:22:14,590
constructs<font color="#CCCCCC"> you have 10 right</font><font color="#E5E5E5"> that you</font>

391
00:22:11,710 --> 00:22:17,590
execute<font color="#CCCCCC"> one after</font><font color="#E5E5E5"> the other always right</font>

392
00:22:14,590 --> 00:22:19,330
so<font color="#CCCCCC"> you go to the shell</font><font color="#E5E5E5"> let me call get</font>

393
00:22:17,590 --> 00:22:21,520
your<font color="#E5E5E5"> icon strike followed</font><font color="#CCCCCC"> by</font><font color="#E5E5E5"> another one</font>

394
00:22:19,330 --> 00:22:22,750
another one another one right and you

395
00:22:21,520 --> 00:22:24,610
keep doing<font color="#CCCCCC"> this</font><font color="#E5E5E5"> again and</font><font color="#CCCCCC"> again</font><font color="#E5E5E5"> and</font>

396
00:22:22,750 --> 00:22:27,700
<font color="#E5E5E5">again so you wanted to</font><font color="#CCCCCC"> make this process</font>

397
00:22:24,610 --> 00:22:30,760
right<font color="#CCCCCC"> so how would</font><font color="#E5E5E5"> you do</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> you do it</font>

398
00:22:27,700 --> 00:22:34,840
<font color="#E5E5E5">through what's known as multi command</font>

399
00:22:30,760 --> 00:22:40,950
unit<font color="#E5E5E5"> so this allows you to</font><font color="#CCCCCC"> group the</font>

400
00:22:34,840 --> 00:22:44,530
calling of different constructs in one

401
00:22:40,950 --> 00:22:46,510
I'd<font color="#CCCCCC"> say like in one statement</font><font color="#E5E5E5"> and they</font>

402
00:22:44,530 --> 00:22:49,389
will<font color="#E5E5E5"> get executed on your behalf</font>

403
00:22:46,510 --> 00:22:52,920
one after the<font color="#CCCCCC"> other it is just a</font><font color="#E5E5E5"> matter</font>

404
00:22:49,390 --> 00:22:55,870
of<font color="#E5E5E5"> for grouping them and of</font><font color="#CCCCCC"> course since</font>

405
00:22:52,920 --> 00:23:00,309
the execution happening through<font color="#E5E5E5"> windows</font>

406
00:22:55,870 --> 00:23:02,639
CMD you can use whatever<font color="#E5E5E5"> window</font><font color="#CCCCCC"> CMD</font>

407
00:23:00,309 --> 00:23:02,639
provides

408
00:23:06,650 --> 00:23:13,610
and all<font color="#E5E5E5"> of these constructs again they</font>

409
00:23:10,490 --> 00:23:16,430
are<font color="#E5E5E5"> accessible from the shell as we will</font>

410
00:23:13,610 --> 00:23:21,050
<font color="#E5E5E5">see</font><font color="#CCCCCC"> later on so here's here's an example</font>

411
00:23:16,430 --> 00:23:22,850
of an MCU unit so for<font color="#E5E5E5"> example I give it</font>

412
00:23:21,050 --> 00:23:24,830
<font color="#CCCCCC">the name test right</font>

413
00:23:22,850 --> 00:23:27,139
and here I'm printing<font color="#CCCCCC"> to the</font><font color="#E5E5E5"> console</font>

414
00:23:24,830 --> 00:23:28,639
<font color="#E5E5E5">this message the echo message and then</font>

415
00:23:27,140 --> 00:23:32,000
I'm calling<font color="#CCCCCC"> the construct the SPF</font>

416
00:23:28,640 --> 00:23:35,210
construct<font color="#E5E5E5"> gets you URI with the argument</font>

417
00:23:32,000 --> 00:23:38,540
get and<font color="#CCCCCC"> putting</font><font color="#E5E5E5"> another message to the</font>

418
00:23:35,210 --> 00:23:43,340
console<font color="#E5E5E5"> and calling the wind construct</font>

419
00:23:38,540 --> 00:23:45,320
<font color="#E5E5E5">arc so I go to the shell SPF shell and I</font>

420
00:23:43,340 --> 00:23:49,100
execute this empty unit under the<font color="#E5E5E5"> name</font>

421
00:23:45,320 --> 00:23:52,070
test<font color="#E5E5E5"> and it's gonna call all these it's</font>

422
00:23:49,100 --> 00:23:53,300
gonna do all these<font color="#CCCCCC"> things</font><font color="#E5E5E5"> for me it's</font>

423
00:23:52,070 --> 00:23:57,350
just<font color="#CCCCCC"> a way of automating your</font><font color="#E5E5E5"> tasks</font>

424
00:23:53,300 --> 00:24:04,280
<font color="#E5E5E5">that's all there's</font><font color="#CCCCCC"> to it I guess we're</font>

425
00:23:57,350 --> 00:24:07,219
<font color="#CCCCCC">all and also to generalize your write-up</font>

426
00:24:04,280 --> 00:24:09,020
<font color="#E5E5E5">of constructs if you want</font><font color="#CCCCCC"> to group group</font>

427
00:24:07,220 --> 00:24:11,210
them in different translation units<font color="#E5E5E5"> by</font>

428
00:24:09,020 --> 00:24:12,889
that I mean different files<font color="#E5E5E5"> like one for</font>

429
00:24:11,210 --> 00:24:15,950
malware one for vulnerabilities one for

430
00:24:12,890 --> 00:24:20,120
suspicious user agents or whatever<font color="#E5E5E5"> you</font>

431
00:24:15,950 --> 00:24:23,420
can also use the include preprocessor

432
00:24:20,120 --> 00:24:27,530
directive right just<font color="#E5E5E5"> like in C alright</font>

433
00:24:23,420 --> 00:24:30,020
<font color="#E5E5E5">now the language using this directive</font>

434
00:24:27,530 --> 00:24:32,809
<font color="#E5E5E5">anywhere you want and there is no</font>

435
00:24:30,020 --> 00:24:35,240
restriction at all you can use in a

436
00:24:32,809 --> 00:24:37,450
nested way or<font color="#E5E5E5"> whatever it's fully</font>

437
00:24:35,240 --> 00:24:37,450
supported

438
00:24:44,220 --> 00:24:59,519
<font color="#E5E5E5">okay now from the shell</font><font color="#CCCCCC"> you need</font><font color="#E5E5E5"> way to</font>

439
00:24:56,529 --> 00:25:02,950
interact<font color="#CCCCCC"> with these constructs ray</font>

440
00:24:59,519 --> 00:25:05,289
how would<font color="#E5E5E5"> you do that that has to</font><font color="#CCCCCC"> be set</font>

441
00:25:02,950 --> 00:25:07,899
of commands implemented in the shell in

442
00:25:05,289 --> 00:25:11,049
the SPF shell in particular and these

443
00:25:07,899 --> 00:25:13,418
shells<font color="#E5E5E5"> we are known as helpers not help</font>

444
00:25:11,049 --> 00:25:15,279
<font color="#E5E5E5">so you</font><font color="#CCCCCC"> can just</font><font color="#E5E5E5"> go type help in the</font>

445
00:25:13,419 --> 00:25:17,859
shell and expect to get<font color="#E5E5E5"> a list of all</font>

446
00:25:15,279 --> 00:25:22,570
these commands<font color="#E5E5E5"> because if you type help</font>

447
00:25:17,859 --> 00:25:24,189
<font color="#E5E5E5">it's going to be it's</font><font color="#CCCCCC"> not part of SPF</font>

448
00:25:22,570 --> 00:25:27,428
commands<font color="#E5E5E5"> it's gonna be handled by</font>

449
00:25:24,190 --> 00:25:30,039
<font color="#E5E5E5">windows CMD and then you're gonna get</font>

450
00:25:27,429 --> 00:25:33,220
the list of<font color="#E5E5E5"> helpful supported by CMD so</font>

451
00:25:30,039 --> 00:25:35,950
that's why I'm<font color="#CCCCCC"> making a helper</font><font color="#E5E5E5"> and these</font>

452
00:25:33,220 --> 00:25:37,480
helper functions as a convey to interact

453
00:25:35,950 --> 00:25:41,139
<font color="#E5E5E5">with define SPF CMDs</font>

454
00:25:37,480 --> 00:25:42,489
and the shell itself in<font color="#CCCCCC"> a dynamic way so</font>

455
00:25:41,139 --> 00:25:44,859
before<font color="#E5E5E5"> going any further into the</font>

456
00:25:42,489 --> 00:25:47,109
constructs there are two important files

457
00:25:44,859 --> 00:25:55,739
<font color="#E5E5E5">in the in the framework we have the</font>

458
00:25:47,109 --> 00:25:58,178
configuration<font color="#CCCCCC"> file and the main SPF</font>

459
00:25:55,739 --> 00:25:59,859
<font color="#E5E5E5">command translation unit but first we</font>

460
00:25:58,179 --> 00:26:03,850
will<font color="#CCCCCC"> start talking</font><font color="#E5E5E5"> about the</font>

461
00:25:59,859 --> 00:26:06,039
configuration<font color="#CCCCCC"> file and</font><font color="#E5E5E5"> the list of</font>

462
00:26:03,850 --> 00:26:07,928
options<font color="#CCCCCC"> that contain and how it can</font>

463
00:26:06,039 --> 00:26:10,059
<font color="#E5E5E5">influence the execution of the framework</font>

464
00:26:07,929 --> 00:26:16,809
depending<font color="#E5E5E5"> on whatever value it gives you</font>

465
00:26:10,059 --> 00:26:19,658
<font color="#E5E5E5">give each of</font><font color="#CCCCCC"> the options so this</font><font color="#E5E5E5"> is the</font>

466
00:26:16,809 --> 00:26:26,379
list of options in<font color="#E5E5E5"> the configuration</font>

467
00:26:19,659 --> 00:26:29,739
<font color="#E5E5E5">files</font><font color="#CCCCCC"> and the first one is we have SPF</font>

468
00:26:26,379 --> 00:26:32,769
<font color="#CCCCCC">key my command file path so you'll it'll</font>

469
00:26:29,739 --> 00:26:34,659
<font color="#E5E5E5">just give it a path to your main command</font>

470
00:26:32,769 --> 00:26:38,350
file where<font color="#E5E5E5"> you have your constructs</font>

471
00:26:34,659 --> 00:26:43,239
stored<font color="#E5E5E5"> we will see later</font><font color="#CCCCCC"> on why this</font>

472
00:26:38,350 --> 00:26:47,668
option even<font color="#E5E5E5"> exists and then we have the</font>

473
00:26:43,239 --> 00:26:47,669
path to<font color="#E5E5E5"> your</font><font color="#CCCCCC"> tashaki executable</font>

474
00:26:48,110 --> 00:26:55,668
and then we have a path that<font color="#E5E5E5"> he can set</font>

475
00:26:51,260 --> 00:26:58,158
for all your<font color="#CCCCCC"> pickup right so this</font><font color="#E5E5E5"> will</font>

476
00:26:55,669 --> 00:26:59,890
be like the<font color="#E5E5E5"> default path all pickups</font><font color="#CCCCCC"> so</font>

477
00:26:58,159 --> 00:27:02,120
you don't<font color="#E5E5E5"> have to set it every time you</font>

478
00:26:59,890 --> 00:27:05,860
wanna work<font color="#CCCCCC"> with a given a pickup</font><font color="#E5E5E5"> from</font>

479
00:27:02,120 --> 00:27:09,110
the shell<font color="#E5E5E5"> it's already set for you</font><font color="#CCCCCC"> and</font>

480
00:27:05,860 --> 00:27:11,149
<font color="#E5E5E5">in case you have a default pickup name</font>

481
00:27:09,110 --> 00:27:12,408
that you always<font color="#E5E5E5"> work with or every time</font>

482
00:27:11,149 --> 00:27:14,389
you download a peak a bit gets saved

483
00:27:12,409 --> 00:27:19,340
under<font color="#E5E5E5"> the</font><font color="#CCCCCC"> specific name you can also</font>

484
00:27:14,390 --> 00:27:24,580
<font color="#E5E5E5">give it</font><font color="#CCCCCC"> a default pickup name now the</font>

485
00:27:19,340 --> 00:27:28,370
option load command<font color="#E5E5E5"> SPF file so this one</font>

486
00:27:24,580 --> 00:27:30,918
allows you<font color="#CCCCCC"> to load and parse</font><font color="#E5E5E5"> everything</font>

487
00:27:28,370 --> 00:27:34,639
stored all of your constructs<font color="#E5E5E5"> that are</font>

488
00:27:30,919 --> 00:27:36,320
<font color="#E5E5E5">stored in the CMD file at runtime so the</font>

489
00:27:34,639 --> 00:27:39,199
time one is execute the shell the

490
00:27:36,320 --> 00:27:40,970
framework<font color="#E5E5E5"> itself is</font><font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> load</font><font color="#CCCCCC"> all the</font>

491
00:27:39,200 --> 00:27:42,940
constructs in that file parses it

492
00:27:40,970 --> 00:27:46,250
<font color="#E5E5E5">validated and makes it available for you</font>

493
00:27:42,940 --> 00:27:48,169
that's<font color="#E5E5E5"> run time so you can turn it on or</font>

494
00:27:46,250 --> 00:27:50,120
off<font color="#CCCCCC"> if you turn</font><font color="#E5E5E5"> it off you're gonna have</font>

495
00:27:48,169 --> 00:27:52,480
to do it<font color="#CCCCCC"> from</font><font color="#E5E5E5"> the shell through another</font>

496
00:27:50,120 --> 00:27:52,479
command

497
00:27:56,460 --> 00:28:03,090
and then the<font color="#CCCCCC"> history</font><font color="#E5E5E5"> this also takes a</font>

498
00:27:59,340 --> 00:28:05,279
boolean value<font color="#CCCCCC"> well here first</font><font color="#E5E5E5"> the first</font>

499
00:28:03,090 --> 00:28:08,658
<font color="#E5E5E5">option is this is what you</font><font color="#CCCCCC"> want to store</font>

500
00:28:05,279 --> 00:28:15,929
all your historically execute commands

501
00:28:08,659 --> 00:28:18,450
<font color="#CCCCCC">you</font><font color="#E5E5E5"> can store them on disk</font><font color="#CCCCCC"> and the load</font>

502
00:28:15,929 --> 00:28:27,200
history<font color="#CCCCCC"> file</font><font color="#E5E5E5"> this one allows you</font><font color="#CCCCCC"> to</font>

503
00:28:18,450 --> 00:28:29,580
either to load it<font color="#E5E5E5"> at</font><font color="#CCCCCC"> runtime</font><font color="#E5E5E5"> or not so</font>

504
00:28:27,200 --> 00:28:30,749
so how would<font color="#E5E5E5"> you use the shell that so</font>

505
00:28:29,580 --> 00:28:32,340
since<font color="#E5E5E5"> we've introduced all these</font>

506
00:28:30,749 --> 00:28:34,320
constructs and<font color="#CCCCCC"> them operators and</font>

507
00:28:32,340 --> 00:28:36,350
language<font color="#E5E5E5"> and everything so how would you</font>

508
00:28:34,320 --> 00:28:42,529
<font color="#CCCCCC">use</font><font color="#E5E5E5"> it like what would be</font><font color="#CCCCCC"> a typical</font>

509
00:28:36,350 --> 00:28:45,360
workflow<font color="#CCCCCC"> when you get a pickup for that</font>

510
00:28:42,529 --> 00:28:51,059
we have the following workflow which is

511
00:28:45,360 --> 00:28:56,248
facilitated by<font color="#CCCCCC"> the helper commands</font><font color="#E5E5E5"> so</font>

512
00:28:51,059 --> 00:29:01,590
first when you<font color="#CCCCCC"> execute the shell the SPF</font>

513
00:28:56,249 --> 00:29:02,879
shell you have<font color="#CCCCCC"> to</font><font color="#E5E5E5"> give it the</font><font color="#CCCCCC"> name of</font>

514
00:29:01,590 --> 00:29:09,389
<font color="#E5E5E5">your pickup</font><font color="#CCCCCC"> that you want to work with</font>

515
00:29:02,879 --> 00:29:11,509
<font color="#E5E5E5">right and to do that just set big gap or</font>

516
00:29:09,389 --> 00:29:17,850
get<font color="#E5E5E5"> pickup it's just a matter of of</font>

517
00:29:11,509 --> 00:29:24,419
inspecting different variables<font color="#CCCCCC"> biggity</font>

518
00:29:17,850 --> 00:29:29,490
<font color="#CCCCCC">cap path is does not change the value in</font>

519
00:29:24,419 --> 00:29:32,629
<font color="#E5E5E5">the configuration file all in memory so</font>

520
00:29:29,490 --> 00:29:32,629
<font color="#E5E5E5">ddd said pick a path</font>

521
00:29:35,210 --> 00:29:41,090
the<font color="#CCCCCC"> set</font><font color="#E5E5E5"> pickup</font><font color="#CCCCCC"> get pika</font>

522
00:29:38,100 --> 00:29:44,550
<font color="#E5E5E5">I think they</font><font color="#CCCCCC"> are self-explanatory except</font>

523
00:29:41,090 --> 00:29:47,639
when you want<font color="#CCCCCC"> to execute</font><font color="#E5E5E5"> a giving</font>

524
00:29:44,550 --> 00:29:49,470
contract against multiple<font color="#E5E5E5"> pcaps right so</font>

525
00:29:47,640 --> 00:29:51,360
you're not<font color="#E5E5E5"> gonna execute the same</font>

526
00:29:49,470 --> 00:29:51,570
contract against every pick up one by

527
00:29:51,360 --> 00:29:54,090
one

528
00:29:51,570 --> 00:29:57,480
<font color="#CCCCCC">right</font><font color="#E5E5E5"> so for that you</font><font color="#CCCCCC"> can set the</font><font color="#E5E5E5"> pickup</font>

529
00:29:54,090 --> 00:30:00,389
name to start<font color="#CCCCCC"> AF which stands for all</font>

530
00:29:57,480 --> 00:30:03,330
<font color="#E5E5E5">files followed by</font><font color="#CCCCCC"> another star</font><font color="#E5E5E5"> then</font>

531
00:30:00,390 --> 00:30:05,790
every<font color="#E5E5E5"> time you execute a contract it's</font>

532
00:30:03,330 --> 00:30:11,669
gonna go check every<font color="#E5E5E5"> pcap in that</font>

533
00:30:05,790 --> 00:30:12,629
directory<font color="#CCCCCC"> and this is where what I'm</font>

534
00:30:11,670 --> 00:30:15,660
talking about

535
00:30:12,630 --> 00:30:19,410
regarding the command file where you<font color="#CCCCCC"> can</font>

536
00:30:15,660 --> 00:30:22,560
either parse it<font color="#CCCCCC"> and validate at</font><font color="#E5E5E5"> runtime</font>

537
00:30:19,410 --> 00:30:24,960
<font color="#E5E5E5">or from the shell so why this is</font>

538
00:30:22,560 --> 00:30:26,940
important<font color="#E5E5E5"> because you already inside</font><font color="#CCCCCC"> the</font>

539
00:30:24,960 --> 00:30:29,070
shell and<font color="#CCCCCC"> you want to update some of</font><font color="#E5E5E5"> the</font>

540
00:30:26,940 --> 00:30:31,860
constructs<font color="#E5E5E5"> right so you're not gonna</font>

541
00:30:29,070 --> 00:30:33,389
<font color="#E5E5E5">close your shell and then execute it</font>

542
00:30:31,860 --> 00:30:35,310
<font color="#CCCCCC">again</font><font color="#E5E5E5"> just</font><font color="#CCCCCC"> to get everything validated</font>

543
00:30:33,390 --> 00:30:39,570
again<font color="#E5E5E5"> so by just</font><font color="#CCCCCC"> by</font><font color="#E5E5E5"> typing a load</font>

544
00:30:35,310 --> 00:30:42,330
command file it's gonna<font color="#E5E5E5"> redo the same</font>

545
00:30:39,570 --> 00:30:44,879
thing<font color="#E5E5E5"> again</font><font color="#CCCCCC"> for you get all commands</font><font color="#E5E5E5"> is</font>

546
00:30:42,330 --> 00:30:51,030
literally<font color="#CCCCCC"> responsive showing you all the</font>

547
00:30:44,880 --> 00:30:54,180
key becomes<font color="#CCCCCC"> a queue defined and you have</font>

548
00:30:51,030 --> 00:30:56,430
<font color="#E5E5E5">list of other commands</font><font color="#CCCCCC"> that allows you</font>

549
00:30:54,180 --> 00:31:00,300
<font color="#E5E5E5">to inspect every</font><font color="#CCCCCC"> keyword every keyword</font>

550
00:30:56,430 --> 00:31:03,800
<font color="#E5E5E5">of the construct the name the logic the</font>

551
00:31:00,300 --> 00:31:06,990
list of tags supported and other things

552
00:31:03,800 --> 00:31:09,480
and also<font color="#E5E5E5"> you have commands for expecting</font>

553
00:31:06,990 --> 00:31:14,430
the history of all commands<font color="#E5E5E5"> you type and</font>

554
00:31:09,480 --> 00:31:18,900
you<font color="#E5E5E5"> can even execute multiple historical</font>

555
00:31:14,430 --> 00:31:25,890
<font color="#E5E5E5">commands all at once through the helper</font>

556
00:31:18,900 --> 00:31:30,450
command exh and if you<font color="#E5E5E5"> remember what is</font>

557
00:31:25,890 --> 00:31:33,120
<font color="#CCCCCC">an MCU is the multi command unit this</font><font color="#E5E5E5"> is</font>

558
00:31:30,450 --> 00:31:39,290
how you would call a given one through

559
00:31:33,120 --> 00:31:42,810
the command<font color="#CCCCCC"> exm see you</font><font color="#E5E5E5"> and get</font><font color="#CCCCCC"> MCU list</font>

560
00:31:39,290 --> 00:31:45,860
<font color="#E5E5E5">gets you a list of all defined MCU</font>

561
00:31:42,810 --> 00:31:50,270
I know this<font color="#E5E5E5"> is all abstract</font><font color="#CCCCCC"> now</font>

562
00:31:45,860 --> 00:31:54,090
<font color="#E5E5E5">unfortunately there is an easier</font><font color="#CCCCCC"> way to</font>

563
00:31:50,270 --> 00:32:04,200
<font color="#E5E5E5">make it accessible until</font><font color="#CCCCCC"> I show you like</font>

564
00:31:54,090 --> 00:32:07,949
a demo okay<font color="#E5E5E5"> so for SPF construct where</font>

565
00:32:04,200 --> 00:32:11,150
do you know how it looks like we don't

566
00:32:07,950 --> 00:32:17,910
how it works<font color="#CCCCCC"> we know</font><font color="#E5E5E5"> its functionality</font>

567
00:32:11,150 --> 00:32:24,060
let us say I define an SPF construct but

568
00:32:17,910 --> 00:32:27,840
I have no<font color="#E5E5E5"> reason at all</font><font color="#CCCCCC"> to show it in</font>

569
00:32:24,060 --> 00:32:30,149
<font color="#E5E5E5">the shell so when I say when I type get</font>

570
00:32:27,840 --> 00:32:32,129
all commands<font color="#E5E5E5"> which</font><font color="#CCCCCC"> can give me the list</font>

571
00:32:30,150 --> 00:32:37,950
the<font color="#CCCCCC"> list of all concept that</font><font color="#E5E5E5"> I defined</font>

572
00:32:32,130 --> 00:32:39,590
in the in<font color="#E5E5E5"> my file in my CMD file</font><font color="#CCCCCC"> I want</font>

573
00:32:37,950 --> 00:32:42,390
some<font color="#E5E5E5"> of the construct not to show up</font>

574
00:32:39,590 --> 00:32:45,449
<font color="#CCCCCC">right</font><font color="#E5E5E5"> because they either have no</font>

575
00:32:42,390 --> 00:32:48,270
functional interpretation or they are of

576
00:32:45,450 --> 00:32:54,000
<font color="#E5E5E5">no use</font><font color="#CCCCCC"> for me so for that there is</font>

577
00:32:48,270 --> 00:32:55,440
another thing<font color="#E5E5E5"> I call specifier height so</font>

578
00:32:54,000 --> 00:32:56,910
the specifier height allows you

579
00:32:55,440 --> 00:32:58,170
literally<font color="#E5E5E5"> to hide this construct from</font>

580
00:32:56,910 --> 00:32:59,670
<font color="#E5E5E5">the shell</font><font color="#CCCCCC"> you can still call it</font>

581
00:32:58,170 --> 00:33:02,340
reference to do whatever you want<font color="#CCCCCC"> to it</font>

582
00:32:59,670 --> 00:33:04,200
but whenever you<font color="#E5E5E5"> call get all commands</font>

583
00:33:02,340 --> 00:33:05,639
<font color="#E5E5E5">it won't show</font><font color="#CCCCCC"> up in the list</font><font color="#E5E5E5"> it's just</font>

584
00:33:04,200 --> 00:33:08,600
as<font color="#E5E5E5"> simple as</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> and this is for</font>

585
00:33:05,640 --> 00:33:08,600
clarity for<font color="#E5E5E5"> management purposes</font>

586
00:33:14,110 --> 00:33:19,850
<font color="#E5E5E5">okay so now we'll start with examples</font>

587
00:33:17,179 --> 00:33:23,840
which should make<font color="#E5E5E5"> it easier</font><font color="#CCCCCC"> to</font>

588
00:33:19,850 --> 00:33:29,659
understand<font color="#CCCCCC"> its</font><font color="#E5E5E5"> for example this SPF</font>

589
00:33:23,840 --> 00:33:32,330
contract<font color="#E5E5E5"> it's supposed to detect some</font>

590
00:33:29,660 --> 00:33:37,179
parents of a given exploit kits right

591
00:33:32,330 --> 00:33:44,030
<font color="#CCCCCC">and in this particular example</font><font color="#E5E5E5"> we detect</font>

592
00:33:37,179 --> 00:33:51,770
<font color="#E5E5E5">it</font><font color="#CCCCCC"> from what I recall which what it what</font>

593
00:33:44,030 --> 00:33:55,520
<font color="#CCCCCC">explode kit for correctly</font><font color="#E5E5E5"> we will</font><font color="#CCCCCC"> see</font>

594
00:33:51,770 --> 00:33:58,220
<font color="#E5E5E5">later on okay so in the logic definition</font>

595
00:33:55,520 --> 00:34:00,139
we have<font color="#E5E5E5"> the display filter actually be</font>

596
00:33:58,220 --> 00:34:06,309
<font color="#E5E5E5">request at</font><font color="#CCCCCC"> your eye</font><font color="#E5E5E5"> so here I'm</font>

597
00:34:00,140 --> 00:34:09,740
<font color="#E5E5E5">inspecting what the URI and against what</font>

598
00:34:06,309 --> 00:34:14,540
against the list<font color="#E5E5E5"> of entries define in</font>

599
00:34:09,739 --> 00:34:18,770
the text file<font color="#E5E5E5"> ek</font><font color="#CCCCCC"> rejects right because</font>

600
00:34:14,540 --> 00:34:21,379
I'm gonna have multiple<font color="#E5E5E5"> reg X's so I'm</font>

601
00:34:18,770 --> 00:34:24,560
<font color="#E5E5E5">gonna I'm not gonna store every reg X</font>

602
00:34:21,379 --> 00:34:29,449
here<font color="#CCCCCC"> and in the logic definition this</font><font color="#E5E5E5"> is</font>

603
00:34:24,560 --> 00:34:34,879
<font color="#E5E5E5">not manageable right so what's in that</font>

604
00:34:29,449 --> 00:34:38,569
text file this<font color="#CCCCCC"> is what it contains</font><font color="#E5E5E5"> so in</font>

605
00:34:34,879 --> 00:34:42,790
this case here I have the following

606
00:34:38,570 --> 00:34:45,850
<font color="#E5E5E5">entry</font><font color="#CCCCCC"> in the text file</font><font color="#E5E5E5"> first</font><font color="#CCCCCC"> I have the</font>

607
00:34:42,790 --> 00:34:49,250
print statement if<font color="#E5E5E5"> you still remember</font>

608
00:34:45,850 --> 00:34:53,629
which can<font color="#E5E5E5"> a print to the console the</font>

609
00:34:49,250 --> 00:34:58,280
message we<font color="#E5E5E5"> have a match against angler</font>

610
00:34:53,629 --> 00:35:00,950
your<font color="#E5E5E5"> I test pattern okay every time</font><font color="#CCCCCC"> I</font>

611
00:34:58,280 --> 00:35:05,320
get a match against the following<font color="#CCCCCC"> reg</font><font color="#E5E5E5"> X</font>

612
00:35:00,950 --> 00:35:09,830
so this project will match against

613
00:35:05,320 --> 00:35:12,590
angler<font color="#E5E5E5"> export get</font><font color="#CCCCCC"> your</font><font color="#E5E5E5"> right pattern</font>

614
00:35:09,830 --> 00:35:15,560
<font color="#E5E5E5">okay so let's say you have a nuclear</font>

615
00:35:12,590 --> 00:35:18,710
exploit get your right pattern right you

616
00:35:15,560 --> 00:35:20,779
simply add<font color="#CCCCCC"> another text file</font><font color="#E5E5E5"> you give</font>

617
00:35:18,710 --> 00:35:21,320
the message first you use the print

618
00:35:20,780 --> 00:35:22,910
statement

619
00:35:21,320 --> 00:35:25,180
you give it a<font color="#E5E5E5"> message nuclear your I</font>

620
00:35:22,910 --> 00:35:26,930
<font color="#CCCCCC">this pattern and then you</font><font color="#E5E5E5"> give</font><font color="#CCCCCC"> it the</font>

621
00:35:25,180 --> 00:35:29,540
<font color="#E5E5E5">vertex pattern</font>

622
00:35:26,930 --> 00:35:32,660
<font color="#E5E5E5">against that particular exploit gets</font>

623
00:35:29,540 --> 00:35:37,369
rain and when you invoke this<font color="#E5E5E5"> construct</font>

624
00:35:32,660 --> 00:35:45,890
ekd is<font color="#CCCCCC"> gonna test</font><font color="#E5E5E5"> each one consecutively</font>

625
00:35:37,369 --> 00:35:51,079
<font color="#CCCCCC">in sequence right</font><font color="#E5E5E5"> and here's another</font>

626
00:35:45,890 --> 00:35:54,589
example<font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> not sure how many</font><font color="#CCCCCC"> of you</font>

627
00:35:51,079 --> 00:35:58,819
come from<font color="#CCCCCC"> corporate</font><font color="#E5E5E5"> environment and you</font>

628
00:35:54,589 --> 00:36:01,609
all<font color="#E5E5E5"> know</font><font color="#CCCCCC"> that you can</font><font color="#E5E5E5"> just set your DNS</font>

629
00:35:58,819 --> 00:36:03,829
server<font color="#CCCCCC"> to</font><font color="#E5E5E5"> use a</font><font color="#CCCCCC"> public dns server</font><font color="#E5E5E5"> right</font>

630
00:36:01,609 --> 00:36:05,299
<font color="#E5E5E5">you can</font><font color="#CCCCCC"> just go and use a</font><font color="#E5E5E5"> Google right</font>

631
00:36:03,829 --> 00:36:09,530
<font color="#CCCCCC">usually you have your own DNS for water</font>

632
00:36:05,300 --> 00:36:12,200
<font color="#CCCCCC">all right so malware</font><font color="#E5E5E5"> what did they</font>

633
00:36:09,530 --> 00:36:15,500
usually do it<font color="#E5E5E5"> when they send a DNS</font>

634
00:36:12,200 --> 00:36:16,720
request<font color="#E5E5E5"> they use Google DNS server</font>

635
00:36:15,500 --> 00:36:19,099
<font color="#E5E5E5">instead of going</font><font color="#CCCCCC"> through your</font><font color="#E5E5E5"> network</font>

636
00:36:16,720 --> 00:36:22,368
<font color="#E5E5E5">DNS service just</font><font color="#CCCCCC"> like one</font><font color="#E5E5E5"> of the evasion</font>

637
00:36:19,099 --> 00:36:24,079
techniques they use right<font color="#E5E5E5"> so let's say</font>

638
00:36:22,369 --> 00:36:27,700
you have<font color="#CCCCCC"> a set of</font><font color="#E5E5E5"> pcaps</font>

639
00:36:24,079 --> 00:36:36,230
and you want to check every<font color="#E5E5E5"> DNS request</font>

640
00:36:27,700 --> 00:36:39,189
where the DNS server<font color="#CCCCCC"> is any</font><font color="#E5E5E5"> of those in</font>

641
00:36:36,230 --> 00:36:41,869
this list<font color="#E5E5E5"> DNS servers of text file</font><font color="#CCCCCC"> so I</font>

642
00:36:39,190 --> 00:36:44,140
<font color="#CCCCCC">grabbed that list from</font><font color="#E5E5E5"> this URL and the</font>

643
00:36:41,869 --> 00:36:46,819
guy seems to<font color="#E5E5E5"> keep it up to</font><font color="#CCCCCC"> date</font><font color="#E5E5E5"> actually</font>

644
00:36:44,140 --> 00:36:51,890
like as of<font color="#E5E5E5"> August he has updated it</font>

645
00:36:46,819 --> 00:36:53,750
which is interesting so the logic

646
00:36:51,890 --> 00:36:57,109
definition here<font color="#CCCCCC"> is clear I'm checking</font>

647
00:36:53,750 --> 00:36:59,510
destination host right<font color="#E5E5E5"> it has to match</font>

648
00:36:57,109 --> 00:37:01,880
either<font color="#E5E5E5"> of those in this list and the</font>

649
00:36:59,510 --> 00:37:04,690
<font color="#E5E5E5">protocol is DNS and the end to the</font>

650
00:37:01,880 --> 00:37:09,680
console<font color="#CCCCCC"> friend</font><font color="#E5E5E5"> to me</font><font color="#CCCCCC"> the frame number</font>

651
00:37:04,690 --> 00:37:13,160
that matches<font color="#CCCCCC"> this DNS entry the source</font>

652
00:37:09,680 --> 00:37:18,470
the<font color="#E5E5E5"> source IP destination IP and the DNS</font>

653
00:37:13,160 --> 00:37:22,098
name<font color="#E5E5E5"> the actual domain name and for</font>

654
00:37:18,470 --> 00:37:24,919
example<font color="#E5E5E5"> this is what the DNS server</font><font color="#CCCCCC"> text</font>

655
00:37:22,099 --> 00:37:27,049
file would contain<font color="#E5E5E5"> right for Google DNS</font>

656
00:37:24,920 --> 00:37:29,890
server<font color="#E5E5E5"> they have these two entries of</font>

657
00:37:27,049 --> 00:37:29,890
course it contains<font color="#E5E5E5"> other</font>

658
00:37:31,400 --> 00:37:43,880
and also<font color="#E5E5E5"> more examples I have</font><font color="#CCCCCC"> this</font>

659
00:37:39,230 --> 00:37:47,900
example called<font color="#E5E5E5"> ephemeral port less than</font>

660
00:37:43,880 --> 00:37:51,559
1024<font color="#CCCCCC"> I'm not sure how much you're</font>

661
00:37:47,900 --> 00:37:54,680
familiar with<font color="#E5E5E5"> the RFC but the source</font>

662
00:37:51,559 --> 00:37:57,099
port for<font color="#E5E5E5"> your connection whenever you</font>

663
00:37:54,680 --> 00:37:59,899
make<font color="#E5E5E5"> a connection is it's two randomly</font>

664
00:37:57,099 --> 00:38:03,999
assigned or generated I should say right

665
00:37:59,900 --> 00:38:07,849
<font color="#E5E5E5">and from 0 to 1023</font><font color="#CCCCCC"> they are reserved</font>

666
00:38:03,999 --> 00:38:10,999
right why I'm<font color="#CCCCCC"> talking about this in</font>

667
00:38:07,849 --> 00:38:13,940
<font color="#E5E5E5">first place because</font><font color="#CCCCCC"> I did a small</font>

668
00:38:10,999 --> 00:38:20,269
<font color="#CCCCCC">experiment where okay I have like</font><font color="#E5E5E5"> about</font>

669
00:38:13,940 --> 00:38:24,829
I had about 400 malicious pickups and I

670
00:38:20,269 --> 00:38:27,729
wanted<font color="#E5E5E5"> to see if any in if in any of</font>

671
00:38:24,829 --> 00:38:31,880
those pickups<font color="#CCCCCC"> I have the source port</font>

672
00:38:27,730 --> 00:38:34,579
that<font color="#E5E5E5"> is less than 1024 right because</font>

673
00:38:31,880 --> 00:38:36,680
it's<font color="#E5E5E5"> not RFC compliant so for me to</font>

674
00:38:34,579 --> 00:38:38,809
automate this process<font color="#CCCCCC"> it is as</font><font color="#E5E5E5"> simple as</font>

675
00:38:36,680 --> 00:38:42,649
using this<font color="#E5E5E5"> display filter right by</font>

676
00:38:38,809 --> 00:38:44,869
writing<font color="#E5E5E5"> this construct and here what I'm</font>

677
00:38:42,650 --> 00:38:49,279
<font color="#E5E5E5">checking for just</font><font color="#CCCCCC"> the tcp source port</font>

678
00:38:44,869 --> 00:38:55,670
has<font color="#E5E5E5"> to be</font><font color="#CCCCCC"> a letter</font><font color="#E5E5E5"> 1024 and this check</font>

679
00:38:49,279 --> 00:38:57,890
is only valid when I mean syn connection

680
00:38:55,670 --> 00:39:00,890
but it because it can<font color="#E5E5E5"> be any send</font>

681
00:38:57,890 --> 00:39:02,618
request<font color="#E5E5E5"> right send request can be sent</font>

682
00:39:00,890 --> 00:39:06,609
are outside of the disappear<font color="#E5E5E5"> handshake</font>

683
00:39:02,619 --> 00:39:09,650
so it has to be through the connection

684
00:39:06,609 --> 00:39:10,940
and<font color="#E5E5E5"> of course the logic also can be done</font>

685
00:39:09,650 --> 00:39:13,190
with the<font color="#CCCCCC"> other option that I am listing</font>

686
00:39:10,940 --> 00:39:16,700
<font color="#E5E5E5">in the in the comment</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> can also use</font>

687
00:39:13,190 --> 00:39:20,029
comment with your construct very just

688
00:39:16,700 --> 00:39:27,710
the other way<font color="#CCCCCC"> around and to my</font><font color="#E5E5E5"> surprise</font>

689
00:39:20,029 --> 00:39:33,519
I found actually<font color="#E5E5E5"> malware that the source</font>

690
00:39:27,710 --> 00:39:36,609
port is less than<font color="#CCCCCC"> 1024</font><font color="#E5E5E5"> and why turns out</font>

691
00:39:33,519 --> 00:39:41,238
some<font color="#CCCCCC"> of the mallow family especially</font><font color="#E5E5E5"> the</font>

692
00:39:36,609 --> 00:39:43,220
<font color="#E5E5E5">the ones that perform denial of service</font>

693
00:39:41,239 --> 00:39:44,420
attack<font color="#E5E5E5"> especially</font><font color="#CCCCCC"> when they</font><font color="#E5E5E5"> want</font><font color="#CCCCCC"> to</font>

694
00:39:43,220 --> 00:39:47,480
<font color="#CCCCCC">perform stunts in</font>

695
00:39:44,420 --> 00:39:49,670
flooding<font color="#E5E5E5"> right they construct the packet</font>

696
00:39:47,480 --> 00:39:50,600
<font color="#CCCCCC">byte by byte right and these people</font>

697
00:39:49,670 --> 00:39:53,000
usually don't care about the

698
00:39:50,600 --> 00:39:55,339
specification this<font color="#E5E5E5"> is one way of finding</font>

699
00:39:53,000 --> 00:39:58,010
<font color="#CCCCCC">finding</font><font color="#E5E5E5"> it and you have another</font><font color="#CCCCCC"> example</font>

700
00:39:55,340 --> 00:40:03,590
where I found<font color="#E5E5E5"> out they had big</font><font color="#CCCCCC"> gaps</font>

701
00:39:58,010 --> 00:40:06,740
where some<font color="#CCCCCC"> of them are generated by fake</font>

702
00:40:03,590 --> 00:40:09,380
<font color="#E5E5E5">net are you familiar with fake net so</font>

703
00:40:06,740 --> 00:40:11,390
fake net is<font color="#CCCCCC"> literally just</font><font color="#E5E5E5"> to simulate</font>

704
00:40:09,380 --> 00:40:14,210
some<font color="#CCCCCC"> you've some of your traffic</font><font color="#E5E5E5"> for</font>

705
00:40:11,390 --> 00:40:15,470
example<font color="#E5E5E5"> if you're making get</font><font color="#CCCCCC"> requests</font><font color="#E5E5E5"> so</font>

706
00:40:14,210 --> 00:40:18,890
<font color="#CCCCCC">instead of going</font><font color="#E5E5E5"> to the actual server</font>

707
00:40:15,470 --> 00:40:21,470
just replies with whatever is provided

708
00:40:18,890 --> 00:40:24,790
by fake not for you<font color="#E5E5E5"> so it doesn't reach</font>

709
00:40:21,470 --> 00:40:29,629
<font color="#CCCCCC">the internet</font><font color="#E5E5E5"> all right so for fake net</font>

710
00:40:24,790 --> 00:40:30,279
<font color="#E5E5E5">also it has such anomaly</font><font color="#CCCCCC"> it's it's on</font>

711
00:40:29,630 --> 00:40:35,540
<font color="#CCCCCC">pcaps</font>

712
00:40:30,280 --> 00:40:38,780
<font color="#CCCCCC">it doesn't even</font><font color="#E5E5E5"> have the</font><font color="#CCCCCC"> physical the</font>

713
00:40:35,540 --> 00:40:44,350
frame header as well<font color="#E5E5E5"> right technically</font>

714
00:40:38,780 --> 00:40:44,350
it doesn't adhere to the specification

715
00:40:46,210 --> 00:40:57,200
another<font color="#E5E5E5"> example to give you some of the</font>

716
00:40:52,880 --> 00:40:59,360
usage of<font color="#E5E5E5"> the of the framework</font><font color="#CCCCCC"> have you</font>

717
00:40:57,200 --> 00:41:02,200
ever<font color="#E5E5E5"> heard of the black nurse do you</font>

718
00:40:59,360 --> 00:41:02,200
know a service attack

719
00:41:04,520 --> 00:41:13,310
so this one is literally as simple<font color="#CCCCCC"> as</font>

720
00:41:07,910 --> 00:41:17,509
sending ICMP requests with<font color="#CCCCCC"> 5-3 and code</font>

721
00:41:13,310 --> 00:41:20,750
<font color="#CCCCCC">3 this</font><font color="#E5E5E5"> is all it needs</font><font color="#CCCCCC"> to succeed</font>

722
00:41:17,510 --> 00:41:24,470
<font color="#CCCCCC">however the limitation is you would have</font>

723
00:41:20,750 --> 00:41:28,250
<font color="#E5E5E5">to send it at a rate</font><font color="#CCCCCC"> of 40 to</font><font color="#E5E5E5"> 50,000 per</font>

724
00:41:24,470 --> 00:41:31,549
second<font color="#CCCCCC"> effects</font><font color="#E5E5E5"> hardwood advices from</font>

725
00:41:28,250 --> 00:41:33,430
firewalls routers<font color="#E5E5E5"> let's say you have a</font>

726
00:41:31,550 --> 00:41:36,920
big gap<font color="#CCCCCC"> and</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> wanna</font><font color="#E5E5E5"> check for this</font>

727
00:41:33,430 --> 00:41:38,569
particular attack<font color="#CCCCCC"> right</font><font color="#E5E5E5"> so how</font><font color="#CCCCCC"> would you</font>

728
00:41:36,920 --> 00:41:41,540
do it<font color="#E5E5E5"> it's as simple as writing this</font>

729
00:41:38,570 --> 00:41:45,340
contract right so here<font color="#E5E5E5"> first I'm</font>

730
00:41:41,540 --> 00:41:47,540
creating this first to mark macros

731
00:41:45,340 --> 00:41:50,480
auxiliar logic definitions if you still

732
00:41:47,540 --> 00:41:52,220
remember where I'm<font color="#E5E5E5"> giving for the</font>

733
00:41:50,480 --> 00:41:53,780
<font color="#E5E5E5">destination unreachable one the value of</font>

734
00:41:52,220 --> 00:41:55,430
3<font color="#CCCCCC"> and the port on which above the value</font>

735
00:41:53,780 --> 00:41:57,110
of 3<font color="#CCCCCC"> is it just for adding clarity to</font>

736
00:41:55,430 --> 00:41:58,210
your construct right<font color="#E5E5E5"> otherwise</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> would</font>

737
00:41:57,110 --> 00:42:00,890
have used<font color="#CCCCCC"> just these</font>

738
00:41:58,210 --> 00:42:03,170
numbers literally the numbers right<font color="#E5E5E5"> and</font>

739
00:42:00,890 --> 00:42:05,328
the display filters<font color="#E5E5E5"> there is no macros</font>

740
00:42:03,170 --> 00:42:07,880
for these numbers<font color="#E5E5E5"> right so here I'm just</font>

741
00:42:05,329 --> 00:42:11,450
<font color="#E5E5E5">adding clarity to the construct and in</font>

742
00:42:07,880 --> 00:42:14,900
the logic definition if you see here I'm

743
00:42:11,450 --> 00:42:16,430
not<font color="#E5E5E5"> using the</font><font color="#CCCCCC"> why operator</font><font color="#E5E5E5"> so this is</font>

744
00:42:14,900 --> 00:42:19,400
the difference between this construct

745
00:42:16,430 --> 00:42:23,210
and the other construct here I'm<font color="#E5E5E5"> using</font>

746
00:42:19,400 --> 00:42:25,400
the<font color="#E5E5E5"> Q and the options provided</font><font color="#CCCCCC"> by</font>

747
00:42:23,210 --> 00:42:27,289
t-shirt for me<font color="#E5E5E5"> which allows me to</font>

748
00:42:25,400 --> 00:42:30,799
inspect<font color="#E5E5E5"> some statistical information</font>

749
00:42:27,289 --> 00:42:36,950
<font color="#CCCCCC">about the</font><font color="#E5E5E5"> packet so here what I'm</font>

750
00:42:30,799 --> 00:42:44,839
checking<font color="#CCCCCC"> for all ICMP</font><font color="#E5E5E5"> of type 3 and code</font>

751
00:42:36,950 --> 00:42:50,839
3 and<font color="#E5E5E5"> Counting the</font><font color="#CCCCCC"> number</font><font color="#E5E5E5"> of frames</font><font color="#CCCCCC"> that</font>

752
00:42:44,839 --> 00:42:52,130
matches this display<font color="#E5E5E5"> filter logic or</font>

753
00:42:50,839 --> 00:42:56,569
this filters logic<font color="#CCCCCC"> should</font><font color="#E5E5E5"> say this</font>

754
00:42:52,130 --> 00:42:59,539
<font color="#E5E5E5">buffer this filters logic</font><font color="#CCCCCC"> okay and for</font>

755
00:42:56,569 --> 00:43:03,049
what interval the interval is to be

756
00:42:59,539 --> 00:43:06,529
given<font color="#E5E5E5"> through the</font><font color="#CCCCCC"> input the arg</font><font color="#E5E5E5"> input</font>

757
00:43:03,049 --> 00:43:10,190
operator<font color="#CCCCCC"> okay so when I go to the shell</font>

758
00:43:06,529 --> 00:43:13,940
<font color="#E5E5E5">I type black nurse so all's expecting</font>

759
00:43:10,190 --> 00:43:19,009
from me as the interval<font color="#CCCCCC"> value right okay</font>

760
00:43:13,940 --> 00:43:20,630
I give it give<font color="#E5E5E5"> me the list of all frames</font>

761
00:43:19,009 --> 00:43:22,789
or not<font color="#E5E5E5"> we're not the list of all frames</font>

762
00:43:20,630 --> 00:43:26,269
the number of frames<font color="#CCCCCC"> that match this</font>

763
00:43:22,789 --> 00:43:29,029
<font color="#CCCCCC">specification this filter in one second</font>

764
00:43:26,269 --> 00:43:31,368
<font color="#E5E5E5">right because as I</font><font color="#CCCCCC"> mentioned for this</font>

765
00:43:29,029 --> 00:43:34,700
<font color="#CCCCCC">attack to succeed</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> would need</font><font color="#E5E5E5"> to send</font>

766
00:43:31,369 --> 00:43:37,700
the same packet ICMP packet<font color="#E5E5E5"> at a rate of</font>

767
00:43:34,700 --> 00:43:39,078
40 to<font color="#E5E5E5"> 50,000 right so this is a way</font><font color="#CCCCCC"> for</font>

768
00:43:37,700 --> 00:43:40,640
you to test it it's as simple as<font color="#E5E5E5"> that</font>

769
00:43:39,079 --> 00:43:44,509
and here I'm using<font color="#E5E5E5"> of course</font><font color="#CCCCCC"> the answer</font>

770
00:43:40,640 --> 00:43:46,368
of the insert operator to reference the

771
00:43:44,509 --> 00:43:50,349
auxiliary logic or<font color="#CCCCCC"> the macro</font><font color="#E5E5E5"> that I</font>

772
00:43:46,369 --> 00:43:50,349
defined<font color="#E5E5E5"> outside of the construct</font>

773
00:43:54,000 --> 00:44:04,539
now for collaboration as I mentioned at

774
00:44:02,020 --> 00:44:07,529
the beginning I said that<font color="#CCCCCC"> you can use</font>

775
00:44:04,539 --> 00:44:09,819
the include pre-processing directive<font color="#E5E5E5"> and</font>

776
00:44:07,529 --> 00:44:12,069
this gives you a lot of<font color="#E5E5E5"> power actually</font>

777
00:44:09,819 --> 00:44:13,740
so the<font color="#CCCCCC"> scenario I envision for</font>

778
00:44:12,069 --> 00:44:19,029
<font color="#E5E5E5">collaboration is as follows</font>

779
00:44:13,740 --> 00:44:25,750
first you store the CMD<font color="#E5E5E5"> file the master</font>

780
00:44:19,029 --> 00:44:27,670
CMD file on a network<font color="#CCCCCC"> sure right</font><font color="#E5E5E5"> you saw</font>

781
00:44:25,750 --> 00:44:30,220
it on<font color="#E5E5E5"> a</font><font color="#CCCCCC"> network share an</font><font color="#E5E5E5"> in the</font>

782
00:44:27,670 --> 00:44:33,789
configuration file where you<font color="#E5E5E5"> define</font><font color="#CCCCCC"> the</font>

783
00:44:30,220 --> 00:44:35,709
<font color="#E5E5E5">path to that CMD file you pointed</font><font color="#CCCCCC"> to</font>

784
00:44:33,789 --> 00:44:39,069
that CMD file<font color="#E5E5E5"> were you placed on the</font>

785
00:44:35,710 --> 00:44:41,589
network<font color="#CCCCCC"> Jerry</font><font color="#E5E5E5"> and from there and</font><font color="#CCCCCC"> that</font>

786
00:44:39,069 --> 00:44:44,020
file<font color="#CCCCCC"> you use the</font><font color="#E5E5E5"> included preprocessor</font>

787
00:44:41,589 --> 00:44:46,538
<font color="#E5E5E5">interactive pointing back to your</font>

788
00:44:44,020 --> 00:44:49,299
<font color="#E5E5E5">directory to where</font><font color="#CCCCCC"> you have</font><font color="#E5E5E5"> SPF stored</font>

789
00:44:46,539 --> 00:44:51,760
the<font color="#E5E5E5"> actual framework</font><font color="#CCCCCC"> right and everyone</font>

790
00:44:49,299 --> 00:44:54,099
else on the network<font color="#CCCCCC"> can use the</font><font color="#E5E5E5"> included</font>

791
00:44:51,760 --> 00:44:56,680
paper sister directed in that master

792
00:44:54,099 --> 00:45:00,490
<font color="#E5E5E5">file pointing back to his own directory</font>

793
00:44:56,680 --> 00:45:03,730
<font color="#E5E5E5">and then once you have</font><font color="#CCCCCC"> that entry</font>

794
00:45:00,490 --> 00:45:06,578
pointing back to your path<font color="#E5E5E5"> your local</font>

795
00:45:03,730 --> 00:45:08,710
path<font color="#E5E5E5"> then you can use the direct the</font>

796
00:45:06,579 --> 00:45:10,869
include directive<font color="#E5E5E5"> again</font><font color="#CCCCCC"> pointing</font><font color="#E5E5E5"> to</font>

797
00:45:08,710 --> 00:45:13,589
other CMD files local to<font color="#E5E5E5"> your own</font>

798
00:45:10,869 --> 00:45:16,299
directory<font color="#CCCCCC"> I know it's a bit complicated</font>

799
00:45:13,589 --> 00:45:18,578
but<font color="#CCCCCC"> it's literally</font><font color="#E5E5E5"> simple once you start</font>

800
00:45:16,299 --> 00:45:20,020
using it<font color="#E5E5E5"> and then once you define a</font>

801
00:45:18,579 --> 00:45:22,390
construct<font color="#E5E5E5"> it becomes available to</font>

802
00:45:20,020 --> 00:45:24,069
everyone<font color="#E5E5E5"> else right so this is way of</font>

803
00:45:22,390 --> 00:45:26,680
<font color="#E5E5E5">sharing it and democratizing</font><font color="#CCCCCC"> the sharing</font>

804
00:45:24,069 --> 00:45:28,660
of<font color="#E5E5E5"> this construct it's really that</font>

805
00:45:26,680 --> 00:45:30,220
simple<font color="#CCCCCC"> so I</font><font color="#E5E5E5"> don't need</font><font color="#CCCCCC"> to implement</font><font color="#E5E5E5"> any</font>

806
00:45:28,660 --> 00:45:33,339
fancy stuff in terms<font color="#E5E5E5"> of networking or</font>

807
00:45:30,220 --> 00:45:35,230
anything like<font color="#E5E5E5"> that of course</font><font color="#CCCCCC"> it's not</font>

808
00:45:33,339 --> 00:45:38,440
over the Internet has just local<font color="#E5E5E5"> to your</font>

809
00:45:35,230 --> 00:45:44,049
<font color="#E5E5E5">network but at least you can share its</font>

810
00:45:38,440 --> 00:45:45,779
usage<font color="#E5E5E5"> and mind you I know this might</font>

811
00:45:44,049 --> 00:45:48,309
<font color="#CCCCCC">sound like bit complicated here I</font>

812
00:45:45,779 --> 00:45:51,900
there's good<font color="#E5E5E5"> documentation</font><font color="#CCCCCC"> on how to use</font>

813
00:45:48,309 --> 00:45:54,250
<font color="#CCCCCC">the framework</font><font color="#E5E5E5"> say need not worry about</font>

814
00:45:51,900 --> 00:46:02,160
the absence of any description<font color="#E5E5E5"> for</font>

815
00:45:54,250 --> 00:46:04,059
example<font color="#CCCCCC"> for</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> slight a bit of</font>

816
00:46:02,160 --> 00:46:05,240
information<font color="#CCCCCC"> about</font><font color="#E5E5E5"> the internals of the</font>

817
00:46:04,059 --> 00:46:09,200
<font color="#E5E5E5">framework</font>

818
00:46:05,240 --> 00:46:11,120
so for example<font color="#CCCCCC"> the SPF constructs</font><font color="#E5E5E5"> they</font>

819
00:46:09,200 --> 00:46:14,450
are stored under separate data structure

820
00:46:11,120 --> 00:46:15,799
the same thing goes for the wind

821
00:46:14,450 --> 00:46:17,779
<font color="#E5E5E5">construct as well so I make a</font>

822
00:46:15,800 --> 00:46:20,470
<font color="#CCCCCC">differentiation between external</font><font color="#E5E5E5"> and</font>

823
00:46:17,780 --> 00:46:22,700
internal<font color="#E5E5E5"> so external is what you define</font>

824
00:46:20,470 --> 00:46:24,709
whatever consecutive<font color="#CCCCCC"> find in</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> CNT</font>

825
00:46:22,700 --> 00:46:27,379
<font color="#E5E5E5">file and internal is what I define in</font>

826
00:46:24,710 --> 00:46:30,170
the<font color="#E5E5E5"> framework at the language level like</font>

827
00:46:27,380 --> 00:46:33,530
<font color="#E5E5E5">at the C++ level as as part of the code</font>

828
00:46:30,170 --> 00:46:35,060
<font color="#E5E5E5">and why is that because sometimes there</font>

829
00:46:33,530 --> 00:46:37,310
are<font color="#E5E5E5"> certain constructs that you cannot</font>

830
00:46:35,060 --> 00:46:39,049
implement just<font color="#E5E5E5"> solely based on t-shirt</font>

831
00:46:37,310 --> 00:46:40,310
display filters you cannot achieve<font color="#CCCCCC"> that</font>

832
00:46:39,050 --> 00:46:43,340
<font color="#E5E5E5">whatever it</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> that you're</font><font color="#CCCCCC"> trying to</font>

833
00:46:40,310 --> 00:46:46,160
<font color="#CCCCCC">achieve</font><font color="#E5E5E5"> so at the code level</font><font color="#CCCCCC"> I had the</font>

834
00:46:43,340 --> 00:46:47,390
privilege to write those<font color="#E5E5E5"> powerful</font>

835
00:46:46,160 --> 00:46:56,180
construct<font color="#E5E5E5"> and make them available for</font>

836
00:46:47,390 --> 00:46:58,640
<font color="#E5E5E5">you and things to note error reporting</font>

837
00:46:56,180 --> 00:47:02,470
for these constructs<font color="#CCCCCC"> whenever you try to</font>

838
00:46:58,640 --> 00:47:05,600
validate<font color="#E5E5E5"> them from the shell is limited</font>

839
00:47:02,470 --> 00:47:08,509
so however to verify<font color="#CCCCCC"> that your concepts</font>

840
00:47:05,600 --> 00:47:10,279
working as expected<font color="#E5E5E5"> when</font><font color="#CCCCCC"> you do they get</font>

841
00:47:08,510 --> 00:47:13,460
all commands<font color="#CCCCCC"> and</font><font color="#E5E5E5"> it shows up in the list</font>

842
00:47:10,280 --> 00:47:14,600
of all commands supported<font color="#E5E5E5"> then it is</font>

843
00:47:13,460 --> 00:47:15,860
guaranteed<font color="#CCCCCC"> that</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> going to</font><font color="#E5E5E5"> work like</font>

844
00:47:14,600 --> 00:47:19,520
<font color="#CCCCCC">this is the ultimate conclusion</font><font color="#E5E5E5"> this</font>

845
00:47:15,860 --> 00:47:21,050
kind of<font color="#E5E5E5"> work okay and other things</font><font color="#CCCCCC"> that</font>

846
00:47:19,520 --> 00:47:24,430
<font color="#E5E5E5">you need</font><font color="#CCCCCC"> to be aware of the order</font><font color="#E5E5E5"> of</font>

847
00:47:21,050 --> 00:47:27,380
evaluation<font color="#E5E5E5"> of all these input operators</font>

848
00:47:24,430 --> 00:47:29,899
<font color="#E5E5E5">it matters a lot again all of these are</font>

849
00:47:27,380 --> 00:47:33,230
<font color="#CCCCCC">listen in the documentation</font><font color="#E5E5E5"> file</font><font color="#CCCCCC"> ok in</font>

850
00:47:29,900 --> 00:47:34,970
details this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> for your own</font><font color="#E5E5E5"> reference</font>

851
00:47:33,230 --> 00:47:36,940
in<font color="#CCCCCC"> case or</font><font color="#E5E5E5"> 100y my contract is not</font>

852
00:47:34,970 --> 00:47:42,049
working<font color="#CCCCCC"> right so you go to this</font>

853
00:47:36,940 --> 00:47:44,450
<font color="#E5E5E5">particular paragraph performance</font><font color="#CCCCCC"> I mean</font>

854
00:47:42,050 --> 00:47:46,790
this<font color="#E5E5E5"> goes without saying</font><font color="#CCCCCC"> it performs</font><font color="#E5E5E5"> is</font>

855
00:47:44,450 --> 00:47:48,500
dependent on<font color="#CCCCCC"> T</font><font color="#E5E5E5"> shark why because I'm not</font>

856
00:47:46,790 --> 00:47:51,529
implementing<font color="#E5E5E5"> the dissection for these</font>

857
00:47:48,500 --> 00:47:53,360
protocols<font color="#CCCCCC"> in my framework</font><font color="#E5E5E5"> I'm leveraging</font>

858
00:47:51,530 --> 00:47:55,970
the power<font color="#E5E5E5"> of T shark to do this work for</font>

859
00:47:53,360 --> 00:47:57,920
<font color="#E5E5E5">me right</font><font color="#CCCCCC"> so every time I call the</font>

860
00:47:55,970 --> 00:48:00,259
contract it goes through<font color="#CCCCCC"> t-shirt it's</font>

861
00:47:57,920 --> 00:48:04,390
not natively implemented<font color="#E5E5E5"> and there is a</font>

862
00:48:00,260 --> 00:48:06,770
drawback<font color="#E5E5E5"> for that of course future work</font>

863
00:48:04,390 --> 00:48:09,400
this<font color="#E5E5E5"> is what</font><font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> planning planning to</font>

864
00:48:06,770 --> 00:48:11,390
implement<font color="#E5E5E5"> DGA based detection algorithm</font>

865
00:48:09,400 --> 00:48:13,640
that<font color="#E5E5E5"> is not to be done it through an</font>

866
00:48:11,390 --> 00:48:16,520
external construct but and an internal

867
00:48:13,640 --> 00:48:20,440
<font color="#E5E5E5">construct and make it available for you</font>

868
00:48:16,520 --> 00:48:22,310
as an expose object--

869
00:48:20,440 --> 00:48:26,060
detecting different<font color="#CCCCCC"> vulnerability but</font>

870
00:48:22,310 --> 00:48:28,520
<font color="#E5E5E5">you cannot even do with your typical</font>

871
00:48:26,060 --> 00:48:32,480
<font color="#CCCCCC">ideas device whether it is north</font><font color="#E5E5E5"> or any</font>

872
00:48:28,520 --> 00:48:34,670
other<font color="#E5E5E5"> fancy ideas you're using and open</font>

873
00:48:32,480 --> 00:48:36,859
sourcing the<font color="#E5E5E5"> framework</font><font color="#CCCCCC"> as I mentioned</font>

874
00:48:34,670 --> 00:48:40,730
this is<font color="#CCCCCC"> a personal</font><font color="#E5E5E5"> project</font><font color="#CCCCCC"> I was</font>

875
00:48:36,859 --> 00:48:42,529
exploring different<font color="#E5E5E5"> features of C++</font><font color="#CCCCCC"> so I</font>

876
00:48:40,730 --> 00:48:44,240
would be literally<font color="#CCCCCC"> to mending the same</font>

877
00:48:42,530 --> 00:48:46,790
function<font color="#CCCCCC"> but in a different</font><font color="#E5E5E5"> way just</font>

878
00:48:44,240 --> 00:48:48,229
explore the new<font color="#E5E5E5"> future of</font><font color="#CCCCCC"> C++</font><font color="#E5E5E5"> and that's</font>

879
00:48:46,790 --> 00:48:49,880
the reason why I have an<font color="#CCCCCC"> apple source a</font>

880
00:48:48,230 --> 00:48:53,930
framework as of yet so<font color="#CCCCCC"> I need to</font>

881
00:48:49,880 --> 00:48:58,490
refactor<font color="#E5E5E5"> the code and I'm actually</font>

882
00:48:53,930 --> 00:49:00,529
planning to implement natively<font color="#E5E5E5"> some of</font>

883
00:48:58,490 --> 00:49:02,779
the protocol and<font color="#CCCCCC"> in particular HTTP so I</font>

884
00:49:00,530 --> 00:49:05,030
have a greater control over<font color="#CCCCCC"> it instead</font>

885
00:49:02,780 --> 00:49:09,770
of just invoking those a display filters

886
00:49:05,030 --> 00:49:11,329
be a t-shirt and for you to know all

887
00:49:09,770 --> 00:49:14,270
<font color="#E5E5E5">your Wireshark fanatics</font>

888
00:49:11,329 --> 00:49:15,579
it is<font color="#E5E5E5"> buggy I'm not sure how much</font>

889
00:49:14,270 --> 00:49:17,509
experience<font color="#E5E5E5"> you have with wire Shrek</font>

890
00:49:15,579 --> 00:49:19,190
especially the dissectors and the

891
00:49:17,510 --> 00:49:21,170
Pasha's these are two<font color="#E5E5E5"> different things</font>

892
00:49:19,190 --> 00:49:23,390
<font color="#E5E5E5">they are buggy they</font><font color="#CCCCCC"> missed some of</font><font color="#E5E5E5"> the</font>

893
00:49:21,170 --> 00:49:25,010
fields<font color="#CCCCCC"> even some</font><font color="#E5E5E5"> of the display filters</font>

894
00:49:23,390 --> 00:49:28,310
don't<font color="#E5E5E5"> even work depending</font><font color="#CCCCCC"> on how you</font>

895
00:49:25,010 --> 00:49:31,910
capture your<font color="#E5E5E5"> pick a file and of course</font>

896
00:49:28,310 --> 00:49:35,599
I'm<font color="#E5E5E5"> working on this</font><font color="#CCCCCC"> this feature</font><font color="#E5E5E5"> that I</font>

897
00:49:31,910 --> 00:49:38,680
am<font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> already working on it and but I</font>

898
00:49:35,599 --> 00:49:41,569
haven't<font color="#CCCCCC"> finished the implementation yet</font>

899
00:49:38,680 --> 00:49:42,799
<font color="#CCCCCC">I'm kinda gonna talk</font><font color="#E5E5E5"> about it it's gonna</font>

900
00:49:41,569 --> 00:49:44,990
take at least a minimum of<font color="#E5E5E5"> three minutes</font>

901
00:49:42,800 --> 00:49:47,630
<font color="#E5E5E5">it's not</font><font color="#CCCCCC"> that easy to implement</font><font color="#E5E5E5"> as well</font>

902
00:49:44,990 --> 00:49:49,189
<font color="#E5E5E5">there's a lot of thinking behind it I</font>

903
00:49:47,630 --> 00:49:51,140
was hoping<font color="#CCCCCC"> to</font><font color="#E5E5E5"> finish it before the</font>

904
00:49:49,190 --> 00:49:55,430
<font color="#E5E5E5">conference</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> she's not gonna happen</font>

905
00:49:51,140 --> 00:49:56,960
and framework availability is<font color="#CCCCCC"> go</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> my</font>

906
00:49:55,430 --> 00:49:58,700
<font color="#CCCCCC">son and download it</font>

907
00:49:56,960 --> 00:50:01,339
<font color="#E5E5E5">there's I fixed some bugs but I haven't</font>

908
00:49:58,700 --> 00:50:05,919
<font color="#E5E5E5">updated the version</font><font color="#CCCCCC"> that's already</font><font color="#E5E5E5"> on my</font>

909
00:50:01,339 --> 00:50:08,810
site demo unfortunate when<font color="#CCCCCC"> I have time</font>

910
00:50:05,920 --> 00:50:12,200
<font color="#E5E5E5">and for summary</font><font color="#CCCCCC"> ya</font><font color="#E5E5E5"> talked about the</font>

911
00:50:08,810 --> 00:50:15,700
framework<font color="#E5E5E5"> we introduced a new</font><font color="#CCCCCC"> language I</font>

912
00:50:12,200 --> 00:50:19,009
showed some<font color="#E5E5E5"> of the case</font><font color="#CCCCCC"> studies and</font>

913
00:50:15,700 --> 00:50:21,740
references if you want to<font color="#E5E5E5"> learn about</font>

914
00:50:19,010 --> 00:50:22,550
<font color="#E5E5E5">display filters wash right alters these</font>

915
00:50:21,740 --> 00:50:26,450
are two different<font color="#CCCCCC"> things</font>

916
00:50:22,550 --> 00:50:28,700
except the semantics<font color="#CCCCCC"> T short credits</font>

917
00:50:26,450 --> 00:50:31,069
just the icon I use<font color="#CCCCCC"> at</font><font color="#E5E5E5"> the beginning of</font>

918
00:50:28,700 --> 00:50:31,759
the slice the first slide<font color="#CCCCCC"> I got it from</font>

919
00:50:31,069 --> 00:50:35,869
here

920
00:50:31,760 --> 00:50:38,030
just<font color="#CCCCCC"> for regal reasons I need to mention</font>

921
00:50:35,869 --> 00:50:40,240
<font color="#E5E5E5">this and thank you all</font><font color="#CCCCCC"> for attending</font><font color="#E5E5E5"> my</font>

922
00:50:38,030 --> 00:50:40,240
talk

923
00:50:40,310 --> 00:50:45,429
[Applause]

