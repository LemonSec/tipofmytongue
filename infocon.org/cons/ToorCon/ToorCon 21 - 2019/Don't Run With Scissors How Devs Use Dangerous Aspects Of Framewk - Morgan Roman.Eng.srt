1
00:00:00,030 --> 00:00:05,100
God ready okay all right well next up we

2
00:00:05,100 --> 00:00:06,480
want to welcome Morgan Roman to the

3
00:00:06,480 --> 00:00:08,160
stage here he wanted me to let you know

4
00:00:08,160 --> 00:00:10,710
that he works an app sec and apparently

5
00:00:10,710 --> 00:00:11,460
has a dog

6
00:00:11,460 --> 00:00:14,639
so please welcome Oh up on the stage for

7
00:00:14,639 --> 00:00:23,519
don't run with scissors Thank You Gio hi

8
00:00:23,519 --> 00:00:25,439
as he said I'm Morgan Roman I work in

9
00:00:25,439 --> 00:00:27,869
app sec this is about how to prevent

10
00:00:27,869 --> 00:00:30,570
your developers from doing bad things by

11
00:00:30,570 --> 00:00:31,800
telling them to not run with scissors

12
00:00:31,800 --> 00:00:34,710
basically and yeah that's a actually the

13
00:00:34,710 --> 00:00:38,670
entire talk thank you I'm done no it's

14
00:00:38,670 --> 00:00:40,079
actually quite simple but first just

15
00:00:40,079 --> 00:00:41,489
quickly about me a little bit more I

16
00:00:41,489 --> 00:00:44,910
work at DocuSign basically we came up

17
00:00:44,910 --> 00:00:46,110
with this idea because we were tired of

18
00:00:46,110 --> 00:00:48,600
playing whack-a-mole with bugs and thus

19
00:00:48,600 --> 00:00:50,399
I included a picture of me playing

20
00:00:50,399 --> 00:00:52,410
whack-a-mole at RSA because that's what

21
00:00:52,410 --> 00:00:55,289
you do at RSA and I also want to point

22
00:00:55,289 --> 00:00:56,760
out that I'm going to use a lot of

23
00:00:56,760 --> 00:00:58,109
examples this entire talk will be

24
00:00:58,109 --> 00:01:00,750
examples but I may use a particular

25
00:01:00,750 --> 00:01:03,239
framework or a particular library don't

26
00:01:03,239 --> 00:01:04,739
take it as just this is for this

27
00:01:04,739 --> 00:01:06,450
framework or this library or this kind

28
00:01:06,450 --> 00:01:09,000
of security issue it's a strategy that

29
00:01:09,000 --> 00:01:10,640
that's what I really want to get across

30
00:01:10,640 --> 00:01:13,979
okay so I'm going to tell you what the

31
00:01:13,979 --> 00:01:17,549
problem is we have a to be developers

32
00:01:17,549 --> 00:01:19,530
are supposed to write something and make

33
00:01:19,530 --> 00:01:21,060
it happen they're trying to get to A to

34
00:01:21,060 --> 00:01:26,070
B so what they do is this they go in a

35
00:01:26,070 --> 00:01:29,130
straight line they do it the easy way

36
00:01:29,130 --> 00:01:30,869
they do it whatever way it makes most

37
00:01:30,869 --> 00:01:33,750
sense they just parse some XML they just

38
00:01:33,750 --> 00:01:36,540
use some regex whatever makes sense of

39
00:01:36,540 --> 00:01:38,159
the time however they patch it together

40
00:01:38,159 --> 00:01:39,509
they have sprints they have other

41
00:01:39,509 --> 00:01:42,210
priorities does anyone think this is

42
00:01:42,210 --> 00:01:46,920
always the secure way yeah yeah it could

43
00:01:46,920 --> 00:01:48,149
always be the secure way all right

44
00:01:48,149 --> 00:01:50,850
I like your style trust don't verify

45
00:01:50,850 --> 00:01:53,610
this is usually the secure way right and

46
00:01:53,610 --> 00:01:57,390
this is the problem right and you need

47
00:01:57,390 --> 00:01:58,890
all these other steps like encoding

48
00:01:58,890 --> 00:02:01,680
validation access controls all that sort

49
00:02:01,680 --> 00:02:04,590
of thing so we want to make sure that

50
00:02:04,590 --> 00:02:06,810
the secure way is the easy way so now I

51
00:02:06,810 --> 00:02:10,679
present you the solution this by the way

52
00:02:10,679 --> 00:02:12,480
now this is my entire talk and now you

53
00:02:12,480 --> 00:02:15,210
can all leave it's cool

54
00:02:15,210 --> 00:02:17,560
now we're gonna go through some examples

55
00:02:17,560 --> 00:02:19,240
cuz this is not the first time this has

56
00:02:19,240 --> 00:02:22,150
happened but I want to just explain to

57
00:02:22,150 --> 00:02:23,770
everybody why you would want to do this

58
00:02:23,770 --> 00:02:25,480
people liked it better when you're

59
00:02:25,480 --> 00:02:26,830
communicating to the developers you're

60
00:02:26,830 --> 00:02:28,630
working with they are much happier and

61
00:02:28,630 --> 00:02:30,520
they're much more likely to go along it

62
00:02:30,520 --> 00:02:32,140
doesn't impede their development and it

63
00:02:32,140 --> 00:02:34,180
helps you ship faster and oftentimes

64
00:02:34,180 --> 00:02:36,040
nowadays you can't take in a very

65
00:02:36,040 --> 00:02:38,050
important application offline if it's

66
00:02:38,050 --> 00:02:40,030
compromised but you but you do want to

67
00:02:40,030 --> 00:02:42,610
ship a hotfix as quick as possible so

68
00:02:42,610 --> 00:02:44,260
that's the kind of idea behind this and

69
00:02:44,260 --> 00:02:47,100
your training will be way more effective

70
00:02:47,100 --> 00:02:50,260
okay so firstly existing examples and

71
00:02:50,260 --> 00:02:51,640
then I'm going to show you all how you

72
00:02:51,640 --> 00:02:53,920
do it yourself so this is not a new

73
00:02:53,920 --> 00:02:55,840
tactic by the way but it's never really

74
00:02:55,840 --> 00:02:58,330
been explained clearly as I'm about to

75
00:02:58,330 --> 00:03:01,300
do so here is react who here knows what

76
00:03:01,300 --> 00:03:03,790
react is it's the JavaScript flavor of

77
00:03:03,790 --> 00:03:05,410
the week it's last year or something

78
00:03:05,410 --> 00:03:07,450
like that well I actually really like it

79
00:03:07,450 --> 00:03:09,010
even though I have no clue how to use it

80
00:03:09,010 --> 00:03:11,110
for the following reason right if you

81
00:03:11,110 --> 00:03:14,140
notice by default it relies on the

82
00:03:14,140 --> 00:03:15,850
developer usually doesn't rely on the

83
00:03:15,850 --> 00:03:17,320
developer to encode the input right

84
00:03:17,320 --> 00:03:19,239
basic HTML most templating languages

85
00:03:19,239 --> 00:03:22,600
don't do that for you but Reax uses JSX

86
00:03:22,600 --> 00:03:25,090
and by default it does which is awesome

87
00:03:25,090 --> 00:03:26,739
unless they use this horrible thing

88
00:03:26,739 --> 00:03:28,840
called untain juris lee set inner HTML

89
00:03:28,840 --> 00:03:31,420
and this send a laser pointer but it's

90
00:03:31,420 --> 00:03:34,269
not really working so dangerously set in

91
00:03:34,269 --> 00:03:36,790
turn HTML has a very scary name and

92
00:03:36,790 --> 00:03:38,830
basically says hey if you put something

93
00:03:38,830 --> 00:03:41,739
in here it's going to be bad and instead

94
00:03:41,739 --> 00:03:43,930
of having XSS everywhere you can

95
00:03:43,930 --> 00:03:45,340
basically be pretty sure if someone's

96
00:03:45,340 --> 00:03:46,450
putting something in here I want to

97
00:03:46,450 --> 00:03:48,070
investigate it it could not be exercise

98
00:03:48,070 --> 00:03:51,070
but it has a pretty high chance and by

99
00:03:51,070 --> 00:03:54,670
default it's already encoded so this is

100
00:03:54,670 --> 00:03:56,290
safe by default usually unless you need

101
00:03:56,290 --> 00:03:58,870
an exception all right let's talk about

102
00:03:58,870 --> 00:04:00,579
sequel injection reboots previous

103
00:04:00,579 --> 00:04:02,140
speaker was like hey this is still a big

104
00:04:02,140 --> 00:04:04,120
deal even though it's 30 years old well

105
00:04:04,120 --> 00:04:06,070
you can reduce a huge amount of it if

106
00:04:06,070 --> 00:04:09,160
you use an ORM who here knows 100 RM is

107
00:04:09,160 --> 00:04:12,579
sweet I'm with my people all right so

108
00:04:12,579 --> 00:04:14,260
object relational mapping instead of

109
00:04:14,260 --> 00:04:15,910
doing raw sequel where you have this

110
00:04:15,910 --> 00:04:18,279
nice user controlled statement right

111
00:04:18,279 --> 00:04:19,660
here they can just add in whatever you

112
00:04:19,660 --> 00:04:21,548
want and make the query whatever you

113
00:04:21,548 --> 00:04:24,610
want you can just use a built in sort of

114
00:04:24,610 --> 00:04:27,530
query built in and you don't have any

115
00:04:27,530 --> 00:04:28,790
sort of dynamics equal so there's no

116
00:04:28,790 --> 00:04:30,830
terrible string concatenation there's no

117
00:04:30,830 --> 00:04:33,170
evil plus science right and here's the

118
00:04:33,170 --> 00:04:33,560
truth

119
00:04:33,560 --> 00:04:34,850
the developers weren't trying him right

120
00:04:34,850 --> 00:04:37,310
in secure code they were trying to just

121
00:04:37,310 --> 00:04:39,020
do whatever query they needed they just

122
00:04:39,020 --> 00:04:40,600
end up shooting themselves in the foot

123
00:04:40,600 --> 00:04:44,330
so how do we make this easy and how do

124
00:04:44,330 --> 00:04:45,980
you do it on lots of other things so as

125
00:04:45,980 --> 00:04:47,990
I did to areas that already taken care

126
00:04:47,990 --> 00:04:49,760
of but if that's all of everything I

127
00:04:49,760 --> 00:04:52,280
wouldn't be up here right well I kind of

128
00:04:52,280 --> 00:04:54,320
four steps you find a bad pattern you

129
00:04:54,320 --> 00:04:56,330
find a common sink essentially you make

130
00:04:56,330 --> 00:04:58,190
the safe one the pattern the safe

131
00:04:58,190 --> 00:05:00,980
pattern the default one then you've

132
00:05:00,980 --> 00:05:02,660
trained the developers to use the safe

133
00:05:02,660 --> 00:05:05,810
pattern instead of using the bad pattern

134
00:05:05,810 --> 00:05:07,550
and then finally you make some very

135
00:05:07,550 --> 00:05:09,560
simple and very easy static analysis

136
00:05:09,560 --> 00:05:11,560
tools to ensure this works a lot better

137
00:05:11,560 --> 00:05:15,560
all right so who here knows what regex

138
00:05:15,560 --> 00:05:18,530
denial of services it's cool if you

139
00:05:18,530 --> 00:05:20,150
don't I'm okay with that just wanted to

140
00:05:20,150 --> 00:05:22,030
see what the audience was like so

141
00:05:22,030 --> 00:05:24,320
essentially if you send in user supplied

142
00:05:24,320 --> 00:05:26,840
reg X or even just badly constructed reg

143
00:05:26,840 --> 00:05:28,970
X it will take exponential time so the

144
00:05:28,970 --> 00:05:30,530
server will just spin out doing that

145
00:05:30,530 --> 00:05:32,780
process forever and that's pretty nasty

146
00:05:32,780 --> 00:05:34,640
I work at a place where we take a lot of

147
00:05:34,640 --> 00:05:37,220
users applied in reg X and we want to

148
00:05:37,220 --> 00:05:38,870
eliminate this problem like once and for

149
00:05:38,870 --> 00:05:42,080
all so what you can do is you just say

150
00:05:42,080 --> 00:05:45,050
all right cool bad reg X right here and

151
00:05:45,050 --> 00:05:47,150
the developers always have to remember a

152
00:05:47,150 --> 00:05:50,000
time out and then it's safe but who can

153
00:05:50,000 --> 00:05:51,320
just assume the developers will

154
00:05:51,320 --> 00:05:54,350
oftentimes forget a time out it's

155
00:05:54,350 --> 00:05:57,320
probably gonna be pretty common so what

156
00:05:57,320 --> 00:05:59,510
you can do is just make your safe reg X

157
00:05:59,510 --> 00:06:01,400
class and you write this once and then

158
00:06:01,400 --> 00:06:02,930
you handle it if you're not super

159
00:06:02,930 --> 00:06:04,550
technical don't worry about it it's

160
00:06:04,550 --> 00:06:06,470
pretty simple you say I'm gonna use the

161
00:06:06,470 --> 00:06:09,110
built in reg X library in our framework

162
00:06:09,110 --> 00:06:12,650
or you know Java or whatever and then

163
00:06:12,650 --> 00:06:14,660
you're gonna just say it's going to by

164
00:06:14,660 --> 00:06:17,330
default always have this time span as a

165
00:06:17,330 --> 00:06:18,530
timeout so you make it one or two

166
00:06:18,530 --> 00:06:21,050
seconds very simple now you have the

167
00:06:21,050 --> 00:06:22,850
safe one now you know all you have to do

168
00:06:22,850 --> 00:06:24,740
is train the developers to not use the

169
00:06:24,740 --> 00:06:27,470
dangerous one which is here's how you

170
00:06:27,470 --> 00:06:29,930
can write your training this is a

171
00:06:29,930 --> 00:06:31,250
template this is ad libs

172
00:06:31,250 --> 00:06:33,800
I use this and it's fantastic if you use

173
00:06:33,800 --> 00:06:35,450
the bad way the bad thing will happen

174
00:06:35,450 --> 00:06:37,610
instead use the good way since it stops

175
00:06:37,610 --> 00:06:39,200
the bad thing

176
00:06:39,200 --> 00:06:40,970
that's it this is it and then you

177
00:06:40,970 --> 00:06:42,950
include examples and I want to highlight

178
00:06:42,950 --> 00:06:45,380
a few notes right explain it very simply

179
00:06:45,380 --> 00:06:47,360
and clearly you don't need to go and use

180
00:06:47,360 --> 00:06:49,430
security lingo so you just say instead

181
00:06:49,430 --> 00:06:51,680
of saying this causes read us this can

182
00:06:51,680 --> 00:06:53,450
say this will cause the server to take

183
00:06:53,450 --> 00:06:56,510
too long to evaluate the regex

184
00:06:56,510 --> 00:06:59,960
that sort of thing I also really like to

185
00:06:59,960 --> 00:07:01,850
show the developer intends to do it

186
00:07:01,850 --> 00:07:04,250
before I show them how they should do it

187
00:07:04,250 --> 00:07:06,380
right so it's a weird little trick but

188
00:07:06,380 --> 00:07:08,090
it's just something I've gotten from I

189
00:07:08,090 --> 00:07:10,760
guess experience doing this that it just

190
00:07:10,760 --> 00:07:12,380
shows they're just more likely to say oh

191
00:07:12,380 --> 00:07:14,150
that's what I was trying to do let me

192
00:07:14,150 --> 00:07:15,470
and then you show them how you would

193
00:07:15,470 --> 00:07:18,620
like them to do it right so here's the

194
00:07:18,620 --> 00:07:19,730
sample training I'm not going to read

195
00:07:19,730 --> 00:07:21,590
this but it basically used that nice

196
00:07:21,590 --> 00:07:23,060
template and then I always like to

197
00:07:23,060 --> 00:07:25,160
include this example right here so it's

198
00:07:25,160 --> 00:07:27,020
very clear and it also looks about the

199
00:07:27,020 --> 00:07:28,730
same length so it doesn't look more

200
00:07:28,730 --> 00:07:31,070
complicated complexity ends up getting

201
00:07:31,070 --> 00:07:34,370
in the way of execution all right so

202
00:07:34,370 --> 00:07:36,380
then training developers is the main

203
00:07:36,380 --> 00:07:38,780
thing so train developers is usually I

204
00:07:38,780 --> 00:07:40,250
recommend when they get access to the

205
00:07:40,250 --> 00:07:41,900
repository it's that way you can give

206
00:07:41,900 --> 00:07:44,000
they're usually the most excited then

207
00:07:44,000 --> 00:07:45,650
they're usually rated you know do their

208
00:07:45,650 --> 00:07:47,540
first come in or pull requests and then

209
00:07:47,540 --> 00:07:49,490
you know they're pretty open to that

210
00:07:49,490 --> 00:07:51,230
training and then once a year you were

211
00:07:51,230 --> 00:07:52,460
trained for their specific department

212
00:07:52,460 --> 00:07:54,170
over whatever cadence you want you want

213
00:07:54,170 --> 00:07:56,600
to make sure that you are not a

214
00:07:56,600 --> 00:07:58,400
cardboard security guard you want to

215
00:07:58,400 --> 00:08:01,610
constantly remind them okay so then

216
00:08:01,610 --> 00:08:04,310
let's talk about how you do basically

217
00:08:04,310 --> 00:08:06,440
code analysis on this to enforce these

218
00:08:06,440 --> 00:08:08,810
rules right so my favorite way of doing

219
00:08:08,810 --> 00:08:10,910
this is to go really really easy and

220
00:08:10,910 --> 00:08:14,120
that is you use basically regex

221
00:08:14,120 --> 00:08:15,770
but essentially I like this tool called

222
00:08:15,770 --> 00:08:18,800
dev skin because it's grep with a JSON

223
00:08:18,800 --> 00:08:21,050
config file it's open source is made by

224
00:08:21,050 --> 00:08:23,480
Microsoft it's pretty good right because

225
00:08:23,480 --> 00:08:25,220
all you have to do is write that little

226
00:08:25,220 --> 00:08:27,560
pattern and you notice it's escaped

227
00:08:27,560 --> 00:08:29,360
weird but that's it it'll will detect

228
00:08:29,360 --> 00:08:32,570
the bad class right now if you want to

229
00:08:32,570 --> 00:08:36,169
get more specific you can use a couple

230
00:08:36,169 --> 00:08:38,419
other tools there's Roslyn there's

231
00:08:38,419 --> 00:08:40,340
github Symantec if you have access to

232
00:08:40,340 --> 00:08:41,900
other more paid tools that's also

233
00:08:41,900 --> 00:08:43,849
fantastic if you really want to be more

234
00:08:43,849 --> 00:08:45,980
specific this little snippet right here

235
00:08:45,980 --> 00:08:47,990
is exactly the code I use to detect

236
00:08:47,990 --> 00:08:50,570
like bad classes but it's for Roslyn

237
00:08:50,570 --> 00:08:52,580
which is dotnet only right but you can

238
00:08:52,580 --> 00:08:53,130
use this on

239
00:08:53,130 --> 00:08:55,139
across every sort of framework in

240
00:08:55,139 --> 00:08:57,720
language and also I'd like to recommend

241
00:08:57,720 --> 00:09:00,990
one talk by Clint Gibbler called rolling

242
00:09:00,990 --> 00:09:02,339
your own for rolling your own static

243
00:09:02,339 --> 00:09:05,279
analysis if you talks very much in depth

244
00:09:05,279 --> 00:09:08,220
on how to do this so the next thing is

245
00:09:08,220 --> 00:09:09,930
I'm gonna just show you one of these big

246
00:09:09,930 --> 00:09:11,759
devastating rule skin rules because

247
00:09:11,759 --> 00:09:12,899
they're actually way simpler than you

248
00:09:12,899 --> 00:09:13,199
think

249
00:09:13,199 --> 00:09:16,050
and even though it's a big scary blob of

250
00:09:16,050 --> 00:09:18,060
JSON I'm gonna break down the key parts

251
00:09:18,060 --> 00:09:20,790
of it so first off I just start with a

252
00:09:20,790 --> 00:09:23,699
very very simple rule over here and then

253
00:09:23,699 --> 00:09:25,649
that simple rule I just try to aim for

254
00:09:25,649 --> 00:09:28,079
80% there's probably some edge cases

255
00:09:28,079 --> 00:09:30,600
around it but you find most of the

256
00:09:30,600 --> 00:09:32,850
problems that way and then the second

257
00:09:32,850 --> 00:09:35,610
part is you can have very very clear

258
00:09:35,610 --> 00:09:37,560
description and if you have

259
00:09:37,560 --> 00:09:39,089
documentation that's good you should

260
00:09:39,089 --> 00:09:43,110
link to it as well and then finally have

261
00:09:43,110 --> 00:09:45,420
exclusions so you see my safe regex

262
00:09:45,420 --> 00:09:47,519
class then you have an exclusion to say

263
00:09:47,519 --> 00:09:50,040
hey don't flag on this this is amazing

264
00:09:50,040 --> 00:09:51,240
right they're following the rules

265
00:09:51,240 --> 00:09:54,600
exactly how we want alright so when do

266
00:09:54,600 --> 00:09:56,910
you use this well during the polar quest

267
00:09:56,910 --> 00:09:58,829
is fantastic there most of the time

268
00:09:58,829 --> 00:10:01,139
developers are open to that during then

269
00:10:01,139 --> 00:10:04,170
in fact later there'll be a talk by my

270
00:10:04,170 --> 00:10:08,160
colleague Harvey about how to do this in

271
00:10:08,160 --> 00:10:09,509
very good depth so I highly recommend

272
00:10:09,509 --> 00:10:11,069
you come to that there's only one track

273
00:10:11,069 --> 00:10:13,439
so you should and also on your own

274
00:10:13,439 --> 00:10:16,110
cadence to go on further depth but

275
00:10:16,110 --> 00:10:18,810
that's more for yourself less for

276
00:10:18,810 --> 00:10:22,470
showing to the developers all right we

277
00:10:22,470 --> 00:10:25,500
stopped three dots and that wasn't so

278
00:10:25,500 --> 00:10:28,350
hard pretty simple all we did was find a

279
00:10:28,350 --> 00:10:30,329
bad pattern make the safe pattern the

280
00:10:30,329 --> 00:10:32,579
default one trained the developers gave

281
00:10:32,579 --> 00:10:34,230
you training and then build tools to

282
00:10:34,230 --> 00:10:36,680
enforce those rules that's it

283
00:10:36,680 --> 00:10:39,750
once again that's my talk thank you know

284
00:10:39,750 --> 00:10:41,220
let's go through a couple more examples

285
00:10:41,220 --> 00:10:43,350
and then we'll recap but it was very

286
00:10:43,350 --> 00:10:47,370
very easy so xxe who here knows what xxe

287
00:10:47,370 --> 00:10:50,759
is cool good enough I won't describe it

288
00:10:50,759 --> 00:10:53,610
that no it's a when you're parsing XML

289
00:10:53,610 --> 00:10:55,709
there can be parts in the header file

290
00:10:55,709 --> 00:10:58,350
called the header area called the DTD

291
00:10:58,350 --> 00:11:01,110
and essentially it can define weird

292
00:11:01,110 --> 00:11:02,370
variables that lets you breathe from the

293
00:11:02,370 --> 00:11:04,709
file system or you can use the billion

294
00:11:04,709 --> 00:11:06,089
laughs attack or all sorts of nasty

295
00:11:06,089 --> 00:11:06,630
things

296
00:11:06,630 --> 00:11:08,730
but to block it all you have to do is

297
00:11:08,730 --> 00:11:11,579
just say hey don't allow external

298
00:11:11,579 --> 00:11:14,040
entities easy enough but developers

299
00:11:14,040 --> 00:11:15,690
oftentimes forget to do that and most

300
00:11:15,690 --> 00:11:18,360
xml parsing it by default allows you to

301
00:11:18,360 --> 00:11:21,389
do that so this is weird and no nobody

302
00:11:21,389 --> 00:11:22,769
is ever going to remember to do that all

303
00:11:22,769 --> 00:11:25,230
the time and by the way I'm just picking

304
00:11:25,230 --> 00:11:27,540
on this particular Java parsing library

305
00:11:27,540 --> 00:11:30,209
just because I found it it's nothing

306
00:11:30,209 --> 00:11:32,009
there's nothing particularly bout it

307
00:11:32,009 --> 00:11:34,110
nearly all of them have this problem so

308
00:11:34,110 --> 00:11:36,000
whatever one that your company is using

309
00:11:36,000 --> 00:11:38,880
or the developers like to use I highly

310
00:11:38,880 --> 00:11:40,889
recommend you just wrap it and they make

311
00:11:40,889 --> 00:11:44,750
your own like my safe XML parser okay

312
00:11:44,750 --> 00:11:48,269
then you have the training same format

313
00:11:48,269 --> 00:11:49,980
same if you do the bad thing the bad

314
00:11:49,980 --> 00:11:52,980
thing will happen right and the same

315
00:11:52,980 --> 00:11:56,550
example of unsafe and safe same idea we

316
00:11:56,550 --> 00:11:59,310
use the exact same strategy again and I

317
00:11:59,310 --> 00:12:01,170
can just plug and play this anywhere

318
00:12:01,170 --> 00:12:02,699
right and you solve it across your

319
00:12:02,699 --> 00:12:05,940
entire code base and even then using the

320
00:12:05,940 --> 00:12:08,009
same tool very very quickly writing some

321
00:12:08,009 --> 00:12:08,490
regex

322
00:12:08,490 --> 00:12:12,000
to find this stuff and you find the

323
00:12:12,000 --> 00:12:15,990
problem very quickly all right so we

324
00:12:15,990 --> 00:12:18,000
made it really easy to solve xxe across

325
00:12:18,000 --> 00:12:21,269
your entire code base easy stuff sorry

326
00:12:21,269 --> 00:12:22,860
this isn't like the cool stuff where you

327
00:12:22,860 --> 00:12:24,810
hack into something this is like how we

328
00:12:24,810 --> 00:12:28,220
can defend stuff while being really lazy

329
00:12:28,220 --> 00:12:30,959
alright so let's get a little bit more

330
00:12:30,959 --> 00:12:31,949
fun all right

331
00:12:31,949 --> 00:12:34,529
magic get an email like this looks

332
00:12:34,529 --> 00:12:35,490
totally legit

333
00:12:35,490 --> 00:12:38,699
I like this link right here anyone shout

334
00:12:38,699 --> 00:12:43,459
out what this bug is just shout it out

335
00:12:43,459 --> 00:12:48,750
what yeah I open redirect love it mr.

336
00:12:48,750 --> 00:12:52,800
robot likes it to know so open redirects

337
00:12:52,800 --> 00:12:54,600
lets you do some nasty things and your

338
00:12:54,600 --> 00:12:56,040
trick users into going and phishing

339
00:12:56,040 --> 00:12:57,540
sites and if you don't block the

340
00:12:57,540 --> 00:12:58,829
protocol you can also get cross-site

341
00:12:58,829 --> 00:13:01,680
scripting the fix is usually direct

342
00:13:01,680 --> 00:13:04,410
meant people use a whitelist so I have a

343
00:13:04,410 --> 00:13:06,000
whitelist right here and now let's play

344
00:13:06,000 --> 00:13:09,839
a game called let's spot the bug if you

345
00:13:09,839 --> 00:13:10,920
can't see it from afar

346
00:13:10,920 --> 00:13:12,990
I'm apologize but just yell out if

347
00:13:12,990 --> 00:13:14,490
you're able to see what one of the bugs

348
00:13:14,490 --> 00:13:16,670
are

349
00:13:17,269 --> 00:13:20,899
isn't anchored what you mean

350
00:13:26,220 --> 00:13:29,250
bingo so that's one of the big ones you

351
00:13:29,250 --> 00:13:30,570
can basically say it's part of the query

352
00:13:30,570 --> 00:13:32,820
string a part of the put at the end or I

353
00:13:32,820 --> 00:13:35,850
could do you know sub domain silliness

354
00:13:35,850 --> 00:13:39,510
so yeah that's the nasty part as he said

355
00:13:39,510 --> 00:13:42,360
you can put the this part of the regex

356
00:13:42,360 --> 00:13:44,430
anywhere you want in the string so to

357
00:13:44,430 --> 00:13:46,800
show some examples of what could go

358
00:13:46,800 --> 00:13:47,400
wrong

359
00:13:47,400 --> 00:13:49,530
the first one is saying hey I could just

360
00:13:49,530 --> 00:13:51,120
make this part of the sub domain and

361
00:13:51,120 --> 00:13:53,310
then my evil website.com

362
00:13:53,310 --> 00:13:56,310
you can redirect to there then you could

363
00:13:56,310 --> 00:13:58,140
do evil website comm and then you could

364
00:13:58,140 --> 00:13:59,310
just put it at the end in the query

365
00:13:59,310 --> 00:14:02,340
string parameter or you know hey there's

366
00:14:02,340 --> 00:14:04,590
nothing blocks the protocol so my safe

367
00:14:04,590 --> 00:14:06,840
website comm and voila a little bit of

368
00:14:06,840 --> 00:14:09,780
access s for you it just needs to

369
00:14:09,780 --> 00:14:13,230
contain the string so what I recommend

370
00:14:13,230 --> 00:14:17,670
is you create a safe redirect method or

371
00:14:17,670 --> 00:14:19,080
library that just works with your

372
00:14:19,080 --> 00:14:22,020
existing code base and what I usually do

373
00:14:22,020 --> 00:14:23,940
is you an internal redirect that blocks

374
00:14:23,940 --> 00:14:26,610
bad protocols and also only redirect

375
00:14:26,610 --> 00:14:28,680
redirects to your own site and nice

376
00:14:28,680 --> 00:14:30,390
thing about is if the developers use

377
00:14:30,390 --> 00:14:32,070
this you can usually assume it's safe

378
00:14:32,070 --> 00:14:34,470
which is quite nice so you take about

379
00:14:34,470 --> 00:14:37,020
50% of the problem away instantly and

380
00:14:37,020 --> 00:14:39,270
then the ones where they do use external

381
00:14:39,270 --> 00:14:41,100
redirects you can just audit these and

382
00:14:41,100 --> 00:14:43,050
just ensure that they're doing it

383
00:14:43,050 --> 00:14:45,240
properly and that's pretty quick to pick

384
00:14:45,240 --> 00:14:47,370
up with some static analysis you know

385
00:14:47,370 --> 00:14:52,320
wrapping with a JSON file alright one

386
00:14:52,320 --> 00:14:54,780
more example this one is server side

387
00:14:54,780 --> 00:14:56,970
request forgery anyone knows server side

388
00:14:56,970 --> 00:14:58,560
request forgery just raise your hand if

389
00:14:58,560 --> 00:15:01,440
you know sweet all right I got my tribe

390
00:15:01,440 --> 00:15:04,890
now so essentially you're able to get

391
00:15:04,890 --> 00:15:06,900
one server that you don't own to make a

392
00:15:06,900 --> 00:15:09,570
HTTP call or you know any other web call

393
00:15:09,570 --> 00:15:12,630
whatever to another server right in this

394
00:15:12,630 --> 00:15:13,980
case maybe you might not be able to

395
00:15:13,980 --> 00:15:16,140
attack this server directly because

396
00:15:16,140 --> 00:15:18,630
there's a firewall blocking it but if

397
00:15:18,630 --> 00:15:20,250
you can talk to this server and then

398
00:15:20,250 --> 00:15:22,170
make a server-side request forgery let's

399
00:15:22,170 --> 00:15:23,400
pretend they're all microservices

400
00:15:23,400 --> 00:15:24,780
someone's hidden behind the firewall

401
00:15:24,780 --> 00:15:26,670
then you can talk to it as you want

402
00:15:26,670 --> 00:15:29,220
right there's lots of other nasty things

403
00:15:29,220 --> 00:15:32,910
you can do with that like let's pretend

404
00:15:32,910 --> 00:15:34,470
you had server-side request forgery in

405
00:15:34,470 --> 00:15:36,350
c-sharp just as an example

406
00:15:36,350 --> 00:15:38,160
well you

407
00:15:38,160 --> 00:15:40,110
get past the firewall here's some other

408
00:15:40,110 --> 00:15:41,970
nasty things you can call servers with

409
00:15:41,970 --> 00:15:44,339
long responses so that's a good nice

410
00:15:44,339 --> 00:15:46,110
little denial service tactic right there

411
00:15:46,110 --> 00:15:49,560
my favorite thing though is by default

412
00:15:49,560 --> 00:15:52,170
in dotnet and you have to check with

413
00:15:52,170 --> 00:15:53,550
whatever framework you're using if it's

414
00:15:53,550 --> 00:15:56,790
you know Java Ruby etc is by default

415
00:15:56,790 --> 00:15:59,670
file reads and file writes and web

416
00:15:59,670 --> 00:16:01,019
requests calls are essentially the same

417
00:16:01,019 --> 00:16:04,139
thing unless you cast them so you can do

418
00:16:04,139 --> 00:16:07,319
a file read to some secret file or you

419
00:16:07,319 --> 00:16:08,670
can write and just take down the website

420
00:16:08,670 --> 00:16:11,279
or get remote code execution which is

421
00:16:11,279 --> 00:16:13,889
fun stuff so how you defend about yes

422
00:16:13,889 --> 00:16:16,889
well you make a safe version of it right

423
00:16:16,889 --> 00:16:18,779
sometimes you have to do this and then

424
00:16:18,779 --> 00:16:21,240
sometimes you get this scary acronym if

425
00:16:21,240 --> 00:16:23,160
you have a web hook right and I'm not

426
00:16:23,160 --> 00:16:24,990
going to even say that it's that

427
00:16:24,990 --> 00:16:29,459
offensive but essentially you you have

428
00:16:29,459 --> 00:16:32,220
to allow your server to make external

429
00:16:32,220 --> 00:16:34,050
calls and sometimes user-defined right

430
00:16:34,050 --> 00:16:36,540
but you can block into internal IP areas

431
00:16:36,540 --> 00:16:38,310
they shouldn't be talking to you can

432
00:16:38,310 --> 00:16:40,769
have built-in timeouts and you can block

433
00:16:40,769 --> 00:16:42,000
calls to the file system

434
00:16:42,000 --> 00:16:44,130
because that's super nasty and the safe

435
00:16:44,130 --> 00:16:46,199
version that haratz all the versions all

436
00:16:46,199 --> 00:16:47,790
the features of your web client library

437
00:16:47,790 --> 00:16:49,860
so you don't have to rewrite everything

438
00:16:49,860 --> 00:16:51,569
you're just saying the right settings on

439
00:16:51,569 --> 00:16:56,040
your safe class all right recap because

440
00:16:56,040 --> 00:16:59,189
I went very fast but the strategy is the

441
00:16:59,189 --> 00:17:00,839
key thing about this not the particular

442
00:17:00,839 --> 00:17:04,260
examples you find the bad pattern my

443
00:17:04,260 --> 00:17:06,119
rule is for this it doesn't work for all

444
00:17:06,119 --> 00:17:08,159
bugs but if you can find a common sink

445
00:17:08,159 --> 00:17:10,319
for example all regex denial service

446
00:17:10,319 --> 00:17:13,530
requires regex right all xxe requires

447
00:17:13,530 --> 00:17:15,390
XML all server site request forgery

448
00:17:15,390 --> 00:17:18,240
requires a web request so they have a

449
00:17:18,240 --> 00:17:20,880
common sink therefore if you find a

450
00:17:20,880 --> 00:17:22,289
common sink it's usually a pretty good

451
00:17:22,289 --> 00:17:24,929
pattern to try the next thing is you

452
00:17:24,929 --> 00:17:26,369
make the safe pattern the default one

453
00:17:26,369 --> 00:17:28,169
you make it very easy for the developer

454
00:17:28,169 --> 00:17:30,240
and it's something like my safe regex or

455
00:17:30,240 --> 00:17:33,270
you know safe whatever right and then

456
00:17:33,270 --> 00:17:35,250
you do it once right and you maintain

457
00:17:35,250 --> 00:17:37,230
that it's something that if you have a

458
00:17:37,230 --> 00:17:38,700
knapsack department or whoever you

459
00:17:38,700 --> 00:17:40,320
decide to do it just has to maintain to

460
00:17:40,320 --> 00:17:41,159
make sure it's okay

461
00:17:41,159 --> 00:17:42,750
but it's usually fairly simple and

462
00:17:42,750 --> 00:17:46,020
fairly easy to do and then you train

463
00:17:46,020 --> 00:17:48,030
developers to use the safe pattern take

464
00:17:48,030 --> 00:17:50,559
a picture of the slide because it's

465
00:17:50,559 --> 00:17:51,759
fantastic because you don't have to

466
00:17:51,759 --> 00:17:53,529
rethink on how you're gonna write it

467
00:17:53,529 --> 00:17:55,899
every single time it's I use this all

468
00:17:55,899 --> 00:17:58,809
the time cool

469
00:17:58,809 --> 00:18:03,909
I see you there cool it's okay these

470
00:18:03,909 --> 00:18:07,120
will be online later and then once again

471
00:18:07,120 --> 00:18:09,399
put in an example because that really

472
00:18:09,399 --> 00:18:13,029
helps get the point across alright and

473
00:18:13,029 --> 00:18:14,710
then you build tools now I highly

474
00:18:14,710 --> 00:18:16,029
recommend deaf skin because it's really

475
00:18:16,029 --> 00:18:17,889
easy and you can get something up and

476
00:18:17,889 --> 00:18:20,860
running really quick but you know if you

477
00:18:20,860 --> 00:18:22,149
have a more complicated tool that you

478
00:18:22,149 --> 00:18:23,919
prefer go for it right

479
00:18:23,919 --> 00:18:26,889
it's your choice but having this to

480
00:18:26,889 --> 00:18:28,659
enforce the rules is highly valuable and

481
00:18:28,659 --> 00:18:30,460
I highly recommend you do it just it

482
00:18:30,460 --> 00:18:32,019
like eighty percent effective don't

483
00:18:32,019 --> 00:18:34,480
worry about getting all of the security

484
00:18:34,480 --> 00:18:37,179
bugs it's okay that's a weird thing to

485
00:18:37,179 --> 00:18:39,999
say at a security conference it's like

486
00:18:39,999 --> 00:18:41,440
get started you know don't don't worry

487
00:18:41,440 --> 00:18:45,490
about it and once again it very very

488
00:18:45,490 --> 00:18:48,399
simple rules so once again I'm gonna

489
00:18:48,399 --> 00:18:50,409
recap one last time so if I didn't

490
00:18:50,409 --> 00:18:52,869
hammer in enough basically you find the

491
00:18:52,869 --> 00:18:54,850
bad pattern you make the safe pattern

492
00:18:54,850 --> 00:18:56,740
the default one you write good

493
00:18:56,740 --> 00:18:58,389
documentation around to use it and good

494
00:18:58,389 --> 00:19:00,039
training and then you build tools to

495
00:19:00,039 --> 00:19:01,779
enforce these new rules and then you've

496
00:19:01,779 --> 00:19:04,090
just annihilated entire security

497
00:19:04,090 --> 00:19:07,720
problems in your codebase and then you

498
00:19:07,720 --> 00:19:11,230
go do this and it's easy a to B I like

499
00:19:11,230 --> 00:19:14,350
it alright if you want to contact me

500
00:19:14,350 --> 00:19:18,279
here's my contact information and I'll

501
00:19:18,279 --> 00:19:19,740
be taking questions after this talk

502
00:19:19,740 --> 00:19:21,650
let's have lunch

503
00:19:21,650 --> 00:19:31,400
[Applause]

