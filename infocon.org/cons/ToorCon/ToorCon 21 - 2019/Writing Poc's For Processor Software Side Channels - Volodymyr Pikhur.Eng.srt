1
00:00:00,469 --> 00:00:03,120
I'd like to introduce Vladimir who's

2
00:00:03,120 --> 00:00:05,069
going to be discussing writing side

3
00:00:05,069 --> 00:00:07,020
channels for processor and so it's not

4
00:00:07,020 --> 00:00:09,120
worth sorry I screwed that up writing

5
00:00:09,120 --> 00:00:12,000
VOCs for processor saw the software side

6
00:00:12,000 --> 00:00:15,240
channels which you know leading off the

7
00:00:15,240 --> 00:00:17,160
the previous talk around zombie load

8
00:00:17,160 --> 00:00:20,130
seems like good planning all right

9
00:00:20,130 --> 00:00:31,470
thanks alright everyone so a little bit

10
00:00:31,470 --> 00:00:34,020
about myself I live in Portland Oregon

11
00:00:34,020 --> 00:00:36,630
I'm a security researcher slash hardware

12
00:00:36,630 --> 00:00:41,550
hacker it wasn't like that for past five

13
00:00:41,550 --> 00:00:44,029
years I guess

14
00:00:44,750 --> 00:00:47,670
yeah password say I was doing basic we

15
00:00:47,670 --> 00:00:50,100
started doing hardware and so on so I

16
00:00:50,100 --> 00:00:51,989
built up the lab and then like this year

17
00:00:51,989 --> 00:00:55,649
I got the SCM to do more more Hardware

18
00:00:55,649 --> 00:00:57,840
actual research step to doing some

19
00:00:57,840 --> 00:01:04,290
software that they started off with so

20
00:01:04,290 --> 00:01:05,580
how did it start

21
00:01:05,580 --> 00:01:08,790
you know like I got interested into one

22
00:01:08,790 --> 00:01:11,040
when I heard about the vulnerability sa

23
00:01:11,040 --> 00:01:17,570
l1 TF which stands for a level one level

24
00:01:17,570 --> 00:01:21,420
one cache terminal fault and the

25
00:01:21,420 --> 00:01:22,799
researchers looked so the previous

26
00:01:22,799 --> 00:01:26,369
speaker talked about their independent

27
00:01:26,369 --> 00:01:28,610
research that they did they found the

28
00:01:28,610 --> 00:01:31,920
vulnerability is based on that so when

29
00:01:31,920 --> 00:01:33,600
this vulnerability came out I started to

30
00:01:33,600 --> 00:01:38,579
think you look at it and then got really

31
00:01:38,579 --> 00:01:40,829
interested because I'll leading leaking

32
00:01:40,829 --> 00:01:44,189
l1 cache is really powerful thing as it

33
00:01:44,189 --> 00:01:47,759
was demonstrated before because well not

34
00:01:47,759 --> 00:01:50,850
just that but also Intel really relies

35
00:01:50,850 --> 00:01:55,549
on a level 1 cache to do things like

36
00:01:55,549 --> 00:01:58,710
loading a ACM modules for example and

37
00:01:58,710 --> 00:02:01,920
like other things so they they can mark

38
00:02:01,920 --> 00:02:05,479
cache as a ram for example right and do

39
00:02:05,479 --> 00:02:09,179
other things so I wanted to create it

40
00:02:09,179 --> 00:02:11,450
may make a POC for this too

41
00:02:11,450 --> 00:02:13,580
make reproductions and there was no pocs

42
00:02:13,580 --> 00:02:15,470
online yet when they have only really

43
00:02:15,470 --> 00:02:19,430
came out so when we have memory axises

44
00:02:19,430 --> 00:02:21,489
i haven't made that diagram you know

45
00:02:21,489 --> 00:02:24,890
very simplified we have you know a

46
00:02:24,890 --> 00:02:28,430
virtual address you get a page fault

47
00:02:28,430 --> 00:02:31,220
paid page fault purchased provement

48
00:02:31,220 --> 00:02:33,590
processor receives the page fault

49
00:02:33,590 --> 00:02:36,050
it looks up the page table does the page

50
00:02:36,050 --> 00:02:40,610
work it looks up the physical address to

51
00:02:40,610 --> 00:02:43,819
in the PT if you're running in a

52
00:02:43,819 --> 00:02:46,280
hypervisor than that that address takes

53
00:02:46,280 --> 00:02:49,069
is taking and then the look is looked up

54
00:02:49,069 --> 00:02:50,989
in the apt which is extended page tables

55
00:02:50,989 --> 00:02:55,060
so that's how hypervisor enforces

56
00:02:55,060 --> 00:02:59,209
enforces the memory mapping then that

57
00:02:59,209 --> 00:03:02,720
that address is converted into the

58
00:03:02,720 --> 00:03:04,220
physical address and then physical

59
00:03:04,220 --> 00:03:06,670
threat is used to address the

60
00:03:06,670 --> 00:03:09,530
information in the caches so like l1

61
00:03:09,530 --> 00:03:12,890
cache so l1 data cache you know then you

62
00:03:12,890 --> 00:03:17,150
get your your information well so what

63
00:03:17,150 --> 00:03:21,889
what the researchers found actually when

64
00:03:21,889 --> 00:03:25,010
the fault happens for example when you

65
00:03:25,010 --> 00:03:29,000
like set you know you just initialize

66
00:03:29,000 --> 00:03:31,880
the BTS in the wrong way or you're

67
00:03:31,880 --> 00:03:35,420
trying to access in the other memory the

68
00:03:35,420 --> 00:03:39,530
specs package specs faculty of execution

69
00:03:39,530 --> 00:03:42,290
engine keeps executing instructions in

70
00:03:42,290 --> 00:03:44,329
the background because there is this

71
00:03:44,329 --> 00:03:47,709
synchronization issue the signal did not

72
00:03:47,709 --> 00:03:50,239
didn't get a received in time so you

73
00:03:50,239 --> 00:03:54,260
have couple of cycles that when it

74
00:03:54,260 --> 00:03:57,079
starts executing so it keeps executing

75
00:03:57,079 --> 00:03:58,549
for a couple of more cycles until signal

76
00:03:58,549 --> 00:04:01,459
is actually delivered no the default is

77
00:04:01,459 --> 00:04:04,160
delivered so and as we know from

78
00:04:04,160 --> 00:04:09,069
previous research of ML down the

79
00:04:09,069 --> 00:04:11,239
speculative execution engine does not

80
00:04:11,239 --> 00:04:13,250
actually check anything it's basically

81
00:04:13,250 --> 00:04:16,668
Yolo you just take the the instructions

82
00:04:16,668 --> 00:04:19,548
and it so it has only very limited set

83
00:04:19,548 --> 00:04:21,320
of instructions it can execute so if it

84
00:04:21,320 --> 00:04:22,580
reaches the instruction that kiddie

85
00:04:22,580 --> 00:04:24,930
doesn't know like some hyper

86
00:04:24,930 --> 00:04:26,639
very complicated instruction it well not

87
00:04:26,639 --> 00:04:30,449
it will stop executing but simple

88
00:04:30,449 --> 00:04:32,070
instructions like move add and other

89
00:04:32,070 --> 00:04:34,830
operations it can execute but it does

90
00:04:34,830 --> 00:04:37,620
not perform any checks like this is a

91
00:04:37,620 --> 00:04:41,639
typical as a typical execution engine so

92
00:04:41,639 --> 00:04:43,740
what happens is the Fulcher fault

93
00:04:43,740 --> 00:04:46,889
happens the executing engine takes the

94
00:04:46,889 --> 00:04:49,830
page frame number from the PT and treats

95
00:04:49,830 --> 00:04:51,030
it as a physical address directly

96
00:04:51,030 --> 00:04:54,870
without checking anything and then and

97
00:04:54,870 --> 00:04:57,840
and then from them then on you go and

98
00:04:57,840 --> 00:05:00,210
look up in the l1 cache and if you have

99
00:05:00,210 --> 00:05:01,830
that information now you can use it and

100
00:05:01,830 --> 00:05:03,750
from what previous talk was so talking

101
00:05:03,750 --> 00:05:06,690
about you can dig the information right

102
00:05:06,690 --> 00:05:10,530
same same happens with EPTs right which

103
00:05:10,530 --> 00:05:16,530
is even worse like well so which is even

104
00:05:16,530 --> 00:05:20,610
worse because when the translation

105
00:05:20,610 --> 00:05:22,860
happens the it's supposed to check the

106
00:05:22,860 --> 00:05:25,500
apts and and and that physical dress

107
00:05:25,500 --> 00:05:27,720
well it is since it not gonna match it

108
00:05:27,720 --> 00:05:29,330
you know you're not going to be able to

109
00:05:29,330 --> 00:05:31,860
get the information you need and you get

110
00:05:31,860 --> 00:05:34,620
the the institution gonna stop right but

111
00:05:34,620 --> 00:05:36,840
since you're getting directly the

112
00:05:36,840 --> 00:05:39,000
physical address its treated being as it

113
00:05:39,000 --> 00:05:40,860
is directly physical address you

114
00:05:40,860 --> 00:05:45,229
basically can candy can eat any memory

115
00:05:45,229 --> 00:05:50,310
without you can can delete any memory as

116
00:05:50,310 --> 00:05:54,360
long as it's in the cache right so you

117
00:05:54,360 --> 00:05:56,610
can read it in the SMM and our vmm or

118
00:05:56,610 --> 00:05:58,949
any other mode as long as it's in the

119
00:05:58,949 --> 00:06:04,080
cache right so I've been writing pocs I

120
00:06:04,080 --> 00:06:07,229
did actually work for big blue but I did

121
00:06:07,229 --> 00:06:09,750
not know about Dell 1tf because I

122
00:06:09,750 --> 00:06:13,020
already left them and and so I've been

123
00:06:13,020 --> 00:06:16,860
writing VOCs for quite a while and so

124
00:06:16,860 --> 00:06:18,870
this is I made list like what you kinda

125
00:06:18,870 --> 00:06:21,240
wanna pay attention to like if you're

126
00:06:21,240 --> 00:06:23,039
trying to make a reproduction through

127
00:06:23,039 --> 00:06:24,870
the proof of concept you like either

128
00:06:24,870 --> 00:06:28,039
could use the

129
00:06:30,120 --> 00:06:35,470
either could use a already available

130
00:06:35,470 --> 00:06:38,170
PLC's like I may get hub or not or start

131
00:06:38,170 --> 00:06:42,850
start your own right so so like first

132
00:06:42,850 --> 00:06:45,100
thing is your code gonna be messy like

133
00:06:45,100 --> 00:06:46,930
you're gonna be experimenting lots of

134
00:06:46,930 --> 00:06:49,480
things you want to use like some source

135
00:06:49,480 --> 00:06:52,660
code version control right you gonna get

136
00:06:52,660 --> 00:06:55,720
bugs and like just stupid mistakes so

137
00:06:55,720 --> 00:06:57,100
you yeah I just

138
00:06:57,100 --> 00:07:00,850
just be patient right and so the third

139
00:07:00,850 --> 00:07:03,430
one is really important when you think

140
00:07:03,430 --> 00:07:04,840
that all you are you found something

141
00:07:04,840 --> 00:07:07,240
interesting you want to really test it

142
00:07:07,240 --> 00:07:09,190
against those false positives or false

143
00:07:09,190 --> 00:07:11,830
negatives you wanna make sure you have a

144
00:07:11,830 --> 00:07:13,750
consistent because then consistent

145
00:07:13,750 --> 00:07:19,390
behavior so let's say you found

146
00:07:19,390 --> 00:07:21,100
something in that like oh it's leaking

147
00:07:21,100 --> 00:07:23,860
some information well it does that

148
00:07:23,860 --> 00:07:25,540
information really make any sense right

149
00:07:25,540 --> 00:07:28,060
so you want to look for patterns like

150
00:07:28,060 --> 00:07:31,690
you know typically so the cache

151
00:07:31,690 --> 00:07:33,820
organized in the cache lines which is

152
00:07:33,820 --> 00:07:36,940
size of 64 bytes for example right or it

153
00:07:36,940 --> 00:07:39,190
could be like RS be like a return stack

154
00:07:39,190 --> 00:07:43,150
buffer which is 16 or any other like

155
00:07:43,150 --> 00:07:47,710
internal structure typically that is not

156
00:07:47,710 --> 00:07:49,300
necessary but typically isn't in the

157
00:07:49,300 --> 00:07:52,180
power of 2 right

158
00:07:52,180 --> 00:07:54,220
so like typical buggy you might have

159
00:07:54,220 --> 00:07:55,810
like okay you getting you get you

160
00:07:55,810 --> 00:07:57,580
getting some results but like it's like

161
00:07:57,580 --> 00:08:00,760
spitting out like infinity infinite

162
00:08:00,760 --> 00:08:02,520
amount of like just random bytes that

163
00:08:02,520 --> 00:08:06,240
that doesn't make any sense

164
00:08:07,260 --> 00:08:09,970
yeah you want to look up the CPU

165
00:08:09,970 --> 00:08:11,800
structures like okay you see some in

166
00:08:11,800 --> 00:08:16,030
from you see the leaks but that

167
00:08:16,030 --> 00:08:17,800
information not necessary is like power

168
00:08:17,800 --> 00:08:21,610
of two or you don't you don't see any

169
00:08:21,610 --> 00:08:23,140
familiar patterns right you want to

170
00:08:23,140 --> 00:08:24,970
write good like depends on the way what

171
00:08:24,970 --> 00:08:26,770
kind of you're going going after you

172
00:08:26,770 --> 00:08:29,350
want to make sure that you check the the

173
00:08:29,350 --> 00:08:33,039
manual all right so if you have a well

174
00:08:33,039 --> 00:08:34,870
if you have a CPU that supports ccac's

175
00:08:34,870 --> 00:08:38,380
the transactional memory extensions or

176
00:08:38,380 --> 00:08:40,120
you want to use that so that so what

177
00:08:40,120 --> 00:08:42,729
does it was what TCX does is

178
00:08:42,729 --> 00:08:45,670
it's suppressants fault so even if you

179
00:08:45,670 --> 00:08:50,290
do the if if enemy you access some

180
00:08:50,290 --> 00:08:52,060
invalid memory it will not actually

181
00:08:52,060 --> 00:08:55,449
raised an exception CPU CPU internally

182
00:08:55,449 --> 00:08:57,519
going to suppress it and and let you

183
00:08:57,519 --> 00:08:59,920
know so you can do that programmatically

184
00:08:59,920 --> 00:09:01,240
with actually was like without actually

185
00:09:01,240 --> 00:09:03,339
raising raising the exception that will

186
00:09:03,339 --> 00:09:05,800
make sure that your sample cache or any

187
00:09:05,800 --> 00:09:08,740
other structures not getting polluted by

188
00:09:08,740 --> 00:09:13,209
other other threads yeah so if you let's

189
00:09:13,209 --> 00:09:15,279
say I got some results you might want to

190
00:09:15,279 --> 00:09:17,769
do some visualization and graphing we

191
00:09:17,769 --> 00:09:23,199
get some kind of outliers or like

192
00:09:23,199 --> 00:09:30,010
averaging of your results and so on run

193
00:09:30,010 --> 00:09:32,620
multiple iterations for for your tests

194
00:09:32,620 --> 00:09:35,350
like you it not gonna work just not

195
00:09:35,350 --> 00:09:37,389
single run you want to like run it

196
00:09:37,389 --> 00:09:39,610
multiple you know thousands hundred

197
00:09:39,610 --> 00:09:43,930
thousand times to get better results and

198
00:09:43,930 --> 00:09:45,940
used like a security instruction to

199
00:09:45,940 --> 00:09:50,880
flush the pipeline so as we seen

200
00:09:50,880 --> 00:09:53,230
previously right like in totally visit

201
00:09:53,230 --> 00:09:55,029
the patch they introduced like or we're

202
00:09:55,029 --> 00:09:57,430
in Jersey in new email MSR what actually

203
00:09:57,430 --> 00:10:00,130
does it involves the microcode right

204
00:10:00,130 --> 00:10:02,380
then which is really expensive so CP OD

205
00:10:02,380 --> 00:10:04,000
is gonna do the same thing it's gonna

206
00:10:04,000 --> 00:10:05,740
actually flash this like but see view it

207
00:10:05,740 --> 00:10:07,870
is you can call from user mode so you

208
00:10:07,870 --> 00:10:09,069
don't have to worry about the running

209
00:10:09,069 --> 00:10:12,310
off example making development in the

210
00:10:12,310 --> 00:10:17,560
kernel of the kernel module right so so

211
00:10:17,560 --> 00:10:20,170
I started to look at the information

212
00:10:20,170 --> 00:10:21,910
that into provided for this

213
00:10:21,910 --> 00:10:24,370
I noticed that well they claimed that

214
00:10:24,370 --> 00:10:26,860
the Elven TF can be triggered only when

215
00:10:26,860 --> 00:10:31,600
the present bit is not set or some

216
00:10:31,600 --> 00:10:35,880
resort bits are set well so like just

217
00:10:35,880 --> 00:10:39,180
just thinking about it well if I access

218
00:10:39,180 --> 00:10:42,660
access invalid memory for example right

219
00:10:42,660 --> 00:10:46,180
that that means that they present it is

220
00:10:46,180 --> 00:10:49,329
not set right but what what what say I

221
00:10:49,329 --> 00:10:51,160
if I do the right to the read-only

222
00:10:51,160 --> 00:10:52,689
memory right

223
00:10:52,689 --> 00:10:54,610
it should also raise the exception right

224
00:10:54,610 --> 00:10:56,520
so she should raise the page fault

225
00:10:56,520 --> 00:10:59,700
why did not they didn't mention that so

226
00:10:59,700 --> 00:11:02,430
I started really curious like it's kind

227
00:11:02,430 --> 00:11:05,070
of weird like a vendor tries to provide

228
00:11:05,070 --> 00:11:06,209
the information they should provide all

229
00:11:06,209 --> 00:11:08,610
of the information I mean I don't know

230
00:11:08,610 --> 00:11:11,100
if it's really like I mean they just

231
00:11:11,100 --> 00:11:16,140
didn't see it as the attack vector or or

232
00:11:16,140 --> 00:11:20,040
whatever you know like for example to me

233
00:11:20,040 --> 00:11:22,800
a backpack to be really easy you provide

234
00:11:22,800 --> 00:11:24,240
the read-only memory to colonel and

235
00:11:24,240 --> 00:11:26,370
colonel tries to read from it and then

236
00:11:26,370 --> 00:11:28,950
maybe you can have it or get to find the

237
00:11:28,950 --> 00:11:31,080
gadget in colonel that will do the load

238
00:11:31,080 --> 00:11:31,920
it's for you

239
00:11:31,920 --> 00:11:35,240
I mean while you're in the other thread

240
00:11:35,240 --> 00:11:40,800
trying to monitor that memory so you

241
00:11:40,800 --> 00:11:43,860
know as I was validating my results I

242
00:11:43,860 --> 00:11:47,430
found that well you know like if it's in

243
00:11:47,430 --> 00:11:49,830
the cache right I all get the really

244
00:11:49,830 --> 00:11:53,520
fast axises but how to make the data not

245
00:11:53,520 --> 00:11:54,899
being in the cache well you see a flash

246
00:11:54,899 --> 00:11:57,600
you flush the cache lines right so make

247
00:11:57,600 --> 00:12:00,720
it make it not being there I found that

248
00:12:00,720 --> 00:12:03,060
well I'm flashing it and but I still

249
00:12:03,060 --> 00:12:07,860
some see some leaks so the first first

250
00:12:07,860 --> 00:12:09,089
numbers is just number of those

251
00:12:09,089 --> 00:12:10,500
iterations that I mentioned before you

252
00:12:10,500 --> 00:12:12,529
wanna round your attack you know as many

253
00:12:12,529 --> 00:12:16,440
times as possible the other one is just

254
00:12:16,440 --> 00:12:20,190
like pop page fold CPU number four and

255
00:12:20,190 --> 00:12:21,690
for some reason there was by two the

256
00:12:21,690 --> 00:12:24,360
same byte was leaking and and it just

257
00:12:24,360 --> 00:12:26,550
information about the clocks how many

258
00:12:26,550 --> 00:12:30,600
calls did it take right so so in case of

259
00:12:30,600 --> 00:12:32,520
positive in false positive I shouldn't

260
00:12:32,520 --> 00:12:34,200
have you seen some like a fixed number

261
00:12:34,200 --> 00:12:37,680
fixed byte number that that has been

262
00:12:37,680 --> 00:12:39,390
leaked right like if you do beer just

263
00:12:39,390 --> 00:12:40,709
false positive I would get like just

264
00:12:40,709 --> 00:12:43,079
random numbers like I don't know why is

265
00:12:43,079 --> 00:12:45,750
0-2 for me in this case but I mean

266
00:12:45,750 --> 00:12:46,980
that's how it was and then I was like

267
00:12:46,980 --> 00:12:49,079
well okay this something is not wrong I

268
00:12:49,079 --> 00:12:51,810
mean something is wrong like how do i

269
00:12:51,810 --> 00:12:57,360
you know how do i confirm this so so I

270
00:12:57,360 --> 00:12:59,459
decided okay the seal part is not

271
00:12:59,459 --> 00:13:02,779
working for me so what do I do well in

272
00:13:02,779 --> 00:13:04,740
marking the memory isn't cashable

273
00:13:04,740 --> 00:13:05,790
obviously going to be the solution

274
00:13:05,790 --> 00:13:08,399
because that's the only way to

275
00:13:08,399 --> 00:13:11,550
to make sure that the it's never in in

276
00:13:11,550 --> 00:13:13,949
your in your cash because it should not

277
00:13:13,949 --> 00:13:14,610
be in the cash

278
00:13:14,610 --> 00:13:16,970
otherwise if you have a problem right so

279
00:13:16,970 --> 00:13:19,949
and then and actually Intel entrance on

280
00:13:19,949 --> 00:13:22,769
the on their website that there's a

281
00:13:22,769 --> 00:13:25,439
mitigation you should if you if you if

282
00:13:25,439 --> 00:13:28,170
you're able you can store the some

283
00:13:28,170 --> 00:13:29,790
sensitive Michigan cacheable memory

284
00:13:29,790 --> 00:13:31,170
since it's not gonna be in the cache

285
00:13:31,170 --> 00:13:35,910
right so it's like a perfect solution if

286
00:13:35,910 --> 00:13:37,620
you want to keep the secrets right and

287
00:13:37,620 --> 00:13:39,809
then this is from the their optimization

288
00:13:39,809 --> 00:13:41,579
man yourself that signing saying that

289
00:13:41,579 --> 00:13:44,990
the speculative execution will never

290
00:13:44,990 --> 00:13:48,779
access a uncatchable memory or never

291
00:13:48,779 --> 00:13:53,639
gonna take a trap or folder trap so as I

292
00:13:53,639 --> 00:13:55,769
was playing with the uncatchable memory

293
00:13:55,769 --> 00:13:58,740
started to see well it's you know it's

294
00:13:58,740 --> 00:14:02,249
still leaking the information and like I

295
00:14:02,249 --> 00:14:03,959
used like I just feel the memory with

296
00:14:03,959 --> 00:14:05,040
the you know EE

297
00:14:05,040 --> 00:14:08,399
patter and like it it would it popped up

298
00:14:08,399 --> 00:14:10,379
there which is like it doesn't make any

299
00:14:10,379 --> 00:14:15,329
sense right so I was digging to the

300
00:14:15,329 --> 00:14:18,089
manual a lot like I'm not a hacker I'm

301
00:14:18,089 --> 00:14:20,610
not gonna read 600 pages of like just

302
00:14:20,610 --> 00:14:22,920
the optimization manual it was really

303
00:14:22,920 --> 00:14:27,529
frustrating to be honest I found a I

304
00:14:27,529 --> 00:14:32,459
found the like a hint on their actually

305
00:14:32,459 --> 00:14:34,939
form somebody was asking about the

306
00:14:34,939 --> 00:14:37,769
buffer these internal buffers like Jax

307
00:14:37,769 --> 00:14:39,480
never heard of is I'm not the secured

308
00:14:39,480 --> 00:14:46,139
you're not the CPU architect right so as

309
00:14:46,139 --> 00:14:47,730
it was mentioned before you know this

310
00:14:47,730 --> 00:14:50,639
read these buffers said basically you

311
00:14:50,639 --> 00:14:51,990
know between the registered in the cache

312
00:14:51,990 --> 00:14:53,459
but then if you haven't cache memory

313
00:14:53,459 --> 00:14:55,860
where does it go cannot go in cannot go

314
00:14:55,860 --> 00:14:58,290
into the registers directly right guess

315
00:14:58,290 --> 00:15:00,269
otherwise it would be really really slow

316
00:15:00,269 --> 00:15:03,420
for your uncatchable memory so that

317
00:15:03,420 --> 00:15:05,490
that's why like you know they have they

318
00:15:05,490 --> 00:15:11,009
have buffers there you know and it was

319
00:15:11,009 --> 00:15:12,620
making perfect sense and especially

320
00:15:12,620 --> 00:15:15,389
because well these buffers are you know

321
00:15:15,389 --> 00:15:17,009
you they're really tiny right I mean

322
00:15:17,009 --> 00:15:18,959
there there are not that many of them so

323
00:15:18,959 --> 00:15:20,510
that's why the results are really

324
00:15:20,510 --> 00:15:22,970
slow so you saw the video previously

325
00:15:22,970 --> 00:15:26,240
right the the attack works but takes

326
00:15:26,240 --> 00:15:32,440
time right so finally made the

327
00:15:32,440 --> 00:15:36,020
proof-of-concept for what info cold as

328
00:15:36,020 --> 00:15:39,590
the MDS which is a micro actual data

329
00:15:39,590 --> 00:15:46,540
sampling III made the protocol tab first

330
00:15:46,540 --> 00:15:51,290
basically process put secret in into the

331
00:15:51,290 --> 00:15:52,640
memory

332
00:15:52,640 --> 00:15:54,560
I didn't waits for the attacker to try

333
00:15:54,560 --> 00:15:57,920
to read it out and they they are the

334
00:15:57,920 --> 00:16:01,730
same on the same core so the the buffers

335
00:16:01,730 --> 00:16:04,040
are shared between the physical threads

336
00:16:04,040 --> 00:16:08,240
right and so you can you cannot see it

337
00:16:08,240 --> 00:16:10,910
on the on the on the image but I'm gonna

338
00:16:10,910 --> 00:16:13,370
run the proof of concept right now after

339
00:16:13,370 --> 00:16:17,600
the next slide the the data that is

340
00:16:17,600 --> 00:16:19,700
getting leaked is actually equal of 64

341
00:16:19,700 --> 00:16:22,160
bytes that exactly confirms that the

342
00:16:22,160 --> 00:16:26,870
test was the it was the size of the of

343
00:16:26,870 --> 00:16:29,660
the cache line I don't know if you can

344
00:16:29,660 --> 00:16:38,050
see under on the slide there right so I

345
00:16:38,050 --> 00:16:40,340
couldn't send this the screenshot with

346
00:16:40,340 --> 00:16:43,070
the debugger but so you can see the

347
00:16:43,070 --> 00:16:47,450
patterns like seven FF 6 7 FFF if you

348
00:16:47,450 --> 00:16:50,990
would compare 7 FF 6 again if you would

349
00:16:50,990 --> 00:16:52,550
look it up these are actually system

350
00:16:52,550 --> 00:16:54,650
addresses of the kernel modules and not

351
00:16:54,650 --> 00:16:58,310
kilometer the user mode modules so these

352
00:16:58,310 --> 00:17:01,490
were actually you know like return

353
00:17:01,490 --> 00:17:06,020
addresses or something that were match

354
00:17:06,020 --> 00:17:08,780
that are matching the you know they

355
00:17:08,780 --> 00:17:12,500
brought the attacker process or the well

356
00:17:12,500 --> 00:17:15,440
the victim or attacker process you know

357
00:17:15,440 --> 00:17:20,000
so so right so the next thing okay this

358
00:17:20,000 --> 00:17:23,089
school we can do this attack it but it's

359
00:17:23,089 --> 00:17:25,190
kind of really slow so that what the

360
00:17:25,190 --> 00:17:27,410
research is dead right they try to lick

361
00:17:27,410 --> 00:17:30,530
the EDC shadow doing this but how do you

362
00:17:30,530 --> 00:17:33,030
actually Prime and make sure

363
00:17:33,030 --> 00:17:37,470
that that what we saw the EDC shadow is

364
00:17:37,470 --> 00:17:39,900
is in the isn't cash right you

365
00:17:39,900 --> 00:17:42,440
repeatedly relaunch the you know

366
00:17:42,440 --> 00:17:45,690
password utility to make sure it's there

367
00:17:45,690 --> 00:17:47,400
and get that race condition between

368
00:17:47,400 --> 00:17:51,680
these two threads and try to lick the

369
00:17:51,680 --> 00:17:56,790
try to lick the hash so like it is

370
00:17:56,790 --> 00:18:01,110
powerful but I would say you're gonna

371
00:18:01,110 --> 00:18:03,720
get detected like if you're like in the

372
00:18:03,720 --> 00:18:06,000
real environment like it's gonna be not

373
00:18:06,000 --> 00:18:07,710
as like even your system da gonna notice

374
00:18:07,710 --> 00:18:09,800
that like it's gonna raise the alert

375
00:18:09,800 --> 00:18:15,450
right other thing in the virtualized

376
00:18:15,450 --> 00:18:18,480
environments I don't know who does that

377
00:18:18,480 --> 00:18:19,020
anymore

378
00:18:19,020 --> 00:18:23,760
at this point but nobody offers you VPS

379
00:18:23,760 --> 00:18:26,250
well if they do you shouldn't be using

380
00:18:26,250 --> 00:18:30,170
it nobody offers the VPS that schedules

381
00:18:30,170 --> 00:18:32,310
tenants on the single threat and it

382
00:18:32,310 --> 00:18:34,140
shared the other thread with somebody

383
00:18:34,140 --> 00:18:36,150
else that's basically just asking to get

384
00:18:36,150 --> 00:18:42,870
pwned through using this like even even

385
00:18:42,870 --> 00:18:47,240
if you have a mitigations like 4k BM or

386
00:18:47,240 --> 00:18:51,810
then when you when the exception happens

387
00:18:51,810 --> 00:18:54,900
you gonna go in the exception gonna be

388
00:18:54,900 --> 00:18:58,230
processed by the host right you will be

389
00:18:58,230 --> 00:19:01,770
able to attack the actual host on the

390
00:19:01,770 --> 00:19:06,770
server because of like IQs and other

391
00:19:06,770 --> 00:19:13,550
stuff that is getting processed yeah

392
00:19:14,510 --> 00:19:19,070
so the POCs and the slide is going to be

393
00:19:19,070 --> 00:19:27,100
available gonna try to run this here

394
00:19:31,000 --> 00:19:34,049
all right awesome

395
00:19:41,760 --> 00:19:45,500
nope nope

396
00:19:54,400 --> 00:19:57,059
yeah all right

397
00:20:56,070 --> 00:20:59,429
this is hard

398
00:21:00,280 --> 00:21:03,510
I don't see it here

399
00:21:29,040 --> 00:21:33,930
all right all right so you have a first

400
00:21:33,930 --> 00:21:39,010
brought is just I'm a distinct justice

401
00:21:39,010 --> 00:21:42,640
for just for synchronization to make it

402
00:21:42,640 --> 00:21:45,090
easier

403
00:22:10,630 --> 00:22:14,020
all right so I should come up pretty

404
00:22:14,020 --> 00:22:16,320
fast

405
00:22:19,179 --> 00:22:27,489
yeah here we go yep yeah I can see the

406
00:22:27,489 --> 00:22:29,529
secret string that I put in there

407
00:22:29,529 --> 00:22:34,749
getting licked and yeah like you give me

408
00:22:34,749 --> 00:22:36,759
the garbage basically whatever is

409
00:22:36,759 --> 00:22:45,849
running yeah yeah and the rap just you

410
00:22:45,849 --> 00:22:47,889
know stale or remnant date data that is

411
00:22:47,889 --> 00:22:53,668
being in the in the buffer yeah

412
00:22:59,250 --> 00:23:02,490
okay so what do we have all right

413
00:23:02,490 --> 00:23:04,830
actually when I reported this to Intel I

414
00:23:04,830 --> 00:23:08,179
said the the leak happens from like a

415
00:23:08,179 --> 00:23:11,130
load in store buffer which is in which

416
00:23:11,130 --> 00:23:14,159
it was incorrect actually because yeah

417
00:23:14,159 --> 00:23:16,530
it says that before I'm not I'm a hacker

418
00:23:16,530 --> 00:23:21,409
I'm not gonna read 600 pages too much

419
00:23:21,409 --> 00:23:25,799
right and actually the guys from Tia

420
00:23:25,799 --> 00:23:27,990
grads what they call the meltdown you

421
00:23:27,990 --> 00:23:30,210
see found it much earlier before that

422
00:23:30,210 --> 00:23:32,640
but they have they haven't shared the

423
00:23:32,640 --> 00:23:35,309
information and it in the details what

424
00:23:35,309 --> 00:23:43,289
what what was going on yeah so yeah you

425
00:23:43,289 --> 00:23:45,690
really want to validate the result that

426
00:23:45,690 --> 00:23:48,929
that that you were seeing right may you

427
00:23:48,929 --> 00:23:50,789
might see the seal flash okay it's

428
00:23:50,789 --> 00:23:52,740
flashing it should be flashing right but

429
00:23:52,740 --> 00:23:55,260
it's hard to say if you're still flash

430
00:23:55,260 --> 00:23:57,030
actually flashed it or not or maybe it

431
00:23:57,030 --> 00:24:01,429
was already pulled by by the spec

432
00:24:01,429 --> 00:24:04,020
speculative execution engine into the

433
00:24:04,020 --> 00:24:07,590
cache again right gives the CEO pushes

434
00:24:07,590 --> 00:24:09,600
out of order it's only in order for the

435
00:24:09,600 --> 00:24:11,970
other all of the other see of co-wash

436
00:24:11,970 --> 00:24:14,520
instructions sorry I put the link down

437
00:24:14,520 --> 00:24:18,480
below here this guy actually found this

438
00:24:18,480 --> 00:24:21,330
behavior and there is a whole thread

439
00:24:21,330 --> 00:24:23,580
about that on Twitter in January if so

440
00:24:23,580 --> 00:24:26,789
even before the Tia gratz mentioned it

441
00:24:26,789 --> 00:24:30,059
in their pride paper that well he's

442
00:24:30,059 --> 00:24:32,669
seeing the same ml damn you see but he

443
00:24:32,669 --> 00:24:34,530
was using that seal flash and I actually

444
00:24:34,530 --> 00:24:36,330
haven't seen him as being mentioned on

445
00:24:36,330 --> 00:24:38,400
the Intel report so I'm guessing he did

446
00:24:38,400 --> 00:24:41,309
not report it to to in town or Intel may

447
00:24:41,309 --> 00:24:46,049
have missed it in the India grads report

448
00:24:46,049 --> 00:24:48,480
when they reported the meltdown research

449
00:24:48,480 --> 00:24:53,000
or other reasons well yeah you know like

450
00:24:53,000 --> 00:24:56,820
after after the after the this MDS came

451
00:24:56,820 --> 00:24:59,340
out I actually went back and looked

452
00:24:59,340 --> 00:25:01,650
alright see actually in the fill buffer

453
00:25:01,650 --> 00:25:03,659
and then I found that I was looking in

454
00:25:03,659 --> 00:25:05,370
the wrong keywords that I was looking

455
00:25:05,370 --> 00:25:08,760
for uncatchable memory but what actually

456
00:25:08,760 --> 00:25:10,520
it also calls it

457
00:25:10,520 --> 00:25:15,770
they call it as a non-temporal store you

458
00:25:15,770 --> 00:25:17,900
know and that that that's what basically

459
00:25:17,900 --> 00:25:21,080
the uncrushable memory means so they use

460
00:25:21,080 --> 00:25:23,840
you know terminology that is hard to

461
00:25:23,840 --> 00:25:26,330
follow sometimes and the diagrams or

462
00:25:26,330 --> 00:25:28,030
don't really make any sense sometimes

463
00:25:28,030 --> 00:25:29,300
yeah

464
00:25:29,300 --> 00:25:30,590
so you didn't want to jump to

465
00:25:30,590 --> 00:25:33,530
conclusions basically right then the

466
00:25:33,530 --> 00:25:37,460
last one is I would take research with a

467
00:25:37,460 --> 00:25:40,040
little bit salt grain of salt because we

468
00:25:40,040 --> 00:25:42,230
don't really have any tools how to check

469
00:25:42,230 --> 00:25:44,240
this and checked in it with these

470
00:25:44,240 --> 00:25:49,880
buffers or or internal structures even

471
00:25:49,880 --> 00:25:51,440
if you have if you Mimi if you get the

472
00:25:51,440 --> 00:25:54,950
JTAG it doesn't allow you to do that

473
00:25:54,950 --> 00:25:57,740
like you would need like think what what

474
00:25:57,740 --> 00:26:02,260
what inter calls read and lock but so

475
00:26:02,260 --> 00:26:04,610
there are some details online that now

476
00:26:04,610 --> 00:26:06,770
available that they provide some

477
00:26:06,770 --> 00:26:09,140
information how they read unlock can be

478
00:26:09,140 --> 00:26:09,800
achieved

479
00:26:09,800 --> 00:26:12,890
so guys from positive security from

480
00:26:12,890 --> 00:26:14,900
Moscow that they do a lot of research

481
00:26:14,900 --> 00:26:19,490
and PCH and Amy and and so on they were

482
00:26:19,490 --> 00:26:21,260
able to enable read unlock which is

483
00:26:21,260 --> 00:26:24,380
basically factory unlock but there is no

484
00:26:24,380 --> 00:26:26,780
software available like even if you

485
00:26:26,780 --> 00:26:27,800
haven't you to know how to talk to the

486
00:26:27,800 --> 00:26:31,400
CPU because there is no information so

487
00:26:31,400 --> 00:26:35,110
and then did that's it thank you

488
00:26:35,110 --> 00:26:41,110
[Applause]

489
00:26:41,110 --> 00:26:46,730
and as always if you have questions well

490
00:26:46,730 --> 00:26:49,310
it will be in the courtyard in a couple

491
00:26:49,310 --> 00:26:51,399
minutes

492
00:27:03,300 --> 00:27:06,399
[Music]

