1
00:00:00,030 --> 00:00:02,520
to introduce Carl to the stage he's a

2
00:00:02,520 --> 00:00:04,589
researcher up at u-dub he's been a

3
00:00:04,589 --> 00:00:06,359
friend of ours for a long time spoken in

4
00:00:06,359 --> 00:00:08,370
a couple of tour cons so please welcome

5
00:00:08,370 --> 00:00:11,309
him to the torque on stage all right

6
00:00:11,309 --> 00:00:15,690
thank you so today I'm going to talk

7
00:00:15,690 --> 00:00:17,369
about a third party service I built

8
00:00:17,369 --> 00:00:20,520
called TLS my net which allows you to

9
00:00:20,520 --> 00:00:23,330
enable HTTPS for home network devices

10
00:00:23,330 --> 00:00:25,439
through the stander let's encrypt

11
00:00:25,439 --> 00:00:28,500
service and this sound this might sound

12
00:00:28,500 --> 00:00:32,989
to you like a pretty uninteresting talk

13
00:00:32,989 --> 00:00:35,850
it's like okay it's how how you use

14
00:00:35,850 --> 00:00:37,879
let's encrypt blah blah blah but there's

15
00:00:37,879 --> 00:00:42,059
actually a bunch of issues in particular

16
00:00:42,059 --> 00:00:44,280
with local network devices that make it

17
00:00:44,280 --> 00:00:46,530
hard to use and also reasons why you

18
00:00:46,530 --> 00:00:49,680
might want to use HTTPS or TLS on your

19
00:00:49,680 --> 00:00:54,180
on your home network so a question that

20
00:00:54,180 --> 00:00:57,210
I get let's see let me start this here

21
00:00:57,210 --> 00:01:00,329
okay so a question that I get commonly

22
00:01:00,329 --> 00:01:02,910
asked is all right so why do you need

23
00:01:02,910 --> 00:01:05,459
TLS on your home network you already

24
00:01:05,459 --> 00:01:08,939
have wpa wpa2 on your wireless network

25
00:01:08,939 --> 00:01:12,240
isn't that enough encryption for you so

26
00:01:12,240 --> 00:01:14,340
it turns out that browsers are starting

27
00:01:14,340 --> 00:01:18,409
to require TLS for what they consider

28
00:01:18,409 --> 00:01:23,820
powerful api's and so this can mean

29
00:01:23,820 --> 00:01:28,759
making you know using things like

30
00:01:28,759 --> 00:01:30,900
requesting permission to access the

31
00:01:30,900 --> 00:01:35,130
camera or the microphone or using

32
00:01:35,130 --> 00:01:39,140
certain permissions or capabilities that

33
00:01:39,140 --> 00:01:43,200
you would not want a compromised website

34
00:01:43,200 --> 00:01:47,310
to be able to have and so you might want

35
00:01:47,310 --> 00:01:49,649
to build a web app that uses these

36
00:01:49,649 --> 00:01:52,590
powerful api's but you might also want

37
00:01:52,590 --> 00:01:55,259
them to talk to local network devices

38
00:01:55,259 --> 00:01:58,020
and the problem is that you can't make

39
00:01:58,020 --> 00:02:00,930
cross-origin requests from insecure

40
00:02:00,930 --> 00:02:05,850
sites to or from HTTPS sites to http

41
00:02:05,850 --> 00:02:09,479
sites and so you really can't make these

42
00:02:09,479 --> 00:02:11,879
web apps that are these secure web apps

43
00:02:11,879 --> 00:02:12,680
that talk to

44
00:02:12,680 --> 00:02:15,709
local devices and in particular the

45
00:02:15,709 --> 00:02:17,719
issue that came up for me which caused

46
00:02:17,719 --> 00:02:20,689
me to think about this whole thing was I

47
00:02:20,689 --> 00:02:25,969
was writing an app for a chromecast that

48
00:02:25,969 --> 00:02:28,790
would talk to a local network tuner on

49
00:02:28,790 --> 00:02:33,290
your network and then show the current

50
00:02:33,290 --> 00:02:36,280
over-the-air channel on your chromecast

51
00:02:36,280 --> 00:02:39,769
so chromecast requires its applications

52
00:02:39,769 --> 00:02:45,109
to be delivered over HTTP the HD homerun

53
00:02:45,109 --> 00:02:47,379
tuner in particular does not support

54
00:02:47,379 --> 00:02:53,659
HTTP and so in fact this is impossible

55
00:02:53,659 --> 00:02:59,090
to build currently and so I was trying

56
00:02:59,090 --> 00:03:00,560
to figure out you know why doesn't it

57
00:03:00,560 --> 00:03:04,069
support HTTP how can we get them to

58
00:03:04,069 --> 00:03:07,790
support HTTPS and it turns out that

59
00:03:07,790 --> 00:03:10,370
there is a lot of issues for enabling

60
00:03:10,370 --> 00:03:15,500
TLS on on local devices so the first one

61
00:03:15,500 --> 00:03:18,139
is that these local devices are often

62
00:03:18,139 --> 00:03:21,019
discovered by IP so in the HD homerun

63
00:03:21,019 --> 00:03:24,079
case the HD homerun device actually

64
00:03:24,079 --> 00:03:26,599
connects out to their cloud service and

65
00:03:26,599 --> 00:03:29,689
says hey this is my local device when

66
00:03:29,689 --> 00:03:33,229
you want to find a HD homerun device you

67
00:03:33,229 --> 00:03:35,139
connect out to the same cloud service

68
00:03:35,139 --> 00:03:37,699
and since your Ngata through the same ip

69
00:03:37,699 --> 00:03:41,359
it can say what the local IP addresses

70
00:03:41,359 --> 00:03:46,220
are of the devices on the same sort of

71
00:03:46,220 --> 00:03:49,370
NetID external IPs and so you can

72
00:03:49,370 --> 00:03:51,189
discover internal devices that way

73
00:03:51,189 --> 00:03:53,900
there's a bunch of other different ways

74
00:03:53,900 --> 00:03:56,780
of discovering local devices by IP

75
00:03:56,780 --> 00:03:59,659
address but in general you only have an

76
00:03:59,659 --> 00:04:01,269
IP address and not a host name and

77
00:04:01,269 --> 00:04:05,000
certificates are generally issued for

78
00:04:05,000 --> 00:04:07,129
host names right now and they're

79
00:04:07,129 --> 00:04:11,019
certainly not going to be issued for

80
00:04:11,019 --> 00:04:15,979
internal IP addresses so you might

81
00:04:15,979 --> 00:04:19,940
propose solving the solution by just

82
00:04:19,940 --> 00:04:22,580
issuing a certificate that is common

83
00:04:22,580 --> 00:04:24,529
across all devices so let's say all

84
00:04:24,529 --> 00:04:25,620
these tuners

85
00:04:25,620 --> 00:04:28,110
of one common certificate and you

86
00:04:28,110 --> 00:04:31,040
connect to that unfortunately this is

87
00:04:31,040 --> 00:04:34,169
easily abused so you might remember the

88
00:04:34,169 --> 00:04:37,350
superfish finesse Co from several years

89
00:04:37,350 --> 00:04:42,210
ago on lenovo laptops where basically

90
00:04:42,210 --> 00:04:46,710
there was one static public/private key

91
00:04:46,710 --> 00:04:49,020
pair that was shipped and once you have

92
00:04:49,020 --> 00:04:51,860
the private key then you can impersonate

93
00:04:51,860 --> 00:04:56,130
the service or the cert to any other

94
00:04:56,130 --> 00:04:57,930
device that that trusts that public key

95
00:04:57,930 --> 00:05:01,710
and similarly even if you were to create

96
00:05:01,710 --> 00:05:06,620
a unique cert for each device some

97
00:05:06,620 --> 00:05:10,410
manufacturers like to use a constant

98
00:05:10,410 --> 00:05:13,199
host name for each device so you might

99
00:05:13,199 --> 00:05:17,820
have like a router login comm for

100
00:05:17,820 --> 00:05:20,160
example and each device might have its

101
00:05:20,160 --> 00:05:22,620
own certificate for a router login comm

102
00:05:22,620 --> 00:05:25,830
and the problem there is that if you

103
00:05:25,830 --> 00:05:27,780
have one device where router log and

104
00:05:27,780 --> 00:05:30,240
comm then you can impersonate router

105
00:05:30,240 --> 00:05:32,610
login on a different network with a

106
00:05:32,610 --> 00:05:38,700
different device and it's one of the one

107
00:05:38,700 --> 00:05:41,070
of the issues of like using let's

108
00:05:41,070 --> 00:05:43,410
encrypt to sort of solve this by

109
00:05:43,410 --> 00:05:45,060
automatically creating these

110
00:05:45,060 --> 00:05:48,060
certificates locally is that end-users

111
00:05:48,060 --> 00:05:49,950
typically don't have their own domain

112
00:05:49,950 --> 00:05:53,490
name and even if they do these local

113
00:05:53,490 --> 00:05:55,789
devices usually aren't externally facing

114
00:05:55,789 --> 00:05:58,580
or they're not passed through the

115
00:05:58,580 --> 00:06:03,210
forwarded through the net so standard

116
00:06:03,210 --> 00:06:05,039
tools like let's encrypt and the

117
00:06:05,039 --> 00:06:07,260
standard cert but doesn't really work

118
00:06:07,260 --> 00:06:10,080
for creating the certificates for these

119
00:06:10,080 --> 00:06:12,449
devices but it turns out that there is

120
00:06:12,449 --> 00:06:14,789
one company that has actually solved

121
00:06:14,789 --> 00:06:17,720
this issue and that company is Plex and

122
00:06:17,720 --> 00:06:21,599
so here's how Plex has solved it and by

123
00:06:21,599 --> 00:06:23,190
the way if you're not familiar with plex

124
00:06:23,190 --> 00:06:26,460
Plex is basically your own private

125
00:06:26,460 --> 00:06:29,580
Netflix so you set up your own plex

126
00:06:29,580 --> 00:06:32,220
server you you load your own media onto

127
00:06:32,220 --> 00:06:35,520
it and then you can give access to it to

128
00:06:35,520 --> 00:06:37,560
your friends and they can access it

129
00:06:37,560 --> 00:06:39,480
remotely over the Internet and

130
00:06:39,480 --> 00:06:41,700
locally on your network and it's all

131
00:06:41,700 --> 00:06:45,360
secured by HTTPS and TLS and they've

132
00:06:45,360 --> 00:06:47,580
basically figured this out and made it

133
00:06:47,580 --> 00:06:50,970
work so here's how they did that each

134
00:06:50,970 --> 00:06:54,180
server has a 16 byte gooood and they

135
00:06:54,180 --> 00:06:58,170
issue a wildcard certificate to your

136
00:06:58,170 --> 00:06:59,910
server for that gooood

137
00:06:59,910 --> 00:07:03,030
dot plex dot direct and then when you

138
00:07:03,030 --> 00:07:04,980
want to connect to a plex server by p

139
00:07:04,980 --> 00:07:08,550
address you go to that IP address dot

140
00:07:08,550 --> 00:07:11,820
the server gooood dot plex dot direct

141
00:07:11,820 --> 00:07:15,240
and then in the background they will

142
00:07:15,240 --> 00:07:18,270
they have a DNS server that resolves

143
00:07:18,270 --> 00:07:20,760
that IP address go add up let's talk

144
00:07:20,760 --> 00:07:23,790
direct to just that IP address and this

145
00:07:23,790 --> 00:07:27,200
allows for dynamic IP addresses both

146
00:07:27,200 --> 00:07:30,780
exposed through nets on to the internet

147
00:07:30,780 --> 00:07:35,280
and also for local IPS so it'd be nice

148
00:07:35,280 --> 00:07:39,300
to use a plexus solution just off the

149
00:07:39,300 --> 00:07:43,440
shelf as it is unfortunately the way

150
00:07:43,440 --> 00:07:45,540
that they actually implemented this is

151
00:07:45,540 --> 00:07:48,840
they partnered with a certificate

152
00:07:48,840 --> 00:07:51,200
authority to issue these certificates

153
00:07:51,200 --> 00:07:53,760
and they I believe they ended up

154
00:07:53,760 --> 00:07:55,290
actually paying some money to the

155
00:07:55,290 --> 00:07:57,360
certificate authority to make this work

156
00:07:57,360 --> 00:08:00,450
and most IOT vendors aren't going to

157
00:08:00,450 --> 00:08:02,370
spend any amount of money to increase

158
00:08:02,370 --> 00:08:04,830
security whatsoever and so I thought

159
00:08:04,830 --> 00:08:07,410
well hmm can we sort of emulate this

160
00:08:07,410 --> 00:08:09,450
with let's encrypt and well this is what

161
00:08:09,450 --> 00:08:13,050
that talk is about so before I get into

162
00:08:13,050 --> 00:08:15,420
the details about how we make this work

163
00:08:15,420 --> 00:08:18,240
oh quickly mention how let's encrypt

164
00:08:18,240 --> 00:08:21,120
issue certificates it uses this protocol

165
00:08:21,120 --> 00:08:22,890
called the automated certificate

166
00:08:22,890 --> 00:08:25,140
management environment called Acme

167
00:08:25,140 --> 00:08:28,350
protocol and this is implemented by cert

168
00:08:28,350 --> 00:08:31,230
bots and they're a CA side software

169
00:08:31,230 --> 00:08:33,750
called Boulder along with some

170
00:08:33,750 --> 00:08:36,630
third-party clients as well and it

171
00:08:36,630 --> 00:08:38,400
basically does automate a domain

172
00:08:38,400 --> 00:08:40,770
validation so these are only domain

173
00:08:40,770 --> 00:08:44,250
validated certificates and the way that

174
00:08:44,250 --> 00:08:46,500
this works is that the CA issues

175
00:08:46,500 --> 00:08:49,740
challenges to prove that you have

176
00:08:49,740 --> 00:08:51,750
control over the domain that you claim

177
00:08:51,750 --> 00:08:52,680
you have control

178
00:08:52,680 --> 00:08:56,130
/ and so there's two main challenges

179
00:08:56,130 --> 00:08:58,920
that are used right now there are some

180
00:08:58,920 --> 00:09:00,540
that used to exist and some that are

181
00:09:00,540 --> 00:09:02,460
coming later but the main two challenges

182
00:09:02,460 --> 00:09:05,420
right now are HTTP oh one which is

183
00:09:05,420 --> 00:09:07,770
please create a file at this specific

184
00:09:07,770 --> 00:09:11,070
URL with specific contents and the

185
00:09:11,070 --> 00:09:13,940
second one is please add a txt record

186
00:09:13,940 --> 00:09:16,020
with specific

187
00:09:16,020 --> 00:09:19,920
specific contents on to this domain and

188
00:09:19,920 --> 00:09:22,260
the DNS so one challenge is the only way

189
00:09:22,260 --> 00:09:23,910
that you can actually get wildcard

190
00:09:23,910 --> 00:09:29,360
certificates so let's encrypt has this

191
00:09:29,360 --> 00:09:32,760
idea of accounts and accounts are

192
00:09:32,760 --> 00:09:35,370
basically tied to a private public

193
00:09:35,370 --> 00:09:38,000
private key pair and the public key is

194
00:09:38,000 --> 00:09:40,830
essentially your account ID now for

195
00:09:40,830 --> 00:09:43,230
performance reasons they actually have a

196
00:09:43,230 --> 00:09:47,040
integer account ID but basically you can

197
00:09:47,040 --> 00:09:49,970
go from a public key to your account ID

198
00:09:49,970 --> 00:09:53,940
and then the if you want to renew your

199
00:09:53,940 --> 00:09:57,900
certificate or do anything else with

200
00:09:57,900 --> 00:10:00,750
your account basically you just re sign

201
00:10:00,750 --> 00:10:03,120
these requests with your public key

202
00:10:03,120 --> 00:10:05,040
saying hey that account that I

203
00:10:05,040 --> 00:10:07,740
registered with the key that I created

204
00:10:07,740 --> 00:10:10,589
before on the same person so let me

205
00:10:10,589 --> 00:10:14,430
please do this again so the solution

206
00:10:14,430 --> 00:10:16,230
that I'm proposing here is a service

207
00:10:16,230 --> 00:10:19,470
called TLS my nut which lets you issue a

208
00:10:19,470 --> 00:10:23,100
wild-card search for subdomains where

209
00:10:23,100 --> 00:10:26,250
the sub domain name is Thai tier let's

210
00:10:26,250 --> 00:10:26,790
encount

211
00:10:26,790 --> 00:10:32,640
public key and so tying the the account

212
00:10:32,640 --> 00:10:34,529
or the sub domain name to your account

213
00:10:34,529 --> 00:10:37,800
key lets you verify the legitimacy of

214
00:10:37,800 --> 00:10:40,290
the certificate at an application level

215
00:10:40,290 --> 00:10:44,279
we can't guarantee that say if you go to

216
00:10:44,279 --> 00:10:49,140
any TLS - a site that it will be your

217
00:10:49,140 --> 00:10:51,300
server that you're talking to but if you

218
00:10:51,300 --> 00:10:57,270
go to your certificate a public key

219
00:10:57,270 --> 00:11:01,680
fingerprint dot TLS myNet then you are

220
00:11:01,680 --> 00:11:04,470
talking to one of your machines and so

221
00:11:04,470 --> 00:11:05,850
the way that we're going to use this is

222
00:11:05,850 --> 00:11:06,540
we're going to

223
00:11:06,540 --> 00:11:09,990
use a let's encrypt insert bot as normal

224
00:11:09,990 --> 00:11:12,949
but we're going to prove ownership of

225
00:11:12,949 --> 00:11:17,850
the private key of your let's encrypt

226
00:11:17,850 --> 00:11:21,420
account to a third party domain for sub

227
00:11:21,420 --> 00:11:23,519
domain validation through a text record

228
00:11:23,519 --> 00:11:27,870
and this is what TLS minot does so the

229
00:11:27,870 --> 00:11:29,610
way that this works is a device

230
00:11:29,610 --> 00:11:31,860
initiates a sub domain wildcard

231
00:11:31,860 --> 00:11:33,870
certificate request to let's encrypt

232
00:11:33,870 --> 00:11:37,410
through sir pot the device since this

233
00:11:37,410 --> 00:11:40,740
challenge requested and then so when it

234
00:11:40,740 --> 00:11:43,139
contacts let's encrypt let's encrypt

235
00:11:43,139 --> 00:11:46,139
responds back with a challenge to say

236
00:11:46,139 --> 00:11:48,329
please prove ownership of this or

237
00:11:48,329 --> 00:11:52,050
control of this sub domain so then the

238
00:11:52,050 --> 00:11:54,420
device sends this challenge request back

239
00:11:54,420 --> 00:11:57,600
to TLS my net and this request is signed

240
00:11:57,600 --> 00:12:00,589
with the same let's encrypt private key

241
00:12:00,589 --> 00:12:06,449
using jws and the thumbprint of the

242
00:12:06,449 --> 00:12:08,760
public or the corresponding public key

243
00:12:08,760 --> 00:12:12,209
is used as the sub domain of TLS my net

244
00:12:12,209 --> 00:12:15,860
my nuts so you can't actually request

245
00:12:15,860 --> 00:12:19,829
certs for a different account and the

246
00:12:19,829 --> 00:12:21,480
way that this works is it's just a base

247
00:12:21,480 --> 00:12:25,440
36 encoding of a to sha-256 hash of a

248
00:12:25,440 --> 00:12:29,750
particular way of hashing public keys

249
00:12:29,750 --> 00:12:34,199
and so there are a couple of ways so the

250
00:12:34,199 --> 00:12:36,089
way that this ends up being implemented

251
00:12:36,089 --> 00:12:39,660
is with a couple of Python scripts so

252
00:12:39,660 --> 00:12:43,500
there's a DNS server pi which resolves a

253
00:12:43,500 --> 00:12:47,069
dot B dot C D thumbprint TLS my dotnet

254
00:12:47,069 --> 00:12:51,600
to a dot B dot C D and this allows you

255
00:12:51,600 --> 00:12:55,019
to basically use a host name instead of

256
00:12:55,019 --> 00:12:56,670
an IP address and because it's a

257
00:12:56,670 --> 00:13:01,019
wildcard certificate the TLS stack will

258
00:13:01,019 --> 00:13:03,810
accept that as a match and say that the

259
00:13:03,810 --> 00:13:06,510
certificate works the second thing that

260
00:13:06,510 --> 00:13:09,120
it does is it provides these text

261
00:13:09,120 --> 00:13:13,260
records for sub domain verification so

262
00:13:13,260 --> 00:13:16,410
when you send a challenge to us we will

263
00:13:16,410 --> 00:13:19,130
add a text record for

264
00:13:19,130 --> 00:13:22,670
thumbprint TLS my net so that we can get

265
00:13:22,670 --> 00:13:27,920
a wild card sir for that and the way

266
00:13:27,920 --> 00:13:30,769
that you submit these requests or these

267
00:13:30,769 --> 00:13:33,410
challenge requests to us is through this

268
00:13:33,410 --> 00:13:36,259
web server which is just another Python

269
00:13:36,259 --> 00:13:39,500
script which handles these requests for

270
00:13:39,500 --> 00:13:41,630
creating these text records it's

271
00:13:41,630 --> 00:13:44,990
implemented with a sync io a io HTTP +

272
00:13:44,990 --> 00:13:51,199
JW crypto modules and we also have a

273
00:13:51,199 --> 00:13:53,690
Redis server that sort of connects the

274
00:13:53,690 --> 00:13:55,910
the two scripts together so when we

275
00:13:55,910 --> 00:13:58,069
receive a valid request through the web

276
00:13:58,069 --> 00:14:01,089
server we create a temporary text record

277
00:14:01,089 --> 00:14:04,819
in this Redis store that the DNS server

278
00:14:04,819 --> 00:14:07,160
can then access and the nice thing about

279
00:14:07,160 --> 00:14:09,410
this is that this can be completely

280
00:14:09,410 --> 00:14:12,970
stateless because you are proving

281
00:14:12,970 --> 00:14:16,250
control over a particular or a

282
00:14:16,250 --> 00:14:19,569
particular public key by proving

283
00:14:19,569 --> 00:14:21,980
knowledge of the corresponding private

284
00:14:21,980 --> 00:14:25,760
key we don't actually have to create any

285
00:14:25,760 --> 00:14:30,470
accounts for you we just know that you

286
00:14:30,470 --> 00:14:36,470
are you have control over the subdomain

287
00:14:36,470 --> 00:14:39,649
that corresponds to the hash of your

288
00:14:39,649 --> 00:14:43,480
let's encrypt account ID and so

289
00:14:43,480 --> 00:14:45,709
basically we don't have to do any

290
00:14:45,709 --> 00:14:51,589
long-term state storage so it makes it

291
00:14:51,589 --> 00:14:55,519
very lightweight to to run on the client

292
00:14:55,519 --> 00:14:57,310
side there are two more Python scripts

293
00:14:57,310 --> 00:15:00,860
so one is called get domain which

294
00:15:00,860 --> 00:15:03,260
basically just looks at your let's

295
00:15:03,260 --> 00:15:05,959
encrypt config files and comes up with a

296
00:15:05,959 --> 00:15:08,720
particular domain name that you will use

297
00:15:08,720 --> 00:15:11,480
or that you will request and then

298
00:15:11,480 --> 00:15:15,740
there's also a retrieve challenge Python

299
00:15:15,740 --> 00:15:19,490
script which is designed specifically to

300
00:15:19,490 --> 00:15:21,920
work with cert BOTS as a manual

301
00:15:21,920 --> 00:15:25,069
indication hook and it communicates your

302
00:15:25,069 --> 00:15:27,709
environment variables it receives the

303
00:15:27,709 --> 00:15:30,500
particular so it receives the domain

304
00:15:30,500 --> 00:15:32,540
that you want to authenticate for it

305
00:15:32,540 --> 00:15:34,579
receives the challenge token that let's

306
00:15:34,579 --> 00:15:36,920
encrypt gives you that you need to add

307
00:15:36,920 --> 00:15:40,519
it as the text record and then it takes

308
00:15:40,519 --> 00:15:43,329
those and uses your let's encrypt

309
00:15:43,329 --> 00:15:45,920
account private key to sign those and

310
00:15:45,920 --> 00:15:51,769
send that off to TLS Minet and I don't

311
00:15:51,769 --> 00:15:54,529
see anyone out with their laptops I'll

312
00:15:54,529 --> 00:15:56,899
say you can follow along if you want but

313
00:15:56,899 --> 00:15:58,610
you know it's probably too late but if

314
00:15:58,610 --> 00:16:00,740
you want to try this later you can just

315
00:16:00,740 --> 00:16:04,819
go to TLS Minet and that will redirect

316
00:16:04,819 --> 00:16:07,809
you to my github repo just to read the

317
00:16:07,809 --> 00:16:10,399
instructions and the readme and it's

318
00:16:10,399 --> 00:16:13,250
basically as simple as this so you set

319
00:16:13,250 --> 00:16:15,410
up this environment by basically cloning

320
00:16:15,410 --> 00:16:20,839
my repo and setting up a local directory

321
00:16:20,839 --> 00:16:23,389
for your let's encrypt account

322
00:16:23,389 --> 00:16:25,579
information so you don't have to be root

323
00:16:25,579 --> 00:16:29,329
or anything you'll create a let's

324
00:16:29,329 --> 00:16:31,370
encrypt and count yourself so it will

325
00:16:31,370 --> 00:16:32,750
automatically generate this

326
00:16:32,750 --> 00:16:35,300
public-private key locally and store it

327
00:16:35,300 --> 00:16:41,420
in your home directory there is you need

328
00:16:41,420 --> 00:16:46,459
to tell this these scripts what account

329
00:16:46,459 --> 00:16:49,069
private key you want to use to sign all

330
00:16:49,069 --> 00:16:52,010
of these challenges and assuming you

331
00:16:52,010 --> 00:16:54,199
only have one account you can just use

332
00:16:54,199 --> 00:16:58,339
this simple shell script one-liner to

333
00:16:58,339 --> 00:17:01,639
say hey just give me the the first

334
00:17:01,639 --> 00:17:04,040
private key file that you find when this

335
00:17:04,040 --> 00:17:05,929
let's encrypt home directory and then

336
00:17:05,929 --> 00:17:08,720
you run Serpa with this mess here which

337
00:17:08,720 --> 00:17:11,169
basically says use the let's encrypt

338
00:17:11,169 --> 00:17:14,240
configuration in my home directory I

339
00:17:14,240 --> 00:17:17,689
want to only request a certificate not

340
00:17:17,689 --> 00:17:20,000
reconfigure the server do anything I

341
00:17:20,000 --> 00:17:22,010
want to do it manually but the way that

342
00:17:22,010 --> 00:17:25,240
I want to do it manually is to use this

343
00:17:25,240 --> 00:17:29,330
this manual authentication hook script

344
00:17:29,330 --> 00:17:32,450
and then the domain I'm going to get

345
00:17:32,450 --> 00:17:36,919
from another Python script and so I did

346
00:17:36,919 --> 00:17:38,990
this on the plane last night and it

347
00:17:38,990 --> 00:17:41,510
still works so hooray for that

348
00:17:41,510 --> 00:17:44,030
so if all works well you should get your

349
00:17:44,030 --> 00:17:47,330
new certificates in some files in your

350
00:17:47,330 --> 00:17:49,669
home directory and let's encrypt slash

351
00:17:49,669 --> 00:17:55,309
live slash your thumbprint TLS my net so

352
00:17:55,309 --> 00:17:57,559
then you can take those certificate and

353
00:17:57,559 --> 00:17:59,510
your private key files and you can copy

354
00:17:59,510 --> 00:18:03,320
those to your home network devices and

355
00:18:03,320 --> 00:18:05,690
then basically you're done now they're

356
00:18:05,690 --> 00:18:08,179
only good for Val they're only valid for

357
00:18:08,179 --> 00:18:11,539
90 days so don't forget to update those

358
00:18:11,539 --> 00:18:15,470
every 90 days or so so briefly I'm going

359
00:18:15,470 --> 00:18:16,970
to talk about sort of the risk model

360
00:18:16,970 --> 00:18:20,110
here because you might be thinking well

361
00:18:20,110 --> 00:18:24,230
now you can like this guy up here can

362
00:18:24,230 --> 00:18:26,510
now impersonate anything and that is

363
00:18:26,510 --> 00:18:33,080
true so basically the the third-party

364
00:18:33,080 --> 00:18:35,750
domain service TLS might net and this

365
00:18:35,750 --> 00:18:37,610
particular example is assumed to be

366
00:18:37,610 --> 00:18:39,470
trusted because they can always issue

367
00:18:39,470 --> 00:18:43,159
certs for your sub domain but sort of

368
00:18:43,159 --> 00:18:45,169
the way that I envision this going

369
00:18:45,169 --> 00:18:48,500
forward in several instances is that

370
00:18:48,500 --> 00:18:50,960
sort of each device manufacturer might

371
00:18:50,960 --> 00:18:54,140
have their own domain that they use for

372
00:18:54,140 --> 00:18:56,179
this and you sort of trust that

373
00:18:56,179 --> 00:19:00,530
manufacturer anyway so maybe you should

374
00:19:00,530 --> 00:19:03,679
trust them I don't know but even if you

375
00:19:03,679 --> 00:19:05,690
don't there's this cool feature called a

376
00:19:05,690 --> 00:19:09,620
certificate transparency where you can

377
00:19:09,620 --> 00:19:11,270
search these certificate transparency

378
00:19:11,270 --> 00:19:17,049
logs to ensure that no certs have been

379
00:19:17,049 --> 00:19:21,380
issued for your sub domain that you

380
00:19:21,380 --> 00:19:26,080
weren't aware of so for example this is

381
00:19:26,080 --> 00:19:30,049
my home network sub domain here I

382
00:19:30,049 --> 00:19:34,280
searched for it on CR T SH and it shows

383
00:19:34,280 --> 00:19:37,010
that it's been issued twice once in

384
00:19:37,010 --> 00:19:39,080
September and once you know on the plane

385
00:19:39,080 --> 00:19:41,570
last night and then you can go in there

386
00:19:41,570 --> 00:19:44,419
and see if it's been revoked and further

387
00:19:44,419 --> 00:19:46,610
down you can check that the public key

388
00:19:46,610 --> 00:19:49,399
matches what you expect it to be not the

389
00:19:49,399 --> 00:19:53,220
hash matches and every

390
00:19:53,220 --> 00:19:57,510
is good and kosher so right now TOS my

391
00:19:57,510 --> 00:20:00,710
net is sort of a public service it's

392
00:20:00,710 --> 00:20:03,299
it's not getting a whole lot of use at

393
00:20:03,299 --> 00:20:05,789
the moment it's currently limited to 50

394
00:20:05,789 --> 00:20:08,370
certificates per week because let's

395
00:20:08,370 --> 00:20:10,860
encrypt assumes that I have control over

396
00:20:10,860 --> 00:20:14,700
the whole TLS my net domain so if I'm

397
00:20:14,700 --> 00:20:16,860
getting all these certificates why don't

398
00:20:16,860 --> 00:20:18,630
I just get a wildcard certificate for

399
00:20:18,630 --> 00:20:19,320
the whole thing

400
00:20:19,320 --> 00:20:21,809
however I've engaged them on the the

401
00:20:21,809 --> 00:20:24,360
forums and they said yes this is

402
00:20:24,360 --> 00:20:26,130
actually a legitimate use of let's

403
00:20:26,130 --> 00:20:30,929
encrypt and so like if usage gets up to

404
00:20:30,929 --> 00:20:33,480
the point where rate limits become an

405
00:20:33,480 --> 00:20:36,260
issue we can probably whitelist that or

406
00:20:36,260 --> 00:20:39,870
add you to the public suffix list with

407
00:20:39,870 --> 00:20:42,270
things like that ultimately I would like

408
00:20:42,270 --> 00:20:46,169
to see let's encrypt do some sort of

409
00:20:46,169 --> 00:20:49,140
version of this natively and maybe this

410
00:20:49,140 --> 00:20:52,559
will problem in into that sort of

411
00:20:52,559 --> 00:20:55,110
direction but for now I sort of see this

412
00:20:55,110 --> 00:20:57,240
as a proof of concept service to

413
00:20:57,240 --> 00:21:00,780
encourage TLS adoption and it makes it

414
00:21:00,780 --> 00:21:04,080
really easy so please bug your IOT

415
00:21:04,080 --> 00:21:07,860
vendors too to support TLS because it's

416
00:21:07,860 --> 00:21:10,110
becoming increasingly important to

417
00:21:10,110 --> 00:21:12,419
support

418
00:21:12,419 --> 00:21:16,140
so in summary going forward TLS support

419
00:21:16,140 --> 00:21:18,630
is essential for all these innovative

420
00:21:18,630 --> 00:21:20,909
web applications but there are a bunch

421
00:21:20,909 --> 00:21:23,070
of problems that make getting TLS

422
00:21:23,070 --> 00:21:25,020
certificates for local network devices

423
00:21:25,020 --> 00:21:29,360
difficult but I have presented a

424
00:21:29,360 --> 00:21:33,390
proposal for a service where we can

425
00:21:33,390 --> 00:21:37,080
easily enable TLS on these devices using

426
00:21:37,080 --> 00:21:39,630
wild card certs and let's encrypt and

427
00:21:39,630 --> 00:21:42,059
this third party service so with that I

428
00:21:42,059 --> 00:21:44,190
thank you for your attention and I will

429
00:21:44,190 --> 00:21:47,690
take questions out on the bier Garten

430
00:21:47,870 --> 00:21:59,030
Oh Annette's lunch

431
00:21:59,030 --> 00:22:02,069
[Music]

432
00:22:06,659 --> 00:22:09,749
sagat's lunch everybody uh be back here

433
00:22:09,749 --> 00:22:14,340
two o'clock for Pookie bear is talk real

434
00:22:14,340 --> 00:22:18,359
life dev sec ops you can also go outside

435
00:22:18,359 --> 00:22:21,119
and grab a some food truck or you should

436
00:22:21,119 --> 00:22:22,739
have some time to go to the mainland and

437
00:22:22,739 --> 00:22:25,849
get some food

