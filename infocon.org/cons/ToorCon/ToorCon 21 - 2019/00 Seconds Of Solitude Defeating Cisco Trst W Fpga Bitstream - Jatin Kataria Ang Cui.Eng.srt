1
00:00:01,669 --> 00:00:03,360
all right we're gonna get started

2
00:00:03,360 --> 00:00:05,869
shortly

3
00:00:12,580 --> 00:00:16,030
all right it is now time for the final

4
00:00:16,030 --> 00:00:21,100
talk of torque on 21 please welcome to

5
00:00:21,100 --> 00:00:23,290
the stage Hutton who's going to talk

6
00:00:23,290 --> 00:00:26,230
about a really awesome way of owning

7
00:00:26,230 --> 00:00:30,119
Cisco devices hi

8
00:00:30,119 --> 00:00:32,680
please let me know if I am not here

9
00:00:32,680 --> 00:00:35,170
you cannot hear me because when I was

10
00:00:35,170 --> 00:00:36,880
sitting back it was very difficult to

11
00:00:36,880 --> 00:00:40,840
understand the talk so I'm Justin

12
00:00:40,840 --> 00:00:41,980
Catania

13
00:00:41,980 --> 00:00:44,129
I'm the principal scientist and

14
00:00:44,129 --> 00:00:46,180
architect offer defensive technologies

15
00:00:46,180 --> 00:00:49,690
at red balloon security and I'm gonna

16
00:00:49,690 --> 00:00:51,940
talk about defeating Cisco trust anchor

17
00:00:51,940 --> 00:00:55,239
a case study of recent advancement and I

18
00:00:55,239 --> 00:00:57,250
haven't put Rick who's the second author

19
00:00:57,250 --> 00:01:02,160
in this talk but he's here and and

20
00:01:02,160 --> 00:01:04,330
anchoring join today

21
00:01:04,330 --> 00:01:07,600
so I'm gonna start like in this project

22
00:01:07,600 --> 00:01:09,550
who would the cost who would the

23
00:01:09,550 --> 00:01:11,740
characters who help me or actually

24
00:01:11,740 --> 00:01:15,490
together we did this work myself

25
00:01:15,490 --> 00:01:18,250
Rick Housley who presented I was a great

26
00:01:18,250 --> 00:01:21,960
talk Joey

27
00:01:22,110 --> 00:01:26,320
James and Brian he is the most important

28
00:01:26,320 --> 00:01:29,650
part in this whole talk so it all

29
00:01:29,650 --> 00:01:31,930
started when we start thinking about

30
00:01:31,930 --> 00:01:35,230
like running you know hacking up ASR

31
00:01:35,230 --> 00:01:39,340
1001 because we just wanted to and we

32
00:01:39,340 --> 00:01:42,460
found out that it was end of life but

33
00:01:42,460 --> 00:01:44,830
and Cisco release in 2013

34
00:01:44,830 --> 00:01:47,830
airs are 1001 X they both looked the

35
00:01:47,830 --> 00:01:51,100
same so it didn't matter and we just

36
00:01:51,100 --> 00:01:55,210
bought it and the main objective of the

37
00:01:55,210 --> 00:01:57,400
start of this whole research was to run

38
00:01:57,400 --> 00:02:01,900
our software and during this research we

39
00:02:01,900 --> 00:02:05,380
found a trust anchor1

40
00:02:05,380 --> 00:02:07,570
trust anchor vulnerability because when

41
00:02:07,570 --> 00:02:09,250
we worked on we have been working on

42
00:02:09,250 --> 00:02:10,780
Cisco routers for the last 10 years and

43
00:02:10,780 --> 00:02:13,569
it hasn't been that difficult to run

44
00:02:13,569 --> 00:02:16,330
code on it you basically we're not

45
00:02:16,330 --> 00:02:17,739
looking for vulnerabilities all we

46
00:02:17,739 --> 00:02:21,580
wanted was to run our software on it and

47
00:02:21,580 --> 00:02:25,109
then we found out that in 2013

48
00:02:25,109 --> 00:02:27,950
Cisco implemented this proprietary

49
00:02:27,950 --> 00:02:30,959
bootloader verification basically their

50
00:02:30,959 --> 00:02:33,180
own propriety secure boot based on FPGAs

51
00:02:33,180 --> 00:02:37,200
and you know and this is the CV for that

52
00:02:37,200 --> 00:02:40,290
and first I want to start with the

53
00:02:40,290 --> 00:02:43,409
impact of this vulnerability so when we

54
00:02:43,409 --> 00:02:45,359
were working on it we thought that you

55
00:02:45,359 --> 00:02:47,879
know will be only impacting 1000 series

56
00:02:47,879 --> 00:02:53,370
right and it would be just that but we

57
00:02:53,370 --> 00:02:57,419
impacted 909 twenty sixty eight hundred

58
00:02:57,419 --> 00:03:02,209
ninety-five hundred ninety eight hundred

59
00:03:02,209 --> 00:03:05,609
more oh wow

60
00:03:05,609 --> 00:03:08,730
there is no there Oh three thousand wait

61
00:03:08,730 --> 00:03:13,469
for it then there are si then there is

62
00:03:13,469 --> 00:03:16,680
ninety seven hundred and then or

63
00:03:16,680 --> 00:03:18,480
recently they updated this this is

64
00:03:18,480 --> 00:03:20,099
actually there's a security appliances

65
00:03:20,099 --> 00:03:22,919
and I don't want to say it but they did

66
00:03:22,919 --> 00:03:27,449
not release this before so you know

67
00:03:27,449 --> 00:03:29,849
given that we thought you know like it's

68
00:03:29,849 --> 00:03:32,400
a we have affected so many products now

69
00:03:32,400 --> 00:03:33,479
it's around hundred and forty or

70
00:03:33,479 --> 00:03:37,079
something so it Cisco you know becoming

71
00:03:37,079 --> 00:03:38,729
like running around sixty percent of the

72
00:03:38,729 --> 00:03:40,590
internet the world's Internet

73
00:03:40,590 --> 00:03:44,759
obviously not somewhere but no the novel

74
00:03:44,759 --> 00:03:47,189
technique which we are proposing doesn't

75
00:03:47,189 --> 00:03:48,750
just affect routing infrastructure it

76
00:03:48,750 --> 00:03:51,269
also affects weapons systems ADA systems

77
00:03:51,269 --> 00:03:56,040
and automotive medical ICS so what is

78
00:03:56,040 --> 00:03:57,959
this right we we started with the

79
00:03:57,959 --> 00:04:00,239
hardware analysis and which requires a

80
00:04:00,239 --> 00:04:03,479
great help that if you look at this

81
00:04:03,479 --> 00:04:05,519
diagram right B represent the a

82
00:04:05,519 --> 00:04:08,219
represents where the firmware of the

83
00:04:08,219 --> 00:04:11,009
system is stored right to spi flash is

84
00:04:11,009 --> 00:04:13,739
basically like your motherboard sees an

85
00:04:13,739 --> 00:04:17,488
intellect city six core and D is the

86
00:04:17,488 --> 00:04:20,759
Southbridge B&E are more interesting so

87
00:04:20,759 --> 00:04:22,770
ease the Xilinx FPGA which we didn't

88
00:04:22,770 --> 00:04:24,090
know when we started this project like

89
00:04:24,090 --> 00:04:26,310
it was the trust anchor and B is where

90
00:04:26,310 --> 00:04:29,370
the bitstream is stored and if you look

91
00:04:29,370 --> 00:04:31,889
at the SR analysis and you guys were

92
00:04:31,889 --> 00:04:33,990
late but I was here so I know what is

93
00:04:33,990 --> 00:04:36,150
UEFI and those guys did a good job in

94
00:04:36,150 --> 00:04:37,350
the morning

95
00:04:37,350 --> 00:04:41,450
so as most probably some of you guys are

96
00:04:41,450 --> 00:04:43,920
Network admins that you guys know what

97
00:04:43,920 --> 00:04:47,040
is Rahman Rahman is a Cisco's you know

98
00:04:47,040 --> 00:04:49,470
old timey proprietary bootloader through

99
00:04:49,470 --> 00:04:52,140
which you can boot different iOS images

100
00:04:52,140 --> 00:04:56,100
what Cisco did was he started using UEFI

101
00:04:56,100 --> 00:04:57,810
I think around 2030 and when they

102
00:04:57,810 --> 00:05:00,240
shifted to this model and they

103
00:05:00,240 --> 00:05:02,130
implemented a pre ROM on which what it

104
00:05:02,130 --> 00:05:05,360
does is that it manages ROM on it also

105
00:05:05,360 --> 00:05:07,290
helps in upgrading the bootloader

106
00:05:07,290 --> 00:05:10,710
managing the bootloader and which is

107
00:05:10,710 --> 00:05:14,280
implemented as in a Pai face in the UEFI

108
00:05:14,280 --> 00:05:15,810
if you remember the chart from the

109
00:05:15,810 --> 00:05:20,730
morning and Rahman is basically the it

110
00:05:20,730 --> 00:05:22,680
validates the operating system which

111
00:05:22,680 --> 00:05:25,440
will be loaded later in this stage it

112
00:05:25,440 --> 00:05:28,710
also has a really cool memory inspection

113
00:05:28,710 --> 00:05:30,750
module which is disabled by default and

114
00:05:30,750 --> 00:05:33,540
you can you know enable I don't I don't

115
00:05:33,540 --> 00:05:36,030
know if there is any flag to do it but

116
00:05:36,030 --> 00:05:37,470
he can modify the spi and like a

117
00:05:37,470 --> 00:05:40,050
neighborhood and so what it does is that

118
00:05:40,050 --> 00:05:42,720
it boots the Linux kernel which is the

119
00:05:42,720 --> 00:05:45,690
opting system and the OS but we are

120
00:05:45,690 --> 00:05:47,730
forgetting about Cisco IOS the real iOS

121
00:05:47,730 --> 00:05:50,970
not Apple iOS what they did was they

122
00:05:50,970 --> 00:05:53,250
take they took the old iOS and

123
00:05:53,250 --> 00:05:58,020
implemented the lead in a Linux process

124
00:05:58,020 --> 00:06:00,300
and that's what cisco eyes XE is the

125
00:06:00,300 --> 00:06:03,480
latest and greatest from cisco so we

126
00:06:03,480 --> 00:06:05,400
started looking at the spi and we looked

127
00:06:05,400 --> 00:06:08,550
at it there were no hashes no certs it

128
00:06:08,550 --> 00:06:10,620
should be really because what we want to

129
00:06:10,620 --> 00:06:12,210
do is just run our software that's all

130
00:06:12,210 --> 00:06:14,250
we care about don't care to mess up with

131
00:06:14,250 --> 00:06:17,400
Cisco so we modified the UEFI and we

132
00:06:17,400 --> 00:06:18,900
disable some Pedro Arman checks and

133
00:06:18,900 --> 00:06:20,430
booted the modified one from where

134
00:06:20,430 --> 00:06:24,270
everything worked right easy-peasy done

135
00:06:24,270 --> 00:06:26,600
with the project but wait it reset it so

136
00:06:26,600 --> 00:06:30,030
why is that it exactly after 100 seconds

137
00:06:30,030 --> 00:06:33,030
there the router resets and it's shows

138
00:06:33,030 --> 00:06:35,430
like it tries three times to a boot

139
00:06:35,430 --> 00:06:37,410
itself and then you know after three

140
00:06:37,410 --> 00:06:40,320
times it drops into Ramon no idea what

141
00:06:40,320 --> 00:06:42,030
it is so then we start with some

142
00:06:42,030 --> 00:06:44,820
hypothesis like you know into has some

143
00:06:44,820 --> 00:06:49,960
really cool modes SMM we mmm and

144
00:06:49,960 --> 00:06:52,500
so we thought like maybe it's a hyper

145
00:06:52,500 --> 00:06:55,210
hypervisor which we couldn't see in but

146
00:06:55,210 --> 00:06:57,610
we saw that the VM ml was disabled and

147
00:06:57,610 --> 00:07:00,669
all of this was able to do we were able

148
00:07:00,669 --> 00:07:02,800
to do because we had 100 seconds to run

149
00:07:02,800 --> 00:07:05,199
what I would go would be one which is

150
00:07:05,199 --> 00:07:08,560
bizarre so then we disabled the wall

151
00:07:08,560 --> 00:07:09,789
short timers we thought maybe it's

152
00:07:09,789 --> 00:07:12,759
watchdog timers then we saw that the SMM

153
00:07:12,759 --> 00:07:15,039
was actually enabled we disabled it

154
00:07:15,039 --> 00:07:17,199
pretty easy and it was a little

155
00:07:17,199 --> 00:07:21,090
resetting had no idea what's going on

156
00:07:21,090 --> 00:07:24,760
and then you know we we started with

157
00:07:24,760 --> 00:07:26,530
electromagnetic ammunition like we'd

158
00:07:26,530 --> 00:07:28,090
kinnear fill probe we wanted to know

159
00:07:28,090 --> 00:07:31,780
what was going on and we saw this is

160
00:07:31,780 --> 00:07:33,100
just a hunch going on

161
00:07:33,100 --> 00:07:35,680
you know another Friday we were trying

162
00:07:35,680 --> 00:07:38,229
to do something and we saw that the FPGA

163
00:07:38,229 --> 00:07:40,539
was there was a there was some emanation

164
00:07:40,539 --> 00:07:42,610
coming out from the SPI which means that

165
00:07:42,610 --> 00:07:43,960
the FPGA is coming up reading its

166
00:07:43,960 --> 00:07:45,490
configuration and we'll talk about FPGA

167
00:07:45,490 --> 00:07:48,520
later on and then FPGA does something

168
00:07:48,520 --> 00:07:51,400
probably some computation and then the

169
00:07:51,400 --> 00:07:53,979
circuitry comes up so some hunch that

170
00:07:53,979 --> 00:07:57,760
FPGA is doing something and if we also

171
00:07:57,760 --> 00:08:01,090
sniff the SPI bus we saw some you know

172
00:08:01,090 --> 00:08:03,550
we did we saw that like a micro loader

173
00:08:03,550 --> 00:08:04,990
is coming up you know the interrupt

174
00:08:04,990 --> 00:08:06,669
handlers the BIOS stuff of the V BIOS

175
00:08:06,669 --> 00:08:10,000
stuff and you know basically the a

176
00:08:10,000 --> 00:08:13,659
thousand and the F thousand two hex ten

177
00:08:13,659 --> 00:08:15,010
thousand range you know because you have

178
00:08:15,010 --> 00:08:16,659
100 seconds you can do all the analysis

179
00:08:16,659 --> 00:08:18,460
you want to we also looked at

180
00:08:18,460 --> 00:08:20,650
pre-release or some weird checks this is

181
00:08:20,650 --> 00:08:22,180
the range where usually in x86

182
00:08:22,180 --> 00:08:24,490
architecture external devices are mapped

183
00:08:24,490 --> 00:08:26,139
and if you saw the Rick stock you know

184
00:08:26,139 --> 00:08:27,580
these are basically your memory map

185
00:08:27,580 --> 00:08:32,140
tires and just for the sake of sanity we

186
00:08:32,140 --> 00:08:34,419
hijacked the first instruction wrote our

187
00:08:34,419 --> 00:08:36,250
own serial driver and we saw that the

188
00:08:36,250 --> 00:08:39,339
system was literally shutting off so

189
00:08:39,339 --> 00:08:41,409
what kind of entity is it like there is

190
00:08:41,409 --> 00:08:42,729
some external entity I don't know

191
00:08:42,729 --> 00:08:44,440
whether it's you know Jesus Christ or

192
00:08:44,440 --> 00:08:46,720
Buddha no idea there is someone who's

193
00:08:46,720 --> 00:08:51,520
doing it and it was obviously Xilinx

194
00:08:51,520 --> 00:08:54,010
because it was sitting right next to the

195
00:08:54,010 --> 00:08:55,839
spi bus so this leads the bus master

196
00:08:55,839 --> 00:08:58,839
some kind of so this was the this was

197
00:08:58,839 --> 00:09:02,170
the you know hunch and that device

198
00:09:02,170 --> 00:09:03,290
powers on FP

199
00:09:03,290 --> 00:09:05,509
she reads it's of configure figures

200
00:09:05,509 --> 00:09:08,480
himself passes the you know validates

201
00:09:08,480 --> 00:09:10,399
the whole SPI which is basically the pre

202
00:09:10,399 --> 00:09:12,589
Rahman drama and the Lynx OSI OSD and

203
00:09:12,589 --> 00:09:16,269
does the whole chain of integrity checks

204
00:09:16,269 --> 00:09:19,699
so appreciative versing is hard so I

205
00:09:19,699 --> 00:09:21,589
thought you know like why not just buy

206
00:09:21,589 --> 00:09:23,149
it and like find that he said Ben but

207
00:09:23,149 --> 00:09:25,069
these things even on sale they are

208
00:09:25,069 --> 00:09:29,389
expensive so 11 grand we went ahead and

209
00:09:29,389 --> 00:09:31,970
we found the reset pin we had to destroy

210
00:09:31,970 --> 00:09:34,670
$10,000 and this is what $10,000 looks

211
00:09:34,670 --> 00:09:40,220
like we started it we found the dollars

212
00:09:40,220 --> 00:09:43,339
and then I went to Rick you know like a

213
00:09:43,339 --> 00:09:45,230
teal reconstruction is really hard I

214
00:09:45,230 --> 00:09:46,670
don't want to do it what should I do

215
00:09:46,670 --> 00:09:48,500
I wanted he set this pin I want to keep

216
00:09:48,500 --> 00:09:50,089
this pin higher don't want it to go down

217
00:09:50,089 --> 00:09:53,509
and pick sad you know why not just put a

218
00:09:53,509 --> 00:09:56,810
10k ohm and like should be okay what

219
00:09:56,810 --> 00:10:00,849
what bad could happen $20,000

220
00:10:04,529 --> 00:10:09,310
resistors resistors cars $1 per ohm and

221
00:10:09,310 --> 00:10:15,819
this is how it looks in $20,000 so Joey

222
00:10:15,819 --> 00:10:18,310
Joey is basically you know great

223
00:10:18,310 --> 00:10:21,279
intelligence person basically said you

224
00:10:21,279 --> 00:10:23,860
dum-dums there is a patent which

225
00:10:23,860 --> 00:10:25,269
basically talks about the exact same

226
00:10:25,269 --> 00:10:28,709
thing where Cisco filed it in 2012 and

227
00:10:28,709 --> 00:10:32,649
FPGA acts as a bus master validates this

228
00:10:32,649 --> 00:10:35,019
is actually what open Titan is also

229
00:10:35,019 --> 00:10:38,170
doing if you guys read recently and what

230
00:10:38,170 --> 00:10:40,720
they are doing is you know they validate

231
00:10:40,720 --> 00:10:44,410
the fact FPGA validates what perform

232
00:10:44,410 --> 00:10:46,269
some kind of computation validates the

233
00:10:46,269 --> 00:10:48,579
certificates gold or validates a hash

234
00:10:48,579 --> 00:10:50,350
and you know sends the micro loader to

235
00:10:50,350 --> 00:10:53,440
CPU and allow the CPU to read the

236
00:10:53,440 --> 00:10:55,600
bitstream the the firmware from the SPI

237
00:10:55,600 --> 00:10:58,509
flash it's just not that after 100

238
00:10:58,509 --> 00:11:01,089
seconds of reset the way we could tell

239
00:11:01,089 --> 00:11:04,089
and we did a lot of our analysis was

240
00:11:04,089 --> 00:11:06,699
that the fan was going a you know fan

241
00:11:06,699 --> 00:11:09,339
used to make really high noise that FPGA

242
00:11:09,339 --> 00:11:13,269
has tripped the system so and now from

243
00:11:13,269 --> 00:11:15,970
this from this baton we were able to

244
00:11:15,970 --> 00:11:17,800
understand like it was controlling not

245
00:11:17,800 --> 00:11:20,380
just the spi bus but also all the other

246
00:11:20,380 --> 00:11:25,149
hardware peripherals so and we left the

247
00:11:25,149 --> 00:11:28,540
project around in 2017 came back in 2018

248
00:11:28,540 --> 00:11:31,120
down $20,000 I went to long and I said I

249
00:11:31,120 --> 00:11:33,329
can do with this I can basically

250
00:11:33,329 --> 00:11:35,139
reverse-engineer FPGA and he said

251
00:11:35,139 --> 00:11:37,959
explain me FPGAs so this is FPGA basics

252
00:11:37,959 --> 00:11:41,500
for humans so what is an FPGA right it's

253
00:11:41,500 --> 00:11:43,870
a it's an IC that has basically the

254
00:11:43,870 --> 00:11:45,389
advantages of both software and hardware

255
00:11:45,389 --> 00:11:48,339
right it can do hardwood it can do

256
00:11:48,339 --> 00:11:51,069
computations with the hardware and it

257
00:11:51,069 --> 00:11:53,920
can be configured like software and to

258
00:11:53,920 --> 00:11:55,660
explain you what it is it's just you

259
00:11:55,660 --> 00:11:57,339
know so the developer provides you the

260
00:11:57,339 --> 00:12:00,069
HDL which is basically some kind of it's

261
00:12:00,069 --> 00:12:02,319
a language and you write code in it the

262
00:12:02,319 --> 00:12:05,529
vendor tool synthesizes it and then the

263
00:12:05,529 --> 00:12:07,149
mapping and the routing can be done by

264
00:12:07,149 --> 00:12:09,579
either that vendor when they render tool

265
00:12:09,579 --> 00:12:12,010
chain or by the developer itself and

266
00:12:12,010 --> 00:12:14,030
then you take you know

267
00:12:14,030 --> 00:12:16,070
those two tables biram initialization

268
00:12:16,070 --> 00:12:17,720
think about your BSS and you know stuff

269
00:12:17,720 --> 00:12:20,200
like that if you're familiar with elf

270
00:12:20,200 --> 00:12:22,640
you basically encoded into a binary

271
00:12:22,640 --> 00:12:24,050
which is called a conservation bitstream

272
00:12:24,050 --> 00:12:25,970
with which how you can program the

273
00:12:25,970 --> 00:12:28,250
hardware inside FPGA and there are

274
00:12:28,250 --> 00:12:31,010
multiple types of FPGA SRAM base which

275
00:12:31,010 --> 00:12:34,340
is Cisco which Cisco uses in this one

276
00:12:34,340 --> 00:12:36,440
you have to configure the FPGA each time

277
00:12:36,440 --> 00:12:39,320
the system reboots the second one is the

278
00:12:39,320 --> 00:12:41,210
flash base in which the configuration

279
00:12:41,210 --> 00:12:42,890
bit stream is living inside the die

280
00:12:42,890 --> 00:12:44,720
itself so it's less power consumption

281
00:12:44,720 --> 00:12:47,750
and it automatic quickly boots up as

282
00:12:47,750 --> 00:12:50,450
with as compared to s Ram where you have

283
00:12:50,450 --> 00:12:51,950
to read some volatile memory and

284
00:12:51,950 --> 00:12:54,500
configure it and then a diffuse I don't

285
00:12:54,500 --> 00:12:55,940
know why it's called fpga because you

286
00:12:55,940 --> 00:12:57,830
cannot reconfigure it on you at all but

287
00:12:57,830 --> 00:12:59,990
what really is fpga right it's a it's a

288
00:12:59,990 --> 00:13:02,030
combination of blocks different IP

289
00:13:02,030 --> 00:13:03,980
blocks which can do something but that's

290
00:13:03,980 --> 00:13:06,440
what fpga is and you know those blocks I

291
00:13:06,440 --> 00:13:08,720
will come ahead but I'm a mathematical

292
00:13:08,720 --> 00:13:10,790
person a system person what is the fpga

293
00:13:10,790 --> 00:13:13,910
y is equal to FX this is JS if anyone

294
00:13:13,910 --> 00:13:15,740
talks about fpga and dark a lot about

295
00:13:15,740 --> 00:13:18,680
and zap-zap it's y equal to FX and all

296
00:13:18,680 --> 00:13:22,370
you care about is changing Y or X you

297
00:13:22,370 --> 00:13:24,230
don't need to worry about F and that's

298
00:13:24,230 --> 00:13:27,140
what our research shows to complete the

299
00:13:27,140 --> 00:13:30,560
tutorial i OB block is basically what

300
00:13:30,560 --> 00:13:32,900
drives the signal 0 and 1 right it's a

301
00:13:32,900 --> 00:13:37,310
it's just a pin io y is what tells the

302
00:13:37,310 --> 00:13:40,250
pins from the rest of the logic the f of

303
00:13:40,250 --> 00:13:42,860
X that okay drive it I have come I've

304
00:13:42,860 --> 00:13:45,380
computed the boolean function now this

305
00:13:45,380 --> 00:13:48,110
is 1 or 0 B Ram is just your RAM right

306
00:13:48,110 --> 00:13:50,150
you can configure at different ways and

307
00:13:50,150 --> 00:13:52,580
the CL B is the element which can which

308
00:13:52,580 --> 00:13:54,140
does the boolean functions right it

309
00:13:54,140 --> 00:13:56,240
consisted of two slices you know it has

310
00:13:56,240 --> 00:13:57,830
flip-flops look at labels and you can

311
00:13:57,830 --> 00:14:00,520
also react you can make it as a storage

312
00:14:00,520 --> 00:14:03,230
component also so how did I first

313
00:14:03,230 --> 00:14:05,350
engineer FPGA this is a need to know

314
00:14:05,350 --> 00:14:08,000
right and it has been some previous work

315
00:14:08,000 --> 00:14:11,150
done you know you can read about it but

316
00:14:11,150 --> 00:14:13,840
the mean the main idea here is that

317
00:14:13,840 --> 00:14:16,520
there are hundreds of tens of thousands

318
00:14:16,520 --> 00:14:20,120
of CLB components in FPGA and they are

319
00:14:20,120 --> 00:14:22,610
you know that way to complex like why do

320
00:14:22,610 --> 00:14:24,290
I want to go ahead and do this right

321
00:14:24,290 --> 00:14:26,150
like why do I want to like reverse

322
00:14:26,150 --> 00:14:27,450
engineer this because I'm a

323
00:14:27,450 --> 00:14:29,160
lazy hacker I want to get things done

324
00:14:29,160 --> 00:14:33,150
and the i/o pin count usually doesn't

325
00:14:33,150 --> 00:14:34,680
increase right

326
00:14:34,680 --> 00:14:36,780
this is Spartan six family which is what

327
00:14:36,780 --> 00:14:38,370
Cisco has been using and if you see it

328
00:14:38,370 --> 00:14:40,800
the CL be count keeps on increasing but

329
00:14:40,800 --> 00:14:43,710
the i/o count doesn't like it is you

330
00:14:43,710 --> 00:14:46,350
know ten fifteen linear constant action

331
00:14:46,350 --> 00:14:49,290
so this is a the sha-256 algorithm like

332
00:14:49,290 --> 00:14:50,520
this is the complexity we are talking

333
00:14:50,520 --> 00:14:51,900
about this is just CL B's and look at

334
00:14:51,900 --> 00:14:54,300
the routing in network here you don't

335
00:14:54,300 --> 00:14:56,550
want to go ahead and you know reverse

336
00:14:56,550 --> 00:14:59,790
engineer that and this is what I

337
00:14:59,790 --> 00:15:02,460
understand pretty well is that's the CL

338
00:15:02,460 --> 00:15:05,190
be encoding and so this is the sha-256

339
00:15:05,190 --> 00:15:09,090
and this is how you can represent what

340
00:15:09,090 --> 00:15:11,130
the bitstream contains so that's the

341
00:15:11,130 --> 00:15:13,380
logic all the white ones are ones and

342
00:15:13,380 --> 00:15:15,390
you know the purple ones are zero this

343
00:15:15,390 --> 00:15:17,280
is what the configuration of the CL B's

344
00:15:17,280 --> 00:15:19,410
look like and you look at the i/o B it's

345
00:15:19,410 --> 00:15:21,810
down there and it remains the same

346
00:15:21,810 --> 00:15:23,880
change a little like I think one round

347
00:15:23,880 --> 00:15:25,890
or one constant and this is how it all

348
00:15:25,890 --> 00:15:28,680
changes and if you DIF them this is

349
00:15:28,680 --> 00:15:30,480
basically it you know validates our

350
00:15:30,480 --> 00:15:32,190
theory that all we have to do is like go

351
00:15:32,190 --> 00:15:34,440
after Y and X because now we can apply

352
00:15:34,440 --> 00:15:37,770
it uniformly to different bit streams

353
00:15:37,770 --> 00:15:40,710
just changing those Y's so there are a

354
00:15:40,710 --> 00:15:42,600
few modifications in adios here we want

355
00:15:42,600 --> 00:15:43,920
to change we're going to take the output

356
00:15:43,920 --> 00:15:47,190
change it from one to zero zero to one

357
00:15:47,190 --> 00:15:50,280
configure it to become an input and same

358
00:15:50,280 --> 00:15:53,100
thing goes with input 1 and then

359
00:15:53,100 --> 00:15:55,050
reconfigure it to make it output so

360
00:15:55,050 --> 00:15:56,460
these are the configure these are the

361
00:15:56,460 --> 00:16:00,660
modification scenarios and what matters

362
00:16:00,660 --> 00:16:02,370
is that you know like even though what

363
00:16:02,370 --> 00:16:04,140
vendors have been you know trying to do

364
00:16:04,140 --> 00:16:08,220
is they are relying on the obscurity not

365
00:16:08,220 --> 00:16:10,590
like actually applying a good model and

366
00:16:10,590 --> 00:16:13,200
security and even though the RTO cans

367
00:16:13,200 --> 00:16:15,150
reconstruction is hard changing Iowa is

368
00:16:15,150 --> 00:16:17,040
actually pretty easy so let's go ahead

369
00:16:17,040 --> 00:16:18,600
and like how we do the bitstream

370
00:16:18,600 --> 00:16:20,370
divorcing right there is that's how we

371
00:16:20,370 --> 00:16:23,400
apply our firmware reversing you know

372
00:16:23,400 --> 00:16:26,100
you can bitstreams are encrypted you can

373
00:16:26,100 --> 00:16:27,270
apply different kind of glitching

374
00:16:27,270 --> 00:16:29,580
attacks you know you can do side channel

375
00:16:29,580 --> 00:16:31,620
analysis to figure out what the

376
00:16:31,620 --> 00:16:34,500
encryption is the the the key is and you

377
00:16:34,500 --> 00:16:37,920
can basically you know use it to decrypt

378
00:16:37,920 --> 00:16:40,140
the whole bit string and this is the

379
00:16:40,140 --> 00:16:41,130
development board we

380
00:16:41,130 --> 00:16:43,740
used to do our analysis and how you

381
00:16:43,740 --> 00:16:45,660
unpack you read this document that's all

382
00:16:45,660 --> 00:16:48,480
you have to do go into this go into this

383
00:16:48,480 --> 00:16:50,370
go to this link you know I don't have to

384
00:16:50,370 --> 00:16:51,960
explain all of this I'm running out of

385
00:16:51,960 --> 00:16:55,620
time but the this this actually we have

386
00:16:55,620 --> 00:16:58,470
done really good work in this and it's

387
00:16:58,470 --> 00:16:59,880
very marginalized I would really

388
00:16:59,880 --> 00:17:01,290
recommend you guys to go ahead and add

389
00:17:01,290 --> 00:17:02,760
alt arrow and different families from

390
00:17:02,760 --> 00:17:06,540
Spartan and then how to and to look at

391
00:17:06,540 --> 00:17:08,069
the analysis there are three types of

392
00:17:08,069 --> 00:17:10,170
frames one is configuration logic which

393
00:17:10,170 --> 00:17:13,079
basically contains the you know the how

394
00:17:13,079 --> 00:17:15,510
what does the CLP does then there is B

395
00:17:15,510 --> 00:17:17,430
Ram what the memory contains in the in

396
00:17:17,430 --> 00:17:19,380
the bit stream and the IO V which we

397
00:17:19,380 --> 00:17:22,410
care about and there are certain device

398
00:17:22,410 --> 00:17:24,240
layout which matters you know that's so

399
00:17:24,240 --> 00:17:25,949
if you go into the repo we have

400
00:17:25,949 --> 00:17:30,270
specified Alex 9 and Alex 45 T of the

401
00:17:30,270 --> 00:17:32,970
spartan 6 series each frame is 130 bytes

402
00:17:32,970 --> 00:17:34,890
you can think of it like a matrix

403
00:17:34,890 --> 00:17:37,620
structure there is rogue columns and

404
00:17:37,620 --> 00:17:41,880
columns itself is a matrix and you all

405
00:17:41,880 --> 00:17:43,200
you have to do is like figure out what

406
00:17:43,200 --> 00:17:45,900
is the major info about that specific

407
00:17:45,900 --> 00:17:48,060
device you you just put it in a JSON and

408
00:17:48,060 --> 00:17:50,520
our tool basically parses it you specify

409
00:17:50,520 --> 00:17:52,800
the minor this is how our to looks like

410
00:17:52,800 --> 00:17:55,020
I'm not a JavaScript version Alex from a

411
00:17:55,020 --> 00:17:57,000
team actually did a really good job in

412
00:17:57,000 --> 00:17:59,730
this it shows you the resource

413
00:17:59,730 --> 00:18:02,280
utilization this is one of the demos and

414
00:18:02,280 --> 00:18:05,850
it exactly picks out which clb which

415
00:18:05,850 --> 00:18:07,980
type of clb was being was being used

416
00:18:07,980 --> 00:18:12,210
where and be Ram the data is and this is

417
00:18:12,210 --> 00:18:15,150
how the Cisco analysis look like if you

418
00:18:15,150 --> 00:18:16,860
if you look at it right there are

419
00:18:16,860 --> 00:18:18,780
multiple CL B's which are doing some

420
00:18:18,780 --> 00:18:22,040
stuff there is PCI stuff there is gtp

421
00:18:22,040 --> 00:18:27,300
trans receiver a lot of stuff again how

422
00:18:27,300 --> 00:18:29,040
to do the encoding look at the link

423
00:18:29,040 --> 00:18:31,740
it explains you how to modify it look at

424
00:18:31,740 --> 00:18:34,770
the link and how to repack they use some

425
00:18:34,770 --> 00:18:37,470
weird 22 bit CRC for seeing single event

426
00:18:37,470 --> 00:18:40,170
upset during flashing they you know like

427
00:18:40,170 --> 00:18:42,570
all you have to do is just look at their

428
00:18:42,570 --> 00:18:44,490
software and it will tell you how to do

429
00:18:44,490 --> 00:18:48,350
it and a

430
00:18:50,770 --> 00:18:54,910
and and then you know using the site

431
00:18:54,910 --> 00:18:56,290
analysis you can figure out the key and

432
00:18:56,290 --> 00:18:59,620
you can encrypt it back there is also a

433
00:18:59,620 --> 00:19:01,750
register which allows you to bypass the

434
00:19:01,750 --> 00:19:04,300
CRC you can try that and there is a

435
00:19:04,300 --> 00:19:06,510
there is an example in the repo which

436
00:19:06,510 --> 00:19:08,770
explains you if you buy a motor boat

437
00:19:08,770 --> 00:19:10,330
which is lx9

438
00:19:10,330 --> 00:19:13,360
it and you have four pins on you can

439
00:19:13,360 --> 00:19:16,000
turn it one off and it has been left to

440
00:19:16,000 --> 00:19:18,100
the reader how to determine after this

441
00:19:18,100 --> 00:19:20,670
amazing tutorial how to turn it back on

442
00:19:20,670 --> 00:19:23,770
so now that this knowledge I went to a

443
00:19:23,770 --> 00:19:27,130
wrong and I wanted I got fours so and

444
00:19:27,130 --> 00:19:29,650
now the you know idea was spawn the pimp

445
00:19:29,650 --> 00:19:33,220
on the air sir but there are 246 2096

446
00:19:33,220 --> 00:19:35,170
pins on the ASR in the LX 45 T and I

447
00:19:35,170 --> 00:19:37,660
went to Rick again and I said how to

448
00:19:37,660 --> 00:19:39,220
figure out I don't have that much time

449
00:19:39,220 --> 00:19:40,840
because it's a it's literally a flash

450
00:19:40,840 --> 00:19:42,700
you cannot update it and you have to

451
00:19:42,700 --> 00:19:44,080
take off the flash each time anything

452
00:19:44,080 --> 00:19:46,809
bad happens because you know it resets

453
00:19:46,809 --> 00:19:49,480
so it takes around 15 minutes to retry

454
00:19:49,480 --> 00:19:50,620
the whole thing one pin

455
00:19:50,620 --> 00:19:54,400
so he used G attack chain deformed to

456
00:19:54,400 --> 00:19:57,190
find 10 pins out of 296 because remember

457
00:19:57,190 --> 00:20:00,010
the fan which was making the noise these

458
00:20:00,010 --> 00:20:01,960
are were the ten pins who change state

459
00:20:01,960 --> 00:20:05,320
after the fan noise was made so we

460
00:20:05,320 --> 00:20:08,470
focused on those 10 pins I don't think

461
00:20:08,470 --> 00:20:11,020
these 10 pins were used not sure but

462
00:20:11,020 --> 00:20:14,110
then we Brian this is where Brian comes

463
00:20:14,110 --> 00:20:16,809
in automated bitstream extraction and

464
00:20:16,809 --> 00:20:20,830
testing framework so he was supposed to

465
00:20:20,830 --> 00:20:23,620
test that pins but in worst case 296

466
00:20:23,620 --> 00:20:27,130
pens great health and in the testing

467
00:20:27,130 --> 00:20:29,410
course we lost another $30,000 the end

468
00:20:29,410 --> 00:20:31,660
of the $10,000 so this is how it looks

469
00:20:31,660 --> 00:20:34,690
like and then we finally pawned the pin

470
00:20:34,690 --> 00:20:37,270
you know like we were able to run

471
00:20:37,270 --> 00:20:39,820
modified firmware because we were able

472
00:20:39,820 --> 00:20:42,220
to disable the FPGA to send a reset

473
00:20:42,220 --> 00:20:45,400
signal by reversing the FPGA bitstream

474
00:20:45,400 --> 00:20:47,980
but now the idea was like how can we go

475
00:20:47,980 --> 00:20:49,870
towards you know go to Cisco and because

476
00:20:49,870 --> 00:20:50,950
they're gonna say that how can you do it

477
00:20:50,950 --> 00:20:54,370
remotely turned out they actually update

478
00:20:54,370 --> 00:20:57,130
their trust anchor from Linux which is

479
00:20:57,130 --> 00:21:00,730
supposed to be immutable and so there is

480
00:21:00,730 --> 00:21:02,710
a driver which they use called Cpl Dao

481
00:21:02,710 --> 00:21:04,330
and they're also a try

482
00:21:04,330 --> 00:21:06,519
quack care we hijacked that updated it

483
00:21:06,519 --> 00:21:08,200
reverse-engineer the cpld

484
00:21:08,200 --> 00:21:11,890
and boom like you can update the bit

485
00:21:11,890 --> 00:21:14,260
stream from the Linux kernel now we need

486
00:21:14,260 --> 00:21:16,029
root to get into length scanner because

487
00:21:16,029 --> 00:21:18,640
when you log in you are in this you know

488
00:21:18,640 --> 00:21:24,700
like iOS D daemon telnet shell and you

489
00:21:24,700 --> 00:21:25,870
have to do some kind of privilege

490
00:21:25,870 --> 00:21:28,659
escalation to be there and I started

491
00:21:28,659 --> 00:21:30,549
writing protocol for sirs you know it's

492
00:21:30,549 --> 00:21:31,870
basically all their protocol for

493
00:21:31,870 --> 00:21:33,940
protocols which have been there for last

494
00:21:33,940 --> 00:21:36,730
20 years so there must be some bug so

495
00:21:36,730 --> 00:21:39,340
while I was doing that James came in and

496
00:21:39,340 --> 00:21:41,200
James said you know they are actually

497
00:21:41,200 --> 00:21:44,850
writing they anich the iOS process using

498
00:21:44,850 --> 00:21:47,130
another process written in Lua

499
00:21:47,130 --> 00:21:50,320
so he went ahead he figured out to CBS

500
00:21:50,320 --> 00:21:52,090
which Carter's route which was basically

501
00:21:52,090 --> 00:21:56,980
a command injection and CSRF bypass and

502
00:21:56,980 --> 00:22:01,919
then final cost was not 30 cave 40k

503
00:22:01,919 --> 00:22:04,600
because demo gods also wanted a

504
00:22:04,600 --> 00:22:07,539
sacrifice and this is how 40k looks like

505
00:22:07,539 --> 00:22:10,899
but later on actually cisco said we're

506
00:22:10,899 --> 00:22:13,269
gonna replace all these routers to you

507
00:22:13,269 --> 00:22:14,740
but then we found out there was actually

508
00:22:14,740 --> 00:22:16,330
50k worth of loss which we don't know

509
00:22:16,330 --> 00:22:19,049
how it happened

510
00:22:21,900 --> 00:22:24,059
they did give us to router so thanks

511
00:22:24,059 --> 00:22:26,669
Cisco and what is the mitigation so I

512
00:22:26,669 --> 00:22:28,260
was looking at you know they released a

513
00:22:28,260 --> 00:22:30,630
patch over three months and what they

514
00:22:30,630 --> 00:22:33,179
did was in order to program SPI right

515
00:22:33,179 --> 00:22:36,090
like FPGA emulates itself as SPI and

516
00:22:36,090 --> 00:22:39,690
what they did was they are now not

517
00:22:39,690 --> 00:22:41,970
allowing the SPI select line to be

518
00:22:41,970 --> 00:22:44,370
selected so there is no way to update

519
00:22:44,370 --> 00:22:47,669
FPGA which I don't believe and in order

520
00:22:47,669 --> 00:22:49,559
to fix current ones they have to

521
00:22:49,559 --> 00:22:53,250
actually send in someone to these out of

522
00:22:53,250 --> 00:22:55,950
the chip you know there is no if this

523
00:22:55,950 --> 00:22:58,440
has been exploited in the wild you have

524
00:22:58,440 --> 00:23:01,070
to disorder the chip and apply the patch

525
00:23:01,070 --> 00:23:05,460
and you know the Select line is kept low

526
00:23:05,460 --> 00:23:07,740
but the main problem here is that there

527
00:23:07,740 --> 00:23:09,360
is still a mutable root of trust and

528
00:23:09,360 --> 00:23:12,840
there is a way to update this and we

529
00:23:12,840 --> 00:23:15,150
know how to do it just need some time

530
00:23:15,150 --> 00:23:20,820
and more money so I want to show this

531
00:23:20,820 --> 00:23:23,130
demo which because I didn't want to I

532
00:23:23,130 --> 00:23:25,340
don't want to bring another router

533
00:23:25,340 --> 00:23:27,539
humidity can cause sixty thousand

534
00:23:27,539 --> 00:23:37,289
dollars so if you look at this so this

535
00:23:37,289 --> 00:23:40,140
is when FPGA boots up shows like this

536
00:23:40,140 --> 00:23:43,860
you know shows the status of the system

537
00:23:43,860 --> 00:23:47,510
integrity and this is looking good

538
00:23:47,510 --> 00:23:51,390
nothing wrong in it it boots up you know

539
00:23:51,390 --> 00:23:53,159
validates does the whole secure boot

540
00:23:53,159 --> 00:23:56,940
chain loads of the iOS D and now we're

541
00:23:56,940 --> 00:24:00,299
gonna use the exploit to get fruit those

542
00:24:00,299 --> 00:24:03,539
are the CV numbers and then once you get

543
00:24:03,539 --> 00:24:06,659
the root we gonna you know insmod are

544
00:24:06,659 --> 00:24:10,020
quack KO which will send commands to you

545
00:24:10,020 --> 00:24:12,929
know spi rad commands to the fpga SPI

546
00:24:12,929 --> 00:24:18,260
and and we can help create the rahman

547
00:24:18,260 --> 00:24:20,760
which is basically updating those two

548
00:24:20,760 --> 00:24:22,380
spi flashes which contains the

549
00:24:22,380 --> 00:24:23,179
bootloader

550
00:24:23,179 --> 00:24:27,659
which gives us persistence and this is

551
00:24:27,659 --> 00:24:30,270
so I you know we could have removed this

552
00:24:30,270 --> 00:24:32,850
because this all exist in the bootloader

553
00:24:32,850 --> 00:24:34,140
now because and we control the

554
00:24:34,140 --> 00:24:36,390
bootloader I kept it to make sure that

555
00:24:36,390 --> 00:24:39,960
you know to show you that FPGA did

556
00:24:39,960 --> 00:24:42,990
calculate the hash updated the status of

557
00:24:42,990 --> 00:24:45,360
the register which the bootloader is

558
00:24:45,360 --> 00:24:47,780
reading and it is supposed to now reset

559
00:24:47,780 --> 00:24:51,180
but we stopped the FPGA pin to become

560
00:24:51,180 --> 00:24:54,780
one from zero right and even though you

561
00:24:54,780 --> 00:24:56,790
know FPGA is supposed to be the master

562
00:24:56,790 --> 00:24:58,560
we have controlled it we can also

563
00:24:58,560 --> 00:25:00,900
control any kind of other pins which are

564
00:25:00,900 --> 00:25:04,320
going in we can you know like the way

565
00:25:04,320 --> 00:25:06,180
FPGA is reading the spi bus we can

566
00:25:06,180 --> 00:25:08,550
control the SPI data lines and basically

567
00:25:08,550 --> 00:25:10,380
show it's perfectly you know like

568
00:25:10,380 --> 00:25:11,670
whatever detection tool they have built

569
00:25:11,670 --> 00:25:14,460
or you know if other people you know it

570
00:25:14,460 --> 00:25:16,710
there's people like write something to

571
00:25:16,710 --> 00:25:18,420
figure out what's going on we can

572
00:25:18,420 --> 00:25:20,430
actually control the data lines and we

573
00:25:20,430 --> 00:25:25,760
can you know emulate write software and

574
00:25:25,760 --> 00:25:28,920
so to show you I have some picture the

575
00:25:28,920 --> 00:25:32,250
guy that guy is not here and we have you

576
00:25:32,250 --> 00:25:33,600
know it's upgrading the this is doing

577
00:25:33,600 --> 00:25:35,640
the bootloader upgrade because it's two

578
00:25:35,640 --> 00:25:38,040
spi flashes you update one flash from

579
00:25:38,040 --> 00:25:41,220
the SPI and this is we have persistence

580
00:25:41,220 --> 00:25:46,260
and billions of dollars of research

581
00:25:46,260 --> 00:25:49,190
compromised

582
00:25:56,430 --> 00:25:59,760
so future work is you know there is FPGA

583
00:25:59,760 --> 00:26:01,710
I have some kind of compression you know

584
00:26:01,710 --> 00:26:03,840
they apply and it messes up with the

585
00:26:03,840 --> 00:26:05,250
layout of the system which we want to

586
00:26:05,250 --> 00:26:07,140
look into their Hardware Trojans you can

587
00:26:07,140 --> 00:26:09,000
you know there is no way to validate the

588
00:26:09,000 --> 00:26:10,260
fact that you know you can have

589
00:26:10,260 --> 00:26:12,150
authentication built into the FPGA as

590
00:26:12,150 --> 00:26:14,760
these days but I think like recently

591
00:26:14,760 --> 00:26:16,530
f-secure guys also found problems in

592
00:26:16,530 --> 00:26:17,850
those are thick and authentication and

593
00:26:17,850 --> 00:26:20,070
confidentiality

594
00:26:20,070 --> 00:26:21,750
you know validating that so there are

595
00:26:21,750 --> 00:26:24,420
ways to add Hardware Trojans in it you

596
00:26:24,420 --> 00:26:25,710
can also use for antenna because you

597
00:26:25,710 --> 00:26:26,970
know the clock speed is like I'm for

598
00:26:26,970 --> 00:26:29,550
hand maker heads or something and this

599
00:26:29,550 --> 00:26:31,900
is our github repo thank you

600
00:26:31,900 --> 00:26:44,459
[Applause]

601
00:26:48,059 --> 00:26:51,970
all right well we have about ten minutes

602
00:26:51,970 --> 00:26:53,290
to clear out of here

603
00:26:53,290 --> 00:26:56,200
but the lucky news here is that we have

604
00:26:56,200 --> 00:26:57,400
the beach luau going on right now

605
00:26:57,400 --> 00:26:59,380
there's tons of food out there go ahead

606
00:26:59,380 --> 00:27:01,570
on out there we'll be out there in a

607
00:27:01,570 --> 00:27:03,280
little bit and do some closing remarks

608
00:27:03,280 --> 00:27:06,700
out on the beach so please get the hell

609
00:27:06,700 --> 00:27:09,000
out of here

