1
00:00:00,030 --> 00:00:03,090
our next speaker rick Housley he's going

2
00:00:03,090 --> 00:00:05,879
to talk about a reverse engineering

3
00:00:05,879 --> 00:00:09,030
embedded systems and memory mapped i/o

4
00:00:09,030 --> 00:00:12,719
accesses with Dedra so take it away all

5
00:00:12,719 --> 00:00:14,130
right awesome

6
00:00:14,130 --> 00:00:15,960
good afternoon guys like he said my name

7
00:00:15,960 --> 00:00:17,699
is Rick Housley I'm gonna be talking

8
00:00:17,699 --> 00:00:19,920
about perch and as you mentioned it's a

9
00:00:19,920 --> 00:00:22,740
gira plugin for adding some memory

10
00:00:22,740 --> 00:00:25,619
mapped i/o functionality right now I

11
00:00:25,619 --> 00:00:27,750
work at United Technologies I'm part of

12
00:00:27,750 --> 00:00:29,340
the product security red team on

13
00:00:29,340 --> 00:00:32,850
aviation platforms previous to that I

14
00:00:32,850 --> 00:00:34,590
worked at red blue and security where I

15
00:00:34,590 --> 00:00:36,840
did a whole bunch of electromagnetic

16
00:00:36,840 --> 00:00:39,480
fall injection research and more

17
00:00:39,480 --> 00:00:41,910
recently three Angry Kratts the big

18
00:00:41,910 --> 00:00:46,050
Cisco root of trust disclosure and

19
00:00:46,050 --> 00:00:47,940
actually if you stick around and like an

20
00:00:47,940 --> 00:00:49,469
hour jon is going to be talking about

21
00:00:49,469 --> 00:00:51,809
that all right so what are we going to

22
00:00:51,809 --> 00:00:53,370
see today we're gonna do a quick review

23
00:00:53,370 --> 00:00:55,320
of gira for those of you who aren't as

24
00:00:55,320 --> 00:00:56,910
familiar we'll talk a little bit about

25
00:00:56,910 --> 00:00:59,760
memory mapped i/o and why diversity is

26
00:00:59,760 --> 00:01:01,949
actually really painful in this regard

27
00:01:01,949 --> 00:01:03,960
you know the current methods and tools

28
00:01:03,960 --> 00:01:07,320
for you know reverse engineering

29
00:01:07,320 --> 00:01:08,610
hardware and dealing with peripherals

30
00:01:08,610 --> 00:01:10,770
right now and then kind of the solutions

31
00:01:10,770 --> 00:01:13,560
that I came up to solve that I'll

32
00:01:13,560 --> 00:01:15,570
briefly mention formal grammar and we'll

33
00:01:15,570 --> 00:01:16,950
see how it's actually really cool and

34
00:01:16,950 --> 00:01:18,780
despite having formal in the name it's

35
00:01:18,780 --> 00:01:21,540
not quite as scary and then at some

36
00:01:21,540 --> 00:01:23,220
point I'll hopefully show a working demo

37
00:01:23,220 --> 00:01:24,900
and and talk about extending the

38
00:01:24,900 --> 00:01:26,400
extension and and some of the future

39
00:01:26,400 --> 00:01:29,159
work that can come out of tools like

40
00:01:29,159 --> 00:01:32,880
this all right so cool gear affair I for

41
00:01:32,880 --> 00:01:34,140
the use of you who have never heard of

42
00:01:34,140 --> 00:01:37,460
gira Deidre is NSA's kind of open source

43
00:01:37,460 --> 00:01:41,280
now open source equivalent of Ida Pro

44
00:01:41,280 --> 00:01:43,200
it's really great and really cool and

45
00:01:43,200 --> 00:01:45,450
that it has a full D compiler built in

46
00:01:45,450 --> 00:01:47,009
it supports a whole bunch of processors

47
00:01:47,009 --> 00:01:49,979
and it is a really fantastic scripting

48
00:01:49,979 --> 00:01:53,100
and plug-in architecture that allows you

49
00:01:53,100 --> 00:01:54,840
to augment it instead of bugging I'll

50
00:01:54,840 --> 00:01:57,659
talk about something new so this is what

51
00:01:57,659 --> 00:01:59,479
it looks like it's released in March

52
00:01:59,479 --> 00:02:01,680
also it has undo which is kind of

53
00:02:01,680 --> 00:02:04,890
magical even though I don't know

54
00:02:04,890 --> 00:02:07,829
apparently has undo it looks like a

55
00:02:07,829 --> 00:02:10,229
typical view of it you have your your

56
00:02:10,229 --> 00:02:12,840
disassembly you have your

57
00:02:12,840 --> 00:02:14,310
you know your typical graph view that

58
00:02:14,310 --> 00:02:16,680
you see in Ida and then like I mentioned

59
00:02:16,680 --> 00:02:19,010
a really great feature is the decompiler

60
00:02:19,010 --> 00:02:22,200
decompiler that it has as well I'm not

61
00:02:22,200 --> 00:02:23,579
gonna really dive into the basics of

62
00:02:23,579 --> 00:02:25,290
Ghidorah but if you're interested and

63
00:02:25,290 --> 00:02:27,030
want to jump in I would highly recommend

64
00:02:27,030 --> 00:02:29,879
this talk from Alexi and Jeremy they do

65
00:02:29,879 --> 00:02:31,769
a really great job of kind of easing

66
00:02:31,769 --> 00:02:36,739
that learning curve into developing and

67
00:02:36,739 --> 00:02:40,019
reverse engineering with Deidre what I'm

68
00:02:40,019 --> 00:02:41,400
going to talk about is this new window

69
00:02:41,400 --> 00:02:43,859
that got that that's an add-on

70
00:02:43,859 --> 00:02:45,719
it's called perch and that allows you to

71
00:02:45,719 --> 00:02:49,019
kind of explore black box hardware and

72
00:02:49,019 --> 00:02:51,199
they're kind of peripheral interactions

73
00:02:51,199 --> 00:02:54,030
but before we see that demo and how that

74
00:02:54,030 --> 00:02:55,290
works let's talk a little bit about

75
00:02:55,290 --> 00:02:58,530
memory mapped i/o so unlike you know

76
00:02:58,530 --> 00:03:01,079
typical OS reverse-engineering when

77
00:03:01,079 --> 00:03:03,060
you're dealing with embedded systems you

78
00:03:03,060 --> 00:03:04,799
often really care about the peripherals

79
00:03:04,799 --> 00:03:07,680
and those peripherals are often mapped

80
00:03:07,680 --> 00:03:09,810
directly in memory so you know the

81
00:03:09,810 --> 00:03:11,340
processor and i/o devices are mapped

82
00:03:11,340 --> 00:03:13,530
using memory addresses so if you want to

83
00:03:13,530 --> 00:03:14,790
flip a pin

84
00:03:14,790 --> 00:03:16,379
you're gonna write to some address in

85
00:03:16,379 --> 00:03:17,400
memory if you want to set up some

86
00:03:17,400 --> 00:03:20,819
peripherals for SPI or your interactions

87
00:03:20,819 --> 00:03:23,370
those are all just directly in memory

88
00:03:23,370 --> 00:03:25,379
that that you need to to write to or

89
00:03:25,379 --> 00:03:28,319
read from so this is what memory Maps

90
00:03:28,319 --> 00:03:29,970
look like when you're reading tons and

91
00:03:29,970 --> 00:03:31,799
tons of data sheets and the one thing

92
00:03:31,799 --> 00:03:33,090
that I really want to point out here is

93
00:03:33,090 --> 00:03:36,030
that these are both stm32 is the same

94
00:03:36,030 --> 00:03:38,819
you know family ish and they have

95
00:03:38,819 --> 00:03:40,949
completely different memory Maps and

96
00:03:40,949 --> 00:03:42,239
that's kind of where this complexity and

97
00:03:42,239 --> 00:03:43,889
why memory mapped i/o is really hard

98
00:03:43,889 --> 00:03:45,689
when you use tools like II drew or or

99
00:03:45,689 --> 00:03:49,109
Ida is they have a really great support

100
00:03:49,109 --> 00:03:51,840
for the core they have you know all

101
00:03:51,840 --> 00:03:53,759
their disassembly for arm and PowerPC

102
00:03:53,759 --> 00:03:55,709
and everything like that but then when

103
00:03:55,709 --> 00:03:56,849
you're dealing with these different

104
00:03:56,849 --> 00:03:59,150
peripherals that are being written to

105
00:03:59,150 --> 00:04:01,019
they can't support every single

106
00:04:01,019 --> 00:04:03,509
processor and so what you end up having

107
00:04:03,509 --> 00:04:07,669
is just a really poorly kind of shown

108
00:04:07,669 --> 00:04:09,629
peripheral interactions in firmware and

109
00:04:09,629 --> 00:04:10,909
and we're going to take a look at that

110
00:04:10,909 --> 00:04:13,169
right here so this is actually the

111
00:04:13,169 --> 00:04:14,669
firmware you're going to be seeing is

112
00:04:14,669 --> 00:04:17,969
some vaporware it's it's a some IOT VAP

113
00:04:17,969 --> 00:04:22,860
firmware so it's using this little NRF

114
00:04:22,860 --> 00:04:25,770
arm core and this is what it kind of

115
00:04:25,770 --> 00:04:26,160
looks like

116
00:04:26,160 --> 00:04:27,450
Ida when you first start scrolling

117
00:04:27,450 --> 00:04:29,040
through when you first open it up and

118
00:04:29,040 --> 00:04:32,190
what you see here is really nothing it's

119
00:04:32,190 --> 00:04:34,170
kind of the problem it's really hard to

120
00:04:34,170 --> 00:04:36,360
tell what's going on so the first thing

121
00:04:36,360 --> 00:04:37,920
that you'd want to do is you want to go

122
00:04:37,920 --> 00:04:40,140
open up that datasheet finds there kind

123
00:04:40,140 --> 00:04:42,680
of memory map and start augmenting

124
00:04:42,680 --> 00:04:45,150
Deidre's memory mapping where you add

125
00:04:45,150 --> 00:04:47,610
the peripheral chunks and now after that

126
00:04:47,610 --> 00:04:49,200
kitra is going to start recognizing all

127
00:04:49,200 --> 00:04:50,610
right this isn't address in the

128
00:04:50,610 --> 00:04:53,970
peripheral region but this is still

129
00:04:53,970 --> 00:04:57,390
pretty useless so you see up top there's

130
00:04:57,390 --> 00:04:59,430
it's loading or writing to some address

131
00:04:59,430 --> 00:05:04,680
up to the 40,000 range and so then run

132
00:05:04,680 --> 00:05:07,050
back to the datasheet read you know get

133
00:05:07,050 --> 00:05:08,580
sixty pages find your memory map and

134
00:05:08,580 --> 00:05:10,140
then you see all right cool this is

135
00:05:10,140 --> 00:05:12,060
dealing with a temperature sensor that's

136
00:05:12,060 --> 00:05:15,360
built into this chip and then for every

137
00:05:15,360 --> 00:05:17,280
single one of these I so then you can

138
00:05:17,280 --> 00:05:19,380
you label that find all the registers

139
00:05:19,380 --> 00:05:21,240
label all those registers and you know

140
00:05:21,240 --> 00:05:23,700
there's you know dozens per each one of

141
00:05:23,700 --> 00:05:26,340
these peripherals so it kind of becomes

142
00:05:26,340 --> 00:05:28,860
a major pain to do this for one thing

143
00:05:28,860 --> 00:05:31,170
and then when you get a new project or

144
00:05:31,170 --> 00:05:33,000
you want to start something new you have

145
00:05:33,000 --> 00:05:34,140
to do all over again

146
00:05:34,140 --> 00:05:35,100
and then you have to do it all over

147
00:05:35,100 --> 00:05:37,140
again every time and it's kind of a pain

148
00:05:37,140 --> 00:05:39,270
and somebody very smart realized on the

149
00:05:39,270 --> 00:05:42,270
Ghidorah github they're like hey forearm

150
00:05:42,270 --> 00:05:45,060
chips there's this great thing called an

151
00:05:45,060 --> 00:05:48,600
SVG file and what an SVG file is is it's

152
00:05:48,600 --> 00:05:50,130
just a description of all the

153
00:05:50,130 --> 00:05:52,710
peripherals for a certain processor and

154
00:05:52,710 --> 00:05:54,450
so they're like hey somebody should

155
00:05:54,450 --> 00:05:57,390
write a parser and parse this format and

156
00:05:57,390 --> 00:06:00,360
then augment guitro with it and and

157
00:06:00,360 --> 00:06:02,130
somebody beat me to that and that was

158
00:06:02,130 --> 00:06:05,520
thomas roth who's speaking next and he

159
00:06:05,520 --> 00:06:06,570
released this loader which is

160
00:06:06,570 --> 00:06:10,200
essentially perch for forearm things now

161
00:06:10,200 --> 00:06:12,510
unfortunately and I would check this out

162
00:06:12,510 --> 00:06:14,400
this is open source and available right

163
00:06:14,400 --> 00:06:14,820
now

164
00:06:14,820 --> 00:06:17,070
unlike perch which is going to your open

165
00:06:17,070 --> 00:06:20,610
source review but unfortunately I don't

166
00:06:20,610 --> 00:06:21,930
always have the privilege of working

167
00:06:21,930 --> 00:06:23,640
with arm stuff sometimes I have to work

168
00:06:23,640 --> 00:06:26,130
with kind of random architectures and

169
00:06:26,130 --> 00:06:28,380
PowerPC and these SVG files are not

170
00:06:28,380 --> 00:06:30,750
created for things other than arm and

171
00:06:30,750 --> 00:06:31,620
they're not available from the

172
00:06:31,620 --> 00:06:35,610
manufacturer so I kind of needed a

173
00:06:35,610 --> 00:06:39,570
different solution than the SVD parser

174
00:06:39,570 --> 00:06:40,009
that

175
00:06:40,009 --> 00:06:44,479
Thomas Roth supplies so on a side

176
00:06:44,479 --> 00:06:46,699
tangent back when I was working in red

177
00:06:46,699 --> 00:06:48,559
balloon doing some development we use

178
00:06:48,559 --> 00:06:50,449
this amazing tool called a Lauterbach

179
00:06:50,449 --> 00:06:53,509
this is the Lauterbach trace 32 software

180
00:06:53,509 --> 00:06:56,360
and it's really expensive but it's

181
00:06:56,360 --> 00:06:57,439
expensive for a reason and that's

182
00:06:57,439 --> 00:06:59,960
because it has amazing support for

183
00:06:59,960 --> 00:07:01,729
everything it's a JTAG double you plug

184
00:07:01,729 --> 00:07:03,860
it in you can step through all your

185
00:07:03,860 --> 00:07:05,059
instructions and there's this one

186
00:07:05,059 --> 00:07:07,819
magical little window at any given point

187
00:07:07,819 --> 00:07:09,619
you can just see all of the peripherals

188
00:07:09,619 --> 00:07:11,930
and you know what's going on in them and

189
00:07:11,930 --> 00:07:13,550
it's just it's really clean and nice and

190
00:07:13,550 --> 00:07:14,870
this is something you kind of write off

191
00:07:14,870 --> 00:07:17,479
as I go that's just cool but then when

192
00:07:17,479 --> 00:07:18,649
you're using tools like either you're

193
00:07:18,649 --> 00:07:21,949
like wait I want that but in giedrius

194
00:07:21,949 --> 00:07:24,289
and like I said they support

195
00:07:24,289 --> 00:07:26,419
lauderbach's supports pretty much every

196
00:07:26,419 --> 00:07:29,089
processor there's a 942 supported

197
00:07:29,089 --> 00:07:31,430
families that includes you know all your

198
00:07:31,430 --> 00:07:34,669
arm chips that NRF chip you know PowerPC

199
00:07:34,669 --> 00:07:36,620
everything and I say families because

200
00:07:36,620 --> 00:07:39,439
memory mapped i/o changes not just in

201
00:07:39,439 --> 00:07:41,270
your family but from processor to

202
00:07:41,270 --> 00:07:43,520
processor within a family so this

203
00:07:43,520 --> 00:07:45,589
includes if you have a family all of

204
00:07:45,589 --> 00:07:47,449
those other sub processors within that

205
00:07:47,449 --> 00:07:51,889
family that whole stm32f4 I'm underneath

206
00:07:51,889 --> 00:07:54,439
it as well so how does water block do it

207
00:07:54,439 --> 00:07:56,930
they have all the support while they

208
00:07:56,930 --> 00:07:58,129
painstakingly work with the

209
00:07:58,129 --> 00:08:01,759
manufacturers to create these these

210
00:08:01,759 --> 00:08:03,379
peripheral files and this is what a

211
00:08:03,379 --> 00:08:05,029
peripheral file looks like little

212
00:08:05,029 --> 00:08:08,089
similar to the SVD ones but a lot more

213
00:08:08,089 --> 00:08:10,819
painful actually but they have great

214
00:08:10,819 --> 00:08:12,979
support of even at the bit level for in

215
00:08:12,979 --> 00:08:15,319
a register what each bit means and these

216
00:08:15,319 --> 00:08:16,849
are massive you know a hundred thousand

217
00:08:16,849 --> 00:08:20,539
lines of really structured text and

218
00:08:20,539 --> 00:08:23,059
unfortunately they do some wonky stuff

219
00:08:23,059 --> 00:08:24,499
too I don't know if you can see this

220
00:08:24,499 --> 00:08:26,300
here but they decide to have like fully

221
00:08:26,300 --> 00:08:30,139
of valuable expressions built into this

222
00:08:30,139 --> 00:08:34,309
document so that's where this tool comes

223
00:08:34,309 --> 00:08:36,529
in so what is purch it's this peripheral

224
00:08:36,529 --> 00:08:38,630
file conversion helper tool that

225
00:08:38,630 --> 00:08:40,549
integrates with Ghidorah it takes that

226
00:08:40,549 --> 00:08:42,409
peripheral file you know massive 100

227
00:08:42,409 --> 00:08:46,579
thousand line file it then parses that

228
00:08:46,579 --> 00:08:50,240
file using some formal grammar and then

229
00:08:50,240 --> 00:08:52,430
you know you can run some if you're

230
00:08:52,430 --> 00:08:53,820
interested in certain peripherals you

231
00:08:53,820 --> 00:08:55,770
filter those out that kind of thing it

232
00:08:55,770 --> 00:08:57,960
translates it into intermediary and then

233
00:08:57,960 --> 00:08:59,660
you can load that into Ghidorah

234
00:08:59,660 --> 00:09:01,470
hopefully at some point you could also

235
00:09:01,470 --> 00:09:03,180
load that into Ida and augment it that

236
00:09:03,180 --> 00:09:07,770
way all right I mentioned formal

237
00:09:07,770 --> 00:09:10,800
grammars so this is the how the parsing

238
00:09:10,800 --> 00:09:13,590
works so it because this file is heavily

239
00:09:13,590 --> 00:09:15,450
nested doing a kind of line by line

240
00:09:15,450 --> 00:09:18,750
approach of parsing I kind of needed a

241
00:09:18,750 --> 00:09:21,570
better way of doing that and I that

242
00:09:21,570 --> 00:09:23,850
formal grammars are fantastic for this

243
00:09:23,850 --> 00:09:25,200
and you basically take this

244
00:09:25,200 --> 00:09:27,750
specification from you know blood our

245
00:09:27,750 --> 00:09:30,060
box PDFs and then you code that into

246
00:09:30,060 --> 00:09:31,290
this kind of form you see on the left

247
00:09:31,290 --> 00:09:32,970
which is kind of describes all the

248
00:09:32,970 --> 00:09:35,220
different possibilities in a line and

249
00:09:35,220 --> 00:09:38,160
then that gets you generate a parsing a

250
00:09:38,160 --> 00:09:39,930
parser from there parsing engine and

251
00:09:39,930 --> 00:09:41,970
then you end up with this syntax tree

252
00:09:41,970 --> 00:09:44,040
and then you can have an interpreter go

253
00:09:44,040 --> 00:09:45,420
and run through this syntax tree and

254
00:09:45,420 --> 00:09:49,800
generate kind of the that intermediary

255
00:09:49,800 --> 00:09:52,800
representation for fergie draw after

256
00:09:52,800 --> 00:09:56,040
that so you see this this input line on

257
00:09:56,040 --> 00:09:57,960
the left it's some of that crazy math

258
00:09:57,960 --> 00:09:59,070
that they love putting in all their

259
00:09:59,070 --> 00:10:01,890
files and then it converts that down all

260
00:10:01,890 --> 00:10:03,870
down to that tree and then interpret

261
00:10:03,870 --> 00:10:05,400
this and evaluate it to actually just a

262
00:10:05,400 --> 00:10:07,170
number that it's supposed to be and then

263
00:10:07,170 --> 00:10:10,800
go and label that in guitro all right so

264
00:10:10,800 --> 00:10:12,600
that's I think enough talking for for

265
00:10:12,600 --> 00:10:14,790
now I'm going to show you a little bit

266
00:10:14,790 --> 00:10:17,340
about what purch actually looks like in

267
00:10:17,340 --> 00:10:18,450
guida and we're going to start off

268
00:10:18,450 --> 00:10:20,940
actually in the same spot that I had

269
00:10:20,940 --> 00:10:23,970
shown you earlier with with that vape

270
00:10:23,970 --> 00:10:26,580
firmware in that that temperature sensor

271
00:10:26,580 --> 00:10:31,520
region so oh this is heart

272
00:10:35,269 --> 00:10:37,649
yeah that's the right one let me see if

273
00:10:37,649 --> 00:10:41,220
I can mirror here I mean all right so

274
00:10:41,220 --> 00:10:42,959
what what you see here is you see perch

275
00:10:42,959 --> 00:10:44,759
on the left and this is a peripheral

276
00:10:44,759 --> 00:10:47,490
tree of all of the different peripherals

277
00:10:47,490 --> 00:10:50,430
that are included in the NRF firmware I

278
00:10:50,430 --> 00:10:53,699
mean at the NRF chip sorry and so we can

279
00:10:53,699 --> 00:10:56,100
navigate this tree and you'll see that

280
00:10:56,100 --> 00:10:57,990
these are all the peripherals and it's

281
00:10:57,990 --> 00:11:02,250
colored by utilization and so let's jump

282
00:11:02,250 --> 00:11:07,850
to well where was my good example

283
00:11:07,850 --> 00:11:10,889
so the mq for example in this there's

284
00:11:10,889 --> 00:11:12,509
that's kind of neat actually from a

285
00:11:12,509 --> 00:11:15,120
security perspective disable protection

286
00:11:15,120 --> 00:11:18,540
mechanisms and debug mode cool so what

287
00:11:18,540 --> 00:11:20,310
we can do is we can just follow that to

288
00:11:20,310 --> 00:11:22,290
where that's written and you can see

289
00:11:22,290 --> 00:11:24,959
it's kind of now cleanly written in

290
00:11:24,959 --> 00:11:28,350
memory or in the disassembly here and so

291
00:11:28,350 --> 00:11:29,339
we can walk through all these different

292
00:11:29,339 --> 00:11:30,689
peripherals and start to get a really

293
00:11:30,689 --> 00:11:32,339
high-level idea of what certain

294
00:11:32,339 --> 00:11:33,750
functions are doing initially if you

295
00:11:33,750 --> 00:11:35,009
were a look at this function you just

296
00:11:35,009 --> 00:11:38,939
see a bunch of you know data access to

297
00:11:38,939 --> 00:11:40,379
use but now you see okay this is

298
00:11:40,379 --> 00:11:42,089
actually setting up you know some clock

299
00:11:42,089 --> 00:11:45,629
stuff and see what this is one of the

300
00:11:45,629 --> 00:11:49,500
good examples so you can see all right

301
00:11:49,500 --> 00:11:50,459
this is the function that's you know

302
00:11:50,459 --> 00:11:52,379
setting up and starting the watchdog and

303
00:11:52,379 --> 00:11:54,689
all that fun stuff here and then another

304
00:11:54,689 --> 00:11:56,370
from like a very high level perspective

305
00:11:56,370 --> 00:11:58,860
this this VAP I don't own this VAP I

306
00:11:58,860 --> 00:12:00,750
just have the firmer and so I really

307
00:12:00,750 --> 00:12:02,220
wanted to be able to see okay so what

308
00:12:02,220 --> 00:12:04,199
what is the even Hardware look like and

309
00:12:04,199 --> 00:12:05,399
you can get a really quick idea of like

310
00:12:05,399 --> 00:12:07,290
alright well they're not using SPI for

311
00:12:07,290 --> 00:12:09,569
anything they are using the temperature

312
00:12:09,569 --> 00:12:11,220
sensor you can go oh I wonder if they're

313
00:12:11,220 --> 00:12:12,990
using the temperature sensor for you

314
00:12:12,990 --> 00:12:15,059
know the actual vape product or what

315
00:12:15,059 --> 00:12:17,689
have you so that's perch in a nutshell

316
00:12:17,689 --> 00:12:22,350
in terms of demo me here's some you know

317
00:12:22,350 --> 00:12:27,839
great examples as well of you know the

318
00:12:27,839 --> 00:12:31,110
oranjee getting set up and so so what

319
00:12:31,110 --> 00:12:33,740
comes after this

320
00:12:38,430 --> 00:12:41,910
all right cool so this is that the the

321
00:12:41,910 --> 00:12:43,280
cleaned-up perched version of that

322
00:12:43,280 --> 00:12:47,580
initial shot that I showed you some of

323
00:12:47,580 --> 00:12:50,520
the features that it sports the short

324
00:12:50,520 --> 00:12:51,840
and long register descriptions so you

325
00:12:51,840 --> 00:12:54,570
can really cleanly see like you saw all

326
00:12:54,570 --> 00:12:56,640
of those there's access is the the tree

327
00:12:56,640 --> 00:12:57,720
hierarchy is actually really nice

328
00:12:57,720 --> 00:12:59,280
because Lauterbach does a great job of

329
00:12:59,280 --> 00:13:05,100
nesting peripherals so in well in some

330
00:13:05,100 --> 00:13:06,240
cases you'll have you know debug

331
00:13:06,240 --> 00:13:08,820
registers nested with another debugging

332
00:13:08,820 --> 00:13:11,100
for some specific sub peripheral and

333
00:13:11,100 --> 00:13:13,200
then like I mentioned the colorization

334
00:13:13,200 --> 00:13:15,210
is really helpful for seeing kind of a

335
00:13:15,210 --> 00:13:16,860
high-level overview it's what what is

336
00:13:16,860 --> 00:13:22,140
happening in okay so now that we have

337
00:13:22,140 --> 00:13:25,200
this other than helping with you know

338
00:13:25,200 --> 00:13:26,940
general reverse engineering efforts what

339
00:13:26,940 --> 00:13:28,290
kind of like other things now that we

340
00:13:28,290 --> 00:13:30,720
have this new layer and goodra can we do

341
00:13:30,720 --> 00:13:33,930
and what's great about Dedra is you have

342
00:13:33,930 --> 00:13:35,370
these plugins this is a plugin or

343
00:13:35,370 --> 00:13:37,320
extension and then you could script on

344
00:13:37,320 --> 00:13:38,850
top of them as well so one of the

345
00:13:38,850 --> 00:13:41,190
scripts that I developed that is now on

346
00:13:41,190 --> 00:13:44,400
top of the perch layer is finding set up

347
00:13:44,400 --> 00:13:46,740
functions so a really quick heuristic

348
00:13:46,740 --> 00:13:48,900
for finding a set up function is you see

349
00:13:48,900 --> 00:13:50,820
all right I want the one function that

350
00:13:50,820 --> 00:13:52,620
does the maximum number of writes to a

351
00:13:52,620 --> 00:13:55,470
peripheral family right so SPI flash

352
00:13:55,470 --> 00:13:59,280
you'll say let's find the function that

353
00:13:59,280 --> 00:14:00,750
sets that up go through all the

354
00:14:00,750 --> 00:14:01,800
different functions and find the one

355
00:14:01,800 --> 00:14:04,020
with all the rights to that peripheral

356
00:14:04,020 --> 00:14:06,570
and so you can immediately label in

357
00:14:06,570 --> 00:14:07,830
deidre all of the different set up

358
00:14:07,830 --> 00:14:08,940
functions for all the different

359
00:14:08,940 --> 00:14:13,050
peripherals really quickly what else can

360
00:14:13,050 --> 00:14:14,010
you kind of do with this kind of

361
00:14:14,010 --> 00:14:16,620
infrastructure built in so this is a

362
00:14:16,620 --> 00:14:18,360
terrible picture of a control flow graph

363
00:14:18,360 --> 00:14:20,490
that you'll pretty normally see in

364
00:14:20,490 --> 00:14:23,700
something like Ida or you know Angie

365
00:14:23,700 --> 00:14:26,640
drew in a really terrible view but what

366
00:14:26,640 --> 00:14:28,290
you can do now is you can also add in

367
00:14:28,290 --> 00:14:31,140
your peripheral interactions so in this

368
00:14:31,140 --> 00:14:33,150
diagram when you see all of the colored

369
00:14:33,150 --> 00:14:35,910
dots are the peripherals and you could

370
00:14:35,910 --> 00:14:37,800
start to immediately notice like see

371
00:14:37,800 --> 00:14:38,910
this tree over here

372
00:14:38,910 --> 00:14:41,180
that's pretty obviously a setup function

373
00:14:41,180 --> 00:14:44,040
and I actually have a better shot of

374
00:14:44,040 --> 00:14:47,160
this next one you can find some really

375
00:14:47,160 --> 00:14:49,950
interesting stuff like this is the radio

376
00:14:49,950 --> 00:14:51,570
and it's also

377
00:14:51,570 --> 00:14:52,650
looking at like one-time programmable

378
00:14:52,650 --> 00:14:55,230
memory so hey is this doing some key

379
00:14:55,230 --> 00:14:57,570
stuff is it just setting up the ID that

380
00:14:57,570 --> 00:14:59,430
kind of thing and this is without

381
00:14:59,430 --> 00:15:01,140
looking at a single line of disassembly

382
00:15:01,140 --> 00:15:02,250
you can start getting these kind of

383
00:15:02,250 --> 00:15:07,260
insights which is something I enjoy all

384
00:15:07,260 --> 00:15:09,330
right so what should you walk away

385
00:15:09,330 --> 00:15:11,400
thinking after this this brief little

386
00:15:11,400 --> 00:15:13,860
talk here memory mapped i/o is kind of a

387
00:15:13,860 --> 00:15:15,330
hard thing to deal with given the

388
00:15:15,330 --> 00:15:16,380
massive diversity of all these

389
00:15:16,380 --> 00:15:17,250
processors

390
00:15:17,250 --> 00:15:20,910
fortunately tools like Thomas Roth's SVD

391
00:15:20,910 --> 00:15:22,200
parser and perch are hopefully going to

392
00:15:22,200 --> 00:15:24,060
make that a lot easier

393
00:15:24,060 --> 00:15:26,730
Thomas Roth's tool is available today I

394
00:15:26,730 --> 00:15:29,700
could find it on Twitter perch is going

395
00:15:29,700 --> 00:15:31,860
open through open source review so that

396
00:15:31,860 --> 00:15:34,440
will be also available those peripheral

397
00:15:34,440 --> 00:15:36,780
files I mentioned are also entirely

398
00:15:36,780 --> 00:15:38,340
available on lauderbach's website

399
00:15:38,340 --> 00:15:39,630
they're not proprietary you don't have

400
00:15:39,630 --> 00:15:42,300
to buy their equipment to access them

401
00:15:42,300 --> 00:15:46,320
and therefore now still online the kind

402
00:15:46,320 --> 00:15:47,580
of general big picture things that I

403
00:15:47,580 --> 00:15:49,980
think you should take away is the value

404
00:15:49,980 --> 00:15:52,080
in gira is more than it just being a

405
00:15:52,080 --> 00:15:53,610
cool Hardware reverse engineering tool

406
00:15:53,610 --> 00:15:55,380
that's pretty equivalent Ida

407
00:15:55,380 --> 00:15:57,270
it's actually in my opinion the ability

408
00:15:57,270 --> 00:15:59,730
to extend it so much further and and

409
00:15:59,730 --> 00:16:02,130
it's really well documented foundation

410
00:16:02,130 --> 00:16:06,360
it's just great bones to add on to from

411
00:16:06,360 --> 00:16:08,790
a reverse engineers perspective and then

412
00:16:08,790 --> 00:16:10,410
you can do some pretty neat stuff with

413
00:16:10,410 --> 00:16:12,570
graphing outside of goodra and get

414
00:16:12,570 --> 00:16:14,690
pretty cool insights without touching

415
00:16:14,690 --> 00:16:17,580
touching the assembly I didn't really

416
00:16:17,580 --> 00:16:18,960
talk that much about it but formal

417
00:16:18,960 --> 00:16:20,280
grammars I do want to give them a shout

418
00:16:20,280 --> 00:16:22,770
out are a lot less scary than than they

419
00:16:22,770 --> 00:16:24,480
seem and they're incredibly useful for

420
00:16:24,480 --> 00:16:27,140
doing that you know large text parsing

421
00:16:27,140 --> 00:16:31,320
quickly and accurately and yeah I think

422
00:16:31,320 --> 00:16:33,030
that sums it up if anyone has any

423
00:16:33,030 --> 00:16:35,370
questions please let me know or if you

424
00:16:35,370 --> 00:16:36,750
want to know what this spirally thing is

425
00:16:36,750 --> 00:16:38,610
find me well I guess in the beer garden

426
00:16:38,610 --> 00:16:42,230
after all right let's some quick and

427
00:16:42,230 --> 00:16:46,350
we'll do Q&A as usual outside

428
00:16:46,350 --> 00:16:51,210
[Applause]

