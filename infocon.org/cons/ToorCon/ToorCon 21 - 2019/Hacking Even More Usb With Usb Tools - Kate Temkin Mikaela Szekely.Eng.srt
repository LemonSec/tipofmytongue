1
00:00:00,000 --> 00:00:03,419
hmm please welcome Kate kin and Makayla

2
00:00:03,419 --> 00:00:13,580
Kelly all right thank you

3
00:00:14,630 --> 00:00:17,550
how many of you think USB is black magic

4
00:00:17,550 --> 00:00:21,840
I love seeing the number of hands go

5
00:00:21,840 --> 00:00:23,820
down every time we have one of these

6
00:00:23,820 --> 00:00:26,789
because like four or five years ago to

7
00:00:26,789 --> 00:00:28,109
get this little closer four or five

8
00:00:28,109 --> 00:00:30,300
years ago that just seemed like it was

9
00:00:30,300 --> 00:00:32,790
pervasively the culture and the reason

10
00:00:32,790 --> 00:00:34,770
for that is because USB tools have

11
00:00:34,770 --> 00:00:37,649
historically sucked so if you want to go

12
00:00:37,649 --> 00:00:39,120
and do something with USB usually you're

13
00:00:39,120 --> 00:00:41,340
talking about buying really expensive

14
00:00:41,340 --> 00:00:44,040
equipment like a USB analyzer that can

15
00:00:44,040 --> 00:00:45,570
do high speeds still is something in a

16
00:00:45,570 --> 00:00:47,039
thousand dollar range if you're gonna

17
00:00:47,039 --> 00:00:49,379
buy something that comes with fancy

18
00:00:49,379 --> 00:00:50,969
clothes to our software and fancy

19
00:00:50,969 --> 00:00:53,340
hardware so a lot of this stuff we're

20
00:00:53,340 --> 00:00:54,989
doing now is talking about our hacking

21
00:00:54,989 --> 00:00:58,770
tools and our USB analysis tools that

22
00:00:58,770 --> 00:01:00,449
are meant to be extremely inexpensive

23
00:01:00,449 --> 00:01:04,229
and extremely open so to start off with

24
00:01:04,229 --> 00:01:05,610
our BIOS but we don't have time for that

25
00:01:05,610 --> 00:01:07,650
I have never given a 25-minute talk

26
00:01:07,650 --> 00:01:10,770
before I have rarely given an hour talk

27
00:01:10,770 --> 00:01:12,930
that's got an hour so that's a recent

28
00:01:12,930 --> 00:01:15,150
skill bios and all you have to know I'm

29
00:01:15,150 --> 00:01:17,460
Kate this is Michaela and were in the

30
00:01:17,460 --> 00:01:19,890
opposite opposite orientation here that

31
00:01:19,890 --> 00:01:21,450
we were there all right perfect

32
00:01:21,450 --> 00:01:24,030
so what is USB tools we were giving a

33
00:01:24,030 --> 00:01:30,200
presentation about our project USB tools

34
00:01:30,500 --> 00:01:33,689
about a year and about of the year on

35
00:01:33,689 --> 00:01:35,970
now I wanted to put a few of the

36
00:01:35,970 --> 00:01:37,290
different tools that I maintain

37
00:01:37,290 --> 00:01:39,119
including facedowns here if you've heard

38
00:01:39,119 --> 00:01:41,520
of that on to a place that was not my

39
00:01:41,520 --> 00:01:44,130
personal github I went onto github and

40
00:01:44,130 --> 00:01:46,920
started typing in things that vaguely

41
00:01:46,920 --> 00:01:49,079
sounded USB like and to my shock the

42
00:01:49,079 --> 00:01:52,290
name USB tools was available so we now

43
00:01:52,290 --> 00:01:54,030
have the USB tools organization on

44
00:01:54,030 --> 00:01:55,409
github because apparently we are the

45
00:01:55,409 --> 00:01:58,140
first people to make USB tools these

46
00:01:58,140 --> 00:02:00,780
open source ones projects include the

47
00:02:00,780 --> 00:02:03,990
USB which is a USB analyzer I have

48
00:02:03,990 --> 00:02:05,520
designed the name to be incredibly

49
00:02:05,520 --> 00:02:07,530
difficult to say it is not as difficult

50
00:02:07,530 --> 00:02:09,660
as the previous name there

51
00:02:09,660 --> 00:02:13,440
using which was USB - ste which were

52
00:02:13,440 --> 00:02:14,700
been literally impossible to pronounce

53
00:02:14,700 --> 00:02:19,140
near SBC so we have USB we have new map

54
00:02:19,140 --> 00:02:21,750
which is a fuzzing framework that's kind

55
00:02:21,750 --> 00:02:24,210
of brand new we have faced answer which

56
00:02:24,210 --> 00:02:28,350
is a emulation and hacking framework and

57
00:02:28,350 --> 00:02:30,360
so kind of what we're doing here is

58
00:02:30,360 --> 00:02:32,130
we're gonna kind of give you updates on

59
00:02:32,130 --> 00:02:33,900
all of those projects give you a really

60
00:02:33,900 --> 00:02:36,000
brief overviews and try to fit as much

61
00:02:36,000 --> 00:02:39,210
general USB content as we can in in 25

62
00:02:39,210 --> 00:02:44,250
minutes right so face dancer if you're

63
00:02:44,250 --> 00:02:47,250
not familiar with it is our emulation

64
00:02:47,250 --> 00:02:49,200
toolkit it's a toolkit that allows you

65
00:02:49,200 --> 00:02:51,390
to emulate USB devices from write in

66
00:02:51,390 --> 00:02:54,150
Python it is that as a tool that

67
00:02:54,150 --> 00:02:55,620
basically allows you to create USB

68
00:02:55,620 --> 00:02:57,090
devices really really quickly we've

69
00:02:57,090 --> 00:02:58,530
talked about it before at a lot of

70
00:02:58,530 --> 00:02:59,730
different places and talked about

71
00:02:59,730 --> 00:03:02,070
functionality and enables it is used by

72
00:03:02,070 --> 00:03:03,870
other frameworks including like you map

73
00:03:03,870 --> 00:03:06,540
you met to new map a whole line of

74
00:03:06,540 --> 00:03:08,910
things that we'll talk about for things

75
00:03:08,910 --> 00:03:11,910
like buzzing hosts right emulating

76
00:03:11,910 --> 00:03:13,800
devices in our to be able to do things

77
00:03:13,800 --> 00:03:16,140
like play NSA or to be able to reverse

78
00:03:16,140 --> 00:03:20,220
engineer drivers so kind of that's

79
00:03:20,220 --> 00:03:21,720
mostly been talked about but what's new

80
00:03:21,720 --> 00:03:23,459
with based answer is that for the first

81
00:03:23,459 --> 00:03:27,270
time we have a device that is high-speed

82
00:03:27,270 --> 00:03:29,010
face tensor that is available for people

83
00:03:29,010 --> 00:03:31,530
to buy you can always make your own the

84
00:03:31,530 --> 00:03:33,930
designs for a great FET are on github so

85
00:03:33,930 --> 00:03:37,650
I'm gonna skip the project pitch kind of

86
00:03:37,650 --> 00:03:39,959
talk about the longer-term stuff so

87
00:03:39,959 --> 00:03:42,000
stuff that is coming in the future

88
00:03:42,000 --> 00:03:44,580
we are going to definitely rewrite the

89
00:03:44,580 --> 00:03:46,200
face tensor toolkit to provide you some

90
00:03:46,200 --> 00:03:49,050
state-of-the-art USB emulation stuff in

91
00:03:49,050 --> 00:03:50,520
the future using all the new stuff

92
00:03:50,520 --> 00:03:53,489
python has and then in the longer term

93
00:03:53,489 --> 00:03:55,440
I'm hoping to have this thing running on

94
00:03:55,440 --> 00:03:57,150
things like raspberry PI's you don't

95
00:03:57,150 --> 00:03:58,920
even need special hardware to do USB

96
00:03:58,920 --> 00:04:01,700
emulation and then even longer-term

97
00:04:01,700 --> 00:04:03,660
hoping to break this down onto the

98
00:04:03,660 --> 00:04:05,940
really low-level hardware like so we can

99
00:04:05,940 --> 00:04:07,350
actually bring this to things like FPGAs

100
00:04:07,350 --> 00:04:09,120
that we can do things that USB

101
00:04:09,120 --> 00:04:10,290
controllers that are being used for

102
00:04:10,290 --> 00:04:11,970
emulation right now do will not let you

103
00:04:11,970 --> 00:04:15,000
do so that is I think all of the

104
00:04:15,000 --> 00:04:16,798
overview we can time we have her face to

105
00:04:16,798 --> 00:04:18,410
answer that's kind of old new

106
00:04:18,410 --> 00:04:20,390
is what is new news won't talk about us

107
00:04:20,390 --> 00:04:22,970
be new news would be the USB which is

108
00:04:22,970 --> 00:04:25,280
something that we only really introduced

109
00:04:25,280 --> 00:04:29,780
in the summer at teardown and it is our

110
00:04:29,780 --> 00:04:36,650
open-source USB analyzers that works

111
00:04:36,650 --> 00:04:39,080
with a variety of hardware Perkins that

112
00:04:39,080 --> 00:04:41,450
continued to be implemented and then

113
00:04:41,450 --> 00:04:47,360
also during yes so you loop the next

114
00:04:47,360 --> 00:04:49,790
slide here I would love to just call out

115
00:04:49,790 --> 00:04:51,230
our wonderful JPEG compression that we

116
00:04:51,230 --> 00:04:53,240
have going on here because hitting save

117
00:04:53,240 --> 00:04:55,100
and LibreOffice apparently means that

118
00:04:55,100 --> 00:04:56,660
you get wonderful artifacts well

119
00:04:56,660 --> 00:04:59,150
apparently JT apparently the JPEG

120
00:04:59,150 --> 00:05:02,960
compression is expensive so typically as

121
00:05:02,960 --> 00:05:07,190
I said USB hardware tools have been very

122
00:05:07,190 --> 00:05:09,530
very very expensive I think the cheapest

123
00:05:09,530 --> 00:05:11,450
USB analyzer that's commercially

124
00:05:11,450 --> 00:05:14,780
available is a tool that's by total

125
00:05:14,780 --> 00:05:17,240
phase the Beagle there are low speeds /

126
00:05:17,240 --> 00:05:21,110
full speed version goes $300 I think at

127
00:05:21,110 --> 00:05:22,670
the very minimum and that's not going to

128
00:05:22,670 --> 00:05:24,320
do most USB devices that are used today

129
00:05:24,320 --> 00:05:27,290
most USB devices are high-speed or what

130
00:05:27,290 --> 00:05:29,210
we call USB - commonly for the spell

131
00:05:29,210 --> 00:05:31,550
that introduced it and those things if

132
00:05:31,550 --> 00:05:33,080
you want the analyzer are gonna cost you

133
00:05:33,080 --> 00:05:35,750
more like a thousand dollars so so that

134
00:05:35,750 --> 00:05:37,280
is very hibbett of lis expensive it's a

135
00:05:37,280 --> 00:05:38,840
really high barrier to entry for those

136
00:05:38,840 --> 00:05:41,510
things but we can do analysis in

137
00:05:41,510 --> 00:05:44,960
software so if we want to we can

138
00:05:44,960 --> 00:05:47,150
actually do analysis for much much much

139
00:05:47,150 --> 00:05:49,490
cheaper than that the USB like many

140
00:05:49,490 --> 00:05:52,220
other tools has software analysis so it

141
00:05:52,220 --> 00:05:53,870
works with your operating system to give

142
00:05:53,870 --> 00:05:56,390
you a representation of the operating

143
00:05:56,390 --> 00:06:00,650
systems view of the kind of USB packets

144
00:06:00,650 --> 00:06:02,240
that are going on there and let me move

145
00:06:02,240 --> 00:06:04,820
my terminal over there so you can see

146
00:06:04,820 --> 00:06:07,030
this

147
00:06:07,160 --> 00:06:09,890
I can figure out which direction this is

148
00:06:09,890 --> 00:06:17,580
that I swear I can you didn't better

149
00:06:17,580 --> 00:06:22,320
yeah a little bit I got this I think my

150
00:06:22,320 --> 00:06:25,410
mouse is offset by like 10 pixels so

151
00:06:25,410 --> 00:06:29,600
let's run I'm gonna grab this one again

152
00:06:33,910 --> 00:06:37,100
so here we're just going to do a quick

153
00:06:37,100 --> 00:06:39,410
demo of software analysis with the USB

154
00:06:39,410 --> 00:06:42,640
it's assuming that we can manage to type

155
00:06:42,640 --> 00:06:46,790
which is always a challenge it is very

156
00:06:46,790 --> 00:07:03,290
large just press ctrl - soon we can

157
00:07:03,290 --> 00:07:05,570
actually see this on this interestingly

158
00:07:05,570 --> 00:07:08,150
resolution monitor if I take a USB

159
00:07:08,150 --> 00:07:11,000
device and plug it into my computer we

160
00:07:11,000 --> 00:07:14,240
can kind of get a breakdown of all the

161
00:07:14,240 --> 00:07:16,310
traffic that goes by this is not the

162
00:07:16,310 --> 00:07:18,880
full UI this is a very small monitor

163
00:07:18,880 --> 00:07:20,750
compared to how large you need to make

164
00:07:20,750 --> 00:07:22,250
the texture to be visible there's

165
00:07:22,250 --> 00:07:24,110
actually more UI going on the side but

166
00:07:24,110 --> 00:07:26,120
the important thing is that we actually

167
00:07:26,120 --> 00:07:27,920
take the data that is usually presented

168
00:07:27,920 --> 00:07:30,440
by tools like Wireshark and represent it

169
00:07:30,440 --> 00:07:33,410
as USB packets so if you go and look

170
00:07:33,410 --> 00:07:35,810
it's a tool like Wireshark you actually

171
00:07:35,810 --> 00:07:38,450
see all the individual requests that are

172
00:07:38,450 --> 00:07:41,750
going between your software stack and

173
00:07:41,750 --> 00:07:43,310
your operating system so you see things

174
00:07:43,310 --> 00:07:45,320
in terms of like USB requests blocks or

175
00:07:45,320 --> 00:07:47,419
herbs which don't really correspond at

176
00:07:47,419 --> 00:07:49,070
all well to the USB packets that are

177
00:07:49,070 --> 00:07:52,370
going through your wire so this view is

178
00:07:52,370 --> 00:07:54,800
a view that gives you a much much much

179
00:07:54,800 --> 00:07:58,820
more USB kind of oriented view but we

180
00:07:58,820 --> 00:08:00,200
can't actually see the individual

181
00:08:00,200 --> 00:08:02,419
packets so I plugged in a flash drive we

182
00:08:02,419 --> 00:08:03,950
can see the transfers that are happening

183
00:08:03,950 --> 00:08:05,870
here but every one of those transfers is

184
00:08:05,870 --> 00:08:07,040
actually made of a lot of low-level

185
00:08:07,040 --> 00:08:08,600
things that are happening on the wire

186
00:08:08,600 --> 00:08:10,820
but I'm certainly we're missing those

187
00:08:10,820 --> 00:08:12,410
because we're only seeing things from

188
00:08:12,410 --> 00:08:14,870
the operating systems perspective so if

189
00:08:14,870 --> 00:08:16,580
you're gonna start messing with a USB

190
00:08:16,580 --> 00:08:18,020
device and seeing where it starts to

191
00:08:18,020 --> 00:08:20,030
misbehave you're missing a lot of the

192
00:08:20,030 --> 00:08:21,410
detail that really shows you where

193
00:08:21,410 --> 00:08:23,330
things are broken so if you happen to

194
00:08:23,330 --> 00:08:25,070
get a buffer overflow that causes your

195
00:08:25,070 --> 00:08:27,169
device to spew out data over a USB like

196
00:08:27,169 --> 00:08:28,690
crazy like a lot of the glitching

197
00:08:28,690 --> 00:08:30,680
projects have showed in the past or a

198
00:08:30,680 --> 00:08:32,690
lot of software bugs have caused you're

199
00:08:32,690 --> 00:08:33,979
not gonna see that doesn't like this

200
00:08:33,979 --> 00:08:36,440
because this is all showing you what the

201
00:08:36,440 --> 00:08:38,690
operating system sees of things this is

202
00:08:38,690 --> 00:08:40,010
very good for reverse engineering if

203
00:08:40,010 --> 00:08:42,049
your device is working perfectly you can

204
00:08:42,049 --> 00:08:43,600
see what the operating system see

205
00:08:43,600 --> 00:08:47,320
it is less good for cases where you want

206
00:08:47,320 --> 00:08:52,000
to be able to work with the device in

207
00:08:52,000 --> 00:08:55,930
order to get a real packet level a real

208
00:08:55,930 --> 00:08:57,430
bite level view of what's going down the

209
00:08:57,430 --> 00:09:02,080
wire right so let me start up the

210
00:09:02,080 --> 00:09:08,470
presentation again I think I had a

211
00:09:08,470 --> 00:09:09,580
function of five instead of function

212
00:09:09,580 --> 00:09:16,060
ship to five but it's okay so there are

213
00:09:16,060 --> 00:09:18,730
definite limitations to those kind of

214
00:09:18,730 --> 00:09:21,190
models what we really need to be able to

215
00:09:21,190 --> 00:09:23,680
do something that is a fully-featured

216
00:09:23,680 --> 00:09:26,140
kind of analysis is a piece of hardware

217
00:09:26,140 --> 00:09:29,620
and solutions that exist for creating

218
00:09:29,620 --> 00:09:31,630
these hardware analyzers tend to be

219
00:09:31,630 --> 00:09:33,820
extremely complicated they tend to use

220
00:09:33,820 --> 00:09:36,340
things like FPGAs that are very

221
00:09:36,340 --> 00:09:38,440
expensive that drive large buffers of

222
00:09:38,440 --> 00:09:41,650
memory they use a lot of really over

223
00:09:41,650 --> 00:09:43,270
engineered hardware to do something it's

224
00:09:43,270 --> 00:09:46,750
a relatively simple task and so about a

225
00:09:46,750 --> 00:09:48,760
year ago I'm thinking about this and

226
00:09:48,760 --> 00:09:52,600
working on various tools we can use to

227
00:09:52,600 --> 00:09:55,360
get a view of signals I started thinking

228
00:09:55,360 --> 00:09:57,790
about how we could do high speed

229
00:09:57,790 --> 00:10:00,760
analyzer for significantly cheaper and

230
00:10:00,760 --> 00:10:02,740
it turns out that we have nice

231
00:10:02,740 --> 00:10:04,720
microcontrollers that do things like let

232
00:10:04,720 --> 00:10:07,780
you pipe really high speed serial data

233
00:10:07,780 --> 00:10:11,470
over to your host that USB high-speed

234
00:10:11,470 --> 00:10:14,830
rates so we can dump data to a host very

235
00:10:14,830 --> 00:10:17,230
very very quickly those are things that

236
00:10:17,230 --> 00:10:19,660
enable I think devices like hack RF

237
00:10:19,660 --> 00:10:22,720
which is just a basically the USB slider

238
00:10:22,720 --> 00:10:24,400
that is a really fast pipe for taking

239
00:10:24,400 --> 00:10:26,860
parallel data and shifting it over to

240
00:10:26,860 --> 00:10:28,990
the host so and these things are not

241
00:10:28,990 --> 00:10:31,030
that expensive microcontrollers like

242
00:10:31,030 --> 00:10:32,620
this for like four or five bucks in

243
00:10:32,620 --> 00:10:35,470
quantity so my controller like that

244
00:10:35,470 --> 00:10:37,150
really doesn't need to be this whole

245
00:10:37,150 --> 00:10:40,390
gigantically engineering thing and if

246
00:10:40,390 --> 00:10:43,870
you take a look at a USB UOP ëifí it is

247
00:10:43,870 --> 00:10:45,760
essentially a parallel bus that spits

248
00:10:45,760 --> 00:10:48,910
out your USB data and at 60 megahertz

249
00:10:48,910 --> 00:10:52,840
and a lot of so a lot of that data and a

250
00:10:52,840 --> 00:10:53,920
few

251
00:10:53,920 --> 00:10:55,750
encoded control signals I tell you

252
00:10:55,750 --> 00:10:57,100
things like where a packet starts and

253
00:10:57,100 --> 00:10:59,140
ends but really what you have here is

254
00:10:59,140 --> 00:11:01,240
this parallel bus that is spewing out

255
00:11:01,240 --> 00:11:03,550
USB data as best as you can see it's

256
00:11:03,550 --> 00:11:05,579
telling you everything that is on that

257
00:11:05,579 --> 00:11:07,810
that's going physically through that

258
00:11:07,810 --> 00:11:10,839
wire that device costs about a dollar

259
00:11:10,839 --> 00:11:13,209
those are the things people put on there

260
00:11:13,209 --> 00:11:15,279
but with our microcontrollers with their

261
00:11:15,279 --> 00:11:17,320
systems in order to get their devices to

262
00:11:17,320 --> 00:11:21,310
talk USB so in the end this is

263
00:11:21,310 --> 00:11:22,779
essentially the thing that's designed to

264
00:11:22,779 --> 00:11:25,779
do the USB interfacing and so if we have

265
00:11:25,779 --> 00:11:26,980
something that's basically taking

266
00:11:26,980 --> 00:11:28,390
everything that's on the wire and

267
00:11:28,390 --> 00:11:30,970
converting it to nice easy to read

268
00:11:30,970 --> 00:11:33,040
digital signals for us and we have

269
00:11:33,040 --> 00:11:35,110
something that's absolutely designed for

270
00:11:35,110 --> 00:11:38,320
taking those nice parallel USB signals

271
00:11:38,320 --> 00:11:40,149
and dumping them on the wire we have a

272
00:11:40,149 --> 00:11:41,920
recipe between these two things for a

273
00:11:41,920 --> 00:11:44,649
USB analyzer only thing we can add

274
00:11:44,649 --> 00:11:46,870
that's kind of optional here is the

275
00:11:46,870 --> 00:11:49,420
ability to buffer some of those packets

276
00:11:49,420 --> 00:11:52,089
so if your host can't pull down data

277
00:11:52,089 --> 00:11:54,640
from the USB 5 fast enough you'll be

278
00:11:54,640 --> 00:11:56,769
ability to buffer things and get take

279
00:11:56,769 --> 00:11:58,300
advantage of the fact that sometimes USB

280
00:11:58,300 --> 00:11:59,980
may be very busy and sometimes it may be

281
00:11:59,980 --> 00:12:02,350
not right USB is typically a bursty

282
00:12:02,350 --> 00:12:04,510
protocol so if you buffer that data you

283
00:12:04,510 --> 00:12:08,199
can kind of compensate for those bursts

284
00:12:08,199 --> 00:12:09,940
of like frenetic activity followed by

285
00:12:09,940 --> 00:12:15,459
the lulls that characterize USB so

286
00:12:15,459 --> 00:12:17,050
essentially this schematic is the

287
00:12:17,050 --> 00:12:19,750
schematic for the device that I built

288
00:12:19,750 --> 00:12:22,329
this is essentially this device is an

289
00:12:22,329 --> 00:12:25,420
add-on for great FET which is a USB

290
00:12:25,420 --> 00:12:27,399
board that contains exactly that my

291
00:12:27,399 --> 00:12:30,010
controller all that this is is a USB

292
00:12:30,010 --> 00:12:32,440
five which is connected to the

293
00:12:32,440 --> 00:12:34,390
microcontroller all this hardware really

294
00:12:34,390 --> 00:12:36,790
means we took these wires here coming

295
00:12:36,790 --> 00:12:39,100
off of that USB 5 that physical layer

296
00:12:39,100 --> 00:12:41,320
chip and connected them directly to our

297
00:12:41,320 --> 00:12:46,720
microcontroller so not too much later we

298
00:12:46,720 --> 00:12:48,050
had hardware

299
00:12:48,050 --> 00:12:50,360
and so this is the routing for the

300
00:12:50,360 --> 00:12:52,040
hardware you can see it's pretty I

301
00:12:52,040 --> 00:12:55,370
happen to think it looks nice and even

302
00:12:55,370 --> 00:13:00,200
more pretty is this thing in 3d so this

303
00:13:00,200 --> 00:13:01,490
is essentially a render of what the

304
00:13:01,490 --> 00:13:02,420
board looks like

305
00:13:02,420 --> 00:13:04,910
it feels vaguely like cheating putting a

306
00:13:04,910 --> 00:13:07,790
render of a board up but I have a

307
00:13:07,790 --> 00:13:09,620
physical board right here so I'm

308
00:13:09,620 --> 00:13:13,579
cheating less than I could be the actual

309
00:13:13,579 --> 00:13:15,230
3d rendering tools is a little bit

310
00:13:15,230 --> 00:13:17,570
better at capturing images than I am

311
00:13:17,570 --> 00:13:19,250
I've been sitting there with an iPhone

312
00:13:19,250 --> 00:13:20,959
photo and this is the back which you can

313
00:13:20,959 --> 00:13:24,470
see I've kind of got my snark on but so

314
00:13:24,470 --> 00:13:26,300
this board is called great fat

315
00:13:26,300 --> 00:13:28,760
rhododendron and great fit rhododendron

316
00:13:28,760 --> 00:13:32,950
is a completely free as in freedom

317
00:13:32,950 --> 00:13:35,540
open-source USB analyzer it's free

318
00:13:35,540 --> 00:13:37,190
open-source software you can take it you

319
00:13:37,190 --> 00:13:38,839
can grab it you can do what you want

320
00:13:38,839 --> 00:13:41,000
there is exactly one significant

321
00:13:41,000 --> 00:13:43,430
component on it and though this is an

322
00:13:43,430 --> 00:13:45,050
add-on for great FET there's literally

323
00:13:45,050 --> 00:13:47,480
nothing stopping you from adding these

324
00:13:47,480 --> 00:13:50,149
two boards yourself I have another board

325
00:13:50,149 --> 00:13:52,270
that someone made that is actually a

326
00:13:52,270 --> 00:13:57,110
similar microcontroller stuck onto a LPC

327
00:13:57,110 --> 00:13:58,520
same my controller here say my

328
00:13:58,520 --> 00:14:01,310
controller same fie and it happens to be

329
00:14:01,310 --> 00:14:03,800
almost the same thing just sitting there

330
00:14:03,800 --> 00:14:05,660
in a forum someone else may that's an

331
00:14:05,660 --> 00:14:08,959
almost the USB analyzer so if they solve

332
00:14:08,959 --> 00:14:10,459
a couple of design issues they have at

333
00:14:10,459 --> 00:14:11,959
that one it would be like a perfect USB

334
00:14:11,959 --> 00:14:14,180
analyzer in the same way this one is so

335
00:14:14,180 --> 00:14:16,399
the point here is that if you have on my

336
00:14:16,399 --> 00:14:18,589
controller that can go very fast like

337
00:14:18,589 --> 00:14:20,180
I'm biased towards great effect because

338
00:14:20,180 --> 00:14:21,260
that's what I develop on but there's

339
00:14:21,260 --> 00:14:22,910
lots of different microcontrollers that

340
00:14:22,910 --> 00:14:25,910
can do this and you have a USB five you

341
00:14:25,910 --> 00:14:28,880
can create a USB analyzer again this

342
00:14:28,880 --> 00:14:31,040
main part right here the thing that's

343
00:14:31,040 --> 00:14:32,390
really driving everything is actually

344
00:14:32,390 --> 00:14:34,640
one of the cheapest parts involved the

345
00:14:34,640 --> 00:14:36,500
connectors here they go speak connectors

346
00:14:36,500 --> 00:14:38,420
the USB headers are significantly more

347
00:14:38,420 --> 00:14:41,420
money than the actual Phi is so if

348
00:14:41,420 --> 00:14:42,470
you're looking at the Bill of Materials

349
00:14:42,470 --> 00:14:43,850
on here like not counting the resistors

350
00:14:43,850 --> 00:14:46,190
and LEDs like the big line items here

351
00:14:46,190 --> 00:14:49,519
are like USB connector and that's always

352
00:14:49,519 --> 00:14:50,600
the way it isn't you're designing

353
00:14:50,600 --> 00:14:52,520
hardware so

354
00:14:52,520 --> 00:14:55,640
this is an extremely inexpensive set of

355
00:14:55,640 --> 00:14:57,890
components stuck to a board and it's a

356
00:14:57,890 --> 00:15:00,290
USB analyzer there's absolutely no

357
00:15:00,290 --> 00:15:03,680
reason why something like this should be

358
00:15:03,680 --> 00:15:06,850
the kind of thing that is that expensive

359
00:15:06,850 --> 00:15:09,890
so if you want to narrow it I can

360
00:15:09,890 --> 00:15:18,020
actually go into a demonstration sure so

361
00:15:18,020 --> 00:15:19,940
if we return to the terminal with the

362
00:15:19,940 --> 00:15:23,450
horrific a large font on the horrific ly

363
00:15:23,450 --> 00:15:27,620
small resolution display then hopefully

364
00:15:27,620 --> 00:15:31,820
we can get a demo working of using of

365
00:15:31,820 --> 00:15:34,670
analyzing USB using rhododendron which

366
00:15:34,670 --> 00:15:37,910
is the board that she just talked about

367
00:15:37,910 --> 00:15:39,770
we'll start off analyzing a full-speed

368
00:15:39,770 --> 00:15:41,390
device so I'm gonna plug in a full speed

369
00:15:41,390 --> 00:15:42,649
device because that happens to be the

370
00:15:42,649 --> 00:15:44,720
device that I have here I can switch to

371
00:15:44,720 --> 00:15:46,910
a high-speed device in a second but the

372
00:15:46,910 --> 00:15:48,290
data actually goes a bit slower on

373
00:15:48,290 --> 00:15:49,820
full-speed devices which makes it a

374
00:15:49,820 --> 00:15:50,990
little bit better for putting these

375
00:15:50,990 --> 00:15:53,240
devices on the screen if I plug in a

376
00:15:53,240 --> 00:15:54,860
flash drive and I don't slew it by like

377
00:15:54,860 --> 00:15:56,630
rapidly unplugging the thing you're

378
00:15:56,630 --> 00:15:59,149
gonna see just data flying by but I have

379
00:15:59,149 --> 00:16:00,680
a full speed device that doesn't do much

380
00:16:00,680 --> 00:16:03,320
of anything until you start using

381
00:16:03,320 --> 00:16:05,000
applications it's the perfect thing for

382
00:16:05,000 --> 00:16:07,820
demonstrating stuff like this now I do

383
00:16:07,820 --> 00:16:09,529
have one of those fancy laptops with the

384
00:16:09,529 --> 00:16:12,529
USB C and very few USB ports so I'm

385
00:16:12,529 --> 00:16:14,180
hoping that this thing doesn't make you

386
00:16:14,180 --> 00:16:16,700
plug it in and unplug it all times but

387
00:16:16,700 --> 00:16:18,649
if you were to see here physically on my

388
00:16:18,649 --> 00:16:20,360
table connected to the graph it

389
00:16:20,360 --> 00:16:22,640
rhododendron I have a little full-speed

390
00:16:22,640 --> 00:16:25,040
USB device that's plugged in and kind of

391
00:16:25,040 --> 00:16:27,529
hold this up so essentially just a

392
00:16:27,529 --> 00:16:28,880
device plugged right into my USB

393
00:16:28,880 --> 00:16:30,589
analyzer I think he just kind of plugged

394
00:16:30,589 --> 00:16:34,190
in I didn't plug it nice turns out

395
00:16:34,190 --> 00:16:37,850
devices wanna be plugged in well not all

396
00:16:37,850 --> 00:16:41,240
of them this one does alright let's try

397
00:16:41,240 --> 00:16:42,730
that again

398
00:16:42,730 --> 00:16:47,720
hmm alright and on the other end I have

399
00:16:47,720 --> 00:16:49,100
a USB cable and I'm going to plug into

400
00:16:49,100 --> 00:16:55,459
my computer assuming this works so in

401
00:16:55,459 --> 00:16:57,079
about a second one it actually captures

402
00:16:57,079 --> 00:16:58,640
the full buffer we'll start seeing some

403
00:16:58,640 --> 00:17:01,220
USB data there we go this USB data is

404
00:17:01,220 --> 00:17:02,630
coming from a device that's sitting

405
00:17:02,630 --> 00:17:03,710
right here using

406
00:17:03,710 --> 00:17:06,380
a $1 fide chip soldered to a board

407
00:17:06,380 --> 00:17:08,690
connected to a fancy mic controller so

408
00:17:08,690 --> 00:17:11,119
all of this data that's coming in here

409
00:17:11,119 --> 00:17:13,220
is being accomplished by something that

410
00:17:13,220 --> 00:17:22,520
is super super super cheap and this data

411
00:17:22,520 --> 00:17:24,560
is complete we don't see we're not

412
00:17:24,560 --> 00:17:26,900
losing all the information that we lose

413
00:17:26,900 --> 00:17:28,790
that the operating system wants to hide

414
00:17:28,790 --> 00:17:31,580
from us from USB because we're using a

415
00:17:31,580 --> 00:17:35,780
hardware analyzer so if we expand any of

416
00:17:35,780 --> 00:17:38,060
these you can get right down into the

417
00:17:38,060 --> 00:17:41,270
low-level packet deep levels so yeah you

418
00:17:41,270 --> 00:17:42,860
can see everything down to the fact that

419
00:17:42,860 --> 00:17:45,680
when this individual transfer when I

420
00:17:45,680 --> 00:17:47,360
tried to read information about the

421
00:17:47,360 --> 00:17:49,070
device when you plug the device in it

422
00:17:49,070 --> 00:17:51,770
says okay I am a USB network card or I

423
00:17:51,770 --> 00:17:53,750
have a USB to serial adapter and it

424
00:17:53,750 --> 00:17:56,060
exchanges that information this in this

425
00:17:56,060 --> 00:17:57,740
case the device is saying hey give me

426
00:17:57,740 --> 00:17:59,330
information what kind of device you are

427
00:17:59,330 --> 00:18:01,670
we can see when the host requests that

428
00:18:01,670 --> 00:18:03,590
the first time it asks the device for

429
00:18:03,590 --> 00:18:05,450
data the device says I don't have any

430
00:18:05,450 --> 00:18:07,520
ready for you yet second time says I

431
00:18:07,520 --> 00:18:08,870
don't have anything ready for you yet

432
00:18:08,870 --> 00:18:11,000
and the third time it says ok here's the

433
00:18:11,000 --> 00:18:14,540
data everything's ok so we can actually

434
00:18:14,540 --> 00:18:16,910
see all of these packets individually by

435
00:18:16,910 --> 00:18:19,130
byte flying over the wire because we are

436
00:18:19,130 --> 00:18:20,870
talking directly to a device that is

437
00:18:20,870 --> 00:18:24,560
meant to be talking USB so this isn't

438
00:18:24,560 --> 00:18:26,180
this is like an incredible piece of

439
00:18:26,180 --> 00:18:27,710
technology that's one dollar that's the

440
00:18:27,710 --> 00:18:30,230
cheapest part of a USB analyzer the only

441
00:18:30,230 --> 00:18:31,850
other thing you're really missing in or

442
00:18:31,850 --> 00:18:33,590
to have a USB analyzer if you have

443
00:18:33,590 --> 00:18:34,970
something that can talk high-speed USB

444
00:18:34,970 --> 00:18:37,730
and you have something that it's like I

445
00:18:37,730 --> 00:18:39,040
might control that sits on a high-speed

446
00:18:39,040 --> 00:18:40,880
bus and actually gives you good

447
00:18:40,880 --> 00:18:42,800
throughput and you have some like a PHY

448
00:18:42,800 --> 00:18:46,520
is the software and we have open sourced

449
00:18:46,520 --> 00:18:48,770
our USB analyzer software it is sitting

450
00:18:48,770 --> 00:18:52,040
there on github github.com / USB tools /

451
00:18:52,040 --> 00:18:54,050
the USB the link is in these slides so

452
00:18:54,050 --> 00:18:56,180
you can actually go and grab that

453
00:18:56,180 --> 00:18:58,610
software and that software works on

454
00:18:58,610 --> 00:19:01,370
boards other than the one we've just

455
00:19:01,370 --> 00:19:03,080
created it works with a few other

456
00:19:03,080 --> 00:19:06,020
open-source USB tools that have been

457
00:19:06,020 --> 00:19:07,010
created that had an analyzer

458
00:19:07,010 --> 00:19:09,800
functionality one of them being open V

459
00:19:09,800 --> 00:19:12,510
slim which was an older USB analyzer

460
00:19:12,510 --> 00:19:15,230
better go which I have a slide for that

461
00:19:15,230 --> 00:19:16,650
that's okay

462
00:19:16,650 --> 00:19:20,010
another tool that's recently been added

463
00:19:20,010 --> 00:19:22,050
is actually Colin O'Flynn who does a lot

464
00:19:22,050 --> 00:19:23,550
of glitching work if you work with chip

465
00:19:23,550 --> 00:19:24,150
whisperer

466
00:19:24,150 --> 00:19:26,940
has a new USB glitching board that is

467
00:19:26,940 --> 00:19:29,130
coming out I think later this year I'm

468
00:19:29,130 --> 00:19:31,020
not sure of his timeline to went through

469
00:19:31,020 --> 00:19:33,240
crowd supply that is a board that has a

470
00:19:33,240 --> 00:19:36,120
capability to do USB analysis because it

471
00:19:36,120 --> 00:19:39,630
has an FPGA and a USB file on it and so

472
00:19:39,630 --> 00:19:40,530
that is something that we've actually

473
00:19:40,530 --> 00:19:42,540
already merged support and do so if you

474
00:19:42,540 --> 00:19:44,750
get that you can do USB analysis with it

475
00:19:44,750 --> 00:19:51,960
so let me switch back to this so let's

476
00:19:51,960 --> 00:19:55,320
rhododendron and I'm supposed to say

477
00:19:55,320 --> 00:19:57,720
something like more like rhododendron

478
00:19:57,720 --> 00:20:00,030
and then put on my obnoxious speaker

479
00:20:00,030 --> 00:20:03,600
glasses except for one of our two TVs

480
00:20:03,600 --> 00:20:07,950
half of it is cut out yes right so I

481
00:20:07,950 --> 00:20:10,950
think you need to cut one lens out for

482
00:20:10,950 --> 00:20:12,270
the glasses to make the joke work I

483
00:20:12,270 --> 00:20:13,980
think that what I've learned is that at

484
00:20:13,980 --> 00:20:15,330
this particular venue I need to put up

485
00:20:15,330 --> 00:20:16,620
my words a little bit higher on the

486
00:20:16,620 --> 00:20:19,950
screen so other USB tool things that we

487
00:20:19,950 --> 00:20:22,560
have been working on recently include

488
00:20:22,560 --> 00:20:26,070
new map new map is a it's essentially

489
00:20:26,070 --> 00:20:28,710
the new you map it is I think in some of

490
00:20:28,710 --> 00:20:30,750
the places written with rock dots on the

491
00:20:30,750 --> 00:20:33,750
U so with an unlock those are definitely

492
00:20:33,750 --> 00:20:36,690
a dig at Dominic spills rock dance which

493
00:20:36,690 --> 00:20:39,270
have appeared at a bunch of events I

494
00:20:39,270 --> 00:20:41,490
don't know if I kept them and most the

495
00:20:41,490 --> 00:20:44,730
documentation because they are very

496
00:20:44,730 --> 00:20:47,280
silly you'll have to add them back so

497
00:20:47,280 --> 00:20:49,920
new map is a very very very new tool in

498
00:20:49,920 --> 00:20:52,110
which I am not intended in which I mean

499
00:20:52,110 --> 00:20:54,360
I literally forked you map to and its

500
00:20:54,360 --> 00:20:56,250
support for face dancer to so added

501
00:20:56,250 --> 00:20:58,080
support for face dancer on newer boards

502
00:20:58,080 --> 00:21:00,660
and then left it alone I have still to

503
00:21:00,660 --> 00:21:02,340
make improvements to it and add features

504
00:21:02,340 --> 00:21:05,430
but it does do things that you map was

505
00:21:05,430 --> 00:21:07,590
capable of doing like identifying what

506
00:21:07,590 --> 00:21:10,620
kind of devices a host success so using

507
00:21:10,620 --> 00:21:12,630
face tensors emulation capabilities if

508
00:21:12,630 --> 00:21:14,670
you plug a face tensor device into a

509
00:21:14,670 --> 00:21:16,950
host it will rapidly pretend to be a

510
00:21:16,950 --> 00:21:19,650
bunch of different devices and then as

511
00:21:19,650 --> 00:21:21,480
it does that see ok the host was willing

512
00:21:21,480 --> 00:21:22,710
to talk to me as a USB to serial

513
00:21:22,710 --> 00:21:23,810
converter

514
00:21:23,810 --> 00:21:25,520
is willing to talk to me as a USB flash

515
00:21:25,520 --> 00:21:27,320
drive and once you have that information

516
00:21:27,320 --> 00:21:30,590
you can go and do things like they take

517
00:21:30,590 --> 00:21:33,650
the devices and modify them so that your

518
00:21:33,650 --> 00:21:35,600
so you take an emulation you can start

519
00:21:35,600 --> 00:21:36,740
saying well what if I'm not exactly a

520
00:21:36,740 --> 00:21:38,360
compliant USB a serial converter that

521
00:21:38,360 --> 00:21:41,630
stuff you can do based on new map and

522
00:21:41,630 --> 00:21:43,940
face to answer emulation so it is very

523
00:21:43,940 --> 00:21:48,190
very very much a work in progress so

524
00:21:48,490 --> 00:21:51,650
what should new map be ideally it will

525
00:21:51,650 --> 00:21:53,660
be a much more comprehensive tool for

526
00:21:53,660 --> 00:21:56,810
host and device fuzzing and ideally it

527
00:21:56,810 --> 00:21:58,340
will have things like you map the

528
00:21:58,340 --> 00:22:00,200
original you map but not you map to had

529
00:22:00,200 --> 00:22:01,520
a really cool feature where you could

530
00:22:01,520 --> 00:22:04,040
plug it in to take your face to answer

531
00:22:04,040 --> 00:22:07,100
device plug it into another looking into

532
00:22:07,100 --> 00:22:09,530
a host and be able to identify what

533
00:22:09,530 --> 00:22:11,240
operating system that host is running

534
00:22:11,240 --> 00:22:13,910
turns out if you plug a USB device into

535
00:22:13,910 --> 00:22:16,100
a variety of different hosts they all do

536
00:22:16,100 --> 00:22:18,260
slightly different things in terms of

537
00:22:18,260 --> 00:22:21,080
getting that device up and running so if

538
00:22:21,080 --> 00:22:22,790
you take a look at a USB dump you can

539
00:22:22,790 --> 00:22:25,430
identify for example this device is a

540
00:22:25,430 --> 00:22:28,970
device that is running on Mac OS or

541
00:22:28,970 --> 00:22:30,860
running on Linux or running on Windows

542
00:22:30,860 --> 00:22:32,660
so that kind of host identification is

543
00:22:32,660 --> 00:22:34,790
awesome because in some cases you cannot

544
00:22:34,790 --> 00:22:37,280
just identify this a Linux device but in

545
00:22:37,280 --> 00:22:38,960
this is a Linux device running a27

546
00:22:38,960 --> 00:22:40,580
kernel that hasn't been patched in 60

547
00:22:40,580 --> 00:22:44,510
years so that is something that we'd

548
00:22:44,510 --> 00:22:46,490
like to add back to that that existed in

549
00:22:46,490 --> 00:22:48,830
you map 1 ideally it will exist again in

550
00:22:48,830 --> 00:22:51,440
new map and one more thing that it

551
00:22:51,440 --> 00:22:53,840
should be that it's I think sort of is

552
00:22:53,840 --> 00:22:56,030
right now is functional so that is very

553
00:22:56,030 --> 00:22:58,850
much a new thing but hopefully that will

554
00:22:58,850 --> 00:23:02,390
grow into kind of fill the gap that you

555
00:23:02,390 --> 00:23:03,860
map to left when it sees to be

556
00:23:03,860 --> 00:23:06,680
maintained all right I do have a demo of

557
00:23:06,680 --> 00:23:08,720
doing high speed stuff with rhododendron

558
00:23:08,720 --> 00:23:11,030
I also do want to before I do is that

559
00:23:11,030 --> 00:23:13,670
talk really briefly for like about a

560
00:23:13,670 --> 00:23:16,340
minute about some of the other tools we

561
00:23:16,340 --> 00:23:18,680
have so I've talked about face dance or

562
00:23:18,680 --> 00:23:20,990
any USB we have a couple of other things

563
00:23:20,990 --> 00:23:23,660
that are in here including a driver for

564
00:23:23,660 --> 00:23:25,640
open Vizslas so if you've been if you

565
00:23:25,640 --> 00:23:26,900
had an open vehicle if you backed the

566
00:23:26,900 --> 00:23:28,820
Kickstarter like ten years ago and it's

567
00:23:28,820 --> 00:23:31,040
been sitting collecting dust then we

568
00:23:31,040 --> 00:23:33,080
have a fully open-source driver for that

569
00:23:33,080 --> 00:23:35,600
that's proper Python this is another USB

570
00:23:35,600 --> 00:23:36,480
analyzed

571
00:23:36,480 --> 00:23:38,520
for that you can buy right now so if you

572
00:23:38,520 --> 00:23:41,100
very much desperately want a high-speed

573
00:23:41,100 --> 00:23:43,170
USB analyzer that costs you less than

574
00:23:43,170 --> 00:23:46,500
$300 for 120 euros you can buy one of

575
00:23:46,500 --> 00:23:48,780
the leftover open Vizslas so you can go

576
00:23:48,780 --> 00:23:50,850
right now and buy a you would be

577
00:23:50,850 --> 00:23:52,800
protocol analyzer that is driven by our

578
00:23:52,800 --> 00:23:55,290
USB software so you can go and do this

579
00:23:55,290 --> 00:23:59,610
kind of analysis today anything work for

580
00:23:59,610 --> 00:24:01,650
getting about oh I don't think still

581
00:24:01,650 --> 00:24:03,600
think so awesome

582
00:24:03,600 --> 00:24:06,960
so also worth noting we have a full set

583
00:24:06,960 --> 00:24:09,030
of open-source USB course materials

584
00:24:09,030 --> 00:24:11,310
which is available online so if you go

585
00:24:11,310 --> 00:24:13,950
to USB see that TF that is if you've

586
00:24:13,950 --> 00:24:15,660
spelled USB CTF but move the dot over

587
00:24:15,660 --> 00:24:20,220
one place that is the main URL for our

588
00:24:20,220 --> 00:24:23,910
trainings which we offer a couple of

589
00:24:23,910 --> 00:24:24,960
times a year and those are all

590
00:24:24,960 --> 00:24:27,660
open-source we also have mini USB dat

591
00:24:27,660 --> 00:24:29,280
CTF which is the eye is completely

592
00:24:29,280 --> 00:24:31,650
subsumed by the monitor bezel but that

593
00:24:31,650 --> 00:24:34,590
is a workshop version that we give that

594
00:24:34,590 --> 00:24:37,640
workshop many times a year that is a

595
00:24:37,640 --> 00:24:40,080
essentially a short form introduction to

596
00:24:40,080 --> 00:24:41,790
USB both of those are completely

597
00:24:41,790 --> 00:24:43,770
open-source you can see the source for

598
00:24:43,770 --> 00:24:45,990
those workshops at hacking us be the

599
00:24:45,990 --> 00:24:48,030
kind of sister organization to USB tools

600
00:24:48,030 --> 00:24:51,120
and I think we have exactly one minute

601
00:24:51,120 --> 00:24:54,690
left here one more demonstration as I

602
00:24:54,690 --> 00:24:56,160
set up the demonstration do you want to

603
00:24:56,160 --> 00:25:03,710
field questions start sure questions yes

604
00:25:03,710 --> 00:25:07,890
so be the great fret if it was built to

605
00:25:07,890 --> 00:25:09,810
have neighbors which are just add-on

606
00:25:09,810 --> 00:25:13,740
boards for the main base board and the

607
00:25:13,740 --> 00:25:15,540
all of the great fret boards are code

608
00:25:15,540 --> 00:25:19,110
names based on flowers going a to z so

609
00:25:19,110 --> 00:25:20,790
by the time that we had designed

610
00:25:20,790 --> 00:25:24,180
rhododendron we were already that far in

611
00:25:24,180 --> 00:25:26,430
the alphabet we had to think of a flower

612
00:25:26,430 --> 00:25:28,080
that started with R and didn't want to

613
00:25:28,080 --> 00:25:31,740
go with the with Rose because brighter

614
00:25:31,740 --> 00:25:37,310
dendron is much cooler anything else

615
00:25:40,010 --> 00:25:45,330
yes would it would it ever make sense to

616
00:25:45,330 --> 00:25:48,300
include like low-level USB packet

617
00:25:48,300 --> 00:25:50,220
interception and modification in this

618
00:25:50,220 --> 00:25:51,660
tool is that something that's possible

619
00:25:51,660 --> 00:25:53,700
that's something that's not really

620
00:25:53,700 --> 00:25:56,250
possible with rhododendron but is

621
00:25:56,250 --> 00:25:59,070
something that we that is absolutely

622
00:25:59,070 --> 00:26:04,050
possible with so a previous topic I've

623
00:26:04,050 --> 00:26:05,430
given to talk about is man-in-the-middle

624
00:26:05,430 --> 00:26:08,220
link us B data and if you look in face

625
00:26:08,220 --> 00:26:10,620
to answer there is a tool called USB

626
00:26:10,620 --> 00:26:12,330
proxy which is an evolution of a tool

627
00:26:12,330 --> 00:26:13,920
originally created by Dominic's pill

628
00:26:13,920 --> 00:26:15,810
that lets you man in the middle USB data

629
00:26:15,810 --> 00:26:18,480
and modify it so you can actually go and

630
00:26:18,480 --> 00:26:21,180
manipulate USB data on the fly I'm

631
00:26:21,180 --> 00:26:23,520
getting nice angry yet red zeros here

632
00:26:23,520 --> 00:26:25,620
you can modify USB data on the fly using

633
00:26:25,620 --> 00:26:27,930
that tool so you can actually go and see

634
00:26:27,930 --> 00:26:30,540
the packets as they run through the wire

635
00:26:30,540 --> 00:26:33,990
and then modify them so assuming this

636
00:26:33,990 --> 00:26:36,720
actually wants to work if I reset the

637
00:26:36,720 --> 00:26:40,260
border probably what the that I plug in

638
00:26:40,260 --> 00:26:43,770
the flash drive doesn't matter I'm not

639
00:26:43,770 --> 00:26:46,530
gonna do live stage debugging I have to

640
00:26:46,530 --> 00:26:48,060
question as I already got one demo here

641
00:26:48,060 --> 00:26:51,480
off anyway that's perfect okay Saved by

642
00:26:51,480 --> 00:26:52,040
the Bell

643
00:26:52,040 --> 00:26:55,810
the thank you

644
00:26:55,810 --> 00:27:00,279
[Applause]

645
00:27:00,279 --> 00:27:04,130
if you if you want to corner them and

646
00:27:04,130 --> 00:27:06,519
try to get this demo working with them

647
00:27:06,519 --> 00:27:09,350
and or would like to ask them further

648
00:27:09,350 --> 00:27:12,409
questions they will be out that way

649
00:27:12,409 --> 00:27:15,139
somewhere over there probably where

650
00:27:15,139 --> 00:27:17,179
there may be some seating and or food

651
00:27:17,179 --> 00:27:19,880
and/or beverage and we'll all just have

652
00:27:19,880 --> 00:27:23,919
a chat out there thank you so much

653
00:27:24,460 --> 00:27:24,620
[Applause]

654
00:27:24,620 --> 00:27:27,739
[Music]

