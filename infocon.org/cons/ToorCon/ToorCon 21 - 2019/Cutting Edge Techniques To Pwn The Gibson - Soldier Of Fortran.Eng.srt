1
00:00:02,029 --> 00:00:05,609
alright hello everyone this is Phil the

2
00:00:05,609 --> 00:00:07,290
aam he is new to San Diego and this is

3
00:00:07,290 --> 00:00:09,389
his first tour car all I'm take it away

4
00:00:09,389 --> 00:00:11,570
all right thank you

5
00:00:11,570 --> 00:00:16,049
good morning oh nice alright so before I

6
00:00:16,049 --> 00:00:18,180
get started I always have to cover this

7
00:00:18,180 --> 00:00:20,039
I'm not here representing my employer

8
00:00:20,039 --> 00:00:22,710
the other disclaimer that I don't put is

9
00:00:22,710 --> 00:00:24,990
um let me start shoveling information

10
00:00:24,990 --> 00:00:27,269
about mainframes that your brain it's

11
00:00:27,269 --> 00:00:29,400
gonna feel rough just come talk to me

12
00:00:29,400 --> 00:00:30,750
after the talk if you have questions all

13
00:00:30,750 --> 00:00:33,210
right okay oh we got 25 minutes oh here

14
00:00:33,210 --> 00:00:34,010
we go

15
00:00:34,010 --> 00:00:36,120
so my name so he introduced me as Phil

16
00:00:36,120 --> 00:00:37,800
my name is soldier or for train on

17
00:00:37,800 --> 00:00:43,559
Twitter thank you one fan nice so I'm a

18
00:00:43,559 --> 00:00:46,230
I'm a mainframe hacker so mainframe

19
00:00:46,230 --> 00:00:48,260
computer researcher for a large bank I

20
00:00:48,260 --> 00:00:50,940
can contribute to a lot of open source

21
00:00:50,940 --> 00:00:53,100
projects so I've contributed to KDE and

22
00:00:53,100 --> 00:00:56,399
Matt Metasploit many more write all my

23
00:00:56,399 --> 00:00:58,949
code is open source stuff like that I've

24
00:00:58,949 --> 00:01:01,050
briefly been investigated by the Swedish

25
00:01:01,050 --> 00:01:06,990
secret police cool not terrifying not

26
00:01:06,990 --> 00:01:09,479
scary at all and I'm a serial speaker so

27
00:01:09,479 --> 00:01:11,280
I've I spoke at mooc on earlier this

28
00:01:11,280 --> 00:01:15,680
year about so that is a buffer overflow

29
00:01:15,680 --> 00:01:18,450
written in c that runs in unix on a

30
00:01:18,450 --> 00:01:21,210
mainframe written by a swedish hacker

31
00:01:21,210 --> 00:01:23,369
and so i was under investigation because

32
00:01:23,369 --> 00:01:25,860
it wasn't me and that's all available

33
00:01:25,860 --> 00:01:28,200
online feel free to watch it i'm also

34
00:01:28,200 --> 00:01:31,439
gave a talk about so main framers like

35
00:01:31,439 --> 00:01:35,130
to post stuff on mailing lists and so we

36
00:01:35,130 --> 00:01:37,079
took all the things they talked about

37
00:01:37,079 --> 00:01:40,860
for like since like 1983 and we threw it

38
00:01:40,860 --> 00:01:42,180
all into a database and i made a web

39
00:01:42,180 --> 00:01:43,829
interface so i can search for like i

40
00:01:43,829 --> 00:01:47,100
wonder i wonder what the tcp IP config

41
00:01:47,100 --> 00:01:49,479
for a bank looks like

42
00:01:49,479 --> 00:01:52,540
so fun fun so oh you know one can see

43
00:01:52,540 --> 00:01:57,280
that I want to zoom in oh boy this is

44
00:01:57,280 --> 00:01:59,560
gonna be hard to do whoo oh here we go

45
00:01:59,560 --> 00:02:02,259
oh there we go oh there we go okay cool

46
00:02:02,259 --> 00:02:02,890
cool all right

47
00:02:02,890 --> 00:02:05,890
oh that California Bank oh dang all

48
00:02:05,890 --> 00:02:08,530
right I also spoke at Shell con who here

49
00:02:08,530 --> 00:02:11,650
saw my shell con talk like one nice one

50
00:02:11,650 --> 00:02:13,390
person good I'm not talking about any of

51
00:02:13,390 --> 00:02:16,209
that crap in this talk I also teach a

52
00:02:16,209 --> 00:02:18,489
class called the evil mainframe where we

53
00:02:18,489 --> 00:02:20,110
teach all like mainframe pentest e type

54
00:02:20,110 --> 00:02:22,090
stuff it's a little intense it's the

55
00:02:22,090 --> 00:02:24,670
only mainframe CTF in the world that

56
00:02:24,670 --> 00:02:27,340
we're aware of so we actually found it a

57
00:02:27,340 --> 00:02:29,739
person that teaches a class in Spain but

58
00:02:29,739 --> 00:02:30,940
we're not we're not sure what's going on

59
00:02:30,940 --> 00:02:32,350
there anyways I also run a program

60
00:02:32,350 --> 00:02:36,100
called the IMP which finds mainframe on

61
00:02:36,100 --> 00:02:39,130
the internet sticker to the first person

62
00:02:39,130 --> 00:02:40,900
who can yell out the TLD for this

63
00:02:40,900 --> 00:02:49,180
mainframe it's early but come on dot mil

64
00:02:49,180 --> 00:02:50,560
who said dot someone over here said dot

65
00:02:50,560 --> 00:02:55,030
mil first definitely dot mil alrighty

66
00:02:55,030 --> 00:02:56,920
and it's more scary to be up here

67
00:02:56,920 --> 00:02:59,709
talking than it is to do this anyways so

68
00:02:59,709 --> 00:03:01,329
a little bit about mainframes

69
00:03:01,329 --> 00:03:07,109
so who here has like touched a mainframe

70
00:03:07,109 --> 00:03:09,340
like physically gone up and touched the

71
00:03:09,340 --> 00:03:13,180
fridge sized giant because it's the size

72
00:03:13,180 --> 00:03:16,230
of like a giant like commercial fridge

73
00:03:16,230 --> 00:03:19,090
who here so so who here knows how many

74
00:03:19,090 --> 00:03:21,090
mainframe vulnerabilities there are

75
00:03:21,090 --> 00:03:24,720
publicly listed on mitre

76
00:03:24,720 --> 00:03:29,989
yeah do you know how many wrong it's too

77
00:03:29,989 --> 00:03:32,300
the answer was tried zero so it's

78
00:03:32,300 --> 00:03:35,239
there's two exploits and it was because

79
00:03:35,239 --> 00:03:36,980
the Swedish government forced IBM to

80
00:03:36,980 --> 00:03:39,830
release them publicly and the way they

81
00:03:39,830 --> 00:03:40,910
did it was stupid

82
00:03:40,910 --> 00:03:44,480
they said it's it's not the mainframe OS

83
00:03:44,480 --> 00:03:46,580
it's actually this other op application

84
00:03:46,580 --> 00:03:48,440
that though we're pushing a kernel

85
00:03:48,440 --> 00:03:50,780
update all right so don't worry about it

86
00:03:50,780 --> 00:03:52,190
don't worry anyways I'm not gonna cover

87
00:03:52,190 --> 00:03:55,190
TSO I've talked about TSO at length so

88
00:03:55,190 --> 00:03:57,140
many times it's not even funny you can

89
00:03:57,140 --> 00:03:58,489
watch any of those talks they're all on

90
00:03:58,489 --> 00:04:00,620
YouTube I'm not gonna talk about racket

91
00:04:00,620 --> 00:04:02,239
there's better talks I've given about

92
00:04:02,239 --> 00:04:04,849
Iraq eff just know that rack F is the

93
00:04:04,849 --> 00:04:07,400
security database right so sort of like

94
00:04:07,400 --> 00:04:10,130
Holika like a database Oracle product

95
00:04:10,130 --> 00:04:11,660
might have a database rack F is your

96
00:04:11,660 --> 00:04:13,310
security database and it says you have

97
00:04:13,310 --> 00:04:14,540
access to this you don't have access to

98
00:04:14,540 --> 00:04:16,579
that and memory I'm not gonna talk about

99
00:04:16,579 --> 00:04:18,620
memory on this talk I am gonna cover

100
00:04:18,620 --> 00:04:20,930
these things data sets kicks JCL and

101
00:04:20,930 --> 00:04:22,990
you're solicited so kicks so data sets

102
00:04:22,990 --> 00:04:25,430
these are what files are on a mainframe

103
00:04:25,430 --> 00:04:29,870
you have 44 characters max eight

104
00:04:29,870 --> 00:04:32,750
characters between the dots that's it

105
00:04:32,750 --> 00:04:34,970
the dots it's not a hierarchical file

106
00:04:34,970 --> 00:04:38,389
system it is a flat file system so when

107
00:04:38,389 --> 00:04:41,180
you see like something dot something dot

108
00:04:41,180 --> 00:04:46,729
something if I delete this file the rest

109
00:04:46,729 --> 00:04:48,500
remain they don't go away they just

110
00:04:48,500 --> 00:04:50,360
stick around it's flat the same thing

111
00:04:50,360 --> 00:04:53,479
happens for rules if I have a specific

112
00:04:53,479 --> 00:04:56,450
rule that says do not allow anyone

113
00:04:56,450 --> 00:05:00,260
access to torque on dot cool but I don't

114
00:05:00,260 --> 00:05:01,610
have explicit rules you have a generic

115
00:05:01,610 --> 00:05:03,139
rules but if I have a specific rule and

116
00:05:03,139 --> 00:05:04,460
I don't have any rules that cover the

117
00:05:04,460 --> 00:05:06,830
other two I can access those files

118
00:05:06,830 --> 00:05:09,080
all right that's data sets so here we go

119
00:05:09,080 --> 00:05:11,090
we delete the file they stick around

120
00:05:11,090 --> 00:05:12,760
because that's how the file system is

121
00:05:12,760 --> 00:05:14,210
now jobs

122
00:05:14,210 --> 00:05:17,030
jaesi the the mainframe is a batch

123
00:05:17,030 --> 00:05:19,849
driven operating system so that means

124
00:05:19,849 --> 00:05:24,349
everything is done via batch so JCL you

125
00:05:24,349 --> 00:05:26,180
have to learn JCL to use a mainframe and

126
00:05:26,180 --> 00:05:29,960
it looks like this so it looks like

127
00:05:29,960 --> 00:05:33,169
garbage the person who invented it says

128
00:05:33,169 --> 00:05:35,720
it's garbage there's a whole talk at the

129
00:05:35,720 --> 00:05:37,280
Computer History Museum where he's goes

130
00:05:37,280 --> 00:05:39,320
it sucks he doesn't even like it but

131
00:05:39,320 --> 00:05:42,530
it's it's basically these are just like

132
00:05:42,530 --> 00:05:43,340
my

133
00:05:43,340 --> 00:05:44,330
when you're writing like a bash script

134
00:05:44,330 --> 00:05:46,070
that's all they are right you have

135
00:05:46,070 --> 00:05:47,960
standard in standard out all kinds of

136
00:05:47,960 --> 00:05:50,360
things every program you call has like

137
00:05:50,360 --> 00:05:52,669
flags and you just declare them in your

138
00:05:52,669 --> 00:05:54,889
JCL it's not that much more cut it's

139
00:05:54,889 --> 00:05:56,870
just different right it's not bad it's

140
00:05:56,870 --> 00:05:58,450
just different

141
00:05:58,450 --> 00:06:01,940
okay kicks who here's use kicks one

142
00:06:01,940 --> 00:06:05,540
person to three wrong you've all used

143
00:06:05,540 --> 00:06:08,270
kicks you just don't know who here's

144
00:06:08,270 --> 00:06:12,350
flown in a plane ever right that is

145
00:06:12,350 --> 00:06:14,690
mostly driven by kicks based interfaces

146
00:06:14,690 --> 00:06:16,220
though you wouldn't know it has Jason it

147
00:06:16,220 --> 00:06:17,900
has web-based interfaces has all kinds

148
00:06:17,900 --> 00:06:20,270
of cool modern things that you wouldn't

149
00:06:20,270 --> 00:06:22,550
know cuz everyone thinks it's all COBOL

150
00:06:22,550 --> 00:06:25,010
and old and like cobwebs and unusable

151
00:06:25,010 --> 00:06:27,140
the reality is like things like the

152
00:06:27,140 --> 00:06:29,380
Delta outage were caused because

153
00:06:29,380 --> 00:06:31,760
something couldn't talk to the Delta

154
00:06:31,760 --> 00:06:33,680
mainframe not that the mainframe was

155
00:06:33,680 --> 00:06:37,190
down okay so it's made up so when I talk

156
00:06:37,190 --> 00:06:38,570
about kicks I usually in mainframe are

157
00:06:38,570 --> 00:06:39,950
safe this I call it it's like the first

158
00:06:39,950 --> 00:06:41,960
web app it's like the first web apps

159
00:06:41,960 --> 00:06:45,470
server so basically you have this thing

160
00:06:45,470 --> 00:06:48,890
called a region because this is before

161
00:06:48,890 --> 00:06:51,140
servers existed as a concept so you have

162
00:06:51,140 --> 00:06:53,630
a region a Kix region and each region

163
00:06:53,630 --> 00:06:55,310
will have multiple transactions which

164
00:06:55,310 --> 00:06:57,500
are like URLs that's it that's and it

165
00:06:57,500 --> 00:07:02,210
looks like this it's not it's kicks all

166
00:07:02,210 --> 00:07:04,100
right languages it's got so many

167
00:07:04,100 --> 00:07:06,110
languages it's got all of them all the

168
00:07:06,110 --> 00:07:10,190
cool ones like unlike Linux with go and

169
00:07:10,190 --> 00:07:13,000
other garbage it's got all the good ones

170
00:07:13,000 --> 00:07:15,919
and way more than that like I'm not

171
00:07:15,919 --> 00:07:18,470
talking RPG PLI there's all kinds of

172
00:07:18,470 --> 00:07:21,919
stuff all right now unix this is usually

173
00:07:21,919 --> 00:07:23,240
a part so this hold the rest of talks in

174
00:07:23,240 --> 00:07:24,680
to me about unix stuff and doing unix

175
00:07:24,680 --> 00:07:26,120
see things because i find that that's

176
00:07:26,120 --> 00:07:27,740
the gateway drug to mainframe hacking

177
00:07:27,740 --> 00:07:31,460
so it's unix it's literally just unix

178
00:07:31,460 --> 00:07:34,280
the problem is it's just POSIX UNIX

179
00:07:34,280 --> 00:07:37,010
doesn't come with bash doesn't come with

180
00:07:37,010 --> 00:07:38,960
any modern conveniences it comes with a

181
00:07:38,960 --> 00:07:41,930
vie but like the operating system just

182
00:07:41,930 --> 00:07:43,720
came out with an update this year and

183
00:07:43,720 --> 00:07:46,160
via is still not interactive like I'll

184
00:07:46,160 --> 00:07:48,020
delete a line and then I got a eggs like

185
00:07:48,020 --> 00:07:50,450
I gotta do like a hit escape hit a

186
00:07:50,450 --> 00:07:51,860
semicolon then it will update the screen

187
00:07:51,860 --> 00:07:55,220
okay it's super old but it works and you

188
00:07:55,220 --> 00:07:56,720
can actually install bash but the

189
00:07:56,720 --> 00:07:57,800
a Bosch is still vulnerable the

190
00:07:57,800 --> 00:08:02,420
shellshock so we don't do that but UNIX

191
00:08:02,420 --> 00:08:05,180
powers the tcp/ip stack for the entire

192
00:08:05,180 --> 00:08:07,690
mainframe that's what you need to know

193
00:08:07,690 --> 00:08:09,830
as well it's like literally just UNIX

194
00:08:09,830 --> 00:08:12,220
it's just Unix

195
00:08:12,220 --> 00:08:14,270
so here's what's really cool so the file

196
00:08:14,270 --> 00:08:17,270
system itself is actually just datasets

197
00:08:17,270 --> 00:08:20,750
that exist on the mainframe but the

198
00:08:20,750 --> 00:08:21,980
mount command so normally views like

199
00:08:21,980 --> 00:08:23,180
Mountain you'd show all the mount points

200
00:08:23,180 --> 00:08:25,970
doesn't work but you can use DF to show

201
00:08:25,970 --> 00:08:27,740
the mount points so when you run DF it

202
00:08:27,740 --> 00:08:30,500
looks like this so you get like a

203
00:08:30,500 --> 00:08:32,419
dataset this is important later I'm

204
00:08:32,419 --> 00:08:33,919
talking about cool tools that we both

205
00:08:33,919 --> 00:08:36,049
that we've released a new research

206
00:08:36,049 --> 00:08:40,070
already so real quick slash hackers

207
00:08:40,070 --> 00:08:41,990
mounted to user that UNIX agent that's

208
00:08:41,990 --> 00:08:44,179
the file that contains the file system

209
00:08:44,179 --> 00:08:47,210
that UNIX uses everyone follow along all

210
00:08:47,210 --> 00:08:52,100
right ok so first one of the challenges

211
00:08:52,100 --> 00:08:54,380
is that there's no enumeration tools

212
00:08:54,380 --> 00:08:55,640
available for the mainframe and I'm

213
00:08:55,640 --> 00:08:57,290
slowly working my way and eliminating

214
00:08:57,290 --> 00:08:59,750
that gap one of them I just released

215
00:08:59,750 --> 00:09:02,750
literally last week is OBS enum s8 it's

216
00:09:02,750 --> 00:09:05,750
based heavily on Lin enum and like Linux

217
00:09:05,750 --> 00:09:08,210
privilege suggester exploit suggester

218
00:09:08,210 --> 00:09:11,780
sort of merge together it works I was

219
00:09:11,780 --> 00:09:13,820
just testing on a system recently it ran

220
00:09:13,820 --> 00:09:15,140
for six hours and it gave me a ton of

221
00:09:15,140 --> 00:09:17,780
information it is loud it will generate

222
00:09:17,780 --> 00:09:19,970
errors it'll generate access errors but

223
00:09:19,970 --> 00:09:23,420
nobody's watching especially because no

224
00:09:23,420 --> 00:09:25,010
one's forwarding their you so UNIX has

225
00:09:25,010 --> 00:09:28,100
its own syslog and no one fords it to

226
00:09:28,100 --> 00:09:31,670
Splunk instead if you look at the logic

227
00:09:31,670 --> 00:09:33,200
of breach case they actually forwarding

228
00:09:33,200 --> 00:09:35,660
there's this lock to temp and then they

229
00:09:35,660 --> 00:09:36,890
they had oh we got a hacker and then

230
00:09:36,890 --> 00:09:38,120
they rebooted and then they lost their

231
00:09:38,120 --> 00:09:42,260
lives so yeah it's it's but it's

232
00:09:42,260 --> 00:09:44,180
literally it's meant to be familiar it's

233
00:09:44,180 --> 00:09:45,620
supposed to look like Linnaean um so you

234
00:09:45,620 --> 00:09:46,880
can go through the data and you can look

235
00:09:46,880 --> 00:09:48,530
at files and then you can be like what

236
00:09:48,530 --> 00:09:50,540
the heck is a plus a on a file and you

237
00:09:50,540 --> 00:09:53,540
can dig up and what that means net

238
00:09:53,540 --> 00:09:56,420
episode of cat I in Python 3 so that it

239
00:09:56,420 --> 00:09:58,070
supports code pages that's it accepts

240
00:09:58,070 --> 00:10:00,589
and it's it has like multiple

241
00:10:00,589 --> 00:10:02,060
international code pages and if you get

242
00:10:02,060 --> 00:10:03,830
a reverse shell that's an episodic you

243
00:10:03,830 --> 00:10:05,839
need a way to talk to it so I wrote ed

244
00:10:05,839 --> 00:10:07,760
up to the cat and then cat map 3 so

245
00:10:07,760 --> 00:10:09,020
there's a really cool tool it goes

246
00:10:09,020 --> 00:10:09,810
through

247
00:10:09,810 --> 00:10:11,730
and tells you every single data set on

248
00:10:11,730 --> 00:10:13,290
the system and your access to that data

249
00:10:13,290 --> 00:10:15,990
set and I wrote it and sometimes you get

250
00:10:15,990 --> 00:10:18,660
like a 400 mega of just data sets and

251
00:10:18,660 --> 00:10:20,520
access rights so I wrote it so it pipes

252
00:10:20,520 --> 00:10:22,440
it out to a shell so here we go so I'm

253
00:10:22,440 --> 00:10:24,930
gonna have a net cat listener running

254
00:10:24,930 --> 00:10:26,910
just to normal net cat not a tab sitting

255
00:10:26,910 --> 00:10:28,920
that cat just a regular neck hat because

256
00:10:28,920 --> 00:10:30,420
that's not a thing I'm gonna run I'm

257
00:10:30,420 --> 00:10:31,950
gonna call this programming to compile

258
00:10:31,950 --> 00:10:33,420
it there's instructions on how to do

259
00:10:33,420 --> 00:10:36,510
that and run the program it's gonna run

260
00:10:36,510 --> 00:10:39,750
and I'm gonna see the entire is based

261
00:10:39,750 --> 00:10:42,690
like a find space slash space exact

262
00:10:42,690 --> 00:10:45,800
space LS dash L on every single file

263
00:10:45,800 --> 00:10:48,529
that's it that's that's how long it took

264
00:10:48,529 --> 00:10:51,120
that's the entire file system and all my

265
00:10:51,120 --> 00:10:56,450
access rights to it okay now remember

266
00:10:56,450 --> 00:11:01,830
UNIX is based on data sets right it's

267
00:11:01,830 --> 00:11:05,490
based on so by default when you run the

268
00:11:05,490 --> 00:11:08,010
mount command if there's certain

269
00:11:08,010 --> 00:11:09,810
permissions that have to be set and

270
00:11:09,810 --> 00:11:12,150
sometimes they're normally they're set

271
00:11:12,150 --> 00:11:13,680
in properly because everyone ignores

272
00:11:13,680 --> 00:11:16,140
UNIX in the mainframe space so if you

273
00:11:16,140 --> 00:11:17,790
can mount if you type mount space a data

274
00:11:17,790 --> 00:11:20,339
set and it just mounts then that means

275
00:11:20,339 --> 00:11:23,190
you can have set UID binaries in that

276
00:11:23,190 --> 00:11:25,890
data set ready for you to use to give

277
00:11:25,890 --> 00:11:28,230
you like a route ID or an AP of

278
00:11:28,230 --> 00:11:30,360
authorize program so if you can just

279
00:11:30,360 --> 00:11:31,589
mount a data set you're good you've

280
00:11:31,589 --> 00:11:32,310
owned the mainframe

281
00:11:32,310 --> 00:11:35,839
if you can't mount the data set but you

282
00:11:35,839 --> 00:11:40,920
can edit the mounted data sets you can

283
00:11:40,920 --> 00:11:42,600
just split it's just a V Sam file and

284
00:11:42,600 --> 00:11:43,620
you can just go in and flip the

285
00:11:43,620 --> 00:11:45,900
permission bit at the actual file

286
00:11:45,900 --> 00:11:48,930
specifically and then wait for the

287
00:11:48,930 --> 00:11:50,730
system to reboot and now you have new

288
00:11:50,730 --> 00:11:51,180
shell

289
00:11:51,180 --> 00:11:52,950
all right that's big Eddy and smalls

290
00:11:52,950 --> 00:11:55,790
figure all this out so kudos to him

291
00:11:55,790 --> 00:11:58,500
ok let's talk about Java Java is super

292
00:11:58,500 --> 00:12:03,150
cool right come on it's early I know it

293
00:12:03,150 --> 00:12:04,770
all right it's cool in the mainframe

294
00:12:04,770 --> 00:12:06,270
though so check this out all right so

295
00:12:06,270 --> 00:12:11,580
come z/os come to the JVM it runs in New

296
00:12:11,580 --> 00:12:14,880
York space everything that runs in JVM

297
00:12:14,880 --> 00:12:17,459
runs nuke space Tomcat runs in fact in

298
00:12:17,459 --> 00:12:19,830
the class that we teach we have a

299
00:12:19,830 --> 00:12:22,670
vulnerable Apache Tomcat server and you

300
00:12:22,670 --> 00:12:25,580
just type Metasploit doot and upload the

301
00:12:25,580 --> 00:12:28,340
war file and it just works right because

302
00:12:28,340 --> 00:12:32,900
because it's VZ so the thing with Java

303
00:12:32,900 --> 00:12:35,060
that's important to know is it's free to

304
00:12:35,060 --> 00:12:37,640
run on the mainframe so I got come talk

305
00:12:37,640 --> 00:12:38,660
to me afterwards if you want to know

306
00:12:38,660 --> 00:12:40,790
learn more about mips vs zips but just

307
00:12:40,790 --> 00:12:42,230
know it doesn't cost anything so it's a

308
00:12:42,230 --> 00:12:43,970
good area for us to play and we won't

309
00:12:43,970 --> 00:12:47,120
get caught for using resources alright

310
00:12:47,120 --> 00:12:48,620
so who thinks we can get a reverse shell

311
00:12:48,620 --> 00:12:53,420
using java everyone everyone come on all

312
00:12:53,420 --> 00:12:55,100
right who thinks we can use an android

313
00:12:55,100 --> 00:13:01,040
reverse shell on our mainframe anybody

314
00:13:01,040 --> 00:13:04,040
anybody want to get one two three okay

315
00:13:04,040 --> 00:13:05,210
so we're gonna upload it I'm gonna

316
00:13:05,210 --> 00:13:07,370
literally just change the IP in port I'm

317
00:13:07,370 --> 00:13:10,040
gonna upload it and compile it and like

318
00:13:10,040 --> 00:13:11,210
who think okay so do you think I think

319
00:13:11,210 --> 00:13:13,100
it's gonna work it's gonna work I

320
00:13:13,100 --> 00:13:14,420
wouldn't be up here talking about it if

321
00:13:14,420 --> 00:13:16,390
it didn't work right of course it works

322
00:13:16,390 --> 00:13:18,260
except the other problem is it speaks

323
00:13:18,260 --> 00:13:20,120
Absa dick right but that's fine that's

324
00:13:20,120 --> 00:13:21,830
why I rewrote native to the cat so

325
00:13:21,830 --> 00:13:25,750
here's the shell here's my shell prompt

326
00:13:25,750 --> 00:13:28,250
right so now that we know that donna

327
00:13:28,250 --> 00:13:30,560
paul literally took some person's code

328
00:13:30,560 --> 00:13:35,440
and ran it like applaud this person like

329
00:13:35,440 --> 00:13:38,270
alright because it gets it gets better

330
00:13:38,270 --> 00:13:40,610
okay so what what else can we do with

331
00:13:40,610 --> 00:13:42,500
java so this is actually ibm's java and

332
00:13:42,500 --> 00:13:44,870
they add some extra stuff they add other

333
00:13:44,870 --> 00:13:46,730
things called JS hacen j util and

334
00:13:46,730 --> 00:13:48,380
there's some cool things we can use with

335
00:13:48,380 --> 00:13:52,010
that so here for example this is all the

336
00:13:52,010 --> 00:13:54,650
code i need to flood your master console

337
00:13:54,650 --> 00:13:57,050
i don't have time to talk about what the

338
00:13:57,050 --> 00:13:59,900
master console is just trust me this is

339
00:13:59,900 --> 00:14:03,320
bad if i run this if i compile it and

340
00:14:03,320 --> 00:14:05,960
then run it on my test box i can flood

341
00:14:05,960 --> 00:14:08,930
the master console what's work on the

342
00:14:08,930 --> 00:14:10,730
master console is essentially where you

343
00:14:10,730 --> 00:14:13,250
control programs are running i need to

344
00:14:13,250 --> 00:14:14,720
stop them all kinds of cool and

345
00:14:14,720 --> 00:14:16,070
important stuff it's also where all your

346
00:14:16,070 --> 00:14:18,920
security messages go so if I'm doing

347
00:14:18,920 --> 00:14:21,410
nefarious things I might just spam it

348
00:14:21,410 --> 00:14:23,390
with a whole bunch of stuff and then in

349
00:14:23,390 --> 00:14:25,120
the middle do what I'm trying to do

350
00:14:25,120 --> 00:14:27,530
funny story big endian smalls was

351
00:14:27,530 --> 00:14:28,700
messing around and doing the same thing

352
00:14:28,700 --> 00:14:29,810
in the assembler and then locked his

353
00:14:29,810 --> 00:14:31,940
machine because he couldn't he couldn't

354
00:14:31,940 --> 00:14:33,890
kill the process because every time he

355
00:14:33,890 --> 00:14:35,889
looked up the process I'd be he

356
00:14:35,889 --> 00:14:38,379
flood would fill the screen again so he

357
00:14:38,379 --> 00:14:40,059
couldn't and then it just and then it

358
00:14:40,059 --> 00:14:41,970
just got so full kill the game all right

359
00:14:41,970 --> 00:14:46,569
now one of the problems that I have when

360
00:14:46,569 --> 00:14:47,709
I'm on a mainframe is trying to find

361
00:14:47,709 --> 00:14:49,540
like an egress a way to get my stuff off

362
00:14:49,540 --> 00:14:50,859
the mat like I'm stealing data I'm

363
00:14:50,859 --> 00:14:53,980
stealing files I need to find a way to

364
00:14:53,980 --> 00:14:56,290
get that stuff off the mainframe and on

365
00:14:56,290 --> 00:14:59,619
to my Linux box okay so I need to find

366
00:14:59,619 --> 00:15:02,109
egress ports that I can use it's not

367
00:15:02,109 --> 00:15:03,790
just like oh here's all that look it's

368
00:15:03,790 --> 00:15:05,290
just all forwarding moment sometimes

369
00:15:05,290 --> 00:15:07,619
they are have no egress filtering but

370
00:15:07,619 --> 00:15:09,549
hopefully you encounter the mainframe

371
00:15:09,549 --> 00:15:13,809
that does so we use Java to find those

372
00:15:13,809 --> 00:15:16,449
ports now you might be thinking why

373
00:15:16,449 --> 00:15:17,769
aren't we using any of the other

374
00:15:17,769 --> 00:15:19,509
languages that are available to us that

375
00:15:19,509 --> 00:15:22,989
would be a faster and B everyone else

376
00:15:22,989 --> 00:15:24,519
knows better right

377
00:15:24,519 --> 00:15:27,100
well the problem is you can't change the

378
00:15:27,100 --> 00:15:30,489
socket timeout on those connections so I

379
00:15:30,489 --> 00:15:32,459
literally wrote a port scanner in Rex

380
00:15:32,459 --> 00:15:36,129
and if and if when you connect some of

381
00:15:36,129 --> 00:15:37,660
you guys filtering just doesn't doesn't

382
00:15:37,660 --> 00:15:39,069
send a reset doesn't send anything it

383
00:15:39,069 --> 00:15:41,410
just doesn't reply it just sinkholes

384
00:15:41,410 --> 00:15:44,110
your your sin and it just sits there for

385
00:15:44,110 --> 00:15:47,019
two and a half minutes waiting right and

386
00:15:47,019 --> 00:15:50,249
so over 65,000 course that's a long time

387
00:15:50,249 --> 00:15:53,259
however in Java so kudos to Sir kicks a

388
00:15:53,259 --> 00:15:55,209
lot for frigging this F there's a like

389
00:15:55,209 --> 00:15:56,709
it's not in the documentation I looked

390
00:15:56,709 --> 00:15:58,959
there's an old trick if you use the

391
00:15:58,959 --> 00:16:01,329
socket connect in Java you can set a

392
00:16:01,329 --> 00:16:05,309
timeout in milliseconds so what we do is

393
00:16:05,309 --> 00:16:09,549
we write a this is available so we run

394
00:16:09,549 --> 00:16:11,529
egress Buster from trusted sack on a

395
00:16:11,529 --> 00:16:15,399
linux box on the web on the corporate

396
00:16:15,399 --> 00:16:18,850
network whatever then we run this this

397
00:16:18,850 --> 00:16:20,379
Java programming copilot then we run it

398
00:16:20,379 --> 00:16:24,209
and we don't care if egress Buster sends

399
00:16:24,209 --> 00:16:27,189
like anything back we because what

400
00:16:27,189 --> 00:16:28,269
happens is when you connect to egress

401
00:16:28,269 --> 00:16:32,319
Buster it just tells you I have a

402
00:16:32,319 --> 00:16:34,869
connection from that port right so we

403
00:16:34,869 --> 00:16:37,299
run the Java program blind and we have

404
00:16:37,299 --> 00:16:40,359
we want the smallest timeout that we can

405
00:16:40,359 --> 00:16:42,100
set so we can go through all 65,000

406
00:16:42,100 --> 00:16:45,129
ports in literally a like two minutes to

407
00:16:45,129 --> 00:16:46,899
find all the all the ports that are

408
00:16:46,899 --> 00:16:48,100
available to us for egress and we've

409
00:16:48,100 --> 00:16:49,299
done this book like so now that we can

410
00:16:49,299 --> 00:16:49,779
do this we've

411
00:16:49,779 --> 00:16:50,980
successfully use this and been able to

412
00:16:50,980 --> 00:16:53,319
find like there's five ports open for us

413
00:16:53,319 --> 00:16:55,810
to use for egress right and then oh then

414
00:16:55,810 --> 00:16:59,110
it's some of them can go somewhere okay

415
00:16:59,110 --> 00:17:01,209
now that we able to find ports we can do

416
00:17:01,209 --> 00:17:03,759
the Java actually provides access to

417
00:17:03,759 --> 00:17:06,039
data sets and remember UNIX is just used

418
00:17:06,039 --> 00:17:07,900
for like a lot of tcp/ip stuff maybe

419
00:17:07,900 --> 00:17:09,819
some web servers the actual data that

420
00:17:09,819 --> 00:17:11,439
you care about is gonna be in datasets

421
00:17:11,439 --> 00:17:14,919
in the mainframe space but that's fine

422
00:17:14,919 --> 00:17:16,750
because Java provides methods to say

423
00:17:16,750 --> 00:17:18,699
open this data set you just provided a

424
00:17:18,699 --> 00:17:20,349
data set name and opens it up you

425
00:17:20,349 --> 00:17:22,030
actually search for data set names using

426
00:17:22,030 --> 00:17:23,919
the catalog interface it's all available

427
00:17:23,919 --> 00:17:25,659
and then you just take that and you just

428
00:17:25,659 --> 00:17:27,220
send it over the u.s. port and if you

429
00:17:27,220 --> 00:17:29,169
know it's in EPSA dick not binary you

430
00:17:29,169 --> 00:17:30,460
can just translate it on the fly with

431
00:17:30,460 --> 00:17:36,520
Java now okay so now that we know Kix is

432
00:17:36,520 --> 00:17:39,010
an application server if we have access

433
00:17:39,010 --> 00:17:42,340
to UNIX and Lilley access to one Kix

434
00:17:42,340 --> 00:17:44,080
transaction or case transactions or four

435
00:17:44,080 --> 00:17:46,960
letters if we have access to that and

436
00:17:46,960 --> 00:17:51,070
unix we can do Prive ask and become the

437
00:17:51,070 --> 00:17:54,399
Kix application server with java okay

438
00:17:54,399 --> 00:17:57,669
that's cool yeah so we upload a jar

439
00:17:57,669 --> 00:18:00,700
actually it's an OS GI but for sake of

440
00:18:00,700 --> 00:18:02,860
argument we upload it to just some

441
00:18:02,860 --> 00:18:06,820
folder in Unix somewhere and then we run

442
00:18:06,820 --> 00:18:08,860
literally these three commands and kicks

443
00:18:08,860 --> 00:18:11,950
I don't have much time I'll have the

444
00:18:11,950 --> 00:18:13,510
time to go over all these commands and

445
00:18:13,510 --> 00:18:16,480
kicks but basically it's you define the

446
00:18:16,480 --> 00:18:19,510
program you define the transaction

447
00:18:19,510 --> 00:18:20,919
you're gonna use we're gonna use J TM 1

448
00:18:20,919 --> 00:18:24,130
and then you define a bundle and that's

449
00:18:24,130 --> 00:18:25,510
the jar file that you just uploaded

450
00:18:25,510 --> 00:18:28,419
right so so long as Kix has access to

451
00:18:28,419 --> 00:18:30,299
that folder somewhere in Unix

452
00:18:30,299 --> 00:18:32,710
you can now execute this code so then

453
00:18:32,710 --> 00:18:35,230
what you do is we're gonna set up and

454
00:18:35,230 --> 00:18:40,840
that cat listener and then we're gonna

455
00:18:40,840 --> 00:18:41,980
connect into kicks so we're gonna

456
00:18:41,980 --> 00:18:43,809
connect two kicks and we're gonna access

457
00:18:43,809 --> 00:18:45,850
now I wrote it to be kind of idiot-proof

458
00:18:45,850 --> 00:18:47,590
so I wrote it with like a if you call

459
00:18:47,590 --> 00:18:49,149
without anything it shows you usage and

460
00:18:49,149 --> 00:18:51,130
a cool ASCII logo or I guess episodic

461
00:18:51,130 --> 00:18:54,610
logo in this case but so we're gonna

462
00:18:54,610 --> 00:18:56,620
we're gonna run the jtm one transaction

463
00:18:56,620 --> 00:19:00,039
that we just installed it gives you

464
00:19:00,039 --> 00:19:01,539
usage on the bottom on how to use this

465
00:19:01,539 --> 00:19:03,929
transaction

466
00:19:06,510 --> 00:19:09,220
now we're gonna run it and now I have a

467
00:19:09,220 --> 00:19:13,600
shell and I have a shell running as the

468
00:19:13,600 --> 00:19:18,460
kicks user now notice no it goes by

469
00:19:18,460 --> 00:19:21,400
pretty quick so notice user ID in in

470
00:19:21,400 --> 00:19:24,910
units now right thank you there we go

471
00:19:24,910 --> 00:19:29,260
yes thank you okay everyone's like I

472
00:19:29,260 --> 00:19:35,140
don't what the hell just happened so but

473
00:19:35,140 --> 00:19:36,550
this doesn't really mean anything okay

474
00:19:36,550 --> 00:19:39,370
one this is because the started task

475
00:19:39,370 --> 00:19:40,660
that's running kicks is running with a

476
00:19:40,660 --> 00:19:42,820
UID of zero right generally that won't

477
00:19:42,820 --> 00:19:46,800
happen in a real application space but

478
00:19:46,800 --> 00:19:49,030
because of the way kicks interacts with

479
00:19:49,030 --> 00:19:51,700
databases and stuff if you can act if

480
00:19:51,700 --> 00:19:54,400
you can run a shell as or anything like

481
00:19:54,400 --> 00:19:55,600
I'm just using a shell as an example

482
00:19:55,600 --> 00:19:57,520
because it's nice stunt hacking but like

483
00:19:57,520 --> 00:19:59,080
typically like realistically I would

484
00:19:59,080 --> 00:20:01,570
write a bunch of db2 interfaces and then

485
00:20:01,570 --> 00:20:03,790
have it run and then use that to access

486
00:20:03,790 --> 00:20:05,980
db2 because that would be running as the

487
00:20:05,980 --> 00:20:07,660
kicks user and then I can access a whole

488
00:20:07,660 --> 00:20:09,520
bunch of database transactions and guess

489
00:20:09,520 --> 00:20:11,290
what there's a lot of stuff in kicks

490
00:20:11,290 --> 00:20:13,420
databases like everything you care about

491
00:20:13,420 --> 00:20:16,000
is in a db2 database or IMS driven by

492
00:20:16,000 --> 00:20:18,430
kicks everything you care about student

493
00:20:18,430 --> 00:20:20,320
loans your home mortgage everything

494
00:20:20,320 --> 00:20:23,260
alright so but just because I UID 0

495
00:20:23,260 --> 00:20:26,140
doesn't mean anything I have to like do

496
00:20:26,140 --> 00:20:28,390
other things to do privacy in the UNIX

497
00:20:28,390 --> 00:20:31,720
space to do stuff in the TSO world but

498
00:20:31,720 --> 00:20:32,460
anyways

499
00:20:32,460 --> 00:20:35,290
that'll get detected probably so at this

500
00:20:35,290 --> 00:20:36,610
point you're better off just staying as

501
00:20:36,610 --> 00:20:38,230
the application ID and just doing normal

502
00:20:38,230 --> 00:20:41,650
application e things but since I'm doing

503
00:20:41,650 --> 00:20:43,810
all this Java stuff one of the things

504
00:20:43,810 --> 00:20:45,760
that perplexes me there's actually no C

505
00:20:45,760 --> 00:20:48,370
to client for the for the mainframe so I

506
00:20:48,370 --> 00:20:52,000
wrote one in Java for a very popular and

507
00:20:52,000 --> 00:20:55,540
simple c2 infrastructure I want to do

508
00:20:55,540 --> 00:20:57,130
this because a no one's using this B

509
00:20:57,130 --> 00:20:59,020
it's easily detectable by antivirus if

510
00:20:59,020 --> 00:21:01,900
you run the server and also it was open

511
00:21:01,900 --> 00:21:04,210
source and easy for me to write for so I

512
00:21:04,210 --> 00:21:09,760
wrote a Trevor c2 client in Java so here

513
00:21:09,760 --> 00:21:14,500
gonna see some I'm running Trevor c2 and

514
00:21:14,500 --> 00:21:16,210
i'm gonna interact already right like

515
00:21:16,210 --> 00:21:17,200
the java ran already

516
00:21:17,200 --> 00:21:19,000
so I'm going to interact with my my

517
00:21:19,000 --> 00:21:23,770
client and I have a valid shell prompt

518
00:21:23,770 --> 00:21:26,290
and everything in Trevor c2 and I did

519
00:21:26,290 --> 00:21:27,430
that because I'm hoping someone will

520
00:21:27,430 --> 00:21:29,590
take that and then implement it in any

521
00:21:29,590 --> 00:21:32,620
other of the c2 actual that people use

522
00:21:32,620 --> 00:21:34,780
but and this I'm actually just waiting

523
00:21:34,780 --> 00:21:37,090
for them to accept my pull request so I

524
00:21:37,090 --> 00:21:39,370
think with that first of all I say thank

525
00:21:39,370 --> 00:21:41,290
you for having me out here this is my

526
00:21:41,290 --> 00:21:42,820
first tour con it's been awesome thank

527
00:21:42,820 --> 00:21:49,720
you and and with the two minutes that I

528
00:21:49,720 --> 00:21:51,820
have left some time was up here other

529
00:21:51,820 --> 00:21:56,620
there's one question already what going

530
00:21:56,620 --> 00:21:58,120
to run the mic oh we got three minutes

531
00:21:58,120 --> 00:22:01,420
now any questions yeah you want to yell

532
00:22:01,420 --> 00:22:03,600
it out

533
00:22:15,940 --> 00:22:19,760
so so the question was so the

534
00:22:19,760 --> 00:22:21,710
permissions in in Linux are actually at

535
00:22:21,710 --> 00:22:23,570
the file up in UNIX are at the

536
00:22:23,570 --> 00:22:28,850
filesystem level right so it's not it's

537
00:22:28,850 --> 00:22:30,409
not it's literally just using Unix

538
00:22:30,409 --> 00:22:34,370
commands so it's not so if so when so

539
00:22:34,370 --> 00:22:35,720
when you're accessing a file even though

540
00:22:35,720 --> 00:22:37,490
the the permissions are set outside

541
00:22:37,490 --> 00:22:40,279
unlike a CF - perhaps it's still gonna

542
00:22:40,279 --> 00:22:42,200
show up as your access rights within I

543
00:22:42,200 --> 00:22:43,970
know I know what you mean but it doesn't

544
00:22:43,970 --> 00:22:45,350
do that because it's just the UNIX tool

545
00:22:45,350 --> 00:22:48,169
right like I can't we could do some

546
00:22:48,169 --> 00:22:49,580
checking but that once you start doing

547
00:22:49,580 --> 00:22:52,669
like the SM commands you start getting

548
00:22:52,669 --> 00:22:55,279
like really noisy because you generally

549
00:22:55,279 --> 00:22:57,350
don't have any way everyone else has no

550
00:22:57,350 --> 00:22:59,059
idea what we're talking about what come

551
00:22:59,059 --> 00:23:00,590
talk to me afterwards because I want to

552
00:23:00,590 --> 00:23:01,940
I want to pick your brain another

553
00:23:01,940 --> 00:23:07,220
question my preferred emulator I would

554
00:23:07,220 --> 00:23:11,510
say probably snes9x but that's a thank

555
00:23:11,510 --> 00:23:12,860
you thank you thank you someone got my

556
00:23:12,860 --> 00:23:14,149
mainframe joke

557
00:23:14,149 --> 00:23:18,110
it's Act IX 30 to 70 in fact I just

558
00:23:18,110 --> 00:23:19,730
wrote a python script that'll take

559
00:23:19,730 --> 00:23:21,289
whatever awesome color scheme you have

560
00:23:21,289 --> 00:23:23,779
for for bash or like your terminal

561
00:23:23,779 --> 00:23:25,549
emulator and it'll convert it to an

562
00:23:25,549 --> 00:23:28,669
awesome theme for X 30 to 70 but yeah

563
00:23:28,669 --> 00:23:30,380
you have to use a 30 to 70 emulator for

564
00:23:30,380 --> 00:23:34,070
everything you do in in in z/os like

565
00:23:34,070 --> 00:23:35,630
when you're connecting to like TSO and

566
00:23:35,630 --> 00:23:39,460
stuff any other questions

567
00:23:40,990 --> 00:23:43,130
everyone's an expert on mainframes now

568
00:23:43,130 --> 00:23:45,440
cool and no one has any questions about

569
00:23:45,440 --> 00:23:47,659
the mainframe the most systemically

570
00:23:47,659 --> 00:23:50,090
important platform on the planet no one

571
00:23:50,090 --> 00:23:50,860
cares

572
00:23:50,860 --> 00:23:56,570
good good all right well thanks again

573
00:23:56,570 --> 00:23:57,830
everyone I want to say thank you for

574
00:23:57,830 --> 00:24:00,129
having me

575
00:24:03,640 --> 00:24:05,630
so you want is named for the questions

576
00:24:05,630 --> 00:24:08,440
fill the outside

