1
00:00:00,030 --> 00:00:06,660
take a seat it is my pleasure to

2
00:00:06,660 --> 00:00:08,370
introduce price who will be talking

3
00:00:08,370 --> 00:00:10,889
about made it may the cloud be with you

4
00:00:10,889 --> 00:00:13,650
red teaming GCP I'll let them take it

5
00:00:13,650 --> 00:00:16,770
away oh and real quickly um slight

6
00:00:16,770 --> 00:00:18,330
announcement we have a few doing this

7
00:00:18,330 --> 00:00:20,580
guy diving um see registration 2 at 1:00

8
00:00:20,580 --> 00:00:22,439
p.m. it's not for a time slot back to

9
00:00:22,439 --> 00:00:25,460
you thanks appreciate that

10
00:00:25,460 --> 00:00:28,050
alright I'm Bryce this is my twitter

11
00:00:28,050 --> 00:00:32,279
handler tweak fox so if you want the

12
00:00:32,279 --> 00:00:33,390
slides I'll throw up a link to the

13
00:00:33,390 --> 00:00:37,350
slides right after this so check it

14
00:00:37,350 --> 00:00:40,170
check it out on Twitter and then we're

15
00:00:40,170 --> 00:00:42,540
gonna be talking about GCP today just

16
00:00:42,540 --> 00:00:43,860
kind of going over the basics of how you

17
00:00:43,860 --> 00:00:44,850
would read team inside the environment

18
00:00:44,850 --> 00:00:46,829
and then just some maybe like cool

19
00:00:46,829 --> 00:00:48,450
little nuances that you may or may not

20
00:00:48,450 --> 00:00:50,489
already know about on the platform so

21
00:00:50,489 --> 00:00:53,430
Who am I I'm Bryce I used to work at

22
00:00:53,430 --> 00:00:56,039
homeland I used to lead the instant

23
00:00:56,039 --> 00:00:58,170
response and focus operations for the

24
00:00:58,170 --> 00:01:00,960
unclassified sock so that's kind of like

25
00:01:00,960 --> 00:01:03,750
hunting down a PT's then I worked at NSA

26
00:01:03,750 --> 00:01:05,400
for a while as a technical director up

27
00:01:05,400 --> 00:01:07,320
there over a very specific offensive

28
00:01:07,320 --> 00:01:11,310
unit and then I worked at Adobe I build

29
00:01:11,310 --> 00:01:13,500
a red team out for them and specifically

30
00:01:13,500 --> 00:01:15,000
in their digital experience business

31
00:01:15,000 --> 00:01:17,729
unit located out in Utah and that is

32
00:01:17,729 --> 00:01:20,220
where I physically reside now is near

33
00:01:20,220 --> 00:01:23,130
Salt Lake City Utah so great skiing out

34
00:01:23,130 --> 00:01:26,759
there and then now I lead stage 2

35
00:01:26,759 --> 00:01:28,380
security we're just like a small

36
00:01:28,380 --> 00:01:31,200
boutique firm like 25 people and we do a

37
00:01:31,200 --> 00:01:34,710
lot of like pen testing and tool dev and

38
00:01:34,710 --> 00:01:38,220
stuff like that so oh yeah

39
00:01:38,220 --> 00:01:41,250
also I run B side Salt Lake City I'm the

40
00:01:41,250 --> 00:01:44,430
head of that nonprofit and so you guys

41
00:01:44,430 --> 00:01:47,159
you guys want to come ski in March it's

42
00:01:47,159 --> 00:01:50,579
usually pretty good still alright

43
00:01:50,579 --> 00:01:54,060
so GCP overview because it's only 25

44
00:01:54,060 --> 00:01:55,470
minutes I kind of ripped out most the

45
00:01:55,470 --> 00:01:57,840
overview so this is a crash course in

46
00:01:57,840 --> 00:02:00,030
cloud so alright if you're like an admin

47
00:02:00,030 --> 00:02:02,909
you know and you log it into it via the

48
00:02:02,909 --> 00:02:04,710
website that's kinda you logging into

49
00:02:04,710 --> 00:02:07,350
the management UI right so that's that

50
00:02:07,350 --> 00:02:09,080
console cloud.google.com

51
00:02:09,080 --> 00:02:12,390
you know if you're using the CLI type

52
00:02:12,390 --> 00:02:13,920
tools you're going to talk directly to

53
00:02:13,920 --> 00:02:16,530
control playing api's and anytime you're

54
00:02:16,530 --> 00:02:17,940
tough clicking anything inside the

55
00:02:17,940 --> 00:02:20,250
website for gzp you know that's just

56
00:02:20,250 --> 00:02:21,420
going to be calling the control plant

57
00:02:21,420 --> 00:02:24,989
api's below it and as you create

58
00:02:24,989 --> 00:02:28,440
resources or services you know that's

59
00:02:28,440 --> 00:02:30,090
gonna reach out to the data plane and

60
00:02:30,090 --> 00:02:32,640
spin those out so if you have any type

61
00:02:32,640 --> 00:02:34,530
of automation processes or CI CD

62
00:02:34,530 --> 00:02:36,450
pipeline that's generally just going to

63
00:02:36,450 --> 00:02:38,370
talk to the the control plane EAP is the

64
00:02:38,370 --> 00:02:40,260
restful api is there which are then

65
00:02:40,260 --> 00:02:42,660
gonna spin up the services and the data

66
00:02:42,660 --> 00:02:44,970
plane and typical service is the data

67
00:02:44,970 --> 00:02:46,769
plane would be like a load balancer and

68
00:02:46,769 --> 00:02:48,840
then some type of compute like a virtual

69
00:02:48,840 --> 00:02:51,989
machine and then storage and you know

70
00:02:51,989 --> 00:02:54,630
cloud providers are ever trying to date

71
00:02:54,630 --> 00:02:56,069
in this space and they have array of

72
00:02:56,069 --> 00:02:59,400
different services that you know would

73
00:02:59,400 --> 00:03:00,720
be hard to be an expert in all of them

74
00:03:00,720 --> 00:03:02,670
but uh you know most people were using

75
00:03:02,670 --> 00:03:04,319
the cloud just kind of at least are

76
00:03:04,319 --> 00:03:07,560
using these basics right all right so

77
00:03:07,560 --> 00:03:09,269
let's just dig into compute engine which

78
00:03:09,269 --> 00:03:11,580
is kind of like virtual machines on the

79
00:03:11,580 --> 00:03:14,880
GCP platform so a vulnerability that's

80
00:03:14,880 --> 00:03:17,100
really interesting in the cloud space is

81
00:03:17,100 --> 00:03:18,870
server side request forgeries so

82
00:03:18,870 --> 00:03:19,920
typically you would have a web

83
00:03:19,920 --> 00:03:22,530
application and you would be hosting

84
00:03:22,530 --> 00:03:24,720
that on a virtual machine and let's say

85
00:03:24,720 --> 00:03:25,980
you back in the day this was inside a

86
00:03:25,980 --> 00:03:27,859
datacenter and you had a nice thick

87
00:03:27,859 --> 00:03:30,209
internet-facing datacenter firewall and

88
00:03:30,209 --> 00:03:32,670
so you know you could get to the web

89
00:03:32,670 --> 00:03:34,320
server but you couldn't necessarily get

90
00:03:34,320 --> 00:03:36,150
to any of the other surrounding servers

91
00:03:36,150 --> 00:03:39,450
inside the target network in this

92
00:03:39,450 --> 00:03:40,920
example here we have an application

93
00:03:40,920 --> 00:03:44,100
where a user would typically request the

94
00:03:44,100 --> 00:03:46,769
slash app URI and then they pass a get

95
00:03:46,769 --> 00:03:49,859
parameter for be jpeg and then the web

96
00:03:49,859 --> 00:03:51,450
app would process that request say oh

97
00:03:51,450 --> 00:03:53,220
they want be jpeg that's over here on

98
00:03:53,220 --> 00:03:54,900
this other server that's internal only

99
00:03:54,900 --> 00:03:56,940
I'm gonna make a request out to that

100
00:03:56,940 --> 00:03:58,680
grab the content and then feed it back

101
00:03:58,680 --> 00:04:00,630
to the user so that's kind of the

102
00:04:00,630 --> 00:04:02,640
typical way that the web app would work

103
00:04:02,640 --> 00:04:05,310
now if web application wasn't checking

104
00:04:05,310 --> 00:04:08,130
inputs then it might be vulnerable to a

105
00:04:08,130 --> 00:04:10,079
server side request forgery or an

106
00:04:10,079 --> 00:04:13,260
attacker could replace the image the

107
00:04:13,260 --> 00:04:15,359
value there in the get parameter to

108
00:04:15,359 --> 00:04:17,430
another server internal to the data

109
00:04:17,430 --> 00:04:20,459
center and maybe retrieve back some type

110
00:04:20,459 --> 00:04:22,409
of data that they necessarily shouldn't

111
00:04:22,409 --> 00:04:24,270
be able to access like for example if

112
00:04:24,270 --> 00:04:26,640
there's like a modern server maybe like

113
00:04:26,640 --> 00:04:27,690
a Nagios or something

114
00:04:27,690 --> 00:04:28,950
that on the internal maybe they could

115
00:04:28,950 --> 00:04:30,920
pull some type of stats page off that

116
00:04:30,920 --> 00:04:34,670
you know you know it's you know a

117
00:04:34,670 --> 00:04:37,140
vulnerability but you know it's not

118
00:04:37,140 --> 00:04:38,760
going to lead to a full compromised the

119
00:04:38,760 --> 00:04:41,790
whole data center typically right so

120
00:04:41,790 --> 00:04:44,520
fast forwarding to cloud ss RFS in the

121
00:04:44,520 --> 00:04:48,930
cloud are deadly right so because when

122
00:04:48,930 --> 00:04:52,290
you spin up your VM in the cloud the

123
00:04:52,290 --> 00:04:54,780
control plane needs a way to communicate

124
00:04:54,780 --> 00:04:57,330
certain data to the data plane about

125
00:04:57,330 --> 00:04:59,250
what it should be doing so for example

126
00:04:59,250 --> 00:05:02,370
like when you boot a VM maybe you want

127
00:05:02,370 --> 00:05:04,380
it to execute a boot strip scrip right

128
00:05:04,380 --> 00:05:06,840
like run this bash script when you boot

129
00:05:06,840 --> 00:05:09,540
up how how does the control plan gonna

130
00:05:09,540 --> 00:05:12,570
tell the data plane to do that it's

131
00:05:12,570 --> 00:05:14,730
gonna take that boot scrip put it inside

132
00:05:14,730 --> 00:05:16,830
this metadata service which is like a

133
00:05:16,830 --> 00:05:19,470
restful api that the VM can call out to

134
00:05:19,470 --> 00:05:21,930
and when the VM initially boots is going

135
00:05:21,930 --> 00:05:24,540
to call out to that restful api that's

136
00:05:24,540 --> 00:05:26,340
internal only to it kind of like a

137
00:05:26,340 --> 00:05:29,220
fabric IP and and then it's gonna run

138
00:05:29,220 --> 00:05:30,300
that fast scrip

139
00:05:30,300 --> 00:05:33,300
so there is an RFC spec on metadata

140
00:05:33,300 --> 00:05:35,520
services but each vendors implementation

141
00:05:35,520 --> 00:05:37,910
of it greatly varies from the RC specht

142
00:05:37,910 --> 00:05:40,410
but generally it's always going to be on

143
00:05:40,410 --> 00:05:42,330
that one sixty nine at 2:54 dot one

144
00:05:42,330 --> 00:05:47,090
sixty nine dot 254 IP address and and

145
00:05:47,090 --> 00:05:50,669
big thing here is credentials for GP

146
00:05:50,669 --> 00:05:53,430
services could be stored in that

147
00:05:53,430 --> 00:05:55,530
metadata service which would be

148
00:05:55,530 --> 00:05:57,180
accessible by a server-side request

149
00:05:57,180 --> 00:06:00,840
forgery vulnerability on GCPs

150
00:06:00,840 --> 00:06:03,360
specifically there's like a nice fqdn

151
00:06:03,360 --> 00:06:06,660
that just resolves to that 169 IP on the

152
00:06:06,660 --> 00:06:09,360
other platforms Asher and AWS that as

153
00:06:09,360 --> 00:06:13,140
far as I know that doesn't exist all

154
00:06:13,140 --> 00:06:15,150
right but let's say you have a

155
00:06:15,150 --> 00:06:17,010
server-side request forgery in a web

156
00:06:17,010 --> 00:06:18,419
application and it's running on top of

157
00:06:18,419 --> 00:06:21,150
the GCP platform and you redirect it to

158
00:06:21,150 --> 00:06:23,640
go to the metadata service you might see

159
00:06:23,640 --> 00:06:25,350
back an error message so go to this like

160
00:06:25,350 --> 00:06:27,750
for three forbidden okay so why are you

161
00:06:27,750 --> 00:06:30,180
seeing 403 forbidden that's because

162
00:06:30,180 --> 00:06:32,580
Google has implemented additional

163
00:06:32,580 --> 00:06:34,590
protections to prevent server side

164
00:06:34,590 --> 00:06:36,900
request forgeries vulnerabilities from

165
00:06:36,900 --> 00:06:38,700
be able to access them the metadata

166
00:06:38,700 --> 00:06:41,390
service namely you have to say

167
00:06:41,390 --> 00:06:43,340
another HTTP header in order to access

168
00:06:43,340 --> 00:06:46,280
the metadata service so this applies to

169
00:06:46,280 --> 00:06:50,360
Azure and GCP for most of the stuff you

170
00:06:50,360 --> 00:06:51,710
can query via their metadata services

171
00:06:51,710 --> 00:06:54,950
does not apply to AWS there's no HTTP

172
00:06:54,950 --> 00:07:00,290
header on the AWS platform right now so

173
00:07:00,290 --> 00:07:02,660
you know we're the attacker and now

174
00:07:02,660 --> 00:07:04,610
we're sad because we can't get back the

175
00:07:04,610 --> 00:07:06,950
creds out of the metadata service to

176
00:07:06,950 --> 00:07:09,560
interact with the control plane so

177
00:07:09,560 --> 00:07:13,480
there's kind of this loophole in GCP and

178
00:07:13,480 --> 00:07:16,070
you know if you look up more docs about

179
00:07:16,070 --> 00:07:20,450
it says deprecated and will be you know

180
00:07:20,450 --> 00:07:23,480
removed but it still worked I mean I

181
00:07:23,480 --> 00:07:25,220
tried this last week and still works

182
00:07:25,220 --> 00:07:27,080
right so I don't know what their

183
00:07:27,080 --> 00:07:28,690
timeline is for deprecating it but

184
00:07:28,690 --> 00:07:32,780
basically if you use /v 1 beta 1 not all

185
00:07:32,780 --> 00:07:35,120
the same features are there but most the

186
00:07:35,120 --> 00:07:36,740
features you want are there like the

187
00:07:36,740 --> 00:07:41,510
credentials right so so so you just call

188
00:07:41,510 --> 00:07:42,650
that and then you don't need to pass the

189
00:07:42,650 --> 00:07:46,100
metadata header HTTP header and now

190
00:07:46,100 --> 00:07:50,330
you're all happy as a panda alright so

191
00:07:50,330 --> 00:07:52,160
for example here's a sweet lizard

192
00:07:52,160 --> 00:07:55,550
website and in it there's a request for

193
00:07:55,550 --> 00:07:57,980
like external image and then the get

194
00:07:57,980 --> 00:08:01,100
pram the get parameter P the value of

195
00:08:01,100 --> 00:08:04,370
that is some external JPEG stored in s3

196
00:08:04,370 --> 00:08:07,160
bucket somewhere and so we'll just

197
00:08:07,160 --> 00:08:09,170
modify that so the get parameter P

198
00:08:09,170 --> 00:08:13,010
points to the metadata servers fqdn or

199
00:08:13,010 --> 00:08:15,410
you could do the 169 to 54 IP address

200
00:08:15,410 --> 00:08:19,340
and then use the /v 1 beta 1 with this

201
00:08:19,340 --> 00:08:21,110
URI and what you're going to get

202
00:08:21,110 --> 00:08:23,240
returned back is this bearer token right

203
00:08:23,240 --> 00:08:25,520
here or access token and this is what

204
00:08:25,520 --> 00:08:26,300
you're going to need to start

205
00:08:26,300 --> 00:08:28,580
authenticating to the GCP control plane

206
00:08:28,580 --> 00:08:31,400
with the same rights that the VM is

207
00:08:31,400 --> 00:08:34,659
running as inside of the cloud provider

208
00:08:34,659 --> 00:08:37,309
so generally what you'll do is you'll

209
00:08:37,309 --> 00:08:39,409
take that access token right there and

210
00:08:39,409 --> 00:08:42,440
then you'll query this Google API right

211
00:08:42,440 --> 00:08:45,710
here and it's going to tell you one yeah

212
00:08:45,710 --> 00:08:49,490
that token works and and then 2 it's

213
00:08:49,490 --> 00:08:50,720
also going to tell you the scope of the

214
00:08:50,720 --> 00:08:53,390
token so this is like incredibly nice

215
00:08:53,390 --> 00:08:54,560
because it actually tells you

216
00:08:54,560 --> 00:08:56,960
what you can use the token to do like

217
00:08:56,960 --> 00:08:59,660
what the token can do inside of the gcpd

218
00:08:59,660 --> 00:09:02,080
account first is on AWS

219
00:09:02,080 --> 00:09:04,700
you might get access to a token but then

220
00:09:04,700 --> 00:09:06,110
you kind of have to a lot of times

221
00:09:06,110 --> 00:09:08,240
blindly guess what it can access inside

222
00:09:08,240 --> 00:09:13,850
the environment so if we try to use that

223
00:09:13,850 --> 00:09:16,250
token to like spin up another VM it's

224
00:09:16,250 --> 00:09:17,900
gonna it's going to send us back this

225
00:09:17,900 --> 00:09:19,720
message by default like in submission

226
00:09:19,720 --> 00:09:22,850
insufficient permissions and so let's

227
00:09:22,850 --> 00:09:24,589
like look into why we we don't have

228
00:09:24,589 --> 00:09:25,790
writes that if we go to the web

229
00:09:25,790 --> 00:09:27,770
management console like an admin and

230
00:09:27,770 --> 00:09:29,230
then we go over to the compute engine

231
00:09:29,230 --> 00:09:32,060
service and we go to spin up a new VM

232
00:09:32,060 --> 00:09:34,279
we're gonna see there's a block there

233
00:09:34,279 --> 00:09:36,680
for identity and API access so one of

234
00:09:36,680 --> 00:09:38,330
the cool parts about GCP is you could

235
00:09:38,330 --> 00:09:41,180
actually specify what that access token

236
00:09:41,180 --> 00:09:42,860
inside the metadata service will have

237
00:09:42,860 --> 00:09:46,010
access to which is a little different

238
00:09:46,010 --> 00:09:48,020
than the way it operates on a shore and

239
00:09:48,020 --> 00:09:51,710
AWS but you know the allowed default

240
00:09:51,710 --> 00:09:55,820
access if we can pick that that's not

241
00:09:55,820 --> 00:09:57,230
gonna let us spin of VMs we'll look at

242
00:09:57,230 --> 00:09:59,210
that it's more in a second but we could

243
00:09:59,210 --> 00:10:01,520
also pick set access for each API and

244
00:10:01,520 --> 00:10:03,770
that will let us kind of pick like hey I

245
00:10:03,770 --> 00:10:05,450
want this box to be able to talk to

246
00:10:05,450 --> 00:10:09,410
bigquery or some other GCP service so by

247
00:10:09,410 --> 00:10:11,330
default these are the services that you

248
00:10:11,330 --> 00:10:14,000
can query you can see compute engine is

249
00:10:14,000 --> 00:10:16,160
it that's disabled so you cannot spin

250
00:10:16,160 --> 00:10:18,050
out more VMs if you still creds this way

251
00:10:18,050 --> 00:10:21,170
and yeah we'll come back around to this

252
00:10:21,170 --> 00:10:23,960
more in a second so and then there's

253
00:10:23,960 --> 00:10:26,870
also that middle box full access so if

254
00:10:26,870 --> 00:10:28,430
that was selected when the VM was

255
00:10:28,430 --> 00:10:31,370
spinning up then yes those credentials

256
00:10:31,370 --> 00:10:33,380
can totally be used to spin up more VMs

257
00:10:33,380 --> 00:10:34,910
inside the environment that are under

258
00:10:34,910 --> 00:10:38,180
the attackers control so so it really

259
00:10:38,180 --> 00:10:39,500
depends on the permissions there they're

260
00:10:39,500 --> 00:10:43,089
set around the VM when they're booted up

261
00:10:43,089 --> 00:10:45,410
there's some scripts here on this github

262
00:10:45,410 --> 00:10:47,930
for just those requests I showed you

263
00:10:47,930 --> 00:10:49,640
there you don't really need to use them

264
00:10:49,640 --> 00:10:52,029
I just more put them there for

265
00:10:52,029 --> 00:10:56,990
documentation purposes all right cool so

266
00:10:56,990 --> 00:10:59,360
let's look at storage right ton of cloud

267
00:10:59,360 --> 00:11:01,160
storage breaches out there this is just

268
00:11:01,160 --> 00:11:03,050
from a small six month period we see

269
00:11:03,050 --> 00:11:05,839
names like a century Verizon Time Warner

270
00:11:05,839 --> 00:11:07,530
Cable Dow Jones

271
00:11:07,530 --> 00:11:09,990
all using storage account and cloud

272
00:11:09,990 --> 00:11:11,970
providers without properly securing them

273
00:11:11,970 --> 00:11:14,070
so there's a cool project out there

274
00:11:14,070 --> 00:11:16,500
called buckets gray hat warfare comm

275
00:11:16,500 --> 00:11:18,300
where they just go and index all these

276
00:11:18,300 --> 00:11:19,620
public buckets and you can search

277
00:11:19,620 --> 00:11:20,910
through them I'm not sure on the

278
00:11:20,910 --> 00:11:24,680
legality of this but it's a cool idea

279
00:11:24,680 --> 00:11:27,630
basically in the cloud space there's two

280
00:11:27,630 --> 00:11:28,980
permissions that you want to look watch

281
00:11:28,980 --> 00:11:32,070
out for on the GCP and AWS platforms all

282
00:11:32,070 --> 00:11:35,370
users means public and all authenticated

283
00:11:35,370 --> 00:11:38,430
users sounds like only people in your

284
00:11:38,430 --> 00:11:40,410
GCP count would be able to get to the

285
00:11:40,410 --> 00:11:42,570
files or resources and objects in the

286
00:11:42,570 --> 00:11:44,520
buckets but what that actually means is

287
00:11:44,520 --> 00:11:47,070
anybody who has any GCP account can get

288
00:11:47,070 --> 00:11:49,020
to the resources so that tripped a lot

289
00:11:49,020 --> 00:11:51,630
of people up on AWS platform

290
00:11:51,630 --> 00:11:54,870
specifically that cloud providers have

291
00:11:54,870 --> 00:11:57,830
made changes in the last year or so to

292
00:11:57,830 --> 00:12:00,510
the interfaces for storage accounts to

293
00:12:00,510 --> 00:12:02,540
make it a lot harder for you to make

294
00:12:02,540 --> 00:12:05,820
objects public so that that is positive

295
00:12:05,820 --> 00:12:08,430
from a defense side but you know you'll

296
00:12:08,430 --> 00:12:10,530
still see stuff set up instantly and

297
00:12:10,530 --> 00:12:12,920
correctly

298
00:12:12,920 --> 00:12:16,230
generally speaking storage on GCP is

299
00:12:16,230 --> 00:12:17,160
pretty uniformed

300
00:12:17,160 --> 00:12:19,080
right it's stores that google api is

301
00:12:19,080 --> 00:12:20,850
calm then you have to have a globally

302
00:12:20,850 --> 00:12:23,280
unique bucket name and then you'll have

303
00:12:23,280 --> 00:12:27,720
the object or file name here you can set

304
00:12:27,720 --> 00:12:30,150
buckets list of all this is not a typo

305
00:12:30,150 --> 00:12:32,640
but the top does say like the Amazon s3

306
00:12:32,640 --> 00:12:36,089
spec for the list so that is the way GCP

307
00:12:36,089 --> 00:12:39,060
does that and you could Bruce force for

308
00:12:39,060 --> 00:12:41,370
objects or bucket names using a tool

309
00:12:41,370 --> 00:12:43,080
like go Buster

310
00:12:43,080 --> 00:12:45,450
you know just like you would on any web

311
00:12:45,450 --> 00:12:48,540
engagement okay so one thing that I just

312
00:12:48,540 --> 00:12:50,130
wanted to highlight real quickly is if

313
00:12:50,130 --> 00:12:52,020
you spin up a VM and use the default

314
00:12:52,020 --> 00:12:55,380
settings and you look under storage it

315
00:12:55,380 --> 00:12:56,790
says by default you have read-only

316
00:12:56,790 --> 00:12:58,920
access to storage so what does that

317
00:12:58,920 --> 00:13:01,140
actually mean and what that means is

318
00:13:01,140 --> 00:13:03,240
there's this concept and GCP of a

319
00:13:03,240 --> 00:13:05,880
project and so almost everything in GCP

320
00:13:05,880 --> 00:13:09,810
is segmented at the project level so

321
00:13:09,810 --> 00:13:11,280
you'll have like an organization you'll

322
00:13:11,280 --> 00:13:12,870
want to create a folder underneath it

323
00:13:12,870 --> 00:13:15,060
even if you don't use the folder and

324
00:13:15,060 --> 00:13:16,770
then you'll want to create projects

325
00:13:16,770 --> 00:13:18,900
underneath that folder so

326
00:13:18,900 --> 00:13:22,410
if you get the credentials out of the

327
00:13:22,410 --> 00:13:24,000
metadata service and then there's a

328
00:13:24,000 --> 00:13:26,520
storage inside that same project even if

329
00:13:26,520 --> 00:13:28,500
that requires authentication you'll be

330
00:13:28,500 --> 00:13:30,450
able to read the objects in that storage

331
00:13:30,450 --> 00:13:33,720
account so so that's a good way to

332
00:13:33,720 --> 00:13:39,300
expand access okay we've got a few

333
00:13:39,300 --> 00:13:41,130
minutes left so I'm gonna talk about

334
00:13:41,130 --> 00:13:45,090
kubernetes basically the scenario we got

335
00:13:45,090 --> 00:13:47,310
here is there's a there's a container

336
00:13:47,310 --> 00:13:48,840
running a web app it has some

337
00:13:48,840 --> 00:13:50,370
vulnerability in it that enables remote

338
00:13:50,370 --> 00:13:53,070
code execution for the demos you might

339
00:13:53,070 --> 00:13:54,720
see in screenshots I load up the Voodoo

340
00:13:54,720 --> 00:13:56,310
tool which is kind of our cross-platform

341
00:13:56,310 --> 00:13:59,040
post exploitation tool and then we kind

342
00:13:59,040 --> 00:14:00,480
of see what damage could be done inside

343
00:14:00,480 --> 00:14:02,040
the cluster or how you would expand

344
00:14:02,040 --> 00:14:04,980
access from there this is really looking

345
00:14:04,980 --> 00:14:09,090
at gke google google kubernetes engine

346
00:14:09,090 --> 00:14:11,250
specifically there's a lot of different

347
00:14:11,250 --> 00:14:12,960
kubernetes implementations out there and

348
00:14:12,960 --> 00:14:15,150
this is just kind of default set up as

349
00:14:15,150 --> 00:14:18,540
of you know 30 days ago so okay cool so

350
00:14:18,540 --> 00:14:20,010
if you exploit a web app in your

351
00:14:20,010 --> 00:14:21,450
attacker how would you even know that

352
00:14:21,450 --> 00:14:24,120
you're inside a container one way is you

353
00:14:24,120 --> 00:14:27,300
could cat proc one c group and you can

354
00:14:27,300 --> 00:14:28,620
see in the listings if you can see the

355
00:14:28,620 --> 00:14:30,510
monitors that it says like this is a

356
00:14:30,510 --> 00:14:34,590
cuckoo pod right you know you off if

357
00:14:34,590 --> 00:14:36,900
Dockers in use you could LS the root and

358
00:14:36,900 --> 00:14:38,430
generally you'll see that hidden file

359
00:14:38,430 --> 00:14:41,280
docker environment and then the other

360
00:14:41,280 --> 00:14:43,470
one is if you do a PS a process list on

361
00:14:43,470 --> 00:14:46,530
the box you'll see that pit one looks

362
00:14:46,530 --> 00:14:48,240
weird right it doesn't look like an INT

363
00:14:48,240 --> 00:14:50,430
or launch d which are typically some of

364
00:14:50,430 --> 00:14:51,840
the early processes that get started up

365
00:14:51,840 --> 00:14:54,840
on linux systems for like example this

366
00:14:54,840 --> 00:14:56,550
would typically be a typical case where

367
00:14:56,550 --> 00:14:59,070
you'd see like a flask web app as pit

368
00:14:59,070 --> 00:15:00,720
one so you know you're inside a

369
00:15:00,720 --> 00:15:04,830
container environment okay so probably

370
00:15:04,830 --> 00:15:07,050
no secret here if you're familiar with

371
00:15:07,050 --> 00:15:11,760
kubernetes but there's a the there's

372
00:15:11,760 --> 00:15:14,250
creds basically stored in this location

373
00:15:14,250 --> 00:15:15,780
right here on disk so if you can read

374
00:15:15,780 --> 00:15:17,820
that then you can start authenticating

375
00:15:17,820 --> 00:15:22,080
to the kubernetes api one thing to keep

376
00:15:22,080 --> 00:15:24,900
in mind is that kubernetes the way it

377
00:15:24,900 --> 00:15:27,480
works on tcp is it just creates

378
00:15:27,480 --> 00:15:31,829
instances under compute engine so

379
00:15:31,829 --> 00:15:33,929
even if you get access to a container by

380
00:15:33,929 --> 00:15:36,209
default you can redirect and talk to the

381
00:15:36,209 --> 00:15:37,649
metadata service just like we saw in the

382
00:15:37,649 --> 00:15:39,959
past example grab those creds and start

383
00:15:39,959 --> 00:15:45,089
using them to talk at the GCP level so

384
00:15:45,089 --> 00:15:46,800
here's an example where we load up a

385
00:15:46,800 --> 00:15:48,540
Python script and we pull creds out of

386
00:15:48,540 --> 00:15:49,110
the metadata

387
00:15:49,110 --> 00:15:52,139
get back that access token one thing

388
00:15:52,139 --> 00:15:53,850
that is kind of interesting is as part

389
00:15:53,850 --> 00:15:56,999
of the bootstrapping process on the tcp

390
00:15:56,999 --> 00:16:01,290
platform there is a coop environment set

391
00:16:01,290 --> 00:16:05,459
inside the metadata service so so this

392
00:16:05,459 --> 00:16:09,110
is used when when worker nodes are being

393
00:16:09,110 --> 00:16:12,480
bootstrapped or loaded initially and you

394
00:16:12,480 --> 00:16:14,249
can pull those credentials out of there

395
00:16:14,249 --> 00:16:16,230
now there's a little more work that you

396
00:16:16,230 --> 00:16:17,730
need to do here in order to be able to

397
00:16:17,730 --> 00:16:21,299
use those to talk to the the kubernetes

398
00:16:21,299 --> 00:16:25,829
api and you can check out the references

399
00:16:25,829 --> 00:16:27,269
on the bottom of this slide and I will

400
00:16:27,269 --> 00:16:29,129
post the slides on my Twitter account

401
00:16:29,129 --> 00:16:32,129
for you guys so but you know you go

402
00:16:32,129 --> 00:16:33,420
through a couple steps and then you can

403
00:16:33,420 --> 00:16:36,179
authenticate to the API and you know

404
00:16:36,179 --> 00:16:39,269
potentially spin up more pods inside the

405
00:16:39,269 --> 00:16:43,529
cluster alright another way you can

406
00:16:43,529 --> 00:16:46,350
expand access if you get access to to a

407
00:16:46,350 --> 00:16:49,139
container is you know by default there's

408
00:16:49,139 --> 00:16:53,339
really no enforcement of network

409
00:16:53,339 --> 00:16:55,649
boundaries you would have to implement

410
00:16:55,649 --> 00:16:58,709
something like it so or cilium inside

411
00:16:58,709 --> 00:17:02,149
the cluster to to prevent that so a

412
00:17:02,149 --> 00:17:05,220
compromised pod could talk to the KU

413
00:17:05,220 --> 00:17:08,669
Blood Service on these TCP ports so like

414
00:17:08,669 --> 00:17:10,319
here's a Python script that are load up

415
00:17:10,319 --> 00:17:12,209
into memory only to scan for the port

416
00:17:12,209 --> 00:17:14,909
and then another Python script where we

417
00:17:14,909 --> 00:17:17,398
would just access those to list out what

418
00:17:17,398 --> 00:17:19,260
pods are running on the other worker

419
00:17:19,260 --> 00:17:22,398
nodes inside the cluster

420
00:17:26,480 --> 00:17:29,630
right and then container security it is

421
00:17:29,630 --> 00:17:32,090
really just Linux kernel security and

422
00:17:32,090 --> 00:17:33,919
this is one thing that I think you know

423
00:17:33,919 --> 00:17:34,909
if you don't take anything else away

424
00:17:34,909 --> 00:17:36,230
from here that hopefully you'll take

425
00:17:36,230 --> 00:17:39,200
away is you know there was a

426
00:17:39,200 --> 00:17:40,850
vulnerability earliest here the Runcie

427
00:17:40,850 --> 00:17:42,649
vulnerability and that would allow you

428
00:17:42,649 --> 00:17:43,940
to break out of the container and get

429
00:17:43,940 --> 00:17:47,299
code running on the host but the dirty

430
00:17:47,299 --> 00:17:49,090
Cal exploit from a number of years ago

431
00:17:49,090 --> 00:17:51,230
would also do the same thing what's

432
00:17:51,230 --> 00:17:53,450
typically an exploit used to provide

433
00:17:53,450 --> 00:17:57,590
user to root on a Linux system but it

434
00:17:57,590 --> 00:17:59,000
would also have the capability to break

435
00:17:59,000 --> 00:18:02,779
you out of the container so container

436
00:18:02,779 --> 00:18:04,370
security is really just the Linux kernel

437
00:18:04,370 --> 00:18:06,889
security you could use a set comp or

438
00:18:06,889 --> 00:18:08,360
some other controls to try and prevent

439
00:18:08,360 --> 00:18:11,690
what kernel API calls consult from the

440
00:18:11,690 --> 00:18:14,240
container but yeah for the most part

441
00:18:14,240 --> 00:18:18,049
like a common thing that you'll see a

442
00:18:18,049 --> 00:18:20,029
lot if you search for like kubernetes

443
00:18:20,029 --> 00:18:22,580
hacking is after they gain some type of

444
00:18:22,580 --> 00:18:27,110
credentials they'll talk to the API and

445
00:18:27,110 --> 00:18:29,870
then they'll deploy another another can

446
00:18:29,870 --> 00:18:32,149
another pod that has a container that

447
00:18:32,149 --> 00:18:33,850
will have the root filesystem mounted

448
00:18:33,850 --> 00:18:35,750
you know this may or may not work in

449
00:18:35,750 --> 00:18:38,179
your target environment the security

450
00:18:38,179 --> 00:18:42,260
posture of it and another thing to just

451
00:18:42,260 --> 00:18:45,549
kind of be aware of from a high level is

452
00:18:45,549 --> 00:18:48,110
they're constantly rolling features into

453
00:18:48,110 --> 00:18:50,299
kubernetes and most of that code is

454
00:18:50,299 --> 00:18:54,169
accessible via this API here so so some

455
00:18:54,169 --> 00:18:55,039
of that codes gonna have vulnerabilities

456
00:18:55,039 --> 00:18:58,010
and in 2018 there was a vulnerability

457
00:18:58,010 --> 00:19:00,919
and the API that would enable you to a

458
00:19:00,919 --> 00:19:02,450
bypass all authentication and

459
00:19:02,450 --> 00:19:04,279
authorization so basically if you could

460
00:19:04,279 --> 00:19:06,649
just talk to the API for kubernetes you

461
00:19:06,649 --> 00:19:13,460
could do anything inside the cluster one

462
00:19:13,460 --> 00:19:14,809
thing that I haven't really seen this on

463
00:19:14,809 --> 00:19:17,809
engagement but technically you have a

464
00:19:17,809 --> 00:19:19,610
something that's managing the containers

465
00:19:19,610 --> 00:19:22,190
on the worker nodes like docker so if

466
00:19:22,190 --> 00:19:23,480
you were to miss configure it with an

467
00:19:23,480 --> 00:19:25,850
unprotected TCP socket you could move

468
00:19:25,850 --> 00:19:32,679
laterally that way - okay great okay so

469
00:19:32,679 --> 00:19:35,210
we talked a little bit about breaching

470
00:19:35,210 --> 00:19:37,460
the environments from server side right

471
00:19:37,460 --> 00:19:38,660
coming in from the internet

472
00:19:38,660 --> 00:19:41,350
I just wanted to talk a little bit about

473
00:19:41,350 --> 00:19:44,240
reaching from client side or you know

474
00:19:44,240 --> 00:19:45,680
trying to get access to either the

475
00:19:45,680 --> 00:19:48,770
engineers or the cloud admins laptops

476
00:19:48,770 --> 00:19:52,400
right so may or may not be applicable to

477
00:19:52,400 --> 00:19:54,140
you but a lot of tech companies they use

478
00:19:54,140 --> 00:19:57,580
Mac endpoints there was a recent

479
00:19:57,580 --> 00:20:01,940
vulnerability in Excel for on Mac that

480
00:20:01,940 --> 00:20:03,500
would basically allow you to get code

481
00:20:03,500 --> 00:20:07,610
execution by a exo-m macro so that that

482
00:20:07,610 --> 00:20:09,440
just came out last month or this month

483
00:20:09,440 --> 00:20:13,220
and then prior to that you know I don't

484
00:20:13,220 --> 00:20:14,540
know if you guys know Patrick Worrell

485
00:20:14,540 --> 00:20:16,610
but he has a lot of research up on his

486
00:20:16,610 --> 00:20:17,690
blog that's really good if you're

487
00:20:17,690 --> 00:20:20,480
interested in Mac exploitation the blogs

488
00:20:20,480 --> 00:20:22,130
objective-c there's links in the

489
00:20:22,130 --> 00:20:24,590
references but basically if you can take

490
00:20:24,590 --> 00:20:26,750
advantage of a vulnerability like the

491
00:20:26,750 --> 00:20:31,400
XML one or whatever X amount then you

492
00:20:31,400 --> 00:20:33,500
could get code execution on a laptop and

493
00:20:33,500 --> 00:20:34,880
if you were to get code execution on a

494
00:20:34,880 --> 00:20:37,760
laptop and they were using the CLI for

495
00:20:37,760 --> 00:20:40,250
GCP it would create this dot config

496
00:20:40,250 --> 00:20:42,350
folder and then you'll see some files

497
00:20:42,350 --> 00:20:44,690
underneath that and the files you'd see

498
00:20:44,690 --> 00:20:46,520
underneath that look like this right and

499
00:20:46,520 --> 00:20:49,340
you know the one that says access tokens

500
00:20:49,340 --> 00:20:51,680
DB looks pretty good so if we start

501
00:20:51,680 --> 00:20:53,540
checking that out we realize that's just

502
00:20:53,540 --> 00:20:56,570
an SQLite database and if we extract the

503
00:20:56,570 --> 00:20:59,240
data out of there we can get a token

504
00:20:59,240 --> 00:21:02,090
that allow us to authenticate to the GCP

505
00:21:02,090 --> 00:21:03,830
control plane in the context of whatever

506
00:21:03,830 --> 00:21:07,670
that admin can do from his laptop also

507
00:21:07,670 --> 00:21:10,220
to note there is also inside that same

508
00:21:10,220 --> 00:21:13,430
database a list of the scope of what

509
00:21:13,430 --> 00:21:15,860
those credentials can access so that's

510
00:21:15,860 --> 00:21:17,150
that's nice from an exploitation

511
00:21:17,150 --> 00:21:18,800
standpoint you can see how valuable they

512
00:21:18,800 --> 00:21:22,670
are pretty quick and then another thing

513
00:21:22,670 --> 00:21:24,560
I just want to highlight is cookies

514
00:21:24,560 --> 00:21:26,660
right like a lot of the admins aren't

515
00:21:26,660 --> 00:21:27,920
even installing the co lies on their

516
00:21:27,920 --> 00:21:29,900
laptops anymore and I'll show you why in

517
00:21:29,900 --> 00:21:32,270
a second but you know they still

518
00:21:32,270 --> 00:21:34,040
authenticate using their browsers

519
00:21:34,040 --> 00:21:36,320
there's a cool technique cookie crimes

520
00:21:36,320 --> 00:21:38,560
if you haven't checked it out you should

521
00:21:38,560 --> 00:21:41,360
but you know you could export the

522
00:21:41,360 --> 00:21:44,150
cookies replay them or to jump into

523
00:21:44,150 --> 00:21:47,030
their browser sessions so when you're

524
00:21:47,030 --> 00:21:50,060
inside GCP and a few of other cloud

525
00:21:50,060 --> 00:21:51,930
providers have copied this

526
00:21:51,930 --> 00:21:54,059
there's a cloud shell and this is really

527
00:21:54,059 --> 00:21:57,330
popular with the sres or our admins for

528
00:21:57,330 --> 00:21:59,100
the cloud now because they don't install

529
00:21:59,100 --> 00:22:00,660
anything on their laptop they just login

530
00:22:00,660 --> 00:22:02,610
with a browser and they can click this

531
00:22:02,610 --> 00:22:04,050
button in the upper right hand corner

532
00:22:04,050 --> 00:22:06,809
and then a containerized environment is

533
00:22:06,809 --> 00:22:08,280
deployed and they can run all their

534
00:22:08,280 --> 00:22:09,420
commands for that containerized

535
00:22:09,420 --> 00:22:12,570
environment right so that's that's cool

536
00:22:12,570 --> 00:22:14,700
the first thing to note from an

537
00:22:14,700 --> 00:22:16,350
offensive standpoint like let's say I

538
00:22:16,350 --> 00:22:18,630
steal someone's cookies and I'm somehow

539
00:22:18,630 --> 00:22:20,550
able to access the GCP environment but

540
00:22:20,550 --> 00:22:22,890
it's not gonna last long right so I want

541
00:22:22,890 --> 00:22:25,470
to persist some way so so I thought

542
00:22:25,470 --> 00:22:26,730
about this in the context of the cloud

543
00:22:26,730 --> 00:22:29,340
shell because I see this in use a lot

544
00:22:29,340 --> 00:22:30,809
now and you'll see right there it says

545
00:22:30,809 --> 00:22:32,760
your home directory will persist across

546
00:22:32,760 --> 00:22:34,559
sessions right from an attacker

547
00:22:34,559 --> 00:22:36,600
standpoint but that sounds pretty great

548
00:22:36,600 --> 00:22:40,200
right you know so so what if you know we

549
00:22:40,200 --> 00:22:41,820
just make a slight modification to it

550
00:22:41,820 --> 00:22:45,330
old-school style like we dork the bash

551
00:22:45,330 --> 00:22:49,770
RC to load up our tool whenever they

552
00:22:49,770 --> 00:22:52,530
they load up this environment does that

553
00:22:52,530 --> 00:22:54,330
actually work can we get a call back out

554
00:22:54,330 --> 00:22:57,120
of the cloud shell environment and yeah

555
00:22:57,120 --> 00:22:59,190
the answer to that is yeah we get a call

556
00:22:59,190 --> 00:23:00,660
back every time they click that button

557
00:23:00,660 --> 00:23:03,809
and the bash RC gets loaded to our LP

558
00:23:03,809 --> 00:23:05,610
where our you know red teaming software

559
00:23:05,610 --> 00:23:07,590
is that and then you know from there we

560
00:23:07,590 --> 00:23:08,670
could we have the same level of access

561
00:23:08,670 --> 00:23:10,440
that the admin does inside the cloud

562
00:23:10,440 --> 00:23:15,990
shell two minutes ok so there's some

563
00:23:15,990 --> 00:23:17,300
really cool

564
00:23:17,300 --> 00:23:19,740
Twitter chatter and is that the right

565
00:23:19,740 --> 00:23:23,340
term just on how to get outside of that

566
00:23:23,340 --> 00:23:24,780
shell because that shells kind of a

567
00:23:24,780 --> 00:23:30,360
container so I guess the the route you

568
00:23:30,360 --> 00:23:32,100
can get to the route host below it just

569
00:23:32,100 --> 00:23:36,900
by running that command at the top so I

570
00:23:36,900 --> 00:23:39,360
did that and from there you can access

571
00:23:39,360 --> 00:23:41,720
the metadata service from the route host

572
00:23:41,720 --> 00:23:44,130
but there's not really much you can

573
00:23:44,130 --> 00:23:45,450
access from there so that's kind of

574
00:23:45,450 --> 00:23:49,080
mostly a dead end but from a persistence

575
00:23:49,080 --> 00:23:52,440
standpoint I didn't notice that you can

576
00:23:52,440 --> 00:23:54,570
store files when you're on the host

577
00:23:54,570 --> 00:23:57,330
below that container in slash temp and

578
00:23:57,330 --> 00:23:58,770
they have a few other Mountain points

579
00:23:58,770 --> 00:24:01,260
that are writable and those seem to

580
00:24:01,260 --> 00:24:04,110
persist at least for a moderate amount

581
00:24:04,110 --> 00:24:04,630
of time

582
00:24:04,630 --> 00:24:07,570
so so that that's that's kind of cool

583
00:24:07,570 --> 00:24:09,070
maybe like a little bit of a covert

584
00:24:09,070 --> 00:24:12,400
store type system if if you know you

585
00:24:12,400 --> 00:24:16,660
were using this in real life all right

586
00:24:16,660 --> 00:24:20,530
one minute left okay last thing okay so

587
00:24:20,530 --> 00:24:23,320
when you go to I win a pod goes to

588
00:24:23,320 --> 00:24:25,120
authenticate to the API or somebody else

589
00:24:25,120 --> 00:24:27,370
what really happens on the hood you get

590
00:24:27,370 --> 00:24:29,950
authentication auth n then you get

591
00:24:29,950 --> 00:24:32,410
authorization off Z that kind of makes

592
00:24:32,410 --> 00:24:33,910
sure that you know you're allowed to do

593
00:24:33,910 --> 00:24:35,440
what you're doing and then there's this

594
00:24:35,440 --> 00:24:37,510
new thing called admission control right

595
00:24:37,510 --> 00:24:39,040
and what does the Mission Control does

596
00:24:39,040 --> 00:24:41,020
it does really useful things like

597
00:24:41,020 --> 00:24:43,480
validates that the what you're trying to

598
00:24:43,480 --> 00:24:46,060
deploy inside the cluster isn't doing

599
00:24:46,060 --> 00:24:48,510
anything bad from a security standpoint

600
00:24:48,510 --> 00:24:52,270
but like for example mounting the hosts

601
00:24:52,270 --> 00:24:54,310
--is root filesystem and things like

602
00:24:54,310 --> 00:24:58,570
that but what I noticed was there you

603
00:24:58,570 --> 00:25:00,310
can have because they didn't want to

604
00:25:00,310 --> 00:25:02,260
make you code everything inside of that

605
00:25:02,260 --> 00:25:03,880
you can reach out to an external

606
00:25:03,880 --> 00:25:06,400
admission control so let's imagine you

607
00:25:06,400 --> 00:25:07,990
get some type of privilege access inside

608
00:25:07,990 --> 00:25:10,320
the kubernetes cluster and you wrote a

609
00:25:10,320 --> 00:25:13,630
evil external mission control you could

610
00:25:13,630 --> 00:25:16,120
mutate deployments as they move into the

611
00:25:16,120 --> 00:25:18,640
cluster and this is a newer thing is

612
00:25:18,640 --> 00:25:20,800
still alpha beta so you may not see this

613
00:25:20,800 --> 00:25:23,080
in production but I definitely feel like

614
00:25:23,080 --> 00:25:23,950
this is the way the industry is moving

615
00:25:23,950 --> 00:25:27,400
and with that being said I'm Bryce if

616
00:25:27,400 --> 00:25:28,510
you want to talk more I'll just be out

617
00:25:28,510 --> 00:25:30,520
hanging outside I know I went through a

618
00:25:30,520 --> 00:25:32,950
lot quick but thank you guys for

619
00:25:32,950 --> 00:25:33,840
listening

620
00:25:33,840 --> 00:25:43,770
[Applause]

