1
00:00:00,030 --> 00:00:03,330
next speaker is a Daniel McGee me I

2
00:00:03,330 --> 00:00:05,190
believe actually this work is going to

3
00:00:05,190 --> 00:00:08,189
be presented next week at AC MCCS in

4
00:00:08,189 --> 00:00:12,650
London really top tier academic

5
00:00:12,650 --> 00:00:17,010
conference for security so I really like

6
00:00:17,010 --> 00:00:20,820
it when academic academic work comes out

7
00:00:20,820 --> 00:00:22,560
to the hacker community and you're all

8
00:00:22,560 --> 00:00:24,779
going to get a preview of that this is

9
00:00:24,779 --> 00:00:29,400
really cool attack similar to on a data

10
00:00:29,400 --> 00:00:31,920
side channels in processors so take it

11
00:00:31,920 --> 00:00:37,350
away thanks for the intro and thanks for

12
00:00:37,350 --> 00:00:39,510
everybody attending my talk today we're

13
00:00:39,510 --> 00:00:42,180
going to talk about the zombie attacks

14
00:00:42,180 --> 00:00:45,030
amulet is a CPU attack that can actually

15
00:00:45,030 --> 00:00:47,460
leak data from other processes context

16
00:00:47,460 --> 00:00:50,460
switches maybe you can use it to do

17
00:00:50,460 --> 00:00:54,300
privilege escalation and this is a joint

18
00:00:54,300 --> 00:00:56,910
work with a bunch of people from four

19
00:00:56,910 --> 00:01:01,140
different universities an institution so

20
00:01:01,140 --> 00:01:03,570
a little bit about me my name is Daniel

21
00:01:03,570 --> 00:01:04,860
Murphy me I have been doing some

22
00:01:04,860 --> 00:01:08,939
security work since 2010 I've been doing

23
00:01:08,939 --> 00:01:12,210
a PhD since 2017 on a slightly different

24
00:01:12,210 --> 00:01:14,790
topic since then I like micro

25
00:01:14,790 --> 00:01:17,100
architectural security side channels and

26
00:01:17,100 --> 00:01:19,650
applying them to breaking crypto and

27
00:01:19,650 --> 00:01:25,110
different things so and this is my first

28
00:01:25,110 --> 00:01:27,810
stock in a hacker con so it's going to

29
00:01:27,810 --> 00:01:29,119
be exciting

30
00:01:29,119 --> 00:01:38,400
you'll see so before talking about our

31
00:01:38,400 --> 00:01:41,450
attack let's talk about cache attacks

32
00:01:41,450 --> 00:01:44,820
which is like a basic that we use in our

33
00:01:44,820 --> 00:01:48,659
attack in in leaking data from CPUs so

34
00:01:48,659 --> 00:01:52,649
what our cache attacks CPU has to use

35
00:01:52,649 --> 00:01:55,290
cache to feel the speed gap between this

36
00:01:55,290 --> 00:01:58,740
between the CPU and Adira in a in a

37
00:01:58,740 --> 00:02:00,329
motor computer system we have a

38
00:02:00,329 --> 00:02:02,399
hierarchy of memories like CPU register

39
00:02:02,399 --> 00:02:04,500
cache theorem and in the bottom there

40
00:02:04,500 --> 00:02:06,860
are other things like peripherals disk

41
00:02:06,860 --> 00:02:11,280
when we get ok

42
00:02:11,280 --> 00:02:13,510
when we get to the top of this pyramid

43
00:02:13,510 --> 00:02:17,020
we have like more expensive memory that

44
00:02:17,020 --> 00:02:19,270
you cannot have a lot of them but they

45
00:02:19,270 --> 00:02:22,800
are much faster so how CPUs this cache

46
00:02:22,800 --> 00:02:25,990
we try to access something from the DRAM

47
00:02:25,990 --> 00:02:29,020
we load this the CPU put it in the cache

48
00:02:29,020 --> 00:02:32,110
and then we get the data to the CPU this

49
00:02:32,110 --> 00:02:34,180
this is a slow because the CPU has got

50
00:02:34,180 --> 00:02:36,130
through a very long path it take maybe

51
00:02:36,130 --> 00:02:38,710
two or three hundred cycles so we don't

52
00:02:38,710 --> 00:02:40,540
want that the next time the CPU wants to

53
00:02:40,540 --> 00:02:42,760
access this we're going to get a cache

54
00:02:42,760 --> 00:02:44,290
hit because it's hot it has already

55
00:02:44,290 --> 00:02:46,660
meaning in a faster memory that is very

56
00:02:46,660 --> 00:02:48,820
close to CPU so the second time this is

57
00:02:48,820 --> 00:02:51,970
going to be much faster but the great

58
00:02:51,970 --> 00:02:54,490
thing about cache is it can actually let

59
00:02:54,490 --> 00:02:56,310
you to do some side-channel attacks

60
00:02:56,310 --> 00:02:58,600
there are lots of different sites on

61
00:02:58,600 --> 00:03:01,720
your attacks out there since - since 15

62
00:03:01,720 --> 00:03:05,500
years ago but one interesting attack is

63
00:03:05,500 --> 00:03:07,360
called flush and reload flush reload is

64
00:03:07,360 --> 00:03:10,330
one of the most simple simplistic cache

65
00:03:10,330 --> 00:03:12,760
attacks that can be used when we have a

66
00:03:12,760 --> 00:03:15,280
shared memory with a victim assuming we

67
00:03:15,280 --> 00:03:17,110
have two persons sharing the same

68
00:03:17,110 --> 00:03:18,940
Hardware attacker and mix team let's say

69
00:03:18,940 --> 00:03:21,370
on a cloud environment or or or a

70
00:03:21,370 --> 00:03:25,270
browser right so what we do is as an

71
00:03:25,270 --> 00:03:27,250
attacker we flush this piece of memory

72
00:03:27,250 --> 00:03:30,100
that some other people loaded and then

73
00:03:30,100 --> 00:03:33,880
we way it's a little bit and then we we

74
00:03:33,880 --> 00:03:36,640
see if we come is gonna load that if

75
00:03:36,640 --> 00:03:39,250
victim load that piece of memory the

76
00:03:39,250 --> 00:03:41,410
next their memory is going to be in the

77
00:03:41,410 --> 00:03:44,560
cache and we as an sik we try to reload

78
00:03:44,560 --> 00:03:46,900
that memory again let me reload that

79
00:03:46,900 --> 00:03:49,360
memory the next time we're going to

80
00:03:49,360 --> 00:03:52,150
measure the time to see if it's it's not

81
00:03:52,150 --> 00:03:54,910
that fast or slow if it's fast we know

82
00:03:54,910 --> 00:03:56,920
that it's a cache hit if it's slow we

83
00:03:56,920 --> 00:03:58,989
know that is the cache miss by this

84
00:03:58,989 --> 00:04:01,540
simple attack the attacker can know

85
00:04:01,540 --> 00:04:04,390
about the access pattern of victims so

86
00:04:04,390 --> 00:04:06,280
we can for instance use these to see if

87
00:04:06,280 --> 00:04:09,220
a cryptography implementation can can

88
00:04:09,220 --> 00:04:11,830
dig some secrets or or other other

89
00:04:11,830 --> 00:04:13,360
interesting things that you can do for

90
00:04:13,360 --> 00:04:15,640
instance we can profile users behavior

91
00:04:15,640 --> 00:04:18,700
activity but so far we don't bleach any

92
00:04:18,700 --> 00:04:21,100
data we just learned some site share

93
00:04:21,100 --> 00:04:23,950
information about what somebody might do

94
00:04:23,950 --> 00:04:24,520
on the same

95
00:04:24,520 --> 00:04:29,110
system then in 2018 we heard about

96
00:04:29,110 --> 00:04:31,629
meltdown attack our CPU is on fire we

97
00:04:31,629 --> 00:04:34,900
need to just redo everything

98
00:04:34,900 --> 00:04:39,310
so how meltdown attack works if anybody

99
00:04:39,310 --> 00:04:43,449
I think many people have program in C if

100
00:04:43,449 --> 00:04:45,909
I try to execute this code I'm gonna

101
00:04:45,909 --> 00:04:47,560
basically get an exception because I'm

102
00:04:47,560 --> 00:04:50,110
trying to access a kernel memory from

103
00:04:50,110 --> 00:04:53,919
user space if I try to executive Scott I

104
00:04:53,919 --> 00:04:56,490
will get a segmentation fault

105
00:04:56,490 --> 00:04:59,289
so I cannot print the value of the

106
00:04:59,289 --> 00:05:02,919
kernel can I know but with meltdown

107
00:05:02,919 --> 00:05:05,319
attack instead of trying to print that

108
00:05:05,319 --> 00:05:07,240
value we're gonna actually use some of

109
00:05:07,240 --> 00:05:09,729
the CPU features to actually leak that

110
00:05:09,729 --> 00:05:12,759
data out of outside of the CPU and we

111
00:05:12,759 --> 00:05:14,169
combine that with a flush and you know

112
00:05:14,169 --> 00:05:16,389
that attack and so how are we gonna do

113
00:05:16,389 --> 00:05:17,099
that

114
00:05:17,099 --> 00:05:20,770
here we have a CPU the CPU has some

115
00:05:20,770 --> 00:05:24,669
registers there yeah and a bunch of

116
00:05:24,669 --> 00:05:27,520
different cache lines that that CPU has

117
00:05:27,520 --> 00:05:31,090
many cash flows right and then we have a

118
00:05:31,090 --> 00:05:32,770
virtual address space that is assigned

119
00:05:32,770 --> 00:05:35,919
to our to our process as a attacker so

120
00:05:35,919 --> 00:05:37,360
what we're going to do we gonna allocate

121
00:05:37,360 --> 00:05:40,330
some memory and this memory that we're

122
00:05:40,330 --> 00:05:41,409
going to allocate I'm going to call it

123
00:05:41,409 --> 00:05:43,960
Oracle and this will be this will be

124
00:05:43,960 --> 00:05:46,210
assigned some cache line this memory

125
00:05:46,210 --> 00:05:49,360
will be mapped to some cache lines then

126
00:05:49,360 --> 00:05:51,130
we're gonna try to again execute this

127
00:05:51,130 --> 00:05:53,590
code when we execute this code well we

128
00:05:53,590 --> 00:05:54,580
will get a fault

129
00:05:54,580 --> 00:05:56,979
you will get an exception but what is

130
00:05:56,979 --> 00:05:59,289
interesting in there is something called

131
00:05:59,289 --> 00:06:01,719
a transient domain their CPU executes

132
00:06:01,719 --> 00:06:03,940
things out of out of order without

133
00:06:03,940 --> 00:06:06,400
checking any validation or seeing if

134
00:06:06,400 --> 00:06:08,560
there are correct and later on it's kind

135
00:06:08,560 --> 00:06:10,150
of just flush all of them so in this

136
00:06:10,150 --> 00:06:12,340
transient domain this secret that we try

137
00:06:12,340 --> 00:06:13,840
to access which is a password for

138
00:06:13,840 --> 00:06:16,150
instance in kernel is gonna we actually

139
00:06:16,150 --> 00:06:17,740
load it to some max architectural

140
00:06:17,740 --> 00:06:21,130
registers and these registers are are in

141
00:06:21,130 --> 00:06:22,599
the CPU they are not architectural

142
00:06:22,599 --> 00:06:23,830
register it's not available to the

143
00:06:23,830 --> 00:06:25,479
software yet

144
00:06:25,479 --> 00:06:28,719
and then when they when this happens

145
00:06:28,719 --> 00:06:30,639
then we're gonna execute another code we

146
00:06:30,639 --> 00:06:33,159
call this code a gadget this gadget the

147
00:06:33,159 --> 00:06:35,110
job of this gadget is many is executed

148
00:06:35,110 --> 00:06:36,940
in the transient domain it's gonna angle

149
00:06:36,940 --> 00:06:38,180
and code that secret

150
00:06:38,180 --> 00:06:39,830
from the transient domain to some

151
00:06:39,830 --> 00:06:44,050
permanent architectural behavior and

152
00:06:44,050 --> 00:06:47,210
here when we execute this Oracle this

153
00:06:47,210 --> 00:06:48,919
secret is going to be encoded with one

154
00:06:48,919 --> 00:06:51,710
of these cache lines then the CPU goes

155
00:06:51,710 --> 00:06:53,210
ahead and like okay this was the fault

156
00:06:53,210 --> 00:06:57,190
we need to flush everything and send a

157
00:06:57,190 --> 00:06:59,930
hand send a signal to the oils that this

158
00:06:59,930 --> 00:07:02,720
was an exception when the CPU flush

159
00:07:02,720 --> 00:07:06,050
everything that accessed cache line is

160
00:07:06,050 --> 00:07:09,350
going to be there and that's a footprint

161
00:07:09,350 --> 00:07:11,300
that we can use later on to actually dig

162
00:07:11,300 --> 00:07:14,120
the secret and basically we use a flash

163
00:07:14,120 --> 00:07:16,250
memory load attack on each of these

164
00:07:16,250 --> 00:07:18,410
cache lines we know that none of these

165
00:07:18,410 --> 00:07:21,349
are fast so the secret is not there but

166
00:07:21,349 --> 00:07:23,060
when we reach here we know that ok this

167
00:07:23,060 --> 00:07:25,340
is fast what is the index of that cache

168
00:07:25,340 --> 00:07:27,380
line the index is equivalent to the

169
00:07:27,380 --> 00:07:30,139
secret and that's how a meltdown attack

170
00:07:30,139 --> 00:07:33,949
work so this was all background this

171
00:07:33,949 --> 00:07:36,020
wasn't the zombie load attack this was

172
00:07:36,020 --> 00:07:39,289
all previous work then we're gonna ask

173
00:07:39,289 --> 00:07:41,720
some question so we did them all down

174
00:07:41,720 --> 00:07:43,280
attack we leave some secret from the

175
00:07:43,280 --> 00:07:47,780
kernel good but now there are protection

176
00:07:47,780 --> 00:07:49,940
there is a kpti protection that isolate

177
00:07:49,940 --> 00:07:51,260
the memory so we don't have access to

178
00:07:51,260 --> 00:07:54,229
the kernel and more recent cpus like for

179
00:07:54,229 --> 00:07:56,150
instance coffee like this issue has been

180
00:07:56,150 --> 00:07:59,060
even mitigated in the architecture but

181
00:07:59,060 --> 00:08:01,280
can we are still loose do I can we are

182
00:08:01,280 --> 00:08:02,750
still dictator what if we try different

183
00:08:02,750 --> 00:08:06,320
things like trying to access try to

184
00:08:06,320 --> 00:08:08,240
execute other node operations that cause

185
00:08:08,240 --> 00:08:11,659
a exception or do we even check where

186
00:08:11,659 --> 00:08:13,610
the data come from in the previous slide

187
00:08:13,610 --> 00:08:14,900
we just said ok the data came from

188
00:08:14,900 --> 00:08:17,419
memory but data I can travel through

189
00:08:17,419 --> 00:08:19,400
lots of different buffers and cache

190
00:08:19,400 --> 00:08:23,780
inside the CPU so we looks closer to

191
00:08:23,780 --> 00:08:27,259
that and we have yes zombie no later so

192
00:08:27,259 --> 00:08:31,250
how does army lot work to discuss alice

193
00:08:31,250 --> 00:08:33,828
normal at work I want to explain how

194
00:08:33,828 --> 00:08:35,839
does a simple memory load operation on a

195
00:08:35,839 --> 00:08:37,969
CPU these days work actually on an Intel

196
00:08:37,969 --> 00:08:42,399
CPU then we execute a memory operation

197
00:08:42,399 --> 00:08:45,020
let's say we I'm reading 8 bytes of

198
00:08:45,020 --> 00:08:47,089
memory by providing an address to the

199
00:08:47,089 --> 00:08:50,150
CPU I use their mutual addresses but the

200
00:08:50,150 --> 00:08:51,870
CPU has to read the memory from

201
00:08:51,870 --> 00:08:54,330
physical using a physical address that

202
00:08:54,330 --> 00:08:56,580
actually Maps the memory address to to

203
00:08:56,580 --> 00:08:59,040
the actual bytes of data so the CPU is

204
00:08:59,040 --> 00:09:00,510
no translate this address using

205
00:09:00,510 --> 00:09:02,820
something called TLB TLB is likely cache

206
00:09:02,820 --> 00:09:05,580
that holds previous translation like the

207
00:09:05,580 --> 00:09:08,520
most recent translations and TLB if it

208
00:09:08,520 --> 00:09:09,810
doesn't have the information is gonna

209
00:09:09,810 --> 00:09:11,370
ask the page miss handler and page miss

210
00:09:11,370 --> 00:09:13,500
handler is gonna ask us hey do a page

211
00:09:13,500 --> 00:09:15,860
work and give me this page table entry

212
00:09:15,860 --> 00:09:18,630
what is a page table entry this is the

213
00:09:18,630 --> 00:09:20,040
result of this translation which

214
00:09:20,040 --> 00:09:22,529
includes a physical page number that can

215
00:09:22,529 --> 00:09:24,810
actually help the CPU to access the

216
00:09:24,810 --> 00:09:27,240
actual data and a bunch of metadata are

217
00:09:27,240 --> 00:09:30,839
there to explain what kind of memory you

218
00:09:30,839 --> 00:09:32,430
are trying to access for instance that

219
00:09:32,430 --> 00:09:34,589
pbut is the president being tells us

220
00:09:34,589 --> 00:09:37,440
okay the memory is backed by dr and it's

221
00:09:37,440 --> 00:09:40,410
not just metadata and it's not on the

222
00:09:40,410 --> 00:09:42,839
disk for instance or that's a u.s. bit

223
00:09:42,839 --> 00:09:44,850
is the supervisor that's how we know

224
00:09:44,850 --> 00:09:46,260
this is a kernel address and that's how

225
00:09:46,260 --> 00:09:47,910
it's acute through an exception because

226
00:09:47,910 --> 00:09:49,890
if that bit is set and we don't have the

227
00:09:49,890 --> 00:09:51,540
permission we're gonna get an exception

228
00:09:51,540 --> 00:09:56,760
so we know about this now but what is

229
00:09:56,760 --> 00:09:58,620
cache what are the different elements in

230
00:09:58,620 --> 00:10:01,830
the CPU that can use data so we

231
00:10:01,830 --> 00:10:03,240
mentioned that there is a cache that's

232
00:10:03,240 --> 00:10:05,120
actually helped the speed of the

233
00:10:05,120 --> 00:10:07,920
programs or memory accesses but there is

234
00:10:07,920 --> 00:10:11,040
not only one level of cache CPU nowadays

235
00:10:11,040 --> 00:10:12,839
use multiple levels of cache in

236
00:10:12,839 --> 00:10:14,370
particular interests if you use three

237
00:10:14,370 --> 00:10:18,150
few layers of cache level 1 level 2 and

238
00:10:18,150 --> 00:10:20,250
level 3 which level 1 and level 2 are

239
00:10:20,250 --> 00:10:22,620
inside the current layer 3 is shared by

240
00:10:22,620 --> 00:10:26,220
all the all the cores on a CPU but

241
00:10:26,220 --> 00:10:28,500
that's not the only element that work as

242
00:10:28,500 --> 00:10:30,630
an as a cache inside their core there is

243
00:10:30,630 --> 00:10:33,510
something called line field buffer what

244
00:10:33,510 --> 00:10:35,160
is line feed buffer line field offer

245
00:10:35,160 --> 00:10:38,250
actually helps to leaven one cache to be

246
00:10:38,250 --> 00:10:40,680
more efficient to not be a blocking

247
00:10:40,680 --> 00:10:44,270
cache how does line feed buffer do that

248
00:10:44,270 --> 00:10:47,040
you try to access the memory we try to

249
00:10:47,040 --> 00:10:49,529
execute that that instruction there and

250
00:10:49,529 --> 00:10:52,320
then the data doesn't exist in the cache

251
00:10:52,320 --> 00:10:54,180
the CPU is gonna allocate an entry

252
00:10:54,180 --> 00:10:56,400
called one of the entries in the line

253
00:10:56,400 --> 00:10:58,830
field buffer this entry is going to hold

254
00:10:58,830 --> 00:11:02,220
64 bytes of buffer which is size of a

255
00:11:02,220 --> 00:11:05,190
cache line and it's gonna get the data

256
00:11:05,190 --> 00:11:05,850
from

257
00:11:05,850 --> 00:11:07,980
next high next levels after memory in

258
00:11:07,980 --> 00:11:09,450
the hierarchy from the DRAM or from the

259
00:11:09,450 --> 00:11:11,640
l3 the good thing about nine field offer

260
00:11:11,640 --> 00:11:14,400
is this data doesn't have to be filled

261
00:11:14,400 --> 00:11:16,680
inside the entire level on D cache the

262
00:11:16,680 --> 00:11:18,480
data can be just forwarded man we have

263
00:11:18,480 --> 00:11:20,430
enough data available to service that

264
00:11:20,430 --> 00:11:23,040
memory so we're going to just get the

265
00:11:23,040 --> 00:11:27,240
data and also the level one that chance

266
00:11:27,240 --> 00:11:29,910
also eventually will be filled but what

267
00:11:29,910 --> 00:11:32,190
is the problem with line fill buffer the

268
00:11:32,190 --> 00:11:33,930
problem with line filled offer is it

269
00:11:33,930 --> 00:11:38,190
acts like like a bad memory allocator

270
00:11:38,190 --> 00:11:40,560
when we try to when we retire this

271
00:11:40,560 --> 00:11:41,850
instruction and we are done with

272
00:11:41,850 --> 00:11:44,070
executing is not oppression the line

273
00:11:44,070 --> 00:11:47,430
field buffer is gonna be actually D

274
00:11:47,430 --> 00:11:49,410
allocated but this di location is just

275
00:11:49,410 --> 00:11:52,470
marking this as D allocated so the

276
00:11:52,470 --> 00:11:55,530
actual data that's marked with eggs from

277
00:11:55,530 --> 00:11:58,260
a user is going to actually be there but

278
00:11:58,260 --> 00:11:59,970
this is just the allocated it's going to

279
00:11:59,970 --> 00:12:03,780
be marked by the CPU then some malicious

280
00:12:03,780 --> 00:12:05,700
person comes and say okay I wanna

281
00:12:05,700 --> 00:12:10,260
execute memory load operation this

282
00:12:10,260 --> 00:12:12,240
malicious person this zombie load this

283
00:12:12,240 --> 00:12:15,090
is going to execute some memory

284
00:12:15,090 --> 00:12:16,530
operation that's going to get a fault

285
00:12:16,530 --> 00:12:19,890
and before doing that we've got to groom

286
00:12:19,890 --> 00:12:22,140
the architecture in a state that we

287
00:12:22,140 --> 00:12:24,060
don't have a cache for for this

288
00:12:24,060 --> 00:12:26,670
malicious memory load and then when we

289
00:12:26,670 --> 00:12:28,470
do that you're gonna be assigned some

290
00:12:28,470 --> 00:12:31,200
entry in the line feed water line fill

291
00:12:31,200 --> 00:12:32,820
buffer doesn't have so many injuries it

292
00:12:32,820 --> 00:12:34,770
only has ten entries so we have a high

293
00:12:34,770 --> 00:12:37,470
chance that the same entry that a victim

294
00:12:37,470 --> 00:12:39,240
has used is going to be assigned to us

295
00:12:39,240 --> 00:12:41,310
and this is shirt between the two hyper

296
00:12:41,310 --> 00:12:43,140
tress when you do a context which is

297
00:12:43,140 --> 00:12:46,350
this shirt and interestingly on interest

298
00:12:46,350 --> 00:12:49,200
abused when we get a fault the first

299
00:12:49,200 --> 00:12:51,570
thing the CPU does is this data is going

300
00:12:51,570 --> 00:12:53,190
to be forwarded here to this quality of

301
00:12:53,190 --> 00:12:55,170
operation and you can use a meltdown a

302
00:12:55,170 --> 00:12:57,150
style of flush and reload attack to

303
00:12:57,150 --> 00:13:00,780
actually leak this data so by doing this

304
00:13:00,780 --> 00:13:03,240
we can actually link data from other

305
00:13:03,240 --> 00:13:08,360
processes or other contexts is yeah so

306
00:13:08,360 --> 00:13:11,400
even if later on this data is updated

307
00:13:11,400 --> 00:13:13,920
for instance with zero is because now

308
00:13:13,920 --> 00:13:16,530
CPUs has protection so it's gonna update

309
00:13:16,530 --> 00:13:18,270
this data so we cannot actually dictate

310
00:13:18,270 --> 00:13:20,010
care later it doesn't matter because

311
00:13:20,010 --> 00:13:21,780
I've already leaked the data that was a

312
00:13:21,780 --> 00:13:24,480
stale inside the line fill buffer from

313
00:13:24,480 --> 00:13:27,960
previous operations so zombie that has

314
00:13:27,960 --> 00:13:29,670
multiple variants and other variants

315
00:13:29,670 --> 00:13:30,870
that I would like to mention here is

316
00:13:30,870 --> 00:13:34,650
very entry which instead of a supervisor

317
00:13:34,650 --> 00:13:37,350
fault it uses actually the access speed

318
00:13:37,350 --> 00:13:39,540
which is not the architectural fault but

319
00:13:39,540 --> 00:13:41,610
it actually performs a fault inside the

320
00:13:41,610 --> 00:13:44,820
CPU so how does this how does this

321
00:13:44,820 --> 00:13:48,030
handle so the access bit is a beats

322
00:13:48,030 --> 00:13:49,500
inside the page table entry that

323
00:13:49,500 --> 00:13:52,110
actually allows the CPU and the OS to

324
00:13:52,110 --> 00:13:55,200
have some sort of contract on on pages

325
00:13:55,200 --> 00:13:57,420
that are allocated the CPU can use the

326
00:13:57,420 --> 00:13:59,940
access which to actually tell the oils

327
00:13:59,940 --> 00:14:01,950
that this memory has been accessed for

328
00:14:01,950 --> 00:14:04,260
once and the oils can actually tell the

329
00:14:04,260 --> 00:14:06,180
CPU that this memory just allocated so

330
00:14:06,180 --> 00:14:08,880
the exit speed is clear but the

331
00:14:08,880 --> 00:14:11,220
interesting thing is be clear the access

332
00:14:11,220 --> 00:14:12,780
but if there are as clear as the access

333
00:14:12,780 --> 00:14:16,320
bit then CPU wants to accesses the

334
00:14:16,320 --> 00:14:18,330
memory for the first time it's going to

335
00:14:18,330 --> 00:14:22,080
get internal micro codices and micro

336
00:14:22,080 --> 00:14:24,510
courtesies is just an internal Handler

337
00:14:24,510 --> 00:14:28,770
inside the CPU that that's operate

338
00:14:28,770 --> 00:14:30,750
that's perform some of the more advanced

339
00:14:30,750 --> 00:14:33,660
more complex operations using inside

340
00:14:33,660 --> 00:14:36,090
internal handle instead of having a

341
00:14:36,090 --> 00:14:39,120
logic to to handle that operation so

342
00:14:39,120 --> 00:14:41,340
it's a micro codices we also get a

343
00:14:41,340 --> 00:14:43,650
similar behavior so we can do a markdown

344
00:14:43,650 --> 00:14:46,650
attack melt down a style of attack which

345
00:14:46,650 --> 00:14:48,780
we call it zombie load it can leak data

346
00:14:48,780 --> 00:14:52,530
from other processes and contexts so

347
00:14:52,530 --> 00:14:54,900
what is the difference of zombie load to

348
00:14:54,900 --> 00:14:57,390
compare to some previous meltdown a

349
00:14:57,390 --> 00:15:00,090
style of attack so Melton used the

350
00:15:00,090 --> 00:15:02,040
entire visual address to leak exactly

351
00:15:02,040 --> 00:15:05,580
the data data that we know where it is

352
00:15:05,580 --> 00:15:07,650
and there is a there is another attack

353
00:15:07,650 --> 00:15:09,300
called foreshadow which actually used

354
00:15:09,300 --> 00:15:11,250
the physical address mappings basically

355
00:15:11,250 --> 00:15:14,490
it abuses that OS or a wish or a

356
00:15:14,490 --> 00:15:16,260
hypervisor can actually change the

357
00:15:16,260 --> 00:15:18,530
mapping and link data from other other

358
00:15:18,530 --> 00:15:21,990
from an l1 data cache and there was also

359
00:15:21,990 --> 00:15:23,880
another attack coming the same time with

360
00:15:23,880 --> 00:15:25,650
zombie not called followed which

361
00:15:25,650 --> 00:15:27,690
actually uses some address theorizing so

362
00:15:27,690 --> 00:15:29,970
we have control over the last 12 E but

363
00:15:29,970 --> 00:15:32,760
zombie load you only have control to the

364
00:15:32,760 --> 00:15:33,600
last six

365
00:15:33,600 --> 00:15:35,820
address so we can only decide which

366
00:15:35,820 --> 00:15:38,670
bytes of data to leak which makes it

367
00:15:38,670 --> 00:15:40,830
harder to exploit the only like leak

368
00:15:40,830 --> 00:15:44,040
some some random value from the line

369
00:15:44,040 --> 00:15:47,610
feed buffer right so but there are still

370
00:15:47,610 --> 00:15:49,200
some interesting team that we can do

371
00:15:49,200 --> 00:15:51,150
with this we can do some cross process

372
00:15:51,150 --> 00:15:54,290
as I cross VM attack and also attack

373
00:15:54,290 --> 00:15:57,330
Intel trusted execution and wearables so

374
00:15:57,330 --> 00:16:01,050
how did we do that we came up with some

375
00:16:01,050 --> 00:16:04,290
sort of encoding and error correction to

376
00:16:04,290 --> 00:16:06,000
actually get the data with one instead

377
00:16:06,000 --> 00:16:09,720
of some random noisy data that's

378
00:16:09,720 --> 00:16:11,880
assuming I want to lick some secret I

379
00:16:11,880 --> 00:16:14,550
call it target secret and it has it has

380
00:16:14,550 --> 00:16:16,590
some bytes of data as to AEST for

381
00:16:16,590 --> 00:16:18,570
instance if I try to make this marriage

382
00:16:18,570 --> 00:16:20,730
using the zombie know that I'm gonna get

383
00:16:20,730 --> 00:16:22,710
three candidates because I may also leak

384
00:16:22,710 --> 00:16:24,990
other entries from a line feed whopper

385
00:16:24,990 --> 00:16:27,390
so what I'm gonna do is then I'm gonna

386
00:16:27,390 --> 00:16:29,610
shift this window a little bit further

387
00:16:29,610 --> 00:16:32,670
let's say for a four by four bits and

388
00:16:32,670 --> 00:16:35,220
then lick another three candidates and

389
00:16:35,220 --> 00:16:37,200
then do the same again for another three

390
00:16:37,200 --> 00:16:39,930
candidates or two candidates and if I

391
00:16:39,930 --> 00:16:42,540
check I see that those values that are

392
00:16:42,540 --> 00:16:44,520
yellow they actually match to each other

393
00:16:44,520 --> 00:16:46,470
their nibbles of those values matched to

394
00:16:46,470 --> 00:16:48,390
each other and by doing that I can

395
00:16:48,390 --> 00:16:50,520
figure out okay which bites off this

396
00:16:50,520 --> 00:16:52,140
leaked data belong to the same cache

397
00:16:52,140 --> 00:16:54,540
line and I can extract that and then get

398
00:16:54,540 --> 00:16:55,740
rid of the rest because their

399
00:16:55,740 --> 00:16:57,570
restaurants don't match properly to

400
00:16:57,570 --> 00:17:00,360
anything interesting or I can also do

401
00:17:00,360 --> 00:17:01,860
other interesting and stuff after I

402
00:17:01,860 --> 00:17:03,300
leave this cache boy I can for instance

403
00:17:03,300 --> 00:17:05,790
check if I'm licking something to ask

404
00:17:05,790 --> 00:17:07,619
you for instance passport I just care

405
00:17:07,619 --> 00:17:10,319
about bytes that's represent ASCII or if

406
00:17:10,319 --> 00:17:12,540
I want to take a cryptography key I need

407
00:17:12,540 --> 00:17:14,970
to know that that key materials are

408
00:17:14,970 --> 00:17:17,520
uniformly random using this

409
00:17:17,520 --> 00:17:19,109
post-processing we can actually make

410
00:17:19,109 --> 00:17:26,790
secrets here I have a demo using zombie

411
00:17:26,790 --> 00:17:29,610
lure to actually lick the root hash

412
00:17:29,610 --> 00:17:33,110
password on on a Linux machine

413
00:17:41,930 --> 00:17:45,580
yeah I think sometimes here

414
00:17:48,850 --> 00:17:52,260
we go fast-forward

415
00:17:59,590 --> 00:18:01,690
so we can leak like 20 bytes off the

416
00:18:01,690 --> 00:18:03,850
route I support hash password like in in

417
00:18:03,850 --> 00:18:06,449
1 minutes

418
00:18:08,480 --> 00:18:15,170
[Applause]

419
00:18:15,170 --> 00:18:18,060
so what are some other interesting

420
00:18:18,060 --> 00:18:19,800
things that we can do with it in the in

421
00:18:19,800 --> 00:18:21,540
a research paper that we released and

422
00:18:21,540 --> 00:18:23,400
there's gonna be a more updated version

423
00:18:23,400 --> 00:18:27,020
of this next week due to some embargoes

424
00:18:27,020 --> 00:18:29,400
in the research paper we have some other

425
00:18:29,400 --> 00:18:30,960
attacks too but one interesting I

426
00:18:30,960 --> 00:18:33,480
thought I wanna mention is attacking

427
00:18:33,480 --> 00:18:35,580
internal trusted execution environment

428
00:18:35,580 --> 00:18:38,250
so Intel has this cool technology it's a

429
00:18:38,250 --> 00:18:39,870
trusted execution environment that runs

430
00:18:39,870 --> 00:18:43,080
on the same CPU and with SGS we can

431
00:18:43,080 --> 00:18:44,850
assume that everything is managed as the

432
00:18:44,850 --> 00:18:46,470
OS is managed since the hypervisor is

433
00:18:46,470 --> 00:18:48,390
malicious and the CPU is gonna guarantee

434
00:18:48,390 --> 00:18:49,860
that nothing is going to leaked outside

435
00:18:49,860 --> 00:18:53,130
of that that's module that we call it

436
00:18:53,130 --> 00:18:56,040
Enclave to be leaked but the good thing

437
00:18:56,040 --> 00:18:58,830
is for attackers is if we assume that

438
00:18:58,830 --> 00:19:00,600
way then side channels can be much more

439
00:19:00,600 --> 00:19:02,640
powerful because we are a malicious OS

440
00:19:02,640 --> 00:19:04,620
we can actually improve these attacks

441
00:19:04,620 --> 00:19:06,810
when we are attacking something like s

442
00:19:06,810 --> 00:19:11,610
G's so we're gonna use the zombie attack

443
00:19:11,610 --> 00:19:14,220
to actually leak register values from an

444
00:19:14,220 --> 00:19:16,140
Intel SGX Enclave how are we going to do

445
00:19:16,140 --> 00:19:19,290
that let's say I'm gonna run some code

446
00:19:19,290 --> 00:19:21,930
that is exactly that inside and it's s6

447
00:19:21,930 --> 00:19:24,470
Enclave and I know that's after five

448
00:19:24,470 --> 00:19:26,520
instruction or some number of

449
00:19:26,520 --> 00:19:29,700
instruction this register called Rx is

450
00:19:29,700 --> 00:19:32,430
gonna hold some secret we have a tool

451
00:19:32,430 --> 00:19:33,960
developed by one of the co-authors of

452
00:19:33,960 --> 00:19:36,030
this paper that can actually perform

453
00:19:36,030 --> 00:19:38,190
singular stepping and has cheeks Enclave

454
00:19:38,190 --> 00:19:40,380
this tool can only do single stepping

455
00:19:40,380 --> 00:19:41,700
we're not going to leak anything from

456
00:19:41,700 --> 00:19:43,830
their Enclave because that's the

457
00:19:43,830 --> 00:19:46,140
security guarantee it has but what we

458
00:19:46,140 --> 00:19:48,660
can do is we can actually put the

459
00:19:48,660 --> 00:19:50,850
architecture in a state that we are

460
00:19:50,850 --> 00:19:53,610
exactly after a certain instruction

461
00:19:53,610 --> 00:19:55,740
after we do that we're gonna actually

462
00:19:55,740 --> 00:19:58,920
mark this page as non-executable because

463
00:19:58,920 --> 00:20:01,080
again we are a malicious OS we can I at

464
00:20:01,080 --> 00:20:05,100
least control the page parameters so we

465
00:20:05,100 --> 00:20:07,020
mark disperses non-executable I maybe

466
00:20:07,020 --> 00:20:08,910
try to execute this you're gonna get an

467
00:20:08,910 --> 00:20:11,220
exception when we get an exception we

468
00:20:11,220 --> 00:20:13,200
handle the exception as a manager so as

469
00:20:13,200 --> 00:20:15,720
we try to do this again if I keep trying

470
00:20:15,720 --> 00:20:18,950
to do this I'm going to execute

471
00:20:18,950 --> 00:20:21,540
I'm gonna try to execute that Kali

472
00:20:21,540 --> 00:20:24,000
instructions maybe so many times as far

473
00:20:24,000 --> 00:20:26,309
as much as I want

474
00:20:26,309 --> 00:20:29,340
the same exact register values and when

475
00:20:29,340 --> 00:20:31,440
I do that I get lots of context switches

476
00:20:31,440 --> 00:20:34,109
and with help of those contexts to each

477
00:20:34,109 --> 00:20:37,039
other I'm gonna make sure that the the

478
00:20:37,039 --> 00:20:39,539
unclear process is going to always put

479
00:20:39,539 --> 00:20:41,609
those register inside the memory when

480
00:20:41,609 --> 00:20:42,989
this context switch has happened the

481
00:20:42,989 --> 00:20:44,789
register values are going to return to

482
00:20:44,789 --> 00:20:47,340
the memory and come back and this is

483
00:20:47,340 --> 00:20:49,320
first is there I crave to actually put

484
00:20:49,320 --> 00:20:51,090
those registers values inside the line

485
00:20:51,090 --> 00:20:52,710
free buffer and then at the same time

486
00:20:52,710 --> 00:20:54,419
I'm running the zombie attack on another

487
00:20:54,419 --> 00:20:56,399
thread and I'm gonna lick the internet

488
00:20:56,399 --> 00:21:01,830
six securities so we just talked about

489
00:21:01,830 --> 00:21:04,320
attacks and breaking is there any

490
00:21:04,320 --> 00:21:06,899
solution for these attacks there are

491
00:21:06,899 --> 00:21:09,210
some shorter solutions that may or may

492
00:21:09,210 --> 00:21:11,489
not work depend on the context

493
00:21:11,489 --> 00:21:14,419
Intel suggests instruction sequence

494
00:21:14,419 --> 00:21:16,859
hardware die will you that if it's

495
00:21:16,859 --> 00:21:18,899
executed for instance by the oil

496
00:21:18,899 --> 00:21:20,549
steering context trees it can actually

497
00:21:20,549 --> 00:21:23,700
feel all the buffers so the next context

498
00:21:23,700 --> 00:21:25,830
which could be a malicious process would

499
00:21:25,830 --> 00:21:28,349
not get access to the same values inside

500
00:21:28,349 --> 00:21:30,749
the buffer but for hyper-threading there

501
00:21:30,749 --> 00:21:32,399
is not really really any hardware

502
00:21:32,399 --> 00:21:34,109
solution if you are using hyper

503
00:21:34,109 --> 00:21:38,639
threading the data can be leaked there

504
00:21:38,639 --> 00:21:41,070
is no solution if you are using Internet

505
00:21:41,070 --> 00:21:43,259
use you can actually verify if you are

506
00:21:43,259 --> 00:21:45,269
running there Enclave and a hyper trade

507
00:21:45,269 --> 00:21:47,489
or not using remote attestation but you

508
00:21:47,489 --> 00:21:49,440
need to make sure that the attestation

509
00:21:49,440 --> 00:21:53,039
messages are verified properly and the

510
00:21:53,039 --> 00:21:56,460
long-term solution by new CPUs more

511
00:21:56,460 --> 00:22:02,759
money for Intel and that's my talk this

512
00:22:02,759 --> 00:22:05,999
is a poster for the ACM conference I you

513
00:22:05,999 --> 00:22:08,729
want to check out the code or any or

514
00:22:08,729 --> 00:22:10,799
more updates next week that's the link

515
00:22:10,799 --> 00:22:13,379
to the website I will be happy to take

516
00:22:13,379 --> 00:22:13,919
questions

517
00:22:13,919 --> 00:22:17,599
all right let's thank

518
00:22:19,380 --> 00:22:24,360
and we will do Q&A outside in the beer

519
00:22:24,360 --> 00:22:26,389
garden

