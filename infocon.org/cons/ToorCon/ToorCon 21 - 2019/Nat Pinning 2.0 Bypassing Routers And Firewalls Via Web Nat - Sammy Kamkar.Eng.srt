1
00:00:00,030 --> 00:00:02,850
all right everyone it is my honor to

2
00:00:02,850 --> 00:00:04,980
introduce Sammy who is a longtime friend

3
00:00:04,980 --> 00:00:06,950
of torque on who will be speaking about

4
00:00:06,950 --> 00:00:12,019
bypassing nut without further ado Sammy

5
00:00:18,560 --> 00:00:22,199
I hope I hope start I hope you'll

6
00:00:22,199 --> 00:00:23,430
forgive me I'm a little under the

7
00:00:23,430 --> 00:00:26,340
weather but I am excited to be here and

8
00:00:26,340 --> 00:00:28,320
a lot of great stuff to share with you

9
00:00:28,320 --> 00:00:30,449
guys we're gonna talk about NAT painting

10
00:00:30,449 --> 00:00:32,189
and I realize I have a lot of

11
00:00:32,189 --> 00:00:34,710
information here so we'll zoom through a

12
00:00:34,710 --> 00:00:37,410
little happy to do Q&A after but first

13
00:00:37,410 --> 00:00:38,790
let's talk about what is net network

14
00:00:38,790 --> 00:00:41,100
address translation most of us have

15
00:00:41,100 --> 00:00:42,329
routers at home I mean most of our

16
00:00:42,329 --> 00:00:43,860
networks at home probably looks kind of

17
00:00:43,860 --> 00:00:46,440
like this where you basically have the

18
00:00:46,440 --> 00:00:47,730
idea of NAT is that we're essentially

19
00:00:47,730 --> 00:00:50,789
running out of ipv4 space and ipv6 is

20
00:00:50,789 --> 00:00:54,140
coming so that that's what they tell us

21
00:00:54,140 --> 00:00:57,030
any time now any day now and the idea of

22
00:00:57,030 --> 00:00:58,170
Matt is that because we're running out

23
00:00:58,170 --> 00:01:00,510
of ipv4 space or public IPS what we can

24
00:01:00,510 --> 00:01:01,980
do is we can essentially have our router

25
00:01:01,980 --> 00:01:03,780
here and that can give us internal

26
00:01:03,780 --> 00:01:05,939
address space so 10 dot network or 1 on

27
00:01:05,939 --> 00:01:07,380
to network that is not actually routable

28
00:01:07,380 --> 00:01:09,390
on the public internet however we can

29
00:01:09,390 --> 00:01:10,950
have multiple devices all sharing a

30
00:01:10,950 --> 00:01:12,479
public IP address that then reaches the

31
00:01:12,479 --> 00:01:16,259
Internet and the idea of NAT pinning

32
00:01:16,259 --> 00:01:18,299
actually one of the benefits of a

33
00:01:18,299 --> 00:01:20,220
routers is that they essentially act as

34
00:01:20,220 --> 00:01:23,100
a firewall so they will essentially if

35
00:01:23,100 --> 00:01:25,320
you have a bunch of services running on

36
00:01:25,320 --> 00:01:26,880
your machine and someone tries to say

37
00:01:26,880 --> 00:01:28,200
connect to your machine from outside

38
00:01:28,200 --> 00:01:29,460
from the public internet they can't

39
00:01:29,460 --> 00:01:31,170
because your router is blocking it

40
00:01:31,170 --> 00:01:32,790
because your router needs to know who is

41
00:01:32,790 --> 00:01:34,049
this supposed to go to unless you have

42
00:01:34,049 --> 00:01:36,119
port forwarding or DMZ or some some sort

43
00:01:36,119 --> 00:01:38,909
of feature enabled now why is this a big

44
00:01:38,909 --> 00:01:39,390
deal

45
00:01:39,390 --> 00:01:42,390
I ran L sof on my machine a couple days

46
00:01:42,390 --> 00:01:45,720
ago and this is what came up all these

47
00:01:45,720 --> 00:01:47,340
services are listening on essentially

48
00:01:47,340 --> 00:01:50,130
public on my public network device so

49
00:01:50,130 --> 00:01:51,840
that means I don't know I have no

50
00:01:51,840 --> 00:01:53,250
servers running I don't know why node is

51
00:01:53,250 --> 00:01:55,049
running I don't know I know tis running

52
00:01:55,049 --> 00:01:58,259
CrashPlan is my backup service Sonos I

53
00:01:58,259 --> 00:02:00,810
don't even have a so knows yet sonís is

54
00:02:00,810 --> 00:02:02,159
listening on my computer and is

55
00:02:02,159 --> 00:02:04,079
listening to like has an open service

56
00:02:04,079 --> 00:02:05,850
why is that pop why is that happening so

57
00:02:05,850 --> 00:02:08,429
many of these many of these tools are

58
00:02:08,429 --> 00:02:10,020
gonna have wonder abilities in them so

59
00:02:10,020 --> 00:02:11,430
it's always interesting to see if we can

60
00:02:11,430 --> 00:02:12,150
attack those

61
00:02:12,150 --> 00:02:15,060
those services so the idea of NAT

62
00:02:15,060 --> 00:02:16,349
pinning is something I demonstrated

63
00:02:16,349 --> 00:02:18,450
maybe 9 or 10 years ago and that was a

64
00:02:18,450 --> 00:02:20,400
very basic proof of concept where

65
00:02:20,400 --> 00:02:23,159
essentially Oh a victim would go and

66
00:02:23,159 --> 00:02:24,569
visit a website on the Internet and

67
00:02:24,569 --> 00:02:26,790
malicious website and that website would

68
00:02:26,790 --> 00:02:29,909
send some data back to the back to the

69
00:02:29,909 --> 00:02:32,099
user the user would execute some code on

70
00:02:32,099 --> 00:02:34,640
their web browser and then open up

71
00:02:34,640 --> 00:02:38,819
essentially a port on their router now

72
00:02:38,819 --> 00:02:40,590
the way that essentially happened is

73
00:02:40,590 --> 00:02:41,909
through something called connection

74
00:02:41,909 --> 00:02:43,980
tracking now connection tracking is

75
00:02:43,980 --> 00:02:47,280
something we may have seen with FTP FTP

76
00:02:47,280 --> 00:02:49,680
is a good example many of you have used

77
00:02:49,680 --> 00:02:52,530
FTP hopefully no one uses anymore

78
00:02:52,530 --> 00:02:54,810
FTP allows you to transfer files so you

79
00:02:54,810 --> 00:02:58,290
can FTP to FTP server and you'll say hey

80
00:02:58,290 --> 00:03:00,780
I want to receive this file but the way

81
00:03:00,780 --> 00:03:02,250
that happens is that actually uses a

82
00:03:02,250 --> 00:03:04,409
second port what your FTP client does is

83
00:03:04,409 --> 00:03:07,530
it opens a secondary port and your and

84
00:03:07,530 --> 00:03:09,540
the FTP server will connect to that port

85
00:03:09,540 --> 00:03:11,549
the problem is when routers came out

86
00:03:11,549 --> 00:03:14,190
that broke because now your router says

87
00:03:14,190 --> 00:03:15,870
I don't know what this port 1 2 3 4 is

88
00:03:15,870 --> 00:03:18,480
so why would I connect to this so

89
00:03:18,480 --> 00:03:19,739
routers then introduced something called

90
00:03:19,739 --> 00:03:21,359
connection tracking or an application

91
00:03:21,359 --> 00:03:24,299
level gateway an affricate alg will say

92
00:03:24,299 --> 00:03:27,030
oh I'm a router I see someone internally

93
00:03:27,030 --> 00:03:29,040
on my internal network wants to do an

94
00:03:29,040 --> 00:03:30,959
FTP and they said oh connect back on

95
00:03:30,959 --> 00:03:33,840
port 1 2 3 so I will open port 1 2 3 for

96
00:03:33,840 --> 00:03:37,049
them so initially and when I'm looking

97
00:03:37,049 --> 00:03:39,900
into how a protocol works the first

98
00:03:39,900 --> 00:03:41,879
thing I do is read the RFC now our seas

99
00:03:41,879 --> 00:03:43,829
are essentially how protocols are built

100
00:03:43,829 --> 00:03:45,419
but it doesn't necessarily mean

101
00:03:45,419 --> 00:03:47,129
protocols are built this way but it's a

102
00:03:47,129 --> 00:03:50,250
good foundation to base things off of in

103
00:03:50,250 --> 00:03:52,199
2010 when I was initially demonstrating

104
00:03:52,199 --> 00:03:54,440
how this how this technique worked

105
00:03:54,440 --> 00:03:57,150
essentially I tried FTP I was trying to

106
00:03:57,150 --> 00:03:58,859
I found that the browser's had various

107
00:03:58,859 --> 00:04:00,419
restricted ports so I actually couldn't

108
00:04:00,419 --> 00:04:03,030
connect to FTP and IRC was another tool

109
00:04:03,030 --> 00:04:07,349
that I wanted us to use let's see here

110
00:04:07,349 --> 00:04:10,099
excuse me

111
00:04:10,920 --> 00:04:13,620
so what I wanted to do was essentially

112
00:04:13,620 --> 00:04:15,569
act as an IRC client but the nice thing

113
00:04:15,569 --> 00:04:17,670
about IRC is that it's similar to HTTP

114
00:04:17,670 --> 00:04:19,019
in that it's a new line based protocol

115
00:04:19,019 --> 00:04:20,970
when you're on HTTP and you read to a

116
00:04:20,970 --> 00:04:24,060
web server you say I want to get /ht 1.0

117
00:04:24,060 --> 00:04:26,820
you know carriage return new line all of

118
00:04:26,820 --> 00:04:29,580
these are new line based and IRC is also

119
00:04:29,580 --> 00:04:30,900
another new line based protocol just

120
00:04:30,900 --> 00:04:33,060
like ftp and IRC has something similar

121
00:04:33,060 --> 00:04:35,940
to a old - ftp where you can say hey I'm

122
00:04:35,940 --> 00:04:38,310
going to DCC chat you I'm going to DCC

123
00:04:38,310 --> 00:04:40,050
send you a file and you're going to

124
00:04:40,050 --> 00:04:42,450
connect back to me on this port and your

125
00:04:42,450 --> 00:04:45,570
router again has an ALG for IRC DCC so

126
00:04:45,570 --> 00:04:47,520
your router sees that message and it's

127
00:04:47,520 --> 00:04:49,230
going to open up the port and then port

128
00:04:49,230 --> 00:04:50,820
forward back to you if you're using an

129
00:04:50,820 --> 00:04:53,010
IRC client to send this DCC message so I

130
00:04:53,010 --> 00:04:54,660
was thinking couldn't I just create a

131
00:04:54,660 --> 00:04:57,270
webform that connects to an IRC server

132
00:04:57,270 --> 00:04:59,160
but it's really H is just so random

133
00:04:59,160 --> 00:05:00,720
server on the internet on the IRC port

134
00:05:00,720 --> 00:05:02,850
six six six seven and then we say I want

135
00:05:02,850 --> 00:05:04,830
to send a DCC because you can force

136
00:05:04,830 --> 00:05:06,750
someone's web browser to submit a form

137
00:05:06,750 --> 00:05:09,390
and you can make him do that to any port

138
00:05:09,390 --> 00:05:11,010
except for the fact that browsers

139
00:05:11,010 --> 00:05:13,620
restrict ports and interesting the way

140
00:05:13,620 --> 00:05:16,050
around that is back in 2010 what you

141
00:05:16,050 --> 00:05:18,630
could do is you can essentially have TCP

142
00:05:18,630 --> 00:05:21,050
ports and UDP ports are 16 bits wide

143
00:05:21,050 --> 00:05:23,700
65535 possibilities 36 possibilities

144
00:05:23,700 --> 00:05:26,370
however the browser itself is dealing

145
00:05:26,370 --> 00:05:28,919
with strings so if you added one bit

146
00:05:28,919 --> 00:05:32,190
let's say you created a 17 bit port and

147
00:05:32,190 --> 00:05:34,919
essentially the highest bit was a 1 you

148
00:05:34,919 --> 00:05:36,120
don't have a port that's much larger

149
00:05:36,120 --> 00:05:39,020
than this much larger than 6 16 bits

150
00:05:39,020 --> 00:05:42,000
however what would happen is your

151
00:05:42,000 --> 00:05:43,320
browser would say is this a restricted

152
00:05:43,320 --> 00:05:45,570
port no I don't know this port whatever

153
00:05:45,570 --> 00:05:49,050
port number it is in this case it is I

154
00:05:49,050 --> 00:05:50,460
don't think I have it written down here

155
00:05:50,460 --> 00:05:53,820
but 65 let's say I want to connect to

156
00:05:53,820 --> 00:05:56,850
port 6 6 6 7 if you had 6 5 5 3 6 plus 6

157
00:05:56,850 --> 00:05:58,979
6 6 7 you have some much bigger number

158
00:05:58,979 --> 00:06:02,010
and your browser will then see that and

159
00:06:02,010 --> 00:06:03,450
say oh that's not in my stricted port

160
00:06:03,450 --> 00:06:05,130
list then it will send it on to the

161
00:06:05,130 --> 00:06:07,169
tcp/ip stack which only is going to take

162
00:06:07,169 --> 00:06:09,570
a 16-bit did 16-bit number and you just

163
00:06:09,570 --> 00:06:10,860
bypassed the restriction the 4

164
00:06:10,860 --> 00:06:12,330
restriction so you can now connect out

165
00:06:12,330 --> 00:06:14,400
to any restricted port on the user's

166
00:06:14,400 --> 00:06:16,320
browser and this is essentially what the

167
00:06:16,320 --> 00:06:19,200
what an IRC connection would typically

168
00:06:19,200 --> 00:06:20,940
look like so what your browser is

169
00:06:20,940 --> 00:06:22,470
actually sending is we take all of this

170
00:06:22,470 --> 00:06:23,550
data and

171
00:06:23,550 --> 00:06:26,129
message and like a DCCC message and put

172
00:06:26,129 --> 00:06:28,650
it in the post body and it will post

173
00:06:28,650 --> 00:06:33,750
something and your and ultimately your

174
00:06:33,750 --> 00:06:35,430
router will see that in an open a port

175
00:06:35,430 --> 00:06:37,620
back and I'll be happy to share the

176
00:06:37,620 --> 00:06:39,990
slides this is the example code that

177
00:06:39,990 --> 00:06:41,759
actually performs this full attack and

178
00:06:41,759 --> 00:06:43,500
would actually do this and when I open

179
00:06:43,500 --> 00:06:47,629
up essentially any arbitrary TCP port

180
00:06:47,629 --> 00:06:50,310
now one thing is when I tried this it

181
00:06:50,310 --> 00:06:51,629
actually didn't work and part of the

182
00:06:51,629 --> 00:06:53,430
reason is that the wait for this to work

183
00:06:53,430 --> 00:06:56,340
is that DCC en FTP they both require you

184
00:06:56,340 --> 00:06:58,139
to know the internal IP address so when

185
00:06:58,139 --> 00:06:59,250
you're saying hey connect back to me

186
00:06:59,250 --> 00:07:01,470
you're also including type your IP

187
00:07:01,470 --> 00:07:03,770
address your local IP address and

188
00:07:03,770 --> 00:07:05,789
typically a browser doesn't know your

189
00:07:05,789 --> 00:07:08,550
local IP address now in 2010 there was a

190
00:07:08,550 --> 00:07:10,139
technology called live Connect has

191
00:07:10,139 --> 00:07:12,210
anyone used live Connect I'm glad to

192
00:07:12,210 --> 00:07:12,690
hear that

193
00:07:12,690 --> 00:07:16,500
I'm glad to see this was Java embedded

194
00:07:16,500 --> 00:07:18,630
into the browser accessible via

195
00:07:18,630 --> 00:07:20,759
JavaScript and you could do some really

196
00:07:20,759 --> 00:07:23,639
wacky things it was really useful for me

197
00:07:23,639 --> 00:07:25,080
because it allowed me to access your

198
00:07:25,080 --> 00:07:29,940
internal IP it went away very quickly so

199
00:07:29,940 --> 00:07:31,229
this was the live Connect code that

200
00:07:31,229 --> 00:07:32,400
would essentially allow you to access

201
00:07:32,400 --> 00:07:34,169
your local IP address so it was built

202
00:07:34,169 --> 00:07:35,789
into a couple of browsers briefly as a

203
00:07:35,789 --> 00:07:40,110
beta and then quickly went away here's

204
00:07:40,110 --> 00:07:43,259
the actual full code of performing this

205
00:07:43,259 --> 00:07:46,710
attack back in 2010 now they fixed the

206
00:07:46,710 --> 00:07:48,449
report restriction they've removed live

207
00:07:48,449 --> 00:07:50,940
Connect so no the stuff works today and

208
00:07:50,940 --> 00:07:52,830
this has only been kind of interesting

209
00:07:52,830 --> 00:07:54,449
to me so I've tried to just play with

210
00:07:54,449 --> 00:07:57,029
this over over time our overflow

211
00:07:57,029 --> 00:07:59,069
technique also no longer works so

212
00:07:59,069 --> 00:08:00,449
recently I've been looking at what are

213
00:08:00,449 --> 00:08:03,830
other services that that are

214
00:08:03,830 --> 00:08:06,120
multi-protocol right something that alg

215
00:08:06,120 --> 00:08:09,060
would actually look at and I made a

216
00:08:09,060 --> 00:08:11,340
spreadsheet here I went through the

217
00:08:11,340 --> 00:08:15,830
Linux Linux TC of tcp/ip stack and just

218
00:08:15,830 --> 00:08:17,940
collected all the different ports and

219
00:08:17,940 --> 00:08:20,159
services and what protocol they need to

220
00:08:20,159 --> 00:08:21,960
be on and I wanted to find and then I

221
00:08:21,960 --> 00:08:24,449
took a list of Chrome restricted ports

222
00:08:24,449 --> 00:08:27,270
we see what chrome blocks and the ones

223
00:08:27,270 --> 00:08:29,279
that they don't block are sane which is

224
00:08:29,279 --> 00:08:32,899
a backup protocol that nobody uses sip

225
00:08:32,899 --> 00:08:35,849
PPT PhD 2/3 which is voice over IP and

226
00:08:35,849 --> 00:08:37,860
sip was pretty interesting

227
00:08:37,860 --> 00:08:39,630
so I started taking a look at its if

228
00:08:39,630 --> 00:08:43,190
you're not familiar with zip it's like

229
00:08:43,190 --> 00:08:45,720
it's like FTP but for noise it's a voice

230
00:08:45,720 --> 00:08:47,970
over IP protocol so it says you can make

231
00:08:47,970 --> 00:08:50,850
a connection on UDP or TCP port 5060 to

232
00:08:50,850 --> 00:08:52,410
some server and you say hey I want to

233
00:08:52,410 --> 00:08:54,330
make a call I wanna invite and then you

234
00:08:54,330 --> 00:08:56,310
can and then on a secondary channel

235
00:08:56,310 --> 00:08:57,990
you'll then send audio and you can

236
00:08:57,990 --> 00:09:01,140
create additional channels for video so

237
00:09:01,140 --> 00:09:02,820
I was thinking okay couldn't I reproduce

238
00:09:02,820 --> 00:09:04,560
that same technique this NAT pending

239
00:09:04,560 --> 00:09:06,360
technique with SIP because this also

240
00:09:06,360 --> 00:09:09,780
supports TCP 50-60 is not blocked based

241
00:09:09,780 --> 00:09:11,730
off the Chrome restriction list so

242
00:09:11,730 --> 00:09:13,050
that's pretty cool maybe we can do that

243
00:09:13,050 --> 00:09:15,510
so I attempted to do this via an HTTP

244
00:09:15,510 --> 00:09:17,850
POST I made a website it has a hidden

245
00:09:17,850 --> 00:09:19,980
form it auto submit to be a JavaScript

246
00:09:19,980 --> 00:09:21,990
to a server that I'm running on port

247
00:09:21,990 --> 00:09:25,350
5060 with the SIP with a sip packet in

248
00:09:25,350 --> 00:09:29,690
the TCP in the port post section

249
00:09:29,690 --> 00:09:32,550
unfortunately this failed because again

250
00:09:32,550 --> 00:09:34,830
I don't know the IP address so we

251
00:09:34,830 --> 00:09:38,700
actually need to know what the IP is so

252
00:09:38,700 --> 00:09:40,470
I found a pretty cool thing that would

253
00:09:40,470 --> 00:09:43,410
allow me to grab your local IP address

254
00:09:43,410 --> 00:09:45,120
and that was stunned

255
00:09:45,120 --> 00:09:47,250
especially now new browsers have web RTC

256
00:09:47,250 --> 00:09:49,950
which allow you to perform voice over IP

257
00:09:49,950 --> 00:09:51,240
with other people on the Internet and

258
00:09:51,240 --> 00:09:53,940
partially you need to actually know the

259
00:09:53,940 --> 00:09:55,860
local IP address so I was very excited

260
00:09:55,860 --> 00:09:57,510
when I found that you can actually use

261
00:09:57,510 --> 00:09:59,610
stun and ice to get the users local IP

262
00:09:59,610 --> 00:10:03,360
address it was really cool unfortunately

263
00:10:03,360 --> 00:10:05,100
a couple weeks ago when I was working on

264
00:10:05,100 --> 00:10:06,840
this presentation for you guys it

265
00:10:06,840 --> 00:10:08,520
stopped working and that's because

266
00:10:08,520 --> 00:10:10,710
people realize it's bad idea to actually

267
00:10:10,710 --> 00:10:13,320
show the local IP address so all the

268
00:10:13,320 --> 00:10:16,080
browser's stopped doing this and then

269
00:10:16,080 --> 00:10:17,760
instead they replace it instead it's no

270
00:10:17,760 --> 00:10:19,080
longer a local IP address but rather

271
00:10:19,080 --> 00:10:22,290
it's a Bonjour or M DNS host name that

272
00:10:22,290 --> 00:10:23,910
doesn't resolve except internally on

273
00:10:23,910 --> 00:10:29,490
your network so this all broke thank you

274
00:10:29,490 --> 00:10:33,089
just kidding so this is an example of

275
00:10:33,089 --> 00:10:35,309
what it would actually look like this

276
00:10:35,309 --> 00:10:37,439
was what it ended up being so I

277
00:10:37,439 --> 00:10:39,720
furiously had to find a alternate

278
00:10:39,720 --> 00:10:42,269
solution since this no longer work

279
00:10:42,269 --> 00:10:43,829
because you can't use that dot local IP

280
00:10:43,829 --> 00:10:45,629
address because when you're ill GC is

281
00:10:45,629 --> 00:10:47,009
that your router sees it it's not it's

282
00:10:47,009 --> 00:10:49,649
gonna say I don't know what that is

283
00:10:49,649 --> 00:10:53,189
and then here's a here's a video where

284
00:10:53,189 --> 00:10:57,360
we'll see we're gonna do TCP dump from

285
00:10:57,360 --> 00:10:59,850
my laptop and then we're gonna go from a

286
00:10:59,850 --> 00:11:01,860
server I'm behind a router in there and

287
00:11:01,860 --> 00:11:03,059
then we'll just see

288
00:11:03,059 --> 00:11:04,559
oh we'll do net CAD that's what we're

289
00:11:04,559 --> 00:11:06,209
doing okay and we'll see something

290
00:11:06,209 --> 00:11:08,040
interesting here when you connect to a

291
00:11:08,040 --> 00:11:10,769
service that isn't running we see an

292
00:11:10,769 --> 00:11:12,059
immediately connection refused and

293
00:11:12,059 --> 00:11:14,069
that's because TCP is sending an rst

294
00:11:14,069 --> 00:11:16,019
back to us because there's an IP stack

295
00:11:16,019 --> 00:11:18,600
that's living and when there's when we

296
00:11:18,600 --> 00:11:20,009
connect to a service that is there like

297
00:11:20,009 --> 00:11:22,709
port 80 then we get a syn ack back

298
00:11:22,709 --> 00:11:26,069
saying hey I'm connect with you now if

299
00:11:26,069 --> 00:11:27,300
we connect to an IP address that does

300
00:11:27,300 --> 00:11:30,389
not exist we get nothing back so can we

301
00:11:30,389 --> 00:11:33,149
use this information to help us gain an

302
00:11:33,149 --> 00:11:36,600
IP address so what we can actually do is

303
00:11:36,600 --> 00:11:38,490
ap timing attack within the web browser

304
00:11:38,490 --> 00:11:41,459
what if you create an image and your

305
00:11:41,459 --> 00:11:44,160
image connects to random IP let's say a

306
00:11:44,160 --> 00:11:47,610
router IP like 192.168.0.1 now you don't

307
00:11:47,610 --> 00:11:49,619
know the victim's router IP but we do

308
00:11:49,619 --> 00:11:51,660
know there's probably a handful maybe 20

309
00:11:51,660 --> 00:11:54,779
top IPS that are pretty common within

310
00:11:54,779 --> 00:11:57,569
routers as their gateway ID IP and what

311
00:11:57,569 --> 00:12:00,660
if we do we create an image and then we

312
00:12:00,660 --> 00:12:02,999
have an odd mode and a non error event

313
00:12:02,999 --> 00:12:05,670
now if there is a machine there it's

314
00:12:05,670 --> 00:12:07,230
either going to be listening on say port

315
00:12:07,230 --> 00:12:09,059
80 or it's not gonna be listening if

316
00:12:09,059 --> 00:12:11,189
it's listening in sanh port 80 and the

317
00:12:11,189 --> 00:12:13,170
image exists where that's going to fire

318
00:12:13,170 --> 00:12:15,449
an on success event if it's not

319
00:12:15,449 --> 00:12:17,249
listening but that's gonna fire an RS T

320
00:12:17,249 --> 00:12:19,259
which will fought fire an on air event

321
00:12:19,259 --> 00:12:22,619
if there's nothing there an on air will

322
00:12:22,619 --> 00:12:24,179
happen but it'll happen after a few

323
00:12:24,179 --> 00:12:25,949
seconds so what if we just timed that

324
00:12:25,949 --> 00:12:27,299
amount of time from when we drop this

325
00:12:27,299 --> 00:12:29,759
image to when we get an on success or on

326
00:12:29,759 --> 00:12:30,809
air and we don't care if there's

327
00:12:30,809 --> 00:12:32,069
something listening or not we just wanna

328
00:12:32,069 --> 00:12:34,290
know is there a machine there and we do

329
00:12:34,290 --> 00:12:36,509
this for say the top 50 possible routers

330
00:12:36,509 --> 00:12:37,889
and now we know what the Gateway IP

331
00:12:37,889 --> 00:12:39,809
address of your lamb is so now we've

332
00:12:39,809 --> 00:12:41,459
just discovered by trying one on two one

333
00:12:41,459 --> 00:12:42,689
stood eight nine zero one dot one dot

334
00:12:42,689 --> 00:12:43,410
one

335
00:12:43,410 --> 00:12:45,300
once so on and so forth we tried all the

336
00:12:45,300 --> 00:12:47,430
10 10 dots and then we figure out what

337
00:12:47,430 --> 00:12:49,949
your gateway IP address is now we still

338
00:12:49,949 --> 00:12:51,420
don't know your IP we need to know that

339
00:12:51,420 --> 00:12:53,310
so then we perform the same attack but

340
00:12:53,310 --> 00:12:55,230
for your subnet and we're doing this now

341
00:12:55,230 --> 00:12:56,970
for every IP within your subnet and

342
00:12:56,970 --> 00:13:00,060
timing all of them well which machine is

343
00:13:00,060 --> 00:13:01,889
going to respond the fastest it's your

344
00:13:01,889 --> 00:13:04,019
own machine right because you're on your

345
00:13:04,019 --> 00:13:05,399
own machine does need to respond doesn't

346
00:13:05,399 --> 00:13:06,329
need to go through the router so it's

347
00:13:06,329 --> 00:13:08,519
going to immediately respond and you can

348
00:13:08,519 --> 00:13:11,310
now determine a local IP address so this

349
00:13:11,310 --> 00:13:13,079
is an example this is entirely automated

350
00:13:13,079 --> 00:13:15,089
where you visit a site it detects what

351
00:13:15,089 --> 00:13:18,389
subnet you are by testing it's actually

352
00:13:18,389 --> 00:13:21,839
I probably test 300 different 300

353
00:13:21,839 --> 00:13:25,079
different routers and then whichever one

354
00:13:25,079 --> 00:13:26,879
is fastest then we try all the IPS in

355
00:13:26,879 --> 00:13:28,949
that subnet and then ultimately we we

356
00:13:28,949 --> 00:13:30,480
see that we do get the local IP address

357
00:13:30,480 --> 00:13:33,180
so that is pretty cool we now know the

358
00:13:33,180 --> 00:13:50,639
local IP address of the user and then so

359
00:13:50,639 --> 00:13:52,709
why does it fail so I think we need to

360
00:13:52,709 --> 00:13:54,480
really understand how does a router alg

361
00:13:54,480 --> 00:13:57,660
work so the first thing we want to do is

362
00:13:57,660 --> 00:13:59,610
we want to dump firmware if you want to

363
00:13:59,610 --> 00:14:00,720
really understand right you take your

364
00:14:00,720 --> 00:14:02,399
router you open it up and you

365
00:14:02,399 --> 00:14:04,889
potentially dump firmer just some of the

366
00:14:04,889 --> 00:14:06,329
tools that I like to use

367
00:14:06,329 --> 00:14:10,069
that's strange this is the wrong image

368
00:14:10,069 --> 00:14:12,110
sorry about that

369
00:14:12,110 --> 00:14:16,410
that's better that's better okay so I

370
00:14:16,410 --> 00:14:18,060
like to actually use my phone whenever

371
00:14:18,060 --> 00:14:19,800
I'm investigating Hardware right if I'm

372
00:14:19,800 --> 00:14:21,750
looking at hardware a I like to take

373
00:14:21,750 --> 00:14:23,100
pictures with it right I can take big

374
00:14:23,100 --> 00:14:26,009
pictures you can zoom in you can use the

375
00:14:26,009 --> 00:14:28,889
flashlight to often look through a PCB

376
00:14:28,889 --> 00:14:30,750
to follow traces it's very useful if you

377
00:14:30,750 --> 00:14:32,389
put it on the bottom of a circuit board

378
00:14:32,389 --> 00:14:34,230
that will help you find things you

379
00:14:34,230 --> 00:14:36,029
should be looking at the names of all

380
00:14:36,029 --> 00:14:37,800
the chips on here so if you open up your

381
00:14:37,800 --> 00:14:39,240
router you can look at all the chips

382
00:14:39,240 --> 00:14:41,250
look at the names find the data sheets

383
00:14:41,250 --> 00:14:43,050
many almost all of these will have well

384
00:14:43,050 --> 00:14:44,129
if many of these will have public data

385
00:14:44,129 --> 00:14:47,790
sheets if I'm trying to dump firmware or

386
00:14:47,790 --> 00:14:49,949
attack a chip some other way microbes

387
00:14:49,949 --> 00:14:55,589
are super useful logic analyzer is super

388
00:14:55,589 --> 00:14:56,760
useful if you're

389
00:14:56,760 --> 00:14:59,610
glitching tools like chip whisperer from

390
00:14:59,610 --> 00:15:02,340
Colin Flynn super useful and then also

391
00:15:02,340 --> 00:15:06,330
going online looking for binaries if you

392
00:15:06,330 --> 00:15:07,830
can find binaries or you can extract

393
00:15:07,830 --> 00:15:09,930
from or you extract it from the device

394
00:15:09,930 --> 00:15:11,460
itself then using a tool like pin lock

395
00:15:11,460 --> 00:15:14,520
which will actually find different it

396
00:15:14,520 --> 00:15:15,930
will look for different binaries and

397
00:15:15,930 --> 00:15:18,570
file types within a larger image so

398
00:15:18,570 --> 00:15:20,220
it'll say oh you have an lzma or you

399
00:15:20,220 --> 00:15:22,350
have a squash FS file system here and

400
00:15:22,350 --> 00:15:23,790
then once you know that you can use Ben

401
00:15:23,790 --> 00:15:25,590
walk - e or you can use a separate tool

402
00:15:25,590 --> 00:15:27,540
like on squash FS to extract that and

403
00:15:27,540 --> 00:15:30,360
then access the files inside once you

404
00:15:30,360 --> 00:15:32,130
have access to the files inside then you

405
00:15:32,130 --> 00:15:37,710
want to kind of look around so so I was

406
00:15:37,710 --> 00:15:39,870
looking around to see all right I know

407
00:15:39,870 --> 00:15:41,640
my router does FTP and sip so let me

408
00:15:41,640 --> 00:15:43,380
just look around the filesystem and see

409
00:15:43,380 --> 00:15:45,480
what does it do with FTP and what does

410
00:15:45,480 --> 00:15:48,030
it do with sip because my sip the

411
00:15:48,030 --> 00:15:49,290
technique that I think should work I

412
00:15:49,290 --> 00:15:51,180
know voice over IP calls works so my

413
00:15:51,180 --> 00:15:53,430
router clearly has a lg enabled yet when

414
00:15:53,430 --> 00:15:55,530
I attempt my attack from the browser it

415
00:15:55,530 --> 00:15:57,330
no longer works so what's going on here

416
00:15:57,330 --> 00:16:00,690
so I did a ton squash and ifs pulled out

417
00:16:00,690 --> 00:16:02,730
the file system went through look for

418
00:16:02,730 --> 00:16:05,700
different FTP files I have a bunch of

419
00:16:05,700 --> 00:16:07,290
different tools I'm using I've also

420
00:16:07,290 --> 00:16:08,640
linked to all of them in the bottom

421
00:16:08,640 --> 00:16:10,590
right here so I can make this this tool

422
00:16:10,590 --> 00:16:12,900
of this spread now this presentation

423
00:16:12,900 --> 00:16:14,790
available excuse me

424
00:16:14,790 --> 00:16:16,560
and I also wanted to start using this

425
00:16:16,560 --> 00:16:21,170
tool called Jindra geeky Diedre

426
00:16:21,230 --> 00:16:25,710
deidre git git row how do you know do

427
00:16:25,710 --> 00:16:31,890
you work are you with the NSA somebody

428
00:16:31,890 --> 00:16:36,540
else somebody told you and I love that

429
00:16:36,540 --> 00:16:39,810
when g-dragon's your excuse this tool

430
00:16:39,810 --> 00:16:42,150
when the throw came out the NSA released

431
00:16:42,150 --> 00:16:44,310
this reverse engineering tool and it was

432
00:16:44,310 --> 00:16:45,960
around the same week that Microsoft saw

433
00:16:45,960 --> 00:16:48,030
this was like oh we're gonna open source

434
00:16:48,030 --> 00:16:51,780
calculator in response so calculator

435
00:16:51,780 --> 00:16:53,310
came out as open source as well which is

436
00:16:53,310 --> 00:16:57,990
pretty cool so with G Drive

437
00:16:57,990 --> 00:17:00,660
G Drive I promising all right I

438
00:17:00,660 --> 00:17:02,090
apologize

439
00:17:02,090 --> 00:17:04,619
Aggie dress okay my head is like it's

440
00:17:04,619 --> 00:17:05,280
not great right now

441
00:17:05,280 --> 00:17:09,240
I apologize so indeed rrah

442
00:17:09,240 --> 00:17:10,980
we're taking a look at one of the files

443
00:17:10,980 --> 00:17:12,689
that match the FTP just the word FTP

444
00:17:12,689 --> 00:17:14,069
that was a it was a kernel object at

445
00:17:14,069 --> 00:17:15,689
Keio so I was like oh there's gonna be

446
00:17:15,689 --> 00:17:17,189
some cool stuff in there and we start

447
00:17:17,189 --> 00:17:18,839
taking a look and then I'm like okay we

448
00:17:18,839 --> 00:17:20,819
won't we what other decodes are there

449
00:17:20,819 --> 00:17:22,410
what other al G's does this router

450
00:17:22,410 --> 00:17:24,480
support and of course we found sip

451
00:17:24,480 --> 00:17:26,640
decode so now we're looking around for

452
00:17:26,640 --> 00:17:28,680
sip decode to see how does sip decode

453
00:17:28,680 --> 00:17:30,870
work under what conditions will my

454
00:17:30,870 --> 00:17:32,670
router say oh this is a sip packet verse

455
00:17:32,670 --> 00:17:34,440
this is someone just doing whatever

456
00:17:34,440 --> 00:17:38,100
random other traffic and interesting ly

457
00:17:38,100 --> 00:17:39,210
we see something here

458
00:17:39,210 --> 00:17:41,160
where it's doing an invite in my sip

459
00:17:41,160 --> 00:17:42,510
example I was doing an invite or a

460
00:17:42,510 --> 00:17:45,180
register and here it's actually doing a

461
00:17:45,180 --> 00:17:47,760
string string and cape in case compare

462
00:17:47,760 --> 00:17:49,530
and what's interesting about this is

463
00:17:49,530 --> 00:17:51,900
that the invite or the register must be

464
00:17:51,900 --> 00:17:54,030
at the beginning of the data portion of

465
00:17:54,030 --> 00:17:56,760
the packet so now in a TCP packet if

466
00:17:56,760 --> 00:17:58,340
you're sending if you're doing this

467
00:17:58,340 --> 00:18:03,270
weird thing through HTTP POST your

468
00:18:03,270 --> 00:18:05,360
packet is actually to begin with a post

469
00:18:05,360 --> 00:18:09,180
/hd 1.0 host whatever host user agent

470
00:18:09,180 --> 00:18:11,550
whatever and then the post data so

471
00:18:11,550 --> 00:18:13,140
unfortunately I can't control the

472
00:18:13,140 --> 00:18:15,870
beginning of the packet that's the

473
00:18:15,870 --> 00:18:17,370
browser the browser has full control of

474
00:18:17,370 --> 00:18:19,020
the beginning of the packet I only have

475
00:18:19,020 --> 00:18:20,220
control of the middle of the packet

476
00:18:20,220 --> 00:18:23,250
which is the post data so I'm thinking

477
00:18:23,250 --> 00:18:25,140
okay what else can we do how can I look

478
00:18:25,140 --> 00:18:27,300
how can i maybe perform some sort of raw

479
00:18:27,300 --> 00:18:29,010
socket within the web browser so I

480
00:18:29,010 --> 00:18:30,810
started taking a look at chrome flags

481
00:18:30,810 --> 00:18:32,730
and experiments it's always interesting

482
00:18:32,730 --> 00:18:34,050
to see what are the new protocols that

483
00:18:34,050 --> 00:18:35,460
are supported going through that stuff

484
00:18:35,460 --> 00:18:41,730
what features does it have and looking

485
00:18:41,730 --> 00:18:42,570
at sockets

486
00:18:42,570 --> 00:18:44,220
here's the chrome source code going

487
00:18:44,220 --> 00:18:46,290
through here I was going through the w3

488
00:18:46,290 --> 00:18:48,720
website and then I found this page when

489
00:18:48,720 --> 00:18:49,560
I was trying to like understand a

490
00:18:49,560 --> 00:18:50,820
protocol it's like what is topic

491
00:18:50,820 --> 00:18:52,830
explanation what is topic use for

492
00:18:52,830 --> 00:18:54,930
explanation there's not much explanation

493
00:18:54,930 --> 00:18:56,640
there but most their documentation

494
00:18:56,640 --> 00:18:57,840
actually is really good

495
00:18:57,840 --> 00:18:59,310
after going through I found some

496
00:18:59,310 --> 00:19:00,990
protocols that my browser supports which

497
00:19:00,990 --> 00:19:04,340
is HP HP s and if you FTP WebSocket DNS

498
00:19:04,340 --> 00:19:07,440
Spidy stun ice a couple others nothing

499
00:19:07,440 --> 00:19:08,580
that really allowed me to control the

500
00:19:08,580 --> 00:19:09,029
very

501
00:19:09,029 --> 00:19:10,319
beginning of the packet which is what I

502
00:19:10,319 --> 00:19:13,129
need to potentially perform this attack

503
00:19:13,129 --> 00:19:15,449
but then I was looking at UDP Sun and I

504
00:19:15,449 --> 00:19:16,799
was playing around with that because the

505
00:19:16,799 --> 00:19:19,019
the stun turn in ice those are all used

506
00:19:19,019 --> 00:19:21,239
to understanding what kind of NAT you're

507
00:19:21,239 --> 00:19:23,759
using so that WebRTC can then properly

508
00:19:23,759 --> 00:19:26,789
perform voice over IP and video video

509
00:19:26,789 --> 00:19:29,549
communication and I started playing with

510
00:19:29,549 --> 00:19:31,649
the with stun and I found that I can

511
00:19:31,649 --> 00:19:35,669
actually set a username for a packet for

512
00:19:35,669 --> 00:19:37,949
to authorize that stun connection and

513
00:19:37,949 --> 00:19:40,049
that username can actually be as long as

514
00:19:40,049 --> 00:19:42,989
I want so you can kind of do you can

515
00:19:42,989 --> 00:19:44,129
just send really really really long

516
00:19:44,129 --> 00:19:46,409
packets in UDP now what's interesting

517
00:19:46,409 --> 00:19:48,599
about this is that ultimately you have a

518
00:19:48,599 --> 00:19:50,489
limit of how long a packet is but the

519
00:19:50,489 --> 00:19:52,319
browser itself didn't limit it so that

520
00:19:52,319 --> 00:19:53,729
means it's your IP stack now limiting it

521
00:19:53,729 --> 00:19:55,469
when your IP stack limits it in this

522
00:19:55,469 --> 00:19:56,999
scenario for UDP it then does IP

523
00:19:56,999 --> 00:19:59,579
fragmentation so once you're over the

524
00:19:59,579 --> 00:20:01,739
boundary of the first packet it then

525
00:20:01,739 --> 00:20:03,569
creates a secondary packet where you now

526
00:20:03,569 --> 00:20:06,119
control the beginning of that packet so

527
00:20:06,119 --> 00:20:07,979
you actually as long as you know what

528
00:20:07,979 --> 00:20:09,599
the size of that packet is which you can

529
00:20:09,599 --> 00:20:12,299
do in a test case you can now do

530
00:20:12,299 --> 00:20:14,759
arbitrary UDP packet injection on the

531
00:20:14,759 --> 00:20:17,669
second packet that's pretty cool the

532
00:20:17,669 --> 00:20:19,769
only problem with with alg is that for

533
00:20:19,769 --> 00:20:22,019
alg when it sees a sip UDP packet it

534
00:20:22,019 --> 00:20:23,939
will only allow you to then open a UDP

535
00:20:23,939 --> 00:20:26,639
port and UDP ports are fun but I'm

536
00:20:26,639 --> 00:20:28,019
really more interested in TCP ports

537
00:20:28,019 --> 00:20:29,369
that's where all the juicy services are

538
00:20:29,369 --> 00:20:31,439
running so we've now actually have the

539
00:20:31,439 --> 00:20:33,959
ability to do UDP packet injection and

540
00:20:33,959 --> 00:20:37,649
this this technique worked for UDP but

541
00:20:37,649 --> 00:20:40,469
problem is I need to do this for TCP so

542
00:20:40,469 --> 00:20:42,539
what if we just send a really really

543
00:20:42,539 --> 00:20:45,539
really long form this is an actual post

544
00:20:45,539 --> 00:20:47,939
for a my for my Chrome web browser so I

545
00:20:47,939 --> 00:20:50,609
just sent a post I bolted the parts that

546
00:20:50,609 --> 00:20:53,309
I control right so I control this the

547
00:20:53,309 --> 00:20:56,759
flash whatever the URL I control the

548
00:20:56,759 --> 00:20:59,459
cookie and then I control the form the

549
00:20:59,459 --> 00:21:01,259
form data itself so I just had a ton of

550
00:21:01,259 --> 00:21:03,539
data and somehow photoshopped a weird

551
00:21:03,539 --> 00:21:06,239
thing there I don't know why and then I

552
00:21:06,239 --> 00:21:08,459
sent my sip packet in this case it's a

553
00:21:08,459 --> 00:21:10,589
register packet and what's really

554
00:21:10,589 --> 00:21:13,469
interesting is that you can do perform

555
00:21:13,469 --> 00:21:15,449
the same exact attack so what you do is

556
00:21:15,449 --> 00:21:17,249
you create a really really long packet

557
00:21:17,249 --> 00:21:18,599
and you are listening on the other side

558
00:21:18,599 --> 00:21:21,869
on port 5060 on TCP now and on TCP you

559
00:21:21,869 --> 00:21:22,830
get this packet and

560
00:21:22,830 --> 00:21:24,539
you see where does it break up and you

561
00:21:24,539 --> 00:21:26,159
can actually kind of control where it

562
00:21:26,159 --> 00:21:27,840
breaks up because TCP has a feature

563
00:21:27,840 --> 00:21:28,200
called

564
00:21:28,200 --> 00:21:30,179
MTU sizes where you I'm sorry that's

565
00:21:30,179 --> 00:21:32,399
Ethernet Ethernet has MTU size you want

566
00:21:32,399 --> 00:21:35,630
to you want a smaller MTU but TCP as uh

567
00:21:35,630 --> 00:21:38,370
man what MSS

568
00:21:38,370 --> 00:21:40,919
yeah was it message segment size

569
00:21:40,919 --> 00:21:44,279
segmentation maximum segment size thank

570
00:21:44,279 --> 00:21:46,049
you so you could when you're actually

571
00:21:46,049 --> 00:21:48,870
receiving a TCP syn from someone you can

572
00:21:48,870 --> 00:21:51,000
then respond with an MSS in the options

573
00:21:51,000 --> 00:21:52,799
and say I will only accept packet of

574
00:21:52,799 --> 00:21:55,169
this size and then you already know the

575
00:21:55,169 --> 00:21:57,120
size of the packets that the browser is

576
00:21:57,120 --> 00:21:59,460
going to send I did find that some

577
00:21:59,460 --> 00:22:01,409
browsers specifically Firefox and one

578
00:22:01,409 --> 00:22:03,990
other one would alternate the width of

579
00:22:03,990 --> 00:22:06,750
this WebKit form boundary which is the

580
00:22:06,750 --> 00:22:08,519
boundary of the post data for for this

581
00:22:08,519 --> 00:22:10,950
specific form it would only do it by a

582
00:22:10,950 --> 00:22:13,230
few bytes so I found that intermittently

583
00:22:13,230 --> 00:22:15,090
this would not work you would not know

584
00:22:15,090 --> 00:22:16,889
the proper size and what you can do is

585
00:22:16,889 --> 00:22:18,210
all you do is you listen on the other

586
00:22:18,210 --> 00:22:20,340
size on the other side and you say oh

587
00:22:20,340 --> 00:22:22,049
that was off by one byte send that data

588
00:22:22,049 --> 00:22:24,269
back to the browser over WebSocket tell

589
00:22:24,269 --> 00:22:25,769
them hey you were one bite off try again

590
00:22:25,769 --> 00:22:27,899
and you do this feedback loop and within

591
00:22:27,899 --> 00:22:31,260
five tries you then have a use then send

592
00:22:31,260 --> 00:22:33,870
this post this extra data and you create

593
00:22:33,870 --> 00:22:35,100
a new TCP packet

594
00:22:35,100 --> 00:22:37,139
essentially with full arbitrary TCP

595
00:22:37,139 --> 00:22:39,809
control of the data portion ultimately

596
00:22:39,809 --> 00:22:42,690
this allowed me to Reaper form the same

597
00:22:42,690 --> 00:22:44,730
exact attack and you now have entire

598
00:22:44,730 --> 00:22:47,460
arbitrary TCP and UDP packet injection

599
00:22:47,460 --> 00:22:51,960
control within your browser which reel

600
00:22:51,960 --> 00:22:53,399
out the attack which also means you can

601
00:22:53,399 --> 00:22:56,340
then open up any TCP or UDP port on that

602
00:22:56,340 --> 00:22:58,200
victim just by them visiting a website

603
00:22:58,200 --> 00:23:00,090
you can then connect back to any service

604
00:23:00,090 --> 00:23:02,610
that they're running which is pretty

605
00:23:02,610 --> 00:23:07,250
cool and I think that's it

606
00:23:08,340 --> 00:23:11,490
[Applause]

607
00:23:15,450 --> 00:23:18,990
I think is an example of like connecting

608
00:23:18,990 --> 00:23:20,220
to a my sequel server that's on my

609
00:23:20,220 --> 00:23:22,860
computer so it's entirely automated I'd

610
00:23:22,860 --> 00:23:25,110
be happy to share any details or answer

611
00:23:25,110 --> 00:23:30,870
any of any questions yeah cool we have a

612
00:23:30,870 --> 00:23:36,889
minute 50 seconds any questions yes oh

613
00:23:39,169 --> 00:23:41,460
that's really interesting I don't think

614
00:23:41,460 --> 00:23:46,190
it would work on a VPN provider because

615
00:23:46,190 --> 00:23:48,330
hey I don't think I'm even gonna get

616
00:23:48,330 --> 00:23:49,230
their IP address

617
00:23:49,230 --> 00:23:53,009
I don't know me I'm not sure that's

618
00:23:53,009 --> 00:23:58,049
that's a good question anyone know yeah

619
00:23:58,049 --> 00:24:01,710
I don't know if they're doing alg oh and

620
00:24:01,710 --> 00:24:04,230
if they are I'm not sure yeah that'd be

621
00:24:04,230 --> 00:24:10,759
interesting to see yes

622
00:24:16,830 --> 00:24:20,740
well I I think that's what's inching me

623
00:24:20,740 --> 00:24:22,390
is that I don't think it's about right

624
00:24:22,390 --> 00:24:24,280
this is just right it all you're doing

625
00:24:24,280 --> 00:24:25,510
is you're abusing multiple protocols

626
00:24:25,510 --> 00:24:27,430
right you're telling your browsers to

627
00:24:27,430 --> 00:24:30,340
behave like a sip client and your router

628
00:24:30,340 --> 00:24:32,170
see the SIP what appears to be a sip

629
00:24:32,170 --> 00:24:33,760
client talking out a sip port with a

630
00:24:33,760 --> 00:24:36,190
valid sip packet everything looks

631
00:24:36,190 --> 00:24:38,020
correct so I don't I don't consider this

632
00:24:38,020 --> 00:24:40,000
above grade I consider this just an

633
00:24:40,000 --> 00:24:45,100
abuse of multiple protocols so no one's

634
00:24:45,100 --> 00:24:54,820
at fault yes you can do it multiple ways

635
00:24:54,820 --> 00:24:57,910
I mean on the LG like browsers are

636
00:24:57,910 --> 00:24:59,020
probably just gonna keep on closing

637
00:24:59,020 --> 00:25:00,430
reports I don't think that's a that's

638
00:25:00,430 --> 00:25:01,930
the correct it's the real solution I

639
00:25:01,930 --> 00:25:03,220
don't necessarily think it's the

640
00:25:03,220 --> 00:25:05,980
browser's issue either I don't know you

641
00:25:05,980 --> 00:25:07,450
could have a more strict alg on your

642
00:25:07,450 --> 00:25:11,200
router that says oh I shouldn't like I I

643
00:25:11,200 --> 00:25:13,150
don't know man that's tough because you

644
00:25:13,150 --> 00:25:14,560
don't you don't want to drop in a LG

645
00:25:14,560 --> 00:25:15,940
just because someone sent an invalid

646
00:25:15,940 --> 00:25:17,830
packet because if if there's an update

647
00:25:17,830 --> 00:25:20,800
to a protocol and your router didn't get

648
00:25:20,800 --> 00:25:22,630
that didn't get that update and now you

649
00:25:22,630 --> 00:25:25,210
see an incorrect packet like I don't

650
00:25:25,210 --> 00:25:27,010
think you should drop all a LG support

651
00:25:27,010 --> 00:25:28,630
so I honestly don't know the answer I

652
00:25:28,630 --> 00:25:30,790
haven't really thought about it yeah

653
00:25:30,790 --> 00:25:33,899
okay thank you so much

654
00:25:40,100 --> 00:25:41,970
if anyone has any further questions

655
00:25:41,970 --> 00:25:43,940
Sammy will be outside in the patio and

656
00:25:43,940 --> 00:25:46,020
the last reminder if you are doing

657
00:25:46,020 --> 00:25:48,090
skydiving tomorrow to go to registration

658
00:25:48,090 --> 00:25:52,459
basically right now and sign up for that

