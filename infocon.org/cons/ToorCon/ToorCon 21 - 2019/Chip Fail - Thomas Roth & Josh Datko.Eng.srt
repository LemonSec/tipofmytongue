1
00:00:00,140 --> 00:00:03,149
who are we so my name is Thomas Roth

2
00:00:03,149 --> 00:00:05,460
this is Josh natkho and we have a third

3
00:00:05,460 --> 00:00:07,230
colleague who is Dimitri and auspice off

4
00:00:07,230 --> 00:00:10,139
who unfortunately felt too cool to fly

5
00:00:10,139 --> 00:00:13,650
to San Diego before we start we have

6
00:00:13,650 --> 00:00:15,719
some special thanks to : Oakland just

7
00:00:15,719 --> 00:00:17,520
because he always had an open year to us

8
00:00:17,520 --> 00:00:19,320
when we had any questions and wanted to

9
00:00:19,320 --> 00:00:20,340
clarify something

10
00:00:20,340 --> 00:00:22,619
and also he builds a pretty awesome

11
00:00:22,619 --> 00:00:24,420
device called the chip whisperer so if

12
00:00:24,420 --> 00:00:27,090
you're interested in fault injection

13
00:00:27,090 --> 00:00:30,900
check it out so why are we here so

14
00:00:30,900 --> 00:00:34,079
basically we work with hardware security

15
00:00:34,079 --> 00:00:36,329
and when we talk to people about the

16
00:00:36,329 --> 00:00:38,070
security design of their devices

17
00:00:38,070 --> 00:00:40,950
they almost never consider chips as part

18
00:00:40,950 --> 00:00:42,540
of the threat model so you talk to them

19
00:00:42,540 --> 00:00:44,100
and they just assume that whatever the

20
00:00:44,100 --> 00:00:46,590
vendor says is true like oh this chip is

21
00:00:46,590 --> 00:00:49,230
secure don't worry about it and also a

22
00:00:49,230 --> 00:00:50,730
lot of people think that glitching and

23
00:00:50,730 --> 00:00:52,680
fault injection is some dark magic but

24
00:00:52,680 --> 00:00:55,350
turns out it's really easy and we want

25
00:00:55,350 --> 00:00:56,940
to make this more accessible and make

26
00:00:56,940 --> 00:00:59,340
people try fault injection because it

27
00:00:59,340 --> 00:01:00,840
turns out you can do it very cheaply

28
00:01:00,840 --> 00:01:05,640
very easily and yeah so before we start

29
00:01:05,640 --> 00:01:07,650
what is Fault injections so fault

30
00:01:07,650 --> 00:01:09,900
injection is a term that professionals

31
00:01:09,900 --> 00:01:12,840
use we call it glitching and so

32
00:01:12,840 --> 00:01:14,970
basically the theory behind glitching

33
00:01:14,970 --> 00:01:18,150
and fault injection is we want to

34
00:01:18,150 --> 00:01:21,119
introduce small mistakes into chips so

35
00:01:21,119 --> 00:01:23,250
basically for example we cut the power

36
00:01:23,250 --> 00:01:24,810
for a very very short amount of time

37
00:01:24,810 --> 00:01:27,780
think like 10 nanoseconds or so we

38
00:01:27,780 --> 00:01:29,100
changed the period of the clock signal

39
00:01:29,100 --> 00:01:33,119
or even we point a Taser onto the chip

40
00:01:33,119 --> 00:01:35,070
and see what happens if there's a strong

41
00:01:35,070 --> 00:01:38,400
EMI shock and the most common way to do

42
00:01:38,400 --> 00:01:40,229
glitching is called voltage glitching

43
00:01:40,229 --> 00:01:44,280
and so basically you you try to cut the

44
00:01:44,280 --> 00:01:46,740
power at a very precise moment in time

45
00:01:46,740 --> 00:01:49,829
too cause undefined behavior and so the

46
00:01:49,829 --> 00:01:51,540
theory behind this is that if you look

47
00:01:51,540 --> 00:01:53,430
at the chip datasheet it has the safe

48
00:01:53,430 --> 00:01:55,979
operating area so basically up to a

49
00:01:55,979 --> 00:01:57,659
certain voltage it will run at a certain

50
00:01:57,659 --> 00:02:00,240
megahertz and so on and what's very

51
00:02:00,240 --> 00:02:02,399
interesting is what happens if you go

52
00:02:02,399 --> 00:02:04,770
outside of this safe operating area so

53
00:02:04,770 --> 00:02:07,439
you drop the voltage further or you try

54
00:02:07,439 --> 00:02:09,840
to even go into higher frequencies with

55
00:02:09,840 --> 00:02:11,709
the clock signal and so on

56
00:02:11,709 --> 00:02:15,159
and the basic theory in glitching is

57
00:02:15,159 --> 00:02:18,159
that you wait for a trigger event then

58
00:02:18,159 --> 00:02:19,959
you wait for a certain delay you glitch

59
00:02:19,959 --> 00:02:21,640
for a certain duration and then you

60
00:02:21,640 --> 00:02:24,069
check for a result what does this mean

61
00:02:24,069 --> 00:02:25,959
well on a real device this might be oh

62
00:02:25,959 --> 00:02:28,510
I'm booting this device I'm waiting

63
00:02:28,510 --> 00:02:30,639
until I'm in the bootloader and then I'm

64
00:02:30,639 --> 00:02:32,889
waiting for the precise moment where the

65
00:02:32,889 --> 00:02:34,480
bootloader checks whether the firmware

66
00:02:34,480 --> 00:02:38,079
is valid and then I drop the power for a

67
00:02:38,079 --> 00:02:39,879
very short amount of time and try to

68
00:02:39,879 --> 00:02:42,069
boot my modified firmware and so

69
00:02:42,069 --> 00:02:44,200
basically if you look at flash reads

70
00:02:44,200 --> 00:02:46,299
flash reads take a lot of power so

71
00:02:46,299 --> 00:02:49,720
basically if you if a system boots up

72
00:02:49,720 --> 00:02:51,700
and it tries to read a certain variable

73
00:02:51,700 --> 00:02:53,859
also from flash and you interrupt the

74
00:02:53,859 --> 00:02:56,769
power the result gets undefined and if

75
00:02:56,769 --> 00:02:58,150
you booted chip and you do a power

76
00:02:58,150 --> 00:02:59,709
measurement you can actually see this

77
00:02:59,709 --> 00:03:02,230
pretty well so in this region this is

78
00:03:02,230 --> 00:03:04,540
just the yellow line is the reset going

79
00:03:04,540 --> 00:03:06,879
up so we start the chip and you can see

80
00:03:06,879 --> 00:03:08,469
in the power consumption there's a lot

81
00:03:08,469 --> 00:03:11,109
of stuff going on so we can see that it

82
00:03:11,109 --> 00:03:12,790
goes higher which is where the actual

83
00:03:12,790 --> 00:03:14,889
execution of the chip starts and then

84
00:03:14,889 --> 00:03:16,930
there's a small part where there's a lot

85
00:03:16,930 --> 00:03:19,150
of power consumption and this already

86
00:03:19,150 --> 00:03:21,099
tells you that this is probably the part

87
00:03:21,099 --> 00:03:23,440
where the boot ROM tries to read

88
00:03:23,440 --> 00:03:24,940
something from flash because that

89
00:03:24,940 --> 00:03:27,129
requires a lot of power and then if we

90
00:03:27,129 --> 00:03:29,409
introduce a very short voltage glitch

91
00:03:29,409 --> 00:03:31,419
which example on the scope looks

92
00:03:31,419 --> 00:03:33,459
something like this where you drop it

93
00:03:33,459 --> 00:03:35,229
for like a couple of nanoseconds you

94
00:03:35,229 --> 00:03:37,479
drop the power what happens is that this

95
00:03:37,479 --> 00:03:40,150
flash read might depending on if you are

96
00:03:40,150 --> 00:03:43,509
lucky or not might get garbled and you

97
00:03:43,509 --> 00:03:45,939
get an undefined result and so so much

98
00:03:45,939 --> 00:03:47,590
for the theory but how do you actually

99
00:03:47,590 --> 00:03:50,859
do this and that's where Josh comes in

100
00:03:50,859 --> 00:03:52,329
who will tell you how to prepare a

101
00:03:52,329 --> 00:03:58,509
device for glitching okay so this is our

102
00:03:58,509 --> 00:04:00,669
MLM so we're going to tell these three

103
00:04:00,669 --> 00:04:02,049
steps and then we want each of you to

104
00:04:02,049 --> 00:04:03,699
tell three people and then I think

105
00:04:03,699 --> 00:04:05,859
there's a profit step in there or we

106
00:04:05,859 --> 00:04:07,479
launch an IC o---- I'm not sure we

107
00:04:07,479 --> 00:04:09,519
haven't figured that out but what we

108
00:04:09,519 --> 00:04:11,590
want to do is basically prepare the

109
00:04:11,590 --> 00:04:13,780
device for glitching so we have to do

110
00:04:13,780 --> 00:04:15,699
some things Hardware modifications we

111
00:04:15,699 --> 00:04:18,099
have to make some tests firmware so it's

112
00:04:18,099 --> 00:04:20,289
really simple so if your Hardware hacker

113
00:04:20,289 --> 00:04:23,110
this is really simple firmware

114
00:04:23,110 --> 00:04:25,659
then if the reason hook it up and glitch

115
00:04:25,659 --> 00:04:28,210
it and those are the three steps so

116
00:04:28,210 --> 00:04:31,539
preparing the device basically we start

117
00:04:31,539 --> 00:04:32,889
looking at the device we have to do some

118
00:04:32,889 --> 00:04:34,840
analysis of it so we have to we have to

119
00:04:34,840 --> 00:04:36,219
read the datasheet we have to figure out

120
00:04:36,219 --> 00:04:39,639
how the device gets power so this could

121
00:04:39,639 --> 00:04:41,830
be so a lot of the microcontrollers now

122
00:04:41,830 --> 00:04:43,569
are pretty complicated they have lots of

123
00:04:43,569 --> 00:04:45,009
peripherals as other people have been

124
00:04:45,009 --> 00:04:46,810
talking about today so we need to have

125
00:04:46,810 --> 00:04:48,789
to understand where power is going into

126
00:04:48,789 --> 00:04:51,759
different parts of the chip so main

127
00:04:51,759 --> 00:04:54,400
power could be 3.3 volts the core

128
00:04:54,400 --> 00:04:55,719
voltage is going to be probably a little

129
00:04:55,719 --> 00:04:57,819
lower if it has a Wi-Fi peripheral that

130
00:04:57,819 --> 00:05:00,069
could be at a different voltage and so

131
00:05:00,069 --> 00:05:02,319
internally what's going on is there may

132
00:05:02,319 --> 00:05:03,940
only be wall externally there may only

133
00:05:03,940 --> 00:05:05,949
be one input to the chip there only may

134
00:05:05,949 --> 00:05:08,469
be 3.3 volts but realize that all of

135
00:05:08,469 --> 00:05:10,539
these peripherals are probably running

136
00:05:10,539 --> 00:05:12,250
at different voltages and maybe even

137
00:05:12,250 --> 00:05:15,789
different clock demeans so these have to

138
00:05:15,789 --> 00:05:19,270
get split out through regulators so and

139
00:05:19,270 --> 00:05:21,340
again depending on the peripheral that's

140
00:05:21,340 --> 00:05:22,599
being used there may be more than one

141
00:05:22,599 --> 00:05:27,009
regulator so the 3.3 comes in and goes

142
00:05:27,009 --> 00:05:30,129
to the core regulator that could provide

143
00:05:30,129 --> 00:05:32,139
power to CPU core the RF may have a

144
00:05:32,139 --> 00:05:34,539
different one and then GPIO may also be

145
00:05:34,539 --> 00:05:35,800
running directly at three three so there

146
00:05:35,800 --> 00:05:37,589
may not be a regulator in there and so

147
00:05:37,589 --> 00:05:39,849
this is again this is the reconnaissance

148
00:05:39,849 --> 00:05:41,560
step and some of this may not be

149
00:05:41,560 --> 00:05:43,839
inferable from the datasheet so some of

150
00:05:43,839 --> 00:05:45,310
this we just may have to make educated

151
00:05:45,310 --> 00:05:47,770
guesses on depending on the thing we

152
00:05:47,770 --> 00:05:50,770
want to collect but usually a good

153
00:05:50,770 --> 00:05:52,240
design will have some sort of bypass

154
00:05:52,240 --> 00:05:53,979
capacitors and this is to smooth the

155
00:05:53,979 --> 00:05:55,930
voltage out and this is generally a good

156
00:05:55,930 --> 00:05:57,430
idea if you're making a product you want

157
00:05:57,430 --> 00:06:00,669
to have these bypass capacitors and then

158
00:06:00,669 --> 00:06:01,930
these are external to the chip and

159
00:06:01,930 --> 00:06:04,360
you'll kind of see them placed around

160
00:06:04,360 --> 00:06:08,620
but what's also nice is that this

161
00:06:08,620 --> 00:06:10,810
capacitor may actually provide a direct

162
00:06:10,810 --> 00:06:13,029
link into the core voltage which is the

163
00:06:13,029 --> 00:06:15,190
area you want to glitch so this is

164
00:06:15,190 --> 00:06:16,659
perfect this is like the side door

165
00:06:16,659 --> 00:06:18,729
entrance into the core regulate into the

166
00:06:18,729 --> 00:06:20,889
CPU core but we have that capacitor in

167
00:06:20,889 --> 00:06:22,089
the way and that's kind of buffering

168
00:06:22,089 --> 00:06:24,849
this energy so pretty easy we just use

169
00:06:24,849 --> 00:06:26,050
some hardware hacking remove the

170
00:06:26,050 --> 00:06:28,120
capacitor problem solved and now we just

171
00:06:28,120 --> 00:06:30,909
have direct access to so the CPU core

172
00:06:30,909 --> 00:06:34,680
and now we can provide that voltage

173
00:06:35,169 --> 00:06:37,960
and so yeah so now so now this is the

174
00:06:37,960 --> 00:06:39,699
area that we're looking at right now we

175
00:06:39,699 --> 00:06:41,169
can see that VDD core curves right in

176
00:06:41,169 --> 00:06:43,030
the CPU core and that's the if we

177
00:06:43,030 --> 00:06:46,900
provide that voltage that will be a nice

178
00:06:46,900 --> 00:06:49,169
area that we can provide a coaching and

179
00:06:49,169 --> 00:06:51,729
capacitors are going so we've got direct

180
00:06:51,729 --> 00:06:53,439
access so on this kind of like NRF

181
00:06:53,439 --> 00:06:55,300
example board we're trying to apply

182
00:06:55,300 --> 00:06:59,219
there our MLM strategy so prep one is

183
00:06:59,219 --> 00:07:02,349
prepare the patient basically so we have

184
00:07:02,349 --> 00:07:04,779
to remove these capacitors we identify

185
00:07:04,779 --> 00:07:06,039
the capacitors by looking at the

186
00:07:06,039 --> 00:07:07,479
datasheet doing some other

187
00:07:07,479 --> 00:07:09,159
reconnaissance and then we can just

188
00:07:09,159 --> 00:07:13,719
pluck those off and so some practical

189
00:07:13,719 --> 00:07:15,310
issues if you do this I mean there's a

190
00:07:15,310 --> 00:07:17,259
reason these capacitors are there but so

191
00:07:17,259 --> 00:07:18,669
by doing this I mean it could be a

192
00:07:18,669 --> 00:07:20,740
little bit unstable so this is just

193
00:07:20,740 --> 00:07:23,199
where you're in the analog demean and

194
00:07:23,199 --> 00:07:25,599
you have to just kind of you know

195
00:07:25,599 --> 00:07:27,189
provide a nice clean power supply and

196
00:07:27,189 --> 00:07:29,469
you know you know so if you hook up the

197
00:07:29,469 --> 00:07:32,219
power supply there you will be basically

198
00:07:32,219 --> 00:07:34,749
providing that voltage that was there

199
00:07:34,749 --> 00:07:36,370
with the capacitor so you have a nice

200
00:07:36,370 --> 00:07:39,400
clean voltage going in you've just

201
00:07:39,400 --> 00:07:41,259
replaced the like Tencent capacitor with

202
00:07:41,259 --> 00:07:42,669
like a dollar power supply but that's

203
00:07:42,669 --> 00:07:45,099
okay it's not a problem and yeah that's

204
00:07:45,099 --> 00:07:48,370
exactly where we're going to clutch and

205
00:07:48,370 --> 00:07:51,310
so on on a real I mean so so that other

206
00:07:51,310 --> 00:07:52,479
slide just basically had those red

207
00:07:52,479 --> 00:07:54,430
things now this is what it looks like in

208
00:07:54,430 --> 00:07:55,930
practice and we were to soldering one

209
00:07:55,930 --> 00:07:58,419
wire into VD core and that's what it

210
00:07:58,419 --> 00:08:01,569
looks like practically and again we take

211
00:08:01,569 --> 00:08:03,969
out these capacitors so now we have the

212
00:08:03,969 --> 00:08:06,550
bill to test firmware basically so this

213
00:08:06,550 --> 00:08:07,990
is coming at it from the attitude is I

214
00:08:07,990 --> 00:08:09,849
want to glitch this target how do I go

215
00:08:09,849 --> 00:08:12,460
about it step one was the suppress step

216
00:08:12,460 --> 00:08:14,139
two is building a test firmware so we

217
00:08:14,139 --> 00:08:15,610
need to know that our glitch is working

218
00:08:15,610 --> 00:08:17,710
somehow so we have to write some amount

219
00:08:17,710 --> 00:08:20,620
of code that will turn on the chip on

220
00:08:20,620 --> 00:08:23,229
bring it up exercise some function and

221
00:08:23,229 --> 00:08:25,870
then provide a way that we know that it

222
00:08:25,870 --> 00:08:29,199
worked so kind of in the like the

223
00:08:29,199 --> 00:08:32,019
Arduino lingo the way that you know

224
00:08:32,019 --> 00:08:34,089
here's the kind of like pseudocode slash

225
00:08:34,089 --> 00:08:35,198
Arduino code that would do this

226
00:08:35,198 --> 00:08:37,769
basically we want to bring these pins up

227
00:08:37,769 --> 00:08:40,029
alright so the boot the device we just

228
00:08:40,029 --> 00:08:41,229
ignore all that stuff that happens

229
00:08:41,229 --> 00:08:43,390
before mean and then magically we get

230
00:08:43,390 --> 00:08:46,029
the boot well dudes like basically the

231
00:08:46,029 --> 00:08:48,230
system bring up embedded system bring up

232
00:08:48,230 --> 00:08:51,920
we are going to set some GPOs as high

233
00:08:51,920 --> 00:08:53,300
and this is going to be a nice clean

234
00:08:53,300 --> 00:08:55,760
trigger to our glitching system because

235
00:08:55,760 --> 00:09:00,860
we'll have this nice rising edge here

236
00:09:00,860 --> 00:09:02,570
we're gonna read the flash address so we

237
00:09:02,570 --> 00:09:03,860
have this flash address read and this is

238
00:09:03,860 --> 00:09:05,360
the value we're gonna corrupt and then

239
00:09:05,360 --> 00:09:07,850
basically we loop around that so we just

240
00:09:07,850 --> 00:09:09,290
keep trying to loop around this and then

241
00:09:09,290 --> 00:09:11,600
if we get a different so this code if

242
00:09:11,600 --> 00:09:12,830
we're running around it should always

243
00:09:12,830 --> 00:09:16,130
work right should be always green we'll

244
00:09:16,130 --> 00:09:18,140
see all the that should never fail but

245
00:09:18,140 --> 00:09:20,420
by injecting the glitch this is going to

246
00:09:20,420 --> 00:09:21,800
it's going to exit out of the loop and

247
00:09:21,800 --> 00:09:23,360
so this is how we're gonna know that

248
00:09:23,360 --> 00:09:24,890
this is succeeded and so if you looked

249
00:09:24,890 --> 00:09:27,350
at this on a scope right you know the

250
00:09:27,350 --> 00:09:29,060
how you know what does it look like and

251
00:09:29,060 --> 00:09:32,030
so you know the the chip is going to

252
00:09:32,030 --> 00:09:33,950
boot your pin is gonna be low because

253
00:09:33,950 --> 00:09:37,220
it's booting then when that rising edge

254
00:09:37,220 --> 00:09:38,540
comes up this is the trigger that you

255
00:09:38,540 --> 00:09:40,190
put in there so that now you have a nice

256
00:09:40,190 --> 00:09:42,770
clean trigger spot you have to program

257
00:09:42,770 --> 00:09:44,510
in the lay of the Glitter so this is one

258
00:09:44,510 --> 00:09:45,800
of the parameters that you're gonna

259
00:09:45,800 --> 00:09:47,900
tweak with the glitches okay we're in

260
00:09:47,900 --> 00:09:49,970
this search space do I want a glitch so

261
00:09:49,970 --> 00:09:52,280
you just delay this a little bit insert

262
00:09:52,280 --> 00:09:55,250
the glitch and then you know then

263
00:09:55,250 --> 00:09:57,890
whether that glitch was effective this

264
00:09:57,890 --> 00:09:59,180
kind of depends on that target in that

265
00:09:59,180 --> 00:10:02,540
example that we showed the right it

266
00:10:02,540 --> 00:10:04,070
would see if that read failed and then

267
00:10:04,070 --> 00:10:05,750
we possibly set another pin but if

268
00:10:05,750 --> 00:10:07,220
you're trying to attack a live system or

269
00:10:07,220 --> 00:10:09,050
a real system that's really going to

270
00:10:09,050 --> 00:10:10,730
depend on what the system does but then

271
00:10:10,730 --> 00:10:12,200
this is this is just the general

272
00:10:12,200 --> 00:10:13,670
algorithm for going through and how to

273
00:10:13,670 --> 00:10:16,070
glitch something so now we need an

274
00:10:16,070 --> 00:10:18,410
actual glitcher so what do we need for

275
00:10:18,410 --> 00:10:19,760
the glitch er well we need some sort of

276
00:10:19,760 --> 00:10:22,070
device that provides a very accurate

277
00:10:22,070 --> 00:10:25,430
stable glitch has to be very precise you

278
00:10:25,430 --> 00:10:28,070
know kind of like nanosecond level and

279
00:10:28,070 --> 00:10:31,700
so we've got on board the FPGA train and

280
00:10:31,700 --> 00:10:34,040
so this is the kind of this is the tool

281
00:10:34,040 --> 00:10:35,600
that we're using to basically build the

282
00:10:35,600 --> 00:10:40,550
clickers and as you know as other people

283
00:10:40,550 --> 00:10:42,140
talked about basically FPGAs have

284
00:10:42,140 --> 00:10:44,030
started to come down decently in price

285
00:10:44,030 --> 00:10:46,460
so we're not using a very complex

286
00:10:46,460 --> 00:10:48,590
features of the FPGA this is just kind

287
00:10:48,590 --> 00:10:50,900
of like basic digital logic so these can

288
00:10:50,900 --> 00:10:53,810
work on low-end FPGA is like the lattice

289
00:10:53,810 --> 00:10:56,780
I stick what's nice about those is that

290
00:10:56,780 --> 00:10:58,070
they also have open-source tool chains

291
00:10:58,070 --> 00:11:00,960
and so this is a very approachable

292
00:11:00,960 --> 00:11:02,610
way and then also there is the

293
00:11:02,610 --> 00:11:05,910
icebreaker which is another open-source

294
00:11:05,910 --> 00:11:08,400
project and so it's also using the

295
00:11:08,400 --> 00:11:10,410
lattice s FPGA but basically you have

296
00:11:10,410 --> 00:11:12,300
that you have this the P mod which I'll

297
00:11:12,300 --> 00:11:13,890
talk about in a second and then the

298
00:11:13,890 --> 00:11:15,360
power slot power supply which I've

299
00:11:15,360 --> 00:11:16,800
previously talked about because you need

300
00:11:16,800 --> 00:11:18,090
to provide different voltages so you

301
00:11:18,090 --> 00:11:21,210
need some power supply that can do kind

302
00:11:21,210 --> 00:11:24,630
of custom voltages but so here is the

303
00:11:24,630 --> 00:11:27,690
last eye stick it's like I said open

304
00:11:27,690 --> 00:11:29,850
source small chain approachable fpga

305
00:11:29,850 --> 00:11:32,640
it's more than enough to do this

306
00:11:32,640 --> 00:11:35,970
the max P mod so I'm a big fan of the

307
00:11:35,970 --> 00:11:39,540
digital P mod spec for FPGAs there's now

308
00:11:39,540 --> 00:11:42,270
a apparently a Z mod so if you need more

309
00:11:42,270 --> 00:11:45,540
IO you can use the Z mod spec which is

310
00:11:45,540 --> 00:11:46,920
totally overkill for this you don't have

311
00:11:46,920 --> 00:11:48,690
to do that but it's got like a 40 pin

312
00:11:48,690 --> 00:11:50,700
high-density connector super nice to

313
00:11:50,700 --> 00:11:53,070
geek out on but basically and this is

314
00:11:53,070 --> 00:11:54,660
the kit that's in there it's just an

315
00:11:54,660 --> 00:11:58,530
analog multiplexer it has three channel

316
00:11:58,530 --> 00:12:01,980
switching and it's just it fits in the

317
00:12:01,980 --> 00:12:03,540
nice PP mod format so you don't have to

318
00:12:03,540 --> 00:12:07,110
do a lot of worrying and so what the P

319
00:12:07,110 --> 00:12:08,460
model is doing is we need to basically

320
00:12:08,460 --> 00:12:10,200
insert the glitch right so what the

321
00:12:10,200 --> 00:12:12,690
glitch is is you have we have we have

322
00:12:12,690 --> 00:12:14,640
that voltage going into VDD core and we

323
00:12:14,640 --> 00:12:16,500
need to drive it to zero and basically

324
00:12:16,500 --> 00:12:18,090
the multiplexer is perfect for that

325
00:12:18,090 --> 00:12:19,980
because if you have these two inputs and

326
00:12:19,980 --> 00:12:22,800
then you provide the switch it's going

327
00:12:22,800 --> 00:12:25,080
to switch the other one and then that's

328
00:12:25,080 --> 00:12:27,480
exactly what you want for for kind of a

329
00:12:27,480 --> 00:12:28,740
glitch up also there's other ways to do

330
00:12:28,740 --> 00:12:30,000
this too you can use a MOSFET

331
00:12:30,000 --> 00:12:31,740
there's people have used function

332
00:12:31,740 --> 00:12:33,090
generators there's lots of ways to do

333
00:12:33,090 --> 00:12:37,410
the glitch because we are using a multi

334
00:12:37,410 --> 00:12:40,110
analog multiplexer and so the thing to

335
00:12:40,110 --> 00:12:41,940
know about the kits that you got from

336
00:12:41,940 --> 00:12:44,610
the patio is that oh yeah Thank You

337
00:12:44,610 --> 00:12:47,730
Thomas they have so like any tool you

338
00:12:47,730 --> 00:12:49,920
have to make some and in trying to make

339
00:12:49,920 --> 00:12:50,940
the tool there's some design decisions

340
00:12:50,940 --> 00:12:54,120
have to be made so sum of all the

341
00:12:54,120 --> 00:12:56,190
channels are hardwired to ground so you

342
00:12:56,190 --> 00:12:58,020
can only switch between one channel and

343
00:12:58,020 --> 00:12:59,400
ground you know obviously if you get the

344
00:12:59,400 --> 00:13:00,720
multiplex or yourself you can provide

345
00:13:00,720 --> 00:13:03,060
any input to other channels but on that

346
00:13:03,060 --> 00:13:05,340
P mod you provide one channel the other

347
00:13:05,340 --> 00:13:07,200
ones hardwired to ground and then

348
00:13:07,200 --> 00:13:10,380
there's three resistors that are

349
00:13:10,380 --> 00:13:12,330
optional basically if you solder those

350
00:13:12,330 --> 00:13:13,790
resistors on

351
00:13:13,790 --> 00:13:16,850
and the result will go back to the fpga

352
00:13:16,850 --> 00:13:18,470
so sometimes that's not what you want

353
00:13:18,470 --> 00:13:19,730
because if you're especially if you're

354
00:13:19,730 --> 00:13:21,410
doing high voltages you don't want to

355
00:13:21,410 --> 00:13:23,240
put like 5 volts back into your FB Gea

356
00:13:23,240 --> 00:13:26,150
io but if you if you D populate those

357
00:13:26,150 --> 00:13:28,370
resistors it'll just act as like a

358
00:13:28,370 --> 00:13:30,020
bridge I have been meaning to put this

359
00:13:30,020 --> 00:13:33,020
up on the github so you'll just have to

360
00:13:33,020 --> 00:13:35,390
take this audio wall explanation of how

361
00:13:35,390 --> 00:13:38,180
that works the essence is you can find

362
00:13:38,180 --> 00:13:40,520
the full schematics for the P mode on

363
00:13:40,520 --> 00:13:42,290
our github and it will explain you how

364
00:13:42,290 --> 00:13:44,360
to use it and how to connect it and

365
00:13:44,360 --> 00:13:45,140
there are a lot of different

366
00:13:45,140 --> 00:13:47,150
configuration options to make it a bit

367
00:13:47,150 --> 00:13:50,180
more versatile but the basic the basic

368
00:13:50,180 --> 00:13:51,620
circuit is currently on the website that

369
00:13:51,620 --> 00:13:53,420
will just enable you to glitch in a

370
00:13:53,420 --> 00:13:54,860
couple of minutes basically after

371
00:13:54,860 --> 00:13:59,030
soldiering it yeah and then now we have

372
00:13:59,030 --> 00:14:02,810
the power supply this is a nice cheap

373
00:14:02,810 --> 00:14:04,580
power supply configurable via you are

374
00:14:04,580 --> 00:14:07,220
highly recommended we hook it all up

375
00:14:07,220 --> 00:14:09,710
with with a device on their test is

376
00:14:09,710 --> 00:14:11,000
whatever we're trying to test whether

377
00:14:11,000 --> 00:14:13,610
it's a dev board or an actual target we

378
00:14:13,610 --> 00:14:15,470
have to get those signals back so we

379
00:14:15,470 --> 00:14:16,700
need the trigger pin to come back into

380
00:14:16,700 --> 00:14:19,670
the FPGA the success success indicator

381
00:14:19,670 --> 00:14:21,860
or whatever that was it's easy if you do

382
00:14:21,860 --> 00:14:23,330
your own firmware and may be different

383
00:14:23,330 --> 00:14:24,800
if you're trying to act attack a real

384
00:14:24,800 --> 00:14:28,940
device so you need need that that to

385
00:14:28,940 --> 00:14:30,680
come back then you have the multiplexer

386
00:14:30,680 --> 00:14:32,060
coming back for the different voltages

387
00:14:32,060 --> 00:14:34,160
then you have to provide the enable

388
00:14:34,160 --> 00:14:36,530
signals and so yeah so this is it starts

389
00:14:36,530 --> 00:14:38,060
to add up a lot of the practical

390
00:14:38,060 --> 00:14:40,250
problems here which I I know at least

391
00:14:40,250 --> 00:14:41,780
I've had a lot of frustrations with is

392
00:14:41,780 --> 00:14:45,470
that you know you a lot of the wiring it

393
00:14:45,470 --> 00:14:46,850
becomes tricky so like it when it's not

394
00:14:46,850 --> 00:14:48,080
working you just kind of have to go

395
00:14:48,080 --> 00:14:49,400
through each of these wiring that's why

396
00:14:49,400 --> 00:14:51,260
we have that P mod MUX helps cut down

397
00:14:51,260 --> 00:14:53,180
some of the wires but you can totally do

398
00:14:53,180 --> 00:14:55,070
this on a red board it's just that when

399
00:14:55,070 --> 00:14:56,330
there's a problem you now have to go

400
00:14:56,330 --> 00:14:59,300
through each wire and then you have the

401
00:14:59,300 --> 00:15:01,220
power supply and so yeah this is what it

402
00:15:01,220 --> 00:15:03,200
looks like when it's all hooked up in a

403
00:15:03,200 --> 00:15:05,680
big mess of wires or the actual glitcher

404
00:15:05,680 --> 00:15:08,750
again were you seeing these FPGAs this

405
00:15:08,750 --> 00:15:10,550
is super great this is like I said I

406
00:15:10,550 --> 00:15:12,200
really am a big fan of that P mod

407
00:15:12,200 --> 00:15:15,170
connector I previously was not a big fan

408
00:15:15,170 --> 00:15:17,060
of 3d modeling though so I was like pima

409
00:15:17,060 --> 00:15:19,760
connector check make a P mod no problem

410
00:15:19,760 --> 00:15:21,980
put them together I didn't really

411
00:15:21,980 --> 00:15:23,510
consider what happens when you put these

412
00:15:23,510 --> 00:15:25,100
two together because you end up with a

413
00:15:25,100 --> 00:15:27,110
device that looks like that right so you

414
00:15:27,110 --> 00:15:27,900
gotta have this

415
00:15:27,900 --> 00:15:30,900
shaped glitcher so you should do 3d

416
00:15:30,900 --> 00:15:33,750
modeling it's like a thing and I'll

417
00:15:33,750 --> 00:15:35,550
prevent you from making weird l-shaped

418
00:15:35,550 --> 00:15:39,990
glitching devices yeah and so now we're

419
00:15:39,990 --> 00:15:42,630
ready to glitch yes so basically we now

420
00:15:42,630 --> 00:15:44,700
just walk through the theory on how to

421
00:15:44,700 --> 00:15:48,990
how to build a glitter and the ideas if

422
00:15:48,990 --> 00:15:51,779
you want to glitch the the real trick is

423
00:15:51,779 --> 00:15:54,029
to find your glitch parameters you need

424
00:15:54,029 --> 00:15:55,650
to figure out after your tree gave and

425
00:15:55,650 --> 00:15:57,930
which might be oh I turned my xbox on

426
00:15:57,930 --> 00:16:00,420
and for example the Xbox mode chip is a

427
00:16:00,420 --> 00:16:02,250
glitch ur that just tries to glitch the

428
00:16:02,250 --> 00:16:05,160
Xbox CPU and so that would be my trigger

429
00:16:05,160 --> 00:16:07,560
event and then a certain delay after I

430
00:16:07,560 --> 00:16:10,110
turn the device on I want to glitch for

431
00:16:10,110 --> 00:16:11,580
a certain amount of time and finding

432
00:16:11,580 --> 00:16:13,620
these parameters is the real trick so as

433
00:16:13,620 --> 00:16:14,910
you've seen before we have the trigger

434
00:16:14,910 --> 00:16:17,430
event and then we have the delay and the

435
00:16:17,430 --> 00:16:20,130
glitch and the delay we require might be

436
00:16:20,130 --> 00:16:22,770
200 nanoseconds it might be 10

437
00:16:22,770 --> 00:16:25,170
nanoseconds it might be 20 and our

438
00:16:25,170 --> 00:16:27,990
glitch pulse might be very short or very

439
00:16:27,990 --> 00:16:30,300
long and so what we have to do is we

440
00:16:30,300 --> 00:16:32,750
have to write a device that tries to

441
00:16:32,750 --> 00:16:36,089
trice each delay there is and tries each

442
00:16:36,089 --> 00:16:38,370
glitch pulls theirs and then checks for

443
00:16:38,370 --> 00:16:41,970
success and so the problem is if you do

444
00:16:41,970 --> 00:16:44,100
this on fbj and you write your own

445
00:16:44,100 --> 00:16:45,990
software for it it becomes complicated

446
00:16:45,990 --> 00:16:48,720
really really quickly and so we decided

447
00:16:48,720 --> 00:16:50,670
to use something pretty simple for the

448
00:16:50,670 --> 00:16:52,529
host control which is Jupiter notebooks

449
00:16:52,529 --> 00:16:54,630
so we provide a Python API to the

450
00:16:54,630 --> 00:16:57,420
glitcher that's just lets you very

451
00:16:57,420 --> 00:16:59,940
easily automate the glitcher and

452
00:16:59,940 --> 00:17:02,160
implement your own success checks so for

453
00:17:02,160 --> 00:17:03,600
example if you glitch your chip to

454
00:17:03,600 --> 00:17:06,119
re-enable the debugging interfaces you

455
00:17:06,119 --> 00:17:08,160
might want to build a short script that

456
00:17:08,160 --> 00:17:10,380
just checks if JTAG is enabled and

457
00:17:10,380 --> 00:17:12,390
integrating this into a big software is

458
00:17:12,390 --> 00:17:14,010
kind of a pain so we just use two

459
00:17:14,010 --> 00:17:15,929
paternal books that let you write your

460
00:17:15,929 --> 00:17:18,689
own success function in like 30 lines so

461
00:17:18,689 --> 00:17:21,119
for example if we take our glitter for a

462
00:17:21,119 --> 00:17:23,670
chip you're about to see it's just like

463
00:17:23,670 --> 00:17:27,179
20 lines so basically all we do is we

464
00:17:27,179 --> 00:17:29,190
tell the chip hey we want to restart you

465
00:17:29,190 --> 00:17:31,200
for a certain amount of time then we

466
00:17:31,200 --> 00:17:33,120
iterate through all the lace that we

467
00:17:33,120 --> 00:17:36,090
want to try we iterate through all the

468
00:17:36,090 --> 00:17:38,280
pulses or the pulse length the glitch

469
00:17:38,280 --> 00:17:40,320
length we want to try

470
00:17:40,320 --> 00:17:42,720
and then we actually glitch and then all

471
00:17:42,720 --> 00:17:44,159
we have to do is check whether our

472
00:17:44,159 --> 00:17:46,529
glitch was successful and so for example

473
00:17:46,529 --> 00:17:48,809
in this case with our test firmware we

474
00:17:48,809 --> 00:17:51,330
just check whether GPIO was brought up

475
00:17:51,330 --> 00:17:53,100
whether we broke our own test firmware

476
00:17:53,100 --> 00:17:55,559
but if you do this on a real device your

477
00:17:55,559 --> 00:17:57,509
success check can really be anything so

478
00:17:57,509 --> 00:17:59,789
it might be a JTAG check it might be a

479
00:17:59,789 --> 00:18:02,549
check whether oh my xbox is now booting

480
00:18:02,549 --> 00:18:06,029
my own game so whatever and then we just

481
00:18:06,029 --> 00:18:08,190
say oh yeah we were successful and so

482
00:18:08,190 --> 00:18:10,200
how does this look in the wild so if you

483
00:18:10,200 --> 00:18:11,970
built this and you eventually have a

484
00:18:11,970 --> 00:18:15,840
stable glitch range you simply run it

485
00:18:15,840 --> 00:18:17,700
and then you get some nice progress bars

486
00:18:17,700 --> 00:18:20,100
and after a couple of seconds depending

487
00:18:20,100 --> 00:18:22,759
on how stable your glitches you actually

488
00:18:22,759 --> 00:18:26,970
get a success indication so in this case

489
00:18:26,970 --> 00:18:28,769
the glitch takes like I don't know 20

490
00:18:28,769 --> 00:18:30,450
seconds or so to execute we were

491
00:18:30,450 --> 00:18:33,570
successful but yeah this doesn't really

492
00:18:33,570 --> 00:18:35,370
give us anything because all we did was

493
00:18:35,370 --> 00:18:37,440
put up an IO so what's really

494
00:18:37,440 --> 00:18:39,509
interesting is when you start glitching

495
00:18:39,509 --> 00:18:42,299
real targets and so what we did was

496
00:18:42,299 --> 00:18:44,639
basically we looked at the processors we

497
00:18:44,639 --> 00:18:47,220
find in common IOT devices and so our

498
00:18:47,220 --> 00:18:48,990
goal was to you to take a look at the

499
00:18:48,990 --> 00:18:50,639
modern processors that people are using

500
00:18:50,639 --> 00:18:52,830
in new designs and the new chips that

501
00:18:52,830 --> 00:18:56,190
promise new security features and so the

502
00:18:56,190 --> 00:18:58,379
chips we tried and evaluate it as part

503
00:18:58,379 --> 00:19:01,620
of this was the NIF 52 84 0 which is a

504
00:19:01,620 --> 00:19:03,960
Bluetooth chip that you find in a lot of

505
00:19:03,960 --> 00:19:06,720
variables and then the ESP 32 that's

506
00:19:06,720 --> 00:19:08,250
almost in every second

507
00:19:08,250 --> 00:19:11,129
Chinese IOT device basically and then

508
00:19:11,129 --> 00:19:12,899
the sam'l 11 which is my personal

509
00:19:12,899 --> 00:19:14,759
favorite because it's a secure

510
00:19:14,759 --> 00:19:20,179
microcontroller and the stm32 f2 and so

511
00:19:20,179 --> 00:19:23,129
our goal was to configure these all in

512
00:19:23,129 --> 00:19:25,679
real-world conditions and test the chips

513
00:19:25,679 --> 00:19:28,379
in situ and so because we just have 25

514
00:19:28,379 --> 00:19:29,879
minutes we're gonna skip over the boring

515
00:19:29,879 --> 00:19:32,730
chips and go right to the highly secure

516
00:19:32,730 --> 00:19:37,009
microchips ml 11 and this chip is

517
00:19:37,009 --> 00:19:41,100
world-class secure like I tell you it's

518
00:19:41,100 --> 00:19:43,500
the winner of the best contribution to

519
00:19:43,500 --> 00:19:46,379
IOT security award and just if you

520
00:19:46,379 --> 00:19:50,130
search for security on this site it's

521
00:19:50,130 --> 00:19:54,510
57 secured like this is a secure chip

522
00:19:54,510 --> 00:19:58,110
and so if you actually read the

523
00:19:58,110 --> 00:20:00,240
datasheet we talked about the different

524
00:20:00,240 --> 00:20:01,890
power domains earlier and basically we

525
00:20:01,890 --> 00:20:04,169
said oh we just glitch vcore right we go

526
00:20:04,169 --> 00:20:06,419
behind the regulator and the problem is

527
00:20:06,419 --> 00:20:08,039
if you read the datasheet it actually

528
00:20:08,039 --> 00:20:09,840
has a special section oh man we have a

529
00:20:09,840 --> 00:20:12,510
brownout detector on the 1.2 volt line

530
00:20:12,510 --> 00:20:14,850
it's been calibrated in the factory

531
00:20:14,850 --> 00:20:17,160
don't touch this and so I was a bit

532
00:20:17,160 --> 00:20:18,780
scared that we might not be able to

533
00:20:18,780 --> 00:20:20,700
attack this because yeah there's like

534
00:20:20,700 --> 00:20:24,530
this dedicated v core brownout and so

535
00:20:24,530 --> 00:20:28,830
can we glitch it well the real problem

536
00:20:28,830 --> 00:20:30,990
was I started glitching this chip and

537
00:20:30,990 --> 00:20:33,000
then I was pretty sure I messed

538
00:20:33,000 --> 00:20:35,940
something up because I got success after

539
00:20:35,940 --> 00:20:40,080
literally five minutes so I was like oh

540
00:20:40,080 --> 00:20:42,150
did I miss configure the firmware did I

541
00:20:42,150 --> 00:20:45,390
mess something up like I was mind blown

542
00:20:45,390 --> 00:20:48,210
right so what do you do with this

543
00:20:48,210 --> 00:20:51,120
well microchip provides this secure you

544
00:20:51,120 --> 00:20:52,770
at boot loader for the early level and

545
00:20:52,770 --> 00:20:56,429
so we can fully bypass this very very

546
00:20:56,429 --> 00:20:59,730
easily but that for me brought up the

547
00:20:59,730 --> 00:21:03,360
question how easy is this to glitch and

548
00:21:03,360 --> 00:21:05,490
so if you couldn't tell by the dialect

549
00:21:05,490 --> 00:21:08,760
but I'm German and I live in South South

550
00:21:08,760 --> 00:21:11,130
Germany and we are very very cheap and

551
00:21:11,130 --> 00:21:12,900
if we look at the price of glitter like

552
00:21:12,900 --> 00:21:15,120
one glitter is like nine beers at

553
00:21:15,120 --> 00:21:20,070
Oktoberfest that's unacceptable and so

554
00:21:20,070 --> 00:21:22,890
the goal was what if we take the most

555
00:21:22,890 --> 00:21:24,720
secure chip there's from microchip and

556
00:21:24,720 --> 00:21:26,580
the cheapest chip there is from

557
00:21:26,580 --> 00:21:29,669
microchip and we use the cheapest chip

558
00:21:29,669 --> 00:21:31,470
to reach the most secure chip and so

559
00:21:31,470 --> 00:21:33,809
that was how the five dollar glacier was

560
00:21:33,809 --> 00:21:35,700
born and so all you need is an 80 tiny

561
00:21:35,700 --> 00:21:37,919
which cost like I don't know one euro to

562
00:21:37,919 --> 00:21:40,620
one dollar two dollars and the kid that

563
00:21:40,620 --> 00:21:41,940
you actually get for free so it's

564
00:21:41,940 --> 00:21:43,669
actually the two dollar glitter today

565
00:21:43,669 --> 00:21:47,159
and then at the price for one pretzel at

566
00:21:47,159 --> 00:21:52,980
Oktoberfest you can list it so that's

567
00:21:52,980 --> 00:21:54,480
pretty awesome and it just takes like

568
00:21:54,480 --> 00:21:57,659
130 lines of AVR assembler on this coast

569
00:21:57,659 --> 00:22:00,360
amount of beer and then you end up with

570
00:22:00,360 --> 00:22:02,520
a mess of wires on your desk that is

571
00:22:02,520 --> 00:22:05,429
able to fully bypass the security booth

572
00:22:05,429 --> 00:22:10,169
loader for five dollars and so this

573
00:22:10,169 --> 00:22:12,330
brings us to the next ship which is CSM

574
00:22:12,330 --> 00:22:19,559
32 f2 and Josh okay so we last year at

575
00:22:19,559 --> 00:22:22,799
CCC Talk wall that fail we talked about

576
00:22:22,799 --> 00:22:26,220
the stm32 f2 so with the timer meeting

577
00:22:26,220 --> 00:22:27,419
this was gonna be a little quick because

578
00:22:27,419 --> 00:22:29,190
you can go watch the wallet you go to a

579
00:22:29,190 --> 00:22:30,809
wallet ah fail which is also a website

580
00:22:30,809 --> 00:22:34,950
and you can watch that presentation but

581
00:22:34,950 --> 00:22:37,650
there's lots of previous work the stm32

582
00:22:37,650 --> 00:22:39,900
in this case is used in a Bitcoin harder

583
00:22:39,900 --> 00:22:41,250
wallet don't worry if you're triggered

584
00:22:41,250 --> 00:22:42,750
about the word Bitcoin I'm not going to

585
00:22:42,750 --> 00:22:45,059
get into all those details but just know

586
00:22:45,059 --> 00:22:46,770
that people are storing millions of

587
00:22:46,770 --> 00:22:52,679
dollars on stm32f4 the l11 was 57 times

588
00:22:52,679 --> 00:22:54,480
secure if you search security in this

589
00:22:54,480 --> 00:22:56,549
datasheet you don't find anything so

590
00:22:56,549 --> 00:22:58,260
this is obviously the chip to use for

591
00:22:58,260 --> 00:22:59,780
cryptocurrency

592
00:22:59,780 --> 00:23:02,580
now in this case basically that we're

593
00:23:02,580 --> 00:23:04,290
bypassing the read out protection if

594
00:23:04,290 --> 00:23:07,200
read out protection to is set basically

595
00:23:07,200 --> 00:23:09,750
in flash it's got to be this value CC if

596
00:23:09,750 --> 00:23:12,480
it's 0 it has to be this if it's neither

597
00:23:12,480 --> 00:23:15,149
of those two you're in RDP 1 which

598
00:23:15,149 --> 00:23:17,250
sounds if it's that sounds horrible then

599
00:23:17,250 --> 00:23:18,990
you have the right intuition because we

600
00:23:18,990 --> 00:23:20,909
just need to flip one bit and then we

601
00:23:20,909 --> 00:23:23,929
can get a RDP 2 to RDP 1 downgrade and

602
00:23:23,929 --> 00:23:26,580
that that's exactly what we did and so

603
00:23:26,580 --> 00:23:27,670
here

604
00:23:27,670 --> 00:23:29,590
that that values being read out from the

605
00:23:29,590 --> 00:23:32,710
boot ROM and so we do we reset the chip

606
00:23:32,710 --> 00:23:34,540
it goes into the boot ROM the boot run

607
00:23:34,540 --> 00:23:37,000
runs it's going to read this value then

608
00:23:37,000 --> 00:23:39,700
it'll eventually lost user code we are

609
00:23:39,700 --> 00:23:41,500
inserting you know the so there here's

610
00:23:41,500 --> 00:23:43,000
where it's read so that's where we want

611
00:23:43,000 --> 00:23:47,290
to insert that glitch and then if we can

612
00:23:47,290 --> 00:23:49,000
flip that one bit will go into our DP

613
00:23:49,000 --> 00:23:51,370
one and so we've seen variations of this

614
00:23:51,370 --> 00:23:53,020
picture but this is basically that same

615
00:23:53,020 --> 00:23:55,750
set up FPGA the MUX the treasurer

616
00:23:55,750 --> 00:23:58,270
cryptocurrency Hardware wallet and this

617
00:23:58,270 --> 00:23:59,830
is uh you know we're scripting this was

618
00:23:59,830 --> 00:24:01,600
Python so the host is controlling it so

619
00:24:01,600 --> 00:24:05,140
let's see how this works and so this is

620
00:24:05,140 --> 00:24:07,600
me this is us running the thing and so

621
00:24:07,600 --> 00:24:09,130
as it's running it's searching through

622
00:24:09,130 --> 00:24:10,810
that space so Thomas showed that graph

623
00:24:10,810 --> 00:24:13,120
of the of a sliding around that's

624
00:24:13,120 --> 00:24:15,040
exactly what it is the first column

625
00:24:15,040 --> 00:24:18,490
there is delay in clock cycles and then

626
00:24:18,490 --> 00:24:21,130
BAM that we're in right so yeah so this

627
00:24:21,130 --> 00:24:23,410
is uh so now it's downgraded yeah thank

628
00:24:23,410 --> 00:24:31,510
you and yeah so if a chip stores lots of

629
00:24:31,510 --> 00:24:33,280
money then if you do this then you get

630
00:24:33,280 --> 00:24:34,570
the money because that's how the the

631
00:24:34,570 --> 00:24:37,510
crypto see destroyed so well there's

632
00:24:37,510 --> 00:24:39,130
still some exploitation steps that we

633
00:24:39,130 --> 00:24:42,310
have to do we gotta read SRAM do a lot

634
00:24:42,310 --> 00:24:44,290
of that stuff but you can look at wallet

635
00:24:44,290 --> 00:24:47,410
that fail for that we made this glitcher

636
00:24:47,410 --> 00:24:49,420
a little bit elaborate for this I have

637
00:24:49,420 --> 00:24:50,770
some of these boards if you want to try

638
00:24:50,770 --> 00:24:53,200
this socket there's some issues with

639
00:24:53,200 --> 00:24:55,420
them but I again audible instructions I

640
00:24:55,420 --> 00:24:57,460
hope you work it out but we just kind of

641
00:24:57,460 --> 00:25:01,300
automate it into one and yeah so chipped

642
00:25:01,300 --> 00:25:03,970
off al has basically uh they can have a

643
00:25:03,970 --> 00:25:07,150
source it has the schematics for the

644
00:25:07,150 --> 00:25:09,030
team on that you guys have and

645
00:25:09,030 --> 00:25:11,200
everything else that we've open-sourced

646
00:25:11,200 --> 00:25:14,830
is on there so that's the thing and yeah

647
00:25:14,830 --> 00:25:17,680
I think that's any that's so we have

648
00:25:17,680 --> 00:25:19,160
yeah

649
00:25:19,160 --> 00:25:30,530
[Applause]

650
00:25:30,530 --> 00:25:33,150
as always you can find them in the patio

651
00:25:33,150 --> 00:25:36,440
if you have additional questions

652
00:25:37,250 --> 00:25:40,799
[Music]

653
00:25:45,040 --> 00:25:47,100
you

