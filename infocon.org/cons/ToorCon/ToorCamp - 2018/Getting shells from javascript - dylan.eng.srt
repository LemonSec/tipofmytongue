1
00:00:01,290 --> 00:00:04,510
all right we've got Dylan back to

2
00:00:03,310 --> 00:00:05,710
anything us on the stage again

3
00:00:04,510 --> 00:00:07,390
talking about getting shells from

4
00:00:05,710 --> 00:00:17,129
JavaScript so please welcome them to the

5
00:00:07,390 --> 00:00:17,129
tour camp stage thanks for the kind

6
00:00:19,140 --> 00:00:29,860
introduction and I didn't quite nail the

7
00:00:27,130 --> 00:00:32,769
motif on some of my talks so this is a

8
00:00:29,860 --> 00:00:35,500
little on the technical side and I'm

9
00:00:32,770 --> 00:00:39,280
gonna try to do my best to decode a lot

10
00:00:35,500 --> 00:00:43,810
of that but there's no like creme brulee

11
00:00:39,280 --> 00:00:47,200
involved to this stock so that being

12
00:00:43,810 --> 00:00:50,200
said I'll go ahead and get into it

13
00:00:47,200 --> 00:00:52,809
basically the premise of this talk it is

14
00:00:50,200 --> 00:00:54,430
kind of just like highlighting some

15
00:00:52,809 --> 00:00:56,050
stuff that's already kind of I think

16
00:00:54,430 --> 00:00:59,230
well known by the security community but

17
00:00:56,050 --> 00:01:00,489
I the way I kind of tie it together and

18
00:00:59,230 --> 00:01:02,739
some of the bug bounties that I've

19
00:01:00,489 --> 00:01:04,780
submitted to I think can kind of paint

20
00:01:02,739 --> 00:01:07,359
some of this in a new light

21
00:01:04,780 --> 00:01:08,889
so vocals or a lot of people may be

22
00:01:07,359 --> 00:01:11,530
familiar with like the beef browser

23
00:01:08,889 --> 00:01:14,109
exploitation framework that that takes

24
00:01:11,530 --> 00:01:16,329
basically cross-site scripting to like

25
00:01:14,109 --> 00:01:18,639
the next level look like getting an

26
00:01:16,329 --> 00:01:21,369
implant and like surveying internal

27
00:01:18,639 --> 00:01:23,529
networks a little bit really my intent

28
00:01:21,369 --> 00:01:25,840
is to is to kind of push that one step

29
00:01:23,529 --> 00:01:29,679
further of like basically highlighting

30
00:01:25,840 --> 00:01:32,099
how crazy the idea of like a web browser

31
00:01:29,679 --> 00:01:34,749
is in the first place like let's go to

32
00:01:32,099 --> 00:01:36,759
untrusted websites and take code from

33
00:01:34,749 --> 00:01:38,589
them and run it in a sandbox way and

34
00:01:36,759 --> 00:01:40,599
then allow that code to make arbitrary

35
00:01:38,590 --> 00:01:43,869
Network requests on every single network

36
00:01:40,599 --> 00:01:46,359
that I'm sitting on like if you laid

37
00:01:43,869 --> 00:01:49,179
that out to somebody in the 80s that

38
00:01:46,359 --> 00:01:51,490
would sound insane but this is kind of

39
00:01:49,179 --> 00:01:53,889
the way we've rolled with it and we're

40
00:01:51,490 --> 00:01:56,829
kind of that at that point now and I

41
00:01:53,889 --> 00:01:59,109
just want to show a couple of ways that

42
00:01:56,829 --> 00:02:01,238
you can take advantage of specifically

43
00:01:59,109 --> 00:02:03,548
that of sitting on privileged networks

44
00:02:01,239 --> 00:02:04,959
and going to the Internet and running

45
00:02:03,549 --> 00:02:07,509
code and then being able to effect a

46
00:02:04,959 --> 00:02:09,100
privileged networking you're on but to

47
00:02:07,509 --> 00:02:12,310
get there I need to go through some kind

48
00:02:09,100 --> 00:02:14,379
of dry web ABI stuff so hopefully

49
00:02:12,310 --> 00:02:16,300
everybody can bear with me for that

50
00:02:14,379 --> 00:02:17,649
so there's there's kind of like this

51
00:02:16,300 --> 00:02:19,930
this fallacy I'm sure everybody in the

52
00:02:17,650 --> 00:02:22,150
room know this is like if we have like a

53
00:02:19,930 --> 00:02:24,250
really hardened outside then like we can

54
00:02:22,150 --> 00:02:26,379
we can have the inside like really soft

55
00:02:24,250 --> 00:02:28,599
and gooey it's like a company can it's

56
00:02:26,379 --> 00:02:31,268
been a lot of time like hardening the

57
00:02:28,599 --> 00:02:32,798
exterior but like all of the interior

58
00:02:31,269 --> 00:02:34,870
assets maybe they'll leave that a little

59
00:02:32,799 --> 00:02:37,110
more soft and I say it's a fallacy

60
00:02:34,870 --> 00:02:39,340
because like the reality is like

61
00:02:37,110 --> 00:02:44,019
whatever your mechanism is for breaking

62
00:02:39,340 --> 00:02:45,970
in whether it's fishing or through a you

63
00:02:44,019 --> 00:02:48,790
know browser exploit or USB stick in the

64
00:02:45,970 --> 00:02:51,459
parking lot it's it's relatively easy to

65
00:02:48,790 --> 00:02:53,950
do and really hard to secure that out

66
00:02:51,459 --> 00:02:55,620
external perimeter and if your inside is

67
00:02:53,950 --> 00:02:59,319
gooey then you can just move around

68
00:02:55,620 --> 00:03:00,910
really easily and and this talk is

69
00:02:59,319 --> 00:03:03,129
basically just showing another way of

70
00:03:00,910 --> 00:03:04,840
getting that first implant that doesn't

71
00:03:03,129 --> 00:03:08,319
involve phishing or USB stick in the

72
00:03:04,840 --> 00:03:11,200
parking lot so like I I had this idea in

73
00:03:08,319 --> 00:03:13,690
my head when I was like first entering

74
00:03:11,200 --> 00:03:15,488
this industry of like how much damage

75
00:03:13,690 --> 00:03:18,819
can really be done if you click a link

76
00:03:15,489 --> 00:03:21,940
like most people don't have browser

77
00:03:18,819 --> 00:03:24,429
exploits most of the malicious links

78
00:03:21,940 --> 00:03:27,519
that are sent around probably don't have

79
00:03:24,430 --> 00:03:29,859
a zero-day in chrome flash is on its way

80
00:03:27,519 --> 00:03:31,030
out like they've are I think they've

81
00:03:29,859 --> 00:03:32,739
already announced the end-of-life date

82
00:03:31,030 --> 00:03:34,780
they've there's tons and tons of

83
00:03:32,739 --> 00:03:36,519
exploits still left in flash but chrome

84
00:03:34,780 --> 00:03:38,920
disables it by default so that's that's

85
00:03:36,519 --> 00:03:40,329
not really a vector as much anymore and

86
00:03:38,920 --> 00:03:41,980
and folk in general folks are worried

87
00:03:40,329 --> 00:03:43,930
about downloading files so if you send

88
00:03:41,980 --> 00:03:47,349
them to a malicious link in it and it

89
00:03:43,930 --> 00:03:48,639
forces a Exe download I think like most

90
00:03:47,349 --> 00:03:50,918
people at this point know not to run

91
00:03:48,639 --> 00:03:52,569
that so I you know that was a question

92
00:03:50,919 --> 00:03:54,190
that I had kind of like sat on for a

93
00:03:52,569 --> 00:03:55,388
while like you click a link but like so

94
00:03:54,190 --> 00:03:59,200
white like how much damage to could be

95
00:03:55,389 --> 00:04:03,630
done so you know to get into the weeds

96
00:03:59,200 --> 00:04:05,589
here I have to sort of in-depth go over

97
00:04:03,630 --> 00:04:07,930
cross-site request forgery and

98
00:04:05,590 --> 00:04:10,989
cross-site scripting and then it's gonna

99
00:04:07,930 --> 00:04:11,680
be dry for like the next 3-4 slides but

100
00:04:10,989 --> 00:04:14,200
then we'll get to the more interesting

101
00:04:11,680 --> 00:04:16,180
stuff after after we get through it

102
00:04:14,200 --> 00:04:18,668
so hopefully every can bear with me for

103
00:04:16,180 --> 00:04:20,260
that basically at a high level the same

104
00:04:18,668 --> 00:04:23,560
origin policy is like the fundamental

105
00:04:20,260 --> 00:04:26,680
browser security mechanism like you you

106
00:04:23,560 --> 00:04:27,670
visit facebook.com and you want to be

107
00:04:26,680 --> 00:04:30,970
confident that face

108
00:04:27,670 --> 00:04:33,250
Oh calm cannot steal any data from

109
00:04:30,970 --> 00:04:36,910
Google and it cannot affect any change

110
00:04:33,250 --> 00:04:38,770
on your Google account so we have the

111
00:04:36,910 --> 00:04:44,530
sandbox that separates the two origins

112
00:04:38,770 --> 00:04:47,229
and the the rules which allow you to get

113
00:04:44,530 --> 00:04:49,840
data are dictated by the same origin

114
00:04:47,230 --> 00:04:52,780
policy and it's sort of self describing

115
00:04:49,840 --> 00:04:54,369
it limits you to only be able to do

116
00:04:52,780 --> 00:04:55,929
those within the origin that you're on

117
00:04:54,370 --> 00:04:57,730
with a couple of exceptions and those

118
00:04:55,930 --> 00:05:02,610
exceptions are kind of interesting we'll

119
00:04:57,730 --> 00:05:02,610
talk about some of them so basically

120
00:05:02,940 --> 00:05:07,870
take this with a grain of salt this is

121
00:05:05,560 --> 00:05:09,550
the way the rules should be in a brazier

122
00:05:07,870 --> 00:05:10,660
browsers were often break this when they

123
00:05:09,550 --> 00:05:13,090
come out with new features and stuff

124
00:05:10,660 --> 00:05:15,580
like that but fundamentally there are

125
00:05:13,090 --> 00:05:18,429
two different types of HTTP requests in

126
00:05:15,580 --> 00:05:20,409
a browser a home there's the simple kind

127
00:05:18,430 --> 00:05:21,970
and then there's the non simple kind and

128
00:05:20,410 --> 00:05:25,240
I didn't define that terminology that

129
00:05:21,970 --> 00:05:29,080
was defined by specification a simple

130
00:05:25,240 --> 00:05:31,300
request is one that is either yet post

131
00:05:29,080 --> 00:05:34,599
or head and any of the content types you

132
00:05:31,300 --> 00:05:36,160
see on the left and you can't have any

133
00:05:34,600 --> 00:05:38,260
custom headers it has to be a very

134
00:05:36,160 --> 00:05:40,210
vanilla request one that you might get

135
00:05:38,260 --> 00:05:41,950
from a web form a typical request our

136
00:05:40,210 --> 00:05:44,530
website makes would fall into a simple

137
00:05:41,950 --> 00:05:46,150
request a non simple request is the type

138
00:05:44,530 --> 00:05:48,130
of request you start seeing in single

139
00:05:46,150 --> 00:05:50,289
page apps and more complicated websites

140
00:05:48,130 --> 00:05:52,630
where maybe they set the content type to

141
00:05:50,290 --> 00:05:55,060
application JSON or maybe they set a

142
00:05:52,630 --> 00:05:56,770
custom header maybe they use a method

143
00:05:55,060 --> 00:05:58,390
that's not yet post and head maybe

144
00:05:56,770 --> 00:06:02,229
they're using like a rest framework and

145
00:05:58,390 --> 00:06:03,880
so they use put and delete those types

146
00:06:02,230 --> 00:06:06,280
of requests are defined as non simple

147
00:06:03,880 --> 00:06:07,510
and the difference between those two

148
00:06:06,280 --> 00:06:12,520
with regards to the same-origin policy

149
00:06:07,510 --> 00:06:14,200
is a simple request from Facebook if you

150
00:06:12,520 --> 00:06:16,719
visit facebook.com and they send you

151
00:06:14,200 --> 00:06:19,000
JavaScript that JavaScript can force

152
00:06:16,720 --> 00:06:21,460
your browser to make a request to Google

153
00:06:19,000 --> 00:06:23,260
if it's simple and that request is

154
00:06:21,460 --> 00:06:24,549
credentialed it'll include your

155
00:06:23,260 --> 00:06:27,940
credential if you're currently logged

156
00:06:24,550 --> 00:06:28,900
into Google which doesn't sound great

157
00:06:27,940 --> 00:06:31,690
but that's just the way we've

158
00:06:28,900 --> 00:06:34,810
architected the Internet and non simple

159
00:06:31,690 --> 00:06:35,920
requests require some validation ahead

160
00:06:34,810 --> 00:06:38,409
of time to make sure that you're

161
00:06:35,920 --> 00:06:41,679
actually allowed to make that request so

162
00:06:38,409 --> 00:06:44,259
a request is made ahead of time by the

163
00:06:41,679 --> 00:06:46,779
browser under the hood with a method

164
00:06:44,259 --> 00:06:48,189
called options that basically goes to

165
00:06:46,779 --> 00:06:49,659
the website in question and says am I

166
00:06:48,189 --> 00:06:51,699
allowed to make this request and then

167
00:06:49,659 --> 00:06:52,989
the server responds either yes or no or

168
00:06:51,699 --> 00:06:54,610
nothing at all and if it doesn't

169
00:06:52,989 --> 00:06:58,179
explicitly say yes then that request

170
00:06:54,610 --> 00:06:59,979
can't be made so these kind of dictate

171
00:06:58,179 --> 00:07:03,929
the rules which allow you to make

172
00:06:59,979 --> 00:07:06,938
requests from one origin to another and

173
00:07:03,929 --> 00:07:08,859
so this is the complicated flow the

174
00:07:06,939 --> 00:07:10,809
preflighted flow first you want to make

175
00:07:08,860 --> 00:07:13,569
a request you ask the server permission

176
00:07:10,809 --> 00:07:16,239
do I have permission and then the server

177
00:07:13,569 --> 00:07:18,639
responds back yes you have permission to

178
00:07:16,239 --> 00:07:21,878
make a request with these methods to

179
00:07:18,639 --> 00:07:23,829
this origin with credentials or without

180
00:07:21,879 --> 00:07:26,079
credentials and then the browser goes

181
00:07:23,829 --> 00:07:27,729
ahead and makes the request that seems

182
00:07:26,079 --> 00:07:30,159
like the flow that all requests should

183
00:07:27,729 --> 00:07:34,239
follow but there's kind of this caveat

184
00:07:30,159 --> 00:07:36,009
of an older time where you can make

185
00:07:34,239 --> 00:07:37,869
simple requests without having gasps

186
00:07:36,009 --> 00:07:39,879
permission Facebook can force you to

187
00:07:37,869 --> 00:07:43,990
make a request to Google credential

188
00:07:39,879 --> 00:07:45,490
request on your behalf and so that's

189
00:07:43,990 --> 00:07:49,179
that's what that looks like it's just an

190
00:07:45,490 --> 00:07:51,879
immediate request and then the server

191
00:07:49,179 --> 00:07:55,359
responds at that point allowing your

192
00:07:51,879 --> 00:07:57,039
browser either to view the content of

193
00:07:55,360 --> 00:07:58,629
that response or not to view the content

194
00:07:57,039 --> 00:08:00,938
of the response so you're allowed to

195
00:07:58,629 --> 00:08:02,919
make the request but then the server can

196
00:08:00,939 --> 00:08:04,289
set some rules allow around whether or

197
00:08:02,919 --> 00:08:06,669
not the JavaScript can read the response

198
00:08:04,289 --> 00:08:08,378
and like I mentioned before this is kind

199
00:08:06,669 --> 00:08:10,808
of super dry but it'll get more

200
00:08:08,379 --> 00:08:13,529
interesting in a minute so this is kind

201
00:08:10,809 --> 00:08:16,509
of like the traditional way that you'll

202
00:08:13,529 --> 00:08:22,149
imagine cross-site request forgery

203
00:08:16,509 --> 00:08:24,069
working you visit evil calm evil calm

204
00:08:22,149 --> 00:08:25,659
can then force you to send credential

205
00:08:24,069 --> 00:08:27,489
requests to Google and if there's a

206
00:08:25,659 --> 00:08:30,879
state changing operation that Google has

207
00:08:27,489 --> 00:08:32,610
available they can potentially force you

208
00:08:30,879 --> 00:08:35,199
to change State on your Google account

209
00:08:32,610 --> 00:08:37,149
which is it's crazy it's insecure by

210
00:08:35,198 --> 00:08:41,458
default and we have to engineer these

211
00:08:37,149 --> 00:08:43,808
really wacky solutions to make that

212
00:08:41,458 --> 00:08:46,959
harder to do and I'll get into that a

213
00:08:43,808 --> 00:08:50,110
little bit basically the way we've fixed

214
00:08:46,959 --> 00:08:52,239
that is outside of the browser we've

215
00:08:50,110 --> 00:08:54,339
hacked this artificial pre-flight

216
00:08:52,240 --> 00:08:56,770
top of all of our requests that

217
00:08:54,339 --> 00:08:59,140
basically say before you make this

218
00:08:56,770 --> 00:09:01,810
request make another request that

219
00:08:59,140 --> 00:09:04,149
fetches a token from Google and then on

220
00:09:01,810 --> 00:09:05,560
the state changing request include that

221
00:09:04,149 --> 00:09:07,270
token to prove that you've been able to

222
00:09:05,560 --> 00:09:10,180
successfully read this response of a

223
00:09:07,270 --> 00:09:12,699
previous simple request and that whole

224
00:09:10,180 --> 00:09:16,479
flow sounds crazy insecure by default

225
00:09:12,700 --> 00:09:17,830
and stupid because it is but this is

226
00:09:16,480 --> 00:09:20,980
kind of just the way we've architected

227
00:09:17,830 --> 00:09:23,230
the internet so like the conventional

228
00:09:20,980 --> 00:09:25,080
way of thinking about cross-site request

229
00:09:23,230 --> 00:09:28,240
forgery is like it's an attack on a user

230
00:09:25,080 --> 00:09:30,820
I can force a user to do a staging

231
00:09:28,240 --> 00:09:32,740
attack or to do a sync changing action

232
00:09:30,820 --> 00:09:34,930
on their account if they're logged into

233
00:09:32,740 --> 00:09:37,089
Facebook and Facebook doesn't implement

234
00:09:34,930 --> 00:09:39,219
this wacky preflighting thing into their

235
00:09:37,089 --> 00:09:40,930
application I can force them to change

236
00:09:39,220 --> 00:09:41,560
their status or I can force them to add

237
00:09:40,930 --> 00:09:43,390
me as a friend

238
00:09:41,560 --> 00:09:44,680
I can't view the response from that

239
00:09:43,390 --> 00:09:46,270
because Facebook is never gonna grant me

240
00:09:44,680 --> 00:09:48,430
permission to view the data that comes

241
00:09:46,270 --> 00:09:51,399
back but if they don't implement all

242
00:09:48,430 --> 00:09:52,779
that weird token stuff then I can I can

243
00:09:51,399 --> 00:09:55,540
do things on their behalf if they visit

244
00:09:52,779 --> 00:09:56,320
my website that's the classical way of

245
00:09:55,540 --> 00:09:58,449
thinking about cross-site request

246
00:09:56,320 --> 00:10:01,510
forgery and it is by far the most

247
00:09:58,450 --> 00:10:02,880
convoluted complicated web attack that I

248
00:10:01,510 --> 00:10:05,709
know of

249
00:10:02,880 --> 00:10:07,510
just the way we built this and the

250
00:10:05,709 --> 00:10:09,939
reason it's insecure by default and it's

251
00:10:07,510 --> 00:10:11,680
not intuitive and I have to explain all

252
00:10:09,940 --> 00:10:15,600
this in really boring way for people to

253
00:10:11,680 --> 00:10:18,939
understand it it kind of just sucks

254
00:10:15,600 --> 00:10:20,079
but really what I want to focus on on

255
00:10:18,940 --> 00:10:22,959
this talk is its kind of what I

256
00:10:20,079 --> 00:10:25,660
highlighted a little bit earlier you

257
00:10:22,959 --> 00:10:28,209
visit a website on the Internet but your

258
00:10:25,660 --> 00:10:28,959
web browser it sits on a lot of

259
00:10:28,209 --> 00:10:31,599
different networks

260
00:10:28,959 --> 00:10:33,489
it sits on localhost it sits on your

261
00:10:31,600 --> 00:10:35,230
corporate network right and if you're

262
00:10:33,490 --> 00:10:38,230
not Google and you're not running a

263
00:10:35,230 --> 00:10:41,740
weird beyond Corp situation your browser

264
00:10:38,230 --> 00:10:46,779
can talk to your co-workers so you may

265
00:10:41,740 --> 00:10:49,360
visit evil calm and evil calm then has

266
00:10:46,779 --> 00:10:52,000
the ability to make requests to your

267
00:10:49,360 --> 00:10:56,589
coworker or to an internal server and

268
00:10:52,000 --> 00:11:00,370
that's pretty scary and so like that's

269
00:10:56,589 --> 00:11:02,050
that's kind of the way I am trying to

270
00:11:00,370 --> 00:11:04,180
push people to think about cross-site

271
00:11:02,050 --> 00:11:05,680
request forgery that it's not just an

272
00:11:04,180 --> 00:11:07,540
attack on users

273
00:11:05,680 --> 00:11:09,729
it can also be an attack on your

274
00:11:07,540 --> 00:11:13,029
infrastructure but if you visit a link

275
00:11:09,730 --> 00:11:15,720
and that link has malicious JavaScript

276
00:11:13,029 --> 00:11:18,040
that JavaScript can make arbitrary

277
00:11:15,720 --> 00:11:20,140
requests to your internal network and

278
00:11:18,040 --> 00:11:24,339
that can be really scary and I'll give

279
00:11:20,140 --> 00:11:28,750
some examples what makes this worse is

280
00:11:24,339 --> 00:11:33,130
recently browsers implemented this like

281
00:11:28,750 --> 00:11:34,990
peer-to-peer way for two browsers to

282
00:11:33,130 --> 00:11:36,970
talk to one each other without a server

283
00:11:34,990 --> 00:11:38,500
involved and I am NOT a network engineer

284
00:11:36,970 --> 00:11:40,240
and I'm not gonna pretend to know all

285
00:11:38,500 --> 00:11:42,730
the nuances of how or why this works the

286
00:11:40,240 --> 00:11:45,670
way it does but one byproduct of it is

287
00:11:42,730 --> 00:11:48,220
it exposes your internal IP address to

288
00:11:45,670 --> 00:11:51,819
any website so you go to a random

289
00:11:48,220 --> 00:11:54,490
website that website has the ability to

290
00:11:51,820 --> 00:11:56,820
pull the IP address of your local

291
00:11:54,490 --> 00:11:59,500
network not just your public IP address

292
00:11:56,820 --> 00:12:01,300
and from that information they can then

293
00:11:59,500 --> 00:12:04,060
guess what IP addresses your coworkers

294
00:12:01,300 --> 00:12:07,390
are guess what IP address is servers on

295
00:12:04,060 --> 00:12:09,040
your infrastructure are and that's

296
00:12:07,390 --> 00:12:10,959
that's just the way it is and different

297
00:12:09,040 --> 00:12:13,449
browsers do this differently some

298
00:12:10,959 --> 00:12:15,130
browsers will give like one internal IP

299
00:12:13,450 --> 00:12:16,540
address other browsers will give every

300
00:12:15,130 --> 00:12:18,459
single internal IP address that you're

301
00:12:16,540 --> 00:12:20,620
sitting on which can include the IP

302
00:12:18,459 --> 00:12:24,189
address of the network if you're on a

303
00:12:20,620 --> 00:12:28,200
VPN I think Firefox usually gives a lot

304
00:12:24,190 --> 00:12:31,720
more information and that kind of sucks

305
00:12:28,200 --> 00:12:34,450
and so you know if folks are familiar

306
00:12:31,720 --> 00:12:35,980
with Metasploit it's it's a malware

307
00:12:34,450 --> 00:12:40,180
framework and it's an archive of

308
00:12:35,980 --> 00:12:43,750
exploits and there is a section of

309
00:12:40,180 --> 00:12:46,060
Metasploit of HTTP exploits after you've

310
00:12:43,750 --> 00:12:48,160
compromised a host usually this is when

311
00:12:46,060 --> 00:12:49,689
it's it's it's used you compromised a

312
00:12:48,160 --> 00:12:51,910
host and then you want to move to other

313
00:12:49,690 --> 00:12:54,700
hosts within the environment these are

314
00:12:51,910 --> 00:12:57,339
all the HTTP exploits that are available

315
00:12:54,700 --> 00:12:59,370
like basically if an internal host is

316
00:12:57,339 --> 00:13:02,350
running jenkins or something like that

317
00:12:59,370 --> 00:13:04,660
it'll fall into the HTTP modules and

318
00:13:02,350 --> 00:13:07,839
Metasploit and if you compromised one

319
00:13:04,660 --> 00:13:09,670
host and your co-workers running jenkins

320
00:13:07,839 --> 00:13:12,399
you can move from your host to their

321
00:13:09,670 --> 00:13:13,779
host with this HTTP exploit but what was

322
00:13:12,399 --> 00:13:17,500
interesting is when I went through this

323
00:13:13,779 --> 00:13:19,310
list of exploits not only like so it's a

324
00:13:17,500 --> 00:13:23,779
big list of remote code execution

325
00:13:19,310 --> 00:13:25,250
/ ACP but the vast majority of these had

326
00:13:23,779 --> 00:13:27,200
no built-in protection against

327
00:13:25,250 --> 00:13:28,910
cross-site request forgery which means

328
00:13:27,200 --> 00:13:30,290
like you don't just have to think of it

329
00:13:28,910 --> 00:13:32,270
as a means of like I've already

330
00:13:30,290 --> 00:13:33,829
compromised a host and now I'm going to

331
00:13:32,270 --> 00:13:36,500
move laterally from that host to another

332
00:13:33,830 --> 00:13:38,810
host instead you have to think of this

333
00:13:36,500 --> 00:13:40,910
as what if I just visit a malicious web

334
00:13:38,810 --> 00:13:43,910
page and then they get information about

335
00:13:40,910 --> 00:13:45,890
my internal subnet through WebRTC and

336
00:13:43,910 --> 00:13:48,829
now all of a sudden they can start

337
00:13:45,890 --> 00:13:51,020
slamming my internal network with all of

338
00:13:48,830 --> 00:13:57,080
these cross-origin requests because the

339
00:13:51,020 --> 00:13:58,460
browser allows it and their remote code

340
00:13:57,080 --> 00:14:02,450
execution x' that are all of a sudden

341
00:13:58,460 --> 00:14:04,400
phoning home to the attacker so some

342
00:14:02,450 --> 00:14:08,180
some big ones I threw up on here

343
00:14:04,400 --> 00:14:10,670
Jenkins JBoss struts PHP myadmin there

344
00:14:08,180 --> 00:14:13,300
the list is really really long but these

345
00:14:10,670 --> 00:14:15,349
are all HTTP exploits that are also

346
00:14:13,300 --> 00:14:17,959
vulnerable to cross-site request forgery

347
00:14:15,350 --> 00:14:22,760
and I'll caveat that by saying Jenkins

348
00:14:17,960 --> 00:14:23,900
has a feature that you can turn on to

349
00:14:22,760 --> 00:14:27,319
protect against cross-site request

350
00:14:23,900 --> 00:14:30,890
forgery but you can also turn that

351
00:14:27,320 --> 00:14:32,600
option off and again if you're dealing

352
00:14:30,890 --> 00:14:34,610
with a large company and law of large

353
00:14:32,600 --> 00:14:37,550
numbers and the attacker is literally

354
00:14:34,610 --> 00:14:38,570
just sweeping your entire subnet there's

355
00:14:37,550 --> 00:14:40,189
a good chance at least one personal

356
00:14:38,570 --> 00:14:44,330
hobby turned on or to have the feature

357
00:14:40,190 --> 00:14:48,460
turned off I should say so at a high

358
00:14:44,330 --> 00:14:50,930
level overview a user clicks a link the

359
00:14:48,460 --> 00:14:53,990
malicious web page loads JavaScript on

360
00:14:50,930 --> 00:14:55,489
the page it obtains that user's internal

361
00:14:53,990 --> 00:14:57,770
IP address even though they've clicked a

362
00:14:55,490 --> 00:14:59,390
link to a website on the Internet that

363
00:14:57,770 --> 00:15:01,010
page can now get information about the

364
00:14:59,390 --> 00:15:03,949
internal subnet handed to them by the

365
00:15:01,010 --> 00:15:06,050
browser and now they can just sweep the

366
00:15:03,950 --> 00:15:09,140
entire internal subnet with whatever

367
00:15:06,050 --> 00:15:11,030
exploit payloads they want maybe pulled

368
00:15:09,140 --> 00:15:12,650
out of the Metasploit library or maybe

369
00:15:11,030 --> 00:15:14,510
exploits that people haven't found yet

370
00:15:12,650 --> 00:15:15,740
and I'm going to show how easy those are

371
00:15:14,510 --> 00:15:19,939
to find on some of these internal assets

372
00:15:15,740 --> 00:15:21,110
in a bit but basically you know you just

373
00:15:19,940 --> 00:15:23,060
clicked a link and then all of a sudden

374
00:15:21,110 --> 00:15:26,060
your coworker your internal servers your

375
00:15:23,060 --> 00:15:28,729
printers they're all owned and phoning

376
00:15:26,060 --> 00:15:31,609
home even though like there was never a

377
00:15:28,730 --> 00:15:32,740
browser exploit that the initial victim

378
00:15:31,610 --> 00:15:35,080
wasn't actually

379
00:15:32,740 --> 00:15:38,080
compromised well they sort of were but

380
00:15:35,080 --> 00:15:40,240
they're no shell command was ever ran on

381
00:15:38,080 --> 00:15:44,380
their host no malware implant was ever

382
00:15:40,240 --> 00:15:47,110
installed on their on their computer and

383
00:15:44,380 --> 00:15:49,210
so like how long that takes well it took

384
00:15:47,110 --> 00:15:54,250
me about 30 seconds with a really

385
00:15:49,210 --> 00:15:55,660
rudimentary try to sweep a slash 24 so

386
00:15:54,250 --> 00:15:58,150
here you can see my internal IP address

387
00:15:55,660 --> 00:16:00,850
on the bottom there and it took a

388
00:15:58,150 --> 00:16:02,670
particular exploit that I built out for

389
00:16:00,850 --> 00:16:06,310
one of the ones that I showed previously

390
00:16:02,670 --> 00:16:10,000
slammed in and star slash 24 all 255

391
00:16:06,310 --> 00:16:11,500
hosts and did it in about 30 seconds so

392
00:16:10,000 --> 00:16:13,300
it could be pretty quick and I think

393
00:16:11,500 --> 00:16:15,880
this can actually be made faster with

394
00:16:13,300 --> 00:16:20,520
web workers and other hacks so it could

395
00:16:15,880 --> 00:16:22,660
potentially be even faster than that so

396
00:16:20,520 --> 00:16:24,400
so far I've talked about a relatively

397
00:16:22,660 --> 00:16:26,260
blind way of doing this somebody clicks

398
00:16:24,400 --> 00:16:29,199
a link and then you sort of just spray

399
00:16:26,260 --> 00:16:33,730
and pray but there's a way to do this a

400
00:16:29,200 --> 00:16:35,770
lot more targeted and I think recon in

401
00:16:33,730 --> 00:16:37,240
general has sort of become a lot more

402
00:16:35,770 --> 00:16:39,699
sophisticated in the last couple of

403
00:16:37,240 --> 00:16:42,690
years a means to figure out what

404
00:16:39,700 --> 00:16:45,160
internal hosts are running at a company

405
00:16:42,690 --> 00:16:47,530
has just become really really easy to do

406
00:16:45,160 --> 00:16:50,589
and that's through a number of different

407
00:16:47,530 --> 00:16:51,280
means you could crawl through github and

408
00:16:50,590 --> 00:16:54,450
look through their open source

409
00:16:51,280 --> 00:16:56,530
repositories go through all of their old

410
00:16:54,450 --> 00:16:58,810
commits and just see references to

411
00:16:56,530 --> 00:17:01,449
internal hosts I've used truffle hog to

412
00:16:58,810 --> 00:17:04,510
do that before you could view

413
00:17:01,450 --> 00:17:06,760
certificate transparency logs which is a

414
00:17:04,510 --> 00:17:08,859
log of every public certificate issued

415
00:17:06,760 --> 00:17:11,020
by a certificate authority so if they

416
00:17:08,859 --> 00:17:12,458
have TLS and their internal hosts you

417
00:17:11,020 --> 00:17:15,520
can figure out what their internal hosts

418
00:17:12,459 --> 00:17:18,160
are by this public log you could search

419
00:17:15,520 --> 00:17:20,470
virustotal basically if you upload any

420
00:17:18,160 --> 00:17:21,790
file to virus total first it'll parse

421
00:17:20,470 --> 00:17:25,420
out all the links and then make them

422
00:17:21,790 --> 00:17:27,609
available to everyone you could do good

423
00:17:25,420 --> 00:17:28,960
old-fashioned Google Dorking you could

424
00:17:27,609 --> 00:17:31,330
do good old-fashioned brute forcing with

425
00:17:28,960 --> 00:17:33,190
tools like fierce you can use passive

426
00:17:31,330 --> 00:17:34,780
DNS there's companies with DNS probes

427
00:17:33,190 --> 00:17:37,150
that'll just watch everything fly past

428
00:17:34,780 --> 00:17:39,280
it and it'll make every host that it

429
00:17:37,150 --> 00:17:41,770
sees available to anyone who asks for it

430
00:17:39,280 --> 00:17:43,420
long story short it's really really easy

431
00:17:41,770 --> 00:17:45,100
to get a list of every internal host

432
00:17:43,420 --> 00:17:47,350
name

433
00:17:45,100 --> 00:17:49,059
I've done this with a company that I was

434
00:17:47,350 --> 00:17:51,039
supposed to blur out but then forgot to

435
00:17:49,059 --> 00:17:55,330
so pretend that you can't see which

436
00:17:51,039 --> 00:17:57,820
company that is and basically you can

437
00:17:55,330 --> 00:18:00,850
see I was able to find you know 48

438
00:17:57,820 --> 00:18:03,250
subdomains that were or sorry 48

439
00:18:00,850 --> 00:18:05,530
yeah set subdomains of the company that

440
00:18:03,250 --> 00:18:08,380
were definitely internal subdomains it

441
00:18:05,530 --> 00:18:10,840
was using their internal schema and then

442
00:18:08,380 --> 00:18:13,110
I was able to find 97 that were

443
00:18:10,840 --> 00:18:15,309
partially public and partially internal

444
00:18:13,110 --> 00:18:17,590
it's really really easy to get the

445
00:18:15,309 --> 00:18:20,559
internal topology you have a network

446
00:18:17,590 --> 00:18:23,379
this way and then if you sort of start

447
00:18:20,559 --> 00:18:26,590
to combine that with what I talked about

448
00:18:23,380 --> 00:18:29,340
earlier let's let's pick one so here's a

449
00:18:26,590 --> 00:18:31,959
random subdomain from that list before

450
00:18:29,340 --> 00:18:36,939
it's it's a piece of code that I've

451
00:18:31,960 --> 00:18:40,600
never heard of geo CD devops company dot

452
00:18:36,940 --> 00:18:44,110
network so I googled Geo CD and it was

453
00:18:40,600 --> 00:18:45,730
this open source thing so I was able to

454
00:18:44,110 --> 00:18:48,189
pull down this source code

455
00:18:45,730 --> 00:18:50,470
and stand it up locally which you see

456
00:18:48,190 --> 00:18:53,380
here and by default there's no

457
00:18:50,470 --> 00:18:56,200
authentication on the system you can add

458
00:18:53,380 --> 00:18:58,000
authentication to it but the default of

459
00:18:56,200 --> 00:19:00,750
just running it out of the box doesn't

460
00:18:58,000 --> 00:19:03,640
have off and that's a pretty good start

461
00:19:00,750 --> 00:19:05,740
and then when I sort of did some digging

462
00:19:03,640 --> 00:19:08,230
it didn't take long for me to find a

463
00:19:05,740 --> 00:19:10,780
cross-site request forgery exploit on

464
00:19:08,230 --> 00:19:12,100
this system and what's interesting here

465
00:19:10,780 --> 00:19:14,260
is if you think about a classical

466
00:19:12,100 --> 00:19:16,600
cross-site request forgery exploit the

467
00:19:14,260 --> 00:19:19,570
ability to set a status the ability to

468
00:19:16,600 --> 00:19:21,490
send an email like that's relatively

469
00:19:19,570 --> 00:19:24,100
benign and the grand scope of attacking

470
00:19:21,490 --> 00:19:27,010
a company but if you're targeting one of

471
00:19:24,100 --> 00:19:30,399
these internal tools the scope just all

472
00:19:27,010 --> 00:19:32,350
of a sudden explodes so this tool has

473
00:19:30,400 --> 00:19:36,220
the ability to build environments it has

474
00:19:32,350 --> 00:19:38,889
the ability to stand up hosts and as it

475
00:19:36,220 --> 00:19:41,080
turns out one of those endpoints the

476
00:19:38,890 --> 00:19:41,950
ability to build an environment doesn't

477
00:19:41,080 --> 00:19:45,879
have cross-site request forgery

478
00:19:41,950 --> 00:19:48,789
protection which means I can now take

479
00:19:45,880 --> 00:19:51,610
this company's name I can build a

480
00:19:48,789 --> 00:19:54,100
payload such that when a person visits

481
00:19:51,610 --> 00:19:56,559
an evil link I'm specifically targeting

482
00:19:54,100 --> 00:19:58,689
that host and that piece of software

483
00:19:56,559 --> 00:20:02,170
which I found a specific

484
00:19:58,690 --> 00:20:04,360
exploit on and if that link gets clicked

485
00:20:02,170 --> 00:20:09,580
I can build an environment in their

486
00:20:04,360 --> 00:20:11,770
ecosystem um that's pretty bad and it's

487
00:20:09,580 --> 00:20:13,659
really really easy to find these types

488
00:20:11,770 --> 00:20:16,290
of exploits these internal tools these

489
00:20:13,660 --> 00:20:18,580
open source ones are usually not audited

490
00:20:16,290 --> 00:20:20,920
they don't go through the same scrutiny

491
00:20:18,580 --> 00:20:22,990
let's say a public bug bounty website

492
00:20:20,920 --> 00:20:25,030
may go through they don't have intense

493
00:20:22,990 --> 00:20:26,380
security code reviews on them they're

494
00:20:25,030 --> 00:20:28,330
usually really vulnerable and they're

495
00:20:26,380 --> 00:20:30,460
usually in a position that can do a lot

496
00:20:28,330 --> 00:20:35,800
of nasty state changing things in your

497
00:20:30,460 --> 00:20:37,560
environment so you know a summary of

498
00:20:35,800 --> 00:20:40,540
everything I've talked about so far

499
00:20:37,560 --> 00:20:43,290
basically you know if your internal

500
00:20:40,540 --> 00:20:46,810
services aren't locked down right and

501
00:20:43,290 --> 00:20:48,040
you click a dangerous link through a

502
00:20:46,810 --> 00:20:50,919
phishing email through a watering hole

503
00:20:48,040 --> 00:20:54,430
attack through whatever vector that

504
00:20:50,920 --> 00:20:56,860
origin can move laterally from your

505
00:20:54,430 --> 00:20:58,720
browser to another host in the

506
00:20:56,860 --> 00:21:02,169
environment which can be blind or it can

507
00:20:58,720 --> 00:21:04,990
be targeted and then that host can get a

508
00:21:02,170 --> 00:21:08,860
malware in plan phone home without a

509
00:21:04,990 --> 00:21:10,510
browser exploit so I'm going to talk

510
00:21:08,860 --> 00:21:12,250
about another type of vulnerability here

511
00:21:10,510 --> 00:21:14,190
one that folks are probably more

512
00:21:12,250 --> 00:21:17,860
familiar with cross-site scripting

513
00:21:14,190 --> 00:21:24,100
basically the idea behind cross-site

514
00:21:17,860 --> 00:21:26,649
scripting is if you visit a page and the

515
00:21:24,100 --> 00:21:30,100
page takes input from a user say from

516
00:21:26,650 --> 00:21:33,570
the URL and that input gets reflected

517
00:21:30,100 --> 00:21:38,530
back into the page in an unsafe way that

518
00:21:33,570 --> 00:21:43,810
can lead to a malicious user running

519
00:21:38,530 --> 00:21:46,899
arbitrary JavaScript on that page so if

520
00:21:43,810 --> 00:21:49,419
you think about it like if Facebook had

521
00:21:46,900 --> 00:21:50,800
a cross-site scripting vulnerability and

522
00:21:49,420 --> 00:21:53,170
you sent somebody a link to this thing

523
00:21:50,800 --> 00:21:55,810
and then you render the Facebook's page

524
00:21:53,170 --> 00:21:59,230
they'd have the ability to set statuses

525
00:21:55,810 --> 00:22:01,840
to delete friends do anything on your

526
00:21:59,230 --> 00:22:04,270
behalf because javascript has pretty

527
00:22:01,840 --> 00:22:11,139
much full control over the origin for

528
00:22:04,270 --> 00:22:12,460
which it runs so some examples of things

529
00:22:11,140 --> 00:22:15,159
you can do with job

530
00:22:12,460 --> 00:22:16,899
cross-site scripting anything the user

531
00:22:15,159 --> 00:22:19,419
can do all of a sudden you have that

532
00:22:16,899 --> 00:22:21,998
ability you can steal data you can

533
00:22:19,419 --> 00:22:24,129
change state on their account you can

534
00:22:21,999 --> 00:22:26,230
create backdoors by X filling session

535
00:22:24,129 --> 00:22:26,769
tokens or installing an app on their

536
00:22:26,230 --> 00:22:28,330
account

537
00:22:26,769 --> 00:22:29,710
maybe you install like a Facebook app

538
00:22:28,330 --> 00:22:34,139
because you're running code on their

539
00:22:29,710 --> 00:22:37,600
behalf but these are all again sort of

540
00:22:34,139 --> 00:22:40,059
peer-to-peer attacks not an attack on

541
00:22:37,600 --> 00:22:41,678
infrastructure if we look about how

542
00:22:40,059 --> 00:22:43,960
common cross-site scripting is as a

543
00:22:41,679 --> 00:22:46,179
vulnerability these are like the hacker

544
00:22:43,960 --> 00:22:48,759
ones most common vulnerabilities and you

545
00:22:46,179 --> 00:22:50,679
see it's like way on the list all the

546
00:22:48,759 --> 00:22:51,970
way at the top by a large margin

547
00:22:50,679 --> 00:22:52,869
so cross-site scripting is are really

548
00:22:51,970 --> 00:22:54,580
really common and people are really

549
00:22:52,869 --> 00:22:56,799
really used to seeing them in bug

550
00:22:54,580 --> 00:23:00,070
bounties and that kind of normalizes us

551
00:22:56,799 --> 00:23:02,139
to them to an extent which is kind of it

552
00:23:00,070 --> 00:23:04,600
kind of sucks because it is a pretty

553
00:23:02,139 --> 00:23:07,619
severe class of vulnerability within the

554
00:23:04,600 --> 00:23:09,490
scope of the origin that it runs on

555
00:23:07,619 --> 00:23:11,110
there are a couple different types of

556
00:23:09,490 --> 00:23:13,690
cross-site scripting I won't spend too

557
00:23:11,110 --> 00:23:15,699
much time going into them or all of them

558
00:23:13,690 --> 00:23:18,999
I should say but I will focus on the

559
00:23:15,700 --> 00:23:21,039
first two reflected cross-site scripting

560
00:23:18,999 --> 00:23:23,860
is you go to an origin with some kind of

561
00:23:21,039 --> 00:23:25,360
parameter in the URL so a link can be

562
00:23:23,860 --> 00:23:27,998
sent to you and that parameter then

563
00:23:25,360 --> 00:23:30,070
injects JavaScript on the page a stored

564
00:23:27,999 --> 00:23:31,690
cross-site scripting is basically some

565
00:23:30,070 --> 00:23:33,490
other user on the system stuck some data

566
00:23:31,690 --> 00:23:36,730
in a database somewhere and then that

567
00:23:33,490 --> 00:23:38,289
got rendered out in another context and

568
00:23:36,730 --> 00:23:40,210
so at the bottom here you sort of see

569
00:23:38,289 --> 00:23:41,799
this quote from hacker one that like a

570
00:23:40,210 --> 00:23:43,629
reflected cross-site scripting

571
00:23:41,799 --> 00:23:44,830
vulnerability is probably less severe

572
00:23:43,629 --> 00:23:46,899
than a stored cross-site scripting

573
00:23:44,830 --> 00:23:48,249
vulnerability I want to challenge that

574
00:23:46,899 --> 00:23:49,719
and specifically I want to challenge

575
00:23:48,249 --> 00:23:54,909
that with regards to what I've talked to

576
00:23:49,720 --> 00:23:58,960
so talked about so far so basically if

577
00:23:54,909 --> 00:24:00,279
if you if you think about sort of what

578
00:23:58,960 --> 00:24:02,080
I've talked about if you've got an

579
00:24:00,279 --> 00:24:04,539
internal Jenkins host and the internal

580
00:24:02,080 --> 00:24:06,539
Jenkins host is building stuff in the

581
00:24:04,539 --> 00:24:09,309
environment and it has the ability to

582
00:24:06,539 --> 00:24:11,499
spin up new hosts or to run code on

583
00:24:09,309 --> 00:24:13,658
other hosts in the environment a

584
00:24:11,499 --> 00:24:17,259
cross-site scripting on that origin

585
00:24:13,659 --> 00:24:18,999
reflected or stored could potentially

586
00:24:17,259 --> 00:24:21,519
mean compromising your entire

587
00:24:18,999 --> 00:24:24,070
environment but a stored cross-site

588
00:24:21,519 --> 00:24:26,050
scripting would depend on a previous

589
00:24:24,070 --> 00:24:27,429
request being successful

590
00:24:26,050 --> 00:24:29,139
storing something in the database and

591
00:24:27,430 --> 00:24:31,120
then a second request to fetch that back

592
00:24:29,140 --> 00:24:32,950
out and rendered it where's a reflected

593
00:24:31,120 --> 00:24:36,100
cross-site scripting is more drive-by

594
00:24:32,950 --> 00:24:38,590
you click one link and then it runs so

595
00:24:36,100 --> 00:24:40,270
in this context in a context where the

596
00:24:38,590 --> 00:24:42,459
attacker doesn't have access to the host

597
00:24:40,270 --> 00:24:44,020
in the first place but they get some

598
00:24:42,460 --> 00:24:45,400
kind of reflected cross-site scripting

599
00:24:44,020 --> 00:24:46,720
on this weird open source thing that

600
00:24:45,400 --> 00:24:47,920
they're running internally Tomcat

601
00:24:46,720 --> 00:24:50,770
Jenkins or something else I've never

602
00:24:47,920 --> 00:24:52,750
heard of the reflected cross-site

603
00:24:50,770 --> 00:24:54,580
scripting can be a lot worse than stored

604
00:24:52,750 --> 00:24:56,500
cross-site scripting you're not going to

605
00:24:54,580 --> 00:24:58,510
get stored cross-site scripting on a lot

606
00:24:56,500 --> 00:25:00,100
of those things but you probably could

607
00:24:58,510 --> 00:25:01,870
find a reflected one if you look hard

608
00:25:00,100 --> 00:25:03,010
enough and even if you did find a store

609
00:25:01,870 --> 00:25:04,270
blind you wouldn't be able to store it

610
00:25:03,010 --> 00:25:06,280
because you'd need to be on that network

611
00:25:04,270 --> 00:25:07,540
but you can trigger the reflected one by

612
00:25:06,280 --> 00:25:12,490
getting somebody to click a link who is

613
00:25:07,540 --> 00:25:14,590
on that network and if you were to find

614
00:25:12,490 --> 00:25:16,900
a stored cross-site scripting you would

615
00:25:14,590 --> 00:25:19,149
need across that request for a bug to go

616
00:25:16,900 --> 00:25:21,130
with it to allow a state changing

617
00:25:19,150 --> 00:25:24,190
request to happen so that you could send

618
00:25:21,130 --> 00:25:26,200
that subsequent second request so it's

619
00:25:24,190 --> 00:25:28,180
it's it's less likely it's more complex

620
00:25:26,200 --> 00:25:29,590
and the reflected cross-site scripting I

621
00:25:28,180 --> 00:25:32,020
would argue is a lot more deadly in this

622
00:25:29,590 --> 00:25:35,169
particular situation of targeting

623
00:25:32,020 --> 00:25:36,490
internal applications so sort of again

624
00:25:35,170 --> 00:25:38,410
the old way of thinking about this is

625
00:25:36,490 --> 00:25:40,870
like you attack a user you steal a

626
00:25:38,410 --> 00:25:43,450
user's data but I want to kind of shift

627
00:25:40,870 --> 00:25:45,909
that paradigm and sort of and I know

628
00:25:43,450 --> 00:25:48,040
like other other people in the industry

629
00:25:45,910 --> 00:25:50,350
like B for example have started to shift

630
00:25:48,040 --> 00:25:51,790
out I want to shift it even more to make

631
00:25:50,350 --> 00:25:54,100
people more aware of the fact that these

632
00:25:51,790 --> 00:25:56,290
like dangerous web browsers sit on

633
00:25:54,100 --> 00:25:58,120
internal environments that that can make

634
00:25:56,290 --> 00:26:00,700
network requests any network that you're

635
00:25:58,120 --> 00:26:02,860
on and you can use these webby attacks

636
00:26:00,700 --> 00:26:05,230
that seem harmless to attack

637
00:26:02,860 --> 00:26:10,240
infrastructure and to cause some real

638
00:26:05,230 --> 00:26:12,910
damage in an environment and so this is

639
00:26:10,240 --> 00:26:15,070
one example of one that I submitted to a

640
00:26:12,910 --> 00:26:17,470
bug bounty review board is an open

641
00:26:15,070 --> 00:26:19,840
source tool for performing code reviews

642
00:26:17,470 --> 00:26:21,340
you hook review board up to github it

643
00:26:19,840 --> 00:26:25,330
has the ability to pull projects from

644
00:26:21,340 --> 00:26:28,689
github and anyone with access to review

645
00:26:25,330 --> 00:26:30,550
board can perform a code review

646
00:26:28,690 --> 00:26:32,140
I found that review board had no

647
00:26:30,550 --> 00:26:34,629
cross-site request forgery protection

648
00:26:32,140 --> 00:26:36,130
and there were several cross-site

649
00:26:34,630 --> 00:26:38,590
scripting vulnerabilities that I was

650
00:26:36,130 --> 00:26:39,399
able to find and so when you think about

651
00:26:38,590 --> 00:26:40,689
that I

652
00:26:39,399 --> 00:26:43,359
have the host name already because I've

653
00:26:40,690 --> 00:26:45,729
enumerated it passively and then I can

654
00:26:43,359 --> 00:26:46,989
build a payload that targets that host

655
00:26:45,729 --> 00:26:48,279
name that have clicked by an employee

656
00:26:46,989 --> 00:26:50,379
would trigger one of these

657
00:26:48,279 --> 00:26:52,929
vulnerabilities and the impact of that

658
00:26:50,379 --> 00:26:56,519
would be I now have the ability to run

659
00:26:52,929 --> 00:26:59,200
code on somebody's browser and that

660
00:26:56,519 --> 00:27:03,879
browser can make a request to an

661
00:26:59,200 --> 00:27:05,879
internal host and that host can access

662
00:27:03,879 --> 00:27:09,549
all the source code in your company and

663
00:27:05,879 --> 00:27:10,899
then I can steal it all so end-to-end

664
00:27:09,549 --> 00:27:12,009
you click a link and all of a sudden

665
00:27:10,899 --> 00:27:15,008
I've stolen all your company's source

666
00:27:12,009 --> 00:27:17,289
code that's it's a pretty severe thing

667
00:27:15,009 --> 00:27:20,139
to do from something that we typically

668
00:27:17,289 --> 00:27:22,029
think is benign cross-site scripting and

669
00:27:20,139 --> 00:27:23,678
I guarantee you review board has not

670
00:27:22,029 --> 00:27:24,369
gone through an intense vetting process

671
00:27:23,679 --> 00:27:27,609
and there's probably more

672
00:27:24,369 --> 00:27:29,889
vulnerabilities like that in it so the

673
00:27:27,609 --> 00:27:31,539
impact here is just way more severe than

674
00:27:29,889 --> 00:27:33,129
what we typically think of and we think

675
00:27:31,539 --> 00:27:35,769
of cross-site scripting we're targeting

676
00:27:33,129 --> 00:27:37,689
an internal host and if somebody clicks

677
00:27:35,769 --> 00:27:41,649
a link it causes irreparable damage to

678
00:27:37,690 --> 00:27:44,259
the company basically and so like that's

679
00:27:41,649 --> 00:27:46,029
the you know the kill chain here is like

680
00:27:44,259 --> 00:27:47,979
because it was a stored cross-site

681
00:27:46,029 --> 00:27:49,719
scripting and I found you have to make

682
00:27:47,979 --> 00:27:51,219
one request to set the cross-site

683
00:27:49,719 --> 00:27:52,179
scripting which you can do because

684
00:27:51,219 --> 00:27:54,849
there's no cross-site request forgery

685
00:27:52,179 --> 00:27:56,889
protection and then a second request to

686
00:27:54,849 --> 00:27:58,479
activate the cross-site scripting which

687
00:27:56,889 --> 00:28:01,149
then exfiltrate Sall the data from the

688
00:27:58,479 --> 00:28:03,099
origin which in this case would be all

689
00:28:01,149 --> 00:28:06,580
the source code or whatever source code

690
00:28:03,099 --> 00:28:08,589
you wanted to target so you can see here

691
00:28:06,580 --> 00:28:09,939
a review board fixed this cross-site

692
00:28:08,589 --> 00:28:11,589
scripting vulnerability and gave me

693
00:28:09,940 --> 00:28:13,059
credit for it and then the bug bounty

694
00:28:11,589 --> 00:28:14,889
has been of the stew which was unrelated

695
00:28:13,059 --> 00:28:19,690
to review board also triage to this and

696
00:28:14,889 --> 00:28:22,418
they upgraded their version so another

697
00:28:19,690 --> 00:28:24,519
example is there was another company

698
00:28:22,419 --> 00:28:26,440
that I was doing a bug bounty against

699
00:28:24,519 --> 00:28:28,239
and I love doing these bug bounties

700
00:28:26,440 --> 00:28:29,710
because it's I'm finding exploits on

701
00:28:28,239 --> 00:28:31,599
open source software stacks so I could

702
00:28:29,710 --> 00:28:33,580
talk about them like it's not locked

703
00:28:31,599 --> 00:28:35,769
down I can you know it's it's open

704
00:28:33,580 --> 00:28:38,769
source I'm afraid to be more open about

705
00:28:35,769 --> 00:28:39,789
it so I'm doing some bug rounding on

706
00:28:38,769 --> 00:28:42,309
some company and they're running

707
00:28:39,789 --> 00:28:44,739
something global site company comm a

708
00:28:42,309 --> 00:28:48,339
Google global site I find out it's an

709
00:28:44,739 --> 00:28:50,139
open source piece of software and I just

710
00:28:48,339 --> 00:28:52,389
I tear it apart I find so many

711
00:28:50,139 --> 00:28:52,929
vulnerabilities in this thing I found

712
00:28:52,389 --> 00:28:55,689
many

713
00:28:52,930 --> 00:28:57,910
scripting instance instances and I found

714
00:28:55,690 --> 00:29:01,090
a remote code execution which was only

715
00:28:57,910 --> 00:29:03,820
trigger bull if a user was logged in but

716
00:29:01,090 --> 00:29:07,449
if we combine these two things together

717
00:29:03,820 --> 00:29:09,460
if a user is currently logged in I can

718
00:29:07,450 --> 00:29:12,120
use the cross-site scripting to trigger

719
00:29:09,460 --> 00:29:15,970
to correct the remote code execution and

720
00:29:12,120 --> 00:29:18,310
I can build this end-to-end link that if

721
00:29:15,970 --> 00:29:20,650
clicked by a user at this company is

722
00:29:18,310 --> 00:29:23,950
currently logged in all of a sudden

723
00:29:20,650 --> 00:29:29,620
their browser targets this internal host

724
00:29:23,950 --> 00:29:32,080
and that host phone's home so that kind

725
00:29:29,620 --> 00:29:34,360
of goes over what I just said you

726
00:29:32,080 --> 00:29:36,580
install the web shell via the user

727
00:29:34,360 --> 00:29:38,199
making one request you activate the web

728
00:29:36,580 --> 00:29:40,899
shell by making a second request and

729
00:29:38,200 --> 00:29:43,720
then that makes the host phone home and

730
00:29:40,900 --> 00:29:47,940
you can see they paid me out pretty well

731
00:29:43,720 --> 00:29:50,740
for that 9 grand for all of the issues

732
00:29:47,940 --> 00:29:53,710
they recognize this is a really severe

733
00:29:50,740 --> 00:29:55,720
issue but this was just one host in

734
00:29:53,710 --> 00:29:57,220
their environment an open-source host

735
00:29:55,720 --> 00:29:59,650
which their security team had never

736
00:29:57,220 --> 00:30:01,150
heard of never audited and they had a

737
00:29:59,650 --> 00:30:03,310
ton of other hosts that I haven't looked

738
00:30:01,150 --> 00:30:04,300
at yet and most companies do of just

739
00:30:03,310 --> 00:30:06,639
weird open source stack running

740
00:30:04,300 --> 00:30:09,850
internally you can target externally via

741
00:30:06,640 --> 00:30:11,170
these links so I want to spend a little

742
00:30:09,850 --> 00:30:12,879
bit of time talking about service

743
00:30:11,170 --> 00:30:14,860
workers which is another new JavaScript

744
00:30:12,880 --> 00:30:19,240
feature that allows you to do these

745
00:30:14,860 --> 00:30:21,490
attacks in a more interesting way a

746
00:30:19,240 --> 00:30:23,740
service workers intent is basically to

747
00:30:21,490 --> 00:30:26,890
function as a fake server in the case

748
00:30:23,740 --> 00:30:29,110
internet goes down so you make a web

749
00:30:26,890 --> 00:30:31,630
request and a service worker kind of

750
00:30:29,110 --> 00:30:34,540
pretends to be the server and can

751
00:30:31,630 --> 00:30:37,030
service you in the event that there's no

752
00:30:34,540 --> 00:30:39,730
connectivity to the server that's what

753
00:30:37,030 --> 00:30:42,340
it's designed for but what it allows you

754
00:30:39,730 --> 00:30:44,170
to do is kind of weird first it allows

755
00:30:42,340 --> 00:30:46,929
you to run JavaScript for five minutes

756
00:30:44,170 --> 00:30:48,610
after the user closes the tab now if you

757
00:30:46,930 --> 00:30:50,850
remember I said 30 seconds is how long

758
00:30:48,610 --> 00:30:53,649
it takes me to sweep an internal subnet

759
00:30:50,850 --> 00:30:55,209
for five minutes is how long I get to

760
00:30:53,650 --> 00:31:00,910
sit on that after the user has closed

761
00:30:55,210 --> 00:31:03,340
the tab that's kind of scary it only

762
00:31:00,910 --> 00:31:06,759
runs on TLS toasts so if you were just

763
00:31:03,340 --> 00:31:07,958
sweeping their internal subnet you

764
00:31:06,759 --> 00:31:10,419
we wouldn't have much luck unless

765
00:31:07,959 --> 00:31:12,669
there's some crazy internal TLS tooling

766
00:31:10,419 --> 00:31:14,049
at that company but there is an

767
00:31:12,669 --> 00:31:17,559
exception to that and I'll get to that a

768
00:31:14,049 --> 00:31:19,859
bit they're slightly sandbox so you

769
00:31:17,559 --> 00:31:21,789
don't have full JavaScript execution

770
00:31:19,859 --> 00:31:24,009
abilities within a serviceworker

771
00:31:21,789 --> 00:31:25,869
but you can make cross-origin requests

772
00:31:24,009 --> 00:31:27,639
which means you can install cross-site

773
00:31:25,869 --> 00:31:31,570
request forgery attacks and you can

774
00:31:27,639 --> 00:31:33,668
trigger cross-site scripting attacks so

775
00:31:31,570 --> 00:31:35,739
you know when I think of a Service

776
00:31:33,669 --> 00:31:37,749
Worker this is what happened when I

777
00:31:35,739 --> 00:31:39,339
opened up an incognito window and viewed

778
00:31:37,749 --> 00:31:41,529
how many service workers were currently

779
00:31:39,339 --> 00:31:43,448
installed Google had already installed

780
00:31:41,529 --> 00:31:44,649
one they're kind of like malware they're

781
00:31:43,449 --> 00:31:47,319
little bits of code that can continue to

782
00:31:44,649 --> 00:31:50,799
run after I forget about the browsing

783
00:31:47,319 --> 00:31:53,379
context that I'm on and I personally

784
00:31:50,799 --> 00:31:55,089
don't want that like I you know I use a

785
00:31:53,379 --> 00:31:56,529
VPN sometimes for some web sites that I

786
00:31:55,089 --> 00:31:58,599
visit I don't like the idea that they

787
00:31:56,529 --> 00:32:00,639
can figure out who I am if I turn the

788
00:31:58,599 --> 00:32:04,569
VPN off four minutes after I visit the

789
00:32:00,639 --> 00:32:07,059
web site but the additional thing that

790
00:32:04,569 --> 00:32:09,369
they allow you to do is send all these

791
00:32:07,059 --> 00:32:11,079
requests to all these internal hosts so

792
00:32:09,369 --> 00:32:15,039
if you find a bunch of internal hosts

793
00:32:11,079 --> 00:32:16,690
that are using TLS you can have your

794
00:32:15,039 --> 00:32:18,429
serviceworker just go to town for five

795
00:32:16,690 --> 00:32:20,129
minutes on those things it could set up

796
00:32:18,429 --> 00:32:23,019
some command and control hook with beef

797
00:32:20,129 --> 00:32:24,698
and you can just continue slam this

798
00:32:23,019 --> 00:32:26,769
hosts for five minutes after the person

799
00:32:24,699 --> 00:32:27,940
closes the tab there's kind of that

800
00:32:26,769 --> 00:32:29,679
thought when you have a cross-site

801
00:32:27,940 --> 00:32:30,909
scripting attack that it only runs for

802
00:32:29,679 --> 00:32:32,979
the short amount of time the person

803
00:32:30,909 --> 00:32:34,929
visits a page and if they just close the

804
00:32:32,979 --> 00:32:37,509
page immediately like you may be out of

805
00:32:34,929 --> 00:32:40,929
look but these give you five definite

806
00:32:37,509 --> 00:32:42,699
guaranteed minutes and here's that

807
00:32:40,929 --> 00:32:45,369
exception that I talked about before it

808
00:32:42,699 --> 00:32:46,989
doesn't always have to be over TLS there

809
00:32:45,369 --> 00:32:49,779
is one exception and that's if you load

810
00:32:46,989 --> 00:32:51,279
a serviceworker over local host and you

811
00:32:49,779 --> 00:32:53,229
might be wondering like when can an

812
00:32:51,279 --> 00:32:54,969
attacker ever get somebody to load a

813
00:32:53,229 --> 00:32:57,609
service or her over local host on

814
00:32:54,969 --> 00:32:59,559
somebody's workstation and I've kind of

815
00:32:57,609 --> 00:33:02,948
come up with a kill chain here that is a

816
00:32:59,559 --> 00:33:07,199
little outlandish but it works basically

817
00:33:02,949 --> 00:33:13,359
if you submit a file via bug bounty and

818
00:33:07,199 --> 00:33:15,429
claim it's some exploit an HTML file the

819
00:33:13,359 --> 00:33:17,139
person triaging the bug is probably

820
00:33:15,429 --> 00:33:18,849
going to run that on localhost and

821
00:33:17,139 --> 00:33:20,159
they're probably going to do it on a

822
00:33:18,849 --> 00:33:22,800
privilege network

823
00:33:20,160 --> 00:33:25,020
which means you could install a

824
00:33:22,800 --> 00:33:27,300
serviceworker on their machine on

825
00:33:25,020 --> 00:33:29,070
localhost that can run for five minutes

826
00:33:27,300 --> 00:33:31,590
after they close the tab and now it can

827
00:33:29,070 --> 00:33:35,600
make insecure requests to their network

828
00:33:31,590 --> 00:33:37,709
sweep 2/24 they're sitting on and

829
00:33:35,600 --> 00:33:40,469
anybody running Jenkins or whatever else

830
00:33:37,710 --> 00:33:42,960
you're targeting those hosts can phone

831
00:33:40,470 --> 00:33:44,880
home it'll still run for five minutes

832
00:33:42,960 --> 00:33:58,890
and it'll just allow you to make

833
00:33:44,880 --> 00:34:01,320
insecure requests yeah yeah oh sweet a

834
00:33:58,890 --> 00:34:03,150
little bit so basically the the person

835
00:34:01,320 --> 00:34:04,530
in the front said like if you just open

836
00:34:03,150 --> 00:34:06,030
the HTML file it won't be running on

837
00:34:04,530 --> 00:34:08,340
localhost or mirroring on a file origin

838
00:34:06,030 --> 00:34:09,629
which is correct however there are

839
00:34:08,340 --> 00:34:11,220
different ways that you could coerce

840
00:34:09,629 --> 00:34:13,168
people to run it on localhost for

841
00:34:11,219 --> 00:34:15,928
example if you included a bunch of HTML

842
00:34:13,168 --> 00:34:17,969
files and you wanted those HTML files to

843
00:34:15,929 --> 00:34:20,040
be able to reference each other then you

844
00:34:17,969 --> 00:34:22,080
can say just spin up a python HTTP

845
00:34:20,040 --> 00:34:23,159
server to make this work and chances are

846
00:34:22,080 --> 00:34:28,168
other person triaging the bug is going

847
00:34:23,159 --> 00:34:29,790
to do it but that is a good point there

848
00:34:28,168 --> 00:34:32,879
are some other downsides to running

849
00:34:29,790 --> 00:34:35,090
things using the file origin there are

850
00:34:32,879 --> 00:34:37,080
some security implications to doing that

851
00:34:35,090 --> 00:34:39,659
if we could talk more about them later

852
00:34:37,080 --> 00:34:43,199
but it is a good point thank you for

853
00:34:39,659 --> 00:34:45,840
bringing up but that's that's basically

854
00:34:43,199 --> 00:34:48,239
the idea that that you can target these

855
00:34:45,840 --> 00:34:50,129
internal hosts through the web browser

856
00:34:48,239 --> 00:34:53,100
you can do it in a very targeted fashion

857
00:34:50,129 --> 00:34:54,210
the recon and all the information that

858
00:34:53,100 --> 00:34:56,489
you can learn about an internal network

859
00:34:54,210 --> 00:35:00,030
has gotten really really sophisticated

860
00:34:56,489 --> 00:35:01,830
in the last couple of years and you can

861
00:35:00,030 --> 00:35:05,330
also figure out into person's internal

862
00:35:01,830 --> 00:35:08,990
IP address because of a browser feature

863
00:35:05,330 --> 00:35:12,090
so that's basically that's basically

864
00:35:08,990 --> 00:35:14,310
what what I have for you I'm hopefully

865
00:35:12,090 --> 00:35:15,780
bringing some visibility and bringing a

866
00:35:14,310 --> 00:35:18,690
new light into viewing these classical

867
00:35:15,780 --> 00:35:20,790
vulnerabilities I realized that a lot of

868
00:35:18,690 --> 00:35:22,620
that was like super technical but

869
00:35:20,790 --> 00:35:25,380
hopefully like bringing it back up

870
00:35:22,620 --> 00:35:29,940
the overall idea of like how much damage

871
00:35:25,380 --> 00:35:31,380
can happen if I click a link I I just

872
00:35:29,940 --> 00:35:32,810
want to demonstrate that the answer is a

873
00:35:31,380 --> 00:35:35,810
lot

874
00:35:32,810 --> 00:35:39,860
does anybody have any questions question

875
00:35:35,810 --> 00:35:43,150
the back primarily to service requests

876
00:35:39,860 --> 00:35:46,370
when the actual server is unreachable

877
00:35:43,150 --> 00:35:48,650
how difficult is it to induce a service

878
00:35:46,370 --> 00:35:52,250
worker to handle the response for a

879
00:35:48,650 --> 00:35:55,990
server that is up yeah so if I

880
00:35:52,250 --> 00:35:58,760
understand the question you're asking

881
00:35:55,990 --> 00:36:08,479
how do I install a service worker on an

882
00:35:58,760 --> 00:36:11,030
Origin basically yeah so just rolling it

883
00:36:08,480 --> 00:36:12,770
back a little bit a service worker can

884
00:36:11,030 --> 00:36:14,810
be installed on an Origin that you have

885
00:36:12,770 --> 00:36:16,730
control over so if you have control over

886
00:36:14,810 --> 00:36:19,490
an Origin you can install a service

887
00:36:16,730 --> 00:36:21,650
worker for that origin and it's designed

888
00:36:19,490 --> 00:36:23,990
to be like a well I'm gonna install this

889
00:36:21,650 --> 00:36:25,970
just in case in case I go down then the

890
00:36:23,990 --> 00:36:27,529
service worker will kick in but the

891
00:36:25,970 --> 00:36:29,569
service worker has the ability to also

892
00:36:27,530 --> 00:36:38,450
run while the server's up it can run all

893
00:36:29,570 --> 00:36:40,670
the time yep control the origin is it so

894
00:36:38,450 --> 00:36:43,009
the way you install a service worker you

895
00:36:40,670 --> 00:36:44,750
visit a web page a web page can run

896
00:36:43,010 --> 00:36:46,490
JavaScript on your page and that

897
00:36:44,750 --> 00:36:50,300
JavaScript installs the service worker

898
00:36:46,490 --> 00:36:52,459
and then it points to another file being

899
00:36:50,300 --> 00:36:55,040
hosted on the origin and that file

900
00:36:52,460 --> 00:36:57,020
itself is or is the service worker so

901
00:36:55,040 --> 00:36:58,490
you can't quite install a service worker

902
00:36:57,020 --> 00:37:00,770
if you get a cross-site scripting on an

903
00:36:58,490 --> 00:37:02,450
origin for example but if you have full

904
00:37:00,770 --> 00:37:04,430
control over the origin like evil comm

905
00:37:02,450 --> 00:37:05,930
and somebody visits evil comm you could

906
00:37:04,430 --> 00:37:07,250
just install a service worker on that

907
00:37:05,930 --> 00:37:08,720
origin no problem and then use that

908
00:37:07,250 --> 00:37:12,910
Service Worker to make requests to the

909
00:37:08,720 --> 00:37:12,910
internal network yes

910
00:37:14,210 --> 00:37:20,340
all servers have provided that there are

911
00:37:18,660 --> 00:37:21,960
no other tabs for that domain better

912
00:37:20,340 --> 00:37:23,250
still oh that's a great question the

913
00:37:21,960 --> 00:37:24,900
question was like can you write a

914
00:37:23,250 --> 00:37:27,030
browser plugin to just kill all service

915
00:37:24,900 --> 00:37:28,710
workers I could do one better you can

916
00:37:27,030 --> 00:37:31,050
actually disable service workers as a

917
00:37:28,710 --> 00:37:32,760
feature you can just in Chrome

918
00:37:31,050 --> 00:37:34,110
turn them off but you might find it

919
00:37:32,760 --> 00:37:36,330
breaks some functionality on certain

920
00:37:34,110 --> 00:37:38,190
websites use Facebook Google they all

921
00:37:36,330 --> 00:37:41,850
install service workers and they all do

922
00:37:38,190 --> 00:37:44,030
stuff with regards to their origin it

923
00:37:41,850 --> 00:38:04,799
might end up breaking stuff unintended

924
00:37:44,030 --> 00:38:07,980
question of the question is if you visit

925
00:38:04,800 --> 00:38:10,490
a web page can that web page install a

926
00:38:07,980 --> 00:38:10,490
serviceworker

927
00:38:18,830 --> 00:38:22,980
I'm just repeating the question so

928
00:38:21,540 --> 00:38:24,509
everyone can hear it basically the

929
00:38:22,980 --> 00:38:26,340
question is if you visit our web page

930
00:38:24,510 --> 00:38:30,300
can the web page install a serviceworker

931
00:38:26,340 --> 00:38:32,580
and then close the main page it can

932
00:38:30,300 --> 00:38:35,760
certainly redirect you to another

933
00:38:32,580 --> 00:38:38,130
website I'm not sure if you have the

934
00:38:35,760 --> 00:38:41,010
ability to close a tab my gut is that

935
00:38:38,130 --> 00:38:45,570
you do and then what was your second

936
00:38:41,010 --> 00:38:50,400
question can a serviceworker open a new

937
00:38:45,570 --> 00:38:52,020
tab probably not is what I would think

938
00:38:50,400 --> 00:38:54,690
service workers are somewhat locked down

939
00:38:52,020 --> 00:38:56,430
and the JavaScript that they can run one

940
00:38:54,690 --> 00:38:59,460
of those things that they can do is make

941
00:38:56,430 --> 00:39:02,190
requests to other origins but my guess

942
00:38:59,460 --> 00:39:04,410
is that included in that subset of

943
00:39:02,190 --> 00:39:06,350
things is not the ability to open a tab

944
00:39:04,410 --> 00:39:10,009
but I am not a hundred percent on that

945
00:39:06,350 --> 00:39:10,009
there's a question in the back

946
00:39:11,540 --> 00:39:18,480
we'll say case what refunded you need to

947
00:39:16,380 --> 00:39:20,460
find that because scary King said listen

948
00:39:18,480 --> 00:39:22,380
evil where was stood up in video

949
00:39:20,460 --> 00:39:24,180
reporting that like a it's not your

950
00:39:22,380 --> 00:39:26,250
internal network yeah so I don't

951
00:39:24,180 --> 00:39:28,350
remember exactly but I'll give you a

952
00:39:26,250 --> 00:39:31,730
scenario that's perfectly plausible I

953
00:39:28,350 --> 00:39:34,710
went to their certificate transparency I

954
00:39:31,730 --> 00:39:37,230
went to a certificate transparency log I

955
00:39:34,710 --> 00:39:39,660
searched for their top-level domain

956
00:39:37,230 --> 00:39:42,180
found all the subdomains and one of the

957
00:39:39,660 --> 00:39:44,160
subdomains was global site company comm

958
00:39:42,180 --> 00:39:45,330
and then from that a Google global site

959
00:39:44,160 --> 00:39:47,759
found out was an open source stack

960
00:39:45,330 --> 00:39:48,720
spiked on it submitted the bug then they

961
00:39:47,760 --> 00:39:52,460
found this thing running that they

962
00:39:48,720 --> 00:39:52,459
weren't aware of and and what from their

963
00:39:52,610 --> 00:40:03,830
yes on client side was her behavior

964
00:39:59,690 --> 00:40:03,830
logging you think would be beneficial

965
00:40:05,490 --> 00:40:09,299
yeah so the question was like from like

966
00:40:07,740 --> 00:40:11,990
a blue team perspective what sort of

967
00:40:09,300 --> 00:40:15,060
behavior could you potentially

968
00:40:11,990 --> 00:40:19,109
fingerprint to identify this type of

969
00:40:15,060 --> 00:40:21,330
lateral movement it's tough like making

970
00:40:19,109 --> 00:40:24,380
HTTP requests internally is something

971
00:40:21,330 --> 00:40:28,160
that people do normally so being able to

972
00:40:24,380 --> 00:40:31,050
identify this I mean you can write

973
00:40:28,160 --> 00:40:32,009
signatures for the Metasploit library

974
00:40:31,050 --> 00:40:33,960
but you don't know what you don't know

975
00:40:32,010 --> 00:40:38,599
about so if I have an exploit on global

976
00:40:33,960 --> 00:40:41,280
site and I build out a payload for that

977
00:40:38,599 --> 00:40:42,930
you know it's going to be tough to to

978
00:40:41,280 --> 00:40:44,460
write a fingerprint for for that when

979
00:40:42,930 --> 00:40:45,118
you don't even know a global site is and

980
00:40:44,460 --> 00:40:48,000
you don't know that it's in your

981
00:40:45,119 --> 00:40:50,130
environment what you could do is

982
00:40:48,000 --> 00:40:53,160
probably build some sort of heuristic on

983
00:40:50,130 --> 00:40:55,890
like if an internal host all of a sudden

984
00:40:53,160 --> 00:40:57,089
sweeps an entire network but then you're

985
00:40:55,890 --> 00:40:59,910
kind of getting into like behavioral

986
00:40:57,089 --> 00:41:02,070
stuff which is a lot harder to write

987
00:40:59,910 --> 00:41:05,160
rules for and to scale and to keep up

988
00:41:02,070 --> 00:41:08,520
with so it's tough and I think that's

989
00:41:05,160 --> 00:41:12,390
another really good point that like this

990
00:41:08,520 --> 00:41:13,740
type of implant is a lot trickier to get

991
00:41:12,390 --> 00:41:15,299
attribution and to figure out what

992
00:41:13,740 --> 00:41:17,069
happened and to trace back the story of

993
00:41:15,300 --> 00:41:18,930
like well this house got malware on it

994
00:41:17,070 --> 00:41:19,619
all of a sudden but like where did that

995
00:41:18,930 --> 00:41:22,799
come from

996
00:41:19,619 --> 00:41:24,300
like that host you know they themselves

997
00:41:22,800 --> 00:41:25,260
didn't click a malicious link they

998
00:41:24,300 --> 00:41:28,200
didn't even know about the guy on the

999
00:41:25,260 --> 00:41:30,690
other side of the company that did it's

1000
00:41:28,200 --> 00:41:34,080
hard and I'm not an expert in blue team

1001
00:41:30,690 --> 00:41:36,349
by any means but yeah I've done mr. your

1002
00:41:34,080 --> 00:41:36,348
question

1003
00:41:41,440 --> 00:41:45,850
but from an appliance like watching like

1004
00:41:44,020 --> 00:41:47,980
what's that zips that do not like to go

1005
00:41:45,850 --> 00:41:49,600
stealthy you already know what your

1006
00:41:47,980 --> 00:41:50,680
target is and that way you're not gonna

1007
00:41:49,600 --> 00:41:53,610
try and do it a connect with a

1008
00:41:50,680 --> 00:41:56,589
corporation you just go in and try and

1009
00:41:53,610 --> 00:41:58,660
target specific O's hit it with your

1010
00:41:56,590 --> 00:42:01,540
specifics like like you described in

1011
00:41:58,660 --> 00:42:07,390
your in your car and then you know you

1012
00:42:01,540 --> 00:42:09,640
just pop it so like you're asking

1013
00:42:07,390 --> 00:42:11,500
basically what kind of end point

1014
00:42:09,640 --> 00:42:26,140
detection can we put on the host of the

1015
00:42:11,500 --> 00:42:27,760
person clicking the link then we're

1016
00:42:26,140 --> 00:42:31,859
designed to use this way so maybe you

1017
00:42:27,760 --> 00:42:31,860
could like say no

1018
00:42:34,400 --> 00:42:42,599
and I think that would be tough to do I

1019
00:42:40,109 --> 00:42:45,690
think like we're using the browser the

1020
00:42:42,599 --> 00:42:48,180
way it's intended to be used it's

1021
00:42:45,690 --> 00:42:50,729
possible that you could maybe write some

1022
00:42:48,180 --> 00:42:52,828
sort of plugin that detected if you

1023
00:42:50,729 --> 00:42:54,779
visited an external host and then that

1024
00:42:52,829 --> 00:42:56,789
external host is trying to do internal

1025
00:42:54,779 --> 00:43:11,099
things that seems like something that

1026
00:42:56,789 --> 00:43:12,900
you could probably learn on its path

1027
00:43:11,099 --> 00:43:15,539
between the origin of the host special

1028
00:43:12,900 --> 00:43:17,279
case it could be a cross-site request so

1029
00:43:15,539 --> 00:43:20,309
the origin header was introduced by

1030
00:43:17,279 --> 00:43:22,259
browsers to be a method of limiting

1031
00:43:20,309 --> 00:43:25,680
process requests if you look at the

1032
00:43:22,259 --> 00:43:29,609
OAuth CSRF cheechee both ol origin and

1033
00:43:25,680 --> 00:43:31,229
refer checks are listed as so that's a

1034
00:43:29,609 --> 00:43:32,788
good point basically the person in the

1035
00:43:31,229 --> 00:43:34,348
front mentioned that if you

1036
00:43:32,789 --> 00:43:36,269
cross-reference the origin header with

1037
00:43:34,349 --> 00:43:38,009
the host header you can potentially tell

1038
00:43:36,269 --> 00:43:40,019
that this network traffic was done cross

1039
00:43:38,009 --> 00:43:42,749
origin I think the problem you're gonna

1040
00:43:40,019 --> 00:43:44,848
have is a lot of these hosts are tart

1041
00:43:42,749 --> 00:43:46,288
well global site for example review

1042
00:43:44,849 --> 00:43:48,450
board for example these were targeted

1043
00:43:46,289 --> 00:43:50,519
against TLS endpoints and so you'd need

1044
00:43:48,450 --> 00:43:52,259
some sort of TLS introspection to be

1045
00:43:50,519 --> 00:43:53,968
able to see that and then you're gonna

1046
00:43:52,259 --> 00:43:57,809
have all the problems that go with full

1047
00:43:53,969 --> 00:44:00,660
TLS introspection but it is a good point

1048
00:43:57,809 --> 00:44:02,969
and we could possibly build some sort of

1049
00:44:00,660 --> 00:44:05,219
browser plugin like the other gentleman

1050
00:44:02,969 --> 00:44:07,579
mentioned to be able to detect that kind

1051
00:44:05,219 --> 00:44:07,579
of thing

1052
00:44:16,590 --> 00:44:25,200
realistically without being absolutely

1053
00:44:19,600 --> 00:44:27,400
you get to see every traffic totally

1054
00:44:25,200 --> 00:44:28,899
except for the case where I mentioned of

1055
00:44:27,400 --> 00:44:30,490
like somebody runs something a localhost

1056
00:44:28,900 --> 00:44:32,080
and then you're just sweeping that

1057
00:44:30,490 --> 00:44:33,609
internal subdomain that that could be

1058
00:44:32,080 --> 00:45:04,450
all unencrypted that you could decade

1059
00:44:33,610 --> 00:45:08,710
you other question yes that is the point

1060
00:45:04,450 --> 00:45:09,910
brought up was basically like it falls

1061
00:45:08,710 --> 00:45:11,980
back to what I said originally dat that

1062
00:45:09,910 --> 00:45:13,569
fallacy of like having a hard security

1063
00:45:11,980 --> 00:45:14,950
shell an outside and soft security shell

1064
00:45:13,570 --> 00:45:16,300
is a good security model I mean that's a

1065
00:45:14,950 --> 00:45:18,609
fallacy right it's not sure we all know

1066
00:45:16,300 --> 00:45:20,350
it's not true but like pointing some of

1067
00:45:18,610 --> 00:45:22,330
this out that this definitely I think

1068
00:45:20,350 --> 00:45:23,830
brings more visibility dot and like

1069
00:45:22,330 --> 00:45:24,970
Google's beyond court model of like

1070
00:45:23,830 --> 00:45:28,210
let's just kill the internal network

1071
00:45:24,970 --> 00:45:33,810
entirely I think that is in my mind the

1072
00:45:28,210 --> 00:45:33,810
only like ironclad like solution to this

1073
00:45:35,430 --> 00:45:41,020
the on court and I apologize if I

1074
00:45:38,590 --> 00:45:42,610
bastard size this definition but the

1075
00:45:41,020 --> 00:45:45,700
best of my knowledge beyond corpus

1076
00:45:42,610 --> 00:45:46,930
basically you have the ability to talk

1077
00:45:45,700 --> 00:45:48,609
to the cloud we're gonna give you an

1078
00:45:46,930 --> 00:45:49,600
access point that's it you can't talk to

1079
00:45:48,610 --> 00:45:51,430
your co-workers you can't talk to

1080
00:45:49,600 --> 00:45:55,200
printers like you have no internal

1081
00:45:51,430 --> 00:45:57,680
network okay thank you

1082
00:45:55,200 --> 00:46:00,680
cool

1083
00:45:57,680 --> 00:46:03,109
just kind of like your corporate never

1084
00:46:00,680 --> 00:46:04,460
his only we play the same as plugging

1085
00:46:03,110 --> 00:46:06,200
into Starbucks you just have internet

1086
00:46:04,460 --> 00:46:09,700
from it I feel like you never just

1087
00:46:06,200 --> 00:46:09,700
giving you Internet access

1088
00:46:10,170 --> 00:46:15,160
and for all the bug bounty and good

1089
00:46:13,090 --> 00:46:17,410
easiest sin the room I strongly

1090
00:46:15,160 --> 00:46:19,120
encourage you to try this out it's

1091
00:46:17,410 --> 00:46:20,770
really really easy to find these bugs

1092
00:46:19,120 --> 00:46:23,589
it's really really easy to find these

1093
00:46:20,770 --> 00:46:26,320
open source stacks ran and like you're

1094
00:46:23,590 --> 00:46:28,300
finding bugs on open source things that

1095
00:46:26,320 --> 00:46:30,160
I ran all across the communities you're

1096
00:46:28,300 --> 00:46:31,690
giving back in a way that really gives

1097
00:46:30,160 --> 00:46:34,120
back more than just a traditional bug

1098
00:46:31,690 --> 00:46:35,710
bounty but you might find pushback which

1099
00:46:34,120 --> 00:46:37,990
I did find at review board they were

1100
00:46:35,710 --> 00:46:41,530
like we didn't write this so we're not

1101
00:46:37,990 --> 00:46:43,330
gonna pay you so that side of it kind of

1102
00:46:41,530 --> 00:46:45,130
sucks but the upside is you got CBE's

1103
00:46:43,330 --> 00:46:46,240
you can talk about it and you're giving

1104
00:46:45,130 --> 00:46:50,550
back to the community in a better way in

1105
00:46:46,240 --> 00:46:50,549
my opinion yep back

1106
00:46:59,890 --> 00:47:08,319
yeah so the question is like how do you

1107
00:47:05,710 --> 00:47:09,910
do timing if you find a bug in an open

1108
00:47:08,319 --> 00:47:13,660
source stack do you first reach out to

1109
00:47:09,910 --> 00:47:15,390
the like hacker one platform or whatever

1110
00:47:13,660 --> 00:47:18,819
where do you reach out to the vendor

1111
00:47:15,390 --> 00:47:20,980
historically I am NOT a copyright expert

1112
00:47:18,819 --> 00:47:23,259
but the way I've treated this is when I

1113
00:47:20,980 --> 00:47:25,329
disclose something to hacker one I am

1114
00:47:23,259 --> 00:47:26,650
giving them intellectual property I am

1115
00:47:25,329 --> 00:47:28,299
giving them an exploit and that belongs

1116
00:47:26,650 --> 00:47:29,380
to them at that point I'm not sure if

1117
00:47:28,299 --> 00:47:30,609
that's I haven't read the Terms and

1118
00:47:29,380 --> 00:47:32,349
Conditions I don't actually know if

1119
00:47:30,609 --> 00:47:33,788
that's the way it works but that's the

1120
00:47:32,349 --> 00:47:35,829
way I've treated it and then I've said

1121
00:47:33,789 --> 00:47:37,989
okay well I'm just closing this to you

1122
00:47:35,829 --> 00:47:39,730
I'm keeping you this to exploit what

1123
00:47:37,989 --> 00:47:41,829
would you like me to do next and nine

1124
00:47:39,730 --> 00:47:43,749
times out of ten probably ten times out

1125
00:47:41,829 --> 00:47:45,369
of ten they're like okay go to go

1126
00:47:43,749 --> 00:47:47,259
immediately disclose that to the vendor

1127
00:47:45,369 --> 00:47:50,739
and then CC us and then we'll stay in

1128
00:47:47,259 --> 00:47:53,470
the loop some other pushback you may get

1129
00:47:50,739 --> 00:47:55,269
is like a company may say well you're

1130
00:47:53,470 --> 00:47:56,680
just like spraying this across every

1131
00:47:55,269 --> 00:47:58,720
single company you can find like that's

1132
00:47:56,680 --> 00:48:00,609
not fair you shouldn't be paid five

1133
00:47:58,720 --> 00:48:02,859
times for the same bug and so I try to

1134
00:48:00,609 --> 00:48:04,029
do it on a one-by-one basis like this

1135
00:48:02,859 --> 00:48:05,650
belongs to you I'm nots closing it to

1136
00:48:04,029 --> 00:48:09,489
anyone else like whatever you want to do

1137
00:48:05,650 --> 00:48:14,910
that's that's what we're gonna do there

1138
00:48:09,489 --> 00:48:25,620
questions cool thanks everyone

1139
00:48:14,910 --> 00:48:25,620
[Applause]

