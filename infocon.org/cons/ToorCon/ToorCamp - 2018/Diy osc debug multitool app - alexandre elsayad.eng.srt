1
00:00:00,030 --> 00:00:06,450
and we're ready to start

2
00:00:03,210 --> 00:00:08,760
so nap next we have DIY OSC debug

3
00:00:06,450 --> 00:00:10,380
multi-tool app Alexander is going to be

4
00:00:08,760 --> 00:00:12,540
presenting so please welcome to the tour

5
00:00:10,380 --> 00:00:17,930
camp stage

6
00:00:12,540 --> 00:00:17,930
[Applause]

7
00:00:42,470 --> 00:00:50,050
folks oh there we go ah thank you for

8
00:00:46,580 --> 00:00:55,760
coming my name is Alexander Elsa and

9
00:00:50,050 --> 00:00:58,220
we'll be talking about debugging simple

10
00:00:55,760 --> 00:01:00,920
systems when you're a little input or

11
00:00:58,220 --> 00:01:02,210
output starved and this is also my

12
00:01:00,920 --> 00:01:03,379
excuse to talk about two things I'm

13
00:01:02,210 --> 00:01:05,390
really passionate about these days which

14
00:01:03,379 --> 00:01:06,560
is OS C which is open sound control and

15
00:01:05,390 --> 00:01:08,869
open source protocol that's really

16
00:01:06,560 --> 00:01:12,410
awesome when we get into details and ESP

17
00:01:08,869 --> 00:01:16,130
32 which is my favorite microcontroller

18
00:01:12,410 --> 00:01:19,130
of the year so first off who the hell am

19
00:01:16,130 --> 00:01:21,649
i I'm a bit of an oddball in this mix I

20
00:01:19,130 --> 00:01:23,720
am by no means a hacker I've been a game

21
00:01:21,649 --> 00:01:25,190
designer for about 16 years started in

22
00:01:23,720 --> 00:01:27,470
the games industry in 98 it's been a

23
00:01:25,190 --> 00:01:30,110
while I've worked for people like Mike

24
00:01:27,470 --> 00:01:32,630
Rhodes back in the day Ubisoft on stuff

25
00:01:30,110 --> 00:01:34,940
like Splinter Cell Mass Effect Bioware

26
00:01:32,630 --> 00:01:36,679
Burke at Riot Games Orkut Felix labs a

27
00:01:34,940 --> 00:01:37,880
little outfit now in Vancouver and I'm

28
00:01:36,680 --> 00:01:40,580
currently working as a senior technical

29
00:01:37,880 --> 00:01:43,580
designer at magic leap where I basically

30
00:01:40,580 --> 00:01:46,250
get to experiment with the future of

31
00:01:43,580 --> 00:01:48,619
virtual and physical interactions so I'm

32
00:01:46,250 --> 00:01:51,500
looking to see how we can inject magic

33
00:01:48,619 --> 00:01:54,520
into reality and have the real world

34
00:01:51,500 --> 00:01:57,500
actually be the output of virtual

35
00:01:54,520 --> 00:01:59,530
decisions and virtual decisions actually

36
00:01:57,500 --> 00:02:01,429
having helped put on real live objects

37
00:01:59,530 --> 00:02:02,690
I'm one of the rare people in the

38
00:02:01,429 --> 00:02:04,580
company who works to keep playing them

39
00:02:02,690 --> 00:02:06,530
around with that so I've been basically

40
00:02:04,580 --> 00:02:09,530
playing at maker for the past year and a

41
00:02:06,530 --> 00:02:11,780
half just making weird happen with

42
00:02:09,530 --> 00:02:13,550
my hands and my eyes and all the good

43
00:02:11,780 --> 00:02:17,470
stuff I won't be able to show too much

44
00:02:13,550 --> 00:02:22,300
of that but that give you some context

45
00:02:17,470 --> 00:02:24,830
in experimenting with hardware I

46
00:02:22,300 --> 00:02:27,770
developed a need which will go into soon

47
00:02:24,830 --> 00:02:28,880
to basically create myself a multi-tool

48
00:02:27,770 --> 00:02:31,730
because I had all these hid

49
00:02:28,880 --> 00:02:33,829
heterogeneous devices and I will need to

50
00:02:31,730 --> 00:02:35,899
debug them I was in put starved and it

51
00:02:33,830 --> 00:02:38,330
was output starved and so I made myself

52
00:02:35,900 --> 00:02:42,379
a little phone app that allowed me to

53
00:02:38,330 --> 00:02:44,239
basically push a configuration to my

54
00:02:42,379 --> 00:02:46,310
phone regardless of what I'm connecting

55
00:02:44,239 --> 00:02:49,459
to without having to edit the app and

56
00:02:46,310 --> 00:02:50,270
just control stuff remotely I needed

57
00:02:49,459 --> 00:02:52,340
something that was platform agnostic

58
00:02:50,270 --> 00:02:53,760
because I'm working on our prior to your

59
00:02:52,340 --> 00:02:56,189
hardware I'm using

60
00:02:53,760 --> 00:02:57,840
I'm losing Arduino Zam using RESP

61
00:02:56,189 --> 00:02:59,780
thirty-two is so he did something to be

62
00:02:57,840 --> 00:03:03,120
able to easily talk to all these devices

63
00:02:59,780 --> 00:03:05,000
I am also not the best programmer so

64
00:03:03,120 --> 00:03:07,769
this is needed to be simple to implement

65
00:03:05,000 --> 00:03:09,150
and I kept coming up with different

66
00:03:07,769 --> 00:03:10,680
ideas so I needed something that was

67
00:03:09,150 --> 00:03:12,930
very versatile and I want me to just

68
00:03:10,680 --> 00:03:14,640
extend fairly easily so this is kind of

69
00:03:12,930 --> 00:03:17,700
what I came up with and all the things I

70
00:03:14,640 --> 00:03:19,708
learned along the way why

71
00:03:17,700 --> 00:03:22,290
basically because yeah if you're using

72
00:03:19,709 --> 00:03:23,700
an Arduino or an ESP 32 on a Wi-Fi

73
00:03:22,290 --> 00:03:26,010
network and it's controlling a set of

74
00:03:23,700 --> 00:03:28,108
LEDs that's all good but when something

75
00:03:26,010 --> 00:03:29,909
doesn't work and you don't have a

76
00:03:28,109 --> 00:03:31,530
display attached your my controller it

77
00:03:29,909 --> 00:03:34,649
can be a pain in the ass that's to debug

78
00:03:31,530 --> 00:03:36,299
and having to constantly if I'm using a

79
00:03:34,650 --> 00:03:38,400
thing that's got external power suddenly

80
00:03:36,299 --> 00:03:39,959
I can't actually have the LEDs connected

81
00:03:38,400 --> 00:03:43,829
while I've got cereal going on with my

82
00:03:39,959 --> 00:03:48,389
laptop and basically I just need to make

83
00:03:43,829 --> 00:03:51,239
myself some better tools so in my

84
00:03:48,389 --> 00:03:52,349
experimentations I came across one of my

85
00:03:51,239 --> 00:03:54,599
favorite protocols right now which is

86
00:03:52,349 --> 00:03:57,149
open Sun control how many people here

87
00:03:54,599 --> 00:03:57,510
have ever seen or used I open sound

88
00:03:57,150 --> 00:04:00,540
control

89
00:03:57,510 --> 00:04:02,849
cool we've got a few comforts I'm pretty

90
00:04:00,540 --> 00:04:04,078
sure that anybody who's used it is in

91
00:04:02,849 --> 00:04:06,858
love of the fact that it is one of the

92
00:04:04,079 --> 00:04:08,910
most lightweight versatile pieces of

93
00:04:06,859 --> 00:04:11,840
communication protocols ever invented

94
00:04:08,910 --> 00:04:15,889
you can use it on so many different

95
00:04:11,840 --> 00:04:19,590
hardware platforms we'll get into that

96
00:04:15,889 --> 00:04:21,389
but it is basically designed to be

97
00:04:19,589 --> 00:04:26,520
platform agnostic and extremely

98
00:04:21,389 --> 00:04:29,760
lightweight it's got at its core a very

99
00:04:26,520 --> 00:04:30,930
simple way of addressing things so when

100
00:04:29,760 --> 00:04:37,800
you're communicating with device that

101
00:04:30,930 --> 00:04:40,620
implements this protocol okay you

102
00:04:37,800 --> 00:04:42,419
basically send packages to specific

103
00:04:40,620 --> 00:04:44,220
addresses and those addresses basically

104
00:04:42,419 --> 00:04:46,500
just look like a folder structure which

105
00:04:44,220 --> 00:04:48,900
makes them very easy to like have good

106
00:04:46,500 --> 00:04:51,870
semantic labeling you can also make

107
00:04:48,900 --> 00:04:53,609
fairly complex trees this is useful for

108
00:04:51,870 --> 00:04:56,639
a number different for a number of

109
00:04:53,610 --> 00:04:58,860
different reasons actually skip here

110
00:04:56,639 --> 00:05:00,870
because for example you can easily do

111
00:04:58,860 --> 00:05:03,419
dress matching so if you want to send a

112
00:05:00,870 --> 00:05:06,870
specific message to a number of

113
00:05:03,419 --> 00:05:07,560
different subsystems that share parts of

114
00:05:06,870 --> 00:05:09,870
an address

115
00:05:07,560 --> 00:05:12,290
you can just use wildcards and so send

116
00:05:09,870 --> 00:05:18,169
all the things to all the you know

117
00:05:12,290 --> 00:05:18,169
signals to all things or specific things

118
00:05:18,260 --> 00:05:24,870
you also can easily when you send a

119
00:05:22,050 --> 00:05:28,350
message append the datatypes of your

120
00:05:24,870 --> 00:05:32,060
choice so it supports 64-bit you know

121
00:05:28,350 --> 00:05:34,800
integers millisecond precision time tags

122
00:05:32,060 --> 00:05:37,680
nasa floating-point numbers strings

123
00:05:34,800 --> 00:05:39,570
characters RGB colors midi signals mean

124
00:05:37,680 --> 00:05:42,060
this thing was originally designed for

125
00:05:39,570 --> 00:05:44,219
real-time audio applications so the

126
00:05:42,060 --> 00:05:46,139
amount of precision you get is extreme

127
00:05:44,220 --> 00:05:51,720
it was useful in a lot of different

128
00:05:46,139 --> 00:05:54,389
contexts yeah I mean this stuff is made

129
00:05:51,720 --> 00:05:55,770
for real-time applications which means

130
00:05:54,389 --> 00:05:57,990
that if you're actually trying to

131
00:05:55,770 --> 00:05:59,849
synchronize multiple effects from

132
00:05:57,990 --> 00:06:01,710
multiple different devices you can

133
00:05:59,850 --> 00:06:03,450
actually make this happen and all you

134
00:06:01,710 --> 00:06:05,669
could also compensate because every

135
00:06:03,450 --> 00:06:07,440
message has this very precise time tag

136
00:06:05,669 --> 00:06:09,060
so you can actually synchronize a bunch

137
00:06:07,440 --> 00:06:11,160
of effects by going I want this to

138
00:06:09,060 --> 00:06:12,750
happen at this time and I know when this

139
00:06:11,160 --> 00:06:16,590
master was was received so I know

140
00:06:12,750 --> 00:06:18,210
exactly how much time to wait you can

141
00:06:16,590 --> 00:06:20,729
also bundle things for simultaneous

142
00:06:18,210 --> 00:06:22,409
effects so you can send a series of

143
00:06:20,729 --> 00:06:24,930
different messages that are all meant to

144
00:06:22,410 --> 00:06:26,160
be treated the exact same time again for

145
00:06:24,930 --> 00:06:27,960
real-time applications where you've got

146
00:06:26,160 --> 00:06:30,930
complex systems there's really nothing

147
00:06:27,960 --> 00:06:34,140
quite like it this is basically what an

148
00:06:30,930 --> 00:06:36,419
OSC stream looks like at the lower level

149
00:06:34,140 --> 00:06:38,310
you've got this OSC message the OSC

150
00:06:36,419 --> 00:06:40,200
message contains an address which will

151
00:06:38,310 --> 00:06:41,850
be very easy for your program to

152
00:06:40,200 --> 00:06:42,930
basically just parse like you can

153
00:06:41,850 --> 00:06:46,020
literally just have a switch statement

154
00:06:42,930 --> 00:06:48,389
that says if I get an a message that the

155
00:06:46,020 --> 00:06:50,130
first bart part of the address is this

156
00:06:48,389 --> 00:06:51,960
then i know to route it to this specific

157
00:06:50,130 --> 00:06:56,639
function and deliver the payload did i

158
00:06:51,960 --> 00:06:59,159
Function the data is very fairly easy to

159
00:06:56,639 --> 00:07:01,530
read it's basically just an array of and

160
00:06:59,160 --> 00:07:03,750
you have an array of the types that this

161
00:07:01,530 --> 00:07:05,549
data is gonna be in so again you don't

162
00:07:03,750 --> 00:07:08,220
have to worry about typing too much and

163
00:07:05,550 --> 00:07:10,440
you just rely on this table structure I

164
00:07:08,220 --> 00:07:12,680
can actually read what the information

165
00:07:10,440 --> 00:07:15,590
is gonna be in your data stream directly

166
00:07:12,680 --> 00:07:18,479
now these messages can be bundled

167
00:07:15,590 --> 00:07:20,489
basically into an OSC bundled so got

168
00:07:18,479 --> 00:07:21,300
like the length of message the OSC

169
00:07:20,490 --> 00:07:23,580
message in

170
00:07:21,300 --> 00:07:25,409
messages encapsulated with the specific

171
00:07:23,580 --> 00:07:27,419
high-precision timestamp for each of

172
00:07:25,409 --> 00:07:29,039
these bundles so again if you even have

173
00:07:27,419 --> 00:07:30,330
some delay in transmissions that vary

174
00:07:29,039 --> 00:07:33,360
from system to system you can actually

175
00:07:30,330 --> 00:07:35,219
compensate for them and then this gets

176
00:07:33,360 --> 00:07:37,800
bundled into a stream which basically

177
00:07:35,220 --> 00:07:40,860
just as a stream of bundles and as it

178
00:07:37,800 --> 00:07:43,530
get received basically you just can have

179
00:07:40,860 --> 00:07:44,580
this constant stream of data fed into

180
00:07:43,530 --> 00:07:49,318
your different functions on different

181
00:07:44,580 --> 00:07:51,090
Hardware the cool thing is that you can

182
00:07:49,319 --> 00:07:53,930
make that happen on UDP you can make

183
00:07:51,090 --> 00:07:57,330
that happen on TCP you can roll your own

184
00:07:53,930 --> 00:07:59,069
you can do this on system on chips on it

185
00:07:57,330 --> 00:08:01,620
supported pretty much their libraries

186
00:07:59,069 --> 00:08:03,990
for this on every little system on chip

187
00:08:01,620 --> 00:08:06,330
I've ever come across platform agnostic

188
00:08:03,990 --> 00:08:07,949
completely you want libraries name your

189
00:08:06,330 --> 00:08:10,469
language somebody's implemented it

190
00:08:07,949 --> 00:08:12,719
you'll want to use high-end tools like

191
00:08:10,469 --> 00:08:14,639
I'm a game designer I use unreal I know

192
00:08:12,719 --> 00:08:17,159
a lot of people use unity they are a

193
00:08:14,639 --> 00:08:19,349
plenty of free use plugins that you just

194
00:08:17,159 --> 00:08:20,909
basically dump it in and you can start

195
00:08:19,349 --> 00:08:22,979
using it extremely simply

196
00:08:20,909 --> 00:08:25,050
implementations for this are so

197
00:08:22,979 --> 00:08:25,590
lightweight that literally in a couple

198
00:08:25,050 --> 00:08:27,539
of hours

199
00:08:25,590 --> 00:08:29,400
you've got bi-directional communication

200
00:08:27,539 --> 00:08:31,080
without ever having to worry about like

201
00:08:29,400 --> 00:08:33,240
sockets or anything

202
00:08:31,080 --> 00:08:35,549
you're just as long as you get your

203
00:08:33,240 --> 00:08:40,349
ports right then you've got

204
00:08:35,549 --> 00:08:41,968
communication we'll get to that now I'm

205
00:08:40,349 --> 00:08:43,829
gonna take a small break to take a book

206
00:08:41,969 --> 00:08:45,930
talk about my other big passion these

207
00:08:43,828 --> 00:08:49,319
days it's probably gonna sound like an

208
00:08:45,930 --> 00:08:51,689
ad cuz I love it so much but no they're

209
00:08:49,320 --> 00:08:53,130
not actually sponsored the ESB 32

210
00:08:51,690 --> 00:08:56,130
microcontroller how many people here

211
00:08:53,130 --> 00:08:59,790
have actually used an e SP 32 oh good I

212
00:08:56,130 --> 00:09:03,390
can get some converts if any of you have

213
00:08:59,790 --> 00:09:06,689
used Arduino 's teensies or any of those

214
00:09:03,390 --> 00:09:08,100
varieties I strongly suggest you take a

215
00:09:06,690 --> 00:09:10,410
look at the new player on the field

216
00:09:08,100 --> 00:09:14,310
they've been around for about two years

217
00:09:10,410 --> 00:09:17,279
like main production they are incredibly

218
00:09:14,310 --> 00:09:21,420
powerful and we'll go through why but

219
00:09:17,279 --> 00:09:23,189
they are basically this small and have

220
00:09:21,420 --> 00:09:25,769
the same amount of GPIO s that you would

221
00:09:23,190 --> 00:09:28,079
expect from most microcontrollers except

222
00:09:25,769 --> 00:09:30,930
that you everything better let's take a

223
00:09:28,079 --> 00:09:32,219
step back in history so espresso if the

224
00:09:30,930 --> 00:09:35,239
company who basically does this chipset

225
00:09:32,220 --> 00:09:38,180
started I think in the early aughts

226
00:09:35,240 --> 00:09:39,620
with the ESP o1 which some of you user

227
00:09:38,180 --> 00:09:41,779
degrees may have actually used this as

228
00:09:39,620 --> 00:09:43,550
your wireless you know gives your Wi-Fi

229
00:09:41,779 --> 00:09:45,830
controller it was like three or four

230
00:09:43,550 --> 00:09:47,599
bucks it gave you Wi-Fi it was simple to

231
00:09:45,830 --> 00:09:49,430
use had pretty good range I mean this

232
00:09:47,600 --> 00:09:51,649
thing even though this is the tiny

233
00:09:49,430 --> 00:09:55,370
antenna this thing could broadcast up

234
00:09:51,649 --> 00:09:56,810
like a hundred meters it's nuts and it

235
00:09:55,370 --> 00:09:58,910
was basically the cheapest Wi-Fi

236
00:09:56,810 --> 00:10:02,689
solution for any Arduino or teensies or

237
00:09:58,910 --> 00:10:06,439
whatnot I supported you know BGN it

238
00:10:02,690 --> 00:10:08,149
could run as an AP which was great but

239
00:10:06,440 --> 00:10:11,779
it was still limited by what ever

240
00:10:08,149 --> 00:10:16,640
controller you plugged it into little

241
00:10:11,779 --> 00:10:19,490
later on the 80 266 came out with a note

242
00:10:16,640 --> 00:10:20,870
MCU basically the architecture is

243
00:10:19,490 --> 00:10:22,520
basically the same chipset you can

244
00:10:20,870 --> 00:10:24,770
actually see like the entire thing is

245
00:10:22,520 --> 00:10:26,209
just right there but it's on a board so

246
00:10:24,770 --> 00:10:27,680
you can actually have like USB and

247
00:10:26,209 --> 00:10:30,529
you've got CPUs and you've got all your

248
00:10:27,680 --> 00:10:34,670
GPIO pins and you can kind of use it as

249
00:10:30,529 --> 00:10:36,380
an Arduino but from what I saw most

250
00:10:34,670 --> 00:10:38,300
people mostly use it as a wireless LED

251
00:10:36,380 --> 00:10:42,290
controller because out of the box I just

252
00:10:38,300 --> 00:10:44,569
did that awesome but and I mean it had

253
00:10:42,290 --> 00:10:46,219
way more memory than an Arduino so you

254
00:10:44,570 --> 00:10:49,130
can actually control will say like a

255
00:10:46,220 --> 00:10:50,899
thousand LEDs with one of these so there

256
00:10:49,130 --> 00:10:52,490
were a lot of like Burning Man projects

257
00:10:50,899 --> 00:10:54,410
that used these for wireless controllers

258
00:10:52,490 --> 00:10:57,740
because they were just super cheap and

259
00:10:54,410 --> 00:11:00,500
pretty reliable I like with 80 K of user

260
00:10:57,740 --> 00:11:04,220
data that's pretty sizable compared to

261
00:11:00,500 --> 00:11:07,910
like the 4k the Arduino house but now

262
00:11:04,220 --> 00:11:09,709
Big Brother is here and the SP 32 is

263
00:11:07,910 --> 00:11:13,310
just freaking awesome this thing

264
00:11:09,709 --> 00:11:15,500
actually has dual-core processor one of

265
00:11:13,310 --> 00:11:17,569
the cores is dedicated of the hardware

266
00:11:15,500 --> 00:11:20,720
so whatever you're actually running on

267
00:11:17,570 --> 00:11:23,300
your sensors won't actually reduce the

268
00:11:20,720 --> 00:11:26,209
rate at which your program runs like

269
00:11:23,300 --> 00:11:28,279
dedicated actual hardware is makes a

270
00:11:26,209 --> 00:11:30,649
really big difference because if you're

271
00:11:28,279 --> 00:11:32,570
running on timings and suddenly because

272
00:11:30,649 --> 00:11:34,760
you've changed how one of your sensor

273
00:11:32,570 --> 00:11:37,010
works you're just you're just running

274
00:11:34,760 --> 00:11:39,649
slower and suddenly your delays don't

275
00:11:37,010 --> 00:11:42,890
work the same it can be messy this makes

276
00:11:39,649 --> 00:11:44,870
it much much easier also a hundred sixty

277
00:11:42,890 --> 00:11:46,939
Hertz at a minimum two hundred two

278
00:11:44,870 --> 00:11:48,220
hundred and forty megahertz I mean this

279
00:11:46,940 --> 00:11:50,530
thing just runs

280
00:11:48,220 --> 00:11:55,000
you can throw a lot of math at it and it

281
00:11:50,530 --> 00:11:57,610
won't care 520 kilobytes of SRAM for a

282
00:11:55,000 --> 00:11:59,920
tiny microcontroller is a lot you can

283
00:11:57,610 --> 00:12:04,780
control tens of thousands of LEDs with

284
00:11:59,920 --> 00:12:07,870
this one chip also on top of surviving

285
00:12:04,780 --> 00:12:09,699
you super-easy 2.4 gigahertz Wi-Fi this

286
00:12:07,870 --> 00:12:12,360
thing also has bluetooth on chip because

287
00:12:09,700 --> 00:12:14,160
you know why not

288
00:12:12,360 --> 00:12:16,720
so just to put things in perspective

289
00:12:14,160 --> 00:12:20,319
like the biggest competitors like the

290
00:12:16,720 --> 00:12:22,930
good Arduinos 2.5 kilobytes of RAM 16

291
00:12:20,320 --> 00:12:25,540
megahertz clock like that's almost 10x

292
00:12:22,930 --> 00:12:28,180
on every metric even the bigger boys

293
00:12:25,540 --> 00:12:31,329
like the duo and the tansy like is still

294
00:12:28,180 --> 00:12:37,390
really far back and sometimes they cost

295
00:12:31,330 --> 00:12:40,600
more now if you're into input outputs

296
00:12:37,390 --> 00:12:42,880
this is where this thing gets incredible

297
00:12:40,600 --> 00:12:45,220
it's got DMA is by default some of these

298
00:12:42,880 --> 00:12:47,500
are just already touched capacitive you

299
00:12:45,220 --> 00:12:48,760
just can just use touch directly on on

300
00:12:47,500 --> 00:12:50,080
the path themselves they're a little

301
00:12:48,760 --> 00:12:51,550
tiny but just connect wires and you've

302
00:12:50,080 --> 00:12:53,950
got you've got touch controls

303
00:12:51,550 --> 00:12:57,569
immediately it's got a DC's nd a C's

304
00:12:53,950 --> 00:13:00,280
take that Arduino take that Raspberry Pi

305
00:12:57,570 --> 00:13:03,580
it's got I to see so you want to have

306
00:13:00,280 --> 00:13:05,740
like good little screens no problems got

307
00:13:03,580 --> 00:13:07,660
UART obviously it's got can - I haven't

308
00:13:05,740 --> 00:13:09,430
played around with it but it seems like

309
00:13:07,660 --> 00:13:12,280
an incredibly powerful way of actually

310
00:13:09,430 --> 00:13:15,400
doing hardware networking of multiple

311
00:13:12,280 --> 00:13:18,280
devices super low latencies

312
00:13:15,400 --> 00:13:19,840
it's got SPI it's got AI 2's I don't

313
00:13:18,280 --> 00:13:22,329
know if anybody's you any of you have

314
00:13:19,840 --> 00:13:25,180
ever tried to run audio through my

315
00:13:22,330 --> 00:13:27,310
controllers but it can get gnarly if

316
00:13:25,180 --> 00:13:32,319
you're actually looking for quality

317
00:13:27,310 --> 00:13:34,660
audio there's anything under i2s will

318
00:13:32,320 --> 00:13:38,620
just shred it like there's just no way

319
00:13:34,660 --> 00:13:40,449
of using analog GPIO or power modulation

320
00:13:38,620 --> 00:13:43,330
to have sound that look that sounds good

321
00:13:40,450 --> 00:13:44,770
it's just just not made for it this

322
00:13:43,330 --> 00:13:46,270
thing will it's actually designed from

323
00:13:44,770 --> 00:13:49,079
the ground up to be and it is completely

324
00:13:46,270 --> 00:13:51,340
supported on a number of these pins

325
00:13:49,080 --> 00:13:52,870
obviously it also supports power

326
00:13:51,340 --> 00:13:54,310
modulation but that's you know that's

327
00:13:52,870 --> 00:13:59,230
pretty much every microcontroller these

328
00:13:54,310 --> 00:14:02,209
days as far as programming for it you

329
00:13:59,230 --> 00:14:05,090
also have your your choice

330
00:14:02,210 --> 00:14:07,250
off the bat it supports the actual

331
00:14:05,090 --> 00:14:09,650
Arduino IDE so if you're already using

332
00:14:07,250 --> 00:14:12,440
that you can just continue using that

333
00:14:09,650 --> 00:14:15,140
it'll just work there are some library

334
00:14:12,440 --> 00:14:17,510
support issues I mean this thing has

335
00:14:15,140 --> 00:14:19,460
only been around really in lots of hands

336
00:14:17,510 --> 00:14:21,260
for about a year so there's a lot of

337
00:14:19,460 --> 00:14:23,480
work on libraries but I haven't come

338
00:14:21,260 --> 00:14:26,750
across anything yet that I wasn't able

339
00:14:23,480 --> 00:14:28,940
to find a specific library for that does

340
00:14:26,750 --> 00:14:30,440
mean I'm using neopixel bus for LEDs

341
00:14:28,940 --> 00:14:32,300
instead of like fast LED which always

342
00:14:30,440 --> 00:14:33,640
used you but that's about it there's

343
00:14:32,300 --> 00:14:36,439
always a good solution

344
00:14:33,640 --> 00:14:39,370
espresso also provides their own IOT

345
00:14:36,440 --> 00:14:43,070
development framework but you can use

346
00:14:39,370 --> 00:14:46,360
Python you can use Lua you can I mean it

347
00:14:43,070 --> 00:14:49,190
is native languages actually see so

348
00:14:46,360 --> 00:14:51,110
basically if you program there is a

349
00:14:49,190 --> 00:14:54,290
comfortable place for you guys on that

350
00:14:51,110 --> 00:14:56,630
platform and I mean there's just so many

351
00:14:54,290 --> 00:14:59,870
this is just a small portion but lots of

352
00:14:56,630 --> 00:15:03,790
people have just made plug-ins for the

353
00:14:59,870 --> 00:15:05,990
ESB 32 on whatever ID you want to use

354
00:15:03,790 --> 00:15:08,500
and wait there's more

355
00:15:05,990 --> 00:15:11,000
this thing's actually 11 bucks on Amazon

356
00:15:08,500 --> 00:15:13,160
it's actually cheaper than most Arduino

357
00:15:11,000 --> 00:15:14,510
zhh this makes no sense to me like why

358
00:15:13,160 --> 00:15:16,969
are not and why isn't everybody

359
00:15:14,510 --> 00:15:18,560
experiment with this thing partially

360
00:15:16,970 --> 00:15:20,240
because not a lot of people are just you

361
00:15:18,560 --> 00:15:21,859
know they're just used to using older

362
00:15:20,240 --> 00:15:24,620
microcontrollers but this thing is just

363
00:15:21,860 --> 00:15:26,990
amazing I just strongly recommend you

364
00:15:24,620 --> 00:15:29,960
play around with it it's got a few weird

365
00:15:26,990 --> 00:15:31,310
things to get used to like sometimes

366
00:15:29,960 --> 00:15:33,260
connecting to it can can be a little

367
00:15:31,310 --> 00:15:35,750
weird so it's got to reset buttons but

368
00:15:33,260 --> 00:15:37,520
outside of that it's totally worth you

369
00:15:35,750 --> 00:15:39,650
know the little bit of friction that's

370
00:15:37,520 --> 00:15:41,449
doing that there still is and if this

371
00:15:39,650 --> 00:15:43,400
community grows is just you know so far

372
00:15:41,450 --> 00:15:46,460
it's just gonna get better all right

373
00:15:43,400 --> 00:15:48,170
back to our regularly scheduled

374
00:15:46,460 --> 00:15:50,300
programming let's go back to what we're

375
00:15:48,170 --> 00:15:52,339
here to talk about which is my debug app

376
00:15:50,300 --> 00:15:55,490
which basically uses these systems

377
00:15:52,340 --> 00:16:09,970
together I'm going to show you a little

378
00:15:55,490 --> 00:16:09,970
use case of or not okay

379
00:16:14,220 --> 00:16:21,450
so this is one of the things I've been

380
00:16:17,040 --> 00:16:24,530
toying around with oh I see

381
00:16:21,450 --> 00:16:24,530
offline apparently

382
00:16:29,150 --> 00:16:35,420
I may just have to come back to this

383
00:16:30,800 --> 00:16:37,430
later oh there we go we're good so I

384
00:16:35,420 --> 00:16:40,699
call this the world's most expensive

385
00:16:37,430 --> 00:16:43,459
vibrate because it basically uses light

386
00:16:40,700 --> 00:16:48,260
and magic leap device to control a board

387
00:16:43,460 --> 00:16:49,580
of 880 LEDs with your finger without

388
00:16:48,260 --> 00:16:52,580
actually having to touch anything so

389
00:16:49,580 --> 00:16:53,630
this is gesture based uses expensive

390
00:16:52,580 --> 00:16:56,390
piece of hardware that's not released

391
00:16:53,630 --> 00:16:58,100
yet and you can basically just use your

392
00:16:56,390 --> 00:17:00,430
finger at a distance and just draw your

393
00:16:58,100 --> 00:17:00,430
heart's content

394
00:17:00,680 --> 00:17:06,579
this is fairly real time and I'm

395
00:17:03,890 --> 00:17:09,740
basically passing in RGB values directly

396
00:17:06,579 --> 00:17:12,020
interpreted from a gesture directly to

397
00:17:09,740 --> 00:17:21,170
an small e SB microcontroller over Wi-Fi

398
00:17:12,020 --> 00:17:24,619
in basically real-time but when things

399
00:17:21,170 --> 00:17:32,320
go wrong it can get hairy to figure out

400
00:17:24,619 --> 00:17:32,320
why which is why I made this

401
00:17:34,480 --> 00:17:39,440
so at first I was like oh there's this

402
00:17:37,130 --> 00:17:40,640
thing it's called touchosc it can it can

403
00:17:39,440 --> 00:17:43,250
do all these things that I want to do

404
00:17:40,640 --> 00:17:45,020
and then I realized problem is that you

405
00:17:43,250 --> 00:17:47,060
need this proprietary piece of software

406
00:17:45,020 --> 00:17:49,340
to actually make layouts it's really

407
00:17:47,060 --> 00:17:51,169
cool if you're doing music because it's

408
00:17:49,340 --> 00:17:53,510
got all the right tools to do like

409
00:17:51,170 --> 00:17:55,520
little faders and a little sliders and

410
00:17:53,510 --> 00:17:57,560
volume controls and you can put your own

411
00:17:55,520 --> 00:18:00,530
text and colors and all that jazz it's

412
00:17:57,560 --> 00:18:02,780
pretty good um but if you're really

413
00:18:00,530 --> 00:18:05,270
looking for custom functionality say I

414
00:18:02,780 --> 00:18:07,100
want to push a string well that's not

415
00:18:05,270 --> 00:18:08,389
gonna help this is really made to be an

416
00:18:07,100 --> 00:18:11,179
extension of your synthesizer controls

417
00:18:08,390 --> 00:18:14,660
it's really made for people who do audio

418
00:18:11,180 --> 00:18:17,240
and video like live which is great this

419
00:18:14,660 --> 00:18:19,520
thing again it's it's not a hard-coded

420
00:18:17,240 --> 00:18:21,530
interface you just basically push a file

421
00:18:19,520 --> 00:18:23,330
with a specific file format to use their

422
00:18:21,530 --> 00:18:25,760
editor you know make a thing you can

423
00:18:23,330 --> 00:18:27,679
also in theory make those files on the

424
00:18:25,760 --> 00:18:29,840
fly if you understand the structure well

425
00:18:27,680 --> 00:18:33,080
enough but it's it's a little clunky and

426
00:18:29,840 --> 00:18:34,669
it's you know very proprietary here and

427
00:18:33,080 --> 00:18:37,399
the apps not free like there's an app

428
00:18:34,670 --> 00:18:39,710
for iOS there's an app for Android and a

429
00:18:37,400 --> 00:18:41,390
lot of people use them because for three

430
00:18:39,710 --> 00:18:43,610
or four bucks it's the same fellowman

431
00:18:41,390 --> 00:18:47,510
time but if you've got some needs I can

432
00:18:43,610 --> 00:18:49,070
tell you you know few tens of hours you

433
00:18:47,510 --> 00:18:52,580
can get to something much much better

434
00:18:49,070 --> 00:18:54,649
and much way more flexible so my design

435
00:18:52,580 --> 00:18:56,480
goals for this app were pretty simple I

436
00:18:54,650 --> 00:18:59,420
wanted something that I could actually

437
00:18:56,480 --> 00:19:00,950
code and I'm not much of a coder and I

438
00:18:59,420 --> 00:19:02,540
needed to be extensible because I knew I

439
00:19:00,950 --> 00:19:04,520
was gonna make more types of hardware

440
00:19:02,540 --> 00:19:06,230
and I didn't want to have to rewrite I

441
00:19:04,520 --> 00:19:08,660
really liked hard code too much in

442
00:19:06,230 --> 00:19:11,540
my app I wanted to be able to run it on

443
00:19:08,660 --> 00:19:13,790
my PC on my laptop on my phone on other

444
00:19:11,540 --> 00:19:18,260
people's phones on multiple like on iOS

445
00:19:13,790 --> 00:19:19,940
on Android just because I give a lot of

446
00:19:18,260 --> 00:19:22,240
demos and sometimes being able to like

447
00:19:19,940 --> 00:19:27,920
cheat during a demo is really powerful

448
00:19:22,240 --> 00:19:29,960
and I wanted to also allow the applicant

449
00:19:27,920 --> 00:19:32,060
the control the controlling thing like

450
00:19:29,960 --> 00:19:33,590
the the application the hardware that

451
00:19:32,060 --> 00:19:35,629
I'm using to be able to push the

452
00:19:33,590 --> 00:19:36,169
configuration so that no matter what I'm

453
00:19:35,630 --> 00:19:37,790
using

454
00:19:36,170 --> 00:19:42,470
I get custom controls that are meant for

455
00:19:37,790 --> 00:19:45,170
that IOT thing or that application and I

456
00:19:42,470 --> 00:19:47,030
wanted to basically support clients that

457
00:19:45,170 --> 00:19:47,270
were either applications running on my

458
00:19:47,030 --> 00:19:49,750
phone

459
00:19:47,270 --> 00:19:54,139
own applications running on my PC or

460
00:19:49,750 --> 00:19:56,660
hardware running custom firmware made it

461
00:19:54,140 --> 00:19:57,860
easy for myself basically so basically

462
00:19:56,660 --> 00:19:59,110
this is what it looks like it's fairly

463
00:19:57,860 --> 00:20:02,540
bare-bones

464
00:19:59,110 --> 00:20:04,219
by default there's this page which is

465
00:20:02,540 --> 00:20:05,510
the connection page you basically type

466
00:20:04,220 --> 00:20:07,670
in IP and a port you can connect to it

467
00:20:05,510 --> 00:20:09,620
if there's a noisy servers receiving

468
00:20:07,670 --> 00:20:12,280
you'll just get a connected message

469
00:20:09,620 --> 00:20:16,219
otherwise I've also implemented a basic

470
00:20:12,280 --> 00:20:18,740
registration system so with OSC is

471
00:20:16,220 --> 00:20:20,990
fairly simple to just send messages to

472
00:20:18,740 --> 00:20:22,670
whatever subnet you're in at 2:55 and

473
00:20:20,990 --> 00:20:24,440
then anybody else who's listening on

474
00:20:22,670 --> 00:20:26,900
that port will receive that OSC message

475
00:20:24,440 --> 00:20:29,000
so I use that to basically populate a

476
00:20:26,900 --> 00:20:30,260
list and say hey this guy is ready for

477
00:20:29,000 --> 00:20:31,640
connect hey this guy is ready for

478
00:20:30,260 --> 00:20:33,230
connect so if I have four or five

479
00:20:31,640 --> 00:20:35,300
objects that are currently waiting to be

480
00:20:33,230 --> 00:20:36,800
debugged I can just see them appear on

481
00:20:35,300 --> 00:20:38,899
the list click the connect button and

482
00:20:36,800 --> 00:20:42,919
boom I'm now connected that thing and I

483
00:20:38,900 --> 00:20:44,930
can debug it next I can actually push

484
00:20:42,920 --> 00:20:46,610
configuration different tabs in case I

485
00:20:44,930 --> 00:20:48,020
get really fancy and have lots of

486
00:20:46,610 --> 00:20:49,669
different controls I basically have

487
00:20:48,020 --> 00:20:51,080
these four tabs you're looking to

488
00:20:49,670 --> 00:20:52,550
imagine they make that configurable so I

489
00:20:51,080 --> 00:20:55,760
can have as many times as I want but you

490
00:20:52,550 --> 00:20:58,070
know four is enough for my needs and I

491
00:20:55,760 --> 00:20:59,629
can basically create widgets on the fly

492
00:20:58,070 --> 00:21:02,149
and when I receive configuration

493
00:20:59,630 --> 00:21:03,620
information to say okay I've got a text

494
00:21:02,150 --> 00:21:05,600
field and when I press the submit button

495
00:21:03,620 --> 00:21:07,459
it will send it to the device with the

496
00:21:05,600 --> 00:21:10,159
right address and send that string

497
00:21:07,460 --> 00:21:11,480
around I could do that for floats I can

498
00:21:10,160 --> 00:21:13,370
have my state button so that actually

499
00:21:11,480 --> 00:21:14,750
tells me if it's true or false I could

500
00:21:13,370 --> 00:21:17,540
just have an event button which is just

501
00:21:14,750 --> 00:21:19,460
spam it and just something happens and

502
00:21:17,540 --> 00:21:22,149
you've got sliders so you can like just

503
00:21:19,460 --> 00:21:32,240
have fun with actual touch touchy-feely

504
00:21:22,150 --> 00:21:34,370
variables and lastly I made myself a

505
00:21:32,240 --> 00:21:36,200
little logging pane basically any

506
00:21:34,370 --> 00:21:38,570
message that I send to the slash log

507
00:21:36,200 --> 00:21:41,960
address just gets printed there so at

508
00:21:38,570 --> 00:21:44,810
any time I can say oh yeah cool my Wi-Fi

509
00:21:41,960 --> 00:21:46,730
is actually connected and well actually

510
00:21:44,810 --> 00:21:48,500
you'd be hard to get there if their

511
00:21:46,730 --> 00:21:50,990
Wi-Fi is not connected but at least I

512
00:21:48,500 --> 00:21:53,570
get a confirmation and I can actually as

513
00:21:50,990 --> 00:21:56,000
the process goes in and as the hardware

514
00:21:53,570 --> 00:21:58,490
initializes I can actually show what the

515
00:21:56,000 --> 00:22:00,050
status of any system is and if I'm

516
00:21:58,490 --> 00:22:01,020
giving a demo that's got say multi

517
00:22:00,050 --> 00:22:03,450
stages I

518
00:22:01,020 --> 00:22:05,310
can actually have this say like alright

519
00:22:03,450 --> 00:22:07,290
I mean this stage of this software demo

520
00:22:05,310 --> 00:22:11,460
if I have to reset then I know what to

521
00:22:07,290 --> 00:22:13,560
do if something breaks that I know exact

522
00:22:11,460 --> 00:22:15,540
state is that where that broke or you

523
00:22:13,560 --> 00:22:19,800
know that I did I just fail out of the

524
00:22:15,540 --> 00:22:20,909
previous case so going to detail for

525
00:22:19,800 --> 00:22:24,060
registration it's fairly simple

526
00:22:20,910 --> 00:22:25,530
broadcast a message to 255 to a specific

527
00:22:24,060 --> 00:22:28,169
client port this is the only bit of

528
00:22:25,530 --> 00:22:31,800
information that basically both sides

529
00:22:28,170 --> 00:22:36,630
have to agree on so you have to have the

530
00:22:31,800 --> 00:22:37,950
client port of the of the app know which

531
00:22:36,630 --> 00:22:41,190
you know if you're doing both ends

532
00:22:37,950 --> 00:22:42,840
that's fairly simple basically send a

533
00:22:41,190 --> 00:22:45,270
message to the address slash register

534
00:22:42,840 --> 00:22:50,220
the data in it is just an int is the

535
00:22:45,270 --> 00:22:51,650
port the server in this case like the

536
00:22:50,220 --> 00:22:54,630
the device I'm trying to control was

537
00:22:51,650 --> 00:22:56,670
sorry the client is whatever device I'm

538
00:22:54,630 --> 00:22:58,950
trying to control the server is my phone

539
00:22:56,670 --> 00:23:01,050
in this case running the app phone

540
00:22:58,950 --> 00:23:03,150
receives the register has the port

541
00:23:01,050 --> 00:23:06,180
basically adds it to a list of clients I

542
00:23:03,150 --> 00:23:08,130
now know an IP and I know a port it has

543
00:23:06,180 --> 00:23:10,260
an index I know how to communicate with

544
00:23:08,130 --> 00:23:11,520
that thing reliably even though I didn't

545
00:23:10,260 --> 00:23:15,810
know what any of that information was

546
00:23:11,520 --> 00:23:17,490
before the phone can then reply with a

547
00:23:15,810 --> 00:23:18,360
handshake message doesn't have to have

548
00:23:17,490 --> 00:23:20,100
any data in it

549
00:23:18,360 --> 00:23:22,530
there's just to make sure that both ends

550
00:23:20,100 --> 00:23:24,330
understand that a communication channel

551
00:23:22,530 --> 00:23:26,700
has been open this allows me for example

552
00:23:24,330 --> 00:23:30,389
to say hey you're connected on on the

553
00:23:26,700 --> 00:23:32,250
receiving end once registration is done

554
00:23:30,390 --> 00:23:34,050
and both sides agree they can you know

555
00:23:32,250 --> 00:23:36,500
share information and both have IP

556
00:23:34,050 --> 00:23:38,909
addresses and ports for the other side

557
00:23:36,500 --> 00:23:42,990
whatever I'm trying to control just

558
00:23:38,910 --> 00:23:45,030
sends a message to your s / setup in my

559
00:23:42,990 --> 00:23:46,980
specific implementation I just basically

560
00:23:45,030 --> 00:23:48,629
use an end from 0 to 4 for the type of

561
00:23:46,980 --> 00:23:52,560
widget I'm gonna spawn so whether it's a

562
00:23:48,630 --> 00:23:56,010
tax float state event or slider the

563
00:23:52,560 --> 00:23:58,889
label that appears so if I go back here

564
00:23:56,010 --> 00:23:59,250
see this this here is the text appear

565
00:23:58,890 --> 00:24:00,990
here sir

566
00:23:59,250 --> 00:24:07,380
that also happens to be the address I'm

567
00:24:00,990 --> 00:24:10,710
sending stuff to just keep it simple and

568
00:24:07,380 --> 00:24:12,600
then which tab I want this control to be

569
00:24:10,710 --> 00:24:14,550
in so I can actually you know group

570
00:24:12,600 --> 00:24:16,740
things into logical groups if I

571
00:24:14,550 --> 00:24:18,750
to have like these are actually like tab

572
00:24:16,740 --> 00:24:20,550
one is going to be me being able to

573
00:24:18,750 --> 00:24:23,670
override next chapter previous chapter

574
00:24:20,550 --> 00:24:25,290
and a thing and then the fourth page for

575
00:24:23,670 --> 00:24:27,750
example is general debug where it's

576
00:24:25,290 --> 00:24:30,240
reset buttons or send a generic message

577
00:24:27,750 --> 00:24:32,700
for example and then you can also set

578
00:24:30,240 --> 00:24:37,050
default values in your setup information

579
00:24:32,700 --> 00:24:39,270
so that the slider or the text value

580
00:24:37,050 --> 00:24:40,980
actually has pop you know information

581
00:24:39,270 --> 00:24:42,240
populated to give you an idea of what

582
00:24:40,980 --> 00:24:46,830
type of data is actually expected on the

583
00:24:42,240 --> 00:24:49,620
other end so this is an example of

584
00:24:46,830 --> 00:24:51,659
implementation in unreal unreal may not

585
00:24:49,620 --> 00:24:53,310
be a very common tool here but does just

586
00:24:51,660 --> 00:24:55,980
give you an idea of visual scripting

587
00:24:53,310 --> 00:24:58,679
basically the general idea you get some

588
00:24:55,980 --> 00:25:00,180
information you spawn widgets

589
00:24:58,680 --> 00:25:03,060
dynamically there are a number of

590
00:25:00,180 --> 00:25:05,520
different tools that will do that if you

591
00:25:03,060 --> 00:25:08,490
use iOS obviously cocoa is great at just

592
00:25:05,520 --> 00:25:09,629
spawning stuff but there's a number of

593
00:25:08,490 --> 00:25:12,090
different ways you can create your who I

594
00:25:09,630 --> 00:25:13,710
just choose your tool of choice and this

595
00:25:12,090 --> 00:25:14,909
will be very easy to implement because

596
00:25:13,710 --> 00:25:16,380
you just basically get an array of

597
00:25:14,910 --> 00:25:20,010
information and just use that

598
00:25:16,380 --> 00:25:23,220
information to spy in controls step 3

599
00:25:20,010 --> 00:25:24,830
now that you actually have an app that's

600
00:25:23,220 --> 00:25:27,360
populated with all your controls

601
00:25:24,830 --> 00:25:30,240
it's very trivial for that app to go

602
00:25:27,360 --> 00:25:31,500
okay I have the address I have a payload

603
00:25:30,240 --> 00:25:33,840
that the user is just entered and he

604
00:25:31,500 --> 00:25:36,210
presses a submit button I'm gonna create

605
00:25:33,840 --> 00:25:37,590
an OSC message send that over Wi-Fi of

606
00:25:36,210 --> 00:25:40,320
the right port because I know what I'm

607
00:25:37,590 --> 00:25:43,169
connected to and the thing can now just

608
00:25:40,320 --> 00:25:44,189
receive that data and do whatever you

609
00:25:43,170 --> 00:25:46,890
want to do with it

610
00:25:44,190 --> 00:25:48,300
I'll show an example in Arduino IDE what

611
00:25:46,890 --> 00:25:50,340
that looks like but basically you're

612
00:25:48,300 --> 00:25:51,750
sending a message to slash label and the

613
00:25:50,340 --> 00:25:55,290
payload is whatever data you want to use

614
00:25:51,750 --> 00:25:57,180
for that event and then slash log I just

615
00:25:55,290 --> 00:25:58,889
uses of general purpose tools to just

616
00:25:57,180 --> 00:26:02,310
send strings just get a status report

617
00:25:58,890 --> 00:26:04,590
and everything and usually I just every

618
00:26:02,310 --> 00:26:06,840
time there's an event that could trigger

619
00:26:04,590 --> 00:26:08,669
a log I just call it an update log and

620
00:26:06,840 --> 00:26:10,530
the update log just fetches all the

621
00:26:08,670 --> 00:26:14,340
variables I want print it out and just

622
00:26:10,530 --> 00:26:16,680
spits it out the log so for example this

623
00:26:14,340 --> 00:26:19,290
is one implementation in Arduino it's

624
00:26:16,680 --> 00:26:23,370
incredibly simple you have a nudey UDP

625
00:26:19,290 --> 00:26:25,760
packet that comes in and the OSC library

626
00:26:23,370 --> 00:26:28,439
basically gives you a dispatch function

627
00:26:25,760 --> 00:26:30,600
this packs function says okay I've just

628
00:26:28,440 --> 00:26:34,620
received a message at the address test

629
00:26:30,600 --> 00:26:36,090
float trigger the function that's called

630
00:26:34,620 --> 00:26:37,830
right there I call them the same just

631
00:26:36,090 --> 00:26:39,929
for shits and giggles but you get this

632
00:26:37,830 --> 00:26:41,970
basically can call any function and will

633
00:26:39,930 --> 00:26:43,680
pass in as a parameter the data that was

634
00:26:41,970 --> 00:26:45,690
sent to that package to that to that

635
00:26:43,680 --> 00:26:48,780
address which means that now we just

636
00:26:45,690 --> 00:26:50,940
have a function receiving data just like

637
00:26:48,780 --> 00:26:53,010
you would call any other function we can

638
00:26:50,940 --> 00:26:54,060
just treat it as its unitary thing so

639
00:26:53,010 --> 00:26:55,260
that means that you can actually call a

640
00:26:54,060 --> 00:26:57,149
function that already exists you don't

641
00:26:55,260 --> 00:26:59,010
have to be specifically for that use

642
00:26:57,150 --> 00:27:00,450
which means that you can easily debug

643
00:26:59,010 --> 00:27:02,550
existing functions as opposed to just

644
00:27:00,450 --> 00:27:03,300
you know make custom ones for for the

645
00:27:02,550 --> 00:27:05,399
fruity bug

646
00:27:03,300 --> 00:27:08,550
yeah that's literally all you need to do

647
00:27:05,400 --> 00:27:11,150
to start using external data it's just

648
00:27:08,550 --> 00:27:17,639
that simple you just include library and

649
00:27:11,150 --> 00:27:19,260
then dispatch don't do this a little

650
00:27:17,640 --> 00:27:23,130
quicker than I thought but step 4

651
00:27:19,260 --> 00:27:24,990
obviously profit if you jot this address

652
00:27:23,130 --> 00:27:28,080
down this is basically tinyurl.com dot

653
00:27:24,990 --> 00:27:30,500
slash o SC debug app I actually will

654
00:27:28,080 --> 00:27:33,899
provide you everything you've seen here

655
00:27:30,500 --> 00:27:36,570
you will get an Arduino art

656
00:27:33,900 --> 00:27:37,830
implementation for e SP 32 of a D simple

657
00:27:36,570 --> 00:27:40,110
debug app where you can just basically

658
00:27:37,830 --> 00:27:42,720
log to serial everything that you're

659
00:27:40,110 --> 00:27:45,929
receiving you will actually get a

660
00:27:42,720 --> 00:27:47,210
packaged apk version of my Android build

661
00:27:45,930 --> 00:27:49,490
for this

662
00:27:47,210 --> 00:27:51,210
it's just functional so you can just

663
00:27:49,490 --> 00:27:54,690
follow the instructions in the

664
00:27:51,210 --> 00:27:57,390
documentation and it will just work and

665
00:27:54,690 --> 00:28:00,390
I also provide unreeled project files

666
00:27:57,390 --> 00:28:01,440
for unreal editor 4.18 so if you want to

667
00:28:00,390 --> 00:28:03,360
play around with it

668
00:28:01,440 --> 00:28:06,690
you'll see how I'm spawning my widgets

669
00:28:03,360 --> 00:28:09,240
dynamically for the app and probably

670
00:28:06,690 --> 00:28:11,970
also get a you know it's also very

671
00:28:09,240 --> 00:28:14,400
trivial to implement this and have say

672
00:28:11,970 --> 00:28:16,860
an unreal game be the receiver or the

673
00:28:14,400 --> 00:28:19,020
thing that you control which makes it

674
00:28:16,860 --> 00:28:21,929
incredibly fun when you're actually

675
00:28:19,020 --> 00:28:23,790
debugging while this thing's say on a in

676
00:28:21,930 --> 00:28:25,500
a wireless headset that you're walking

677
00:28:23,790 --> 00:28:28,740
around with that you can just start

678
00:28:25,500 --> 00:28:31,580
using your PC and have full full logging

679
00:28:28,740 --> 00:28:33,600
over wireless and trigger things at will

680
00:28:31,580 --> 00:28:36,120
just you know from the comfort of your

681
00:28:33,600 --> 00:28:38,100
phone or so I use it a lot for demos

682
00:28:36,120 --> 00:28:39,750
because then if something goes wrong I

683
00:28:38,100 --> 00:28:41,860
know I can overwrite anything and the

684
00:28:39,750 --> 00:28:43,510
user usually doesn't know that

685
00:28:41,860 --> 00:28:46,469
actually doing anything just oh you're

686
00:28:43,510 --> 00:28:49,990
stuck oh yeah it's fine

687
00:28:46,470 --> 00:28:57,610
and that's all that's all I got do we

688
00:28:49,990 --> 00:29:39,490
have any questions by all means what

689
00:28:57,610 --> 00:29:41,199
good use has OSC implemented you can

690
00:29:39,490 --> 00:29:43,750
totally use it again

691
00:29:41,200 --> 00:29:45,190
and in fact I monkey tactic to allow for

692
00:29:43,750 --> 00:29:48,100
all the rest of the data time stone was

693
00:29:45,190 --> 00:29:51,700
using and it's just fantastic it just

694
00:29:48,100 --> 00:29:58,750
runs in your mainly I've used it in

695
00:29:51,700 --> 00:30:01,179
microcontrollers stm32 SE e SP 32 ec2

696
00:29:58,750 --> 00:30:04,059
six sixes and in fact I had all three

697
00:30:01,179 --> 00:30:07,090
busts together so a message could be

698
00:30:04,059 --> 00:30:11,918
arbitrated through from an Android

699
00:30:07,090 --> 00:30:16,510
device Bruni is t66 through to the SP

700
00:30:11,919 --> 00:30:18,670
and all all traffic was actually max

701
00:30:16,510 --> 00:30:22,690
wrote it is the most

702
00:30:18,670 --> 00:30:25,480
useful protocol and the overhead is tiny

703
00:30:22,690 --> 00:30:26,740
absolutely tiny it's like the string at

704
00:30:25,480 --> 00:30:29,590
the beginning you can minimize your

705
00:30:26,740 --> 00:30:31,570
strings if you want you know just have

706
00:30:29,590 --> 00:30:35,280
addresses if you really want there's a

707
00:30:31,570 --> 00:30:40,629
special spectrum ads on uses it instead

708
00:30:35,280 --> 00:30:44,399
and beyond that it's like one extra word

709
00:30:40,630 --> 00:30:47,110
or 32 bits and then your data I

710
00:30:44,400 --> 00:30:53,920
encapsulated over serial I've fired it

711
00:30:47,110 --> 00:30:55,780
over USB I've used it over UDP TCP I've

712
00:30:53,920 --> 00:30:59,970
had passed through through them I've

713
00:30:55,780 --> 00:30:59,970
actually even been an over WebKit

714
00:31:02,790 --> 00:31:08,200
writing about the JavaScript took me a

715
00:31:05,410 --> 00:31:10,000
day a lot of JavaScript developer and

716
00:31:08,200 --> 00:31:10,630
that's to make the whole library it's so

717
00:31:10,000 --> 00:31:13,390
simple

718
00:31:10,630 --> 00:31:15,250
yeah I know I I served with OGS with it

719
00:31:13,390 --> 00:31:17,170
and it was again trivial to implement

720
00:31:15,250 --> 00:31:19,630
like an hour and I was already

721
00:31:17,170 --> 00:31:27,070
communicating back and forth I said

722
00:31:19,630 --> 00:31:28,600
goodbye arrest calls oh and side note of

723
00:31:27,070 --> 00:31:32,560
the other thing that I'm promoting ESP

724
00:31:28,600 --> 00:31:34,449
32s over-the-air updatable because it

725
00:31:32,560 --> 00:31:37,060
actually has writable problem that you

726
00:31:34,450 --> 00:31:39,610
can actually write to while it's running

727
00:31:37,060 --> 00:31:40,450
so again yeah you can just basically do

728
00:31:39,610 --> 00:31:53,199
anything you want with it

729
00:31:40,450 --> 00:31:54,760
oh please fair I recommend actually yeah

730
00:31:53,200 --> 00:31:56,800
I recommend it makes their own power for

731
00:31:54,760 --> 00:32:02,250
these guys but I mean they're powerful

732
00:31:56,800 --> 00:32:02,250
so it's gonna happen well

733
00:32:07,270 --> 00:32:14,420
um oscy keep actually be encrypted that

734
00:32:11,720 --> 00:32:17,300
actually has some support I believe but

735
00:32:14,420 --> 00:32:21,290
specification to is actually gonna have

736
00:32:17,300 --> 00:32:24,260
some more embedded support for it but by

737
00:32:21,290 --> 00:32:26,330
default I my current understanding is

738
00:32:24,260 --> 00:32:28,940
that the addresses are basically going

739
00:32:26,330 --> 00:32:31,520
to be clearer but he dat if you have

740
00:32:28,940 --> 00:32:33,620
insight even be encrypted that's just a

741
00:32:31,520 --> 00:32:35,570
question of like both ends agreeing on

742
00:32:33,620 --> 00:32:40,219
on with the encryption but that's gonna

743
00:32:35,570 --> 00:32:43,159
be I mean also I mean this is UDP packet

744
00:32:40,220 --> 00:32:43,929
or a TCP packet so you can also just do

745
00:32:43,160 --> 00:32:46,910
your encryption

746
00:32:43,929 --> 00:32:49,970
after you've crafted your oh I see

747
00:32:46,910 --> 00:32:53,000
bundle encrypt it decrypt it as a packet

748
00:32:49,970 --> 00:33:00,950
and then you're fine because it's it's

749
00:32:53,000 --> 00:33:05,420
loaded with just a data stream oh yeah

750
00:33:00,950 --> 00:33:07,780
uh oh s see does currently it only uses

751
00:33:05,420 --> 00:33:07,780
UDP

752
00:33:11,860 --> 00:33:16,340
yeah yeah yeah you basically the other

753
00:33:14,720 --> 00:33:17,390
the other prerequisites that make sure

754
00:33:16,340 --> 00:33:26,030
that all your devices are actually owned

755
00:33:17,390 --> 00:33:28,730
on the same subnet so one of the steps

756
00:33:26,030 --> 00:33:31,389
that I plan on doing is using the ESP

757
00:33:28,730 --> 00:33:35,330
32s capacity to be its own access point

758
00:33:31,390 --> 00:33:38,150
so then you can just have your device

759
00:33:35,330 --> 00:33:39,649
connect directly to its Wi-Fi network

760
00:33:38,150 --> 00:33:41,090
and connect to it directly that's not

761
00:33:39,650 --> 00:33:43,309
super useful if you're trying to have

762
00:33:41,090 --> 00:33:44,780
multiple devices talk to each other at

763
00:33:43,309 --> 00:33:46,428
the time but if it's gonna be a one on

764
00:33:44,780 --> 00:33:48,770
one conversation then you can just use

765
00:33:46,429 --> 00:33:49,850
that and then it's pretty much ap

766
00:33:48,770 --> 00:33:52,389
agnostic because you're connecting

767
00:33:49,850 --> 00:33:52,389
directly to it

768
00:33:53,670 --> 00:33:58,680
I do believe you can yes I haven't

769
00:33:56,880 --> 00:34:00,690
experimented with it yet but the SP 32

770
00:33:58,680 --> 00:34:04,670
turn came completely you can use it to

771
00:34:00,690 --> 00:34:04,670
make a mash network or ad-hoc connection

772
00:34:14,690 --> 00:34:21,060
currently not that be fairly easy to

773
00:34:17,310 --> 00:34:26,909
implement because both ends can actually

774
00:34:21,060 --> 00:34:29,639
just be an OSC client yeah I mean I

775
00:34:26,909 --> 00:34:31,620
don't see how that would be a problem

776
00:34:29,639 --> 00:34:35,069
you might get some collisions so

777
00:34:31,620 --> 00:34:37,380
depending on how your polling or pushing

778
00:34:35,070 --> 00:34:39,750
might might change you may want to move

779
00:34:37,380 --> 00:34:41,370
to like a polling system it depends I

780
00:34:39,750 --> 00:34:43,560
mean you're basically just creating

781
00:34:41,370 --> 00:34:44,790
extra Wi-Fi traffic at that point so

782
00:34:43,560 --> 00:34:47,449
depending on your network environment

783
00:34:44,790 --> 00:34:47,449
your mileage may vary

784
00:34:56,150 --> 00:35:03,500
I haven't yet run experimentations with

785
00:35:00,950 --> 00:35:05,419
the AP mode mm I don't think it

786
00:35:03,500 --> 00:35:09,370
currently has that for client limit I

787
00:35:05,420 --> 00:35:12,430
think that was more of a like 80 to 66

788
00:35:09,370 --> 00:35:14,569
way Meeker saw me Kyra Meeker hardware

789
00:35:12,430 --> 00:35:16,279
but it's something I'll definitely keep

790
00:35:14,570 --> 00:35:19,910
in mind I know some people have had

791
00:35:16,280 --> 00:35:22,730
issues in the past using SPI and the

792
00:35:19,910 --> 00:35:25,399
Wi-Fi at the same time but I've been

793
00:35:22,730 --> 00:35:28,400
actually able to run like an O an OLED

794
00:35:25,400 --> 00:35:31,310
screen while I'm on Wi-Fi so I guess

795
00:35:28,400 --> 00:35:32,930
that that that's still some some unknown

796
00:35:31,310 --> 00:35:36,140
territory as to what types of issues

797
00:35:32,930 --> 00:35:37,520
with with you know ap maybe with too

798
00:35:36,140 --> 00:35:41,420
many clients you might some write and

799
00:35:37,520 --> 00:35:43,820
run into some problems also you might

800
00:35:41,420 --> 00:35:46,460
have slightly different results with

801
00:35:43,820 --> 00:35:48,830
different implementations like all MX

802
00:35:46,460 --> 00:35:51,230
makes a development board it's way

803
00:35:48,830 --> 00:35:53,930
bigger and Scott like it's got really is

804
00:35:51,230 --> 00:35:55,310
integrated as got rj45 connection and

805
00:35:53,930 --> 00:35:58,160
it's got some of the hardware is

806
00:35:55,310 --> 00:36:00,250
different and I think so in those cases

807
00:35:58,160 --> 00:36:03,080
like there may be slightly different

808
00:36:00,250 --> 00:36:05,320
implementations and limitations or less

809
00:36:03,080 --> 00:36:05,319
so

