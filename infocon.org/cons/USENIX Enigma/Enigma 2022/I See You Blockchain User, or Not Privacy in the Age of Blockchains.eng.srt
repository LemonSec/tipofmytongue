1
00:00:08,400 --> 00:00:10,880
hey everyone i'm radha mashagba from

2
00:00:10,880 --> 00:00:12,080
yukon

3
00:00:12,080 --> 00:00:14,000
in this talk i will tell you about

4
00:00:14,000 --> 00:00:16,640
supporting the privacy for payments as

5
00:00:16,640 --> 00:00:19,199
well as arbitrary computations on

6
00:00:19,199 --> 00:00:22,000
blockchains i will tell you why this is

7
00:00:22,000 --> 00:00:24,320
challenging and where we stand with

8
00:00:24,320 --> 00:00:26,160
respect to the current and potential

9
00:00:26,160 --> 00:00:30,320
solutions that we have

10
00:00:30,320 --> 00:00:32,960
imagine a world where we can use bitcoin

11
00:00:32,960 --> 00:00:34,719
to pay for everything

12
00:00:34,719 --> 00:00:37,280
so we have the blockchain which is

13
00:00:37,280 --> 00:00:40,079
simply a public immutable log

14
00:00:40,079 --> 00:00:42,480
of all the transactions that happened so

15
00:00:42,480 --> 00:00:45,280
far in the system this blockchain is

16
00:00:45,280 --> 00:00:47,760
maintained by the miners um each of

17
00:00:47,760 --> 00:00:50,960
which is holding a full copy of this log

18
00:00:50,960 --> 00:00:54,879
and working on extending it

19
00:00:54,879 --> 00:00:58,399
let's take video on demand as an example

20
00:00:58,399 --> 00:01:02,160
so in order to pay for a video uh the

21
00:01:02,160 --> 00:01:05,040
user's wallet will issue a transaction

22
00:01:05,040 --> 00:01:07,840
to transfer coins from the user's

23
00:01:07,840 --> 00:01:10,960
address to the vendor's address and it

24
00:01:10,960 --> 00:01:13,439
will broadcast this transaction to the

25
00:01:13,439 --> 00:01:15,280
network

26
00:01:15,280 --> 00:01:17,439
the miners will validate uh all

27
00:01:17,439 --> 00:01:19,920
transactions they receive uh and they

28
00:01:19,920 --> 00:01:22,560
will package them uh in blocks

29
00:01:22,560 --> 00:01:26,320
uh and then they will compete with each

30
00:01:26,320 --> 00:01:28,640
other to solve a mining puzzle

31
00:01:28,640 --> 00:01:31,040
only the winner will get to append the

32
00:01:31,040 --> 00:01:33,840
new block to the blockchain

33
00:01:33,840 --> 00:01:36,720
at that time the transaction will be

34
00:01:36,720 --> 00:01:39,439
published on the blockchain and then the

35
00:01:39,439 --> 00:01:41,920
user the vendor and everyone else will

36
00:01:41,920 --> 00:01:43,680
be able to see it

37
00:01:43,680 --> 00:01:46,000
which implies that the payment has been

38
00:01:46,000 --> 00:01:47,680
refilled

39
00:01:47,680 --> 00:01:50,960
this model unfortunately has two or

40
00:01:50,960 --> 00:01:52,840
suffers from two main

41
00:01:52,840 --> 00:01:55,840
limitations the first one is

42
00:01:55,840 --> 00:01:59,040
functionality related uh bitcoin is

43
00:01:59,040 --> 00:02:01,840
mainly about currency transfer

44
00:02:01,840 --> 00:02:04,880
and it has a limited scripting language

45
00:02:04,880 --> 00:02:07,840
so it doesn't allow the users to ask the

46
00:02:07,840 --> 00:02:10,959
miners to execute arbitrary code and it

47
00:02:10,959 --> 00:02:12,560
doesn't allow them to build

48
00:02:12,560 --> 00:02:15,440
sophisticated applications on top of its

49
00:02:15,440 --> 00:02:17,760
blockchain

50
00:02:17,760 --> 00:02:20,840
the second limitation is about

51
00:02:20,840 --> 00:02:22,480
privacy uh

52
00:02:22,480 --> 00:02:25,760
so remember the blockchain is public and

53
00:02:25,760 --> 00:02:28,319
anyone can read its content

54
00:02:28,319 --> 00:02:31,599
so yes we use random looking bitcoin

55
00:02:31,599 --> 00:02:34,080
addresses that don't require real

56
00:02:34,080 --> 00:02:35,360
identities

57
00:02:35,360 --> 00:02:38,800
and yes we can be extra careful and

58
00:02:38,800 --> 00:02:41,200
generate a new address for each new

59
00:02:41,200 --> 00:02:42,879
transaction

60
00:02:42,879 --> 00:02:45,599
however all these techniques

61
00:02:45,599 --> 00:02:48,959
support only pseudo-anonymity

62
00:02:48,959 --> 00:02:51,599
several studies uh have showed that

63
00:02:51,599 --> 00:02:53,680
transaction linkability or have showed

64
00:02:53,680 --> 00:02:56,160
that transaction linkability can be

65
00:02:56,160 --> 00:02:59,920
utilized to link these addresses back to

66
00:02:59,920 --> 00:03:02,319
their real owners

67
00:03:02,319 --> 00:03:05,440
so back to our example uh everyone will

68
00:03:05,440 --> 00:03:09,280
be able to uh tell that this user has

69
00:03:09,280 --> 00:03:11,680
purchased a video from this specific

70
00:03:11,680 --> 00:03:16,959
website or a specific uh vendor

71
00:03:17,599 --> 00:03:20,800
addressing these two limitations started

72
00:03:20,800 --> 00:03:24,560
almost in parallel and initial solutions

73
00:03:24,560 --> 00:03:26,879
went different directions

74
00:03:26,879 --> 00:03:30,720
in other words they either uh improved

75
00:03:30,720 --> 00:03:33,599
the privacy of the bitcoin model or they

76
00:03:33,599 --> 00:03:36,319
extended its functionality but remained

77
00:03:36,319 --> 00:03:37,840
public

78
00:03:37,840 --> 00:03:41,200
let's explore uh both directions

79
00:03:41,200 --> 00:03:43,680
starting with the functionality one and

80
00:03:43,680 --> 00:03:46,080
see if we can achieve both of them at

81
00:03:46,080 --> 00:03:48,799
the same time

82
00:03:50,480 --> 00:03:53,599
ethereum was born to address the

83
00:03:53,599 --> 00:03:55,760
functionality uh or the limited

84
00:03:55,760 --> 00:03:58,239
functionality of bitcoin by allowing the

85
00:03:58,239 --> 00:04:01,120
users to execute arbitrary code on its

86
00:04:01,120 --> 00:04:02,400
blockchain

87
00:04:02,400 --> 00:04:04,640
and it pioneered this movement

88
00:04:04,640 --> 00:04:07,599
naturally other systems inspired by the

89
00:04:07,599 --> 00:04:09,280
ethereum model

90
00:04:09,280 --> 00:04:12,840
have emerged such as algorand and

91
00:04:12,840 --> 00:04:14,799
cardano

92
00:04:14,799 --> 00:04:18,160
in this model the miners form a global

93
00:04:18,160 --> 00:04:20,079
virtual computer

94
00:04:20,079 --> 00:04:23,360
users can write arbitrary programs and

95
00:04:23,360 --> 00:04:24,720
deploy them

96
00:04:24,720 --> 00:04:28,160
on the blockchain as smart contracts

97
00:04:28,160 --> 00:04:31,360
anyone can ask the miners to execute any

98
00:04:31,360 --> 00:04:32,400
function

99
00:04:32,400 --> 00:04:34,080
in these contracts

100
00:04:34,080 --> 00:04:34,880
so

101
00:04:34,880 --> 00:04:36,160
a user

102
00:04:36,160 --> 00:04:39,199
when invoking a function will provide

103
00:04:39,199 --> 00:04:40,160
inputs

104
00:04:40,160 --> 00:04:42,720
the miners will perform the computation

105
00:04:42,720 --> 00:04:45,520
over these inputs and produce outputs

106
00:04:45,520 --> 00:04:48,240
and then update the blockchain state

107
00:04:48,240 --> 00:04:52,320
accordingly based on these outputs

108
00:04:52,800 --> 00:04:55,919
this builds a model for computing on

109
00:04:55,919 --> 00:05:00,400
demand uh it's powerful and it has or it

110
00:05:00,400 --> 00:05:03,360
found numerous applications uh such as

111
00:05:03,360 --> 00:05:05,360
decentralized governance and

112
00:05:05,360 --> 00:05:08,479
decentralized finance or defy and many

113
00:05:08,479 --> 00:05:11,479
others

114
00:05:11,520 --> 00:05:14,880
on the privacy side uh initial solutions

115
00:05:14,880 --> 00:05:18,400
targeted the bitcoin model uh with uh

116
00:05:18,400 --> 00:05:20,800
with the goal of mainly supporting

117
00:05:20,800 --> 00:05:23,039
private payments

118
00:05:23,039 --> 00:05:27,280
this resulted in several academic and uh

119
00:05:27,280 --> 00:05:30,080
industrial initiatives such as z cash

120
00:05:30,080 --> 00:05:33,600
quiz quiz monero and many others

121
00:05:33,600 --> 00:05:34,639
and

122
00:05:34,639 --> 00:05:36,960
the general paradigm behind these

123
00:05:36,960 --> 00:05:38,639
solutions is

124
00:05:38,639 --> 00:05:40,560
hide and prove

125
00:05:40,560 --> 00:05:41,360
so

126
00:05:41,360 --> 00:05:43,520
instead of sending a transaction in the

127
00:05:43,520 --> 00:05:45,199
clear to the network

128
00:05:45,199 --> 00:05:47,280
hide it inside a cryptographic

129
00:05:47,280 --> 00:05:50,240
commitment or simply encrypted

130
00:05:50,240 --> 00:05:53,840
and to allow validating this transaction

131
00:05:53,840 --> 00:05:55,840
uh to make sure that it is correct

132
00:05:55,840 --> 00:05:58,400
without revealing its content uh

133
00:05:58,400 --> 00:06:00,720
generate zero knowledge approves uh

134
00:06:00,720 --> 00:06:03,919
attesting uh that the hidden transaction

135
00:06:03,919 --> 00:06:06,720
satisfies the correctness requirements

136
00:06:06,720 --> 00:06:08,080
uh as

137
00:06:08,080 --> 00:06:11,199
stated by the system

138
00:06:12,319 --> 00:06:15,919
so uh again back to our example um a

139
00:06:15,919 --> 00:06:18,880
transaction will be translated into two

140
00:06:18,880 --> 00:06:20,479
components

141
00:06:20,479 --> 00:06:22,880
first the user's wallet will encrypt the

142
00:06:22,880 --> 00:06:26,000
transaction and then it will generate

143
00:06:26,000 --> 00:06:27,280
a proof

144
00:06:27,280 --> 00:06:31,120
uh this proof uh simply states that uh

145
00:06:31,120 --> 00:06:33,680
the users or the

146
00:06:33,680 --> 00:06:35,600
which is the hidden transaction

147
00:06:35,600 --> 00:06:37,840
satisfies the correctness requirements

148
00:06:37,840 --> 00:06:40,639
that minor uh usual or that miners

149
00:06:40,639 --> 00:06:42,240
usually check

150
00:06:42,240 --> 00:06:45,440
at a basic level these include uh

151
00:06:45,440 --> 00:06:47,360
that or attesting to the fact that the

152
00:06:47,360 --> 00:06:50,880
user owns the coins that she or he wants

153
00:06:50,880 --> 00:06:54,240
to spend and uh they are not spending

154
00:06:54,240 --> 00:06:58,080
more currency than what they are

155
00:06:58,080 --> 00:07:01,440
this proof is publicly verifiable so the

156
00:07:01,440 --> 00:07:04,639
miners and anyone will be able uh to uh

157
00:07:04,639 --> 00:07:07,120
verify that the hidden transaction is

158
00:07:07,120 --> 00:07:08,479
correct

159
00:07:08,479 --> 00:07:11,120
um in this paradigm anonymity is

160
00:07:11,120 --> 00:07:13,599
achieved using what is called anonymity

161
00:07:13,599 --> 00:07:14,479
sex

162
00:07:14,479 --> 00:07:16,720
so the zero knowledge proof will also

163
00:07:16,720 --> 00:07:19,759
attest to the fact that uh among a set

164
00:07:19,759 --> 00:07:23,520
of uh private coin addresses the user uh

165
00:07:23,520 --> 00:07:26,319
owns one of them without revealing uh

166
00:07:26,319 --> 00:07:29,960
the address itself

167
00:07:30,160 --> 00:07:31,599
but remember

168
00:07:31,599 --> 00:07:33,759
bitcoin is still public

169
00:07:33,759 --> 00:07:37,039
applying uh core changes like these that

170
00:07:37,039 --> 00:07:38,720
we just described to the network

171
00:07:38,720 --> 00:07:41,840
protocol will result in a hard fork if

172
00:07:41,840 --> 00:07:45,039
not all the miners accept the changes

173
00:07:45,039 --> 00:07:47,919
uh such hard forks

174
00:07:47,919 --> 00:07:50,800
will result in two or more blockchains

175
00:07:50,800 --> 00:07:53,199
and it partitions the network and the

176
00:07:53,199 --> 00:07:54,800
mining power

177
00:07:54,800 --> 00:07:57,280
for this reason uh private pay or

178
00:07:57,280 --> 00:08:00,319
privacy preserving uh payment solutions

179
00:08:00,319 --> 00:08:02,720
uh produced new systems with their own

180
00:08:02,720 --> 00:08:05,520
blockchains and native currency rather

181
00:08:05,520 --> 00:08:07,840
than uh being updates uh to their

182
00:08:07,840 --> 00:08:11,960
bitcoin network protocol

183
00:08:12,720 --> 00:08:13,680
so

184
00:08:13,680 --> 00:08:15,919
we have systems that improve the

185
00:08:15,919 --> 00:08:18,080
functionality of bitcoin such as

186
00:08:18,080 --> 00:08:19,440
ethereum

187
00:08:19,440 --> 00:08:22,879
and uh we have systems that improved the

188
00:08:22,879 --> 00:08:25,199
privacy of bitcoin uh

189
00:08:25,199 --> 00:08:27,360
such as zcash

190
00:08:27,360 --> 00:08:31,280
and the question is can we have it all

191
00:08:31,280 --> 00:08:34,320
in other words can we have privacy

192
00:08:34,320 --> 00:08:38,479
preserving smart contracts that operate

193
00:08:38,479 --> 00:08:41,200
on private inputs and produce private

194
00:08:41,200 --> 00:08:43,039
outputs

195
00:08:43,039 --> 00:08:46,240
more initiatives have emerged towards

196
00:08:46,240 --> 00:08:49,519
addressing uh this question such as

197
00:08:49,519 --> 00:08:53,600
zether zexi smartafacci kachina and many

198
00:08:53,600 --> 00:08:55,839
more

199
00:08:56,640 --> 00:08:57,519
the

200
00:08:57,519 --> 00:09:00,880
solutions or these solutions uh adopted

201
00:09:00,880 --> 00:09:01,760
uh

202
00:09:01,760 --> 00:09:04,800
two paradigms uh the off chain and

203
00:09:04,800 --> 00:09:06,480
on-chain

204
00:09:06,480 --> 00:09:09,360
the option paradigm uh yeah and it comes

205
00:09:09,360 --> 00:09:11,200
like which paradigm they used it depends

206
00:09:11,200 --> 00:09:12,880
on where the private computation is

207
00:09:12,880 --> 00:09:14,480
being performed

208
00:09:14,480 --> 00:09:17,920
uh in the off chain paradigm uh

209
00:09:17,920 --> 00:09:18,800
the

210
00:09:18,800 --> 00:09:20,959
users or maybe other parties will

211
00:09:20,959 --> 00:09:23,680
perform the computation of chen meaning

212
00:09:23,680 --> 00:09:26,560
locally while in the unchained paradigm

213
00:09:26,560 --> 00:09:28,240
the computation

214
00:09:28,240 --> 00:09:30,880
is performed by the miners themselves on

215
00:09:30,880 --> 00:09:33,600
the blockchain

216
00:09:34,399 --> 00:09:37,680
in more details um the off chain

217
00:09:37,680 --> 00:09:40,240
approach uh performs the computation

218
00:09:40,240 --> 00:09:43,440
over the actual inputs locally then it

219
00:09:43,440 --> 00:09:46,080
encrypts the inputs and the outputs and

220
00:09:46,080 --> 00:09:48,160
provides zero knowledge proofs that the

221
00:09:48,160 --> 00:09:51,600
computation has been done correctly

222
00:09:51,600 --> 00:09:52,800
several

223
00:09:52,800 --> 00:09:53,920
systems

224
00:09:53,920 --> 00:09:55,360
have adopted

225
00:09:55,360 --> 00:09:58,880
this approach such as zk and xc to name

226
00:09:58,880 --> 00:10:01,279
a few

227
00:10:01,839 --> 00:10:02,640
so

228
00:10:02,640 --> 00:10:05,760
the users or the end users themselves uh

229
00:10:05,760 --> 00:10:08,320
perform the computation over their uh

230
00:10:08,320 --> 00:10:11,279
inputs then the users also encrypt the

231
00:10:11,279 --> 00:10:13,519
inputs and the outputs and generate zero

232
00:10:13,519 --> 00:10:14,959
knowledge proofs

233
00:10:14,959 --> 00:10:15,839
while

234
00:10:15,839 --> 00:10:17,040
the

235
00:10:17,040 --> 00:10:20,480
miners only role is just to verify the

236
00:10:20,480 --> 00:10:22,959
zero knowledge proofs and apply any

237
00:10:22,959 --> 00:10:25,279
state changes to the blockchain

238
00:10:25,279 --> 00:10:27,839
resulting from the computation such as

239
00:10:27,839 --> 00:10:30,399
transferring currency for example

240
00:10:30,399 --> 00:10:33,200
so most of the heavy lifting work is

241
00:10:33,200 --> 00:10:35,519
done on the user side

242
00:10:35,519 --> 00:10:38,800
and we no longer have the computation on

243
00:10:38,800 --> 00:10:41,519
demand model so now the users themselves

244
00:10:41,519 --> 00:10:43,680
they have to coordinate and perform the

245
00:10:43,680 --> 00:10:45,920
computation rather than asking the

246
00:10:45,920 --> 00:10:48,720
miners to do that for them

247
00:10:48,720 --> 00:10:51,760
i should note that there are uh

248
00:10:51,760 --> 00:10:54,320
other offchain solutions where they let

249
00:10:54,320 --> 00:10:57,200
the users delegate the computation to a

250
00:10:57,200 --> 00:11:00,640
trusted third party or trusted hardware

251
00:11:00,640 --> 00:11:03,519
instead of having the users do them

252
00:11:03,519 --> 00:11:05,519
but i'm not going to discuss these in

253
00:11:05,519 --> 00:11:08,000
this talk

254
00:11:09,680 --> 00:11:11,200
on the other hand

255
00:11:11,200 --> 00:11:14,240
the unchained private computing paradigm

256
00:11:14,240 --> 00:11:16,399
extends uh the

257
00:11:16,399 --> 00:11:18,800
paradigm of a private payments that we

258
00:11:18,800 --> 00:11:20,399
saw before

259
00:11:20,399 --> 00:11:24,000
uh in the sense that we don't only hide

260
00:11:24,000 --> 00:11:26,720
uh or encrypt the inputs and provide

261
00:11:26,720 --> 00:11:30,640
proofs that they are correct we also

262
00:11:30,640 --> 00:11:33,600
let the miners uh perform computations

263
00:11:33,600 --> 00:11:36,399
over these uh encrypted inputs and

264
00:11:36,399 --> 00:11:38,800
produce encrypted outputs

265
00:11:38,800 --> 00:11:42,320
uh smart she introduced this idea where

266
00:11:42,320 --> 00:11:45,040
it combines fully homomorphic encryption

267
00:11:45,040 --> 00:11:47,279
and zero knowledge approves to build a

268
00:11:47,279 --> 00:11:50,320
privacy preserving smart contract

269
00:11:50,320 --> 00:11:52,639
scheme

270
00:11:53,120 --> 00:11:54,800
in particular

271
00:11:54,800 --> 00:11:57,440
fully homomorphic encryption allows us

272
00:11:57,440 --> 00:12:00,959
to uh compute or operate over encrypted

273
00:12:00,959 --> 00:12:04,240
inputs so we have two operations

274
00:12:04,240 --> 00:12:07,200
homomorphic add and homomorphic multiply

275
00:12:07,200 --> 00:12:08,320
that

276
00:12:08,320 --> 00:12:10,720
allows us to add or multiply the

277
00:12:10,720 --> 00:12:14,320
ciphertext of uh inputs and get a

278
00:12:14,320 --> 00:12:17,200
ciphertext of the actual results which

279
00:12:17,200 --> 00:12:18,880
is the actual sum or the actual

280
00:12:18,880 --> 00:12:20,639
multiplication

281
00:12:20,639 --> 00:12:22,240
having these two

282
00:12:22,240 --> 00:12:25,040
basic operations allows us to compile

283
00:12:25,040 --> 00:12:27,360
any computation into a privacy

284
00:12:27,360 --> 00:12:30,800
preserving format using these operations

285
00:12:30,800 --> 00:12:32,880
and again we still need the zero

286
00:12:32,880 --> 00:12:36,000
knowledge approves uh to uh a test or

287
00:12:36,000 --> 00:12:36,800
can

288
00:12:36,800 --> 00:12:39,279
provide proofs that the encrypted inputs

289
00:12:39,279 --> 00:12:41,519
are correct and valid

290
00:12:41,519 --> 00:12:44,000
uh so um

291
00:12:44,000 --> 00:12:46,800
using these operations a smart contract

292
00:12:46,800 --> 00:12:48,800
can be compiled into a privacy

293
00:12:48,800 --> 00:12:51,839
preserving uh format or version by

294
00:12:51,839 --> 00:12:54,800
involving homomorphic add and multiply

295
00:12:54,800 --> 00:12:57,920
instead of the regular uh ones

296
00:12:57,920 --> 00:13:00,000
users can invoke

297
00:13:00,000 --> 00:13:02,800
any function in the smart contracts and

298
00:13:02,800 --> 00:13:05,279
they provide encrypted inputs zero

299
00:13:05,279 --> 00:13:07,440
knowledge approves for them and then the

300
00:13:07,440 --> 00:13:10,000
miners will execute the computation over

301
00:13:10,000 --> 00:13:13,760
these encrypted inputs and uh provide uh

302
00:13:13,760 --> 00:13:15,760
encrypted outputs

303
00:13:15,760 --> 00:13:19,680
uh these outputs can be only decrypted

304
00:13:19,680 --> 00:13:24,240
by the key owners uh of the uh

305
00:13:24,240 --> 00:13:26,079
under which the inputs or the original

306
00:13:26,079 --> 00:13:28,240
inputs were encrypted so only those

307
00:13:28,240 --> 00:13:30,240
users will be able to decrypt the

308
00:13:30,240 --> 00:13:32,240
results

309
00:13:32,240 --> 00:13:35,760
uh this uh builds uh

310
00:13:35,760 --> 00:13:38,320
a model for private computing on demand

311
00:13:38,320 --> 00:13:40,639
because as you see uh the heavy lifting

312
00:13:40,639 --> 00:13:42,399
work of the computation is done on the

313
00:13:42,399 --> 00:13:45,360
miners side and users can simply just

314
00:13:45,360 --> 00:13:47,839
submit requests to have the computation

315
00:13:47,839 --> 00:13:51,279
being performed for them

316
00:13:51,279 --> 00:13:52,079
so

317
00:13:52,079 --> 00:13:54,800
is the problem solved and it is just a

318
00:13:54,800 --> 00:13:58,320
matter of selecting a solution flavor

319
00:13:58,320 --> 00:14:00,240
unfortunately no

320
00:14:00,240 --> 00:14:02,560
private computation over blockchains

321
00:14:02,560 --> 00:14:05,199
introduce several challenges that need

322
00:14:05,199 --> 00:14:08,079
to be addressed before having any viable

323
00:14:08,079 --> 00:14:10,000
solution

324
00:14:10,000 --> 00:14:12,880
concurrency is a huge problem with when

325
00:14:12,880 --> 00:14:15,279
dealing with accounts changing the state

326
00:14:15,279 --> 00:14:17,839
of an account will invalidate all

327
00:14:17,839 --> 00:14:19,920
pending zero knowledge approves tied to

328
00:14:19,920 --> 00:14:22,399
the original state of that account

329
00:14:22,399 --> 00:14:24,880
and this in turn will

330
00:14:24,880 --> 00:14:27,680
invalidate all transactions tied to

331
00:14:27,680 --> 00:14:29,360
these proofs

332
00:14:29,360 --> 00:14:31,839
the current solutions that we have rely

333
00:14:31,839 --> 00:14:34,639
on locking these accounts and delaying

334
00:14:34,639 --> 00:14:37,600
any currency deposits until all pending

335
00:14:37,600 --> 00:14:39,920
zero knowledge approves

336
00:14:39,920 --> 00:14:44,399
are verified but of course this creates

337
00:14:44,399 --> 00:14:46,880
an availability and usability problem in

338
00:14:46,880 --> 00:14:49,120
the system

339
00:14:49,120 --> 00:14:52,240
another issue is dealing with inputs

340
00:14:52,240 --> 00:14:54,480
belonging to multiple users

341
00:14:54,480 --> 00:14:55,920
so

342
00:14:55,920 --> 00:14:58,160
for the on-chain model this means that

343
00:14:58,160 --> 00:15:01,120
we have inputs encrypted under several

344
00:15:01,120 --> 00:15:02,720
public keys

345
00:15:02,720 --> 00:15:05,360
an idea here is to use multi-key for the

346
00:15:05,360 --> 00:15:07,279
homomorphic encryption schemes that

347
00:15:07,279 --> 00:15:10,160
allows us to perform computation over

348
00:15:10,160 --> 00:15:13,519
inputs encrypted under different keys

349
00:15:13,519 --> 00:15:15,839
however the decryption process for these

350
00:15:15,839 --> 00:15:18,399
schemes is interactive and requires all

351
00:15:18,399 --> 00:15:20,399
users to get together in order to

352
00:15:20,399 --> 00:15:22,399
decrypt the results

353
00:15:22,399 --> 00:15:25,600
uh for the on for the option paradigm

354
00:15:25,600 --> 00:15:26,880
to

355
00:15:26,880 --> 00:15:29,440
it's like operating on inputs belonging

356
00:15:29,440 --> 00:15:32,160
to multiple users increases the burden

357
00:15:32,160 --> 00:15:34,160
on the end user

358
00:15:34,160 --> 00:15:37,360
themselves because these users they have

359
00:15:37,360 --> 00:15:39,199
to get together and coordinate the

360
00:15:39,199 --> 00:15:40,639
computation

361
00:15:40,639 --> 00:15:42,720
uh over their private inputs using for

362
00:15:42,720 --> 00:15:44,639
example multi-party computational

363
00:15:44,639 --> 00:15:48,560
protocols and uh produce the output

364
00:15:48,560 --> 00:15:50,160
and these protocols are usually

365
00:15:50,160 --> 00:15:55,759
interactive uh and computationally heavy

366
00:15:55,759 --> 00:15:59,120
efficiency also is a big problem uh

367
00:15:59,120 --> 00:16:01,680
privacy preserving uh

368
00:16:01,680 --> 00:16:04,399
solutions for blockchains usually rely

369
00:16:04,399 --> 00:16:07,199
on advanced cryptographic primitives uh

370
00:16:07,199 --> 00:16:08,399
that

371
00:16:08,399 --> 00:16:10,160
incur

372
00:16:10,160 --> 00:16:13,360
high computation and storage costs

373
00:16:13,360 --> 00:16:16,320
uh for example uh generating a zero

374
00:16:16,320 --> 00:16:19,040
knowledge of proof uh to attest to the

375
00:16:19,040 --> 00:16:22,000
correctness of even a simple computation

376
00:16:22,000 --> 00:16:25,199
can take the user more than a minute

377
00:16:25,199 --> 00:16:28,320
while this takes only a few milliseconds

378
00:16:28,320 --> 00:16:30,160
for a private payment

379
00:16:30,160 --> 00:16:33,199
on the storage side a single homomorphic

380
00:16:33,199 --> 00:16:35,199
multiplication operation

381
00:16:35,199 --> 00:16:37,759
can generate a cipher text of a size

382
00:16:37,759 --> 00:16:40,560
exceeding 100 kilobytes

383
00:16:40,560 --> 00:16:43,199
and this is compared to just uh less

384
00:16:43,199 --> 00:16:46,320
than one kilobyte which is the size of a

385
00:16:46,320 --> 00:16:48,399
private payment

386
00:16:48,399 --> 00:16:50,800
this adds to the efficiency problems

387
00:16:50,800 --> 00:16:54,079
that permissionless public blockchains

388
00:16:54,079 --> 00:16:58,479
already have and trying to solve

389
00:16:59,440 --> 00:17:00,880
in my opinion

390
00:17:00,880 --> 00:17:03,519
the path forward doesn't necessarily

391
00:17:03,519 --> 00:17:06,160
mean that we have to be on one edge of

392
00:17:06,160 --> 00:17:07,760
the spectrum

393
00:17:07,760 --> 00:17:10,400
i think having a hybrid solution is

394
00:17:10,400 --> 00:17:13,919
better in the sense that we reduce the

395
00:17:13,919 --> 00:17:16,240
amount of computation to the minimum or

396
00:17:16,240 --> 00:17:18,160
which is the unchained computation to

397
00:17:18,160 --> 00:17:20,160
the minimum level required for

398
00:17:20,160 --> 00:17:22,880
coordination while doing the rest of the

399
00:17:22,880 --> 00:17:26,400
work of chen uh perhaps on a secondary

400
00:17:26,400 --> 00:17:29,760
temporary chain uh managed by a subset

401
00:17:29,760 --> 00:17:32,799
of the miners for example and of course

402
00:17:32,799 --> 00:17:35,760
optimizing for efficiency is a key uh

403
00:17:35,760 --> 00:17:38,000
such as developing

404
00:17:38,000 --> 00:17:40,000
more efficient fully homomorphic

405
00:17:40,000 --> 00:17:42,080
encryption and zero knowledge proof

406
00:17:42,080 --> 00:17:43,679
systems

407
00:17:43,679 --> 00:17:45,679
this will also promote

408
00:17:45,679 --> 00:17:46,400
the

409
00:17:46,400 --> 00:17:48,080
privacy preserving

410
00:17:48,080 --> 00:17:51,120
applications and techniques when applied

411
00:17:51,120 --> 00:17:54,320
to blockchains

412
00:17:54,720 --> 00:17:55,760
so

413
00:17:55,760 --> 00:17:57,360
bottom line

414
00:17:57,360 --> 00:18:00,080
privacy is a critical

415
00:18:00,080 --> 00:18:03,280
for the future of blockchain systems

416
00:18:03,280 --> 00:18:04,880
especially those

417
00:18:04,880 --> 00:18:08,480
employing or supporting smart contracts

418
00:18:08,480 --> 00:18:11,440
and yes lots of work has been done

419
00:18:11,440 --> 00:18:13,760
but this is just the beginning more

420
00:18:13,760 --> 00:18:16,000
efforts are still needed on both the

421
00:18:16,000 --> 00:18:18,240
research and the engineering sides to

422
00:18:18,240 --> 00:18:20,880
address the challenges that we still

423
00:18:20,880 --> 00:18:22,400
have

424
00:18:22,400 --> 00:18:24,559
thank you so much for listening and i

425
00:18:24,559 --> 00:18:27,120
hope that you found this talk useful

426
00:18:27,120 --> 00:18:29,840
thank you

