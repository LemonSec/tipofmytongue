1
00:00:07,440 --> 00:00:09,280
i'm the founder and ceo at ethica and

2
00:00:09,280 --> 00:00:10,400
we've been working on a project called

3
00:00:10,400 --> 00:00:12,400
fides which is what i'd like to take you

4
00:00:12,400 --> 00:00:13,759
through today

5
00:00:13,759 --> 00:00:15,759
so it's a theory about how you can

6
00:00:15,759 --> 00:00:16,560
approach

7
00:00:16,560 --> 00:00:19,439
privacy ex-ante so that is to say before

8
00:00:19,439 --> 00:00:21,840
the problems start to happen

9
00:00:21,840 --> 00:00:23,840
so what we'll go through today is sort

10
00:00:23,840 --> 00:00:25,519
of a view that we have on privacy and

11
00:00:25,519 --> 00:00:26,880
the problems that exist particularly for

12
00:00:26,880 --> 00:00:29,119
large commercial businesses and how we

13
00:00:29,119 --> 00:00:30,880
might start to address those

14
00:00:30,880 --> 00:00:32,238
um explain to you a little bit about

15
00:00:32,238 --> 00:00:34,160
what fides is and how it tackles those

16
00:00:34,160 --> 00:00:35,200
problems

17
00:00:35,200 --> 00:00:37,360
the benefits of this sort of privacy as

18
00:00:37,360 --> 00:00:39,600
code approach if you will and then show

19
00:00:39,600 --> 00:00:41,280
you two real world examples so try and

20
00:00:41,280 --> 00:00:42,640
bring to life what the tools can do

21
00:00:42,640 --> 00:00:44,480
today and what we're trying to build

22
00:00:44,480 --> 00:00:46,480
with fides in the future

23
00:00:46,480 --> 00:00:48,320
um so very quickly

24
00:00:48,320 --> 00:00:50,079
the challenge of privacy or trust and

25
00:00:50,079 --> 00:00:51,520
privacy and software development or at

26
00:00:51,520 --> 00:00:52,800
least the way we see it ethic i think

27
00:00:52,800 --> 00:00:54,559
we'll probably all agree in this right

28
00:00:54,559 --> 00:00:57,039
privacy should be a feature of every

29
00:00:57,039 --> 00:00:59,120
technology system right it shouldn't be

30
00:00:59,120 --> 00:01:00,559
something you add on after the fact you

31
00:01:00,559 --> 00:01:02,399
think about afterwards it should just be

32
00:01:02,399 --> 00:01:05,360
innate and but it's not right for many

33
00:01:05,360 --> 00:01:07,360
many reasons it's not in for for

34
00:01:07,360 --> 00:01:09,040
developers in particular

35
00:01:09,040 --> 00:01:11,040
it tends to manifest as a lot of

36
00:01:11,040 --> 00:01:13,520
friction and complexity it isn't because

37
00:01:13,520 --> 00:01:15,119
developers don't care engineers don't

38
00:01:15,119 --> 00:01:16,640
care it's because it's not for many of

39
00:01:16,640 --> 00:01:17,920
them other than those that are in this

40
00:01:17,920 --> 00:01:19,200
room and the specialists that focus on

41
00:01:19,200 --> 00:01:21,520
privacy engineering for many it's just

42
00:01:21,520 --> 00:01:23,040
not part of their core

43
00:01:23,040 --> 00:01:24,799
tasks their objectives the tickets they

44
00:01:24,799 --> 00:01:26,799
tackle the jobs they have to do

45
00:01:26,799 --> 00:01:29,280
and often it manifests as the legal team

46
00:01:29,280 --> 00:01:31,119
sort of downward pressure to think about

47
00:01:31,119 --> 00:01:32,720
compliance right and compliance feels

48
00:01:32,720 --> 00:01:34,400
like a pretty unpleasant thing to think

49
00:01:34,400 --> 00:01:37,280
about when you're trying to move quickly

50
00:01:37,280 --> 00:01:39,280
and the way that we think about privacy

51
00:01:39,280 --> 00:01:40,720
when we're trying to tackle this problem

52
00:01:40,720 --> 00:01:41,920
is to look at the software development

53
00:01:41,920 --> 00:01:43,360
life cycle right the virtual cycle we

54
00:01:43,360 --> 00:01:45,520
all know right you ostensibly design

55
00:01:45,520 --> 00:01:47,360
something eventually implement it you

56
00:01:47,360 --> 00:01:49,759
hopefully test it really rigorously

57
00:01:49,759 --> 00:01:51,360
and eventually you'll deploy it and if

58
00:01:51,360 --> 00:01:52,240
you think about this in the

59
00:01:52,240 --> 00:01:53,520
venture-backed world that we live in

60
00:01:53,520 --> 00:01:55,600
today the goal tends to be to sort of

61
00:01:55,600 --> 00:01:57,360
deliver a minimum viable product right

62
00:01:57,360 --> 00:01:59,040
something that you can prove works

63
00:01:59,040 --> 00:02:01,200
quickly so you're iterating really fast

64
00:02:01,200 --> 00:02:02,960
you're probably not thinking deeply

65
00:02:02,960 --> 00:02:04,640
about privacy and security or there are

66
00:02:04,640 --> 00:02:06,000
a handful that are but not everybody

67
00:02:06,000 --> 00:02:07,280
unfortunately

68
00:02:07,280 --> 00:02:09,038
and the moment happens when you deploy a

69
00:02:09,038 --> 00:02:09,919
product

70
00:02:09,919 --> 00:02:11,760
hopefully it grows right it scales you

71
00:02:11,760 --> 00:02:13,760
get customers or users of your system

72
00:02:13,760 --> 00:02:15,599
that's the goal of any of these systems

73
00:02:15,599 --> 00:02:17,680
and typically that's the point at which

74
00:02:17,680 --> 00:02:19,680
most very early businesses or products

75
00:02:19,680 --> 00:02:21,280
start to think about the risk of privacy

76
00:02:21,280 --> 00:02:23,520
right it's exposed you've deployed the

77
00:02:23,520 --> 00:02:25,520
product the horse has proverbially

78
00:02:25,520 --> 00:02:27,760
bolted and now you've accumulated lots

79
00:02:27,760 --> 00:02:29,599
of sensitive data that has real risks

80
00:02:29,599 --> 00:02:31,360
associated with it you start to think

81
00:02:31,360 --> 00:02:32,879
about those problems

82
00:02:32,879 --> 00:02:34,560
and for many organizations not the most

83
00:02:34,560 --> 00:02:36,640
sophisticated in the world this is where

84
00:02:36,640 --> 00:02:37,840
they'll start to think about it from a

85
00:02:37,840 --> 00:02:40,400
compliance perspective right we need to

86
00:02:40,400 --> 00:02:43,280
comply with the gdpr or the cpra or ccpa

87
00:02:43,280 --> 00:02:45,680
or the lgpd so we need to know what data

88
00:02:45,680 --> 00:02:47,440
we have we need to understand the

89
00:02:47,440 --> 00:02:49,440
regulations we want to enforce and so we

90
00:02:49,440 --> 00:02:51,280
start to spelunk in data and

91
00:02:51,280 --> 00:02:52,640
infrastructure right it becomes this

92
00:02:52,640 --> 00:02:55,360
sort of deep dive into our systems

93
00:02:55,360 --> 00:02:56,160
um

94
00:02:56,160 --> 00:02:57,599
the challenge when you think about this

95
00:02:57,599 --> 00:03:00,080
is it's effectively exposed governance

96
00:03:00,080 --> 00:03:01,280
right like it's effectively trying to

97
00:03:01,280 --> 00:03:02,959
impose governance on a system that has

98
00:03:02,959 --> 00:03:04,480
already been built

99
00:03:04,480 --> 00:03:06,080
you know some things about it but it's

100
00:03:06,080 --> 00:03:07,519
evolving really rapidly it's very

101
00:03:07,519 --> 00:03:08,959
difficult to govern

102
00:03:08,959 --> 00:03:10,959
and a really good example of this most

103
00:03:10,959 --> 00:03:12,879
businesses struggle with effectively

104
00:03:12,879 --> 00:03:14,879
inventory management right identifying

105
00:03:14,879 --> 00:03:17,200
the type of data they have what exists

106
00:03:17,200 --> 00:03:18,879
across their distributed systems and as

107
00:03:18,879 --> 00:03:20,879
they've grown they've got orphan data

108
00:03:20,879 --> 00:03:22,480
sets and systems that are full aren't

109
00:03:22,480 --> 00:03:24,480
fully documented very often

110
00:03:24,480 --> 00:03:26,239
and and instead of asking ourselves why

111
00:03:26,239 --> 00:03:27,360
is that happening so why are we

112
00:03:27,360 --> 00:03:29,200
spelunking in data infrastructure as

113
00:03:29,200 --> 00:03:31,120
folks here like to say

114
00:03:31,120 --> 00:03:32,879
we need to look at how that happened

115
00:03:32,879 --> 00:03:34,799
what happened upstream that caused that

116
00:03:34,799 --> 00:03:36,560
and it's design and development

117
00:03:36,560 --> 00:03:38,159
decisions that weren't adequately

118
00:03:38,159 --> 00:03:39,760
documented annotations that weren't

119
00:03:39,760 --> 00:03:41,360
provided in the software development

120
00:03:41,360 --> 00:03:43,360
life cycle that mean that we don't

121
00:03:43,360 --> 00:03:44,720
understand what's in our data systems

122
00:03:44,720 --> 00:03:46,239
over a decade or two decades and

123
00:03:46,239 --> 00:03:47,680
therefore it's very difficult to govern

124
00:03:47,680 --> 00:03:49,200
right we don't have the context

125
00:03:49,200 --> 00:03:53,200
necessary to control those systems

126
00:03:53,599 --> 00:03:55,360
and so the question we've been asking

127
00:03:55,360 --> 00:03:56,879
ourselves is how could we insert

128
00:03:56,879 --> 00:03:58,560
governance and that sounds like an

129
00:03:58,560 --> 00:03:59,840
unpleasant world but a word but it's

130
00:03:59,840 --> 00:04:01,599
really powerful how can we think about

131
00:04:01,599 --> 00:04:04,319
applying essentially promises to our

132
00:04:04,319 --> 00:04:05,680
systems when we're building them right

133
00:04:05,680 --> 00:04:06,959
like how can we assure that the things

134
00:04:06,959 --> 00:04:08,959
we promise to our users will be the only

135
00:04:08,959 --> 00:04:10,720
things that our system will do so how

136
00:04:10,720 --> 00:04:12,640
can we govern them earlier and so that's

137
00:04:12,640 --> 00:04:14,000
what we've been thinking about mostly as

138
00:04:14,000 --> 00:04:16,160
we've been building feeders

139
00:04:16,160 --> 00:04:17,600
and a more concrete sort of

140
00:04:17,600 --> 00:04:19,279
manifestation of that then is well how

141
00:04:19,279 --> 00:04:20,798
do you bring that to life for developers

142
00:04:20,798 --> 00:04:22,320
right for developers today you're

143
00:04:22,320 --> 00:04:23,520
thinking about your tech stack maybe

144
00:04:23,520 --> 00:04:26,000
front end back end database version

145
00:04:26,000 --> 00:04:28,080
control systems probably some kind of

146
00:04:28,080 --> 00:04:29,840
infrastructure as code to deploy into

147
00:04:29,840 --> 00:04:31,040
the cloud

148
00:04:31,040 --> 00:04:32,160
and then the sort of privacy and

149
00:04:32,160 --> 00:04:33,199
governance function happens

150
00:04:33,199 --> 00:04:34,800
asynchronously very often right a lot of

151
00:04:34,800 --> 00:04:36,560
documentation form-filling privacy

152
00:04:36,560 --> 00:04:37,600
reviewing

153
00:04:37,600 --> 00:04:39,280
and what if you could provide tools to

154
00:04:39,280 --> 00:04:40,720
developers

155
00:04:40,720 --> 00:04:42,880
so that they could um adequately

156
00:04:42,880 --> 00:04:44,639
describe their systems

157
00:04:44,639 --> 00:04:46,000
such that you could then govern them so

158
00:04:46,000 --> 00:04:47,440
you could create a layer of governance

159
00:04:47,440 --> 00:04:50,800
as code or privacy as code um this would

160
00:04:50,800 --> 00:04:52,400
ease the bar of entry for developers

161
00:04:52,400 --> 00:04:53,759
right make every developer essentially

162
00:04:53,759 --> 00:04:55,040
some level of a privacy expert or

163
00:04:55,040 --> 00:04:56,000
engineer they don't necessarily

164
00:04:56,000 --> 00:04:58,080
understand the regulations but they can

165
00:04:58,080 --> 00:04:59,440
describe their systems such that we can

166
00:04:59,440 --> 00:05:00,800
start to think about how we govern them

167
00:05:00,800 --> 00:05:02,560
or enforce them and it would make the

168
00:05:02,560 --> 00:05:04,080
grc function

169
00:05:04,080 --> 00:05:06,479
the team and the grc function um more

170
00:05:06,479 --> 00:05:07,919
well oiled and more tightly integrated

171
00:05:07,919 --> 00:05:10,880
with that development process

172
00:05:10,880 --> 00:05:12,320
and so the hope with an open source

173
00:05:12,320 --> 00:05:14,160
standard for privacy as code is that we

174
00:05:14,160 --> 00:05:16,160
could start to solve this and that's the

175
00:05:16,160 --> 00:05:17,199
work that we've been doing and what i'd

176
00:05:17,199 --> 00:05:18,639
like to share with you today

177
00:05:18,639 --> 00:05:19,360
so

178
00:05:19,360 --> 00:05:21,280
the starting point for this is um what

179
00:05:21,280 --> 00:05:23,039
is fidez so first of all fida is named

180
00:05:23,039 --> 00:05:24,880
after the roman goddess of trust we

181
00:05:24,880 --> 00:05:27,039
think it's an apt name for the project

182
00:05:27,039 --> 00:05:28,479
it's something we've been working on for

183
00:05:28,479 --> 00:05:29,759
almost three years

184
00:05:29,759 --> 00:05:32,639
it's an open source description language

185
00:05:32,639 --> 00:05:35,039
that allows you to describe privacy

186
00:05:35,039 --> 00:05:36,720
behaviors and characteristics of systems

187
00:05:36,720 --> 00:05:38,160
if you will you could also abstract that

188
00:05:38,160 --> 00:05:39,919
and say it allows you to describe data

189
00:05:39,919 --> 00:05:41,360
such that you can govern it just not

190
00:05:41,360 --> 00:05:43,120
just for privacy so it's a lightweight

191
00:05:43,120 --> 00:05:45,039
description language and a set of tools

192
00:05:45,039 --> 00:05:46,560
that sit on top of that language that

193
00:05:46,560 --> 00:05:48,080
allow you to perform certain functions

194
00:05:48,080 --> 00:05:49,759
both in the ci pipeline so the code

195
00:05:49,759 --> 00:05:51,440
management environment and then in the

196
00:05:51,440 --> 00:05:52,960
runtime environment

197
00:05:52,960 --> 00:05:54,320
and our hope is to continue augmenting

198
00:05:54,320 --> 00:05:55,600
the capabilities of both the language

199
00:05:55,600 --> 00:05:57,280
and the tools to provide

200
00:05:57,280 --> 00:05:58,720
more robust governance tooling and

201
00:05:58,720 --> 00:06:00,560
support for organizations of various

202
00:06:00,560 --> 00:06:02,400
sizes

203
00:06:02,400 --> 00:06:03,840
so what are the benefits today in the

204
00:06:03,840 --> 00:06:06,720
current ga of vidas

205
00:06:06,720 --> 00:06:07,840
well it's a very developer friendly

206
00:06:07,840 --> 00:06:09,120
language and i'll show you that in a

207
00:06:09,120 --> 00:06:11,759
moment in a demonstration so rather like

208
00:06:11,759 --> 00:06:13,520
terraform describes infrastructure this

209
00:06:13,520 --> 00:06:15,120
can describe privacy resources and

210
00:06:15,120 --> 00:06:17,280
characteristics very easy to understand

211
00:06:17,280 --> 00:06:18,960
very easy to read pretty easy to

212
00:06:18,960 --> 00:06:21,039
implement very quickly so low barrier a

213
00:06:21,039 --> 00:06:23,520
low bar of entry for most developers

214
00:06:23,520 --> 00:06:25,680
it integrates directly into your

215
00:06:25,680 --> 00:06:28,319
projects so that is in your ci pipeline

216
00:06:28,319 --> 00:06:29,520
and your git project so you manage

217
00:06:29,520 --> 00:06:31,840
privacy metadata in your git projects so

218
00:06:31,840 --> 00:06:33,520
effectively you're now describing your

219
00:06:33,520 --> 00:06:36,080
systems at source rather than post

220
00:06:36,080 --> 00:06:37,199
deployment

221
00:06:37,199 --> 00:06:38,560
and because you can do that you can

222
00:06:38,560 --> 00:06:40,400
start to evaluate policies in your ci

223
00:06:40,400 --> 00:06:41,680
pipeline so you can start to enforce

224
00:06:41,680 --> 00:06:43,199
decisions or

225
00:06:43,199 --> 00:06:46,400
trustable criteria or risk mitigations

226
00:06:46,400 --> 00:06:48,639
when you're shipping code and finally

227
00:06:48,639 --> 00:06:49,840
because you've got a metadata layer

228
00:06:49,840 --> 00:06:51,440
right if you're describing your systems

229
00:06:51,440 --> 00:06:53,280
concretely as you deploy them you now

230
00:06:53,280 --> 00:06:54,720
can really understand the information

231
00:06:54,720 --> 00:06:55,759
that's flowing across distributed

232
00:06:55,759 --> 00:06:58,720
systems you can enforce runtime policies

233
00:06:58,720 --> 00:07:00,800
right the ability to retrieve data for a

234
00:07:00,800 --> 00:07:03,039
user under the gdpr or potentially erase

235
00:07:03,039 --> 00:07:04,720
it and erasure is obviously a tricky

236
00:07:04,720 --> 00:07:06,400
topic in terms of the definition we

237
00:07:06,400 --> 00:07:08,000
believe at ethica like i hope everybody

238
00:07:08,000 --> 00:07:09,360
here that you should just delete the

239
00:07:09,360 --> 00:07:11,520
data um not every business thinks the

240
00:07:11,520 --> 00:07:12,479
same way and you need to provide

241
00:07:12,479 --> 00:07:13,840
capabilities for how you might manage

242
00:07:13,840 --> 00:07:15,680
that

243
00:07:15,680 --> 00:07:17,599
so just to sort of orient you very

244
00:07:17,599 --> 00:07:19,360
quickly on the tools that are available

245
00:07:19,360 --> 00:07:20,800
there's the language which i'll walk you

246
00:07:20,800 --> 00:07:23,280
through in a moment called fideslang um

247
00:07:23,280 --> 00:07:25,039
and we'll explain the details of that

248
00:07:25,039 --> 00:07:27,039
there's then the fetus control tools so

249
00:07:27,039 --> 00:07:28,400
think of those tools that run in the

250
00:07:28,400 --> 00:07:30,240
software development life cycle so in

251
00:07:30,240 --> 00:07:32,720
the ci pipeline there's a server and a

252
00:07:32,720 --> 00:07:34,880
cli tool they comprise through the

253
00:07:34,880 --> 00:07:36,720
components of the control tools and that

254
00:07:36,720 --> 00:07:38,000
allows you to manage policies that you

255
00:07:38,000 --> 00:07:40,000
want to enforce in your ci pipeline and

256
00:07:40,000 --> 00:07:41,599
store the metadata that's generated from

257
00:07:41,599 --> 00:07:43,039
the annotations that occur in your code

258
00:07:43,039 --> 00:07:45,440
base and then there's fides ops or the

259
00:07:45,440 --> 00:07:47,840
operations tools that's a containerized

260
00:07:47,840 --> 00:07:49,919
application it's a docker image

261
00:07:49,919 --> 00:07:51,120
you can deploy that in your runtime

262
00:07:51,120 --> 00:07:53,120
environment connect it to various data

263
00:07:53,120 --> 00:07:55,039
infrastructure and write policies or

264
00:07:55,039 --> 00:07:57,120
rules to enforce in that so again

265
00:07:57,120 --> 00:07:59,120
erasure or de-identification if you will

266
00:07:59,120 --> 00:08:00,960
or retrieval of specific specific

267
00:08:00,960 --> 00:08:03,280
categories of data for example

268
00:08:03,280 --> 00:08:04,000
so

269
00:08:04,000 --> 00:08:05,520
the first thing i'm going to do is

270
00:08:05,520 --> 00:08:07,599
explain the taxonomy and the language

271
00:08:07,599 --> 00:08:08,720
today and where it stands and what we

272
00:08:08,720 --> 00:08:10,240
hope to do with in the future this is a

273
00:08:10,240 --> 00:08:11,520
little hard to see so i'm going to jump

274
00:08:11,520 --> 00:08:14,080
out of this document and hopefully when

275
00:08:14,080 --> 00:08:15,599
we start to demo things this won't start

276
00:08:15,599 --> 00:08:17,120
to break um

277
00:08:17,120 --> 00:08:19,120
so this is uh let's see if we can make

278
00:08:19,120 --> 00:08:21,039
this a little bit bigger

279
00:08:21,039 --> 00:08:22,720
this is the open source documentation so

280
00:08:22,720 --> 00:08:24,479
i i'll post

281
00:08:24,479 --> 00:08:25,599
links to this in the slack channels

282
00:08:25,599 --> 00:08:27,039
afterwards if anyone wants to read it

283
00:08:27,039 --> 00:08:28,560
but this is just

284
00:08:28,560 --> 00:08:30,639
an explorer of the taxonomy so just to

285
00:08:30,639 --> 00:08:32,399
explain the sort of primitives that are

286
00:08:32,399 --> 00:08:34,000
available to describe things the

287
00:08:34,000 --> 00:08:36,320
taxonomy was designed to support or

288
00:08:36,320 --> 00:08:37,919
synthesize or translate if you will the

289
00:08:37,919 --> 00:08:42,799
gdpr the ccpa or the cpra now the lgpd

290
00:08:42,799 --> 00:08:44,720
and it also supports standards like iso

291
00:08:44,720 --> 00:08:47,680
19944 so which is used to describe cloud

292
00:08:47,680 --> 00:08:49,920
service providers right

293
00:08:49,920 --> 00:08:51,519
and the intention of this is to provide

294
00:08:51,519 --> 00:08:53,360
a very simple abstraction for developers

295
00:08:53,360 --> 00:08:54,959
to quickly annotate or describe their

296
00:08:54,959 --> 00:08:56,959
systems without having to understand the

297
00:08:56,959 --> 00:08:58,320
underlying laws or regulations right

298
00:08:58,320 --> 00:08:59,839
that's not the job of the developer per

299
00:08:59,839 --> 00:09:01,279
se but they do understand what their

300
00:09:01,279 --> 00:09:03,200
system is doing so the first component

301
00:09:03,200 --> 00:09:05,279
of the taxonomy is the categories so

302
00:09:05,279 --> 00:09:07,760
think of the categories as the the what

303
00:09:07,760 --> 00:09:09,040
right the type of data that you're

304
00:09:09,040 --> 00:09:11,440
handling right it could be user uh

305
00:09:11,440 --> 00:09:13,680
derived or provided data right the

306
00:09:13,680 --> 00:09:15,200
distinction being quite clear there it's

307
00:09:15,200 --> 00:09:17,040
provided by the user directly or derived

308
00:09:17,040 --> 00:09:18,240
about the user through observation

309
00:09:18,240 --> 00:09:20,320
perhaps it can be identifiable or

310
00:09:20,320 --> 00:09:22,080
non-identifiable and then there are many

311
00:09:22,080 --> 00:09:23,360
sort of levels of subcategories that

312
00:09:23,360 --> 00:09:25,360
describe the particular uh groupings of

313
00:09:25,360 --> 00:09:27,440
information such as contact data account

314
00:09:27,440 --> 00:09:28,880
information etc

315
00:09:28,880 --> 00:09:30,880
now one point i should have made is that

316
00:09:30,880 --> 00:09:32,880
this is the taxonomy that fita ships

317
00:09:32,880 --> 00:09:34,640
with you can actually extend this

318
00:09:34,640 --> 00:09:36,560
endlessly and a lot of our design

319
00:09:36,560 --> 00:09:38,720
partners do to support their specific

320
00:09:38,720 --> 00:09:40,640
needs and or you can rip it out and

321
00:09:40,640 --> 00:09:41,920
replace it with your own taxonomy if you

322
00:09:41,920 --> 00:09:44,160
wish the goal however is that we arrive

323
00:09:44,160 --> 00:09:45,760
at a standard actually our hope is that

324
00:09:45,760 --> 00:09:47,120
we have a standard taxonomy because that

325
00:09:47,120 --> 00:09:49,040
encourages interoperability between

326
00:09:49,040 --> 00:09:51,440
systems and service providers right

327
00:09:51,440 --> 00:09:52,959
and so the first part is the categories

328
00:09:52,959 --> 00:09:54,959
the second are the data uses and the

329
00:09:54,959 --> 00:09:57,680
data uses describe the how right or um

330
00:09:57,680 --> 00:09:58,959
how you're using that data for what

331
00:09:58,959 --> 00:10:01,519
purpose right um it could be a

332
00:10:01,519 --> 00:10:02,959
third-party personalized advertising a

333
00:10:02,959 --> 00:10:05,360
very unpleasant thought it could be

334
00:10:05,360 --> 00:10:06,800
optimizing something in the system for

335
00:10:06,800 --> 00:10:07,839
example

336
00:10:07,839 --> 00:10:09,440
then data subjects is exactly what it

337
00:10:09,440 --> 00:10:12,079
sounds like it's the individuals of

338
00:10:12,079 --> 00:10:14,240
whom are in your system could be a user

339
00:10:14,240 --> 00:10:16,800
customer consumer a patient etc

340
00:10:16,800 --> 00:10:18,320
and then data qualifiers is a little

341
00:10:18,320 --> 00:10:20,720
hard to um see in the visualization tool

342
00:10:20,720 --> 00:10:22,000
but it's essentially a spectrum of the

343
00:10:22,000 --> 00:10:24,800
degree of identifiability that a data

344
00:10:24,800 --> 00:10:27,040
set represents from fully identified

345
00:10:27,040 --> 00:10:28,560
information right quite specific

346
00:10:28,560 --> 00:10:30,959
personal data through to truly anonymous

347
00:10:30,959 --> 00:10:33,120
information or potentially variants in

348
00:10:33,120 --> 00:10:34,640
the middle like aggregated data or

349
00:10:34,640 --> 00:10:36,000
pseudonymized and unlinked or

350
00:10:36,000 --> 00:10:38,560
pseudonymized

351
00:10:38,560 --> 00:10:40,079
so so those are just the basic sort of

352
00:10:40,079 --> 00:10:41,279
primitives of the taxonomy that are

353
00:10:41,279 --> 00:10:42,800
worth understanding so from here i'm

354
00:10:42,800 --> 00:10:44,480
going to dive back into the document and

355
00:10:44,480 --> 00:10:46,079
sort of walk you through the benefits it

356
00:10:46,079 --> 00:10:47,760
should be self-evident right but with a

357
00:10:47,760 --> 00:10:50,160
very simple language any developer can

358
00:10:50,160 --> 00:10:52,399
quickly declare what their code base is

359
00:10:52,399 --> 00:10:53,600
doing that could be at the sort of

360
00:10:53,600 --> 00:10:55,200
abstract level so it could be a feature

361
00:10:55,200 --> 00:10:56,560
owner or product owner or could be

362
00:10:56,560 --> 00:10:58,720
individual developers describing what

363
00:10:58,720 --> 00:11:00,560
their code is doing so the purpose it's

364
00:11:00,560 --> 00:11:02,480
serving and what data it's acting on so

365
00:11:02,480 --> 00:11:04,880
the inputs and outputs of of information

366
00:11:04,880 --> 00:11:06,560
you can then evaluate that so you can

367
00:11:06,560 --> 00:11:07,680
look at that against organizational

368
00:11:07,680 --> 00:11:09,680
policies in your ci pipeline and you can

369
00:11:09,680 --> 00:11:11,519
enforce against it right we can say we

370
00:11:11,519 --> 00:11:13,360
don't use these types of behavior data

371
00:11:13,360 --> 00:11:15,040
and location data together so we can't

372
00:11:15,040 --> 00:11:17,040
build services or deploy services that

373
00:11:17,040 --> 00:11:18,240
are going to do those things that

374
00:11:18,240 --> 00:11:19,680
creates an unnecessary risk versus an

375
00:11:19,680 --> 00:11:22,160
organization and you can audit that and

376
00:11:22,160 --> 00:11:23,440
because you're creating this cycle of

377
00:11:23,440 --> 00:11:25,279
evaluation you're generating a metadata

378
00:11:25,279 --> 00:11:27,279
layer that's both at the application

379
00:11:27,279 --> 00:11:28,640
level so individual services or

380
00:11:28,640 --> 00:11:30,640
applications and also the data sets or

381
00:11:30,640 --> 00:11:31,519
infrastructure that's storing

382
00:11:31,519 --> 00:11:33,120
information so you get a very strong

383
00:11:33,120 --> 00:11:35,120
visibility of the lineage and flow of

384
00:11:35,120 --> 00:11:36,959
information such that you can govern on

385
00:11:36,959 --> 00:11:38,240
top of it

386
00:11:38,240 --> 00:11:40,480
so it allows you to start to risk

387
00:11:40,480 --> 00:11:41,760
mitigate in the software development

388
00:11:41,760 --> 00:11:43,839
life cycle not com completely kill it

389
00:11:43,839 --> 00:11:45,519
but certainly mitigate it heavily it

390
00:11:45,519 --> 00:11:47,279
allows you to generate an audit trail of

391
00:11:47,279 --> 00:11:48,560
the decisions you're making the software

392
00:11:48,560 --> 00:11:50,079
development life cycle and if you think

393
00:11:50,079 --> 00:11:51,760
about facebook's consent decree with the

394
00:11:51,760 --> 00:11:53,600
ftc is a prime example of how we're

395
00:11:53,600 --> 00:11:54,959
being asked as developers particularly

396
00:11:54,959 --> 00:11:56,560
large organizations to start to

397
00:11:56,560 --> 00:11:57,519
demonstrate that right the

398
00:11:57,519 --> 00:11:59,600
decision-making that we take as we build

399
00:11:59,600 --> 00:12:01,680
things and it provides a consistent data

400
00:12:01,680 --> 00:12:02,959
inventory right from the moment you

401
00:12:02,959 --> 00:12:05,519
write code or modify a data set

402
00:12:05,519 --> 00:12:07,120
and because of that you've essentially

403
00:12:07,120 --> 00:12:08,800
got context right you understand what

404
00:12:08,800 --> 00:12:10,720
your systems are doing and how therefore

405
00:12:10,720 --> 00:12:12,160
you can govern on top of them and so

406
00:12:12,160 --> 00:12:13,519
then we pass the tools that can actually

407
00:12:13,519 --> 00:12:14,880
allow us to actively govern on top of

408
00:12:14,880 --> 00:12:16,560
that

409
00:12:16,560 --> 00:12:17,920
so with that i'm going to get to two

410
00:12:17,920 --> 00:12:19,920
real world examples um these are very

411
00:12:19,920 --> 00:12:20,800
simple

412
00:12:20,800 --> 00:12:22,320
the first of these is actually enforcing

413
00:12:22,320 --> 00:12:23,839
a policy in our software development

414
00:12:23,839 --> 00:12:25,440
life cycle

415
00:12:25,440 --> 00:12:26,720
and we'll get to the second one which is

416
00:12:26,720 --> 00:12:28,160
actually executing a subject rights

417
00:12:28,160 --> 00:12:30,240
request for example under the gdpr to

418
00:12:30,240 --> 00:12:32,399
retrieve a user's data so let's start

419
00:12:32,399 --> 00:12:34,160
with enforcing policies

420
00:12:34,160 --> 00:12:34,959
so

421
00:12:34,959 --> 00:12:37,760
this is um taken

422
00:12:37,760 --> 00:12:39,440
from the canel which is the data

423
00:12:39,440 --> 00:12:41,680
regulator in in france this is their

424
00:12:41,680 --> 00:12:43,040
proposed recommendation for how you

425
00:12:43,040 --> 00:12:45,360
conduct a privacy impact assessment you

426
00:12:45,360 --> 00:12:47,120
might know them as privacy reviews also

427
00:12:47,120 --> 00:12:49,440
right um very very important to do right

428
00:12:49,440 --> 00:12:50,959
it's the evaluation of the risk related

429
00:12:50,959 --> 00:12:52,000
to how we're using information or

430
00:12:52,000 --> 00:12:53,680
building systems it's

431
00:12:53,680 --> 00:12:55,279
one part of

432
00:12:55,279 --> 00:12:57,040
the sort of principles of privacy by

433
00:12:57,040 --> 00:12:58,079
design

434
00:12:58,079 --> 00:12:59,920
the challenge in practice however is

435
00:12:59,920 --> 00:13:01,760
that it's often a very labor intensive

436
00:13:01,760 --> 00:13:02,880
process

437
00:13:02,880 --> 00:13:04,480
engineers are undereducated in how to

438
00:13:04,480 --> 00:13:06,720
conduct it and it requires real

439
00:13:06,720 --> 00:13:08,320
expertise in privacy engineering to do

440
00:13:08,320 --> 00:13:09,920
it very very well

441
00:13:09,920 --> 00:13:11,440
now we can't remove all of this but we

442
00:13:11,440 --> 00:13:12,720
could certainly streamline this right by

443
00:13:12,720 --> 00:13:14,160
providing tooling that starts to attempt

444
00:13:14,160 --> 00:13:15,680
to evaluate and mitigate some of the

445
00:13:15,680 --> 00:13:18,000
risks related to how we use data so if

446
00:13:18,000 --> 00:13:19,120
we could move away from this sort of

447
00:13:19,120 --> 00:13:21,600
very complex rube goldberg like machine

448
00:13:21,600 --> 00:13:23,200
to evaluate what we're doing in our

449
00:13:23,200 --> 00:13:25,040
systems and whether they pass muster we

450
00:13:25,040 --> 00:13:26,240
could we could write something much more

451
00:13:26,240 --> 00:13:28,079
powerful and so just to explain the

452
00:13:28,079 --> 00:13:29,519
tooling and the sort of layers of how

453
00:13:29,519 --> 00:13:32,160
it's used operationally

454
00:13:32,160 --> 00:13:33,680
the left side of this is the code

455
00:13:33,680 --> 00:13:35,040
management environment right so the

456
00:13:35,040 --> 00:13:36,880
software development environment and the

457
00:13:36,880 --> 00:13:38,560
right side is the runtime so right now

458
00:13:38,560 --> 00:13:39,760
we're focused on the left and you'll see

459
00:13:39,760 --> 00:13:41,839
fides control sits beneath that so the

460
00:13:41,839 --> 00:13:43,920
control tools are used in the software

461
00:13:43,920 --> 00:13:45,440
development lifecycle again there's a

462
00:13:45,440 --> 00:13:48,000
server and a cli tool and if we think of

463
00:13:48,000 --> 00:13:49,360
the sort of layers of an organization

464
00:13:49,360 --> 00:13:51,360
the top layer is the governance right so

465
00:13:51,360 --> 00:13:52,800
executive decision making about what we

466
00:13:52,800 --> 00:13:55,040
can do as a business so policies we

467
00:13:55,040 --> 00:13:57,279
permit policies we reject

468
00:13:57,279 --> 00:13:58,480
things we allow ourselves to do

469
00:13:58,480 --> 00:14:00,160
internally or externally as a result of

470
00:14:00,160 --> 00:14:01,440
regulations

471
00:14:01,440 --> 00:14:02,639
and then there's feature in product

472
00:14:02,639 --> 00:14:04,560
owners right the folks that build things

473
00:14:04,560 --> 00:14:05,839
right so they're responsible for

474
00:14:05,839 --> 00:14:07,120
essentially what something might do or

475
00:14:07,120 --> 00:14:09,040
how it might act and then finally you've

476
00:14:09,040 --> 00:14:10,079
got engineers who actually building

477
00:14:10,079 --> 00:14:12,079
right they're designing technical design

478
00:14:12,079 --> 00:14:14,560
implementation eventually deployment

479
00:14:14,560 --> 00:14:16,320
so what this allows us to do here is

480
00:14:16,320 --> 00:14:18,000
essentially write policies at the upper

481
00:14:18,000 --> 00:14:19,680
level it allows feature and product

482
00:14:19,680 --> 00:14:21,760
owners to describe what we're doing with

483
00:14:21,760 --> 00:14:23,519
our data so its use its purpose in our

484
00:14:23,519 --> 00:14:25,519
systems and allows engineers to quickly

485
00:14:25,519 --> 00:14:27,360
describe or declare the types of data

486
00:14:27,360 --> 00:14:29,360
they're using to achieve that purpose so

487
00:14:29,360 --> 00:14:30,720
between these three we effectively have

488
00:14:30,720 --> 00:14:32,800
policies we can enforce a description of

489
00:14:32,800 --> 00:14:34,160
how we're using that information and

490
00:14:34,160 --> 00:14:35,600
then the types of data that we want to

491
00:14:35,600 --> 00:14:37,680
use so to bring this to life we've got a

492
00:14:37,680 --> 00:14:40,000
i've got a local uh demo environment

493
00:14:40,000 --> 00:14:41,839
running here so this is all local to my

494
00:14:41,839 --> 00:14:44,160
computer i should say so one point of

495
00:14:44,160 --> 00:14:45,760
distinction is typically the fetus

496
00:14:45,760 --> 00:14:47,360
control server runs for a group of

497
00:14:47,360 --> 00:14:48,720
engineers right as part of your ci

498
00:14:48,720 --> 00:14:50,720
pipeline so in this demonstration it's

499
00:14:50,720 --> 00:14:52,639
not part of the ci pipeline it's running

500
00:14:52,639 --> 00:14:54,160
locally therefore i've accessed both the

501
00:14:54,160 --> 00:14:55,680
policies and the declarations that would

502
00:14:55,680 --> 00:14:57,760
be obviously a security no-no ideally

503
00:14:57,760 --> 00:14:59,360
these would be clearly segregated but

504
00:14:59,360 --> 00:15:00,800
for the purpose of demonstration i have

505
00:15:00,800 --> 00:15:01,839
both

506
00:15:01,839 --> 00:15:02,639
so

507
00:15:02,639 --> 00:15:04,560
um just to explain what we've got i've

508
00:15:04,560 --> 00:15:06,480
got a fictional e-commerce system

509
00:15:06,480 --> 00:15:08,959
running locally here um so let me just

510
00:15:08,959 --> 00:15:10,160
hopefully i really can see that i'll

511
00:15:10,160 --> 00:15:12,639
zoom in a little bit more maybe

512
00:15:12,639 --> 00:15:14,240
okay so we've got a couple of documents

513
00:15:14,240 --> 00:15:15,199
open which i'll walk you through in a

514
00:15:15,199 --> 00:15:16,880
moment um but just so you can see what's

515
00:15:16,880 --> 00:15:18,560
running in my browser i've got this

516
00:15:18,560 --> 00:15:20,720
flask application running it's a very

517
00:15:20,720 --> 00:15:22,639
primitive ecommerce website it's nothing

518
00:15:22,639 --> 00:15:25,839
special right it's a flask application

519
00:15:25,839 --> 00:15:27,519
a simple postgres database and a couple

520
00:15:27,519 --> 00:15:29,120
of tables right there's a products table

521
00:15:29,120 --> 00:15:31,040
users table

522
00:15:31,040 --> 00:15:32,399
and a few other things and so for

523
00:15:32,399 --> 00:15:34,399
example i can log into this right with a

524
00:15:34,399 --> 00:15:37,120
fictional user

525
00:15:39,199 --> 00:15:40,480
and then i can purchase a product so i'm

526
00:15:40,480 --> 00:15:41,600
going to purchase something i'm going to

527
00:15:41,600 --> 00:15:44,480
put in my address

528
00:15:48,959 --> 00:15:50,079
and i'm going to purchase now there's no

529
00:15:50,079 --> 00:15:51,600
checkout flow per se with no credit

530
00:15:51,600 --> 00:15:53,120
cards it's just a simple data capture

531
00:15:53,120 --> 00:15:55,040
right so we've selected a product we've

532
00:15:55,040 --> 00:15:56,720
got an account we have a password it's

533
00:15:56,720 --> 00:15:57,920
got some of our personal information

534
00:15:57,920 --> 00:15:59,360
it's got our delivery address those

535
00:15:59,360 --> 00:16:00,560
things have been collected in postgres

536
00:16:00,560 --> 00:16:01,759
and if we scale that into a large

537
00:16:01,759 --> 00:16:03,600
business that's probably flowed into

538
00:16:03,600 --> 00:16:06,560
several warehouses some sort of um data

539
00:16:06,560 --> 00:16:07,759
residency systems and a bunch of

540
00:16:07,759 --> 00:16:10,399
third-party providers probably so

541
00:16:10,399 --> 00:16:11,600
from here now that we understand the

542
00:16:11,600 --> 00:16:12,880
basic system that we're operating we're

543
00:16:12,880 --> 00:16:14,399
going to look at how we would evaluate a

544
00:16:14,399 --> 00:16:15,440
policy

545
00:16:15,440 --> 00:16:17,120
so in order to understand that i'm just

546
00:16:17,120 --> 00:16:18,720
going to show you a few of the documents

547
00:16:18,720 --> 00:16:20,240
we have open here the first you'll see

548
00:16:20,240 --> 00:16:22,399
is a data set declaration file since the

549
00:16:22,399 --> 00:16:23,759
yaml files where everything you declare

550
00:16:23,759 --> 00:16:25,120
with fidos is in the ammo it's very

551
00:16:25,120 --> 00:16:27,120
simple to to write and both both to

552
00:16:27,120 --> 00:16:28,639
write and to read you'll see here that

553
00:16:28,639 --> 00:16:29,920
there are essentially three tables

554
00:16:29,920 --> 00:16:31,680
products purchases and users so if i

555
00:16:31,680 --> 00:16:33,040
expand this out i've got some products

556
00:16:33,040 --> 00:16:34,880
here but we'll go to the users table for

557
00:16:34,880 --> 00:16:37,040
a moment so this here is a declaration

558
00:16:37,040 --> 00:16:38,320
of essentially the fields that exist in

559
00:16:38,320 --> 00:16:39,680
this very primitive table right we've

560
00:16:39,680 --> 00:16:41,360
got a created outfield email address

561
00:16:41,360 --> 00:16:43,759
first name id and last name so if i

562
00:16:43,759 --> 00:16:47,680
expand out created out we can oh sorry

563
00:16:47,680 --> 00:16:49,519
so if i expand out the created

564
00:16:49,519 --> 00:16:50,959
field we can see there's a data category

565
00:16:50,959 --> 00:16:52,560
assigned to this so the created at

566
00:16:52,560 --> 00:16:54,240
timestamp is essentially data used for

567
00:16:54,240 --> 00:16:56,240
systems operations it's not in this

568
00:16:56,240 --> 00:16:58,240
instance not particularly interesting

569
00:16:58,240 --> 00:17:00,399
conversely we've got email address here

570
00:17:00,399 --> 00:17:02,160
and this is declared as a data category

571
00:17:02,160 --> 00:17:05,520
of user provided identifiable contact

572
00:17:05,520 --> 00:17:07,119
information or contact email you can see

573
00:17:07,119 --> 00:17:08,640
here now we can make a declaration at

574
00:17:08,640 --> 00:17:10,240
any level of the taxonomy right so if we

575
00:17:10,240 --> 00:17:11,599
wanted to as an engineer we might not

576
00:17:11,599 --> 00:17:13,199
understand what type of data is

577
00:17:13,199 --> 00:17:14,720
precisely but we know it's user provided

578
00:17:14,720 --> 00:17:16,959
and identifies them so we can coarsely

579
00:17:16,959 --> 00:17:18,240
declare the type of information we're

580
00:17:18,240 --> 00:17:19,520
handling that of course means we can

581
00:17:19,520 --> 00:17:21,520
only enforce policies that coarsely so

582
00:17:21,520 --> 00:17:22,720
ideally we're

583
00:17:22,720 --> 00:17:25,119
fine-grained annotations where possible

584
00:17:25,119 --> 00:17:26,959
um so we can declare each of these very

585
00:17:26,959 --> 00:17:28,720
simply it can be an object with multiple

586
00:17:28,720 --> 00:17:31,200
labels and we can add labels over time

587
00:17:31,200 --> 00:17:33,200
we've declared these in a single dataset

588
00:17:33,200 --> 00:17:36,080
yaml file for that postgres database and

589
00:17:36,080 --> 00:17:37,440
separately we have one that describes

590
00:17:37,440 --> 00:17:39,039
our e-commerce system

591
00:17:39,039 --> 00:17:40,480
now this is a very simple system and so

592
00:17:40,480 --> 00:17:41,840
we've got a single annotation file you

593
00:17:41,840 --> 00:17:43,600
could have annotations that describe

594
00:17:43,600 --> 00:17:45,360
individual services or components of a

595
00:17:45,360 --> 00:17:46,960
system depending on how granular you

596
00:17:46,960 --> 00:17:48,720
want to enforce things so you can see

597
00:17:48,720 --> 00:17:50,080
here in this case

598
00:17:50,080 --> 00:17:51,760
it simply describes what the system is

599
00:17:51,760 --> 00:17:53,520
it's an e-commerce system and then we

600
00:17:53,520 --> 00:17:54,720
have the data categories that we're

601
00:17:54,720 --> 00:17:56,400
operating on so we can see here there's

602
00:17:56,400 --> 00:17:58,799
user provided identifiable data this

603
00:17:58,799 --> 00:18:01,440
user derived identifiable data

604
00:18:01,440 --> 00:18:03,600
sorry

605
00:18:03,600 --> 00:18:05,360
there's user identifiable data and

606
00:18:05,360 --> 00:18:07,760
system operations data and the data use

607
00:18:07,760 --> 00:18:09,600
so what this system is doing with data's

608
00:18:09,600 --> 00:18:11,039
purpose is just providing systems

609
00:18:11,039 --> 00:18:12,240
operations it's not particularly

610
00:18:12,240 --> 00:18:13,280
interesting

611
00:18:13,280 --> 00:18:14,559
and then there's the subject type it's

612
00:18:14,559 --> 00:18:16,640
customer data so it's a very simple

613
00:18:16,640 --> 00:18:18,880
declaration so now imagine for a moment

614
00:18:18,880 --> 00:18:20,000
that i'm an enterprising engineer

615
00:18:20,000 --> 00:18:21,760
working at this company and i need to

616
00:18:21,760 --> 00:18:23,440
add google analytics to it i've decided

617
00:18:23,440 --> 00:18:24,720
that would be really helpful now as is

618
00:18:24,720 --> 00:18:26,080
common most developers don't know that

619
00:18:26,080 --> 00:18:27,679
google analytics collects personal data

620
00:18:27,679 --> 00:18:29,520
or there's confusion over ip addresses

621
00:18:29,520 --> 00:18:32,000
being personal data and so i've declared

622
00:18:32,000 --> 00:18:34,000
here that i've added google analytics

623
00:18:34,000 --> 00:18:36,000
and i'll just expand this one out we can

624
00:18:36,000 --> 00:18:37,360
see here i've declared that i'm

625
00:18:37,360 --> 00:18:38,960
collecting ip addresses some location

626
00:18:38,960 --> 00:18:41,200
data some identifiable data and so what

627
00:18:41,200 --> 00:18:42,960
i'm going to do now um although i'm

628
00:18:42,960 --> 00:18:44,320
we're not running a ci pipeline here i'm

629
00:18:44,320 --> 00:18:48,160
just going to run an evaluation quickly

630
00:18:48,160 --> 00:18:50,640
against our policies

631
00:18:50,640 --> 00:18:51,679
so basically it's just bringing up the

632
00:18:51,679 --> 00:18:53,520
video servers it's going to collect the

633
00:18:53,520 --> 00:18:54,960
available policies it's going to collect

634
00:18:54,960 --> 00:18:56,320
the metadata that's available in all of

635
00:18:56,320 --> 00:18:58,080
the annotations in the project and it's

636
00:18:58,080 --> 00:18:59,440
going to evaluate those against those

637
00:18:59,440 --> 00:19:01,360
policies and you can see here we've had

638
00:19:01,360 --> 00:19:03,679
a failure um and so the failure in this

639
00:19:03,679 --> 00:19:06,320
case is that we are not permitted to use

640
00:19:06,320 --> 00:19:08,799
personal data for these purposes so i've

641
00:19:08,799 --> 00:19:11,120
got an error message here now i can very

642
00:19:11,120 --> 00:19:12,320
quickly look at this and show you the

643
00:19:12,320 --> 00:19:14,480
policy so we've got a policy file here

644
00:19:14,480 --> 00:19:15,840
that describes a very very simple

645
00:19:15,840 --> 00:19:18,240
rejection policy in this case it rejects

646
00:19:18,240 --> 00:19:20,720
the use of sensitive data and as we can

647
00:19:20,720 --> 00:19:22,000
see here specific categories of

648
00:19:22,000 --> 00:19:24,080
sensitive data so we cannot use any of

649
00:19:24,080 --> 00:19:26,400
these types of data for any of these

650
00:19:26,400 --> 00:19:28,080
uses for either improving

651
00:19:28,080 --> 00:19:30,000
personalization advertising third party

652
00:19:30,000 --> 00:19:31,760
sharing or training ai systems we've

653
00:19:31,760 --> 00:19:33,120
sort of declared a very simple set of

654
00:19:33,120 --> 00:19:35,440
conditions here it rejects this check-in

655
00:19:35,440 --> 00:19:37,600
now okay as a developer i go and read

656
00:19:37,600 --> 00:19:38,400
some

657
00:19:38,400 --> 00:19:40,960
documentation about google's analytics

658
00:19:40,960 --> 00:19:42,559
engine i realize that i can anonymize

659
00:19:42,559 --> 00:19:44,160
the ip address so effectively

660
00:19:44,160 --> 00:19:46,400
pseudonymizing the data that's risky so

661
00:19:46,400 --> 00:19:48,000
i'm going to redeclare this now as

662
00:19:48,000 --> 00:19:49,840
pseudonymized data that's a very simple

663
00:19:49,840 --> 00:19:52,000
example and we're going to run our

664
00:19:52,000 --> 00:19:54,000
evaluation again so we've essentially

665
00:19:54,000 --> 00:19:55,520
updated some of our code base

666
00:19:55,520 --> 00:19:57,600
re-declared our valuation and it has

667
00:19:57,600 --> 00:19:58,720
passed because it meets the

668
00:19:58,720 --> 00:20:00,320
organization's criterias and each of

669
00:20:00,320 --> 00:20:01,600
these is logged as part of an audit

670
00:20:01,600 --> 00:20:03,039
trail so we can evidence the decisions

671
00:20:03,039 --> 00:20:04,720
being made by the developer against the

672
00:20:04,720 --> 00:20:07,120
declarations they've made

673
00:20:07,120 --> 00:20:08,480
i'm very conscious i've run out of time

674
00:20:08,480 --> 00:20:10,640
and i've got another example so i'll

675
00:20:10,640 --> 00:20:13,039
i'll rush this last one very quickly

676
00:20:13,039 --> 00:20:15,280
speak faster don't speak faster slow

677
00:20:15,280 --> 00:20:18,639
down okay apology

678
00:20:18,840 --> 00:20:20,640
um

679
00:20:20,640 --> 00:20:22,080
okay no problem

680
00:20:22,080 --> 00:20:23,600
um so

681
00:20:23,600 --> 00:20:24,400
um

682
00:20:24,400 --> 00:20:25,520
with that we've shown a very simple

683
00:20:25,520 --> 00:20:27,679
example of evaluating a policy in the ci

684
00:20:27,679 --> 00:20:30,000
pipeline the other side of this the

685
00:20:30,000 --> 00:20:31,600
ability to enforce with that metadata

686
00:20:31,600 --> 00:20:34,080
layer uh operational tasks like the

687
00:20:34,080 --> 00:20:36,640
ability to retrieve a user's data so

688
00:20:36,640 --> 00:20:39,280
i'll i'll do this very quickly

689
00:20:39,280 --> 00:20:41,440
so in this case

690
00:20:41,440 --> 00:20:43,120
what a privacy request normally looks

691
00:20:43,120 --> 00:20:43,840
like

692
00:20:43,840 --> 00:20:45,280
under the gdpr might be like this a

693
00:20:45,280 --> 00:20:46,960
document received by an organization

694
00:20:46,960 --> 00:20:48,480
making a request for access to data or

695
00:20:48,480 --> 00:20:50,159
erasure for example

696
00:20:50,159 --> 00:20:51,440
what it normally looks like as a process

697
00:20:51,440 --> 00:20:53,520
for an organization is a giant rube

698
00:20:53,520 --> 00:20:55,360
goldberg machine right

699
00:20:55,360 --> 00:20:56,799
retrieve data

700
00:20:56,799 --> 00:20:58,159
create tickets identify where that

701
00:20:58,159 --> 00:21:00,559
information is and return it to the user

702
00:21:00,559 --> 00:21:02,240
now with these tools because we have a

703
00:21:02,240 --> 00:21:04,559
consistent metadata layer we can write a

704
00:21:04,559 --> 00:21:06,799
policy for requests and we can execute

705
00:21:06,799 --> 00:21:08,880
those against uh

706
00:21:08,880 --> 00:21:11,039
known identifiers like specific keys for

707
00:21:11,039 --> 00:21:12,720
example so in this case i'm going to run

708
00:21:12,720 --> 00:21:14,320
one very very quickly

709
00:21:14,320 --> 00:21:15,840
so i'm going to just retrieve some data

710
00:21:15,840 --> 00:21:18,559
so we're going to run it

711
00:21:19,039 --> 00:21:21,440
ops request

712
00:21:21,440 --> 00:21:22,799
and you'll see here that it's allowing

713
00:21:22,799 --> 00:21:24,480
me to set a target from the taxonomy for

714
00:21:24,480 --> 00:21:25,600
the type of information i'd like to

715
00:21:25,600 --> 00:21:28,880
collect so for example i could say

716
00:21:28,880 --> 00:21:31,360
i specifically want to look at user data

717
00:21:31,360 --> 00:21:34,000
for example um so all of the data under

718
00:21:34,000 --> 00:21:35,120
user or i might just want to look at

719
00:21:35,120 --> 00:21:36,880
contact information for example so i'm

720
00:21:36,880 --> 00:21:38,320
going to construct a policy that

721
00:21:38,320 --> 00:21:39,600
retrieves everything about our user in

722
00:21:39,600 --> 00:21:41,200
the e-commerce system so we'll just use

723
00:21:41,200 --> 00:21:44,159
the primary user resource it's an access

724
00:21:44,159 --> 00:21:46,159
request in this case

725
00:21:46,159 --> 00:21:47,280
we're going to put in our user's email

726
00:21:47,280 --> 00:21:49,678
address

727
00:21:56,240 --> 00:22:01,679
and so we can see a typical demo live

728
00:22:02,400 --> 00:22:05,880
we've had a failure

729
00:22:15,600 --> 00:22:16,960
there we go so we can see the json

730
00:22:16,960 --> 00:22:18,480
object that is returned is all of the

731
00:22:18,480 --> 00:22:19,919
data related to this user based on the

732
00:22:19,919 --> 00:22:22,400
annotations in that data set so if that

733
00:22:22,400 --> 00:22:23,919
database is modified anyway in the

734
00:22:23,919 --> 00:22:25,440
future that policy can be enforced

735
00:22:25,440 --> 00:22:28,000
consistently against that or any number

736
00:22:28,000 --> 00:22:29,600
of systems so for example if we wanted

737
00:22:29,600 --> 00:22:32,159
to change the request we could say well

738
00:22:32,159 --> 00:22:33,360
we're going to run it

739
00:22:33,360 --> 00:22:35,360
only on one specific type of data so

740
00:22:35,360 --> 00:22:36,880
we're going to say user

741
00:22:36,880 --> 00:22:38,000
provided

742
00:22:38,000 --> 00:22:39,679
identifiable

743
00:22:39,679 --> 00:22:41,840
name

744
00:22:42,480 --> 00:22:45,600
provide their email address

745
00:22:47,440 --> 00:22:51,400
and i've typed it again apologies

746
00:23:00,799 --> 00:23:03,799
okay

747
00:23:17,039 --> 00:23:18,320
and there we go it's only returning the

748
00:23:18,320 --> 00:23:19,600
name for the user in this very simple

749
00:23:19,600 --> 00:23:21,360
example but you can construct very

750
00:23:21,360 --> 00:23:22,960
complex policies for both the ratio and

751
00:23:22,960 --> 00:23:26,000
retrieval and i'm so far over time i'm

752
00:23:26,000 --> 00:23:28,559
going to just skip to the end um

753
00:23:28,559 --> 00:23:30,000
and say that essentially the project is

754
00:23:30,000 --> 00:23:31,280
completely open source after two and a

755
00:23:31,280 --> 00:23:33,520
half years of work um and our goal is to

756
00:23:33,520 --> 00:23:35,360
simply encourage those to contribute

757
00:23:35,360 --> 00:23:36,799
comment assist us in refining the

758
00:23:36,799 --> 00:23:38,799
taxonomy and improving these tools so

759
00:23:38,799 --> 00:23:39,840
they can lower the bar for every

760
00:23:39,840 --> 00:23:41,120
engineer to improve the quality of

761
00:23:41,120 --> 00:23:44,410
privacy in their systems thank you

762
00:23:44,410 --> 00:23:50,769
[Applause]

763
00:23:56,480 --> 00:23:58,559
you

