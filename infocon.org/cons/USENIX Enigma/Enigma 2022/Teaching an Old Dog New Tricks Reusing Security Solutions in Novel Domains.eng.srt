1
00:00:06,879 --> 00:00:08,480
there we go

2
00:00:08,480 --> 00:00:09,840
so today let's talk about reusing

3
00:00:09,840 --> 00:00:11,920
security solutions

4
00:00:11,920 --> 00:00:12,719
the way we're going to do that we're

5
00:00:12,719 --> 00:00:14,000
going to start off with some motivations

6
00:00:14,000 --> 00:00:15,759
and context around why i'm suggesting

7
00:00:15,759 --> 00:00:17,039
that you should do that and then we'll

8
00:00:17,039 --> 00:00:18,640
spend the majority of time in this talk

9
00:00:18,640 --> 00:00:20,240
looking at some case studies about how

10
00:00:20,240 --> 00:00:21,920
we've reused security solutions at meta

11
00:00:21,920 --> 00:00:23,920
in domains outside of security

12
00:00:23,920 --> 00:00:25,519
we'll then move on to some limitations

13
00:00:25,519 --> 00:00:27,199
and talk about why this isn't always

14
00:00:27,199 --> 00:00:29,039
going to work and finally i'll send you

15
00:00:29,039 --> 00:00:30,880
off with some conclusions

16
00:00:30,880 --> 00:00:32,800
very briefly about me my name is graham

17
00:00:32,800 --> 00:00:34,719
belini i'm a security engineer at metta

18
00:00:34,719 --> 00:00:37,040
the artist formerly known as facebook

19
00:00:37,040 --> 00:00:39,040
and i work mostly on like python

20
00:00:39,040 --> 00:00:41,200
security topics

21
00:00:41,200 --> 00:00:42,480
the motivation in the context of this

22
00:00:42,480 --> 00:00:43,280
talk

23
00:00:43,280 --> 00:00:45,200
really starts with kind of how

24
00:00:45,200 --> 00:00:48,000
we do security at meta so our goal is to

25
00:00:48,000 --> 00:00:50,480
build generalized solutions that let us

26
00:00:50,480 --> 00:00:53,039
shift left and solve problems at scale

27
00:00:53,039 --> 00:00:55,039
that sounds kind of high level in

28
00:00:55,039 --> 00:00:56,320
wishy-washy so i'm going to go into each

29
00:00:56,320 --> 00:00:58,160
of those pieces a little bit more when i

30
00:00:58,160 --> 00:00:59,520
talk about solving or building

31
00:00:59,520 --> 00:01:01,520
generalized solutions i talk about i'm

32
00:01:01,520 --> 00:01:03,039
thinking about things like bug bounty

33
00:01:03,039 --> 00:01:05,040
programs or static analyzers things that

34
00:01:05,040 --> 00:01:07,119
have the ability to not just find the

35
00:01:07,119 --> 00:01:09,119
current bug that we know about now but

36
00:01:09,119 --> 00:01:10,560
also have the ability to adapt to the

37
00:01:10,560 --> 00:01:12,479
next bug that comes out so bug bounty

38
00:01:12,479 --> 00:01:14,560
programs are a good example where

39
00:01:14,560 --> 00:01:16,400
you know as the security industry is

40
00:01:16,400 --> 00:01:17,759
evolving and new research is happening

41
00:01:17,759 --> 00:01:19,840
and things like that you people outside

42
00:01:19,840 --> 00:01:22,000
can find that research and look for bugs

43
00:01:22,000 --> 00:01:22,799
and report it to you and you can

44
00:01:22,799 --> 00:01:24,240
discover a new class of bug that maybe

45
00:01:24,240 --> 00:01:26,960
nobody at your company even knew about

46
00:01:26,960 --> 00:01:28,240
when i talk about this concept of

47
00:01:28,240 --> 00:01:29,680
shifting left i'm talking about this

48
00:01:29,680 --> 00:01:31,520
sort of continuum here uh the continuum

49
00:01:31,520 --> 00:01:33,119
of like bug badness you can think about

50
00:01:33,119 --> 00:01:34,720
it and on the left most side of the

51
00:01:34,720 --> 00:01:36,720
continuum it's prevention right our best

52
00:01:36,720 --> 00:01:39,119
case scenario for a bug is it just can't

53
00:01:39,119 --> 00:01:40,720
ever exist you have frameworks or

54
00:01:40,720 --> 00:01:42,079
something that makes it so that the bug

55
00:01:42,079 --> 00:01:43,200
doesn't happen

56
00:01:43,200 --> 00:01:44,960
next best case scenario is tooling finds

57
00:01:44,960 --> 00:01:46,799
it automatically maybe the tooling finds

58
00:01:46,799 --> 00:01:48,159
it while you're writing code or when you

59
00:01:48,159 --> 00:01:50,079
put it up for review or before it ships

60
00:01:50,079 --> 00:01:51,439
out to production

61
00:01:51,439 --> 00:01:53,040
our next best case after that is finding

62
00:01:53,040 --> 00:01:55,439
it manually finding bugs manually it's

63
00:01:55,439 --> 00:01:57,439
good you're catching bugs but it's not a

64
00:01:57,439 --> 00:01:58,880
thing that scales there's hundreds of

65
00:01:58,880 --> 00:02:01,119
millions of lines of code at facebook

66
00:02:01,119 --> 00:02:03,040
and it's just really hard to have

67
00:02:03,040 --> 00:02:04,399
someone review every single one of those

68
00:02:04,399 --> 00:02:05,680
lines of code and every change that

69
00:02:05,680 --> 00:02:06,880
happens

70
00:02:06,880 --> 00:02:08,560
finding a bug externally through bug

71
00:02:08,560 --> 00:02:10,239
mounting programs like i mentioned

72
00:02:10,239 --> 00:02:12,000
is good we can find it we can fix it but

73
00:02:12,000 --> 00:02:14,080
ideally we'd never get to that situation

74
00:02:14,080 --> 00:02:15,440
and the last two scenarios there of

75
00:02:15,440 --> 00:02:16,879
never finding a bug or having that bug

76
00:02:16,879 --> 00:02:18,640
be exploited are obviously really

77
00:02:18,640 --> 00:02:20,640
undesirable

78
00:02:20,640 --> 00:02:22,480
when i talk about the whole concept of

79
00:02:22,480 --> 00:02:24,000
scale i brought up that we have you know

80
00:02:24,000 --> 00:02:25,840
hundreds of millions of lines of code at

81
00:02:25,840 --> 00:02:27,280
meta and so we've been investing in

82
00:02:27,280 --> 00:02:30,560
tooling for a long time to try and move

83
00:02:30,560 --> 00:02:31,599
more and more bugs into the

84
00:02:31,599 --> 00:02:33,360
automatically found category and at this

85
00:02:33,360 --> 00:02:35,760
point we're at about in 2021 half of all

86
00:02:35,760 --> 00:02:37,599
the bugs that we found were found by

87
00:02:37,599 --> 00:02:39,519
tooling the other half being through our

88
00:02:39,519 --> 00:02:42,720
more human focused review methods

89
00:02:42,720 --> 00:02:44,720
that's all the context that takes us to

90
00:02:44,720 --> 00:02:46,959
a point in 2019 that a lot of people in

91
00:02:46,959 --> 00:02:49,120
this room are probably familiar with

92
00:02:49,120 --> 00:02:52,160
we discovered that we had been logging

93
00:02:52,160 --> 00:02:53,599
a bunch of passwords hundreds of

94
00:02:53,599 --> 00:02:56,000
millions of passwords in plain text

95
00:02:56,000 --> 00:02:57,760
this wasn't something you know it wasn't

96
00:02:57,760 --> 00:02:59,200
like we deliberately took a password and

97
00:02:59,200 --> 00:03:00,480
decided to store the database this is

98
00:03:00,480 --> 00:03:01,840
you know think like a crash dump or

99
00:03:01,840 --> 00:03:03,200
something where you grab there's plain

100
00:03:03,200 --> 00:03:04,319
text passwords and memory things like

101
00:03:04,319 --> 00:03:06,400
that but regardless that doesn't matter

102
00:03:06,400 --> 00:03:08,080
to users it's password stored in plain

103
00:03:08,080 --> 00:03:09,840
text and that's a problem and that was

104
00:03:09,840 --> 00:03:12,319
found once in a security review but we

105
00:03:12,319 --> 00:03:14,400
knew that this pattern could appear

106
00:03:14,400 --> 00:03:16,959
elsewhere and so that's where this

107
00:03:16,959 --> 00:03:19,360
concept of generalized toolings came in

108
00:03:19,360 --> 00:03:21,120
we didn't have a tool that was designed

109
00:03:21,120 --> 00:03:22,720
to look for passwords being logged at

110
00:03:22,720 --> 00:03:24,799
that point but we had tools that could

111
00:03:24,799 --> 00:03:27,360
look for data flows and so we went and

112
00:03:27,360 --> 00:03:28,799
used our tools that resigned for

113
00:03:28,799 --> 00:03:30,159
detecting sql injection and things like

114
00:03:30,159 --> 00:03:32,080
that via dataflow and turned around and

115
00:03:32,080 --> 00:03:33,760
used them to try and detect passwords

116
00:03:33,760 --> 00:03:35,200
being logged

117
00:03:35,200 --> 00:03:37,120
and that's where to me at least this

118
00:03:37,120 --> 00:03:38,879
whole concept of reusing security tools

119
00:03:38,879 --> 00:03:42,000
in new domains comes from

120
00:03:42,000 --> 00:03:43,760
that brings me to this thesis that we

121
00:03:43,760 --> 00:03:46,319
can and we should be applying security

122
00:03:46,319 --> 00:03:48,080
solutions to new problems outside of the

123
00:03:48,080 --> 00:03:49,840
traditional space of you know your owasp

124
00:03:49,840 --> 00:03:51,680
top 10 security vulnerabilities

125
00:03:51,680 --> 00:03:54,239
injection attacks things like that

126
00:03:54,239 --> 00:03:55,519
now we're going to move into some case

127
00:03:55,519 --> 00:03:57,120
studies i'm going to go really deep on

128
00:03:57,120 --> 00:03:59,120
one case study and then give you a brief

129
00:03:59,120 --> 00:04:00,159
overview of a number of other case

130
00:04:00,159 --> 00:04:01,599
studies just so you know that this isn't

131
00:04:01,599 --> 00:04:03,920
a one-off situation

132
00:04:03,920 --> 00:04:05,680
our first case study here is the

133
00:04:05,680 --> 00:04:08,000
instagram threads app for those who

134
00:04:08,000 --> 00:04:09,200
aren't familiar with it it actually was

135
00:04:09,200 --> 00:04:11,200
just recently shut down but the purpose

136
00:04:11,200 --> 00:04:13,040
of this app was among other things to

137
00:04:13,040 --> 00:04:14,159
sort of help you connect with your close

138
00:04:14,159 --> 00:04:15,840
friends and one of the things that did

139
00:04:15,840 --> 00:04:17,759
is it would let you provide a

140
00:04:17,759 --> 00:04:19,279
automatically generated status that your

141
00:04:19,279 --> 00:04:20,959
friends could see so it would tell your

142
00:04:20,959 --> 00:04:22,560
friends things like

143
00:04:22,560 --> 00:04:25,120
i'm on the go my battery is low i'm at

144
00:04:25,120 --> 00:04:27,840
the library whatever it is and some of

145
00:04:27,840 --> 00:04:30,000
those statuses obviously require your

146
00:04:30,000 --> 00:04:31,199
location

147
00:04:31,199 --> 00:04:33,199
and we need your location to calculate

148
00:04:33,199 --> 00:04:34,639
that status but there's no reason we

149
00:04:34,639 --> 00:04:36,320
need to hold on to it after we've

150
00:04:36,320 --> 00:04:37,919
calculated the status

151
00:04:37,919 --> 00:04:40,320
so what i wanted to do was make sure

152
00:04:40,320 --> 00:04:42,080
that we didn't hold on to that location

153
00:04:42,080 --> 00:04:44,479
data and so this case study is about a

154
00:04:44,479 --> 00:04:45,680
security review i did this isn't the

155
00:04:45,680 --> 00:04:47,520
story of a bug that was found

156
00:04:47,520 --> 00:04:48,720
this is the story of a security review

157
00:04:48,720 --> 00:04:50,720
and tooling that we set up to make sure

158
00:04:50,720 --> 00:04:52,080
to try and like ensure that we didn't

159
00:04:52,080 --> 00:04:54,240
still hold on to that data

160
00:04:54,240 --> 00:04:55,680
the generalized problem that i want to

161
00:04:55,680 --> 00:04:57,120
solve here going back to this concept of

162
00:04:57,120 --> 00:04:58,240
good security tools will solve

163
00:04:58,240 --> 00:04:59,919
generalized problems was i wanted to

164
00:04:59,919 --> 00:05:01,759
track data flows and make sure that that

165
00:05:01,759 --> 00:05:03,280
data didn't end up where it shouldn't

166
00:05:03,280 --> 00:05:04,639
end up

167
00:05:04,639 --> 00:05:06,880
to do that i use something called static

168
00:05:06,880 --> 00:05:08,639
paint flow analysis

169
00:05:08,639 --> 00:05:10,320
starts with the concept of tainted data

170
00:05:10,320 --> 00:05:12,560
this is data that originates from or

171
00:05:12,560 --> 00:05:14,479
after transformations is still somehow

172
00:05:14,479 --> 00:05:16,479
influenced by a source of data that we

173
00:05:16,479 --> 00:05:18,880
want to keep track of

174
00:05:18,880 --> 00:05:20,400
that taint source is just something that

175
00:05:20,400 --> 00:05:21,919
we get to define we get to say where it

176
00:05:21,919 --> 00:05:23,360
originates

177
00:05:23,360 --> 00:05:25,199
and the place where it ends up is called

178
00:05:25,199 --> 00:05:26,639
the taint sink

179
00:05:26,639 --> 00:05:28,080
if you put that all together you get the

180
00:05:28,080 --> 00:05:29,919
concept of static team flow analysis

181
00:05:29,919 --> 00:05:31,520
we're tracking the tainted data from

182
00:05:31,520 --> 00:05:34,160
source to sync

183
00:05:34,160 --> 00:05:35,440
it can start off and it can look really

184
00:05:35,440 --> 00:05:36,560
simple right you can have one function

185
00:05:36,560 --> 00:05:38,160
that returns a source of data another

186
00:05:38,160 --> 00:05:40,240
function that is a sync and you just you

187
00:05:40,240 --> 00:05:41,759
know pass the data and it's a simple

188
00:05:41,759 --> 00:05:43,600
call graph like that the call graph can

189
00:05:43,600 --> 00:05:45,440
get longer you can have more sources you

190
00:05:45,440 --> 00:05:47,440
can have more syncs or sorry further

191
00:05:47,440 --> 00:05:49,360
away sources further away syncs you can

192
00:05:49,360 --> 00:05:50,560
have a point where you've got your call

193
00:05:50,560 --> 00:05:51,759
graph and your sources and your syncs

194
00:05:51,759 --> 00:05:53,840
are 10 20 function calls away from each

195
00:05:53,840 --> 00:05:55,919
other and just to make it more complex

196
00:05:55,919 --> 00:05:57,280
you can have multiple sources multiple

197
00:05:57,280 --> 00:05:59,440
syncs so it can get really complicated

198
00:05:59,440 --> 00:06:01,280
but at its core static chain flow

199
00:06:01,280 --> 00:06:03,199
analysis is just about tracking data

200
00:06:03,199 --> 00:06:05,759
from a source to a sync

201
00:06:05,759 --> 00:06:08,080
we built this to catch traditional

202
00:06:08,080 --> 00:06:09,680
security vulnerabilities right a sql

203
00:06:09,680 --> 00:06:11,600
injection attack where you have user

204
00:06:11,600 --> 00:06:13,280
controlled data that enters the

205
00:06:13,280 --> 00:06:15,600
application it gets passed around it

206
00:06:15,600 --> 00:06:18,240
gets put into this um this sql query and

207
00:06:18,240 --> 00:06:19,759
it gets executed so that's the kind of

208
00:06:19,759 --> 00:06:21,759
it was designed to catch

209
00:06:21,759 --> 00:06:24,160
but we can also use it to catch things

210
00:06:24,160 --> 00:06:24,880
like

211
00:06:24,880 --> 00:06:26,880
location data that is passed around the

212
00:06:26,880 --> 00:06:29,120
application and ends up in a logger or

213
00:06:29,120 --> 00:06:30,720
something like that again this is this

214
00:06:30,720 --> 00:06:32,319
is contrived code this isn't a bug that

215
00:06:32,319 --> 00:06:34,000
was found but this is the detections

216
00:06:34,000 --> 00:06:35,520
that we were able to set up to make sure

217
00:06:35,520 --> 00:06:38,000
that this bug never got written

218
00:06:38,000 --> 00:06:39,520
we have a number of tools that we we use

219
00:06:39,520 --> 00:06:41,840
to do that um zonkel on for hack code

220
00:06:41,840 --> 00:06:44,080
pisa for python code and mariana trench

221
00:06:44,080 --> 00:06:45,919
for java code specifically more

222
00:06:45,919 --> 00:06:47,919
specifically android apps usually the

223
00:06:47,919 --> 00:06:49,919
latter two pizza and marionette trench

224
00:06:49,919 --> 00:06:52,160
are actually open source so anyone who

225
00:06:52,160 --> 00:06:53,759
is sort of sold on some of the ideas i

226
00:06:53,759 --> 00:06:55,360
talked about in this talk you can go and

227
00:06:55,360 --> 00:06:56,720
download those and start testing them

228
00:06:56,720 --> 00:06:58,960
out right now

229
00:06:58,960 --> 00:07:00,639
you can also take this concept of static

230
00:07:00,639 --> 00:07:02,960
table analysis even further my co-worker

231
00:07:02,960 --> 00:07:05,039
ibrahim went to was talking about this

232
00:07:05,039 --> 00:07:07,360
at black hat last year about the cross

233
00:07:07,360 --> 00:07:09,120
rival taint exchange concept where you

234
00:07:09,120 --> 00:07:10,720
can actually join

235
00:07:10,720 --> 00:07:13,120
taint flow analyzers together so you can

236
00:07:13,120 --> 00:07:14,080
say

237
00:07:14,080 --> 00:07:16,080
in the example of threads you can follow

238
00:07:16,080 --> 00:07:18,720
in the android app the from the gps api

239
00:07:18,720 --> 00:07:21,440
to an http request and that team flow is

240
00:07:21,440 --> 00:07:23,599
all in java code and then when you hit

241
00:07:23,599 --> 00:07:24,960
the backend server that's written in

242
00:07:24,960 --> 00:07:27,120
python you can track from the sort of

243
00:07:27,120 --> 00:07:29,919
api layer down into a service call and

244
00:07:29,919 --> 00:07:32,080
then you can again hop through the taint

245
00:07:32,080 --> 00:07:34,319
exchange and start analyzing a back end

246
00:07:34,319 --> 00:07:35,840
services written in hack or some other

247
00:07:35,840 --> 00:07:37,680
language so you can make static chain

248
00:07:37,680 --> 00:07:39,120
flow analysis even more powerful by

249
00:07:39,120 --> 00:07:41,759
joining analyzers across languages

250
00:07:41,759 --> 00:07:42,639
now

251
00:07:42,639 --> 00:07:44,240
this static sample analysis has been

252
00:07:44,240 --> 00:07:46,479
probably the most successful use case of

253
00:07:46,479 --> 00:07:47,680
applying security tools and other

254
00:07:47,680 --> 00:07:49,919
domains at meta and i could make a whole

255
00:07:49,919 --> 00:07:51,280
talk about that but i think i would bore

256
00:07:51,280 --> 00:07:52,400
you so i'm going to briefly give a

257
00:07:52,400 --> 00:07:53,599
couple more examples and then we'll move

258
00:07:53,599 --> 00:07:56,080
on to other case studies

259
00:07:56,080 --> 00:07:57,440
obviously the one i introduced at the

260
00:07:57,440 --> 00:07:58,879
beginning of this talk logging of

261
00:07:58,879 --> 00:08:01,280
passwords this you know the solution we

262
00:08:01,280 --> 00:08:02,560
were using to search for this happening

263
00:08:02,560 --> 00:08:04,560
elsewhere was repurposing our stack

264
00:08:04,560 --> 00:08:06,160
table analysis tools to look for

265
00:08:06,160 --> 00:08:07,680
password logging

266
00:08:07,680 --> 00:08:09,840
we also use these tools to look for

267
00:08:09,840 --> 00:08:11,840
private data being returned to users so

268
00:08:11,840 --> 00:08:13,280
data that a user shouldn't be able to

269
00:08:13,280 --> 00:08:15,680
see we want to detect and know if it

270
00:08:15,680 --> 00:08:17,759
ever does make its way back to an exit

271
00:08:17,759 --> 00:08:19,759
point on our applications

272
00:08:19,759 --> 00:08:21,440
and we've even gone further afield with

273
00:08:21,440 --> 00:08:22,560
this so

274
00:08:22,560 --> 00:08:24,720
when we have performance regressions we

275
00:08:24,720 --> 00:08:26,319
know that a performance regression

276
00:08:26,319 --> 00:08:28,319
happens because a certain conditional

277
00:08:28,319 --> 00:08:29,759
statement change and a new code path was

278
00:08:29,759 --> 00:08:31,440
hit or something like that and what

279
00:08:31,440 --> 00:08:33,200
we've used is we've used the static flow

280
00:08:33,200 --> 00:08:36,958
analysis to attribute what caused the um

281
00:08:36,958 --> 00:08:38,958
the conditional statement to change so

282
00:08:38,958 --> 00:08:40,159
we can attribute that back to our

283
00:08:40,159 --> 00:08:42,240
experimentation frameworks and say this

284
00:08:42,240 --> 00:08:44,000
experiment was flipped you know this

285
00:08:44,000 --> 00:08:45,120
somebody flipped this bit and that was

286
00:08:45,120 --> 00:08:46,480
what caused the performance regression

287
00:08:46,480 --> 00:08:48,080
and then we can more easily you know

288
00:08:48,080 --> 00:08:50,560
undo that in order to

289
00:08:50,560 --> 00:08:53,279
fix the whatever the bug was

290
00:08:53,279 --> 00:08:54,640
now for our next couple case studies i'm

291
00:08:54,640 --> 00:08:55,839
going to go through them a little bit

292
00:08:55,839 --> 00:08:57,519
more quickly a little bit less depth but

293
00:08:57,519 --> 00:08:58,399
i'm just going to show you some of the

294
00:08:58,399 --> 00:08:59,920
breadth of other security solutions you

295
00:08:59,920 --> 00:09:01,440
can reuse

296
00:09:01,440 --> 00:09:03,519
it's time to talk about another thing

297
00:09:03,519 --> 00:09:05,920
another mistake that facebook made so

298
00:09:05,920 --> 00:09:07,279
again people in this room may have heard

299
00:09:07,279 --> 00:09:08,880
about it um hundreds of millions of

300
00:09:08,880 --> 00:09:13,040
users data was scraped and that was a

301
00:09:13,040 --> 00:09:15,200
really terrible thing to happen it

302
00:09:15,200 --> 00:09:17,440
wasn't a hack but to users it doesn't

303
00:09:17,440 --> 00:09:19,519
matter their data got out there anyways

304
00:09:19,519 --> 00:09:22,080
and what we really wanted to do is you

305
00:09:22,080 --> 00:09:23,600
know we wanted to be able to

306
00:09:23,600 --> 00:09:25,760
prevent this from happening and if it

307
00:09:25,760 --> 00:09:27,279
ever does happen nobody as early as

308
00:09:27,279 --> 00:09:30,560
possible and get it taken down

309
00:09:30,560 --> 00:09:32,240
that means we have a generalized problem

310
00:09:32,240 --> 00:09:34,800
here where we want to incentivize people

311
00:09:34,800 --> 00:09:36,959
who spot these issues to let us know

312
00:09:36,959 --> 00:09:39,120
about them so we can get them fixed

313
00:09:39,120 --> 00:09:41,600
prior to exploitation or as soon as

314
00:09:41,600 --> 00:09:44,000
possible post-exploitation

315
00:09:44,000 --> 00:09:45,040
if you're thinking back to what i was

316
00:09:45,040 --> 00:09:45,839
saying at the beginning of the talk it

317
00:09:45,839 --> 00:09:47,519
might sound familiar to

318
00:09:47,519 --> 00:09:49,440
um the bug-bounty program concept i was

319
00:09:49,440 --> 00:09:51,839
describing right it's a time-tested

320
00:09:51,839 --> 00:09:54,240
solution in the security space to say

321
00:09:54,240 --> 00:09:56,320
like hey if you find a sql injection on

322
00:09:56,320 --> 00:09:58,720
facebook we'll pay you you know tens of

323
00:09:58,720 --> 00:09:59,839
thousands of dollars whatever if you

324
00:09:59,839 --> 00:10:02,480
tell us about it and we fix it

325
00:10:02,480 --> 00:10:04,240
we can also reuse this concept on the

326
00:10:04,240 --> 00:10:06,880
data abuse side so we set up a data

327
00:10:06,880 --> 00:10:08,959
abuse bounty program where if you find

328
00:10:08,959 --> 00:10:10,800
scraped data sitting out there somewhere

329
00:10:10,800 --> 00:10:12,160
we'll pay you to tell us about it so we

330
00:10:12,160 --> 00:10:14,079
can find out about it and get taken down

331
00:10:14,079 --> 00:10:17,040
and if you find a way to scrape a lot of

332
00:10:17,040 --> 00:10:18,880
data we'll also pay you to tell us about

333
00:10:18,880 --> 00:10:20,399
that so we can fix it and so that no one

334
00:10:20,399 --> 00:10:24,000
ever ends up abusing that endpoint

335
00:10:24,240 --> 00:10:26,480
another use case is a sort of different

336
00:10:26,480 --> 00:10:28,480
approach a defense in-depth approach to

337
00:10:28,480 --> 00:10:30,640
password logging so it's going to come

338
00:10:30,640 --> 00:10:31,839
up a couple times throughout this talk

339
00:10:31,839 --> 00:10:33,920
the defense in depth is really important

340
00:10:33,920 --> 00:10:35,920
not just in security but in lots of

341
00:10:35,920 --> 00:10:37,279
other domains

342
00:10:37,279 --> 00:10:38,959
and one of the layers of defense and

343
00:10:38,959 --> 00:10:40,640
depth we can add to prevent password

344
00:10:40,640 --> 00:10:42,640
logging is make sure that systems that

345
00:10:42,640 --> 00:10:44,160
don't need to have access to a plain

346
00:10:44,160 --> 00:10:45,600
text password

347
00:10:45,600 --> 00:10:47,040
never have access to a plain text

348
00:10:47,040 --> 00:10:48,160
password

349
00:10:48,160 --> 00:10:50,240
the generalized problem here that we

350
00:10:50,240 --> 00:10:52,240
want to do is just we want to obfuscate

351
00:10:52,240 --> 00:10:55,279
this information in in transit and for

352
00:10:55,279 --> 00:10:56,480
anyone on the security side again this

353
00:10:56,480 --> 00:10:57,760
is a really familiar concept right

354
00:10:57,760 --> 00:10:59,040
encryption has been used in a bunch of

355
00:10:59,040 --> 00:11:00,959
different ways you've had https you've

356
00:11:00,959 --> 00:11:03,920
been browsing your https for years now

357
00:11:03,920 --> 00:11:05,600
and so

358
00:11:05,600 --> 00:11:07,040
you can do that on the password logging

359
00:11:07,040 --> 00:11:09,040
side too so you're not probably going to

360
00:11:09,040 --> 00:11:10,320
be able to see the text of that but

361
00:11:10,320 --> 00:11:12,320
that's a screenshot of a request of me

362
00:11:12,320 --> 00:11:14,640
logging into facebook the other day and

363
00:11:14,640 --> 00:11:16,560
there's no password field anymore

364
00:11:16,560 --> 00:11:18,800
there's this giant blob of encrypted

365
00:11:18,800 --> 00:11:20,480
data instead

366
00:11:20,480 --> 00:11:22,959
and that way any intermediate server the

367
00:11:22,959 --> 00:11:24,240
web server that's processing this

368
00:11:24,240 --> 00:11:25,360
request and sending it to the backend

369
00:11:25,360 --> 00:11:27,519
server that handles password hashing it

370
00:11:27,519 --> 00:11:28,560
doesn't need to have access to that

371
00:11:28,560 --> 00:11:30,160
password and plain text and so if

372
00:11:30,160 --> 00:11:31,920
something goes wrong again and there's a

373
00:11:31,920 --> 00:11:33,440
crash dump or whatever else and it gets

374
00:11:33,440 --> 00:11:35,519
logged we're not logging in plain text

375
00:11:35,519 --> 00:11:37,120
obviously logging encrypted is still not

376
00:11:37,120 --> 00:11:41,360
perfect but it's better than plain text

377
00:11:41,760 --> 00:11:43,760
our final case study here is about

378
00:11:43,760 --> 00:11:46,160
unsafe data access so briefly to

379
00:11:46,160 --> 00:11:47,760
understand this case study um you need

380
00:11:47,760 --> 00:11:50,320
to understand that the way we we do data

381
00:11:50,320 --> 00:11:53,200
access at meta is we have a layer on top

382
00:11:53,200 --> 00:11:55,279
of the database where all data access

383
00:11:55,279 --> 00:11:57,120
goes through and sort of privacy layer

384
00:11:57,120 --> 00:11:59,360
that bakes in all the rules about what

385
00:11:59,360 --> 00:12:01,440
users are allowed to see what data

386
00:12:01,440 --> 00:12:03,839
so one example here of where that layer

387
00:12:03,839 --> 00:12:06,560
might come into effect is if i block you

388
00:12:06,560 --> 00:12:09,040
so if i block you that layer is going to

389
00:12:09,040 --> 00:12:11,040
say anytime the website is processing a

390
00:12:11,040 --> 00:12:13,519
request for me i can't see data about

391
00:12:13,519 --> 00:12:14,959
you i can't see your profile picture

392
00:12:14,959 --> 00:12:17,360
your name your messages anything and in

393
00:12:17,360 --> 00:12:19,839
my experience like you're just not there

394
00:12:19,839 --> 00:12:21,680
but what happens if i want to unblock

395
00:12:21,680 --> 00:12:23,440
you i need to be able to see your name

396
00:12:23,440 --> 00:12:25,440
in your profile picture in order to say

397
00:12:25,440 --> 00:12:26,720
like yes this is the person i want to

398
00:12:26,720 --> 00:12:28,959
unblock and so there are really limited

399
00:12:28,959 --> 00:12:31,040
scenarios where you need to sort of

400
00:12:31,040 --> 00:12:33,920
bypass this like default on restriction

401
00:12:33,920 --> 00:12:35,680
to what data can be loaded on behalf of

402
00:12:35,680 --> 00:12:37,440
a user

403
00:12:37,440 --> 00:12:39,040
the generalized problem that that sort

404
00:12:39,040 --> 00:12:41,200
of maps back to or one of them is

405
00:12:41,200 --> 00:12:43,600
ensuring that developers understand the

406
00:12:43,600 --> 00:12:46,639
risks of a api like this and they use it

407
00:12:46,639 --> 00:12:49,040
sparingly and they don't misuse it and

408
00:12:49,040 --> 00:12:50,639
they don't you know misunderstand what

409
00:12:50,639 --> 00:12:54,480
it's for in the security side if anyone

410
00:12:54,480 --> 00:12:57,200
who's used react before might have come

411
00:12:57,200 --> 00:13:01,279
across this dangerously set inner html

412
00:13:01,279 --> 00:13:03,200
attribute in react and for those who

413
00:13:03,200 --> 00:13:04,880
aren't too familiar with html the inner

414
00:13:04,880 --> 00:13:07,200
html linear html is a crosstalk

415
00:13:07,200 --> 00:13:08,639
scripting vector so

416
00:13:08,639 --> 00:13:11,120
it's it's useful and it exists in in

417
00:13:11,120 --> 00:13:12,800
applications for limited purposes but

418
00:13:12,800 --> 00:13:14,399
it's also a way that you can introduce

419
00:13:14,399 --> 00:13:15,600
crosstalk scripting into your

420
00:13:15,600 --> 00:13:17,360
application and so the solution with

421
00:13:17,360 --> 00:13:19,760
react there was they you know

422
00:13:19,760 --> 00:13:21,519
renamed it to make developers really

423
00:13:21,519 --> 00:13:23,680
really aware that this api that is is

424
00:13:23,680 --> 00:13:26,720
inherently risky has problems like you

425
00:13:26,720 --> 00:13:29,600
and it's dangerous and so a reviewer or

426
00:13:29,600 --> 00:13:31,360
the author is aware when they're looking

427
00:13:31,360 --> 00:13:32,560
at this code they're like oh hey i need

428
00:13:32,560 --> 00:13:35,040
to like really scrutinize this piece

429
00:13:35,040 --> 00:13:36,480
we can do the same thing or we do do the

430
00:13:36,480 --> 00:13:38,320
same thing i should say on the privacy

431
00:13:38,320 --> 00:13:40,480
side so when you need to use the api

432
00:13:40,480 --> 00:13:42,720
that bypasses this like these privacy

433
00:13:42,720 --> 00:13:44,320
checks it's going to tell you it's going

434
00:13:44,320 --> 00:13:45,760
to be big and scary and say like this

435
00:13:45,760 --> 00:13:48,480
will bypass privacy checks this is

436
00:13:48,480 --> 00:13:50,000
another point another time where i need

437
00:13:50,000 --> 00:13:51,839
to talk about defense in depth this is

438
00:13:51,839 --> 00:13:53,440
not the only way that meta prevents

439
00:13:53,440 --> 00:13:55,680
people from bypassing privacy checks

440
00:13:55,680 --> 00:13:57,199
this is just one of many layers that we

441
00:13:57,199 --> 00:13:59,199
add in to make sure that when developers

442
00:13:59,199 --> 00:14:01,760
do use an api like this that exists that

443
00:14:01,760 --> 00:14:03,600
is done sparingly and they're very aware

444
00:14:03,600 --> 00:14:06,720
of what's going on there

445
00:14:06,800 --> 00:14:08,000
now we need to talk about some

446
00:14:08,000 --> 00:14:09,519
limitations though i've given you a

447
00:14:09,519 --> 00:14:11,360
couple case studies where we've reused

448
00:14:11,360 --> 00:14:13,440
different kinds of security solutions

449
00:14:13,440 --> 00:14:15,680
and they've been relatively successful

450
00:14:15,680 --> 00:14:17,519
but not every time is that's gonna be

451
00:14:17,519 --> 00:14:18,800
the case

452
00:14:18,800 --> 00:14:20,399
the first thing is just thinking about

453
00:14:20,399 --> 00:14:21,760
like the solution or the tool that

454
00:14:21,760 --> 00:14:23,519
you're trying to repurpose

455
00:14:23,519 --> 00:14:25,040
sometimes tools aren't general purpose

456
00:14:25,040 --> 00:14:26,079
sometimes they're built for a very

457
00:14:26,079 --> 00:14:28,639
specific use case and they're just not

458
00:14:28,639 --> 00:14:31,120
gonna translate well and so you need to

459
00:14:31,120 --> 00:14:32,959
be thinking about what what solutions do

460
00:14:32,959 --> 00:14:34,800
you have that are general purpose that

461
00:14:34,800 --> 00:14:36,720
solve a generalized problem and not

462
00:14:36,720 --> 00:14:39,040
something too niche

463
00:14:39,040 --> 00:14:41,440
the next thing is organizational design

464
00:14:41,440 --> 00:14:43,199
a lot of security teams are set up in

465
00:14:43,199 --> 00:14:45,360
such a way that they have a team of

466
00:14:45,360 --> 00:14:47,920
experts that staff a queue that can sort

467
00:14:47,920 --> 00:14:49,839
through a bunch of alerts right there

468
00:14:49,839 --> 00:14:51,279
are a bunch of false positives and then

469
00:14:51,279 --> 00:14:53,519
there's some true positives and the

470
00:14:53,519 --> 00:14:55,360
the danger of the costs or the value of

471
00:14:55,360 --> 00:14:56,800
those true positives are make it

472
00:14:56,800 --> 00:14:58,959
worthwhile to sort through all the false

473
00:14:58,959 --> 00:15:00,000
positives

474
00:15:00,000 --> 00:15:02,560
but if your organization is set up such

475
00:15:02,560 --> 00:15:04,639
that you don't have that kind of

476
00:15:04,639 --> 00:15:06,240
team that queue or you don't have the

477
00:15:06,240 --> 00:15:07,600
will to set it up then trying to

478
00:15:07,600 --> 00:15:09,519
repurpose a security tool that gives a

479
00:15:09,519 --> 00:15:11,120
lot of false positives is not going to

480
00:15:11,120 --> 00:15:12,959
work out you're just going to upset

481
00:15:12,959 --> 00:15:14,399
developers or upset whoever's looking at

482
00:15:14,399 --> 00:15:15,839
those alerts and it's never going to be

483
00:15:15,839 --> 00:15:17,519
put to use

484
00:15:17,519 --> 00:15:19,040
and then of course we come back to the

485
00:15:19,040 --> 00:15:21,839
concept of defense and depth so

486
00:15:21,839 --> 00:15:23,519
in security you know we love the concept

487
00:15:23,519 --> 00:15:24,560
of defense in-depth you should have a

488
00:15:24,560 --> 00:15:26,320
bunch of layers of tools that are

489
00:15:26,320 --> 00:15:27,760
protecting you and never rely on one

490
00:15:27,760 --> 00:15:29,600
solution same thing comes when you're

491
00:15:29,600 --> 00:15:31,360
translating tooling when you're

492
00:15:31,360 --> 00:15:32,720
translating security tooling to other

493
00:15:32,720 --> 00:15:34,399
domains you shouldn't assume that any

494
00:15:34,399 --> 00:15:36,160
one tool that you translate is going to

495
00:15:36,160 --> 00:15:37,440
solve all your problems and so you

496
00:15:37,440 --> 00:15:38,880
should translate the concept of defense

497
00:15:38,880 --> 00:15:40,800
in depth as well you can use you know

498
00:15:40,800 --> 00:15:43,759
framework static analysis humans bug

499
00:15:43,759 --> 00:15:45,360
bounty type programs all these things

500
00:15:45,360 --> 00:15:48,000
can be layered together to try and um

501
00:15:48,000 --> 00:15:49,360
make whatever

502
00:15:49,360 --> 00:15:50,560
whatever solution you're whatever

503
00:15:50,560 --> 00:15:51,839
probably trying to solve more

504
00:15:51,839 --> 00:15:54,720
comprehensively covered

505
00:15:54,720 --> 00:15:56,720
to conclude all this i'm going to just

506
00:15:56,720 --> 00:15:58,160
briefly review the thesis of this talk

507
00:15:58,160 --> 00:16:00,399
which was that we can and we should be

508
00:16:00,399 --> 00:16:01,600
applying security solutions to new

509
00:16:01,600 --> 00:16:02,959
problems outside of the traditional

510
00:16:02,959 --> 00:16:05,040
space of security

511
00:16:05,040 --> 00:16:07,040
hopefully you walk away realizing that

512
00:16:07,040 --> 00:16:08,720
great security solutions are solving

513
00:16:08,720 --> 00:16:10,639
generalized problems and those

514
00:16:10,639 --> 00:16:12,720
generalized problems exist in plenty of

515
00:16:12,720 --> 00:16:14,160
domains that are outside of your

516
00:16:14,160 --> 00:16:16,320
traditional owasp top 10 security

517
00:16:16,320 --> 00:16:17,759
problems

518
00:16:17,759 --> 00:16:20,000
these solutions can help you out in

519
00:16:20,000 --> 00:16:21,680
performance with performance problems

520
00:16:21,680 --> 00:16:24,079
compliance problems privacy data abuse

521
00:16:24,079 --> 00:16:25,440
and i'm sure many more that i haven't

522
00:16:25,440 --> 00:16:28,240
thought of but maybe you can

523
00:16:28,240 --> 00:16:29,839
and finally it's important to remember

524
00:16:29,839 --> 00:16:30,880
that

525
00:16:30,880 --> 00:16:32,240
these solutions aren't always going to

526
00:16:32,240 --> 00:16:33,759
work don't try and fit a square peg into

527
00:16:33,759 --> 00:16:35,680
a round hole so look for the times that

528
00:16:35,680 --> 00:16:37,680
you can have a you know a relatively

529
00:16:37,680 --> 00:16:39,120
quick win from a tool and you don't need

530
00:16:39,120 --> 00:16:41,199
to spend months or years rewriting it to

531
00:16:41,199 --> 00:16:43,440
try and reapply it somewhere else

532
00:16:43,440 --> 00:16:45,519
thank you to all these people who help

533
00:16:45,519 --> 00:16:47,199
make the talk possible in one way or

534
00:16:47,199 --> 00:16:48,399
another

535
00:16:48,399 --> 00:16:50,240
if these problems sound interesting to

536
00:16:50,240 --> 00:16:51,440
you these kind of tooling stuff sound

537
00:16:51,440 --> 00:16:53,360
interesting to you um you know feel free

538
00:16:53,360 --> 00:16:54,880
to talk to me some more you can shoot me

539
00:16:54,880 --> 00:16:57,279
an email i'll be on the i'll be on slack

540
00:16:57,279 --> 00:16:58,720
and i'll be available for chatting after

541
00:16:58,720 --> 00:16:59,680
this

542
00:16:59,680 --> 00:17:01,360
and with that i'll open up to any

543
00:17:01,360 --> 00:17:04,290
questions

544
00:17:04,290 --> 00:17:08,108
[Applause]

545
00:17:14,160 --> 00:17:16,240
you

