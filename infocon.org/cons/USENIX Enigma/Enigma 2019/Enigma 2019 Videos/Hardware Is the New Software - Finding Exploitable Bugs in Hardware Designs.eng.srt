1
00:00:11,290 --> 00:00:14,829
I'll be presenting<font color="#CCCCCC"> work that my students</font>

2
00:00:13,270 --> 00:00:16,930
<font color="#E5E5E5">my collaborators</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> I have been doing</font>

3
00:00:14,830 --> 00:00:20,350
to find vulnerabilities<font color="#CCCCCC"> and hardware</font>

4
00:00:16,930 --> 00:00:22,330
designs in the past year<font color="#CCCCCC"> Spectre</font>

5
00:00:20,350 --> 00:00:24,490
meltdown and foreshadow have shown us

6
00:00:22,330 --> 00:00:27,339
<font color="#E5E5E5">just how vulnerable</font><font color="#CCCCCC"> Hardware can be and</font>

7
00:00:24,490 --> 00:00:29,049
while these made headlines<font color="#E5E5E5"> they are not</font>

8
00:00:27,340 --> 00:00:32,680
the<font color="#E5E5E5"> only vulnerabilities in hardware</font>

9
00:00:29,050 --> 00:00:35,050
designs<font color="#E5E5E5"> nor are exploitable bugs in</font>

10
00:00:32,680 --> 00:00:36,670
<font color="#E5E5E5">hardware a new phenomenon and yet</font>

11
00:00:35,050 --> 00:00:38,260
there's a relatively modest amount<font color="#E5E5E5"> of</font>

12
00:00:36,670 --> 00:00:41,470
research being done on<font color="#E5E5E5"> the security</font>

13
00:00:38,260 --> 00:00:43,030
validation<font color="#CCCCCC"> of hardware designs</font><font color="#E5E5E5"> compare</font>

14
00:00:41,470 --> 00:00:44,739
this<font color="#E5E5E5"> to software where the security</font>

15
00:00:43,030 --> 00:00:46,600
<font color="#CCCCCC">community has a large</font><font color="#E5E5E5"> knowledge base of</font>

16
00:00:44,739 --> 00:00:49,140
<font color="#CCCCCC">the vulnerabilities that can</font><font color="#E5E5E5"> arise and</font>

17
00:00:46,600 --> 00:00:51,430
their exploits<font color="#E5E5E5"> for a variety of domains</font>

18
00:00:49,140 --> 00:00:53,800
<font color="#E5E5E5">applications operating systems web</font>

19
00:00:51,430 --> 00:00:56,589
browsers and we know how<font color="#CCCCCC"> each of these</font>

20
00:00:53,800 --> 00:00:58,059
can<font color="#E5E5E5"> compromise security we also have</font>

21
00:00:56,589 --> 00:01:00,129
shared knowledge<font color="#E5E5E5"> about how specific</font>

22
00:00:58,059 --> 00:01:02,409
<font color="#E5E5E5">attacks work and what they can achieve</font>

23
00:01:00,129 --> 00:01:04,059
<font color="#E5E5E5">for example if we</font><font color="#CCCCCC"> look at just buffer</font>

24
00:01:02,409 --> 00:01:06,070
overflows we know of so many

25
00:01:04,059 --> 00:01:08,080
sophisticated<font color="#CCCCCC"> attack techniques that</font><font color="#E5E5E5"> can</font>

26
00:01:06,070 --> 00:01:10,839
<font color="#CCCCCC">be used</font><font color="#E5E5E5"> to exploit a</font><font color="#CCCCCC"> buffer overflow</font><font color="#E5E5E5"> and</font>

27
00:01:08,080 --> 00:01:12,520
violate control flow integrity<font color="#E5E5E5"> this</font>

28
00:01:10,840 --> 00:01:15,310
<font color="#E5E5E5">knowledge base just continues to</font><font color="#CCCCCC"> grow</font>

29
00:01:12,520 --> 00:01:17,110
this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> useful in and of itself but</font><font color="#CCCCCC"> it's</font>

30
00:01:15,310 --> 00:01:18,730
<font color="#E5E5E5">also enabled a wealth of tools to be</font>

31
00:01:17,110 --> 00:01:20,980
developed<font color="#E5E5E5"> both from industry and</font>

32
00:01:18,730 --> 00:01:24,670
academia<font color="#E5E5E5"> that</font><font color="#CCCCCC"> strengthen our software</font>

33
00:01:20,980 --> 00:01:26,680
systems these<font color="#E5E5E5"> tools range from the less</font>

34
00:01:24,670 --> 00:01:28,900
formal<font color="#E5E5E5"> like fuzzing to find bugs that</font>

35
00:01:26,680 --> 00:01:30,880
might<font color="#E5E5E5"> be exploitable to slightly more</font>

36
00:01:28,900 --> 00:01:34,960
formal program analysis tools<font color="#E5E5E5"> that use</font>

37
00:01:30,880 --> 00:01:36,729
static analysis or symbolic execution<font color="#E5E5E5"> to</font>

38
00:01:34,960 --> 00:01:38,589
languages with well-defined<font color="#E5E5E5"> behavior</font>

39
00:01:36,730 --> 00:01:40,570
that at the most formal end of<font color="#E5E5E5"> things</font>

40
00:01:38,590 --> 00:01:43,330
<font color="#E5E5E5">allow</font><font color="#CCCCCC"> us</font><font color="#E5E5E5"> to build provably correct</font>

41
00:01:40,570 --> 00:01:44,050
systems but<font color="#E5E5E5"> if we look at the</font>

42
00:01:43,330 --> 00:01:45,820
<font color="#CCCCCC">state-of-the-art</font>

43
00:01:44,050 --> 00:01:48,340
in hardware security<font color="#CCCCCC"> we are</font><font color="#E5E5E5"> lagging</font>

44
00:01:45,820 --> 00:01:50,050
behind<font color="#CCCCCC"> there's some</font><font color="#E5E5E5"> recent research</font><font color="#CCCCCC"> into</font>

45
00:01:48,340 --> 00:01:51,670
<font color="#E5E5E5">the development of secure languages for</font>

46
00:01:50,050 --> 00:01:54,429
hardware design and this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> promising</font>

47
00:01:51,670 --> 00:01:56,650
<font color="#E5E5E5">but for the most part manual review is</font>

48
00:01:54,430 --> 00:02:00,850
<font color="#E5E5E5">still largely how security validation is</font>

49
00:01:56,650 --> 00:02:02,080
done<font color="#E5E5E5"> and if we think about the shared</font>

50
00:02:00,850 --> 00:02:03,669
<font color="#CCCCCC">knowledge</font><font color="#E5E5E5"> we have about the</font>

51
00:02:02,080 --> 00:02:05,408
vulnerabilities<font color="#E5E5E5"> and their exploits and</font>

52
00:02:03,670 --> 00:02:08,288
hardware designs<font color="#CCCCCC"> again we lag behind</font>

53
00:02:05,409 --> 00:02:10,090
<font color="#E5E5E5">software</font><font color="#CCCCCC"> security the research community</font>

54
00:02:08,288 --> 00:02:11,559
has studied side channels extensively

55
00:02:10,090 --> 00:02:13,360
and<font color="#E5E5E5"> we</font><font color="#CCCCCC"> have a good understanding</font><font color="#E5E5E5"> of this</font>

56
00:02:11,560 --> 00:02:14,650
type<font color="#CCCCCC"> of vulnerability and some of the</font>

57
00:02:13,360 --> 00:02:17,110
ways it can<font color="#CCCCCC"> be</font><font color="#E5E5E5"> used to compromise</font>

58
00:02:14,650 --> 00:02:19,090
<font color="#CCCCCC">security and there's been research into</font>

59
00:02:17,110 --> 00:02:20,799
transient faults<font color="#E5E5E5"> and how those can</font><font color="#CCCCCC"> be</font>

60
00:02:19,090 --> 00:02:24,099
compromised to<font color="#E5E5E5"> leak secret key</font>

61
00:02:20,799 --> 00:02:25,290
information but by and<font color="#CCCCCC"> large this is it</font>

62
00:02:24,099 --> 00:02:26,790
the kinds<font color="#E5E5E5"> of bugs</font>

63
00:02:25,290 --> 00:02:28,920
and the resultant vulnerabilities<font color="#CCCCCC"> that</font>

64
00:02:26,790 --> 00:02:30,569
result from<font color="#E5E5E5"> people writing code</font><font color="#CCCCCC"> and</font>

65
00:02:28,920 --> 00:02:33,689
<font color="#E5E5E5">making mistakes</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> been largely</font>

66
00:02:30,569 --> 00:02:36,179
<font color="#E5E5E5">ignored and yet we know hardware is</font>

67
00:02:33,689 --> 00:02:37,980
large and complex and created<font color="#E5E5E5"> by people</font>

68
00:02:36,180 --> 00:02:40,379
writing thousands and thousands<font color="#E5E5E5"> of lines</font>

69
00:02:37,980 --> 00:02:42,599
of<font color="#E5E5E5"> code</font><font color="#CCCCCC"> there are bugs</font><font color="#E5E5E5"> in that code and</font>

70
00:02:40,379 --> 00:02:44,099
<font color="#E5E5E5">some of those bugs are exploitable so</font>

71
00:02:42,599 --> 00:02:45,480
hardware security validation needs to

72
00:02:44,099 --> 00:02:46,890
catch<font color="#E5E5E5"> up and my research for the past</font>

73
00:02:45,480 --> 00:02:48,230
five years has<font color="#CCCCCC"> been about doing just</font>

74
00:02:46,890 --> 00:02:50,819
that

75
00:02:48,230 --> 00:02:53,040
the question we are<font color="#E5E5E5"> asking ourselves is</font>

76
00:02:50,819 --> 00:02:56,179
how can<font color="#CCCCCC"> we identify the vulnerabilities</font>

77
00:02:53,040 --> 00:02:59,370
and their exploits and hardware designs

78
00:02:56,180 --> 00:03:01,530
there is no simple answer<font color="#CCCCCC"> but it starts</font>

79
00:02:59,370 --> 00:03:03,450
<font color="#CCCCCC">with first identifying the properties</font>

80
00:03:01,530 --> 00:03:05,370
that<font color="#E5E5E5"> are critical to security that if</font>

81
00:03:03,450 --> 00:03:08,909
violated would represent an exploitable

82
00:03:05,370 --> 00:03:10,980
vulnerability second we<font color="#E5E5E5"> need to analyze</font>

83
00:03:08,909 --> 00:03:13,769
<font color="#CCCCCC">the potential</font><font color="#E5E5E5"> consequences to security</font>

84
00:03:10,980 --> 00:03:15,388
if a<font color="#E5E5E5"> property</font><font color="#CCCCCC"> is violated so that we can</font>

85
00:03:13,769 --> 00:03:17,609
better understand the extent to which

86
00:03:15,389 --> 00:03:21,419
security<font color="#E5E5E5"> may be compromised by any given</font>

87
00:03:17,609 --> 00:03:23,400
bug<font color="#E5E5E5"> and finally our focus has been on</font>

88
00:03:21,419 --> 00:03:26,519
hardware designs which<font color="#E5E5E5"> are just pieces</font>

89
00:03:23,400 --> 00:03:28,620
<font color="#CCCCCC">of code</font><font color="#E5E5E5"> written by people the hardware</font>

90
00:03:26,519 --> 00:03:30,569
development<font color="#E5E5E5"> lifecycle has two major</font><font color="#CCCCCC"> two</font>

91
00:03:28,620 --> 00:03:33,000
major phases<font color="#E5E5E5"> design and synthesis and</font>

92
00:03:30,569 --> 00:03:34,888
fabrication and<font color="#E5E5E5"> package the hardware</font>

93
00:03:33,000 --> 00:03:37,290
design<font color="#E5E5E5"> is created early on in the first</font>

94
00:03:34,889 --> 00:03:38,849
stage<font color="#CCCCCC"> it is written in a hardware</font>

95
00:03:37,290 --> 00:03:41,129
<font color="#CCCCCC">description</font><font color="#E5E5E5"> language and it describes</font>

96
00:03:38,849 --> 00:03:42,750
the registers signals and ports in the

97
00:03:41,129 --> 00:03:44,989
<font color="#E5E5E5">hardware and how data should move</font>

98
00:03:42,750 --> 00:03:48,090
through the design at each clock cycle

99
00:03:44,989 --> 00:03:49,440
<font color="#E5E5E5">if we</font><font color="#CCCCCC"> zoom in on</font><font color="#E5E5E5"> a sample</font><font color="#CCCCCC"> design</font><font color="#E5E5E5"> we see</font>

100
00:03:48,090 --> 00:03:51,720
<font color="#CCCCCC">that the hardware</font><font color="#E5E5E5"> description language</font>

101
00:03:49,440 --> 00:03:53,819
is a programming language<font color="#CCCCCC"> hardware</font>

102
00:03:51,720 --> 00:03:55,978
designs are written by<font color="#E5E5E5"> people writing</font>

103
00:03:53,819 --> 00:03:58,440
code they are large they<font color="#CCCCCC"> are complex</font>

104
00:03:55,979 --> 00:04:00,209
<font color="#E5E5E5">they include code</font><font color="#CCCCCC"> written years ago with</font>

105
00:03:58,440 --> 00:04:01,919
different design constraints in mind<font color="#E5E5E5"> and</font>

106
00:04:00,209 --> 00:04:03,959
<font color="#CCCCCC">just</font><font color="#E5E5E5"> as is the case</font><font color="#CCCCCC"> for software</font>

107
00:04:01,919 --> 00:04:07,560
hardware<font color="#E5E5E5"> designs contain bugs that</font>

108
00:04:03,959 --> 00:04:09,030
compromise security we want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> identify</font>

109
00:04:07,560 --> 00:04:11,069
the properties that<font color="#E5E5E5"> are critical to</font>

110
00:04:09,030 --> 00:04:12,299
security but before we<font color="#E5E5E5"> can do that we</font>

111
00:04:11,069 --> 00:04:13,679
need an<font color="#E5E5E5"> understanding of the</font>

112
00:04:12,299 --> 00:04:15,989
vulnerabilities we have to protect

113
00:04:13,680 --> 00:04:17,340
against what other<font color="#CCCCCC"> bugs that arise in a</font>

114
00:04:15,989 --> 00:04:20,310
<font color="#E5E5E5">hardware design and that can compromise</font>

115
00:04:17,339 --> 00:04:22,229
<font color="#E5E5E5">security for this we start our work with</font>

116
00:04:20,310 --> 00:04:25,560
an<font color="#E5E5E5"> analysis of the exploitable bugs that</font>

117
00:04:22,229 --> 00:04:27,750
<font color="#E5E5E5">exist in current designs the processors</font>

118
00:04:25,560 --> 00:04:29,970
that<font color="#E5E5E5"> ship have bugs in them</font><font color="#CCCCCC"> the laptops</font>

119
00:04:27,750 --> 00:04:32,639
you are<font color="#E5E5E5"> using right now</font><font color="#CCCCCC"> contain buggy</font>

120
00:04:29,970 --> 00:04:34,229
chips and some<font color="#E5E5E5"> of those bugs open up</font>

121
00:04:32,639 --> 00:04:36,270
vulnerabilities that<font color="#CCCCCC"> can then be</font>

122
00:04:34,229 --> 00:04:38,109
exploited by<font color="#E5E5E5"> an attacker</font><font color="#CCCCCC"> writing clever</font>

123
00:04:36,270 --> 00:04:40,180
<font color="#E5E5E5">software</font>

124
00:04:38,110 --> 00:04:42,009
<font color="#E5E5E5">companies publish</font><font color="#CCCCCC"> errata lists that</font>

125
00:04:40,180 --> 00:04:44,050
describe all the publicly<font color="#E5E5E5"> known bugs</font><font color="#CCCCCC"> and</font>

126
00:04:42,009 --> 00:04:47,289
current processors<font color="#E5E5E5"> here's an example</font><font color="#CCCCCC"> of</font>

127
00:04:44,050 --> 00:04:48,699
<font color="#E5E5E5">one a Rodham from AMD</font><font color="#CCCCCC"> as you</font><font color="#E5E5E5"> can see the</font>

128
00:04:47,289 --> 00:04:51,068
entries written<font color="#E5E5E5"> in English it does not</font>

129
00:04:48,699 --> 00:04:53,349
include code registers are only

130
00:04:51,069 --> 00:04:54,819
sometimes identified by name in<font color="#CCCCCC"> the</font>

131
00:04:53,349 --> 00:04:56,710
description<font color="#E5E5E5"> of the effect of the bug</font>

132
00:04:54,819 --> 00:04:58,830
<font color="#E5E5E5">what the consequences might</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> to</font>

133
00:04:56,710 --> 00:05:01,000
security or<font color="#E5E5E5"> otherwise is vague</font>

134
00:04:58,830 --> 00:05:03,250
<font color="#E5E5E5">unpredictable system behavior this is</font>

135
00:05:01,000 --> 00:05:04,840
<font color="#CCCCCC">not</font><font color="#E5E5E5"> very helpful</font><font color="#CCCCCC"> so what we</font><font color="#E5E5E5"> did is we</font>

136
00:05:03,250 --> 00:05:07,419
<font color="#CCCCCC">looked at seven years worth of published</font>

137
00:05:04,840 --> 00:05:09,340
<font color="#CCCCCC">darada lists covering 60</font><font color="#E5E5E5"> different AMD</font>

138
00:05:07,419 --> 00:05:10,990
processors<font color="#CCCCCC"> and</font><font color="#E5E5E5"> we were looking to</font>

139
00:05:09,340 --> 00:05:13,179
<font color="#CCCCCC">identify those bugs</font><font color="#E5E5E5"> that might provide a</font>

140
00:05:10,990 --> 00:05:15,370
foothold<font color="#E5E5E5"> for attacks emanating from</font>

141
00:05:13,180 --> 00:05:17,560
unprivileged software our categorization

142
00:05:15,370 --> 00:05:19,150
here is necessarily subjective<font color="#E5E5E5"> but we</font>

143
00:05:17,560 --> 00:05:21,819
<font color="#CCCCCC">try to be conservative</font><font color="#E5E5E5"> and to make the</font>

144
00:05:19,150 --> 00:05:23,638
<font color="#E5E5E5">process as</font><font color="#CCCCCC"> systematic as possible when</font>

145
00:05:21,819 --> 00:05:25,900
analyzing each<font color="#E5E5E5"> bug we asked ourselves</font>

146
00:05:23,639 --> 00:05:28,030
<font color="#E5E5E5">whether the bug would likely have an</font>

147
00:05:25,900 --> 00:05:29,739
effect on<font color="#CCCCCC"> privileged State for</font><font color="#E5E5E5"> example</font>

148
00:05:28,030 --> 00:05:32,289
the processor is current<font color="#E5E5E5"> privilege level</font>

149
00:05:29,740 --> 00:05:34,840
page tables or hardware virtualization

150
00:05:32,289 --> 00:05:38,229
registers or an<font color="#E5E5E5"> effect on special events</font>

151
00:05:34,840 --> 00:05:41,919
<font color="#E5E5E5">like taking an exception in all we</font>

152
00:05:38,229 --> 00:05:43,900
<font color="#CCCCCC">analyze 301 unique entries</font><font color="#E5E5E5"> and found</font>

153
00:05:41,919 --> 00:05:46,229
that 28 fit our definition<font color="#CCCCCC"> of security</font>

154
00:05:43,900 --> 00:05:48,340
<font color="#CCCCCC">critical that's just</font><font color="#E5E5E5"> over</font><font color="#CCCCCC"> 9 percent</font>

155
00:05:46,229 --> 00:05:49,990
every processor we looked at was

156
00:05:48,340 --> 00:05:51,940
affected by at least one<font color="#E5E5E5"> security</font>

157
00:05:49,990 --> 00:05:54,610
<font color="#CCCCCC">critical bug and most of the security</font>

158
00:05:51,940 --> 00:05:56,199
<font color="#CCCCCC">critical bugs had no</font><font color="#E5E5E5"> fix listed the</font>

159
00:05:54,610 --> 00:05:58,330
question we were looking to<font color="#E5E5E5"> answer here</font>

160
00:05:56,199 --> 00:06:00,039
<font color="#E5E5E5">was what are the vulnerabilities</font><font color="#CCCCCC"> and</font>

161
00:05:58,330 --> 00:06:04,180
what is it<font color="#E5E5E5"> that we need to protect</font>

162
00:06:00,039 --> 00:06:05,800
against in order to understand this a

163
00:06:04,180 --> 00:06:07,330
little<font color="#E5E5E5"> better</font><font color="#CCCCCC"> we examined the security</font>

164
00:06:05,800 --> 00:06:09,009
critical<font color="#CCCCCC"> errata we collected to find</font>

165
00:06:07,330 --> 00:06:11,469
what they have in<font color="#CCCCCC"> common and</font><font color="#E5E5E5"> how</font><font color="#CCCCCC"> they</font>

166
00:06:09,009 --> 00:06:13,060
might be<font color="#E5E5E5"> categorized and understood we</font>

167
00:06:11,469 --> 00:06:15,759
focused here on<font color="#CCCCCC"> the effect</font><font color="#E5E5E5"> of the bug</font>

168
00:06:13,060 --> 00:06:17,469
<font color="#E5E5E5">not how that effect is achieved and we</font>

169
00:06:15,759 --> 00:06:19,839
developed<font color="#E5E5E5"> five classes that</font><font color="#CCCCCC"> nicely</font>

170
00:06:17,469 --> 00:06:21,669
organized the data<font color="#E5E5E5"> the first is</font>

171
00:06:19,839 --> 00:06:23,500
exception related and<font color="#E5E5E5"> this is a bug that</font>

172
00:06:21,669 --> 00:06:25,568
results in the processor ignoring an

173
00:06:23,500 --> 00:06:27,849
exception that<font color="#CCCCCC"> should be</font><font color="#E5E5E5"> handled or vice</font>

174
00:06:25,569 --> 00:06:30,039
versa<font color="#CCCCCC"> or passing control to the wrong</font>

175
00:06:27,849 --> 00:06:32,469
exception handler the second is

176
00:06:30,039 --> 00:06:34,870
incorrect results in which<font color="#E5E5E5"> an operation</font>

177
00:06:32,469 --> 00:06:37,389
does<font color="#E5E5E5"> not correctly update state after an</font>

178
00:06:34,870 --> 00:06:39,129
instruction commits the third is memory

179
00:06:37,389 --> 00:06:40,599
access in which<font color="#E5E5E5"> software is able to</font>

180
00:06:39,129 --> 00:06:43,300
access<font color="#E5E5E5"> memory it should not be able to</font>

181
00:06:40,599 --> 00:06:45,069
the fourth is incorrect instruction in

182
00:06:43,300 --> 00:06:46,810
<font color="#CCCCCC">which the wrong instruction</font><font color="#E5E5E5"> gets</font>

183
00:06:45,069 --> 00:06:48,510
executed<font color="#E5E5E5"> for example a call instruction</font>

184
00:06:46,810 --> 00:06:51,570
<font color="#CCCCCC">gets treated</font><font color="#E5E5E5"> as a no op</font>

185
00:06:48,510 --> 00:06:53,940
in the last category is<font color="#E5E5E5"> register related</font>

186
00:06:51,570 --> 00:06:55,830
<font color="#E5E5E5">in which the wrong value is read from</font><font color="#CCCCCC"> or</font>

187
00:06:53,940 --> 00:07:00,090
<font color="#E5E5E5">written to</font><font color="#CCCCCC"> a privileged register that</font><font color="#E5E5E5"> is</font>

188
00:06:55,830 --> 00:07:01,500
<font color="#E5E5E5">visible to software the outcome of</font><font color="#CCCCCC"> that</font>

189
00:07:00,090 --> 00:07:02,789
project<font color="#CCCCCC"> was a better understanding of</font>

190
00:07:01,500 --> 00:07:05,070
the types of vulnerabilities<font color="#CCCCCC"> that</font><font color="#E5E5E5"> exist</font>

191
00:07:02,790 --> 00:07:07,020
<font color="#CCCCCC">once we had that we set ourselves the</font>

192
00:07:05,070 --> 00:07:09,330
task<font color="#E5E5E5"> of writing a set of properties that</font>

193
00:07:07,020 --> 00:07:11,190
<font color="#CCCCCC">if somehow</font><font color="#E5E5E5"> were enforced of a given</font>

194
00:07:09,330 --> 00:07:15,450
design would<font color="#CCCCCC"> strengthen the security</font><font color="#E5E5E5"> of</font>

195
00:07:11,190 --> 00:07:17,040
<font color="#E5E5E5">the processor we started by studying the</font>

196
00:07:15,450 --> 00:07:19,560
instruction set architecture the

197
00:07:17,040 --> 00:07:22,020
specification of the<font color="#CCCCCC"> o.r</font><font color="#E5E5E5"> 1,200 open</font>

198
00:07:19,560 --> 00:07:22,740
<font color="#E5E5E5">source RISC</font><font color="#CCCCCC"> processer to determine</font><font color="#E5E5E5"> just</font>

199
00:07:22,020 --> 00:07:24,419
through our<font color="#CCCCCC"> knowledge of</font><font color="#E5E5E5"> the</font>

200
00:07:22,740 --> 00:07:25,890
architecture<font color="#CCCCCC"> and our background in</font>

201
00:07:24,420 --> 00:07:28,800
security<font color="#CCCCCC"> what are the core properties</font>

202
00:07:25,890 --> 00:07:30,300
<font color="#E5E5E5">that should be enforced that if enforced</font>

203
00:07:28,800 --> 00:07:32,640
<font color="#E5E5E5">would protect the processor from</font>

204
00:07:30,300 --> 00:07:34,590
exploitable vulnerabilities through this

205
00:07:32,640 --> 00:07:37,590
exercise<font color="#E5E5E5"> we developed 14 properties that</font>

206
00:07:34,590 --> 00:07:39,539
are critical<font color="#CCCCCC"> to security for example in</font>

207
00:07:37,590 --> 00:07:41,159
the<font color="#CCCCCC"> are 1200 processor a mode change</font>

208
00:07:39,540 --> 00:07:42,990
from low<font color="#E5E5E5"> privilege to high</font><font color="#CCCCCC"> privilege</font>

209
00:07:41,160 --> 00:07:45,420
should only occur through an exception

210
00:07:42,990 --> 00:07:46,770
or<font color="#E5E5E5"> reset if privilege escalates through</font>

211
00:07:45,420 --> 00:07:48,630
any<font color="#CCCCCC"> other means it would</font><font color="#E5E5E5"> be a violation</font>

212
00:07:46,770 --> 00:07:50,430
of<font color="#E5E5E5"> this property</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> it would indicate a</font>

213
00:07:48,630 --> 00:07:54,360
bug in the hardware design<font color="#E5E5E5"> that allowed</font>

214
00:07:50,430 --> 00:07:56,250
such an<font color="#E5E5E5"> escalation we then studied the</font>

215
00:07:54,360 --> 00:07:57,960
AMD<font color="#CCCCCC"> errata</font><font color="#E5E5E5"> and identified three more</font>

216
00:07:56,250 --> 00:07:59,900
properties that were violated<font color="#E5E5E5"> by one of</font>

217
00:07:57,960 --> 00:08:02,460
the bugs we had found<font color="#E5E5E5"> to be exploitable</font>

218
00:07:59,900 --> 00:08:04,679
an example of one<font color="#CCCCCC"> of these properties is</font>

219
00:08:02,460 --> 00:08:06,030
that<font color="#CCCCCC"> when a registered value changes in</font>

220
00:08:04,680 --> 00:08:08,190
the processor core<font color="#E5E5E5"> it should be the</font>

221
00:08:06,030 --> 00:08:10,500
<font color="#CCCCCC">target of the executing instruction no</font>

222
00:08:08,190 --> 00:08:13,710
errant modifications to software visible

223
00:08:10,500 --> 00:08:15,630
registers finally we<font color="#E5E5E5"> added each of the</font>

224
00:08:13,710 --> 00:08:18,239
17 properties to the design of<font color="#CCCCCC"> the o our</font>

225
00:08:15,630 --> 00:08:20,640
<font color="#CCCCCC">1,200 processor as assertions</font><font color="#E5E5E5"> and we ran</font>

226
00:08:18,240 --> 00:08:23,460
the processor in simulation we<font color="#CCCCCC"> wrote</font>

227
00:08:20,640 --> 00:08:24,990
<font color="#E5E5E5">into the design each of the 28 security</font>

228
00:08:23,460 --> 00:08:27,330
bugs we had pulled from the AMD

229
00:08:24,990 --> 00:08:28,830
documents and we tested whether<font color="#E5E5E5"> our 17</font>

230
00:08:27,330 --> 00:08:31,169
properties would<font color="#E5E5E5"> be sufficient to find</font>

231
00:08:28,830 --> 00:08:33,689
these bugs<font color="#E5E5E5"> with the assertions fire when</font>

232
00:08:31,170 --> 00:08:35,729
the bug was triggered<font color="#E5E5E5"> and we found we</font>

233
00:08:33,690 --> 00:08:37,470
needed one more<font color="#CCCCCC"> property this property</font>

234
00:08:35,729 --> 00:08:39,150
<font color="#CCCCCC">says that</font><font color="#E5E5E5"> once an</font><font color="#CCCCCC"> instruction is fetched</font>

235
00:08:37,470 --> 00:08:40,830
<font color="#E5E5E5">it does not change as it passes through</font>

236
00:08:39,150 --> 00:08:42,329
<font color="#E5E5E5">the pipeline</font><font color="#CCCCCC"> this property is different</font>

237
00:08:40,830 --> 00:08:44,520
<font color="#CCCCCC">from the others</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> that it is stated</font>

238
00:08:42,330 --> 00:08:46,320
<font color="#E5E5E5">over microarchitecture estate all the</font>

239
00:08:44,520 --> 00:08:48,810
other<font color="#E5E5E5"> properties are concerned with an</font>

240
00:08:46,320 --> 00:08:52,470
enforceable<font color="#E5E5E5"> over software visible</font><font color="#CCCCCC"> state</font>

241
00:08:48,810 --> 00:08:54,000
<font color="#E5E5E5">only the outcome of this research was a</font>

242
00:08:52,470 --> 00:08:55,530
better understanding of the kinds of

243
00:08:54,000 --> 00:08:57,360
<font color="#E5E5E5">bugs we are seeing in our processor</font>

244
00:08:55,530 --> 00:08:59,850
designs<font color="#E5E5E5"> and which of those bugs might be</font>

245
00:08:57,360 --> 00:09:01,530
exploitable<font color="#E5E5E5"> and how we might formulate</font>

246
00:08:59,850 --> 00:09:01,790
the properties we should be verifying in

247
00:09:01,530 --> 00:09:03,079
order

248
00:09:01,790 --> 00:09:07,130
to strengthen<font color="#CCCCCC"> the security of</font><font color="#E5E5E5"> our</font>

249
00:09:03,080 --> 00:09:08,900
designs<font color="#E5E5E5"> in our next project our aim was</font>

250
00:09:07,130 --> 00:09:10,760
to move<font color="#E5E5E5"> away from the labor-intensive</font>

251
00:09:08,900 --> 00:09:14,449
manual approach<font color="#E5E5E5"> to security property</font>

252
00:09:10,760 --> 00:09:16,040
specification<font color="#E5E5E5"> there exists a line of</font>

253
00:09:14,450 --> 00:09:17,750
<font color="#CCCCCC">research on specification mining for</font>

254
00:09:16,040 --> 00:09:19,219
hardware designs<font color="#CCCCCC"> there are many ways it</font>

255
00:09:17,750 --> 00:09:20,960
is<font color="#E5E5E5"> done but the basic idea is to look</font>

256
00:09:19,220 --> 00:09:23,540
for instances of some pattern in the

257
00:09:20,960 --> 00:09:25,370
<font color="#CCCCCC">design dynamic specification mining</font>

258
00:09:23,540 --> 00:09:27,410
takes in traces of execution<font color="#E5E5E5"> and</font>

259
00:09:25,370 --> 00:09:29,840
templates describing patterns of

260
00:09:27,410 --> 00:09:31,339
interest<font color="#CCCCCC"> and produces a set of property</font>

261
00:09:29,840 --> 00:09:34,610
<font color="#E5E5E5">typically tens of thousands of</font>

262
00:09:31,340 --> 00:09:36,260
properties<font color="#CCCCCC"> might be generated</font><font color="#E5E5E5"> for</font>

263
00:09:34,610 --> 00:09:37,790
example it might look for instances of

264
00:09:36,260 --> 00:09:39,620
one hot encoding<font color="#E5E5E5"> which says that only</font>

265
00:09:37,790 --> 00:09:42,770
one bit of<font color="#E5E5E5"> a register should ever be set</font>

266
00:09:39,620 --> 00:09:44,720
at any<font color="#E5E5E5"> time if over many traces</font><font color="#CCCCCC"> of</font>

267
00:09:42,770 --> 00:09:46,160
execution<font color="#E5E5E5"> the control register always</font>

268
00:09:44,720 --> 00:09:48,770
seems to<font color="#E5E5E5"> take one of these three values</font>

269
00:09:46,160 --> 00:09:50,360
<font color="#E5E5E5">the specification minor might produce a</font>

270
00:09:48,770 --> 00:09:52,880
property that<font color="#E5E5E5"> says the control register</font>

271
00:09:50,360 --> 00:09:54,410
should enforce one hot encoding for

272
00:09:52,880 --> 00:09:55,880
purposes of functional validation this

273
00:09:54,410 --> 00:09:57,910
is enough it looks like the control

274
00:09:55,880 --> 00:10:00,230
signal shouldn't force one hot encoding

275
00:09:57,910 --> 00:10:01,730
testers and verifiers can then go look

276
00:10:00,230 --> 00:10:04,970
<font color="#E5E5E5">for violations of this property and</font>

277
00:10:01,730 --> 00:10:06,290
<font color="#E5E5E5">start</font><font color="#CCCCCC"> debugging if they find</font><font color="#E5E5E5"> any but for</font>

278
00:10:04,970 --> 00:10:09,380
a security validation this is not

279
00:10:06,290 --> 00:10:11,120
helpful<font color="#E5E5E5"> maybe it's important for the</font>

280
00:10:09,380 --> 00:10:13,490
<font color="#E5E5E5">security the control signal is important</font>

281
00:10:11,120 --> 00:10:15,410
<font color="#E5E5E5">for security</font><font color="#CCCCCC"> and maybe it's important</font>

282
00:10:13,490 --> 00:10:17,840
that the control signal enforces one hot

283
00:10:15,410 --> 00:10:20,209
encoding but maybe it's not<font color="#E5E5E5"> and</font><font color="#CCCCCC"> we just</font>

284
00:10:17,840 --> 00:10:21,770
don't<font color="#E5E5E5"> know</font><font color="#CCCCCC"> and nor is it obvious which</font>

285
00:10:20,210 --> 00:10:26,360
patterns we could add that<font color="#E5E5E5"> might be</font>

286
00:10:21,770 --> 00:10:27,920
useful<font color="#E5E5E5"> here so we built on the</font><font color="#CCCCCC"> idea of</font><font color="#E5E5E5"> a</font>

287
00:10:26,360 --> 00:10:29,660
specification<font color="#E5E5E5"> minor but instead of</font>

288
00:10:27,920 --> 00:10:33,589
relying<font color="#E5E5E5"> on a set of patterns we rely on</font>

289
00:10:29,660 --> 00:10:35,180
known security<font color="#E5E5E5"> bugs instead the basic</font>

290
00:10:33,590 --> 00:10:37,100
idea<font color="#E5E5E5"> is this we use an existing</font>

291
00:10:35,180 --> 00:10:38,839
specification<font color="#E5E5E5"> minor to generate a large</font>

292
00:10:37,100 --> 00:10:40,940
set<font color="#CCCCCC"> of properties for a given design and</font>

293
00:10:38,840 --> 00:10:42,680
from this set we identified those

294
00:10:40,940 --> 00:10:45,920
properties that<font color="#CCCCCC"> express important</font>

295
00:10:42,680 --> 00:10:48,589
<font color="#E5E5E5">security properties to do that we look</font>

296
00:10:45,920 --> 00:10:50,270
to known bugs<font color="#E5E5E5"> processor bugs in the</font>

297
00:10:48,590 --> 00:10:53,000
design<font color="#E5E5E5"> for which we could demonstrate an</font>

298
00:10:50,270 --> 00:10:54,350
exploit these bugs by definition violate

299
00:10:53,000 --> 00:10:56,150
some property although<font color="#E5E5E5"> that property</font>

300
00:10:54,350 --> 00:10:57,650
might not be stated anywhere<font color="#E5E5E5"> so the</font>

301
00:10:56,150 --> 00:10:59,930
question is what is the property<font color="#E5E5E5"> that</font>

302
00:10:57,650 --> 00:11:01,819
they<font color="#E5E5E5"> are violating well we look to</font><font color="#CCCCCC"> our</font>

303
00:10:59,930 --> 00:11:03,620
large set of generative properties and

304
00:11:01,820 --> 00:11:06,050
we identify which of<font color="#E5E5E5"> those were</font>

305
00:11:03,620 --> 00:11:08,570
generated by<font color="#CCCCCC"> each given exploitable bug</font>

306
00:11:06,050 --> 00:11:11,060
the approach is relatively<font color="#E5E5E5"> simple but we</font>

307
00:11:08,570 --> 00:11:12,740
find that<font color="#E5E5E5"> it works in practice in the</font>

308
00:11:11,060 --> 00:11:13,880
second step<font color="#E5E5E5"> we have we apply machine</font>

309
00:11:12,740 --> 00:11:15,089
learning to identify<font color="#CCCCCC"> additional</font>

310
00:11:13,880 --> 00:11:16,379
<font color="#E5E5E5">properties from our set of</font>

311
00:11:15,089 --> 00:11:18,120
generated properties<font color="#E5E5E5"> that may be</font>

312
00:11:16,379 --> 00:11:19,470
critical<font color="#CCCCCC"> for security but for which we</font>

313
00:11:18,120 --> 00:11:22,860
didn't have<font color="#CCCCCC"> a known bug that violated</font>

314
00:11:19,470 --> 00:11:24,779
<font color="#E5E5E5">the property we evaluated our tool chain</font>

315
00:11:22,860 --> 00:11:27,870
on the<font color="#E5E5E5"> o</font><font color="#CCCCCC"> R 1200</font><font color="#E5E5E5"> an</font><font color="#CCCCCC"> open-source RISC</font>

316
00:11:24,779 --> 00:11:29,910
<font color="#CCCCCC">processer</font><font color="#E5E5E5"> we collected security bugs by</font>

317
00:11:27,870 --> 00:11:31,620
combing the commit histories of<font color="#E5E5E5"> source</font>

318
00:11:29,910 --> 00:11:33,719
repositories looking at developers

319
00:11:31,620 --> 00:11:36,509
archives<font color="#E5E5E5"> looking at the</font><font color="#CCCCCC"> bugzilla</font><font color="#E5E5E5"> and bug</font>

320
00:11:33,720 --> 00:11:39,660
tracker databases<font color="#CCCCCC"> and looking at</font>

321
00:11:36,509 --> 00:11:41,189
comments<font color="#E5E5E5"> in the source code we found</font>

322
00:11:39,660 --> 00:11:43,230
bugs from<font color="#E5E5E5"> five different designs</font>

323
00:11:41,189 --> 00:11:47,389
covering four different architectures<font color="#E5E5E5"> Oh</font>

324
00:11:43,230 --> 00:11:49,559
<font color="#CCCCCC">our 1200 spark v8 ultrasparc</font><font color="#E5E5E5"> and msp430</font>

325
00:11:47,389 --> 00:11:51,749
and we compared the set of<font color="#CCCCCC"> security</font>

326
00:11:49,559 --> 00:11:53,219
properties we produced to<font color="#E5E5E5"> the existing</font>

327
00:11:51,749 --> 00:11:55,170
state of<font color="#CCCCCC"> the art which is a fully manual</font>

328
00:11:53,220 --> 00:11:56,850
approach we look to the<font color="#E5E5E5"> literature</font>

329
00:11:55,170 --> 00:11:58,740
including<font color="#E5E5E5"> our own previous project and</font>

330
00:11:56,850 --> 00:11:59,879
we found<font color="#E5E5E5"> 22 manually written properties</font>

331
00:11:58,740 --> 00:12:03,180
<font color="#E5E5E5">our tool</font>

332
00:11:59,879 --> 00:12:05,100
<font color="#E5E5E5">sei</font><font color="#CCCCCC"> finder generates 19 of those</font><font color="#E5E5E5"> 11 are</font>

333
00:12:03,180 --> 00:12:06,540
found in the first<font color="#E5E5E5"> step we have</font><font color="#CCCCCC"> an</font>

334
00:12:05,100 --> 00:12:08,249
exploitable bug that violates the

335
00:12:06,540 --> 00:12:10,410
property and<font color="#E5E5E5"> we identify it as security</font>

336
00:12:08,249 --> 00:12:12,300
critical<font color="#CCCCCC"> 8 more properties are found in</font>

337
00:12:10,410 --> 00:12:14,129
step<font color="#E5E5E5"> 2</font><font color="#CCCCCC"> we didn't have an exploitable bug</font>

338
00:12:12,300 --> 00:12:16,769
that violates the property but our model

339
00:12:14,129 --> 00:12:18,120
labels it as security<font color="#CCCCCC"> critical there are</font>

340
00:12:16,769 --> 00:12:19,889
<font color="#E5E5E5">three manually written properties from</font>

341
00:12:18,120 --> 00:12:22,170
<font color="#CCCCCC">firework that sei</font><font color="#E5E5E5"> finder did not</font>

342
00:12:19,889 --> 00:12:23,699
generate two of them represent

343
00:12:22,170 --> 00:12:25,559
properties never produced by our<font color="#E5E5E5"> miner</font>

344
00:12:23,699 --> 00:12:27,059
<font color="#CCCCCC">one of them was produced by our miner</font>

345
00:12:25,559 --> 00:12:28,649
<font color="#E5E5E5">but our tool to not identify it as</font>

346
00:12:27,059 --> 00:12:30,389
critical to<font color="#E5E5E5"> security we</font><font color="#CCCCCC"> didn't have a</font>

347
00:12:28,649 --> 00:12:32,429
bug that<font color="#E5E5E5"> exploited or violated the</font>

348
00:12:30,389 --> 00:12:37,050
property and our model did not<font color="#E5E5E5"> label it</font>

349
00:12:32,429 --> 00:12:38,699
as security critical but sei<font color="#CCCCCC"> finder</font>

350
00:12:37,050 --> 00:12:41,008
produced<font color="#E5E5E5"> three new properties not</font>

351
00:12:38,699 --> 00:12:42,240
identified<font color="#CCCCCC"> in Prior work</font><font color="#E5E5E5"> an example</font><font color="#CCCCCC"> of</font>

352
00:12:41,009 --> 00:12:44,459
one of<font color="#E5E5E5"> these is that the link register</font>

353
00:12:42,240 --> 00:12:46,439
<font color="#E5E5E5">should not change during a function call</font>

354
00:12:44,459 --> 00:12:48,748
<font color="#E5E5E5">it's used to store the return address</font>

355
00:12:46,439 --> 00:12:50,370
<font color="#E5E5E5">this property</font><font color="#CCCCCC"> is critical to protecting</font>

356
00:12:48,749 --> 00:12:54,029
<font color="#CCCCCC">control flow integrity but</font><font color="#E5E5E5"> had not been</font>

357
00:12:50,370 --> 00:12:55,230
expressed by prior manual efforts<font color="#E5E5E5"> so the</font>

358
00:12:54,029 --> 00:12:56,819
cool thing<font color="#CCCCCC"> about this</font><font color="#E5E5E5"> work is</font><font color="#CCCCCC"> that it</font>

359
00:12:55,230 --> 00:12:59,040
points to the<font color="#CCCCCC"> fact that</font><font color="#E5E5E5"> we can take</font>

360
00:12:56,819 --> 00:13:00,929
<font color="#E5E5E5">lessons learned from one</font><font color="#CCCCCC"> hardware design</font>

361
00:12:59,040 --> 00:13:05,248
and apply it to a second design<font color="#CCCCCC"> even</font>

362
00:13:00,929 --> 00:13:06,689
<font color="#E5E5E5">across different architectures the</font><font color="#CCCCCC"> next</font>

363
00:13:05,249 --> 00:13:08,459
piece of<font color="#E5E5E5"> the puzzle is how best to</font>

364
00:13:06,689 --> 00:13:10,920
understand the<font color="#E5E5E5"> possible threat for any</font>

365
00:13:08,459 --> 00:13:12,119
<font color="#E5E5E5">given property violation and here we</font>

366
00:13:10,920 --> 00:13:13,889
look again<font color="#E5E5E5"> to the software security</font>

367
00:13:12,120 --> 00:13:16,189
<font color="#E5E5E5">community which has had a lot</font><font color="#CCCCCC"> of success</font>

368
00:13:13,889 --> 00:13:18,209
using<font color="#E5E5E5"> symbolic execution to explore code</font>

369
00:13:16,189 --> 00:13:19,980
we want to understand what<font color="#E5E5E5"> is the</font>

370
00:13:18,209 --> 00:13:23,969
<font color="#E5E5E5">consequence to security if a property is</font>

371
00:13:19,980 --> 00:13:25,709
<font color="#CCCCCC">violated with symbolic</font><font color="#E5E5E5"> execution</font><font color="#CCCCCC"> input</font>

372
00:13:23,970 --> 00:13:27,449
values are replaced with<font color="#E5E5E5"> symbolic values</font>

373
00:13:25,709 --> 00:13:28,010
and the program is executed with these

374
00:13:27,449 --> 00:13:30,109
<font color="#E5E5E5">symbols</font>

375
00:13:28,010 --> 00:13:31,670
place of<font color="#E5E5E5"> concrete literals when a branch</font>

376
00:13:30,110 --> 00:13:32,450
<font color="#CCCCCC">point is reached for example an</font>

377
00:13:31,670 --> 00:13:34,640
if-statement

378
00:13:32,450 --> 00:13:37,280
program execution<font color="#E5E5E5"> forks and each branch</font>

379
00:13:34,640 --> 00:13:39,380
<font color="#E5E5E5">is explored in turn the result of</font>

380
00:13:37,280 --> 00:13:41,060
symbolic execution is a tree and each

381
00:13:39,380 --> 00:13:42,950
path from root<font color="#CCCCCC"> to leaf in the tree</font>

382
00:13:41,060 --> 00:13:45,260
<font color="#CCCCCC">represents one possible path</font><font color="#E5E5E5"> through the</font>

383
00:13:42,950 --> 00:13:47,450
program<font color="#E5E5E5"> the power of symbolic execution</font>

384
00:13:45,260 --> 00:13:49,069
is in its<font color="#E5E5E5"> ability to explore many</font>

385
00:13:47,450 --> 00:13:50,390
different paths<font color="#E5E5E5"> providing higher</font>

386
00:13:49,070 --> 00:13:54,460
coverage than it's likely achieved

387
00:13:50,390 --> 00:13:57,860
through<font color="#E5E5E5"> any set of concrete test</font><font color="#CCCCCC"> factors</font>

388
00:13:54,460 --> 00:14:00,290
if we symbolically explore a hardware

389
00:13:57,860 --> 00:14:02,210
design<font color="#E5E5E5"> the resulting tree of paths</font>

390
00:14:00,290 --> 00:14:04,819
<font color="#E5E5E5">represents the exploration of the design</font>

391
00:14:02,210 --> 00:14:06,890
for a single clock cycle<font color="#E5E5E5"> in the open</font>

392
00:14:04,820 --> 00:14:08,990
source RISC CPUs we've been looking<font color="#E5E5E5"> at</font>

393
00:14:06,890 --> 00:14:12,770
this corresponds to a<font color="#E5E5E5"> single instruction</font>

394
00:14:08,990 --> 00:14:14,240
<font color="#E5E5E5">commit but it's likely</font><font color="#CCCCCC"> that a property</font>

395
00:14:12,770 --> 00:14:15,980
violation may require a sequence<font color="#CCCCCC"> of</font>

396
00:14:14,240 --> 00:14:18,110
<font color="#E5E5E5">instructions to take the processor from</font>

397
00:14:15,980 --> 00:14:20,510
<font color="#E5E5E5">its initial reset state to the violating</font>

398
00:14:18,110 --> 00:14:22,220
<font color="#E5E5E5">state in this case the space of paths to</font>

399
00:14:20,510 --> 00:14:24,890
<font color="#E5E5E5">explore would grow exponentially the</font>

400
00:14:22,220 --> 00:14:28,010
search is just not feasible<font color="#CCCCCC"> so our</font>

401
00:14:24,890 --> 00:14:30,050
solution is<font color="#E5E5E5"> to search backward we add a</font>

402
00:14:28,010 --> 00:14:32,540
<font color="#E5E5E5">property to the design in a form of</font><font color="#CCCCCC"> anis</font>

403
00:14:30,050 --> 00:14:34,640
<font color="#E5E5E5">in the form of an insertion and we</font>

404
00:14:32,540 --> 00:14:36,770
explore<font color="#E5E5E5"> it symbolically explore the</font>

405
00:14:34,640 --> 00:14:38,500
design<font color="#CCCCCC"> for a single clock cycle</font><font color="#E5E5E5"> and find</font>

406
00:14:36,770 --> 00:14:41,210
a path from<font color="#E5E5E5"> the</font><font color="#CCCCCC"> root node of the tree</font>

407
00:14:38,500 --> 00:14:42,380
representing some intermediate<font color="#E5E5E5"> state to</font>

408
00:14:41,210 --> 00:14:45,590
the leaf node<font color="#E5E5E5"> that violates our</font>

409
00:14:42,380 --> 00:14:47,510
assertion<font color="#E5E5E5"> and we repeat at each</font>

410
00:14:45,590 --> 00:14:49,460
<font color="#E5E5E5">iteration we explore for a single clock</font>

411
00:14:47,510 --> 00:14:51,560
cycle<font color="#CCCCCC"> looking for a path from root node</font>

412
00:14:49,460 --> 00:14:54,740
<font color="#E5E5E5">to a leaf node that matches the</font><font color="#CCCCCC"> root</font>

413
00:14:51,560 --> 00:14:56,719
found in the prior iteration at the end

414
00:14:54,740 --> 00:14:59,330
of this<font color="#CCCCCC"> process a sequence of concrete</font>

415
00:14:56,720 --> 00:15:00,950
instructions is output this sequence<font color="#E5E5E5"> of</font>

416
00:14:59,330 --> 00:15:03,290
instructions represents a trigger for

417
00:15:00,950 --> 00:15:04,910
<font color="#E5E5E5">the</font><font color="#CCCCCC"> assertion violation the processor</font>

418
00:15:03,290 --> 00:15:06,620
starting in its<font color="#E5E5E5"> initial</font><font color="#CCCCCC"> state</font><font color="#E5E5E5"> and</font>

419
00:15:04,910 --> 00:15:08,719
executing<font color="#E5E5E5"> this sequence of instructions</font>

420
00:15:06,620 --> 00:15:12,260
<font color="#E5E5E5">will end up in a state</font><font color="#CCCCCC"> that violates the</font>

421
00:15:08,720 --> 00:15:13,640
given property there's no guarantee the

422
00:15:12,260 --> 00:15:15,230
search will converge and<font color="#CCCCCC"> maybe that the</font>

423
00:15:13,640 --> 00:15:17,540
intermediate<font color="#E5E5E5"> state found in the first</font>

424
00:15:15,230 --> 00:15:19,010
iteration<font color="#E5E5E5"> is an unreachable state it may</font>

425
00:15:17,540 --> 00:15:20,599
be a reachable<font color="#E5E5E5"> state but the path we're</font>

426
00:15:19,010 --> 00:15:22,880
exploring<font color="#E5E5E5"> is not taking us back</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the</font>

427
00:15:20,600 --> 00:15:24,140
processors initial<font color="#CCCCCC"> state</font><font color="#E5E5E5"> so we</font>

428
00:15:22,880 --> 00:15:26,540
<font color="#CCCCCC">introduced some heuristics to</font><font color="#E5E5E5"> make this</font>

429
00:15:24,140 --> 00:15:30,170
work in practice<font color="#CCCCCC"> in the first</font><font color="#E5E5E5"> iteration</font>

430
00:15:26,540 --> 00:15:32,060
<font color="#E5E5E5">the engine initializes input and state</font>

431
00:15:30,170 --> 00:15:33,680
values to be<font color="#CCCCCC"> symbolic and explores the</font>

432
00:15:32,060 --> 00:15:36,109
processor design for complete clock

433
00:15:33,680 --> 00:15:38,719
cycle<font color="#CCCCCC"> in subsequent iterations input</font>

434
00:15:36,110 --> 00:15:40,790
signals are still symbolic but internal

435
00:15:38,720 --> 00:15:43,450
signals may be partially concrete or

436
00:15:40,790 --> 00:15:46,099
fully concrete

437
00:15:43,450 --> 00:15:47,990
when the engine encounters an assertion

438
00:15:46,100 --> 00:15:50,060
violation it produces a path constraint

439
00:15:47,990 --> 00:15:52,520
describing the precondition necessary to

440
00:15:50,060 --> 00:15:54,650
reach<font color="#E5E5E5"> that error state if the processors</font>

441
00:15:52,520 --> 00:15:56,750
initial state can<font color="#CCCCCC"> satisfy the constraint</font>

442
00:15:54,650 --> 00:15:58,100
<font color="#E5E5E5">the backward symbolic execution engine</font>

443
00:15:56,750 --> 00:16:01,370
is done and<font color="#E5E5E5"> it outputs the trigger</font>

444
00:15:58,100 --> 00:16:02,870
instructions if the processors initial

445
00:16:01,370 --> 00:16:05,030
state does not satisfy<font color="#E5E5E5"> the constraint</font>

446
00:16:02,870 --> 00:16:06,980
<font color="#E5E5E5">the tool uses some heuristics to</font>

447
00:16:05,030 --> 00:16:08,540
<font color="#E5E5E5">eliminate intermediate states that are</font>

448
00:16:06,980 --> 00:16:11,810
less likely<font color="#E5E5E5"> to take</font><font color="#CCCCCC"> us back to the</font>

449
00:16:08,540 --> 00:16:13,130
initial<font color="#CCCCCC"> state</font><font color="#E5E5E5"> we define distance</font><font color="#CCCCCC"> from</font>

450
00:16:11,810 --> 00:16:15,199
the initial<font color="#CCCCCC"> state as the number</font><font color="#E5E5E5"> of</font>

451
00:16:13,130 --> 00:16:17,030
registers that<font color="#E5E5E5"> differ from their initial</font>

452
00:16:15,200 --> 00:16:18,890
value and if the<font color="#E5E5E5"> current state</font><font color="#CCCCCC"> defers</font>

453
00:16:17,030 --> 00:16:21,069
too much from the initial<font color="#CCCCCC"> state we throw</font>

454
00:16:18,890 --> 00:16:23,060
out the<font color="#E5E5E5"> path and we restart the search</font>

455
00:16:21,070 --> 00:16:25,610
acceptable distance is a tunable

456
00:16:23,060 --> 00:16:27,650
parameter to the tool we<font color="#E5E5E5"> also check</font><font color="#CCCCCC"> to</font>

457
00:16:25,610 --> 00:16:29,630
<font color="#CCCCCC">see</font><font color="#E5E5E5"> if we're</font><font color="#CCCCCC"> in a loop</font><font color="#E5E5E5"> and at each</font>

458
00:16:27,650 --> 00:16:31,939
iteration<font color="#E5E5E5"> that engine checks whether the</font>

459
00:16:29,630 --> 00:16:34,130
<font color="#CCCCCC">sequence of instructions generated so</font>

460
00:16:31,940 --> 00:16:35,660
<font color="#CCCCCC">far has exceeded a bound the size of the</font>

461
00:16:34,130 --> 00:16:38,750
bound again<font color="#E5E5E5"> is a tunable parameter to</font>

462
00:16:35,660 --> 00:16:40,550
the engine<font color="#E5E5E5"> so</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> implemented our tool</font>

463
00:16:38,750 --> 00:16:42,710
<font color="#CCCCCC">and we evaluated it</font><font color="#E5E5E5"> again on the o R</font>

464
00:16:40,550 --> 00:16:44,930
<font color="#E5E5E5">1200 processor</font><font color="#CCCCCC"> the first thing we wanted</font>

465
00:16:42,710 --> 00:16:47,510
<font color="#E5E5E5">to</font><font color="#CCCCCC"> ask was will</font><font color="#E5E5E5"> we be able</font><font color="#CCCCCC"> to find bugs</font>

466
00:16:44,930 --> 00:16:48,890
<font color="#E5E5E5">in a design to evaluate this we wanted a</font>

467
00:16:47,510 --> 00:16:50,240
set of known bugs that<font color="#E5E5E5"> we knew were</font>

468
00:16:48,890 --> 00:16:52,280
there we were looking to<font color="#E5E5E5"> see if we could</font>

469
00:16:50,240 --> 00:16:54,620
find<font color="#E5E5E5"> them so we took our bugs that we</font>

470
00:16:52,280 --> 00:16:57,589
had collected<font color="#E5E5E5"> looking at bug trackers</font>

471
00:16:54,620 --> 00:17:00,440
and<font color="#E5E5E5"> databases and we put 31 bugs into</font>

472
00:16:57,590 --> 00:17:01,970
the design of<font color="#CCCCCC"> the O</font><font color="#E5E5E5"> R 1200 processor we</font>

473
00:17:00,440 --> 00:17:03,710
use the set of properties that<font color="#CCCCCC"> we have</font>

474
00:17:01,970 --> 00:17:06,110
developed<font color="#E5E5E5"> in our own work and added them</font>

475
00:17:03,710 --> 00:17:08,480
as assertions<font color="#E5E5E5"> and look to see will we</font>

476
00:17:06,109 --> 00:17:11,990
find these bugs<font color="#E5E5E5"> out of 31 bugs we were</font>

477
00:17:08,480 --> 00:17:13,550
<font color="#CCCCCC">able to find 29:1 we were not able to</font>

478
00:17:11,990 --> 00:17:16,220
find<font color="#CCCCCC"> because we had no corresponding</font>

479
00:17:13,550 --> 00:17:17,990
property that the bug was violating so

480
00:17:16,220 --> 00:17:19,370
our set of properties was incomplete

481
00:17:17,990 --> 00:17:21,620
wouldn't've been<font color="#E5E5E5"> able to find this bug</font>

482
00:17:19,369 --> 00:17:23,839
<font color="#CCCCCC">and when we were unable to</font><font color="#E5E5E5"> find it was</font>

483
00:17:21,619 --> 00:17:26,659
outside of the<font color="#E5E5E5"> processor core which is</font>

484
00:17:23,839 --> 00:17:28,310
<font color="#CCCCCC">where</font><font color="#E5E5E5"> we were focusing our</font><font color="#CCCCCC"> search we</font>

485
00:17:26,660 --> 00:17:29,780
<font color="#CCCCCC">also compared our tool to two model</font>

486
00:17:28,310 --> 00:17:32,419
checking tools<font color="#E5E5E5"> we compared to the</font>

487
00:17:29,780 --> 00:17:34,550
commercial<font color="#CCCCCC"> IFE tool and also to the</font><font color="#E5E5E5"> open</font>

488
00:17:32,420 --> 00:17:36,530
<font color="#E5E5E5">source</font><font color="#CCCCCC"> IBMC model checking</font><font color="#E5E5E5"> tool and in</font>

489
00:17:34,550 --> 00:17:38,409
both cases those tools found<font color="#E5E5E5"> a subset of</font>

490
00:17:36,530 --> 00:17:41,420
the bugs that<font color="#E5E5E5"> we were able to find and</font>

491
00:17:38,410 --> 00:17:43,820
of the bugs that<font color="#CCCCCC"> they</font><font color="#E5E5E5"> found the tools</font>

492
00:17:41,420 --> 00:17:45,440
<font color="#E5E5E5">did not always return a replayable</font>

493
00:17:43,820 --> 00:17:47,330
sequence of instructions meaning

494
00:17:45,440 --> 00:17:49,220
sometimes<font color="#E5E5E5"> the instructions started from</font>

495
00:17:47,330 --> 00:17:50,899
some intermediate processor state not

496
00:17:49,220 --> 00:17:53,420
the<font color="#CCCCCC"> initial</font><font color="#E5E5E5"> state and it would be up to</font>

497
00:17:50,900 --> 00:17:54,770
<font color="#E5E5E5">the verifier to figure out how to get</font>

498
00:17:53,420 --> 00:17:59,390
the processor<font color="#E5E5E5"> from its initial</font>

499
00:17:54,770 --> 00:18:02,120
<font color="#CCCCCC">State to this intermediate</font><font color="#E5E5E5"> state we then</font>

500
00:17:59,390 --> 00:18:04,880
explore<font color="#CCCCCC"> two new designs that we had not</font>

501
00:18:02,120 --> 00:18:07,750
<font color="#E5E5E5">used in our development of the tool</font><font color="#CCCCCC"> or a</font>

502
00:18:04,880 --> 00:18:10,130
set<font color="#CCCCCC"> of properties in the last work</font><font color="#E5E5E5"> again</font>

503
00:18:07,750 --> 00:18:12,170
<font color="#CCCCCC">we insert our set of properties as</font>

504
00:18:10,130 --> 00:18:15,710
assertions and<font color="#E5E5E5"> explore looking for</font>

505
00:18:12,170 --> 00:18:19,400
assertion violations<font color="#E5E5E5"> and we find four</font>

506
00:18:15,710 --> 00:18:22,460
new properties so the<font color="#E5E5E5"> MOR 1kx espresso</font>

507
00:18:19,400 --> 00:18:24,020
is a<font color="#CCCCCC"> low r1000 architecture it's the</font>

508
00:18:22,460 --> 00:18:26,600
<font color="#E5E5E5">next generation design from the</font><font color="#CCCCCC"> OU our</font>

509
00:18:24,020 --> 00:18:29,629
<font color="#CCCCCC">1200</font><font color="#E5E5E5"> and here we found that a bug that</font>

510
00:18:26,600 --> 00:18:31,520
existed in the<font color="#CCCCCC"> o</font><font color="#E5E5E5"> R 1200 also existed</font>

511
00:18:29,630 --> 00:18:33,710
persisted to<font color="#E5E5E5"> this next</font><font color="#CCCCCC"> generation and so</font>

512
00:18:31,520 --> 00:18:36,320
this is<font color="#E5E5E5"> useful you</font><font color="#CCCCCC"> can use properties</font>

513
00:18:33,710 --> 00:18:37,610
developed in one design to look at

514
00:18:36,320 --> 00:18:40,250
future designs within<font color="#E5E5E5"> the same</font>

515
00:18:37,610 --> 00:18:42,050
<font color="#E5E5E5">architecture this is great and then the</font>

516
00:18:40,250 --> 00:18:43,550
risk<font color="#CCCCCC"> five architecture</font><font color="#E5E5E5"> this was a new</font>

517
00:18:42,050 --> 00:18:45,530
architecture we had<font color="#E5E5E5"> not pulled any of</font>

518
00:18:43,550 --> 00:18:47,360
our bugs<font color="#E5E5E5"> from risk 5 architectures and</font>

519
00:18:45,530 --> 00:18:49,760
<font color="#E5E5E5">so this is also</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> really nice finding</font>

520
00:18:47,360 --> 00:18:51,560
this shows<font color="#CCCCCC"> that properties developed by</font>

521
00:18:49,760 --> 00:18:53,780
studying<font color="#E5E5E5"> other architectures other</font>

522
00:18:51,560 --> 00:18:56,120
designs are useful in exploring and

523
00:18:53,780 --> 00:18:58,370
<font color="#E5E5E5">finding bugs exploitable bugs in a new</font>

524
00:18:56,120 --> 00:19:04,159
architecture still<font color="#CCCCCC"> within the open</font>

525
00:18:58,370 --> 00:19:07,159
source<font color="#E5E5E5"> risk family of processors going</font>

526
00:19:04,160 --> 00:19:09,290
forward we have only<font color="#CCCCCC"> begun to</font><font color="#E5E5E5"> scratch</font>

527
00:19:07,160 --> 00:19:11,540
<font color="#CCCCCC">the surface</font><font color="#E5E5E5"> of what is possible</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> what</font>

528
00:19:09,290 --> 00:19:14,090
<font color="#CCCCCC">is needed to ensure</font><font color="#E5E5E5"> the security of our</font>

529
00:19:11,540 --> 00:19:15,320
processors<font color="#E5E5E5"> going forward we will</font><font color="#CCCCCC"> be</font>

530
00:19:14,090 --> 00:19:17,840
building<font color="#E5E5E5"> the</font><font color="#CCCCCC"> tools and knowledge</font>

531
00:19:15,320 --> 00:19:21,560
<font color="#E5E5E5">necessary to prevent the next media</font>

532
00:19:17,840 --> 00:19:23,810
firestorm<font color="#E5E5E5"> so please join us</font><font color="#CCCCCC"> check out</font>

533
00:19:21,560 --> 00:19:26,210
<font color="#E5E5E5">our</font><font color="#CCCCCC"> webpage posted</font><font color="#E5E5E5"> here you can google</font>

534
00:19:23,810 --> 00:19:28,429
hardware security<font color="#CCCCCC"> at UNC there you will</font>

535
00:19:26,210 --> 00:19:30,260
<font color="#CCCCCC">find our papers and also our github repo</font>

536
00:19:28,430 --> 00:19:31,670
with a symbolic<font color="#E5E5E5"> execution engine and the</font>

537
00:19:30,260 --> 00:19:34,040
properties the code will<font color="#CCCCCC"> be up</font><font color="#E5E5E5"> there as</font>

538
00:19:31,670 --> 00:19:35,300
well we<font color="#CCCCCC"> need to build the community of</font>

539
00:19:34,040 --> 00:19:37,340
<font color="#E5E5E5">folks working on hardware security</font>

540
00:19:35,300 --> 00:19:41,260
validation we need to show the security

541
00:19:37,340 --> 00:19:41,260
<font color="#E5E5E5">folks how it's done thank you</font>

542
00:19:42,310 --> 00:19:44,370
you

