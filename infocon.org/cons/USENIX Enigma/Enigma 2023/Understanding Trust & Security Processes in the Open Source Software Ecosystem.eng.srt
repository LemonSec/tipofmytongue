1
00:00:01,199 --> 00:00:04,199
foreign

2
00:00:22,880 --> 00:00:25,380
Center for information security in

3
00:00:25,380 --> 00:00:26,400
Germany

4
00:00:26,400 --> 00:00:29,760
if you want to follow along with slide

5
00:00:29,760 --> 00:00:31,320
full of talk you can follow the QR code

6
00:00:31,320 --> 00:00:33,180
or click on the link or like visit the

7
00:00:33,180 --> 00:00:35,520
link below it on my website

8
00:00:35,520 --> 00:00:37,380
um in this talk I want to present past

9
00:00:37,380 --> 00:00:39,300
and ongoing research we conducted in the

10
00:00:39,300 --> 00:00:41,280
open source ecosystem

11
00:00:41,280 --> 00:00:43,860
but first

12
00:00:43,860 --> 00:00:45,719
the software supply chain is under

13
00:00:45,719 --> 00:00:48,020
attack

14
00:00:48,120 --> 00:00:50,700
hundreds of U.S news sites push malware

15
00:00:50,700 --> 00:00:52,680
and the flight Channel Tech Microsoft

16
00:00:52,680 --> 00:00:54,899
says nation-state threats and zero-day

17
00:00:54,899 --> 00:00:56,460
attacks are increasing

18
00:00:56,460 --> 00:00:58,620
supply chain hacks are on the rise but

19
00:00:58,620 --> 00:01:00,719
most companies aren't prepared

20
00:01:00,719 --> 00:01:03,600
at npm malware attack goes unnoticed for

21
00:01:03,600 --> 00:01:04,920
a year

22
00:01:04,920 --> 00:01:06,240
um so the last one here is especially

23
00:01:06,240 --> 00:01:08,000
relevant for this talk because

24
00:01:08,000 --> 00:01:10,140
especially developers are a high value

25
00:01:10,140 --> 00:01:13,140
Target for such a tax potentially

26
00:01:13,140 --> 00:01:15,479
amplifying any vulnerabilities or

27
00:01:15,479 --> 00:01:18,000
introduce malware to thousands of users

28
00:01:18,000 --> 00:01:19,500
of their code

29
00:01:19,500 --> 00:01:21,960
and developers also act as a potential

30
00:01:21,960 --> 00:01:24,240
weakest link in the supply chain with

31
00:01:24,240 --> 00:01:26,400
many involved individual developers in

32
00:01:26,400 --> 00:01:28,979
the code with many individual setups as

33
00:01:28,979 --> 00:01:30,600
well as many potentially large attack

34
00:01:30,600 --> 00:01:33,420
surfaces for each developer

35
00:01:33,420 --> 00:01:35,880
so you might ask where does research get

36
00:01:35,880 --> 00:01:37,860
involved in all of that

37
00:01:37,860 --> 00:01:40,079
as I mentioned I'm a usable security and

38
00:01:40,079 --> 00:01:42,119
privacy researcher and you are probably

39
00:01:42,119 --> 00:01:43,439
familiar with security and privacy

40
00:01:43,439 --> 00:01:44,759
research in general

41
00:01:44,759 --> 00:01:48,540
so where does the usable part come in

42
00:01:48,540 --> 00:01:50,880
so security and privacy research enabled

43
00:01:50,880 --> 00:01:52,439
many cool security Technologies and

44
00:01:52,439 --> 00:01:54,600
approaches like public key crypto and

45
00:01:54,600 --> 00:01:56,220
end-to-end encryption

46
00:01:56,220 --> 00:01:58,320
but in the past uptake of these

47
00:01:58,320 --> 00:02:00,420
Technologies was rather sluggish by end

48
00:02:00,420 --> 00:02:01,979
users

49
00:02:01,979 --> 00:02:04,020
an angry researcher you can tell that

50
00:02:04,020 --> 00:02:05,520
they are quite angry awarded because of

51
00:02:05,520 --> 00:02:07,140
the eyebrows um

52
00:02:07,140 --> 00:02:09,360
might blame the users for the slow

53
00:02:09,360 --> 00:02:11,099
uptake

54
00:02:11,099 --> 00:02:13,020
but one of the foundation ideas behind

55
00:02:13,020 --> 00:02:14,220
the field of visible security and

56
00:02:14,220 --> 00:02:16,980
privacy is that the users are not just

57
00:02:16,980 --> 00:02:18,900
stupid or lazy but that we as

58
00:02:18,900 --> 00:02:20,879
researchers are responsible for

59
00:02:20,879 --> 00:02:22,739
developing or improving current

60
00:02:22,739 --> 00:02:26,760
approaches so that they are more usable

61
00:02:26,760 --> 00:02:28,620
so you might ask but if it's not a

62
00:02:28,620 --> 00:02:29,819
user's fault that is struggle with

63
00:02:29,819 --> 00:02:32,459
security who is at fault and if you look

64
00:02:32,459 --> 00:02:34,080
at more or less recent vulnerabilities

65
00:02:34,080 --> 00:02:35,580
and codes such as log for Shell

66
00:02:35,580 --> 00:02:38,160
heartbeat or shell shock one might

67
00:02:38,160 --> 00:02:41,220
assume it might be the developer's fault

68
00:02:41,220 --> 00:02:43,500
I mean even the bad guys fail so in

69
00:02:43,500 --> 00:02:44,940
these examples where ransomware

70
00:02:44,940 --> 00:02:48,840
developers struggled with cryptography

71
00:02:48,840 --> 00:02:50,819
so again the angry researcher is the

72
00:02:50,819 --> 00:02:52,560
idea that now the developers might be at

73
00:02:52,560 --> 00:02:54,420
fault

74
00:02:54,420 --> 00:02:56,459
and that's where my specific field comes

75
00:02:56,459 --> 00:02:58,379
in usable security for developers so

76
00:02:58,379 --> 00:03:00,360
similar as for the users we don't

77
00:03:00,360 --> 00:03:01,980
necessarily blame the Developers for

78
00:03:01,980 --> 00:03:04,739
struggling with security and privacy and

79
00:03:04,739 --> 00:03:06,780
instead Hope to support and Empower them

80
00:03:06,780 --> 00:03:09,540
towards building more secure software

81
00:03:09,540 --> 00:03:11,459
and in today's soft vehicle system

82
00:03:11,459 --> 00:03:13,920
because it's quite large this idea

83
00:03:13,920 --> 00:03:16,200
extends to all types of software experts

84
00:03:16,200 --> 00:03:17,700
such as developers administrators

85
00:03:17,700 --> 00:03:20,220
maintainers team leads a data protection

86
00:03:20,220 --> 00:03:22,080
officers and so on

87
00:03:22,080 --> 00:03:24,540
so you might ask why specifically just

88
00:03:24,540 --> 00:03:26,640
experts and not like improve security

89
00:03:26,640 --> 00:03:28,800
for end users or something like this

90
00:03:28,800 --> 00:03:31,080
because experts such as project leads

91
00:03:31,080 --> 00:03:32,580
developers or maintainers have a huge

92
00:03:32,580 --> 00:03:34,980
impact on the software ecosystem

93
00:03:34,980 --> 00:03:36,540
specifically by supporting these

94
00:03:36,540 --> 00:03:38,280
impactful experts we can bring security

95
00:03:38,280 --> 00:03:40,019
and privacy improvements to many

96
00:03:40,019 --> 00:03:42,480
individual users of their software

97
00:03:42,480 --> 00:03:45,239
so for example empowering an expert to

98
00:03:45,239 --> 00:03:46,860
include a specific security feature in

99
00:03:46,860 --> 00:03:48,299
their code could potentially affect tens

100
00:03:48,299 --> 00:03:50,459
of the projects hundreds of lines of

101
00:03:50,459 --> 00:03:52,019
code there right which you can get

102
00:03:52,019 --> 00:03:53,580
potentially deployed to thousands of

103
00:03:53,580 --> 00:03:56,159
times and then these deployments could

104
00:03:56,159 --> 00:03:57,420
be potentially used by millions of end

105
00:03:57,420 --> 00:03:59,640
users which then benefit from this

106
00:03:59,640 --> 00:04:01,980
increased security

107
00:04:01,980 --> 00:04:04,200
but being an expert does not necessarily

108
00:04:04,200 --> 00:04:05,879
rely on them being knowledgeable or

109
00:04:05,879 --> 00:04:07,260
security as recent software

110
00:04:07,260 --> 00:04:08,700
vulnerabilities have shown such as the

111
00:04:08,700 --> 00:04:10,620
lock for J vulnerability which did and

112
00:04:10,620 --> 00:04:14,040
still does affect many services

113
00:04:14,040 --> 00:04:17,399
and take only approaches like firewalls

114
00:04:17,399 --> 00:04:19,978
password managers or developer and

115
00:04:19,978 --> 00:04:21,720
Analysis tools might not be able to

116
00:04:21,720 --> 00:04:23,699
solve this problem alone because in the

117
00:04:23,699 --> 00:04:25,979
end they themselves are dependent on

118
00:04:25,979 --> 00:04:28,020
being developed by experts being

119
00:04:28,020 --> 00:04:29,580
deployed by experts and being correctly

120
00:04:29,580 --> 00:04:32,400
used by experts

121
00:04:32,400 --> 00:04:34,259
and for example the recent and still

122
00:04:34,259 --> 00:04:36,120
ongoing kind of LastPass breach

123
00:04:36,120 --> 00:04:38,040
originated from credentials and keys

124
00:04:38,040 --> 00:04:39,960
stolen from an employee

125
00:04:39,960 --> 00:04:42,000
and even the bleeding edge advances in

126
00:04:42,000 --> 00:04:43,259
the AI might still lead to

127
00:04:43,259 --> 00:04:45,120
vulnerabilities as a series of papers by

128
00:04:45,120 --> 00:04:47,960
NYU showed

129
00:04:48,360 --> 00:04:48,960
um

130
00:04:48,960 --> 00:04:51,180
this larger text surface of the open

131
00:04:51,180 --> 00:04:52,979
source of the software supply chain can

132
00:04:52,979 --> 00:04:54,120
be especially challenging for open

133
00:04:54,120 --> 00:04:55,440
source developers just because

134
00:04:55,440 --> 00:04:57,900
ecosystems that well that large and that

135
00:04:57,900 --> 00:04:59,280
well connected

136
00:04:59,280 --> 00:05:01,020
so GitHub state of the octopus report

137
00:05:01,020 --> 00:05:02,880
from 2020 mentioned that most companies

138
00:05:02,880 --> 00:05:04,620
on GitHub rely on some form of Open

139
00:05:04,620 --> 00:05:06,540
Source software and stack resulting in

140
00:05:06,540 --> 00:05:07,860
widespread usage

141
00:05:07,860 --> 00:05:09,720
and the median number of dependencies in

142
00:05:09,720 --> 00:05:12,720
the npm ecosystem is 683 resulting in a

143
00:05:12,720 --> 00:05:15,300
large potential attack surface

144
00:05:15,300 --> 00:05:17,100
so in this talk I also want to convince

145
00:05:17,100 --> 00:05:18,960
you personally of something that is why

146
00:05:18,960 --> 00:05:20,820
you should care about resource and

147
00:05:20,820 --> 00:05:22,440
related to that open source software

148
00:05:22,440 --> 00:05:24,479
security

149
00:05:24,479 --> 00:05:25,740
um here's a flight of source software

150
00:05:25,740 --> 00:05:27,479
logos you are probably aware of some of

151
00:05:27,479 --> 00:05:29,520
these logos and maybe even use the tools

152
00:05:29,520 --> 00:05:30,660
from time to time

153
00:05:30,660 --> 00:05:32,520
but open source software probably has

154
00:05:32,520 --> 00:05:33,840
permeated your life more than you are

155
00:05:33,840 --> 00:05:35,160
aware of

156
00:05:35,160 --> 00:05:36,960
open source code appears the foundation

157
00:05:36,960 --> 00:05:38,400
glue

158
00:05:38,400 --> 00:05:40,259
or during the build processes in many of

159
00:05:40,259 --> 00:05:42,419
our software projects whether it's low

160
00:05:42,419 --> 00:05:43,800
level system drivers and operating

161
00:05:43,800 --> 00:05:46,740
systems as Tooling in our daily jobs

162
00:05:46,740 --> 00:05:48,660
or simply as dependencies of our hobby

163
00:05:48,660 --> 00:05:50,460
projects open source software is an

164
00:05:50,460 --> 00:05:51,600
important building block of our everyday

165
00:05:51,600 --> 00:05:53,880
software lives

166
00:05:53,880 --> 00:05:55,979
so with this motivation onto the

167
00:05:55,979 --> 00:05:57,180
research part

168
00:05:57,180 --> 00:05:58,740
now as I mentioned I want to talk about

169
00:05:58,740 --> 00:06:00,660
three research projects in the area of

170
00:06:00,660 --> 00:06:03,240
Open Source namely committed to trust in

171
00:06:03,240 --> 00:06:04,800
which we interviewed maintainers of Open

172
00:06:04,800 --> 00:06:06,300
Source software and which was published

173
00:06:06,300 --> 00:06:08,820
at last Oakland as well as two ongoing

174
00:06:08,820 --> 00:06:10,860
projects one about reproducible software

175
00:06:10,860 --> 00:06:12,780
builds and one investigating how

176
00:06:12,780 --> 00:06:14,340
industry projects deal with the security

177
00:06:14,340 --> 00:06:16,800
and the impacts of using open source

178
00:06:16,800 --> 00:06:19,500
components in their projects

179
00:06:19,500 --> 00:06:21,240
so first for the already published work

180
00:06:21,240 --> 00:06:22,560
Community Trust

181
00:06:22,560 --> 00:06:24,419
for this work we investigated how Open

182
00:06:24,419 --> 00:06:26,340
Source process handle security and Trust

183
00:06:26,340 --> 00:06:28,680
behind the scenes specifically we were

184
00:06:28,680 --> 00:06:30,539
interested in processes that are not

185
00:06:30,539 --> 00:06:32,340
necessarily visible from the code or the

186
00:06:32,340 --> 00:06:34,020
repository level

187
00:06:34,020 --> 00:06:35,699
uh we passed our investigation on the

188
00:06:35,699 --> 00:06:38,280
following research questions first our

189
00:06:38,280 --> 00:06:39,840
open source projects structured behind

190
00:06:39,840 --> 00:06:42,539
the scenes second if and what guidance

191
00:06:42,539 --> 00:06:44,280
and policies are provided by open source

192
00:06:44,280 --> 00:06:46,080
projects and third

193
00:06:46,080 --> 00:06:48,060
how do open source projects approach

194
00:06:48,060 --> 00:06:50,460
security and Trust changes

195
00:06:50,460 --> 00:06:52,259
to answer these questions

196
00:06:52,259 --> 00:06:54,360
we conducted interviews with 27 owners

197
00:06:54,360 --> 00:06:56,280
team leads maintainers and contributors

198
00:06:56,280 --> 00:06:58,199
of Open Source projects

199
00:06:58,199 --> 00:07:00,960
we roughly sorted our interview Partners

200
00:07:00,960 --> 00:07:03,600
into their roads

201
00:07:03,600 --> 00:07:05,699
and found that they tend to what's the

202
00:07:05,699 --> 00:07:07,919
leader on our side and we suspect that

203
00:07:07,919 --> 00:07:09,960
this might be an effect of being often

204
00:07:09,960 --> 00:07:11,759
referred for the after product until we

205
00:07:11,759 --> 00:07:13,800
reached the team leader or the owner or

206
00:07:13,800 --> 00:07:16,020
the owner for the interviews

207
00:07:16,020 --> 00:07:18,300
as for the results I want to go them

208
00:07:18,300 --> 00:07:21,120
over them in like three sections namely

209
00:07:21,120 --> 00:07:23,280
for trust security

210
00:07:23,280 --> 00:07:24,900
and processes

211
00:07:24,900 --> 00:07:27,240
so first up for trust

212
00:07:27,240 --> 00:07:28,979
we asked our participants if their

213
00:07:28,979 --> 00:07:30,240
projects had encountered a trust

214
00:07:30,240 --> 00:07:31,680
incident by their own definition in the

215
00:07:31,680 --> 00:07:32,699
past

216
00:07:32,699 --> 00:07:36,360
and a large majority had not

217
00:07:36,360 --> 00:07:38,039
I mentioned trust incidents included

218
00:07:38,039 --> 00:07:40,380
drive by cryptocurrency minor commits

219
00:07:40,380 --> 00:07:42,720
fake breakdown checks for a larger

220
00:07:42,720 --> 00:07:45,000
project Associated companies

221
00:07:45,000 --> 00:07:46,860
and a proactive account block after a

222
00:07:46,860 --> 00:07:48,479
stolen laptop

223
00:07:48,479 --> 00:07:50,400
most of our participants use some form

224
00:07:50,400 --> 00:07:52,259
of meritocracy for establishing trust

225
00:07:52,259 --> 00:07:54,180
with new contributors the song even

226
00:07:54,180 --> 00:07:56,220
assuming trustworthiness by default to

227
00:07:56,220 --> 00:07:58,380
encourage new committers

228
00:07:58,380 --> 00:08:00,240
and the majority of participants never

229
00:08:00,240 --> 00:08:01,620
experience a trust incident in their

230
00:08:01,620 --> 00:08:03,240
projects and also did not establish

231
00:08:03,240 --> 00:08:05,520
specific trust incident strategies

232
00:08:05,520 --> 00:08:07,919
larger likely other projects seem to

233
00:08:07,919 --> 00:08:09,900
have more past experience of incidents

234
00:08:09,900 --> 00:08:11,220
and often of our more specific

235
00:08:11,220 --> 00:08:12,960
strategies

236
00:08:12,960 --> 00:08:15,060
for the security part

237
00:08:15,060 --> 00:08:16,620
the other participants if they

238
00:08:16,620 --> 00:08:18,840
encountered trusted security incidents

239
00:08:18,840 --> 00:08:19,860
in the past

240
00:08:19,860 --> 00:08:23,220
and the majority did not

241
00:08:23,220 --> 00:08:25,379
and counterpa security challenges that

242
00:08:25,379 --> 00:08:26,879
not necessarily led to an incident

243
00:08:26,879 --> 00:08:28,440
included suspicious or low quality

244
00:08:28,440 --> 00:08:30,599
commits as well as vulnerabilities

245
00:08:30,599 --> 00:08:33,719
introduced by dependencies

246
00:08:33,719 --> 00:08:35,640
overall only few projects have an

247
00:08:35,640 --> 00:08:36,539
experienced in outright security

248
00:08:36,539 --> 00:08:38,760
incident and although many of our

249
00:08:38,760 --> 00:08:40,020
participants were familiar with

250
00:08:40,020 --> 00:08:42,000
suspicious or low quality commits as

251
00:08:42,000 --> 00:08:43,260
well as potential vulnerabilities

252
00:08:43,260 --> 00:08:45,959
introduced by dependencies

253
00:08:45,959 --> 00:08:49,200
next we were interested in the guidance

254
00:08:49,200 --> 00:08:51,060
and policies provided by the projects in

255
00:08:51,060 --> 00:08:52,860
terms of processes

256
00:08:52,860 --> 00:08:54,720
and the most mentioned type of clients

257
00:08:54,720 --> 00:08:56,100
our participants included General

258
00:08:56,100 --> 00:08:58,080
guidance for contributing to the project

259
00:08:58,080 --> 00:08:59,700
programming language specific kinds such

260
00:08:59,700 --> 00:09:01,860
as code styling and guidance for the

261
00:09:01,860 --> 00:09:02,820
project setup or the build

262
00:09:02,820 --> 00:09:04,560
infrastructure

263
00:09:04,560 --> 00:09:06,300
a factor for not providing guidance

264
00:09:06,300 --> 00:09:08,580
included the required program hours such

265
00:09:08,580 --> 00:09:11,300
as in this example

266
00:09:12,120 --> 00:09:14,220
well our participants appear to diverge

267
00:09:14,220 --> 00:09:15,180
in their opinions regarding the

268
00:09:15,180 --> 00:09:17,220
helpfulness of written guidance for

269
00:09:17,220 --> 00:09:19,200
security policies larger project

270
00:09:19,200 --> 00:09:21,180
mentioned dedicated security teams while

271
00:09:21,180 --> 00:09:22,680
smaller projects mentioned a security

272
00:09:22,680 --> 00:09:24,300
contact Channel

273
00:09:24,300 --> 00:09:26,160
and most projects include some type of

274
00:09:26,160 --> 00:09:27,600
disclosure policy or at least contact

275
00:09:27,600 --> 00:09:30,000
for security issues

276
00:09:30,000 --> 00:09:32,760
as quick recap we found that products

277
00:09:32,760 --> 00:09:34,019
are highly diverse and deployed security

278
00:09:34,019 --> 00:09:36,839
measures trespasses and motivations

279
00:09:36,839 --> 00:09:39,480
uh growing scope and contributors of a

280
00:09:39,480 --> 00:09:41,040
product also result in their own needs

281
00:09:41,040 --> 00:09:43,380
for the security and Trust processes

282
00:09:43,380 --> 00:09:45,360
and smaller products handle security and

283
00:09:45,360 --> 00:09:46,820
Trust instance as they happen and then

284
00:09:46,820 --> 00:09:51,060
establish processes at that point only

285
00:09:51,060 --> 00:09:53,599
oops

286
00:09:53,940 --> 00:09:55,920
so for

287
00:09:55,920 --> 00:09:57,720
currently ongoing research project we

288
00:09:57,720 --> 00:09:59,519
investigated the reproducible build

289
00:09:59,519 --> 00:10:01,260
ecosystem closer

290
00:10:01,260 --> 00:10:03,000
and this approach was inspired by the

291
00:10:03,000 --> 00:10:05,760
famous Ken Thompson quote quote to what

292
00:10:05,760 --> 00:10:07,500
extent should one trust a statement that

293
00:10:07,500 --> 00:10:09,120
the program is free of Trojan horses

294
00:10:09,120 --> 00:10:10,680
Perhaps it is more important to trust

295
00:10:10,680 --> 00:10:12,779
the people who wrote the software

296
00:10:12,779 --> 00:10:14,580
and an important step of trusting the

297
00:10:14,580 --> 00:10:15,720
people that's what the software is of

298
00:10:15,720 --> 00:10:18,000
course to also be able to trust the

299
00:10:18,000 --> 00:10:20,459
resulting artifacts and reproducible

300
00:10:20,459 --> 00:10:22,860
builds on approach to this problem

301
00:10:22,860 --> 00:10:24,720
so given a public source code and

302
00:10:24,720 --> 00:10:27,060
distributed binaries by vendor

303
00:10:27,060 --> 00:10:29,339
uh reproducible builds allow any

304
00:10:29,339 --> 00:10:30,839
Independent party to validate that

305
00:10:30,839 --> 00:10:33,060
software artifacts were built from

306
00:10:33,060 --> 00:10:34,620
specific source code without any

307
00:10:34,620 --> 00:10:37,580
manipulation or change

308
00:10:37,740 --> 00:10:39,779
and ensuring repeat through the builds

309
00:10:39,779 --> 00:10:42,420
isn't a straightforward task because

310
00:10:42,420 --> 00:10:45,000
challenges include stuff like timestamps

311
00:10:45,000 --> 00:10:46,680
placed by developers and tools in the

312
00:10:46,680 --> 00:10:49,320
code build specifics such as file orders

313
00:10:49,320 --> 00:10:51,420
and build directories as well as any

314
00:10:51,420 --> 00:10:54,120
other Randomness in code or build that

315
00:10:54,120 --> 00:10:56,820
changes the resulting artifacts

316
00:10:56,820 --> 00:10:59,220
for this a research project we conducted

317
00:10:59,220 --> 00:11:03,240
24 interviews with the build experts and

318
00:11:03,240 --> 00:11:04,680
we investigated their approaches and

319
00:11:04,680 --> 00:11:06,720
experiences as well as identifying

320
00:11:06,720 --> 00:11:08,160
potential attractors and heat tractors

321
00:11:08,160 --> 00:11:12,120
to creating reproducible projects

322
00:11:12,120 --> 00:11:13,560
um for our preliminary findings we found

323
00:11:13,560 --> 00:11:15,959
the following we identified a number of

324
00:11:15,959 --> 00:11:17,640
themes related to our participants

325
00:11:17,640 --> 00:11:18,899
motivations for making their bills

326
00:11:18,899 --> 00:11:21,360
reproducible with the two most common

327
00:11:21,360 --> 00:11:22,440
ones being

328
00:11:22,440 --> 00:11:24,839
same input should always compile to same

329
00:11:24,839 --> 00:11:27,899
output and broken expectations and that

330
00:11:27,899 --> 00:11:29,700
how a computer should handle or should

331
00:11:29,700 --> 00:11:32,399
behave that does not match the reality

332
00:11:32,399 --> 00:11:35,820
that our participants wanted to see

333
00:11:35,820 --> 00:11:38,459
for themes related to their experiences

334
00:11:38,459 --> 00:11:40,860
our participants reported generally a

335
00:11:40,860 --> 00:11:42,060
positive experience with upscene

336
00:11:42,060 --> 00:11:43,740
projects and they specifically mentioned

337
00:11:43,740 --> 00:11:46,500
that they the need for patients and good

338
00:11:46,500 --> 00:11:49,740
communication with Upstream projects

339
00:11:49,740 --> 00:11:51,899
and for common obstacles participants

340
00:11:51,899 --> 00:11:53,519
mentioned most commonly date and other

341
00:11:53,519 --> 00:11:55,920
time values and files as well as bit

342
00:11:55,920 --> 00:11:57,480
directly names that somewhere get

343
00:11:57,480 --> 00:12:00,740
included in the build process

344
00:12:01,740 --> 00:12:03,240
um onto the last project for this talk

345
00:12:03,240 --> 00:12:04,740
open source components in Industry

346
00:12:04,740 --> 00:12:05,880
projects

347
00:12:05,880 --> 00:12:07,740
so this time it's basically the other

348
00:12:07,740 --> 00:12:10,260
side of the commutative trust paper this

349
00:12:10,260 --> 00:12:12,959
time more on the like consumer side of

350
00:12:12,959 --> 00:12:14,579
Open Source Code namely industry

351
00:12:14,579 --> 00:12:16,380
projects

352
00:12:16,380 --> 00:12:17,760
um so we wanted to investigate how

353
00:12:17,760 --> 00:12:19,140
industry projects deal with the security

354
00:12:19,140 --> 00:12:21,660
and Trust changes including open source

355
00:12:21,660 --> 00:12:23,040
components in our software

356
00:12:23,040 --> 00:12:25,500
and we wanted to specifically look at

357
00:12:25,500 --> 00:12:27,360
industry projects processes decisions

358
00:12:27,360 --> 00:12:29,160
considerations in the context of

359
00:12:29,160 --> 00:12:31,079
external open source code

360
00:12:31,079 --> 00:12:32,640
we based our investigation on the

361
00:12:32,640 --> 00:12:34,440
following research questions

362
00:12:34,440 --> 00:12:36,120
how open source components included in

363
00:12:36,120 --> 00:12:37,620
companies Tech sex in terms of position

364
00:12:37,620 --> 00:12:40,320
importance and effects

365
00:12:40,320 --> 00:12:42,600
what are companies awareness experiences

366
00:12:42,600 --> 00:12:44,639
and attitudes regarding the security of

367
00:12:44,639 --> 00:12:47,480
including external open source code

368
00:12:47,480 --> 00:12:50,160
n43 if and how do stakeholders make

369
00:12:50,160 --> 00:12:51,660
decisions and considerations around

370
00:12:51,660 --> 00:12:53,399
security and Trust changes including

371
00:12:53,399 --> 00:12:56,100
open source components

372
00:12:56,100 --> 00:12:57,779
to answer these questions we conducted

373
00:12:57,779 --> 00:12:59,940
interview with 25 developers software

374
00:12:59,940 --> 00:13:01,680
Architects and Engineers from industry

375
00:13:01,680 --> 00:13:03,180
projects

376
00:13:03,180 --> 00:13:04,980
as our preliminary findings I want to

377
00:13:04,980 --> 00:13:06,540
highlight the following

378
00:13:06,540 --> 00:13:07,980
we ask our participants if they

379
00:13:07,980 --> 00:13:09,540
encountered a security change or

380
00:13:09,540 --> 00:13:11,880
inconvenience to an open source due to

381
00:13:11,880 --> 00:13:13,800
an open source component in the past

382
00:13:13,800 --> 00:13:16,260
and almost everyone did

383
00:13:16,260 --> 00:13:18,000
common examples included no longer

384
00:13:18,000 --> 00:13:20,700
mainly projects breaking updates and

385
00:13:20,700 --> 00:13:22,079
projects delaying or never patching

386
00:13:22,079 --> 00:13:24,680
vulnerabilities

387
00:13:25,139 --> 00:13:26,820
um we've also interested in what

388
00:13:26,820 --> 00:13:28,560
selection criteria our participants use

389
00:13:28,560 --> 00:13:30,360
for open source projects and here are

390
00:13:30,360 --> 00:13:31,940
some commonly named one namely

391
00:13:31,940 --> 00:13:33,959
popularity measures like downloads or

392
00:13:33,959 --> 00:13:36,720
GitHub Stars signs of an active or large

393
00:13:36,720 --> 00:13:38,160
community

394
00:13:38,160 --> 00:13:39,720
as well as specific features only

395
00:13:39,720 --> 00:13:43,339
provided by the projects they select

396
00:13:44,100 --> 00:13:46,019
um we've all we're also interested in

397
00:13:46,019 --> 00:13:47,639
whether they used internal mirrors or

398
00:13:47,639 --> 00:13:51,060
similar setups for the dependencies or

399
00:13:51,060 --> 00:13:52,200
especially their open source

400
00:13:52,200 --> 00:13:54,240
dependencies in their projects

401
00:13:54,240 --> 00:13:58,100
and a small majority did

402
00:13:58,740 --> 00:14:00,779
some further Insight tests that we had

403
00:14:00,779 --> 00:14:02,519
included that some participants

404
00:14:02,519 --> 00:14:03,959
mentioned that their management doesn't

405
00:14:03,959 --> 00:14:05,880
seem to be fully doesn't seem to fully

406
00:14:05,880 --> 00:14:07,560
grasp the benefits and challenges of

407
00:14:07,560 --> 00:14:08,820
Open Source software

408
00:14:08,820 --> 00:14:10,740
while other support utilized open source

409
00:14:10,740 --> 00:14:12,360
components by donating for example money

410
00:14:12,360 --> 00:14:14,880
developers knowledgeable code and a few

411
00:14:14,880 --> 00:14:16,200
even mentioned following the guidelines

412
00:14:16,200 --> 00:14:18,060
of always contribute back to the

413
00:14:18,060 --> 00:14:20,040
components they use

414
00:14:20,040 --> 00:14:22,139
as for the takeaways from this work or

415
00:14:22,139 --> 00:14:24,180
should I rather say take out because

416
00:14:24,180 --> 00:14:26,880
it's a giant bowl of spaghetti

417
00:14:26,880 --> 00:14:28,800
so securing the open source software

418
00:14:28,800 --> 00:14:30,120
supply chain is somewhat similar to

419
00:14:30,120 --> 00:14:32,160
securing a bowl of spaghetti

420
00:14:32,160 --> 00:14:34,320
the chain of the software supply chain

421
00:14:34,320 --> 00:14:36,060
somewhat wrongly conveys an overall

422
00:14:36,060 --> 00:14:38,399
image of linear relations and with a

423
00:14:38,399 --> 00:14:40,440
clear start point the producers and

424
00:14:40,440 --> 00:14:42,000
often a clear endpoint like consumers or

425
00:14:42,000 --> 00:14:44,040
end users and it also somewhat implies

426
00:14:44,040 --> 00:14:46,199
being like contracts being involved in

427
00:14:46,199 --> 00:14:48,000
similar stuff

428
00:14:48,000 --> 00:14:48,660
um

429
00:14:48,660 --> 00:14:50,639
a better energy would probably be that

430
00:14:50,639 --> 00:14:52,320
of a giant bowl of spaghetti with many

431
00:14:52,320 --> 00:14:54,180
intertwined Trends impossible to discern

432
00:14:54,180 --> 00:14:56,279
beginning and ends and even even when

433
00:14:56,279 --> 00:14:57,959
taking a closer look

434
00:14:57,959 --> 00:15:00,240
and some companies in our study tackle

435
00:15:00,240 --> 00:15:02,160
this problem by focusing only on the

436
00:15:02,160 --> 00:15:04,199
security aspects on their plate so for

437
00:15:04,199 --> 00:15:06,300
example by maintaining in-house versions

438
00:15:06,300 --> 00:15:07,980
or caches of utilized components which

439
00:15:07,980 --> 00:15:10,740
they then better can vet and test in

440
00:15:10,740 --> 00:15:12,779
their setups

441
00:15:12,779 --> 00:15:14,459
so these are the three research projects

442
00:15:14,459 --> 00:15:16,500
one already published investigating Open

443
00:15:16,500 --> 00:15:17,940
Source Products 20 scenes and two

444
00:15:17,940 --> 00:15:20,279
ongoing Works uh one will produce will

445
00:15:20,279 --> 00:15:22,260
build experts and one with industry

446
00:15:22,260 --> 00:15:23,699
stakeholders using open source

447
00:15:23,699 --> 00:15:24,839
components

448
00:15:24,839 --> 00:15:27,959
a sort of total takeaway from this talk

449
00:15:27,959 --> 00:15:30,660
one or four open source open source is

450
00:15:30,660 --> 00:15:32,940
not your average supply chain and

451
00:15:32,940 --> 00:15:34,560
projects assuming so might be badly

452
00:15:34,560 --> 00:15:35,880
bitten by it

453
00:15:35,880 --> 00:15:38,339
two developers might be the weakest link

454
00:15:38,339 --> 00:15:40,560
of the software supply chain and can use

455
00:15:40,560 --> 00:15:42,300
any support they can get

456
00:15:42,300 --> 00:15:44,699
and three I think the best solution for

457
00:15:44,699 --> 00:15:46,260
this support is to directly involve the

458
00:15:46,260 --> 00:15:48,240
developers in the ongoing research

459
00:15:48,240 --> 00:15:50,399
my name is thanks for listening to this

460
00:15:50,399 --> 00:15:52,579
talk

