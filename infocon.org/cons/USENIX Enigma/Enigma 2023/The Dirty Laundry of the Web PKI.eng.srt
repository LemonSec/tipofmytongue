1
00:00:01,199 --> 00:00:04,199
foreign

2
00:00:16,340 --> 00:00:19,260
hello uh thank you David my name is

3
00:00:19,260 --> 00:00:22,020
Emily I come to you from the Chrome

4
00:00:22,020 --> 00:00:24,359
security team I lead a team there that

5
00:00:24,359 --> 00:00:27,300
works on TLS https adoptions

6
00:00:27,300 --> 00:00:29,820
certificates cryptography basically all

7
00:00:29,820 --> 00:00:33,540
things https and TLS

8
00:00:33,540 --> 00:00:35,940
uh before I begin I want to preemptively

9
00:00:35,940 --> 00:00:38,460
thank many many former and current term

10
00:00:38,460 --> 00:00:40,579
teammates who helped me with this talk

11
00:00:40,579 --> 00:00:43,320
too many to name explicitly but I really

12
00:00:43,320 --> 00:00:45,059
appreciate all the ideas that various

13
00:00:45,059 --> 00:00:46,739
co-workers and colleagues contributed

14
00:00:46,739 --> 00:00:49,559
this was really not a talk involving

15
00:00:49,559 --> 00:00:52,079
many of my own ideas this is really just

16
00:00:52,079 --> 00:00:53,760
kind of a list of all the Absurd and

17
00:00:53,760 --> 00:00:56,100
horrible things that I have learned as I

18
00:00:56,100 --> 00:00:57,960
have come to work in this area more

19
00:00:57,960 --> 00:01:01,280
closely over the last couple years

20
00:01:01,559 --> 00:01:04,260
today we're talking about the webpki

21
00:01:04,260 --> 00:01:06,479
this is the system that underlies all

22
00:01:06,479 --> 00:01:08,580
secure connections on the web it allows

23
00:01:08,580 --> 00:01:11,280
web browsers to establish encrypted and

24
00:01:11,280 --> 00:01:14,040
authenticated connections to websites

25
00:01:14,040 --> 00:01:17,580
if you compromise this system you can

26
00:01:17,580 --> 00:01:19,439
impersonate any website

27
00:01:19,439 --> 00:01:22,140
you can spy on people's account

28
00:01:22,140 --> 00:01:23,880
credentials read their private messages

29
00:01:23,880 --> 00:01:26,580
tamper with their private documents

30
00:01:26,580 --> 00:01:28,380
you can infiltrate critical

31
00:01:28,380 --> 00:01:30,420
infrastructure or intercept corporate

32
00:01:30,420 --> 00:01:33,360
corporate Secrets or really just disrupt

33
00:01:33,360 --> 00:01:36,960
Society in many many ways

34
00:01:36,960 --> 00:01:40,380
so given that we rely in our society on

35
00:01:40,380 --> 00:01:42,360
this system to be functional and secure

36
00:01:42,360 --> 00:01:45,659
if you asked me what what words I think

37
00:01:45,659 --> 00:01:47,759
of to describe it

38
00:01:47,759 --> 00:01:49,799
you might hope that I would say words

39
00:01:49,799 --> 00:01:52,259
like sophisticated streamlined modern

40
00:01:52,259 --> 00:01:53,460
and secure

41
00:01:53,460 --> 00:01:55,799
but of course instead the words that I

42
00:01:55,799 --> 00:01:58,200
think of are words like Legacy over

43
00:01:58,200 --> 00:02:00,600
complicated rickety ancient and dumpster

44
00:02:00,600 --> 00:02:01,740
fire

45
00:02:01,740 --> 00:02:04,320
and uh I'm going to be telling you today

46
00:02:04,320 --> 00:02:06,000
about why these are the words that come

47
00:02:06,000 --> 00:02:08,340
to mind instead of those nicer words

48
00:02:08,340 --> 00:02:10,619
that I said a second ago and how we can

49
00:02:10,619 --> 00:02:12,180
think about starting to put out the

50
00:02:12,180 --> 00:02:14,720
dumpster fire

51
00:02:15,480 --> 00:02:17,520
so I've used this term the webpki and

52
00:02:17,520 --> 00:02:19,080
you might or might not be familiar with

53
00:02:19,080 --> 00:02:20,700
that term but you're probably familiar

54
00:02:20,700 --> 00:02:24,480
with the concept of an https certificate

55
00:02:24,480 --> 00:02:26,520
so when you go to set up a website at

56
00:02:26,520 --> 00:02:29,580
example.com you get a certificate from a

57
00:02:29,580 --> 00:02:32,280
trusted certification Authority or CA

58
00:02:32,280 --> 00:02:34,200
that proves that you do indeed control

59
00:02:34,200 --> 00:02:37,040
the real example.com

60
00:02:37,040 --> 00:02:40,440
then when a client such as a web browser

61
00:02:40,440 --> 00:02:43,800
goes to establish an https connection

62
00:02:43,800 --> 00:02:45,959
you provide the certificate and the

63
00:02:45,959 --> 00:02:48,360
client tries to validate it

64
00:02:48,360 --> 00:02:50,340
the client maintains this list of

65
00:02:50,340 --> 00:02:52,620
trusted Cas locally

66
00:02:52,620 --> 00:02:54,959
sometimes called a trust store or a root

67
00:02:54,959 --> 00:02:56,040
store

68
00:02:56,040 --> 00:02:58,080
and it's governed by a set of policies

69
00:02:58,080 --> 00:02:59,700
and procedures called a trust store

70
00:02:59,700 --> 00:03:02,220
program or a root program that decide

71
00:03:02,220 --> 00:03:04,500
which Cas are trusted by that client to

72
00:03:04,500 --> 00:03:06,720
establish https connections

73
00:03:06,720 --> 00:03:08,099
so when the client receives this

74
00:03:08,099 --> 00:03:09,959
example.com certificate it tries to

75
00:03:09,959 --> 00:03:12,300
build a chain from that certificate to a

76
00:03:12,300 --> 00:03:14,340
route in its trust store and if it can

77
00:03:14,340 --> 00:03:16,440
build that chain successfully it accepts

78
00:03:16,440 --> 00:03:19,980
the certificate and if not it rejects it

79
00:03:19,980 --> 00:03:23,099
and this overall system of trusted Cas

80
00:03:23,099 --> 00:03:25,080
that issue certificates directly or

81
00:03:25,080 --> 00:03:27,239
indirectly to websites is called the

82
00:03:27,239 --> 00:03:29,099
webpki the public key infrastructure

83
00:03:29,099 --> 00:03:31,019
that we use on the web to authenticate

84
00:03:31,019 --> 00:03:33,620
websites

85
00:03:36,360 --> 00:03:39,120
the webpki was designed in an era when

86
00:03:39,120 --> 00:03:41,700
encryption was pretty rare it was used

87
00:03:41,700 --> 00:03:44,519
for high value well-resourced websites

88
00:03:44,519 --> 00:03:46,980
not the web that we have today

89
00:03:46,980 --> 00:03:49,200
where encryption is the norm virtually

90
00:03:49,200 --> 00:03:50,700
all traffic on the web is encrypted

91
00:03:50,700 --> 00:03:52,019
today

92
00:03:52,019 --> 00:03:55,680
this growth in HTTP https adoption is a

93
00:03:55,680 --> 00:03:56,700
great thing

94
00:03:56,700 --> 00:03:58,440
and the webpki needs to change along

95
00:03:58,440 --> 00:04:00,180
with it it's no longer an edge case that

96
00:04:00,180 --> 00:04:02,340
needs to be secure and reliable and

97
00:04:02,340 --> 00:04:05,220
usable enough to underlie the entire web

98
00:04:05,220 --> 00:04:06,480
so today I'm going to be telling you

99
00:04:06,480 --> 00:04:08,760
about some of the ways that the web pki

100
00:04:08,760 --> 00:04:10,860
needs to change to adapt to this

101
00:04:10,860 --> 00:04:13,019
ubiquitously encrypted world

102
00:04:13,019 --> 00:04:14,819
and how we're kind of pulling it into

103
00:04:14,819 --> 00:04:17,940
the present and the future

104
00:04:17,940 --> 00:04:19,918
I'm going to be telling you about three

105
00:04:19,918 --> 00:04:22,860
ways that the webpki falls short

106
00:04:22,860 --> 00:04:24,600
and how we can think about overcoming

107
00:04:24,600 --> 00:04:25,860
these

108
00:04:25,860 --> 00:04:27,600
first I'll talk about moving from a

109
00:04:27,600 --> 00:04:29,460
glacially evolving system to a more

110
00:04:29,460 --> 00:04:30,960
agile one

111
00:04:30,960 --> 00:04:32,160
then about some of the security

112
00:04:32,160 --> 00:04:34,199
shortcomings in the webpki and how we

113
00:04:34,199 --> 00:04:35,759
can Rectify them

114
00:04:35,759 --> 00:04:37,680
and finally about simplifying some over

115
00:04:37,680 --> 00:04:41,360
complicated Legacy baggage

116
00:04:44,699 --> 00:04:46,680
if we want to be able to improve the

117
00:04:46,680 --> 00:04:49,080
webpki we need to be able to change

118
00:04:49,080 --> 00:04:50,340
things

119
00:04:50,340 --> 00:04:52,680
we need to be able to get rid of CAS

120
00:04:52,680 --> 00:04:54,120
that we no longer believe to be

121
00:04:54,120 --> 00:04:56,400
trustworthy and we need to be able to do

122
00:04:56,400 --> 00:04:58,380
that without breaking too many websites

123
00:04:58,380 --> 00:04:59,880
that might be using certificates issued

124
00:04:59,880 --> 00:05:01,320
by those cas

125
00:05:01,320 --> 00:05:03,120
we need to be able to introduce new

126
00:05:03,120 --> 00:05:05,160
security requirements and phase out old

127
00:05:05,160 --> 00:05:06,660
ones and we need to be able to deploy

128
00:05:06,660 --> 00:05:08,639
new types of cryptography like

129
00:05:08,639 --> 00:05:10,380
algorithms that are secure against

130
00:05:10,380 --> 00:05:11,820
quantum computers as we heard about

131
00:05:11,820 --> 00:05:13,520
earlier today

132
00:05:13,520 --> 00:05:16,139
unfortunately historically this is a

133
00:05:16,139 --> 00:05:20,419
system that moves very slowly

134
00:05:20,460 --> 00:05:22,320
it was infiltrated at many many levels

135
00:05:22,320 --> 00:05:23,759
of the webpki and I'll give you I'll

136
00:05:23,759 --> 00:05:25,800
give you a couple examples

137
00:05:25,800 --> 00:05:27,960
first of all these root certificates

138
00:05:27,960 --> 00:05:29,820
that clients trust the root CA

139
00:05:29,820 --> 00:05:31,740
certificates those are typically valid

140
00:05:31,740 --> 00:05:34,680
for decades if clients even enforce

141
00:05:34,680 --> 00:05:37,820
expiration on them at all

142
00:05:38,600 --> 00:05:41,699
On a related note historically many

143
00:05:41,699 --> 00:05:45,180
clients in the webpki have slow or

144
00:05:45,180 --> 00:05:47,280
unreliable or completely non-existent

145
00:05:47,280 --> 00:05:49,800
update channels for their trust stores

146
00:05:49,800 --> 00:05:52,380
so taken together this means that when a

147
00:05:52,380 --> 00:05:54,240
root certificate is out there it's out

148
00:05:54,240 --> 00:05:57,600
there it can be very very slow to remove

149
00:05:57,600 --> 00:05:59,699
an old root certificate and distribute

150
00:05:59,699 --> 00:06:02,100
its replacement it can even be as slow

151
00:06:02,100 --> 00:06:04,500
as years just waiting for older devices

152
00:06:04,500 --> 00:06:07,580
to fall out of the market

153
00:06:07,800 --> 00:06:09,780
fortunately over time some of the

154
00:06:09,780 --> 00:06:11,759
sources of slowness in the system are

155
00:06:11,759 --> 00:06:13,440
being eroded the system's starting to

156
00:06:13,440 --> 00:06:15,419
move faster and this is one of the areas

157
00:06:15,419 --> 00:06:18,360
where it is increasingly modern clients

158
00:06:18,360 --> 00:06:20,699
come with Dynamic reliable update

159
00:06:20,699 --> 00:06:22,919
channels for their trust stores

160
00:06:22,919 --> 00:06:25,020
and root programs are starting to

161
00:06:25,020 --> 00:06:27,180
introduce the idea of term limits on the

162
00:06:27,180 --> 00:06:28,680
route CA certificates that they include

163
00:06:28,680 --> 00:06:30,600
in their programs meaning that after

164
00:06:30,600 --> 00:06:32,699
five ten years the certificate

165
00:06:32,699 --> 00:06:34,560
automatically gets removed and needs to

166
00:06:34,560 --> 00:06:37,139
be replaced by a new ca

167
00:06:37,139 --> 00:06:39,780
so together this means that we are

168
00:06:39,780 --> 00:06:42,180
training the ecosystem into being more

169
00:06:42,180 --> 00:06:44,880
agile with respect to Roots once a root

170
00:06:44,880 --> 00:06:46,680
is out there it can be removed more

171
00:06:46,680 --> 00:06:48,600
quickly and new ones can be distributed

172
00:06:48,600 --> 00:06:51,259
more quickly

173
00:06:52,699 --> 00:06:56,520
another source of slowness in the webpki

174
00:06:56,520 --> 00:06:59,759
is the individual server certificates

175
00:06:59,759 --> 00:07:01,440
the maximum lifetime of server

176
00:07:01,440 --> 00:07:03,300
certificates has been coming down over

177
00:07:03,300 --> 00:07:05,940
time in the past few years thanks to

178
00:07:05,940 --> 00:07:07,860
some heroic cross-industry efforts and

179
00:07:07,860 --> 00:07:10,319
it's now capped at 13 months

180
00:07:10,319 --> 00:07:11,460
but

181
00:07:11,460 --> 00:07:13,680
that's still kind of a long time

182
00:07:13,680 --> 00:07:15,620
if you have a 13-month certificate

183
00:07:15,620 --> 00:07:18,120
there's not that much incentive for a

184
00:07:18,120 --> 00:07:19,800
server administrator to have a very

185
00:07:19,800 --> 00:07:21,720
well-oiled well-exercised practice

186
00:07:21,720 --> 00:07:23,759
process for replacing that certificate

187
00:07:23,759 --> 00:07:26,400
either because it's about to expire like

188
00:07:26,400 --> 00:07:27,840
in three hours and the server

189
00:07:27,840 --> 00:07:30,300
administrator just noticed or maybe the

190
00:07:30,300 --> 00:07:31,800
certificate needs to be replaced quickly

191
00:07:31,800 --> 00:07:33,599
for some other reason like the ca that

192
00:07:33,599 --> 00:07:35,460
issued it is distrusted and the

193
00:07:35,460 --> 00:07:36,599
administrator needs to get a new

194
00:07:36,599 --> 00:07:38,880
certificate from a new ca with a

195
00:07:38,880 --> 00:07:40,620
13-month validity replacing a

196
00:07:40,620 --> 00:07:42,539
certificate still tends to be a manual

197
00:07:42,539 --> 00:07:46,440
process and often not a very quick one

198
00:07:46,440 --> 00:07:48,300
okay so

199
00:07:48,300 --> 00:07:50,099
um underlining underlining this point

200
00:07:50,099 --> 00:07:51,840
that certificate issuance is not

201
00:07:51,840 --> 00:07:53,880
designed to be as fast as we need it to

202
00:07:53,880 --> 00:07:54,599
be

203
00:07:54,599 --> 00:07:55,979
it's still technically possible

204
00:07:55,979 --> 00:07:57,840
allowable for a CA to issue a

205
00:07:57,840 --> 00:07:59,280
certificate when they are validating the

206
00:07:59,280 --> 00:08:00,720
domain name to issue that certificate to

207
00:08:00,720 --> 00:08:03,660
do that validation via snail mail

208
00:08:03,660 --> 00:08:06,180
so this doesn't happen that often in

209
00:08:06,180 --> 00:08:07,680
practice to my knowledge but it just

210
00:08:07,680 --> 00:08:09,120
goes to show that the system is not

211
00:08:09,120 --> 00:08:10,740
designed to be as fast as we need it to

212
00:08:10,740 --> 00:08:12,860
be

213
00:08:13,800 --> 00:08:16,259
what we need is for certificate issuance

214
00:08:16,259 --> 00:08:19,139
and renewal to be automated

215
00:08:19,139 --> 00:08:21,479
this is not a novel concept many

216
00:08:21,479 --> 00:08:23,099
hard-working people maybe some of the

217
00:08:23,099 --> 00:08:25,259
people in this room have worked over the

218
00:08:25,259 --> 00:08:27,060
past few years to design and pretty

219
00:08:27,060 --> 00:08:28,979
widely deploy a protocol called Acme

220
00:08:28,979 --> 00:08:30,180
automated certificate management

221
00:08:30,180 --> 00:08:32,219
environment and it had a number of

222
00:08:32,219 --> 00:08:33,958
predecessor protocols also and what

223
00:08:33,958 --> 00:08:36,120
these protocols let you do is have a

224
00:08:36,120 --> 00:08:38,700
server and a CA coordinate automatically

225
00:08:38,700 --> 00:08:41,399
to issue a certificate renew it when

226
00:08:41,399 --> 00:08:43,260
it's about to expire and eventually

227
00:08:43,260 --> 00:08:44,760
maybe even renew it when needed for

228
00:08:44,760 --> 00:08:47,720
other reasons as well

229
00:08:47,940 --> 00:08:49,620
just to give a little more detail about

230
00:08:49,620 --> 00:08:51,060
what this means

231
00:08:51,060 --> 00:08:53,100
it means that instead of having a human

232
00:08:53,100 --> 00:08:55,500
administrator set a calendar reminder to

233
00:08:55,500 --> 00:08:57,360
renew a certificate every year which

234
00:08:57,360 --> 00:08:59,519
kicks off this manual Certificate

235
00:08:59,519 --> 00:09:00,899
request and verification and

236
00:09:00,899 --> 00:09:02,820
installation process

237
00:09:02,820 --> 00:09:04,740
instead there's a little bit of software

238
00:09:04,740 --> 00:09:06,959
running on the server that talks to the

239
00:09:06,959 --> 00:09:08,640
CA and does all of the certificate

240
00:09:08,640 --> 00:09:11,580
issuance and renewal automatically

241
00:09:11,580 --> 00:09:13,740
automated certificate issuance means

242
00:09:13,740 --> 00:09:15,779
that certificate lifetimes can be

243
00:09:15,779 --> 00:09:16,860
shorter

244
00:09:16,860 --> 00:09:18,899
new security requirements can be rolled

245
00:09:18,899 --> 00:09:20,160
out more quickly

246
00:09:20,160 --> 00:09:22,380
and eventually we can even teach servers

247
00:09:22,380 --> 00:09:24,000
to do smarter things like maybe

248
00:09:24,000 --> 00:09:25,740
automatically fail over among different

249
00:09:25,740 --> 00:09:28,140
Cas if one isn't responsive so it's an

250
00:09:28,140 --> 00:09:29,940
improvement for robustness and

251
00:09:29,940 --> 00:09:33,019
reliability also

252
00:09:33,240 --> 00:09:34,980
automated certificate issuance is really

253
00:09:34,980 --> 00:09:37,860
almost a holy grail for the webpki it's

254
00:09:37,860 --> 00:09:39,540
what I would ask if I could ask a genie

255
00:09:39,540 --> 00:09:41,040
for one thing just automate all

256
00:09:41,040 --> 00:09:42,600
certificate issuance and renewal on the

257
00:09:42,600 --> 00:09:43,760
web

258
00:09:43,760 --> 00:09:46,560
however it is a heavy adoption effort it

259
00:09:46,560 --> 00:09:47,940
requires adoption effort from both

260
00:09:47,940 --> 00:09:49,800
servers and cas

261
00:09:49,800 --> 00:09:52,380
so that's a lot of coordination and

262
00:09:52,380 --> 00:09:54,540
deoxification needed and it is a pretty

263
00:09:54,540 --> 00:09:57,180
heavy lift but there is no doubt in my

264
00:09:57,180 --> 00:09:59,279
mind that automating certificate

265
00:09:59,279 --> 00:10:01,560
issuance is the way to a more agile web

266
00:10:01,560 --> 00:10:04,219
pki

267
00:10:06,800 --> 00:10:09,600
at the beginning of the talk I alluded

268
00:10:09,600 --> 00:10:12,720
to this list of trusted Cas that clients

269
00:10:12,720 --> 00:10:14,160
put in their trust store that are the

270
00:10:14,160 --> 00:10:16,980
roots of trust for https connections

271
00:10:16,980 --> 00:10:18,480
I now want to look at this attack

272
00:10:18,480 --> 00:10:22,519
surface a little bit more closely

273
00:10:23,220 --> 00:10:25,320
somewhat distressingly

274
00:10:25,320 --> 00:10:28,860
clients typically trust not a few but

275
00:10:28,860 --> 00:10:30,660
dozens or even hundreds of organizations

276
00:10:30,660 --> 00:10:33,600
to issue certificates this screenshot is

277
00:10:33,600 --> 00:10:35,339
showing just the beginning just the A's

278
00:10:35,339 --> 00:10:37,080
and B's of the cas that are trusted by

279
00:10:37,080 --> 00:10:39,120
default on my Mac laptop and I want to

280
00:10:39,120 --> 00:10:41,760
emphasize that if a single one of these

281
00:10:41,760 --> 00:10:44,040
organizations is compromised they can

282
00:10:44,040 --> 00:10:46,680
issue certificates for any website so

283
00:10:46,680 --> 00:10:49,200
this is a pretty big attack surface

284
00:10:49,200 --> 00:10:51,480
and a very reasonable question you might

285
00:10:51,480 --> 00:10:53,640
ask is why do we trust these

286
00:10:53,640 --> 00:10:55,680
organizations by what process do we deem

287
00:10:55,680 --> 00:10:57,600
them trustworthy

288
00:10:57,600 --> 00:10:59,880
then you might be tempted to wave your

289
00:10:59,880 --> 00:11:02,279
hands and say well we audit them

290
00:11:02,279 --> 00:11:05,940
and it's true Cas are audited regularly

291
00:11:05,940 --> 00:11:08,100
however when you think of audits you

292
00:11:08,100 --> 00:11:09,860
might think of some sort of very

293
00:11:09,860 --> 00:11:12,600
diligent technical operation where a

294
00:11:12,600 --> 00:11:14,399
very skilled auditor is looking really

295
00:11:14,399 --> 00:11:17,220
hard for Flaws in the ca's operations

296
00:11:17,220 --> 00:11:19,380
and that's not usually what CA audits

297
00:11:19,380 --> 00:11:20,279
look like

298
00:11:20,279 --> 00:11:22,440
in fact it turns out that CA audits are

299
00:11:22,440 --> 00:11:24,240
not actually particularly rich source of

300
00:11:24,240 --> 00:11:26,820
information for root programs looking to

301
00:11:26,820 --> 00:11:29,660
make trust decisions

302
00:11:29,760 --> 00:11:31,260
there are a variety of reasons for this

303
00:11:31,260 --> 00:11:33,360
one is that the ca chooses their own

304
00:11:33,360 --> 00:11:35,760
auditor so it's not necessarily in the

305
00:11:35,760 --> 00:11:38,279
ca's interest to choose the most skilled

306
00:11:38,279 --> 00:11:41,399
or diligent auditor

307
00:11:41,399 --> 00:11:43,140
and I also want to mention that when I

308
00:11:43,140 --> 00:11:45,180
say auditor auditing firms you might be

309
00:11:45,180 --> 00:11:47,100
thinking of like a pen test

310
00:11:47,100 --> 00:11:48,600
shop you might be thinking of a security

311
00:11:48,600 --> 00:11:49,560
shop

312
00:11:49,560 --> 00:11:51,000
that's not what we're talking about here

313
00:11:51,000 --> 00:11:53,100
these are more like Financial auditing

314
00:11:53,100 --> 00:11:55,140
firms so not always the most technically

315
00:11:55,140 --> 00:11:57,360
skilled organizations

316
00:11:57,360 --> 00:12:00,240
then the output from the audit is not

317
00:12:00,240 --> 00:12:01,860
usually a long detailed list of findings

318
00:12:01,860 --> 00:12:03,480
it's usually something more like a few

319
00:12:03,480 --> 00:12:05,640
pages mostly a lot of boilerplate saying

320
00:12:05,640 --> 00:12:07,920
that everything is fine

321
00:12:07,920 --> 00:12:10,260
and finally the audit quality varies

322
00:12:10,260 --> 00:12:12,839
pretty dramatically It's Not Unusual to

323
00:12:12,839 --> 00:12:15,240
have uncovered major major security

324
00:12:15,240 --> 00:12:17,339
flaws in a ca's operations that weren't

325
00:12:17,339 --> 00:12:20,459
touched by audits at all

326
00:12:20,459 --> 00:12:22,620
so as much as we'd like to be able to

327
00:12:22,620 --> 00:12:24,600
assess CA trustworthiness completely

328
00:12:24,600 --> 00:12:26,519
ahead of time it's not really possible

329
00:12:26,519 --> 00:12:28,920
to do so fully

330
00:12:28,920 --> 00:12:30,839
and if we can't assess trustworthiness

331
00:12:30,839 --> 00:12:32,820
completely ahead of time the next best

332
00:12:32,820 --> 00:12:35,040
thing is to monitor as we go

333
00:12:35,040 --> 00:12:37,019
so along these lines a big recent

334
00:12:37,019 --> 00:12:39,000
Improvement to the certificate ecosystem

335
00:12:39,000 --> 00:12:40,500
that you may have heard about is

336
00:12:40,500 --> 00:12:42,959
certificate transparency or CT

337
00:12:42,959 --> 00:12:45,180
which is basically a transparency layer

338
00:12:45,180 --> 00:12:47,339
bolted on top of the webpki that

339
00:12:47,339 --> 00:12:50,160
requires that all certificates be

340
00:12:50,160 --> 00:12:52,079
published in public logs in a

341
00:12:52,079 --> 00:12:55,079
cryptographically verifiable way

342
00:12:55,079 --> 00:12:57,300
this has been a big Improvement for the

343
00:12:57,300 --> 00:12:59,279
certificate ecosystem not just because

344
00:12:59,279 --> 00:13:01,200
it allows domain owners to sort of

345
00:13:01,200 --> 00:13:03,180
directly discover the certificates that

346
00:13:03,180 --> 00:13:04,680
are issued for their domains which could

347
00:13:04,680 --> 00:13:06,660
include malicious or unauthorized

348
00:13:06,660 --> 00:13:07,800
certificates

349
00:13:07,800 --> 00:13:09,839
it also allows researchers and root

350
00:13:09,839 --> 00:13:11,339
program owners to sort of monitor

351
00:13:11,339 --> 00:13:13,560
holistically and discover sub-optimal

352
00:13:13,560 --> 00:13:15,480
patterns of certificate issuance and

353
00:13:15,480 --> 00:13:16,980
catalyze improvements in there for

354
00:13:16,980 --> 00:13:19,620
example in their policies

355
00:13:19,620 --> 00:13:21,720
so certificate transparency doesn't

356
00:13:21,720 --> 00:13:24,420
prevent bad behavior but it allows us to

357
00:13:24,420 --> 00:13:26,399
discover and rectify it often in

358
00:13:26,399 --> 00:13:29,240
systematic ways

359
00:13:30,060 --> 00:13:31,620
and by the way when we're talking about

360
00:13:31,620 --> 00:13:34,139
the security of the webpki

361
00:13:34,139 --> 00:13:36,240
it's not just the trustworthiness of the

362
00:13:36,240 --> 00:13:38,220
cas that we have to worry about

363
00:13:38,220 --> 00:13:40,500
let's let's think about what is a ca's

364
00:13:40,500 --> 00:13:42,480
fundamental job if it is behaving

365
00:13:42,480 --> 00:13:44,760
perfectly honestly not compromised not

366
00:13:44,760 --> 00:13:46,740
malicious behaving perfectly according

367
00:13:46,740 --> 00:13:48,540
as specified

368
00:13:48,540 --> 00:13:50,579
its fundamental job is to receive a

369
00:13:50,579 --> 00:13:52,260
Certificate request and validate control

370
00:13:52,260 --> 00:13:53,940
of the domain name associated with that

371
00:13:53,940 --> 00:13:57,120
request and then issue the certificate

372
00:13:57,120 --> 00:13:59,040
typically in a good case the way that

373
00:13:59,040 --> 00:14:01,019
the ca does this is that they issue a

374
00:14:01,019 --> 00:14:02,519
challenge value to the certificate

375
00:14:02,519 --> 00:14:04,680
requester who then serves it at a

376
00:14:04,680 --> 00:14:07,260
particular URL under the claimed domain

377
00:14:07,260 --> 00:14:09,600
and the ca goes and issues a request to

378
00:14:09,600 --> 00:14:10,740
that URL

379
00:14:10,740 --> 00:14:12,420
and checks that the challenge value is

380
00:14:12,420 --> 00:14:14,940
present as expected so that's the only

381
00:14:14,940 --> 00:14:16,980
the legitimate controller of the domain

382
00:14:16,980 --> 00:14:18,300
should be able to serve that challenge

383
00:14:18,300 --> 00:14:21,420
value with that URL

384
00:14:21,420 --> 00:14:24,120
good at first glance but it's actually

385
00:14:24,120 --> 00:14:25,920
kind of circular

386
00:14:25,920 --> 00:14:27,959
if you look at it more closely because

387
00:14:27,959 --> 00:14:29,579
the ca is making a request to

388
00:14:29,579 --> 00:14:32,040
example.com but the ca is the one in

389
00:14:32,040 --> 00:14:33,360
charge of authenticating request to

390
00:14:33,360 --> 00:14:36,600
example.com so how does this work

391
00:14:36,600 --> 00:14:38,880
um well the answer is it doesn't really

392
00:14:38,880 --> 00:14:42,600
if you can control the DNS response that

393
00:14:42,600 --> 00:14:45,899
the ca gets you can point the the ca at

394
00:14:45,899 --> 00:14:47,459
the attacker's servers instead of those

395
00:14:47,459 --> 00:14:50,519
legitimate ones or maybe an attacker can

396
00:14:50,519 --> 00:14:52,980
manipulate bgp to reroute traffic to

397
00:14:52,980 --> 00:14:54,360
their own servers

398
00:14:54,360 --> 00:14:56,820
these are examples of very well known

399
00:14:56,820 --> 00:14:58,860
not even particularly sophisticated

400
00:14:58,860 --> 00:15:01,380
attacks that can be used to subvert the

401
00:15:01,380 --> 00:15:03,720
security of the webpki even when the cas

402
00:15:03,720 --> 00:15:05,820
are behaving exactly as they are

403
00:15:05,820 --> 00:15:07,980
supposed to

404
00:15:07,980 --> 00:15:10,079
some people even go so far as to call

405
00:15:10,079 --> 00:15:12,120
this a delegated Trust on first use

406
00:15:12,120 --> 00:15:14,519
model meaning that the security property

407
00:15:14,519 --> 00:15:16,680
is really trust on first use it's just

408
00:15:16,680 --> 00:15:18,000
that we're sort of delegating the first

409
00:15:18,000 --> 00:15:19,860
use to the ca to do it on behalf of

410
00:15:19,860 --> 00:15:22,019
browsers the point being not the most

411
00:15:22,019 --> 00:15:25,040
impressive security model

412
00:15:25,380 --> 00:15:26,760
fortunately there are some improvements

413
00:15:26,760 --> 00:15:29,399
to be had recently some Cas have started

414
00:15:29,399 --> 00:15:31,920
doing this this domain validation from

415
00:15:31,920 --> 00:15:34,320
multiple Global perspectives and that

416
00:15:34,320 --> 00:15:35,820
makes the attack it means the attacker

417
00:15:35,820 --> 00:15:37,380
needs to be more well resourced more

418
00:15:37,380 --> 00:15:39,240
sophisticated to pull off one of these

419
00:15:39,240 --> 00:15:40,199
attacks

420
00:15:40,199 --> 00:15:42,660
there's also rapidly improving adoption

421
00:15:42,660 --> 00:15:45,420
of a technology called rpki which is

422
00:15:45,420 --> 00:15:48,660
used to sign and validate bgp routes and

423
00:15:48,660 --> 00:15:52,519
can help prevent bgp hijacking

424
00:15:52,980 --> 00:15:55,160
certificate transparency rpki

425
00:15:55,160 --> 00:15:57,060
multi-perspective domain validation all

426
00:15:57,060 --> 00:15:58,800
these security improvements

427
00:15:58,800 --> 00:16:01,620
can take the long the webpki a long way

428
00:16:01,620 --> 00:16:03,600
from where it started

429
00:16:03,600 --> 00:16:05,399
however I want to note once again it's

430
00:16:05,399 --> 00:16:07,560
not just security that is important it's

431
00:16:07,560 --> 00:16:08,639
agility

432
00:16:08,639 --> 00:16:10,560
because agility Is How We Roll Out

433
00:16:10,560 --> 00:16:12,300
Security improvements like this we can't

434
00:16:12,300 --> 00:16:14,339
have security improvements if the if the

435
00:16:14,339 --> 00:16:18,860
web pki just stays ancient and ossified

436
00:16:21,019 --> 00:16:23,760
agility and security difficult

437
00:16:23,760 --> 00:16:26,220
properties to achieve in a system that

438
00:16:26,220 --> 00:16:28,560
is nearly fractally complex

439
00:16:28,560 --> 00:16:30,360
everywhere you look in the webpki it's

440
00:16:30,360 --> 00:16:32,519
complexity upon complexity the

441
00:16:32,519 --> 00:16:35,699
certificate format x509 is a constant

442
00:16:35,699 --> 00:16:36,899
source of parsing bugs and

443
00:16:36,899 --> 00:16:39,540
misimplemented validation logic

444
00:16:39,540 --> 00:16:41,639
standing up a new ca is this incredibly

445
00:16:41,639 --> 00:16:43,800
complicated multi-year multi-million

446
00:16:43,800 --> 00:16:45,899
dollar endeavor

447
00:16:45,899 --> 00:16:47,699
on the client just the algorithms that

448
00:16:47,699 --> 00:16:49,199
are used to validate our certificate are

449
00:16:49,199 --> 00:16:51,899
complex graph algorithms so these are

450
00:16:51,899 --> 00:16:54,060
all sharp edges that suck up a lot of

451
00:16:54,060 --> 00:16:56,459
time and energy and attention and these

452
00:16:56,459 --> 00:16:59,040
sharp edges divert resources from

453
00:16:59,040 --> 00:17:02,880
improving security for users

454
00:17:02,880 --> 00:17:06,119
let's look at one example revocation

455
00:17:06,119 --> 00:17:07,799
this is a functionality that it seems

456
00:17:07,799 --> 00:17:10,020
quite reasonable to want in a pki

457
00:17:10,020 --> 00:17:11,939
if a certificate is no longer valid

458
00:17:11,939 --> 00:17:14,099
maybe the corresponding key was

459
00:17:14,099 --> 00:17:15,959
compromised you want to be able to

460
00:17:15,959 --> 00:17:18,059
inform clients of that in some way so

461
00:17:18,059 --> 00:17:20,760
that they no longer accept a certificate

462
00:17:20,760 --> 00:17:23,400
it turns out that in the webpki

463
00:17:23,400 --> 00:17:26,179
revocation is just this total mess

464
00:17:26,179 --> 00:17:28,620
they're all these half-baked Solutions

465
00:17:28,620 --> 00:17:30,299
floating around out there none of them

466
00:17:30,299 --> 00:17:32,940
actually solves the problem and it just

467
00:17:32,940 --> 00:17:34,980
adds enormous complexity for very little

468
00:17:34,980 --> 00:17:36,660
gain

469
00:17:36,660 --> 00:17:39,000
to start with depending on how you count

470
00:17:39,000 --> 00:17:41,760
there are maybe three standardized ways

471
00:17:41,760 --> 00:17:44,520
to do revocation in the webpki

472
00:17:44,520 --> 00:17:47,160
Cas and browsers Implement some of them

473
00:17:47,160 --> 00:17:49,320
but not really directly not as as

474
00:17:49,320 --> 00:17:51,299
they're supposed to and none of them

475
00:17:51,299 --> 00:17:53,220
none of these standardized mechanisms is

476
00:17:53,220 --> 00:17:55,080
actually in wide use on the web today to

477
00:17:55,080 --> 00:17:57,480
actually solve the revocation problem

478
00:17:57,480 --> 00:17:59,880
on top of that browsers many modern

479
00:17:59,880 --> 00:18:01,679
browsers have their own browser

480
00:18:01,679 --> 00:18:03,720
proprietary custom mechanisms for

481
00:18:03,720 --> 00:18:04,860
revocation

482
00:18:04,860 --> 00:18:06,720
and meanwhile Cas are kind of jumping

483
00:18:06,720 --> 00:18:08,160
through hoops to implement all these

484
00:18:08,160 --> 00:18:10,020
revocation systems often with Arcane

485
00:18:10,020 --> 00:18:12,539
requirements for example up until late

486
00:18:12,539 --> 00:18:14,460
last year Cas were required to ensure

487
00:18:14,460 --> 00:18:15,660
that certain types of certificate

488
00:18:15,660 --> 00:18:17,820
revocations could be downloaded in under

489
00:18:17,820 --> 00:18:19,559
three seconds on an antelope telephone

490
00:18:19,559 --> 00:18:22,740
line so not exactly reflective of the

491
00:18:22,740 --> 00:18:25,100
modern web

492
00:18:25,860 --> 00:18:28,440
and also note Cas are required to

493
00:18:28,440 --> 00:18:30,360
disclose their operational and security

494
00:18:30,360 --> 00:18:32,640
incidents and last year about a third of

495
00:18:32,640 --> 00:18:34,799
them a third of the disclosed incidents

496
00:18:34,799 --> 00:18:36,539
were related to these revocation

497
00:18:36,539 --> 00:18:38,220
mechanisms in a way so that tells me

498
00:18:38,220 --> 00:18:39,360
that these are systems that are

499
00:18:39,360 --> 00:18:41,220
expensive to build expensive to run

500
00:18:41,220 --> 00:18:44,039
properly and for all that we're not even

501
00:18:44,039 --> 00:18:46,020
getting much client security value out

502
00:18:46,020 --> 00:18:46,980
of them

503
00:18:46,980 --> 00:18:49,679
so again I want to emphasize clients web

504
00:18:49,679 --> 00:18:52,140
browsers are not typically directly

505
00:18:52,140 --> 00:18:54,179
using these certificate revocation

506
00:18:54,179 --> 00:18:57,299
mechanisms that Cas run when they do use

507
00:18:57,299 --> 00:18:59,640
them they often do so in a soft fail way

508
00:18:59,640 --> 00:19:01,860
which brings pretty minimal security

509
00:19:01,860 --> 00:19:05,220
value to users so all these half-baked

510
00:19:05,220 --> 00:19:08,100
Solutions all kind of half deployed an

511
00:19:08,100 --> 00:19:10,200
awful lot of accumulated craft and

512
00:19:10,200 --> 00:19:13,500
complexity for very little gain

513
00:19:13,500 --> 00:19:16,380
so what can we do about it well first of

514
00:19:16,380 --> 00:19:18,059
all we can obviously remove some

515
00:19:18,059 --> 00:19:20,039
outdated requirements like this dial-up

516
00:19:20,039 --> 00:19:21,960
modem requirement that I mentioned a

517
00:19:21,960 --> 00:19:24,360
minute ago maybe more controversially

518
00:19:24,360 --> 00:19:25,679
more dramatically I would question

519
00:19:25,679 --> 00:19:27,660
whether Cas should be required to run

520
00:19:27,660 --> 00:19:30,240
these revocation systems at all if they

521
00:19:30,240 --> 00:19:32,100
aren't actually being used by web

522
00:19:32,100 --> 00:19:35,940
browsers who are setting the rules and

523
00:19:35,940 --> 00:19:38,340
uh and if they are being used it's not

524
00:19:38,340 --> 00:19:39,840
in a way that's bringing security value

525
00:19:39,840 --> 00:19:41,520
to users

526
00:19:41,520 --> 00:19:44,220
but you know we still need a way to deal

527
00:19:44,220 --> 00:19:45,660
with certificates that need to be

528
00:19:45,660 --> 00:19:47,580
revoked we still need to meet the

529
00:19:47,580 --> 00:19:50,220
underlying actual security need and here

530
00:19:50,220 --> 00:19:52,140
again I would come back to Automation

531
00:19:52,140 --> 00:19:54,179
and Agility

532
00:19:54,179 --> 00:19:57,059
imagine that all certificate issuance

533
00:19:57,059 --> 00:19:59,820
and renewal on the web were automated in

534
00:19:59,820 --> 00:20:02,160
that world we could think about bringing

535
00:20:02,160 --> 00:20:04,679
down maximum certificate lifetime really

536
00:20:04,679 --> 00:20:07,799
dramatically maybe even as low as seven

537
00:20:07,799 --> 00:20:09,600
ten days

538
00:20:09,600 --> 00:20:12,299
in that World by the time you find out a

539
00:20:12,299 --> 00:20:14,460
certificate needs to be revoked by the

540
00:20:14,460 --> 00:20:15,600
time you would expect that information

541
00:20:15,600 --> 00:20:18,059
to be propagated to clients the

542
00:20:18,059 --> 00:20:19,860
certificate May well have expired

543
00:20:19,860 --> 00:20:22,020
naturally anyway

544
00:20:22,020 --> 00:20:24,360
in this world we might still need some

545
00:20:24,360 --> 00:20:26,760
form of revocation for exceptional cases

546
00:20:26,760 --> 00:20:29,400
but the problem becomes dramatically

547
00:20:29,400 --> 00:20:30,600
simpler

548
00:20:30,600 --> 00:20:32,460
when we when we expect it only to be

549
00:20:32,460 --> 00:20:34,740
used very rarely which removes some

550
00:20:34,740 --> 00:20:36,120
privacy and performance and security

551
00:20:36,120 --> 00:20:38,780
constraints

552
00:20:39,840 --> 00:20:42,840
revocation is a particularly egregious

553
00:20:42,840 --> 00:20:45,059
example of fractal complexity in the

554
00:20:45,059 --> 00:20:47,280
webpki we have bad implementations

555
00:20:47,280 --> 00:20:50,160
owners requirements and very very little

556
00:20:50,160 --> 00:20:52,380
actual security value

557
00:20:52,380 --> 00:20:54,240
when I look at this and other examples

558
00:20:54,240 --> 00:20:56,940
like the complex certificate format the

559
00:20:56,940 --> 00:20:59,460
complex graph validation algorithms I

560
00:20:59,460 --> 00:21:00,780
think the theme is that we should be

561
00:21:00,780 --> 00:21:03,480
trying to make it so that webpki clients

562
00:21:03,480 --> 00:21:06,600
and CA ncas do a small number of things

563
00:21:06,600 --> 00:21:08,880
do them well and do them for a good

564
00:21:08,880 --> 00:21:11,120
reason

565
00:21:11,780 --> 00:21:14,520
agility security simplicity

566
00:21:14,520 --> 00:21:16,620
not always words that one would have

567
00:21:16,620 --> 00:21:18,539
associated with the webpki

568
00:21:18,539 --> 00:21:21,000
but I do think with some dedication and

569
00:21:21,000 --> 00:21:23,340
collaboration they can be

570
00:21:23,340 --> 00:21:25,919
now that https adoption is so ubiquitous

571
00:21:25,919 --> 00:21:29,100
it might not be realistic to throw away

572
00:21:29,100 --> 00:21:31,860
the system and start over with a new one

573
00:21:31,860 --> 00:21:33,900
but there is a lot a long way we can go

574
00:21:33,900 --> 00:21:35,580
with incremental improvements to the

575
00:21:35,580 --> 00:21:38,159
system that we have we can remove Legacy

576
00:21:38,159 --> 00:21:40,559
requirements we can replace manual

577
00:21:40,559 --> 00:21:43,260
processes with automated ones

578
00:21:43,260 --> 00:21:45,780
we can instead of relying on opaque and

579
00:21:45,780 --> 00:21:47,760
cursory security assessments we can

580
00:21:47,760 --> 00:21:49,679
supplement those with transparency and

581
00:21:49,679 --> 00:21:51,539
Technical enforcement

582
00:21:51,539 --> 00:21:54,480
none of this is easy work but I do think

583
00:21:54,480 --> 00:21:55,980
it will help contribute to a healthier

584
00:21:55,980 --> 00:21:58,500
webpki which is easier to reason about

585
00:21:58,500 --> 00:22:01,320
easier to secure and that's what we need

586
00:22:01,320 --> 00:22:03,720
for a system that Society relies on so

587
00:22:03,720 --> 00:22:06,179
fundamentally today

588
00:22:06,179 --> 00:22:08,820
thank you feel free to contact me on any

589
00:22:08,820 --> 00:22:11,280
of these mediums and I'm happy to take

590
00:22:11,280 --> 00:22:13,640
any questions thanks for listening

591
00:22:13,640 --> 00:22:17,459
[Applause]

