1
00:00:01,199 --> 00:00:04,199
foreign

2
00:00:20,300 --> 00:00:23,699
me and my glorious mustache welcomes you

3
00:00:23,699 --> 00:00:25,880
here

4
00:00:26,939 --> 00:00:30,359
so um so what we'll be doing today uh

5
00:00:30,359 --> 00:00:32,880
here is trying to understand how we can

6
00:00:32,880 --> 00:00:36,059
do static analysis uh this is a very

7
00:00:36,059 --> 00:00:38,520
nerdy topic I can understand so I

8
00:00:38,520 --> 00:00:40,020
wouldn't mind if you sleep through half

9
00:00:40,020 --> 00:00:41,660
of it but it's okay

10
00:00:41,660 --> 00:00:44,460
and we'll be trying to implement it for

11
00:00:44,460 --> 00:00:45,960
privacy I mean this has not been done

12
00:00:45,960 --> 00:00:48,239
before it's a very big question uh we'll

13
00:00:48,239 --> 00:00:50,039
try to do this

14
00:00:50,039 --> 00:00:53,820
so uh I am so chakra I spend a lot of

15
00:00:53,820 --> 00:00:56,039
time analyzing computers and code have

16
00:00:56,039 --> 00:00:58,920
been doing it for quite some time

17
00:00:58,920 --> 00:01:00,960
I did my PhD in computer engineering

18
00:01:00,960 --> 00:01:03,180
from Polytechnic Montreal and

19
00:01:03,180 --> 00:01:05,640
I write poems in Click film photos so if

20
00:01:05,640 --> 00:01:07,140
you like film photos you should come to

21
00:01:07,140 --> 00:01:08,640
me

22
00:01:08,640 --> 00:01:10,260
um yeah you can know more about me here

23
00:01:10,260 --> 00:01:12,960
so let's just begin so privacy in modern

24
00:01:12,960 --> 00:01:16,439
times is actually living like this

25
00:01:16,439 --> 00:01:19,320
okay you have your apps and you have

26
00:01:19,320 --> 00:01:21,240
just two choices you know either you

27
00:01:21,240 --> 00:01:23,759
click yes I agree to whatever and you

28
00:01:23,759 --> 00:01:25,740
sign away your soul or you should just

29
00:01:25,740 --> 00:01:27,600
burn your money you know and go to the

30
00:01:27,600 --> 00:01:29,640
Himalayas and that's about it okay so

31
00:01:29,640 --> 00:01:32,700
there's no middle ground in between and

32
00:01:32,700 --> 00:01:34,619
um I believe there is something that can

33
00:01:34,619 --> 00:01:37,200
be done if we Empower people who are

34
00:01:37,200 --> 00:01:39,479
actually building these things we could

35
00:01:39,479 --> 00:01:42,060
actually come up with Solutions where

36
00:01:42,060 --> 00:01:44,460
all the different personas that are

37
00:01:44,460 --> 00:01:46,200
supposed to provide privacy they are all

38
00:01:46,200 --> 00:01:48,840
together and understand so let's try to

39
00:01:48,840 --> 00:01:49,860
do that

40
00:01:49,860 --> 00:01:52,439
this is a conundrum which I feel is is

41
00:01:52,439 --> 00:01:54,600
there so we are looking at what's

42
00:01:54,600 --> 00:01:56,040
happening to my data from the

43
00:01:56,040 --> 00:01:58,799
perspective of where is where it is

44
00:01:58,799 --> 00:02:01,200
stored you know or or trying to analyze

45
00:02:01,200 --> 00:02:04,020
it after the fact actually so uh but I

46
00:02:04,020 --> 00:02:06,719
believe that data is produced by code so

47
00:02:06,719 --> 00:02:08,098
it's kind of it's kind of like a tab

48
00:02:08,098 --> 00:02:09,780
that is turned on and water is Flowing

49
00:02:09,780 --> 00:02:12,000
everywhere and on the other side our

50
00:02:12,000 --> 00:02:13,980
privacy operation folks and they have a

51
00:02:13,980 --> 00:02:15,239
broom and they're trying to broom the

52
00:02:15,239 --> 00:02:18,239
water in okay and uh it's it's really

53
00:02:18,239 --> 00:02:20,640
true you know we can actually I can give

54
00:02:20,640 --> 00:02:22,800
you a real example here so this is a

55
00:02:22,800 --> 00:02:24,360
code from an open source app called

56
00:02:24,360 --> 00:02:27,540
shopizer and there is a small statement

57
00:02:27,540 --> 00:02:29,879
below which is like log dot info and

58
00:02:29,879 --> 00:02:31,560
there is username that is being logged

59
00:02:31,560 --> 00:02:33,720
so so it's okay you know developers

60
00:02:33,720 --> 00:02:35,940
don't mind having a few logs here and

61
00:02:35,940 --> 00:02:37,819
there but what happens is that imagine

62
00:02:37,819 --> 00:02:40,980
500 people are using this installation

63
00:02:40,980 --> 00:02:43,560
somewhere uh at a given piece of time

64
00:02:43,560 --> 00:02:45,480
and like they are going to generate a

65
00:02:45,480 --> 00:02:47,700
lot of data and this data is going to go

66
00:02:47,700 --> 00:02:50,819
in multiple databases and then and one

67
00:02:50,819 --> 00:02:52,319
of them will be running a log scraping

68
00:02:52,319 --> 00:02:54,300
service and then there's a human sitting

69
00:02:54,300 --> 00:02:55,860
behind in operations you know never

70
00:02:55,860 --> 00:02:57,660
caring about what's there and they see

71
00:02:57,660 --> 00:02:59,400
these logs in front of them they're not

72
00:02:59,400 --> 00:03:00,959
supposed to see them but they just see

73
00:03:00,959 --> 00:03:04,440
them and uh so we can you know the

74
00:03:04,440 --> 00:03:05,760
Privacy folks will try to understand

75
00:03:05,760 --> 00:03:07,800
okay okay let me look at the DBS okay

76
00:03:07,800 --> 00:03:09,480
now that's not working let's look at

77
00:03:09,480 --> 00:03:11,220
what services are running are there

78
00:03:11,220 --> 00:03:13,080
scraping Services here is there any

79
00:03:13,080 --> 00:03:14,760
third party where they are putting this

80
00:03:14,760 --> 00:03:17,099
data in like send grid and you know

81
00:03:17,099 --> 00:03:20,000
Sentry you know things like that so

82
00:03:20,000 --> 00:03:23,099
uh but the problem actually can be

83
00:03:23,099 --> 00:03:25,440
solved by just one person who exactly

84
00:03:25,440 --> 00:03:27,659
knows where where I'm producing this

85
00:03:27,659 --> 00:03:29,879
data this data is being produced here so

86
00:03:29,879 --> 00:03:31,379
there's an opportunity here I believe

87
00:03:31,379 --> 00:03:34,860
that where we can empower the folks who

88
00:03:34,860 --> 00:03:37,140
are building this to actually solve this

89
00:03:37,140 --> 00:03:39,360
so so we want to build privacy tools

90
00:03:39,360 --> 00:03:42,180
which are uh relevant for developers and

91
00:03:42,180 --> 00:03:44,040
engineers

92
00:03:44,040 --> 00:03:46,739
okay so but how do we do this so there's

93
00:03:46,739 --> 00:03:48,780
this thing called Static analysis and

94
00:03:48,780 --> 00:03:50,879
you know it's it's not mlai or anything

95
00:03:50,879 --> 00:03:53,220
it has been there for a long time uh

96
00:03:53,220 --> 00:03:56,099
this is how much of your uh you know

97
00:03:56,099 --> 00:03:58,260
code that has been executing on

98
00:03:58,260 --> 00:04:00,180
mainframes and all these machines have

99
00:04:00,180 --> 00:04:02,220
been working you know for a long time so

100
00:04:02,220 --> 00:04:04,799
we we understand what this is and and we

101
00:04:04,799 --> 00:04:07,500
try to implement it for privacy

102
00:04:07,500 --> 00:04:10,140
okay so what is static analysis it's

103
00:04:10,140 --> 00:04:11,939
simply analyzing computer programs

104
00:04:11,939 --> 00:04:14,280
without executing them so that you can

105
00:04:14,280 --> 00:04:16,139
find the bugs when they will actually

106
00:04:16,139 --> 00:04:18,600
get executed this magic no you can you

107
00:04:18,600 --> 00:04:19,858
can actually find out what's going to

108
00:04:19,858 --> 00:04:22,560
happen before it happens so some

109
00:04:22,560 --> 00:04:24,120
important Concepts that we need to know

110
00:04:24,120 --> 00:04:25,860
uh there are many more but you know

111
00:04:25,860 --> 00:04:27,180
these are the important ones like

112
00:04:27,180 --> 00:04:29,759
sources sayings stains and data flows so

113
00:04:29,759 --> 00:04:32,280
sources important places where data can

114
00:04:32,280 --> 00:04:34,620
start from and then syncs are somewhere

115
00:04:34,620 --> 00:04:37,500
it can go and taint is how it is being

116
00:04:37,500 --> 00:04:39,780
tracked throughout and data flow is just

117
00:04:39,780 --> 00:04:41,460
everything you know trying to find

118
00:04:41,460 --> 00:04:43,320
whether it's data went from here and

119
00:04:43,320 --> 00:04:45,419
humans actually work like that so if I

120
00:04:45,419 --> 00:04:47,460
give you the same piece of code and

121
00:04:47,460 --> 00:04:49,440
there is a PIR data to log you can just

122
00:04:49,440 --> 00:04:51,060
instantly see it and you see that

123
00:04:51,060 --> 00:04:52,500
there's some problem with it there is a

124
00:04:52,500 --> 00:04:55,080
Pia data which is being collected and it

125
00:04:55,080 --> 00:04:57,360
is eventually going in a lot in your

126
00:04:57,360 --> 00:04:59,639
mind in that one second what you did is

127
00:04:59,639 --> 00:05:01,740
you created this big map you know you

128
00:05:01,740 --> 00:05:03,660
were like okay this is an HTTP variable

129
00:05:03,660 --> 00:05:06,419
maybe in my app this would be the

130
00:05:06,419 --> 00:05:08,520
Handler and okay need to start tracking

131
00:05:08,520 --> 00:05:10,139
it so you make a note of it you say okay

132
00:05:10,139 --> 00:05:12,000
this is my source and then you start

133
00:05:12,000 --> 00:05:13,979
tracking it and then you see okay this

134
00:05:13,979 --> 00:05:16,440
info looks suspicious then you try to

135
00:05:16,440 --> 00:05:18,419
understand where it is coming from oh

136
00:05:18,419 --> 00:05:20,639
this is of type logger okay it's coming

137
00:05:20,639 --> 00:05:22,979
from this log variable of type logger

138
00:05:22,979 --> 00:05:25,199
this is Apache log 4G I need to really

139
00:05:25,199 --> 00:05:27,600
track this and using this in your brain

140
00:05:27,600 --> 00:05:29,699
you can actually answer questions like

141
00:05:29,699 --> 00:05:32,280
this final flow from a variable which is

142
00:05:32,280 --> 00:05:34,620
so which is from piig allocation Source

143
00:05:34,620 --> 00:05:37,080
dual log sync function which is of type

144
00:05:37,080 --> 00:05:40,440
package Apache log4j so you can you can

145
00:05:40,440 --> 00:05:42,120
literally you know answer these

146
00:05:42,120 --> 00:05:44,940
questions in plain English but the code

147
00:05:44,940 --> 00:05:47,100
is complex but you're able to do this

148
00:05:47,100 --> 00:05:49,020
we want machines to do the same thing

149
00:05:49,020 --> 00:05:52,740
that that's kind of like the thing

150
00:05:52,740 --> 00:05:54,960
so why should we do static analysis so I

151
00:05:54,960 --> 00:05:57,000
believe code is the true container and

152
00:05:57,000 --> 00:05:58,860
producer of data that's that's where the

153
00:05:58,860 --> 00:06:00,419
real action is happening it gets

154
00:06:00,419 --> 00:06:02,280
produced goes somewhere else when it's

155
00:06:02,280 --> 00:06:04,199
getting executed but the producer is

156
00:06:04,199 --> 00:06:06,120
right there itself and when it's not

157
00:06:06,120 --> 00:06:07,919
being executed you can actually reason

158
00:06:07,919 --> 00:06:10,620
about it very calmly you know but when

159
00:06:10,620 --> 00:06:12,479
it gets executed and then you're trying

160
00:06:12,479 --> 00:06:13,979
to understand what's going on it's like

161
00:06:13,979 --> 00:06:15,360
you're listening to death metal you know

162
00:06:15,360 --> 00:06:16,979
going in a war trying to understand okay

163
00:06:16,979 --> 00:06:19,320
what's what just happened here but when

164
00:06:19,320 --> 00:06:21,840
it's not getting executed it's like you

165
00:06:21,840 --> 00:06:24,300
can listen to classical music and you

166
00:06:24,300 --> 00:06:26,520
know look at paintings of Alps or

167
00:06:26,520 --> 00:06:27,660
whatever

168
00:06:27,660 --> 00:06:28,979
so

169
00:06:28,979 --> 00:06:31,500
um the goal is to find bugs early in the

170
00:06:31,500 --> 00:06:33,419
software development life cycle okay did

171
00:06:33,419 --> 00:06:36,000
we introduce a pii variable uh right

172
00:06:36,000 --> 00:06:37,800
there Then in itself you know you made a

173
00:06:37,800 --> 00:06:39,600
comment and then it tells you did you do

174
00:06:39,600 --> 00:06:41,759
that so at runtime detecting a leak

175
00:06:41,759 --> 00:06:43,680
means the game is already over it's very

176
00:06:43,680 --> 00:06:45,419
reactive approach what we need is a

177
00:06:45,419 --> 00:06:47,100
proactive approach so I'll run through

178
00:06:47,100 --> 00:06:48,780
interesting stuff very quickly I've seen

179
00:06:48,780 --> 00:06:50,400
this kind of code

180
00:06:50,400 --> 00:06:52,620
we'll do a deep dive this is actually

181
00:06:52,620 --> 00:06:54,660
what happens you have a single piece of

182
00:06:54,660 --> 00:06:58,319
code and YX plus 50 and then you have to

183
00:06:58,319 --> 00:07:01,139
do lexical analysis over it tokenize it

184
00:07:01,139 --> 00:07:03,780
and then the computer also converts it

185
00:07:03,780 --> 00:07:05,400
into a graphs turns out that they also

186
00:07:05,400 --> 00:07:07,139
like graphs just like humans made these

187
00:07:07,139 --> 00:07:09,180
graphs in the brain and then you convert

188
00:07:09,180 --> 00:07:10,560
it to something called as abstract

189
00:07:10,560 --> 00:07:12,660
syntax tree and then you enhance it you

190
00:07:12,660 --> 00:07:15,180
attach more things to it and then you

191
00:07:15,180 --> 00:07:17,100
get a control for graph out of it you

192
00:07:17,100 --> 00:07:18,539
can understand where the data is Flowing

193
00:07:18,539 --> 00:07:20,460
from one point to another point if

194
00:07:20,460 --> 00:07:22,860
statements else statements where else

195
00:07:22,860 --> 00:07:24,780
statements where it would go and then

196
00:07:24,780 --> 00:07:26,160
all this eventually gives you a very

197
00:07:26,160 --> 00:07:27,900
nice thing like a program dip in this

198
00:07:27,900 --> 00:07:30,240
graph so value of Z dependent on the

199
00:07:30,240 --> 00:07:32,280
value of y dependent on the value of x

200
00:07:32,280 --> 00:07:34,020
but things are more complex you know

201
00:07:34,020 --> 00:07:35,520
real programs look like this they don't

202
00:07:35,520 --> 00:07:37,919
look like one line statements so they

203
00:07:37,919 --> 00:07:39,660
have a lot of things your your class

204
00:07:39,660 --> 00:07:41,520
member variables local variables

205
00:07:41,520 --> 00:07:44,099
annotations and you know all these new

206
00:07:44,099 --> 00:07:45,780
things that humans have you know they

207
00:07:45,780 --> 00:07:47,039
have made their life miserable by

208
00:07:47,039 --> 00:07:48,780
introducing a lot of this stuff and

209
00:07:48,780 --> 00:07:50,280
computers have to really understand

210
00:07:50,280 --> 00:07:52,220
stand this so

211
00:07:52,220 --> 00:07:54,720
they can create these nice higher level

212
00:07:54,720 --> 00:07:56,400
abstractions you know a patient

213
00:07:56,400 --> 00:07:58,979
controller defines get patient method

214
00:07:58,979 --> 00:08:01,139
and contains a call so these these all

215
00:08:01,139 --> 00:08:03,300
information is already there what we

216
00:08:03,300 --> 00:08:04,800
have to do now is to like Bunch

217
00:08:04,800 --> 00:08:06,300
everything together so we we start

218
00:08:06,300 --> 00:08:08,160
building a code we take the lowest layer

219
00:08:08,160 --> 00:08:10,860
and we create like an abstract syntax

220
00:08:10,860 --> 00:08:12,419
tree there okay and with that

221
00:08:12,419 --> 00:08:14,460
information now we add some more

222
00:08:14,460 --> 00:08:16,080
information we add control flow graph

223
00:08:16,080 --> 00:08:18,120
over it so we know that okay this will

224
00:08:18,120 --> 00:08:19,800
now also have control for information

225
00:08:19,800 --> 00:08:22,020
and then the next is what humans will

226
00:08:22,020 --> 00:08:23,520
really understand you know high level

227
00:08:23,520 --> 00:08:25,379
relationships graph of what things are

228
00:08:25,379 --> 00:08:27,240
happening but they get the whole context

229
00:08:27,240 --> 00:08:29,099
all the way you know below they can ask

230
00:08:29,099 --> 00:08:31,440
deeper questions about operators here

231
00:08:31,440 --> 00:08:33,299
and there

232
00:08:33,299 --> 00:08:35,399
so this brings us to this technology

233
00:08:35,399 --> 00:08:38,159
called as code property graph which is a

234
00:08:38,159 --> 00:08:40,799
queryable graph which embeds a complete

235
00:08:40,799 --> 00:08:42,839
code knowledge there's a an article

236
00:08:42,839 --> 00:08:44,580
there you can read about it it has been

237
00:08:44,580 --> 00:08:46,140
there for quite some time 10 years I

238
00:08:46,140 --> 00:08:49,019
believe and uh it this is essentially

239
00:08:49,019 --> 00:08:50,339
what this is you know you have language

240
00:08:50,339 --> 00:08:52,980
front ends code coming in and then you

241
00:08:52,980 --> 00:08:55,019
can generate the graph and then you can

242
00:08:55,019 --> 00:08:56,640
query the graph

243
00:08:56,640 --> 00:08:58,740
so how do we use it so there are many

244
00:08:58,740 --> 00:09:01,500
implementations of a code property graph

245
00:09:01,500 --> 00:09:03,660
four of them are important I I would say

246
00:09:03,660 --> 00:09:05,160
the first one is official it has been

247
00:09:05,160 --> 00:09:07,380
there for 10 years and then others have

248
00:09:07,380 --> 00:09:09,180
gradually been implemented so we stick

249
00:09:09,180 --> 00:09:12,480
to the first one called as yearn it's

250
00:09:12,480 --> 00:09:13,980
actually named after a real person named

251
00:09:13,980 --> 00:09:17,040
John so you can go and check it out but

252
00:09:17,040 --> 00:09:19,440
what it allows you to do this is you

253
00:09:19,440 --> 00:09:21,300
have it gives you a nice query language

254
00:09:21,300 --> 00:09:24,060
in Scala and then you can ask questions

255
00:09:24,060 --> 00:09:26,279
The Way We were supposed to ask it you

256
00:09:26,279 --> 00:09:27,720
know so you have the code in front of

257
00:09:27,720 --> 00:09:29,100
you and you're you're going to ask it

258
00:09:29,100 --> 00:09:30,779
give me all the logging syncs are they

259
00:09:30,779 --> 00:09:33,300
reachable by this pii variables called

260
00:09:33,300 --> 00:09:35,940
location so you can see this is quite

261
00:09:35,940 --> 00:09:38,399
powerful what if we could run thousands

262
00:09:38,399 --> 00:09:40,019
of these queries and millions of lines

263
00:09:40,019 --> 00:09:40,860
of code

264
00:09:40,860 --> 00:09:43,140
we get insights about it you know and we

265
00:09:43,140 --> 00:09:44,940
can get privacy insights about it is is

266
00:09:44,940 --> 00:09:47,519
this kind of pii data gonna leak to this

267
00:09:47,519 --> 00:09:49,800
log to this file to this database you

268
00:09:49,800 --> 00:09:51,060
can make permutations and then

269
00:09:51,060 --> 00:09:52,740
interesting stuff happens and that's

270
00:09:52,740 --> 00:09:55,140
what we did with this tool that we have

271
00:09:55,140 --> 00:09:57,360
built called as Privado scan we we want

272
00:09:57,360 --> 00:09:58,860
to build this tool to scale static

273
00:09:58,860 --> 00:10:01,680
analysis for privacy how does it work so

274
00:10:01,680 --> 00:10:03,540
the three components of this thing you

275
00:10:03,540 --> 00:10:05,100
can go on GitHub and check out all of

276
00:10:05,100 --> 00:10:08,100
this uh their rules easy to Define yaml

277
00:10:08,100 --> 00:10:10,140
rules and then there's an engine which

278
00:10:10,140 --> 00:10:12,180
generates the graph that I just talked

279
00:10:12,180 --> 00:10:14,519
to you about uh takes these rules run

280
00:10:14,519 --> 00:10:16,980
these Converse into queries finds out

281
00:10:16,980 --> 00:10:19,320
data flows interesting points inside the

282
00:10:19,320 --> 00:10:21,720
code relevant for privacy and then a ux

283
00:10:21,720 --> 00:10:24,779
piece which is just a simple CLI and

284
00:10:24,779 --> 00:10:26,820
that generates your result in a Json

285
00:10:26,820 --> 00:10:28,500
format that's also open you can check it

286
00:10:28,500 --> 00:10:30,839
out you can also view it on a cloud UI

287
00:10:30,839 --> 00:10:32,820
but if you only want to configure it

288
00:10:32,820 --> 00:10:34,500
otherwise everything can run completely

289
00:10:34,500 --> 00:10:36,120
on your system

290
00:10:36,120 --> 00:10:37,920
so there are some users who are actually

291
00:10:37,920 --> 00:10:39,779
using it we it turns out that they

292
00:10:39,779 --> 00:10:41,459
submitted a pull request and we were

293
00:10:41,459 --> 00:10:43,320
like hey how are you using it and then

294
00:10:43,320 --> 00:10:44,700
they said yeah we have a lot of stuff

295
00:10:44,700 --> 00:10:46,680
that we are building they have

296
00:10:46,680 --> 00:10:48,000
customized their rules and everything

297
00:10:48,000 --> 00:10:50,640
and uh it's it's essentially something

298
00:10:50,640 --> 00:10:52,680
like that so they generate the cpg they

299
00:10:52,680 --> 00:10:54,300
have their own yaml rules which is there

300
00:10:54,300 --> 00:10:55,980
you could also do that

301
00:10:55,980 --> 00:10:57,899
um and then you query this and it gives

302
00:10:57,899 --> 00:11:00,000
you nice results so if you want to check

303
00:11:00,000 --> 00:11:01,800
it out it's it's just two lines of code

304
00:11:01,800 --> 00:11:04,560
below don't trust anything that an

305
00:11:04,560 --> 00:11:06,420
install.sh does on your system you

306
00:11:06,420 --> 00:11:08,399
should go and look at the code

307
00:11:08,399 --> 00:11:10,620
so but I still gave you this link

308
00:11:10,620 --> 00:11:14,279
obviously so uh then then the real

309
00:11:14,279 --> 00:11:16,019
command is like Privado scan and then

310
00:11:16,019 --> 00:11:18,000
you can scan it so this presentation

311
00:11:18,000 --> 00:11:20,700
also has a demo so you should start

312
00:11:20,700 --> 00:11:24,079
praying now that this works

313
00:11:24,120 --> 00:11:27,060
okay so I have a piece of code banking

314
00:11:27,060 --> 00:11:28,740
system back in somewhere I don't know

315
00:11:28,740 --> 00:11:30,839
what it does I mean I know what it does

316
00:11:30,839 --> 00:11:33,240
but you don't know yet so we can

317
00:11:33,240 --> 00:11:37,740
actually do uh Privado scan and okay you

318
00:11:37,740 --> 00:11:38,940
know I don't want to write it it's

319
00:11:38,940 --> 00:11:41,640
already there so I I have this backing

320
00:11:41,640 --> 00:11:44,399
system back in there and I click enter

321
00:11:44,399 --> 00:11:47,279
obviously I had done this before so it

322
00:11:47,279 --> 00:11:49,560
it's using Docker so we have Docker is

323
00:11:49,560 --> 00:11:52,019
much of a static analysis pieces which

324
00:11:52,019 --> 00:11:55,440
is there which are there and uh it's it

325
00:11:55,440 --> 00:11:57,839
detect the language Java it's

326
00:11:57,839 --> 00:11:59,220
understanding that there are some

327
00:11:59,220 --> 00:12:01,980
configurations in it property files Etc

328
00:12:01,980 --> 00:12:04,019
and then it's downloading some

329
00:12:04,019 --> 00:12:05,880
dependencies and starting to parsec code

330
00:12:05,880 --> 00:12:07,380
so there may be some dependencies so

331
00:12:07,380 --> 00:12:09,240
it's also fetching those

332
00:12:09,240 --> 00:12:10,800
um yeah a lot of the stuff that is going

333
00:12:10,800 --> 00:12:13,260
on here is you know you can configure it

334
00:12:13,260 --> 00:12:15,360
completely now this is static analysis

335
00:12:15,360 --> 00:12:18,019
so you can sip a piece of uh you know

336
00:12:18,019 --> 00:12:20,519
you know coffee you know not a piece of

337
00:12:20,519 --> 00:12:23,300
coffee but like a sip of coffee

338
00:12:23,300 --> 00:12:25,560
you know it's so difficult you know

339
00:12:25,560 --> 00:12:27,979
languages

340
00:12:28,100 --> 00:12:31,019
uh so we'll wait really like nothing

341
00:12:31,019 --> 00:12:32,260
else to do

342
00:12:32,260 --> 00:12:37,970
[Laughter]

343
00:12:41,640 --> 00:12:43,740
that that's why I said you know it's you

344
00:12:43,740 --> 00:12:45,420
can remain calm you know that's why it's

345
00:12:45,420 --> 00:12:46,920
static analysis

346
00:12:46,920 --> 00:12:50,399
so uh a lot of stuff happened here so as

347
00:12:50,399 --> 00:12:52,980
you can see

348
00:12:52,980 --> 00:12:54,480
um

349
00:12:54,480 --> 00:12:57,540
yeah it went through the code let's come

350
00:12:57,540 --> 00:12:59,339
back here so so it went through the code

351
00:12:59,339 --> 00:13:02,220
and then it ran uh it started tagging

352
00:13:02,220 --> 00:13:04,019
interesting literals inside the code

353
00:13:04,019 --> 00:13:07,800
interesting databases apis start trying

354
00:13:07,800 --> 00:13:10,260
to detect all of that and it found out

355
00:13:10,260 --> 00:13:12,240
interesting flows and then gave you like

356
00:13:12,240 --> 00:13:14,519
a simple you know a thing here so data

357
00:13:14,519 --> 00:13:16,920
Elements 11 third party one and then

358
00:13:16,920 --> 00:13:19,019
some details about it you know and all

359
00:13:19,019 --> 00:13:20,459
of this information is in the

360
00:13:20,459 --> 00:13:22,980
privado.json which you can actually go

361
00:13:22,980 --> 00:13:26,519
and look at it here uh it also asks a

362
00:13:26,519 --> 00:13:28,440
question later on I have set it to yes

363
00:13:28,440 --> 00:13:30,180
by default where you can actually

364
00:13:30,180 --> 00:13:32,940
visualize this results uh so we'll we'll

365
00:13:32,940 --> 00:13:35,519
try to visualize those results

366
00:13:35,519 --> 00:13:37,500
um it's it's in a community dashboard so

367
00:13:37,500 --> 00:13:39,180
again this is shared you don't have to

368
00:13:39,180 --> 00:13:40,800
use it but I'm using it because I want

369
00:13:40,800 --> 00:13:42,260
to see these results

370
00:13:42,260 --> 00:13:44,760
uh it gives you some information about

371
00:13:44,760 --> 00:13:47,160
11 data elements zero sensitive

372
00:13:47,160 --> 00:13:49,860
inventory and then uh

373
00:13:49,860 --> 00:13:52,500
uh you know all the data flows that it

374
00:13:52,500 --> 00:13:54,600
found including the elements so some of

375
00:13:54,600 --> 00:13:56,519
them don't actually have flows so this

376
00:13:56,519 --> 00:13:58,440
is good it found date of birth but it's

377
00:13:58,440 --> 00:14:00,660
not going anywhere but in some cases it

378
00:14:00,660 --> 00:14:02,639
did find a lot of stuff so this phone

379
00:14:02,639 --> 00:14:04,139
number is going

380
00:14:04,139 --> 00:14:06,480
to many places so you have this phone

381
00:14:06,480 --> 00:14:08,160
number it is being shared with something

382
00:14:08,160 --> 00:14:11,160
called as fast to SMS and then it's

383
00:14:11,160 --> 00:14:13,680
getting stored to HDFC Bank you know

384
00:14:13,680 --> 00:14:16,440
some database we don't know yet but we

385
00:14:16,440 --> 00:14:18,600
actually found out by analyzing code it

386
00:14:18,600 --> 00:14:20,760
is getting leaked to a console getting

387
00:14:20,760 --> 00:14:22,500
processed and also getting collected

388
00:14:22,500 --> 00:14:25,560
internally in your apis which is there

389
00:14:25,560 --> 00:14:27,540
so this is all being done completely via

390
00:14:27,540 --> 00:14:30,360
static analysis as an analyst as an

391
00:14:30,360 --> 00:14:33,000
engineer you can actually start to look

392
00:14:33,000 --> 00:14:35,639
at each of these things one by one so we

393
00:14:35,639 --> 00:14:37,200
have this information embedded as well

394
00:14:37,200 --> 00:14:38,700
so it looked at this phone number

395
00:14:38,700 --> 00:14:41,699
variable and it started tracking it kept

396
00:14:41,699 --> 00:14:44,100
on tracking it turns out it's going to

397
00:14:44,100 --> 00:14:47,519
SMS service your customer ID get value

398
00:14:47,519 --> 00:14:49,620
of get phone number so so it get it's

399
00:14:49,620 --> 00:14:51,720
get it's going out somewhere so now it

400
00:14:51,720 --> 00:14:53,639
wants to find out what is this SMS

401
00:14:53,639 --> 00:14:56,540
service so it goes in inside SMS service

402
00:14:56,540 --> 00:14:59,699
sees that oh it's going in the string

403
00:14:59,699 --> 00:15:01,920
you know and getting concatenated to the

404
00:15:01,920 --> 00:15:04,440
string and then a URL connection

405
00:15:04,440 --> 00:15:06,060
Etc is happening anyways that's one

406
00:15:06,060 --> 00:15:08,820
example of data going somewhere outside

407
00:15:08,820 --> 00:15:11,820
same with databases detects that there

408
00:15:11,820 --> 00:15:14,040
are some databases multiple places where

409
00:15:14,040 --> 00:15:17,820
flow is going to and it tracks this

410
00:15:17,820 --> 00:15:19,920
phone number also and it gives you some

411
00:15:19,920 --> 00:15:21,600
information that this is a member of

412
00:15:21,600 --> 00:15:23,519
account so now it will also track

413
00:15:23,519 --> 00:15:25,260
account so if account is leaking

414
00:15:25,260 --> 00:15:26,699
somewhere it will say that yeah phone

415
00:15:26,699 --> 00:15:28,680
number is leaking because the count

416
00:15:28,680 --> 00:15:30,779
object now has phone number

417
00:15:30,779 --> 00:15:33,899
so um yeah console and collections it's

418
00:15:33,899 --> 00:15:36,180
the same stuff you've seen it you can

419
00:15:36,180 --> 00:15:38,399
explore it yourself a little bit so it

420
00:15:38,399 --> 00:15:40,860
understands that this account is

421
00:15:40,860 --> 00:15:43,920
actually being collected via this ad

422
00:15:43,920 --> 00:15:48,480
account Handler and so it it says that

423
00:15:48,480 --> 00:15:49,620
this is a phone number because the

424
00:15:49,620 --> 00:15:51,300
account object has the phone number

425
00:15:51,300 --> 00:15:52,800
inside it

426
00:15:52,800 --> 00:15:55,260
great so that's the end of the demo

427
00:15:55,260 --> 00:15:57,540
there are other things also uh you know

428
00:15:57,540 --> 00:15:59,940
inventory to do the reverse stuff which

429
00:15:59,940 --> 00:16:01,459
means like you can try to understand

430
00:16:01,459 --> 00:16:05,940
what is going inside fast to SMS so uh

431
00:16:05,940 --> 00:16:07,500
you can see that okay phone number

432
00:16:07,500 --> 00:16:09,000
account password all these things are

433
00:16:09,000 --> 00:16:10,980
getting shared so you can do the reverse

434
00:16:10,980 --> 00:16:13,440
thing also uh there are issues also I

435
00:16:13,440 --> 00:16:15,839
you should explore it there is work to

436
00:16:15,839 --> 00:16:17,699
be done in actually writing this

437
00:16:17,699 --> 00:16:20,279
properly in yaml I would suggest do that

438
00:16:20,279 --> 00:16:22,800
patches are absolutely welcome here

439
00:16:22,800 --> 00:16:29,339
end of demo this brings us to some

440
00:16:29,339 --> 00:16:31,199
links that I wanted to share with you

441
00:16:31,199 --> 00:16:34,399
let's see

442
00:16:35,540 --> 00:16:39,779
docs are here rules and engine so all

443
00:16:39,779 --> 00:16:41,399
the different repos are here you can

444
00:16:41,399 --> 00:16:43,139
join the Privado Community with this

445
00:16:43,139 --> 00:16:46,500
link and I will send this on slack and

446
00:16:46,500 --> 00:16:48,540
if you want to do more deeper stuff then

447
00:16:48,540 --> 00:16:50,220
there is yawn community that you can

448
00:16:50,220 --> 00:16:52,920
join and contributions are absolutely

449
00:16:52,920 --> 00:16:54,120
welcome

450
00:16:54,120 --> 00:16:56,720
questions

