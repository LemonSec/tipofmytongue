1
00:00:04,930 --> 00:00:08,500
[Music]

2
00:00:06,240 --> 00:00:10,750
hello everyone

3
00:00:08,500 --> 00:00:13,269
glad to be<font color="#E5E5E5"> here today to tell you about</font>

4
00:00:10,750 --> 00:00:15,580
<font color="#E5E5E5">the impact of</font><font color="#CCCCCC"> third-party code on</font>

5
00:00:13,269 --> 00:00:19,930
<font color="#CCCCCC">Android app security so let's get</font>

6
00:00:15,580 --> 00:00:25,359
started<font color="#CCCCCC"> so party code is a double-edged</font>

7
00:00:19,930 --> 00:00:27,670
sword<font color="#E5E5E5"> and one hand it has become an</font>

8
00:00:25,359 --> 00:00:30,369
<font color="#E5E5E5">indispensable aspect of modern software</font>

9
00:00:27,670 --> 00:00:32,200
development it eases the<font color="#E5E5E5"> development</font>

10
00:00:30,369 --> 00:00:35,860
process by allowing to reuse existing

11
00:00:32,200 --> 00:00:38,430
<font color="#E5E5E5">code which usually results</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> faster</font>

12
00:00:35,860 --> 00:00:41,140
<font color="#CCCCCC">development</font><font color="#E5E5E5"> and reduce development costs</font>

13
00:00:38,430 --> 00:00:43,210
<font color="#E5E5E5">on the other hand it also increases the</font>

14
00:00:41,140 --> 00:00:45,880
<font color="#CCCCCC">absol tech surface as code from</font>

15
00:00:43,210 --> 00:00:48,240
different<font color="#CCCCCC"> origins is used</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> such code</font>

16
00:00:45,880 --> 00:00:51,300
may differ in terms of quality

17
00:00:48,240 --> 00:00:55,440
<font color="#CCCCCC">maintenance and reliability</font>

18
00:00:51,300 --> 00:00:57,790
<font color="#E5E5E5">further</font><font color="#CCCCCC"> closes components are used</font>

19
00:00:55,440 --> 00:01:00,730
application developers must also<font color="#E5E5E5"> trust</font>

20
00:00:57,790 --> 00:01:05,860
library providers to adhere to security

21
00:01:00,730 --> 00:01:08,259
and<font color="#E5E5E5"> privacy best practices but now let's</font>

22
00:01:05,860 --> 00:01:10,990
put at risk in numbers according<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the</font>

23
00:01:08,260 --> 00:01:14,020
<font color="#E5E5E5">central repository the largest open</font>

24
00:01:10,990 --> 00:01:16,330
source component repository<font color="#E5E5E5"> more than 2</font>

25
00:01:14,020 --> 00:01:19,149
billion software components<font color="#CCCCCC"> with known</font>

26
00:01:16,330 --> 00:01:20,520
security<font color="#E5E5E5"> vulnerabilities are downloaded</font>

27
00:01:19,150 --> 00:01:23,530
each and every year

28
00:01:20,520 --> 00:01:25,899
they further report that outdated

29
00:01:23,530 --> 00:01:28,660
<font color="#E5E5E5">libraries have</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> three times higher risk</font>

30
00:01:25,900 --> 00:01:31,390
<font color="#E5E5E5">of being vulnerable</font><font color="#CCCCCC"> as compared to</font>

31
00:01:28,660 --> 00:01:33,399
<font color="#CCCCCC">up-to-date versions now sort</font><font color="#E5E5E5"> of the</font>

32
00:01:31,390 --> 00:01:37,540
prominent<font color="#CCCCCC"> most lists of the top 10</font>

33
00:01:33,400 --> 00:01:39,580
security risks and since 2013<font color="#E5E5E5"> it</font>

34
00:01:37,540 --> 00:01:42,640
includes a risk<font color="#E5E5E5"> and tired</font><font color="#CCCCCC"> at</font><font color="#E5E5E5"> using</font>

35
00:01:39,580 --> 00:01:45,220
components with known vulnerabilities<font color="#CCCCCC"> to</font>

36
00:01:42,640 --> 00:01:48,490
one application developers<font color="#E5E5E5"> about</font><font color="#CCCCCC"> the</font>

37
00:01:45,220 --> 00:01:54,250
emerging<font color="#E5E5E5"> threat of using unsecure</font>

38
00:01:48,490 --> 00:01:57,100
third-party code but these are<font color="#E5E5E5"> only risk</font>

39
00:01:54,250 --> 00:01:59,890
estimations<font color="#CCCCCC"> what we actually want to do</font>

40
00:01:57,100 --> 00:02:02,589
is to quantify<font color="#E5E5E5"> the security impact of</font>

41
00:01:59,890 --> 00:02:05,770
third-party<font color="#E5E5E5"> code and to do so we have to</font>

42
00:02:02,590 --> 00:02:08,259
perform<font color="#E5E5E5"> the three</font><font color="#CCCCCC"> following tasks first</font>

43
00:02:05,770 --> 00:02:11,049
we need to measure the status quo<font color="#E5E5E5"> of</font>

44
00:02:08,258 --> 00:02:12,760
library<font color="#CCCCCC"> audit</font><font color="#E5E5E5"> nerd out</font><font color="#CCCCCC"> address in</font><font color="#E5E5E5"> the</font>

45
00:02:11,050 --> 00:02:15,290
<font color="#E5E5E5">software</font><font color="#CCCCCC"> ecosystem</font>

46
00:02:12,760 --> 00:02:18,500
second we<font color="#CCCCCC"> need to identify</font><font color="#E5E5E5"> those</font>

47
00:02:15,290 --> 00:02:21,220
applications that use library versions

48
00:02:18,500 --> 00:02:23,900
<font color="#CCCCCC">this known security</font><font color="#E5E5E5"> vulnerabilities</font>

49
00:02:21,220 --> 00:02:26,180
<font color="#E5E5E5">insert whenever we find a new</font>

50
00:02:23,900 --> 00:02:29,630
vulnerability<font color="#CCCCCC"> a security or privacy</font>

51
00:02:26,180 --> 00:02:31,070
issue we want<font color="#E5E5E5"> to</font><font color="#CCCCCC"> properly attribute this</font>

52
00:02:29,630 --> 00:02:34,220
issue<font color="#CCCCCC"> to the</font><font color="#E5E5E5"> correct application</font>

53
00:02:31,070 --> 00:02:37,760
<font color="#E5E5E5">component so either the application</font><font color="#CCCCCC"> code</font>

54
00:02:34,220 --> 00:02:39,920
or some library code<font color="#E5E5E5"> and all those three</font>

55
00:02:37,760 --> 00:02:42,970
tasks have in common<font color="#CCCCCC"> that they require</font><font color="#E5E5E5"> a</font>

56
00:02:39,920 --> 00:02:45,738
reliable detection<font color="#E5E5E5"> of cert party code in</font>

57
00:02:42,970 --> 00:02:48,109
applications<font color="#E5E5E5"> so in the following I</font><font color="#CCCCCC"> will</font>

58
00:02:45,739 --> 00:02:51,170
show you an example<font color="#E5E5E5"> of Android</font><font color="#CCCCCC"> the</font>

59
00:02:48,110 --> 00:02:54,890
largest mobile<font color="#CCCCCC"> software ecosystem on how</font>

60
00:02:51,170 --> 00:02:58,100
to quantify the security impact<font color="#E5E5E5"> why</font>

61
00:02:54,890 --> 00:03:00,738
<font color="#E5E5E5">Android because it poses a variety of</font>

62
00:02:58,100 --> 00:03:03,130
challenges on the detection of<font color="#CCCCCC"> the party</font>

63
00:03:00,739 --> 00:03:05,660
code in the application binaries and

64
00:03:03,130 --> 00:03:08,209
these<font color="#E5E5E5"> challenges</font><font color="#CCCCCC"> can be explained best</font>

65
00:03:05,660 --> 00:03:10,100
by looking at how these libraries are

66
00:03:08,209 --> 00:03:13,550
integrated during the development

67
00:03:10,100 --> 00:03:17,120
<font color="#CCCCCC">process so at first we have to develop</font><font color="#E5E5E5"> a</font>

68
00:03:13,550 --> 00:03:18,890
<font color="#CCCCCC">view</font><font color="#E5E5E5"> which was very explicit</font><font color="#CCCCCC"> so the</font>

69
00:03:17,120 --> 00:03:22,400
developer knows which libraries are

70
00:03:18,890 --> 00:03:23,988
included which versions<font color="#CCCCCC"> thereof and you</font>

71
00:03:22,400 --> 00:03:26,780
might also know the origins of<font color="#E5E5E5"> these</font>

72
00:03:23,989 --> 00:03:29,540
libraries<font color="#E5E5E5"> but as soon as the app is</font>

73
00:03:26,780 --> 00:03:32,390
<font color="#E5E5E5">compiled this explicit mapping gets lost</font>

74
00:03:29,540 --> 00:03:34,190
<font color="#E5E5E5">as any</font><font color="#CCCCCC"> third-party code is now</font>

75
00:03:32,390 --> 00:03:37,130
statically linked<font color="#E5E5E5"> to the application</font>

76
00:03:34,190 --> 00:03:39,590
code<font color="#E5E5E5"> and as a result we receive one</font>

77
00:03:37,130 --> 00:03:41,570
monolithic bytecode file and we do not

78
00:03:39,590 --> 00:03:44,870
<font color="#E5E5E5">longer have different code origins and</font>

79
00:03:41,570 --> 00:03:47,870
this has severe<font color="#E5E5E5"> security implications</font>

80
00:03:44,870 --> 00:03:50,690
because<font color="#CCCCCC"> now any third-party</font><font color="#E5E5E5"> library that</font>

81
00:03:47,870 --> 00:03:52,910
is included inherits the access rights

82
00:03:50,690 --> 00:03:55,670
and permissions<font color="#E5E5E5"> of</font><font color="#CCCCCC"> their host</font>

83
00:03:52,910 --> 00:03:58,340
<font color="#E5E5E5">application so if the host</font><font color="#CCCCCC"> herb is able</font>

84
00:03:55,670 --> 00:04:01,760
to access<font color="#E5E5E5"> sensitive data like your</font>

85
00:03:58,340 --> 00:04:04,880
<font color="#E5E5E5">location or your contact data so that's</font>

86
00:04:01,760 --> 00:04:07,160
each and every included library<font color="#E5E5E5"> and past</font>

87
00:04:04,880 --> 00:04:09,739
incidents have shown that in<font color="#E5E5E5"> particular</font>

88
00:04:07,160 --> 00:04:12,620
<font color="#CCCCCC">number</font><font color="#E5E5E5"> of advertisement and tracking</font>

89
00:04:09,739 --> 00:04:15,799
libraries<font color="#CCCCCC"> misused this is an inherited</font>

90
00:04:12,620 --> 00:04:19,548
access rights to<font color="#E5E5E5"> steal personal data</font><font color="#CCCCCC"> and</font>

91
00:04:15,799 --> 00:04:22,190
to track the<font color="#CCCCCC"> user but we are not yet at</font>

92
00:04:19,548 --> 00:04:24,710
<font color="#CCCCCC">the end of the story because</font><font color="#E5E5E5"> an Android</font>

93
00:04:22,190 --> 00:04:26,620
the majority of<font color="#E5E5E5"> apps either partially or</font>

94
00:04:24,710 --> 00:04:29,180
fully obfuscated

95
00:04:26,620 --> 00:04:31,190
because an Android app<font color="#CCCCCC"> development</font><font color="#E5E5E5"> of</font>

96
00:04:29,180 --> 00:04:34,129
occasion techniques are rather the

97
00:04:31,190 --> 00:04:35,930
default<font color="#E5E5E5"> than the exception</font><font color="#CCCCCC"> and among the</font>

98
00:04:34,129 --> 00:04:38,539
two most commonly used application

99
00:04:35,930 --> 00:04:41,569
techniques there are identifier renaming

100
00:04:38,539 --> 00:04:44,419
<font color="#E5E5E5">and that code elimination</font><font color="#CCCCCC"> so an</font>

101
00:04:41,569 --> 00:04:47,180
identifier renaming<font color="#E5E5E5"> identify us like the</font>

102
00:04:44,419 --> 00:04:49,698
method<font color="#CCCCCC"> name</font><font color="#E5E5E5"> the class name or even</font>

103
00:04:47,180 --> 00:04:52,220
<font color="#E5E5E5">entire packages namespaces are</font>

104
00:04:49,699 --> 00:04:54,770
transformed<font color="#CCCCCC"> into</font><font color="#E5E5E5"> short</font><font color="#CCCCCC"> non meaningful</font>

105
00:04:52,220 --> 00:04:57,409
character<font color="#E5E5E5"> sequences for instance the</font>

106
00:04:54,770 --> 00:04:59,719
namespace like<font color="#E5E5E5"> com Google would then be</font>

107
00:04:57,409 --> 00:05:03,879
<font color="#E5E5E5">transformed into something</font><font color="#CCCCCC"> like a dot B</font>

108
00:04:59,719 --> 00:05:06,110
and<font color="#CCCCCC"> then we</font><font color="#E5E5E5"> have that code elimination</font>

109
00:05:03,879 --> 00:05:07,699
<font color="#E5E5E5">application developers typically don't</font>

110
00:05:06,110 --> 00:05:09,860
make use of the entire<font color="#E5E5E5"> library</font>

111
00:05:07,699 --> 00:05:13,370
functionality<font color="#CCCCCC"> they're only using a</font>

112
00:05:09,860 --> 00:05:16,280
subset thereof so that code elimination

113
00:05:13,370 --> 00:05:18,830
<font color="#CCCCCC">then strips</font><font color="#E5E5E5"> any unused functionality</font>

114
00:05:16,280 --> 00:05:20,929
from the application binary and as a

115
00:05:18,830 --> 00:05:23,900
result we are<font color="#E5E5E5"> now facing another</font>

116
00:05:20,930 --> 00:05:25,729
detection challenge<font color="#E5E5E5"> we must not only</font>

117
00:05:23,900 --> 00:05:28,609
<font color="#E5E5E5">detect the original library in the</font>

118
00:05:25,729 --> 00:05:31,400
application but<font color="#CCCCCC"> also subsets thereof and</font>

119
00:05:28,610 --> 00:05:34,190
<font color="#CCCCCC">his subsets may change for</font><font color="#E5E5E5"> each and</font>

120
00:05:31,400 --> 00:05:35,960
every<font color="#CCCCCC"> application so the bottom line</font><font color="#E5E5E5"> is</font>

121
00:05:34,190 --> 00:05:38,330
<font color="#E5E5E5">that these are possession techniques</font>

122
00:05:35,960 --> 00:05:41,330
<font color="#E5E5E5">further blur the boundary between</font>

123
00:05:38,330 --> 00:05:43,159
application and library code<font color="#E5E5E5"> and the</font>

124
00:05:41,330 --> 00:05:47,448
question is how<font color="#CCCCCC"> can we approach these</font>

125
00:05:43,159 --> 00:05:50,750
challenges<font color="#E5E5E5"> a common way to do so is to</font>

126
00:05:47,449 --> 00:05:52,880
<font color="#E5E5E5">conduct the static code analysis in this</font>

127
00:05:50,750 --> 00:05:54,560
<font color="#E5E5E5">case it would be a</font><font color="#CCCCCC"> bytecode analysis as</font>

128
00:05:52,880 --> 00:05:57,529
for the majority of<font color="#E5E5E5"> Android apps the</font>

129
00:05:54,560 --> 00:05:59,270
source code is not<font color="#E5E5E5"> available</font><font color="#CCCCCC"> and in the</font>

130
00:05:57,529 --> 00:06:01,370
<font color="#E5E5E5">first step</font><font color="#CCCCCC"> you would then create</font><font color="#E5E5E5"> the</font>

131
00:05:59,270 --> 00:06:04,549
appropriate<font color="#CCCCCC"> data structures for instance</font>

132
00:06:01,370 --> 00:06:07,219
a control flow graph now you can refine

133
00:06:04,550 --> 00:06:08,919
your analysis by adding call edges to

134
00:06:07,219 --> 00:06:11,690
retrieve a<font color="#E5E5E5"> car craft</font>

135
00:06:08,919 --> 00:06:14,628
however as soon<font color="#CCCCCC"> as you have to analyze</font>

136
00:06:11,690 --> 00:06:17,860
<font color="#CCCCCC">specific code instructions you may</font><font color="#E5E5E5"> also</font>

137
00:06:14,629 --> 00:06:21,080
run into problems<font color="#E5E5E5"> like</font><font color="#CCCCCC"> in this case</font>

138
00:06:17,860 --> 00:06:22,759
obfuscated calls then<font color="#CCCCCC"> you're no longer</font>

139
00:06:21,080 --> 00:06:25,190
able to<font color="#E5E5E5"> statically determine the</font>

140
00:06:22,759 --> 00:06:27,650
receiving ends of these calls<font color="#CCCCCC"> and as a</font>

141
00:06:25,190 --> 00:06:29,870
result you add imprecision to your data

142
00:06:27,650 --> 00:06:31,818
structures<font color="#E5E5E5"> although you spend an</font>

143
00:06:29,870 --> 00:06:35,120
<font color="#CCCCCC">additional amount of</font><font color="#E5E5E5"> effort</font><font color="#CCCCCC"> into their</font>

144
00:06:31,819 --> 00:06:36,889
generation<font color="#E5E5E5"> and this additional effort</font>

145
00:06:35,120 --> 00:06:38,960
also<font color="#E5E5E5"> negatively influences the</font>

146
00:06:36,889 --> 00:06:41,090
scalability of your approach

147
00:06:38,960 --> 00:06:42,590
and scalability<font color="#E5E5E5"> is important because we</font>

148
00:06:41,090 --> 00:06:45,198
are<font color="#CCCCCC"> talking</font><font color="#E5E5E5"> about more</font><font color="#CCCCCC"> than three</font>

149
00:06:42,590 --> 00:06:48,409
million applications<font color="#E5E5E5"> just hosted on</font>

150
00:06:45,199 --> 00:06:50,840
Google<font color="#E5E5E5"> on the Google</font><font color="#CCCCCC"> Playstore</font><font color="#E5E5E5"> so it</font>

151
00:06:48,410 --> 00:06:52,669
turns out<font color="#E5E5E5"> that these common analysis</font>

152
00:06:50,840 --> 00:06:54,979
approaches do not fit well to<font color="#E5E5E5"> our</font>

153
00:06:52,669 --> 00:06:57,349
requirements<font color="#E5E5E5"> and we have to get back to</font>

154
00:06:54,979 --> 00:06:59,690
<font color="#CCCCCC">the drawing board and come up with a</font>

155
00:06:57,349 --> 00:07:03,610
<font color="#CCCCCC">novel</font><font color="#E5E5E5"> idea that in the</font><font color="#CCCCCC"> best</font><font color="#E5E5E5"> case</font>

156
00:06:59,690 --> 00:07:07,340
combines both precision<font color="#E5E5E5"> and scalability</font>

157
00:07:03,610 --> 00:07:10,039
<font color="#CCCCCC">so we asked ourselves is it possible to</font>

158
00:07:07,340 --> 00:07:12,489
detect third party code<font color="#E5E5E5"> by just</font><font color="#CCCCCC"> looking</font>

159
00:07:10,039 --> 00:07:14,960
<font color="#E5E5E5">at the code structure and with that</font>

160
00:07:12,490 --> 00:07:17,870
eliminating the need to<font color="#E5E5E5"> analyze specific</font>

161
00:07:14,960 --> 00:07:21,489
<font color="#E5E5E5">code instructions so let's see what</font>

162
00:07:17,870 --> 00:07:24,620
happens if<font color="#E5E5E5"> we remove code instructions</font>

163
00:07:21,490 --> 00:07:27,620
what is left is a set of method

164
00:07:24,620 --> 00:07:30,050
signatures<font color="#CCCCCC"> a method signature</font><font color="#E5E5E5"> comprises</font>

165
00:07:27,620 --> 00:07:33,020
the method name<font color="#E5E5E5"> the argument type list</font>

166
00:07:30,050 --> 00:07:35,539
<font color="#E5E5E5">and return type now if we zoom out a bit</font>

167
00:07:33,020 --> 00:07:39,109
<font color="#CCCCCC">we further</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> idea enclosing class and</font>

168
00:07:35,539 --> 00:07:41,270
a package name a<font color="#E5E5E5"> namespace Android apps</font>

169
00:07:39,110 --> 00:07:44,150
<font color="#E5E5E5">and libraries are written in Java and</font>

170
00:07:41,270 --> 00:07:47,419
Java code is organized in hierarchical

171
00:07:44,150 --> 00:07:50,030
namespaces now the key observation<font color="#E5E5E5"> is</font>

172
00:07:47,419 --> 00:07:52,340
<font color="#E5E5E5">that these namespaces in contrast to</font>

173
00:07:50,030 --> 00:07:54,650
native code<font color="#CCCCCC"> are preserved</font><font color="#E5E5E5"> in the</font>

174
00:07:52,340 --> 00:07:58,008
application binaries<font color="#E5E5E5"> so we can leverage</font>

175
00:07:54,650 --> 00:08:01,698
that<font color="#E5E5E5"> fact and pass these namespaces and</font>

176
00:07:58,009 --> 00:08:03,979
<font color="#E5E5E5">represent them as a package tree now as</font>

177
00:08:01,699 --> 00:08:06,830
we<font color="#CCCCCC"> continue to do so for the remaining</font>

178
00:08:03,979 --> 00:08:09,919
classes<font color="#E5E5E5"> of the application we eventually</font>

179
00:08:06,830 --> 00:08:11,448
receive a complete package tree that

180
00:08:09,919 --> 00:08:14,508
<font color="#E5E5E5">represents the code structure of the</font>

181
00:08:11,449 --> 00:08:16,729
<font color="#E5E5E5">application we</font><font color="#CCCCCC"> are looking for however</font>

182
00:08:14,509 --> 00:08:19,070
we cannot rely on<font color="#E5E5E5"> any of these</font>

183
00:08:16,729 --> 00:08:22,460
identifiers<font color="#E5E5E5"> because they are all subject</font>

184
00:08:19,070 --> 00:08:24,169
<font color="#CCCCCC">to</font><font color="#E5E5E5"> identifier renaming instead</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> must</font>

185
00:08:22,460 --> 00:08:27,500
only<font color="#CCCCCC"> leverage the structure for</font>

186
00:08:24,169 --> 00:08:29,539
detection<font color="#E5E5E5"> but how can we do this we can</font>

187
00:08:27,500 --> 00:08:32,479
<font color="#CCCCCC">do this</font><font color="#E5E5E5"> by transforming this package</font>

188
00:08:29,539 --> 00:08:35,029
tree into<font color="#CCCCCC"> Merkel</font><font color="#E5E5E5"> tree a marquetry is</font>

189
00:08:32,479 --> 00:08:37,450
basically a hash<font color="#E5E5E5"> tree</font><font color="#CCCCCC"> where parent nodes</font>

190
00:08:35,029 --> 00:08:39,708
are generated from<font color="#E5E5E5"> its child nodes and</font>

191
00:08:37,450 --> 00:08:42,079
<font color="#CCCCCC">marker</font><font color="#E5E5E5"> trees are typically used for</font>

192
00:08:39,708 --> 00:08:45,709
efficient integrity checks for large

193
00:08:42,078 --> 00:08:47,989
data structures and file systems<font color="#E5E5E5"> so here</font>

194
00:08:45,709 --> 00:08:50,089
we can transform this package tree<font color="#CCCCCC"> into</font>

195
00:08:47,990 --> 00:08:52,580
a<font color="#CCCCCC"> three layered</font><font color="#E5E5E5"> Merkel tree having</font>

196
00:08:50,089 --> 00:08:56,480
dedicated layers for packages

197
00:08:52,580 --> 00:08:58,399
classes and methods now<font color="#E5E5E5"> these trees are</font>

198
00:08:56,480 --> 00:09:00,740
built bottom up starting<font color="#CCCCCC"> with</font><font color="#E5E5E5"> the method</font>

199
00:08:58,399 --> 00:09:03,560
hashes<font color="#E5E5E5"> and we can sort them before</font>

200
00:09:00,740 --> 00:09:07,010
generating<font color="#E5E5E5"> the parent hash to retrieve a</font>

201
00:09:03,560 --> 00:09:09,768
<font color="#E5E5E5">deterministic build order now as soon as</font>

202
00:09:07,010 --> 00:09:11,990
<font color="#E5E5E5">these trees are built we can compare</font>

203
00:09:09,769 --> 00:09:14,899
different<font color="#CCCCCC"> trees and a bottom-up manner</font>

204
00:09:11,990 --> 00:09:17,089
starting with the package hashes<font color="#E5E5E5"> so</font><font color="#CCCCCC"> now</font>

205
00:09:14,899 --> 00:09:18,709
the<font color="#E5E5E5"> only question that is left</font><font color="#CCCCCC"> open is</font>

206
00:09:17,089 --> 00:09:21,550
how do<font color="#E5E5E5"> we start</font>

207
00:09:18,709 --> 00:09:24,979
so how do we<font color="#E5E5E5"> generate</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> message hashes</font><font color="#CCCCCC"> a</font>

208
00:09:21,550 --> 00:09:28,490
simple approach<font color="#E5E5E5"> would be</font><font color="#CCCCCC"> to take the</font>

209
00:09:24,980 --> 00:09:30,019
method signature<font color="#CCCCCC"> and hash it</font><font color="#E5E5E5"> but then it</font>

210
00:09:28,490 --> 00:09:33,230
would be again prone to<font color="#CCCCCC"> identifier</font>

211
00:09:30,019 --> 00:09:35,269
renaming so we have to tweak it<font color="#E5E5E5"> a bit to</font>

212
00:09:33,230 --> 00:09:38,630
make<font color="#CCCCCC"> it resistant against that kind of</font>

213
00:09:35,269 --> 00:09:42,560
<font color="#CCCCCC">obfuscation and we can do so</font><font color="#E5E5E5"> by applying</font>

214
00:09:38,630 --> 00:09:44,329
<font color="#E5E5E5">a simple two-step approach first we</font>

215
00:09:42,560 --> 00:09:46,670
<font color="#E5E5E5">remove anything before the brackets</font>

216
00:09:44,329 --> 00:09:50,510
leaving only the argument type list and

217
00:09:46,670 --> 00:09:52,849
return type<font color="#E5E5E5"> and</font><font color="#CCCCCC"> a second step we replace</font>

218
00:09:50,510 --> 00:09:56,390
any custom type there's a common place<font color="#CCCCCC"> I</font>

219
00:09:52,850 --> 00:09:58,820
place all<font color="#E5E5E5"> the value X so here we do not</font>

220
00:09:56,390 --> 00:10:00,500
distinguish<font color="#E5E5E5"> between</font><font color="#CCCCCC"> different</font><font color="#E5E5E5"> types we</font>

221
00:09:58,820 --> 00:10:04,370
are only<font color="#E5E5E5"> interested</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> the number of</font>

222
00:10:00,500 --> 00:10:05,930
types we replaced and the<font color="#CCCCCC"> precision</font><font color="#E5E5E5"> what</font>

223
00:10:04,370 --> 00:10:08,540
we receive is a so called<font color="#CCCCCC"> fuzzy</font>

224
00:10:05,930 --> 00:10:12,380
descriptor you can think<font color="#E5E5E5"> of it as</font><font color="#CCCCCC"> a</font>

225
00:10:08,540 --> 00:10:15,469
pattern<font color="#E5E5E5"> or a template now at that point</font>

226
00:10:12,380 --> 00:10:17,500
<font color="#CCCCCC">we intentionally introduced an error</font><font color="#E5E5E5"> to</font>

227
00:10:15,470 --> 00:10:20,060
defeat the obfuscation<font color="#E5E5E5"> because obviously</font>

228
00:10:17,500 --> 00:10:22,459
<font color="#E5E5E5">this facet descriptor doesn't only match</font>

229
00:10:20,060 --> 00:10:25,250
the original signature<font color="#E5E5E5"> but it would also</font>

230
00:10:22,459 --> 00:10:27,800
match similar<font color="#E5E5E5"> signatures but the good</font>

231
00:10:25,250 --> 00:10:30,320
thing<font color="#CCCCCC"> is that</font><font color="#E5E5E5"> while we are building the</font>

232
00:10:27,800 --> 00:10:32,270
tree<font color="#E5E5E5"> this ever error will decrease</font>

233
00:10:30,320 --> 00:10:34,670
<font color="#E5E5E5">because we are adding more and more</font>

234
00:10:32,270 --> 00:10:37,520
methods<font color="#E5E5E5"> more and more</font><font color="#CCCCCC"> classes</font><font color="#E5E5E5"> and more</font>

235
00:10:34,670 --> 00:10:40,459
<font color="#E5E5E5">more packages and eventually we receive</font>

236
00:10:37,520 --> 00:10:44,480
a unique<font color="#E5E5E5"> marker tree that</font><font color="#CCCCCC"> represents a</font>

237
00:10:40,459 --> 00:10:46,790
<font color="#E5E5E5">profile for</font><font color="#CCCCCC"> our library now having</font><font color="#E5E5E5"> these</font>

238
00:10:44,480 --> 00:10:50,649
profiles<font color="#CCCCCC"> how can we leverage them for</font>

239
00:10:46,790 --> 00:10:53,930
<font color="#CCCCCC">detection the</font><font color="#E5E5E5"> idea is the following</font>

240
00:10:50,649 --> 00:10:56,540
<font color="#CCCCCC">first we</font><font color="#E5E5E5"> create a database of libraries</font>

241
00:10:53,930 --> 00:11:00,290
and library versions and for each

242
00:10:56,540 --> 00:11:02,689
library<font color="#CCCCCC"> version</font><font color="#E5E5E5"> we generate a profile so</font>

243
00:11:00,290 --> 00:11:04,730
for efficiency reasons<font color="#E5E5E5"> we can strip</font><font color="#CCCCCC"> the</font>

244
00:11:02,690 --> 00:11:06,350
method layer<font color="#E5E5E5"> as that code elimination</font>

245
00:11:04,730 --> 00:11:10,340
<font color="#CCCCCC">only operates</font>

246
00:11:06,350 --> 00:11:12,530
on package and class<font color="#CCCCCC"> layer we then do</font>

247
00:11:10,340 --> 00:11:14,570
the same<font color="#E5E5E5"> for all applications on the</font>

248
00:11:12,530 --> 00:11:17,120
test and<font color="#CCCCCC"> then we can check</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> each</font>

249
00:11:14,570 --> 00:11:19,520
<font color="#E5E5E5">library version whether it's set of</font>

250
00:11:17,120 --> 00:11:22,670
package hashes<font color="#CCCCCC"> is included in the</font>

251
00:11:19,520 --> 00:11:24,680
application<font color="#CCCCCC"> if this is the</font><font color="#E5E5E5"> case we can</font>

252
00:11:22,670 --> 00:11:27,650
<font color="#CCCCCC">already stop here</font><font color="#E5E5E5"> because we have a full</font>

253
00:11:24,680 --> 00:11:30,260
match<font color="#E5E5E5"> meaning that the complete original</font>

254
00:11:27,650 --> 00:11:34,189
library<font color="#CCCCCC"> version is included in the</font>

255
00:11:30,260 --> 00:11:37,340
<font color="#CCCCCC">application now in case of a partial</font>

256
00:11:34,190 --> 00:11:39,800
match<font color="#E5E5E5"> we can now go one level deeper</font><font color="#CCCCCC"> in</font>

257
00:11:37,340 --> 00:11:43,400
the tree<font color="#E5E5E5"> and check whether the library</font>

258
00:11:39,800 --> 00:11:46,459
classes are included in<font color="#CCCCCC"> implication so</font>

259
00:11:43,400 --> 00:11:48,380
in that case we would find a package in

260
00:11:46,460 --> 00:11:51,020
<font color="#E5E5E5">the application that</font><font color="#CCCCCC"> contains two out of</font>

261
00:11:48,380 --> 00:11:52,580
three<font color="#E5E5E5"> classes for instance</font><font color="#CCCCCC"> because the</font>

262
00:11:51,020 --> 00:11:55,069
third class has been stripped by the

263
00:11:52,580 --> 00:11:57,410
dead code elimination<font color="#CCCCCC"> we would</font><font color="#E5E5E5"> then</font>

264
00:11:55,070 --> 00:11:59,360
report<font color="#E5E5E5"> a partial match and further</font>

265
00:11:57,410 --> 00:12:02,060
indicate the fraction<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> original</font>

266
00:11:59,360 --> 00:12:07,040
library<font color="#E5E5E5"> code that is included in the</font>

267
00:12:02,060 --> 00:12:09,560
<font color="#CCCCCC">application so now having</font><font color="#E5E5E5"> a reliable</font>

268
00:12:07,040 --> 00:12:11,449
approach<font color="#CCCCCC"> to detect libraries even in</font>

269
00:12:09,560 --> 00:12:14,089
spite<font color="#CCCCCC"> of</font><font color="#E5E5E5"> commonly</font><font color="#CCCCCC"> use of post</font><font color="#E5E5E5"> occasion</font>

270
00:12:11,450 --> 00:12:16,970
techniques<font color="#E5E5E5"> we can</font><font color="#CCCCCC"> now go on</font><font color="#E5E5E5"> to quantify</font>

271
00:12:14,090 --> 00:12:19,730
<font color="#E5E5E5">the security impact of</font><font color="#CCCCCC"> third-party</font>

272
00:12:16,970 --> 00:12:21,770
<font color="#E5E5E5">libraries and we can start doing so by</font>

273
00:12:19,730 --> 00:12:24,200
<font color="#CCCCCC">measuring</font><font color="#E5E5E5"> the library outdated</font><font color="#CCCCCC"> nursin</font>

274
00:12:21,770 --> 00:12:27,020
<font color="#E5E5E5">apps and to that end we took the</font>

275
00:12:24,200 --> 00:12:30,470
Facebook SDK<font color="#E5E5E5"> one of the most widely</font><font color="#CCCCCC"> used</font>

276
00:12:27,020 --> 00:12:32,600
libraries<font color="#E5E5E5"> and</font><font color="#CCCCCC"> android app</font><font color="#E5E5E5"> development so</font>

277
00:12:30,470 --> 00:12:35,630
on the y-axis you<font color="#E5E5E5"> see the different</font>

278
00:12:32,600 --> 00:12:38,000
versions of this libraries having the

279
00:12:35,630 --> 00:12:40,280
most current version on<font color="#CCCCCC"> top and this</font>

280
00:12:38,000 --> 00:12:43,370
library<font color="#CCCCCC"> version</font><font color="#E5E5E5"> spend over a period of</font>

281
00:12:40,280 --> 00:12:45,490
about<font color="#E5E5E5"> five years</font><font color="#CCCCCC"> now when adding the</font>

282
00:12:43,370 --> 00:12:48,500
results you<font color="#CCCCCC"> can see</font><font color="#E5E5E5"> a very high</font>

283
00:12:45,490 --> 00:12:51,110
fragmentation meaning that each and

284
00:12:48,500 --> 00:12:54,130
every library<font color="#CCCCCC"> version that exists is</font>

285
00:12:51,110 --> 00:12:57,380
actually<font color="#E5E5E5"> being and used by applications</font>

286
00:12:54,130 --> 00:12:59,480
<font color="#CCCCCC">now the surprising factors that this</font>

287
00:12:57,380 --> 00:13:01,240
these are not<font color="#CCCCCC"> the results for all</font>

288
00:12:59,480 --> 00:13:03,950
<font color="#E5E5E5">applications</font><font color="#CCCCCC"> in the Google Play</font><font color="#E5E5E5"> Store</font>

289
00:13:01,240 --> 00:13:07,130
<font color="#CCCCCC">but</font><font color="#E5E5E5"> only for the top 4,000 applications</font>

290
00:13:03,950 --> 00:13:09,920
<font color="#E5E5E5">and for such applications</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> would</font>

291
00:13:07,130 --> 00:13:13,460
certainly expect to have a proper code

292
00:13:09,920 --> 00:13:15,680
maintenance<font color="#CCCCCC"> and in fact they have but</font>

293
00:13:13,460 --> 00:13:18,650
<font color="#CCCCCC">only</font><font color="#E5E5E5"> for the application code and not</font>

294
00:13:15,680 --> 00:13:20,150
for the included libraries and by

295
00:13:18,650 --> 00:13:22,850
measuring the outdated<font color="#E5E5E5"> news</font>

296
00:13:20,150 --> 00:13:26,300
we can also check for<font color="#E5E5E5"> library versions</font>

297
00:13:22,850 --> 00:13:29,270
of known security<font color="#E5E5E5"> vulnerabilities so in</font>

298
00:13:26,300 --> 00:13:30,979
version 315 of the Facebook SDK there

299
00:13:29,270 --> 00:13:34,400
has been a severe account<font color="#E5E5E5"> hijacking</font>

300
00:13:30,980 --> 00:13:35,960
vulnerability and as you can<font color="#E5E5E5"> see</font><font color="#CCCCCC"> even in</font>

301
00:13:34,400 --> 00:13:38,000
the most current<font color="#CCCCCC"> version of these top</font>

302
00:13:35,960 --> 00:13:39,950
apps<font color="#CCCCCC"> there's still a significant number</font>

303
00:13:38,000 --> 00:13:42,589
<font color="#E5E5E5">that includes this vulnerable</font>

304
00:13:39,950 --> 00:13:46,070
<font color="#CCCCCC">third-party</font><font color="#E5E5E5"> code now</font>

305
00:13:42,589 --> 00:13:48,350
<font color="#E5E5E5">asset these results only reflect the</font>

306
00:13:46,070 --> 00:13:51,230
most<font color="#E5E5E5"> current</font><font color="#CCCCCC"> version of each application</font>

307
00:13:48,350 --> 00:13:54,290
<font color="#E5E5E5">but we</font><font color="#CCCCCC"> are also interested in</font><font color="#E5E5E5"> measuring</font>

308
00:13:51,230 --> 00:13:56,960
<font color="#E5E5E5">the vulnerability lifetime to that end</font>

309
00:13:54,290 --> 00:13:58,939
we took the set of applications<font color="#E5E5E5"> and for</font>

310
00:13:56,960 --> 00:14:01,610
each<font color="#CCCCCC"> application we crawled its entire</font>

311
00:13:58,940 --> 00:14:03,770
version history and we then checked<font color="#E5E5E5"> at</font>

312
00:14:01,610 --> 00:14:06,170
which<font color="#E5E5E5"> point in time this vulnerable SDK</font>

313
00:14:03,770 --> 00:14:10,430
was introduced and in which point in

314
00:14:06,170 --> 00:14:13,040
time it<font color="#E5E5E5"> was</font><font color="#CCCCCC"> eventually fixed so in</font><font color="#E5E5E5"> this</font>

315
00:14:10,430 --> 00:14:15,199
graph<font color="#E5E5E5"> you</font><font color="#CCCCCC"> see a</font><font color="#E5E5E5"> time frame of about two</font>

316
00:14:13,040 --> 00:14:19,339
years<font color="#E5E5E5"> starting</font><font color="#CCCCCC"> with the</font><font color="#E5E5E5"> release of the</font>

317
00:14:15,200 --> 00:14:21,980
vulnerable SDK and June<font color="#E5E5E5"> 2014</font><font color="#CCCCCC"> about one</font>

318
00:14:19,339 --> 00:14:25,160
<font color="#E5E5E5">month later the fixed version was</font>

319
00:14:21,980 --> 00:14:27,080
released<font color="#E5E5E5"> now on the</font><font color="#CCCCCC"> y-axis</font><font color="#E5E5E5"> we see the</font>

320
00:14:25,160 --> 00:14:30,380
number of released<font color="#E5E5E5"> apps this</font>

321
00:14:27,080 --> 00:14:32,630
<font color="#E5E5E5">dishonourable SDK per day obviously</font>

322
00:14:30,380 --> 00:14:34,790
<font color="#CCCCCC">within that one month's time frame there</font>

323
00:14:32,630 --> 00:14:37,970
has been a number of apps released that

324
00:14:34,790 --> 00:14:40,130
include this vulnerable code<font color="#E5E5E5"> but now</font>

325
00:14:37,970 --> 00:14:42,410
with the release<font color="#CCCCCC"> of the patch</font><font color="#E5E5E5"> would</font>

326
00:14:40,130 --> 00:14:45,529
certainly expect a<font color="#CCCCCC"> fast decline and the</font>

327
00:14:42,410 --> 00:14:48,170
number of apps<font color="#E5E5E5"> but unfortunately the</font>

328
00:14:45,529 --> 00:14:49,970
reality<font color="#E5E5E5"> looks different so there's even</font>

329
00:14:48,170 --> 00:14:52,339
a short increase in the number of<font color="#E5E5E5"> apps</font>

330
00:14:49,970 --> 00:14:55,940
<font color="#CCCCCC">that include</font><font color="#E5E5E5"> this vulnerable code and</font>

331
00:14:52,339 --> 00:14:58,310
even<font color="#E5E5E5"> after a</font><font color="#CCCCCC"> one year time</font><font color="#E5E5E5"> period</font><font color="#CCCCCC"> they</font>

332
00:14:55,940 --> 00:15:01,700
<font color="#E5E5E5">are still a significant</font><font color="#CCCCCC"> number of new</font>

333
00:14:58,310 --> 00:15:06,229
<font color="#E5E5E5">apps and app updates that include this</font>

334
00:15:01,700 --> 00:15:09,560
vulnerable version<font color="#E5E5E5"> now when looking</font><font color="#CCCCCC"> at</font>

335
00:15:06,230 --> 00:15:12,230
the fixing rate<font color="#E5E5E5"> you can only see a</font><font color="#CCCCCC"> very</font>

336
00:15:09,560 --> 00:15:15,290
<font color="#CCCCCC">small number that actually fixes this</font>

337
00:15:12,230 --> 00:15:18,350
problem<font color="#E5E5E5"> either by updating to a non</font>

338
00:15:15,290 --> 00:15:20,689
vulnerable version<font color="#E5E5E5"> or by removing the</font>

339
00:15:18,350 --> 00:15:24,140
SDK completely which in that<font color="#E5E5E5"> case</font><font color="#CCCCCC"> is</font>

340
00:15:20,690 --> 00:15:27,410
also<font color="#E5E5E5"> valid fix and this reinforces our</font>

341
00:15:24,140 --> 00:15:29,600
assumption that<font color="#E5E5E5"> also application code is</font>

342
00:15:27,410 --> 00:15:32,120
properly maintained<font color="#E5E5E5"> the included</font>

343
00:15:29,600 --> 00:15:33,290
libraries are not even in<font color="#E5E5E5"> the presence</font>

344
00:15:32,120 --> 00:15:37,970
of a severe

345
00:15:33,290 --> 00:15:41,000
security vulnerability now we have seen

346
00:15:37,970 --> 00:15:44,240
a lot<font color="#CCCCCC"> of issues and issues of third</font>

347
00:15:41,000 --> 00:15:46,540
<font color="#CCCCCC">party code and outdated</font><font color="#E5E5E5"> libraries but</font>

348
00:15:44,240 --> 00:15:49,130
how can<font color="#E5E5E5"> we remedy this situation</font><font color="#CCCCCC"> a</font>

349
00:15:46,540 --> 00:15:50,870
simple<font color="#CCCCCC"> approach would be</font><font color="#E5E5E5"> to point with</font>

350
00:15:49,130 --> 00:15:53,149
the fingers<font color="#CCCCCC"> at application developers</font>

351
00:15:50,870 --> 00:15:55,850
and say do<font color="#E5E5E5"> your job</font>

352
00:15:53,149 --> 00:15:58,519
update<font color="#E5E5E5"> your dependencies</font><font color="#CCCCCC"> and we</font><font color="#E5E5E5"> don't</font>

353
00:15:55,850 --> 00:16:00,920
have a<font color="#E5E5E5"> problem but</font><font color="#CCCCCC"> I would</font><font color="#E5E5E5"> argue that</font>

354
00:15:58,519 --> 00:16:02,990
this<font color="#E5E5E5"> is a very naive approach because</font>

355
00:16:00,920 --> 00:16:04,939
application developers are just one

356
00:16:02,990 --> 00:16:07,699
contributing<font color="#CCCCCC"> factor to</font><font color="#E5E5E5"> this overall</font>

357
00:16:04,940 --> 00:16:09,920
problem and<font color="#CCCCCC"> exist many</font><font color="#E5E5E5"> more actors in</font>

358
00:16:07,699 --> 00:16:12,529
the Android ecosystem<font color="#E5E5E5"> that similarly</font>

359
00:16:09,920 --> 00:16:15,529
contribute<font color="#E5E5E5"> and one of these actors is</font>

360
00:16:12,529 --> 00:16:19,130
the library developer library<font color="#CCCCCC"> developers</font>

361
00:16:15,529 --> 00:16:22,399
often<font color="#CCCCCC"> make it hard to adopt security</font>

362
00:16:19,130 --> 00:16:25,009
patches<font color="#E5E5E5"> because they are mixing security</font>

363
00:16:22,399 --> 00:16:26,860
updates with new functionality<font color="#E5E5E5"> and they</font>

364
00:16:25,009 --> 00:16:29,630
<font color="#E5E5E5">even remove</font><font color="#CCCCCC"> existing functionality</font>

365
00:16:26,860 --> 00:16:32,079
<font color="#E5E5E5">rendering the update incompatible to the</font>

366
00:16:29,630 --> 00:16:34,430
current version<font color="#CCCCCC"> and as a result</font>

367
00:16:32,079 --> 00:16:36,649
<font color="#E5E5E5">application developers have to spend an</font>

368
00:16:34,430 --> 00:16:40,519
additional<font color="#CCCCCC"> amount of effort</font><font color="#E5E5E5"> into</font>

369
00:16:36,649 --> 00:16:42,170
<font color="#E5E5E5">adopting the security patch</font><font color="#CCCCCC"> I would</font>

370
00:16:40,519 --> 00:16:45,290
further argue that<font color="#E5E5E5"> Android needs</font>

371
00:16:42,170 --> 00:16:48,399
additional platform support<font color="#CCCCCC"> in contrast</font>

372
00:16:45,290 --> 00:16:51,349
to<font color="#E5E5E5"> other material ecosystems like iOS or</font>

373
00:16:48,399 --> 00:16:54,139
JavaScript<font color="#E5E5E5"> Android does not have a</font>

374
00:16:51,350 --> 00:16:56,260
dedicated package manager<font color="#CCCCCC"> and these are</font>

375
00:16:54,139 --> 00:16:58,670
important for app developers to

376
00:16:56,260 --> 00:17:02,630
<font color="#E5E5E5">conveniently search for and compare</font>

377
00:16:58,670 --> 00:17:04,459
<font color="#E5E5E5">difference or party libraries and then</font>

378
00:17:02,630 --> 00:17:08,630
there's also need for<font color="#E5E5E5"> improved</font>

379
00:17:04,459 --> 00:17:10,429
development<font color="#CCCCCC"> to it so application</font>

380
00:17:08,630 --> 00:17:13,040
developers are typically good at

381
00:17:10,429 --> 00:17:16,309
programming<font color="#E5E5E5"> but they're</font><font color="#CCCCCC"> only a very</font>

382
00:17:13,040 --> 00:17:18,290
<font color="#CCCCCC">limited knowledge</font><font color="#E5E5E5"> and security so if you</font>

383
00:17:16,309 --> 00:17:19,879
could require them<font color="#E5E5E5"> to keep their</font>

384
00:17:18,290 --> 00:17:21,770
dependencies<font color="#CCCCCC"> up-to-date</font>

385
00:17:19,880 --> 00:17:24,439
you should also<font color="#E5E5E5"> equip them with the</font>

386
00:17:21,770 --> 00:17:26,689
<font color="#CCCCCC">appropriate development tools and which</font>

387
00:17:24,439 --> 00:17:28,459
<font color="#E5E5E5">tools should warn them whenever</font><font color="#CCCCCC"> they are</font>

388
00:17:26,689 --> 00:17:30,799
using library versions with known

389
00:17:28,459 --> 00:17:32,330
security vulnerabilities and they should

390
00:17:30,799 --> 00:17:35,510
<font color="#E5E5E5">tell them to which extent they can</font>

391
00:17:32,330 --> 00:17:38,658
update outdated libraries<font color="#E5E5E5"> without having</font>

392
00:17:35,510 --> 00:17:41,960
<font color="#E5E5E5">to adapt and</font><font color="#CCCCCC"> to refactor application</font>

393
00:17:38,659 --> 00:17:44,659
code<font color="#E5E5E5"> and</font><font color="#CCCCCC"> finally</font><font color="#E5E5E5"> there are the market</font>

394
00:17:41,960 --> 00:17:46,880
operators<font color="#E5E5E5"> a market operators</font><font color="#CCCCCC"> should</font>

395
00:17:44,659 --> 00:17:49,610
adopt<font color="#E5E5E5"> state-of-the-art</font><font color="#CCCCCC"> analyses</font>

396
00:17:46,880 --> 00:17:52,040
to improve the application<font color="#CCCCCC"> vetting and</font>

397
00:17:49,610 --> 00:17:53,929
catch security issues that<font color="#CCCCCC"> haven't been</font>

398
00:17:52,040 --> 00:17:58,010
identified<font color="#CCCCCC"> during the</font><font color="#E5E5E5"> development</font>

399
00:17:53,930 --> 00:17:59,750
process<font color="#E5E5E5"> okay so we have seen it's a</font>

400
00:17:58,010 --> 00:18:02,210
party libraries<font color="#CCCCCC"> are indeed a</font>

401
00:17:59,750 --> 00:18:04,610
double-edged<font color="#E5E5E5"> sword</font><font color="#CCCCCC"> but does</font><font color="#E5E5E5"> it mean</font><font color="#CCCCCC"> that</font>

402
00:18:02,210 --> 00:18:07,850
we<font color="#E5E5E5"> should no</font><font color="#CCCCCC"> longer use them well</font>

403
00:18:04,610 --> 00:18:09,490
<font color="#E5E5E5">absolutely</font><font color="#CCCCCC"> not but whenever</font><font color="#E5E5E5"> we are</font><font color="#CCCCCC"> using</font>

404
00:18:07,850 --> 00:18:13,010
<font color="#E5E5E5">them we should always keep in mind</font>

405
00:18:09,490 --> 00:18:16,040
<font color="#E5E5E5">potential security implications now in</font>

406
00:18:13,010 --> 00:18:18,260
<font color="#E5E5E5">this talk I presented a novel library</font>

407
00:18:16,040 --> 00:18:20,060
detection approach<font color="#E5E5E5"> it even works in</font>

408
00:18:18,260 --> 00:18:23,270
spite of commonly<font color="#E5E5E5"> used obfuscation</font>

409
00:18:20,060 --> 00:18:25,639
techniques<font color="#E5E5E5"> and as that approach we could</font>

410
00:18:23,270 --> 00:18:28,960
for the first<font color="#CCCCCC"> time quantify the security</font>

411
00:18:25,640 --> 00:18:32,570
impact of the party code<font color="#CCCCCC"> in</font><font color="#E5E5E5"> Android apps</font>

412
00:18:28,960 --> 00:18:34,700
<font color="#E5E5E5">now with that we also raise</font><font color="#CCCCCC"> the</font>

413
00:18:32,570 --> 00:18:36,740
awareness for<font color="#E5E5E5"> this problem and</font><font color="#CCCCCC"> I hope</font>

414
00:18:34,700 --> 00:18:39,800
that our approach can<font color="#E5E5E5"> also form the</font>

415
00:18:36,740 --> 00:18:42,910
foundation<font color="#CCCCCC"> for more advanced</font><font color="#E5E5E5"> analyses</font>

416
00:18:39,800 --> 00:18:45,230
and improve<font color="#CCCCCC"> development tools and</font>

417
00:18:42,910 --> 00:18:48,500
<font color="#E5E5E5">finally there is no</font><font color="#CCCCCC"> silver bullet for</font>

418
00:18:45,230 --> 00:18:51,230
<font color="#E5E5E5">this problem while there exists a number</font>

419
00:18:48,500 --> 00:18:54,020
<font color="#CCCCCC">of short term actions that can</font><font color="#E5E5E5"> remedy</font>

420
00:18:51,230 --> 00:18:56,420
the situation to a certain extent<font color="#E5E5E5"> it</font>

421
00:18:54,020 --> 00:18:58,040
<font color="#E5E5E5">really requires the combined effort of</font>

422
00:18:56,420 --> 00:19:00,500
different actors<font color="#E5E5E5"> of the Android</font>

423
00:18:58,040 --> 00:19:05,950
ecosystem<font color="#E5E5E5"> to improve on the current</font>

424
00:19:00,500 --> 00:19:05,950
status<font color="#CCCCCC"> quo more sustainably</font><font color="#E5E5E5"> thank you</font>

