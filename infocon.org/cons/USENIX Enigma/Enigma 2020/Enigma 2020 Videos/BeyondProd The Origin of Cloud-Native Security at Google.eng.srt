1
00:00:16,170 --> 00:00:20,410
so yes Brenda Baker tech lead for cloud

2
00:00:18,940 --> 00:00:23,830
security Google today I want to talk

3
00:00:20,410 --> 00:00:26,550
about our philosophy our approach to

4
00:00:23,830 --> 00:00:29,259
internal production security at Google

5
00:00:26,550 --> 00:00:31,810
this is really the first time we're

6
00:00:29,259 --> 00:00:34,270
talking about this we recently put out a

7
00:00:31,810 --> 00:00:37,150
white paper on this topic in December

8
00:00:34,270 --> 00:00:38,620
and this is going to be an approach and

9
00:00:37,150 --> 00:00:41,650
a walk through some of the history the

10
00:00:38,620 --> 00:00:43,480
rationale the problems and how we've

11
00:00:41,650 --> 00:00:45,879
addressed these problems for security at

12
00:00:43,480 --> 00:00:47,860
Google so talk about the background the

13
00:00:45,879 --> 00:00:49,390
problems history I'm gonna go through

14
00:00:47,860 --> 00:00:51,519
and talk about some differences between

15
00:00:49,390 --> 00:00:53,080
traditional infrastructure and sort of

16
00:00:51,519 --> 00:00:54,519
this modern sort of cloud native

17
00:00:53,080 --> 00:00:57,640
security infrastructure that we've

18
00:00:54,519 --> 00:00:59,559
implemented in production at Google walk

19
00:00:57,640 --> 00:01:03,309
through some of the details on how those

20
00:00:59,559 --> 00:01:05,950
systems work and then sort of wrap up on

21
00:01:03,309 --> 00:01:10,119
you know how this is applicable outside

22
00:01:05,950 --> 00:01:11,799
of a place like Google so to start

23
00:01:10,119 --> 00:01:13,360
thinking about the problem space that we

24
00:01:11,799 --> 00:01:16,540
have to work with the Google or to think

25
00:01:13,360 --> 00:01:19,000
about how we can manage security when we

26
00:01:16,540 --> 00:01:22,960
have thousands tens of thousands of

27
00:01:19,000 --> 00:01:27,970
developers deploying several billion

28
00:01:22,960 --> 00:01:31,470
containerized workloads every week with

29
00:01:27,970 --> 00:01:34,030
many products that have a billion users

30
00:01:31,470 --> 00:01:38,310
and how can we manage security for these

31
00:01:34,030 --> 00:01:40,860
at scale repeatedly and consistently

32
00:01:38,310 --> 00:01:45,340
even in light of problems like this

33
00:01:40,860 --> 00:01:47,170
heartbleed a flaw and open SSL that

34
00:01:45,340 --> 00:01:48,730
allowed somebody to extract data if they

35
00:01:47,170 --> 00:01:51,580
could connect to any server that did TLS

36
00:01:48,730 --> 00:01:53,770
termination running open SSL or things

37
00:01:51,580 --> 00:01:56,140
like this shell-shocked remember this

38
00:01:53,770 --> 00:01:58,149
one this was a remote command execution

39
00:01:56,140 --> 00:01:59,440
through bash shell escape it was

40
00:01:58,150 --> 00:02:01,540
actually fairly prevalent a lot of

41
00:01:59,440 --> 00:02:03,250
software included this included

42
00:02:01,540 --> 00:02:06,010
libraries that allowed somebody access

43
00:02:03,250 --> 00:02:08,408
this vulnerability or things like this

44
00:02:06,010 --> 00:02:11,590
little more recently tcp sac that was a

45
00:02:08,408 --> 00:02:14,679
panic and potential do s and maybe even

46
00:02:11,590 --> 00:02:19,060
exploitation in the linux tcp/ip

47
00:02:14,680 --> 00:02:22,870
networking stack or things like this

48
00:02:19,060 --> 00:02:25,660
meltdown inspector and foreshadow and so

49
00:02:22,870 --> 00:02:28,650
on right cpu side-channel

50
00:02:25,660 --> 00:02:28,650
vulnerabilities

51
00:02:28,920 --> 00:02:31,500
if you think about what these things

52
00:02:29,730 --> 00:02:33,750
look like you know we're in a space that

53
00:02:31,500 --> 00:02:36,930
has really moved way past concerns of

54
00:02:33,750 --> 00:02:38,459
viruses and worms and phishing to an

55
00:02:36,930 --> 00:02:39,750
environment where we have to be

56
00:02:38,459 --> 00:02:41,810
concerned about vulnerabilities in

57
00:02:39,750 --> 00:02:44,940
common software common infrastructure

58
00:02:41,810 --> 00:02:47,090
the supply chain for how software finds

59
00:02:44,940 --> 00:02:49,410
its way into production and

60
00:02:47,090 --> 00:02:52,530
fundamentally even be concerned with

61
00:02:49,410 --> 00:02:58,440
flaws in how CPU and CPU isolation was

62
00:02:52,530 --> 00:03:00,420
supposed to work so given those concerns

63
00:02:58,440 --> 00:03:01,920
again how do we do this in a way that's

64
00:03:00,420 --> 00:03:03,839
consistent and can deal with patching

65
00:03:01,920 --> 00:03:05,850
and scale that we have to operate oh

66
00:03:03,840 --> 00:03:07,200
yeah and there's one other problem too

67
00:03:05,850 --> 00:03:10,819
we have to do this without actually

68
00:03:07,200 --> 00:03:14,040
having there be noticeable user impact

69
00:03:10,819 --> 00:03:16,518
right so to get there first we have to

70
00:03:14,040 --> 00:03:16,519
agree on a few things

71
00:03:16,640 --> 00:03:22,440
servers are cattle not pets the whole

72
00:03:20,910 --> 00:03:24,359
idea for this and to make this really

73
00:03:22,440 --> 00:03:26,670
work at scale is that no one server no

74
00:03:24,360 --> 00:03:27,959
one machine is special and you don't

75
00:03:26,670 --> 00:03:29,790
have a different type of machine for

76
00:03:27,959 --> 00:03:31,950
different types of workloads they're all

77
00:03:29,790 --> 00:03:33,358
interchangeable there's just one sort of

78
00:03:31,950 --> 00:03:35,040
compute fabric and things can move

79
00:03:33,359 --> 00:03:39,120
around things do move around all the

80
00:03:35,040 --> 00:03:42,000
time we also have to agree that security

81
00:03:39,120 --> 00:03:44,880
doesn't end at the network edge just

82
00:03:42,000 --> 00:03:48,420
because something's past an edge Akal a

83
00:03:44,880 --> 00:03:50,519
firewall checksum IP check or connect it

84
00:03:48,420 --> 00:03:53,488
in through the VPN doesn't mean that

85
00:03:50,519 --> 00:03:55,350
it's trusted okay so this is getting to

86
00:03:53,489 --> 00:03:57,390
this idea of a zero trust environment

87
00:03:55,350 --> 00:03:59,549
where just because somebody is present

88
00:03:57,390 --> 00:04:01,200
on the network we don't trust them

89
00:03:59,549 --> 00:04:05,609
in fact if they're just on the network

90
00:04:01,200 --> 00:04:06,839
we really don't want to trust them we

91
00:04:05,609 --> 00:04:08,010
also have to agree that developers

92
00:04:06,840 --> 00:04:10,170
shouldn't have to be security experts

93
00:04:08,010 --> 00:04:11,730
and what that really means is that we

94
00:04:10,170 --> 00:04:14,220
don't want developers to have to be

95
00:04:11,730 --> 00:04:16,320
concerning themselves with all of those

96
00:04:14,220 --> 00:04:18,720
vulnerabilities and patches and security

97
00:04:16,320 --> 00:04:19,918
issues I just mentioned we don't want

98
00:04:18,720 --> 00:04:21,390
developers to have to be concerning

99
00:04:19,918 --> 00:04:23,099
themselves with what's the right

100
00:04:21,390 --> 00:04:26,400
certificate policy that I should be

101
00:04:23,100 --> 00:04:27,570
setting and enforcing that needs to be

102
00:04:26,400 --> 00:04:29,909
part of the infrastructure needs to be

103
00:04:27,570 --> 00:04:31,080
outside of what developers have to be

104
00:04:29,910 --> 00:04:32,430
concerning themselves with because we

105
00:04:31,080 --> 00:04:35,330
want them to be productive and efficient

106
00:04:32,430 --> 00:04:37,610
and not all have to be security experts

107
00:04:35,330 --> 00:04:39,630
we also have to agree that workloads

108
00:04:37,610 --> 00:04:42,270
shouldn't be the place where we enforce

109
00:04:39,630 --> 00:04:42,870
security policy every time I want to

110
00:04:42,270 --> 00:04:45,599
update

111
00:04:42,870 --> 00:04:48,060
going back to that ssl policy i

112
00:04:45,600 --> 00:04:50,370
shouldn't have to push out new versions

113
00:04:48,060 --> 00:04:52,169
of my workload to change that i want to

114
00:04:50,370 --> 00:04:58,020
start enforcing perfect forward secrecy

115
00:04:52,169 --> 00:04:59,729
on certificate checks for example and

116
00:04:58,020 --> 00:05:00,960
the last thing is to make this kind of

117
00:04:59,729 --> 00:05:03,539
work can work at the scale that we

118
00:05:00,960 --> 00:05:06,409
operate we need all workloads to be run

119
00:05:03,540 --> 00:05:08,460
as containers really without exception

120
00:05:06,410 --> 00:05:10,050
and I'll get into account a little bit

121
00:05:08,460 --> 00:05:11,609
more what that means a minute and why

122
00:05:10,050 --> 00:05:13,830
that's so important for security

123
00:05:11,610 --> 00:05:16,919
it obviously has huge benefits just for

124
00:05:13,830 --> 00:05:18,270
deployment and workload management but

125
00:05:16,919 --> 00:05:21,359
there's there's a security angle here

126
00:05:18,270 --> 00:05:25,650
too and so if we step back for a minute

127
00:05:21,360 --> 00:05:27,770
back in 2014 we published this idea in

128
00:05:25,650 --> 00:05:30,450
this white paper called beyond Corp

129
00:05:27,770 --> 00:05:32,280
which at the time really looked at the

130
00:05:30,450 --> 00:05:35,099
changing environment for how people were

131
00:05:32,280 --> 00:05:36,659
and where people were doing work for any

132
00:05:35,100 --> 00:05:41,729
sort of an enterprise Google included

133
00:05:36,660 --> 00:05:43,560
and on beyond Corp the key assertion for

134
00:05:41,729 --> 00:05:46,409
beyond Corp is that the traditional

135
00:05:43,560 --> 00:05:48,450
network model no longer applies the

136
00:05:46,410 --> 00:05:50,700
perimeters not just the physical

137
00:05:48,450 --> 00:05:54,000
location of where people are or where

138
00:05:50,700 --> 00:05:55,200
the enterprise network is and just

139
00:05:54,000 --> 00:05:57,120
because something's inside the perimeter

140
00:05:55,200 --> 00:06:00,979
doesn't mean that it's blaster safe

141
00:05:57,120 --> 00:06:03,300
place to be or to host computing devices

142
00:06:00,979 --> 00:06:05,219
so really the idea would be on corporate

143
00:06:03,300 --> 00:06:08,490
is let's move past the network and let's

144
00:06:05,220 --> 00:06:10,169
think about not identity as where

145
00:06:08,490 --> 00:06:11,849
somebody is or what network ports are

146
00:06:10,169 --> 00:06:15,000
plugged into or what their IP address is

147
00:06:11,849 --> 00:06:18,930
but think about who the end user is and

148
00:06:15,000 --> 00:06:21,060
what's the security state and add a

149
00:06:18,930 --> 00:06:25,169
station of the device that they're using

150
00:06:21,060 --> 00:06:27,660
to access the network and so if you

151
00:06:25,169 --> 00:06:29,430
think about taking that model and kind

152
00:06:27,660 --> 00:06:31,770
of thinking about these problems and our

153
00:06:29,430 --> 00:06:33,960
dressing them for production it's really

154
00:06:31,770 --> 00:06:35,609
a very similar idea and if we just

155
00:06:33,960 --> 00:06:38,430
simply replace the enterprise with the

156
00:06:35,610 --> 00:06:40,200
data center replace personal computing

157
00:06:38,430 --> 00:06:42,900
devices with you know workloads and

158
00:06:40,200 --> 00:06:44,070
servers right this is kind of informing

159
00:06:42,900 --> 00:06:47,638
kind of where we're getting this idea

160
00:06:44,070 --> 00:06:50,820
for beyond prod so now let's get into

161
00:06:47,639 --> 00:06:52,650
some of those details I mentioned

162
00:06:50,820 --> 00:06:55,440
containers are really important to the

163
00:06:52,650 --> 00:06:56,080
model you know the quick idea for a

164
00:06:55,440 --> 00:06:59,770
containers

165
00:06:56,080 --> 00:07:01,628
workload is deployed with all of its

166
00:06:59,770 --> 00:07:03,008
dependencies packaged together all the

167
00:07:01,629 --> 00:07:05,409
libraries and other things that's going

168
00:07:03,009 --> 00:07:07,090
to include and the intent is that that

169
00:07:05,409 --> 00:07:10,000
container workload itself is immutable

170
00:07:07,090 --> 00:07:11,679
you don't hatch the container once it's

171
00:07:10,000 --> 00:07:13,469
been deployed you build a new one and

172
00:07:11,680 --> 00:07:16,509
you push that out in its replacement

173
00:07:13,469 --> 00:07:18,669
another key important aspect of how

174
00:07:16,509 --> 00:07:20,289
we've developed and structured services

175
00:07:18,669 --> 00:07:23,349
at Google is the idea around micro

176
00:07:20,289 --> 00:07:24,759
services this is taking a larger Sony

177
00:07:23,349 --> 00:07:26,770
traditional or more monolithic

178
00:07:24,759 --> 00:07:28,659
application and breaking it down into

179
00:07:26,770 --> 00:07:31,599
smaller pieces and deploying and

180
00:07:28,659 --> 00:07:34,360
managing those things independently but

181
00:07:31,599 --> 00:07:37,030
building up trust and policy that

182
00:07:34,360 --> 00:07:39,039
describes which micro services are make

183
00:07:37,030 --> 00:07:40,388
up a larger identity and which ones are

184
00:07:39,039 --> 00:07:43,389
allowed to talk to each other and which

185
00:07:40,389 --> 00:07:44,879
ones aren't and so we found that when

186
00:07:43,389 --> 00:07:46,930
you combine these two things together

187
00:07:44,879 --> 00:07:48,940
because we can break things into smaller

188
00:07:46,930 --> 00:07:51,129
pieces we can also patch and deploy much

189
00:07:48,940 --> 00:07:53,169
more frequently much more easily and we

190
00:07:51,129 --> 00:07:55,779
also can understand what we have and

191
00:07:53,169 --> 00:07:59,500
what it depends on and when somebody's

192
00:07:55,779 --> 00:08:00,879
using OpenSSL where that exists and so

193
00:07:59,500 --> 00:08:02,680
the idea of kind of these things all

194
00:08:00,879 --> 00:08:05,379
combined is often referred to as going

195
00:08:02,680 --> 00:08:08,440
cloud native really what it is it's

196
00:08:05,379 --> 00:08:09,849
informed by our history and developing

197
00:08:08,440 --> 00:08:10,900
and running cloud services but I think

198
00:08:09,849 --> 00:08:13,389
it's really applicable to any

199
00:08:10,900 --> 00:08:18,159
environment whether you're deploying 100

200
00:08:13,389 --> 00:08:19,960
containers or billion containers so we

201
00:08:18,159 --> 00:08:22,089
think about the migration and sort of

202
00:08:19,960 --> 00:08:23,830
what a traditional security

203
00:08:22,089 --> 00:08:25,300
infrastructure looks like and kind of

204
00:08:23,830 --> 00:08:26,919
what this cloud native infrastructure

205
00:08:25,300 --> 00:08:28,870
model looks like along a couple

206
00:08:26,919 --> 00:08:31,029
dimensions if we think about it along

207
00:08:28,870 --> 00:08:32,560
the network dimension the traditional

208
00:08:31,029 --> 00:08:35,229
model might look something like you've

209
00:08:32,559 --> 00:08:37,239
got from it our base security it's about

210
00:08:35,229 --> 00:08:40,899
firewalls it's about IP whitelists and

211
00:08:37,240 --> 00:08:43,000
blacklists but communication once

212
00:08:40,899 --> 00:08:46,570
somebody's passed that firewall might be

213
00:08:43,000 --> 00:08:48,490
regarded as trusted called data model it

214
00:08:46,570 --> 00:08:50,500
really is this idea of zero trust where

215
00:08:48,490 --> 00:08:52,029
when we talk about zero trust we mean

216
00:08:50,500 --> 00:08:53,790
that because you're present on the

217
00:08:52,029 --> 00:08:56,079
network you're sending packets around

218
00:08:53,790 --> 00:08:57,459
that that isn't good enough that isn't

219
00:08:56,079 --> 00:09:02,140
actually anything that will confer you

220
00:08:57,459 --> 00:09:05,079
any sort of trust and if we think about

221
00:09:02,140 --> 00:09:07,089
identity and the idea of like service or

222
00:09:05,079 --> 00:09:09,530
workload identity a traditional model

223
00:09:07,089 --> 00:09:11,390
might tie identity to

224
00:09:09,530 --> 00:09:13,339
where something's running right so oh

225
00:09:11,390 --> 00:09:17,240
it's the database server and it has this

226
00:09:13,340 --> 00:09:18,440
IP address or oh it's the you know CRM

227
00:09:17,240 --> 00:09:20,390
application and it runs on these

228
00:09:18,440 --> 00:09:23,270
machines that have these IP addresses or

229
00:09:20,390 --> 00:09:25,340
these names in cloud native model

230
00:09:23,270 --> 00:09:27,020
because we're containerize using

231
00:09:25,340 --> 00:09:27,710
resources much more efficiently moving

232
00:09:27,020 --> 00:09:30,949
things around

233
00:09:27,710 --> 00:09:34,940
you can't tie any notion of identity or

234
00:09:30,950 --> 00:09:36,290
policy back to the mission right it has

235
00:09:34,940 --> 00:09:38,360
to come from somewhere else has to come

236
00:09:36,290 --> 00:09:41,060
from some other inherent idea of

237
00:09:38,360 --> 00:09:46,760
workload identity and not server

238
00:09:41,060 --> 00:09:48,349
identity I think about kind of where

239
00:09:46,760 --> 00:09:49,970
these security policy and security

240
00:09:48,350 --> 00:09:52,250
requirements get baked in a traditional

241
00:09:49,970 --> 00:09:54,650
model might say I mentioned before like

242
00:09:52,250 --> 00:09:56,900
that the policy that the application is

243
00:09:54,650 --> 00:09:58,310
required to enforce has to be compiled

244
00:09:56,900 --> 00:10:00,560
in or built in included with the

245
00:09:58,310 --> 00:10:01,849
application the cloud native model says

246
00:10:00,560 --> 00:10:03,469
look we've got this shared

247
00:10:01,850 --> 00:10:06,230
infrastructure and so we can have

248
00:10:03,470 --> 00:10:07,790
requirements that live outside of your

249
00:10:06,230 --> 00:10:08,990
workload your component that are

250
00:10:07,790 --> 00:10:11,540
enforced by other things you have

251
00:10:08,990 --> 00:10:12,620
dependencies on I'll walk through a more

252
00:10:11,540 --> 00:10:15,579
detailed example of that in just a

253
00:10:12,620 --> 00:10:18,560
minute what that looks like in practice

254
00:10:15,580 --> 00:10:20,740
rollouts patching obviously is an

255
00:10:18,560 --> 00:10:22,550
important element of security

256
00:10:20,740 --> 00:10:24,110
traditional model might be because

257
00:10:22,550 --> 00:10:25,880
you've got a larger monolithic

258
00:10:24,110 --> 00:10:27,290
application made up of a lot of

259
00:10:25,880 --> 00:10:31,130
components and a lot of dependencies

260
00:10:27,290 --> 00:10:33,140
included in and because you me ramps

261
00:10:31,130 --> 00:10:35,330
have fewer instances of that thing

262
00:10:33,140 --> 00:10:37,610
running it can be a lot more difficult

263
00:10:35,330 --> 00:10:41,660
to patch or patching happens less lit

264
00:10:37,610 --> 00:10:43,100
often less often a cloud native model

265
00:10:41,660 --> 00:10:45,290
because we've got these standardized

266
00:10:43,100 --> 00:10:48,530
small things we are in essentially

267
00:10:45,290 --> 00:10:50,420
continuously patching we also can do

268
00:10:48,530 --> 00:10:52,010
sort of a blue-green deployment model

269
00:10:50,420 --> 00:10:53,510
where you've patched some things and

270
00:10:52,010 --> 00:10:55,310
check to make sure they still work right

271
00:10:53,510 --> 00:10:57,170
before you actually do a wider rollout

272
00:10:55,310 --> 00:10:58,969
rather than bring the whole application

273
00:10:57,170 --> 00:11:01,099
down bring the new one up we're doing

274
00:10:58,970 --> 00:11:06,050
this sort of constant update and patch

275
00:11:01,100 --> 00:11:08,330
cycle a traditional infrastructure

276
00:11:06,050 --> 00:11:10,180
security model might look at the unit of

277
00:11:08,330 --> 00:11:12,830
isolation rights for separation as

278
00:11:10,180 --> 00:11:15,530
strictly around the physical machine or

279
00:11:12,830 --> 00:11:18,410
maybe the virtual machine cloud native

280
00:11:15,530 --> 00:11:19,640
model because we are been packing and

281
00:11:18,410 --> 00:11:20,529
we're using things more efficiently and

282
00:11:19,640 --> 00:11:23,589
workloads are moving

283
00:11:20,529 --> 00:11:26,319
and because we often will see workloads

284
00:11:23,589 --> 00:11:27,550
from different services that end up

285
00:11:26,319 --> 00:11:30,189
co-locating together in the same

286
00:11:27,550 --> 00:11:32,319
physical machine and because we're

287
00:11:30,189 --> 00:11:33,639
concerned about problems like where did

288
00:11:32,319 --> 00:11:35,800
the code come from

289
00:11:33,639 --> 00:11:37,899
what if it's compromised what if there's

290
00:11:35,800 --> 00:11:39,519
a cpu side channel and we can't

291
00:11:37,899 --> 00:11:41,829
necessarily guarantee or rely on

292
00:11:39,519 --> 00:11:43,660
physical emissions operation we've

293
00:11:41,829 --> 00:11:46,689
really had to invest in stronger

294
00:11:43,660 --> 00:11:47,829
sandboxing isolation technology there's

295
00:11:46,689 --> 00:11:49,719
something called Jeevitha that we've

296
00:11:47,829 --> 00:11:51,849
developed that's been reasonably

297
00:11:49,720 --> 00:11:53,709
effective against some categories of

298
00:11:51,850 --> 00:11:55,420
side channels and generally as a

299
00:11:53,709 --> 00:11:57,339
mechanism for sandboxing workloads as

300
00:11:55,420 --> 00:11:59,498
something we found really helpful to

301
00:11:57,339 --> 00:12:03,490
take us away from having to rely solely

302
00:11:59,499 --> 00:12:05,860
on OS process isolation we were sort of

303
00:12:03,490 --> 00:12:07,959
deem is not sufficient on its own and

304
00:12:05,860 --> 00:12:13,959
give us several additional layers of

305
00:12:07,959 --> 00:12:15,849
security between workloads so I'm going

306
00:12:13,959 --> 00:12:19,239
to take those principles as properties

307
00:12:15,850 --> 00:12:20,889
kind of walk through a life of a request

308
00:12:19,240 --> 00:12:25,329
for user data as it goes through

309
00:12:20,889 --> 00:12:26,680
production services at Google and talk

310
00:12:25,329 --> 00:12:29,229
about some of the technology that we've

311
00:12:26,680 --> 00:12:31,930
developed to impose or sort of implement

312
00:12:29,230 --> 00:12:35,800
the different security principles behind

313
00:12:31,930 --> 00:12:37,149
beyond prod at each step this is the

314
00:12:35,800 --> 00:12:39,069
first time we've talked about some of

315
00:12:37,149 --> 00:12:40,899
these things externally some of the

316
00:12:39,069 --> 00:12:42,819
names may have been changed for the

317
00:12:40,899 --> 00:12:44,350
white paper for the Googlers next

318
00:12:42,819 --> 00:12:45,759
Googlers in the room but I think you all

319
00:12:44,350 --> 00:12:48,370
understand some the concepts do as we go

320
00:12:45,759 --> 00:12:50,800
along so if we start at the left step

321
00:12:48,370 --> 00:12:53,290
one there's a request you end users

322
00:12:50,800 --> 00:12:56,079
requesting data for something Gmail or

323
00:12:53,290 --> 00:12:58,839
search or maps or whatever right and

324
00:12:56,079 --> 00:13:00,699
that request comes in and hits a Google

325
00:12:58,839 --> 00:13:03,790
front-end and the Google fronting is

326
00:13:00,699 --> 00:13:05,589
responsible for TLS termination she's

327
00:13:03,790 --> 00:13:08,679
much more TLS termination for all

328
00:13:05,589 --> 00:13:10,629
services at Google different services

329
00:13:08,679 --> 00:13:12,730
that Google don't run their own front

330
00:13:10,629 --> 00:13:15,040
ends the front ends aren't part of the

331
00:13:12,730 --> 00:13:17,679
services these exist as a layer as a

332
00:13:15,040 --> 00:13:19,360
service layer and what that also means

333
00:13:17,679 --> 00:13:21,519
is that when it comes time to do things

334
00:13:19,360 --> 00:13:24,240
like change that certificate policy or

335
00:13:21,519 --> 00:13:27,970
push that update for something like

336
00:13:24,240 --> 00:13:30,759
heartbleed or change from open SSL to

337
00:13:27,970 --> 00:13:33,370
boring SSL we have one place one place

338
00:13:30,759 --> 00:13:33,670
that we need to do that and that all the

339
00:13:33,370 --> 00:13:35,440
rest

340
00:13:33,670 --> 00:13:37,000
of the applications and services and

341
00:13:35,440 --> 00:13:40,870
backends downstream don't have to be

342
00:13:37,000 --> 00:13:43,180
updated to get that security benefit so

343
00:13:40,870 --> 00:13:44,980
the request is there but now the request

344
00:13:43,180 --> 00:13:47,680
needs to be forwarded on to the specific

345
00:13:44,980 --> 00:13:48,940
application that's responsible for

346
00:13:47,680 --> 00:13:52,030
whatever the Senate request is going to

347
00:13:48,940 --> 00:13:54,340
be to protect those communications

348
00:13:52,030 --> 00:13:55,390
internally we re encrypt using something

349
00:13:54,340 --> 00:13:58,810
that we're calling here

350
00:13:55,390 --> 00:14:00,069
application layer transport security and

351
00:13:58,810 --> 00:14:02,079
this allows us to do mutual

352
00:14:00,070 --> 00:14:05,050
authentication and protect the contents

353
00:14:02,080 --> 00:14:06,670
of the request and also to identify the

354
00:14:05,050 --> 00:14:10,540
both source and destination of the

355
00:14:06,670 --> 00:14:12,040
request with that being protected we can

356
00:14:10,540 --> 00:14:15,219
send this now on to the appropriate

357
00:14:12,040 --> 00:14:16,270
application fronting right the the part

358
00:14:15,220 --> 00:14:19,720
of the application is actually going to

359
00:14:16,270 --> 00:14:21,280
service this request one of the other

360
00:14:19,720 --> 00:14:24,520
things that we've done in order to

361
00:14:21,280 --> 00:14:27,400
essentially protect thee and reduce the

362
00:14:24,520 --> 00:14:29,650
data access behind a request is a

363
00:14:27,400 --> 00:14:33,459
requirement to take a live request and

364
00:14:29,650 --> 00:14:35,500
generate an end user context ticket and

365
00:14:33,460 --> 00:14:37,540
EUC ticket and this is something is

366
00:14:35,500 --> 00:14:40,180
implemented by again a different service

367
00:14:37,540 --> 00:14:43,719
this is a place where now we can enforce

368
00:14:40,180 --> 00:14:46,989
separate security policy around user and

369
00:14:43,720 --> 00:14:50,140
user access so when the application

370
00:14:46,990 --> 00:14:52,840
front end then can request it over to

371
00:14:50,140 --> 00:14:55,030
the end user authentication service and

372
00:14:52,840 --> 00:14:57,520
prove that there is a live end user

373
00:14:55,030 --> 00:15:00,250
request and get that validated it gets

374
00:14:57,520 --> 00:15:01,689
back this EUC ticket and why that's

375
00:15:00,250 --> 00:15:03,220
important is we only want these

376
00:15:01,690 --> 00:15:06,130
application front ends to be able to

377
00:15:03,220 --> 00:15:07,900
then go on and request data for users

378
00:15:06,130 --> 00:15:12,310
who are actively using the service in

379
00:15:07,900 --> 00:15:18,790
the moment at that time so now the

380
00:15:12,310 --> 00:15:21,310
fronting at step four will now place the

381
00:15:18,790 --> 00:15:22,719
request back into the service back-end

382
00:15:21,310 --> 00:15:24,189
for the storage system that's

383
00:15:22,720 --> 00:15:26,530
implementing whatever back-end for

384
00:15:24,190 --> 00:15:29,620
storage that this service this fronting

385
00:15:26,530 --> 00:15:31,180
decided to rely on again microservice is

386
00:15:29,620 --> 00:15:33,250
an decoupling of things these are all

387
00:15:31,180 --> 00:15:35,349
the same thing the application doesn't

388
00:15:33,250 --> 00:15:38,440
have its own storage it uses other

389
00:15:35,350 --> 00:15:41,010
storage services and so that requests in

390
00:15:38,440 --> 00:15:43,420
addition to being protected with alts

391
00:15:41,010 --> 00:15:46,069
will also be 40 along the end-user

392
00:15:43,420 --> 00:15:48,410
credential ticket

393
00:15:46,070 --> 00:15:51,560
to show that there's proof of live user

394
00:15:48,410 --> 00:15:53,420
requests here and the storage service

395
00:15:51,560 --> 00:15:55,670
now will in addition to validate and the

396
00:15:53,420 --> 00:15:57,529
request is coming from an application of

397
00:15:55,670 --> 00:16:00,469
front-end that it knows and is trusted

398
00:15:57,529 --> 00:16:02,509
and it's been validated that it also is

399
00:16:00,470 --> 00:16:05,000
passing an end-user credential for a

400
00:16:02,509 --> 00:16:08,360
live user request for the valid for the

401
00:16:05,000 --> 00:16:10,730
service and only when these policies are

402
00:16:08,360 --> 00:16:13,160
checked and validated by that storage

403
00:16:10,730 --> 00:16:14,509
back-end will it actually pull the data

404
00:16:13,160 --> 00:16:15,560
and send the data back into the

405
00:16:14,509 --> 00:16:23,300
front-end that's necessary for the

406
00:16:15,560 --> 00:16:26,119
request so the beyond product model

407
00:16:23,300 --> 00:16:28,910
though is not just about controlling

408
00:16:26,120 --> 00:16:31,069
access to data it's also about

409
00:16:28,910 --> 00:16:34,519
controlling access to the binaries that

410
00:16:31,069 --> 00:16:36,110
then can access data so really what's a

411
00:16:34,519 --> 00:16:37,810
year it's not just about infrastructure

412
00:16:36,110 --> 00:16:42,079
it's also about a development process

413
00:16:37,810 --> 00:16:43,040
and the artifacts of this process make

414
00:16:42,079 --> 00:16:45,680
up something we call binary

415
00:16:43,040 --> 00:16:48,139
authorization a a binary authorization

416
00:16:45,680 --> 00:16:50,569
for board Borg being the job management

417
00:16:48,139 --> 00:16:52,790
and scheduling system here and this is

418
00:16:50,569 --> 00:16:56,180
another piece of the policy enforcement

419
00:16:52,790 --> 00:16:58,370
of not how and what's applications can

420
00:16:56,180 --> 00:17:01,849
talk to which other applications but who

421
00:16:58,370 --> 00:17:04,069
and how a developer at Google can induce

422
00:17:01,850 --> 00:17:08,390
a change or update a container or update

423
00:17:04,069 --> 00:17:09,949
an application in production so to walk

424
00:17:08,390 --> 00:17:13,850
through what that workload workflow

425
00:17:09,949 --> 00:17:15,829
looks like starting here at step one

426
00:17:13,849 --> 00:17:18,408
where we have a Google developer who

427
00:17:15,829 --> 00:17:21,319
wants to submit a code change well the

428
00:17:18,409 --> 00:17:22,490
first gate is code review there's a

429
00:17:21,319 --> 00:17:26,000
requirement that at least one of the

430
00:17:22,490 --> 00:17:27,709
developer and usually more based on you

431
00:17:26,000 --> 00:17:29,179
know having somebody who is a specialist

432
00:17:27,709 --> 00:17:31,970
in the language and somebody who owns

433
00:17:29,179 --> 00:17:34,220
the codebase so one or more additional

434
00:17:31,970 --> 00:17:37,640
people need to review and approve that

435
00:17:34,220 --> 00:17:41,840
code change and once it's approved it

436
00:17:37,640 --> 00:17:43,130
moves into a code repository that's you

437
00:17:41,840 --> 00:17:45,799
know a central service that's run as a

438
00:17:43,130 --> 00:17:47,690
distributed code system but it's not on

439
00:17:45,799 --> 00:17:49,460
their workstation right they're not

440
00:17:47,690 --> 00:17:51,440
going to be doing this build locally

441
00:17:49,460 --> 00:17:54,740
they're going to be doing us build on a

442
00:17:51,440 --> 00:17:58,680
system that is itself another secure

443
00:17:54,740 --> 00:18:01,410
micro service set up and this secure

444
00:17:58,680 --> 00:18:04,200
see I CDs so this build and deploy

445
00:18:01,410 --> 00:18:07,080
pipeline will go through and build the

446
00:18:04,200 --> 00:18:09,810
binary run validation tests and then

447
00:18:07,080 --> 00:18:12,149
ultimately sign the result with this

448
00:18:09,810 --> 00:18:14,760
binary Rother ization information about

449
00:18:12,150 --> 00:18:16,290
how and where this was built and so the

450
00:18:14,760 --> 00:18:17,670
resulting binary there's a resulting

451
00:18:16,290 --> 00:18:18,810
container that comes along with it also

452
00:18:17,670 --> 00:18:23,400
is bundled with this binary

453
00:18:18,810 --> 00:18:27,210
authorization information such that when

454
00:18:23,400 --> 00:18:29,850
we go to push this into production the

455
00:18:27,210 --> 00:18:31,800
production services then that are going

456
00:18:29,850 --> 00:18:34,439
to be accepting the update or the new

457
00:18:31,800 --> 00:18:36,960
build or the new service will check and

458
00:18:34,440 --> 00:18:39,060
enforce policy around where and how this

459
00:18:36,960 --> 00:18:40,800
was built to ensure that it actually

460
00:18:39,060 --> 00:18:45,179
came through that secure system that I

461
00:18:40,800 --> 00:18:47,940
mentioned in step one and step two we

462
00:18:45,180 --> 00:18:52,200
also further can isolate the workload

463
00:18:47,940 --> 00:18:54,540
using G Weiser sandbox technology so

464
00:18:52,200 --> 00:18:56,130
that the workload now if it happens to

465
00:18:54,540 --> 00:18:58,200
be running some other workloads on the

466
00:18:56,130 --> 00:19:00,720
same service are protected from each

467
00:18:58,200 --> 00:19:03,330
other with additional layers of

468
00:19:00,720 --> 00:19:05,340
protection none of your workload

469
00:19:03,330 --> 00:19:07,169
necessarily runs with G visor it depends

470
00:19:05,340 --> 00:19:09,780
a lot sometimes to on how and where the

471
00:19:07,170 --> 00:19:12,120
source code is originated or on how much

472
00:19:09,780 --> 00:19:15,120
exposure or how much data processing

473
00:19:12,120 --> 00:19:16,229
risk it has so if it came from upstream

474
00:19:15,120 --> 00:19:17,790
and we don't necessarily know where the

475
00:19:16,230 --> 00:19:22,590
code came from or if it's doing a lot of

476
00:19:17,790 --> 00:19:23,730
you know in peg encoding maybe that's

477
00:19:22,590 --> 00:19:30,990
something that we're more likely don't

478
00:19:23,730 --> 00:19:32,400
want to have to sandbox so overall those

479
00:19:30,990 --> 00:19:37,530
are the steps and the pieces that make

480
00:19:32,400 --> 00:19:39,240
up this beyond prod model you know miss

481
00:19:37,530 --> 00:19:42,870
I mentioned it's about protection at the

482
00:19:39,240 --> 00:19:45,300
network edge but beyond zero trust is a

483
00:19:42,870 --> 00:19:48,510
really important element here it's about

484
00:19:45,300 --> 00:19:51,600
knowing here trust between services it's

485
00:19:48,510 --> 00:19:53,670
about having trusted machines but we're

486
00:19:51,600 --> 00:19:54,840
running code with known provenance that

487
00:19:53,670 --> 00:19:58,230
came from somewhere that we have some

488
00:19:54,840 --> 00:20:00,659
identity information about it it's about

489
00:19:58,230 --> 00:20:01,970
choke points places outside the work

490
00:20:00,660 --> 00:20:05,670
load places where we can enforce

491
00:20:01,970 --> 00:20:07,650
consistent policy and do that so across

492
00:20:05,670 --> 00:20:11,160
all services that are running within

493
00:20:07,650 --> 00:20:12,320
Google not one by one it's about simple

494
00:20:11,160 --> 00:20:16,940
automated change

495
00:20:12,320 --> 00:20:18,769
rollout patch management and it's about

496
00:20:16,940 --> 00:20:20,389
isolation isolation between workloads

497
00:20:18,769 --> 00:20:23,240
that are running side by side on the

498
00:20:20,389 --> 00:20:28,850
same machine doing things beyond just OS

499
00:20:23,240 --> 00:20:32,240
isolation and for us yet making this

500
00:20:28,850 --> 00:20:35,719
change required substantial changes over

501
00:20:32,240 --> 00:20:37,700
time across two major dimensions both

502
00:20:35,720 --> 00:20:41,539
infrastructure and our development

503
00:20:37,700 --> 00:20:44,509
process we approach these simultaneously

504
00:20:41,539 --> 00:20:46,610
and incrementally but I think that the

505
00:20:44,509 --> 00:20:50,330
model overall that's described and

506
00:20:46,610 --> 00:20:52,908
beyond prod allows for opportunities for

507
00:20:50,330 --> 00:20:53,480
taking pieces right doing things in

508
00:20:52,909 --> 00:20:55,610
phases

509
00:20:53,480 --> 00:20:58,269
doing things where you could start from

510
00:20:55,610 --> 00:21:02,479
where you are with today pick one area

511
00:20:58,269 --> 00:21:04,159
and build from there well I think the

512
00:21:02,480 --> 00:21:05,690
full realization of the model and having

513
00:21:04,159 --> 00:21:07,820
all these pieces come together is the

514
00:21:05,690 --> 00:21:09,230
most powerful place to be I think each

515
00:21:07,820 --> 00:21:11,330
one of the things and topics i've talked

516
00:21:09,230 --> 00:21:15,070
about are on their own effective at

517
00:21:11,330 --> 00:21:15,070
mitigating different categories of risk

518
00:21:15,340 --> 00:21:19,428
so for us you know the benefits that

519
00:21:17,419 --> 00:21:21,980
we've seen in sort of making this change

520
00:21:19,429 --> 00:21:24,559
and and taking this philosophy and doing

521
00:21:21,980 --> 00:21:25,940
this beyond prod model have been around

522
00:21:24,559 --> 00:21:27,678
strengthening the security of our

523
00:21:25,940 --> 00:21:30,620
workload deployments and communication

524
00:21:27,679 --> 00:21:32,960
isolation about enforcing policy as

525
00:21:30,620 --> 00:21:34,939
chokepoints about decoupling policy from

526
00:21:32,960 --> 00:21:37,220
workloads you know this is really a lot

527
00:21:34,940 --> 00:21:38,870
about with just the bottom line of this

528
00:21:37,220 --> 00:21:41,570
is just making security something that's

529
00:21:38,870 --> 00:21:43,908
done everywhere it's done upfront and

530
00:21:41,570 --> 00:21:45,168
it's not something that our developers

531
00:21:43,909 --> 00:21:47,179
have to be considering themselves with

532
00:21:45,169 --> 00:21:49,429
day-in day-out let them focus on

533
00:21:47,179 --> 00:21:50,750
building services what's the security

534
00:21:49,429 --> 00:21:56,360
people focus on with the security

535
00:21:50,750 --> 00:21:58,519
concerns as I mentioned we developed a

536
00:21:56,360 --> 00:22:01,729
lot of systems and services and tools to

537
00:21:58,519 --> 00:22:04,730
make this model or reality we've open

538
00:22:01,730 --> 00:22:07,879
sourced many of these so I mentioned

539
00:22:04,730 --> 00:22:11,480
about having application layer transport

540
00:22:07,879 --> 00:22:14,570
security and mutual TLS I mentioned

541
00:22:11,480 --> 00:22:17,269
about TLS termination and having that

542
00:22:14,570 --> 00:22:19,700
reside outside of a workload you'll find

543
00:22:17,269 --> 00:22:21,980
some of that in the Envoy open source

544
00:22:19,700 --> 00:22:24,260
project you'll find the idea around

545
00:22:21,980 --> 00:22:26,240
having policy for which

546
00:22:24,260 --> 00:22:28,610
parts of a micro service are allowed to

547
00:22:26,240 --> 00:22:30,710
talk to each other and which our pcs are

548
00:22:28,610 --> 00:22:34,179
allowed which one should be blocked that

549
00:22:30,710 --> 00:22:36,710
idea's cord is something called sto

550
00:22:34,180 --> 00:22:38,750
having this idea of buying your

551
00:22:36,710 --> 00:22:40,310
authorization having code provenance

552
00:22:38,750 --> 00:22:41,980
where something was built from having

553
00:22:40,310 --> 00:22:44,389
these checks as they go into production

554
00:22:41,980 --> 00:22:45,800
is part of the kubernetes and mission

555
00:22:44,390 --> 00:22:48,710
controller you'll see it showing up in

556
00:22:45,800 --> 00:22:50,240
things like kritis OPA gatekeeper and we

557
00:22:48,710 --> 00:22:53,090
do have binary authorization for

558
00:22:50,240 --> 00:22:55,550
kubernetes as well and that isolation

559
00:22:53,090 --> 00:22:57,620
piece that strong sandbox is something

560
00:22:55,550 --> 00:22:59,149
that we've open-sourced a large portion

561
00:22:57,620 --> 00:23:01,040
of something called G Weiser

562
00:22:59,150 --> 00:23:03,460
there's only cured of that repet source

563
00:23:01,040 --> 00:23:06,470
project um

564
00:23:03,460 --> 00:23:08,120
this is a large undertaking there's a

565
00:23:06,470 --> 00:23:09,350
lot of concepts there's a lot of

566
00:23:08,120 --> 00:23:13,159
material here so we've been publishing

567
00:23:09,350 --> 00:23:14,600
white papers about beyond prod about a

568
00:23:13,160 --> 00:23:18,040
lot of the topics that are related to

569
00:23:14,600 --> 00:23:21,490
beyond prog binary authorization alts

570
00:23:18,040 --> 00:23:23,960
secure designed for infrastructure from

571
00:23:21,490 --> 00:23:28,280
hardware and bootstrapping all the way

572
00:23:23,960 --> 00:23:30,350
up we're also taking this opportunity

573
00:23:28,280 --> 00:23:32,990
with something called anthos which is

574
00:23:30,350 --> 00:23:35,000
really about taking us beyond prog model

575
00:23:32,990 --> 00:23:37,190
both for workloads and for security a

576
00:23:35,000 --> 00:23:39,800
lot of people to modernize both on-prem

577
00:23:37,190 --> 00:23:41,090
and cloud and hybrid cloud and a lot of

578
00:23:39,800 --> 00:23:43,190
these concepts and ideas were also

579
00:23:41,090 --> 00:23:45,530
building into anthos to make it easier

580
00:23:43,190 --> 00:23:47,120
for people to adopt this kind of cloud

581
00:23:45,530 --> 00:23:51,290
native type architecture in their own

582
00:23:47,120 --> 00:23:54,439
environments wherever they may be and

583
00:23:51,290 --> 00:23:55,820
with that gonna wrap I'd like to think

584
00:23:54,440 --> 00:23:57,520
enigma again for giving us an

585
00:23:55,820 --> 00:24:00,139
opportunity to start to talk more about

586
00:23:57,520 --> 00:24:01,790
what Google's security looks like from

587
00:24:00,140 --> 00:24:03,800
the inside I hope you found that

588
00:24:01,790 --> 00:24:04,700
informative and look 40 questions thank

589
00:24:03,800 --> 00:24:07,940
you

590
00:24:04,700 --> 00:24:07,940
[Applause]

