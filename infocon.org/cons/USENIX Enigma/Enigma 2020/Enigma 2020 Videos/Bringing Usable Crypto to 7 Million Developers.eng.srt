1
00:00:15,630 --> 00:00:19,360
thanks Ryan I appreciate it it's it's so

2
00:00:18,369 --> 00:00:22,090
good to be at an England

3
00:00:19,360 --> 00:00:24,040
see so many old friends and new faces as

4
00:00:22,090 --> 00:00:27,009
well so what I wanted to do in the next

5
00:00:24,040 --> 00:00:29,349
20 minutes or so is stare share a story

6
00:00:27,009 --> 00:00:30,460
on the project that I've been involved

7
00:00:29,349 --> 00:00:32,590
with for a while now

8
00:00:30,460 --> 00:00:35,860
around Indian encryption so let's dive

9
00:00:32,590 --> 00:00:37,900
in Ryan sort of covered this but just a

10
00:00:35,860 --> 00:00:39,519
couple quick things about me these are

11
00:00:37,900 --> 00:00:40,690
the things that I've focused on I think

12
00:00:39,519 --> 00:00:43,260
some of the folks may be familiar with

13
00:00:40,690 --> 00:00:45,280
some of the past projects listed here

14
00:00:43,260 --> 00:00:48,909
other things I've done that you may be

15
00:00:45,280 --> 00:00:51,040
aware of in the US the big mobile

16
00:00:48,909 --> 00:00:53,049
telecom carriers with the super cookie

17
00:00:51,040 --> 00:00:55,510
tracking some of the work we did with

18
00:00:53,049 --> 00:00:57,460
the FCC and then before kind of my

19
00:00:55,510 --> 00:00:59,530
public face in the security community I

20
00:00:57,460 --> 00:01:01,239
did a fair amount of work with the

21
00:00:59,530 --> 00:01:03,989
Defense Department Homeland Security and

22
00:01:01,239 --> 00:01:06,000
then I don't probably 10 15 years in

23
00:01:03,989 --> 00:01:07,780
healthcare research working on

24
00:01:06,000 --> 00:01:11,590
life-critical and safety critical

25
00:01:07,780 --> 00:01:16,180
systems which I think I think you start

26
00:01:11,590 --> 00:01:18,760
your career working on systems that for

27
00:01:16,180 --> 00:01:20,460
example are administering drugs for the

28
00:01:18,760 --> 00:01:24,850
first time ever in humans it sort of

29
00:01:20,460 --> 00:01:26,259
itches you have some instincts in that I

30
00:01:24,850 --> 00:01:26,710
think kind of inform you for the rest of

31
00:01:26,259 --> 00:01:30,700
your career

32
00:01:26,710 --> 00:01:32,798
so so with that let's dive in I wanted

33
00:01:30,700 --> 00:01:36,429
to start with some database myths and

34
00:01:32,799 --> 00:01:39,880
misconceptions talk about models both

35
00:01:36,429 --> 00:01:42,880
formal models as well as kind of mental

36
00:01:39,880 --> 00:01:44,710
models of trust systems and then I think

37
00:01:42,880 --> 00:01:46,630
the rest of the bulk of the talk will be

38
00:01:44,710 --> 00:01:48,908
what I hope folks are interested in

39
00:01:46,630 --> 00:01:53,109
which is the work we did on Indian

40
00:01:48,909 --> 00:01:54,130
encryption with MongoDB myth number one

41
00:01:53,109 --> 00:01:55,960
misconception

42
00:01:54,130 --> 00:02:00,699
so database encryption is a selves

43
00:01:55,960 --> 00:02:03,579
problem right we have no no shortage of

44
00:02:00,700 --> 00:02:06,969
tools and technologies in our toolkit to

45
00:02:03,579 --> 00:02:10,929
do all kinds of encrypting techniques

46
00:02:06,969 --> 00:02:12,400
and so you know you look in the cloud

47
00:02:10,929 --> 00:02:14,800
provider or software development kits

48
00:02:12,400 --> 00:02:17,260
you look in all the major relational or

49
00:02:14,800 --> 00:02:19,750
no sequel databases there exists

50
00:02:17,260 --> 00:02:21,370
different techniques to do encryption so

51
00:02:19,750 --> 00:02:26,080
this is it should be a pretty solved

52
00:02:21,370 --> 00:02:27,430
problem right no it is very much not in

53
00:02:26,080 --> 00:02:28,400
fact I would argue that one of the

54
00:02:27,430 --> 00:02:30,379
things

55
00:02:28,400 --> 00:02:32,480
one of the powerful lessons for me from

56
00:02:30,379 --> 00:02:34,640
this work that we've been doing for the

57
00:02:32,480 --> 00:02:37,010
last two years is that I'm not even sure

58
00:02:34,640 --> 00:02:38,510
we've got a shared lexicon in the

59
00:02:37,010 --> 00:02:40,340
technology space for what that even

60
00:02:38,510 --> 00:02:41,179
means to have an encrypted database and

61
00:02:40,340 --> 00:02:43,340
whenever there's like one of these

62
00:02:41,180 --> 00:02:44,780
really high-profile kind of public

63
00:02:43,340 --> 00:02:47,840
breaches and there's the conversations

64
00:02:44,780 --> 00:02:49,280
about that inevitably come up if only

65
00:02:47,840 --> 00:02:51,349
the database were encrypted then the

66
00:02:49,280 --> 00:02:53,540
attackers couldn't have done X or Y but

67
00:02:51,349 --> 00:02:55,730
if you talk to somebody who works in

68
00:02:53,540 --> 00:02:58,340
sort of the regulatory world or the

69
00:02:55,730 --> 00:03:00,888
compliance world versus I don't maybe

70
00:02:58,340 --> 00:03:02,840
system design or management they have

71
00:03:00,889 --> 00:03:05,870
very different understandings of what

72
00:03:02,840 --> 00:03:08,870
encryption means so so clearly you know

73
00:03:05,870 --> 00:03:11,569
TLS is one element of encryption and

74
00:03:08,870 --> 00:03:15,579
it's an important one right what about

75
00:03:11,569 --> 00:03:17,810
storage encryption right so security 101

76
00:03:15,579 --> 00:03:20,900
sensitive information should be

77
00:03:17,810 --> 00:03:22,700
encrypted at rest so full disk and whole

78
00:03:20,900 --> 00:03:23,780
disk encryption this is kind of table

79
00:03:22,700 --> 00:03:29,959
stakes I think in a lot of cloud

80
00:03:23,780 --> 00:03:31,609
provider context many years ago some of

81
00:03:29,959 --> 00:03:35,030
the biggest users of large-scale

82
00:03:31,609 --> 00:03:36,470
databases went to the the makers of that

83
00:03:35,030 --> 00:03:37,819
software and said we want to do

84
00:03:36,470 --> 00:03:40,519
something better because actually at the

85
00:03:37,819 --> 00:03:42,578
time when databasing what's called a

86
00:03:40,519 --> 00:03:45,769
whole database or tablespace level

87
00:03:42,579 --> 00:03:48,819
encryption was developed full disk

88
00:03:45,769 --> 00:03:52,040
encryption wasn't common at all and so

89
00:03:48,819 --> 00:03:55,578
in a sense it's sort of a it's sort of a

90
00:03:52,040 --> 00:03:57,500
stopgap measure the idea is that the the

91
00:03:55,579 --> 00:03:58,159
physical data store files that make up a

92
00:03:57,500 --> 00:03:59,659
database

93
00:03:58,159 --> 00:04:03,620
why don't we encrypt those with some

94
00:03:59,659 --> 00:04:07,489
kind of scheme and so you know provides

95
00:04:03,620 --> 00:04:10,040
some level of access separation or you

96
00:04:07,489 --> 00:04:11,900
know higher granularity of controls and

97
00:04:10,040 --> 00:04:13,548
so that that is important and it does

98
00:04:11,900 --> 00:04:16,639
address certain threats but it probably

99
00:04:13,549 --> 00:04:25,130
doesn't address a lot of threats that we

100
00:04:16,639 --> 00:04:28,490
may sort of of implicitly understand so

101
00:04:25,130 --> 00:04:30,110
in the context of of central models for

102
00:04:28,490 --> 00:04:32,479
databases I argue we've done a pretty

103
00:04:30,110 --> 00:04:34,099
good job addressing again encryption at

104
00:04:32,479 --> 00:04:36,199
rest in transit sorry

105
00:04:34,099 --> 00:04:37,820
so with modern TLS we've learned quite a

106
00:04:36,199 --> 00:04:40,430
bit in the last ten years or so with

107
00:04:37,820 --> 00:04:41,480
forward secrecy we better you know abuse

108
00:04:40,430 --> 00:04:43,550
resistance

109
00:04:41,480 --> 00:04:46,460
techniques and we've discovered that the

110
00:04:43,550 --> 00:04:49,120
tiniest bias is that the tiniest errors

111
00:04:46,460 --> 00:04:51,440
the tiniest differences in timing can

112
00:04:49,120 --> 00:04:53,570
can sometimes undermine the entire

113
00:04:51,440 --> 00:04:54,980
confidentiality of a payload so I think

114
00:04:53,570 --> 00:04:57,050
we've gotten you know between fee LS

115
00:04:54,980 --> 00:04:58,430
itself and HTTPS I think we've sort of

116
00:04:57,050 --> 00:04:59,990
developed more sophisticated

117
00:04:58,430 --> 00:05:01,940
understanding and and some better

118
00:04:59,990 --> 00:05:02,960
measures I think we in general were

119
00:05:01,940 --> 00:05:05,240
doing a pretty good job there

120
00:05:02,960 --> 00:05:07,729
I think encryption at rest is not bad

121
00:05:05,240 --> 00:05:09,500
right I mean if you on most modern

122
00:05:07,730 --> 00:05:11,510
operating systems when you install a

123
00:05:09,500 --> 00:05:13,460
system one of the first questions very

124
00:05:11,510 --> 00:05:15,680
early in the flow is should this you

125
00:05:13,460 --> 00:05:20,239
know root volume be encrypted and then

126
00:05:15,680 --> 00:05:22,340
it's done it's fair to argue many people

127
00:05:20,240 --> 00:05:23,990
aren't super thrilled with some of the

128
00:05:22,340 --> 00:05:25,909
trade-offs that have to happen but the

129
00:05:23,990 --> 00:05:28,520
point is that it's it's available it's

130
00:05:25,910 --> 00:05:34,220
accessible and it's widely used among

131
00:05:28,520 --> 00:05:36,770
developers and in systems world but the

132
00:05:34,220 --> 00:05:38,470
model where the database is doing

133
00:05:36,770 --> 00:05:40,479
encryption on records itself that that

134
00:05:38,470 --> 00:05:42,880
tablespace in the relational world

135
00:05:40,480 --> 00:05:46,940
collection level or whole database

136
00:05:42,880 --> 00:05:49,159
sometimes in the no sequel world the

137
00:05:46,940 --> 00:05:51,200
notion is we've got some sensitive

138
00:05:49,160 --> 00:05:52,970
records we're going to encrypt them and

139
00:05:51,200 --> 00:05:54,770
then but when the database starts up

140
00:05:52,970 --> 00:05:58,550
it's going to retrieve keys somewhere

141
00:05:54,770 --> 00:06:01,780
somehow and then the system and

142
00:05:58,550 --> 00:06:04,310
therefore the people who run that system

143
00:06:01,780 --> 00:06:07,280
depending on their privileged access can

144
00:06:04,310 --> 00:06:09,670
see the information so but who can see

145
00:06:07,280 --> 00:06:13,460
that plaintext right is it the DBA

146
00:06:09,670 --> 00:06:16,550
themselves is that the sysadmin usually

147
00:06:13,460 --> 00:06:17,479
yes right the database server if you're

148
00:06:16,550 --> 00:06:21,890
talking from an infrastructure

149
00:06:17,480 --> 00:06:25,040
perspective yep if you've got root or

150
00:06:21,890 --> 00:06:28,039
ring negative one in general there are

151
00:06:25,040 --> 00:06:29,600
some exceptions but in terms of what's

152
00:06:28,040 --> 00:06:30,170
actually implemented in the field in the

153
00:06:29,600 --> 00:06:31,880
wild

154
00:06:30,170 --> 00:06:33,380
generally speaking you've got visibility

155
00:06:31,880 --> 00:06:35,030
into memory you've got visibility into

156
00:06:33,380 --> 00:06:38,600
mounted volumes get visibility in the

157
00:06:35,030 --> 00:06:42,619
process which is a real issue with cloud

158
00:06:38,600 --> 00:06:44,300
providers right I would argue this is

159
00:06:42,620 --> 00:06:46,160
the model for most central databases

160
00:06:44,300 --> 00:06:48,290
which is we're gonna do all these

161
00:06:46,160 --> 00:06:49,280
complicated techniques but by the way

162
00:06:48,290 --> 00:06:51,050
the first thing I'm going to do is

163
00:06:49,280 --> 00:06:53,539
delegate my keys back to the very thing

164
00:06:51,050 --> 00:06:55,690
that I'm not sure I want to trust to get

165
00:06:53,540 --> 00:06:58,640
it to Merrill

166
00:06:55,690 --> 00:07:00,740
so what is the source of trust right in

167
00:06:58,640 --> 00:07:02,659
these server-side encryption models a

168
00:07:00,740 --> 00:07:04,730
leak or breach is catastrophic and I

169
00:07:02,660 --> 00:07:05,930
don't just mean the kind of things we

170
00:07:04,730 --> 00:07:09,140
see quite a bit in terms of it like a

171
00:07:05,930 --> 00:07:10,670
cloud bucket or you know like a volume

172
00:07:09,140 --> 00:07:13,789
snapshot or an entire image that's

173
00:07:10,670 --> 00:07:15,620
that's leaked somehow I mean the entire

174
00:07:13,790 --> 00:07:18,200
sort of breadcrumb the entire digital

175
00:07:15,620 --> 00:07:20,060
ecosystem around a running system rights

176
00:07:18,200 --> 00:07:23,599
of logs backup files and profiles and

177
00:07:20,060 --> 00:07:25,520
crucially process memory the assumption

178
00:07:23,600 --> 00:07:28,660
in most central models of encrypted

179
00:07:25,520 --> 00:07:32,060
databases is if you've got privileged

180
00:07:28,660 --> 00:07:37,340
you know access either the human user or

181
00:07:32,060 --> 00:07:39,410
the process can see everything it's

182
00:07:37,340 --> 00:07:41,900
pinkie promise as a service right and

183
00:07:39,410 --> 00:07:43,310
that's the trust model I'm going to give

184
00:07:41,900 --> 00:07:44,989
you all my sense of information but

185
00:07:43,310 --> 00:07:46,850
they're encrypted and the first thing I

186
00:07:44,990 --> 00:07:49,910
do in the database starts is I'm gonna

187
00:07:46,850 --> 00:07:51,410
hand you my keys to then do these things

188
00:07:49,910 --> 00:07:57,860
that a database needs to do to operate

189
00:07:51,410 --> 00:08:00,710
on on these values so the main thesis of

190
00:07:57,860 --> 00:08:02,360
the talk is there are far fewer options

191
00:08:00,710 --> 00:08:04,280
available for developers to protect data

192
00:08:02,360 --> 00:08:08,170
and use data that's actually being used

193
00:08:04,280 --> 00:08:10,820
than you might think and a small

194
00:08:08,170 --> 00:08:14,630
six-year-old github maintained by Denver

195
00:08:10,820 --> 00:08:16,310
coder 9 doesn't count and you know small

196
00:08:14,630 --> 00:08:17,990
plugins and things like this if they're

197
00:08:16,310 --> 00:08:21,800
not easy to use they're not the tool if

198
00:08:17,990 --> 00:08:23,720
they don't scale if you know if they

199
00:08:21,800 --> 00:08:25,820
don't work in different languages then

200
00:08:23,720 --> 00:08:27,170
that's not really practical it's

201
00:08:25,820 --> 00:08:28,940
theoretical we've got some of these

202
00:08:27,170 --> 00:08:30,650
techniques and tools a lot of

203
00:08:28,940 --> 00:08:33,770
cryptographers a lot of academic

204
00:08:30,650 --> 00:08:35,510
photographers a lot of sort of proofs of

205
00:08:33,770 --> 00:08:38,360
concept code but I'm talking in

206
00:08:35,510 --> 00:08:41,780
widespread use in commercial and open

207
00:08:38,360 --> 00:08:43,280
source systems in theory we should be

208
00:08:41,780 --> 00:08:46,490
able to do a good job with this but in

209
00:08:43,280 --> 00:08:48,470
practice well there's it's a big chasm

210
00:08:46,490 --> 00:08:49,940
between what we might be able to do

211
00:08:48,470 --> 00:08:52,820
theoretically and what we actually have

212
00:08:49,940 --> 00:08:55,850
to do if I'm a mid-level Java developer

213
00:08:52,820 --> 00:08:57,590
at a bank or I'm trying to do you know

214
00:08:55,850 --> 00:09:00,590
maintain insurance records or I'm trying

215
00:08:57,590 --> 00:09:03,050
to maintain a cryptocurrency exchange or

216
00:09:00,590 --> 00:09:06,290
a gaming platform or any other kinds of

217
00:09:03,050 --> 00:09:07,699
sensitive records information as the

218
00:09:06,290 --> 00:09:13,020
developer as a front line

219
00:09:07,700 --> 00:09:15,120
those options are vanishingly whew and

220
00:09:13,020 --> 00:09:17,370
it comes down to this encryption arrest

221
00:09:15,120 --> 00:09:20,250
is only helpful if in fact we're resting

222
00:09:17,370 --> 00:09:22,680
right that vault is very powerful

223
00:09:20,250 --> 00:09:24,660
for the bank after hours and on weekends

224
00:09:22,680 --> 00:09:26,699
when the branch is closed not terribly

225
00:09:24,660 --> 00:09:29,459
helpful during business hours right

226
00:09:26,700 --> 00:09:31,020
in fact it's actively harmful if you

227
00:09:29,460 --> 00:09:32,790
can't get that door open while the banks

228
00:09:31,020 --> 00:09:33,689
running and this is implicitly the model

229
00:09:32,790 --> 00:09:36,529
but we've got I think in a lot of

230
00:09:33,690 --> 00:09:40,290
encrypted databases particularly when

231
00:09:36,529 --> 00:09:45,000
the you know so much reliance is put on

232
00:09:40,290 --> 00:09:46,680
a storage encryption encryption tress so

233
00:09:45,000 --> 00:09:48,060
can we encrypt the data at the

234
00:09:46,680 --> 00:09:49,560
application level can we encrypt it

235
00:09:48,060 --> 00:09:51,779
before it ever leaves the boundary of

236
00:09:49,560 --> 00:09:52,829
the system this should bring kind of

237
00:09:51,779 --> 00:09:56,010
familiar to the folks in this room

238
00:09:52,830 --> 00:09:57,960
because those workloads certain ones

239
00:09:56,010 --> 00:10:01,170
have these kinds of Indian or

240
00:09:57,960 --> 00:10:02,910
client-side encryption requirements so

241
00:10:01,170 --> 00:10:04,430
simple healthcare record we've got

242
00:10:02,910 --> 00:10:06,750
security number we've got contact

243
00:10:04,430 --> 00:10:08,670
information presumably very sensitive

244
00:10:06,750 --> 00:10:10,350
information if we can encrypt it at the

245
00:10:08,670 --> 00:10:12,719
application level before it ever touches

246
00:10:10,350 --> 00:10:14,610
the database I saw that as far as the

247
00:10:12,720 --> 00:10:17,550
database is concerned it's just a bunch

248
00:10:14,610 --> 00:10:19,100
of arbitrary binary fields that would be

249
00:10:17,550 --> 00:10:23,640
really useful and that's a powerful

250
00:10:19,100 --> 00:10:25,800
confidentiality protection so it is

251
00:10:23,640 --> 00:10:27,930
similar to in the end encryption and

252
00:10:25,800 --> 00:10:29,250
messaging apps the difference being the

253
00:10:27,930 --> 00:10:31,709
two ends are two different applications

254
00:10:29,250 --> 00:10:33,510
or it could be an analyst and

255
00:10:31,709 --> 00:10:34,859
application server an application server

256
00:10:33,510 --> 00:10:37,800
and some other kind of integration point

257
00:10:34,860 --> 00:10:41,220
but we don't trust the transit we don't

258
00:10:37,800 --> 00:10:42,750
trust the storage centrally now this

259
00:10:41,220 --> 00:10:45,180
isn't some sort of silver bullet right

260
00:10:42,750 --> 00:10:47,550
because if you do I have a running

261
00:10:45,180 --> 00:10:50,099
system where DBA level privileges are

262
00:10:47,550 --> 00:10:52,650
our breech or access tokens are you know

263
00:10:50,100 --> 00:10:54,750
obtained you can still delete records

264
00:10:52,650 --> 00:10:58,439
you can still destroy them but from

265
00:10:54,750 --> 00:11:02,490
confidentiality it's it is similar in

266
00:10:58,440 --> 00:11:04,620
that sense so we haven't in encryption

267
00:11:02,490 --> 00:11:06,089
we have messaging systems right so can't

268
00:11:04,620 --> 00:11:09,290
we just take some of those technologies

269
00:11:06,089 --> 00:11:15,120
and apply it it's a solved problem right

270
00:11:09,290 --> 00:11:16,380
it's not let's say your Python developer

271
00:11:15,120 --> 00:11:18,720
or a Java developer or a c-sharp

272
00:11:16,380 --> 00:11:21,310
developer you're doing Swift development

273
00:11:18,720 --> 00:11:24,459
on on mobile excuse me

274
00:11:21,310 --> 00:11:26,378
if I say here's an SDK they'll figure it

275
00:11:24,459 --> 00:11:29,199
out change the way that your queries

276
00:11:26,379 --> 00:11:31,089
work change the way that you do inserts

277
00:11:29,199 --> 00:11:34,269
updates and so forth it's not really an

278
00:11:31,089 --> 00:11:36,009
answer and by the way then if you do

279
00:11:34,269 --> 00:11:37,300
that you have to re-engineer any kind of

280
00:11:36,009 --> 00:11:39,309
existing code right because you can't

281
00:11:37,300 --> 00:11:41,079
just say insert in a database social

282
00:11:39,309 --> 00:11:42,759
security number blah search social

283
00:11:41,079 --> 00:11:44,829
security number X and bringing it you

284
00:11:42,759 --> 00:11:47,519
can't do that you've got a you've got to

285
00:11:44,829 --> 00:11:51,189
do all these kind of operations first

286
00:11:47,519 --> 00:11:55,420
well but if you go through all that and

287
00:11:51,189 --> 00:11:55,689
you have really strong zero leakage you

288
00:11:55,420 --> 00:11:58,149
know

289
00:11:55,689 --> 00:11:59,379
constructions you can only search your

290
00:11:58,149 --> 00:12:02,319
database drag with all these software

291
00:11:59,379 --> 00:12:05,439
development kits nope you can search by

292
00:12:02,319 --> 00:12:07,509
a reference or an indirect value so like

293
00:12:05,439 --> 00:12:08,379
a customer ID or an account code or

294
00:12:07,509 --> 00:12:11,290
something like that and bring an entire

295
00:12:08,379 --> 00:12:13,360
record back and then do decryption but

296
00:12:11,290 --> 00:12:15,430
you can't actually search for say a

297
00:12:13,360 --> 00:12:18,629
credit card number or a social security

298
00:12:15,430 --> 00:12:21,579
number and again this doesn't count

299
00:12:18,629 --> 00:12:24,399
because the reality is this is where the

300
00:12:21,579 --> 00:12:27,189
developers live right how do you do a es

301
00:12:24,399 --> 00:12:29,290
panning again or I'm gonna do a yes

302
00:12:27,189 --> 00:12:30,370
because that's good that's strong that's

303
00:12:29,290 --> 00:12:33,670
modern right but what does all this

304
00:12:30,370 --> 00:12:35,920
stuff mean see you know CBC CTR OCB

305
00:12:33,670 --> 00:12:38,559
which one again or I actually have got

306
00:12:35,920 --> 00:12:41,139
some working code that runs in Python I

307
00:12:38,559 --> 00:12:43,269
do an H Mac and then I do it in Java and

308
00:12:41,139 --> 00:12:45,519
I get two different results this is the

309
00:12:43,269 --> 00:12:47,050
world that most developers live in

310
00:12:45,519 --> 00:12:49,899
they're not security experts and they're

311
00:12:47,050 --> 00:12:52,329
certainly not cryptography experts so

312
00:12:49,899 --> 00:12:54,610
about two years ago this was the idea

313
00:12:52,329 --> 00:12:56,888
there are lots of building blocks there

314
00:12:54,610 --> 00:12:58,420
are lots of pieces of this that are just

315
00:12:56,889 --> 00:13:00,029
sort of waiting to be made easier to use

316
00:12:58,420 --> 00:13:02,079
by developers because we do as a

317
00:13:00,029 --> 00:13:05,170
security and privacy community I think

318
00:13:02,079 --> 00:13:08,529
we do focus a lot on how important you

319
00:13:05,170 --> 00:13:09,939
know usability is from end-users I don't

320
00:13:08,529 --> 00:13:11,139
think we talk so much about for

321
00:13:09,939 --> 00:13:14,259
developers I mean I would argue it's

322
00:13:11,139 --> 00:13:15,730
just as critical right so what if we

323
00:13:14,259 --> 00:13:17,259
didn't have to use an SDK what if we

324
00:13:15,730 --> 00:13:19,209
didn't have to rewrite all of our

325
00:13:17,259 --> 00:13:22,629
existing query code and what if we could

326
00:13:19,209 --> 00:13:26,559
actually search a database crazy idea as

327
00:13:22,629 --> 00:13:28,059
a database is meant to do what didn't

328
00:13:26,559 --> 00:13:30,730
you just create a key set of config and

329
00:13:28,059 --> 00:13:31,959
go so with that we're off to the races

330
00:13:30,730 --> 00:13:34,570
by the way I think this should be like

331
00:13:31,959 --> 00:13:39,189
mandatory on every enigma talk issues

332
00:13:34,570 --> 00:13:41,230
let this in the slide deck right so we

333
00:13:39,190 --> 00:13:42,970
built what's called we refer to as

334
00:13:41,230 --> 00:13:44,850
client side for the level encryption the

335
00:13:42,970 --> 00:13:48,040
idea is that it's application side

336
00:13:44,850 --> 00:13:52,120
encryption but even further it allows

337
00:13:48,040 --> 00:13:54,459
very detailed granular encryption so

338
00:13:52,120 --> 00:13:56,200
either down to the field or to an

339
00:13:54,460 --> 00:13:58,210
individual document sort of the

340
00:13:56,200 --> 00:14:02,350
equivalent of a cell in a relational

341
00:13:58,210 --> 00:14:03,570
world to give a sense of impact and I

342
00:14:02,350 --> 00:14:07,150
only mentioned this because I think more

343
00:14:03,570 --> 00:14:09,010
misunderstood it is the widest most use

344
00:14:07,150 --> 00:14:10,959
no sequel database in the world everyone

345
00:14:09,010 --> 00:14:13,150
who has a smartphone in this room right

346
00:14:10,960 --> 00:14:14,920
now you're running longer DB your bank

347
00:14:13,150 --> 00:14:16,689
runs MongoDB we have customers that are

348
00:14:14,920 --> 00:14:19,209
the 60 billion dollars a day and

349
00:14:16,690 --> 00:14:23,590
transactions among gonna be major gaming

350
00:14:19,210 --> 00:14:27,790
platforms healthcare etc it's it's got a

351
00:14:23,590 --> 00:14:29,500
huge impact we run on 19 platforms and I

352
00:14:27,790 --> 00:14:32,290
wasn't even really clear how to describe

353
00:14:29,500 --> 00:14:35,560
that because that's not exactly true we

354
00:14:32,290 --> 00:14:38,620
support 19 different languages as a as

355
00:14:35,560 --> 00:14:41,050
an organization we maintain 12 different

356
00:14:38,620 --> 00:14:43,270
driver you know language frameworks

357
00:14:41,050 --> 00:14:45,310
there's about seven or eight that are

358
00:14:43,270 --> 00:14:48,160
kind of community maintained but every

359
00:14:45,310 --> 00:14:50,109
major modern you know development

360
00:14:48,160 --> 00:14:52,709
language is supported I think we've

361
00:14:50,110 --> 00:14:56,110
actually got rust in the queue as well

362
00:14:52,710 --> 00:15:00,730
and everywhere so all the modern major

363
00:14:56,110 --> 00:15:03,910
operating systems x86 arm mobile power

364
00:15:00,730 --> 00:15:09,370
and yes even IBM zseries mainframes we

365
00:15:03,910 --> 00:15:11,920
run and run at volume so the

366
00:15:09,370 --> 00:15:13,630
implementation is we integrate this into

367
00:15:11,920 --> 00:15:14,860
the drivers and what we call the shell

368
00:15:13,630 --> 00:15:16,870
which is sort of like a command-line

369
00:15:14,860 --> 00:15:18,670
utility all the encryption/decryption

370
00:15:16,870 --> 00:15:21,460
again because it's client-side is done

371
00:15:18,670 --> 00:15:25,510
in the driver on the client before the

372
00:15:21,460 --> 00:15:28,210
boundary has ever passed in the Mongo DB

373
00:15:25,510 --> 00:15:29,800
world there's so the equivalent of

374
00:15:28,210 --> 00:15:34,270
sequel is called Mongo query language

375
00:15:29,800 --> 00:15:36,699
it's a way of rich querying over JSON

376
00:15:34,270 --> 00:15:39,430
fields both documents as well as nested

377
00:15:36,700 --> 00:15:42,730
set documents and we built this in a way

378
00:15:39,430 --> 00:15:45,069
that automatic encryption can be done so

379
00:15:42,730 --> 00:15:47,080
if you start have an application you say

380
00:15:45,070 --> 00:15:48,880
insert social security number

381
00:15:47,080 --> 00:15:50,500
and then give it the value I should be

382
00:15:48,880 --> 00:15:51,939
able to search for that and they should

383
00:15:50,500 --> 00:15:53,590
do that like do an insert through the

384
00:15:51,940 --> 00:15:57,040
retrieve to the find just like you

385
00:15:53,590 --> 00:15:59,170
normally have this is one of the biggest

386
00:15:57,040 --> 00:16:01,089
takeaways I want to leave you with we

387
00:15:59,170 --> 00:16:02,979
assumed we were going into this that you

388
00:16:01,090 --> 00:16:06,310
know 95% of the work we're gonna do is

389
00:16:02,980 --> 00:16:08,800
we're on cryptography probably 4% 5% of

390
00:16:06,310 --> 00:16:11,410
the work with cryptography 95% was

391
00:16:08,800 --> 00:16:13,719
taking a monster C++ code base and

392
00:16:11,410 --> 00:16:15,430
porting it to 19 different languages on

393
00:16:13,720 --> 00:16:17,380
all these different hardware platforms

394
00:16:15,430 --> 00:16:19,689
on all these different operating systems

395
00:16:17,380 --> 00:16:21,880
because we you if you talk to a

396
00:16:19,690 --> 00:16:25,210
cryptographer and say I want you to

397
00:16:21,880 --> 00:16:29,860
develop some kind of a searchable

398
00:16:25,210 --> 00:16:33,310
database some reasonable privacy leak

399
00:16:29,860 --> 00:16:35,940
you know margins go well in 2020 you

400
00:16:33,310 --> 00:16:38,020
might go a very different direction

401
00:16:35,940 --> 00:16:43,210
maybe you go into modern flavor of Linux

402
00:16:38,020 --> 00:16:45,460
maybe you use sort of more more recently

403
00:16:43,210 --> 00:16:47,290
developed constructions but in the

404
00:16:45,460 --> 00:16:49,990
enterprise world we have to support

405
00:16:47,290 --> 00:16:52,360
things going back 10 12 years to support

406
00:16:49,990 --> 00:16:54,190
ancient versions of Red Hat ancient

407
00:16:52,360 --> 00:16:55,410
versions of Debian ancient versions of

408
00:16:54,190 --> 00:16:58,240
z-series

409
00:16:55,410 --> 00:17:00,069
and sometimes they don't even have

410
00:16:58,240 --> 00:17:02,470
things like SIV

411
00:17:00,070 --> 00:17:04,270
encryption they know them so so then the

412
00:17:02,470 --> 00:17:06,579
discussion was well do we build it

413
00:17:04,270 --> 00:17:09,010
ourselves do we do we take some of these

414
00:17:06,579 --> 00:17:10,929
you know the lower level primitives and

415
00:17:09,010 --> 00:17:15,160
kind of you know put that together and

416
00:17:10,930 --> 00:17:18,490
then very fast answer was to fold a No

417
00:17:15,160 --> 00:17:19,990
don't do that and - look we've got 600

418
00:17:18,490 --> 00:17:21,819
engineers that work for us we're pretty

419
00:17:19,990 --> 00:17:24,130
good at building distributed databases

420
00:17:21,819 --> 00:17:26,500
we're not professional cryptographers so

421
00:17:24,130 --> 00:17:28,780
very early on in the process we decided

422
00:17:26,500 --> 00:17:29,950
let's engage some of the best people in

423
00:17:28,780 --> 00:17:31,720
the field if we want to use searchable

424
00:17:29,950 --> 00:17:35,620
encryption let's bring in people who do

425
00:17:31,720 --> 00:17:39,040
that if we want to do abuse resistant a

426
00:17:35,620 --> 00:17:42,429
EAD constructions let's work with people

427
00:17:39,040 --> 00:17:43,810
who do that if we at the end of this

428
00:17:42,430 --> 00:17:45,460
when we're implementing this in all

429
00:17:43,810 --> 00:17:46,629
these different languages we should

430
00:17:45,460 --> 00:17:48,670
probably have a pre thorough security

431
00:17:46,630 --> 00:17:50,590
review by people who are both security

432
00:17:48,670 --> 00:17:52,630
engineers and cryptographers like

433
00:17:50,590 --> 00:17:56,199
professional cryptographers and so

434
00:17:52,630 --> 00:17:58,180
that's what we did again just some of

435
00:17:56,200 --> 00:17:59,770
the details individual fields within a

436
00:17:58,180 --> 00:18:00,320
collection can be marked as encrypted or

437
00:17:59,770 --> 00:18:02,360
not

438
00:18:00,320 --> 00:18:04,039
and keys can be used on a per field or

439
00:18:02,360 --> 00:18:05,149
per document basis that last one is

440
00:18:04,039 --> 00:18:09,889
important because you could have an

441
00:18:05,149 --> 00:18:12,229
application user you know user Keys

442
00:18:09,889 --> 00:18:13,969
application level users each have their

443
00:18:12,230 --> 00:18:17,509
own encryption key or multiple

444
00:18:13,970 --> 00:18:19,399
encryption keys and so you could have a

445
00:18:17,509 --> 00:18:21,590
scenario where you say just destroy this

446
00:18:19,399 --> 00:18:23,719
one users key and all documents are

447
00:18:21,590 --> 00:18:25,399
irretrievable even in backups so that's

448
00:18:23,720 --> 00:18:27,590
really powerful and it addresses some of

449
00:18:25,399 --> 00:18:31,340
the kind of GDP are sort of scenarios

450
00:18:27,590 --> 00:18:33,620
you can envision so again let's take a

451
00:18:31,340 --> 00:18:37,340
JSON record like this in the manga world

452
00:18:33,620 --> 00:18:39,379
the top three are flat records the

453
00:18:37,340 --> 00:18:42,459
address field would be one of presumably

454
00:18:39,379 --> 00:18:46,610
multiple contact as a work home home to

455
00:18:42,460 --> 00:18:49,639
you know etc that's a nested document we

456
00:18:46,610 --> 00:18:52,279
could say let's just encrypt social

457
00:18:49,639 --> 00:18:53,570
security number or the street or if you

458
00:18:52,279 --> 00:18:57,909
want we can encrypt the entire sub

459
00:18:53,570 --> 00:19:01,009
document because I know this is a

460
00:18:57,909 --> 00:19:03,110
cryptography enthusiast crown I'll share

461
00:19:01,009 --> 00:19:05,299
some of them mechanics so we integrate

462
00:19:03,110 --> 00:19:07,189
cloud key services natively into the

463
00:19:05,299 --> 00:19:08,779
drivers we didn't want developers to

464
00:19:07,190 --> 00:19:11,480
have to go through hundreds of pages of

465
00:19:08,779 --> 00:19:13,730
API Docs to understand how Amazon works

466
00:19:11,480 --> 00:19:17,330
or Google's kms system and so forth or a

467
00:19:13,730 --> 00:19:20,269
Jers works it's authenticated encryption

468
00:19:17,330 --> 00:19:23,178
so in a EAD construction and encrypted

469
00:19:20,269 --> 00:19:24,980
Mac again it's abuse and misuse

470
00:19:23,179 --> 00:19:27,950
resistance we have a couple different

471
00:19:24,980 --> 00:19:30,590
modes so one is stochastic encryption

472
00:19:27,950 --> 00:19:35,049
with the narrowest leaked profiles we do

473
00:19:30,590 --> 00:19:38,120
offer a or we did engineer a

474
00:19:35,049 --> 00:19:40,549
deterministic mode for things like high

475
00:19:38,120 --> 00:19:43,189
entropy if you if you were to create a

476
00:19:40,549 --> 00:19:44,750
histogram of a data field something like

477
00:19:43,190 --> 00:19:46,309
social security number or credit card

478
00:19:44,750 --> 00:19:49,309
number is fairly flat and widely

479
00:19:46,309 --> 00:19:51,889
distributed and so for those narrow

480
00:19:49,309 --> 00:19:54,950
cases we can use something like

481
00:19:51,889 --> 00:19:57,379
deterministic search importantly we

482
00:19:54,950 --> 00:20:00,590
called on the native OS libraries so if

483
00:19:57,379 --> 00:20:02,269
you trust windows for the CNG if you

484
00:20:00,590 --> 00:20:04,908
trust Apple if you trust Red Hat if you

485
00:20:02,269 --> 00:20:06,649
trust NSS or more importantly if you've

486
00:20:04,909 --> 00:20:09,350
got an entire compliance framework

487
00:20:06,649 --> 00:20:11,299
that's built around at a stations or you

488
00:20:09,350 --> 00:20:12,850
know validations or things I gave an

489
00:20:11,299 --> 00:20:15,009
entire talk about the

490
00:20:12,850 --> 00:20:17,529
with Phipps but if you are in that world

491
00:20:15,009 --> 00:20:19,740
you can still take advantage of those

492
00:20:17,529 --> 00:20:23,370
but also from a practical perspective

493
00:20:19,740 --> 00:20:26,169
every time there's some you know small

494
00:20:23,370 --> 00:20:27,729
timing attack or side-channel you don't

495
00:20:26,169 --> 00:20:29,019
have to update your database software

496
00:20:27,730 --> 00:20:30,730
your drivers you just update the

497
00:20:29,019 --> 00:20:35,070
underlying operating system and you pick

498
00:20:30,730 --> 00:20:35,070
that up you know it sort of comes with

499
00:20:35,880 --> 00:20:45,159
so application side client side is the

500
00:20:40,659 --> 00:20:47,080
model within that context we try to use

501
00:20:45,159 --> 00:20:48,940
reasonable security hygiene there's no

502
00:20:47,080 --> 00:20:50,408
security guarantees around the

503
00:20:48,940 --> 00:20:53,559
application side so if your app server

504
00:20:50,409 --> 00:20:54,940
who actually takes in clear-text you

505
00:20:53,559 --> 00:20:57,490
know a raw healthcare record or raw

506
00:20:54,940 --> 00:21:00,580
financial record or raw you know contact

507
00:20:57,490 --> 00:21:02,019
information if that's compromised this

508
00:21:00,580 --> 00:21:04,299
won't help but this isn't meant to be

509
00:21:02,019 --> 00:21:07,240
you know a silver bullet it's meant to

510
00:21:04,299 --> 00:21:09,879
add some additional you know controls

511
00:21:07,240 --> 00:21:12,610
around a central model so that if an

512
00:21:09,879 --> 00:21:14,590
attacker were to have DBA level

513
00:21:12,610 --> 00:21:17,559
privileges if those access tokens were

514
00:21:14,590 --> 00:21:20,289
breached they'd have to do one more step

515
00:21:17,559 --> 00:21:22,360
which is to get the encryption keys as

516
00:21:20,289 --> 00:21:26,110
well which significantly raises the bar

517
00:21:22,360 --> 00:21:27,129
on attacks so stored field keys are

518
00:21:26,110 --> 00:21:30,309
protect by strong symmetric encryption

519
00:21:27,129 --> 00:21:32,259
if we only had one or two we could store

520
00:21:30,309 --> 00:21:34,360
that client-side this is another area

521
00:21:32,259 --> 00:21:40,620
where the academic world I think

522
00:21:34,360 --> 00:21:44,049
diverges vastly from practice a lot of

523
00:21:40,620 --> 00:21:47,289
structured searchable encryption assumes

524
00:21:44,049 --> 00:21:49,210
that you can build complex index trees

525
00:21:47,289 --> 00:21:50,408
and things on your application but that

526
00:21:49,210 --> 00:21:52,210
assumes you've got one application

527
00:21:50,409 --> 00:21:54,370
server in one database what if you've

528
00:21:52,210 --> 00:21:57,070
got thousands of nodes in a cluster

529
00:21:54,370 --> 00:21:58,899
globally and you've got thousands of

530
00:21:57,070 --> 00:22:00,340
application servers now you've got two

531
00:21:58,899 --> 00:22:03,370
problems because you've got a maintain

532
00:22:00,340 --> 00:22:04,539
state between all of those both the DB

533
00:22:03,370 --> 00:22:06,158
level and presumably your database

534
00:22:04,539 --> 00:22:08,350
already handles that but then also at

535
00:22:06,159 --> 00:22:10,090
the client side so that didn't make

536
00:22:08,350 --> 00:22:11,620
sense so what we can do is we can

537
00:22:10,090 --> 00:22:15,340
actually store those field encryption

538
00:22:11,620 --> 00:22:17,979
keys in the cluster itself well why

539
00:22:15,340 --> 00:22:19,149
would you put encryption keys on the

540
00:22:17,980 --> 00:22:21,159
very database you just said you don't

541
00:22:19,149 --> 00:22:22,570
trust we're protecting it with symmetric

542
00:22:21,159 --> 00:22:24,639
encryption and the decryption keys are

543
00:22:22,570 --> 00:22:25,530
never stored there so we can use all the

544
00:22:24,639 --> 00:22:27,969
replication

545
00:22:25,530 --> 00:22:30,280
you know all those other benefits if you

546
00:22:27,970 --> 00:22:31,780
basically trust AES to protect your data

547
00:22:30,280 --> 00:22:36,040
you should trust AES to protect your

548
00:22:31,780 --> 00:22:38,350
keys in the cloud context so most of the

549
00:22:36,040 --> 00:22:44,860
providers have an HSM backed you know

550
00:22:38,350 --> 00:22:47,050
root trust within their kms also I don't

551
00:22:44,860 --> 00:22:50,050
know the exact timing but I mean within

552
00:22:47,050 --> 00:22:52,149
days two weeks we'll be publishing the

553
00:22:50,050 --> 00:22:55,290
the security audits came from this so as

554
00:22:52,150 --> 00:22:58,120
you mentioned specifically so on the

555
00:22:55,290 --> 00:23:00,480
authenticated constructions we worked

556
00:22:58,120 --> 00:23:03,669
with Kenny Patterson at Royal Holloway

557
00:23:00,480 --> 00:23:07,060
to help come up with really interesting

558
00:23:03,670 --> 00:23:10,930
attacks and you know protections early

559
00:23:07,060 --> 00:23:13,300
on we worked with sending Kamara's team

560
00:23:10,930 --> 00:23:15,430
at Brown University his startup is

561
00:23:13,300 --> 00:23:18,129
called Hiroki on searchable encryption

562
00:23:15,430 --> 00:23:20,950
and then JP Amazon who you may be

563
00:23:18,130 --> 00:23:23,790
familiar with did the security audit on

564
00:23:20,950 --> 00:23:26,560
I think six different language platforms

565
00:23:23,790 --> 00:23:29,980
and so we'll be releasing those audits

566
00:23:26,560 --> 00:23:32,409
publicly very shortly we didn't design

567
00:23:29,980 --> 00:23:33,640
it this way but turns out because we're

568
00:23:32,410 --> 00:23:39,100
we're using symmetric encryption

569
00:23:33,640 --> 00:23:40,630
everywhere the you know some of the the

570
00:23:39,100 --> 00:23:42,520
core constructions turned out to be post

571
00:23:40,630 --> 00:23:45,820
quantum kind of by side benefit I'm

572
00:23:42,520 --> 00:23:48,040
pretty skeptical on quantum computing in

573
00:23:45,820 --> 00:23:51,460
general but if that's your thing we

574
00:23:48,040 --> 00:23:53,889
provide some margins against that so

575
00:23:51,460 --> 00:23:56,680
let's open the safe let's actually use a

576
00:23:53,890 --> 00:24:00,100
database for the way it's encrypted this

577
00:23:56,680 --> 00:24:02,610
is the magic one right so this is a line

578
00:24:00,100 --> 00:24:06,070
I want to find the security number

579
00:24:02,610 --> 00:24:08,320
behind the scenes client-side field

580
00:24:06,070 --> 00:24:11,580
level encryption looks at that says this

581
00:24:08,320 --> 00:24:15,760
fields been tags encrypted it's been

582
00:24:11,580 --> 00:24:17,350
marked with a certain encryption mode we

583
00:24:15,760 --> 00:24:18,730
can't ask the database for such security

584
00:24:17,350 --> 00:24:21,730
number nine and one because a it's not

585
00:24:18,730 --> 00:24:22,900
going to find it and B it's not going to

586
00:24:21,730 --> 00:24:24,490
know what to do with that we actually

587
00:24:22,900 --> 00:24:26,320
got to ask it for the encrypted value

588
00:24:24,490 --> 00:24:28,660
for that to return back so from the

589
00:24:26,320 --> 00:24:30,970
databases perspective you can be asking

590
00:24:28,660 --> 00:24:32,800
for anything it happens to be a string

591
00:24:30,970 --> 00:24:35,620
or an injury or or what have you that

592
00:24:32,800 --> 00:24:37,520
you've already declared but this is the

593
00:24:35,620 --> 00:24:39,320
translation that happens sort of behind

594
00:24:37,520 --> 00:24:41,210
scenes and then on the return side

595
00:24:39,320 --> 00:24:47,240
what's handed back to the application is

596
00:24:41,210 --> 00:24:52,810
the raw clear text a couple of sort of

597
00:24:47,240 --> 00:24:55,310
lessons from this dependencies are

598
00:24:52,810 --> 00:24:58,429
insane I am not at all in Windows

599
00:24:55,310 --> 00:25:01,129
developer but one of the one of the side

600
00:24:58,430 --> 00:25:03,400
effects of doing some of this work we I

601
00:25:01,130 --> 00:25:06,260
should mention to you by the way we had

602
00:25:03,400 --> 00:25:08,510
24 engineers full-time dedicated on this

603
00:25:06,260 --> 00:25:11,090
for two years so you know this is a

604
00:25:08,510 --> 00:25:12,710
major you know major ANA work on all

605
00:25:11,090 --> 00:25:17,090
these different platforms and and

606
00:25:12,710 --> 00:25:18,710
languages I had no idea I sort of had a

607
00:25:17,090 --> 00:25:22,699
little idea but I didn't really have a

608
00:25:18,710 --> 00:25:24,170
big idea how much how fragile some of

609
00:25:22,700 --> 00:25:28,780
the package managers and dependencies

610
00:25:24,170 --> 00:25:31,730
were there are flavors of Python where

611
00:25:28,780 --> 00:25:33,620
it's like burning sagebrush and doing

612
00:25:31,730 --> 00:25:37,910
incantations and like praying to the

613
00:25:33,620 --> 00:25:40,729
gods the right way and so these kind of

614
00:25:37,910 --> 00:25:42,500
practical matters it may seem trivial

615
00:25:40,730 --> 00:25:44,600
they may seem like kind of just you know

616
00:25:42,500 --> 00:25:46,190
details but if it's the difference

617
00:25:44,600 --> 00:25:47,480
between a developer never getting up and

618
00:25:46,190 --> 00:25:50,870
running because they can't get these

619
00:25:47,480 --> 00:25:55,280
installed that's critical same with go

620
00:25:50,870 --> 00:25:58,040
go has a way to wrap see libraries what

621
00:25:55,280 --> 00:26:01,100
I discovered is go doesn't have a distro

622
00:25:58,040 --> 00:26:03,740
it doesn't there's no real clear native

623
00:26:01,100 --> 00:26:05,659
way to do binary distributions for go

624
00:26:03,740 --> 00:26:07,700
libraries I said that was kind of

625
00:26:05,660 --> 00:26:11,180
challenging I also learned every way to

626
00:26:07,700 --> 00:26:14,750
torture maven possible so it was kind of

627
00:26:11,180 --> 00:26:16,190
a fun personal experience as well they

628
00:26:14,750 --> 00:26:20,870
don't teach you this in computer science

629
00:26:16,190 --> 00:26:23,320
101 or 102 or 501 no one read the docs

630
00:26:20,870 --> 00:26:25,070
and I mean no one we did probably 20

631
00:26:23,320 --> 00:26:27,919
usability studies where we brought

632
00:26:25,070 --> 00:26:30,439
developers in blind gave them access how

633
00:26:27,920 --> 00:26:33,290
they the they were varying levels of

634
00:26:30,440 --> 00:26:34,910
proficiency some were 10 plus your

635
00:26:33,290 --> 00:26:38,600
veterans somewhere you know a couple

636
00:26:34,910 --> 00:26:41,780
years out of school I learned so much

637
00:26:38,600 --> 00:26:43,189
about different sort of ways that at one

638
00:26:41,780 --> 00:26:47,690
point we had people that were literally

639
00:26:43,190 --> 00:26:50,580
trying to compile on Mac like Python

640
00:26:47,690 --> 00:26:53,070
like actually compile the

641
00:26:50,580 --> 00:26:54,870
seeing libraries on high that you don't

642
00:26:53,070 --> 00:26:57,090
have to do that just add this extra flag

643
00:26:54,870 --> 00:27:00,719
and just do a you know an update and

644
00:26:57,090 --> 00:27:02,490
you'll get it so operating systems have

645
00:27:00,720 --> 00:27:04,350
some of the weirdest libraries you can

646
00:27:02,490 --> 00:27:07,250
imagine there's literally something in

647
00:27:04,350 --> 00:27:10,949
open SSL I discovered called hobble

648
00:27:07,250 --> 00:27:14,610
which is I think it traces its lineage

649
00:27:10,950 --> 00:27:19,110
back to the the export level you know

650
00:27:14,610 --> 00:27:23,580
export era encryption days just to get

651
00:27:19,110 --> 00:27:26,100
to hello world took months took months

652
00:27:23,580 --> 00:27:28,460
of documentation of tutorials and we

653
00:27:26,100 --> 00:27:31,168
still got a ton of work to do

654
00:27:28,460 --> 00:27:33,630
but I guess part of the you know one of

655
00:27:31,169 --> 00:27:37,019
the lessons is make those copy/paste

656
00:27:33,630 --> 00:27:38,519
examples easy to use contain because the

657
00:27:37,019 --> 00:27:42,080
web's going to do it for you and the

658
00:27:38,519 --> 00:27:42,080
web's going to do it really really badly

659
00:27:43,639 --> 00:27:49,500
encrypted search has costs one thing I

660
00:27:46,679 --> 00:27:52,200
want to disabuse folks of and I have to

661
00:27:49,500 --> 00:27:54,510
kind of get into the weeds for for folks

662
00:27:52,200 --> 00:27:56,909
who are in this this area if you were to

663
00:27:54,510 --> 00:27:57,929
read popular media reports once they

664
00:27:56,909 --> 00:27:59,399
come away with the impression that

665
00:27:57,929 --> 00:28:01,710
homomorphic encryption is sort of going

666
00:27:59,399 --> 00:28:03,268
to save us all because it's got all

667
00:28:01,710 --> 00:28:04,679
these wonderful properties and we've had

668
00:28:03,269 --> 00:28:08,029
all kinds of improvements around

669
00:28:04,679 --> 00:28:12,750
performance and it's true we have made

670
00:28:08,029 --> 00:28:14,220
you know sizable performance impacts but

671
00:28:12,750 --> 00:28:16,230
I think homomorphic encryption is

672
00:28:14,220 --> 00:28:18,779
misunderstood it's it's meant for

673
00:28:16,230 --> 00:28:20,909
calculating integers I don't know that

674
00:28:18,779 --> 00:28:24,029
you but I store strings in my database I

675
00:28:20,909 --> 00:28:26,850
do searches it's important to do things

676
00:28:24,029 --> 00:28:29,070
like adding numbers but that's a you

677
00:28:26,850 --> 00:28:31,399
know it's kind of a narrow element and

678
00:28:29,070 --> 00:28:34,769
doing things like wildcard searches

679
00:28:31,399 --> 00:28:37,620
begins with ends with there there may be

680
00:28:34,769 --> 00:28:39,990
some other options and in fact one of

681
00:28:37,620 --> 00:28:41,428
the things that surprisingly few people

682
00:28:39,990 --> 00:28:43,580
are talking about is structured

683
00:28:41,429 --> 00:28:48,269
searchable or excuse me

684
00:28:43,580 --> 00:28:50,699
searchable symmetric encryption has some

685
00:28:48,269 --> 00:28:53,130
really promising properties and

686
00:28:50,700 --> 00:28:55,860
artifacts but just isn't seeing much

687
00:28:53,130 --> 00:28:59,309
publicity and I'd like that to get a

688
00:28:55,860 --> 00:29:01,419
little bit more visibility every

689
00:28:59,309 --> 00:29:04,210
database developer has

690
00:29:01,420 --> 00:29:05,320
some native functions that they like in

691
00:29:04,210 --> 00:29:07,000
the manga world there's something called

692
00:29:05,320 --> 00:29:09,780
the aggregation pipeline which that you

693
00:29:07,000 --> 00:29:13,450
do these multi stage pipeline analytics

694
00:29:09,780 --> 00:29:16,030
if you offer some kind of encryption

695
00:29:13,450 --> 00:29:18,190
solution but then give back one percent

696
00:29:16,030 --> 00:29:19,389
of what the developers used to you're

697
00:29:18,190 --> 00:29:22,000
not really offering much you're not

698
00:29:19,390 --> 00:29:26,170
really offering a practical solution key

699
00:29:22,000 --> 00:29:27,910
management you can't you can't

700
00:29:26,170 --> 00:29:32,350
underestimate how complicated this can

701
00:29:27,910 --> 00:29:34,660
be I don't know very many people who

702
00:29:32,350 --> 00:29:36,790
actually really understand I am I didn't

703
00:29:34,660 --> 00:29:39,040
the access management I'm not really

704
00:29:36,790 --> 00:29:41,379
clear any one person really does outside

705
00:29:39,040 --> 00:29:42,850
of the major cloud providers and again

706
00:29:41,380 --> 00:29:45,190
one of the things from this is that

707
00:29:42,850 --> 00:29:46,899
probably five percent or less than the

708
00:29:45,190 --> 00:29:48,880
actual engineering that we did was

709
00:29:46,900 --> 00:29:51,850
cryptography the rest was all around the

710
00:29:48,880 --> 00:29:54,790
developer ecosystem we don't control for

711
00:29:51,850 --> 00:29:57,490
example the node repositories or the job

712
00:29:54,790 --> 00:29:59,230
repositories or NGO we can contribute to

713
00:29:57,490 --> 00:30:01,330
them we can make we can sort of nudge in

714
00:29:59,230 --> 00:30:04,150
certain directions but there's a huge

715
00:30:01,330 --> 00:30:06,189
ecosystem of practical concerns and

716
00:30:04,150 --> 00:30:08,350
considerations that have to be taken

717
00:30:06,190 --> 00:30:14,100
into account particularly on a platform

718
00:30:08,350 --> 00:30:14,100
with this this widest reach of users

719
00:30:14,160 --> 00:30:18,040
engage professional photographers early

720
00:30:16,570 --> 00:30:22,060
in the design if you're going to enter

721
00:30:18,040 --> 00:30:23,409
this world at all right again I can do a

722
00:30:22,060 --> 00:30:24,730
whole talk on home morphic encryption

723
00:30:23,410 --> 00:30:30,220
and broke my heart

724
00:30:24,730 --> 00:30:32,590
years ago developer ease-of-use is more

725
00:30:30,220 --> 00:30:34,990
important than technical properties we

726
00:30:32,590 --> 00:30:37,060
can we can give people choices but if

727
00:30:34,990 --> 00:30:38,590
they don't have the information to make

728
00:30:37,060 --> 00:30:41,050
sense of those choices they're not real

729
00:30:38,590 --> 00:30:46,679
choices and we have to make those

730
00:30:41,050 --> 00:30:49,800
choices easier and with that I'll stop

731
00:30:46,680 --> 00:30:49,800
thank you

732
00:30:52,000 --> 00:30:54,060
you

