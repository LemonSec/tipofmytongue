1
00:00:15,740 --> 00:00:20,330
so my talk is next generation secure

2
00:00:18,260 --> 00:00:23,570
drop and it's gonna be about protecting

3
00:00:20,330 --> 00:00:24,918
journalists from our we're so brief

4
00:00:23,570 --> 00:00:26,750
overview today I'm going to talk about

5
00:00:24,919 --> 00:00:28,220
the whistleblowing platform secure drop

6
00:00:26,750 --> 00:00:30,259
and I'm going to motivate what the

7
00:00:28,220 --> 00:00:32,089
security goals are for whistleblowing

8
00:00:30,259 --> 00:00:33,440
platforms like it and then I'm going to

9
00:00:32,090 --> 00:00:35,030
explain how they're currently deployed

10
00:00:33,440 --> 00:00:38,330
architecture works what are some of the

11
00:00:35,030 --> 00:00:41,809
problems and then how we are redesigning

12
00:00:38,330 --> 00:00:43,129
it in a second iteration so before I

13
00:00:41,809 --> 00:00:44,300
start I want to show the current team

14
00:00:43,129 --> 00:00:45,890
these are all of the people who have

15
00:00:44,300 --> 00:00:48,709
been working hard on making this version

16
00:00:45,890 --> 00:00:50,900
of secure drop a reality so let's get

17
00:00:48,710 --> 00:00:54,199
started and I want to begin with a story

18
00:00:50,900 --> 00:00:56,089
of a whistleblower operation Merlyn was

19
00:00:54,199 --> 00:00:59,360
a covert u.s. operation beginning in

20
00:00:56,089 --> 00:01:01,699
1997 in which the CIA provided flawed

21
00:00:59,360 --> 00:01:03,530
nuclear weapons blueprints to Iran and

22
00:01:01,699 --> 00:01:05,360
the goal of that was to slow down their

23
00:01:03,530 --> 00:01:06,650
efforts to acquire nuclear weapons but

24
00:01:05,360 --> 00:01:08,119
in the end it was called by the

25
00:01:06,650 --> 00:01:09,710
journalists that broke the story James

26
00:01:08,119 --> 00:01:11,540
Rison one of the most reckless

27
00:01:09,710 --> 00:01:12,339
operations in the modern history of the

28
00:01:11,540 --> 00:01:15,229
CIA

29
00:01:12,340 --> 00:01:17,180
according to aizen's reporting providing

30
00:01:15,229 --> 00:01:19,340
these blueprints actually advanced the

31
00:01:17,180 --> 00:01:20,689
Iranian weapons program so who provided

32
00:01:19,340 --> 00:01:23,509
this information about one of the United

33
00:01:20,689 --> 00:01:25,820
States most secret ongoing programs well

34
00:01:23,509 --> 00:01:27,200
this person was charged with espionage

35
00:01:25,820 --> 00:01:29,600
for providing this information to

36
00:01:27,200 --> 00:01:32,719
journalists this is former CIA employee

37
00:01:29,600 --> 00:01:35,119
Jeffrey sterling he was identified using

38
00:01:32,719 --> 00:01:36,979
phone and email communications metadata

39
00:01:35,119 --> 00:01:38,960
and in what was called a trial by

40
00:01:36,979 --> 00:01:40,880
metadata by BBC News he was eventually

41
00:01:38,960 --> 00:01:42,710
convicted of multiple counts of

42
00:01:40,880 --> 00:01:45,679
espionage and sentenced to three and a

43
00:01:42,710 --> 00:01:47,509
half years in federal prison so in that

44
00:01:45,679 --> 00:01:48,950
story we saw one of the major security

45
00:01:47,509 --> 00:01:50,719
issues that journalists face while

46
00:01:48,950 --> 00:01:52,969
trying to connect with and protect

47
00:01:50,719 --> 00:01:54,979
sources they need to communicate and

48
00:01:52,969 --> 00:01:56,568
keep the identities of sources secret in

49
00:01:54,979 --> 00:01:58,399
the case of a leak investigation after

50
00:01:56,569 --> 00:02:00,950
an article is published that's the

51
00:01:58,399 --> 00:02:02,659
so-called first contact problem and we

52
00:02:00,950 --> 00:02:05,060
know that in a leak investigation some

53
00:02:02,659 --> 00:02:07,249
of the investigative techniques that are

54
00:02:05,060 --> 00:02:09,410
used are court orders to third parties

55
00:02:07,249 --> 00:02:10,910
so these are third parties like Internet

56
00:02:09,410 --> 00:02:12,500
company is their telecommunication

57
00:02:10,910 --> 00:02:14,390
companies and there's often a gag

58
00:02:12,500 --> 00:02:15,830
associated with that court order such

59
00:02:14,390 --> 00:02:17,899
that neither the journalist nor the

60
00:02:15,830 --> 00:02:20,660
source even knows that their records or

61
00:02:17,900 --> 00:02:22,340
the sources records have been seized and

62
00:02:20,660 --> 00:02:23,600
so that leads to our first goal we want

63
00:02:22,340 --> 00:02:25,400
to prevent the identification of

64
00:02:23,600 --> 00:02:27,440
journalistic sources if a sauce wants to

65
00:02:25,400 --> 00:02:28,920
reveal their identity to a journalist or

66
00:02:27,440 --> 00:02:31,920
to the public that should be

67
00:02:28,920 --> 00:02:33,569
their choice and we also want to make

68
00:02:31,920 --> 00:02:36,420
sure that the materials remain secret

69
00:02:33,569 --> 00:02:38,670
until the time of publication but

70
00:02:36,420 --> 00:02:40,049
there's another side to it or to this

71
00:02:38,670 --> 00:02:42,299
problem which is the threat to the

72
00:02:40,050 --> 00:02:44,730
journalists themselves we've seen many

73
00:02:42,300 --> 00:02:46,380
attacks on news organizations which the

74
00:02:44,730 --> 00:02:47,850
news organizations be happy that their

75
00:02:46,380 --> 00:02:50,010
website their internal infrastructure

76
00:02:47,850 --> 00:02:51,720
their social media and we've seen

77
00:02:50,010 --> 00:02:53,519
targeted attacks on individual

78
00:02:51,720 --> 00:02:55,650
journalists and in fact just today you

79
00:02:53,520 --> 00:02:57,030
might have seen Citizen lab shared a

80
00:02:55,650 --> 00:02:58,500
report regarding a New York Times

81
00:02:57,030 --> 00:03:00,930
journalist that was targeted with

82
00:02:58,500 --> 00:03:03,180
Pegasus spyware where he was lured into

83
00:03:00,930 --> 00:03:05,100
clicking on a supposed document with the

84
00:03:03,180 --> 00:03:07,410
promise of interesting information and

85
00:03:05,100 --> 00:03:08,940
this threat of phishing and Malware is

86
00:03:07,410 --> 00:03:10,859
particularly challenging for this

87
00:03:08,940 --> 00:03:13,739
population because part of their work is

88
00:03:10,860 --> 00:03:16,739
opening files from potentially unknown

89
00:03:13,739 --> 00:03:18,420
sources and that leads us to our third

90
00:03:16,739 --> 00:03:20,190
goal we want to protect journalists from

91
00:03:18,420 --> 00:03:21,988
being compromised via opening

92
00:03:20,190 --> 00:03:24,299
potentially malicious documents that

93
00:03:21,989 --> 00:03:27,000
they're sent by purported sources and

94
00:03:24,299 --> 00:03:29,549
this goal is going to be the focus of

95
00:03:27,000 --> 00:03:31,440
this talk but first I'm going to recap

96
00:03:29,549 --> 00:03:33,420
how secured or up presently handles

97
00:03:31,440 --> 00:03:34,859
these three goals so for those of you

98
00:03:33,420 --> 00:03:36,089
that aren't aware secured obviously

99
00:03:34,859 --> 00:03:38,340
whistleblowing platform that's currently

100
00:03:36,090 --> 00:03:39,720
used by these news organizations among

101
00:03:38,340 --> 00:03:41,910
others for source journalists

102
00:03:39,720 --> 00:03:44,880
communications and the way that it works

103
00:03:41,910 --> 00:03:46,890
is this is a brief architecture diagram

104
00:03:44,880 --> 00:03:48,930
so each installation is on-prem and

105
00:03:46,890 --> 00:03:51,958
consists of two servers and I choose

106
00:03:48,930 --> 00:03:54,000
organization one server is we call the

107
00:03:51,959 --> 00:03:56,340
application server runs two web apps one

108
00:03:54,000 --> 00:03:58,440
that sources use one that journalists

109
00:03:56,340 --> 00:04:00,780
use and both are available only as

110
00:03:58,440 --> 00:04:02,250
taught on in services and that's a

111
00:04:00,780 --> 00:04:05,010
service that's available only via the

112
00:04:02,250 --> 00:04:07,560
Tor anonymity network so this is what

113
00:04:05,010 --> 00:04:10,078
the web app that sources use look like

114
00:04:07,560 --> 00:04:12,810
so if they want to upload stuff for the

115
00:04:10,079 --> 00:04:14,430
first time then they click get started

116
00:04:12,810 --> 00:04:16,350
and if they're a returning source that

117
00:04:14,430 --> 00:04:18,390
they can read messages that journalists

118
00:04:16,350 --> 00:04:19,799
have left them and people do have kind

119
00:04:18,390 --> 00:04:22,950
of long-running conversations through

120
00:04:19,798 --> 00:04:23,250
this the other server is running a host

121
00:04:22,950 --> 00:04:25,050
based

122
00:04:23,250 --> 00:04:26,970
IDs OSAC which sends alerts to

123
00:04:25,050 --> 00:04:29,340
administrators administrators in this

124
00:04:26,970 --> 00:04:32,070
context means admins at the news

125
00:04:29,340 --> 00:04:33,780
organization the IT staff there and then

126
00:04:32,070 --> 00:04:35,639
there's also a networked firewall that

127
00:04:33,780 --> 00:04:37,950
segments the secure part of the network

128
00:04:35,639 --> 00:04:39,090
from the rest of the infra their

129
00:04:37,950 --> 00:04:40,950
documents and messages that are

130
00:04:39,090 --> 00:04:42,729
submitted by sources are stored

131
00:04:40,950 --> 00:04:45,039
encrypted to a public key Isis

132
00:04:42,729 --> 00:04:46,568
and with the instance and to make use of

133
00:04:45,039 --> 00:04:48,460
those documents the story for a

134
00:04:46,569 --> 00:04:50,319
journalist is they login using online

135
00:04:48,460 --> 00:04:52,029
workstation that's only every use for

136
00:04:50,319 --> 00:04:53,800
secured role and the OS that we use for

137
00:04:52,029 --> 00:04:56,259
that is tales which is a live operating

138
00:04:53,800 --> 00:04:58,360
system based on Debian so they they go

139
00:04:56,259 --> 00:05:00,159
ahead and log in one of the nice

140
00:04:58,360 --> 00:05:01,930
features of tales is this amnesia act

141
00:05:00,159 --> 00:05:03,580
feature so minimal state is persisted

142
00:05:01,930 --> 00:05:06,430
across reboots so that's nice and for

143
00:05:03,580 --> 00:05:07,628
the malware situation they go to this

144
00:05:06,430 --> 00:05:09,580
second web app that I talked about

145
00:05:07,629 --> 00:05:12,069
earlier they download these encrypted

146
00:05:09,580 --> 00:05:14,050
documents and then the kind of more

147
00:05:12,069 --> 00:05:16,809
challenging part for them occurs they

148
00:05:14,050 --> 00:05:19,059
copy those encrypted documents from this

149
00:05:16,809 --> 00:05:21,339
online workstation onto some kind of

150
00:05:19,059 --> 00:05:24,610
data transfer device sometimes that's

151
00:05:21,339 --> 00:05:27,699
USB drives sometimes it's burning a CD

152
00:05:24,610 --> 00:05:29,439
and they traverse an air gap so they

153
00:05:27,699 --> 00:05:31,270
take these documents onto an eggcup

154
00:05:29,439 --> 00:05:33,849
workstation that also runs the same

155
00:05:31,270 --> 00:05:35,948
operating system tales and that is the

156
00:05:33,849 --> 00:05:37,870
only place where the private key is to

157
00:05:35,949 --> 00:05:39,789
decrypt the docs and so the aedra crypts

158
00:05:37,870 --> 00:05:44,710
of their read it and decide what to do

159
00:05:39,789 --> 00:05:46,870
next so that's the story so far and so

160
00:05:44,710 --> 00:05:48,099
what what is the purpose what have we

161
00:05:46,870 --> 00:05:49,509
accomplished we've minimized the

162
00:05:48,099 --> 00:05:51,550
metadata trail we know that the source

163
00:05:49,509 --> 00:05:53,139
is using tor which means they're not you

164
00:05:51,550 --> 00:05:55,449
know directly emailing journalists are

165
00:05:53,139 --> 00:05:57,189
calling journalists like in the Rison so

166
00:05:55,449 --> 00:06:00,009
it get Wilder isin and in sterling case

167
00:05:57,189 --> 00:06:01,749
so that's good there's no third party to

168
00:06:00,009 --> 00:06:03,819
subpoena if there's anybody disappear

169
00:06:01,749 --> 00:06:05,649
it's by sending a court order to the

170
00:06:03,819 --> 00:06:07,240
news organization directly for like the

171
00:06:05,649 --> 00:06:09,189
keys to decrypt the documents stored on

172
00:06:07,240 --> 00:06:11,020
the servers that are on Prem and so the

173
00:06:09,189 --> 00:06:13,779
significantly more political cost

174
00:06:11,020 --> 00:06:15,490
associated with the doing that and the

175
00:06:13,779 --> 00:06:17,080
news organization would learn about it

176
00:06:15,490 --> 00:06:22,180
such that they can fight in the legal

177
00:06:17,080 --> 00:06:24,099
system and finally if an attacker gets

178
00:06:22,180 --> 00:06:25,990
code execution if malicious documents

179
00:06:24,099 --> 00:06:28,300
are sauce are submitted to this third

180
00:06:25,990 --> 00:06:33,279
goal they need to jump the a gap to

181
00:06:28,300 --> 00:06:34,300
accelerate any data so that's great in

182
00:06:33,279 --> 00:06:36,009
theory and that's what's currently

183
00:06:34,300 --> 00:06:37,149
deployed bought from running this in

184
00:06:36,009 --> 00:06:40,330
production for a few years we've

185
00:06:37,149 --> 00:06:41,529
observed a few issues and spoiler alert

186
00:06:40,330 --> 00:06:43,688
the issues are going to be basically

187
00:06:41,529 --> 00:06:45,879
under two umbrellas one is too much

188
00:06:43,689 --> 00:06:48,279
operational complexity for both

189
00:06:45,879 --> 00:06:49,180
journalists and admins and the other is

190
00:06:48,279 --> 00:06:50,829
going to be insufficient

191
00:06:49,180 --> 00:06:52,509
compartmentalization in the egg up

192
00:06:50,829 --> 00:06:53,740
environment so now let's kind of step

193
00:06:52,509 --> 00:06:55,209
through that architecture we just

194
00:06:53,740 --> 00:06:55,940
learned about and we'll describe the

195
00:06:55,209 --> 00:06:59,270
issues

196
00:06:55,940 --> 00:07:01,160
so the first is that this egg up process

197
00:06:59,270 --> 00:07:02,719
as it sounds is pretty cumbersome you

198
00:07:01,160 --> 00:07:04,070
know the process is cumbersome when

199
00:07:02,720 --> 00:07:07,010
there's a shoe and the architecture

200
00:07:04,070 --> 00:07:09,680
diagram and that leads to in some cases

201
00:07:07,010 --> 00:07:11,390
security failures where users will work

202
00:07:09,680 --> 00:07:12,830
around the air-gap for convenience and

203
00:07:11,390 --> 00:07:15,320
ease they'll take the private key and

204
00:07:12,830 --> 00:07:16,609
they'll put it on a networks device and

205
00:07:15,320 --> 00:07:18,590
it's rare but it's something that we

206
00:07:16,610 --> 00:07:20,780
have seen and and to be fair it's pretty

207
00:07:18,590 --> 00:07:22,429
understandable if you have a large

208
00:07:20,780 --> 00:07:24,380
quantity of traffic coming in through a

209
00:07:22,430 --> 00:07:26,750
secure drum it's your responsibility to

210
00:07:24,380 --> 00:07:27,710
check it that day and you have to do

211
00:07:26,750 --> 00:07:29,600
this every time you want to read

212
00:07:27,710 --> 00:07:31,099
something new it's a lot of time and

213
00:07:29,600 --> 00:07:32,510
journalists have lots of things to do

214
00:07:31,100 --> 00:07:35,840
that aren't you know jumbling around

215
00:07:32,510 --> 00:07:38,000
with laptops and USB drives another

216
00:07:35,840 --> 00:07:39,890
issue is the air gap it's not really a

217
00:07:38,000 --> 00:07:43,070
true air ground you know I described the

218
00:07:39,890 --> 00:07:45,620
USB drives going in to the egg-cam

219
00:07:43,070 --> 00:07:47,750
but those USB drives are reused in the

220
00:07:45,620 --> 00:07:49,880
case of people using USB for transfer

221
00:07:47,750 --> 00:07:51,830
and again that's done for convenience

222
00:07:49,880 --> 00:07:53,990
and ease since burning CDs to the dock

223
00:07:51,830 --> 00:07:56,510
to bring the documents into the air gap

224
00:07:53,990 --> 00:07:58,460
is a significant burden so why is that

225
00:07:56,510 --> 00:08:00,230
bad if an attacker can get code

226
00:07:58,460 --> 00:08:01,849
execution in the air-gap environment

227
00:08:00,230 --> 00:08:03,320
they can put whatever they want back on

228
00:08:01,850 --> 00:08:04,610
that USB Drive so they can put the

229
00:08:03,320 --> 00:08:07,340
private key on there they can put other

230
00:08:04,610 --> 00:08:09,020
sources documents in there and all those

231
00:08:07,340 --> 00:08:10,520
documents and the key are in the same

232
00:08:09,020 --> 00:08:12,710
environment and the journalist is going

233
00:08:10,520 --> 00:08:15,859
to dutifully take that USB Drive back to

234
00:08:12,710 --> 00:08:17,599
a network connected device another

235
00:08:15,860 --> 00:08:20,270
challenge is just kind of the

236
00:08:17,600 --> 00:08:22,160
maintenance of air gap systems so you

237
00:08:20,270 --> 00:08:24,200
know obviously we can't have automatic

238
00:08:22,160 --> 00:08:26,390
updates if the machine is air-gap so

239
00:08:24,200 --> 00:08:29,060
that means that unless someone is really

240
00:08:26,390 --> 00:08:31,460
diligent about keeping it up-to-date by

241
00:08:29,060 --> 00:08:33,049
manually bringing patches in what

242
00:08:31,460 --> 00:08:35,299
actually happens in sometimes in

243
00:08:33,049 --> 00:08:36,740
practice is the environment that we want

244
00:08:35,299 --> 00:08:38,390
to be the most hardened than the most

245
00:08:36,740 --> 00:08:40,219
protective where all the secrets are is

246
00:08:38,390 --> 00:08:41,809
becoming a software and software target

247
00:08:40,219 --> 00:08:45,080
as a function of time as it likes behind

248
00:08:41,809 --> 00:08:46,790
in updates and finally something that

249
00:08:45,080 --> 00:08:49,100
we've seen in production is people

250
00:08:46,790 --> 00:08:52,400
specifically target the a gap the

251
00:08:49,100 --> 00:08:54,560
secured with malware so a few years ago

252
00:08:52,400 --> 00:08:57,350
we had a security researcher as a

253
00:08:54,560 --> 00:08:59,839
demonstration send malware to instances

254
00:08:57,350 --> 00:09:02,120
to live instances exploiting a neun

255
00:08:59,839 --> 00:09:04,400
vulnerability to sign a message to

256
00:09:02,120 --> 00:09:06,830
himself using the C code or private key

257
00:09:04,400 --> 00:09:08,060
and so the problem there is that the

258
00:09:06,830 --> 00:09:09,410
air-gap environment is where the

259
00:09:08,060 --> 00:09:11,689
submission private key is used

260
00:09:09,410 --> 00:09:15,410
and ISIF actively unprotected once an

261
00:09:11,690 --> 00:09:17,000
attacker gets code execution so now

262
00:09:15,410 --> 00:09:18,889
we'll take a few steps by now that we've

263
00:09:17,000 --> 00:09:21,980
learned about these challenges informed

264
00:09:18,889 --> 00:09:23,660
by these issues what do we want well

265
00:09:21,980 --> 00:09:24,709
first and foremost we all know that we

266
00:09:23,660 --> 00:09:28,100
want to make sure that known

267
00:09:24,709 --> 00:09:29,599
vulnerabilities are patched we also want

268
00:09:28,100 --> 00:09:32,569
to isolate the submission key from

269
00:09:29,600 --> 00:09:34,100
potentially malicious submissions we

270
00:09:32,569 --> 00:09:35,750
also want to isolate each sources

271
00:09:34,100 --> 00:09:37,459
documents so if source a is malicious

272
00:09:35,750 --> 00:09:40,370
they should not be able to access source

273
00:09:37,459 --> 00:09:42,109
B's material and we want to recover from

274
00:09:40,370 --> 00:09:44,240
an attacker if that gets code execution

275
00:09:42,110 --> 00:09:46,759
in the I guess spoiler alert I'm gonna

276
00:09:44,240 --> 00:09:48,800
use VMs in the VM used to open

277
00:09:46,759 --> 00:09:50,779
submissions and while we're on it if we

278
00:09:48,800 --> 00:09:52,310
can provide defense in depth to defend

279
00:09:50,779 --> 00:09:55,850
against unknown vulnerabilities that

280
00:09:52,310 --> 00:09:57,349
would also be great so we have some

281
00:09:55,850 --> 00:09:58,730
other design considerations based on

282
00:09:57,350 --> 00:10:00,610
these challenges that I just described

283
00:09:58,730 --> 00:10:03,079
it has to be maintainable by

284
00:10:00,610 --> 00:10:05,389
non-specialists IT staff it's pretty

285
00:10:03,079 --> 00:10:07,910
rare and a news organization that there

286
00:10:05,389 --> 00:10:10,220
is someone who you know will even be

287
00:10:07,910 --> 00:10:11,719
kind of familiar with tor and some of

288
00:10:10,220 --> 00:10:13,759
these systems like it could be like a

289
00:10:11,720 --> 00:10:15,910
window shop and the Linux command line

290
00:10:13,759 --> 00:10:18,439
might not be that familiar to folks and

291
00:10:15,910 --> 00:10:20,209
the harder challenge is it needs to be

292
00:10:18,439 --> 00:10:22,189
usable by journalists so that means

293
00:10:20,209 --> 00:10:23,540
obviously no command line generalists

294
00:10:22,189 --> 00:10:24,740
don't really care what a private key is

295
00:10:23,540 --> 00:10:29,089
they don't you know need to know the

296
00:10:24,740 --> 00:10:33,110
details they just want the spicy dogs so

297
00:10:29,089 --> 00:10:35,300
yeah so what we're gonna use is cubes so

298
00:10:33,110 --> 00:10:37,490
cubes is a desktop-based

299
00:10:35,300 --> 00:10:39,170
Zen distribution and so Zen is a

300
00:10:37,490 --> 00:10:40,519
hypervisor that's commonly used in cloud

301
00:10:39,170 --> 00:10:41,810
environments and so we're going to learn

302
00:10:40,519 --> 00:10:44,060
a few pieces of what we need to know

303
00:10:41,810 --> 00:10:46,310
about cubes so that we can use it to we

304
00:10:44,060 --> 00:10:48,920
design secure drum so we have our

305
00:10:46,310 --> 00:10:50,959
hardware Zen is running directly in the

306
00:10:48,920 --> 00:10:52,459
hardware and then there's a control

307
00:10:50,959 --> 00:10:54,410
stack that's running in a special

308
00:10:52,459 --> 00:10:56,268
privileged VM called domain 0 and in

309
00:10:54,410 --> 00:10:57,079
cubes that's running Fedora and so

310
00:10:56,269 --> 00:10:58,490
that's where we're going to run the

311
00:10:57,079 --> 00:11:00,258
logic to provision the rest of the

312
00:10:58,490 --> 00:11:02,259
system and in cubes it's also their

313
00:11:00,259 --> 00:11:05,029
domain that's running the window manager

314
00:11:02,259 --> 00:11:06,379
so the desktop user and in the case of

315
00:11:05,029 --> 00:11:08,449
secured Rob the people that maintain

316
00:11:06,379 --> 00:11:11,029
this workstation are going to be

317
00:11:08,449 --> 00:11:13,790
defining different security domains /

318
00:11:11,029 --> 00:11:16,069
VMs same thing and run applications are

319
00:11:13,790 --> 00:11:18,230
set of applications within them and so

320
00:11:16,069 --> 00:11:20,120
we're going to call these domains at VMs

321
00:11:18,230 --> 00:11:21,500
each one of these in privileged domains

322
00:11:20,120 --> 00:11:23,300
doesn't have direct access to the

323
00:11:21,500 --> 00:11:25,430
hardware it's because we have

324
00:11:23,300 --> 00:11:27,140
between so there's no mic unless we

325
00:11:25,430 --> 00:11:28,670
explicitly allow permission for that VM

326
00:11:27,140 --> 00:11:31,550
to use it and then you can assign

327
00:11:28,670 --> 00:11:33,769
physical devices to a guest VM so if you

328
00:11:31,550 --> 00:11:36,979
want to pass through a USB mic you can

329
00:11:33,769 --> 00:11:40,940
do so but you have to do it from domain

330
00:11:36,980 --> 00:11:42,769
0 and in cubes each VM is based on a

331
00:11:40,940 --> 00:11:44,839
template which is your OS of choice so

332
00:11:42,769 --> 00:11:47,060
for security or mostly using Debian but

333
00:11:44,839 --> 00:11:49,790
you can have as many as you like and the

334
00:11:47,060 --> 00:11:52,069
relationship between atoms and their

335
00:11:49,790 --> 00:11:53,959
temp templates is as follows when a

336
00:11:52,070 --> 00:11:55,850
given at VM boots it begins with the

337
00:11:53,959 --> 00:11:57,949
state of the parent template VM at the

338
00:11:55,850 --> 00:12:00,649
time of boot and from there to state

339
00:11:57,950 --> 00:12:02,660
diverges so that VM will then reset to

340
00:12:00,649 --> 00:12:03,890
the state of the template VM after it

341
00:12:02,660 --> 00:12:05,839
gets shut down except for a few

342
00:12:03,890 --> 00:12:07,670
directories including home so any other

343
00:12:05,839 --> 00:12:09,170
changes don't persist your reboot so

344
00:12:07,670 --> 00:12:12,229
that's also quite nice for the malware

345
00:12:09,170 --> 00:12:14,630
case the other concepts that we need to

346
00:12:12,230 --> 00:12:16,130
know is a disposable room which is what

347
00:12:14,630 --> 00:12:17,990
it sounds like it's a van that's used

348
00:12:16,130 --> 00:12:19,850
once and then upon shutdown it's

349
00:12:17,990 --> 00:12:22,220
destroyed and so the next time a

350
00:12:19,850 --> 00:12:24,079
disposable VM of that type is booted

351
00:12:22,220 --> 00:12:25,940
it's a new VM entirely and it begins

352
00:12:24,079 --> 00:12:29,899
with again with the state of the parent

353
00:12:25,940 --> 00:12:31,880
template VM at the time of boot so as I

354
00:12:29,899 --> 00:12:33,680
mentioned earlier since each of these in

355
00:12:31,880 --> 00:12:35,420
privileged domains doesn't have direct

356
00:12:33,680 --> 00:12:37,279
access to the underlying hardware we can

357
00:12:35,420 --> 00:12:39,140
have VMs which from their perspective

358
00:12:37,279 --> 00:12:41,300
don't have a network interface so that's

359
00:12:39,140 --> 00:12:44,410
a great place for us to but secrets like

360
00:12:41,300 --> 00:12:46,370
private keys or other sensitive data and

361
00:12:44,410 --> 00:12:47,990
then the other three things we need to

362
00:12:46,370 --> 00:12:50,029
know about is the network stack is

363
00:12:47,990 --> 00:12:52,430
running in its own VM so if there's a

364
00:12:50,029 --> 00:12:56,209
vulnerability and like d-h client it's

365
00:12:52,430 --> 00:12:57,800
just gonna compromise that one VM we

366
00:12:56,209 --> 00:12:59,899
have another VM for our firewall rules

367
00:12:57,800 --> 00:13:01,130
because if someone pops their network

368
00:12:59,899 --> 00:13:04,459
van we don't want them to rewrite the

369
00:13:01,130 --> 00:13:06,649
firewall rules and then we have our USB

370
00:13:04,459 --> 00:13:09,589
controllers all assigned to a separate

371
00:13:06,649 --> 00:13:12,829
VM and those three are maintained by

372
00:13:09,589 --> 00:13:15,920
cubes by a fault so if we want to pass

373
00:13:12,829 --> 00:13:17,930
some files or data between VMs then we

374
00:13:15,920 --> 00:13:20,209
can do that using a mechanism called QR

375
00:13:17,930 --> 00:13:21,680
exact which is based on Lavie Chanin

376
00:13:20,209 --> 00:13:23,180
zone and that's the mechanism we're

377
00:13:21,680 --> 00:13:25,729
gonna use to have VMs talk to each other

378
00:13:23,180 --> 00:13:27,229
so now we know everything we need to

379
00:13:25,730 --> 00:13:29,600
know about cubes so how are we gonna use

380
00:13:27,230 --> 00:13:32,360
this so instead of having this physical

381
00:13:29,600 --> 00:13:33,230
isolation between these online and encap

382
00:13:32,360 --> 00:13:34,640
workstations

383
00:13:33,230 --> 00:13:35,820
I'm gonna use the isolation between

384
00:13:34,640 --> 00:13:37,500
security domains in

385
00:13:35,820 --> 00:13:39,390
choose to do so so instead of these

386
00:13:37,500 --> 00:13:42,390
multiple devices we want to have this

387
00:13:39,390 --> 00:13:45,680
single workstation and just have one

388
00:13:42,390 --> 00:13:48,210
laptop so let's zoom in on what's coming

389
00:13:45,680 --> 00:13:52,199
yes animation okay

390
00:13:48,210 --> 00:13:54,210
so first we have our network films so

391
00:13:52,200 --> 00:13:55,860
sis nuts connected directly to the

392
00:13:54,210 --> 00:13:57,780
internet so there's some one tank sofas

393
00:13:55,860 --> 00:13:59,610
there and then our firewall walls are

394
00:13:57,780 --> 00:14:02,130
applied we know that we need to run the

395
00:13:59,610 --> 00:14:04,290
Tor process since I said that to connect

396
00:14:02,130 --> 00:14:05,790
to this web app we have to connect to

397
00:14:04,290 --> 00:14:07,680
our audience service so that's going to

398
00:14:05,790 --> 00:14:10,050
make our connection to the secure web

399
00:14:07,680 --> 00:14:12,120
server and then the final VM that has

400
00:14:10,050 --> 00:14:13,740
network is what I'm calling here a

401
00:14:12,120 --> 00:14:15,510
forwarder VM and what it does is it

402
00:14:13,740 --> 00:14:16,950
takes requests for actions from the user

403
00:14:15,510 --> 00:14:22,080
like hey I want to download this file

404
00:14:16,950 --> 00:14:24,390
and passes that to secure drop server so

405
00:14:22,080 --> 00:14:27,090
what the user is interacting with is a

406
00:14:24,390 --> 00:14:28,980
GUI that is running in a non network VM

407
00:14:27,090 --> 00:14:30,720
and so when the user triggers an action

408
00:14:28,980 --> 00:14:34,620
it talks to the forwarder VM and gets

409
00:14:30,720 --> 00:14:36,600
responses back through them the private

410
00:14:34,620 --> 00:14:38,520
key material is stored in a separate VM

411
00:14:36,600 --> 00:14:41,070
and so the GUI has to call out to it to

412
00:14:38,520 --> 00:14:42,780
perform krypter operations and then if a

413
00:14:41,070 --> 00:14:45,120
user wants to open a potentially

414
00:14:42,780 --> 00:14:47,189
malicious file it gets opened in one of

415
00:14:45,120 --> 00:14:49,110
these disposable vans and the disposable

416
00:14:47,190 --> 00:14:51,240
vans in this case don't have network

417
00:14:49,110 --> 00:14:52,350
because if an attacker gets code

418
00:14:51,240 --> 00:14:54,300
execution we don't want them making

419
00:14:52,350 --> 00:14:55,980
Network calls so they don't persist they

420
00:14:54,300 --> 00:14:58,829
don't get to they get destroyed after

421
00:14:55,980 --> 00:15:01,830
use and this one for document since

422
00:14:58,830 --> 00:15:03,420
these VMS we want to have the strongest

423
00:15:01,830 --> 00:15:05,250
protections we want to prevent an

424
00:15:03,420 --> 00:15:07,729
attacker from getting code execution if

425
00:15:05,250 --> 00:15:10,350
we can we also have some other

426
00:15:07,730 --> 00:15:13,770
mitigations in place like the use of a

427
00:15:10,350 --> 00:15:15,150
hardened kernel to make memory

428
00:15:13,770 --> 00:15:17,130
corruption vulnerabilities harder to

429
00:15:15,150 --> 00:15:19,050
exploit and that's as a defense against

430
00:15:17,130 --> 00:15:21,510
unknown Vaughan's that might exist in

431
00:15:19,050 --> 00:15:22,859
you know could exist in the applications

432
00:15:21,510 --> 00:15:25,310
used to open documents you're talking

433
00:15:22,860 --> 00:15:28,440
like evince open off his stuff like that

434
00:15:25,310 --> 00:15:30,959
okay so now let's check in with our

435
00:15:28,440 --> 00:15:32,460
technical goals so we wanted to make

436
00:15:30,960 --> 00:15:35,430
sure that known vulnerabilities are

437
00:15:32,460 --> 00:15:37,980
patched so we can do that now that all

438
00:15:35,430 --> 00:15:40,709
of these VMs are based on templates and

439
00:15:37,980 --> 00:15:42,720
we can update the base templates we can

440
00:15:40,710 --> 00:15:44,160
isolate the submission private key from

441
00:15:42,720 --> 00:15:46,590
potentially malicious documents we did

442
00:15:44,160 --> 00:15:48,360
that by putting in it in its own VM we

443
00:15:46,590 --> 00:15:50,100
can isolate each sources documents we've

444
00:15:48,360 --> 00:15:51,930
done that by

445
00:15:50,100 --> 00:15:54,079
whatever application that is used to

446
00:15:51,930 --> 00:15:56,430
open that kind of file in its own VM and

447
00:15:54,079 --> 00:15:58,500
then recovering from an attacker getting

448
00:15:56,430 --> 00:16:00,359
code execution in the VAM used to open

449
00:15:58,500 --> 00:16:01,920
submissions we're doing that by just

450
00:16:00,360 --> 00:16:03,990
destroying the entire virtual machine

451
00:16:01,920 --> 00:16:06,420
and the defense-in-depth

452
00:16:03,990 --> 00:16:09,540
are these additional mitigations like

453
00:16:06,420 --> 00:16:11,880
kernel hardening so the other design

454
00:16:09,540 --> 00:16:15,060
goals that we had were kind of the

455
00:16:11,880 --> 00:16:16,709
operational simplicity and usability so

456
00:16:15,060 --> 00:16:19,619
this is a screenshot of this implemented

457
00:16:16,709 --> 00:16:21,689
this is a screenshot within cubes and so

458
00:16:19,620 --> 00:16:24,720
the window with like the yellow chrome

459
00:16:21,690 --> 00:16:27,329
is the GUI application and so from the

460
00:16:24,720 --> 00:16:29,339
journalist perspective they interact

461
00:16:27,329 --> 00:16:31,649
with this and so it's just like a chat

462
00:16:29,339 --> 00:16:33,959
app and so it has like a slight like

463
00:16:31,649 --> 00:16:35,940
experience and so as a journalist you're

464
00:16:33,959 --> 00:16:37,920
kind of typing a response and what's

465
00:16:35,940 --> 00:16:39,930
happening in the background is that

466
00:16:37,920 --> 00:16:41,579
these messages are getting encrypted to

467
00:16:39,930 --> 00:16:43,680
the key that corresponds to the source

468
00:16:41,579 --> 00:16:46,469
by sending crypto operations to this

469
00:16:43,680 --> 00:16:49,410
other VM and then that encrypted content

470
00:16:46,470 --> 00:16:51,000
gets passed to that forwarding VM but as

471
00:16:49,410 --> 00:16:53,160
a journalist you don't need to know or

472
00:16:51,000 --> 00:16:55,860
care that that is happening it's all

473
00:16:53,160 --> 00:16:58,469
transparent to the user and when you

474
00:16:55,860 --> 00:17:00,899
open a document one of these windows

475
00:16:58,470 --> 00:17:02,790
that is in the green window chrome pops

476
00:17:00,899 --> 00:17:05,640
up to open the document it even so

477
00:17:02,790 --> 00:17:06,359
whatever application is relevant for

478
00:17:05,640 --> 00:17:09,480
that type

479
00:17:06,359 --> 00:17:11,010
so for administrators this operational

480
00:17:09,480 --> 00:17:13,650
simplicity because they don't need to

481
00:17:11,010 --> 00:17:15,750
take patches into the air-gap all VMs

482
00:17:13,650 --> 00:17:17,220
get automatic updates so they don't need

483
00:17:15,750 --> 00:17:19,859
to interact with the system unless

484
00:17:17,220 --> 00:17:21,959
something goes wrong so the current

485
00:17:19,859 --> 00:17:24,030
status of this so we've implemented what

486
00:17:21,959 --> 00:17:26,520
I described and we got a third-party

487
00:17:24,030 --> 00:17:27,809
security audit of this approach both to

488
00:17:26,520 --> 00:17:29,730
validate the general approach

489
00:17:27,809 --> 00:17:31,889
architectural II and to identify any

490
00:17:29,730 --> 00:17:33,690
issues with the implementation and so

491
00:17:31,890 --> 00:17:35,700
that's public on our website and no

492
00:17:33,690 --> 00:17:37,470
major issues were found and then we're

493
00:17:35,700 --> 00:17:39,179
beginning a pilot with selected news

494
00:17:37,470 --> 00:17:44,690
organizations to use this in production

495
00:17:39,179 --> 00:17:47,720
in the next few weeks so some takeaways

496
00:17:44,690 --> 00:17:49,950
so journalists and their sources face

497
00:17:47,720 --> 00:17:51,929
growing challenges due to malware

498
00:17:49,950 --> 00:17:54,900
phishing and other electronic threats

499
00:17:51,929 --> 00:17:56,159
and user-friendly technologies for

500
00:17:54,900 --> 00:17:58,020
working with potentially malicious

501
00:17:56,159 --> 00:17:59,820
documents are really critical for groups

502
00:17:58,020 --> 00:18:01,800
like journalists or really anybody that

503
00:17:59,820 --> 00:18:04,050
needs to open potentially malicious talk

504
00:18:01,800 --> 00:18:07,340
and is operating in this kind of

505
00:18:04,050 --> 00:18:09,960
high-risk environment and we presented

506
00:18:07,340 --> 00:18:11,699
one approach here that builds on cubes

507
00:18:09,960 --> 00:18:14,700
OS and we're proceeding to roll this out

508
00:18:11,700 --> 00:18:17,070
with selected news organizations and if

509
00:18:14,700 --> 00:18:18,570
we're going to enable people like mr.

510
00:18:17,070 --> 00:18:20,250
sterling from our story at the beginning

511
00:18:18,570 --> 00:18:22,080
that have important truths to share with

512
00:18:20,250 --> 00:18:24,840
journalists and ultimately the public

513
00:18:22,080 --> 00:18:26,490
and ensure generalists stay safe while

514
00:18:24,840 --> 00:18:28,199
reporting on that information in the

515
00:18:26,490 --> 00:18:29,850
landscape they have to exist in we

516
00:18:28,200 --> 00:18:32,310
really need technologies like this and

517
00:18:29,850 --> 00:18:34,709
cubes on which this is based

518
00:18:32,310 --> 00:18:37,310
so if you're interested in this secured

519
00:18:34,710 --> 00:18:39,690
open cubes or open source project and

520
00:18:37,310 --> 00:18:41,159
this is the link to the github

521
00:18:39,690 --> 00:18:42,540
repository that has like the VM

522
00:18:41,160 --> 00:18:44,220
provisioning code and there's pointers

523
00:18:42,540 --> 00:18:46,230
to all of the other components or you

524
00:18:44,220 --> 00:18:46,950
can just come and talk to me after and I

525
00:18:46,230 --> 00:18:51,420
won't point you in the right direction

526
00:18:46,950 --> 00:18:54,420
and yesterday we just opened up a bug

527
00:18:51,420 --> 00:18:56,460
branti to cover this project so we had a

528
00:18:54,420 --> 00:18:57,840
bug bounty for a secure before but now

529
00:18:56,460 --> 00:19:00,030
it's expanded to everything that I

530
00:18:57,840 --> 00:19:01,919
described here so if you find security

531
00:19:00,030 --> 00:19:04,440
issues you can get rewarded financially

532
00:19:01,920 --> 00:19:07,220
rewarded so that is on bug proud thank

533
00:19:04,440 --> 00:19:07,220
you for your attention

