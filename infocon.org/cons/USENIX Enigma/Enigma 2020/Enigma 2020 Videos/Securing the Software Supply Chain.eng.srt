1
00:00:15,599 --> 00:00:20,970
thank you and welcome everybody so to

2
00:00:18,810 --> 00:00:22,830
start today's session I'm going to talk

3
00:00:20,970 --> 00:00:24,330
about something that has become a bit of

4
00:00:22,830 --> 00:00:26,788
a buzzword I'm going to talk about

5
00:00:24,330 --> 00:00:29,668
software supply chain

6
00:00:26,789 --> 00:00:33,210
what's the software supply chain well

7
00:00:29,669 --> 00:00:36,449
it's a fairly simple concept we all use

8
00:00:33,210 --> 00:00:39,360
other people's code modern software

9
00:00:36,449 --> 00:00:41,460
development practices involve using

10
00:00:39,360 --> 00:00:43,760
third-party software that is made

11
00:00:41,460 --> 00:00:47,910
available through the open source

12
00:00:43,760 --> 00:00:49,530
ecosystem and we take that software and

13
00:00:47,910 --> 00:00:52,019
instead of reinventing the wheel for

14
00:00:49,530 --> 00:00:55,170
every project for every company we

15
00:00:52,020 --> 00:00:58,469
depend on we import these third-party

16
00:00:55,170 --> 00:01:04,080
software as dependencies this of course

17
00:00:58,469 --> 00:01:06,920
has a number of advantages and of course

18
00:01:04,080 --> 00:01:09,990
in terms of efficiency and in terms of

19
00:01:06,920 --> 00:01:11,070
also robustness in many cases nobody

20
00:01:09,990 --> 00:01:13,170
here wants to write their own

21
00:01:11,070 --> 00:01:15,630
cryptography no one wants to write their

22
00:01:13,170 --> 00:01:17,940
own HTTP stack their own database their

23
00:01:15,630 --> 00:01:20,429
own metric system there were own logging

24
00:01:17,940 --> 00:01:22,860
and I'm sure everybody told me no I want

25
00:01:20,430 --> 00:01:24,659
to I want to implement my own or at

26
00:01:22,860 --> 00:01:27,150
least one of these but not all of them

27
00:01:24,659 --> 00:01:29,299
at the same time so the point is we use

28
00:01:27,150 --> 00:01:33,240
dependencies we use third party software

29
00:01:29,299 --> 00:01:36,329
however with dependencies come a number

30
00:01:33,240 --> 00:01:39,990
of risks that have led to a number of

31
00:01:36,329 --> 00:01:43,919
high profile breaches or over time these

32
00:01:39,990 --> 00:01:46,259
are all somehow failures in the software

33
00:01:43,920 --> 00:01:50,549
supply chain we talk about the supply

34
00:01:46,259 --> 00:01:52,950
chain as that the system and steps and

35
00:01:50,549 --> 00:01:55,470
people that get software from the third

36
00:01:52,950 --> 00:01:58,590
parties where it's developed all the way

37
00:01:55,470 --> 00:02:03,600
into our applications into our software

38
00:01:58,590 --> 00:02:06,560
into our products now different breaches

39
00:02:03,600 --> 00:02:08,820
however have had different causes and

40
00:02:06,560 --> 00:02:10,649
involved differently and there are

41
00:02:08,820 --> 00:02:12,930
different players involved in securing

42
00:02:10,649 --> 00:02:15,750
those steps of the supply chain I'm

43
00:02:12,930 --> 00:02:18,000
going to talk about three major players

44
00:02:15,750 --> 00:02:20,700
in securing the software supply chain

45
00:02:18,000 --> 00:02:24,930
the first one is the language itself the

46
00:02:20,700 --> 00:02:26,880
language provides the mechanics through

47
00:02:24,930 --> 00:02:28,040
which we import dependencies and through

48
00:02:26,880 --> 00:02:31,340
which we

49
00:02:28,040 --> 00:02:33,409
delegate trust even the ecosystem is the

50
00:02:31,340 --> 00:02:35,959
set of open-source software and people

51
00:02:33,409 --> 00:02:38,179
that actually provide this software and

52
00:02:35,959 --> 00:02:40,040
then finally there's you there's the

53
00:02:38,180 --> 00:02:41,299
organization there's the final consumer

54
00:02:40,040 --> 00:02:46,329
of the software

55
00:02:41,299 --> 00:02:48,739
each of these player has a number of

56
00:02:46,330 --> 00:02:52,849
responsibilities and we're going to talk

57
00:02:48,739 --> 00:02:56,269
about the problem that each of these

58
00:02:52,849 --> 00:02:59,569
players has to solve both in general and

59
00:02:56,269 --> 00:03:01,459
we'll talk about how go specifically

60
00:02:59,569 --> 00:03:03,738
solve them there's two reasons I'm going

61
00:03:01,459 --> 00:03:06,920
to talk about how Gasol's them one is

62
00:03:03,739 --> 00:03:10,010
that it's my job but the other one is

63
00:03:06,920 --> 00:03:12,410
that go had the advantage of shipping a

64
00:03:10,010 --> 00:03:15,470
solution after looking at how everybody

65
00:03:12,410 --> 00:03:18,200
else had solved that how problems had

66
00:03:15,470 --> 00:03:20,599
developed and when new technology was

67
00:03:18,200 --> 00:03:22,280
available go introduce the dependency

68
00:03:20,599 --> 00:03:25,220
management a native dependency

69
00:03:22,280 --> 00:03:28,459
management solution in 2018 with go

70
00:03:25,220 --> 00:03:30,470
modules and at the point we had the

71
00:03:28,459 --> 00:03:32,810
privilege to look at everything that

72
00:03:30,470 --> 00:03:35,720
happened before to decide how to solve

73
00:03:32,810 --> 00:03:37,970
these problems so let's start by talking

74
00:03:35,720 --> 00:03:40,340
about what the language needs to do the

75
00:03:37,970 --> 00:03:43,370
language enables through all the trust

76
00:03:40,340 --> 00:03:47,090
that is involved in the supply chain it

77
00:03:43,370 --> 00:03:50,299
has three roles it has to solve

78
00:03:47,090 --> 00:03:52,819
provenance that that is what code are we

79
00:03:50,299 --> 00:03:55,669
even running do we know the version do

80
00:03:52,819 --> 00:03:58,339
we know the source is it going to be

81
00:03:55,669 --> 00:04:01,370
available in the future and do we know

82
00:03:58,340 --> 00:04:04,819
that it has not been tampered with first

83
00:04:01,370 --> 00:04:07,579
one I stole a word from the archival

84
00:04:04,819 --> 00:04:09,500
community the provenance is just a fancy

85
00:04:07,579 --> 00:04:11,930
way of saying that we need a universal

86
00:04:09,500 --> 00:04:14,599
name for dependencies so that two

87
00:04:11,930 --> 00:04:17,239
different companies two different Peters

88
00:04:14,599 --> 00:04:20,149
two different machines can agree on what

89
00:04:17,238 --> 00:04:23,719
software they need to run in a permanent

90
00:04:20,149 --> 00:04:25,520
version permanent is key version one

91
00:04:23,720 --> 00:04:29,090
point two point three can't change

92
00:04:25,520 --> 00:04:31,190
meaning over time if we want a chance at

93
00:04:29,090 --> 00:04:33,530
securing everything that we build on top

94
00:04:31,190 --> 00:04:37,130
of dependencies we first need to agree

95
00:04:33,530 --> 00:04:40,219
on what exactly a dependency is this is

96
00:04:37,130 --> 00:04:41,420
sold in other ecosystems usually

97
00:04:40,219 --> 00:04:44,210
approximately the same way

98
00:04:41,420 --> 00:04:45,770
for example Python has the pipe I would

99
00:04:44,210 --> 00:04:47,270
they affectionately called the cheese

100
00:04:45,770 --> 00:04:50,570
shop

101
00:04:47,270 --> 00:04:53,210
and tools like pip end that fetch

102
00:04:50,570 --> 00:04:56,060
packages from the namespace of the pipe

103
00:04:53,210 --> 00:04:58,609
I and then there are usually locked

104
00:04:56,060 --> 00:05:00,740
files that specify the exact version

105
00:04:58,610 --> 00:05:02,630
that you're using your project by the

106
00:05:00,740 --> 00:05:05,300
way it's critical to check these locked

107
00:05:02,630 --> 00:05:08,659
files into your version control system

108
00:05:05,300 --> 00:05:11,150
because without them you to different

109
00:05:08,660 --> 00:05:13,010
parties running the code can't agree on

110
00:05:11,150 --> 00:05:15,049
what the dependencies are the build is

111
00:05:13,010 --> 00:05:16,820
not reproducible and there is nothing to

112
00:05:15,050 --> 00:05:20,870
be done in terms of assessing the

113
00:05:16,820 --> 00:05:22,810
security of the rest of the stack go

114
00:05:20,870 --> 00:05:25,130
however solve this a little differently

115
00:05:22,810 --> 00:05:27,770
god did away with the distinction

116
00:05:25,130 --> 00:05:30,710
between a file that specifies would

117
00:05:27,770 --> 00:05:33,289
dependencies you want and their version

118
00:05:30,710 --> 00:05:36,919
ranges and the log file that specifies

119
00:05:33,290 --> 00:05:39,380
the actual versions go uses an argument

120
00:05:36,920 --> 00:05:42,680
called a minimum verse version selection

121
00:05:39,380 --> 00:05:44,360
which means that for each dependency you

122
00:05:42,680 --> 00:05:45,980
specify the minimum version that will

123
00:05:44,360 --> 00:05:49,580
work for you for example the one that

124
00:05:45,980 --> 00:05:51,650
introduced the API you need and then it

125
00:05:49,580 --> 00:05:53,810
assumes that if any transitive

126
00:05:51,650 --> 00:05:56,599
dependency needs a higher version of the

127
00:05:53,810 --> 00:05:58,430
same major version since semantics verse

128
00:05:56,600 --> 00:06:01,130
versioning is enforced at the depot

129
00:05:58,430 --> 00:06:03,260
system level it's going to work just

130
00:06:01,130 --> 00:06:05,120
selecting the higher one so even if here

131
00:06:03,260 --> 00:06:07,250
we say that we want version one to zero

132
00:06:05,120 --> 00:06:08,930
if something else were in the three

133
00:06:07,250 --> 00:06:10,790
requires version one point four point

134
00:06:08,930 --> 00:06:12,050
zero that's what's gonna get used and

135
00:06:10,790 --> 00:06:13,880
it's guaranteed to be backwards

136
00:06:12,050 --> 00:06:15,830
compatible because semantic versioning

137
00:06:13,880 --> 00:06:18,469
if there is a backward compatibility

138
00:06:15,830 --> 00:06:20,599
break the merge major version gets

139
00:06:18,470 --> 00:06:22,430
bumped and the two major versions can be

140
00:06:20,600 --> 00:06:24,320
used at the same time that could be a

141
00:06:22,430 --> 00:06:30,020
whole talk in itself and dependency

142
00:06:24,320 --> 00:06:32,780
management is its own field but what I

143
00:06:30,020 --> 00:06:35,359
care about here is that it as soon as we

144
00:06:32,780 --> 00:06:37,640
know the minimum versions of each module

145
00:06:35,360 --> 00:06:39,860
we know exactly what versions of each

146
00:06:37,640 --> 00:06:42,320
module we were going to use so this

147
00:06:39,860 --> 00:06:44,290
solves provenance for us it also has

148
00:06:42,320 --> 00:06:48,320
another advantage you may notice that

149
00:06:44,290 --> 00:06:51,170
these are not just arbitrary names like

150
00:06:48,320 --> 00:06:54,440
I don't know logging they're our domain

151
00:06:51,170 --> 00:06:55,009
names with paths that also tells us

152
00:06:54,440 --> 00:06:57,439
where

153
00:06:55,009 --> 00:06:59,599
find the code the go module Co system is

154
00:06:57,439 --> 00:07:01,460
a decentralized ecosystem where the name

155
00:06:59,599 --> 00:07:04,128
of the module tells you also how to

156
00:07:01,460 --> 00:07:06,258
fetch it at the same time this has the

157
00:07:04,129 --> 00:07:08,479
advantage that there is no risk of I

158
00:07:06,259 --> 00:07:12,169
don't know the crypto package becoming

159
00:07:08,479 --> 00:07:15,409
out of date and unmaintained but still

160
00:07:12,169 --> 00:07:19,969
used because it's called crypto in

161
00:07:15,409 --> 00:07:22,490
allows us and allows us to avoid

162
00:07:19,969 --> 00:07:25,699
tracking logins for the registry which

163
00:07:22,490 --> 00:07:27,439
is its own risk the second problem that

164
00:07:25,699 --> 00:07:31,009
the language tooling needs to solve is

165
00:07:27,439 --> 00:07:33,439
that of a VM built basically this is an

166
00:07:31,009 --> 00:07:36,009
often overlooked property of security

167
00:07:33,439 --> 00:07:38,870
it's not just about making sure that

168
00:07:36,009 --> 00:07:40,699
attackers can't change what you're gonna

169
00:07:38,870 --> 00:07:43,909
do but it's also making sure that they

170
00:07:40,699 --> 00:07:45,949
can stop you from deploying and the

171
00:07:43,909 --> 00:07:48,229
problem with the variability became very

172
00:07:45,949 --> 00:07:50,599
clear with the Left pad incident which

173
00:07:48,229 --> 00:07:53,479
became kind of infamous when one

174
00:07:50,599 --> 00:07:56,959
developer would draw we drew a package

175
00:07:53,479 --> 00:07:59,389
of 11 lines and half of the language

176
00:07:56,959 --> 00:08:01,610
ecosystem collapsed because everything

177
00:07:59,389 --> 00:08:04,249
that depended on it could not build any

178
00:08:01,610 --> 00:08:05,899
more because there was no process in

179
00:08:04,249 --> 00:08:08,089
place to ensure that tomorrow that

180
00:08:05,899 --> 00:08:09,819
module and that that package and that

181
00:08:08,089 --> 00:08:13,909
version is still going to be available

182
00:08:09,819 --> 00:08:17,689
the go solution here is that there is a

183
00:08:13,909 --> 00:08:20,870
proxy protocol specified for that allows

184
00:08:17,689 --> 00:08:23,120
you to fetch modules this proxy protocol

185
00:08:20,870 --> 00:08:27,099
is implemented by the go modules mirror

186
00:08:23,120 --> 00:08:27,099
which is operated by Google and

187
00:08:27,249 --> 00:08:33,769
as long as the license of a certain

188
00:08:30,740 --> 00:08:35,990
module is allows redistribution we will

189
00:08:33,769 --> 00:08:37,669
hold on the count to the contents so

190
00:08:35,990 --> 00:08:39,649
that even if they get deleted by the

191
00:08:37,669 --> 00:08:42,110
upstream outer they will still be

192
00:08:39,649 --> 00:08:44,810
available for you to build but you may

193
00:08:42,110 --> 00:08:47,170
say you don't want to depend on Google

194
00:08:44,810 --> 00:08:50,180
even for the variability of your code

195
00:08:47,170 --> 00:08:52,430
the proxy protocol is an open protocol

196
00:08:50,180 --> 00:08:53,959
so the interesting thing to companies

197
00:08:52,430 --> 00:08:56,329
here is that they can run their own

198
00:08:53,959 --> 00:08:58,250
proxy which will cache everything that

199
00:08:56,329 --> 00:09:00,949
has ever been used at the organization

200
00:08:58,250 --> 00:09:03,110
and guarantee within the organization

201
00:09:00,949 --> 00:09:05,089
that everything will still be available

202
00:09:03,110 --> 00:09:07,269
in the future for as long as the

203
00:09:05,089 --> 00:09:09,000
internal infrastructure is accessible

204
00:09:07,269 --> 00:09:12,150
however this brings us

205
00:09:09,000 --> 00:09:13,800
to the next issue which is integrity if

206
00:09:12,150 --> 00:09:15,600
there are proxies in the middle how do

207
00:09:13,800 --> 00:09:18,750
we guarantee that the content hasn't

208
00:09:15,600 --> 00:09:20,760
been tampered with this is usually

209
00:09:18,750 --> 00:09:24,210
solved again with lot files that contain

210
00:09:20,760 --> 00:09:26,610
hashes of the dependencies but we wanted

211
00:09:24,210 --> 00:09:29,820
to solve a little further than that when

212
00:09:26,610 --> 00:09:32,670
we designed our solution we wanted a

213
00:09:29,820 --> 00:09:34,740
solution that had allowed us not to

214
00:09:32,670 --> 00:09:36,719
trust proxies but also allowed us to

215
00:09:34,740 --> 00:09:39,000
have no trust in a central entity

216
00:09:36,720 --> 00:09:41,610
whether that's a registry or whether

217
00:09:39,000 --> 00:09:44,820
that's the proxy operator and that had

218
00:09:41,610 --> 00:09:46,800
no trust on first use so when you first

219
00:09:44,820 --> 00:09:49,140
generate the log file you need to get

220
00:09:46,800 --> 00:09:52,079
bed checks on that hash from somewhere

221
00:09:49,140 --> 00:09:53,850
and currently in most ecosystems you

222
00:09:52,080 --> 00:09:55,740
just trust whether you're getting that

223
00:09:53,850 --> 00:09:57,900
hash from whether that's the registry or

224
00:09:55,740 --> 00:10:00,720
doubt and finally we wanted to introduce

225
00:09:57,900 --> 00:10:03,090
new key management requirements for

226
00:10:00,720 --> 00:10:06,390
outers because we know that that never

227
00:10:03,090 --> 00:10:09,330
gets adopted let's be honest here so our

228
00:10:06,390 --> 00:10:12,960
solution is the go check some database

229
00:10:09,330 --> 00:10:17,370
it was designed by Russ Cox Emmy and the

230
00:10:12,960 --> 00:10:18,990
core idea is to solve is everyone

231
00:10:17,370 --> 00:10:22,800
looking at the same code instead of

232
00:10:18,990 --> 00:10:25,410
solving is this the right code solving

233
00:10:22,800 --> 00:10:27,390
the question of is this the original

234
00:10:25,410 --> 00:10:30,150
code requires a relationship with the

235
00:10:27,390 --> 00:10:32,490
outter but if instead we solved for is

236
00:10:30,150 --> 00:10:35,520
everyone in the world looking at the

237
00:10:32,490 --> 00:10:38,430
same code when they want version 1.2

238
00:10:35,520 --> 00:10:39,780
point three of module foo as long as

239
00:10:38,430 --> 00:10:42,420
everybody's looking at the same code

240
00:10:39,780 --> 00:10:44,250
that's it at that point the problem is

241
00:10:42,420 --> 00:10:46,740
solved because if that everybody

242
00:10:44,250 --> 00:10:49,560
includes the outer we solved the problem

243
00:10:46,740 --> 00:10:51,510
and anyway there is no way to make

244
00:10:49,560 --> 00:10:54,239
targeted attacks on your organization on

245
00:10:51,510 --> 00:10:56,790
your project because everybody is

246
00:10:54,240 --> 00:10:58,140
looking at the same code now the easiest

247
00:10:56,790 --> 00:10:59,880
way to solve this would be to say

248
00:10:58,140 --> 00:11:02,370
alright let's trust a central authority

249
00:10:59,880 --> 00:11:04,939
and that central authority will keep

250
00:11:02,370 --> 00:11:07,710
track of the hashes of everything and

251
00:11:04,940 --> 00:11:09,390
we'll ask it hey is this the correct a

252
00:11:07,710 --> 00:11:12,030
hash and is this what everybody's

253
00:11:09,390 --> 00:11:14,150
looking at now that's a starting point

254
00:11:12,030 --> 00:11:16,439
but the problem is that that against

255
00:11:14,150 --> 00:11:20,459
introduces trusts into a central

256
00:11:16,440 --> 00:11:22,530
authority so what we did is that we took

257
00:11:20,459 --> 00:11:23,010
the technology of a certificate

258
00:11:22,530 --> 00:11:26,250
transpire

259
00:11:23,010 --> 00:11:29,220
see to provide accountability on top of

260
00:11:26,250 --> 00:11:30,870
that service the go team operates such a

261
00:11:29,220 --> 00:11:33,240
service the checks and database where

262
00:11:30,870 --> 00:11:35,220
you can ask is this the same checksum

263
00:11:33,240 --> 00:11:37,920
that everybody else is seeing for this

264
00:11:35,220 --> 00:11:40,440
module version but at the same time the

265
00:11:37,920 --> 00:11:42,870
client will automatically verify Merkle

266
00:11:40,440 --> 00:11:45,210
three proofs that guarantee that this

267
00:11:42,870 --> 00:11:47,370
answer came from an append-only log of

268
00:11:45,210 --> 00:11:49,860
all the check sums of all the modules

269
00:11:47,370 --> 00:11:53,120
versions and this is a public log that

270
00:11:49,860 --> 00:11:55,740
can get audited by by people as well as

271
00:11:53,120 --> 00:11:57,870
getting verified for append-only

272
00:11:55,740 --> 00:12:00,720
properties and for inclusion properties

273
00:11:57,870 --> 00:12:02,790
every time the client fetches on this is

274
00:12:00,720 --> 00:12:04,830
the difference from city in that client

275
00:12:02,790 --> 00:12:07,349
the go client verifies the actual

276
00:12:04,830 --> 00:12:08,940
cryptography proofs and every operation

277
00:12:07,350 --> 00:12:10,560
every time it interacts with the

278
00:12:08,940 --> 00:12:13,820
checksum database there are no

279
00:12:10,560 --> 00:12:17,520
intermediary signed timestamps involved

280
00:12:13,820 --> 00:12:22,320
and finally we devised the way to serve

281
00:12:17,520 --> 00:12:23,880
these three in cacheable tiles we split

282
00:12:22,320 --> 00:12:25,740
these three into tiles that are more

283
00:12:23,880 --> 00:12:28,860
cacheable because this allows us to

284
00:12:25,740 --> 00:12:31,770
serve the entire tree with no dynamic

285
00:12:28,860 --> 00:12:34,230
endpoints at all normally the the

286
00:12:31,770 --> 00:12:35,910
cryptographic proofs require a dynamic

287
00:12:34,230 --> 00:12:37,740
endpoint where you tell it hey I know

288
00:12:35,910 --> 00:12:40,260
about this tree and I want the proof for

289
00:12:37,740 --> 00:12:42,330
this thing instead we break the tree

290
00:12:40,260 --> 00:12:44,490
into tiles the client does most of the

291
00:12:42,330 --> 00:12:46,770
computation and their requests would are

292
00:12:44,490 --> 00:12:49,500
essentially static assets that can get

293
00:12:46,770 --> 00:12:52,020
cached proxied and mirrored by

294
00:12:49,500 --> 00:12:53,850
organizations so that they don't have to

295
00:12:52,020 --> 00:12:56,910
disclose what they actually are looking

296
00:12:53,850 --> 00:12:58,650
up to the upstream so organizations can

297
00:12:56,910 --> 00:13:00,990
run entire copies of the checks and

298
00:12:58,650 --> 00:13:04,560
database with nothing else than very

299
00:13:00,990 --> 00:13:06,720
simple static hosting systems so to

300
00:13:04,560 --> 00:13:09,719
recap the go checksum database is a

301
00:13:06,720 --> 00:13:12,090
public append-only log of all module

302
00:13:09,720 --> 00:13:14,190
version checksums it's kept accountable

303
00:13:12,090 --> 00:13:16,980
by merkel three proofs verified on the

304
00:13:14,190 --> 00:13:20,190
client and it served as cashable tiles

305
00:13:16,980 --> 00:13:23,250
so that it can be proxied and mirrored

306
00:13:20,190 --> 00:13:25,650
within organizations my favorite thing

307
00:13:23,250 --> 00:13:28,080
about the system is that it it works

308
00:13:25,650 --> 00:13:31,949
perfectly on top of a decentralized

309
00:13:28,080 --> 00:13:34,440
ecosystem and it requires no UX cost

310
00:13:31,950 --> 00:13:36,990
neither on the consumer side nor on the

311
00:13:34,440 --> 00:13:40,080
outer side we enable this by

312
00:13:36,990 --> 00:13:43,410
default for module go modules in 2019

313
00:13:40,080 --> 00:13:45,630
and it just rolled out to everyone that

314
00:13:43,410 --> 00:13:47,579
was using go modules both publishing and

315
00:13:45,630 --> 00:13:51,779
consuming them without them doing

316
00:13:47,580 --> 00:13:54,000
anything and it's currently live so this

317
00:13:51,779 --> 00:13:57,060
is what the language has to do for you

318
00:13:54,000 --> 00:14:01,080
to enable the supply chain can be

319
00:13:57,060 --> 00:14:03,089
secured next on top of this tooling a

320
00:14:01,080 --> 00:14:05,790
deco system will develop and will build

321
00:14:03,089 --> 00:14:08,399
trust relationships this is the co

322
00:14:05,790 --> 00:14:10,399
system of actual software dependencies

323
00:14:08,399 --> 00:14:13,410
why are the trust relationships import

324
00:14:10,399 --> 00:14:15,870
every time you import a new dependency

325
00:14:13,410 --> 00:14:18,449
and every time you update and exist in

326
00:14:15,870 --> 00:14:21,779
dependency in your project you delegate

327
00:14:18,450 --> 00:14:25,589
a degree of trust to that dependency and

328
00:14:21,779 --> 00:14:28,740
to its transitive dependencies a health

329
00:14:25,589 --> 00:14:31,730
ecosystem will see this as a liability a

330
00:14:28,740 --> 00:14:34,470
healthy ecosystem will fight the trust

331
00:14:31,730 --> 00:14:38,130
dependencies like it fraud it fights a

332
00:14:34,470 --> 00:14:43,500
technical depth why is this liability

333
00:14:38,130 --> 00:14:46,410
because for example if any element down

334
00:14:43,500 --> 00:14:51,110
the chain gets compromised that leads to

335
00:14:46,410 --> 00:14:53,910
a compromise of your system this is a

336
00:14:51,110 --> 00:14:58,350
recent high-profile a breach where

337
00:14:53,910 --> 00:15:00,240
library event stream got at an attacker

338
00:14:58,350 --> 00:15:02,520
got control of it introduced a new

339
00:15:00,240 --> 00:15:04,649
dependency and that dependency targeted

340
00:15:02,520 --> 00:15:08,390
a specific consumer of that library a

341
00:15:04,649 --> 00:15:12,660
cryptocurrency wallet because of course

342
00:15:08,390 --> 00:15:15,449
and proceeded to steal the money from

343
00:15:12,660 --> 00:15:17,160
the wallets of the five end users so

344
00:15:15,450 --> 00:15:20,220
this is why one of the things I'm most

345
00:15:17,160 --> 00:15:24,120
happy about the NGO ecosystem is that

346
00:15:20,220 --> 00:15:26,730
it's cool to the to the philosophy the

347
00:15:24,120 --> 00:15:28,860
language that a lot copying is better

348
00:15:26,730 --> 00:15:32,339
than a little dependency this is one of

349
00:15:28,860 --> 00:15:34,410
rock bikes original go proverbs and the

350
00:15:32,339 --> 00:15:39,089
idea is that you don't want to introduce

351
00:15:34,410 --> 00:15:42,390
a trust dependency when the advantage

352
00:15:39,089 --> 00:15:45,920
brought by reusing interpreter party

353
00:15:42,390 --> 00:15:48,420
code is not more than the cost of

354
00:15:45,920 --> 00:15:49,920
introducing a new trust link when you

355
00:15:48,420 --> 00:15:51,269
make a copy you take

356
00:15:49,920 --> 00:15:53,880
on the responsibility of maintaining

357
00:15:51,269 --> 00:15:56,430
that code but if that code is small

358
00:15:53,880 --> 00:15:59,339
enough that is significantly less than

359
00:15:56,430 --> 00:16:01,979
the cost of the trust link that you

360
00:15:59,339 --> 00:16:07,199
impose on all your on everyone that also

361
00:16:01,980 --> 00:16:08,850
depends on your library and another a

362
00:16:07,199 --> 00:16:13,859
little more technical thing I'm very

363
00:16:08,850 --> 00:16:15,930
happy about is that even if your your

364
00:16:13,860 --> 00:16:17,670
gustan file may have a lot of modules in

365
00:16:15,930 --> 00:16:19,589
them because a lot of modules are

366
00:16:17,670 --> 00:16:22,740
involved in deciding what the minimum

367
00:16:19,589 --> 00:16:26,399
version of each module should be only

368
00:16:22,740 --> 00:16:29,490
the ones that actually end up built in

369
00:16:26,399 --> 00:16:31,560
your project actually have any chance to

370
00:16:29,490 --> 00:16:34,079
modify the behavior of your application

371
00:16:31,560 --> 00:16:36,060
or of the developer experience that

372
00:16:34,079 --> 00:16:38,430
means that if I'm using a library and

373
00:16:36,060 --> 00:16:41,459
that library uses a third-party library

374
00:16:38,430 --> 00:16:43,949
for testing that third-party library

375
00:16:41,459 --> 00:16:45,899
can't affect neither me nor my users

376
00:16:43,949 --> 00:16:47,969
because I'm not actually running the

377
00:16:45,899 --> 00:16:50,730
tests of my dependency and I'm not

378
00:16:47,970 --> 00:16:53,310
building the tests into my application

379
00:16:50,730 --> 00:16:57,899
so you shouldn't get to modify the

380
00:16:53,310 --> 00:17:01,109
behavior of my application so these are

381
00:16:57,899 --> 00:17:03,149
the things that set outside of the

382
00:17:01,110 --> 00:17:04,620
control of the organization these are

383
00:17:03,149 --> 00:17:06,540
things that need to be considered when

384
00:17:04,619 --> 00:17:09,659
it's time to decide what language and

385
00:17:06,540 --> 00:17:12,359
what ecosystem to rely on and these all

386
00:17:09,660 --> 00:17:14,429
set up a number of trust relationships

387
00:17:12,359 --> 00:17:16,918
that then the organization has to manage

388
00:17:14,429 --> 00:17:20,630
and mitigate it is the job of the

389
00:17:16,919 --> 00:17:24,660
organization to be aware of them in to

390
00:17:20,630 --> 00:17:28,049
mitigate their risk the ways it does

391
00:17:24,660 --> 00:17:30,870
that are there are three major ways one

392
00:17:28,049 --> 00:17:33,389
is tracking existing vulnerabilities one

393
00:17:30,870 --> 00:17:35,219
is worrying about what the future winner

394
00:17:33,390 --> 00:17:37,830
abilities will look like and how they

395
00:17:35,220 --> 00:17:39,660
will get found and the final one is

396
00:17:37,830 --> 00:17:42,059
auditing of course for current

397
00:17:39,660 --> 00:17:44,059
vulnerabilities winner ability tracking

398
00:17:42,059 --> 00:17:46,168
is the most straightforward in that

399
00:17:44,059 --> 00:17:48,629
there are public databases of

400
00:17:46,169 --> 00:17:50,640
vulnerabilities some more some less

401
00:17:48,630 --> 00:17:53,669
structured unfortunately so there is

402
00:17:50,640 --> 00:17:55,679
work to be done here as a industry to

403
00:17:53,669 --> 00:17:59,010
make this information as accessible as

404
00:17:55,679 --> 00:18:01,470
possible but once vulnerabilities are

405
00:17:59,010 --> 00:18:03,389
public it's important to have a process

406
00:18:01,470 --> 00:18:05,999
to get notified and installed

407
00:18:03,389 --> 00:18:08,279
just again this is one of the most

408
00:18:05,999 --> 00:18:10,739
common failures and the one that led to

409
00:18:08,279 --> 00:18:12,989
the Equifax bridge where months old

410
00:18:10,739 --> 00:18:16,529
vulnerability was used by attackers to

411
00:18:12,989 --> 00:18:18,989
get access to the system normally this

412
00:18:16,529 --> 00:18:21,209
this is solved by tools like NPM odet

413
00:18:18,989 --> 00:18:24,209
which is an excellent tool in the

414
00:18:21,209 --> 00:18:26,549
nordica system and in go there are a

415
00:18:24,209 --> 00:18:29,309
number of community tools and we're

416
00:18:26,549 --> 00:18:32,479
working on a net native solution to

417
00:18:29,309 --> 00:18:35,279
bring the this information to developers

418
00:18:32,479 --> 00:18:37,499
next an organization will want to look

419
00:18:35,279 --> 00:18:39,559
at security practices that is you want

420
00:18:37,499 --> 00:18:42,029
to ask yourself when you pick up a new

421
00:18:39,559 --> 00:18:44,190
dependency how are new in

422
00:18:42,029 --> 00:18:46,409
vulnerabilities in this dependency going

423
00:18:44,190 --> 00:18:48,089
to get introduced how are they going to

424
00:18:46,409 --> 00:18:50,519
get discovered and how are they going to

425
00:18:48,089 --> 00:18:54,869
get handled the things you want to look

426
00:18:50,519 --> 00:18:57,749
for our tests fuzzing CI the practices

427
00:18:54,869 --> 00:19:01,168
that will allow the dependency the

428
00:18:57,749 --> 00:19:02,729
project to protect itself the security

429
00:19:01,169 --> 00:19:04,889
reporting processing because you want

430
00:19:02,729 --> 00:19:07,799
this dependency to have an established

431
00:19:04,889 --> 00:19:10,049
process to learn about vulnerabilities

432
00:19:07,799 --> 00:19:12,839
and to handle them secretly and publish

433
00:19:10,049 --> 00:19:14,579
patches their maintenance status if the

434
00:19:12,839 --> 00:19:16,039
project is not maintained nobody is

435
00:19:14,579 --> 00:19:18,209
going to fix the vulnerabilities and

436
00:19:16,039 --> 00:19:19,879
finally even longer term the

437
00:19:18,209 --> 00:19:22,200
sustainability of the project

438
00:19:19,879 --> 00:19:25,320
sustainability of dependencies is a

439
00:19:22,200 --> 00:19:27,779
security concern if a project is a

440
00:19:25,320 --> 00:19:30,809
single person in their basement they can

441
00:19:27,779 --> 00:19:34,349
stop working on it any day and you will

442
00:19:30,809 --> 00:19:35,849
not have anybody to may publish security

443
00:19:34,349 --> 00:19:37,739
patches anymore this is something that

444
00:19:35,849 --> 00:19:42,359
organization can also contribute to of

445
00:19:37,739 --> 00:19:46,440
course by sponsoring projects in go we

446
00:19:42,359 --> 00:19:49,079
have a number of tools to of course

447
00:19:46,440 --> 00:19:50,669
ensure the security of projects but

448
00:19:49,079 --> 00:19:52,799
we're also working on two things we're

449
00:19:50,669 --> 00:19:55,859
working on bringing fuzzing into the

450
00:19:52,799 --> 00:19:58,559
ecosystem as a very easy-to-use tool and

451
00:19:55,859 --> 00:20:01,559
we're working on surfacing all the

452
00:19:58,559 --> 00:20:04,379
signals on the go package discovery site

453
00:20:01,559 --> 00:20:06,959
at packaged up Godot dev which hopefully

454
00:20:04,379 --> 00:20:09,809
will help organizations assess all these

455
00:20:06,959 --> 00:20:13,409
signals when selecting a new dependency

456
00:20:09,809 --> 00:20:16,050
and finally there is of course auditing

457
00:20:13,409 --> 00:20:19,920
the most expensive the most

458
00:20:16,050 --> 00:20:22,500
effort heavy the least scalable a part

459
00:20:19,920 --> 00:20:25,980
of the entire story which is that at the

460
00:20:22,500 --> 00:20:28,500
end of the day when everything else is

461
00:20:25,980 --> 00:20:30,900
done and the trust relationships are

462
00:20:28,500 --> 00:20:33,540
clear and you know the future direction

463
00:20:30,900 --> 00:20:36,060
of dependency you might or may not have

464
00:20:33,540 --> 00:20:38,040
the resources to actually look at the

465
00:20:36,060 --> 00:20:42,120
actual lines of code you're depending on

466
00:20:38,040 --> 00:20:44,100
but I believe that that is often often

467
00:20:42,120 --> 00:20:46,820
you hear advice that oh you should

468
00:20:44,100 --> 00:20:49,409
always be doing that that's premature

469
00:20:46,820 --> 00:20:52,129
you need to worry about everything else

470
00:20:49,410 --> 00:20:55,020
in the pyramid before you start spending

471
00:20:52,130 --> 00:20:58,350
resources on actually auditing every

472
00:20:55,020 --> 00:21:00,000
single line of code an important an

473
00:20:58,350 --> 00:21:02,370
important part that's often overlooked

474
00:21:00,000 --> 00:21:04,410
is that if you can reduce the trust

475
00:21:02,370 --> 00:21:07,229
dependencies there are fewer things you

476
00:21:04,410 --> 00:21:11,070
actually need to hold it in at the end

477
00:21:07,230 --> 00:21:13,380
of the day so this is it for me I

478
00:21:11,070 --> 00:21:15,689
recommend looking at the go checks and

479
00:21:13,380 --> 00:21:18,020
database design document in particular

480
00:21:15,690 --> 00:21:23,550
if you're involved in an ecosystem that

481
00:21:18,020 --> 00:21:25,230
could want to bring some of the that may

482
00:21:23,550 --> 00:21:28,860
want to bring some of the details of

483
00:21:25,230 --> 00:21:31,170
that design into your ecosystem I also

484
00:21:28,860 --> 00:21:33,419
recommend reading the essay by Russ Cox

485
00:21:31,170 --> 00:21:36,440
our software dependency problem which

486
00:21:33,420 --> 00:21:39,450
looks at both operational and security

487
00:21:36,440 --> 00:21:41,520
point of view on dependencies and

488
00:21:39,450 --> 00:21:42,990
finally if you want to learn more

489
00:21:41,520 --> 00:21:45,210
technically about the go checks and

490
00:21:42,990 --> 00:21:48,090
database there is a talk by Katie

491
00:21:45,210 --> 00:21:53,130
Hawkman at last year's gopher con that

492
00:21:48,090 --> 00:21:55,980
explains the life of of a theory of a

493
00:21:53,130 --> 00:21:58,820
module thank you very much and let me

494
00:21:55,980 --> 00:21:58,820
know if there are any questions

