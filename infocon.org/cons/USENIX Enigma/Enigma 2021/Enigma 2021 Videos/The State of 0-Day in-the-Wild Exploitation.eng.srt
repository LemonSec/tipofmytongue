1
00:00:08,320 --> 00:00:08,800
hi

2
00:00:08,800 --> 00:00:10,880
i'm maddie stone and this is the state

3
00:00:10,880 --> 00:00:14,559
of zero day in the wild exploitation

4
00:00:14,559 --> 00:00:16,320
what do you think of when i say zero day

5
00:00:16,320 --> 00:00:19,199
exploits it likely evokes images of

6
00:00:19,199 --> 00:00:21,279
only the few most elite hackers around

7
00:00:21,279 --> 00:00:22,240
the globe

8
00:00:22,240 --> 00:00:24,960
targeting only the most wanted targets

9
00:00:24,960 --> 00:00:26,320
you might think that these zero days

10
00:00:26,320 --> 00:00:26,720
cost

11
00:00:26,720 --> 00:00:30,640
so much are so hard takes so much time

12
00:00:30,640 --> 00:00:31,840
to develop

13
00:00:31,840 --> 00:00:34,160
that only a couple of entities have the

14
00:00:34,160 --> 00:00:37,360
knowledge and resources to develop them

15
00:00:37,360 --> 00:00:39,440
for the last 18 months i've studied zero

16
00:00:39,440 --> 00:00:41,120
days exploited in the wild

17
00:00:41,120 --> 00:00:43,200
not the theoretical or the hypothetical

18
00:00:43,200 --> 00:00:45,520
but the ones actually being used against

19
00:00:45,520 --> 00:00:46,719
users

20
00:00:46,719 --> 00:00:49,600
as 2020 came to a close i began looking

21
00:00:49,600 --> 00:00:51,600
back over all of the zero days we saw in

22
00:00:51,600 --> 00:00:52,480
2020

23
00:00:52,480 --> 00:00:54,079
and started putting together my second

24
00:00:54,079 --> 00:00:56,239
year in review analysis

25
00:00:56,239 --> 00:00:58,960
this is not analyzing each individual

26
00:00:58,960 --> 00:00:59,760
exploit

27
00:00:59,760 --> 00:01:01,440
but instead taking all of those

28
00:01:01,440 --> 00:01:03,600
individual analyses together

29
00:01:03,600 --> 00:01:05,600
to figure out what are the trends what

30
00:01:05,600 --> 00:01:08,159
are the gaps what lessons can we learn

31
00:01:08,159 --> 00:01:10,720
from the preceding year to then inform

32
00:01:10,720 --> 00:01:13,520
what work we do in 2021 to make zero day

33
00:01:13,520 --> 00:01:14,880
harder

34
00:01:14,880 --> 00:01:16,560
it became pretty clear while doing this

35
00:01:16,560 --> 00:01:18,080
analysis that we

36
00:01:18,080 --> 00:01:20,479
as a tech and security industry aren't

37
00:01:20,479 --> 00:01:22,720
requiring the most elite skills

38
00:01:22,720 --> 00:01:24,960
um for attackers to be able to exploit

39
00:01:24,960 --> 00:01:26,080
zero days

40
00:01:26,080 --> 00:01:28,960
but thankfully the analysis also showed

41
00:01:28,960 --> 00:01:30,720
that there is low hanging fruit

42
00:01:30,720 --> 00:01:33,040
that can be implemented to directly and

43
00:01:33,040 --> 00:01:34,880
immediately make it harder to exploit

44
00:01:34,880 --> 00:01:35,920
zero days

45
00:01:35,920 --> 00:01:39,040
so let's get to it first let's make sure

46
00:01:39,040 --> 00:01:40,640
we're all working from the same

47
00:01:40,640 --> 00:01:43,439
definition what is a zero day exploit it

48
00:01:43,439 --> 00:01:45,520
is an exploit targeting a vulnerability

49
00:01:45,520 --> 00:01:47,600
that defenders don't yet know about

50
00:01:47,600 --> 00:01:50,399
so it is there's no patch available

51
00:01:50,399 --> 00:01:52,560
there's not mitigations to say

52
00:01:52,560 --> 00:01:55,360
block this specific exploit there's not

53
00:01:55,360 --> 00:01:57,600
detection signatures for your antivirus

54
00:01:57,600 --> 00:01:58,880
to alert you about it

55
00:01:58,880 --> 00:02:01,200
defenders don't yet know only the

56
00:02:01,200 --> 00:02:03,840
attackers know

57
00:02:03,840 --> 00:02:06,079
and so my work has been with google

58
00:02:06,079 --> 00:02:07,280
project zero

59
00:02:07,280 --> 00:02:09,520
to learn from zero days exploit in the

60
00:02:09,520 --> 00:02:12,400
wild specifically to make it harder to

61
00:02:12,400 --> 00:02:15,360
exploit series so grounding our work and

62
00:02:15,360 --> 00:02:16,080
understanding

63
00:02:16,080 --> 00:02:19,040
what are attackers actually doing rather

64
00:02:19,040 --> 00:02:20,720
than what do we think they're doing

65
00:02:20,720 --> 00:02:23,040
and so that's where all of this work in

66
00:02:23,040 --> 00:02:26,000
this presentation comes from

67
00:02:26,000 --> 00:02:28,879
and that's why i write a year in review

68
00:02:28,879 --> 00:02:29,599
so

69
00:02:29,599 --> 00:02:32,640
this presentation is a very quick

70
00:02:32,640 --> 00:02:34,959
deep dive into what i think is the most

71
00:02:34,959 --> 00:02:36,640
notable thing we can take away from zero

72
00:02:36,640 --> 00:02:38,640
days exploited in 2020

73
00:02:38,640 --> 00:02:40,400
and what do we do about it so i'll show

74
00:02:40,400 --> 00:02:42,400
you a few different case studies showing

75
00:02:42,400 --> 00:02:43,040
you

76
00:02:43,040 --> 00:02:45,200
how that sort of thesis is backed up by

77
00:02:45,200 --> 00:02:46,080
data

78
00:02:46,080 --> 00:02:50,080
um yeah so let's get into it

79
00:02:50,080 --> 00:02:52,720
from the most basic first start you know

80
00:02:52,720 --> 00:02:54,080
there were 24

81
00:02:54,080 --> 00:02:57,760
zero days exploited um

82
00:02:57,760 --> 00:03:00,080
24 zero day x voice detected in the wild

83
00:03:00,080 --> 00:03:01,120
in 2020

84
00:03:01,120 --> 00:03:03,040
so that's our base level that these are

85
00:03:03,040 --> 00:03:05,200
the 24 exploits that are informing this

86
00:03:05,200 --> 00:03:06,480
analysis

87
00:03:06,480 --> 00:03:08,239
and as i was working through each of

88
00:03:08,239 --> 00:03:10,720
them um looking at them all together as

89
00:03:10,720 --> 00:03:11,519
a group

90
00:03:11,519 --> 00:03:13,920
the number that stuck out the most to me

91
00:03:13,920 --> 00:03:15,120
was that six

92
00:03:15,120 --> 00:03:17,040
out of the 24 zero days exploited in

93
00:03:17,040 --> 00:03:19,440
2020 are variants of previously

94
00:03:19,440 --> 00:03:21,440
disclosed vulnerabilities

95
00:03:21,440 --> 00:03:23,120
they are variants of vulnerabilities

96
00:03:23,120 --> 00:03:24,959
that have been reported before published

97
00:03:24,959 --> 00:03:25,920
about before

98
00:03:25,920 --> 00:03:29,280
seen before in previous exploits etc

99
00:03:29,280 --> 00:03:32,720
so said in another way 25

100
00:03:32,720 --> 00:03:36,159
of zero days from 2020 are variants of

101
00:03:36,159 --> 00:03:38,959
previously disclosed vulnerabilities

102
00:03:38,959 --> 00:03:42,400
they are similar you know only a few

103
00:03:42,400 --> 00:03:44,159
lines change in some places

104
00:03:44,159 --> 00:03:46,959
to vulnerabilities and exploits that the

105
00:03:46,959 --> 00:03:48,560
industry public

106
00:03:48,560 --> 00:03:53,200
knowledge knows about on top of that

107
00:03:53,200 --> 00:03:56,319
three out of the 24 vulnerabilities were

108
00:03:56,319 --> 00:03:58,080
incompletely patched

109
00:03:58,080 --> 00:04:01,120
meaning that with just a few tweaks

110
00:04:01,120 --> 00:04:03,360
you could have an exploit that still

111
00:04:03,360 --> 00:04:04,720
works even after the

112
00:04:04,720 --> 00:04:08,159
patch was applied so through all of this

113
00:04:08,159 --> 00:04:11,360
it became pretty clear to me that what i

114
00:04:11,360 --> 00:04:14,239
can take away from 2020 in the zero days

115
00:04:14,239 --> 00:04:16,798
that we saw is that a cos across the

116
00:04:16,798 --> 00:04:17,759
industry

117
00:04:17,759 --> 00:04:19,918
incomplete patches are making it easier

118
00:04:19,918 --> 00:04:20,959
for ex

119
00:04:20,959 --> 00:04:23,600
attackers to exploit users with cr days

120
00:04:23,600 --> 00:04:25,120
we are not requiring

121
00:04:25,120 --> 00:04:27,280
attackers to come up with you know all

122
00:04:27,280 --> 00:04:29,280
new bug classes develop brand new

123
00:04:29,280 --> 00:04:30,240
exploitation

124
00:04:30,240 --> 00:04:32,080
look at code that has never been

125
00:04:32,080 --> 00:04:34,880
researched before

126
00:04:34,880 --> 00:04:37,840
we're allowing the reuse of lots of

127
00:04:37,840 --> 00:04:38,720
different

128
00:04:38,720 --> 00:04:40,840
vulnerabilities that we previously knew

129
00:04:40,840 --> 00:04:42,400
about

130
00:04:42,400 --> 00:04:44,560
so let's get into my three case studies

131
00:04:44,560 --> 00:04:46,400
this first one is internet explorer

132
00:04:46,400 --> 00:04:47,199
jscript

133
00:04:47,199 --> 00:04:49,520
so jscript is the legacy javascript

134
00:04:49,520 --> 00:04:52,320
engine included in internet explorer

135
00:04:52,320 --> 00:04:55,280
while it's legacy it is still a great

136
00:04:55,280 --> 00:04:56,240
attack vector

137
00:04:56,240 --> 00:04:58,000
because it is enabled by default on

138
00:04:58,000 --> 00:05:00,720
current windows machines

139
00:05:00,720 --> 00:05:03,440
so through a quick timeline of you know

140
00:05:03,440 --> 00:05:05,759
this saga this case study

141
00:05:05,759 --> 00:05:08,240
um this bug class that we're going to be

142
00:05:08,240 --> 00:05:09,360
talking about

143
00:05:09,360 --> 00:05:12,160
was publicly discovered by a researcher

144
00:05:12,160 --> 00:05:13,840
in january 2018

145
00:05:13,840 --> 00:05:15,520
and through that you know numerous

146
00:05:15,520 --> 00:05:18,960
vulnerabilities reported to microsoft

147
00:05:18,960 --> 00:05:22,800
in december 2018 the first

148
00:05:22,800 --> 00:05:24,960
detected case of what a bug in one of

149
00:05:24,960 --> 00:05:26,960
these bug classes being exploited in the

150
00:05:26,960 --> 00:05:29,039
wild was discovered

151
00:05:29,039 --> 00:05:32,400
in september 2019 another vulnerability

152
00:05:32,400 --> 00:05:34,160
in this book class was exploited in the

153
00:05:34,160 --> 00:05:37,280
wild in november 2019 another

154
00:05:37,280 --> 00:05:39,759
patch had been had to be issued because

155
00:05:39,759 --> 00:05:41,360
the patch in september didn't

156
00:05:41,360 --> 00:05:43,440
actually fix the vulnerability the

157
00:05:43,440 --> 00:05:44,960
exploit and the proof concept

158
00:05:44,960 --> 00:05:47,600
still worked even after that patch had

159
00:05:47,600 --> 00:05:49,120
been applied

160
00:05:49,120 --> 00:05:52,560
the november 2019 patch also

161
00:05:52,560 --> 00:05:54,560
fixed a trivial variant that hadn't been

162
00:05:54,560 --> 00:05:56,479
patched previously

163
00:05:56,479 --> 00:05:59,680
in january 2020 another trivial variant

164
00:05:59,680 --> 00:06:02,080
of the vulnerability exploited in

165
00:06:02,080 --> 00:06:05,120
september cbe 2019-1367

166
00:06:05,120 --> 00:06:09,440
was exploited and then in april of 2020

167
00:06:09,440 --> 00:06:11,919
another variant within this pub class

168
00:06:11,919 --> 00:06:13,520
was patched again

169
00:06:13,520 --> 00:06:15,360
and i think one of the things that also

170
00:06:15,360 --> 00:06:18,960
sort of hits home the importance of

171
00:06:18,960 --> 00:06:21,120
these um correct and comprehensive

172
00:06:21,120 --> 00:06:23,120
patches and how we need to be patching

173
00:06:23,120 --> 00:06:24,800
you know the variants and not just the

174
00:06:24,800 --> 00:06:26,160
single bug

175
00:06:26,160 --> 00:06:29,280
is that the same attacker exploited all

176
00:06:29,280 --> 00:06:30,800
four of these vulnerabilities

177
00:06:30,800 --> 00:06:33,280
according to google's threat analysis

178
00:06:33,280 --> 00:06:35,039
group who published about this

179
00:06:35,039 --> 00:06:38,319
back in 2020 so that attacker had

180
00:06:38,319 --> 00:06:41,360
four different chances to use these zero

181
00:06:41,360 --> 00:06:42,800
days to exploit

182
00:06:42,800 --> 00:06:45,680
users and now i'm going to show you just

183
00:06:45,680 --> 00:06:47,520
how close each of these vulnerabilities

184
00:06:47,520 --> 00:06:49,440
were to trigger them

185
00:06:49,440 --> 00:06:51,599
usually only one or two lines of code

186
00:06:51,599 --> 00:06:53,599
had to be changed

187
00:06:53,599 --> 00:06:55,440
so we're going to start with the trigger

188
00:06:55,440 --> 00:06:56,720
the proof of concept

189
00:06:56,720 --> 00:07:00,080
for 2019-1367 the vulnerability that was

190
00:07:00,080 --> 00:07:03,039
exploited in the wild in september 2019.

191
00:07:03,039 --> 00:07:04,960
so this vulnerability specifically and

192
00:07:04,960 --> 00:07:06,400
this bug class as a whole

193
00:07:06,400 --> 00:07:08,319
oh so first the bug class the bug class

194
00:07:08,319 --> 00:07:10,160
is that a jscript object

195
00:07:10,160 --> 00:07:12,240
is not tracked by the garbage collector

196
00:07:12,240 --> 00:07:14,479
which leads to a use after free

197
00:07:14,479 --> 00:07:17,120
and so in this specific case the

198
00:07:17,120 --> 00:07:18,560
arguments array

199
00:07:18,560 --> 00:07:20,240
is not tracked by the garbage collector

200
00:07:20,240 --> 00:07:22,560
in the array.sort callback

201
00:07:22,560 --> 00:07:25,520
so in this sample right here um this is

202
00:07:25,520 --> 00:07:27,360
where we're calling array.sort

203
00:07:27,360 --> 00:07:30,319
we're using function f as our callback

204
00:07:30,319 --> 00:07:31,280
so when that's called

205
00:07:31,280 --> 00:07:33,840
we're going to execute function f in

206
00:07:33,840 --> 00:07:35,759
function f first we have to create a

207
00:07:35,759 --> 00:07:39,440
whole bunch of these jscript objects

208
00:07:39,440 --> 00:07:42,080
then we're going to assign one of them

209
00:07:42,080 --> 00:07:43,199
we're going to

210
00:07:43,199 --> 00:07:44,960
give arguments array one of the

211
00:07:44,960 --> 00:07:46,560
references to it

212
00:07:46,560 --> 00:07:48,160
and so the arguments array again is the

213
00:07:48,160 --> 00:07:49,680
thing that's not tracked by the garbage

214
00:07:49,680 --> 00:07:51,440
collector

215
00:07:51,440 --> 00:07:52,720
then we're going to delete all those

216
00:07:52,720 --> 00:07:55,360
objects and call garbage collection

217
00:07:55,360 --> 00:07:58,560
so now that object that the arguments

218
00:07:58,560 --> 00:07:59,280
array

219
00:07:59,280 --> 00:08:02,240
has a reference to has been deleted and

220
00:08:02,240 --> 00:08:03,759
so that's what leads to our

221
00:08:03,759 --> 00:08:06,639
use after free

222
00:08:06,800 --> 00:08:08,720
so then two months later as i said

223
00:08:08,720 --> 00:08:10,560
microsoft had to issue another patch the

224
00:08:10,560 --> 00:08:12,319
first part of that was they actually

225
00:08:12,319 --> 00:08:13,440
fixed

226
00:08:13,440 --> 00:08:16,960
cve 2019 1367 this time but the other is

227
00:08:16,960 --> 00:08:18,560
they also had to go in and fix another

228
00:08:18,560 --> 00:08:19,840
trivial variant

229
00:08:19,840 --> 00:08:22,639
so this variant to trigger that

230
00:08:22,639 --> 00:08:23,840
vulnerability

231
00:08:23,840 --> 00:08:25,759
you only need to delete one line of code

232
00:08:25,759 --> 00:08:27,360
from the previous poc

233
00:08:27,360 --> 00:08:31,520
and add two poc meaning proof of concept

234
00:08:31,520 --> 00:08:34,479
um and so in this case it's not the

235
00:08:34,479 --> 00:08:36,719
array.sort callback that

236
00:08:36,719 --> 00:08:39,279
um is not being correct the arguments

237
00:08:39,279 --> 00:08:41,120
array is not tracked correctly and

238
00:08:41,120 --> 00:08:43,919
it's this time in the to json callback

239
00:08:43,919 --> 00:08:44,800
so we

240
00:08:44,800 --> 00:08:47,839
simply replace the sort call to

241
00:08:47,839 --> 00:08:49,680
to json and then we can trigger the

242
00:08:49,680 --> 00:08:52,640
vulnerability again

243
00:08:53,360 --> 00:08:55,360
then that wasn't the end as i said

244
00:08:55,360 --> 00:08:57,200
because in january 2020

245
00:08:57,200 --> 00:08:59,680
another trivial variant was exploited in

246
00:08:59,680 --> 00:09:00,399
the wild

247
00:09:00,399 --> 00:09:03,200
and this time it's not the arguments

248
00:09:03,200 --> 00:09:03,839
array

249
00:09:03,839 --> 00:09:05,680
it's a named argument and so what that

250
00:09:05,680 --> 00:09:08,959
looks like is again we have our 1367

251
00:09:08,959 --> 00:09:11,920
trigger right here and the keys

252
00:09:11,920 --> 00:09:12,800
differences were

253
00:09:12,800 --> 00:09:14,640
that in this case we define the function

254
00:09:14,640 --> 00:09:16,240
with no arguments and then we use the

255
00:09:16,240 --> 00:09:17,760
arguments array

256
00:09:17,760 --> 00:09:19,760
to store the reference to the object

257
00:09:19,760 --> 00:09:23,839
that will be deleted for 2020674

258
00:09:23,839 --> 00:09:25,360
the vulnerability that was exploited in

259
00:09:25,360 --> 00:09:27,680
the wild in january we instead

260
00:09:27,680 --> 00:09:30,480
put two named arguments in the functions

261
00:09:30,480 --> 00:09:31,360
definition so

262
00:09:31,360 --> 00:09:34,000
r1 and arc 2 in this case and we just

263
00:09:34,000 --> 00:09:35,040
replace

264
00:09:35,040 --> 00:09:38,160
any um place that we have argument zero

265
00:09:38,160 --> 00:09:41,360
the arguments array with arg1 so those

266
00:09:41,360 --> 00:09:43,279
were the only changes needed and you had

267
00:09:43,279 --> 00:09:46,240
another zero day

268
00:09:46,959 --> 00:09:50,240
yeah so we're showing it's not hard

269
00:09:50,240 --> 00:09:51,680
you know once you understand a single

270
00:09:51,680 --> 00:09:53,839
one of those bugs you could then

271
00:09:53,839 --> 00:09:55,360
you know just change a few lines and

272
00:09:55,360 --> 00:09:57,360
continue to have working zero days

273
00:09:57,360 --> 00:09:58,880
find the other ones that hadn't been

274
00:09:58,880 --> 00:10:00,880
patched or missed

275
00:10:00,880 --> 00:10:03,200
this case study in chrome is going to be

276
00:10:03,200 --> 00:10:04,320
a little bit different

277
00:10:04,320 --> 00:10:06,000
instead of talking about the variance

278
00:10:06,000 --> 00:10:07,440
i'm going to show you an example

279
00:10:07,440 --> 00:10:10,160
of incomplete patching meaning the root

280
00:10:10,160 --> 00:10:11,120
vulnerability

281
00:10:11,120 --> 00:10:14,320
wasn't fixed the first time around

282
00:10:14,320 --> 00:10:16,560
and this is a kind of an interesting use

283
00:10:16,560 --> 00:10:18,079
case because

284
00:10:18,079 --> 00:10:20,320
when this vulnerability was patched it

285
00:10:20,320 --> 00:10:21,680
wasn't actually known that it was

286
00:10:21,680 --> 00:10:22,880
exploded in the wild

287
00:10:22,880 --> 00:10:24,880
that came two months later that it was

288
00:10:24,880 --> 00:10:26,800
found that it had been likely exploited

289
00:10:26,800 --> 00:10:28,240
as a zero day

290
00:10:28,240 --> 00:10:30,800
um and so it shows the importance of

291
00:10:30,800 --> 00:10:32,079
patching completely

292
00:10:32,079 --> 00:10:33,760
all vulnerabilities because we know we

293
00:10:33,760 --> 00:10:35,760
have a detection gap we know we're not

294
00:10:35,760 --> 00:10:37,360
detecting every zero day that's

295
00:10:37,360 --> 00:10:38,480
exploited

296
00:10:38,480 --> 00:10:40,079
if you want more about that check out my

297
00:10:40,079 --> 00:10:42,160
year in review from 2019 which is linked

298
00:10:42,160 --> 00:10:43,200
in the references

299
00:10:43,200 --> 00:10:44,959
but yeah i think it's a pretty

300
00:10:44,959 --> 00:10:46,399
understandable thing we don't detect

301
00:10:46,399 --> 00:10:47,920
them all and so we need to be fixing

302
00:10:47,920 --> 00:10:49,760
everything as if they are

303
00:10:49,760 --> 00:10:52,240
so in this case it is a type confusion

304
00:10:52,240 --> 00:10:55,440
in chrome's v8 javascript engine

305
00:10:55,440 --> 00:10:57,200
so here's the general timeline in

306
00:10:57,200 --> 00:10:59,839
november 2019

307
00:10:59,839 --> 00:11:01,760
set of security researchers reported the

308
00:11:01,760 --> 00:11:02,959
vulnerability

309
00:11:02,959 --> 00:11:05,760
this was a bug collision likely with the

310
00:11:05,760 --> 00:11:08,079
attackers who are using it as a zero day

311
00:11:08,079 --> 00:11:09,519
and we say that because the proof of

312
00:11:09,519 --> 00:11:12,399
concepts the way the report was written

313
00:11:12,399 --> 00:11:13,440
by the researchers

314
00:11:13,440 --> 00:11:15,200
was very different than how the exploit

315
00:11:15,200 --> 00:11:16,880
was written and so

316
00:11:16,880 --> 00:11:19,279
in february 2020 sergey from project

317
00:11:19,279 --> 00:11:20,399
zero our team

318
00:11:20,399 --> 00:11:22,959
discovered um exploits using this

319
00:11:22,959 --> 00:11:24,959
vulnerability and that it was likely a

320
00:11:24,959 --> 00:11:25,839
zero day and that

321
00:11:25,839 --> 00:11:27,760
you know so it had likely been in use

322
00:11:27,760 --> 00:11:29,680
prior to november

323
00:11:29,680 --> 00:11:32,160
because of this importance he decided to

324
00:11:32,160 --> 00:11:33,760
do a patch analysis

325
00:11:33,760 --> 00:11:35,120
from where the vulnerability was

326
00:11:35,120 --> 00:11:37,040
reported by researchers and what he

327
00:11:37,040 --> 00:11:37,760
found

328
00:11:37,760 --> 00:11:39,519
was that it was not a correct and

329
00:11:39,519 --> 00:11:42,560
complete patch it had

330
00:11:42,560 --> 00:11:45,200
patched one way that this vulnerability

331
00:11:45,200 --> 00:11:47,120
could be triggered but it didn't patch

332
00:11:47,120 --> 00:11:50,160
um the other ways and so

333
00:11:50,160 --> 00:11:53,200
what so chrome

334
00:11:53,200 --> 00:11:55,120
went and very quickly released another

335
00:11:55,120 --> 00:11:58,040
patch this time as cve 2026

336
00:11:58,040 --> 00:12:01,200
8383 but it introduced a new

337
00:12:01,200 --> 00:12:03,680
issue a new vulnerability um that

338
00:12:03,680 --> 00:12:04,480
patched it

339
00:12:04,480 --> 00:12:07,200
which um sergey again recognized and a

340
00:12:07,200 --> 00:12:09,040
new patch was then

341
00:12:09,040 --> 00:12:10,880
released for it so we're going to talk

342
00:12:10,880 --> 00:12:12,320
about the first

343
00:12:12,320 --> 00:12:15,680
incomplete patch here so this is

344
00:12:15,680 --> 00:12:17,040
the trigger for the original

345
00:12:17,040 --> 00:12:19,519
vulnerability so the vulnerability is in

346
00:12:19,519 --> 00:12:20,160
as i said

347
00:12:20,160 --> 00:12:22,880
chrome's v8 javascript engine and it

348
00:12:22,880 --> 00:12:23,600
comes

349
00:12:23,600 --> 00:12:26,560
about as a type confusion so in this

350
00:12:26,560 --> 00:12:28,240
case within for loops

351
00:12:28,240 --> 00:12:31,839
there is a area where it is going to try

352
00:12:31,839 --> 00:12:32,720
and

353
00:12:32,720 --> 00:12:36,160
do some induction the key is that

354
00:12:36,160 --> 00:12:39,120
the v8 type of integer kind of has a

355
00:12:39,120 --> 00:12:40,800
special type because it's not only

356
00:12:40,800 --> 00:12:41,440
including

357
00:12:41,440 --> 00:12:44,000
numbers but it also includes negative

358
00:12:44,000 --> 00:12:46,240
infinity and positive infinity

359
00:12:46,240 --> 00:12:48,320
but the other aspect of this integer

360
00:12:48,320 --> 00:12:50,639
type is there is no guarantee

361
00:12:50,639 --> 00:12:53,279
that when you add two integers together

362
00:12:53,279 --> 00:12:55,519
it's going to give you an integer

363
00:12:55,519 --> 00:12:58,320
instead negative infinity plus positive

364
00:12:58,320 --> 00:13:00,399
infinity for example will

365
00:13:00,399 --> 00:13:03,440
result in n a n not a number

366
00:13:03,440 --> 00:13:05,360
which is not a member of the integer

367
00:13:05,360 --> 00:13:08,160
type class so that's this vulnerability

368
00:13:08,160 --> 00:13:11,680
is that in this for loop we are able to

369
00:13:11,680 --> 00:13:13,920
um

370
00:13:14,720 --> 00:13:17,920
cause a sum to be not a number

371
00:13:17,920 --> 00:13:20,959
a k not an integer and that case

372
00:13:20,959 --> 00:13:23,839
wasn't being handled correctly in the v8

373
00:13:23,839 --> 00:13:24,959
engine

374
00:13:24,959 --> 00:13:26,399
so what it looks like we have our for

375
00:13:26,399 --> 00:13:28,000
loop here the

376
00:13:28,000 --> 00:13:30,480
original index is going to be negative

377
00:13:30,480 --> 00:13:31,680
infinity

378
00:13:31,680 --> 00:13:33,040
and then our increment which was

379
00:13:33,040 --> 00:13:34,959
assigned in the line above is positive

380
00:13:34,959 --> 00:13:35,760
infinity

381
00:13:35,760 --> 00:13:38,079
so when these are added together it

382
00:13:38,079 --> 00:13:38,880
equals not a

383
00:13:38,880 --> 00:13:40,880
number which was not handled and led to

384
00:13:40,880 --> 00:13:44,079
this vulnerability

385
00:13:46,000 --> 00:13:48,720
so they patched that they covered that

386
00:13:48,720 --> 00:13:50,800
if you know your original index

387
00:13:50,800 --> 00:13:53,360
is negative infinity and the increment

388
00:13:53,360 --> 00:13:55,760
is you know positive or vice versa

389
00:13:55,760 --> 00:13:57,760
then we're not going to go down that

390
00:13:57,760 --> 00:13:59,760
code path and handle it differently

391
00:13:59,760 --> 00:14:02,320
um thus preventing the vulnerability in

392
00:14:02,320 --> 00:14:03,199
place

393
00:14:03,199 --> 00:14:06,079
however they did not cover the case

394
00:14:06,079 --> 00:14:06,560
where

395
00:14:06,560 --> 00:14:08,880
you can actually change the increment

396
00:14:08,880 --> 00:14:10,639
within the for loop body

397
00:14:10,639 --> 00:14:12,959
thus triggering the vulnerability again

398
00:14:12,959 --> 00:14:13,920
so for

399
00:14:13,920 --> 00:14:18,399
cve 20 26 3 8 3 the second patch

400
00:14:18,399 --> 00:14:20,639
this was the trigger is again we have

401
00:14:20,639 --> 00:14:21,600
our for loop

402
00:14:21,600 --> 00:14:24,000
but the original index this time is zero

403
00:14:24,000 --> 00:14:26,320
while the increment is negative infinity

404
00:14:26,320 --> 00:14:28,079
that's just fine because zero plus

405
00:14:28,079 --> 00:14:30,000
negative infinity equals negative

406
00:14:30,000 --> 00:14:32,639
infinity which is still an integer

407
00:14:32,639 --> 00:14:33,839
however

408
00:14:33,839 --> 00:14:37,279
what we see in this talk is that

409
00:14:37,279 --> 00:14:39,440
once we go through it once and you know

410
00:14:39,440 --> 00:14:41,279
i is now negative infinity

411
00:14:41,279 --> 00:14:43,680
we change the increment to positive

412
00:14:43,680 --> 00:14:44,800
infinity

413
00:14:44,800 --> 00:14:46,800
so when we do that now we're going to

414
00:14:46,800 --> 00:14:48,959
have the next time through the loop

415
00:14:48,959 --> 00:14:51,360
negative infinity plus positive infinity

416
00:14:51,360 --> 00:14:52,160
which then

417
00:14:52,160 --> 00:14:55,199
is the same triggering um triggers the

418
00:14:55,199 --> 00:14:56,160
vulnerability

419
00:14:56,160 --> 00:14:58,320
again just in a different way this time

420
00:14:58,320 --> 00:15:00,560
because it equals not a number

421
00:15:00,560 --> 00:15:02,480
and so that's where we really need to

422
00:15:02,480 --> 00:15:05,279
make sure that all patches are not just

423
00:15:05,279 --> 00:15:07,600
patching to whatever proof of concept or

424
00:15:07,600 --> 00:15:09,040
whatever exploit you see

425
00:15:09,040 --> 00:15:10,560
that we're really getting down to what

426
00:15:10,560 --> 00:15:12,320
is the root cause vulnerability

427
00:15:12,320 --> 00:15:15,440
and how do we patch that correctly and

428
00:15:15,440 --> 00:15:17,040
completely to make sure there aren't

429
00:15:17,040 --> 00:15:19,040
other avenues to still trigger

430
00:15:19,040 --> 00:15:22,000
the same thing

431
00:15:23,279 --> 00:15:25,440
our last example and case study to sort

432
00:15:25,440 --> 00:15:26,720
of show you

433
00:15:26,720 --> 00:15:29,120
about you know this trend is an

434
00:15:29,120 --> 00:15:30,800
arbitrary pointer do you reference

435
00:15:30,800 --> 00:15:35,199
in the spl wow 64 dll in windows

436
00:15:35,199 --> 00:15:38,399
so the sbl wow 64 dll is used for

437
00:15:38,399 --> 00:15:40,000
whenever 32-bit

438
00:15:40,000 --> 00:15:43,440
process and wants to print um the kicker

439
00:15:43,440 --> 00:15:45,680
is that spl wow 64 runs as

440
00:15:45,680 --> 00:15:48,240
medium integrity and internet explorer

441
00:15:48,240 --> 00:15:50,320
which is a common 32-bit process

442
00:15:50,320 --> 00:15:52,560
runs as low um integrity so this

443
00:15:52,560 --> 00:15:54,880
arbitrary pointer dereference

444
00:15:54,880 --> 00:15:57,120
was a privilege escalation so the

445
00:15:57,120 --> 00:15:58,160
timeline on this one

446
00:15:58,160 --> 00:16:01,600
july 2019 it's detected that

447
00:16:01,600 --> 00:16:05,360
a vulnerability um or an exploit is

448
00:16:05,360 --> 00:16:06,880
exploiting this vulnerability in the

449
00:16:06,880 --> 00:16:09,759
wild in june 2020

450
00:16:09,759 --> 00:16:12,880
um a trivial variant was discovered

451
00:16:12,880 --> 00:16:14,240
exploiting the wild

452
00:16:14,240 --> 00:16:17,600
and then when doing patch and variant

453
00:16:17,600 --> 00:16:19,440
analysis i found that that patch wasn't

454
00:16:19,440 --> 00:16:20,839
complete and it was still

455
00:16:20,839 --> 00:16:23,120
exploitable and so then that was patched

456
00:16:23,120 --> 00:16:25,199
in january 2021.

457
00:16:25,199 --> 00:16:28,160
um the reason there's two cves there is

458
00:16:28,160 --> 00:16:28,959
that

459
00:16:28,959 --> 00:16:31,680
they had originally been planning to

460
00:16:31,680 --> 00:16:33,199
patch in 2020

461
00:16:33,199 --> 00:16:35,600
they missed the deadline and it had to

462
00:16:35,600 --> 00:16:38,160
go over to 2021 and so a different cve

463
00:16:38,160 --> 00:16:40,079
was then issued

464
00:16:40,079 --> 00:16:42,880
so what's the problem internet explorer

465
00:16:42,880 --> 00:16:45,440
is able to communicate with spl wow

466
00:16:45,440 --> 00:16:48,880
by sending lpc messages one of those lpc

467
00:16:48,880 --> 00:16:50,079
messages can trigger

468
00:16:50,079 --> 00:16:53,040
this code path in gdi printer func which

469
00:16:53,040 --> 00:16:53,600
will then

470
00:16:53,600 --> 00:16:56,240
process that message so the

471
00:16:56,240 --> 00:16:59,600
vulnerability in july 2019

472
00:16:59,600 --> 00:17:02,959
it was the message type hex 75

473
00:17:02,959 --> 00:17:05,839
and then the attacker can control in

474
00:17:05,839 --> 00:17:07,359
those message it would use

475
00:17:07,359 --> 00:17:09,599
different pieces to control all three

476
00:17:09,599 --> 00:17:11,199
arguments to amend copy so the

477
00:17:11,199 --> 00:17:13,599
destination source and copy size

478
00:17:13,599 --> 00:17:16,000
but in the spl wows media integrity

479
00:17:16,000 --> 00:17:16,880
process

480
00:17:16,880 --> 00:17:18,799
so you have this privilege escalation

481
00:17:18,799 --> 00:17:21,280
where low integrity internet explorer

482
00:17:21,280 --> 00:17:24,319
can read and write in the media medium

483
00:17:24,319 --> 00:17:27,359
aka higher integrity spl wow this code

484
00:17:27,359 --> 00:17:27,919
snippet

485
00:17:27,919 --> 00:17:30,240
and a great write-up is by byteraptor so

486
00:17:30,240 --> 00:17:33,840
i included the url here

487
00:17:34,320 --> 00:17:36,640
yeah so i jumped ahead so message send

488
00:17:36,640 --> 00:17:38,080
is all of the user controlled

489
00:17:38,080 --> 00:17:39,919
information from internet explorer and

490
00:17:39,919 --> 00:17:41,840
we control destination source and the

491
00:17:41,840 --> 00:17:44,000
size

492
00:17:44,000 --> 00:17:47,120
so in july 2029 um

493
00:17:47,120 --> 00:17:48,799
this time the difference was that it

494
00:17:48,799 --> 00:17:51,280
just wasn't the message type 75

495
00:17:51,280 --> 00:17:54,000
it was instead hex 6d and you have the

496
00:17:54,000 --> 00:17:55,360
same capabilities

497
00:17:55,360 --> 00:17:57,840
the offsets of where each of the source

498
00:17:57,840 --> 00:17:59,760
destination and size for the mem copy

499
00:17:59,760 --> 00:18:01,039
were slightly different

500
00:18:01,039 --> 00:18:03,919
but still same vulnerability and control

501
00:18:03,919 --> 00:18:06,000
all three arguments in a mem copy from

502
00:18:06,000 --> 00:18:06,880
the

503
00:18:06,880 --> 00:18:10,080
medium integrity process

504
00:18:10,799 --> 00:18:14,320
finally their fix for that was to

505
00:18:14,320 --> 00:18:16,240
simply change the raw pointers to

506
00:18:16,240 --> 00:18:18,400
offsets which still didn't break it just

507
00:18:18,400 --> 00:18:20,000
now as the attacker instead of sending

508
00:18:20,000 --> 00:18:21,840
the raw pointer for the addresses

509
00:18:21,840 --> 00:18:24,240
you want it to happen you send offsets

510
00:18:24,240 --> 00:18:25,200
and calculate

511
00:18:25,200 --> 00:18:28,480
that to have control over their pointers

512
00:18:28,480 --> 00:18:30,720
so that was not a fix and then so that

513
00:18:30,720 --> 00:18:32,559
was what was patched in january of this

514
00:18:32,559 --> 00:18:36,400
year 2021. so hopefully i've shown to

515
00:18:36,400 --> 00:18:36,880
you that

516
00:18:36,880 --> 00:18:38,880
we have a problem we're not making zero

517
00:18:38,880 --> 00:18:40,320
day a harder

518
00:18:40,320 --> 00:18:44,000
it's um are hard to begin with because

519
00:18:44,000 --> 00:18:46,720
you don't require all these elite skills

520
00:18:46,720 --> 00:18:48,080
you don't have to be able to find new

521
00:18:48,080 --> 00:18:49,039
vulnerabilities

522
00:18:49,039 --> 00:18:51,120
to be able to exploit these zero days so

523
00:18:51,120 --> 00:18:52,240
what do we do about it

524
00:18:52,240 --> 00:18:55,520
thankfully we have options first we need

525
00:18:55,520 --> 00:18:58,400
correcting comprehensive patches

526
00:18:58,400 --> 00:19:01,440
for all vulnerabilities from our vendors

527
00:19:01,440 --> 00:19:04,559
we can't be leaving things open once

528
00:19:04,559 --> 00:19:04,960
they're

529
00:19:04,960 --> 00:19:06,559
known about we need to use the

530
00:19:06,559 --> 00:19:08,080
information to do variant

531
00:19:08,080 --> 00:19:11,440
analysis to patch all of this instances

532
00:19:11,440 --> 00:19:13,679
of that vulnerability in the code base

533
00:19:13,679 --> 00:19:16,960
not just that single one

534
00:19:17,760 --> 00:19:19,840
so thankfully each of us depending on

535
00:19:19,840 --> 00:19:21,120
our role all have

536
00:19:21,120 --> 00:19:22,960
opportunities though to help achieve

537
00:19:22,960 --> 00:19:25,840
this goal as researchers we analyze bugs

538
00:19:25,840 --> 00:19:26,880
for the patches

539
00:19:26,880 --> 00:19:28,799
or we analyze patches for the bugs that

540
00:19:28,799 --> 00:19:31,200
we report and others report to make sure

541
00:19:31,200 --> 00:19:34,160
they're complete incorrect we do perform

542
00:19:34,160 --> 00:19:35,520
variant analysis

543
00:19:35,520 --> 00:19:37,919
we brainstorm mitigation strategies we

544
00:19:37,919 --> 00:19:40,320
offer to work with vendors and

545
00:19:40,320 --> 00:19:42,880
on patches before they're released to

546
00:19:42,880 --> 00:19:44,160
make sure we don't

547
00:19:44,160 --> 00:19:47,440
see holes already in their plan and

548
00:19:47,440 --> 00:19:49,600
through disclosure policies or any other

549
00:19:49,600 --> 00:19:51,520
tools at our disposal can we we can work

550
00:19:51,520 --> 00:19:52,000
to try

551
00:19:52,000 --> 00:19:54,640
and incentivize vendors for complete and

552
00:19:54,640 --> 00:19:57,200
comprehensive patches

553
00:19:57,200 --> 00:19:59,200
as a vendor it's a lot of the things i'm

554
00:19:59,200 --> 00:20:00,320
saying that hopefully

555
00:20:00,320 --> 00:20:02,880
you know researchers can contribute to

556
00:20:02,880 --> 00:20:03,440
by

557
00:20:03,440 --> 00:20:05,120
doing all these things and reporting to

558
00:20:05,120 --> 00:20:06,880
vendors but vendors we really need you

559
00:20:06,880 --> 00:20:08,080
all doing this

560
00:20:08,080 --> 00:20:10,799
internal to your teams too of making

561
00:20:10,799 --> 00:20:11,360
sure

562
00:20:11,360 --> 00:20:13,360
those patches are not just breaking a

563
00:20:13,360 --> 00:20:14,480
proof of concept

564
00:20:14,480 --> 00:20:16,159
and that's what we're seeing a lot of is

565
00:20:16,159 --> 00:20:17,600
because there's a lot of

566
00:20:17,600 --> 00:20:21,120
ways oftentimes to

567
00:20:21,120 --> 00:20:22,880
reach a vulnerability so making sure

568
00:20:22,880 --> 00:20:25,280
that root vulnerability is fixed

569
00:20:25,280 --> 00:20:28,880
rather than just one path to it also

570
00:20:28,880 --> 00:20:30,640
reach out to us researchers we want to

571
00:20:30,640 --> 00:20:33,120
help and make sure the patch is

572
00:20:33,120 --> 00:20:35,679
correct and is actually fixing the issue

573
00:20:35,679 --> 00:20:38,080
we we do this work you know to help make

574
00:20:38,080 --> 00:20:38,640
things

575
00:20:38,640 --> 00:20:41,520
stronger and more defensive so please

576
00:20:41,520 --> 00:20:42,559
use us we

577
00:20:42,559 --> 00:20:45,919
we want it you know just the same as you

578
00:20:45,919 --> 00:20:49,360
is for these patches to be correct

579
00:20:49,360 --> 00:20:51,200
and lastly as users there are still

580
00:20:51,200 --> 00:20:52,880
things we can do too

581
00:20:52,880 --> 00:20:54,960
we can hold our vendors accountable call

582
00:20:54,960 --> 00:20:56,880
up customer service lines when

583
00:20:56,880 --> 00:20:58,960
it's out that they haven't issued a

584
00:20:58,960 --> 00:21:00,640
patch yet for something that's being

585
00:21:00,640 --> 00:21:02,240
exploited or there's

586
00:21:02,240 --> 00:21:04,799
the news headlines or we learned that a

587
00:21:04,799 --> 00:21:05,840
patch wasn't

588
00:21:05,840 --> 00:21:08,799
um correct that we hold them accountable

589
00:21:08,799 --> 00:21:09,520
that hey

590
00:21:09,520 --> 00:21:11,360
if i'm gonna use your software and your

591
00:21:11,360 --> 00:21:13,600
product i need you to take security

592
00:21:13,600 --> 00:21:14,400
seriously

593
00:21:14,400 --> 00:21:17,520
and make sure these patches are let are

594
00:21:17,520 --> 00:21:19,200
working off of all of the different

595
00:21:19,200 --> 00:21:21,440
security holes that reports tell us

596
00:21:21,440 --> 00:21:23,039
about

597
00:21:23,039 --> 00:21:24,799
and so that all comes back to i'll use

598
00:21:24,799 --> 00:21:26,320
the phrase one more time

599
00:21:26,320 --> 00:21:27,919
we need correct and comprehensive

600
00:21:27,919 --> 00:21:29,360
patches for

601
00:21:29,360 --> 00:21:31,360
all vulnerabilities to make it harder

602
00:21:31,360 --> 00:21:33,840
for users to be exploited with zero days

603
00:21:33,840 --> 00:21:35,840
and that's important and i specifically

604
00:21:35,840 --> 00:21:37,919
say all vulnerabilities because we do

605
00:21:37,919 --> 00:21:39,120
know that not

606
00:21:39,120 --> 00:21:41,360
every zero day is detected so if we

607
00:21:41,360 --> 00:21:43,280
adopt this behavior for every single

608
00:21:43,280 --> 00:21:44,480
vulnerability

609
00:21:44,480 --> 00:21:47,039
that is found or reported to us then we

610
00:21:47,039 --> 00:21:49,039
can definitely make it harder

611
00:21:49,039 --> 00:21:52,559
for attackers to use

612
00:21:52,559 --> 00:21:55,600
zero-day exploits and lastly

613
00:21:55,600 --> 00:21:57,280
hopefully in this quick 20 minutes i've

614
00:21:57,280 --> 00:21:58,960
made you more interested in all this

615
00:21:58,960 --> 00:22:01,039
type of zero day in the wild work

616
00:22:01,039 --> 00:22:03,039
um couldn't include everything i wanted

617
00:22:03,039 --> 00:22:04,400
to clearly so

618
00:22:04,400 --> 00:22:06,559
here's a whole bunch of great references

619
00:22:06,559 --> 00:22:08,640
or i say great i wrote them so that's

620
00:22:08,640 --> 00:22:09,440
kind of weird

621
00:22:09,440 --> 00:22:12,320
i hope good references um and with that

622
00:22:12,320 --> 00:22:14,400
thank you for joining me

623
00:22:14,400 --> 00:22:16,240
i really appreciate it i'm maddie stone

624
00:22:16,240 --> 00:22:18,240
in twitter or you can reach us

625
00:22:18,240 --> 00:22:20,240
at google and project zero doing this

626
00:22:20,240 --> 00:22:21,840
work at zero day in the wild at

627
00:22:21,840 --> 00:22:23,039
google.com

628
00:22:23,039 --> 00:22:27,840
thank you so much

629
00:22:33,120 --> 00:22:35,199
you

