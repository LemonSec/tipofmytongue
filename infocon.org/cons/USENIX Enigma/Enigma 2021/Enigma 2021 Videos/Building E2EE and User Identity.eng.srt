1
00:00:08,800 --> 00:00:09,760
in october

2
00:00:09,760 --> 00:00:11,759
zoom launched end-to-end encryption for

3
00:00:11,759 --> 00:00:13,679
our video conferencing platform

4
00:00:13,679 --> 00:00:15,440
five months after we first published a

5
00:00:15,440 --> 00:00:19,039
white paper detailing our designs in may

6
00:00:19,039 --> 00:00:21,119
i probably don't need to tell this crowd

7
00:00:21,119 --> 00:00:22,800
why offering end-to-end encryption is

8
00:00:22,800 --> 00:00:23,920
important

9
00:00:23,920 --> 00:00:26,160
end-to-end encryption or as i'll refer

10
00:00:26,160 --> 00:00:27,519
to it end-to-end

11
00:00:27,519 --> 00:00:29,599
ensures that no intermediaries can see

12
00:00:29,599 --> 00:00:30,880
your communications

13
00:00:30,880 --> 00:00:32,479
protecting users in the case of

14
00:00:32,479 --> 00:00:35,360
eavesdroppers and server breaches

15
00:00:35,360 --> 00:00:37,600
these threats are far from theoretical

16
00:00:37,600 --> 00:00:39,280
servers do get compromised

17
00:00:39,280 --> 00:00:41,840
whether by attackers malicious employees

18
00:00:41,840 --> 00:00:42,879
service providers

19
00:00:42,879 --> 00:00:46,079
or governments and consumers want and

20
00:00:46,079 --> 00:00:47,520
expect end-to-end to protect their

21
00:00:47,520 --> 00:00:48,640
privacy

22
00:00:48,640 --> 00:00:51,440
from signal to google duo end-to-end is

23
00:00:51,440 --> 00:00:53,039
increasingly available

24
00:00:53,039 --> 00:00:55,440
and mainstream gone are the days where

25
00:00:55,440 --> 00:00:57,440
you had to choose between security

26
00:00:57,440 --> 00:01:01,680
and custom emojis i joined zoom in may

27
00:01:01,680 --> 00:01:03,039
with the key based team

28
00:01:03,039 --> 00:01:04,799
and i'm one of the engineers who has

29
00:01:04,799 --> 00:01:06,799
been working on building end to end in

30
00:01:06,799 --> 00:01:07,760
zoom

31
00:01:07,760 --> 00:01:10,799
in this talk i'll cover two main topics

32
00:01:10,799 --> 00:01:12,640
first i'll describe how we quickly

33
00:01:12,640 --> 00:01:14,960
integrated end to end into an existing

34
00:01:14,960 --> 00:01:16,479
video conferencing product

35
00:01:16,479 --> 00:01:19,360
to achieve properties on par with many

36
00:01:19,360 --> 00:01:22,400
other secure communication applications

37
00:01:22,400 --> 00:01:25,119
second what we deployed in october is

38
00:01:25,119 --> 00:01:26,799
only the first phase of our intended

39
00:01:26,799 --> 00:01:27,520
work

40
00:01:27,520 --> 00:01:29,200
i'll broadly explain how we are

41
00:01:29,200 --> 00:01:30,799
extending our protocol

42
00:01:30,799 --> 00:01:32,799
to support cryptographically defined

43
00:01:32,799 --> 00:01:34,079
user identities

44
00:01:34,079 --> 00:01:36,079
and secure mechanisms for establishing

45
00:01:36,079 --> 00:01:37,119
trust

46
00:01:37,119 --> 00:01:39,439
users should know who they're talking to

47
00:01:39,439 --> 00:01:40,960
even without having to trust

48
00:01:40,960 --> 00:01:44,000
zoom after all end-to-end encryption

49
00:01:44,000 --> 00:01:48,079
is only as secure as its ends

50
00:01:48,799 --> 00:01:50,799
so let's get started with how we arrived

51
00:01:50,799 --> 00:01:52,159
at our design

52
00:01:52,159 --> 00:01:53,840
the primary task for implementing

53
00:01:53,840 --> 00:01:55,920
end-to-end is having the clients

54
00:01:55,920 --> 00:01:57,759
generate their own keys to encrypt their

55
00:01:57,759 --> 00:02:00,240
communications

56
00:02:00,240 --> 00:02:02,799
what's a zoom meeting like zoom supports

57
00:02:02,799 --> 00:02:04,240
large video meetings where each

58
00:02:04,240 --> 00:02:06,079
participant is synchronously streaming

59
00:02:06,079 --> 00:02:07,280
audio video data

60
00:02:07,280 --> 00:02:09,440
sent through zoom servers to every other

61
00:02:09,440 --> 00:02:11,200
meeting participant

62
00:02:11,200 --> 00:02:13,040
meetings can include as many as a

63
00:02:13,040 --> 00:02:14,400
thousand people

64
00:02:14,400 --> 00:02:16,640
users can join and leave throughout

65
00:02:16,640 --> 00:02:17,760
though there are a couple

66
00:02:17,760 --> 00:02:19,840
server controlled meeting settings that

67
00:02:19,840 --> 00:02:21,680
a designated meeting leader

68
00:02:21,680 --> 00:02:24,160
may configure which control or restrict

69
00:02:24,160 --> 00:02:26,879
joins and leaves

70
00:02:26,879 --> 00:02:28,800
without end to end turned on meaning

71
00:02:28,800 --> 00:02:30,720
contents are already encrypted

72
00:02:30,720 --> 00:02:32,560
by the clients with a symmetric meeting

73
00:02:32,560 --> 00:02:34,000
encryption key

74
00:02:34,000 --> 00:02:35,840
zoom servers actually do minimal

75
00:02:35,840 --> 00:02:37,360
processing of the video streams

76
00:02:37,360 --> 00:02:39,120
and therefore don't need access to the

77
00:02:39,120 --> 00:02:41,120
plain text meeting contents

78
00:02:41,120 --> 00:02:42,720
however the server must possess the

79
00:02:42,720 --> 00:02:44,400
meeting key in order to support some

80
00:02:44,400 --> 00:02:46,319
widely used zoom features

81
00:02:46,319 --> 00:02:48,239
including joining a meeting from a

82
00:02:48,239 --> 00:02:50,400
telephone cloud recording

83
00:02:50,400 --> 00:02:53,280
and live transcription for this reason

84
00:02:53,280 --> 00:02:55,360
the server generates the meeting key

85
00:02:55,360 --> 00:02:57,040
this trade-off offers important

86
00:02:57,040 --> 00:02:59,440
functionality while still protecting

87
00:02:59,440 --> 00:03:01,440
protecting against eavesdroppers on the

88
00:03:01,440 --> 00:03:03,680
network

89
00:03:03,680 --> 00:03:05,920
but as i described earlier the trust

90
00:03:05,920 --> 00:03:07,040
model for end to end

91
00:03:07,040 --> 00:03:08,640
requires that only the meeting

92
00:03:08,640 --> 00:03:10,080
participants and

93
00:03:10,080 --> 00:03:12,959
not any intermediaries or the server are

94
00:03:12,959 --> 00:03:15,200
able to decrypt the meeting contents

95
00:03:15,200 --> 00:03:17,599
and active attacks to gain access to a

96
00:03:17,599 --> 00:03:18,239
meeting

97
00:03:18,239 --> 00:03:21,040
should be detectable so to build end to

98
00:03:21,040 --> 00:03:21,519
end

99
00:03:21,519 --> 00:03:23,840
most simply we needed to instead have a

100
00:03:23,840 --> 00:03:25,599
client generate this meeting key

101
00:03:25,599 --> 00:03:27,200
and securely exchange it with other

102
00:03:27,200 --> 00:03:28,879
participants

103
00:03:28,879 --> 00:03:30,400
we wanted to be able to deploy this to

104
00:03:30,400 --> 00:03:32,959
production as soon as possible

105
00:03:32,959 --> 00:03:35,360
and as with any other production system

106
00:03:35,360 --> 00:03:36,560
we needed to minimize

107
00:03:36,560 --> 00:03:39,280
implementation risk this meant

108
00:03:39,280 --> 00:03:41,040
minimizing modification of existing

109
00:03:41,040 --> 00:03:42,159
client code

110
00:03:42,159 --> 00:03:43,840
and reducing the introduction of

111
00:03:43,840 --> 00:03:46,080
complexity which is more bug prone

112
00:03:46,080 --> 00:03:48,480
while also not degrading meeting quality

113
00:03:48,480 --> 00:03:51,200
and performance

114
00:03:51,280 --> 00:03:53,360
this sets the stage for the design that

115
00:03:53,360 --> 00:03:54,799
we came to

116
00:03:54,799 --> 00:03:56,319
we have the aforementioned meeting

117
00:03:56,319 --> 00:03:58,560
leader generate the meeting key to send

118
00:03:58,560 --> 00:04:00,879
to each user we already trust the

119
00:04:00,879 --> 00:04:02,400
meeting leader to perform meeting

120
00:04:02,400 --> 00:04:04,000
administrative functions

121
00:04:04,000 --> 00:04:06,319
and since we can consider the meeting as

122
00:04:06,319 --> 00:04:07,200
trustworthy

123
00:04:07,200 --> 00:04:09,840
as the least trustworthy participant we

124
00:04:09,840 --> 00:04:11,680
consider this a reasonable

125
00:04:11,680 --> 00:04:14,720
and simple design choice

126
00:04:14,720 --> 00:04:16,399
in order to securely send the meaning

127
00:04:16,399 --> 00:04:18,478
key to each user we have the

128
00:04:18,478 --> 00:04:21,040
have to introduce a couple more keys

129
00:04:21,040 --> 00:04:21,918
each user

130
00:04:21,918 --> 00:04:24,560
has a long term key pair to start this

131
00:04:24,560 --> 00:04:26,479
is a per device signing key pair

132
00:04:26,479 --> 00:04:28,240
where the private key never leaves the

133
00:04:28,240 --> 00:04:30,720
device the user posts their device

134
00:04:30,720 --> 00:04:32,240
public key to the server

135
00:04:32,240 --> 00:04:34,880
which stores a directory of user ids and

136
00:04:34,880 --> 00:04:35,360
device

137
00:04:35,360 --> 00:04:39,040
public keys then for each meeting the

138
00:04:39,040 --> 00:04:40,960
user generates a new ephemeral

139
00:04:40,960 --> 00:04:42,560
encryption key pair

140
00:04:42,560 --> 00:04:44,960
the user signs the ephemeral public key

141
00:04:44,960 --> 00:04:47,280
along with some meeting specific context

142
00:04:47,280 --> 00:04:49,600
using the device secret key and shares

143
00:04:49,600 --> 00:04:50,400
the sign

144
00:04:50,400 --> 00:04:52,479
binding of the ephemeral public key with

145
00:04:52,479 --> 00:04:54,400
everyone in the meeting

146
00:04:54,400 --> 00:04:56,479
as you can see in the diagram we use

147
00:04:56,479 --> 00:04:58,880
existing zoom hosted infrastructure as a

148
00:04:58,880 --> 00:04:59,840
bulletin board

149
00:04:59,840 --> 00:05:02,080
for clients to announce keys and other

150
00:05:02,080 --> 00:05:05,360
information to each other

151
00:05:05,360 --> 00:05:07,120
so in order for a user to join the

152
00:05:07,120 --> 00:05:08,880
meeting the leader computes a

153
00:05:08,880 --> 00:05:10,639
diffie-hellman shared secret from their

154
00:05:10,639 --> 00:05:12,320
own and that participant's ephemeral

155
00:05:12,320 --> 00:05:13,039
keys

156
00:05:13,039 --> 00:05:15,520
and uses the resulting secret to encrypt

157
00:05:15,520 --> 00:05:16,320
the meeting key

158
00:05:16,320 --> 00:05:20,560
for that participant when users join and

159
00:05:20,560 --> 00:05:21,600
leave the meeting

160
00:05:21,600 --> 00:05:23,440
which the leader learns from the server

161
00:05:23,440 --> 00:05:25,199
the meeting leader rotates the meeting

162
00:05:25,199 --> 00:05:27,360
key to a new random meeting key

163
00:05:27,360 --> 00:05:29,280
so that participants can only decrypt

164
00:05:29,280 --> 00:05:30,960
the parts of the meeting that they were

165
00:05:30,960 --> 00:05:32,080
in

166
00:05:32,080 --> 00:05:33,680
so now when we refer to a meeting

167
00:05:33,680 --> 00:05:35,919
participant we mean a user that the

168
00:05:35,919 --> 00:05:37,440
meeting leader has shared

169
00:05:37,440 --> 00:05:40,639
the current meeting key with

170
00:05:40,639 --> 00:05:42,320
meeting participants need to know who

171
00:05:42,320 --> 00:05:43,759
they're in a meeting with

172
00:05:43,759 --> 00:05:45,919
especially in an end-to-end meeting we

173
00:05:45,919 --> 00:05:47,360
don't want to rely on what the server

174
00:05:47,360 --> 00:05:48,080
tells us

175
00:05:48,080 --> 00:05:49,759
instead everyone in the meeting wants to

176
00:05:49,759 --> 00:05:51,440
know from the meeting leader

177
00:05:51,440 --> 00:05:54,560
who the leader has keyed for so

178
00:05:54,560 --> 00:05:56,560
we introduce a leader-driven participant

179
00:05:56,560 --> 00:05:58,800
list which is generated and signed by

180
00:05:58,800 --> 00:06:01,199
the leader

181
00:06:01,199 --> 00:06:02,639
here you can see the leader sending out

182
00:06:02,639 --> 00:06:04,319
regular heartbeats with updates to the

183
00:06:04,319 --> 00:06:06,720
participant list

184
00:06:06,720 --> 00:06:08,720
in an end-to-end meeting the participant

185
00:06:08,720 --> 00:06:10,400
list and video boxes that you see in the

186
00:06:10,400 --> 00:06:12,639
ui instead of being server trust

187
00:06:12,639 --> 00:06:14,160
are backed by this leader-driven

188
00:06:14,160 --> 00:06:15,680
participant list

189
00:06:15,680 --> 00:06:17,600
this list ensures that all participants

190
00:06:17,600 --> 00:06:19,039
see a consistent view

191
00:06:19,039 --> 00:06:21,520
of all the users who the honest leader

192
00:06:21,520 --> 00:06:24,560
has shared the mini key with

193
00:06:24,560 --> 00:06:26,319
note that at this stage the display name

194
00:06:26,319 --> 00:06:28,400
seen in the ui can be arbitrarily

195
00:06:28,400 --> 00:06:29,360
changed

196
00:06:29,360 --> 00:06:31,840
we will revisit associating a human

197
00:06:31,840 --> 00:06:33,520
friendly identity with a participant's

198
00:06:33,520 --> 00:06:34,400
device key

199
00:06:34,400 --> 00:06:37,360
in the next phase of work participants

200
00:06:37,360 --> 00:06:39,199
expect these heartbeats at least every

201
00:06:39,199 --> 00:06:40,400
10 seconds

202
00:06:40,400 --> 00:06:41,600
recall that the leader should be

203
00:06:41,600 --> 00:06:43,440
rotating the key when participants join

204
00:06:43,440 --> 00:06:45,039
and leave so in particular

205
00:06:45,039 --> 00:06:46,639
participants are watching out for these

206
00:06:46,639 --> 00:06:48,639
heartbeats so that the server cannot

207
00:06:48,639 --> 00:06:50,000
force them to keep using

208
00:06:50,000 --> 00:06:52,319
an old encryption key that is known to a

209
00:06:52,319 --> 00:06:54,800
recently expelled participant

210
00:06:54,800 --> 00:06:56,560
a leader drops out if it misses enough

211
00:06:56,560 --> 00:06:57,919
participant-less heartbeats from the

212
00:06:57,919 --> 00:07:00,240
leader

213
00:07:00,479 --> 00:07:02,560
if the meeting leader changes maybe

214
00:07:02,560 --> 00:07:04,160
because the original leader left the

215
00:07:04,160 --> 00:07:04,720
meeting

216
00:07:04,720 --> 00:07:06,240
participants will be shown a

217
00:07:06,240 --> 00:07:08,319
leader-changed notification

218
00:07:08,319 --> 00:07:10,880
the new leader rotates the meeting key

219
00:07:10,880 --> 00:07:12,160
and is in charge of

220
00:07:12,160 --> 00:07:15,360
updating the participant list

221
00:07:15,360 --> 00:07:17,599
also we have a meeting leader security

222
00:07:17,599 --> 00:07:19,680
code that may be read out loud to help

223
00:07:19,680 --> 00:07:20,080
each

224
00:07:20,080 --> 00:07:22,000
meeting participant detect meddlers in

225
00:07:22,000 --> 00:07:23,440
the middle between them

226
00:07:23,440 --> 00:07:25,680
and the meeting leader every meeting

227
00:07:25,680 --> 00:07:27,759
participant upon joining the meeting

228
00:07:27,759 --> 00:07:29,440
should check the security code with the

229
00:07:29,440 --> 00:07:32,080
leader and if the leader changes

230
00:07:32,080 --> 00:07:34,160
then the security code changes and

231
00:07:34,160 --> 00:07:36,160
therefore needs to be rechecked

232
00:07:36,160 --> 00:07:38,880
so checking the code can be clumsy our

233
00:07:38,880 --> 00:07:40,160
future phases of work

234
00:07:40,160 --> 00:07:42,000
intend to surface better user identity

235
00:07:42,000 --> 00:07:44,080
information that will make this check

236
00:07:44,080 --> 00:07:47,039
less necessary

237
00:07:47,360 --> 00:07:49,039
we've now basically described the

238
00:07:49,039 --> 00:07:50,879
end-to-end design which includes the

239
00:07:50,879 --> 00:07:52,000
meeting key messages

240
00:07:52,000 --> 00:07:53,599
and the participant list heartbeat

241
00:07:53,599 --> 00:07:55,280
messages that the leader is sending to

242
00:07:55,280 --> 00:07:56,840
meeting participants throughout a

243
00:07:56,840 --> 00:07:59,039
meeting let's go into some of the

244
00:07:59,039 --> 00:08:00,080
performance

245
00:08:00,080 --> 00:08:02,639
related realities that influenced our

246
00:08:02,639 --> 00:08:04,479
protocol implementation

247
00:08:04,479 --> 00:08:06,319
it's important to note that while we are

248
00:08:06,319 --> 00:08:08,080
streaming megabytes of video data

249
00:08:08,080 --> 00:08:10,479
over udp these new messages that we've

250
00:08:10,479 --> 00:08:12,160
introduced to support end to end

251
00:08:12,160 --> 00:08:15,199
are sent over a reliable tcp channel and

252
00:08:15,199 --> 00:08:17,039
our protocol needs to be performant

253
00:08:17,039 --> 00:08:21,520
on bad networks and old cheap phones

254
00:08:21,520 --> 00:08:23,759
of highest priority is to make sure that

255
00:08:23,759 --> 00:08:24,800
joining a meeting

256
00:08:24,800 --> 00:08:27,440
is as easy as possible the most

257
00:08:27,440 --> 00:08:28,800
important part of joining

258
00:08:28,800 --> 00:08:30,639
and staying in a meeting is getting the

259
00:08:30,639 --> 00:08:32,080
meeting key

260
00:08:32,080 --> 00:08:33,440
especially because we're working with

261
00:08:33,440 --> 00:08:35,279
synchronous auto video data

262
00:08:35,279 --> 00:08:36,958
we want to get meeting keys to all the

263
00:08:36,958 --> 00:08:40,080
participants as fast as possible

264
00:08:40,080 --> 00:08:41,919
and then rely on reasonable timing

265
00:08:41,919 --> 00:08:43,839
thresholds for the participant list

266
00:08:43,839 --> 00:08:45,600
heartbeats to enforce our security

267
00:08:45,600 --> 00:08:47,040
properties

268
00:08:47,040 --> 00:08:48,480
you could imagine a protocol that

269
00:08:48,480 --> 00:08:50,800
couples re-key and participant

270
00:08:50,800 --> 00:08:52,880
list messages together to enforce a

271
00:08:52,880 --> 00:08:54,560
tighter re-key property

272
00:08:54,560 --> 00:08:56,240
but it was advantageous from an

273
00:08:56,240 --> 00:08:58,320
engineering perspective to not build in

274
00:08:58,320 --> 00:08:59,760
a stronger dependency

275
00:08:59,760 --> 00:09:01,680
in order to reduce the risk of bugs or

276
00:09:01,680 --> 00:09:05,359
of affecting meeting performance

277
00:09:05,519 --> 00:09:06,959
another thing that we do to reduce

278
00:09:06,959 --> 00:09:09,040
spikes in medium key traffic is that we

279
00:09:09,040 --> 00:09:11,200
throttle re-keys such that the leader

280
00:09:11,200 --> 00:09:12,320
might not re-key for

281
00:09:12,320 --> 00:09:14,800
every participant jointly or leave if

282
00:09:14,800 --> 00:09:16,480
they happen within a short period of

283
00:09:16,480 --> 00:09:17,120
time

284
00:09:17,120 --> 00:09:20,480
but will re-key within 15 seconds joins

285
00:09:20,480 --> 00:09:22,000
and leaves happen more often than

286
00:09:22,000 --> 00:09:23,519
you might think especially at the

287
00:09:23,519 --> 00:09:27,440
beginnings and ends of large meetings

288
00:09:27,440 --> 00:09:29,040
to speak to how we determined the

289
00:09:29,040 --> 00:09:31,040
participant list heartbeat frequency

290
00:09:31,040 --> 00:09:33,279
we needed to consider what is a

291
00:09:33,279 --> 00:09:34,959
reasonable user experience

292
00:09:34,959 --> 00:09:36,480
in terms of how frequently the

293
00:09:36,480 --> 00:09:38,240
participant lists in the ui would update

294
00:09:38,240 --> 00:09:39,760
for example

295
00:09:39,760 --> 00:09:42,320
while also not producing overwhelming

296
00:09:42,320 --> 00:09:43,440
network traffic

297
00:09:43,440 --> 00:09:44,800
which would also affect the user

298
00:09:44,800 --> 00:09:46,560
experience

299
00:09:46,560 --> 00:09:48,160
to that goal of minimizing network

300
00:09:48,160 --> 00:09:50,640
traffic we made various optimizations to

301
00:09:50,640 --> 00:09:52,560
the participant list data structures

302
00:09:52,560 --> 00:09:54,800
such as representing the heartbeats as

303
00:09:54,800 --> 00:09:55,839
an incrementally

304
00:09:55,839 --> 00:10:00,000
updated list of participant changes

305
00:10:00,000 --> 00:10:02,160
lastly whether it's a new face in the

306
00:10:02,160 --> 00:10:04,160
participant list or a new leader

307
00:10:04,160 --> 00:10:06,640
these ui changes need to be noticed and

308
00:10:06,640 --> 00:10:07,680
reviewed

309
00:10:07,680 --> 00:10:09,440
this can be especially difficult in

310
00:10:09,440 --> 00:10:10,720
large meetings

311
00:10:10,720 --> 00:10:13,120
or consider even if your client drops

312
00:10:13,120 --> 00:10:15,120
out of a meeting after missing too many

313
00:10:15,120 --> 00:10:16,000
heartbeats

314
00:10:16,000 --> 00:10:17,760
it's simply difficult to tell if the

315
00:10:17,760 --> 00:10:20,000
server is withholding messages

316
00:10:20,000 --> 00:10:22,000
or if your network was just temporarily

317
00:10:22,000 --> 00:10:23,120
slow

318
00:10:23,120 --> 00:10:25,200
with every notification we expose in the

319
00:10:25,200 --> 00:10:27,279
product we consider its potential to

320
00:10:27,279 --> 00:10:28,240
contribute to

321
00:10:28,240 --> 00:10:32,240
alert fatigue

322
00:10:32,240 --> 00:10:34,000
now i'd like to summarize a couple more

323
00:10:34,000 --> 00:10:35,839
details about how we were able to

324
00:10:35,839 --> 00:10:37,440
quickly integrate our changes

325
00:10:37,440 --> 00:10:39,519
into the existing architecture for our

326
00:10:39,519 --> 00:10:41,360
october launch

327
00:10:41,360 --> 00:10:43,120
for the client side changes our

328
00:10:43,120 --> 00:10:45,440
engineers built a small library

329
00:10:45,440 --> 00:10:46,880
that takes care of generating the

330
00:10:46,880 --> 00:10:48,320
meaning key and the leader participant

331
00:10:48,320 --> 00:10:49,040
list

332
00:10:49,040 --> 00:10:51,120
which exposes a small interface that the

333
00:10:51,120 --> 00:10:53,440
rest of the zoom client code uses

334
00:10:53,440 --> 00:10:55,120
we're careful with anything that we add

335
00:10:55,120 --> 00:10:57,200
to this interface as it's very hard to

336
00:10:57,200 --> 00:11:00,720
change once we release it

337
00:11:00,720 --> 00:11:02,720
clients post their device public keys to

338
00:11:02,720 --> 00:11:04,800
what we call the key servers

339
00:11:04,800 --> 00:11:06,079
in subsequent work which i'll be

340
00:11:06,079 --> 00:11:08,079
describing next clients may start

341
00:11:08,079 --> 00:11:10,000
posting additional identity information

342
00:11:10,000 --> 00:11:11,760
to these key servers

343
00:11:11,760 --> 00:11:13,279
we built the key servers to be as

344
00:11:13,279 --> 00:11:15,440
standalone as possible

345
00:11:15,440 --> 00:11:17,200
this means understanding the user and

346
00:11:17,200 --> 00:11:19,279
meeting data that is already managed by

347
00:11:19,279 --> 00:11:21,040
the existing zoom servers

348
00:11:21,040 --> 00:11:22,959
and keeping our dependency on this data

349
00:11:22,959 --> 00:11:24,079
minimal and

350
00:11:24,079 --> 00:11:26,640
manageable

351
00:11:27,360 --> 00:11:29,360
lastly though we require clients to

352
00:11:29,360 --> 00:11:31,200
upgrade versions in order to begin using

353
00:11:31,200 --> 00:11:32,320
end-to-end meetings

354
00:11:32,320 --> 00:11:34,079
we in general try to avoid client

355
00:11:34,079 --> 00:11:36,720
changes that are backwards incompatible

356
00:11:36,720 --> 00:11:39,360
this is an an important concern for us

357
00:11:39,360 --> 00:11:41,120
whenever we plan future work and bug

358
00:11:41,120 --> 00:11:43,200
fixes

359
00:11:43,200 --> 00:11:44,800
we're now in progress implementing our

360
00:11:44,800 --> 00:11:46,959
subsequent plans to make it even easier

361
00:11:46,959 --> 00:11:48,880
for meeting participants to verify the

362
00:11:48,880 --> 00:11:51,680
security of their end-to-end meeting

363
00:11:51,680 --> 00:11:53,040
here we introduce the second big

364
00:11:53,040 --> 00:11:54,880
question of our work that we try to

365
00:11:54,880 --> 00:11:55,680
solve

366
00:11:55,680 --> 00:11:57,600
how do you know who you are in a meeting

367
00:11:57,600 --> 00:11:59,839
with in the remainder of my talk

368
00:11:59,839 --> 00:12:01,839
i'll paint some broad strokes for how

369
00:12:01,839 --> 00:12:03,680
we'll make it easier for users to

370
00:12:03,680 --> 00:12:04,320
confirm

371
00:12:04,320 --> 00:12:06,000
that only the only the meeting

372
00:12:06,000 --> 00:12:07,600
participants that they expect

373
00:12:07,600 --> 00:12:09,680
and trust are in the meeting and can

374
00:12:09,680 --> 00:12:11,920
decrypt its contents

375
00:12:11,920 --> 00:12:13,920
to this end it definitely helps if you

376
00:12:13,920 --> 00:12:16,399
can see and hear everyone in the meeting

377
00:12:16,399 --> 00:12:18,160
and you check meeting leader security

378
00:12:18,160 --> 00:12:19,519
codes

379
00:12:19,519 --> 00:12:21,360
but in the worst case cameras and

380
00:12:21,360 --> 00:12:22,560
microphones are off

381
00:12:22,560 --> 00:12:23,839
or you've never met some of the

382
00:12:23,839 --> 00:12:26,160
participants before additionally

383
00:12:26,160 --> 00:12:29,120
participants can rename themselves of

384
00:12:29,120 --> 00:12:29,600
course

385
00:12:29,600 --> 00:12:31,839
different entrant meetings have varying

386
00:12:31,839 --> 00:12:33,519
user privacy requirements

387
00:12:33,519 --> 00:12:36,000
in some cases a self-selected and server

388
00:12:36,000 --> 00:12:37,120
trust display name

389
00:12:37,120 --> 00:12:38,399
is completely adequate for

390
00:12:38,399 --> 00:12:40,560
identification and in some cases you

391
00:12:40,560 --> 00:12:42,720
know we welcome the creativity

392
00:12:42,720 --> 00:12:44,079
in this case you'll want to check

393
00:12:44,079 --> 00:12:46,399
meeting leader security codes to detect

394
00:12:46,399 --> 00:12:48,160
any server interception of meeting

395
00:12:48,160 --> 00:12:50,079
contents

396
00:12:50,079 --> 00:12:51,839
but because this check as i've

397
00:12:51,839 --> 00:12:53,120
previously described

398
00:12:53,120 --> 00:12:55,279
can be cumbersome we want to build

399
00:12:55,279 --> 00:12:57,040
additional features that rely less on

400
00:12:57,040 --> 00:12:58,240
the security code

401
00:12:58,240 --> 00:13:00,639
and make verifying meeting security as

402
00:13:00,639 --> 00:13:01,279
effortless

403
00:13:01,279 --> 00:13:03,920
as possible

404
00:13:05,200 --> 00:13:07,760
so the big question is how do you trust

405
00:13:07,760 --> 00:13:09,839
that a device key is associated with a

406
00:13:09,839 --> 00:13:12,079
particular user identity

407
00:13:12,079 --> 00:13:14,560
and relatedly how do we expose those

408
00:13:14,560 --> 00:13:16,160
notions of user identity

409
00:13:16,160 --> 00:13:20,079
in the product in our subsequent phases

410
00:13:20,079 --> 00:13:21,760
of work we are building a notion of

411
00:13:21,760 --> 00:13:23,680
multi-device user identity

412
00:13:23,680 --> 00:13:25,920
which supports a more human-friendly and

413
00:13:25,920 --> 00:13:28,240
usable notion of user identity

414
00:13:28,240 --> 00:13:30,160
and this identity will ultimately be

415
00:13:30,160 --> 00:13:31,440
committed in an

416
00:13:31,440 --> 00:13:34,560
externally auditable transparency tree

417
00:13:34,560 --> 00:13:36,560
so this user identity includes a set of

418
00:13:36,560 --> 00:13:38,959
devices like a laptop and cell phone

419
00:13:38,959 --> 00:13:42,079
and their device public keys and we

420
00:13:42,079 --> 00:13:43,360
introduced two unique

421
00:13:43,360 --> 00:13:46,000
human friendly identifiers this is your

422
00:13:46,000 --> 00:13:48,160
email address that you use with zoom

423
00:13:48,160 --> 00:13:50,079
and a domain name for the account that

424
00:13:50,079 --> 00:13:51,839
your user is in

425
00:13:51,839 --> 00:13:53,440
to quickly highlight this particular

426
00:13:53,440 --> 00:13:56,160
concept in zoom users may be part of an

427
00:13:56,160 --> 00:13:56,880
account

428
00:13:56,880 --> 00:13:59,440
likely for their company or school for

429
00:13:59,440 --> 00:14:00,480
the purposes of

430
00:14:00,480 --> 00:14:02,160
identifying the account the accounts

431
00:14:02,160 --> 00:14:03,760
admin will need to select a unique

432
00:14:03,760 --> 00:14:04,639
domain name

433
00:14:04,639 --> 00:14:07,680
or adn these user identifiers are

434
00:14:07,680 --> 00:14:08,560
mutable

435
00:14:08,560 --> 00:14:10,800
but they must be associated with at most

436
00:14:10,800 --> 00:14:13,760
one user at a time

437
00:14:13,760 --> 00:14:15,600
we store this information that tells us

438
00:14:15,600 --> 00:14:17,440
the state of a user's identity

439
00:14:17,440 --> 00:14:20,079
over time in an append only list called

440
00:14:20,079 --> 00:14:21,519
a sig chain

441
00:14:21,519 --> 00:14:23,360
by reconstructing the entire sig chain

442
00:14:23,360 --> 00:14:25,760
for a user we get the current state

443
00:14:25,760 --> 00:14:29,120
of their identity these user identities

444
00:14:29,120 --> 00:14:30,079
will then be committed

445
00:14:30,079 --> 00:14:32,320
to a transparency tree which is built on

446
00:14:32,320 --> 00:14:34,000
top of a miracle tree

447
00:14:34,000 --> 00:14:36,160
the transparency tree is hosted by zoom

448
00:14:36,160 --> 00:14:38,959
but it is externally auditable

449
00:14:38,959 --> 00:14:40,720
this further prevents the server from

450
00:14:40,720 --> 00:14:42,160
forking a user sig chain

451
00:14:42,160 --> 00:14:43,600
in other words showing different

452
00:14:43,600 --> 00:14:45,199
versions of the same sig chain to

453
00:14:45,199 --> 00:14:46,480
different users

454
00:14:46,480 --> 00:14:48,240
because all changes made to a sig chain

455
00:14:48,240 --> 00:14:49,760
must be committed to

456
00:14:49,760 --> 00:14:51,680
any server misbehavior will always be

457
00:14:51,680 --> 00:14:53,920
able to be detected

458
00:14:53,920 --> 00:14:55,680
to really quickly illustrate what the

459
00:14:55,680 --> 00:14:57,680
sig chain and transparency tree designs

460
00:14:57,680 --> 00:14:58,639
do for us

461
00:14:58,639 --> 00:15:00,320
consider the basic attack where the

462
00:15:00,320 --> 00:15:02,000
attacker somehow adds a device to

463
00:15:02,000 --> 00:15:03,360
alice's identity

464
00:15:03,360 --> 00:15:04,880
this can happen if the attacker

465
00:15:04,880 --> 00:15:07,120
successfully guesses alice's password

466
00:15:07,120 --> 00:15:09,199
or if the attacker compromises the zoom

467
00:15:09,199 --> 00:15:10,160
server

468
00:15:10,160 --> 00:15:12,720
the attacker can now join a meeting with

469
00:15:12,720 --> 00:15:14,160
alice's identity

470
00:15:14,160 --> 00:15:16,320
but the sig chain and transparency tree

471
00:15:16,320 --> 00:15:18,079
ensure that the attacker can't cover

472
00:15:18,079 --> 00:15:19,120
their tracks

473
00:15:19,120 --> 00:15:21,040
and erase the device that they added

474
00:15:21,040 --> 00:15:22,639
without being detected

475
00:15:22,639 --> 00:15:24,639
when alice comes back online she can

476
00:15:24,639 --> 00:15:26,880
review any changes made to her identity

477
00:15:26,880 --> 00:15:29,920
and notice this new device our zoom

478
00:15:29,920 --> 00:15:31,120
transparency tree

479
00:15:31,120 --> 00:15:33,440
is similar to certificate transparency

480
00:15:33,440 --> 00:15:34,480
and key base

481
00:15:34,480 --> 00:15:37,040
but not completely unlike these other

482
00:15:37,040 --> 00:15:39,120
transparency trees where identities are

483
00:15:39,120 --> 00:15:40,399
completely public

484
00:15:40,399 --> 00:15:43,040
zoom identities are not in addition

485
00:15:43,040 --> 00:15:44,079
unlike with key base

486
00:15:44,079 --> 00:15:45,920
we need to handle mutable user

487
00:15:45,920 --> 00:15:48,079
identifiers that work with the zoom

488
00:15:48,079 --> 00:15:49,759
notion of user identity

489
00:15:49,759 --> 00:15:52,839
the white paper goes into this in more

490
00:15:52,839 --> 00:15:54,320
detail

491
00:15:54,320 --> 00:15:55,920
now i'll broadly explain how this

492
00:15:55,920 --> 00:15:58,000
identity information will be displayed

493
00:15:58,000 --> 00:16:01,839
and verified by meeting participants

494
00:16:01,839 --> 00:16:04,160
if the user would like or if the meeting

495
00:16:04,160 --> 00:16:06,320
settings require identity information

496
00:16:06,320 --> 00:16:09,040
in order to join the user may also share

497
00:16:09,040 --> 00:16:10,240
their user identity

498
00:16:10,240 --> 00:16:12,639
with their meeting partners note that as

499
00:16:12,639 --> 00:16:13,360
always

500
00:16:13,360 --> 00:16:15,839
you can join a meeting as a guest using

501
00:16:15,839 --> 00:16:17,920
a fresh ephemeral device key

502
00:16:17,920 --> 00:16:20,320
no sig chain data and displaying only

503
00:16:20,320 --> 00:16:21,279
the display name

504
00:16:21,279 --> 00:16:24,959
as carol is doing here here you can see

505
00:16:24,959 --> 00:16:25,839
for example

506
00:16:25,839 --> 00:16:28,000
that bob has shared their user identity

507
00:16:28,000 --> 00:16:29,199
with alice

508
00:16:29,199 --> 00:16:31,680
alice's client will automatically load

509
00:16:31,680 --> 00:16:34,000
the email and account domain identifiers

510
00:16:34,000 --> 00:16:37,040
associated with bob's device key and

511
00:16:37,040 --> 00:16:38,320
display them in the ui

512
00:16:38,320 --> 00:16:41,759
in addition to the display name

513
00:16:41,759 --> 00:16:44,560
now alice may decide if she expects and

514
00:16:44,560 --> 00:16:45,040
trusts

515
00:16:45,040 --> 00:16:47,920
these user identifiers displayed for bob

516
00:16:47,920 --> 00:16:50,320
in addition we're implementing two other

517
00:16:50,320 --> 00:16:53,440
identity verification features

518
00:16:53,440 --> 00:16:55,680
first alice's client will determine if

519
00:16:55,680 --> 00:16:57,839
it has seen bob's identity before

520
00:16:57,839 --> 00:17:00,000
in a different meeting whether on elsa's

521
00:17:00,000 --> 00:17:00,959
current device

522
00:17:00,959 --> 00:17:04,480
or another if else hasn't met bob before

523
00:17:04,480 --> 00:17:06,480
or this particular device of bob's

524
00:17:06,480 --> 00:17:08,319
alice's client should indicate that

525
00:17:08,319 --> 00:17:10,959
by displaying a trust on first use style

526
00:17:10,959 --> 00:17:13,119
warning

527
00:17:13,119 --> 00:17:15,280
lastly we'll we will offer a feature for

528
00:17:15,280 --> 00:17:16,400
users and accounts

529
00:17:16,400 --> 00:17:19,520
that use an identity provider or idp

530
00:17:19,520 --> 00:17:21,679
that allows the idp to attest to a

531
00:17:21,679 --> 00:17:23,199
user's identity

532
00:17:23,199 --> 00:17:24,880
here we leverage the fact that many of

533
00:17:24,880 --> 00:17:26,240
our users already

534
00:17:26,240 --> 00:17:28,880
trust their idp for authentication and

535
00:17:28,880 --> 00:17:30,799
therefore might also use the idp

536
00:17:30,799 --> 00:17:33,760
as a trusted third party when verifying

537
00:17:33,760 --> 00:17:36,080
meeting participants identities

538
00:17:36,080 --> 00:17:38,240
in our design we must ensure that only

539
00:17:38,240 --> 00:17:39,679
the user's client

540
00:17:39,679 --> 00:17:41,840
and never the zoom server can update the

541
00:17:41,840 --> 00:17:43,520
user identity that the idp

542
00:17:43,520 --> 00:17:46,880
is vouching for for more details on the

543
00:17:46,880 --> 00:17:48,480
engineering required to support these

544
00:17:48,480 --> 00:17:49,120
features

545
00:17:49,120 --> 00:17:52,880
i encourage you to read the white paper

546
00:17:52,880 --> 00:17:55,280
so now i'll finish this talk with three

547
00:17:55,280 --> 00:17:56,880
takeaways

548
00:17:56,880 --> 00:17:58,880
first the security of end-to-end

549
00:17:58,880 --> 00:18:00,000
encryption depends on

550
00:18:00,000 --> 00:18:02,720
knowing who is at the ends starting with

551
00:18:02,720 --> 00:18:04,559
a user's device public keys

552
00:18:04,559 --> 00:18:07,039
we've constructed a human-centric notion

553
00:18:07,039 --> 00:18:08,880
of zoom user identity

554
00:18:08,880 --> 00:18:11,679
in our multiple phases of work we aim to

555
00:18:11,679 --> 00:18:12,160
offer

556
00:18:12,160 --> 00:18:13,760
various options to make identity

557
00:18:13,760 --> 00:18:15,919
verification more effortless

558
00:18:15,919 --> 00:18:18,480
for the end user including mechanisms

559
00:18:18,480 --> 00:18:20,400
that minimize the need to trust the

560
00:18:20,400 --> 00:18:22,799
server

561
00:18:22,880 --> 00:18:25,039
second i hope this talk conveyed some

562
00:18:25,039 --> 00:18:26,799
interesting experiences about building

563
00:18:26,799 --> 00:18:28,000
end-to-end encryption

564
00:18:28,000 --> 00:18:30,480
in the real world we built and are

565
00:18:30,480 --> 00:18:31,280
continuing

566
00:18:31,280 --> 00:18:33,120
to build and ship security features for

567
00:18:33,120 --> 00:18:35,120
a widely used application

568
00:18:35,120 --> 00:18:37,200
and from day one our design and

569
00:18:37,200 --> 00:18:38,640
implementation choices

570
00:18:38,640 --> 00:18:40,799
and the resulting security properties

571
00:18:40,799 --> 00:18:42,960
must account for existing architectural

572
00:18:42,960 --> 00:18:43,919
constraints

573
00:18:43,919 --> 00:18:46,080
scalability and performance requirements

574
00:18:46,080 --> 00:18:48,240
ui and ux considerations

575
00:18:48,240 --> 00:18:52,080
and product needs lastly

576
00:18:52,080 --> 00:18:54,400
is it secure is never a yes or no

577
00:18:54,400 --> 00:18:55,360
question

578
00:18:55,360 --> 00:18:57,200
the answer depends on the security

579
00:18:57,200 --> 00:18:59,600
privacy and usability needs of your

580
00:18:59,600 --> 00:19:00,559
specific meeting

581
00:19:00,559 --> 00:19:03,039
whomever it might be with the answer

582
00:19:03,039 --> 00:19:05,039
also depends on your assumptions

583
00:19:05,039 --> 00:19:07,679
and at every stage of our work how well

584
00:19:07,679 --> 00:19:09,919
those assumptions are communicated to

585
00:19:09,919 --> 00:19:11,039
and verified

586
00:19:11,039 --> 00:19:14,240
by end users so i hope this talk offers

587
00:19:14,240 --> 00:19:16,000
more color into the many nuances of the

588
00:19:16,000 --> 00:19:17,679
security properties you might think

589
00:19:17,679 --> 00:19:18,160
about

590
00:19:18,160 --> 00:19:20,320
for your next video conferencing meeting

591
00:19:20,320 --> 00:19:22,320
and what it takes from an engineering

592
00:19:22,320 --> 00:19:23,200
perspective

593
00:19:23,200 --> 00:19:25,520
to achieve those security properties

594
00:19:25,520 --> 00:19:37,039
thank you

