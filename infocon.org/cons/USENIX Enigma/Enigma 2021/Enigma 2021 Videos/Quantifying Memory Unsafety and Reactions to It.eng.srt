1
00:00:08,960 --> 00:00:10,639
thanks for coming i'm alex gainer and

2
00:00:10,639 --> 00:00:12,719
this is quantifying memory unsafety and

3
00:00:12,719 --> 00:00:13,920
reactions to it

4
00:00:13,920 --> 00:00:15,759
i'm a founder and principal at fishner

5
00:00:15,759 --> 00:00:18,160
barrel fishnet barrel is a satirical

6
00:00:18,160 --> 00:00:19,600
security consultancy

7
00:00:19,600 --> 00:00:21,119
and real collective of folks doing

8
00:00:21,119 --> 00:00:23,279
security research i've also had normal

9
00:00:23,279 --> 00:00:23,840
jobs

10
00:00:23,840 --> 00:00:25,599
including his tech lead for firefox

11
00:00:25,599 --> 00:00:27,599
sandboxing and as chief information

12
00:00:27,599 --> 00:00:29,359
security officer for an election data

13
00:00:29,359 --> 00:00:30,320
startup

14
00:00:30,320 --> 00:00:32,159
at fish and a barrel we've discovered

15
00:00:32,159 --> 00:00:33,920
hundreds of security vulnerabilities in

16
00:00:33,920 --> 00:00:36,559
widely used open source projects

17
00:00:36,559 --> 00:00:38,800
as our name suggests our focus is on

18
00:00:38,800 --> 00:00:40,160
attack surfaces where finding

19
00:00:40,160 --> 00:00:42,000
vulnerabilities is like shooting fish in

20
00:00:42,000 --> 00:00:42,879
a barrel

21
00:00:42,879 --> 00:00:44,960
to identify them we look for places

22
00:00:44,960 --> 00:00:46,800
where there's a common underlying cause

23
00:00:46,800 --> 00:00:48,480
of a lot of vulnerabilities

24
00:00:48,480 --> 00:00:50,079
and they're being handled with a game of

25
00:00:50,079 --> 00:00:52,000
whack-a-mole rather than by actually

26
00:00:52,000 --> 00:00:53,520
treating the root cause

27
00:00:53,520 --> 00:00:56,000
let me give you an example you may

28
00:00:56,000 --> 00:00:57,520
recognize the screenshot

29
00:00:57,520 --> 00:01:00,000
it's the phishing email from march 2016

30
00:01:00,000 --> 00:01:01,840
that john podesta received

31
00:01:01,840 --> 00:01:03,920
john clicks on the link after he's told

32
00:01:03,920 --> 00:01:06,000
it's safe by an i.t staffer

33
00:01:06,000 --> 00:01:08,000
and then seven months later the contents

34
00:01:08,000 --> 00:01:09,920
of his inbox is a front-page story in

35
00:01:09,920 --> 00:01:12,080
every newspaper in the country

36
00:01:12,080 --> 00:01:13,760
credential phishing has been recognized

37
00:01:13,760 --> 00:01:15,759
as a security challenge for decades

38
00:01:15,759 --> 00:01:17,520
and the way we've treated it was heavily

39
00:01:17,520 --> 00:01:19,520
centered around user education and email

40
00:01:19,520 --> 00:01:20,479
filtering

41
00:01:20,479 --> 00:01:22,400
we've told users to closely check the

42
00:01:22,400 --> 00:01:24,799
sender not to click on links and emails

43
00:01:24,799 --> 00:01:26,479
and we've sent them fake phishing emails

44
00:01:26,479 --> 00:01:28,799
to test them and to a lesser extent

45
00:01:28,799 --> 00:01:30,799
we've worked on technologies like spf

46
00:01:30,799 --> 00:01:31,920
and dkim

47
00:01:31,920 --> 00:01:34,079
however even these technologies mostly

48
00:01:34,079 --> 00:01:35,600
serve to better enable humans to

49
00:01:35,600 --> 00:01:37,840
recognize phishing emails

50
00:01:37,840 --> 00:01:39,920
however all these miss the common

51
00:01:39,920 --> 00:01:42,079
underlying cause of credential phishing

52
00:01:42,079 --> 00:01:44,159
credentials that are replayable and not

53
00:01:44,159 --> 00:01:45,200
origin bound

54
00:01:45,200 --> 00:01:46,720
meaning you could obtain credentials on

55
00:01:46,720 --> 00:01:48,640
one domain a phishing page

56
00:01:48,640 --> 00:01:50,720
and use it on a victim website and

57
00:01:50,720 --> 00:01:52,240
because we've never addressed the root

58
00:01:52,240 --> 00:01:52,799
cause

59
00:01:52,799 --> 00:01:54,720
no matter how much we trained users

60
00:01:54,720 --> 00:01:56,719
credential fishing remained endemic

61
00:01:56,719 --> 00:01:58,320
leaving a gap big enough to drive a

62
00:01:58,320 --> 00:02:00,240
presidential election through

63
00:02:00,240 --> 00:02:02,880
web authen and its predecessor u2f

64
00:02:02,880 --> 00:02:05,119
colloquially known as security keys

65
00:02:05,119 --> 00:02:06,640
changed the game here by actually

66
00:02:06,640 --> 00:02:08,399
addressing the lack of origin binding

67
00:02:08,399 --> 00:02:09,758
and credentials

68
00:02:09,758 --> 00:02:11,520
and you can see it in the results

69
00:02:11,520 --> 00:02:13,200
google's research shows the credential

70
00:02:13,200 --> 00:02:13,680
phishing

71
00:02:13,680 --> 00:02:16,000
against users with security keys has a

72
00:02:16,000 --> 00:02:17,840
zero percent success rate

73
00:02:17,840 --> 00:02:20,319
not like zero percent not close to zero

74
00:02:20,319 --> 00:02:21,040
percent

75
00:02:21,040 --> 00:02:23,520
actually zero percent even against the

76
00:02:23,520 --> 00:02:25,599
most sophisticated attackers

77
00:02:25,599 --> 00:02:27,120
this is the kind of success that we can

78
00:02:27,120 --> 00:02:29,120
achieve by focusing on root causes

79
00:02:29,120 --> 00:02:30,560
and not merely playing a game of

80
00:02:30,560 --> 00:02:32,319
whack-a-mole with symptoms or proximate

81
00:02:32,319 --> 00:02:33,519
causes

82
00:02:33,519 --> 00:02:35,120
this is what fish and barrel means when

83
00:02:35,120 --> 00:02:36,879
we say security must focus on addressing

84
00:02:36,879 --> 00:02:38,319
underlying causes

85
00:02:38,319 --> 00:02:40,160
and so we support these efforts with

86
00:02:40,160 --> 00:02:42,480
evangelism and by distributing security

87
00:02:42,480 --> 00:02:44,000
keys to groups at heightened risk

88
00:02:44,000 --> 00:02:47,120
such as political campaign teams this

89
00:02:47,120 --> 00:02:48,640
brings us to the central topic of this

90
00:02:48,640 --> 00:02:49,360
talk

91
00:02:49,360 --> 00:02:51,680
memory unsafety we believe memory

92
00:02:51,680 --> 00:02:53,599
unsafety in widely used programming

93
00:02:53,599 --> 00:02:54,400
languages

94
00:02:54,400 --> 00:02:56,640
is one of these root causes we think

95
00:02:56,640 --> 00:02:58,400
that for far too long our industry's

96
00:02:58,400 --> 00:02:59,920
approach has been to play whack-a-mole

97
00:02:59,920 --> 00:03:01,760
with an unending series of asan and

98
00:03:01,760 --> 00:03:02,959
amsam reports

99
00:03:02,959 --> 00:03:05,440
while ignoring this root cause i want to

100
00:03:05,440 --> 00:03:07,040
walk you through a definition of memory

101
00:03:07,040 --> 00:03:08,319
unsafety

102
00:03:08,319 --> 00:03:09,920
a few case studies that we believe

103
00:03:09,920 --> 00:03:11,519
demonstrate the need to treat this as a

104
00:03:11,519 --> 00:03:12,480
root cause

105
00:03:12,480 --> 00:03:13,840
and then i want to share with you what

106
00:03:13,840 --> 00:03:15,280
we've learned in trying to talk about

107
00:03:15,280 --> 00:03:17,040
this issue to software and security

108
00:03:17,040 --> 00:03:19,360
engineers

109
00:03:19,360 --> 00:03:21,519
our def memory on safety is a property

110
00:03:21,519 --> 00:03:23,120
of programming languages

111
00:03:23,120 --> 00:03:25,280
and our definition of memory and safety

112
00:03:25,280 --> 00:03:26,799
is a really practical one

113
00:03:26,799 --> 00:03:29,280
they're programming languages where by

114
00:03:29,280 --> 00:03:30,239
default

115
00:03:30,239 --> 00:03:32,560
you can get these vulnerability types

116
00:03:32,560 --> 00:03:33,680
buffer overflows

117
00:03:33,680 --> 00:03:36,560
use after freeze wild pointers you'll

118
00:03:36,560 --> 00:03:38,400
recognize these as the classic bug types

119
00:03:38,400 --> 00:03:39,280
you'll find in a c

120
00:03:39,280 --> 00:03:41,280
program with val grind or asan and

121
00:03:41,280 --> 00:03:43,280
that's not a coincidence

122
00:03:43,280 --> 00:03:45,200
here's a list of programming languages

123
00:03:45,200 --> 00:03:46,959
grouped by whether they're memory safe

124
00:03:46,959 --> 00:03:48,720
or memory unsafe

125
00:03:48,720 --> 00:03:50,239
a few things are important to note about

126
00:03:50,239 --> 00:03:51,920
the languages here

127
00:03:51,920 --> 00:03:54,000
while the memory unsafe languages are

128
00:03:54,000 --> 00:03:55,439
all pretty similar in the set of

129
00:03:55,439 --> 00:03:57,040
problems you might use them for

130
00:03:57,040 --> 00:03:59,120
systems programming the memory safe

131
00:03:59,120 --> 00:04:01,120
languages are far more diverse

132
00:04:01,120 --> 00:04:04,080
some are high level others are low level

133
00:04:04,080 --> 00:04:05,519
some are garbage collected

134
00:04:05,519 --> 00:04:07,920
some aren't some are interpreted others

135
00:04:07,920 --> 00:04:08,799
are compiled

136
00:04:08,799 --> 00:04:10,239
and of course neither of these lists are

137
00:04:10,239 --> 00:04:12,080
comprehensive

138
00:04:12,080 --> 00:04:13,599
not all the memory safe languages

139
00:04:13,599 --> 00:04:14,959
therefore are necessarily good

140
00:04:14,959 --> 00:04:16,399
replacements for projects you might

141
00:04:16,399 --> 00:04:17,839
write in one of the memory unsafe

142
00:04:17,839 --> 00:04:20,079
languages like crc plus plus

143
00:04:20,079 --> 00:04:22,160
a few of them are though go is a

144
00:04:22,160 --> 00:04:23,759
particularly good choice for network

145
00:04:23,759 --> 00:04:24,639
servers

146
00:04:24,639 --> 00:04:26,080
swift is excellent if you're in the

147
00:04:26,080 --> 00:04:27,919
apple ecosystem and they're trying to

148
00:04:27,919 --> 00:04:30,639
make swift on the server a thing too

149
00:04:30,639 --> 00:04:32,400
rust is probably the strongest choice

150
00:04:32,400 --> 00:04:33,759
for a general purpose

151
00:04:33,759 --> 00:04:36,080
c in c plus replacement language and

152
00:04:36,080 --> 00:04:38,479
it's also able to interoperate with them

153
00:04:38,479 --> 00:04:40,240
ten years ago it was not the case that

154
00:04:40,240 --> 00:04:42,000
we had several excellent competitors

155
00:04:42,000 --> 00:04:44,160
to see in c plus and it's important to

156
00:04:44,160 --> 00:04:45,919
consider that when asking how we got

157
00:04:45,919 --> 00:04:47,520
here

158
00:04:47,520 --> 00:04:50,240
there are however several edge cases for

159
00:04:50,240 --> 00:04:51,040
example

160
00:04:51,040 --> 00:04:53,280
go allows for data races in its map data

161
00:04:53,280 --> 00:04:54,479
structure

162
00:04:54,479 --> 00:04:55,759
one of the features that several of

163
00:04:55,759 --> 00:04:57,680
these modern memory safe languages have

164
00:04:57,680 --> 00:05:00,080
is an unsafe keyword that acts as an

165
00:05:00,080 --> 00:05:01,440
escape hatch

166
00:05:01,440 --> 00:05:03,280
some folks fear that this means that all

167
00:05:03,280 --> 00:05:04,800
programs in these languages

168
00:05:04,800 --> 00:05:07,199
merely degrade into one giant unsafe

169
00:05:07,199 --> 00:05:07,840
block

170
00:05:07,840 --> 00:05:09,520
but in practice that's not what we see

171
00:05:09,520 --> 00:05:11,199
happening in fact

172
00:05:11,199 --> 00:05:12,960
unsafe blocks do a lot to enable

173
00:05:12,960 --> 00:05:15,199
auditability of auditability of code

174
00:05:15,199 --> 00:05:16,240
bases

175
00:05:16,240 --> 00:05:18,479
a research team found that of code on

176
00:05:18,479 --> 00:05:21,120
the rust packaging website crates.io

177
00:05:21,120 --> 00:05:23,360
three quarters of packages had no unsafe

178
00:05:23,360 --> 00:05:24,720
code at all

179
00:05:24,720 --> 00:05:26,960
looking at rustless a complete tls

180
00:05:26,960 --> 00:05:28,479
implementation rust

181
00:05:28,479 --> 00:05:30,720
and its complete dependency tree the

182
00:05:30,720 --> 00:05:32,160
only unsafe code at all

183
00:05:32,160 --> 00:05:34,000
is in ring the implementation of

184
00:05:34,000 --> 00:05:36,080
low-level cryptographic algorithms

185
00:05:36,080 --> 00:05:37,759
nowhere else in their dependencies

186
00:05:37,759 --> 00:05:39,759
including in the tls protocol

187
00:05:39,759 --> 00:05:42,080
is their unsafe code and all of this

188
00:05:42,080 --> 00:05:43,919
matches my personal experience

189
00:05:43,919 --> 00:05:46,639
that unsafe code is relatively rare and

190
00:05:46,639 --> 00:05:47,680
where it does exist

191
00:05:47,680 --> 00:05:50,479
enables auditors to focus on spending

192
00:05:50,479 --> 00:05:51,600
their time well to look for

193
00:05:51,600 --> 00:05:54,400
vulnerabilities

194
00:05:54,479 --> 00:05:56,400
conventional wisdom for a long time has

195
00:05:56,400 --> 00:05:57,919
been that exploitation of memory and

196
00:05:57,919 --> 00:05:59,360
safety vulnerabilities

197
00:05:59,360 --> 00:06:01,360
in real world exploits has been the

198
00:06:01,360 --> 00:06:03,360
exclusive domain of tier one nation

199
00:06:03,360 --> 00:06:06,479
states by advanced intelligence agencies

200
00:06:06,479 --> 00:06:08,960
for targeted intelligence collection

201
00:06:08,960 --> 00:06:10,800
this is not the case

202
00:06:10,800 --> 00:06:13,120
china exploited ios zero days against

203
00:06:13,120 --> 00:06:15,600
everyone who visited uyghur websites

204
00:06:15,600 --> 00:06:17,759
nso's pegasus product has been found

205
00:06:17,759 --> 00:06:19,199
used against everyone from middle

206
00:06:19,199 --> 00:06:20,960
eastern human rights advocates

207
00:06:20,960 --> 00:06:23,759
to mexican nutritionists the exploits

208
00:06:23,759 --> 00:06:25,919
listed here target different software

209
00:06:25,919 --> 00:06:29,039
ios android whatsapp windows and linux

210
00:06:29,039 --> 00:06:29,840
servers

211
00:06:29,840 --> 00:06:30,960
they've used against different

212
00:06:30,960 --> 00:06:33,600
populations spanning the entire globe

213
00:06:33,600 --> 00:06:35,360
they represent government attackers

214
00:06:35,360 --> 00:06:36,880
commercial exploit vendors

215
00:06:36,880 --> 00:06:39,120
and script kitties the common thread

216
00:06:39,120 --> 00:06:40,560
here is that for each of these

217
00:06:40,560 --> 00:06:42,560
vulnerabilities

218
00:06:42,560 --> 00:06:44,319
for each of these the vulnerabilities

219
00:06:44,319 --> 00:06:46,400
exploited or in some cases

220
00:06:46,400 --> 00:06:48,000
at least one of the vulnerabilities in

221
00:06:48,000 --> 00:06:50,639
the chain for multi-vulnerability chains

222
00:06:50,639 --> 00:06:52,639
was only possible because of the victim

223
00:06:52,639 --> 00:06:54,240
software being written in a memory

224
00:06:54,240 --> 00:06:55,919
unsafe language

225
00:06:55,919 --> 00:06:58,080
put another way if the relevant portions

226
00:06:58,080 --> 00:06:59,840
of these projects were written in a safe

227
00:06:59,840 --> 00:07:00,400
language

228
00:07:00,400 --> 00:07:02,000
the vulnerabilities exploited here

229
00:07:02,000 --> 00:07:03,840
wouldn't have been possible

230
00:07:03,840 --> 00:07:05,759
and that's the success criteria i set

231
00:07:05,759 --> 00:07:07,599
for myself in this effort

232
00:07:07,599 --> 00:07:09,120
can we make exploiting software

233
00:07:09,120 --> 00:07:11,199
vulnerabilities to enable human rights

234
00:07:11,199 --> 00:07:11,919
abuses

235
00:07:11,919 --> 00:07:16,720
impractical or impossible

236
00:07:16,720 --> 00:07:18,080
so i've given you the premise and i've

237
00:07:18,080 --> 00:07:19,599
told you our argument these

238
00:07:19,599 --> 00:07:21,680
vulnerabilities all share a common root

239
00:07:21,680 --> 00:07:22,080
cause

240
00:07:22,080 --> 00:07:23,759
in these programming languages memory

241
00:07:23,759 --> 00:07:26,400
unsafety if we use safe languages

242
00:07:26,400 --> 00:07:28,000
we could dramatically improve computer

243
00:07:28,000 --> 00:07:30,319
security now i want to walk you through

244
00:07:30,319 --> 00:07:32,160
the evidence to support this claim

245
00:07:32,160 --> 00:07:33,680
as well as why we think this is a

246
00:07:33,680 --> 00:07:35,840
tractable project to engage in

247
00:07:35,840 --> 00:07:37,039
i'm going to do this in a slightly

248
00:07:37,039 --> 00:07:39,440
unusual way though vishnu barrel has

249
00:07:39,440 --> 00:07:41,120
been engaged in advocacy efforts for

250
00:07:41,120 --> 00:07:42,319
several years

251
00:07:42,319 --> 00:07:43,759
i'm going to share with you the

252
00:07:43,759 --> 00:07:45,520
arguments we make and the data we

253
00:07:45,520 --> 00:07:46,960
marshall to support them

254
00:07:46,960 --> 00:07:48,800
as seen through the opposing reactions

255
00:07:48,800 --> 00:07:51,360
we get i'll be doing my best to engage

256
00:07:51,360 --> 00:07:53,039
seriously with the arguments against

257
00:07:53,039 --> 00:07:54,800
us and i'll be framing this through the

258
00:07:54,800 --> 00:07:56,319
stages of grief

259
00:07:56,319 --> 00:07:58,879
the first stage of grief is denial in

260
00:07:58,879 --> 00:08:00,720
the this is generally characterized by

261
00:08:00,720 --> 00:08:01,840
software engineers

262
00:08:01,840 --> 00:08:03,280
believing that there's no reason to

263
00:08:03,280 --> 00:08:04,720
support the idea there might be an

264
00:08:04,720 --> 00:08:05,840
underlying condition in these

265
00:08:05,840 --> 00:08:07,280
programming languages

266
00:08:07,280 --> 00:08:09,199
people at this stage often express that

267
00:08:09,199 --> 00:08:10,720
it's possible to have vulnerabilities in

268
00:08:10,720 --> 00:08:11,520
any language

269
00:08:11,520 --> 00:08:13,039
and that logic vulnerabilities are

270
00:08:13,039 --> 00:08:16,240
common we argue against this using data

271
00:08:16,240 --> 00:08:18,080
to ground our beliefs

272
00:08:18,080 --> 00:08:19,599
and here's the data we've collected over

273
00:08:19,599 --> 00:08:21,199
the last several years

274
00:08:21,199 --> 00:08:23,520
this reflects a mix of our own analysis

275
00:08:23,520 --> 00:08:26,319
and analysis from the vendors themselves

276
00:08:26,319 --> 00:08:28,080
one of the things we try to make clear

277
00:08:28,080 --> 00:08:29,919
is that the idea that memory unsafety

278
00:08:29,919 --> 00:08:32,080
produces vulnerabilities is an empirical

279
00:08:32,080 --> 00:08:33,120
claim

280
00:08:33,120 --> 00:08:34,958
if you want to reject it you need

281
00:08:34,958 --> 00:08:36,320
competing data

282
00:08:36,320 --> 00:08:37,760
we're more than happy to revise our

283
00:08:37,760 --> 00:08:40,320
hypothesis but doing so needs data

284
00:08:40,320 --> 00:08:43,760
not conjecture data on most of the data

285
00:08:43,760 --> 00:08:44,240
here

286
00:08:44,240 --> 00:08:46,800
reflects individual vulnerabilities

287
00:08:46,800 --> 00:08:48,160
found in these projects

288
00:08:48,160 --> 00:08:50,320
data on complete exploit chains isn't

289
00:08:50,320 --> 00:08:51,360
quite as common

290
00:08:51,360 --> 00:08:53,360
because complete exploit chains are rare

291
00:08:53,360 --> 00:08:54,880
in public research

292
00:08:54,880 --> 00:08:56,880
however looking at one sample data set

293
00:08:56,880 --> 00:08:58,240
of complete exploit chains

294
00:08:58,240 --> 00:09:01,760
from pwn to own 2019 every single chain

295
00:09:01,760 --> 00:09:04,640
but one contained at least one memory

296
00:09:04,640 --> 00:09:06,399
unsafety vulnerability

297
00:09:06,399 --> 00:09:08,480
that is memory safe languages would have

298
00:09:08,480 --> 00:09:10,399
broken almost all of the chains

299
00:09:10,399 --> 00:09:12,000
even if it wouldn't have prevented all

300
00:09:12,000 --> 00:09:14,560
of the vulnerabilities

301
00:09:14,560 --> 00:09:16,880
analytically vulnerabilities are a venn

302
00:09:16,880 --> 00:09:17,920
diagram

303
00:09:17,920 --> 00:09:19,360
those that are only possible in the

304
00:09:19,360 --> 00:09:21,440
memory unsafe language those that are

305
00:09:21,440 --> 00:09:22,080
only possible

306
00:09:22,080 --> 00:09:23,920
in the memory safe language and those

307
00:09:23,920 --> 00:09:26,080
that are possible in any language

308
00:09:26,080 --> 00:09:28,240
in a category of only possible in a safe

309
00:09:28,240 --> 00:09:30,320
language we place things like untrusted

310
00:09:30,320 --> 00:09:31,040
eval

311
00:09:31,040 --> 00:09:34,080
or use of python's pickle thus far we

312
00:09:34,080 --> 00:09:35,920
think the data conclusively shows that

313
00:09:35,920 --> 00:09:37,200
the first category

314
00:09:37,200 --> 00:09:39,360
unsafe languages only dramatically

315
00:09:39,360 --> 00:09:41,200
dwarfs the second category

316
00:09:41,200 --> 00:09:43,680
safe languages only in magnitude and

317
00:09:43,680 --> 00:09:45,360
there's no reason to think the third

318
00:09:45,360 --> 00:09:46,160
category

319
00:09:46,160 --> 00:09:49,440
appears in both changes depending on how

320
00:09:49,440 --> 00:09:52,080
on what type of language it is therefore

321
00:09:52,080 --> 00:09:54,160
it must be the case that using a memory

322
00:09:54,160 --> 00:09:55,360
unsafe language

323
00:09:55,360 --> 00:09:57,920
increases rates of vulnerabilities if

324
00:09:57,920 --> 00:09:59,040
you think that's wrong

325
00:09:59,040 --> 00:10:02,320
show us the data the next stage of grief

326
00:10:02,320 --> 00:10:03,600
is anger

327
00:10:03,600 --> 00:10:05,440
in anger people confronted with this

328
00:10:05,440 --> 00:10:07,040
problem will claim that while

329
00:10:07,040 --> 00:10:09,519
yes vulnerabilities can happen in c or c

330
00:10:09,519 --> 00:10:10,320
plus plus

331
00:10:10,320 --> 00:10:11,920
the solution is simply to be a better

332
00:10:11,920 --> 00:10:14,320
more disciplined programmer

333
00:10:14,320 --> 00:10:16,000
we argue with this by appealing to the

334
00:10:16,000 --> 00:10:18,560
talent of other people not ourselves

335
00:10:18,560 --> 00:10:20,079
we point out that the engineers at

336
00:10:20,079 --> 00:10:21,600
microsoft and mozilla and

337
00:10:21,600 --> 00:10:23,360
apple and google and folks working on

338
00:10:23,360 --> 00:10:26,079
the linux kernel are very talented folks

339
00:10:26,079 --> 00:10:28,320
but they're still beset by this problem

340
00:10:28,320 --> 00:10:29,920
and we try to point out that discipline

341
00:10:29,920 --> 00:10:30,959
doesn't scale

342
00:10:30,959 --> 00:10:32,640
my own observation has been that as the

343
00:10:32,640 --> 00:10:34,640
scale of a code base increases

344
00:10:34,640 --> 00:10:36,240
any properties of it which are not

345
00:10:36,240 --> 00:10:37,920
programmatically enforced will tend to

346
00:10:37,920 --> 00:10:39,519
regress

347
00:10:39,519 --> 00:10:41,839
put another way anybody can write a code

348
00:10:41,839 --> 00:10:43,200
base with low bug count

349
00:10:43,200 --> 00:10:45,760
but no automated test but that breaks

350
00:10:45,760 --> 00:10:47,760
down as you have more developers writing

351
00:10:47,760 --> 00:10:50,160
more code over more time

352
00:10:50,160 --> 00:10:52,000
similarly anyone seems to be able to

353
00:10:52,000 --> 00:10:53,279
write a hundred lines of c

354
00:10:53,279 --> 00:10:55,440
code without a vulnerability no one

355
00:10:55,440 --> 00:10:56,800
seems to be able to write a million

356
00:10:56,800 --> 00:10:57,440
lines of c

357
00:10:57,440 --> 00:10:58,880
code without a vulnerability due to

358
00:10:58,880 --> 00:11:00,560
memory unsafety

359
00:11:00,560 --> 00:11:02,959
but most importantly we argue against

360
00:11:02,959 --> 00:11:03,600
this

361
00:11:03,600 --> 00:11:06,079
with observations from complex systems

362
00:11:06,079 --> 00:11:07,200
failure

363
00:11:07,200 --> 00:11:08,800
there's a lot of research on the design

364
00:11:08,800 --> 00:11:10,959
of complex systems such as hospital

365
00:11:10,959 --> 00:11:12,959
emergency rooms or the power grid

366
00:11:12,959 --> 00:11:14,560
and there's some amazing folks who look

367
00:11:14,560 --> 00:11:16,720
at the overlap between that body of work

368
00:11:16,720 --> 00:11:18,240
and things like site reliability

369
00:11:18,240 --> 00:11:19,920
engineering work the maintenance of

370
00:11:19,920 --> 00:11:22,079
complex distributed systems

371
00:11:22,079 --> 00:11:25,040
the website howe dot complex systems dot

372
00:11:25,040 --> 00:11:25,680
fail

373
00:11:25,680 --> 00:11:27,519
is an excellent presentation of some of

374
00:11:27,519 --> 00:11:29,600
the most important ideas from this body

375
00:11:29,600 --> 00:11:30,160
of work

376
00:11:30,160 --> 00:11:32,480
from dr richard cook frankly i wish we

377
00:11:32,480 --> 00:11:35,279
could spend an entire session on it

378
00:11:35,279 --> 00:11:36,800
some of the really important and

379
00:11:36,800 --> 00:11:38,320
applicable ideas here

380
00:11:38,320 --> 00:11:40,000
are that systems need to defend against

381
00:11:40,000 --> 00:11:41,600
failure robustly

382
00:11:41,600 --> 00:11:44,240
if lack of human error is your only real

383
00:11:44,240 --> 00:11:44,880
defense

384
00:11:44,880 --> 00:11:47,279
then you have a very fragile system a

385
00:11:47,279 --> 00:11:49,040
power grid has numerous layers of

386
00:11:49,040 --> 00:11:51,120
redundancy and contrast

387
00:11:51,120 --> 00:11:52,959
they also point out that our ability to

388
00:11:52,959 --> 00:11:54,880
attribute failure to singular root

389
00:11:54,880 --> 00:11:55,519
causes

390
00:11:55,519 --> 00:11:57,600
is severely limited by cognitive and

391
00:11:57,600 --> 00:11:58,959
other biases

392
00:11:58,959 --> 00:12:00,639
i have no problem saying that when a

393
00:12:00,639 --> 00:12:02,399
buffer overflow is exploited

394
00:12:02,399 --> 00:12:04,560
that reflects a bug in code written by a

395
00:12:04,560 --> 00:12:05,519
programmer

396
00:12:05,519 --> 00:12:07,600
and a gap in mitigations and

397
00:12:07,600 --> 00:12:09,279
insufficient sandboxing

398
00:12:09,279 --> 00:12:10,639
and a fundamental flaw in the

399
00:12:10,639 --> 00:12:13,120
programming languages people who think

400
00:12:13,120 --> 00:12:14,880
programmers should simply write bug-free

401
00:12:14,880 --> 00:12:16,720
code are denying all of the other

402
00:12:16,720 --> 00:12:17,920
contributing causes

403
00:12:17,920 --> 00:12:20,720
not merely the language level causes all

404
00:12:20,720 --> 00:12:21,680
that said

405
00:12:21,680 --> 00:12:23,360
even if programmer skill were the sole

406
00:12:23,360 --> 00:12:24,720
determinative factor

407
00:12:24,720 --> 00:12:25,920
in the existence of exploitable

408
00:12:25,920 --> 00:12:28,399
vulnerabilities in c and c plus

409
00:12:28,399 --> 00:12:30,959
so what why would that mean we shouldn't

410
00:12:30,959 --> 00:12:32,720
pursue solutions that are resilient to

411
00:12:32,720 --> 00:12:34,000
low-skilled programmers

412
00:12:34,000 --> 00:12:36,320
who evidently make the staffs make up

413
00:12:36,320 --> 00:12:37,920
the staffs of all of our largest and

414
00:12:37,920 --> 00:12:39,760
most successful tech companies

415
00:12:39,760 --> 00:12:41,279
how do we even recognize these types of

416
00:12:41,279 --> 00:12:42,800
developers anyway

417
00:12:42,800 --> 00:12:44,480
is there some way we can screen for them

418
00:12:44,480 --> 00:12:46,160
in interviews make sure we don't ever

419
00:12:46,160 --> 00:12:47,600
hire anyone who would write a buffer

420
00:12:47,600 --> 00:12:49,120
overflow

421
00:12:49,120 --> 00:12:50,720
real world resilient security

422
00:12:50,720 --> 00:12:52,800
engineering means in large measure

423
00:12:52,800 --> 00:12:54,880
we have to take humans as we find them

424
00:12:54,880 --> 00:12:57,040
and design systems that work with them

425
00:12:57,040 --> 00:12:59,040
not against them to produce secure

426
00:12:59,040 --> 00:13:01,120
software

427
00:13:01,120 --> 00:13:03,440
the next stage is bargaining here we

428
00:13:03,440 --> 00:13:05,120
understand that memory unsafety can lead

429
00:13:05,120 --> 00:13:06,639
to vulnerabilities

430
00:13:06,639 --> 00:13:08,079
but perhaps we can make this a

431
00:13:08,079 --> 00:13:10,399
manageable risk with things like static

432
00:13:10,399 --> 00:13:11,279
analysis

433
00:13:11,279 --> 00:13:14,079
fuzzing sandboxing exploit mitigation

434
00:13:14,079 --> 00:13:16,480
red teaming bug bounties

435
00:13:16,480 --> 00:13:18,399
in my view this is a particularly

436
00:13:18,399 --> 00:13:20,160
interesting stage because the folks

437
00:13:20,160 --> 00:13:22,160
making this claim are not wrong

438
00:13:22,160 --> 00:13:23,440
if you're going to have code written in

439
00:13:23,440 --> 00:13:25,120
a memory unsafe language these are

440
00:13:25,120 --> 00:13:26,639
outstanding practices

441
00:13:26,639 --> 00:13:28,320
that are necessary to have any level of

442
00:13:28,320 --> 00:13:30,160
security at all frankly

443
00:13:30,160 --> 00:13:31,760
you probably want these practices with a

444
00:13:31,760 --> 00:13:33,279
safe language as well

445
00:13:33,279 --> 00:13:35,120
if i'm writing a browser or operating

446
00:13:35,120 --> 00:13:36,800
system you better believe i'm doing

447
00:13:36,800 --> 00:13:38,880
every single one of these

448
00:13:38,880 --> 00:13:40,880
unfortunately they're not enough and the

449
00:13:40,880 --> 00:13:42,639
way i know that they're not enough is

450
00:13:42,639 --> 00:13:43,920
that the companies that are at the very

451
00:13:43,920 --> 00:13:45,760
forefront of each of these techniques

452
00:13:45,760 --> 00:13:47,519
are also the ones who are targeted by

453
00:13:47,519 --> 00:13:48,880
the exploits i spoke about at the

454
00:13:48,880 --> 00:13:49,920
beginning

455
00:13:49,920 --> 00:13:51,920
the chrome team has tens of thousands of

456
00:13:51,920 --> 00:13:53,279
fuzzing cores that they've been running

457
00:13:53,279 --> 00:13:56,160
for decades in a distributed

458
00:13:56,160 --> 00:13:59,760
distributed fuzzing cluster ios was a

459
00:13:59,760 --> 00:14:01,600
pioneer in making every single app on

460
00:14:01,600 --> 00:14:02,240
the platform

461
00:14:02,240 --> 00:14:05,199
sandboxed microsoft has invested

462
00:14:05,199 --> 00:14:06,720
extensively in memory corruption

463
00:14:06,720 --> 00:14:07,519
mitigations

464
00:14:07,519 --> 00:14:09,519
including compiling their entire kernel

465
00:14:09,519 --> 00:14:11,040
with control flow guard

466
00:14:11,040 --> 00:14:13,040
and the chrome team has also been

467
00:14:13,040 --> 00:14:14,800
pursued an aggressive multi-process

468
00:14:14,800 --> 00:14:16,560
sandbox design

469
00:14:16,560 --> 00:14:18,560
chris palmer of the chrome security team

470
00:14:18,560 --> 00:14:20,320
is speaking in this very session

471
00:14:20,320 --> 00:14:22,560
about security beyond sandboxing

472
00:14:22,560 --> 00:14:24,160
sandboxing which has been at the very

473
00:14:24,160 --> 00:14:25,920
heart of chrome security strategy for

474
00:14:25,920 --> 00:14:28,160
more than a decade

475
00:14:28,160 --> 00:14:30,720
and by the way all of these teams have

476
00:14:30,720 --> 00:14:32,320
spent millions of dollars on bug

477
00:14:32,320 --> 00:14:33,519
bounties

478
00:14:33,519 --> 00:14:35,600
so yes if you do these things you will

479
00:14:35,600 --> 00:14:37,360
dramatically raise the cost of exploits

480
00:14:37,360 --> 00:14:38,560
against your platform

481
00:14:38,560 --> 00:14:40,959
and that's commendable but you won't

482
00:14:40,959 --> 00:14:42,399
raise them high enough to prevent

483
00:14:42,399 --> 00:14:43,920
exploits from being used against human

484
00:14:43,920 --> 00:14:45,279
rights advocates

485
00:14:45,279 --> 00:14:47,760
human rights activists hospitals

486
00:14:47,760 --> 00:14:49,760
journalists or religious minorities

487
00:14:49,760 --> 00:14:52,800
which is ultimately our goal at the

488
00:14:52,800 --> 00:14:53,920
depression phase

489
00:14:53,920 --> 00:14:55,600
we're now fully comprehending the facts

490
00:14:55,600 --> 00:14:57,120
of the situation

491
00:14:57,120 --> 00:14:59,199
memory unsafety is an underlying cause

492
00:14:59,199 --> 00:15:01,120
of huge swaths of vulnerabilities and

493
00:15:01,120 --> 00:15:02,560
it's omnipresent

494
00:15:02,560 --> 00:15:04,480
tons of critical open source projects

495
00:15:04,480 --> 00:15:06,639
from linux to firefox to image magic

496
00:15:06,639 --> 00:15:08,880
have millions of lines of cnc plus plus

497
00:15:08,880 --> 00:15:10,320
to say nothing of the mountains of

498
00:15:10,320 --> 00:15:13,040
closed source code this is just hopeless

499
00:15:13,040 --> 00:15:14,720
even if we took a year-long break from

500
00:15:14,720 --> 00:15:16,480
all feature and bug fix work

501
00:15:16,480 --> 00:15:18,800
we'd barely make a dent in this problem

502
00:15:18,800 --> 00:15:20,320
maybe there's no point trying to address

503
00:15:20,320 --> 00:15:21,519
this cause at all

504
00:15:21,519 --> 00:15:23,279
just focus on things we can do without

505
00:15:23,279 --> 00:15:25,760
rewriting all the code

506
00:15:25,760 --> 00:15:27,760
fortunately our problem statement isn't

507
00:15:27,760 --> 00:15:29,279
to rewrite every line of code

508
00:15:29,279 --> 00:15:31,040
it's to improve security enough these

509
00:15:31,040 --> 00:15:33,519
types of attacks are no longer practical

510
00:15:33,519 --> 00:15:35,199
and we can do that by working smarter

511
00:15:35,199 --> 00:15:37,839
not harder the key insight is that not

512
00:15:37,839 --> 00:15:39,600
all code represents equal risk

513
00:15:39,600 --> 00:15:41,120
and by prioritizing places that

514
00:15:41,120 --> 00:15:42,880
represent the most significant risks

515
00:15:42,880 --> 00:15:46,000
we can do better for example the parent

516
00:15:46,000 --> 00:15:47,920
process side of a browser's ipc

517
00:15:47,920 --> 00:15:49,920
system is a key part of the sandboxing

518
00:15:49,920 --> 00:15:51,680
architecture it needs to

519
00:15:51,680 --> 00:15:54,720
be protected similarly kernel device

520
00:15:54,720 --> 00:15:56,320
drivers that are accessible from user

521
00:15:56,320 --> 00:15:58,160
space are a key attack surface and need

522
00:15:58,160 --> 00:15:59,360
protection

523
00:15:59,360 --> 00:16:01,519
on the flip side a kernel's process

524
00:16:01,519 --> 00:16:03,199
scheduler is not really an attack

525
00:16:03,199 --> 00:16:04,399
surface we see much in the way of

526
00:16:04,399 --> 00:16:05,600
vulnerabilities in

527
00:16:05,600 --> 00:16:07,120
so it's not a priority for language

528
00:16:07,120 --> 00:16:08,720
level safety

529
00:16:08,720 --> 00:16:10,800
when we focus on these we can achieve

530
00:16:10,800 --> 00:16:12,639
incredible leverage and go farther with

531
00:16:12,639 --> 00:16:13,920
less effort

532
00:16:13,920 --> 00:16:15,680
these ideas are very overlapping with

533
00:16:15,680 --> 00:16:17,440
the ones discussed by ben hawkes of

534
00:16:17,440 --> 00:16:18,800
google's project zero

535
00:16:18,800 --> 00:16:21,519
on this very stage a number of years ago

536
00:16:21,519 --> 00:16:23,199
he said that one of their strategies was

537
00:16:23,199 --> 00:16:23,600
to find

538
00:16:23,600 --> 00:16:26,000
high contention surfaces and target them

539
00:16:26,000 --> 00:16:27,279
with aggressive research

540
00:16:27,279 --> 00:16:29,920
in order to break exploit chains we can

541
00:16:29,920 --> 00:16:31,360
do the same thing

542
00:16:31,360 --> 00:16:33,519
if every browser exploit needs a sandbox

543
00:16:33,519 --> 00:16:35,440
escape and if sandbox escapes are

544
00:16:35,440 --> 00:16:38,160
overwhelmingly memory on safety

545
00:16:38,160 --> 00:16:40,480
then therefore we need to focus on those

546
00:16:40,480 --> 00:16:42,240
areas as a place to invest in language

547
00:16:42,240 --> 00:16:44,079
level memory safety

548
00:16:44,079 --> 00:16:45,839
it's important to recognize that many

549
00:16:45,839 --> 00:16:47,519
modern memory safe languages

550
00:16:47,519 --> 00:16:49,440
allow native interoperability with c and

551
00:16:49,440 --> 00:16:50,639
c plus code

552
00:16:50,639 --> 00:16:53,040
no garbage collector direct calls back

553
00:16:53,040 --> 00:16:54,800
and forth and a shared stack

554
00:16:54,800 --> 00:16:56,560
this goes a long way to enabling

555
00:16:56,560 --> 00:16:59,040
incremental migrations to memory safety

556
00:16:59,040 --> 00:17:00,639
rather than requiring us to rewrite the

557
00:17:00,639 --> 00:17:03,920
whole world to see any benefits

558
00:17:03,920 --> 00:17:05,599
acceptance is maybe the simplest stage

559
00:17:05,599 --> 00:17:06,640
of all

560
00:17:06,640 --> 00:17:08,799
you stop asking if we need to pursue the

561
00:17:08,799 --> 00:17:10,480
work of memory safe languages and

562
00:17:10,480 --> 00:17:12,160
instead you ask how it is we do this

563
00:17:12,160 --> 00:17:12,959
work

564
00:17:12,959 --> 00:17:14,559
you believe that achieving the security

565
00:17:14,559 --> 00:17:16,640
goals we all profess to be pursuing

566
00:17:16,640 --> 00:17:18,079
is not something that can be achieved

567
00:17:18,079 --> 00:17:19,599
with the same tactics we've been using

568
00:17:19,599 --> 00:17:21,280
for the last 20 years

569
00:17:21,280 --> 00:17:23,119
you advocate for time and resources to

570
00:17:23,119 --> 00:17:24,720
be put towards these efforts within your

571
00:17:24,720 --> 00:17:27,360
organization

572
00:17:27,839 --> 00:17:29,520
now hopefully through this talk you've

573
00:17:29,520 --> 00:17:30,880
reached acceptance

574
00:17:30,880 --> 00:17:33,039
but what do you need to do specifically

575
00:17:33,039 --> 00:17:34,799
to bring out the more secure software we

576
00:17:34,799 --> 00:17:36,559
all hope for

577
00:17:36,559 --> 00:17:38,880
first within your own organization find

578
00:17:38,880 --> 00:17:41,200
the other folks who feel the same way

579
00:17:41,200 --> 00:17:43,039
language level solutions to memory on

580
00:17:43,039 --> 00:17:44,480
safety will impact

581
00:17:44,480 --> 00:17:46,160
every single person who works on your

582
00:17:46,160 --> 00:17:48,080
product and its infrastructure

583
00:17:48,080 --> 00:17:49,840
so you need to get a posse to advocate

584
00:17:49,840 --> 00:17:51,520
with you

585
00:17:51,520 --> 00:17:53,679
next find a memory safe language that'd

586
00:17:53,679 --> 00:17:55,200
be a good fit in the places you

587
00:17:55,200 --> 00:17:57,280
currently use unsafe languages

588
00:17:57,280 --> 00:17:59,120
earlier i suggested a few good pairings

589
00:17:59,120 --> 00:18:00,960
of languages use cases

590
00:18:00,960 --> 00:18:03,520
go for network services swift for apple

591
00:18:03,520 --> 00:18:05,039
ecosystem development

592
00:18:05,039 --> 00:18:07,200
rust for interrupt interoperability with

593
00:18:07,200 --> 00:18:09,039
existing c and c plus plus code

594
00:18:09,039 --> 00:18:10,720
but there's plenty of other good choices

595
00:18:10,720 --> 00:18:13,360
and good pairings too

596
00:18:13,360 --> 00:18:15,600
now do the work to make it possible for

597
00:18:15,600 --> 00:18:17,360
teams and projects that want to use this

598
00:18:17,360 --> 00:18:18,000
language

599
00:18:18,000 --> 00:18:21,039
to be able to do so for real projects

600
00:18:21,039 --> 00:18:23,360
this often means improving build systems

601
00:18:23,360 --> 00:18:24,400
testing systems

602
00:18:24,400 --> 00:18:26,480
and release processes to be able to

603
00:18:26,480 --> 00:18:28,000
handle a second language

604
00:18:28,000 --> 00:18:29,840
handle a second language as easily as

605
00:18:29,840 --> 00:18:31,840
they handle your primary one

606
00:18:31,840 --> 00:18:33,520
it also may involve building critical

607
00:18:33,520 --> 00:18:34,960
utility libraries

608
00:18:34,960 --> 00:18:36,720
if every project in your organization

609
00:18:36,720 --> 00:18:38,960
needs to talk to some internal api

610
00:18:38,960 --> 00:18:41,280
you'll want an sdk for using that api in

611
00:18:41,280 --> 00:18:43,039
your new language

612
00:18:43,039 --> 00:18:45,360
finally get to work building new

613
00:18:45,360 --> 00:18:47,039
components in the safe language

614
00:18:47,039 --> 00:18:49,200
and wear high leverage replacing

615
00:18:49,200 --> 00:18:51,039
existing components

616
00:18:51,039 --> 00:18:52,880
generally speaking you want to replace

617
00:18:52,880 --> 00:18:54,720
chunks that are as small as possible

618
00:18:54,720 --> 00:18:56,320
without dividing your software into

619
00:18:56,320 --> 00:18:58,320
incoherent pieces

620
00:18:58,320 --> 00:19:00,080
if your organization doesn't have memory

621
00:19:00,080 --> 00:19:01,440
unsafe code of its own

622
00:19:01,440 --> 00:19:03,120
you're still likely using things written

623
00:19:03,120 --> 00:19:04,720
in a memory unsafe language

624
00:19:04,720 --> 00:19:06,480
via open source or closed source

625
00:19:06,480 --> 00:19:08,240
projects you use

626
00:19:08,240 --> 00:19:10,080
going forward you should take what

627
00:19:10,080 --> 00:19:11,600
language is written in

628
00:19:11,600 --> 00:19:13,120
into account when choosing these

629
00:19:13,120 --> 00:19:15,440
components perhaps it'd be better to use

630
00:19:15,440 --> 00:19:17,760
an authenticating and authorizing http

631
00:19:17,760 --> 00:19:20,080
proxy written in a memory safe language

632
00:19:20,080 --> 00:19:21,600
rather than one written in a memory

633
00:19:21,600 --> 00:19:23,760
unsafe language

634
00:19:23,760 --> 00:19:25,200
lest you be stuck at the depression

635
00:19:25,200 --> 00:19:27,280
phase unsure how any of this can be

636
00:19:27,280 --> 00:19:28,160
tractable

637
00:19:28,160 --> 00:19:29,840
i want to close with a few examples of

638
00:19:29,840 --> 00:19:31,440
projects that are doing this in the real

639
00:19:31,440 --> 00:19:32,480
world

640
00:19:32,480 --> 00:19:34,480
the python cryptographic authority which

641
00:19:34,480 --> 00:19:35,520
i help maintain

642
00:19:35,520 --> 00:19:37,280
and which develops the most widely used

643
00:19:37,280 --> 00:19:39,200
cryptography libraries in the python

644
00:19:39,200 --> 00:19:40,240
ecosystem

645
00:19:40,240 --> 00:19:41,919
has been doing gradual work to replace

646
00:19:41,919 --> 00:19:43,840
code written in c with rust

647
00:19:43,840 --> 00:19:45,760
starting with some subtle constant time

648
00:19:45,760 --> 00:19:47,679
code and shortly extending to cover a

649
00:19:47,679 --> 00:19:50,880
bunch of asn 1 parson code

650
00:19:50,880 --> 00:19:52,720
the rust for linux project is working to

651
00:19:52,720 --> 00:19:54,160
make it possible for people to write

652
00:19:54,160 --> 00:19:56,160
linux kernel modules in rust

653
00:19:56,160 --> 00:19:58,000
and getting that support upstreamed into

654
00:19:58,000 --> 00:19:59,679
linus's tree

655
00:19:59,679 --> 00:20:01,600
firefox has been engaged in a long-term

656
00:20:01,600 --> 00:20:03,520
effort on this front which has included

657
00:20:03,520 --> 00:20:05,280
rewriting existing components

658
00:20:05,280 --> 00:20:07,919
such as its css engine as well as making

659
00:20:07,919 --> 00:20:09,760
it possible to build new components in

660
00:20:09,760 --> 00:20:10,559
rust

661
00:20:10,559 --> 00:20:12,640
for example its web off end support was

662
00:20:12,640 --> 00:20:14,080
built with rust a reel

663
00:20:14,080 --> 00:20:17,039
addressing the root causes two for one

664
00:20:17,039 --> 00:20:17,760
finally

665
00:20:17,760 --> 00:20:20,960
lib rsvg engaged in an effort to rewrite

666
00:20:20,960 --> 00:20:22,799
their existing c code to rust in an

667
00:20:22,799 --> 00:20:23,919
incremental manner

668
00:20:23,919 --> 00:20:25,840
and now the project is almost entirely

669
00:20:25,840 --> 00:20:27,200
safe rust

670
00:20:27,200 --> 00:20:28,400
there are of course many other

671
00:20:28,400 --> 00:20:30,240
successful efforts using different

672
00:20:30,240 --> 00:20:30,960
languages

673
00:20:30,960 --> 00:20:33,520
at adopting memory safety these are just

674
00:20:33,520 --> 00:20:35,200
a few which prove it can be done

675
00:20:35,200 --> 00:20:37,039
and which prove your project can be next

676
00:20:37,039 --> 00:20:39,600
if you begin the work

677
00:20:39,600 --> 00:20:41,760
before we finish i want to share some

678
00:20:41,760 --> 00:20:44,080
nearly 2 000 year old wisdom

679
00:20:44,080 --> 00:20:46,000
it is not incumbent on us to complete

680
00:20:46,000 --> 00:20:48,000
the task of ridding the world of memory

681
00:20:48,000 --> 00:20:50,159
unsafety but neither are we at liberty

682
00:20:50,159 --> 00:20:52,000
to desist from it

683
00:20:52,000 --> 00:20:53,840
thank you very much i'm now happy to

684
00:20:53,840 --> 00:21:03,840
take questions

685
00:21:04,880 --> 00:21:06,960
you

