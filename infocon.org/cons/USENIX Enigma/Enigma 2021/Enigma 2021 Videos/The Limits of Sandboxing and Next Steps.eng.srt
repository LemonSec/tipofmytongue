1
00:00:08,960 --> 00:00:09,840
hi everybody

2
00:00:09,840 --> 00:00:12,000
welcome to enigma i'm certainly glad to

3
00:00:12,000 --> 00:00:13,440
be here

4
00:00:13,440 --> 00:00:14,719
so i'm going to be talking today about

5
00:00:14,719 --> 00:00:16,800
the limits of sandboxing and the next

6
00:00:16,800 --> 00:00:18,240
steps after that

7
00:00:18,240 --> 00:00:20,480
i'm chris palmer from the google chrome

8
00:00:20,480 --> 00:00:22,240
security team

9
00:00:22,240 --> 00:00:24,240
i want to note that the slides have a

10
00:00:24,240 --> 00:00:26,240
lot of links and the speaker notes have

11
00:00:26,240 --> 00:00:27,279
a lot of links

12
00:00:27,279 --> 00:00:29,439
as you can get the google doc originals

13
00:00:29,439 --> 00:00:32,238
by clicking on this from the pdf that

14
00:00:32,238 --> 00:00:35,040
enigma will publish so i'll start by

15
00:00:35,040 --> 00:00:36,480
giving a bit of information about me

16
00:00:36,480 --> 00:00:38,079
where i come from

17
00:00:38,079 --> 00:00:39,600
my name is chris i work on chrome

18
00:00:39,600 --> 00:00:42,559
security i've worked here for almost a

19
00:00:42,559 --> 00:00:44,320
decade and in that time i've done a

20
00:00:44,320 --> 00:00:45,920
variety of stuff like

21
00:00:45,920 --> 00:00:50,399
web pki and secure usability https

22
00:00:50,399 --> 00:00:51,520
deployment

23
00:00:51,520 --> 00:00:54,160
web platform security and more these

24
00:00:54,160 --> 00:00:56,000
days i work on the chrome platform

25
00:00:56,000 --> 00:00:57,440
security team

26
00:00:57,440 --> 00:00:59,520
my goal for this presentation is to

27
00:00:59,520 --> 00:01:01,280
describe our experience

28
00:01:01,280 --> 00:01:02,800
pushing sandboxing pushing the

29
00:01:02,800 --> 00:01:05,119
boundaries and the lessons we've learned

30
00:01:05,119 --> 00:01:06,479
doing so

31
00:01:06,479 --> 00:01:08,479
and what we think the future holds based

32
00:01:08,479 --> 00:01:10,560
on that i hope this provides

33
00:01:10,560 --> 00:01:12,640
guidance for software architects

34
00:01:12,640 --> 00:01:15,600
engineers and the people who fund them

35
00:01:15,600 --> 00:01:17,759
my team's work is to defend the people

36
00:01:17,759 --> 00:01:19,680
who use chrome against what i call

37
00:01:19,680 --> 00:01:21,920
attacks against the mechanisms

38
00:01:21,920 --> 00:01:23,840
as opposed to attacks against people in

39
00:01:23,840 --> 00:01:25,840
their relationships

40
00:01:25,840 --> 00:01:27,439
attacks against people i mean things

41
00:01:27,439 --> 00:01:30,159
like fishing oauth fishing

42
00:01:30,159 --> 00:01:32,320
malicious downloads and other social

43
00:01:32,320 --> 00:01:34,000
engineering attacks

44
00:01:34,000 --> 00:01:35,520
these are very powerful and effective

45
00:01:35,520 --> 00:01:37,920
attacks obviously and chrome has several

46
00:01:37,920 --> 00:01:39,840
teams dedicated to defending against

47
00:01:39,840 --> 00:01:41,759
them and i think they've

48
00:01:41,759 --> 00:01:44,479
pushed made great advances in the state

49
00:01:44,479 --> 00:01:45,920
of the art

50
00:01:45,920 --> 00:01:48,159
but by attacks against mechanisms i mean

51
00:01:48,159 --> 00:01:50,960
things like exploiting memory unsafety

52
00:01:50,960 --> 00:01:53,680
escaping the sandbox finding techniques

53
00:01:53,680 --> 00:01:55,040
for persisting across

54
00:01:55,040 --> 00:01:58,159
reboots low-level security logic bugs

55
00:01:58,159 --> 00:01:59,520
and so on

56
00:01:59,520 --> 00:02:01,680
alex gainer talked about the nature and

57
00:02:01,680 --> 00:02:04,000
prevalence of memory on safety

58
00:02:04,000 --> 00:02:06,000
for this presentation our problem is

59
00:02:06,000 --> 00:02:08,720
that c plus is a slippery and unsafe

60
00:02:08,720 --> 00:02:10,000
language

61
00:02:10,000 --> 00:02:12,080
and the purpose of web browsers is to

62
00:02:12,080 --> 00:02:14,720
run web content and code

63
00:02:14,720 --> 00:02:18,080
as fast and efficiently as possible

64
00:02:18,080 --> 00:02:19,920
which makes the risks of unsafe

65
00:02:19,920 --> 00:02:23,040
languages particularly acute i think

66
00:02:23,040 --> 00:02:25,040
malicious websites and networks can get

67
00:02:25,040 --> 00:02:27,040
a surprising amount of control

68
00:02:27,040 --> 00:02:29,599
over the processes that interpret them

69
00:02:29,599 --> 00:02:31,280
and as alex mentioned

70
00:02:31,280 --> 00:02:33,040
attacks against the mechanisms are not

71
00:02:33,040 --> 00:02:34,720
uncommon

72
00:02:34,720 --> 00:02:36,640
so first i'll talk a bit about what

73
00:02:36,640 --> 00:02:37,760
sandboxing

74
00:02:37,760 --> 00:02:41,040
is so here's a picture from chromium's

75
00:02:41,040 --> 00:02:43,040
public documentation

76
00:02:43,040 --> 00:02:45,440
it shows that sandboxing or privilege

77
00:02:45,440 --> 00:02:46,239
separation

78
00:02:46,239 --> 00:02:48,400
and reduction is when you break an

79
00:02:48,400 --> 00:02:51,040
application into two or more parts

80
00:02:51,040 --> 00:02:53,760
one or more lower privileged processes

81
00:02:53,760 --> 00:02:54,640
and one or more

82
00:02:54,640 --> 00:02:57,040
higher privileged broker processes that

83
00:02:57,040 --> 00:02:57,680
mediate

84
00:02:57,680 --> 00:03:01,040
access to the system on behalf of and

85
00:03:01,040 --> 00:03:04,000
in defense against the lower privileged

86
00:03:04,000 --> 00:03:05,120
processes

87
00:03:05,120 --> 00:03:07,840
the goal is to contain the damage when

88
00:03:07,840 --> 00:03:09,840
malicious web content compromises a

89
00:03:09,840 --> 00:03:11,440
process

90
00:03:11,440 --> 00:03:14,400
inter-process communication or ipc is

91
00:03:14,400 --> 00:03:16,159
critical to this design

92
00:03:16,159 --> 00:03:19,360
ipc introduces significant complexity

93
00:03:19,360 --> 00:03:21,760
and an efficiency cost but they're worth

94
00:03:21,760 --> 00:03:22,640
it

95
00:03:22,640 --> 00:03:24,959
sandboxing is absolutely necessary for a

96
00:03:24,959 --> 00:03:27,360
variety of software including browsers

97
00:03:27,360 --> 00:03:29,680
operating systems virtual machines

98
00:03:29,680 --> 00:03:30,959
application servers

99
00:03:30,959 --> 00:03:34,000
and so on chromium's usage of the term

100
00:03:34,000 --> 00:03:35,920
is distinct from its usage

101
00:03:35,920 --> 00:03:39,280
in the context of say android or ios

102
00:03:39,280 --> 00:03:41,519
we need not just reducing the privileges

103
00:03:41,519 --> 00:03:43,200
of an application

104
00:03:43,200 --> 00:03:45,280
but more breaking an application into

105
00:03:45,280 --> 00:03:47,040
multiple parts and minimizing the

106
00:03:47,040 --> 00:03:49,599
privileges of each part

107
00:03:49,599 --> 00:03:51,519
in chromium the biggest difference is

108
00:03:51,519 --> 00:03:53,519
between the browser process that has

109
00:03:53,519 --> 00:03:54,720
full privilege

110
00:03:54,720 --> 00:03:57,040
and the many lower privileged renderer

111
00:03:57,040 --> 00:03:58,480
processes

112
00:03:58,480 --> 00:04:00,640
they interpret and render website

113
00:04:00,640 --> 00:04:02,400
contents and we give them as little

114
00:04:02,400 --> 00:04:04,239
privilege as possible

115
00:04:04,239 --> 00:04:06,560
in chromium we separate each website

116
00:04:06,560 --> 00:04:09,120
into its own distinct sandbox

117
00:04:09,120 --> 00:04:11,120
separate from the browser network and

118
00:04:11,120 --> 00:04:13,280
gpu processes and separate from other

119
00:04:13,280 --> 00:04:14,879
websites

120
00:04:14,879 --> 00:04:17,600
sandboxing contains the damage of memory

121
00:04:17,600 --> 00:04:18,000
and

122
00:04:18,000 --> 00:04:20,959
memory on safety and other bugs it also

123
00:04:20,959 --> 00:04:22,560
reduces

124
00:04:22,560 --> 00:04:24,639
the available attack surface of other

125
00:04:24,639 --> 00:04:25,600
processes

126
00:04:25,600 --> 00:04:28,960
oops sorry and the kernel these two

127
00:04:28,960 --> 00:04:30,880
benefits are complementary

128
00:04:30,880 --> 00:04:33,040
it is also a good defense against logic

129
00:04:33,040 --> 00:04:34,000
bugs though

130
00:04:34,000 --> 00:04:35,759
for example if there were a gap in the

131
00:04:35,759 --> 00:04:38,240
same origin policy enforcement logic

132
00:04:38,240 --> 00:04:41,440
in the renderer sandboxing would contain

133
00:04:41,440 --> 00:04:42,560
the damage

134
00:04:42,560 --> 00:04:44,160
because the attacker would still not be

135
00:04:44,160 --> 00:04:45,919
able to automatically without any other

136
00:04:45,919 --> 00:04:46,639
bug

137
00:04:46,639 --> 00:04:49,280
get into cross site origins hosted in

138
00:04:49,280 --> 00:04:51,199
other processes

139
00:04:51,199 --> 00:04:54,000
a same origin policy bypass or memory on

140
00:04:54,000 --> 00:04:56,240
safety exploit in the browser or network

141
00:04:56,240 --> 00:04:57,759
service process

142
00:04:57,759 --> 00:04:59,440
which i'll talk more about in a moment

143
00:04:59,440 --> 00:05:01,360
can still be effective across origin

144
00:05:01,360 --> 00:05:02,400
though

145
00:05:02,400 --> 00:05:04,639
this is a known gap due to practical

146
00:05:04,639 --> 00:05:07,919
limitations and more on that later

147
00:05:07,919 --> 00:05:11,039
okay so having said all that good

148
00:05:11,039 --> 00:05:13,600
sandboxing is table stakes it's

149
00:05:13,600 --> 00:05:15,280
extremely necessary to contain those

150
00:05:15,280 --> 00:05:18,000
classes of bugs i was just talking about

151
00:05:18,000 --> 00:05:19,759
although this talk is about the limits

152
00:05:19,759 --> 00:05:21,120
of sandboxing

153
00:05:21,120 --> 00:05:22,960
i would like you to bear in mind several

154
00:05:22,960 --> 00:05:24,240
important things

155
00:05:24,240 --> 00:05:26,960
one is that what limits a web browser

156
00:05:26,960 --> 00:05:29,680
running on mainstream operating systems

157
00:05:29,680 --> 00:05:31,520
might not be a limit for you might not

158
00:05:31,520 --> 00:05:33,360
limit your application

159
00:05:33,360 --> 00:05:34,720
you might be on a platform that's more

160
00:05:34,720 --> 00:05:36,720
amenable to fine-grained sandboxing like

161
00:05:36,720 --> 00:05:37,759
maybe linux

162
00:05:37,759 --> 00:05:40,080
i'll talk more about that later and

163
00:05:40,080 --> 00:05:41,919
although we're pretty sure chromium is

164
00:05:41,919 --> 00:05:43,520
close to the practical limits of

165
00:05:43,520 --> 00:05:44,960
mainstream operating systems on

166
00:05:44,960 --> 00:05:46,560
mainstream hardware

167
00:05:46,560 --> 00:05:48,080
your application might still have

168
00:05:48,080 --> 00:05:50,479
significant sandboxing headroom so to

169
00:05:50,479 --> 00:05:51,360
speak

170
00:05:51,360 --> 00:05:53,199
and i'd urge you to use make sure you're

171
00:05:53,199 --> 00:05:54,720
using all of that first

172
00:05:54,720 --> 00:05:57,280
before going into others more difficult

173
00:05:57,280 --> 00:05:58,560
stuff

174
00:05:58,560 --> 00:06:01,120
so how do you build a sandbox at all the

175
00:06:01,120 --> 00:06:02,960
fundamental building block available to

176
00:06:02,960 --> 00:06:03,280
us

177
00:06:03,280 --> 00:06:06,720
is the process boundary we have to use

178
00:06:06,720 --> 00:06:07,280
whatever

179
00:06:07,280 --> 00:06:08,880
primitive mechanisms the platform

180
00:06:08,880 --> 00:06:11,039
provides essentially a process

181
00:06:11,039 --> 00:06:14,160
unilaterally reduces a sandbox process

182
00:06:14,160 --> 00:06:17,199
unilaterally reduces its own privilege

183
00:06:17,199 --> 00:06:18,840
before it begins processing

184
00:06:18,840 --> 00:06:20,400
untrustworthy

185
00:06:20,400 --> 00:06:23,440
data and code it maintains a channel to

186
00:06:23,440 --> 00:06:24,560
the broker process

187
00:06:24,560 --> 00:06:27,680
to request services much as a user space

188
00:06:27,680 --> 00:06:28,720
program requests

189
00:06:28,720 --> 00:06:30,639
services from the kernel via system

190
00:06:30,639 --> 00:06:32,479
calls for example

191
00:06:32,479 --> 00:06:34,880
to build a sandbox we use whatever is

192
00:06:34,880 --> 00:06:36,960
available to us on each platform

193
00:06:36,960 --> 00:06:38,880
what mechanisms are available vary

194
00:06:38,880 --> 00:06:40,720
widely across platforms

195
00:06:40,720 --> 00:06:43,680
windows is very different than linux and

196
00:06:43,680 --> 00:06:45,840
although android is based on linux

197
00:06:45,840 --> 00:06:48,160
it's still a very different thing and

198
00:06:48,160 --> 00:06:49,840
there's different apis available and so

199
00:06:49,840 --> 00:06:50,720
on

200
00:06:50,720 --> 00:06:52,319
so another nice thing would be if we

201
00:06:52,319 --> 00:06:54,639
could get securely segmented memory

202
00:06:54,639 --> 00:06:57,599
inside a single process and that might

203
00:06:57,599 --> 00:06:59,520
enable us to make finer grained

204
00:06:59,520 --> 00:07:00,560
sandboxes for

205
00:07:00,560 --> 00:07:02,479
cheaper i'll talk a bit more that in a

206
00:07:02,479 --> 00:07:04,560
moment

207
00:07:04,560 --> 00:07:06,479
so on android what mechanisms are

208
00:07:06,479 --> 00:07:08,240
available to us a key thing is the

209
00:07:08,240 --> 00:07:09,440
isolated process

210
00:07:09,440 --> 00:07:13,120
mechanism which we asked them for and

211
00:07:13,120 --> 00:07:15,120
they kindly provided it

212
00:07:15,120 --> 00:07:16,880
and it's a public api of course you can

213
00:07:16,880 --> 00:07:19,120
use it too and they also

214
00:07:19,120 --> 00:07:22,400
provide via setcomp bpf some predefined

215
00:07:22,400 --> 00:07:24,319
limits to the system calls

216
00:07:24,319 --> 00:07:26,400
we can apply those to renderers and then

217
00:07:26,400 --> 00:07:29,599
they can do less with the kernel

218
00:07:29,599 --> 00:07:32,960
and again you can use those too

219
00:07:32,960 --> 00:07:35,759
on linux and chrome os it's a different

220
00:07:35,759 --> 00:07:37,440
story

221
00:07:37,440 --> 00:07:40,479
we use second ppf again to filter

222
00:07:40,479 --> 00:07:43,280
system calls but we can do so in a finer

223
00:07:43,280 --> 00:07:45,280
grain we can make arbitrary policies

224
00:07:45,280 --> 00:07:47,280
that suit our needs

225
00:07:47,280 --> 00:07:49,360
and uh we also make use of user name

226
00:07:49,360 --> 00:07:50,479
spaces

227
00:07:50,479 --> 00:07:52,240
which is a very nice feature that we've

228
00:07:52,240 --> 00:07:53,840
gotten a lot of benefit from

229
00:07:53,840 --> 00:07:56,080
but it comes with its own costs it there

230
00:07:56,080 --> 00:07:57,440
may be still some bugs

231
00:07:57,440 --> 00:07:59,919
in the kernel that are available to

232
00:07:59,919 --> 00:08:01,919
processes that are using username spaces

233
00:08:01,919 --> 00:08:03,280
for example

234
00:08:03,280 --> 00:08:05,759
it's not perfect but it's what we got

235
00:08:05,759 --> 00:08:07,759
and again all of our code to do this is

236
00:08:07,759 --> 00:08:09,280
open source

237
00:08:09,280 --> 00:08:11,039
and it's more or less an independent

238
00:08:11,039 --> 00:08:13,199
separable module in the chromium source

239
00:08:13,199 --> 00:08:14,560
code tree

240
00:08:14,560 --> 00:08:17,360
firefox uses parts of it for example as

241
00:08:17,360 --> 00:08:18,879
does adobe reader

242
00:08:18,879 --> 00:08:21,039
and if you need help you can mail us at

243
00:08:21,039 --> 00:08:22,000
security dash

244
00:08:22,000 --> 00:08:24,720
dev at chromium.org and we'd love to

245
00:08:24,720 --> 00:08:26,720
help you out

246
00:08:26,720 --> 00:08:29,360
so there are limitations and costs to

247
00:08:29,360 --> 00:08:30,879
doing all this though

248
00:08:30,879 --> 00:08:32,399
unfortunately we can't just put a

249
00:08:32,399 --> 00:08:34,240
sandbox on everything

250
00:08:34,240 --> 00:08:36,479
so like i said processes are the minimum

251
00:08:36,479 --> 00:08:39,599
unit of isolation on a mainstream os

252
00:08:39,599 --> 00:08:41,599
and unfortunately while processes are

253
00:08:41,599 --> 00:08:43,679
really cheap on linux and chrome os and

254
00:08:43,679 --> 00:08:45,279
mac os

255
00:08:45,279 --> 00:08:47,279
they're kind of expensive on the

256
00:08:47,279 --> 00:08:49,200
platforms that are most populous

257
00:08:49,200 --> 00:08:53,120
android and windows a process can be

258
00:08:53,120 --> 00:08:55,279
quite large on windows and very large on

259
00:08:55,279 --> 00:08:56,399
android and

260
00:08:56,399 --> 00:08:58,560
the process startup latency can actually

261
00:08:58,560 --> 00:09:00,320
be so big

262
00:09:00,320 --> 00:09:03,200
that it makes user experience visibly

263
00:09:03,200 --> 00:09:05,120
janky and we don't want that

264
00:09:05,120 --> 00:09:08,640
it's a big problem but on um

265
00:09:08,640 --> 00:09:11,600
linux processors are nice and cheap and

266
00:09:11,600 --> 00:09:13,440
that can be very beneficial to you

267
00:09:13,440 --> 00:09:15,200
if you're sandboxing a server

268
00:09:15,200 --> 00:09:16,720
application that you're running on linux

269
00:09:16,720 --> 00:09:17,760
for example

270
00:09:17,760 --> 00:09:20,320
you could do finer grain sandboxing i'll

271
00:09:20,320 --> 00:09:20,959
talk a bit

272
00:09:20,959 --> 00:09:24,080
more about that so how do you decide

273
00:09:24,080 --> 00:09:25,760
when to sandbox something

274
00:09:25,760 --> 00:09:28,160
when to isolate it we have a plan and

275
00:09:28,160 --> 00:09:30,800
that plan is called site isolation

276
00:09:30,800 --> 00:09:33,040
we don't just create new renderers ad

277
00:09:33,040 --> 00:09:34,240
hoc

278
00:09:34,240 --> 00:09:35,839
for your applications you'll want to

279
00:09:35,839 --> 00:09:38,959
define some reasonable granularity of

280
00:09:38,959 --> 00:09:40,000
isolation

281
00:09:40,000 --> 00:09:41,920
whether it's per user account per

282
00:09:41,920 --> 00:09:44,240
customer per request or in a time period

283
00:09:44,240 --> 00:09:46,800
or something else like that

284
00:09:46,800 --> 00:09:49,600
so here's a picture of how we break

285
00:09:49,600 --> 00:09:51,279
things down

286
00:09:51,279 --> 00:09:52,959
this sequence of slides comes from my

287
00:09:52,959 --> 00:09:54,880
colleague adrian taylor so we can thank

288
00:09:54,880 --> 00:09:56,160
him for that

289
00:09:56,160 --> 00:09:57,839
first there's the browser process it has

290
00:09:57,839 --> 00:10:00,160
full privilege then if you load three

291
00:10:00,160 --> 00:10:02,240
websites you get three renderers each

292
00:10:02,240 --> 00:10:02,880
hosting

293
00:10:02,880 --> 00:10:06,399
that site the idea is that a security

294
00:10:06,399 --> 00:10:08,240
breach from one site can only affect the

295
00:10:08,240 --> 00:10:10,560
one renderer process

296
00:10:10,560 --> 00:10:12,640
but we learn that we also need a gpu

297
00:10:12,640 --> 00:10:14,240
process to talk to

298
00:10:14,240 --> 00:10:17,279
the operating systems gpu driver and so

299
00:10:17,279 --> 00:10:18,640
on and that needs to be separate from

300
00:10:18,640 --> 00:10:19,680
the browser

301
00:10:19,680 --> 00:10:22,800
it has different privileges and

302
00:10:22,800 --> 00:10:25,360
we also decided to put network handling

303
00:10:25,360 --> 00:10:25,839
like

304
00:10:25,839 --> 00:10:27,839
tls client quick client and things like

305
00:10:27,839 --> 00:10:29,360
that dns handling

306
00:10:29,360 --> 00:10:31,360
in its own process the network service

307
00:10:31,360 --> 00:10:32,640
process

308
00:10:32,640 --> 00:10:34,240
previously that was in the browser too

309
00:10:34,240 --> 00:10:35,760
and that obviously handles a lot of

310
00:10:35,760 --> 00:10:38,000
untrustworthy data from the network

311
00:10:38,000 --> 00:10:40,720
so we're separating that out but note

312
00:10:40,720 --> 00:10:42,640
this one network process still

313
00:10:42,640 --> 00:10:44,839
handles all networking for all web

314
00:10:44,839 --> 00:10:47,360
versions and all websites

315
00:10:47,360 --> 00:10:50,720
so you could imagine going further right

316
00:10:50,720 --> 00:10:52,720
you can imagine giving each renderer its

317
00:10:52,720 --> 00:10:54,399
own network process

318
00:10:54,399 --> 00:10:56,000
we haven't done this yet we don't think

319
00:10:56,000 --> 00:10:57,440
it's affordable right now

320
00:10:57,440 --> 00:10:58,959
but it might be cool someday in the

321
00:10:58,959 --> 00:11:00,560
future

322
00:11:00,560 --> 00:11:03,279
similarly we have a separate storage

323
00:11:03,279 --> 00:11:04,959
service process

324
00:11:04,959 --> 00:11:06,800
for things to support things like

325
00:11:06,800 --> 00:11:09,120
cookies local storage

326
00:11:09,120 --> 00:11:12,079
indexeddb and things like that and again

327
00:11:12,079 --> 00:11:13,360
that process

328
00:11:13,360 --> 00:11:16,399
handles storage for all uh

329
00:11:16,399 --> 00:11:18,800
sites so all the renderers send ipc

330
00:11:18,800 --> 00:11:20,800
messages to it to get access to their

331
00:11:20,800 --> 00:11:22,240
stored stuff

332
00:11:22,240 --> 00:11:24,079
and we need for there to not be bugs

333
00:11:24,079 --> 00:11:26,720
there someday you can imagine if you

334
00:11:26,720 --> 00:11:28,079
give each site

335
00:11:28,079 --> 00:11:31,279
its own storage process um

336
00:11:31,279 --> 00:11:32,720
that would be cool we can't do that

337
00:11:32,720 --> 00:11:35,440
right now so the same process of

338
00:11:35,440 --> 00:11:37,440
breaking things down

339
00:11:37,440 --> 00:11:39,440
everything being backed by its every

340
00:11:39,440 --> 00:11:42,000
site being backed by its own stuff you

341
00:11:42,000 --> 00:11:43,760
can imagine that going further with that

342
00:11:43,760 --> 00:11:45,600
all the privileged back ends that

343
00:11:45,600 --> 00:11:47,760
support web platform features like web

344
00:11:47,760 --> 00:11:48,800
offend

345
00:11:48,800 --> 00:11:51,680
web payments web usb things like that

346
00:11:51,680 --> 00:11:53,519
might get their own distinct processes

347
00:11:53,519 --> 00:11:55,040
per site someday

348
00:11:55,040 --> 00:11:56,639
but pretty soon you can be talking about

349
00:11:56,639 --> 00:11:58,639
you know maybe dozens of processes for

350
00:11:58,639 --> 00:12:00,720
each site that you load

351
00:12:00,720 --> 00:12:02,000
and that could get too expensive

352
00:12:02,000 --> 00:12:04,720
certainly is right now on some platforms

353
00:12:04,720 --> 00:12:06,560
where processes are cheap and hardware

354
00:12:06,560 --> 00:12:07,600
is plentiful

355
00:12:07,600 --> 00:12:09,440
a design this fine grain might be

356
00:12:09,440 --> 00:12:11,360
possible possibly for you

357
00:12:11,360 --> 00:12:13,600
but for chromium right now it's not you

358
00:12:13,600 --> 00:12:15,120
should be thinking along these lines

359
00:12:15,120 --> 00:12:17,360
though for your applications

360
00:12:17,360 --> 00:12:19,440
so how do you move forward given these

361
00:12:19,440 --> 00:12:20,480
limitations

362
00:12:20,480 --> 00:12:22,320
we think the future is all about memory

363
00:12:22,320 --> 00:12:23,519
safety

364
00:12:23,519 --> 00:12:25,839
as necessary and as good as sandboxing

365
00:12:25,839 --> 00:12:26,800
is it can never be

366
00:12:26,800 --> 00:12:28,959
sufficient by itself and it's not

367
00:12:28,959 --> 00:12:31,440
arbitrarily applicable as we've seen

368
00:12:31,440 --> 00:12:33,120
for example there's still significant

369
00:12:33,120 --> 00:12:35,440
browser and kernel attack surface

370
00:12:35,440 --> 00:12:36,880
that's available to a compromised

371
00:12:36,880 --> 00:12:39,360
renderer similarly the network service

372
00:12:39,360 --> 00:12:41,440
process must still process

373
00:12:41,440 --> 00:12:43,680
untrustworthy untrustworthy inputs from

374
00:12:43,680 --> 00:12:44,639
the network

375
00:12:44,639 --> 00:12:47,040
and from all web origins and it has a

376
00:12:47,040 --> 00:12:48,720
lot of user state in there

377
00:12:48,720 --> 00:12:50,639
so therefore we need to not just contain

378
00:12:50,639 --> 00:12:53,200
bugs but to mitigate and hopefully even

379
00:12:53,200 --> 00:12:55,120
solve them

380
00:12:55,120 --> 00:12:58,240
so to do that we're investigating safer

381
00:12:58,240 --> 00:12:59,519
language options

382
00:12:59,519 --> 00:13:01,839
obviously on android we already use java

383
00:13:01,839 --> 00:13:03,839
and we might use kotlin someday

384
00:13:03,839 --> 00:13:05,839
on ios we make a use of a little bit of

385
00:13:05,839 --> 00:13:07,519
swift you can imagine

386
00:13:07,519 --> 00:13:11,760
growing that rust would be very cool

387
00:13:11,760 --> 00:13:13,680
we are thinking about web assembly to

388
00:13:13,680 --> 00:13:15,680
get a form of segmented memory kind of

389
00:13:15,680 --> 00:13:16,639
it can contain

390
00:13:16,639 --> 00:13:19,440
the damage of memory corruption for

391
00:13:19,440 --> 00:13:21,040
example

392
00:13:21,040 --> 00:13:23,360
so you could imagine doing more with

393
00:13:23,360 --> 00:13:25,120
java and swift for example

394
00:13:25,120 --> 00:13:26,720
but that would entail duplicating

395
00:13:26,720 --> 00:13:29,440
implementations one for java on android

396
00:13:29,440 --> 00:13:32,560
one in swift for ios and then again c

397
00:13:32,560 --> 00:13:34,720
plus plus for the other platforms

398
00:13:34,720 --> 00:13:36,399
because we don't plan to use

399
00:13:36,399 --> 00:13:39,680
java on windows for example alternately

400
00:13:39,680 --> 00:13:41,680
you can sanitize or normalize an

401
00:13:41,680 --> 00:13:42,880
untrustworthy input

402
00:13:42,880 --> 00:13:46,079
in java or swift or save language before

403
00:13:46,079 --> 00:13:47,360
passing the input to c

404
00:13:47,360 --> 00:13:49,839
plus plus for further processing and

405
00:13:49,839 --> 00:13:52,160
only if it passes the sanitization

406
00:13:52,160 --> 00:13:54,800
layer for example we sometimes do do

407
00:13:54,800 --> 00:13:56,240
this on java

408
00:13:56,240 --> 00:13:59,760
on android and java now but note also

409
00:13:59,760 --> 00:14:02,240
that sometimes the java or swift apis

410
00:14:02,240 --> 00:14:04,320
that the platform gives you

411
00:14:04,320 --> 00:14:06,560
might just be thin layers on a large

412
00:14:06,560 --> 00:14:09,279
body of c-plus plus code underneath

413
00:14:09,279 --> 00:14:11,760
and without a sanitizer sanitization

414
00:14:11,760 --> 00:14:13,519
phase we wouldn't consider that to be

415
00:14:13,519 --> 00:14:14,560
safe it's not

416
00:14:14,560 --> 00:14:17,199
that doesn't count as a safer language

417
00:14:17,199 --> 00:14:18,800
also in 2021 we're going to be

418
00:14:18,800 --> 00:14:21,279
experimenting with web assembly

419
00:14:21,279 --> 00:14:23,040
and it might give us developer

420
00:14:23,040 --> 00:14:25,120
ergonomics and efficiency and safety

421
00:14:25,120 --> 00:14:26,079
enough

422
00:14:26,079 --> 00:14:28,880
to just put our existing c plus code in

423
00:14:28,880 --> 00:14:30,800
a little box

424
00:14:30,800 --> 00:14:32,240
that would be very fruitful if it works

425
00:14:32,240 --> 00:14:34,720
out firefox is pursuing a similar

426
00:14:34,720 --> 00:14:36,560
strategy for example

427
00:14:36,560 --> 00:14:38,399
so then the question arises how do you

428
00:14:38,399 --> 00:14:41,040
migrate to memory safe languages

429
00:14:41,040 --> 00:14:43,040
it's not all or nothing thankfully

430
00:14:43,040 --> 00:14:44,800
that'd be a huge undertaking

431
00:14:44,800 --> 00:14:46,320
as alex explained you don't need to

432
00:14:46,320 --> 00:14:47,920
migrate everything all at once or even

433
00:14:47,920 --> 00:14:48,800
ever

434
00:14:48,800 --> 00:14:50,440
a big problem for chromium is

435
00:14:50,440 --> 00:14:51,920
interoperability

436
00:14:51,920 --> 00:14:54,160
we want to be able to integrate rust

437
00:14:54,160 --> 00:14:56,399
with c plus plus or swift with c plus

438
00:14:56,399 --> 00:14:58,880
plus easily it has to be efficient and

439
00:14:58,880 --> 00:15:00,000
ergonomic

440
00:15:00,000 --> 00:15:02,240
there is some progress in that area the

441
00:15:02,240 --> 00:15:05,839
cxx module from david tonley for example

442
00:15:05,839 --> 00:15:07,360
makes rust and c plus plus

443
00:15:07,360 --> 00:15:09,360
interoperability a lot easier than it

444
00:15:09,360 --> 00:15:10,880
has been in the past

445
00:15:10,880 --> 00:15:12,000
there's also the question of the

446
00:15:12,000 --> 00:15:14,320
learning curve a language that can solve

447
00:15:14,320 --> 00:15:15,440
the problems that c

448
00:15:15,440 --> 00:15:18,399
plus plus can is likely to be roughly as

449
00:15:18,399 --> 00:15:19,279
complex as c

450
00:15:19,279 --> 00:15:21,040
plus plus even if there are fewer

451
00:15:21,040 --> 00:15:22,320
pitfalls

452
00:15:22,320 --> 00:15:24,079
chromium engineers have spent a long

453
00:15:24,079 --> 00:15:25,519
time learning the chromium

454
00:15:25,519 --> 00:15:27,920
dialect of c plus plus and learning an

455
00:15:27,920 --> 00:15:29,519
additional language to the degree of

456
00:15:29,519 --> 00:15:31,360
competence necessary is

457
00:15:31,360 --> 00:15:33,680
you know it's hard it takes time but i

458
00:15:33,680 --> 00:15:35,199
definitely think it's worth it and we

459
00:15:35,199 --> 00:15:36,959
should be doing it

460
00:15:36,959 --> 00:15:38,399
in any case if you're starting a new

461
00:15:38,399 --> 00:15:40,639
project you can start right now with a

462
00:15:40,639 --> 00:15:41,839
safer language

463
00:15:41,839 --> 00:15:43,600
and similarly projects that are smaller

464
00:15:43,600 --> 00:15:44,880
than chromium

465
00:15:44,880 --> 00:15:47,199
have a comparatively easier job it's not

466
00:15:47,199 --> 00:15:48,720
going to necessarily take you

467
00:15:48,720 --> 00:15:50,240
a huge amount of time like not

468
00:15:50,240 --> 00:15:51,839
necessarily a decade

469
00:15:51,839 --> 00:15:54,160
and then again interoperability with

470
00:15:54,160 --> 00:15:55,120
vanilla c

471
00:15:55,120 --> 00:15:57,120
is typically easier than with c plus

472
00:15:57,120 --> 00:15:58,560
plus

473
00:15:58,560 --> 00:16:00,560
so another thing we're looking at doing

474
00:16:00,560 --> 00:16:02,959
is improving memory unsafe languages

475
00:16:02,959 --> 00:16:05,279
c plus plus we have smarter pointer

476
00:16:05,279 --> 00:16:06,639
types that we're working on one is

477
00:16:06,639 --> 00:16:08,560
called miracle pointer

478
00:16:08,560 --> 00:16:10,639
and we are working on garbage collection

479
00:16:10,639 --> 00:16:12,480
expanding the use of it

480
00:16:12,480 --> 00:16:14,880
we have a garbage collector a garbage

481
00:16:14,880 --> 00:16:15,600
collector called

482
00:16:15,600 --> 00:16:17,519
oil pan we're going to be using it in

483
00:16:17,519 --> 00:16:19,600
pdf em soon

484
00:16:19,600 --> 00:16:22,639
and a semi gc like technique

485
00:16:22,639 --> 00:16:25,839
called miracle scan so you know we want

486
00:16:25,839 --> 00:16:27,199
to be able to ship improvements this

487
00:16:27,199 --> 00:16:27,759
quarter

488
00:16:27,759 --> 00:16:30,160
right not just in 10 years so we need to

489
00:16:30,160 --> 00:16:32,720
work with the c plus plus that we've got

490
00:16:32,720 --> 00:16:34,880
first we know that use after free bugs

491
00:16:34,880 --> 00:16:36,560
especially in the browser process are a

492
00:16:36,560 --> 00:16:38,000
key problem for us

493
00:16:38,000 --> 00:16:39,839
for that we have two leading options

494
00:16:39,839 --> 00:16:41,839
miracle pointer

495
00:16:41,839 --> 00:16:44,800
it should make uaf use after free not

496
00:16:44,800 --> 00:16:47,360
deterministically exploitable

497
00:16:47,360 --> 00:16:50,880
miracle scan or star scan is like gc

498
00:16:50,880 --> 00:16:52,320
in that it looks for additional

499
00:16:52,320 --> 00:16:54,480
references to an object on the heap

500
00:16:54,480 --> 00:16:55,920
and then if it finds any it puts the

501
00:16:55,920 --> 00:16:57,519
object in a quarantine rather than

502
00:16:57,519 --> 00:16:59,120
destroying it so that it can't be used

503
00:16:59,120 --> 00:17:00,720
after free

504
00:17:00,720 --> 00:17:02,480
prior work along those lines includes

505
00:17:02,480 --> 00:17:04,559
mark us from cambridge

506
00:17:04,559 --> 00:17:07,839
and memgc from microsoft the time and

507
00:17:07,839 --> 00:17:09,520
space efficiency of these approaches

508
00:17:09,520 --> 00:17:11,199
seems to be within range of shippable

509
00:17:11,199 --> 00:17:13,679
and we're testing that now

510
00:17:13,679 --> 00:17:15,199
but additionally hardware vendors are

511
00:17:15,199 --> 00:17:17,599
helping out we intend to make as much

512
00:17:17,599 --> 00:17:18,319
use

513
00:17:18,319 --> 00:17:20,640
of memory tagging and control flow

514
00:17:20,640 --> 00:17:21,839
integrity features as

515
00:17:21,839 --> 00:17:24,160
is possible when they become widely

516
00:17:24,160 --> 00:17:27,119
available which might be soonish

517
00:17:27,119 --> 00:17:29,200
emulating these features in software is

518
00:17:29,200 --> 00:17:30,640
helpful but it's never going to be as

519
00:17:30,640 --> 00:17:33,120
efficient as with hardware security

520
00:17:33,120 --> 00:17:35,919
so mccombs will be very happy so what

521
00:17:35,919 --> 00:17:37,679
are the implications of all this

522
00:17:37,679 --> 00:17:39,679
we have to get to the acceptance stage

523
00:17:39,679 --> 00:17:41,919
of grief as alex described

524
00:17:41,919 --> 00:17:43,760
we have to accept that the technical

525
00:17:43,760 --> 00:17:45,280
debt of unsaved languages

526
00:17:45,280 --> 00:17:48,400
has come due so here's a picture of what

527
00:17:48,400 --> 00:17:49,840
that looks like for us

528
00:17:49,840 --> 00:17:52,480
this is a picture of high and critical

529
00:17:52,480 --> 00:17:54,000
bugs

530
00:17:54,000 --> 00:17:56,480
in chromium you can see about a third of

531
00:17:56,480 --> 00:17:58,559
our bugs are used after free

532
00:17:58,559 --> 00:18:01,840
another third is other memory on safety

533
00:18:01,840 --> 00:18:05,200
roughly a quarter is other bugs and uh

534
00:18:05,200 --> 00:18:07,440
security related asserts like in v8

535
00:18:07,440 --> 00:18:10,799
checking uh you know logic to be sound

536
00:18:10,799 --> 00:18:13,679
is about seven percent so overall

537
00:18:13,679 --> 00:18:15,360
platform security teams throughout the

538
00:18:15,360 --> 00:18:17,280
industry microsoft mozilla

539
00:18:17,280 --> 00:18:19,520
android apple they're seeing the same

540
00:18:19,520 --> 00:18:21,120
problems and they're roughly the same

541
00:18:21,120 --> 00:18:22,320
scale

542
00:18:22,320 --> 00:18:24,320
two thirds to three quarters of security

543
00:18:24,320 --> 00:18:27,039
relevant bugs are due to memory unsafety

544
00:18:27,039 --> 00:18:29,280
and in general everyone seems to be

545
00:18:29,280 --> 00:18:31,440
looking in the same direction

546
00:18:31,440 --> 00:18:33,039
to further reduce privilege with

547
00:18:33,039 --> 00:18:36,320
sandboxing and increase memory safety

548
00:18:36,320 --> 00:18:38,559
these techniques can create significant

549
00:18:38,559 --> 00:18:40,880
asymmetries that favor the defense i

550
00:18:40,880 --> 00:18:41,679
think

551
00:18:41,679 --> 00:18:43,440
attackers would be less and less able to

552
00:18:43,440 --> 00:18:45,600
get what they want with a single bug

553
00:18:45,600 --> 00:18:47,360
they'd need a chain of bugs to get a

554
00:18:47,360 --> 00:18:49,039
successful exploit

555
00:18:49,039 --> 00:18:51,440
longer than now harder to find than now

556
00:18:51,440 --> 00:18:52,400
hopefully

557
00:18:52,400 --> 00:18:54,320
and each bug would be harder to find and

558
00:18:54,320 --> 00:18:57,039
reliably exploit

559
00:18:57,039 --> 00:18:58,559
thanks again to adrian taylor for this

560
00:18:58,559 --> 00:19:00,640
picture by the way

561
00:19:00,640 --> 00:19:03,360
so um the future for us we think

562
00:19:03,360 --> 00:19:05,280
sandboxing has given us a great

563
00:19:05,280 --> 00:19:08,799
first 10 more years the next 10 require

564
00:19:08,799 --> 00:19:11,760
more and we think that's memory safety

565
00:19:11,760 --> 00:19:13,600
beyond that though my own dream is for

566
00:19:13,600 --> 00:19:15,280
attackers to have to fall back to

567
00:19:15,280 --> 00:19:16,720
exploiting bugs

568
00:19:16,720 --> 00:19:18,240
that are actually in the application

569
00:19:18,240 --> 00:19:20,080
domain of a browser

570
00:19:20,080 --> 00:19:22,960
by passing bypassing same origin policy

571
00:19:22,960 --> 00:19:25,120
enforcement logic for example

572
00:19:25,120 --> 00:19:27,200
is an example of that as is spoofing

573
00:19:27,200 --> 00:19:28,720
authentication

574
00:19:28,720 --> 00:19:31,520
uh confused deputy attacks using ipc

575
00:19:31,520 --> 00:19:32,799
like tricking the browser into thinking

576
00:19:32,799 --> 00:19:34,720
that one site is another site

577
00:19:34,720 --> 00:19:37,120
things like that then we can build on

578
00:19:37,120 --> 00:19:38,320
memory safety

579
00:19:38,320 --> 00:19:40,480
and try to resolve those higher level

580
00:19:40,480 --> 00:19:41,520
bugs

581
00:19:41,520 --> 00:19:43,679
with higher level defense concepts such

582
00:19:43,679 --> 00:19:45,760
as type safety formal verification of

583
00:19:45,760 --> 00:19:46,960
protocols

584
00:19:46,960 --> 00:19:49,200
and advances in secure ux design things

585
00:19:49,200 --> 00:19:50,320
like that

586
00:19:50,320 --> 00:19:51,600
all these things are progressing in

587
00:19:51,600 --> 00:19:53,600
parallel we're doing all these things

588
00:19:53,600 --> 00:19:55,520
but our hottest fire right now is memory

589
00:19:55,520 --> 00:19:57,360
unsafety and so that's where we're

590
00:19:57,360 --> 00:19:57,919
headed

591
00:19:57,919 --> 00:20:01,120
we think for the next day so thanks for

592
00:20:01,120 --> 00:20:07,840
listening and i'll take questions now

593
00:20:12,960 --> 00:20:15,039
you

