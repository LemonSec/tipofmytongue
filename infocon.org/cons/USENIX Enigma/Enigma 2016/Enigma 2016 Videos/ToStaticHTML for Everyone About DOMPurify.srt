1
00:00:00,198 --> 00:00:05,429
 

2
00:00:05,429 --> 00:00:07,561
[ Applause ]

3
00:00:07,561 --> 00:00:09,594
-Good morning.

4
00:00:09,594 --> 00:00:11,132
Is this thing on?
Can you hear me?

5
00:00:11,132 --> 00:00:12,858
Excellent.
That is good.

6
00:00:12,858 --> 00:00:14,297
I didn't sleep tonight.

7
00:00:14,297 --> 00:00:16,065
I'm super unprepared.
I'm probably gonna do overtime.

8
00:00:16,065 --> 00:00:18,099
I'm not a native speaker.
I have no idea about the topic.

9
00:00:18,099 --> 00:00:19,924
But I hope the topic's
gonna be fun, so let's see

10
00:00:19,924 --> 00:00:21,692
where we can go with this.

11
00:00:21,693 --> 00:00:25,033
I want to talk
about toStaticHTML for everyone.

12
00:00:25,033 --> 00:00:27,396
That sounds a bit cryptic,
and probably not too many people

13
00:00:27,396 --> 00:00:28,924
in the room might know
what this is about.

14
00:00:28,924 --> 00:00:32,792
So, that's a little bit
of a story.

15
00:00:32,792 --> 00:00:33,858
This is Alice.

16
00:00:33,858 --> 00:00:35,495
She's like a superstar
in crypto papers,

17
00:00:35,495 --> 00:00:36,660
so everybody knows her.

18
00:00:36,660 --> 00:00:39,626
And she wants to write
an encrypted message

19
00:00:39,627 --> 00:00:42,891
and send it to Bob.

20
00:00:42,891 --> 00:00:44,561
And this is Bob.

21
00:00:44,561 --> 00:00:47,495
He wants to receive that
encrypted message from Alice,

22
00:00:47,495 --> 00:00:49,263
and it's gonna be
about NASCAR or some stuff.

23
00:00:49,264 --> 00:00:50,594
So, this is a bit weird.

24
00:00:50,594 --> 00:00:51,957
You don't have to be ashamed
about these things,

25
00:00:51,957 --> 00:00:55,561
but you could consider
that already privacy-sensitive.

26
00:00:55,561 --> 00:00:57,330
So, what the two want to

27
00:00:57,330 --> 00:01:03,726
is they want to exchange
encrypted mails with each other.

28
00:01:03,726 --> 00:01:06,627
But they're not
too super tech-savvy,

29
00:01:06,627 --> 00:01:08,527
so they don't want to install,
like, Thunderbird

30
00:01:08,528 --> 00:01:11,231
and connect all their connects
and do these things

31
00:01:11,231 --> 00:01:13,131
and set up Enigmail and whatnot.

32
00:01:13,132 --> 00:01:15,033
So, they want to have
a comfortable solution

33
00:01:15,033 --> 00:01:16,594
that even works
on the mobile phone

34
00:01:16,594 --> 00:01:18,065
and on the road.

35
00:01:18,066 --> 00:01:20,099
And they decided
to use ElectronMail.

36
00:01:20,099 --> 00:01:22,726
I guess you all know
what I'm referring to.

37
00:01:22,726 --> 00:01:26,759
So, if not, Google it out
or Bing it out.

38
00:01:26,759 --> 00:01:29,297
It's a fancy tool
that allows to encrypt

39
00:01:29,297 --> 00:01:32,494
and decrypt mail messages
right in the browser.

40
00:01:32,495 --> 00:01:34,033
So, they can log
into a web interface,

41
00:01:34,033 --> 00:01:36,363
receive the e-mail,
and it's encrypted,

42
00:01:36,363 --> 00:01:38,000
and they decrypt it
and it shows in the browser,

43
00:01:38,000 --> 00:01:40,627
which is pretty cool.

44
00:01:40,627 --> 00:01:43,000
So, that's a great software.

45
00:01:43,000 --> 00:01:46,363
And it makes sure that no one
can read that message

46
00:01:46,363 --> 00:01:49,693
that the two are exchanging
unless they have the proper key,

47
00:01:49,693 --> 00:01:51,759
which is a good thing.

48
00:01:51,759 --> 00:01:53,891
I guess we all know
the principle behind that,

49
00:01:53,891 --> 00:01:56,297
and the only way
to actually crack the code

50
00:01:56,297 --> 00:01:58,264
and get access
to those messages and plaintext

51
00:01:58,264 --> 00:01:59,759
is pretty much
if you're very, very,

52
00:01:59,759 --> 00:02:03,033
very good at mathematics.

53
00:02:03,033 --> 00:02:05,396
And the approach
that is being chosen here

54
00:02:05,396 --> 00:02:08,824
has often been referred to
as end-to-end encryption.

55
00:02:08,824 --> 00:02:13,494
So, Alice encrypts something,
sends it out as encrypted text.

56
00:02:13,495 --> 00:02:17,429
Bob receives this, decrypts it,
and then he can read it.

57
00:02:17,429 --> 00:02:19,462
And that's pretty awesome.
And he can even reply.

58
00:02:19,462 --> 00:02:22,626
So, end-to-end, E-to-E,
or however you want to call it.

59
00:02:22,627 --> 00:02:25,891
So, from a technical standpoint,
that is very easy to explain.

60
00:02:28,165 --> 00:02:30,923
However, something happens.
The story has a twist.

61
00:02:30,924 --> 00:02:32,264
It actually has
a bunch of twists,

62
00:02:32,264 --> 00:02:33,726
but this is the first twist.

63
00:02:33,726 --> 00:02:36,363
The next day,
both Alice and Bob

64
00:02:36,363 --> 00:02:39,759
receive a message
from Mallory, malicious Mallory.

65
00:02:39,759 --> 00:02:41,594
And they both open that mail,

66
00:02:41,594 --> 00:02:43,692
and -- boom --

67
00:02:43,693 --> 00:02:46,231
the account gets compromised.

68
00:02:46,231 --> 00:02:48,924
And they don't even notice.

69
00:02:48,924 --> 00:02:52,231
Happening inside the browser,
not in the browser core,

70
00:02:52,231 --> 00:02:54,297
but in the HTML
and in the JavaScript.

71
00:02:54,297 --> 00:02:56,924
They're like,
"How is that even possible?"

72
00:02:56,924 --> 00:03:00,792
Well, the interesting thing
here is that Mallory herself

73
00:03:00,792 --> 00:03:02,858
gets access to all the e-mails

74
00:03:02,858 --> 00:03:05,759
that Bob and Alice have been
exchanging in the past.

75
00:03:05,759 --> 00:03:08,033
She also gets access
to their private keys.

76
00:03:08,033 --> 00:03:09,791
She also gets access
to all the contacts

77
00:03:09,792 --> 00:03:12,297
in Alice's and Bob's
address book.

78
00:03:12,297 --> 00:03:13,759
And she installs a keylogger

79
00:03:13,759 --> 00:03:16,197
because, just in case,
you never know.

80
00:03:16,198 --> 00:03:17,858
And this attack
really happened

81
00:03:17,858 --> 00:03:19,825
and it is possible
and was demonstrated

82
00:03:19,825 --> 00:03:21,692
by a fellow researcher

83
00:03:21,693 --> 00:03:25,066
that I know in a presentation
given in France

84
00:03:25,066 --> 00:03:27,660
on Hack in Paris last year.

85
00:03:27,660 --> 00:03:29,825
Now, the question is,
how's that possible?

86
00:03:29,825 --> 00:03:31,857
We mentioned already that
if you want to crack the code

87
00:03:31,858 --> 00:03:33,099
and if you want to get access

88
00:03:33,099 --> 00:03:34,626
to the plaintext
off that message,

89
00:03:34,627 --> 00:03:36,198
you have to be
really good at math.

90
00:03:36,198 --> 00:03:38,033
Mallory isn't
that strong at math.

91
00:03:38,033 --> 00:03:39,825
I'm not, either,
so that's not a bad thing.

92
00:03:39,825 --> 00:03:41,033
And she doesn't really
know too much

93
00:03:41,033 --> 00:03:43,396
about buffer overflows
or use-after-frees

94
00:03:43,396 --> 00:03:45,000
or all those fancy things
that Ben was talking about.

95
00:03:45,000 --> 00:03:47,528
She has no idea about these
things, and I don't, either.

96
00:03:47,528 --> 00:03:49,626
And she's further
not in possession

97
00:03:49,627 --> 00:03:51,528
of a vast attack infrastructure.

98
00:03:51,528 --> 00:03:54,197
So she doesn't have a bunch
of number crunchers or GPUs

99
00:03:54,198 --> 00:03:56,132
or whatever setup
that would be helpful

100
00:03:56,132 --> 00:03:58,231
in actually brute-forcing
or cracking

101
00:03:58,231 --> 00:04:00,792
that code, getting access
to the messages and plaintext

102
00:04:00,792 --> 00:04:03,726
and then even moving beyond.

103
00:04:03,726 --> 00:04:05,066
She can't do that.

104
00:04:05,066 --> 00:04:07,099
But how did she do it?

105
00:04:07,099 --> 00:04:08,692
Well, she's pretty good at HTML.

106
00:04:08,693 --> 00:04:10,132
I'm also pretty good at HTML.

107
00:04:10,132 --> 00:04:11,957
She's also pretty good
at JavaScript.

108
00:04:11,957 --> 00:04:14,792
And I would go as far
and say that HTML and JavaScript

109
00:04:14,792 --> 00:04:17,132
are pretty much the modern
cybercrime action pack

110
00:04:17,132 --> 00:04:19,066
because you can do
whatever you want with it,

111
00:04:19,065 --> 00:04:20,594
as long as it's happening
in the browser

112
00:04:20,594 --> 00:04:22,924
or something browser-like.

113
00:04:22,924 --> 00:04:24,561
So, what Mallory
was doing here --

114
00:04:24,561 --> 00:04:26,066
she was using
a cross-site scripting attack.

115
00:04:26,066 --> 00:04:28,825
Who here knows
what cross-site scripting is?

116
00:04:28,825 --> 00:04:30,296
Almost everybody.

117
00:04:30,297 --> 00:04:31,759
If you don't know, look it up.
It's super fascinating.

118
00:04:31,759 --> 00:04:33,858
It's not boring.
So, what she did --

119
00:04:33,858 --> 00:04:35,429
she was using
a cross-site scripting bug,

120
00:04:35,429 --> 00:04:37,164
in short, XSS.

121
00:04:37,165 --> 00:04:40,099
And she managed to smuggle
executable client-side code --

122
00:04:40,099 --> 00:04:42,594
HTML and JavaScript --
into the message

123
00:04:42,594 --> 00:04:45,594
she sent out to Bob and Alice.

124
00:04:45,594 --> 00:04:48,693
And this code executes
in the DOM,

125
00:04:48,693 --> 00:04:49,957
in the Document Object Model

126
00:04:49,957 --> 00:04:53,594
used by ElectronMail right
in the browser.

127
00:04:53,594 --> 00:04:55,330
And that's a bad thing

128
00:04:55,330 --> 00:04:57,527
because that is
the same platform

129
00:04:57,528 --> 00:04:59,165
where Alice and Bob
are acting on,

130
00:04:59,165 --> 00:05:00,495
in the browser, in that DOM,

131
00:05:00,495 --> 00:05:04,099
on that page that has been
loaded on that URL.

132
00:05:04,099 --> 00:05:06,890
So, Mallory can do pretty much
whatever she wants there.

133
00:05:06,891 --> 00:05:09,561
She can pretty much impersonate
those two perfectly well.

134
00:05:12,066 --> 00:05:14,363
It was pretty hard to do
these things, these kinds

135
00:05:14,363 --> 00:05:17,858
of cross-site scripting attacks
in the past

136
00:05:17,858 --> 00:05:19,561
because in the past,

137
00:05:19,561 --> 00:05:22,758
before the dawn
of cryptography in the browser,

138
00:05:22,759 --> 00:05:26,627
servers had the possibility
of sneak a peek into that mail,

139
00:05:26,627 --> 00:05:28,825
have a look at the HTML
that was being sent around,

140
00:05:28,825 --> 00:05:31,164
have a look at the attachments
that were being sent around,

141
00:05:31,165 --> 00:05:34,132
and sanitize them, scrub out
all the bad stuff,

142
00:05:34,132 --> 00:05:36,264
leave only the good,
and then everything is fine.

143
00:05:36,264 --> 00:05:37,759
So, there was
a server-side filter,

144
00:05:37,759 --> 00:05:40,000
a server-side sanitizer
through which the HTML

145
00:05:40,000 --> 00:05:43,330
had to go before being
shown in the browser.

146
00:05:43,330 --> 00:05:46,957
But the bad thing is right now
that is not possible anymore.

147
00:05:46,957 --> 00:05:49,165
So, the server
cannot see these things anymore

148
00:05:49,165 --> 00:05:51,462
because the HTML
that is part of the message

149
00:05:51,462 --> 00:05:53,000
is being encrypted.

150
00:05:53,000 --> 00:05:54,726
So, the server has no clue
what is going on.

151
00:05:54,726 --> 00:05:56,330
So, this old
protection mechanism

152
00:05:56,330 --> 00:05:58,693
that we used to rely on
and still rely on today

153
00:05:58,693 --> 00:06:02,066
doesn't work anymore because
the server only sees garbage.

154
00:06:02,066 --> 00:06:05,561
The first time
when the HTML actually unfolds

155
00:06:05,561 --> 00:06:06,758
is when it's being decrypted,

156
00:06:06,759 --> 00:06:08,957
and that sucks.

157
00:06:08,957 --> 00:06:12,296
So, goddamn encryption.

158
00:06:12,297 --> 00:06:14,693
We need to end this, right?

159
00:06:14,693 --> 00:06:18,330
It should be forbidden
or regulated or back-doored.

160
00:06:18,330 --> 00:06:19,924
Well, maybe not.

161
00:06:19,924 --> 00:06:22,659
Maybe there is something else
that we can do.

162
00:06:22,660 --> 00:06:26,198
I hope there is something else
we can do.

163
00:06:26,198 --> 00:06:28,395
The initial problem
that we want to isolate here

164
00:06:28,396 --> 00:06:30,099
before having, like,
a more advanced look

165
00:06:30,099 --> 00:06:31,429
at what other problems

166
00:06:31,429 --> 00:06:35,429
might be lurking in that space
is we cannot filter,

167
00:06:35,429 --> 00:06:37,429
we cannot sanitize
on the server no longer.

168
00:06:37,429 --> 00:06:38,626
It's not possible
because the server

169
00:06:38,627 --> 00:06:39,825
has no idea
what is going on.

170
00:06:39,825 --> 00:06:41,594
So, what we have to do
is we have to sanitize

171
00:06:41,594 --> 00:06:42,726
on the client itself.

172
00:06:42,726 --> 00:06:45,759
So, we have to do it
inside the browser.

173
00:06:45,759 --> 00:06:46,858
Sounds easy, right?

174
00:06:46,858 --> 00:06:48,627
Just, like,
use some prepared function

175
00:06:48,627 --> 00:06:50,033
that is offered by the browser

176
00:06:50,033 --> 00:06:51,693
that says, like, "Hey,
clean that chunk of HTML

177
00:06:51,693 --> 00:06:53,164
for me and do
something good with it."

178
00:06:53,165 --> 00:06:55,726
Should be easy, right?

179
00:06:55,726 --> 00:06:57,528
Well, one would assume

180
00:06:57,528 --> 00:06:59,726
the browsers
give us tools for that

181
00:06:59,726 --> 00:07:01,759
and that those tools
are really mature

182
00:07:01,759 --> 00:07:03,066
and have been existing for years

183
00:07:03,066 --> 00:07:04,758
because that's, like,
a super-common problem,

184
00:07:04,759 --> 00:07:07,363
sanitizing HTML
in the browser directly.

185
00:07:07,363 --> 00:07:11,660
But unfortunately that
is not the case.

186
00:07:11,660 --> 00:07:14,825
These tools
do not exist, not at all.

187
00:07:14,825 --> 00:07:17,462
Well, we have a lot
of security tools,

188
00:07:17,462 --> 00:07:18,759
and you might be jumping up
right now and saying, like,

189
00:07:18,759 --> 00:07:20,594
"Well, we have
all those amazing things

190
00:07:20,594 --> 00:07:21,957
that have been invented
in the past years.

191
00:07:21,957 --> 00:07:24,462
We have sandboxed iframes.
We have CSP.

192
00:07:24,462 --> 00:07:25,825
We have HTTP-only cookies.

193
00:07:25,825 --> 00:07:27,527
We have cross-site scripting
filters

194
00:07:27,528 --> 00:07:29,726
that I installed in browsers
and detect attacks.

195
00:07:29,726 --> 00:07:31,594
We have web workers
to isolate stuff.

196
00:07:31,594 --> 00:07:33,495
We have the same-origin policy,
that ancient thing.

197
00:07:33,495 --> 00:07:34,825
We have Subresource Integrity

198
00:07:34,825 --> 00:07:36,462
to make sure
that no malicious JavaScript

199
00:07:36,462 --> 00:07:37,693
from a compromised server
can come in.

200
00:07:37,693 --> 00:07:39,495
There are so many things.
And last but not least,

201
00:07:39,495 --> 00:07:42,297
the biggest thing that we have
is the Content Security Policy,

202
00:07:42,297 --> 00:07:43,759
that policy that controls

203
00:07:43,759 --> 00:07:47,231
what kind of script can execute
and what kind of script cannot."

204
00:07:47,231 --> 00:07:49,363
And Mallory
would have a hard time

205
00:07:49,363 --> 00:07:52,000
to get something
in if CSP's working there.

206
00:07:52,000 --> 00:07:55,462
However,
all those technologies

207
00:07:55,462 --> 00:07:57,957
are not really perfect
for that particular use case.

208
00:07:57,957 --> 00:07:59,858
They're all quite nice,
and if you intersect

209
00:07:59,858 --> 00:08:01,330
and overlap them nicely,

210
00:08:01,330 --> 00:08:03,924
then you might be lucky
and it might just work.

211
00:08:03,924 --> 00:08:05,626
But if just one
of them is broken

212
00:08:05,627 --> 00:08:08,462
or just like one of them
is slightly damaged,

213
00:08:08,462 --> 00:08:11,594
the solution
is not usable anymore.

214
00:08:11,594 --> 00:08:13,924
I've been researching CSP
for quite some time,

215
00:08:13,924 --> 00:08:16,395
and you don't want to know
how many bypasses I've found

216
00:08:16,396 --> 00:08:17,627
and reported
to the browser vendors.

217
00:08:17,627 --> 00:08:19,165
So, we cannot fully rely on CSP.

218
00:08:19,165 --> 00:08:21,231
We can't also fully rely
on sandbox iframes.

219
00:08:21,231 --> 00:08:23,659
There is not too many things
we can fully rely on.

220
00:08:23,660 --> 00:08:25,528
And this particular use case
we have here --

221
00:08:25,528 --> 00:08:27,363
sanitizing HTML
in the browser --

222
00:08:27,363 --> 00:08:31,297
is not covered,
and we need it.

223
00:08:31,297 --> 00:08:33,726
So, we need to have that.
We need to get that.

224
00:08:33,726 --> 00:08:36,099
We need to kind
of be able to do that.

225
00:08:36,099 --> 00:08:39,825
And I saw the need.

226
00:08:39,825 --> 00:08:45,363
And I remembered that there was
something like that in the past.

227
00:08:45,363 --> 00:08:47,033
It's what's called toStaticHTML,

228
00:08:47,033 --> 00:08:49,693
and toStaticHTML was
an interesting artifact

229
00:08:49,693 --> 00:08:51,231
because toStaticHTML,

230
00:08:51,231 --> 00:08:53,891
contrary to many other things
in the browser, is nonstandard.

231
00:08:53,891 --> 00:08:55,791
So, someone just, like,
came up with the idea,

232
00:08:55,792 --> 00:08:57,528
the same idea
in the past, said,

233
00:08:57,528 --> 00:08:59,066
like, "Yeah, we need
this kind of function

234
00:08:59,066 --> 00:09:00,627
that is globally available

235
00:09:00,627 --> 00:09:02,000
and we feed it some HTML

236
00:09:02,000 --> 00:09:05,330
and what comes out
is like non-dangerous HTML

237
00:09:05,330 --> 00:09:07,528
that cannot execute
any scripts."

238
00:09:07,528 --> 00:09:09,066
And the only
browser you would find

239
00:09:09,066 --> 00:09:11,033
this magic function in
was Internet Explorer.

240
00:09:11,033 --> 00:09:13,825
And I think it started
with IE8, 9, then in 10,

241
00:09:13,825 --> 00:09:15,330
then they have it still in 11.

242
00:09:15,330 --> 00:09:16,693
And then they killed it
in Edge because they were like,

243
00:09:16,693 --> 00:09:19,495
"Ah. No one uses this any more."

244
00:09:19,495 --> 00:09:23,264
So, too bad.

245
00:09:23,264 --> 00:09:24,363
We can only use it in IE.

246
00:09:24,363 --> 00:09:26,066
We can't even use it
in Edge anymore

247
00:09:26,066 --> 00:09:27,165
because it's nonstandard.

248
00:09:27,165 --> 00:09:28,231
No one ever took the work

249
00:09:28,231 --> 00:09:29,858
of writing down
what it really does.

250
00:09:29,858 --> 00:09:31,462
There was no configurability.

251
00:09:31,462 --> 00:09:32,792
There was physically nothing --

252
00:09:32,792 --> 00:09:34,957
It was, like, throw in a string,
get another string out,

253
00:09:34,957 --> 00:09:37,132
and hopefully everything
is fine.

254
00:09:37,132 --> 00:09:39,495
I contacted with Microsoft
for a bunch of years,

255
00:09:39,495 --> 00:09:42,099
and we also pen-tested
toStaticHTML,

256
00:09:42,099 --> 00:09:43,891
and guess what happened.

257
00:09:43,891 --> 00:09:45,264
We bypassed it.
It had to be fixed.

258
00:09:45,264 --> 00:09:47,165
We bypassed it again.
It had to be fixed, and so on.

259
00:09:47,165 --> 00:09:49,660
So, that was not perfect.

260
00:09:49,660 --> 00:09:51,791
If you run Firefox
with no script,

261
00:09:51,792 --> 00:09:54,561
you also get toStaticHTML.

262
00:09:54,561 --> 00:09:56,165
But it's following
completely different rules

263
00:09:56,165 --> 00:09:58,132
and did a good job

264
00:09:58,132 --> 00:09:59,527
in implementing something
that is fairly safe,

265
00:09:59,528 --> 00:10:00,924
but you don't want to use it.

266
00:10:00,924 --> 00:10:02,759
I mean, no other browser has it.

267
00:10:02,759 --> 00:10:05,759
Either just IE or Firefox
with a very specific plug-in.

268
00:10:05,759 --> 00:10:09,792
So, there is no good reliability

269
00:10:09,792 --> 00:10:11,396
that you will actually
find this thing.

270
00:10:11,396 --> 00:10:13,165
But we need something like that.

271
00:10:13,165 --> 00:10:15,924
So I decided to build it
because why not?

272
00:10:15,924 --> 00:10:17,693
It was actually the project part

273
00:10:17,693 --> 00:10:19,462
that was following
my PhD thesis,

274
00:10:19,462 --> 00:10:21,297
where I was trying to fight XSS

275
00:10:21,297 --> 00:10:23,891
and actually defeat XSS
and almost made it,

276
00:10:23,891 --> 00:10:26,296
but that project was missing.

277
00:10:26,297 --> 00:10:27,627
So I created a library,

278
00:10:27,627 --> 00:10:29,329
and that library
is called DOMPurify.

279
00:10:29,330 --> 00:10:32,462
And it does
exactly what I was describing,

280
00:10:32,462 --> 00:10:34,792
only that it's like nice
and configurable

281
00:10:34,792 --> 00:10:37,825
and you can throw HTML in
and you can throw MathML in,

282
00:10:37,825 --> 00:10:40,330
you can throw SVG in,
and whatever you want.

283
00:10:40,330 --> 00:10:41,462
It takes that.

284
00:10:41,462 --> 00:10:44,297
It puts that in a virtual
isolated DOM,

285
00:10:44,297 --> 00:10:46,594
iterates over everything,
sanitizes the trees,

286
00:10:46,594 --> 00:10:48,099
the branches,
and the leaves,

287
00:10:48,099 --> 00:10:50,132
and then gives back
another string or an object,

288
00:10:50,132 --> 00:10:51,758
depending on how
your configuration looks like,

289
00:10:51,759 --> 00:10:53,858
and that is then sane.

290
00:10:53,858 --> 00:10:55,758
It's quite good.
Throws out the bad,

291
00:10:55,759 --> 00:10:57,759
leaves in the good, returns
a sane string,

292
00:10:57,759 --> 00:10:59,264
and you can work
with that thing.

293
00:10:59,264 --> 00:11:00,726
It's open-source.
It's free.

294
00:11:00,726 --> 00:11:04,330
We have,
like, super permissive license.

295
00:11:04,330 --> 00:11:06,528
I thought at the first time

296
00:11:06,528 --> 00:11:07,924
when I started
implementing this thing,

297
00:11:07,924 --> 00:11:10,495
that it would be an easy task --
just create a virtual DOM.

298
00:11:10,495 --> 00:11:11,825
Just iterate over the branches.

299
00:11:11,825 --> 00:11:14,099
Iterate it over
all that stuff and sanitize it.

300
00:11:14,099 --> 00:11:15,924
But that wasn't true.

301
00:11:15,924 --> 00:11:17,593
So the DOM
was a huge mess.

302
00:11:17,594 --> 00:11:19,396
Like, it's absolutely
almost impossible

303
00:11:19,396 --> 00:11:21,296
to kind of know in advance

304
00:11:21,297 --> 00:11:23,264
what kind of death traps
the DOM has for you

305
00:11:23,264 --> 00:11:25,396
because there are
so many weird stuff

306
00:11:25,396 --> 00:11:27,165
going on independently
of the browser.

307
00:11:27,165 --> 00:11:30,033
There's weird stuff in Chrome.
There's very weird stuff in IE.

308
00:11:30,033 --> 00:11:32,726
There's pretty damn
weird stuff in Firefox.

309
00:11:32,726 --> 00:11:34,264
And, well, guess what --

310
00:11:34,264 --> 00:11:35,924
other browsers also have
weird stuff, as well.

311
00:11:35,924 --> 00:11:38,165
And these weirdnesses,
these artifacts on the DOM,

312
00:11:38,165 --> 00:11:40,132
always shoot us in the foot
because,

313
00:11:40,132 --> 00:11:41,791
effectively, they
created bypasses,

314
00:11:41,792 --> 00:11:43,561
so we had to work
around these bypasses

315
00:11:43,561 --> 00:11:45,297
and these weirdnesses and kind
of create something

316
00:11:45,297 --> 00:11:49,066
that we could trust
in the DOM as a sanitizer.

317
00:11:49,066 --> 00:11:52,132
I notice that there is not
Donald Trump emoji again.

318
00:11:52,132 --> 00:11:54,791
I wanted to the entire
presentation as emoji,

319
00:11:54,792 --> 00:11:56,099
but not yet.

320
00:11:56,099 --> 00:11:57,363
We will see.

321
00:11:57,363 --> 00:12:00,429
Anyhow, we believe to have
solved all those problems

322
00:12:00,429 --> 00:12:01,891
in the DOM,
all those weirdnesses.

323
00:12:01,891 --> 00:12:03,363
We've maybe, hopefully,

324
00:12:03,363 --> 00:12:04,957
detected all of them
and worked around them.

325
00:12:04,957 --> 00:12:06,957
And we're actually quite happy
because we haven't received

326
00:12:06,957 --> 00:12:09,033
any bypasses for months,

327
00:12:09,033 --> 00:12:10,792
despite even generous
bug bounties

328
00:12:10,792 --> 00:12:13,429
that we give out thanks
to a bunch of amazing partners,

329
00:12:13,429 --> 00:12:14,726
like, for example, FastMail,

330
00:12:14,726 --> 00:12:16,660
that said, "When you find a bug
in DOMPurify,

331
00:12:16,660 --> 00:12:18,759
you will get big cash,"
which is quite nice,

332
00:12:18,759 --> 00:12:21,000
and this is as far as we can go.

333
00:12:21,000 --> 00:12:22,198
So, we have unit tests.

334
00:12:22,198 --> 00:12:23,824
We have C.I.
We have good coverage.

335
00:12:23,825 --> 00:12:26,693
We have bug bounty.
This is all open-source.

336
00:12:26,693 --> 00:12:29,462
It has permissive licenses.
And it's really great.

337
00:12:29,462 --> 00:12:32,330
You should all use it, right?

338
00:12:32,330 --> 00:12:34,759
Many websites
are actually already using it.

339
00:12:34,759 --> 00:12:37,264
In Germany,
we have this failed project,

340
00:12:37,264 --> 00:12:39,792
but it still exists,
that is kind

341
00:12:39,792 --> 00:12:41,528
of a government-approved
e-mail system,

342
00:12:41,528 --> 00:12:43,033
where you can do
your taxes with.

343
00:12:43,033 --> 00:12:45,858
Like, nobody uses it,
and that's okay.

344
00:12:45,858 --> 00:12:46,924
And they call it De-Mail.

345
00:12:46,924 --> 00:12:48,098
And they have
the very same problem

346
00:12:48,099 --> 00:12:49,264
because they recently
implemented E-to-E,

347
00:12:49,264 --> 00:12:50,924
end-to-end encryption,
and guess what,

348
00:12:50,924 --> 00:12:52,066
they have the same problem.

349
00:12:52,066 --> 00:12:53,726
They also realized that,
"Oh, darn,

350
00:12:53,726 --> 00:12:56,165
uh, what do we do with
that markup that is encrypted?

351
00:12:56,165 --> 00:12:57,198
That's really bad."

352
00:12:57,198 --> 00:12:58,924
And we had
a cross-site scripting.

353
00:12:58,924 --> 00:13:01,000
We even had
remote code execution

354
00:13:01,000 --> 00:13:02,924
because it was using
the extension

355
00:13:02,924 --> 00:13:04,462
that is called Mailvelope,

356
00:13:04,462 --> 00:13:07,000
and there we had an RCE because
it was running in an extension.

357
00:13:07,000 --> 00:13:08,759
And when you run JavaScript
in an extension

358
00:13:08,759 --> 00:13:12,066
that you can control
as an attacker, you have RCE.

359
00:13:12,066 --> 00:13:13,726
So, they're using DOMPurify.

360
00:13:13,726 --> 00:13:15,099
And they're good with it.
They're fine with it.

361
00:13:15,099 --> 00:13:16,462
And I would estimate,
without being,

362
00:13:16,462 --> 00:13:18,165
like, too bold
that there's a couple

363
00:13:18,165 --> 00:13:19,726
of hundred of millions
of users per day

364
00:13:19,726 --> 00:13:23,759
that are being protected
by my library, which is good.

365
00:13:23,759 --> 00:13:25,726
Which is great, right?

366
00:13:25,726 --> 00:13:28,330
So, I guess
the problem is solved.

367
00:13:28,330 --> 00:13:30,099
We can be done here.
We can go home

368
00:13:30,099 --> 00:13:34,330
because we don't have
that missing part anymore.

369
00:13:34,330 --> 00:13:35,561
It's all there.

370
00:13:35,561 --> 00:13:37,099
We have a good library.
It's well maintained.

371
00:13:37,099 --> 00:13:39,858
It does what it's supposed
to do, and everything's fine.

372
00:13:39,858 --> 00:13:42,263
And I'm now kind of standing
here and just,

373
00:13:42,264 --> 00:13:44,198
like, producing myself
as the slayer

374
00:13:44,198 --> 00:13:45,396
off the cross-site
scripting dragon,

375
00:13:45,396 --> 00:13:48,000
as an awesome person
who created that library

376
00:13:48,000 --> 00:13:51,759
and saved everybody
from these kinds of attacks.

377
00:13:51,759 --> 00:13:55,561
But is that really true?

378
00:13:55,561 --> 00:13:58,264
Don't we have, like,
a much bigger problem?

379
00:13:58,264 --> 00:13:59,495
I'm turning
into the evil guy now,

380
00:13:59,495 --> 00:14:01,330
so I think I don't have
to be formal anymore.

381
00:14:01,330 --> 00:14:03,429
I'll just, like,
get this jacket off.

382
00:14:03,429 --> 00:14:08,065
Fly, little bird.

383
00:14:08,066 --> 00:14:09,924
Hell no.

384
00:14:09,924 --> 00:14:11,593
Now have to do something
that you didn't have

385
00:14:11,594 --> 00:14:14,066
to do before,
because you have to trust me.

386
00:14:14,066 --> 00:14:16,726
I am the maintainer
of a library

387
00:14:16,726 --> 00:14:20,099
that is being used by many,
many websites out there,

388
00:14:20,099 --> 00:14:22,264
that is protecting many,
many people at the same time,

389
00:14:22,264 --> 00:14:24,759
every single day, in and out,
and you have to trust me

390
00:14:24,759 --> 00:14:26,825
that I don't fuck it up.

391
00:14:26,825 --> 00:14:29,957
Or even worse,
I could turn rogue --

392
00:14:29,957 --> 00:14:33,099
just so --
and build in a back door.

393
00:14:33,099 --> 00:14:35,825
Mmm. All that money.

394
00:14:35,825 --> 00:14:37,231
And that would work.

395
00:14:37,231 --> 00:14:40,033
And no one would notice.

396
00:14:40,033 --> 00:14:41,264
Of course I would,
like, never do that,

397
00:14:41,264 --> 00:14:42,693
but I could turn rogue,

398
00:14:42,693 --> 00:14:44,759
and I think I could write in
a cross-site scripting exploit

399
00:14:44,759 --> 00:14:46,660
that you wouldn't
see immediately

400
00:14:46,660 --> 00:14:49,495
that would even bypass,
well, my own tests.

401
00:14:49,495 --> 00:14:51,132
I've been writing
cross-site scripting exploits

402
00:14:51,132 --> 00:14:52,824
for the past 10 years.

403
00:14:52,825 --> 00:14:54,231
I think I could hide something.

404
00:14:54,231 --> 00:14:56,099
I would probably hide it
in the compressed version

405
00:14:56,099 --> 00:14:59,066
that we also deliver
because no one ever checks that.

406
00:14:59,066 --> 00:15:00,594
I mean, just, like, no one
had to look at this thing,

407
00:15:00,594 --> 00:15:02,033
and it's compressed.
Like, who wants to audit that?

408
00:15:02,033 --> 00:15:04,033
There's just like a bunch
of bytes that I have to change,

409
00:15:04,033 --> 00:15:05,297
and -- boom --
I have a back door.

410
00:15:05,297 --> 00:15:06,429
And I have cross-site scripting

411
00:15:06,429 --> 00:15:07,957
for hundreds
of millions of users.

412
00:15:07,957 --> 00:15:10,891
How awesome would that be,
at least for me?

413
00:15:10,891 --> 00:15:13,264
But I would never do that,
right?

414
00:15:13,264 --> 00:15:14,528
I mean, I would absolutely
never do that.

415
00:15:14,528 --> 00:15:16,099
You can fully trust me.
I'm standing here.

416
00:15:16,099 --> 00:15:18,396
I'm just like --
I would totally not do that.

417
00:15:18,396 --> 00:15:21,296
Or would I?
Or would I?

418
00:15:21,297 --> 00:15:23,066
Oh, God, that money.

419
00:15:23,066 --> 00:15:25,297
I would have to hire
a person for money

420
00:15:25,297 --> 00:15:27,132
that tells me how to spend
all that money

421
00:15:27,132 --> 00:15:28,363
that I would make.

422
00:15:28,363 --> 00:15:31,660
God, I love that.

423
00:15:31,660 --> 00:15:33,824
So, that kind of sucks.

424
00:15:33,825 --> 00:15:36,198
I can get the jacket on again,
but maybe later.

425
00:15:36,198 --> 00:15:38,297
Now what?

426
00:15:38,297 --> 00:15:40,066
What kind
of options do we have?

427
00:15:40,066 --> 00:15:42,396
We see that there's a problem,
and it's like an actual,

428
00:15:42,396 --> 00:15:44,924
real-life problem.

429
00:15:44,924 --> 00:15:47,396
And we see
that there's a solution,

430
00:15:47,396 --> 00:15:50,098
but the solution was created
by one dude and a bunch

431
00:15:50,099 --> 00:15:51,660
of people who helped.

432
00:15:51,660 --> 00:15:53,627
And that one dude --
me -- has full control

433
00:15:53,627 --> 00:15:57,000
over the solution
and can do whatever the effort

434
00:15:57,000 --> 00:16:00,594
that person wants,
me wants, to that solution.

435
00:16:00,594 --> 00:16:03,825
And with one click,
with one commit on GitHub

436
00:16:03,825 --> 00:16:06,561
I can do really,
really nasty stuff.

437
00:16:06,561 --> 00:16:07,957
That's not good.

438
00:16:07,957 --> 00:16:09,264
We need more eyes on that.

439
00:16:09,264 --> 00:16:12,000
We cannot rely on people
just creating, providing,

440
00:16:12,000 --> 00:16:15,726
and maintaining
security libraries.

441
00:16:15,726 --> 00:16:20,297
I think there's a solution,
and that solution is

442
00:16:20,297 --> 00:16:22,825
that we cannot rely
on these libraries anymore.

443
00:16:22,825 --> 00:16:25,363
We have to have that stuff
inside the browser,

444
00:16:25,363 --> 00:16:26,594
inside the DOM.

445
00:16:26,594 --> 00:16:29,396
The DOM has so many APIs.
Some of them are useful.

446
00:16:29,396 --> 00:16:31,891
Some of them are super useless
and are never being used.

447
00:16:31,891 --> 00:16:33,429
But that doesn't matter.
They're still there.

448
00:16:33,429 --> 00:16:35,560
But we need another API
in the DOM.

449
00:16:35,561 --> 00:16:37,396
We need a sanitizer
in the DOM.

450
00:16:37,396 --> 00:16:39,198
We need something
that is working out of the box,

451
00:16:39,198 --> 00:16:41,726
that is fast,
that provides a secure default,

452
00:16:41,726 --> 00:16:44,165
that has nice templates,
and that prevents developers

453
00:16:44,165 --> 00:16:45,957
from shooting themselves
in the foot.

454
00:16:45,957 --> 00:16:47,429
And we don't need this
as a library

455
00:16:47,429 --> 00:16:50,858
because then we have to trust
someone or a bunch of people.

456
00:16:50,858 --> 00:16:52,098
We need this in the browser,

457
00:16:52,099 --> 00:16:53,726
where everybody can have
a look at it

458
00:16:53,726 --> 00:16:56,264
and notices
when something happens.

459
00:16:56,264 --> 00:16:57,528
We need DOMPurify

460
00:16:57,528 --> 00:17:00,693
or something like DOMPurify
inside the browser core,

461
00:17:00,693 --> 00:17:03,363
despite CSP because CSP
doesn't fix the problem.

462
00:17:03,363 --> 00:17:05,495
Rather, the contrary --
It makes, sometimes, things

463
00:17:05,494 --> 00:17:07,098
a bit worse,
sometimes a bit better.

464
00:17:07,098 --> 00:17:10,066
So we need something
that is covering up for that.

465
00:17:10,066 --> 00:17:12,066
We need to fill those gaps.
We cannot rely anymore

466
00:17:12,066 --> 00:17:14,759
on these accidental
intersections

467
00:17:14,759 --> 00:17:16,957
of existing
protective technologies.

468
00:17:16,957 --> 00:17:18,693
We have to have something
that is covering

469
00:17:18,693 --> 00:17:19,924
that particular use case

470
00:17:19,924 --> 00:17:21,627
because that is getting
more and more common.

471
00:17:21,627 --> 00:17:23,066
And that is good.

472
00:17:23,066 --> 00:17:24,792
That's a good thing
that it's getting more common.

473
00:17:24,791 --> 00:17:27,627
So, now you might sit here
in your comfort zones

474
00:17:27,627 --> 00:17:28,924
and you might have a look at me
and say, like,

475
00:17:28,924 --> 00:17:31,197
"Why didn't you just
write the specification?"

476
00:17:31,198 --> 00:17:33,297
I'm like, "Well,

477
00:17:33,297 --> 00:17:34,825
why don't you write
the specification?

478
00:17:34,825 --> 00:17:36,726
I already did
all the dirty work."

479
00:17:36,726 --> 00:17:38,627
I identified the problem.

480
00:17:38,627 --> 00:17:40,165
I developed a fix.

481
00:17:40,165 --> 00:17:42,726
I hardened that fix,
and it's really working well.

482
00:17:42,726 --> 00:17:44,627
I set up all the testing
infrastructure,

483
00:17:44,627 --> 00:17:46,792
tons of test cases,
literally tens of thousands

484
00:17:46,792 --> 00:17:49,528
of test cases of attacks
in the past, future attacks,

485
00:17:49,528 --> 00:17:51,462
combined attacks,
weird character sets,

486
00:17:51,462 --> 00:17:53,231
mutations, and whatnot.

487
00:17:53,231 --> 00:17:55,495
I did all that already.

488
00:17:55,495 --> 00:17:58,165
I think now it's not my turn
to write a specification,

489
00:17:58,165 --> 00:18:00,363
but it's actually our turn --

490
00:18:00,363 --> 00:18:01,429
What's that?

491
00:18:01,429 --> 00:18:04,495
-Use that, please.
-Okay.

492
00:18:07,000 --> 00:18:10,396
Sorry, I lost focus.

493
00:18:10,400 --> 00:18:12,924
Like I said, I've done
the dirty work already.

494
00:18:12,924 --> 00:18:14,429
Everything is there.

495
00:18:14,429 --> 00:18:17,033
But if you also think that this
is like a realistic use case,

496
00:18:17,033 --> 00:18:18,462
that we want to make sure

497
00:18:18,462 --> 00:18:20,792
that encrypted communication

498
00:18:20,792 --> 00:18:22,627
in the browser --

499
00:18:22,627 --> 00:18:24,858
where stuff is being
decrypted in the browser,

500
00:18:24,858 --> 00:18:26,396
right in the DOM,
and needs to be protected,

501
00:18:26,396 --> 00:18:29,495
as well, then let's do
something like that.

502
00:18:29,495 --> 00:18:31,758
We're not starting this project,
we're not starting this spec,

503
00:18:31,759 --> 00:18:34,231
but we're really, really happy
to help with test cases,

504
00:18:34,231 --> 00:18:37,330
with implementation,
with support, with experience.

505
00:18:37,330 --> 00:18:38,924
We've helped countless users

506
00:18:38,924 --> 00:18:40,825
to actually set up
DOMPurify on their websites.

507
00:18:40,825 --> 00:18:42,594
We kind of know
what developers want.

508
00:18:42,594 --> 00:18:44,231
But we're not gonna get into
this battle

509
00:18:44,231 --> 00:18:46,198
of writing the specification.

510
00:18:46,198 --> 00:18:48,066
It would be great
if someone else did that for us

511
00:18:48,066 --> 00:18:50,066
or with us.

512
00:18:50,066 --> 00:18:53,033
So, my call to action
here is that I would really like

513
00:18:53,033 --> 00:18:54,693
if you could take
all those ElectronMails

514
00:18:54,693 --> 00:18:57,198
and all those other tools
that do the very same thing

515
00:18:57,198 --> 00:18:58,924
and all those plug-ins
and all those add-ons

516
00:18:58,924 --> 00:19:01,561
and those extensions and make
them a little bit safer

517
00:19:01,561 --> 00:19:03,066
by giving them the only API

518
00:19:03,066 --> 00:19:04,330
that is still
missing for them,

519
00:19:04,330 --> 00:19:06,561
and that is client-side
sanitization.

520
00:19:06,561 --> 00:19:09,066
We shouldn't and we can't
do this on the server anymore.

521
00:19:09,066 --> 00:19:11,297
We can't do this with
some obscure application,

522
00:19:11,297 --> 00:19:12,924
firewall, or IPS anymore.

523
00:19:12,924 --> 00:19:14,363
We can't do this
on the network anymore.

524
00:19:14,363 --> 00:19:16,198
We have to do this in
the browser, and that is, like,

525
00:19:16,198 --> 00:19:20,132
the only place because that is
where the action happens.

526
00:19:20,132 --> 00:19:22,528
So, that
concludes my presentation,

527
00:19:22,528 --> 00:19:25,330
and I hope some of you
liked it and see it as,

528
00:19:25,330 --> 00:19:26,693
like, a call to action
and don't see it as,

529
00:19:26,693 --> 00:19:28,891
like, too useless,
what I'm proposing.

530
00:19:28,891 --> 00:19:32,330
And if you don't, then just,
like, talk to me

531
00:19:32,330 --> 00:19:34,462
after the presentation, and
maybe we can find something out.

532
00:19:34,462 --> 00:19:35,891
Oh, there's good news.

533
00:19:35,891 --> 00:19:37,528
Actually,
I spoke about this issue

534
00:19:37,528 --> 00:19:40,396
with two Googlers,
with Dave Frost and Mike West.

535
00:19:40,396 --> 00:19:43,825
That's why they were referenced
on the slides without knowing.

536
00:19:43,825 --> 00:19:45,330
And they couldn't help --

537
00:19:45,330 --> 00:19:46,726
They couldn't keep
their fingers still,

538
00:19:46,726 --> 00:19:48,693
and they actually
started working

539
00:19:48,693 --> 00:19:50,231
on the specification already.

540
00:19:50,231 --> 00:19:51,957
And there's a mailing-list
thread where it's just, like,

541
00:19:51,957 --> 00:19:54,297
people are doing Cakefiles,
the usual mailing-list style,

542
00:19:54,297 --> 00:19:56,066
and discussing the issue,
and it's moving forward.

543
00:19:56,066 --> 00:19:57,429
So, the first step
is already done.

544
00:19:57,429 --> 00:19:58,693
It just, like, happened
yesterday or the day

545
00:19:58,693 --> 00:20:00,264
before yesterday,
so that is good.

546
00:20:00,264 --> 00:20:01,726
Let's see what's
coming out of it.

547
00:20:01,726 --> 00:20:03,297
And that's it.
Thank you very much.

548
00:20:03,297 --> 00:20:04,957
[ Applause ]

549
00:20:04,957 --> 00:20:10,957
 

