1
00:00:00,198 --> 00:00:00,660


2
00:00:00,660 --> 00:00:05,363
♪♪

3
00:00:05,363 --> 00:00:07,297
[Applause] SULLIVAN: Thanks, Alex.

4
00:00:11,726 --> 00:00:13,891
Padlock.

5
00:00:13,891 --> 00:00:15,231
Right? The padlock.

6
00:00:15,231 --> 00:00:19,000
It's a hearty, general-purpose tool.

7
00:00:19,000 --> 00:00:21,066
It can be used to keep a box locked

8
00:00:21,066 --> 00:00:23,099
or to link two chains together.

9
00:00:23,099 --> 00:00:26,495
A padlock has a unique key that can unlock it

10
00:00:26,495 --> 00:00:31,594
and it provides you with a confidential space

11
00:00:31,594 --> 00:00:33,297
in the physical world.

12
00:00:33,297 --> 00:00:35,428
Given, of course, that someone doesn't have

13
00:00:35,429 --> 00:00:38,429
heavy-duty wire cutters or a lockpicking tool

14
00:00:38,429 --> 00:00:42,957
and sufficient skill in the art.

15
00:00:42,957 --> 00:00:46,858
A padlock is also the symbol of HTTPS.

16
00:00:46,858 --> 00:00:49,561
Specifically, it's used in browsers to indicate

17
00:00:49,561 --> 00:00:54,792
that a website is being accessed with transport layer security.

18
00:00:54,792 --> 00:00:59,528
And also that the website has a valid security certificate.

19
00:00:59,528 --> 00:01:02,824
This idea is not exactly the same

20
00:01:02,825 --> 00:01:05,759
as what a padlock is in physical reality.

21
00:01:05,759 --> 00:01:09,429
HTTPS implies much more than just confidentiality.

22
00:01:09,429 --> 00:01:12,594
It implies identity and trust.

23
00:01:12,594 --> 00:01:14,428
To the average user,

24
00:01:14,429 --> 00:01:17,000
this complex notion of cryptographic security

25
00:01:17,000 --> 00:01:21,264
expressed by the padlock symbol is not always understood.

26
00:01:21,264 --> 00:01:23,198
I asked a few people

27
00:01:23,198 --> 00:01:26,527
what the padlock symbol stood for.

28
00:01:26,528 --> 00:01:27,891
[Laconic tune plays] MAN: I don't know.

29
00:01:27,891 --> 00:01:31,000
The padlock, to me, is -- I don't know.

30
00:01:31,000 --> 00:01:33,858
Private browsing, I guess? I'm not sure.

31
00:01:33,858 --> 00:01:36,858
It's a level of security, I guess, it signifies?

32
00:01:36,858 --> 00:01:39,429
I don't know!

33
00:01:39,429 --> 00:01:40,726
MAN #2: He's anxious about the porn.

34
00:01:40,726 --> 00:01:45,330
MAN: Yeah, it's the most British response, ever.

35
00:01:45,330 --> 00:01:48,330
MAN #2: Browser history. -MAN: Sign that it's

36
00:01:48,330 --> 00:01:51,264
the same as privacy browsing, so that you don't have

37
00:01:51,264 --> 00:01:53,660
any cookies or other things saved.

38
00:01:53,660 --> 00:01:58,494
I can't comment on what they are 'cause I don't really know.

39
00:01:58,495 --> 00:02:00,066
[ Person chuckles nearby ]

40
00:02:00,066 --> 00:02:02,627
MAN #2: Back to the padlock question.

41
00:02:02,627 --> 00:02:04,726
SULLIVAN: What is the padlock in a browser and what does it do?

42
00:02:04,726 --> 00:02:08,032
MAN #2: In a browser? I believe --

43
00:02:08,032 --> 00:02:12,297
I think it tells you that the website

44
00:02:12,297 --> 00:02:16,000
you're currently looking at has a certificate

45
00:02:16,000 --> 00:02:19,330
that assures that it's...safe?

46
00:02:19,330 --> 00:02:22,825
MAN: Hoorah! Hoorah! MAN #2: Yeah.

47
00:02:22,825 --> 00:02:24,297
MAN: Hoorah! -MAN #2: And then, sometimes,

48
00:02:24,297 --> 00:02:25,759
you know, you get a little warning, saying,

49
00:02:25,759 --> 00:02:28,791
"Oh, this website doesn't have a certificate,

50
00:02:28,792 --> 00:02:30,594
so it doesn't have a padlock or something."

51
00:02:30,594 --> 00:02:31,858
MAN: Hoorah! -SULLIVAN: Do you notice

52
00:02:31,858 --> 00:02:33,363
when a website doesn't have a certificate?

53
00:02:33,363 --> 00:02:35,627
MAN #2: It pops up. -SULLIVAN: What does it say,

54
00:02:35,627 --> 00:02:37,495
when it pops up, and what do you do?

55
00:02:37,495 --> 00:02:38,957
MAN #2: I keep going.

56
00:02:38,957 --> 00:02:41,329
I think it's there to try to keep us safe,

57
00:02:41,330 --> 00:02:43,693
but what is safe online?

58
00:02:43,693 --> 00:02:45,330
I don't think it exists.

59
00:02:45,330 --> 00:02:49,594
[ Laughter ]

60
00:02:49,594 --> 00:02:51,231
[ Applause ] -SULLIVAN: Right, so that guy

61
00:02:51,231 --> 00:02:55,165
had the right idea, nut not everyone is so well-informed.

62
00:02:55,165 --> 00:02:56,858
And you may notice that he said that,

63
00:02:56,858 --> 00:02:59,726
if your site doesn't have a certificate, it pops up.

64
00:02:59,726 --> 00:03:01,132
Interestingly enough.

65
00:03:01,132 --> 00:03:02,759
So, people don't always know

66
00:03:02,759 --> 00:03:04,396
what this lock is supposed to express,

67
00:03:04,396 --> 00:03:07,099
but they know it has to do with security and safety

68
00:03:07,099 --> 00:03:12,165
and that it evokes this sort of warm sense of trustworthiness.

69
00:03:12,165 --> 00:03:15,000
Studies have been done to show

70
00:03:15,000 --> 00:03:18,594
how much information can be conveyed with a little lock icon

71
00:03:18,594 --> 00:03:21,759
or security indicators, to the general population,

72
00:03:21,759 --> 00:03:25,297
and the most is around 2 bits of information

73
00:03:25,297 --> 00:03:27,924
and that's being generous.

74
00:03:27,924 --> 00:03:30,264
The 2 bits that are currently being used

75
00:03:30,264 --> 00:03:34,528
are your lock symbol, no lock symbol,

76
00:03:34,528 --> 00:03:37,396
lock symbol with sort of a red X or indicator,

77
00:03:37,396 --> 00:03:42,759
and then the dubious yield sign in front of the lock.

78
00:03:42,759 --> 00:03:46,099
It's the job of the security user experience engineer

79
00:03:46,099 --> 00:03:48,066
to express to the consumer

80
00:03:48,066 --> 00:03:50,429
the security characteristics of a webpage,

81
00:03:50,429 --> 00:03:53,198
even if visitors are not

82
00:03:53,198 --> 00:03:57,627
security-minded or necessarily sophisticated.

83
00:03:57,627 --> 00:03:59,165
This is one of the earliest browsers

84
00:03:59,165 --> 00:04:02,231
that supported encryption: Netscape 2.

85
00:04:02,231 --> 00:04:06,396
Before the padlock icon, we had the key icon.

86
00:04:06,396 --> 00:04:09,329
It looked somewhat like a gun and a circle,

87
00:04:09,330 --> 00:04:12,924
but a complete key meant that you have a site

88
00:04:12,924 --> 00:04:15,264
that's fully validated HTTPS,

89
00:04:15,264 --> 00:04:19,264
and this broken key indicated that you were on HTTP

90
00:04:19,264 --> 00:04:22,297
or some sort of nonsecure protocol.

91
00:04:22,297 --> 00:04:24,561
This is acting as a negative indicator.

92
00:04:24,561 --> 00:04:28,395
Note that modern browsers no longer do this.

93
00:04:28,396 --> 00:04:32,132
Now, HTTPS had a very definite meaning

94
00:04:32,132 --> 00:04:33,858
in the early days of the Internet.

95
00:04:33,858 --> 00:04:36,396
Now, TLS is a point-to-point protocol.

96
00:04:36,396 --> 00:04:40,792
In this case, the points are the browser and the server.

97
00:04:40,792 --> 00:04:42,395
Typically, a web server

98
00:04:42,396 --> 00:04:46,033
was a physical machine owned by the website owner

99
00:04:46,033 --> 00:04:48,594
in some data center, somewhere physical.

100
00:04:48,594 --> 00:04:50,693
And data is protected from the browser

101
00:04:50,693 --> 00:04:52,957
through the local network, through the ISP,

102
00:04:52,957 --> 00:04:55,792
through the Internet exchange, through the backbone,

103
00:04:55,792 --> 00:04:59,924
all the way to the data center in which the server resides.

104
00:04:59,924 --> 00:05:02,066
Now, data is cryptographically protected

105
00:05:02,066 --> 00:05:03,792
from tampering and observation

106
00:05:03,792 --> 00:05:06,726
from any one of these intermediates.

107
00:05:06,726 --> 00:05:09,429
And in this model, it makes sense

108
00:05:09,429 --> 00:05:11,429
to represent this to the client

109
00:05:11,429 --> 00:05:16,066
where the server is under physical control of the website

110
00:05:16,066 --> 00:05:18,890
and the browser is the other end of the point.

111
00:05:18,891 --> 00:05:20,858
Businesses were confident enough with this model

112
00:05:20,858 --> 00:05:24,858
to enable secure logins and financial transactions

113
00:05:24,858 --> 00:05:28,561
and the ecommerce business flourished.

114
00:05:28,561 --> 00:05:32,890
Now, as user access to the Internet increased,

115
00:05:32,891 --> 00:05:35,495
protecting data on these edge networks,

116
00:05:35,495 --> 00:05:38,924
or the networks that people connected to the Internet from,

117
00:05:38,924 --> 00:05:40,825
became even more important.

118
00:05:40,825 --> 00:05:44,396
HTTPS protected you from any attackers

119
00:05:44,396 --> 00:05:48,693
that may be on shared wi-fi, mobile networks, shady ISPs,

120
00:05:48,693 --> 00:05:52,825
or any other means by which you access the Internet.

121
00:05:52,825 --> 00:05:55,825
HTTPS protects against all of these,

122
00:05:55,825 --> 00:05:59,330
providing confidentiality, authentication,

123
00:05:59,330 --> 00:06:01,527
and cryptographically strong integrity.

124
00:06:01,528 --> 00:06:04,264
Still, the majority of sites in the early days

125
00:06:04,264 --> 00:06:07,891
of the web still served plain HTTP.

126
00:06:07,891 --> 00:06:11,033
This had a lot to do with cost:

127
00:06:11,033 --> 00:06:14,264
computational, operational, and financial cost.

128
00:06:14,264 --> 00:06:16,924
Certificates were expensive to procure,

129
00:06:16,924 --> 00:06:19,825
difficult to deploy; and the code itself,

130
00:06:19,825 --> 00:06:22,495
to run the cryptographic algorithms, was slow.

131
00:06:22,495 --> 00:06:24,660
Now, over the years, several trends emerged

132
00:06:24,660 --> 00:06:27,594
to change what the service side of this equation looked like.

133
00:06:32,198 --> 00:06:34,330
You may all be familiar with this

134
00:06:34,330 --> 00:06:36,198
up and to the right graph.

135
00:06:36,198 --> 00:06:37,890
This is Moore's Law.

136
00:06:37,891 --> 00:06:39,462
For general-purpose computers,

137
00:06:39,462 --> 00:06:42,627
computing per dollar increases exponentially over time,

138
00:06:42,627 --> 00:06:45,792
something on the order of doubling every 18 months.

139
00:06:45,792 --> 00:06:48,792
However, with an investment in custom hardware,

140
00:06:48,792 --> 00:06:50,957
you can drastically reduce the cost

141
00:06:50,957 --> 00:06:55,099
of a specific algorithm in exchange for flexibility.

142
00:06:55,099 --> 00:06:57,759
This early demand for cryptography

143
00:06:57,759 --> 00:07:01,528
For the early days of the Internet

144
00:07:01,528 --> 00:07:05,099
inspired a new type of machine

145
00:07:05,099 --> 00:07:07,066
called the cryptographic load balancer.

146
00:07:07,066 --> 00:07:08,957
Using custom hardware,

147
00:07:08,957 --> 00:07:11,792
you could write cryptography that actually ran fast

148
00:07:11,792 --> 00:07:15,561
and was able to scale to the costs

149
00:07:15,561 --> 00:07:18,132
that were associated with these early websites.

150
00:07:18,132 --> 00:07:22,132
These appliances sold by companies like F5 and Barracuda

151
00:07:22,132 --> 00:07:25,000
proliferated among high-traffic sites,

152
00:07:25,000 --> 00:07:27,660
looking for cost savings and performance improvements,

153
00:07:27,660 --> 00:07:30,033
while implementing HTTPS.

154
00:07:30,033 --> 00:07:33,165
This technology created a subtle change in the way

155
00:07:33,165 --> 00:07:36,099
that TLS is managed on the server,

156
00:07:36,099 --> 00:07:38,396
taking the crypto out of the application

157
00:07:38,396 --> 00:07:41,825
and putting it into a server.

158
00:07:41,825 --> 00:07:45,627
Everything behind it had to be processed

159
00:07:45,627 --> 00:07:48,264
by a separate application.

160
00:07:48,264 --> 00:07:53,000
Now, this next hop, from where the TLS is terminated

161
00:07:53,000 --> 00:07:57,165
to the application, was usually sent over plain text,

162
00:07:57,165 --> 00:07:59,528
no encryption or security at all,

163
00:07:59,528 --> 00:08:02,231
and this is because you're in the same data center;

164
00:08:02,231 --> 00:08:04,561
you could connect a physical wire.

165
00:08:04,561 --> 00:08:07,032
Now, cryptographic accelerators help reduce

166
00:08:07,033 --> 00:08:09,033
the computational costs of crypto

167
00:08:09,033 --> 00:08:11,396
by introducing this custom hardware,

168
00:08:11,396 --> 00:08:13,792
but eventually, Moore's Law caught up,

169
00:08:13,792 --> 00:08:16,131
as well as hardware manufacturers.

170
00:08:16,132 --> 00:08:18,297
With the help of new cryptographic standards,

171
00:08:18,297 --> 00:08:22,759
such as ADS, that's no longer that new,

172
00:08:22,759 --> 00:08:27,891
these became integrated into our common, mainstream processors.

173
00:08:27,891 --> 00:08:31,495
So, including Intel's AESNI instructions

174
00:08:31,495 --> 00:08:33,495
and the equivalent on ARM devices,

175
00:08:33,495 --> 00:08:36,164
it is now cost-effective to do encryption

176
00:08:36,164 --> 00:08:38,857
in general-purpose hardware.

177
00:08:38,857 --> 00:08:41,659
Now, general-purpose hardware also became fast enough

178
00:08:41,659 --> 00:08:44,231
to create fully virtualized systems.

179
00:08:44,231 --> 00:08:47,495
Easy-to-provision virtual machines helped trigger

180
00:08:47,495 --> 00:08:50,165
a revolution in the way that web services are built.

181
00:08:50,165 --> 00:08:53,528
We call it the cloud, right?

182
00:08:53,528 --> 00:08:54,957
Now, many web services

183
00:08:54,957 --> 00:08:58,396
no longer live in dedicated data centers owned by the business.

184
00:08:58,396 --> 00:09:00,824
Instead, they're running on hardware operated

185
00:09:00,825 --> 00:09:02,165
by third parties.

186
00:09:02,165 --> 00:09:04,132
For example, this may not be the case anymore,

187
00:09:04,132 --> 00:09:08,231
but Instagram was built entirely on AWS.

188
00:09:08,231 --> 00:09:10,693
The cloud does not resemble a data center,

189
00:09:10,693 --> 00:09:12,660
in that it's not a building

190
00:09:12,660 --> 00:09:15,065
with walls and computers inside, and wires.

191
00:09:15,066 --> 00:09:18,264
It's an amorphous, flexible, and extensible set

192
00:09:18,264 --> 00:09:21,165
of computing entities that you can use.

193
00:09:21,165 --> 00:09:23,627
However, there's a saying that goes,

194
00:09:23,627 --> 00:09:27,593
there is no cloud, just other people's computers.

195
00:09:27,594 --> 00:09:29,396
This is true.

196
00:09:29,396 --> 00:09:31,132
Though a virtual machine necessarily

197
00:09:31,132 --> 00:09:33,098
runs on a physical machine,

198
00:09:33,099 --> 00:09:37,231
and virtual networking relies on the underlying network,

199
00:09:37,231 --> 00:09:40,858
cloud computers are connected to each other

200
00:09:40,858 --> 00:09:44,363
and to the broader network with standard networking equipment

201
00:09:44,363 --> 00:09:46,099
and standard protocols.

202
00:09:46,099 --> 00:09:49,033
These two trends of cheaper cryptography

203
00:09:49,033 --> 00:09:52,198
and moving to the cloud have fostered a natural evolution

204
00:09:52,198 --> 00:09:54,198
of the crypto accelerator market.

205
00:09:54,198 --> 00:09:57,627
Instead of placing this server end point for TLS

206
00:09:57,627 --> 00:10:00,726
in a hardware load balancer inside your data center,

207
00:10:00,726 --> 00:10:04,330
websites are moving to services, like CloudFlare, like others,

208
00:10:04,330 --> 00:10:07,561
that act as crypto accelerators in the cloud

209
00:10:07,561 --> 00:10:10,132
and they terminate TLS there.

210
00:10:10,132 --> 00:10:13,495
Let's look at a hypothetical modern web property.

211
00:10:17,000 --> 00:10:20,528
As you can see, it's made up of many, many different services.

212
00:10:20,528 --> 00:10:24,000
So, after the data gets past the TLS termination point,

213
00:10:24,000 --> 00:10:26,396
data is passed into the application.

214
00:10:26,396 --> 00:10:31,098
Now, this may consist of not just one web server,

215
00:10:31,099 --> 00:10:33,429
but a series of analytics services,

216
00:10:33,429 --> 00:10:36,329
worker queues, log managers, databases,

217
00:10:36,330 --> 00:10:39,099
virtual machines, and containers of many types,

218
00:10:39,099 --> 00:10:42,726
across different hosts operated by different entities.

219
00:10:42,726 --> 00:10:48,165
Data in each one of these arrows is not only passed as HTTPS,

220
00:10:48,165 --> 00:10:51,329
but they could be with remote procedure calls

221
00:10:51,330 --> 00:10:53,957
or other API requests.

222
00:10:53,957 --> 00:10:55,660
Now, this is a complicated service;

223
00:10:55,660 --> 00:10:57,891
this is a complicated web service.

224
00:10:57,891 --> 00:11:03,593
Even a simple personal website has these ramifications.

225
00:11:03,594 --> 00:11:08,099
Who here has a site on GitHub Pages, for example?

226
00:11:08,099 --> 00:11:09,726
I can see a few hands, yeah.

227
00:11:09,726 --> 00:11:14,462
So, you can have HTTPS on your GitHub page

228
00:11:14,462 --> 00:11:17,396
and it will show up in the browser with the lock icon,

229
00:11:17,396 --> 00:11:21,693
but it is, perhaps, using CloudFlare in front.

230
00:11:21,693 --> 00:11:23,429
CloudFlare will terminate it.

231
00:11:23,429 --> 00:11:27,759
GitHub uses Fastly as their next layer

232
00:11:27,759 --> 00:11:31,792
of crypto accelerator and then perhaps behind that, it's HTTP.

233
00:11:31,792 --> 00:11:35,462
There's no really good way to know, from your request

234
00:11:35,462 --> 00:11:37,924
connecting to your GitHub Pages account,

235
00:11:37,924 --> 00:11:42,363
what is happening to your data, beyond the first hop.

236
00:11:42,363 --> 00:11:45,561
Now, even if you're a big corporation

237
00:11:45,561 --> 00:11:47,462
and all your software is managed in-house,

238
00:11:47,462 --> 00:11:50,858
although on the cloud, geography can play a big role.

239
00:11:50,858 --> 00:11:54,791
For redundancy, many services use multiple data centers.

240
00:11:54,792 --> 00:11:58,330
Once data is decrypted, it's passed between services

241
00:11:58,330 --> 00:12:00,891
and databases, often over the Internet.

242
00:12:00,891 --> 00:12:03,065
To improve latency and performance,

243
00:12:03,066 --> 00:12:06,462
these termination points are moved geographically

244
00:12:06,462 --> 00:12:08,891
even closer and closer to the end user.

245
00:12:08,891 --> 00:12:12,759
We've heard this referred to as the edge network.

246
00:12:12,759 --> 00:12:15,000
So, requiring the server-to-server

247
00:12:15,000 --> 00:12:20,396
network communications to be encrypted and protected

248
00:12:20,396 --> 00:12:22,462
requires them to cover a lot more ground

249
00:12:22,462 --> 00:12:25,528
as they become geographically dispersed.

250
00:12:25,528 --> 00:12:27,528
Now, even Google used this model.

251
00:12:27,528 --> 00:12:29,759
People may remember this slide.

252
00:12:29,759 --> 00:12:31,594
Terminating encryption at a load balancer

253
00:12:31,594 --> 00:12:33,396
called the Google front end

254
00:12:33,396 --> 00:12:35,726
and leaving it unencrypted beyond.

255
00:12:35,726 --> 00:12:37,495
I'm told this has been fixed.

256
00:12:37,495 --> 00:12:39,924
I think, in a previous talk, it was mentioned this is fixed,

257
00:12:39,924 --> 00:12:42,363
but, in any case, the way services are built now

258
00:12:42,363 --> 00:12:44,627
cause data to go through a maze

259
00:12:44,627 --> 00:12:46,660
of geographically diverse services.

260
00:12:46,660 --> 00:12:49,000
There's no longer just a trusted load balancer

261
00:12:49,000 --> 00:12:52,924
on top of a server, just cloud services and application.

262
00:12:52,924 --> 00:12:57,000
So, securing this back end is a huge challenge

263
00:12:57,000 --> 00:12:59,924
and one that many companies are currently tackling.

264
00:12:59,924 --> 00:13:03,264
Brian from Netflix demonstrated yesterday

265
00:13:03,264 --> 00:13:07,165
that mutually authenticated TLS between services

266
00:13:07,165 --> 00:13:10,924
is something they're working on and they still haven't come

267
00:13:10,924 --> 00:13:13,792
to the finality of solving that solution

268
00:13:13,792 --> 00:13:16,132
or solving that problem.

269
00:13:16,132 --> 00:13:18,593
Expressing the immense complexity

270
00:13:18,594 --> 00:13:23,429
of this system in 2 bits of information,

271
00:13:23,429 --> 00:13:26,560
such as the lock, is impossible

272
00:13:26,561 --> 00:13:28,858
and probably the wrong thing to do,

273
00:13:28,858 --> 00:13:30,758
but, as a thought experiment,

274
00:13:30,759 --> 00:13:32,462
is there a way to imbed the structure

275
00:13:32,462 --> 00:13:37,330
of where data goes into HTTP or TLS itself?

276
00:13:37,330 --> 00:13:41,033
The answer is: maybe, but probably not.

277
00:13:41,033 --> 00:13:45,462
Some ideas are: we could try to tag every server

278
00:13:45,462 --> 00:13:47,330
that a request is sent through.

279
00:13:47,330 --> 00:13:50,330
We can imagine imbedding this identity information

280
00:13:50,330 --> 00:13:53,924
into the request over each leg of the trip.

281
00:13:53,924 --> 00:13:56,462
There's a header that's standardized in HTTP,

282
00:13:56,462 --> 00:13:59,198
called VIA, that is supposed to be used by proxies,

283
00:13:59,198 --> 00:14:02,462
but it's not universally used and there's nothing stopping

284
00:14:02,462 --> 00:14:05,033
any intermediate proxies or intermediate services

285
00:14:05,033 --> 00:14:09,330
from forwarding data unencrypted or adding a header,

286
00:14:09,330 --> 00:14:13,660
using some sort of weak encryption along the way.

287
00:14:13,660 --> 00:14:16,759
How do you know that any services past

288
00:14:16,759 --> 00:14:19,660
where your TLS is terminated aren't transmitting the data

289
00:14:19,660 --> 00:14:21,824
unencrypted, somewhere along the way?

290
00:14:21,825 --> 00:14:24,462
There was a proposal in a recent paper

291
00:14:24,462 --> 00:14:29,825
on HTTPS and CDNs that involved DNSSEC and DANE

292
00:14:29,825 --> 00:14:32,363
and some complicated delegation logic.

293
00:14:32,363 --> 00:14:34,033
But it failed to provide a way

294
00:14:34,033 --> 00:14:36,891
to assure that data hasn't been modified,

295
00:14:36,891 --> 00:14:41,560
other than transferred through an encrypted tunnel.

296
00:14:41,561 --> 00:14:46,231
Another proposal is to digitally sign data inside HTML.

297
00:14:46,231 --> 00:14:49,660
This moves your data protection problem

298
00:14:49,660 --> 00:14:51,693
to the next layer up.

299
00:14:51,693 --> 00:14:54,264
TLS works on layer six; you're just providing

300
00:14:54,264 --> 00:15:00,429
a layer-seven solution to the same problem.

301
00:15:00,429 --> 00:15:04,396
The back end is simply too complex to be represented

302
00:15:04,396 --> 00:15:08,759
and presented to end users in a comprehensible way,

303
00:15:08,759 --> 00:15:14,396
but that doesn't mean that we're down the river, right?

304
00:15:14,396 --> 00:15:16,560
The financial and operational reasons

305
00:15:16,561 --> 00:15:19,759
to not do HTTPS have mostly been eradicated.

306
00:15:19,759 --> 00:15:22,495
Universal SSL, Let's Encrypt,

307
00:15:22,495 --> 00:15:24,891
and even Start SSL's free certificates

308
00:15:24,891 --> 00:15:30,296
has done a lot to make HTTPS adoption simple,

309
00:15:30,297 --> 00:15:35,462
cost-effective, and operationally easy to do.

310
00:15:35,462 --> 00:15:37,759
AESNI inside Intel processors

311
00:15:37,759 --> 00:15:40,627
has also made it computationally free.

312
00:15:40,627 --> 00:15:43,165
We're on our way to a web that supports HTTPS

313
00:15:43,165 --> 00:15:47,726
by default everywhere, however, as I described,

314
00:15:47,726 --> 00:15:50,264
the Netscape-era client server model

315
00:15:50,264 --> 00:15:52,924
no longer applies for most web services,

316
00:15:52,924 --> 00:15:55,759
so, why do we use the same security indicators

317
00:15:55,759 --> 00:16:00,165
in the browser as we did in 1996?

318
00:16:00,165 --> 00:16:02,726
Well, it's clear that HTTPS

319
00:16:02,726 --> 00:16:05,264
is a very important part of web security.

320
00:16:05,264 --> 00:16:08,726
Attackers on the local network are in ever-present danger

321
00:16:08,726 --> 00:16:11,231
and the majority of man- in-the-middle-style attacks

322
00:16:11,231 --> 00:16:15,858
that are described happen on the local network.

323
00:16:15,858 --> 00:16:21,231
But one has to ask, "Why is HTTPS,

324
00:16:21,231 --> 00:16:23,231
which is not equivalent to data security,

325
00:16:23,231 --> 00:16:26,561
elevated to the status of a browser indicator at all?"

326
00:16:29,726 --> 00:16:33,462
If HTTPS is not definitively secure,

327
00:16:33,462 --> 00:16:38,363
HTTP is definitely insecure.

328
00:16:38,363 --> 00:16:40,363
A more reasonable approach is to go back

329
00:16:40,363 --> 00:16:42,198
to one of the ideas from Netscape,

330
00:16:42,198 --> 00:16:45,957
which is to use a negative security indicator for HTTP.

331
00:16:45,957 --> 00:16:49,693
Excuses to not encrypt sites are mostly gone

332
00:16:49,693 --> 00:16:52,462
and sites will follow.

333
00:16:52,462 --> 00:16:57,726
Now, browser indicators are moving this way.

334
00:16:57,726 --> 00:17:00,726
In fact, they're moving away from presenting HTTP

335
00:17:00,726 --> 00:17:02,198
as just neutral

336
00:17:02,198 --> 00:17:06,165
and instead turning HTTP into just another security warning.

337
00:17:06,165 --> 00:17:09,000
There's a Chrome setting -- I turned it on for this diagram --

338
00:17:09,000 --> 00:17:11,560
to mark HTTP traffic as insecure.

339
00:17:11,560 --> 00:17:14,924
There's a small x on the lock right there.

340
00:17:14,924 --> 00:17:17,528
In Firefox, there was a recent change that,

341
00:17:17,528 --> 00:17:21,858
if there's a password submission form that is over HTTP,

342
00:17:21,858 --> 00:17:25,165
you're gonna get the same sort of negative security indicator.

343
00:17:25,165 --> 00:17:28,363
This idea is getting traction and it's spreading.

344
00:17:31,429 --> 00:17:35,165
But people have been taught to look for the padlock for years.

345
00:17:35,165 --> 00:17:39,495
Do we expect people to unlearn this behavior?

346
00:17:39,495 --> 00:17:41,858
Well, over and over, it's been shown that,

347
00:17:41,858 --> 00:17:44,264
if a positive security indicator is missing,

348
00:17:44,264 --> 00:17:47,792
most users will not notice.

349
00:17:47,792 --> 00:17:50,726
This is true for the padlock, as it is for bank websites

350
00:17:50,726 --> 00:17:53,264
that show you an authentication image.

351
00:17:53,264 --> 00:17:56,099
If this special image doesn't show up on a phishing site,

352
00:17:56,099 --> 00:17:59,131
most people won't notice and will click through.

353
00:17:59,132 --> 00:18:00,561
In the seminal work

354
00:18:00,561 --> 00:18:01,824
"The Emperor's New Security Indicators,"

355
00:18:01,825 --> 00:18:03,561
given a missing padlock,

356
00:18:03,561 --> 00:18:08,792
92% of informed users entered their passwords.

357
00:18:08,792 --> 00:18:12,858
So, moving to a negative- security-indicator world,

358
00:18:12,858 --> 00:18:15,330
it's a risky proposition, psychologically.

359
00:18:15,330 --> 00:18:18,956
Today in 2016, most of the web is not encrypted.

360
00:18:18,957 --> 00:18:20,693
The last thing that you want to do is

361
00:18:20,693 --> 00:18:23,924
to train people to ignore security indicators.

362
00:18:23,924 --> 00:18:26,561
Warning fatigue is a real issue,

363
00:18:26,561 --> 00:18:29,659
as users of Windows Vista can attest to.

364
00:18:29,660 --> 00:18:31,924
However, we're fast approaching the tipping point on the web

365
00:18:31,924 --> 00:18:35,594
where most sites are HTTPS by default.

366
00:18:35,594 --> 00:18:38,264
As a website owner, you should prepare for this change

367
00:18:38,264 --> 00:18:43,231
by enabling HTTPS and automating the renewal of certificates

368
00:18:43,231 --> 00:18:47,891
to avoid the expired- certificate problem.

369
00:18:47,891 --> 00:18:50,561
And, as an end user, you should expect this change

370
00:18:50,561 --> 00:18:54,561
to be happening in the coming months, not years.

371
00:18:54,561 --> 00:18:56,956
After negative security indicators for HTTP

372
00:18:56,957 --> 00:19:00,099
are introduced, a broken-lock icon on a browser

373
00:19:00,099 --> 00:19:04,000
will no longer cause the cognitive dissonance

374
00:19:04,000 --> 00:19:08,891
that is associated with a neutral indicator for HTTP.

375
00:19:08,891 --> 00:19:11,693
Currently, a site with an expired certificate

376
00:19:11,693 --> 00:19:15,693
appears more threatening than a purely unencrypted site.

377
00:19:15,693 --> 00:19:18,000
Instead of meaning your clock is wrong

378
00:19:18,000 --> 00:19:20,561
or the website misconfigured their SSL certificate

379
00:19:20,561 --> 00:19:23,495
or the rare sliver of a chance that you're subject

380
00:19:23,495 --> 00:19:26,165
to a man-in-the-middle attack, the majority of times,

381
00:19:26,165 --> 00:19:30,825
HTTPS warnings will mean the same thing as an open padlock:

382
00:19:30,825 --> 00:19:32,462
"This site is not secure.

383
00:19:32,462 --> 00:19:34,825
Messages can be read by passive eavesdroppers

384
00:19:34,825 --> 00:19:37,660
and modified by active attackers."

385
00:19:37,660 --> 00:19:41,132
Additionally, I think the closed-lock icon

386
00:19:41,132 --> 00:19:43,825
should be deemphasized.

387
00:19:43,825 --> 00:19:45,924
It's important for websites, web services,

388
00:19:45,924 --> 00:19:48,891
and mobile application back ends to secure themselves.

389
00:19:48,891 --> 00:19:51,099
Tapped wires and compromised clouds

390
00:19:51,099 --> 00:19:54,066
should be in every corporation's threat model.

391
00:19:54,066 --> 00:19:57,165
The application security measures,

392
00:19:57,165 --> 00:20:00,891
such as requiring all data to be transferred between applications

393
00:20:00,891 --> 00:20:03,660
to be encrypted are quite in vogue right now,

394
00:20:03,660 --> 00:20:05,660
as they should be, however,

395
00:20:05,660 --> 00:20:07,792
trusting the network is increasingly difficult

396
00:20:07,792 --> 00:20:10,131
in a virtualized and containerized world.

397
00:20:10,132 --> 00:20:12,627
This is all very important work,

398
00:20:12,627 --> 00:20:15,000
however, this is not the type of information

399
00:20:15,000 --> 00:20:18,165
that we should be expressing through a 2-bit indicator.

400
00:20:18,165 --> 00:20:21,231
HTTPS is great and everyone should use it,

401
00:20:21,231 --> 00:20:25,891
but it should be a matter of course, not a badge of honor.

402
00:20:25,891 --> 00:20:27,594
So, that's it.

403
00:20:27,594 --> 00:20:30,066
[ Applause ]

404
00:20:30,066 --> 00:20:35,132
♪♪

405
00:20:35,132 --> 00:20:34,132


