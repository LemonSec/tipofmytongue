1
00:00:00,198 --> 00:00:00,660


2
00:00:00,660 --> 00:00:05,000
♪♪

3
00:00:05,000 --> 00:00:08,231
[ Applause ]

4
00:00:11,099 --> 00:00:12,924
HOTZ: Hi.

5
00:00:12,924 --> 00:00:14,363
If I asked everyone
to get up and stretch,

6
00:00:14,363 --> 00:00:16,462
how many people would actually
get up and stretch?

7
00:00:16,462 --> 00:00:18,264
All right. Let's do it.
Let's do it.

8
00:00:18,264 --> 00:00:19,660
You've been sitting here
for an hour and a half.

9
00:00:19,660 --> 00:00:21,264
There's four talks.
All right.

10
00:00:21,264 --> 00:00:22,264
This is great. This is great.
You know,

11
00:00:22,264 --> 00:00:23,726
there's two kinds
of conferences:

12
00:00:23,726 --> 00:00:26,396
there's table conferences
and there's chair conferences.

13
00:00:26,396 --> 00:00:29,132
You see how y'all have tables in
front of you with your laptops?

14
00:00:29,132 --> 00:00:30,957
Professional conferences
have tables

15
00:00:30,957 --> 00:00:32,792
because you guys
all have real work to do.

16
00:00:32,792 --> 00:00:35,726
This talk is a bit more
of a chair conference variety,

17
00:00:35,726 --> 00:00:37,726
but hopefully you'll
enjoy it anyway.

18
00:00:37,726 --> 00:00:39,891
[ Laughs ]

19
00:00:39,891 --> 00:00:42,263
All right. Have a seat.
Have a seat. Have a seat.

20
00:00:42,264 --> 00:00:45,528
I'll stretch, too, you know.
All right.

21
00:00:45,528 --> 00:00:46,792
So, yeah,
I'm here to talk to you today

22
00:00:46,792 --> 00:00:49,165
about timeless debugging
and a bit more.

23
00:00:49,165 --> 00:00:52,726
So I play a character
named GeoHot on the Internet.

24
00:00:52,726 --> 00:00:55,198
I was the first person to
unlock the iPhone when I was 17.

25
00:00:55,198 --> 00:00:57,132
Those lights are really bright.

26
00:00:57,132 --> 00:00:59,660
I made jailbreak software
called blackra1n

27
00:00:59,660 --> 00:01:01,824
that was used
by 21 million people.

28
00:01:01,825 --> 00:01:03,231
It was great.
You plug in your phone,

29
00:01:03,231 --> 00:01:04,462
you click the
"make it rain" button,

30
00:01:04,462 --> 00:01:06,264
and you could jailbreak
your phone.

31
00:01:06,264 --> 00:01:10,726
I also got sued by Sony
for hacking the PlayStation 3.

32
00:01:10,726 --> 00:01:12,528
Why do I do this?

33
00:01:12,528 --> 00:01:14,330
Why do this stuff?

34
00:01:14,330 --> 00:01:16,923
Well, companies
spend millions of dollars

35
00:01:16,924 --> 00:01:20,000
to make really cool puzzles
for me to solve.

36
00:01:20,000 --> 00:01:21,231
It's true.
That's how I see it.

37
00:01:21,231 --> 00:01:23,594
[ Laughter ]

38
00:01:23,594 --> 00:01:25,824
So I did the GeoHot stuff
for a while,

39
00:01:25,825 --> 00:01:27,198
I got sued by Sony,
and then I was like

40
00:01:27,198 --> 00:01:28,527
"You know what?
That's getting played out."

41
00:01:28,528 --> 00:01:30,627
I kinda think of myself
as a performance artist.

42
00:01:30,627 --> 00:01:31,890
You know, that's played out.

43
00:01:31,891 --> 00:01:33,561
You got to a stand-up comic,
you hear the same,

44
00:01:33,561 --> 00:01:35,396
you know, shtick again
and you're like,

45
00:01:35,396 --> 00:01:36,957
"This is old stuff," right?
So you need new stuff.

46
00:01:36,957 --> 00:01:38,330
tomcr00se.

47
00:01:38,330 --> 00:01:40,561
I played on the PPP
for a while.

48
00:01:40,561 --> 00:01:43,198
I was on the team
for both DEF CON victories

49
00:01:43,198 --> 00:01:44,594
and one DEF CON second place.

50
00:01:44,594 --> 00:01:46,231
I showed up a day late.

51
00:01:46,231 --> 00:01:47,627
It's true.
[Laughter]

52
00:01:47,627 --> 00:01:51,461
So I was at Carnegie Mellon,
I was playing these things,

53
00:01:51,462 --> 00:01:54,627
and then I'm like, "How much
harder are real programs?"

54
00:01:54,627 --> 00:01:57,164
So, about 2 weeks
before Pwn2Own,

55
00:01:57,165 --> 00:02:01,693
in, I think it was, 2013,
I took a look at Adobe Reader.

56
00:02:01,693 --> 00:02:05,660
They were offering $70,000
for Adobe Reader.

57
00:02:05,660 --> 00:02:09,164
I'm like, "Come on.
How hard could this be, right?"

58
00:02:09,164 --> 00:02:11,132
And it was easy.
It was supereasy

59
00:02:11,132 --> 00:02:12,792
to break into Adobe Reader,

60
00:02:12,792 --> 00:02:16,066
but it turns out
Adobe Reader now has a sandbox.

61
00:02:16,066 --> 00:02:18,330
And Adobe didn't
write the sandbox.

62
00:02:18,330 --> 00:02:20,000
Google wrote the sandbox.

63
00:02:20,000 --> 00:02:21,429
Very good sandbox.

64
00:02:21,429 --> 00:02:23,297
But, you know, I really
like winning.

65
00:02:23,297 --> 00:02:26,363
I really like winning.
I'm a big fan.

66
00:02:26,363 --> 00:02:29,660
And I wanted to win,
so I kept --

67
00:02:29,660 --> 00:02:31,528
My time isn't ticking.

68
00:02:31,528 --> 00:02:33,858
Ah, whatever.

69
00:02:33,858 --> 00:02:36,627
So, I kept going at it
and I looked at --

70
00:02:36,627 --> 00:02:39,792
Adobe, fortunately, added
API calls to the sandbox,

71
00:02:39,792 --> 00:02:41,627
so I figured that would be
a good place to look

72
00:02:41,627 --> 00:02:43,726
and, sure enough, there was
this very cute handle,

73
00:02:43,726 --> 00:02:47,495
doublefree, that I could
leverage into breaking out

74
00:02:47,495 --> 00:02:50,528
of the underprivileged process
into the high-privileged process

75
00:02:50,528 --> 00:02:53,594
and won $70,000
and an Acer laptop.

76
00:02:53,594 --> 00:02:55,263
The next year's laptop
was much better.

77
00:02:55,264 --> 00:02:57,066
[ Laughter ]

78
00:02:57,066 --> 00:03:00,528
2014, I was like, "Let's just
take this by storm"

79
00:03:00,528 --> 00:03:04,197
and I did a full stack zero-day
for the Google Chromebook,

80
00:03:04,198 --> 00:03:07,000
I believe the first person
to achieve a persistent root

81
00:03:07,000 --> 00:03:08,561
on the Google Chromebook.

82
00:03:08,561 --> 00:03:11,594
And I got done two days early.
Adobe was down to the wire.

83
00:03:11,594 --> 00:03:13,099
I was in the hotel room
the night before

84
00:03:13,099 --> 00:03:14,528
and I'd never written
Windows shellcode

85
00:03:14,528 --> 00:03:16,297
in my life before that night.
It's true.

86
00:03:16,297 --> 00:03:19,924
And I'm here and I'm like "Wait.
What? I don't make CIS calls?

87
00:03:19,924 --> 00:03:21,627
I have to write something
to traverse this like little

88
00:03:21,627 --> 00:03:23,957
like PEB table and figure
out where my...?"

89
00:03:23,957 --> 00:03:25,495
It was insane.

90
00:03:25,495 --> 00:03:27,594
You know, and I was told,
the next day that I could've --

91
00:03:27,594 --> 00:03:30,660
my shellcode actually
wrote a DLL out to the system

92
00:03:30,660 --> 00:03:32,165
and then load-libraried it.

93
00:03:32,165 --> 00:03:34,396
I could've just load-libraried
from a network share, you know?

94
00:03:34,396 --> 00:03:35,791
Would've made
my shellcode a lot shorter,

95
00:03:35,792 --> 00:03:39,528
but it was 4:00 in the morning
in a hotel room in Canada.

96
00:03:39,528 --> 00:03:41,495
But, yeah.
So this was the next year.

97
00:03:41,495 --> 00:03:44,165
I got done early.
I had a beautiful --

98
00:03:44,165 --> 00:03:46,660
Actually, Google patched it
2 days before Pwnium

99
00:03:46,660 --> 00:03:48,000
and I was horrified.

100
00:03:48,000 --> 00:03:49,561
I didn't realize this
till the morning of.

101
00:03:49,561 --> 00:03:51,924
I got there. It turned out
the exploit still worked,

102
00:03:51,924 --> 00:03:56,957
but I had a few days extra, so I
figured, "Why not try Firefox?"

103
00:03:56,957 --> 00:03:59,363
Firefox, at least circa 2014,

104
00:03:59,363 --> 00:04:01,693
was about on par
with a hard CTF problem.

105
00:04:01,693 --> 00:04:03,396
It took me 24 hours.

106
00:04:03,396 --> 00:04:05,692
24 hours,
full-zero day in Firefox.

107
00:04:05,693 --> 00:04:06,726
A lot of people use
this browser.

108
00:04:06,726 --> 00:04:08,330
Don't use it.
[Laughter]

109
00:04:08,330 --> 00:04:09,924
Use Chrome.
Chrome is quite good.

110
00:04:09,924 --> 00:04:11,363
Even though I broke Chrome,
you get paid

111
00:04:11,363 --> 00:04:13,495
a lot more money for Chrome.
Chrome is quite good.

112
00:04:13,495 --> 00:04:14,957
[ Laughter ]

113
00:04:14,957 --> 00:04:17,627
So let's get to tools, right?
I'm here to talk about tools.

114
00:04:17,627 --> 00:04:21,231
That's enough about me.
GDB is terrible.

115
00:04:21,231 --> 00:04:24,759
We've been using the same
paradigm of debugging for years

116
00:04:24,759 --> 00:04:27,000
and, you know, I think GDB was
written in what, the '70s?

117
00:04:27,000 --> 00:04:28,726
It's the same paradigm
of debugging,

118
00:04:28,726 --> 00:04:31,000
for years and years and years.

119
00:04:31,000 --> 00:04:32,726
How can we do it better?

120
00:04:32,726 --> 00:04:34,099
For example, let's say
we wanna do

121
00:04:34,099 --> 00:04:35,792
root cause analysis
on something, right?

122
00:04:35,792 --> 00:04:38,330
We have a proof of concept
that can reproduce the crash.

123
00:04:38,330 --> 00:04:39,561
We wanna figure out
why it crashed

124
00:04:39,561 --> 00:04:41,330
and we wanna
do this really quickly.

125
00:04:41,330 --> 00:04:43,000
You know, you're getting in
tons of crash reports.

126
00:04:43,000 --> 00:04:46,066
You wanna see what is this.

127
00:04:46,066 --> 00:04:50,066
GDB gives you a backtrace
and it's kind of okay,

128
00:04:50,066 --> 00:04:52,296
but, usually, you'll end up
having to run the program

129
00:04:52,297 --> 00:04:55,891
like 10 times because you forgot
to set a breakpoint somewhere.

130
00:04:55,891 --> 00:04:59,495
Once you pass a point in GDB,
there's no way to go back.

131
00:04:59,495 --> 00:05:01,264
They're trying rewind stuff,

132
00:05:01,264 --> 00:05:04,198
but even rewind stuff isn't
what I'm talking about here.

133
00:05:04,198 --> 00:05:07,594
I'm here to talk
about timeless debugging.

134
00:05:07,594 --> 00:05:11,330
GDB?
Very linear in time.

135
00:05:11,330 --> 00:05:12,825
Think of the first time
you used IDA.

136
00:05:12,825 --> 00:05:14,296
How many people here have
used IDA?

137
00:05:14,297 --> 00:05:16,495
All right. That's good.
That's good.

138
00:05:16,495 --> 00:05:19,231
A lot of people used IDA. Think
about what came before IDA.

139
00:05:19,231 --> 00:05:20,330
There was objdump, right?

140
00:05:20,330 --> 00:05:21,594
You literally used
to take objdump,

141
00:05:21,594 --> 00:05:23,429
maybe you would cut out
the basic blocks,

142
00:05:23,429 --> 00:05:25,032
you'd get a big piece
of corkboard,

143
00:05:25,033 --> 00:05:27,264
you'd pin 'em up, you know?
Maybe draw the lines,

144
00:05:27,264 --> 00:05:29,099
different-color thread,
if you're really getting fancy,

145
00:05:29,099 --> 00:05:31,495
for whether the jump
has followed or not, right?

146
00:05:31,495 --> 00:05:33,627
And so IDA kinda
made that corkboard for you.

147
00:05:33,627 --> 00:05:35,693
It's actually quite a nice tool.

148
00:05:35,693 --> 00:05:40,231
But there's been no equal
advance in dynamic tools.

149
00:05:40,231 --> 00:05:41,792
Now, fine.
If you're developing

150
00:05:41,792 --> 00:05:43,726
on the latest dot-net
Objective-C Swift,

151
00:05:43,726 --> 00:05:45,891
I'm sure you have a very nice
debugging environment.

152
00:05:45,891 --> 00:05:48,066
But I mean actually
for debugging binaries,

153
00:05:48,066 --> 00:05:51,066
which is what
a lot of stuff still is.

154
00:05:51,066 --> 00:05:53,626
So in the theme of, you know,
this being a TED Talk,

155
00:05:53,627 --> 00:05:57,528
now think of what is possible.
[Laughter]

156
00:05:57,528 --> 00:06:01,099
So, 2014, after my Pwnium win,

157
00:06:01,099 --> 00:06:05,825
I was invited to come be
Project Zero's first intern.

158
00:06:05,825 --> 00:06:07,396
So I was an intern
on Project Zero.

159
00:06:07,396 --> 00:06:09,858
Really a great team, really
doing great things in security.

160
00:06:09,858 --> 00:06:11,693
If y'all haven't seen it,
check out the blog.

161
00:06:11,693 --> 00:06:13,231
I still read it.
It's one of the last things

162
00:06:13,231 --> 00:06:15,363
I still do,
kinda security-related.

163
00:06:15,363 --> 00:06:16,858
But I was on Project Zero

164
00:06:16,858 --> 00:06:18,330
and they gave me free reign
for a summer

165
00:06:18,330 --> 00:06:22,395
to come and develop something
that was, hopefully, better.

166
00:06:22,396 --> 00:06:26,000
So here's the paradigm:

167
00:06:26,000 --> 00:06:27,693
Version Control.

168
00:06:27,693 --> 00:06:29,627
I assume everyone
knows what Version Control is.

169
00:06:29,627 --> 00:06:32,627
You know,
if you have like --

170
00:06:32,627 --> 00:06:35,297
It's a layer kind of that sits
on top of a file system, right?

171
00:06:35,297 --> 00:06:36,759
And it lets you,

172
00:06:36,759 --> 00:06:39,693
for each file in a certain
Version Control directory,

173
00:06:39,693 --> 00:06:42,198
see the entire history
of that file,

174
00:06:42,198 --> 00:06:44,758
see the order
in which changes were made,

175
00:06:44,759 --> 00:06:47,297
see who is to blame for,
you know,

176
00:06:47,297 --> 00:06:49,033
one of the lines
in the file, right?

177
00:06:49,033 --> 00:06:52,429
So it's a very developed
set of tools.

178
00:06:52,429 --> 00:06:54,594
What if we could make
the same tool,

179
00:06:54,594 --> 00:06:59,759
but, instead of for files,
for like memory and registers?

180
00:06:59,759 --> 00:07:03,066
Every instruction is kinda
like a commit, right?

181
00:07:03,066 --> 00:07:04,693
The instruction's gonna
make some changes.

182
00:07:04,693 --> 00:07:07,561
Like, say you have
"move R0, 1".

183
00:07:07,561 --> 00:07:10,659
Well, it's storing,
into the R0 file,

184
00:07:10,660 --> 00:07:12,561
the number 1
and that's like a commit

185
00:07:12,561 --> 00:07:14,659
and it happens
at a certain time.

186
00:07:14,660 --> 00:07:17,858
So you take this
and you run with this idea.

187
00:07:17,858 --> 00:07:20,099
How can you make a nice...?

188
00:07:20,099 --> 00:07:21,693
It's really a UI.

189
00:07:21,693 --> 00:07:24,231
It's a UI to explore traces.

190
00:07:24,231 --> 00:07:27,363
But, if you do this
powerfully enough,

191
00:07:27,363 --> 00:07:30,231
instead of that GDB cycle,
where you run over and over

192
00:07:30,231 --> 00:07:33,099
and over again the same program
because you missed

193
00:07:33,099 --> 00:07:35,792
setting a breakpoint,
it's completely timeless.

194
00:07:35,792 --> 00:07:38,429
So this is my tool,
called QIRA. ["keeruh"]

195
00:07:38,429 --> 00:07:45,726
You can see a program trace
on the upper left.

196
00:07:45,726 --> 00:07:48,165
You can see the vertical
timeline all the way

197
00:07:48,165 --> 00:07:51,066
on the left; that's like a trace
through the program.

198
00:07:51,066 --> 00:07:55,594
Those yellow lines are times
when that selected data address,

199
00:07:55,594 --> 00:07:57,659
if you see in the hex dump
down there,

200
00:07:57,660 --> 00:08:01,792
was clicked on, was written to.

201
00:08:01,792 --> 00:08:05,957
We have IDA-like graph view.

202
00:08:05,957 --> 00:08:07,296
And we have the registers
right there.

203
00:08:07,297 --> 00:08:09,462
So it looks pretty much
like a traditional debugger.

204
00:08:09,462 --> 00:08:10,890
But wait'll you see the demo.

205
00:08:10,891 --> 00:08:14,924
Things like this.
Where was EIP, right?

206
00:08:14,924 --> 00:08:18,527
If you're in GDB and you know
that EIP is on the RET,

207
00:08:18,528 --> 00:08:21,066
you have no idea which fork
it went, all right?

208
00:08:21,066 --> 00:08:22,857
I mean, this is the simplest
thing. It should be recording

209
00:08:22,858 --> 00:08:25,066
"Oh, the last 10 instructions
were this."

210
00:08:25,066 --> 00:08:27,131
We actually record the entire
history of the program,

211
00:08:27,132 --> 00:08:29,066
but, yeah,
follow that trace, right?

212
00:08:29,066 --> 00:08:32,693
Type information: you can get
so much type information

213
00:08:32,693 --> 00:08:35,231
at runtime that there's no way
you could get statically.

214
00:08:35,231 --> 00:08:36,792
Like, there's actually
no way sometimes

215
00:08:36,792 --> 00:08:38,957
to tell what the type
of something is statically.

216
00:08:38,957 --> 00:08:42,759
Dynamically: Well, you know what
function allocated it, right?

217
00:08:42,759 --> 00:08:44,330
And then you can detect,
you know,

218
00:08:44,330 --> 00:08:47,693
you can visually see things
like use after free so quickly.

219
00:08:47,693 --> 00:08:50,726
So, let's try this.

220
00:08:50,726 --> 00:08:52,561
I got a demo.

221
00:08:52,561 --> 00:08:54,759
Probably not gonna work,
but we'll see.

222
00:08:54,759 --> 00:08:56,462
Okay. So here we are.

223
00:08:56,462 --> 00:08:59,924
We have a tiny,
little program here, right?

224
00:08:59,924 --> 00:09:02,098
So, it's like a little crackme.

225
00:09:02,099 --> 00:09:06,264
If you wanted to, you know,
we can run it here.

226
00:09:06,264 --> 00:09:07,660
Ah.

227
00:09:07,660 --> 00:09:09,891
Whoops. Demo 1.

228
00:09:09,891 --> 00:09:11,693
So number, you know, whatever.

229
00:09:11,693 --> 00:09:14,891
So you could do this with GDB.

230
00:09:14,891 --> 00:09:18,132
You could set a breakpoint
on the "If answer equals guest,"

231
00:09:18,132 --> 00:09:21,000
figure out what the answer
should be, and do it like that;

232
00:09:21,000 --> 00:09:22,825
or you can use QIRA.

233
00:09:22,825 --> 00:09:24,660
So I'm gonna start up QIRA
with demo 1.

234
00:09:24,660 --> 00:09:27,495
The cool thing about QIRA
is it takes the exact --

235
00:09:27,495 --> 00:09:30,099
It's the same API
as like strace or GDB.

236
00:09:30,099 --> 00:09:32,264
I can just run QIRA /bin/ls.

237
00:09:32,264 --> 00:09:34,495
The whole UI
lives in a web server,

238
00:09:34,495 --> 00:09:37,066
so you just connect locally
to port 3002.

239
00:09:37,066 --> 00:09:40,627
And this is a full trace
of that run of ls.

240
00:09:40,627 --> 00:09:42,429
So if I click here,
all these red lines.

241
00:09:42,429 --> 00:09:44,560
Like so this instruction
at this address

242
00:09:44,561 --> 00:09:46,957
was hit every time
you see a red line there.

243
00:09:46,957 --> 00:09:49,066
I can navigate between them,
right?

244
00:09:49,066 --> 00:09:50,330
Works fine for big binaries,

245
00:09:50,330 --> 00:09:51,825
nut let's try it in a little
something smaller.

246
00:09:51,825 --> 00:09:55,363
So let's go back
to our thing here, right?

247
00:09:55,363 --> 00:09:57,627
This is going to run it.
It's gonna bind it to a socket,

248
00:09:57,627 --> 00:09:59,924
so, every time
I connect to port 4000,

249
00:09:59,924 --> 00:10:01,528
I'll get an instance
of this demo.

250
00:10:01,528 --> 00:10:04,429
So I'll go here.
I'll Netcat in port 4000.

251
00:10:06,363 --> 00:10:08,957
And number?
Let's just say 123.

252
00:10:08,957 --> 00:10:10,561
Nope. 123
is the wrong answer, right?

253
00:10:10,561 --> 00:10:12,891
So, in a debugger,
you've already lost

254
00:10:12,891 --> 00:10:14,396
your chance to see anything.

255
00:10:14,396 --> 00:10:15,924
The program's
already terminated.

256
00:10:15,924 --> 00:10:18,329
But, fortunately,
we were running in QIRA.

257
00:10:18,330 --> 00:10:23,495
So let's go here, back here,
and let's look at main here.

258
00:10:23,495 --> 00:10:24,693
All right, so here you go.

259
00:10:24,693 --> 00:10:26,726
You have the control flow
of that program.

260
00:10:26,726 --> 00:10:27,924
Is that visible?

261
00:10:31,429 --> 00:10:34,065
You have the control flow
of that program here.

262
00:10:34,066 --> 00:10:36,561
So, if we click down here,

263
00:10:36,561 --> 00:10:40,396
you can see that the code
execution went that way.

264
00:10:40,396 --> 00:10:43,791
There's the word nope and
there's the word winner, right?

265
00:10:43,792 --> 00:10:47,627
So here's that compare.
I can click on that compare.

266
00:10:47,627 --> 00:10:52,627
I can see right here that 7B
was the value in EAX.

267
00:10:52,627 --> 00:10:56,462
Can you guys see this?

268
00:10:56,462 --> 00:10:57,825
Try to zoom in.

269
00:10:57,825 --> 00:11:02,264
So the value here, 7B,
was that 123 that I typed in.

270
00:11:02,264 --> 00:11:04,231
You can see it in EAX.

271
00:11:04,231 --> 00:11:08,231
And it looks like it also did
a load from this stack address,

272
00:11:08,231 --> 00:11:10,363
which we assume
was the correct answer,

273
00:11:10,363 --> 00:11:12,495
this hex 500 here, right?

274
00:11:12,495 --> 00:11:15,000
So we've hit
that instruction one time

275
00:11:15,000 --> 00:11:16,759
because there's only one line.

276
00:11:16,759 --> 00:11:20,528
We can even go back and see
where did that 500 come from.

277
00:11:20,528 --> 00:11:22,594
This is the thing
that actually stored it.

278
00:11:22,594 --> 00:11:25,363
So it stores hex 500
right up here

279
00:11:25,363 --> 00:11:27,693
and, sure enough,
hex 500 was in EAX here.

280
00:11:27,693 --> 00:11:30,891
It's an absolutely
timeless debugger.

281
00:11:30,891 --> 00:11:33,759
I can click here.
I can step forward.

282
00:11:33,759 --> 00:11:36,033
But I can also step backwards.

283
00:11:36,033 --> 00:11:38,660
I can also jump around.
This is a loop.

284
00:11:38,660 --> 00:11:41,132
You can see that it's been
in the loop five times.

285
00:11:41,132 --> 00:11:42,363
You see the five red lines?

286
00:11:42,363 --> 00:11:43,495
How many times did we go
through the loop?

287
00:11:43,495 --> 00:11:44,825
Five times, right?

288
00:11:44,825 --> 00:11:48,495
So let's actually
solve the problem.

289
00:11:48,495 --> 00:11:51,561
Go to this compare, hex 500;

290
00:11:51,561 --> 00:11:54,132
hex 500 in decimals, 1280;

291
00:11:54,132 --> 00:11:57,495
Netcat, 1280, winner.

292
00:11:57,495 --> 00:12:02,297
Now, when I go back here,
see how there's two traces.

293
00:12:02,297 --> 00:12:04,000
Bring this main back up.

294
00:12:04,000 --> 00:12:09,066
We're still
in trace zero right here.

295
00:12:09,066 --> 00:12:11,627
But when I go down here.

296
00:12:11,627 --> 00:12:15,495
Ah.

297
00:12:15,495 --> 00:12:17,627
On the first trace,
it went that way,

298
00:12:17,627 --> 00:12:21,627
but if I mouse over to the
second trace, it went that way.

299
00:12:21,627 --> 00:12:22,858
Timeless debugger.

300
00:12:22,858 --> 00:12:24,263
Now look.

301
00:12:24,264 --> 00:12:27,363
This has been developed,
started out by me.

302
00:12:27,363 --> 00:12:29,627
Bunch of people at CMU
started doing some work on it.

303
00:12:29,627 --> 00:12:32,726
But imagine a real company that
makes debuggers put resources

304
00:12:32,726 --> 00:12:34,528
into something like this.
And you ask yourself,

305
00:12:34,528 --> 00:12:37,495
"Oh, you can't do this because
there's lots of overhead."

306
00:12:37,495 --> 00:12:39,693
That doesn't matter.
This is the modern world.

307
00:12:39,693 --> 00:12:43,957
Most code runs so quickly
on mobile devices.

308
00:12:43,957 --> 00:12:46,033
If you have 100 hex overhead
on a desktop,

309
00:12:46,033 --> 00:12:48,924
that would be totally fine
for debugging, right?

310
00:12:48,924 --> 00:12:51,329
This runs.
This has two back ends.

311
00:12:51,330 --> 00:12:53,627
So what's actually
doing this is QMU,

312
00:12:53,627 --> 00:12:55,495
or you can also use Pin.

313
00:12:55,495 --> 00:13:01,033
But, yeah. Like why do we still
have debuggers from the '70s?

314
00:13:02,957 --> 00:13:05,396
Future of the project?
Like I said, some guys

315
00:13:05,396 --> 00:13:07,593
at Carnegie Mellon
are working on it.

316
00:13:07,594 --> 00:13:10,528
BAP, Anger. There's a bunch
of these very nice,

317
00:13:10,528 --> 00:13:12,660
static execution engines
right now.

318
00:13:12,660 --> 00:13:14,726
The thing that makes them
so difficult to use,

319
00:13:14,726 --> 00:13:17,066
really, largely,
comes down to UI.

320
00:13:17,066 --> 00:13:19,429
A lot of times,
it's exploring this code path

321
00:13:19,429 --> 00:13:21,593
that no sane human
would ever explore,

322
00:13:21,594 --> 00:13:23,627
but there's no good way
to prune it.

323
00:13:23,627 --> 00:13:25,462
Imagine integrating
that with QIRA, saying,

324
00:13:25,462 --> 00:13:27,396
"Ah, stop exploring
over there," right?

325
00:13:27,396 --> 00:13:29,593
And imagine being able
to do this all in real time.

326
00:13:29,594 --> 00:13:32,594
By the way, QIRA
is all free and open-source.

327
00:13:32,594 --> 00:13:33,891
Go to qira.me.

328
00:13:33,891 --> 00:13:35,759
What I was demoing
there was Trunk.

329
00:13:35,759 --> 00:13:37,957
There's a release version
on there.

330
00:13:37,957 --> 00:13:39,429
And both of these --

331
00:13:39,429 --> 00:13:43,560
I mean, so, 2014,
I won SECUINSIDE by myself.

332
00:13:43,561 --> 00:13:46,231
Team tomcr00se walked away
with a $30,000 check.

333
00:13:46,231 --> 00:13:47,891
It was real nice.
How did I do it?

334
00:13:47,891 --> 00:13:50,495
How do I get
that kind of leverage?

335
00:13:50,495 --> 00:13:52,627
Well, one of the big ways
was this tool.

336
00:13:52,627 --> 00:13:55,791
If you're running the binary
10 times less times

337
00:13:55,792 --> 00:14:00,495
than everybody else,
it's quite helpful.

338
00:14:00,495 --> 00:14:04,297
So, how many people
followed that?

339
00:14:04,297 --> 00:14:07,165
[ Applause ]

340
00:14:07,165 --> 00:14:09,858
[ Laughs ]

341
00:14:09,858 --> 00:14:13,032
Try it out.
Go to qira.me.

342
00:14:13,033 --> 00:14:16,693
Really cool.

343
00:14:16,693 --> 00:14:19,098
Now we're gonna
talk about something new.

344
00:14:19,099 --> 00:14:21,627
Security is a losing battle.

345
00:14:21,627 --> 00:14:26,593
It's true. I mean, the security
"industry's" incentives

346
00:14:26,594 --> 00:14:29,297
are incredibly perverse
and people will talk about this,

347
00:14:29,297 --> 00:14:31,726
but, right? The goal
of a "security engineer"

348
00:14:31,726 --> 00:14:33,792
should be to put themselves
out of a job.

349
00:14:33,792 --> 00:14:36,759
You know, true story:
Sony, in 2006,

350
00:14:36,759 --> 00:14:38,297
when they released
the PlayStation 3,

351
00:14:38,297 --> 00:14:39,726
came out
with phenomenal security,

352
00:14:39,726 --> 00:14:43,429
better than any product I've
ever seen, on the launch day.

353
00:14:43,429 --> 00:14:46,198
So Sony asked the guys, "Hey.
Is the product secure?"

354
00:14:46,198 --> 00:14:48,726
"Yeah. Yeah. It's very secure.
We worked very hard on it."

355
00:14:48,726 --> 00:14:50,561
"Oh. Cool. You're all fired.
You have security, right?

356
00:14:50,561 --> 00:14:51,891
You're fired."
[Laughter]

357
00:14:51,891 --> 00:14:53,660
This is literally what they did

358
00:14:53,660 --> 00:14:56,429
and the PS3 security
never improved, right?

359
00:14:56,429 --> 00:14:59,593
One of the reasons the iPhone
continues to get jailbroken

360
00:14:59,594 --> 00:15:01,957
is because the iPhone
shipped with no security.

361
00:15:01,957 --> 00:15:04,033
Everything ran as root.
You could basically

362
00:15:04,033 --> 00:15:06,528
just issue a copy command
to do a jailbreak.

363
00:15:06,528 --> 00:15:10,198
Because they rolled out
security incrementally,

364
00:15:10,198 --> 00:15:12,824
you know,
we could keep up, right?

365
00:15:12,825 --> 00:15:15,066
Today, the iPhone is, by far,
the most secure platform,

366
00:15:15,066 --> 00:15:16,693
and that's reflected in the
million-dollar jailbreak price,

367
00:15:16,693 --> 00:15:19,132
these days, right?
I don't do jailbreaks anymore.

368
00:15:19,132 --> 00:15:20,660
It's $1 million dollars.
Nation-states.

369
00:15:20,660 --> 00:15:22,396
You get killed over that
kinda money. It's true.

370
00:15:22,396 --> 00:15:25,396
[Laughter]
So I'm retired. I'm retired.

371
00:15:25,396 --> 00:15:28,396
I'm out of the hacking game
because, honestly,

372
00:15:28,396 --> 00:15:31,000
if you wanna solve security,
the way you need to solve this

373
00:15:31,000 --> 00:15:32,858
is with things like SAT solvers.

374
00:15:32,858 --> 00:15:35,593
You need to prove things secure
and, really, where this proof

375
00:15:35,594 --> 00:15:37,363
should kinda happen is
in the language,

376
00:15:37,363 --> 00:15:40,561
why the languages
let you write insecure code,

377
00:15:40,561 --> 00:15:43,297
you know, and there's a lot
of nice compiler enhancements

378
00:15:43,297 --> 00:15:46,198
being put out to mitigate
certain classes of attack,

379
00:15:46,198 --> 00:15:48,528
but can we just like mitigate?

380
00:15:48,528 --> 00:15:49,858
Like, okay.
Logic bug's fine.

381
00:15:49,858 --> 00:15:51,231
Logic bugs are always
gonna exist

382
00:15:51,231 --> 00:15:52,693
unless you have a formal spec,

383
00:15:52,693 --> 00:15:55,693
but the fact that we still have
memory corruption in 2016,

384
00:15:55,693 --> 00:15:58,066
I think some people really
wanna stay employed.

385
00:15:58,066 --> 00:15:59,561
That's really what I think.
[Laughter]

386
00:15:59,561 --> 00:16:01,165
Come on.
It's not that hard.

387
00:16:01,165 --> 00:16:03,560
But, yeah.
So I'm retired from hacking.

388
00:16:03,561 --> 00:16:05,660
I'm on the next challenge,
which is kinda related

389
00:16:05,660 --> 00:16:08,560
to this stuff:
artificial intelligence.

390
00:16:08,561 --> 00:16:11,396
And, now, for the remaining
4.5 minutes,

391
00:16:11,396 --> 00:16:13,891
I'm gonna pitch you
on my company.

392
00:16:13,891 --> 00:16:15,198
We are comma.ai.

393
00:16:15,198 --> 00:16:18,660
You see the comma
on my sweatshirt?

394
00:16:18,660 --> 00:16:21,165
It's completely unrelated
to security,

395
00:16:21,165 --> 00:16:25,132
but it's a table conference,
so, you know.

396
00:16:25,132 --> 00:16:27,396
This is a chair conference
talk, like I said.

397
00:16:27,396 --> 00:16:30,329
comma.ai.

398
00:16:30,330 --> 00:16:31,891
I have a self-driving car.
It's true.

399
00:16:31,891 --> 00:16:33,660
It's in my garage at home

400
00:16:33,660 --> 00:16:36,660
and it's better than Tesla's
self-driving car.

401
00:16:36,660 --> 00:16:37,824
Literally, it works.

402
00:16:37,825 --> 00:16:39,825
Put some deep learning
through a computer

403
00:16:39,825 --> 00:16:41,396
in the back of the car,
rigged it all up.

404
00:16:41,396 --> 00:16:43,495
There's a great
Bloomberg article about this.

405
00:16:43,495 --> 00:16:47,198
You can watch a video
of my self-driving car.

406
00:16:47,198 --> 00:16:49,297
And, if I can build
a self-driving car,

407
00:16:49,297 --> 00:16:50,924
why don't you all?
How many people here have

408
00:16:50,924 --> 00:16:54,363
a self-driving car? How many
people here have a Tesla?

409
00:16:54,363 --> 00:16:57,825
All right. How many people have
a non-Tesla self-driving car?

410
00:16:57,825 --> 00:17:00,429
Nobody, right? So why don't you
have self-driving cars?

411
00:17:00,429 --> 00:17:02,858
And it's because
people are dumb.

412
00:17:02,858 --> 00:17:05,396
[Laughter]
I mean, Uber.

413
00:17:05,396 --> 00:17:07,560
I don't understand Uber's play
in the self-driving space,

414
00:17:07,560 --> 00:17:11,165
at all, because Uber has to get

415
00:17:11,165 --> 00:17:12,956
to cars that can drive
with no people.

416
00:17:12,957 --> 00:17:15,792
Let's say they solve
99% of driving.

417
00:17:15,791 --> 00:17:18,165
1%, they still need a guy
to sit there with a license

418
00:17:18,165 --> 00:17:19,494
in the driver's seat.

419
00:17:19,494 --> 00:17:20,824
So imagine Uber.

420
00:17:20,825 --> 00:17:22,429
Right now, they hire
people to drive cars.

421
00:17:22,429 --> 00:17:25,528
Well, now, they "contract"
people to drive cars.

422
00:17:25,528 --> 00:17:28,329
Imagine them, instead, saying,

423
00:17:28,329 --> 00:17:31,561
"We're gonna pay you to sit
there 99% of the time

424
00:17:31,561 --> 00:17:33,561
and only drive
1% of the time."

425
00:17:33,561 --> 00:17:35,362
It saves them no money.

426
00:17:35,363 --> 00:17:37,528
It saves them no money, unless
you can do it remotely.

427
00:17:37,528 --> 00:17:39,627
I really don't understand
the Uber play.

428
00:17:39,627 --> 00:17:42,363
The Tesla play
makes a lot more sense.

429
00:17:42,363 --> 00:17:45,561
Tesla released this thing called
Autopilot; it's great.

430
00:17:45,561 --> 00:17:47,033
This is how you roll out
self-driving cars.

431
00:17:47,033 --> 00:17:48,428
So if Tesla
has everything right,

432
00:17:48,429 --> 00:17:50,099
why are they on my
"people are dumb" slide?

433
00:17:50,099 --> 00:17:55,396
Well, first off, they didn't
build a lot of it themselves.

434
00:17:55,396 --> 00:17:58,330
Tesla doesn't have a cafeteria.
It's true.

435
00:17:58,330 --> 00:18:00,495
Not even a cafeteria
where you pay for food.

436
00:18:00,495 --> 00:18:02,362
They just don't have
a cafeteria, at all.

437
00:18:02,363 --> 00:18:05,792
So how do they expect to retain
top-tier engineering talent?

438
00:18:05,792 --> 00:18:07,462
[ Laughter and applause ]

439
00:18:07,462 --> 00:18:10,495
I mean, right?

440
00:18:10,495 --> 00:18:12,627
So what Tesla did, because
they didn't have talent,

441
00:18:12,627 --> 00:18:14,759
they partnered with
a company called Mobileye.

442
00:18:14,759 --> 00:18:17,198
Mobileye is a '90s-era
computer vision company.

443
00:18:17,198 --> 00:18:20,363
They make these little chips
and the CTO of Mobileye brags

444
00:18:20,363 --> 00:18:22,660
about his little chips
and how they use 2.5 watts,

445
00:18:22,660 --> 00:18:24,627
instead of NVIDIA's
terrible 10 watts.

446
00:18:24,627 --> 00:18:26,792
By the way, NVDIA really
uses more like 15 watts,

447
00:18:26,792 --> 00:18:29,428
but NVDIA's great because,
in a car?

448
00:18:29,429 --> 00:18:33,165
My car has a 200-horsepower
engine; that's 150,000 watts.

449
00:18:33,165 --> 00:18:35,165
Who cares about 2.5 watts?

450
00:18:35,165 --> 00:18:39,627
Very '90s-era thinking.
Very dumb.

451
00:18:39,627 --> 00:18:42,462
But even dumb people
are worth billions of dollars!

452
00:18:42,462 --> 00:18:46,066
This is Mobileye's stock!
Their stock used to be --

453
00:18:46,066 --> 00:18:49,330
Actually, it's now about
half a billion lower, since I

454
00:18:49,330 --> 00:18:51,956
mentioned them in Bloomberg,
in a not-so-positive light.

455
00:18:51,957 --> 00:18:53,495
[Laughter]
But look at that! It's a B!

456
00:18:53,495 --> 00:18:55,858
Billions of dollars!

457
00:18:55,858 --> 00:18:59,099
So, yeah.

458
00:18:59,099 --> 00:19:00,858
Check out this
business plan, right?

459
00:19:00,858 --> 00:19:03,561
[Laughter]
Check it out. Check it out.

460
00:19:03,561 --> 00:19:05,890
Right now, you pay about $2,500

461
00:19:05,891 --> 00:19:09,363
for a navigation package
in your car.

462
00:19:09,363 --> 00:19:13,462
For the same price,
comma.ai is going to sell you

463
00:19:13,462 --> 00:19:17,033
or your dealership
or your car OEM,

464
00:19:17,033 --> 00:19:20,527
a self-driving package.

465
00:19:20,528 --> 00:19:24,924
Now, you can go with this
or you can go with that.

466
00:19:24,924 --> 00:19:28,363
Who remembers the KIA Sol?
[laughs]

467
00:19:28,363 --> 00:19:32,660
Obviously, you're gonna go
with this.

468
00:19:32,660 --> 00:19:33,891
$2,500 a car.

469
00:19:33,891 --> 00:19:37,132
There's a couple million cars
sold every year.

470
00:19:37,132 --> 00:19:39,363
We are going to be so rich.
[Laughter]

471
00:19:39,363 --> 00:19:42,693
Here is a picture of a yacht
and, now, I'll take questions.

472
00:19:42,693 --> 00:19:45,792
[ Laughter and applause ]

473
00:19:45,792 --> 00:19:51,131
♪♪

474
00:19:51,132 --> 00:19:50,132


