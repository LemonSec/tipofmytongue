1
00:00:00,033 --> 00:00:05,099


2
00:00:05,099 --> 00:00:07,165
[ Applause ]

3
00:00:07,165 --> 00:00:09,363
-All right,
good afternoon, everybody,

4
00:00:09,363 --> 00:00:12,858
and thanks for coming to my talk
about capture the flag.

5
00:00:12,858 --> 00:00:16,396
I'll be talking about what it
takes to run a capture the flag.

6
00:00:16,396 --> 00:00:18,891
So, we've already had
a great introduction

7
00:00:18,891 --> 00:00:21,296
to what capture the flag
even is, from Tyler.

8
00:00:21,297 --> 00:00:24,627
But the broad strokes are,
it's a computer-security game,

9
00:00:24,627 --> 00:00:26,230
where teams
either act central --

10
00:00:26,231 --> 00:00:30,000
attack central problems
or attack each other.

11
00:00:30,000 --> 00:00:32,659
Our qualifiers game
is coming up in May --

12
00:00:32,659 --> 00:00:34,693
May 20th through May 22nd.

13
00:00:34,693 --> 00:00:36,198
It's free and online,

14
00:00:36,198 --> 00:00:37,660
and you should probably play it.

15
00:00:37,660 --> 00:00:40,032
I guarantee
you'll learn something.

16
00:00:40,033 --> 00:00:42,132
And our finals game
is coming up in August

17
00:00:42,132 --> 00:00:46,165
at the DEF CON
computer-security conference.

18
00:00:46,165 --> 00:00:47,924
Each year,
our qualifiers game

19
00:00:47,924 --> 00:00:51,099
hosts about 1,400 teams,
maybe a few more.

20
00:00:51,099 --> 00:00:53,197
We narrow that
down to 15 to 20 teams

21
00:00:53,198 --> 00:00:54,495
for our finals game,

22
00:00:54,495 --> 00:00:57,891
and from our finals game,
we pick a winner.

23
00:00:57,891 --> 00:01:00,165
The teams that do really well
in our game

24
00:01:00,165 --> 00:01:02,693
tend to be among the best
hacking teams in the world.

25
00:01:02,693 --> 00:01:05,495
On the left here,
we have the CTF time top teams

26
00:01:05,495 --> 00:01:07,792
for 2015 and on the right,

27
00:01:07,792 --> 00:01:09,825
the teams in our finals game.

28
00:01:09,825 --> 00:01:13,528
They're all
pretty well matched together.

29
00:01:13,528 --> 00:01:15,396
So, how do we run a game?

30
00:01:15,396 --> 00:01:16,891
The first thing
we concentrate on

31
00:01:16,891 --> 00:01:20,330
is engineering a game
that's not frustrating to play.

32
00:01:20,330 --> 00:01:23,923
We concentrate on operating
a reliable game.

33
00:01:23,924 --> 00:01:25,660
And we have the empathy
to make sure

34
00:01:25,660 --> 00:01:29,198
that our reliable game
is actually fun.

35
00:01:29,198 --> 00:01:31,032
So, let's talk about
the engineering aspects

36
00:01:31,033 --> 00:01:33,231
of capture the flag.

37
00:01:33,231 --> 00:01:34,792
We follow
an engineering process.

38
00:01:34,792 --> 00:01:36,726
There's a lot of steps
in an engineering process,

39
00:01:36,726 --> 00:01:40,891
and these steps
are cyclical and recursive.

40
00:01:40,891 --> 00:01:43,924
The first constraint we have is
whether we want to run

41
00:01:43,924 --> 00:01:47,033
a jeopardy
or an attack-defense game.

42
00:01:47,033 --> 00:01:48,858
Jeopardy games are pretty easy.

43
00:01:48,858 --> 00:01:51,528
You go to a website,
you pick challenges from a grid,

44
00:01:51,528 --> 00:01:54,759
and they'll give you a binary
and a server address, generally,

45
00:01:54,759 --> 00:01:57,330
and you have to attack
the server using the binary

46
00:01:57,330 --> 00:01:59,825
to help you figure out
what inputs to send it,

47
00:01:59,825 --> 00:02:01,891
and it gives you a secret.

48
00:02:01,891 --> 00:02:03,627
We build a scoreboard.

49
00:02:03,627 --> 00:02:06,297
We build a bunch
of stand-alone challenges.

50
00:02:06,297 --> 00:02:08,363
We don't have to do
any complicated networking

51
00:02:08,363 --> 00:02:09,693
to play in these games.

52
00:02:09,693 --> 00:02:12,396
There's not a lot of complicated
admin work for players.

53
00:02:12,396 --> 00:02:15,396
We, internally, do a little bit
of networking and admin,

54
00:02:15,396 --> 00:02:18,528
but it's actually not
a huge issue.

55
00:02:18,528 --> 00:02:20,825
Attack-defense is a lot harder.

56
00:02:20,825 --> 00:02:24,197
There's complicated network
with connectivity between teams.

57
00:02:24,198 --> 00:02:26,429
There's --
Some services will slow down

58
00:02:26,429 --> 00:02:28,330
whenever you're pulling them
to see if they work.

59
00:02:28,330 --> 00:02:30,165
Teams start thinking
about metagaming,

60
00:02:30,165 --> 00:02:31,429
their Superman defenses,

61
00:02:31,429 --> 00:02:34,528
and I'll go more
into that later.

62
00:02:34,528 --> 00:02:37,197
Capture-the-flag games can have
a lot of different themes.

63
00:02:37,198 --> 00:02:38,462
About half of these themes

64
00:02:38,462 --> 00:02:42,033
are actually from
Shellphish's ICTF games.

65
00:02:42,033 --> 00:02:45,560
Some of these other themes
are more or less prevalent.

66
00:02:45,561 --> 00:02:47,924
Generic hacker
is a very popular theme

67
00:02:47,924 --> 00:02:52,066
because you just make
your text green.

68
00:02:52,066 --> 00:02:54,099
And aside from, like, the visual
and aesthetic theme,

69
00:02:54,099 --> 00:02:56,000
we have themes
for different challenges --

70
00:02:56,000 --> 00:02:58,660
web, crypto, binary,
reverse engineering,

71
00:02:58,660 --> 00:03:01,495
just ACM-style
programming challenges.

72
00:03:01,495 --> 00:03:02,726
There's a lot
of different choices

73
00:03:02,726 --> 00:03:04,924
you can make in building these.

74
00:03:04,924 --> 00:03:07,033
For jeopardy games,
scoring is easy.

75
00:03:07,033 --> 00:03:09,957
We run the SQL query
very often.

76
00:03:09,957 --> 00:03:13,891
Attack-defense scoring
is a lot more hard.

77
00:03:13,891 --> 00:03:16,462
So, here we have the three
kind of main parties

78
00:03:16,462 --> 00:03:18,857
in a single
attack-defense service.

79
00:03:18,858 --> 00:03:20,231
We have our scorebot,

80
00:03:20,231 --> 00:03:23,561
we have PPP's instance
of the atmail service,

81
00:03:23,561 --> 00:03:26,429
and we have Shellphish
getting ready to attack it.

82
00:03:26,429 --> 00:03:28,594
So, at the beginning
of every round,

83
00:03:28,594 --> 00:03:30,692
we deposit a flag in atmail,

84
00:03:30,693 --> 00:03:35,330
and a flag is just a token
of some binary data.

85
00:03:35,330 --> 00:03:37,429
Shellphish has a cool exploit

86
00:03:37,429 --> 00:03:41,924
that they use on PPP
and steal this flag.

87
00:03:41,924 --> 00:03:43,297
Once they have this flag,

88
00:03:43,297 --> 00:03:45,692
they redeem it with us,
and at the end of the round,

89
00:03:45,693 --> 00:03:49,924
we figure out how many points
get moved around.

90
00:03:49,924 --> 00:03:52,825
During this round,
we also do availability checks.

91
00:03:52,825 --> 00:03:54,792
If an availability check
comes back okay,

92
00:03:54,792 --> 00:03:58,231
we know PPP didn't
totally break their service.

93
00:03:58,231 --> 00:04:01,066
If an availability check fails,

94
00:04:01,066 --> 00:04:03,462
it probably means
that Shellphish won't be able

95
00:04:03,462 --> 00:04:05,066
to even steal any flags,

96
00:04:05,066 --> 00:04:08,858
and we don't want
to encourage that behavior.

97
00:04:08,858 --> 00:04:10,396
And when I say
"encourage that behavior,"

98
00:04:10,396 --> 00:04:13,528
it's because this is
a sufficiently complex game,

99
00:04:13,528 --> 00:04:14,858
and you can metagame it.

100
00:04:14,858 --> 00:04:17,692
You can think about what goes
into playing the game

101
00:04:17,692 --> 00:04:19,659
and how you can find
a little niche in the rules

102
00:04:19,660 --> 00:04:21,561
or you can do
some really interesting things

103
00:04:21,560 --> 00:04:23,957
that make me pull my hair out.

104
00:04:23,957 --> 00:04:27,099
So, one question
we got in 2013

105
00:04:27,099 --> 00:04:29,561
at the DEF CON finals
from Cyphertext,

106
00:04:29,561 --> 00:04:32,263
the leader of the team
Men in Black Hats.

107
00:04:32,264 --> 00:04:33,693
He asked us a question.

108
00:04:33,693 --> 00:04:37,561
"So, we lose 19 flags
if we get hacked,

109
00:04:37,561 --> 00:04:40,561
and when we get hacked
by PPP and nobody else,

110
00:04:40,561 --> 00:04:44,924
we lose 19 flags to PPP.

111
00:04:44,924 --> 00:04:47,659
If we take our service
down, we lose 19 flags,

112
00:04:47,660 --> 00:04:49,165
but they get spread evenly,

113
00:04:49,165 --> 00:04:51,396
and PPP only gets one of these."

114
00:04:51,396 --> 00:04:54,297
So, that's a really interesting
metagaming question,

115
00:04:54,297 --> 00:04:57,627
and that's actually the answer
I gave him, and I walked away.

116
00:04:57,627 --> 00:04:59,198
And we had to fix that
in future years

117
00:04:59,198 --> 00:05:03,099
because that's a really good
metagaming thing.

118
00:05:03,099 --> 00:05:05,264
Reflection
is a really exciting technique

119
00:05:05,264 --> 00:05:07,528
where you use your service
as kind of the honeypot

120
00:05:07,528 --> 00:05:09,495
while it still works.

121
00:05:09,495 --> 00:05:11,462
You can see attacks come in
over the wire

122
00:05:11,462 --> 00:05:13,594
or pick them
out of packet dumps,

123
00:05:13,594 --> 00:05:15,528
analyze them,
and then turn around

124
00:05:15,528 --> 00:05:18,165
and reflect these attacks
against other teams.

125
00:05:18,165 --> 00:05:20,297
This is kind of a big threat

126
00:05:20,297 --> 00:05:22,264
for a team
that has just launched

127
00:05:22,264 --> 00:05:24,033
a new attack
on a new service.

128
00:05:24,033 --> 00:05:26,099
They're the only ones
scoring it,

129
00:05:26,099 --> 00:05:27,561
and now they have
to worry about,

130
00:05:27,561 --> 00:05:28,726
"Well, if I use this attack

131
00:05:28,726 --> 00:05:31,099
on Men in Black Hats,
will they turn it around

132
00:05:31,099 --> 00:05:33,825
and dilute
my first-blood advantage?"

133
00:05:33,825 --> 00:05:37,164
First blood is not
just a Sylvester Stallone movie.

134
00:05:37,165 --> 00:05:39,495
It's this idea
that something new and novel

135
00:05:39,495 --> 00:05:41,033
in a capture-the-flag game

136
00:05:41,033 --> 00:05:45,726
is worth promoting
and awarding extra points for.

137
00:05:45,726 --> 00:05:47,726
So, the way
we address this is

138
00:05:47,726 --> 00:05:50,165
we have a attack-defense
scoring system

139
00:05:50,165 --> 00:05:51,924
that is zero sum.

140
00:05:51,924 --> 00:05:55,263
Each service has
a finite number of flags,

141
00:05:55,264 --> 00:05:57,429
and we bin the flags
per service.

142
00:05:57,429 --> 00:05:59,198
So, here, we see DEFKOR.

143
00:05:59,198 --> 00:06:01,462
There's a few services
that haven't been scored,

144
00:06:01,462 --> 00:06:04,759
where they still have
their initial number of flags.

145
00:06:04,759 --> 00:06:06,231
They've been scoring
really well --

146
00:06:06,231 --> 00:06:08,132
really well on badlogger.

147
00:06:08,132 --> 00:06:12,000
They've gained
a very few flags for hackermud,

148
00:06:12,000 --> 00:06:13,825
and they got some points

149
00:06:13,825 --> 00:06:16,099
in live CTF Quals,
but not very many.

150
00:06:16,099 --> 00:06:19,924
So, let's go into
how this kind of works.

151
00:06:19,924 --> 00:06:24,032
Whenever you lose flags
to steals, we --

152
00:06:24,033 --> 00:06:25,792
"N" here is the number
of teams in the game.

153
00:06:25,792 --> 00:06:29,561
So, with 20 teams,
you can lose 19 flags to steals.

154
00:06:29,561 --> 00:06:32,231
So if everybody
steals your token,

155
00:06:32,231 --> 00:06:35,858
they each get one point.

156
00:06:35,858 --> 00:06:37,825
If there's, like,
a weird number like --

157
00:06:37,825 --> 00:06:40,462
so, if you have 19 flags
that you can lose

158
00:06:40,462 --> 00:06:41,924
and three teams steal them,

159
00:06:41,924 --> 00:06:43,858
now we have a remainder flag

160
00:06:43,858 --> 00:06:45,165
that then gets redistributed

161
00:06:45,165 --> 00:06:48,429
fairly whenever we
have enough of them.

162
00:06:48,429 --> 00:06:49,792
Whenever there's downtime

163
00:06:49,792 --> 00:06:51,857
that leads to a lost
steal opportunity,

164
00:06:51,858 --> 00:06:53,792
we want to really
hurt the teams hard,

165
00:06:53,792 --> 00:06:56,561
so they lose twice
the number of flags to downtime

166
00:06:56,561 --> 00:06:58,263
because not only are they

167
00:06:58,264 --> 00:07:00,561
probably not getting
stolen from,

168
00:07:00,561 --> 00:07:03,032
we want to make downtime hurt
for its own reason.

169
00:07:03,033 --> 00:07:05,033
And due
to administrative reasons,

170
00:07:05,033 --> 00:07:07,495
downtime really makes it hard
to operate a quick

171
00:07:07,495 --> 00:07:10,264
and reliable game.

172
00:07:10,264 --> 00:07:12,429
Remainder and downtime
flags get pooled

173
00:07:12,429 --> 00:07:16,066
and distributed
to every other team.

174
00:07:16,066 --> 00:07:17,890
So, now that we've talked
about scoring,

175
00:07:17,891 --> 00:07:19,429
we have to think
about the science

176
00:07:19,429 --> 00:07:21,164
and the art of challenges.

177
00:07:21,165 --> 00:07:22,660
Challenges and services

178
00:07:22,660 --> 00:07:25,264
are really the heart
of a capture-the-flag game.

179
00:07:25,264 --> 00:07:27,264
The scoreboard
is just kind of there.

180
00:07:27,264 --> 00:07:29,396
Challenges are
why people show up.

181
00:07:29,396 --> 00:07:33,033
And our process
is kind of organic, I guess.

182
00:07:33,033 --> 00:07:34,891
We sit around,
we think of cool bugs,

183
00:07:34,891 --> 00:07:36,858
cool things we haven't seen.

184
00:07:36,858 --> 00:07:38,924
We write these bugs
in some tools

185
00:07:38,924 --> 00:07:40,924
to check that
it's actually vulnerable.

186
00:07:40,924 --> 00:07:43,758
We put other things
in this binary so it --

187
00:07:43,759 --> 00:07:45,231
an analysis service.

188
00:07:45,231 --> 00:07:46,891
We don't have
just a, you know,

189
00:07:46,891 --> 00:07:49,693
connect to this port
and execute a buffer overflow.

190
00:07:49,693 --> 00:07:51,792
It's wrapped in, maybe,
a mail service

191
00:07:51,792 --> 00:07:54,462
or a messaging service

192
00:07:54,462 --> 00:07:56,527
or some service
that has a reason to exist

193
00:07:56,528 --> 00:08:00,528
and can be checked
for uptime independent of bugs.

194
00:08:00,528 --> 00:08:02,264
Once we've got
this put together,

195
00:08:02,264 --> 00:08:05,198
we write test scripts to make
sure that it actually works.

196
00:08:05,198 --> 00:08:07,132
And for jeopardy-style games,

197
00:08:07,132 --> 00:08:09,231
whenever teams gripe
that it's not exploitable,

198
00:08:09,231 --> 00:08:11,528
we have a script that can say,
"No, it's exploitable.

199
00:08:11,528 --> 00:08:13,858
You just need to get better."

200
00:08:13,858 --> 00:08:15,462
On the other side,

201
00:08:15,462 --> 00:08:17,164
there's definitely
an art to challenges,

202
00:08:17,165 --> 00:08:19,231
and this is what makes writing
challenges very difficult

203
00:08:19,231 --> 00:08:21,726
for me personally.

204
00:08:21,726 --> 00:08:25,396
You roll in, you're like,
"I'm gonna write a challenge."

205
00:08:25,396 --> 00:08:27,792
You make a directory,
you touch an empty makefile,

206
00:08:27,792 --> 00:08:29,659
you open up Emacs or Vim

207
00:08:29,660 --> 00:08:31,198
and stare at this blank buffer.

208
00:08:31,198 --> 00:08:32,924
It's like, "Cool...

209
00:08:35,759 --> 00:08:37,890
What am I supposed to do then?"

210
00:08:37,890 --> 00:08:40,362
So, what we like
to concentrate on is bugs

211
00:08:40,363 --> 00:08:42,528
that have had
historic interest for us.

212
00:08:42,528 --> 00:08:44,528
A challenge
we ran in 2014

213
00:08:44,528 --> 00:08:47,792
called DOS Fun for You
was a compiler bug

214
00:08:47,792 --> 00:08:49,693
in, I believe,
the Borland compiler

215
00:08:49,693 --> 00:08:52,627
for DOS that was also
really sensitive

216
00:08:52,627 --> 00:08:54,758
to the emulator
you're running DOS in.

217
00:08:54,759 --> 00:08:56,660
So, it would work in Box,

218
00:08:56,660 --> 00:08:59,098
but not in DOSBox of VMWare

219
00:08:59,099 --> 00:09:01,660
or anything like that.

220
00:09:01,660 --> 00:09:04,065
A unique challenge
that we haven't seen before

221
00:09:04,066 --> 00:09:05,429
is something
that's fun to write,

222
00:09:05,429 --> 00:09:07,957
and in the writing of it
you discover why nobody

223
00:09:07,957 --> 00:09:09,825
writes that kind
of challenge usually,

224
00:09:09,825 --> 00:09:12,660
and situations
that are inherently funny.

225
00:09:12,660 --> 00:09:14,329
So, a situation

226
00:09:14,330 --> 00:09:16,792
where you're trying
to solve this DOS challenge,

227
00:09:16,792 --> 00:09:18,957
and IDA also has a bug

228
00:09:18,957 --> 00:09:21,000
that prevents analyzing
this correctly.

229
00:09:21,000 --> 00:09:24,693
That's really funny, to make
somebody go fix IDA Pro.

230
00:09:26,759 --> 00:09:28,264
One of the other things
with challenges

231
00:09:28,264 --> 00:09:30,000
is scaling difficulty.

232
00:09:30,000 --> 00:09:33,957
And we see this a lot
with teams of different sizes.

233
00:09:33,957 --> 00:09:35,957
For a few years,
we had a team limit

234
00:09:35,957 --> 00:09:38,033
of eight people in Vegas.

235
00:09:38,033 --> 00:09:39,264
And teams that were smaller

236
00:09:39,264 --> 00:09:40,660
than that would say,
"Well, why is it so high?

237
00:09:40,660 --> 00:09:42,957
Why can't you make
the limit six or four

238
00:09:42,957 --> 00:09:45,099
or however many people
are on our team?"

239
00:09:45,099 --> 00:09:46,726
Whereas a bigger team
is going to turn around

240
00:09:46,726 --> 00:09:50,099
and say, "Well,
why isn't the limit 12?"

241
00:09:50,099 --> 00:09:51,792
Or 40, like Samurai.

242
00:09:51,792 --> 00:09:53,495
And the way we control
that is by controlling

243
00:09:53,495 --> 00:09:54,858
challenge difficulty.

244
00:09:54,858 --> 00:09:57,494
A smaller team isn't going
to take a challenge

245
00:09:57,495 --> 00:09:59,264
and arbitrarily
take twice as long

246
00:09:59,264 --> 00:10:00,792
as a big team on it.

247
00:10:00,792 --> 00:10:02,693
The main penalty
a small team suffers

248
00:10:02,693 --> 00:10:06,264
is they can solve
fewer challenges at once.

249
00:10:06,264 --> 00:10:08,825
They can't parallelize
as effectively.

250
00:10:08,825 --> 00:10:11,429
So, we tend to write
fewer challenges

251
00:10:11,429 --> 00:10:13,396
and harder challenges,

252
00:10:13,396 --> 00:10:15,363
and require teams to be --

253
00:10:15,363 --> 00:10:17,495
to not penalize smaller teams,

254
00:10:17,495 --> 00:10:20,495
and require teams to be
a lot smarter.

255
00:10:20,495 --> 00:10:22,363
Incidentally,
this team, tomcr00se,

256
00:10:22,363 --> 00:10:26,858
that came in fifth place
in our quals game in 2014,

257
00:10:26,858 --> 00:10:28,263
that's just George Hotz,

258
00:10:28,264 --> 00:10:30,792
who is speaking
in a few minutes.

259
00:10:30,792 --> 00:10:32,165
Really smart.

260
00:10:32,165 --> 00:10:34,429
But playing solo, beat --

261
00:10:34,429 --> 00:10:37,297
I don't even see
PPP on this list.

262
00:10:37,297 --> 00:10:39,561
So...

263
00:10:39,561 --> 00:10:40,891
They were already pre-qualified,

264
00:10:40,891 --> 00:10:42,693
so they don't have
to work the whole weekend.

265
00:10:42,693 --> 00:10:43,726
So...

266
00:10:43,726 --> 00:10:45,066
Awkward.

267
00:10:45,066 --> 00:10:48,000
So... [ Laughs ]

268
00:10:48,000 --> 00:10:51,033
So, challenge difficulty --

269
00:10:51,033 --> 00:10:52,858
the other half
of challenge engineering

270
00:10:52,858 --> 00:10:55,132
is building reliable challenges.

271
00:10:55,132 --> 00:10:56,791
If your challenges
are falling over,

272
00:10:56,792 --> 00:10:59,066
if they have threading bugs,

273
00:10:59,066 --> 00:11:01,825
or if they take down
the whole network

274
00:11:01,825 --> 00:11:02,891
at finals in Vegas

275
00:11:02,891 --> 00:11:05,033
and teams are desperate
to get everybody

276
00:11:05,033 --> 00:11:06,363
to patch it into working,

277
00:11:06,363 --> 00:11:08,891
that's a big,
difficult ops time.

278
00:11:08,891 --> 00:11:11,165
If it's a nice
little item-potency binary

279
00:11:11,165 --> 00:11:13,000
that just accepts
the connection,

280
00:11:13,000 --> 00:11:15,132
does some things,
and then deletes all its state

281
00:11:15,132 --> 00:11:16,429
when the connection ends,

282
00:11:16,429 --> 00:11:18,660
that's really easy
to operate reliably,

283
00:11:18,660 --> 00:11:21,198
and that kind of segs
into operations.

284
00:11:21,198 --> 00:11:23,066
So, our dream,

285
00:11:23,066 --> 00:11:25,264
whenever we're running
a capture-the-flag game,

286
00:11:25,264 --> 00:11:28,099
is to just party and --

287
00:11:28,099 --> 00:11:31,429
I should've redacted "be jerks
to teams" a little bit better --

288
00:11:31,429 --> 00:11:34,231
to say no to a lot
of questions.

289
00:11:34,231 --> 00:11:36,528
"Is this down or broken?"
It's not broken.

290
00:11:36,528 --> 00:11:37,759
Other teams are scoring it.

291
00:11:37,759 --> 00:11:39,594
Our script shows it works.

292
00:11:39,594 --> 00:11:41,132
"Is this actually exploitable?"

293
00:11:41,132 --> 00:11:44,263
We want to be able to say,
definitively, "It's exploitable.

294
00:11:44,264 --> 00:11:46,924
We gave this challenge
to somebody else in our group

295
00:11:46,924 --> 00:11:48,495
that hadn't seen
the source code,

296
00:11:48,495 --> 00:11:52,495
and they were able to solve it
in 'X' amount of time."

297
00:11:52,495 --> 00:11:54,033
Our other operation secret

298
00:11:54,033 --> 00:11:55,891
is it only has
to work for a weekend.

299
00:11:55,891 --> 00:11:58,329
Our Vegas operations,
we run the network

300
00:11:58,330 --> 00:11:59,891
for about 28 hours total,

301
00:11:59,891 --> 00:12:01,957
and not all at once.

302
00:12:01,957 --> 00:12:05,858
Our qualifiers network
is 48 hours over a weekend,

303
00:12:05,858 --> 00:12:07,263
but we have some other tricks

304
00:12:07,264 --> 00:12:11,858
to increase the reliability
by trolling teams.

305
00:12:11,858 --> 00:12:13,891
The other half
of operations --

306
00:12:13,891 --> 00:12:16,693
start on time
by being ready early.

307
00:12:16,693 --> 00:12:18,891
We usually have most
of our game network

308
00:12:18,891 --> 00:12:22,264
for quals ready to go 24 hours
before the game starts.

309
00:12:22,264 --> 00:12:24,693
We don't have to do
any last-minute server deploys.

310
00:12:24,693 --> 00:12:26,792
We just wait for the server
clock to tick over,

311
00:12:26,792 --> 00:12:28,066
and I guess
the game is on now

312
00:12:28,066 --> 00:12:30,891
because our load numbers
are going through the roof.

313
00:12:33,627 --> 00:12:36,032
Jeopardy games
are really cheap to run.

314
00:12:36,033 --> 00:12:37,264
Boston Key Party,

315
00:12:37,264 --> 00:12:39,429
a game that I believe
is coming up in April,

316
00:12:39,429 --> 00:12:42,759
their server budget
last year was $27.

317
00:12:42,759 --> 00:12:46,297
We spread out our services
a lot more,

318
00:12:46,297 --> 00:12:49,099
but it's still cheaper
than our booze budget,

319
00:12:49,099 --> 00:12:51,726
which is absurd.

320
00:12:51,726 --> 00:12:54,660
Whenever we get to Vegas,
our server costs change a lot.

321
00:12:54,660 --> 00:12:57,296
We don't trust
the network uplink in Vegas,

322
00:12:57,297 --> 00:13:00,627
so we instead have to bring
racks of computers.

323
00:13:00,627 --> 00:13:03,891
And because teams
aren't necessarily expecting

324
00:13:03,891 --> 00:13:08,363
Creator Ci20 MIPS machines
on Linux,

325
00:13:08,363 --> 00:13:11,924
we bring Creator Ci20
MIPS machines on Linux.

326
00:13:11,924 --> 00:13:20,198
Or we bring a Raspberry Pi
cluster running Windows.

327
00:13:20,198 --> 00:13:22,858
Weird architectures.
These are a lot of fun.

328
00:13:22,858 --> 00:13:25,560
Teams don't want
to bring hardware,

329
00:13:25,561 --> 00:13:27,132
except for Shellphish.

330
00:13:27,132 --> 00:13:29,429
Most teams just
want to roll in with MacBooks

331
00:13:29,429 --> 00:13:31,858
and maybe monitors,
plug into the network,

332
00:13:31,858 --> 00:13:33,231
and get, you know,

333
00:13:33,231 --> 00:13:37,924
access to a server that we
provide power and CPUs for.

334
00:13:37,924 --> 00:13:40,429
We don't trust
the uplink in Vegas.

335
00:13:40,429 --> 00:13:42,297
And there's exceptions
to both of these.

336
00:13:42,297 --> 00:13:45,330
So, Statum Auhuur, they ran
the capture the flag game

337
00:13:45,330 --> 00:13:48,297
at Chaos Communications Camp
in Germany this summer.

338
00:13:48,297 --> 00:13:52,000
They trust the CC Camp
network-operations team

339
00:13:52,000 --> 00:13:55,132
enough to run their whole game
from cloud servers.

340
00:13:55,132 --> 00:13:57,065
So all we had
to do at Camp

341
00:13:57,066 --> 00:14:00,198
was find a gigabit uplink,
route it to our tent,

342
00:14:00,198 --> 00:14:02,231
and play in the CTF.

343
00:14:02,231 --> 00:14:05,033
Shellphish usually brings
a big-ish, like,

344
00:14:05,033 --> 00:14:08,033
waist-high server rack
to DEF CON.

345
00:14:08,033 --> 00:14:11,330
I don't know
what they do with it...

346
00:14:11,330 --> 00:14:14,033
I don't know
what they do with it.

347
00:14:14,033 --> 00:14:16,792
Bringing your own hardware
has some potential downfalls.

348
00:14:16,792 --> 00:14:21,066
So, this is our ODROID-U2 ARM
Linux cluster.

349
00:14:21,066 --> 00:14:23,330
Whenever we showed up
in 2013,

350
00:14:23,330 --> 00:14:25,561
we had heard
the teams were expecting,

351
00:14:25,561 --> 00:14:28,099
you know, BSD on x86,

352
00:14:28,099 --> 00:14:31,396
or Solaris on x86
or Linux on x86,

353
00:14:31,396 --> 00:14:34,065
and they get Linux on ARM.

354
00:14:34,066 --> 00:14:37,066
The problem with these boards is
that they're hard to get.

355
00:14:37,066 --> 00:14:39,000
You can't just go
to Fry's in Vegas

356
00:14:39,000 --> 00:14:40,528
and buy 30 of them.

357
00:14:40,528 --> 00:14:43,924
You order them, and they get
shipped really slowly.

358
00:14:43,924 --> 00:14:45,396
Once we had them,
we were worried

359
00:14:45,396 --> 00:14:49,264
about their reliability so much
that, one afternoon in 2014,

360
00:14:49,264 --> 00:14:51,165
on our second year
with these boards,

361
00:14:51,165 --> 00:14:53,759
one team's board
was acting really flaky,

362
00:14:53,759 --> 00:14:57,000
and Solaire, who's basically
the God Emperor of networks

363
00:14:57,000 --> 00:14:58,891
and physical infrastructure,

364
00:14:58,891 --> 00:15:00,924
is pulling his hair out
over this.

365
00:15:00,924 --> 00:15:05,759
And I, through some misjudgment,

366
00:15:05,759 --> 00:15:07,264
you know, asked him
what was the problem

367
00:15:07,264 --> 00:15:08,528
and when it was
going to be fixed,

368
00:15:08,528 --> 00:15:10,858
because it was affecting
scoring issues.

369
00:15:10,858 --> 00:15:12,560
And to his credit,

370
00:15:12,561 --> 00:15:14,792
he didn't, like,
murder me or anything,

371
00:15:14,792 --> 00:15:16,000
because it was
really stressful for him,

372
00:15:16,000 --> 00:15:17,759
but he did disappear
for a while.

373
00:15:17,759 --> 00:15:20,264
And maybe the most
important part of operations

374
00:15:20,264 --> 00:15:21,792
is caring about your team

375
00:15:21,792 --> 00:15:23,726
and caring
about the emotional aspects

376
00:15:23,726 --> 00:15:25,264
of your operations.

377
00:15:27,330 --> 00:15:28,660
Attack-defense games,

378
00:15:28,660 --> 00:15:30,495
because of
the metagaming opportunities,

379
00:15:30,495 --> 00:15:32,726
have really
interesting dynamics.

380
00:15:32,726 --> 00:15:35,165
For a small team,
player time

381
00:15:35,165 --> 00:15:37,759
is their number-one
limited resource.

382
00:15:37,759 --> 00:15:39,594
Players -- This is,

383
00:15:39,594 --> 00:15:41,924
like, direct orders
from the DEF CON staff --

384
00:15:41,924 --> 00:15:43,528
one shower, two meals,

385
00:15:43,528 --> 00:15:45,924
and three hours
of sleep every day.

386
00:15:45,924 --> 00:15:47,264
Besides that,

387
00:15:47,264 --> 00:15:50,594
a lot of these teams
are head-deep in binaries.

388
00:15:50,594 --> 00:15:53,726
And we patch services sometimes.

389
00:15:53,726 --> 00:15:55,693
This is a lot of fun for us,

390
00:15:55,693 --> 00:15:58,098
and it's a lot
of frustration for players.

391
00:15:58,099 --> 00:15:59,693
So, let's say
your all-star player

392
00:15:59,693 --> 00:16:02,891
has spent all day
on Service "A," they solve it,

393
00:16:02,891 --> 00:16:05,957
and then the next morning they
start looking at Service "B."

394
00:16:05,957 --> 00:16:08,957
Halfway through the day,
we release Service "A" prime,

395
00:16:08,957 --> 00:16:11,033
which adds some extra
functionality,

396
00:16:11,033 --> 00:16:14,198
and in one case, we also
switched it from x86 to ARM

397
00:16:14,198 --> 00:16:15,726
in the middle of the day.

398
00:16:15,726 --> 00:16:17,528
Now player one has a choice.

399
00:16:17,528 --> 00:16:19,330
Do they keep
accumulating knowledge

400
00:16:19,330 --> 00:16:22,363
about Service "B"
in the hopes of solving it?

401
00:16:22,363 --> 00:16:24,726
Or do they go back
to Service "A,"

402
00:16:24,726 --> 00:16:26,330
where they already
have knowledge about it,

403
00:16:26,330 --> 00:16:29,495
and start working
on Service "A" prime?

404
00:16:29,495 --> 00:16:31,231
I'm interested to hear
what a lot of teams

405
00:16:31,231 --> 00:16:32,924
do in this kind of situation,

406
00:16:32,924 --> 00:16:35,066
but it is really funny for us.

407
00:16:37,429 --> 00:16:39,759
Sometimes challenges break.

408
00:16:39,759 --> 00:16:41,429
I had this issue
with a challenge

409
00:16:41,429 --> 00:16:44,627
we deployed in 2015,
in the summer.

410
00:16:44,627 --> 00:16:47,329
It was a complicated
WebSocket service

411
00:16:47,330 --> 00:16:50,726
that also leaked
Postgres connections.

412
00:16:50,726 --> 00:16:52,660
During my testing,
I'm only one person,

413
00:16:52,660 --> 00:16:54,759
so I don't leak
connections that fast.

414
00:16:54,759 --> 00:16:57,264
It took about 30 seconds
of the service being up

415
00:16:57,264 --> 00:17:00,693
before the service
came down on its own.

416
00:17:00,693 --> 00:17:03,165
And this is just an aspect
of running big software

417
00:17:03,165 --> 00:17:05,231
and having to test software.

418
00:17:05,231 --> 00:17:07,791
If I spend 10 hours
on a piece of software,

419
00:17:07,791 --> 00:17:11,165
20 teams will do that same
amount of testing in 30 minutes,

420
00:17:11,165 --> 00:17:13,000
and because there are more
of them, there's, like,

421
00:17:13,000 --> 00:17:14,231
this insane creativity

422
00:17:14,231 --> 00:17:15,693
that I don't have.

423
00:17:15,693 --> 00:17:18,098
For a qual service,
1,000 teams

424
00:17:18,098 --> 00:17:21,593
will burn through 10 hours
of service time in 30 seconds,

425
00:17:21,594 --> 00:17:24,891
which leads
to a really perverse incentive

426
00:17:24,891 --> 00:17:29,660
for how you want your service
to fail or get used incorrectly.

427
00:17:29,660 --> 00:17:31,825
We would actually prefer
that one of our services

428
00:17:31,825 --> 00:17:35,396
have a remote-code-execution bug
or a memory-disclosure bug

429
00:17:35,396 --> 00:17:38,528
than just a denial of service
that takes it off the network.

430
00:17:38,528 --> 00:17:42,957
And this is because players
don't want services down.

431
00:17:42,957 --> 00:17:44,957
And we have to build the empathy

432
00:17:44,957 --> 00:17:49,099
to build a working game
by thinking like players.

433
00:17:49,099 --> 00:17:51,890
Players want good, fun
working challenges.

434
00:17:51,891 --> 00:17:54,528
And even if a challenge
from our end,

435
00:17:54,528 --> 00:17:57,363
if it's fallen down in the wrong
way, if it's, you know,

436
00:17:57,363 --> 00:18:01,165
they're not buffer-overflowing
the right buffer to you guys,

437
00:18:01,165 --> 00:18:02,627
it's still buffer-overflowable,

438
00:18:02,627 --> 00:18:04,165
and players are still
scoring it.

439
00:18:04,165 --> 00:18:07,891
And at the end of the day,
that's really what matters.

440
00:18:07,891 --> 00:18:10,660
We have to run the game
we want to play.

441
00:18:10,660 --> 00:18:12,858
And we kind of get there
by playing

442
00:18:12,858 --> 00:18:14,726
a lot of capture-the-flag games.

443
00:18:14,726 --> 00:18:19,033
We try not to lie to players.

444
00:18:19,033 --> 00:18:23,462
That said,
we will deceive the players

445
00:18:23,462 --> 00:18:27,000
if and only if it makes
the game more fun.

446
00:18:29,264 --> 00:18:30,527
Some of the frustrating parts

447
00:18:30,528 --> 00:18:33,264
of games
can be trivia and memes.

448
00:18:33,264 --> 00:18:34,428
International players,

449
00:18:34,429 --> 00:18:36,693
players that don't speak
English very well,

450
00:18:36,693 --> 00:18:39,462
players that don't watch
all the same TV shows you do,

451
00:18:39,462 --> 00:18:41,792
they're still there
trying to play the game.

452
00:18:41,792 --> 00:18:43,033
And if you give them a question

453
00:18:43,033 --> 00:18:45,792
that's just, you know,
"Blank v. Blank,"

454
00:18:45,792 --> 00:18:49,264
are they going to get that?

455
00:18:49,264 --> 00:18:53,099
Guessing in large solution
spaces are really, really bad.

456
00:18:53,099 --> 00:18:55,033
Writing a solver
for a 2 to the 8th

457
00:18:55,033 --> 00:18:56,527
solution space is pretty fun.

458
00:18:56,528 --> 00:18:58,660
You can burn through that
on a micro-controller

459
00:18:58,660 --> 00:19:00,264
you wear around your neck

460
00:19:00,264 --> 00:19:02,792
and blast infrared
at people's MacBooks.

461
00:19:02,792 --> 00:19:04,528
That's suspiciously specific.

462
00:19:04,528 --> 00:19:06,957
But a solver
that takes three hours to run,

463
00:19:06,957 --> 00:19:10,891
or has to go through a 2
to the 16th solution space,

464
00:19:10,891 --> 00:19:12,363
that's not so much fun,

465
00:19:12,363 --> 00:19:13,792
especially if you're
a small team

466
00:19:13,792 --> 00:19:15,956
and you don't have a lot
of CPU power with you,

467
00:19:15,957 --> 00:19:17,891
and you don't want
to farm it out to Amazon

468
00:19:17,891 --> 00:19:21,627
because that's expensive
sometimes.

469
00:19:21,627 --> 00:19:26,759
So, player agency versus player
fun is a serious tradeoff.

470
00:19:26,759 --> 00:19:28,759
And we see this in a lot
of other games.

471
00:19:28,759 --> 00:19:32,231
Preserving player agency
leads to a game like EVE Online,

472
00:19:32,231 --> 00:19:35,066
where if you get scammed
or you make some bad choices,

473
00:19:35,066 --> 00:19:38,495
you may just have made
those bad choices

474
00:19:38,495 --> 00:19:40,758
and pay the price.

475
00:19:40,759 --> 00:19:44,132
So, for us,
preserving player agency

476
00:19:44,132 --> 00:19:45,330
means we don't give hints

477
00:19:45,330 --> 00:19:47,330
once a challenge
has been solved.

478
00:19:47,330 --> 00:19:49,066
For a jeopardy game,

479
00:19:49,066 --> 00:19:51,066
whenever we're force-unlocking
a challenge

480
00:19:51,066 --> 00:19:52,594
to move the game along,

481
00:19:52,594 --> 00:19:54,198
that's a difficult
question for us.

482
00:19:54,198 --> 00:19:56,825
Because if the team
that is about to unlock

483
00:19:56,825 --> 00:19:58,330
a new challenge

484
00:19:58,330 --> 00:20:01,726
wasn't going to pick that one,
they may feel ripped off.

485
00:20:01,726 --> 00:20:03,396
On the other hand,
we may want to think

486
00:20:03,396 --> 00:20:05,231
about how
World of Warcraft works,

487
00:20:05,231 --> 00:20:06,825
where they preserve
player enjoyment

488
00:20:06,825 --> 00:20:08,726
at the expense of agency.

489
00:20:08,726 --> 00:20:10,462
Teams that are new
to the game

490
00:20:10,462 --> 00:20:12,792
are going to benefit a lot
from easy challenges,

491
00:20:12,792 --> 00:20:14,462
even if they're not
going to win.

492
00:20:14,462 --> 00:20:17,693
We would really prefer
to keep easy challenges

493
00:20:17,693 --> 00:20:19,033
unlocked for the whole game

494
00:20:19,033 --> 00:20:21,000
just so a new payer
will have some way

495
00:20:21,000 --> 00:20:22,297
to get their bearings,

496
00:20:22,297 --> 00:20:24,033
get in the mood
for solving challenges,

497
00:20:24,033 --> 00:20:28,659
and have something to brag about
what they did on Monday morning.

498
00:20:28,660 --> 00:20:32,099
We also like to force-unlock
hard challenges

499
00:20:32,099 --> 00:20:33,495
in the early evening.

500
00:20:33,495 --> 00:20:37,561
Challenge reliability
tends to follow a bathtub curve.

501
00:20:37,561 --> 00:20:39,197
If it's going to fall over,
it's gonna fall over

502
00:20:39,198 --> 00:20:41,297
when everybody
hits it all at once,

503
00:20:41,297 --> 00:20:43,330
and after that it's gonna be,
you know, smooth sailing,

504
00:20:43,330 --> 00:20:44,759
reliable challenge.

505
00:20:44,759 --> 00:20:47,066
So, for something
like DOS Fun for You,

506
00:20:47,066 --> 00:20:50,330
if we unlocked that in the early
evening, by the late night,

507
00:20:50,330 --> 00:20:52,099
we're reasonably sure
it's reliable,

508
00:20:52,099 --> 00:20:53,858
but we can also be sure
it's hard enough

509
00:20:53,858 --> 00:20:55,099
that we'll get
a good night's sleep

510
00:20:55,099 --> 00:20:57,033
and nobody will
unlock anything overnight.

511
00:20:57,033 --> 00:20:59,231
And that's how we get
a good night's sleep

512
00:20:59,231 --> 00:21:00,759
while running the game.

513
00:21:00,759 --> 00:21:02,891
Fundamentally,
the most important thing

514
00:21:02,891 --> 00:21:04,165
about capture the flag
to remember

515
00:21:04,165 --> 00:21:06,627
is that hacking computers
is fun.

516
00:21:06,627 --> 00:21:08,396
Do not do anything
that takes away

517
00:21:08,396 --> 00:21:11,197
the natural enjoyment
of breaking software.

518
00:21:11,198 --> 00:21:14,429
And you do that by engineering
a non-frustrating game,

519
00:21:14,429 --> 00:21:16,462
you operate a reliable game,

520
00:21:16,462 --> 00:21:19,396
and you have the empathy
to make it fun.

521
00:21:19,396 --> 00:21:23,428
Again, our qualifiers
are May 20th through May 22nd.

522
00:21:23,429 --> 00:21:24,792
You can find more about them

523
00:21:24,792 --> 00:21:28,858
at our very provisional website,
legitbs.net.

524
00:21:28,858 --> 00:21:30,131
And thanks.

525
00:21:30,132 --> 00:21:32,528
And I guess we're
ready for questions.

526
00:21:32,528 --> 00:21:34,957
[ Applause ]

527
00:21:34,957 --> 00:21:33,957


