1
00:00:00,198 --> 00:00:00,660


2
00:00:00,660 --> 00:00:04,858
♪♪

3
00:00:04,858 --> 00:00:06,197
REED: I'm Teddy.

4
00:00:06,198 --> 00:00:08,660
I'm on the intrusion detection team at Facebook,

5
00:00:08,660 --> 00:00:11,759
so we look for intrusions across all the machines

6
00:00:11,759 --> 00:00:14,066
that Facebook developers use

7
00:00:14,066 --> 00:00:17,429
and all the machines that run the Facebook app, right?

8
00:00:17,429 --> 00:00:18,759
I'm a builder.

9
00:00:18,759 --> 00:00:21,528
I'm a classically trained computer science geek.

10
00:00:21,528 --> 00:00:24,198
But I love to study boot strap technologies.

11
00:00:24,198 --> 00:00:26,132
I'm obsessed with firmware.

12
00:00:26,132 --> 00:00:28,924
Firmware, trusted computing, Secure Boot:

13
00:00:28,924 --> 00:00:31,791
everything that bootstraps, like architecture,

14
00:00:31,792 --> 00:00:34,231
security primitives, and operating systems.

15
00:00:34,231 --> 00:00:36,264
I don't get to work in that day-to-day;

16
00:00:36,264 --> 00:00:37,726
I get to defend a network.

17
00:00:37,726 --> 00:00:40,759
So I try to take every opportunity possible

18
00:00:40,759 --> 00:00:43,627
to merge these two things today.

19
00:00:43,627 --> 00:00:46,066
I'm gonna talk about how, as a defender,

20
00:00:46,066 --> 00:00:48,099
if there are any defenders in the room,

21
00:00:48,099 --> 00:00:50,428
if you're obsessed with firmware just like I am,

22
00:00:50,429 --> 00:00:52,561
you can wrap firmware-related stuff

23
00:00:52,561 --> 00:00:54,396
into your defense of your enterprise

24
00:00:54,396 --> 00:00:55,891
and, hopefully, convince you

25
00:00:55,891 --> 00:01:00,263
that that is something that we should be doing today.

26
00:01:00,264 --> 00:01:02,825
So firmware security has always been a really important topic,

27
00:01:02,825 --> 00:01:06,462
but we've seen a resurgence of interest in our community

28
00:01:06,462 --> 00:01:08,000
over the last four years.

29
00:01:08,000 --> 00:01:09,561
Why is that?

30
00:01:09,561 --> 00:01:15,396
Why are there so many talks about EFI, about SMN today?

31
00:01:15,396 --> 00:01:17,594
Well, if you think about how many development boards

32
00:01:17,594 --> 00:01:20,726
you've seen in the last month -- think Arduinos, Minnows,

33
00:01:20,726 --> 00:01:23,363
Leafs, PINEs, all of those things --

34
00:01:23,363 --> 00:01:26,132
are requiring you, the developer,

35
00:01:26,132 --> 00:01:28,594
to go out and build firmware.

36
00:01:28,594 --> 00:01:32,792
If we combine that with our industry, the software industry,

37
00:01:32,792 --> 00:01:36,858
plus industries like Intel, hardware industries

38
00:01:36,858 --> 00:01:40,726
that are embracing open-source technology as advantageous,

39
00:01:40,726 --> 00:01:43,164
hopefully, almost soon, necessary,

40
00:01:43,165 --> 00:01:47,363
we get this really cool, awesome, epic opportunity.

41
00:01:47,363 --> 00:01:51,165
We, the developers, the defenders, the security geeks,

42
00:01:51,165 --> 00:01:53,429
get to play in the realm of firmware.

43
00:01:56,495 --> 00:02:01,132
So firmware, the intersection between hard- and software

44
00:02:01,132 --> 00:02:03,660
mandatory for a developer now

45
00:02:03,660 --> 00:02:06,660
is becoming absolutely necessary.

46
00:02:06,660 --> 00:02:09,594
Raise your hands if you've built a GRUB and e-Elo.

47
00:02:09,594 --> 00:02:11,858
Have you compiled one, right?

48
00:02:11,858 --> 00:02:13,726
You're touching firmware right there.

49
00:02:13,726 --> 00:02:18,165
You're talking to the APIs that exit from UEFI

50
00:02:18,165 --> 00:02:20,692
and go into pointing the execution pointer

51
00:02:20,693 --> 00:02:23,759
to your kernel -- eventually, right?

52
00:02:23,759 --> 00:02:26,263
How many of us have written things to the MBR

53
00:02:26,264 --> 00:02:29,066
or even modified our BIOS's SLIC?

54
00:02:29,066 --> 00:02:31,396
You modify the SLIC. Why were you doing that?

55
00:02:31,396 --> 00:02:32,759
All right, this is awesome, right?

56
00:02:32,759 --> 00:02:36,825
And this gets me really excited, if you can't tell already.

57
00:02:36,825 --> 00:02:39,429
So, for us, too, there's a duality of interest here.

58
00:02:39,429 --> 00:02:41,891
We're attacking it, but we're also embracing it.

59
00:02:41,891 --> 00:02:45,231
We want to use firmware, we want to use Secure Boot,

60
00:02:45,231 --> 00:02:47,891
to defend our machines,

61
00:02:47,891 --> 00:02:50,560
but we also want a vulnerability so we can jailbreak them,

62
00:02:50,561 --> 00:02:52,792
so we can run homebrew stuff on it.

63
00:02:52,792 --> 00:02:57,231
That's awesome, too, because the vulnerabilities there within

64
00:02:57,231 --> 00:02:59,033
are used for good or evil, right?

65
00:02:59,033 --> 00:03:00,759
And if we can play, as researchers,

66
00:03:00,759 --> 00:03:03,957
to find good vulnerabilities that let us do fun things,

67
00:03:03,957 --> 00:03:06,198
that's a great area to motivate research.

68
00:03:06,198 --> 00:03:07,528
This is unique, right?

69
00:03:07,528 --> 00:03:09,462
This is unique and really exciting.

70
00:03:09,462 --> 00:03:11,792
So I'm gonna try to suggest a strategy

71
00:03:11,792 --> 00:03:13,297
for all the defenders out there

72
00:03:13,297 --> 00:03:17,000
to wrap in firmware-related intrusion detection

73
00:03:17,000 --> 00:03:21,264
into like your tactics and strategy, today, right?

74
00:03:21,264 --> 00:03:22,726
So I want you to go home

75
00:03:22,726 --> 00:03:25,660
and I want you to look at some of the recommendations I have

76
00:03:25,660 --> 00:03:28,429
and start implementing them on your enterprise.

77
00:03:28,429 --> 00:03:33,198
We should be capable of detecting with the precision.

78
00:03:33,198 --> 00:03:35,759
We should be able to detect firmware compromises

79
00:03:35,759 --> 00:03:39,363
with the precision that we detect malfeasance in userland.

80
00:03:39,363 --> 00:03:40,561
All right, that's a big should,

81
00:03:40,561 --> 00:03:44,198
but that's what I want to convey today.

82
00:03:44,198 --> 00:03:46,858
It's a big should because all of the code

83
00:03:46,858 --> 00:03:49,495
that's running inside firmware, inside your boot loaders,

84
00:03:49,495 --> 00:03:54,396
is almost all killed before your kernel starts.

85
00:03:54,396 --> 00:03:56,923
So before your kernel starts and before the watchdogs

86
00:03:56,924 --> 00:03:59,627
and the daemons that you have to detect compromise start,

87
00:03:59,627 --> 00:04:01,132
all that code is gone.

88
00:04:01,132 --> 00:04:03,000
Now, people are gonna call me out on that,

89
00:04:03,000 --> 00:04:06,264
but for the most part, the thousands of applications

90
00:04:06,264 --> 00:04:10,066
that run inside UEFI are gone from memory.

91
00:04:10,066 --> 00:04:11,957
As Andrew Case puts it, like the current way

92
00:04:11,957 --> 00:04:15,792
we do forensics just falls apart, at this point.

93
00:04:15,792 --> 00:04:18,132
So this is UEFI kind of block diagram,

94
00:04:18,132 --> 00:04:20,264
represented in colors that I like

95
00:04:20,264 --> 00:04:22,000
and, on this laptop right here,

96
00:04:22,000 --> 00:04:26,495
I have 1,500 files, applications,

97
00:04:26,495 --> 00:04:30,297
running before my boot loader takes over.

98
00:04:30,297 --> 00:04:34,198
Within that, there's over 100 lines of compiled code

99
00:04:34,198 --> 00:04:36,263
that we can't defend right now.

100
00:04:36,264 --> 00:04:39,165
You're gonna say, "Ted, you're wrong.

101
00:04:39,165 --> 00:04:40,495
We can defend that."

102
00:04:40,495 --> 00:04:43,198
There's things called trusted boot -- you mentioned it.

103
00:04:43,198 --> 00:04:47,527
In the TPM 2.0 spec and the TSS,

104
00:04:47,528 --> 00:04:48,957
there's something called a measurement log,

105
00:04:48,957 --> 00:04:50,363
where we can see everything

106
00:04:50,363 --> 00:04:52,561
that gets executed, if it was measured.

107
00:04:52,561 --> 00:04:56,890
We can pull that measurement off and then we can attest it.

108
00:04:56,891 --> 00:05:00,627
Well, yes, but, by the time

109
00:05:00,627 --> 00:05:02,726
your boot loader takes over the measurement log

110
00:05:02,726 --> 00:05:04,957
of all the executions that you were measuring,

111
00:05:04,957 --> 00:05:08,462
if you opted in to measure it, is wiped out of memory.

112
00:05:08,462 --> 00:05:10,231
There's a really cool individual in the audience today

113
00:05:10,231 --> 00:05:11,561
who told me yesterday,

114
00:05:11,561 --> 00:05:14,231
they were working on bringing that into the kernel.

115
00:05:14,231 --> 00:05:16,792
Go forth and conquer, please.

116
00:05:16,792 --> 00:05:18,099
But there's another problem here,

117
00:05:18,099 --> 00:05:22,659
and that's one of the things that firmware is doing

118
00:05:22,660 --> 00:05:24,759
is loading up execution environments

119
00:05:24,759 --> 00:05:28,099
that are completely opaque to us.

120
00:05:28,099 --> 00:05:29,462
A lot of the firmware vulnerabilities

121
00:05:29,462 --> 00:05:31,495
that you've seen over the past two years

122
00:05:31,495 --> 00:05:36,264
have used unsanitized input in something called SMM.

123
00:05:36,264 --> 00:05:42,693
So, SMM, System Management Mode, gets populated by UEFI.

124
00:05:42,693 --> 00:05:44,066
We put a lot of code in there,

125
00:05:44,066 --> 00:05:46,330
we structure it, we point execution pointers

126
00:05:46,330 --> 00:05:49,495
somewhere inside the memory controlled by SMM.

127
00:05:49,495 --> 00:05:51,429
It wraps itself a little bit

128
00:05:51,429 --> 00:05:54,363
and then starts locking off regions of memory.

129
00:05:54,363 --> 00:05:56,726
It does those locks such that other modes,

130
00:05:56,726 --> 00:05:59,198
your rings, you know, zero through 3

131
00:05:59,198 --> 00:06:01,296
can't then go introspect into that.

132
00:06:01,297 --> 00:06:03,132
They can't write. They can't read.

133
00:06:03,132 --> 00:06:07,165
So, now, we have tons of code running before our kernel starts

134
00:06:07,165 --> 00:06:09,033
and alongside our kernel,

135
00:06:09,033 --> 00:06:13,396
and we can't introspect into any of it and we are cause

136
00:06:13,396 --> 00:06:14,825
to defend it, right? So how do we do that?

137
00:06:21,264 --> 00:06:26,594
So, this mainly applies to Intel devices. Intel.

138
00:06:26,594 --> 00:06:29,693
AMD has a similar kind of environment.

139
00:06:29,693 --> 00:06:33,000
ARM, if you're familiar there, has something called Trust Zone.

140
00:06:33,000 --> 00:06:35,396
TrustZone is probably more equivalent

141
00:06:35,396 --> 00:06:37,825
to Intel ME, the Management Engine,

142
00:06:37,825 --> 00:06:42,000
or, for newer systems or Adam Systems, Tixi.

143
00:06:42,000 --> 00:06:44,429
In there, you'll also find very opaque environments

144
00:06:44,429 --> 00:06:45,726
that we're charged to defend,

145
00:06:45,726 --> 00:06:49,759
but let's put them out of scope for right now.

146
00:06:49,759 --> 00:06:52,759
We have lots of code executing before the kernel,

147
00:06:52,759 --> 00:06:56,132
lots of code executing side-by-side our kernel,

148
00:06:56,132 --> 00:06:59,198
yet, some will argue that this attack surface

149
00:06:59,198 --> 00:07:02,363
for these environments seems very small, right?

150
00:07:02,363 --> 00:07:04,528
And we all will compute associated risk

151
00:07:04,528 --> 00:07:06,660
while contending that attackers require

152
00:07:06,660 --> 00:07:10,000
outstanding sophistication to compromise these things.

153
00:07:10,000 --> 00:07:11,627
"So, Ted, why are you up there, telling me

154
00:07:11,627 --> 00:07:14,396
that we have to defend them?" Right?

155
00:07:14,396 --> 00:07:17,528
Over the last 2 years, like I said,

156
00:07:17,528 --> 00:07:20,594
the 25 security presentations I mentioned,

157
00:07:20,594 --> 00:07:23,231
they are all claiming proof of concept exploits

158
00:07:23,231 --> 00:07:25,396
for these environments, right?

159
00:07:25,396 --> 00:07:30,000
It costs $100,000 to buy a rat, to put it into a UEFI,

160
00:07:30,000 --> 00:07:32,726
and it costs probably about that money

161
00:07:32,726 --> 00:07:34,264
to also find a vulnerability.

162
00:07:34,264 --> 00:07:36,000
So you purchase the vulnerability once,

163
00:07:36,000 --> 00:07:40,462
then you scale your rat out unto infinity.

164
00:07:40,462 --> 00:07:44,890
That risk is also magnified for us in the opposite direction.

165
00:07:44,891 --> 00:07:47,066
There's a big fragmentation problem

166
00:07:47,066 --> 00:07:49,296
with firmware, similar to Android,

167
00:07:49,297 --> 00:07:52,726
Only a magnitude larger, in the amount of code

168
00:07:52,726 --> 00:07:56,561
that goes into UEFI and several magnitudes larger

169
00:07:56,561 --> 00:08:00,726
than the amount of devices that are supported by OEMs.

170
00:08:00,726 --> 00:08:04,198
In May 2014, I created a little spider

171
00:08:04,198 --> 00:08:06,726
that went to all the OEMs I could think of

172
00:08:06,726 --> 00:08:08,231
and started downloading all their firmware,

173
00:08:08,231 --> 00:08:09,924
just went to all their download pages,

174
00:08:09,924 --> 00:08:11,792
looked for anything that looked like firmware

175
00:08:11,792 --> 00:08:14,395
or a firmware updater, and downloaded it, right?

176
00:08:14,396 --> 00:08:17,099
I got 50 gigs of firmware.

177
00:08:17,099 --> 00:08:20,462
After I kind of de-duped that a little bit, I was at 21 gigs.

178
00:08:20,462 --> 00:08:25,396
So, 21 gigs for about 2,500 devices.

179
00:08:25,396 --> 00:08:28,462
As of last month, that 50 gigs that I downloaded,

180
00:08:28,462 --> 00:08:31,066
if you run that spider again, is 80 gigs

181
00:08:31,066 --> 00:08:34,000
and that's on GitHub, too, if you want to replicate that.

182
00:08:34,000 --> 00:08:36,131
Also, send me an e-mail, I'll send you that dump, too.

183
00:08:38,626 --> 00:08:42,362
So, out of that, most of it is updates

184
00:08:42,363 --> 00:08:43,627
and they're trivial updates.

185
00:08:43,626 --> 00:08:45,791
There are one or two lines of code that are patch

186
00:08:45,792 --> 00:08:49,033
that require another 16 megs of download.

187
00:08:49,033 --> 00:08:52,132
So that's why I can reduce that 54 to 21.

188
00:08:52,132 --> 00:08:56,957
Within all of those updates are a lot of security patches.

189
00:08:56,957 --> 00:08:59,462
I hope everyone, before you think about doing

190
00:08:59,462 --> 00:09:01,726
compromise detection in firmware,

191
00:09:01,726 --> 00:09:05,066
is including BIOS and UEFI patches in your update,

192
00:09:05,066 --> 00:09:06,891
your vulnerability management cycle.

193
00:09:06,891 --> 00:09:09,231
If you're not, there are published attacks

194
00:09:09,231 --> 00:09:10,924
against the firmware running on the systems

195
00:09:10,924 --> 00:09:13,495
that you're charged to defend.

196
00:09:13,495 --> 00:09:16,099
So I'm gonna scope this real quick.

197
00:09:16,099 --> 00:09:18,495
I don't want to talk about unmodifiable silicon,

198
00:09:18,495 --> 00:09:20,066
I don't want to talk about microcode,

199
00:09:20,066 --> 00:09:21,330
I want to talk about UEFI,

200
00:09:21,330 --> 00:09:23,693
I want to talk about all the SPI Flash

201
00:09:23,693 --> 00:09:28,231
that you UEFI boots from and executes out of.

202
00:09:28,231 --> 00:09:30,033
I want to talk about the embedded controller data

203
00:09:30,033 --> 00:09:31,429
on Lenovo laptops.

204
00:09:31,429 --> 00:09:33,693
I want to talk about updatable firmware

205
00:09:33,693 --> 00:09:36,561
on your video cards, early-stage boot loaders.

206
00:09:36,561 --> 00:09:38,066
So the EFI boot loaders that you have

207
00:09:38,066 --> 00:09:40,099
on all your Apple machines,

208
00:09:40,099 --> 00:09:43,660
the GRUB EFI boot loaders that you might have.

209
00:09:43,660 --> 00:09:45,329
I think there's a ThinkPad back there.

210
00:09:45,330 --> 00:09:46,825
And, of course, all the configurations

211
00:09:46,825 --> 00:09:49,297
that go into this, right?

212
00:09:49,297 --> 00:09:51,396
So, within that scope,

213
00:09:51,396 --> 00:09:53,726
there's tons of security primitives, right?

214
00:09:53,726 --> 00:09:55,759
There's tons of things that initialize,

215
00:09:55,759 --> 00:09:58,726
like the full disc encryption entropy input;

216
00:09:58,726 --> 00:10:01,000
your network card, if you're pixie-booting;

217
00:10:01,000 --> 00:10:04,858
there's signature checking on all that.

218
00:10:04,858 --> 00:10:07,263
Remember, these are the things that boot strap awesomeness,

219
00:10:07,264 --> 00:10:10,363
like the awesomeness that we get in repeatably built Tors,

220
00:10:10,363 --> 00:10:12,660
awesomeness in credential stores, right?

221
00:10:12,660 --> 00:10:16,429
I want to target all of that foundation code, right?

222
00:10:16,429 --> 00:10:19,858
Now, as we've seen, from Google's Project Zero

223
00:10:19,858 --> 00:10:23,000
and their focus on AV over the last couple of months,

224
00:10:23,000 --> 00:10:24,726
the tools that are designed to help us,

225
00:10:24,726 --> 00:10:27,660
to reduce our risk, may actually introduce it.

226
00:10:27,660 --> 00:10:29,593
So when we're looking at these things

227
00:10:29,594 --> 00:10:32,066
and we're bringing technologies, when we're bringing code

228
00:10:32,066 --> 00:10:34,132
into scope, always ask the question

229
00:10:34,132 --> 00:10:36,231
to what extent have those developers

230
00:10:36,231 --> 00:10:40,495
that you're implicitly trusting gone through code reviews?

231
00:10:40,495 --> 00:10:42,132
And, when they have proprietary code,

232
00:10:42,132 --> 00:10:44,495
why is it proprietary, why is it closed-source?

233
00:10:44,495 --> 00:10:46,264
So I would extend that.

234
00:10:46,264 --> 00:10:50,660
I would extend that to say why can't we get firmware open?

235
00:10:50,660 --> 00:10:53,165
Why, me, as someone who has to defend

236
00:10:53,165 --> 00:10:55,231
tons of computers that run Facebook,

237
00:10:55,231 --> 00:10:57,660
why am I subject to running binary blobs

238
00:10:57,660 --> 00:10:59,429
on these systems, right?

239
00:10:59,429 --> 00:11:00,891
That depends a lot on the people,

240
00:11:00,891 --> 00:11:03,527
a lot on culture, a lot on our attitude.

241
00:11:03,528 --> 00:11:06,693
Very difficult to protect or to perfect, but, hopefully,

242
00:11:06,693 --> 00:11:09,165
over the next couple of years, we can get there:

243
00:11:09,165 --> 00:11:12,560
totally open firmware systems.

244
00:11:12,561 --> 00:11:17,660
So, you know,

245
00:11:17,660 --> 00:11:19,957
I want to put these environments

246
00:11:19,957 --> 00:11:21,693
under a really awesome microscope,

247
00:11:21,693 --> 00:11:23,858
a really dense microscope.

248
00:11:23,858 --> 00:11:28,165
And I want to be diligent, too, because the people

249
00:11:28,165 --> 00:11:32,429
who are working for these OEMs, these OEDs, and these venders,

250
00:11:32,429 --> 00:11:34,495
they have a hard time shipping this code

251
00:11:34,495 --> 00:11:36,660
and we should take every opportunity we can

252
00:11:36,660 --> 00:11:38,065
to help them, right?

253
00:11:38,066 --> 00:11:40,363
If we're purchasing tons of machines

254
00:11:40,363 --> 00:11:42,825
that have binary blobs,

255
00:11:42,825 --> 00:11:45,099
we're probably sending them a lot of money,

256
00:11:45,099 --> 00:11:47,858
which means our voice carries louder than others.

257
00:11:47,858 --> 00:11:50,363
So, if we have the opportunity to get in there and say,

258
00:11:50,363 --> 00:11:54,792
"Hey, let me help you with this, let me help you ship open code,"

259
00:11:54,792 --> 00:11:56,594
they'll be really receptive, right?

260
00:11:56,594 --> 00:11:58,693
And that's not just the people we purchase from,

261
00:11:58,693 --> 00:12:01,561
that will be all of you in the room, too.

262
00:12:01,561 --> 00:12:03,066
So our goal should always be

263
00:12:03,066 --> 00:12:08,132
to help our venders ship safe products.

264
00:12:08,132 --> 00:12:11,198
So the attack surface I mentioned earlier for UEFI,

265
00:12:11,198 --> 00:12:12,495
what does it look like?

266
00:12:12,495 --> 00:12:14,891
If a vender doesn't check signatures

267
00:12:14,891 --> 00:12:17,429
on firmware updates, I can escalate on your machine.

268
00:12:17,429 --> 00:12:20,792
If they're not checking authentication

269
00:12:20,792 --> 00:12:23,396
on update channels, then I can like

270
00:12:23,396 --> 00:12:25,824
remotely infect your machine. So, over the last month,

271
00:12:25,825 --> 00:12:28,957
if you're looking at firmwaresecurity.com's blog,

272
00:12:28,957 --> 00:12:30,231
you'll see there's a couple of tools

273
00:12:30,231 --> 00:12:32,066
that weren't checking certificates,

274
00:12:32,066 --> 00:12:34,891
they just had like CRL-k kind of stuff here.

275
00:12:34,891 --> 00:12:38,429
That allows for remote intrusion.

276
00:12:38,429 --> 00:12:40,264
There is even a bigger problem here,

277
00:12:40,264 --> 00:12:43,462
and some of the repositories

278
00:12:43,462 --> 00:12:46,528
where firmware comes from also is not protected.

279
00:12:46,528 --> 00:12:48,462
If you find one of those, that'll allow

280
00:12:48,462 --> 00:12:50,924
for mass infection, so please, please, please,

281
00:12:50,924 --> 00:12:53,924
tell that vender, quickly, to go and lock down

282
00:12:53,924 --> 00:12:56,957
like the FTP in which they serve their firmware from.

283
00:12:56,957 --> 00:12:58,693
And then, from the security conferences,

284
00:12:58,693 --> 00:13:01,000
we see vulnerabilities in update channels.

285
00:13:01,000 --> 00:13:03,792
We see vulnerabilities in secure boot implementations.

286
00:13:03,792 --> 00:13:06,396
Those will allow for one or two, right?,

287
00:13:06,396 --> 00:13:09,791
for the escalation or for the intrusion.

288
00:13:09,792 --> 00:13:15,561
So, out of the top 12 venders out there, by device count,

289
00:13:15,561 --> 00:13:18,198
3 of them, out of the 12, 3 of them still do

290
00:13:18,198 --> 00:13:22,198
firmware updates over unauthenticated channels.

291
00:13:22,198 --> 00:13:25,329
One of those has an intersection where they're not doing

292
00:13:25,330 --> 00:13:29,033
signature checking, too, so all devices by that vender

293
00:13:29,033 --> 00:13:31,693
are susceptible to a remote compromise.

294
00:13:31,693 --> 00:13:35,165
All I have to do is man-in-the-middle your network.

295
00:13:35,165 --> 00:13:37,264
And, out of the 25 presentations,

296
00:13:37,264 --> 00:13:40,891
there contained 40 zero days in the update mechanisms

297
00:13:40,891 --> 00:13:44,165
or channels, all produced by 10 researchers, right?

298
00:13:44,165 --> 00:13:47,363
So keep that context in mind.

299
00:13:47,363 --> 00:13:50,891
I have a lot of applications running on my laptop in UEFI,

300
00:13:50,891 --> 00:13:54,924
all of which are linked against an open SSL version 098,

301
00:13:54,924 --> 00:13:57,098
which was just deprecated last month.

302
00:13:57,099 --> 00:13:59,759
It's not a problem right now, but if we let those things

303
00:13:59,759 --> 00:14:02,165
kind of sit, they're going to be problems.

304
00:14:02,165 --> 00:14:06,296
There are memory-handling issues in X509

305
00:14:06,297 --> 00:14:07,759
in the firmware that I have here.

306
00:14:07,759 --> 00:14:11,132
Not attackable, but just problems that, left unchecked,

307
00:14:11,132 --> 00:14:16,032
will be really hard for me to defend my enterprise.

308
00:14:16,033 --> 00:14:19,132
So, simultaneously with that motivation

309
00:14:19,132 --> 00:14:21,560
to venders and developers,

310
00:14:21,561 --> 00:14:26,132
my defender brothers and sisters out there, let's scope.

311
00:14:26,132 --> 00:14:27,693
Let's take this scope and apply it

312
00:14:27,693 --> 00:14:29,891
to detection and compromise, as best as possible.

313
00:14:29,891 --> 00:14:31,660
We're gonna do two things. One, we're gonna push

314
00:14:31,660 --> 00:14:33,693
on our venders in a very nice way.

315
00:14:33,693 --> 00:14:35,329
And, two, we're gonna apply some techniques

316
00:14:35,330 --> 00:14:39,363
I'm going to show you right now, which we use at Facebook.

317
00:14:39,363 --> 00:14:41,759
So, before we even get into firmware,

318
00:14:41,759 --> 00:14:44,000
I want to talk about kernel extensions.

319
00:14:44,000 --> 00:14:46,099
So the kernel extension on OS X.

320
00:14:46,099 --> 00:14:48,561
If I'm going to collect all the extensions

321
00:14:48,561 --> 00:14:50,858
that are loaded across my enterprise,

322
00:14:50,858 --> 00:14:54,593
I want to aggregate-count just the path names of them

323
00:14:54,594 --> 00:14:58,924
and then I want to ascend-sort, so I have the top 10 unique.

324
00:14:58,924 --> 00:15:00,429
I want to grab each one.

325
00:15:00,429 --> 00:15:02,660
If you can do this on your enterprise right now,

326
00:15:02,660 --> 00:15:05,528
you are sitting pretty and you're ready to advance.

327
00:15:05,528 --> 00:15:08,363
So, here, from the 12,000 desktops and laptops

328
00:15:08,363 --> 00:15:11,891
that I have to defend, these are the top, the most unique.

329
00:15:11,891 --> 00:15:14,329
If you find something called Direct Hardware,

330
00:15:14,330 --> 00:15:16,891
maybe someone's doing research, maybe someone's trying

331
00:15:16,891 --> 00:15:19,098
to read physical memory from your machines.

332
00:15:19,099 --> 00:15:21,330
If you find that, let me know.

333
00:15:21,330 --> 00:15:24,000
If you find that, probably take it down.

334
00:15:26,693 --> 00:15:29,231
Next, I want to look at the kernel path.

335
00:15:29,231 --> 00:15:33,957
So, the kernel path, the cache on OS X, is very well-known.

336
00:15:33,957 --> 00:15:36,726
We have file integrity monitoring solutions.

337
00:15:36,726 --> 00:15:40,264
I run one that I kind of write, called OS Query,

338
00:15:40,264 --> 00:15:42,264
and I put it at all of the EFI

339
00:15:42,264 --> 00:15:44,099
and I point it at all the kernel versions

340
00:15:44,099 --> 00:15:46,792
and I can see when anyone updates their kernel.

341
00:15:46,792 --> 00:15:49,792
I should see this in tandem across the entire enterprise

342
00:15:49,792 --> 00:15:51,759
when a new version of OS X comes out.

343
00:15:51,759 --> 00:15:54,429
So this is over the last week, just this week.

344
00:15:54,429 --> 00:15:56,693
I see tons of people updating to 14.3.0

345
00:15:56,693 --> 00:15:59,132
and tons of people updating to 15.4.0

346
00:15:59,132 --> 00:16:00,462
That makes a lot of sense.

347
00:16:00,462 --> 00:16:03,593
I see nothing kind of lagging behind,

348
00:16:03,594 --> 00:16:04,825
maybe one or two devices

349
00:16:04,825 --> 00:16:06,825
that are just coming online, maybe loaners.

350
00:16:06,825 --> 00:16:09,033
This is awesome.

351
00:16:09,033 --> 00:16:10,297
I like to do this.

352
00:16:10,297 --> 00:16:11,924
This is really easy to check,

353
00:16:11,924 --> 00:16:14,198
for kernel extensions or for kernel modules.

354
00:16:14,198 --> 00:16:16,329
If you're gonna get attacked by a rootkit, you're like

355
00:16:16,330 --> 00:16:17,726
"Ted, you're gonna get attacked by a rootkit.

356
00:16:17,726 --> 00:16:20,297
They're gonna hide all of the syscalls

357
00:16:20,297 --> 00:16:23,066
that you're using to check this locations."

358
00:16:23,066 --> 00:16:26,231
Well, deploy it today and, when that rootkit comes along

359
00:16:26,231 --> 00:16:29,528
and establishes an I/O- controlled character device

360
00:16:29,528 --> 00:16:32,330
inside of DEV, you will see it pop up.

361
00:16:32,330 --> 00:16:36,066
You'll see the kernel rootkit

362
00:16:36,066 --> 00:16:39,066
as it is trampolining all of those syscalls.

363
00:16:39,066 --> 00:16:40,462
And that's good enough for me.

364
00:16:40,462 --> 00:16:42,495
If I can get all that data, I can react pretty quickly.

365
00:16:47,825 --> 00:16:49,297
So, over this last week,

366
00:16:49,297 --> 00:16:50,825
I looked at all of the new device nodes

367
00:16:50,825 --> 00:16:53,891
that came up on my enterprise and here's what I found.

368
00:16:53,891 --> 00:16:56,132
I researched all of them. They all look really good.

369
00:16:56,132 --> 00:16:59,132
Shame on whoever named the hardware accelerator

370
00:16:59,132 --> 00:17:01,726
for Android devices "hax". [ Laughter ]

371
00:17:01,726 --> 00:17:04,560
All right? So whoever wrote that and thought it was a good idea,

372
00:17:04,560 --> 00:17:07,329
you made me like poop my pants, so.

373
00:17:07,329 --> 00:17:08,759
Gosh!

374
00:17:08,759 --> 00:17:10,231
That was crazy.

375
00:17:10,231 --> 00:17:11,660
Here's all the boot loaders.

376
00:17:11,660 --> 00:17:13,396
So these are organized by hash.

377
00:17:13,396 --> 00:17:16,297
I didn't actually put the MD5 or the Shot G56 up,

378
00:17:16,297 --> 00:17:19,396
but what's odd about this here?

379
00:17:19,396 --> 00:17:22,329
So I saw two updating kernels over the last week

380
00:17:22,329 --> 00:17:27,593
and I'm seeing much more variance inside my boot loaders.

381
00:17:27,594 --> 00:17:29,561
So the one on the top here is actually

382
00:17:29,561 --> 00:17:32,297
someone experimenting with a couple machines,

383
00:17:32,297 --> 00:17:34,363
trying to optimize a boot loader.

384
00:17:34,363 --> 00:17:35,924
The one in the middle there is me,

385
00:17:35,924 --> 00:17:38,858
so I was just testing to see if I could find a boot loader.

386
00:17:38,858 --> 00:17:40,956
There's an OS X example boot loader on GitHub

387
00:17:40,957 --> 00:17:42,924
that you can go out and compile yourself.

388
00:17:42,924 --> 00:17:44,726
You can put it in a little exfiltration

389
00:17:44,726 --> 00:17:46,627
of the full disc encryption key there.

390
00:17:46,627 --> 00:17:48,330
You can deploy it to a machine and you can see

391
00:17:48,330 --> 00:17:50,197
if your file integrity monitoring picks up.

392
00:17:50,198 --> 00:17:51,429
Works awesome.

393
00:17:54,363 --> 00:17:58,627
So I would propose that these are really easy things to do

394
00:17:58,627 --> 00:17:59,924
and Intel will back me up,

395
00:17:59,924 --> 00:18:01,693
that they're really important things to do.

396
00:18:01,693 --> 00:18:04,759
In their 2016 threat predictions,

397
00:18:04,759 --> 00:18:07,231
they say that firmware attacks are gonna amplify.

398
00:18:07,231 --> 00:18:09,594
Now, I understand why they're gonna say that.

399
00:18:09,594 --> 00:18:11,759
They have big teams that are researching this.

400
00:18:11,759 --> 00:18:13,792
But if you think about cloud computing, too,

401
00:18:13,792 --> 00:18:18,956
if you think about all those virtualization technologies,

402
00:18:18,957 --> 00:18:22,396
firmware attacks are ripe for doing lateral attack

403
00:18:22,396 --> 00:18:24,924
or for escalating outside a virtual machine.

404
00:18:24,924 --> 00:18:28,924
So, money invested into firmware attacks

405
00:18:28,924 --> 00:18:32,000
is not only gonna be targeting our enterprise, but also these,

406
00:18:32,000 --> 00:18:36,363
and we're gonna see the back flow from it.

407
00:18:36,363 --> 00:18:38,957
So, these things, the file integrity monitoring

408
00:18:38,957 --> 00:18:40,594
and the hashing that I just showed you before,

409
00:18:40,594 --> 00:18:42,792
they deteriorate pretty quickly

410
00:18:42,792 --> 00:18:44,659
when I try to go below the boot loader.

411
00:18:44,660 --> 00:18:46,924
So let's step onto the shoulder of giants

412
00:18:46,924 --> 00:18:50,429
and look at Intel's CHIPSEC and MITRE's Copernicus, right?

413
00:18:50,429 --> 00:18:53,594
Two tools that are designed to dump Flash, pull it off,

414
00:18:53,594 --> 00:18:56,528
so that you can hash it.

415
00:18:56,528 --> 00:19:00,561
So, can we introspect into firmware from userland?

416
00:19:00,561 --> 00:19:02,462
Those two things that I mentioned,

417
00:19:02,462 --> 00:19:04,627
they both come with pretty big warnings.

418
00:19:04,627 --> 00:19:07,858
Those warnings include "Do not use this in production."

419
00:19:07,858 --> 00:19:10,956
So, from userland, from a stable deployment,

420
00:19:10,957 --> 00:19:12,759
can we check firmware?

421
00:19:12,759 --> 00:19:14,066
Not really.

422
00:19:14,066 --> 00:19:15,561
We can't really do that today

423
00:19:15,561 --> 00:19:18,593
and I'm kind of hard pressed to push out kernel extensions

424
00:19:18,594 --> 00:19:21,693
or kernel modules just to read a bit of Flash.

425
00:19:21,693 --> 00:19:25,033
So what I want to do is kind of get close without compromising

426
00:19:25,033 --> 00:19:27,527
the stability of my systems, right?

427
00:19:27,528 --> 00:19:29,429
So let's look at ACPI.

428
00:19:29,429 --> 00:19:32,792
ACPI tables are another thing that we can check variants of.

429
00:19:32,792 --> 00:19:35,033
It's really hard to determine what I'm putting up here,

430
00:19:35,033 --> 00:19:36,956
but this is over those 12,000 laptops

431
00:19:36,957 --> 00:19:41,000
and these are all the counts of ACPI tables,

432
00:19:41,000 --> 00:19:43,264
and then the unique hashes that I see.

433
00:19:43,264 --> 00:19:45,561
The ones at the end kind of stick out,

434
00:19:45,561 --> 00:19:47,593
even more so when I graph it.

435
00:19:47,594 --> 00:19:50,561
The ones at the end here are probably unique devices,

436
00:19:50,561 --> 00:19:53,924
or they're devices with unique hardware attached to them.

437
00:19:53,924 --> 00:19:56,627
I can take that and I can join it against SMBIOS.

438
00:19:56,627 --> 00:19:58,561
So SMBIOS will report the version

439
00:19:58,561 --> 00:20:01,000
of firmware that's supposed to be on these devices

440
00:20:01,000 --> 00:20:03,792
as well as all the hardware that should be attached.

441
00:20:03,792 --> 00:20:06,924
When I make this correlation, I can cross out the bottom there

442
00:20:06,924 --> 00:20:11,297
and say that this is unique hardware; this is not an attack.

443
00:20:11,297 --> 00:20:14,132
I can also do it across my PCI device ecosystem.

444
00:20:14,132 --> 00:20:16,066
So I can look at all the PCI devices

445
00:20:16,066 --> 00:20:18,495
on my laptops with OS Query.

446
00:20:18,495 --> 00:20:20,792
This is a select star from PCI devices.

447
00:20:20,792 --> 00:20:24,264
And I can see if that data inside that ACPI

448
00:20:24,264 --> 00:20:28,296
is backed up by the PCIs that are attached.

449
00:20:28,297 --> 00:20:30,495
So over our enterprise in the last week,

450
00:20:30,495 --> 00:20:32,593
I noticed 30 PCI devices

451
00:20:32,594 --> 00:20:34,528
that were only observed once, right?

452
00:20:34,528 --> 00:20:37,528
So, laptops, they experience a lot of noise.

453
00:20:37,528 --> 00:20:39,099
When you do this on servers,

454
00:20:39,099 --> 00:20:41,297
they experience little to no noise.

455
00:20:41,297 --> 00:20:44,363
Do this for USBs, too, on your laptops.

456
00:20:44,363 --> 00:20:47,000
Lots of people attach USB. This is common.

457
00:20:47,000 --> 00:20:49,099
On servers that are in data centers,

458
00:20:49,099 --> 00:20:50,792
no one should be attaching USB.

459
00:20:50,792 --> 00:20:53,099
This is instant signal for your defenders.

460
00:20:57,132 --> 00:21:01,363
So, also, in userland, EFI variables are reported.

461
00:21:01,363 --> 00:21:04,297
The EFI variables that select the boot device

462
00:21:04,297 --> 00:21:06,132
that your computer's gonna boot,

463
00:21:06,132 --> 00:21:08,924
as well as the file on that device.

464
00:21:08,924 --> 00:21:12,363
It also controls things like security primitives on OS X.

465
00:21:12,363 --> 00:21:15,693
If I want to disable SIP, I can write an EFI variable

466
00:21:15,693 --> 00:21:19,231
that that turns it off or I can write a flag mask

467
00:21:19,231 --> 00:21:21,429
that turns off specific features.

468
00:21:21,429 --> 00:21:24,066
Now, when I watch these variables change over time,

469
00:21:24,066 --> 00:21:27,495
I can watch every developer who's turning off SIP.

470
00:21:27,495 --> 00:21:29,000
I can watch every developer

471
00:21:29,000 --> 00:21:30,429
changing their boot device

472
00:21:30,429 --> 00:21:33,330
or something else trying to change their boot device, too.

473
00:21:33,330 --> 00:21:36,000
I want to take this data and I join it

474
00:21:36,000 --> 00:21:39,198
against all of the EFI hashes that I saw,

475
00:21:39,198 --> 00:21:41,198
as well as the kernel versions that I saw.

476
00:21:41,198 --> 00:21:43,660
I can now reduce the noise of things

477
00:21:43,660 --> 00:21:46,396
that are induced by updates or things that are induced

478
00:21:46,396 --> 00:21:50,396
by developers actively trying to replace their boot loaders.

479
00:21:50,396 --> 00:21:53,627
So, for these two here, I see SMC Flasher results.

480
00:21:53,627 --> 00:21:57,462
So someone just updated the SMC Flash on their OS X.

481
00:21:57,462 --> 00:21:59,858
I can also see when a kernel crashes.

482
00:21:59,858 --> 00:22:01,363
I get the stack trace.

483
00:22:01,363 --> 00:22:04,033
So if I want to do any sort of vulnerability detection

484
00:22:04,033 --> 00:22:05,659
or vulnerability research,

485
00:22:05,660 --> 00:22:08,957
here's a ton of stack traces that I can go investigate.

486
00:22:08,957 --> 00:22:10,462
Awesome! Right?

487
00:22:10,462 --> 00:22:15,594
And that's actually led to a couple of submission sample.

488
00:22:15,594 --> 00:22:18,033
So all this data that I showed is available

489
00:22:18,033 --> 00:22:20,296
in the OS Query tool.

490
00:22:20,297 --> 00:22:21,891
I run all of these queries

491
00:22:21,891 --> 00:22:24,231
that generate this data all the time.

492
00:22:24,231 --> 00:22:26,462
All this data was just pulled from this week.

493
00:22:26,462 --> 00:22:28,330
I want to release all the queries

494
00:22:28,330 --> 00:22:30,165
that I used to build these visualizations,

495
00:22:30,165 --> 00:22:33,396
as well as the join, so you can pull the signal out,

496
00:22:33,396 --> 00:22:35,363
and I want to make them all available to you,

497
00:22:35,363 --> 00:22:37,858
following me getting off this stage.

498
00:22:37,858 --> 00:22:40,330
So, if you do have an OS Query deployment

499
00:22:40,330 --> 00:22:41,956
or if you have OS X or Linux machines

500
00:22:41,957 --> 00:22:44,264
that you want to defend, install this tool.

501
00:22:44,264 --> 00:22:46,693
It's a userland daemon, it pulls all this data out;

502
00:22:46,693 --> 00:22:48,198
it'll sent it to your aggregator.

503
00:22:50,825 --> 00:22:53,495
That's our logo and it's really easy to interact with it,

504
00:22:53,495 --> 00:22:55,197
so if I wanted to look at this device

505
00:22:55,198 --> 00:22:58,363
for a thunderbolt adaptor that I just attached,

506
00:22:58,363 --> 00:23:00,825
I could really easily select from PCI devices,

507
00:23:00,825 --> 00:23:04,033
exclude all the devices from Intel and out pops 3.0.

508
00:23:04,033 --> 00:23:08,296
The last one is a thunderbolt device that was attached.

509
00:23:08,297 --> 00:23:11,099
If I want to see all the events that happen over time,

510
00:23:11,099 --> 00:23:12,693
I can look at it in the event stream.

511
00:23:12,693 --> 00:23:14,198
So with all operating systems,

512
00:23:14,198 --> 00:23:16,429
they usually have some sort of API layer

513
00:23:16,429 --> 00:23:17,825
where you can get hardware events.

514
00:23:17,825 --> 00:23:21,396
If we attach to that, now we can slurp up all hardware events

515
00:23:21,396 --> 00:23:26,396
for OS X, for Linux; and Windows, very soon.

516
00:23:26,396 --> 00:23:30,033
So I can see that PCI device being attached at a time.

517
00:23:30,033 --> 00:23:32,659
If I then see that a device was compromised

518
00:23:32,660 --> 00:23:36,495
by a firmware attack, I can do the exact DIR process,

519
00:23:36,495 --> 00:23:39,330
go back and reconstruct the attack with the events,

520
00:23:39,330 --> 00:23:42,824
and, plus, all this meta data that I've been pulling out.

521
00:23:42,825 --> 00:23:45,066
So we're always gonna add more stuff related to firmware.

522
00:23:45,066 --> 00:23:46,396
I told you I was obsessed.

523
00:23:46,396 --> 00:23:50,264
Hopefully, my enthusiasm onstage is corroborating that.

524
00:23:50,264 --> 00:23:51,956
These are the tables that are available right now

525
00:23:51,957 --> 00:23:54,660
to do this sort of firmware components incidents response

526
00:23:54,660 --> 00:23:56,231
and intrusion detection.

527
00:23:56,231 --> 00:23:59,759
I want to increase this double, by this time next year.

528
00:23:59,759 --> 00:24:01,330
So there's new creative things

529
00:24:01,330 --> 00:24:02,759
that I can look for from userland.

530
00:24:02,759 --> 00:24:05,660
There is kernel extensions and there are kernel modules.

531
00:24:05,660 --> 00:24:09,528
So, reading Flash in a really repeatable

532
00:24:09,528 --> 00:24:13,891
and safe way is on my docket, too.

533
00:24:13,891 --> 00:24:17,792
So, one last release, one last thing I want to talk about.

534
00:24:17,792 --> 00:24:19,792
I have nothing to do with VirusTotal.

535
00:24:19,792 --> 00:24:21,858
We worked with them over the last couple of months

536
00:24:21,858 --> 00:24:25,627
to add firmware, parsing into VirusTotal.

537
00:24:25,627 --> 00:24:28,231
I'm superhumble to be up here and to announce this,

538
00:24:28,231 --> 00:24:30,231
that you can take a firmware update

539
00:24:30,231 --> 00:24:32,561
or the Flash that you read from your device

540
00:24:32,561 --> 00:24:34,627
and send it in to VirusTotal.

541
00:24:34,627 --> 00:24:36,428
This is the firmware that I run,

542
00:24:36,429 --> 00:24:38,759
the UEFI that I run on my Mac right here,

543
00:24:38,759 --> 00:24:41,198
and this is it pulling out all the meta data about it,

544
00:24:41,198 --> 00:24:42,429
the time that it was compiled,

545
00:24:42,429 --> 00:24:44,561
who and what machine it was compiled,

546
00:24:44,561 --> 00:24:46,330
the device that it was compiled for,

547
00:24:46,330 --> 00:24:49,659
and more specifically, if you can see this on the screen,

548
00:24:49,660 --> 00:24:51,462
it's pulling out every embedded file,

549
00:24:51,462 --> 00:24:53,858
all those 1,500 files that were in there,

550
00:24:53,858 --> 00:24:56,792
and it's checking the hashes to see if anyone ever updated it

551
00:24:56,792 --> 00:24:58,131
or uploaded it here.

552
00:24:58,132 --> 00:25:00,363
So if anyone marks these are malicious,

553
00:25:00,363 --> 00:25:03,429
now, you have instant signal to check against and I think

554
00:25:03,429 --> 00:25:06,462
this is another theme that I want to pitch today.

555
00:25:06,462 --> 00:25:07,924
If you're developing tools

556
00:25:07,924 --> 00:25:10,561
that are in the pipelines for defenders

557
00:25:10,561 --> 00:25:12,033
and you're interested in firmware

558
00:25:12,033 --> 00:25:13,659
or you want to send me an e-mail,

559
00:25:13,660 --> 00:25:17,033
I will gladly help you try to integrate firmware parsing,

560
00:25:17,033 --> 00:25:22,165
try to integrate detection of weirdness into that tool.

561
00:25:22,165 --> 00:25:25,428
So, soon, we'll get out of station.

562
00:25:25,429 --> 00:25:26,660
That will be amazing.

563
00:25:26,660 --> 00:25:28,198
I still think that's a couple of years out

564
00:25:28,198 --> 00:25:31,132
before it's made available to everywhere, to everyone.

565
00:25:31,132 --> 00:25:33,363
But remote out of station is gonna take us

566
00:25:33,363 --> 00:25:35,858
from all the defense and the detection

567
00:25:35,858 --> 00:25:38,890
that we're doing right now and multiply that threefold

568
00:25:38,891 --> 00:25:40,429
and give us really good signal

569
00:25:40,429 --> 00:25:43,858
when something goes out of bounds immediately.

570
00:25:43,858 --> 00:25:47,363
Until then, let's continue this deep forensics and wait

571
00:25:47,363 --> 00:25:50,462
for the two to definitely complement each other.

572
00:25:50,462 --> 00:25:52,726
Thank you so much, and I would like to take

573
00:25:52,726 --> 00:25:54,891
about 5 minutes' worth of questions.

574
00:25:54,891 --> 00:25:57,363
[ Applause ]

575
00:25:57,363 --> 00:26:03,132
♪♪

576
00:26:03,132 --> 00:26:02,132


