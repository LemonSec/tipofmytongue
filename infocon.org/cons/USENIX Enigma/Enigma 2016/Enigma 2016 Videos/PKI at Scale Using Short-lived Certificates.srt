1
00:00:00,198 --> 00:00:05,363
 

2
00:00:05,363 --> 00:00:07,363
[ Applause ]

3
00:00:08,330 --> 00:00:09,495
-All right, thank you.

4
00:00:12,000 --> 00:00:15,495
In the movie the "Minority Report,"

5
00:00:15,495 --> 00:00:18,099
we're looking at a futuristic world

6
00:00:18,099 --> 00:00:19,792
where the police are able

7
00:00:19,792 --> 00:00:22,462
to actually see crimes before they can happen.

8
00:00:22,462 --> 00:00:23,693
And they do this

9
00:00:23,693 --> 00:00:25,429
because they have these things called precogs,

10
00:00:25,429 --> 00:00:29,429
which are sort of like cyborgs that can predict the future.

11
00:00:29,429 --> 00:00:34,065
And they use these cyborgs to figure out

12
00:00:34,066 --> 00:00:35,957
when a murder is going to happen,

13
00:00:35,957 --> 00:00:37,297
and then they can go arrest the person

14
00:00:37,297 --> 00:00:39,032
before that murder happens.

15
00:00:39,033 --> 00:00:41,792
Now, it feels like this would be a really wonderful thing

16
00:00:41,792 --> 00:00:43,132
to be able to take this idea

17
00:00:43,132 --> 00:00:45,461
and move it over to the intrusion detection world

18
00:00:45,462 --> 00:00:47,099
and be able to detect attacks

19
00:00:47,099 --> 00:00:49,263
before they can happen and then just stop them

20
00:00:49,264 --> 00:00:50,495
from ever happening in the first place.

21
00:00:50,495 --> 00:00:51,693
And I would love this.

22
00:00:51,693 --> 00:00:53,957
But even in the movies, it's not so perfect.

23
00:00:53,957 --> 00:00:55,561
In The "Minority Report,"

24
00:00:55,561 --> 00:00:57,858
they have -- I believe it's three precogs,

25
00:00:57,858 --> 00:01:00,165
and occasionally, they don't all agree

26
00:01:00,165 --> 00:01:01,792
on what the future's gonna look like.

27
00:01:01,792 --> 00:01:05,165
And so you end up with a world where there's a minority report

28
00:01:05,165 --> 00:01:07,759
where one of the three sees a different vision of the future,

29
00:01:07,759 --> 00:01:09,759
and then chaos, of course, ensues

30
00:01:09,759 --> 00:01:12,660
as they try to figure out the reality of the situation

31
00:01:12,660 --> 00:01:13,957
and what's really gonna happen.

32
00:01:13,957 --> 00:01:15,957
And I would say this chaos

33
00:01:15,957 --> 00:01:17,957
is starting to approach a little bit more

34
00:01:17,957 --> 00:01:20,594
what intrusion detection looks like in the real world today.

35
00:01:20,594 --> 00:01:25,231
In fact, if you look at a lot of the high-profile attacks

36
00:01:25,231 --> 00:01:28,297
from, say, the last couple of years,

37
00:01:28,297 --> 00:01:31,131
and you plot them here on a scale

38
00:01:31,132 --> 00:01:34,528
of the time from when the attack was discovered

39
00:01:34,528 --> 00:01:37,495
and then going back to when the attack started,

40
00:01:37,495 --> 00:01:40,231
you can get a sense of how long these systems were compromised

41
00:01:40,231 --> 00:01:43,131
before anyone had the slightest clue.

42
00:01:43,132 --> 00:01:47,594
And unfortunately, the data is not particularly happy.

43
00:01:47,594 --> 00:01:50,759
So what we can see is that we're looking at an order of months.

44
00:01:50,759 --> 00:01:52,297
And I believe an earlier speaker today

45
00:01:52,297 --> 00:01:55,660
talked about 200 to 250 days.

46
00:01:55,660 --> 00:01:57,264
That sounds about right

47
00:01:57,264 --> 00:01:59,594
with some of the data that I was seeing out there.

48
00:01:59,594 --> 00:02:03,561
This is a very long time to have your systems compromised

49
00:02:03,561 --> 00:02:05,528
and to not be doing anything about it.

50
00:02:05,528 --> 00:02:06,924
And so I would argue that,

51
00:02:06,924 --> 00:02:09,396
with all the research we've done in intrusion detection

52
00:02:09,395 --> 00:02:10,660
up to today,

53
00:02:10,660 --> 00:02:12,627
there's a lot of really great systems out there.

54
00:02:12,627 --> 00:02:14,396
But for whatever reasons,

55
00:02:14,396 --> 00:02:16,099
they aren't ubiquitously deployed,

56
00:02:16,099 --> 00:02:17,494
and if they are,

57
00:02:17,495 --> 00:02:19,726
they aren't helping out with these kinds of problems.

58
00:02:19,726 --> 00:02:22,957
And so we have a potential issue here.

59
00:02:22,957 --> 00:02:24,495
Now, I'll sort of circle back

60
00:02:24,495 --> 00:02:26,099
to intrusion detection a little bit,

61
00:02:26,099 --> 00:02:28,726
but first I wanted to set the stage for today's talk.

62
00:02:28,726 --> 00:02:31,231
A lot of time when people talk about PKI

63
00:02:31,231 --> 00:02:33,692
and PKI at scale, they're talking about a world

64
00:02:33,693 --> 00:02:35,726
where you have a bunch of web browsers,

65
00:02:35,726 --> 00:02:38,231
and they're talking to the very edge

66
00:02:38,231 --> 00:02:40,792
of a large server ecosystem,

67
00:02:40,792 --> 00:02:43,462
right about where the red line cuts through this picture.

68
00:02:43,462 --> 00:02:46,066
That's not what we're gonna be talking about today.

69
00:02:46,066 --> 00:02:48,429
Today, I'd like to talk about PKI that sits

70
00:02:48,429 --> 00:02:50,462
on the entire other side of the spectrum,

71
00:02:50,462 --> 00:02:53,857
all those back-end services, all the mid-tier services.

72
00:02:53,858 --> 00:02:55,462
How do they interact securely,

73
00:02:55,462 --> 00:02:57,066
and how do we bootstrap this world

74
00:02:57,066 --> 00:02:59,264
so that things can come up and go down quickly,

75
00:02:59,264 --> 00:03:00,792
and so that we can ensure that we still

76
00:03:00,792 --> 00:03:03,825
have encryption between them as they communicate?

77
00:03:03,825 --> 00:03:05,494
And I'm particularly interested in this phase

78
00:03:05,495 --> 00:03:06,693
for a couple reasons.

79
00:03:06,693 --> 00:03:08,924
One, because it's what I do every day.

80
00:03:08,924 --> 00:03:11,462
And two, because if you look

81
00:03:11,462 --> 00:03:13,660
across a lot of conference talks,

82
00:03:13,660 --> 00:03:16,132
I feel like I see a lot more focus on the other,

83
00:03:16,132 --> 00:03:17,627
the edge to the browser problem,

84
00:03:17,627 --> 00:03:18,792
and I don't see as much discussion

85
00:03:18,792 --> 00:03:20,033
going on in this space.

86
00:03:20,033 --> 00:03:21,231
I think this space is particularly interesting

87
00:03:21,231 --> 00:03:23,561
because it motivates the problem differently,

88
00:03:23,561 --> 00:03:27,528
and so you end up thinking about different kinds of solutions.

89
00:03:27,528 --> 00:03:29,297
So, what do people do today?

90
00:03:29,297 --> 00:03:32,198
Well, the best I can say to that is kind of,

91
00:03:32,198 --> 00:03:33,693
"Here's what we do at Netflix today."

92
00:03:33,693 --> 00:03:38,627
And I suspect that other people do things somewhat similarly.

93
00:03:38,627 --> 00:03:42,462
Usually, you have a human that goes to get a certificate,

94
00:03:42,462 --> 00:03:45,131
usually through some sort of API or user interface,

95
00:03:45,132 --> 00:03:46,297
and that reaches out

96
00:03:46,297 --> 00:03:48,627
to either an internal or an external C.A.

97
00:03:48,627 --> 00:03:52,132
Then you take that certificate, and you protect it somehow.

98
00:03:52,132 --> 00:03:53,561
You seal those secrets.

99
00:03:53,561 --> 00:03:56,396
They hopefully are encrypted and some other way protected,

100
00:03:56,396 --> 00:03:58,462
and you deploy them with your service.

101
00:03:58,462 --> 00:03:59,528
So, you would check it into

102
00:03:59,528 --> 00:04:01,726
your code revision control system,

103
00:04:01,726 --> 00:04:04,693
and then you use some sort of deployment management system,

104
00:04:04,693 --> 00:04:07,000
and eventually, that gets out to, in our case,

105
00:04:07,000 --> 00:04:09,297
AMI, which is an Amazon Machine Image,

106
00:04:09,297 --> 00:04:11,924
which we then turn around and deploy at AWS.

107
00:04:11,924 --> 00:04:16,099
And that becomes the system that we are up and running.

108
00:04:16,099 --> 00:04:19,329
Finally, when that service turns on,

109
00:04:19,329 --> 00:04:21,363
you need some way to unseal the secrets

110
00:04:21,363 --> 00:04:23,165
and sort of reveal what your private key is

111
00:04:23,165 --> 00:04:24,561
so the service can use it.

112
00:04:24,561 --> 00:04:26,957
And then all your typical software stacks play in.

113
00:04:26,957 --> 00:04:30,132
So, you might imagine using Tomcat and Apache.

114
00:04:30,132 --> 00:04:32,066
And Netflix has various open-source projects

115
00:04:32,066 --> 00:04:34,231
that we use for IPC and service standup

116
00:04:34,231 --> 00:04:36,825
like karyon and Ribbon.

117
00:04:36,825 --> 00:04:39,825
All these things come together to allow these services to work.

118
00:04:39,825 --> 00:04:41,594
The challenge, of course, now is

119
00:04:41,594 --> 00:04:44,000
you have to configure the cypher suites correctly.

120
00:04:44,000 --> 00:04:46,660
You have to figure out what TLS version you're gonna use.

121
00:04:46,660 --> 00:04:48,297
You have to make sure that the certificates

122
00:04:48,297 --> 00:04:50,330
you deployed work with all those setups,

123
00:04:50,330 --> 00:04:52,659
so it's not exactly trivial,

124
00:04:52,660 --> 00:04:54,924
and there's actually additional challenges, too,

125
00:04:54,924 --> 00:04:57,000
because this process --

126
00:04:57,000 --> 00:04:58,429
I mean, you can do it relatively quickly,

127
00:04:58,429 --> 00:05:00,494
but usually the human in this picture

128
00:05:00,495 --> 00:05:02,132
is not a security expert.

129
00:05:02,132 --> 00:05:03,726
So usually, they've walked down the hall

130
00:05:03,726 --> 00:05:06,165
and said, "Dear security expert, help me figure this out

131
00:05:06,165 --> 00:05:08,132
so I can deploy a certificate with my service."

132
00:05:08,132 --> 00:05:09,627
And next time they have to do it, they're gonna walk

133
00:05:09,627 --> 00:05:11,363
back down the hall and say, "Dear security person,

134
00:05:11,363 --> 00:05:12,561
please help me."

135
00:05:12,561 --> 00:05:15,395
So, we need a better answer,

136
00:05:15,396 --> 00:05:16,825
and we need a better answer in particular

137
00:05:16,825 --> 00:05:19,825
because revocation is extremely difficult.

138
00:05:19,825 --> 00:05:22,627
So, if those private credentials are stolen,

139
00:05:22,627 --> 00:05:23,891
then the person

140
00:05:23,891 --> 00:05:25,231
that's deploying that certificate,

141
00:05:25,231 --> 00:05:26,825
they have to redeploy it.

142
00:05:26,825 --> 00:05:28,164
They have to go through that process again,

143
00:05:28,165 --> 00:05:31,363
but also, you need some way to tell the world

144
00:05:31,363 --> 00:05:34,231
that you shouldn't be trusting this credential anymore.

145
00:05:34,231 --> 00:05:36,957
Now, there's a lot of mechanisms

146
00:05:36,957 --> 00:05:38,231
out there to do this,

147
00:05:38,231 --> 00:05:40,033
and I'll go through each of these a little bit.

148
00:05:40,033 --> 00:05:42,132
But at the end of the day, I'm gonna argue

149
00:05:42,132 --> 00:05:43,396
that none of these quite work

150
00:05:43,396 --> 00:05:45,495
for the setting that we're talking about today.

151
00:05:45,495 --> 00:05:46,792
So, let's see why.

152
00:05:46,792 --> 00:05:49,263
The first one is a Certificate Revocation List.

153
00:05:49,264 --> 00:05:51,264
So, this is sort of the

154
00:05:51,264 --> 00:05:54,627
not really often used anymore technique

155
00:05:54,627 --> 00:05:57,066
of taking a large list of all the certificates

156
00:05:57,066 --> 00:05:59,231
that a C.A. has revoked

157
00:05:59,231 --> 00:06:01,659
and making that available on a service somewhere.

158
00:06:01,660 --> 00:06:04,396
And then, whenever the browser goes out to a website,

159
00:06:04,396 --> 00:06:07,660
it will do a TLS handshake, and then go back

160
00:06:07,660 --> 00:06:10,165
and ask this Certificate Revocation List,

161
00:06:10,165 --> 00:06:11,363
"Has this certificate,

162
00:06:11,363 --> 00:06:14,759
has this server certificate been revoked?"

163
00:06:14,759 --> 00:06:17,792
And as long as everything looks good, then it proceeds.

164
00:06:17,792 --> 00:06:21,330
The problem is that the CRL is particularly large,

165
00:06:21,330 --> 00:06:24,066
and so clients tend not to go download the CRL

166
00:06:24,066 --> 00:06:26,164
every single time they touch a website.

167
00:06:26,165 --> 00:06:28,858
Instead, they'll cache the data locally.

168
00:06:28,858 --> 00:06:30,957
And then you run into this problem where you have

169
00:06:30,957 --> 00:06:33,858
security decisions being made on stale data,

170
00:06:33,858 --> 00:06:35,363
and you also have this scale problem

171
00:06:35,363 --> 00:06:37,561
because the CRLs can get large,

172
00:06:37,561 --> 00:06:39,395
and the clients have to hit this frequently.

173
00:06:39,396 --> 00:06:40,660
And you're trying to balance all these things,

174
00:06:40,660 --> 00:06:41,957
and it just doesn't work out too well.

175
00:06:41,957 --> 00:06:44,198
So, eventually, people said,

176
00:06:44,198 --> 00:06:46,561
"CRLs, that's not working out for me.

177
00:06:46,561 --> 00:06:47,825
Let's try something new."

178
00:06:47,825 --> 00:06:50,231
So, we went to OCSP --

179
00:06:50,231 --> 00:06:51,495
Online Certificate Status Protocol.

180
00:06:51,495 --> 00:06:54,495
Well, in this world, now it's a little bit better

181
00:06:54,495 --> 00:06:58,924
'cause the browser can actually do a TLS handshake

182
00:06:58,924 --> 00:07:01,066
and immediately ask for the status

183
00:07:01,066 --> 00:07:02,594
of your particular certificate.

184
00:07:02,594 --> 00:07:05,627
So they can go to what they call an OCSP responder

185
00:07:05,627 --> 00:07:07,099
and say, "I have a certificate here.

186
00:07:07,099 --> 00:07:08,396
Is this still good?"

187
00:07:08,396 --> 00:07:10,099
And the responder goes back and says,

188
00:07:10,099 --> 00:07:12,132
"Yeah, it looks good to me. You're good to continue."

189
00:07:12,132 --> 00:07:13,792
And then you continue your connection.

190
00:07:13,792 --> 00:07:15,231
But you still have some challenges here

191
00:07:15,231 --> 00:07:18,627
because that's a lot of hits on that OCSP responder

192
00:07:18,627 --> 00:07:20,264
if you're gonna do this for every single website

193
00:07:20,264 --> 00:07:21,429
and get live information.

194
00:07:21,429 --> 00:07:23,462
So, some clients will still cache,

195
00:07:23,462 --> 00:07:26,164
and then we have issues there.

196
00:07:26,165 --> 00:07:27,198
In the public Internet,

197
00:07:27,198 --> 00:07:28,659
and you have some privacy problems

198
00:07:28,660 --> 00:07:30,726
because these OCSP responders will now see

199
00:07:30,726 --> 00:07:34,528
every single website that you have visited

200
00:07:34,528 --> 00:07:36,891
because you're asking about their certificates.

201
00:07:36,891 --> 00:07:40,132
And at the end of the day,

202
00:07:40,132 --> 00:07:42,330
you have to think about, "What does a client do

203
00:07:42,330 --> 00:07:45,890
if the OCSP responder doesn't get back to them?"

204
00:07:45,891 --> 00:07:47,561
Right? Or if it gets back to them with information

205
00:07:47,561 --> 00:07:49,099
that says, "I don't know anything about this.

206
00:07:49,099 --> 00:07:50,561
I haven't seen this before."

207
00:07:50,561 --> 00:07:52,561
Do you just fail the connection hard and say,

208
00:07:52,561 --> 00:07:54,758
"Sorry, user, you can't see your website"?

209
00:07:54,759 --> 00:07:57,198
Or do you say, well,

210
00:07:57,198 --> 00:07:59,890
there was no revocation or it timed out,

211
00:07:59,891 --> 00:08:01,000
so I'm just gonna proceed anyway.

212
00:08:01,000 --> 00:08:02,264
We'll call it good.

213
00:08:02,264 --> 00:08:04,363
And it turns out, that soft failure

214
00:08:04,363 --> 00:08:06,198
is exactly what clients tend to do

215
00:08:06,198 --> 00:08:08,032
because they don't want to just break things.

216
00:08:08,033 --> 00:08:09,132
Because the Internet's brittle,

217
00:08:09,132 --> 00:08:10,429
and you can DDoS the entire Internet

218
00:08:10,429 --> 00:08:13,000
just by DDoSing the OCSP responders.

219
00:08:13,000 --> 00:08:15,132
Okay. So OCSP does have some challenges.

220
00:08:15,132 --> 00:08:18,132
So along came OCSP stapling.

221
00:08:18,132 --> 00:08:19,627
Now we're starting to get a little bit better

222
00:08:19,627 --> 00:08:21,858
because what we can do is just take that OCSP response

223
00:08:21,858 --> 00:08:24,462
which, by the way, is signed by the certificate authority,

224
00:08:24,462 --> 00:08:25,825
and we can staple it.

225
00:08:25,825 --> 00:08:28,792
We can actually attach it to the certificate

226
00:08:28,792 --> 00:08:30,659
so that, as it comes across,

227
00:08:30,660 --> 00:08:34,924
the server can prove that its certificate is still valid.

228
00:08:34,924 --> 00:08:36,329
Now you don't have a separate connection

229
00:08:36,330 --> 00:08:38,330
going out to a separate responder each time.

230
00:08:38,330 --> 00:08:40,726
You've alleviated some of the privacy issues,

231
00:08:40,726 --> 00:08:42,429
but you still haven't alleviated the issue

232
00:08:42,429 --> 00:08:46,363
of what happens if this certificate status message

233
00:08:46,363 --> 00:08:47,858
doesn't come through with the connection?

234
00:08:47,858 --> 00:08:49,231
What is the client to do?

235
00:08:49,231 --> 00:08:50,759
They continue to fail soft,

236
00:08:50,759 --> 00:08:54,132
and so you continue to have problems.

237
00:08:54,132 --> 00:08:56,560
So, along comes OCSP must staple,

238
00:08:56,561 --> 00:08:58,957
which is basically a way that a server can say,

239
00:08:58,957 --> 00:09:01,495
"Hey, I'm providing an OCSP message,

240
00:09:01,495 --> 00:09:03,264
and from this point forward,

241
00:09:03,264 --> 00:09:05,363
you should expect that I will always do that.

242
00:09:05,363 --> 00:09:06,660
So if someone tries to man-in-the-middle

243
00:09:06,660 --> 00:09:08,165
this connection in the future,

244
00:09:08,165 --> 00:09:10,791
and there's no OCSP message, then that's a problem,

245
00:09:10,792 --> 00:09:12,330
and you should immediately reject it."

246
00:09:12,330 --> 00:09:15,726
And we can start to migrate into a fail-hard world.

247
00:09:15,726 --> 00:09:17,858
So, you can sort of see here that there were some challenges,

248
00:09:17,858 --> 00:09:19,726
but by the time you get to OCSP stapling

249
00:09:19,726 --> 00:09:21,033
and OCSP must staple,

250
00:09:21,033 --> 00:09:23,528
it's starting to look like a system that can work.

251
00:09:23,528 --> 00:09:24,858
This is great. But keep in mind,

252
00:09:24,858 --> 00:09:27,165
I've been talking about browsers, right?

253
00:09:27,165 --> 00:09:28,957
But this talk is really about

254
00:09:28,957 --> 00:09:32,066
service-to-service communication inside your data center.

255
00:09:32,066 --> 00:09:33,792
So how does this map?

256
00:09:33,792 --> 00:09:37,495
Well, the problem is that it doesn't map very well.

257
00:09:37,495 --> 00:09:38,726
In this world,

258
00:09:38,726 --> 00:09:40,330
we think about building out services

259
00:09:40,330 --> 00:09:42,957
using things like Java, using things like C, Python,

260
00:09:42,957 --> 00:09:44,231
JavaScript.

261
00:09:44,231 --> 00:09:46,066
I can fill this up with other languages,

262
00:09:46,066 --> 00:09:47,858
and I doubt the picture would look very different.

263
00:09:47,858 --> 00:09:49,132
And what are we seeing here?

264
00:09:49,132 --> 00:09:52,924
Well, all the orange squares represent a state

265
00:09:52,924 --> 00:09:54,891
where it's difficult

266
00:09:54,891 --> 00:09:58,132
for a programmer to make this check happen, okay?

267
00:09:58,132 --> 00:10:01,231
So if you're trying to do a CRL check in Java,

268
00:10:01,231 --> 00:10:04,594
code exists to do it, but it's not easy to do it.

269
00:10:04,594 --> 00:10:07,033
You have to manually go do a separate connection,

270
00:10:07,033 --> 00:10:09,297
get that CRL list, and use the class

271
00:10:09,297 --> 00:10:11,495
that will parse it for you, and then check that yourself.

272
00:10:11,495 --> 00:10:13,132
It's not like where you can just say,

273
00:10:13,132 --> 00:10:15,231
please use "revocation equals true."

274
00:10:15,231 --> 00:10:16,429
Right?

275
00:10:16,429 --> 00:10:19,000
So, how many developers who aren't security nuts

276
00:10:19,000 --> 00:10:21,264
are going to actually go through all this headache?

277
00:10:21,264 --> 00:10:23,330
Very, very few. And that's what you see.

278
00:10:23,330 --> 00:10:25,594
And in fact, if you get over to the side

279
00:10:25,594 --> 00:10:27,165
where we talk about the techniques that I said

280
00:10:27,165 --> 00:10:30,660
were a little bit better, OCSP staple, OCSP must staple,

281
00:10:30,660 --> 00:10:33,824
the language support just drops off.

282
00:10:33,825 --> 00:10:36,660
So, revocation becomes very challenging in this world

283
00:10:36,660 --> 00:10:40,462
where you don't even have the right tools at your disposal.

284
00:10:40,462 --> 00:10:42,693
It turns out, there's even more challenges, right?

285
00:10:42,693 --> 00:10:48,231
So, if I use an analogy here, imagine I gave you a penny,

286
00:10:48,231 --> 00:10:51,396
and I asked you to tell me, "Is this penny a fair coin?"

287
00:10:51,396 --> 00:10:52,726
You might have some sort of protocol

288
00:10:52,726 --> 00:10:54,066
you could do on that penny.

289
00:10:54,066 --> 00:10:55,165
You could analyze it.

290
00:10:55,165 --> 00:10:57,165
You could flip it a whole bunch of times.

291
00:10:57,165 --> 00:10:59,660
You could come up to some sort of determination,

292
00:10:59,660 --> 00:11:01,495
and you could say, "I could figure this out."

293
00:11:01,495 --> 00:11:04,132
This isn't that different than if I gave you a computer,

294
00:11:04,132 --> 00:11:06,165
and I said, "Is this computer secure," right?

295
00:11:06,165 --> 00:11:08,065
You could do a lot of work on that single computer,

296
00:11:08,066 --> 00:11:10,627
dig in, and say, "I think this looks pretty good"

297
00:11:10,627 --> 00:11:13,231
or, "I'm not so sure."

298
00:11:13,231 --> 00:11:15,000
Now, if I give you a million pennies

299
00:11:15,000 --> 00:11:17,198
and ask you to tell me which ones of these

300
00:11:17,198 --> 00:11:19,165
are not fair coins,

301
00:11:19,165 --> 00:11:21,858
all of a sudden, it's a lot harder to do this, right?

302
00:11:21,858 --> 00:11:24,494
And it's the same thing in the computing world

303
00:11:24,495 --> 00:11:27,363
where you have tons and tons of computers out there,

304
00:11:27,363 --> 00:11:29,957
and you're being asked which one,

305
00:11:29,957 --> 00:11:32,825
or which ones, have been compromised?

306
00:11:32,825 --> 00:11:35,528
Which of these private keys am I now responsible

307
00:11:35,528 --> 00:11:37,759
for revoking in the first place, right?

308
00:11:37,759 --> 00:11:39,825
We're right back to that intrusion detection problem.

309
00:11:39,825 --> 00:11:43,033
And it turns out, this is very challenging to do.

310
00:11:43,033 --> 00:11:44,330
Okay.

311
00:11:44,330 --> 00:11:46,561
So, maybe we should just ignore this whole problem

312
00:11:46,561 --> 00:11:49,396
and say, "Okay, I don't like the intrusion detection problem,

313
00:11:49,396 --> 00:11:51,231
and I don't like the revocation world,

314
00:11:51,231 --> 00:11:54,429
so I'm just gonna issue short-lived certificates."

315
00:11:54,429 --> 00:11:56,627
So, let's talk a little bit about what this means.

316
00:11:56,627 --> 00:11:59,296
If you look at the browser world,

317
00:11:59,297 --> 00:12:00,825
short-lived certificates today

318
00:12:00,825 --> 00:12:03,363
tends to be around three months, okay?

319
00:12:03,363 --> 00:12:05,231
And in fact, there's a lot of people,

320
00:12:05,231 --> 00:12:06,957
Google and Facebook among them,

321
00:12:06,957 --> 00:12:09,759
that their services today, they issue certificates

322
00:12:09,759 --> 00:12:11,693
that are good for about three months.

323
00:12:11,693 --> 00:12:14,759
At a recent conference, at Real World Crypto,

324
00:12:14,759 --> 00:12:16,198
Google actually said that

325
00:12:16,198 --> 00:12:17,824
if you look at all their TLS errors

326
00:12:17,825 --> 00:12:20,825
that they're getting from their browsers in Chrome,

327
00:12:20,825 --> 00:12:25,099
approximately 60% of those are due to the certificate

328
00:12:25,099 --> 00:12:26,693
being out of the right time range

329
00:12:26,693 --> 00:12:30,132
because the client's clock was just wrong.

330
00:12:30,132 --> 00:12:31,593
So, the browser world

331
00:12:31,594 --> 00:12:33,033
is very different than a server world

332
00:12:33,033 --> 00:12:34,495
where we can actually say,

333
00:12:34,495 --> 00:12:36,396
if I control my whole data center, maybe,

334
00:12:36,396 --> 00:12:38,957
maybe I can get the clocks right, okay?

335
00:12:38,957 --> 00:12:41,099
Or maybe they don't have to be synchronized within seconds,

336
00:12:41,099 --> 00:12:43,198
but maybe I can get them synchronized within minutes.

337
00:12:43,198 --> 00:12:44,329
And then all of a sudden,

338
00:12:44,330 --> 00:12:45,726
I can take that three-month certificate,

339
00:12:45,726 --> 00:12:47,594
and I can scale it all the way back to a week.

340
00:12:47,594 --> 00:12:49,759
Maybe I can scale it back to a day.

341
00:12:49,759 --> 00:12:51,231
It just sort of depends on,

342
00:12:51,231 --> 00:12:55,825
what is your tolerance for how long you could lose a key?

343
00:12:55,825 --> 00:12:57,462
Remember, we're trying to get rid of revocations,

344
00:12:57,462 --> 00:12:59,891
so the idea is, we're going to say,

345
00:12:59,891 --> 00:13:02,065
if I lost that private key, and I lost it for a day,

346
00:13:02,066 --> 00:13:03,693
that might be okay.

347
00:13:03,693 --> 00:13:04,858
If I lost it for a month,

348
00:13:04,858 --> 00:13:06,363
I'm not so comfortable with that.

349
00:13:06,363 --> 00:13:08,561
Figure out what that means for your world,

350
00:13:08,561 --> 00:13:09,891
and let that be the ceiling,

351
00:13:09,891 --> 00:13:11,858
and then start to ask the operational questions

352
00:13:11,858 --> 00:13:14,065
and the performance questions and say, can I go under this,

353
00:13:14,066 --> 00:13:17,726
or do I need to stay right there at my ceiling?

354
00:13:17,726 --> 00:13:19,033
And it turns out,

355
00:13:19,033 --> 00:13:21,396
we actually haven't gotten rid of revocation at all

356
00:13:21,396 --> 00:13:23,264
because expiration on a certificate

357
00:13:23,264 --> 00:13:25,561
is a built-in revocation mechanism.

358
00:13:25,561 --> 00:13:27,099
The cool thing about it is it just so happens

359
00:13:27,099 --> 00:13:28,660
to be a revocation mechanism

360
00:13:28,660 --> 00:13:31,560
that's actually really well-supported in software.

361
00:13:31,561 --> 00:13:34,231
And that's really what we want to benefit from here.

362
00:13:34,231 --> 00:13:35,660
It turns out, short-list certificates,

363
00:13:35,660 --> 00:13:37,000
not at all a new thing.

364
00:13:37,000 --> 00:13:38,429
I've got a couple of papers

365
00:13:38,429 --> 00:13:40,033
referenced here for those that are interested.

366
00:13:40,033 --> 00:13:41,858
But going all the way back to 1998

367
00:13:41,858 --> 00:13:42,891
was the earliest that I found

368
00:13:42,891 --> 00:13:44,165
where people were talking about it.

369
00:13:45,627 --> 00:13:48,396
The thing about short-list certificates now

370
00:13:48,396 --> 00:13:50,791
is that we're entering a world where our ecosystems

371
00:13:50,792 --> 00:13:52,462
are getting very, very large.

372
00:13:52,462 --> 00:13:54,363
We're having a lot more automation,

373
00:13:54,363 --> 00:13:57,330
and all of a sudden, it's making a heck of a lot more sense.

374
00:13:57,330 --> 00:14:00,330
As I talk about short-list certificates today with people,

375
00:14:00,330 --> 00:14:02,099
I hear people saying, "Yes, I want to get there.

376
00:14:02,099 --> 00:14:03,264
I'm trying to figure out how to get there."

377
00:14:03,264 --> 00:14:05,165
Or, "I'm already there, and it's great."

378
00:14:05,165 --> 00:14:06,891
When I talked about it four or five years ago,

379
00:14:06,891 --> 00:14:08,891
people looked at me like my head was spinning around in circles

380
00:14:08,891 --> 00:14:10,231
and I didn't know what I was talking about.

381
00:14:10,231 --> 00:14:11,858
So, I think we're getting really close,

382
00:14:11,858 --> 00:14:13,165
and I'll talk a little bit more

383
00:14:13,165 --> 00:14:14,560
about some of the problems.

384
00:14:14,561 --> 00:14:17,528
But first, it's important to note that,

385
00:14:17,528 --> 00:14:19,396
oftentimes when I talk about short-list certificates,

386
00:14:19,396 --> 00:14:20,957
there's some people in the room

387
00:14:20,957 --> 00:14:22,593
who just get a little bit worried.

388
00:14:22,594 --> 00:14:24,726
Their heads start to spin a little bit,

389
00:14:24,726 --> 00:14:26,726
and they say, "Man, this is gonna be a ticking time bomb.

390
00:14:26,726 --> 00:14:28,462
If there's a bug in the system,

391
00:14:28,462 --> 00:14:30,297
I'm gonna have to fix it really fast,

392
00:14:30,297 --> 00:14:32,858
or my whole world's gonna explode."

393
00:14:32,858 --> 00:14:35,065
And to them, I say,

394
00:14:35,066 --> 00:14:36,264
"Perhaps.

395
00:14:36,264 --> 00:14:37,891
But this is not that different

396
00:14:37,891 --> 00:14:39,858
than the kind of high-velocity development environments

397
00:14:39,858 --> 00:14:42,329
that a lot of people have moved to today

398
00:14:42,330 --> 00:14:44,330
where you've created this world where you might trip,

399
00:14:44,330 --> 00:14:45,627
you might make a mistake,

400
00:14:45,627 --> 00:14:47,957
and you need to have a way to quickly correct it."

401
00:14:47,957 --> 00:14:51,825
And in fact, there's techniques for doing just that.

402
00:14:51,825 --> 00:14:54,330
At Netflix, we use what we call the Simian Army,

403
00:14:54,330 --> 00:14:56,099
which is a whole suite of tools

404
00:14:56,099 --> 00:14:58,924
that introduce chaos into our engineering.

405
00:14:58,924 --> 00:15:00,495
And we do it very deliberately

406
00:15:00,495 --> 00:15:02,231
because we say, "Hey, we're running in the cloud.

407
00:15:02,231 --> 00:15:04,759
It's entirely possible that we can lose an instance

408
00:15:04,759 --> 00:15:06,066
at some point in time.

409
00:15:06,066 --> 00:15:08,429
What happens if we lose an instance?

410
00:15:08,429 --> 00:15:09,726
I don't know.

411
00:15:09,726 --> 00:15:11,264
Does our service go down, or do we continue working?"

412
00:15:11,264 --> 00:15:14,462
Well, rather than wait for that unlikely event

413
00:15:14,462 --> 00:15:16,297
that might disrupt something,

414
00:15:16,297 --> 00:15:19,726
we actually built a chaos system

415
00:15:19,726 --> 00:15:23,033
that will go around and randomly kill instances

416
00:15:23,033 --> 00:15:26,561
through our product in production all the time.

417
00:15:26,561 --> 00:15:28,924
And we just get an e-mail notification, "Hey, I'm sorry.

418
00:15:28,924 --> 00:15:30,693
Your instance was just killed.

419
00:15:30,693 --> 00:15:33,891
I hope everything's okay. Have a good one."

420
00:15:33,891 --> 00:15:35,264
This is fantastic.

421
00:15:35,264 --> 00:15:38,198
We learn to live and work in this chaos world,

422
00:15:38,198 --> 00:15:39,924
and everything continues to purr

423
00:15:39,924 --> 00:15:43,098
because it's just how we engineer our products, okay?

424
00:15:43,099 --> 00:15:44,363
And there's other things.

425
00:15:44,363 --> 00:15:45,495
We have Chaos Kongs

426
00:15:45,495 --> 00:15:47,825
where we literally shut down an entire region

427
00:15:47,825 --> 00:15:49,165
and move all the traffic,

428
00:15:49,165 --> 00:15:52,824
say, out of U.S. East over to U.S. West and E.U.

429
00:15:52,825 --> 00:15:57,033
We do these kinds of exercises almost monthly,

430
00:15:57,033 --> 00:15:58,792
and people don't even know that it's happening

431
00:15:58,792 --> 00:16:01,297
because we do them regularly enough that it works.

432
00:16:01,297 --> 00:16:03,792
So, why couldn't we do this with short-lived certificates?

433
00:16:03,792 --> 00:16:05,165
Why couldn't we find a way

434
00:16:05,165 --> 00:16:06,791
to test the system, stress the system,

435
00:16:06,792 --> 00:16:08,198
and make sure that it continues to work

436
00:16:08,198 --> 00:16:09,792
through all the various failure scenarios?

437
00:16:09,792 --> 00:16:11,033
It seems reasonable to me.

438
00:16:11,033 --> 00:16:13,792
In fact, just a quick side step,

439
00:16:13,792 --> 00:16:16,561
we did this already in a different context.

440
00:16:16,561 --> 00:16:19,792
So, if you look at AWS keys --

441
00:16:19,792 --> 00:16:21,693
A key, by the way, in AWS is,

442
00:16:21,693 --> 00:16:23,726
you have your access key I.D. and your secret key,

443
00:16:23,726 --> 00:16:25,429
and you put these together with your requests,

444
00:16:25,429 --> 00:16:27,329
and you end up with an HMAC,

445
00:16:27,330 --> 00:16:29,660
and then you can use that to verify to Amazon

446
00:16:29,660 --> 00:16:31,495
that you're a legit person to make this request.

447
00:16:31,495 --> 00:16:32,561
Great.

448
00:16:32,561 --> 00:16:34,825
That secret key and that access I.D.

449
00:16:34,825 --> 00:16:36,264
have to be protected.

450
00:16:36,264 --> 00:16:37,759
And back in the early days,

451
00:16:37,759 --> 00:16:41,000
and I'm talking over five years ago,

452
00:16:41,000 --> 00:16:43,231
protecting that basically meant,

453
00:16:43,231 --> 00:16:45,330
I don't know, maybe I deploy it with my service

454
00:16:45,330 --> 00:16:47,099
and make it an environment variable.

455
00:16:47,099 --> 00:16:49,066
Mnh, that's not so great. Maybe I --

456
00:16:49,066 --> 00:16:51,000
And you go through all these iterations of,

457
00:16:51,000 --> 00:16:52,891
"How do I deploy this well?"

458
00:16:52,891 --> 00:16:53,891
Until all of a sudden, you realize,

459
00:16:53,891 --> 00:16:55,363
"Oh, here's what I need.

460
00:16:55,363 --> 00:16:58,495
I need to write my code so that I can change out the credentials

461
00:16:58,495 --> 00:17:00,198
underneath the code in real time,

462
00:17:00,198 --> 00:17:02,264
and everything continues to work just fine.

463
00:17:02,264 --> 00:17:03,957
That would be really fantastic.

464
00:17:03,957 --> 00:17:08,759
And then I'm just gonna point that code at a URL

465
00:17:08,759 --> 00:17:11,726
that's local to my box that Amazon manages

466
00:17:11,726 --> 00:17:13,957
that actually swaps out my credentials

467
00:17:13,957 --> 00:17:15,396
whenever I need to."

468
00:17:15,396 --> 00:17:17,197
And so all of a sudden, I have a resilient system

469
00:17:17,198 --> 00:17:18,528
from the ground up

470
00:17:18,528 --> 00:17:21,495
where the keys can be rotated whenever I feel like it,

471
00:17:21,494 --> 00:17:24,725
and the system above it just transparently keeps working.

472
00:17:24,726 --> 00:17:26,000
If we can do it here,

473
00:17:26,000 --> 00:17:29,693
certainly we can do it with something like a PKI.

474
00:17:29,693 --> 00:17:31,000
Okay.

475
00:17:31,000 --> 00:17:32,363
There's a little catch, though.

476
00:17:32,363 --> 00:17:34,759
I just said that we have these on-instance credentials

477
00:17:34,759 --> 00:17:36,627
that Amazon provides for us.

478
00:17:36,627 --> 00:17:38,396
In this world, we might actually have

479
00:17:38,396 --> 00:17:40,330
to refresh our credentials ourselves.

480
00:17:40,330 --> 00:17:43,066
And normally, that means you have to authenticate to someone.

481
00:17:43,066 --> 00:17:44,726
So, you send some proof of your I.D.

482
00:17:44,726 --> 00:17:46,429
and a credential request,

483
00:17:46,429 --> 00:17:47,627
and then they send back your credential.

484
00:17:47,627 --> 00:17:49,066
Now, let's just be careful here.

485
00:17:49,066 --> 00:17:50,792
We don't want that proof of I.D.

486
00:17:50,792 --> 00:17:52,858
to be using the short-lived credential

487
00:17:52,858 --> 00:17:54,197
that we're about to revoke.

488
00:17:54,198 --> 00:17:55,792
'Cause if you do that,

489
00:17:55,792 --> 00:17:57,924
well, you haven't actually revoked anything.

490
00:17:57,924 --> 00:17:59,197
You're creating this perpetual system

491
00:17:59,198 --> 00:18:00,693
where an attacker that got your private key

492
00:18:00,693 --> 00:18:03,198
could always get the next credential and live on.

493
00:18:03,198 --> 00:18:04,396
So, we need to be a little bit careful,

494
00:18:04,396 --> 00:18:06,659
and the way I suggest we go about this

495
00:18:06,660 --> 00:18:09,429
is to actually build a layered system, okay?

496
00:18:09,429 --> 00:18:12,363
So, imagine you can have some sort of system identity,

497
00:18:12,363 --> 00:18:14,429
a long-lived credential, if you were,

498
00:18:14,429 --> 00:18:16,033
that lives either in your TPM

499
00:18:16,033 --> 00:18:19,824
or even something like Intel SGX for a lot of security on it.

500
00:18:19,825 --> 00:18:22,132
Use that as an identifier

501
00:18:22,132 --> 00:18:24,693
to go get your short-lived credentials.

502
00:18:24,693 --> 00:18:26,495
And then use your short-lived credentials

503
00:18:26,495 --> 00:18:28,065
for your web service.

504
00:18:28,066 --> 00:18:29,825
Now, I know, I know. It's turtles all the way down,

505
00:18:29,825 --> 00:18:32,363
so now we've got a problem where this long-lived credential,

506
00:18:32,363 --> 00:18:34,231
maybe it needs to be revoked at some point.

507
00:18:34,231 --> 00:18:35,891
Or maybe you're comfortable enough that you've protected it,

508
00:18:35,891 --> 00:18:37,660
and you're not gonna worry about revocation.

509
00:18:37,660 --> 00:18:39,462
But I would argue a couple of things.

510
00:18:39,462 --> 00:18:41,924
One, as we scale, this scales better.

511
00:18:41,924 --> 00:18:45,197
I can still do revocation once per instance, perhaps,

512
00:18:45,198 --> 00:18:47,231
but it's very hard to do revocation

513
00:18:47,231 --> 00:18:48,561
once per short-lived credential.

514
00:18:48,561 --> 00:18:50,824
'Cause I might have tens or twenties or hundreds

515
00:18:50,825 --> 00:18:53,033
of short-lived credentials on each instance

516
00:18:53,033 --> 00:18:55,495
to validate myself to other services.

517
00:18:55,495 --> 00:18:57,924
So, this allows me to scale much better.

518
00:18:57,924 --> 00:19:01,297
Second, frankly, if performance isn't needed,

519
00:19:01,297 --> 00:19:02,891
then I can use that long-term credential

520
00:19:02,891 --> 00:19:04,429
as my web key, and that's fine.

521
00:19:04,429 --> 00:19:05,957
So that's another option.

522
00:19:05,957 --> 00:19:08,924
This allows you to tune things, and that's really what we like.

523
00:19:08,924 --> 00:19:10,231
Okay.

524
00:19:10,231 --> 00:19:11,627
The problem now is,

525
00:19:11,627 --> 00:19:13,561
I swap out my credential underneath the service,

526
00:19:13,561 --> 00:19:15,330
and all of a sudden, I have to get that service

527
00:19:15,330 --> 00:19:16,561
to read the new credential,

528
00:19:16,561 --> 00:19:18,759
just like I was talking about before.

529
00:19:18,759 --> 00:19:20,066
Of course,

530
00:19:20,066 --> 00:19:22,693
a lot of the TLS terminators that are out there

531
00:19:22,693 --> 00:19:26,132
will allow you to refresh their credentials

532
00:19:26,132 --> 00:19:28,231
and their whole configurations on the fly.

533
00:19:28,231 --> 00:19:30,891
But will they do it with zero down time?

534
00:19:30,891 --> 00:19:34,396
Turns out, the answer is kind of not so great for a lot of these.

535
00:19:34,396 --> 00:19:35,858
So, I show that here.

536
00:19:35,858 --> 00:19:38,197
Now, I would argue that this is just a challenge

537
00:19:38,198 --> 00:19:39,528
that we need to work on.

538
00:19:39,528 --> 00:19:42,165
We need to be improving the software.

539
00:19:42,165 --> 00:19:44,099
So, at the end of the day, hopefully we can move

540
00:19:44,099 --> 00:19:45,362
to a system that looks more like this

541
00:19:45,363 --> 00:19:47,363
where the human just deploys their own code,

542
00:19:47,363 --> 00:19:50,891
the certificates deploy automatically into the system,

543
00:19:50,891 --> 00:19:53,495
and then we come up with a resilient set of pieces

544
00:19:53,495 --> 00:19:55,197
that can actually handle the certificate

545
00:19:55,198 --> 00:19:56,627
swapping out underneath you.

546
00:19:56,627 --> 00:19:57,792
And that would involve

547
00:19:57,792 --> 00:19:59,693
updating a few pieces in your ecosystem,

548
00:19:59,693 --> 00:20:01,462
but not a whole lot.

549
00:20:01,462 --> 00:20:03,528
I think we can get there.

550
00:20:03,528 --> 00:20:04,693
And I would argue

551
00:20:04,693 --> 00:20:06,956
that updating a couple of pieces like this

552
00:20:06,957 --> 00:20:09,165
is a lot easier than some of the problems

553
00:20:09,165 --> 00:20:10,197
we still need to solve

554
00:20:10,198 --> 00:20:11,429
on the long-lived certificate side,

555
00:20:11,429 --> 00:20:13,231
which you've been living with for ages.

556
00:20:13,231 --> 00:20:15,165
Mainly, improving attack detection

557
00:20:15,165 --> 00:20:18,594
and retrofitting the revocation mechanism wholescale.

558
00:20:21,132 --> 00:20:22,132
So, with that,

559
00:20:22,132 --> 00:20:24,495
I would just like to end by saying,

560
00:20:24,495 --> 00:20:28,033
I think there's a potential that we can get here very soon.

561
00:20:28,033 --> 00:20:29,759
I am playing a lot in the open source space

562
00:20:29,759 --> 00:20:31,561
as we're working on this, and I would love to collaborate

563
00:20:31,561 --> 00:20:33,396
with others that are interested in the space

564
00:20:33,396 --> 00:20:34,594
on some of these final pieces

565
00:20:34,594 --> 00:20:36,165
to make these things come together.

566
00:20:36,165 --> 00:20:38,627
And so, I would argue, let's get out there.

567
00:20:38,627 --> 00:20:39,956
Let's code. Let's work together.

568
00:20:39,957 --> 00:20:41,429
And let's make these things happen.

569
00:20:41,429 --> 00:20:44,297
And with that, I'd be happy to take some questions.

570
00:20:44,297 --> 00:20:46,297
[ Applause ]

571
00:20:46,297 --> 00:20:52,297
 

