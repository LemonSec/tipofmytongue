1
00:00:00,033 --> 00:00:00,528


2
00:00:00,528 --> 00:00:04,759
♪♪

3
00:00:08,792 --> 00:00:10,726
-My name's Marek, and I'm an engineer

4
00:00:10,726 --> 00:00:13,858
at performance and security company called CloudFlare.

5
00:00:19,132 --> 00:00:20,792
CloudFlare provides reverse proxy

6
00:00:20,792 --> 00:00:24,462
and DNS services for millions of websites.

7
00:00:24,462 --> 00:00:27,726
We have so many customers from so different fields,

8
00:00:27,726 --> 00:00:31,230
from social media outlets, from dating portals,

9
00:00:31,231 --> 00:00:35,297
and government agencies.

10
00:00:35,297 --> 00:00:37,396
Sorry. This is not right.

11
00:00:47,792 --> 00:00:51,231
And being content-neutral is very important for us.

12
00:00:51,231 --> 00:00:52,957
But content-neutral is not easy.

13
00:00:52,957 --> 00:00:56,462
There's always one website being hated by someone.

14
00:00:56,462 --> 00:00:58,264
And that's bad.

15
00:00:58,264 --> 00:00:59,660
In today's Internet,

16
00:00:59,660 --> 00:01:03,132
some people try to silence websites they don't like.

17
00:01:03,132 --> 00:01:05,164
And the way to silence websites

18
00:01:05,165 --> 00:01:06,528
in today's Internet

19
00:01:06,528 --> 00:01:09,297
is to launch a denial-of-service attack.

20
00:01:09,297 --> 00:01:11,923
This is a problem because an attack

21
00:01:11,924 --> 00:01:13,264
on one of our customers

22
00:01:13,264 --> 00:01:16,594
can affect a whole network, all of our clients.

23
00:01:16,594 --> 00:01:18,065
This is, of course, unacceptable.

24
00:01:18,066 --> 00:01:20,033
We can't just sit idle

25
00:01:20,033 --> 00:01:23,429
when our network is under a threat.

26
00:01:23,429 --> 00:01:26,297
So we had to do something about it.

27
00:01:26,297 --> 00:01:30,164
So, we attacked the problem on all fronts.

28
00:01:30,165 --> 00:01:33,462
First, we had a very strong trust and safety team.

29
00:01:33,462 --> 00:01:35,264
Among other things, they make sure

30
00:01:35,264 --> 00:01:38,131
we aren't attack victims ourselves.

31
00:01:38,132 --> 00:01:41,264
Then, we're always working with Internet operators

32
00:01:41,264 --> 00:01:44,857
to make sure launching attacks is hard.

33
00:01:44,858 --> 00:01:47,561
Then, we're always improving our own infrastructure.

34
00:01:47,561 --> 00:01:50,561
We add more servers, we improve our performance,

35
00:01:50,561 --> 00:01:53,264
and we always add more network capacity.

36
00:01:53,264 --> 00:01:57,164
And, finally, we do our best to educate the end users.

37
00:01:57,165 --> 00:02:00,099
We blog about the new attacks we see.

38
00:02:00,099 --> 00:02:02,198
We go to conferences like this one

39
00:02:02,198 --> 00:02:05,594
and try to spread our know-how.

40
00:02:05,594 --> 00:02:10,132
This presentation is about a fragment of our wide effort.

41
00:02:10,132 --> 00:02:14,693
It's about how we automate our DDoS defenses.

42
00:02:14,693 --> 00:02:15,957
So, I'll explain

43
00:02:15,957 --> 00:02:19,132
how our automatic DDoS mitigation system works

44
00:02:19,132 --> 00:02:20,396
and why we built it.

45
00:02:20,396 --> 00:02:22,131
So, let me give you some context

46
00:02:22,132 --> 00:02:26,891
on why automating mitigation is so important.

47
00:02:26,891 --> 00:02:29,528
So, the biggest threat to anyone doing anything

48
00:02:29,528 --> 00:02:31,297
on the Internet is an attack

49
00:02:31,297 --> 00:02:33,957
that exceeds the network capacity.

50
00:02:33,957 --> 00:02:36,495
In such situations, it really doesn't matter

51
00:02:36,495 --> 00:02:37,825
what the attack is composed of.

52
00:02:37,825 --> 00:02:39,825
Is it DNS, flood,

53
00:02:39,825 --> 00:02:43,131
or SYN flood, or SSDP flood, or something different?

54
00:02:43,132 --> 00:02:46,198
All that matters is that the network will congest

55
00:02:46,198 --> 00:02:49,000
and no legitimate packets will be able to flow.

56
00:02:49,000 --> 00:02:51,495
And this is extremely bad because such an attack

57
00:02:51,495 --> 00:02:53,792
will affect the whole attack network,

58
00:02:53,792 --> 00:02:57,528
not only the few attacked IP addresses.

59
00:02:57,528 --> 00:02:59,626
Back in the early days, we didn't have a large network.

60
00:02:59,627 --> 00:03:01,462
We only had a few data centers.

61
00:03:01,462 --> 00:03:03,528
And with limited network capacity,

62
00:03:03,528 --> 00:03:07,066
there wasn't much we could do.

63
00:03:07,066 --> 00:03:09,495
So, when network congested due to an attack,

64
00:03:09,495 --> 00:03:11,495
we had a real problem.

65
00:03:11,495 --> 00:03:13,594
In order to save our whole network,

66
00:03:13,594 --> 00:03:17,066
we often had to sacrifice the attacked IP addresses.

67
00:03:17,066 --> 00:03:19,231
So, for that we used BGP null routing.

68
00:03:19,231 --> 00:03:21,561
And with BGP null routing, we can pretty much remove

69
00:03:21,561 --> 00:03:23,792
the attacked IP address from the Internet.

70
00:03:23,792 --> 00:03:25,528
This is not perfect, because that means

71
00:03:25,528 --> 00:03:27,692
that the services on those IP addresses

72
00:03:27,693 --> 00:03:29,132
will be unavailable.

73
00:03:29,132 --> 00:03:33,495
But at least the rest of the network is salvaged.

74
00:03:33,495 --> 00:03:35,231
But as years passed,

75
00:03:35,231 --> 00:03:37,924
we added much more data centers

76
00:03:37,924 --> 00:03:40,495
and we increased our network capacity immensely.

77
00:03:40,495 --> 00:03:43,462
And nowadays, we find ourselves in a different situation.

78
00:03:43,462 --> 00:03:45,263
Nowadays, most of the attacks

79
00:03:45,264 --> 00:03:47,660
actually don't cause congestion anymore.

80
00:03:47,660 --> 00:03:49,297
And this is great, because that means

81
00:03:49,297 --> 00:03:52,363
we can actually try to do something with the attack.

82
00:03:52,363 --> 00:03:54,297
We can actually keep the services

83
00:03:54,297 --> 00:03:56,792
under attack available.

84
00:03:56,792 --> 00:03:59,825
We don't need to rely on BGP null routing anymore.

85
00:03:59,825 --> 00:04:01,692
So, let me give you some example.

86
00:04:01,693 --> 00:04:03,627
If the attack was an NTP flood

87
00:04:03,627 --> 00:04:05,561
like it was popular a year ago,

88
00:04:05,561 --> 00:04:07,693
we could just deploy a firewall rule

89
00:04:07,693 --> 00:04:10,033
and just drop the incoming NTP packets.

90
00:04:10,033 --> 00:04:12,791
Since the attack doesn't cause congestion

91
00:04:12,792 --> 00:04:14,693
anymore, this would be okay.

92
00:04:14,693 --> 00:04:17,132
We don't provide NTP services to our end users.

93
00:04:17,132 --> 00:04:21,231
No one will ever notice that there's an attack happening.

94
00:04:21,231 --> 00:04:22,528
But there's a catch.

95
00:04:22,528 --> 00:04:24,858
Applying more and more specific mitigations

96
00:04:24,858 --> 00:04:27,627
requires knowing more parameters.

97
00:04:27,627 --> 00:04:29,429
Having to deal with more parameters

98
00:04:29,429 --> 00:04:30,924
is pretty hard for the operator.

99
00:04:30,924 --> 00:04:33,758
So, for example, to do BGP null routing,

100
00:04:33,759 --> 00:04:36,000
all you need to know is an IP address.

101
00:04:36,000 --> 00:04:36,957
That's it.

102
00:04:36,957 --> 00:04:38,825
But in order to do a firewall rule,

103
00:04:38,825 --> 00:04:40,627
now you need to know an IP address,

104
00:04:40,627 --> 00:04:42,660
a port number, protocol number, packet length,

105
00:04:42,660 --> 00:04:46,165
and maybe even some more sophisticated criteria.

106
00:04:46,165 --> 00:04:49,429
And being able to mitigate attacks with better precision

107
00:04:49,429 --> 00:04:50,296
is nice.

108
00:04:50,297 --> 00:04:51,594
It's very good.

109
00:04:51,594 --> 00:04:54,363
But having to deal with more parameters

110
00:04:54,363 --> 00:04:56,693
is very hard for the operator.

111
00:04:56,693 --> 00:04:58,462
So, this is where the problem starts.

112
00:04:58,462 --> 00:04:59,924
On one hand, the operator

113
00:04:59,924 --> 00:05:02,858
would like to apply a very specific

114
00:05:02,858 --> 00:05:05,165
and optimal mitigation.

115
00:05:05,165 --> 00:05:08,264
But they will need to collect the required parameters.

116
00:05:08,264 --> 00:05:10,231
On the other hand, broad mitigations

117
00:05:10,231 --> 00:05:11,528
are quickly available.

118
00:05:11,528 --> 00:05:14,396
You can always do BGP null routing very quickly.

119
00:05:14,396 --> 00:05:17,759
But this will cause large damage.

120
00:05:17,759 --> 00:05:20,462
Also, it's very easy to make mistakes.

121
00:05:20,462 --> 00:05:22,957
And our history did have significant outages

122
00:05:22,957 --> 00:05:25,528
caused not by the attack traffic itself,

123
00:05:25,528 --> 00:05:30,297
but by the operators applying incorrect mitigations.

124
00:05:30,297 --> 00:05:32,297
Computers are, of course, much better

125
00:05:32,297 --> 00:05:34,726
at dealing with things like that than humans.

126
00:05:34,726 --> 00:05:38,792
So, many of the DDoS defenses can just be automated.

127
00:05:38,792 --> 00:05:40,131
And this is where I step in.

128
00:05:40,132 --> 00:05:41,528
For the last two years,

129
00:05:41,528 --> 00:05:43,396
I've been leading a project to help that.

130
00:05:43,396 --> 00:05:46,297
In that time, we've built from scratch

131
00:05:46,297 --> 00:05:48,924
a fully automatic DDoS mitigation system.

132
00:05:48,924 --> 00:05:50,363
It's able to detect attacks

133
00:05:50,363 --> 00:05:53,429
as they happen and then mitigate them automatically.

134
00:05:53,429 --> 00:05:55,231
The system is called Gatebot.

135
00:05:55,231 --> 00:05:58,693
And this is the talk about Gatebot.

136
00:05:58,693 --> 00:06:01,164
So, Gatebot is composed of three components.

137
00:06:01,165 --> 00:06:02,792
There's attack detection,

138
00:06:02,792 --> 00:06:04,395
then there is reactive automation,

139
00:06:04,396 --> 00:06:06,528
and finally there is mitigation.

140
00:06:06,528 --> 00:06:08,198
The flow of the action is as follows.

141
00:06:08,198 --> 00:06:09,957
On incoming traffic,

142
00:06:09,957 --> 00:06:11,792
we are detecting the attacks as they happen.

143
00:06:11,792 --> 00:06:13,462
We're identifying them.

144
00:06:13,462 --> 00:06:15,726
And this information is being pushed then, today,

145
00:06:15,726 --> 00:06:17,693
through the automation system,

146
00:06:17,693 --> 00:06:21,198
which is able to pick up a proper mitigation strategy.

147
00:06:21,198 --> 00:06:23,263
Finally, this triggers the deployment

148
00:06:23,264 --> 00:06:26,099
of the rules across our servers.

149
00:06:26,099 --> 00:06:27,198
I'll explain the system

150
00:06:27,198 --> 00:06:29,000
in detail, but I have to warn you now.

151
00:06:29,000 --> 00:06:32,528
So, it's easiest to explain to understand

152
00:06:32,528 --> 00:06:35,066
how it works if I will start with the mitigation phase.

153
00:06:35,066 --> 00:06:37,857
So, let me start by showing you a real attack

154
00:06:37,858 --> 00:06:41,297
and by showing you how we actually mitigate it.

155
00:06:41,297 --> 00:06:42,528
Okay.

156
00:06:42,528 --> 00:06:43,858
So, on graphs,

157
00:06:43,858 --> 00:06:46,792
big denial-of-service attacks are pretty easy to spot.

158
00:06:46,792 --> 00:06:51,296
They show as gigantic inbound packet spikes, traffic spikes.

159
00:06:51,297 --> 00:06:55,957
It's traffic way above the average.

160
00:06:55,957 --> 00:06:57,627
On this particular chart, you can see an attack

161
00:06:57,627 --> 00:06:59,726
hitting on one of our servers.

162
00:06:59,726 --> 00:07:01,132
And in this case, the attack

163
00:07:01,132 --> 00:07:05,198
was hitting up to 800,000 packets per second

164
00:07:05,198 --> 00:07:07,363
against the single server.

165
00:07:07,363 --> 00:07:10,363
So, okay, we see that that attack is pretty large.

166
00:07:10,363 --> 00:07:12,363
What was in the packets?

167
00:07:12,363 --> 00:07:13,726
It could have been many things.

168
00:07:13,726 --> 00:07:15,066
We are seeing different types of attacks,

169
00:07:15,066 --> 00:07:17,957
but, in this case, it was a DNS flood.

170
00:07:17,957 --> 00:07:20,462
In this case, the attack was composed of DNS queries

171
00:07:20,462 --> 00:07:23,132
asking my DNS server for a resolution

172
00:07:23,132 --> 00:07:26,066
of example.com domain over and over again.

173
00:07:29,198 --> 00:07:31,296
So, we know how big was the attack.

174
00:07:31,297 --> 00:07:33,363
We know what was in the packets.

175
00:07:33,363 --> 00:07:35,561
So where are the packets coming from?

176
00:07:35,561 --> 00:07:38,462
And this is a big news. So, there is no way

177
00:07:38,462 --> 00:07:39,726
this kind of volume of packets

178
00:07:39,726 --> 00:07:43,825
would ever come from a legitimate application.

179
00:07:43,825 --> 00:07:47,429
These packets were actually created by an attack tool,

180
00:07:47,429 --> 00:07:50,066
and they're being spoofed and injected into network

181
00:07:50,066 --> 00:07:52,263
with very high speed.

182
00:07:52,264 --> 00:07:54,858
In order to keep your application running,

183
00:07:54,858 --> 00:07:57,000
it is critical to shield from the attack traffic.

184
00:07:57,000 --> 00:07:59,231
It is just too large.

185
00:07:59,231 --> 00:08:03,198
Fortunately, it's usually pretty easy.

186
00:08:03,198 --> 00:08:06,693
In our flood example, there are two criteria

187
00:08:06,693 --> 00:08:08,032
we can use very easily

188
00:08:08,033 --> 00:08:10,627
to distinguish the attack traffic

189
00:08:10,627 --> 00:08:11,957
from the normal traffic.

190
00:08:11,957 --> 00:08:15,231
We can use the attack domain, which is example.com.

191
00:08:15,231 --> 00:08:16,495
It's always fixed in this attack.

192
00:08:16,495 --> 00:08:18,561
And we can also use the packet length,

193
00:08:18,561 --> 00:08:22,395
which is always here fixed at 50 bytes.

194
00:08:22,396 --> 00:08:23,726
These parameters can be used

195
00:08:23,726 --> 00:08:26,165
to separate the good from the bad traffic,

196
00:08:26,165 --> 00:08:29,297
and then, in effect, we can just drop the bad traffic.

197
00:08:29,297 --> 00:08:31,462
Since the bad traffic, since the attack traffic

198
00:08:31,462 --> 00:08:33,528
is actually spoofed, it's not legitimate.

199
00:08:33,528 --> 00:08:37,528
It's actually a valid thing to do to just drop it.

200
00:08:37,528 --> 00:08:39,627
So, knowing the parameters,

201
00:08:39,626 --> 00:08:42,693
how can we distinguish the good from bad traffic

202
00:08:42,693 --> 00:08:44,957
with a very high speed?

203
00:08:44,957 --> 00:08:47,858
Well, we could choose one of two layers.

204
00:08:47,858 --> 00:08:50,560
We could use router and router firewalls for that,

205
00:08:50,561 --> 00:08:52,561
or we could choose the Linux and Linux firewall,

206
00:08:52,561 --> 00:08:53,957
the iptables.

207
00:08:53,957 --> 00:08:55,726
We chose iptables, and we did this

208
00:08:55,726 --> 00:08:57,132
for a good reason.

209
00:08:57,132 --> 00:09:01,132
So, not only it allows us to have very broad criteria --

210
00:09:01,132 --> 00:09:03,032
iptables is very configurable --

211
00:09:03,033 --> 00:09:06,033
but, also, we can do deep-packet inspection on iptables.

212
00:09:06,033 --> 00:09:08,825
This is usually not possible on the router layer.

213
00:09:08,825 --> 00:09:11,000
There are many techniques --

214
00:09:11,000 --> 00:09:13,429
There are many ways to match packets

215
00:09:13,429 --> 00:09:16,726
based on content to do deep-packet-inspection iptables.

216
00:09:16,726 --> 00:09:18,396
But what we found the most effective

217
00:09:18,396 --> 00:09:20,627
is called BPF, the Berkeley Packet Filter.

218
00:09:20,627 --> 00:09:22,824
Here's an example rule, iptables rule,

219
00:09:22,825 --> 00:09:24,759
that can match based on BPFs,

220
00:09:24,759 --> 00:09:28,066
and, as you can see, it's just a series of numbers.

221
00:09:28,066 --> 00:09:31,627
But these numbers represent bytecode.

222
00:09:31,627 --> 00:09:33,593
This bytecode is a filtering program,

223
00:09:33,594 --> 00:09:35,396
and, with BPFs, it's possible

224
00:09:35,396 --> 00:09:38,693
to express a fairly complex packet-filtering logic.

225
00:09:38,693 --> 00:09:41,231
We found BPFs to be extremely effective,

226
00:09:41,231 --> 00:09:43,858
and we created a couple of scripts around them.

227
00:09:43,858 --> 00:09:45,396
If you are wondering how we actually

228
00:09:45,396 --> 00:09:48,065
deal with the DNS attacks, look at our GitHub.

229
00:09:48,066 --> 00:09:50,858
It's fully documented there.

230
00:09:50,858 --> 00:09:52,263
Okay, so,

231
00:09:52,264 --> 00:09:55,660
now we know how that we are using BPFs for mitigations,

232
00:09:55,660 --> 00:09:58,824
but that requires updating iptables dynamically.

233
00:09:58,825 --> 00:10:02,330
We need to deploy mitigations as the new attacks are created.

234
00:10:02,330 --> 00:10:05,033
It's easy to update iptables on a single host,

235
00:10:05,033 --> 00:10:07,495
but how to distribute iptables across many machines,

236
00:10:07,495 --> 00:10:09,429
across hundreds of machines?

237
00:10:09,429 --> 00:10:11,462
For that, we have a different system.

238
00:10:11,462 --> 00:10:13,561
We have a centralized mitigation database

239
00:10:13,561 --> 00:10:17,033
that allows us to add and remove iptables mitigations

240
00:10:17,033 --> 00:10:18,429
from a central place.

241
00:10:18,429 --> 00:10:19,858
This is nothing fancy. It's pretty much

242
00:10:19,858 --> 00:10:23,263
a glorified-interface dollar firewall.

243
00:10:23,264 --> 00:10:24,462
Okay.

244
00:10:24,462 --> 00:10:26,593
So, now we know how to drop packets in BPFs.

245
00:10:26,594 --> 00:10:30,330
Now we know how to deploy the iptables across many servers

246
00:10:30,330 --> 00:10:33,231
with our centralized mitigation database.

247
00:10:33,231 --> 00:10:34,462
Let's go back to our question,

248
00:10:34,462 --> 00:10:38,264
how to detect the parameters automatically.

249
00:10:38,264 --> 00:10:39,528
So, one thing you could do

250
00:10:39,528 --> 00:10:41,594
if you could just log in on an affected machine --

251
00:10:41,594 --> 00:10:43,660
If you see something weird going on,

252
00:10:43,660 --> 00:10:45,759
you can log in to the machine, run tcpdump,

253
00:10:45,759 --> 00:10:46,924
and stare at the packets

254
00:10:46,924 --> 00:10:48,858
in order to figure out the parameters,

255
00:10:48,858 --> 00:10:50,593
but there's a better way.

256
00:10:50,594 --> 00:10:52,264
So what we found instead

257
00:10:52,264 --> 00:10:56,198
is we are collecting sampled traffic

258
00:10:56,198 --> 00:10:57,561
from the switches.

259
00:10:57,561 --> 00:11:00,759
And every thousandth packet crossing our switches

260
00:11:00,759 --> 00:11:02,561
is packed on the UDP payload

261
00:11:02,561 --> 00:11:05,231
and shipped to our central location.

262
00:11:05,231 --> 00:11:08,396
In this location, we can then analyze the packets further

263
00:11:08,396 --> 00:11:11,329
and do all kinds of aggregations on that.

264
00:11:11,330 --> 00:11:12,825
We are using sFlow protocol

265
00:11:12,825 --> 00:11:15,264
to deliver the samples to a central location.

266
00:11:15,264 --> 00:11:20,957
And then we can use this data to detect attacks automatically.

267
00:11:20,957 --> 00:11:23,231
So, I'll try to give you an overview

268
00:11:23,231 --> 00:11:26,396
of how our attack-detection algorithm works,

269
00:11:26,396 --> 00:11:29,296
but first we need to define what is an attack.

270
00:11:29,297 --> 00:11:32,396
What do we actually want to find in the traffic?

271
00:11:32,396 --> 00:11:34,264
So,

272
00:11:34,264 --> 00:11:36,924
since we are interested mostly in high-volume packet floods

273
00:11:36,924 --> 00:11:38,924
because they actually cause large damage,

274
00:11:38,924 --> 00:11:40,098
we can just use threshold.

275
00:11:40,099 --> 00:11:41,693
We can just assume that any attack

276
00:11:41,693 --> 00:11:43,792
we want to mitigate is going to be pretty large.

277
00:11:43,792 --> 00:11:47,297
Small attacks usually can just be handled by our servers,

278
00:11:47,297 --> 00:11:50,165
not requiring any mitigation whatsoever.

279
00:11:50,165 --> 00:11:51,693
It's only the big attacks

280
00:11:51,693 --> 00:11:54,891
that we want our system to react.

281
00:11:54,891 --> 00:11:57,198
Then the system works in such a way

282
00:11:57,198 --> 00:12:00,429
that each attack that is detected can be mitigated.

283
00:12:00,429 --> 00:12:02,264
There's no need for our system

284
00:12:02,264 --> 00:12:05,264
to report attacks that cannot be mitigated.

285
00:12:05,264 --> 00:12:06,627
This would be a waste.

286
00:12:06,627 --> 00:12:08,726
Additionally, the detected attacks

287
00:12:08,726 --> 00:12:10,066
are reported in such a way

288
00:12:10,066 --> 00:12:12,528
that could be fed directly into iptables.

289
00:12:12,528 --> 00:12:13,858
This is great because that means

290
00:12:13,858 --> 00:12:15,791
that the whole system is pretty simple.

291
00:12:15,792 --> 00:12:18,627
The most complex logic is in the detection part.

292
00:12:18,627 --> 00:12:21,627
But we have to be careful here because if the detection system

293
00:12:21,627 --> 00:12:24,032
detects too many concurrent attacks going on,

294
00:12:24,033 --> 00:12:26,396
we may end up in too many mitigation rules

295
00:12:26,396 --> 00:12:28,363
and, therefore, too many iptable rules.

296
00:12:28,363 --> 00:12:30,198
And iptables is not very efficient

297
00:12:30,198 --> 00:12:33,660
at handling hundreds of rules at a time.

298
00:12:33,660 --> 00:12:36,429
So, what should the system do when there are too many attacks

299
00:12:36,429 --> 00:12:37,957
going on concurrently?

300
00:12:37,957 --> 00:12:40,396
Well, it should aggregate them.

301
00:12:40,396 --> 00:12:42,660
For example, there is no reason for our system

302
00:12:42,660 --> 00:12:45,495
to report that there are hundreds of IP addresses

303
00:12:45,495 --> 00:12:46,957
attacked within one subnet.

304
00:12:46,957 --> 00:12:48,759
This essentially just say that the whole subnet

305
00:12:48,759 --> 00:12:51,792
is being under attack.

306
00:12:51,792 --> 00:12:53,000
So, implementation-wise,

307
00:12:53,000 --> 00:12:54,924
this kind of algorithms is not very simple.

308
00:12:54,924 --> 00:12:57,858
There is a well-known algorithm

309
00:12:57,858 --> 00:12:59,527
for doing this kind of aggregation.

310
00:12:59,528 --> 00:13:01,528
It's called Hierarchical Heavy Hitters,

311
00:13:01,528 --> 00:13:03,495
but we decided not to use it.

312
00:13:03,495 --> 00:13:05,528
Instead, we devised our own algorithm,

313
00:13:05,528 --> 00:13:08,330
which is very simple, but it trades a bit

314
00:13:08,330 --> 00:13:10,528
of the accuracy of the report values

315
00:13:10,528 --> 00:13:13,132
for the relaxation of some constraints.

316
00:13:13,132 --> 00:13:16,957
So let me give you a flavor of how the algorithm works.

317
00:13:16,957 --> 00:13:19,165
The building block for our algorithm

318
00:13:19,165 --> 00:13:21,759
is a data structure called "space saving."

319
00:13:21,759 --> 00:13:24,165
It's an algorithm called space saving.

320
00:13:24,165 --> 00:13:25,891
It's allows us to keep track

321
00:13:25,891 --> 00:13:31,065
of counters for top-end entries in an arbitrary data stream.

322
00:13:31,066 --> 00:13:35,495
But most importantly, it's only using fixed-memory sights.

323
00:13:35,495 --> 00:13:38,957
We are keeping multiple tables for multiple aggregation levels.

324
00:13:38,957 --> 00:13:41,066
So, for the sake of explanation,

325
00:13:41,066 --> 00:13:43,858
let's assume that we keep three aggregation levels.

326
00:13:43,858 --> 00:13:46,693
We keep pretty specific IP and port information.

327
00:13:46,693 --> 00:13:49,165
We keep less specific only-destination IPs.

328
00:13:49,165 --> 00:13:51,098
And finally, the broadest one

329
00:13:51,099 --> 00:13:52,726
with attacked subnets.

330
00:13:52,726 --> 00:13:55,000
Let's go especially for subnets.

331
00:13:55,000 --> 00:13:56,891
And for the sake of explanation,

332
00:13:56,891 --> 00:13:59,065
let's say that our system works like that.

333
00:13:59,066 --> 00:14:01,627
So, when a new sample comes in,

334
00:14:01,627 --> 00:14:03,098
we iterate over all the tables,

335
00:14:03,099 --> 00:14:06,462
and we just bump up the counters for each of the tables.

336
00:14:06,462 --> 00:14:08,462
If the packet was to this IP address,

337
00:14:08,462 --> 00:14:10,693
we just bump the counters in each of the tables,

338
00:14:10,693 --> 00:14:13,066
and we move on to the next sample.

339
00:14:13,066 --> 00:14:17,165
Finally, the system stops every now and then --

340
00:14:17,165 --> 00:14:18,429
let's say every second --

341
00:14:18,429 --> 00:14:20,528
in order to print out the report.

342
00:14:20,528 --> 00:14:22,759
And what it does when it prints out the report,

343
00:14:22,759 --> 00:14:25,528
well, it just iterates over all the tables

344
00:14:25,528 --> 00:14:28,297
and finds the entries above some predefined threshold,

345
00:14:28,297 --> 00:14:30,363
like, say, 1 million packets per second,

346
00:14:30,363 --> 00:14:31,957
and prints them out.

347
00:14:31,957 --> 00:14:34,561
So, this is how a report could look like.

348
00:14:34,561 --> 00:14:38,495
It's not very useful because you can see duplicated items.

349
00:14:38,495 --> 00:14:40,198
Most of them actually overlap.

350
00:14:40,198 --> 00:14:42,957
So let's fix the algorithm.

351
00:14:42,957 --> 00:14:45,627
So, now, instead of bumping counters

352
00:14:45,627 --> 00:14:47,263
in each of the table indiscriminately,

353
00:14:47,264 --> 00:14:48,924
we are doing that a bit differently.

354
00:14:48,924 --> 00:14:50,560
So now, when the new sample comes in,

355
00:14:50,561 --> 00:14:51,825
we iterate over tables,

356
00:14:51,825 --> 00:14:53,792
but in a very well-defined order --

357
00:14:53,792 --> 00:14:57,429
from the most specific one to the least specific one.

358
00:14:57,429 --> 00:15:00,495
And when we increase the counter in the table

359
00:15:00,495 --> 00:15:02,297
we are right now iterating over,

360
00:15:02,297 --> 00:15:05,264
then we also check the packets-per-second value,

361
00:15:05,264 --> 00:15:06,792
and, if it's above the threshold,

362
00:15:06,792 --> 00:15:09,000
we stop the algorithm there.

363
00:15:09,000 --> 00:15:12,099
If you think about it, this will prevent the counters

364
00:15:12,099 --> 00:15:14,132
in the less-specific tables to grow.

365
00:15:14,132 --> 00:15:16,231
And if you print the report right now,

366
00:15:16,231 --> 00:15:19,165
it will actually show some interesting data.

367
00:15:19,165 --> 00:15:20,726
So, the algorithm is pretty simple,

368
00:15:20,726 --> 00:15:22,033
but it's not fully accurate.

369
00:15:22,033 --> 00:15:23,330
If you analyze the details,

370
00:15:23,330 --> 00:15:25,396
the counters can be off by some fraction,

371
00:15:25,396 --> 00:15:27,957
but it works pretty well in practice.

372
00:15:27,957 --> 00:15:30,726
Here is a screenshot of some attacks

373
00:15:30,726 --> 00:15:32,693
detected against our network,

374
00:15:32,693 --> 00:15:33,924
and the point here is

375
00:15:33,924 --> 00:15:36,560
that the system works pretty well in practice.

376
00:15:36,561 --> 00:15:38,198
It is able to keep the number

377
00:15:38,198 --> 00:15:40,627
of detected attacks to a small number

378
00:15:40,627 --> 00:15:41,924
so that the number of mitigations

379
00:15:41,924 --> 00:15:43,396
is really pretty small,

380
00:15:43,396 --> 00:15:45,791
but when there are some attacks with very distinct criteria,

381
00:15:45,792 --> 00:15:48,363
it is able to figure out them, as well.

382
00:15:48,363 --> 00:15:51,462
But most importantly, the system scales well.

383
00:15:51,462 --> 00:15:53,759
As we are learning more about new attacks,

384
00:15:53,759 --> 00:15:57,198
we are able to add more different mitigation criteria,

385
00:15:57,198 --> 00:15:58,693
different detection criteria,

386
00:15:58,693 --> 00:16:02,759
and the system works very well with added dimensions.

387
00:16:02,759 --> 00:16:06,429
Okay, let's jump onto the last piece of the puzzle,

388
00:16:06,429 --> 00:16:08,726
to reactive automation.

389
00:16:08,726 --> 00:16:11,957
So, we described so far two parts of our system.

390
00:16:11,957 --> 00:16:14,066
We described the detection part,

391
00:16:14,066 --> 00:16:15,330
based on sFlow,

392
00:16:15,330 --> 00:16:17,363
and we described the mitigation database

393
00:16:17,363 --> 00:16:18,858
that is just pushing those to iptables.

394
00:16:18,858 --> 00:16:21,329
As I mentioned before, the detection system

395
00:16:21,330 --> 00:16:24,132
is able to report attacks in such a way

396
00:16:24,132 --> 00:16:26,957
that could be just fed directly to the mitigation database.

397
00:16:26,957 --> 00:16:28,528
So, why don't we do that?

398
00:16:28,528 --> 00:16:30,759
Well, apparently, you cannot just do that.

399
00:16:30,759 --> 00:16:32,132
It's a much more complex problem

400
00:16:32,132 --> 00:16:35,726
because there is plenty of context in each mitigation.

401
00:16:35,726 --> 00:16:37,066
Let me give an example.

402
00:16:37,066 --> 00:16:39,924
So, for our favorite attack, attacking example.com,

403
00:16:39,924 --> 00:16:41,891
let's assume that the mitigation

404
00:16:41,891 --> 00:16:44,329
is just to rate-limit those queries.

405
00:16:44,330 --> 00:16:48,429
So the naive mitigation could just look at the attack,

406
00:16:48,429 --> 00:16:52,528
add a QPS value with some rate limit,

407
00:16:52,528 --> 00:16:54,660
and then just move on -- very simple.

408
00:16:54,660 --> 00:16:56,000
But if you think about it,

409
00:16:56,000 --> 00:16:58,660
where does this QPS value come from?

410
00:16:58,660 --> 00:17:00,858
You may want to have different rate limits

411
00:17:00,858 --> 00:17:02,494
based on different customers.

412
00:17:02,495 --> 00:17:05,329
So, for example, if the customer is your very

413
00:17:05,329 --> 00:17:06,791
important enterprise customer,

414
00:17:06,791 --> 00:17:08,890
you may want to add a different rate limit

415
00:17:08,891 --> 00:17:11,066
than if the domain doesn't exist at all,

416
00:17:11,066 --> 00:17:13,627
in which case, you may want to just drop the packets.

417
00:17:13,627 --> 00:17:15,032
So, conceptually,

418
00:17:15,032 --> 00:17:17,791
don't have a single input stream for the mitigation rule.

419
00:17:17,791 --> 00:17:19,297
You don't have only the attack.

420
00:17:19,297 --> 00:17:21,000
You also have some additional data.

421
00:17:21,000 --> 00:17:23,032
We can make our system even more complex.

422
00:17:23,032 --> 00:17:25,593
So, for example, if the domain is actually invalid,

423
00:17:25,594 --> 00:17:27,759
if we are hosting it,

424
00:17:27,759 --> 00:17:31,660
then we may want to whitelist the valid subdomains.

425
00:17:31,660 --> 00:17:34,132
But the valid subdomains can change in any moment.

426
00:17:34,132 --> 00:17:36,528
The customer can just log in to the panel

427
00:17:36,528 --> 00:17:38,495
and can change them.

428
00:17:38,495 --> 00:17:40,131
So this kind of logic

429
00:17:40,132 --> 00:17:42,330
is what we are trying to express in our system.

430
00:17:42,330 --> 00:17:45,099
Our system was designed especially to be able

431
00:17:45,099 --> 00:17:48,297
to express this logic with extremely simple code.

432
00:17:48,297 --> 00:17:49,759
So, for that, we created

433
00:17:49,759 --> 00:17:51,693
a functional reactive-programming engine

434
00:17:51,693 --> 00:17:54,264
that is able to execute the rules.

435
00:17:54,264 --> 00:17:55,758
The rules are written up front

436
00:17:55,759 --> 00:17:58,297
by either developers or the operators.

437
00:17:58,297 --> 00:18:00,396
They are written in a very readable programming language,

438
00:18:00,396 --> 00:18:01,693
which is Python.

439
00:18:01,693 --> 00:18:04,033
And here's an example of a rule.

440
00:18:04,033 --> 00:18:05,627
This rule could be used

441
00:18:05,627 --> 00:18:08,396
for our attack that we discussed before.

442
00:18:08,396 --> 00:18:10,956
As you can see, it takes three input streams.

443
00:18:10,957 --> 00:18:13,165
One is the attack, one if the information

444
00:18:13,165 --> 00:18:14,693
about domain plans,

445
00:18:14,693 --> 00:18:15,956
and finally, there is information

446
00:18:15,957 --> 00:18:17,660
about subdomains for each domain.

447
00:18:17,660 --> 00:18:21,198
And then it does fairly easy string-concatenation logic

448
00:18:21,198 --> 00:18:23,528
in order to be able to produce the mitigation.

449
00:18:23,528 --> 00:18:25,759
When this rule is being run,

450
00:18:25,759 --> 00:18:27,198
the functional reactive-programming engine

451
00:18:27,198 --> 00:18:28,759
will figure out the dependencies,

452
00:18:28,759 --> 00:18:31,000
and it will know

453
00:18:31,000 --> 00:18:32,924
that if subdomains change for a particular domain,

454
00:18:32,924 --> 00:18:35,330
what rules should be recomputed.

455
00:18:35,330 --> 00:18:38,066
So perhaps now we can see the power of this system.

456
00:18:38,066 --> 00:18:41,132
It's not only easy to read and extend the rules

457
00:18:41,132 --> 00:18:42,792
as we grow our systems,

458
00:18:42,792 --> 00:18:46,099
but they are also fully composable.

459
00:18:46,099 --> 00:18:47,627
So, this is a pretty drawing

460
00:18:47,627 --> 00:18:49,759
of this attack we are having in our system.

461
00:18:49,759 --> 00:18:51,033
There's no way you can read it,

462
00:18:51,033 --> 00:18:52,362
but the point is,

463
00:18:52,363 --> 00:18:55,033
with small building blocks that are composable,

464
00:18:55,033 --> 00:18:57,527
you can actually create a fairly sophisticated system.

465
00:18:57,528 --> 00:18:59,924
But we can still maintain code quality.

466
00:18:59,924 --> 00:19:02,693
The code is still veritable.

467
00:19:02,693 --> 00:19:06,000
Okay, let's sum up.

468
00:19:06,000 --> 00:19:08,363
So, we described all three parts of our system.

469
00:19:08,363 --> 00:19:09,825
We described the attack detection,

470
00:19:09,825 --> 00:19:11,528
we described the reactive automation

471
00:19:11,528 --> 00:19:13,561
based on functional reactive programming,

472
00:19:13,561 --> 00:19:16,231
and we described the mitigation database.

473
00:19:16,231 --> 00:19:18,924
This system is in production for a couple of months.

474
00:19:18,924 --> 00:19:21,561
And let me give you some numbers.

475
00:19:21,561 --> 00:19:23,099
So, here's a chart

476
00:19:23,099 --> 00:19:25,858
of daily denial-of-service mitigations

477
00:19:25,858 --> 00:19:27,759
as applied by our system.

478
00:19:27,759 --> 00:19:29,924
As you can see, some days were pretty busy.

479
00:19:29,924 --> 00:19:32,429
It was about 300 times events per day.

480
00:19:32,429 --> 00:19:36,462
But the general trend is that it reacts between 1,300 times

481
00:19:36,462 --> 00:19:38,462
in our setup.

482
00:19:38,462 --> 00:19:40,231
Mostly, the attacks are pretty small

483
00:19:40,231 --> 00:19:41,594
in terms of volume,

484
00:19:41,594 --> 00:19:44,396
but we do see attacks that are pretty large.

485
00:19:44,396 --> 00:19:47,462
We regularly see attacks hitting us

486
00:19:47,462 --> 00:19:50,462
with up to 100 million packets per second.

487
00:19:50,462 --> 00:19:56,066
And this kind of attacks is when the mitigation pipeline shines.

488
00:19:56,066 --> 00:19:58,858
These large attacks can cause significant damage,

489
00:19:58,858 --> 00:20:00,495
and you can only imagine how much

490
00:20:00,495 --> 00:20:03,824
time would it take to mitigate these manually.

491
00:20:03,825 --> 00:20:06,825
Okay, so, what are the takeaways?

492
00:20:06,825 --> 00:20:11,792
Well, generally speaking, fighting DDoS is a hard problem.

493
00:20:11,792 --> 00:20:14,264
In this talk, I covered only a fraction

494
00:20:14,264 --> 00:20:15,527
of a big field,

495
00:20:15,528 --> 00:20:19,594
of a big effort we have.

496
00:20:19,594 --> 00:20:22,693
And we only covered the technical details

497
00:20:22,693 --> 00:20:24,363
of our mitigation pipelines.

498
00:20:24,363 --> 00:20:27,363
There's much more work to be done,

499
00:20:27,363 --> 00:20:29,231
but I think we are making some progress.

500
00:20:29,231 --> 00:20:32,000
And I believe that eventually we'll get there.

501
00:20:32,000 --> 00:20:34,099
I believe that eventually we'll be able

502
00:20:34,099 --> 00:20:35,726
to fix the DDoS problem

503
00:20:35,726 --> 00:20:37,000
in the Internet.

504
00:20:37,000 --> 00:20:39,297
Thank you.

505
00:20:39,297 --> 00:20:41,957
[ Applause ]

506
00:20:41,957 --> 00:20:40,957


