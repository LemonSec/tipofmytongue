1
00:00:00,198 --> 00:00:05,759


2
00:00:05,759 --> 00:00:08,627
ZHU: Hi, everyone.
So, I'm Yan, and this is Peter.

3
00:00:08,627 --> 00:00:11,165
We both work at The Electronic
Frontier Foundation,

4
00:00:11,165 --> 00:00:14,758
although I'm
a mere lowly technology fellow,

5
00:00:14,759 --> 00:00:17,231
and Peter is the chief
computer scientist.

6
00:00:17,231 --> 00:00:18,858
So, today,
we're gonna be telling you

7
00:00:18,858 --> 00:00:20,693
some scary bedtime stories

8
00:00:20,693 --> 00:00:22,099
about the encrypted web

9
00:00:22,099 --> 00:00:24,363
and how Let's Encrypt
is helping make things better.

10
00:00:24,363 --> 00:00:27,198
So, how many people here
have heard of Let's Encrypt.

11
00:00:27,198 --> 00:00:29,858
I barely see anyone whose hand
isn't up, which is great.

12
00:00:29,858 --> 00:00:31,231
ECKERSLEY: How many people
have used it?

13
00:00:31,231 --> 00:00:32,759
ZHU: How many people
have used it?

14
00:00:32,759 --> 00:00:34,231
ECKERSLEY: A few of you.

15
00:00:34,231 --> 00:00:36,165
ZHU: Fewer. Cool.

16
00:00:36,165 --> 00:00:37,561
So, horror story
number one, I'm sure,

17
00:00:37,561 --> 00:00:39,297
is familiar to everyone here.

18
00:00:39,297 --> 00:00:43,726
It's that we don't yet
in a 100% HTTPS world.

19
00:00:43,726 --> 00:00:45,066
In fact,

20
00:00:45,066 --> 00:00:47,066
a few years ago,
when I logged into Quora,

21
00:00:47,066 --> 00:00:50,198
which, at the point, had like
10 million users or something,

22
00:00:50,198 --> 00:00:53,858
they were sending my passwords
over plaintext.

23
00:00:53,858 --> 00:00:55,726
Oh, man.
Yeah, everyone boo them,

24
00:00:55,726 --> 00:00:58,165
and then I didn't
use it since 2014.

25
00:00:58,165 --> 00:01:00,429
But I did check,
and it's fixed now, right?

26
00:01:00,429 --> 00:01:03,066
So, but some sites
are not Quora, right?

27
00:01:03,066 --> 00:01:04,957
They don't have
engineering staff.

28
00:01:04,956 --> 00:01:07,164
And so, if you're
a small website operator,

29
00:01:07,165 --> 00:01:10,759
setting up TLS
today is still tedious.

30
00:01:10,759 --> 00:01:13,066
Just to give you an example,

31
00:01:13,066 --> 00:01:15,363
this is a screenshot
from the DreamHost Wiki

32
00:01:15,363 --> 00:01:17,462
on how to set up HTTPS.

33
00:01:17,462 --> 00:01:18,858
They've actually made
this process

34
00:01:18,858 --> 00:01:21,231
a lot easier recently
by integrating Let's Encrypt,

35
00:01:21,231 --> 00:01:23,330
but before that, you had
to go through this,

36
00:01:23,330 --> 00:01:25,033
like, 12- or 14-step process

37
00:01:25,033 --> 00:01:27,891
and make sure you weren't
accidentally copying

38
00:01:27,891 --> 00:01:30,066
and pasting your private key
into your web browser,

39
00:01:30,066 --> 00:01:33,759
et cetera, and a lot of people
do mess that up.

40
00:01:33,759 --> 00:01:37,033
So, let's assume you've
got a cert finally, right?

41
00:01:37,033 --> 00:01:38,957
Then you might find
that TLS configuration

42
00:01:38,957 --> 00:01:41,395
is really confusing.

43
00:01:41,396 --> 00:01:44,627
So, as cryptanal--
cryptana--

44
00:01:44,627 --> 00:01:46,693
ugh, cryptanalysis gets better,

45
00:01:46,693 --> 00:01:51,495
you know, we discover algorithms
like RC4 are no longer secure.

46
00:01:51,495 --> 00:01:53,297
People like Nick Sullivan
at CloudFlare

47
00:01:53,297 --> 00:01:54,726
write these great posts
that are like,

48
00:01:54,726 --> 00:01:58,825
"Hey, server operators,
it's time to turn off RC4."

49
00:01:58,825 --> 00:02:00,528
And unless you're keeping up
to date

50
00:02:00,528 --> 00:02:03,660
with the latest
TLS best practices,

51
00:02:03,660 --> 00:02:06,131
you may not realize that your
server is now vulnerable to --

52
00:02:06,132 --> 00:02:08,297
ECKERSLEY: Right, we can't all
be hitting "refresh"

53
00:02:08,297 --> 00:02:09,726
on Nick Sullivan's blog
every day.

54
00:02:09,726 --> 00:02:12,891
ZHU: Yeah, although I do,
so, you know, it's -- Yeah.

55
00:02:12,891 --> 00:02:14,263
So, and, you know,

56
00:02:14,264 --> 00:02:18,066
and, similarly SHA-1 is being
deprecated by browsers,

57
00:02:18,066 --> 00:02:19,330
and so you have to go

58
00:02:19,330 --> 00:02:23,594
and make sure
you get a SHA-256 cert chain,

59
00:02:23,594 --> 00:02:25,231
and all that.

60
00:02:25,231 --> 00:02:26,692
But this is solvable, right?

61
00:02:26,693 --> 00:02:30,330
Like, what if we could all just
use good TLS configurations?

62
00:02:30,330 --> 00:02:31,858
And this --
this is actually a problem

63
00:02:31,858 --> 00:02:33,759
we'll talk about
how Let's Encrypt is solving,

64
00:02:33,759 --> 00:02:35,428
but, basically, there's --

65
00:02:35,429 --> 00:02:37,033
you know, there's books
you can go out and find,

66
00:02:37,033 --> 00:02:38,263
and there's wikis about, like,

67
00:02:38,264 --> 00:02:40,660
the best TLS configurations
at any time.

68
00:02:40,660 --> 00:02:43,297
So, what if you could just push
that to all the clients

69
00:02:43,297 --> 00:02:48,000
who need to upgrade
and so forth?

70
00:02:48,000 --> 00:02:50,825
Okay, so, let's assume
now you've set up TLS,

71
00:02:50,825 --> 00:02:52,396
and finally you're ready

72
00:02:52,396 --> 00:02:54,891
to switch your site
over to HTTPS.

73
00:02:54,891 --> 00:02:57,263
You type in
"nginx -s reload,"

74
00:02:57,264 --> 00:02:58,957
et cetera,
and you go to your site,

75
00:02:58,957 --> 00:03:03,561
and it's horribly broken because
of mixed-content blocking.

76
00:03:03,561 --> 00:03:06,462
Mixed-content blocking is
where you've switched

77
00:03:06,462 --> 00:03:10,825
your top-level site, Lenovo.com,
over to HTTPS,

78
00:03:10,825 --> 00:03:13,891
but you're loading these images
and scripts and iframes

79
00:03:13,891 --> 00:03:15,231
and all these ads

80
00:03:15,231 --> 00:03:18,528
and other resources over HTTP

81
00:03:18,528 --> 00:03:22,132
because those sites
don't yet support HTTPS.

82
00:03:22,132 --> 00:03:24,858
So, the browser's like, "No,
we're in a secure mode.

83
00:03:24,858 --> 00:03:26,660
We don't want to,
like, pollute

84
00:03:26,660 --> 00:03:28,792
that with insecure HTTP,

85
00:03:28,792 --> 00:03:31,594
so we're just gonna block
those HTTP resources."

86
00:03:31,594 --> 00:03:33,165
So, as a result,

87
00:03:33,165 --> 00:03:35,000
scripts aren't running 'cause
those are getting blocked,

88
00:03:35,000 --> 00:03:37,165
and your site just
looks completely broken.

89
00:03:37,165 --> 00:03:38,891
This is actually
a very large reason

90
00:03:38,891 --> 00:03:41,891
that new sites aren't able
to switch to HTTPS,

91
00:03:41,891 --> 00:03:43,396
because they're using
ad networks

92
00:03:43,396 --> 00:03:46,165
that don't support HTTPS yet.

93
00:03:46,165 --> 00:03:49,891
So, last year, the W3C said,
"We're gonna fix this.

94
00:03:49,891 --> 00:03:51,462
Well, we're gonna try
to fix this

95
00:03:51,462 --> 00:03:54,429
by adding in
a new content security policy,

96
00:03:54,429 --> 00:03:55,957
HTTP Header.

97
00:03:55,957 --> 00:03:57,363
So, for those of you
who aren't familiar,

98
00:03:57,363 --> 00:03:59,198
this is just an HTTP header.

99
00:03:59,198 --> 00:04:00,594
The server can say --

100
00:04:00,594 --> 00:04:02,660
The server sends,

101
00:04:02,660 --> 00:04:05,165
and it says, "Upgrade
and secure requests."

102
00:04:05,165 --> 00:04:06,660
And when the browser
sees this,

103
00:04:06,660 --> 00:04:08,957
it starts just automatically
trying

104
00:04:08,957 --> 00:04:11,726
to fetch the HTTPS resources.

105
00:04:11,726 --> 00:04:15,033
It still blocks them if HTTPS
isn't available,

106
00:04:15,033 --> 00:04:17,363
but I actually had to use this
a few days ago

107
00:04:17,363 --> 00:04:18,726
'cause I upgraded WordPress,

108
00:04:18,726 --> 00:04:21,858
and my blog, just, like,
all the HTTPS links

109
00:04:21,858 --> 00:04:25,066
were converted back to HTTP
by the updater somehow.

110
00:04:25,066 --> 00:04:28,726
So, I freaked out, and then I
fixed it in 20 seconds

111
00:04:28,726 --> 00:04:31,726
'cause I just set this header
and modern,

112
00:04:31,726 --> 00:04:34,429
like, Chrome and Firefox users,

113
00:04:34,429 --> 00:04:36,594
their browsers would just say,
"Oh, these resources --

114
00:04:36,594 --> 00:04:38,231
we should just try
to upgrade them."

115
00:04:38,231 --> 00:04:41,561
So, my blog looks amazing again.

116
00:04:41,561 --> 00:04:43,825
So, and finally, I'm sure

117
00:04:43,825 --> 00:04:45,330
this is a familiar story
to many,

118
00:04:45,330 --> 00:04:47,099
but there are a lot
of certificate authorities

119
00:04:47,099 --> 00:04:48,527
out there.
So, Peter,

120
00:04:48,528 --> 00:04:50,924
how many certificate authorities
do you think there are?

121
00:04:50,924 --> 00:04:52,527
ECKERSLEY: It's actually kind
of hard to tell,

122
00:04:52,528 --> 00:04:56,429
but the number from a scan that
we did maybe five years ago,

123
00:04:56,429 --> 00:04:58,890
late 2010,

124
00:04:58,891 --> 00:05:03,495
there was something
like 1,500 certificates

125
00:05:03,495 --> 00:05:05,462
that could make a --

126
00:05:05,462 --> 00:05:07,693
'cause CA certificates
that could sign something

127
00:05:07,693 --> 00:05:10,594
for Google.com or Facebook.com,
and your browser would trust it.

128
00:05:10,594 --> 00:05:13,627
Probably controlled
by somewhere between 200

129
00:05:13,627 --> 00:05:16,627
and 400 organizations,
but it was very hard to count.

130
00:05:16,627 --> 00:05:19,066
ZHU: Yeah.

131
00:05:19,066 --> 00:05:21,032
ECKERSLEY: So, it's time
to fight back

132
00:05:21,033 --> 00:05:24,693
against the unencrypted
and insecure web.

133
00:05:24,693 --> 00:05:26,462
You know,
let's gather our forces,

134
00:05:26,462 --> 00:05:29,164
go out into the night,
and confront these --

135
00:05:29,165 --> 00:05:31,693
these demons
that we're up against.

136
00:05:31,693 --> 00:05:33,198
You know,
we decided to try

137
00:05:33,198 --> 00:05:36,032
and address this
by starting a CA.

138
00:05:36,033 --> 00:05:38,231
Basically, you know,
there are too many of them --

139
00:05:38,231 --> 00:05:40,066
too many CAs out there.

140
00:05:40,066 --> 00:05:42,561
Let's make one that's
a little bit more friendly

141
00:05:42,561 --> 00:05:46,231
and use it to
do things better.

142
00:05:46,231 --> 00:05:48,363
So, it's called Let's Encrypt.

143
00:05:48,363 --> 00:05:50,594
It's free.
It's automated.

144
00:05:50,594 --> 00:05:53,693
It's open. Both the code
and the data is open.

145
00:05:53,693 --> 00:05:56,462
It's in Public Beta.
You can use it today.

146
00:05:56,462 --> 00:06:00,132
It was created as the merger
of two projects.

147
00:06:00,132 --> 00:06:02,297
There was a project at EFF
and the University of Michigan

148
00:06:02,297 --> 00:06:04,462
and a project at Mozilla.
We joined forces.

149
00:06:04,462 --> 00:06:06,164
We got a lot
of financial assistance

150
00:06:06,165 --> 00:06:08,561
from Cisco and Akamai.

151
00:06:08,561 --> 00:06:10,527
We got
our CA cross-signed

152
00:06:10,528 --> 00:06:12,726
by an existing CA
called IdenTrust,

153
00:06:12,726 --> 00:06:15,132
which means that it's compatible
with all the browsers.

154
00:06:15,132 --> 00:06:17,363
And it's housed
in a new 501(c)(3)

155
00:06:17,363 --> 00:06:19,165
called the Internet
Security Research Group,

156
00:06:19,165 --> 00:06:21,099
or ISRG.

157
00:06:21,099 --> 00:06:23,759
We've been getting
more sponsors since we launched.

158
00:06:23,759 --> 00:06:25,759
This is the current list.

159
00:06:25,759 --> 00:06:28,924
If you are thinking about it,
please come and sponsor ISRG.

160
00:06:28,924 --> 00:06:33,726
Help us make this thing
bigger and more effective.

161
00:06:33,726 --> 00:06:36,363
Now, fundamentally,
when you run a CA,

162
00:06:36,363 --> 00:06:38,561
you're gonna have to make
this really important decision.

163
00:06:38,561 --> 00:06:40,693
Every time a website,
a server comes along

164
00:06:40,693 --> 00:06:42,758
and asks you, "Hey,
can I have a cert?"

165
00:06:42,759 --> 00:06:45,264
you have to decide,
is the answer yes,

166
00:06:45,264 --> 00:06:47,132
or is the answer no?

167
00:06:47,132 --> 00:06:49,957
And the way we do this,

168
00:06:49,957 --> 00:06:52,825
you know, looks something
like a scene from

169
00:06:52,825 --> 00:06:55,957
"Monty Python and the Quest
for the Holy Grail."

170
00:06:55,957 --> 00:06:57,891
We're kind of the Knights
who say "Ni."

171
00:06:57,891 --> 00:07:00,462
You come along, and you say,
you know, "Can we have a cert?"

172
00:07:00,462 --> 00:07:04,264
and we say,
"Mm, bring us a shrubbery."

173
00:07:04,264 --> 00:07:05,825
And then you come along,

174
00:07:05,825 --> 00:07:07,164
and maybe you bring us
a shrubbery,

175
00:07:07,165 --> 00:07:09,924
and then we say, "Well,
bring us another shrubbery."

176
00:07:09,924 --> 00:07:12,099
And the protocol

177
00:07:12,099 --> 00:07:13,594
for this conversation
is called ACME.

178
00:07:13,594 --> 00:07:16,033
It's a new proposed standard
at the ITF,

179
00:07:16,033 --> 00:07:17,891
and the shrubberies
are called "challenges,"

180
00:07:17,891 --> 00:07:20,297
and they're sort
of an extensible set of things

181
00:07:20,297 --> 00:07:22,396
that a server can do to prove

182
00:07:22,396 --> 00:07:24,792
that it controls a particular
domain name, and therefore,

183
00:07:24,792 --> 00:07:26,792
deserves a certificate
for that domain name.

184
00:07:26,792 --> 00:07:31,032
We currently support a challenge
over Port 80,

185
00:07:31,033 --> 00:07:33,924
where you put up a file
at a special, well-known URL.

186
00:07:33,924 --> 00:07:36,263
We support a challenge
over Port 443,

187
00:07:36,264 --> 00:07:38,066
where you put up
a synthetic certificate

188
00:07:38,066 --> 00:07:41,494
on a synthetic domain name
in a TLS connection.

189
00:07:41,495 --> 00:07:43,396
And we support a DNS challenge

190
00:07:43,396 --> 00:07:45,627
where you put a record
in your DNS entry.

191
00:07:45,627 --> 00:07:49,330
We may support more challenges
in the future.

192
00:07:49,330 --> 00:07:51,132
Now, this thing
launched quite recently --

193
00:07:51,132 --> 00:07:54,792
private beta in November,
last year.

194
00:07:54,792 --> 00:07:59,099
Public beta -- open to anyone
without a sign-up in December.

195
00:07:59,099 --> 00:08:00,890
As soon as we did that,
we were starting to issue

196
00:08:00,891 --> 00:08:02,792
a lot of certificates,

197
00:08:02,792 --> 00:08:04,924
one cert every three seconds,
you know,

198
00:08:04,924 --> 00:08:07,858
in the first little while
of public availability.

199
00:08:07,858 --> 00:08:10,297
We're at close
to 400k certs now.

200
00:08:10,297 --> 00:08:11,726
This is the graph.

201
00:08:11,726 --> 00:08:13,528
If this keeps growing
like this,

202
00:08:13,528 --> 00:08:15,099
we'll be doing
a large fraction

203
00:08:15,099 --> 00:08:18,759
of the HTTPS web within a year,
and we're hoping that

204
00:08:18,759 --> 00:08:20,627
the graph will actually
get steeper

205
00:08:20,627 --> 00:08:23,561
as large deployments
start to integrate.

206
00:08:23,561 --> 00:08:24,924
Now, some more statistics.

207
00:08:24,924 --> 00:08:26,231
If you go and look at the things

208
00:08:26,231 --> 00:08:28,528
we've issued in the certificate
transparency logs,

209
00:08:28,528 --> 00:08:30,396
'cause we publish
all of the data about

210
00:08:30,396 --> 00:08:32,495
what we're signing,
if you scan all of

211
00:08:32,495 --> 00:08:34,858
those domain names,
you'll actually find that

212
00:08:34,857 --> 00:08:39,131
there are 547,200 domain
names right now

213
00:08:39,131 --> 00:08:41,626
that are answering with one
of these certificates --

214
00:08:41,626 --> 00:08:43,198
more than the number
of certificates

215
00:08:43,198 --> 00:08:47,198
because you can get a cert
that has multiple names in it.

216
00:08:47,198 --> 00:08:49,957
About 85% of these names

217
00:08:49,957 --> 00:08:51,924
have never spoken HTTPS before,

218
00:08:51,924 --> 00:08:55,660
so we are, like,
helping a few people

219
00:08:55,660 --> 00:08:58,065
who already have TLS
and a whole lot of new people

220
00:08:58,066 --> 00:09:00,099
who have never been able
to do it before.

221
00:09:00,099 --> 00:09:02,165
And we feel like
we're winning here.

222
00:09:02,165 --> 00:09:03,593
There are also quite a lot

223
00:09:03,594 --> 00:09:05,660
of certs that aren't
being served yet.

224
00:09:05,660 --> 00:09:09,033
That's a combination of people
playing around with the thing,

225
00:09:09,033 --> 00:09:11,132
people playing around
with automating renewal,

226
00:09:11,132 --> 00:09:13,693
people taking certs
and putting them up

227
00:09:13,693 --> 00:09:16,066
on SMTP servers, IMAP servers,

228
00:09:16,066 --> 00:09:17,528
other kinds of mail servers

229
00:09:17,528 --> 00:09:19,462
XMAP servers,
whatever you want.

230
00:09:19,462 --> 00:09:21,363
You can use these certificates
for any protocol

231
00:09:21,363 --> 00:09:23,099
that uses TLS and some people

232
00:09:23,099 --> 00:09:25,693
who probably are not
serving a public service

233
00:09:25,693 --> 00:09:27,824
on that domain name.

234
00:09:27,825 --> 00:09:31,132
We're doing not too badly
on the cipher-sweep front.

235
00:09:31,132 --> 00:09:33,693
If you look at the machines
that are answering connections

236
00:09:33,693 --> 00:09:36,693
with the certs,
they look like they're speaking,

237
00:09:36,693 --> 00:09:38,329
by and large, modern ciphers.

238
00:09:38,330 --> 00:09:41,330
There's predominant forward
secrecy on these machines.

239
00:09:41,330 --> 00:09:43,363
It looks like, in this place,

240
00:09:43,363 --> 00:09:45,627
we're winning
against the forces of darkness.

241
00:09:45,627 --> 00:09:48,726
This is, of course, forward
secrecy is super important.

242
00:09:48,726 --> 00:09:51,198
If, as the snow
in Revelations showed,

243
00:09:51,198 --> 00:09:52,693
you have
a whole bunch of adversaries

244
00:09:52,693 --> 00:09:54,231
who may do things
like steal your keys,

245
00:09:54,231 --> 00:09:55,429
you want to have
your connections

246
00:09:55,429 --> 00:09:57,858
safe against those kinds
of attacks

247
00:09:57,858 --> 00:09:59,263
or at least somewhat protected.

248
00:09:59,264 --> 00:10:00,528
There's some deployment

249
00:10:00,528 --> 00:10:03,396
starting to happen
inside the top Alexa domains.

250
00:10:03,396 --> 00:10:05,627
We wouldn't really
have expected that at all yet.

251
00:10:05,627 --> 00:10:07,165
To be honest,
we're still in beta.

252
00:10:07,165 --> 00:10:08,462
We've only been out
for two months.

253
00:10:08,462 --> 00:10:10,858
It's a little bit
crazy to be using us

254
00:10:10,858 --> 00:10:13,429
on a really important,
high-value production service,

255
00:10:13,429 --> 00:10:16,560
but we expect to actually
become less crazy

256
00:10:16,561 --> 00:10:18,891
as we come out of beta
and have been able

257
00:10:18,891 --> 00:10:21,231
to demonstrate good
uptime and reliability

258
00:10:21,231 --> 00:10:24,264
over the next months and years.

259
00:10:24,264 --> 00:10:26,726
Now, deployment
of the certificates

260
00:10:26,726 --> 00:10:28,396
and getting them actually
installed

261
00:10:28,396 --> 00:10:29,791
on web servers is kind

262
00:10:29,792 --> 00:10:32,957
of a layered problem
for the web.

263
00:10:32,957 --> 00:10:34,924
If you look at this,
we're cropped at the bottom,

264
00:10:34,924 --> 00:10:37,429
but you can think of the web
as being --

265
00:10:37,429 --> 00:10:39,924
sites as being a combination
of different types of hosting.

266
00:10:39,924 --> 00:10:44,627
At the bottom, you have
cheap hosting,

267
00:10:44,627 --> 00:10:47,462
where you don't necessarily
have a shell of any sort.

268
00:10:47,462 --> 00:10:49,330
Maybe you have
a WordPress instance

269
00:10:49,330 --> 00:10:50,957
that's hosted
by someone for you,

270
00:10:50,957 --> 00:10:53,330
or you have an FTP upload

271
00:10:53,330 --> 00:10:55,264
that you can make
to some directory somewhere,

272
00:10:55,264 --> 00:10:57,462
or you have, you know,
a Facebook page

273
00:10:57,462 --> 00:10:58,858
or a Tumblr page

274
00:10:58,858 --> 00:11:02,329
or something that's basically
provided for you.

275
00:11:02,330 --> 00:11:04,561
Then the next layer
up, you have people

276
00:11:04,561 --> 00:11:06,231
who run their own servers
in some way.

277
00:11:06,231 --> 00:11:08,099
Maybe they actually
have a physical server,

278
00:11:08,099 --> 00:11:09,924
more commonly, perhaps a VPS

279
00:11:09,924 --> 00:11:13,528
of some sort
like Amazon or DigitalOcean.

280
00:11:13,528 --> 00:11:14,858
Or you can have,
you know,

281
00:11:14,858 --> 00:11:16,791
managed hosting
where someone will rack a box

282
00:11:16,792 --> 00:11:19,528
for you and you
run your websites on that.

283
00:11:19,528 --> 00:11:22,165
Going up the stack
further, you start to get sites

284
00:11:22,165 --> 00:11:23,593
that have multiple web servers

285
00:11:23,594 --> 00:11:26,231
with some type of load-balancing
or round-robining around them.

286
00:11:26,231 --> 00:11:28,825
Then you go up another layer,
and you hit the Googles

287
00:11:28,825 --> 00:11:31,759
and the Facebooks
of the Internet --

288
00:11:31,759 --> 00:11:33,165
people who have very, very large

289
00:11:33,165 --> 00:11:35,627
and sophisticated
server infrastructures.

290
00:11:35,627 --> 00:11:38,065
Now, it's actually kind
of a different problem,

291
00:11:38,066 --> 00:11:40,594
how to get Let's Encrypt in use
in each of these layers.

292
00:11:40,594 --> 00:11:42,330
We kind of want
to be used by

293
00:11:42,330 --> 00:11:44,132
all of these layers
where appropriate.

294
00:11:44,132 --> 00:11:47,098
But they're gonna take
different solutions.

295
00:11:47,099 --> 00:11:49,693
So, we have a client
that we have been shipping.

296
00:11:49,693 --> 00:11:51,132
It's basically an EFF,

297
00:11:51,132 --> 00:11:53,924
an open-source project --
Let's Encrypt Python client.

298
00:11:53,924 --> 00:11:56,198
We're probably gonna be,
actually, officially branding it

299
00:11:56,198 --> 00:11:57,726
as an EFF thing
in the coming months.

300
00:11:57,726 --> 00:12:00,792
It is intended primarily

301
00:12:00,792 --> 00:12:02,330
to server
the single-server case --

302
00:12:02,330 --> 00:12:04,825
people who have a Unix machine
that they can log into.

303
00:12:04,825 --> 00:12:06,495
They serve a website off that.

304
00:12:06,495 --> 00:12:10,330
It is capable, to some extent,

305
00:12:10,330 --> 00:12:12,330
of handling
multi-web server deployments

306
00:12:12,330 --> 00:12:15,330
but isn't primarily designed
for that case.

307
00:12:15,330 --> 00:12:18,066
There's separate work
to be done for the people

308
00:12:18,066 --> 00:12:19,528
who are in the top
and bottom tiers

309
00:12:19,528 --> 00:12:20,924
of the cake,

310
00:12:20,924 --> 00:12:22,495
where they basically
need to have

311
00:12:22,495 --> 00:12:25,330
some operator
of those hosting platforms

312
00:12:25,330 --> 00:12:27,231
implement their own version
of the ACME client

313
00:12:27,231 --> 00:12:28,825
or use an ACME library

314
00:12:28,825 --> 00:12:32,066
to deploy across -- You know,
at the bottom layer,

315
00:12:32,066 --> 00:12:34,000
there are millions of websites
that they have there.

316
00:12:34,000 --> 00:12:35,297
The top layer,
it might be

317
00:12:35,297 --> 00:12:37,924
a million servers
answering for Google.com.

318
00:12:37,924 --> 00:12:40,264
So, these
are all separate cases.

319
00:12:40,264 --> 00:12:41,726
We have these diverse clients

320
00:12:41,726 --> 00:12:44,759
speaking
the ACME protocol already.

321
00:12:44,759 --> 00:12:46,627
There are over
a dozen clients out there

322
00:12:46,627 --> 00:12:48,000
that you can choose from.

323
00:12:48,000 --> 00:12:50,066
If you look at the ones
that are issuing,

324
00:12:50,066 --> 00:12:52,924
broken down right now.

325
00:12:52,924 --> 00:12:54,495
This is the last two weeks.

326
00:12:54,495 --> 00:12:56,132
About 70%
of the requests

327
00:12:56,132 --> 00:12:58,527
are coming from the fairly fully
featured and complicated

328
00:12:58,528 --> 00:12:59,891
Python client
that we have,

329
00:12:59,891 --> 00:13:01,429
and then you have a spread

330
00:13:01,429 --> 00:13:04,957
of different requests coming
from these other clients.

331
00:13:04,957 --> 00:13:06,132
This is really cool.

332
00:13:06,132 --> 00:13:08,098
One that's
worth mentioning is Caddy.

333
00:13:08,099 --> 00:13:10,891
Caddy is a web server
that has a client

334
00:13:10,891 --> 00:13:14,065
for the Let's Encrypt protocol,
the ACME protocol built into it.

335
00:13:14,066 --> 00:13:16,957
So, it'll just automatically
obtain a cert anytime

336
00:13:16,957 --> 00:13:18,264
it's serving a domain name.

337
00:13:18,264 --> 00:13:20,066
That's probably,
in the long run,

338
00:13:20,066 --> 00:13:22,495
the place we want
all web servers to be,

339
00:13:22,495 --> 00:13:25,099
but it's -- it'll take
three to five years

340
00:13:25,099 --> 00:13:27,693
before we could imagine
an Apache or an Engine X

341
00:13:27,693 --> 00:13:31,329
having that on by default

342
00:13:31,330 --> 00:13:32,759
in all of the places
where it's running,

343
00:13:32,759 --> 00:13:35,528
and so the Python client
is a solution

344
00:13:35,528 --> 00:13:39,561
that's available in the meantime
for people who need it.

345
00:13:39,561 --> 00:13:41,693
If you dive in
and say, "Okay,

346
00:13:41,693 --> 00:13:44,462
within this 70%,
what does it look like?

347
00:13:44,462 --> 00:13:45,759
Who are the people
who are running this?

348
00:13:45,759 --> 00:13:47,264
What platforms
are they running on?"

349
00:13:47,264 --> 00:13:51,099
you get
incredible diversity again.

350
00:13:51,099 --> 00:13:55,198
There are over 20 operating
systems

351
00:13:55,198 --> 00:13:57,363
that have significant market
shares in there,

352
00:13:57,363 --> 00:13:59,924
mostly Linuxes,
but there are some BSD

353
00:13:59,924 --> 00:14:02,066
and Darwin in there,
as well.

354
00:14:02,066 --> 00:14:03,429
It's also worth noting --

355
00:14:03,429 --> 00:14:05,495
this is kind
of a little terrifying --

356
00:14:05,495 --> 00:14:11,660
but a lot of these are
really old operating systems.

357
00:14:11,660 --> 00:14:13,065
You know,

358
00:14:13,066 --> 00:14:16,000
Ubuntu 14 and Debian 8
not so bad,

359
00:14:16,000 --> 00:14:19,363
but we have giant chunks
running Debian 7,

360
00:14:19,363 --> 00:14:24,231
Ubuntu 12, CentOS 6.5 and 6.6.

361
00:14:24,231 --> 00:14:26,429
Debian 6 is close
to 1% still.

362
00:14:26,429 --> 00:14:28,495
It's not actually on this graph,
but it's pretty large.

363
00:14:28,495 --> 00:14:30,594
And so,
we have to confront the fact

364
00:14:30,594 --> 00:14:32,297
that people are running
web servers

365
00:14:32,297 --> 00:14:34,231
that have old versions

366
00:14:34,231 --> 00:14:36,660
of Python,
old versions of Apache,

367
00:14:36,660 --> 00:14:38,759
and so we're doing
quite a lot of work

368
00:14:38,759 --> 00:14:40,495
to make sure
that our code runs decently

369
00:14:40,495 --> 00:14:43,660
well on all of these platforms.

370
00:14:43,660 --> 00:14:45,627
It's a lot of fun.

371
00:14:45,627 --> 00:14:48,824
And this Python client is sort
of a Swiss Army knife.

372
00:14:48,825 --> 00:14:51,924
It's intended to be able
to run all of those platforms

373
00:14:51,924 --> 00:14:54,000
and to do
an increasingly good job

374
00:14:54,000 --> 00:14:55,858
of just automated,
end-to-end deployment

375
00:14:55,858 --> 00:14:58,660
for all the cases
that people have.

376
00:14:58,660 --> 00:15:00,528
And this is daunting,
but we're making

377
00:15:00,528 --> 00:15:02,066
pretty rapid progress on it.

378
00:15:02,066 --> 00:15:03,660
So, the way
it works internally is,

379
00:15:03,660 --> 00:15:06,000
it has these plug-ins
that you can use.

380
00:15:06,000 --> 00:15:08,462
It has two important types
that are worth talking about --

381
00:15:08,462 --> 00:15:10,561
an authenticator
that's basically a thing

382
00:15:10,561 --> 00:15:12,957
that produces the shrubberies

383
00:15:12,957 --> 00:15:15,495
and passes the challenges
to get a certificate.

384
00:15:15,495 --> 00:15:17,264
If you want to make one
of these things,

385
00:15:17,264 --> 00:15:19,957
you just need to implement
the little three-function

386
00:15:19,957 --> 00:15:21,759
Python interface
that I've got on the screen.

387
00:15:21,759 --> 00:15:23,792
We have maybe four
or five implement--

388
00:15:23,792 --> 00:15:25,033
five implementations
of that that

389
00:15:25,033 --> 00:15:26,660
are pretty widely used already,

390
00:15:26,660 --> 00:15:29,231
and people can make
more of them.

391
00:15:29,231 --> 00:15:30,891
And the we have
the second interface

392
00:15:30,891 --> 00:15:33,924
if you want to hook
a TLS server into it

393
00:15:33,924 --> 00:15:36,033
and automate
installation of certs.

394
00:15:36,033 --> 00:15:37,528
You can implement this
slightly longer set

395
00:15:37,528 --> 00:15:41,297
of functions, which include
things like rollback.

396
00:15:41,297 --> 00:15:43,594
If you've made a configuration
that tries to install a cert

397
00:15:43,594 --> 00:15:45,495
and then there's a problem
with it, you've got a guarantee

398
00:15:45,495 --> 00:15:46,957
that you can revert back
to the state

399
00:15:46,957 --> 00:15:48,099
that you were in beforehand

400
00:15:48,099 --> 00:15:49,693
so you don't break
people's servers.

401
00:15:49,693 --> 00:15:52,231
It handles requests
for enhancements

402
00:15:52,231 --> 00:15:55,231
like upgrading insecure requests
or STS

403
00:15:55,231 --> 00:15:58,858
or redirect from HTTP to HTTPS,

404
00:15:58,858 --> 00:16:01,198
all of these things.

405
00:16:01,198 --> 00:16:04,693
And if you look in deployment,
what are people using?

406
00:16:04,693 --> 00:16:07,363
They're actually already using
quite a lot of these plug-ins

407
00:16:07,363 --> 00:16:09,330
in diverse modes.

408
00:16:09,330 --> 00:16:12,924
We ship with the Apache webroot
and stand-alone and manual ones.

409
00:16:12,924 --> 00:16:14,429
The Plesk one's
a third-party one

410
00:16:14,429 --> 00:16:17,429
that's already -- This is data
from the last two weeks.

411
00:16:17,429 --> 00:16:19,462
Thousands of people
in a two-week period

412
00:16:19,462 --> 00:16:22,528
were using Plesk --
the Plesk plug-in on Ubuntu 14,

413
00:16:22,528 --> 00:16:23,924
so it's getting real usage.

414
00:16:23,924 --> 00:16:26,165
We have an Engine X plug-in
that's in the works.

415
00:16:26,165 --> 00:16:28,495
We're not shipping it yet,
but there's a team

416
00:16:28,495 --> 00:16:32,198
at ThoughtWorks that's trying
to get this into a MVP state,

417
00:16:32,198 --> 00:16:34,495
and when it does,
hopefully we'll see

418
00:16:34,495 --> 00:16:36,033
that popping up right up here

419
00:16:36,033 --> 00:16:38,528
and will be --
The Swiss army knife is working

420
00:16:38,528 --> 00:16:40,363
for all the different diverse
operating systems

421
00:16:40,363 --> 00:16:44,594
and web servers that people
are trying to deploy certs on.

422
00:16:44,594 --> 00:16:47,033
How well-configured are we?

423
00:16:47,033 --> 00:16:51,297
You know, Yan talked about some
of the demons we confront here.

424
00:16:51,297 --> 00:16:53,759
People -- I'm sure
you've seen talks earlier

425
00:16:53,759 --> 00:16:55,231
in the conference
about the other things

426
00:16:55,231 --> 00:16:57,858
that can go wrong.
We're not doing too badly.

427
00:16:57,858 --> 00:16:59,296
The demons are here.

428
00:16:59,297 --> 00:17:00,594
You can see the classic ones

429
00:17:00,594 --> 00:17:04,429
like incomplete chains
or incorrect name.

430
00:17:04,429 --> 00:17:07,363
So, you haven't configured
your SNI appropriately.

431
00:17:07,363 --> 00:17:10,363
But these are small percentages.

432
00:17:10,363 --> 00:17:11,594
By and large,

433
00:17:11,594 --> 00:17:14,396
when people get a cert from us,

434
00:17:14,396 --> 00:17:15,924
either our automated tools

435
00:17:15,924 --> 00:17:18,725
or the configuration
instructions we give them,

436
00:17:18,726 --> 00:17:20,693
these are working fairly well.

437
00:17:20,693 --> 00:17:22,791
But we do have these features

438
00:17:22,791 --> 00:17:25,032
we know we want to deploy,

439
00:17:25,032 --> 00:17:28,065
and some automation
might get us further on these.

440
00:17:28,066 --> 00:17:30,561
ZHU: Great.
So, nothing ever

441
00:17:30,561 --> 00:17:33,726
ships without vulnerabilities,
as you all know.

442
00:17:33,726 --> 00:17:35,000
So, Let's Encrypt,

443
00:17:35,000 --> 00:17:36,858
for what it's worth
is fully open source.

444
00:17:36,858 --> 00:17:39,825
So, this is the GitHub issue
tracker from Boulder,

445
00:17:39,825 --> 00:17:42,957
which is the Let's Encrypt
certificate authority server

446
00:17:42,957 --> 00:17:44,858
that issues
people's certificates.

447
00:17:44,858 --> 00:17:46,428
So, you can see there's, like --

448
00:17:46,429 --> 00:17:47,891
This isn't even
a complete list.

449
00:17:47,891 --> 00:17:49,792
I know there's, like,
an issue Chris Palmer found

450
00:17:49,792 --> 00:17:51,659
and some that I found
that aren't on this list,

451
00:17:51,660 --> 00:17:53,858
but people
have been opening bugs.

452
00:17:53,858 --> 00:17:56,561
Although, most
of these are from our own team.

453
00:17:56,561 --> 00:17:59,396
So, I'll give you two examples
of security vulnerabilities

454
00:17:59,396 --> 00:18:02,627
that were reported
by outside contributors.

455
00:18:02,627 --> 00:18:06,264
So, the first one
was from Andrew Ayer

456
00:18:06,264 --> 00:18:08,065
in last August.

457
00:18:08,066 --> 00:18:10,495
So, note that this was
before we shipped,

458
00:18:10,495 --> 00:18:11,693
and this was
when we were still, like,

459
00:18:11,693 --> 00:18:14,033
working on making
the client usable

460
00:18:14,033 --> 00:18:16,924
and revising the draft
of the ACME spec and all that.

461
00:18:16,924 --> 00:18:18,627
But basically,
he found an attack

462
00:18:18,627 --> 00:18:21,956
that would allow mis-issuance,
but we hadn't shipped then,

463
00:18:21,957 --> 00:18:25,627
so we actually
fixed this before shipping.

464
00:18:25,627 --> 00:18:27,924
Basically, how it works is
that an attacker,

465
00:18:27,924 --> 00:18:30,165
which we'll call
Mallory, wants to --

466
00:18:30,165 --> 00:18:33,693
wants to get a certificate
for example.com, and she says,

467
00:18:33,693 --> 00:18:36,462
"I'm gonna do that via
the DNS challenge."

468
00:18:36,462 --> 00:18:39,264
You know, that's the shrubbery,
is you have to put something

469
00:18:39,264 --> 00:18:41,824
in DNS that proves
you own the domain.

470
00:18:41,825 --> 00:18:43,495
So, she goes
through this protocol

471
00:18:43,495 --> 00:18:45,495
where she registers
an RSA key pair

472
00:18:45,495 --> 00:18:48,033
with Let's Encrypt
to sign the challenges

473
00:18:48,033 --> 00:18:49,495
that Let's Encrypt
gives back to her.

474
00:18:49,495 --> 00:18:51,099
So, Let's Encrypt's
like, "Here is your shrub--

475
00:18:51,099 --> 00:18:54,033
Here is your DNS challenge.
Go get a shrubbery."

476
00:18:54,033 --> 00:18:56,726
And then so,
in this situation,

477
00:18:56,726 --> 00:19:00,726
example.com had already used
Let's Encrypt via --

478
00:19:00,726 --> 00:19:03,099
with the DNS challenge.
So, example.com

479
00:19:03,099 --> 00:19:05,297
had provisioned
a DNS TXT record

480
00:19:05,297 --> 00:19:09,000
with its own challenges
to get a certificate.

481
00:19:09,000 --> 00:19:10,363
So, what Mallory --

482
00:19:10,363 --> 00:19:11,627
Mallory does something
very clever

483
00:19:11,627 --> 00:19:14,561
in step four,
where she goes to example.com

484
00:19:14,561 --> 00:19:17,000
and gets example.com's
TXT record,

485
00:19:17,000 --> 00:19:22,858
and she constructs an RSA key
such that she can make --

486
00:19:22,858 --> 00:19:25,890
she can make the thing
in three a valid signature

487
00:19:25,891 --> 00:19:27,759
of the challenge she was issued.

488
00:19:27,759 --> 00:19:29,462
I'll go --
I'll explain this a little

489
00:19:29,462 --> 00:19:30,660
better the next slide,

490
00:19:30,660 --> 00:19:32,660
but basically,
once she's constructed

491
00:19:32,660 --> 00:19:35,957
that special malicious
RSA key pair in four,

492
00:19:35,957 --> 00:19:37,462
she says, "Hey,
Let's Encrypt,

493
00:19:37,462 --> 00:19:39,363
I've actually lost
my original account key.

494
00:19:39,363 --> 00:19:40,792
Can you use this new key?"

495
00:19:40,792 --> 00:19:42,792
And Let's Encrypt's
like, "Okay, cool,"

496
00:19:42,792 --> 00:19:45,231
and then Let's Encrypt
goes to example.com

497
00:19:45,231 --> 00:19:47,825
and checks
that that DNS thing

498
00:19:47,825 --> 00:19:49,198
is a valid signature

499
00:19:49,198 --> 00:19:51,000
with the key
that Mallory just gave her.

500
00:19:51,000 --> 00:19:52,759
That was a mouthful.

501
00:19:52,759 --> 00:19:54,099
But...

502
00:19:54,099 --> 00:19:55,759
So, this was really clever.
It was, like, a series

503
00:19:55,759 --> 00:19:58,627
of really cool tricks
that led to mis-issuance.

504
00:19:58,627 --> 00:20:00,396
That was kind of subtle.

505
00:20:00,396 --> 00:20:03,033
But as Andrew points out,
there's a fundamental problem,

506
00:20:03,033 --> 00:20:04,890
which is that we had
been assuming

507
00:20:04,891 --> 00:20:07,495
that a signature uniquely
identifies a public key,

508
00:20:07,495 --> 00:20:09,924
message tuple,
but that's not mathematically

509
00:20:09,924 --> 00:20:12,000
a guarantee of RSA.

510
00:20:14,165 --> 00:20:16,956
So, this was fixed
in September by,

511
00:20:16,957 --> 00:20:19,693
I think this was Richard Barnes.

512
00:20:19,693 --> 00:20:22,297
We decided, okay, why are we
even putting signatures?

513
00:20:22,297 --> 00:20:24,231
Like, we can just put
the challenge token

514
00:20:24,231 --> 00:20:29,231
in DNS directly with
the public key of the user.

515
00:20:29,231 --> 00:20:30,363
Right?

516
00:20:30,363 --> 00:20:32,330
So, the first vulnerability
that we got

517
00:20:32,330 --> 00:20:36,131
and that was reported
in production was in December,

518
00:20:36,132 --> 00:20:37,792
so this was
shortly after we went live

519
00:20:37,792 --> 00:20:39,330
and public beta.

520
00:20:39,330 --> 00:20:42,000
But someone basically found
that we weren't really checking

521
00:20:42,000 --> 00:20:43,594
CAA records,
which can say,

522
00:20:43,594 --> 00:20:45,264
like, you know,

523
00:20:45,264 --> 00:20:47,627
"The domain owner only
wants to be issued certificates

524
00:20:47,627 --> 00:20:49,197
by certain CAs."

525
00:20:49,198 --> 00:20:50,726
So,
because of this,

526
00:20:50,726 --> 00:20:54,297
we had mis-issued
six certificates,

527
00:20:54,297 --> 00:20:56,231
but this was fixed.

528
00:20:56,231 --> 00:20:58,033
It was reported at like
10:00 AM,

529
00:20:58,033 --> 00:21:01,131
and it was fixed by 1:00 PM
on the same day.

530
00:21:01,132 --> 00:21:03,165
But, yeah,
it's an ongoing process.

531
00:21:03,165 --> 00:21:07,858
We've actively worked
to address these things.

532
00:21:07,858 --> 00:21:09,693
So, what haven't we solved yet?

533
00:21:09,693 --> 00:21:11,792
ECKERSLEY: So, one problem
we talked about before

534
00:21:11,792 --> 00:21:16,561
that we haven't solved yet,
unfortunately, is mixed content.

535
00:21:16,561 --> 00:21:19,593
There is this "upgrade-
insecure-requests" header

536
00:21:19,594 --> 00:21:23,099
that we were hoping was going
to be the magic cross

537
00:21:23,099 --> 00:21:25,726
you could hold up
against mixed-content problems,

538
00:21:25,726 --> 00:21:27,627
maybe not in all cases
but in the cases

539
00:21:27,627 --> 00:21:30,264
where there was some way
of getting to the resource.

540
00:21:30,264 --> 00:21:32,726
If it was
a script, this would help.

541
00:21:32,726 --> 00:21:37,495
The problem is,
it does help for JavaScript,

542
00:21:37,495 --> 00:21:39,693
but it actually
is hurting us for images.

543
00:21:39,693 --> 00:21:41,033
So, right now in a browser,

544
00:21:41,033 --> 00:21:43,231
by default,
if you're HTTPS,

545
00:21:43,231 --> 00:21:45,627
the scripts will get blocked
if they're HTTP.

546
00:21:45,627 --> 00:21:48,066
The images will be let
through as kind of a like, well,

547
00:21:48,066 --> 00:21:49,792
it's not great
that they're HTTP,

548
00:21:49,792 --> 00:21:52,165
but the images can't actually
steal your password

549
00:21:52,165 --> 00:21:53,858
and post it to some other URL,

550
00:21:53,858 --> 00:21:55,528
so we'll let them in.

551
00:21:55,528 --> 00:21:57,858
This header
as it's kind of been deployed

552
00:21:57,858 --> 00:22:00,099
is fixing the JavaScript problem

553
00:22:00,099 --> 00:22:02,297
but actually blocking
a bunch of your images

554
00:22:02,297 --> 00:22:05,396
if they happen
to not be upgradable.

555
00:22:05,396 --> 00:22:07,462
So, you wind up --
There's a demo

556
00:22:07,462 --> 00:22:09,198
at this URL

557
00:22:09,198 --> 00:22:12,033
where, without the header,
everything looks fine.

558
00:22:12,033 --> 00:22:13,693
With the header,
you fix the JavaScript,

559
00:22:13,693 --> 00:22:15,198
but you break the images.

560
00:22:15,198 --> 00:22:18,099
So, we're gonna work on trying
to get this fixed at the W3C.

561
00:22:18,099 --> 00:22:19,659
The other thing
that we can do

562
00:22:19,660 --> 00:22:23,231
is potentially use
some kind of CSP

563
00:22:23,231 --> 00:22:24,594
reporting mechanism

564
00:22:24,594 --> 00:22:28,033
to generate a data set
for site administrators saying,

565
00:22:28,033 --> 00:22:30,824
"Hey, here's all the --
all the pages on your website

566
00:22:30,825 --> 00:22:33,066
where you have some kind
of mixed-content problem.

567
00:22:33,066 --> 00:22:35,198
Here's, maybe in some cases,

568
00:22:35,198 --> 00:22:37,660
a way to fix them
using HTTPS everywhere rules."

569
00:22:37,660 --> 00:22:40,363
The problem is,
this header exists,

570
00:22:40,363 --> 00:22:41,759
the technology's out there,

571
00:22:41,759 --> 00:22:44,165
but we need to have a web server
somewhere that collects all

572
00:22:44,165 --> 00:22:46,396
of the reports
for all of the mixed content

573
00:22:46,396 --> 00:22:48,099
that's being audited,

574
00:22:48,099 --> 00:22:50,000
and doing that
in a privacy-friendly

575
00:22:50,000 --> 00:22:51,528
and scalable way
and giving people

576
00:22:51,528 --> 00:22:54,792
the reports they need
is going to be tricky.

577
00:22:54,792 --> 00:22:58,330
So this is stuff we're gonna be
working on in the coming months.

578
00:22:58,330 --> 00:23:00,890
If you'd like to help,

579
00:23:00,891 --> 00:23:03,924
you can help us
with the spec,

580
00:23:03,924 --> 00:23:06,197
with this Python client,
the fully featured one

581
00:23:06,198 --> 00:23:07,561
or any of the alternatives

582
00:23:07,561 --> 00:23:09,924
if you want a simpler,
smaller one.

583
00:23:09,924 --> 00:23:13,099
And the server code,
it's all open source.

584
00:23:13,099 --> 00:23:15,528
Come and get hacking with us.

