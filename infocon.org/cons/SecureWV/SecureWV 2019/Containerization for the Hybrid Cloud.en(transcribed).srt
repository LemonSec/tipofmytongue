1
00:00:10,710 --> 00:00:15,670
good afternoon everyone welcome to

2
00:00:13,349 --> 00:00:17,380
containerization for the hybrid cloud i

3
00:00:15,670 --> 00:00:20,890
want to talk to you a little bit about

4
00:00:17,380 --> 00:00:22,990
the containerization like wave coming

5
00:00:20,890 --> 00:00:24,790
through the technology platform right

6
00:00:22,990 --> 00:00:26,948
now I'm going to talk a little bit about

7
00:00:24,790 --> 00:00:28,869
the actual history of containers kind of

8
00:00:26,949 --> 00:00:31,810
where they started where they are today

9
00:00:28,869 --> 00:00:33,940
what need they actually fill we're gonna

10
00:00:31,810 --> 00:00:37,260
look at docker and kubernetes as the two

11
00:00:33,940 --> 00:00:39,640
main technologies for our stuff today

12
00:00:37,260 --> 00:00:41,410
we're gonna move from there into

13
00:00:39,640 --> 00:00:42,879
actually looking at hybrid cloud

14
00:00:41,410 --> 00:00:44,500
architecture kind of seeing how that

15
00:00:42,879 --> 00:00:46,989
would actually look if you're trying to

16
00:00:44,500 --> 00:00:48,250
do that and set it up we're going to

17
00:00:46,989 --> 00:00:50,019
then talk a little bit about security

18
00:00:48,250 --> 00:00:51,460
concerns and what that's going to mean

19
00:00:50,020 --> 00:00:53,320
for your organization

20
00:00:51,460 --> 00:00:55,090
there's a whole lot of questions with

21
00:00:53,320 --> 00:00:56,949
that because you're connecting the cloud

22
00:00:55,090 --> 00:00:57,460
to your on-premise and everything in

23
00:00:56,949 --> 00:00:59,349
between

24
00:00:57,460 --> 00:01:01,960
and last we're gonna talk a little bit

25
00:00:59,350 --> 00:01:04,379
about a couple of tools for trying to

26
00:01:01,960 --> 00:01:07,030
make all this a little bit easier on you

27
00:01:04,379 --> 00:01:09,399
so in the beginning there were servers

28
00:01:07,030 --> 00:01:12,460
and service provided you all sorts of

29
00:01:09,399 --> 00:01:14,140
hardware and CPU and RAM and persistent

30
00:01:12,460 --> 00:01:16,598
disk networking and you could run your

31
00:01:14,140 --> 00:01:18,250
applications on that and it was great

32
00:01:16,599 --> 00:01:20,590
you could run all this stuff we'd never

33
00:01:18,250 --> 00:01:22,929
been able to do before but the problem

34
00:01:20,590 --> 00:01:25,899
was you had all of your applications

35
00:01:22,929 --> 00:01:27,640
living within the same space if you had

36
00:01:25,899 --> 00:01:29,500
one application that needed a certain

37
00:01:27,640 --> 00:01:31,479
library as a dependency and some other

38
00:01:29,500 --> 00:01:33,880
application needed a different version

39
00:01:31,479 --> 00:01:35,770
of that you had do weird things to try

40
00:01:33,880 --> 00:01:37,568
to make those fit together and not

41
00:01:35,770 --> 00:01:40,060
conflict with each other on the system

42
00:01:37,569 --> 00:01:41,800
so people said this is ridiculous why is

43
00:01:40,060 --> 00:01:43,450
this happening why are we having all

44
00:01:41,800 --> 00:01:44,739
these conflicts they got together and

45
00:01:43,450 --> 00:01:47,229
said there's got to be some way we can

46
00:01:44,739 --> 00:01:49,869
actually separate and isolate all of

47
00:01:47,229 --> 00:01:52,989
these things apart from each other and

48
00:01:49,869 --> 00:01:54,910
then we got virtual machines we had

49
00:01:52,989 --> 00:01:56,830
entire operating systems we had all the

50
00:01:54,910 --> 00:01:58,959
libraries everything all packaged up

51
00:01:56,830 --> 00:02:00,489
into one nice little container they said

52
00:01:58,959 --> 00:02:02,679
look at this we can run everything we

53
00:02:00,489 --> 00:02:06,069
want all together no big deal however

54
00:02:02,679 --> 00:02:07,929
that's very heavy we now had all of

55
00:02:06,069 --> 00:02:10,239
these operating systems we had to run

56
00:02:07,929 --> 00:02:11,709
all at the same time and we had all

57
00:02:10,239 --> 00:02:13,420
these libraries there were just copies

58
00:02:11,709 --> 00:02:15,670
of copies of copies and it's very very

59
00:02:13,420 --> 00:02:18,250
heavy on top of our already like heavy

60
00:02:15,670 --> 00:02:19,899
architecture so a bunch more people got

61
00:02:18,250 --> 00:02:22,240
together and said hey can we make this

62
00:02:19,900 --> 00:02:24,130
lighter we've got all of these kind of

63
00:02:22,240 --> 00:02:25,690
shared dependencies for like the Kern

64
00:02:24,130 --> 00:02:27,700
yeah we've got all these things are

65
00:02:25,690 --> 00:02:28,570
doing essentially the same basic thing

66
00:02:27,700 --> 00:02:31,119
on the bottom

67
00:02:28,570 --> 00:02:33,730
can we just package and ignore the

68
00:02:31,120 --> 00:02:42,630
operating system and that got us to

69
00:02:33,730 --> 00:02:48,750
containers and my image that's awesome

70
00:02:42,630 --> 00:02:48,750
live demos in okay

71
00:03:06,069 --> 00:03:09,060
well that's disappointing

72
00:03:11,390 --> 00:03:17,750
okay so it should be a picture of

73
00:03:14,150 --> 00:03:18,590
containers I don't know what happened I

74
00:03:17,750 --> 00:03:26,960
don't know why the containers aren't

75
00:03:18,590 --> 00:03:33,860
there excuse yeah use your imagination

76
00:03:26,960 --> 00:03:34,940
playing in the theater of the mind no

77
00:03:33,860 --> 00:03:36,170
matter how many times you practice this

78
00:03:34,940 --> 00:03:38,180
stuff it never works out when you do a

79
00:03:36,170 --> 00:03:39,619
lot of demo okay pictures of containers

80
00:03:38,180 --> 00:03:42,350
actual shipping containers is what that

81
00:03:39,620 --> 00:03:45,830
should have been what containers give us

82
00:03:42,350 --> 00:03:48,140
is unitized loads same thing for like

83
00:03:45,830 --> 00:03:50,209
shipping containers instead of having to

84
00:03:48,140 --> 00:03:52,279
maneuver all the individual cargo around

85
00:03:50,209 --> 00:03:54,920
on a ship you have to pack it into a

86
00:03:52,280 --> 00:03:57,680
container and then from there you can

87
00:03:54,920 --> 00:03:59,570
like lift it on to a ship and haul it

88
00:03:57,680 --> 00:04:00,980
wherever you want to go the other really

89
00:03:59,570 --> 00:04:02,989
nice thing about shipping containers and

90
00:04:00,980 --> 00:04:04,970
kind of our analogy here as well for

91
00:04:02,989 --> 00:04:06,800
software containers is that they can go

92
00:04:04,970 --> 00:04:09,109
on all of these different modes of

93
00:04:06,800 --> 00:04:11,090
transit you have the same shipping

94
00:04:09,110 --> 00:04:13,160
container can be put onto an actual ship

95
00:04:11,090 --> 00:04:15,140
you can put it onto a train you can put

96
00:04:13,160 --> 00:04:17,959
it on to a truck and it will get it to

97
00:04:15,140 --> 00:04:19,310
where it needs to go and actually kind

98
00:04:17,959 --> 00:04:21,589
of interesting fact two shipping

99
00:04:19,310 --> 00:04:23,000
containers run invented until 1956 so

100
00:04:21,589 --> 00:04:24,890
before that you had all sorts of weird

101
00:04:23,000 --> 00:04:26,900
standards of trying to put things on

102
00:04:24,890 --> 00:04:29,210
boats and trains and everything in

103
00:04:26,900 --> 00:04:31,070
between the shipping container really

104
00:04:29,210 --> 00:04:35,000
revolutionized the modern shipping

105
00:04:31,070 --> 00:04:38,479
industry pretty cool so here's kind of a

106
00:04:35,000 --> 00:04:40,130
big picture of how all of this looks we

107
00:04:38,479 --> 00:04:42,469
were on the servers we had the apps and

108
00:04:40,130 --> 00:04:45,380
we had all this kind of wasted hardware

109
00:04:42,470 --> 00:04:47,360
space you could have your you know maybe

110
00:04:45,380 --> 00:04:48,560
a single server dedicated to your LDAP

111
00:04:47,360 --> 00:04:50,810
server maybe it's a single server

112
00:04:48,560 --> 00:04:52,310
dedicated to your email server but you

113
00:04:50,810 --> 00:04:53,570
didn't put too much stuff on it because

114
00:04:52,310 --> 00:04:56,000
then it sort of conflicting and that was

115
00:04:53,570 --> 00:04:59,260
just a hassle to maintain but again we

116
00:04:56,000 --> 00:05:01,250
were wasting all of this resource power

117
00:04:59,260 --> 00:05:02,780
moving up to virtual machines

118
00:05:01,250 --> 00:05:04,310
well now look this we've got to these

119
00:05:02,780 --> 00:05:06,049
more apps that we can actually run at

120
00:05:04,310 --> 00:05:07,580
the same time on our hardware there

121
00:05:06,050 --> 00:05:10,130
that's great

122
00:05:07,580 --> 00:05:12,409
we've got our base level OS here the

123
00:05:10,130 --> 00:05:15,310
virtualization has a little bit of my

124
00:05:12,410 --> 00:05:17,000
layer by itself that it requires

125
00:05:15,310 --> 00:05:18,260
actually there's also some interesting

126
00:05:17,000 --> 00:05:19,310
work with that you can instead of

127
00:05:18,260 --> 00:05:20,990
running the full OS you can run

128
00:05:19,310 --> 00:05:22,970
hypervisors that just run virtual

129
00:05:20,990 --> 00:05:24,819
machines there's other optimizations

130
00:05:22,970 --> 00:05:26,840
that were made in between here

131
00:05:24,819 --> 00:05:28,939
but essentially you're still running

132
00:05:26,840 --> 00:05:31,008
again another version of different os's

133
00:05:28,939 --> 00:05:33,860
could be even theoretically be the exact

134
00:05:31,009 --> 00:05:35,719
same OS you never have but you'd have a

135
00:05:33,860 --> 00:05:38,750
little a little bit better utilization

136
00:05:35,719 --> 00:05:40,400
of your total power now with actual code

137
00:05:38,750 --> 00:05:41,990
that you care about running

138
00:05:40,400 --> 00:05:43,549
you're not buying hardware to run an

139
00:05:41,990 --> 00:05:45,560
operating system you're buying hardware

140
00:05:43,550 --> 00:05:47,860
to run an application of some sort to do

141
00:05:45,560 --> 00:05:50,780
something useful processing for you

142
00:05:47,860 --> 00:05:53,449
moving up to containers we still have

143
00:05:50,780 --> 00:05:56,809
some wasted overhead with the actual

144
00:05:53,449 --> 00:05:58,370
containerization stuff with the

145
00:05:56,810 --> 00:06:01,400
containers how to actually communicate

146
00:05:58,370 --> 00:06:02,990
is a daemon process in between them and

147
00:06:01,400 --> 00:06:05,479
the OS for our purposes is going to be

148
00:06:02,990 --> 00:06:07,759
the doctor Damon but now you can see

149
00:06:05,479 --> 00:06:10,818
we've gotten a lot better utilization of

150
00:06:07,759 --> 00:06:12,500
our total Hardware with more application

151
00:06:10,819 --> 00:06:16,940
stuff that we care about because of the

152
00:06:12,500 --> 00:06:19,370
lightweightness of a container how

153
00:06:16,940 --> 00:06:21,430
containers work underneath there are two

154
00:06:19,370 --> 00:06:24,620
main technologies that support

155
00:06:21,430 --> 00:06:26,900
containers namespaces and C groups and

156
00:06:24,620 --> 00:06:28,490
they're features of the Linux kernel and

157
00:06:26,900 --> 00:06:30,469
actually when containers first started

158
00:06:28,490 --> 00:06:32,360
it was specifically a Linux only feature

159
00:06:30,469 --> 00:06:34,569
because that was the only way you could

160
00:06:32,360 --> 00:06:37,099
get these two specific features

161
00:06:34,569 --> 00:06:39,050
namespaces restrict what you can

162
00:06:37,099 --> 00:06:41,569
actually see inside your container and

163
00:06:39,050 --> 00:06:44,509
see groups restrict how much of that you

164
00:06:41,569 --> 00:06:46,669
can actually use so the namespace you

165
00:06:44,509 --> 00:06:48,110
have these are the big six here that

166
00:06:46,669 --> 00:06:52,698
actually may contain as possible pin

167
00:06:48,110 --> 00:06:55,759
mounts net user UTS and IPC each one of

168
00:06:52,699 --> 00:06:58,669
these is a separate hierarchy tree that

169
00:06:55,759 --> 00:07:02,000
lives in the host space but it is a

170
00:06:58,669 --> 00:07:03,650
projection into the container space and

171
00:07:02,000 --> 00:07:08,500
what that allows us to do for like the

172
00:07:03,650 --> 00:07:11,539
pin space specifically is restart our

173
00:07:08,500 --> 00:07:14,000
processes at pin 1 which there are a

174
00:07:11,539 --> 00:07:15,710
minute system at pit 1 on the host

175
00:07:14,000 --> 00:07:17,629
system is obviously not running at pit 1

176
00:07:15,710 --> 00:07:20,690
because the host system is running pit 1

177
00:07:17,629 --> 00:07:22,580
but it is a translation layer in between

178
00:07:20,690 --> 00:07:26,719
that says pit one here actually means

179
00:07:22,580 --> 00:07:28,609
you have paid 1524 over here mount

180
00:07:26,719 --> 00:07:30,680
likewise gives us the ability to only

181
00:07:28,610 --> 00:07:33,139
show specific mount points into our

182
00:07:30,680 --> 00:07:35,990
containers net restricts our ability to

183
00:07:33,139 --> 00:07:37,820
use networking what specific network

184
00:07:35,990 --> 00:07:40,280
accessories you can see

185
00:07:37,820 --> 00:07:43,010
user is another thing kind of like kid

186
00:07:40,280 --> 00:07:45,770
where we're allowed to reset our user

187
00:07:43,010 --> 00:07:49,880
space so that route can be user ID zero

188
00:07:45,770 --> 00:07:51,560
which is really really important the UTS

189
00:07:49,880 --> 00:07:53,240
space allows you to change host names

190
00:07:51,560 --> 00:07:55,430
independently between the host and the

191
00:07:53,240 --> 00:07:57,200
container and IPC is inter process

192
00:07:55,430 --> 00:07:58,070
communication so you can use pipes and

193
00:07:57,200 --> 00:08:00,950
other stuff like that inside the

194
00:07:58,070 --> 00:08:02,330
containers without affecting the host so

195
00:08:00,950 --> 00:08:07,000
all of the stuff gets contained within

196
00:08:02,330 --> 00:08:09,140
its own namespace the cgroups

197
00:08:07,000 --> 00:08:11,090
yeah like they what they do is they

198
00:08:09,140 --> 00:08:13,099
actually restrict they put a limit a

199
00:08:11,090 --> 00:08:15,260
hard limit on the amount that you're

200
00:08:13,100 --> 00:08:16,910
allowed to consume if you didn't have C

201
00:08:15,260 --> 00:08:19,280
group seen just had namespaces then you

202
00:08:16,910 --> 00:08:23,600
could use up to the entirety of the

203
00:08:19,280 --> 00:08:25,520
hardware that you had access to with C

204
00:08:23,600 --> 00:08:28,220
groups you can say you know here I can

205
00:08:25,520 --> 00:08:29,810
only use like one core out of my ten

206
00:08:28,220 --> 00:08:32,240
core or 12 cores whatever that have

207
00:08:29,810 --> 00:08:34,460
available memory you can put strict

208
00:08:32,240 --> 00:08:36,680
memory limits so you can't just consume

209
00:08:34,460 --> 00:08:38,599
everything block IO

210
00:08:36,679 --> 00:08:39,978
not only can you restrict the amount of

211
00:08:38,599 --> 00:08:42,140
space you can restrict like actual

212
00:08:39,979 --> 00:08:43,729
throughputs with fats and network also

213
00:08:42,140 --> 00:08:49,340
you can restrict the total amount of

214
00:08:43,729 --> 00:08:53,210
networking you can push through and none

215
00:08:49,340 --> 00:08:55,160
of my image is loaded fantastic all

216
00:08:53,210 --> 00:08:58,040
right so this picture should have been

217
00:08:55,160 --> 00:09:01,760
again in our imaginations a picture of

218
00:08:58,040 --> 00:09:05,150
containers being moved around and this

219
00:09:01,760 --> 00:09:07,939
is what docker allows us to do we have

220
00:09:05,150 --> 00:09:12,130
portability in our unitized workloads

221
00:09:07,940 --> 00:09:16,030
our containers by the way docker works

222
00:09:12,130 --> 00:09:19,790
in fact that whale that is the Dockers

223
00:09:16,030 --> 00:09:26,360
mascot is named a Moby duck and blend

224
00:09:19,790 --> 00:09:29,480
backs so why specifically docker docker

225
00:09:26,360 --> 00:09:32,960
allows us to make containers as a

226
00:09:29,480 --> 00:09:34,790
configuration as code it has a file

227
00:09:32,960 --> 00:09:37,370
called the docker file which actually

228
00:09:34,790 --> 00:09:40,550
sets up what the container has in it and

229
00:09:37,370 --> 00:09:42,020
what specific stuff it can do because of

230
00:09:40,550 --> 00:09:44,510
that we can actually also implement

231
00:09:42,020 --> 00:09:46,750
security in our CI CD pipeline we can

232
00:09:44,510 --> 00:09:49,160
scan these configurations before

233
00:09:46,750 --> 00:09:51,600
anything gets pushed to a production

234
00:09:49,160 --> 00:09:53,699
level environment

235
00:09:51,600 --> 00:09:55,230
because also it's portable we know that

236
00:09:53,700 --> 00:09:56,850
what is running in our dev environment

237
00:09:55,230 --> 00:09:58,200
is the same that is running in our test

238
00:09:56,850 --> 00:09:59,970
environment that is the same as running

239
00:09:58,200 --> 00:10:01,820
in our QA environment that is the same

240
00:09:59,970 --> 00:10:04,320
as running in our production environment

241
00:10:01,820 --> 00:10:06,300
scanning it once we can be sure that

242
00:10:04,320 --> 00:10:09,540
it's the same configuration across all

243
00:10:06,300 --> 00:10:11,609
of them the container registry is a very

244
00:10:09,540 --> 00:10:13,709
powerful feature as well I think of it

245
00:10:11,610 --> 00:10:17,240
kind of like github except for your

246
00:10:13,710 --> 00:10:19,640
actual images for the containers the

247
00:10:17,240 --> 00:10:22,650
really nice new feature of newer feature

248
00:10:19,640 --> 00:10:24,960
is being able to sign your images so you

249
00:10:22,650 --> 00:10:26,400
can be sure that you have exactly the

250
00:10:24,960 --> 00:10:30,260
image that you're getting you can do

251
00:10:26,400 --> 00:10:30,260
hash sums everything like that with LAN

252
00:10:30,560 --> 00:10:34,339
application isolation and network

253
00:10:32,250 --> 00:10:37,800
isolation are both features generally of

254
00:10:34,339 --> 00:10:39,540
containers but docker allows that with a

255
00:10:37,800 --> 00:10:42,240
couple of extra overlay type layers

256
00:10:39,540 --> 00:10:44,880
which are really nice it just kind of

257
00:10:42,240 --> 00:10:47,940
makes the process of creating containers

258
00:10:44,880 --> 00:10:49,050
a lot smoother you can actually just go

259
00:10:47,940 --> 00:10:50,910
and create containers on your own

260
00:10:49,050 --> 00:10:52,380
entirely there's just using straight-up

261
00:10:50,910 --> 00:10:54,810
Linux command line you can just create

262
00:10:52,380 --> 00:10:56,700
containers but that's a very long

263
00:10:54,810 --> 00:10:58,560
drawn-out process of setting namespaces

264
00:10:56,700 --> 00:11:01,350
creating any spaces creating like

265
00:10:58,560 --> 00:11:05,270
binaries into certain places doctor made

266
00:11:01,350 --> 00:11:08,310
all of that a whole lot easier for us

267
00:11:05,270 --> 00:11:11,310
it's a kind of generic docker file it's

268
00:11:08,310 --> 00:11:13,529
their hello world so you'll notice that

269
00:11:11,310 --> 00:11:16,050
every dollar file starts with a from

270
00:11:13,529 --> 00:11:18,240
keyword and that allows us to build

271
00:11:16,050 --> 00:11:21,719
docker files in our build docker

272
00:11:18,240 --> 00:11:24,240
containers in layers the from scratch

273
00:11:21,720 --> 00:11:26,580
means it's a no op base layer there's

274
00:11:24,240 --> 00:11:31,980
nothing that's being done it's just zero

275
00:11:26,580 --> 00:11:34,770
starting from scratch the docker file

276
00:11:31,980 --> 00:11:36,990
copies then this it's actually a binary

277
00:11:34,770 --> 00:11:39,959
it's not shown here but a binary called

278
00:11:36,990 --> 00:11:43,850
hello to the root of the container slash

279
00:11:39,959 --> 00:11:47,849
and at the end what we'll do is run this

280
00:11:43,850 --> 00:11:50,910
CMD command of hello at the root of the

281
00:11:47,850 --> 00:11:52,620
root of the container and if you

282
00:11:50,910 --> 00:11:56,100
actually just do docker run hello world

283
00:11:52,620 --> 00:11:58,589
this is the Apple that you get I did not

284
00:11:56,100 --> 00:12:00,240
have the hello world container on my

285
00:11:58,589 --> 00:12:02,579
local system it's one that's happening

286
00:12:00,240 --> 00:12:04,140
doctor hub so when you start running

287
00:12:02,579 --> 00:12:05,130
docker it looks

288
00:12:04,140 --> 00:12:06,750
for the images to start with on your

289
00:12:05,130 --> 00:12:09,600
local machine if it doesn't find it it

290
00:12:06,750 --> 00:12:11,880
says hey go to the registry and pull it

291
00:12:09,600 --> 00:12:13,230
for me other thing I first mentioned the

292
00:12:11,880 --> 00:12:14,970
registry you don't have to use the

293
00:12:13,230 --> 00:12:16,410
public docker hub registry it's great

294
00:12:14,970 --> 00:12:18,180
it's really convenient there's a lot of

295
00:12:16,410 --> 00:12:20,610
official images there's a lot of like

296
00:12:18,180 --> 00:12:23,069
actual paid services you can you use

297
00:12:20,610 --> 00:12:24,800
through that but you're also more than

298
00:12:23,070 --> 00:12:27,630
welcome to host it private on your own

299
00:12:24,800 --> 00:12:29,760
servers in your own premise that way

300
00:12:27,630 --> 00:12:32,390
you're not pushing and pulling from the

301
00:12:29,760 --> 00:12:34,230
Internet if that is a concern for you

302
00:12:32,390 --> 00:12:36,300
additionally if your again we're talking

303
00:12:34,230 --> 00:12:38,010
about hybrid cloud using any one of the

304
00:12:36,300 --> 00:12:40,349
major cloud providers every one of them

305
00:12:38,010 --> 00:12:43,230
has a container registry that is scoped

306
00:12:40,350 --> 00:12:45,690
in to your specific area so that way

307
00:12:43,230 --> 00:12:47,100
you're not having to again push public

308
00:12:45,690 --> 00:12:51,870
but you're still being able to take

309
00:12:47,100 --> 00:12:54,600
advantage of cloud resources okay so

310
00:12:51,870 --> 00:12:55,680
yeah went up I am pulling this directly

311
00:12:54,600 --> 00:13:00,710
from docker hub because it's their

312
00:12:55,680 --> 00:13:04,109
public docker environment it checks the

313
00:13:00,710 --> 00:13:07,410
latest normally with each one of the

314
00:13:04,110 --> 00:13:09,540
containers you have a tag for it and if

315
00:13:07,410 --> 00:13:13,199
you don't specify a tag it just pulls

316
00:13:09,540 --> 00:13:14,969
the tag at latest by default so cool

317
00:13:13,200 --> 00:13:18,030
stennis down that's it okay we found it

318
00:13:14,970 --> 00:13:21,980
hello world latest and then it runs this

319
00:13:18,030 --> 00:13:21,980
command which outputs hello from docker

320
00:13:22,700 --> 00:13:27,990
so that's a real simple one going up a

321
00:13:25,770 --> 00:13:31,439
little bit there's a lot of ones that

322
00:13:27,990 --> 00:13:35,040
use in docker hub that are based images

323
00:13:31,440 --> 00:13:36,270
that you can build from so if you have

324
00:13:35,040 --> 00:13:38,250
like a base operating system that you

325
00:13:36,270 --> 00:13:41,310
actually want to use CentOS if you want

326
00:13:38,250 --> 00:13:44,670
Braille if you want a bun to fedora what

327
00:13:41,310 --> 00:13:48,930
have you you can grab and start using

328
00:13:44,670 --> 00:13:52,439
from centel's but these also start to be

329
00:13:48,930 --> 00:13:55,079
built as base layers so from scratch we

330
00:13:52,440 --> 00:13:57,500
add all of this stuff that is the CentOS

331
00:13:55,080 --> 00:14:00,690
8 container this is actually the latest

332
00:13:57,500 --> 00:14:03,510
which is why so simple to eat however if

333
00:14:00,690 --> 00:14:05,460
you noticed between these two the hello

334
00:14:03,510 --> 00:14:08,280
world docker file uses the copy command

335
00:14:05,460 --> 00:14:12,210
and the CentOS archive file uses the add

336
00:14:08,280 --> 00:14:14,490
command add is copy on steroids

337
00:14:12,210 --> 00:14:17,370
it has a bunch of additional features

338
00:14:14,490 --> 00:14:18,670
that it knows how to handle and

339
00:14:17,370 --> 00:14:22,300
specifically because we're

340
00:14:18,670 --> 00:14:25,060
come copying a compressed tar file into

341
00:14:22,300 --> 00:14:26,469
our root directory here it says oh I

342
00:14:25,060 --> 00:14:29,829
know that I need to actually

343
00:14:26,470 --> 00:14:32,020
uncompress that on to that root system

344
00:14:29,830 --> 00:14:34,060
there and that way also you don't have

345
00:14:32,020 --> 00:14:35,890
to keep you know the entire list of the

346
00:14:34,060 --> 00:14:38,380
operating system in version control you

347
00:14:35,890 --> 00:14:42,490
put your par files you've built files

348
00:14:38,380 --> 00:14:44,020
into that the labels are useful but not

349
00:14:42,490 --> 00:14:46,209
bad important for we're gonna talk about

350
00:14:44,020 --> 00:14:50,850
we're gonna skip over that but by

351
00:14:46,209 --> 00:14:54,160
default this when you run the the CentOS

352
00:14:50,850 --> 00:14:57,399
just like we had run hello world you get

353
00:14:54,160 --> 00:14:59,350
a batch prompt as you build the layers

354
00:14:57,399 --> 00:15:00,580
you can override whatever that command

355
00:14:59,350 --> 00:15:01,270
is so if you wanted to do something

356
00:15:00,580 --> 00:15:03,370
different

357
00:15:01,270 --> 00:15:04,720
you just put another command you can do

358
00:15:03,370 --> 00:15:15,490
from CentOS and then lower the next

359
00:15:04,720 --> 00:15:18,790
thing just be command hi sure by default

360
00:15:15,490 --> 00:15:19,810
I believe you have root yes and you can

361
00:15:18,790 --> 00:15:21,579
restrict that there's a whole lot of

362
00:15:19,810 --> 00:15:25,810
security configuration that you can say

363
00:15:21,580 --> 00:15:27,310
I want to be using user space this you

364
00:15:25,810 --> 00:15:29,319
can create users in the middle of these

365
00:15:27,310 --> 00:15:31,839
files and there's a lot of them again

366
00:15:29,320 --> 00:15:33,700
that this is a fairly basic one so

367
00:15:31,839 --> 00:15:36,250
you're just a straight up root user into

368
00:15:33,700 --> 00:15:38,399
sent pulse I'm actually going to show

369
00:15:36,250 --> 00:15:42,520
you

370
00:15:38,399 --> 00:15:45,010
docker hubs really nice for this there's

371
00:15:42,520 --> 00:15:47,560
a huge amount of different tags so you

372
00:15:45,010 --> 00:15:53,170
can get versions going back like pretty

373
00:15:47,560 --> 00:16:00,459
far latest by default here you can

374
00:15:53,170 --> 00:16:02,649
actually look at the tags good good and

375
00:16:00,459 --> 00:16:05,649
you can actually see individual commands

376
00:16:02,649 --> 00:16:07,810
as it would be built on the layers you

377
00:16:05,649 --> 00:16:11,500
can see that this specific add file

378
00:16:07,810 --> 00:16:15,550
which is the giant CentOS tar XZ is

379
00:16:11,500 --> 00:16:17,770
adding 68 mega bytes into our image now

380
00:16:15,550 --> 00:16:19,689
one of the other ones you can use that

381
00:16:17,770 --> 00:16:22,120
if you need to some very very very basic

382
00:16:19,690 --> 00:16:24,910
bare-bones is pal pine it's very very

383
00:16:22,120 --> 00:16:26,940
lightweight you can build off of that

384
00:16:24,910 --> 00:16:30,329
for very lightweight container images

385
00:16:26,940 --> 00:16:41,530
just some good practice

386
00:16:30,330 --> 00:16:45,340
okay okay okay well here we are okay so

387
00:16:41,530 --> 00:16:49,540
kubernetes is kind of a another whole

388
00:16:45,340 --> 00:16:52,290
layer on top of docker kubernetes brings

389
00:16:49,540 --> 00:16:54,370
is automation for deployment scaling and

390
00:16:52,290 --> 00:16:56,650
management for our containerized

391
00:16:54,370 --> 00:17:01,300
remember going back unitized or

392
00:16:56,650 --> 00:17:03,699
workloads this picture with a much

393
00:17:01,300 --> 00:17:05,200
larger shipyard imagined in your head

394
00:17:03,700 --> 00:17:07,709
all these containers spread as far as

395
00:17:05,200 --> 00:17:07,709
the eye can see

396
00:17:07,950 --> 00:17:12,640
so Kumari's brings to the table for us

397
00:17:10,660 --> 00:17:15,430
you know where docker you had single

398
00:17:12,640 --> 00:17:16,959
applications at a time inside of your

399
00:17:15,430 --> 00:17:18,220
containers you put a couple of them in

400
00:17:16,959 --> 00:17:20,560
there at the same time there's some

401
00:17:18,220 --> 00:17:24,069
stuff with that but you're still looking

402
00:17:20,560 --> 00:17:25,480
at it at a single application chunk but

403
00:17:24,069 --> 00:17:27,159
when you're deploying anything modern

404
00:17:25,480 --> 00:17:29,110
you're not looking at it as a single

405
00:17:27,160 --> 00:17:30,850
tiny application chunk you may have

406
00:17:29,110 --> 00:17:32,709
here's your front end here's your cash

407
00:17:30,850 --> 00:17:33,429
here's your middle layer here's your

408
00:17:32,710 --> 00:17:35,620
back end

409
00:17:33,430 --> 00:17:37,330
here's microservices one through ten off

410
00:17:35,620 --> 00:17:40,000
to the side doing other crazy stuff all

411
00:17:37,330 --> 00:17:42,699
of these things are pieces that have to

412
00:17:40,000 --> 00:17:45,940
interact and doing that with just the

413
00:17:42,700 --> 00:17:49,330
docker is Park secure Bernays allows us

414
00:17:45,940 --> 00:17:51,460
to abstract up and configure the way

415
00:17:49,330 --> 00:17:54,250
that our containers end up on our

416
00:17:51,460 --> 00:17:56,080
hardware as code again so having

417
00:17:54,250 --> 00:17:57,820
configuration for the containers as code

418
00:17:56,080 --> 00:17:59,290
and the configuration for our

419
00:17:57,820 --> 00:18:01,870
deployments in our environment that's

420
00:17:59,290 --> 00:18:03,190
code not strictly infrastructure is code

421
00:18:01,870 --> 00:18:04,600
which is an important kind of

422
00:18:03,190 --> 00:18:07,600
distinction between what kubernetes

423
00:18:04,600 --> 00:18:11,169
doesn't does not do kubernetes manages

424
00:18:07,600 --> 00:18:16,300
your containers it does not manage the

425
00:18:11,170 --> 00:18:16,810
underlying hardware that it runs on fun

426
00:18:16,300 --> 00:18:18,550
fact

427
00:18:16,810 --> 00:18:21,310
so kubernetes is actually a Google

428
00:18:18,550 --> 00:18:22,270
project originally called project seven

429
00:18:21,310 --> 00:18:25,060
of nine

430
00:18:22,270 --> 00:18:25,330
Google's whole container platform is

431
00:18:25,060 --> 00:18:27,850
called

432
00:18:25,330 --> 00:18:29,110
borg and when they were trying to figure

433
00:18:27,850 --> 00:18:30,490
out a better way to manage this they

434
00:18:29,110 --> 00:18:35,110
created this project seven of nine as a

435
00:18:30,490 --> 00:18:37,780
friendlier Borg so the seven spokes on

436
00:18:35,110 --> 00:18:42,269
the kubernetes wheel are a reference to

437
00:18:37,780 --> 00:18:44,230
the for our reference to project 79

438
00:18:42,269 --> 00:18:46,629
another interesting thing you'll see

439
00:18:44,230 --> 00:18:47,980
kubernetes frequently referred to as k8s

440
00:18:46,629 --> 00:18:50,110
just to make it shorter because

441
00:18:47,980 --> 00:18:51,460
kubernetes is a very long word also

442
00:18:50,110 --> 00:18:53,830
other fun fact could be that ease is a

443
00:18:51,460 --> 00:18:58,629
Greek word meaning helmsman you're

444
00:18:53,830 --> 00:19:00,600
navigating the waters okay so going back

445
00:18:58,629 --> 00:19:03,908
to our diagram a little bit here again

446
00:19:00,600 --> 00:19:08,860
instead of having the container be our

447
00:19:03,909 --> 00:19:11,590
base unit inside of docker our base unit

448
00:19:08,860 --> 00:19:13,719
and kubernetes is the pod and what the

449
00:19:11,590 --> 00:19:17,289
pod does is allow us to group

450
00:19:13,720 --> 00:19:18,639
applications together and this still

451
00:19:17,289 --> 00:19:21,279
with a pod you're supposed to have a

452
00:19:18,639 --> 00:19:22,990
single main application inside of your

453
00:19:21,279 --> 00:19:26,710
pod but it allows you to have a bunch of

454
00:19:22,990 --> 00:19:28,539
helpers along with that pod so again a

455
00:19:26,710 --> 00:19:30,879
messaging service I'm sort of cue a

456
00:19:28,539 --> 00:19:33,759
cache any kind of thing that makes your

457
00:19:30,879 --> 00:19:35,889
app run easier if you have some sort of

458
00:19:33,759 --> 00:19:38,830
communication layer for talking in

459
00:19:35,889 --> 00:19:41,649
between specific apps all of these

460
00:19:38,830 --> 00:19:44,019
things can package into a pod and when

461
00:19:41,649 --> 00:19:46,479
they get deployed they are guaranteed to

462
00:19:44,019 --> 00:19:49,570
be run together and can then talk to

463
00:19:46,480 --> 00:19:51,129
each other it's really cool so stepping

464
00:19:49,570 --> 00:19:54,490
up again kubernetes

465
00:19:51,129 --> 00:19:57,279
is node aware so each one of your

466
00:19:54,490 --> 00:20:00,909
individual pieces of hardware that can

467
00:19:57,279 --> 00:20:02,950
run kubernetes is a node and has to have

468
00:20:00,909 --> 00:20:07,240
kubernetes installed on it to be able to

469
00:20:02,950 --> 00:20:08,769
then accept work from kubernetes so it

470
00:20:07,240 --> 00:20:09,639
understands what the underlying hardware

471
00:20:08,769 --> 00:20:11,950
is but it can't

472
00:20:09,639 --> 00:20:15,610
again manage what that underlying

473
00:20:11,950 --> 00:20:18,009
hardware is so then kubernetes will

474
00:20:15,610 --> 00:20:19,600
there's actually a master and nodes

475
00:20:18,009 --> 00:20:22,059
which I'll show here in just the next

476
00:20:19,600 --> 00:20:24,969
slide but the important thing is the

477
00:20:22,059 --> 00:20:27,399
pods get scheduled onto nodes and they

478
00:20:24,970 --> 00:20:30,240
consume some chunk of resources from

479
00:20:27,399 --> 00:20:33,459
that node some amount of hardware CPU

480
00:20:30,240 --> 00:20:36,389
network persistent storage all of these

481
00:20:33,460 --> 00:20:36,389
different things you can put together

482
00:20:36,690 --> 00:20:42,129
they're really nice thing also about

483
00:20:38,830 --> 00:20:45,418
kubernetes is deployments and what

484
00:20:42,129 --> 00:20:49,120
deployments do is allow you to create an

485
00:20:45,419 --> 00:20:50,799
availability for your application so in

486
00:20:49,120 --> 00:20:54,100
this particular example we've got three

487
00:20:50,799 --> 00:20:55,629
of our purple pod applications we can

488
00:20:54,100 --> 00:20:56,350
call that our front end we want to be

489
00:20:55,629 --> 00:20:58,959
able to call some

490
00:20:56,350 --> 00:21:00,639
have a server available to serve traffic

491
00:20:58,960 --> 00:21:03,910
to our users really important to accept

492
00:21:00,640 --> 00:21:08,530
connections and serve traffic app we

493
00:21:03,910 --> 00:21:10,809
have deployed two of our gold pods yeah

494
00:21:08,530 --> 00:21:14,410
maybe that's some extra monitoring stuff

495
00:21:10,809 --> 00:21:17,740
we've got going on we've got one of the

496
00:21:14,410 --> 00:21:19,270
green pods and that may be our single

497
00:21:17,740 --> 00:21:21,309
analytics thing off to the side running

498
00:21:19,270 --> 00:21:24,070
no big deal if it completes sometime

499
00:21:21,309 --> 00:21:27,580
next week whatever just the things we're

500
00:21:24,070 --> 00:21:31,928
working on and we also have our two

501
00:21:27,580 --> 00:21:33,399
cause for our red application so looking

502
00:21:31,929 --> 00:21:37,240
at how these are spread out kubernetes

503
00:21:33,400 --> 00:21:40,150
attempts to keep nodes our sorry keep

504
00:21:37,240 --> 00:21:41,890
applications separated across the nodes

505
00:21:40,150 --> 00:21:44,260
so that it's highly available and

506
00:21:41,890 --> 00:21:46,870
balanced on the actual nodes themselves

507
00:21:44,260 --> 00:21:49,419
you're not loading up node one with all

508
00:21:46,870 --> 00:21:54,100
of this stuff while node two and three

509
00:21:49,419 --> 00:21:57,880
are sitting idle it tries if there's you

510
00:21:54,100 --> 00:22:00,039
know one per node one pod per node to

511
00:21:57,880 --> 00:22:02,530
keep one of them active at all times on

512
00:22:00,039 --> 00:22:03,929
each one of the nodes there's a bunch of

513
00:22:02,530 --> 00:22:07,178
other different configurations for this

514
00:22:03,929 --> 00:22:09,700
it's configured inside of a deployment

515
00:22:07,179 --> 00:22:14,260
file which is y Amal everybody goes yeah

516
00:22:09,700 --> 00:22:17,500
Mel Gamble's sometimes but then as the

517
00:22:14,260 --> 00:22:19,960
nodes come up and down we can see let's

518
00:22:17,500 --> 00:22:22,900
say if we lost our node to here it says

519
00:22:19,960 --> 00:22:25,179
oh no well I'm supposed to have two of

520
00:22:22,900 --> 00:22:27,100
node two of our red application two of

521
00:22:25,179 --> 00:22:29,679
our gold application and three of my

522
00:22:27,100 --> 00:22:33,070
purple application up what do I do now

523
00:22:29,679 --> 00:22:34,659
it will shift and bring back up the

524
00:22:33,070 --> 00:22:35,799
purple node on one of the other or

525
00:22:34,659 --> 00:22:38,890
purple application on one of the other

526
00:22:35,799 --> 00:22:40,418
nodes maize put now probably put the

527
00:22:38,890 --> 00:22:42,220
gold application over here since there's

528
00:22:40,419 --> 00:22:45,309
not already a gold application on it and

529
00:22:42,220 --> 00:22:47,860
then shift red over to here and not

530
00:22:45,309 --> 00:22:52,570
really shipped it's more of a like re

531
00:22:47,860 --> 00:22:54,250
spin up so so it's gone no big deal but

532
00:22:52,570 --> 00:22:56,260
then you know maybe next week that node

533
00:22:54,250 --> 00:22:57,730
comes back up or maybe five minutes from

534
00:22:56,260 --> 00:22:59,799
now then it comes back up it will again

535
00:22:57,730 --> 00:23:02,100
try to ship the workload to keep

536
00:22:59,799 --> 00:23:05,460
everything evenly distributed and

537
00:23:02,100 --> 00:23:05,459
available for us

538
00:23:07,440 --> 00:23:14,769
all right the really super powerful

539
00:23:11,889 --> 00:23:16,779
thing about kubernetes is labels they

540
00:23:14,769 --> 00:23:19,840
are key value pairs that are attached to

541
00:23:16,779 --> 00:23:20,769
every object across kubernetes that's

542
00:23:19,840 --> 00:23:24,428
your nodes

543
00:23:20,769 --> 00:23:26,649
that's your claimants that's your pods

544
00:23:24,429 --> 00:23:29,259
everything gets labels it's really

545
00:23:26,649 --> 00:23:32,049
really really important you can label

546
00:23:29,259 --> 00:23:36,059
these and then select on them later to

547
00:23:32,049 --> 00:23:38,769
do a bunch of fancy stuff so let's say

548
00:23:36,059 --> 00:23:40,389
well - were a little bit here compliance

549
00:23:38,769 --> 00:23:43,419
if you have part of your application

550
00:23:40,389 --> 00:23:46,209
that is handling PCI data and you want

551
00:23:43,419 --> 00:23:48,700
part of your servers to be compliant to

552
00:23:46,210 --> 00:23:50,519
be able to use and process the PCI data

553
00:23:48,700 --> 00:23:52,840
but you don't want to have to secure

554
00:23:50,519 --> 00:23:55,870
every single bit of your entire

555
00:23:52,840 --> 00:23:59,230
infrastructure against PCI stuff you can

556
00:23:55,870 --> 00:24:02,289
tag your nodes with PCI and then any of

557
00:23:59,230 --> 00:24:05,110
your kubernetes pods that need PCI

558
00:24:02,289 --> 00:24:08,169
compliance can be pushed to the PCI

559
00:24:05,110 --> 00:24:12,269
compliant nodes and you can do the same

560
00:24:08,169 --> 00:24:15,730
thing HIPAA compliance gdpr compliance

561
00:24:12,269 --> 00:24:17,740
another really useful case is Bluegreen

562
00:24:15,730 --> 00:24:19,179
releases you can have pods that are at

563
00:24:17,740 --> 00:24:23,110
the same time you can ship traffic

564
00:24:19,179 --> 00:24:24,970
between them any kind of dimension you

565
00:24:23,110 --> 00:24:29,139
can think of that makes sense for your

566
00:24:24,970 --> 00:24:30,730
application labeling labels are really

567
00:24:29,139 --> 00:24:34,299
really cheap and they're really really

568
00:24:30,730 --> 00:24:36,399
really powerful because they're also

569
00:24:34,299 --> 00:24:38,168
configured as part of the code you can

570
00:24:36,399 --> 00:24:39,939
update them which is also really nice

571
00:24:38,169 --> 00:24:42,309
you don't have to know every single

572
00:24:39,940 --> 00:24:45,039
perfect label across your entire thing

573
00:24:42,309 --> 00:24:46,809
to start with you can do your best guess

574
00:24:45,039 --> 00:24:48,669
right now and then next week you get

575
00:24:46,809 --> 00:24:51,070
some crazy requests hey put all of our

576
00:24:48,669 --> 00:24:52,779
stuff over in you know Europe Wow how do

577
00:24:51,070 --> 00:24:55,629
we do that okay well let's go back in

578
00:24:52,779 --> 00:24:58,149
geo tag all of our specific servers and

579
00:24:55,629 --> 00:24:59,620
the location add regions add whatever

580
00:24:58,149 --> 00:25:02,428
makes sense for your specific

581
00:24:59,620 --> 00:25:06,370
environment the more dimensions you have

582
00:25:02,429 --> 00:25:09,070
the more finely tuned you can mess with

583
00:25:06,370 --> 00:25:11,289
your applications and your nodes really

584
00:25:09,070 --> 00:25:16,658
really really important so what should

585
00:25:11,289 --> 00:25:18,809
you label label everything go crazy with

586
00:25:16,659 --> 00:25:21,269
labels they're really really cheap

587
00:25:18,809 --> 00:25:24,940
people

588
00:25:21,269 --> 00:25:31,600
okay so let's talk a little bit about

589
00:25:24,940 --> 00:25:33,340
hybrid cloud now really the basic

590
00:25:31,600 --> 00:25:35,908
architecture for kubernetes you have a

591
00:25:33,340 --> 00:25:38,049
master node and two worker nodes

592
00:25:35,909 --> 00:25:39,249
technically you don't really need all of

593
00:25:38,049 --> 00:25:41,740
these on separate hardware and

594
00:25:39,249 --> 00:25:43,629
kubernetes has a tool called mini cube

595
00:25:41,740 --> 00:25:44,980
which allows you to basically spin all

596
00:25:43,629 --> 00:25:48,039
these up inside of a single virtual

597
00:25:44,980 --> 00:25:49,389
container this is more of a testing bed

598
00:25:48,039 --> 00:25:52,749
that you can make sure your applications

599
00:25:49,389 --> 00:25:55,330
and configurations are working if you

600
00:25:52,749 --> 00:25:57,460
have anything less than really a

601
00:25:55,330 --> 00:25:59,259
workload that needs two nodes you're

602
00:25:57,460 --> 00:26:01,149
probably better off just doing doctor by

603
00:25:59,259 --> 00:26:03,129
itself at that point you're probably

604
00:26:01,149 --> 00:26:04,449
just in like toy applications stuff

605
00:26:03,129 --> 00:26:05,529
kubernetes is a whole lot more

606
00:26:04,450 --> 00:26:09,190
configuration then you're gonna need for

607
00:26:05,529 --> 00:26:11,200
some toy project but again very very

608
00:26:09,190 --> 00:26:13,149
minimal basic architecture a master and

609
00:26:11,200 --> 00:26:16,409
two nodes directly connected that can

610
00:26:13,149 --> 00:26:20,498
talk to each other the second kind of

611
00:26:16,409 --> 00:26:22,990
end of that is highly available you want

612
00:26:20,499 --> 00:26:26,049
at least three of the master knows if it

613
00:26:22,990 --> 00:26:28,679
ends up if one of them crashes it gets

614
00:26:26,049 --> 00:26:30,999
really weird if you only have two the

615
00:26:28,679 --> 00:26:33,519
you lose your high availability to start

616
00:26:30,999 --> 00:26:35,619
with and that's very bad you've won as

617
00:26:33,519 --> 00:26:38,619
many nodes as you can at minimum three

618
00:26:35,619 --> 00:26:40,379
but you can go from there

619
00:26:38,619 --> 00:26:43,809
and what you'll do is connect the

620
00:26:40,379 --> 00:26:46,119
masters and the nodes in between load

621
00:26:43,809 --> 00:26:49,980
balancers you still want to have the

622
00:26:46,119 --> 00:26:53,649
nodes communicating to a single endpoint

623
00:26:49,980 --> 00:26:56,710
but the Masters will have to be able to

624
00:26:53,649 --> 00:26:59,590
talk back out as well to the nodes there

625
00:26:56,710 --> 00:27:03,039
this is a very very high level architect

626
00:26:59,590 --> 00:27:05,379
design there's a bunch of other layers

627
00:27:03,039 --> 00:27:06,759
of kubernetes it has an API server which

628
00:27:05,379 --> 00:27:07,928
is also really important and we'll talk

629
00:27:06,759 --> 00:27:11,169
a little bit without here in just couple

630
00:27:07,929 --> 00:27:13,450
minutes that API server is really

631
00:27:11,169 --> 00:27:15,179
important and it is how you connect to

632
00:27:13,450 --> 00:27:18,639
kubernetes with your outside clients

633
00:27:15,179 --> 00:27:24,159
your queue control other stuff that you

634
00:27:18,639 --> 00:27:25,508
can do dashboards but specifically you

635
00:27:24,159 --> 00:27:27,129
need the masters to be able to talk to

636
00:27:25,509 --> 00:27:28,539
the nodes and they need to be able to

637
00:27:27,129 --> 00:27:30,429
bounce through a load balancer for

638
00:27:28,539 --> 00:27:33,570
highly available

639
00:27:30,430 --> 00:27:36,940
so it knows where people kubernetes

640
00:27:33,570 --> 00:27:38,950
pretty much everywhere kubernetes runs

641
00:27:36,940 --> 00:27:40,660
on just about anything if you got old

642
00:27:38,950 --> 00:27:42,670
Raspberry Pi sitting around run

643
00:27:40,660 --> 00:27:45,730
kubernetes on them anything higher than

644
00:27:42,670 --> 00:27:48,400
a Raspberry Pi - I think right well - or

645
00:27:45,730 --> 00:27:50,560
better will run kubernetes you've got a

646
00:27:48,400 --> 00:27:52,360
bunch of desktop computers sitting

647
00:27:50,560 --> 00:27:54,220
around that are otherwise idle in the

648
00:27:52,360 --> 00:27:57,459
evening but kubernetes on them now you

649
00:27:54,220 --> 00:27:58,660
have a cluster to run applications on if

650
00:27:57,460 --> 00:27:59,230
you've got a giant data center right and

651
00:27:58,660 --> 00:28:00,910
I'm bare metal

652
00:27:59,230 --> 00:28:02,770
you've got virtualized Hardware right

653
00:28:00,910 --> 00:28:04,600
around your virtual machines kubernetes

654
00:28:02,770 --> 00:28:06,040
runs anywhere but except your kitchen

655
00:28:04,600 --> 00:28:10,480
sink until it gets connected to Wi-Fi

656
00:28:06,040 --> 00:28:12,310
and then it'll run on that - in the

657
00:28:10,480 --> 00:28:13,600
cloud Kyle you have a couple of

658
00:28:12,310 --> 00:28:16,360
different options you're having

659
00:28:13,600 --> 00:28:19,600
essentially the same architectures but

660
00:28:16,360 --> 00:28:22,330
you have two main camps for how you want

661
00:28:19,600 --> 00:28:24,490
to handle your cloud you have

662
00:28:22,330 --> 00:28:26,620
infrastructure as a service or platform

663
00:28:24,490 --> 00:28:28,840
as a service and a lot of that depends

664
00:28:26,620 --> 00:28:33,939
on how much control you want of how your

665
00:28:28,840 --> 00:28:36,010
containers run in the cloud with the

666
00:28:33,940 --> 00:28:37,230
platform as a service essentially you're

667
00:28:36,010 --> 00:28:40,060
not worrying about the underlying

668
00:28:37,230 --> 00:28:42,760
hardware you say I have this application

669
00:28:40,060 --> 00:28:44,830
I want you to go out and just run this

670
00:28:42,760 --> 00:28:47,050
cloud and keep it up make sure it's

671
00:28:44,830 --> 00:28:48,939
available if you get a bunch of traffic

672
00:28:47,050 --> 00:28:51,909
scale it up if you don't have a lot of

673
00:28:48,940 --> 00:28:54,820
traffic scale it down do all that for me

674
00:28:51,910 --> 00:28:56,680
I don't care there's some fine-tune

675
00:28:54,820 --> 00:28:57,820
knobs and it varies between all the

676
00:28:56,680 --> 00:29:01,320
different cloud providers as to what

677
00:28:57,820 --> 00:29:04,149
exactly what control you get for those

678
00:29:01,320 --> 00:29:07,540
but all the different ones habits Amazon

679
00:29:04,150 --> 00:29:09,640
has elastic container service asher has

680
00:29:07,540 --> 00:29:15,040
the azure container service and Google

681
00:29:09,640 --> 00:29:16,900
has App Engine so in those will run

682
00:29:15,040 --> 00:29:19,060
containers in different ways in

683
00:29:16,900 --> 00:29:20,830
different versions the other side of

684
00:29:19,060 --> 00:29:22,510
that is infrastructure as a code your

685
00:29:20,830 --> 00:29:25,139
infrastructure as a service and that

686
00:29:22,510 --> 00:29:28,150
allows you to deploy your code onto

687
00:29:25,140 --> 00:29:30,370
basically just bare compute instances

688
00:29:28,150 --> 00:29:33,460
that gives you a massive amount of

689
00:29:30,370 --> 00:29:33,820
control and if you want that if you need

690
00:29:33,460 --> 00:29:36,340
that

691
00:29:33,820 --> 00:29:38,470
that's an available option but you are

692
00:29:36,340 --> 00:29:40,240
directly installing kubernetes on every

693
00:29:38,470 --> 00:29:42,030
node you're directly managing every node

694
00:29:40,240 --> 00:29:44,180
you can get patched all of these other

695
00:29:42,030 --> 00:29:49,370
standard sa type

696
00:29:44,180 --> 00:29:53,180
are your responsibility here's a kind of

697
00:29:49,370 --> 00:29:57,979
basic idea of a very very basic hybrid

698
00:29:53,180 --> 00:30:00,650
cloud architecture you don't necessarily

699
00:29:57,980 --> 00:30:03,170
have to jump directly all in on the

700
00:30:00,650 --> 00:30:04,820
cloud there are certain things that make

701
00:30:03,170 --> 00:30:06,230
sense to run in the cloud and certain

702
00:30:04,820 --> 00:30:07,879
things that make sense to run on Prem if

703
00:30:06,230 --> 00:30:10,160
you're having a very very sensitive

704
00:30:07,880 --> 00:30:12,980
workload keep all of that data that is

705
00:30:10,160 --> 00:30:14,360
sensitive on Prem but if you've got you

706
00:30:12,980 --> 00:30:16,340
know a bunch of analytics work that

707
00:30:14,360 --> 00:30:17,510
isn't really sensitive for any reason

708
00:30:16,340 --> 00:30:19,490
you know maybe you've got just your

709
00:30:17,510 --> 00:30:21,110
website traffic logs and you want to

710
00:30:19,490 --> 00:30:23,960
analyze those over you know your past

711
00:30:21,110 --> 00:30:26,030
six years of beta well do you really

712
00:30:23,960 --> 00:30:28,700
want to use that on your expensive

713
00:30:26,030 --> 00:30:30,020
secured cluster here or do you want to

714
00:30:28,700 --> 00:30:32,060
just push off to the cloud and say hey

715
00:30:30,020 --> 00:30:34,460
yeah spin up resources get it done

716
00:30:32,060 --> 00:30:37,700
whatever it gets done no big deal do it

717
00:30:34,460 --> 00:30:39,500
cheap at the cloud they still need to

718
00:30:37,700 --> 00:30:42,860
have data that can talk between each

719
00:30:39,500 --> 00:30:47,300
other but they're not strictly one giant

720
00:30:42,860 --> 00:30:49,699
kubernetes cluster at that point the VPN

721
00:30:47,300 --> 00:30:52,490
allows traffic to go between them and

722
00:30:49,700 --> 00:30:54,680
specifically the data so push data that

723
00:30:52,490 --> 00:30:57,590
you don't care about to the cloud or if

724
00:30:54,680 --> 00:30:59,360
it you know if you do have less

725
00:30:57,590 --> 00:31:03,530
sensitive data can also see that in the

726
00:30:59,360 --> 00:31:05,419
cloud very much depends on what your

727
00:31:03,530 --> 00:31:07,820
specific security posture is and what

728
00:31:05,420 --> 00:31:09,740
kind of data you're looking for and

729
00:31:07,820 --> 00:31:12,919
again also the compliance for HIPAA can

730
00:31:09,740 --> 00:31:16,880
GPR PCI and the other dozen standards

731
00:31:12,920 --> 00:31:18,680
that matter for that here's a more

732
00:31:16,880 --> 00:31:21,280
advanced one and we're gonna kind of

733
00:31:18,680 --> 00:31:23,870
talk about this one for a few minutes

734
00:31:21,280 --> 00:31:26,030
the way to do some advanced stuff is

735
00:31:23,870 --> 00:31:28,129
essentially just making one giant

736
00:31:26,030 --> 00:31:31,490
kubernetes cluster between everything

737
00:31:28,130 --> 00:31:34,430
and this is where it requires a bunch of

738
00:31:31,490 --> 00:31:40,520
fancy networking essentially what you'll

739
00:31:34,430 --> 00:31:42,320
need is DNS on local and cloud and your

740
00:31:40,520 --> 00:31:44,629
primary route should be to a load

741
00:31:42,320 --> 00:31:46,429
balancer and you can host that either in

742
00:31:44,630 --> 00:31:50,000
the cloud on Prem don't really matter

743
00:31:46,430 --> 00:31:52,700
where that's hosted the primary DNS

744
00:31:50,000 --> 00:31:54,380
should point to that load balancer but

745
00:31:52,700 --> 00:31:56,630
if that one happens to go down DNS

746
00:31:54,380 --> 00:31:57,980
should have a failover back to a second

747
00:31:56,630 --> 00:32:02,600
load balancer for either

748
00:31:57,980 --> 00:32:06,230
the on-prem work or the cloud and that

749
00:32:02,600 --> 00:32:08,959
way you're not losing both sides of your

750
00:32:06,230 --> 00:32:10,309
cluster if one of them goes down or if

751
00:32:08,960 --> 00:32:12,049
you haven't just loose connectivity

752
00:32:10,309 --> 00:32:15,168
between them for some catastrophic

753
00:32:12,049 --> 00:32:19,279
reason the big thing here is that the

754
00:32:15,169 --> 00:32:21,950
Masters are all in one control plane you

755
00:32:19,279 --> 00:32:25,360
can do that using the cube admin command

756
00:32:21,950 --> 00:32:28,220
cube ADM you join all of them together

757
00:32:25,360 --> 00:32:35,149
and that will work because we have still

758
00:32:28,220 --> 00:32:37,519
a VPN inside of this yeah the dance

759
00:32:35,149 --> 00:32:39,620
pointing to this load balancer will have

760
00:32:37,519 --> 00:32:41,690
the traffic balance between on priming

761
00:32:39,620 --> 00:32:47,110
cloud and that way give us control

762
00:32:41,690 --> 00:32:47,110
across everything which is pretty big

763
00:32:47,649 --> 00:32:52,850
very big picture that is again more

764
00:32:51,200 --> 00:32:54,730
stuff make sure you have firewalls in

765
00:32:52,850 --> 00:32:56,539
place very very high level architecture

766
00:32:54,730 --> 00:33:01,149
more to it than that but that's the

767
00:32:56,539 --> 00:33:01,149
general idea for how you pull this off

768
00:33:03,130 --> 00:33:13,340
this was a fantastic Dilbert comic strip

769
00:33:05,630 --> 00:33:19,220
was so Dilbert complaining to his boss

770
00:33:13,340 --> 00:33:22,100
Bat Yam he was not allowed to make his

771
00:33:19,220 --> 00:33:23,210
applications actually cloud native and

772
00:33:22,100 --> 00:33:25,340
bosses like wait a minute I'm not

773
00:33:23,210 --> 00:33:27,950
allowed to just say you know kubernetes

774
00:33:25,340 --> 00:33:33,289
to make everything work and over it's

775
00:33:27,950 --> 00:33:35,419
just physically discipline all right

776
00:33:33,289 --> 00:33:37,389
security concerns now probably if you

777
00:33:35,419 --> 00:33:39,529
actually come here to a hackathon for

778
00:33:37,389 --> 00:33:41,139
each one of these different pieces we're

779
00:33:39,529 --> 00:33:43,970
going to talk about has different

780
00:33:41,139 --> 00:33:46,129
concerns around it and a lot of it is

781
00:33:43,970 --> 00:33:48,500
questions that you pretty much have to

782
00:33:46,130 --> 00:33:50,690
answer for yourself I don't have any

783
00:33:48,500 --> 00:33:53,120
silver bullets and this actually is

784
00:33:50,690 --> 00:33:55,460
again a very complicated architecture so

785
00:33:53,120 --> 00:33:58,340
it's very very heavily depends on

786
00:33:55,460 --> 00:34:01,309
exactly how you decide implement it a

787
00:33:58,340 --> 00:34:03,949
couple of basic concerns though with

788
00:34:01,309 --> 00:34:07,129
docker container breakouts you have all

789
00:34:03,950 --> 00:34:08,619
of these things scoped pretty well but

790
00:34:07,129 --> 00:34:10,549
it's not perfect

791
00:34:08,619 --> 00:34:11,780
occasionally stuff gets out of the

792
00:34:10,550 --> 00:34:13,820
containers and then

793
00:34:11,780 --> 00:34:16,220
it's on to the main host and then it can

794
00:34:13,820 --> 00:34:18,800
do whatever once it's very rare it's

795
00:34:16,219 --> 00:34:20,120
very hard but it has happened

796
00:34:18,800 --> 00:34:23,150
docker like pretty much everything else

797
00:34:20,120 --> 00:34:24,230
has CBE's against it

798
00:34:23,150 --> 00:34:28,730
another thing you have to worry about is

799
00:34:24,230 --> 00:34:30,440
kernel exploits the kernel being shared

800
00:34:28,730 --> 00:34:32,179
across all of the containers if there's

801
00:34:30,440 --> 00:34:34,130
some sort of malicious exploit with that

802
00:34:32,179 --> 00:34:36,350
getting access out of one container

803
00:34:34,130 --> 00:34:38,120
gives you access to do stuff in other

804
00:34:36,350 --> 00:34:40,819
containers that you may not even know

805
00:34:38,120 --> 00:34:42,529
we're sitting right beside you malicious

806
00:34:40,820 --> 00:34:44,270
images you can mitigate this a little

807
00:34:42,530 --> 00:34:47,690
bit with your trusted images and signed

808
00:34:44,270 --> 00:34:49,429
images and stuff like that but it's a

809
00:34:47,690 --> 00:34:51,260
very valid concern if someone ends up

810
00:34:49,429 --> 00:34:54,250
getting a key and uploading something

811
00:34:51,260 --> 00:34:56,540
that otherwise would be very bad for you

812
00:34:54,250 --> 00:34:58,160
make sure you know what you're running

813
00:34:56,540 --> 00:35:01,520
in your environment very very very

814
00:34:58,160 --> 00:35:04,279
important Dalila service this is kind of

815
00:35:01,520 --> 00:35:08,360
a half security and half not security

816
00:35:04,280 --> 00:35:12,890
kind of thing if you fail to configure

817
00:35:08,360 --> 00:35:14,630
the images properly they don't get to

818
00:35:12,890 --> 00:35:15,980
see groups up a line and then they can

819
00:35:14,630 --> 00:35:18,230
just consume whatever resources they

820
00:35:15,980 --> 00:35:20,090
want so if you don't have the resource

821
00:35:18,230 --> 00:35:23,570
limits you might end up having a

822
00:35:20,090 --> 00:35:25,490
container that spins out of control it

823
00:35:23,570 --> 00:35:27,140
might start just consuming truly

824
00:35:25,490 --> 00:35:29,569
ridiculous quantities of your memory and

825
00:35:27,140 --> 00:35:31,460
then oh well now I'm out of memory and

826
00:35:29,570 --> 00:35:35,150
everything starts crashing around you

827
00:35:31,460 --> 00:35:37,130
very bad again it may be entirely

828
00:35:35,150 --> 00:35:38,570
unintentional maybe entirely

829
00:35:37,130 --> 00:35:40,300
intentionally that's kind of where your

830
00:35:38,570 --> 00:35:44,020
malicious images versus your other

831
00:35:40,300 --> 00:35:46,040
configurations scanning has to happen

832
00:35:44,020 --> 00:35:48,050
other things to worry about within

833
00:35:46,040 --> 00:35:50,450
docker containers is unnecessary package

834
00:35:48,050 --> 00:35:52,580
binaries do you really need to have a

835
00:35:50,450 --> 00:35:54,319
full package manager inside your

836
00:35:52,580 --> 00:35:56,450
container edge you need app you need yum

837
00:35:54,320 --> 00:35:57,950
why put it in the container that's just

838
00:35:56,450 --> 00:36:00,830
one more victory that you have to worry

839
00:35:57,950 --> 00:36:02,779
about same thing like curled up you get

840
00:36:00,830 --> 00:36:04,580
these things you can go and pull things

841
00:36:02,780 --> 00:36:07,820
from the internet yet don't need that

842
00:36:04,580 --> 00:36:10,279
don't put it in there on top of that

843
00:36:07,820 --> 00:36:11,540
like from the security point it also

844
00:36:10,280 --> 00:36:13,010
makes your images lighter which makes

845
00:36:11,540 --> 00:36:16,570
them more efficient we can run more

846
00:36:13,010 --> 00:36:19,730
stuff on Sam and hardware it's good

847
00:36:16,570 --> 00:36:21,650
kubernetes a couple of important things

848
00:36:19,730 --> 00:36:23,500
with kubernetes i mentioned earlier that

849
00:36:21,650 --> 00:36:25,580
there's the API access

850
00:36:23,500 --> 00:36:28,370
Tesla actually had this problem

851
00:36:25,580 --> 00:36:30,590
last year they didn't secure their API

852
00:36:28,370 --> 00:36:32,690
servers for kubernetes and people found

853
00:36:30,590 --> 00:36:35,450
it on the internet and then submitted a

854
00:36:32,690 --> 00:36:39,830
bunch of I think it was Bitcoin mining

855
00:36:35,450 --> 00:36:41,419
pods into Tesla's main cluster and well

856
00:36:39,830 --> 00:36:43,520
that was bad

857
00:36:41,420 --> 00:36:48,200
I found it fixed it but securing your

858
00:36:43,520 --> 00:36:50,240
API access very important so again we

859
00:36:48,200 --> 00:36:52,850
have pods instead of containers but the

860
00:36:50,240 --> 00:36:56,899
containers can if we have other exploits

861
00:36:52,850 --> 00:37:01,279
get privilege escalation there's a set

862
00:36:56,900 --> 00:37:03,110
of containers that kubernetes uses that

863
00:37:01,280 --> 00:37:06,380
kind of does all of the internet working

864
00:37:03,110 --> 00:37:08,570
for its piece of this all the monitoring

865
00:37:06,380 --> 00:37:12,080
all the other stuff and those run within

866
00:37:08,570 --> 00:37:14,000
a privileged space in kubernetes you

867
00:37:12,080 --> 00:37:17,090
don't want your other containers to also

868
00:37:14,000 --> 00:37:18,830
be living in that privileged space and

869
00:37:17,090 --> 00:37:21,380
there's ways to mitigate that

870
00:37:18,830 --> 00:37:23,450
but container privilege escalation is

871
00:37:21,380 --> 00:37:26,330
one of the concerns for kubernetes in

872
00:37:23,450 --> 00:37:28,819
general everybody permits of network

873
00:37:26,330 --> 00:37:30,650
settings if you have things open to the

874
00:37:28,820 --> 00:37:31,940
Internet then you never know what's

875
00:37:30,650 --> 00:37:34,190
gonna happen might end up with a bunch

876
00:37:31,940 --> 00:37:37,460
of blockchain or Bitcoin tires on your

877
00:37:34,190 --> 00:37:40,070
kubernetes cluster bad times lastly and

878
00:37:37,460 --> 00:37:41,120
this is kind of a general everything are

879
00:37:40,070 --> 00:37:42,740
you skating your environment

880
00:37:41,120 --> 00:37:44,420
how are you scanning all of your pods

881
00:37:42,740 --> 00:37:49,040
how are you scanning all of your

882
00:37:44,420 --> 00:37:52,010
clusters what interesting stuff is out

883
00:37:49,040 --> 00:37:57,830
there and what are they doing you know

884
00:37:52,010 --> 00:38:01,640
where your quads are times okay so the

885
00:37:57,830 --> 00:38:03,580
network with hybrid cloud generally

886
00:38:01,640 --> 00:38:06,200
you're going across the public Internet

887
00:38:03,580 --> 00:38:09,890
the way too many have got obviously VPNs

888
00:38:06,200 --> 00:38:11,299
but I want a question you can ask is can

889
00:38:09,890 --> 00:38:13,819
you feasibly co-locate with your cloud

890
00:38:11,300 --> 00:38:14,930
edge a lot of the clouds have services

891
00:38:13,820 --> 00:38:16,880
that you can basically plug directly

892
00:38:14,930 --> 00:38:19,040
into their network and skip the public

893
00:38:16,880 --> 00:38:22,100
Internet entirely it becomes encrypted

894
00:38:19,040 --> 00:38:24,800
to them and your point literally in the

895
00:38:22,100 --> 00:38:26,900
data center by beside each other it's

896
00:38:24,800 --> 00:38:28,670
expensive generally but can you do it is

897
00:38:26,900 --> 00:38:30,950
that actually something that you're

898
00:38:28,670 --> 00:38:34,760
willing to pay for to mitigate something

899
00:38:30,950 --> 00:38:35,779
the VPN can't otherwise handle VPNs for

900
00:38:34,760 --> 00:38:38,660
everything one of the cloud providers

901
00:38:35,780 --> 00:38:39,230
have bandwidth caps so we'll having VPN

902
00:38:38,660 --> 00:38:40,250
actually are

903
00:38:39,230 --> 00:38:43,040
for you enough bandwidth between

904
00:38:40,250 --> 00:38:44,560
on-premise and cloud to satisfy what

905
00:38:43,040 --> 00:38:48,320
you're going to be doing between them

906
00:38:44,560 --> 00:38:50,480
maybe and what happens if one side of

907
00:38:48,320 --> 00:38:51,680
the other goes down is the stuff running

908
00:38:50,480 --> 00:38:52,580
in the cloud really important is the

909
00:38:51,680 --> 00:38:55,129
stuff running on premise really

910
00:38:52,580 --> 00:38:58,430
important can you switch over can you

911
00:38:55,130 --> 00:39:00,980
fail over one or the other entirely

912
00:38:58,430 --> 00:39:03,410
depends on how you design stuff and what

913
00:39:00,980 --> 00:39:05,330
actually is important to you again is it

914
00:39:03,410 --> 00:39:06,500
your analytics load that's just kind of

915
00:39:05,330 --> 00:39:09,109
running queries in the background

916
00:39:06,500 --> 00:39:11,510
generating random reports yeah whatever

917
00:39:09,109 --> 00:39:13,850
is it your main website Jade ranking

918
00:39:11,510 --> 00:39:17,810
millions of dollars they might want to

919
00:39:13,850 --> 00:39:21,200
take a look at that data

920
00:39:17,810 --> 00:39:23,090
where does your data live so another big

921
00:39:21,200 --> 00:39:25,060
concern with hybrid cloud is putting

922
00:39:23,090 --> 00:39:28,400
data in between two of them and

923
00:39:25,060 --> 00:39:29,930
sometimes if you're truly going hybrid

924
00:39:28,400 --> 00:39:32,510
where you're spinning up things back and

925
00:39:29,930 --> 00:39:34,160
forth is your data actually syncing

926
00:39:32,510 --> 00:39:35,990
across properly are you making sure that

927
00:39:34,160 --> 00:39:38,509
you're working on the most recent copy

928
00:39:35,990 --> 00:39:41,810
the best version of your data and then

929
00:39:38,510 --> 00:39:43,130
how do you verify that it's a big

930
00:39:41,810 --> 00:39:46,340
question there's not really a good

931
00:39:43,130 --> 00:39:49,369
single answer does your cloud offer

932
00:39:46,340 --> 00:39:51,380
secure enough storage I specifically

933
00:39:49,369 --> 00:39:52,640
emphasize enough there because every one

934
00:39:51,380 --> 00:39:56,390
of the clouds offers some kind of

935
00:39:52,640 --> 00:39:58,640
security but does it offer the security

936
00:39:56,390 --> 00:40:00,650
that you need for your space you know is

937
00:39:58,640 --> 00:40:03,770
it going to allow you put classified

938
00:40:00,650 --> 00:40:05,180
data on there most of them don't like do

939
00:40:03,770 --> 00:40:07,670
that unless you're in like the gum cloud

940
00:40:05,180 --> 00:40:10,040
kind of space

941
00:40:07,670 --> 00:40:11,660
yeah specific geolocation requirements

942
00:40:10,040 --> 00:40:12,050
for your data again GPR something like

943
00:40:11,660 --> 00:40:14,060
that

944
00:40:12,050 --> 00:40:15,440
you can't put data from over there over

945
00:40:14,060 --> 00:40:20,150
here it's really important to keep

946
00:40:15,440 --> 00:40:22,280
everything separate and last secrets so

947
00:40:20,150 --> 00:40:23,930
with all of this we're spinning

948
00:40:22,280 --> 00:40:26,480
containers up and down we're gonna need

949
00:40:23,930 --> 00:40:28,069
access to the API T's SSH keys all these

950
00:40:26,480 --> 00:40:30,230
other secrets you know database

951
00:40:28,070 --> 00:40:32,570
passwords how are they being stored

952
00:40:30,230 --> 00:40:34,460
inside of your environment kubernetes

953
00:40:32,570 --> 00:40:36,350
actually has stuff before that which was

954
00:40:34,460 --> 00:40:38,270
really cool you can create committees

955
00:40:36,350 --> 00:40:41,150
secrets and they just live inside the

956
00:40:38,270 --> 00:40:43,220
cluster but is that what you're using or

957
00:40:41,150 --> 00:40:47,859
are using some sort of third party like

958
00:40:43,220 --> 00:40:50,569
key store idea how is it being stored

959
00:40:47,859 --> 00:40:52,640
especially - with being partly

960
00:40:50,570 --> 00:40:55,220
on-premise partly in the cloud

961
00:40:52,640 --> 00:40:57,740
quickly can you actually mitigate a loss

962
00:40:55,220 --> 00:40:59,299
of a secret if it goes like if you find

963
00:40:57,740 --> 00:41:01,069
out that it's been compromised how

964
00:40:59,300 --> 00:41:02,330
quickly can you shut it down and get a

965
00:41:01,070 --> 00:41:04,280
new one out and deployed in your

966
00:41:02,330 --> 00:41:07,370
environment do you want to have your

967
00:41:04,280 --> 00:41:09,290
website down for a day yeah probably not

968
00:41:07,370 --> 00:41:11,000
and more importantly than that and kind

969
00:41:09,290 --> 00:41:12,320
of feeding back to that do you have a

970
00:41:11,000 --> 00:41:14,900
plan or a system for rotating your

971
00:41:12,320 --> 00:41:18,170
secrets that will definitely help in the

972
00:41:14,900 --> 00:41:24,250
event that you end up losing all right

973
00:41:18,170 --> 00:41:28,190
last let's talk a little bit about tools

974
00:41:24,250 --> 00:41:29,450
so docker doc that's pretty much it

975
00:41:28,190 --> 00:41:32,780
docker is how you run pretty much

976
00:41:29,450 --> 00:41:34,730
everything through docker back the

977
00:41:32,780 --> 00:41:36,350
kubernetes has two that you will

978
00:41:34,730 --> 00:41:39,590
specifically want to know about for

979
00:41:36,350 --> 00:41:41,540
hybrid cloud cube control which you'll

980
00:41:39,590 --> 00:41:46,190
hear people grasp all sorts of different

981
00:41:41,540 --> 00:41:48,440
ways it's your main API access into

982
00:41:46,190 --> 00:41:50,570
deploying pods to applying deployments

983
00:41:48,440 --> 00:41:52,910
to doing all of the things with

984
00:41:50,570 --> 00:41:55,460
kubernetes that you need to do cube

985
00:41:52,910 --> 00:41:59,290
admin will allow you to actually create

986
00:41:55,460 --> 00:41:59,290
the bare clusters to start with

987
00:42:00,340 --> 00:42:04,580
orchestration so if you are not 100%

988
00:42:02,930 --> 00:42:07,609
convinced on kubernetes there are other

989
00:42:04,580 --> 00:42:09,500
options docker swarm is the official

990
00:42:07,610 --> 00:42:11,810
like darker version of kubernetes it's

991
00:42:09,500 --> 00:42:14,000
the same kind of availability and

992
00:42:11,810 --> 00:42:15,140
everything bringing it up and down

993
00:42:14,000 --> 00:42:17,480
making sure that there are enough

994
00:42:15,140 --> 00:42:22,580
running putting them on nodes keeping

995
00:42:17,480 --> 00:42:25,340
things load balanced it exists but crew

996
00:42:22,580 --> 00:42:29,930
Metty is seems to be the preferred way

997
00:42:25,340 --> 00:42:32,570
of doing it there's mezzos and also DC

998
00:42:29,930 --> 00:42:34,970
OS which is a like enterprise version of

999
00:42:32,570 --> 00:42:37,430
mezzos company about DT IQ puts it out

1000
00:42:34,970 --> 00:42:39,439
and there's actually images for it for

1001
00:42:37,430 --> 00:42:41,690
it in hazard by default I think a couple

1002
00:42:39,440 --> 00:42:44,270
of others are getting to that and also

1003
00:42:41,690 --> 00:42:46,010
if you want to just use a container

1004
00:42:44,270 --> 00:42:49,280
platform open shipped my hat has that

1005
00:42:46,010 --> 00:42:53,060
now i lastly talk a little about the

1006
00:42:49,280 --> 00:42:55,580
security docker ee has a bunch of really

1007
00:42:53,060 --> 00:42:58,340
important stuff one thing in particular

1008
00:42:55,580 --> 00:43:01,460
is security scan it will actually show

1009
00:42:58,340 --> 00:43:03,680
you layer by layer what specific CVE

1010
00:43:01,460 --> 00:43:06,860
vulnerabilities exist inside of your

1011
00:43:03,680 --> 00:43:12,109
containers super nice sto is a

1012
00:43:06,860 --> 00:43:13,940
giant by traffic policy engine one

1013
00:43:12,110 --> 00:43:17,090
really cool thing about its Google is

1014
00:43:13,940 --> 00:43:21,350
using it with kubernetes and their

1015
00:43:17,090 --> 00:43:24,800
google kubernetes engine to build hybrid

1016
00:43:21,350 --> 00:43:27,230
clouds in a box it has a common control

1017
00:43:24,800 --> 00:43:29,570
plane with kubernetes it's their anthos

1018
00:43:27,230 --> 00:43:32,720
product it's expensive but it allows you

1019
00:43:29,570 --> 00:43:34,370
to just plug it in and go cuckoo Bernays

1020
00:43:32,720 --> 00:43:35,870
engine on Prem you get google kubernetes

1021
00:43:34,370 --> 00:43:38,690
engine the cloud one thing Google them

1022
00:43:35,870 --> 00:43:40,549
all high trust this is another one that

1023
00:43:38,690 --> 00:43:46,310
I was working with a little bit over the

1024
00:43:40,550 --> 00:43:49,070
summer with contracting they have mostly

1025
00:43:46,310 --> 00:43:50,870
VM space so if you're not a hundred

1026
00:43:49,070 --> 00:43:53,240
percent sold in two containers at this

1027
00:43:50,870 --> 00:43:56,049
point hydrosis is a good place to start

1028
00:43:53,240 --> 00:43:58,700
because they also have a container piece

1029
00:43:56,050 --> 00:44:01,700
so as you're mitigating or migrating

1030
00:43:58,700 --> 00:44:04,549
from VMs to containers you have a common

1031
00:44:01,700 --> 00:44:06,169
cool moving you forward and stack rocks

1032
00:44:04,550 --> 00:44:08,090
is the one that I really really want to

1033
00:44:06,170 --> 00:44:09,680
show you I actually been working with

1034
00:44:08,090 --> 00:44:12,890
them on and off again with the

1035
00:44:09,680 --> 00:44:14,060
consulting stuff this summer and told

1036
00:44:12,890 --> 00:44:14,990
them I was coming they actually gave me

1037
00:44:14,060 --> 00:44:17,180
an environment to play with which is

1038
00:44:14,990 --> 00:44:18,620
pretty cool I also have two swag pens

1039
00:44:17,180 --> 00:44:22,190
and stickers and stuff like that if you

1040
00:44:18,620 --> 00:44:23,630
guys want to come up and grab stuff they

1041
00:44:22,190 --> 00:44:26,350
have a very nice interface for

1042
00:44:23,630 --> 00:44:29,630
essentially profiling your entire

1043
00:44:26,350 --> 00:44:31,790
cluster and more importantly they have

1044
00:44:29,630 --> 00:44:35,780
what I think is their really big feature

1045
00:44:31,790 --> 00:44:37,910
this risk tab that actually prioritizes

1046
00:44:35,780 --> 00:44:40,310
all of the running stuff on your

1047
00:44:37,910 --> 00:44:42,680
environment they've got this dashboard

1048
00:44:40,310 --> 00:44:44,360
here that says okay we got 98 violations

1049
00:44:42,680 --> 00:44:46,370
but if you go and spit that as a ticket

1050
00:44:44,360 --> 00:44:47,900
you got right 98 violations you're just

1051
00:44:46,370 --> 00:44:49,790
gonna get laughed at there's no way to

1052
00:44:47,900 --> 00:44:53,810
prioritize that it'll get done when it

1053
00:44:49,790 --> 00:44:55,640
gets done whatever but with the priority

1054
00:44:53,810 --> 00:44:58,580
ranking that they offer you can actually

1055
00:44:55,640 --> 00:45:01,700
see this is why we're doing this there's

1056
00:44:58,580 --> 00:45:04,220
weird run conditions there's different

1057
00:45:01,700 --> 00:45:06,500
pieces that are old there are pieces

1058
00:45:04,220 --> 00:45:08,470
that have high profile CDs that are

1059
00:45:06,500 --> 00:45:10,820
easily fixable

1060
00:45:08,470 --> 00:45:12,649
so you know maybe submit the top five to

1061
00:45:10,820 --> 00:45:15,080
your developers and say hey go fix these

1062
00:45:12,650 --> 00:45:17,710
they're really important so start adding

1063
00:45:15,080 --> 00:45:17,710
stuff to the backlog

1064
00:45:21,250 --> 00:45:26,960
okay so that's the majority a very very

1065
00:45:25,130 --> 00:45:28,610
high-level majority for how hybrid

1066
00:45:26,960 --> 00:45:30,140
clouds work if you have any questions

1067
00:45:28,610 --> 00:45:31,820
I'll be around all weekend come hit me

1068
00:45:30,140 --> 00:45:35,000
up come talk to me I love talking about

1069
00:45:31,820 --> 00:45:36,050
cool stuff if you're interested in more

1070
00:45:35,000 --> 00:45:37,880
of the deep dives

1071
00:45:36,050 --> 00:45:40,730
shameless plug go to Lennox Academy comm

1072
00:45:37,880 --> 00:45:42,620
they've got stuff for docker containers

1073
00:45:40,730 --> 00:45:47,180
kubernetes any of the clouds you want to

1074
00:45:42,620 --> 00:45:48,380
learn vary from platform yeah

1075
00:45:47,180 --> 00:45:56,419
thanks what

1076
00:45:48,380 --> 00:45:56,419
[Applause]

1077
00:46:01,770 --> 00:46:03,830
you

