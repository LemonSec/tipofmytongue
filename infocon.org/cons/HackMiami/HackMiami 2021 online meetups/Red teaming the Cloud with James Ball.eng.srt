1
00:00:00,960 --> 00:00:04,319
this conference will now be recorded

2
00:00:04,319 --> 00:00:06,799
alright good afternoon everybody um

3
00:00:06,799 --> 00:00:07,520
today

4
00:00:07,520 --> 00:00:11,599
uh we have a privilege

5
00:00:11,599 --> 00:00:14,960
uh having um the reverend patrick

6
00:00:14,960 --> 00:00:17,520
that is james ball uh one of the

7
00:00:17,520 --> 00:00:18,640
founders of

8
00:00:18,640 --> 00:00:22,720
hack miami uh james is

9
00:00:22,720 --> 00:00:25,279
truly truly truly a person that i

10
00:00:25,279 --> 00:00:26,560
respect

11
00:00:26,560 --> 00:00:28,640
and admire and i had the the privilege

12
00:00:28,640 --> 00:00:30,000
of being his friend

13
00:00:30,000 --> 00:00:33,280
james for me is an american hero james

14
00:00:33,280 --> 00:00:36,160
is an original terrorist fighter

15
00:00:36,160 --> 00:00:39,680
um freedom fighter uh he's very humble

16
00:00:39,680 --> 00:00:40,879
and he will never

17
00:00:40,879 --> 00:00:42,800
you know tell you all his adventures but

18
00:00:42,800 --> 00:00:44,079
he's incredible

19
00:00:44,079 --> 00:00:47,840
and maybe one day i'll just sit with him

20
00:00:47,840 --> 00:00:49,680
and we'll talk about some of the amazing

21
00:00:49,680 --> 00:00:51,680
things he's done

22
00:00:51,680 --> 00:00:54,399
and uh you get to see how a person

23
00:00:54,399 --> 00:00:57,280
really truly believes in what

24
00:00:57,280 --> 00:01:00,640
he does uh how he helps others

25
00:01:00,640 --> 00:01:02,320
and he simply doesn't say anything it's

26
00:01:02,320 --> 00:01:04,080
not that other people are

27
00:01:04,080 --> 00:01:06,000
posting about stuff that they truly

28
00:01:06,000 --> 00:01:07,760
don't do by the way

29
00:01:07,760 --> 00:01:10,880
so um thank you james

30
00:01:10,880 --> 00:01:13,840
for giving us this time um you know you

31
00:01:13,840 --> 00:01:15,520
are one of the pilots at miami you're

32
00:01:15,520 --> 00:01:18,240
one of the founders i know you from

33
00:01:18,240 --> 00:01:21,360
uh now quite a bit of time and uh

34
00:01:21,360 --> 00:01:23,439
very happy you're still with us even

35
00:01:23,439 --> 00:01:25,040
though you're no longer in florida

36
00:01:25,040 --> 00:01:26,799
you're in uh

37
00:01:26,799 --> 00:01:29,840
in the west coast uh and uh we're happy

38
00:01:29,840 --> 00:01:30,720
to have you here

39
00:01:30,720 --> 00:01:34,400
and um without further ado

40
00:01:34,400 --> 00:01:37,520
this is uh james ball

41
00:01:37,520 --> 00:01:39,360
hi everybody thanks for like uh

42
00:01:39,360 --> 00:01:41,600
fantastic introduction rod

43
00:01:41,600 --> 00:01:46,720
uh that was very very nice

44
00:01:46,720 --> 00:01:49,200
let's see

45
00:01:51,200 --> 00:01:54,880
so um

46
00:01:54,880 --> 00:01:57,439
so this i'm gonna this is gonna be the

47
00:01:57,439 --> 00:01:59,040
red team in the cloud

48
00:01:59,040 --> 00:02:02,320
basically this presentation uh

49
00:02:02,320 --> 00:02:04,159
i decided to do this presentation

50
00:02:04,159 --> 00:02:06,640
because i've been getting

51
00:02:06,640 --> 00:02:10,000
a lot of requests and engagements where

52
00:02:10,000 --> 00:02:11,440
they wanted me to go

53
00:02:11,440 --> 00:02:15,120
attack either an on-premise enterprise

54
00:02:15,120 --> 00:02:18,160
cloud environment or like our a full

55
00:02:18,160 --> 00:02:19,120
base

56
00:02:19,120 --> 00:02:22,800
ip range in the cloud or or also

57
00:02:22,800 --> 00:02:26,080
um amazon instances so

58
00:02:26,080 --> 00:02:27,520
basically i've been getting a lot more

59
00:02:27,520 --> 00:02:29,280
requests to to attack more cloud

60
00:02:29,280 --> 00:02:30,879
infrastructure

61
00:02:30,879 --> 00:02:34,080
and um so during this time

62
00:02:34,080 --> 00:02:36,319
getting this request i decided to do the

63
00:02:36,319 --> 00:02:37,840
the more the most recent

64
00:02:37,840 --> 00:02:41,200
science training on the um

65
00:02:41,200 --> 00:02:44,640
on cloud penetration testing and

66
00:02:44,640 --> 00:02:47,840
to my surprise and also to my surprise

67
00:02:47,840 --> 00:02:50,640
when i was doing the engagements a lot

68
00:02:50,640 --> 00:02:51,920
of the methodology

69
00:02:51,920 --> 00:02:54,959
that i've used for web application

70
00:02:54,959 --> 00:02:55,840
hacking

71
00:02:55,840 --> 00:02:58,720
and basically the other type of packing

72
00:02:58,720 --> 00:02:59,760
uh basically

73
00:02:59,760 --> 00:03:02,400
followed through to this environment as

74
00:03:02,400 --> 00:03:03,440
well

75
00:03:03,440 --> 00:03:07,040
so it was it was a pretty much easier

76
00:03:07,040 --> 00:03:09,360
pivot to go from web application hacking

77
00:03:09,360 --> 00:03:11,680
which was my um

78
00:03:11,680 --> 00:03:16,159
my forte efforts into this

79
00:03:17,760 --> 00:03:20,640
so i'm going to keep it high level i'm

80
00:03:20,640 --> 00:03:23,680
not going to show any demos or anything

81
00:03:23,680 --> 00:03:25,519
because i don't i i don't really have

82
00:03:25,519 --> 00:03:26,799
any targets live

83
00:03:26,799 --> 00:03:29,360
that i can legally show you right now

84
00:03:29,360 --> 00:03:30,400
but uh and i will

85
00:03:30,400 --> 00:03:34,640
keep this focus on aws primarily

86
00:03:34,640 --> 00:03:37,920
um however you know azure microsoft

87
00:03:37,920 --> 00:03:39,360
azure cloud

88
00:03:39,360 --> 00:03:42,000
you know that's also uh very similar to

89
00:03:42,000 --> 00:03:44,319
this as well as google cloud computing

90
00:03:44,319 --> 00:03:46,000
and alibaba

91
00:03:46,000 --> 00:03:48,239
so what what i'm going to be discussing

92
00:03:48,239 --> 00:03:50,400
here will uh will work across

93
00:03:50,400 --> 00:03:52,560
all the different types of um or all the

94
00:03:52,560 --> 00:03:55,760
different vendors in cloud computing

95
00:03:55,760 --> 00:04:00,640
uh but uh this will be primary with aws

96
00:04:00,640 --> 00:04:03,920
now when you're going to be doing cloud

97
00:04:03,920 --> 00:04:07,519
computing uh or cloud-based uh

98
00:04:07,519 --> 00:04:10,319
penetration testing you are going to be

99
00:04:10,319 --> 00:04:10,959
using

100
00:04:10,959 --> 00:04:12,879
the tools associated with the

101
00:04:12,879 --> 00:04:14,000
environment so

102
00:04:14,000 --> 00:04:17,440
when you be testing amazon or aws system

103
00:04:17,440 --> 00:04:18,798
you'll be using their

104
00:04:18,798 --> 00:04:22,320
aws client command line interface or

105
00:04:22,320 --> 00:04:25,600
their own tool and most of the attacks

106
00:04:25,600 --> 00:04:29,040
will be based on your knowledge of

107
00:04:29,040 --> 00:04:32,320
the of those tools itself so

108
00:04:32,320 --> 00:04:34,800
that is something that is also quite

109
00:04:34,800 --> 00:04:35,919
interesting that

110
00:04:35,919 --> 00:04:37,280
the tools that you that you'll be

111
00:04:37,280 --> 00:04:39,840
needing to do a lot of the um

112
00:04:39,840 --> 00:04:42,560
privilege escalations will be the

113
00:04:42,560 --> 00:04:43,919
built-in tools

114
00:04:43,919 --> 00:04:46,080
so if you are so if you did manage to

115
00:04:46,080 --> 00:04:48,000
compromise

116
00:04:48,000 --> 00:04:50,560
say an internal system though you

117
00:04:50,560 --> 00:04:51,520
wouldn't have to be

118
00:04:51,520 --> 00:04:53,440
worried about installing extra tools

119
00:04:53,440 --> 00:04:55,120
because more than likely

120
00:04:55,120 --> 00:04:57,520
these tools will probably be in one of

121
00:04:57,520 --> 00:04:58,160
those uh

122
00:04:58,160 --> 00:05:00,560
systems

123
00:05:02,320 --> 00:05:04,479
so this here's another brief

124
00:05:04,479 --> 00:05:05,919
introduction that i wrote into the

125
00:05:05,919 --> 00:05:07,680
presentation about me

126
00:05:07,680 --> 00:05:09,199
you know i've been here for very long

127
00:05:09,199 --> 00:05:10,479
i've been doing this for a very long

128
00:05:10,479 --> 00:05:11,600
time

129
00:05:11,600 --> 00:05:13,199
i really couldn't give a better um

130
00:05:13,199 --> 00:05:14,880
introduction that rod has given to me or

131
00:05:14,880 --> 00:05:16,880
given to you guys earlier

132
00:05:16,880 --> 00:05:20,000
uh but uh i will also i will go into the

133
00:05:20,000 --> 00:05:20,900
types of um

134
00:05:20,900 --> 00:05:22,000
[Music]

135
00:05:22,000 --> 00:05:23,199
the types of things i've been into

136
00:05:23,199 --> 00:05:25,280
recently i did mention

137
00:05:25,280 --> 00:05:26,560
i've been going to cloud computing

138
00:05:26,560 --> 00:05:28,720
recently but i'm also a subject matter

139
00:05:28,720 --> 00:05:31,600
expert and web application testing

140
00:05:31,600 --> 00:05:34,880
and api testing as well as single

141
00:05:34,880 --> 00:05:36,479
sign-on technologies

142
00:05:36,479 --> 00:05:39,600
which which was very well into

143
00:05:39,600 --> 00:05:44,880
um cloud-based uh testing

144
00:05:47,919 --> 00:05:51,280
so as i said earlier

145
00:05:51,280 --> 00:05:53,520
the the cloud the cloud is being adopted

146
00:05:53,520 --> 00:05:55,680
by many industries and many industries

147
00:05:55,680 --> 00:05:56,800
are going to go

148
00:05:56,800 --> 00:05:59,840
fully based into the cloud now

149
00:05:59,840 --> 00:06:01,600
when i mean the cloud i'm also saying

150
00:06:01,600 --> 00:06:04,840
azure and um

151
00:06:04,840 --> 00:06:08,639
aws you can use it on application

152
00:06:08,639 --> 00:06:12,080
software's other services such as um out

153
00:06:12,080 --> 00:06:14,720
um office 360. that's that's a type of

154
00:06:14,720 --> 00:06:15,759
cloud-based uh

155
00:06:15,759 --> 00:06:17,840
thing uh infrastructure that would be

156
00:06:17,840 --> 00:06:20,400
that's considered software as a service

157
00:06:20,400 --> 00:06:24,080
so one thing one thing we don't go into

158
00:06:24,080 --> 00:06:28,240
is the types of cloud-based

159
00:06:28,240 --> 00:06:30,800
services that we can test and the

160
00:06:30,800 --> 00:06:33,360
scoping around them

161
00:06:33,360 --> 00:06:35,840
um

162
00:06:36,639 --> 00:06:38,960
oops

163
00:06:40,400 --> 00:06:45,440
okay so yeah

164
00:06:45,440 --> 00:06:47,759
so in this slide i described on the

165
00:06:47,759 --> 00:06:49,440
types of services that we see in the

166
00:06:49,440 --> 00:06:50,880
cloud as i mentioned earlier

167
00:06:50,880 --> 00:06:53,680
software as a service here here you'll

168
00:06:53,680 --> 00:06:54,400
be only

169
00:06:54,400 --> 00:06:58,479
able to attack um the instance of the uh

170
00:06:58,479 --> 00:07:02,000
organization's implementation so uh

171
00:07:02,000 --> 00:07:04,000
you'll be attacked is say tesla's

172
00:07:04,000 --> 00:07:05,199
instance of

173
00:07:05,199 --> 00:07:09,120
or office 360 as opposed to office 360

174
00:07:09,120 --> 00:07:11,120
itself

175
00:07:11,120 --> 00:07:14,160
so now we go to platformer services you

176
00:07:14,160 --> 00:07:14,720
know

177
00:07:14,720 --> 00:07:16,080
these things these are things that we

178
00:07:16,080 --> 00:07:18,240
see that allow developers to call an

179
00:07:18,240 --> 00:07:20,240
existing environment

180
00:07:20,240 --> 00:07:22,560
and when we have these type of tests you

181
00:07:22,560 --> 00:07:24,400
are expected to stay within

182
00:07:24,400 --> 00:07:27,680
the containerized um

183
00:07:27,680 --> 00:07:31,280
area of that instance so

184
00:07:31,280 --> 00:07:33,840
basically you if you're testing say

185
00:07:33,840 --> 00:07:36,479
something like um

186
00:07:36,479 --> 00:07:40,319
uh sharepoint you you'll be only testing

187
00:07:40,319 --> 00:07:43,120
the say tesla.sharepoint.com or

188
00:07:43,120 --> 00:07:45,440
something like that

189
00:07:45,440 --> 00:07:48,319
and it that the basic the basics um

190
00:07:48,319 --> 00:07:49,280
understanding of this

191
00:07:49,280 --> 00:07:51,440
is that when we're testing cloud uh in

192
00:07:51,440 --> 00:07:53,680
infrastructure and cloud uh

193
00:07:53,680 --> 00:07:56,000
environments we're gonna have to make

194
00:07:56,000 --> 00:07:58,160
sure that we're only sticking

195
00:07:58,160 --> 00:08:01,759
within the clients uh or a target

196
00:08:01,759 --> 00:08:03,120
organization's uh

197
00:08:03,120 --> 00:08:06,400
instances of it we we generally would

198
00:08:06,400 --> 00:08:07,759
not have

199
00:08:07,759 --> 00:08:11,120
the permission to actually go

200
00:08:11,120 --> 00:08:14,879
say attack amazon.com itself or azure

201
00:08:14,879 --> 00:08:16,720
the instance itself but we more than

202
00:08:16,720 --> 00:08:18,479
likely will be attacking the

203
00:08:18,479 --> 00:08:21,919
implementation of these instances

204
00:08:21,919 --> 00:08:24,960
um the last

205
00:08:24,960 --> 00:08:28,000
thing i have function as a service uh

206
00:08:28,000 --> 00:08:31,680
this is uh basically uh

207
00:08:31,680 --> 00:08:36,080
aws lambda and uh azure functions of

208
00:08:36,080 --> 00:08:38,479
virtual functions these are basically

209
00:08:38,479 --> 00:08:39,360
one-time

210
00:08:39,360 --> 00:08:41,120
things that could be spun up and down

211
00:08:41,120 --> 00:08:42,880
basically when they're executed on

212
00:08:42,880 --> 00:08:44,000
demand

213
00:08:44,000 --> 00:08:46,240
uh and a lot of these functions have

214
00:08:46,240 --> 00:08:47,839
permissions that are higher than the

215
00:08:47,839 --> 00:08:49,839
normal user permissions

216
00:08:49,839 --> 00:08:52,240
so we'll be we will be able to

217
00:08:52,240 --> 00:08:54,320
potentially pivot

218
00:08:54,320 --> 00:08:56,000
though from those functions of service

219
00:08:56,000 --> 00:08:57,440
or these one called one-time use

220
00:08:57,440 --> 00:08:58,160
functions

221
00:08:58,160 --> 00:09:08,160
onto another system

222
00:09:08,160 --> 00:09:12,000
okay so here's like i go into

223
00:09:12,000 --> 00:09:14,000
um we're testing the uh software the

224
00:09:14,000 --> 00:09:16,320
service i have here is the uh

225
00:09:16,320 --> 00:09:21,360
salesforce os 360 dropbox

226
00:09:21,360 --> 00:09:24,160
uh it basically exchange um the types of

227
00:09:24,160 --> 00:09:26,160
access controls that we have to focus on

228
00:09:26,160 --> 00:09:28,560
the tests

229
00:09:31,120 --> 00:09:37,839
let's go to the next slide

230
00:09:40,640 --> 00:09:42,320
so this this is what i said earlier in

231
00:09:42,320 --> 00:09:43,920
other slides here

232
00:09:43,920 --> 00:09:47,120
uh where i uh it's basically platform

233
00:09:47,120 --> 00:09:49,200
services on the the containerization of

234
00:09:49,200 --> 00:09:50,000
the application

235
00:09:50,000 --> 00:09:51,680
so we're going to try to stay within our

236
00:09:51,680 --> 00:09:54,080
own containers when we're doing um

237
00:09:54,080 --> 00:09:57,440
these types of testing

238
00:10:00,720 --> 00:10:02,800
so here's infrastructure the services

239
00:10:02,800 --> 00:10:03,920
these are the ones we're attacking the

240
00:10:03,920 --> 00:10:05,360
virtual machines

241
00:10:05,360 --> 00:10:08,000
the storage devices uh storage services

242
00:10:08,000 --> 00:10:08,720
and blocks

243
00:10:08,720 --> 00:10:11,680
such as blob services uh what would be

244
00:10:11,680 --> 00:10:13,360
when we're testing those things we'll be

245
00:10:13,360 --> 00:10:13,760
test

246
00:10:13,760 --> 00:10:15,519
we'll be testing basically how the

247
00:10:15,519 --> 00:10:18,079
client or how to target configured

248
00:10:18,079 --> 00:10:21,279
their uh the permissioning to or access

249
00:10:21,279 --> 00:10:21,600
to

250
00:10:21,600 --> 00:10:25,200
said storage storage services

251
00:10:25,200 --> 00:10:29,279
um now um amazon web services

252
00:10:29,279 --> 00:10:32,560
allows for testing of um

253
00:10:32,560 --> 00:10:35,760
freely testing of the of their services

254
00:10:35,760 --> 00:10:37,279
as long as they stick to the client that

255
00:10:37,279 --> 00:10:38,720
you're testing so you stick to your own

256
00:10:38,720 --> 00:10:39,760
platform

257
00:10:39,760 --> 00:10:41,440
and your own implementation of it they

258
00:10:41,440 --> 00:10:43,920
allow you to test it all you want

259
00:10:43,920 --> 00:10:48,240
um the diff with azure

260
00:10:48,240 --> 00:10:50,000
however if you want to test anything

261
00:10:50,000 --> 00:10:52,240
related to microsoft services

262
00:10:52,240 --> 00:10:53,839
you will you will have to send them a

263
00:10:53,839 --> 00:10:56,320
notification email

264
00:10:56,320 --> 00:11:00,399
uh but aws will allow you to test mostly

265
00:11:00,399 --> 00:11:01,600
all of their services

266
00:11:01,600 --> 00:11:03,680
they're mainly the main restriction for

267
00:11:03,680 --> 00:11:05,920
all the types of cloud-based uh

268
00:11:05,920 --> 00:11:08,320
testing is they do not want you to do

269
00:11:08,320 --> 00:11:10,480
the knowledge service attacks

270
00:11:10,480 --> 00:11:11,920
where you go where you affect other

271
00:11:11,920 --> 00:11:15,120
customers and their own

272
00:11:15,120 --> 00:11:18,079
infrastructure and they also do not want

273
00:11:18,079 --> 00:11:18,720
you

274
00:11:18,720 --> 00:11:21,920
to uh to do something where it was pick

275
00:11:21,920 --> 00:11:23,680
up too much resources

276
00:11:23,680 --> 00:11:25,680
and then eventually called another uh

277
00:11:25,680 --> 00:11:26,800
outage

278
00:11:26,800 --> 00:11:28,399
so their main concern is that when you

279
00:11:28,399 --> 00:11:30,560
do testing on a cloud environment that

280
00:11:30,560 --> 00:11:34,000
you're not messing up other people's

281
00:11:34,000 --> 00:11:43,760
implementation of it

282
00:11:43,760 --> 00:11:45,519
so here's the stuff that azure and i

283
00:11:45,519 --> 00:11:47,920
said they allow you to do

284
00:11:47,920 --> 00:11:49,680
this they do a lot of they do a lot of

285
00:11:49,680 --> 00:11:51,120
test virtual machines and

286
00:11:51,120 --> 00:11:53,600
also the security monitoring of it but

287
00:11:53,600 --> 00:11:55,600
they they want you to um

288
00:11:55,600 --> 00:11:58,240
get an independent notification and the

289
00:11:58,240 --> 00:11:58,800
same thing

290
00:11:58,800 --> 00:12:01,120
same thing applies for azure and aws

291
00:12:01,120 --> 00:12:02,880
when you're doing a uh

292
00:12:02,880 --> 00:12:05,680
a proof of concept attack they don't

293
00:12:05,680 --> 00:12:06,560
want you to

294
00:12:06,560 --> 00:12:09,920
uh to drop like a command shell or

295
00:12:09,920 --> 00:12:10,720
anything

296
00:12:10,720 --> 00:12:12,959
uh malicious on the box so they don't

297
00:12:12,959 --> 00:12:14,079
want you to drop a ransomware or

298
00:12:14,079 --> 00:12:15,040
anything on it

299
00:12:15,040 --> 00:12:16,720
they want you to basically do proof of

300
00:12:16,720 --> 00:12:18,720
concepts demonstrating that you can

301
00:12:18,720 --> 00:12:25,839
that you can access the information

302
00:12:29,680 --> 00:12:32,480
here i go into some information on types

303
00:12:32,480 --> 00:12:33,360
of containers

304
00:12:33,360 --> 00:12:36,320
that are packaged uh this is basically

305
00:12:36,320 --> 00:12:37,600
going over run c

306
00:12:37,600 --> 00:12:40,959
this uh this is what you see in um

307
00:12:40,959 --> 00:12:45,360
it uh mainly um the linux environments

308
00:12:45,360 --> 00:12:49,680
um doctor docker requires

309
00:12:49,680 --> 00:12:52,639
this to run so if so when we when we um

310
00:12:52,639 --> 00:12:54,240
when we do things with docker you'll

311
00:12:54,240 --> 00:12:55,600
notice that they do have to

312
00:12:55,600 --> 00:12:59,279
use run c with their um

313
00:12:59,279 --> 00:13:07,839
with their containers to run excuse me

314
00:13:10,560 --> 00:13:12,800
now now container d is another uh

315
00:13:12,800 --> 00:13:14,240
container function uh

316
00:13:14,240 --> 00:13:16,720
it's basically a gamer that a damien

317
00:13:16,720 --> 00:13:18,480
that runs in real time

318
00:13:18,480 --> 00:13:22,000
uh they use um they use a protocol

319
00:13:22,000 --> 00:13:25,360
uh grpc that you see in the background

320
00:13:25,360 --> 00:13:26,959
uh and that's how they communicate with

321
00:13:26,959 --> 00:13:29,279
uh with the uh where they started with

322
00:13:29,279 --> 00:13:30,720
their services

323
00:13:30,720 --> 00:13:32,959
via under containers if you you'll

324
00:13:32,959 --> 00:13:34,000
probably probably see

325
00:13:34,000 --> 00:13:37,040
uh grpc calls when you're doing

326
00:13:37,040 --> 00:13:39,279
wireshark um

327
00:13:39,279 --> 00:13:41,839
uh inspect uh inspected of network

328
00:13:41,839 --> 00:13:43,680
traffic using wireshark

329
00:13:43,680 --> 00:13:46,720
um but for the purpose of um what

330
00:13:46,720 --> 00:13:49,760
i'm saying here or this presentation

331
00:13:49,760 --> 00:13:53,120
um this is basically letting you know

332
00:13:53,120 --> 00:13:54,880
where the technologies are in containers

333
00:13:54,880 --> 00:13:55,600
but

334
00:13:55,600 --> 00:13:57,199
for this on this presentation we would

335
00:13:57,199 --> 00:13:58,959
not be exploiting this aspect

336
00:13:58,959 --> 00:14:03,199
so much

337
00:14:03,199 --> 00:14:06,320
so what i mentioned earlier um

338
00:14:06,320 --> 00:14:09,120
today is that i was when i started doing

339
00:14:09,120 --> 00:14:09,519
the

340
00:14:09,519 --> 00:14:11,040
cloud-based metroid testing i was

341
00:14:11,040 --> 00:14:13,120
actually um surprised

342
00:14:13,120 --> 00:14:16,240
about how very similar it is to web

343
00:14:16,240 --> 00:14:17,839
application testing

344
00:14:17,839 --> 00:14:19,920
um to the point that they were refused

345
00:14:19,920 --> 00:14:21,680
there were a few uh slides

346
00:14:21,680 --> 00:14:23,360
in the training itself that referred you

347
00:14:23,360 --> 00:14:26,000
to go take the web application

348
00:14:26,000 --> 00:14:28,560
training as well as the advanced web

349
00:14:28,560 --> 00:14:30,800
application training um which i've done

350
00:14:30,800 --> 00:14:31,839
already

351
00:14:31,839 --> 00:14:34,160
so and the things that they did but the

352
00:14:34,160 --> 00:14:35,360
things that they demonstrate

353
00:14:35,360 --> 00:14:37,920
in a lot of these trainings are are

354
00:14:37,920 --> 00:14:38,399
things

355
00:14:38,399 --> 00:14:40,959
that what i when i try to do in the real

356
00:14:40,959 --> 00:14:41,519
world

357
00:14:41,519 --> 00:14:44,720
are not as prevalent anymore about two

358
00:14:44,720 --> 00:14:47,120
years ago this was more prevalent you'll

359
00:14:47,120 --> 00:14:48,160
be able to see open

360
00:14:48,160 --> 00:14:52,320
uh mongol databases and open radish

361
00:14:52,320 --> 00:14:56,079
databases but not so much anymore

362
00:14:56,079 --> 00:14:58,000
but it's still it's still always good

363
00:14:58,000 --> 00:15:00,639
practice to always check for it

364
00:15:00,639 --> 00:15:02,160
even though they're even though um

365
00:15:02,160 --> 00:15:04,320
there's bug bounty programs and there's

366
00:15:04,320 --> 00:15:07,120
tons of internal teams uh there are

367
00:15:07,120 --> 00:15:07,839
still

368
00:15:07,839 --> 00:15:11,040
you still might get an instance of um

369
00:15:11,040 --> 00:15:13,920
of a rogue basically the developer spun

370
00:15:13,920 --> 00:15:14,800
up something that

371
00:15:14,800 --> 00:15:17,440
maybe forgot to spun down and that could

372
00:15:17,440 --> 00:15:18,079
lead

373
00:15:18,079 --> 00:15:21,120
to a pivot into another uh instance in

374
00:15:21,120 --> 00:15:22,320
there

375
00:15:22,320 --> 00:15:25,519
but from what i've seen over the last

376
00:15:25,519 --> 00:15:26,639
few years

377
00:15:26,639 --> 00:15:29,199
when it comes to uh infiltration of

378
00:15:29,199 --> 00:15:30,959
enterprises

379
00:15:30,959 --> 00:15:34,079
um it was either done

380
00:15:34,079 --> 00:15:36,320
it was mainly done via phishing and

381
00:15:36,320 --> 00:15:38,079
social engineering attack i would say

382
00:15:38,079 --> 00:15:39,759
about 90

383
00:15:39,759 --> 00:15:43,120
of of 95 of the infiltration done at

384
00:15:43,120 --> 00:15:44,720
enterprises nowadays

385
00:15:44,720 --> 00:15:46,880
is done by a phishing attack or a social

386
00:15:46,880 --> 00:15:48,480
engineering attack

387
00:15:48,480 --> 00:15:51,680
um i have i have i have seen

388
00:15:51,680 --> 00:15:53,360
other types of attacks where they

389
00:15:53,360 --> 00:15:55,759
exploited the apis

390
00:15:55,759 --> 00:15:59,040
of many of these services

391
00:15:59,040 --> 00:16:02,160
i myself was able to exploit apis

392
00:16:02,160 --> 00:16:07,680
of iam the identity access management

393
00:16:07,680 --> 00:16:10,079
protocols which we'll go into in later

394
00:16:10,079 --> 00:16:11,360
night slides

395
00:16:11,360 --> 00:16:13,839
to get in for basically make your basic

396
00:16:13,839 --> 00:16:14,480
api

397
00:16:14,480 --> 00:16:18,160
calls via um over permission

398
00:16:18,160 --> 00:16:21,279
tokens or sessions that are

399
00:16:21,279 --> 00:16:25,120
being sent in the api but

400
00:16:25,120 --> 00:16:27,920
uh when we were first starting out doing

401
00:16:27,920 --> 00:16:29,440
these enterprise tests

402
00:16:29,440 --> 00:16:32,800
very large cloud-based testings

403
00:16:32,800 --> 00:16:35,440
you may not find things coming at you

404
00:16:35,440 --> 00:16:36,399
first you may scan

405
00:16:36,399 --> 00:16:39,920
a very large pool of ip addresses

406
00:16:39,920 --> 00:16:42,160
and they will not be they will not ping

407
00:16:42,160 --> 00:16:43,600
back back to you

408
00:16:43,600 --> 00:16:46,240
because they um they've already been uh

409
00:16:46,240 --> 00:16:47,759
patched up or not

410
00:16:47,759 --> 00:16:51,120
so well so often so what we're going to

411
00:16:51,120 --> 00:16:53,680
be going to mainly now is

412
00:16:53,680 --> 00:16:55,519
a lot of these things will be is if you

413
00:16:55,519 --> 00:16:56,880
already did uh

414
00:16:56,880 --> 00:16:58,880
plus exploitation after social

415
00:16:58,880 --> 00:17:00,079
engineering on some

416
00:17:00,079 --> 00:17:03,920
on an employee or if we're able to gain

417
00:17:03,920 --> 00:17:04,640
uh

418
00:17:04,640 --> 00:17:07,760
information via an exposed apr

419
00:17:07,760 --> 00:17:12,319
misconfigurated api or

420
00:17:12,319 --> 00:17:19,839
or other web vulnerabilities

421
00:17:20,079 --> 00:17:22,079
so the tools that we've been using for

422
00:17:22,079 --> 00:17:23,679
um cloud-based testing

423
00:17:23,679 --> 00:17:25,039
are basically these same tools that

424
00:17:25,039 --> 00:17:26,799
we'll be using for um

425
00:17:26,799 --> 00:17:29,919
web-based testing um burp is my favorite

426
00:17:29,919 --> 00:17:30,880
tool i use it for

427
00:17:30,880 --> 00:17:34,640
every test it's a very um

428
00:17:34,640 --> 00:17:37,280
a robust tool burp is a proxy tool that

429
00:17:37,280 --> 00:17:38,080
you'll put

430
00:17:38,080 --> 00:17:40,799
in between the client and the server and

431
00:17:40,799 --> 00:17:42,880
it it will intercept

432
00:17:42,880 --> 00:17:46,080
the traffic from the uh your your client

433
00:17:46,080 --> 00:17:47,600
which would be your laptop or

434
00:17:47,600 --> 00:17:51,520
the browser you're using into the server

435
00:17:51,520 --> 00:17:55,200
and postman is basically

436
00:17:55,200 --> 00:17:59,039
a client used to make api calls

437
00:17:59,039 --> 00:18:02,160
when developers develop apis

438
00:18:02,160 --> 00:18:05,280
uh they often use postman scripts

439
00:18:05,280 --> 00:18:08,080
or postman to test the api out without

440
00:18:08,080 --> 00:18:09,600
without actually having to develop a

441
00:18:09,600 --> 00:18:11,200
full front end for it

442
00:18:11,200 --> 00:18:14,240
so postmas is basically a way to do

443
00:18:14,240 --> 00:18:16,480
a front end for apis if you do not have

444
00:18:16,480 --> 00:18:19,280
a an application for it

445
00:18:19,280 --> 00:18:23,039
um i i like to still use burp

446
00:18:23,039 --> 00:18:26,880
in lieu of postman um when doing these

447
00:18:26,880 --> 00:18:29,440
call when doing these tests in my

448
00:18:29,440 --> 00:18:32,720
experience when i was using postman

449
00:18:32,720 --> 00:18:36,080
in the past uh postman

450
00:18:36,080 --> 00:18:38,720
will oft will often time add their own

451
00:18:38,720 --> 00:18:39,520
encoded

452
00:18:39,520 --> 00:18:42,559
value or they will they will correct

453
00:18:42,559 --> 00:18:46,640
an encoded value so if i were to put

454
00:18:46,640 --> 00:18:49,760
a um a percent 27

455
00:18:49,760 --> 00:18:53,520
which is the hack memory logo into um

456
00:18:53,520 --> 00:18:56,320
into the postmatch grip instead of

457
00:18:56,320 --> 00:18:57,200
setting the correct

458
00:18:57,200 --> 00:19:00,240
20 it says instead of sending percent 27

459
00:19:00,240 --> 00:19:02,320
it may actually just send the apostrophe

460
00:19:02,320 --> 00:19:03,520
itself

461
00:19:03,520 --> 00:19:06,240
whereas burp i can guarantee it that it

462
00:19:06,240 --> 00:19:07,039
will not

463
00:19:07,039 --> 00:19:10,480
alter that um that encode that url

464
00:19:10,480 --> 00:19:11,200
encoding

465
00:19:11,200 --> 00:19:14,000
when i when i send it i've only had that

466
00:19:14,000 --> 00:19:15,600
happen a few times

467
00:19:15,600 --> 00:19:18,000
in the past but that's the copy i've had

468
00:19:18,000 --> 00:19:20,880
when i've used postman

469
00:19:20,880 --> 00:19:24,400
now mass can and we'll be using

470
00:19:24,400 --> 00:19:27,600
for um when we get an ip address range

471
00:19:27,600 --> 00:19:28,720
that contains

472
00:19:28,720 --> 00:19:31,600
thousands or even millions of ip

473
00:19:31,600 --> 00:19:32,960
addresses

474
00:19:32,960 --> 00:19:35,200
uh most oftentimes this will also be

475
00:19:35,200 --> 00:19:37,280
internal ip addresses too that could

476
00:19:37,280 --> 00:19:39,120
this was an enterprise environment you

477
00:19:39,120 --> 00:19:41,039
know we would be testing a pretty

478
00:19:41,039 --> 00:19:44,160
long wage of um vms and um

479
00:19:44,160 --> 00:19:46,960
ip addresses there so we're going to use

480
00:19:46,960 --> 00:19:48,880
mass scan because mascara will be able

481
00:19:48,880 --> 00:19:49,360
to

482
00:19:49,360 --> 00:19:51,840
to scan all of these in a in a timely

483
00:19:51,840 --> 00:19:52,960
manner

484
00:19:52,960 --> 00:19:56,000
the downside of using mass scan

485
00:19:56,000 --> 00:19:59,120
is that you know you'll be so you'll be

486
00:19:59,120 --> 00:20:01,280
sacrificing accuracy

487
00:20:01,280 --> 00:20:04,559
for speed so what i

488
00:20:04,559 --> 00:20:07,120
what i like to do is i would like to use

489
00:20:07,120 --> 00:20:09,679
i would like to use mass scan

490
00:20:09,679 --> 00:20:12,080
to go scan a large range of ip addresses

491
00:20:12,080 --> 00:20:14,159
first and then get the results from mass

492
00:20:14,159 --> 00:20:15,360
scan like any

493
00:20:15,360 --> 00:20:18,159
host that it finds that was up and any

494
00:20:18,159 --> 00:20:18,720
of the

495
00:20:18,720 --> 00:20:21,360
any poor statistics up and then throw it

496
00:20:21,360 --> 00:20:22,720
into nmap

497
00:20:22,720 --> 00:20:24,559
because nmap will also have extra

498
00:20:24,559 --> 00:20:25,919
scripts for it

499
00:20:25,919 --> 00:20:29,039
such as well i'll go into it later on

500
00:20:29,039 --> 00:20:31,200
but if i find like a mondo database i

501
00:20:31,200 --> 00:20:32,679
can use nmap

502
00:20:32,679 --> 00:20:35,760
to verify that the database is

503
00:20:35,760 --> 00:20:39,440
actually there and i could access it

504
00:20:39,760 --> 00:20:42,320
um as i mentioned earlier you know if

505
00:20:42,320 --> 00:20:43,039
you're going to do

506
00:20:43,039 --> 00:20:45,280
amazon web services or amazon

507
00:20:45,280 --> 00:20:46,720
cloud-based testing

508
00:20:46,720 --> 00:20:50,159
we'll be using the aws cli tool

509
00:20:50,159 --> 00:20:53,039
and for azure um they have the azer

510
00:20:53,039 --> 00:20:55,360
command line tool

511
00:20:55,360 --> 00:20:58,159
and for recon we're going to use open

512
00:20:58,159 --> 00:20:59,360
source tools for

513
00:20:59,360 --> 00:21:02,559
especially at a scale one tool that i

514
00:21:02,559 --> 00:21:03,600
really like to use

515
00:21:03,600 --> 00:21:06,799
is crt.sh

516
00:21:06,799 --> 00:21:08,400
which is a great way to enumerate

517
00:21:08,400 --> 00:21:10,559
subdomains and i'll get into that

518
00:21:10,559 --> 00:21:13,760
i believe into the next slide

519
00:21:14,159 --> 00:21:16,080
but um since this io is like another

520
00:21:16,080 --> 00:21:17,360
showdown

521
00:21:17,360 --> 00:21:20,000
um it's based they they already scanned

522
00:21:20,000 --> 00:21:22,000
internet and if you put in ip addresses

523
00:21:22,000 --> 00:21:23,039
they already put they'll

524
00:21:23,039 --> 00:21:25,440
display what ports that they that they

525
00:21:25,440 --> 00:21:28,080
were able to take to open beforehand

526
00:21:28,080 --> 00:21:31,760
uh robtex.com is um something i've used

527
00:21:31,760 --> 00:21:33,360
to map out

528
00:21:33,360 --> 00:21:36,640
large um uh asn's

529
00:21:36,640 --> 00:21:39,919
or uh large network bomb air

530
00:21:39,919 --> 00:21:44,080
areas uh they also provide other sub

531
00:21:44,080 --> 00:21:46,080
domains or other

532
00:21:46,080 --> 00:21:49,120
other hosts or host names or domains

533
00:21:49,120 --> 00:21:51,520
that are relying relying on the same

534
00:21:51,520 --> 00:21:53,840
host

535
00:21:54,720 --> 00:21:58,720
now now i would i could talk about these

536
00:21:58,720 --> 00:21:59,520
tools

537
00:21:59,520 --> 00:22:02,559
and go into how to use these tools but

538
00:22:02,559 --> 00:22:04,240
they're i'm pretty sure

539
00:22:04,240 --> 00:22:06,159
that you guys can find the research into

540
00:22:06,159 --> 00:22:07,679
using these tools yourself

541
00:22:07,679 --> 00:22:12,320
there are a lot of um uh um

542
00:22:12,320 --> 00:22:14,159
there's a lot of documentation on how to

543
00:22:14,159 --> 00:22:16,240
use burp there's a lot of uh

544
00:22:16,240 --> 00:22:18,240
things out there for all of these tools

545
00:22:18,240 --> 00:22:19,679
so i don't feel it's necessary for me to

546
00:22:19,679 --> 00:22:20,320
go into

547
00:22:20,320 --> 00:22:23,120
how to use um typical calls and stuff

548
00:22:23,120 --> 00:22:25,440
there's a lot of documentation out there

549
00:22:25,440 --> 00:22:28,480
i'm sure if anybody have done any um

550
00:22:28,480 --> 00:22:32,320
training or any uh any um

551
00:22:32,320 --> 00:22:34,080
like information security you've

552
00:22:34,080 --> 00:22:35,760
probably heard of some of the tools

553
00:22:35,760 --> 00:22:38,080
you know one being at least nmap that's

554
00:22:38,080 --> 00:22:40,400
been around since the matrix

555
00:22:40,400 --> 00:22:42,559
so this is still a tool that's being

556
00:22:42,559 --> 00:22:45,280
used today

557
00:22:47,760 --> 00:22:51,679
so i mentioned crt.sh

558
00:22:51,679 --> 00:22:54,000
now this is this is uh we're using the

559
00:22:54,000 --> 00:22:56,320
certificate transparency

560
00:22:56,320 --> 00:23:00,320
uh tool the certificate transparency

561
00:23:00,320 --> 00:23:03,760
was a way to uh it was a way for that

562
00:23:03,760 --> 00:23:05,520
browsers

563
00:23:05,520 --> 00:23:08,960
and uh and

564
00:23:08,960 --> 00:23:10,720
wait for browsers and clients to know

565
00:23:10,720 --> 00:23:12,799
that the certificate the certificates

566
00:23:12,799 --> 00:23:14,720
that are being presented on the websites

567
00:23:14,720 --> 00:23:16,480
are actually their certificates

568
00:23:16,480 --> 00:23:18,880
and not a spoof certificates or

569
00:23:18,880 --> 00:23:20,720
malicious certificates

570
00:23:20,720 --> 00:23:23,440
so there's these uh there are several uh

571
00:23:23,440 --> 00:23:24,159
trans

572
00:23:24,159 --> 00:23:26,080
certificate transparency records out

573
00:23:26,080 --> 00:23:28,400
there that we can go look through

574
00:23:28,400 --> 00:23:31,000
for certain domains one of them is a

575
00:23:31,000 --> 00:23:32,720
crt.sh

576
00:23:32,720 --> 00:23:36,159
facebook has one of them as well um

577
00:23:36,159 --> 00:23:38,480
but we're going to use crt.sh because

578
00:23:38,480 --> 00:23:40,080
it's free it's online you can use it

579
00:23:40,080 --> 00:23:42,559
anytime

580
00:23:43,520 --> 00:23:50,240
okay so here is here is an example okay

581
00:23:50,240 --> 00:23:52,880
guy comment

582
00:23:54,320 --> 00:23:56,720
goldbuster is good but yes um there are

583
00:23:56,720 --> 00:23:57,760
there are yeah these

584
00:23:57,760 --> 00:23:59,200
there are several tools that are

585
00:23:59,200 --> 00:24:01,279
definitely a lot more faster now

586
00:24:01,279 --> 00:24:03,360
uh one reason why i like i mentioned

587
00:24:03,360 --> 00:24:05,360
goalbuster and dns

588
00:24:05,360 --> 00:24:09,520
recon that py is because um

589
00:24:09,520 --> 00:24:12,159
uh one of them was written in dot go

590
00:24:12,159 --> 00:24:12,799
whether they're in

591
00:24:12,799 --> 00:24:14,559
go language and everyone's in python

592
00:24:14,559 --> 00:24:17,520
language uh so they're usually used

593
00:24:17,520 --> 00:24:19,279
they're using universal on all operating

594
00:24:19,279 --> 00:24:20,640
systems so

595
00:24:20,640 --> 00:24:22,960
that's one reason why uh we like to like

596
00:24:22,960 --> 00:24:24,559
when we use um

597
00:24:24,559 --> 00:24:27,440
we like to go show out of scripts

598
00:24:27,440 --> 00:24:31,360
written in python or go languages

599
00:24:31,360 --> 00:24:35,039
so um here i gave an example of

600
00:24:35,039 --> 00:24:37,760
how i used um i tried enumerate some

601
00:24:37,760 --> 00:24:38,640
subdomains of

602
00:24:38,640 --> 00:24:42,400
um testblood.com and i used the

603
00:24:42,400 --> 00:24:45,679
crt the circuit transparency site and i

604
00:24:45,679 --> 00:24:47,679
use the wildcard of the percent sign

605
00:24:47,679 --> 00:24:48,240
there

606
00:24:48,240 --> 00:24:51,520
in front of tesla.com now the reason why

607
00:24:51,520 --> 00:24:52,080
i put

608
00:24:52,080 --> 00:24:55,360
the wildcard.tesla.com is because if i

609
00:24:55,360 --> 00:24:57,440
just say wildcard tesla.com

610
00:24:57,440 --> 00:24:59,440
it will pollute the results with some

611
00:24:59,440 --> 00:25:00,960
that could have something with

612
00:25:00,960 --> 00:25:04,120
before the word tesla in it so if i put

613
00:25:04,120 --> 00:25:06,080
wildcard.tesla.com to make sure that i

614
00:25:06,080 --> 00:25:06,720
have

615
00:25:06,720 --> 00:25:09,760
i get more subdomains out of it and here

616
00:25:09,760 --> 00:25:10,960
you see

617
00:25:10,960 --> 00:25:13,840
um we get more subdomains that we can

618
00:25:13,840 --> 00:25:15,039
see there's a

619
00:25:15,039 --> 00:25:18,080
powerhub that energy.tesla.com

620
00:25:18,080 --> 00:25:21,600
uh gridlogic energy.tesla.com uh the

621
00:25:21,600 --> 00:25:23,600
list went on pretty long but here i just

622
00:25:23,600 --> 00:25:24,880
want to show you what this could look

623
00:25:24,880 --> 00:25:26,400
like and how you can enumerate

624
00:25:26,400 --> 00:25:28,640
other other subdomains by using this

625
00:25:28,640 --> 00:25:32,240
certificate transparency tool

626
00:25:40,640 --> 00:25:42,559
i forgot to i i didn't mention in the

627
00:25:42,559 --> 00:25:44,159
last slide but you could also

628
00:25:44,159 --> 00:25:47,679
uh pair up dns recon

629
00:25:47,679 --> 00:25:50,320
uh the python script with the results

630
00:25:50,320 --> 00:25:51,320
you get from

631
00:25:51,320 --> 00:25:54,559
crt.sh to uh to get even more

632
00:25:54,559 --> 00:25:57,200
uh subdomains and then you'll you then

633
00:25:57,200 --> 00:25:58,720
what i would like to do is i will use

634
00:25:58,720 --> 00:26:00,240
goalbuster

635
00:26:00,240 --> 00:26:03,760
to get the um to get the director

636
00:26:03,760 --> 00:26:06,799
basically the directories afterwards

637
00:26:06,799 --> 00:26:08,240
see if we can enter any directories

638
00:26:08,240 --> 00:26:10,400
after the domain

639
00:26:10,400 --> 00:26:12,480
so other things you want to look for

640
00:26:12,480 --> 00:26:14,080
when we're when we're exploring

641
00:26:14,080 --> 00:26:17,440
enterprises or um

642
00:26:17,440 --> 00:26:19,360
enterprises or their cloud-based stuff

643
00:26:19,360 --> 00:26:20,640
is that we're gonna look at the github

644
00:26:20,640 --> 00:26:22,320
repositories

645
00:26:22,320 --> 00:26:25,279
um i've i myself seen in the past where

646
00:26:25,279 --> 00:26:27,039
developers will put up

647
00:26:27,039 --> 00:26:29,200
a project they're working on on the

648
00:26:29,200 --> 00:26:30,640
external git

649
00:26:30,640 --> 00:26:34,159
and then they'll have uh ssh keys in it

650
00:26:34,159 --> 00:26:35,039
or

651
00:26:35,039 --> 00:26:38,400
hard-coded credentials oftentimes their

652
00:26:38,400 --> 00:26:38,720
own

653
00:26:38,720 --> 00:26:40,480
credentials for their own work

654
00:26:40,480 --> 00:26:42,960
environment such as uh

655
00:26:42,960 --> 00:26:46,159
active directory credentials uh

656
00:26:46,159 --> 00:26:49,120
so and they might even realize that they

657
00:26:49,120 --> 00:26:50,720
even that they put these credentials in

658
00:26:50,720 --> 00:26:52,080
later on and they'll go

659
00:26:52,080 --> 00:26:55,120
on to go back into the into the get and

660
00:26:55,120 --> 00:26:56,640
remove it

661
00:26:56,640 --> 00:26:59,600
so i've seen in the past that even

662
00:26:59,600 --> 00:27:01,440
though they removed the passwords

663
00:27:01,440 --> 00:27:04,000
they did not they forget to go back to

664
00:27:04,000 --> 00:27:05,440
old commits

665
00:27:05,440 --> 00:27:07,200
and if you go back to the old commits

666
00:27:07,200 --> 00:27:09,360
they are you may see some credentials

667
00:27:09,360 --> 00:27:11,918
leaked in there

668
00:27:18,000 --> 00:27:19,200
oh here's where i mentioned where i

669
00:27:19,200 --> 00:27:21,200
could use the um dns recon

670
00:27:21,200 --> 00:27:23,919
all right with the irs so um here's

671
00:27:23,919 --> 00:27:24,640
here's i

672
00:27:24,640 --> 00:27:26,399
heard i mentioned i uh going more into

673
00:27:26,399 --> 00:27:27,919
the other services indeed

674
00:27:27,919 --> 00:27:31,200
uh in more detail uh the census io

675
00:27:31,200 --> 00:27:32,159
showdown

676
00:27:32,159 --> 00:27:36,480
uh services um

677
00:27:36,480 --> 00:27:38,320
you can i'm sure you guys have seen

678
00:27:38,320 --> 00:27:39,760
these searches already so i won't go in

679
00:27:39,760 --> 00:27:49,760
too much at them on them

680
00:27:49,760 --> 00:27:52,640
okay so once once we scan things we

681
00:27:52,640 --> 00:27:54,159
might see

682
00:27:54,159 --> 00:27:56,880
here here are some databases that are

683
00:27:56,880 --> 00:27:58,080
that are usually uh

684
00:27:58,080 --> 00:28:00,840
sent from to like aws functions or cloud

685
00:28:00,840 --> 00:28:04,000
functions and we'll notice that they are

686
00:28:04,000 --> 00:28:08,159
we we will see port 27001

687
00:28:08,159 --> 00:28:12,480
we'll also see the reds part 6379

688
00:28:12,480 --> 00:28:16,480
and uh these were these were

689
00:28:16,480 --> 00:28:20,399
often uh released out there

690
00:28:20,399 --> 00:28:22,799
not intended to be externally facing on

691
00:28:22,799 --> 00:28:23,679
the internet

692
00:28:23,679 --> 00:28:26,080
so a lot of times these databases may

693
00:28:26,080 --> 00:28:27,919
not have proper authentication

694
00:28:27,919 --> 00:28:31,039
or authentication item at all so once we

695
00:28:31,039 --> 00:28:32,480
find these we can use

696
00:28:32,480 --> 00:28:34,559
nmap or other scripts to try to connect

697
00:28:34,559 --> 00:28:37,440
to these um

698
00:28:42,840 --> 00:28:45,600
databases

699
00:28:45,600 --> 00:28:49,360
so now we're going to go into

700
00:28:49,360 --> 00:28:51,919
trying to um we're going to talk about

701
00:28:51,919 --> 00:28:53,919
amazon's um

702
00:28:53,919 --> 00:28:56,480
aws uh implementation of the cloud

703
00:28:56,480 --> 00:28:57,679
services

704
00:28:57,679 --> 00:29:01,600
so amazon has a amazon aim which is used

705
00:29:01,600 --> 00:29:02,960
for authentication

706
00:29:02,960 --> 00:29:05,279
authorization it's the identity access

707
00:29:05,279 --> 00:29:06,640
management

708
00:29:06,640 --> 00:29:09,120
uh mechanism of it you know it handles

709
00:29:09,120 --> 00:29:11,039
to permission policies

710
00:29:11,039 --> 00:29:14,720
allows access via api to various parts

711
00:29:14,720 --> 00:29:16,000
of the uh

712
00:29:16,000 --> 00:29:17,919
of the net or the system or the or the

713
00:29:17,919 --> 00:29:19,279
services

714
00:29:19,279 --> 00:29:22,320
um they offer group permissions and they

715
00:29:22,320 --> 00:29:22,799
offer

716
00:29:22,799 --> 00:29:26,399
federated services one thing uh

717
00:29:26,399 --> 00:29:29,520
we're going to go into here is how a um

718
00:29:29,520 --> 00:29:32,960
aim i i am is both

719
00:29:32,960 --> 00:29:34,880
role based has role based access

720
00:29:34,880 --> 00:29:36,080
controls and

721
00:29:36,080 --> 00:29:41,840
attribute based access controls

722
00:29:42,320 --> 00:29:44,240
so here are some quarks with the access

723
00:29:44,240 --> 00:29:45,440
controls and

724
00:29:45,440 --> 00:29:49,200
um and uh um and uh this was good this

725
00:29:49,200 --> 00:29:52,320
and aim excuse me

726
00:29:52,320 --> 00:29:55,279
so one thing that aim supports is a

727
00:29:55,279 --> 00:29:56,960
resource policy

728
00:29:56,960 --> 00:30:00,000
meaning that i if you explicitly give

729
00:30:00,000 --> 00:30:00,960
the

730
00:30:00,960 --> 00:30:04,000
give the uh permissions to the users

731
00:30:04,000 --> 00:30:06,399
say you explicitly in this example i

732
00:30:06,399 --> 00:30:08,320
explicitly gave jimmy the uh

733
00:30:08,320 --> 00:30:10,640
the permissions to list read write to

734
00:30:10,640 --> 00:30:12,240
the sv bucket

735
00:30:12,240 --> 00:30:14,720
but sarah she don't have permissions to

736
00:30:14,720 --> 00:30:16,559
the s3 bucket

737
00:30:16,559 --> 00:30:18,720
however the resource entry book can't

738
00:30:18,720 --> 00:30:20,399
have permission can have permissions on

739
00:30:20,399 --> 00:30:21,679
it themselves

740
00:30:21,679 --> 00:30:24,480
so even though i i as the military could

741
00:30:24,480 --> 00:30:26,080
explicitly have told sarah

742
00:30:26,080 --> 00:30:27,840
that she did not have permissions to

743
00:30:27,840 --> 00:30:30,240
this resource the resource could have

744
00:30:30,240 --> 00:30:31,360
been

745
00:30:31,360 --> 00:30:33,360
could have been somehow provisioned to

746
00:30:33,360 --> 00:30:34,880
have

747
00:30:34,880 --> 00:30:39,520
the um they have this on the um

748
00:30:39,520 --> 00:30:42,480
they have sarah on a resource so what

749
00:30:42,480 --> 00:30:43,200
what could happen

750
00:30:43,200 --> 00:30:46,799
oftentimes is it say sarah herself

751
00:30:46,799 --> 00:30:48,880
moved on for another uh department or

752
00:30:48,880 --> 00:30:50,640
another uh division

753
00:30:50,640 --> 00:30:54,720
and they took the resource off her name

754
00:30:54,720 --> 00:30:57,039
but it's still the what the permission

755
00:30:57,039 --> 00:30:58,799
offer name but the resource is still

756
00:30:58,799 --> 00:30:59,760
allowing

757
00:30:59,760 --> 00:31:02,840
for the permission for her to get into

758
00:31:02,840 --> 00:31:05,840
it

759
00:31:10,000 --> 00:31:12,159
so uh here's here are some other things

760
00:31:12,159 --> 00:31:13,679
like service policies

761
00:31:13,679 --> 00:31:16,000
lambda functions uh they have these

762
00:31:16,000 --> 00:31:18,480
policies on their own things and our own

763
00:31:18,480 --> 00:31:19,039
um

764
00:31:19,039 --> 00:31:22,159
instances and we

765
00:31:22,159 --> 00:31:23,919
so when we have these policies of

766
00:31:23,919 --> 00:31:25,840
service we we may be able to

767
00:31:25,840 --> 00:31:28,399
use one service as a pivot point to

768
00:31:28,399 --> 00:31:29,840
interact with another service

769
00:31:29,840 --> 00:31:32,480
function where the user does not really

770
00:31:32,480 --> 00:31:35,039
have access to that uh function so if

771
00:31:35,039 --> 00:31:35,600
say

772
00:31:35,600 --> 00:31:38,399
say there's a function that makes a uh a

773
00:31:38,399 --> 00:31:39,440
call to

774
00:31:39,440 --> 00:31:43,120
billing uh it's like a one-time use

775
00:31:43,120 --> 00:31:43,919
function

776
00:31:43,919 --> 00:31:47,440
now a user may may have access

777
00:31:47,440 --> 00:31:52,080
to um to that function

778
00:31:52,080 --> 00:31:53,840
but doesn't necessarily have access to

779
00:31:53,840 --> 00:31:55,679
billing so maybe a function could be

780
00:31:55,679 --> 00:31:58,320
maybe that user can leverage this

781
00:31:58,320 --> 00:31:59,279
function

782
00:31:59,279 --> 00:32:02,399
to access something else so

783
00:32:02,399 --> 00:32:04,799
uh this is this is one of the ways these

784
00:32:04,799 --> 00:32:06,240
these are

785
00:32:06,240 --> 00:32:08,480
these uh functions these permissions or

786
00:32:08,480 --> 00:32:10,080
these functions

787
00:32:10,080 --> 00:32:12,640
could be a way to pivot to another um

788
00:32:12,640 --> 00:32:15,840
aspect of the cloud

789
00:32:17,440 --> 00:32:20,159
so here is here is one we have for

790
00:32:20,159 --> 00:32:22,159
attribute

791
00:32:22,159 --> 00:32:25,600
based uh control so aws has a

792
00:32:25,600 --> 00:32:29,760
tag system so in this in this example

793
00:32:29,760 --> 00:32:32,640
um you have user jimmy he's tagged with

794
00:32:32,640 --> 00:32:33,279
the team

795
00:32:33,279 --> 00:32:36,720
he's tagged the group team and dolphins

796
00:32:36,720 --> 00:32:39,679
where sarah is team is in seahawks now

797
00:32:39,679 --> 00:32:41,039
the resource

798
00:32:41,039 --> 00:32:44,159
is is his here is tagged that with um

799
00:32:44,159 --> 00:32:47,519
going to a lot of seahawks team so

800
00:32:47,519 --> 00:32:50,880
it's already going to uh deny my team

801
00:32:50,880 --> 00:32:54,880
but uh allow sarah here

802
00:32:54,880 --> 00:32:58,000
uh what the one good thing about

803
00:32:58,000 --> 00:33:01,519
attribute attribute based um

804
00:33:01,519 --> 00:33:03,440
policy the way you administrators use

805
00:33:03,440 --> 00:33:05,279
them is that

806
00:33:05,279 --> 00:33:07,760
if they want to remove a lot of policies

807
00:33:07,760 --> 00:33:09,519
or add a lot of policies

808
00:33:09,519 --> 00:33:12,159
to assert to a certain user or a certain

809
00:33:12,159 --> 00:33:13,279
resource

810
00:33:13,279 --> 00:33:15,440
they could just add a tag there and if

811
00:33:15,440 --> 00:33:16,559
the tags are not

812
00:33:16,559 --> 00:33:19,039
there or not the tags are there they'll

813
00:33:19,039 --> 00:33:19,840
let them in

814
00:33:19,840 --> 00:33:21,600
the tag is not there then it won't let

815
00:33:21,600 --> 00:33:23,039
them in so

816
00:33:23,039 --> 00:33:26,480
this way um say if the

817
00:33:26,480 --> 00:33:28,960
in the last example where sarah went to

818
00:33:28,960 --> 00:33:31,200
another department or something

819
00:33:31,200 --> 00:33:33,200
if regardless if she went to another

820
00:33:33,200 --> 00:33:35,039
department if the tag is not there then

821
00:33:35,039 --> 00:33:39,840
that resource will not have that amen

822
00:33:42,000 --> 00:33:45,440
another thing that aws has is um user

823
00:33:45,440 --> 00:33:48,720
versioning so say

824
00:33:48,720 --> 00:33:51,519
say sarah went to say sarah went to

825
00:33:51,519 --> 00:33:52,799
another organization again and went to

826
00:33:52,799 --> 00:33:54,159
another apartment

827
00:33:54,159 --> 00:33:57,200
and now uh but her user still had what

828
00:33:57,200 --> 00:33:58,399
was called a set

829
00:33:58,399 --> 00:34:02,080
default policy on the user initially

830
00:34:02,080 --> 00:34:05,120
uh so what could happen is sarah will be

831
00:34:05,120 --> 00:34:07,120
sent to another apartment

832
00:34:07,120 --> 00:34:09,520
and she they'll probably re-permission

833
00:34:09,520 --> 00:34:10,320
her to go to

834
00:34:10,320 --> 00:34:12,960
this to have this department um have

835
00:34:12,960 --> 00:34:14,879
this apartment's uh permissions but not

836
00:34:14,879 --> 00:34:17,280
the last apartments of permission

837
00:34:17,280 --> 00:34:20,879
so what sarah can do if she wanted to go

838
00:34:20,879 --> 00:34:21,440
back

839
00:34:21,440 --> 00:34:24,879
and look at the last policy the last um

840
00:34:24,879 --> 00:34:27,280
the black permissions she could she

841
00:34:27,280 --> 00:34:29,280
could run the set default policy on

842
00:34:29,280 --> 00:34:30,639
herself

843
00:34:30,639 --> 00:34:33,199
through the awsc uh command and that

844
00:34:33,199 --> 00:34:35,119
will revert her to the old policy where

845
00:34:35,119 --> 00:34:36,239
she had the um

846
00:34:36,239 --> 00:34:39,119
the other um the older original policy

847
00:34:39,119 --> 00:34:40,639
and she could go back to old department

848
00:34:40,639 --> 00:34:42,159
information

849
00:34:42,159 --> 00:34:45,520
uh if you could find other users that

850
00:34:45,520 --> 00:34:47,599
have this set default policy

851
00:34:47,599 --> 00:34:50,239
on there we could potentially leverage

852
00:34:50,239 --> 00:34:51,440
this to get

853
00:34:51,440 --> 00:34:53,119
access to other areas that we didn't

854
00:34:53,119 --> 00:34:56,159
have access beforehand

855
00:35:00,640 --> 00:35:02,960
so this is something that uh i've

856
00:35:02,960 --> 00:35:04,240
exploited

857
00:35:04,240 --> 00:35:07,200
quite a lot in the past um and it's uh

858
00:35:07,200 --> 00:35:08,960
something that a lot of people

859
00:35:08,960 --> 00:35:12,400
who are developing on aws app or

860
00:35:12,400 --> 00:35:15,440
applications or struct services don't

861
00:35:15,440 --> 00:35:16,800
realize they have

862
00:35:16,800 --> 00:35:19,839
aws has an instant metadata data service

863
00:35:19,839 --> 00:35:22,000
it's basically like an api call where

864
00:35:22,000 --> 00:35:23,760
you it'll provide

865
00:35:23,760 --> 00:35:25,920
json information of the other running

866
00:35:25,920 --> 00:35:27,680
services right now

867
00:35:27,680 --> 00:35:31,440
uh so so basically like a serverless

868
00:35:31,440 --> 00:35:33,280
function like a lambda function could

869
00:35:33,280 --> 00:35:33,839
call

870
00:35:33,839 --> 00:35:36,720
this davis metadata service function to

871
00:35:36,720 --> 00:35:37,040
get

872
00:35:37,040 --> 00:35:39,599
a new session for itself based on its

873
00:35:39,599 --> 00:35:42,240
role or to see what's running on itself

874
00:35:42,240 --> 00:35:46,160
uh it's it's usu is only accessible to

875
00:35:46,160 --> 00:35:48,720
the ip addresses within the amazon

876
00:35:48,720 --> 00:35:49,839
instance

877
00:35:49,839 --> 00:35:53,520
and it usually always starts with

878
00:35:55,480 --> 00:35:57,200
169.254.169.254.

879
00:35:57,200 --> 00:36:00,320
um so what we what we

880
00:36:00,320 --> 00:36:01,440
are going to do is we're going to

881
00:36:01,440 --> 00:36:03,680
leverage other vulnerabilities to get

882
00:36:03,680 --> 00:36:06,800
access to this metadata service because

883
00:36:06,800 --> 00:36:08,240
this metadata service

884
00:36:08,240 --> 00:36:10,560
is what we're going to is is what we can

885
00:36:10,560 --> 00:36:12,079
use to get

886
00:36:12,079 --> 00:36:15,280
uh live credentials onto uh

887
00:36:15,280 --> 00:36:20,480
onto a um onto a certain resource

888
00:36:21,839 --> 00:36:24,400
so this is the typical structure one of

889
00:36:24,400 --> 00:36:26,320
the typical structures of this metadata

890
00:36:26,320 --> 00:36:27,119
service

891
00:36:27,119 --> 00:36:30,560
it is not documented by aws because they

892
00:36:30,560 --> 00:36:32,160
don't want the bad guys to really get

893
00:36:32,160 --> 00:36:32,640
this

894
00:36:32,640 --> 00:36:34,480
but it's it's basically what i call an

895
00:36:34,480 --> 00:36:36,560
open secret nowadays

896
00:36:36,560 --> 00:36:39,359
uh if you were if you were to go onto

897
00:36:39,359 --> 00:36:40,640
the aws

898
00:36:40,640 --> 00:36:43,760
or an amazon cloud uh into this into the

899
00:36:43,760 --> 00:36:44,640
network

900
00:36:44,640 --> 00:36:46,880
you're able to you you're able to call

901
00:36:46,880 --> 00:36:49,040
this uh url

902
00:36:49,040 --> 00:36:51,280
it will basically it will basically give

903
00:36:51,280 --> 00:36:52,160
you

904
00:36:52,160 --> 00:36:54,720
the live token right now they could use

905
00:36:54,720 --> 00:36:55,280
onto

906
00:36:55,280 --> 00:36:59,040
onto the service um we will see the

907
00:36:59,040 --> 00:37:00,000
username

908
00:37:00,000 --> 00:37:02,400
you'll see the password and the and the

909
00:37:02,400 --> 00:37:03,680
uh session with

910
00:37:03,680 --> 00:37:06,880
it with the service well

911
00:37:06,880 --> 00:37:08,480
what we're going to what what we want to

912
00:37:08,480 --> 00:37:11,680
do is once we get these informations

913
00:37:11,680 --> 00:37:14,800
we could actually use the amazon command

914
00:37:14,800 --> 00:37:17,359
line interface or the tool itself

915
00:37:17,359 --> 00:37:20,320
to create our own profiler or our own

916
00:37:20,320 --> 00:37:21,359
user

917
00:37:21,359 --> 00:37:24,160
to they'll access the service on its own

918
00:37:24,160 --> 00:37:25,680
and the reason why we do that

919
00:37:25,680 --> 00:37:27,760
is when we create our own user and our

920
00:37:27,760 --> 00:37:30,079
own profile

921
00:37:30,079 --> 00:37:32,240
that looks to have legitimate access

922
00:37:32,240 --> 00:37:33,599
it's gonna be real it's gonna be a

923
00:37:33,599 --> 00:37:34,640
little bit harder

924
00:37:34,640 --> 00:37:37,760
for the blue team to actually see that

925
00:37:37,760 --> 00:37:39,119
you know this was this was access

926
00:37:39,119 --> 00:37:40,640
because now it looks like a legitimate

927
00:37:40,640 --> 00:37:42,640
user's action this a permission user at

928
00:37:42,640 --> 00:37:44,160
that is accessing

929
00:37:44,160 --> 00:37:51,760
the um amazon instance

930
00:37:51,760 --> 00:37:53,599
so this was the um this is back on the

931
00:37:53,599 --> 00:37:55,280
serverless function

932
00:37:55,280 --> 00:37:56,800
uh where i mentioned this earlier these

933
00:37:56,800 --> 00:37:58,560
are basically uh they run once in their

934
00:37:58,560 --> 00:37:59,040
call

935
00:37:59,040 --> 00:38:02,320
and once needed uh these are basically

936
00:38:02,320 --> 00:38:04,400
service calls

937
00:38:04,400 --> 00:38:06,079
and i said we'll be able to use these

938
00:38:06,079 --> 00:38:08,240
functions to pivot

939
00:38:08,240 --> 00:38:11,118
to another point

940
00:38:16,079 --> 00:38:18,640
uh i want to get this slide to show you

941
00:38:18,640 --> 00:38:19,760
the difference to show you different

942
00:38:19,760 --> 00:38:21,440
terminology between

943
00:38:21,440 --> 00:38:24,400
aws and azure and i'm and you know and

944
00:38:24,400 --> 00:38:25,760
i'm using these two because these are

945
00:38:25,760 --> 00:38:26,079
the

946
00:38:26,079 --> 00:38:29,040
two prominent ones i've seen um there is

947
00:38:29,040 --> 00:38:29,920
also uh

948
00:38:29,920 --> 00:38:32,240
google cloud computing as well and

949
00:38:32,240 --> 00:38:34,079
alibaba's coming up with one of them

950
00:38:34,079 --> 00:38:35,359
but i haven't had much experience with

951
00:38:35,359 --> 00:38:37,119
them but these are terms that

952
00:38:37,119 --> 00:38:40,000
that we've all seen quite a lot but we

953
00:38:40,000 --> 00:38:41,119
could probably see a lot

954
00:38:41,119 --> 00:38:44,079
while doing um these testing or probably

955
00:38:44,079 --> 00:38:45,599
like even sign it into our own

956
00:38:45,599 --> 00:38:46,960
enterprises

957
00:38:46,960 --> 00:38:50,400
so you know we the ec2 for aws will

958
00:38:50,400 --> 00:38:52,400
become azure virtual machine

959
00:38:52,400 --> 00:38:54,320
the virtual public cloud becomes virtual

960
00:38:54,320 --> 00:38:57,839
network and so on so on

961
00:38:57,839 --> 00:39:01,839
so uh as you can see uh aws has

962
00:39:01,839 --> 00:39:06,240
aim where azure has active directory

963
00:39:06,240 --> 00:39:09,680
uh services or azure directory services

964
00:39:09,680 --> 00:39:10,880
which is different than

965
00:39:10,880 --> 00:39:12,560
the standard active directory services

966
00:39:12,560 --> 00:39:15,760
they see on an on-premise

967
00:39:15,760 --> 00:39:18,079
site

968
00:39:22,800 --> 00:39:25,920
okay so as i mentioned earlier one of

969
00:39:25,920 --> 00:39:28,720
the main entry points to uh cloud

970
00:39:28,720 --> 00:39:30,400
to the cloud infrastructure or any

971
00:39:30,400 --> 00:39:31,920
enterprises are

972
00:39:31,920 --> 00:39:35,040
our web applications and even

973
00:39:35,040 --> 00:39:37,760
web applications that access vpn such as

974
00:39:37,760 --> 00:39:38,720
cisco

975
00:39:38,720 --> 00:39:42,640
ssl vpns have web interfaces to access

976
00:39:42,640 --> 00:39:43,920
the internal network via a web

977
00:39:43,920 --> 00:39:45,040
application

978
00:39:45,040 --> 00:39:48,160
uh you know there are so we're going to

979
00:39:48,160 --> 00:39:50,000
use these types of um

980
00:39:50,000 --> 00:39:52,640
applications to leverage the leverage

981
00:39:52,640 --> 00:39:54,839
vulnerabilities to get further into the

982
00:39:54,839 --> 00:39:56,079
cloud

983
00:39:56,079 --> 00:39:58,320
i will i will show an example of how i

984
00:39:58,320 --> 00:39:59,520
use uh

985
00:39:59,520 --> 00:40:02,960
server side request forgery to actually

986
00:40:02,960 --> 00:40:03,760
get

987
00:40:03,760 --> 00:40:11,839
that metadata metadata service potential

988
00:40:12,079 --> 00:40:16,319
so uh last year during the engagement uh

989
00:40:16,319 --> 00:40:18,079
we were scanning an internal cloud and i

990
00:40:18,079 --> 00:40:19,839
noticed that

991
00:40:19,839 --> 00:40:22,319
we were kind of ip address range and we

992
00:40:22,319 --> 00:40:23,599
noticed that uh

993
00:40:23,599 --> 00:40:26,880
there was an instance of this graph on a

994
00:40:26,880 --> 00:40:27,599
cloud

995
00:40:27,599 --> 00:40:29,680
uh deployment we saw something like

996
00:40:29,680 --> 00:40:30,720
prometheus

997
00:40:30,720 --> 00:40:34,640
and other types of um

998
00:40:34,640 --> 00:40:36,480
metrics this was like a metrics

999
00:40:36,480 --> 00:40:38,880
reporting platform uh i didn't

1000
00:40:38,880 --> 00:40:40,880
i really don't know exactly what it what

1001
00:40:40,880 --> 00:40:42,560
it does i did from what i saw it looked

1002
00:40:42,560 --> 00:40:43,760
like it was like an

1003
00:40:43,760 --> 00:40:46,319
observation platform or it was

1004
00:40:46,319 --> 00:40:47,359
definitely some kind of reporting

1005
00:40:47,359 --> 00:40:49,599
platforms that system admins or

1006
00:40:49,599 --> 00:40:52,240
internal people use to basically gauge

1007
00:40:52,240 --> 00:40:54,560
the usage of the cloud

1008
00:40:54,560 --> 00:40:58,079
but we were we noticed that

1009
00:40:58,079 --> 00:41:00,800
uh there was a function there that that

1010
00:41:00,800 --> 00:41:01,119
uh

1011
00:41:01,119 --> 00:41:04,839
called another url so

1012
00:41:04,839 --> 00:41:07,839
what

1013
00:41:08,800 --> 00:41:12,240
mainly as open redirects i

1014
00:41:12,240 --> 00:41:15,680
i can now use it as basically

1015
00:41:15,680 --> 00:41:18,960
a service side request forgery so and so

1016
00:41:18,960 --> 00:41:20,400
it's in in this instance

1017
00:41:20,400 --> 00:41:23,040
instead of um re redirecting to an

1018
00:41:23,040 --> 00:41:24,079
arbitrary

1019
00:41:24,079 --> 00:41:27,680
um an arbitrary site i decided to

1020
00:41:27,680 --> 00:41:28,880
redirect it

1021
00:41:28,880 --> 00:41:33,520
onto something internal

1022
00:41:33,599 --> 00:41:36,720
so what i did was i decided to i noticed

1023
00:41:36,720 --> 00:41:37,119
that

1024
00:41:37,119 --> 00:41:39,200
i went to the vulnerability that was um

1025
00:41:39,200 --> 00:41:40,880
that was um

1026
00:41:40,880 --> 00:41:44,319
that was described here cve 2020

1027
00:41:44,319 --> 00:41:47,520
uh 1379. uh it described the server side

1028
00:41:47,520 --> 00:41:49,040
request forgery instance that

1029
00:41:49,040 --> 00:41:51,280
i'm going to uh describe to you right

1030
00:41:51,280 --> 00:41:53,359
now show you how it works

1031
00:41:53,359 --> 00:41:56,640
so what it did was it took

1032
00:41:56,640 --> 00:41:58,880
it took the the avatar parameter

1033
00:41:58,880 --> 00:42:01,280
anything after this avatar uh

1034
00:42:01,280 --> 00:42:03,920
session you could put anything in there

1035
00:42:03,920 --> 00:42:05,040
and

1036
00:42:05,040 --> 00:42:07,520
you could have it redirect to one site

1037
00:42:07,520 --> 00:42:08,319
and then

1038
00:42:08,319 --> 00:42:10,319
if you change that redirection to

1039
00:42:10,319 --> 00:42:11,599
another site

1040
00:42:11,599 --> 00:42:15,040
you can have it then go to the uh

1041
00:42:15,040 --> 00:42:19,920
the meta service the metadata service

1042
00:42:21,280 --> 00:42:24,000
which is uh what i've done over here i

1043
00:42:24,000 --> 00:42:24,720
was

1044
00:42:24,720 --> 00:42:27,839
i attached to the metadata service um ip

1045
00:42:27,839 --> 00:42:29,200
address onto

1046
00:42:29,200 --> 00:42:32,800
the redirect here and this was the

1047
00:42:32,800 --> 00:42:35,280
result

1048
00:42:38,400 --> 00:42:41,280
here we were able to get the access key

1049
00:42:41,280 --> 00:42:41,920
id

1050
00:42:41,920 --> 00:42:44,800
which is basically the user of the um of

1051
00:42:44,800 --> 00:42:45,280
the

1052
00:42:45,280 --> 00:42:49,040
other other application um

1053
00:42:49,040 --> 00:42:50,480
the secret access key which is like the

1054
00:42:50,480 --> 00:42:53,280
password and the live token

1055
00:42:53,280 --> 00:42:56,560
uh these tokens are used usually

1056
00:42:56,560 --> 00:42:59,839
by default are good for six hours

1057
00:42:59,839 --> 00:43:02,800
so if this token is not refreshed or

1058
00:43:02,800 --> 00:43:04,400
anything after six hours you could

1059
00:43:04,400 --> 00:43:06,319
always come back here

1060
00:43:06,319 --> 00:43:09,280
to leverage getting these credentials

1061
00:43:09,280 --> 00:43:09,760
again

1062
00:43:09,760 --> 00:43:13,040
these sessions and then um

1063
00:43:13,040 --> 00:43:14,640
creating a profile with it and

1064
00:43:14,640 --> 00:43:16,640
installing yourself onto

1065
00:43:16,640 --> 00:43:20,079
onto that um onto that um

1066
00:43:20,079 --> 00:43:22,480
service

1067
00:43:25,440 --> 00:43:28,720
so uh this was something i've seen uh in

1068
00:43:28,720 --> 00:43:29,200
a while

1069
00:43:29,200 --> 00:43:31,359
several times at something that is a

1070
00:43:31,359 --> 00:43:41,280
cork with aws

1071
00:43:41,280 --> 00:43:43,920
so one thing that's also that's uh often

1072
00:43:43,920 --> 00:43:46,079
overlooked while on deploying on

1073
00:43:46,079 --> 00:43:48,560
these these applications or services is

1074
00:43:48,560 --> 00:43:51,280
that they rely on api communications

1075
00:43:51,280 --> 00:43:54,480
and oftentimes these apis could be

1076
00:43:54,480 --> 00:43:56,240
overly permissive

1077
00:43:56,240 --> 00:43:58,880
to get information from other places so

1078
00:43:58,880 --> 00:44:00,720
they may want one api to call

1079
00:44:00,720 --> 00:44:04,400
billing to go call as well the same api

1080
00:44:04,400 --> 00:44:05,200
to go call

1081
00:44:05,200 --> 00:44:08,960
say provisioning or maybe

1082
00:44:08,960 --> 00:44:12,000
called you know some other department

1083
00:44:12,000 --> 00:44:15,119
so if you rely on certain apis that

1084
00:44:15,119 --> 00:44:16,400
could that could have

1085
00:44:16,400 --> 00:44:18,160
access to these sort of depart these

1086
00:44:18,160 --> 00:44:19,760
departments then you could you could

1087
00:44:19,760 --> 00:44:21,200
potentially use the same

1088
00:44:21,200 --> 00:44:24,480
session from the um api to go

1089
00:44:24,480 --> 00:44:27,760
access another a session it will access

1090
00:44:27,760 --> 00:44:29,040
another

1091
00:44:29,040 --> 00:44:32,319
resource so

1092
00:44:32,319 --> 00:44:34,880
one thing i found is if i were able to

1093
00:44:34,880 --> 00:44:36,319
get a token from uh

1094
00:44:36,319 --> 00:44:39,599
one api that called say billing i was

1095
00:44:39,599 --> 00:44:41,680
able to use that same token

1096
00:44:41,680 --> 00:44:43,040
via a user that didn't really have

1097
00:44:43,040 --> 00:44:45,200
access to provisioning to then provision

1098
00:44:45,200 --> 00:44:47,599
another user onto a system

1099
00:44:47,599 --> 00:44:49,440
so that is one example of how we could

1100
00:44:49,440 --> 00:44:51,599
uh have apis are exploded

1101
00:44:51,599 --> 00:44:53,839
what i've noticed in the wild often a

1102
00:44:53,839 --> 00:44:54,640
lot is that

1103
00:44:54,640 --> 00:44:57,839
apis are often overlooked

1104
00:44:57,839 --> 00:45:00,800
in this fashion i have often been i was

1105
00:45:00,800 --> 00:45:02,640
i was often able to

1106
00:45:02,640 --> 00:45:07,280
to um basically do you get information

1107
00:45:07,280 --> 00:45:10,240
um from these apis because the api

1108
00:45:10,240 --> 00:45:11,760
session itself

1109
00:45:11,760 --> 00:45:14,560
is uh is always valid and oftentimes

1110
00:45:14,560 --> 00:45:16,319
when you're using a web application that

1111
00:45:16,319 --> 00:45:19,359
has an api they they want to tie

1112
00:45:19,359 --> 00:45:22,160
a web application session to the client

1113
00:45:22,160 --> 00:45:23,200
or a gui

1114
00:45:23,200 --> 00:45:25,839
that calls the api and the api has its

1115
00:45:25,839 --> 00:45:27,680
own session

1116
00:45:27,680 --> 00:45:29,119
so while you're using whether you're

1117
00:45:29,119 --> 00:45:30,880
using the client or the

1118
00:45:30,880 --> 00:45:33,599
application you you yourself may think

1119
00:45:33,599 --> 00:45:35,200
that there's a roadblock

1120
00:45:35,200 --> 00:45:37,839
here like it may gray out all the

1121
00:45:37,839 --> 00:45:39,359
buttons for you

1122
00:45:39,359 --> 00:45:41,119
uh or might prevent a roadblock and

1123
00:45:41,119 --> 00:45:42,800
stuff but the api

1124
00:45:42,800 --> 00:45:45,040
has its own permissions on token so you

1125
00:45:45,040 --> 00:45:47,280
can still call you can still make a call

1126
00:45:47,280 --> 00:45:50,720
using an api token to to a service and

1127
00:45:50,720 --> 00:45:51,359
get the

1128
00:45:51,359 --> 00:45:54,160
results back in like a json response

1129
00:45:54,160 --> 00:45:54,960
instead of

1130
00:45:54,960 --> 00:45:57,839
uh instead of going through the gu going

1131
00:45:57,839 --> 00:46:00,079
through a web application gui

1132
00:46:00,079 --> 00:46:03,520
um and this is something that

1133
00:46:03,520 --> 00:46:06,240
uh is still being uh i still have to be

1134
00:46:06,240 --> 00:46:08,880
checked in across a lot of organizations

1135
00:46:08,880 --> 00:46:11,200
because um i've been able to gain a lot

1136
00:46:11,200 --> 00:46:12,800
of information from

1137
00:46:12,800 --> 00:46:16,240
platform like from lots of information a

1138
00:46:16,240 --> 00:46:17,839
lot of information

1139
00:46:17,839 --> 00:46:21,040
uh via api leakage and

1140
00:46:21,040 --> 00:46:24,640
improper access controls on apis and

1141
00:46:24,640 --> 00:46:27,440
a lot of functions in the cloud rely on

1142
00:46:27,440 --> 00:46:30,000
these apis where there's no gui

1143
00:46:30,000 --> 00:46:33,119
a server to server or aptitude app or a

1144
00:46:33,119 --> 00:46:34,319
functional function

1145
00:46:34,319 --> 00:46:37,440
and these apis are often

1146
00:46:37,440 --> 00:46:43,839
overly permissive

1147
00:46:44,160 --> 00:46:46,400
so that's the conclusion i have for this

1148
00:46:46,400 --> 00:46:47,359
right here um

1149
00:46:47,359 --> 00:46:49,839
i will i want to open up for more

1150
00:46:49,839 --> 00:46:51,359
questions and answers

1151
00:46:51,359 --> 00:46:54,480
um i didn't want to go get too technical

1152
00:46:54,480 --> 00:46:55,359
into the uh

1153
00:46:55,359 --> 00:46:57,119
into this and given too many technical

1154
00:46:57,119 --> 00:46:58,480
details because i could figure that

1155
00:46:58,480 --> 00:46:59,280
might

1156
00:46:59,280 --> 00:47:02,160
be too boring or too excessive but i

1157
00:47:02,160 --> 00:47:02,480
will

1158
00:47:02,480 --> 00:47:05,920
um i'm open to any questions or

1159
00:47:05,920 --> 00:47:08,480
or statements you have regarding

1160
00:47:08,480 --> 00:47:10,960
enterprise testing

1161
00:47:10,960 --> 00:47:14,400
or cloud-based testing

1162
00:47:17,280 --> 00:47:20,240
what do you think is next oh sorry yeah

1163
00:47:20,240 --> 00:47:20,960
go ahead

1164
00:47:20,960 --> 00:47:24,319
go ahead sorry i got ahead of myself

1165
00:47:24,319 --> 00:47:25,760
this is just like an interesting topic

1166
00:47:25,760 --> 00:47:26,240
to me

1167
00:47:26,240 --> 00:47:29,119
so what do you think is next uh for um

1168
00:47:29,119 --> 00:47:32,720
enterprise penetration testing in cloud

1169
00:47:32,720 --> 00:47:35,920
well i see i see a lot of organization

1170
00:47:35,920 --> 00:47:36,640
going

1171
00:47:36,640 --> 00:47:39,920
uh towards azure a lot more in aws

1172
00:47:39,920 --> 00:47:42,880
what's going on next is you know as

1173
00:47:42,880 --> 00:47:43,920
we're getting more

1174
00:47:43,920 --> 00:47:48,319
and more uh resources into it we're

1175
00:47:48,319 --> 00:47:48,960
going to see

1176
00:47:48,960 --> 00:47:51,119
we're going to see a lot of um

1177
00:47:51,119 --> 00:47:52,240
configuration spun

1178
00:47:52,240 --> 00:47:54,480
up and we're gonna see a lot of these

1179
00:47:54,480 --> 00:47:56,400
similar things i just demonstrated here

1180
00:47:56,400 --> 00:47:59,680
with the metadata service um

1181
00:47:59,680 --> 00:48:03,280
exposed so i expect um maybe later down

1182
00:48:03,280 --> 00:48:04,319
online

1183
00:48:04,319 --> 00:48:06,640
uh they're gonna close they're gonna

1184
00:48:06,640 --> 00:48:09,040
have more defaults and more secure

1185
00:48:09,040 --> 00:48:12,240
uh but i do see a lot more uh

1186
00:48:12,240 --> 00:48:14,640
people probably going to a google cloud

1187
00:48:14,640 --> 00:48:15,920
um

1188
00:48:15,920 --> 00:48:18,319
platform as well alibaba might make a

1189
00:48:18,319 --> 00:48:19,680
stake in uh chinese

1190
00:48:19,680 --> 00:48:22,880
environments uh chinese companies

1191
00:48:22,880 --> 00:48:24,319
uh they're already starting to have

1192
00:48:24,319 --> 00:48:26,319
their own cloud services there and they

1193
00:48:26,319 --> 00:48:27,040
look a lot

1194
00:48:27,040 --> 00:48:29,680
i believe a lot like uh google cloud

1195
00:48:29,680 --> 00:48:31,760
computing services

1196
00:48:31,760 --> 00:48:35,680
uh but i i do see more organizations

1197
00:48:35,680 --> 00:48:38,000
going from going towards more of a

1198
00:48:38,000 --> 00:48:39,440
hybrid model

1199
00:48:39,440 --> 00:48:42,480
or where to have on-prem stuff and uh

1200
00:48:42,480 --> 00:48:43,680
cloud stuff

1201
00:48:43,680 --> 00:48:46,720
to even more flat out of a cloud-based

1202
00:48:46,720 --> 00:48:47,200
model

1203
00:48:47,200 --> 00:48:48,559
and i do see you're going to see us a

1204
00:48:48,559 --> 00:48:52,000
lot more in the future

1205
00:48:54,240 --> 00:48:57,760
as a follow-up um do you see

1206
00:48:57,760 --> 00:49:01,680
um organizations kind of outsourcing

1207
00:49:01,680 --> 00:49:04,240
this kind of penetration testing as i've

1208
00:49:04,240 --> 00:49:06,000
been seeing has been trending where like

1209
00:49:06,000 --> 00:49:08,000
you might have like a pm

1210
00:49:08,000 --> 00:49:12,079
that you know manages a few people that

1211
00:49:12,079 --> 00:49:15,280
are in a team but aren't on on

1212
00:49:15,280 --> 00:49:18,400
even on this in the same country um does

1213
00:49:18,400 --> 00:49:18,800
that

1214
00:49:18,800 --> 00:49:22,800
is that something you see happening um

1215
00:49:22,800 --> 00:49:26,000
so i so

1216
00:49:26,000 --> 00:49:28,000
i i've seen it happen this this is how

1217
00:49:28,000 --> 00:49:29,280
i've seen it in my

1218
00:49:29,280 --> 00:49:32,559
in my field um where i work at where i

1219
00:49:32,559 --> 00:49:33,920
work uh they have me

1220
00:49:33,920 --> 00:49:36,720
uh do uh pen testing on enterprise and

1221
00:49:36,720 --> 00:49:38,079
under look enterprise or internal

1222
00:49:38,079 --> 00:49:39,440
systems a lot

1223
00:49:39,440 --> 00:49:41,760
um they have me uh see if i could do

1224
00:49:41,760 --> 00:49:43,520
ransomware or stuff like that

1225
00:49:43,520 --> 00:49:46,000
or anything against the cloud they also

1226
00:49:46,000 --> 00:49:47,359
hire third party

1227
00:49:47,359 --> 00:49:51,119
um vendors to go do

1228
00:49:51,119 --> 00:49:55,359
uh assessments as well uh

1229
00:49:55,359 --> 00:49:58,720
vendors such as ibm mandy and uh

1230
00:49:58,720 --> 00:50:02,000
they i've seen them um

1231
00:50:02,000 --> 00:50:03,359
i've actually over i've actually

1232
00:50:03,359 --> 00:50:05,119
overlooked them doing the testing as

1233
00:50:05,119 --> 00:50:06,079
well

1234
00:50:06,079 --> 00:50:09,599
uh and i i see them come across all

1235
00:50:09,599 --> 00:50:11,200
they use testers from all across the

1236
00:50:11,200 --> 00:50:12,800
world sometimes um

1237
00:50:12,800 --> 00:50:15,680
of my team i have i have testers in

1238
00:50:15,680 --> 00:50:16,880
other countries i have a tester in

1239
00:50:16,880 --> 00:50:17,920
canada

1240
00:50:17,920 --> 00:50:22,240
um as well um i don't really think

1241
00:50:22,240 --> 00:50:25,440
that really makes any of any difference

1242
00:50:25,440 --> 00:50:28,880
um the actual work that's being put into

1243
00:50:28,880 --> 00:50:31,119
or what resources don't come out of it

1244
00:50:31,119 --> 00:50:34,559
but i do see uh more requests

1245
00:50:34,559 --> 00:50:36,800
being done for these types of testing

1246
00:50:36,800 --> 00:50:37,760
especially

1247
00:50:37,760 --> 00:50:39,839
on their implementation of certain

1248
00:50:39,839 --> 00:50:40,960
instances so

1249
00:50:40,960 --> 00:50:43,599
i have seen uh calls a lot of people

1250
00:50:43,599 --> 00:50:44,079
making

1251
00:50:44,079 --> 00:50:47,359
requests for office 360 testing or

1252
00:50:47,359 --> 00:50:50,240
or their own uh their own sharepoint

1253
00:50:50,240 --> 00:50:51,040
text

1254
00:50:51,040 --> 00:50:54,160
testing or their an implementation

1255
00:50:54,160 --> 00:50:57,520
of things i've seen that a lot and i i

1256
00:50:57,520 --> 00:51:00,800
see i say i um it's a pretty big selling

1257
00:51:00,800 --> 00:51:01,839
point

1258
00:51:01,839 --> 00:51:04,000
for a lot of uh these third-party

1259
00:51:04,000 --> 00:51:05,119
testers too uh

1260
00:51:05,119 --> 00:51:06,800
when i when i talk to them and have a

1261
00:51:06,800 --> 00:51:08,400
conversation with them

1262
00:51:08,400 --> 00:51:10,480
uh they they uh they have to have

1263
00:51:10,480 --> 00:51:11,920
multiple uh

1264
00:51:11,920 --> 00:51:15,119
uh testers or people on it and i've even

1265
00:51:15,119 --> 00:51:16,880
seen these engagements go up

1266
00:51:16,880 --> 00:51:19,599
to be up to about three months long so

1267
00:51:19,599 --> 00:51:20,480
some of the engagements

1268
00:51:20,480 --> 00:51:22,480
if a full red team assessment that

1269
00:51:22,480 --> 00:51:25,359
includes social engineering and stuff

1270
00:51:25,359 --> 00:51:29,280
so i definitely see um

1271
00:51:29,280 --> 00:51:32,720
this being uh sent to internal teams a

1272
00:51:32,720 --> 00:51:33,200
lot

1273
00:51:33,200 --> 00:51:35,119
for certain things and and being

1274
00:51:35,119 --> 00:51:37,200
outsourced to third parties

1275
00:51:37,200 --> 00:51:41,439
as well just for some expertise in it

1276
00:51:42,640 --> 00:51:51,839
thank you

1277
00:51:52,480 --> 00:51:55,520
i guess i can keep asking questions okay

1278
00:51:55,520 --> 00:51:57,440
so what are some of the juiciest bugs

1279
00:51:57,440 --> 00:51:58,640
you've seen

1280
00:51:58,640 --> 00:52:00,559
um besides some of the i guess the more

1281
00:52:00,559 --> 00:52:02,400
common ones that you just showed us

1282
00:52:02,400 --> 00:52:06,079
um that you've been able to discover

1283
00:52:06,800 --> 00:52:10,710
so um let's see

1284
00:52:10,710 --> 00:52:13,680
[Music]

1285
00:52:13,680 --> 00:52:18,559
so i was able to exploit um uh

1286
00:52:18,559 --> 00:52:21,920
identify identity access management

1287
00:52:21,920 --> 00:52:25,520
of uh of a customer

1288
00:52:25,520 --> 00:52:29,760
from from enterprise uh basically uh

1289
00:52:29,760 --> 00:52:32,000
i was able to pivot from a customer's

1290
00:52:32,000 --> 00:52:33,200
like uh

1291
00:52:33,200 --> 00:52:36,720
ap access token to get into

1292
00:52:36,720 --> 00:52:39,920
um essentially

1293
00:52:39,920 --> 00:52:44,240
a uh a customer care representative

1294
00:52:44,240 --> 00:52:46,880
terminal from the make from the outside

1295
00:52:46,880 --> 00:52:48,079
from base

1296
00:52:48,079 --> 00:52:51,119
basically from the um from the external

1297
00:52:51,119 --> 00:52:53,760
facing website uh i'll give the example

1298
00:52:53,760 --> 00:52:56,079
of a

1299
00:52:56,559 --> 00:52:59,040
a tesla.com it wasn't tesla.com let's

1300
00:52:59,040 --> 00:53:00,800
get a good example

1301
00:53:00,800 --> 00:53:02,640
uh from the central tracy's website

1302
00:53:02,640 --> 00:53:04,079
tesla.com

1303
00:53:04,079 --> 00:53:07,920
i was able to uh use the api information

1304
00:53:07,920 --> 00:53:09,680
the api

1305
00:53:09,680 --> 00:53:13,520
calls from the iam to go pull records

1306
00:53:13,520 --> 00:53:15,680
from the uh because from basically the

1307
00:53:15,680 --> 00:53:16,800
building department

1308
00:53:16,800 --> 00:53:20,319
as my own user uh basically via the

1309
00:53:20,319 --> 00:53:23,680
uh exploiting the improper controls over

1310
00:53:23,680 --> 00:53:26,800
a iam um

1311
00:53:26,800 --> 00:53:28,559
i was able uh i thought that was quite

1312
00:53:28,559 --> 00:53:30,000
interesting because at that point i was

1313
00:53:30,000 --> 00:53:30,800
able to get

1314
00:53:30,800 --> 00:53:34,319
a full info just by um

1315
00:53:34,319 --> 00:53:38,000
enumerating customer ids

1316
00:53:38,000 --> 00:53:39,440
uh and i thought that was quite

1317
00:53:39,440 --> 00:53:41,520
interesting to do and what was also

1318
00:53:41,520 --> 00:53:42,880
interesting was that when i was able to

1319
00:53:42,880 --> 00:53:44,240
do that

1320
00:53:44,240 --> 00:53:47,760
uh it didn't look like it was a

1321
00:53:47,760 --> 00:53:49,280
like a bad request it looked like a

1322
00:53:49,280 --> 00:53:52,160
legitimate request

1323
00:53:52,960 --> 00:53:54,960
so i was able to work with the

1324
00:53:54,960 --> 00:53:57,680
development team or the um

1325
00:53:57,680 --> 00:53:59,040
that development team i was actually

1326
00:53:59,040 --> 00:54:00,640
able to work with the stock right then

1327
00:54:00,640 --> 00:54:02,079
and there to have it fixed right away

1328
00:54:02,079 --> 00:54:03,200
because i was able to actually get

1329
00:54:03,200 --> 00:54:05,040
credit card numbers and

1330
00:54:05,040 --> 00:54:07,040
a lot of pii information that we

1331
00:54:07,040 --> 00:54:08,800
shouldn't have gotten and we closed that

1332
00:54:08,800 --> 00:54:09,760
bug down

1333
00:54:09,760 --> 00:54:12,640
within about 30 minutes so i was able to

1334
00:54:12,640 --> 00:54:13,280
get that

1335
00:54:13,280 --> 00:54:15,599
uh pretty quickly it was quite quite

1336
00:54:15,599 --> 00:54:24,079
scary too

1337
00:54:24,079 --> 00:54:26,800
for your aws trick i thought 80 of aws

1338
00:54:26,800 --> 00:54:28,800
version that api so you could get a new

1339
00:54:28,800 --> 00:54:30,240
version where

1340
00:54:30,240 --> 00:54:31,839
the first time their damon started on

1341
00:54:31,839 --> 00:54:33,839
the virtual machine it pulled a one-time

1342
00:54:33,839 --> 00:54:34,880
token

1343
00:54:34,880 --> 00:54:37,440
and if that damon ever died you could

1344
00:54:37,440 --> 00:54:39,599
never access that internal api

1345
00:54:39,599 --> 00:54:41,839
again

1346
00:54:43,599 --> 00:54:46,400
what was that like is that is that is

1347
00:54:46,400 --> 00:54:48,559
that something you've seen

1348
00:54:48,559 --> 00:54:50,079
i thought it was something they did

1349
00:54:50,079 --> 00:54:52,640
already but i'd have to find a url or

1350
00:54:52,640 --> 00:54:54,480
something referencing it

1351
00:54:54,480 --> 00:54:56,559
because i'm tired of people going after

1352
00:54:56,559 --> 00:54:57,520
that

1353
00:54:57,520 --> 00:54:59,040
yeah so they they have tried they have

1354
00:54:59,040 --> 00:55:00,559
tried to do that in version two

1355
00:55:00,559 --> 00:55:04,400
and version two but uh

1356
00:55:04,400 --> 00:55:08,079
uh so the way what what happened is they

1357
00:55:08,079 --> 00:55:08,400
uh

1358
00:55:08,400 --> 00:55:10,400
they tried they they didn't invert it

1359
00:55:10,400 --> 00:55:12,000
through they tried to uh what they did

1360
00:55:12,000 --> 00:55:13,520
that we said

1361
00:55:13,520 --> 00:55:16,640
but um i was still able to see this in

1362
00:55:16,640 --> 00:55:17,680
the wild

1363
00:55:17,680 --> 00:55:20,000
and i still use the same old methods um

1364
00:55:20,000 --> 00:55:21,040
i was i was um

1365
00:55:21,040 --> 00:55:23,359
still gonna do it every i was all i did

1366
00:55:23,359 --> 00:55:24,799
was i created a profile

1367
00:55:24,799 --> 00:55:26,640
and i made it i kept on calling that

1368
00:55:26,640 --> 00:55:30,559
call and it still gave me a new token

1369
00:55:30,559 --> 00:55:32,480
i haven't actually seen it implemented

1370
00:55:32,480 --> 00:55:34,240
but it would stop me from that in a

1371
00:55:34,240 --> 00:55:36,720
while yeah

1372
00:55:40,640 --> 00:55:44,400
here's a another question that if you if

1373
00:55:44,400 --> 00:55:45,599
you have any resources

1374
00:55:45,599 --> 00:55:49,200
for exploiting aws api vulnerabilities

1375
00:55:49,200 --> 00:55:52,799
or any white papers you can recommend

1376
00:55:52,799 --> 00:55:56,240
um so

1377
00:55:56,240 --> 00:55:57,760
there's a resource i got for this

1378
00:55:57,760 --> 00:55:59,520
orientation i got from the uh

1379
00:55:59,520 --> 00:56:02,160
i already got from sans uh their cloud

1380
00:56:02,160 --> 00:56:03,280
computing training

1381
00:56:03,280 --> 00:56:06,720
um other resources um

1382
00:56:06,720 --> 00:56:08,400
i don't really know the top of my head

1383
00:56:08,400 --> 00:56:11,920
right now um

1384
00:56:11,920 --> 00:56:13,920
which chance one the one that moses

1385
00:56:13,920 --> 00:56:15,920
teaches yeah the one of moses uh

1386
00:56:15,920 --> 00:56:16,640
teachers yeah

1387
00:56:16,640 --> 00:56:19,839
oh that's awesome yeah guys moses is

1388
00:56:19,839 --> 00:56:22,799
sometimes and the discord or slack so

1389
00:56:22,799 --> 00:56:24,000
you can actually reach out to him

1390
00:56:24,000 --> 00:56:25,520
directly that's awesome

1391
00:56:25,520 --> 00:56:28,480
what's the the the number of the course

1392
00:56:28,480 --> 00:56:30,400
it's a 588

1393
00:56:30,400 --> 00:56:34,160
588 awesome right so um

1394
00:56:34,160 --> 00:56:36,720
uh i i so like i i gave so what the

1395
00:56:36,720 --> 00:56:39,200
distribution i gave basically um

1396
00:56:39,200 --> 00:56:41,200
a portion of that that training i

1397
00:56:41,200 --> 00:56:42,400
condensed it a lot i didn't want to

1398
00:56:42,400 --> 00:56:43,280
completely like

1399
00:56:43,280 --> 00:56:45,920
rip this stuff off as well but i i also

1400
00:56:45,920 --> 00:56:46,640
put in

1401
00:56:46,640 --> 00:56:49,520
my experiences with actual testing of

1402
00:56:49,520 --> 00:56:50,480
enterprises

1403
00:56:50,480 --> 00:56:52,960
and uh cloud-based systems and in my

1404
00:56:52,960 --> 00:56:53,760
experience

1405
00:56:53,760 --> 00:56:56,240
um i was actually surprised because like

1406
00:56:56,240 --> 00:56:58,000
when i was testing cloud-based system

1407
00:56:58,000 --> 00:56:59,200
before i took the

1408
00:56:59,200 --> 00:57:01,599
before i took this training and when i

1409
00:57:01,599 --> 00:57:02,240
saw

1410
00:57:02,240 --> 00:57:04,799
uh that metadata service thing uh in a

1411
00:57:04,799 --> 00:57:06,160
while like that

1412
00:57:06,160 --> 00:57:08,720
um and i saw it it was basically a

1413
00:57:08,720 --> 00:57:11,359
textbook example in the training itself

1414
00:57:11,359 --> 00:57:13,920
uh so i i thought that was kind of funny

1415
00:57:13,920 --> 00:57:15,119
to see that

1416
00:57:15,119 --> 00:57:18,240
so uh but i i was i was able to

1417
00:57:18,240 --> 00:57:20,559
the stuff i've got from really api

1418
00:57:20,559 --> 00:57:22,400
testing and everything i was i got

1419
00:57:22,400 --> 00:57:25,359
all the um my training just by hands-on

1420
00:57:25,359 --> 00:57:27,839
testing

1421
00:57:32,640 --> 00:57:34,559
it's pretty good any ctfs that you know

1422
00:57:34,559 --> 00:57:35,839
of there was a question

1423
00:57:35,839 --> 00:57:39,119
before um

1424
00:57:39,119 --> 00:57:41,359
no cts that i already know of i haven't

1425
00:57:41,359 --> 00:57:42,240
i haven't really

1426
00:57:42,240 --> 00:57:44,400
uh followed ct i followed ctf my last

1427
00:57:44,400 --> 00:57:46,880
two years

1428
00:57:47,359 --> 00:57:49,920
like my cts have been you know they give

1429
00:57:49,920 --> 00:57:51,520
they've given me a real life one so i

1430
00:57:51,520 --> 00:57:52,799
haven't really

1431
00:57:52,799 --> 00:57:54,960
i

1432
00:57:56,160 --> 00:57:59,680
here's another question yes yes

1433
00:57:59,680 --> 00:58:01,839
clients actually follow the rules a lot

1434
00:58:01,839 --> 00:58:02,960
of these will go away

1435
00:58:02,960 --> 00:58:04,480
i mean if the developers follow the

1436
00:58:04,480 --> 00:58:06,559
rules a lot of these will go away too

1437
00:58:06,559 --> 00:58:09,280
uh but you know but things that wouldn't

1438
00:58:09,280 --> 00:58:10,640
go away

1439
00:58:10,640 --> 00:58:13,760
are inherent or inherent things such as

1440
00:58:13,760 --> 00:58:16,880
um for instance if uh if if

1441
00:58:16,880 --> 00:58:20,079
they still had uh resource policies

1442
00:58:20,079 --> 00:58:21,920
where they their policy allowed of the

1443
00:58:21,920 --> 00:58:22,400
person

1444
00:58:22,400 --> 00:58:24,960
explicitly go into it that could still

1445
00:58:24,960 --> 00:58:25,920
allow things

1446
00:58:25,920 --> 00:58:27,440
and if someone actually knows the

1447
00:58:27,440 --> 00:58:29,119
command line tool of

1448
00:58:29,119 --> 00:58:31,599
aws they could even though everything is

1449
00:58:31,599 --> 00:58:33,440
set up properly and you did everything

1450
00:58:33,440 --> 00:58:34,960
right you could still

1451
00:58:34,960 --> 00:58:37,359
get a compromise say if i was able to

1452
00:58:37,359 --> 00:58:39,839
steal somebody's password

1453
00:58:39,839 --> 00:58:43,440
or um or a system

1454
00:58:43,440 --> 00:58:47,200
and as i said like um 90

1455
00:58:47,200 --> 00:58:49,599
of the infiltration that i've seen in a

1456
00:58:49,599 --> 00:58:50,319
while

1457
00:58:50,319 --> 00:58:53,040
has been straight up fishing and social

1458
00:58:53,040 --> 00:58:55,520
engineering

1459
00:58:55,520 --> 00:58:57,119
one of the most recent phishing

1460
00:58:57,119 --> 00:58:59,920
campaigns that i see was successful

1461
00:58:59,920 --> 00:59:03,280
was they used a toastmasters template

1462
00:59:03,280 --> 00:59:05,280
to get to get some toastmasters people

1463
00:59:05,280 --> 00:59:06,799
to go click something

1464
00:59:06,799 --> 00:59:09,680
so you know it could even be you know

1465
00:59:09,680 --> 00:59:11,040
groups that you're part of that

1466
00:59:11,040 --> 00:59:13,440
they could go fish a template out other

1467
00:59:13,440 --> 00:59:15,599
uh social engineering aspects that i've

1468
00:59:15,599 --> 00:59:17,280
seen in a while are

1469
00:59:17,280 --> 00:59:20,480
um you know linkedin

1470
00:59:20,480 --> 00:59:22,319
linkedin on recruiters trying to send

1471
00:59:22,319 --> 00:59:24,079
you a document

1472
00:59:24,079 --> 00:59:26,559
to go safe to go she they go show them

1473
00:59:26,559 --> 00:59:27,839
oh here's a new offer

1474
00:59:27,839 --> 00:59:29,280
you know you have some nice pretty lady

1475
00:59:29,280 --> 00:59:31,040
on linkedin showing you some offers or

1476
00:59:31,040 --> 00:59:31,680
something

1477
00:59:31,680 --> 00:59:33,440
you click it potentially on your work

1478
00:59:33,440 --> 00:59:35,359
computer and now that that could be

1479
00:59:35,359 --> 00:59:38,960
a source of infection right there

1480
00:59:41,119 --> 00:59:44,000
james in your experience um you know i'm

1481
00:59:44,000 --> 00:59:45,119
working with some of those other

1482
00:59:45,119 --> 00:59:46,000
companies that have

1483
00:59:46,000 --> 00:59:48,240
also done testing alongside you and your

1484
00:59:48,240 --> 00:59:49,599
company

1485
00:59:49,599 --> 00:59:52,640
what um what what did you find

1486
00:59:52,640 --> 00:59:54,640
uh if you had any knowledge to what they

1487
00:59:54,640 --> 00:59:56,960
found versus what you found and what was

1488
00:59:56,960 --> 00:59:58,640
you know who found more and tell us

1489
00:59:58,640 --> 01:00:00,400
about that

1490
01:00:00,400 --> 01:00:04,480
so so in my experience um

1491
01:00:04,480 --> 01:00:07,359
i've been i've mainly been on par with

1492
01:00:07,359 --> 01:00:08,000
the um

1493
01:00:08,000 --> 01:00:10,880
third-party testing uh or i've i've

1494
01:00:10,880 --> 01:00:11,760
often

1495
01:00:11,760 --> 01:00:13,280
a lot of times i've found a little bit

1496
01:00:13,280 --> 01:00:15,520
more than they have they have found

1497
01:00:15,520 --> 01:00:18,400
uh one reasoning behind that and that uh

1498
01:00:18,400 --> 01:00:20,000
a lot that my managers and

1499
01:00:20,000 --> 01:00:22,400
people have told me is that because i'm

1500
01:00:22,400 --> 01:00:24,079
internal i have more

1501
01:00:24,079 --> 01:00:27,520
i have more at stake to do a better job

1502
01:00:27,520 --> 01:00:29,680
and finding stuff than say a third party

1503
01:00:29,680 --> 01:00:30,799
because you know

1504
01:00:30,799 --> 01:00:33,119
third party probably won't care as much

1505
01:00:33,119 --> 01:00:34,640
as as much as somebody

1506
01:00:34,640 --> 01:00:38,079
internal to it so however

1507
01:00:38,079 --> 01:00:41,839
um you know i have seen some novel

1508
01:00:41,839 --> 01:00:42,559
things that there

1509
01:00:42,559 --> 01:00:45,359
some third party has done so i have seen

1510
01:00:45,359 --> 01:00:45,760
uh

1511
01:00:45,760 --> 01:00:49,839
ibm for instance they were able to write

1512
01:00:49,839 --> 01:00:53,520
a uh their own tool to extract

1513
01:00:53,520 --> 01:00:56,559
uh symantec vip tokens once they were

1514
01:00:56,559 --> 01:00:57,359
able to uh

1515
01:00:57,359 --> 01:01:00,559
access a client uh in real time

1516
01:01:00,559 --> 01:01:02,400
and then they're able to access or

1517
01:01:02,400 --> 01:01:04,880
access the vip tokens from memory as

1518
01:01:04,880 --> 01:01:06,000
well

1519
01:01:06,000 --> 01:01:07,680
uh i thought that was a pretty novel

1520
01:01:07,680 --> 01:01:09,280
thing that they actually wrote a whole

1521
01:01:09,280 --> 01:01:11,280
tool to exploit that uh

1522
01:01:11,280 --> 01:01:13,920
that vip uh access the samantha vip

1523
01:01:13,920 --> 01:01:15,040
token

1524
01:01:15,040 --> 01:01:18,400
um but uh i would say uh

1525
01:01:18,400 --> 01:01:20,799
you know i was i i was actually quite

1526
01:01:20,799 --> 01:01:22,160
surprised sometimes

1527
01:01:22,160 --> 01:01:24,000
a little bit disappointed that i really

1528
01:01:24,000 --> 01:01:26,079
so a few times

1529
01:01:26,079 --> 01:01:29,119
i um i've i've hired

1530
01:01:29,119 --> 01:01:31,359
some third-party testers or third-party

1531
01:01:31,359 --> 01:01:32,319
vendors

1532
01:01:32,319 --> 01:01:34,240
to do some assessment hoping to find

1533
01:01:34,240 --> 01:01:35,440
something novel

1534
01:01:35,440 --> 01:01:37,200
that they've done and i haven't really

1535
01:01:37,200 --> 01:01:40,000
seen much um

1536
01:01:40,000 --> 01:01:41,599
anything more novel than what i just

1537
01:01:41,599 --> 01:01:43,119
showed you right here

1538
01:01:43,119 --> 01:01:47,200
um and even even even when i do it i i

1539
01:01:47,200 --> 01:01:49,520
still pull out a lot of things so

1540
01:01:49,520 --> 01:01:51,040
i mean i was quite surprised a lot of

1541
01:01:51,040 --> 01:01:53,040
things that i think should be easily

1542
01:01:53,040 --> 01:01:53,680
fixed

1543
01:01:53,680 --> 01:01:55,520
that you know by basic security are

1544
01:01:55,520 --> 01:01:57,440
still out there and easily

1545
01:01:57,440 --> 01:02:00,079
exploited

1546
01:02:03,200 --> 01:02:07,200
also i i've also had experiences where

1547
01:02:07,200 --> 01:02:10,799
um a third-party vendor

1548
01:02:10,799 --> 01:02:13,760
did not do their job when i first came

1549
01:02:13,760 --> 01:02:14,319
to

1550
01:02:14,319 --> 01:02:16,640
an organization they were hiring a

1551
01:02:16,640 --> 01:02:18,319
third-party vendor

1552
01:02:18,319 --> 01:02:20,960
where all they really did was ran a scan

1553
01:02:20,960 --> 01:02:22,960
and printed out the result

1554
01:02:22,960 --> 01:02:24,799
didn't even go over to scan for false

1555
01:02:24,799 --> 01:02:26,079
politics or anything

1556
01:02:26,079 --> 01:02:28,160
and they charged the organization 100

1557
01:02:28,160 --> 01:02:29,680
grand for that

1558
01:02:29,680 --> 01:02:32,480
um and i thought that was appalling and

1559
01:02:32,480 --> 01:02:34,160
i came in there i was

1560
01:02:34,160 --> 01:02:36,160
i did i did the same test i found so

1561
01:02:36,160 --> 01:02:37,760
many things wrong that they had to fix

1562
01:02:37,760 --> 01:02:39,119
right away

1563
01:02:39,119 --> 01:02:42,400
so it's also has to come on the

1564
01:02:42,400 --> 01:02:44,559
awareness of the organization

1565
01:02:44,559 --> 01:02:46,160
as well to make sure that they're not

1566
01:02:46,160 --> 01:02:49,039
being um hoodwinked by some

1567
01:02:49,039 --> 01:02:51,680
by some of these third-party vendors and

1568
01:02:51,680 --> 01:02:52,720
i believe that

1569
01:02:52,720 --> 01:02:54,880
after after i got in there and after

1570
01:02:54,880 --> 01:02:56,640
they got it they got a

1571
01:02:56,640 --> 01:02:59,200
a more developed internal team we were

1572
01:02:59,200 --> 01:03:00,880
able to look at better third-party

1573
01:03:00,880 --> 01:03:02,559
vendors and see better reports out of

1574
01:03:02,559 --> 01:03:04,720
them

1575
01:03:09,359 --> 01:03:13,039
any other questions i do have another

1576
01:03:13,039 --> 01:03:14,319
one

1577
01:03:14,319 --> 01:03:17,359
you know it's my impression that um or

1578
01:03:17,359 --> 01:03:19,280
what have you found have you looked in

1579
01:03:19,280 --> 01:03:20,559
the areas of orphaned

1580
01:03:20,559 --> 01:03:23,599
instances and what did you find

1581
01:03:23,599 --> 01:03:26,640
um basically i mean like um vms that

1582
01:03:26,640 --> 01:03:27,760
were no longer

1583
01:03:27,760 --> 01:03:30,880
being like looked after or that are no

1584
01:03:30,880 --> 01:03:31,520
longer

1585
01:03:31,520 --> 01:03:33,200
like for instance like they're no longer

1586
01:03:33,200 --> 01:03:34,799
a private group anymore

1587
01:03:34,799 --> 01:03:37,359
is that like what you're referring to

1588
01:03:37,359 --> 01:03:37,920
yeah

1589
01:03:37,920 --> 01:03:40,240
it's my impression that um you know a

1590
01:03:40,240 --> 01:03:41,760
lot of people probably aren't really

1591
01:03:41,760 --> 01:03:44,160
keeping track of their um

1592
01:03:44,160 --> 01:03:46,000
you know instances very well because

1593
01:03:46,000 --> 01:03:48,640
they've got you know so much

1594
01:03:48,640 --> 01:03:52,079
and a source of vulnerability

1595
01:03:52,079 --> 01:03:54,880
that needs to be highlighted as well and

1596
01:03:54,880 --> 01:03:55,680
i was just curious

1597
01:03:55,680 --> 01:03:58,799
to how much you saw or even

1598
01:03:58,799 --> 01:04:01,039
did you have an awareness to look for it

1599
01:04:01,039 --> 01:04:02,079
so

1600
01:04:02,079 --> 01:04:06,079
so in my own per in my personal

1601
01:04:06,079 --> 01:04:09,440
uh experience i experienced being an

1602
01:04:09,440 --> 01:04:11,200
orphaned um

1603
01:04:11,200 --> 01:04:13,440
person out of the azure directory at one

1604
01:04:13,440 --> 01:04:14,319
point where

1605
01:04:14,319 --> 01:04:16,640
they had me outside of all direct that

1606
01:04:16,640 --> 01:04:18,319
they had me at my own department at one

1607
01:04:18,319 --> 01:04:18,960
point which was

1608
01:04:18,960 --> 01:04:22,559
interesting but now when it comes to

1609
01:04:22,559 --> 01:04:26,799
uh orphaned or or orphan uh

1610
01:04:26,799 --> 01:04:29,920
resources that really depends

1611
01:04:29,920 --> 01:04:32,079
on the asset management of the

1612
01:04:32,079 --> 01:04:33,599
organization

1613
01:04:33,599 --> 01:04:35,520
i've been to some organizations where

1614
01:04:35,520 --> 01:04:37,200
they had um

1615
01:04:37,200 --> 01:04:40,319
a full overview of their assets now they

1616
01:04:40,319 --> 01:04:40,640
knew

1617
01:04:40,640 --> 01:04:43,440
exactly what what each host was uh what

1618
01:04:43,440 --> 01:04:45,280
was spun up or not

1619
01:04:45,280 --> 01:04:48,319
um i had organizations that had a

1620
01:04:48,319 --> 01:04:49,359
somewhat

1621
01:04:49,359 --> 01:04:51,440
of a decent view and i had organized

1622
01:04:51,440 --> 01:04:53,039
i've seen organizations where they had

1623
01:04:53,039 --> 01:04:54,079
no idea

1624
01:04:54,079 --> 01:04:55,599
what was going on in their own internal

1625
01:04:55,599 --> 01:04:58,160
network um

1626
01:04:58,160 --> 01:05:00,640
so in those organizations you know

1627
01:05:00,640 --> 01:05:01,839
there's going to be a lot of

1628
01:05:01,839 --> 01:05:05,039
orphan things i've seen i've seen many

1629
01:05:05,039 --> 01:05:06,319
times

1630
01:05:06,319 --> 01:05:09,599
you know applications or cert or

1631
01:05:09,599 --> 01:05:12,640
services that are completely demo

1632
01:05:12,640 --> 01:05:13,520
applications

1633
01:05:13,520 --> 01:05:16,000
that you know the developers spun up see

1634
01:05:16,000 --> 01:05:16,640
to see if

1635
01:05:16,640 --> 01:05:18,640
to see if something worked and forgot to

1636
01:05:18,640 --> 01:05:20,079
spin it down

1637
01:05:20,079 --> 01:05:23,200
and um these things are often are riped

1638
01:05:23,200 --> 01:05:24,160
with

1639
01:05:24,160 --> 01:05:26,880
uh are full of vulnerabilities uh one

1640
01:05:26,880 --> 01:05:30,079
thing i've seen was i've seen like a

1641
01:05:30,079 --> 01:05:33,119
uh some like an internal ec2 instance

1642
01:05:33,119 --> 01:05:34,319
that had

1643
01:05:34,319 --> 01:05:36,079
like an application that the i think

1644
01:05:36,079 --> 01:05:37,839
developer is working on for college or

1645
01:05:37,839 --> 01:05:39,920
something it was completely unrelated to

1646
01:05:39,920 --> 01:05:41,440
the organization it was like a book

1647
01:05:41,440 --> 01:05:42,960
selling invoice app maybe it was

1648
01:05:42,960 --> 01:05:43,440
something

1649
01:05:43,440 --> 01:05:45,599
to trade himself on something but this

1650
01:05:45,599 --> 01:05:46,960
application

1651
01:05:46,960 --> 01:05:50,640
was was called was a php application

1652
01:05:50,640 --> 01:05:53,599
uh that was calling a system function

1653
01:05:53,599 --> 01:05:55,440
that i was able to go

1654
01:05:55,440 --> 01:05:59,039
uh go we basically exploit this this

1655
01:05:59,039 --> 01:06:01,200
application that nobody knew about

1656
01:06:01,200 --> 01:06:03,920
to go to go pivot to another box or

1657
01:06:03,920 --> 01:06:05,839
pivot on this same box

1658
01:06:05,839 --> 01:06:07,680
um higher privileges because some

1659
01:06:07,680 --> 01:06:09,359
developer wrote something up the test

1660
01:06:09,359 --> 01:06:10,880
and this left it there

1661
01:06:10,880 --> 01:06:15,440
so you know it really really depends on

1662
01:06:15,440 --> 01:06:18,880
the organization's asset management

1663
01:06:18,880 --> 01:06:21,920
and their um and their monitoring of

1664
01:06:21,920 --> 01:06:25,039
what's being upper down there um

1665
01:06:25,039 --> 01:06:27,359
orphan instances or orphan things could

1666
01:06:27,359 --> 01:06:28,880
definitely be out there

1667
01:06:28,880 --> 01:06:31,599
and if they're not using any resource or

1668
01:06:31,599 --> 01:06:32,160
any

1669
01:06:32,160 --> 01:06:34,079
utilization they may go unnoticed for a

1670
01:06:34,079 --> 01:06:36,720
very long time

1671
01:06:44,559 --> 01:06:47,839
any other question

1672
01:06:50,640 --> 01:06:56,960
all right i'm gonna hit stop recording

